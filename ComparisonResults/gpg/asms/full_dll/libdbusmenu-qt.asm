;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2015 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-3677-7074-51			    |
; |		Michalis Polychronakis,	Stony Brook University		    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	DA9A24FA93ABF8E5DDBBAFDCD3C23F70
; Input	CRC32 :	4BCEBAA0

; File Name   :	C:\compspace\compare\gpg\dlls\full\libdbusmenu-qt.dll
; Format      :	Portable executable for	80386 (PE)
; Imagebase   :	6FFC0000
; Section 1. (virtual address 00001000)
; Virtual size			: 0002C53C ( 181564.)
; Section size in file		: 0002C600 ( 181760.)
; Offset to raw	data for section: 00000400
; Flags	60500060: Text Data Executable Readable
; Alignment	: 16 bytes

		include	uni.inc	; see unicode subdir of	ida for	info on	unicode

		.686p
		.mmx
		.model flat
.intel_syntax noprefix

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 6FFC1000h
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


sub_6FFC1000	proc near		; DATA XREF: .CRT:7000000Co

var_1C		= dword	ptr -1Ch

		push	ebx
		sub	esp, 18h
		mov	[esp+1Ch+var_1C], 80h ;	size_t
		call	malloc
		mov	ebx, eax
		mov	[esp+1Ch+var_1C], eax
		call	sub_6FFDAA40
		test	ebx, ebx
		mov	ds:dword_6FFFA3AC, eax
		mov	ds:dword_6FFFA3A8, eax
		mov	eax, 1
		jz	short loc_6FFC1035
		mov	dword ptr [ebx], 0
		xor	al, al

loc_6FFC1035:				; CODE XREF: sub_6FFC1000+2Bj
		add	esp, 18h
		pop	ebx
		retn
sub_6FFC1000	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6FFC1040	proc near		; CODE XREF: sub_6FFC1260+DAp
					; sub_6FFC1260+128p ...

dwMilliseconds	= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	esi
		push	ebx
		sub	esp, 14h
		mov	edx, [esp+1Ch+arg_4]
		test	edx, edx
		jnz	short loc_6FFC10C6
		mov	edx, ds:dword_6FFFA000
		xor	eax, eax
		test	edx, edx
		jle	short loc_6FFC10BE
		sub	edx, 1
		mov	ebx, ds:Sleep
		mov	ds:dword_6FFFA000, edx
		jmp	short loc_6FFC107C
; ---------------------------------------------------------------------------
		align 10h

loc_6FFC1070:				; CODE XREF: sub_6FFC1040+5Dj
		mov	[esp+1Ch+dwMilliseconds], 3E8h ; dwMilliseconds
		call	ebx ; Sleep
		sub	esp, 4

loc_6FFC107C:				; CODE XREF: sub_6FFC1040+28j
		mov	[esp+1Ch+var_14], 0
		mov	[esp+1Ch+var_18], 1
		mov	[esp+1Ch+dwMilliseconds], offset dword_6FFFA3B0
		call	sub_6FFDBC60
		sub	esp, 0Ch
		test	eax, eax
		jnz	short loc_6FFC1070
		mov	eax, ds:dword_6FFFA3B4
		cmp	eax, 2
		jz	loc_6FFC1170
		mov	[esp+1Ch+dwMilliseconds], 1Fh
		call	_amsg_exit
		mov	eax, 1

loc_6FFC10BE:				; CODE XREF: sub_6FFC1040+17j
					; sub_6FFC1040+8Ej
		add	esp, 14h
		pop	ebx
		pop	esi
		retn	0Ch
; ---------------------------------------------------------------------------

loc_6FFC10C6:				; CODE XREF: sub_6FFC1040+Bj
		cmp	edx, 1
		mov	eax, 1
		jnz	short loc_6FFC10BE
		mov	eax, large fs:18h
		mov	esi, ds:Sleep
		mov	ebx, [eax+4]
		jmp	short loc_6FFC10F5
; ---------------------------------------------------------------------------

loc_6FFC10E1:				; CODE XREF: sub_6FFC1040+D2j
		cmp	eax, ebx
		jz	loc_6FFC1238
		mov	[esp+1Ch+dwMilliseconds], 3E8h ; dwMilliseconds
		call	esi ; Sleep
		sub	esp, 4

loc_6FFC10F5:				; CODE XREF: sub_6FFC1040+9Fj
		mov	[esp+1Ch+var_14], 0
		mov	[esp+1Ch+var_18], ebx
		mov	[esp+1Ch+dwMilliseconds], offset dword_6FFFA3B0
		call	sub_6FFDBC60
		sub	esp, 0Ch
		test	eax, eax
		jnz	short loc_6FFC10E1
		xor	ebx, ebx

loc_6FFC1116:				; CODE XREF: sub_6FFC1040+1FDj
		mov	eax, ds:dword_6FFFA3B4
		test	eax, eax
		jz	loc_6FFC11F7
		mov	[esp+1Ch+dwMilliseconds], 1Fh
		call	_amsg_exit

loc_6FFC112F:				; CODE XREF: sub_6FFC1040+1F3j
		test	ebx, ebx
		jz	loc_6FFC1242

loc_6FFC1137:				; CODE XREF: sub_6FFC1040+219j
		mov	eax, ds:off_6FFF9900
		test	eax, eax
		jz	short loc_6FFC115C
		mov	edx, [esp+1Ch+arg_8]
		mov	[esp+1Ch+var_18], 2
		mov	[esp+1Ch+var_14], edx
		mov	edx, [esp+1Ch+arg_0]
		mov	[esp+1Ch+dwMilliseconds], edx
		call	eax ; TlsCallback_0
		sub	esp, 0Ch

loc_6FFC115C:				; CODE XREF: sub_6FFC1040+FEj
		add	ds:dword_6FFFA000, 1
		mov	eax, 1
		add	esp, 14h
		pop	ebx
		pop	esi
		retn	0Ch
; ---------------------------------------------------------------------------

loc_6FFC1170:				; CODE XREF: sub_6FFC1040+67j
		mov	eax, ds:dword_6FFFA3AC
		mov	[esp+1Ch+dwMilliseconds], eax
		call	sub_6FFDAA30
		test	eax, eax
		mov	ebx, eax
		jz	short loc_6FFC11C9
		mov	eax, ds:dword_6FFFA3A8
		mov	[esp+1Ch+dwMilliseconds], eax
		call	sub_6FFDAA30
		mov	esi, eax

loc_6FFC1192:				; CODE XREF: sub_6FFC1040+15Dj
		sub	esi, 4
		cmp	ebx, esi
		ja	short loc_6FFC11A8

loc_6FFC1199:				; CODE XREF: sub_6FFC1040+166j
		mov	eax, [esi]
		test	eax, eax
		jz	short loc_6FFC1192
		sub	esi, 4
		call	eax
		cmp	ebx, esi
		jbe	short loc_6FFC1199

loc_6FFC11A8:				; CODE XREF: sub_6FFC1040+157j
		mov	[esp+1Ch+dwMilliseconds], ebx ;	void *
		nop
		lea	esi, [esi+0]
		call	free
		mov	ds:dword_6FFFA3A8, 0
		mov	ds:dword_6FFFA3AC, 0

loc_6FFC11C9:				; CODE XREF: sub_6FFC1040+141j
		mov	ds:dword_6FFFA3B4, 0
		mov	[esp+1Ch+var_18], 0
		mov	[esp+1Ch+dwMilliseconds], offset dword_6FFFA3B0
		call	sub_6FFDBC90
		mov	eax, 1
		sub	esp, 8
		add	esp, 14h
		pop	ebx
		pop	esi
		retn	0Ch
; ---------------------------------------------------------------------------

loc_6FFC11F7:				; CODE XREF: sub_6FFC1040+DDj
		mov	ds:dword_6FFFA3B4, 1
		mov	[esp+1Ch+var_18], offset dword_70000010
		mov	[esp+1Ch+dwMilliseconds], offset dword_70000008
		call	_initterm
		mov	[esp+1Ch+var_18], offset dword_70000004
		mov	[esp+1Ch+dwMilliseconds], offset dword_70000000
		call	_initterm
		mov	ds:dword_6FFFA3B4, 2
		jmp	loc_6FFC112F
; ---------------------------------------------------------------------------

loc_6FFC1238:				; CODE XREF: sub_6FFC1040+A3j
		mov	ebx, 1
		jmp	loc_6FFC1116
; ---------------------------------------------------------------------------

loc_6FFC1242:				; CODE XREF: sub_6FFC1040+F1j
		mov	[esp+1Ch+var_18], 0
		mov	[esp+1Ch+dwMilliseconds], offset dword_6FFFA3B0
		call	sub_6FFDBC90
		sub	esp, 8
		jmp	loc_6FFC1137
sub_6FFC1040	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6FFC1260	proc near		; CODE XREF: DllEntryPoint+1Ep

var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4

		sub	esp, 2Ch
		test	edx, edx
		mov	[esp+2Ch+var_10], ebx
		mov	ebx, eax
		mov	[esp+2Ch+var_C], esi
		mov	esi, edx
		mov	[esp+2Ch+var_4], ebp
		mov	ebp, ecx
		mov	[esp+2Ch+var_8], edi
		mov	dword_6FFEE050,	edx
		jnz	short loc_6FFC12E0
		mov	eax, ds:dword_6FFFA000
		test	eax, eax
		jz	loc_6FFC13B7
		call	sub_6FFDAC00

loc_6FFC1295:				; CODE XREF: sub_6FFC1260+90j
		mov	[esp+2Ch+var_24], ebp
		mov	[esp+2Ch+var_28], esi
		mov	[esp+2Ch+var_2C], ebx
		call	sub_6FFDAF30
		sub	esp, 0Ch
		cmp	esi, 3
		mov	edi, eax
		jz	loc_6FFC13A0
		test	esi, esi
		jz	loc_6FFC13A0

loc_6FFC12BB:				; CODE XREF: sub_6FFC1260+B2j
					; sub_6FFC1260+F9j ...
		mov	eax, edi
		mov	ebx, [esp+2Ch+var_10]
		mov	dword_6FFEE050,	0FFFFFFFFh
		mov	esi, [esp+2Ch+var_C]
		mov	edi, [esp+2Ch+var_8]
		mov	ebp, [esp+2Ch+var_4]
		add	esp, 2Ch
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6FFC12E0:				; CODE XREF: sub_6FFC1260+21j
		lea	eax, [edx-1]
		cmp	eax, 1
		jbe	short loc_6FFC1360

loc_6FFC12E8:				; CODE XREF: sub_6FFC1260+134j
		call	sub_6FFDAC00
		cmp	esi, 1
		jnz	short loc_6FFC1295
		call	sub_6FFDAF10
		mov	[esp+2Ch+var_24], ebp
		mov	[esp+2Ch+var_28], 1
		mov	[esp+2Ch+var_2C], ebx
		call	sub_6FFDAF30
		sub	esp, 0Ch
		test	eax, eax
		mov	edi, eax
		jnz	short loc_6FFC12BB
		mov	[esp+2Ch+var_24], ebp
		mov	[esp+2Ch+var_28], 0
		mov	[esp+2Ch+var_2C], ebx
		call	sub_6FFDAF30
		sub	esp, 0Ch
		mov	[esp+2Ch+var_24], ebp
		mov	[esp+2Ch+var_28], 0
		mov	[esp+2Ch+var_2C], ebx
		call	sub_6FFC1040
		sub	esp, 0Ch
		mov	[esp+2Ch+var_24], ebp
		mov	[esp+2Ch+var_28], 0
		mov	[esp+2Ch+var_2C], ebx
		call	sub_6FFDAF40
		sub	esp, 0Ch
		jmp	loc_6FFC12BB
; ---------------------------------------------------------------------------
		align 10h

loc_6FFC1360:				; CODE XREF: sub_6FFC1260+86j
		mov	[esp+2Ch+var_24], ecx
		mov	[esp+2Ch+var_28], edx
		mov	[esp+2Ch+var_2C], ebx
		call	sub_6FFDAF40
		sub	esp, 0Ch
		test	eax, eax
		mov	edi, eax
		jz	loc_6FFC12BB
		mov	[esp+2Ch+var_24], ebp
		mov	[esp+2Ch+var_28], esi
		mov	[esp+2Ch+var_2C], ebx
		call	sub_6FFC1040
		sub	esp, 0Ch
		test	eax, eax
		mov	edi, eax
		jnz	loc_6FFC12E8
		jmp	loc_6FFC12BB
; ---------------------------------------------------------------------------
		align 10h

loc_6FFC13A0:				; CODE XREF: sub_6FFC1260+4Dj
					; sub_6FFC1260+55j
		mov	[esp+2Ch+var_24], ebp
		mov	[esp+2Ch+var_28], esi
		mov	[esp+2Ch+var_2C], ebx
		call	sub_6FFC1040
		sub	esp, 0Ch
		test	eax, eax
		jnz	short loc_6FFC13C0

loc_6FFC13B7:				; CODE XREF: sub_6FFC1260+2Aj
		xor	edi, edi
		jmp	loc_6FFC12BB
; ---------------------------------------------------------------------------
		align 10h

loc_6FFC13C0:				; CODE XREF: sub_6FFC1260+155j
		test	edi, edi
		jz	loc_6FFC12BB
		mov	[esp+2Ch+var_24], ebp
		mov	[esp+2Ch+var_28], esi
		mov	[esp+2Ch+var_2C], ebx
		call	sub_6FFDAF40
		sub	esp, 0Ch
		mov	edi, eax
		jmp	loc_6FFC12BB
sub_6FFC1260	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; BOOL __stdcall DllEntryPoint(HINSTANCE hinstDLL, DWORD fdwReason, LPVOID lpReserved)
		public DllEntryPoint
DllEntryPoint	proc near

var_10		= dword	ptr -10h
hinstDLL	= dword	ptr  4
fdwReason	= dword	ptr  8
lpReserved	= dword	ptr  0Ch

		sub	esp, 1Ch
		mov	edx, [esp+1Ch+fdwReason]
		mov	ds:dword_6FFFA018, 0
		cmp	edx, 1
		jz	short loc_6FFC1420

loc_6FFC1406:				; CODE XREF: DllEntryPoint+3Dj
		mov	ecx, [esp+1Ch+lpReserved]
		mov	eax, [esp+1Ch+hinstDLL]
		call	sub_6FFC1260
		add	esp, 1Ch
		retn	0Ch
; ---------------------------------------------------------------------------
		align 10h

loc_6FFC1420:				; CODE XREF: DllEntryPoint+14j
		mov	[esp+1Ch+var_10], edx
		call	sub_6FFDAFE0
		mov	edx, [esp+1Ch+var_10]
		jmp	short loc_6FFC1406
DllEntryPoint	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_6FFC1430	proc near		; CODE XREF: sub_6FFDBE00+6p
		push	ebp
		mov	ebp, esp
		sub	esp, 18h
		mov	eax, dword_6FFF2ACC
		test	eax, eax
		jz	short locret_6FFC147B
		mov	dword ptr [esp], offset	ModuleName ; "libgcj_s.dll"
		call	ds:GetModuleHandleA
		mov	edx, eax
		sub	esp, 4
		test	edx, edx
		mov	eax, 0
		jz	short loc_6FFC146E
		mov	dword ptr [esp+4], offset ProcName ; "_Jv_RegisterClasses"
		mov	[esp], edx	; hModule
		call	ds:GetProcAddress
		sub	esp, 8

loc_6FFC146E:				; CODE XREF: sub_6FFC1430+28j
		test	eax, eax
		jz	short locret_6FFC147B
		mov	dword ptr [esp], offset	dword_6FFF2ACC
		call	eax

locret_6FFC147B:			; CODE XREF: sub_6FFC1430+Dj
					; sub_6FFC1430+40j
		leave
		retn
sub_6FFC1430	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl sub_6FFC1480()
sub_6FFC1480	proc near		; DATA XREF: sub_6FFDBE00+Bo
		push	ebp
		mov	ebp, esp
		pop	ebp
		retn
sub_6FFC1480	endp

; ---------------------------------------------------------------------------
		align 10h
		sub	esp, 0Ch
		mov	eax, [esp+10h]
		test	eax, eax
		jz	short loc_6FFC14A5
		mov	edx, [eax]
		mov	eax, [edx+10h]
		add	esp, 0Ch
		jmp	eax
; ---------------------------------------------------------------------------

loc_6FFC14A5:				; CODE XREF: .text:6FFC1499j
		add	esp, 0Ch
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6FFC14B0:				; DATA XREF: .text:6FFEC804o
		mov	eax, ds:_ZN7QObject16staticMetaObjectE
		mov	dword_6FFEE000,	eax
		retn
; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6FFC14C0	proc near		; DATA XREF: .rdata:6FFF9E6Co

var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		sub	esp, 1Ch
		xor	eax, eax
		mov	edx, [esp+1Ch+arg_4]
		mov	[esp+1Ch+var_4], ebp
		mov	ebp, [esp+1Ch+arg_0]
		mov	[esp+1Ch+var_10], ebx
		mov	[esp+1Ch+var_C], esi
		test	edx, edx
		mov	[esp+1Ch+var_8], edi
		jz	short loc_6FFC14FF
		mov	ecx, 9
		mov	esi, edx
		mov	edi, offset aDbusmenu ;	"DBusMenu"
		repe cmpsb
		setnbe	al
		setb	cl
		mov	esi, eax
		mov	eax, ebp
		mov	ebx, esi
		cmp	bl, cl
		jnz	short loc_6FFC1513

loc_6FFC14FF:				; CODE XREF: sub_6FFC14C0+1Fj
		mov	ebx, [esp+1Ch+var_10]
		mov	esi, [esp+1Ch+var_C]
		mov	edi, [esp+1Ch+var_8]
		mov	ebp, [esp+1Ch+var_4]
		add	esp, 1Ch
		retn
; ---------------------------------------------------------------------------

loc_6FFC1513:				; CODE XREF: sub_6FFC14C0+3Dj
		mov	eax, ds:__imp__ZN7QObject11qt_metacastEPKc
		mov	ebx, [esp+1Ch+var_10]
		mov	esi, [esp+1Ch+var_C]
		mov	edi, [esp+1Ch+var_8]
		mov	ebp, [esp+1Ch+var_4]
		add	esp, 1Ch
		jmp	eax
sub_6FFC14C0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6FFC1530	proc near		; DATA XREF: .rdata:off_6FFF9E68o

var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
arg_0		= dword	ptr  4

		push	ebx
		sub	esp, 18h
		mov	ebx, [esp+1Ch+arg_0]
		mov	eax, [ebx+4]
		test	eax, eax
		jz	short loc_6FFC1560

loc_6FFC153F:				; CODE XREF: sub_6FFC1530+50j
		mov	eax, [eax+18h]
		test	eax, eax
		jz	short loc_6FFC1550
		add	esp, 18h
		pop	ebx
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6FFC1550:				; CODE XREF: sub_6FFC1530+14j
		mov	eax, offset dword_6FFEE000
		add	esp, 18h
		pop	ebx
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6FFC1560:				; CODE XREF: sub_6FFC1530+Dj
		mov	[esp+1Ch+var_14], 70h
		mov	[esp+1Ch+var_18], offset aRIncludeQtc_12 ; "R:/include/QtCore/qscopedpointer.h"
		mov	[esp+1Ch+var_1C], offset aD_3 ;	"d"
		call	ds:_Z9qt_assertPKcS0_i
		mov	eax, [ebx+4]
		jmp	short loc_6FFC153F
sub_6FFC1530	endp

; ---------------------------------------------------------------------------
		align 10h
		sub	esp, 1Ch
		mov	eax, [esp+20h]
		mov	edx, [eax+0Ch]
		mov	[esp+8], edx
		mov	edx, [esp+24h]
		mov	[esp+4], edx
		mov	eax, [eax+8]
		mov	eax, [eax+8]
		mov	[esp], eax
		call	sub_6FFC4220
		add	esp, 1Ch
		retn
; ---------------------------------------------------------------------------
		align 10h
		sub	esp, 0Ch
		mov	eax, [esp+10h]
		mov	eax, [eax+8]
		mov	eax, [eax+8]
		mov	[esp+10h], eax
		add	esp, 0Ch
		jmp	sub_6FFC2030
; ---------------------------------------------------------------------------
		align 10h
		sub	esp, 1Ch
		mov	eax, [esp+20h]
		mov	edx, [eax+0Ch]
		mov	[esp+8], edx
		mov	edx, [esp+24h]
		mov	[esp+4], edx
		mov	eax, [eax+8]
		mov	eax, [eax+8]
		mov	[esp], eax
		call	sub_6FFC4C20
		add	esp, 1Ch
		retn
; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6FFC1610	proc near		; DATA XREF: .rdata:6FFF9E74o

arg_0		= dword	ptr  4

		sub	esp, 0Ch
		mov	eax, [esp+0Ch+arg_0]
		mov	dword ptr [eax], offset	off_6FFF9E68
		mov	eax, ds:_ZN7QObjectD2Ev
		add	esp, 0Ch
		jmp	eax
sub_6FFC1610	endp

; ---------------------------------------------------------------------------
		align 10h
		sub	esp, 0Ch
		mov	eax, [esp+10h]
		mov	dword ptr [eax], offset	off_6FFF9E68
		mov	eax, ds:_ZN7QObjectD2Ev
		add	esp, 0Ch
		jmp	eax
; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6FFC1650	proc near		; DATA XREF: .rdata:6FFF9E78o

var_1C		= dword	ptr -1Ch
arg_0		= dword	ptr  4

		push	ebx
		sub	esp, 18h
		mov	ebx, [esp+1Ch+arg_0]
		mov	dword ptr [ebx], offset	off_6FFF9E68
		mov	[esp+1Ch+var_1C], ebx
		call	ds:_ZN7QObjectD2Ev
		mov	[esp+1Ch+arg_0], ebx
		add	esp, 18h
		pop	ebx
		jmp	sub_6FFEAE50
sub_6FFC1650	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_6FFC1680	proc near		; CODE XREF: sub_6FFC56B0+D0p

var_40		= dword	ptr -40h
var_3C		= byte ptr -3Ch
var_38		= dword	ptr -38h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_8		= byte ptr -8
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h

		push	ebp
		mov	ebp, esp
		sub	esp, 68h
		lea	eax, [ebp+var_8]
		mov	[ebp+var_1C], eax
		lea	eax, [ebp+var_3C]
		mov	[esp], eax
		mov	[ebp+var_24], offset sub_6FFEC1F0
		mov	[ebp+var_20], offset dword_6FFEC830
		mov	[ebp+var_18], offset sub_6FFC1745
		mov	[ebp+var_14], esp
		call	_Unwind_SjLj_Register
		mov	edx, [ebp+arg_4]
		mov	eax, [ebp+arg_0]
		mov	[ebp+var_38], 0FFFFFFFFh
		mov	[esp+4], edx
		mov	[esp], eax
		call	ds:_ZN7QObjectC2EPS_
		mov	edx, [ebp+arg_0]
		mov	eax, [ebp+arg_8]
		mov	dword ptr [edx], offset	off_6FFF9E68
		mov	[edx+8], eax
		mov	eax, [ebp+arg_C]
		mov	[edx+0Ch], eax
		mov	eax, [ebp+arg_4]
		mov	[esp+4], edx
		mov	[ebp+var_38], 1
		mov	[esp], eax
		call	ds:_ZN7QObject18installEventFilterEPS_
		mov	dword ptr [esp], offset	a1deleteme ; "1deleteMe()"
		call	ds:_Z13qFlagLocationPKc
		mov	[ebp+var_40], eax
		mov	dword ptr [esp], offset	a2destroyedQobj	; "2destroyed(QObject*)"
		call	ds:_Z13qFlagLocationPKc
		mov	edx, [ebp+var_40]
		mov	dword ptr [esp+10h], 0
		mov	[esp+4], eax
		mov	[esp+0Ch], edx
		mov	edx, [ebp+arg_0]
		mov	[esp+8], edx
		mov	eax, [edx+8]
		mov	[esp], eax
		call	ds:_ZN7QObject7connectEPKS_PKcS1_S3_N2Qt14ConnectionTypeE
		lea	eax, [ebp+var_3C]
		mov	[esp], eax
		call	_Unwind_SjLj_Unregister
		leave
		retn
sub_6FFC1680	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn

sub_6FFC1745	proc near		; DATA XREF: sub_6FFC1680+20o
		add	ebp, 8
		mov	eax, [ebp-34h]
		mov	edx, [ebp+8]
		mov	dword ptr [ebp-38h], 0
		mov	[ebp-44h], eax
		mov	[esp+0], edx
		call	ds:_ZN7QObjectD2Ev
		mov	eax, [ebp-44h]
		mov	dword ptr [ebp-38h], 0FFFFFFFFh
		mov	[esp+0], eax
		call	_Unwind_SjLj_Resume
sub_6FFC1745	endp

; ---------------------------------------------------------------------------
		align 10h
		push	ebp
		mov	ebp, esp
		sub	esp, 68h
		lea	eax, [ebp-8]
		mov	[ebp-1Ch], eax
		lea	eax, [ebp-3Ch]
		mov	[esp], eax
		mov	dword ptr [ebp-24h], offset sub_6FFEC1F0
		mov	dword ptr [ebp-20h], offset word_6FFEC836
		mov	dword ptr [ebp-18h], offset loc_6FFC1845
		mov	[ebp-14h], esp
		call	_Unwind_SjLj_Register
		mov	edx, [ebp+0Ch]
		mov	eax, [ebp+8]
		mov	dword ptr [ebp-38h], 0FFFFFFFFh
		mov	[esp+4], edx
		mov	[esp], eax
		call	ds:_ZN7QObjectC2EPS_
		mov	edx, [ebp+8]
		mov	eax, [ebp+10h]
		mov	dword ptr [edx], offset	off_6FFF9E68
		mov	[edx+8], eax
		mov	eax, [ebp+14h]
		mov	[edx+0Ch], eax
		mov	eax, [ebp+0Ch]
		mov	[esp+4], edx
		mov	dword ptr [ebp-38h], 1
		mov	[esp], eax
		call	ds:_ZN7QObject18installEventFilterEPS_
		mov	dword ptr [esp], offset	a1deleteme ; "1deleteMe()"
		call	ds:_Z13qFlagLocationPKc
		mov	[ebp-40h], eax
		mov	dword ptr [esp], offset	a2destroyedQobj	; "2destroyed(QObject*)"
		call	ds:_Z13qFlagLocationPKc
		mov	edx, [ebp-40h]
		mov	dword ptr [esp+10h], 0
		mov	[esp+4], eax
		mov	[esp+0Ch], edx
		mov	edx, [ebp+8]
		mov	[esp+8], edx
		mov	eax, [edx+8]
		mov	[esp], eax
		call	ds:_ZN7QObject7connectEPKS_PKcS1_S3_N2Qt14ConnectionTypeE
		lea	eax, [ebp-3Ch]
		mov	[esp], eax
		call	_Unwind_SjLj_Unregister
		leave
		retn
; ---------------------------------------------------------------------------

loc_6FFC1845:				; DATA XREF: .text:6FFC17A0o
		add	ebp, 8
		mov	eax, [ebp-34h]
		mov	edx, [ebp+8]
		mov	dword ptr [ebp-38h], 0
		mov	[ebp-44h], eax
		mov	[esp], edx
		call	ds:_ZN7QObjectD2Ev
		mov	eax, [ebp-44h]
		mov	dword ptr [ebp-38h], 0FFFFFFFFh
		mov	[esp], eax
		call	_Unwind_SjLj_Resume
; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6FFC1880	proc near		; DATA XREF: .rdata:6FFF9E80o

var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
arg_0		= dword	ptr  4
arg_8		= dword	ptr  0Ch

		push	ebx
		sub	esp, 18h
		mov	edx, [esp+1Ch+arg_8]
		mov	ebx, [esp+1Ch+arg_0]
		movzx	eax, word ptr [edx+8]
		lea	ecx, [eax-71h]
		cmp	ecx, 2
		ja	short loc_6FFC18B7
		cmp	eax, 72h
		jz	short loc_6FFC18C0
		cmp	eax, 73h
		jz	short loc_6FFC18E3
		mov	eax, [edx+0Ch]
		mov	[esp+1Ch+var_18], eax
		mov	eax, [ebx+8]
		mov	eax, [eax+8]
		mov	[esp+1Ch+var_1C], eax
		call	sub_6FFC2030

loc_6FFC18B7:				; CODE XREF: sub_6FFC1880+16j
		xor	eax, eax
		add	esp, 18h
		pop	ebx
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6FFC18C0:				; CODE XREF: sub_6FFC1880+1Bj
		mov	eax, [ebx+0Ch]
		mov	[esp+1Ch+var_14], eax
		mov	eax, [edx+0Ch]
		mov	[esp+1Ch+var_18], eax
		mov	eax, [ebx+8]
		mov	eax, [eax+8]
		mov	[esp+1Ch+var_1C], eax
		call	sub_6FFC4C20
		xor	eax, eax
		add	esp, 18h
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_6FFC18E3:				; CODE XREF: sub_6FFC1880+20j
		mov	eax, [ebx+0Ch]
		mov	[esp+1Ch+var_14], eax
		mov	eax, [edx+0Ch]
		mov	[esp+1Ch+var_18], eax
		mov	eax, [ebx+8]
		mov	eax, [eax+8]
		mov	[esp+1Ch+var_1C], eax
		call	sub_6FFC4220
		xor	eax, eax
		add	esp, 18h
		pop	ebx
		retn
sub_6FFC1880	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6FFC1910	proc near		; CODE XREF: sub_6FFC1990+70p
					; DATA XREF: .rdata:6FFF31ACo

var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		sub	esp, 1Ch
		mov	eax, [esp+1Ch+arg_4]
		mov	[esp+1Ch+var_8], ebx
		mov	ebx, [esp+1Ch+arg_0]
		mov	[esp+1Ch+var_4], esi
		mov	esi, [esp+1Ch+arg_8]
		test	eax, eax
		jz	short loc_6FFC1937

loc_6FFC192B:				; CODE XREF: sub_6FFC1910+3Ej
					; sub_6FFC1910+42j
		mov	ebx, [esp+1Ch+var_8]
		mov	esi, [esp+1Ch+var_4]
		add	esp, 1Ch
		retn
; ---------------------------------------------------------------------------

loc_6FFC1937:				; CODE XREF: sub_6FFC1910+19j
		mov	[esp+1Ch+var_18], ebx
		mov	[esp+1Ch+var_1C], offset dword_6FFEE000
		call	ds:_ZNK11QMetaObject4castEP7QObject
		test	eax, eax
		jz	short loc_6FFC1970

loc_6FFC194C:				; CODE XREF: sub_6FFC1910+7Dj
		test	esi, esi
		jnz	short loc_6FFC192B
		test	ebx, ebx
		jz	short loc_6FFC192B
		mov	eax, [ebx]
		mov	[esp+1Ch+arg_0], ebx
		mov	esi, [esp+1Ch+var_4]
		mov	ebx, [esp+1Ch+var_8]
		mov	eax, [eax+10h]
		add	esp, 1Ch
		jmp	eax
; ---------------------------------------------------------------------------
		align 10h

loc_6FFC1970:				; CODE XREF: sub_6FFC1910+3Aj
		mov	[esp+1Ch+var_14], 2Eh
		mov	[esp+1Ch+var_18], offset aRBuildKdesup_4 ; "R:/build/kdesupport/dbusmenu-qt-0.9.2/w"...
		mov	[esp+1Ch+var_1C], offset aStaticmetaob_3 ; "staticMetaObject.cast(_o)"
		call	ds:_Z9qt_assertPKcS0_i
		jmp	short loc_6FFC194C
sub_6FFC1910	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6FFC1990	proc near		; DATA XREF: .rdata:6FFF9E70o

var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		sub	esp, 2Ch
		mov	[esp+2Ch+var_C], ebx
		mov	eax, [esp+2Ch+arg_8]
		mov	[esp+2Ch+var_8], esi
		mov	ebx, [esp+2Ch+arg_4]
		mov	[esp+2Ch+var_4], edi
		mov	esi, [esp+2Ch+arg_0]
		mov	edi, [esp+2Ch+arg_C]
		mov	[esp+2Ch+var_24], eax
		mov	[esp+2Ch+var_28], ebx
		mov	[esp+2Ch+var_2C], esi
		mov	[esp+2Ch+var_20], edi
		call	ds:__imp__ZN7QObject11qt_metacallEN11QMetaObject4CallEiPPv
		test	eax, eax
		js	short loc_6FFC19D5
		test	ebx, ebx
		jnz	short loc_6FFC19D5
		test	eax, eax
		xchg	ax, ax
		jz	short loc_6FFC19E5

loc_6FFC19D2:				; CODE XREF: sub_6FFC1990+79j
		sub	eax, 1

loc_6FFC19D5:				; CODE XREF: sub_6FFC1990+36j
					; sub_6FFC1990+3Aj
		mov	ebx, [esp+2Ch+var_C]
		mov	esi, [esp+2Ch+var_8]
		mov	edi, [esp+2Ch+var_4]
		add	esp, 2Ch
		retn
; ---------------------------------------------------------------------------

loc_6FFC19E5:				; CODE XREF: sub_6FFC1990+40j
		mov	[esp+2Ch+var_10], eax
		mov	[esp+2Ch+var_20], edi
		mov	[esp+2Ch+var_24], 0
		mov	[esp+2Ch+var_28], 0
		mov	[esp+2Ch+var_2C], esi
		call	sub_6FFC1910
		mov	eax, [esp+2Ch+var_10]
		jmp	short loc_6FFC19D2
sub_6FFC1990	endp

; ---------------------------------------------------------------------------
		align 10h

loc_6FFC1A10:				; DATA XREF: .text:6FFEC808o
		mov	eax, ds:_ZN7QObject16staticMetaObjectE
		mov	_ZN16DBusMenuExporter16staticMetaObjectE, eax
		retn
; ---------------------------------------------------------------------------
		align 10h
; Exported entry   2. _ZN16DBusMenuExporter11qt_metacastEPKc

; =============== S U B	R O U T	I N E =======================================


		public _ZN16DBusMenuExporter11qt_metacastEPKc
_ZN16DBusMenuExporter11qt_metacastEPKc proc near ; DATA	XREF: .rdata:6FFF9D6Co

var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		sub	esp, 1Ch
		xor	eax, eax
		mov	edx, [esp+1Ch+arg_4]
		mov	[esp+1Ch+var_4], ebp
		mov	ebp, [esp+1Ch+arg_0]
		mov	[esp+1Ch+var_10], ebx
		mov	[esp+1Ch+var_C], esi
		test	edx, edx
		mov	[esp+1Ch+var_8], edi
		jz	short loc_6FFC1A5F
		mov	ecx, 11h
		mov	esi, edx
		mov	edi, offset aDbusmenuexport ; "DBusMenuExporter"
		repe cmpsb
		setnbe	al
		setb	cl
		mov	esi, eax
		mov	eax, ebp
		mov	ebx, esi
		cmp	bl, cl
		jnz	short loc_6FFC1A73

loc_6FFC1A5F:				; CODE XREF: _ZN16DBusMenuExporter11qt_metacastEPKc+1Fj
		mov	ebx, [esp+1Ch+var_10]
		mov	esi, [esp+1Ch+var_C]
		mov	edi, [esp+1Ch+var_8]
		mov	ebp, [esp+1Ch+var_4]
		add	esp, 1Ch
		retn
; ---------------------------------------------------------------------------

loc_6FFC1A73:				; CODE XREF: _ZN16DBusMenuExporter11qt_metacastEPKc+3Dj
		mov	eax, ds:__imp__ZN7QObject11qt_metacastEPKc
		mov	ebx, [esp+1Ch+var_10]
		mov	esi, [esp+1Ch+var_C]
		mov	edi, [esp+1Ch+var_8]
		mov	ebp, [esp+1Ch+var_4]
		add	esp, 1Ch
		jmp	eax
_ZN16DBusMenuExporter11qt_metacastEPKc endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  42. _ZNK16DBusMenuExporter10metaObjectEv

; =============== S U B	R O U T	I N E =======================================


		public _ZNK16DBusMenuExporter10metaObjectEv
_ZNK16DBusMenuExporter10metaObjectEv proc near ; DATA XREF: .rdata:off_6FFF9D68o

var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
arg_0		= dword	ptr  4

		push	ebx
		sub	esp, 18h
		mov	ebx, [esp+1Ch+arg_0]
		mov	eax, [ebx+4]
		test	eax, eax
		jz	short loc_6FFC1AC0

loc_6FFC1A9F:				; CODE XREF: _ZNK16DBusMenuExporter10metaObjectEv+50j
		mov	eax, [eax+18h]
		test	eax, eax
		jz	short loc_6FFC1AB0
		add	esp, 18h
		pop	ebx
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6FFC1AB0:				; CODE XREF: _ZNK16DBusMenuExporter10metaObjectEv+14j
		mov	eax, offset _ZN16DBusMenuExporter16staticMetaObjectE
		add	esp, 18h
		pop	ebx
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6FFC1AC0:				; CODE XREF: _ZNK16DBusMenuExporter10metaObjectEv+Dj
		mov	[esp+1Ch+var_14], 70h
		mov	[esp+1Ch+var_18], offset aRIncludeQtcore ; "R:/include/QtCore/qscopedpointer.h"
		mov	[esp+1Ch+var_1C], offset aD ; "d"
		call	ds:_Z9qt_assertPKcS0_i
		mov	eax, [ebx+4]
		jmp	short loc_6FFC1A9F
_ZNK16DBusMenuExporter10metaObjectEv endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  43. _ZNK16DBusMenuExporter6statusEv

; =============== S U B	R O U T	I N E =======================================


		public _ZNK16DBusMenuExporter6statusEv
_ZNK16DBusMenuExporter6statusEv	proc near

var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	ebx
		sub	esp, 18h
		mov	eax, [esp+1Ch+arg_4]
		mov	ebx, [esp+1Ch+arg_0]
		mov	eax, [eax+8]
		mov	eax, [eax+8]
		mov	[esp+1Ch+var_1C], ebx
		mov	[esp+1Ch+var_18], eax
		call	sub_6FFC8230
		mov	eax, ebx
		sub	esp, 4
		add	esp, 18h
		pop	ebx
		retn	4
_ZNK16DBusMenuExporter6statusEv	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  11. _ZN16DBusMenuExporter9setStatusERK7QString

; =============== S U B	R O U T	I N E =======================================


		public _ZN16DBusMenuExporter9setStatusERK7QString
_ZN16DBusMenuExporter9setStatusERK7QString proc	near

arg_0		= dword	ptr  4

		sub	esp, 0Ch
		mov	eax, [esp+0Ch+arg_0]
		mov	eax, [eax+8]
		mov	eax, [eax+8]
		mov	[esp+0Ch+arg_0], eax
		add	esp, 0Ch
		jmp	sub_6FFCBEA0
_ZN16DBusMenuExporter9setStatusERK7QString endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6FFC1B40	proc near		; CODE XREF: sub_6FFC84C0+16Ap
					; sub_6FFC9E50+4Fp ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	esi
		push	ebx
		sub	esp, 4
		mov	ecx, [esp+0Ch+arg_4]
		mov	eax, [esp+0Ch+arg_0]
		test	ecx, ecx
		jz	short loc_6FFC1BA4
		mov	edx, [eax+14h]
		mov	eax, [edx+3Ch]
		test	eax, eax
		jnz	short loc_6FFC1B63

loc_6FFC1B5B:				; CODE XREF: sub_6FFC1B40+28j
					; sub_6FFC1B40+43j ...
		add	esp, 4
		xor	eax, eax
		pop	ebx
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_6FFC1B63:				; CODE XREF: sub_6FFC1B40+19j
		mov	ebx, [edx+38h]
		test	ebx, ebx
		js	short loc_6FFC1B5B
		mov	esi, edx

loc_6FFC1B6C:				; CODE XREF: sub_6FFC1B40+3Fj
		mov	eax, [esi+ebx*4+4]
		cmp	edx, eax
		jz	short loc_6FFC1BBA

loc_6FFC1B74:				; CODE XREF: sub_6FFC1B40+78j
		cmp	ecx, [eax-8]
		jg	short loc_6FFC1BB0

loc_6FFC1B79:				; CODE XREF: sub_6FFC1B40+7Cj
		sub	ebx, 1
		cmp	ebx, 0FFFFFFFFh
		jnz	short loc_6FFC1B6C
		cmp	edx, eax
		jz	short loc_6FFC1B5B
		cmp	ecx, [eax-8]
		lea	edx, [eax-8]
		jl	short loc_6FFC1B5B
		mov	eax, [edx+4]
		test	eax, eax
		jz	short loc_6FFC1B5B
		mov	[esp+0Ch+arg_0], eax
		mov	eax, ds:_ZNK7QAction4menuEv
		add	esp, 4
		pop	ebx
		pop	esi
		jmp	eax
; ---------------------------------------------------------------------------

loc_6FFC1BA4:				; CODE XREF: sub_6FFC1B40+Fj
		mov	eax, [eax+0Ch]
		add	esp, 4
		pop	ebx
		pop	esi
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6FFC1BB0:				; CODE XREF: sub_6FFC1B40+37j
		mov	esi, eax
		mov	eax, [esi+ebx*4+4]
		cmp	edx, eax
		jnz	short loc_6FFC1B74

loc_6FFC1BBA:				; CODE XREF: sub_6FFC1B40+32j
		mov	eax, edx
		jmp	short loc_6FFC1B79
sub_6FFC1B40	endp

; ---------------------------------------------------------------------------
		align 10h
		sub	esp, 3Ch
		mov	[esp+34h], edi
		mov	edi, [esp+40h]
		mov	[esp+2Ch], ebx
		mov	ebx, [esp+44h]
		mov	[esp+38h], ebp
		mov	[esp+30h], esi
		mov	esi, [edi+30h]
		mov	eax, [esi+18h]
		mov	ebp, esi
		mov	ecx, esi
		test	eax, eax
		mov	[esp+1Ch], eax
		jz	short loc_6FFC1C27
		xor	edx, edx
		mov	eax, ebx
		div	dword ptr [esp+1Ch]
		mov	ebp, edx
		shl	ebp, 2
		add	ebp, [esi+4]
		mov	ecx, [ebp+0]
		cmp	ecx, esi
		jz	short loc_6FFC1C0A
		mov	eax, [ecx]
		test	eax, eax
		jz	short loc_6FFC1C65

loc_6FFC1C0A:				; CODE XREF: .text:6FFC1C02j
					; .text:6FFC1C85j
		mov	eax, [edi+30h]
		cmp	ecx, eax
		jz	short loc_6FFC1C44
		cmp	ebx, [ecx+4]
		jz	short loc_6FFC1C2B

loc_6FFC1C16:				; CODE XREF: .text:6FFC1C21j
		mov	edx, ecx
		mov	ecx, [ecx]
		cmp	ecx, eax
		jz	short loc_6FFC1C40
		cmp	ebx, [ecx+4]
		jnz	short loc_6FFC1C16
		mov	ebp, [edx]
		mov	ecx, eax

loc_6FFC1C27:				; CODE XREF: .text:6FFC1BEBj
					; .text:6FFC1C42j
		cmp	ebp, ecx
		jz	short loc_6FFC1C44

loc_6FFC1C2B:				; CODE XREF: .text:6FFC1C14j
					; .text:6FFC1C63j
		mov	ebx, [esp+2Ch]
		mov	esi, [esp+30h]
		mov	edi, [esp+34h]
		mov	ebp, [esp+38h]
		add	esp, 3Ch
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6FFC1C40:				; CODE XREF: .text:6FFC1C1Cj
		mov	ebp, ecx
		jmp	short loc_6FFC1C27
; ---------------------------------------------------------------------------

loc_6FFC1C44:				; CODE XREF: .text:6FFC1C0Fj
					; .text:6FFC1C29j
		lea	eax, [esp+44h]
		mov	[esp+4], eax
		lea	eax, [edi+30h]
		mov	[esp], eax
		call	sub_6FFE4A50
		mov	eax, [edi+34h]
		mov	[esp], eax
		call	ds:_ZN6QTimer5startEv
		jmp	short loc_6FFC1C2B
; ---------------------------------------------------------------------------

loc_6FFC1C65:				; CODE XREF: .text:6FFC1C08j
		mov	dword ptr [esp+8], 376h
		mov	dword ptr [esp+4], offset aRIncludeQtco_0 ; "R:/include/QtCore/qhash.h"
		mov	dword ptr [esp], offset	aNodeENodeNext ; "*node	== e ||	(*node)->next"
		call	ds:_Z9qt_assertPKcS0_i
		mov	ecx, [ebp+0]
		jmp	short loc_6FFC1C0A
; ---------------------------------------------------------------------------
		align 10h
; Exported entry  14. _ZN16DBusMenuExporterD0Ev

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public _ZN16DBusMenuExporterD0Ev
_ZN16DBusMenuExporterD0Ev proc near	; DATA XREF: .rdata:6FFF9D78o

var_3C		= byte ptr -3Ch
var_38		= dword	ptr -38h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_8		= byte ptr -8
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 58h
		lea	eax, [ebp+var_8]
		mov	[ebp+var_1C], eax
		lea	eax, [ebp+var_3C]
		mov	[esp], eax
		mov	[ebp+var_24], offset sub_6FFEC1F0
		mov	[ebp+var_20], offset dword_6FFEC890
		mov	[ebp+var_18], offset sub_6FFC1D17
		mov	[ebp+var_14], esp
		call	_Unwind_SjLj_Register
		mov	edx, [ebp+arg_0]
		mov	eax, [edx+8]
		mov	dword ptr [edx], offset	off_6FFF9D68
		test	eax, eax
		jz	short loc_6FFC1CEF
		mov	[esp], eax
		mov	[ebp+var_38], 1
		call	sub_6FFE00E0
		mov	edx, [ebp+arg_0]
		mov	eax, [edx+8]
		mov	[esp], eax
		call	sub_6FFEAE50
		mov	edx, [ebp+arg_0]

loc_6FFC1CEF:				; CODE XREF: _ZN16DBusMenuExporterD0Ev+3Dj
		mov	[esp], edx
		mov	[ebp+var_38], 0FFFFFFFFh
		call	ds:_ZN7QObjectD2Ev
		mov	eax, [ebp+arg_0]
		mov	[esp], eax
		call	sub_6FFEAE50
		lea	eax, [ebp+var_3C]
		mov	[esp], eax
		call	_Unwind_SjLj_Unregister
		leave
		retn
_ZN16DBusMenuExporterD0Ev endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn

sub_6FFC1D17	proc near		; DATA XREF: _ZN16DBusMenuExporterD0Ev+20o
		add	ebp, 8
		mov	eax, [ebp-34h]
		mov	edx, [ebp+8]
		mov	dword ptr [ebp-38h], 0
		mov	[ebp-40h], eax
		mov	[esp+0], edx
		call	ds:_ZN7QObjectD2Ev
		mov	eax, [ebp-40h]
		mov	dword ptr [ebp-38h], 0FFFFFFFFh
		mov	[esp+0], eax
		call	_Unwind_SjLj_Resume
sub_6FFC1D17	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  15. _ZN16DBusMenuExporterD1Ev

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public _ZN16DBusMenuExporterD1Ev
_ZN16DBusMenuExporterD1Ev proc near	; DATA XREF: .rdata:6FFF9D74o

var_3C		= byte ptr -3Ch
var_38		= dword	ptr -38h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_8		= byte ptr -8
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 58h
		lea	eax, [ebp+var_8]
		mov	[ebp+var_1C], eax
		lea	eax, [ebp+var_3C]
		mov	[esp], eax
		mov	[ebp+var_24], offset sub_6FFEC1F0
		mov	[ebp+var_20], offset word_6FFEC896
		mov	[ebp+var_18], offset sub_6FFC1DCC
		mov	[ebp+var_14], esp
		call	_Unwind_SjLj_Register
		mov	edx, [ebp+arg_0]
		mov	eax, [edx+8]
		mov	dword ptr [edx], offset	off_6FFF9D68
		test	eax, eax
		jz	short loc_6FFC1DAF
		mov	[esp], eax
		mov	[ebp+var_38], 1
		call	sub_6FFE00E0
		mov	edx, [ebp+arg_0]
		mov	eax, [edx+8]
		mov	[esp], eax
		call	sub_6FFEAE50
		mov	edx, [ebp+arg_0]

loc_6FFC1DAF:				; CODE XREF: _ZN16DBusMenuExporterD1Ev+3Dj
		mov	[esp], edx
		mov	[ebp+var_38], 0FFFFFFFFh
		call	ds:_ZN7QObjectD2Ev
		lea	eax, [ebp+var_3C]
		mov	[esp], eax
		call	_Unwind_SjLj_Unregister
		leave
		retn
_ZN16DBusMenuExporterD1Ev endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn

sub_6FFC1DCC	proc near		; DATA XREF: _ZN16DBusMenuExporterD1Ev+20o
		add	ebp, 8
		mov	eax, [ebp-34h]
		mov	edx, [ebp+8]
		mov	dword ptr [ebp-38h], 0
		mov	[ebp-40h], eax
		mov	[esp+0], edx
		call	ds:_ZN7QObjectD2Ev
		mov	eax, [ebp-40h]
		mov	dword ptr [ebp-38h], 0FFFFFFFFh
		mov	[esp+0], eax
		call	_Unwind_SjLj_Resume
sub_6FFC1DCC	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  16. _ZN16DBusMenuExporterD2Ev

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public _ZN16DBusMenuExporterD2Ev
_ZN16DBusMenuExporterD2Ev proc near

var_3C		= byte ptr -3Ch
var_38		= dword	ptr -38h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_8		= byte ptr -8
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 58h
		lea	eax, [ebp+var_8]
		mov	[ebp+var_1C], eax
		lea	eax, [ebp+var_3C]
		mov	[esp], eax
		mov	[ebp+var_24], offset sub_6FFEC1F0
		mov	[ebp+var_20], offset dword_6FFEC89C
		mov	[ebp+var_18], offset sub_6FFC1E7C
		mov	[ebp+var_14], esp
		call	_Unwind_SjLj_Register
		mov	edx, [ebp+arg_0]
		mov	eax, [edx+8]
		mov	dword ptr [edx], offset	off_6FFF9D68
		test	eax, eax
		jz	short loc_6FFC1E5F
		mov	[esp], eax
		mov	[ebp+var_38], 1
		call	sub_6FFE00E0
		mov	edx, [ebp+arg_0]
		mov	eax, [edx+8]
		mov	[esp], eax
		call	sub_6FFEAE50
		mov	edx, [ebp+arg_0]

loc_6FFC1E5F:				; CODE XREF: _ZN16DBusMenuExporterD2Ev+3Dj
		mov	[esp], edx
		mov	[ebp+var_38], 0FFFFFFFFh
		call	ds:_ZN7QObjectD2Ev
		lea	eax, [ebp+var_3C]
		mov	[esp], eax
		call	_Unwind_SjLj_Unregister
		leave
		retn
_ZN16DBusMenuExporterD2Ev endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn

sub_6FFC1E7C	proc near		; DATA XREF: _ZN16DBusMenuExporterD2Ev+20o
		add	ebp, 8
		mov	eax, [ebp-34h]
		mov	edx, [ebp+8]
		mov	dword ptr [ebp-38h], 0
		mov	[ebp-40h], eax
		mov	[esp+0], edx
		call	ds:_ZN7QObjectD2Ev
		mov	eax, [ebp-40h]
		mov	dword ptr [ebp-38h], 0FFFFFFFFh
		mov	[esp+0], eax
		call	_Unwind_SjLj_Resume
sub_6FFC1E7C	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_6FFC1EB0	proc near		; CODE XREF: sub_6FFC2030+22p
					; _ZN16DBusMenuExporter14activateActionEP7QAction+46p

var_64		= dword	ptr -64h
var_60		= dword	ptr -60h
var_5C		= byte ptr -5Ch
var_58		= dword	ptr -58h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_1C		= dword	ptr -1Ch
var_18		= byte ptr -18h
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		lea	eax, [ebp+var_18]
		sub	esp, 6Ch
		mov	[ebp+var_3C], eax
		lea	eax, [ebp+var_5C]
		mov	[ebp+var_44], offset sub_6FFEC1F0
		mov	[ebp+var_40], offset dword_6FFEC8B8
		mov	[ebp+var_38], offset sub_6FFC1FF6
		mov	[ebp+var_34], esp
		mov	[esp], eax
		call	_Unwind_SjLj_Register
		mov	ebx, [ebp+arg_4]
		test	ebx, ebx
		jz	short loc_6FFC1F54
		mov	eax, [ebp+arg_0]
		mov	esi, [eax+18h]
		mov	ecx, [esi+3Ch]
		test	ecx, ecx
		jz	short loc_6FFC1F28
		mov	edx, [esi+38h]
		test	edx, edx
		js	short loc_6FFC1F28
		mov	ebx, esi
		mov	ecx, esi

loc_6FFC1F01:				; CODE XREF: sub_6FFC1EB0+67j
					; sub_6FFC1EB0+A2j
		mov	eax, [ecx+edx*4+4]
		cmp	eax, ebx
		jz	short loc_6FFC1F11
		mov	edi, [ebp+arg_4]
		cmp	[eax-8], edi
		jb	short loc_6FFC1F50

loc_6FFC1F11:				; CODE XREF: sub_6FFC1EB0+57j
		sub	edx, 1
		cmp	edx, 0FFFFFFFFh
		jnz	short loc_6FFC1F01
		cmp	esi, eax
		jz	short loc_6FFC1F28
		mov	ecx, [ebp+arg_4]
		lea	edx, [eax-8]
		cmp	[eax-8], ecx
		jbe	short loc_6FFC1F45

loc_6FFC1F28:				; CODE XREF: sub_6FFC1EB0+44j
					; sub_6FFC1EB0+4Bj ...
		mov	[ebp+var_60], 0FFFFFFFEh

loc_6FFC1F2F:				; CODE XREF: sub_6FFC1EB0+9Bj
					; sub_6FFC1EB0+141j
		lea	eax, [ebp+var_5C]
		mov	[esp], eax
		call	_Unwind_SjLj_Unregister
		mov	eax, [ebp+var_60]
		lea	esp, [ebp-0Ch]
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_6FFC1F45:				; CODE XREF: sub_6FFC1EB0+76j
		mov	edx, [edx+4]
		mov	[ebp+var_60], edx
		jmp	short loc_6FFC1F2F
; ---------------------------------------------------------------------------
		align 10h

loc_6FFC1F50:				; CODE XREF: sub_6FFC1EB0+5Fj
		mov	ecx, eax
		jmp	short loc_6FFC1F01
; ---------------------------------------------------------------------------

loc_6FFC1F54:				; CODE XREF: sub_6FFC1EB0+37j
		lea	edx, [ebp+var_1C]
		mov	[esp], edx
		mov	[ebp+var_58], 0FFFFFFFFh
		call	sub_6FFDF180
		mov	eax, [ebp+var_1C]
		lea	ecx, [ebp+var_1C]
		mov	byte ptr [eax+14h], 0
		mov	[ebp+var_58], 1
		sub	esp, 4
		mov	dword ptr [esp+4], offset a31m ; "\x1B[31m"
		mov	[esp], ecx
		call	sub_6FFE9FF0
		mov	dword ptr [esp+4], offset aIntDbusmenuexp ; "int DBusMenuExporterPrivate::idForActio"...
		mov	[esp], eax
		call	sub_6FFE9FF0
		mov	dword ptr [esp+4], offset a0m ;	"\x1B[0m:"
		mov	[esp], eax
		call	sub_6FFE9FF0
		mov	edi, eax
		mov	[ebp+var_64], eax
		mov	eax, [eax]
		mov	byte ptr [eax+14h], 1
		mov	dword ptr [esp+4], 20h
		mov	eax, [edi]
		mov	[esp], eax
		call	ds:_ZN11QTextStreamlsEc
		mov	dword ptr [esp+4], offset aConditionFaile ; "Condition failed: action"
		mov	[esp], edi
		call	sub_6FFE9FF0
		lea	eax, [ebp+var_1C]
		mov	[esp], eax
		mov	[ebp+var_58], 0FFFFFFFFh
		call	sub_6FFE9DD0
		mov	[ebp+var_60], 0FFFFFFFFh
		jmp	loc_6FFC1F2F
sub_6FFC1EB0	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn

sub_6FFC1FF6	proc near		; DATA XREF: sub_6FFC1EB0+20o
		add	ebp, 18h
		mov	eax, [ebp-54h]
		mov	dword ptr [ebp-58h], 0
		mov	[ebp-68h], eax
		lea	eax, [ebp-1Ch]
		mov	[esp+0], eax
		call	sub_6FFE9DD0
		mov	edx, [ebp-68h]
		mov	dword ptr [ebp-58h], 0FFFFFFFFh
		mov	[esp+0], edx
		call	_Unwind_SjLj_Resume
sub_6FFC1FF6	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6FFC2030	proc near		; CODE XREF: .text:6FFC15D4j
					; sub_6FFC1880+32p

var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_30		= dword	ptr -30h
var_20		= dword	ptr -20h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		sub	esp, 4Ch
		mov	[esp+4Ch+var_8], edi
		mov	eax, [esp+4Ch+arg_4]
		mov	edi, [esp+4Ch+arg_0]
		mov	[esp+4Ch+var_10], ebx
		mov	[esp+4Ch+var_C], esi
		mov	[esp+4Ch+var_4], ebp
		mov	[esp+4Ch+var_48], eax
		mov	[esp+4Ch+var_4C], edi
		call	sub_6FFC1EB0
		mov	[esp+4Ch+var_20], eax
		mov	esi, [edi+28h]
		mov	ebx, eax
		mov	eax, [esi+18h]
		mov	ebp, esi
		mov	ecx, esi
		test	eax, eax
		mov	[esp+4Ch+var_30], eax
		jz	short loc_6FFC20A9
		xor	edx, edx
		mov	eax, ebx
		div	[esp+4Ch+var_30]
		mov	ebp, edx
		shl	ebp, 2
		add	ebp, [esi+4]
		mov	ecx, [ebp+0]
		cmp	ecx, esi
		jz	short loc_6FFC208C
		mov	esi, [ecx]
		test	esi, esi
		jz	short loc_6FFC20E6

loc_6FFC208C:				; CODE XREF: sub_6FFC2030+54j
					; sub_6FFC2030+D6j
		mov	eax, [edi+28h]
		cmp	ecx, eax
		jz	short loc_6FFC20C5
		cmp	ebx, [ecx+4]
		jz	short loc_6FFC20AD

loc_6FFC2098:				; CODE XREF: sub_6FFC2030+73j
		mov	edx, ecx
		mov	ecx, [ecx]
		cmp	ecx, eax
		jz	short loc_6FFC20C1
		cmp	ebx, [ecx+4]
		jnz	short loc_6FFC2098
		mov	ebp, [edx]
		mov	ecx, eax

loc_6FFC20A9:				; CODE XREF: sub_6FFC2030+3Dj
					; sub_6FFC2030+93j
		cmp	ebp, ecx
		jz	short loc_6FFC20C5

loc_6FFC20AD:				; CODE XREF: sub_6FFC2030+66j
					; sub_6FFC2030+B4j
		mov	ebx, [esp+4Ch+var_10]
		mov	esi, [esp+4Ch+var_C]
		mov	edi, [esp+4Ch+var_8]
		mov	ebp, [esp+4Ch+var_4]
		add	esp, 4Ch
		retn
; ---------------------------------------------------------------------------

loc_6FFC20C1:				; CODE XREF: sub_6FFC2030+6Ej
		mov	ebp, ecx
		jmp	short loc_6FFC20A9
; ---------------------------------------------------------------------------

loc_6FFC20C5:				; CODE XREF: sub_6FFC2030+61j
					; sub_6FFC2030+7Bj
		lea	eax, [esp+4Ch+var_20]
		mov	[esp+4Ch+var_48], eax
		lea	eax, [edi+28h]
		mov	[esp+4Ch+var_4C], eax
		call	sub_6FFE4A50
		mov	eax, [edi+2Ch]
		mov	[esp+4Ch+var_4C], eax
		call	ds:_ZN6QTimer5startEv
		jmp	short loc_6FFC20AD
; ---------------------------------------------------------------------------

loc_6FFC20E6:				; CODE XREF: sub_6FFC2030+5Aj
		mov	[esp+4Ch+var_44], 376h
		mov	[esp+4Ch+var_48], offset aRIncludeQtco_0 ; "R:/include/QtCore/qhash.h"
		mov	[esp+4Ch+var_4C], offset aNodeENodeNext	; "*node == e || (*node)->next"
		call	ds:_Z9qt_assertPKcS0_i
		mov	ecx, [ebp+0]
		jmp	short loc_6FFC208C
sub_6FFC2030	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry   3. _ZN16DBusMenuExporter14activateActionEP7QAction

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public _ZN16DBusMenuExporter14activateActionEP7QAction
_ZN16DBusMenuExporter14activateActionEP7QAction	proc near

var_58		= dword	ptr -58h
var_54		= dword	ptr -54h
var_50		= dword	ptr -50h
var_4C		= byte ptr -4Ch
var_48		= dword	ptr -48h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_10		= byte ptr -10h
var_C		= dword	ptr -0Ch
var_8		= byte ptr -8
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 78h
		lea	eax, [ebp+var_8]
		mov	[ebp+var_2C], eax
		lea	eax, [ebp+var_4C]
		mov	[ebp+var_34], offset sub_6FFEC1F0
		mov	[ebp+var_30], offset word_6FFEC8BE
		mov	[ebp+var_28], offset sub_6FFC226F
		mov	[ebp+var_24], esp
		mov	[esp], eax
		call	_Unwind_SjLj_Register
		mov	eax, [ebp+arg_4]
		mov	[esp+4], eax
		mov	edx, [ebp+arg_0]
		mov	eax, [edx+8]
		mov	[esp], eax
		mov	[ebp+var_48], 0FFFFFFFFh
		call	sub_6FFC1EB0
		test	eax, eax
		mov	[ebp+var_50], eax
		js	short loc_6FFC21D0
		lea	eax, [ebp+var_10]
		mov	[esp], eax
		mov	[ebp+var_48], 0FFFFFFFFh
		call	ds:_ZN9QDateTime15currentDateTimeEv
		lea	edx, [ebp+var_10]
		sub	esp, 4
		mov	[esp], edx
		mov	[ebp+var_48], 1
		call	ds:_ZNK9QDateTime8toTime_tEv
		mov	[ebp+var_54], eax
		lea	eax, [ebp+var_10]
		mov	[esp], eax
		mov	[ebp+var_48], 0FFFFFFFFh
		call	ds:_ZN9QDateTimeD1Ev
		mov	eax, [ebp+var_54]
		mov	[esp+8], eax
		mov	edx, [ebp+var_50]
		mov	[esp+4], edx
		mov	edx, [ebp+arg_0]
		mov	eax, [edx+8]
		mov	eax, [eax+8]
		mov	[esp], eax
		call	sub_6FFC8070
		lea	eax, [ebp+var_4C]
		mov	[esp], eax
		call	_Unwind_SjLj_Unregister
		leave
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6FFC21D0:				; CODE XREF: _ZN16DBusMenuExporter14activateActionEP7QAction+50j
		lea	eax, [ebp+var_C]
		mov	[esp], eax
		call	sub_6FFDF180
		mov	eax, [ebp+var_C]
		lea	edx, [ebp+var_C]
		mov	byte ptr [eax+14h], 0
		sub	esp, 4
		mov	dword ptr [esp+4], offset a31m ; "\x1B[31m"
		mov	[esp], edx
		mov	[ebp+var_48], 2
		call	sub_6FFE9FF0
		mov	dword ptr [esp+4], offset aVoidDbusmenuex ; "void DBusMenuExporter::activateAction(Q"...
		mov	[esp], eax
		call	sub_6FFE9FF0
		mov	dword ptr [esp+4], offset a0m ;	"\x1B[0m:"
		mov	[esp], eax
		call	sub_6FFE9FF0
		mov	[ebp+var_58], eax
		mov	edx, eax
		mov	eax, [eax]
		mov	byte ptr [eax+14h], 1
		mov	dword ptr [esp+4], 20h
		mov	eax, [edx]
		mov	[esp], eax
		call	ds:_ZN11QTextStreamlsEc
		mov	dword ptr [esp+4], offset aConditionFai_0 ; "Condition failed: id >= 0"
		mov	eax, [ebp+var_58]
		mov	[esp], eax
		call	sub_6FFE9FF0
		lea	eax, [ebp+var_C]
		mov	[esp], eax
		mov	[ebp+var_48], 0FFFFFFFFh
		call	sub_6FFE9DD0
		lea	eax, [ebp+var_4C]
		mov	[esp], eax
		call	_Unwind_SjLj_Unregister
		leave
		retn
_ZN16DBusMenuExporter14activateActionEP7QAction	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn

sub_6FFC226F	proc near		; DATA XREF: _ZN16DBusMenuExporter14activateActionEP7QAction+1Do
		add	ebp, 8
		mov	eax, [ebp-44h]
		cmp	dword ptr [ebp-48h], 1
		mov	[ebp-5Ch], eax
		jz	short loc_6FFC22A3
		lea	eax, [ebp-10h]
		mov	[esp+0], eax
		mov	dword ptr [ebp-48h], 0
		call	ds:_ZN9QDateTimeD1Ev
		mov	edx, [ebp-5Ch]
		mov	[esp+0], edx
		mov	dword ptr [ebp-48h], 0FFFFFFFFh
		call	_Unwind_SjLj_Resume
; ---------------------------------------------------------------------------

loc_6FFC22A3:				; CODE XREF: sub_6FFC226F+Dj
		lea	eax, [ebp-0Ch]
		mov	[esp+0], eax
		mov	dword ptr [ebp-48h], 0
		call	sub_6FFE9DD0
		mov	edx, [ebp-5Ch]
		mov	[esp+0], edx
		mov	dword ptr [ebp-48h], 0FFFFFFFFh
		call	_Unwind_SjLj_Resume
sub_6FFC226F	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry   6. _ZN16DBusMenuExporter17iconNameForActionEP7QAction

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public _ZN16DBusMenuExporter17iconNameForActionEP7QAction
_ZN16DBusMenuExporter17iconNameForActionEP7QAction proc	near ; DATA XREF: .rdata:6FFF9D98o

var_50		= dword	ptr -50h
var_4C		= byte ptr -4Ch
var_48		= dword	ptr -48h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_10		= byte ptr -10h
var_C		= dword	ptr -0Ch
var_8		= byte ptr -8
arg_0		= dword	ptr  8
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		sub	esp, 68h
		lea	eax, [ebp+var_8]
		mov	[ebp+var_2C], eax
		lea	eax, [ebp+var_4C]
		mov	[esp], eax
		mov	[ebp+var_34], offset sub_6FFEC1F0
		mov	[ebp+var_30], offset word_6FFEC8C6
		mov	[ebp+var_28], offset sub_6FFC244E
		mov	[ebp+var_24], esp
		call	_Unwind_SjLj_Register
		mov	eax, [ebp+arg_8]
		test	eax, eax
		jz	loc_6FFC23A0
		mov	edx, [ebp+arg_8]
		lea	eax, [ebp+var_10]
		mov	[esp], eax
		mov	[ebp+var_48], 0FFFFFFFFh
		mov	[esp+4], edx
		call	ds:_ZNK7QAction4iconEv
		mov	eax, [ebp+arg_8]
		mov	[ebp+var_48], 1
		sub	esp, 4
		mov	[esp], eax
		call	ds:_ZNK7QAction19isIconVisibleInMenuEv
		test	al, al
		jnz	short loc_6FFC2373

loc_6FFC233E:				; CODE XREF: _ZN16DBusMenuExporter17iconNameForActionEP7QAction+B1j
		mov	eax, ds:_ZN7QString11shared_nullE
		mov	edx, [ebp+arg_0]
		mov	[edx], eax
		lock inc dword ptr [eax]
		setnz	dl

loc_6FFC234E:				; CODE XREF: _ZN16DBusMenuExporter17iconNameForActionEP7QAction+C9j
		lea	eax, [ebp+var_10]
		mov	[esp], eax
		mov	[ebp+var_48], 0FFFFFFFFh
		call	ds:_ZN5QIconD1Ev

loc_6FFC2361:				; CODE XREF: _ZN16DBusMenuExporter17iconNameForActionEP7QAction+179j
		lea	eax, [ebp+var_4C]
		mov	[esp], eax
		call	_Unwind_SjLj_Unregister
		mov	eax, [ebp+arg_0]
		leave
		retn	4
; ---------------------------------------------------------------------------

loc_6FFC2373:				; CODE XREF: _ZN16DBusMenuExporter17iconNameForActionEP7QAction+6Cj
		lea	eax, [ebp+var_10]
		mov	[esp], eax
		call	ds:_ZNK5QIcon6isNullEv
		test	al, al
		jnz	short loc_6FFC233E
		mov	edx, [ebp+arg_0]
		lea	eax, [ebp+var_10]
		mov	[esp+4], eax
		mov	[esp], edx
		call	ds:_ZNK5QIcon4nameEv
		sub	esp, 4
		jmp	short loc_6FFC234E
; ---------------------------------------------------------------------------
		align 10h

loc_6FFC23A0:				; CODE XREF: _ZN16DBusMenuExporter17iconNameForActionEP7QAction+34j
		lea	edx, [ebp+var_C]
		mov	[esp], edx
		mov	[ebp+var_48], 0FFFFFFFFh
		call	sub_6FFDF180
		mov	eax, [ebp+var_C]
		mov	byte ptr [eax+14h], 0
		lea	eax, [ebp+var_C]
		mov	[ebp+var_48], 2
		sub	esp, 4
		mov	dword ptr [esp+4], offset a31m ; "\x1B[31m"
		mov	[esp], eax
		call	sub_6FFE9FF0
		mov	dword ptr [esp+4], offset aVirtualQstring ; "virtual QString DBusMenuExporter::iconN"...
		mov	[esp], eax
		call	sub_6FFE9FF0
		mov	dword ptr [esp+4], offset a0m ;	"\x1B[0m:"
		mov	[esp], eax
		call	sub_6FFE9FF0
		mov	edx, eax
		mov	[ebp+var_50], eax
		mov	eax, [eax]
		mov	byte ptr [eax+14h], 1
		mov	dword ptr [esp+4], 20h
		mov	eax, [edx]
		mov	[esp], eax
		call	ds:_ZN11QTextStreamlsEc
		mov	eax, [ebp+var_50]
		mov	dword ptr [esp+4], offset aConditionFaile ; "Condition failed: action"
		mov	[esp], eax
		call	sub_6FFE9FF0
		lea	eax, [ebp+var_C]
		mov	[esp], eax
		mov	[ebp+var_48], 0FFFFFFFFh
		call	sub_6FFE9DD0
		mov	eax, ds:_ZN7QString11shared_nullE
		mov	edx, [ebp+arg_0]
		mov	[edx], eax
		lock inc dword ptr [eax]
		setnz	dl
		jmp	loc_6FFC2361
_ZN16DBusMenuExporter17iconNameForActionEP7QAction endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn

sub_6FFC244E	proc near		; DATA XREF: _ZN16DBusMenuExporter17iconNameForActionEP7QAction+20o
		add	ebp, 8
		mov	eax, [ebp-44h]
		cmp	dword ptr [ebp-48h], 1
		mov	[ebp-54h], eax
		jz	short loc_6FFC2482
		lea	eax, [ebp-10h]
		mov	[esp+0], eax
		mov	dword ptr [ebp-48h], 0
		call	ds:_ZN5QIconD1Ev
		mov	edx, [ebp-54h]
		mov	dword ptr [ebp-48h], 0FFFFFFFFh
		mov	[esp+0], edx
		call	_Unwind_SjLj_Resume
; ---------------------------------------------------------------------------

loc_6FFC2482:				; CODE XREF: sub_6FFC244E+Dj
		lea	eax, [ebp-0Ch]
		mov	[esp+0], eax
		mov	dword ptr [ebp-48h], 0
		call	sub_6FFE9DD0
		mov	edx, [ebp-54h]
		mov	dword ptr [ebp-48h], 0FFFFFFFFh
		mov	[esp+0], edx
		call	_Unwind_SjLj_Resume
sub_6FFC244E	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_6FFC24B0	proc near		; CODE XREF: sub_6FFC2AE0+4BAp
					; sub_6FFC3520+2E4p

var_8C		= byte ptr -8Ch
var_88		= dword	ptr -88h
var_74		= dword	ptr -74h
var_70		= dword	ptr -70h
var_6C		= dword	ptr -6Ch
var_68		= dword	ptr -68h
var_64		= dword	ptr -64h
var_58		= byte ptr -58h
var_48		= byte ptr -48h
var_34		= byte ptr -34h
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= byte ptr -20h
var_18		= dword	ptr -18h
var_14		= byte ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= byte ptr -8
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		sub	esp, 0B8h
		lea	eax, [ebp+var_8]
		mov	[ebp+var_6C], eax
		lea	eax, [ebp+var_8C]
		mov	[esp], eax
		mov	[ebp+var_64], esp
		mov	[ebp+var_74], offset sub_6FFEC1F0
		mov	[ebp+var_70], offset dword_6FFEC950
		mov	[ebp+var_68], offset sub_6FFC27A8
		call	_Unwind_SjLj_Register
		mov	eax, [ebp+arg_0]
		mov	ecx, [ebp+arg_8]
		mov	eax, [eax]
		mov	edx, [eax]
		mov	[esp+4], eax
		lea	eax, [ebp+var_C]
		mov	[esp+8], ecx
		mov	[esp], eax
		mov	eax, [edx+30h]
		mov	[ebp+var_88], 0FFFFFFFFh
		call	eax
		mov	eax, [ebp+var_C]
		mov	edx, [eax+8]
		sub	esp, 4
		test	edx, edx
		jz	loc_6FFC25E0
		lea	edx, [ebp+var_C]
		lea	eax, [ebp+var_48]
		mov	[esp+4], edx
		mov	[esp], eax
		mov	[ebp+var_88], 8
		call	ds:_ZN8QVariantC1ERK7QString
		mov	dword ptr [esp+4], 0FFFFFFFFh
		mov	dword ptr [esp], offset	aIconName ; "icon-name"
		mov	[ebp+var_88], 7
		call	ds:_ZN7QString16fromAscii_helperEPKci
		mov	ecx, [ebp+arg_4]
		mov	[ebp+var_10], eax
		lea	eax, [ebp+var_48]
		mov	[esp+8], eax
		lea	eax, [ebp+var_10]
		mov	[esp+4], eax
		mov	[esp], ecx
		mov	[ebp+var_88], 6
		call	sub_6FFE4110
		mov	eax, [ebp+var_10]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jz	loc_6FFC2770

loc_6FFC2590:				; CODE XREF: sub_6FFC24B0+2D6j
		lea	eax, [ebp+var_48]
		mov	[esp], eax
		mov	[ebp+var_88], 8
		call	ds:_ZN8QVariantD1Ev

loc_6FFC25A6:				; CODE XREF: sub_6FFC24B0+2BAj
		mov	eax, [ebp+var_C]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jnz	short loc_6FFC25C9
		mov	eax, [ebp+var_C]
		mov	[ebp+var_88], 0FFFFFFFFh
		mov	[esp], eax
		call	ds:_ZN7QString4freeEPNS_4DataE

loc_6FFC25C9:				; CODE XREF: sub_6FFC24B0+101j
		lea	eax, [ebp+var_8C]
		mov	[esp], eax
		call	_Unwind_SjLj_Unregister
		leave
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6FFC25E0:				; CODE XREF: sub_6FFC24B0+67j
		mov	edx, [ebp+arg_8]
		lea	eax, [ebp+var_14]
		mov	[esp], eax
		mov	[ebp+var_88], 8
		mov	[esp+4], edx
		call	ds:_ZNK7QAction4iconEv
		sub	esp, 4
		lea	eax, [ebp+var_14]
		mov	[esp], eax
		mov	[ebp+var_88], 5
		call	ds:_ZNK5QIcon6isNullEv
		test	al, al
		jnz	loc_6FFC2754
		lea	eax, [ebp+var_20]
		mov	dword ptr [esp+4], 0
		mov	[esp], eax
		call	ds:_ZN7QBufferC1EP7QObject
		lea	edx, [ebp+var_28]
		lea	eax, [ebp+var_34]
		mov	[esp+8], edx
		lea	edx, [ebp+var_14]
		mov	[ebp+var_28], 10h
		mov	[ebp+var_24], 10h
		mov	dword ptr [esp+10h], 1
		mov	dword ptr [esp+0Ch], 0
		mov	[esp+4], edx
		mov	[esp], eax
		mov	[ebp+var_88], 4
		call	ds:_ZNK5QIcon6pixmapERK5QSizeNS_4ModeENS_5StateE
		sub	esp, 4
		lea	eax, [ebp+var_20]
		mov	[esp+4], eax
		lea	eax, [ebp+var_34]
		mov	dword ptr [esp+0Ch], 0FFFFFFFFh
		mov	dword ptr [esp+8], offset aPng ; "PNG"
		mov	[esp], eax
		mov	[ebp+var_88], 3
		call	ds:_ZNK7QPixmap4saveEP9QIODevicePKci
		lea	eax, [ebp+var_34]
		mov	[esp], eax
		mov	[ebp+var_88], 4
		call	ds:_ZN7QPixmapD1Ev
		lea	eax, [ebp+var_20]
		mov	[esp], eax
		call	ds:_ZNK7QBuffer4dataEv
		mov	[esp+4], eax
		lea	eax, [ebp+var_58]
		mov	[esp], eax
		call	ds:_ZN8QVariantC1ERK10QByteArray
		mov	dword ptr [esp+4], 0FFFFFFFFh
		mov	dword ptr [esp], offset	aIconData ; "icon-data"
		mov	[ebp+var_88], 2
		call	ds:_ZN7QString16fromAscii_helperEPKci
		mov	ecx, [ebp+arg_4]
		mov	[ebp+var_18], eax
		lea	eax, [ebp+var_58]
		mov	[esp+8], eax
		lea	eax, [ebp+var_18]
		mov	[esp+4], eax
		mov	[esp], ecx
		mov	[ebp+var_88], 1
		call	sub_6FFE4110
		mov	eax, [ebp+var_18]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jz	short loc_6FFC2790

loc_6FFC2728:				; CODE XREF: sub_6FFC24B0+2F6j
		lea	eax, [ebp+var_58]
		mov	[esp], eax
		mov	[ebp+var_88], 4
		call	ds:_ZN8QVariantD1Ev
		lea	eax, [ebp+var_20]
		mov	[esp], eax
		mov	[ebp+var_88], 5
		call	ds:_ZN7QBufferD1Ev

loc_6FFC2754:				; CODE XREF: sub_6FFC24B0+168j
		lea	eax, [ebp+var_14]
		mov	[esp], eax
		mov	[ebp+var_88], 8
		call	ds:_ZN5QIconD1Ev
		jmp	loc_6FFC25A6
; ---------------------------------------------------------------------------
		align 10h

loc_6FFC2770:				; CODE XREF: sub_6FFC24B0+DAj
		mov	eax, [ebp+var_10]
		mov	[ebp+var_88], 7
		mov	[esp], eax
		call	ds:_ZN7QString4freeEPNS_4DataE
		jmp	loc_6FFC2590
; ---------------------------------------------------------------------------
		align 10h

loc_6FFC2790:				; CODE XREF: sub_6FFC24B0+276j
		mov	eax, [ebp+var_18]
		mov	[ebp+var_88], 2
		mov	[esp], eax
		call	ds:_ZN7QString4freeEPNS_4DataE
		jmp	short loc_6FFC2728
sub_6FFC24B0	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn

sub_6FFC27A8	proc near		; DATA XREF: sub_6FFC24B0+29o
		add	ebp, 8
		mov	eax, [ebp-88h]
		mov	edx, [ebp-84h]
		cmp	eax, 1
		mov	[ebp-90h], edx
		jz	short loc_6FFC2801
		cmp	eax, 2
		jz	loc_6FFC289D
		cmp	eax, 3
		jz	short loc_6FFC2817
		cmp	eax, 4
		jz	short loc_6FFC282D
		cmp	eax, 5
		jz	loc_6FFC2870
		cmp	eax, 6
		jz	loc_6FFC2885
		cmp	eax, 7
		jz	short loc_6FFC2843
		lea	eax, [ebp-18h]
		mov	[esp+0], eax
		mov	dword ptr [ebp-88h], 0
		call	sub_6FFEA140

loc_6FFC2801:				; CODE XREF: sub_6FFC27A8+18j
		lea	eax, [ebp-58h]
		mov	[esp+0], eax
		mov	dword ptr [ebp-88h], 0
		call	ds:_ZN8QVariantD1Ev

loc_6FFC2817:				; CODE XREF: sub_6FFC27A8+26j
					; sub_6FFC27A8+10Bj
		lea	eax, [ebp-20h]
		mov	[esp+0], eax
		mov	dword ptr [ebp-88h], 0
		call	ds:_ZN7QBufferD1Ev

loc_6FFC282D:				; CODE XREF: sub_6FFC27A8+2Bj
		lea	eax, [ebp-14h]
		mov	[esp+0], eax
		mov	dword ptr [ebp-88h], 0
		call	ds:_ZN5QIconD1Ev

loc_6FFC2843:				; CODE XREF: sub_6FFC27A8+42j
					; sub_6FFC27A8+F3j
		lea	eax, [ebp-0Ch]
		mov	[esp+0], eax
		mov	dword ptr [ebp-88h], 0
		call	sub_6FFEA140
		mov	ecx, [ebp-90h]
		mov	dword ptr [ebp-88h], 0FFFFFFFFh
		mov	[esp+0], ecx
		call	_Unwind_SjLj_Resume
; ---------------------------------------------------------------------------

loc_6FFC2870:				; CODE XREF: sub_6FFC27A8+30j
		lea	eax, [ebp-10h]
		mov	[esp+0], eax
		mov	dword ptr [ebp-88h], 0
		call	sub_6FFEA140

loc_6FFC2885:				; CODE XREF: sub_6FFC27A8+39j
		lea	eax, [ebp-48h]
		mov	[esp+0], eax
		mov	dword ptr [ebp-88h], 0
		call	ds:_ZN8QVariantD1Ev
		jmp	short loc_6FFC2843
; ---------------------------------------------------------------------------

loc_6FFC289D:				; CODE XREF: sub_6FFC27A8+1Dj
		lea	eax, [ebp-34h]
		mov	[esp+0], eax
		mov	dword ptr [ebp-88h], 0
		call	ds:_ZN7QPixmapD1Ev
		jmp	loc_6FFC2817
sub_6FFC27A8	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_6FFC28C0	proc near		; CODE XREF: sub_6FFC3D40+15Cp

var_6C		= byte ptr -6Ch
var_68		= dword	ptr -68h
var_54		= dword	ptr -54h
var_50		= dword	ptr -50h
var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_30		= byte ptr -30h
var_20		= byte ptr -20h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= byte ptr -8
arg_0		= dword	ptr  8
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		sub	esp, 88h
		lea	eax, [ebp+var_8]
		mov	[ebp+var_4C], eax
		lea	eax, [ebp+var_6C]
		mov	[esp], eax
		mov	[ebp+var_54], offset sub_6FFEC1F0
		mov	[ebp+var_50], offset dword_6FFEC964
		mov	[ebp+var_48], offset sub_6FFC2A45
		mov	[ebp+var_44], esp
		call	_Unwind_SjLj_Register
		mov	eax, ds:_ZN8QMapData11shared_nullE
		mov	edx, [ebp+arg_0]
		mov	[edx], eax
		lock inc dword ptr [eax+34h]
		setnz	dl
		lea	eax, [ebp+var_20]
		mov	dword ptr [esp+4], offset aSeparator ; "separator"
		mov	[esp], eax
		mov	[ebp+var_68], 5
		call	ds:_ZN8QVariantC1EPKc
		mov	dword ptr [esp+4], 0FFFFFFFFh
		mov	dword ptr [esp], offset	aType ;	"type"
		mov	[ebp+var_68], 4
		call	ds:_ZN7QString16fromAscii_helperEPKci
		mov	[ebp+var_C], eax
		lea	eax, [ebp+var_20]
		mov	[esp+8], eax
		lea	eax, [ebp+var_C]
		mov	[esp+4], eax
		mov	eax, [ebp+arg_0]
		mov	[ebp+var_68], 3
		mov	[esp], eax
		call	sub_6FFE4110
		mov	eax, [ebp+var_C]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jz	short loc_6FFC29A0

loc_6FFC296A:				; CODE XREF: sub_6FFC28C0+F3j
		lea	eax, [ebp+var_20]
		mov	[esp], eax
		mov	[ebp+var_68], 5
		call	ds:_ZN8QVariantD1Ev
		mov	eax, [ebp+arg_8]
		mov	[esp], eax
		call	ds:_ZNK7QAction9isVisibleEv
		test	al, al
		jz	short loc_6FFC29B5

loc_6FFC298D:				; CODE XREF: sub_6FFC28C0+168j
		lea	eax, [ebp+var_6C]
		mov	[esp], eax
		call	_Unwind_SjLj_Unregister
		mov	eax, [ebp+arg_0]
		leave
		retn	4
; ---------------------------------------------------------------------------
		align 10h

loc_6FFC29A0:				; CODE XREF: sub_6FFC28C0+A8j
		mov	eax, [ebp+var_C]
		mov	[ebp+var_68], 4
		mov	[esp], eax
		call	ds:_ZN7QString4freeEPNS_4DataE
		jmp	short loc_6FFC296A
; ---------------------------------------------------------------------------

loc_6FFC29B5:				; CODE XREF: sub_6FFC28C0+CBj
		lea	eax, [ebp+var_30]
		mov	dword ptr [esp+4], 0
		mov	[esp], eax
		call	ds:_ZN8QVariantC1Eb
		mov	dword ptr [esp+4], 0FFFFFFFFh
		mov	dword ptr [esp], offset	aVisible ; "visible"
		mov	[ebp+var_68], 2
		call	ds:_ZN7QString16fromAscii_helperEPKci
		mov	edx, [ebp+arg_0]
		mov	[ebp+var_10], eax
		lea	eax, [ebp+var_30]
		mov	[esp+8], eax
		lea	eax, [ebp+var_10]
		mov	[esp+4], eax
		mov	[esp], edx
		mov	[ebp+var_68], 1
		call	sub_6FFE4110
		mov	eax, [ebp+var_10]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jz	short loc_6FFC2A30

loc_6FFC2A15:				; CODE XREF: sub_6FFC28C0+183j
		lea	eax, [ebp+var_30]
		mov	[esp], eax
		mov	[ebp+var_68], 5
		call	ds:_ZN8QVariantD1Ev
		jmp	loc_6FFC298D
; ---------------------------------------------------------------------------
		align 10h

loc_6FFC2A30:				; CODE XREF: sub_6FFC28C0+153j
		mov	eax, [ebp+var_10]
		mov	[ebp+var_68], 2
		mov	[esp], eax
		call	ds:_ZN7QString4freeEPNS_4DataE
		jmp	short loc_6FFC2A15
sub_6FFC28C0	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn

sub_6FFC2A45	proc near		; DATA XREF: sub_6FFC28C0+23o
		add	ebp, 8
		mov	eax, [ebp-68h]
		mov	edx, [ebp-64h]
		cmp	eax, 1
		mov	[ebp-70h], edx
		jz	short loc_6FFC2A77
		cmp	eax, 2
		jz	short loc_6FFC2AAE
		cmp	eax, 3
		jz	short loc_6FFC2AC0
		cmp	eax, 4
		jz	short loc_6FFC2A8A
		lea	eax, [ebp-10h]
		mov	[esp+0], eax
		mov	dword ptr [ebp-68h], 0
		call	sub_6FFEA140

loc_6FFC2A77:				; CODE XREF: sub_6FFC2A45+Fj
		lea	eax, [ebp-30h]
		mov	[esp+0], eax
		mov	dword ptr [ebp-68h], 0
		call	ds:_ZN8QVariantD1Ev

loc_6FFC2A8A:				; CODE XREF: sub_6FFC2A45+1Ej
					; sub_6FFC2A45+8Ej
		mov	eax, [ebp+8]
		mov	dword ptr [ebp-68h], 0
		mov	[esp+0], eax
		call	sub_6FFE4290
		mov	edx, [ebp-70h]
		mov	dword ptr [ebp-68h], 0FFFFFFFFh
		mov	[esp+0], edx
		call	_Unwind_SjLj_Resume
; ---------------------------------------------------------------------------

loc_6FFC2AAE:				; CODE XREF: sub_6FFC2A45+14j
		lea	eax, [ebp-0Ch]
		mov	[esp+0], eax
		mov	dword ptr [ebp-68h], 0
		call	sub_6FFEA140

loc_6FFC2AC0:				; CODE XREF: sub_6FFC2A45+19j
		lea	eax, [ebp-20h]
		mov	[esp+0], eax
		mov	dword ptr [ebp-68h], 0
		call	ds:_ZN8QVariantD1Ev
		jmp	short loc_6FFC2A8A
sub_6FFC2A45	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_6FFC2AE0	proc near		; CODE XREF: sub_6FFC3D40+114p

var_DC		= byte ptr -0DCh
var_D8		= dword	ptr -0D8h
var_C4		= dword	ptr -0C4h
var_C0		= dword	ptr -0C0h
var_BC		= dword	ptr -0BCh
var_B8		= dword	ptr -0B8h
var_B4		= dword	ptr -0B4h
var_A8		= byte ptr -0A8h
var_98		= byte ptr -98h
var_88		= byte ptr -88h
var_78		= byte ptr -78h
var_68		= byte ptr -68h
var_58		= byte ptr -58h
var_48		= byte ptr -48h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= byte ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= byte ptr -8
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		sub	esp, 0F8h
		lea	eax, [ebp+var_8]
		mov	[ebp+var_BC], eax
		lea	eax, [ebp+var_DC]
		mov	[esp], eax
		mov	[ebp+var_C4], offset sub_6FFEC1F0
		mov	[ebp+var_C0], offset word_6FFEC972
		mov	[ebp+var_B8], offset sub_6FFC324B
		mov	[ebp+var_B4], esp
		call	_Unwind_SjLj_Register
		mov	eax, ds:_ZN8QMapData11shared_nullE
		mov	edx, [ebp+arg_0]
		mov	[edx], eax
		lock inc dword ptr [eax+34h]
		setnz	dl
		mov	edx, [ebp+arg_8]
		lea	eax, [ebp+var_C]
		mov	[esp], eax
		mov	[ebp+var_D8], 13h
		mov	[esp+4], edx
		call	ds:_ZNK7QAction4textEv
		sub	esp, 4
		lea	eax, [ebp+var_10]
		lea	edx, [ebp+var_C]
		mov	dword ptr [esp+0Ch], 5Fh
		mov	dword ptr [esp+8], 26h
		mov	[esp+4], edx
		mov	[esp], eax
		mov	[ebp+var_D8], 12h
		call	sub_6FFD52A0
		sub	esp, 4
		lea	eax, [ebp+var_10]
		mov	[esp+4], eax
		lea	eax, [ebp+var_48]
		mov	[esp], eax
		mov	[ebp+var_D8], 11h
		call	ds:_ZN8QVariantC1ERK7QString
		mov	dword ptr [esp+4], 0FFFFFFFFh
		mov	dword ptr [esp], offset	aLabel ; "label"
		mov	[ebp+var_D8], 10h
		call	ds:_ZN7QString16fromAscii_helperEPKci
		mov	[ebp+var_14], eax
		lea	eax, [ebp+var_48]
		mov	[esp+8], eax
		lea	eax, [ebp+var_14]
		mov	[esp+4], eax
		mov	eax, [ebp+arg_0]
		mov	[ebp+var_D8], 0Fh
		mov	[esp], eax
		call	sub_6FFE4110
		mov	eax, [ebp+var_14]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jz	loc_6FFC3140

loc_6FFC2BF7:				; CODE XREF: sub_6FFC2AE0+676j
		lea	eax, [ebp+var_48]
		mov	[esp], eax
		mov	[ebp+var_D8], 11h
		call	ds:_ZN8QVariantD1Ev
		mov	eax, [ebp+var_10]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jz	loc_6FFC3120

loc_6FFC2C1E:				; CODE XREF: sub_6FFC2AE0+656j
		mov	eax, [ebp+var_C]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jz	loc_6FFC3105

loc_6FFC2C2F:				; CODE XREF: sub_6FFC2AE0+63Bj
		mov	edx, [ebp+arg_8]
		mov	[ebp+var_D8], 13h
		mov	[esp], edx
		call	ds:_ZNK7QAction9isEnabledEv
		test	al, al
		jnz	loc_6FFC2CCD
		lea	eax, [ebp+var_58]
		mov	dword ptr [esp+4], 0
		mov	[esp], eax
		call	ds:_ZN8QVariantC1Eb
		mov	dword ptr [esp+4], 0FFFFFFFFh
		mov	dword ptr [esp], offset	aEnabled ; "enabled"
		mov	[ebp+var_D8], 0Eh
		call	ds:_ZN7QString16fromAscii_helperEPKci
		mov	[ebp+var_18], eax
		lea	eax, [ebp+var_58]
		mov	[esp+8], eax
		lea	eax, [ebp+var_18]
		mov	[esp+4], eax
		mov	eax, [ebp+arg_0]
		mov	[ebp+var_D8], 0Dh
		mov	[esp], eax
		call	sub_6FFE4110
		mov	eax, [ebp+var_18]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jz	loc_6FFC31C0

loc_6FFC2CB7:				; CODE XREF: sub_6FFC2AE0+6F6j
		lea	eax, [ebp+var_58]
		mov	[esp], eax
		mov	[ebp+var_D8], 13h
		call	ds:_ZN8QVariantD1Ev

loc_6FFC2CCD:				; CODE XREF: sub_6FFC2AE0+167j
		mov	edx, [ebp+arg_8]
		mov	[ebp+var_D8], 13h
		mov	[esp], edx
		call	ds:_ZNK7QAction9isVisibleEv
		test	al, al
		jnz	loc_6FFC2D6B
		lea	eax, [ebp+var_68]
		mov	dword ptr [esp+4], 0
		mov	[esp], eax
		call	ds:_ZN8QVariantC1Eb
		mov	dword ptr [esp+4], 0FFFFFFFFh
		mov	dword ptr [esp], offset	aVisible ; "visible"
		mov	[ebp+var_D8], 0Ch
		call	ds:_ZN7QString16fromAscii_helperEPKci
		mov	[ebp+var_1C], eax
		lea	eax, [ebp+var_68]
		mov	[esp+8], eax
		lea	eax, [ebp+var_1C]
		mov	[esp+4], eax
		mov	eax, [ebp+arg_0]
		mov	[ebp+var_D8], 0Bh
		mov	[esp], eax
		call	sub_6FFE4110
		mov	eax, [ebp+var_1C]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jz	loc_6FFC3180

loc_6FFC2D55:				; CODE XREF: sub_6FFC2AE0+6B6j
		lea	eax, [ebp+var_68]
		mov	[esp], eax
		mov	[ebp+var_D8], 13h
		call	ds:_ZN8QVariantD1Ev

loc_6FFC2D6B:				; CODE XREF: sub_6FFC2AE0+205j
		mov	edx, [ebp+arg_8]
		mov	[ebp+var_D8], 13h
		mov	[esp], edx
		call	ds:_ZNK7QAction4menuEv
		test	eax, eax
		jz	loc_6FFC2E09
		lea	eax, [ebp+var_78]
		mov	dword ptr [esp+4], offset aSubmenu ; "submenu"
		mov	[esp], eax
		call	ds:_ZN8QVariantC1EPKc
		mov	dword ptr [esp+4], 0FFFFFFFFh
		mov	dword ptr [esp], offset	aChildrenDispla	; "children-display"
		mov	[ebp+var_D8], 0Ah
		call	ds:_ZN7QString16fromAscii_helperEPKci
		mov	[ebp+var_20], eax
		lea	eax, [ebp+var_78]
		mov	[esp+8], eax
		lea	eax, [ebp+var_20]
		mov	[esp+4], eax
		mov	eax, [ebp+arg_0]
		mov	[ebp+var_D8], 9
		mov	[esp], eax
		call	sub_6FFE4110
		mov	eax, [ebp+var_20]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jz	loc_6FFC3160

loc_6FFC2DF3:				; CODE XREF: sub_6FFC2AE0+696j
		lea	eax, [ebp+var_78]
		mov	[esp], eax
		mov	[ebp+var_D8], 13h
		call	ds:_ZN8QVariantD1Ev

loc_6FFC2E09:				; CODE XREF: sub_6FFC2AE0+2A3j
		mov	edx, [ebp+arg_8]
		mov	[ebp+var_D8], 13h
		mov	[esp], edx
		call	ds:_ZNK7QAction11isCheckableEv
		test	al, al
		jz	loc_6FFC2F7C
		mov	eax, [ebp+arg_8]
		mov	[esp], eax
		call	ds:_ZNK7QAction11actionGroupEv
		test	eax, eax
		jz	short loc_6FFC2E54
		mov	edx, [ebp+arg_8]
		mov	[esp], edx
		call	ds:_ZNK7QAction11actionGroupEv
		mov	[esp], eax
		call	ds:_ZNK12QActionGroup11isExclusiveEv
		test	al, al
		jnz	loc_6FFC31E0

loc_6FFC2E54:				; CODE XREF: sub_6FFC2AE0+355j
		mov	eax, offset aCheckmark ; "checkmark"

loc_6FFC2E59:				; CODE XREF: sub_6FFC2AE0+705j
		mov	[esp+4], eax
		lea	eax, [ebp+var_88]
		mov	[esp], eax
		mov	[ebp+var_D8], 13h
		call	ds:_ZN8QVariantC1EPKc
		mov	dword ptr [esp+4], 0FFFFFFFFh
		mov	dword ptr [esp], offset	aToggleType ; "toggle-type"
		mov	[ebp+var_D8], 8
		call	ds:_ZN7QString16fromAscii_helperEPKci
		mov	[ebp+var_24], eax
		lea	eax, [ebp+var_88]
		mov	[esp+8], eax
		lea	eax, [ebp+var_24]
		mov	[esp+4], eax
		mov	eax, [ebp+arg_0]
		mov	[ebp+var_D8], 7
		mov	[esp], eax
		call	sub_6FFE4110
		mov	eax, [ebp+var_24]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jz	loc_6FFC3230

loc_6FFC2ECF:				; CODE XREF: sub_6FFC2AE0+766j
		lea	eax, [ebp+var_88]
		mov	[esp], eax
		mov	[ebp+var_D8], 13h
		call	ds:_ZN8QVariantD1Ev
		mov	edx, [ebp+arg_8]
		mov	[esp], edx
		call	ds:_ZNK7QAction9isCheckedEv
		movzx	eax, al
		mov	[esp+4], eax
		lea	eax, [ebp+var_98]
		mov	[esp], eax
		call	ds:_ZN8QVariantC1Ei
		mov	dword ptr [esp+4], 0FFFFFFFFh
		mov	dword ptr [esp], offset	aToggleState ; "toggle-state"
		mov	[ebp+var_D8], 6
		call	ds:_ZN7QString16fromAscii_helperEPKci
		mov	[ebp+var_28], eax
		lea	eax, [ebp+var_98]
		mov	[esp+8], eax
		lea	eax, [ebp+var_28]
		mov	[esp+4], eax
		mov	eax, [ebp+arg_0]
		mov	[ebp+var_D8], 5
		mov	[esp], eax
		call	sub_6FFE4110
		mov	eax, [ebp+var_28]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jz	loc_6FFC3211

loc_6FFC2F63:				; CODE XREF: sub_6FFC2AE0+747j
		lea	eax, [ebp+var_98]
		mov	[esp], eax
		mov	[ebp+var_D8], 13h
		call	ds:_ZN8QVariantD1Ev

loc_6FFC2F7C:				; CODE XREF: sub_6FFC2AE0+341j
		mov	eax, [ebp+arg_0]
		mov	edx, [ebp+arg_8]
		mov	[ebp+var_D8], 13h
		mov	[esp+4], eax
		mov	eax, [ebp+arg_4]
		mov	[esp+8], edx
		mov	[esp], eax
		call	sub_6FFC24B0
		mov	edx, [ebp+arg_8]
		lea	eax, [ebp+var_2C]
		mov	[esp], eax
		mov	[esp+4], edx
		call	ds:_ZNK7QAction8shortcutEv
		sub	esp, 4
		lea	eax, [ebp+var_2C]
		mov	[esp], eax
		mov	[ebp+var_D8], 4
		call	ds:_ZNK12QKeySequence7isEmptyEv
		test	al, al
		jnz	loc_6FFC30A9
		lea	eax, [ebp+var_30]
		lea	edx, [ebp+var_2C]
		mov	[esp+4], edx
		mov	[esp], eax
		call	_ZN16DBusMenuShortcut15fromKeySequenceERK12QKeySequence
		mov	eax, dword_6FFF2AA8
		sub	esp, 4
		test	eax, eax
		jz	loc_6FFC30D4

loc_6FFC2FF5:				; CODE XREF: sub_6FFC2AE0+620j
		mov	eax, dword_6FFF2AA8
		lea	edx, [ebp+var_30]
		mov	dword ptr [esp+0Ch], 0
		mov	[esp+8], edx
		mov	[ebp+var_D8], 3
		mov	[esp+4], eax
		lea	eax, [ebp+var_A8]
		mov	[esp], eax
		call	ds:_ZN8QVariantC1EiPKvj
		mov	dword ptr [esp+4], 0FFFFFFFFh
		mov	dword ptr [esp], offset	aShortcut ; "shortcut"
		mov	[ebp+var_D8], 2
		call	ds:_ZN7QString16fromAscii_helperEPKci
		mov	[ebp+var_34], eax
		lea	eax, [ebp+var_A8]
		mov	[esp+8], eax
		lea	eax, [ebp+var_34]
		mov	[esp+4], eax
		mov	eax, [ebp+arg_0]
		mov	[ebp+var_D8], 1
		mov	[esp], eax
		call	sub_6FFE4110
		mov	eax, [ebp+var_34]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jz	loc_6FFC31A0

loc_6FFC307F:				; CODE XREF: sub_6FFC2AE0+6D6j
		lea	eax, [ebp+var_A8]
		mov	[esp], eax
		mov	[ebp+var_D8], 3
		call	ds:_ZN8QVariantD1Ev
		mov	eax, [ebp+var_30]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jz	loc_6FFC31F0

loc_6FFC30A9:				; CODE XREF: sub_6FFC2AE0+4EDj
					; sub_6FFC2AE0+72Cj
		lea	eax, [ebp+var_2C]
		mov	[esp], eax
		mov	[ebp+var_D8], 13h
		call	ds:_ZN12QKeySequenceD1Ev
		lea	eax, [ebp+var_DC]
		mov	[esp], eax
		call	_Unwind_SjLj_Unregister
		mov	eax, [ebp+arg_0]
		leave
		retn	4
; ---------------------------------------------------------------------------

loc_6FFC30D4:				; CODE XREF: sub_6FFC2AE0+50Fj
		mov	dword ptr [esp+8], offset sub_6FFDEBE0
		mov	dword ptr [esp+4], offset sub_6FFDDE50
		mov	dword ptr [esp], offset	aDbusmenushortc	; "DBusMenuShortcut"
		mov	[ebp+var_D8], 3
		call	ds:_ZN9QMetaType12registerTypeEPKcPFvPvEPFS2_PKvE
		mov	dword_6FFF2AA8,	eax
		jmp	loc_6FFC2FF5
; ---------------------------------------------------------------------------

loc_6FFC3105:				; CODE XREF: sub_6FFC2AE0+149j
		mov	eax, [ebp+var_C]
		mov	[ebp+var_D8], 13h
		mov	[esp], eax
		call	ds:_ZN7QString4freeEPNS_4DataE
		jmp	loc_6FFC2C2F
; ---------------------------------------------------------------------------

loc_6FFC3120:				; CODE XREF: sub_6FFC2AE0+138j
		mov	eax, [ebp+var_10]
		mov	[ebp+var_D8], 12h
		mov	[esp], eax
		call	ds:_ZN7QString4freeEPNS_4DataE
		jmp	loc_6FFC2C1E
; ---------------------------------------------------------------------------
		align 10h

loc_6FFC3140:				; CODE XREF: sub_6FFC2AE0+111j
		mov	eax, [ebp+var_14]
		mov	[ebp+var_D8], 10h
		mov	[esp], eax
		call	ds:_ZN7QString4freeEPNS_4DataE
		jmp	loc_6FFC2BF7
; ---------------------------------------------------------------------------
		align 10h

loc_6FFC3160:				; CODE XREF: sub_6FFC2AE0+30Dj
		mov	eax, [ebp+var_20]
		mov	[ebp+var_D8], 0Ah
		mov	[esp], eax
		call	ds:_ZN7QString4freeEPNS_4DataE
		jmp	loc_6FFC2DF3
; ---------------------------------------------------------------------------
		align 10h

loc_6FFC3180:				; CODE XREF: sub_6FFC2AE0+26Fj
		mov	eax, [ebp+var_1C]
		mov	[ebp+var_D8], 0Ch
		mov	[esp], eax
		call	ds:_ZN7QString4freeEPNS_4DataE
		jmp	loc_6FFC2D55
; ---------------------------------------------------------------------------
		align 10h

loc_6FFC31A0:				; CODE XREF: sub_6FFC2AE0+599j
		mov	eax, [ebp+var_34]
		mov	[ebp+var_D8], 2
		mov	[esp], eax
		call	ds:_ZN7QString4freeEPNS_4DataE
		jmp	loc_6FFC307F
; ---------------------------------------------------------------------------
		align 10h

loc_6FFC31C0:				; CODE XREF: sub_6FFC2AE0+1D1j
		mov	eax, [ebp+var_18]
		mov	[ebp+var_D8], 0Eh
		mov	[esp], eax
		call	ds:_ZN7QString4freeEPNS_4DataE
		jmp	loc_6FFC2CB7
; ---------------------------------------------------------------------------
		align 10h

loc_6FFC31E0:				; CODE XREF: sub_6FFC2AE0+36Ej
		mov	eax, offset aRadio ; "radio"
		jmp	loc_6FFC2E59
; ---------------------------------------------------------------------------
		align 10h

loc_6FFC31F0:				; CODE XREF: sub_6FFC2AE0+5C3j
		mov	eax, [ebp+var_30]
		mov	[ebp+var_D8], 4
		mov	[esp+4], eax
		lea	eax, [ebp+var_30]
		mov	[esp], eax
		call	sub_6FFE5810
		jmp	loc_6FFC30A9
; ---------------------------------------------------------------------------

loc_6FFC3211:				; CODE XREF: sub_6FFC2AE0+47Dj
		mov	eax, [ebp+var_28]
		mov	[ebp+var_D8], 6
		mov	[esp], eax
		call	ds:_ZN7QString4freeEPNS_4DataE
		jmp	loc_6FFC2F63
; ---------------------------------------------------------------------------
		align 10h

loc_6FFC3230:				; CODE XREF: sub_6FFC2AE0+3E9j
		mov	eax, [ebp+var_24]
		mov	[ebp+var_D8], 8
		mov	[esp], eax
		call	ds:_ZN7QString4freeEPNS_4DataE
		jmp	loc_6FFC2ECF
sub_6FFC2AE0	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn

sub_6FFC324B	proc near		; DATA XREF: sub_6FFC2AE0+2Fo

arg_0		= dword	ptr  4

		add	ebp, 8
		mov	eax, [ebp-0D8h]
		mov	edx, [ebp-0D4h]
		cmp	eax, 1
		mov	[ebp-0E4h], edx
		jz	loc_6FFC332D
		cmp	eax, 2
		jz	loc_6FFC3346
		cmp	eax, 3
		jz	loc_6FFC3387
		cmp	eax, 4
		xchg	ax, ax
		jz	loc_6FFC34B4
		cmp	eax, 5
		jz	loc_6FFC34C9
		cmp	eax, 6
		jz	loc_6FFC34E7
		cmp	eax, 7
		nop
		lea	esi, [esi+0]
		jz	loc_6FFC34FC
		cmp	eax, 8
		jz	loc_6FFC3484
		cmp	eax, 9
		jz	loc_6FFC3499
		cmp	eax, 0Ah
		nop
		lea	esi, [esi+0]
		jz	loc_6FFC3454
		cmp	eax, 0Bh
		jz	loc_6FFC3469
		cmp	eax, 0Ch
		jz	loc_6FFC3424
		cmp	eax, 0Dh
		nop
		lea	esi, [esi+0]
		jz	loc_6FFC3439
		cmp	eax, 0Eh
		jz	loc_6FFC33CA
		cmp	eax, 0Fh
		jz	loc_6FFC33DF
		cmp	eax, 10h
		nop
		lea	esi, [esi+0]
		jz	loc_6FFC33F5
		cmp	eax, 11h
		jz	loc_6FFC340A
		cmp	eax, 12h
		jz	loc_6FFC339D
		lea	eax, [ebp-34h]
		mov	[esp+0], eax
		mov	dword ptr [ebp-0D8h], 0
		call	sub_6FFEA140

loc_6FFC332D:				; CODE XREF: sub_6FFC324B+18j
		lea	eax, [ebp-0A8h]
		mov	[esp+0], eax
		mov	dword ptr [ebp-0D8h], 0
		call	ds:_ZN8QVariantD1Ev

loc_6FFC3346:				; CODE XREF: sub_6FFC324B+21j
		mov	eax, [ebp-0E4h]
		mov	[ebp-0E0h], eax
		mov	eax, [ebp-30h]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jnz	short loc_6FFC337B
		mov	eax, [ebp-30h]
		mov	dword ptr [ebp-0D8h], 0
		mov	[esp+arg_0], eax
		lea	eax, [ebp-30h]
		mov	[esp+0], eax
		call	sub_6FFE5810

loc_6FFC337B:				; CODE XREF: sub_6FFC324B+112j
		mov	edx, [ebp-0E0h]
		mov	[ebp-0E4h], edx

loc_6FFC3387:				; CODE XREF: sub_6FFC324B+2Aj
		lea	eax, [ebp-2Ch]
		mov	[esp+0], eax
		mov	dword ptr [ebp-0D8h], 0
		call	ds:_ZN12QKeySequenceD1Ev

loc_6FFC339D:				; CODE XREF: sub_6FFC324B+C7j
					; sub_6FFC324B+1D4j ...
		mov	eax, [ebp+8]
		mov	dword ptr [ebp-0D8h], 0
		mov	[esp+0], eax
		call	sub_6FFE4290
		mov	edx, [ebp-0E4h]
		mov	dword ptr [ebp-0D8h], 0FFFFFFFFh
		mov	[esp+0], edx
		call	_Unwind_SjLj_Resume
; ---------------------------------------------------------------------------

loc_6FFC33CA:				; CODE XREF: sub_6FFC324B+9Ej
		lea	eax, [ebp-14h]
		mov	[esp+0], eax
		mov	dword ptr [ebp-0D8h], 0
		call	sub_6FFEA140

loc_6FFC33DF:				; CODE XREF: sub_6FFC324B+A7j
		lea	eax, [ebp-48h]
		mov	[esp+0], eax
		mov	dword ptr [ebp-0D8h], 0
		call	ds:_ZN8QVariantD1Ev

loc_6FFC33F5:				; CODE XREF: sub_6FFC324B+B5j
		lea	eax, [ebp-10h]
		mov	[esp+0], eax
		mov	dword ptr [ebp-0D8h], 0
		call	sub_6FFEA140

loc_6FFC340A:				; CODE XREF: sub_6FFC324B+BEj
		lea	eax, [ebp-0Ch]
		mov	[esp+0], eax
		mov	dword ptr [ebp-0D8h], 0
		call	sub_6FFEA140
		jmp	loc_6FFC339D
; ---------------------------------------------------------------------------

loc_6FFC3424:				; CODE XREF: sub_6FFC324B+87j
		lea	eax, [ebp-18h]
		mov	[esp+0], eax
		mov	dword ptr [ebp-0D8h], 0
		call	sub_6FFEA140

loc_6FFC3439:				; CODE XREF: sub_6FFC324B+95j
		lea	eax, [ebp-58h]
		mov	[esp+0], eax
		mov	dword ptr [ebp-0D8h], 0
		call	ds:_ZN8QVariantD1Ev
		jmp	loc_6FFC339D
; ---------------------------------------------------------------------------

loc_6FFC3454:				; CODE XREF: sub_6FFC324B+75j
		lea	eax, [ebp-1Ch]
		mov	[esp+0], eax
		mov	dword ptr [ebp-0D8h], 0
		call	sub_6FFEA140

loc_6FFC3469:				; CODE XREF: sub_6FFC324B+7Ej
		lea	eax, [ebp-68h]
		mov	[esp+0], eax
		mov	dword ptr [ebp-0D8h], 0
		call	ds:_ZN8QVariantD1Ev
		jmp	loc_6FFC339D
; ---------------------------------------------------------------------------

loc_6FFC3484:				; CODE XREF: sub_6FFC324B+5Ej
		lea	eax, [ebp-20h]
		mov	[esp+0], eax
		mov	dword ptr [ebp-0D8h], 0
		call	sub_6FFEA140

loc_6FFC3499:				; CODE XREF: sub_6FFC324B+67j
		lea	eax, [ebp-78h]
		mov	[esp+0], eax
		mov	dword ptr [ebp-0D8h], 0
		call	ds:_ZN8QVariantD1Ev
		jmp	loc_6FFC339D
; ---------------------------------------------------------------------------

loc_6FFC34B4:				; CODE XREF: sub_6FFC324B+35j
		lea	eax, [ebp-28h]
		mov	[esp+0], eax
		mov	dword ptr [ebp-0D8h], 0
		call	sub_6FFEA140

loc_6FFC34C9:				; CODE XREF: sub_6FFC324B+3Ej
		lea	eax, [ebp-98h]
		mov	[esp+0], eax
		mov	dword ptr [ebp-0D8h], 0
		call	ds:_ZN8QVariantD1Ev
		jmp	loc_6FFC339D
; ---------------------------------------------------------------------------

loc_6FFC34E7:				; CODE XREF: sub_6FFC324B+47j
		lea	eax, [ebp-24h]
		mov	[esp+0], eax
		mov	dword ptr [ebp-0D8h], 0
		call	sub_6FFEA140

loc_6FFC34FC:				; CODE XREF: sub_6FFC324B+55j
		lea	eax, [ebp-88h]
		mov	[esp+0], eax
		mov	dword ptr [ebp-0D8h], 0
		call	ds:_ZN8QVariantD1Ev
		jmp	loc_6FFC339D
sub_6FFC324B	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_6FFC3520	proc near		; CODE XREF: sub_6FFC3D40+181p

var_BC		= dword	ptr -0BCh
var_B8		= dword	ptr -0B8h
var_B4		= dword	ptr -0B4h
var_B0		= dword	ptr -0B0h
var_AC		= byte ptr -0ACh
var_A8		= dword	ptr -0A8h
var_94		= dword	ptr -94h
var_90		= dword	ptr -90h
var_8C		= dword	ptr -8Ch
var_88		= dword	ptr -88h
var_84		= dword	ptr -84h
var_70		= byte ptr -70h
var_60		= byte ptr -60h
var_50		= byte ptr -50h
var_40		= byte ptr -40h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= byte ptr -8
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		sub	esp, 0D8h
		lea	eax, [ebp+var_8]
		mov	[ebp+var_8C], eax
		lea	eax, [ebp+var_AC]
		mov	[esp], eax
		mov	[ebp+var_94], offset sub_6FFEC1F0
		mov	[ebp+var_90], offset dword_6FFEC99C
		mov	[ebp+var_88], offset sub_6FFC3B59
		mov	[ebp+var_84], esp
		call	_Unwind_SjLj_Register
		mov	eax, ds:_ZN8QMapData11shared_nullE
		mov	edx, [ebp+arg_0]
		mov	[edx], eax
		lock inc dword ptr [eax+34h]
		setnz	dl
		lea	eax, [ebp+var_40]
		mov	dword ptr [esp+4], 0
		mov	[esp], eax
		mov	[ebp+var_A8], 0Eh
		call	ds:_ZN8QVariantC1Eb
		mov	dword ptr [esp+4], 0FFFFFFFFh
		mov	dword ptr [esp], offset	aEnabled ; "enabled"
		mov	[ebp+var_A8], 0Dh
		call	ds:_ZN7QString16fromAscii_helperEPKci
		mov	[ebp+var_C], eax
		lea	eax, [ebp+var_40]
		mov	[esp+8], eax
		lea	eax, [ebp+var_C]
		mov	[esp+4], eax
		mov	eax, [ebp+arg_0]
		mov	[ebp+var_A8], 0Ch
		mov	[esp], eax
		call	sub_6FFE4110
		mov	eax, [ebp+var_C]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jz	loc_6FFC3930

loc_6FFC35E9:				; CODE XREF: sub_6FFC3520+426j
		lea	eax, [ebp+var_40]
		mov	[esp], eax
		mov	[ebp+var_A8], 0Eh
		call	ds:_ZN8QVariantD1Ev
		lea	eax, [ebp+var_50]
		mov	dword ptr [esp+4], 1
		mov	[esp], eax
		call	ds:_ZN8QVariantC1Eb
		mov	dword ptr [esp+4], 0FFFFFFFFh
		mov	dword ptr [esp], offset	aXKdeTitle ; "x-kde-title"
		mov	[ebp+var_A8], 0Bh
		call	ds:_ZN7QString16fromAscii_helperEPKci
		mov	edx, [ebp+arg_0]
		mov	[ebp+var_10], eax
		lea	eax, [ebp+var_50]
		mov	[esp+8], eax
		lea	eax, [ebp+var_10]
		mov	[esp+4], eax
		mov	[esp], edx
		mov	[ebp+var_A8], 0Ah
		call	sub_6FFE4110
		mov	eax, [ebp+var_10]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jz	loc_6FFC3910

loc_6FFC3669:				; CODE XREF: sub_6FFC3520+406j
		lea	eax, [ebp+var_50]
		mov	[esp], eax
		mov	[ebp+var_A8], 0Eh
		call	ds:_ZN8QVariantD1Ev
		mov	eax, [ebp+arg_8]
		mov	[esp+4], eax
		mov	eax, ds:_ZN13QWidgetAction16staticMetaObjectE
		mov	[esp], eax
		call	ds:_ZNK11QMetaObject4castEP7QObject
		test	eax, eax
		jz	loc_6FFC3970
		mov	[esp], eax
		mov	[ebp+var_A8], 0Eh
		call	ds:_ZNK13QWidgetAction13defaultWidgetEv
		mov	[esp+4], eax
		mov	eax, ds:_ZN11QToolButton16staticMetaObjectE
		mov	[esp], eax
		call	ds:_ZNK11QMetaObject4castEP7QObject
		test	eax, eax
		jz	loc_6FFC3A13
		mov	[esp], eax
		mov	[ebp+var_A8], 0Eh
		call	ds:_ZNK11QToolButton13defaultActionEv
		test	eax, eax
		mov	[ebp+var_B0], eax
		jz	loc_6FFC3AB6
		mov	edx, eax
		lea	eax, [ebp+var_20]
		mov	[esp+4], edx
		mov	[esp], eax
		mov	[ebp+var_A8], 0Eh
		call	ds:_ZNK7QAction4textEv
		sub	esp, 4
		lea	eax, [ebp+var_24]
		lea	edx, [ebp+var_20]
		mov	dword ptr [esp+0Ch], 5Fh
		mov	dword ptr [esp+8], 26h
		mov	[esp+4], edx
		mov	[esp], eax
		mov	[ebp+var_A8], 6
		call	sub_6FFD52A0
		sub	esp, 4
		lea	eax, [ebp+var_24]
		mov	[esp+4], eax
		lea	eax, [ebp+var_60]
		mov	[esp], eax
		mov	[ebp+var_A8], 5
		call	ds:_ZN8QVariantC1ERK7QString
		mov	dword ptr [esp+4], 0FFFFFFFFh
		mov	dword ptr [esp], offset	aLabel ; "label"
		mov	[ebp+var_A8], 4
		call	ds:_ZN7QString16fromAscii_helperEPKci
		mov	[ebp+var_28], eax
		lea	eax, [ebp+var_60]
		mov	[esp+8], eax
		lea	eax, [ebp+var_28]
		mov	[esp+4], eax
		mov	eax, [ebp+arg_0]
		mov	[ebp+var_A8], 3
		mov	[esp], eax
		call	sub_6FFE4110
		mov	eax, [ebp+var_28]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jz	loc_6FFC38F0

loc_6FFC37AB:				; CODE XREF: sub_6FFC3520+3E6j
		lea	eax, [ebp+var_60]
		mov	[esp], eax
		mov	[ebp+var_A8], 5
		call	ds:_ZN8QVariantD1Ev
		mov	eax, [ebp+var_24]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jz	loc_6FFC38D1

loc_6FFC37D2:				; CODE XREF: sub_6FFC3520+3C7j
		mov	eax, [ebp+var_20]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jz	loc_6FFC38B6

loc_6FFC37E3:				; CODE XREF: sub_6FFC3520+3ACj
		mov	eax, [ebp+arg_0]
		mov	edx, [ebp+var_B0]
		mov	[ebp+var_A8], 0Eh
		mov	[esp+4], eax
		mov	eax, [ebp+arg_4]
		mov	[esp+8], edx
		mov	[esp], eax
		call	sub_6FFC24B0
		mov	edx, [ebp+var_B0]
		mov	[esp], edx
		call	ds:_ZNK7QAction9isVisibleEv
		test	al, al
		jz	short loc_6FFC3831

loc_6FFC381C:				; CODE XREF: sub_6FFC3520+391j
					; sub_6FFC3520+4EEj ...
		lea	eax, [ebp+var_AC]
		mov	[esp], eax
		call	_Unwind_SjLj_Unregister
		mov	eax, [ebp+arg_0]
		leave
		retn	4
; ---------------------------------------------------------------------------

loc_6FFC3831:				; CODE XREF: sub_6FFC3520+2FAj
		lea	eax, [ebp+var_70]
		mov	dword ptr [esp+4], 0
		mov	[esp], eax
		call	ds:_ZN8QVariantC1Eb
		mov	dword ptr [esp+4], 0FFFFFFFFh
		mov	dword ptr [esp], offset	aVisible ; "visible"
		mov	[ebp+var_A8], 2
		call	ds:_ZN7QString16fromAscii_helperEPKci
		mov	[ebp+var_2C], eax
		lea	eax, [ebp+var_70]
		mov	[esp+8], eax
		lea	eax, [ebp+var_2C]
		mov	[esp+4], eax
		mov	eax, [ebp+arg_0]
		mov	[ebp+var_A8], 1
		mov	[esp], eax
		call	sub_6FFE4110
		mov	eax, [ebp+var_2C]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jz	loc_6FFC3950

loc_6FFC389B:				; CODE XREF: sub_6FFC3520+446j
		lea	eax, [ebp+var_70]
		mov	[esp], eax
		mov	[ebp+var_A8], 0Eh
		call	ds:_ZN8QVariantD1Ev
		jmp	loc_6FFC381C
; ---------------------------------------------------------------------------

loc_6FFC38B6:				; CODE XREF: sub_6FFC3520+2BDj
		mov	eax, [ebp+var_20]
		mov	[ebp+var_A8], 0Eh
		mov	[esp], eax
		call	ds:_ZN7QString4freeEPNS_4DataE
		jmp	loc_6FFC37E3
; ---------------------------------------------------------------------------

loc_6FFC38D1:				; CODE XREF: sub_6FFC3520+2ACj
		mov	eax, [ebp+var_24]
		mov	[ebp+var_A8], 6
		mov	[esp], eax
		call	ds:_ZN7QString4freeEPNS_4DataE
		jmp	loc_6FFC37D2
; ---------------------------------------------------------------------------
		align 10h

loc_6FFC38F0:				; CODE XREF: sub_6FFC3520+285j
		mov	eax, [ebp+var_28]
		mov	[ebp+var_A8], 4
		mov	[esp], eax
		call	ds:_ZN7QString4freeEPNS_4DataE
		jmp	loc_6FFC37AB
; ---------------------------------------------------------------------------
		align 10h

loc_6FFC3910:				; CODE XREF: sub_6FFC3520+143j
		mov	eax, [ebp+var_10]
		mov	[ebp+var_A8], 0Bh
		mov	[esp], eax
		call	ds:_ZN7QString4freeEPNS_4DataE
		jmp	loc_6FFC3669
; ---------------------------------------------------------------------------
		align 10h

loc_6FFC3930:				; CODE XREF: sub_6FFC3520+C3j
		mov	eax, [ebp+var_C]
		mov	[ebp+var_A8], 0Dh
		mov	[esp], eax
		call	ds:_ZN7QString4freeEPNS_4DataE
		jmp	loc_6FFC35E9
; ---------------------------------------------------------------------------
		align 10h

loc_6FFC3950:				; CODE XREF: sub_6FFC3520+375j
		mov	eax, [ebp+var_2C]
		mov	[ebp+var_A8], 2
		mov	[esp], eax
		call	ds:_ZN7QString4freeEPNS_4DataE
		jmp	loc_6FFC389B
; ---------------------------------------------------------------------------
		align 10h

loc_6FFC3970:				; CODE XREF: sub_6FFC3520+176j
		lea	eax, [ebp+var_14]
		mov	[esp], eax
		call	sub_6FFDF180
		mov	eax, [ebp+var_14]
		sub	esp, 4
		mov	byte ptr [eax+14h], 0
		lea	eax, [ebp+var_14]
		mov	dword ptr [esp+4], offset a31m ; "\x1B[31m"
		mov	[esp], eax
		mov	[ebp+var_A8], 9
		call	sub_6FFE9FF0
		mov	dword ptr [esp+4], offset aQvariantmapDbu ; "QVariantMap DBusMenuExporterPrivate::pr"...
		mov	[esp], eax
		call	sub_6FFE9FF0
		mov	dword ptr [esp+4], offset a0m ;	"\x1B[0m:"
		mov	[esp], eax
		call	sub_6FFE9FF0
		mov	edx, eax
		mov	[ebp+var_B4], eax
		mov	eax, [eax]
		mov	byte ptr [eax+14h], 1
		mov	dword ptr [esp+4], 20h
		mov	eax, [edx]
		mov	[esp], eax
		call	ds:_ZN11QTextStreamlsEc
		mov	eax, [ebp+var_B4]
		mov	dword ptr [esp+4], offset aConditionFai_1 ; "Condition failed: widgetAction"
		mov	[esp], eax
		call	sub_6FFE9FF0
		lea	eax, [ebp+var_14]
		mov	[esp], eax
		mov	[ebp+var_A8], 0Eh
		call	sub_6FFE9DD0
		jmp	loc_6FFC381C
; ---------------------------------------------------------------------------

loc_6FFC3A13:				; CODE XREF: sub_6FFC3520+1A3j
		lea	eax, [ebp+var_18]
		mov	[esp], eax
		call	sub_6FFDF180
		mov	eax, [ebp+var_18]
		sub	esp, 4
		mov	byte ptr [eax+14h], 0
		lea	eax, [ebp+var_18]
		mov	dword ptr [esp+4], offset a31m ; "\x1B[31m"
		mov	[esp], eax
		mov	[ebp+var_A8], 8
		call	sub_6FFE9FF0
		mov	dword ptr [esp+4], offset aQvariantmapDbu ; "QVariantMap DBusMenuExporterPrivate::pr"...
		mov	[esp], eax
		call	sub_6FFE9FF0
		mov	dword ptr [esp+4], offset a0m ;	"\x1B[0m:"
		mov	[esp], eax
		call	sub_6FFE9FF0
		mov	edx, eax
		mov	[ebp+var_B8], eax
		mov	eax, [eax]
		mov	byte ptr [eax+14h], 1
		mov	dword ptr [esp+4], 20h
		mov	eax, [edx]
		mov	[esp], eax
		call	ds:_ZN11QTextStreamlsEc
		mov	eax, [ebp+var_B8]
		mov	dword ptr [esp+4], offset aConditionFai_2 ; "Condition failed: button"
		mov	[esp], eax
		call	sub_6FFE9FF0
		lea	eax, [ebp+var_18]
		mov	[esp], eax
		mov	[ebp+var_A8], 0Eh
		call	sub_6FFE9DD0
		jmp	loc_6FFC381C
; ---------------------------------------------------------------------------

loc_6FFC3AB6:				; CODE XREF: sub_6FFC3520+1C4j
		lea	eax, [ebp+var_1C]
		mov	[esp], eax
		call	sub_6FFDF180
		mov	eax, [ebp+var_1C]
		sub	esp, 4
		mov	byte ptr [eax+14h], 0
		lea	eax, [ebp+var_1C]
		mov	dword ptr [esp+4], offset a31m ; "\x1B[31m"
		mov	[esp], eax
		mov	[ebp+var_A8], 7
		call	sub_6FFE9FF0
		mov	dword ptr [esp+4], offset aQvariantmapDbu ; "QVariantMap DBusMenuExporterPrivate::pr"...
		mov	[esp], eax
		call	sub_6FFE9FF0
		mov	dword ptr [esp+4], offset a0m ;	"\x1B[0m:"
		mov	[esp], eax
		call	sub_6FFE9FF0
		mov	edx, eax
		mov	[ebp+var_BC], eax
		mov	eax, [eax]
		mov	byte ptr [eax+14h], 1
		mov	dword ptr [esp+4], 20h
		mov	eax, [edx]
		mov	[esp], eax
		call	ds:_ZN11QTextStreamlsEc
		mov	eax, [ebp+var_BC]
		mov	dword ptr [esp+4], offset aConditionFaile ; "Condition failed: action"
		mov	[esp], eax
		call	sub_6FFE9FF0
		lea	eax, [ebp+var_1C]
		mov	[esp], eax
		mov	[ebp+var_A8], 0Eh
		call	sub_6FFE9DD0
		jmp	loc_6FFC381C
sub_6FFC3520	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn

sub_6FFC3B59	proc near		; DATA XREF: sub_6FFC3520+2Fo
		add	ebp, 8
		mov	eax, [ebp-0A8h]
		mov	edx, [ebp-0A4h]
		cmp	eax, 1
		mov	[ebp-0C0h], edx
		jz	short loc_6FFC3BF1
		cmp	eax, 2
		jz	loc_6FFC3CDF
		cmp	eax, 3
		jz	loc_6FFC3CF4
		cmp	eax, 4
		jz	loc_6FFC3D0A
		cmp	eax, 5
		jz	loc_6FFC3D1F
		cmp	eax, 6
		jz	loc_6FFC3CC5
		cmp	eax, 7
		jz	loc_6FFC3CAB
		cmp	eax, 8
		lea	esi, [esi+0]
		jz	loc_6FFC3C91
		cmp	eax, 9
		jz	loc_6FFC3C61
		cmp	eax, 0Ah
		jz	loc_6FFC3C76
		cmp	eax, 0Bh
		nop
		lea	esi, [esi+0]
		jz	short loc_6FFC3C34
		cmp	eax, 0Ch
		jz	short loc_6FFC3C49
		cmp	eax, 0Dh
		jz	short loc_6FFC3C07
		lea	eax, [ebp-2Ch]
		mov	[esp+0], eax
		mov	dword ptr [ebp-0A8h], 0
		call	sub_6FFEA140

loc_6FFC3BF1:				; CODE XREF: sub_6FFC3B59+18j
		lea	eax, [ebp-70h]
		mov	[esp+0], eax
		mov	dword ptr [ebp-0A8h], 0
		call	ds:_ZN8QVariantD1Ev

loc_6FFC3C07:				; CODE XREF: sub_6FFC3B59+81j
					; sub_6FFC3B59+106j ...
		mov	eax, [ebp+8]
		mov	dword ptr [ebp-0A8h], 0
		mov	[esp+0], eax
		call	sub_6FFE4290
		mov	edx, [ebp-0C0h]
		mov	dword ptr [ebp-0A8h], 0FFFFFFFFh
		mov	[esp+0], edx
		call	_Unwind_SjLj_Resume
; ---------------------------------------------------------------------------

loc_6FFC3C34:				; CODE XREF: sub_6FFC3B59+77j
		lea	eax, [ebp-0Ch]
		mov	[esp+0], eax
		mov	dword ptr [ebp-0A8h], 0
		call	sub_6FFEA140

loc_6FFC3C49:				; CODE XREF: sub_6FFC3B59+7Cj
		lea	eax, [ebp-40h]
		mov	[esp+0], eax
		mov	dword ptr [ebp-0A8h], 0
		call	ds:_ZN8QVariantD1Ev
		jmp	short loc_6FFC3C07
; ---------------------------------------------------------------------------

loc_6FFC3C61:				; CODE XREF: sub_6FFC3B59+60j
		lea	eax, [ebp-10h]
		mov	[esp+0], eax
		mov	dword ptr [ebp-0A8h], 0
		call	sub_6FFEA140

loc_6FFC3C76:				; CODE XREF: sub_6FFC3B59+69j
		lea	eax, [ebp-50h]
		mov	[esp+0], eax
		mov	dword ptr [ebp-0A8h], 0
		call	ds:_ZN8QVariantD1Ev
		jmp	loc_6FFC3C07
; ---------------------------------------------------------------------------

loc_6FFC3C91:				; CODE XREF: sub_6FFC3B59+57j
		lea	eax, [ebp-14h]
		mov	[esp+0], eax
		mov	dword ptr [ebp-0A8h], 0
		call	sub_6FFE9DD0
		jmp	loc_6FFC3C07
; ---------------------------------------------------------------------------

loc_6FFC3CAB:				; CODE XREF: sub_6FFC3B59+4Aj
		lea	eax, [ebp-18h]
		mov	[esp+0], eax
		mov	dword ptr [ebp-0A8h], 0
		call	sub_6FFE9DD0
		jmp	loc_6FFC3C07
; ---------------------------------------------------------------------------

loc_6FFC3CC5:				; CODE XREF: sub_6FFC3B59+41j
		lea	eax, [ebp-1Ch]
		mov	[esp+0], eax
		mov	dword ptr [ebp-0A8h], 0
		call	sub_6FFE9DD0
		jmp	loc_6FFC3C07
; ---------------------------------------------------------------------------

loc_6FFC3CDF:				; CODE XREF: sub_6FFC3B59+1Dj
		lea	eax, [ebp-28h]
		mov	[esp+0], eax
		mov	dword ptr [ebp-0A8h], 0
		call	sub_6FFEA140

loc_6FFC3CF4:				; CODE XREF: sub_6FFC3B59+26j
		lea	eax, [ebp-60h]
		mov	[esp+0], eax
		mov	dword ptr [ebp-0A8h], 0
		call	ds:_ZN8QVariantD1Ev

loc_6FFC3D0A:				; CODE XREF: sub_6FFC3B59+2Fj
		lea	eax, [ebp-24h]
		mov	[esp+0], eax
		mov	dword ptr [ebp-0A8h], 0
		call	sub_6FFEA140

loc_6FFC3D1F:				; CODE XREF: sub_6FFC3B59+38j
		lea	eax, [ebp-20h]
		mov	[esp+0], eax
		mov	dword ptr [ebp-0A8h], 0
		call	sub_6FFEA140
		jmp	loc_6FFC3C07
sub_6FFC3B59	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_6FFC3D40	proc near		; CODE XREF: sub_6FFC4C20+DAp
					; _ZN16DBusMenuExporter15doUpdateActionsEv+323p

var_54		= dword	ptr -54h
var_4D		= byte ptr -4Dh
var_4C		= byte ptr -4Ch
var_48		= dword	ptr -48h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= byte ptr -8
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		sub	esp, 68h
		lea	eax, [ebp+var_8]
		mov	[ebp+var_2C], eax
		lea	eax, [ebp+var_4C]
		mov	[esp], eax
		mov	[ebp+var_34], offset sub_6FFEC1F0
		mov	[ebp+var_30], offset dword_6FFEC9BC
		mov	[ebp+var_28], offset sub_6FFC3FAA
		mov	[ebp+var_24], esp
		call	_Unwind_SjLj_Register
		mov	eax, [ebp+arg_8]
		test	eax, eax
		jz	loc_6FFC3ED0
		mov	eax, [ebp+arg_8]
		lea	edx, [ebp+var_10]
		mov	[esp], edx
		mov	[ebp+var_48], 0FFFFFFFFh
		mov	[esp+4], eax
		call	ds:_ZNK7QObject10objectNameEv
		mov	eax, ds:_ZN7QString16codecForCStringsE
		mov	ecx, [eax]
		sub	esp, 4
		test	ecx, ecx
		jz	loc_6FFC3F80
		mov	edx, ds:off_6FFF3A40
		lea	eax, [ebp+var_14]
		mov	dword ptr [esp+8], 0FFFFFFFFh
		mov	[esp], eax
		mov	[ebp+var_48], 2
		mov	[esp+4], edx
		call	ds:_ZN7QString9fromAsciiEPKci
		sub	esp, 4
		lea	eax, [ebp+var_14]
		mov	[esp+4], eax
		lea	eax, [ebp+var_10]
		mov	[esp], eax
		mov	[ebp+var_48], 1
		call	ds:_ZNK7QStringeqERKS_
		mov	[ebp+var_4D], al
		mov	eax, [ebp+var_14]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jz	short loc_6FFC3E70

loc_6FFC3DF8:				; CODE XREF: sub_6FFC3D40+143j
					; sub_6FFC3D40+265j
		mov	eax, [ebp+var_10]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jnz	short loc_6FFC3E18
		mov	eax, [ebp+var_10]
		mov	[ebp+var_48], 0FFFFFFFFh
		mov	[esp], eax
		call	ds:_ZN7QString4freeEPNS_4DataE

loc_6FFC3E18:				; CODE XREF: sub_6FFC3D40+C3j
		cmp	[ebp+var_4D], 0
		jnz	loc_6FFC3EA6
		mov	eax, [ebp+arg_8]
		mov	[ebp+var_48], 0FFFFFFFFh
		mov	[esp], eax
		call	ds:_ZNK7QAction11isSeparatorEv
		test	al, al
		jnz	short loc_6FFC3E88
		mov	eax, [ebp+arg_8]
		mov	edx, [ebp+arg_4]
		mov	[ebp+var_48], 0FFFFFFFFh
		mov	[esp+8], eax
		mov	eax, [ebp+arg_0]
		mov	[esp+4], edx
		mov	[esp], eax
		call	sub_6FFC2AE0
		sub	esp, 4

loc_6FFC3E5C:				; CODE XREF: sub_6FFC3D40+164j
					; sub_6FFC3D40+189j ...
		lea	eax, [ebp+var_4C]
		mov	[esp], eax
		call	_Unwind_SjLj_Unregister
		mov	eax, [ebp+arg_0]
		leave
		retn	4
; ---------------------------------------------------------------------------
		align 10h

loc_6FFC3E70:				; CODE XREF: sub_6FFC3D40+B6j
		mov	eax, [ebp+var_14]
		mov	[ebp+var_48], 2
		mov	[esp], eax
		call	ds:_ZN7QString4freeEPNS_4DataE
		jmp	loc_6FFC3DF8
; ---------------------------------------------------------------------------

loc_6FFC3E88:				; CODE XREF: sub_6FFC3D40+F7j
		mov	edx, [ebp+arg_8]
		mov	eax, [ebp+arg_4]
		mov	[esp+8], edx
		mov	edx, [ebp+arg_0]
		mov	[esp+4], eax
		mov	[esp], edx
		call	sub_6FFC28C0
		sub	esp, 4
		jmp	short loc_6FFC3E5C
; ---------------------------------------------------------------------------

loc_6FFC3EA6:				; CODE XREF: sub_6FFC3D40+DCj
		mov	edx, [ebp+arg_8]
		mov	eax, [ebp+arg_4]
		mov	[ebp+var_48], 0FFFFFFFFh
		mov	[esp+8], edx
		mov	edx, [ebp+arg_0]
		mov	[esp+4], eax
		mov	[esp], edx
		call	sub_6FFC3520
		sub	esp, 4
		jmp	short loc_6FFC3E5C
; ---------------------------------------------------------------------------
		align 10h

loc_6FFC3ED0:				; CODE XREF: sub_6FFC3D40+34j
		lea	edx, [ebp+var_C]
		mov	[esp], edx
		mov	[ebp+var_48], 0FFFFFFFFh
		call	sub_6FFDF180
		mov	eax, [ebp+var_C]
		mov	byte ptr [eax+14h], 0
		lea	eax, [ebp+var_C]
		mov	[ebp+var_48], 3
		sub	esp, 4
		mov	dword ptr [esp+4], offset a31m ; "\x1B[31m"
		mov	[esp], eax
		call	sub_6FFE9FF0
		mov	dword ptr [esp+4], offset aQvariantmapD_0 ; "QVariantMap DBusMenuExporterPrivate::pr"...
		mov	[esp], eax
		call	sub_6FFE9FF0
		mov	dword ptr [esp+4], offset a0m ;	"\x1B[0m:"
		mov	[esp], eax
		call	sub_6FFE9FF0
		mov	edx, eax
		mov	[ebp+var_54], eax
		mov	eax, [eax]
		mov	byte ptr [eax+14h], 1
		mov	dword ptr [esp+4], 20h
		mov	eax, [edx]
		mov	[esp], eax
		call	ds:_ZN11QTextStreamlsEc
		mov	eax, [ebp+var_54]
		mov	dword ptr [esp+4], offset aConditionFaile ; "Condition failed: action"
		mov	[esp], eax
		call	sub_6FFE9FF0
		lea	eax, [ebp+var_C]
		mov	[esp], eax
		mov	[ebp+var_48], 0FFFFFFFFh
		call	sub_6FFE9DD0
		mov	eax, ds:_ZN8QMapData11shared_nullE
		mov	edx, [ebp+arg_0]
		mov	[edx], eax
		lock inc dword ptr [eax+34h]
		setnz	dl
		jmp	loc_6FFC3E5C
; ---------------------------------------------------------------------------
		align 10h

loc_6FFC3F80:				; CODE XREF: sub_6FFC3D40+60j
		mov	eax, ds:off_6FFF3A40
		lea	edx, [ebp+var_10]
		mov	[esp], edx
		mov	[ebp+var_48], 2
		mov	[ebp+var_18], eax
		lea	eax, [ebp+var_18]
		mov	[esp+4], eax
		call	ds:_ZNK7QStringeqERK13QLatin1String
		mov	[ebp+var_4D], al
		jmp	loc_6FFC3DF8
sub_6FFC3D40	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn

sub_6FFC3FAA	proc near		; DATA XREF: sub_6FFC3D40+20o
		add	ebp, 8
		mov	eax, [ebp-48h]
		mov	edx, [ebp-44h]
		cmp	eax, 1
		mov	[ebp-58h], edx
		jz	short loc_6FFC3FD2
		cmp	eax, 2
		jz	short loc_6FFC3FF6
		lea	eax, [ebp-14h]
		mov	[esp+0], eax
		mov	dword ptr [ebp-48h], 0
		call	sub_6FFEA140

loc_6FFC3FD2:				; CODE XREF: sub_6FFC3FAA+Fj
		lea	eax, [ebp-10h]
		mov	[esp+0], eax
		mov	dword ptr [ebp-48h], 0
		call	sub_6FFEA140
		mov	eax, [ebp-58h]
		mov	dword ptr [ebp-48h], 0FFFFFFFFh
		mov	[esp+0], eax
		call	_Unwind_SjLj_Resume
; ---------------------------------------------------------------------------

loc_6FFC3FF6:				; CODE XREF: sub_6FFC3FAA+14j
		lea	eax, [ebp-0Ch]
		mov	[esp+0], eax
		mov	dword ptr [ebp-48h], 0
		call	sub_6FFE9DD0
		mov	edx, [ebp-58h]
		mov	dword ptr [ebp-48h], 0FFFFFFFFh
		mov	[esp+0], edx
		call	_Unwind_SjLj_Resume
sub_6FFC3FAA	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6FFC4020	proc near		; CODE XREF: _ZN16DBusMenuExporter19slotActionDestroyedEP7QObject+11j
					; sub_6FFC4220+1Ep ...

var_8C		= dword	ptr -8Ch
var_88		= dword	ptr -88h
var_84		= dword	ptr -84h
var_80		= dword	ptr -80h
var_70		= dword	ptr -70h
var_60		= dword	ptr -60h
var_50		= byte ptr -50h
var_20		= dword	ptr -20h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 7Ch
		mov	eax, [esp+8Ch+arg_4]
		mov	ebx, [esp+8Ch+arg_0]
		mov	[esp+8Ch+var_20], eax
		lea	eax, [esp+8Ch+var_20]
		mov	[esp+8Ch+var_88], eax
		lea	eax, [ebx+10h]
		mov	[esp+8Ch+var_8C], eax
		call	sub_6FFE4DE0
		mov	eax, [ebx+18h]
		mov	eax, [eax+34h]
		cmp	eax, 1
		jz	short loc_6FFC4062
		lea	eax, [ebx+18h]
		mov	[esp+8Ch+var_8C], eax
		call	sub_6FFE4310

loc_6FFC4062:				; CODE XREF: sub_6FFC4020+35j
		mov	esi, [ebx+18h]
		mov	edx, [esi+38h]
		test	edx, edx
		js	short loc_6FFC40C0
		mov	edi, [esp+8Ch+var_20]
		lea	ebp, [esp+8Ch+var_50]
		mov	ecx, esi
		lea	eax, [ebp+edx*4+0]
		mov	[esp+8Ch+var_60], eax
		mov	[esp+8Ch+var_70], ebx

loc_6FFC4082:				; CODE XREF: sub_6FFC4020+8Aj
		mov	eax, [ecx+edx*4+4]
		cmp	esi, eax
		jz	loc_6FFC41AE

loc_6FFC408E:				; CODE XREF: sub_6FFC4020+188j
		cmp	[eax-8], edi
		jb	loc_6FFC41A0

loc_6FFC4097:				; CODE XREF: sub_6FFC4020+190j
		mov	ebx, [esp+8Ch+var_60]
		sub	edx, 1
		mov	[ebx], ecx
		sub	ebx, 4
		cmp	edx, 0FFFFFFFFh
		mov	[esp+8Ch+var_60], ebx
		jnz	short loc_6FFC4082
		cmp	esi, eax
		mov	ebx, [esp+8Ch+var_70]
		jz	short loc_6FFC40C0
		cmp	edi, [eax-8]
		lea	edx, [eax-8]
		jnb	loc_6FFC41D0

loc_6FFC40C0:				; CODE XREF: sub_6FFC4020+4Aj
					; sub_6FFC4020+92j
		xor	edi, edi

loc_6FFC40C2:				; CODE XREF: sub_6FFC4020+1CCj
		mov	eax, [ebx+14h]
		mov	eax, [eax+34h]
		cmp	eax, 1
		jz	short loc_6FFC40D8
		lea	eax, [ebx+14h]
		mov	[esp+8Ch+var_8C], eax
		call	sub_6FFE48A0

loc_6FFC40D8:				; CODE XREF: sub_6FFC4020+ABj
		mov	ecx, [ebx+14h]
		mov	edx, [ecx+38h]
		test	edx, edx
		js	loc_6FFC4198
		lea	ebp, [esp+8Ch+var_50]
		mov	esi, ecx
		lea	eax, [ebp+edx*4+0]
		mov	[esp+8Ch+var_60], eax
		mov	[esp+8Ch+var_70], ebx

loc_6FFC40F8:				; CODE XREF: sub_6FFC4020+100j
		mov	eax, [esi+edx*4+4]
		cmp	ecx, eax
		jz	loc_6FFC41C3

loc_6FFC4104:				; CODE XREF: sub_6FFC4020+19Dj
		cmp	edi, [eax-8]
		jg	loc_6FFC41B5

loc_6FFC410D:				; CODE XREF: sub_6FFC4020+1A5j
		mov	ebx, [esp+8Ch+var_60]
		sub	edx, 1
		mov	[ebx], esi
		sub	ebx, 4
		cmp	edx, 0FFFFFFFFh
		mov	[esp+8Ch+var_60], ebx
		jnz	short loc_6FFC40F8
		cmp	ecx, eax
		mov	ebx, [esp+8Ch+var_70]
		jz	short loc_6FFC4198
		mov	edx, [eax-8]
		cmp	edi, edx
		jl	short loc_6FFC4198
		mov	esi, [eax+4]
		cmp	esi, ecx
		jz	short loc_6FFC4175
		cmp	edx, [esi-8]
		jl	short loc_6FFC4175
		mov	edi, ds:_ZN8QMapData11node_deleteEPPNS_4NodeEiS1_
		jmp	short loc_6FFC4149
; ---------------------------------------------------------------------------

loc_6FFC4145:				; CODE XREF: sub_6FFC4020+14Fj
		mov	eax, esi
		mov	esi, edx

loc_6FFC4149:				; CODE XREF: sub_6FFC4020+123j
		mov	[esp+8Ch+var_80], eax
		mov	[esp+8Ch+var_84], 8
		mov	[esp+8Ch+var_88], ebp
		mov	eax, [ebx+14h]
		mov	[esp+8Ch+var_8C], eax
		call	edi ; _ZN8QMapData11node_deleteEPPNS_4NodeEiS1_
		mov	edx, [esi+4]
		cmp	edx, [ebx+14h]
		jz	short loc_6FFC4171
		mov	eax, [esi-8]
		cmp	eax, [edx-8]
		jge	short loc_6FFC4145

loc_6FFC4171:				; CODE XREF: sub_6FFC4020+147j
		mov	eax, esi
		jmp	short loc_6FFC4180
; ---------------------------------------------------------------------------

loc_6FFC4175:				; CODE XREF: sub_6FFC4020+116j
					; sub_6FFC4020+11Bj
		mov	edi, ds:_ZN8QMapData11node_deleteEPPNS_4NodeEiS1_
		nop
		lea	esi, [esi+0]

loc_6FFC4180:				; CODE XREF: sub_6FFC4020+153j
		mov	[esp+8Ch+var_80], eax
		mov	[esp+8Ch+var_84], 8
		mov	[esp+8Ch+var_88], ebp
		mov	eax, [ebx+14h]
		mov	[esp+8Ch+var_8C], eax
		call	edi ; _ZN8QMapData11node_deleteEPPNS_4NodeEiS1_

loc_6FFC4198:				; CODE XREF: sub_6FFC4020+C0j
					; sub_6FFC4020+108j ...
		add	esp, 7Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_6FFC41A0:				; CODE XREF: sub_6FFC4020+71j
		mov	ecx, eax
		mov	eax, [ecx+edx*4+4]
		cmp	esi, eax
		jnz	loc_6FFC408E

loc_6FFC41AE:				; CODE XREF: sub_6FFC4020+68j
		mov	eax, esi
		jmp	loc_6FFC4097
; ---------------------------------------------------------------------------

loc_6FFC41B5:				; CODE XREF: sub_6FFC4020+E7j
		mov	esi, eax
		mov	eax, [esi+edx*4+4]
		cmp	ecx, eax
		jnz	loc_6FFC4104

loc_6FFC41C3:				; CODE XREF: sub_6FFC4020+DEj
		mov	eax, ecx
		jmp	loc_6FFC410D
; ---------------------------------------------------------------------------
		align 10h

loc_6FFC41D0:				; CODE XREF: sub_6FFC4020+9Aj
		mov	edi, [edx+4]
		mov	[esp+8Ch+var_80], eax
		mov	[esp+8Ch+var_84], 8
		mov	[esp+8Ch+var_88], ebp
		mov	[esp+8Ch+var_8C], esi
		call	ds:_ZN8QMapData11node_deleteEPPNS_4NodeEiS1_
		jmp	loc_6FFC40C2
sub_6FFC4020	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry   9. _ZN16DBusMenuExporter19slotActionDestroyedEP7QObject

; =============== S U B	R O U T	I N E =======================================


		public _ZN16DBusMenuExporter19slotActionDestroyedEP7QObject
_ZN16DBusMenuExporter19slotActionDestroyedEP7QObject proc near

arg_0		= dword	ptr  4

		sub	esp, 0Ch
		mov	eax, [esp+0Ch+arg_0]
		mov	eax, [eax+8]
		mov	[esp+0Ch+arg_0], eax
		add	esp, 0Ch
		jmp	sub_6FFC4020
_ZN16DBusMenuExporter19slotActionDestroyedEP7QObject endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6FFC4220	proc near		; CODE XREF: .text:6FFC15AFp
					; sub_6FFC1880+7Ap

var_5C		= dword	ptr -5Ch
var_58		= dword	ptr -58h
var_54		= dword	ptr -54h
var_50		= dword	ptr -50h
var_40		= dword	ptr -40h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_20		= dword	ptr -20h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 4Ch
		mov	ecx, [esp+5Ch+arg_4]
		mov	esi, [esp+5Ch+arg_0]
		mov	ebx, [esp+5Ch+arg_8]
		mov	[esp+5Ch+var_58], ecx
		mov	[esp+5Ch+var_34], ecx
		mov	[esp+5Ch+var_5C], esi
		call	sub_6FFC4020
		mov	edi, ds:_Z13qFlagLocationPKc
		mov	[esp+5Ch+var_5C], offset a1slotactiond_0 ; "1slotActionDestroyed(QObject*)"
		call	edi ; _Z13qFlagLocationPKc
		mov	ebp, [esi]
		mov	[esp+5Ch+var_5C], offset a2destroyedQo_1 ; "2destroyed(QObject*)"
		mov	[esp+5Ch+var_30], eax
		call	edi ; _Z13qFlagLocationPKc
		mov	ecx, [esp+5Ch+var_34]
		mov	edx, [esp+5Ch+var_30]
		mov	[esp+5Ch+var_54], ebp
		mov	[esp+5Ch+var_5C], ecx
		mov	[esp+5Ch+var_50], edx
		mov	[esp+5Ch+var_58], eax
		call	ds:_ZN7QObject10disconnectEPKS_PKcS1_S3_
		add	dword ptr [esi+20h], 1
		mov	[esp+5Ch+var_20], ebx
		mov	edi, [esi+30h]
		mov	eax, [edi+18h]
		mov	ebp, edi
		mov	ecx, edi
		test	eax, eax
		mov	[esp+5Ch+var_40], eax
		jz	short loc_6FFC42D2
		xor	edx, edx
		mov	eax, ebx
		div	[esp+5Ch+var_40]
		mov	ebp, edx
		shl	ebp, 2
		add	ebp, [edi+4]
		mov	ecx, [ebp+0]
		cmp	ecx, edi
		jz	short loc_6FFC42B5
		mov	edi, [ecx]
		test	edi, edi
		jz	short loc_6FFC430B

loc_6FFC42B5:				; CODE XREF: sub_6FFC4220+8Dj
					; sub_6FFC4220+10Bj
		mov	eax, [esi+30h]
		cmp	ecx, eax
		jz	short loc_6FFC42E4
		cmp	ebx, [ecx+4]
		jz	short loc_6FFC42D6

loc_6FFC42C1:				; CODE XREF: sub_6FFC4220+ACj
		mov	edx, ecx
		mov	ecx, [ecx]
		cmp	ecx, eax
		jz	short loc_6FFC42E0
		cmp	ebx, [ecx+4]
		jnz	short loc_6FFC42C1
		mov	ebp, [edx]
		mov	ecx, eax

loc_6FFC42D2:				; CODE XREF: sub_6FFC4220+76j
					; sub_6FFC4220+C2j
		cmp	ebp, ecx
		jz	short loc_6FFC42E4

loc_6FFC42D6:				; CODE XREF: sub_6FFC4220+9Fj
		add	esp, 4Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6FFC42E0:				; CODE XREF: sub_6FFC4220+A7j
		mov	ebp, ecx
		jmp	short loc_6FFC42D2
; ---------------------------------------------------------------------------

loc_6FFC42E4:				; CODE XREF: sub_6FFC4220+9Aj
					; sub_6FFC4220+B4j
		lea	eax, [esp+5Ch+var_20]
		mov	[esp+5Ch+var_58], eax
		lea	eax, [esi+30h]
		mov	[esp+5Ch+var_5C], eax
		call	sub_6FFE4A50
		mov	eax, [esi+34h]
		mov	[esp+5Ch+var_5C], eax
		call	ds:_ZN6QTimer5startEv
		add	esp, 4Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_6FFC430B:				; CODE XREF: sub_6FFC4220+93j
		mov	[esp+5Ch+var_54], 376h
		mov	[esp+5Ch+var_58], offset aRIncludeQtco_0 ; "R:/include/QtCore/qhash.h"
		mov	[esp+5Ch+var_5C], offset aNodeENodeNext	; "*node == e || (*node)->next"
		call	ds:_Z9qt_assertPKcS0_i
		mov	ecx, [ebp+0]
		jmp	short loc_6FFC42B5
sub_6FFC4220	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_6FFC4330	proc near		; CODE XREF: _ZN16DBusMenuExporter19doEmitLayoutUpdatedEv+16Bp

var_94		= dword	ptr -94h
var_90		= dword	ptr -90h
var_8C		= dword	ptr -8Ch
var_88		= dword	ptr -88h
var_84		= dword	ptr -84h
var_80		= dword	ptr -80h
var_7C		= dword	ptr -7Ch
var_75		= byte ptr -75h
var_74		= dword	ptr -74h
var_70		= dword	ptr -70h
var_6C		= dword	ptr -6Ch
var_68		= dword	ptr -68h
var_64		= dword	ptr -64h
var_60		= dword	ptr -60h
var_5C		= dword	ptr -5Ch
var_58		= dword	ptr -58h
var_54		= dword	ptr -54h
var_50		= dword	ptr -50h
var_4C		= byte ptr -4Ch
var_48		= dword	ptr -48h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_C		= dword	ptr -0Ch
var_8		= byte ptr -8
var_4		= dword	ptr -4
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		lea	eax, [ebp+var_8]
		push	ebx
		sub	esp, 0A4h
		mov	[ebp+var_2C], eax
		lea	eax, [ebp+var_4C]
		mov	[esp], eax
		mov	[ebp+var_24], esp
		mov	[ebp+var_34], offset sub_6FFEC1F0
		mov	[ebp+var_30], offset dword_6FFEC9D8
		mov	[ebp+var_28], offset sub_6FFC4685
		call	_Unwind_SjLj_Register
		mov	eax, [ebp+arg_4]
		lea	edx, [ebp+var_C]
		mov	[esp], edx
		mov	[ebp+var_48], 0FFFFFFFFh
		mov	[esp+4], eax
		call	ds:_ZNK7QWidget7actionsEv
		mov	eax, [ebp+var_C]
		mov	edx, [eax+8]
		sub	esp, 4
		cmp	[eax+0Ch], edx
		jz	loc_6FFC466D
		mov	ebx, [eax]
		mov	ecx, eax
		cmp	ebx, 1
		jz	short loc_6FFC4402
		lea	edx, [eax+edx*4+14h]
		mov	eax, [eax+4]
		mov	[ebp+var_94], edx
		mov	[ebp+var_48], 1
		mov	[esp+4], eax
		lea	eax, [ebp+var_C]
		mov	[esp], eax
		call	ds:_ZN9QListData6detachEi
		mov	[ebp+var_90], eax
		mov	eax, [ebp+var_C]
		mov	edx, [eax+8]
		mov	ecx, [eax+0Ch]
		lea	edx, [eax+edx*4+14h]
		cmp	[ebp+var_94], edx
		jz	short loc_6FFC43E6
		lea	eax, [eax+ecx*4+14h]
		sub	eax, edx
		cmp	eax, 3
		jg	loc_6FFC464F

loc_6FFC43E6:				; CODE XREF: sub_6FFC4330+A5j
					; sub_6FFC4330+338j
		mov	edx, [ebp+var_90]
		lock dec dword ptr [edx]
		setnz	al
		test	al, al
		jz	loc_6FFC4619

loc_6FFC43FA:				; CODE XREF: sub_6FFC4330+2FFj
		mov	eax, [ebp+var_C]
		mov	edx, [eax+8]
		mov	ecx, eax

loc_6FFC4402:				; CODE XREF: sub_6FFC4330+66j
		lea	edx, [eax+edx*4+14h]
		mov	[ebp+var_68], edx
		mov	[ebp+var_88], edx
		mov	edx, [ecx]
		cmp	edx, 1
		jz	short loc_6FFC446E
		mov	eax, [ecx+4]
		mov	[ebp+var_48], 1
		mov	[esp+4], eax
		lea	eax, [ebp+var_C]
		mov	[esp], eax
		call	ds:_ZN9QListData6detachEi
		mov	[ebp+var_8C], eax
		mov	eax, [ebp+var_C]
		mov	edx, [eax+8]
		mov	ecx, [eax+0Ch]
		lea	edx, [eax+edx*4+14h]
		cmp	[ebp+var_68], edx
		jz	short loc_6FFC4457
		lea	eax, [eax+ecx*4+14h]
		sub	eax, edx
		cmp	eax, 3
		jg	loc_6FFC4634

loc_6FFC4457:				; CODE XREF: sub_6FFC4330+116j
					; sub_6FFC4330+31Aj
		mov	edx, [ebp+var_8C]
		lock dec dword ptr [edx]
		setnz	al
		test	al, al
		jz	loc_6FFC45FE

loc_6FFC446B:				; CODE XREF: sub_6FFC4330+2E4j
		mov	eax, [ebp+var_C]

loc_6FFC446E:				; CODE XREF: sub_6FFC4330+E4j
		mov	edx, [eax+0Ch]
		lea	eax, [eax+edx*4+10h]
		cmp	[ebp+var_68], eax
		jz	loc_6FFC45F0
		mov	edx, ds:_ZNK7QAction11isSeparatorEv
		mov	[ebp+var_6C], eax
		mov	[ebp+var_58], edx
		jmp	short loc_6FFC44B9
; ---------------------------------------------------------------------------
		align 10h

loc_6FFC4490:				; CODE XREF: sub_6FFC4330+1A3j
		mov	edx, [ebp+var_80]
		mov	dword ptr [esp+4], 0
		mov	eax, [edx]
		mov	[esp], eax
		call	ds:_ZN7QAction10setVisibleEb
		sub	[ebp+var_6C], 4
		mov	eax, [ebp+var_6C]
		cmp	[ebp+var_88], eax
		jz	loc_6FFC45F0

loc_6FFC44B9:				; CODE XREF: sub_6FFC4330+15Aj
		mov	[ebp+var_84], eax
		mov	[ebp+var_80], eax
		mov	eax, [eax]
		mov	[ebp+var_48], 1
		mov	[esp], eax
		call	[ebp+var_58]
		test	al, al
		jnz	short loc_6FFC4490

loc_6FFC44D5:				; CODE XREF: sub_6FFC4330+2C9j
		mov	eax, [ebp+var_84]
		add	eax, 4
		cmp	[ebp+var_68], eax
		mov	[ebp+var_74], eax
		jz	loc_6FFC459C
		mov	edx, [ebp+var_68]
		mov	eax, ds:_ZNK7QAction11isSeparatorEv
		mov	[ebp+var_64], edx
		mov	[ebp+var_54], eax
		jmp	short loc_6FFC4529
; ---------------------------------------------------------------------------
		align 10h

loc_6FFC4500:				; CODE XREF: sub_6FFC4330+213j
		mov	edx, [ebp+var_7C]
		mov	dword ptr [esp+4], 0
		mov	eax, [edx]
		mov	[ebp+var_48], 1
		mov	[esp], eax
		call	ds:_ZN7QAction10setVisibleEb
		add	[ebp+var_64], 4
		mov	eax, [ebp+var_64]
		cmp	[ebp+var_74], eax
		jz	short loc_6FFC459C

loc_6FFC4529:				; CODE XREF: sub_6FFC4330+1C8j
		mov	edx, [ebp+var_64]
		mov	eax, [edx]
		mov	[ebp+var_5C], edx
		mov	[ebp+var_7C], edx
		mov	[ebp+var_48], 1
		mov	[esp], eax
		call	[ebp+var_54]
		test	al, al
		jnz	short loc_6FFC4500
		mov	eax, [ebp+var_5C]
		cmp	[ebp+var_74], eax
		jz	short loc_6FFC459C
		mov	edx, eax
		mov	[ebp+var_60], eax
		mov	eax, ds:_ZNK7QAction11isSeparatorEv
		mov	[ebp+var_75], 0
		mov	[ebp+var_50], eax
		jmp	short loc_6FFC4570
; ---------------------------------------------------------------------------

loc_6FFC4560:				; CODE XREF: sub_6FFC4330+254j
		mov	[ebp+var_75], 0

loc_6FFC4564:				; CODE XREF: sub_6FFC4330+2BBj
		add	[ebp+var_60], 4
		mov	edx, [ebp+var_60]
		cmp	[ebp+var_74], edx
		jz	short loc_6FFC459C

loc_6FFC4570:				; CODE XREF: sub_6FFC4330+22Ej
					; sub_6FFC4330+26Aj
		mov	edx, [edx]
		mov	[ebp+var_48], 1
		mov	[ebp+var_70], edx
		mov	[esp], edx
		call	[ebp+var_50]
		test	al, al
		jz	short loc_6FFC4560
		cmp	[ebp+var_75], 0
		jnz	short loc_6FFC45D0
		add	[ebp+var_60], 4
		mov	edx, [ebp+var_60]
		cmp	[ebp+var_74], edx
		mov	[ebp+var_75], 1
		jnz	short loc_6FFC4570

loc_6FFC459C:				; CODE XREF: sub_6FFC4330+1B4j
					; sub_6FFC4330+1F7j ...
		mov	eax, [ebp+var_C]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jnz	short loc_6FFC45BC
		mov	eax, [ebp+var_C]
		mov	[ebp+var_48], 0FFFFFFFFh
		mov	[esp], eax
		call	ds:_Z5qFreePv

loc_6FFC45BC:				; CODE XREF: sub_6FFC4330+277j
					; sub_6FFC4330+350j
		lea	eax, [ebp+var_4C]
		mov	[esp], eax
		call	_Unwind_SjLj_Unregister
		mov	ebx, [ebp+var_4]
		leave
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6FFC45D0:				; CODE XREF: sub_6FFC4330+25Aj
		mov	eax, [ebp+var_70]
		mov	dword ptr [esp+4], 0
		mov	[ebp+var_48], 1
		mov	[esp], eax
		call	ds:_ZN7QAction10setVisibleEb
		jmp	loc_6FFC4564
; ---------------------------------------------------------------------------

loc_6FFC45F0:				; CODE XREF: sub_6FFC4330+148j
					; sub_6FFC4330+183j
		mov	edx, [ebp+var_68]
		mov	[ebp+var_84], edx
		jmp	loc_6FFC44D5
; ---------------------------------------------------------------------------

loc_6FFC45FE:				; CODE XREF: sub_6FFC4330+135j
		mov	eax, [ebp+var_8C]
		mov	[ebp+var_48], 1
		mov	[esp], eax
		call	ds:_Z5qFreePv
		jmp	loc_6FFC446B
; ---------------------------------------------------------------------------

loc_6FFC4619:				; CODE XREF: sub_6FFC4330+C4j
		mov	eax, [ebp+var_90]
		mov	[ebp+var_48], 1
		mov	[esp], eax
		call	ds:_Z5qFreePv
		jmp	loc_6FFC43FA
; ---------------------------------------------------------------------------

loc_6FFC4634:				; CODE XREF: sub_6FFC4330+121j
		and	eax, 0FFFFFFFCh
		mov	[esp+8], eax	; size_t
		mov	eax, [ebp+var_68]
		mov	[esp], edx	; void *
		mov	[esp+4], eax	; void *
		call	memcpy
		jmp	loc_6FFC4457
; ---------------------------------------------------------------------------

loc_6FFC464F:				; CODE XREF: sub_6FFC4330+B0j
		and	eax, 0FFFFFFFCh
		mov	[esp+8], eax	; size_t
		mov	eax, [ebp+var_94]
		mov	[esp], edx	; void *
		mov	[esp+4], eax	; void *
		call	memcpy
		jmp	loc_6FFC43E6
; ---------------------------------------------------------------------------

loc_6FFC466D:				; CODE XREF: sub_6FFC4330+59j
		lea	eax, [ebp+var_C]
		mov	[esp], eax
		mov	[ebp+var_48], 0FFFFFFFFh
		call	sub_6FFE9DA0
		nop
		jmp	loc_6FFC45BC
sub_6FFC4330	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn

sub_6FFC4685	proc near		; DATA XREF: sub_6FFC4330+27o
		add	ebp, 8
		mov	eax, [ebp-44h]
		mov	dword ptr [ebp-48h], 0
		mov	[ebp-98h], eax
		lea	eax, [ebp-0Ch]
		mov	[esp+0], eax
		call	sub_6FFE9DA0
		mov	edx, [ebp-98h]
		mov	dword ptr [ebp-48h], 0FFFFFFFFh
		mov	[esp+0], edx
		call	_Unwind_SjLj_Resume
sub_6FFC4685	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry   8. _ZN16DBusMenuExporter19doEmitLayoutUpdatedEv

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public _ZN16DBusMenuExporter19doEmitLayoutUpdatedEv
_ZN16DBusMenuExporter19doEmitLayoutUpdatedEv proc near
					; CODE XREF: _ZN16DBusMenuExporter18qt_static_metacallEP7QObjectN11QMetaObject4CallEiPPv+A7j

var_94		= dword	ptr -94h
var_90		= dword	ptr -90h
var_84		= dword	ptr -84h
var_80		= dword	ptr -80h
var_7C		= dword	ptr -7Ch
var_78		= dword	ptr -78h
var_74		= dword	ptr -74h
var_70		= dword	ptr -70h
var_6C		= byte ptr -6Ch
var_68		= dword	ptr -68h
var_54		= dword	ptr -54h
var_50		= dword	ptr -50h
var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= byte ptr -18h
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		lea	eax, [ebp+var_18]
		sub	esp, 0ACh
		mov	[ebp+var_4C], eax
		lea	eax, [ebp+var_6C]
		mov	[esp], eax
		mov	[ebp+var_54], offset sub_6FFEC1F0
		mov	[ebp+var_50], offset word_6FFEC9DE
		mov	[ebp+var_48], offset sub_6FFC4B8E
		mov	[ebp+var_44], esp
		call	_Unwind_SjLj_Register
		mov	edx, [ebp+arg_0]
		mov	eax, [edx+8]
		mov	eax, [eax+30h]
		mov	[ebp+var_28], eax
		lock inc dword ptr [eax+8]
		setnz	dl
		mov	eax, [ebp+var_28]
		test	byte ptr [eax+1Ch], 1
		jnz	short loc_6FFC476A
		mov	edx, [eax+8]
		cmp	edx, 1
		jz	short loc_6FFC476A
		mov	dword ptr [esp+10h], 4
		mov	dword ptr [esp+0Ch], 8
		mov	dword ptr [esp+8], offset nullsub_1
		mov	dword ptr [esp+4], offset nullsub_2
		mov	[esp], eax
		mov	[ebp+var_68], 0FFFFFFFFh
		call	ds:_ZN9QHashData14detach_helper2EPFvPNS_4NodeEPvEPFvS1_Eii
		mov	[ebp+var_94], eax
		mov	eax, [ebp+var_28]
		lock dec dword ptr [eax+8]
		setnz	dl
		test	dl, dl
		jz	loc_6FFC4B5C

loc_6FFC4761:				; CODE XREF: _ZN16DBusMenuExporter19doEmitLayoutUpdatedEv+4B0j
		mov	ecx, [ebp+var_94]
		mov	[ebp+var_28], ecx

loc_6FFC476A:				; CODE XREF: _ZN16DBusMenuExporter19doEmitLayoutUpdatedEv+4Fj
					; _ZN16DBusMenuExporter19doEmitLayoutUpdatedEv+57j
		mov	ebx, [ebp+var_28]
		mov	[ebp+var_24], 0
		mov	ecx, [ebx+18h]
		mov	edx, [ebx+4]
		test	ecx, ecx
		jz	short loc_6FFC47A0
		mov	eax, [edx]
		sub	ecx, 1
		cmp	ebx, eax
		jz	short loc_6FFC479C
		jmp	short loc_6FFC47A2
; ---------------------------------------------------------------------------
		align 10h

loc_6FFC4790:				; CODE XREF: _ZN16DBusMenuExporter19doEmitLayoutUpdatedEv+DEj
		add	edx, 4
		sub	ecx, 1
		mov	eax, [edx]
		cmp	ebx, eax
		jnz	short loc_6FFC47A2

loc_6FFC479C:				; CODE XREF: _ZN16DBusMenuExporter19doEmitLayoutUpdatedEv+C5j
		test	ecx, ecx
		jnz	short loc_6FFC4790

loc_6FFC47A0:				; CODE XREF: _ZN16DBusMenuExporter19doEmitLayoutUpdatedEv+BCj
		mov	eax, ebx

loc_6FFC47A2:				; CODE XREF: _ZN16DBusMenuExporter19doEmitLayoutUpdatedEv+C7j
					; _ZN16DBusMenuExporter19doEmitLayoutUpdatedEv+DAj
		mov	edx, [ebp+var_28]
		mov	[ebp+var_20], eax
		cmp	eax, edx
		mov	[ebp+var_1C], edx
		jnz	loc_6FFC4858
		jmp	loc_6FFC48B0
; ---------------------------------------------------------------------------

loc_6FFC47B8:				; CODE XREF: _ZN16DBusMenuExporter19doEmitLayoutUpdatedEv+1D6j
					; _ZN16DBusMenuExporter19doEmitLayoutUpdatedEv+1EAj
		sub	ecx, 1
		cmp	ecx, 0FFFFFFFFh
		jnz	loc_6FFC488A
		cmp	edi, edx
		jz	loc_6FFC49C0
		cmp	esi, [edx-8]
		lea	ecx, [edx-8]
		jl	loc_6FFC49C0
		mov	edx, [ecx+4]
		test	edx, edx
		jz	loc_6FFC49C0
		mov	[esp], edx
		mov	[ebp+var_68], 3
		call	ds:_ZNK7QAction4menuEv
		mov	[ebp+var_7C], eax

loc_6FFC47F6:				; CODE XREF: _ZN16DBusMenuExporter19doEmitLayoutUpdatedEv+2F6j
		mov	ebx, [ebp+var_7C]
		test	ebx, ebx
		jz	short loc_6FFC4830
		mov	eax, [ebp+var_7C]
		mov	[ebp+var_68], 3
		mov	[esp], eax
		call	ds:_ZNK5QMenu21separatorsCollapsibleEv
		test	al, al
		jz	short loc_6FFC4830
		mov	edx, [ebp+var_7C]
		mov	ecx, [ebp+arg_0]
		mov	[esp+4], edx
		mov	eax, [ecx+8]
		mov	[ebp+var_68], 3
		mov	[esp], eax
		call	sub_6FFC4330

loc_6FFC4830:				; CODE XREF: _ZN16DBusMenuExporter19doEmitLayoutUpdatedEv+13Bj
					; _ZN16DBusMenuExporter19doEmitLayoutUpdatedEv+152j
		mov	eax, [ebp+var_20]
		mov	edx, [ebp+var_24]

loc_6FFC4836:				; CODE XREF: _ZN16DBusMenuExporter19doEmitLayoutUpdatedEv+302j
		mov	[ebp+var_24], edx
		mov	[esp], eax
		mov	[ebp+var_68], 3
		call	ds:_ZN9QHashData8nextNodeEPNS_4NodeE
		mov	ecx, [ebp+var_24]
		mov	[ebp+var_20], eax
		test	ecx, ecx
		jnz	short loc_6FFC48B0
		cmp	eax, [ebp+var_1C]
		jz	short loc_6FFC48B0

loc_6FFC4858:				; CODE XREF: _ZN16DBusMenuExporter19doEmitLayoutUpdatedEv+EDj
		mov	esi, [eax+4]
		mov	ecx, [ebp+arg_0]
		test	esi, esi
		mov	edx, [ecx+8]
		jz	loc_6FFC49B0
		mov	edi, [edx+14h]
		mov	edx, [edi+3Ch]
		test	edx, edx
		jz	loc_6FFC49C0
		mov	ecx, [edi+38h]
		mov	[ebp+var_78], edi
		test	ecx, ecx
		js	loc_6FFC49C0
		mov	ebx, edi
		mov	[ebp+var_80], edi

loc_6FFC488A:				; CODE XREF: _ZN16DBusMenuExporter19doEmitLayoutUpdatedEv+FEj
		mov	edx, [ebx+ecx*4+4]
		cmp	[ebp+var_78], edx
		jz	short loc_6FFC48A7

loc_6FFC4893:				; CODE XREF: _ZN16DBusMenuExporter19doEmitLayoutUpdatedEv+1E5j
		cmp	esi, [edx-8]
		jle	loc_6FFC47B8
		mov	ebx, edx
		mov	edx, [ebx+ecx*4+4]
		cmp	[ebp+var_78], edx
		jnz	short loc_6FFC4893

loc_6FFC48A7:				; CODE XREF: _ZN16DBusMenuExporter19doEmitLayoutUpdatedEv+1D1j
		mov	edx, [ebp+var_80]
		jmp	loc_6FFC47B8
; ---------------------------------------------------------------------------
		align 10h

loc_6FFC48B0:				; CODE XREF: _ZN16DBusMenuExporter19doEmitLayoutUpdatedEv+F3j
					; _ZN16DBusMenuExporter19doEmitLayoutUpdatedEv+191j ...
		mov	eax, [ebp+var_28]
		lock dec dword ptr [eax+8]
		setnz	dl
		test	dl, dl
		jz	loc_6FFC4A90

loc_6FFC48C2:				; CODE XREF: _ZN16DBusMenuExporter19doEmitLayoutUpdatedEv+3EBj
		mov	edx, [ebp+arg_0]
		mov	eax, [edx+8]
		cmp	byte ptr [eax+24h], 0
		jz	loc_6FFC49C7
		mov	eax, [eax+30h]
		mov	[ebp+var_38], eax
		lock inc dword ptr [eax+8]
		setnz	dl
		mov	eax, [ebp+var_38]
		test	byte ptr [eax+1Ch], 1
		jnz	short loc_6FFC4902
		mov	eax, [eax+8]
		cmp	eax, 1
		jz	short loc_6FFC4902
		lea	eax, [ebp+var_38]
		mov	[esp], eax
		mov	[ebp+var_68], 0FFFFFFFFh
		call	sub_6FFE5110

loc_6FFC4902:				; CODE XREF: _ZN16DBusMenuExporter19doEmitLayoutUpdatedEv+226j
					; _ZN16DBusMenuExporter19doEmitLayoutUpdatedEv+22Ej
		mov	ebx, [ebp+var_38]
		mov	[ebp+var_34], 0
		mov	ecx, [ebx+18h]
		mov	edx, [ebx+4]
		test	ecx, ecx
		jz	short loc_6FFC4931
		mov	eax, [edx]
		sub	ecx, 1
		cmp	ebx, eax
		jz	short loc_6FFC492D
		jmp	short loc_6FFC4933
; ---------------------------------------------------------------------------

loc_6FFC4921:				; CODE XREF: _ZN16DBusMenuExporter19doEmitLayoutUpdatedEv+26Fj
		add	edx, 4
		sub	ecx, 1
		mov	eax, [edx]
		cmp	ebx, eax
		jnz	short loc_6FFC4933

loc_6FFC492D:				; CODE XREF: _ZN16DBusMenuExporter19doEmitLayoutUpdatedEv+25Dj
		test	ecx, ecx
		jnz	short loc_6FFC4921

loc_6FFC4931:				; CODE XREF: _ZN16DBusMenuExporter19doEmitLayoutUpdatedEv+254j
		mov	eax, ebx

loc_6FFC4933:				; CODE XREF: _ZN16DBusMenuExporter19doEmitLayoutUpdatedEv+25Fj
					; _ZN16DBusMenuExporter19doEmitLayoutUpdatedEv+26Bj
		mov	edx, [ebp+var_38]
		mov	[ebp+var_30], eax
		cmp	eax, edx
		mov	[ebp+var_2C], edx
		jnz	short loc_6FFC4947
		jmp	short loc_6FFC498A
; ---------------------------------------------------------------------------

loc_6FFC4942:				; CODE XREF: _ZN16DBusMenuExporter19doEmitLayoutUpdatedEv+2C8j
		cmp	eax, [ebp+var_2C]
		jz	short loc_6FFC498A

loc_6FFC4947:				; CODE XREF: _ZN16DBusMenuExporter19doEmitLayoutUpdatedEv+27Ej
		mov	ecx, [ebp+arg_0]
		mov	eax, [eax+4]
		mov	edx, [ecx+8]
		mov	[esp+8], eax
		mov	eax, [edx+20h]
		mov	[esp+4], eax
		mov	eax, [edx+8]
		mov	[ebp+var_68], 2
		mov	[esp], eax
		call	sub_6FFC80C0
		mov	eax, [ebp+var_30]
		mov	[ebp+var_68], 2
		mov	[esp], eax
		call	ds:_ZN9QHashData8nextNodeEPNS_4NodeE
		mov	edx, [ebp+var_34]
		mov	[ebp+var_30], eax
		test	edx, edx
		jz	short loc_6FFC4942

loc_6FFC498A:				; CODE XREF: _ZN16DBusMenuExporter19doEmitLayoutUpdatedEv+280j
					; _ZN16DBusMenuExporter19doEmitLayoutUpdatedEv+285j
		mov	eax, [ebp+var_38]
		lock dec dword ptr [eax+8]
		setnz	dl
		test	dl, dl
		jz	loc_6FFC4B30
		mov	eax, [ebp+arg_0]
		mov	eax, [eax+8]
		mov	[ebp+var_84], eax
		jmp	short loc_6FFC49F8
; ---------------------------------------------------------------------------
		align 10h

loc_6FFC49B0:				; CODE XREF: _ZN16DBusMenuExporter19doEmitLayoutUpdatedEv+1A3j
		mov	edx, [edx+0Ch]
		mov	[ebp+var_7C], edx
		jmp	loc_6FFC47F6
; ---------------------------------------------------------------------------
		align 10h

loc_6FFC49C0:				; CODE XREF: _ZN16DBusMenuExporter19doEmitLayoutUpdatedEv+106j
					; _ZN16DBusMenuExporter19doEmitLayoutUpdatedEv+112j ...
		xor	edx, edx
		jmp	loc_6FFC4836
; ---------------------------------------------------------------------------

loc_6FFC49C7:				; CODE XREF: _ZN16DBusMenuExporter19doEmitLayoutUpdatedEv+20Cj
		mov	dword ptr [esp+8], 0
		mov	edx, [eax+20h]
		mov	[esp+4], edx
		mov	eax, [eax+8]
		mov	[ebp+var_68], 0FFFFFFFFh
		mov	[esp], eax
		call	sub_6FFC80C0
		mov	ecx, [ebp+arg_0]
		mov	ecx, [ecx+8]
		mov	[ebp+var_84], ecx
		mov	byte ptr [ecx+24h], 1

loc_6FFC49F8:				; CODE XREF: _ZN16DBusMenuExporter19doEmitLayoutUpdatedEv+2E8j
					; _ZN16DBusMenuExporter19doEmitLayoutUpdatedEv+497j
		mov	eax, ds:_ZN9QHashData11shared_nullE
		mov	[ebp+var_70], eax
		add	eax, 8
		mov	edx, [ebp+var_70]
		mov	[ebp+var_74], eax
		lock inc dword ptr [edx+8]
		setnz	al
		mov	ecx, [ebp+var_84]
		cmp	edx, [ecx+30h]
		jz	short loc_6FFC4A4B
		lock inc dword ptr [edx+8]
		setnz	al
		mov	eax, [ecx+30h]
		lock dec dword ptr [eax+8]
		setnz	dl
		test	dl, dl
		jz	loc_6FFC4B0E

loc_6FFC4A34:				; CODE XREF: _ZN16DBusMenuExporter19doEmitLayoutUpdatedEv+469j
		mov	eax, [ebp+var_84]
		mov	edx, [ebp+var_70]
		mov	[eax+30h], edx
		mov	eax, ds:_ZN9QHashData11shared_nullE
		test	byte ptr [eax+1Ch], 1
		jz	short loc_6FFC4AB0

loc_6FFC4A4B:				; CODE XREF: _ZN16DBusMenuExporter19doEmitLayoutUpdatedEv+359j
					; _ZN16DBusMenuExporter19doEmitLayoutUpdatedEv+449j
		mov	ecx, [ebp+var_70]
		lock dec dword ptr [ecx+8]
		setnz	al
		test	al, al
		jnz	short loc_6FFC4A74
		mov	ecx, [ebp+var_70]
		mov	dword ptr [esp+4], offset nullsub_1
		mov	[ebp+var_68], 0FFFFFFFFh
		mov	[esp], ecx
		call	ds:_ZN9QHashData11free_helperEPFvPNS_4NodeEE

loc_6FFC4A74:				; CODE XREF: _ZN16DBusMenuExporter19doEmitLayoutUpdatedEv+397j
		lea	eax, [ebp+var_6C]
		mov	[esp], eax
		call	_Unwind_SjLj_Unregister
		add	esp, 0ACh
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6FFC4A90:				; CODE XREF: _ZN16DBusMenuExporter19doEmitLayoutUpdatedEv+1FCj
		mov	eax, [ebp+var_28]
		mov	dword ptr [esp+4], offset nullsub_1
		mov	[ebp+var_68], 0FFFFFFFFh
		mov	[esp], eax
		call	ds:_ZN9QHashData11free_helperEPFvPNS_4NodeEE
		jmp	loc_6FFC48C2
; ---------------------------------------------------------------------------

loc_6FFC4AB0:				; CODE XREF: _ZN16DBusMenuExporter19doEmitLayoutUpdatedEv+389j
		mov	dword ptr [esp+10h], 4
		mov	dword ptr [esp+0Ch], 8
		mov	dword ptr [esp+8], offset nullsub_1
		mov	dword ptr [esp+4], offset nullsub_2
		mov	[esp], edx
		mov	[ebp+var_68], 1
		call	ds:_ZN9QHashData14detach_helper2EPFvPNS_4NodeEPvEPFvS1_Eii
		mov	ecx, [ebp+var_84]
		mov	[ebp+var_90], eax
		mov	eax, [ecx+30h]
		lock dec dword ptr [eax+8]
		setnz	dl
		test	dl, dl
		jz	short loc_6FFC4B75

loc_6FFC4AFA:				; CODE XREF: _ZN16DBusMenuExporter19doEmitLayoutUpdatedEv+4C9j
		mov	edx, [ebp+var_90]
		mov	eax, [ebp+var_84]
		mov	[eax+30h], edx
		jmp	loc_6FFC4A4B
; ---------------------------------------------------------------------------

loc_6FFC4B0E:				; CODE XREF: _ZN16DBusMenuExporter19doEmitLayoutUpdatedEv+36Ej
		mov	dword ptr [esp+4], offset nullsub_1
		mov	eax, [ecx+30h]
		mov	[ebp+var_68], 1
		mov	[esp], eax
		call	ds:_ZN9QHashData11free_helperEPFvPNS_4NodeEE
		jmp	loc_6FFC4A34
; ---------------------------------------------------------------------------
		align 10h

loc_6FFC4B30:				; CODE XREF: _ZN16DBusMenuExporter19doEmitLayoutUpdatedEv+2D6j
		mov	eax, [ebp+var_38]
		mov	dword ptr [esp+4], offset nullsub_1
		mov	[ebp+var_68], 0FFFFFFFFh
		mov	[esp], eax
		call	ds:_ZN9QHashData11free_helperEPFvPNS_4NodeEE
		mov	edx, [ebp+arg_0]
		mov	edx, [edx+8]
		mov	[ebp+var_84], edx
		jmp	loc_6FFC49F8
; ---------------------------------------------------------------------------

loc_6FFC4B5C:				; CODE XREF: _ZN16DBusMenuExporter19doEmitLayoutUpdatedEv+9Bj
		mov	eax, [ebp+var_28]
		mov	dword ptr [esp+4], offset nullsub_1
		mov	[esp], eax
		call	ds:_ZN9QHashData11free_helperEPFvPNS_4NodeEE
		jmp	loc_6FFC4761
; ---------------------------------------------------------------------------

loc_6FFC4B75:				; CODE XREF: _ZN16DBusMenuExporter19doEmitLayoutUpdatedEv+438j
		mov	dword ptr [esp+4], offset nullsub_1
		mov	eax, [ecx+30h]
		mov	[esp], eax
		call	ds:_ZN9QHashData11free_helperEPFvPNS_4NodeEE
		jmp	loc_6FFC4AFA
_ZN16DBusMenuExporter19doEmitLayoutUpdatedEv endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn

sub_6FFC4B8E	proc near		; DATA XREF: _ZN16DBusMenuExporter19doEmitLayoutUpdatedEv+26o

arg_0		= dword	ptr  4

		add	ebp, 18h
		mov	eax, [ebp-68h]
		mov	edx, [ebp-64h]
		cmp	eax, 1
		mov	[ebp-8Ch], edx
		jz	short loc_6FFC4C11
		cmp	eax, 2
		jz	short loc_6FFC4BEA
		mov	[ebp-88h], edx
		mov	ecx, [ebp-74h]
		lock dec dword ptr [ecx]
		setnz	al
		test	al, al
		jnz	short loc_6FFC4BD5
		mov	eax, [ebp-70h]
		mov	[esp+arg_0], offset nullsub_1
		mov	dword ptr [ebp-68h], 0
		mov	[esp+0], eax
		call	ds:_ZN9QHashData11free_helperEPFvPNS_4NodeEE

loc_6FFC4BD5:				; CODE XREF: sub_6FFC4B8E+2Aj
		mov	edx, [ebp-88h]
		mov	dword ptr [ebp-68h], 0FFFFFFFFh
		mov	[esp+0], edx
		call	_Unwind_SjLj_Resume
; ---------------------------------------------------------------------------

loc_6FFC4BEA:				; CODE XREF: sub_6FFC4B8E+17j
		lea	eax, [ebp-28h]

loc_6FFC4BED:				; CODE XREF: sub_6FFC4B8E+86j
		mov	[esp+0], eax
		mov	dword ptr [ebp-68h], 0
		call	sub_6FFE4A20
		mov	eax, [ebp-8Ch]
		mov	dword ptr [ebp-68h], 0FFFFFFFFh
		mov	[esp+0], eax
		call	_Unwind_SjLj_Resume
; ---------------------------------------------------------------------------

loc_6FFC4C11:				; CODE XREF: sub_6FFC4B8E+12j
		lea	eax, [ebp-38h]
		jmp	short loc_6FFC4BED
sub_6FFC4B8E	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_6FFC4C20	proc near		; CODE XREF: .text:6FFC15FFp
					; sub_6FFC1880+57p ...

var_FC		= dword	ptr -0FCh
var_F8		= dword	ptr -0F8h
var_F4		= dword	ptr -0F4h
var_F0		= dword	ptr -0F0h
var_EC		= dword	ptr -0ECh
var_E8		= dword	ptr -0E8h
var_E4		= dword	ptr -0E4h
var_E0		= dword	ptr -0E0h
var_DC		= dword	ptr -0DCh
var_D8		= dword	ptr -0D8h
var_D4		= dword	ptr -0D4h
var_D0		= dword	ptr -0D0h
var_CC		= dword	ptr -0CCh
var_C8		= dword	ptr -0C8h
var_C4		= dword	ptr -0C4h
var_C0		= dword	ptr -0C0h
var_BC		= dword	ptr -0BCh
var_B8		= dword	ptr -0B8h
var_B4		= dword	ptr -0B4h
var_B0		= dword	ptr -0B0h
var_AC		= dword	ptr -0ACh
var_A8		= dword	ptr -0A8h
var_A4		= dword	ptr -0A4h
var_A0		= dword	ptr -0A0h
var_9C		= byte ptr -9Ch
var_98		= dword	ptr -98h
var_84		= dword	ptr -84h
var_80		= dword	ptr -80h
var_7C		= dword	ptr -7Ch
var_78		= dword	ptr -78h
var_74		= dword	ptr -74h
var_5C		= dword	ptr -5Ch
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= byte ptr -18h
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		lea	eax, [ebp+var_18]
		sub	esp, 11Ch
		mov	[ebp+var_7C], eax
		lea	eax, [ebp+var_9C]
		mov	[ebp+var_84], offset sub_6FFEC1F0
		mov	[ebp+var_80], offset dword_6FFEC9E8
		mov	[ebp+var_78], offset sub_6FFC560C
		mov	[ebp+var_74], esp
		mov	[esp], eax
		call	_Unwind_SjLj_Register
		mov	edx, [ebp+arg_0]
		mov	ecx, [ebp+arg_0]
		add	edx, 18h
		mov	[ebp+var_D4], edx
		mov	esi, [ecx+18h]
		mov	edi, [esi+3Ch]
		test	edi, edi
		jz	short loc_6FFC4CD0
		mov	edx, [esi+38h]
		test	edx, edx
		js	loc_6FFC4DF4
		mov	eax, [ebp+arg_4]
		mov	edi, esi
		mov	ecx, esi
		mov	[ebp+var_F4], esi
		mov	ebx, eax
		mov	esi, eax
		mov	[ebp+var_B8], eax
		mov	[ebp+var_E0], eax
		mov	[ebp+var_B4], ebx

loc_6FFC4CA2:				; CODE XREF: sub_6FFC4C20+ADj
					; sub_6FFC4C20+1EAj
		mov	eax, [ecx+edx*4+4]
		cmp	eax, edi
		jz	short loc_6FFC4CB3
		cmp	[eax-8], ebx
		jb	loc_6FFC4E02

loc_6FFC4CB3:				; CODE XREF: sub_6FFC4C20+88j
		sub	edx, 1
		cmp	edx, 0FFFFFFFFh
		jz	loc_6FFC4E10
		mov	ebx, esi
		mov	esi, [ebp+var_E0]
		mov	[ebp+var_B4], ebx
		jmp	short loc_6FFC4CA2
; ---------------------------------------------------------------------------
		align 10h

loc_6FFC4CD0:				; CODE XREF: sub_6FFC4C20+52j
		mov	edx, [ebp+arg_4]
		mov	[ebp+var_B8], edx

loc_6FFC4CD9:				; CODE XREF: sub_6FFC4C20+1DDj
					; sub_6FFC4C20+1F8j ...
		mov	edi, [ebp+arg_0]
		lea	eax, [ebp+var_24]
		mov	ecx, [ebp+var_B8]
		mov	[esp], eax
		mov	[ebp+var_98], 0FFFFFFFFh
		mov	[esp+4], edi
		mov	[esp+8], ecx
		call	sub_6FFC3D40
		mov	eax, [edi+1Ch]
		mov	[ebp+var_A4], eax
		add	eax, 1
		mov	[edi+1Ch], eax
		sub	esp, 4
		mov	dword ptr [esp], offset	a1slotactiondes	; "1slotActionDestroyed(QObject*)"
		mov	[ebp+var_98], 2
		call	ds:_Z13qFlagLocationPKc
		mov	edx, [edi]
		mov	[ebp+var_F0], eax
		mov	dword ptr [esp], offset	a2destroyedQo_0	; "2destroyed(QObject*)"
		mov	[ebp+var_EC], edx
		call	ds:_Z13qFlagLocationPKc
		mov	ecx, [ebp+var_F0]
		mov	edi, [ebp+var_EC]
		mov	[esp+4], eax
		mov	eax, [ebp+arg_4]
		mov	dword ptr [esp+10h], 0
		mov	[esp+0Ch], ecx
		mov	[esp+8], edi
		mov	[esp], eax
		call	ds:_ZN7QObject7connectEPKS_PKcS1_S3_N2Qt14ConnectionTypeE
		mov	edx, [ebp+arg_0]
		mov	eax, [edx+14h]
		mov	edx, [eax+34h]
		cmp	edx, 1
		jz	short loc_6FFC4D91
		mov	eax, [ebp+arg_0]
		add	eax, 14h
		mov	[esp], eax
		call	sub_6FFE48A0
		mov	ecx, [ebp+arg_0]
		mov	eax, [ecx+14h]

loc_6FFC4D91:				; CODE XREF: sub_6FFC4C20+15Bj
		mov	ecx, [eax+38h]
		mov	edi, [ebp+arg_0]
		test	ecx, ecx
		mov	edx, [edi+14h]
		js	loc_6FFC5070
		lea	esi, ds:0[ecx*4]
		mov	ebx, edx
		nop
		lea	esi, [esi+0]

loc_6FFC4DB0:				; CODE XREF: sub_6FFC4C20+1D2j
		mov	eax, [edx+ecx*4+4]
		cmp	eax, ebx
		jz	short loc_6FFC4DC3
		mov	edi, [ebp+var_A4]
		cmp	edi, [eax-8]
		jg	short loc_6FFC4DF0

loc_6FFC4DC3:				; CODE XREF: sub_6FFC4C20+196j
					; sub_6FFC4C20+1C2j ...
		sub	ecx, 1
		mov	[ebp+esi+var_5C], edx
		sub	esi, 4
		cmp	ecx, 0FFFFFFFFh
		jz	loc_6FFC5054
		mov	eax, [ebp+arg_0]
		mov	ebx, [eax+14h]
		mov	eax, [edx+ecx*4+4]
		cmp	eax, ebx
		jz	short loc_6FFC4DC3
		mov	edi, [ebp+var_A4]
		cmp	edi, [eax-8]
		jle	short loc_6FFC4DC3
		nop

loc_6FFC4DF0:				; CODE XREF: sub_6FFC4C20+1A1j
		mov	edx, eax
		jmp	short loc_6FFC4DB0
; ---------------------------------------------------------------------------

loc_6FFC4DF4:				; CODE XREF: sub_6FFC4C20+59j
		mov	edi, [ebp+arg_4]
		mov	[ebp+var_B8], edi
		jmp	loc_6FFC4CD9
; ---------------------------------------------------------------------------

loc_6FFC4E02:				; CODE XREF: sub_6FFC4C20+8Dj
		mov	esi, [ebp+var_B4]
		mov	ecx, eax
		jmp	loc_6FFC4CA2
; ---------------------------------------------------------------------------
		align 10h

loc_6FFC4E10:				; CODE XREF: sub_6FFC4C20+99j
		mov	esi, [ebp+var_F4]
		cmp	esi, eax
		jz	loc_6FFC4CD9
		cmp	[eax-8], ebx
		lea	edx, [eax-8]
		jbe	short loc_6FFC4E31

loc_6FFC4E26:				; CODE XREF: sub_6FFC4C20+21Dj
		mov	[ebp+var_B8], ebx
		jmp	loc_6FFC4CD9
; ---------------------------------------------------------------------------

loc_6FFC4E31:				; CODE XREF: sub_6FFC4C20+204j
		mov	edx, [edx+4]
		cmp	edx, 0FFFFFFFFh
		mov	[ebp+var_C0], edx
		jz	short loc_6FFC4E26
		lea	eax, [ebp+var_20]
		mov	[esp+4], ebx
		mov	[esp], eax
		mov	[ebp+var_98], 0FFFFFFFFh
		call	ds:_ZNK7QAction4textEv
		mov	[ebp+var_98], 4
		sub	esp, 4
		mov	dword ptr [esp], 18h ; size_t
		call	sub_6FFEAE70
		mov	[ebp+var_A0], eax
		lea	eax, [ebp+var_28]
		mov	edx, [ebp+var_A0]
		mov	[esp+8], eax
		mov	eax, [ebp+var_A0]
		mov	[ebp+var_28], 2
		mov	[ebp+var_98], 1
		mov	[esp], edx
		add	eax, 8
		mov	[esp+4], eax
		call	ds:_ZN11QTextStreamC1EP7QString6QFlagsIN9QIODevice12OpenModeFlagEE
		mov	ecx, [ebp+var_A0]
		mov	eax, ds:_ZN7QString11shared_nullE
		mov	[ecx+8], eax
		lock inc dword ptr [eax]
		setnz	dl
		mov	dword ptr [ecx+0Ch], 1
		lea	eax, [ebp+var_1C]
		mov	dword ptr [ecx+10h], 1
		mov	byte ptr [ecx+15h], 1
		mov	[ebp+var_1C], ecx
		mov	byte ptr [ecx+14h], 0
		mov	dword ptr [esp+4], offset a31m ; "\x1B[31m"
		mov	[esp], eax
		mov	[ebp+var_98], 3
		call	sub_6FFE9FF0
		mov	dword ptr [esp+4], offset aVoidDbusmenu_0 ; "void DBusMenuExporterPrivate::addAction"...
		mov	[esp], eax
		mov	[ebp+var_98], 3
		call	sub_6FFE9FF0
		mov	dword ptr [esp+4], offset a0m ;	"\x1B[0m:"
		mov	[esp], eax
		call	sub_6FFE9FF0
		mov	[ebp+var_A8], eax
		mov	edx, eax
		mov	eax, [eax]
		mov	byte ptr [eax+14h], 1
		mov	dword ptr [esp+4], 20h
		mov	eax, [edx]
		mov	[esp], eax
		call	ds:_ZN11QTextStreamlsEc
		mov	ecx, [ebp+var_A8]
		mov	dword ptr [esp+4], offset aAlreadyTrackin ; "Already tracking action"
		mov	[esp], ecx
		call	sub_6FFE9FF0
		mov	[ebp+var_AC], eax
		mov	edi, eax
		mov	dword ptr [esp+4], 22h
		mov	eax, [eax]
		mov	[esp], eax
		call	ds:_ZN11QTextStreamlsEc
		lea	edx, [ebp+var_20]
		mov	[esp+4], edx
		mov	[esp], eax
		call	ds:_ZN11QTextStreamlsERK7QString
		mov	dword ptr [esp+4], 22h
		mov	[esp], eax
		call	ds:_ZN11QTextStreamlsEc
		mov	eax, [edi]
		cmp	byte ptr [eax+14h], 0
		jz	short loc_6FFC4FAC
		mov	dword ptr [esp+4], 20h
		mov	[esp], eax
		call	ds:_ZN11QTextStreamlsEc

loc_6FFC4FAC:				; CODE XREF: sub_6FFC4C20+379j
		mov	eax, [ebp+var_AC]
		mov	dword ptr [esp+4], offset aUnderId ; "under id"
		mov	[ebp+var_98], 3
		mov	[esp], eax
		call	sub_6FFE9FF0
		mov	edx, [ebp+var_C0]
		mov	[ebp+var_B0], eax
		mov	[esp+4], edx
		mov	eax, [eax]
		mov	[esp], eax
		call	ds:_ZN11QTextStreamlsEi
		mov	edi, [ebp+var_B0]
		mov	eax, [edi]
		cmp	byte ptr [eax+14h], 0
		jz	short loc_6FFC5006
		mov	dword ptr [esp+4], 20h
		mov	[esp], eax
		call	ds:_ZN11QTextStreamlsEc

loc_6FFC5006:				; CODE XREF: sub_6FFC4C20+3D3j
		lea	eax, [ebp+var_1C]
		mov	[esp], eax
		mov	[ebp+var_98], 4
		call	sub_6FFE9DD0
		mov	eax, [ebp+var_20]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jnz	short loc_6FFC503E
		mov	eax, [ebp+var_20]
		mov	[ebp+var_98], 0FFFFFFFFh
		mov	[esp], eax
		call	ds:_ZN7QString4freeEPNS_4DataE

loc_6FFC503E:				; CODE XREF: sub_6FFC4C20+406j
					; sub_6FFC4C20+780j ...
		lea	eax, [ebp+var_9C]
		mov	[esp], eax
		call	_Unwind_SjLj_Unregister
		lea	esp, [ebp-0Ch]
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_6FFC5054:				; CODE XREF: sub_6FFC4C20+1B0j
		mov	edx, [ebp+arg_0]
		cmp	[edx+14h], eax
		jz	short loc_6FFC5070
		mov	ecx, [ebp+var_A4]
		lea	edx, [eax-8]
		cmp	ecx, [eax-8]
		jge	short loc_6FFC50AF
		mov	edi, [ebp+arg_0]
		mov	eax, [edi+14h]

loc_6FFC5070:				; CODE XREF: sub_6FFC4C20+17Cj
					; sub_6FFC4C20+43Aj
		lea	edx, [ebp+var_5C]
		mov	dword ptr [esp+0Ch], 4
		mov	dword ptr [esp+8], 8
		mov	[esp+4], edx
		mov	[esp], eax
		mov	[ebp+var_98], 2
		call	ds:_ZN8QMapData11node_createEPPNS_4NodeEii
		mov	edx, eax
		sub	edx, 8
		jz	short loc_6FFC50AA
		mov	ecx, [ebp+var_A4]
		mov	[eax-8], ecx

loc_6FFC50AA:				; CODE XREF: sub_6FFC4C20+47Fj
		cmp	edx, 0FFFFFFFCh
		jz	short loc_6FFC50B5

loc_6FFC50AF:				; CODE XREF: sub_6FFC4C20+448j
		mov	eax, [ebp+arg_4]
		mov	[edx+4], eax

loc_6FFC50B5:				; CODE XREF: sub_6FFC4C20+48Dj
		mov	edi, [ebp+arg_0]
		mov	eax, [edi+18h]
		mov	edx, [eax+34h]
		cmp	edx, 1
		jz	short loc_6FFC50DE
		mov	eax, [ebp+var_D4]
		mov	[ebp+var_98], 2
		mov	[esp], eax
		call	sub_6FFE4310
		mov	eax, [edi+18h]

loc_6FFC50DE:				; CODE XREF: sub_6FFC4C20+4A1j
		mov	edx, [ebp+arg_0]
		mov	ebx, [edx+18h]
		mov	edx, [eax+38h]
		test	edx, edx
		js	short loc_6FFC513D
		mov	esi, [ebp+arg_4]
		lea	edi, ds:0[edx*4]
		mov	ecx, ebx

loc_6FFC50F7:				; CODE XREF: sub_6FFC4C20+4FCj
					; sub_6FFC4C20+502j
		mov	eax, [ecx+edx*4+4]
		cmp	eax, ebx
		jz	short loc_6FFC5104
		cmp	[eax-8], esi
		jb	short loc_6FFC5120

loc_6FFC5104:				; CODE XREF: sub_6FFC4C20+4DDj
		sub	edx, 1
		mov	[ebp+edi+var_5C], ecx
		sub	edi, 4
		cmp	edx, 0FFFFFFFFh
		jz	short loc_6FFC5124
		mov	eax, [ebp+arg_0]
		mov	esi, [ebp+arg_4]
		mov	ebx, [eax+18h]
		jmp	short loc_6FFC50F7
; ---------------------------------------------------------------------------
		align 10h

loc_6FFC5120:				; CODE XREF: sub_6FFC4C20+4E2j
		mov	ecx, eax
		jmp	short loc_6FFC50F7
; ---------------------------------------------------------------------------

loc_6FFC5124:				; CODE XREF: sub_6FFC4C20+4F1j
		mov	edx, [ebp+arg_0]
		cmp	[edx+18h], eax
		jz	short loc_6FFC513D
		mov	edx, [ebp+arg_4]
		lea	ecx, [eax-8]
		cmp	edx, [eax-8]
		jnb	short loc_6FFC5184
		mov	ecx, [ebp+arg_0]
		mov	eax, [ecx+18h]

loc_6FFC513D:				; CODE XREF: sub_6FFC4C20+4C9j
					; sub_6FFC4C20+50Aj
		lea	edx, [ebp+var_5C]
		mov	dword ptr [esp+0Ch], 4
		mov	dword ptr [esp+8], 8
		mov	[esp+4], edx
		mov	[esp], eax
		mov	[ebp+var_98], 2
		call	ds:_ZN8QMapData11node_createEPPNS_4NodeEii
		mov	edx, eax
		sub	edx, 8
		jz	short loc_6FFC5174
		mov	ecx, [ebp+arg_4]
		mov	[eax-8], ecx

loc_6FFC5174:				; CODE XREF: sub_6FFC4C20+54Cj
		cmp	edx, 0FFFFFFFCh
		jz	short loc_6FFC518D
		mov	eax, [ebp+var_A4]
		mov	[edx+4], eax
		jmp	short loc_6FFC518D
; ---------------------------------------------------------------------------

loc_6FFC5184:				; CODE XREF: sub_6FFC4C20+515j
		mov	edi, [ebp+var_A4]
		mov	[ecx+4], edi

loc_6FFC518D:				; CODE XREF: sub_6FFC4C20+557j
					; sub_6FFC4C20+562j
		mov	edx, [ebp+arg_0]
		mov	edx, [edx+10h]
		mov	[ebp+var_BC], edx
		mov	eax, [edx+8]
		cmp	eax, 1
		jz	short loc_6FFC51FB
		mov	dword ptr [esp+10h], 4
		mov	dword ptr [esp+0Ch], 10h
		mov	dword ptr [esp+8], offset sub_6FFE4CC0
		mov	dword ptr [esp+4], offset sub_6FFE4D40
		mov	[esp], edx
		mov	[ebp+var_98], 2
		call	ds:_ZN9QHashData14detach_helper2EPFvPNS_4NodeEPvEPFvS1_Eii
		mov	ecx, [ebp+arg_0]
		mov	[ebp+var_BC], eax
		mov	eax, [ecx+10h]
		lock dec dword ptr [eax+8]
		setnz	dl
		test	dl, dl
		jz	loc_6FFC5464

loc_6FFC51EF:				; CODE XREF: sub_6FFC4C20+858j
		mov	eax, [ebp+var_BC]
		mov	edi, [ebp+arg_0]
		mov	[edi+10h], eax

loc_6FFC51FB:				; CODE XREF: sub_6FFC4C20+57Fj
		mov	edx, [ebp+arg_4]
		mov	ecx, [ebp+var_BC]
		mov	[ebp+var_D8], edx
		mov	ebx, [ecx+18h]
		test	ebx, ebx
		jz	loc_6FFC53E0
		mov	eax, edx
		xor	edx, edx
		div	ebx
		mov	edi, ecx
		mov	edi, [edi+4]
		lea	ecx, [edi+edx*4]
		mov	[ebp+var_C8], ecx
		mov	eax, [ecx]
		cmp	eax, [ebp+var_BC]
		jz	short loc_6FFC523D
		mov	ebx, [eax]
		test	ebx, ebx
		jz	loc_6FFC55D8

loc_6FFC523D:				; CODE XREF: sub_6FFC4C20+611j
					; sub_6FFC4C20+9E7j
		mov	ecx, [ebp+arg_0]
		mov	edx, [ecx+10h]
		cmp	eax, edx
		jz	short loc_6FFC5273
		mov	ecx, [ebp+arg_4]
		mov	ebx, [ebp+var_D8]
		mov	esi, [ebp+var_C8]
		jmp	short loc_6FFC5260
; ---------------------------------------------------------------------------

loc_6FFC5258:				; CODE XREF: sub_6FFC4C20+643j
					; sub_6FFC4C20+648j
		mov	esi, eax
		mov	eax, [eax]
		cmp	eax, edx
		jz	short loc_6FFC526A

loc_6FFC5260:				; CODE XREF: sub_6FFC4C20+636j
		cmp	ebx, [eax+4]
		jnz	short loc_6FFC5258
		cmp	ecx, [eax+8]
		jnz	short loc_6FFC5258

loc_6FFC526A:				; CODE XREF: sub_6FFC4C20+63Ej
		mov	ecx, [ebp+arg_0]
		mov	[ebp+var_C8], esi

loc_6FFC5273:				; CODE XREF: sub_6FFC4C20+625j
					; sub_6FFC4C20+7CFj
		mov	eax, [ebp+var_D8]
		mov	edx, [ebp+var_C8]
		mov	[ebp+var_2C], eax
		mov	edx, [edx]
		mov	[ebp+var_CC], edx
		cmp	edx, [ecx+10h]
		jz	loc_6FFC53F4
		mov	ecx, [ebp+var_24]
		mov	edi, edx
		mov	[ebp+var_D0], ecx
		cmp	[edx+0Ch], ecx
		jz	short loc_6FFC52D5
		lock inc dword ptr [ecx+34h]
		setnz	al
		mov	eax, [edx+0Ch]
		lock dec dword ptr [eax+34h]
		setnz	dl
		test	dl, dl
		jz	loc_6FFC5480

loc_6FFC52BC:				; CODE XREF: sub_6FFC4C20+893j
		mov	edi, [ebp+var_D0]
		mov	ecx, [ebp+var_CC]
		mov	[ecx+0Ch], edi
		test	byte ptr [edi+44h], 2
		jz	loc_6FFC5448

loc_6FFC52D5:				; CODE XREF: sub_6FFC4C20+681j
					; sub_6FFC4C20+823j ...
		mov	eax, [ebp+arg_4]
		mov	[ebp+var_98], 2
		mov	[esp], eax
		call	ds:_ZNK7QAction4menuEv
		test	eax, eax
		jz	short loc_6FFC5314
		mov	eax, [ebp+arg_4]
		mov	[esp], eax
		call	ds:_ZNK7QAction4menuEv
		mov	edx, [ebp+var_A4]
		mov	ecx, [ebp+arg_0]
		mov	[esp+4], eax
		mov	[esp+8], edx
		mov	[esp], ecx
		call	sub_6FFC56B0

loc_6FFC5314:				; CODE XREF: sub_6FFC4C20+6CDj
		mov	edi, [ebp+arg_0]
		mov	eax, [ebp+arg_8]
		add	dword ptr [edi+20h], 1
		mov	[ebp+var_2C], eax
		mov	ecx, [edi+30h]
		mov	esi, [ecx+18h]
		mov	ebx, ecx
		mov	eax, ecx
		test	esi, esi
		jz	short loc_6FFC5393
		mov	edx, [ebp+arg_8]
		mov	[ebp+var_F8], edx
		mov	eax, edx
		xor	edx, edx
		div	esi
		mov	ebx, edx
		shl	ebx, 2
		mov	[ebp+var_E8], ebx
		mov	edi, [ecx+4]
		add	[ebp+var_E8], edi
		mov	eax, [ebp+var_E8]
		mov	edx, [eax]
		cmp	edx, ecx
		jz	short loc_6FFC5368
		mov	ecx, [edx]
		test	ecx, ecx
		jz	loc_6FFC55A4

loc_6FFC5368:				; CODE XREF: sub_6FFC4C20+73Cj
					; sub_6FFC4C20+9B3j
		mov	edi, [ebp+arg_0]
		mov	eax, [edi+30h]
		cmp	eax, edx
		jz	loc_6FFC5519
		mov	ecx, [ebp+arg_8]
		cmp	ecx, [edx+4]
		jz	short loc_6FFC539B
		mov	ebx, [ebp+var_F8]

loc_6FFC5384:				; CODE XREF: sub_6FFC4C20+76Fj
		mov	ecx, edx
		mov	edx, [edx]
		cmp	eax, edx
		jz	short loc_6FFC53D6
		cmp	ebx, [edx+4]
		jnz	short loc_6FFC5384
		mov	ebx, [ecx]

loc_6FFC5393:				; CODE XREF: sub_6FFC4C20+70Dj
					; sub_6FFC4C20+7B8j
		cmp	eax, ebx
		jz	loc_6FFC5519

loc_6FFC539B:				; CODE XREF: sub_6FFC4C20+75Cj
					; sub_6FFC4C20+927j
		mov	eax, [ebp+var_24]
		test	eax, eax
		jz	loc_6FFC503E
		lock dec dword ptr [eax+34h]
		setnz	dl
		test	dl, dl
		jnz	loc_6FFC503E
		mov	eax, [ebp+var_24]
		mov	[ebp+var_98], 0FFFFFFFFh
		mov	[esp+4], eax
		lea	eax, [ebp+var_24]
		mov	[esp], eax
		call	sub_6FFE4220
		jmp	loc_6FFC503E
; ---------------------------------------------------------------------------

loc_6FFC53D6:				; CODE XREF: sub_6FFC4C20+76Aj
		mov	ebx, edx
		jmp	short loc_6FFC5393
; ---------------------------------------------------------------------------
		align 10h

loc_6FFC53E0:				; CODE XREF: sub_6FFC4C20+5EFj
		mov	edi, [ebp+arg_0]
		mov	ecx, [ebp+arg_0]
		add	edi, 10h
		mov	[ebp+var_C8], edi
		jmp	loc_6FFC5273
; ---------------------------------------------------------------------------

loc_6FFC53F4:				; CODE XREF: sub_6FFC4C20+66Dj
		add	ecx, 10h
		mov	[ebp+var_FC], ecx
		mov	eax, [edx+0Ch]
		cmp	eax, [edx+18h]
		jge	loc_6FFC554C

loc_6FFC5409:				; CODE XREF: sub_6FFC4C20+97Fj
		lea	eax, [ebp+var_24]
		mov	edi, [ebp+var_C8]
		mov	[esp+0Ch], eax
		lea	eax, [ebp+arg_4]
		mov	edx, [ebp+var_FC]
		mov	[esp+8], eax
		mov	eax, [ebp+var_D8]
		mov	[ebp+var_98], 2
		mov	[esp+10h], edi
		mov	[esp], edx
		mov	[esp+4], eax
		call	sub_6FFE4BE0
		jmp	loc_6FFC52D5
; ---------------------------------------------------------------------------

loc_6FFC5448:				; CODE XREF: sub_6FFC4C20+6AFj
		mov	eax, ecx
		add	eax, 0Ch
		mov	[esp], eax
		mov	[ebp+var_98], 2
		call	sub_6FFE3B80
		jmp	loc_6FFC52D5
; ---------------------------------------------------------------------------

loc_6FFC5464:				; CODE XREF: sub_6FFC4C20+5C9j
		mov	dword ptr [esp+4], offset sub_6FFE4CC0
		mov	eax, [ecx+10h]
		mov	[esp], eax
		call	ds:_ZN9QHashData11free_helperEPFvPNS_4NodeEE
		jmp	loc_6FFC51EF
; ---------------------------------------------------------------------------
		align 10h

loc_6FFC5480:				; CODE XREF: sub_6FFC4C20+696j
		mov	eax, [edi+0Ch]
		mov	edx, eax
		mov	[ebp+var_E4], eax
		mov	eax, [eax+4]
		cmp	edx, eax
		jnz	short loc_6FFC54F8

loc_6FFC5492:				; CODE XREF: sub_6FFC4C20+8D6j
		mov	edx, [ebp+var_E4]
		mov	dword ptr [esp+4], 1Ch
		mov	[ebp+var_98], 2
		mov	[esp], edx
		call	ds:_ZN8QMapData16continueFreeDataEi
		jmp	loc_6FFC52BC
; ---------------------------------------------------------------------------

loc_6FFC54B8:				; CODE XREF: sub_6FFC4C20+8F7j
		mov	eax, [eax-1Ch]
		mov	[ebp+var_98], 2
		mov	[esp], eax
		call	ds:_ZN7QString4freeEPNS_4DataE

loc_6FFC54CE:				; CODE XREF: sub_6FFC4C20+8F5j
		mov	eax, [ebp+var_DC]
		mov	[ebp+var_98], 2
		add	eax, 8
		mov	[esp], eax
		call	ds:_ZN8QVariantD1Ev
		mov	eax, [ebp+var_C4]
		cmp	[ebp+var_E4], eax
		jz	short loc_6FFC5492

loc_6FFC54F8:				; CODE XREF: sub_6FFC4C20+870j
		mov	ecx, [eax+4]
		lea	edi, [eax-1Ch]
		mov	[ebp+var_DC], edi
		mov	[ebp+var_C4], ecx
		mov	edx, [eax-1Ch]
		lock dec dword ptr [edx]
		setnz	cl
		test	cl, cl
		jnz	short loc_6FFC54CE
		jmp	short loc_6FFC54B8
; ---------------------------------------------------------------------------

loc_6FFC5519:				; CODE XREF: sub_6FFC4C20+750j
					; sub_6FFC4C20+775j
		lea	eax, [ebp+var_2C]
		mov	[esp+4], eax
		mov	eax, [ebp+arg_0]
		mov	[ebp+var_98], 2
		add	eax, 30h
		mov	[esp], eax
		call	sub_6FFE4A50
		mov	edi, [ebp+arg_0]
		mov	eax, [edi+34h]
		mov	[esp], eax
		call	ds:_ZN6QTimer5startEv
		jmp	loc_6FFC539B
; ---------------------------------------------------------------------------

loc_6FFC554C:				; CODE XREF: sub_6FFC4C20+7E3j
		movsx	eax, word ptr [edx+16h]
		mov	[esp], edx
		mov	[ebp+var_98], 2
		add	eax, 1
		mov	[esp+4], eax
		call	ds:_ZN9QHashData6rehashEi
		mov	edx, [ebp+var_FC]
		lea	eax, [ebp+var_2C]
		mov	[esp+8], eax
		lea	eax, [ebp+arg_4]
		mov	[esp+4], eax
		mov	[ebp+var_98], 2
		mov	[esp], edx
		call	sub_6FFEA980
		mov	ecx, [ebp+var_2C]
		mov	[ebp+var_C8], eax
		mov	[ebp+var_D8], ecx
		jmp	loc_6FFC5409
; ---------------------------------------------------------------------------

loc_6FFC55A4:				; CODE XREF: sub_6FFC4C20+742j
		mov	dword ptr [esp+8], 376h
		mov	dword ptr [esp+4], offset aRIncludeQtco_0 ; "R:/include/QtCore/qhash.h"
		mov	dword ptr [esp], offset	aNodeENodeNext ; "*node	== e ||	(*node)->next"
		mov	[ebp+var_98], 2
		call	ds:_Z9qt_assertPKcS0_i
		mov	ecx, [ebp+var_E8]
		mov	edx, [ecx]
		jmp	loc_6FFC5368
; ---------------------------------------------------------------------------

loc_6FFC55D8:				; CODE XREF: sub_6FFC4C20+617j
		mov	dword ptr [esp+8], 376h
		mov	dword ptr [esp+4], offset aRIncludeQtco_0 ; "R:/include/QtCore/qhash.h"
		mov	dword ptr [esp], offset	aNodeENodeNext ; "*node	== e ||	(*node)->next"
		mov	[ebp+var_98], 2
		call	ds:_Z9qt_assertPKcS0_i
		mov	edx, [ebp+var_C8]
		mov	eax, [edx]
		jmp	loc_6FFC523D
sub_6FFC4C20	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn

sub_6FFC560C	proc near		; DATA XREF: sub_6FFC4C20+29o
		add	ebp, 18h
		mov	eax, [ebp-98h]
		mov	edi, [ebp-94h]
		cmp	eax, 1
		mov	[ebp-100h], edi
		jz	short loc_6FFC5682
		cmp	eax, 2
		jz	short loc_6FFC566B
		cmp	eax, 3
		jz	short loc_6FFC563E
		mov	eax, [ebp-0A0h]
		mov	[esp+0], eax
		call	sub_6FFEAE50

loc_6FFC563E:				; CODE XREF: sub_6FFC560C+22j
					; sub_6FFC560C+74j
		lea	eax, [ebp-20h]
		mov	[esp+0], eax
		mov	dword ptr [ebp-98h], 0
		call	sub_6FFEA140
		mov	eax, [ebp-100h]
		mov	dword ptr [ebp-98h], 0FFFFFFFFh
		mov	[esp+0], eax
		call	_Unwind_SjLj_Resume
; ---------------------------------------------------------------------------

loc_6FFC566B:				; CODE XREF: sub_6FFC560C+1Dj
		lea	eax, [ebp-1Ch]
		mov	[esp+0], eax
		mov	dword ptr [ebp-98h], 0
		call	sub_6FFE9DD0
		jmp	short loc_6FFC563E
; ---------------------------------------------------------------------------

loc_6FFC5682:				; CODE XREF: sub_6FFC560C+18j
		lea	eax, [ebp-24h]
		mov	[esp+0], eax
		mov	dword ptr [ebp-98h], 0
		call	sub_6FFE4290
		mov	eax, [ebp-100h]
		mov	dword ptr [ebp-98h], 0FFFFFFFFh
		mov	[esp+0], eax
		call	_Unwind_SjLj_Resume
sub_6FFC560C	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_6FFC56B0	proc near		; CODE XREF: sub_6FFC4C20+6EFp
					; _ZN16DBusMenuExporterC1ERK7QStringP5QMenuRK15QDBusConnection+1B4p ...

var_64		= dword	ptr -64h
var_60		= dword	ptr -60h
var_5C		= byte ptr -5Ch
var_58		= dword	ptr -58h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= byte ptr -8
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		sub	esp, 78h
		lea	eax, [ebp+var_8]
		mov	[ebp+var_3C], eax
		lea	eax, [ebp+var_5C]
		mov	[esp], eax
		mov	[ebp+var_44], offset sub_6FFEC1F0
		mov	[ebp+var_40], offset dword_6FFEC9F4
		mov	[ebp+var_38], offset sub_6FFC587A
		mov	[ebp+var_34], esp
		call	_Unwind_SjLj_Register
		mov	eax, ds:_ZN7QString11shared_nullE
		mov	[ebp+var_C], eax
		lock inc dword ptr [eax]
		setnz	dl
		mov	edx, [ebp+arg_4]
		lea	eax, [ebp+var_C]
		mov	dword ptr [esp+8], offset dword_6FFEE000
		mov	[esp+4], eax
		mov	[ebp+var_58], 4
		mov	[esp], edx
		call	ds:_Z20qt_qFindChild_helperPK7QObjectRK7QStringRK11QMetaObject
		mov	[ebp+var_60], eax
		mov	eax, [ebp+var_C]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jnz	short loc_6FFC5732
		mov	eax, [ebp+var_C]
		mov	[ebp+var_58], 0FFFFFFFFh
		mov	[esp], eax
		call	ds:_ZN7QString4freeEPNS_4DataE

loc_6FFC5732:				; CODE XREF: sub_6FFC56B0+6Dj
		mov	eax, [ebp+var_60]
		test	eax, eax
		jz	short loc_6FFC5746

loc_6FFC5739:				; CODE XREF: sub_6FFC56B0+15Ej
					; sub_6FFC56B0+177j
		lea	eax, [ebp+var_5C]
		mov	[esp], eax
		call	_Unwind_SjLj_Unregister
		leave
		retn
; ---------------------------------------------------------------------------

loc_6FFC5746:				; CODE XREF: sub_6FFC56B0+87j
		mov	dword ptr [esp], 10h ; size_t
		mov	[ebp+var_58], 0FFFFFFFFh
		call	sub_6FFEAE70
		mov	edx, [ebp+arg_8]
		mov	[esp+0Ch], edx
		mov	edx, [ebp+arg_0]
		mov	[ebp+var_64], eax
		mov	eax, [edx]
		mov	edx, [ebp+var_64]
		mov	[ebp+var_58], 3
		mov	[esp+8], eax
		mov	eax, [ebp+arg_4]
		mov	[esp], edx
		mov	[esp+4], eax
		call	sub_6FFC1680
		mov	edx, [ebp+arg_4]
		lea	eax, [ebp+var_10]
		mov	[esp], eax
		mov	[ebp+var_58], 0FFFFFFFFh
		mov	[esp+4], edx
		call	ds:_ZNK7QWidget7actionsEv
		mov	eax, [ebp+var_10]
		mov	[ebp+var_20], eax
		sub	esp, 4
		lock inc dword ptr [eax]
		setnz	dl
		mov	eax, [ebp+var_20]
		test	byte ptr [eax+10h], 1
		jnz	short loc_6FFC57C9
		lea	eax, [ebp+var_20]
		mov	[esp], eax
		mov	[ebp+var_58], 2
		call	sub_6FFE9D10

loc_6FFC57C9:				; CODE XREF: sub_6FFC56B0+105j
		mov	eax, [ebp+var_20]
		mov	[ebp+var_1C], 0
		mov	edx, [eax+8]
		lea	edx, [eax+edx*4+14h]
		mov	[ebp+var_18], edx
		mov	edx, [eax+0Ch]
		lea	eax, [eax+edx*4+14h]
		mov	[ebp+var_14], eax
		mov	eax, [ebp+var_10]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jz	short loc_6FFC5862

loc_6FFC57F4:				; CODE XREF: sub_6FFC56B0+1C5j
		mov	ecx, [ebp+var_1C]
		test	ecx, ecx
		jnz	short loc_6FFC5803
		mov	eax, [ebp+var_18]
		cmp	eax, [ebp+var_14]
		jnz	short loc_6FFC5831

loc_6FFC5803:				; CODE XREF: sub_6FFC56B0+149j
					; sub_6FFC56B0+17Fj ...
		mov	eax, [ebp+var_20]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jnz	loc_6FFC5739
		mov	eax, [ebp+var_20]
		mov	[ebp+var_58], 0FFFFFFFFh
		mov	[esp], eax
		call	ds:_Z5qFreePv
		jmp	loc_6FFC5739
; ---------------------------------------------------------------------------

loc_6FFC582C:				; CODE XREF: sub_6FFC56B0+1B0j
		cmp	eax, [ebp+var_14]
		jz	short loc_6FFC5803

loc_6FFC5831:				; CODE XREF: sub_6FFC56B0+151j
		mov	edx, [ebp+arg_8]
		mov	[esp+8], edx
		mov	eax, [eax]
		mov	[ebp+var_58], 1
		mov	[esp+4], eax
		mov	eax, [ebp+arg_0]
		mov	[esp], eax
		call	sub_6FFC4C20
		mov	eax, [ebp+var_18]
		mov	edx, [ebp+var_1C]
		add	eax, 4
		test	edx, edx
		mov	[ebp+var_18], eax
		jnz	short loc_6FFC5803
		jmp	short loc_6FFC582C
; ---------------------------------------------------------------------------

loc_6FFC5862:				; CODE XREF: sub_6FFC56B0+142j
		mov	eax, [ebp+var_10]
		mov	[ebp+var_58], 1
		mov	[esp], eax
		call	ds:_Z5qFreePv
		jmp	loc_6FFC57F4
sub_6FFC56B0	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn

sub_6FFC587A	proc near		; DATA XREF: sub_6FFC56B0+20o
		add	ebp, 8
		mov	eax, [ebp-58h]
		mov	edx, [ebp-54h]
		cmp	eax, 1
		mov	[ebp-68h], edx
		jz	short loc_6FFC58B9
		cmp	eax, 2
		jz	short loc_6FFC58E2
		cmp	eax, 3
		jz	short loc_6FFC58BE
		lea	eax, [ebp-20h]

loc_6FFC5898:				; CODE XREF: sub_6FFC587A+42j
		mov	[esp+0], eax
		mov	dword ptr [ebp-58h], 0
		call	sub_6FFE9DA0
		mov	eax, [ebp-68h]
		mov	dword ptr [ebp-58h], 0FFFFFFFFh
		mov	[esp+0], eax
		call	_Unwind_SjLj_Resume
; ---------------------------------------------------------------------------

loc_6FFC58B9:				; CODE XREF: sub_6FFC587A+Fj
		lea	eax, [ebp-10h]
		jmp	short loc_6FFC5898
; ---------------------------------------------------------------------------

loc_6FFC58BE:				; CODE XREF: sub_6FFC587A+19j
		lea	eax, [ebp-0Ch]
		mov	[esp+0], eax
		mov	dword ptr [ebp-58h], 0
		call	sub_6FFEA140
		mov	eax, [ebp-68h]
		mov	dword ptr [ebp-58h], 0FFFFFFFFh
		mov	[esp+0], eax
		call	_Unwind_SjLj_Resume
; ---------------------------------------------------------------------------

loc_6FFC58E2:				; CODE XREF: sub_6FFC587A+14j
		mov	eax, [ebp-64h]
		mov	[esp+0], eax
		call	sub_6FFEAE50
		mov	edx, [ebp-68h]
		mov	dword ptr [ebp-58h], 0FFFFFFFFh
		mov	[esp+0], edx
		call	_Unwind_SjLj_Resume
sub_6FFC587A	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  12. _ZN16DBusMenuExporterC1ERK7QStringP5QMenuRK15QDBusConnection

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public _ZN16DBusMenuExporterC1ERK7QStringP5QMenuRK15QDBusConnection
_ZN16DBusMenuExporterC1ERK7QStringP5QMenuRK15QDBusConnection proc near

var_60		= dword	ptr -60h
var_5C		= dword	ptr -5Ch
var_58		= dword	ptr -58h
var_54		= dword	ptr -54h
var_50		= dword	ptr -50h
var_4C		= byte ptr -4Ch
var_48		= dword	ptr -48h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_10		= dword	ptr -10h
var_C		= byte ptr -0Ch
var_8		= byte ptr -8
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h

		push	ebp
		mov	ebp, esp
		lea	eax, [ebp+var_8]
		push	ebx
		sub	esp, 84h
		mov	[ebp+var_2C], eax
		lea	eax, [ebp+var_4C]
		mov	[esp], eax
		mov	[ebp+var_34], offset sub_6FFEC1F0
		mov	[ebp+var_30], offset dword_6FFECA00
		mov	[ebp+var_28], offset sub_6FFC5C02
		mov	[ebp+var_24], esp
		call	_Unwind_SjLj_Register
		mov	edx, [ebp+arg_8]
		mov	eax, [ebp+arg_0]
		mov	[ebp+var_48], 0FFFFFFFFh
		mov	[esp+4], edx
		mov	[esp], eax
		call	ds:_ZN7QObjectC2EPS_
		mov	edx, [ebp+arg_0]
		mov	dword ptr [edx], offset	off_6FFF9D68
		mov	dword ptr [esp], 38h ; size_t
		mov	[ebp+var_48], 5
		call	sub_6FFEAE70
		mov	edx, ds:_ZN7QString11shared_nullE
		mov	[eax+4], edx
		lock inc dword ptr [edx]
		setnz	cl
		mov	edx, ds:_ZN9QHashData11shared_nullE
		mov	[eax+10h], edx
		lock inc dword ptr [edx+8]
		setnz	cl
		mov	ecx, ds:_ZN8QMapData11shared_nullE
		mov	[eax+14h], ecx
		lock inc dword ptr [ecx+34h]
		setnz	bl
		mov	[eax+18h], ecx
		lock inc dword ptr [ecx+34h]
		setnz	bl
		mov	[eax+28h], edx
		lock inc dword ptr [edx+8]
		setnz	cl
		mov	[eax+30h], edx
		lock inc dword ptr [edx+8]
		setnz	cl
		mov	edx, [ebp+arg_0]
		mov	[edx+8], eax
		mov	[eax], edx
		mov	edx, [ebp+arg_4]
		add	eax, 4
		mov	[esp], eax
		mov	[esp+4], edx
		call	ds:_ZN7QStringaSERKS_
		mov	edx, [ebp+arg_0]
		mov	eax, [edx+8]
		mov	edx, [ebp+arg_8]
		mov	dword ptr [eax+1Ch], 1
		mov	[eax+0Ch], edx
		mov	dword ptr [eax+20h], 1
		mov	byte ptr [eax+24h], 0
		mov	dword ptr [esp], 18h ; size_t
		call	sub_6FFEAE70
		mov	[ebp+var_58], eax
		mov	eax, [ebp+arg_0]
		mov	edx, [ebp+var_58]
		mov	[ebp+var_48], 4
		mov	[esp+4], eax
		mov	[esp], edx
		call	ds:_ZN6QTimerC1EP7QObject
		mov	edx, [ebp+arg_0]
		mov	eax, [edx+8]
		mov	edx, [ebp+var_58]
		mov	[eax+2Ch], edx
		mov	dword ptr [esp], 18h ; size_t
		mov	[ebp+var_48], 5
		call	sub_6FFEAE70
		mov	[ebp+var_54], eax
		mov	eax, [ebp+arg_0]
		mov	edx, [ebp+var_54]
		mov	[ebp+var_48], 3
		mov	[esp+4], eax
		mov	[esp], edx
		call	ds:_ZN6QTimerC1EP7QObject
		mov	edx, [ebp+arg_0]
		mov	eax, [edx+8]
		mov	edx, [ebp+var_54]
		mov	[eax+34h], edx
		mov	dword ptr [esp], 10h ; size_t
		mov	[ebp+var_48], 5
		call	sub_6FFEAE70
		mov	[ebp+var_50], eax
		mov	eax, [ebp+arg_0]
		mov	edx, [ebp+var_50]
		mov	[ebp+var_48], 2
		mov	[esp+4], eax
		mov	[esp], edx
		call	sub_6FFC8280
		mov	edx, [ebp+arg_0]
		mov	eax, [edx+8]
		mov	edx, [ebp+var_50]
		mov	[eax+8], edx
		mov	dword ptr [esp+8], 0
		mov	edx, [eax+0Ch]
		mov	[esp], eax
		mov	[ebp+var_48], 5
		mov	[esp+4], edx
		call	sub_6FFC56B0
		mov	edx, [ebp+arg_0]
		mov	dword ptr [esp+4], 0
		mov	eax, [edx+8]
		mov	eax, [eax+2Ch]
		mov	[esp], eax
		call	ds:_ZN6QTimer11setIntervalEi
		mov	edx, [ebp+arg_0]
		mov	eax, [edx+8]
		mov	eax, [eax+2Ch]
		or	byte ptr [eax+14h], 1
		mov	dword ptr [esp], offset	a1doupdateactio	; "1doUpdateActions()"
		call	ds:_Z13qFlagLocationPKc
		mov	[ebp+var_60], eax
		mov	dword ptr [esp], offset	a2timeout ; "2timeout()"
		call	ds:_Z13qFlagLocationPKc
		mov	edx, [ebp+var_60]
		mov	dword ptr [esp+10h], 0
		mov	[esp+4], eax
		mov	[esp+0Ch], edx
		mov	edx, [ebp+arg_0]
		mov	[esp+8], edx
		mov	eax, [edx+8]
		mov	eax, [eax+2Ch]
		mov	[esp], eax
		call	ds:_ZN7QObject7connectEPKS_PKcS1_S3_N2Qt14ConnectionTypeE
		mov	edx, [ebp+arg_0]
		mov	dword ptr [esp+4], 0
		mov	eax, [edx+8]
		mov	eax, [eax+34h]
		mov	[esp], eax
		call	ds:_ZN6QTimer11setIntervalEi
		mov	edx, [ebp+arg_0]
		mov	eax, [edx+8]
		mov	eax, [eax+34h]
		or	byte ptr [eax+14h], 1
		mov	dword ptr [esp], offset	a1doemitlayoutu	; "1doEmitLayoutUpdated()"
		call	ds:_Z13qFlagLocationPKc
		mov	[ebp+var_5C], eax
		mov	dword ptr [esp], offset	a2timeout_0 ; "2timeout()"
		call	ds:_Z13qFlagLocationPKc
		mov	edx, [ebp+var_5C]
		mov	dword ptr [esp+10h], 0
		mov	[esp+4], eax
		mov	[esp+0Ch], edx
		mov	edx, [ebp+arg_0]
		mov	[esp+8], edx
		mov	eax, [edx+8]
		mov	eax, [eax+34h]
		mov	[esp], eax
		call	ds:_ZN7QObject7connectEPKS_PKcS1_S3_N2Qt14ConnectionTypeE
		mov	eax, [ebp+arg_C]
		mov	[esp+4], eax
		lea	eax, [ebp+var_C]
		mov	[esp], eax
		call	ds:_ZN15QDBusConnectionC1ERKS_
		mov	edx, [ebp+arg_0]
		lea	eax, [ebp+var_10]
		mov	[esp+0Ch], eax
		mov	[ebp+var_10], 0FF0h
		mov	eax, [edx+8]
		mov	eax, [eax+8]
		mov	[ebp+var_48], 1
		mov	[esp+8], eax
		mov	eax, [ebp+arg_4]
		mov	[esp+4], eax
		lea	eax, [ebp+var_C]
		mov	[esp], eax
		call	ds:_ZN15QDBusConnection14registerObjectERK7QStringP7QObject6QFlagsINS_14RegisterOptionEE
		lea	eax, [ebp+var_C]
		mov	[esp], eax
		mov	[ebp+var_48], 5
		call	ds:_ZN15QDBusConnectionD1Ev
		lea	eax, [ebp+var_4C]
		mov	[esp], eax
		call	_Unwind_SjLj_Unregister
		add	esp, 84h
		pop	ebx
		pop	ebp
		retn
_ZN16DBusMenuExporterC1ERK7QStringP5QMenuRK15QDBusConnection endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn

sub_6FFC5C02	proc near		; DATA XREF: _ZN16DBusMenuExporterC1ERK7QStringP5QMenuRK15QDBusConnection+24o
		add	ebp, 8
		mov	eax, [ebp-48h]
		mov	edx, [ebp-44h]
		cmp	eax, 1
		mov	[ebp-64h], edx
		jz	loc_6FFC5C78
		cmp	eax, 2
		jz	short loc_6FFC5C6B
		cmp	eax, 3
		jz	short loc_6FFC5C5E
		cmp	eax, 4
		jz	short loc_6FFC5C39
		lea	eax, [ebp-0Ch]
		mov	[esp+0], eax
		mov	dword ptr [ebp-48h], 0
		call	ds:_ZN15QDBusConnectionD1Ev

loc_6FFC5C39:				; CODE XREF: sub_6FFC5C02+22j
					; sub_6FFC5C02+67j ...
		mov	eax, [ebp+8]
		mov	dword ptr [ebp-48h], 0
		mov	[esp+0], eax
		call	ds:_ZN7QObjectD2Ev
		mov	edx, [ebp-64h]
		mov	dword ptr [ebp-48h], 0FFFFFFFFh
		mov	[esp+0], edx
		call	_Unwind_SjLj_Resume
; ---------------------------------------------------------------------------

loc_6FFC5C5E:				; CODE XREF: sub_6FFC5C02+1Dj
		mov	eax, [ebp-58h]
		mov	[esp+0], eax
		call	sub_6FFEAE50
		jmp	short loc_6FFC5C39
; ---------------------------------------------------------------------------

loc_6FFC5C6B:				; CODE XREF: sub_6FFC5C02+18j
		mov	eax, [ebp-54h]
		mov	[esp+0], eax
		call	sub_6FFEAE50
		jmp	short loc_6FFC5C39
; ---------------------------------------------------------------------------

loc_6FFC5C78:				; CODE XREF: sub_6FFC5C02+Fj
		mov	eax, [ebp-50h]
		mov	[esp+0], eax
		call	sub_6FFEAE50
		jmp	short loc_6FFC5C39
sub_6FFC5C02	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  13. _ZN16DBusMenuExporterC2ERK7QStringP5QMenuRK15QDBusConnection

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public _ZN16DBusMenuExporterC2ERK7QStringP5QMenuRK15QDBusConnection
_ZN16DBusMenuExporterC2ERK7QStringP5QMenuRK15QDBusConnection proc near

var_60		= dword	ptr -60h
var_5C		= dword	ptr -5Ch
var_58		= dword	ptr -58h
var_54		= dword	ptr -54h
var_50		= dword	ptr -50h
var_4C		= byte ptr -4Ch
var_48		= dword	ptr -48h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_10		= dword	ptr -10h
var_C		= byte ptr -0Ch
var_8		= byte ptr -8
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h

		push	ebp
		mov	ebp, esp
		lea	eax, [ebp+var_8]
		push	ebx
		sub	esp, 84h
		mov	[ebp+var_2C], eax
		lea	eax, [ebp+var_4C]
		mov	[esp], eax
		mov	[ebp+var_34], offset sub_6FFEC1F0
		mov	[ebp+var_30], offset word_6FFECA0E
		mov	[ebp+var_28], offset sub_6FFC5F92
		mov	[ebp+var_24], esp
		call	_Unwind_SjLj_Register
		mov	edx, [ebp+arg_8]
		mov	eax, [ebp+arg_0]
		mov	[ebp+var_48], 0FFFFFFFFh
		mov	[esp+4], edx
		mov	[esp], eax
		call	ds:_ZN7QObjectC2EPS_
		mov	edx, [ebp+arg_0]
		mov	dword ptr [edx], offset	off_6FFF9D68
		mov	dword ptr [esp], 38h ; size_t
		mov	[ebp+var_48], 5
		call	sub_6FFEAE70
		mov	edx, ds:_ZN7QString11shared_nullE
		mov	[eax+4], edx
		lock inc dword ptr [edx]
		setnz	cl
		mov	edx, ds:_ZN9QHashData11shared_nullE
		mov	[eax+10h], edx
		lock inc dword ptr [edx+8]
		setnz	cl
		mov	ecx, ds:_ZN8QMapData11shared_nullE
		mov	[eax+14h], ecx
		lock inc dword ptr [ecx+34h]
		setnz	bl
		mov	[eax+18h], ecx
		lock inc dword ptr [ecx+34h]
		setnz	bl
		mov	[eax+28h], edx
		lock inc dword ptr [edx+8]
		setnz	cl
		mov	[eax+30h], edx
		lock inc dword ptr [edx+8]
		setnz	cl
		mov	edx, [ebp+arg_0]
		mov	[edx+8], eax
		mov	[eax], edx
		mov	edx, [ebp+arg_4]
		add	eax, 4
		mov	[esp], eax
		mov	[esp+4], edx
		call	ds:_ZN7QStringaSERKS_
		mov	edx, [ebp+arg_0]
		mov	eax, [edx+8]
		mov	edx, [ebp+arg_8]
		mov	dword ptr [eax+1Ch], 1
		mov	[eax+0Ch], edx
		mov	dword ptr [eax+20h], 1
		mov	byte ptr [eax+24h], 0
		mov	dword ptr [esp], 18h ; size_t
		call	sub_6FFEAE70
		mov	[ebp+var_58], eax
		mov	eax, [ebp+arg_0]
		mov	edx, [ebp+var_58]
		mov	[ebp+var_48], 4
		mov	[esp+4], eax
		mov	[esp], edx
		call	ds:_ZN6QTimerC1EP7QObject
		mov	edx, [ebp+arg_0]
		mov	eax, [edx+8]
		mov	edx, [ebp+var_58]
		mov	[eax+2Ch], edx
		mov	dword ptr [esp], 18h ; size_t
		mov	[ebp+var_48], 5
		call	sub_6FFEAE70
		mov	[ebp+var_54], eax
		mov	eax, [ebp+arg_0]
		mov	edx, [ebp+var_54]
		mov	[ebp+var_48], 3
		mov	[esp+4], eax
		mov	[esp], edx
		call	ds:_ZN6QTimerC1EP7QObject
		mov	edx, [ebp+arg_0]
		mov	eax, [edx+8]
		mov	edx, [ebp+var_54]
		mov	[eax+34h], edx
		mov	dword ptr [esp], 10h ; size_t
		mov	[ebp+var_48], 5
		call	sub_6FFEAE70
		mov	[ebp+var_50], eax
		mov	eax, [ebp+arg_0]
		mov	edx, [ebp+var_50]
		mov	[ebp+var_48], 2
		mov	[esp+4], eax
		mov	[esp], edx
		call	sub_6FFC8280
		mov	edx, [ebp+arg_0]
		mov	eax, [edx+8]
		mov	edx, [ebp+var_50]
		mov	[eax+8], edx
		mov	dword ptr [esp+8], 0
		mov	edx, [eax+0Ch]
		mov	[esp], eax
		mov	[ebp+var_48], 5
		mov	[esp+4], edx
		call	sub_6FFC56B0
		mov	edx, [ebp+arg_0]
		mov	dword ptr [esp+4], 0
		mov	eax, [edx+8]
		mov	eax, [eax+2Ch]
		mov	[esp], eax
		call	ds:_ZN6QTimer11setIntervalEi
		mov	edx, [ebp+arg_0]
		mov	eax, [edx+8]
		mov	eax, [eax+2Ch]
		or	byte ptr [eax+14h], 1
		mov	dword ptr [esp], offset	a1doupdateactio	; "1doUpdateActions()"
		call	ds:_Z13qFlagLocationPKc
		mov	[ebp+var_60], eax
		mov	dword ptr [esp], offset	a2timeout ; "2timeout()"
		call	ds:_Z13qFlagLocationPKc
		mov	edx, [ebp+var_60]
		mov	dword ptr [esp+10h], 0
		mov	[esp+4], eax
		mov	[esp+0Ch], edx
		mov	edx, [ebp+arg_0]
		mov	[esp+8], edx
		mov	eax, [edx+8]
		mov	eax, [eax+2Ch]
		mov	[esp], eax
		call	ds:_ZN7QObject7connectEPKS_PKcS1_S3_N2Qt14ConnectionTypeE
		mov	edx, [ebp+arg_0]
		mov	dword ptr [esp+4], 0
		mov	eax, [edx+8]
		mov	eax, [eax+34h]
		mov	[esp], eax
		call	ds:_ZN6QTimer11setIntervalEi
		mov	edx, [ebp+arg_0]
		mov	eax, [edx+8]
		mov	eax, [eax+34h]
		or	byte ptr [eax+14h], 1
		mov	dword ptr [esp], offset	a1doemitlayoutu	; "1doEmitLayoutUpdated()"
		call	ds:_Z13qFlagLocationPKc
		mov	[ebp+var_5C], eax
		mov	dword ptr [esp], offset	a2timeout_0 ; "2timeout()"
		call	ds:_Z13qFlagLocationPKc
		mov	edx, [ebp+var_5C]
		mov	dword ptr [esp+10h], 0
		mov	[esp+4], eax
		mov	[esp+0Ch], edx
		mov	edx, [ebp+arg_0]
		mov	[esp+8], edx
		mov	eax, [edx+8]
		mov	eax, [eax+34h]
		mov	[esp], eax
		call	ds:_ZN7QObject7connectEPKS_PKcS1_S3_N2Qt14ConnectionTypeE
		mov	eax, [ebp+arg_C]
		mov	[esp+4], eax
		lea	eax, [ebp+var_C]
		mov	[esp], eax
		call	ds:_ZN15QDBusConnectionC1ERKS_
		mov	edx, [ebp+arg_0]
		lea	eax, [ebp+var_10]
		mov	[esp+0Ch], eax
		mov	[ebp+var_10], 0FF0h
		mov	eax, [edx+8]
		mov	eax, [eax+8]
		mov	[ebp+var_48], 1
		mov	[esp+8], eax
		mov	eax, [ebp+arg_4]
		mov	[esp+4], eax
		lea	eax, [ebp+var_C]
		mov	[esp], eax
		call	ds:_ZN15QDBusConnection14registerObjectERK7QStringP7QObject6QFlagsINS_14RegisterOptionEE
		lea	eax, [ebp+var_C]
		mov	[esp], eax
		mov	[ebp+var_48], 5
		call	ds:_ZN15QDBusConnectionD1Ev
		lea	eax, [ebp+var_4C]
		mov	[esp], eax
		call	_Unwind_SjLj_Unregister
		add	esp, 84h
		pop	ebx
		pop	ebp
		retn
_ZN16DBusMenuExporterC2ERK7QStringP5QMenuRK15QDBusConnection endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn

sub_6FFC5F92	proc near		; DATA XREF: _ZN16DBusMenuExporterC2ERK7QStringP5QMenuRK15QDBusConnection+24o
		add	ebp, 8
		mov	eax, [ebp-48h]
		mov	edx, [ebp-44h]
		cmp	eax, 1
		mov	[ebp-64h], edx
		jz	loc_6FFC6008
		cmp	eax, 2
		jz	short loc_6FFC5FFB
		cmp	eax, 3
		jz	short loc_6FFC5FEE
		cmp	eax, 4
		jz	short loc_6FFC5FC9
		lea	eax, [ebp-0Ch]
		mov	[esp+0], eax
		mov	dword ptr [ebp-48h], 0
		call	ds:_ZN15QDBusConnectionD1Ev

loc_6FFC5FC9:				; CODE XREF: sub_6FFC5F92+22j
					; sub_6FFC5F92+67j ...
		mov	eax, [ebp+8]
		mov	dword ptr [ebp-48h], 0
		mov	[esp+0], eax
		call	ds:_ZN7QObjectD2Ev
		mov	edx, [ebp-64h]
		mov	dword ptr [ebp-48h], 0FFFFFFFFh
		mov	[esp+0], edx
		call	_Unwind_SjLj_Resume
; ---------------------------------------------------------------------------

loc_6FFC5FEE:				; CODE XREF: sub_6FFC5F92+1Dj
		mov	eax, [ebp-58h]
		mov	[esp+0], eax
		call	sub_6FFEAE50
		jmp	short loc_6FFC5FC9
; ---------------------------------------------------------------------------

loc_6FFC5FFB:				; CODE XREF: sub_6FFC5F92+18j
		mov	eax, [ebp-54h]
		mov	[esp+0], eax
		call	sub_6FFEAE50
		jmp	short loc_6FFC5FC9
; ---------------------------------------------------------------------------

loc_6FFC6008:				; CODE XREF: sub_6FFC5F92+Fj
		mov	eax, [ebp-50h]
		mov	[esp+0], eax
		call	sub_6FFEAE50
		jmp	short loc_6FFC5FC9
sub_6FFC5F92	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry   4. _ZN16DBusMenuExporter15doUpdateActionsEv

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public _ZN16DBusMenuExporter15doUpdateActionsEv
_ZN16DBusMenuExporter15doUpdateActionsEv proc near
					; CODE XREF: _ZN16DBusMenuExporter18qt_static_metacallEP7QObjectN11QMetaObject4CallEiPPv+69j

var_1A0		= dword	ptr -1A0h
var_19C		= dword	ptr -19Ch
var_198		= dword	ptr -198h
var_194		= dword	ptr -194h
var_190		= dword	ptr -190h
var_18C		= dword	ptr -18Ch
var_188		= dword	ptr -188h
var_184		= dword	ptr -184h
var_180		= dword	ptr -180h
var_17C		= dword	ptr -17Ch
var_178		= dword	ptr -178h
var_174		= dword	ptr -174h
var_170		= dword	ptr -170h
var_16C		= dword	ptr -16Ch
var_168		= dword	ptr -168h
var_164		= dword	ptr -164h
var_160		= dword	ptr -160h
var_15C		= dword	ptr -15Ch
var_158		= dword	ptr -158h
var_154		= dword	ptr -154h
var_150		= dword	ptr -150h
var_14C		= dword	ptr -14Ch
var_148		= dword	ptr -148h
var_144		= dword	ptr -144h
var_140		= dword	ptr -140h
var_13C		= dword	ptr -13Ch
var_138		= dword	ptr -138h
var_134		= dword	ptr -134h
var_130		= dword	ptr -130h
var_12C		= dword	ptr -12Ch
var_128		= dword	ptr -128h
var_124		= dword	ptr -124h
var_120		= dword	ptr -120h
var_11C		= dword	ptr -11Ch
var_118		= dword	ptr -118h
var_114		= dword	ptr -114h
var_110		= dword	ptr -110h
var_10C		= dword	ptr -10Ch
var_108		= dword	ptr -108h
var_104		= dword	ptr -104h
var_100		= dword	ptr -100h
var_FC		= dword	ptr -0FCh
var_F8		= dword	ptr -0F8h
var_F4		= dword	ptr -0F4h
var_F0		= dword	ptr -0F0h
var_EC		= dword	ptr -0ECh
var_E8		= dword	ptr -0E8h
var_E4		= dword	ptr -0E4h
var_E0		= dword	ptr -0E0h
var_DC		= dword	ptr -0DCh
var_D8		= dword	ptr -0D8h
var_D4		= dword	ptr -0D4h
var_D0		= dword	ptr -0D0h
var_CC		= dword	ptr -0CCh
var_C8		= dword	ptr -0C8h
var_C4		= dword	ptr -0C4h
var_C0		= dword	ptr -0C0h
var_BC		= dword	ptr -0BCh
var_B8		= dword	ptr -0B8h
var_B4		= dword	ptr -0B4h
var_B0		= dword	ptr -0B0h
var_AC		= dword	ptr -0ACh
var_A8		= dword	ptr -0A8h
var_A4		= dword	ptr -0A4h
var_A0		= dword	ptr -0A0h
var_9C		= byte ptr -9Ch
var_98		= dword	ptr -98h
var_94		= dword	ptr -94h
var_84		= dword	ptr -84h
var_80		= dword	ptr -80h
var_7C		= dword	ptr -7Ch
var_78		= dword	ptr -78h
var_74		= dword	ptr -74h
var_5C		= dword	ptr -5Ch
var_58		= dword	ptr -58h
var_54		= dword	ptr -54h
var_50		= dword	ptr -50h
var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= byte ptr -18h
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		lea	eax, [ebp+var_18]
		sub	esp, 1BCh
		mov	[ebp+var_7C], eax
		lea	eax, [ebp+var_9C]
		mov	[esp], eax
		mov	[ebp+var_84], offset sub_6FFEC1F0
		mov	[ebp+var_80], offset dword_6FFECABC
		mov	[ebp+var_78], offset loc_6FFC7504
		mov	[ebp+var_74], esp
		call	_Unwind_SjLj_Register
		mov	edx, [ebp+arg_0]
		mov	eax, [edx+8]
		mov	eax, [eax+28h]
		cmp	dword ptr [eax+0Ch], 0
		jnz	short loc_6FFC6080

loc_6FFC606A:				; CODE XREF: _ZN16DBusMenuExporter15doUpdateActionsEv+ABAj
					; _ZN16DBusMenuExporter15doUpdateActionsEv+ADCj
		lea	eax, [ebp+var_9C]
		mov	[esp], eax
		call	_Unwind_SjLj_Unregister
		lea	esp, [ebp-0Ch]
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_6FFC6080:				; CODE XREF: _ZN16DBusMenuExporter15doUpdateActionsEv+48j
		mov	ecx, ds:_ZN9QListData11shared_nullE
		mov	[ebp+var_1C], ecx
		mov	[ebp+var_B0], ecx
		mov	[ebp+var_B4], ecx
		lock inc dword ptr [ecx]
		setnz	al
		mov	[ebp+var_20], ecx
		lock inc dword ptr [ecx]
		setnz	al
		mov	eax, [edx+8]
		mov	eax, [eax+28h]
		mov	[ebp+var_5C], eax
		lock inc dword ptr [eax+8]
		setnz	dl
		mov	eax, [ebp+var_5C]
		test	byte ptr [eax+1Ch], 1
		jnz	short loc_6FFC6119
		mov	edx, [eax+8]
		cmp	edx, 1
		jz	short loc_6FFC6119
		mov	dword ptr [esp+10h], 4
		mov	dword ptr [esp+0Ch], 8
		mov	dword ptr [esp+8], offset nullsub_1
		mov	dword ptr [esp+4], offset nullsub_2
		mov	[esp], eax
		mov	[ebp+var_98], 0Eh
		call	ds:_ZN9QHashData14detach_helper2EPFvPNS_4NodeEPvEPFvS1_Eii
		mov	[ebp+var_198], eax
		mov	eax, [ebp+var_5C]
		lock dec dword ptr [eax+8]
		setnz	dl
		test	dl, dl
		jz	loc_6FFC73E7

loc_6FFC6110:				; CODE XREF: _ZN16DBusMenuExporter15doUpdateActionsEv+13DBj
		mov	eax, [ebp+var_198]
		mov	[ebp+var_5C], eax

loc_6FFC6119:				; CODE XREF: _ZN16DBusMenuExporter15doUpdateActionsEv+9Bj
					; _ZN16DBusMenuExporter15doUpdateActionsEv+A3j
		mov	eax, [ebp+var_5C]
		mov	[ebp+var_58], 0
		mov	ecx, [eax+4]
		mov	edx, [eax+18h]
		jmp	short loc_6FFC613B
; ---------------------------------------------------------------------------

loc_6FFC612B:				; CODE XREF: _ZN16DBusMenuExporter15doUpdateActionsEv+11Dj
		mov	ebx, [ecx]
		sub	edx, 1
		cmp	eax, ebx
		jnz	loc_6FFC76FD
		add	ecx, 4

loc_6FFC613B:				; CODE XREF: _ZN16DBusMenuExporter15doUpdateActionsEv+109j
		test	edx, edx
		jnz	short loc_6FFC612B

loc_6FFC613F:				; CODE XREF: _ZN16DBusMenuExporter15doUpdateActionsEv+16DFj
		mov	edx, [ebp+var_5C]
		mov	[ebp+var_54], eax
		cmp	eax, edx
		mov	[ebp+var_50], edx
		jz	loc_6FFC6962
		mov	ecx, ds:_ZN8QMapData11shared_nullE
		lea	ebx, [ebp+var_30]
		mov	[ebp+var_19C], ebx
		mov	[ebp+var_AC], ecx
		add	ecx, 34h
		mov	[ebp+var_A8], ecx

loc_6FFC616E:				; CODE XREF: _ZN16DBusMenuExporter15doUpdateActionsEv+93Cj
		mov	ecx, [ebp+arg_0]
		mov	edx, [eax+4]
		mov	ecx, [ecx+8]
		mov	[ebp+var_114], edx
		xor	edx, edx
		mov	[ebp+var_118], ecx
		mov	edi, [ecx+14h]
		mov	ecx, [edi+3Ch]
		test	ecx, ecx
		jz	loc_6FFC6939
		mov	ecx, [edi+38h]
		mov	esi, edi
		mov	ebx, edi
		mov	[ebp+var_188], edi
		test	ecx, ecx
		js	loc_6FFC6B01
		mov	[ebp+var_1A0], eax

loc_6FFC61AE:				; CODE XREF: _ZN16DBusMenuExporter15doUpdateActionsEv+1AFj
		mov	edx, [ebx+ecx*4+4]
		cmp	esi, edx
		jz	loc_6FFC67CF

loc_6FFC61BA:				; CODE XREF: _ZN16DBusMenuExporter15doUpdateActionsEv+7A9j
		mov	eax, [ebp+var_114]
		cmp	eax, [edx-8]
		jg	loc_6FFC67C1

loc_6FFC61C9:				; CODE XREF: _ZN16DBusMenuExporter15doUpdateActionsEv+7B5j
		sub	ecx, 1
		cmp	ecx, 0FFFFFFFFh
		jnz	short loc_6FFC61AE
		cmp	edi, edx
		mov	eax, [ebp+var_1A0]
		jz	loc_6FFC6B01
		mov	ebx, [ebp+var_114]
		lea	ecx, [edx-8]
		cmp	ebx, [edx-8]
		jl	loc_6FFC6B01
		mov	ecx, [ecx+4]
		test	ecx, ecx
		mov	[ebp+var_134], ecx
		jz	loc_6FFC6B01
		mov	eax, [ebp+var_118]
		mov	eax, [eax+10h]
		mov	[ebp+var_130], eax
		mov	edx, eax
		mov	eax, [eax+8]
		cmp	eax, 1
		jz	short loc_6FFC627B
		mov	dword ptr [esp+10h], 4
		mov	dword ptr [esp+0Ch], 10h
		mov	dword ptr [esp+8], offset sub_6FFE4CC0
		mov	dword ptr [esp+4], offset sub_6FFE4D40
		mov	[esp], edx
		mov	[ebp+var_98], 0Dh
		call	ds:_ZN9QHashData14detach_helper2EPFvPNS_4NodeEPvEPFvS1_Eii
		mov	ecx, [ebp+var_118]
		mov	[ebp+var_130], eax
		mov	eax, [ecx+10h]
		lock dec dword ptr [eax+8]
		setnz	dl
		test	dl, dl
		jz	loc_6FFC70E9

loc_6FFC626C:				; CODE XREF: _ZN16DBusMenuExporter15doUpdateActionsEv+10DDj
		mov	eax, [ebp+var_130]
		mov	ebx, [ebp+var_118]
		mov	[ebx+10h], eax

loc_6FFC627B:				; CODE XREF: _ZN16DBusMenuExporter15doUpdateActionsEv+1F9j
		mov	edx, [ebp+var_134]
		mov	ecx, [ebp+var_130]
		mov	[ebp+var_164], edx
		mov	ebx, [ecx+18h]
		test	ebx, ebx
		jz	loc_6FFC6C87
		mov	eax, edx
		xor	edx, edx
		div	ebx
		mov	ebx, [ebp+var_130]
		mov	ebx, [ebx+4]
		mov	ecx, edx
		shl	ecx, 2
		add	ecx, ebx
		mov	[ebp+var_110], ecx
		mov	eax, [ecx]
		cmp	eax, [ebp+var_130]
		jz	short loc_6FFC62C8
		mov	edi, [eax]
		test	edi, edi
		jz	loc_6FFC7364

loc_6FFC62C8:				; CODE XREF: _ZN16DBusMenuExporter15doUpdateActionsEv+29Cj
					; _ZN16DBusMenuExporter15doUpdateActionsEv+1373j
		mov	ecx, [ebp+var_118]
		mov	edx, [ecx+10h]
		cmp	eax, edx
		jz	loc_6FFC6B19
		mov	ecx, [ebp+var_164]
		mov	ebx, [ebp+var_110]
		mov	esi, [ebp+var_134]
		jmp	short loc_6FFC62FC
; ---------------------------------------------------------------------------
		align 10h

loc_6FFC62F0:				; CODE XREF: _ZN16DBusMenuExporter15doUpdateActionsEv+2DFj
					; _ZN16DBusMenuExporter15doUpdateActionsEv+2E4j
		mov	ebx, eax
		mov	eax, [eax]
		cmp	eax, edx
		jz	loc_6FFC6B09

loc_6FFC62FC:				; CODE XREF: _ZN16DBusMenuExporter15doUpdateActionsEv+2CBj
		cmp	ecx, [eax+4]
		jnz	short loc_6FFC62F0
		cmp	esi, [eax+8]
		jnz	short loc_6FFC62F0
		mov	eax, [ebx]
		mov	[ebp+var_110], ebx

loc_6FFC630E:				; CODE XREF: _ZN16DBusMenuExporter15doUpdateActionsEv+C81j
		cmp	edx, eax
		jz	loc_6FFC6B19

loc_6FFC6316:				; CODE XREF: _ZN16DBusMenuExporter15doUpdateActionsEv+AF3j
		add	eax, 0Ch
		mov	[ebp+var_D0], eax

loc_6FFC631F:				; CODE XREF: _ZN16DBusMenuExporter15doUpdateActionsEv+BD1j
					; _ZN16DBusMenuExporter15doUpdateActionsEv+BE0j ...
		mov	edx, [ebp+var_134]
		lea	eax, [ebp+var_24]
		mov	ecx, [ebp+arg_0]
		mov	[esp+8], edx
		mov	edx, [ecx+8]
		mov	[esp], eax
		mov	[ebp+var_98], 0Dh
		mov	[esp+4], edx
		call	sub_6FFC3D40
		mov	ebx, [ebp+var_AC]
		sub	esp, 4
		mov	edx, [ebp+var_A8]
		mov	[ebp+var_28], ebx
		lock inc dword ptr [edx]
		setnz	al
		mov	ecx, [ebp+var_B0]
		mov	ebx, [ebp+var_B4]
		mov	[ebp+var_2C], ecx
		lock inc dword ptr [ebx]
		setnz	al
		mov	eax, [ebp+var_24]
		mov	edx, [ebp+var_D0]
		mov	[ebp+var_E8], eax
		mov	edx, [edx]
		mov	[ebp+var_E4], edx
		mov	ecx, [edx+4]
		cmp	edx, ecx
		mov	[ebp+var_D8], ecx
		jz	loc_6FFC64EE
		lea	esi, [esi+0]

loc_6FFC63A0:				; CODE XREF: _ZN16DBusMenuExporter15doUpdateActionsEv+67Fj
		mov	ebx, [ebp+var_D8]
		mov	edx, [ebp+var_D8]
		mov	ecx, [ebp+var_19C]
		sub	ebx, 1Ch
		mov	[ebp+var_DC], ebx
		mov	eax, [edx-1Ch]
		cmp	ebx, ecx
		mov	[ebp+var_30], eax
		jz	loc_6FFC6763

loc_6FFC63C9:				; CODE XREF: _ZN16DBusMenuExporter15doUpdateActionsEv+76Dj
		lock inc dword ptr [eax]
		setnz	dl
		mov	eax, [ebp+var_24]
		mov	eax, [eax+34h]
		cmp	eax, 1
		jz	short loc_6FFC63EF
		lea	eax, [ebp+var_24]
		mov	[esp], eax
		mov	[ebp+var_98], 9
		call	sub_6FFE3B80

loc_6FFC63EF:				; CODE XREF: _ZN16DBusMenuExporter15doUpdateActionsEv+3B8j
		mov	ebx, [ebp+var_24]
		mov	eax, [ebx+38h]
		mov	[ebp+var_B8], ebx
		test	eax, eax
		mov	[ebp+var_C4], eax
		js	loc_6FFC6638
		mov	eax, ebx
		mov	edx, [ebp+var_B8]
		jmp	short loc_6FFC6432
; ---------------------------------------------------------------------------

loc_6FFC6413:				; CODE XREF: _ZN16DBusMenuExporter15doUpdateActionsEv+453j
		mov	eax, [ebp+var_24]

loc_6FFC6416:				; CODE XREF: _ZN16DBusMenuExporter15doUpdateActionsEv+696j
		sub	[ebp+var_C4], 1
		js	loc_6FFC6600
		mov	edx, [ebp+var_C8]
		mov	eax, [ebp+var_24]
		mov	[ebp+var_B8], edx

loc_6FFC6432:				; CODE XREF: _ZN16DBusMenuExporter15doUpdateActionsEv+3F1j
		mov	[ebp+var_C8], edx
		mov	ebx, edx

loc_6FFC643A:				; CODE XREF: _ZN16DBusMenuExporter15doUpdateActionsEv+466j
		mov	ecx, [ebp+var_C4]
		mov	ecx, [ebx+ecx*4+4]
		cmp	eax, ecx
		mov	[ebp+var_B8], ecx
		jz	loc_6FFC66B0
		mov	eax, ecx
		lea	ebx, [ebp+var_30]
		sub	eax, 1Ch
		mov	[esp+4], ebx
		mov	[esp], eax
		mov	[ebp+var_98], 9
		call	ds:_ZNK7QStringltERKS_
		test	al, al
		jz	short loc_6FFC6413
		mov	edx, [ebp+var_B8]
		mov	eax, [ebp+var_24]
		mov	[ebp+var_C8], edx
		mov	ebx, edx
		jmp	short loc_6FFC643A
; ---------------------------------------------------------------------------

loc_6FFC6488:				; CODE XREF: _ZN16DBusMenuExporter15doUpdateActionsEv+56Fj
		cmp	[ebp+var_BC], eax
		jz	short loc_6FFC64C5
		mov	eax, [ebp+var_BC]
		mov	[ebp+var_98], 8
		sub	eax, 1Ch
		mov	[esp+4], eax
		lea	eax, [ebp+var_30]
		mov	[esp], eax
		call	ds:_ZNK7QStringltERKS_
		test	al, al
		jz	short loc_6FFC64C5
		mov	edx, [ebp+var_D0]
		mov	edx, [edx]
		mov	[ebp+var_BC], edx

loc_6FFC64C5:				; CODE XREF: _ZN16DBusMenuExporter15doUpdateActionsEv+46Ej
					; _ZN16DBusMenuExporter15doUpdateActionsEv+495j ...
		mov	ecx, [ebp+var_BC]
		cmp	[ebp+var_E4], ecx
		jz	loc_6FFC6735

loc_6FFC64D7:				; CODE XREF: _ZN16DBusMenuExporter15doUpdateActionsEv+73Ej
		mov	eax, [ebp+var_30]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jz	loc_6FFC66D8

loc_6FFC64E8:				; CODE XREF: _ZN16DBusMenuExporter15doUpdateActionsEv+6CEj
		mov	eax, [ebp+var_D4]

loc_6FFC64EE:				; CODE XREF: _ZN16DBusMenuExporter15doUpdateActionsEv+377j
					; _ZN16DBusMenuExporter15doUpdateActionsEv+688j
		mov	eax, [eax+4]
		cmp	[ebp+var_E8], eax
		mov	[ebp+var_D4], eax
		jz	loc_6FFC67DA
		mov	ecx, [ebp+var_D4]
		mov	ebx, [ebp+var_D4]
		mov	edx, [ebp+var_19C]
		sub	ecx, 1Ch
		mov	[ebp+var_E0], ecx
		mov	eax, [ebx-1Ch]
		cmp	ecx, edx
		mov	[ebp+var_30], eax
		jz	loc_6FFC6792

loc_6FFC652C:				; CODE XREF: _ZN16DBusMenuExporter15doUpdateActionsEv+79Cj
		lock inc dword ptr [eax]
		setnz	dl
		mov	ecx, [ebp+var_D0]
		mov	eax, [ecx]
		mov	eax, [eax+34h]
		cmp	eax, 1
		jz	short loc_6FFC6554
		mov	[esp], ecx
		mov	[ebp+var_98], 8
		call	sub_6FFE3B80

loc_6FFC6554:				; CODE XREF: _ZN16DBusMenuExporter15doUpdateActionsEv+520j
		mov	ebx, [ebp+var_D0]
		mov	ebx, [ebx]
		mov	eax, [ebx+38h]
		mov	[ebp+var_BC], ebx
		test	eax, eax
		mov	[ebp+var_C0], eax
		js	loc_6FFC64C5
		mov	eax, ebx
		mov	edx, [ebp+var_BC]
		jmp	short loc_6FFC65AB
; ---------------------------------------------------------------------------
		align 10h

loc_6FFC6580:				; CODE XREF: _ZN16DBusMenuExporter15doUpdateActionsEv+5C8j
		mov	edx, [ebp+var_D0]
		mov	eax, [edx]

loc_6FFC6588:				; CODE XREF: _ZN16DBusMenuExporter15doUpdateActionsEv+5A5j
		sub	[ebp+var_C0], 1
		js	loc_6FFC6488
		mov	ebx, [ebp+var_CC]
		mov	ecx, [ebp+var_D0]
		mov	edx, ebx
		mov	eax, [ecx]
		mov	[ebp+var_BC], ebx

loc_6FFC65AB:				; CODE XREF: _ZN16DBusMenuExporter15doUpdateActionsEv+55Bj
		mov	[ebp+var_CC], edx
		mov	ebx, edx

loc_6FFC65B3:				; CODE XREF: _ZN16DBusMenuExporter15doUpdateActionsEv+5DEj
		mov	ecx, [ebp+var_C0]
		mov	ecx, [ebx+ecx*4+4]
		cmp	ecx, eax
		mov	[ebp+var_BC], ecx
		jz	short loc_6FFC6588
		mov	eax, ecx
		lea	ebx, [ebp+var_30]
		sub	eax, 1Ch
		mov	[esp+4], ebx
		mov	[esp], eax
		mov	[ebp+var_98], 8
		call	ds:_ZNK7QStringltERKS_
		test	al, al
		jz	short loc_6FFC6580
		mov	ecx, [ebp+var_D0]
		mov	ebx, [ebp+var_BC]
		mov	eax, [ecx]
		mov	[ebp+var_CC], ebx
		jmp	short loc_6FFC65B3
; ---------------------------------------------------------------------------

loc_6FFC6600:				; CODE XREF: _ZN16DBusMenuExporter15doUpdateActionsEv+3FDj
		cmp	[ebp+var_B8], eax
		jz	short loc_6FFC6638
		mov	eax, [ebp+var_B8]
		lea	ecx, [ebp+var_30]
		mov	[esp], ecx
		mov	[ebp+var_98], 9
		sub	eax, 1Ch
		mov	[esp+4], eax
		call	ds:_ZNK7QStringltERKS_
		test	al, al
		jz	short loc_6FFC6638
		mov	ebx, [ebp+var_24]
		mov	[ebp+var_B8], ebx

loc_6FFC6638:				; CODE XREF: _ZN16DBusMenuExporter15doUpdateActionsEv+3E3j
					; _ZN16DBusMenuExporter15doUpdateActionsEv+5E6j ...
		mov	eax, [ebp+var_B8]
		cmp	[ebp+var_E8], eax
		jz	loc_6FFC6714
		sub	eax, 14h
		mov	[ebp+var_EC], eax
		mov	eax, [ebp+var_DC]
		mov	edx, [ebp+var_EC]
		mov	[ebp+var_98], 9
		add	eax, 8
		mov	[esp+4], eax
		mov	[esp], edx
		call	ds:_ZNK8QVariant3cmpERKS_
		test	al, al
		jz	short loc_6FFC66F3

loc_6FFC667D:				; CODE XREF: _ZN16DBusMenuExporter15doUpdateActionsEv+6EFj
					; _ZN16DBusMenuExporter15doUpdateActionsEv+710j
		mov	eax, [ebp+var_30]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jz	short loc_6FFC66C0

loc_6FFC668A:				; CODE XREF: _ZN16DBusMenuExporter15doUpdateActionsEv+6B6j
		mov	edx, [ebp+var_D8]
		mov	edx, [edx+4]
		cmp	[ebp+var_E4], edx
		mov	[ebp+var_D8], edx
		jnz	loc_6FFC63A0
		mov	eax, [ebp+var_24]
		jmp	loc_6FFC64EE
; ---------------------------------------------------------------------------
		align 10h

loc_6FFC66B0:				; CODE XREF: _ZN16DBusMenuExporter15doUpdateActionsEv+42Cj
		mov	[ebp+var_B8], eax
		jmp	loc_6FFC6416
; ---------------------------------------------------------------------------
		align 10h

loc_6FFC66C0:				; CODE XREF: _ZN16DBusMenuExporter15doUpdateActionsEv+668j
		mov	eax, [ebp+var_30]
		mov	[ebp+var_98], 0Ah
		mov	[esp], eax
		call	ds:_ZN7QString4freeEPNS_4DataE
		jmp	short loc_6FFC668A
; ---------------------------------------------------------------------------

loc_6FFC66D8:				; CODE XREF: _ZN16DBusMenuExporter15doUpdateActionsEv+4C2j
		mov	eax, [ebp+var_30]
		mov	[ebp+var_98], 0Ah
		mov	[esp], eax
		call	ds:_ZN7QString4freeEPNS_4DataE
		jmp	loc_6FFC64E8
; ---------------------------------------------------------------------------

loc_6FFC66F3:				; CODE XREF: _ZN16DBusMenuExporter15doUpdateActionsEv+65Bj
		mov	ecx, [ebp+var_EC]
		lea	ebx, [ebp+var_30]
		lea	eax, [ebp+var_28]
		mov	[esp+4], ebx
		mov	[esp], eax
		mov	[esp+8], ecx
		call	sub_6FFE4110
		jmp	loc_6FFC667D
; ---------------------------------------------------------------------------

loc_6FFC6714:				; CODE XREF: _ZN16DBusMenuExporter15doUpdateActionsEv+624j
		lea	eax, [ebp+var_30]
		mov	[esp+4], eax
		lea	eax, [ebp+var_2C]
		mov	[esp], eax
		mov	[ebp+var_98], 9
		call	sub_6FFE8EA0
		jmp	loc_6FFC667D
; ---------------------------------------------------------------------------

loc_6FFC6735:				; CODE XREF: _ZN16DBusMenuExporter15doUpdateActionsEv+4B1j
		mov	eax, [ebp+var_E0]
		lea	ebx, [ebp+var_30]
		mov	[esp+4], ebx
		mov	[ebp+var_98], 8
		add	eax, 8
		mov	[esp+8], eax
		lea	eax, [ebp+var_28]
		mov	[esp], eax
		call	sub_6FFE4110
		jmp	loc_6FFC64D7
; ---------------------------------------------------------------------------

loc_6FFC6763:				; CODE XREF: _ZN16DBusMenuExporter15doUpdateActionsEv+3A3j
		mov	dword ptr [esp+8], 2D6h
		mov	dword ptr [esp+4], offset aRIncludeQtco_1 ; "R:/include/QtCore/qstring.h"
		mov	dword ptr [esp], offset	aOtherThis ; "&other !=	this"
		mov	[ebp+var_98], 0Ah
		call	ds:_Z9qt_assertPKcS0_i
		mov	eax, [ebp+var_30]
		jmp	loc_6FFC63C9
; ---------------------------------------------------------------------------

loc_6FFC6792:				; CODE XREF: _ZN16DBusMenuExporter15doUpdateActionsEv+506j
		mov	dword ptr [esp+8], 2D6h
		mov	dword ptr [esp+4], offset aRIncludeQtco_1 ; "R:/include/QtCore/qstring.h"
		mov	dword ptr [esp], offset	aOtherThis ; "&other !=	this"
		mov	[ebp+var_98], 0Ah
		call	ds:_Z9qt_assertPKcS0_i
		mov	eax, [ebp+var_30]
		jmp	loc_6FFC652C
; ---------------------------------------------------------------------------

loc_6FFC67C1:				; CODE XREF: _ZN16DBusMenuExporter15doUpdateActionsEv+1A3j
		mov	ebx, edx
		mov	edx, [ebx+ecx*4+4]
		cmp	esi, edx
		jnz	loc_6FFC61BA

loc_6FFC67CF:				; CODE XREF: _ZN16DBusMenuExporter15doUpdateActionsEv+194j
		mov	edx, [ebp+var_188]
		jmp	loc_6FFC61C9
; ---------------------------------------------------------------------------

loc_6FFC67DA:				; CODE XREF: _ZN16DBusMenuExporter15doUpdateActionsEv+4DDj
		mov	edx, [ebp+var_24]
		mov	ecx, [ebp+var_D0]
		mov	[ebp+var_128], edx
		cmp	[ecx], edx
		jz	short loc_6FFC681D
		lock inc dword ptr [edx+34h]
		setnz	al
		mov	eax, [ecx]
		lock dec dword ptr [eax+34h]
		setnz	dl
		test	dl, dl
		jz	loc_6FFC704F

loc_6FFC6805:				; CODE XREF: _ZN16DBusMenuExporter15doUpdateActionsEv+10C4j
		mov	ecx, [ebp+var_128]
		mov	edx, [ebp+var_D0]
		mov	[edx], ecx
		test	byte ptr [ecx+44h], 2
		jz	loc_6FFC6F2E

loc_6FFC681D:				; CODE XREF: _ZN16DBusMenuExporter15doUpdateActionsEv+7CBj
					; _ZN16DBusMenuExporter15doUpdateActionsEv+F20j
		mov	ebx, [ebp+var_134]
		mov	[ebp+var_98], 0Ah
		mov	[esp], ebx
		call	ds:_ZNK7QAction4menuEv
		test	eax, eax
		jz	short loc_6FFC6856
		mov	edx, [ebp+var_114]
		mov	ecx, [ebp+arg_0]
		mov	[esp+4], eax
		mov	[esp+8], edx
		mov	eax, [ecx+8]
		mov	[esp], eax
		call	sub_6FFC56B0

loc_6FFC6856:				; CODE XREF: _ZN16DBusMenuExporter15doUpdateActionsEv+818j
		mov	eax, [ebp+var_28]
		mov	esi, [eax+3Ch]
		test	esi, esi
		jnz	loc_6FFC6F45

loc_6FFC6864:				; CODE XREF: _ZN16DBusMenuExporter15doUpdateActionsEv+F9Ej
					; _ZN16DBusMenuExporter15doUpdateActionsEv+FADj ...
		mov	eax, [ebp+var_2C]
		mov	edx, [eax+0Ch]
		cmp	edx, [eax+8]
		jz	loc_6FFC68F6
		mov	edx, [ebp+var_B0]
		mov	ecx, [ebp+var_B4]
		mov	[ebp+var_48], edx
		lock inc dword ptr [ecx]
		setnz	al
		mov	eax, [ebp+var_2C]
		mov	ebx, [ebp+var_114]
		cmp	[ebp+var_48], eax
		mov	[ebp+var_11C], eax
		mov	[ebp+var_4C], ebx
		jz	short loc_6FFC68C9
		lock inc dword ptr [eax]
		setnz	al
		mov	eax, [ebp+var_48]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jz	loc_6FFC7123

loc_6FFC68B6:				; CODE XREF: _ZN16DBusMenuExporter15doUpdateActionsEv+119Aj
		mov	ecx, [ebp+var_11C]
		mov	[ebp+var_48], ecx
		test	byte ptr [ecx+10h], 1
		jz	loc_6FFC7102

loc_6FFC68C9:				; CODE XREF: _ZN16DBusMenuExporter15doUpdateActionsEv+87Dj
					; _ZN16DBusMenuExporter15doUpdateActionsEv+10FEj
		lea	eax, [ebp+var_4C]
		mov	[esp+4], eax
		lea	eax, [ebp+var_20]
		mov	[esp], eax
		mov	[ebp+var_98], 6
		call	sub_6FFE7040
		mov	eax, [ebp+var_48]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jz	loc_6FFC6E89

loc_6FFC68F6:				; CODE XREF: _ZN16DBusMenuExporter15doUpdateActionsEv+84Dj
					; _ZN16DBusMenuExporter15doUpdateActionsEv+F09j
		mov	eax, [ebp+var_2C]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jz	loc_6FFC6CA6

loc_6FFC6907:				; CODE XREF: _ZN16DBusMenuExporter15doUpdateActionsEv+D23j
		mov	eax, [ebp+var_28]
		test	eax, eax
		jz	short loc_6FFC691D
		lock dec dword ptr [eax+34h]
		setnz	dl
		test	dl, dl
		jz	loc_6FFC6DE7

loc_6FFC691D:				; CODE XREF: _ZN16DBusMenuExporter15doUpdateActionsEv+8ECj
					; _ZN16DBusMenuExporter15doUpdateActionsEv+E64j
		mov	eax, [ebp+var_24]
		test	eax, eax
		jz	short loc_6FFC6933
		lock dec dword ptr [eax+34h]
		setnz	dl
		test	dl, dl
		jz	loc_6FFC6D48

loc_6FFC6933:				; CODE XREF: _ZN16DBusMenuExporter15doUpdateActionsEv+902j
					; _ZN16DBusMenuExporter15doUpdateActionsEv+DC2j
		mov	edx, [ebp+var_58]
		mov	eax, [ebp+var_54]

loc_6FFC6939:				; CODE XREF: _ZN16DBusMenuExporter15doUpdateActionsEv+16Dj
					; _ZN16DBusMenuExporter15doUpdateActionsEv+AE4j
		mov	[ebp+var_58], edx
		mov	[esp], eax
		mov	[ebp+var_98], 0Dh
		call	ds:_ZN9QHashData8nextNodeEPNS_4NodeE
		mov	ebx, [ebp+var_58]
		mov	[ebp+var_54], eax
		test	ebx, ebx
		jnz	short loc_6FFC6962
		cmp	eax, [ebp+var_50]
		jnz	loc_6FFC616E

loc_6FFC6962:				; CODE XREF: _ZN16DBusMenuExporter15doUpdateActionsEv+12Aj
					; _ZN16DBusMenuExporter15doUpdateActionsEv+937j
		mov	eax, [ebp+var_5C]
		lock dec dword ptr [eax+8]
		setnz	dl
		test	dl, dl
		jz	loc_6FFC7704

loc_6FFC6974:				; CODE XREF: _ZN16DBusMenuExporter15doUpdateActionsEv+1702j
		mov	ebx, [ebp+arg_0]
		mov	eax, ds:_ZN9QHashData11shared_nullE
		mov	ebx, [ebx+8]
		mov	[ebp+var_A0], eax
		add	eax, 8
		mov	edx, [ebp+var_A0]
		mov	[ebp+var_A4], eax
		mov	[ebp+var_148], ebx
		lock inc dword ptr [edx+8]
		setnz	al
		cmp	edx, [ebx+28h]
		jz	short loc_6FFC69DD
		lock inc dword ptr [edx+8]
		setnz	al
		mov	eax, [ebx+28h]
		lock dec dword ptr [eax+8]
		setnz	dl
		test	dl, dl
		jz	loc_6FFC74E1

loc_6FFC69BF:				; CODE XREF: _ZN16DBusMenuExporter15doUpdateActionsEv+14DFj
		mov	ebx, [ebp+var_A0]
		mov	ecx, [ebp+var_148]
		mov	eax, ds:_ZN9QHashData11shared_nullE
		mov	[ecx+28h], ebx
		test	byte ptr [eax+1Ch], 1
		jz	loc_6FFC747C

loc_6FFC69DD:				; CODE XREF: _ZN16DBusMenuExporter15doUpdateActionsEv+984j
					; _ZN16DBusMenuExporter15doUpdateActionsEv+14BCj
		mov	edx, [ebp+var_A0]
		lock dec dword ptr [edx+8]
		setnz	al
		test	al, al
		jz	loc_6FFC7456

loc_6FFC69F2:				; CODE XREF: _ZN16DBusMenuExporter15doUpdateActionsEv+1457j
		mov	ebx, [ebp+arg_0]
		mov	eax, [ebx+8]
		cmp	byte ptr [eax+24h], 0
		jz	loc_6FFC6ABE
		mov	eax, [ebp+var_1C]
		mov	edx, [eax+0Ch]
		cmp	edx, [eax+8]
		jz	loc_6FFC7442

loc_6FFC6A11:				; CODE XREF: _ZN16DBusMenuExporter15doUpdateActionsEv+142Bj
		mov	eax, [ebp+var_20]
		mov	[ebp+var_38], eax
		lock inc dword ptr [eax]
		setnz	dl
		mov	eax, [ebp+var_38]
		test	byte ptr [eax+10h], 1
		jz	loc_6FFC7421

loc_6FFC6A2A:				; CODE XREF: _ZN16DBusMenuExporter15doUpdateActionsEv+141Dj
		mov	eax, [ebp+var_1C]
		mov	[ebp+var_34], eax
		lock inc dword ptr [eax]
		setnz	dl
		mov	eax, [ebp+var_34]
		test	byte ptr [eax+10h], 1
		jnz	short loc_6FFC6A5B
		mov	eax, [eax+4]
		mov	[ebp+var_98], 5
		mov	[esp+4], eax
		lea	eax, [ebp+var_34]
		mov	[esp], eax
		call	sub_6FFE5F80

loc_6FFC6A5B:				; CODE XREF: _ZN16DBusMenuExporter15doUpdateActionsEv+A1Dj
		mov	edx, [ebp+arg_0]
		lea	eax, [ebp+var_38]
		mov	[esp+8], eax
		lea	eax, [ebp+var_34]
		mov	[esp+4], eax
		mov	eax, [edx+8]
		mov	eax, [eax+8]
		mov	[ebp+var_98], 4
		mov	[esp], eax
		call	sub_6FFC8110
		mov	eax, [ebp+var_34]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jz	loc_6FFC7400

loc_6FFC6A95:				; CODE XREF: _ZN16DBusMenuExporter15doUpdateActionsEv+13FCj
		mov	eax, [ebp+var_38]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jnz	short loc_6FFC6ABE
		mov	eax, [ebp+var_38]
		mov	[ebp+var_98], 0Eh
		mov	[esp+4], eax
		lea	eax, [ebp+var_38]
		mov	[esp], eax
		call	sub_6FFE6F70

loc_6FFC6ABE:				; CODE XREF: _ZN16DBusMenuExporter15doUpdateActionsEv+9DCj
					; _ZN16DBusMenuExporter15doUpdateActionsEv+A80j ...
		mov	eax, [ebp+var_20]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jz	loc_6FFC73C6

loc_6FFC6ACF:				; CODE XREF: _ZN16DBusMenuExporter15doUpdateActionsEv+13C2j
		mov	eax, [ebp+var_1C]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jnz	loc_6FFC606A
		mov	eax, [ebp+var_1C]
		mov	[ebp+var_98], 0FFFFFFFFh
		mov	[esp+4], eax
		lea	eax, [ebp+var_1C]
		mov	[esp], eax
		call	sub_6FFE6340
		jmp	loc_6FFC606A
; ---------------------------------------------------------------------------

loc_6FFC6B01:				; CODE XREF: _ZN16DBusMenuExporter15doUpdateActionsEv+182j
					; _ZN16DBusMenuExporter15doUpdateActionsEv+1B9j ...
		mov	edx, [ebp+var_58]
		jmp	loc_6FFC6939
; ---------------------------------------------------------------------------

loc_6FFC6B09:				; CODE XREF: _ZN16DBusMenuExporter15doUpdateActionsEv+2D6j
		mov	eax, edx
		cmp	edx, eax
		mov	[ebp+var_110], ebx
		jnz	loc_6FFC6316

loc_6FFC6B19:				; CODE XREF: _ZN16DBusMenuExporter15doUpdateActionsEv+2B3j
					; _ZN16DBusMenuExporter15doUpdateActionsEv+2F0j
		mov	ecx, [ebp+var_118]
		mov	edx, [ecx+10h]
		mov	eax, [edx+0Ch]
		cmp	eax, [edx+18h]
		jge	loc_6FFC72C0

loc_6FFC6B2E:				; CODE XREF: _ZN16DBusMenuExporter15doUpdateActionsEv+1300j
					; _ZN16DBusMenuExporter15doUpdateActionsEv+130Fj ...
		mov	eax, [ebp+var_AC]
		mov	edx, [ebp+var_A8]
		mov	[ebp+var_3C], eax
		lock inc dword ptr [edx]
		setnz	al
		mov	ecx, [ebp+var_118]
		mov	dword ptr [esp+4], 4
		mov	eax, [ecx+10h]
		mov	[ebp+var_98], 3
		mov	[esp], eax
		call	ds:_ZN9QHashData12allocateNodeEi
		test	eax, eax
		mov	[ebp+var_144], eax
		jz	short loc_6FFC6BBB
		mov	ebx, [ebp+var_134]
		mov	[eax+8], ebx
		mov	eax, [ebp+var_3C]
		mov	edx, [ebp+var_144]
		mov	[edx+0Ch], eax
		lock inc dword ptr [eax+34h]
		setnz	dl
		mov	ecx, [ebp+var_144]
		mov	eax, [ecx+0Ch]
		test	byte ptr [eax+44h], 2
		jnz	short loc_6FFC6BBB
		mov	eax, [eax+34h]
		cmp	eax, 1
		jz	short loc_6FFC6BBB
		mov	eax, ecx
		add	eax, 0Ch
		mov	[esp], eax
		mov	[ebp+var_98], 2
		call	sub_6FFE3B80

loc_6FFC6BBB:				; CODE XREF: _ZN16DBusMenuExporter15doUpdateActionsEv+B4Fj
					; _ZN16DBusMenuExporter15doUpdateActionsEv+B7Aj ...
		mov	eax, [ebp+var_134]
		mov	ebx, [ebp+var_144]
		mov	[ebx+4], eax
		mov	edx, [ebp+var_110]
		mov	eax, [edx]
		mov	[ebx], eax
		mov	[edx], ebx
		mov	ecx, [ebp+var_118]
		add	ebx, 0Ch
		mov	eax, [ecx+10h]
		mov	[ebp+var_D0], ebx
		add	dword ptr [eax+0Ch], 1
		mov	eax, [ebp+var_3C]
		test	eax, eax
		jz	loc_6FFC631F
		lock dec dword ptr [eax+34h]
		setnz	dl
		test	dl, dl
		jnz	loc_6FFC631F
		mov	ebx, [ebp+var_3C]
		mov	[ebp+var_17C], ebx
		mov	eax, [ebx+4]
		cmp	ebx, eax
		jnz	short loc_6FFC6C50
		jmp	loc_6FFC729A
; ---------------------------------------------------------------------------
		align 10h

loc_6FFC6C20:				; CODE XREF: _ZN16DBusMenuExporter15doUpdateActionsEv+C4Dj
					; _ZN16DBusMenuExporter15doUpdateActionsEv+C65j
		mov	eax, [ebp+var_194]
		mov	[ebp+var_98], 0Dh
		add	eax, 8
		mov	[esp], eax
		call	ds:_ZN8QVariantD1Ev
		mov	ebx, [ebp+var_18C]
		cmp	[ebp+var_17C], ebx
		jz	loc_6FFC729A
		mov	eax, ebx

loc_6FFC6C50:				; CODE XREF: _ZN16DBusMenuExporter15doUpdateActionsEv+BF4j
		mov	edx, [eax+4]
		lea	ecx, [eax-1Ch]
		mov	[ebp+var_194], ecx
		mov	[ebp+var_18C], edx
		mov	edx, [eax-1Ch]
		lock dec dword ptr [edx]
		setnz	cl
		test	cl, cl
		jnz	short loc_6FFC6C20
		mov	eax, [eax-1Ch]
		mov	[ebp+var_98], 0Dh
		mov	[esp], eax
		call	ds:_ZN7QString4freeEPNS_4DataE
		jmp	short loc_6FFC6C20
; ---------------------------------------------------------------------------

loc_6FFC6C87:				; CODE XREF: _ZN16DBusMenuExporter15doUpdateActionsEv+272j
		mov	ebx, [ebp+var_118]
		mov	edx, [ebp+var_118]
		add	ebx, 10h
		mov	[ebp+var_110], ebx
		mov	eax, [edx+10h]
		mov	edx, eax
		jmp	loc_6FFC630E
; ---------------------------------------------------------------------------

loc_6FFC6CA6:				; CODE XREF: _ZN16DBusMenuExporter15doUpdateActionsEv+8E1j
		mov	edx, [ebp+var_2C]
		mov	[ebp+var_170], edx
		mov	ecx, [ebp+var_170]
		add	edx, 14h
		mov	eax, [ecx+0Ch]
		lea	eax, [edx+eax*4]
		mov	[ebp+var_F0], eax
		mov	eax, [ecx+8]
		lea	eax, [edx+eax*4]
		cmp	[ebp+var_F0], eax
		mov	[ebp+var_138], eax
		jnz	short loc_6FFC6CEE
		jmp	short loc_6FFC6D2A
; ---------------------------------------------------------------------------
		align 10h

loc_6FFC6CE0:				; CODE XREF: _ZN16DBusMenuExporter15doUpdateActionsEv+CE5j
		mov	eax, [ebp+var_F0]
		cmp	[ebp+var_138], eax
		jz	short loc_6FFC6D2A

loc_6FFC6CEE:				; CODE XREF: _ZN16DBusMenuExporter15doUpdateActionsEv+CB6j
					; _ZN16DBusMenuExporter15doUpdateActionsEv+D08j
		sub	[ebp+var_F0], 4
		mov	ebx, [ebp+var_F0]
		mov	eax, [ebx]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jnz	short loc_6FFC6CE0
		mov	eax, [ebx]
		mov	[ebp+var_98], 0Bh
		mov	[esp], eax
		call	ds:_ZN7QString4freeEPNS_4DataE
		mov	eax, [ebp+var_F0]
		cmp	[ebp+var_138], eax
		jnz	short loc_6FFC6CEE

loc_6FFC6D2A:				; CODE XREF: _ZN16DBusMenuExporter15doUpdateActionsEv+CB8j
					; _ZN16DBusMenuExporter15doUpdateActionsEv+CCCj
		mov	edx, [ebp+var_170]
		mov	[ebp+var_98], 0Bh
		mov	[esp], edx
		call	ds:_Z5qFreePv
		jmp	loc_6FFC6907
; ---------------------------------------------------------------------------

loc_6FFC6D48:				; CODE XREF: _ZN16DBusMenuExporter15doUpdateActionsEv+90Dj
		mov	eax, [ebp+var_24]
		mov	edx, eax
		mov	[ebp+var_120], eax
		mov	eax, [eax+4]
		cmp	edx, eax
		jnz	short loc_6FFC6D8A
		jmp	short loc_6FFC6DC1
; ---------------------------------------------------------------------------
		align 10h

loc_6FFC6D60:				; CODE XREF: _ZN16DBusMenuExporter15doUpdateActionsEv+D87j
					; _ZN16DBusMenuExporter15doUpdateActionsEv+D9Fj
		mov	eax, [ebp+var_108]
		mov	[ebp+var_98], 0Dh
		add	eax, 8
		mov	[esp], eax
		call	ds:_ZN8QVariantD1Ev
		mov	eax, [ebp+var_F8]
		cmp	[ebp+var_120], eax
		jz	short loc_6FFC6DC1

loc_6FFC6D8A:				; CODE XREF: _ZN16DBusMenuExporter15doUpdateActionsEv+D38j
		mov	ecx, [eax+4]
		lea	ebx, [eax-1Ch]
		mov	[ebp+var_108], ebx
		mov	[ebp+var_F8], ecx
		mov	edx, [eax-1Ch]
		lock dec dword ptr [edx]
		setnz	cl
		test	cl, cl
		jnz	short loc_6FFC6D60
		mov	eax, [eax-1Ch]
		mov	[ebp+var_98], 0Dh
		mov	[esp], eax
		call	ds:_ZN7QString4freeEPNS_4DataE
		jmp	short loc_6FFC6D60
; ---------------------------------------------------------------------------

loc_6FFC6DC1:				; CODE XREF: _ZN16DBusMenuExporter15doUpdateActionsEv+D3Aj
					; _ZN16DBusMenuExporter15doUpdateActionsEv+D68j
		mov	edx, [ebp+var_120]
		mov	dword ptr [esp+4], 1Ch
		mov	[ebp+var_98], 0Dh
		mov	[esp], edx
		call	ds:_ZN8QMapData16continueFreeDataEi
		jmp	loc_6FFC6933
; ---------------------------------------------------------------------------

loc_6FFC6DE7:				; CODE XREF: _ZN16DBusMenuExporter15doUpdateActionsEv+8F7j
		mov	ecx, [ebp+var_28]
		mov	eax, [ecx+4]
		mov	[ebp+var_124], ecx
		cmp	ecx, eax
		jnz	short loc_6FFC6E2C
		jmp	short loc_6FFC6E63
; ---------------------------------------------------------------------------
		align 10h

loc_6FFC6E00:				; CODE XREF: _ZN16DBusMenuExporter15doUpdateActionsEv+E29j
					; _ZN16DBusMenuExporter15doUpdateActionsEv+E41j
		mov	eax, [ebp+var_10C]
		mov	[ebp+var_98], 0Ch
		add	eax, 8
		mov	[esp], eax
		call	ds:_ZN8QVariantD1Ev
		mov	ecx, [ebp+var_FC]
		cmp	[ebp+var_124], ecx
		jz	short loc_6FFC6E63
		mov	eax, ecx

loc_6FFC6E2C:				; CODE XREF: _ZN16DBusMenuExporter15doUpdateActionsEv+DD5j
		mov	ebx, [eax+4]
		lea	edx, [eax-1Ch]
		mov	[ebp+var_10C], edx
		mov	[ebp+var_FC], ebx
		mov	edx, [eax-1Ch]
		lock dec dword ptr [edx]
		setnz	cl
		test	cl, cl
		jnz	short loc_6FFC6E00
		mov	eax, [eax-1Ch]
		mov	[ebp+var_98], 0Ch
		mov	[esp], eax
		call	ds:_ZN7QString4freeEPNS_4DataE
		jmp	short loc_6FFC6E00
; ---------------------------------------------------------------------------

loc_6FFC6E63:				; CODE XREF: _ZN16DBusMenuExporter15doUpdateActionsEv+DD7j
					; _ZN16DBusMenuExporter15doUpdateActionsEv+E08j
		mov	ebx, [ebp+var_124]
		mov	dword ptr [esp+4], 1Ch
		mov	[ebp+var_98], 0Ch
		mov	[esp], ebx
		call	ds:_ZN8QMapData16continueFreeDataEi
		jmp	loc_6FFC691D
; ---------------------------------------------------------------------------

loc_6FFC6E89:				; CODE XREF: _ZN16DBusMenuExporter15doUpdateActionsEv+8D0j
		mov	ebx, [ebp+var_48]
		mov	eax, [ebx+0Ch]
		mov	edx, ebx
		add	edx, 14h
		mov	[ebp+var_174], ebx
		lea	eax, [edx+eax*4]
		mov	[ebp+var_F4], eax
		mov	eax, [ebx+8]
		lea	eax, [edx+eax*4]
		cmp	[ebp+var_F4], eax
		mov	[ebp+var_140], eax
		jnz	short loc_6FFC6ECE
		jmp	short loc_6FFC6F10
; ---------------------------------------------------------------------------
		align 10h

loc_6FFC6EC0:				; CODE XREF: _ZN16DBusMenuExporter15doUpdateActionsEv+EC5j
		mov	ebx, [ebp+var_F4]
		cmp	[ebp+var_140], ebx
		jz	short loc_6FFC6F10

loc_6FFC6ECE:				; CODE XREF: _ZN16DBusMenuExporter15doUpdateActionsEv+E95j
					; _ZN16DBusMenuExporter15doUpdateActionsEv+EEEj
		sub	[ebp+var_F4], 4
		mov	edx, [ebp+var_F4]
		mov	eax, [edx]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jnz	short loc_6FFC6EC0
		mov	ecx, [ebp+var_F4]
		mov	eax, [ecx]
		mov	[ebp+var_98], 0Ah
		mov	[esp], eax
		call	ds:_ZN7QString4freeEPNS_4DataE
		mov	ebx, [ebp+var_F4]
		cmp	[ebp+var_140], ebx
		jnz	short loc_6FFC6ECE

loc_6FFC6F10:				; CODE XREF: _ZN16DBusMenuExporter15doUpdateActionsEv+E97j
					; _ZN16DBusMenuExporter15doUpdateActionsEv+EACj
		mov	eax, [ebp+var_174]
		mov	[ebp+var_98], 0Ah
		mov	[esp], eax
		call	ds:_Z5qFreePv
		jmp	loc_6FFC68F6
; ---------------------------------------------------------------------------

loc_6FFC6F2E:				; CODE XREF: _ZN16DBusMenuExporter15doUpdateActionsEv+7F7j
		mov	[esp], edx
		mov	[ebp+var_98], 0Ah
		call	sub_6FFE3B80
		jmp	loc_6FFC681D
; ---------------------------------------------------------------------------

loc_6FFC6F45:				; CODE XREF: _ZN16DBusMenuExporter15doUpdateActionsEv+83Ej
		mov	ebx, [ebp+var_AC]
		mov	edx, [ebp+var_A8]
		mov	[ebp+var_40], ebx
		lock inc dword ptr [edx]
		setnz	al
		mov	ebx, [ebp+var_28]
		mov	ecx, [ebp+var_114]
		cmp	[ebp+var_40], ebx
		mov	[ebp+var_150], ebx
		mov	[ebp+var_44], ecx
		jz	short loc_6FFC6F9D
		lock inc dword ptr [ebx+34h]
		setnz	al
		mov	eax, [ebp+var_40]
		lock dec dword ptr [eax+34h]
		setnz	dl
		test	dl, dl
		jz	loc_6FFC71FF

loc_6FFC6F8A:				; CODE XREF: _ZN16DBusMenuExporter15doUpdateActionsEv+1275j
		mov	ecx, [ebp+var_150]
		mov	[ebp+var_40], ecx
		test	byte ptr [ecx+44h], 2
		jz	loc_6FFC71E5

loc_6FFC6F9D:				; CODE XREF: _ZN16DBusMenuExporter15doUpdateActionsEv+F4Fj
					; _ZN16DBusMenuExporter15doUpdateActionsEv+11DAj
		lea	eax, [ebp+var_44]
		mov	[esp+4], eax
		lea	eax, [ebp+var_1C]
		mov	[esp], eax
		mov	[ebp+var_98], 7
		call	sub_6FFE6420
		mov	eax, [ebp+var_40]
		test	eax, eax
		jz	loc_6FFC6864
		lock dec dword ptr [eax+34h]
		setnz	dl
		test	dl, dl
		jnz	loc_6FFC6864
		mov	ebx, [ebp+var_40]
		mov	[ebp+var_15C], ebx
		mov	eax, [ebx+4]
		cmp	ebx, eax
		jnz	short loc_6FFC7018
		jmp	loc_6FFC71BF
; ---------------------------------------------------------------------------

loc_6FFC6FE8:				; CODE XREF: _ZN16DBusMenuExporter15doUpdateActionsEv+1015j
					; _ZN16DBusMenuExporter15doUpdateActionsEv+102Dj
		mov	eax, [ebp+var_180]
		mov	[ebp+var_98], 0Ah
		add	eax, 8
		mov	[esp], eax
		call	ds:_ZN8QVariantD1Ev
		mov	ebx, [ebp+var_154]
		cmp	[ebp+var_15C], ebx
		jz	loc_6FFC71BF
		mov	eax, ebx

loc_6FFC7018:				; CODE XREF: _ZN16DBusMenuExporter15doUpdateActionsEv+FC1j
		mov	edx, [eax+4]
		lea	ecx, [eax-1Ch]
		mov	[ebp+var_180], ecx
		mov	[ebp+var_154], edx
		mov	edx, [eax-1Ch]
		lock dec dword ptr [edx]
		setnz	cl
		test	cl, cl
		jnz	short loc_6FFC6FE8
		mov	eax, [eax-1Ch]
		mov	[ebp+var_98], 0Ah
		mov	[esp], eax
		call	ds:_ZN7QString4freeEPNS_4DataE
		jmp	short loc_6FFC6FE8
; ---------------------------------------------------------------------------

loc_6FFC704F:				; CODE XREF: _ZN16DBusMenuExporter15doUpdateActionsEv+7DFj
		mov	ebx, [ecx]
		mov	eax, [ebx+4]
		mov	[ebp+var_13C], ebx
		cmp	ebx, eax
		jnz	short loc_6FFC708C
		jmp	short loc_6FFC70C3
; ---------------------------------------------------------------------------

loc_6FFC7060:				; CODE XREF: _ZN16DBusMenuExporter15doUpdateActionsEv+1089j
					; _ZN16DBusMenuExporter15doUpdateActionsEv+10A1j
		mov	eax, [ebp+var_12C]
		mov	[ebp+var_98], 0Ah
		add	eax, 8
		mov	[esp], eax
		call	ds:_ZN8QVariantD1Ev
		mov	ebx, [ebp+var_104]
		cmp	[ebp+var_13C], ebx
		jz	short loc_6FFC70C3
		mov	eax, ebx

loc_6FFC708C:				; CODE XREF: _ZN16DBusMenuExporter15doUpdateActionsEv+103Cj
		mov	edx, [eax+4]
		lea	ecx, [eax-1Ch]
		mov	[ebp+var_12C], ecx
		mov	[ebp+var_104], edx
		mov	edx, [eax-1Ch]
		lock dec dword ptr [edx]
		setnz	cl
		test	cl, cl
		jnz	short loc_6FFC7060
		mov	eax, [eax-1Ch]
		mov	[ebp+var_98], 0Ah
		mov	[esp], eax
		call	ds:_ZN7QString4freeEPNS_4DataE
		jmp	short loc_6FFC7060
; ---------------------------------------------------------------------------

loc_6FFC70C3:				; CODE XREF: _ZN16DBusMenuExporter15doUpdateActionsEv+103Ej
					; _ZN16DBusMenuExporter15doUpdateActionsEv+1068j
		mov	eax, [ebp+var_13C]
		mov	dword ptr [esp+4], 1Ch
		mov	[ebp+var_98], 0Ah
		mov	[esp], eax
		call	ds:_ZN8QMapData16continueFreeDataEi
		jmp	loc_6FFC6805
; ---------------------------------------------------------------------------

loc_6FFC70E9:				; CODE XREF: _ZN16DBusMenuExporter15doUpdateActionsEv+246j
		mov	dword ptr [esp+4], offset sub_6FFE4CC0
		mov	eax, [ecx+10h]
		mov	[esp], eax
		call	ds:_ZN9QHashData11free_helperEPFvPNS_4NodeEE
		jmp	loc_6FFC626C
; ---------------------------------------------------------------------------

loc_6FFC7102:				; CODE XREF: _ZN16DBusMenuExporter15doUpdateActionsEv+8A3j
		mov	eax, [ecx+4]
		mov	[ebp+var_98], 6
		mov	[esp+4], eax
		lea	eax, [ebp+var_48]
		mov	[esp], eax
		call	sub_6FFE8C20
		jmp	loc_6FFC68C9
; ---------------------------------------------------------------------------

loc_6FFC7123:				; CODE XREF: _ZN16DBusMenuExporter15doUpdateActionsEv+890j
		mov	edx, [ebp+var_48]
		mov	[ebp+var_178], edx
		mov	ecx, [ebp+var_178]
		add	edx, 14h
		mov	eax, [ecx+0Ch]
		lea	eax, [edx+eax*4]
		mov	[ebp+var_100], eax
		mov	eax, [ecx+8]
		lea	eax, [edx+eax*4]
		cmp	[ebp+var_100], eax
		mov	[ebp+var_14C], eax
		jnz	short loc_6FFC7165
		jmp	short loc_6FFC71A1
; ---------------------------------------------------------------------------

loc_6FFC7157:				; CODE XREF: _ZN16DBusMenuExporter15doUpdateActionsEv+115Cj
		mov	eax, [ebp+var_100]
		cmp	[ebp+var_14C], eax
		jz	short loc_6FFC71A1

loc_6FFC7165:				; CODE XREF: _ZN16DBusMenuExporter15doUpdateActionsEv+1133j
					; _ZN16DBusMenuExporter15doUpdateActionsEv+117Fj
		sub	[ebp+var_100], 4
		mov	ebx, [ebp+var_100]
		mov	eax, [ebx]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jnz	short loc_6FFC7157
		mov	eax, [ebx]
		mov	[ebp+var_98], 6
		mov	[esp], eax
		call	ds:_ZN7QString4freeEPNS_4DataE
		mov	eax, [ebp+var_100]
		cmp	[ebp+var_14C], eax
		jnz	short loc_6FFC7165

loc_6FFC71A1:				; CODE XREF: _ZN16DBusMenuExporter15doUpdateActionsEv+1135j
					; _ZN16DBusMenuExporter15doUpdateActionsEv+1143j
		mov	edx, [ebp+var_178]
		mov	[ebp+var_98], 6
		mov	[esp], edx
		call	ds:_Z5qFreePv
		jmp	loc_6FFC68B6
; ---------------------------------------------------------------------------

loc_6FFC71BF:				; CODE XREF: _ZN16DBusMenuExporter15doUpdateActionsEv+FC3j
					; _ZN16DBusMenuExporter15doUpdateActionsEv+FF0j
		mov	eax, [ebp+var_15C]
		mov	dword ptr [esp+4], 1Ch
		mov	[ebp+var_98], 0Ah
		mov	[esp], eax
		call	ds:_ZN8QMapData16continueFreeDataEi
		jmp	loc_6FFC6864
; ---------------------------------------------------------------------------

loc_6FFC71E5:				; CODE XREF: _ZN16DBusMenuExporter15doUpdateActionsEv+F77j
		lea	eax, [ebp+var_40]
		mov	[esp], eax
		mov	[ebp+var_98], 7
		call	sub_6FFE3B80
		jmp	loc_6FFC6F9D
; ---------------------------------------------------------------------------

loc_6FFC71FF:				; CODE XREF: _ZN16DBusMenuExporter15doUpdateActionsEv+F64j
		mov	eax, [ebp+var_40]
		mov	edx, eax
		mov	[ebp+var_160], eax
		mov	eax, [eax+4]
		cmp	edx, eax
		jnz	short loc_6FFC723D
		jmp	short loc_6FFC7274
; ---------------------------------------------------------------------------

loc_6FFC7213:				; CODE XREF: _ZN16DBusMenuExporter15doUpdateActionsEv+123Aj
					; _ZN16DBusMenuExporter15doUpdateActionsEv+1252j
		mov	eax, [ebp+var_184]
		mov	[ebp+var_98], 7
		add	eax, 8
		mov	[esp], eax
		call	ds:_ZN8QVariantD1Ev
		mov	eax, [ebp+var_158]
		cmp	[ebp+var_160], eax
		jz	short loc_6FFC7274

loc_6FFC723D:				; CODE XREF: _ZN16DBusMenuExporter15doUpdateActionsEv+11EFj
		mov	ecx, [eax+4]
		lea	ebx, [eax-1Ch]
		mov	[ebp+var_184], ebx
		mov	[ebp+var_158], ecx
		mov	edx, [eax-1Ch]
		lock dec dword ptr [edx]
		setnz	cl
		test	cl, cl
		jnz	short loc_6FFC7213
		mov	eax, [eax-1Ch]
		mov	[ebp+var_98], 7
		mov	[esp], eax
		call	ds:_ZN7QString4freeEPNS_4DataE
		jmp	short loc_6FFC7213
; ---------------------------------------------------------------------------

loc_6FFC7274:				; CODE XREF: _ZN16DBusMenuExporter15doUpdateActionsEv+11F1j
					; _ZN16DBusMenuExporter15doUpdateActionsEv+121Bj
		mov	edx, [ebp+var_160]
		mov	dword ptr [esp+4], 1Ch
		mov	[ebp+var_98], 7
		mov	[esp], edx
		call	ds:_ZN8QMapData16continueFreeDataEi
		jmp	loc_6FFC6F8A
; ---------------------------------------------------------------------------

loc_6FFC729A:				; CODE XREF: _ZN16DBusMenuExporter15doUpdateActionsEv+BF6j
					; _ZN16DBusMenuExporter15doUpdateActionsEv+C28j
		mov	eax, [ebp+var_17C]
		mov	dword ptr [esp+4], 1Ch
		mov	[ebp+var_98], 0Dh
		mov	[esp], eax
		call	ds:_ZN8QMapData16continueFreeDataEi
		jmp	loc_6FFC631F
; ---------------------------------------------------------------------------

loc_6FFC72C0:				; CODE XREF: _ZN16DBusMenuExporter15doUpdateActionsEv+B08j
		movsx	eax, word ptr [edx+16h]
		mov	[esp], edx
		mov	[ebp+var_98], 0Dh
		add	eax, 1
		mov	[esp+4], eax
		call	ds:_ZN9QHashData6rehashEi
		mov	ebx, [ebp+var_118]
		mov	ecx, [ebx+10h]
		mov	esi, [ecx+18h]
		test	esi, esi
		jz	short loc_6FFC7350
		mov	eax, [ebp+var_164]
		xor	edx, edx
		div	esi
		mov	eax, [ecx+4]
		lea	ebx, [eax+edx*4]
		mov	[ebp+var_110], ebx
		mov	eax, [ebx]
		cmp	eax, ecx
		jz	short loc_6FFC7313
		cmp	dword ptr [eax], 0
		jz	loc_6FFC7398

loc_6FFC7313:				; CODE XREF: _ZN16DBusMenuExporter15doUpdateActionsEv+12E8j
					; _ZN16DBusMenuExporter15doUpdateActionsEv+13A1j
		mov	ecx, [ebp+var_118]
		mov	edx, [ecx+10h]
		cmp	eax, edx
		jnz	short loc_6FFC7335
		jmp	loc_6FFC6B2E
; ---------------------------------------------------------------------------

loc_6FFC7325:				; CODE XREF: _ZN16DBusMenuExporter15doUpdateActionsEv+131Ej
					; _ZN16DBusMenuExporter15doUpdateActionsEv+1329j
		mov	[ebp+var_110], eax
		mov	eax, [eax]
		cmp	eax, edx
		jz	loc_6FFC6B2E

loc_6FFC7335:				; CODE XREF: _ZN16DBusMenuExporter15doUpdateActionsEv+12FEj
		mov	ebx, [ebp+var_164]
		cmp	ebx, [eax+4]
		jnz	short loc_6FFC7325
		mov	ecx, [ebp+var_134]
		cmp	ecx, [eax+8]
		jnz	short loc_6FFC7325
		jmp	loc_6FFC6B2E
; ---------------------------------------------------------------------------

loc_6FFC7350:				; CODE XREF: _ZN16DBusMenuExporter15doUpdateActionsEv+12CCj
		mov	ebx, [ebp+var_118]
		add	ebx, 10h
		mov	[ebp+var_110], ebx
		jmp	loc_6FFC6B2E
; ---------------------------------------------------------------------------

loc_6FFC7364:				; CODE XREF: _ZN16DBusMenuExporter15doUpdateActionsEv+2A2j
		mov	dword ptr [esp+8], 376h
		mov	dword ptr [esp+4], offset aRIncludeQtco_0 ; "R:/include/QtCore/qhash.h"
		mov	dword ptr [esp], offset	aNodeENodeNext ; "*node	== e ||	(*node)->next"
		mov	[ebp+var_98], 0Dh
		call	ds:_Z9qt_assertPKcS0_i
		mov	edx, [ebp+var_110]
		mov	eax, [edx]
		jmp	loc_6FFC62C8
; ---------------------------------------------------------------------------

loc_6FFC7398:				; CODE XREF: _ZN16DBusMenuExporter15doUpdateActionsEv+12EDj
		mov	dword ptr [esp+8], 376h
		mov	dword ptr [esp+4], offset aRIncludeQtco_0 ; "R:/include/QtCore/qhash.h"
		mov	dword ptr [esp], offset	aNodeENodeNext ; "*node	== e ||	(*node)->next"
		mov	[ebp+var_98], 0Dh
		call	ds:_Z9qt_assertPKcS0_i
		mov	eax, [ebx]
		jmp	loc_6FFC7313
; ---------------------------------------------------------------------------

loc_6FFC73C6:				; CODE XREF: _ZN16DBusMenuExporter15doUpdateActionsEv+AA9j
		mov	eax, [ebp+var_20]
		mov	[ebp+var_98], 0Fh
		mov	[esp+4], eax
		lea	eax, [ebp+var_20]
		mov	[esp], eax
		call	sub_6FFE6F70
		jmp	loc_6FFC6ACF
; ---------------------------------------------------------------------------

loc_6FFC73E7:				; CODE XREF: _ZN16DBusMenuExporter15doUpdateActionsEv+EAj
		mov	eax, [ebp+var_5C]
		mov	dword ptr [esp+4], offset nullsub_1
		mov	[esp], eax
		call	ds:_ZN9QHashData11free_helperEPFvPNS_4NodeEE
		jmp	loc_6FFC6110
; ---------------------------------------------------------------------------

loc_6FFC7400:				; CODE XREF: _ZN16DBusMenuExporter15doUpdateActionsEv+A6Fj
		mov	eax, [ebp+var_34]
		mov	[ebp+var_98], 5
		mov	[esp+4], eax
		lea	eax, [ebp+var_34]
		mov	[esp], eax
		call	sub_6FFE6340
		jmp	loc_6FFC6A95
; ---------------------------------------------------------------------------

loc_6FFC7421:				; CODE XREF: _ZN16DBusMenuExporter15doUpdateActionsEv+A04j
		mov	eax, [eax+4]
		mov	[ebp+var_98], 0Eh
		mov	[esp+4], eax
		lea	eax, [ebp+var_38]
		mov	[esp], eax
		call	sub_6FFE6BF0
		jmp	loc_6FFC6A2A
; ---------------------------------------------------------------------------

loc_6FFC7442:				; CODE XREF: _ZN16DBusMenuExporter15doUpdateActionsEv+9EBj
		mov	eax, [ebp+var_20]
		mov	edx, [eax+0Ch]
		cmp	edx, [eax+8]
		jnz	loc_6FFC6A11
		jmp	loc_6FFC6ABE
; ---------------------------------------------------------------------------

loc_6FFC7456:				; CODE XREF: _ZN16DBusMenuExporter15doUpdateActionsEv+9CCj
		mov	ecx, [ebp+var_A0]
		mov	dword ptr [esp+4], offset nullsub_1
		mov	[ebp+var_98], 0Eh
		mov	[esp], ecx
		call	ds:_ZN9QHashData11free_helperEPFvPNS_4NodeEE
		jmp	loc_6FFC69F2
; ---------------------------------------------------------------------------

loc_6FFC747C:				; CODE XREF: _ZN16DBusMenuExporter15doUpdateActionsEv+9B7j
		mov	dword ptr [esp+10h], 4
		mov	dword ptr [esp+0Ch], 8
		mov	dword ptr [esp+8], offset nullsub_1
		mov	dword ptr [esp+4], offset nullsub_2
		mov	[esp], ebx
		mov	[ebp+var_98], 1
		call	ds:_ZN9QHashData14detach_helper2EPFvPNS_4NodeEPvEPFvS1_Eii
		mov	edx, [ebp+var_148]
		mov	[ebp+var_190], eax
		mov	eax, [edx+28h]
		lock dec dword ptr [eax+8]
		setnz	dl
		test	dl, dl
		jz	loc_6FFC7727

loc_6FFC74CD:				; CODE XREF: _ZN16DBusMenuExporter15doUpdateActionsEv+1721j
		mov	eax, [ebp+var_190]
		mov	ebx, [ebp+var_148]
		mov	[ebx+28h], eax
		jmp	loc_6FFC69DD
; ---------------------------------------------------------------------------

loc_6FFC74E1:				; CODE XREF: _ZN16DBusMenuExporter15doUpdateActionsEv+999j
		mov	dword ptr [esp+4], offset nullsub_1
		mov	eax, [ebx+28h]
		mov	[ebp+var_98], 1
		mov	[esp], eax
		call	ds:_ZN9QHashData11free_helperEPFvPNS_4NodeEE
		jmp	loc_6FFC69BF
; ---------------------------------------------------------------------------

loc_6FFC7504:				; DATA XREF: _ZN16DBusMenuExporter15doUpdateActionsEv+2Co
		add	ebp, 18h
		mov	eax, [ebp+var_98]
		mov	ecx, [ebp+var_94]
		cmp	eax, 1
		mov	[ebp+var_16C], ecx
		jz	loc_6FFC761E
		cmp	eax, 2
		jz	loc_6FFC761E
		cmp	eax, 3
		jz	loc_6FFC76CE
		cmp	eax, 4
		jz	loc_6FFC76E3
		cmp	eax, 5
		jz	loc_6FFC76B7
		cmp	eax, 6
		jz	loc_6FFC764A
		cmp	eax, 7
		jz	loc_6FFC76A0
		cmp	eax, 8
		nop
		lea	esi, [esi+0]
		jz	loc_6FFC76A0
		cmp	eax, 9
		jz	loc_6FFC765F
		cmp	eax, 0Ah
		jz	loc_6FFC7674
		cmp	eax, 0Bh
		nop
		lea	esi, [esi+0]
		jz	loc_6FFC7689
		cmp	eax, 0Ch
		jz	loc_6FFC7633
		cmp	eax, 0Dh
		jz	short loc_6FFC75DC
		cmp	eax, 0Eh
		jz	short loc_6FFC75F1
		mov	[ebp+var_168], ecx
		mov	ebx, [ebp+var_A4]
		lock dec dword ptr [ebx]
		setnz	al
		test	al, al
		jnz	short loc_6FFC75D0
		mov	eax, [ebp+var_A0]
		mov	dword ptr [esp+4], offset nullsub_1
		mov	[ebp+var_98], 0
		mov	[esp], eax
		call	ds:_ZN9QHashData11free_helperEPFvPNS_4NodeEE

loc_6FFC75D0:				; CODE XREF: _ZN16DBusMenuExporter15doUpdateActionsEv+158Dj
		mov	edx, [ebp+var_168]
		mov	[ebp+var_16C], edx

loc_6FFC75DC:				; CODE XREF: _ZN16DBusMenuExporter15doUpdateActionsEv+1572j
					; _ZN16DBusMenuExporter15doUpdateActionsEv+1628j ...
		lea	eax, [ebp+var_20]
		mov	[esp], eax
		mov	[ebp+var_98], 0
		call	sub_6FFE7710

loc_6FFC75F1:				; CODE XREF: _ZN16DBusMenuExporter15doUpdateActionsEv+1577j
		lea	eax, [ebp+var_1C]
		mov	[esp], eax
		mov	[ebp+var_98], 0
		call	sub_6FFE6AF0
		mov	ecx, [ebp+var_16C]
		mov	[ebp+var_98], 0FFFFFFFFh
		mov	[esp], ecx
		call	_Unwind_SjLj_Resume
; ---------------------------------------------------------------------------

loc_6FFC761E:				; CODE XREF: _ZN16DBusMenuExporter15doUpdateActionsEv+14FCj
					; _ZN16DBusMenuExporter15doUpdateActionsEv+1505j
		lea	eax, [ebp+var_3C]
		mov	[esp], eax
		mov	[ebp+var_98], 0
		call	sub_6FFE4290

loc_6FFC7633:				; CODE XREF: _ZN16DBusMenuExporter15doUpdateActionsEv+1569j
					; _ZN16DBusMenuExporter15doUpdateActionsEv+167Ej
		lea	eax, [ebp+var_5C]
		mov	[esp], eax
		mov	[ebp+var_98], 0
		call	sub_6FFE4A20
		jmp	short loc_6FFC75DC
; ---------------------------------------------------------------------------

loc_6FFC764A:				; CODE XREF: _ZN16DBusMenuExporter15doUpdateActionsEv+1529j
		lea	eax, [ebp+var_40]
		mov	[esp], eax
		mov	[ebp+var_98], 0
		call	sub_6FFE4290

loc_6FFC765F:				; CODE XREF: _ZN16DBusMenuExporter15doUpdateActionsEv+1549j
					; _ZN16DBusMenuExporter15doUpdateActionsEv+1695j ...
		lea	eax, [ebp+var_2C]
		mov	[esp], eax
		mov	[ebp+var_98], 0
		call	sub_6FFDF990

loc_6FFC7674:				; CODE XREF: _ZN16DBusMenuExporter15doUpdateActionsEv+1552j
		lea	eax, [ebp+var_28]
		mov	[esp], eax
		mov	[ebp+var_98], 0
		call	sub_6FFE4290

loc_6FFC7689:				; CODE XREF: _ZN16DBusMenuExporter15doUpdateActionsEv+1560j
		lea	eax, [ebp+var_24]
		mov	[esp], eax
		mov	[ebp+var_98], 0
		call	sub_6FFE4290
		jmp	short loc_6FFC7633
; ---------------------------------------------------------------------------

loc_6FFC76A0:				; CODE XREF: _ZN16DBusMenuExporter15doUpdateActionsEv+1532j
					; _ZN16DBusMenuExporter15doUpdateActionsEv+1540j
		lea	eax, [ebp+var_30]
		mov	[esp], eax
		mov	[ebp+var_98], 0
		call	sub_6FFEA140
		jmp	short loc_6FFC765F
; ---------------------------------------------------------------------------

loc_6FFC76B7:				; CODE XREF: _ZN16DBusMenuExporter15doUpdateActionsEv+1520j
		lea	eax, [ebp+var_48]
		mov	[esp], eax
		mov	[ebp+var_98], 0
		call	sub_6FFDF990
		jmp	short loc_6FFC765F
; ---------------------------------------------------------------------------

loc_6FFC76CE:				; CODE XREF: _ZN16DBusMenuExporter15doUpdateActionsEv+150Ej
		lea	eax, [ebp+var_34]
		mov	[esp], eax
		mov	[ebp+var_98], 0
		call	sub_6FFE6AF0

loc_6FFC76E3:				; CODE XREF: _ZN16DBusMenuExporter15doUpdateActionsEv+1517j
		lea	eax, [ebp+var_38]
		mov	[esp], eax
		mov	[ebp+var_98], 0
		call	sub_6FFE7710
		jmp	loc_6FFC75DC
; ---------------------------------------------------------------------------

loc_6FFC76FD:				; CODE XREF: _ZN16DBusMenuExporter15doUpdateActionsEv+112j
		mov	eax, ebx
		jmp	loc_6FFC613F
; ---------------------------------------------------------------------------

loc_6FFC7704:				; CODE XREF: _ZN16DBusMenuExporter15doUpdateActionsEv+94Ej
		mov	eax, [ebp+var_5C]
		mov	dword ptr [esp+4], offset nullsub_1
		mov	[ebp+var_98], 0Eh
		mov	[esp], eax
		call	ds:_ZN9QHashData11free_helperEPFvPNS_4NodeEE
		jmp	loc_6FFC6974
; ---------------------------------------------------------------------------

loc_6FFC7727:				; CODE XREF: _ZN16DBusMenuExporter15doUpdateActionsEv+14A7j
		mov	ecx, [ebp+var_148]
		mov	dword ptr [esp+4], offset nullsub_1
		mov	eax, [ecx+28h]
		mov	[esp], eax
		call	ds:_ZN9QHashData11free_helperEPFvPNS_4NodeEE
		jmp	loc_6FFC74CD
_ZN16DBusMenuExporter15doUpdateActionsEv endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry   7. _ZN16DBusMenuExporter18qt_static_metacallEP7QObjectN11QMetaObject4CallEiPPv

; =============== S U B	R O U T	I N E =======================================


		public _ZN16DBusMenuExporter18qt_static_metacallEP7QObjectN11QMetaObject4CallEiPPv
_ZN16DBusMenuExporter18qt_static_metacallEP7QObjectN11QMetaObject4CallEiPPv proc near
					; CODE XREF: _ZN16DBusMenuExporter11qt_metacallEN11QMetaObject4CallEiPPv+6Cp
					; DATA XREF: .rdata:6FFF3820o

var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		sub	esp, 1Ch
		mov	eax, [esp+1Ch+arg_4]
		mov	[esp+1Ch+var_C], ebx
		mov	ebx, [esp+1Ch+arg_8]
		mov	[esp+1Ch+var_8], esi
		mov	esi, [esp+1Ch+arg_0]
		mov	[esp+1Ch+var_4], edi
		mov	edi, [esp+1Ch+arg_C]
		test	eax, eax
		jz	short loc_6FFC7783

loc_6FFC7773:				; CODE XREF: _ZN16DBusMenuExporter18qt_static_metacallEP7QObjectN11QMetaObject4CallEiPPv+54j
		mov	ebx, [esp+1Ch+var_C]
		mov	esi, [esp+1Ch+var_8]
		mov	edi, [esp+1Ch+var_4]
		add	esp, 1Ch
		retn
; ---------------------------------------------------------------------------

loc_6FFC7783:				; CODE XREF: _ZN16DBusMenuExporter18qt_static_metacallEP7QObjectN11QMetaObject4CallEiPPv+21j
		mov	[esp+1Ch+var_18], esi
		mov	[esp+1Ch+var_1C], offset _ZN16DBusMenuExporter16staticMetaObjectE
		call	ds:_ZNK11QMetaObject4castEP7QObject
		test	eax, eax
		jz	short loc_6FFC7800

loc_6FFC7798:				; CODE XREF: _ZN16DBusMenuExporter18qt_static_metacallEP7QObjectN11QMetaObject4CallEiPPv+CDj
		cmp	ebx, 1
		jz	short loc_6FFC77E4
		cmp	ebx, 2
		jz	short loc_6FFC77C0
		test	ebx, ebx
		jnz	short loc_6FFC7773
		mov	[esp+1Ch+arg_0], esi
		mov	ebx, [esp+1Ch+var_C]
		mov	esi, [esp+1Ch+var_8]
		mov	edi, [esp+1Ch+var_4]
		add	esp, 1Ch
		jmp	_ZN16DBusMenuExporter15doUpdateActionsEv
; ---------------------------------------------------------------------------
		align 10h

loc_6FFC77C0:				; CODE XREF: _ZN16DBusMenuExporter18qt_static_metacallEP7QObjectN11QMetaObject4CallEiPPv+50j
		mov	eax, [edi+4]
		mov	ebx, [esp+1Ch+var_C]
		mov	edi, [esp+1Ch+var_4]
		mov	eax, [eax]
		mov	[esp+1Ch+arg_4], eax
		mov	eax, [esi+8]
		mov	esi, [esp+1Ch+var_8]
		mov	[esp+1Ch+arg_0], eax
		add	esp, 1Ch
		jmp	sub_6FFC4020
; ---------------------------------------------------------------------------

loc_6FFC77E4:				; CODE XREF: _ZN16DBusMenuExporter18qt_static_metacallEP7QObjectN11QMetaObject4CallEiPPv+4Bj
		mov	[esp+1Ch+arg_0], esi
		mov	ebx, [esp+1Ch+var_C]
		mov	esi, [esp+1Ch+var_8]
		mov	edi, [esp+1Ch+var_4]
		add	esp, 1Ch
		jmp	_ZN16DBusMenuExporter19doEmitLayoutUpdatedEv
; ---------------------------------------------------------------------------
		align 10h

loc_6FFC7800:				; CODE XREF: _ZN16DBusMenuExporter18qt_static_metacallEP7QObjectN11QMetaObject4CallEiPPv+46j
		mov	[esp+1Ch+var_14], 32h
		mov	[esp+1Ch+var_18], offset aRBuildKdesuppo ; "R:/build/kdesupport/dbusmenu-qt-0.9.2/w"...
		mov	[esp+1Ch+var_1C], offset aStaticmetaobje ; "staticMetaObject.cast(_o)"
		call	ds:_Z9qt_assertPKcS0_i
		jmp	loc_6FFC7798
_ZN16DBusMenuExporter18qt_static_metacallEP7QObjectN11QMetaObject4CallEiPPv endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry   1. _ZN16DBusMenuExporter11qt_metacallEN11QMetaObject4CallEiPPv

; =============== S U B	R O U T	I N E =======================================


		public _ZN16DBusMenuExporter11qt_metacallEN11QMetaObject4CallEiPPv
_ZN16DBusMenuExporter11qt_metacallEN11QMetaObject4CallEiPPv proc near
					; DATA XREF: .rdata:6FFF9D70o

var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		sub	esp, 2Ch
		mov	[esp+2Ch+var_C], ebx
		mov	eax, [esp+2Ch+arg_8]
		mov	[esp+2Ch+var_8], esi
		mov	ebx, [esp+2Ch+arg_4]
		mov	[esp+2Ch+var_4], edi
		mov	esi, [esp+2Ch+arg_0]
		mov	edi, [esp+2Ch+arg_C]
		mov	[esp+2Ch+var_24], eax
		mov	[esp+2Ch+var_28], ebx
		mov	[esp+2Ch+var_2C], esi
		mov	[esp+2Ch+var_20], edi
		call	ds:__imp__ZN7QObject11qt_metacallEN11QMetaObject4CallEiPPv
		test	eax, eax
		js	short loc_6FFC7875
		test	ebx, ebx
		jnz	short loc_6FFC7875
		cmp	eax, 2
		nop
		jle	short loc_6FFC7885

loc_6FFC7872:				; CODE XREF: _ZN16DBusMenuExporter11qt_metacallEN11QMetaObject4CallEiPPv+75j
		sub	eax, 3

loc_6FFC7875:				; CODE XREF: _ZN16DBusMenuExporter11qt_metacallEN11QMetaObject4CallEiPPv+36j
					; _ZN16DBusMenuExporter11qt_metacallEN11QMetaObject4CallEiPPv+3Aj
		mov	ebx, [esp+2Ch+var_C]
		mov	esi, [esp+2Ch+var_8]
		mov	edi, [esp+2Ch+var_4]
		add	esp, 2Ch
		retn
; ---------------------------------------------------------------------------

loc_6FFC7885:				; CODE XREF: _ZN16DBusMenuExporter11qt_metacallEN11QMetaObject4CallEiPPv+40j
		mov	[esp+2Ch+var_24], eax
		mov	[esp+2Ch+var_10], eax
		mov	[esp+2Ch+var_20], edi
		mov	[esp+2Ch+var_28], 0
		mov	[esp+2Ch+var_2C], esi
		call	_ZN16DBusMenuExporter18qt_static_metacallEP7QObjectN11QMetaObject4CallEiPPv
		mov	eax, [esp+2Ch+var_10]
		jmp	short loc_6FFC7872
_ZN16DBusMenuExporter11qt_metacallEN11QMetaObject4CallEiPPv endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_6FFC78B0	proc near		; CODE XREF: sub_6FFC78B0+526p
					; sub_6FFCB050+164p

var_E8		= dword	ptr -0E8h
var_E4		= dword	ptr -0E4h
var_E0		= dword	ptr -0E0h
var_DC		= dword	ptr -0DCh
var_D8		= dword	ptr -0D8h
var_D4		= dword	ptr -0D4h
var_D0		= dword	ptr -0D0h
var_CC		= dword	ptr -0CCh
var_C8		= dword	ptr -0C8h
var_C4		= dword	ptr -0C4h
var_C0		= dword	ptr -0C0h
var_BC		= dword	ptr -0BCh
var_B8		= dword	ptr -0B8h
var_B4		= dword	ptr -0B4h
var_B0		= dword	ptr -0B0h
var_AC		= dword	ptr -0ACh
var_A8		= dword	ptr -0A8h
var_A4		= dword	ptr -0A4h
var_A0		= dword	ptr -0A0h
var_9C		= dword	ptr -9Ch
var_98		= dword	ptr -98h
var_94		= dword	ptr -94h
var_90		= dword	ptr -90h
var_8C		= dword	ptr -8Ch
var_88		= dword	ptr -88h
var_84		= dword	ptr -84h
var_80		= dword	ptr -80h
var_7C		= byte ptr -7Ch
var_78		= dword	ptr -78h
var_64		= dword	ptr -64h
var_60		= dword	ptr -60h
var_5C		= dword	ptr -5Ch
var_58		= dword	ptr -58h
var_54		= dword	ptr -54h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= byte ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= byte ptr -18h
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h
arg_10		= dword	ptr  18h
arg_14		= dword	ptr  1Ch

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		lea	eax, [ebp+var_18]
		sub	esp, 10Ch
		mov	[ebp+var_5C], eax
		lea	eax, [ebp+var_7C]
		mov	[esp], eax
		mov	[ebp+var_54], esp
		mov	[ebp+var_64], offset sub_6FFEC1F0
		mov	[ebp+var_60], offset dword_6FFECB34
		mov	[ebp+var_58], offset sub_6FFC7F61
		call	_Unwind_SjLj_Register
		mov	ecx, [ebp+arg_C]
		lea	eax, [ebp+var_1C]
		mov	edx, [ebp+arg_4]
		mov	[edx], ecx
		mov	edx, [ebp+arg_14]
		mov	[esp+8], ecx
		mov	ecx, [ebp+arg_0]
		mov	[esp+0Ch], edx
		mov	edx, [ecx+8]
		mov	[esp], eax
		mov	[ebp+var_78], 0FFFFFFFFh
		mov	[esp+4], edx
		call	sub_6FFC88E0
		mov	edx, [ebp+arg_4]
		mov	ecx, [ebp+var_1C]
		mov	eax, [edx+4]
		mov	[ebp+var_D8], ecx
		sub	esp, 4
		cmp	eax, ecx
		jz	short loc_6FFC795C
		lock inc dword ptr [ecx+34h]
		setnz	al
		mov	eax, [edx+4]
		lock dec dword ptr [eax+34h]
		setnz	dl
		test	dl, dl
		jz	loc_6FFC7C78

loc_6FFC7943:				; CODE XREF: sub_6FFC78B0+45Bj
		mov	ecx, [ebp+var_D8]
		mov	edx, [ebp+arg_4]
		mov	[edx+4], ecx
		test	byte ptr [ecx+44h], 2
		jz	loc_6FFC7C5E

loc_6FFC7959:				; CODE XREF: sub_6FFC78B0+3C3j
		mov	eax, [ebp+var_1C]

loc_6FFC795C:				; CODE XREF: sub_6FFC78B0+78j
		test	eax, eax
		jz	short loc_6FFC796F
		lock dec dword ptr [eax+34h]
		setnz	dl
		test	dl, dl
		jz	loc_6FFC7BC6

loc_6FFC796F:				; CODE XREF: sub_6FFC78B0+AEj
					; sub_6FFC78B0+3A9j
		mov	esi, [ebp+arg_10]
		test	esi, esi
		jnz	short loc_6FFC7989

loc_6FFC7976:				; CODE XREF: sub_6FFC78B0+DEj
					; sub_6FFC78B0+2F8j ...
		lea	eax, [ebp+var_7C]
		mov	[esp], eax
		call	_Unwind_SjLj_Unregister
		lea	esp, [ebp-0Ch]
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_6FFC7989:				; CODE XREF: sub_6FFC78B0+C4j
		mov	ebx, [ebp+arg_8]
		test	ebx, ebx
		jz	short loc_6FFC7976
		mov	ecx, [ebp+arg_8]
		lea	eax, [ebp+var_20]
		mov	[esp], eax
		mov	[ebp+var_78], 0FFFFFFFFh
		mov	[esp+4], ecx
		call	ds:_ZNK7QWidget7actionsEv
		mov	eax, [ebp+var_20]
		mov	[ebp+var_44], eax
		sub	esp, 4
		lock inc dword ptr [eax]
		setnz	dl
		mov	eax, [ebp+var_44]
		test	byte ptr [eax+10h], 1
		jnz	short loc_6FFC79D4
		lea	eax, [ebp+var_44]
		mov	[esp], eax
		mov	[ebp+var_78], 6
		call	sub_6FFE9D10

loc_6FFC79D4:				; CODE XREF: sub_6FFC78B0+110j
		mov	eax, [ebp+var_44]
		mov	[ebp+var_40], 0
		mov	edx, [eax+8]
		lea	edx, [eax+edx*4+14h]
		mov	[ebp+var_3C], edx
		mov	edx, [eax+0Ch]
		lea	eax, [eax+edx*4+14h]
		mov	[ebp+var_38], eax
		mov	eax, [ebp+var_20]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jz	loc_6FFC7F49

loc_6FFC7A03:				; CODE XREF: sub_6FFC78B0+6ACj
		mov	ecx, [ebp+var_40]
		test	ecx, ecx
		jnz	loc_6FFC7B9D
		mov	edx, [ebp+var_3C]
		cmp	edx, [ebp+var_38]
		jz	loc_6FFC7B9D
		mov	eax, [ebp+arg_0]
		mov	ecx, ds:_ZN8QMapData11shared_nullE
		add	eax, 18h
		mov	[ebp+var_E0], eax
		mov	eax, ds:_ZN9QListData11shared_nullE
		mov	[ebp+var_8C], ecx
		add	ecx, 34h
		mov	[ebp+var_88], ecx
		mov	ecx, [ebp+arg_4]
		mov	[ebp+var_94], eax
		mov	[ebp+var_90], eax
		mov	eax, ds:_ZN7QString11shared_nullE
		add	ecx, 8
		mov	[ebp+var_C8], ecx
		mov	[ebp+var_80], eax
		mov	[ebp+var_84], eax
		jmp	short loc_6FFC7A71
; ---------------------------------------------------------------------------

loc_6FFC7A68:				; CODE XREF: sub_6FFC78B0+2E7j
		cmp	edx, [ebp+var_38]
		jz	loc_6FFC7B9D

loc_6FFC7A71:				; CODE XREF: sub_6FFC78B0+1B6j
		mov	ecx, [ebp+arg_0]
		mov	ebx, [edx]
		mov	edi, [ecx+18h]
		mov	edx, [edi+3Ch]
		test	edx, edx
		jnz	loc_6FFC7D10

loc_6FFC7A84:				; CODE XREF: sub_6FFC78B0+465j
					; sub_6FFC78B0+490j ...
		mov	dword ptr [esp], 18h ; size_t
		mov	[ebp+var_78], 5
		call	sub_6FFEAE70
		mov	[ebp+var_B4], eax
		lea	eax, [ebp+var_28]
		mov	edx, [ebp+var_B4]
		mov	[esp+8], eax
		mov	eax, [ebp+var_B4]
		mov	[ebp+var_28], 2
		mov	[ebp+var_78], 2
		mov	[esp], edx
		add	eax, 8
		mov	[esp+4], eax
		call	ds:_ZN11QTextStreamC1EP7QString6QFlagsIN9QIODevice12OpenModeFlagEE
		mov	eax, [ebp+var_80]
		mov	ecx, [ebp+var_B4]
		mov	edx, [ebp+var_84]
		mov	[ecx+8], eax
		lock inc dword ptr [edx]
		setnz	al
		mov	dword ptr [ecx+0Ch], 1
		lea	eax, [ebp+var_24]
		mov	dword ptr [ecx+10h], 1
		mov	byte ptr [ecx+15h], 1
		mov	byte ptr [ecx+14h], 0
		mov	[ebp+var_24], ecx
		mov	dword ptr [esp+4], offset a31m ; "\x1B[31m"
		mov	[esp], eax
		mov	[ebp+var_78], 4
		call	sub_6FFE9FF0
		mov	dword ptr [esp+4], offset aVoidDbusmenu_1 ; "void DBusMenuExporterPrivate::fillLayou"...
		mov	[esp], eax
		mov	[ebp+var_78], 4
		call	sub_6FFE9FF0
		mov	dword ptr [esp+4], offset a0m ;	"\x1B[0m:"
		mov	[esp], eax
		call	sub_6FFE9FF0
		mov	edx, eax
		mov	[ebp+var_C4], eax
		mov	eax, [eax]
		mov	byte ptr [eax+14h], 1
		mov	dword ptr [esp+4], 20h
		mov	eax, [edx]
		mov	[esp], eax
		call	ds:_ZN11QTextStreamlsEc
		mov	ecx, [ebp+var_C4]
		mov	dword ptr [esp+4], offset aNoIdForAction ; "No id for action"
		mov	[esp], ecx
		call	sub_6FFE9FF0
		lea	eax, [ebp+var_24]
		mov	[esp], eax
		mov	[ebp+var_78], 5
		call	sub_6FFE9DD0

loc_6FFC7B89:				; CODE XREF: sub_6FFC78B0+556j
					; sub_6FFC78B0+565j ...
		mov	edx, [ebp+var_3C]
		mov	eax, [ebp+var_40]
		add	edx, 4
		test	eax, eax
		mov	[ebp+var_3C], edx
		jz	loc_6FFC7A68

loc_6FFC7B9D:				; CODE XREF: sub_6FFC78B0+158j
					; sub_6FFC78B0+164j ...
		mov	eax, [ebp+var_44]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jnz	loc_6FFC7976
		mov	eax, [ebp+var_44]
		mov	[ebp+var_78], 0FFFFFFFFh
		mov	[esp], eax
		call	ds:_Z5qFreePv
		jmp	loc_6FFC7976
; ---------------------------------------------------------------------------

loc_6FFC7BC6:				; CODE XREF: sub_6FFC78B0+B9j
		mov	edx, [ebp+var_1C]
		mov	eax, [edx+4]
		mov	[ebp+var_E4], edx
		cmp	edx, eax
		jz	short loc_6FFC7C3B
		mov	ecx, ds:_ZN8QVariantD1Ev
		mov	[ebp+var_98], ecx

loc_6FFC7BE2:				; CODE XREF: sub_6FFC78B0+389j
		mov	edx, [eax+4]
		lea	ecx, [eax-1Ch]
		mov	[ebp+var_D4], ecx
		mov	[ebp+var_CC], edx
		mov	edx, [eax-1Ch]
		lock dec dword ptr [edx]
		setnz	cl
		test	cl, cl
		jnz	short loc_6FFC7C14
		mov	eax, [eax-1Ch]
		mov	[ebp+var_78], 0FFFFFFFFh
		mov	[esp], eax
		call	ds:_ZN7QString4freeEPNS_4DataE

loc_6FFC7C14:				; CODE XREF: sub_6FFC78B0+34Fj
		mov	eax, [ebp+var_D4]
		mov	[ebp+var_78], 0FFFFFFFFh
		add	eax, 8
		mov	[esp], eax
		call	[ebp+var_98]
		mov	eax, [ebp+var_CC]
		cmp	[ebp+var_E4], eax
		jnz	short loc_6FFC7BE2

loc_6FFC7C3B:				; CODE XREF: sub_6FFC78B0+324j
		mov	edx, [ebp+var_E4]
		mov	dword ptr [esp+4], 1Ch
		mov	[ebp+var_78], 0FFFFFFFFh
		mov	[esp], edx
		call	ds:_ZN8QMapData16continueFreeDataEi
		jmp	loc_6FFC796F
; ---------------------------------------------------------------------------

loc_6FFC7C5E:				; CODE XREF: sub_6FFC78B0+A3j
		mov	eax, [ebp+arg_4]
		mov	[ebp+var_78], 7
		add	eax, 4
		mov	[esp], eax
		call	sub_6FFE3B80
		jmp	loc_6FFC7959
; ---------------------------------------------------------------------------

loc_6FFC7C78:				; CODE XREF: sub_6FFC78B0+8Dj
		mov	eax, [ebp+arg_4]
		mov	eax, [eax+4]
		mov	edx, eax
		mov	[ebp+var_E8], eax
		mov	eax, [eax+4]
		cmp	edx, eax
		jnz	short loc_6FFC7CB9
		jmp	short loc_6FFC7CED
; ---------------------------------------------------------------------------
		align 10h

loc_6FFC7C90:				; CODE XREF: sub_6FFC78B0+426j
					; sub_6FFC78B0+43Bj
		mov	eax, [ebp+var_DC]
		mov	[ebp+var_78], 7
		add	eax, 8
		mov	[esp], eax
		call	ds:_ZN8QVariantD1Ev
		mov	ecx, [ebp+var_D0]
		cmp	[ebp+var_E8], ecx
		jz	short loc_6FFC7CED
		mov	eax, ecx

loc_6FFC7CB9:				; CODE XREF: sub_6FFC78B0+3DBj
		mov	ecx, [eax+4]
		lea	edx, [eax-1Ch]
		mov	[ebp+var_DC], edx
		mov	edx, [eax-1Ch]
		mov	[ebp+var_D0], ecx
		lock dec dword ptr [edx]
		setnz	cl
		test	cl, cl
		jnz	short loc_6FFC7C90
		mov	eax, [eax-1Ch]
		mov	[ebp+var_78], 7
		mov	[esp], eax
		call	ds:_ZN7QString4freeEPNS_4DataE
		jmp	short loc_6FFC7C90
; ---------------------------------------------------------------------------

loc_6FFC7CED:				; CODE XREF: sub_6FFC78B0+3DDj
					; sub_6FFC78B0+405j
		mov	eax, [ebp+var_E8]
		mov	dword ptr [esp+4], 1Ch
		mov	[ebp+var_78], 7
		mov	[esp], eax
		call	ds:_ZN8QMapData16continueFreeDataEi
		jmp	loc_6FFC7943
; ---------------------------------------------------------------------------

loc_6FFC7D10:				; CODE XREF: sub_6FFC78B0+1CEj
		mov	edx, [edi+38h]
		test	edx, edx
		js	loc_6FFC7A84
		mov	ecx, [ebp+var_E0]
		mov	esi, [ecx]
		mov	ecx, edi

loc_6FFC7D25:				; CODE XREF: sub_6FFC78B0+48Cj
					; sub_6FFC78B0+5E2j
		mov	eax, [ecx+edx*4+4]
		cmp	eax, esi
		jz	short loc_6FFC7D36
		cmp	ebx, [eax-8]
		ja	loc_6FFC7E90

loc_6FFC7D36:				; CODE XREF: sub_6FFC78B0+47Bj
		sub	edx, 1
		cmp	edx, 0FFFFFFFFh
		jnz	short loc_6FFC7D25
		cmp	edi, eax
		jz	loc_6FFC7A84
		cmp	ebx, [eax-8]
		lea	edx, [eax-8]
		jb	loc_6FFC7A84
		mov	edx, [edx+4]
		cmp	edx, 0FFFFFFFFh
		mov	[ebp+var_B8], edx
		jz	loc_6FFC7A84
		mov	eax, [ebp+var_8C]
		mov	edx, [ebp+var_88]
		mov	[ebp+var_30], eax
		lock inc dword ptr [edx]
		setnz	al
		mov	ecx, [ebp+var_94]
		mov	edx, [ebp+var_90]
		mov	[ebp+var_2C], ecx
		lock inc dword ptr [edx]
		setnz	al
		mov	ecx, [ebp+arg_10]
		mov	[esp], ebx
		mov	[ebp+var_78], 3
		sub	ecx, 1
		mov	[ebp+var_BC], ecx
		call	ds:_ZNK7QAction4menuEv
		mov	edx, [ebp+arg_14]
		mov	ecx, [ebp+var_BC]
		mov	[esp+8], eax
		lea	eax, [ebp+var_34]
		mov	[esp+4], eax
		mov	[esp+14h], edx
		mov	edx, [ebp+var_B8]
		mov	[esp+10h], ecx
		mov	ecx, [ebp+arg_0]
		mov	[esp+0Ch], edx
		mov	[esp], ecx
		call	sub_6FFC78B0
		lea	eax, [ebp+var_34]
		mov	[esp+4], eax
		mov	eax, [ebp+var_C8]
		mov	[esp], eax
		call	sub_6FFE8250
		mov	eax, [ebp+var_2C]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jz	loc_6FFC7E97

loc_6FFC7E01:				; CODE XREF: sub_6FFC78B0+671j
		mov	eax, [ebp+var_30]
		test	eax, eax
		jz	loc_6FFC7B89
		lock dec dword ptr [eax+34h]
		setnz	dl
		test	dl, dl
		jnz	loc_6FFC7B89
		mov	ecx, [ebp+var_30]
		mov	eax, [ecx+4]
		mov	[ebp+var_AC], ecx
		cmp	ecx, eax
		jnz	short loc_6FFC7E5B
		jmp	loc_6FFC7F26
; ---------------------------------------------------------------------------

loc_6FFC7E30:				; CODE XREF: sub_6FFC78B0+5C8j
					; sub_6FFC78B0+5DDj
		mov	eax, [ebp+var_A8]
		mov	[ebp+var_78], 5
		add	eax, 8
		mov	[esp], eax
		call	ds:_ZN8QVariantD1Ev
		mov	eax, [ebp+var_A4]
		cmp	[ebp+var_AC], eax
		jz	loc_6FFC7F26

loc_6FFC7E5B:				; CODE XREF: sub_6FFC78B0+579j
		mov	edx, [eax+4]
		lea	ecx, [eax-1Ch]
		mov	[ebp+var_A8], ecx
		mov	[ebp+var_A4], edx
		mov	edx, [eax-1Ch]
		lock dec dword ptr [edx]
		setnz	cl
		test	cl, cl
		jnz	short loc_6FFC7E30
		mov	eax, [eax-1Ch]
		mov	[ebp+var_78], 5
		mov	[esp], eax
		call	ds:_ZN7QString4freeEPNS_4DataE
		jmp	short loc_6FFC7E30
; ---------------------------------------------------------------------------
		align 10h

loc_6FFC7E90:				; CODE XREF: sub_6FFC78B0+480j
		mov	ecx, eax
		jmp	loc_6FFC7D25
; ---------------------------------------------------------------------------

loc_6FFC7E97:				; CODE XREF: sub_6FFC78B0+54Bj
		mov	edx, [ebp+var_2C]
		mov	eax, edx
		mov	ecx, edx
		mov	[ebp+var_C0], edx
		mov	edx, [edx+0Ch]
		add	eax, 14h
		lea	edx, [eax+edx*4]
		mov	[ebp+var_9C], edx
		mov	edx, [ecx+8]
		lea	edx, [eax+edx*4]
		cmp	[ebp+var_9C], edx
		mov	[ebp+var_B0], edx
		jz	short loc_6FFC7F0B

loc_6FFC7EC7:				; CODE XREF: sub_6FFC78B0+659j
		sub	[ebp+var_9C], 4
		mov	eax, [ebp+var_9C]
		mov	eax, [eax]
		test	eax, eax
		mov	[ebp+var_A0], eax
		jz	short loc_6FFC7EFD
		mov	[esp], eax
		mov	[ebp+var_78], 1
		call	sub_6FFDFBB0
		mov	edx, [ebp+var_A0]
		mov	[esp], edx
		call	sub_6FFEAE50

loc_6FFC7EFD:				; CODE XREF: sub_6FFC78B0+62Ej
		mov	ecx, [ebp+var_9C]
		cmp	[ebp+var_B0], ecx
		jnz	short loc_6FFC7EC7

loc_6FFC7F0B:				; CODE XREF: sub_6FFC78B0+615j
		mov	eax, [ebp+var_C0]
		mov	[ebp+var_78], 1
		mov	[esp], eax
		call	ds:_Z5qFreePv
		jmp	loc_6FFC7E01
; ---------------------------------------------------------------------------

loc_6FFC7F26:				; CODE XREF: sub_6FFC78B0+57Bj
					; sub_6FFC78B0+5A5j
		mov	edx, [ebp+var_AC]
		mov	dword ptr [esp+4], 1Ch
		mov	[ebp+var_78], 5
		mov	[esp], edx
		call	ds:_ZN8QMapData16continueFreeDataEi
		jmp	loc_6FFC7B89
; ---------------------------------------------------------------------------

loc_6FFC7F49:				; CODE XREF: sub_6FFC78B0+14Dj
		mov	eax, [ebp+var_20]
		mov	[ebp+var_78], 5
		mov	[esp], eax
		call	ds:_Z5qFreePv
		jmp	loc_6FFC7A03
sub_6FFC78B0	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn

sub_6FFC7F61	proc near		; DATA XREF: sub_6FFC78B0+29o
		add	ebp, 18h
		mov	eax, [ebp-78h]
		mov	edx, [ebp-74h]
		cmp	eax, 1
		mov	[ebp-0ECh], edx
		jz	short loc_6FFC7FF3
		cmp	eax, 2
		jz	short loc_6FFC7FDF
		cmp	eax, 3
		jz	short loc_6FFC7FCB
		cmp	eax, 4
		jz	short loc_6FFC7FA4
		cmp	eax, 5
		jz	loc_6FFC802A
		cmp	eax, 6
		jz	short loc_6FFC8003
		lea	eax, [ebp-30h]
		mov	[esp+0], eax
		mov	dword ptr [ebp-78h], 0
		call	sub_6FFE4290

loc_6FFC7FA4:				; CODE XREF: sub_6FFC7F61+21j
					; sub_6FFC7F61+7Cj ...
		lea	eax, [ebp-44h]
		mov	[esp+0], eax
		mov	dword ptr [ebp-78h], 0
		call	sub_6FFE9DA0
		mov	eax, [ebp-0ECh]
		mov	dword ptr [ebp-78h], 0FFFFFFFFh
		mov	[esp+0], eax
		call	_Unwind_SjLj_Resume
; ---------------------------------------------------------------------------

loc_6FFC7FCB:				; CODE XREF: sub_6FFC7F61+1Cj
		lea	eax, [ebp-24h]
		mov	[esp+0], eax
		mov	dword ptr [ebp-78h], 0
		call	sub_6FFE9DD0
		jmp	short loc_6FFC7FA4
; ---------------------------------------------------------------------------

loc_6FFC7FDF:				; CODE XREF: sub_6FFC7F61+17j
		lea	eax, [ebp-34h]
		mov	[esp+0], eax
		mov	dword ptr [ebp-78h], 0
		call	sub_6FFDFBB0
		jmp	short loc_6FFC7FA4
; ---------------------------------------------------------------------------

loc_6FFC7FF3:				; CODE XREF: sub_6FFC7F61+12j
		mov	ecx, [ebp-0B4h]
		mov	[esp+0], ecx
		call	sub_6FFEAE50
		jmp	short loc_6FFC7FA4
; ---------------------------------------------------------------------------

loc_6FFC8003:				; CODE XREF: sub_6FFC7F61+2Fj
		lea	eax, [ebp-1Ch]
		mov	[esp+0], eax
		mov	dword ptr [ebp-78h], 0
		call	sub_6FFE4290
		mov	eax, [ebp-0ECh]
		mov	dword ptr [ebp-78h], 0FFFFFFFFh
		mov	[esp+0], eax
		call	_Unwind_SjLj_Resume
; ---------------------------------------------------------------------------

loc_6FFC802A:				; CODE XREF: sub_6FFC7F61+26j
		lea	eax, [ebp-20h]
		mov	[esp+0], eax
		mov	dword ptr [ebp-78h], 0
		call	sub_6FFE9DA0
		mov	edx, [ebp-0ECh]
		mov	dword ptr [ebp-78h], 0FFFFFFFFh
		mov	[esp+0], edx
		call	_Unwind_SjLj_Resume
sub_6FFC7F61	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6FFC8060	proc near		; DATA XREF: .text:6FFEC80Co
		mov	eax, ds:_ZN7QObject16staticMetaObjectE
		mov	dword_6FFEE020,	eax
		retn
sub_6FFC8060	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6FFC8070	proc near		; CODE XREF: _ZN16DBusMenuExporter14activateActionEP7QAction+ABp
					; sub_6FFCB780+213p

var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
arg_0		= dword	ptr  4
arg_4		= byte ptr  8
arg_8		= byte ptr  0Ch

		sub	esp, 2Ch
		lea	eax, [esp+2Ch+arg_4]
		mov	[esp+2Ch+var_14], eax
		lea	eax, [esp+2Ch+arg_8]
		mov	[esp+2Ch+var_10], eax
		lea	eax, [esp+2Ch+var_18]
		mov	[esp+2Ch+var_20], eax
		mov	eax, [esp+2Ch+arg_0]
		mov	[esp+2Ch+var_18], 0
		mov	[esp+2Ch+var_24], 2
		mov	[esp+2Ch+var_28], offset dword_6FFEE020
		mov	[esp+2Ch+var_2C], eax
		call	ds:_ZN11QMetaObject8activateEP7QObjectPKS_iPPv
		add	esp, 2Ch
		retn
sub_6FFC8070	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6FFC80C0	proc near		; CODE XREF: _ZN16DBusMenuExporter19doEmitLayoutUpdatedEv+2A8p
					; _ZN16DBusMenuExporter19doEmitLayoutUpdatedEv+323p ...

var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
arg_0		= dword	ptr  4
arg_4		= byte ptr  8
arg_8		= byte ptr  0Ch

		sub	esp, 2Ch
		lea	eax, [esp+2Ch+arg_4]
		mov	[esp+2Ch+var_14], eax
		lea	eax, [esp+2Ch+arg_8]
		mov	[esp+2Ch+var_10], eax
		lea	eax, [esp+2Ch+var_18]
		mov	[esp+2Ch+var_20], eax
		mov	eax, [esp+2Ch+arg_0]
		mov	[esp+2Ch+var_18], 0
		mov	[esp+2Ch+var_24], 1
		mov	[esp+2Ch+var_28], offset dword_6FFEE020
		mov	[esp+2Ch+var_2C], eax
		call	ds:_ZN11QMetaObject8activateEP7QObjectPKS_iPPv
		add	esp, 2Ch
		retn
sub_6FFC80C0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6FFC8110	proc near		; CODE XREF: _ZN16DBusMenuExporter15doUpdateActionsEv+A5Fp
					; sub_6FFCB780+2BCp

var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		sub	esp, 2Ch
		mov	eax, [esp+2Ch+arg_4]
		mov	[esp+2Ch+var_18], 0
		mov	[esp+2Ch+var_24], 0
		mov	[esp+2Ch+var_28], offset dword_6FFEE020
		mov	[esp+2Ch+var_14], eax
		mov	eax, [esp+2Ch+arg_8]
		mov	[esp+2Ch+var_10], eax
		lea	eax, [esp+2Ch+var_18]
		mov	[esp+2Ch+var_20], eax
		mov	eax, [esp+2Ch+arg_0]
		mov	[esp+2Ch+var_2C], eax
		call	ds:_ZN11QMetaObject8activateEP7QObjectPKS_iPPv
		add	esp, 2Ch
		retn
sub_6FFC8110	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6FFC8160	proc near		; DATA XREF: .rdata:6FFF9E2Co

var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		sub	esp, 1Ch
		xor	eax, eax
		mov	edx, [esp+1Ch+arg_4]
		mov	[esp+1Ch+var_4], ebp
		mov	ebp, [esp+1Ch+arg_0]
		mov	[esp+1Ch+var_10], ebx
		mov	[esp+1Ch+var_C], esi
		test	edx, edx
		mov	[esp+1Ch+var_8], edi
		jz	short loc_6FFC819F
		mov	ecx, 15h
		mov	esi, edx
		mov	edi, offset aDbusmenuexpo_0 ; "DBusMenuExporterDBus"
		repe cmpsb
		setnbe	al
		setb	cl
		mov	esi, eax
		mov	eax, ebp
		mov	ebx, esi
		cmp	bl, cl
		jnz	short loc_6FFC81B3

loc_6FFC819F:				; CODE XREF: sub_6FFC8160+1Fj
		mov	ebx, [esp+1Ch+var_10]
		mov	esi, [esp+1Ch+var_C]
		mov	edi, [esp+1Ch+var_8]
		mov	ebp, [esp+1Ch+var_4]
		add	esp, 1Ch
		retn
; ---------------------------------------------------------------------------

loc_6FFC81B3:				; CODE XREF: sub_6FFC8160+3Dj
		mov	eax, ds:__imp__ZN7QObject11qt_metacastEPKc
		mov	ebx, [esp+1Ch+var_10]
		mov	esi, [esp+1Ch+var_C]
		mov	edi, [esp+1Ch+var_8]
		mov	ebp, [esp+1Ch+var_4]
		add	esp, 1Ch
		jmp	eax
sub_6FFC8160	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6FFC81D0	proc near		; DATA XREF: .rdata:off_6FFF9E28o

var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
arg_0		= dword	ptr  4

		push	ebx
		sub	esp, 18h
		mov	ebx, [esp+1Ch+arg_0]
		mov	eax, [ebx+4]
		test	eax, eax
		jz	short loc_6FFC8200

loc_6FFC81DF:				; CODE XREF: sub_6FFC81D0+50j
		mov	eax, [eax+18h]
		test	eax, eax
		jz	short loc_6FFC81F0
		add	esp, 18h
		pop	ebx
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6FFC81F0:				; CODE XREF: sub_6FFC81D0+14j
		mov	eax, offset dword_6FFEE020
		add	esp, 18h
		pop	ebx
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6FFC8200:				; CODE XREF: sub_6FFC81D0+Dj
		mov	[esp+1Ch+var_14], 70h
		mov	[esp+1Ch+var_18], offset aRIncludeQtc_11 ; "R:/include/QtCore/qscopedpointer.h"
		mov	[esp+1Ch+var_1C], offset aD_2 ;	"d"
		call	ds:_Z9qt_assertPKcS0_i
		mov	eax, [ebx+4]
		jmp	short loc_6FFC81DF
sub_6FFC81D0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6FFC8230	proc near		; CODE XREF: _ZNK16DBusMenuExporter6statusEv+19p
					; sub_6FFCBCE0+FAp

var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_10		= dword	ptr -10h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		sub	esp, 2Ch
		mov	ecx, [esp+2Ch+arg_4]
		mov	eax, [esp+2Ch+arg_0]
		mov	edx, [ecx+0Ch]
		add	ecx, 0Ch
		cmp	eax, ecx
		mov	[eax], edx
		jz	short loc_6FFC8253

loc_6FFC8247:				; CODE XREF: sub_6FFC8230+4Aj
		lock inc dword ptr [edx]
		setnz	cl
		add	esp, 2Ch
		retn	4
; ---------------------------------------------------------------------------

loc_6FFC8253:				; CODE XREF: sub_6FFC8230+15j
		mov	[esp+2Ch+var_10], eax
		mov	[esp+2Ch+var_24], 2D6h
		mov	[esp+2Ch+var_28], offset aRIncludeQtco_2 ; "R:/include/QtCore/qstring.h"
		mov	[esp+2Ch+var_2C], offset aOtherThis_0 ;	"&other	!= this"
		call	ds:_Z9qt_assertPKcS0_i
		mov	eax, [esp+2Ch+var_10]
		mov	edx, [eax]
		jmp	short loc_6FFC8247
sub_6FFC8230	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_6FFC8280	proc near		; CODE XREF: _ZN16DBusMenuExporterC1ERK7QStringP5QMenuRK15QDBusConnection+18Ap
					; _ZN16DBusMenuExporterC2ERK7QStringP5QMenuRK15QDBusConnection+18Ap

var_40		= dword	ptr -40h
var_3C		= byte ptr -3Ch
var_38		= dword	ptr -38h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_8		= byte ptr -8
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 58h
		lea	eax, [ebp+var_8]
		mov	[ebp+var_1C], eax
		lea	eax, [ebp+var_3C]
		mov	[esp], eax
		mov	[ebp+var_24], offset sub_6FFEC1F0
		mov	[ebp+var_20], offset dword_6FFECB48
		mov	[ebp+var_18], offset sub_6FFC833B
		mov	[ebp+var_14], esp
		call	_Unwind_SjLj_Register
		mov	edx, [ebp+arg_4]
		mov	eax, [ebp+arg_0]
		mov	[ebp+var_38], 0FFFFFFFFh
		mov	[esp+4], edx
		mov	[esp], eax
		call	ds:_ZN7QObjectC2EPS_
		mov	edx, [ebp+arg_0]
		mov	eax, [ebp+arg_4]
		mov	dword ptr [edx], offset	off_6FFF9E28
		mov	[edx+8], eax
		mov	dword ptr [esp+4], 0FFFFFFFFh
		mov	dword ptr [esp], offset	aNormal	; "normal"
		mov	[ebp+var_38], 3
		call	ds:_ZN7QString16fromAscii_helperEPKci
		mov	edx, [ebp+arg_0]
		mov	[edx+0Ch], eax
		mov	[ebp+var_38], 2
		call	sub_6FFD2F30
		mov	dword ptr [esp], 8 ; size_t
		call	sub_6FFEAE70
		mov	[ebp+var_40], eax
		mov	eax, [ebp+arg_0]
		mov	edx, [ebp+var_40]
		mov	[ebp+var_38], 1
		mov	[esp+4], eax
		mov	[esp], edx
		call	sub_6FFD5820
		lea	eax, [ebp+var_3C]
		mov	[esp], eax
		call	_Unwind_SjLj_Unregister
		leave
		retn
sub_6FFC8280	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn

sub_6FFC833B	proc near		; DATA XREF: sub_6FFC8280+20o
		add	ebp, 8
		mov	eax, [ebp-38h]
		mov	edx, [ebp-34h]
		cmp	eax, 1
		mov	[ebp-44h], edx
		jz	short loc_6FFC835C
		cmp	eax, 2
		jz	short loc_6FFC8371
		mov	eax, [ebp-40h]
		mov	[esp+0], eax
		call	sub_6FFEAE50

loc_6FFC835C:				; CODE XREF: sub_6FFC833B+Fj
		mov	eax, [ebp+8]
		mov	dword ptr [ebp-38h], 0
		add	eax, 0Ch
		mov	[esp+0], eax
		call	sub_6FFEA140

loc_6FFC8371:				; CODE XREF: sub_6FFC833B+14j
		mov	edx, [ebp+8]
		mov	dword ptr [ebp-38h], 0
		mov	[esp+0], edx
		call	ds:_ZN7QObjectD2Ev
		mov	eax, [ebp-44h]
		mov	dword ptr [ebp-38h], 0FFFFFFFFh
		mov	[esp+0], eax
		call	_Unwind_SjLj_Resume
sub_6FFC833B	endp

; ---------------------------------------------------------------------------
		align 10h
		push	ebp
		mov	ebp, esp
		sub	esp, 58h
		lea	eax, [ebp-8]
		mov	[ebp-1Ch], eax
		lea	eax, [ebp-3Ch]
		mov	[esp], eax
		mov	dword ptr [ebp-24h], offset sub_6FFEC1F0
		mov	dword ptr [ebp-20h], offset word_6FFECB52
		mov	dword ptr [ebp-18h], offset loc_6FFC845B
		mov	[ebp-14h], esp
		call	_Unwind_SjLj_Register
		mov	edx, [ebp+0Ch]
		mov	eax, [ebp+8]
		mov	dword ptr [ebp-38h], 0FFFFFFFFh
		mov	[esp+4], edx
		mov	[esp], eax
		call	ds:_ZN7QObjectC2EPS_
		mov	edx, [ebp+8]
		mov	eax, [ebp+0Ch]
		mov	dword ptr [edx], offset	off_6FFF9E28
		mov	[edx+8], eax
		mov	dword ptr [esp+4], 0FFFFFFFFh
		mov	dword ptr [esp], offset	aNormal	; "normal"
		mov	dword ptr [ebp-38h], 3
		call	ds:_ZN7QString16fromAscii_helperEPKci
		mov	edx, [ebp+8]
		mov	[edx+0Ch], eax
		mov	dword ptr [ebp-38h], 2
		call	sub_6FFD2F30
		mov	dword ptr [esp], 8
		call	sub_6FFEAE70
		mov	[ebp-40h], eax
		mov	eax, [ebp+8]
		mov	edx, [ebp-40h]
		mov	dword ptr [ebp-38h], 1
		mov	[esp+4], eax
		mov	[esp], edx
		call	sub_6FFD5820
		lea	eax, [ebp-3Ch]
		mov	[esp], eax
		call	_Unwind_SjLj_Unregister
		leave
		retn
; ---------------------------------------------------------------------------

loc_6FFC845B:				; DATA XREF: .text:6FFC83C0o
		add	ebp, 8
		mov	eax, [ebp-38h]
		mov	edx, [ebp-34h]
		cmp	eax, 1
		mov	[ebp-44h], edx
		jz	short loc_6FFC847C
		cmp	eax, 2
		jz	short loc_6FFC8491
		mov	eax, [ebp-40h]
		mov	[esp], eax
		call	sub_6FFEAE50

loc_6FFC847C:				; CODE XREF: .text:6FFC846Aj
		mov	eax, [ebp+8]
		mov	dword ptr [ebp-38h], 0
		add	eax, 0Ch
		mov	[esp], eax
		call	sub_6FFEA140

loc_6FFC8491:				; CODE XREF: .text:6FFC846Fj
		mov	edx, [ebp+8]
		mov	dword ptr [ebp-38h], 0
		mov	[esp], edx
		call	ds:_ZN7QObjectD2Ev
		mov	eax, [ebp-44h]
		mov	dword ptr [ebp-38h], 0FFFFFFFFh
		mov	[esp], eax
		call	_Unwind_SjLj_Resume
; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_6FFC84C0	proc near		; CODE XREF: sub_6FFCB780+1E7p
					; sub_6FFD5B10+58j

var_5E		= byte ptr -5Eh
var_5D		= byte ptr -5Dh
var_5C		= byte ptr -5Ch
var_58		= dword	ptr -58h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= byte ptr -18h
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		lea	eax, [ebp+var_18]
		sub	esp, 0CCh
		mov	[ebp+var_3C], eax
		lea	eax, [ebp+var_5C]
		mov	[esp], eax
		mov	[ebp+var_44], offset sub_6FFEC1F0
		mov	[ebp+var_40], offset dword_6FFECBB0
		mov	[ebp+var_38], offset sub_6FFC8880
		mov	[ebp+var_34], esp
		call	_Unwind_SjLj_Register
		mov	eax, ds:_ZN7QString16codecForCStringsE
		mov	esi, [eax]
		test	esi, esi
		jz	loc_6FFC8857
		lea	edx, [ebp+var_1C]
		mov	dword ptr [esp+8], 0FFFFFFFFh
		mov	dword ptr [esp+4], offset aClicked ; "clicked"
		mov	[esp], edx
		mov	[ebp+var_58], 0FFFFFFFFh
		call	ds:_ZN7QString9fromAsciiEPKci
		mov	edi, [ebp+arg_8]
		lea	ecx, [ebp+var_1C]
		mov	[ebp+var_58], 2
		sub	esp, 4
		mov	[esp+4], ecx
		mov	[esp], edi
		call	ds:_ZNK7QStringeqERKS_
		mov	[ebp+var_5D], al
		mov	eax, [ebp+var_1C]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jnz	short loc_6FFC8567
		mov	eax, [ebp+var_1C]
		mov	[ebp+var_58], 0FFFFFFFFh
		mov	[esp], eax
		call	ds:_ZN7QString4freeEPNS_4DataE

loc_6FFC8567:				; CODE XREF: sub_6FFC84C0+92j
					; sub_6FFC84C0+3BBj
		cmp	[ebp+var_5D], 0
		jz	short loc_6FFC8597
		mov	ecx, [ebp+arg_0]
		mov	eax, [ecx+8]
		mov	eax, [eax+8]
		mov	esi, [eax+14h]
		mov	ebx, [esi+3Ch]
		test	ebx, ebx
		jnz	loc_6FFC8705

loc_6FFC8584:				; CODE XREF: sub_6FFC84C0+14Aj
					; sub_6FFC84C0+171j ...
		lea	eax, [ebp+var_5C]
		mov	[esp], eax
		call	_Unwind_SjLj_Unregister
		lea	esp, [ebp-0Ch]
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_6FFC8597:				; CODE XREF: sub_6FFC84C0+ABj
		mov	eax, ds:_ZN7QString16codecForCStringsE
		mov	ecx, [eax]
		test	ecx, ecx
		jz	loc_6FFC8827
		lea	edi, [ebp+var_24]
		mov	dword ptr [esp+8], 0FFFFFFFFh
		mov	dword ptr [esp+4], offset aHovered ; "hovered"
		mov	[esp], edi
		mov	[ebp+var_58], 0FFFFFFFFh
		call	ds:_ZN7QString9fromAsciiEPKci
		mov	edx, [ebp+arg_8]
		mov	[ebp+var_58], 1
		sub	esp, 4
		mov	[esp+4], edi
		mov	[esp], edx
		call	ds:_ZNK7QStringeqERKS_
		mov	[ebp+var_5E], al
		mov	eax, [ebp+var_24]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jnz	short loc_6FFC8606
		mov	eax, [ebp+var_24]
		mov	[ebp+var_58], 0FFFFFFFFh
		mov	[esp], eax
		call	ds:_ZN7QString4freeEPNS_4DataE

loc_6FFC8606:				; CODE XREF: sub_6FFC84C0+131j
					; sub_6FFC84C0+38Bj
		cmp	[ebp+var_5E], 0
		jz	loc_6FFC8584
		mov	edx, [ebp+arg_4]
		mov	ecx, [ebp+arg_0]
		mov	[esp+4], edx
		mov	eax, [ecx+8]
		mov	eax, [eax+8]
		mov	[ebp+var_58], 0FFFFFFFFh
		mov	[esp], eax
		call	sub_6FFC1B40
		test	eax, eax
		jz	loc_6FFC8584
		mov	dword ptr [esp+5Ch], 0
		mov	dword ptr [esp+60h], 0
		mov	dword ptr [esp+54h], 0
		mov	dword ptr [esp+58h], 0
		mov	dword ptr [esp+4Ch], 0
		mov	dword ptr [esp+50h], 0
		mov	dword ptr [esp+44h], 0
		mov	dword ptr [esp+48h], 0
		mov	dword ptr [esp+3Ch], 0
		mov	dword ptr [esp+40h], 0
		mov	dword ptr [esp+34h], 0
		mov	dword ptr [esp+38h], 0
		mov	dword ptr [esp+2Ch], 0
		mov	dword ptr [esp+30h], 0
		mov	dword ptr [esp+24h], 0
		mov	dword ptr [esp+28h], 0
		mov	dword ptr [esp+1Ch], 0
		mov	dword ptr [esp+20h], 0
		mov	dword ptr [esp+14h], 0
		mov	dword ptr [esp+18h], 0
		mov	dword ptr [esp+0Ch], 0
		mov	dword ptr [esp+10h], 0
		mov	dword ptr [esp+8], 0
		mov	dword ptr [esp+4], offset aAbouttoshow ; "aboutToShow"
		mov	[esp], eax
		call	ds:_ZN11QMetaObject12invokeMethodEP7QObjectPKcN2Qt14ConnectionTypeE22QGenericReturnArgument16QGenericArgumentS7_S7_S7_S7_S7_S7_S7_S7_S7_
		jmp	loc_6FFC8584
; ---------------------------------------------------------------------------

loc_6FFC8705:				; CODE XREF: sub_6FFC84C0+BEj
		mov	edx, [esi+38h]
		test	edx, edx
		js	loc_6FFC8584
		mov	ebx, esi
		mov	ecx, esi

loc_6FFC8714:				; CODE XREF: sub_6FFC84C0+26Ej
					; sub_6FFC84C0+392j
		mov	eax, [ecx+edx*4+4]
		cmp	eax, ebx
		jz	short loc_6FFC8728
		mov	edi, [ebp+arg_4]
		cmp	[eax-8], edi
		jl	loc_6FFC8850

loc_6FFC8728:				; CODE XREF: sub_6FFC84C0+25Aj
		sub	edx, 1
		cmp	edx, 0FFFFFFFFh
		jnz	short loc_6FFC8714
		cmp	esi, eax
		jz	loc_6FFC8584
		mov	ecx, [ebp+arg_4]
		lea	edx, [eax-8]
		cmp	[eax-8], ecx
		jg	loc_6FFC8584
		mov	eax, [edx+4]
		test	eax, eax
		jz	loc_6FFC8584
		mov	dword ptr [esp+5Ch], 0
		mov	dword ptr [esp+60h], 0
		mov	dword ptr [esp+54h], 0
		mov	dword ptr [esp+58h], 0
		mov	dword ptr [esp+4Ch], 0
		mov	dword ptr [esp+50h], 0
		mov	dword ptr [esp+44h], 0
		mov	dword ptr [esp+48h], 0
		mov	dword ptr [esp+3Ch], 0
		mov	dword ptr [esp+40h], 0
		mov	dword ptr [esp+34h], 0
		mov	dword ptr [esp+38h], 0
		mov	dword ptr [esp+2Ch], 0
		mov	dword ptr [esp+30h], 0
		mov	dword ptr [esp+24h], 0
		mov	dword ptr [esp+28h], 0
		mov	dword ptr [esp+1Ch], 0
		mov	dword ptr [esp+20h], 0
		mov	dword ptr [esp+14h], 0
		mov	dword ptr [esp+18h], 0
		mov	dword ptr [esp+0Ch], 0
		mov	dword ptr [esp+10h], 0
		mov	dword ptr [esp+8], 2
		mov	dword ptr [esp+4], offset aTrigger ; "trigger"
		mov	[esp], eax
		mov	[ebp+var_58], 0FFFFFFFFh
		call	ds:_ZN11QMetaObject12invokeMethodEP7QObjectPKcN2Qt14ConnectionTypeE22QGenericReturnArgument16QGenericArgumentS7_S7_S7_S7_S7_S7_S7_S7_S7_
		jmp	loc_6FFC8584
; ---------------------------------------------------------------------------

loc_6FFC8827:				; CODE XREF: sub_6FFC84C0+E0j
		lea	eax, [ebp+var_28]
		mov	[esp+4], eax
		mov	eax, [ebp+arg_8]
		mov	[ebp+var_28], offset aHovered ;	"hovered"
		mov	[ebp+var_58], 0FFFFFFFFh
		mov	[esp], eax
		call	ds:_ZNK7QStringeqERK13QLatin1String
		mov	[ebp+var_5E], al
		jmp	loc_6FFC8606
; ---------------------------------------------------------------------------

loc_6FFC8850:				; CODE XREF: sub_6FFC84C0+262j
		mov	ecx, eax
		jmp	loc_6FFC8714
; ---------------------------------------------------------------------------

loc_6FFC8857:				; CODE XREF: sub_6FFC84C0+3Ej
		mov	edx, [ebp+arg_8]
		lea	eax, [ebp+var_20]
		mov	[ebp+var_20], offset aClicked ;	"clicked"
		mov	[esp+4], eax
		mov	[ebp+var_58], 0FFFFFFFFh
		mov	[esp], edx
		call	ds:_ZNK7QStringeqERK13QLatin1String
		mov	[ebp+var_5D], al
		jmp	loc_6FFC8567
sub_6FFC84C0	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn

sub_6FFC8880	proc near		; DATA XREF: sub_6FFC84C0+26o
		add	ebp, 18h
		mov	ecx, [ebp-54h]
		cmp	dword ptr [ebp-58h], 1
		mov	[ebp-64h], ecx
		jz	short loc_6FFC88B3
		lea	eax, [ebp-24h]
		mov	[esp+0], eax
		mov	dword ptr [ebp-58h], 0
		call	sub_6FFEA140
		mov	edi, [ebp-64h]
		mov	dword ptr [ebp-58h], 0FFFFFFFFh
		mov	[esp+0], edi
		call	_Unwind_SjLj_Resume
; ---------------------------------------------------------------------------

loc_6FFC88B3:				; CODE XREF: sub_6FFC8880+Dj
		lea	eax, [ebp-1Ch]
		mov	[esp+0], eax
		mov	dword ptr [ebp-58h], 0
		call	sub_6FFEA140
		mov	eax, [ebp-64h]
		mov	dword ptr [ebp-58h], 0FFFFFFFFh
		mov	[esp+0], eax
		call	_Unwind_SjLj_Resume
sub_6FFC8880	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_6FFC88E0	proc near		; CODE XREF: sub_6FFC78B0+5Fp
					; sub_6FFC99B0+DCp

var_19C		= dword	ptr -19Ch
var_18C		= dword	ptr -18Ch
var_188		= dword	ptr -188h
var_184		= dword	ptr -184h
var_180		= dword	ptr -180h
var_17C		= dword	ptr -17Ch
var_178		= dword	ptr -178h
var_174		= dword	ptr -174h
var_170		= dword	ptr -170h
var_16C		= dword	ptr -16Ch
var_168		= dword	ptr -168h
var_164		= dword	ptr -164h
var_160		= dword	ptr -160h
var_15C		= dword	ptr -15Ch
var_158		= dword	ptr -158h
var_154		= dword	ptr -154h
var_150		= dword	ptr -150h
var_14C		= dword	ptr -14Ch
var_148		= dword	ptr -148h
var_144		= dword	ptr -144h
var_140		= dword	ptr -140h
var_13C		= dword	ptr -13Ch
var_138		= dword	ptr -138h
var_134		= dword	ptr -134h
var_130		= dword	ptr -130h
var_12C		= dword	ptr -12Ch
var_128		= dword	ptr -128h
var_124		= dword	ptr -124h
var_120		= dword	ptr -120h
var_11C		= dword	ptr -11Ch
var_118		= dword	ptr -118h
var_114		= dword	ptr -114h
var_110		= dword	ptr -110h
var_10C		= dword	ptr -10Ch
var_108		= dword	ptr -108h
var_104		= dword	ptr -104h
var_100		= dword	ptr -100h
var_FC		= dword	ptr -0FCh
var_F8		= dword	ptr -0F8h
var_F4		= dword	ptr -0F4h
var_F0		= dword	ptr -0F0h
var_EC		= dword	ptr -0ECh
var_E8		= dword	ptr -0E8h
var_E4		= dword	ptr -0E4h
var_E0		= dword	ptr -0E0h
var_DC		= dword	ptr -0DCh
var_D8		= dword	ptr -0D8h
var_D4		= dword	ptr -0D4h
var_D0		= dword	ptr -0D0h
var_CC		= byte ptr -0CCh
var_C8		= dword	ptr -0C8h
var_C4		= dword	ptr -0C4h
var_B4		= dword	ptr -0B4h
var_B0		= dword	ptr -0B0h
var_AC		= dword	ptr -0ACh
var_A8		= dword	ptr -0A8h
var_A4		= dword	ptr -0A4h
var_90		= dword	ptr -90h
var_60		= dword	ptr -60h
var_58		= dword	ptr -58h
var_50		= dword	ptr -50h
var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_40		= byte ptr -40h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= byte ptr -18h
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		lea	eax, [ebp+var_18]
		sub	esp, 1ACh
		mov	[ebp+var_AC], eax
		lea	eax, [ebp+var_CC]
		mov	[ebp+var_B4], offset sub_6FFEC1F0
		mov	[ebp+var_B0], offset dword_6FFECC5C
		mov	[ebp+var_A8], offset loc_6FFC96B9
		mov	[ebp+var_A4], esp
		mov	[esp], eax
		call	_Unwind_SjLj_Register
		mov	ecx, [ebp+arg_8]
		test	ecx, ecx
		jnz	loc_6FFC8A1E
		mov	eax, ds:_ZN8QMapData11shared_nullE
		mov	[ebp+var_1C], eax
		lock inc dword ptr [eax+34h]
		setnz	dl
		lea	eax, [ebp+var_40]
		mov	dword ptr [esp+4], offset aSubmenu_0 ; "submenu"
		mov	[esp], eax
		mov	[ebp+var_C8], 11h
		call	ds:_ZN8QVariantC1EPKc
		mov	dword ptr [esp+4], 0FFFFFFFFh
		mov	dword ptr [esp], offset	aChildrenDisp_0	; "children-display"
		mov	[ebp+var_C8], 10h
		call	ds:_ZN7QString16fromAscii_helperEPKci
		mov	[ebp+var_20], eax
		mov	eax, [ebp+var_1C]
		mov	eax, [eax+34h]
		cmp	eax, 1
		jz	short loc_6FFC89A1
		lea	eax, [ebp+var_1C]
		mov	[esp], eax
		mov	[ebp+var_C8], 0Fh
		call	sub_6FFE3B80

loc_6FFC89A1:				; CODE XREF: sub_6FFC88E0+AAj
		mov	edx, [ebp+var_1C]
		mov	ecx, [edx+38h]
		mov	[ebp+var_114], edx
		mov	[ebp+var_160], edx
		test	ecx, ecx
		mov	[ebp+var_110], ecx
		js	loc_6FFC8D24
		mov	eax, edx
		mov	edx, [ebp+var_114]
		shl	ecx, 2
		mov	[ebp+var_118], ecx

loc_6FFC89D2:				; CODE XREF: sub_6FFC88E0+13Cj
					; sub_6FFC88E0+D5Ej
		mov	esi, [ebp+var_110]
		mov	esi, [edx+esi*4+4]
		cmp	esi, eax
		mov	[ebp+var_10C], esi
		jz	loc_6FFC8CB6
		lea	eax, [ebp+var_20]
		mov	[esp+4], eax
		mov	eax, esi
		sub	eax, 1Ch
		mov	[esp], eax
		mov	[ebp+var_C8], 0Fh
		call	ds:_ZNK7QStringltERKS_
		test	al, al
		jz	loc_6FFC8CB6
		mov	eax, [ebp+var_1C]
		mov	edx, esi
		mov	[ebp+var_114], esi
		jmp	short loc_6FFC89D2
; ---------------------------------------------------------------------------

loc_6FFC8A1E:				; CODE XREF: sub_6FFC88E0+4Cj
		mov	eax, [ebp+arg_4]
		mov	eax, [eax+8]
		mov	eax, [eax+8]
		mov	[ebp+var_158], eax
		mov	esi, [eax+14h]
		mov	edx, [esi+3Ch]
		test	edx, edx
		jnz	loc_6FFC8B74

loc_6FFC8A3B:				; CODE XREF: sub_6FFC88E0+299j
					; sub_6FFC88E0+2D3j ...
		mov	dword ptr [esp], 18h ; size_t
		mov	[ebp+var_C8], 0FFFFFFFFh
		call	sub_6FFEAE70
		mov	[ebp+var_30], 2
		mov	[ebp+var_C8], 5
		mov	[ebp+var_170], eax
		lea	eax, [ebp+var_30]
		mov	esi, [ebp+var_170]
		mov	[esp+8], eax
		mov	eax, [ebp+var_170]
		mov	[esp], esi
		add	eax, 8
		mov	[esp+4], eax
		call	ds:_ZN11QTextStreamC1EP7QString6QFlagsIN9QIODevice12OpenModeFlagEE
		mov	eax, ds:_ZN7QString11shared_nullE
		mov	[esi+8], eax
		lock inc dword ptr [eax]
		setnz	dl
		mov	dword ptr [esi+0Ch], 1
		lea	eax, [ebp+var_24]
		mov	dword ptr [esi+10h], 1
		mov	byte ptr [esi+15h], 1
		mov	byte ptr [esi+14h], 0
		mov	[ebp+var_24], esi
		mov	dword ptr [esp+4], offset a31m_0 ; "\x1B[31m"
		mov	[esp], eax
		mov	[ebp+var_C8], 0Eh
		call	sub_6FFE9FF0
		mov	dword ptr [esp+4], offset aQvariantmapD_1 ; "QVariantMap DBusMenuExporterDBus::getPr"...
		mov	[esp], eax
		mov	[ebp+var_C8], 0Eh
		call	sub_6FFE9FF0
		mov	dword ptr [esp+4], offset a0m_0	; "\x1B[0m:"
		mov	[esp], eax
		call	sub_6FFE9FF0
		mov	ecx, eax
		mov	[ebp+var_184], eax
		mov	eax, [eax]
		mov	byte ptr [eax+14h], 1
		mov	dword ptr [esp+4], 20h
		mov	eax, [ecx]
		mov	[esp], eax
		call	ds:_ZN11QTextStreamlsEc
		mov	esi, [ebp+var_184]
		mov	dword ptr [esp+4], offset aConditionFai_3 ; "Condition failed: action"
		mov	[esp], esi
		call	sub_6FFE9FF0
		lea	eax, [ebp+var_24]
		mov	[esp], eax
		mov	[ebp+var_C8], 0FFFFFFFFh
		call	sub_6FFE9DD0
		mov	eax, ds:_ZN8QMapData11shared_nullE
		mov	edx, [ebp+arg_0]
		mov	[edx], eax
		lock inc dword ptr [eax+34h]
		setnz	dl

loc_6FFC8B56:				; CODE XREF: sub_6FFC88E0+52Cj
					; sub_6FFC88E0+53Bj ...
		lea	eax, [ebp+var_CC]
		mov	[esp], eax
		call	_Unwind_SjLj_Unregister
		mov	eax, [ebp+arg_0]
		add	esp, 1ACh
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn	4
; ---------------------------------------------------------------------------

loc_6FFC8B74:				; CODE XREF: sub_6FFC88E0+155j
		mov	edx, [esi+38h]
		test	edx, edx
		js	loc_6FFC8A3B
		mov	ebx, esi
		mov	ecx, esi
		mov	edi, esi
		mov	[ebp+var_19C], esi

loc_6FFC8B8B:				; CODE XREF: sub_6FFC88E0+2C9j
		mov	eax, [ecx+edx*4+4]
		cmp	ebx, eax
		jz	loc_6FFC8ED6

loc_6FFC8B97:				; CODE XREF: sub_6FFC88E0+5F0j
		mov	esi, [ebp+arg_8]
		cmp	[eax-8], esi
		jl	loc_6FFC8EC8

loc_6FFC8BA3:				; CODE XREF: sub_6FFC88E0+5F8j
		sub	edx, 1
		cmp	edx, 0FFFFFFFFh
		jnz	short loc_6FFC8B8B
		mov	esi, [ebp+var_19C]
		cmp	esi, eax
		jz	loc_6FFC8A3B
		mov	ecx, [ebp+arg_8]
		lea	edx, [eax-8]
		cmp	[eax-8], ecx
		jg	loc_6FFC8A3B
		mov	edx, [edx+4]
		test	edx, edx
		mov	[ebp+var_174], edx
		jz	loc_6FFC8A3B
		mov	esi, [ebp+var_158]
		mov	ecx, [esi+10h]
		mov	eax, [ecx+0Ch]
		test	eax, eax
		jz	loc_6FFC8EDD
		mov	ebx, [ecx+18h]
		mov	edx, ecx
		mov	eax, ecx
		test	ebx, ebx
		jz	short loc_6FFC8C6E
		mov	eax, [ebp+var_174]
		xor	edx, edx
		mov	esi, [ecx+4]
		mov	[ebp+var_188], eax
		div	ebx
		lea	edx, [esi+edx*4]
		mov	[ebp+var_168], edx
		mov	eax, [edx]
		cmp	eax, ecx
		jz	short loc_6FFC8C24
		mov	edi, [eax]
		test	edi, edi
		jz	loc_6FFC967A

loc_6FFC8C24:				; CODE XREF: sub_6FFC88E0+338j
					; sub_6FFC88E0+DC9j
		mov	ecx, [ebp+var_158]
		mov	edx, eax
		mov	eax, [ecx+10h]
		cmp	edx, eax
		jz	loc_6FFC8EDD
		mov	ecx, [ebp+var_188]
		mov	ebx, [ebp+var_168]
		mov	esi, [ebp+var_174]
		jmp	short loc_6FFC8C5C
; ---------------------------------------------------------------------------
		align 10h

loc_6FFC8C50:				; CODE XREF: sub_6FFC88E0+37Fj
					; sub_6FFC88E0+384j
		mov	ebx, edx
		mov	edx, [edx]
		cmp	edx, eax
		jz	loc_6FFC9422

loc_6FFC8C5C:				; CODE XREF: sub_6FFC88E0+369j
		cmp	ecx, [edx+4]
		jnz	short loc_6FFC8C50
		cmp	esi, [edx+8]
		jnz	short loc_6FFC8C50
		mov	[ebp+var_168], ebx
		mov	edx, [ebx]

loc_6FFC8C6E:				; CODE XREF: sub_6FFC88E0+316j
					; sub_6FFC88E0+B48j
		cmp	eax, edx
		jz	loc_6FFC8EDD
		mov	eax, [edx+0Ch]
		mov	[ebp+var_28], eax
		lock inc dword ptr [eax+34h]
		setnz	dl
		mov	eax, [ebp+var_28]
		test	byte ptr [eax+44h], 2
		jnz	loc_6FFC8EEC
		mov	eax, [eax+34h]
		cmp	eax, 1
		jz	loc_6FFC8EEC
		lea	eax, [ebp+var_28]
		mov	[esp], eax
		mov	[ebp+var_C8], 0FFFFFFFFh
		call	sub_6FFE3B80
		jmp	loc_6FFC8EEC
; ---------------------------------------------------------------------------

loc_6FFC8CB6:				; CODE XREF: sub_6FFC88E0+104j
					; sub_6FFC88E0+12Bj
		mov	edx, [ebp+var_118]
		mov	ecx, [ebp+var_114]
		mov	[ebp+edx+var_90], ecx
		sub	edx, 4
		sub	[ebp+var_110], 1
		mov	[ebp+var_118], edx
		jns	loc_6FFC9635
		mov	edx, [ebp+var_10C]
		cmp	[ebp+var_1C], edx
		jz	loc_6FFC96AE
		mov	ecx, edx
		sub	ecx, 1Ch
		lea	eax, [ebp+var_20]
		mov	[ebp+var_15C], ecx
		mov	[esp+4], ecx
		mov	[esp], eax
		mov	[ebp+var_C8], 0Fh
		call	ds:_ZNK7QStringltERKS_
		test	al, al
		jz	loc_6FFC9643
		mov	esi, [ebp+var_1C]
		mov	[ebp+var_160], esi

loc_6FFC8D24:				; CODE XREF: sub_6FFC88E0+DBj
					; sub_6FFC88E0+DD4j ...
		mov	edx, [ebp+var_160]
		lea	eax, [ebp+var_90]
		mov	dword ptr [esp+0Ch], 8
		mov	dword ptr [esp+8], 1Ch
		mov	[esp+4], eax
		mov	[esp], edx
		mov	[ebp+var_C8], 0Fh
		call	ds:_ZN8QMapData11node_createEPPNS_4NodeEii
		mov	[ebp+var_180], eax
		sub	eax, 1Ch
		test	eax, eax
		mov	[ebp+var_17C], eax
		mov	[ebp+var_18C], eax
		jz	short loc_6FFC8D91
		mov	eax, [ebp+var_20]
		lea	edx, [ebp+var_20]
		mov	ecx, [ebp+var_180]
		mov	[ecx-1Ch], eax
		cmp	[ebp+var_17C], edx
		jz	loc_6FFC9600

loc_6FFC8D8B:				; CODE XREF: sub_6FFC88E0+D50j
		lock inc dword ptr [eax]
		setnz	dl

loc_6FFC8D91:				; CODE XREF: sub_6FFC88E0+48Ej
		mov	edx, [ebp+var_17C]
		add	edx, 8
		jz	short loc_6FFC8DB6
		lea	eax, [ebp+var_40]
		mov	[esp+4], eax
		mov	[esp], edx
		mov	[ebp+var_C8], 8
		call	ds:_ZN8QVariantC1ERKS_

loc_6FFC8DB6:				; CODE XREF: sub_6FFC88E0+4BAj
					; sub_6FFC88E0+D95j
		mov	eax, [ebp+var_20]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jz	loc_6FFC9407

loc_6FFC8DC7:				; CODE XREF: sub_6FFC88E0+B3Dj
		lea	eax, [ebp+var_40]
		mov	[esp], eax
		mov	[ebp+var_C8], 11h
		call	ds:_ZN8QVariantD1Ev
		mov	eax, [ebp+var_1C]
		mov	edx, [ebp+arg_0]
		mov	[edx], eax
		lock inc dword ptr [eax+34h]
		setnz	dl
		mov	ecx, [ebp+arg_0]
		mov	eax, [ecx]
		test	byte ptr [eax+44h], 2
		jnz	short loc_6FFC8E07
		mov	eax, [eax+34h]
		cmp	eax, 1
		jz	short loc_6FFC8E07
		mov	[esp], ecx
		call	sub_6FFE3B80

loc_6FFC8E07:				; CODE XREF: sub_6FFC88E0+515j
					; sub_6FFC88E0+51Dj
		mov	eax, [ebp+var_1C]
		test	eax, eax
		jz	loc_6FFC8B56
		lock dec dword ptr [eax+34h]
		setnz	dl
		test	dl, dl
		jnz	loc_6FFC8B56
		mov	eax, [ebp+var_1C]
		mov	edx, eax
		mov	[ebp+var_140], eax
		mov	eax, [eax+4]
		cmp	edx, eax
		jz	short loc_6FFC8EA2
		mov	ecx, ds:_ZN8QVariantD1Ev
		mov	[ebp+var_D0], ecx
		jmp	short loc_6FFC8E43
; ---------------------------------------------------------------------------

loc_6FFC8E41:				; CODE XREF: sub_6FFC88E0+5C0j
		mov	eax, ecx

loc_6FFC8E43:				; CODE XREF: sub_6FFC88E0+55Fj
		mov	esi, [eax+4]
		lea	edx, [eax-1Ch]
		mov	[ebp+var_134], edx
		mov	[ebp+var_124], esi
		mov	edx, [eax-1Ch]
		lock dec dword ptr [edx]
		setnz	cl
		test	cl, cl
		jnz	short loc_6FFC8E78
		mov	eax, [eax-1Ch]
		mov	[ebp+var_C8], 0FFFFFFFFh
		mov	[esp], eax
		call	ds:_ZN7QString4freeEPNS_4DataE

loc_6FFC8E78:				; CODE XREF: sub_6FFC88E0+580j
		mov	eax, [ebp+var_134]
		mov	[ebp+var_C8], 0FFFFFFFFh
		add	eax, 8
		mov	[esp], eax
		call	[ebp+var_D0]
		mov	ecx, [ebp+var_124]
		cmp	[ebp+var_140], ecx
		jnz	short loc_6FFC8E41

loc_6FFC8EA2:				; CODE XREF: sub_6FFC88E0+551j
		mov	esi, [ebp+var_140]
		mov	dword ptr [esp+4], 1Ch
		mov	[ebp+var_C8], 0FFFFFFFFh
		mov	[esp], esi
		call	ds:_ZN8QMapData16continueFreeDataEi
		jmp	loc_6FFC8B56
; ---------------------------------------------------------------------------

loc_6FFC8EC8:				; CODE XREF: sub_6FFC88E0+2BDj
		mov	ecx, eax
		mov	eax, [ecx+edx*4+4]
		cmp	ebx, eax
		jnz	loc_6FFC8B97

loc_6FFC8ED6:				; CODE XREF: sub_6FFC88E0+2B1j
		mov	eax, edi
		jmp	loc_6FFC8BA3
; ---------------------------------------------------------------------------

loc_6FFC8EDD:				; CODE XREF: sub_6FFC88E0+307j
					; sub_6FFC88E0+351j ...
		mov	eax, ds:_ZN8QMapData11shared_nullE
		mov	[ebp+var_28], eax
		lock inc dword ptr [eax+34h]
		setnz	dl

loc_6FFC8EEC:				; CODE XREF: sub_6FFC88E0+3AAj
					; sub_6FFC88E0+3B6j ...
		mov	esi, [ebp+arg_C]
		mov	eax, [esi]
		mov	edx, [eax+0Ch]
		cmp	edx, [eax+8]
		jz	loc_6FFC958A
		mov	eax, ds:_ZN8QMapData11shared_nullE
		mov	[ebp+var_2C], eax
		lock inc dword ptr [eax+34h]
		setnz	dl
		mov	esi, [ebp+arg_C]
		mov	eax, [esi]
		mov	[ebp+var_50], eax
		lock inc dword ptr [eax]
		setnz	dl
		mov	eax, [ebp+var_50]
		test	byte ptr [eax+10h], 1
		jz	loc_6FFC9569

loc_6FFC8F27:				; CODE XREF: sub_6FFC88E0+CA5j
		mov	edx, [ebp+var_50]
		mov	[ebp+var_4C], 0
		mov	eax, [edx+8]
		mov	ecx, [edx+0Ch]
		lea	eax, [edx+eax*4+14h]
		lea	edx, [edx+ecx*4+14h]
		cmp	eax, edx
		mov	[ebp+var_48], eax
		mov	[ebp+var_44], edx
		jz	loc_6FFC9193
		mov	ecx, ds:_ZNK7QStringltERKS_
		mov	[ebp+var_120], ecx
		mov	[ebp+var_FC], ecx
		nop

loc_6FFC8F60:				; CODE XREF: sub_6FFC88E0+8ADj
		mov	[ebp+var_F4], eax
		mov	eax, [ebp+var_28]
		mov	ebx, [eax+3Ch]
		test	ebx, ebx
		jnz	loc_6FFC92B0

loc_6FFC8F74:				; CODE XREF: sub_6FFC88E0+9E1j
					; sub_6FFC88E0+A48j ...
		mov	eax, [ebp+var_58]
		mov	[ebp+var_60], 0
		and	eax, 0C0000000h
		mov	[ebp+var_58], eax
		mov	byte ptr [ebp+var_58+3], 80h

loc_6FFC8F8A:				; CODE XREF: sub_6FFC88E0+AB4j
		test	[ebp+var_58], 3FFFFFFFh
		jz	loc_6FFC9164
		mov	eax, [ebp+var_2C]
		mov	eax, [eax+34h]
		cmp	eax, 1
		jz	short loc_6FFC8FB7
		lea	eax, [ebp+var_2C]
		mov	[esp], eax
		mov	[ebp+var_C8], 0Ah
		call	sub_6FFE3B80

loc_6FFC8FB7:				; CODE XREF: sub_6FFC88E0+6C0j
		mov	esi, [ebp+var_2C]
		mov	eax, [esi+38h]
		mov	[ebp+var_E0], esi
		test	eax, eax
		mov	[ebp+var_E4], eax
		js	loc_6FFC90C8
		shl	eax, 2
		mov	ecx, esi
		mov	[ebp+var_F0], eax
		mov	[ebp+var_EC], esi

loc_6FFC8FE2:				; CODE XREF: sub_6FFC88E0+763j
					; sub_6FFC88E0+795j
		mov	edx, [ebp+var_E4]
		mov	edx, [ecx+edx*4+4]
		cmp	[ebp+var_E0], edx
		mov	[ebp+var_D8], edx
		jz	short loc_6FFC9045
		mov	ecx, [ebp+var_F4]
		mov	eax, edx
		sub	eax, 1Ch
		mov	[esp], eax
		mov	[ebp+var_C8], 0Ah
		mov	[esp+4], ecx
		call	[ebp+var_FC]
		mov	esi, [ebp+var_D8]
		test	al, al
		mov	edx, [ebp+var_EC]
		mov	[ebp+var_E0], esi
		jz	short loc_6FFC9047
		mov	eax, [ebp+var_2C]
		mov	ecx, esi
		mov	[ebp+var_EC], esi
		mov	[ebp+var_E0], eax
		jmp	short loc_6FFC8FE2
; ---------------------------------------------------------------------------

loc_6FFC9045:				; CODE XREF: sub_6FFC88E0+718j
		mov	edx, ecx

loc_6FFC9047:				; CODE XREF: sub_6FFC88E0+750j
		mov	esi, [ebp+var_F0]
		mov	[ebp+esi+var_90], edx
		sub	esi, 4
		sub	[ebp+var_E4], 1
		mov	[ebp+var_F0], esi
		js	short loc_6FFC9080
		mov	eax, [ebp+var_2C]
		mov	ecx, [ebp+var_EC]
		mov	[ebp+var_E0], eax
		jmp	loc_6FFC8FE2
; ---------------------------------------------------------------------------
		align 10h

loc_6FFC9080:				; CODE XREF: sub_6FFC88E0+784j
		mov	ecx, [ebp+var_E0]
		cmp	[ebp+var_2C], ecx
		mov	[ebp+var_100], ecx
		jz	short loc_6FFC90C8
		mov	esi, [ebp+var_F4]
		sub	ecx, 1Ch
		mov	[ebp+var_104], ecx
		mov	[esp+4], ecx
		mov	[ebp+var_C8], 0Ah
		mov	[esp], esi
		call	ds:_ZNK7QStringltERKS_
		test	al, al
		jz	loc_6FFC93D0
		mov	eax, [ebp+var_2C]
		mov	[ebp+var_E0], eax

loc_6FFC90C8:				; CODE XREF: sub_6FFC88E0+6EBj
					; sub_6FFC88E0+7AFj ...
		mov	ecx, [ebp+var_E0]
		lea	eax, [ebp+var_90]
		mov	dword ptr [esp+0Ch], 8
		mov	dword ptr [esp+8], 1Ch
		mov	[esp+4], eax
		mov	[ebp+var_150], ecx
		mov	[esp], ecx
		mov	[ebp+var_C8], 0Ah
		call	ds:_ZN8QMapData11node_createEPPNS_4NodeEii
		mov	[ebp+var_144], eax
		sub	eax, 1Ch
		test	eax, eax
		mov	[ebp+var_128], eax
		mov	[ebp+var_164], eax
		jz	short loc_6FFC9145
		mov	esi, [ebp+var_F4]
		mov	edx, [ebp+var_144]
		mov	eax, [esi]
		mov	[edx-1Ch], eax
		mov	ecx, [ebp+var_128]
		cmp	esi, ecx
		jz	loc_6FFC95CB

loc_6FFC9139:				; CODE XREF: sub_6FFC88E0+D1Bj
		lock inc dword ptr [eax]
		setnz	dl
		mov	eax, [ebp+var_128]

loc_6FFC9145:				; CODE XREF: sub_6FFC88E0+838j
		add	eax, 8
		jz	short loc_6FFC9164
		lea	edx, [ebp+var_60]
		mov	[esp+4], edx
		mov	[esp], eax
		mov	[ebp+var_C8], 3
		call	ds:_ZN8QVariantC1ERKS_

loc_6FFC9164:				; CODE XREF: sub_6FFC88E0+6B1j
					; sub_6FFC88E0+868j ...
		lea	eax, [ebp+var_60]
		mov	[esp], eax
		mov	[ebp+var_C8], 0Bh
		call	ds:_ZN8QVariantD1Ev
		mov	eax, [ebp+var_48]
		mov	esi, [ebp+var_4C]
		add	eax, 4
		test	esi, esi
		mov	[ebp+var_48], eax
		jnz	short loc_6FFC9193
		cmp	eax, [ebp+var_44]
		jnz	loc_6FFC8F60

loc_6FFC9193:				; CODE XREF: sub_6FFC88E0+667j
					; sub_6FFC88E0+8A8j
		mov	eax, [ebp+var_50]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jz	loc_6FFC9430

loc_6FFC91A4:				; CODE XREF: sub_6FFC88E0+BE9j
		mov	eax, [ebp+var_2C]
		mov	edx, [ebp+arg_0]
		mov	[edx], eax
		lock inc dword ptr [eax+34h]
		setnz	dl
		mov	ecx, [ebp+arg_0]
		mov	eax, [ecx]
		test	byte ptr [eax+44h], 2
		jnz	short loc_6FFC91D8
		mov	eax, [eax+34h]
		cmp	eax, 1
		jz	short loc_6FFC91D8
		mov	[esp], ecx
		mov	[ebp+var_C8], 0Ch
		call	sub_6FFE3B80

loc_6FFC91D8:				; CODE XREF: sub_6FFC88E0+8DCj
					; sub_6FFC88E0+8E4j
		mov	eax, [ebp+var_2C]
		test	eax, eax
		jz	short loc_6FFC91EE
		lock dec dword ptr [eax+34h]
		setnz	dl
		test	dl, dl
		jz	loc_6FFC94CE

loc_6FFC91EE:				; CODE XREF: sub_6FFC88E0+8FDj
					; sub_6FFC88E0+C84j ...
		mov	eax, [ebp+var_28]
		test	eax, eax
		jz	loc_6FFC8B56
		lock dec dword ptr [eax+34h]
		setnz	dl
		test	dl, dl
		jnz	loc_6FFC8B56
		mov	ecx, [ebp+var_28]
		mov	eax, [ecx+4]
		mov	[ebp+var_148], ecx
		cmp	ecx, eax
		jz	short loc_6FFC9287
		mov	esi, ds:_ZN8QVariantD1Ev
		mov	[ebp+var_D4], esi
		jmp	short loc_6FFC9228
; ---------------------------------------------------------------------------

loc_6FFC9226:				; CODE XREF: sub_6FFC88E0+9A5j
		mov	eax, esi

loc_6FFC9228:				; CODE XREF: sub_6FFC88E0+944j
		mov	edx, [eax+4]
		lea	ecx, [eax-1Ch]
		mov	[ebp+var_138], ecx
		mov	[ebp+var_12C], edx
		mov	edx, [eax-1Ch]
		lock dec dword ptr [edx]
		setnz	cl
		test	cl, cl
		jnz	short loc_6FFC925D
		mov	eax, [eax-1Ch]
		mov	[ebp+var_C8], 0FFFFFFFFh
		mov	[esp], eax
		call	ds:_ZN7QString4freeEPNS_4DataE

loc_6FFC925D:				; CODE XREF: sub_6FFC88E0+965j
		mov	eax, [ebp+var_138]
		mov	[ebp+var_C8], 0FFFFFFFFh
		add	eax, 8
		mov	[esp], eax
		call	[ebp+var_D4]
		mov	esi, [ebp+var_12C]
		cmp	[ebp+var_148], esi
		jnz	short loc_6FFC9226

loc_6FFC9287:				; CODE XREF: sub_6FFC88E0+936j
		mov	eax, [ebp+var_148]
		mov	dword ptr [esp+4], 1Ch
		mov	[ebp+var_C8], 0FFFFFFFFh
		mov	[esp], eax
		call	ds:_ZN8QMapData16continueFreeDataEi
		jmp	loc_6FFC8B56
; ---------------------------------------------------------------------------
		align 10h

loc_6FFC92B0:				; CODE XREF: sub_6FFC88E0+68Ej
		mov	[ebp+var_F8], eax
		mov	eax, [eax+38h]
		test	eax, eax
		mov	[ebp+var_E8], eax
		js	loc_6FFC8F74
		mov	eax, [ebp+var_F8]
		mov	ecx, eax
		nop

loc_6FFC92D0:				; CODE XREF: sub_6FFC88E0+AD1j
					; sub_6FFC88E0+ADFj
		mov	edx, [ebp+var_E8]
		mov	edx, [ecx+edx*4+4]
		cmp	eax, edx
		mov	[ebp+var_DC], edx
		jz	loc_6FFC93C4
		mov	ecx, [ebp+var_F4]
		mov	eax, edx
		sub	eax, 1Ch
		mov	[esp], eax
		mov	[ebp+var_C8], 0Bh
		mov	[esp+4], ecx
		call	ds:_ZNK7QStringltERKS_
		test	al, al
		jnz	loc_6FFC93A0
		mov	eax, [ebp+var_28]

loc_6FFC9315:				; CODE XREF: sub_6FFC88E0+AEAj
		sub	[ebp+var_E8], 1
		jns	loc_6FFC93B6
		cmp	[ebp+var_DC], eax
		jz	loc_6FFC8F74
		mov	eax, [ebp+var_DC]
		mov	edx, [ebp+var_F4]
		mov	[ebp+var_C8], 0Bh
		sub	eax, 1Ch
		mov	[ebp+var_108], eax
		mov	[esp+4], eax
		mov	[esp], edx
		call	[ebp+var_120]
		test	al, al
		jnz	loc_6FFC8F74
		mov	ecx, [ebp+var_DC]
		cmp	ecx, [ebp+var_28]
		jz	loc_6FFC8F74
		mov	eax, [ebp+var_108]
		mov	[ebp+var_C8], 0Bh
		add	eax, 8
		mov	[esp+4], eax
		lea	eax, [ebp+var_60]
		mov	[esp], eax
		call	ds:_ZN8QVariantC1ERKS_
		jmp	loc_6FFC8F8A
; ---------------------------------------------------------------------------
		align 10h

loc_6FFC93A0:				; CODE XREF: sub_6FFC88E0+A2Cj
		mov	esi, [ebp+var_DC]
		mov	eax, [ebp+var_28]
		mov	[ebp+var_F8], esi
		mov	ecx, esi
		jmp	loc_6FFC92D0
; ---------------------------------------------------------------------------

loc_6FFC93B6:				; CODE XREF: sub_6FFC88E0+A3Cj
		mov	eax, [ebp+var_28]
		mov	ecx, [ebp+var_F8]
		jmp	loc_6FFC92D0
; ---------------------------------------------------------------------------

loc_6FFC93C4:				; CODE XREF: sub_6FFC88E0+A02j
		mov	[ebp+var_DC], eax
		jmp	loc_6FFC9315
; ---------------------------------------------------------------------------
		align 10h

loc_6FFC93D0:				; CODE XREF: sub_6FFC88E0+7D9j
		mov	edx, [ebp+var_100]
		cmp	[ebp+var_2C], edx
		jz	loc_6FFC90C8
		lea	eax, [ebp+var_60]
		mov	[esp+4], eax
		mov	eax, [ebp+var_104]
		mov	[ebp+var_C8], 0Ah
		add	eax, 8
		mov	[esp], eax
		call	ds:_ZN8QVariantaSERKS_
		jmp	loc_6FFC9164
; ---------------------------------------------------------------------------

loc_6FFC9407:				; CODE XREF: sub_6FFC88E0+4E1j
		mov	eax, [ebp+var_20]
		mov	[ebp+var_C8], 10h
		mov	[esp], eax
		call	ds:_ZN7QString4freeEPNS_4DataE
		jmp	loc_6FFC8DC7
; ---------------------------------------------------------------------------

loc_6FFC9422:				; CODE XREF: sub_6FFC88E0+376j
		mov	[ebp+var_168], ebx
		jmp	loc_6FFC8C6E
; ---------------------------------------------------------------------------
		align 10h

loc_6FFC9430:				; CODE XREF: sub_6FFC88E0+8BEj
		mov	esi, [ebp+var_50]
		mov	edx, [esi+0Ch]
		mov	eax, esi
		add	eax, 14h
		mov	[ebp+var_16C], esi
		lea	edx, [eax+edx*4]
		mov	[ebp+var_11C], edx
		mov	edx, [esi+8]
		lea	edx, [eax+edx*4]
		cmp	[ebp+var_11C], edx
		mov	[ebp+var_154], edx
		jnz	short loc_6FFC946E
		jmp	short loc_6FFC94B0
; ---------------------------------------------------------------------------

loc_6FFC9460:				; CODE XREF: sub_6FFC88E0+BA5j
		mov	esi, [ebp+var_11C]
		cmp	[ebp+var_154], esi
		jz	short loc_6FFC94B0

loc_6FFC946E:				; CODE XREF: sub_6FFC88E0+B7Cj
					; sub_6FFC88E0+BCEj
		sub	[ebp+var_11C], 4
		mov	edx, [ebp+var_11C]
		mov	eax, [edx]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jnz	short loc_6FFC9460
		mov	ecx, [ebp+var_11C]
		mov	eax, [ecx]
		mov	[ebp+var_C8], 0Ch
		mov	[esp], eax
		call	ds:_ZN7QString4freeEPNS_4DataE
		mov	esi, [ebp+var_11C]
		cmp	[ebp+var_154], esi
		jnz	short loc_6FFC946E

loc_6FFC94B0:				; CODE XREF: sub_6FFC88E0+B7Ej
					; sub_6FFC88E0+B8Cj
		mov	eax, [ebp+var_16C]
		mov	[ebp+var_C8], 0Ch
		mov	[esp], eax
		call	ds:_Z5qFreePv
		jmp	loc_6FFC91A4
; ---------------------------------------------------------------------------

loc_6FFC94CE:				; CODE XREF: sub_6FFC88E0+908j
		mov	esi, [ebp+var_2C]
		mov	eax, [esi+4]
		mov	[ebp+var_14C], esi
		cmp	esi, eax
		jnz	short loc_6FFC950C
		jmp	short loc_6FFC9543
; ---------------------------------------------------------------------------

loc_6FFC94E0:				; CODE XREF: sub_6FFC88E0+C49j
					; sub_6FFC88E0+C61j
		mov	eax, [ebp+var_13C]
		mov	[ebp+var_C8], 0Dh
		add	eax, 8
		mov	[esp], eax
		call	ds:_ZN8QVariantD1Ev
		mov	esi, [ebp+var_130]
		cmp	[ebp+var_14C], esi
		jz	short loc_6FFC9543
		mov	eax, esi

loc_6FFC950C:				; CODE XREF: sub_6FFC88E0+BFCj
		mov	edx, [eax+4]
		lea	ecx, [eax-1Ch]
		mov	[ebp+var_13C], ecx
		mov	[ebp+var_130], edx
		mov	edx, [eax-1Ch]
		lock dec dword ptr [edx]
		setnz	cl
		test	cl, cl
		jnz	short loc_6FFC94E0
		mov	eax, [eax-1Ch]
		mov	[ebp+var_C8], 0Dh
		mov	[esp], eax
		call	ds:_ZN7QString4freeEPNS_4DataE
		jmp	short loc_6FFC94E0
; ---------------------------------------------------------------------------

loc_6FFC9543:				; CODE XREF: sub_6FFC88E0+BFEj
					; sub_6FFC88E0+C28j
		mov	eax, [ebp+var_14C]
		mov	dword ptr [esp+4], 1Ch
		mov	[ebp+var_C8], 0Dh
		mov	[esp], eax
		call	ds:_ZN8QMapData16continueFreeDataEi
		jmp	loc_6FFC91EE
; ---------------------------------------------------------------------------

loc_6FFC9569:				; CODE XREF: sub_6FFC88E0+641j
		mov	eax, [eax+4]
		mov	[ebp+var_C8], 0Ch
		mov	[esp+4], eax
		lea	eax, [ebp+var_50]
		mov	[esp], eax
		call	sub_6FFE8C20
		jmp	loc_6FFC8F27
; ---------------------------------------------------------------------------

loc_6FFC958A:				; CODE XREF: sub_6FFC88E0+617j
		mov	eax, [ebp+var_28]
		mov	edx, [ebp+arg_0]
		mov	[edx], eax
		lock inc dword ptr [eax+34h]
		setnz	dl
		mov	ecx, [ebp+arg_0]
		mov	eax, [ecx]
		test	byte ptr [eax+44h], 2
		jnz	loc_6FFC91EE
		mov	eax, [eax+34h]
		cmp	eax, 1
		jz	loc_6FFC91EE
		mov	[esp], ecx
		mov	[ebp+var_C8], 0Dh
		call	sub_6FFE3B80
		jmp	loc_6FFC91EE
; ---------------------------------------------------------------------------

loc_6FFC95CB:				; CODE XREF: sub_6FFC88E0+853j
		mov	dword ptr [esp+8], 2D6h
		mov	dword ptr [esp+4], offset aRIncludeQtco_2 ; "R:/include/QtCore/qstring.h"
		mov	dword ptr [esp], offset	aOtherThis_0 ; "&other != this"
		mov	[ebp+var_C8], 4
		call	ds:_Z9qt_assertPKcS0_i
		mov	esi, [ebp+var_144]
		mov	eax, [esi-1Ch]
		jmp	loc_6FFC9139
; ---------------------------------------------------------------------------

loc_6FFC9600:				; CODE XREF: sub_6FFC88E0+4A5j
		mov	dword ptr [esp+8], 2D6h
		mov	dword ptr [esp+4], offset aRIncludeQtco_2 ; "R:/include/QtCore/qstring.h"
		mov	dword ptr [esp], offset	aOtherThis_0 ; "&other != this"
		mov	[ebp+var_C8], 9
		call	ds:_Z9qt_assertPKcS0_i
		mov	esi, [ebp+var_180]
		mov	eax, [esi-1Ch]
		jmp	loc_6FFC8D8B
; ---------------------------------------------------------------------------

loc_6FFC9635:				; CODE XREF: sub_6FFC88E0+3F9j
		mov	eax, [ebp+var_1C]
		mov	edx, [ebp+var_114]
		jmp	loc_6FFC89D2
; ---------------------------------------------------------------------------

loc_6FFC9643:				; CODE XREF: sub_6FFC88E0+435j
		mov	eax, [ebp+var_10C]
		cmp	[ebp+var_1C], eax
		jz	loc_6FFC98F1
		lea	eax, [ebp+var_40]
		mov	[esp+4], eax
		mov	eax, [ebp+var_15C]
		mov	[ebp+var_C8], 0Fh
		add	eax, 8
		mov	[esp], eax
		call	ds:_ZN8QVariantaSERKS_
		jmp	loc_6FFC8DB6
; ---------------------------------------------------------------------------

loc_6FFC967A:				; CODE XREF: sub_6FFC88E0+33Ej
		mov	dword ptr [esp+8], 376h
		mov	dword ptr [esp+4], offset aRIncludeQtco_3 ; "R:/include/QtCore/qhash.h"
		mov	dword ptr [esp], offset	aNodeENodeNex_0	; "*node == e || (*node)->next"
		mov	[ebp+var_C8], 0FFFFFFFFh
		call	ds:_Z9qt_assertPKcS0_i
		mov	edx, [ebp+var_168]
		mov	eax, [edx]
		jmp	loc_6FFC8C24
; ---------------------------------------------------------------------------

loc_6FFC96AE:				; CODE XREF: sub_6FFC88E0+408j
		mov	[ebp+var_160], edx
		jmp	loc_6FFC8D24
; ---------------------------------------------------------------------------

loc_6FFC96B9:				; DATA XREF: sub_6FFC88E0+2Fo
		add	ebp, 18h
		mov	eax, [ebp+var_C8]
		mov	edx, [ebp+var_C4]
		cmp	eax, 1
		mov	[ebp+var_178], edx
		jz	loc_6FFC9922
		cmp	eax, 2
		jz	loc_6FFC9979
		cmp	eax, 3
		jz	loc_6FFC9931
		cmp	eax, 4
		lea	esi, [esi+0]
		jz	loc_6FFC98FC
		cmp	eax, 5
		jz	loc_6FFC988A
		cmp	eax, 6
		jz	loc_6FFC9808
		cmp	eax, 7
		nop
		lea	esi, [esi+0]
		jz	loc_6FFC985F
		cmp	eax, 8
		jz	loc_6FFC9817
		cmp	eax, 9
		jz	short loc_6FFC976E
		cmp	eax, 0Ah
		jz	short loc_6FFC9784
		cmp	eax, 0Bh
		lea	esi, [esi+0]
		jz	short loc_6FFC9799
		cmp	eax, 0Ch
		jz	short loc_6FFC97AE
		cmp	eax, 0Dh
		jz	loc_6FFC97DB
		cmp	eax, 0Eh
		jz	loc_6FFC9899
		cmp	eax, 0Fh
		lea	esi, [esi+0]
		jz	loc_6FFC98AE
		cmp	eax, 10h
		jz	loc_6FFC98C4
		mov	[ebp+var_C8], 0
		call	sub_6FFEBBF0

loc_6FFC976E:				; CODE XREF: sub_6FFC88E0+E42j
		lea	eax, [ebp+var_60]
		mov	[esp], eax
		mov	[ebp+var_C8], 0
		call	ds:_ZN8QVariantD1Ev

loc_6FFC9784:				; CODE XREF: sub_6FFC88E0+E47j
		lea	eax, [ebp+var_50]
		mov	[esp], eax
		mov	[ebp+var_C8], 0
		call	sub_6FFDF990

loc_6FFC9799:				; CODE XREF: sub_6FFC88E0+E50j
		lea	eax, [ebp+var_2C]
		mov	[esp], eax
		mov	[ebp+var_C8], 0
		call	sub_6FFE4290

loc_6FFC97AE:				; CODE XREF: sub_6FFC88E0+E55j
		lea	eax, [ebp+var_28]
		mov	[esp], eax
		mov	[ebp+var_C8], 0
		call	sub_6FFE4290
		mov	edx, [ebp+var_178]
		mov	[ebp+var_C8], 0FFFFFFFFh
		mov	[esp], edx
		call	_Unwind_SjLj_Resume
; ---------------------------------------------------------------------------

loc_6FFC97DB:				; CODE XREF: sub_6FFC88E0+E5Aj
		lea	eax, [ebp+var_24]
		mov	[esp], eax
		mov	[ebp+var_C8], 0
		call	sub_6FFE9DD0
		mov	eax, [ebp+var_178]
		mov	[ebp+var_C8], 0FFFFFFFFh
		mov	[esp], eax
		call	_Unwind_SjLj_Resume
; ---------------------------------------------------------------------------

loc_6FFC9808:				; CODE XREF: sub_6FFC88E0+E22j
		mov	[ebp+var_C8], 0
		call	sub_6FFEBBF0

loc_6FFC9817:				; CODE XREF: sub_6FFC88E0+E39j
		mov	ecx, [ebp+var_178]
		mov	[esp], ecx
		call	sub_6FFEB920
		lea	eax, [ebp+var_90]
		mov	esi, [ebp+var_180]
		mov	[esp+4], eax
		mov	eax, [ebp+var_160]
		mov	dword ptr [esp+8], 1Ch
		mov	[ebp+var_C8], 6
		mov	[esp+0Ch], esi
		mov	[esp], eax
		call	ds:_ZN8QMapData11node_deleteEPPNS_4NodeEiS1_
		call	sub_6FFEC130
; ---------------------------------------------------------------------------

loc_6FFC985F:				; CODE XREF: sub_6FFC88E0+E30j
		mov	eax, [ebp+var_178]
		mov	[esp], eax
		call	sub_6FFEB920
		mov	edx, [ebp+var_18C]
		mov	[ebp+var_C8], 7
		mov	[esp], edx
		call	sub_6FFEA140
		call	sub_6FFEC130
; ---------------------------------------------------------------------------

loc_6FFC988A:				; CODE XREF: sub_6FFC88E0+E19j
		mov	[ebp+var_C8], 0
		call	sub_6FFEBBF0

loc_6FFC9899:				; CODE XREF: sub_6FFC88E0+E63j
		lea	eax, [ebp+var_20]
		mov	[esp], eax
		mov	[ebp+var_C8], 0
		call	sub_6FFEA140

loc_6FFC98AE:				; CODE XREF: sub_6FFC88E0+E70j
		lea	eax, [ebp+var_40]
		mov	[esp], eax
		mov	[ebp+var_C8], 0
		call	ds:_ZN8QVariantD1Ev

loc_6FFC98C4:				; CODE XREF: sub_6FFC88E0+E79j
		lea	eax, [ebp+var_1C]
		mov	[esp], eax
		mov	[ebp+var_C8], 0
		call	sub_6FFE4290
		mov	esi, [ebp+var_178]
		mov	[ebp+var_C8], 0FFFFFFFFh
		mov	[esp], esi
		call	_Unwind_SjLj_Resume
; ---------------------------------------------------------------------------

loc_6FFC98F1:				; CODE XREF: sub_6FFC88E0+D6Cj
		mov	[ebp+var_160], eax
		jmp	loc_6FFC8D24
; ---------------------------------------------------------------------------

loc_6FFC98FC:				; CODE XREF: sub_6FFC88E0+E10j
		mov	eax, [ebp+var_170]
		mov	[esp], eax
		call	sub_6FFEAE50
		mov	edx, [ebp+var_178]
		mov	[ebp+var_C8], 0FFFFFFFFh
		mov	[esp], edx
		call	_Unwind_SjLj_Resume
; ---------------------------------------------------------------------------

loc_6FFC9922:				; CODE XREF: sub_6FFC88E0+DF1j
		mov	[ebp+var_C8], 0
		call	sub_6FFEBBF0

loc_6FFC9931:				; CODE XREF: sub_6FFC88E0+E03j
		mov	ecx, [ebp+var_178]
		mov	[esp], ecx
		call	sub_6FFEB920
		lea	eax, [ebp+var_90]
		mov	esi, [ebp+var_144]
		mov	[esp+4], eax
		mov	eax, [ebp+var_150]
		mov	dword ptr [esp+8], 1Ch
		mov	[ebp+var_C8], 1
		mov	[esp+0Ch], esi
		mov	[esp], eax
		call	ds:_ZN8QMapData11node_deleteEPPNS_4NodeEiS1_
		call	sub_6FFEC130
; ---------------------------------------------------------------------------

loc_6FFC9979:				; CODE XREF: sub_6FFC88E0+DFAj
		mov	eax, [ebp+var_178]
		mov	[esp], eax
		call	sub_6FFEB920
		mov	edx, [ebp+var_164]
		mov	[ebp+var_C8], 2
		mov	[esp], edx
		call	sub_6FFEA140
		call	sub_6FFEC130
sub_6FFC88E0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_6FFC99B0	proc near		; CODE XREF: sub_6FFCB780+A5p
					; sub_6FFD5A90+34p

var_A0		= dword	ptr -0A0h
var_9C		= dword	ptr -9Ch
var_90		= dword	ptr -90h
var_8C		= dword	ptr -8Ch
var_88		= dword	ptr -88h
var_84		= dword	ptr -84h
var_80		= dword	ptr -80h
var_7C		= dword	ptr -7Ch
var_78		= dword	ptr -78h
var_74		= dword	ptr -74h
var_70		= dword	ptr -70h
var_6C		= dword	ptr -6Ch
var_68		= dword	ptr -68h
var_64		= dword	ptr -64h
var_60		= dword	ptr -60h
var_5C		= byte ptr -5Ch
var_58		= dword	ptr -58h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= byte ptr -8
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h

		push	ebp
		mov	ebp, esp
		sub	esp, 0B8h
		lea	eax, [ebp+var_8]
		mov	[ebp+var_3C], eax
		lea	eax, [ebp+var_5C]
		mov	[esp], eax
		mov	[ebp+var_44], offset sub_6FFEC1F0
		mov	[ebp+var_40], offset dword_6FFECC8C
		mov	[ebp+var_38], offset sub_6FFC9DA1
		mov	[ebp+var_34], esp
		call	_Unwind_SjLj_Register
		mov	edx, [ebp+arg_0]
		mov	eax, ds:_ZN9QListData11shared_nullE
		mov	[ebp+var_90], edx
		mov	[edx], eax
		lock inc dword ptr [eax]
		setnz	dl
		mov	eax, [ebp+arg_8]
		mov	eax, [eax]
		mov	[ebp+var_24], eax
		lock inc dword ptr [eax]
		setnz	dl
		mov	eax, [ebp+var_24]
		test	byte ptr [eax+10h], 1
		jz	loc_6FFC9D10

loc_6FFC9A13:				; CODE XREF: sub_6FFC99B0+3BBj
					; sub_6FFC99B0+3D1j
		mov	eax, [ebp+var_24]
		mov	[ebp+var_20], 0
		mov	edx, [eax+8]
		mov	ecx, [eax+0Ch]
		lea	edx, [eax+edx*4+14h]
		lea	eax, [eax+ecx*4+14h]
		cmp	edx, eax
		mov	[ebp+var_1C], edx
		mov	[ebp+var_18], eax
		jz	loc_6FFC9B22
		mov	ecx, ds:_ZN8QMapData11shared_nullE
		mov	[ebp+var_64], ecx
		add	ecx, 34h
		mov	[ebp+var_60], ecx
		jmp	short loc_6FFC9A59
; ---------------------------------------------------------------------------
		align 10h

loc_6FFC9A50:				; CODE XREF: sub_6FFC99B0+16Cj
		cmp	edx, [ebp+var_18]
		jz	loc_6FFC9B22

loc_6FFC9A59:				; CODE XREF: sub_6FFC99B0+98j
		mov	eax, [edx]
		mov	edx, [ebp+var_64]
		mov	ecx, [ebp+var_60]
		mov	[ebp+var_10], edx
		lock inc dword ptr [ecx]
		setnz	dl
		mov	edx, [ebp+arg_C]
		mov	ecx, [ebp+arg_4]
		mov	[ebp+var_14], eax
		mov	[esp+8], eax
		lea	eax, [ebp+var_C]
		mov	[esp+0Ch], edx
		mov	[esp+4], ecx
		mov	[esp], eax
		mov	[ebp+var_58], 2
		call	sub_6FFC88E0
		mov	edx, [ebp+var_C]
		sub	esp, 4
		mov	eax, [ebp+var_10]
		mov	[ebp+var_7C], edx
		cmp	eax, edx
		jz	short loc_6FFC9ACD
		lock inc dword ptr [edx+34h]
		setnz	al
		mov	eax, [ebp+var_10]
		lock dec dword ptr [eax+34h]
		setnz	dl
		test	dl, dl
		jz	loc_6FFC9C70

loc_6FFC9ABA:				; CODE XREF: sub_6FFC99B0+343j
		mov	edx, [ebp+var_7C]
		mov	[ebp+var_10], edx
		test	byte ptr [edx+44h], 2
		jz	loc_6FFC9C54

loc_6FFC9ACA:				; CODE XREF: sub_6FFC99B0+2B6j
		mov	eax, [ebp+var_C]

loc_6FFC9ACD:				; CODE XREF: sub_6FFC99B0+EFj
		test	eax, eax
		jz	short loc_6FFC9AE0
		lock dec dword ptr [eax+34h]
		setnz	dl
		test	dl, dl
		jz	loc_6FFC9BD0

loc_6FFC9AE0:				; CODE XREF: sub_6FFC99B0+11Fj
					; sub_6FFC99B0+29Fj
		lea	eax, [ebp+var_14]
		mov	[esp+4], eax
		mov	eax, [ebp+var_90]
		mov	[ebp+var_58], 2
		mov	[esp], eax
		call	sub_6FFE6420
		mov	eax, [ebp+var_10]
		test	eax, eax
		jz	short loc_6FFC9B0E
		lock dec dword ptr [eax+34h]
		setnz	dl
		test	dl, dl
		jz	short loc_6FFC9B45

loc_6FFC9B0E:				; CODE XREF: sub_6FFC99B0+151j
					; sub_6FFC99B0+216j
		mov	edx, [ebp+var_1C]
		mov	eax, [ebp+var_20]
		add	edx, 4
		test	eax, eax
		mov	[ebp+var_1C], edx
		jz	loc_6FFC9A50

loc_6FFC9B22:				; CODE XREF: sub_6FFC99B0+83j
					; sub_6FFC99B0+A3j
		mov	eax, [ebp+var_24]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jz	loc_6FFC9CF8

loc_6FFC9B33:				; CODE XREF: sub_6FFC99B0+35Bj
		lea	eax, [ebp+var_5C]
		mov	[esp], eax
		call	_Unwind_SjLj_Unregister
		mov	eax, [ebp+arg_0]
		leave
		retn	4
; ---------------------------------------------------------------------------

loc_6FFC9B45:				; CODE XREF: sub_6FFC99B0+15Cj
		mov	edx, [ebp+var_10]
		mov	eax, [edx+4]
		mov	[ebp+var_84], edx
		cmp	edx, eax
		jnz	short loc_6FFC9B7A
		jmp	short loc_6FFC9BA8
; ---------------------------------------------------------------------------

loc_6FFC9B57:				; CODE XREF: sub_6FFC99B0+1E1j
					; sub_6FFC99B0+1F6j
		mov	eax, [ebp+var_74]
		mov	[ebp+var_58], 3
		add	eax, 8
		mov	[esp], eax
		call	ds:_ZN8QVariantD1Ev
		mov	ecx, [ebp+var_68]
		cmp	[ebp+var_84], ecx
		jz	short loc_6FFC9BA8
		mov	eax, ecx

loc_6FFC9B7A:				; CODE XREF: sub_6FFC99B0+1A3j
		mov	ecx, [eax+4]
		lea	edx, [eax-1Ch]
		mov	[ebp+var_74], edx
		mov	edx, [eax-1Ch]
		mov	[ebp+var_68], ecx
		lock dec dword ptr [edx]
		setnz	cl
		test	cl, cl
		jnz	short loc_6FFC9B57
		mov	eax, [eax-1Ch]
		mov	[ebp+var_58], 3
		mov	[esp], eax
		call	ds:_ZN7QString4freeEPNS_4DataE
		jmp	short loc_6FFC9B57
; ---------------------------------------------------------------------------

loc_6FFC9BA8:				; CODE XREF: sub_6FFC99B0+1A5j
					; sub_6FFC99B0+1C6j
		mov	eax, [ebp+var_84]
		mov	dword ptr [esp+4], 1Ch
		mov	[ebp+var_58], 3
		mov	[esp], eax
		call	ds:_ZN8QMapData16continueFreeDataEi
		jmp	loc_6FFC9B0E
; ---------------------------------------------------------------------------
		align 10h

loc_6FFC9BD0:				; CODE XREF: sub_6FFC99B0+12Aj
		mov	ecx, [ebp+var_C]
		mov	eax, [ecx+4]
		mov	[ebp+var_88], ecx
		cmp	ecx, eax
		jnz	short loc_6FFC9C03
		jmp	short loc_6FFC9C31
; ---------------------------------------------------------------------------

loc_6FFC9BE2:				; CODE XREF: sub_6FFC99B0+26Aj
					; sub_6FFC99B0+27Fj
		mov	eax, [ebp+var_78]
		mov	[ebp+var_58], 2
		add	eax, 8
		mov	[esp], eax
		call	ds:_ZN8QVariantD1Ev
		mov	eax, [ebp+var_6C]
		cmp	[ebp+var_88], eax
		jz	short loc_6FFC9C31

loc_6FFC9C03:				; CODE XREF: sub_6FFC99B0+22Ej
		mov	edx, [eax+4]
		lea	ecx, [eax-1Ch]
		mov	[ebp+var_78], ecx
		mov	[ebp+var_6C], edx
		mov	edx, [eax-1Ch]
		lock dec dword ptr [edx]
		setnz	cl
		test	cl, cl
		jnz	short loc_6FFC9BE2
		mov	eax, [eax-1Ch]
		mov	[ebp+var_58], 2
		mov	[esp], eax
		call	ds:_ZN7QString4freeEPNS_4DataE
		jmp	short loc_6FFC9BE2
; ---------------------------------------------------------------------------

loc_6FFC9C31:				; CODE XREF: sub_6FFC99B0+230j
					; sub_6FFC99B0+251j
		mov	edx, [ebp+var_88]
		mov	dword ptr [esp+4], 1Ch
		mov	[ebp+var_58], 2
		mov	[esp], edx
		call	ds:_ZN8QMapData16continueFreeDataEi
		jmp	loc_6FFC9AE0
; ---------------------------------------------------------------------------

loc_6FFC9C54:				; CODE XREF: sub_6FFC99B0+114j
		lea	eax, [ebp+var_10]
		mov	[esp], eax
		mov	[ebp+var_58], 1
		call	sub_6FFE3B80
		jmp	loc_6FFC9ACA
; ---------------------------------------------------------------------------
		align 10h

loc_6FFC9C70:				; CODE XREF: sub_6FFC99B0+104j
		mov	eax, [ebp+var_10]
		mov	edx, eax
		mov	[ebp+var_8C], eax
		mov	eax, [eax+4]
		cmp	edx, eax
		jnz	short loc_6FFC9CA7
		jmp	short loc_6FFC9CD5
; ---------------------------------------------------------------------------

loc_6FFC9C84:				; CODE XREF: sub_6FFC99B0+30Ej
					; sub_6FFC99B0+323j
		mov	eax, [ebp+var_80]
		mov	[ebp+var_58], 1
		add	eax, 8
		mov	[esp], eax
		call	ds:_ZN8QVariantD1Ev
		mov	ecx, [ebp+var_70]
		cmp	[ebp+var_8C], ecx
		jz	short loc_6FFC9CD5
		mov	eax, ecx

loc_6FFC9CA7:				; CODE XREF: sub_6FFC99B0+2D0j
		mov	ecx, [eax+4]
		lea	edx, [eax-1Ch]
		mov	[ebp+var_80], edx
		mov	edx, [eax-1Ch]
		mov	[ebp+var_70], ecx
		lock dec dword ptr [edx]
		setnz	cl
		test	cl, cl
		jnz	short loc_6FFC9C84
		mov	eax, [eax-1Ch]
		mov	[ebp+var_58], 1
		mov	[esp], eax
		call	ds:_ZN7QString4freeEPNS_4DataE
		jmp	short loc_6FFC9C84
; ---------------------------------------------------------------------------

loc_6FFC9CD5:				; CODE XREF: sub_6FFC99B0+2D2j
					; sub_6FFC99B0+2F3j
		mov	eax, [ebp+var_8C]
		mov	dword ptr [esp+4], 1Ch
		mov	[ebp+var_58], 1
		mov	[esp], eax
		call	ds:_ZN8QMapData16continueFreeDataEi
		jmp	loc_6FFC9ABA
; ---------------------------------------------------------------------------

loc_6FFC9CF8:				; CODE XREF: sub_6FFC99B0+17Dj
		mov	eax, [ebp+var_24]
		mov	[ebp+var_58], 4
		mov	[esp], eax
		call	ds:_Z5qFreePv
		jmp	loc_6FFC9B33
; ---------------------------------------------------------------------------

loc_6FFC9D10:				; CODE XREF: sub_6FFC99B0+5Dj
		mov	edx, [eax+8]
		lea	edx, [eax+edx*4+14h]
		mov	eax, [eax+4]
		mov	[ebp+var_A0], edx
		mov	[ebp+var_58], 4
		mov	[esp+4], eax
		lea	eax, [ebp+var_24]
		mov	[esp], eax
		call	ds:_ZN9QListData6detachEi
		mov	[ebp+var_9C], eax
		mov	eax, [ebp+var_24]
		mov	edx, [eax+8]
		mov	ecx, [eax+0Ch]
		lea	edx, [eax+edx*4+14h]
		cmp	[ebp+var_A0], edx
		jz	short loc_6FFC9D5D
		lea	eax, [eax+ecx*4+14h]
		sub	eax, edx
		cmp	eax, 3
		jg	short loc_6FFC9D86

loc_6FFC9D5D:				; CODE XREF: sub_6FFC99B0+3A0j
					; sub_6FFC99B0+3EFj
		mov	edx, [ebp+var_9C]
		lock dec dword ptr [edx]
		setnz	al
		test	al, al
		jnz	loc_6FFC9A13
		mov	[esp], edx
		mov	[ebp+var_58], 4
		call	ds:_Z5qFreePv
		jmp	loc_6FFC9A13
; ---------------------------------------------------------------------------

loc_6FFC9D86:				; CODE XREF: sub_6FFC99B0+3ABj
		mov	ecx, [ebp+var_A0]
		and	eax, 0FFFFFFFCh
		mov	[esp+8], eax	; size_t
		mov	[esp], edx	; void *
		mov	[esp+4], ecx	; void *
		call	memcpy
		jmp	short loc_6FFC9D5D
sub_6FFC99B0	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn

sub_6FFC9DA1	proc near		; DATA XREF: sub_6FFC99B0+23o
		add	ebp, 8
		mov	eax, [ebp-58h]
		mov	ecx, [ebp-54h]
		cmp	eax, 1
		mov	[ebp-98h], ecx
		jz	short loc_6FFC9DD1
		cmp	eax, 2
		jz	short loc_6FFC9DE3
		cmp	eax, 3
		jz	short loc_6FFC9E1B
		lea	eax, [ebp-0Ch]
		mov	[esp+0], eax
		mov	dword ptr [ebp-58h], 0
		call	sub_6FFE4290

loc_6FFC9DD1:				; CODE XREF: sub_6FFC9DA1+12j
		lea	eax, [ebp-10h]
		mov	[esp+0], eax
		mov	dword ptr [ebp-58h], 0
		call	sub_6FFE4290

loc_6FFC9DE3:				; CODE XREF: sub_6FFC9DA1+17j
		mov	ecx, [ebp-98h]
		mov	eax, [ebp-24h]
		mov	[ebp-94h], ecx
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jnz	short loc_6FFC9E0F
		mov	eax, [ebp-24h]
		mov	dword ptr [ebp-58h], 0
		mov	[esp+0], eax
		call	ds:_Z5qFreePv

loc_6FFC9E0F:				; CODE XREF: sub_6FFC9DA1+59j
		mov	eax, [ebp-94h]
		mov	[ebp-98h], eax

loc_6FFC9E1B:				; CODE XREF: sub_6FFC9DA1+1Cj
		mov	edx, [ebp+8]
		mov	dword ptr [ebp-58h], 0
		mov	[esp+0], edx
		call	sub_6FFE6AF0
		mov	ecx, [ebp-98h]
		mov	dword ptr [ebp-58h], 0FFFFFFFFh
		mov	[esp+0], ecx
		call	_Unwind_SjLj_Resume
sub_6FFC9DA1	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_6FFC9E50	proc near		; CODE XREF: sub_6FFCB780+31Bp
					; sub_6FFD5BA0+30j

var_8C		= dword	ptr -8Ch
var_88		= dword	ptr -88h
var_81		= byte ptr -81h
var_80		= dword	ptr -80h
var_7C		= byte ptr -7Ch
var_78		= dword	ptr -78h
var_64		= dword	ptr -64h
var_60		= dword	ptr -60h
var_5C		= dword	ptr -5Ch
var_58		= dword	ptr -58h
var_54		= dword	ptr -54h
var_40		= dword	ptr -40h
var_38		= byte ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= byte ptr -18h
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		lea	eax, [ebp+var_18]
		sub	esp, 0FCh
		mov	[ebp+var_5C], eax
		lea	eax, [ebp+var_7C]
		mov	[esp], eax
		mov	[ebp+var_64], offset sub_6FFEC1F0
		mov	[ebp+var_60], offset dword_6FFECC98
		mov	[ebp+var_58], offset sub_6FFCA42F
		mov	[ebp+var_54], esp
		call	_Unwind_SjLj_Register
		mov	eax, [ebp+arg_4]
		mov	[esp+4], eax
		mov	eax, [ebp+arg_0]
		mov	eax, [eax+8]
		mov	eax, [eax+8]
		mov	[ebp+var_78], 0FFFFFFFFh
		mov	[esp], eax
		call	sub_6FFC1B40
		test	eax, eax
		mov	[ebp+var_80], eax
		jz	loc_6FFCA000
		lea	eax, [ebp+var_40]
		mov	[esp], eax
		mov	dword ptr [esp+4], 0
		mov	[ebp+var_78], 0FFFFFFFFh
		call	ds:_ZN7QObjectC2EPS_
		mov	eax, [ebp+var_80]
		lea	edx, [ebp+var_40]
		mov	[ebp+var_40], offset off_6FFF9DE8
		mov	[ebp+var_38], 0
		mov	[esp+4], edx
		mov	[esp], eax
		mov	[ebp+var_78], 9
		call	ds:_ZN7QObject18installEventFilterEPS_
		mov	edx, [ebp+var_80]
		mov	dword ptr [esp+5Ch], 0
		mov	dword ptr [esp+60h], 0
		mov	dword ptr [esp+54h], 0
		mov	dword ptr [esp+58h], 0
		mov	dword ptr [esp+4Ch], 0
		mov	dword ptr [esp+50h], 0
		mov	dword ptr [esp+44h], 0
		mov	dword ptr [esp+48h], 0
		mov	dword ptr [esp+3Ch], 0
		mov	dword ptr [esp+40h], 0
		mov	dword ptr [esp+34h], 0
		mov	dword ptr [esp+38h], 0
		mov	dword ptr [esp+2Ch], 0
		mov	dword ptr [esp+30h], 0
		mov	dword ptr [esp+24h], 0
		mov	dword ptr [esp+28h], 0
		mov	dword ptr [esp+1Ch], 0
		mov	dword ptr [esp+20h], 0
		mov	dword ptr [esp+14h], 0
		mov	dword ptr [esp+18h], 0
		mov	dword ptr [esp+0Ch], 0
		mov	dword ptr [esp+10h], 0
		mov	dword ptr [esp+8], 0
		mov	dword ptr [esp+4], offset aAbouttoshow ; "aboutToShow"
		mov	[esp], edx
		call	ds:_ZN11QMetaObject12invokeMethodEP7QObjectPKcN2Qt14ConnectionTypeE22QGenericReturnArgument16QGenericArgumentS7_S7_S7_S7_S7_S7_S7_S7_S7_
		movzx	eax, [ebp+var_38]
		mov	[ebp+var_40], offset off_6FFF9DE8
		mov	[ebp+var_78], 0FFFFFFFFh
		mov	[ebp+var_81], al
		lea	eax, [ebp+var_40]
		mov	[esp], eax
		call	ds:_ZN7QObjectD2Ev

loc_6FFC9FDF:				; CODE XREF: sub_6FFC9E50+418j
					; sub_6FFC9E50+427j
		lea	eax, [ebp+var_7C]
		mov	[esp], eax
		call	_Unwind_SjLj_Unregister
		movzx	eax, [ebp+var_81]
		lea	esp, [ebp-0Ch]
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6FFCA000:				; CODE XREF: sub_6FFC9E50+59j
		mov	dword ptr [esp], 18h ; size_t
		call	sub_6FFEAE70
		mov	[ebp+var_20], 2
		mov	[ebp+var_78], 8
		mov	[ebp+var_88], eax
		lea	eax, [ebp+var_20]
		mov	edx, [ebp+var_88]
		mov	[esp+8], eax
		mov	eax, [ebp+var_88]
		mov	[esp], edx
		add	eax, 8
		mov	[esp+4], eax
		call	ds:_ZN11QTextStreamC1EP7QString6QFlagsIN9QIODevice12OpenModeFlagEE
		mov	eax, ds:_ZN7QString11shared_nullE
		mov	edx, [ebp+var_88]
		mov	[edx+8], eax
		lock inc dword ptr [eax]
		setnz	dl
		mov	eax, [ebp+var_88]
		mov	dword ptr [eax+0Ch], 1
		mov	dword ptr [eax+10h], 1
		mov	byte ptr [eax+15h], 1
		mov	byte ptr [eax+14h], 0
		mov	[ebp+var_1C], eax
		lea	eax, [ebp+var_24]
		mov	dword ptr [esp+8], 0FFFFFFFFh
		mov	dword ptr [esp+4], offset a31m_0 ; "\x1B[31m"
		mov	[esp], eax
		mov	[ebp+var_78], 0Ah
		call	ds:_ZN7QString9fromAsciiEPKci
		sub	esp, 4
		lea	eax, [ebp+var_24]
		mov	[esp+4], eax
		mov	eax, [ebp+var_1C]
		mov	[ebp+var_78], 7
		mov	[esp], eax
		call	ds:_ZN11QTextStreamlsERK7QString
		mov	eax, [ebp+var_24]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jz	loc_6FFCA350

loc_6FFCA0C7:				; CODE XREF: sub_6FFC9E50+513j
		mov	eax, [ebp+var_1C]
		cmp	byte ptr [eax+14h], 0
		jnz	loc_6FFCA330

loc_6FFCA0D4:				; CODE XREF: sub_6FFC9E50+4F8j
		lea	eax, [ebp+var_28]
		mov	dword ptr [esp+8], 0FFFFFFFFh
		mov	dword ptr [esp+4], offset aBoolDbusmenuex ; "bool DBusMenuExporterDBus::AboutToShow("...
		mov	[esp], eax
		mov	[ebp+var_78], 0Ah
		call	ds:_ZN7QString9fromAsciiEPKci
		sub	esp, 4
		lea	eax, [ebp+var_28]
		mov	[esp+4], eax
		mov	eax, [ebp+var_1C]
		mov	[ebp+var_78], 6
		mov	[esp], eax
		call	ds:_ZN11QTextStreamlsERK7QString
		mov	eax, [ebp+var_28]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jz	loc_6FFCA315

loc_6FFCA125:				; CODE XREF: sub_6FFC9E50+4D8j
		mov	eax, [ebp+var_1C]
		cmp	byte ptr [eax+14h], 0
		jnz	loc_6FFCA2F8

loc_6FFCA132:				; CODE XREF: sub_6FFC9E50+4C0j
		lea	eax, [ebp+var_2C]
		mov	dword ptr [esp+8], 0FFFFFFFFh
		mov	dword ptr [esp+4], offset a0m_0	; "\x1B[0m:"
		mov	[esp], eax
		mov	[ebp+var_78], 0Ah
		call	ds:_ZN7QString9fromAsciiEPKci
		sub	esp, 4
		lea	eax, [ebp+var_2C]
		mov	[esp+4], eax
		mov	eax, [ebp+var_1C]
		mov	[ebp+var_78], 5
		mov	[esp], eax
		call	ds:_ZN11QTextStreamlsERK7QString
		mov	eax, [ebp+var_2C]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jz	loc_6FFCA2E0

loc_6FFCA183:				; CODE XREF: sub_6FFC9E50+4A3j
		mov	eax, [ebp+var_1C]
		cmp	byte ptr [eax+14h], 0
		jnz	loc_6FFCA2C0

loc_6FFCA190:				; CODE XREF: sub_6FFC9E50+48Bj
		mov	byte ptr [eax+14h], 1
		mov	dword ptr [esp+4], 20h
		mov	[esp], eax
		mov	[ebp+var_78], 0Ah
		call	ds:_ZN11QTextStreamlsEc
		lea	eax, [ebp+var_30]
		mov	dword ptr [esp+8], 0FFFFFFFFh
		mov	dword ptr [esp+4], offset aConditionFai_4 ; "Condition failed: menu"
		mov	[esp], eax
		call	ds:_ZN7QString9fromAsciiEPKci
		sub	esp, 4
		lea	eax, [ebp+var_30]
		mov	[esp+4], eax
		mov	eax, [ebp+var_1C]
		mov	[ebp+var_78], 4
		mov	[esp], eax
		call	ds:_ZN11QTextStreamlsERK7QString
		mov	eax, [ebp+var_30]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jz	loc_6FFCA2A8

loc_6FFCA1F6:				; CODE XREF: sub_6FFC9E50+46Bj
		mov	edx, [ebp+var_1C]
		cmp	byte ptr [edx+14h], 0
		mov	[ebp+var_8C], edx
		jnz	short loc_6FFCA280

loc_6FFCA205:				; CODE XREF: sub_6FFC9E50+453j
		mov	eax, [edx+0Ch]
		sub	eax, 1
		test	eax, eax
		mov	[edx+0Ch], eax
		jnz	short loc_6FFCA270
		cmp	byte ptr [edx+15h], 0
		jnz	loc_6FFCA386

loc_6FFCA21C:				; CODE XREF: sub_6FFC9E50+5ADj
					; sub_6FFC9E50+5CEj
		mov	ebx, [ebp+var_8C]
		test	ebx, ebx
		jz	short loc_6FFCA270
		mov	edx, [ebp+var_8C]
		mov	eax, [edx+8]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jz	loc_6FFCA368

loc_6FFCA23D:				; CODE XREF: sub_6FFC9E50+531j
		mov	eax, [ebp+var_8C]
		mov	[ebp+var_78], 0FFFFFFFFh
		mov	[esp], eax
		call	ds:_ZN11QTextStreamD1Ev
		mov	edx, [ebp+var_8C]
		mov	[esp], edx
		call	sub_6FFEAE50
		mov	[ebp+var_81], 0
		jmp	loc_6FFC9FDF
; ---------------------------------------------------------------------------
		align 10h

loc_6FFCA270:				; CODE XREF: sub_6FFC9E50+3C0j
					; sub_6FFC9E50+3D4j
		mov	[ebp+var_81], 0
		jmp	loc_6FFC9FDF
; ---------------------------------------------------------------------------
		align 10h

loc_6FFCA280:				; CODE XREF: sub_6FFC9E50+3B3j
		mov	dword ptr [esp+4], 20h
		mov	[esp], edx
		mov	[ebp+var_78], 0Ah
		call	ds:_ZN11QTextStreamlsEc
		mov	eax, [ebp+var_1C]
		mov	[ebp+var_8C], eax
		mov	edx, eax
		jmp	loc_6FFCA205
; ---------------------------------------------------------------------------

loc_6FFCA2A8:				; CODE XREF: sub_6FFC9E50+3A0j
		mov	eax, [ebp+var_30]
		mov	[ebp+var_78], 0Ah
		mov	[esp], eax
		call	ds:_ZN7QString4freeEPNS_4DataE
		jmp	loc_6FFCA1F6
; ---------------------------------------------------------------------------

loc_6FFCA2C0:				; CODE XREF: sub_6FFC9E50+33Aj
		mov	dword ptr [esp+4], 20h
		mov	[esp], eax
		mov	[ebp+var_78], 0Ah
		call	ds:_ZN11QTextStreamlsEc
		mov	eax, [ebp+var_1C]
		jmp	loc_6FFCA190
; ---------------------------------------------------------------------------

loc_6FFCA2E0:				; CODE XREF: sub_6FFC9E50+32Dj
		mov	eax, [ebp+var_2C]
		mov	[ebp+var_78], 0Ah
		mov	[esp], eax
		call	ds:_ZN7QString4freeEPNS_4DataE
		jmp	loc_6FFCA183
; ---------------------------------------------------------------------------

loc_6FFCA2F8:				; CODE XREF: sub_6FFC9E50+2DCj
		mov	dword ptr [esp+4], 20h
		mov	[esp], eax
		mov	[ebp+var_78], 0Ah
		call	ds:_ZN11QTextStreamlsEc
		jmp	loc_6FFCA132
; ---------------------------------------------------------------------------

loc_6FFCA315:				; CODE XREF: sub_6FFC9E50+2CFj
		mov	eax, [ebp+var_28]
		mov	[ebp+var_78], 0Ah
		mov	[esp], eax
		call	ds:_ZN7QString4freeEPNS_4DataE
		jmp	loc_6FFCA125
; ---------------------------------------------------------------------------
		align 10h

loc_6FFCA330:				; CODE XREF: sub_6FFC9E50+27Ej
		mov	dword ptr [esp+4], 20h
		mov	[esp], eax
		mov	[ebp+var_78], 0Ah
		call	ds:_ZN11QTextStreamlsEc
		jmp	loc_6FFCA0D4
; ---------------------------------------------------------------------------
		align 10h

loc_6FFCA350:				; CODE XREF: sub_6FFC9E50+271j
		mov	eax, [ebp+var_24]
		mov	[ebp+var_78], 0Ah
		mov	[esp], eax
		call	ds:_ZN7QString4freeEPNS_4DataE
		jmp	loc_6FFCA0C7
; ---------------------------------------------------------------------------

loc_6FFCA368:				; CODE XREF: sub_6FFC9E50+3E7j
		mov	edx, [ebp+var_8C]
		mov	eax, [edx+8]
		mov	[ebp+var_78], 1
		mov	[esp], eax
		call	ds:_ZN7QString4freeEPNS_4DataE
		jmp	loc_6FFCA23D
; ---------------------------------------------------------------------------

loc_6FFCA386:				; CODE XREF: sub_6FFC9E50+3C6j
		lea	eax, [ebp+var_34]
		add	edx, 8
		mov	[esp+4], edx
		mov	[esp], eax
		mov	[ebp+var_78], 3
		call	ds:_ZNK7QString11toLocal8BitEv
		mov	eax, [ebp+var_34]
		sub	esp, 4
		mov	edx, [eax]
		cmp	edx, 1
		jz	short loc_6FFCA423

loc_6FFCA3AD:				; CODE XREF: sub_6FFC9E50+5DBj
		mov	eax, [eax+8]
		mov	[ebp+var_78], 2
		mov	[esp+4], eax
		lea	eax, [ebp+var_34]
		mov	[esp], eax
		call	ds:_ZN10QByteArray7reallocEi
		mov	eax, [ebp+var_34]
		mov	edx, [eax+0Ch]

loc_6FFCA3CD:				; CODE XREF: sub_6FFC9E50+5DDj
		mov	eax, [ebp+var_1C]
		mov	[esp+4], edx
		mov	eax, [eax+10h]
		mov	[ebp+var_78], 2
		mov	[esp], eax
		call	ds:_Z17qt_message_output9QtMsgTypePKc
		mov	eax, [ebp+var_34]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jz	short loc_6FFCA402

loc_6FFCA3F4:				; CODE XREF: sub_6FFCA42F+1CFj
		mov	eax, [ebp+var_1C]
		mov	[ebp+var_8C], eax
		jmp	loc_6FFCA21C
; ---------------------------------------------------------------------------

loc_6FFCA402:				; CODE XREF: sub_6FFC9E50+5A2j
		mov	eax, [ebp+var_34]
		mov	[ebp+var_78], 3
		mov	[esp], eax
		call	ds:_Z5qFreePv
		mov	edx, [ebp+var_1C]
		mov	[ebp+var_8C], edx
		jmp	loc_6FFCA21C
; ---------------------------------------------------------------------------

loc_6FFCA423:				; CODE XREF: sub_6FFC9E50+55Bj
		mov	edx, [eax+0Ch]
		lea	ecx, [eax+10h]
		cmp	edx, ecx
		jnz	short loc_6FFCA3AD
		jmp	short loc_6FFCA3CD
sub_6FFC9E50	endp


; =============== S U B	R O U T	I N E =======================================


sub_6FFCA42F	proc near		; DATA XREF: sub_6FFC9E50+26o
		add	ebp, 18h
		mov	eax, [ebp-78h]
		mov	edx, [ebp-74h]
		cmp	eax, 1
		mov	[ebp-94h], edx
		mov	edx, [ebp-70h]
		jz	short loc_6FFCA4C3
		cmp	eax, 2
		jz	loc_6FFCA507
		cmp	eax, 3
		jz	loc_6FFCA572
		cmp	eax, 4
		nop
		lea	esi, [esi+0]
		jz	loc_6FFCA586
		cmp	eax, 5
		jz	loc_6FFCA55E
		cmp	eax, 6
		jz	loc_6FFCA525
		cmp	eax, 7
		nop
		lea	esi, [esi+0]
		jz	loc_6FFCA59A
		cmp	eax, 8
		jz	loc_6FFCA5BD
		cmp	eax, 9
		jz	loc_6FFCA537
		mov	eax, [ebp-8Ch]
		mov	dword ptr [ebp-78h], 0
		mov	[esp+0], eax
		call	ds:_ZN11QTextStreamD1Ev
		mov	edx, [ebp-94h]
		mov	dword ptr [ebp-78h], 0FFFFFFFFh
		mov	[esp+0], edx
		call	_Unwind_SjLj_Resume
; ---------------------------------------------------------------------------

loc_6FFCA4C3:				; CODE XREF: sub_6FFCA42F+15j
		mov	eax, [ebp-94h]
		mov	[ebp-98h], edx
		mov	[ebp-90h], eax
		mov	eax, [ebp-34h]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jnz	short loc_6FFCA4F5
		mov	eax, [ebp-34h]
		mov	dword ptr [ebp-78h], 0
		mov	[esp+0], eax
		call	ds:_Z5qFreePv

loc_6FFCA4F5:				; CODE XREF: sub_6FFCA42F+B1j
		mov	edx, [ebp-90h]
		mov	[ebp-94h], edx
		mov	edx, [ebp-98h]

loc_6FFCA507:				; CODE XREF: sub_6FFCA42F+1Aj
		cmp	edx, 1
		jz	loc_6FFCA5E4
		mov	eax, [ebp-94h]
		mov	dword ptr [ebp-78h], 0FFFFFFFFh
		mov	[esp+0], eax
		call	_Unwind_SjLj_Resume
; ---------------------------------------------------------------------------

loc_6FFCA525:				; CODE XREF: sub_6FFCA42F+43j
		lea	eax, [ebp-24h]
		mov	[esp+0], eax
		mov	dword ptr [ebp-78h], 0
		call	sub_6FFEA140

loc_6FFCA537:				; CODE XREF: sub_6FFCA42F+63j
					; sub_6FFCA42F+141j ...
		lea	eax, [ebp-1Ch]
		mov	[esp+0], eax
		mov	dword ptr [ebp-78h], 0
		call	sub_6FFE9DD0
		mov	eax, [ebp-94h]
		mov	dword ptr [ebp-78h], 0FFFFFFFFh
		mov	[esp+0], eax
		call	_Unwind_SjLj_Resume
; ---------------------------------------------------------------------------

loc_6FFCA55E:				; CODE XREF: sub_6FFCA42F+3Aj
		lea	eax, [ebp-28h]
		mov	[esp+0], eax
		mov	dword ptr [ebp-78h], 0
		call	sub_6FFEA140
		jmp	short loc_6FFCA537
; ---------------------------------------------------------------------------

loc_6FFCA572:				; CODE XREF: sub_6FFCA42F+23j
		lea	eax, [ebp-30h]
		mov	[esp+0], eax
		mov	dword ptr [ebp-78h], 0
		call	sub_6FFEA140
		jmp	short loc_6FFCA537
; ---------------------------------------------------------------------------

loc_6FFCA586:				; CODE XREF: sub_6FFCA42F+31j
		lea	eax, [ebp-2Ch]
		mov	[esp+0], eax
		mov	dword ptr [ebp-78h], 0
		call	sub_6FFEA140
		jmp	short loc_6FFCA537
; ---------------------------------------------------------------------------

loc_6FFCA59A:				; CODE XREF: sub_6FFCA42F+51j
		mov	edx, [ebp-88h]
		mov	[esp+0], edx
		call	sub_6FFEAE50
		mov	eax, [ebp-94h]
		mov	dword ptr [ebp-78h], 0FFFFFFFFh
		mov	[esp+0], eax
		call	_Unwind_SjLj_Resume
; ---------------------------------------------------------------------------

loc_6FFCA5BD:				; CODE XREF: sub_6FFCA42F+5Aj
		lea	eax, [ebp-40h]
		mov	[esp+0], eax
		mov	dword ptr [ebp-78h], 0
		call	sub_6FFDFA90
		mov	edx, [ebp-94h]
		mov	dword ptr [ebp-78h], 0FFFFFFFFh
		mov	[esp+0], edx
		call	_Unwind_SjLj_Resume
; ---------------------------------------------------------------------------

loc_6FFCA5E4:				; CODE XREF: sub_6FFCA42F+DBj
		mov	edx, [ebp-94h]
		mov	[esp+0], edx
		call	sub_6FFEB920
		mov	dword ptr [ebp-78h], 0
		call	sub_6FFEBBF0
		jmp	loc_6FFCA3F4
sub_6FFCA42F	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_6FFCA610	proc near		; CODE XREF: sub_6FFCB780+177p
					; sub_6FFD5980+34p

var_B4		= dword	ptr -0B4h
var_B0		= dword	ptr -0B0h
var_AC		= dword	ptr -0ACh
var_A8		= dword	ptr -0A8h
var_A4		= dword	ptr -0A4h
var_A0		= dword	ptr -0A0h
var_9C		= dword	ptr -9Ch
var_98		= dword	ptr -98h
var_94		= dword	ptr -94h
var_90		= dword	ptr -90h
var_8C		= dword	ptr -8Ch
var_88		= dword	ptr -88h
var_84		= dword	ptr -84h
var_80		= dword	ptr -80h
var_7C		= byte ptr -7Ch
var_78		= dword	ptr -78h
var_64		= dword	ptr -64h
var_60		= dword	ptr -60h
var_5C		= dword	ptr -5Ch
var_58		= dword	ptr -58h
var_54		= dword	ptr -54h
var_48		= dword	ptr -48h
var_40		= dword	ptr -40h
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= byte ptr -18h
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		lea	eax, [ebp+var_18]
		sub	esp, 0CCh
		mov	[ebp+var_5C], eax
		lea	eax, [ebp+var_7C]
		mov	[esp], eax
		mov	[ebp+var_64], offset sub_6FFEC1F0
		mov	[ebp+var_60], offset dword_6FFECCBC
		mov	[ebp+var_58], offset sub_6FFCAE51
		mov	[ebp+var_54], esp
		call	_Unwind_SjLj_Register
		mov	eax, [ebp+arg_4]
		mov	eax, [eax+8]
		mov	eax, [eax+8]
		mov	[ebp+var_9C], eax
		mov	esi, [eax+14h]
		mov	ecx, [esi+3Ch]
		test	ecx, ecx
		jnz	loc_6FFCA8F1

loc_6FFCA662:				; CODE XREF: sub_6FFCA610+2E6j
					; sub_6FFCA610+310j ...
		mov	dword ptr [esp], 18h ; size_t
		mov	[ebp+var_78], 0FFFFFFFFh
		call	sub_6FFEAE70
		mov	[ebp+var_24], 2
		mov	[ebp+var_78], 8
		mov	[ebp+var_A8], eax
		lea	eax, [ebp+var_24]
		mov	[esp+8], eax
		mov	eax, [ebp+var_A8]
		add	eax, 8
		mov	[esp+4], eax
		mov	eax, [ebp+var_A8]
		mov	[esp], eax
		call	ds:_ZN11QTextStreamC1EP7QString6QFlagsIN9QIODevice12OpenModeFlagEE
		mov	eax, ds:_ZN7QString11shared_nullE
		mov	edx, [ebp+var_A8]
		mov	[edx+8], eax
		lock inc dword ptr [eax]
		setnz	dl
		mov	ecx, [ebp+var_A8]
		lea	eax, [ebp+var_28]
		mov	dword ptr [ecx+0Ch], 1
		mov	dword ptr [ecx+10h], 1
		mov	byte ptr [ecx+15h], 1
		mov	byte ptr [ecx+14h], 0
		mov	[ebp+var_1C], ecx
		mov	dword ptr [esp+8], 0FFFFFFFFh
		mov	dword ptr [esp+4], offset a31m_0 ; "\x1B[31m"
		mov	[esp], eax
		mov	[ebp+var_78], 0Bh
		call	ds:_ZN7QString9fromAsciiEPKci
		sub	esp, 4
		lea	eax, [ebp+var_28]
		mov	[esp+4], eax
		mov	eax, [ebp+var_1C]
		mov	[ebp+var_78], 7
		mov	[esp], eax
		call	ds:_ZN11QTextStreamlsERK7QString
		mov	eax, [ebp+var_28]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jz	loc_6FFCAC78

loc_6FFCA730:				; CODE XREF: sub_6FFCA610+67Bj
		mov	eax, [ebp+var_1C]
		cmp	byte ptr [eax+14h], 0
		jnz	loc_6FFCACD0

loc_6FFCA73D:				; CODE XREF: sub_6FFCA610+6D8j
		lea	eax, [ebp+var_2C]
		mov	dword ptr [esp+8], 0FFFFFFFFh
		mov	dword ptr [esp+4], offset aQdbusvariantDb ; "QDBusVariant DBusMenuExporterDBus::GetP"...
		mov	[esp], eax
		mov	[ebp+var_78], 0Bh
		call	ds:_ZN7QString9fromAsciiEPKci
		sub	esp, 4
		lea	eax, [ebp+var_2C]
		mov	[esp+4], eax
		mov	eax, [ebp+var_1C]
		mov	[ebp+var_78], 6
		mov	[esp], eax
		call	ds:_ZN11QTextStreamlsERK7QString
		mov	eax, [ebp+var_2C]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jz	loc_6FFCACB7

loc_6FFCA78E:				; CODE XREF: sub_6FFCA610+6BAj
		mov	eax, [ebp+var_1C]
		cmp	byte ptr [eax+14h], 0
		jnz	loc_6FFCAD40

loc_6FFCA79B:				; CODE XREF: sub_6FFCA610+748j
		lea	eax, [ebp+var_30]
		mov	dword ptr [esp+8], 0FFFFFFFFh
		mov	dword ptr [esp+4], offset a0m_0	; "\x1B[0m:"
		mov	[esp], eax
		mov	[ebp+var_78], 0Bh
		call	ds:_ZN7QString9fromAsciiEPKci
		sub	esp, 4
		lea	eax, [ebp+var_30]
		mov	[esp+4], eax
		mov	eax, [ebp+var_1C]
		mov	[ebp+var_78], 5
		mov	[esp], eax
		call	ds:_ZN11QTextStreamlsERK7QString
		mov	eax, [ebp+var_30]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jz	loc_6FFCAD28

loc_6FFCA7EC:				; CODE XREF: sub_6FFCA610+72Bj
		mov	eax, [ebp+var_1C]
		cmp	byte ptr [eax+14h], 0
		jnz	loc_6FFCAD08

loc_6FFCA7F9:				; CODE XREF: sub_6FFCA610+713j
		mov	byte ptr [eax+14h], 1
		mov	eax, [ebp+var_1C]
		mov	dword ptr [esp+4], 20h
		mov	[ebp+var_78], 0Bh
		mov	[esp], eax
		call	ds:_ZN11QTextStreamlsEc
		lea	eax, [ebp+var_34]
		mov	dword ptr [esp+8], 0FFFFFFFFh
		mov	dword ptr [esp+4], offset aConditionFai_3 ; "Condition failed: action"
		mov	[esp], eax
		call	ds:_ZN7QString9fromAsciiEPKci
		sub	esp, 4
		lea	eax, [ebp+var_34]
		mov	[esp+4], eax
		mov	eax, [ebp+var_1C]
		mov	[ebp+var_78], 4
		mov	[esp], eax
		call	ds:_ZN11QTextStreamlsERK7QString
		mov	eax, [ebp+var_34]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jz	loc_6FFCACF0

loc_6FFCA862:				; CODE XREF: sub_6FFCA610+6F3j
		mov	eax, [ebp+var_1C]
		cmp	byte ptr [eax+14h], 0
		jnz	loc_6FFCAC97

loc_6FFCA86F:				; CODE XREF: sub_6FFCA610+6A2j
		mov	edx, [eax+0Ch]
		sub	edx, 1
		test	edx, edx
		mov	[eax+0Ch], edx
		jnz	short loc_6FFCA8D4
		mov	eax, [ebp+var_1C]
		cmp	byte ptr [eax+15h], 0
		mov	[ebp+var_B0], eax
		jnz	loc_6FFCADA6

loc_6FFCA88F:				; CODE XREF: sub_6FFCA610+80Fj
					; sub_6FFCA610+830j
		mov	edx, [ebp+var_B0]
		test	edx, edx
		jz	short loc_6FFCA8D4
		mov	ecx, [ebp+var_B0]
		mov	eax, [ecx+8]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jz	loc_6FFCAD5D

loc_6FFCA8B0:				; CODE XREF: sub_6FFCA610+760j
		mov	edx, [ebp+var_B0]
		mov	[ebp+var_78], 0FFFFFFFFh
		mov	[esp], edx
		call	ds:_ZN11QTextStreamD1Ev
		mov	ecx, [ebp+var_B0]
		mov	[esp], ecx
		call	sub_6FFEAE50

loc_6FFCA8D4:				; CODE XREF: sub_6FFCA610+26Aj
					; sub_6FFCA610+287j
		mov	edx, [ebp+arg_0]
		mov	eax, [edx+8]
		mov	dword ptr [edx], 0
		and	eax, 0C0000000h
		mov	[edx+8], eax
		mov	byte ptr [edx+0Bh], 80h
		jmp	loc_6FFCAA89
; ---------------------------------------------------------------------------

loc_6FFCA8F1:				; CODE XREF: sub_6FFCA610+4Cj
		mov	edx, [esi+38h]
		test	edx, edx
		js	loc_6FFCA662
		mov	edi, [ebp+arg_8]
		mov	ebx, esi
		mov	ecx, esi

loc_6FFCA903:				; CODE XREF: sub_6FFCA610+30Aj
					; sub_6FFCA610+592j
		mov	eax, [ecx+edx*4+4]
		cmp	eax, ebx
		jz	short loc_6FFCA914
		cmp	[eax-8], edi
		jl	loc_6FFCABA0

loc_6FFCA914:				; CODE XREF: sub_6FFCA610+2F9j
		sub	edx, 1
		cmp	edx, 0FFFFFFFFh
		jnz	short loc_6FFCA903
		cmp	esi, eax
		xchg	ax, ax
		jz	loc_6FFCA662
		mov	ecx, [ebp+arg_8]
		lea	edx, [eax-8]
		cmp	[eax-8], ecx
		jg	loc_6FFCA662
		mov	edx, [edx+4]
		test	edx, edx
		mov	[ebp+var_A4], edx
		jz	loc_6FFCA662
		mov	eax, [ebp+var_9C]
		mov	ecx, [eax+10h]
		mov	eax, [ecx+0Ch]
		test	eax, eax
		jz	loc_6FFCAAA1
		mov	esi, [ecx+18h]
		mov	ebx, ecx
		mov	eax, ecx
		test	esi, esi
		jz	short loc_6FFCA9E0
		mov	edx, [ebp+var_A4]
		mov	eax, edx
		mov	[ebp+var_B4], edx
		xor	edx, edx
		div	esi
		mov	eax, [ecx+4]
		mov	ebx, edx
		shl	ebx, 2
		mov	[ebp+var_A0], ebx
		add	[ebp+var_A0], eax
		mov	eax, [ebp+var_A0]
		mov	edx, [eax]
		cmp	edx, ecx
		jz	short loc_6FFCA9A1
		mov	edi, [edx]
		test	edi, edi
		jz	loc_6FFCAD75

loc_6FFCA9A1:				; CODE XREF: sub_6FFCA610+385j
					; sub_6FFCA610+791j
		mov	ecx, [ebp+var_9C]
		mov	eax, [ecx+10h]
		cmp	eax, edx
		jz	loc_6FFCAAA1
		mov	ecx, [ebp+var_B4]
		mov	ebx, [ebp+var_A0]
		mov	esi, [ebp+var_A4]
		jmp	short loc_6FFCA9D2
; ---------------------------------------------------------------------------

loc_6FFCA9C6:				; CODE XREF: sub_6FFCA610+3C5j
					; sub_6FFCA610+3CAj
		mov	ebx, edx
		mov	edx, [edx]
		cmp	eax, edx
		jz	loc_6FFCAC90

loc_6FFCA9D2:				; CODE XREF: sub_6FFCA610+3B4j
		cmp	ecx, [edx+4]
		jnz	short loc_6FFCA9C6
		cmp	esi, [edx+8]
		jnz	short loc_6FFCA9C6
		mov	ebx, [ebx]
		xchg	ax, ax

loc_6FFCA9E0:				; CODE XREF: sub_6FFCA610+353j
					; sub_6FFCA610+682j
		cmp	ebx, eax
		jz	loc_6FFCAAA1
		mov	eax, [ebx+0Ch]
		mov	[ebp+var_20], eax
		lock inc dword ptr [eax+34h]
		setnz	dl
		mov	eax, [ebp+var_20]
		test	byte ptr [eax+44h], 2
		jnz	loc_6FFCAAB3
		mov	edx, [eax+34h]
		cmp	edx, 1
		jz	loc_6FFCAAB3
		lea	eax, [ebp+var_20]
		mov	[esp], eax
		mov	[ebp+var_78], 0FFFFFFFFh
		call	sub_6FFE3B80
		mov	eax, [ebp+var_20]
		mov	esi, [eax+3Ch]
		test	esi, esi
		jnz	loc_6FFCAABE
		xchg	ax, ax

loc_6FFCAA30:				; CODE XREF: sub_6FFCA610+4A8j
					; sub_6FFCA610+528j ...
		mov	eax, [ebp+var_40]
		mov	[ebp+var_48], 0
		and	eax, 0C0000000h
		mov	[ebp+var_40], eax
		mov	byte ptr [ebp+var_40+3], 80h

loc_6FFCAA46:				; CODE XREF: sub_6FFCA610+58Bj
		mov	ecx, [ebp+arg_0]
		lea	eax, [ebp+var_48]
		mov	[esp+4], eax
		mov	[ebp+var_78], 9
		mov	[esp], ecx
		call	ds:_ZN8QVariantC2ERKS_
		lea	eax, [ebp+var_48]
		mov	[esp], eax
		mov	[ebp+var_78], 0Ah
		call	ds:_ZN8QVariantD1Ev
		mov	eax, [ebp+var_20]
		test	eax, eax
		jz	short loc_6FFCAA89
		lock dec dword ptr [eax+34h]
		setnz	dl
		test	dl, dl
		jz	loc_6FFCABD0

loc_6FFCAA89:				; CODE XREF: sub_6FFCA610+2DCj
					; sub_6FFCA610+468j ...
		lea	eax, [ebp+var_7C]
		mov	[esp], eax
		call	_Unwind_SjLj_Unregister
		mov	eax, [ebp+arg_0]
		lea	esp, [ebp-0Ch]
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn	4
; ---------------------------------------------------------------------------

loc_6FFCAAA1:				; CODE XREF: sub_6FFCA610+344j
					; sub_6FFCA610+39Cj ...
		mov	eax, ds:_ZN8QMapData11shared_nullE
		mov	[ebp+var_20], eax
		lock inc dword ptr [eax+34h]
		setnz	dl
		mov	eax, [ebp+var_20]

loc_6FFCAAB3:				; CODE XREF: sub_6FFCA610+3ECj
					; sub_6FFCA610+3F8j
		mov	esi, [eax+3Ch]
		test	esi, esi
		jz	loc_6FFCAA30

loc_6FFCAABE:				; CODE XREF: sub_6FFCA610+418j
		mov	[ebp+var_90], eax
		mov	eax, [eax+38h]
		test	eax, eax
		mov	[ebp+var_88], eax
		js	loc_6FFCAC70
		mov	eax, [ebp+var_20]

loc_6FFCAAD8:				; CODE XREF: sub_6FFCA610+514j
					; sub_6FFCA610+5A6j
		mov	edx, [ebp+var_88]
		mov	ecx, [ebp+var_90]
		mov	edx, [ecx+edx*4+4]
		cmp	eax, edx
		mov	[ebp+var_84], edx
		jz	loc_6FFCABC0
		mov	ecx, [ebp+arg_C]
		mov	eax, edx
		sub	eax, 1Ch
		mov	[esp], eax
		mov	[ebp+var_78], 0Ah
		mov	[esp+4], ecx
		call	ds:_ZNK7QStringltERKS_
		test	al, al
		jnz	loc_6FFCABA7
		mov	eax, [ebp+var_20]

loc_6FFCAB1D:				; CODE XREF: sub_6FFCA610+5B6j
		sub	[ebp+var_88], 1
		jns	short loc_6FFCAAD8
		mov	ecx, [ebp+var_84]
		mov	[ebp+var_90], ecx

loc_6FFCAB32:				; CODE XREF: sub_6FFCA610+663j
		cmp	eax, [ebp+var_90]
		jz	loc_6FFCAA30
		mov	ecx, [ebp+var_90]
		mov	eax, [ebp+arg_C]
		mov	[ebp+var_78], 0Ah
		sub	ecx, 1Ch
		mov	[ebp+var_AC], ecx
		mov	[esp+4], ecx
		mov	[esp], eax
		call	ds:_ZNK7QStringltERKS_
		test	al, al
		jnz	loc_6FFCAA30
		mov	edx, [ebp+var_90]
		cmp	edx, [ebp+var_20]
		jz	loc_6FFCAA30
		mov	eax, [ebp+var_AC]
		mov	[ebp+var_78], 0Ah
		add	eax, 8
		mov	[esp+4], eax
		lea	eax, [ebp+var_48]
		mov	[esp], eax
		call	ds:_ZN8QVariantC1ERKS_
		jmp	loc_6FFCAA46
; ---------------------------------------------------------------------------

loc_6FFCABA0:				; CODE XREF: sub_6FFCA610+2FEj
		mov	ecx, eax
		jmp	loc_6FFCA903
; ---------------------------------------------------------------------------

loc_6FFCABA7:				; CODE XREF: sub_6FFCA610+504j
		mov	edx, [ebp+var_84]
		mov	eax, [ebp+var_20]
		mov	[ebp+var_90], edx
		jmp	loc_6FFCAAD8
; ---------------------------------------------------------------------------
		align 10h

loc_6FFCABC0:				; CODE XREF: sub_6FFCA610+4E0j
		mov	[ebp+var_84], eax
		jmp	loc_6FFCAB1D
; ---------------------------------------------------------------------------
		align 10h

loc_6FFCABD0:				; CODE XREF: sub_6FFCA610+473j
		mov	edx, [ebp+var_20]
		mov	eax, [edx+4]
		mov	[ebp+var_98], edx
		cmp	edx, eax
		jz	short loc_6FFCAC46
		mov	ecx, ds:_ZN8QVariantD1Ev
		mov	[ebp+var_80], ecx
		lea	esi, [esi+0]

loc_6FFCABF0:				; CODE XREF: sub_6FFCA610+634j
		mov	edx, [eax+4]
		lea	ecx, [eax-1Ch]
		mov	[ebp+var_94], ecx
		mov	[ebp+var_8C], edx
		mov	edx, [eax-1Ch]
		lock dec dword ptr [edx]
		setnz	cl
		test	cl, cl
		jnz	short loc_6FFCAC22
		mov	eax, [eax-1Ch]
		mov	[ebp+var_78], 0FFFFFFFFh
		mov	[esp], eax
		call	ds:_ZN7QString4freeEPNS_4DataE

loc_6FFCAC22:				; CODE XREF: sub_6FFCA610+5FDj
		mov	eax, [ebp+var_94]
		mov	[ebp+var_78], 0FFFFFFFFh
		add	eax, 8
		mov	[esp], eax
		call	[ebp+var_80]
		mov	eax, [ebp+var_8C]
		cmp	[ebp+var_98], eax
		jnz	short loc_6FFCABF0

loc_6FFCAC46:				; CODE XREF: sub_6FFCA610+5CEj
		mov	edx, [ebp+var_98]
		mov	dword ptr [esp+4], 1Ch
		mov	[ebp+var_78], 0FFFFFFFFh
		mov	[esp], edx
		call	ds:_ZN8QMapData16continueFreeDataEi
		jmp	loc_6FFCAA89
; ---------------------------------------------------------------------------
		align 10h

loc_6FFCAC70:				; CODE XREF: sub_6FFCA610+4BFj
		mov	eax, [ebp+var_20]
		jmp	loc_6FFCAB32
; ---------------------------------------------------------------------------

loc_6FFCAC78:				; CODE XREF: sub_6FFCA610+11Aj
		mov	eax, [ebp+var_28]
		mov	[ebp+var_78], 0Bh
		mov	[esp], eax
		call	ds:_ZN7QString4freeEPNS_4DataE
		jmp	loc_6FFCA730
; ---------------------------------------------------------------------------

loc_6FFCAC90:				; CODE XREF: sub_6FFCA610+3BCj
		mov	ebx, edx
		jmp	loc_6FFCA9E0
; ---------------------------------------------------------------------------

loc_6FFCAC97:				; CODE XREF: sub_6FFCA610+259j
		mov	dword ptr [esp+4], 20h
		mov	[esp], eax
		mov	[ebp+var_78], 0Bh
		call	ds:_ZN11QTextStreamlsEc
		mov	eax, [ebp+var_1C]
		jmp	loc_6FFCA86F
; ---------------------------------------------------------------------------

loc_6FFCACB7:				; CODE XREF: sub_6FFCA610+178j
		mov	eax, [ebp+var_2C]
		mov	[ebp+var_78], 0Bh
		mov	[esp], eax
		call	ds:_ZN7QString4freeEPNS_4DataE
		jmp	loc_6FFCA78E
; ---------------------------------------------------------------------------
		align 10h

loc_6FFCACD0:				; CODE XREF: sub_6FFCA610+127j
		mov	dword ptr [esp+4], 20h
		mov	[esp], eax
		mov	[ebp+var_78], 0Bh
		call	ds:_ZN11QTextStreamlsEc
		jmp	loc_6FFCA73D
; ---------------------------------------------------------------------------
		align 10h

loc_6FFCACF0:				; CODE XREF: sub_6FFCA610+24Cj
		mov	eax, [ebp+var_34]
		mov	[ebp+var_78], 0Bh
		mov	[esp], eax
		call	ds:_ZN7QString4freeEPNS_4DataE
		jmp	loc_6FFCA862
; ---------------------------------------------------------------------------

loc_6FFCAD08:				; CODE XREF: sub_6FFCA610+1E3j
		mov	dword ptr [esp+4], 20h
		mov	[esp], eax
		mov	[ebp+var_78], 0Bh
		call	ds:_ZN11QTextStreamlsEc
		mov	eax, [ebp+var_1C]
		jmp	loc_6FFCA7F9
; ---------------------------------------------------------------------------

loc_6FFCAD28:				; CODE XREF: sub_6FFCA610+1D6j
		mov	eax, [ebp+var_30]
		mov	[ebp+var_78], 0Bh
		mov	[esp], eax
		call	ds:_ZN7QString4freeEPNS_4DataE
		jmp	loc_6FFCA7EC
; ---------------------------------------------------------------------------

loc_6FFCAD40:				; CODE XREF: sub_6FFCA610+185j
		mov	dword ptr [esp+4], 20h
		mov	[esp], eax
		mov	[ebp+var_78], 0Bh
		call	ds:_ZN11QTextStreamlsEc
		jmp	loc_6FFCA79B
; ---------------------------------------------------------------------------

loc_6FFCAD5D:				; CODE XREF: sub_6FFCA610+29Aj
		mov	eax, [ecx+8]
		mov	[ebp+var_78], 1
		mov	[esp], eax
		call	ds:_ZN7QString4freeEPNS_4DataE
		jmp	loc_6FFCA8B0
; ---------------------------------------------------------------------------

loc_6FFCAD75:				; CODE XREF: sub_6FFCA610+38Bj
		mov	dword ptr [esp+8], 376h
		mov	dword ptr [esp+4], offset aRIncludeQtco_3 ; "R:/include/QtCore/qhash.h"
		mov	dword ptr [esp], offset	aNodeENodeNex_0	; "*node == e || (*node)->next"
		mov	[ebp+var_78], 0FFFFFFFFh
		call	ds:_Z9qt_assertPKcS0_i
		mov	ecx, [ebp+var_A0]
		mov	edx, [ecx]
		jmp	loc_6FFCA9A1
; ---------------------------------------------------------------------------

loc_6FFCADA6:				; CODE XREF: sub_6FFCA610+279j
		mov	edx, eax
		add	edx, 8
		lea	eax, [ebp+var_38]
		mov	[esp+4], edx
		mov	[esp], eax
		mov	[ebp+var_78], 3
		call	ds:_ZNK7QString11toLocal8BitEv
		mov	eax, [ebp+var_38]
		sub	esp, 4
		mov	edx, [eax]
		cmp	edx, 1
		jz	short loc_6FFCAE45

loc_6FFCADCF:				; CODE XREF: sub_6FFCA610+83Dj
		mov	eax, [eax+8]
		mov	[ebp+var_78], 2
		mov	[esp+4], eax
		lea	eax, [ebp+var_38]
		mov	[esp], eax
		call	ds:_ZN10QByteArray7reallocEi
		mov	eax, [ebp+var_38]
		mov	edx, [eax+0Ch]

loc_6FFCADEF:				; CODE XREF: sub_6FFCA610+83Fj
		mov	eax, [ebp+var_1C]
		mov	[esp+4], edx
		mov	eax, [eax+10h]
		mov	[ebp+var_78], 2
		mov	[esp], eax
		call	ds:_Z17qt_message_output9QtMsgTypePKc
		mov	eax, [ebp+var_38]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jz	short loc_6FFCAE24
		mov	eax, [ebp+var_1C]
		mov	[ebp+var_B0], eax
		jmp	loc_6FFCA88F
; ---------------------------------------------------------------------------

loc_6FFCAE24:				; CODE XREF: sub_6FFCA610+804j
		mov	eax, [ebp+var_38]
		mov	[ebp+var_78], 3
		mov	[esp], eax
		call	ds:_Z5qFreePv

loc_6FFCAE37:				; CODE XREF: sub_6FFCAE51+151j
		mov	edx, [ebp+var_1C]
		mov	[ebp+var_B0], edx
		jmp	loc_6FFCA88F
; ---------------------------------------------------------------------------

loc_6FFCAE45:				; CODE XREF: sub_6FFCA610+7BDj
		mov	edx, [eax+0Ch]
		lea	ecx, [eax+10h]
		cmp	edx, ecx
		jnz	short loc_6FFCADCF
		jmp	short loc_6FFCADEF
sub_6FFCA610	endp


; =============== S U B	R O U T	I N E =======================================


sub_6FFCAE51	proc near		; DATA XREF: sub_6FFCA610+26o
		add	ebp, 18h
		mov	eax, [ebp-78h]
		mov	edx, [ebp-74h]
		cmp	eax, 1
		mov	[ebp-0BCh], edx
		mov	edx, [ebp-70h]
		jz	loc_6FFCAEF1
		cmp	eax, 2
		jz	loc_6FFCAF35
		cmp	eax, 3
		jz	loc_6FFCB01B
		cmp	eax, 4
		jz	loc_6FFCB032
		cmp	eax, 5
		jz	loc_6FFCB004
		cmp	eax, 6
		jz	loc_6FFCAF4F
		cmp	eax, 7
		lea	esi, [esi+0]
		jz	loc_6FFCAFE1
		cmp	eax, 8
		jz	loc_6FFCAFA7
		cmp	eax, 9
		jz	loc_6FFCAFBA
		cmp	eax, 0Ah
		nop
		lea	esi, [esi+0]
		jz	loc_6FFCAF61
		mov	ecx, [ebp-0B0h]
		mov	dword ptr [ebp-78h], 0
		mov	[esp+0], ecx
		call	ds:_ZN11QTextStreamD1Ev
		mov	eax, [ebp-0BCh]
		mov	dword ptr [ebp-78h], 0FFFFFFFFh
		mov	[esp+0], eax
		call	_Unwind_SjLj_Resume
; ---------------------------------------------------------------------------

loc_6FFCAEF1:				; CODE XREF: sub_6FFCAE51+15j
		mov	[ebp-0C0h], edx
		mov	edx, [ebp-0BCh]
		mov	eax, [ebp-38h]
		mov	[ebp-0B8h], edx
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jnz	short loc_6FFCAF23
		mov	eax, [ebp-38h]
		mov	dword ptr [ebp-78h], 0
		mov	[esp+0], eax
		call	ds:_Z5qFreePv

loc_6FFCAF23:				; CODE XREF: sub_6FFCAE51+BDj
		mov	ecx, [ebp-0B8h]
		mov	edx, [ebp-0C0h]
		mov	[ebp-0BCh], ecx

loc_6FFCAF35:				; CODE XREF: sub_6FFCAE51+1Ej
		cmp	edx, 1
		jz	short loc_6FFCAF88
		mov	ecx, [ebp-0BCh]
		mov	dword ptr [ebp-78h], 0FFFFFFFFh
		mov	[esp+0], ecx
		call	_Unwind_SjLj_Resume
; ---------------------------------------------------------------------------

loc_6FFCAF4F:				; CODE XREF: sub_6FFCAE51+42j
		lea	eax, [ebp-28h]
		mov	[esp+0], eax
		mov	dword ptr [ebp-78h], 0
		call	sub_6FFEA140

loc_6FFCAF61:				; CODE XREF: sub_6FFCAE51+6Fj
					; sub_6FFCAE51+1C5j ...
		lea	eax, [ebp-1Ch]
		mov	[esp+0], eax
		mov	dword ptr [ebp-78h], 0
		call	sub_6FFE9DD0
		mov	ecx, [ebp-0BCh]
		mov	dword ptr [ebp-78h], 0FFFFFFFFh
		mov	[esp+0], ecx
		call	_Unwind_SjLj_Resume
; ---------------------------------------------------------------------------

loc_6FFCAF88:				; CODE XREF: sub_6FFCAE51+E7j
		mov	eax, [ebp-0BCh]
		mov	[esp+0], eax
		call	sub_6FFEB920
		mov	dword ptr [ebp-78h], 0
		call	sub_6FFEBBF0
		jmp	loc_6FFCAE37
; ---------------------------------------------------------------------------

loc_6FFCAFA7:				; CODE XREF: sub_6FFCAE51+58j
		lea	eax, [ebp-48h]
		mov	[esp+0], eax
		mov	dword ptr [ebp-78h], 0
		call	ds:_ZN8QVariantD1Ev

loc_6FFCAFBA:				; CODE XREF: sub_6FFCAE51+61j
		lea	eax, [ebp-20h]
		mov	[esp+0], eax
		mov	dword ptr [ebp-78h], 0
		call	sub_6FFE4290
		mov	eax, [ebp-0BCh]
		mov	dword ptr [ebp-78h], 0FFFFFFFFh
		mov	[esp+0], eax
		call	_Unwind_SjLj_Resume
; ---------------------------------------------------------------------------

loc_6FFCAFE1:				; CODE XREF: sub_6FFCAE51+4Fj
		mov	eax, [ebp-0A8h]
		mov	[esp+0], eax
		call	sub_6FFEAE50
		mov	edx, [ebp-0BCh]
		mov	dword ptr [ebp-78h], 0FFFFFFFFh
		mov	[esp+0], edx
		call	_Unwind_SjLj_Resume
; ---------------------------------------------------------------------------

loc_6FFCB004:				; CODE XREF: sub_6FFCAE51+39j
		lea	eax, [ebp-2Ch]
		mov	[esp+0], eax
		mov	dword ptr [ebp-78h], 0
		call	sub_6FFEA140
		jmp	loc_6FFCAF61
; ---------------------------------------------------------------------------

loc_6FFCB01B:				; CODE XREF: sub_6FFCAE51+27j
		lea	eax, [ebp-34h]
		mov	[esp+0], eax
		mov	dword ptr [ebp-78h], 0
		call	sub_6FFEA140
		jmp	loc_6FFCAF61
; ---------------------------------------------------------------------------

loc_6FFCB032:				; CODE XREF: sub_6FFCAE51+30j
		lea	eax, [ebp-30h]
		mov	[esp+0], eax
		mov	dword ptr [ebp-78h], 0
		call	sub_6FFEA140
		jmp	loc_6FFCAF61
sub_6FFCAE51	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_6FFCB050	proc near		; CODE XREF: sub_6FFCB780+132p
					; sub_6FFD5A00+58j

var_7C		= dword	ptr -7Ch
var_78		= dword	ptr -78h
var_74		= dword	ptr -74h
var_70		= dword	ptr -70h
var_6C		= byte ptr -6Ch
var_68		= dword	ptr -68h
var_54		= dword	ptr -54h
var_50		= dword	ptr -50h
var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= byte ptr -18h
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h
arg_10		= dword	ptr  18h

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		lea	eax, [ebp+var_18]
		sub	esp, 0ECh
		mov	[ebp+var_4C], eax
		lea	eax, [ebp+var_6C]
		mov	[esp], eax
		mov	[ebp+var_54], offset sub_6FFEC1F0
		mov	[ebp+var_50], offset dword_6FFECCE0
		mov	[ebp+var_48], offset sub_6FFCB5E6
		mov	[ebp+var_44], esp
		call	_Unwind_SjLj_Register
		mov	edx, [ebp+arg_4]
		mov	[esp+4], edx
		mov	edx, [ebp+arg_0]
		mov	eax, [edx+8]
		mov	eax, [eax+8]
		mov	[ebp+var_68], 0FFFFFFFFh
		mov	[esp], eax
		call	sub_6FFC1B40
		test	eax, eax
		mov	[ebp+var_70], eax
		jz	loc_6FFCB1E0
		mov	edx, [ebp+arg_0]
		mov	eax, [edx+8]
		mov	dword ptr [esp+5Ch], 0
		mov	dword ptr [esp+60h], 0
		mov	dword ptr [esp+54h], 0
		mov	dword ptr [esp+58h], 0
		mov	dword ptr [esp+4Ch], 0
		mov	dword ptr [esp+50h], 0
		mov	dword ptr [esp+44h], 0
		mov	dword ptr [esp+48h], 0
		mov	dword ptr [esp+3Ch], 0
		mov	dword ptr [esp+40h], 0
		mov	dword ptr [esp+34h], 0
		mov	dword ptr [esp+38h], 0
		mov	dword ptr [esp+2Ch], 0
		mov	dword ptr [esp+30h], 0
		mov	dword ptr [esp+24h], 0
		mov	dword ptr [esp+28h], 0
		mov	dword ptr [esp+1Ch], 0
		mov	dword ptr [esp+20h], 0
		mov	dword ptr [esp+14h], 0
		mov	dword ptr [esp+18h], 0
		mov	dword ptr [esp+0Ch], 0
		mov	dword ptr [esp+10h], 0
		mov	dword ptr [esp+8], 0
		mov	dword ptr [esp+4], offset aDoupdateaction ; "doUpdateActions"
		mov	[esp], eax
		mov	[ebp+var_68], 0FFFFFFFFh
		call	ds:_ZN11QMetaObject12invokeMethodEP7QObjectPKcN2Qt14ConnectionTypeE22QGenericReturnArgument16QGenericArgumentS7_S7_S7_S7_S7_S7_S7_S7_S7_
		mov	eax, [ebp+arg_C]
		mov	edx, [ebp+var_70]
		mov	[esp+14h], eax
		mov	eax, [ebp+arg_8]
		mov	[esp+8], edx
		mov	edx, [ebp+arg_0]
		mov	[esp+10h], eax
		mov	eax, [ebp+arg_4]
		mov	[esp+0Ch], eax
		mov	eax, [ebp+arg_10]
		mov	[esp+4], eax
		mov	eax, [edx+8]
		mov	eax, [eax+8]
		mov	[esp], eax
		call	sub_6FFC78B0
		mov	edx, [ebp+arg_0]
		mov	eax, [edx+8]
		mov	eax, [eax+8]
		mov	eax, [eax+20h]
		mov	[ebp+var_74], eax

loc_6FFCB1C8:				; CODE XREF: sub_6FFCB050+3DAj
					; sub_6FFCB050+3E7j
		lea	eax, [ebp+var_6C]
		mov	[esp], eax
		call	_Unwind_SjLj_Unregister
		mov	eax, [ebp+var_74]
		lea	esp, [ebp-0Ch]
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6FFCB1E0:				; CODE XREF: sub_6FFCB050+59j
		mov	dword ptr [esp], 18h ; size_t
		call	sub_6FFEAE70
		mov	[ebp+var_20], 2
		mov	[ebp+var_68], 8
		mov	[ebp+var_78], eax
		lea	eax, [ebp+var_20]
		mov	[esp+8], eax
		mov	eax, [ebp+var_78]
		add	eax, 8
		mov	[esp+4], eax
		mov	eax, [ebp+var_78]
		mov	[esp], eax
		call	ds:_ZN11QTextStreamC1EP7QString6QFlagsIN9QIODevice12OpenModeFlagEE
		mov	eax, ds:_ZN7QString11shared_nullE
		mov	edx, [ebp+var_78]
		mov	[edx+8], eax
		lock inc dword ptr [eax]
		setnz	dl
		mov	eax, [ebp+var_78]
		mov	dword ptr [eax+0Ch], 1
		mov	dword ptr [eax+10h], 1
		mov	byte ptr [eax+15h], 1
		mov	byte ptr [eax+14h], 0
		mov	[ebp+var_1C], eax
		lea	eax, [ebp+var_24]
		mov	dword ptr [esp+8], 0FFFFFFFFh
		mov	dword ptr [esp+4], offset a31m_0 ; "\x1B[31m"
		mov	[esp], eax
		mov	[ebp+var_68], 9
		call	ds:_ZN7QString9fromAsciiEPKci
		sub	esp, 4
		lea	eax, [ebp+var_24]
		mov	[esp+4], eax
		mov	eax, [ebp+var_1C]
		mov	[ebp+var_68], 7
		mov	[esp], eax
		call	ds:_ZN11QTextStreamlsERK7QString
		mov	eax, [ebp+var_24]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jz	loc_6FFCB510

loc_6FFCB298:				; CODE XREF: sub_6FFCB050+4D3j
		mov	eax, [ebp+var_1C]
		cmp	byte ptr [eax+14h], 0
		jnz	loc_6FFCB4F0

loc_6FFCB2A5:				; CODE XREF: sub_6FFCB050+4B8j
		lea	eax, [ebp+var_28]
		mov	dword ptr [esp+8], 0FFFFFFFFh
		mov	dword ptr [esp+4], offset aUintDbusmenuex ; "uint DBusMenuExporterDBus::GetLayout(in"...
		mov	[esp], eax
		mov	[ebp+var_68], 9
		call	ds:_ZN7QString9fromAsciiEPKci
		sub	esp, 4
		lea	eax, [ebp+var_28]
		mov	[esp+4], eax
		mov	eax, [ebp+var_1C]
		mov	[ebp+var_68], 6
		mov	[esp], eax
		call	ds:_ZN11QTextStreamlsERK7QString
		mov	eax, [ebp+var_28]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jz	loc_6FFCB4D5

loc_6FFCB2F6:				; CODE XREF: sub_6FFCB050+498j
		mov	eax, [ebp+var_1C]
		cmp	byte ptr [eax+14h], 0
		jnz	loc_6FFCB4B8

loc_6FFCB303:				; CODE XREF: sub_6FFCB050+480j
		lea	eax, [ebp+var_2C]
		mov	dword ptr [esp+8], 0FFFFFFFFh
		mov	dword ptr [esp+4], offset a0m_0	; "\x1B[0m:"
		mov	[esp], eax
		mov	[ebp+var_68], 9
		call	ds:_ZN7QString9fromAsciiEPKci
		sub	esp, 4
		lea	eax, [ebp+var_2C]
		mov	[esp+4], eax
		mov	eax, [ebp+var_1C]
		mov	[ebp+var_68], 5
		mov	[esp], eax
		call	ds:_ZN11QTextStreamlsERK7QString
		mov	eax, [ebp+var_2C]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jz	loc_6FFCB4A0

loc_6FFCB354:				; CODE XREF: sub_6FFCB050+463j
		mov	eax, [ebp+var_1C]
		cmp	byte ptr [eax+14h], 0
		jnz	loc_6FFCB480

loc_6FFCB361:				; CODE XREF: sub_6FFCB050+44Bj
		mov	byte ptr [eax+14h], 1
		mov	dword ptr [esp+4], 20h
		mov	[esp], eax
		mov	[ebp+var_68], 9
		call	ds:_ZN11QTextStreamlsEc
		lea	eax, [ebp+var_30]
		mov	dword ptr [esp+8], 0FFFFFFFFh
		mov	dword ptr [esp+4], offset aConditionFai_4 ; "Condition failed: menu"
		mov	[esp], eax
		call	ds:_ZN7QString9fromAsciiEPKci
		sub	esp, 4
		lea	eax, [ebp+var_30]
		mov	[esp+4], eax
		mov	eax, [ebp+var_1C]
		mov	[ebp+var_68], 4
		mov	[esp], eax
		call	ds:_ZN11QTextStreamlsERK7QString
		mov	eax, [ebp+var_30]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jz	loc_6FFCB465

loc_6FFCB3C7:				; CODE XREF: sub_6FFCB050+428j
		mov	edx, [ebp+var_1C]
		cmp	byte ptr [edx+14h], 0
		mov	[ebp+var_7C], edx
		jnz	short loc_6FFCB440

loc_6FFCB3D3:				; CODE XREF: sub_6FFCB050+410j
		mov	eax, [edx+0Ch]
		sub	eax, 1
		test	eax, eax
		mov	[edx+0Ch], eax
		jnz	short loc_6FFCB430
		cmp	byte ptr [edx+15h], 0
		jnz	loc_6FFCB543

loc_6FFCB3EA:				; CODE XREF: sub_6FFCB050+567j
					; sub_6FFCB050+585j
		mov	ebx, [ebp+var_7C]
		test	ebx, ebx
		jz	short loc_6FFCB430
		mov	edx, [ebp+var_7C]
		mov	eax, [edx+8]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jz	loc_6FFCB528

loc_6FFCB405:				; CODE XREF: sub_6FFCB050+4EEj
		mov	eax, [ebp+var_7C]
		mov	[ebp+var_68], 0FFFFFFFFh
		mov	[esp], eax
		call	ds:_ZN11QTextStreamD1Ev
		mov	edx, [ebp+var_7C]
		mov	[esp], edx
		call	sub_6FFEAE50
		mov	[ebp+var_74], 0
		jmp	loc_6FFCB1C8
; ---------------------------------------------------------------------------
		align 10h

loc_6FFCB430:				; CODE XREF: sub_6FFCB050+38Ej
					; sub_6FFCB050+39Fj
		mov	[ebp+var_74], 0
		jmp	loc_6FFCB1C8
; ---------------------------------------------------------------------------
		align 10h

loc_6FFCB440:				; CODE XREF: sub_6FFCB050+381j
		mov	dword ptr [esp+4], 20h
		mov	[esp], edx
		mov	[ebp+var_68], 9
		call	ds:_ZN11QTextStreamlsEc
		mov	eax, [ebp+var_1C]
		mov	[ebp+var_7C], eax
		mov	edx, eax
		jmp	loc_6FFCB3D3
; ---------------------------------------------------------------------------

loc_6FFCB465:				; CODE XREF: sub_6FFCB050+371j
		mov	eax, [ebp+var_30]
		mov	[ebp+var_68], 9
		mov	[esp], eax
		call	ds:_ZN7QString4freeEPNS_4DataE
		jmp	loc_6FFCB3C7
; ---------------------------------------------------------------------------
		align 10h

loc_6FFCB480:				; CODE XREF: sub_6FFCB050+30Bj
		mov	dword ptr [esp+4], 20h
		mov	[esp], eax
		mov	[ebp+var_68], 9
		call	ds:_ZN11QTextStreamlsEc
		mov	eax, [ebp+var_1C]
		jmp	loc_6FFCB361
; ---------------------------------------------------------------------------

loc_6FFCB4A0:				; CODE XREF: sub_6FFCB050+2FEj
		mov	eax, [ebp+var_2C]
		mov	[ebp+var_68], 9
		mov	[esp], eax
		call	ds:_ZN7QString4freeEPNS_4DataE
		jmp	loc_6FFCB354
; ---------------------------------------------------------------------------

loc_6FFCB4B8:				; CODE XREF: sub_6FFCB050+2ADj
		mov	dword ptr [esp+4], 20h
		mov	[esp], eax
		mov	[ebp+var_68], 9
		call	ds:_ZN11QTextStreamlsEc
		jmp	loc_6FFCB303
; ---------------------------------------------------------------------------

loc_6FFCB4D5:				; CODE XREF: sub_6FFCB050+2A0j
		mov	eax, [ebp+var_28]
		mov	[ebp+var_68], 9
		mov	[esp], eax
		call	ds:_ZN7QString4freeEPNS_4DataE
		jmp	loc_6FFCB2F6
; ---------------------------------------------------------------------------
		align 10h

loc_6FFCB4F0:				; CODE XREF: sub_6FFCB050+24Fj
		mov	dword ptr [esp+4], 20h
		mov	[esp], eax
		mov	[ebp+var_68], 9
		call	ds:_ZN11QTextStreamlsEc
		jmp	loc_6FFCB2A5
; ---------------------------------------------------------------------------
		align 10h

loc_6FFCB510:				; CODE XREF: sub_6FFCB050+242j
		mov	eax, [ebp+var_24]
		mov	[ebp+var_68], 9
		mov	[esp], eax
		call	ds:_ZN7QString4freeEPNS_4DataE
		jmp	loc_6FFCB298
; ---------------------------------------------------------------------------

loc_6FFCB528:				; CODE XREF: sub_6FFCB050+3AFj
		mov	edx, [ebp+var_7C]
		mov	eax, [edx+8]
		mov	[ebp+var_68], 1
		mov	[esp], eax
		call	ds:_ZN7QString4freeEPNS_4DataE
		jmp	loc_6FFCB405
; ---------------------------------------------------------------------------

loc_6FFCB543:				; CODE XREF: sub_6FFCB050+394j
		lea	eax, [ebp+var_34]
		add	edx, 8
		mov	[esp+4], edx
		mov	[esp], eax
		mov	[ebp+var_68], 3
		call	ds:_ZNK7QString11toLocal8BitEv
		mov	eax, [ebp+var_34]
		sub	esp, 4
		mov	edx, [eax]
		cmp	edx, 1
		jz	short loc_6FFCB5DA

loc_6FFCB56A:				; CODE XREF: sub_6FFCB050+592j
		mov	eax, [eax+8]
		mov	[ebp+var_68], 2
		mov	[esp+4], eax
		lea	eax, [ebp+var_34]
		mov	[esp], eax
		call	ds:_ZN10QByteArray7reallocEi
		mov	eax, [ebp+var_34]
		mov	edx, [eax+0Ch]

loc_6FFCB58A:				; CODE XREF: sub_6FFCB050+594j
		mov	eax, [ebp+var_1C]
		mov	[esp+4], edx
		mov	eax, [eax+10h]
		mov	[ebp+var_68], 2
		mov	[esp], eax
		call	ds:_Z17qt_message_output9QtMsgTypePKc
		mov	eax, [ebp+var_34]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jz	short loc_6FFCB5BC

loc_6FFCB5B1:				; CODE XREF: sub_6FFCB5E6+133j
		mov	eax, [ebp+var_1C]
		mov	[ebp+var_7C], eax
		jmp	loc_6FFCB3EA
; ---------------------------------------------------------------------------

loc_6FFCB5BC:				; CODE XREF: sub_6FFCB050+55Fj
		mov	eax, [ebp+var_34]
		mov	[ebp+var_68], 3
		mov	[esp], eax
		call	ds:_Z5qFreePv
		mov	edx, [ebp+var_1C]
		mov	[ebp+var_7C], edx
		jmp	loc_6FFCB3EA
; ---------------------------------------------------------------------------

loc_6FFCB5DA:				; CODE XREF: sub_6FFCB050+518j
		mov	edx, [eax+0Ch]
		lea	ecx, [eax+10h]
		cmp	edx, ecx
		jnz	short loc_6FFCB56A
		jmp	short loc_6FFCB58A
sub_6FFCB050	endp


; =============== S U B	R O U T	I N E =======================================


sub_6FFCB5E6	proc near		; DATA XREF: sub_6FFCB050+26o
		add	ebp, 18h
		mov	eax, [ebp-68h]
		mov	edx, [ebp-64h]
		cmp	eax, 1
		mov	[ebp-84h], edx
		mov	edx, [ebp-60h]
		jz	short loc_6FFCB66E
		cmp	eax, 2
		jz	loc_6FFCB6AC
		cmp	eax, 3
		jz	loc_6FFCB752
		cmp	eax, 4
		jz	loc_6FFCB769
		cmp	eax, 5
		nop
		lea	esi, [esi+0]
		jz	loc_6FFCB73E
		cmp	eax, 6
		jz	loc_6FFCB6C6
		cmp	eax, 7
		jz	loc_6FFCB71E
		cmp	eax, 8
		nop
		lea	esi, [esi+0]
		jz	loc_6FFCB6D8
		mov	eax, [ebp-7Ch]
		mov	dword ptr [ebp-68h], 0
		mov	[esp+0], eax
		call	ds:_ZN11QTextStreamD1Ev
		mov	edx, [ebp-84h]
		mov	dword ptr [ebp-68h], 0FFFFFFFFh
		mov	[esp+0], edx
		call	_Unwind_SjLj_Resume
; ---------------------------------------------------------------------------

loc_6FFCB66E:				; CODE XREF: sub_6FFCB5E6+15j
		mov	eax, [ebp-84h]
		mov	[ebp-88h], edx
		mov	[ebp-80h], eax
		mov	eax, [ebp-34h]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jnz	short loc_6FFCB69D
		mov	eax, [ebp-34h]
		mov	dword ptr [ebp-68h], 0
		mov	[esp+0], eax
		call	ds:_Z5qFreePv

loc_6FFCB69D:				; CODE XREF: sub_6FFCB5E6+A2j
		mov	edx, [ebp-80h]
		mov	[ebp-84h], edx
		mov	edx, [ebp-88h]

loc_6FFCB6AC:				; CODE XREF: sub_6FFCB5E6+1Aj
		cmp	edx, 1
		jz	short loc_6FFCB6FF
		mov	eax, [ebp-84h]
		mov	dword ptr [ebp-68h], 0FFFFFFFFh
		mov	[esp+0], eax
		call	_Unwind_SjLj_Resume
; ---------------------------------------------------------------------------

loc_6FFCB6C6:				; CODE XREF: sub_6FFCB5E6+43j
		lea	eax, [ebp-24h]
		mov	[esp+0], eax
		mov	dword ptr [ebp-68h], 0
		call	sub_6FFEA140

loc_6FFCB6D8:				; CODE XREF: sub_6FFCB5E6+5Aj
					; sub_6FFCB5E6+16Aj ...
		lea	eax, [ebp-1Ch]
		mov	[esp+0], eax
		mov	dword ptr [ebp-68h], 0
		call	sub_6FFE9DD0
		mov	eax, [ebp-84h]
		mov	dword ptr [ebp-68h], 0FFFFFFFFh
		mov	[esp+0], eax
		call	_Unwind_SjLj_Resume
; ---------------------------------------------------------------------------

loc_6FFCB6FF:				; CODE XREF: sub_6FFCB5E6+C9j
		mov	edx, [ebp-84h]
		mov	[esp+0], edx
		call	sub_6FFEB920
		mov	dword ptr [ebp-68h], 0
		call	sub_6FFEBBF0
		jmp	loc_6FFCB5B1
; ---------------------------------------------------------------------------

loc_6FFCB71E:				; CODE XREF: sub_6FFCB5E6+4Cj
		mov	edx, [ebp-78h]
		mov	[esp+0], edx
		call	sub_6FFEAE50
		mov	eax, [ebp-84h]
		mov	dword ptr [ebp-68h], 0FFFFFFFFh
		mov	[esp+0], eax
		call	_Unwind_SjLj_Resume
; ---------------------------------------------------------------------------

loc_6FFCB73E:				; CODE XREF: sub_6FFCB5E6+3Aj
		lea	eax, [ebp-28h]
		mov	[esp+0], eax
		mov	dword ptr [ebp-68h], 0
		call	sub_6FFEA140
		jmp	short loc_6FFCB6D8
; ---------------------------------------------------------------------------

loc_6FFCB752:				; CODE XREF: sub_6FFCB5E6+23j
		lea	eax, [ebp-30h]
		mov	[esp+0], eax
		mov	dword ptr [ebp-68h], 0
		call	sub_6FFEA140
		jmp	loc_6FFCB6D8
; ---------------------------------------------------------------------------

loc_6FFCB769:				; CODE XREF: sub_6FFCB5E6+2Cj
		lea	eax, [ebp-2Ch]
		mov	[esp+0], eax
		mov	dword ptr [ebp-68h], 0
		call	sub_6FFEA140
		jmp	loc_6FFCB6D8
sub_6FFCB5E6	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_6FFCB780	proc near		; CODE XREF: sub_6FFCBCE0+160p
					; DATA XREF: .rdata:6FFF3D54o

var_80		= dword	ptr -80h
var_7C		= dword	ptr -7Ch
var_78		= dword	ptr -78h
var_74		= dword	ptr -74h
var_70		= dword	ptr -70h
var_6C		= dword	ptr -6Ch
var_68		= dword	ptr -68h
var_64		= dword	ptr -64h
var_60		= dword	ptr -60h
var_5C		= byte ptr -5Ch
var_58		= dword	ptr -58h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_28		= byte ptr -28h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= byte ptr -8
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h

		push	ebp
		mov	ebp, esp
		sub	esp, 0A8h
		lea	eax, [ebp+var_8]
		mov	[ebp+var_3C], eax
		lea	eax, [ebp+var_5C]
		mov	[esp], eax
		mov	[ebp+var_44], offset sub_6FFEC1F0
		mov	[ebp+var_40], offset dword_6FFECD00
		mov	[ebp+var_38], offset sub_6FFCBC18
		mov	[ebp+var_34], esp
		call	_Unwind_SjLj_Register
		mov	eax, [ebp+arg_4]
		test	eax, eax
		jz	short loc_6FFCB7C6

loc_6FFCB7B9:				; CODE XREF: sub_6FFCB780+6Dj
					; sub_6FFCB780+FDj ...
		lea	eax, [ebp+var_5C] ; jumptable 6FFCB7F2 default case
		mov	[esp], eax
		call	_Unwind_SjLj_Unregister
		leave
		retn
; ---------------------------------------------------------------------------

loc_6FFCB7C6:				; CODE XREF: sub_6FFCB780+37j
		mov	edx, [ebp+arg_0]
		mov	dword ptr [esp], offset	dword_6FFEE020
		mov	[ebp+var_58], 0FFFFFFFFh
		mov	[esp+4], edx
		call	ds:_ZNK11QMetaObject4castEP7QObject
		test	eax, eax
		jz	loc_6FFCBAB4

loc_6FFCB7E9:				; CODE XREF: sub_6FFCB780+351j
		cmp	[ebp+arg_8], 7	; switch 8 cases
		ja	short loc_6FFCB7B9 ; jumptable 6FFCB7F2	default	case
		mov	ecx, [ebp+arg_8]
		jmp	ds:off_6FFF3D14[ecx*4] ; switch	jump
; ---------------------------------------------------------------------------
		align 10h

loc_6FFCB800:				; CODE XREF: sub_6FFCB780+72j
					; DATA XREF: .rdata:off_6FFF3D14o
		mov	ecx, [ebp+arg_C] ; jumptable 6FFCB7F2 case 6
		lea	eax, [ebp+var_14]
		mov	edx, [ecx+8]
		mov	[esp+0Ch], edx
		mov	edx, [ecx+4]
		mov	[esp], eax
		mov	[ebp+var_58], 0FFFFFFFFh
		mov	[esp+8], edx
		mov	edx, [ebp+arg_0]
		mov	[esp+4], edx
		call	sub_6FFC99B0
		mov	ecx, [ebp+arg_C]
		mov	ecx, [ecx]
		sub	esp, 4
		test	ecx, ecx
		mov	[ebp+var_78], ecx
		jz	short loc_6FFCB86B
		mov	eax, [ebp+var_14]
		mov	[ebp+var_74], eax
		cmp	[ecx], eax
		jz	short loc_6FFCB86B
		lock inc dword ptr [eax]
		setnz	al
		mov	eax, [ecx]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jz	loc_6FFCBB12

loc_6FFCB859:				; CODE XREF: sub_6FFCB780+493j
		mov	eax, [ebp+var_74]
		mov	ecx, [ebp+var_78]
		mov	[ecx], eax
		test	byte ptr [eax+10h], 1
		jz	loc_6FFCBAD6

loc_6FFCB86B:				; CODE XREF: sub_6FFCB780+B7j
					; sub_6FFCB780+C1j ...
		lea	eax, [ebp+var_14]
		mov	[esp], eax
		mov	[ebp+var_58], 0FFFFFFFFh
		call	sub_6FFE6AF0
		jmp	loc_6FFCB7B9	; jumptable 6FFCB7F2 default case
; ---------------------------------------------------------------------------

loc_6FFCB882:				; CODE XREF: sub_6FFCB780+72j
					; DATA XREF: .rdata:off_6FFF3D14o
		mov	edx, [ebp+arg_C] ; jumptable 6FFCB7F2 case 5
		mov	ecx, [ebp+arg_0]
		mov	eax, [edx+10h]
		mov	[esp+10h], eax
		mov	eax, [edx+0Ch]
		mov	[esp+0Ch], eax
		mov	eax, [edx+8]
		mov	eax, [eax]
		mov	[esp+8], eax
		mov	eax, [edx+4]
		mov	eax, [eax]
		mov	[esp], ecx
		mov	[ebp+var_58], 0FFFFFFFFh
		mov	[esp+4], eax
		call	sub_6FFCB050
		mov	ecx, [ebp+arg_C]
		mov	edx, [ecx]
		test	edx, edx
		jz	loc_6FFCB7B9	; jumptable 6FFCB7F2 default case
		mov	[edx], eax
		jmp	loc_6FFCB7B9	; jumptable 6FFCB7F2 default case
; ---------------------------------------------------------------------------
		align 10h

loc_6FFCB8D0:				; CODE XREF: sub_6FFCB780+72j
					; DATA XREF: .rdata:off_6FFF3D14o
		mov	edx, [ebp+arg_C] ; jumptable 6FFCB7F2 case 4
		mov	ecx, [ebp+arg_0]
		mov	eax, [edx+8]
		mov	[esp+0Ch], eax
		mov	eax, [edx+4]
		mov	eax, [eax]
		mov	[esp+4], ecx
		mov	[ebp+var_58], 0FFFFFFFFh
		mov	[esp+8], eax
		lea	eax, [ebp+var_28]
		mov	[esp], eax
		call	sub_6FFCA610
		mov	edx, [ebp+arg_C]
		mov	eax, [edx]
		sub	esp, 4
		test	eax, eax
		jz	short loc_6FFCB91F
		lea	ecx, [ebp+var_28]
		mov	[esp+4], ecx
		mov	[esp], eax
		mov	[ebp+var_58], 2
		call	ds:_ZN8QVariantaSERKS_

loc_6FFCB91F:				; CODE XREF: sub_6FFCB780+186j
		lea	eax, [ebp+var_28]
		mov	[esp], eax
		mov	[ebp+var_58], 0FFFFFFFFh
		call	ds:_ZN8QVariantD2Ev
		jmp	loc_6FFCB7B9	; jumptable 6FFCB7F2 default case
; ---------------------------------------------------------------------------

loc_6FFCB937:				; CODE XREF: sub_6FFCB780+72j
					; DATA XREF: .rdata:off_6FFF3D14o
		mov	edx, [ebp+arg_C] ; jumptable 6FFCB7F2 case 3
		mov	ecx, [ebp+arg_0]
		mov	eax, [edx+10h]
		mov	eax, [eax]
		mov	[esp+10h], eax
		mov	eax, [edx+0Ch]
		mov	[esp+0Ch], eax
		mov	eax, [edx+8]
		mov	[esp+8], eax
		mov	eax, [edx+4]
		mov	eax, [eax]
		mov	[esp], ecx
		mov	[ebp+var_58], 0FFFFFFFFh
		mov	[esp+4], eax
		call	sub_6FFC84C0
		jmp	loc_6FFCB7B9	; jumptable 6FFCB7F2 default case
; ---------------------------------------------------------------------------

loc_6FFCB971:				; CODE XREF: sub_6FFCB780+72j
					; DATA XREF: .rdata:off_6FFF3D14o
		mov	edx, [ebp+arg_C] ; jumptable 6FFCB7F2 case 2
		mov	ecx, [ebp+arg_0]
		mov	eax, [edx+8]
		mov	eax, [eax]
		mov	[esp+8], eax
		mov	eax, [edx+4]
		mov	eax, [eax]
		mov	[esp], ecx
		mov	[ebp+var_58], 0FFFFFFFFh
		mov	[esp+4], eax
		call	sub_6FFC8070
		jmp	loc_6FFCB7B9	; jumptable 6FFCB7F2 default case
; ---------------------------------------------------------------------------
		align 10h

loc_6FFCB9A0:				; CODE XREF: sub_6FFCB780+72j
					; DATA XREF: .rdata:off_6FFF3D14o
		mov	edx, [ebp+arg_C] ; jumptable 6FFCB7F2 case 1
		mov	ecx, [ebp+arg_0]
		mov	eax, [edx+8]
		mov	eax, [eax]
		mov	[esp+8], eax
		mov	eax, [edx+4]
		mov	eax, [eax]
		mov	[esp], ecx
		mov	[ebp+var_58], 0FFFFFFFFh
		mov	[esp+4], eax
		call	sub_6FFC80C0
		jmp	loc_6FFCB7B9	; jumptable 6FFCB7F2 default case
; ---------------------------------------------------------------------------
		align 10h

loc_6FFCB9D0:				; CODE XREF: sub_6FFCB780+72j
					; DATA XREF: .rdata:off_6FFF3D14o
		mov	edx, [ebp+arg_C] ; jumptable 6FFCB7F2 case 0
		mov	eax, [edx+8]
		mov	eax, [eax]
		mov	[ebp+var_10], eax
		lock inc dword ptr [eax]
		setnz	dl
		mov	eax, [ebp+var_10]
		test	byte ptr [eax+10h], 1
		jz	loc_6FFCBAF4

loc_6FFCB9EE:				; CODE XREF: sub_6FFCB780+38Dj
		mov	ecx, [ebp+arg_C]
		mov	eax, [ecx+4]
		mov	eax, [eax]
		mov	[ebp+var_C], eax
		lock inc dword ptr [eax]
		setnz	dl
		mov	eax, [ebp+var_C]
		test	byte ptr [eax+10h], 1
		jnz	short loc_6FFCBA21
		mov	eax, [eax+4]
		mov	[ebp+var_58], 4
		mov	[esp+4], eax
		lea	eax, [ebp+var_C]
		mov	[esp], eax
		call	sub_6FFE5F80

loc_6FFCBA21:				; CODE XREF: sub_6FFCB780+286j
		lea	eax, [ebp+var_10]
		mov	[esp+8], eax
		lea	eax, [ebp+var_C]
		mov	[esp+4], eax
		mov	eax, [ebp+arg_0]
		mov	[ebp+var_58], 3
		mov	[esp], eax
		call	sub_6FFC8110
		lea	eax, [ebp+var_C]
		mov	[esp], eax
		mov	[ebp+var_58], 4
		call	sub_6FFE6AF0
		mov	eax, [ebp+var_10]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jnz	loc_6FFCB7B9	; jumptable 6FFCB7F2 default case
		mov	eax, [ebp+var_10]
		mov	[ebp+var_58], 0FFFFFFFFh
		mov	[esp+4], eax
		lea	eax, [ebp+var_10]
		mov	[esp], eax
		call	sub_6FFE6F70
		jmp	loc_6FFCB7B9	; jumptable 6FFCB7F2 default case
; ---------------------------------------------------------------------------

loc_6FFCBA82:				; CODE XREF: sub_6FFCB780+72j
					; DATA XREF: .rdata:off_6FFF3D14o
		mov	edx, [ebp+arg_C] ; jumptable 6FFCB7F2 case 7
		mov	ecx, [ebp+arg_0]
		mov	eax, [edx+4]
		mov	eax, [eax]
		mov	[esp], ecx
		mov	[ebp+var_58], 0FFFFFFFFh
		mov	[esp+4], eax
		call	sub_6FFC9E50
		mov	ecx, [ebp+arg_C]
		mov	edx, [ecx]
		test	edx, edx
		jz	loc_6FFCB7B9	; jumptable 6FFCB7F2 default case
		mov	[edx], al
		jmp	loc_6FFCB7B9	; jumptable 6FFCB7F2 default case
; ---------------------------------------------------------------------------

loc_6FFCBAB4:				; CODE XREF: sub_6FFCB780+63j
		mov	dword ptr [esp+8], 4Ch
		mov	dword ptr [esp+4], offset aRBuildKdesup_0 ; "R:/build/kdesupport/dbusmenu-qt-0.9.2/w"...
		mov	dword ptr [esp], offset	aStaticmetaob_0	; "staticMetaObject.cast(_o)"
		call	ds:_Z9qt_assertPKcS0_i
		jmp	loc_6FFCB7E9
; ---------------------------------------------------------------------------

loc_6FFCBAD6:				; CODE XREF: sub_6FFCB780+E5j
		mov	edx, [ebp+var_74]
		mov	eax, [edx+4]
		mov	[esp], ecx
		mov	[ebp+var_58], 1
		mov	[esp+4], eax
		call	sub_6FFE5F80
		jmp	loc_6FFCB86B
; ---------------------------------------------------------------------------

loc_6FFCBAF4:				; CODE XREF: sub_6FFCB780+268j
		mov	eax, [eax+4]
		mov	[ebp+var_58], 0FFFFFFFFh
		mov	[esp+4], eax
		lea	eax, [ebp+var_10]
		mov	[esp], eax
		call	sub_6FFE6BF0
		jmp	loc_6FFCB9EE
; ---------------------------------------------------------------------------

loc_6FFCBB12:				; CODE XREF: sub_6FFCB780+D3j
		mov	edx, [ecx]
		mov	eax, edx
		mov	ecx, edx
		mov	[ebp+var_80], edx
		mov	edx, [edx+0Ch]
		add	eax, 14h
		lea	edx, [eax+edx*4]
		mov	[ebp+var_68], edx
		mov	edx, [ecx+8]
		lea	edx, [eax+edx*4]
		cmp	[ebp+var_68], edx
		mov	[ebp+var_7C], edx
		jnz	short loc_6FFCBB57
		jmp	loc_6FFCBC00
; ---------------------------------------------------------------------------
		align 10h

loc_6FFCBB40:				; CODE XREF: sub_6FFCB780+3ECj
					; sub_6FFCB780+3F7j ...
		mov	ecx, [ebp+var_6C]
		mov	[esp], ecx
		call	sub_6FFEAE50

loc_6FFCBB4B:				; CODE XREF: sub_6FFCB780+3E5j
		mov	eax, [ebp+var_68]
		cmp	[ebp+var_7C], eax
		jz	loc_6FFCBC00

loc_6FFCBB57:				; CODE XREF: sub_6FFCB780+3B3j
		sub	[ebp+var_68], 4
		mov	eax, [ebp+var_68]
		mov	eax, [eax]
		test	eax, eax
		mov	[ebp+var_6C], eax
		jz	short loc_6FFCBB4B
		mov	eax, [eax+4]
		test	eax, eax
		jz	short loc_6FFCBB40
		lock dec dword ptr [eax+34h]
		setnz	dl
		test	dl, dl
		jnz	short loc_6FFCBB40
		mov	ecx, [ebp+var_6C]
		mov	ecx, [ecx+4]
		mov	eax, [ecx+4]
		mov	[ebp+var_70], ecx
		cmp	ecx, eax
		jnz	short loc_6FFCBBAE
		jmp	short loc_6FFCBBE0
; ---------------------------------------------------------------------------
		align 10h

loc_6FFCBB90:				; CODE XREF: sub_6FFCB780+445j
					; sub_6FFCB780+45Aj
		mov	eax, [ebp+var_64]
		mov	[ebp+var_58], 1
		add	eax, 8
		mov	[esp], eax
		call	ds:_ZN8QVariantD1Ev
		mov	eax, [ebp+var_60]
		cmp	[ebp+var_70], eax
		jz	short loc_6FFCBBE0

loc_6FFCBBAE:				; CODE XREF: sub_6FFCB780+407j
		mov	edx, [eax+4]
		lea	ecx, [eax-1Ch]
		mov	[ebp+var_64], ecx
		mov	[ebp+var_60], edx
		mov	edx, [eax-1Ch]
		lock dec dword ptr [edx]
		setnz	cl
		test	cl, cl
		jnz	short loc_6FFCBB90
		mov	eax, [eax-1Ch]
		mov	[ebp+var_58], 1
		mov	[esp], eax
		call	ds:_ZN7QString4freeEPNS_4DataE
		jmp	short loc_6FFCBB90
; ---------------------------------------------------------------------------
		align 10h

loc_6FFCBBE0:				; CODE XREF: sub_6FFCB780+409j
					; sub_6FFCB780+42Cj
		mov	edx, [ebp+var_70]
		mov	dword ptr [esp+4], 1Ch
		mov	[ebp+var_58], 1
		mov	[esp], edx
		call	ds:_ZN8QMapData16continueFreeDataEi
		jmp	loc_6FFCBB40
; ---------------------------------------------------------------------------

loc_6FFCBC00:				; CODE XREF: sub_6FFCB780+3B5j
					; sub_6FFCB780+3D1j
		mov	edx, [ebp+var_80]
		mov	[ebp+var_58], 1
		mov	[esp], edx
		call	ds:_Z5qFreePv
		jmp	loc_6FFCB859
sub_6FFCB780	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn

sub_6FFCBC18	proc near		; DATA XREF: sub_6FFCB780+23o

arg_0		= dword	ptr  4

		add	ebp, 8
		mov	eax, [ebp-58h]
		mov	ecx, [ebp-54h]
		cmp	eax, 1
		mov	[ebp-88h], ecx
		jz	short loc_6FFCBC5D
		cmp	eax, 2
		jz	short loc_6FFCBC85
		cmp	eax, 3
		jz	short loc_6FFCBC97
		lea	eax, [ebp-14h]
		mov	[esp+0], eax
		mov	dword ptr [ebp-58h], 0
		call	sub_6FFE6AF0
		mov	eax, [ebp-88h]
		mov	dword ptr [ebp-58h], 0FFFFFFFFh
		mov	[esp+0], eax
		call	_Unwind_SjLj_Resume
; ---------------------------------------------------------------------------

loc_6FFCBC5D:				; CODE XREF: sub_6FFCBC18+12j
		lea	eax, [ebp-28h]
		mov	[esp+0], eax
		mov	dword ptr [ebp-58h], 0
		call	ds:_ZN8QVariantD2Ev
		mov	eax, [ebp-88h]
		mov	dword ptr [ebp-58h], 0FFFFFFFFh
		mov	[esp+0], eax
		call	_Unwind_SjLj_Resume
; ---------------------------------------------------------------------------

loc_6FFCBC85:				; CODE XREF: sub_6FFCBC18+17j
		lea	eax, [ebp-0Ch]
		mov	[esp+0], eax
		mov	dword ptr [ebp-58h], 0
		call	sub_6FFE6AF0

loc_6FFCBC97:				; CODE XREF: sub_6FFCBC18+1Cj
		mov	edx, [ebp-88h]
		mov	eax, [ebp-10h]
		mov	[ebp-84h], edx
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jnz	short loc_6FFCBCC9
		mov	eax, [ebp-10h]
		mov	dword ptr [ebp-58h], 0
		mov	[esp+arg_0], eax
		lea	eax, [ebp-10h]
		mov	[esp+0], eax
		call	sub_6FFE6F70

loc_6FFCBCC9:				; CODE XREF: sub_6FFCBC18+96j
		mov	ecx, [ebp-84h]
		mov	dword ptr [ebp-58h], 0FFFFFFFFh
		mov	[esp+0], ecx
		call	_Unwind_SjLj_Resume
sub_6FFCBC18	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_6FFCBCE0	proc near		; DATA XREF: .rdata:6FFF9E30o

var_54		= dword	ptr -54h
var_50		= dword	ptr -50h
var_4C		= byte ptr -4Ch
var_48		= dword	ptr -48h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_C		= byte ptr -0Ch
var_8		= byte ptr -8
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h

		push	ebp
		mov	ebp, esp
		sub	esp, 68h
		lea	eax, [ebp+var_8]
		mov	[ebp+var_2C], eax
		lea	eax, [ebp+var_4C]
		mov	[ebp+var_34], offset sub_6FFEC1F0
		mov	[ebp+var_30], offset dword_6FFECD0C
		mov	[ebp+var_28], offset sub_6FFCBE6B
		mov	[ebp+var_24], esp
		mov	[esp], eax
		call	_Unwind_SjLj_Register
		mov	eax, [ebp+arg_C]
		mov	[esp+0Ch], eax
		mov	eax, [ebp+arg_8]
		mov	[esp+8], eax
		mov	eax, [ebp+arg_4]
		mov	[esp+4], eax
		mov	eax, [ebp+arg_0]
		mov	[esp], eax
		mov	[ebp+var_48], 0FFFFFFFFh
		call	ds:__imp__ZN7QObject11qt_metacallEN11QMetaObject4CallEiPPv
		test	eax, eax
		mov	[ebp+var_50], eax
		js	short loc_6FFCBD96
		mov	ecx, [ebp+arg_4]
		test	ecx, ecx
		jz	short loc_6FFCBDA6
		cmp	[ebp+arg_4], 1
		jz	loc_6FFCBE50
		cmp	[ebp+arg_4], 2
		jz	loc_6FFCBE10
		cmp	[ebp+arg_4], 3
		lea	esi, [esi+0]
		jz	loc_6FFCBE10
		cmp	[ebp+arg_4], 4
		jz	loc_6FFCBE10
		cmp	[ebp+arg_4], 5
		jz	loc_6FFCBE10
		cmp	[ebp+arg_4], 6
		xchg	ax, ax
		jz	loc_6FFCBE10
		cmp	[ebp+arg_4], 7
		jz	loc_6FFCBE10
		cmp	[ebp+arg_4], 8
		jz	short loc_6FFCBE10

loc_6FFCBD96:				; CODE XREF: sub_6FFCBCE0+5Cj
		lea	eax, [ebp+var_4C]
		mov	[esp], eax
		call	_Unwind_SjLj_Unregister
		mov	eax, [ebp+var_50]
		leave
		retn
; ---------------------------------------------------------------------------

loc_6FFCBDA6:				; CODE XREF: sub_6FFCBCE0+63j
		cmp	eax, 7
		jle	short loc_6FFCBE24

loc_6FFCBDAB:				; CODE XREF: sub_6FFCBCE0+165j
		sub	[ebp+var_50], 8
		lea	eax, [ebp+var_4C]
		mov	[esp], eax
		call	_Unwind_SjLj_Unregister
		mov	eax, [ebp+var_50]
		leave
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6FFCBDC0:				; CODE XREF: sub_6FFCBCE0+17Dj
		cmp	[ebp+var_50], 1
		jnz	short loc_6FFCBE10
		mov	eax, [ebp+arg_0]
		mov	[esp+4], eax
		lea	eax, [ebp+var_C]
		mov	[esp], eax
		mov	[ebp+var_48], 0FFFFFFFFh
		call	sub_6FFC8230
		lea	eax, [ebp+var_C]
		sub	esp, 4
		mov	[esp+4], eax
		mov	eax, [ebp+var_54]
		mov	[esp], eax
		mov	[ebp+var_48], 1
		call	ds:_ZN7QStringaSERKS_
		lea	eax, [ebp+var_C]
		mov	[esp], eax
		mov	[ebp+var_48], 0FFFFFFFFh
		call	sub_6FFEA140
		xchg	ax, ax

loc_6FFCBE10:				; CODE XREF: sub_6FFCBCE0+73j
					; sub_6FFCBCE0+80j ...
		sub	[ebp+var_50], 2
		lea	eax, [ebp+var_4C]
		mov	[esp], eax
		call	_Unwind_SjLj_Unregister
		mov	eax, [ebp+var_50]
		leave
		retn
; ---------------------------------------------------------------------------

loc_6FFCBE24:				; CODE XREF: sub_6FFCBCE0+C9j
		mov	eax, [ebp+arg_C]
		mov	[esp+0Ch], eax
		mov	eax, [ebp+var_50]
		mov	dword ptr [esp+4], 0
		mov	[esp+8], eax
		mov	eax, [ebp+arg_0]
		mov	[esp], eax
		call	sub_6FFCB780
		jmp	loc_6FFCBDAB
; ---------------------------------------------------------------------------
		align 10h

loc_6FFCBE50:				; CODE XREF: sub_6FFCBCE0+69j
		mov	eax, [ebp+arg_C]
		mov	edx, [ebp+var_50]
		mov	eax, [eax]
		test	edx, edx
		mov	[ebp+var_54], eax
		jnz	loc_6FFCBDC0
		mov	dword ptr [eax], 2
		jmp	short loc_6FFCBE10
sub_6FFCBCE0	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn

sub_6FFCBE6B	proc near		; DATA XREF: sub_6FFCBCE0+1Do
		add	ebp, 8
		mov	eax, [ebp-44h]
		mov	[ebp-58h], eax
		lea	eax, [ebp-0Ch]
		mov	[esp+0], eax
		mov	dword ptr [ebp-48h], 0
		call	sub_6FFEA140
		mov	eax, [ebp-58h]
		mov	[esp+0], eax
		mov	dword ptr [ebp-48h], 0FFFFFFFFh
		call	_Unwind_SjLj_Resume
sub_6FFCBE6B	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_6FFCBEA0	proc near		; CODE XREF: _ZN16DBusMenuExporter9setStatusERK7QString+14j

var_148		= dword	ptr -148h
var_144		= dword	ptr -144h
var_140		= dword	ptr -140h
var_13C		= dword	ptr -13Ch
var_138		= dword	ptr -138h
var_134		= dword	ptr -134h
var_130		= dword	ptr -130h
var_12C		= dword	ptr -12Ch
var_128		= dword	ptr -128h
var_124		= dword	ptr -124h
var_120		= dword	ptr -120h
var_11C		= dword	ptr -11Ch
var_118		= dword	ptr -118h
var_114		= dword	ptr -114h
var_110		= dword	ptr -110h
var_10C		= dword	ptr -10Ch
var_108		= dword	ptr -108h
var_104		= dword	ptr -104h
var_100		= dword	ptr -100h
var_FC		= dword	ptr -0FCh
var_F8		= dword	ptr -0F8h
var_F4		= dword	ptr -0F4h
var_F0		= dword	ptr -0F0h
var_EC		= dword	ptr -0ECh
var_E8		= dword	ptr -0E8h
var_E4		= dword	ptr -0E4h
var_E0		= dword	ptr -0E0h
var_DC		= byte ptr -0DCh
var_D8		= dword	ptr -0D8h
var_C4		= dword	ptr -0C4h
var_C0		= dword	ptr -0C0h
var_BC		= dword	ptr -0BCh
var_B8		= dword	ptr -0B8h
var_B4		= dword	ptr -0B4h
var_A0		= dword	ptr -0A0h
var_70		= byte ptr -70h
var_60		= byte ptr -60h
var_50		= byte ptr -50h
var_40		= byte ptr -40h
var_2C		= byte ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= byte ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= byte ptr -8
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 168h
		lea	eax, [ebp+var_8]
		mov	[ebp+var_BC], eax
		lea	eax, [ebp+var_DC]
		mov	[ebp+var_C4], offset sub_6FFEC1F0
		mov	[ebp+var_C0], offset dword_6FFECD14
		mov	[ebp+var_B8], offset sub_6FFCC720
		mov	[ebp+var_B4], esp
		mov	[esp], eax
		call	_Unwind_SjLj_Register
		mov	edx, [ebp+arg_0]
		mov	ecx, [ebp+arg_4]
		add	edx, 0Ch
		mov	[ebp+var_118], edx
		mov	[esp+4], ecx
		mov	[esp], edx
		mov	[ebp+var_D8], 0FFFFFFFFh
		call	ds:_ZNK7QStringeqERKS_
		test	al, al
		jz	short loc_6FFCBF20

loc_6FFCBF0E:				; CODE XREF: sub_6FFCBEA0+55Fj
					; sub_6FFCBEA0+56Ej
		lea	eax, [ebp+var_DC]
		mov	[esp], eax
		call	_Unwind_SjLj_Unregister
		leave
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6FFCBF20:				; CODE XREF: sub_6FFCBEA0+6Cj
		mov	eax, [ebp+arg_4]
		mov	[esp+4], eax
		mov	edx, [ebp+var_118]
		mov	[esp], edx
		call	ds:_ZN7QStringaSERKS_
		mov	eax, ds:_ZN8QMapData11shared_nullE
		mov	[ebp+var_C], eax
		lock inc dword ptr [eax+34h]
		setnz	dl
		mov	ecx, [ebp+arg_4]
		lea	eax, [ebp+var_40]
		mov	[esp], eax
		mov	[esp+4], ecx
		mov	[ebp+var_D8], 15h
		call	ds:_ZN8QVariantC1ERK7QString
		mov	dword ptr [esp+4], 0FFFFFFFFh
		mov	dword ptr [esp], offset	aStatus	; "Status"
		mov	[ebp+var_D8], 14h
		call	ds:_ZN7QString16fromAscii_helperEPKci
		mov	[ebp+var_10], eax
		mov	eax, [ebp+var_C]
		mov	eax, [eax+34h]
		cmp	eax, 1
		jz	short loc_6FFCBFA4
		lea	eax, [ebp+var_C]
		mov	[esp], eax
		mov	[ebp+var_D8], 13h
		call	sub_6FFE3B80

loc_6FFCBFA4:				; CODE XREF: sub_6FFCBEA0+EDj
		mov	eax, [ebp+var_C]
		mov	edx, [eax+38h]
		mov	[ebp+var_F0], eax
		test	edx, edx
		mov	[ebp+var_EC], edx
		js	loc_6FFCC08F
		shl	edx, 2
		mov	[ebp+var_104], edx
		mov	[ebp+var_100], eax
		lea	esi, [esi+0]

loc_6FFCBFD0:				; CODE XREF: sub_6FFCBEA0+188j
					; sub_6FFCBEA0+295j
		mov	ecx, [ebp+var_EC]
		mov	ecx, [eax+ecx*4+4]
		cmp	[ebp+var_F0], ecx
		mov	[ebp+var_E8], ecx
		jz	short loc_6FFCC030
		lea	eax, [ebp+var_10]
		mov	[esp+4], eax
		mov	eax, ecx
		sub	eax, 1Ch
		mov	[esp], eax
		mov	[ebp+var_D8], 13h
		call	ds:_ZNK7QStringltERKS_
		mov	edx, [ebp+var_E8]
		test	al, al
		mov	[ebp+var_F0], edx
		jz	short loc_6FFCC030
		mov	ecx, [ebp+var_C]
		mov	eax, edx
		mov	[ebp+var_100], edx
		mov	[ebp+var_F0], ecx
		jmp	short loc_6FFCBFD0
; ---------------------------------------------------------------------------
		align 10h

loc_6FFCC030:				; CODE XREF: sub_6FFCBEA0+146j
					; sub_6FFCBEA0+175j
		mov	edx, [ebp+var_104]
		mov	ecx, [ebp+var_100]
		mov	[ebp+edx+var_A0], ecx
		sub	edx, 4
		sub	[ebp+var_EC], 1
		mov	[ebp+var_104], edx
		jns	loc_6FFCC126
		mov	eax, [ebp+var_F0]
		cmp	[ebp+var_C], eax
		jz	short loc_6FFCC08F
		sub	eax, 1Ch
		mov	[ebp+var_12C], eax
		mov	[esp+4], eax
		lea	eax, [ebp+var_10]
		mov	[esp], eax
		mov	[ebp+var_D8], 13h
		call	ds:_ZNK7QStringltERKS_
		test	al, al
		jz	loc_6FFCC140

loc_6FFCC08F:				; CODE XREF: sub_6FFCBEA0+118j
					; sub_6FFCBEA0+1C2j ...
		mov	ecx, [ebp+var_C]
		lea	eax, [ebp+var_A0]
		mov	[ebp+var_144], ecx
		mov	dword ptr [esp+0Ch], 8
		mov	dword ptr [esp+8], 1Ch
		mov	[esp+4], eax
		mov	[esp], ecx
		mov	[ebp+var_D8], 13h
		call	ds:_ZN8QMapData11node_createEPPNS_4NodeEii
		mov	[ebp+var_140], eax
		sub	eax, 1Ch
		test	eax, eax
		mov	[ebp+var_13C], eax
		mov	[ebp+var_148], eax
		jz	short loc_6FFCC105
		mov	edx, [ebp+var_140]
		mov	eax, [ebp+var_10]
		mov	[edx-1Ch], eax
		lea	edx, [ebp+var_10]
		cmp	[ebp+var_13C], edx
		jz	loc_6FFCC6EB

loc_6FFCC0F9:				; CODE XREF: sub_6FFCBEA0+87Bj
		lock inc dword ptr [eax]
		setnz	dl
		mov	eax, [ebp+var_13C]

loc_6FFCC105:				; CODE XREF: sub_6FFCBEA0+23Cj
		add	eax, 8
		jz	short loc_6FFCC172
		lea	edx, [ebp+var_40]
		mov	[esp+4], edx
		mov	[esp], eax
		mov	[ebp+var_D8], 3
		call	ds:_ZN8QVariantC1ERKS_
		jmp	short loc_6FFCC172
; ---------------------------------------------------------------------------

loc_6FFCC126:				; CODE XREF: sub_6FFCBEA0+1B3j
		mov	eax, [ebp+var_C]
		mov	[ebp+var_F0], eax
		mov	eax, [ebp+var_100]
		jmp	loc_6FFCBFD0
; ---------------------------------------------------------------------------
		align 10h

loc_6FFCC140:				; CODE XREF: sub_6FFCBEA0+1E9j
		mov	edx, [ebp+var_F0]
		cmp	[ebp+var_C], edx
		jz	loc_6FFCC08F
		lea	eax, [ebp+var_40]
		mov	[esp+4], eax
		mov	eax, [ebp+var_12C]
		add	eax, 8
		mov	[esp], eax
		mov	[ebp+var_D8], 13h
		call	ds:_ZN8QVariantaSERKS_

loc_6FFCC172:				; CODE XREF: sub_6FFCBEA0+268j
					; sub_6FFCBEA0+284j
		mov	eax, [ebp+var_10]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jz	loc_6FFCC6D0

loc_6FFCC183:				; CODE XREF: sub_6FFCBEA0+846j
		lea	eax, [ebp+var_40]
		mov	[esp], eax
		mov	[ebp+var_D8], 15h
		call	ds:_ZN8QVariantD1Ev
		mov	dword ptr [esp+4], 0FFFFFFFFh
		mov	dword ptr [esp], offset	aPropertieschan	; "PropertiesChanged"
		call	ds:_ZN7QString16fromAscii_helperEPKci
		mov	[ebp+var_1C], eax
		mov	eax, ds:off_6FFF3FB4
		mov	dword ptr [esp+4], 0FFFFFFFFh
		mov	[esp], eax
		mov	[ebp+var_D8], 12h
		call	ds:_ZN7QString16fromAscii_helperEPKci
		lea	edx, [ebp+var_1C]
		mov	[ebp+var_18], eax
		lea	eax, [ebp+var_14]
		mov	[esp+0Ch], edx
		lea	edx, [ebp+var_18]
		mov	[esp+8], edx
		mov	ecx, [ebp+arg_0]
		mov	edx, [ecx+8]
		mov	edx, [edx+8]
		mov	[esp], eax
		add	edx, 4
		mov	[esp+4], edx
		mov	[ebp+var_D8], 11h
		call	ds:_ZN12QDBusMessage12createSignalERK7QStringS2_S2_
		sub	esp, 4
		mov	eax, [ebp+var_18]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jz	loc_6FFCC6B3

loc_6FFCC21C:				; CODE XREF: sub_6FFCBEA0+829j
		mov	eax, [ebp+var_1C]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jz	loc_6FFCC698

loc_6FFCC22D:				; CODE XREF: sub_6FFCBEA0+80Ej
		mov	eax, ds:_ZN9QListData11shared_nullE
		mov	[ebp+var_E0], eax
		mov	[ebp+var_28], eax
		lock inc dword ptr [eax]
		setnz	al
		lea	eax, [ebp+var_28]
		mov	[esp+4], eax
		lea	eax, [ebp+var_70]
		mov	[esp], eax
		mov	[ebp+var_D8], 0Eh
		call	ds:_ZN8QVariantC1ERK11QStringList
		lea	eax, [ebp+var_C]
		mov	[esp+4], eax
		lea	eax, [ebp+var_60]
		mov	[esp], eax
		mov	[ebp+var_D8], 0Dh
		call	ds:_ZN8QVariantC1ERK4QMapI7QStringS_E
		mov	eax, ds:off_6FFF3FD0
		mov	[esp+4], eax
		lea	eax, [ebp+var_50]
		mov	[esp], eax
		mov	[ebp+var_D8], 0Ch
		call	ds:_ZN8QVariantC1EPKc
		mov	ecx, [ebp+var_E0]
		mov	[ebp+var_24], ecx
		lock inc dword ptr [ecx]
		setnz	al
		lea	eax, [ebp+var_50]
		mov	[esp+4], eax
		lea	eax, [ebp+var_24]
		mov	[esp], eax
		mov	[ebp+var_D8], 0Bh
		call	sub_6FFE9660
		lea	eax, [ebp+var_60]
		mov	[esp+4], eax
		lea	eax, [ebp+var_24]
		mov	[esp], eax
		call	sub_6FFE9660
		lea	eax, [ebp+var_70]
		mov	[esp+4], eax
		lea	eax, [ebp+var_24]
		mov	[esp], eax
		call	sub_6FFE9660
		mov	eax, [ebp+var_24]
		mov	[ebp+var_20], eax
		lock inc dword ptr [eax]
		setnz	dl
		mov	eax, [ebp+var_20]
		test	byte ptr [eax+10h], 1
		jnz	short loc_6FFCC310
		mov	eax, [eax+4]
		mov	[esp+4], eax
		lea	eax, [ebp+var_20]
		mov	[esp], eax
		call	sub_6FFE9410

loc_6FFCC310:				; CODE XREF: sub_6FFCBEA0+45Cj
		mov	eax, [ebp+var_24]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jz	loc_6FFCC600

loc_6FFCC321:				; CODE XREF: sub_6FFCBEA0+7F3j
		lea	eax, [ebp+var_50]
		mov	[esp], eax
		mov	[ebp+var_D8], 9
		call	ds:_ZN8QVariantD1Ev
		lea	eax, [ebp+var_60]
		mov	[esp], eax
		mov	[ebp+var_D8], 8
		call	ds:_ZN8QVariantD1Ev
		lea	eax, [ebp+var_70]
		mov	[esp], eax
		mov	[ebp+var_D8], 7
		call	ds:_ZN8QVariantD1Ev
		mov	eax, [ebp+var_28]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jz	loc_6FFCC558

loc_6FFCC374:				; CODE XREF: sub_6FFCBEA0+759j
		lea	eax, [ebp+var_20]
		mov	[esp+4], eax
		lea	eax, [ebp+var_14]
		mov	[esp], eax
		mov	[ebp+var_D8], 6
		call	ds:_ZN12QDBusMessage12setArgumentsERK5QListI8QVariantE
		lea	eax, [ebp+var_2C]
		mov	[esp], eax
		call	ds:_ZN15QDBusConnection10sessionBusEv
		sub	esp, 4
		lea	eax, [ebp+var_14]
		mov	[esp+4], eax
		lea	eax, [ebp+var_2C]
		mov	[esp], eax
		mov	[ebp+var_D8], 5
		call	ds:_ZNK15QDBusConnection4sendERK12QDBusMessage
		lea	eax, [ebp+var_2C]
		mov	[esp], eax
		mov	[ebp+var_D8], 6
		call	ds:_ZN15QDBusConnectionD1Ev
		mov	eax, [ebp+var_20]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jz	loc_6FFCC4C4

loc_6FFCC3E4:				; CODE XREF: sub_6FFCBEA0+6B3j
		lea	eax, [ebp+var_14]
		mov	[esp], eax
		mov	[ebp+var_D8], 15h
		call	ds:_ZN12QDBusMessageD1Ev
		mov	eax, [ebp+var_C]
		test	eax, eax
		jz	loc_6FFCBF0E
		lock dec dword ptr [eax+34h]
		setnz	dl
		test	dl, dl
		jnz	loc_6FFCBF0E
		mov	ecx, [ebp+var_C]
		mov	eax, [ecx+4]
		mov	[ebp+var_11C], ecx
		cmp	ecx, eax
		jz	short loc_6FFCC493
		mov	edx, ds:_ZN8QVariantD1Ev
		mov	[ebp+var_E4], edx
		jmp	short loc_6FFCC434
; ---------------------------------------------------------------------------

loc_6FFCC432:				; CODE XREF: sub_6FFCBEA0+5F1j
		mov	eax, ecx

loc_6FFCC434:				; CODE XREF: sub_6FFCBEA0+590j
		mov	ecx, [eax+4]
		lea	edx, [eax-1Ch]
		mov	[ebp+var_114], edx
		mov	[ebp+var_110], ecx
		mov	edx, [eax-1Ch]
		lock dec dword ptr [edx]
		setnz	cl
		test	cl, cl
		jnz	short loc_6FFCC469
		mov	eax, [eax-1Ch]
		mov	[esp], eax
		mov	[ebp+var_D8], 0FFFFFFFFh
		call	ds:_ZN7QString4freeEPNS_4DataE

loc_6FFCC469:				; CODE XREF: sub_6FFCBEA0+5B1j
		mov	eax, [ebp+var_114]
		add	eax, 8
		mov	[esp], eax
		mov	[ebp+var_D8], 0FFFFFFFFh
		call	[ebp+var_E4]
		mov	ecx, [ebp+var_110]
		cmp	[ebp+var_11C], ecx
		jnz	short loc_6FFCC432

loc_6FFCC493:				; CODE XREF: sub_6FFCBEA0+582j
		mov	dword ptr [esp+4], 1Ch
		mov	eax, [ebp+var_11C]
		mov	[esp], eax
		mov	[ebp+var_D8], 0FFFFFFFFh
		call	ds:_ZN8QMapData16continueFreeDataEi
		lea	eax, [ebp+var_DC]
		mov	[esp], eax
		call	_Unwind_SjLj_Unregister
		leave
		retn
; ---------------------------------------------------------------------------

loc_6FFCC4C4:				; CODE XREF: sub_6FFCBEA0+53Ej
		mov	ecx, [ebp+var_20]
		mov	edx, [ecx+0Ch]
		mov	eax, ecx
		add	eax, 14h
		mov	[ebp+var_130], ecx
		lea	edx, [eax+edx*4]
		mov	[ebp+var_F8], edx
		mov	edx, [ecx+8]
		lea	edx, [eax+edx*4]
		cmp	[ebp+var_F8], edx
		mov	[ebp+var_120], edx
		jz	short loc_6FFCC53A

loc_6FFCC4F2:				; CODE XREF: sub_6FFCBEA0+698j
		sub	[ebp+var_F8], 4
		mov	eax, [ebp+var_F8]
		mov	eax, [eax]
		test	eax, eax
		mov	[ebp+var_108], eax
		jz	short loc_6FFCC52C
		mov	[esp], eax
		mov	[ebp+var_D8], 0Fh
		call	ds:_ZN8QVariantD1Ev
		mov	edx, [ebp+var_108]
		mov	[esp], edx
		call	sub_6FFEAE50

loc_6FFCC52C:				; CODE XREF: sub_6FFCBEA0+669j
		mov	ecx, [ebp+var_F8]
		cmp	[ebp+var_120], ecx
		jnz	short loc_6FFCC4F2

loc_6FFCC53A:				; CODE XREF: sub_6FFCBEA0+650j
		mov	eax, [ebp+var_130]
		mov	[esp], eax
		mov	[ebp+var_D8], 0Fh
		call	ds:_Z5qFreePv
		jmp	loc_6FFCC3E4
; ---------------------------------------------------------------------------

loc_6FFCC558:				; CODE XREF: sub_6FFCBEA0+4CEj
		mov	edx, [ebp+var_28]
		mov	eax, edx
		mov	ecx, edx
		mov	[ebp+var_134], edx
		mov	edx, [edx+0Ch]
		add	eax, 14h
		lea	edx, [eax+edx*4]
		mov	[ebp+var_F4], edx
		mov	edx, [ecx+8]
		lea	edx, [eax+edx*4]
		cmp	[ebp+var_F4], edx
		mov	[ebp+var_124], edx
		jnz	short loc_6FFCC59E
		jmp	short loc_6FFCC5E0
; ---------------------------------------------------------------------------
		align 10h

loc_6FFCC590:				; CODE XREF: sub_6FFCBEA0+715j
		mov	eax, [ebp+var_F4]
		cmp	[ebp+var_124], eax
		jz	short loc_6FFCC5E0

loc_6FFCC59E:				; CODE XREF: sub_6FFCBEA0+6E6j
					; sub_6FFCBEA0+73Ej
		sub	[ebp+var_F4], 4
		mov	edx, [ebp+var_F4]
		mov	eax, [edx]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jnz	short loc_6FFCC590
		mov	ecx, [ebp+var_F4]
		mov	eax, [ecx]
		mov	[esp], eax
		mov	[ebp+var_D8], 6
		call	ds:_ZN7QString4freeEPNS_4DataE
		mov	eax, [ebp+var_F4]
		cmp	[ebp+var_124], eax
		jnz	short loc_6FFCC59E

loc_6FFCC5E0:				; CODE XREF: sub_6FFCBEA0+6E8j
					; sub_6FFCBEA0+6FCj
		mov	edx, [ebp+var_134]
		mov	[esp], edx
		mov	[ebp+var_D8], 6
		call	ds:_Z5qFreePv
		jmp	loc_6FFCC374
; ---------------------------------------------------------------------------
		align 10h

loc_6FFCC600:				; CODE XREF: sub_6FFCBEA0+47Bj
		mov	eax, [ebp+var_24]
		mov	[ebp+var_138], eax
		mov	ecx, [ebp+var_138]
		add	eax, 14h
		mov	edx, [ecx+0Ch]
		lea	edx, [eax+edx*4]
		mov	[ebp+var_FC], edx
		mov	edx, [ecx+8]
		lea	edx, [eax+edx*4]
		cmp	[ebp+var_FC], edx
		mov	[ebp+var_128], edx
		jz	short loc_6FFCC67A

loc_6FFCC632:				; CODE XREF: sub_6FFCBEA0+7D8j
		sub	[ebp+var_FC], 4
		mov	eax, [ebp+var_FC]
		mov	eax, [eax]
		test	eax, eax
		mov	[ebp+var_10C], eax
		jz	short loc_6FFCC66C
		mov	[esp], eax
		mov	[ebp+var_D8], 0Ah
		call	ds:_ZN8QVariantD1Ev
		mov	edx, [ebp+var_10C]
		mov	[esp], edx
		call	sub_6FFEAE50

loc_6FFCC66C:				; CODE XREF: sub_6FFCBEA0+7A9j
		mov	ecx, [ebp+var_FC]
		cmp	[ebp+var_128], ecx
		jnz	short loc_6FFCC632

loc_6FFCC67A:				; CODE XREF: sub_6FFCBEA0+790j
		mov	eax, [ebp+var_138]
		mov	[esp], eax
		mov	[ebp+var_D8], 0Ah
		call	ds:_Z5qFreePv
		jmp	loc_6FFCC321
; ---------------------------------------------------------------------------

loc_6FFCC698:				; CODE XREF: sub_6FFCBEA0+387j
		mov	eax, [ebp+var_1C]
		mov	[esp], eax
		mov	[ebp+var_D8], 0Fh
		call	ds:_ZN7QString4freeEPNS_4DataE
		jmp	loc_6FFCC22D
; ---------------------------------------------------------------------------

loc_6FFCC6B3:				; CODE XREF: sub_6FFCBEA0+376j
		mov	eax, [ebp+var_18]
		mov	[esp], eax
		mov	[ebp+var_D8], 10h
		call	ds:_ZN7QString4freeEPNS_4DataE
		jmp	loc_6FFCC21C
; ---------------------------------------------------------------------------
		align 10h

loc_6FFCC6D0:				; CODE XREF: sub_6FFCBEA0+2DDj
		mov	eax, [ebp+var_10]
		mov	[esp], eax
		mov	[ebp+var_D8], 14h
		call	ds:_ZN7QString4freeEPNS_4DataE
		jmp	loc_6FFCC183
; ---------------------------------------------------------------------------

loc_6FFCC6EB:				; CODE XREF: sub_6FFCBEA0+253j
		mov	dword ptr [esp+8], 2D6h
		mov	dword ptr [esp+4], offset aRIncludeQtco_2 ; "R:/include/QtCore/qstring.h"
		mov	dword ptr [esp], offset	aOtherThis_0 ; "&other != this"
		mov	[ebp+var_D8], 4
		call	ds:_Z9qt_assertPKcS0_i
		mov	ecx, [ebp+var_140]
		mov	eax, [ecx-1Ch]
		jmp	loc_6FFCC0F9
sub_6FFCBEA0	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn

sub_6FFCC720	proc near		; DATA XREF: sub_6FFCBEA0+2Co

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		add	ebp, 8
		mov	eax, [ebp-0D8h]
		mov	ecx, [ebp-0D4h]
		cmp	eax, 1
		mov	[ebp-14Ch], ecx
		jz	loc_6FFCC9E0
		cmp	eax, 2
		jz	loc_6FFCC9B5
		cmp	eax, 3
		jz	loc_6FFCC9EF
		cmp	eax, 4
		jz	loc_6FFCC985
		cmp	eax, 5
		lea	esi, [esi+0]
		jz	loc_6FFCC99B
		cmp	eax, 6
		jz	loc_6FFCC8A2
		cmp	eax, 7
		jz	loc_6FFCC8E7
		cmp	eax, 8
		nop
		lea	esi, [esi+0]
		jz	loc_6FFCC96E
		cmp	eax, 9
		jz	loc_6FFCC957
		cmp	eax, 0Ah
		jz	loc_6FFCC914
		cmp	eax, 0Bh
		nop
		lea	esi, [esi+0]
		jz	loc_6FFCC93F
		cmp	eax, 0Ch
		jz	loc_6FFCC8FC
		cmp	eax, 0Dh
		jz	loc_6FFCC8B7
		cmp	eax, 0Eh
		nop
		lea	esi, [esi+0]
		jz	loc_6FFCC8CC
		cmp	eax, 0Fh
		jz	loc_6FFCC85E
		cmp	eax, 10h
		jz	loc_6FFCC88B
		cmp	eax, 11h
		nop
		lea	esi, [esi+0]
		jz	loc_6FFCC874
		cmp	eax, 12h
		jz	short loc_6FFCC806
		cmp	eax, 13h
		xchg	ax, ax
		jz	short loc_6FFCC81B
		cmp	eax, 14h
		jz	short loc_6FFCC831
		mov	dword ptr [ebp-0D8h], 0
		call	sub_6FFEBBF0

loc_6FFCC806:				; CODE XREF: sub_6FFCC720+C9j
		lea	eax, [ebp-10h]
		mov	[esp+0], eax
		mov	dword ptr [ebp-0D8h], 0
		call	sub_6FFEA140

loc_6FFCC81B:				; CODE XREF: sub_6FFCC720+D0j
		lea	eax, [ebp-40h]
		mov	[esp+0], eax
		mov	dword ptr [ebp-0D8h], 0
		call	ds:_ZN8QVariantD1Ev

loc_6FFCC831:				; CODE XREF: sub_6FFCC720+D5j
					; sub_6FFCC720+169j ...
		lea	eax, [ebp-0Ch]
		mov	[esp+0], eax
		mov	dword ptr [ebp-0D8h], 0
		call	sub_6FFE4290
		mov	edx, [ebp-14Ch]
		mov	[esp+0], edx
		mov	dword ptr [ebp-0D8h], 0FFFFFFFFh
		call	_Unwind_SjLj_Resume
; ---------------------------------------------------------------------------

loc_6FFCC85E:				; CODE XREF: sub_6FFCC720+A9j
		lea	eax, [ebp-14h]
		mov	[esp+0], eax
		mov	dword ptr [ebp-0D8h], 0
		call	ds:_ZN12QDBusMessageD1Ev

loc_6FFCC874:				; CODE XREF: sub_6FFCC720+C0j
					; sub_6FFCC720+180j
		lea	eax, [ebp-1Ch]
		mov	[esp+0], eax
		mov	dword ptr [ebp-0D8h], 0
		call	sub_6FFEA140
		jmp	short loc_6FFCC831
; ---------------------------------------------------------------------------

loc_6FFCC88B:				; CODE XREF: sub_6FFCC720+B2j
		lea	eax, [ebp-18h]
		mov	[esp+0], eax
		mov	dword ptr [ebp-0D8h], 0
		call	sub_6FFEA140
		jmp	short loc_6FFCC874
; ---------------------------------------------------------------------------

loc_6FFCC8A2:				; CODE XREF: sub_6FFCC720+49j
		lea	eax, [ebp-20h]
		mov	[esp+0], eax
		mov	dword ptr [ebp-0D8h], 0
		call	sub_6FFE9C70

loc_6FFCC8B7:				; CODE XREF: sub_6FFCC720+92j
					; sub_6FFCC720+1F2j
		lea	eax, [ebp-28h]
		mov	[esp+0], eax
		mov	dword ptr [ebp-0D8h], 0
		call	sub_6FFDF990

loc_6FFCC8CC:				; CODE XREF: sub_6FFCC720+A0j
					; sub_6FFCC720+290j
		lea	eax, [ebp-14h]
		mov	[esp+0], eax
		mov	dword ptr [ebp-0D8h], 0
		call	ds:_ZN12QDBusMessageD1Ev
		jmp	loc_6FFCC831
; ---------------------------------------------------------------------------

loc_6FFCC8E7:				; CODE XREF: sub_6FFCC720+52j
		lea	eax, [ebp-20h]
		mov	[esp+0], eax
		mov	dword ptr [ebp-0D8h], 0
		call	sub_6FFE9C70

loc_6FFCC8FC:				; CODE XREF: sub_6FFCC720+89j
					; sub_6FFCC720+235j
		lea	eax, [ebp-70h]
		mov	[esp+0], eax
		mov	dword ptr [ebp-0D8h], 0
		call	ds:_ZN8QVariantD1Ev
		jmp	short loc_6FFCC8B7
; ---------------------------------------------------------------------------

loc_6FFCC914:				; CODE XREF: sub_6FFCC720+72j
		lea	eax, [ebp-24h]
		mov	[esp+0], eax
		mov	dword ptr [ebp-0D8h], 0
		call	sub_6FFE9C70

loc_6FFCC929:				; CODE XREF: sub_6FFCC720+24Cj
		lea	eax, [ebp-50h]
		mov	[esp+0], eax
		mov	dword ptr [ebp-0D8h], 0
		call	ds:_ZN8QVariantD1Ev

loc_6FFCC93F:				; CODE XREF: sub_6FFCC720+80j
					; sub_6FFCC720+263j
		lea	eax, [ebp-60h]
		mov	[esp+0], eax
		mov	dword ptr [ebp-0D8h], 0
		call	ds:_ZN8QVariantD1Ev
		jmp	short loc_6FFCC8FC
; ---------------------------------------------------------------------------

loc_6FFCC957:				; CODE XREF: sub_6FFCC720+69j
		lea	eax, [ebp-20h]
		mov	[esp+0], eax
		mov	dword ptr [ebp-0D8h], 0
		call	sub_6FFE9C70
		jmp	short loc_6FFCC929
; ---------------------------------------------------------------------------

loc_6FFCC96E:				; CODE XREF: sub_6FFCC720+60j
		lea	eax, [ebp-20h]
		mov	[esp+0], eax
		mov	dword ptr [ebp-0D8h], 0
		call	sub_6FFE9C70
		jmp	short loc_6FFCC93F
; ---------------------------------------------------------------------------

loc_6FFCC985:				; CODE XREF: sub_6FFCC720+33j
		lea	eax, [ebp-2Ch]
		mov	[esp+0], eax
		mov	dword ptr [ebp-0D8h], 0
		call	ds:_ZN15QDBusConnectionD1Ev

loc_6FFCC99B:				; CODE XREF: sub_6FFCC720+40j
		lea	eax, [ebp-20h]
		mov	[esp+0], eax
		mov	dword ptr [ebp-0D8h], 0
		call	sub_6FFE9C70
		jmp	loc_6FFCC8CC
; ---------------------------------------------------------------------------

loc_6FFCC9B5:				; CODE XREF: sub_6FFCC720+21j
		mov	eax, [ebp-14Ch]
		mov	[esp+0], eax
		call	sub_6FFEB920
		mov	edx, [ebp-148h]
		mov	[esp+0], edx
		mov	dword ptr [ebp-0D8h], 2
		call	sub_6FFEA140
		call	sub_6FFEC130
; ---------------------------------------------------------------------------

loc_6FFCC9E0:				; CODE XREF: sub_6FFCC720+18j
		mov	dword ptr [ebp-0D8h], 0
		call	sub_6FFEBBF0

loc_6FFCC9EF:				; CODE XREF: sub_6FFCC720+2Aj
		mov	ecx, [ebp-14Ch]
		mov	[esp+0], ecx
		call	sub_6FFEB920
		mov	eax, [ebp-140h]
		mov	[esp+arg_4], 1Ch
		mov	[esp+arg_8], eax
		lea	eax, [ebp-0A0h]
		mov	[esp+arg_0], eax
		mov	edx, [ebp-144h]
		mov	[esp+0], edx
		mov	dword ptr [ebp-0D8h], 1
		call	ds:_ZN8QMapData11node_deleteEPPNS_4NodeEiS1_
		call	sub_6FFEC130
sub_6FFCC720	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6FFCCA40	proc near		; DATA XREF: .text:6FFEC810o
		mov	eax, ds:_ZN7QObject16staticMetaObjectE
		mov	_ZN16DBusMenuImporter16staticMetaObjectE, eax
		retn
sub_6FFCCA40	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  31. _ZN16DBusMenuImporter25actionActivationRequestedEP7QAction

; =============== S U B	R O U T	I N E =======================================


		public _ZN16DBusMenuImporter25actionActivationRequestedEP7QAction
_ZN16DBusMenuImporter25actionActivationRequestedEP7QAction proc	near
					; CODE XREF: _ZN16DBusMenuImporter18qt_static_metacallEP7QObjectN11QMetaObject4CallEiPPv+1A4j

var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
arg_0		= dword	ptr  4
arg_4		= byte ptr  8

		sub	esp, 2Ch
		lea	eax, [esp+2Ch+arg_4]
		mov	[esp+2Ch+var_10], eax
		lea	eax, [esp+2Ch+var_14]
		mov	[esp+2Ch+var_20], eax
		mov	eax, [esp+2Ch+arg_0]
		mov	[esp+2Ch+var_14], 0
		mov	[esp+2Ch+var_24], 2
		mov	[esp+2Ch+var_28], offset _ZN16DBusMenuImporter16staticMetaObjectE
		mov	[esp+2Ch+var_2C], eax
		call	ds:_ZN11QMetaObject8activateEP7QObjectPKS_iPPv
		add	esp, 2Ch
		retn
_ZN16DBusMenuImporter25actionActivationRequestedEP7QAction endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  26. _ZN16DBusMenuImporter18menuReadyToBeShownEv

; =============== S U B	R O U T	I N E =======================================


		public _ZN16DBusMenuImporter18menuReadyToBeShownEv
_ZN16DBusMenuImporter18menuReadyToBeShownEv proc near
					; CODE XREF: _ZN16DBusMenuImporter18qt_static_metacallEP7QObjectN11QMetaObject4CallEiPPv+1C3j

var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
arg_0		= dword	ptr  4

		sub	esp, 1Ch
		mov	eax, [esp+1Ch+arg_0]
		mov	[esp+1Ch+var_10], 0
		mov	[esp+1Ch+var_14], 1
		mov	[esp+1Ch+var_18], offset _ZN16DBusMenuImporter16staticMetaObjectE
		mov	[esp+1Ch+var_1C], eax
		call	ds:_ZN11QMetaObject8activateEP7QObjectPKS_iPPv
		add	esp, 1Ch
		retn
_ZN16DBusMenuImporter18menuReadyToBeShownEv endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  20. _ZN16DBusMenuImporter11menuUpdatedEv

; =============== S U B	R O U T	I N E =======================================


		public _ZN16DBusMenuImporter11menuUpdatedEv
_ZN16DBusMenuImporter11menuUpdatedEv proc near
					; CODE XREF: _ZN16DBusMenuImporter19slotMenuAboutToShowEv+945p
					; _ZN16DBusMenuImporter18qt_static_metacallEP7QObjectN11QMetaObject4CallEiPPv+1DBj

var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
arg_0		= dword	ptr  4

		sub	esp, 1Ch
		mov	eax, [esp+1Ch+arg_0]
		mov	[esp+1Ch+var_10], 0
		mov	[esp+1Ch+var_14], 0
		mov	[esp+1Ch+var_18], offset _ZN16DBusMenuImporter16staticMetaObjectE
		mov	[esp+1Ch+var_1C], eax
		call	ds:_ZN11QMetaObject8activateEP7QObjectPKS_iPPv
		add	esp, 1Ch
		retn
_ZN16DBusMenuImporter11menuUpdatedEv endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  22. _ZN16DBusMenuImporter11qt_metacastEPKc

; =============== S U B	R O U T	I N E =======================================


		public _ZN16DBusMenuImporter11qt_metacastEPKc
_ZN16DBusMenuImporter11qt_metacastEPKc proc near ; DATA	XREF: .rdata:6FFF9DACo

var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		sub	esp, 1Ch
		xor	eax, eax
		mov	edx, [esp+1Ch+arg_4]
		mov	[esp+1Ch+var_4], ebp
		mov	ebp, [esp+1Ch+arg_0]
		mov	[esp+1Ch+var_10], ebx
		mov	[esp+1Ch+var_C], esi
		test	edx, edx
		mov	[esp+1Ch+var_8], edi
		jz	short loc_6FFCCB2F
		mov	ecx, 11h
		mov	esi, edx
		mov	edi, offset aDbusmenuimport ; "DBusMenuImporter"
		repe cmpsb
		setnbe	al
		setb	cl
		mov	esi, eax
		mov	eax, ebp
		mov	ebx, esi
		cmp	bl, cl
		jnz	short loc_6FFCCB43

loc_6FFCCB2F:				; CODE XREF: _ZN16DBusMenuImporter11qt_metacastEPKc+1Fj
		mov	ebx, [esp+1Ch+var_10]
		mov	esi, [esp+1Ch+var_C]
		mov	edi, [esp+1Ch+var_8]
		mov	ebp, [esp+1Ch+var_4]
		add	esp, 1Ch
		retn
; ---------------------------------------------------------------------------

loc_6FFCCB43:				; CODE XREF: _ZN16DBusMenuImporter11qt_metacastEPKc+3Dj
		mov	eax, ds:__imp__ZN7QObject11qt_metacastEPKc
		mov	ebx, [esp+1Ch+var_10]
		mov	esi, [esp+1Ch+var_C]
		mov	edi, [esp+1Ch+var_8]
		mov	ebp, [esp+1Ch+var_4]
		add	esp, 1Ch
		jmp	eax
_ZN16DBusMenuImporter11qt_metacastEPKc endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  44. _ZNK16DBusMenuImporter10metaObjectEv

; =============== S U B	R O U T	I N E =======================================


		public _ZNK16DBusMenuImporter10metaObjectEv
_ZNK16DBusMenuImporter10metaObjectEv proc near ; DATA XREF: .rdata:off_6FFF9DA8o

var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
arg_0		= dword	ptr  4

		push	ebx
		sub	esp, 18h
		mov	ebx, [esp+1Ch+arg_0]
		mov	eax, [ebx+4]
		test	eax, eax
		jz	short loc_6FFCCB90

loc_6FFCCB6F:				; CODE XREF: _ZNK16DBusMenuImporter10metaObjectEv+50j
		mov	eax, [eax+18h]
		test	eax, eax
		jz	short loc_6FFCCB80
		add	esp, 18h
		pop	ebx
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6FFCCB80:				; CODE XREF: _ZNK16DBusMenuImporter10metaObjectEv+14j
		mov	eax, offset _ZN16DBusMenuImporter16staticMetaObjectE
		add	esp, 18h
		pop	ebx
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6FFCCB90:				; CODE XREF: _ZNK16DBusMenuImporter10metaObjectEv+Dj
		mov	[esp+1Ch+var_14], 70h
		mov	[esp+1Ch+var_18], offset aRIncludeQtco_4 ; "R:/include/QtCore/qscopedpointer.h"
		mov	[esp+1Ch+var_1C], offset aD_0 ;	"d"
		call	ds:_Z9qt_assertPKcS0_i
		mov	eax, [ebx+4]
		jmp	short loc_6FFCCB6F
_ZNK16DBusMenuImporter10metaObjectEv endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  19. _ZN16DBusMenuImporter11iconForNameERK7QString

; =============== S U B	R O U T	I N E =======================================


		public _ZN16DBusMenuImporter11iconForNameERK7QString
_ZN16DBusMenuImporter11iconForNameERK7QString proc near	; DATA XREF: .rdata:6FFF9DDCo

var_1C		= dword	ptr -1Ch
arg_0		= dword	ptr  4

		push	ebx
		sub	esp, 18h
		mov	ebx, [esp+1Ch+arg_0]
		mov	[esp+1Ch+var_1C], ebx
		call	ds:_ZN5QIconC1Ev
		mov	eax, ebx
		add	esp, 18h
		pop	ebx
		retn	4
_ZN16DBusMenuImporter11iconForNameERK7QString endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  17. _ZN16DBusMenuImporter10createMenuEP7QWidget

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public _ZN16DBusMenuImporter10createMenuEP7QWidget
_ZN16DBusMenuImporter10createMenuEP7QWidget proc near ;	DATA XREF: .rdata:6FFF9DD8o

var_40		= dword	ptr -40h
var_3C		= byte ptr -3Ch
var_38		= dword	ptr -38h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_8		= byte ptr -8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 58h
		lea	eax, [ebp+var_8]
		mov	[ebp+var_1C], eax
		lea	eax, [ebp+var_3C]
		mov	[esp], eax
		mov	[ebp+var_24], offset sub_6FFEC1F0
		mov	[ebp+var_20], offset dword_6FFECD4C
		mov	[ebp+var_18], offset sub_6FFCCC4F
		mov	[ebp+var_14], esp
		call	_Unwind_SjLj_Register
		mov	dword ptr [esp], 14h ; size_t
		mov	[ebp+var_38], 0FFFFFFFFh
		call	sub_6FFEAE70
		mov	[ebp+var_38], 1
		mov	[ebp+var_40], eax
		mov	eax, [ebp+arg_4]
		mov	[esp+4], eax
		mov	eax, [ebp+var_40]
		mov	[esp], eax
		call	ds:_ZN5QMenuC1EP7QWidget
		lea	eax, [ebp+var_3C]
		mov	[esp], eax
		call	_Unwind_SjLj_Unregister
		mov	eax, [ebp+var_40]
		leave
		retn
_ZN16DBusMenuImporter10createMenuEP7QWidget endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn

sub_6FFCCC4F	proc near		; DATA XREF: _ZN16DBusMenuImporter10createMenuEP7QWidget+20o
		add	ebp, 8
		mov	eax, [ebp-34h]
		mov	[ebp-44h], eax
		mov	eax, [ebp-40h]
		mov	[esp+0], eax
		call	sub_6FFEAE50
		mov	eax, [ebp-44h]
		mov	dword ptr [ebp-38h], 0FFFFFFFFh
		mov	[esp+0], eax
		call	_Unwind_SjLj_Resume
sub_6FFCCC4F	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_6FFCCC80	proc near		; CODE XREF: _ZN16DBusMenuImporter31slotAboutToShowDBusCallFinishedEP23QDBusPendingCallWatcher+69Fp
					; _ZN16DBusMenuImporter19slotMenuAboutToShowEv+466p

var_55		= byte ptr -55h
var_54		= dword	ptr -54h
var_50		= dword	ptr -50h
var_4C		= byte ptr -4Ch
var_48		= dword	ptr -48h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= byte ptr -8

		push	ebp
		mov	ebp, esp
		sub	esp, 78h
		mov	[ebp+var_54], eax
		lea	eax, [ebp+var_8]
		mov	[ebp+var_2C], eax
		lea	eax, [ebp+var_4C]
		mov	[ebp+var_50], edx
		mov	[esp], eax
		mov	[ebp+var_34], offset sub_6FFEC1F0
		mov	[ebp+var_30], offset word_6FFECD66
		mov	[ebp+var_28], offset sub_6FFCCD83
		mov	[ebp+var_24], esp
		call	_Unwind_SjLj_Register
		lea	eax, [ebp+var_C]
		mov	[esp], eax
		mov	[ebp+var_C], 0FFFFFFFFh
		mov	[ebp+var_48], 0FFFFFFFFh
		call	ds:_ZN5QTime5startEv
		mov	eax, [ebp+var_54]
		mov	[ebp+var_10], eax
		lea	eax, [ebp+var_10]
		mov	[esp], eax
		call	ds:_ZN11QMetaObject8addGuardEPP7QObject

loc_6FFCCCE1:				; CODE XREF: sub_6FFCCC80+ECj
		mov	eax, [ebp+var_10]
		test	eax, eax
		jz	short loc_6FFCCD20
		add	eax, 8
		mov	[esp], eax
		mov	[ebp+var_48], 1
		call	ds:_ZNK16QDBusPendingCall10isFinishedEv
		test	al, al
		jz	short loc_6FFCCD48

loc_6FFCCCFF:				; CODE XREF: sub_6FFCCC80+D7j
		mov	eax, [ebp+var_10]
		test	eax, eax
		jz	short loc_6FFCCD20
		add	eax, 8
		mov	[esp], eax
		mov	[ebp+var_48], 1
		call	ds:_ZNK16QDBusPendingCall10isFinishedEv
		test	al, al
		jnz	short loc_6FFCCD71
		lea	esi, [esi+0]

loc_6FFCCD20:				; CODE XREF: sub_6FFCCC80+66j
					; sub_6FFCCC80+84j
		mov	[ebp+var_55], 0

loc_6FFCCD24:				; CODE XREF: sub_6FFCCC80+101j
		lea	eax, [ebp+var_10]
		mov	[esp], eax
		mov	[ebp+var_48], 0FFFFFFFFh
		call	ds:_ZN11QMetaObject11removeGuardEPP7QObject
		lea	eax, [ebp+var_4C]
		mov	[esp], eax
		call	_Unwind_SjLj_Unregister
		movzx	eax, [ebp+var_55]
		leave
		retn
; ---------------------------------------------------------------------------

loc_6FFCCD48:				; CODE XREF: sub_6FFCCC80+7Dj
		lea	eax, [ebp+var_C]
		mov	[esp], eax
		call	ds:_ZNK5QTime7elapsedEv
		cmp	eax, [ebp+var_50]
		jge	short loc_6FFCCCFF
		lea	eax, [ebp+var_14]
		mov	[ebp+var_14], 1
		mov	[esp], eax
		call	ds:_ZN16QCoreApplication13processEventsE6QFlagsIN10QEventLoop17ProcessEventsFlagEE
		jmp	loc_6FFCCCE1
; ---------------------------------------------------------------------------

loc_6FFCCD71:				; CODE XREF: sub_6FFCCC80+9Bj
		mov	eax, [ebp+var_10]
		mov	[esp], eax
		call	ds:_ZN23QDBusPendingCallWatcher15waitForFinishedEv
		mov	[ebp+var_55], 1
		jmp	short loc_6FFCCD24
sub_6FFCCC80	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn

sub_6FFCCD83	proc near		; DATA XREF: sub_6FFCCC80+26o
		add	ebp, 8
		mov	eax, [ebp-44h]
		mov	dword ptr [ebp-48h], 0
		mov	[ebp-5Ch], eax
		lea	eax, [ebp-10h]
		mov	[esp+0], eax
		call	ds:_ZN11QMetaObject11removeGuardEPP7QObject
		mov	eax, [ebp-5Ch]
		mov	dword ptr [ebp-48h], 0FFFFFFFFh
		mov	[esp+0], eax
		call	_Unwind_SjLj_Resume
sub_6FFCCD83	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  40. _ZN16DBusMenuImporterD2Ev

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public _ZN16DBusMenuImporterD2Ev
_ZN16DBusMenuImporterD2Ev proc near

var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_3C		= byte ptr -3Ch
var_38		= dword	ptr -38h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_8		= byte ptr -8
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 68h
		lea	eax, [ebp+var_8]
		mov	[ebp+var_1C], eax
		lea	eax, [ebp+var_3C]
		mov	[esp], eax
		mov	[ebp+var_24], offset sub_6FFEC1F0
		mov	[ebp+var_20], offset dword_6FFECD88
		mov	[ebp+var_18], offset sub_6FFCCF46
		mov	[ebp+var_14], esp
		call	_Unwind_SjLj_Register
		mov	edx, [ebp+arg_0]
		mov	eax, [edx+8]
		mov	dword ptr [edx], offset	off_6FFF9DA8
		mov	eax, [eax+8]
		mov	[ebp+var_38], 4
		mov	[esp], eax
		call	ds:_ZN7QObject11deleteLaterEv
		mov	eax, [ebp+arg_0]
		mov	eax, [eax+8]
		test	eax, eax
		mov	[ebp+var_48], eax
		jz	short loc_6FFCCE7B
		mov	eax, [eax+20h]
		lock dec dword ptr [eax+8]
		setnz	dl
		test	dl, dl
		jz	loc_6FFCCF23

loc_6FFCCE2D:				; CODE XREF: _ZN16DBusMenuImporterD2Ev+181j
		mov	edx, [ebp+var_48]
		mov	eax, [edx+1Ch]
		lock dec dword ptr [eax+8]
		setnz	dl
		test	dl, dl
		jz	loc_6FFCCF00

loc_6FFCCE42:				; CODE XREF: _ZN16DBusMenuImporterD2Ev+15Ej
		mov	eax, [ebp+var_48]
		mov	[ebp+var_38], 3
		add	eax, 10h
		mov	[esp], eax
		call	ds:_ZN13QSignalMapperD1Ev
		mov	edx, [ebp+var_48]
		mov	eax, [edx+0Ch]
		test	eax, eax
		jz	short loc_6FFCCE6D
		lock dec dword ptr [eax+34h]
		setnz	dl
		test	dl, dl
		jz	short loc_6FFCCEA0

loc_6FFCCE6D:				; CODE XREF: _ZN16DBusMenuImporterD2Ev+A0j
					; _ZN16DBusMenuImporterD2Ev+139j
		mov	edx, [ebp+arg_0]
		mov	eax, [edx+8]
		mov	[esp], eax
		call	sub_6FFEAE50

loc_6FFCCE7B:				; CODE XREF: _ZN16DBusMenuImporterD2Ev+59j
		mov	eax, [ebp+arg_0]
		mov	[ebp+var_38], 0FFFFFFFFh
		mov	[esp], eax
		call	ds:_ZN7QObjectD2Ev
		lea	eax, [ebp+var_3C]
		mov	[esp], eax
		call	_Unwind_SjLj_Unregister
		leave
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6FFCCEA0:				; CODE XREF: _ZN16DBusMenuImporterD2Ev+ABj
		mov	eax, [ebp+var_48]
		mov	eax, [eax+0Ch]
		mov	edx, eax
		mov	[ebp+var_4C], eax
		mov	eax, [eax+4]
		cmp	edx, eax
		jz	short loc_6FFCCEDE
		mov	edx, ds:_ZN11QMetaObject11removeGuardEPP7QObject
		mov	[ebp+var_40], edx
		nop
		lea	esi, [esi+0]

loc_6FFCCEC0:				; CODE XREF: _ZN16DBusMenuImporterD2Ev+11Cj
		mov	edx, [eax+4]
		sub	eax, 4
		mov	[esp], eax
		mov	[ebp+var_38], 4
		mov	[ebp+var_44], edx
		call	[ebp+var_40]
		mov	eax, [ebp+var_44]
		cmp	[ebp+var_4C], eax
		jnz	short loc_6FFCCEC0

loc_6FFCCEDE:				; CODE XREF: _ZN16DBusMenuImporterD2Ev+F0j
		mov	edx, [ebp+var_4C]
		mov	dword ptr [esp+4], 8
		mov	[ebp+var_38], 4
		mov	[esp], edx
		call	ds:_ZN8QMapData16continueFreeDataEi
		jmp	loc_6FFCCE6D
; ---------------------------------------------------------------------------
		align 10h

loc_6FFCCF00:				; CODE XREF: _ZN16DBusMenuImporterD2Ev+7Cj
		mov	edx, [ebp+var_48]
		mov	dword ptr [esp+4], offset nullsub_1
		mov	eax, [edx+1Ch]
		mov	[ebp+var_38], 2
		mov	[esp], eax
		call	ds:_ZN9QHashData11free_helperEPFvPNS_4NodeEE
		jmp	loc_6FFCCE42
; ---------------------------------------------------------------------------

loc_6FFCCF23:				; CODE XREF: _ZN16DBusMenuImporterD2Ev+67j
		mov	edx, [ebp+var_48]
		mov	dword ptr [esp+4], offset nullsub_1
		mov	eax, [edx+20h]
		mov	[ebp+var_38], 1
		mov	[esp], eax
		call	ds:_ZN9QHashData11free_helperEPFvPNS_4NodeEE
		jmp	loc_6FFCCE2D
_ZN16DBusMenuImporterD2Ev endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn

sub_6FFCCF46	proc near		; DATA XREF: _ZN16DBusMenuImporterD2Ev+20o

arg_0		= dword	ptr  4

		add	ebp, 8
		mov	eax, [ebp-38h]
		mov	edx, [ebp-34h]
		cmp	eax, 1
		mov	[ebp-54h], edx
		jz	short loc_6FFCCF76
		cmp	eax, 2
		jz	short loc_6FFCCF8C
		cmp	eax, 3
		jz	short loc_6FFCCFCB
		mov	eax, [ebp-48h]
		mov	dword ptr [ebp-38h], 0
		add	eax, 1Ch
		mov	[esp+0], eax
		call	sub_6FFE4A20

loc_6FFCCF76:				; CODE XREF: sub_6FFCCF46+Fj
		mov	eax, [ebp-48h]
		mov	dword ptr [ebp-38h], 0
		add	eax, 10h
		mov	[esp+0], eax
		call	ds:_ZN13QSignalMapperD1Ev

loc_6FFCCF8C:				; CODE XREF: sub_6FFCCF46+14j
		mov	eax, [ebp-54h]
		mov	edx, [ebp-48h]
		mov	[ebp-50h], eax
		mov	eax, [edx+0Ch]
		test	eax, eax
		jz	short loc_6FFCCFC5
		lock dec dword ptr [eax+34h]
		setnz	dl
		test	dl, dl
		jnz	short loc_6FFCCFC5
		mov	edx, [ebp-48h]
		mov	eax, [edx+0Ch]
		mov	dword ptr [ebp-38h], 0
		mov	[esp+arg_0], eax
		mov	eax, edx
		add	eax, 0Ch
		mov	[esp+0], eax
		call	sub_6FFE4850

loc_6FFCCFC5:				; CODE XREF: sub_6FFCCF46+54j
					; sub_6FFCCF46+5Fj
		mov	eax, [ebp-50h]
		mov	[ebp-54h], eax

loc_6FFCCFCB:				; CODE XREF: sub_6FFCCF46+19j
		mov	eax, [ebp+8]
		mov	dword ptr [ebp-38h], 0
		mov	[esp+0], eax
		call	ds:_ZN7QObjectD2Ev
		mov	edx, [ebp-54h]
		mov	dword ptr [ebp-38h], 0FFFFFFFFh
		mov	[esp+0], edx
		call	_Unwind_SjLj_Resume
sub_6FFCCF46	endp

; Exported entry  28. _ZN16DBusMenuImporter19slotMenuAboutToHideEv

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public _ZN16DBusMenuImporter19slotMenuAboutToHideEv
_ZN16DBusMenuImporter19slotMenuAboutToHideEv proc near
					; CODE XREF: _ZN16DBusMenuImporter18qt_static_metacallEP7QObjectN11QMetaObject4CallEiPPv+126j

var_68		= dword	ptr -68h
var_64		= dword	ptr -64h
var_60		= dword	ptr -60h
var_5C		= byte ptr -5Ch
var_58		= dword	ptr -58h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_20		= byte ptr -20h
var_C		= dword	ptr -0Ch
var_8		= byte ptr -8
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 88h
		lea	eax, [ebp+var_8]
		mov	[ebp+var_3C], eax
		lea	eax, [ebp+var_5C]
		mov	[esp], eax
		mov	[ebp+var_44], offset sub_6FFEC1F0
		mov	[ebp+var_40], offset dword_6FFECDD4
		mov	[ebp+var_38], offset sub_6FFCD177
		mov	[ebp+var_34], esp
		call	_Unwind_SjLj_Register
		mov	edx, [ebp+arg_0]
		mov	[ebp+var_58], 0FFFFFFFFh
		mov	[esp], edx
		call	ds:_ZNK7QObject6senderEv
		mov	[esp+4], eax
		mov	eax, ds:_ZN5QMenu16staticMetaObjectE
		mov	[esp], eax
		call	ds:_ZNK11QMetaObject4castEP7QObject
		test	eax, eax
		mov	[ebp+var_64], eax
		jz	loc_6FFCD152

loc_6FFCD052:				; CODE XREF: _ZN16DBusMenuImporter19slotMenuAboutToHideEv+182j
		mov	[esp], eax
		mov	[ebp+var_58], 0FFFFFFFFh
		call	ds:_ZNK5QMenu10menuActionEv
		test	eax, eax
		mov	[ebp+var_60], eax
		jz	loc_6FFCD130

loc_6FFCD06D:				; CODE XREF: _ZN16DBusMenuImporter19slotMenuAboutToHideEv+15Dj
		mov	eax, ds:off_6FFF507C
		mov	edx, [ebp+var_60]
		mov	[ebp+var_58], 0FFFFFFFFh
		mov	[esp+8], eax
		lea	eax, [ebp+var_20]
		mov	[esp+4], edx
		mov	[esp], eax
		call	ds:_ZNK7QObject8propertyEPKc
		lea	edx, [ebp+var_20]
		mov	[ebp+var_58], 2
		sub	esp, 4
		mov	dword ptr [esp+4], 0
		mov	[esp], edx
		call	ds:_ZNK8QVariant5toIntEPb
		mov	[ebp+var_68], eax
		lea	eax, [ebp+var_20]
		mov	[esp], eax
		mov	[ebp+var_58], 0FFFFFFFFh
		call	ds:_ZN8QVariantD1Ev
		mov	dword ptr [esp+4], 0FFFFFFFFh
		mov	dword ptr [esp], offset	aClosed	; "closed"
		call	ds:_ZN7QString16fromAscii_helperEPKci
		mov	edx, [ebp+arg_0]
		mov	[ebp+var_C], eax
		lea	eax, [ebp+var_C]
		mov	[esp+8], eax
		mov	eax, [ebp+var_68]
		mov	[esp+4], eax
		mov	eax, [edx+8]
		mov	[ebp+var_58], 1
		mov	[esp], eax
		call	sub_6FFE33C0
		mov	eax, [ebp+var_C]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jnz	short loc_6FFCD11F
		mov	eax, [ebp+var_C]
		mov	[ebp+var_58], 0FFFFFFFFh
		mov	[esp], eax
		call	ds:_ZN7QString4freeEPNS_4DataE

loc_6FFCD11F:				; CODE XREF: _ZN16DBusMenuImporter19slotMenuAboutToHideEv+11Aj
		lea	eax, [ebp+var_5C]
		mov	[esp], eax
		call	_Unwind_SjLj_Unregister
		leave
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6FFCD130:				; CODE XREF: _ZN16DBusMenuImporter19slotMenuAboutToHideEv+77j
		mov	dword ptr [esp+8], 21Fh
		mov	dword ptr [esp+4], offset aRBuildKdesup_1 ; "r:\\build\\kdesupport\\dbusmenu-qt-0.9."...
		mov	dword ptr [esp], offset	aAction	; "action"
		call	ds:_Z9qt_assertPKcS0_i
		jmp	loc_6FFCD06D
; ---------------------------------------------------------------------------

loc_6FFCD152:				; CODE XREF: _ZN16DBusMenuImporter19slotMenuAboutToHideEv+5Cj
		mov	dword ptr [esp+8], 21Ch
		mov	dword ptr [esp+4], offset aRBuildKdesup_1 ; "r:\\build\\kdesupport\\dbusmenu-qt-0.9."...
		mov	dword ptr [esp], offset	aMenu ;	"menu"
		call	ds:_Z9qt_assertPKcS0_i
		mov	eax, [ebp+var_64]
		jmp	loc_6FFCD052
_ZN16DBusMenuImporter19slotMenuAboutToHideEv endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn

sub_6FFCD177	proc near		; DATA XREF: _ZN16DBusMenuImporter19slotMenuAboutToHideEv+23o
		add	ebp, 8
		mov	edx, [ebp-54h]
		cmp	dword ptr [ebp-58h], 1
		mov	[ebp-6Ch], edx
		jz	short loc_6FFCD1AA
		lea	eax, [ebp-0Ch]
		mov	[esp+0], eax
		mov	dword ptr [ebp-58h], 0
		call	sub_6FFEA140
		mov	eax, [ebp-6Ch]
		mov	dword ptr [ebp-58h], 0FFFFFFFFh
		mov	[esp+0], eax
		call	_Unwind_SjLj_Resume
; ---------------------------------------------------------------------------

loc_6FFCD1AA:				; CODE XREF: sub_6FFCD177+Dj
		lea	eax, [ebp-20h]
		mov	[esp+0], eax
		mov	dword ptr [ebp-58h], 0
		call	ds:_ZN8QVariantD1Ev
		mov	eax, [ebp-6Ch]
		mov	dword ptr [ebp-58h], 0FFFFFFFFh
		mov	[esp+0], eax
		call	_Unwind_SjLj_Resume
sub_6FFCD177	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  23. _ZN16DBusMenuImporter16sendClickedEventEi

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public _ZN16DBusMenuImporter16sendClickedEventEi
_ZN16DBusMenuImporter16sendClickedEventEi proc near
					; CODE XREF: _ZN16DBusMenuImporter18qt_static_metacallEP7QObjectN11QMetaObject4CallEiPPv+164j

var_4C		= byte ptr -4Ch
var_48		= dword	ptr -48h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_C		= dword	ptr -0Ch
var_8		= byte ptr -8
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 68h
		lea	eax, [ebp+var_8]
		mov	[ebp+var_2C], eax
		lea	eax, [ebp+var_4C]
		mov	[esp], eax
		mov	[ebp+var_34], offset sub_6FFEC1F0
		mov	[ebp+var_30], offset word_6FFECDE2
		mov	[ebp+var_28], offset sub_6FFCD26E
		mov	[ebp+var_24], esp
		call	_Unwind_SjLj_Register
		mov	dword ptr [esp+4], 0FFFFFFFFh
		mov	dword ptr [esp], offset	aClicked_0 ; "clicked"
		mov	[ebp+var_48], 0FFFFFFFFh
		call	ds:_ZN7QString16fromAscii_helperEPKci
		mov	[ebp+var_C], eax
		lea	eax, [ebp+var_C]
		mov	[esp+8], eax
		mov	eax, [ebp+arg_4]
		mov	[esp+4], eax
		mov	eax, [ebp+arg_0]
		mov	eax, [eax+8]
		mov	[ebp+var_48], 1
		mov	[esp], eax
		call	sub_6FFE33C0
		mov	eax, [ebp+var_C]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jnz	short loc_6FFCD261
		mov	eax, [ebp+var_C]
		mov	[ebp+var_48], 0FFFFFFFFh
		mov	[esp], eax
		call	ds:_ZN7QString4freeEPNS_4DataE

loc_6FFCD261:				; CODE XREF: _ZN16DBusMenuImporter16sendClickedEventEi+7Cj
		lea	eax, [ebp+var_4C]
		mov	[esp], eax
		call	_Unwind_SjLj_Unregister
		leave
		retn
_ZN16DBusMenuImporter16sendClickedEventEi endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn

sub_6FFCD26E	proc near		; DATA XREF: _ZN16DBusMenuImporter16sendClickedEventEi+20o
		add	ebp, 8
		mov	eax, [ebp-44h]
		mov	dword ptr [ebp-48h], 0
		mov	[ebp-50h], eax
		lea	eax, [ebp-0Ch]
		mov	[esp+0], eax
		call	sub_6FFEA140
		mov	eax, [ebp-50h]
		mov	dword ptr [ebp-48h], 0FFFFFFFFh
		mov	[esp+0], eax
		call	_Unwind_SjLj_Resume
sub_6FFCD26E	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  36. _ZN16DBusMenuImporterC1ERK7QStringS2_P7QObject

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public _ZN16DBusMenuImporterC1ERK7QStringS2_P7QObject
_ZN16DBusMenuImporterC1ERK7QStringS2_P7QObject proc near

var_A4		= dword	ptr -0A4h
var_A0		= dword	ptr -0A0h
var_9C		= dword	ptr -9Ch
var_98		= dword	ptr -98h
var_94		= dword	ptr -94h
var_90		= dword	ptr -90h
var_8C		= dword	ptr -8Ch
var_88		= dword	ptr -88h
var_84		= dword	ptr -84h
var_80		= dword	ptr -80h
var_7C		= byte ptr -7Ch
var_78		= dword	ptr -78h
var_64		= dword	ptr -64h
var_60		= dword	ptr -60h
var_5C		= dword	ptr -5Ch
var_58		= dword	ptr -58h
var_54		= dword	ptr -54h
var_40		= byte ptr -40h
var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= byte ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= byte ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= byte ptr -10h
var_C		= dword	ptr -0Ch
var_8		= byte ptr -8
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h

		push	ebp
		mov	ebp, esp
		sub	esp, 0D8h
		lea	eax, [ebp+var_8]
		mov	[ebp+var_5C], eax
		lea	eax, [ebp+var_7C]
		mov	[esp], eax
		mov	[ebp+var_64], offset sub_6FFEC1F0
		mov	[ebp+var_60], offset word_6FFECE3A
		mov	[ebp+var_58], offset sub_6FFCD988
		mov	[ebp+var_54], esp
		call	_Unwind_SjLj_Register
		mov	eax, [ebp+arg_C]
		mov	edx, [ebp+arg_0]
		mov	[ebp+var_78], 0FFFFFFFFh
		mov	[esp+4], eax
		mov	[esp], edx
		call	ds:_ZN7QObjectC2EPS_
		mov	eax, [ebp+arg_0]
		mov	dword ptr [eax], offset	off_6FFF9DA8
		mov	dword ptr [esp], 28h ; size_t
		mov	[ebp+var_78], 12h
		call	sub_6FFEAE70
		mov	[ebp+var_80], eax
		mov	edx, [ebp+var_80]
		mov	[ebp+var_A4], eax
		mov	eax, ds:_ZN8QMapData11shared_nullE
		mov	[edx+0Ch], eax
		lock inc dword ptr [eax+34h]
		setnz	dl
		mov	eax, [ebp+var_80]
		mov	dword ptr [esp+4], 0
		mov	[ebp+var_78], 1
		add	eax, 10h
		mov	[esp], eax
		call	ds:_ZN13QSignalMapperC1EP7QObject
		mov	edx, [ebp+var_80]
		mov	eax, ds:_ZN9QHashData11shared_nullE
		mov	[edx+1Ch], eax
		lock inc dword ptr [eax+8]
		setnz	dl
		mov	edx, [ebp+var_80]
		mov	[edx+20h], eax
		lock inc dword ptr [eax+8]
		setnz	dl
		mov	edx, [ebp+var_80]
		mov	eax, [ebp+arg_0]
		mov	[eax+8], edx
		mov	[ebp+var_78], 12h
		call	sub_6FFD2F30
		mov	eax, [ebp+arg_0]
		mov	edx, [ebp+arg_0]
		mov	eax, [eax+8]
		mov	[eax], edx
		mov	[ebp+var_8C], eax
		mov	eax, ds:off_6FFF52D8
		mov	dword ptr [esp+4], 0FFFFFFFFh
		mov	[ebp+var_78], 12h
		mov	[esp], eax
		call	ds:_ZN7QString16fromAscii_helperEPKci
		mov	[ebp+var_C], eax
		lea	eax, [ebp+var_10]
		mov	[esp], eax
		mov	[ebp+var_78], 11h
		call	ds:_ZN15QDBusConnection10sessionBusEv
		sub	esp, 4
		mov	dword ptr [esp], 8 ; size_t
		mov	[ebp+var_78], 10h
		call	sub_6FFEAE70
		mov	[ebp+var_88], eax
		lea	eax, [ebp+var_10]
		mov	edx, [ebp+arg_0]
		mov	[esp+10h], eax
		lea	eax, [ebp+var_C]
		mov	[esp+0Ch], eax
		mov	eax, [ebp+arg_8]
		mov	[ebp+var_78], 0Fh
		mov	[esp+14h], edx
		mov	edx, [ebp+arg_4]
		mov	[esp+8], eax
		mov	eax, [ebp+var_88]
		mov	[esp+4], edx
		mov	[esp], eax
		call	ds:_ZN14QDBusInterfaceC1ERK7QStringS2_S2_RK15QDBusConnectionP7QObject
		mov	eax, [ebp+var_8C]
		mov	edx, [ebp+var_88]
		mov	[eax+4], edx
		lea	eax, [ebp+var_10]
		mov	[esp], eax
		mov	[ebp+var_78], 11h
		call	ds:_ZN15QDBusConnectionD1Ev
		mov	eax, [ebp+var_C]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jz	loc_6FFCD892

loc_6FFCD441:				; CODE XREF: _ZN16DBusMenuImporterC1ERK7QStringS2_P7QObject+605j
		mov	edx, [ebp+arg_0]
		mov	eax, [edx+8]
		mov	dword ptr [eax+8], 0
		mov	byte ptr [eax+24h], 0
		mov	dword ptr [esp], offset	a1sendclickedev	; "1sendClickedEvent(int)"
		mov	[ebp+var_78], 12h
		call	ds:_Z13qFlagLocationPKc
		mov	[ebp+var_A0], eax
		mov	dword ptr [esp], offset	a2mappedInt ; "2mapped(int)"
		call	ds:_Z13qFlagLocationPKc
		mov	edx, [ebp+var_A0]
		mov	dword ptr [esp+10h], 0
		mov	[esp+4], eax
		mov	[esp+0Ch], edx
		mov	edx, [ebp+arg_0]
		mov	[esp+8], edx
		mov	eax, [edx+8]
		add	eax, 10h
		mov	[esp], eax
		call	ds:_ZN7QObject7connectEPKS_PKcS1_S3_N2Qt14ConnectionTypeE
		mov	dword ptr [esp], 18h ; size_t
		call	sub_6FFEAE70
		mov	[ebp+var_84], eax
		mov	eax, [ebp+arg_0]
		mov	edx, [ebp+var_84]
		mov	[ebp+var_78], 0Eh
		mov	[esp+4], eax
		mov	[esp], edx
		call	ds:_ZN6QTimerC1EP7QObject
		mov	edx, [ebp+arg_0]
		mov	eax, [edx+8]
		mov	edx, [ebp+var_84]
		mov	[eax+18h], edx
		or	byte ptr [edx+14h], 1
		mov	dword ptr [esp], offset	a1processpendin	; "1processPendingLayoutUpdates()"
		mov	[ebp+var_78], 12h
		call	ds:_Z13qFlagLocationPKc
		mov	[ebp+var_9C], eax
		mov	dword ptr [esp], offset	a2timeout_1 ; "2timeout()"
		call	ds:_Z13qFlagLocationPKc
		mov	edx, [ebp+var_9C]
		mov	dword ptr [esp+10h], 0
		mov	[esp+4], eax
		mov	[esp+0Ch], edx
		mov	edx, [ebp+arg_0]
		mov	[esp+8], edx
		mov	eax, [edx+8]
		mov	eax, [eax+18h]
		mov	[esp], eax
		call	ds:_ZN7QObject7connectEPKS_PKcS1_S3_N2Qt14ConnectionTypeE
		mov	dword ptr [esp], offset	a1slotlayoutupd	; "1slotLayoutUpdated(uint, int)"
		call	ds:_Z13qFlagLocationPKc
		mov	[ebp+var_98], eax
		mov	dword ptr [esp+4], 0FFFFFFFFh
		mov	dword ptr [esp], offset	aUi ; "ui"
		call	ds:_ZN7QString16fromAscii_helperEPKci
		mov	[ebp+var_14], eax
		mov	dword ptr [esp+4], 0FFFFFFFFh
		mov	dword ptr [esp], offset	aLayoutupdated ; "LayoutUpdated"
		mov	[ebp+var_78], 0Dh
		call	ds:_ZN7QString16fromAscii_helperEPKci
		mov	[ebp+var_18], eax
		mov	eax, ds:off_6FFF52D8
		mov	dword ptr [esp+4], 0FFFFFFFFh
		mov	[ebp+var_78], 0Ch
		mov	[esp], eax
		call	ds:_ZN7QString16fromAscii_helperEPKci
		mov	[ebp+var_1C], eax
		lea	eax, [ebp+var_20]
		mov	[esp], eax
		mov	[ebp+var_78], 0Bh
		call	ds:_ZN15QDBusConnection10sessionBusEv
		mov	eax, [ebp+arg_0]
		sub	esp, 4
		mov	edx, [ebp+var_98]
		mov	[ebp+var_78], 0Ah
		mov	[esp+18h], eax
		lea	eax, [ebp+var_14]
		mov	[esp+14h], eax
		lea	eax, [ebp+var_18]
		mov	[esp+10h], eax
		lea	eax, [ebp+var_1C]
		mov	[esp+0Ch], eax
		mov	eax, [ebp+arg_4]
		mov	[esp+1Ch], edx
		mov	edx, [ebp+arg_8]
		mov	[esp+4], eax
		lea	eax, [ebp+var_20]
		mov	[esp+8], edx
		mov	[esp], eax
		call	ds:_ZN15QDBusConnection7connectERK7QStringS2_S2_S2_S2_P7QObjectPKc
		lea	eax, [ebp+var_20]
		mov	[esp], eax
		mov	[ebp+var_78], 0Bh
		call	ds:_ZN15QDBusConnectionD1Ev
		mov	eax, [ebp+var_1C]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jz	loc_6FFCD970

loc_6FFCD625:				; CODE XREF: _ZN16DBusMenuImporterC1ERK7QStringS2_P7QObject+6E3j
		mov	eax, [ebp+var_18]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jz	loc_6FFCD958

loc_6FFCD636:				; CODE XREF: _ZN16DBusMenuImporterC1ERK7QStringS2_P7QObject+6CBj
		mov	eax, [ebp+var_14]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jz	loc_6FFCD940

loc_6FFCD647:				; CODE XREF: _ZN16DBusMenuImporterC1ERK7QStringS2_P7QObject+6B3j
		mov	dword ptr [esp], offset	a1slotitemsprop	; "1slotItemsPropertiesUpdated(DBusMenuIte"...
		mov	[ebp+var_78], 12h
		call	ds:_Z13qFlagLocationPKc
		mov	[ebp+var_94], eax
		mov	dword ptr [esp+4], 0FFFFFFFFh
		mov	dword ptr [esp], offset	aAIaSvAIas ; "a(ia{sv})a(ias)"
		call	ds:_ZN7QString16fromAscii_helperEPKci
		mov	[ebp+var_24], eax
		mov	dword ptr [esp+4], 0FFFFFFFFh
		mov	dword ptr [esp], offset	aItemspropertie	; "ItemsPropertiesUpdated"
		mov	[ebp+var_78], 9
		call	ds:_ZN7QString16fromAscii_helperEPKci
		mov	edx, ds:off_6FFF52D8
		mov	[ebp+var_28], eax
		mov	dword ptr [esp+4], 0FFFFFFFFh
		mov	[ebp+var_78], 8
		mov	[esp], edx
		call	ds:_ZN7QString16fromAscii_helperEPKci
		mov	[ebp+var_2C], eax
		lea	eax, [ebp+var_30]
		mov	[esp], eax
		mov	[ebp+var_78], 7
		call	ds:_ZN15QDBusConnection10sessionBusEv
		mov	eax, [ebp+var_94]
		sub	esp, 4
		mov	edx, [ebp+arg_0]
		mov	[ebp+var_78], 6
		mov	[esp+1Ch], eax
		lea	eax, [ebp+var_24]
		mov	[esp+14h], eax
		lea	eax, [ebp+var_28]
		mov	[esp+10h], eax
		lea	eax, [ebp+var_2C]
		mov	[esp+0Ch], eax
		mov	eax, [ebp+arg_8]
		mov	[esp+18h], edx
		mov	edx, [ebp+arg_4]
		mov	[esp+8], eax
		lea	eax, [ebp+var_30]
		mov	[esp+4], edx
		mov	[esp], eax
		call	ds:_ZN15QDBusConnection7connectERK7QStringS2_S2_S2_S2_P7QObjectPKc
		lea	eax, [ebp+var_30]
		mov	[esp], eax
		mov	[ebp+var_78], 7
		call	ds:_ZN15QDBusConnectionD1Ev
		mov	eax, [ebp+var_2C]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jz	loc_6FFCD928

loc_6FFCD73A:				; CODE XREF: _ZN16DBusMenuImporterC1ERK7QStringS2_P7QObject+69Bj
		mov	eax, [ebp+var_28]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jz	loc_6FFCD910

loc_6FFCD74B:				; CODE XREF: _ZN16DBusMenuImporterC1ERK7QStringS2_P7QObject+683j
		mov	eax, [ebp+var_24]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jz	loc_6FFCD8F8

loc_6FFCD75C:				; CODE XREF: _ZN16DBusMenuImporterC1ERK7QStringS2_P7QObject+66Bj
		mov	dword ptr [esp], offset	a1slotitemactiv	; "1slotItemActivationRequested(int, uint)"
		mov	[ebp+var_78], 12h
		call	ds:_Z13qFlagLocationPKc
		mov	[ebp+var_90], eax
		mov	dword ptr [esp+4], 0FFFFFFFFh
		mov	dword ptr [esp], offset	aIu ; "iu"
		call	ds:_ZN7QString16fromAscii_helperEPKci
		mov	[ebp+var_34], eax
		mov	dword ptr [esp+4], 0FFFFFFFFh
		mov	dword ptr [esp], offset	aItemactivation	; "ItemActivationRequested"
		mov	[ebp+var_78], 5
		call	ds:_ZN7QString16fromAscii_helperEPKci
		mov	[ebp+var_38], eax
		mov	eax, ds:off_6FFF52D8
		mov	dword ptr [esp+4], 0FFFFFFFFh
		mov	[ebp+var_78], 4
		mov	[esp], eax
		call	ds:_ZN7QString16fromAscii_helperEPKci
		mov	[ebp+var_3C], eax
		lea	eax, [ebp+var_40]
		mov	[esp], eax
		mov	[ebp+var_78], 3
		call	ds:_ZN15QDBusConnection10sessionBusEv
		mov	eax, [ebp+arg_0]
		sub	esp, 4
		mov	edx, [ebp+var_90]
		mov	[ebp+var_78], 2
		mov	[esp+18h], eax
		lea	eax, [ebp+var_34]
		mov	[esp+14h], eax
		lea	eax, [ebp+var_38]
		mov	[esp+10h], eax
		lea	eax, [ebp+var_3C]
		mov	[esp+0Ch], eax
		mov	eax, [ebp+arg_4]
		mov	[esp+1Ch], edx
		mov	edx, [ebp+arg_8]
		mov	[esp+4], eax
		lea	eax, [ebp+var_40]
		mov	[esp+8], edx
		mov	[esp], eax
		call	ds:_ZN15QDBusConnection7connectERK7QStringS2_S2_S2_S2_P7QObjectPKc
		lea	eax, [ebp+var_40]
		mov	[esp], eax
		mov	[ebp+var_78], 3
		call	ds:_ZN15QDBusConnectionD1Ev
		mov	eax, [ebp+var_3C]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jz	loc_6FFCD8E0

loc_6FFCD84E:				; CODE XREF: _ZN16DBusMenuImporterC1ERK7QStringS2_P7QObject+653j
		mov	eax, [ebp+var_38]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jz	short loc_6FFCD8C5

loc_6FFCD85B:				; CODE XREF: _ZN16DBusMenuImporterC1ERK7QStringS2_P7QObject+638j
		mov	eax, [ebp+var_34]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jz	short loc_6FFCD8B0

loc_6FFCD868:				; CODE XREF: _ZN16DBusMenuImporterC1ERK7QStringS2_P7QObject+623j
		mov	edx, [ebp+arg_0]
		mov	dword ptr [esp+4], 0
		mov	eax, [edx+8]
		mov	[ebp+var_78], 12h
		mov	[esp], eax
		call	sub_6FFE2C60
		lea	eax, [ebp+var_7C]
		mov	[esp], eax
		call	_Unwind_SjLj_Unregister
		leave
		retn
; ---------------------------------------------------------------------------

loc_6FFCD892:				; CODE XREF: _ZN16DBusMenuImporterC1ERK7QStringS2_P7QObject+19Bj
		mov	eax, [ebp+var_C]
		mov	[ebp+var_78], 12h
		mov	[esp], eax
		call	ds:_ZN7QString4freeEPNS_4DataE
		jmp	loc_6FFCD441
; ---------------------------------------------------------------------------
		align 10h

loc_6FFCD8B0:				; CODE XREF: _ZN16DBusMenuImporterC1ERK7QStringS2_P7QObject+5C6j
		mov	eax, [ebp+var_34]
		mov	[ebp+var_78], 12h
		mov	[esp], eax
		call	ds:_ZN7QString4freeEPNS_4DataE
		jmp	short loc_6FFCD868
; ---------------------------------------------------------------------------

loc_6FFCD8C5:				; CODE XREF: _ZN16DBusMenuImporterC1ERK7QStringS2_P7QObject+5B9j
		mov	eax, [ebp+var_38]
		mov	[ebp+var_78], 5
		mov	[esp], eax
		call	ds:_ZN7QString4freeEPNS_4DataE
		jmp	short loc_6FFCD85B
; ---------------------------------------------------------------------------
		align 10h

loc_6FFCD8E0:				; CODE XREF: _ZN16DBusMenuImporterC1ERK7QStringS2_P7QObject+5A8j
		mov	eax, [ebp+var_3C]
		mov	[ebp+var_78], 4
		mov	[esp], eax
		call	ds:_ZN7QString4freeEPNS_4DataE
		jmp	loc_6FFCD84E
; ---------------------------------------------------------------------------

loc_6FFCD8F8:				; CODE XREF: _ZN16DBusMenuImporterC1ERK7QStringS2_P7QObject+4B6j
		mov	eax, [ebp+var_24]
		mov	[ebp+var_78], 12h
		mov	[esp], eax
		call	ds:_ZN7QString4freeEPNS_4DataE
		jmp	loc_6FFCD75C
; ---------------------------------------------------------------------------

loc_6FFCD910:				; CODE XREF: _ZN16DBusMenuImporterC1ERK7QStringS2_P7QObject+4A5j
		mov	eax, [ebp+var_28]
		mov	[ebp+var_78], 9
		mov	[esp], eax
		call	ds:_ZN7QString4freeEPNS_4DataE
		jmp	loc_6FFCD74B
; ---------------------------------------------------------------------------

loc_6FFCD928:				; CODE XREF: _ZN16DBusMenuImporterC1ERK7QStringS2_P7QObject+494j
		mov	eax, [ebp+var_2C]
		mov	[ebp+var_78], 8
		mov	[esp], eax
		call	ds:_ZN7QString4freeEPNS_4DataE
		jmp	loc_6FFCD73A
; ---------------------------------------------------------------------------

loc_6FFCD940:				; CODE XREF: _ZN16DBusMenuImporterC1ERK7QStringS2_P7QObject+3A1j
		mov	eax, [ebp+var_14]
		mov	[ebp+var_78], 12h
		mov	[esp], eax
		call	ds:_ZN7QString4freeEPNS_4DataE
		jmp	loc_6FFCD647
; ---------------------------------------------------------------------------

loc_6FFCD958:				; CODE XREF: _ZN16DBusMenuImporterC1ERK7QStringS2_P7QObject+390j
		mov	eax, [ebp+var_18]
		mov	[ebp+var_78], 0Dh
		mov	[esp], eax
		call	ds:_ZN7QString4freeEPNS_4DataE
		jmp	loc_6FFCD636
; ---------------------------------------------------------------------------

loc_6FFCD970:				; CODE XREF: _ZN16DBusMenuImporterC1ERK7QStringS2_P7QObject+37Fj
		mov	eax, [ebp+var_1C]
		mov	[ebp+var_78], 0Ch
		mov	[esp], eax
		call	ds:_ZN7QString4freeEPNS_4DataE
		jmp	loc_6FFCD625
_ZN16DBusMenuImporterC1ERK7QStringS2_P7QObject endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn

sub_6FFCD988	proc near		; DATA XREF: _ZN16DBusMenuImporterC1ERK7QStringS2_P7QObject+23o

arg_0		= dword	ptr  4

		add	ebp, 8
		mov	eax, [ebp-78h]
		mov	edx, [ebp-74h]
		cmp	eax, 1
		mov	[ebp-0ACh], edx
		jz	loc_6FFCDBA1
		cmp	eax, 2
		jz	loc_6FFCDBB4
		cmp	eax, 3
		jz	loc_6FFCDBC6
		cmp	eax, 4
		jz	loc_6FFCDBD8
		cmp	eax, 5
		xchg	ax, ax
		jz	loc_6FFCDB53
		cmp	eax, 6
		jz	loc_6FFCDB66
		cmp	eax, 7
		jz	loc_6FFCDB78
		cmp	eax, 8
		nop
		lea	esi, [esi+0]
		jz	loc_6FFCDB8A
		cmp	eax, 9
		jz	loc_6FFCDB05
		cmp	eax, 0Ah
		jz	loc_6FFCDB18
		cmp	eax, 0Bh
		nop
		lea	esi, [esi+0]
		jz	loc_6FFCDB2A
		cmp	eax, 0Ch
		jz	loc_6FFCDB3C
		cmp	eax, 0Dh
		jz	loc_6FFCDAF5
		cmp	eax, 0Eh
		nop
		lea	esi, [esi+0]
		jz	loc_6FFCDAC0
		cmp	eax, 0Fh
		jz	loc_6FFCDACE
		cmp	eax, 10h
		jz	loc_6FFCDAE1
		cmp	eax, 11h
		nop
		lea	esi, [esi+0]
		jz	short loc_6FFCDA98
		mov	[ebp-0A8h], edx
		mov	edx, [ebp-0A4h]
		mov	eax, [edx+0Ch]
		test	eax, eax
		jz	short loc_6FFCDA81
		lock dec dword ptr [eax+34h]
		setnz	dl
		test	dl, dl
		jnz	short loc_6FFCDA81
		mov	edx, [ebp-0A4h]
		mov	eax, [edx+0Ch]
		mov	dword ptr [ebp-78h], 0
		mov	[esp+arg_0], eax
		mov	eax, edx
		add	eax, 0Ch
		mov	[esp+0], eax
		call	sub_6FFE4850

loc_6FFCDA81:				; CODE XREF: sub_6FFCD988+CBj
					; sub_6FFCD988+D6j
		mov	eax, [ebp-0A8h]
		mov	edx, [ebp-80h]
		mov	[ebp-0ACh], eax
		mov	[esp+0], edx
		call	sub_6FFEAE50

loc_6FFCDA98:				; CODE XREF: sub_6FFCD988+B8j
					; sub_6FFCD988+16Bj ...
		mov	eax, [ebp+8]
		mov	dword ptr [ebp-78h], 0
		mov	[esp+0], eax
		call	ds:_ZN7QObjectD2Ev
		mov	edx, [ebp-0ACh]
		mov	dword ptr [ebp-78h], 0FFFFFFFFh
		mov	[esp+0], edx
		call	_Unwind_SjLj_Resume
; ---------------------------------------------------------------------------

loc_6FFCDAC0:				; CODE XREF: sub_6FFCD988+98j
		mov	edx, [ebp-88h]
		mov	[esp+0], edx
		call	sub_6FFEAE50

loc_6FFCDACE:				; CODE XREF: sub_6FFCD988+A1j
		lea	eax, [ebp-10h]
		mov	[esp+0], eax
		mov	dword ptr [ebp-78h], 0
		call	ds:_ZN15QDBusConnectionD1Ev

loc_6FFCDAE1:				; CODE XREF: sub_6FFCD988+AAj
		lea	eax, [ebp-0Ch]
		mov	[esp+0], eax
		mov	dword ptr [ebp-78h], 0
		call	sub_6FFEA140
		jmp	short loc_6FFCDA98
; ---------------------------------------------------------------------------

loc_6FFCDAF5:				; CODE XREF: sub_6FFCD988+8Aj
		mov	eax, [ebp-84h]
		mov	[esp+0], eax
		call	sub_6FFEAE50
		jmp	short loc_6FFCDA98
; ---------------------------------------------------------------------------

loc_6FFCDB05:				; CODE XREF: sub_6FFCD988+61j
		lea	eax, [ebp-20h]
		mov	[esp+0], eax
		mov	dword ptr [ebp-78h], 0
		call	ds:_ZN15QDBusConnectionD1Ev

loc_6FFCDB18:				; CODE XREF: sub_6FFCD988+6Aj
		lea	eax, [ebp-1Ch]
		mov	[esp+0], eax
		mov	dword ptr [ebp-78h], 0
		call	sub_6FFEA140

loc_6FFCDB2A:				; CODE XREF: sub_6FFCD988+78j
		lea	eax, [ebp-18h]
		mov	[esp+0], eax
		mov	dword ptr [ebp-78h], 0
		call	sub_6FFEA140

loc_6FFCDB3C:				; CODE XREF: sub_6FFCD988+81j
		lea	eax, [ebp-14h]
		mov	[esp+0], eax
		mov	dword ptr [ebp-78h], 0
		call	sub_6FFEA140
		jmp	loc_6FFCDA98
; ---------------------------------------------------------------------------

loc_6FFCDB53:				; CODE XREF: sub_6FFCD988+38j
		lea	eax, [ebp-30h]
		mov	[esp+0], eax
		mov	dword ptr [ebp-78h], 0
		call	ds:_ZN15QDBusConnectionD1Ev

loc_6FFCDB66:				; CODE XREF: sub_6FFCD988+41j
		lea	eax, [ebp-2Ch]
		mov	[esp+0], eax
		mov	dword ptr [ebp-78h], 0
		call	sub_6FFEA140

loc_6FFCDB78:				; CODE XREF: sub_6FFCD988+4Aj
		lea	eax, [ebp-28h]
		mov	[esp+0], eax
		mov	dword ptr [ebp-78h], 0
		call	sub_6FFEA140

loc_6FFCDB8A:				; CODE XREF: sub_6FFCD988+58j
		lea	eax, [ebp-24h]
		mov	[esp+0], eax
		mov	dword ptr [ebp-78h], 0
		call	sub_6FFEA140
		jmp	loc_6FFCDA98
; ---------------------------------------------------------------------------

loc_6FFCDBA1:				; CODE XREF: sub_6FFCD988+12j
		lea	eax, [ebp-40h]
		mov	[esp+0], eax
		mov	dword ptr [ebp-78h], 0
		call	ds:_ZN15QDBusConnectionD1Ev

loc_6FFCDBB4:				; CODE XREF: sub_6FFCD988+1Bj
		lea	eax, [ebp-3Ch]
		mov	[esp+0], eax
		mov	dword ptr [ebp-78h], 0
		call	sub_6FFEA140

loc_6FFCDBC6:				; CODE XREF: sub_6FFCD988+24j
		lea	eax, [ebp-38h]
		mov	[esp+0], eax
		mov	dword ptr [ebp-78h], 0
		call	sub_6FFEA140

loc_6FFCDBD8:				; CODE XREF: sub_6FFCD988+2Dj
		lea	eax, [ebp-34h]
		mov	[esp+0], eax
		mov	dword ptr [ebp-78h], 0
		call	sub_6FFEA140
		jmp	loc_6FFCDA98
sub_6FFCD988	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  37. _ZN16DBusMenuImporterC2ERK7QStringS2_P7QObject

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public _ZN16DBusMenuImporterC2ERK7QStringS2_P7QObject
_ZN16DBusMenuImporterC2ERK7QStringS2_P7QObject proc near

var_A4		= dword	ptr -0A4h
var_A0		= dword	ptr -0A0h
var_9C		= dword	ptr -9Ch
var_98		= dword	ptr -98h
var_94		= dword	ptr -94h
var_90		= dword	ptr -90h
var_8C		= dword	ptr -8Ch
var_88		= dword	ptr -88h
var_84		= dword	ptr -84h
var_80		= dword	ptr -80h
var_7C		= byte ptr -7Ch
var_78		= dword	ptr -78h
var_64		= dword	ptr -64h
var_60		= dword	ptr -60h
var_5C		= dword	ptr -5Ch
var_58		= dword	ptr -58h
var_54		= dword	ptr -54h
var_40		= byte ptr -40h
var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= byte ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= byte ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= byte ptr -10h
var_C		= dword	ptr -0Ch
var_8		= byte ptr -8
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h

		push	ebp
		mov	ebp, esp
		sub	esp, 0D8h
		lea	eax, [ebp+var_8]
		mov	[ebp+var_5C], eax
		lea	eax, [ebp+var_7C]
		mov	[esp], eax
		mov	[ebp+var_64], offset sub_6FFEC1F0
		mov	[ebp+var_60], offset word_6FFECE62
		mov	[ebp+var_58], offset sub_6FFCE2D8
		mov	[ebp+var_54], esp
		call	_Unwind_SjLj_Register
		mov	eax, [ebp+arg_C]
		mov	edx, [ebp+arg_0]
		mov	[ebp+var_78], 0FFFFFFFFh
		mov	[esp+4], eax
		mov	[esp], edx
		call	ds:_ZN7QObjectC2EPS_
		mov	eax, [ebp+arg_0]
		mov	dword ptr [eax], offset	off_6FFF9DA8
		mov	dword ptr [esp], 28h ; size_t
		mov	[ebp+var_78], 12h
		call	sub_6FFEAE70
		mov	[ebp+var_80], eax
		mov	edx, [ebp+var_80]
		mov	[ebp+var_A4], eax
		mov	eax, ds:_ZN8QMapData11shared_nullE
		mov	[edx+0Ch], eax
		lock inc dword ptr [eax+34h]
		setnz	dl
		mov	eax, [ebp+var_80]
		mov	dword ptr [esp+4], 0
		mov	[ebp+var_78], 1
		add	eax, 10h
		mov	[esp], eax
		call	ds:_ZN13QSignalMapperC1EP7QObject
		mov	edx, [ebp+var_80]
		mov	eax, ds:_ZN9QHashData11shared_nullE
		mov	[edx+1Ch], eax
		lock inc dword ptr [eax+8]
		setnz	dl
		mov	edx, [ebp+var_80]
		mov	[edx+20h], eax
		lock inc dword ptr [eax+8]
		setnz	dl
		mov	edx, [ebp+var_80]
		mov	eax, [ebp+arg_0]
		mov	[eax+8], edx
		mov	[ebp+var_78], 12h
		call	sub_6FFD2F30
		mov	eax, [ebp+arg_0]
		mov	edx, [ebp+arg_0]
		mov	eax, [eax+8]
		mov	[eax], edx
		mov	[ebp+var_8C], eax
		mov	eax, ds:off_6FFF52D8
		mov	dword ptr [esp+4], 0FFFFFFFFh
		mov	[ebp+var_78], 12h
		mov	[esp], eax
		call	ds:_ZN7QString16fromAscii_helperEPKci
		mov	[ebp+var_C], eax
		lea	eax, [ebp+var_10]
		mov	[esp], eax
		mov	[ebp+var_78], 11h
		call	ds:_ZN15QDBusConnection10sessionBusEv
		sub	esp, 4
		mov	dword ptr [esp], 8 ; size_t
		mov	[ebp+var_78], 10h
		call	sub_6FFEAE70
		mov	[ebp+var_88], eax
		lea	eax, [ebp+var_10]
		mov	edx, [ebp+arg_0]
		mov	[esp+10h], eax
		lea	eax, [ebp+var_C]
		mov	[esp+0Ch], eax
		mov	eax, [ebp+arg_8]
		mov	[ebp+var_78], 0Fh
		mov	[esp+14h], edx
		mov	edx, [ebp+arg_4]
		mov	[esp+8], eax
		mov	eax, [ebp+var_88]
		mov	[esp+4], edx
		mov	[esp], eax
		call	ds:_ZN14QDBusInterfaceC1ERK7QStringS2_S2_RK15QDBusConnectionP7QObject
		mov	eax, [ebp+var_8C]
		mov	edx, [ebp+var_88]
		mov	[eax+4], edx
		lea	eax, [ebp+var_10]
		mov	[esp], eax
		mov	[ebp+var_78], 11h
		call	ds:_ZN15QDBusConnectionD1Ev
		mov	eax, [ebp+var_C]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jz	loc_6FFCE1E2

loc_6FFCDD91:				; CODE XREF: _ZN16DBusMenuImporterC2ERK7QStringS2_P7QObject+605j
		mov	edx, [ebp+arg_0]
		mov	eax, [edx+8]
		mov	dword ptr [eax+8], 0
		mov	byte ptr [eax+24h], 0
		mov	dword ptr [esp], offset	a1sendclickedev	; "1sendClickedEvent(int)"
		mov	[ebp+var_78], 12h
		call	ds:_Z13qFlagLocationPKc
		mov	[ebp+var_A0], eax
		mov	dword ptr [esp], offset	a2mappedInt ; "2mapped(int)"
		call	ds:_Z13qFlagLocationPKc
		mov	edx, [ebp+var_A0]
		mov	dword ptr [esp+10h], 0
		mov	[esp+4], eax
		mov	[esp+0Ch], edx
		mov	edx, [ebp+arg_0]
		mov	[esp+8], edx
		mov	eax, [edx+8]
		add	eax, 10h
		mov	[esp], eax
		call	ds:_ZN7QObject7connectEPKS_PKcS1_S3_N2Qt14ConnectionTypeE
		mov	dword ptr [esp], 18h ; size_t
		call	sub_6FFEAE70
		mov	[ebp+var_84], eax
		mov	eax, [ebp+arg_0]
		mov	edx, [ebp+var_84]
		mov	[ebp+var_78], 0Eh
		mov	[esp+4], eax
		mov	[esp], edx
		call	ds:_ZN6QTimerC1EP7QObject
		mov	edx, [ebp+arg_0]
		mov	eax, [edx+8]
		mov	edx, [ebp+var_84]
		mov	[eax+18h], edx
		or	byte ptr [edx+14h], 1
		mov	dword ptr [esp], offset	a1processpendin	; "1processPendingLayoutUpdates()"
		mov	[ebp+var_78], 12h
		call	ds:_Z13qFlagLocationPKc
		mov	[ebp+var_9C], eax
		mov	dword ptr [esp], offset	a2timeout_1 ; "2timeout()"
		call	ds:_Z13qFlagLocationPKc
		mov	edx, [ebp+var_9C]
		mov	dword ptr [esp+10h], 0
		mov	[esp+4], eax
		mov	[esp+0Ch], edx
		mov	edx, [ebp+arg_0]
		mov	[esp+8], edx
		mov	eax, [edx+8]
		mov	eax, [eax+18h]
		mov	[esp], eax
		call	ds:_ZN7QObject7connectEPKS_PKcS1_S3_N2Qt14ConnectionTypeE
		mov	dword ptr [esp], offset	a1slotlayoutupd	; "1slotLayoutUpdated(uint, int)"
		call	ds:_Z13qFlagLocationPKc
		mov	[ebp+var_98], eax
		mov	dword ptr [esp+4], 0FFFFFFFFh
		mov	dword ptr [esp], offset	aUi ; "ui"
		call	ds:_ZN7QString16fromAscii_helperEPKci
		mov	[ebp+var_14], eax
		mov	dword ptr [esp+4], 0FFFFFFFFh
		mov	dword ptr [esp], offset	aLayoutupdated ; "LayoutUpdated"
		mov	[ebp+var_78], 0Dh
		call	ds:_ZN7QString16fromAscii_helperEPKci
		mov	[ebp+var_18], eax
		mov	eax, ds:off_6FFF52D8
		mov	dword ptr [esp+4], 0FFFFFFFFh
		mov	[ebp+var_78], 0Ch
		mov	[esp], eax
		call	ds:_ZN7QString16fromAscii_helperEPKci
		mov	[ebp+var_1C], eax
		lea	eax, [ebp+var_20]
		mov	[esp], eax
		mov	[ebp+var_78], 0Bh
		call	ds:_ZN15QDBusConnection10sessionBusEv
		mov	eax, [ebp+arg_0]
		sub	esp, 4
		mov	edx, [ebp+var_98]
		mov	[ebp+var_78], 0Ah
		mov	[esp+18h], eax
		lea	eax, [ebp+var_14]
		mov	[esp+14h], eax
		lea	eax, [ebp+var_18]
		mov	[esp+10h], eax
		lea	eax, [ebp+var_1C]
		mov	[esp+0Ch], eax
		mov	eax, [ebp+arg_4]
		mov	[esp+1Ch], edx
		mov	edx, [ebp+arg_8]
		mov	[esp+4], eax
		lea	eax, [ebp+var_20]
		mov	[esp+8], edx
		mov	[esp], eax
		call	ds:_ZN15QDBusConnection7connectERK7QStringS2_S2_S2_S2_P7QObjectPKc
		lea	eax, [ebp+var_20]
		mov	[esp], eax
		mov	[ebp+var_78], 0Bh
		call	ds:_ZN15QDBusConnectionD1Ev
		mov	eax, [ebp+var_1C]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jz	loc_6FFCE2C0

loc_6FFCDF75:				; CODE XREF: _ZN16DBusMenuImporterC2ERK7QStringS2_P7QObject+6E3j
		mov	eax, [ebp+var_18]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jz	loc_6FFCE2A8

loc_6FFCDF86:				; CODE XREF: _ZN16DBusMenuImporterC2ERK7QStringS2_P7QObject+6CBj
		mov	eax, [ebp+var_14]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jz	loc_6FFCE290

loc_6FFCDF97:				; CODE XREF: _ZN16DBusMenuImporterC2ERK7QStringS2_P7QObject+6B3j
		mov	dword ptr [esp], offset	a1slotitemsprop	; "1slotItemsPropertiesUpdated(DBusMenuIte"...
		mov	[ebp+var_78], 12h
		call	ds:_Z13qFlagLocationPKc
		mov	[ebp+var_94], eax
		mov	dword ptr [esp+4], 0FFFFFFFFh
		mov	dword ptr [esp], offset	aAIaSvAIas ; "a(ia{sv})a(ias)"
		call	ds:_ZN7QString16fromAscii_helperEPKci
		mov	[ebp+var_24], eax
		mov	dword ptr [esp+4], 0FFFFFFFFh
		mov	dword ptr [esp], offset	aItemspropertie	; "ItemsPropertiesUpdated"
		mov	[ebp+var_78], 9
		call	ds:_ZN7QString16fromAscii_helperEPKci
		mov	edx, ds:off_6FFF52D8
		mov	[ebp+var_28], eax
		mov	dword ptr [esp+4], 0FFFFFFFFh
		mov	[ebp+var_78], 8
		mov	[esp], edx
		call	ds:_ZN7QString16fromAscii_helperEPKci
		mov	[ebp+var_2C], eax
		lea	eax, [ebp+var_30]
		mov	[esp], eax
		mov	[ebp+var_78], 7
		call	ds:_ZN15QDBusConnection10sessionBusEv
		mov	eax, [ebp+var_94]
		sub	esp, 4
		mov	edx, [ebp+arg_0]
		mov	[ebp+var_78], 6
		mov	[esp+1Ch], eax
		lea	eax, [ebp+var_24]
		mov	[esp+14h], eax
		lea	eax, [ebp+var_28]
		mov	[esp+10h], eax
		lea	eax, [ebp+var_2C]
		mov	[esp+0Ch], eax
		mov	eax, [ebp+arg_8]
		mov	[esp+18h], edx
		mov	edx, [ebp+arg_4]
		mov	[esp+8], eax
		lea	eax, [ebp+var_30]
		mov	[esp+4], edx
		mov	[esp], eax
		call	ds:_ZN15QDBusConnection7connectERK7QStringS2_S2_S2_S2_P7QObjectPKc
		lea	eax, [ebp+var_30]
		mov	[esp], eax
		mov	[ebp+var_78], 7
		call	ds:_ZN15QDBusConnectionD1Ev
		mov	eax, [ebp+var_2C]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jz	loc_6FFCE278

loc_6FFCE08A:				; CODE XREF: _ZN16DBusMenuImporterC2ERK7QStringS2_P7QObject+69Bj
		mov	eax, [ebp+var_28]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jz	loc_6FFCE260

loc_6FFCE09B:				; CODE XREF: _ZN16DBusMenuImporterC2ERK7QStringS2_P7QObject+683j
		mov	eax, [ebp+var_24]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jz	loc_6FFCE248

loc_6FFCE0AC:				; CODE XREF: _ZN16DBusMenuImporterC2ERK7QStringS2_P7QObject+66Bj
		mov	dword ptr [esp], offset	a1slotitemactiv	; "1slotItemActivationRequested(int, uint)"
		mov	[ebp+var_78], 12h
		call	ds:_Z13qFlagLocationPKc
		mov	[ebp+var_90], eax
		mov	dword ptr [esp+4], 0FFFFFFFFh
		mov	dword ptr [esp], offset	aIu ; "iu"
		call	ds:_ZN7QString16fromAscii_helperEPKci
		mov	[ebp+var_34], eax
		mov	dword ptr [esp+4], 0FFFFFFFFh
		mov	dword ptr [esp], offset	aItemactivation	; "ItemActivationRequested"
		mov	[ebp+var_78], 5
		call	ds:_ZN7QString16fromAscii_helperEPKci
		mov	[ebp+var_38], eax
		mov	eax, ds:off_6FFF52D8
		mov	dword ptr [esp+4], 0FFFFFFFFh
		mov	[ebp+var_78], 4
		mov	[esp], eax
		call	ds:_ZN7QString16fromAscii_helperEPKci
		mov	[ebp+var_3C], eax
		lea	eax, [ebp+var_40]
		mov	[esp], eax
		mov	[ebp+var_78], 3
		call	ds:_ZN15QDBusConnection10sessionBusEv
		mov	eax, [ebp+arg_0]
		sub	esp, 4
		mov	edx, [ebp+var_90]
		mov	[ebp+var_78], 2
		mov	[esp+18h], eax
		lea	eax, [ebp+var_34]
		mov	[esp+14h], eax
		lea	eax, [ebp+var_38]
		mov	[esp+10h], eax
		lea	eax, [ebp+var_3C]
		mov	[esp+0Ch], eax
		mov	eax, [ebp+arg_4]
		mov	[esp+1Ch], edx
		mov	edx, [ebp+arg_8]
		mov	[esp+4], eax
		lea	eax, [ebp+var_40]
		mov	[esp+8], edx
		mov	[esp], eax
		call	ds:_ZN15QDBusConnection7connectERK7QStringS2_S2_S2_S2_P7QObjectPKc
		lea	eax, [ebp+var_40]
		mov	[esp], eax
		mov	[ebp+var_78], 3
		call	ds:_ZN15QDBusConnectionD1Ev
		mov	eax, [ebp+var_3C]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jz	loc_6FFCE230

loc_6FFCE19E:				; CODE XREF: _ZN16DBusMenuImporterC2ERK7QStringS2_P7QObject+653j
		mov	eax, [ebp+var_38]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jz	short loc_6FFCE215

loc_6FFCE1AB:				; CODE XREF: _ZN16DBusMenuImporterC2ERK7QStringS2_P7QObject+638j
		mov	eax, [ebp+var_34]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jz	short loc_6FFCE200

loc_6FFCE1B8:				; CODE XREF: _ZN16DBusMenuImporterC2ERK7QStringS2_P7QObject+623j
		mov	edx, [ebp+arg_0]
		mov	dword ptr [esp+4], 0
		mov	eax, [edx+8]
		mov	[ebp+var_78], 12h
		mov	[esp], eax
		call	sub_6FFE2C60
		lea	eax, [ebp+var_7C]
		mov	[esp], eax
		call	_Unwind_SjLj_Unregister
		leave
		retn
; ---------------------------------------------------------------------------

loc_6FFCE1E2:				; CODE XREF: _ZN16DBusMenuImporterC2ERK7QStringS2_P7QObject+19Bj
		mov	eax, [ebp+var_C]
		mov	[ebp+var_78], 12h
		mov	[esp], eax
		call	ds:_ZN7QString4freeEPNS_4DataE
		jmp	loc_6FFCDD91
; ---------------------------------------------------------------------------
		align 10h

loc_6FFCE200:				; CODE XREF: _ZN16DBusMenuImporterC2ERK7QStringS2_P7QObject+5C6j
		mov	eax, [ebp+var_34]
		mov	[ebp+var_78], 12h
		mov	[esp], eax
		call	ds:_ZN7QString4freeEPNS_4DataE
		jmp	short loc_6FFCE1B8
; ---------------------------------------------------------------------------

loc_6FFCE215:				; CODE XREF: _ZN16DBusMenuImporterC2ERK7QStringS2_P7QObject+5B9j
		mov	eax, [ebp+var_38]
		mov	[ebp+var_78], 5
		mov	[esp], eax
		call	ds:_ZN7QString4freeEPNS_4DataE
		jmp	short loc_6FFCE1AB
; ---------------------------------------------------------------------------
		align 10h

loc_6FFCE230:				; CODE XREF: _ZN16DBusMenuImporterC2ERK7QStringS2_P7QObject+5A8j
		mov	eax, [ebp+var_3C]
		mov	[ebp+var_78], 4
		mov	[esp], eax
		call	ds:_ZN7QString4freeEPNS_4DataE
		jmp	loc_6FFCE19E
; ---------------------------------------------------------------------------

loc_6FFCE248:				; CODE XREF: _ZN16DBusMenuImporterC2ERK7QStringS2_P7QObject+4B6j
		mov	eax, [ebp+var_24]
		mov	[ebp+var_78], 12h
		mov	[esp], eax
		call	ds:_ZN7QString4freeEPNS_4DataE
		jmp	loc_6FFCE0AC
; ---------------------------------------------------------------------------

loc_6FFCE260:				; CODE XREF: _ZN16DBusMenuImporterC2ERK7QStringS2_P7QObject+4A5j
		mov	eax, [ebp+var_28]
		mov	[ebp+var_78], 9
		mov	[esp], eax
		call	ds:_ZN7QString4freeEPNS_4DataE
		jmp	loc_6FFCE09B
; ---------------------------------------------------------------------------

loc_6FFCE278:				; CODE XREF: _ZN16DBusMenuImporterC2ERK7QStringS2_P7QObject+494j
		mov	eax, [ebp+var_2C]
		mov	[ebp+var_78], 8
		mov	[esp], eax
		call	ds:_ZN7QString4freeEPNS_4DataE
		jmp	loc_6FFCE08A
; ---------------------------------------------------------------------------

loc_6FFCE290:				; CODE XREF: _ZN16DBusMenuImporterC2ERK7QStringS2_P7QObject+3A1j
		mov	eax, [ebp+var_14]
		mov	[ebp+var_78], 12h
		mov	[esp], eax
		call	ds:_ZN7QString4freeEPNS_4DataE
		jmp	loc_6FFCDF97
; ---------------------------------------------------------------------------

loc_6FFCE2A8:				; CODE XREF: _ZN16DBusMenuImporterC2ERK7QStringS2_P7QObject+390j
		mov	eax, [ebp+var_18]
		mov	[ebp+var_78], 0Dh
		mov	[esp], eax
		call	ds:_ZN7QString4freeEPNS_4DataE
		jmp	loc_6FFCDF86
; ---------------------------------------------------------------------------

loc_6FFCE2C0:				; CODE XREF: _ZN16DBusMenuImporterC2ERK7QStringS2_P7QObject+37Fj
		mov	eax, [ebp+var_1C]
		mov	[ebp+var_78], 0Ch
		mov	[esp], eax
		call	ds:_ZN7QString4freeEPNS_4DataE
		jmp	loc_6FFCDF75
_ZN16DBusMenuImporterC2ERK7QStringS2_P7QObject endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn

sub_6FFCE2D8	proc near		; DATA XREF: _ZN16DBusMenuImporterC2ERK7QStringS2_P7QObject+23o

arg_0		= dword	ptr  4

		add	ebp, 8
		mov	eax, [ebp-78h]
		mov	edx, [ebp-74h]
		cmp	eax, 1
		mov	[ebp-0ACh], edx
		jz	loc_6FFCE4F1
		cmp	eax, 2
		jz	loc_6FFCE504
		cmp	eax, 3
		jz	loc_6FFCE516
		cmp	eax, 4
		jz	loc_6FFCE528
		cmp	eax, 5
		xchg	ax, ax
		jz	loc_6FFCE4A3
		cmp	eax, 6
		jz	loc_6FFCE4B6
		cmp	eax, 7
		jz	loc_6FFCE4C8
		cmp	eax, 8
		nop
		lea	esi, [esi+0]
		jz	loc_6FFCE4DA
		cmp	eax, 9
		jz	loc_6FFCE455
		cmp	eax, 0Ah
		jz	loc_6FFCE468
		cmp	eax, 0Bh
		nop
		lea	esi, [esi+0]
		jz	loc_6FFCE47A
		cmp	eax, 0Ch
		jz	loc_6FFCE48C
		cmp	eax, 0Dh
		jz	loc_6FFCE445
		cmp	eax, 0Eh
		nop
		lea	esi, [esi+0]
		jz	loc_6FFCE410
		cmp	eax, 0Fh
		jz	loc_6FFCE41E
		cmp	eax, 10h
		jz	loc_6FFCE431
		cmp	eax, 11h
		nop
		lea	esi, [esi+0]
		jz	short loc_6FFCE3E8
		mov	[ebp-0A8h], edx
		mov	edx, [ebp-0A4h]
		mov	eax, [edx+0Ch]
		test	eax, eax
		jz	short loc_6FFCE3D1
		lock dec dword ptr [eax+34h]
		setnz	dl
		test	dl, dl
		jnz	short loc_6FFCE3D1
		mov	edx, [ebp-0A4h]
		mov	eax, [edx+0Ch]
		mov	dword ptr [ebp-78h], 0
		mov	[esp+arg_0], eax
		mov	eax, edx
		add	eax, 0Ch
		mov	[esp+0], eax
		call	sub_6FFE4850

loc_6FFCE3D1:				; CODE XREF: sub_6FFCE2D8+CBj
					; sub_6FFCE2D8+D6j
		mov	eax, [ebp-0A8h]
		mov	edx, [ebp-80h]
		mov	[ebp-0ACh], eax
		mov	[esp+0], edx
		call	sub_6FFEAE50

loc_6FFCE3E8:				; CODE XREF: sub_6FFCE2D8+B8j
					; sub_6FFCE2D8+16Bj ...
		mov	eax, [ebp+8]
		mov	dword ptr [ebp-78h], 0
		mov	[esp+0], eax
		call	ds:_ZN7QObjectD2Ev
		mov	edx, [ebp-0ACh]
		mov	dword ptr [ebp-78h], 0FFFFFFFFh
		mov	[esp+0], edx
		call	_Unwind_SjLj_Resume
; ---------------------------------------------------------------------------

loc_6FFCE410:				; CODE XREF: sub_6FFCE2D8+98j
		mov	edx, [ebp-88h]
		mov	[esp+0], edx
		call	sub_6FFEAE50

loc_6FFCE41E:				; CODE XREF: sub_6FFCE2D8+A1j
		lea	eax, [ebp-10h]
		mov	[esp+0], eax
		mov	dword ptr [ebp-78h], 0
		call	ds:_ZN15QDBusConnectionD1Ev

loc_6FFCE431:				; CODE XREF: sub_6FFCE2D8+AAj
		lea	eax, [ebp-0Ch]
		mov	[esp+0], eax
		mov	dword ptr [ebp-78h], 0
		call	sub_6FFEA140
		jmp	short loc_6FFCE3E8
; ---------------------------------------------------------------------------

loc_6FFCE445:				; CODE XREF: sub_6FFCE2D8+8Aj
		mov	eax, [ebp-84h]
		mov	[esp+0], eax
		call	sub_6FFEAE50
		jmp	short loc_6FFCE3E8
; ---------------------------------------------------------------------------

loc_6FFCE455:				; CODE XREF: sub_6FFCE2D8+61j
		lea	eax, [ebp-20h]
		mov	[esp+0], eax
		mov	dword ptr [ebp-78h], 0
		call	ds:_ZN15QDBusConnectionD1Ev

loc_6FFCE468:				; CODE XREF: sub_6FFCE2D8+6Aj
		lea	eax, [ebp-1Ch]
		mov	[esp+0], eax
		mov	dword ptr [ebp-78h], 0
		call	sub_6FFEA140

loc_6FFCE47A:				; CODE XREF: sub_6FFCE2D8+78j
		lea	eax, [ebp-18h]
		mov	[esp+0], eax
		mov	dword ptr [ebp-78h], 0
		call	sub_6FFEA140

loc_6FFCE48C:				; CODE XREF: sub_6FFCE2D8+81j
		lea	eax, [ebp-14h]
		mov	[esp+0], eax
		mov	dword ptr [ebp-78h], 0
		call	sub_6FFEA140
		jmp	loc_6FFCE3E8
; ---------------------------------------------------------------------------

loc_6FFCE4A3:				; CODE XREF: sub_6FFCE2D8+38j
		lea	eax, [ebp-30h]
		mov	[esp+0], eax
		mov	dword ptr [ebp-78h], 0
		call	ds:_ZN15QDBusConnectionD1Ev

loc_6FFCE4B6:				; CODE XREF: sub_6FFCE2D8+41j
		lea	eax, [ebp-2Ch]
		mov	[esp+0], eax
		mov	dword ptr [ebp-78h], 0
		call	sub_6FFEA140

loc_6FFCE4C8:				; CODE XREF: sub_6FFCE2D8+4Aj
		lea	eax, [ebp-28h]
		mov	[esp+0], eax
		mov	dword ptr [ebp-78h], 0
		call	sub_6FFEA140

loc_6FFCE4DA:				; CODE XREF: sub_6FFCE2D8+58j
		lea	eax, [ebp-24h]
		mov	[esp+0], eax
		mov	dword ptr [ebp-78h], 0
		call	sub_6FFEA140
		jmp	loc_6FFCE3E8
; ---------------------------------------------------------------------------

loc_6FFCE4F1:				; CODE XREF: sub_6FFCE2D8+12j
		lea	eax, [ebp-40h]
		mov	[esp+0], eax
		mov	dword ptr [ebp-78h], 0
		call	ds:_ZN15QDBusConnectionD1Ev

loc_6FFCE504:				; CODE XREF: sub_6FFCE2D8+1Bj
		lea	eax, [ebp-3Ch]
		mov	[esp+0], eax
		mov	dword ptr [ebp-78h], 0
		call	sub_6FFEA140

loc_6FFCE516:				; CODE XREF: sub_6FFCE2D8+24j
		lea	eax, [ebp-38h]
		mov	[esp+0], eax
		mov	dword ptr [ebp-78h], 0
		call	sub_6FFEA140

loc_6FFCE528:				; CODE XREF: sub_6FFCE2D8+2Dj
		lea	eax, [ebp-34h]
		mov	[esp+0], eax
		mov	dword ptr [ebp-78h], 0
		call	sub_6FFEA140
		jmp	loc_6FFCE3E8
sub_6FFCE2D8	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  33. _ZN16DBusMenuImporter27processPendingLayoutUpdatesEv

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public _ZN16DBusMenuImporter27processPendingLayoutUpdatesEv
_ZN16DBusMenuImporter27processPendingLayoutUpdatesEv proc near
					; CODE XREF: _ZN16DBusMenuImporter18qt_static_metacallEP7QObjectN11QMetaObject4CallEiPPv+C3j

var_70		= dword	ptr -70h
var_6C		= dword	ptr -6Ch
var_68		= dword	ptr -68h
var_64		= dword	ptr -64h
var_60		= dword	ptr -60h
var_5C		= byte ptr -5Ch
var_58		= dword	ptr -58h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= byte ptr -8
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		lea	eax, [ebp+var_8]
		push	ebx
		sub	esp, 94h
		mov	[ebp+var_3C], eax
		lea	eax, [ebp+var_5C]
		mov	[esp], eax
		mov	[ebp+var_44], offset sub_6FFEC1F0
		mov	[ebp+var_40], offset dword_6FFECEF4
		mov	[ebp+var_38], offset sub_6FFCE88C
		mov	[ebp+var_34], esp
		call	_Unwind_SjLj_Register
		mov	edx, [ebp+arg_0]
		mov	eax, [edx+8]
		mov	eax, [eax+20h]
		mov	[ebp+var_C], eax
		lock inc dword ptr [eax+8]
		setnz	dl
		mov	eax, [ebp+var_C]
		test	byte ptr [eax+1Ch], 1
		jnz	short loc_6FFCE5E2
		mov	edx, [eax+8]
		cmp	edx, 1
		jz	short loc_6FFCE5E2
		mov	dword ptr [esp+10h], 4
		mov	dword ptr [esp+0Ch], 8
		mov	dword ptr [esp+8], offset nullsub_1
		mov	dword ptr [esp+4], offset nullsub_2
		mov	[esp], eax
		mov	[ebp+var_58], 0FFFFFFFFh
		call	ds:_ZN9QHashData14detach_helper2EPFvPNS_4NodeEPvEPFvS1_Eii
		mov	[ebp+var_70], eax
		mov	eax, [ebp+var_C]
		lock dec dword ptr [eax+8]
		setnz	dl
		test	dl, dl
		jz	loc_6FFCE832
		mov	eax, [ebp+var_70]
		mov	[ebp+var_C], eax

loc_6FFCE5E2:				; CODE XREF: _ZN16DBusMenuImporter27processPendingLayoutUpdatesEv+4Dj
					; _ZN16DBusMenuImporter27processPendingLayoutUpdatesEv+55j ...
		mov	edx, [ebp+arg_0]
		mov	eax, ds:_ZN9QHashData11shared_nullE
		mov	edx, [edx+8]
		mov	[ebp+var_60], eax
		mov	[ebp+var_64], edx
		lock inc dword ptr [eax+8]
		setnz	al
		mov	eax, [ebp+var_60]
		cmp	eax, [edx+20h]
		jz	short loc_6FFCE633
		lock inc dword ptr [eax+8]
		setnz	al
		mov	eax, [edx+20h]
		lock dec dword ptr [eax+8]
		setnz	dl
		test	dl, dl
		jz	loc_6FFCE80F

loc_6FFCE61B:				; CODE XREF: _ZN16DBusMenuImporter27processPendingLayoutUpdatesEv+2EDj
		mov	eax, [ebp+var_64]
		mov	edx, [ebp+var_60]
		mov	[eax+20h], edx
		mov	eax, ds:_ZN9QHashData11shared_nullE
		test	byte ptr [eax+1Ch], 1
		jz	loc_6FFCE7BD

loc_6FFCE633:				; CODE XREF: _ZN16DBusMenuImporter27processPendingLayoutUpdatesEv+C0j
					; _ZN16DBusMenuImporter27processPendingLayoutUpdatesEv+2CAj
		mov	edx, [ebp+var_60]
		lock dec dword ptr [edx+8]
		setnz	al
		test	al, al
		jz	loc_6FFCE79D

loc_6FFCE645:				; CODE XREF: _ZN16DBusMenuImporter27processPendingLayoutUpdatesEv+278j
		mov	eax, [ebp+var_C]
		mov	[ebp+var_1C], eax
		lock inc dword ptr [eax+8]
		setnz	dl
		mov	eax, [ebp+var_1C]
		test	byte ptr [eax+1Ch], 1
		jnz	short loc_6FFCE6B0
		mov	edx, [eax+8]
		cmp	edx, 1
		jz	short loc_6FFCE6B0
		mov	dword ptr [esp+10h], 4
		mov	dword ptr [esp+0Ch], 8
		mov	dword ptr [esp+8], offset nullsub_1
		mov	dword ptr [esp+4], offset nullsub_2
		mov	[esp], eax
		mov	[ebp+var_58], 3
		call	ds:_ZN9QHashData14detach_helper2EPFvPNS_4NodeEPvEPFvS1_Eii
		mov	[ebp+var_68], eax
		mov	eax, [ebp+var_1C]
		lock dec dword ptr [eax+8]
		setnz	dl
		test	dl, dl
		jz	loc_6FFCE851
		mov	eax, [ebp+var_68]
		mov	[ebp+var_1C], eax
		xchg	ax, ax

loc_6FFCE6B0:				; CODE XREF: _ZN16DBusMenuImporter27processPendingLayoutUpdatesEv+119j
					; _ZN16DBusMenuImporter27processPendingLayoutUpdatesEv+121j ...
		mov	ebx, [ebp+var_1C]
		mov	[ebp+var_18], 0
		mov	ecx, [ebx+18h]
		mov	edx, [ebx+4]
		test	ecx, ecx
		jz	short loc_6FFCE6E0
		mov	eax, [edx]
		sub	ecx, 1
		cmp	ebx, eax
		jz	short loc_6FFCE6DC
		jmp	short loc_6FFCE6E2
; ---------------------------------------------------------------------------
		align 10h

loc_6FFCE6D0:				; CODE XREF: _ZN16DBusMenuImporter27processPendingLayoutUpdatesEv+19Ej
		add	edx, 4
		sub	ecx, 1
		mov	eax, [edx]
		cmp	ebx, eax
		jnz	short loc_6FFCE6E2

loc_6FFCE6DC:				; CODE XREF: _ZN16DBusMenuImporter27processPendingLayoutUpdatesEv+18Bj
		test	ecx, ecx
		jnz	short loc_6FFCE6D0

loc_6FFCE6E0:				; CODE XREF: _ZN16DBusMenuImporter27processPendingLayoutUpdatesEv+182j
		mov	eax, ebx

loc_6FFCE6E2:				; CODE XREF: _ZN16DBusMenuImporter27processPendingLayoutUpdatesEv+18Dj
					; _ZN16DBusMenuImporter27processPendingLayoutUpdatesEv+19Aj
		mov	edx, [ebp+var_1C]
		mov	[ebp+var_14], eax
		cmp	eax, edx
		mov	[ebp+var_10], edx
		jnz	short loc_6FFCE6F6
		jmp	short loc_6FFCE72F
; ---------------------------------------------------------------------------

loc_6FFCE6F1:				; CODE XREF: _ZN16DBusMenuImporter27processPendingLayoutUpdatesEv+1EDj
		cmp	eax, [ebp+var_10]
		jz	short loc_6FFCE72F

loc_6FFCE6F6:				; CODE XREF: _ZN16DBusMenuImporter27processPendingLayoutUpdatesEv+1ADj
		mov	eax, [eax+4]
		mov	edx, [ebp+arg_0]
		mov	[esp+4], eax
		mov	eax, [edx+8]
		mov	[ebp+var_58], 2
		mov	[esp], eax
		call	sub_6FFE2C60
		mov	eax, [ebp+var_14]
		mov	[ebp+var_58], 2
		mov	[esp], eax
		call	ds:_ZN9QHashData8nextNodeEPNS_4NodeE
		mov	edx, [ebp+var_18]
		mov	[ebp+var_14], eax
		test	edx, edx
		jz	short loc_6FFCE6F1

loc_6FFCE72F:				; CODE XREF: _ZN16DBusMenuImporter27processPendingLayoutUpdatesEv+1AFj
					; _ZN16DBusMenuImporter27processPendingLayoutUpdatesEv+1B4j
		mov	eax, [ebp+var_1C]
		lock dec dword ptr [eax+8]
		setnz	dl
		test	dl, dl
		jz	short loc_6FFCE780

loc_6FFCE73D:				; CODE XREF: _ZN16DBusMenuImporter27processPendingLayoutUpdatesEv+25Bj
		mov	eax, [ebp+var_C]
		lock dec dword ptr [eax+8]
		setnz	dl
		test	dl, dl
		jnz	short loc_6FFCE766
		mov	eax, [ebp+var_C]
		mov	dword ptr [esp+4], offset nullsub_1
		mov	[ebp+var_58], 0FFFFFFFFh
		mov	[esp], eax
		call	ds:_ZN9QHashData11free_helperEPFvPNS_4NodeEE

loc_6FFCE766:				; CODE XREF: _ZN16DBusMenuImporter27processPendingLayoutUpdatesEv+209j
		lea	eax, [ebp+var_5C]
		mov	[esp], eax
		call	_Unwind_SjLj_Unregister
		add	esp, 94h
		pop	ebx
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6FFCE780:				; CODE XREF: _ZN16DBusMenuImporter27processPendingLayoutUpdatesEv+1FBj
		mov	eax, [ebp+var_1C]
		mov	dword ptr [esp+4], offset nullsub_1
		mov	[ebp+var_58], 3
		mov	[esp], eax
		call	ds:_ZN9QHashData11free_helperEPFvPNS_4NodeEE
		jmp	short loc_6FFCE73D
; ---------------------------------------------------------------------------

loc_6FFCE79D:				; CODE XREF: _ZN16DBusMenuImporter27processPendingLayoutUpdatesEv+FFj
		mov	edx, [ebp+var_60]
		mov	dword ptr [esp+4], offset nullsub_1
		mov	[ebp+var_58], 3
		mov	[esp], edx
		call	ds:_ZN9QHashData11free_helperEPFvPNS_4NodeEE
		jmp	loc_6FFCE645
; ---------------------------------------------------------------------------

loc_6FFCE7BD:				; CODE XREF: _ZN16DBusMenuImporter27processPendingLayoutUpdatesEv+EDj
		mov	dword ptr [esp+10h], 4
		mov	dword ptr [esp+0Ch], 8
		mov	dword ptr [esp+8], offset nullsub_1
		mov	dword ptr [esp+4], offset nullsub_2
		mov	[esp], edx
		mov	[ebp+var_58], 1
		call	ds:_ZN9QHashData14detach_helper2EPFvPNS_4NodeEPvEPFvS1_Eii
		mov	edx, [ebp+var_64]
		mov	[ebp+var_6C], eax
		mov	eax, [edx+20h]
		lock dec dword ptr [eax+8]
		setnz	dl
		test	dl, dl
		jz	short loc_6FFCE870

loc_6FFCE801:				; CODE XREF: _ZN16DBusMenuImporter27processPendingLayoutUpdatesEv+347j
		mov	edx, [ebp+var_6C]
		mov	eax, [ebp+var_64]
		mov	[eax+20h], edx
		jmp	loc_6FFCE633
; ---------------------------------------------------------------------------

loc_6FFCE80F:				; CODE XREF: _ZN16DBusMenuImporter27processPendingLayoutUpdatesEv+D5j
		mov	edx, [ebp+var_64]
		mov	dword ptr [esp+4], offset nullsub_1
		mov	eax, [edx+20h]
		mov	[ebp+var_58], 1
		mov	[esp], eax
		call	ds:_ZN9QHashData11free_helperEPFvPNS_4NodeEE
		jmp	loc_6FFCE61B
; ---------------------------------------------------------------------------

loc_6FFCE832:				; CODE XREF: _ZN16DBusMenuImporter27processPendingLayoutUpdatesEv+96j
		mov	eax, [ebp+var_C]
		mov	dword ptr [esp+4], offset nullsub_1
		mov	[esp], eax
		call	ds:_ZN9QHashData11free_helperEPFvPNS_4NodeEE
		mov	eax, [ebp+var_70]
		mov	[ebp+var_C], eax
		jmp	loc_6FFCE5E2
; ---------------------------------------------------------------------------

loc_6FFCE851:				; CODE XREF: _ZN16DBusMenuImporter27processPendingLayoutUpdatesEv+162j
		mov	eax, [ebp+var_1C]
		mov	dword ptr [esp+4], offset nullsub_1
		mov	[esp], eax
		call	ds:_ZN9QHashData11free_helperEPFvPNS_4NodeEE
		mov	eax, [ebp+var_68]
		mov	[ebp+var_1C], eax
		jmp	loc_6FFCE6B0
; ---------------------------------------------------------------------------

loc_6FFCE870:				; CODE XREF: _ZN16DBusMenuImporter27processPendingLayoutUpdatesEv+2BFj
		mov	edx, [ebp+var_64]
		mov	dword ptr [esp+4], offset nullsub_1
		mov	eax, [edx+20h]
		mov	[esp], eax
		call	ds:_ZN9QHashData11free_helperEPFvPNS_4NodeEE
		jmp	loc_6FFCE801
_ZN16DBusMenuImporter27processPendingLayoutUpdatesEv endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn

sub_6FFCE88C	proc near		; DATA XREF: _ZN16DBusMenuImporter27processPendingLayoutUpdatesEv+24o

arg_0		= dword	ptr  4

		add	ebp, 8
		mov	eax, [ebp-58h]
		mov	edx, [ebp-54h]
		cmp	eax, 1
		mov	[ebp-78h], edx
		jz	short loc_6FFCE8F5
		cmp	eax, 2
		jz	short loc_6FFCE8D1
		mov	[ebp-74h], edx
		mov	edx, [ebp-60h]
		lock dec dword ptr [edx+8]
		setnz	al
		test	al, al
		jnz	short loc_6FFCE8CB
		mov	[esp+arg_0], offset nullsub_1
		mov	[esp+0], edx
		mov	dword ptr [ebp-58h], 0
		call	ds:_ZN9QHashData11free_helperEPFvPNS_4NodeEE

loc_6FFCE8CB:				; CODE XREF: sub_6FFCE88C+25j
		mov	eax, [ebp-74h]
		mov	[ebp-78h], eax

loc_6FFCE8D1:				; CODE XREF: sub_6FFCE88C+14j
					; sub_6FFCE88C+7Bj
		lea	eax, [ebp-0Ch]
		mov	[esp+0], eax
		mov	dword ptr [ebp-58h], 0
		call	sub_6FFE4A20
		mov	eax, [ebp-78h]
		mov	dword ptr [ebp-58h], 0FFFFFFFFh
		mov	[esp+0], eax
		call	_Unwind_SjLj_Resume
; ---------------------------------------------------------------------------

loc_6FFCE8F5:				; CODE XREF: sub_6FFCE88C+Fj
		lea	eax, [ebp-1Ch]
		mov	[esp+0], eax
		mov	dword ptr [ebp-58h], 0
		call	sub_6FFE4A20
		jmp	short loc_6FFCE8D1
sub_6FFCE88C	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  25. _ZN16DBusMenuImporter17slotLayoutUpdatedEji

; =============== S U B	R O U T	I N E =======================================


		public _ZN16DBusMenuImporter17slotLayoutUpdatedEji
_ZN16DBusMenuImporter17slotLayoutUpdatedEji proc near
					; CODE XREF: _ZN16DBusMenuImporter18qt_static_metacallEP7QObjectN11QMetaObject4CallEiPPv+A5j

var_6C		= dword	ptr -6Ch
var_68		= dword	ptr -68h
var_64		= dword	ptr -64h
var_60		= dword	ptr -60h
var_5C		= dword	ptr -5Ch
var_40		= dword	ptr -40h
var_30		= dword	ptr -30h
var_20		= dword	ptr -20h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_8		= dword	ptr  0Ch

		sub	esp, 6Ch
		mov	[esp+6Ch+var_C], esi
		mov	esi, [esp+6Ch+arg_0]
		lea	eax, [esp+6Ch+arg_8]
		mov	[esp+6Ch+var_10], ebx
		mov	[esp+6Ch+var_8], edi
		mov	[esp+6Ch+var_4], ebp
		mov	[esp+6Ch+var_68], eax
		mov	eax, [esi+8]
		add	eax, 1Ch
		mov	[esp+6Ch+var_6C], eax
		call	sub_6FFE5190
		test	eax, eax
		jz	short loc_6FFCE955

loc_6FFCE941:				; CODE XREF: _ZN16DBusMenuImporter17slotLayoutUpdatedEji+10Bj
					; _ZN16DBusMenuImporter17slotLayoutUpdatedEji+11Aj
		mov	ebx, [esp+6Ch+var_10]
		mov	esi, [esp+6Ch+var_C]
		mov	edi, [esp+6Ch+var_8]
		mov	ebp, [esp+6Ch+var_4]
		add	esp, 6Ch
		retn
; ---------------------------------------------------------------------------

loc_6FFCE955:				; CODE XREF: _ZN16DBusMenuImporter17slotLayoutUpdatedEji+2Fj
		mov	edi, [esi+8]
		mov	ebp, [edi+20h]
		mov	eax, [ebp+8]
		cmp	eax, 1
		jz	short loc_6FFCE9B3
		mov	[esp+6Ch+var_6C], ebp
		mov	[esp+6Ch+var_5C], 4
		mov	[esp+6Ch+var_60], 8
		mov	[esp+6Ch+var_64], offset nullsub_1
		mov	[esp+6Ch+var_68], offset nullsub_2
		call	ds:_ZN9QHashData14detach_helper2EPFvPNS_4NodeEPvEPFvS1_Eii
		mov	ebp, eax
		mov	eax, [edi+20h]
		lock dec dword ptr [eax+8]
		setnz	dl
		test	dl, dl
		jnz	short loc_6FFCE9B0
		mov	[esp+6Ch+var_68], offset nullsub_1
		mov	eax, [edi+20h]
		mov	[esp+6Ch+var_6C], eax
		call	ds:_ZN9QHashData11free_helperEPFvPNS_4NodeEE

loc_6FFCE9B0:				; CODE XREF: _ZN16DBusMenuImporter17slotLayoutUpdatedEji+8Aj
		mov	[edi+20h], ebp

loc_6FFCE9B3:				; CODE XREF: _ZN16DBusMenuImporter17slotLayoutUpdatedEji+51j
		mov	edx, [ebp+18h]
		mov	ebx, [esp+6Ch+arg_8]
		test	edx, edx
		mov	[esp+6Ch+var_40], edx
		jz	short loc_6FFCEA02
		xor	edx, edx
		mov	eax, ebx
		div	[esp+6Ch+var_40]
		lea	edx, ds:0[edx*4]
		add	edx, [ebp+4]
		mov	eax, [edx]
		cmp	eax, ebp
		jz	short loc_6FFCE9E4
		mov	ebp, [eax]
		test	ebp, ebp
		jz	loc_6FFCEA9D

loc_6FFCE9E4:				; CODE XREF: _ZN16DBusMenuImporter17slotLayoutUpdatedEji+C8j
					; _ZN16DBusMenuImporter17slotLayoutUpdatedEji+1B4j
		mov	ecx, [edi+20h]
		cmp	eax, ecx
		jz	short loc_6FFCEA05
		nop
		lea	esi, [esi+0]

loc_6FFCE9F0:				; CODE XREF: _ZN16DBusMenuImporter17slotLayoutUpdatedEji+EBj
		cmp	ebx, [eax+4]
		jz	short loc_6FFCEA05
		mov	edx, eax
		mov	eax, [eax]
		cmp	eax, ecx
		jnz	short loc_6FFCE9F0
		lea	esi, [esi+0]
		jmp	short loc_6FFCEA05
; ---------------------------------------------------------------------------

loc_6FFCEA02:				; CODE XREF: _ZN16DBusMenuImporter17slotLayoutUpdatedEji+B0j
		lea	edx, [edi+20h]

loc_6FFCEA05:				; CODE XREF: _ZN16DBusMenuImporter17slotLayoutUpdatedEji+D9j
					; _ZN16DBusMenuImporter17slotLayoutUpdatedEji+E3j ...
		mov	[esp+6Ch+var_20], ebx
		mov	eax, [edx]
		cmp	eax, [edi+20h]
		jz	short loc_6FFCEA30

loc_6FFCEA10:				; CODE XREF: _ZN16DBusMenuImporter17slotLayoutUpdatedEji+154j
		mov	eax, [esi+8]
		mov	eax, [eax+18h]
		mov	esi, [eax+8]
		test	esi, esi
		jns	loc_6FFCE941
		mov	[esp+6Ch+var_6C], eax
		call	ds:_ZN6QTimer5startEv
		jmp	loc_6FFCE941
; ---------------------------------------------------------------------------
		align 10h

loc_6FFCEA30:				; CODE XREF: _ZN16DBusMenuImporter17slotLayoutUpdatedEji+FEj
		mov	ecx, [eax+0Ch]
		cmp	ecx, [eax+18h]
		jge	short loc_6FFCEA66

loc_6FFCEA38:				; CODE XREF: _ZN16DBusMenuImporter17slotLayoutUpdatedEji+18Bj
		mov	[esp+6Ch+var_68], 4
		mov	eax, [edi+20h]
		mov	[esp+6Ch+var_30], edx
		mov	[esp+6Ch+var_6C], eax
		call	ds:_ZN9QHashData12allocateNodeEi
		mov	[eax+4], ebx
		mov	edx, [esp+6Ch+var_30]
		mov	ecx, [edx]
		mov	[eax], ecx
		mov	[edx], eax
		mov	eax, [edi+20h]
		add	dword ptr [eax+0Ch], 1
		jmp	short loc_6FFCEA10
; ---------------------------------------------------------------------------

loc_6FFCEA66:				; CODE XREF: _ZN16DBusMenuImporter17slotLayoutUpdatedEji+126j
		movsx	edx, word ptr [eax+16h]
		mov	[esp+6Ch+var_6C], eax
		add	edx, 1
		mov	[esp+6Ch+var_68], edx
		call	ds:_ZN9QHashData6rehashEi
		lea	eax, [esp+6Ch+var_20]
		mov	[esp+6Ch+var_64], eax
		lea	eax, [esp+6Ch+arg_8]
		mov	[esp+6Ch+var_68], eax
		lea	eax, [edi+20h]
		mov	[esp+6Ch+var_6C], eax
		call	sub_6FFEAA30
		mov	ebx, [esp+6Ch+var_20]
		mov	edx, eax
		jmp	short loc_6FFCEA38
; ---------------------------------------------------------------------------

loc_6FFCEA9D:				; CODE XREF: _ZN16DBusMenuImporter17slotLayoutUpdatedEji+CEj
		mov	[esp+6Ch+var_30], edx
		mov	[esp+6Ch+var_64], 376h
		mov	[esp+6Ch+var_68], offset aRIncludeQtco_5 ; "R:/include/QtCore/qhash.h"
		mov	[esp+6Ch+var_6C], offset aNodeENodeNex_1 ; "*node == e || (*node)->next"
		call	ds:_Z9qt_assertPKcS0_i
		mov	edx, [esp+6Ch+var_30]
		mov	eax, [edx]
		jmp	loc_6FFCE9E4
_ZN16DBusMenuImporter17slotLayoutUpdatedEji endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  38. _ZN16DBusMenuImporterD0Ev

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public _ZN16DBusMenuImporterD0Ev
_ZN16DBusMenuImporterD0Ev proc near	; DATA XREF: .rdata:6FFF9DB8o

var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_3C		= byte ptr -3Ch
var_38		= dword	ptr -38h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_8		= byte ptr -8
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 68h
		lea	eax, [ebp+var_8]
		mov	[ebp+var_1C], eax
		lea	eax, [ebp+var_3C]
		mov	[esp], eax
		mov	[ebp+var_24], offset sub_6FFEC1F0
		mov	[ebp+var_20], offset dword_6FFECF68
		mov	[ebp+var_18], offset sub_6FFCEC56
		mov	[ebp+var_14], esp
		call	_Unwind_SjLj_Register
		mov	edx, [ebp+arg_0]
		mov	eax, [edx+8]
		mov	dword ptr [edx], offset	off_6FFF9DA8
		mov	eax, [eax+8]
		mov	[ebp+var_38], 4
		mov	[esp], eax
		call	ds:_ZN7QObject11deleteLaterEv
		mov	eax, [ebp+arg_0]
		mov	eax, [eax+8]
		test	eax, eax
		mov	[ebp+var_48], eax
		jz	short loc_6FFCEB8B
		mov	eax, [eax+20h]
		lock dec dword ptr [eax+8]
		setnz	dl
		test	dl, dl
		jz	loc_6FFCEC33

loc_6FFCEB3D:				; CODE XREF: _ZN16DBusMenuImporterD0Ev+181j
		mov	edx, [ebp+var_48]
		mov	eax, [edx+1Ch]
		lock dec dword ptr [eax+8]
		setnz	dl
		test	dl, dl
		jz	loc_6FFCEC10

loc_6FFCEB52:				; CODE XREF: _ZN16DBusMenuImporterD0Ev+15Ej
		mov	eax, [ebp+var_48]
		mov	[ebp+var_38], 3
		add	eax, 10h
		mov	[esp], eax
		call	ds:_ZN13QSignalMapperD1Ev
		mov	edx, [ebp+var_48]
		mov	eax, [edx+0Ch]
		test	eax, eax
		jz	short loc_6FFCEB7D
		lock dec dword ptr [eax+34h]
		setnz	dl
		test	dl, dl
		jz	short loc_6FFCEBB6

loc_6FFCEB7D:				; CODE XREF: _ZN16DBusMenuImporterD0Ev+A0j
					; _ZN16DBusMenuImporterD0Ev+13Aj
		mov	edx, [ebp+arg_0]
		mov	eax, [edx+8]
		mov	[esp], eax
		call	sub_6FFEAE50

loc_6FFCEB8B:				; CODE XREF: _ZN16DBusMenuImporterD0Ev+59j
		mov	eax, [ebp+arg_0]
		mov	[ebp+var_38], 0FFFFFFFFh
		mov	[esp], eax
		call	ds:_ZN7QObjectD2Ev
		mov	edx, [ebp+arg_0]
		mov	[esp], edx
		call	sub_6FFEAE50
		lea	eax, [ebp+var_3C]
		mov	[esp], eax
		call	_Unwind_SjLj_Unregister
		leave
		retn
; ---------------------------------------------------------------------------

loc_6FFCEBB6:				; CODE XREF: _ZN16DBusMenuImporterD0Ev+ABj
		mov	eax, [ebp+var_48]
		mov	eax, [eax+0Ch]
		mov	edx, eax
		mov	[ebp+var_4C], eax
		mov	eax, [eax+4]
		cmp	edx, eax
		jz	short loc_6FFCEBEF
		mov	edx, ds:_ZN11QMetaObject11removeGuardEPP7QObject
		mov	[ebp+var_40], edx

loc_6FFCEBD1:				; CODE XREF: _ZN16DBusMenuImporterD0Ev+11Dj
		mov	edx, [eax+4]
		sub	eax, 4
		mov	[esp], eax
		mov	[ebp+var_38], 4
		mov	[ebp+var_44], edx
		call	[ebp+var_40]
		mov	eax, [ebp+var_44]
		cmp	[ebp+var_4C], eax
		jnz	short loc_6FFCEBD1

loc_6FFCEBEF:				; CODE XREF: _ZN16DBusMenuImporterD0Ev+F6j
		mov	edx, [ebp+var_4C]
		mov	dword ptr [esp+4], 8
		mov	[ebp+var_38], 4
		mov	[esp], edx
		call	ds:_ZN8QMapData16continueFreeDataEi
		jmp	loc_6FFCEB7D
; ---------------------------------------------------------------------------
		align 10h

loc_6FFCEC10:				; CODE XREF: _ZN16DBusMenuImporterD0Ev+7Cj
		mov	edx, [ebp+var_48]
		mov	dword ptr [esp+4], offset nullsub_1
		mov	eax, [edx+1Ch]
		mov	[ebp+var_38], 2
		mov	[esp], eax
		call	ds:_ZN9QHashData11free_helperEPFvPNS_4NodeEE
		jmp	loc_6FFCEB52
; ---------------------------------------------------------------------------

loc_6FFCEC33:				; CODE XREF: _ZN16DBusMenuImporterD0Ev+67j
		mov	edx, [ebp+var_48]
		mov	dword ptr [esp+4], offset nullsub_1
		mov	eax, [edx+20h]
		mov	[ebp+var_38], 1
		mov	[esp], eax
		call	ds:_ZN9QHashData11free_helperEPFvPNS_4NodeEE
		jmp	loc_6FFCEB3D
_ZN16DBusMenuImporterD0Ev endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn

sub_6FFCEC56	proc near		; DATA XREF: _ZN16DBusMenuImporterD0Ev+20o

arg_0		= dword	ptr  4

		add	ebp, 8
		mov	eax, [ebp-38h]
		mov	edx, [ebp-34h]
		cmp	eax, 1
		mov	[ebp-54h], edx
		jz	short loc_6FFCEC86
		cmp	eax, 2
		jz	short loc_6FFCEC9C
		cmp	eax, 3
		jz	short loc_6FFCECDB
		mov	eax, [ebp-48h]
		mov	dword ptr [ebp-38h], 0
		add	eax, 1Ch
		mov	[esp+0], eax
		call	sub_6FFE4A20

loc_6FFCEC86:				; CODE XREF: sub_6FFCEC56+Fj
		mov	eax, [ebp-48h]
		mov	dword ptr [ebp-38h], 0
		add	eax, 10h
		mov	[esp+0], eax
		call	ds:_ZN13QSignalMapperD1Ev

loc_6FFCEC9C:				; CODE XREF: sub_6FFCEC56+14j
		mov	eax, [ebp-54h]
		mov	edx, [ebp-48h]
		mov	[ebp-50h], eax
		mov	eax, [edx+0Ch]
		test	eax, eax
		jz	short loc_6FFCECD5
		lock dec dword ptr [eax+34h]
		setnz	dl
		test	dl, dl
		jnz	short loc_6FFCECD5
		mov	edx, [ebp-48h]
		mov	eax, [edx+0Ch]
		mov	dword ptr [ebp-38h], 0
		mov	[esp+arg_0], eax
		mov	eax, edx
		add	eax, 0Ch
		mov	[esp+0], eax
		call	sub_6FFE4850

loc_6FFCECD5:				; CODE XREF: sub_6FFCEC56+54j
					; sub_6FFCEC56+5Fj
		mov	eax, [ebp-50h]
		mov	[ebp-54h], eax

loc_6FFCECDB:				; CODE XREF: sub_6FFCEC56+19j
		mov	eax, [ebp+8]
		mov	dword ptr [ebp-38h], 0
		mov	[esp+0], eax
		call	ds:_ZN7QObjectD2Ev
		mov	edx, [ebp-54h]
		mov	dword ptr [ebp-38h], 0FFFFFFFFh
		mov	[esp+0], edx
		call	_Unwind_SjLj_Resume
sub_6FFCEC56	endp

; Exported entry  39. _ZN16DBusMenuImporterD1Ev

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public _ZN16DBusMenuImporterD1Ev
_ZN16DBusMenuImporterD1Ev proc near	; DATA XREF: .rdata:6FFF9DB4o

var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_3C		= byte ptr -3Ch
var_38		= dword	ptr -38h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_8		= byte ptr -8
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 68h
		lea	eax, [ebp+var_8]
		mov	[ebp+var_1C], eax
		lea	eax, [ebp+var_3C]
		mov	[esp], eax
		mov	[ebp+var_24], offset sub_6FFEC1F0
		mov	[ebp+var_20], offset dword_6FFECF74
		mov	[ebp+var_18], offset sub_6FFCEE86
		mov	[ebp+var_14], esp
		call	_Unwind_SjLj_Register
		mov	edx, [ebp+arg_0]
		mov	eax, [edx+8]
		mov	dword ptr [edx], offset	off_6FFF9DA8
		mov	eax, [eax+8]
		mov	[ebp+var_38], 4
		mov	[esp], eax
		call	ds:_ZN7QObject11deleteLaterEv
		mov	eax, [ebp+arg_0]
		mov	eax, [eax+8]
		test	eax, eax
		mov	[ebp+var_48], eax
		jz	short loc_6FFCEDBB
		mov	eax, [eax+20h]
		lock dec dword ptr [eax+8]
		setnz	dl
		test	dl, dl
		jz	loc_6FFCEE63

loc_6FFCED6D:				; CODE XREF: _ZN16DBusMenuImporterD1Ev+181j
		mov	edx, [ebp+var_48]
		mov	eax, [edx+1Ch]
		lock dec dword ptr [eax+8]
		setnz	dl
		test	dl, dl
		jz	loc_6FFCEE40

loc_6FFCED82:				; CODE XREF: _ZN16DBusMenuImporterD1Ev+15Ej
		mov	eax, [ebp+var_48]
		mov	[ebp+var_38], 3
		add	eax, 10h
		mov	[esp], eax
		call	ds:_ZN13QSignalMapperD1Ev
		mov	edx, [ebp+var_48]
		mov	eax, [edx+0Ch]
		test	eax, eax
		jz	short loc_6FFCEDAD
		lock dec dword ptr [eax+34h]
		setnz	dl
		test	dl, dl
		jz	short loc_6FFCEDE0

loc_6FFCEDAD:				; CODE XREF: _ZN16DBusMenuImporterD1Ev+A0j
					; _ZN16DBusMenuImporterD1Ev+139j
		mov	edx, [ebp+arg_0]
		mov	eax, [edx+8]
		mov	[esp], eax
		call	sub_6FFEAE50

loc_6FFCEDBB:				; CODE XREF: _ZN16DBusMenuImporterD1Ev+59j
		mov	eax, [ebp+arg_0]
		mov	[ebp+var_38], 0FFFFFFFFh
		mov	[esp], eax
		call	ds:_ZN7QObjectD2Ev
		lea	eax, [ebp+var_3C]
		mov	[esp], eax
		call	_Unwind_SjLj_Unregister
		leave
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6FFCEDE0:				; CODE XREF: _ZN16DBusMenuImporterD1Ev+ABj
		mov	eax, [ebp+var_48]
		mov	eax, [eax+0Ch]
		mov	edx, eax
		mov	[ebp+var_4C], eax
		mov	eax, [eax+4]
		cmp	edx, eax
		jz	short loc_6FFCEE1E
		mov	edx, ds:_ZN11QMetaObject11removeGuardEPP7QObject
		mov	[ebp+var_40], edx
		nop
		lea	esi, [esi+0]

loc_6FFCEE00:				; CODE XREF: _ZN16DBusMenuImporterD1Ev+11Cj
		mov	edx, [eax+4]
		sub	eax, 4
		mov	[esp], eax
		mov	[ebp+var_38], 4
		mov	[ebp+var_44], edx
		call	[ebp+var_40]
		mov	eax, [ebp+var_44]
		cmp	[ebp+var_4C], eax
		jnz	short loc_6FFCEE00

loc_6FFCEE1E:				; CODE XREF: _ZN16DBusMenuImporterD1Ev+F0j
		mov	edx, [ebp+var_4C]
		mov	dword ptr [esp+4], 8
		mov	[ebp+var_38], 4
		mov	[esp], edx
		call	ds:_ZN8QMapData16continueFreeDataEi
		jmp	loc_6FFCEDAD
; ---------------------------------------------------------------------------
		align 10h

loc_6FFCEE40:				; CODE XREF: _ZN16DBusMenuImporterD1Ev+7Cj
		mov	edx, [ebp+var_48]
		mov	dword ptr [esp+4], offset nullsub_1
		mov	eax, [edx+1Ch]
		mov	[ebp+var_38], 2
		mov	[esp], eax
		call	ds:_ZN9QHashData11free_helperEPFvPNS_4NodeEE
		jmp	loc_6FFCED82
; ---------------------------------------------------------------------------

loc_6FFCEE63:				; CODE XREF: _ZN16DBusMenuImporterD1Ev+67j
		mov	edx, [ebp+var_48]
		mov	dword ptr [esp+4], offset nullsub_1
		mov	eax, [edx+20h]
		mov	[ebp+var_38], 1
		mov	[esp], eax
		call	ds:_ZN9QHashData11free_helperEPFvPNS_4NodeEE
		jmp	loc_6FFCED6D
_ZN16DBusMenuImporterD1Ev endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn

sub_6FFCEE86	proc near		; DATA XREF: _ZN16DBusMenuImporterD1Ev+20o

arg_0		= dword	ptr  4

		add	ebp, 8
		mov	eax, [ebp-38h]
		mov	edx, [ebp-34h]
		cmp	eax, 1
		mov	[ebp-54h], edx
		jz	short loc_6FFCEEB6
		cmp	eax, 2
		jz	short loc_6FFCEECC
		cmp	eax, 3
		jz	short loc_6FFCEF0B
		mov	eax, [ebp-48h]
		mov	dword ptr [ebp-38h], 0
		add	eax, 1Ch
		mov	[esp+0], eax
		call	sub_6FFE4A20

loc_6FFCEEB6:				; CODE XREF: sub_6FFCEE86+Fj
		mov	eax, [ebp-48h]
		mov	dword ptr [ebp-38h], 0
		add	eax, 10h
		mov	[esp+0], eax
		call	ds:_ZN13QSignalMapperD1Ev

loc_6FFCEECC:				; CODE XREF: sub_6FFCEE86+14j
		mov	eax, [ebp-54h]
		mov	edx, [ebp-48h]
		mov	[ebp-50h], eax
		mov	eax, [edx+0Ch]
		test	eax, eax
		jz	short loc_6FFCEF05
		lock dec dword ptr [eax+34h]
		setnz	dl
		test	dl, dl
		jnz	short loc_6FFCEF05
		mov	edx, [ebp-48h]
		mov	eax, [edx+0Ch]
		mov	dword ptr [ebp-38h], 0
		mov	[esp+arg_0], eax
		mov	eax, edx
		add	eax, 0Ch
		mov	[esp+0], eax
		call	sub_6FFE4850

loc_6FFCEF05:				; CODE XREF: sub_6FFCEE86+54j
					; sub_6FFCEE86+5Fj
		mov	eax, [ebp-50h]
		mov	[ebp-54h], eax

loc_6FFCEF0B:				; CODE XREF: sub_6FFCEE86+19j
		mov	eax, [ebp+8]
		mov	dword ptr [ebp-38h], 0
		mov	[esp+0], eax
		call	ds:_ZN7QObjectD2Ev
		mov	edx, [ebp-54h]
		mov	dword ptr [ebp-38h], 0FFFFFFFFh
		mov	[esp+0], edx
		call	_Unwind_SjLj_Resume
sub_6FFCEE86	endp

; Exported entry  34. _ZN16DBusMenuImporter27slotItemActivationRequestedEij

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public _ZN16DBusMenuImporter27slotItemActivationRequestedEij
_ZN16DBusMenuImporter27slotItemActivationRequestedEij proc near
					; CODE XREF: _ZN16DBusMenuImporter18qt_static_metacallEP7QObjectN11QMetaObject4CallEiPPv+EDj

var_78		= dword	ptr -78h
var_74		= dword	ptr -74h
var_70		= dword	ptr -70h
var_6C		= byte ptr -6Ch
var_68		= dword	ptr -68h
var_54		= dword	ptr -54h
var_50		= dword	ptr -50h
var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= byte ptr -18h
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		lea	eax, [ebp+var_18]
		sub	esp, 8Ch
		mov	[ebp+var_4C], eax
		lea	eax, [ebp+var_6C]
		mov	[esp], eax
		mov	[ebp+var_54], offset sub_6FFEC1F0
		mov	[ebp+var_50], offset dword_6FFECF80
		mov	[ebp+var_48], offset sub_6FFCF157
		mov	[ebp+var_44], esp
		call	_Unwind_SjLj_Register
		mov	edx, [ebp+arg_0]
		mov	eax, [edx+8]
		mov	esi, [eax+0Ch]
		mov	edx, [esi+3Ch]
		test	edx, edx
		jz	short loc_6FFCEF80
		mov	edx, [esi+38h]
		test	edx, edx
		jns	loc_6FFCF0A0

loc_6FFCEF80:				; CODE XREF: _ZN16DBusMenuImporter27slotItemActivationRequestedEij+43j
					; _ZN16DBusMenuImporter27slotItemActivationRequestedEij+192j ...
		lea	eax, [ebp+var_1C]
		mov	[ebp+var_1C], 0
		mov	[esp], eax
		mov	[ebp+var_68], 0FFFFFFFFh
		call	ds:_ZN11QMetaObject11removeGuardEPP7QObject

loc_6FFCEF9A:				; CODE XREF: _ZN16DBusMenuImporter27slotItemActivationRequestedEij+1D4j
		mov	dword ptr [esp], 18h ; size_t
		mov	[ebp+var_68], 0FFFFFFFFh
		call	sub_6FFEAE70
		mov	[ebp+var_24], 2
		mov	[ebp+var_68], 1
		mov	[ebp+var_74], eax
		lea	eax, [ebp+var_24]
		mov	edi, [ebp+var_74]
		mov	[esp+8], eax
		mov	eax, [ebp+var_74]
		mov	[esp], edi
		add	eax, 8
		mov	[esp+4], eax
		call	ds:_ZN11QTextStreamC1EP7QString6QFlagsIN9QIODevice12OpenModeFlagEE
		mov	eax, ds:_ZN7QString11shared_nullE
		mov	[edi+8], eax
		lock inc dword ptr [eax]
		setnz	dl
		mov	dword ptr [edi+0Ch], 1
		lea	eax, [ebp+var_20]
		mov	dword ptr [edi+10h], 1
		mov	byte ptr [edi+15h], 1
		mov	byte ptr [edi+14h], 0
		mov	[ebp+var_20], edi
		mov	dword ptr [esp+4], offset a31m_1 ; "\x1B[31m"
		mov	[esp], eax
		mov	[ebp+var_68], 2
		call	sub_6FFE9FF0
		mov	dword ptr [esp+4], offset aVoidDbusmenuim ; "void DBusMenuImporter::slotItemActivati"...
		mov	[esp], eax
		mov	[ebp+var_68], 2
		call	sub_6FFE9FF0
		mov	dword ptr [esp+4], offset a0m_1	; "\x1B[0m:"
		mov	[esp], eax
		call	sub_6FFE9FF0
		mov	edi, eax
		mov	[ebp+var_78], eax
		mov	eax, [eax]
		mov	byte ptr [eax+14h], 1
		mov	dword ptr [esp+4], 20h
		mov	eax, [edi]
		mov	[esp], eax
		call	ds:_ZN11QTextStreamlsEc
		mov	dword ptr [esp+4], offset aConditionFai_5 ; "Condition failed: action"
		mov	[esp], edi
		call	sub_6FFE9FF0
		lea	eax, [ebp+var_20]
		mov	[esp], eax
		mov	[ebp+var_68], 0FFFFFFFFh
		call	sub_6FFE9DD0

loc_6FFCF083:				; CODE XREF: _ZN16DBusMenuImporter27slotItemActivationRequestedEij+217j
		lea	eax, [ebp+var_6C]
		mov	[esp], eax
		call	_Unwind_SjLj_Unregister
		add	esp, 8Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6FFCF0A0:				; CODE XREF: _ZN16DBusMenuImporter27slotItemActivationRequestedEij+4Aj
		mov	ebx, esi
		mov	ecx, esi

loc_6FFCF0A4:				; CODE XREF: _ZN16DBusMenuImporter27slotItemActivationRequestedEij+18Ej
					; _ZN16DBusMenuImporter27slotItemActivationRequestedEij+222j
		mov	eax, [ecx+edx*4+4]
		cmp	eax, ebx
		jz	short loc_6FFCF0B8
		mov	edi, [ebp+arg_4]
		cmp	[eax-8], edi
		jl	loc_6FFCF150

loc_6FFCF0B8:				; CODE XREF: _ZN16DBusMenuImporter27slotItemActivationRequestedEij+17Aj
		sub	edx, 1
		cmp	edx, 0FFFFFFFFh
		jnz	short loc_6FFCF0A4
		cmp	esi, eax
		jz	loc_6FFCEF80
		mov	ecx, [ebp+arg_4]
		lea	edx, [eax-8]
		cmp	[eax-8], ecx
		jg	loc_6FFCEF80
		mov	eax, [edx+4]
		lea	edi, [ebp+var_1C]
		mov	[esp], edi
		mov	[ebp+var_68], 0FFFFFFFFh
		mov	[ebp+var_1C], eax
		call	ds:_ZN11QMetaObject8addGuardEPP7QObject
		mov	eax, [ebp+var_1C]
		mov	[esp], edi
		mov	[ebp+var_70], eax
		call	ds:_ZN11QMetaObject11removeGuardEPP7QObject
		mov	eax, [ebp+var_70]
		test	eax, eax
		jz	loc_6FFCEF9A
		mov	edx, [ebp+var_70]
		lea	eax, [ebp+var_28]
		mov	ecx, [ebp+arg_0]
		mov	[ebp+var_2C], eax
		lea	eax, [ebp+var_30]
		mov	[ebp+var_30], 0
		mov	[ebp+var_28], edx
		mov	[esp+0Ch], eax
		mov	dword ptr [esp+8], 2
		mov	dword ptr [esp+4], offset _ZN16DBusMenuImporter16staticMetaObjectE
		mov	[esp], ecx
		mov	[ebp+var_68], 0FFFFFFFFh
		call	ds:_ZN11QMetaObject8activateEP7QObjectPKS_iPPv
		jmp	loc_6FFCF083
; ---------------------------------------------------------------------------
		align 10h

loc_6FFCF150:				; CODE XREF: _ZN16DBusMenuImporter27slotItemActivationRequestedEij+182j
		mov	ecx, eax
		jmp	loc_6FFCF0A4
_ZN16DBusMenuImporter27slotItemActivationRequestedEij endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn

sub_6FFCF157	proc near		; DATA XREF: _ZN16DBusMenuImporter27slotItemActivationRequestedEij+26o
		add	ebp, 18h
		mov	eax, [ebp-64h]
		cmp	dword ptr [ebp-68h], 1
		mov	[ebp-7Ch], eax
		jz	short loc_6FFCF183
		mov	edx, [ebp-74h]
		mov	[esp+0], edx
		call	sub_6FFEAE50
		mov	ecx, [ebp-7Ch]
		mov	dword ptr [ebp-68h], 0FFFFFFFFh
		mov	[esp+0], ecx
		call	_Unwind_SjLj_Resume
; ---------------------------------------------------------------------------

loc_6FFCF183:				; CODE XREF: sub_6FFCF157+Dj
		lea	eax, [ebp-20h]
		mov	[esp+0], eax
		mov	dword ptr [ebp-68h], 0
		call	sub_6FFE9DD0
		mov	eax, [ebp-7Ch]
		mov	dword ptr [ebp-68h], 0FFFFFFFFh
		mov	[esp+0], eax
		call	_Unwind_SjLj_Resume
sub_6FFCF157	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  45. _ZNK16DBusMenuImporter4menuEv

; =============== S U B	R O U T	I N E =======================================


		public _ZNK16DBusMenuImporter4menuEv
_ZNK16DBusMenuImporter4menuEv proc near

var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_3C		= dword	ptr -3Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4

		sub	esp, 4Ch
		mov	[esp+4Ch+var_C], esi
		mov	esi, [esp+4Ch+arg_0]
		mov	[esp+4Ch+var_10], ebx
		mov	[esp+4Ch+var_8], edi
		mov	[esp+4Ch+var_4], ebp
		mov	ebx, [esi+8]
		mov	eax, [ebx+8]
		test	eax, eax
		jz	short loc_6FFCF1E5

loc_6FFCF1D1:				; CODE XREF: _ZNK16DBusMenuImporter4menuEv+E2j
		mov	ebx, [esp+4Ch+var_10]
		mov	esi, [esp+4Ch+var_C]
		mov	edi, [esp+4Ch+var_8]
		mov	ebp, [esp+4Ch+var_4]
		add	esp, 4Ch
		retn
; ---------------------------------------------------------------------------

loc_6FFCF1E5:				; CODE XREF: _ZNK16DBusMenuImporter4menuEv+1Fj
		mov	eax, [ebx]
		mov	edx, [eax]
		mov	[esp+4Ch+var_48], 0
		mov	[esp+4Ch+var_4C], eax
		call	dword ptr [edx+30h]
		mov	edi, ds:_Z13qFlagLocationPKc
		mov	[esp+4Ch+var_4C], offset a1slotmenuabout ; "1slotMenuAboutToShow()"
		mov	ebp, eax
		call	edi ; _Z13qFlagLocationPKc
		mov	ecx, [ebx]
		mov	[esp+4Ch+var_4C], offset a2abouttoshow ; "2aboutToShow()"
		mov	[esp+4Ch+var_24], ecx
		mov	[esp+4Ch+var_28], eax
		call	edi ; _Z13qFlagLocationPKc
		mov	edx, [esp+4Ch+var_28]
		mov	ecx, [esp+4Ch+var_24]
		mov	[esp+4Ch+var_3C], 0
		mov	[esp+4Ch+var_4C], ebp
		mov	[esp+4Ch+var_40], edx
		mov	edx, ds:_ZN7QObject7connectEPKS_PKcS1_S3_N2Qt14ConnectionTypeE
		mov	[esp+4Ch+var_44], ecx
		mov	[esp+4Ch+var_48], eax
		mov	[esp+4Ch+var_28], edx
		call	edx ; _ZN7QObject7connectEPKS_PKcS1_S3_N2Qt14ConnectionTypeE
		mov	[esp+4Ch+var_4C], offset a1slotmenuabo_0 ; "1slotMenuAboutToHide()"
		call	edi ; _Z13qFlagLocationPKc
		mov	ecx, eax
		mov	eax, [ebx]
		mov	[esp+4Ch+var_24], ecx
		mov	[esp+4Ch+var_4C], offset a2abouttohide ; "2aboutToHide()"
		mov	[esp+4Ch+var_20], eax
		call	edi ; _Z13qFlagLocationPKc
		mov	ecx, [esp+4Ch+var_24]
		mov	edx, [esp+4Ch+var_28]
		mov	[esp+4Ch+var_3C], 0
		mov	[esp+4Ch+var_4C], ebp
		mov	[esp+4Ch+var_40], ecx
		mov	ecx, [esp+4Ch+var_20]
		mov	[esp+4Ch+var_48], eax
		mov	[esp+4Ch+var_44], ecx
		call	edx
		mov	eax, [esi+8]
		mov	[ebx+8], ebp
		mov	eax, [eax+8]
		jmp	loc_6FFCF1D1
_ZNK16DBusMenuImporter4menuEv endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  18. _ZN16DBusMenuImporter10updateMenuEv

; =============== S U B	R O U T	I N E =======================================


		public _ZN16DBusMenuImporter10updateMenuEv
_ZN16DBusMenuImporter10updateMenuEv proc near
					; CODE XREF: _ZN16DBusMenuImporter18qt_static_metacallEP7QObjectN11QMetaObject4CallEiPPv+183j

var_9C		= dword	ptr -9Ch
var_98		= dword	ptr -98h
var_94		= dword	ptr -94h
var_90		= dword	ptr -90h
var_8C		= dword	ptr -8Ch
var_88		= dword	ptr -88h
var_84		= dword	ptr -84h
var_80		= dword	ptr -80h
var_7C		= dword	ptr -7Ch
var_78		= dword	ptr -78h
var_74		= dword	ptr -74h
var_70		= dword	ptr -70h
var_6C		= dword	ptr -6Ch
var_68		= dword	ptr -68h
var_64		= dword	ptr -64h
var_60		= dword	ptr -60h
var_5C		= dword	ptr -5Ch
var_58		= dword	ptr -58h
var_54		= dword	ptr -54h
var_50		= dword	ptr -50h
var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_3C		= dword	ptr -3Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4

		sub	esp, 9Ch
		mov	[esp+9Ch+var_C], esi
		mov	esi, [esp+9Ch+arg_0]
		mov	[esp+9Ch+var_10], ebx
		mov	[esp+9Ch+var_8], edi
		mov	[esp+9Ch+var_4], ebp
		mov	ebx, [esi+8]
		mov	eax, [ebx+8]
		mov	byte ptr [ebx+24h], 1
		test	eax, eax
		jz	loc_6FFCF3C7

loc_6FFCF2DB:				; CODE XREF: _ZN16DBusMenuImporter10updateMenuEv+1D4j
		mov	[esp+9Ch+var_40], 0
		mov	[esp+9Ch+var_3C], 0
		mov	[esp+9Ch+var_48], 0
		mov	[esp+9Ch+var_44], 0
		mov	[esp+9Ch+var_50], 0
		mov	[esp+9Ch+var_4C], 0
		mov	[esp+9Ch+var_58], 0
		mov	[esp+9Ch+var_54], 0
		mov	[esp+9Ch+var_60], 0
		mov	[esp+9Ch+var_5C], 0
		mov	[esp+9Ch+var_68], 0
		mov	[esp+9Ch+var_64], 0
		mov	[esp+9Ch+var_70], 0
		mov	[esp+9Ch+var_6C], 0
		mov	[esp+9Ch+var_78], 0
		mov	[esp+9Ch+var_74], 0
		mov	[esp+9Ch+var_80], 0
		mov	[esp+9Ch+var_7C], 0
		mov	[esp+9Ch+var_88], 0
		mov	[esp+9Ch+var_84], 0
		mov	[esp+9Ch+var_90], 0
		mov	[esp+9Ch+var_8C], 0
		mov	[esp+9Ch+var_94], 0
		mov	[esp+9Ch+var_98], offset aAbouttoshow_0	; "aboutToShow"
		mov	[esp+9Ch+var_9C], eax
		call	ds:_ZN11QMetaObject12invokeMethodEP7QObjectPKcN2Qt14ConnectionTypeE22QGenericReturnArgument16QGenericArgumentS7_S7_S7_S7_S7_S7_S7_S7_S7_
		mov	ebx, [esp+9Ch+var_10]
		mov	esi, [esp+9Ch+var_C]
		mov	edi, [esp+9Ch+var_8]
		mov	ebp, [esp+9Ch+var_4]
		add	esp, 9Ch
		retn
; ---------------------------------------------------------------------------

loc_6FFCF3C7:				; CODE XREF: _ZN16DBusMenuImporter10updateMenuEv+35j
		mov	eax, [ebx]
		mov	edx, [eax]
		mov	[esp+9Ch+var_98], 0
		mov	[esp+9Ch+var_9C], eax
		call	dword ptr [edx+30h]
		mov	edi, ds:_Z13qFlagLocationPKc
		mov	[esp+9Ch+var_9C], offset a1slotmenuabout ; "1slotMenuAboutToShow()"
		mov	ebp, eax
		call	edi ; _Z13qFlagLocationPKc
		mov	ecx, [ebx]
		mov	[esp+9Ch+var_9C], offset a2abouttoshow ; "2aboutToShow()"
		mov	[esp+9Ch+var_24], ecx
		mov	[esp+9Ch+var_28], eax
		call	edi ; _Z13qFlagLocationPKc
		mov	edx, [esp+9Ch+var_28]
		mov	ecx, [esp+9Ch+var_24]
		mov	[esp+9Ch+var_8C], 0
		mov	[esp+9Ch+var_9C], ebp
		mov	[esp+9Ch+var_90], edx
		mov	edx, ds:_ZN7QObject7connectEPKS_PKcS1_S3_N2Qt14ConnectionTypeE
		mov	[esp+9Ch+var_94], ecx
		mov	[esp+9Ch+var_98], eax
		mov	[esp+9Ch+var_28], edx
		call	edx ; _ZN7QObject7connectEPKS_PKcS1_S3_N2Qt14ConnectionTypeE
		mov	[esp+9Ch+var_9C], offset a1slotmenuabo_0 ; "1slotMenuAboutToHide()"
		call	edi ; _Z13qFlagLocationPKc
		mov	ecx, eax
		mov	eax, [ebx]
		mov	[esp+9Ch+var_24], ecx
		mov	[esp+9Ch+var_9C], offset a2abouttohide ; "2aboutToHide()"
		mov	[esp+9Ch+var_20], eax
		call	edi ; _Z13qFlagLocationPKc
		mov	ecx, [esp+9Ch+var_24]
		mov	edx, [esp+9Ch+var_28]
		mov	[esp+9Ch+var_8C], 0
		mov	[esp+9Ch+var_9C], ebp
		mov	[esp+9Ch+var_90], ecx
		mov	ecx, [esp+9Ch+var_20]
		mov	[esp+9Ch+var_98], eax
		mov	[esp+9Ch+var_94], ecx
		call	edx
		mov	eax, [esi+8]
		mov	[ebx+8], ebp
		mov	eax, [eax+8]
		jmp	loc_6FFCF2DB
_ZN16DBusMenuImporter10updateMenuEv endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  35. _ZN16DBusMenuImporter31slotAboutToShowDBusCallFinishedEP23QDBusPendingCallWatcher

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public _ZN16DBusMenuImporter31slotAboutToShowDBusCallFinishedEP23QDBusPendingCallWatcher
_ZN16DBusMenuImporter31slotAboutToShowDBusCallFinishedEP23QDBusPendingCallWatcher proc near
					; CODE XREF: _ZN16DBusMenuImporter18qt_static_metacallEP7QObjectN11QMetaObject4CallEiPPv+10Ej

var_104		= dword	ptr -104h
var_100		= dword	ptr -100h
var_FC		= dword	ptr -0FCh
var_F5		= byte ptr -0F5h
var_F4		= dword	ptr -0F4h
var_F0		= dword	ptr -0F0h
var_EC		= dword	ptr -0ECh
var_E8		= dword	ptr -0E8h
var_E4		= dword	ptr -0E4h
var_E0		= dword	ptr -0E0h
var_DC		= dword	ptr -0DCh
var_D8		= dword	ptr -0D8h
var_D1		= byte ptr -0D1h
var_D0		= dword	ptr -0D0h
var_CC		= byte ptr -0CCh
var_C8		= dword	ptr -0C8h
var_B4		= dword	ptr -0B4h
var_B0		= dword	ptr -0B0h
var_AC		= dword	ptr -0ACh
var_A8		= dword	ptr -0A8h
var_A4		= dword	ptr -0A4h
var_90		= byte ptr -90h
var_80		= byte ptr -80h
var_7C		= dword	ptr -7Ch
var_78		= dword	ptr -78h
var_70		= byte ptr -70h
var_5C		= dword	ptr -5Ch
var_58		= dword	ptr -58h
var_54		= dword	ptr -54h
var_50		= dword	ptr -50h
var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_40		= byte ptr -40h
var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_19		= byte ptr -19h
var_18		= byte ptr -18h
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		lea	eax, [ebp+var_18]
		sub	esp, 11Ch
		mov	[ebp+var_AC], eax
		lea	eax, [ebp+var_CC]
		mov	[esp], eax
		mov	[ebp+var_A4], esp
		mov	[ebp+var_B4], offset sub_6FFEC1F0
		mov	[ebp+var_B0], offset word_6FFECFCE
		mov	[ebp+var_A8], offset sub_6FFD014F
		call	_Unwind_SjLj_Register
		mov	eax, ds:off_6FFF507C
		lea	ecx, [ebp+var_70]
		mov	edx, [ebp+arg_4]
		mov	[esp], ecx
		mov	[ebp+var_C8], 0FFFFFFFFh
		mov	[esp+8], eax
		mov	[esp+4], edx
		call	ds:_ZNK7QObject8propertyEPKc
		lea	eax, [ebp+var_70]
		mov	[ebp+var_C8], 11h
		sub	esp, 4
		mov	dword ptr [esp+4], 0
		mov	[esp], eax
		call	ds:_ZNK8QVariant5toIntEPb
		mov	[ebp+var_20], eax
		lea	eax, [ebp+var_70]
		mov	[esp], eax
		mov	[ebp+var_C8], 0FFFFFFFFh
		call	ds:_ZN8QVariantD1Ev
		lea	edx, [ebp+var_24]
		mov	[esp], edx
		call	ds:_ZN21QDBusPendingReplyDataC2Ev
		mov	eax, [ebp+arg_4]
		lea	ecx, [ebp+var_24]
		mov	[esp], ecx
		mov	[ebp+var_C8], 9
		add	eax, 8
		mov	[esp+4], eax
		call	ds:_ZN21QDBusPendingReplyData6assignERK16QDBusPendingCall
		mov	esi, [ebp+var_24]
		test	esi, esi
		jz	short loc_6FFCF57C
		lea	eax, [ebp+var_3C]
		mov	[esp+8], eax
		lea	eax, [ebp+var_24]
		mov	[ebp+var_3C], 1
		mov	dword ptr [esp+4], 1
		mov	[esp], eax
		call	ds:_ZN21QDBusPendingReplyData12setMetaTypesEiPKi

loc_6FFCF57C:				; CODE XREF: _ZN16DBusMenuImporter31slotAboutToShowDBusCallFinishedEP23QDBusPendingCallWatcher+D8j
		lea	eax, [ebp+var_24]
		mov	[esp], eax
		mov	[ebp+var_C8], 10h
		call	ds:_ZNK16QDBusPendingCall7isErrorEv
		test	al, al
		jz	loc_6FFCF8C2
		lea	eax, [ebp+var_80]
		lea	edx, [ebp+var_24]
		mov	[esp+4], edx
		mov	[esp], eax
		mov	[ebp+var_C8], 10h
		call	ds:_ZNK16QDBusPendingCall5errorEv
		sub	esp, 4
		lea	eax, [ebp+var_2C]
		lea	edx, [ebp+var_80]
		mov	[esp+4], edx
		mov	[esp], eax
		mov	[ebp+var_C8], 0Fh
		call	ds:_ZNK10QDBusError7messageEv
		sub	esp, 4
		mov	dword ptr [esp], 18h ; size_t
		mov	[ebp+var_C8], 0Eh
		call	sub_6FFEAE70
		mov	[ebp+var_D0], eax
		lea	eax, [ebp+var_44]
		mov	ecx, [ebp+var_D0]
		mov	[esp+8], eax
		mov	eax, [ebp+var_D0]
		mov	[ebp+var_44], 2
		mov	[ebp+var_C8], 6
		mov	[esp], ecx
		add	eax, 8
		mov	[esp+4], eax
		call	ds:_ZN11QTextStreamC1EP7QString6QFlagsIN9QIODevice12OpenModeFlagEE
		mov	edx, [ebp+var_D0]
		mov	eax, ds:_ZN7QString11shared_nullE
		mov	[edx+8], eax
		lock inc dword ptr [eax]
		setnz	dl
		mov	ecx, [ebp+var_D0]
		lea	eax, [ebp+var_48]
		mov	dword ptr [ecx+0Ch], 1
		mov	dword ptr [ecx+10h], 1
		mov	byte ptr [ecx+15h], 1
		mov	[ebp+var_28], ecx
		mov	byte ptr [ecx+14h], 0
		mov	dword ptr [esp+8], 0FFFFFFFFh
		mov	dword ptr [esp+4], offset a31m_1 ; "\x1B[31m"
		mov	[esp], eax
		mov	[ebp+var_C8], 0Dh
		call	ds:_ZN7QString9fromAsciiEPKci
		sub	esp, 4
		lea	eax, [ebp+var_48]
		mov	[esp+4], eax
		mov	eax, [ebp+var_28]
		mov	[ebp+var_C8], 5
		mov	[esp], eax
		call	ds:_ZN11QTextStreamlsERK7QString
		mov	eax, [ebp+var_48]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jz	loc_6FFCFBF0
		mov	eax, [ebp+var_28]
		cmp	byte ptr [eax+14h], 0
		jnz	loc_6FFCFC13

loc_6FFCF6C1:				; CODE XREF: _ZN16DBusMenuImporter31slotAboutToShowDBusCallFinishedEP23QDBusPendingCallWatcher+78Dj
					; _ZN16DBusMenuImporter31slotAboutToShowDBusCallFinishedEP23QDBusPendingCallWatcher+7AEj
		lea	eax, [ebp+var_4C]
		mov	dword ptr [esp+8], 0FFFFFFFFh
		mov	dword ptr [esp+4], offset aVoidDbusmenu_2 ; "void DBusMenuImporter::slotAboutToShowD"...
		mov	[esp], eax
		mov	[ebp+var_C8], 0Dh
		call	ds:_ZN7QString9fromAsciiEPKci
		sub	esp, 4
		lea	eax, [ebp+var_4C]
		mov	[esp+4], eax
		mov	eax, [ebp+var_28]
		mov	[ebp+var_C8], 4
		mov	[esp], eax
		call	ds:_ZN11QTextStreamlsERK7QString
		mov	eax, [ebp+var_4C]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jz	loc_6FFCFC33
		mov	eax, [ebp+var_28]
		cmp	byte ptr [eax+14h], 0
		jnz	loc_6FFCFC56

loc_6FFCF725:				; CODE XREF: _ZN16DBusMenuImporter31slotAboutToShowDBusCallFinishedEP23QDBusPendingCallWatcher+7D0j
					; _ZN16DBusMenuImporter31slotAboutToShowDBusCallFinishedEP23QDBusPendingCallWatcher+7F1j
		lea	eax, [ebp+var_50]
		mov	dword ptr [esp+8], 0FFFFFFFFh
		mov	dword ptr [esp+4], offset a0m_1	; "\x1B[0m:"
		mov	[esp], eax
		mov	[ebp+var_C8], 0Dh
		call	ds:_ZN7QString9fromAsciiEPKci
		sub	esp, 4
		lea	eax, [ebp+var_50]
		mov	[esp+4], eax
		mov	eax, [ebp+var_28]
		mov	[ebp+var_C8], 3
		mov	[esp], eax
		call	ds:_ZN11QTextStreamlsERK7QString
		mov	eax, [ebp+var_50]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jz	loc_6FFCFC76
		mov	eax, [ebp+var_28]
		cmp	byte ptr [eax+14h], 0
		jnz	loc_6FFCFC99

loc_6FFCF789:				; CODE XREF: _ZN16DBusMenuImporter31slotAboutToShowDBusCallFinishedEP23QDBusPendingCallWatcher+813j
					; _ZN16DBusMenuImporter31slotAboutToShowDBusCallFinishedEP23QDBusPendingCallWatcher+837j
		mov	byte ptr [eax+14h], 1
		mov	eax, [ebp+var_28]
		mov	dword ptr [esp+4], 20h
		mov	[ebp+var_C8], 0Dh
		mov	[esp], eax
		call	ds:_ZN11QTextStreamlsEc
		lea	eax, [ebp+var_54]
		mov	dword ptr [esp+8], 0FFFFFFFFh
		mov	dword ptr [esp+4], offset aCallToAbouttos ; "Call to AboutToShow() failed:"
		mov	[esp], eax
		call	ds:_ZN7QString9fromAsciiEPKci
		sub	esp, 4
		lea	eax, [ebp+var_54]
		mov	[esp+4], eax
		mov	eax, [ebp+var_28]
		mov	[ebp+var_C8], 2
		mov	[esp], eax
		call	ds:_ZN11QTextStreamlsERK7QString
		mov	eax, [ebp+var_54]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jz	loc_6FFCFCC0
		mov	eax, [ebp+var_28]
		cmp	byte ptr [eax+14h], 0
		jnz	loc_6FFCFCE3

loc_6FFCF805:				; CODE XREF: _ZN16DBusMenuImporter31slotAboutToShowDBusCallFinishedEP23QDBusPendingCallWatcher+85Dj
					; _ZN16DBusMenuImporter31slotAboutToShowDBusCallFinishedEP23QDBusPendingCallWatcher+881j
		mov	dword ptr [esp+4], 22h
		mov	[esp], eax
		mov	[ebp+var_C8], 0Dh
		call	ds:_ZN11QTextStreamlsEc
		lea	edx, [ebp+var_2C]
		mov	[esp+4], edx
		mov	[esp], eax
		call	ds:_ZN11QTextStreamlsERK7QString
		mov	dword ptr [esp+4], 22h
		mov	[esp], eax
		call	ds:_ZN11QTextStreamlsEc
		mov	eax, [ebp+var_28]
		cmp	byte ptr [eax+14h], 0
		jnz	loc_6FFCFD06

loc_6FFCF84E:				; CODE XREF: _ZN16DBusMenuImporter31slotAboutToShowDBusCallFinishedEP23QDBusPendingCallWatcher+897j
		lea	eax, [ebp+var_28]
		mov	[esp], eax
		mov	[ebp+var_C8], 0Eh
		call	sub_6FFE9DD0
		mov	eax, [ebp+var_2C]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jz	loc_6FFCFD20

loc_6FFCF874:				; CODE XREF: _ZN16DBusMenuImporter31slotAboutToShowDBusCallFinishedEP23QDBusPendingCallWatcher+8B6j
		mov	eax, [ebp+var_78]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jz	loc_6FFCFD40

loc_6FFCF885:				; CODE XREF: _ZN16DBusMenuImporter31slotAboutToShowDBusCallFinishedEP23QDBusPendingCallWatcher+8D6j
		mov	eax, [ebp+var_7C]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jz	loc_6FFCFBD0

loc_6FFCF896:				; CODE XREF: _ZN16DBusMenuImporter31slotAboutToShowDBusCallFinishedEP23QDBusPendingCallWatcher+6A6j
					; _ZN16DBusMenuImporter31slotAboutToShowDBusCallFinishedEP23QDBusPendingCallWatcher+74Aj ...
		lea	eax, [ebp+var_24]
		mov	[esp], eax
		mov	[ebp+var_C8], 0FFFFFFFFh
		call	ds:_ZN21QDBusPendingReplyDataD2Ev
		lea	eax, [ebp+var_CC]
		mov	[esp], eax
		call	_Unwind_SjLj_Unregister
		lea	esp, [ebp-0Ch]
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_6FFCF8C2:				; CODE XREF: _ZN16DBusMenuImporter31slotAboutToShowDBusCallFinishedEP23QDBusPendingCallWatcher+114j
		lea	eax, [ebp+var_90]
		lea	edx, [ebp+var_24]
		mov	dword ptr [esp+8], 0
		mov	[esp+4], edx
		mov	[esp], eax
		mov	[ebp+var_C8], 10h
		call	ds:_ZNK21QDBusPendingReplyData10argumentAtEi
		sub	esp, 4
		lea	eax, [ebp+var_90]
		mov	[esp], eax
		mov	[ebp+var_C8], 8
		call	ds:_ZNK8QVariant8userTypeEv
		mov	[ebp+var_E4], eax
		mov	eax, dword_6FFF2AA0
		test	eax, eax
		jz	loc_6FFCFD60
		mov	eax, dword_6FFF2AA0
		cmp	[ebp+var_E4], eax
		jz	loc_6FFCFD93

loc_6FFCF92A:				; CODE XREF: _ZN16DBusMenuImporter31slotAboutToShowDBusCallFinishedEP23QDBusPendingCallWatcher+90Dj
		lea	eax, [ebp+var_90]
		mov	[esp], eax
		mov	[ebp+var_C8], 8
		call	ds:_ZNK8QVariant8userTypeEv
		cmp	eax, 1
		jz	loc_6FFCFE60
		mov	eax, ds:_ZN8QVariant7handlerE
		lea	edx, [ebp+var_19]
		mov	eax, [eax]
		mov	[esp+8], edx
		lea	edx, [ebp+var_90]
		mov	dword ptr [esp+0Ch], 0
		mov	dword ptr [esp+4], 1
		mov	[esp], edx
		mov	eax, [eax+18h]
		mov	[ebp+var_C8], 8
		call	eax
		movzx	edx, [ebp+var_19]
		cmp	al, 1
		sbb	eax, eax
		not	eax
		and	eax, edx
		mov	[ebp+var_D1], al

loc_6FFCF994:				; CODE XREF: _ZN16DBusMenuImporter31slotAboutToShowDBusCallFinishedEP23QDBusPendingCallWatcher+972j
					; _ZN16DBusMenuImporter31slotAboutToShowDBusCallFinishedEP23QDBusPendingCallWatcher+9F8j
		lea	eax, [ebp+var_90]
		mov	[esp], eax
		mov	[ebp+var_C8], 10h
		call	ds:_ZN8QVariantD1Ev
		mov	eax, [ebp+var_20]
		mov	ecx, [ebp+arg_0]
		test	eax, eax
		mov	edx, [ecx+8]
		jnz	loc_6FFCFEF0
		mov	edx, [edx]
		mov	eax, [edx+8]
		mov	[ebp+var_EC], edx
		mov	[ebp+var_E8], eax
		mov	edx, eax
		mov	eax, [eax+8]
		test	eax, eax
		jz	loc_6FFD00E1

loc_6FFCF9DC:				; CODE XREF: _ZN16DBusMenuImporter31slotAboutToShowDBusCallFinishedEP23QDBusPendingCallWatcher+B1Aj
		cmp	[ebp+var_D1], 0
		jz	loc_6FFCFE10

loc_6FFCF9E9:				; CODE XREF: _ZN16DBusMenuImporter31slotAboutToShowDBusCallFinishedEP23QDBusPendingCallWatcher+9D4j
		mov	eax, [ebp+arg_0]
		mov	eax, [eax+8]
		mov	[ebp+var_DC], eax
		mov	edx, [eax+1Ch]
		mov	[ebp+var_E0], edx
		mov	eax, [edx+8]
		cmp	eax, 1
		jz	short loc_6FFCFA66
		mov	dword ptr [esp+10h], 4
		mov	dword ptr [esp+0Ch], 8
		mov	dword ptr [esp+8], offset nullsub_1
		mov	dword ptr [esp+4], offset nullsub_2
		mov	[esp], edx
		mov	[ebp+var_C8], 10h
		call	ds:_ZN9QHashData14detach_helper2EPFvPNS_4NodeEPvEPFvS1_Eii
		mov	ecx, [ebp+var_DC]
		mov	[ebp+var_E0], eax
		mov	eax, [ecx+1Ch]
		lock dec dword ptr [eax+8]
		setnz	dl
		test	dl, dl
		jz	loc_6FFD00C8

loc_6FFCFA57:				; CODE XREF: _ZN16DBusMenuImporter31slotAboutToShowDBusCallFinishedEP23QDBusPendingCallWatcher+C5Cj
		mov	edx, [ebp+var_E0]
		mov	eax, [ebp+var_DC]
		mov	[eax+1Ch], edx

loc_6FFCFA66:				; CODE XREF: _ZN16DBusMenuImporter31slotAboutToShowDBusCallFinishedEP23QDBusPendingCallWatcher+584j
		mov	ecx, [ebp+var_20]
		mov	eax, [ebp+var_E0]
		mov	[ebp+var_F0], ecx
		mov	ebx, [eax+18h]
		test	ebx, ebx
		jz	loc_6FFCFDF7
		mov	eax, ecx
		xor	edx, edx
		div	ebx
		mov	eax, [ebp+var_E0]
		mov	eax, [eax+4]
		mov	ecx, edx
		shl	ecx, 2
		add	ecx, eax
		mov	[ebp+var_D8], ecx
		mov	eax, [ecx]
		cmp	eax, [ebp+var_E0]
		jz	short loc_6FFCFAB0
		mov	edx, [eax]
		test	edx, edx
		jz	loc_6FFD011B

loc_6FFCFAB0:				; CODE XREF: _ZN16DBusMenuImporter31slotAboutToShowDBusCallFinishedEP23QDBusPendingCallWatcher+624j
					; _ZN16DBusMenuImporter31slotAboutToShowDBusCallFinishedEP23QDBusPendingCallWatcher+CCAj
		mov	ecx, [ebp+var_DC]
		mov	edx, [ecx+1Ch]
		cmp	eax, edx
		jz	short loc_6FFCFADB
		mov	ecx, [ebp+var_F0]
		cmp	ecx, [eax+4]
		jz	short loc_6FFCFADB

loc_6FFCFAC8:				; CODE XREF: _ZN16DBusMenuImporter31slotAboutToShowDBusCallFinishedEP23QDBusPendingCallWatcher+653j
		mov	ebx, eax
		mov	eax, [eax]
		cmp	eax, edx
		jz	short loc_6FFCFAD5
		cmp	ecx, [eax+4]
		jnz	short loc_6FFCFAC8

loc_6FFCFAD5:				; CODE XREF: _ZN16DBusMenuImporter31slotAboutToShowDBusCallFinishedEP23QDBusPendingCallWatcher+64Ej
		mov	[ebp+var_D8], ebx

loc_6FFCFADB:				; CODE XREF: _ZN16DBusMenuImporter31slotAboutToShowDBusCallFinishedEP23QDBusPendingCallWatcher+63Bj
					; _ZN16DBusMenuImporter31slotAboutToShowDBusCallFinishedEP23QDBusPendingCallWatcher+646j ...
		mov	edx, [ebp+var_F0]
		mov	ecx, [ebp+var_D8]
		mov	[ebp+var_5C], edx
		mov	edx, [ebp+var_DC]
		mov	eax, [ecx]
		cmp	eax, [edx+1Ch]
		jz	loc_6FFCFE98

loc_6FFCFAFB:				; CODE XREF: _ZN16DBusMenuImporter31slotAboutToShowDBusCallFinishedEP23QDBusPendingCallWatcher+A6Aj
		mov	eax, [ebp+var_20]
		mov	ecx, [ebp+arg_0]
		mov	[esp+4], eax
		mov	eax, [ecx+8]
		mov	[ebp+var_C8], 10h
		mov	[esp], eax
		call	sub_6FFE2C60
		mov	edx, 0FA0h
		call	sub_6FFCCC80
		test	al, al
		jnz	loc_6FFCF896
		lea	eax, [ebp+var_38]
		mov	[esp], eax
		call	sub_6FFDF180
		mov	eax, [ebp+var_38]
		sub	esp, 4
		mov	byte ptr [eax+14h], 0
		lea	eax, [ebp+var_38]
		mov	dword ptr [esp+4], offset a31m_1 ; "\x1B[31m"
		mov	[esp], eax
		mov	[ebp+var_C8], 0Ah
		call	sub_6FFE9FF0
		mov	dword ptr [esp+4], offset aVoidDbusmenu_2 ; "void DBusMenuImporter::slotAboutToShowD"...
		mov	[esp], eax
		call	sub_6FFE9FF0
		mov	dword ptr [esp+4], offset a0m_1	; "\x1B[0m:"
		mov	[esp], eax
		call	sub_6FFE9FF0
		mov	[ebp+var_F4], eax
		mov	edx, eax
		mov	eax, [eax]
		mov	byte ptr [eax+14h], 1
		mov	dword ptr [esp+4], 20h
		mov	eax, [edx]
		mov	[esp], eax
		call	ds:_ZN11QTextStreamlsEc
		mov	ecx, [ebp+var_F4]
		mov	dword ptr [esp+4], offset aApplicationDid ; "Application did not refresh before	time"...
		mov	[esp], ecx
		call	sub_6FFE9FF0
		lea	eax, [ebp+var_38]
		mov	[esp], eax
		mov	[ebp+var_C8], 10h
		call	sub_6FFE9DD0
		jmp	loc_6FFCF896
; ---------------------------------------------------------------------------
		align 10h

loc_6FFCFBD0:				; CODE XREF: _ZN16DBusMenuImporter31slotAboutToShowDBusCallFinishedEP23QDBusPendingCallWatcher+410j
		mov	eax, [ebp+var_7C]
		mov	[ebp+var_C8], 10h
		mov	[esp], eax
		call	ds:_ZN7QString4freeEPNS_4DataE
		jmp	loc_6FFCF896
; ---------------------------------------------------------------------------
		align 10h

loc_6FFCFBF0:				; CODE XREF: _ZN16DBusMenuImporter31slotAboutToShowDBusCallFinishedEP23QDBusPendingCallWatcher+22Ej
		mov	eax, [ebp+var_48]
		mov	[ebp+var_C8], 0Dh
		mov	[esp], eax
		call	ds:_ZN7QString4freeEPNS_4DataE
		mov	eax, [ebp+var_28]
		cmp	byte ptr [eax+14h], 0
		jz	loc_6FFCF6C1

loc_6FFCFC13:				; CODE XREF: _ZN16DBusMenuImporter31slotAboutToShowDBusCallFinishedEP23QDBusPendingCallWatcher+23Bj
		mov	dword ptr [esp+4], 20h
		mov	[esp], eax
		mov	[ebp+var_C8], 0Dh
		call	ds:_ZN11QTextStreamlsEc
		jmp	loc_6FFCF6C1
; ---------------------------------------------------------------------------

loc_6FFCFC33:				; CODE XREF: _ZN16DBusMenuImporter31slotAboutToShowDBusCallFinishedEP23QDBusPendingCallWatcher+292j
		mov	eax, [ebp+var_4C]
		mov	[ebp+var_C8], 0Dh
		mov	[esp], eax
		call	ds:_ZN7QString4freeEPNS_4DataE
		mov	eax, [ebp+var_28]
		cmp	byte ptr [eax+14h], 0
		jz	loc_6FFCF725

loc_6FFCFC56:				; CODE XREF: _ZN16DBusMenuImporter31slotAboutToShowDBusCallFinishedEP23QDBusPendingCallWatcher+29Fj
		mov	dword ptr [esp+4], 20h
		mov	[esp], eax
		mov	[ebp+var_C8], 0Dh
		call	ds:_ZN11QTextStreamlsEc
		jmp	loc_6FFCF725
; ---------------------------------------------------------------------------

loc_6FFCFC76:				; CODE XREF: _ZN16DBusMenuImporter31slotAboutToShowDBusCallFinishedEP23QDBusPendingCallWatcher+2F6j
		mov	eax, [ebp+var_50]
		mov	[ebp+var_C8], 0Dh
		mov	[esp], eax
		call	ds:_ZN7QString4freeEPNS_4DataE
		mov	eax, [ebp+var_28]
		cmp	byte ptr [eax+14h], 0
		jz	loc_6FFCF789

loc_6FFCFC99:				; CODE XREF: _ZN16DBusMenuImporter31slotAboutToShowDBusCallFinishedEP23QDBusPendingCallWatcher+303j
		mov	dword ptr [esp+4], 20h
		mov	[esp], eax
		mov	[ebp+var_C8], 0Dh
		call	ds:_ZN11QTextStreamlsEc
		mov	eax, [ebp+var_28]
		jmp	loc_6FFCF789
; ---------------------------------------------------------------------------
		align 10h

loc_6FFCFCC0:				; CODE XREF: _ZN16DBusMenuImporter31slotAboutToShowDBusCallFinishedEP23QDBusPendingCallWatcher+372j
		mov	eax, [ebp+var_54]
		mov	[ebp+var_C8], 0Dh
		mov	[esp], eax
		call	ds:_ZN7QString4freeEPNS_4DataE
		mov	eax, [ebp+var_28]
		cmp	byte ptr [eax+14h], 0
		jz	loc_6FFCF805

loc_6FFCFCE3:				; CODE XREF: _ZN16DBusMenuImporter31slotAboutToShowDBusCallFinishedEP23QDBusPendingCallWatcher+37Fj
		mov	dword ptr [esp+4], 20h
		mov	[esp], eax
		mov	[ebp+var_C8], 0Dh
		call	ds:_ZN11QTextStreamlsEc
		mov	eax, [ebp+var_28]
		jmp	loc_6FFCF805
; ---------------------------------------------------------------------------

loc_6FFCFD06:				; CODE XREF: _ZN16DBusMenuImporter31slotAboutToShowDBusCallFinishedEP23QDBusPendingCallWatcher+3C8j
		mov	dword ptr [esp+4], 20h
		mov	[esp], eax
		call	ds:_ZN11QTextStreamlsEc
		jmp	loc_6FFCF84E
; ---------------------------------------------------------------------------
		align 10h

loc_6FFCFD20:				; CODE XREF: _ZN16DBusMenuImporter31slotAboutToShowDBusCallFinishedEP23QDBusPendingCallWatcher+3EEj
		mov	eax, [ebp+var_2C]
		mov	[ebp+var_C8], 0Fh
		mov	[esp], eax
		call	ds:_ZN7QString4freeEPNS_4DataE
		jmp	loc_6FFCF874
; ---------------------------------------------------------------------------
		align 10h

loc_6FFCFD40:				; CODE XREF: _ZN16DBusMenuImporter31slotAboutToShowDBusCallFinishedEP23QDBusPendingCallWatcher+3FFj
		mov	eax, [ebp+var_78]
		mov	[ebp+var_C8], 1
		mov	[esp], eax
		call	ds:_ZN7QString4freeEPNS_4DataE
		jmp	loc_6FFCF885
; ---------------------------------------------------------------------------
		align 10h

loc_6FFCFD60:				; CODE XREF: _ZN16DBusMenuImporter31slotAboutToShowDBusCallFinishedEP23QDBusPendingCallWatcher+493j
		mov	dword ptr [esp+8], offset sub_6FFDE9E0
		mov	dword ptr [esp+4], offset sub_6FFDDD70
		mov	dword ptr [esp], offset	aQdbusargument ; "QDBusArgument"
		call	ds:_ZN9QMetaType12registerTypeEPKcPFvPvEPFS2_PKvE
		mov	dword_6FFF2AA0,	eax
		mov	eax, dword_6FFF2AA0
		cmp	[ebp+var_E4], eax
		jnz	loc_6FFCF92A

loc_6FFCFD93:				; CODE XREF: _ZN16DBusMenuImporter31slotAboutToShowDBusCallFinishedEP23QDBusPendingCallWatcher+4A4j
		lea	eax, [ebp+var_40]
		lea	edx, [ebp+var_90]
		mov	[esp+4], edx
		mov	[esp], eax
		mov	[ebp+var_C8], 8
		call	sub_6FFDBE80
		sub	esp, 4
		lea	eax, [ebp+var_19]
		mov	[esp+4], eax
		lea	eax, [ebp+var_40]
		mov	[esp], eax
		mov	[ebp+var_C8], 7
		call	ds:_ZNK13QDBusArgumentrsERb
		movzx	ecx, [ebp+var_19]
		lea	eax, [ebp+var_40]
		mov	[esp], eax
		mov	[ebp+var_C8], 8
		mov	[ebp+var_D1], cl
		call	ds:_ZN13QDBusArgumentD1Ev
		jmp	loc_6FFCF994
; ---------------------------------------------------------------------------

loc_6FFCFDF7:				; CODE XREF: _ZN16DBusMenuImporter31slotAboutToShowDBusCallFinishedEP23QDBusPendingCallWatcher+5FAj
		mov	eax, [ebp+var_DC]
		add	eax, 1Ch
		mov	[ebp+var_D8], eax
		jmp	loc_6FFCFADB
; ---------------------------------------------------------------------------
		align 10h

loc_6FFCFE10:				; CODE XREF: _ZN16DBusMenuImporter31slotAboutToShowDBusCallFinishedEP23QDBusPendingCallWatcher+563j
		lea	edx, [ebp+var_34]
		mov	[esp+4], eax
		mov	[esp], edx
		mov	[ebp+var_C8], 0Bh
		call	ds:_ZNK7QWidget7actionsEv
		mov	eax, [ebp+var_34]
		sub	esp, 4
		mov	edx, [eax+0Ch]
		cmp	edx, [eax+8]
		setz	[ebp+var_F5]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jz	short loc_6FFCFE80

loc_6FFCFE47:				; CODE XREF: _ZN16DBusMenuImporter31slotAboutToShowDBusCallFinishedEP23QDBusPendingCallWatcher+A16j
		cmp	[ebp+var_F5], 0
		jz	loc_6FFCF896
		jmp	loc_6FFCF9E9
; ---------------------------------------------------------------------------
		align 10h

loc_6FFCFE60:				; CODE XREF: _ZN16DBusMenuImporter31slotAboutToShowDBusCallFinishedEP23QDBusPendingCallWatcher+4C6j
		lea	eax, [ebp+var_90]
		mov	[esp], eax
		call	ds:_ZNK8QVariant9constDataEv
		movzx	eax, byte ptr [eax]
		mov	[ebp+var_D1], al
		jmp	loc_6FFCF994
; ---------------------------------------------------------------------------
		align 10h

loc_6FFCFE80:				; CODE XREF: _ZN16DBusMenuImporter31slotAboutToShowDBusCallFinishedEP23QDBusPendingCallWatcher+9C5j
		mov	eax, [ebp+var_34]
		mov	[ebp+var_C8], 10h
		mov	[esp], eax
		call	ds:_Z5qFreePv
		jmp	short loc_6FFCFE47
; ---------------------------------------------------------------------------

loc_6FFCFE98:				; CODE XREF: _ZN16DBusMenuImporter31slotAboutToShowDBusCallFinishedEP23QDBusPendingCallWatcher+675j
		mov	edx, [eax+0Ch]
		cmp	edx, [eax+18h]
		jge	loc_6FFD0066

loc_6FFCFEA4:				; CODE XREF: _ZN16DBusMenuImporter31slotAboutToShowDBusCallFinishedEP23QDBusPendingCallWatcher+C3Cj
		mov	ecx, [ebp+var_DC]
		mov	dword ptr [esp+4], 4
		mov	eax, [ecx+1Ch]
		mov	[ebp+var_C8], 10h
		mov	[esp], eax
		call	ds:_ZN9QHashData12allocateNodeEi
		mov	edx, [ebp+var_F0]
		mov	[eax+4], edx
		mov	ecx, [ebp+var_D8]
		mov	edx, [ecx]
		mov	[eax], edx
		mov	[ecx], eax
		mov	edx, [ebp+var_DC]
		mov	eax, [edx+1Ch]
		add	dword ptr [eax+0Ch], 1
		jmp	loc_6FFCFAFB
; ---------------------------------------------------------------------------
		align 10h

loc_6FFCFEF0:				; CODE XREF: _ZN16DBusMenuImporter31slotAboutToShowDBusCallFinishedEP23QDBusPendingCallWatcher+538j
		mov	esi, [edx+0Ch]
		mov	ebx, [esi+3Ch]
		test	ebx, ebx
		jz	loc_6FFD0050
		mov	ecx, [esi+38h]
		test	ecx, ecx
		js	loc_6FFD0050
		mov	edi, esi
		mov	ebx, esi
		mov	[ebp+var_104], esi

loc_6FFCFF13:				; CODE XREF: _ZN16DBusMenuImporter31slotAboutToShowDBusCallFinishedEP23QDBusPendingCallWatcher+AAEj
					; _ZN16DBusMenuImporter31slotAboutToShowDBusCallFinishedEP23QDBusPendingCallWatcher+C43j
		mov	edx, [ebx+ecx*4+4]
		cmp	edi, edx
		jz	loc_6FFD0110
		cmp	eax, [edx-8]
		jg	loc_6FFD00C1

loc_6FFCFF28:				; CODE XREF: _ZN16DBusMenuImporter31slotAboutToShowDBusCallFinishedEP23QDBusPendingCallWatcher+C96j
		sub	ecx, 1
		cmp	ecx, 0FFFFFFFFh
		jnz	short loc_6FFCFF13
		cmp	esi, edx
		jz	loc_6FFD0050
		cmp	eax, [edx-8]
		lea	ecx, [edx-8]
		jl	loc_6FFD0050
		mov	eax, [ecx+4]
		mov	[ebp+var_C8], 10h
		mov	[ebp+var_58], eax
		lea	eax, [ebp+var_58]
		mov	[esp], eax
		call	ds:_ZN11QMetaObject8addGuardEPP7QObject
		mov	edx, [ebp+var_58]
		mov	[ebp+var_FC], edx

loc_6FFCFF69:				; CODE XREF: _ZN16DBusMenuImporter31slotAboutToShowDBusCallFinishedEP23QDBusPendingCallWatcher+BE1j
		lea	eax, [ebp+var_58]
		mov	[esp], eax
		mov	[ebp+var_C8], 10h
		call	ds:_ZN11QMetaObject11removeGuardEPP7QObject
		mov	ecx, [ebp+var_FC]
		test	ecx, ecx
		jz	short loc_6FFCFFA0
		mov	ecx, [ebp+var_FC]
		mov	[esp], ecx
		call	ds:_ZNK7QAction4menuEv

loc_6FFCFF98:				; CODE XREF: _ZN16DBusMenuImporter31slotAboutToShowDBusCallFinishedEP23QDBusPendingCallWatcher+C86j
		test	eax, eax
		jnz	loc_6FFCF9DC

loc_6FFCFFA0:				; CODE XREF: _ZN16DBusMenuImporter31slotAboutToShowDBusCallFinishedEP23QDBusPendingCallWatcher+B07j
		lea	eax, [ebp+var_30]
		mov	[esp], eax
		mov	[ebp+var_C8], 10h
		call	sub_6FFDF180
		mov	eax, [ebp+var_30]
		sub	esp, 4
		mov	byte ptr [eax+14h], 0
		lea	eax, [ebp+var_30]
		mov	dword ptr [esp+4], offset a31m_1 ; "\x1B[31m"
		mov	[esp], eax
		mov	[ebp+var_C8], 0Ch
		call	sub_6FFE9FF0
		mov	dword ptr [esp+4], offset aVoidDbusmenu_2 ; "void DBusMenuImporter::slotAboutToShowD"...
		mov	[esp], eax
		call	sub_6FFE9FF0
		mov	dword ptr [esp+4], offset a0m_1	; "\x1B[0m:"
		mov	[esp], eax
		call	sub_6FFE9FF0
		mov	[ebp+var_100], eax
		mov	edx, eax
		mov	eax, [eax]
		mov	byte ptr [eax+14h], 1
		mov	dword ptr [esp+4], 20h
		mov	eax, [edx]
		mov	[esp], eax
		call	ds:_ZN11QTextStreamlsEc
		mov	ecx, [ebp+var_100]
		mov	dword ptr [esp+4], offset aConditionFai_6 ; "Condition failed: menu"
		mov	[esp], ecx
		call	sub_6FFE9FF0
		lea	eax, [ebp+var_30]
		mov	[esp], eax
		mov	[ebp+var_C8], 10h
		call	sub_6FFE9DD0
		jmp	loc_6FFCF896
; ---------------------------------------------------------------------------
		align 10h

loc_6FFD0050:				; CODE XREF: _ZN16DBusMenuImporter31slotAboutToShowDBusCallFinishedEP23QDBusPendingCallWatcher+A78j
					; _ZN16DBusMenuImporter31slotAboutToShowDBusCallFinishedEP23QDBusPendingCallWatcher+A83j ...
		mov	[ebp+var_58], 0
		mov	[ebp+var_FC], 0
		jmp	loc_6FFCFF69
; ---------------------------------------------------------------------------

loc_6FFD0066:				; CODE XREF: _ZN16DBusMenuImporter31slotAboutToShowDBusCallFinishedEP23QDBusPendingCallWatcher+A1Ej
		movsx	edx, word ptr [eax+16h]
		mov	[esp], eax
		mov	[ebp+var_C8], 10h
		add	edx, 1
		mov	[esp+4], edx
		call	ds:_ZN9QHashData6rehashEi
		lea	eax, [ebp+var_5C]
		mov	[esp+8], eax
		lea	eax, [ebp+var_20]
		mov	[esp+4], eax
		mov	eax, [ebp+var_DC]
		mov	[ebp+var_C8], 10h
		add	eax, 1Ch
		mov	[esp], eax
		call	sub_6FFEAA30
		mov	ecx, [ebp+var_5C]
		mov	[ebp+var_D8], eax
		mov	[ebp+var_F0], ecx
		jmp	loc_6FFCFEA4
; ---------------------------------------------------------------------------

loc_6FFD00C1:				; CODE XREF: _ZN16DBusMenuImporter31slotAboutToShowDBusCallFinishedEP23QDBusPendingCallWatcher+AA2j
		mov	ebx, edx
		jmp	loc_6FFCFF13
; ---------------------------------------------------------------------------

loc_6FFD00C8:				; CODE XREF: _ZN16DBusMenuImporter31slotAboutToShowDBusCallFinishedEP23QDBusPendingCallWatcher+5D1j
		mov	dword ptr [esp+4], offset nullsub_1
		mov	eax, [ecx+1Ch]
		mov	[esp], eax
		call	ds:_ZN9QHashData11free_helperEPFvPNS_4NodeEE
		jmp	loc_6FFCFA57
; ---------------------------------------------------------------------------

loc_6FFD00E1:				; CODE XREF: _ZN16DBusMenuImporter31slotAboutToShowDBusCallFinishedEP23QDBusPendingCallWatcher+556j
		mov	dword ptr [esp+4], 0
		mov	[esp], edx
		call	sub_6FFE0380
		mov	ecx, [ebp+var_E8]
		mov	[ecx+8], eax
		mov	edx, [ebp+var_EC]
		mov	eax, [edx+8]
		mov	eax, [eax+8]
		jmp	loc_6FFCFF98
; ---------------------------------------------------------------------------
		align 10h

loc_6FFD0110:				; CODE XREF: _ZN16DBusMenuImporter31slotAboutToShowDBusCallFinishedEP23QDBusPendingCallWatcher+A99j
		mov	edx, [ebp+var_104]
		jmp	loc_6FFCFF28
; ---------------------------------------------------------------------------

loc_6FFD011B:				; CODE XREF: _ZN16DBusMenuImporter31slotAboutToShowDBusCallFinishedEP23QDBusPendingCallWatcher+62Aj
		mov	dword ptr [esp+8], 376h
		mov	dword ptr [esp+4], offset aRIncludeQtco_5 ; "R:/include/QtCore/qhash.h"
		mov	dword ptr [esp], offset	aNodeENodeNex_1	; "*node == e || (*node)->next"
		mov	[ebp+var_C8], 10h
		call	ds:_Z9qt_assertPKcS0_i
		mov	edx, [ebp+var_D8]
		mov	eax, [edx]
		jmp	loc_6FFCFAB0
_ZN16DBusMenuImporter31slotAboutToShowDBusCallFinishedEP23QDBusPendingCallWatcher endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn

sub_6FFD014F	proc near		; DATA XREF: _ZN16DBusMenuImporter31slotAboutToShowDBusCallFinishedEP23QDBusPendingCallWatcher+38o
		add	ebp, 18h
		mov	eax, [ebp-0C8h]
		mov	edx, [ebp-0C4h]
		cmp	eax, 1
		mov	[ebp-108h], edx
		jz	loc_6FFD031D
		cmp	eax, 2
		jz	loc_6FFD02D8
		cmp	eax, 3
		jz	loc_6FFD0334
		cmp	eax, 4
		jz	loc_6FFD02AC
		cmp	eax, 5
		nop
		lea	esi, [esi+0]
		jz	loc_6FFD026F
		cmp	eax, 6
		jz	loc_6FFD023E
		cmp	eax, 7
		jz	loc_6FFD0254
		cmp	eax, 8
		nop
		lea	esi, [esi+0]
		jz	short loc_6FFD0210
		cmp	eax, 9
		jz	loc_6FFD0368
		cmp	eax, 0Ah
		xchg	ax, ax
		jz	short loc_6FFD0210
		cmp	eax, 0Bh
		jz	loc_6FFD034E
		cmp	eax, 0Ch
		xchg	ax, ax
		jz	loc_6FFD02C1
		cmp	eax, 0Dh
		jz	loc_6FFD027D
		cmp	eax, 0Eh
		jz	loc_6FFD0292
		cmp	eax, 0Fh
		nop
		lea	esi, [esi+0]
		jz	short loc_6FFD0210
		cmp	eax, 10h
		jz	loc_6FFD02EF
		lea	eax, [ebp-7Ch]
		mov	[esp+0], eax
		mov	dword ptr [ebp-0C8h], 0
		call	sub_6FFEA140

loc_6FFD0210:				; CODE XREF: sub_6FFD014F+61j
					; sub_6FFD014F+71j ...
		lea	eax, [ebp-24h]
		mov	[esp+0], eax
		mov	dword ptr [ebp-0C8h], 0
		call	ds:_ZN21QDBusPendingReplyDataD2Ev
		mov	eax, [ebp-108h]
		mov	dword ptr [ebp-0C8h], 0FFFFFFFFh
		mov	[esp+0], eax
		call	_Unwind_SjLj_Resume
; ---------------------------------------------------------------------------

loc_6FFD023E:				; CODE XREF: sub_6FFD014F+4Aj
		lea	eax, [ebp-40h]
		mov	[esp+0], eax
		mov	dword ptr [ebp-0C8h], 0
		call	ds:_ZN13QDBusArgumentD1Ev

loc_6FFD0254:				; CODE XREF: sub_6FFD014F+53j
		lea	eax, [ebp-90h]
		mov	[esp+0], eax
		mov	dword ptr [ebp-0C8h], 0
		call	ds:_ZN8QVariantD1Ev
		jmp	short loc_6FFD0210
; ---------------------------------------------------------------------------

loc_6FFD026F:				; CODE XREF: sub_6FFD014F+41j
		mov	eax, [ebp-0D0h]
		mov	[esp+0], eax
		call	sub_6FFEAE50

loc_6FFD027D:				; CODE XREF: sub_6FFD014F+8Aj
					; sub_6FFD014F+187j
		lea	eax, [ebp-2Ch]
		mov	[esp+0], eax
		mov	dword ptr [ebp-0C8h], 0
		call	sub_6FFEA140

loc_6FFD0292:				; CODE XREF: sub_6FFD014F+93j
		lea	eax, [ebp-80h]
		mov	[esp+0], eax
		mov	dword ptr [ebp-0C8h], 0
		call	sub_6FFDF6D0
		jmp	loc_6FFD0210
; ---------------------------------------------------------------------------

loc_6FFD02AC:				; CODE XREF: sub_6FFD014F+33j
		lea	eax, [ebp-48h]
		mov	[esp+0], eax
		mov	dword ptr [ebp-0C8h], 0
		call	sub_6FFEA140

loc_6FFD02C1:				; CODE XREF: sub_6FFD014F+81j
					; sub_6FFD014F+19Ej ...
		lea	eax, [ebp-28h]
		mov	[esp+0], eax
		mov	dword ptr [ebp-0C8h], 0
		call	sub_6FFE9DD0
		jmp	short loc_6FFD027D
; ---------------------------------------------------------------------------

loc_6FFD02D8:				; CODE XREF: sub_6FFD014F+21j
		lea	eax, [ebp-50h]
		mov	[esp+0], eax
		mov	dword ptr [ebp-0C8h], 0
		call	sub_6FFEA140
		jmp	short loc_6FFD02C1
; ---------------------------------------------------------------------------

loc_6FFD02EF:				; CODE XREF: sub_6FFD014F+A6j
		lea	eax, [ebp-70h]
		mov	[esp+0], eax
		mov	dword ptr [ebp-0C8h], 0
		call	ds:_ZN8QVariantD1Ev
		mov	edx, [ebp-108h]
		mov	dword ptr [ebp-0C8h], 0FFFFFFFFh
		mov	[esp+0], edx
		call	_Unwind_SjLj_Resume
; ---------------------------------------------------------------------------

loc_6FFD031D:				; CODE XREF: sub_6FFD014F+18j
		lea	eax, [ebp-54h]
		mov	[esp+0], eax
		mov	dword ptr [ebp-0C8h], 0
		call	sub_6FFEA140
		jmp	short loc_6FFD02C1
; ---------------------------------------------------------------------------

loc_6FFD0334:				; CODE XREF: sub_6FFD014F+2Aj
		lea	eax, [ebp-4Ch]
		mov	[esp+0], eax
		mov	dword ptr [ebp-0C8h], 0
		call	sub_6FFEA140
		jmp	loc_6FFD02C1
; ---------------------------------------------------------------------------

loc_6FFD034E:				; CODE XREF: sub_6FFD014F+76j
		lea	eax, [ebp-30h]
		mov	[esp+0], eax
		mov	dword ptr [ebp-0C8h], 0
		call	sub_6FFE9DD0
		jmp	loc_6FFD0210
; ---------------------------------------------------------------------------

loc_6FFD0368:				; CODE XREF: sub_6FFD014F+66j
		lea	eax, [ebp-38h]
		mov	[esp+0], eax
		mov	dword ptr [ebp-0C8h], 0
		call	sub_6FFE9DD0
		jmp	loc_6FFD0210
sub_6FFD014F	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  29. _ZN16DBusMenuImporter19slotMenuAboutToShowEv

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public _ZN16DBusMenuImporter19slotMenuAboutToShowEv
_ZN16DBusMenuImporter19slotMenuAboutToShowEv proc near
					; CODE XREF: _ZN16DBusMenuImporter18qt_static_metacallEP7QObjectN11QMetaObject4CallEiPPv+143j

var_124		= dword	ptr -124h
var_120		= dword	ptr -120h
var_11C		= dword	ptr -11Ch
var_118		= dword	ptr -118h
var_114		= dword	ptr -114h
var_110		= dword	ptr -110h
var_10C		= byte ptr -10Ch
var_108		= dword	ptr -108h
var_F4		= dword	ptr -0F4h
var_F0		= dword	ptr -0F0h
var_EC		= dword	ptr -0ECh
var_E8		= dword	ptr -0E8h
var_E4		= dword	ptr -0E4h
var_D0		= byte ptr -0D0h
var_C0		= dword	ptr -0C0h
var_B8		= dword	ptr -0B8h
var_B0		= dword	ptr -0B0h
var_A8		= dword	ptr -0A8h
var_A0		= dword	ptr -0A0h
var_98		= dword	ptr -98h
var_90		= dword	ptr -90h
var_88		= dword	ptr -88h
var_80		= dword	ptr -80h
var_78		= dword	ptr -78h
var_70		= dword	ptr -70h
var_68		= dword	ptr -68h
var_60		= dword	ptr -60h
var_58		= dword	ptr -58h
var_50		= byte ptr -50h
var_40		= byte ptr -40h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= byte ptr -0Ch
var_8		= byte ptr -8
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 158h
		lea	eax, [ebp+var_8]
		mov	[ebp+var_EC], eax
		lea	eax, [ebp+var_10C]
		mov	[esp], eax
		mov	[ebp+var_F4], offset sub_6FFEC1F0
		mov	[ebp+var_F0], offset dword_6FFECFF4
		mov	[ebp+var_E8], offset sub_6FFD0CF4
		mov	[ebp+var_E4], esp
		call	_Unwind_SjLj_Register
		mov	edx, [ebp+arg_0]
		mov	[ebp+var_108], 0FFFFFFFFh
		mov	[esp], edx
		call	ds:_ZNK7QObject6senderEv
		mov	[esp+4], eax
		mov	eax, ds:_ZN5QMenu16staticMetaObjectE
		mov	[esp], eax
		call	ds:_ZNK11QMetaObject4castEP7QObject
		test	eax, eax
		mov	[ebp+var_114], eax
		jz	loc_6FFD0C80

loc_6FFD040A:				; CODE XREF: _ZN16DBusMenuImporter19slotMenuAboutToShowEv+90Dj
		mov	ecx, [ebp+var_114]
		mov	[ebp+var_108], 0FFFFFFFFh
		mov	[esp], ecx
		call	ds:_ZNK5QMenu10menuActionEv
		test	eax, eax
		mov	[ebp+var_11C], eax
		jz	loc_6FFD0CA2

loc_6FFD0431:				; CODE XREF: _ZN16DBusMenuImporter19slotMenuAboutToShowEv+92Fj
		mov	eax, ds:off_6FFF507C
		lea	ecx, [ebp+var_40]
		mov	edx, [ebp+var_11C]
		mov	[esp], ecx
		mov	[ebp+var_108], 0FFFFFFFFh
		mov	[esp+8], eax
		mov	[esp+4], edx
		call	ds:_ZNK7QObject8propertyEPKc
		lea	eax, [ebp+var_40]
		mov	[ebp+var_108], 17h
		sub	esp, 4
		mov	dword ptr [esp+4], 0
		mov	[esp], eax
		call	ds:_ZNK8QVariant5toIntEPb
		mov	[ebp+var_118], eax
		lea	eax, [ebp+var_40]
		mov	[esp], eax
		mov	[ebp+var_108], 0FFFFFFFFh
		call	ds:_ZN8QVariantD1Ev
		mov	eax, [ebp+var_B8]
		mov	edx, [ebp+var_118]
		mov	[ebp+var_C0], 0
		mov	[ebp+var_B0], 0
		and	eax, 0C0000000h
		mov	[ebp+var_B8], eax
		mov	eax, [ebp+var_A8]
		mov	byte ptr [ebp+var_B8+3], 80h
		mov	[ebp+var_A0], 0
		mov	[ebp+var_90], 0
		and	eax, 0C0000000h
		mov	[ebp+var_A8], eax
		mov	eax, [ebp+var_98]
		mov	byte ptr [ebp+var_A8+3], 80h
		mov	[ebp+var_80], 0
		mov	[ebp+var_70], 0
		and	eax, 0C0000000h
		mov	[ebp+var_98], eax
		mov	eax, [ebp+var_88]
		mov	byte ptr [ebp+var_98+3], 80h
		mov	[ebp+var_60], 0
		mov	[esp+4], edx
		and	eax, 0C0000000h
		mov	[ebp+var_88], eax
		mov	eax, [ebp+var_78]
		mov	byte ptr [ebp+var_88+3], 80h
		mov	[ebp+var_108], 16h
		and	eax, 0C0000000h
		mov	[ebp+var_78], eax
		mov	eax, [ebp+var_68]
		mov	byte ptr [ebp+var_78+3], 80h
		and	eax, 0C0000000h
		mov	[ebp+var_68], eax
		mov	eax, [ebp+var_58]
		mov	byte ptr [ebp+var_68+3], 80h
		and	eax, 0C0000000h
		mov	[ebp+var_58], eax
		lea	eax, [ebp+var_50]
		mov	byte ptr [ebp+var_58+3], 80h
		mov	[esp], eax
		call	ds:_ZN8QVariantC1Ei
		mov	dword ptr [esp+4], 0FFFFFFFFh
		mov	dword ptr [esp], offset	aAbouttoshow_1 ; "AboutToShow"
		mov	[ebp+var_108], 15h
		call	ds:_ZN7QString16fromAscii_helperEPKci
		lea	edx, [ebp+var_C0]
		mov	ecx, [ebp+arg_0]
		mov	[esp+28h], edx
		lea	edx, [ebp+var_B0]
		mov	[esp+24h], edx
		lea	edx, [ebp+var_A0]
		mov	[esp+20h], edx
		lea	edx, [ebp+var_90]
		mov	[esp+1Ch], edx
		lea	edx, [ebp+var_80]
		mov	[esp+18h], edx
		lea	edx, [ebp+var_70]
		mov	[esp+14h], edx
		lea	edx, [ebp+var_60]
		mov	[esp+10h], edx
		lea	edx, [ebp+var_50]
		mov	[esp+0Ch], edx
		lea	edx, [ebp+var_10]
		mov	[esp+8], edx
		mov	edx, [ecx+8]
		mov	[ebp+var_10], eax
		lea	eax, [ebp+var_C]
		mov	edx, [edx+4]
		mov	[esp], eax
		mov	[ebp+var_108], 14h
		mov	[esp+4], edx
		call	ds:_ZN22QDBusAbstractInterface9asyncCallERK7QStringRK8QVariantS5_S5_S5_S5_S5_S5_S5_
		sub	esp, 4
		mov	eax, [ebp+var_10]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jz	loc_6FFD08B3

loc_6FFD0625:				; CODE XREF: _ZN16DBusMenuImporter19slotMenuAboutToShowEv+539j
		lea	eax, [ebp+var_50]
		mov	[esp], eax
		mov	[ebp+var_108], 12h
		call	ds:_ZN8QVariantD1Ev
		lea	eax, [ebp+var_60]
		mov	[esp], eax
		mov	[ebp+var_108], 11h
		call	ds:_ZN8QVariantD1Ev
		lea	eax, [ebp+var_70]
		mov	[esp], eax
		mov	[ebp+var_108], 10h
		call	ds:_ZN8QVariantD1Ev
		lea	eax, [ebp+var_80]
		mov	[esp], eax
		mov	[ebp+var_108], 0Fh
		call	ds:_ZN8QVariantD1Ev
		lea	eax, [ebp+var_90]
		mov	[esp], eax
		mov	[ebp+var_108], 0Eh
		call	ds:_ZN8QVariantD1Ev
		lea	eax, [ebp+var_A0]
		mov	[esp], eax
		mov	[ebp+var_108], 0Dh
		call	ds:_ZN8QVariantD1Ev
		lea	eax, [ebp+var_B0]
		mov	[esp], eax
		mov	[ebp+var_108], 0Ch
		call	ds:_ZN8QVariantD1Ev
		lea	eax, [ebp+var_C0]
		mov	[esp], eax
		mov	[ebp+var_108], 0Bh
		call	ds:_ZN8QVariantD1Ev
		mov	dword ptr [esp], 0Ch ; size_t
		call	sub_6FFEAE70
		mov	[ebp+var_110], eax
		mov	edx, [ebp+arg_0]
		lea	eax, [ebp+var_C]
		mov	ecx, [ebp+var_110]
		mov	[esp+4], eax
		mov	[ebp+var_108], 0Ah
		mov	[esp+8], edx
		mov	[esp], ecx
		call	ds:_ZN23QDBusPendingCallWatcherC1ERK16QDBusPendingCallP7QObject
		mov	edx, [ebp+var_118]
		lea	eax, [ebp+var_D0]
		mov	[esp], eax
		mov	[ebp+var_108], 0Bh
		mov	[esp+4], edx
		call	ds:_ZN8QVariantC1Ei
		lea	eax, [ebp+var_D0]
		mov	ecx, ds:off_6FFF507C
		mov	[esp+8], eax
		mov	eax, [ebp+var_110]
		mov	[ebp+var_108], 9
		mov	[esp+4], ecx
		mov	[esp], eax
		call	ds:_ZN7QObject11setPropertyEPKcRK8QVariant
		lea	eax, [ebp+var_D0]
		mov	[esp], eax
		mov	[ebp+var_108], 0Bh
		call	ds:_ZN8QVariantD1Ev
		mov	dword ptr [esp], offset	a1slotabouttosh	; "1slotAboutToShowDBusCallFinished(QDBusP"...
		call	ds:_Z13qFlagLocationPKc
		mov	[ebp+var_124], eax
		mov	dword ptr [esp], offset	a2finishedQdbus	; "2finished(QDBusPendingCallWatcher*)"
		call	ds:_Z13qFlagLocationPKc
		mov	edx, [ebp+var_124]
		mov	ecx, [ebp+arg_0]
		mov	[esp+4], eax
		mov	eax, [ebp+var_110]
		mov	dword ptr [esp+10h], 0
		mov	[esp+0Ch], edx
		mov	[esp+8], ecx
		mov	[esp], eax
		call	ds:_ZN7QObject7connectEPKS_PKcS1_S3_N2Qt14ConnectionTypeE
		mov	edx, [ebp+arg_0]
		lea	eax, [ebp+var_14]
		mov	[esp], eax
		mov	[ebp+var_14], edx
		call	ds:_ZN11QMetaObject8addGuardEPP7QObject
		mov	eax, [ebp+var_110]
		mov	edx, 0BB8h
		mov	[ebp+var_108], 8
		call	sub_6FFCCC80
		test	al, al
		jz	loc_6FFD08E8

loc_6FFD0803:				; CODE XREF: _ZN16DBusMenuImporter19slotMenuAboutToShowEv+786j
		mov	eax, [ebp+var_14]
		test	eax, eax
		jz	short loc_6FFD0877
		mov	ecx, [ebp+arg_0]
		mov	edx, [ebp+var_114]
		mov	eax, [ecx+8]
		cmp	[eax+8], edx
		jz	loc_6FFD0C40

loc_6FFD081F:				; CODE XREF: _ZN16DBusMenuImporter19slotMenuAboutToShowEv+8E4j
					; _ZN16DBusMenuImporter19slotMenuAboutToShowEv+95Fj
		mov	dword ptr [esp+4], 0FFFFFFFFh
		mov	dword ptr [esp], offset	aOpened	; "opened"
		mov	[ebp+var_108], 8
		call	ds:_ZN7QString16fromAscii_helperEPKci
		mov	[ebp+var_1C], eax
		lea	eax, [ebp+var_1C]
		mov	edx, [ebp+arg_0]
		mov	[esp+8], eax
		mov	eax, [ebp+var_118]
		mov	[esp+4], eax
		mov	eax, [edx+8]
		mov	[ebp+var_108], 6
		mov	[esp], eax
		call	sub_6FFE33C0
		mov	eax, [ebp+var_1C]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jz	short loc_6FFD08D0

loc_6FFD0877:				; CODE XREF: _ZN16DBusMenuImporter19slotMenuAboutToShowEv+478j
					; _ZN16DBusMenuImporter19slotMenuAboutToShowEv+556j
		lea	eax, [ebp+var_14]
		mov	[esp], eax
		mov	[ebp+var_108], 0Bh
		call	ds:_ZN11QMetaObject11removeGuardEPP7QObject
		lea	eax, [ebp+var_C]
		mov	[esp], eax
		mov	[ebp+var_108], 0FFFFFFFFh
		call	ds:_ZN16QDBusPendingCallD1Ev
		lea	eax, [ebp+var_10C]
		mov	[esp], eax
		call	_Unwind_SjLj_Unregister
		leave
		retn
; ---------------------------------------------------------------------------

loc_6FFD08B3:				; CODE XREF: _ZN16DBusMenuImporter19slotMenuAboutToShowEv+28Fj
		mov	eax, [ebp+var_10]
		mov	[ebp+var_108], 13h
		mov	[esp], eax
		call	ds:_ZN7QString4freeEPNS_4DataE
		jmp	loc_6FFD0625
; ---------------------------------------------------------------------------
		align 10h

loc_6FFD08D0:				; CODE XREF: _ZN16DBusMenuImporter19slotMenuAboutToShowEv+4E5j
		mov	eax, [ebp+var_1C]
		mov	[ebp+var_108], 8
		mov	[esp], eax
		call	ds:_ZN7QString4freeEPNS_4DataE
		jmp	short loc_6FFD0877
; ---------------------------------------------------------------------------

loc_6FFD08E8:				; CODE XREF: _ZN16DBusMenuImporter19slotMenuAboutToShowEv+46Dj
		mov	dword ptr [esp], 18h ; size_t
		call	sub_6FFEAE70
		mov	[ebp+var_120], eax
		lea	eax, [ebp+var_20]
		mov	ecx, [ebp+var_120]
		mov	[esp+8], eax
		mov	eax, [ebp+var_120]
		mov	[ebp+var_20], 2
		mov	[ebp+var_108], 5
		mov	[esp], ecx
		add	eax, 8
		mov	[esp+4], eax
		call	ds:_ZN11QTextStreamC1EP7QString6QFlagsIN9QIODevice12OpenModeFlagEE
		mov	edx, [ebp+var_120]
		mov	eax, ds:_ZN7QString11shared_nullE
		mov	[edx+8], eax
		lock inc dword ptr [eax]
		setnz	dl
		mov	ecx, [ebp+var_120]
		lea	eax, [ebp+var_24]
		mov	dword ptr [ecx+0Ch], 1
		mov	dword ptr [ecx+10h], 1
		mov	byte ptr [ecx+15h], 1
		mov	[ebp+var_18], ecx
		mov	byte ptr [ecx+14h], 0
		mov	dword ptr [esp+8], 0FFFFFFFFh
		mov	dword ptr [esp+4], offset a31m_1 ; "\x1B[31m"
		mov	[esp], eax
		mov	[ebp+var_108], 7
		call	ds:_ZN7QString9fromAsciiEPKci
		sub	esp, 4
		lea	eax, [ebp+var_24]
		mov	[esp+4], eax
		mov	eax, [ebp+var_18]
		mov	[ebp+var_108], 4
		mov	[esp], eax
		call	ds:_ZN11QTextStreamlsERK7QString
		mov	eax, [ebp+var_24]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jz	loc_6FFD0C15
		mov	eax, [ebp+var_18]
		cmp	byte ptr [eax+14h], 0
		jnz	loc_6FFD0BF5

loc_6FFD09C5:				; CODE XREF: _ZN16DBusMenuImporter19slotMenuAboutToShowEv+880j
					; _ZN16DBusMenuImporter19slotMenuAboutToShowEv+8A2j
		lea	eax, [ebp+var_28]
		mov	dword ptr [esp+8], 0FFFFFFFFh
		mov	dword ptr [esp+4], offset aVoidDbusmenu_3 ; "void DBusMenuImporter::slotMenuAboutToS"...
		mov	[esp], eax
		mov	[ebp+var_108], 7
		call	ds:_ZN7QString9fromAsciiEPKci
		sub	esp, 4
		lea	eax, [ebp+var_28]
		mov	[esp+4], eax
		mov	eax, [ebp+var_18]
		mov	[ebp+var_108], 3
		mov	[esp], eax
		call	ds:_ZN11QTextStreamlsERK7QString
		mov	eax, [ebp+var_28]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jz	loc_6FFD0BD0
		mov	eax, [ebp+var_18]
		cmp	byte ptr [eax+14h], 0
		jnz	loc_6FFD0BB0

loc_6FFD0A29:				; CODE XREF: _ZN16DBusMenuImporter19slotMenuAboutToShowEv+83Bj
					; _ZN16DBusMenuImporter19slotMenuAboutToShowEv+85Dj
		lea	eax, [ebp+var_2C]
		mov	dword ptr [esp+8], 0FFFFFFFFh
		mov	dword ptr [esp+4], offset a0m_1	; "\x1B[0m:"
		mov	[esp], eax
		mov	[ebp+var_108], 7
		call	ds:_ZN7QString9fromAsciiEPKci
		sub	esp, 4
		lea	eax, [ebp+var_2C]
		mov	[esp+4], eax
		mov	eax, [ebp+var_18]
		mov	[ebp+var_108], 2
		mov	[esp], eax
		call	ds:_ZN11QTextStreamlsERK7QString
		mov	eax, [ebp+var_2C]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jz	loc_6FFD0B84
		mov	eax, [ebp+var_18]
		cmp	byte ptr [eax+14h], 0
		jnz	loc_6FFD0B61

loc_6FFD0A8D:				; CODE XREF: _ZN16DBusMenuImporter19slotMenuAboutToShowEv+7EFj
					; _ZN16DBusMenuImporter19slotMenuAboutToShowEv+811j
		mov	byte ptr [eax+14h], 1
		mov	eax, [ebp+var_18]
		mov	dword ptr [esp+4], 20h
		mov	[ebp+var_108], 7
		mov	[esp], eax
		call	ds:_ZN11QTextStreamlsEc
		lea	eax, [ebp+var_30]
		mov	dword ptr [esp+8], 0FFFFFFFFh
		mov	dword ptr [esp+4], offset aApplicationD_0 ; "Application did not answer	to AboutToSh"...
		mov	[esp], eax
		call	ds:_ZN7QString9fromAsciiEPKci
		sub	esp, 4
		lea	eax, [ebp+var_30]
		mov	[esp+4], eax
		mov	eax, [ebp+var_18]
		mov	[ebp+var_108], 1
		mov	[esp], eax
		call	ds:_ZN11QTextStreamlsERK7QString
		mov	eax, [ebp+var_30]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jz	short loc_6FFD0B40
		mov	eax, [ebp+var_18]
		cmp	byte ptr [eax+14h], 0
		jnz	short loc_6FFD0B20

loc_6FFD0B01:				; CODE XREF: _ZN16DBusMenuImporter19slotMenuAboutToShowEv+7ABj
					; _ZN16DBusMenuImporter19slotMenuAboutToShowEv+7CDj
		lea	eax, [ebp+var_18]
		mov	[esp], eax
		mov	[ebp+var_108], 8
		call	sub_6FFE9DD0
		jmp	loc_6FFD0803
; ---------------------------------------------------------------------------
		align 10h

loc_6FFD0B20:				; CODE XREF: _ZN16DBusMenuImporter19slotMenuAboutToShowEv+76Fj
					; _ZN16DBusMenuImporter19slotMenuAboutToShowEv+7CFj
		mov	dword ptr [esp+4], 20h
		mov	[esp], eax
		mov	[ebp+var_108], 7
		call	ds:_ZN11QTextStreamlsEc
		jmp	short loc_6FFD0B01
; ---------------------------------------------------------------------------
		align 10h

loc_6FFD0B40:				; CODE XREF: _ZN16DBusMenuImporter19slotMenuAboutToShowEv+766j
		mov	eax, [ebp+var_30]
		mov	[ebp+var_108], 7
		mov	[esp], eax
		call	ds:_ZN7QString4freeEPNS_4DataE
		mov	eax, [ebp+var_18]
		cmp	byte ptr [eax+14h], 0
		jz	short loc_6FFD0B01
		jmp	short loc_6FFD0B20
; ---------------------------------------------------------------------------

loc_6FFD0B61:				; CODE XREF: _ZN16DBusMenuImporter19slotMenuAboutToShowEv+6F7j
					; _ZN16DBusMenuImporter19slotMenuAboutToShowEv+817j
		mov	dword ptr [esp+4], 20h
		mov	[esp], eax
		mov	[ebp+var_108], 7
		call	ds:_ZN11QTextStreamlsEc
		mov	eax, [ebp+var_18]
		jmp	loc_6FFD0A8D
; ---------------------------------------------------------------------------

loc_6FFD0B84:				; CODE XREF: _ZN16DBusMenuImporter19slotMenuAboutToShowEv+6EAj
		mov	eax, [ebp+var_2C]
		mov	[ebp+var_108], 7
		mov	[esp], eax
		call	ds:_ZN7QString4freeEPNS_4DataE
		mov	eax, [ebp+var_18]
		cmp	byte ptr [eax+14h], 0
		jz	loc_6FFD0A8D
		jmp	short loc_6FFD0B61
; ---------------------------------------------------------------------------
		align 10h

loc_6FFD0BB0:				; CODE XREF: _ZN16DBusMenuImporter19slotMenuAboutToShowEv+693j
					; _ZN16DBusMenuImporter19slotMenuAboutToShowEv+863j
		mov	dword ptr [esp+4], 20h
		mov	[esp], eax
		mov	[ebp+var_108], 7
		call	ds:_ZN11QTextStreamlsEc
		jmp	loc_6FFD0A29
; ---------------------------------------------------------------------------

loc_6FFD0BD0:				; CODE XREF: _ZN16DBusMenuImporter19slotMenuAboutToShowEv+686j
		mov	eax, [ebp+var_28]
		mov	[ebp+var_108], 7
		mov	[esp], eax
		call	ds:_ZN7QString4freeEPNS_4DataE
		mov	eax, [ebp+var_18]
		cmp	byte ptr [eax+14h], 0
		jz	loc_6FFD0A29
		jmp	short loc_6FFD0BB0
; ---------------------------------------------------------------------------

loc_6FFD0BF5:				; CODE XREF: _ZN16DBusMenuImporter19slotMenuAboutToShowEv+62Fj
					; _ZN16DBusMenuImporter19slotMenuAboutToShowEv+8A8j
		mov	dword ptr [esp+4], 20h
		mov	[esp], eax
		mov	[ebp+var_108], 7
		call	ds:_ZN11QTextStreamlsEc
		jmp	loc_6FFD09C5
; ---------------------------------------------------------------------------

loc_6FFD0C15:				; CODE XREF: _ZN16DBusMenuImporter19slotMenuAboutToShowEv+622j
		mov	eax, [ebp+var_24]
		mov	[ebp+var_108], 7
		mov	[esp], eax
		call	ds:_ZN7QString4freeEPNS_4DataE
		mov	eax, [ebp+var_18]
		cmp	byte ptr [eax+14h], 0
		jz	loc_6FFD09C5
		jmp	short loc_6FFD0BF5
; ---------------------------------------------------------------------------
		align 10h

loc_6FFD0C40:				; CODE XREF: _ZN16DBusMenuImporter19slotMenuAboutToShowEv+489j
		cmp	byte ptr [eax+24h], 0
		jnz	short loc_6FFD0CC4

loc_6FFD0C46:				; CODE XREF: _ZN16DBusMenuImporter19slotMenuAboutToShowEv+959j
		mov	ecx, [ebp+arg_0]
		mov	dword ptr [esp+0Ch], 0
		mov	dword ptr [esp+8], 1
		mov	dword ptr [esp+4], offset _ZN16DBusMenuImporter16staticMetaObjectE
		mov	[esp], ecx
		mov	[ebp+var_108], 8
		call	ds:_ZN11QMetaObject8activateEP7QObjectPKS_iPPv
		jmp	loc_6FFD081F
; ---------------------------------------------------------------------------
		align 10h

loc_6FFD0C80:				; CODE XREF: _ZN16DBusMenuImporter19slotMenuAboutToShowEv+74j
		mov	dword ptr [esp+8], 1D7h
		mov	dword ptr [esp+4], offset aRBuildKdesup_1 ; "r:\\build\\kdesupport\\dbusmenu-qt-0.9."...
		mov	dword ptr [esp], offset	aMenu ;	"menu"
		call	ds:_Z9qt_assertPKcS0_i
		jmp	loc_6FFD040A
; ---------------------------------------------------------------------------

loc_6FFD0CA2:				; CODE XREF: _ZN16DBusMenuImporter19slotMenuAboutToShowEv+9Bj
		mov	dword ptr [esp+8], 1DAh
		mov	dword ptr [esp+4], offset aRBuildKdesup_1 ; "r:\\build\\kdesupport\\dbusmenu-qt-0.9."...
		mov	dword ptr [esp], offset	aAction	; "action"
		call	ds:_Z9qt_assertPKcS0_i
		jmp	loc_6FFD0431
; ---------------------------------------------------------------------------

loc_6FFD0CC4:				; CODE XREF: _ZN16DBusMenuImporter19slotMenuAboutToShowEv+8B4j
		mov	byte ptr [eax+24h], 0
		mov	[esp], ecx
		mov	[ebp+var_108], 8
		call	_ZN16DBusMenuImporter11menuUpdatedEv
		mov	ecx, [ebp+arg_0]
		mov	edx, [ebp+var_114]
		mov	eax, [ecx+8]
		cmp	[eax+8], edx
		jz	loc_6FFD0C46
		jmp	loc_6FFD081F
_ZN16DBusMenuImporter19slotMenuAboutToShowEv endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn

sub_6FFD0CF4	proc near		; DATA XREF: _ZN16DBusMenuImporter19slotMenuAboutToShowEv+2Fo
		add	ebp, 8
		mov	eax, [ebp-108h]
		mov	edx, [ebp-104h]
		cmp	eax, 1
		mov	[ebp-128h], edx
		jz	loc_6FFD0EDF
		cmp	eax, 2
		jz	loc_6FFD0EC5
		cmp	eax, 3
		jz	loc_6FFD0EAB
		cmp	eax, 4
		jz	loc_6FFD0E98
		cmp	eax, 5
		jz	loc_6FFD0E56
		cmp	eax, 6
		jz	loc_6FFD0DFD
		cmp	eax, 7
		jz	loc_6FFD0E12
		cmp	eax, 8
		nop
		lea	esi, [esi+0]
		jz	loc_6FFD0E6D
		cmp	eax, 9
		jz	loc_6FFD0E88
		cmp	eax, 0Ah
		jz	loc_6FFD0E28
		cmp	eax, 0Bh
		nop
		lea	esi, [esi+0]
		jz	loc_6FFD1094
		cmp	eax, 0Ch
		jz	loc_6FFD1079
		cmp	eax, 0Dh
		jz	loc_6FFD105E
		cmp	eax, 0Eh
		nop
		lea	esi, [esi+0]
		jz	loc_6FFD1043
		cmp	eax, 0Fh
		jz	loc_6FFD10CA
		cmp	eax, 10h
		jz	loc_6FFD10AF
		cmp	eax, 11h
		nop
		lea	esi, [esi+0]
		jz	loc_6FFD0F27
		cmp	eax, 12h
		jz	loc_6FFD0FFB
		cmp	eax, 13h
		jz	loc_6FFD102C
		cmp	eax, 14h
		nop
		lea	esi, [esi+0]
		jz	loc_6FFD1011
		cmp	eax, 15h
		jz	loc_6FFD0F3D
		cmp	eax, 16h
		jz	loc_6FFD0EF9
		lea	eax, [ebp-30h]
		mov	[esp+0], eax
		mov	dword ptr [ebp-108h], 0
		call	sub_6FFEA140

loc_6FFD0DFD:				; CODE XREF: sub_6FFD0CF4+45j
					; sub_6FFD0CF4+1CCj ...
		lea	eax, [ebp-18h]
		mov	[esp+0], eax
		mov	dword ptr [ebp-108h], 0
		call	sub_6FFE9DD0

loc_6FFD0E12:				; CODE XREF: sub_6FFD0CF4+4Ej
					; sub_6FFD0CF4+177j ...
		lea	eax, [ebp-14h]
		mov	[esp+0], eax
		mov	dword ptr [ebp-108h], 0
		call	ds:_ZN11QMetaObject11removeGuardEPP7QObject

loc_6FFD0E28:				; CODE XREF: sub_6FFD0CF4+6Ej
					; sub_6FFD0CF4+192j ...
		lea	eax, [ebp-0Ch]
		mov	[esp+0], eax
		mov	dword ptr [ebp-108h], 0
		call	ds:_ZN16QDBusPendingCallD1Ev
		mov	ecx, [ebp-128h]
		mov	dword ptr [ebp-108h], 0FFFFFFFFh
		mov	[esp+0], ecx
		call	_Unwind_SjLj_Resume
; ---------------------------------------------------------------------------

loc_6FFD0E56:				; CODE XREF: sub_6FFD0CF4+3Cj
		lea	eax, [ebp-1Ch]
		mov	[esp+0], eax
		mov	dword ptr [ebp-108h], 0
		call	sub_6FFEA140
		jmp	short loc_6FFD0E12
; ---------------------------------------------------------------------------

loc_6FFD0E6D:				; CODE XREF: sub_6FFD0CF4+5Cj
		lea	eax, [ebp-0D0h]
		mov	[esp+0], eax
		mov	dword ptr [ebp-108h], 0
		call	ds:_ZN8QVariantD1Ev
		jmp	short loc_6FFD0E28
; ---------------------------------------------------------------------------

loc_6FFD0E88:				; CODE XREF: sub_6FFD0CF4+65j
		mov	eax, [ebp-110h]
		mov	[esp+0], eax
		call	sub_6FFEAE50
		jmp	short loc_6FFD0E28
; ---------------------------------------------------------------------------

loc_6FFD0E98:				; CODE XREF: sub_6FFD0CF4+33j
		mov	eax, [ebp-120h]
		mov	[esp+0], eax
		call	sub_6FFEAE50
		jmp	loc_6FFD0E12
; ---------------------------------------------------------------------------

loc_6FFD0EAB:				; CODE XREF: sub_6FFD0CF4+2Aj
		lea	eax, [ebp-24h]
		mov	[esp+0], eax
		mov	dword ptr [ebp-108h], 0
		call	sub_6FFEA140
		jmp	loc_6FFD0DFD
; ---------------------------------------------------------------------------

loc_6FFD0EC5:				; CODE XREF: sub_6FFD0CF4+21j
		lea	eax, [ebp-28h]
		mov	[esp+0], eax
		mov	dword ptr [ebp-108h], 0
		call	sub_6FFEA140
		jmp	loc_6FFD0DFD
; ---------------------------------------------------------------------------

loc_6FFD0EDF:				; CODE XREF: sub_6FFD0CF4+18j
		lea	eax, [ebp-2Ch]
		mov	[esp+0], eax
		mov	dword ptr [ebp-108h], 0
		call	sub_6FFEA140
		jmp	loc_6FFD0DFD
; ---------------------------------------------------------------------------

loc_6FFD0EF9:				; CODE XREF: sub_6FFD0CF4+EEj
		lea	eax, [ebp-40h]
		mov	[esp+0], eax
		mov	dword ptr [ebp-108h], 0
		call	ds:_ZN8QVariantD1Ev
		mov	ecx, [ebp-128h]
		mov	dword ptr [ebp-108h], 0FFFFFFFFh
		mov	[esp+0], ecx
		call	_Unwind_SjLj_Resume
; ---------------------------------------------------------------------------

loc_6FFD0F27:				; CODE XREF: sub_6FFD0CF4+BCj
		lea	eax, [ebp-0Ch]
		mov	[esp+0], eax
		mov	dword ptr [ebp-108h], 0
		call	ds:_ZN16QDBusPendingCallD1Ev

loc_6FFD0F3D:				; CODE XREF: sub_6FFD0CF4+E5j
					; sub_6FFD0CF4+333j
		lea	eax, [ebp-60h]
		mov	[esp+0], eax
		mov	dword ptr [ebp-108h], 0
		call	ds:_ZN8QVariantD1Ev

loc_6FFD0F53:				; CODE XREF: sub_6FFD0CF4+3D1j
		lea	eax, [ebp-70h]
		mov	[esp+0], eax
		mov	dword ptr [ebp-108h], 0
		call	ds:_ZN8QVariantD1Ev

loc_6FFD0F69:				; CODE XREF: sub_6FFD0CF4+3ECj
		lea	eax, [ebp-80h]
		mov	[esp+0], eax
		mov	dword ptr [ebp-108h], 0
		call	ds:_ZN8QVariantD1Ev

loc_6FFD0F7F:				; CODE XREF: sub_6FFD0CF4+365j
		lea	eax, [ebp-90h]
		mov	[esp+0], eax
		mov	dword ptr [ebp-108h], 0
		call	ds:_ZN8QVariantD1Ev

loc_6FFD0F98:				; CODE XREF: sub_6FFD0CF4+380j
		lea	eax, [ebp-0A0h]
		mov	[esp+0], eax
		mov	dword ptr [ebp-108h], 0
		call	ds:_ZN8QVariantD1Ev

loc_6FFD0FB1:				; CODE XREF: sub_6FFD0CF4+39Bj
		lea	eax, [ebp-0B0h]
		mov	[esp+0], eax
		mov	dword ptr [ebp-108h], 0
		call	ds:_ZN8QVariantD1Ev

loc_6FFD0FCA:				; CODE XREF: sub_6FFD0CF4+3B6j
		lea	eax, [ebp-0C0h]
		mov	[esp+0], eax
		mov	dword ptr [ebp-108h], 0
		call	ds:_ZN8QVariantD1Ev
		mov	eax, [ebp-128h]
		mov	dword ptr [ebp-108h], 0FFFFFFFFh
		mov	[esp+0], eax
		call	_Unwind_SjLj_Resume
; ---------------------------------------------------------------------------

loc_6FFD0FFB:				; CODE XREF: sub_6FFD0CF4+C5j
		lea	eax, [ebp-0Ch]
		mov	[esp+0], eax
		mov	dword ptr [ebp-108h], 0
		call	ds:_ZN16QDBusPendingCallD1Ev

loc_6FFD1011:				; CODE XREF: sub_6FFD0CF4+DCj
					; sub_6FFD0CF4+34Dj
		lea	eax, [ebp-50h]
		mov	[esp+0], eax
		mov	dword ptr [ebp-108h], 0
		call	ds:_ZN8QVariantD1Ev
		jmp	loc_6FFD0F3D
; ---------------------------------------------------------------------------

loc_6FFD102C:				; CODE XREF: sub_6FFD0CF4+CEj
		lea	eax, [ebp-10h]
		mov	[esp+0], eax
		mov	dword ptr [ebp-108h], 0
		call	sub_6FFEA140
		jmp	short loc_6FFD1011
; ---------------------------------------------------------------------------

loc_6FFD1043:				; CODE XREF: sub_6FFD0CF4+9Cj
		lea	eax, [ebp-0Ch]
		mov	[esp+0], eax
		mov	dword ptr [ebp-108h], 0
		call	ds:_ZN16QDBusPendingCallD1Ev
		jmp	loc_6FFD0F7F
; ---------------------------------------------------------------------------

loc_6FFD105E:				; CODE XREF: sub_6FFD0CF4+8Ej
		lea	eax, [ebp-0Ch]
		mov	[esp+0], eax
		mov	dword ptr [ebp-108h], 0
		call	ds:_ZN16QDBusPendingCallD1Ev
		jmp	loc_6FFD0F98
; ---------------------------------------------------------------------------

loc_6FFD1079:				; CODE XREF: sub_6FFD0CF4+85j
		lea	eax, [ebp-0Ch]
		mov	[esp+0], eax
		mov	dword ptr [ebp-108h], 0
		call	ds:_ZN16QDBusPendingCallD1Ev
		jmp	loc_6FFD0FB1
; ---------------------------------------------------------------------------

loc_6FFD1094:				; CODE XREF: sub_6FFD0CF4+7Cj
		lea	eax, [ebp-0Ch]
		mov	[esp+0], eax
		mov	dword ptr [ebp-108h], 0
		call	ds:_ZN16QDBusPendingCallD1Ev
		jmp	loc_6FFD0FCA
; ---------------------------------------------------------------------------

loc_6FFD10AF:				; CODE XREF: sub_6FFD0CF4+AEj
		lea	eax, [ebp-0Ch]
		mov	[esp+0], eax
		mov	dword ptr [ebp-108h], 0
		call	ds:_ZN16QDBusPendingCallD1Ev
		jmp	loc_6FFD0F53
; ---------------------------------------------------------------------------

loc_6FFD10CA:				; CODE XREF: sub_6FFD0CF4+A5j
		lea	eax, [ebp-0Ch]
		mov	[esp+0], eax
		mov	dword ptr [ebp-108h], 0
		call	ds:_ZN16QDBusPendingCallD1Ev
		jmp	loc_6FFD0F69
sub_6FFD0CF4	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_6FFD10F0	proc near		; CODE XREF: _ZN16DBusMenuImporter18qt_static_metacallEP7QObjectN11QMetaObject4CallEiPPv+204j

var_114		= dword	ptr -114h
var_110		= dword	ptr -110h
var_10C		= dword	ptr -10Ch
var_108		= dword	ptr -108h
var_104		= dword	ptr -104h
var_F4		= dword	ptr -0F4h
var_F0		= dword	ptr -0F0h
var_EC		= dword	ptr -0ECh
var_E8		= dword	ptr -0E8h
var_E4		= dword	ptr -0E4h
var_E0		= dword	ptr -0E0h
var_DC		= dword	ptr -0DCh
var_D8		= dword	ptr -0D8h
var_D4		= dword	ptr -0D4h
var_D0		= dword	ptr -0D0h
var_CC		= dword	ptr -0CCh
var_C8		= dword	ptr -0C8h
var_C4		= dword	ptr -0C4h
var_C0		= dword	ptr -0C0h
var_BC		= dword	ptr -0BCh
var_B8		= dword	ptr -0B8h
var_B4		= dword	ptr -0B4h
var_B0		= dword	ptr -0B0h
var_AC		= dword	ptr -0ACh
var_A8		= dword	ptr -0A8h
var_A4		= dword	ptr -0A4h
var_A0		= dword	ptr -0A0h
var_9C		= byte ptr -9Ch
var_98		= dword	ptr -98h
var_84		= dword	ptr -84h
var_80		= dword	ptr -80h
var_7C		= dword	ptr -7Ch
var_78		= dword	ptr -78h
var_74		= dword	ptr -74h
var_60		= dword	ptr -60h
var_58		= dword	ptr -58h
var_50		= dword	ptr -50h
var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= byte ptr -18h
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		lea	eax, [ebp+var_18]
		sub	esp, 11Ch
		mov	[ebp+var_7C], eax
		lea	eax, [ebp+var_9C]
		mov	[esp], eax
		mov	[ebp+var_84], offset sub_6FFEC1F0
		mov	[ebp+var_80], offset dword_6FFED068
		mov	[ebp+var_78], offset sub_6FFD1855
		mov	[ebp+var_74], esp
		call	_Unwind_SjLj_Register
		mov	eax, [ebp+arg_4]
		mov	eax, [eax]
		mov	[ebp+var_30], eax
		lock inc dword ptr [eax]
		setnz	dl
		mov	eax, [ebp+var_30]
		test	byte ptr [eax+10h], 1
		jnz	short loc_6FFD115E
		mov	eax, [eax+4]
		mov	[ebp+var_98], 0FFFFFFFFh
		mov	[esp+4], eax
		lea	eax, [ebp+var_30]
		mov	[esp], eax
		call	sub_6FFE5F80

loc_6FFD115E:				; CODE XREF: sub_6FFD10F0+50j
		mov	edx, [ebp+var_30]
		mov	[ebp+var_2C], 0
		mov	eax, [edx+8]
		mov	ecx, [edx+0Ch]
		lea	eax, [edx+eax*4+14h]
		lea	edx, [edx+ecx*4+14h]
		cmp	eax, edx
		mov	[ebp+var_28], eax
		mov	[ebp+var_24], edx
		jz	loc_6FFD1270
		mov	ecx, [ebp+arg_0]
		add	ecx, 0Ch
		mov	[ebp+var_F0], ecx

loc_6FFD1190:				; CODE XREF: sub_6FFD10F0+173j
		mov	eax, [eax]
		mov	ebx, [ebp+arg_0]
		mov	[ebp+var_BC], eax
		mov	esi, eax
		mov	ebx, [ebx+0Ch]
		mov	edi, [ebx+3Ch]
		mov	[ebp+var_C4], ebx
		test	edi, edi
		jnz	loc_6FFD14C5

loc_6FFD11B1:				; CODE XREF: sub_6FFD10F0+3E0j
					; sub_6FFD10F0+40Dj ...
		mov	[ebp+var_1C], 0
		mov	[ebp+var_A8], 0

loc_6FFD11C2:				; CODE XREF: sub_6FFD10F0+44Cj
		lea	eax, [ebp+var_1C]
		mov	[esp], eax
		mov	[ebp+var_98], 4
		call	ds:_ZN11QMetaObject11removeGuardEPP7QObject
		mov	eax, [ebp+var_A8]
		test	eax, eax
		jz	short loc_6FFD1250
		mov	edx, [ebp+var_BC]
		mov	edx, [edx+4]
		mov	ecx, [edx+4]
		mov	[ebp+var_A4], edx
		cmp	edx, ecx
		mov	[ebp+var_A0], ecx
		jz	short loc_6FFD1250
		xchg	ax, ax

loc_6FFD1200:				; CODE XREF: sub_6FFD10F0+15Ej
		mov	eax, [ebp+var_A0]
		mov	edx, [ebp+var_A0]
		mov	ebx, [ebp+var_A8]
		mov	[ebp+var_98], 4
		sub	eax, 1Ch
		mov	[esp+8], eax
		mov	eax, [ebp+arg_0]
		sub	edx, 14h
		mov	[esp+0Ch], edx
		mov	[esp+4], ebx
		mov	[esp], eax
		call	sub_6FFE1870
		mov	edx, [ebp+var_A0]
		mov	edx, [edx+4]
		cmp	[ebp+var_A4], edx
		mov	[ebp+var_A0], edx
		jnz	short loc_6FFD1200

loc_6FFD1250:				; CODE XREF: sub_6FFD10F0+F0j
					; sub_6FFD10F0+10Cj
		mov	eax, [ebp+var_28]
		mov	edx, [ebp+var_2C]
		add	eax, 4
		test	edx, edx
		mov	[ebp+var_28], eax
		jnz	short loc_6FFD1270
		cmp	eax, [ebp+var_24]
		jnz	loc_6FFD1190
		lea	esi, [esi+0]

loc_6FFD1270:				; CODE XREF: sub_6FFD10F0+8Ej
					; sub_6FFD10F0+16Ej
		mov	eax, [ebp+var_30]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jz	loc_6FFD15F7

loc_6FFD1281:				; CODE XREF: sub_6FFD10F0+63Bj
		mov	eax, [ebp+arg_8]
		mov	eax, [eax]
		mov	[ebp+var_40], eax
		lock inc dword ptr [eax]
		setnz	dl
		mov	eax, [ebp+var_40]
		test	byte ptr [eax+10h], 1
		jnz	short loc_6FFD12B4
		mov	eax, [eax+4]
		mov	[ebp+var_98], 0FFFFFFFFh
		mov	[esp+4], eax
		lea	eax, [ebp+var_40]
		mov	[esp], eax
		call	sub_6FFE6BF0

loc_6FFD12B4:				; CODE XREF: sub_6FFD10F0+1A6j
		mov	eax, [ebp+var_40]
		mov	[ebp+var_3C], 0
		mov	edx, [eax+8]
		mov	ecx, [eax+0Ch]
		lea	edx, [eax+edx*4+14h]
		lea	eax, [eax+ecx*4+14h]
		cmp	edx, eax
		mov	[ebp+var_38], edx
		mov	[ebp+var_34], eax
		jz	loc_6FFD1416
		mov	ecx, [ebp+arg_0]
		add	ecx, 0Ch
		mov	[ebp+var_DC], ecx

loc_6FFD12E6:				; CODE XREF: sub_6FFD10F0+320j
		mov	edx, [edx]
		mov	eax, [ebp+arg_0]
		mov	[ebp+var_B8], edx
		mov	ebx, edx
		mov	eax, [eax+0Ch]
		mov	edx, [eax+3Ch]
		mov	[ebp+var_C0], eax
		test	edx, edx
		jnz	loc_6FFD1440

loc_6FFD1307:				; CODE XREF: sub_6FFD10F0+35Bj
					; sub_6FFD10F0+38Dj ...
		mov	[ebp+var_20], 0
		mov	[ebp+var_B0], 0

loc_6FFD1318:				; CODE XREF: sub_6FFD10F0+3CCj
		lea	eax, [ebp+var_20]
		mov	[esp], eax
		mov	[ebp+var_98], 3
		call	ds:_ZN11QMetaObject11removeGuardEPP7QObject
		mov	ebx, [ebp+var_B0]
		test	ebx, ebx
		jz	loc_6FFD13FD
		mov	edx, [ebp+var_B8]
		mov	eax, [edx+4]
		mov	[ebp+var_50], eax
		lock inc dword ptr [eax]
		setnz	dl
		mov	eax, [ebp+var_50]
		test	byte ptr [eax+10h], 1
		jz	loc_6FFD15E0

loc_6FFD135B:				; CODE XREF: sub_6FFD10F0+502j
		mov	ecx, [ebp+var_50]
		mov	[ebp+var_4C], 0
		mov	eax, [ecx+8]
		mov	edx, [ecx+0Ch]
		lea	eax, [ecx+eax*4+14h]
		lea	edx, [ecx+edx*4+14h]
		cmp	eax, edx
		mov	[ebp+var_48], eax
		mov	[ebp+var_44], edx
		jnz	short loc_6FFD1385
		jmp	short loc_6FFD13EC
; ---------------------------------------------------------------------------
		align 10h

loc_6FFD1380:				; CODE XREF: sub_6FFD10F0+2FAj
		cmp	eax, [ebp+var_44]
		jz	short loc_6FFD13EC

loc_6FFD1385:				; CODE XREF: sub_6FFD10F0+28Bj
		mov	edx, [ebp+var_58]
		mov	ecx, [ebp+var_B0]
		mov	ebx, [ebp+arg_0]
		mov	[ebp+var_60], 0
		and	edx, 0C0000000h
		mov	[ebp+var_58], edx
		lea	edx, [ebp+var_60]
		mov	byte ptr [ebp+var_58+3], 80h
		mov	[esp+0Ch], edx
		mov	[esp+8], eax
		mov	[esp+4], ecx
		mov	[esp], ebx
		mov	[ebp+var_98], 1
		call	sub_6FFE1870
		lea	ebx, [ebp+var_60]
		mov	[esp], ebx
		mov	[ebp+var_98], 2
		call	ds:_ZN8QVariantD1Ev
		mov	eax, [ebp+var_48]
		mov	ecx, [ebp+var_4C]
		add	eax, 4
		test	ecx, ecx
		mov	[ebp+var_48], eax
		jz	short loc_6FFD1380

loc_6FFD13EC:				; CODE XREF: sub_6FFD10F0+28Dj
					; sub_6FFD10F0+293j
		mov	eax, [ebp+var_50]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jz	loc_6FFD1545

loc_6FFD13FD:				; CODE XREF: sub_6FFD10F0+246j
					; sub_6FFD10F0+4EAj
		mov	edx, [ebp+var_38]
		mov	eax, [ebp+var_3C]
		add	edx, 4
		test	eax, eax
		mov	[ebp+var_38], edx
		jnz	short loc_6FFD1416
		cmp	edx, [ebp+var_34]
		jnz	loc_6FFD12E6

loc_6FFD1416:				; CODE XREF: sub_6FFD10F0+1E4j
					; sub_6FFD10F0+31Bj
		mov	eax, [ebp+var_40]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jz	loc_6FFD1730

loc_6FFD1427:				; CODE XREF: sub_6FFD10F0+760j
		lea	eax, [ebp+var_9C]
		mov	[esp], eax
		call	_Unwind_SjLj_Unregister
		add	esp, 11Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_6FFD1440:				; CODE XREF: sub_6FFD10F0+211j
		mov	ecx, [ebp+var_C0]
		mov	edx, [ecx+38h]
		test	edx, edx
		js	loc_6FFD1307
		mov	eax, [ebp+var_DC]
		mov	edi, [eax]
		lea	esi, [esi+0]

loc_6FFD1460:				; CODE XREF: sub_6FFD10F0+385j
					; sub_6FFD10F0+3D3j
		mov	eax, [ecx+edx*4+4]
		cmp	eax, edi
		jz	short loc_6FFD146F
		mov	esi, [eax-8]
		cmp	esi, [ebx]
		jl	short loc_6FFD14C1

loc_6FFD146F:				; CODE XREF: sub_6FFD10F0+376j
		sub	edx, 1
		cmp	edx, 0FFFFFFFFh
		jnz	short loc_6FFD1460
		cmp	[ebp+var_C0], eax
		jz	loc_6FFD1307
		mov	ebx, [ebp+var_B8]
		lea	edx, [eax-8]
		mov	ecx, [ebx]
		cmp	ecx, [eax-8]
		jl	loc_6FFD1307
		mov	eax, [edx+4]
		lea	ebx, [ebp+var_20]
		mov	[esp], ebx
		mov	[ebp+var_98], 3
		mov	[ebp+var_20], eax
		call	ds:_ZN11QMetaObject8addGuardEPP7QObject
		mov	eax, [ebp+var_20]
		mov	[ebp+var_B0], eax
		jmp	loc_6FFD1318
; ---------------------------------------------------------------------------

loc_6FFD14C1:				; CODE XREF: sub_6FFD10F0+37Dj
		mov	ecx, eax
		jmp	short loc_6FFD1460
; ---------------------------------------------------------------------------

loc_6FFD14C5:				; CODE XREF: sub_6FFD10F0+BBj
		mov	ecx, [ebp+var_C4]
		mov	edx, [ecx+38h]
		test	edx, edx
		js	loc_6FFD11B1
		mov	ebx, [ebp+var_F0]
		mov	edi, [ebx]
		mov	ebx, ecx

loc_6FFD14E0:				; CODE XREF: sub_6FFD10F0+405j
					; sub_6FFD10F0+453j
		mov	eax, [ebx+edx*4+4]
		cmp	eax, edi
		jz	short loc_6FFD14EF
		mov	ecx, [eax-8]
		cmp	ecx, [esi]
		jl	short loc_6FFD1541

loc_6FFD14EF:				; CODE XREF: sub_6FFD10F0+3F6j
		sub	edx, 1
		cmp	edx, 0FFFFFFFFh
		jnz	short loc_6FFD14E0
		cmp	[ebp+var_C4], eax
		jz	loc_6FFD11B1
		mov	ebx, [ebp+var_BC]
		lea	edx, [eax-8]
		mov	ecx, [ebx]
		cmp	ecx, [eax-8]
		jl	loc_6FFD11B1
		mov	eax, [edx+4]
		lea	edx, [ebp+var_1C]
		mov	[esp], edx
		mov	[ebp+var_98], 4
		mov	[ebp+var_1C], eax
		call	ds:_ZN11QMetaObject8addGuardEPP7QObject
		mov	ecx, [ebp+var_1C]
		mov	[ebp+var_A8], ecx
		jmp	loc_6FFD11C2
; ---------------------------------------------------------------------------

loc_6FFD1541:				; CODE XREF: sub_6FFD10F0+3FDj
		mov	ebx, eax
		jmp	short loc_6FFD14E0
; ---------------------------------------------------------------------------

loc_6FFD1545:				; CODE XREF: sub_6FFD10F0+307j
		mov	eax, [ebp+var_50]
		mov	edx, eax
		mov	ecx, eax
		mov	[ebp+var_C8], eax
		mov	eax, [eax+0Ch]
		add	edx, 14h
		lea	eax, [edx+eax*4]
		mov	[ebp+var_AC], eax
		mov	eax, [ecx+8]
		lea	eax, [edx+eax*4]
		cmp	[ebp+var_AC], eax
		mov	[ebp+var_B4], eax
		jnz	short loc_6FFD1585
		jmp	short loc_6FFD15C1
; ---------------------------------------------------------------------------

loc_6FFD1577:				; CODE XREF: sub_6FFD10F0+4ACj
		mov	eax, [ebp+var_AC]
		cmp	[ebp+var_B4], eax
		jz	short loc_6FFD15C1

loc_6FFD1585:				; CODE XREF: sub_6FFD10F0+483j
					; sub_6FFD10F0+4CFj
		sub	[ebp+var_AC], 4
		mov	ebx, [ebp+var_AC]
		mov	eax, [ebx]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jnz	short loc_6FFD1577
		mov	eax, [ebx]
		mov	[ebp+var_98], 3
		mov	[esp], eax
		call	ds:_ZN7QString4freeEPNS_4DataE
		mov	eax, [ebp+var_AC]
		cmp	[ebp+var_B4], eax
		jnz	short loc_6FFD1585

loc_6FFD15C1:				; CODE XREF: sub_6FFD10F0+485j
					; sub_6FFD10F0+493j
		mov	edx, [ebp+var_C8]
		mov	[ebp+var_98], 3
		mov	[esp], edx
		call	ds:_Z5qFreePv
		jmp	loc_6FFD13FD
; ---------------------------------------------------------------------------
		align 10h

loc_6FFD15E0:				; CODE XREF: sub_6FFD10F0+265j
		mov	eax, [eax+4]
		mov	[esp+4], eax
		lea	eax, [ebp+var_50]
		mov	[esp], eax
		call	sub_6FFE8C20
		jmp	loc_6FFD135B
; ---------------------------------------------------------------------------

loc_6FFD15F7:				; CODE XREF: sub_6FFD10F0+18Bj
		mov	ecx, [ebp+var_30]
		mov	edx, [ecx+0Ch]
		mov	eax, ecx
		add	eax, 14h
		mov	[ebp+var_10C], ecx
		lea	edx, [eax+edx*4]
		mov	[ebp+var_EC], edx
		mov	edx, [ecx+8]
		lea	edx, [eax+edx*4]
		cmp	[ebp+var_EC], edx
		mov	[ebp+var_114], edx
		jnz	short loc_6FFD1650
		jmp	loc_6FFD1712
; ---------------------------------------------------------------------------
		align 10h

loc_6FFD1630:				; CODE XREF: sub_6FFD10F0+57Ej
					; sub_6FFD10F0+589j ...
		mov	ecx, [ebp+var_F4]
		mov	[esp], ecx
		call	sub_6FFEAE50

loc_6FFD163E:				; CODE XREF: sub_6FFD10F0+577j
		mov	ebx, [ebp+var_EC]
		cmp	[ebp+var_114], ebx
		jz	loc_6FFD1712

loc_6FFD1650:				; CODE XREF: sub_6FFD10F0+533j
		sub	[ebp+var_EC], 4
		mov	ebx, [ebp+var_EC]
		mov	ebx, [ebx]
		test	ebx, ebx
		mov	[ebp+var_F4], ebx
		jz	short loc_6FFD163E
		mov	eax, [ebx+4]
		test	eax, eax
		jz	short loc_6FFD1630
		lock dec dword ptr [eax+34h]
		setnz	dl
		test	dl, dl
		jnz	short loc_6FFD1630
		mov	eax, [ebx+4]
		mov	edx, eax
		mov	[ebp+var_E8], eax
		mov	eax, [eax+4]
		cmp	edx, eax
		jz	short loc_6FFD16EC

loc_6FFD168D:				; CODE XREF: sub_6FFD10F0+5FAj
		mov	ecx, [eax+4]
		lea	ebx, [eax-1Ch]
		mov	[ebp+var_D8], ebx
		mov	edx, [eax-1Ch]
		mov	[ebp+var_D0], ecx
		lock dec dword ptr [edx]
		setnz	cl
		test	cl, cl
		jnz	short loc_6FFD16C2
		mov	eax, [eax-1Ch]
		mov	[ebp+var_98], 0FFFFFFFFh
		mov	[esp], eax
		call	ds:_ZN7QString4freeEPNS_4DataE

loc_6FFD16C2:				; CODE XREF: sub_6FFD10F0+5BAj
		mov	eax, [ebp+var_D8]
		mov	[ebp+var_98], 0FFFFFFFFh
		add	eax, 8
		mov	[esp], eax
		call	ds:_ZN8QVariantD1Ev
		mov	eax, [ebp+var_D0]
		cmp	[ebp+var_E8], eax
		jnz	short loc_6FFD168D

loc_6FFD16EC:				; CODE XREF: sub_6FFD10F0+59Bj
		mov	edx, [ebp+var_E8]
		mov	dword ptr [esp+4], 1Ch
		mov	[ebp+var_98], 0FFFFFFFFh
		mov	[esp], edx
		call	ds:_ZN8QMapData16continueFreeDataEi
		jmp	loc_6FFD1630
; ---------------------------------------------------------------------------

loc_6FFD1712:				; CODE XREF: sub_6FFD10F0+535j
					; sub_6FFD10F0+55Aj
		mov	eax, [ebp+var_10C]
		mov	[ebp+var_98], 0FFFFFFFFh
		mov	[esp], eax
		call	ds:_Z5qFreePv
		jmp	loc_6FFD1281
; ---------------------------------------------------------------------------

loc_6FFD1730:				; CODE XREF: sub_6FFD10F0+331j
		mov	ebx, [ebp+var_40]
		mov	edx, [ebx+0Ch]
		mov	eax, ebx
		add	eax, 14h
		mov	[ebp+var_108], ebx
		lea	edx, [eax+edx*4]
		mov	[ebp+var_D4], edx
		mov	edx, [ebx+8]
		lea	edx, [eax+edx*4]
		cmp	[ebp+var_D4], edx
		mov	[ebp+var_110], edx
		jnz	short loc_6FFD1783
		jmp	loc_6FFD1837
; ---------------------------------------------------------------------------

loc_6FFD1763:				; CODE XREF: sub_6FFD10F0+6B7j
					; sub_6FFD10F0+742j
		mov	ecx, [ebp+var_E4]
		mov	[esp], ecx
		call	sub_6FFEAE50

loc_6FFD1771:				; CODE XREF: sub_6FFD10F0+6AAj
		mov	ebx, [ebp+var_D4]
		cmp	[ebp+var_110], ebx
		jz	loc_6FFD1837

loc_6FFD1783:				; CODE XREF: sub_6FFD10F0+66Cj
		sub	[ebp+var_D4], 4
		mov	eax, [ebp+var_D4]
		mov	eax, [eax]
		test	eax, eax
		mov	[ebp+var_E4], eax
		jz	short loc_6FFD1771
		mov	eax, [eax+4]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jnz	short loc_6FFD1763
		mov	ecx, [ebp+var_E4]
		mov	ecx, [ecx+4]
		mov	edx, [ecx+0Ch]
		mov	eax, ecx
		add	eax, 14h
		mov	[ebp+var_104], ecx
		lea	edx, [eax+edx*4]
		mov	[ebp+var_CC], edx
		mov	edx, [ecx+8]
		lea	edx, [eax+edx*4]
		cmp	[ebp+var_CC], edx
		mov	[ebp+var_E0], edx
		jz	short loc_6FFD1819

loc_6FFD17DD:				; CODE XREF: sub_6FFD10F0+727j
		sub	[ebp+var_CC], 4
		mov	ebx, [ebp+var_CC]
		mov	eax, [ebx]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jnz	short loc_6FFD180B
		mov	eax, [ebx]
		mov	[ebp+var_98], 0FFFFFFFFh
		mov	[esp], eax
		call	ds:_ZN7QString4freeEPNS_4DataE

loc_6FFD180B:				; CODE XREF: sub_6FFD10F0+704j
		mov	eax, [ebp+var_CC]
		cmp	[ebp+var_E0], eax
		jnz	short loc_6FFD17DD

loc_6FFD1819:				; CODE XREF: sub_6FFD10F0+6EBj
		mov	edx, [ebp+var_104]
		mov	[ebp+var_98], 0FFFFFFFFh
		mov	[esp], edx
		call	ds:_Z5qFreePv
		jmp	loc_6FFD1763
; ---------------------------------------------------------------------------

loc_6FFD1837:				; CODE XREF: sub_6FFD10F0+66Ej
					; sub_6FFD10F0+68Dj
		mov	eax, [ebp+var_108]
		mov	[ebp+var_98], 0FFFFFFFFh
		mov	[esp], eax
		call	ds:_Z5qFreePv
		jmp	loc_6FFD1427
sub_6FFD10F0	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn

sub_6FFD1855	proc near		; DATA XREF: sub_6FFD10F0+2Co

arg_0		= dword	ptr  4

		add	ebp, 18h
		mov	eax, [ebp-98h]
		mov	ecx, [ebp-94h]
		cmp	eax, 1
		mov	[ebp-100h], ecx
		jz	short loc_6FFD188F
		cmp	eax, 2
		jz	short loc_6FFD18A4
		cmp	eax, 3
		jz	short loc_6FFD18F1
		lea	eax, [ebp-60h]
		mov	[esp+0], eax
		mov	dword ptr [ebp-98h], 0
		call	ds:_ZN8QVariantD1Ev

loc_6FFD188F:				; CODE XREF: sub_6FFD1855+18j
		lea	eax, [ebp-50h]
		mov	[esp+0], eax
		mov	dword ptr [ebp-98h], 0
		call	sub_6FFDF990

loc_6FFD18A4:				; CODE XREF: sub_6FFD1855+1Dj
		mov	edx, [ebp-100h]
		mov	eax, [ebp-40h]
		mov	[ebp-0F8h], edx
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jnz	short loc_6FFD18D9
		mov	eax, [ebp-40h]
		mov	dword ptr [ebp-98h], 0
		mov	[esp+arg_0], eax
		lea	eax, [ebp-40h]
		mov	[esp+0], eax
		call	sub_6FFE6F70

loc_6FFD18D9:				; CODE XREF: sub_6FFD1855+66j
		mov	ecx, [ebp-0F8h]
		mov	dword ptr [ebp-98h], 0FFFFFFFFh
		mov	[esp+0], ecx
		call	_Unwind_SjLj_Resume
; ---------------------------------------------------------------------------

loc_6FFD18F1:				; CODE XREF: sub_6FFD1855+22j
		mov	eax, [ebp-100h]
		mov	[ebp-0FCh], eax
		mov	eax, [ebp-30h]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jnz	short loc_6FFD1926
		mov	eax, [ebp-30h]
		mov	dword ptr [ebp-98h], 0
		mov	[esp+arg_0], eax
		lea	eax, [ebp-30h]
		mov	[esp+0], eax
		call	sub_6FFE6340

loc_6FFD1926:				; CODE XREF: sub_6FFD1855+B3j
		mov	edx, [ebp-0FCh]
		mov	dword ptr [ebp-98h], 0FFFFFFFFh
		mov	[esp+0], edx
		call	_Unwind_SjLj_Resume
sub_6FFD1855	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  30. _ZN16DBusMenuImporter21slotGetLayoutFinishedEP23QDBusPendingCallWatcher

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public _ZN16DBusMenuImporter21slotGetLayoutFinishedEP23QDBusPendingCallWatcher
_ZN16DBusMenuImporter21slotGetLayoutFinishedEP23QDBusPendingCallWatcher	proc near
					; CODE XREF: _ZN16DBusMenuImporter18qt_static_metacallEP7QObjectN11QMetaObject4CallEiPPv+74j

var_1A8		= dword	ptr -1A8h
var_1A4		= dword	ptr -1A4h
var_1A0		= dword	ptr -1A0h
var_19C		= dword	ptr -19Ch
var_190		= dword	ptr -190h
var_18C		= dword	ptr -18Ch
var_188		= dword	ptr -188h
var_184		= dword	ptr -184h
var_180		= dword	ptr -180h
var_17C		= dword	ptr -17Ch
var_178		= dword	ptr -178h
var_16C		= dword	ptr -16Ch
var_168		= dword	ptr -168h
var_164		= dword	ptr -164h
var_160		= dword	ptr -160h
var_15C		= dword	ptr -15Ch
var_158		= dword	ptr -158h
var_154		= dword	ptr -154h
var_150		= dword	ptr -150h
var_14C		= dword	ptr -14Ch
var_148		= dword	ptr -148h
var_144		= dword	ptr -144h
var_140		= dword	ptr -140h
var_13C		= dword	ptr -13Ch
var_138		= dword	ptr -138h
var_134		= dword	ptr -134h
var_130		= dword	ptr -130h
var_12C		= dword	ptr -12Ch
var_128		= dword	ptr -128h
var_124		= dword	ptr -124h
var_120		= dword	ptr -120h
var_11C		= dword	ptr -11Ch
var_118		= dword	ptr -118h
var_114		= dword	ptr -114h
var_110		= dword	ptr -110h
var_10C		= byte ptr -10Ch
var_108		= dword	ptr -108h
var_F4		= dword	ptr -0F4h
var_F0		= dword	ptr -0F0h
var_EC		= dword	ptr -0ECh
var_E8		= dword	ptr -0E8h
var_E4		= dword	ptr -0E4h
var_D8		= dword	ptr -0D8h
var_A8		= byte ptr -0A8h
var_98		= dword	ptr -98h
var_94		= dword	ptr -94h
var_90		= dword	ptr -90h
var_8C		= dword	ptr -8Ch
var_88		= byte ptr -88h
var_84		= dword	ptr -84h
var_80		= dword	ptr -80h
var_78		= byte ptr -78h
var_64		= byte ptr -64h
var_60		= dword	ptr -60h
var_5C		= dword	ptr -5Ch
var_58		= dword	ptr -58h
var_54		= dword	ptr -54h
var_50		= dword	ptr -50h
var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= byte ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= byte ptr -18h
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		lea	eax, [ebp+var_18]
		sub	esp, 1BCh
		mov	[ebp+var_EC], eax
		lea	eax, [ebp+var_10C]
		mov	[esp], eax
		lea	ebx, [ebp+var_78]
		mov	[ebp+var_E4], esp
		mov	[ebp+var_F4], offset sub_6FFEC1F0
		mov	[ebp+var_F0], offset dword_6FFED0B4
		mov	[ebp+var_E8], offset sub_6FFD295B
		call	_Unwind_SjLj_Register
		mov	eax, ds:off_6FFF507C
		lea	ecx, [ebp+var_78]
		mov	edx, [ebp+arg_4]
		mov	[esp], ecx
		mov	[ebp+var_108], 0FFFFFFFFh
		mov	[esp+8], eax
		mov	[esp+4], edx
		call	ds:_ZNK7QObject8propertyEPKc
		mov	[ebp+var_108], 13h
		sub	esp, 4
		mov	dword ptr [esp+4], 0
		mov	[esp], ebx
		call	ds:_ZNK8QVariant5toIntEPb
		lea	esi, [ebp+var_1C]
		mov	[ebp+var_168], eax
		mov	[esp], ebx
		mov	[ebp+var_108], 0FFFFFFFFh
		call	ds:_ZN8QVariantD1Ev
		mov	[esp], esi
		call	ds:_ZN21QDBusPendingReplyDataC2Ev
		mov	eax, [ebp+arg_4]
		mov	[esp], esi
		mov	[ebp+var_108], 0Ah
		add	eax, 8
		mov	[esp+4], eax
		call	ds:_ZN21QDBusPendingReplyData6assignERK16QDBusPendingCall
		mov	edi, [ebp+var_1C]
		test	edi, edi
		jz	short loc_6FFD1A58
		mov	eax, dword_6FFF2AAC
		mov	[ebp+var_4C], 3
		test	eax, eax
		jz	loc_6FFD1F1E

loc_6FFD1A2B:				; CODE XREF: _ZN16DBusMenuImporter21slotGetLayoutFinishedEP23QDBusPendingCallWatcher+600j
		mov	eax, dword_6FFF2AAC
		mov	dword ptr [esp+4], 2
		mov	[ebp+var_108], 0Ah
		mov	[ebp+var_48], eax
		lea	eax, [ebp+var_4C]
		mov	[esp+8], eax
		lea	eax, [ebp+var_1C]
		mov	[esp], eax
		call	ds:_ZN21QDBusPendingReplyData12setMetaTypesEiPKi

loc_6FFD1A58:				; CODE XREF: _ZN16DBusMenuImporter21slotGetLayoutFinishedEP23QDBusPendingCallWatcher+D5j
		lea	eax, [ebp+var_1C]
		mov	[esp], eax
		mov	[ebp+var_108], 12h
		call	ds:_ZNK16QDBusPendingCall7isValidEv
		test	al, al
		jnz	loc_6FFD1D40
		lea	eax, [ebp+var_88]
		lea	edx, [ebp+var_1C]
		mov	[esp+4], edx
		mov	[esp], eax
		mov	[ebp+var_108], 12h
		call	ds:_ZNK16QDBusPendingCall5errorEv
		sub	esp, 4
		lea	eax, [ebp+var_24]
		lea	edx, [ebp+var_88]
		mov	[esp+4], edx
		mov	[esp], eax
		mov	[ebp+var_108], 11h
		call	ds:_ZNK10QDBusError7messageEv
		sub	esp, 4
		mov	dword ptr [esp], 18h ; size_t
		mov	[ebp+var_108], 10h
		call	sub_6FFEAE70
		mov	[ebp+var_154], eax
		lea	eax, [ebp+var_34]
		mov	ecx, [ebp+var_154]
		mov	[esp+8], eax
		mov	eax, [ebp+var_154]
		mov	[ebp+var_34], 2
		mov	[ebp+var_108], 6
		mov	[esp], ecx
		add	eax, 8
		mov	[esp+4], eax
		call	ds:_ZN11QTextStreamC1EP7QString6QFlagsIN9QIODevice12OpenModeFlagEE
		mov	ebx, [ebp+var_154]
		mov	eax, ds:_ZN7QString11shared_nullE
		mov	[ebx+8], eax
		lock inc dword ptr [eax]
		setnz	dl
		lea	eax, [ebp+var_38]
		mov	dword ptr [ebx+0Ch], 1
		mov	dword ptr [ebx+10h], 1
		mov	byte ptr [ebx+15h], 1
		mov	[ebp+var_20], ebx
		mov	byte ptr [ebx+14h], 0
		mov	dword ptr [esp+8], 0FFFFFFFFh
		mov	dword ptr [esp+4], offset a31m_1 ; "\x1B[31m"
		mov	[esp], eax
		mov	[ebp+var_108], 0Fh
		call	ds:_ZN7QString9fromAsciiEPKci
		sub	esp, 4
		lea	eax, [ebp+var_38]
		mov	[esp+4], eax
		mov	eax, [ebp+var_20]
		mov	[ebp+var_108], 5
		mov	[esp], eax
		call	ds:_ZN11QTextStreamlsERK7QString
		mov	eax, [ebp+var_38]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jz	loc_6FFD22BB
		mov	eax, [ebp+var_20]
		cmp	byte ptr [eax+14h], 0
		jnz	loc_6FFD229B

loc_6FFD1B9D:				; CODE XREF: _ZN16DBusMenuImporter21slotGetLayoutFinishedEP23QDBusPendingCallWatcher+976j
					; _ZN16DBusMenuImporter21slotGetLayoutFinishedEP23QDBusPendingCallWatcher+998j
		lea	eax, [ebp+var_3C]
		mov	dword ptr [esp+8], 0FFFFFFFFh
		mov	dword ptr [esp+4], offset aVoidDbusmenu_4 ; "void DBusMenuImporter::slotGetLayoutFin"...
		mov	[esp], eax
		mov	[ebp+var_108], 0Fh
		call	ds:_ZN7QString9fromAsciiEPKci
		sub	esp, 4
		lea	eax, [ebp+var_3C]
		mov	[esp+4], eax
		mov	eax, [ebp+var_20]
		mov	[ebp+var_108], 4
		mov	[esp], eax
		call	ds:_ZN11QTextStreamlsERK7QString
		mov	eax, [ebp+var_3C]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jz	loc_6FFD2276
		mov	eax, [ebp+var_20]
		cmp	byte ptr [eax+14h], 0
		jnz	loc_6FFD2256

loc_6FFD1C01:				; CODE XREF: _ZN16DBusMenuImporter21slotGetLayoutFinishedEP23QDBusPendingCallWatcher+931j
					; _ZN16DBusMenuImporter21slotGetLayoutFinishedEP23QDBusPendingCallWatcher+953j
		lea	eax, [ebp+var_40]
		mov	dword ptr [esp+8], 0FFFFFFFFh
		mov	dword ptr [esp+4], offset a0m_1	; "\x1B[0m:"
		mov	[esp], eax
		mov	[ebp+var_108], 0Fh
		call	ds:_ZN7QString9fromAsciiEPKci
		sub	esp, 4
		lea	eax, [ebp+var_40]
		mov	[esp+4], eax
		mov	eax, [ebp+var_20]
		mov	[ebp+var_108], 3
		mov	[esp], eax
		call	ds:_ZN11QTextStreamlsERK7QString
		mov	eax, [ebp+var_40]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jz	loc_6FFD21F8
		mov	eax, [ebp+var_20]
		cmp	byte ptr [eax+14h], 0
		jnz	loc_6FFD21D5

loc_6FFD1C65:				; CODE XREF: _ZN16DBusMenuImporter21slotGetLayoutFinishedEP23QDBusPendingCallWatcher+8B3j
					; _ZN16DBusMenuImporter21slotGetLayoutFinishedEP23QDBusPendingCallWatcher+8D5j
		mov	byte ptr [eax+14h], 1
		mov	eax, [ebp+var_20]
		mov	dword ptr [esp+4], 20h
		mov	[ebp+var_108], 0Fh
		mov	[esp], eax
		call	ds:_ZN11QTextStreamlsEc
		mov	eax, [ebp+var_20]
		mov	dword ptr [esp+4], 22h
		mov	[esp], eax
		call	ds:_ZN11QTextStreamlsEc
		lea	edx, [ebp+var_24]
		mov	[esp+4], edx
		mov	[esp], eax
		call	ds:_ZN11QTextStreamlsERK7QString
		mov	dword ptr [esp+4], 22h
		mov	[esp], eax
		call	ds:_ZN11QTextStreamlsEc
		mov	eax, [ebp+var_20]
		cmp	byte ptr [eax+14h], 0
		jnz	loc_6FFD21BE

loc_6FFD1CC9:				; CODE XREF: _ZN16DBusMenuImporter21slotGetLayoutFinishedEP23QDBusPendingCallWatcher+890j
		lea	eax, [ebp+var_20]
		mov	[esp], eax
		mov	[ebp+var_108], 10h
		call	sub_6FFE9DD0
		mov	eax, [ebp+var_24]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jz	loc_6FFD21A3

loc_6FFD1CEF:				; CODE XREF: _ZN16DBusMenuImporter21slotGetLayoutFinishedEP23QDBusPendingCallWatcher+879j
		mov	eax, [ebp+var_80]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jz	loc_6FFD223B

loc_6FFD1D00:				; CODE XREF: _ZN16DBusMenuImporter21slotGetLayoutFinishedEP23QDBusPendingCallWatcher+911j
		mov	eax, [ebp+var_84]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jz	loc_6FFD221D

loc_6FFD1D14:				; CODE XREF: _ZN16DBusMenuImporter21slotGetLayoutFinishedEP23QDBusPendingCallWatcher+8F6j
					; _ZN16DBusMenuImporter21slotGetLayoutFinishedEP23QDBusPendingCallWatcher+9E8j	...
		lea	eax, [ebp+var_1C]
		mov	[esp], eax
		mov	[ebp+var_108], 0FFFFFFFFh
		call	ds:_ZN21QDBusPendingReplyDataD2Ev
		lea	eax, [ebp+var_10C]
		mov	[esp], eax
		call	_Unwind_SjLj_Unregister
		lea	esp, [ebp-0Ch]
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_6FFD1D40:				; CODE XREF: _ZN16DBusMenuImporter21slotGetLayoutFinishedEP23QDBusPendingCallWatcher+130j
		lea	eax, [ebp+var_A8]
		lea	edx, [ebp+var_1C]
		mov	dword ptr [esp+8], 1
		mov	[esp+4], edx
		mov	[esp], eax
		mov	[ebp+var_108], 12h
		call	ds:_ZNK21QDBusPendingReplyData10argumentAtEi
		sub	esp, 4
		lea	eax, [ebp+var_A8]
		mov	[esp], eax
		mov	[ebp+var_108], 9
		call	ds:_ZNK8QVariant8userTypeEv
		mov	[ebp+var_180], eax
		mov	eax, dword_6FFF2AA0
		test	eax, eax
		jz	loc_6FFD252F
		mov	eax, dword_6FFF2AA0
		cmp	[ebp+var_180], eax
		jz	loc_6FFD2562

loc_6FFD1DA8:				; CODE XREF: _ZN16DBusMenuImporter21slotGetLayoutFinishedEP23QDBusPendingCallWatcher+C1Cj
		mov	eax, dword_6FFF2AAC
		test	eax, eax
		jnz	short loc_6FFD1DDD
		mov	dword ptr [esp+8], offset sub_6FFDECE0
		mov	dword ptr [esp+4], offset sub_6FFDDF50
		mov	dword ptr [esp], offset	aDbusmenulayout	; "DBusMenuLayoutItem"
		mov	[ebp+var_108], 9
		call	ds:_ZN9QMetaType12registerTypeEPKcPFvPvEPFS2_PKvE
		mov	dword_6FFF2AAC,	eax

loc_6FFD1DDD:				; CODE XREF: _ZN16DBusMenuImporter21slotGetLayoutFinishedEP23QDBusPendingCallWatcher+46Fj
		mov	edi, dword_6FFF2AAC
		lea	eax, [ebp+var_A8]
		mov	[esp], eax
		mov	[ebp+var_108], 9
		mov	[ebp+var_17C], edi
		call	ds:_ZNK8QVariant8userTypeEv
		cmp	edi, eax
		jz	loc_6FFD2728
		cmp	[ebp+var_17C], 0FFh
		jle	loc_6FFD26A3

loc_6FFD1E1A:				; CODE XREF: _ZN16DBusMenuImporter21slotGetLayoutFinishedEP23QDBusPendingCallWatcher+E20j
		mov	eax, ds:_ZN8QMapData11shared_nullE
		mov	[ebp+var_50], 0
		mov	[ebp+var_58], 0
		mov	[ebp+var_54], eax
		lock inc dword ptr [eax+34h]
		setnz	dl
		mov	eax, ds:_ZN9QListData11shared_nullE
		mov	[ebp+var_50], eax
		lock inc dword ptr [eax]
		setnz	dl

loc_6FFD1E45:				; CODE XREF: _ZN16DBusMenuImporter21slotGetLayoutFinishedEP23QDBusPendingCallWatcher+C91j
					; _ZN16DBusMenuImporter21slotGetLayoutFinishedEP23QDBusPendingCallWatcher+DE3j	...
		lea	eax, [ebp+var_A8]
		mov	[esp], eax
		mov	[ebp+var_108], 12h
		call	ds:_ZN8QVariantD1Ev
		mov	ebx, [ebp+var_168]
		mov	ecx, [ebp+arg_0]
		test	ebx, ebx
		mov	eax, [ecx+8]
		jnz	loc_6FFD2895
		mov	eax, [eax]
		mov	ebx, [eax+8]
		mov	[ebp+var_178], eax
		mov	[ebp+var_16C], ebx
		mov	esi, [ebx+8]
		test	esi, esi
		mov	[ebp+var_13C], esi
		jz	loc_6FFD2765

loc_6FFD1E94:				; CODE XREF: _ZN16DBusMenuImporter21slotGetLayoutFinishedEP23QDBusPendingCallWatcher+E5Bj
		mov	ebx, [ebp+var_13C]
		mov	[ebp+var_108], 0Eh
		mov	[esp], ebx
		call	ds:_ZN5QMenu5clearEv
		mov	eax, [ebp+var_50]
		mov	[ebp+var_98], eax
		lock inc dword ptr [eax]
		setnz	dl
		mov	eax, [ebp+var_98]
		test	byte ptr [eax+10h], 1
		jz	loc_6FFD2689

loc_6FFD1ECC:				; CODE XREF: _ZN16DBusMenuImporter21slotGetLayoutFinishedEP23QDBusPendingCallWatcher+D5Ej
		mov	edx, [ebp+var_98]
		mov	[ebp+var_94], 0
		mov	eax, [edx+8]
		lea	eax, [edx+eax*4+14h]
		mov	[ebp+var_90], eax
		mov	ecx, [edx+0Ch]
		lea	edx, [edx+ecx*4+14h]
		cmp	eax, edx
		mov	[ebp+var_8C], edx
		jz	loc_6FFD22E0
		mov	esi, [ebp+var_13C]
		lea	edi, [ebp+var_2C]
		mov	[ebp+var_19C], edi
		mov	[ebp+var_138], esi
		mov	[ebp+var_134], esi
		jmp	loc_6FFD20DF
; ---------------------------------------------------------------------------

loc_6FFD1F1E:				; CODE XREF: _ZN16DBusMenuImporter21slotGetLayoutFinishedEP23QDBusPendingCallWatcher+E5j
		mov	dword ptr [esp+8], offset sub_6FFDECE0
		mov	dword ptr [esp+4], offset sub_6FFDDF50
		mov	dword ptr [esp], offset	aDbusmenulayout	; "DBusMenuLayoutItem"
		call	ds:_ZN9QMetaType12registerTypeEPKcPFvPvEPFS2_PKvE
		mov	dword_6FFF2AAC,	eax
		jmp	loc_6FFD1A2B
; ---------------------------------------------------------------------------

loc_6FFD1F45:				; CODE XREF: _ZN16DBusMenuImporter21slotGetLayoutFinishedEP23QDBusPendingCallWatcher+848j
		mov	edx, [ebp+var_1A4]

loc_6FFD1F4B:				; CODE XREF: _ZN16DBusMenuImporter21slotGetLayoutFinishedEP23QDBusPendingCallWatcher+859j
		sub	eax, 1
		cmp	eax, 0FFFFFFFFh
		jnz	loc_6FFD2182
		cmp	ecx, edx
		mov	esi, [ebp+var_1A0]
		mov	[ebp+var_114], edx
		jz	short loc_6FFD1F7C
		mov	ebx, edx
		mov	edx, [ebp+var_110]
		mov	eax, [edx]
		cmp	eax, [ebx-8]
		jge	short loc_6FFD1F7C

loc_6FFD1F76:				; CODE XREF: _ZN16DBusMenuImporter21slotGetLayoutFinishedEP23QDBusPendingCallWatcher+82Ej
		mov	[ebp+var_114], ecx

loc_6FFD1F7C:				; CODE XREF: _ZN16DBusMenuImporter21slotGetLayoutFinishedEP23QDBusPendingCallWatcher+625j
					; _ZN16DBusMenuImporter21slotGetLayoutFinishedEP23QDBusPendingCallWatcher+634j
		mov	eax, [esi+34h]
		cmp	eax, 1
		jz	short loc_6FFD1F9F
		mov	eax, [ebp+var_120]
		mov	[ebp+var_108], 0Ch
		add	eax, 0Ch
		mov	[esp], eax
		call	sub_6FFE45C0

loc_6FFD1F9F:				; CODE XREF: _ZN16DBusMenuImporter21slotGetLayoutFinishedEP23QDBusPendingCallWatcher+642j
		mov	esi, [ebp+var_120]
		mov	edi, [ebp+var_114]
		cmp	edi, [esi+0Ch]
		jz	loc_6FFD23D3
		mov	edx, edi
		sub	edx, 8
		mov	[ebp+var_11C], edx
		mov	eax, [edx+4]
		test	eax, eax
		jz	short loc_6FFD1FE3
		mov	edx, [eax]
		mov	[esp], eax
		mov	eax, [edx+10h]
		mov	[ebp+var_108], 0Ch
		call	eax
		mov	ecx, [ebp+var_11C]
		mov	eax, [ecx+4]

loc_6FFD1FE3:				; CODE XREF: _ZN16DBusMenuImporter21slotGetLayoutFinishedEP23QDBusPendingCallWatcher+684j
		mov	ebx, [ebp+var_118]
		cmp	ebx, eax
		mov	[ebp+var_124], ebx
		jz	short loc_6FFD2013
		mov	eax, [ebp+var_11C]
		mov	[esp+4], ebx
		mov	[ebp+var_108], 0Ch
		add	eax, 4
		mov	[esp], eax
		call	ds:_ZN11QMetaObject11changeGuardEPP7QObjectS1_

loc_6FFD2013:				; CODE XREF: _ZN16DBusMenuImporter21slotGetLayoutFinishedEP23QDBusPendingCallWatcher+6B1j
					; _ZN16DBusMenuImporter21slotGetLayoutFinishedEP23QDBusPendingCallWatcher+BB1j
		mov	esi, [ebp+var_118]
		mov	edi, [ebp+var_134]
		mov	[ebp+var_108], 0Ch
		mov	[esp+4], esi
		mov	[esp], edi
		call	ds:_ZN7QWidget9addActionEP7QAction
		mov	dword ptr [esp], offset	a1map ;	"1map()"
		call	ds:_Z13qFlagLocationPKc
		mov	edx, [ebp+arg_0]
		mov	[ebp+var_130], eax
		mov	eax, [edx+8]
		mov	dword ptr [esp], offset	a2triggered ; "2triggered()"
		add	eax, 10h
		mov	[ebp+var_12C], eax
		call	ds:_Z13qFlagLocationPKc
		mov	ecx, [ebp+var_130]
		mov	ebx, [ebp+var_12C]
		mov	esi, [ebp+var_124]
		mov	dword ptr [esp+10h], 0
		mov	[esp+0Ch], ecx
		mov	[esp+8], ebx
		mov	[esp+4], eax
		mov	[esp], esi
		call	ds:_ZN7QObject7connectEPKS_PKcS1_S3_N2Qt14ConnectionTypeE
		mov	edi, [ebp+var_110]
		mov	edx, [ebp+arg_0]
		mov	eax, [edi]
		mov	[esp+4], esi
		mov	[esp+8], eax
		mov	eax, [edx+8]
		add	eax, 10h
		mov	[esp], eax
		call	ds:_ZN13QSignalMapper10setMappingEP7QObjecti
		mov	eax, [ebp+var_90]
		mov	edx, [ebp+var_94]
		add	eax, 4
		test	edx, edx
		mov	[ebp+var_90], eax
		jnz	loc_6FFD22E0
		cmp	eax, [ebp+var_8C]
		jz	loc_6FFD22E0

loc_6FFD20DF:				; CODE XREF: _ZN16DBusMenuImporter21slotGetLayoutFinishedEP23QDBusPendingCallWatcher+5D9j
		mov	eax, [eax]
		mov	ecx, [ebp+var_138]
		mov	esi, [ebp+arg_0]
		mov	[ebp+var_110], eax
		mov	ebx, [ebp+var_110]
		add	eax, 4
		mov	[esp+0Ch], ecx
		mov	[esp+8], eax
		mov	eax, [ebx]
		mov	[esp+4], eax
		mov	eax, [esi+8]
		mov	[ebp+var_108], 0Ch
		mov	[esp], eax
		call	sub_6FFE0440
		mov	edi, [esi+8]
		mov	[ebp+var_118], eax
		mov	[ebp+var_128], edi
		mov	esi, [edi+0Ch]
		mov	eax, [esi+34h]
		cmp	eax, 1
		jz	loc_6FFD23C0
		mov	eax, edi
		add	eax, 0Ch
		mov	[esp], eax
		mov	[ebp+var_108], 0Ch
		call	sub_6FFE45C0
		mov	edx, [ebp+arg_0]
		mov	ebx, [ebp+var_128]
		mov	edx, [edx+8]
		mov	[ebp+var_120], edx
		mov	esi, [edx+0Ch]

loc_6FFD2166:				; CODE XREF: _ZN16DBusMenuImporter21slotGetLayoutFinishedEP23QDBusPendingCallWatcher+A8Ej
		mov	ecx, [ebx+0Ch]
		mov	eax, [ecx+38h]
		test	eax, eax
		js	loc_6FFD1F76
		mov	ebx, ecx
		mov	[ebp+var_1A0], esi
		mov	[ebp+var_1A4], ecx

loc_6FFD2182:				; CODE XREF: _ZN16DBusMenuImporter21slotGetLayoutFinishedEP23QDBusPendingCallWatcher+611j
					; _ZN16DBusMenuImporter21slotGetLayoutFinishedEP23QDBusPendingCallWatcher+861j
		mov	edx, [ebx+eax*4+4]
		cmp	ecx, edx
		jz	loc_6FFD1F45
		mov	esi, [ebp+var_110]
		mov	edi, [edx-8]
		cmp	edi, [esi]
		jge	loc_6FFD1F4B
		mov	ebx, edx
		jmp	short loc_6FFD2182
; ---------------------------------------------------------------------------

loc_6FFD21A3:				; CODE XREF: _ZN16DBusMenuImporter21slotGetLayoutFinishedEP23QDBusPendingCallWatcher+3A9j
		mov	eax, [ebp+var_24]
		mov	[ebp+var_108], 11h
		mov	[esp], eax
		call	ds:_ZN7QString4freeEPNS_4DataE
		jmp	loc_6FFD1CEF
; ---------------------------------------------------------------------------

loc_6FFD21BE:				; CODE XREF: _ZN16DBusMenuImporter21slotGetLayoutFinishedEP23QDBusPendingCallWatcher+383j
		mov	dword ptr [esp+4], 20h
		mov	[esp], eax
		call	ds:_ZN11QTextStreamlsEc
		nop
		jmp	loc_6FFD1CC9
; ---------------------------------------------------------------------------

loc_6FFD21D5:				; CODE XREF: _ZN16DBusMenuImporter21slotGetLayoutFinishedEP23QDBusPendingCallWatcher+31Fj
					; _ZN16DBusMenuImporter21slotGetLayoutFinishedEP23QDBusPendingCallWatcher+8DBj
		mov	dword ptr [esp+4], 20h
		mov	[esp], eax
		mov	[ebp+var_108], 0Fh
		call	ds:_ZN11QTextStreamlsEc
		mov	eax, [ebp+var_20]
		jmp	loc_6FFD1C65
; ---------------------------------------------------------------------------

loc_6FFD21F8:				; CODE XREF: _ZN16DBusMenuImporter21slotGetLayoutFinishedEP23QDBusPendingCallWatcher+312j
		mov	eax, [ebp+var_40]
		mov	[ebp+var_108], 0Fh
		mov	[esp], eax
		call	ds:_ZN7QString4freeEPNS_4DataE
		mov	eax, [ebp+var_20]
		cmp	byte ptr [eax+14h], 0
		jz	loc_6FFD1C65
		jmp	short loc_6FFD21D5
; ---------------------------------------------------------------------------

loc_6FFD221D:				; CODE XREF: _ZN16DBusMenuImporter21slotGetLayoutFinishedEP23QDBusPendingCallWatcher+3CEj
		mov	eax, [ebp+var_84]
		mov	[ebp+var_108], 12h
		mov	[esp], eax
		call	ds:_ZN7QString4freeEPNS_4DataE
		jmp	loc_6FFD1D14
; ---------------------------------------------------------------------------

loc_6FFD223B:				; CODE XREF: _ZN16DBusMenuImporter21slotGetLayoutFinishedEP23QDBusPendingCallWatcher+3BAj
		mov	eax, [ebp+var_80]
		mov	[ebp+var_108], 2
		mov	[esp], eax
		call	ds:_ZN7QString4freeEPNS_4DataE
		jmp	loc_6FFD1D00
; ---------------------------------------------------------------------------

loc_6FFD2256:				; CODE XREF: _ZN16DBusMenuImporter21slotGetLayoutFinishedEP23QDBusPendingCallWatcher+2BBj
					; _ZN16DBusMenuImporter21slotGetLayoutFinishedEP23QDBusPendingCallWatcher+959j
		mov	dword ptr [esp+4], 20h
		mov	[esp], eax
		mov	[ebp+var_108], 0Fh
		call	ds:_ZN11QTextStreamlsEc
		jmp	loc_6FFD1C01
; ---------------------------------------------------------------------------

loc_6FFD2276:				; CODE XREF: _ZN16DBusMenuImporter21slotGetLayoutFinishedEP23QDBusPendingCallWatcher+2AEj
		mov	eax, [ebp+var_3C]
		mov	[ebp+var_108], 0Fh
		mov	[esp], eax
		call	ds:_ZN7QString4freeEPNS_4DataE
		mov	eax, [ebp+var_20]
		cmp	byte ptr [eax+14h], 0
		jz	loc_6FFD1C01
		jmp	short loc_6FFD2256
; ---------------------------------------------------------------------------

loc_6FFD229B:				; CODE XREF: _ZN16DBusMenuImporter21slotGetLayoutFinishedEP23QDBusPendingCallWatcher+257j
					; _ZN16DBusMenuImporter21slotGetLayoutFinishedEP23QDBusPendingCallWatcher+99Ej
		mov	dword ptr [esp+4], 20h
		mov	[esp], eax
		mov	[ebp+var_108], 0Fh
		call	ds:_ZN11QTextStreamlsEc
		jmp	loc_6FFD1B9D
; ---------------------------------------------------------------------------

loc_6FFD22BB:				; CODE XREF: _ZN16DBusMenuImporter21slotGetLayoutFinishedEP23QDBusPendingCallWatcher+24Aj
		mov	eax, [ebp+var_38]
		mov	[ebp+var_108], 0Fh
		mov	[esp], eax
		call	ds:_ZN7QString4freeEPNS_4DataE
		mov	eax, [ebp+var_20]
		cmp	byte ptr [eax+14h], 0
		jz	loc_6FFD1B9D
		jmp	short loc_6FFD229B
; ---------------------------------------------------------------------------

loc_6FFD22E0:				; CODE XREF: _ZN16DBusMenuImporter21slotGetLayoutFinishedEP23QDBusPendingCallWatcher+5B8j
					; _ZN16DBusMenuImporter21slotGetLayoutFinishedEP23QDBusPendingCallWatcher+78Dj	...
		mov	eax, [ebp+var_98]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jnz	short loc_6FFD2312
		mov	eax, [ebp+var_98]
		mov	[ebp+var_108], 0Eh
		mov	[esp+4], eax
		lea	eax, [ebp+var_98]
		mov	[esp], eax
		call	sub_6FFE8070

loc_6FFD2312:				; CODE XREF: _ZN16DBusMenuImporter21slotGetLayoutFinishedEP23QDBusPendingCallWatcher+9AEj
		mov	eax, [ebp+var_50]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jz	loc_6FFD25D6

loc_6FFD2323:				; CODE XREF: _ZN16DBusMenuImporter21slotGetLayoutFinishedEP23QDBusPendingCallWatcher+D1Ej
		mov	eax, [ebp+var_54]
		test	eax, eax
		jz	loc_6FFD1D14
		lock dec dword ptr [eax+34h]
		setnz	dl
		test	dl, dl
		jnz	loc_6FFD1D14
		mov	ecx, [ebp+var_54]
		mov	[ebp+var_160], ecx
		mov	eax, [ecx+4]
		cmp	ecx, eax
		jnz	short loc_6FFD2382
		jmp	loc_6FFD2663
; ---------------------------------------------------------------------------

loc_6FFD2352:				; CODE XREF: _ZN16DBusMenuImporter21slotGetLayoutFinishedEP23QDBusPendingCallWatcher+A5Fj
					; _ZN16DBusMenuImporter21slotGetLayoutFinishedEP23QDBusPendingCallWatcher+A77j
		mov	eax, [ebp+var_158]
		mov	[ebp+var_108], 12h
		add	eax, 8
		mov	[esp], eax
		call	ds:_ZN8QVariantD1Ev
		mov	edi, [ebp+var_150]
		cmp	[ebp+var_160], edi
		jz	loc_6FFD2663
		mov	eax, edi

loc_6FFD2382:				; CODE XREF: _ZN16DBusMenuImporter21slotGetLayoutFinishedEP23QDBusPendingCallWatcher+A0Bj
		mov	ebx, [eax+4]
		lea	esi, [eax-1Ch]
		mov	[ebp+var_158], esi
		mov	[ebp+var_150], ebx
		mov	edx, [eax-1Ch]
		lock dec dword ptr [edx]
		setnz	cl
		test	cl, cl
		jnz	short loc_6FFD2352
		mov	eax, [eax-1Ch]
		mov	[ebp+var_108], 12h
		mov	[esp], eax
		call	ds:_ZN7QString4freeEPNS_4DataE
		jmp	short loc_6FFD2352
; ---------------------------------------------------------------------------
		align 10h

loc_6FFD23C0:				; CODE XREF: _ZN16DBusMenuImporter21slotGetLayoutFinishedEP23QDBusPendingCallWatcher+7F4j
		mov	eax, [ebp+var_128]
		mov	[ebp+var_120], eax
		mov	ebx, eax
		jmp	loc_6FFD2166
; ---------------------------------------------------------------------------

loc_6FFD23D3:				; CODE XREF: _ZN16DBusMenuImporter21slotGetLayoutFinishedEP23QDBusPendingCallWatcher+66Ej
		mov	eax, [ebp+var_118]
		lea	edx, [ebp+var_2C]
		mov	[esp], edx
		mov	[ebp+var_108], 0Ch
		mov	[ebp+var_124], eax
		mov	[ebp+var_2C], eax
		call	ds:_ZN11QMetaObject8addGuardEPP7QObject
		mov	ecx, [ebp+arg_0]
		mov	ecx, [ecx+8]
		mov	[ebp+var_140], ecx
		mov	ebx, [ebp+var_140]
		add	ecx, 0Ch
		mov	[ebp+var_15C], ecx
		mov	eax, [ebx+0Ch]
		mov	eax, [eax+34h]
		cmp	eax, 1
		jz	short loc_6FFD2430
		mov	[esp], ecx
		mov	[ebp+var_108], 0Bh
		call	sub_6FFE45C0

loc_6FFD2430:				; CODE XREF: _ZN16DBusMenuImporter21slotGetLayoutFinishedEP23QDBusPendingCallWatcher+ADCj
		mov	esi, [ebp+var_140]
		mov	eax, [esi+0Ch]
		mov	ecx, [eax+38h]
		test	ecx, ecx
		js	short loc_6FFD249C
		mov	edx, [ebp+var_140]
		lea	edi, ds:0[ecx*4]
		mov	[ebp+var_14C], edi
		mov	edi, [ebp+var_110]
		mov	esi, [edx+0Ch]
		lea	esi, [esi+0]

loc_6FFD2460:				; CODE XREF: _ZN16DBusMenuImporter21slotGetLayoutFinishedEP23QDBusPendingCallWatcher+B2Fj
					; _ZN16DBusMenuImporter21slotGetLayoutFinishedEP23QDBusPendingCallWatcher+B5Aj
		mov	edx, eax
		mov	eax, [eax+ecx*4+4]
		cmp	eax, esi
		jz	short loc_6FFD2471
		mov	ebx, [eax-8]
		cmp	ebx, [edi]
		jl	short loc_6FFD2460

loc_6FFD2471:				; CODE XREF: _ZN16DBusMenuImporter21slotGetLayoutFinishedEP23QDBusPendingCallWatcher+B28j
		mov	ebx, [ebp+var_14C]
		sub	ecx, 1
		mov	[ebp+ebx+var_D8], edx
		sub	ebx, 4
		cmp	ecx, 0FFFFFFFFh
		mov	[ebp+var_14C], ebx
		jz	short loc_6FFD249C
		mov	eax, edx
		mov	edx, [ebp+var_140]
		mov	esi, [edx+0Ch]
		jmp	short loc_6FFD2460
; ---------------------------------------------------------------------------

loc_6FFD249C:				; CODE XREF: _ZN16DBusMenuImporter21slotGetLayoutFinishedEP23QDBusPendingCallWatcher+AFEj
					; _ZN16DBusMenuImporter21slotGetLayoutFinishedEP23QDBusPendingCallWatcher+B4Dj
		mov	esi, [ebp+var_140]
		mov	edx, [esi+0Ch]
		cmp	edx, eax
		jz	short loc_6FFD24F6
		mov	edi, [ebp+var_110]
		mov	ecx, [edi]
		cmp	ecx, [eax-8]
		jl	short loc_6FFD24F6
		sub	eax, 4
		cmp	[ebp+var_19C], eax
		jz	short loc_6FFD24DB
		mov	edx, [ebp+var_2C]
		mov	[esp], eax
		mov	[ebp+var_108], 0Bh
		mov	[esp+4], edx
		call	ds:_ZN11QMetaObject11changeGuardEPP7QObjectS1_

loc_6FFD24DB:				; CODE XREF: _ZN16DBusMenuImporter21slotGetLayoutFinishedEP23QDBusPendingCallWatcher+B7Fj
					; _ZN16DBusMenuImporter21slotGetLayoutFinishedEP23QDBusPendingCallWatcher+BEDj
		lea	eax, [ebp+var_2C]
		mov	[esp], eax
		mov	[ebp+var_108], 0Ch
		call	ds:_ZN11QMetaObject11removeGuardEPP7QObject
		jmp	loc_6FFD2013
; ---------------------------------------------------------------------------

loc_6FFD24F6:				; CODE XREF: _ZN16DBusMenuImporter21slotGetLayoutFinishedEP23QDBusPendingCallWatcher+B67j
					; _ZN16DBusMenuImporter21slotGetLayoutFinishedEP23QDBusPendingCallWatcher+B74j
		mov	esi, [ebp+var_110]
		lea	ebx, [ebp+var_2C]
		mov	eax, [ebp+var_15C]
		lea	edi, [ebp+var_D8]
		mov	[esp+10h], ebx
		mov	[esp+8], edi
		mov	[esp+0Ch], esi
		mov	[esp+4], edx
		mov	[esp], eax
		mov	[ebp+var_108], 0Bh
		call	sub_6FFE4490
		jmp	short loc_6FFD24DB
; ---------------------------------------------------------------------------

loc_6FFD252F:				; CODE XREF: _ZN16DBusMenuImporter21slotGetLayoutFinishedEP23QDBusPendingCallWatcher+451j
		mov	dword ptr [esp+8], offset sub_6FFDE9E0
		mov	dword ptr [esp+4], offset sub_6FFDDD70
		mov	dword ptr [esp], offset	aQdbusargument ; "QDBusArgument"
		call	ds:_ZN9QMetaType12registerTypeEPKcPFvPvEPFS2_PKvE
		mov	dword_6FFF2AA0,	eax
		mov	eax, dword_6FFF2AA0
		cmp	[ebp+var_180], eax
		jnz	loc_6FFD1DA8

loc_6FFD2562:				; CODE XREF: _ZN16DBusMenuImporter21slotGetLayoutFinishedEP23QDBusPendingCallWatcher+462j
		lea	eax, [ebp+var_30]
		lea	edx, [ebp+var_A8]
		mov	[esp+4], edx
		mov	[esp], eax
		mov	[ebp+var_108], 9
		call	sub_6FFDBE80
		mov	eax, ds:_ZN8QMapData11shared_nullE
		push	esi
		mov	[ebp+var_54], eax
		lock inc dword ptr [eax+34h]
		setnz	dl
		mov	eax, ds:_ZN9QListData11shared_nullE
		mov	[ebp+var_50], eax
		lock inc dword ptr [eax]
		setnz	dl
		lea	eax, [ebp+var_58]
		mov	[esp+4], eax
		lea	eax, [ebp+var_30]
		mov	[esp], eax
		mov	[ebp+var_108], 8
		call	_ZrsRK13QDBusArgumentR18DBusMenuLayoutItem
		lea	eax, [ebp+var_30]
		mov	[esp], eax
		mov	[ebp+var_108], 9
		call	ds:_ZN13QDBusArgumentD1Ev
		jmp	loc_6FFD1E45
; ---------------------------------------------------------------------------

loc_6FFD25D6:				; CODE XREF: _ZN16DBusMenuImporter21slotGetLayoutFinishedEP23QDBusPendingCallWatcher+9DDj
		mov	ecx, [ebp+var_50]
		mov	edx, [ecx+0Ch]
		mov	eax, ecx
		add	eax, 14h
		mov	[ebp+var_184], ecx
		lea	edx, [eax+edx*4]
		mov	[ebp+var_144], edx
		mov	edx, [ecx+8]
		lea	edx, [eax+edx*4]
		cmp	[ebp+var_144], edx
		mov	[ebp+var_164], edx
		jz	short loc_6FFD2645

loc_6FFD2604:				; CODE XREF: _ZN16DBusMenuImporter21slotGetLayoutFinishedEP23QDBusPendingCallWatcher+D03j
		sub	[ebp+var_144], 4
		mov	ebx, [ebp+var_144]
		mov	ebx, [ebx]
		test	ebx, ebx
		mov	[ebp+var_148], ebx
		jz	short loc_6FFD2637
		mov	[esp], ebx
		mov	[ebp+var_108], 1
		call	sub_6FFDFBB0
		mov	[esp], ebx
		call	sub_6FFEAE50

loc_6FFD2637:				; CODE XREF: _ZN16DBusMenuImporter21slotGetLayoutFinishedEP23QDBusPendingCallWatcher+CDBj
		mov	esi, [ebp+var_144]
		cmp	[ebp+var_164], esi
		jnz	short loc_6FFD2604

loc_6FFD2645:				; CODE XREF: _ZN16DBusMenuImporter21slotGetLayoutFinishedEP23QDBusPendingCallWatcher+CC2j
		mov	edi, [ebp+var_184]
		mov	[ebp+var_108], 1
		mov	[esp], edi
		call	ds:_Z5qFreePv
		jmp	loc_6FFD2323
; ---------------------------------------------------------------------------

loc_6FFD2663:				; CODE XREF: _ZN16DBusMenuImporter21slotGetLayoutFinishedEP23QDBusPendingCallWatcher+A0Dj
					; _ZN16DBusMenuImporter21slotGetLayoutFinishedEP23QDBusPendingCallWatcher+A3Aj
		mov	eax, [ebp+var_160]
		mov	dword ptr [esp+4], 1Ch
		mov	[ebp+var_108], 12h
		mov	[esp], eax
		call	ds:_ZN8QMapData16continueFreeDataEi
		jmp	loc_6FFD1D14
; ---------------------------------------------------------------------------

loc_6FFD2689:				; CODE XREF: _ZN16DBusMenuImporter21slotGetLayoutFinishedEP23QDBusPendingCallWatcher+586j
		mov	eax, [eax+4]
		mov	[esp+4], eax
		lea	eax, [ebp+var_98]
		mov	[esp], eax
		call	sub_6FFE77F0
		jmp	loc_6FFD1ECC
; ---------------------------------------------------------------------------

loc_6FFD26A3:				; CODE XREF: _ZN16DBusMenuImporter21slotGetLayoutFinishedEP23QDBusPendingCallWatcher+4D4j
		mov	eax, ds:_ZN8QMapData11shared_nullE
		mov	[ebp+var_60], eax
		lock inc dword ptr [eax+34h]
		setnz	dl
		mov	eax, ds:_ZN9QListData11shared_nullE
		mov	[ebp+var_5C], eax
		lock inc dword ptr [eax]
		setnz	dl
		mov	eax, ds:_ZN8QVariant7handlerE
		lea	edx, [ebp+var_64]
		mov	eax, [eax]
		mov	[esp+8], edx
		mov	edx, [ebp+var_17C]
		mov	dword ptr [esp+0Ch], 0
		mov	[esp+4], edx
		lea	edx, [ebp+var_A8]
		mov	[esp], edx
		mov	eax, [eax+18h]
		mov	[ebp+var_108], 7
		call	eax
		test	al, al
		jz	short loc_6FFD274B
		lea	eax, [ebp+var_64]
		mov	[esp+4], eax
		lea	eax, [ebp+var_58]
		mov	[esp], eax
		call	sub_6FFDFAB0
		lea	eax, [ebp+var_64]
		mov	[esp], eax
		mov	[ebp+var_108], 9
		call	sub_6FFDFBB0
		jmp	loc_6FFD1E45
; ---------------------------------------------------------------------------

loc_6FFD2728:				; CODE XREF: _ZN16DBusMenuImporter21slotGetLayoutFinishedEP23QDBusPendingCallWatcher+4C4j
		lea	eax, [ebp+var_A8]
		mov	[esp], eax
		call	ds:_ZNK8QVariant9constDataEv
		mov	[esp+4], eax
		lea	eax, [ebp+var_58]
		mov	[esp], eax
		call	sub_6FFDFAB0
		jmp	loc_6FFD1E45
; ---------------------------------------------------------------------------

loc_6FFD274B:				; CODE XREF: _ZN16DBusMenuImporter21slotGetLayoutFinishedEP23QDBusPendingCallWatcher+DBAj
		lea	eax, [ebp+var_64]
		mov	[esp], eax
		mov	[ebp+var_108], 9
		call	sub_6FFDFBB0
		jmp	loc_6FFD1E1A
; ---------------------------------------------------------------------------

loc_6FFD2765:				; CODE XREF: _ZN16DBusMenuImporter21slotGetLayoutFinishedEP23QDBusPendingCallWatcher+54Ej
		mov	dword ptr [esp+4], 0
		mov	[esp], ebx
		mov	[ebp+var_108], 0Eh
		call	sub_6FFE0380
		mov	[ebx+8], eax
		mov	edi, [ebp+var_178]
		mov	eax, [edi+8]
		mov	eax, [eax+8]
		mov	[ebp+var_13C], eax

loc_6FFD2794:				; CODE XREF: _ZN16DBusMenuImporter21slotGetLayoutFinishedEP23QDBusPendingCallWatcher+FD9j
		cmp	[ebp+var_13C], 0
		jnz	loc_6FFD1E94

loc_6FFD27A1:				; CODE XREF: _ZN16DBusMenuImporter21slotGetLayoutFinishedEP23QDBusPendingCallWatcher+FBEj
		lea	eax, [ebp+var_28]
		mov	[esp], eax
		mov	[ebp+var_108], 0Eh
		call	sub_6FFDF180
		mov	eax, [ebp+var_28]
		push	ecx
		mov	byte ptr [eax+14h], 0
		lea	eax, [ebp+var_28]
		mov	dword ptr [esp+4], offset a31m_1 ; "\x1B[31m"
		mov	[esp], eax
		mov	[ebp+var_108], 0Dh
		call	sub_6FFE9FF0
		mov	dword ptr [esp+4], offset aVoidDbusmenu_4 ; "void DBusMenuImporter::slotGetLayoutFin"...
		mov	[esp], eax
		call	sub_6FFE9FF0
		mov	dword ptr [esp+4], offset a0m_1	; "\x1B[0m:"
		mov	[esp], eax
		call	sub_6FFE9FF0
		mov	[ebp+var_18C], eax
		mov	esi, eax
		mov	eax, [eax]
		mov	byte ptr [eax+14h], 1
		mov	dword ptr [esp+4], 20h
		mov	eax, [esi]
		mov	[esp], eax
		call	ds:_ZN11QTextStreamlsEc
		mov	dword ptr [esp+4], offset aNoMenuForId ; "No menu for id"
		mov	[esp], esi
		call	sub_6FFE9FF0
		mov	edi, [ebp+var_168]
		mov	[ebp+var_190], eax
		mov	[esp+4], edi
		mov	eax, [eax]
		mov	[esp], eax
		call	ds:_ZN11QTextStreamlsEi
		mov	ecx, [ebp+var_190]
		mov	eax, [ecx]
		cmp	byte ptr [eax+14h], 0
		jz	short loc_6FFD2866
		mov	dword ptr [esp+4], 20h
		mov	[esp], eax
		call	ds:_ZN11QTextStreamlsEc

loc_6FFD2866:				; CODE XREF: _ZN16DBusMenuImporter21slotGetLayoutFinishedEP23QDBusPendingCallWatcher+F13j
		lea	eax, [ebp+var_28]
		mov	[esp], eax
		mov	[ebp+var_108], 0Eh
		call	sub_6FFE9DD0
		lea	eax, [ebp+var_58]
		mov	[esp], eax
		mov	[ebp+var_108], 12h
		call	sub_6FFDFBB0
		jmp	loc_6FFD1D14
; ---------------------------------------------------------------------------

loc_6FFD2895:				; CODE XREF: _ZN16DBusMenuImporter21slotGetLayoutFinishedEP23QDBusPendingCallWatcher+52Cj
		mov	edx, [eax+0Ch]
		lea	esi, [eax+0Ch]
		cmp	dword ptr [edx+3Ch], 0
		jz	short loc_6FFD28D0
		mov	ecx, [edx+38h]
		mov	ebx, edx
		mov	eax, edx

loc_6FFD28A8:				; CODE XREF: _ZN16DBusMenuImporter21slotGetLayoutFinishedEP23QDBusPendingCallWatcher+F8Ej
		test	ecx, ecx
		js	short loc_6FFD2922
		mov	edi, [esi]
		mov	[ebp+var_1A8], edi

loc_6FFD28B4:				; CODE XREF: _ZN16DBusMenuImporter21slotGetLayoutFinishedEP23QDBusPendingCallWatcher+FE0j
		mov	eax, [ebx+ecx*4+4]
		cmp	eax, [ebp+var_1A8]
		jz	short loc_6FFD28CB
		mov	edi, [ebp+var_168]
		cmp	edi, [eax-8]
		jg	short loc_6FFD291E

loc_6FFD28CB:				; CODE XREF: _ZN16DBusMenuImporter21slotGetLayoutFinishedEP23QDBusPendingCallWatcher+F7Ej
		sub	ecx, 1
		jmp	short loc_6FFD28A8
; ---------------------------------------------------------------------------

loc_6FFD28D0:				; CODE XREF: _ZN16DBusMenuImporter21slotGetLayoutFinishedEP23QDBusPendingCallWatcher+F5Fj
					; _ZN16DBusMenuImporter21slotGetLayoutFinishedEP23QDBusPendingCallWatcher+FE4j	...
		mov	[ebp+var_44], 0
		mov	[ebp+var_188], 0

loc_6FFD28E1:				; CODE XREF: _ZN16DBusMenuImporter21slotGetLayoutFinishedEP23QDBusPendingCallWatcher+1019j
		lea	eax, [ebp+var_44]
		mov	[esp], eax
		mov	[ebp+var_108], 0Eh
		call	ds:_ZN11QMetaObject11removeGuardEPP7QObject
		cmp	[ebp+var_188], 0
		jz	loc_6FFD27A1
		mov	ebx, [ebp+var_188]
		mov	[esp], ebx
		call	ds:_ZNK7QAction4menuEv
		mov	[ebp+var_13C], eax
		jmp	loc_6FFD2794
; ---------------------------------------------------------------------------

loc_6FFD291E:				; CODE XREF: _ZN16DBusMenuImporter21slotGetLayoutFinishedEP23QDBusPendingCallWatcher+F89j
		mov	ebx, eax
		jmp	short loc_6FFD28B4
; ---------------------------------------------------------------------------

loc_6FFD2922:				; CODE XREF: _ZN16DBusMenuImporter21slotGetLayoutFinishedEP23QDBusPendingCallWatcher+F6Aj
		cmp	edx, eax
		jz	short loc_6FFD28D0
		mov	ecx, [ebp+var_168]
		lea	edx, [eax-8]
		cmp	ecx, [eax-8]
		jl	short loc_6FFD28D0
		mov	eax, [edx+4]
		mov	[ebp+var_108], 0Eh
		mov	[ebp+var_44], eax
		lea	eax, [ebp+var_44]
		mov	[esp], eax
		call	ds:_ZN11QMetaObject8addGuardEPP7QObject
		mov	ecx, [ebp+var_44]
		mov	[ebp+var_188], ecx
		jmp	short loc_6FFD28E1
_ZN16DBusMenuImporter21slotGetLayoutFinishedEP23QDBusPendingCallWatcher	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn

sub_6FFD295B	proc near		; DATA XREF: _ZN16DBusMenuImporter21slotGetLayoutFinishedEP23QDBusPendingCallWatcher+3Bo

arg_0		= dword	ptr  4

		add	ebp, 18h
		mov	eax, [ebp-108h]
		mov	edx, [ebp-104h]
		cmp	eax, 1
		mov	[ebp-174h], edx
		jz	loc_6FFD2C22
		cmp	eax, 2
		jz	loc_6FFD2C08
		cmp	eax, 3
		jz	loc_6FFD2BEE
		cmp	eax, 4
		xchg	ax, ax
		jz	loc_6FFD2A60
		cmp	eax, 5
		jz	loc_6FFD2BDB
		cmp	eax, 6
		jz	loc_6FFD2BC4
		cmp	eax, 7
		nop
		lea	esi, [esi+0]
		jz	loc_6FFD2B7B
		cmp	eax, 8
		jz	loc_6FFD2BA6
		cmp	eax, 9
		jz	loc_6FFD2B4D
		cmp	eax, 0Ah
		nop
		lea	esi, [esi+0]
		jz	loc_6FFD2ABC
		cmp	eax, 0Bh
		jz	loc_6FFD2AD2
		cmp	eax, 0Ch
		jz	loc_6FFD2B36
		cmp	eax, 0Dh
		nop
		lea	esi, [esi+0]
		jz	loc_6FFD2B1C
		cmp	eax, 0Eh
		jz	short loc_6FFD2A75
		cmp	eax, 0Fh
		xchg	ax, ax
		jz	loc_6FFD2A8A
		cmp	eax, 10h
		jz	loc_6FFD2A9F
		cmp	eax, 11h
		jz	short loc_6FFD2A32
		cmp	eax, 12h
		jz	loc_6FFD2C3F
		lea	eax, [ebp-54h]
		mov	[esp+0], eax
		mov	dword ptr [ebp-108h], 0
		call	sub_6FFE4290

loc_6FFD2A32:				; CODE XREF: sub_6FFD295B+B7j
					; sub_6FFD295B+15Cj ...
		lea	eax, [ebp-1Ch]
		mov	[esp+0], eax
		mov	dword ptr [ebp-108h], 0
		call	ds:_ZN21QDBusPendingReplyDataD2Ev
		mov	edx, [ebp-174h]
		mov	dword ptr [ebp-108h], 0FFFFFFFFh
		mov	[esp+0], edx
		call	_Unwind_SjLj_Resume
; ---------------------------------------------------------------------------

loc_6FFD2A60:				; CODE XREF: sub_6FFD295B+35j
		lea	eax, [ebp-38h]
		mov	[esp+0], eax
		mov	dword ptr [ebp-108h], 0
		call	sub_6FFEA140

loc_6FFD2A75:				; CODE XREF: sub_6FFD295B+9Ej
					; sub_6FFD295B+2A8j ...
		lea	eax, [ebp-20h]
		mov	[esp+0], eax
		mov	dword ptr [ebp-108h], 0
		call	sub_6FFE9DD0

loc_6FFD2A8A:				; CODE XREF: sub_6FFD295B+A5j
					; sub_6FFD295B+28Ej
		lea	eax, [ebp-24h]
		mov	[esp+0], eax
		mov	dword ptr [ebp-108h], 0
		call	sub_6FFEA140

loc_6FFD2A9F:				; CODE XREF: sub_6FFD295B+AEj
		lea	eax, [ebp-88h]
		mov	[esp+0], eax
		mov	dword ptr [ebp-108h], 0
		call	sub_6FFDF6D0
		jmp	loc_6FFD2A32
; ---------------------------------------------------------------------------

loc_6FFD2ABC:				; CODE XREF: sub_6FFD295B+75j
		lea	eax, [ebp-2Ch]
		mov	[esp+0], eax
		mov	dword ptr [ebp-108h], 0
		call	ds:_ZN11QMetaObject11removeGuardEPP7QObject

loc_6FFD2AD2:				; CODE XREF: sub_6FFD295B+7Ej
		mov	eax, [ebp-174h]
		mov	[ebp-170h], eax
		mov	eax, [ebp-98h]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jnz	short loc_6FFD2B10
		mov	eax, [ebp-98h]
		mov	dword ptr [ebp-108h], 0
		mov	[esp+arg_0], eax
		lea	eax, [ebp-98h]
		mov	[esp+0], eax
		call	sub_6FFE8070

loc_6FFD2B10:				; CODE XREF: sub_6FFD295B+191j
		mov	edx, [ebp-170h]
		mov	[ebp-174h], edx

loc_6FFD2B1C:				; CODE XREF: sub_6FFD295B+95j
					; sub_6FFD295B+1F0j
		lea	eax, [ebp-58h]
		mov	[esp+0], eax
		mov	dword ptr [ebp-108h], 0
		call	sub_6FFDFBB0
		jmp	loc_6FFD2A32
; ---------------------------------------------------------------------------

loc_6FFD2B36:				; CODE XREF: sub_6FFD295B+87j
		lea	eax, [ebp-28h]
		mov	[esp+0], eax
		mov	dword ptr [ebp-108h], 0
		call	sub_6FFE9DD0
		jmp	short loc_6FFD2B1C
; ---------------------------------------------------------------------------

loc_6FFD2B4D:				; CODE XREF: sub_6FFD295B+67j
		lea	eax, [ebp-1Ch]
		mov	[esp+0], eax
		mov	dword ptr [ebp-108h], 0
		call	ds:_ZN21QDBusPendingReplyDataD2Ev
		mov	eax, [ebp-174h]
		mov	dword ptr [ebp-108h], 0FFFFFFFFh
		mov	[esp+0], eax
		call	_Unwind_SjLj_Resume
; ---------------------------------------------------------------------------

loc_6FFD2B7B:				; CODE XREF: sub_6FFD295B+55j
		lea	eax, [ebp-58h]
		mov	[esp+0], eax
		mov	dword ptr [ebp-108h], 0
		call	sub_6FFDFBB0
		lea	eax, [ebp-30h]
		mov	[esp+0], eax
		mov	dword ptr [ebp-108h], 0
		call	ds:_ZN13QDBusArgumentD1Ev

loc_6FFD2BA6:				; CODE XREF: sub_6FFD295B+5Ej
					; sub_6FFD295B+27Ej
		lea	eax, [ebp-0A8h]
		mov	[esp+0], eax
		mov	dword ptr [ebp-108h], 0
		call	ds:_ZN8QVariantD1Ev
		jmp	loc_6FFD2A32
; ---------------------------------------------------------------------------

loc_6FFD2BC4:				; CODE XREF: sub_6FFD295B+47j
		lea	eax, [ebp-64h]
		mov	[esp+0], eax
		mov	dword ptr [ebp-108h], 0
		call	sub_6FFDFBB0
		jmp	short loc_6FFD2BA6
; ---------------------------------------------------------------------------

loc_6FFD2BDB:				; CODE XREF: sub_6FFD295B+3Ej
		mov	esi, [ebp-154h]
		mov	[esp+0], esi
		call	sub_6FFEAE50
		jmp	loc_6FFD2A8A
; ---------------------------------------------------------------------------

loc_6FFD2BEE:				; CODE XREF: sub_6FFD295B+2Aj
		lea	eax, [ebp-3Ch]
		mov	[esp+0], eax
		mov	dword ptr [ebp-108h], 0
		call	sub_6FFEA140
		jmp	loc_6FFD2A75
; ---------------------------------------------------------------------------

loc_6FFD2C08:				; CODE XREF: sub_6FFD295B+21j
		lea	eax, [ebp-40h]
		mov	[esp+0], eax
		mov	dword ptr [ebp-108h], 0
		call	sub_6FFEA140
		jmp	loc_6FFD2A75
; ---------------------------------------------------------------------------

loc_6FFD2C22:				; CODE XREF: sub_6FFD295B+18j
		lea	eax, [ebp-84h]
		mov	[esp+0], eax
		mov	dword ptr [ebp-108h], 0
		call	sub_6FFEA140
		jmp	loc_6FFD2A32
; ---------------------------------------------------------------------------

loc_6FFD2C3F:				; CODE XREF: sub_6FFD295B+BCj
		lea	eax, [ebp-78h]
		mov	[esp+0], eax
		mov	dword ptr [ebp-108h], 0
		call	ds:_ZN8QVariantD1Ev
		mov	edx, [ebp-174h]
		mov	dword ptr [ebp-108h], 0FFFFFFFFh
		mov	[esp+0], edx
		call	_Unwind_SjLj_Resume
sub_6FFD295B	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  27. _ZN16DBusMenuImporter18qt_static_metacallEP7QObjectN11QMetaObject4CallEiPPv

; =============== S U B	R O U T	I N E =======================================


		public _ZN16DBusMenuImporter18qt_static_metacallEP7QObjectN11QMetaObject4CallEiPPv
_ZN16DBusMenuImporter18qt_static_metacallEP7QObjectN11QMetaObject4CallEiPPv proc near
					; CODE XREF: _ZN16DBusMenuImporter11qt_metacallEN11QMetaObject4CallEiPPv+6Cp
					; DATA XREF: .rdata:6FFF4E68o

var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		sub	esp, 1Ch
		mov	eax, [esp+1Ch+arg_4]
		mov	[esp+1Ch+var_C], ebx
		mov	ebx, [esp+1Ch+arg_0]
		mov	[esp+1Ch+var_8], esi
		mov	esi, [esp+1Ch+arg_8]
		mov	[esp+1Ch+var_4], edi
		mov	edi, [esp+1Ch+arg_C]
		test	eax, eax
		jz	short loc_6FFD2CA3

loc_6FFD2C93:				; CODE XREF: _ZN16DBusMenuImporter18qt_static_metacallEP7QObjectN11QMetaObject4CallEiPPv+4Fj
		mov	ebx, [esp+1Ch+var_C] ; jumptable 6FFD2CC1 default case
		mov	esi, [esp+1Ch+var_8]
		mov	edi, [esp+1Ch+var_4]
		add	esp, 1Ch
		retn
; ---------------------------------------------------------------------------

loc_6FFD2CA3:				; CODE XREF: _ZN16DBusMenuImporter18qt_static_metacallEP7QObjectN11QMetaObject4CallEiPPv+21j
		mov	[esp+1Ch+var_18], ebx
		mov	[esp+1Ch+var_1C], offset _ZN16DBusMenuImporter16staticMetaObjectE
		call	ds:_ZNK11QMetaObject4castEP7QObject
		test	eax, eax
		jz	loc_6FFD2E80

loc_6FFD2CBC:				; CODE XREF: _ZN16DBusMenuImporter18qt_static_metacallEP7QObjectN11QMetaObject4CallEiPPv+22Dj
		cmp	esi, 0Ch	; switch 13 cases
		ja	short loc_6FFD2C93 ; jumptable 6FFD2CC1	default	case
		jmp	ds:off_6FFF4E30[esi*4] ; switch	jump
; ---------------------------------------------------------------------------

loc_6FFD2CC8:				; CODE XREF: _ZN16DBusMenuImporter18qt_static_metacallEP7QObjectN11QMetaObject4CallEiPPv+51j
					; DATA XREF: .rdata:off_6FFF4E30o
		mov	eax, [edi+4]	; jumptable 6FFD2CC1 case 11
		mov	esi, [esp+1Ch+var_8]
		mov	edi, [esp+1Ch+var_4]
		mov	eax, [eax]
		mov	[esp+1Ch+arg_0], ebx
		mov	ebx, [esp+1Ch+var_C]
		mov	[esp+1Ch+arg_4], eax
		add	esp, 1Ch
		jmp	_ZN16DBusMenuImporter21slotGetLayoutFinishedEP23QDBusPendingCallWatcher
; ---------------------------------------------------------------------------
		align 10h

loc_6FFD2CF0:				; CODE XREF: _ZN16DBusMenuImporter18qt_static_metacallEP7QObjectN11QMetaObject4CallEiPPv+51j
					; DATA XREF: .rdata:off_6FFF4E30o
		mov	eax, [edi+8]	; jumptable 6FFD2CC1 case 10
		mov	esi, [esp+1Ch+var_8]
		mov	eax, [eax]
		mov	[esp+1Ch+arg_8], eax
		mov	eax, [edi+4]
		mov	edi, [esp+1Ch+var_4]
		mov	eax, [eax]
		mov	[esp+1Ch+arg_0], ebx
		mov	ebx, [esp+1Ch+var_C]
		mov	[esp+1Ch+arg_4], eax
		add	esp, 1Ch
		jmp	_ZN16DBusMenuImporter17slotLayoutUpdatedEji
; ---------------------------------------------------------------------------
		align 10h

loc_6FFD2D20:				; CODE XREF: _ZN16DBusMenuImporter18qt_static_metacallEP7QObjectN11QMetaObject4CallEiPPv+51j
					; DATA XREF: .rdata:off_6FFF4E30o
		mov	[esp+1Ch+arg_0], ebx ; jumptable 6FFD2CC1 case 9
		mov	esi, [esp+1Ch+var_8]
		mov	ebx, [esp+1Ch+var_C]
		mov	edi, [esp+1Ch+var_4]
		add	esp, 1Ch
		jmp	_ZN16DBusMenuImporter27processPendingLayoutUpdatesEv
; ---------------------------------------------------------------------------

loc_6FFD2D38:				; CODE XREF: _ZN16DBusMenuImporter18qt_static_metacallEP7QObjectN11QMetaObject4CallEiPPv+51j
					; DATA XREF: .rdata:off_6FFF4E30o
		mov	eax, [edi+8]	; jumptable 6FFD2CC1 case 8
		mov	esi, [esp+1Ch+var_8]
		mov	eax, [eax]
		mov	[esp+1Ch+arg_8], eax
		mov	eax, [edi+4]
		mov	edi, [esp+1Ch+var_4]
		mov	eax, [eax]
		mov	[esp+1Ch+arg_0], ebx
		mov	ebx, [esp+1Ch+var_C]
		mov	[esp+1Ch+arg_4], eax
		add	esp, 1Ch
		jmp	_ZN16DBusMenuImporter27slotItemActivationRequestedEij
; ---------------------------------------------------------------------------

loc_6FFD2D62:				; CODE XREF: _ZN16DBusMenuImporter18qt_static_metacallEP7QObjectN11QMetaObject4CallEiPPv+51j
					; DATA XREF: .rdata:off_6FFF4E30o
		mov	eax, [edi+4]	; jumptable 6FFD2CC1 case 7
		mov	esi, [esp+1Ch+var_8]
		mov	edi, [esp+1Ch+var_4]
		mov	eax, [eax]
		mov	[esp+1Ch+arg_0], ebx
		mov	ebx, [esp+1Ch+var_C]
		mov	[esp+1Ch+arg_4], eax
		add	esp, 1Ch
		jmp	_ZN16DBusMenuImporter31slotAboutToShowDBusCallFinishedEP23QDBusPendingCallWatcher
; ---------------------------------------------------------------------------

loc_6FFD2D83:				; CODE XREF: _ZN16DBusMenuImporter18qt_static_metacallEP7QObjectN11QMetaObject4CallEiPPv+51j
					; DATA XREF: .rdata:off_6FFF4E30o
		mov	[esp+1Ch+arg_0], ebx ; jumptable 6FFD2CC1 case 6
		mov	esi, [esp+1Ch+var_8]
		mov	ebx, [esp+1Ch+var_C]
		mov	edi, [esp+1Ch+var_4]
		add	esp, 1Ch
		jmp	_ZN16DBusMenuImporter19slotMenuAboutToHideEv
; ---------------------------------------------------------------------------
		align 10h

loc_6FFD2DA0:				; CODE XREF: _ZN16DBusMenuImporter18qt_static_metacallEP7QObjectN11QMetaObject4CallEiPPv+51j
					; DATA XREF: .rdata:off_6FFF4E30o
		mov	[esp+1Ch+arg_0], ebx ; jumptable 6FFD2CC1 case 5
		mov	esi, [esp+1Ch+var_8]
		mov	ebx, [esp+1Ch+var_C]
		mov	edi, [esp+1Ch+var_4]
		add	esp, 1Ch
		jmp	_ZN16DBusMenuImporter19slotMenuAboutToShowEv
; ---------------------------------------------------------------------------

loc_6FFD2DB8:				; CODE XREF: _ZN16DBusMenuImporter18qt_static_metacallEP7QObjectN11QMetaObject4CallEiPPv+51j
					; DATA XREF: .rdata:off_6FFF4E30o
		mov	eax, [edi+4]	; jumptable 6FFD2CC1 case 4
		mov	esi, [esp+1Ch+var_8]
		mov	edi, [esp+1Ch+var_4]
		mov	eax, [eax]
		mov	[esp+1Ch+arg_0], ebx
		mov	ebx, [esp+1Ch+var_C]
		mov	[esp+1Ch+arg_4], eax
		add	esp, 1Ch
		jmp	_ZN16DBusMenuImporter16sendClickedEventEi
; ---------------------------------------------------------------------------
		align 10h

loc_6FFD2DE0:				; CODE XREF: _ZN16DBusMenuImporter18qt_static_metacallEP7QObjectN11QMetaObject4CallEiPPv+51j
					; DATA XREF: .rdata:off_6FFF4E30o
		mov	[esp+1Ch+arg_0], ebx ; jumptable 6FFD2CC1 case 3
		mov	esi, [esp+1Ch+var_8]
		mov	ebx, [esp+1Ch+var_C]
		mov	edi, [esp+1Ch+var_4]
		add	esp, 1Ch
		jmp	_ZN16DBusMenuImporter10updateMenuEv
; ---------------------------------------------------------------------------

loc_6FFD2DF8:				; CODE XREF: _ZN16DBusMenuImporter18qt_static_metacallEP7QObjectN11QMetaObject4CallEiPPv+51j
					; DATA XREF: .rdata:off_6FFF4E30o
		mov	eax, [edi+4]	; jumptable 6FFD2CC1 case 2
		mov	esi, [esp+1Ch+var_8]
		mov	edi, [esp+1Ch+var_4]
		mov	eax, [eax]
		mov	[esp+1Ch+arg_0], ebx
		mov	ebx, [esp+1Ch+var_C]
		mov	[esp+1Ch+arg_4], eax
		add	esp, 1Ch
		jmp	_ZN16DBusMenuImporter25actionActivationRequestedEP7QAction
; ---------------------------------------------------------------------------
		align 10h

loc_6FFD2E20:				; CODE XREF: _ZN16DBusMenuImporter18qt_static_metacallEP7QObjectN11QMetaObject4CallEiPPv+51j
					; DATA XREF: .rdata:off_6FFF4E30o
		mov	[esp+1Ch+arg_0], ebx ; jumptable 6FFD2CC1 case 1
		mov	esi, [esp+1Ch+var_8]
		mov	ebx, [esp+1Ch+var_C]
		mov	edi, [esp+1Ch+var_4]
		add	esp, 1Ch
		jmp	_ZN16DBusMenuImporter18menuReadyToBeShownEv
; ---------------------------------------------------------------------------

loc_6FFD2E38:				; CODE XREF: _ZN16DBusMenuImporter18qt_static_metacallEP7QObjectN11QMetaObject4CallEiPPv+51j
					; DATA XREF: .rdata:off_6FFF4E30o
		mov	[esp+1Ch+arg_0], ebx ; jumptable 6FFD2CC1 case 0
		mov	esi, [esp+1Ch+var_8]
		mov	ebx, [esp+1Ch+var_C]
		mov	edi, [esp+1Ch+var_4]
		add	esp, 1Ch
		jmp	_ZN16DBusMenuImporter11menuUpdatedEv
; ---------------------------------------------------------------------------

loc_6FFD2E50:				; CODE XREF: _ZN16DBusMenuImporter18qt_static_metacallEP7QObjectN11QMetaObject4CallEiPPv+51j
					; DATA XREF: .rdata:off_6FFF4E30o
		mov	eax, [edi+8]	; jumptable 6FFD2CC1 case 12
		mov	esi, [esp+1Ch+var_8]
		mov	[esp+1Ch+arg_8], eax
		mov	eax, [edi+4]
		mov	edi, [esp+1Ch+var_4]
		mov	[esp+1Ch+arg_4], eax
		mov	eax, [ebx+8]
		mov	ebx, [esp+1Ch+var_C]
		mov	[esp+1Ch+arg_0], eax
		add	esp, 1Ch
		jmp	sub_6FFD10F0
; ---------------------------------------------------------------------------
		align 10h

loc_6FFD2E80:				; CODE XREF: _ZN16DBusMenuImporter18qt_static_metacallEP7QObjectN11QMetaObject4CallEiPPv+46j
		mov	[esp+1Ch+var_14], 47h
		mov	[esp+1Ch+var_18], offset aRBuildKdesup_2 ; "R:/build/kdesupport/dbusmenu-qt-0.9.2/w"...
		mov	[esp+1Ch+var_1C], offset aStaticmetaob_1 ; "staticMetaObject.cast(_o)"
		call	ds:_Z9qt_assertPKcS0_i
		jmp	loc_6FFD2CBC
_ZN16DBusMenuImporter18qt_static_metacallEP7QObjectN11QMetaObject4CallEiPPv endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  21. _ZN16DBusMenuImporter11qt_metacallEN11QMetaObject4CallEiPPv

; =============== S U B	R O U T	I N E =======================================


		public _ZN16DBusMenuImporter11qt_metacallEN11QMetaObject4CallEiPPv
_ZN16DBusMenuImporter11qt_metacallEN11QMetaObject4CallEiPPv proc near
					; DATA XREF: .rdata:6FFF9DB0o

var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		sub	esp, 2Ch
		mov	[esp+2Ch+var_C], ebx
		mov	eax, [esp+2Ch+arg_8]
		mov	[esp+2Ch+var_8], esi
		mov	ebx, [esp+2Ch+arg_4]
		mov	[esp+2Ch+var_4], edi
		mov	esi, [esp+2Ch+arg_0]
		mov	edi, [esp+2Ch+arg_C]
		mov	[esp+2Ch+var_24], eax
		mov	[esp+2Ch+var_28], ebx
		mov	[esp+2Ch+var_2C], esi
		mov	[esp+2Ch+var_20], edi
		call	ds:__imp__ZN7QObject11qt_metacallEN11QMetaObject4CallEiPPv
		test	eax, eax
		js	short loc_6FFD2EF5
		test	ebx, ebx
		jnz	short loc_6FFD2EF5
		cmp	eax, 0Ch
		nop
		jle	short loc_6FFD2F05

loc_6FFD2EF2:				; CODE XREF: _ZN16DBusMenuImporter11qt_metacallEN11QMetaObject4CallEiPPv+75j
		sub	eax, 0Dh

loc_6FFD2EF5:				; CODE XREF: _ZN16DBusMenuImporter11qt_metacallEN11QMetaObject4CallEiPPv+36j
					; _ZN16DBusMenuImporter11qt_metacallEN11QMetaObject4CallEiPPv+3Aj
		mov	ebx, [esp+2Ch+var_C]
		mov	esi, [esp+2Ch+var_8]
		mov	edi, [esp+2Ch+var_4]
		add	esp, 2Ch
		retn
; ---------------------------------------------------------------------------

loc_6FFD2F05:				; CODE XREF: _ZN16DBusMenuImporter11qt_metacallEN11QMetaObject4CallEiPPv+40j
		mov	[esp+2Ch+var_24], eax
		mov	[esp+2Ch+var_10], eax
		mov	[esp+2Ch+var_20], edi
		mov	[esp+2Ch+var_28], 0
		mov	[esp+2Ch+var_2C], esi
		call	_ZN16DBusMenuImporter18qt_static_metacallEP7QObjectN11QMetaObject4CallEiPPv
		mov	eax, [esp+2Ch+var_10]
		jmp	short loc_6FFD2EF2
_ZN16DBusMenuImporter11qt_metacallEN11QMetaObject4CallEiPPv endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6FFD2F30	proc near		; CODE XREF: sub_6FFC8280+81p
					; .text:6FFC8421p ...

var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h

		push	ebx
		sub	esp, 18h
		cmp	byte ptr ds:dword_6FFFA004, 0
		jnz	loc_6FFD305B
		mov	eax, dword_6FFF2A98
		test	eax, eax
		jz	loc_6FFD3084

loc_6FFD2F4E:				; CODE XREF: sub_6FFD2F30+176j
		mov	eax, dword_6FFF2A98
		mov	ebx, ds:_ZN13QDBusMetaType25registerMarshallOperatorsEiPFvR13QDBusArgumentPKvEPFvRKS0_PvE
		mov	[esp+1Ch+var_14], offset sub_6FFDC270
		mov	[esp+1Ch+var_18], offset sub_6FFDC020
		mov	[esp+1Ch+var_1C], eax
		call	ebx ; _ZN13QDBusMetaType25registerMarshallOperatorsEiPFvR13QDBusArgumentPKvEPFvRKS0_PvE
		mov	eax, dword_6FFF2AB0
		test	eax, eax
		jz	loc_6FFD30B0

loc_6FFD2F7B:				; CODE XREF: sub_6FFD2F30+1A2j
		mov	eax, dword_6FFF2AB0
		mov	[esp+1Ch+var_14], offset sub_6FFDC6E0
		mov	[esp+1Ch+var_18], offset loc_6FFDC0C0
		mov	[esp+1Ch+var_1C], eax
		call	ebx ; _ZN13QDBusMetaType25registerMarshallOperatorsEiPFvR13QDBusArgumentPKvEPFvRKS0_PvE
		mov	eax, dword_6FFF2AA4
		test	eax, eax
		jz	loc_6FFD30D7

loc_6FFD2FA2:				; CODE XREF: sub_6FFD2F30+1C9j
		mov	eax, dword_6FFF2AA4
		mov	[esp+1Ch+var_14], offset sub_6FFDC280
		mov	[esp+1Ch+var_18], offset sub_6FFDC030
		mov	[esp+1Ch+var_1C], eax
		call	ebx ; _ZN13QDBusMetaType25registerMarshallOperatorsEiPFvR13QDBusArgumentPKvEPFvRKS0_PvE
		mov	eax, dword_6FFF2AB4
		test	eax, eax
		jz	loc_6FFD3100

loc_6FFD2FC9:				; CODE XREF: sub_6FFD2F30+1F2j
		mov	eax, dword_6FFF2AB4
		mov	[esp+1Ch+var_14], offset sub_6FFDCB60
		mov	[esp+1Ch+var_18], offset loc_6FFDC150
		mov	[esp+1Ch+var_1C], eax
		call	ebx ; _ZN13QDBusMetaType25registerMarshallOperatorsEiPFvR13QDBusArgumentPKvEPFvRKS0_PvE
		mov	eax, dword_6FFF2AAC
		test	eax, eax
		jz	loc_6FFD3127

loc_6FFD2FF0:				; CODE XREF: sub_6FFD2F30+219j
		mov	eax, dword_6FFF2AAC
		mov	[esp+1Ch+var_14], offset sub_6FFDC6D0
		mov	[esp+1Ch+var_18], offset sub_6FFDC0B0
		mov	[esp+1Ch+var_1C], eax
		call	ebx ; _ZN13QDBusMetaType25registerMarshallOperatorsEiPFvR13QDBusArgumentPKvEPFvRKS0_PvE
		mov	eax, dword_6FFF2AB8
		test	eax, eax
		jz	loc_6FFD3150

loc_6FFD3017:				; CODE XREF: sub_6FFD2F30+242j
		mov	eax, dword_6FFF2AB8
		mov	[esp+1Ch+var_14], offset sub_6FFDCF90
		mov	[esp+1Ch+var_18], offset loc_6FFDC1E0
		mov	[esp+1Ch+var_1C], eax
		call	ebx ; _ZN13QDBusMetaType25registerMarshallOperatorsEiPFvR13QDBusArgumentPKvEPFvRKS0_PvE
		mov	eax, dword_6FFF2AA8
		test	eax, eax
		jz	short loc_6FFD3060

loc_6FFD303A:				; CODE XREF: sub_6FFD2F30+152j
		mov	eax, dword_6FFF2AA8
		mov	[esp+1Ch+var_14], offset sub_6FFDC290
		mov	[esp+1Ch+var_18], offset sub_6FFDC040
		mov	[esp+1Ch+var_1C], eax
		call	ebx ; _ZN13QDBusMetaType25registerMarshallOperatorsEiPFvR13QDBusArgumentPKvEPFvRKS0_PvE
		mov	byte ptr ds:dword_6FFFA004, 1

loc_6FFD305B:				; CODE XREF: sub_6FFD2F30+Bj
		add	esp, 18h
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_6FFD3060:				; CODE XREF: sub_6FFD2F30+108j
		mov	[esp+1Ch+var_14], offset sub_6FFDEBE0
		mov	[esp+1Ch+var_18], offset sub_6FFDDE50
		mov	[esp+1Ch+var_1C], offset aDbusmenushor_0 ; "DBusMenuShortcut"
		call	ds:_ZN9QMetaType12registerTypeEPKcPFvPvEPFS2_PKvE
		mov	dword_6FFF2AA8,	eax
		jmp	short loc_6FFD303A
; ---------------------------------------------------------------------------

loc_6FFD3084:				; CODE XREF: sub_6FFD2F30+18j
		mov	[esp+1Ch+var_14], offset sub_6FFDE7F0
		mov	[esp+1Ch+var_18], offset sub_6FFDDC80
		mov	[esp+1Ch+var_1C], offset aDbusmenuitem ; "DBusMenuItem"
		call	ds:_ZN9QMetaType12registerTypeEPKcPFvPvEPFS2_PKvE
		mov	dword_6FFF2A98,	eax
		jmp	loc_6FFD2F4E
; ---------------------------------------------------------------------------
		align 10h

loc_6FFD30B0:				; CODE XREF: sub_6FFD2F30+45j
		mov	[esp+1Ch+var_14], offset sub_6FFDEE80
		mov	[esp+1Ch+var_18], offset sub_6FFDE100
		mov	[esp+1Ch+var_1C], offset aDbusmenuitemli ; "DBusMenuItemList"
		call	ds:_ZN9QMetaType12registerTypeEPKcPFvPvEPFS2_PKvE
		mov	dword_6FFF2AB0,	eax
		jmp	loc_6FFD2F7B
; ---------------------------------------------------------------------------

loc_6FFD30D7:				; CODE XREF: sub_6FFD2F30+6Cj
		mov	[esp+1Ch+var_14], offset sub_6FFDEAC0
		mov	[esp+1Ch+var_18], offset sub_6FFDDDA0
		mov	[esp+1Ch+var_1C], offset aDbusmenuitemke ; "DBusMenuItemKeys"
		call	ds:_ZN9QMetaType12registerTypeEPKcPFvPvEPFS2_PKvE
		mov	dword_6FFF2AA4,	eax
		jmp	loc_6FFD2FA2
; ---------------------------------------------------------------------------
		align 10h

loc_6FFD3100:				; CODE XREF: sub_6FFD2F30+93j
		mov	[esp+1Ch+var_14], offset sub_6FFDEF80
		mov	[esp+1Ch+var_18], offset sub_6FFDE210
		mov	[esp+1Ch+var_1C], offset aDbusmenuitem_0 ; "DBusMenuItemKeysList"
		call	ds:_ZN9QMetaType12registerTypeEPKcPFvPvEPFS2_PKvE
		mov	dword_6FFF2AB4,	eax
		jmp	loc_6FFD2FC9
; ---------------------------------------------------------------------------

loc_6FFD3127:				; CODE XREF: sub_6FFD2F30+BAj
		mov	[esp+1Ch+var_14], offset sub_6FFDECE0
		mov	[esp+1Ch+var_18], offset sub_6FFDDF50
		mov	[esp+1Ch+var_1C], offset aDbusmenulayo_0 ; "DBusMenuLayoutItem"
		call	ds:_ZN9QMetaType12registerTypeEPKcPFvPvEPFS2_PKvE
		mov	dword_6FFF2AAC,	eax
		jmp	loc_6FFD2FF0
; ---------------------------------------------------------------------------
		align 10h

loc_6FFD3150:				; CODE XREF: sub_6FFD2F30+E1j
		mov	[esp+1Ch+var_14], offset sub_6FFDF080
		mov	[esp+1Ch+var_18], offset sub_6FFDE310
		mov	[esp+1Ch+var_1C], offset aDbusmenulayo_1 ; "DBusMenuLayoutItemList"
		call	ds:_ZN9QMetaType12registerTypeEPKcPFvPvEPFS2_PKvE
		mov	dword_6FFF2AB8,	eax
		jmp	loc_6FFD3017
sub_6FFD2F30	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  53. _ZrsRK13QDBusArgumentR16DBusMenuItemKeys

; =============== S U B	R O U T	I N E =======================================


		public _ZrsRK13QDBusArgumentR16DBusMenuItemKeys
_ZrsRK13QDBusArgumentR16DBusMenuItemKeys proc near ; CODE XREF:	sub_6FFDC280+6j
					; sub_6FFDCB60+ECp

var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		sub	esp, 1Ch
		mov	[esp+1Ch+var_8], ebx
		mov	ebx, [esp+1Ch+arg_0]
		mov	[esp+1Ch+var_4], esi
		mov	esi, [esp+1Ch+arg_4]
		mov	[esp+1Ch+var_1C], ebx
		call	ds:_ZNK13QDBusArgument14beginStructureEv
		mov	[esp+1Ch+var_18], esi
		add	esi, 4
		mov	[esp+1Ch+var_1C], ebx
		call	ds:_ZNK13QDBusArgumentrsERi
		mov	[esp+1Ch+var_18], esi
		mov	[esp+1Ch+var_1C], eax
		call	ds:_ZNK13QDBusArgumentrsER11QStringList
		mov	[esp+1Ch+var_1C], ebx
		call	ds:_ZNK13QDBusArgument12endStructureEv
		mov	eax, ebx
		mov	esi, [esp+1Ch+var_4]
		mov	ebx, [esp+1Ch+var_8]
		add	esp, 1Ch
		retn
_ZrsRK13QDBusArgumentR16DBusMenuItemKeys endp

; Exported entry  50. _ZlsR13QDBusArgumentRK16DBusMenuItemKeys

; =============== S U B	R O U T	I N E =======================================


		public _ZlsR13QDBusArgumentRK16DBusMenuItemKeys
_ZlsR13QDBusArgumentRK16DBusMenuItemKeys proc near ; CODE XREF:	sub_6FFDC030+6j
					; .text:6FFDC19Cp

var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		sub	esp, 1Ch
		mov	[esp+1Ch+var_8], ebx
		mov	ebx, [esp+1Ch+arg_0]
		mov	[esp+1Ch+var_4], esi
		mov	esi, [esp+1Ch+arg_4]
		mov	[esp+1Ch+var_1C], ebx
		call	ds:_ZN13QDBusArgument14beginStructureEv
		mov	eax, [esi]
		add	esi, 4
		mov	[esp+1Ch+var_1C], ebx
		mov	[esp+1Ch+var_18], eax
		call	ds:_ZN13QDBusArgumentlsEi
		mov	[esp+1Ch+var_18], esi
		mov	[esp+1Ch+var_1C], eax
		call	ds:_ZN13QDBusArgumentlsERK11QStringList
		mov	[esp+1Ch+var_1C], ebx
		call	ds:_ZN13QDBusArgument12endStructureEv
		mov	eax, ebx
		mov	esi, [esp+1Ch+var_4]
		mov	ebx, [esp+1Ch+var_8]
		add	esp, 1Ch
		retn
_ZlsR13QDBusArgumentRK16DBusMenuItemKeys endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  49. _ZlsR13QDBusArgumentRK12DBusMenuItem

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public _ZlsR13QDBusArgumentRK12DBusMenuItem
_ZlsR13QDBusArgumentRK12DBusMenuItem proc near ; CODE XREF: sub_6FFDC020+6j
					; .text:6FFDC10Cp

var_68		= dword	ptr -68h
var_64		= dword	ptr -64h
var_60		= dword	ptr -60h
var_5C		= dword	ptr -5Ch
var_58		= dword	ptr -58h
var_54		= dword	ptr -54h
var_50		= dword	ptr -50h
var_4C		= byte ptr -4Ch
var_48		= dword	ptr -48h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_18		= byte ptr -18h
var_8		= byte ptr -8
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 88h
		lea	eax, [ebp+var_8]
		mov	[ebp+var_2C], eax
		lea	eax, [ebp+var_4C]
		mov	[esp], eax
		mov	[ebp+var_34], offset sub_6FFEC1F0
		mov	[ebp+var_30], offset word_6FFED0EE
		mov	[ebp+var_28], offset sub_6FFD33C6
		mov	[ebp+var_24], esp
		call	_Unwind_SjLj_Register
		mov	edx, [ebp+arg_0]
		mov	[ebp+var_48], 0FFFFFFFFh
		mov	[esp], edx
		call	ds:_ZN13QDBusArgument14beginStructureEv
		mov	edx, [ebp+arg_4]
		mov	eax, [edx]
		mov	[esp+4], eax
		mov	eax, [ebp+arg_0]
		mov	[esp], eax
		call	ds:_ZN13QDBusArgumentlsEi
		mov	[ebp+var_60], eax
		mov	eax, dword_6FFF2A9C
		test	eax, eax
		jz	loc_6FFD339F

loc_6FFD329A:				; CODE XREF: _ZlsR13QDBusArgumentRK12DBusMenuItem+191j
		mov	eax, dword_6FFF2A9C
		mov	edx, [ebp+var_60]
		mov	dword ptr [esp+4], 0Ah
		mov	[ebp+var_48], 0FFFFFFFFh
		mov	[esp+8], eax
		mov	[esp], edx
		call	ds:_ZN13QDBusArgument8beginMapEii
		mov	eax, [ebp+arg_4]
		mov	eax, [eax+4]
		mov	edx, [eax+4]
		mov	[ebp+var_68], eax
		cmp	eax, edx
		mov	[ebp+var_5C], edx
		jz	loc_6FFD3370
		mov	eax, ds:_ZN13QDBusArgument13beginMapEntryEv
		mov	edx, ds:_ZN8QVariantC2ERKS_
		mov	[ebp+var_50], eax
		mov	eax, ds:_ZN13QDBusArgumentlsERK7QString
		mov	[ebp+var_54], edx
		mov	[ebp+var_58], eax
		xchg	ax, ax

loc_6FFD32F0:				; CODE XREF: _ZlsR13QDBusArgumentRK12DBusMenuItem+13Ej
		mov	edx, [ebp+var_60]
		mov	[ebp+var_48], 0FFFFFFFFh
		mov	[esp], edx
		call	[ebp+var_50]
		mov	eax, [ebp+var_5C]
		lea	edx, [ebp+var_18]
		mov	[esp], edx
		sub	eax, 1Ch
		mov	[ebp+var_64], eax
		mov	eax, [ebp+var_5C]
		sub	eax, 14h
		mov	[esp+4], eax
		call	[ebp+var_54]
		mov	eax, [ebp+var_64]
		mov	edx, [ebp+var_60]
		mov	[ebp+var_48], 1
		mov	[esp+4], eax
		mov	[esp], edx
		call	[ebp+var_58]
		lea	edx, [ebp+var_18]
		mov	[esp+4], edx
		mov	[esp], eax
		call	ds:_ZN13QDBusArgumentlsERK12QDBusVariant
		lea	eax, [ebp+var_18]
		mov	[esp], eax
		mov	[ebp+var_48], 0FFFFFFFFh
		call	ds:_ZN8QVariantD2Ev
		mov	edx, [ebp+var_60]
		mov	[esp], edx
		call	ds:_ZN13QDBusArgument11endMapEntryEv
		mov	eax, [ebp+var_5C]
		mov	eax, [eax+4]
		cmp	[ebp+var_68], eax
		mov	[ebp+var_5C], eax
		jnz	short loc_6FFD32F0

loc_6FFD3370:				; CODE XREF: _ZlsR13QDBusArgumentRK12DBusMenuItem+9Fj
		mov	edx, [ebp+var_60]
		mov	[ebp+var_48], 0FFFFFFFFh
		mov	[esp], edx
		call	ds:_ZN13QDBusArgument6endMapEv
		mov	eax, [ebp+arg_0]
		mov	[esp], eax
		call	ds:_ZN13QDBusArgument12endStructureEv
		lea	eax, [ebp+var_4C]
		mov	[esp], eax
		call	_Unwind_SjLj_Unregister
		mov	eax, [ebp+arg_0]
		leave
		retn
; ---------------------------------------------------------------------------

loc_6FFD339F:				; CODE XREF: _ZlsR13QDBusArgumentRK12DBusMenuItem+64j
		mov	dword ptr [esp+8], offset sub_6FFDE900
		mov	dword ptr [esp+4], offset sub_6FFDDD40
		mov	dword ptr [esp], offset	aQdbusvariant ;	"QDBusVariant"
		call	ds:_ZN9QMetaType12registerTypeEPKcPFvPvEPFS2_PKvE
		mov	dword_6FFF2A9C,	eax
		jmp	loc_6FFD329A
_ZlsR13QDBusArgumentRK12DBusMenuItem endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn

sub_6FFD33C6	proc near		; DATA XREF: _ZlsR13QDBusArgumentRK12DBusMenuItem+23o
		add	ebp, 8
		mov	eax, [ebp-44h]
		mov	dword ptr [ebp-48h], 0
		mov	[ebp-6Ch], eax
		lea	eax, [ebp-18h]
		mov	[esp+0], eax
		call	ds:_ZN8QVariantD2Ev
		mov	edx, [ebp-6Ch]
		mov	dword ptr [ebp-48h], 0FFFFFFFFh
		mov	[esp+0], edx
		call	_Unwind_SjLj_Resume
sub_6FFD33C6	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  52. _ZrsRK13QDBusArgumentR12DBusMenuItem

; =============== S U B	R O U T	I N E =======================================


		public _ZrsRK13QDBusArgumentR12DBusMenuItem
_ZrsRK13QDBusArgumentR12DBusMenuItem proc near ; CODE XREF: sub_6FFDC270+6j
					; sub_6FFDC6E0+F3p

var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		sub	esp, 1Ch
		mov	[esp+1Ch+var_8], ebx
		mov	ebx, [esp+1Ch+arg_0]
		mov	[esp+1Ch+var_4], esi
		mov	esi, [esp+1Ch+arg_4]
		mov	[esp+1Ch+var_1C], ebx
		call	ds:_ZNK13QDBusArgument14beginStructureEv
		mov	[esp+1Ch+var_18], esi
		add	esi, 4
		mov	[esp+1Ch+var_1C], ebx
		call	ds:_ZNK13QDBusArgumentrsERi
		mov	[esp+1Ch+var_18], esi
		mov	[esp+1Ch+var_1C], eax
		call	sub_6FFEAF40
		mov	[esp+1Ch+var_1C], ebx
		call	ds:_ZNK13QDBusArgument12endStructureEv
		mov	eax, ebx
		mov	esi, [esp+1Ch+var_4]
		mov	ebx, [esp+1Ch+var_8]
		add	esp, 1Ch
		retn
_ZrsRK13QDBusArgumentR12DBusMenuItem endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  54. _ZrsRK13QDBusArgumentR18DBusMenuLayoutItem

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public _ZrsRK13QDBusArgumentR18DBusMenuLayoutItem
_ZrsRK13QDBusArgumentR18DBusMenuLayoutItem proc	near
					; CODE XREF: _ZN16DBusMenuImporter21slotGetLayoutFinishedEP23QDBusPendingCallWatcher+C76p
					; _ZrsRK13QDBusArgumentR18DBusMenuLayoutItem+177p ...

var_B4		= dword	ptr -0B4h
var_B0		= dword	ptr -0B0h
var_AC		= dword	ptr -0ACh
var_A8		= dword	ptr -0A8h
var_A4		= dword	ptr -0A4h
var_A0		= dword	ptr -0A0h
var_9C		= dword	ptr -9Ch
var_98		= dword	ptr -98h
var_94		= dword	ptr -94h
var_90		= dword	ptr -90h
var_8C		= dword	ptr -8Ch
var_88		= dword	ptr -88h
var_84		= dword	ptr -84h
var_80		= dword	ptr -80h
var_7C		= byte ptr -7Ch
var_78		= dword	ptr -78h
var_64		= dword	ptr -64h
var_60		= dword	ptr -60h
var_5C		= dword	ptr -5Ch
var_58		= dword	ptr -58h
var_54		= dword	ptr -54h
var_40		= byte ptr -40h
var_30		= dword	ptr -30h
var_28		= dword	ptr -28h
var_1C		= byte ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= byte ptr -10h
var_C		= byte ptr -0Ch
var_8		= byte ptr -8
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 0C8h
		lea	eax, [ebp+var_8]
		mov	[ebp+var_5C], eax
		lea	eax, [ebp+var_7C]
		mov	[esp], eax
		mov	[ebp+var_64], offset sub_6FFEC1F0
		mov	[ebp+var_60], offset dword_6FFED2D0
		mov	[ebp+var_58], offset sub_6FFD3899
		mov	[ebp+var_54], esp
		call	_Unwind_SjLj_Register
		mov	edx, [ebp+arg_0]
		mov	[ebp+var_78], 0FFFFFFFFh
		mov	[esp], edx
		call	ds:_ZNK13QDBusArgument14beginStructureEv
		mov	ecx, [ebp+arg_4]
		mov	eax, [ebp+arg_0]
		mov	[esp+4], ecx
		mov	[esp], eax
		call	ds:_ZNK13QDBusArgumentrsERi
		mov	edx, [ebp+arg_4]
		add	edx, 4
		mov	[esp+4], edx
		mov	[esp], eax
		call	sub_6FFEAF40
		mov	edx, [ebp+arg_0]
		mov	[esp], edx
		call	ds:_ZNK13QDBusArgument10beginArrayEv
		mov	ecx, ds:_ZN8QMapData11shared_nullE
		mov	edx, [ebp+arg_4]
		mov	eax, ds:_ZN9QListData11shared_nullE
		mov	[ebp+var_84], ecx
		add	ecx, 34h
		mov	[ebp+var_80], ecx
		mov	ecx, ds:_ZNK13QDBusArgument5atEndEv
		add	edx, 8
		mov	[ebp+var_8C], eax
		mov	[ebp+var_88], eax
		mov	[ebp+var_B4], edx
		mov	[ebp+var_90], ecx
		jmp	loc_6FFD362E
; ---------------------------------------------------------------------------

loc_6FFD3506:				; CODE XREF: _ZrsRK13QDBusArgumentR18DBusMenuLayoutItem+2A3j
		lea	eax, [ebp+var_10]
		mov	[esp], eax
		mov	[ebp+var_78], 5
		call	ds:_ZN13QDBusArgumentC1Ev
		mov	eax, ds:_ZN8QVariant7handlerE
		lea	edx, [ebp+var_10]
		mov	ecx, [ebp+var_AC]
		mov	eax, [eax]
		mov	[esp+8], edx
		lea	edx, [ebp+var_40]
		mov	dword ptr [esp+0Ch], 0
		mov	[esp+4], ecx
		mov	[esp], edx
		mov	eax, [eax+18h]
		mov	[ebp+var_78], 2
		call	eax
		test	al, al
		jz	loc_6FFD3833
		lea	eax, [ebp+var_10]
		mov	[esp+4], eax
		lea	eax, [ebp+var_C]
		mov	[esp], eax
		call	ds:_ZN13QDBusArgumentC1ERKS_
		lea	eax, [ebp+var_10]
		mov	[esp], eax
		mov	[ebp+var_78], 5
		call	ds:_ZN13QDBusArgumentD1Ev

loc_6FFD3579:				; CODE XREF: _ZrsRK13QDBusArgumentR18DBusMenuLayoutItem+2BCj
					; _ZrsRK13QDBusArgumentR18DBusMenuLayoutItem+41Cj
		lea	eax, [ebp+var_40]
		mov	[esp], eax
		mov	[ebp+var_78], 4
		call	ds:_ZN8QVariantD1Ev
		mov	eax, [ebp+var_84]
		mov	edx, [ebp+var_80]
		mov	[ebp+var_18], eax
		lock inc dword ptr [edx]
		setnz	al
		mov	ecx, [ebp+var_8C]
		mov	edx, [ebp+var_88]
		mov	[ebp+var_14], ecx
		lock inc dword ptr [edx]
		setnz	al
		lea	eax, [ebp+var_1C]
		mov	[esp+4], eax
		lea	eax, [ebp+var_C]
		mov	[esp], eax
		mov	[ebp+var_78], 3
		call	_ZrsRK13QDBusArgumentR18DBusMenuLayoutItem
		mov	ecx, [ebp+var_B4]
		lea	eax, [ebp+var_1C]
		mov	[esp+4], eax
		mov	[esp], ecx
		call	sub_6FFE8250
		mov	eax, [ebp+var_14]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jz	loc_6FFD3711

loc_6FFD35F2:				; CODE XREF: _ZrsRK13QDBusArgumentR18DBusMenuLayoutItem+34Dj
		mov	eax, [ebp+var_18]
		test	eax, eax
		jz	short loc_6FFD3608
		lock dec dword ptr [eax+34h]
		setnz	dl
		test	dl, dl
		jz	loc_6FFD37A2

loc_6FFD3608:				; CODE XREF: _ZrsRK13QDBusArgumentR18DBusMenuLayoutItem+1A7j
					; _ZrsRK13QDBusArgumentR18DBusMenuLayoutItem+3DEj
		lea	eax, [ebp+var_C]
		mov	[esp], eax
		mov	[ebp+var_78], 6
		call	ds:_ZN13QDBusArgumentD1Ev
		lea	eax, [ebp+var_30]
		mov	[esp], eax
		mov	[ebp+var_78], 0FFFFFFFFh
		call	ds:_ZN8QVariantD2Ev

loc_6FFD362E:				; CODE XREF: _ZrsRK13QDBusArgumentR18DBusMenuLayoutItem+B1j
		mov	eax, [ebp+arg_0]
		mov	[ebp+var_78], 0FFFFFFFFh
		mov	[esp], eax
		call	[ebp+var_90]
		test	al, al
		jnz	loc_6FFD3871
		mov	eax, [ebp+var_28]
		mov	[ebp+var_30], 0
		mov	[ebp+var_78], 6
		and	eax, 0C0000000h
		mov	[ebp+var_28], eax
		lea	eax, [ebp+var_30]
		mov	[esp+4], eax
		mov	eax, [ebp+arg_0]
		mov	byte ptr [ebp+var_28+3], 80h
		mov	[esp], eax
		call	ds:_ZNK13QDBusArgumentrsER12QDBusVariant
		lea	eax, [ebp+var_30]
		mov	[esp+4], eax
		lea	eax, [ebp+var_40]
		mov	[esp], eax
		call	ds:_ZN8QVariantC1ERKS_
		mov	eax, dword_6FFF2AA0
		test	eax, eax
		jnz	short loc_6FFD36BE
		mov	dword ptr [esp+8], offset sub_6FFDE9E0
		mov	dword ptr [esp+4], offset sub_6FFDDD70
		mov	dword ptr [esp], offset	aQdbusargumen_0	; "QDBusArgument"
		mov	[ebp+var_78], 5
		call	ds:_ZN9QMetaType12registerTypeEPKcPFvPvEPFS2_PKvE
		mov	dword_6FFF2AA0,	eax

loc_6FFD36BE:				; CODE XREF: _ZrsRK13QDBusArgumentR18DBusMenuLayoutItem+243j
		mov	edx, dword_6FFF2AA0
		lea	eax, [ebp+var_40]
		mov	[esp], eax
		mov	[ebp+var_78], 5
		mov	[ebp+var_AC], edx
		call	ds:_ZNK8QVariant8userTypeEv
		cmp	[ebp+var_AC], eax
		jz	loc_6FFD3850
		cmp	[ebp+var_AC], 0FFh
		jle	loc_6FFD3506

loc_6FFD36F9:				; CODE XREF: _ZrsRK13QDBusArgumentR18DBusMenuLayoutItem+3F6j
		lea	eax, [ebp+var_C]
		mov	[esp], eax
		mov	[ebp+var_78], 5
		call	ds:_ZN13QDBusArgumentC1Ev
		jmp	loc_6FFD3579
; ---------------------------------------------------------------------------

loc_6FFD3711:				; CODE XREF: _ZrsRK13QDBusArgumentR18DBusMenuLayoutItem+19Cj
		mov	eax, [ebp+var_14]
		mov	[ebp+var_B0], eax
		mov	ecx, [ebp+var_B0]
		add	eax, 14h
		mov	edx, [ecx+0Ch]
		lea	edx, [eax+edx*4]
		mov	[ebp+var_94], edx
		mov	edx, [ecx+8]
		lea	edx, [eax+edx*4]
		cmp	[ebp+var_94], edx
		mov	[ebp+var_A8], edx
		jz	short loc_6FFD3787

loc_6FFD3743:				; CODE XREF: _ZrsRK13QDBusArgumentR18DBusMenuLayoutItem+335j
		sub	[ebp+var_94], 4
		mov	eax, [ebp+var_94]
		mov	eax, [eax]
		test	eax, eax
		mov	[ebp+var_98], eax
		jz	short loc_6FFD3779
		mov	[esp], eax
		mov	[ebp+var_78], 1
		call	sub_6FFDFBB0
		mov	edx, [ebp+var_98]
		mov	[esp], edx
		call	sub_6FFEAE50

loc_6FFD3779:				; CODE XREF: _ZrsRK13QDBusArgumentR18DBusMenuLayoutItem+30Aj
		mov	ecx, [ebp+var_94]
		cmp	[ebp+var_A8], ecx
		jnz	short loc_6FFD3743

loc_6FFD3787:				; CODE XREF: _ZrsRK13QDBusArgumentR18DBusMenuLayoutItem+2F1j
		mov	eax, [ebp+var_B0]
		mov	[ebp+var_78], 1
		mov	[esp], eax
		call	ds:_Z5qFreePv
		jmp	loc_6FFD35F2
; ---------------------------------------------------------------------------

loc_6FFD37A2:				; CODE XREF: _ZrsRK13QDBusArgumentR18DBusMenuLayoutItem+1B2j
		mov	ecx, [ebp+var_18]
		mov	eax, [ecx+4]
		mov	[ebp+var_A4], ecx
		cmp	ecx, eax
		jnz	short loc_6FFD37DB
		jmp	short loc_6FFD3810
; ---------------------------------------------------------------------------

loc_6FFD37B4:				; CODE XREF: _ZrsRK13QDBusArgumentR18DBusMenuLayoutItem+3A8j
					; _ZrsRK13QDBusArgumentR18DBusMenuLayoutItem+3BDj
		mov	eax, [ebp+var_A0]
		mov	[ebp+var_78], 4
		add	eax, 8
		mov	[esp], eax
		call	ds:_ZN8QVariantD1Ev
		mov	eax, [ebp+var_9C]
		cmp	[ebp+var_A4], eax
		jz	short loc_6FFD3810

loc_6FFD37DB:				; CODE XREF: _ZrsRK13QDBusArgumentR18DBusMenuLayoutItem+360j
		mov	edx, [eax+4]
		lea	ecx, [eax-1Ch]
		mov	[ebp+var_A0], ecx
		mov	[ebp+var_9C], edx
		mov	edx, [eax-1Ch]
		lock dec dword ptr [edx]
		setnz	cl
		test	cl, cl
		jnz	short loc_6FFD37B4
		mov	eax, [eax-1Ch]
		mov	[ebp+var_78], 4
		mov	[esp], eax
		call	ds:_ZN7QString4freeEPNS_4DataE
		jmp	short loc_6FFD37B4
; ---------------------------------------------------------------------------
		align 10h

loc_6FFD3810:				; CODE XREF: _ZrsRK13QDBusArgumentR18DBusMenuLayoutItem+362j
					; _ZrsRK13QDBusArgumentR18DBusMenuLayoutItem+389j
		mov	edx, [ebp+var_A4]
		mov	dword ptr [esp+4], 1Ch
		mov	[ebp+var_78], 4
		mov	[esp], edx
		call	ds:_ZN8QMapData16continueFreeDataEi
		jmp	loc_6FFD3608
; ---------------------------------------------------------------------------

loc_6FFD3833:				; CODE XREF: _ZrsRK13QDBusArgumentR18DBusMenuLayoutItem+FDj
		lea	eax, [ebp+var_10]
		mov	[esp], eax
		mov	[ebp+var_78], 5
		call	ds:_ZN13QDBusArgumentD1Ev
		jmp	loc_6FFD36F9
; ---------------------------------------------------------------------------
		align 10h

loc_6FFD3850:				; CODE XREF: _ZrsRK13QDBusArgumentR18DBusMenuLayoutItem+293j
		lea	eax, [ebp+var_40]
		mov	[esp], eax
		call	ds:_ZNK8QVariant9constDataEv
		mov	[esp+4], eax
		lea	eax, [ebp+var_C]
		mov	[esp], eax
		call	ds:_ZN13QDBusArgumentC1ERKS_
		jmp	loc_6FFD3579
; ---------------------------------------------------------------------------

loc_6FFD3871:				; CODE XREF: _ZrsRK13QDBusArgumentR18DBusMenuLayoutItem+1F3j
		mov	edx, [ebp+arg_0]
		mov	[esp], edx
		call	ds:_ZNK13QDBusArgument8endArrayEv
		mov	ecx, [ebp+arg_0]
		mov	[esp], ecx
		call	ds:_ZNK13QDBusArgument12endStructureEv
		lea	eax, [ebp+var_7C]
		mov	[esp], eax
		call	_Unwind_SjLj_Unregister
		mov	eax, [ebp+arg_0]
		leave
		retn
_ZrsRK13QDBusArgumentR18DBusMenuLayoutItem endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn

sub_6FFD3899	proc near		; DATA XREF: _ZrsRK13QDBusArgumentR18DBusMenuLayoutItem+23o
		add	ebp, 8
		mov	eax, [ebp-78h]
		mov	edx, [ebp-74h]
		cmp	eax, 1
		mov	[ebp-0B8h], edx
		jz	short loc_6FFD3914
		cmp	eax, 2
		jz	loc_6FFD393C
		cmp	eax, 3
		jz	short loc_6FFD38D9
		cmp	eax, 4
		xchg	ax, ax
		jz	short loc_6FFD3927
		cmp	eax, 5
		jz	short loc_6FFD38EC
		lea	eax, [ebp-18h]
		mov	[esp+0], eax
		mov	dword ptr [ebp-78h], 0
		call	sub_6FFE4290

loc_6FFD38D9:				; CODE XREF: sub_6FFD3899+20j
					; sub_6FFD3899+B7j
		lea	eax, [ebp-0Ch]
		mov	[esp+0], eax
		mov	dword ptr [ebp-78h], 0
		call	ds:_ZN13QDBusArgumentD1Ev

loc_6FFD38EC:				; CODE XREF: sub_6FFD3899+2Cj
					; sub_6FFD3899+A1j
		lea	eax, [ebp-30h]
		mov	[esp+0], eax
		mov	dword ptr [ebp-78h], 0
		call	ds:_ZN8QVariantD2Ev
		mov	ecx, [ebp-0B8h]
		mov	dword ptr [ebp-78h], 0FFFFFFFFh
		mov	[esp+0], ecx
		call	_Unwind_SjLj_Resume
; ---------------------------------------------------------------------------

loc_6FFD3914:				; CODE XREF: sub_6FFD3899+12j
		lea	eax, [ebp-10h]
		mov	[esp+0], eax
		mov	dword ptr [ebp-78h], 0
		call	ds:_ZN13QDBusArgumentD1Ev

loc_6FFD3927:				; CODE XREF: sub_6FFD3899+27j
		lea	eax, [ebp-40h]
		mov	[esp+0], eax
		mov	dword ptr [ebp-78h], 0
		call	ds:_ZN8QVariantD1Ev
		jmp	short loc_6FFD38EC
; ---------------------------------------------------------------------------

loc_6FFD393C:				; CODE XREF: sub_6FFD3899+17j
		lea	eax, [ebp-1Ch]
		mov	[esp+0], eax
		mov	dword ptr [ebp-78h], 0
		call	sub_6FFDFBB0
		xchg	ax, ax
		jmp	short loc_6FFD38D9
sub_6FFD3899	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  51. _ZlsR13QDBusArgumentRK18DBusMenuLayoutItem

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public _ZlsR13QDBusArgumentRK18DBusMenuLayoutItem
_ZlsR13QDBusArgumentRK18DBusMenuLayoutItem proc	near ; CODE XREF: sub_6FFDC0B0+6j
					; .text:6FFDC22Cp

var_108		= dword	ptr -108h
var_104		= dword	ptr -104h
var_100		= dword	ptr -100h
var_FC		= dword	ptr -0FCh
var_F8		= dword	ptr -0F8h
var_F4		= dword	ptr -0F4h
var_F0		= dword	ptr -0F0h
var_EC		= dword	ptr -0ECh
var_E8		= dword	ptr -0E8h
var_E4		= dword	ptr -0E4h
var_E0		= dword	ptr -0E0h
var_DC		= dword	ptr -0DCh
var_D8		= dword	ptr -0D8h
var_D4		= dword	ptr -0D4h
var_D0		= dword	ptr -0D0h
var_CC		= dword	ptr -0CCh
var_C8		= dword	ptr -0C8h
var_C4		= dword	ptr -0C4h
var_C0		= dword	ptr -0C0h
var_BC		= dword	ptr -0BCh
var_B8		= dword	ptr -0B8h
var_B4		= dword	ptr -0B4h
var_B0		= dword	ptr -0B0h
var_AC		= dword	ptr -0ACh
var_A8		= dword	ptr -0A8h
var_A4		= dword	ptr -0A4h
var_A0		= dword	ptr -0A0h
var_9C		= dword	ptr -9Ch
var_98		= dword	ptr -98h
var_94		= dword	ptr -94h
var_90		= dword	ptr -90h
var_8C		= dword	ptr -8Ch
var_88		= dword	ptr -88h
var_84		= dword	ptr -84h
var_80		= dword	ptr -80h
var_7C		= byte ptr -7Ch
var_78		= dword	ptr -78h
var_64		= dword	ptr -64h
var_60		= dword	ptr -60h
var_5C		= dword	ptr -5Ch
var_58		= dword	ptr -58h
var_54		= dword	ptr -54h
var_48		= byte ptr -48h
var_38		= byte ptr -38h
var_28		= byte ptr -28h
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= byte ptr -8
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 128h
		lea	eax, [ebp+var_8]
		mov	[ebp+var_5C], eax
		lea	eax, [ebp+var_7C]
		mov	[esp], eax
		mov	[ebp+var_64], offset sub_6FFEC1F0
		mov	[ebp+var_60], offset word_6FFED2F6
		mov	[ebp+var_58], offset sub_6FFD417D
		mov	[ebp+var_54], esp
		call	_Unwind_SjLj_Register
		mov	edx, [ebp+arg_0]
		mov	[ebp+var_78], 0FFFFFFFFh
		mov	[esp], edx
		call	ds:_ZN13QDBusArgument14beginStructureEv
		mov	ecx, [ebp+arg_4]
		mov	eax, [ecx]
		mov	[esp+4], eax
		mov	eax, [ebp+arg_0]
		mov	[esp], eax
		call	ds:_ZN13QDBusArgumentlsEi
		mov	[ebp+var_B0], eax
		mov	eax, dword_6FFF2A9C
		test	eax, eax
		jz	loc_6FFD4156

loc_6FFD39CD:				; CODE XREF: _ZlsR13QDBusArgumentRK18DBusMenuLayoutItem+818j
		mov	eax, dword_6FFF2A9C
		mov	edx, [ebp+var_B0]
		mov	dword ptr [esp+4], 0Ah
		mov	[ebp+var_78], 0FFFFFFFFh
		mov	[esp+8], eax
		mov	[esp], edx
		call	ds:_ZN13QDBusArgument8beginMapEii
		mov	ecx, [ebp+arg_4]
		mov	ecx, [ecx+4]
		mov	eax, [ecx+4]
		mov	[ebp+var_DC], ecx
		cmp	ecx, eax
		mov	[ebp+var_9C], eax
		jz	loc_6FFD3ADF
		mov	edx, ds:_ZN13QDBusArgument13beginMapEntryEv
		mov	ecx, ds:_ZN8QVariantC2ERKS_
		mov	eax, ds:_ZN13QDBusArgumentlsERK7QString
		mov	[ebp+var_84], edx
		mov	[ebp+var_88], ecx
		mov	[ebp+var_8C], eax

loc_6FFD3A34:				; CODE XREF: _ZlsR13QDBusArgumentRK18DBusMenuLayoutItem+179j
		mov	edx, [ebp+var_B0]
		mov	[ebp+var_78], 0FFFFFFFFh
		mov	[esp], edx
		call	[ebp+var_84]
		mov	eax, [ebp+var_9C]
		mov	ecx, [ebp+var_9C]
		sub	eax, 14h
		sub	ecx, 1Ch
		mov	[esp+4], eax
		lea	eax, [ebp+var_48]
		mov	[ebp+var_C0], ecx
		mov	[esp], eax
		call	[ebp+var_88]
		mov	edx, [ebp+var_C0]
		mov	ecx, [ebp+var_B0]
		mov	[ebp+var_78], 4
		mov	[esp+4], edx
		mov	[esp], ecx
		call	[ebp+var_8C]
		lea	edx, [ebp+var_48]
		mov	[esp+4], edx
		mov	[esp], eax
		call	ds:_ZN13QDBusArgumentlsERK12QDBusVariant
		lea	eax, [ebp+var_48]
		mov	[esp], eax
		mov	[ebp+var_78], 0FFFFFFFFh
		call	ds:_ZN8QVariantD2Ev
		mov	edx, [ebp+var_B0]
		mov	[esp], edx
		call	ds:_ZN13QDBusArgument11endMapEntryEv
		mov	ecx, [ebp+var_9C]
		mov	ecx, [ecx+4]
		cmp	[ebp+var_DC], ecx
		mov	[ebp+var_9C], ecx
		jnz	loc_6FFD3A34

loc_6FFD3ADF:				; CODE XREF: _ZlsR13QDBusArgumentRK18DBusMenuLayoutItem+ABj
		mov	eax, [ebp+var_B0]
		mov	[ebp+var_78], 0FFFFFFFFh
		mov	[esp], eax
		call	ds:_ZN13QDBusArgument6endMapEv
		mov	eax, dword_6FFF2A9C
		test	eax, eax
		jz	loc_6FFD412F

loc_6FFD3B02:				; CODE XREF: _ZlsR13QDBusArgumentRK18DBusMenuLayoutItem+7F1j
		mov	eax, dword_6FFF2A9C
		mov	edx, [ebp+arg_0]
		mov	[ebp+var_78], 0FFFFFFFFh
		mov	[esp+4], eax
		mov	[esp], edx
		call	ds:_ZN13QDBusArgument10beginArrayEi
		mov	ecx, [ebp+arg_4]
		mov	eax, [ecx+8]
		mov	[ebp+var_18], eax
		lock inc dword ptr [eax]
		setnz	dl
		mov	eax, [ebp+var_18]
		test	byte ptr [eax+10h], 1
		jz	loc_6FFD4118

loc_6FFD3B3A:				; CODE XREF: _ZlsR13QDBusArgumentRK18DBusMenuLayoutItem+7CAj
		mov	edx, [ebp+var_18]
		mov	[ebp+var_14], 0
		mov	eax, [edx+8]
		mov	ecx, [edx+0Ch]
		lea	eax, [edx+eax*4+14h]
		lea	edx, [edx+ecx*4+14h]
		cmp	eax, edx
		mov	[ebp+var_10], eax
		mov	[ebp+var_C], edx
		jnz	short loc_6FFD3B6A
		jmp	loc_6FFD3C40
; ---------------------------------------------------------------------------

loc_6FFD3B61:				; CODE XREF: _ZlsR13QDBusArgumentRK18DBusMenuLayoutItem+2DAj
		cmp	eax, [ebp+var_C]
		jz	loc_6FFD3C40

loc_6FFD3B6A:				; CODE XREF: _ZlsR13QDBusArgumentRK18DBusMenuLayoutItem+1FAj
		mov	eax, [eax]
		mov	[ebp+var_BC], eax
		mov	eax, dword_6FFF2AAC
		test	eax, eax
		jnz	short loc_6FFD3BA4
		mov	dword ptr [esp+8], offset sub_6FFDECE0
		mov	dword ptr [esp+4], offset sub_6FFDDF50
		mov	dword ptr [esp], offset	aDbusmenulayo_0	; "DBusMenuLayoutItem"
		mov	[ebp+var_78], 7
		call	ds:_ZN9QMetaType12registerTypeEPKcPFvPvEPFS2_PKvE
		mov	dword_6FFF2AAC,	eax

loc_6FFD3BA4:				; CODE XREF: _ZlsR13QDBusArgumentRK18DBusMenuLayoutItem+219j
		mov	eax, dword_6FFF2AAC
		lea	ecx, [ebp+var_28]
		mov	edx, [ebp+var_BC]
		mov	dword ptr [esp+0Ch], 0
		mov	[esp], ecx
		mov	[esp+4], eax
		mov	[esp+8], edx
		mov	[ebp+var_78], 7
		call	ds:_ZN8QVariantC1EiPKvj
		lea	eax, [ebp+var_28]
		lea	edx, [ebp+var_38]
		mov	[esp+4], eax
		mov	[esp], edx
		mov	[ebp+var_78], 6
		call	ds:_ZN8QVariantC2ERKS_
		mov	eax, [ebp+arg_0]
		lea	ecx, [ebp+var_38]
		mov	[esp+4], ecx
		mov	[ebp+var_78], 5
		mov	[esp], eax
		call	ds:_ZN13QDBusArgumentlsERK12QDBusVariant
		lea	edx, [ebp+var_38]
		mov	[esp], edx
		mov	[ebp+var_78], 6
		call	ds:_ZN8QVariantD2Ev
		lea	ecx, [ebp+var_28]
		mov	[esp], ecx
		mov	[ebp+var_78], 7
		call	ds:_ZN8QVariantD1Ev
		mov	eax, [ebp+var_10]
		mov	edx, [ebp+var_14]
		add	eax, 4
		test	edx, edx
		mov	[ebp+var_10], eax
		jz	loc_6FFD3B61

loc_6FFD3C40:				; CODE XREF: _ZlsR13QDBusArgumentRK18DBusMenuLayoutItem+1FCj
					; _ZlsR13QDBusArgumentRK18DBusMenuLayoutItem+204j
		mov	eax, [ebp+var_18]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jz	short loc_6FFD3C80

loc_6FFD3C4D:				; CODE XREF: _ZlsR13QDBusArgumentRK18DBusMenuLayoutItem+7B3j
		mov	edx, [ebp+arg_0]
		mov	[ebp+var_78], 0FFFFFFFFh
		mov	[esp], edx
		call	ds:_ZN13QDBusArgument8endArrayEv
		mov	ecx, [ebp+arg_0]
		mov	[esp], ecx
		call	ds:_ZN13QDBusArgument12endStructureEv
		lea	eax, [ebp+var_7C]
		mov	[esp], eax
		call	_Unwind_SjLj_Unregister
		mov	eax, [ebp+arg_0]
		leave
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6FFD3C80:				; CODE XREF: _ZlsR13QDBusArgumentRK18DBusMenuLayoutItem+2EBj
		mov	edx, [ebp+var_18]
		mov	eax, edx
		mov	ecx, edx
		mov	[ebp+var_108], edx
		mov	edx, [edx+0Ch]
		add	eax, 14h
		lea	edx, [eax+edx*4]
		mov	[ebp+var_F0], edx
		mov	edx, [ecx+8]
		lea	edx, [eax+edx*4]
		cmp	[ebp+var_F0], edx
		mov	[ebp+var_104], edx
		jz	loc_6FFD40FD
		mov	eax, ds:_ZN7QString4freeEPNS_4DataE
		mov	[ebp+var_E0], eax
		jmp	short loc_6FFD3CFD
; ---------------------------------------------------------------------------

loc_6FFD3CC1:				; CODE XREF: _ZlsR13QDBusArgumentRK18DBusMenuLayoutItem+3C1j
					; _ZlsR13QDBusArgumentRK18DBusMenuLayoutItem+6FCj
		mov	edx, [ebp+var_EC]
		mov	eax, [edx+4]
		test	eax, eax
		jz	short loc_6FFD3CDD
		lock dec dword ptr [eax+34h]
		setnz	dl
		test	dl, dl
		jz	loc_6FFD4061

loc_6FFD3CDD:				; CODE XREF: _ZlsR13QDBusArgumentRK18DBusMenuLayoutItem+36Cj
					; _ZlsR13QDBusArgumentRK18DBusMenuLayoutItem+798j
		mov	edx, [ebp+var_EC]
		mov	[esp], edx
		call	sub_6FFEAE50

loc_6FFD3CEB:				; CODE XREF: _ZlsR13QDBusArgumentRK18DBusMenuLayoutItem+3B4j
		mov	ecx, [ebp+var_F0]
		cmp	[ebp+var_104], ecx
		jz	loc_6FFD40FD

loc_6FFD3CFD:				; CODE XREF: _ZlsR13QDBusArgumentRK18DBusMenuLayoutItem+35Fj
		sub	[ebp+var_F0], 4
		mov	edx, [ebp+var_F0]
		mov	edx, [edx]
		test	edx, edx
		mov	[ebp+var_EC], edx
		jz	short loc_6FFD3CEB
		mov	eax, [edx+8]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jnz	short loc_6FFD3CC1
		mov	ecx, [ebp+var_EC]
		mov	ecx, [ecx+8]
		mov	edx, [ecx+0Ch]
		mov	eax, ecx
		add	eax, 14h
		mov	[ebp+var_100], ecx
		lea	edx, [eax+edx*4]
		mov	[ebp+var_CC], edx
		mov	edx, [ecx+8]
		lea	edx, [eax+edx*4]
		cmp	[ebp+var_CC], edx
		mov	[ebp+var_FC], edx
		jnz	short loc_6FFD3D9C
		jmp	loc_6FFD4046
; ---------------------------------------------------------------------------
		align 10h

loc_6FFD3D60:				; CODE XREF: _ZlsR13QDBusArgumentRK18DBusMenuLayoutItem+460j
					; _ZlsR13QDBusArgumentRK18DBusMenuLayoutItem+649j
		mov	edx, [ebp+var_C8]
		mov	eax, [edx+4]
		test	eax, eax
		jz	short loc_6FFD3D7C
		lock dec dword ptr [eax+34h]
		setnz	dl
		test	dl, dl
		jz	loc_6FFD3FB0

loc_6FFD3D7C:				; CODE XREF: _ZlsR13QDBusArgumentRK18DBusMenuLayoutItem+40Bj
					; _ZlsR13QDBusArgumentRK18DBusMenuLayoutItem+6E1j
		mov	ecx, [ebp+var_C8]
		mov	[esp], ecx
		call	sub_6FFEAE50

loc_6FFD3D8A:				; CODE XREF: _ZlsR13QDBusArgumentRK18DBusMenuLayoutItem+453j
		mov	eax, [ebp+var_CC]
		cmp	[ebp+var_FC], eax
		jz	loc_6FFD4046

loc_6FFD3D9C:				; CODE XREF: _ZlsR13QDBusArgumentRK18DBusMenuLayoutItem+3F5j
		sub	[ebp+var_CC], 4
		mov	eax, [ebp+var_CC]
		mov	eax, [eax]
		test	eax, eax
		mov	[ebp+var_C8], eax
		jz	short loc_6FFD3D8A
		mov	eax, [eax+8]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jnz	short loc_6FFD3D60
		mov	ecx, [ebp+var_C8]
		mov	ecx, [ecx+8]
		mov	edx, [ecx+0Ch]
		mov	eax, ecx
		add	eax, 14h
		mov	[ebp+var_F4], ecx
		lea	edx, [eax+edx*4]
		mov	[ebp+var_A8], edx
		mov	edx, [ecx+8]
		lea	edx, [eax+edx*4]
		cmp	[ebp+var_A8], edx
		mov	[ebp+var_D8], edx
		jnz	short loc_6FFD3E3C
		jmp	loc_6FFD3F93
; ---------------------------------------------------------------------------
		align 10h

loc_6FFD3E00:				; CODE XREF: _ZlsR13QDBusArgumentRK18DBusMenuLayoutItem+500j
					; _ZlsR13QDBusArgumentRK18DBusMenuLayoutItem+590j
		mov	ecx, [ebp+var_A4]
		mov	eax, [ecx+4]
		test	eax, eax
		jz	short loc_6FFD3E1C
		lock dec dword ptr [eax+34h]
		setnz	dl
		test	dl, dl
		jz	loc_6FFD3EF5

loc_6FFD3E1C:				; CODE XREF: _ZlsR13QDBusArgumentRK18DBusMenuLayoutItem+4ABj
					; _ZlsR13QDBusArgumentRK18DBusMenuLayoutItem+62Ej
		mov	edx, [ebp+var_A4]
		mov	[esp], edx
		call	sub_6FFEAE50

loc_6FFD3E2A:				; CODE XREF: _ZlsR13QDBusArgumentRK18DBusMenuLayoutItem+4F3j
		mov	ecx, [ebp+var_A8]
		cmp	[ebp+var_D8], ecx
		jz	loc_6FFD3F93

loc_6FFD3E3C:				; CODE XREF: _ZlsR13QDBusArgumentRK18DBusMenuLayoutItem+494j
		sub	[ebp+var_A8], 4
		mov	eax, [ebp+var_A8]
		mov	eax, [eax]
		test	eax, eax
		mov	[ebp+var_A4], eax
		jz	short loc_6FFD3E2A
		mov	eax, [eax+8]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jnz	short loc_6FFD3E00
		mov	ecx, [ebp+var_A4]
		mov	ecx, [ecx+8]
		mov	edx, [ecx+0Ch]
		mov	eax, ecx
		add	eax, 14h
		mov	[ebp+var_D0], ecx
		lea	edx, [eax+edx*4]
		mov	[ebp+var_90], edx
		mov	edx, [ecx+8]
		lea	edx, [eax+edx*4]
		cmp	[ebp+var_90], edx
		mov	[ebp+var_B4], edx
		jz	short loc_6FFD3EDA

loc_6FFD3E96:				; CODE XREF: _ZlsR13QDBusArgumentRK18DBusMenuLayoutItem+578j
		sub	[ebp+var_90], 4
		mov	eax, [ebp+var_90]
		mov	eax, [eax]
		test	eax, eax
		mov	[ebp+var_94], eax
		jz	short loc_6FFD3ECC
		mov	[esp], eax
		mov	[ebp+var_78], 1
		call	sub_6FFDFBB0
		mov	edx, [ebp+var_94]
		mov	[esp], edx
		call	sub_6FFEAE50

loc_6FFD3ECC:				; CODE XREF: _ZlsR13QDBusArgumentRK18DBusMenuLayoutItem+54Dj
		mov	ecx, [ebp+var_90]
		cmp	[ebp+var_B4], ecx
		jnz	short loc_6FFD3E96

loc_6FFD3EDA:				; CODE XREF: _ZlsR13QDBusArgumentRK18DBusMenuLayoutItem+534j
		mov	eax, [ebp+var_D0]
		mov	[ebp+var_78], 1
		mov	[esp], eax
		call	ds:_Z5qFreePv
		jmp	loc_6FFD3E00
; ---------------------------------------------------------------------------

loc_6FFD3EF5:				; CODE XREF: _ZlsR13QDBusArgumentRK18DBusMenuLayoutItem+4B6j
		mov	eax, [ecx+4]
		mov	edx, eax
		mov	[ebp+var_AC], eax
		mov	eax, [eax+4]
		cmp	edx, eax
		jnz	short loc_6FFD3F39
		jmp	short loc_6FFD3F70
; ---------------------------------------------------------------------------
		align 10h

loc_6FFD3F10:				; CODE XREF: _ZlsR13QDBusArgumentRK18DBusMenuLayoutItem+5F6j
					; _ZlsR13QDBusArgumentRK18DBusMenuLayoutItem+60Bj
		mov	eax, [ebp+var_A0]
		mov	[ebp+var_78], 2
		add	eax, 8
		mov	[esp], eax
		call	ds:_ZN8QVariantD1Ev
		mov	ecx, [ebp+var_98]
		cmp	[ebp+var_AC], ecx
		jz	short loc_6FFD3F70
		mov	eax, ecx

loc_6FFD3F39:				; CODE XREF: _ZlsR13QDBusArgumentRK18DBusMenuLayoutItem+5A5j
		mov	ecx, [eax+4]
		lea	edx, [eax-1Ch]
		mov	[ebp+var_A0], edx
		mov	edx, [eax-1Ch]
		mov	[ebp+var_98], ecx
		lock dec dword ptr [edx]
		setnz	cl
		test	cl, cl
		jnz	short loc_6FFD3F10
		mov	eax, [eax-1Ch]
		mov	[ebp+var_78], 2
		mov	[esp], eax
		call	[ebp+var_E0]
		jmp	short loc_6FFD3F10
; ---------------------------------------------------------------------------
		align 10h

loc_6FFD3F70:				; CODE XREF: _ZlsR13QDBusArgumentRK18DBusMenuLayoutItem+5A7j
					; _ZlsR13QDBusArgumentRK18DBusMenuLayoutItem+5D5j
		mov	eax, [ebp+var_AC]
		mov	dword ptr [esp+4], 1Ch
		mov	[ebp+var_78], 2
		mov	[esp], eax
		call	ds:_ZN8QMapData16continueFreeDataEi
		jmp	loc_6FFD3E1C
; ---------------------------------------------------------------------------

loc_6FFD3F93:				; CODE XREF: _ZlsR13QDBusArgumentRK18DBusMenuLayoutItem+496j
					; _ZlsR13QDBusArgumentRK18DBusMenuLayoutItem+4D6j
		mov	eax, [ebp+var_F4]
		mov	[ebp+var_78], 2
		mov	[esp], eax
		call	ds:_Z5qFreePv
		jmp	loc_6FFD3D60
; ---------------------------------------------------------------------------
		align 10h

loc_6FFD3FB0:				; CODE XREF: _ZlsR13QDBusArgumentRK18DBusMenuLayoutItem+416j
		mov	ecx, [ebp+var_C8]
		mov	ecx, [ecx+4]
		mov	eax, [ecx+4]
		mov	[ebp+var_D4], ecx
		cmp	ecx, eax
		jnz	short loc_6FFD3FEF
		jmp	short loc_6FFD4023
; ---------------------------------------------------------------------------

loc_6FFD3FC8:				; CODE XREF: _ZlsR13QDBusArgumentRK18DBusMenuLayoutItem+6ACj
					; _ZlsR13QDBusArgumentRK18DBusMenuLayoutItem+6C1j
		mov	eax, [ebp+var_C4]
		mov	[ebp+var_78], 3
		add	eax, 8
		mov	[esp], eax
		call	ds:_ZN8QVariantD1Ev
		mov	eax, [ebp+var_B8]
		cmp	[ebp+var_D4], eax
		jz	short loc_6FFD4023

loc_6FFD3FEF:				; CODE XREF: _ZlsR13QDBusArgumentRK18DBusMenuLayoutItem+664j
		mov	edx, [eax+4]
		lea	ecx, [eax-1Ch]
		mov	[ebp+var_C4], ecx
		mov	[ebp+var_B8], edx
		mov	edx, [eax-1Ch]
		lock dec dword ptr [edx]
		setnz	cl
		test	cl, cl
		jnz	short loc_6FFD3FC8
		mov	eax, [eax-1Ch]
		mov	[ebp+var_78], 3
		mov	[esp], eax
		call	ds:_ZN7QString4freeEPNS_4DataE
		jmp	short loc_6FFD3FC8
; ---------------------------------------------------------------------------

loc_6FFD4023:				; CODE XREF: _ZlsR13QDBusArgumentRK18DBusMenuLayoutItem+666j
					; _ZlsR13QDBusArgumentRK18DBusMenuLayoutItem+68Dj
		mov	edx, [ebp+var_D4]
		mov	dword ptr [esp+4], 1Ch
		mov	[ebp+var_78], 3
		mov	[esp], edx
		call	ds:_ZN8QMapData16continueFreeDataEi
		jmp	loc_6FFD3D7C
; ---------------------------------------------------------------------------

loc_6FFD4046:				; CODE XREF: _ZlsR13QDBusArgumentRK18DBusMenuLayoutItem+3F7j
					; _ZlsR13QDBusArgumentRK18DBusMenuLayoutItem+436j
		mov	edx, [ebp+var_100]
		mov	[ebp+var_78], 3
		mov	[esp], edx
		call	ds:_Z5qFreePv
		jmp	loc_6FFD3CC1
; ---------------------------------------------------------------------------

loc_6FFD4061:				; CODE XREF: _ZlsR13QDBusArgumentRK18DBusMenuLayoutItem+377j
		mov	ecx, [ebp+var_EC]
		mov	ecx, [ecx+4]
		mov	eax, [ecx+4]
		mov	[ebp+var_F8], ecx
		cmp	ecx, eax
		jz	short loc_6FFD40DA
		mov	edx, ds:_ZN8QVariantD1Ev
		mov	[ebp+var_80], edx
		jmp	short loc_6FFD4084
; ---------------------------------------------------------------------------

loc_6FFD4082:				; CODE XREF: _ZlsR13QDBusArgumentRK18DBusMenuLayoutItem+778j
		mov	eax, ecx

loc_6FFD4084:				; CODE XREF: _ZlsR13QDBusArgumentRK18DBusMenuLayoutItem+720j
		mov	ecx, [eax+4]
		lea	edx, [eax-1Ch]
		mov	[ebp+var_E8], edx
		mov	edx, [eax-1Ch]
		mov	[ebp+var_E4], ecx
		lock dec dword ptr [edx]
		setnz	cl
		test	cl, cl
		jnz	short loc_6FFD40B6
		mov	eax, [eax-1Ch]
		mov	[ebp+var_78], 0FFFFFFFFh
		mov	[esp], eax
		call	ds:_ZN7QString4freeEPNS_4DataE

loc_6FFD40B6:				; CODE XREF: _ZlsR13QDBusArgumentRK18DBusMenuLayoutItem+741j
		mov	eax, [ebp+var_E8]
		mov	[ebp+var_78], 0FFFFFFFFh
		add	eax, 8
		mov	[esp], eax
		call	[ebp+var_80]
		mov	ecx, [ebp+var_E4]
		cmp	[ebp+var_F8], ecx
		jnz	short loc_6FFD4082

loc_6FFD40DA:				; CODE XREF: _ZlsR13QDBusArgumentRK18DBusMenuLayoutItem+715j
		mov	eax, [ebp+var_F8]
		mov	dword ptr [esp+4], 1Ch
		mov	[ebp+var_78], 0FFFFFFFFh
		mov	[esp], eax
		call	ds:_ZN8QMapData16continueFreeDataEi
		jmp	loc_6FFD3CDD
; ---------------------------------------------------------------------------

loc_6FFD40FD:				; CODE XREF: _ZlsR13QDBusArgumentRK18DBusMenuLayoutItem+34Ej
					; _ZlsR13QDBusArgumentRK18DBusMenuLayoutItem+397j
		mov	eax, [ebp+var_108]
		mov	[ebp+var_78], 0FFFFFFFFh
		mov	[esp], eax
		call	ds:_Z5qFreePv
		jmp	loc_6FFD3C4D
; ---------------------------------------------------------------------------

loc_6FFD4118:				; CODE XREF: _ZlsR13QDBusArgumentRK18DBusMenuLayoutItem+1D4j
		mov	eax, [eax+4]
		mov	[esp+4], eax
		lea	eax, [ebp+var_18]
		mov	[esp], eax
		call	sub_6FFE77F0
		jmp	loc_6FFD3B3A
; ---------------------------------------------------------------------------

loc_6FFD412F:				; CODE XREF: _ZlsR13QDBusArgumentRK18DBusMenuLayoutItem+19Cj
		mov	dword ptr [esp+8], offset sub_6FFDE900
		mov	dword ptr [esp+4], offset sub_6FFDDD40
		mov	dword ptr [esp], offset	aQdbusvariant ;	"QDBusVariant"
		call	ds:_ZN9QMetaType12registerTypeEPKcPFvPvEPFS2_PKvE
		mov	dword_6FFF2A9C,	eax
		jmp	loc_6FFD3B02
; ---------------------------------------------------------------------------

loc_6FFD4156:				; CODE XREF: _ZlsR13QDBusArgumentRK18DBusMenuLayoutItem+67j
		mov	dword ptr [esp+8], offset sub_6FFDE900
		mov	dword ptr [esp+4], offset sub_6FFDDD40
		mov	dword ptr [esp], offset	aQdbusvariant ;	"QDBusVariant"
		call	ds:_ZN9QMetaType12registerTypeEPKcPFvPvEPFS2_PKvE
		mov	dword_6FFF2A9C,	eax
		jmp	loc_6FFD39CD
_ZlsR13QDBusArgumentRK18DBusMenuLayoutItem endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn

sub_6FFD417D	proc near		; DATA XREF: _ZlsR13QDBusArgumentRK18DBusMenuLayoutItem+23o
		add	ebp, 8
		mov	eax, [ebp-78h]
		mov	edx, [ebp-74h]
		cmp	eax, 1
		mov	[ebp-10Ch], edx
		jz	short loc_6FFD41CE
		cmp	eax, 2
		jz	short loc_6FFD41E6
		cmp	eax, 3
		jz	loc_6FFD4260
		cmp	eax, 4
		jz	short loc_6FFD4213
		cmp	eax, 5
		jz	short loc_6FFD4226
		cmp	eax, 6
		lea	esi, [esi+0]
		jz	loc_6FFD4239
		mov	eax, [ebp-0A4h]
		mov	dword ptr [ebp-78h], 0
		add	eax, 4
		mov	[esp+0], eax
		call	sub_6FFE4290

loc_6FFD41CE:				; CODE XREF: sub_6FFD417D+12j
		mov	eax, [ebp-0C8h]
		mov	dword ptr [ebp-78h], 0
		add	eax, 4
		mov	[esp+0], eax
		call	sub_6FFE4290

loc_6FFD41E6:				; CODE XREF: sub_6FFD417D+17j
		mov	eax, [ebp-0ECh]
		mov	dword ptr [ebp-78h], 0
		add	eax, 4
		mov	[esp+0], eax
		call	sub_6FFE4290
		mov	ecx, [ebp-10Ch]
		mov	dword ptr [ebp-78h], 0FFFFFFFFh
		mov	[esp+0], ecx
		call	_Unwind_SjLj_Resume
; ---------------------------------------------------------------------------

loc_6FFD4213:				; CODE XREF: sub_6FFD417D+25j
		lea	eax, [ebp-38h]
		mov	[esp+0], eax
		mov	dword ptr [ebp-78h], 0
		call	ds:_ZN8QVariantD2Ev

loc_6FFD4226:				; CODE XREF: sub_6FFD417D+2Aj
		lea	eax, [ebp-28h]
		mov	[esp+0], eax
		mov	dword ptr [ebp-78h], 0
		call	ds:_ZN8QVariantD1Ev

loc_6FFD4239:				; CODE XREF: sub_6FFD417D+33j
		lea	eax, [ebp-18h]
		mov	[esp+0], eax
		mov	dword ptr [ebp-78h], 0
		call	sub_6FFE8A10
		mov	eax, [ebp-10Ch]
		mov	dword ptr [ebp-78h], 0FFFFFFFFh
		mov	[esp+0], eax
		call	_Unwind_SjLj_Resume
; ---------------------------------------------------------------------------

loc_6FFD4260:				; CODE XREF: sub_6FFD417D+1Cj
		lea	eax, [ebp-48h]
		mov	[esp+0], eax
		mov	dword ptr [ebp-78h], 0
		call	ds:_ZN8QVariantD2Ev
		mov	ecx, [ebp-10Ch]
		mov	dword ptr [ebp-78h], 0FFFFFFFFh
		mov	[esp+0], ecx
		call	_Unwind_SjLj_Resume
sub_6FFD417D	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_6FFD4290	proc near		; CODE XREF: _ZNK16DBusMenuShortcut13toKeySequenceEv+B6p
					; _ZN16DBusMenuShortcut15fromKeySequenceERK12QKeySequence+24Ep

var_84		= dword	ptr -84h
var_80		= dword	ptr -80h
var_7C		= dword	ptr -7Ch
var_78		= dword	ptr -78h
var_74		= dword	ptr -74h
var_70		= dword	ptr -70h
var_6C		= dword	ptr -6Ch
var_68		= dword	ptr -68h
var_64		= dword	ptr -64h
var_60		= dword	ptr -60h
var_5C		= dword	ptr -5Ch
var_58		= dword	ptr -58h
var_54		= dword	ptr -54h
var_50		= dword	ptr -50h
var_4C		= byte ptr -4Ch
var_48		= dword	ptr -48h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= byte ptr -8

		push	ebp
		mov	ebp, esp
		sub	esp, 98h
		mov	[ebp+var_64], eax
		lea	eax, [ebp+var_8]
		mov	[ebp+var_2C], eax
		lea	eax, [ebp+var_4C]
		mov	[ebp+var_80], edx
		mov	[ebp+var_84], ecx
		mov	[ebp+var_34], offset sub_6FFEC1F0
		mov	[ebp+var_30], offset dword_6FFED314
		mov	[ebp+var_28], offset sub_6FFD4651
		mov	[ebp+var_24], esp
		mov	[esp], eax
		call	_Unwind_SjLj_Register
		mov	edx, ds:off_6FFF5560
		test	edx, edx
		mov	[ebp+var_60], edx
		jz	short loc_6FFD4305
		mov	eax, [ebp+var_80]
		test	eax, eax
		jz	short loc_6FFD4312
		mov	ecx, [ebp+var_84]
		mov	[ebp+var_68], offset off_6FFF5560
		test	ecx, ecx
		jnz	loc_6FFD44B0
		mov	edx, ds:_ZN7QString16fromAscii_helperEPKci
		mov	[ebp+var_54], edx
		jmp	loc_6FFD4431
; ---------------------------------------------------------------------------

loc_6FFD4305:				; CODE XREF: sub_6FFD4290+49j
					; sub_6FFD4290+E3j ...
		lea	eax, [ebp+var_4C]
		mov	[esp], eax
		call	_Unwind_SjLj_Unregister
		leave
		retn
; ---------------------------------------------------------------------------

loc_6FFD4312:				; CODE XREF: sub_6FFD4290+50j
		mov	eax, [ebp+var_84]
		mov	[ebp+var_74], offset off_6FFF5560
		test	eax, eax
		jnz	loc_6FFD4580
		mov	edx, ds:_ZN7QString16fromAscii_helperEPKci
		mov	[ebp+var_5C], edx
		jmp	short loc_6FFD4375
; ---------------------------------------------------------------------------

loc_6FFD4332:				; CODE XREF: sub_6FFD4290+155j
		mov	eax, [ebp+var_C]
		mov	[ebp+var_48], 2
		mov	[esp], eax
		call	ds:_ZN7QString4freeEPNS_4DataE

loc_6FFD4345:				; CODE XREF: sub_6FFD4290+14Fj
		mov	eax, [ebp+var_10]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jnz	short loc_6FFD4365
		mov	eax, [ebp+var_10]
		mov	[ebp+var_48], 0FFFFFFFFh
		mov	[esp], eax
		call	ds:_ZN7QString4freeEPNS_4DataE

loc_6FFD4365:				; CODE XREF: sub_6FFD4290+C0j
		add	[ebp+var_74], 8
		mov	edx, [ebp+var_74]
		mov	edx, [edx]
		test	edx, edx
		mov	[ebp+var_60], edx
		jz	short loc_6FFD4305

loc_6FFD4375:				; CODE XREF: sub_6FFD4290+A0j
		mov	eax, [ebp+var_60]
		mov	dword ptr [esp+4], 0FFFFFFFFh
		mov	[ebp+var_48], 0FFFFFFFFh
		mov	[esp], eax
		call	[ebp+var_5C]
		mov	edx, [ebp+var_60]
		mov	dword ptr [esp+4], 0FFFFFFFFh
		mov	[ebp+var_48], 2
		mov	[esp], edx
		mov	[ebp+var_10], eax
		call	[ebp+var_5C]
		mov	[ebp+var_C], eax
		lea	eax, [ebp+var_10]
		mov	[esp+8], eax
		mov	eax, [ebp+var_64]
		lea	edx, [ebp+var_C]
		mov	dword ptr [esp+0Ch], 1
		mov	[esp+4], edx
		mov	[ebp+var_48], 1
		mov	[esp], eax
		call	ds:_ZN9QtPrivate28QStringList_replaceInStringsEP11QStringListRK7QStringS4_N2Qt15CaseSensitivityE
		mov	eax, [ebp+var_C]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jnz	loc_6FFD4345
		jmp	loc_6FFD4332
; ---------------------------------------------------------------------------

loc_6FFD43EA:				; CODE XREF: sub_6FFD4290+21Aj
		mov	eax, [ebp+var_C]
		mov	[ebp+var_48], 2
		mov	[esp], eax
		call	ds:_ZN7QString4freeEPNS_4DataE

loc_6FFD43FD:				; CODE XREF: sub_6FFD4290+214j
		mov	eax, [ebp+var_10]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jnz	short loc_6FFD441D
		mov	eax, [ebp+var_10]
		mov	[ebp+var_48], 0FFFFFFFFh
		mov	[esp], eax
		call	ds:_ZN7QString4freeEPNS_4DataE

loc_6FFD441D:				; CODE XREF: sub_6FFD4290+178j
		add	[ebp+var_68], 8
		mov	eax, [ebp+var_68]
		mov	eax, [eax]
		test	eax, eax
		mov	[ebp+var_60], eax
		jz	loc_6FFD4305

loc_6FFD4431:				; CODE XREF: sub_6FFD4290+70j
		mov	eax, [ebp+var_68]
		mov	edx, [ebp+var_60]
		mov	eax, [eax+4]
		mov	dword ptr [esp+4], 0FFFFFFFFh
		mov	[esp], edx
		mov	[ebp+var_48], 0FFFFFFFFh
		mov	[ebp+var_7C], eax
		call	[ebp+var_54]
		mov	dword ptr [esp+4], 0FFFFFFFFh
		mov	[ebp+var_48], 2
		mov	[ebp+var_10], eax
		mov	eax, [ebp+var_7C]
		mov	[esp], eax
		call	[ebp+var_54]
		lea	edx, [ebp+var_10]
		mov	[esp+8], edx
		mov	edx, [ebp+var_64]
		mov	[ebp+var_C], eax
		lea	eax, [ebp+var_C]
		mov	dword ptr [esp+0Ch], 1
		mov	[esp+4], eax
		mov	[esp], edx
		mov	[ebp+var_48], 1
		call	ds:_ZN9QtPrivate28QStringList_replaceInStringsEP11QStringListRK7QStringS4_N2Qt15CaseSensitivityE
		mov	eax, [ebp+var_C]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jnz	loc_6FFD43FD
		jmp	loc_6FFD43EA
; ---------------------------------------------------------------------------
		align 10h

loc_6FFD44B0:				; CODE XREF: sub_6FFD4290+61j
		mov	eax, ds:_ZN7QString16fromAscii_helperEPKci
		mov	[ebp+var_70], offset off_6FFF5560
		mov	[ebp+var_50], eax
		jmp	short loc_6FFD44F2
; ---------------------------------------------------------------------------

loc_6FFD44C1:				; CODE XREF: sub_6FFD4290+2D2j
					; sub_6FFD4290+2EBj
		mov	eax, [ebp+var_10]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jnz	short loc_6FFD44E1
		mov	eax, [ebp+var_10]
		mov	[ebp+var_48], 0FFFFFFFFh
		mov	[esp], eax
		call	ds:_ZN7QString4freeEPNS_4DataE

loc_6FFD44E1:				; CODE XREF: sub_6FFD4290+23Cj
		add	[ebp+var_70], 8
		mov	eax, [ebp+var_70]
		mov	edx, [eax]
		test	edx, edx
		jz	loc_6FFD4305

loc_6FFD44F2:				; CODE XREF: sub_6FFD4290+22Fj
		mov	edx, [ebp+var_70]
		mov	edx, [edx+4]
		mov	dword ptr [esp+4], 0FFFFFFFFh
		mov	[ebp+var_48], 0FFFFFFFFh
		mov	[ebp+var_78], edx
		mov	[esp], edx
		call	[ebp+var_50]
		mov	dword ptr [esp+4], 0FFFFFFFFh
		mov	[ebp+var_48], 2
		mov	[ebp+var_10], eax
		mov	eax, [ebp+var_78]
		mov	[esp], eax
		call	[ebp+var_50]
		lea	edx, [ebp+var_10]
		mov	[esp+8], edx
		mov	edx, [ebp+var_64]
		mov	[ebp+var_C], eax
		lea	eax, [ebp+var_C]
		mov	dword ptr [esp+0Ch], 1
		mov	[esp+4], eax
		mov	[esp], edx
		mov	[ebp+var_48], 1
		call	ds:_ZN9QtPrivate28QStringList_replaceInStringsEP11QStringListRK7QStringS4_N2Qt15CaseSensitivityE
		mov	eax, [ebp+var_C]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jnz	loc_6FFD44C1
		mov	eax, [ebp+var_C]
		mov	[ebp+var_48], 2
		mov	[esp], eax
		call	ds:_ZN7QString4freeEPNS_4DataE
		jmp	loc_6FFD44C1
; ---------------------------------------------------------------------------

loc_6FFD4580:				; CODE XREF: sub_6FFD4290+91j
		mov	edx, ds:_ZN7QString16fromAscii_helperEPKci
		mov	[ebp+var_6C], offset off_6FFF5560
		mov	[ebp+var_58], edx
		jmp	short loc_6FFD45C6
; ---------------------------------------------------------------------------

loc_6FFD4592:				; CODE XREF: sub_6FFD4290+3A3j
					; sub_6FFD4290+3BCj
		mov	eax, [ebp+var_10]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jnz	short loc_6FFD45B2
		mov	eax, [ebp+var_10]
		mov	[ebp+var_48], 0FFFFFFFFh
		mov	[esp], eax
		call	ds:_ZN7QString4freeEPNS_4DataE

loc_6FFD45B2:				; CODE XREF: sub_6FFD4290+30Dj
		add	[ebp+var_6C], 8
		mov	eax, [ebp+var_6C]
		mov	eax, [eax]
		test	eax, eax
		mov	[ebp+var_60], eax
		jz	loc_6FFD4305

loc_6FFD45C6:				; CODE XREF: sub_6FFD4290+300j
		mov	edx, [ebp+var_6C]
		mov	dword ptr [esp+4], 0FFFFFFFFh
		mov	eax, [edx+4]
		mov	[ebp+var_48], 0FFFFFFFFh
		mov	[esp], eax
		call	[ebp+var_58]
		mov	dword ptr [esp+4], 0FFFFFFFFh
		mov	[ebp+var_48], 2
		mov	[ebp+var_10], eax
		mov	eax, [ebp+var_60]
		mov	[esp], eax
		call	[ebp+var_58]
		lea	edx, [ebp+var_10]
		mov	[esp+8], edx
		mov	edx, [ebp+var_64]
		mov	[ebp+var_C], eax
		lea	eax, [ebp+var_C]
		mov	dword ptr [esp+0Ch], 1
		mov	[esp+4], eax
		mov	[esp], edx
		mov	[ebp+var_48], 1
		call	ds:_ZN9QtPrivate28QStringList_replaceInStringsEP11QStringListRK7QStringS4_N2Qt15CaseSensitivityE
		mov	eax, [ebp+var_C]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jnz	loc_6FFD4592
		mov	eax, [ebp+var_C]
		mov	[ebp+var_48], 2
		mov	[esp], eax
		call	ds:_ZN7QString4freeEPNS_4DataE
		jmp	loc_6FFD4592
sub_6FFD4290	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn

sub_6FFD4651	proc near		; DATA XREF: sub_6FFD4290+2Co
		add	ebp, 8
		mov	edx, [ebp-44h]
		cmp	dword ptr [ebp-48h], 1
		mov	[ebp-88h], edx
		jz	short loc_6FFD4675
		lea	eax, [ebp-0Ch]
		mov	[esp+0], eax
		mov	dword ptr [ebp-48h], 0
		call	sub_6FFEA140

loc_6FFD4675:				; CODE XREF: sub_6FFD4651+10j
		lea	eax, [ebp-10h]
		mov	[esp+0], eax
		mov	dword ptr [ebp-48h], 0
		call	sub_6FFEA140
		mov	eax, [ebp-88h]
		mov	dword ptr [ebp-48h], 0FFFFFFFFh
		mov	[esp+0], eax
		call	_Unwind_SjLj_Resume
sub_6FFD4651	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  46. _ZNK16DBusMenuShortcut13toKeySequenceEv

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public _ZNK16DBusMenuShortcut13toKeySequenceEv
_ZNK16DBusMenuShortcut13toKeySequenceEv	proc near ; CODE XREF: sub_6FFE1870+7FAp

var_A8		= dword	ptr -0A8h
var_9C		= dword	ptr -9Ch
var_98		= dword	ptr -98h
var_94		= dword	ptr -94h
var_90		= dword	ptr -90h
var_8C		= dword	ptr -8Ch
var_88		= dword	ptr -88h
var_84		= dword	ptr -84h
var_80		= dword	ptr -80h
var_7C		= dword	ptr -7Ch
var_78		= dword	ptr -78h
var_74		= dword	ptr -74h
var_70		= dword	ptr -70h
var_6C		= byte ptr -6Ch
var_68		= dword	ptr -68h
var_54		= dword	ptr -54h
var_50		= dword	ptr -50h
var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= byte ptr -8
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 0B8h
		lea	eax, [ebp+var_8]
		mov	[ebp+var_4C], eax
		lea	eax, [ebp+var_6C]
		mov	[esp], eax
		mov	[ebp+var_54], offset sub_6FFEC1F0
		mov	[ebp+var_50], offset dword_6FFED36C
		mov	[ebp+var_48], offset sub_6FFD4B60
		mov	[ebp+var_44], esp
		call	_Unwind_SjLj_Register
		mov	eax, ds:_ZN9QListData11shared_nullE
		mov	[ebp+var_C], eax
		lock inc dword ptr [eax]
		setnz	dl
		mov	eax, [ebp+arg_4]
		mov	eax, [eax]
		mov	[ebp+var_30], eax
		lock inc dword ptr [eax]
		setnz	dl
		mov	eax, [ebp+var_30]
		test	byte ptr [eax+10h], 1
		jz	loc_6FFD4B42

loc_6FFD46FB:				; CODE XREF: _ZNK16DBusMenuShortcut13toKeySequenceEv+4BBj
		mov	eax, [ebp+var_30]
		mov	[ebp+var_2C], 0
		mov	edx, [eax+8]
		mov	ecx, [eax+0Ch]
		lea	edx, [eax+edx*4+14h]
		lea	eax, [eax+ecx*4+14h]
		cmp	edx, eax
		mov	[ebp+var_28], edx
		mov	[ebp+var_24], eax
		jnz	short loc_6FFD472B
		jmp	loc_6FFD47F7
; ---------------------------------------------------------------------------

loc_6FFD4722:				; CODE XREF: _ZNK16DBusMenuShortcut13toKeySequenceEv+151j
		cmp	edx, [ebp+var_24]
		jz	loc_6FFD47F7

loc_6FFD472B:				; CODE XREF: _ZNK16DBusMenuShortcut13toKeySequenceEv+7Bj
		mov	eax, [edx]
		mov	eax, [eax]
		mov	[ebp+var_10], eax
		lock inc dword ptr [eax]
		setnz	dl
		mov	eax, [ebp+var_10]
		test	byte ptr [eax+10h], 1
		jz	loc_6FFD4A68

loc_6FFD4745:				; CODE XREF: _ZNK16DBusMenuShortcut13toKeySequenceEv+3E1j
		xor	ecx, ecx
		mov	edx, 1
		lea	eax, [ebp+var_10]
		mov	[ebp+var_68], 5
		call	sub_6FFD4290
		mov	dword ptr [esp+4], 0FFFFFFFFh
		mov	dword ptr [esp], offset	asc_6FFF552B ; "+"
		call	ds:_ZN7QString17fromLatin1_helperEPKci
		mov	[ebp+var_14], eax
		lea	eax, [ebp+var_14]
		mov	[esp+8], eax
		lea	ecx, [ebp+var_10]
		lea	eax, [ebp+var_18]
		mov	[esp+4], ecx
		mov	[esp], eax
		mov	[ebp+var_68], 4
		call	ds:_ZN9QtPrivate16QStringList_joinEPK11QStringListRK7QString
		sub	esp, 4
		lea	edx, [ebp+var_18]
		lea	eax, [ebp+var_C]
		mov	[esp+4], edx
		mov	[esp], eax
		mov	[ebp+var_68], 3
		call	sub_6FFE8EA0
		mov	eax, [ebp+var_18]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jz	loc_6FFD4A50

loc_6FFD47C1:				; CODE XREF: _ZNK16DBusMenuShortcut13toKeySequenceEv+3C3j
		mov	eax, [ebp+var_14]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jz	loc_6FFD4A34

loc_6FFD47D2:				; CODE XREF: _ZNK16DBusMenuShortcut13toKeySequenceEv+3A7j
		mov	eax, [ebp+var_10]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jz	loc_6FFD49C0

loc_6FFD47E3:				; CODE XREF: _ZNK16DBusMenuShortcut13toKeySequenceEv+38Fj
		mov	edx, [ebp+var_28]
		mov	eax, [ebp+var_2C]
		add	edx, 4
		test	eax, eax
		mov	[ebp+var_28], edx
		jz	loc_6FFD4722

loc_6FFD47F7:				; CODE XREF: _ZNK16DBusMenuShortcut13toKeySequenceEv+7Dj
					; _ZNK16DBusMenuShortcut13toKeySequenceEv+85j
		mov	eax, [ebp+var_30]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jnz	short loc_6FFD4848
		mov	edx, [ebp+var_30]
		mov	eax, edx
		mov	ecx, edx
		mov	[ebp+var_9C], edx
		mov	edx, [edx+0Ch]
		add	eax, 14h
		lea	edx, [eax+edx*4]
		mov	[ebp+var_80], edx
		mov	edx, [ecx+8]
		lea	edx, [eax+edx*4]
		cmp	[ebp+var_80], edx
		mov	[ebp+var_94], edx
		jnz	loc_6FFD4928

loc_6FFD4832:				; CODE XREF: _ZNK16DBusMenuShortcut13toKeySequenceEv+282j
		mov	edx, [ebp+var_9C]
		mov	[ebp+var_68], 7
		mov	[esp], edx
		call	ds:_Z5qFreePv

loc_6FFD4848:				; CODE XREF: _ZNK16DBusMenuShortcut13toKeySequenceEv+162j
		mov	dword ptr [esp+4], 0FFFFFFFFh
		mov	dword ptr [esp], offset	asc_6FFF552D ; ", "
		mov	[ebp+var_68], 7
		call	ds:_ZN7QString17fromLatin1_helperEPKci
		lea	edx, [ebp+var_20]
		mov	[ebp+var_20], eax
		lea	eax, [ebp+var_1C]
		mov	[esp+8], edx
		lea	edx, [ebp+var_C]
		mov	[esp+4], edx
		mov	[esp], eax
		mov	[ebp+var_68], 2
		call	ds:_ZN9QtPrivate16QStringList_joinEPK11QStringListRK7QString
		sub	esp, 4
		mov	eax, [ebp+var_20]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jz	loc_6FFD4A86

loc_6FFD489C:				; CODE XREF: _ZNK16DBusMenuShortcut13toKeySequenceEv+3F9j
		mov	ecx, [ebp+arg_0]
		lea	eax, [ebp+var_1C]
		mov	dword ptr [esp+8], 1
		mov	[esp+4], eax
		mov	[ebp+var_68], 1
		mov	[esp], ecx
		call	ds:_ZN12QKeySequence10fromStringERK7QStringNS_14SequenceFormatE
		sub	esp, 4
		mov	eax, [ebp+var_1C]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jz	loc_6FFD4B2A

loc_6FFD48D2:				; CODE XREF: _ZNK16DBusMenuShortcut13toKeySequenceEv+49Dj
		mov	eax, [ebp+var_C]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jz	loc_6FFD4A9E

loc_6FFD48E3:				; CODE XREF: _ZNK16DBusMenuShortcut13toKeySequenceEv+485j
		lea	eax, [ebp+var_6C]
		mov	[esp], eax
		call	_Unwind_SjLj_Unregister
		mov	eax, [ebp+arg_0]
		leave
		retn	4
; ---------------------------------------------------------------------------

loc_6FFD48F5:				; CODE XREF: _ZNK16DBusMenuShortcut13toKeySequenceEv+2D4j
					; _ZNK16DBusMenuShortcut13toKeySequenceEv+2E9j
		mov	edx, [ebp+var_90]
		mov	[ebp+var_68], 7
		mov	[esp], edx
		call	ds:_Z5qFreePv

loc_6FFD490B:				; CODE XREF: _ZNK16DBusMenuShortcut13toKeySequenceEv+2A5j
		mov	ecx, [ebp+var_84]
		mov	[esp], ecx
		call	sub_6FFEAE50

loc_6FFD4919:				; CODE XREF: _ZNK16DBusMenuShortcut13toKeySequenceEv+299j
		mov	eax, [ebp+var_80]
		cmp	[ebp+var_94], eax
		jz	loc_6FFD4832

loc_6FFD4928:				; CODE XREF: _ZNK16DBusMenuShortcut13toKeySequenceEv+18Cj
		sub	[ebp+var_80], 4
		mov	eax, [ebp+var_80]
		mov	eax, [eax]
		test	eax, eax
		mov	[ebp+var_84], eax
		jz	short loc_6FFD4919
		mov	eax, [eax]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jnz	short loc_6FFD490B
		mov	ecx, [ebp+var_84]
		mov	ecx, [ecx]
		mov	edx, [ecx+0Ch]
		mov	eax, ecx
		add	eax, 14h
		mov	[ebp+var_90], ecx
		lea	edx, [eax+edx*4]
		mov	[ebp+var_7C], edx
		mov	edx, [ecx+8]
		lea	edx, [eax+edx*4]
		cmp	[ebp+var_7C], edx
		mov	[ebp+var_8C], edx
		jnz	short loc_6FFD498F
		jmp	loc_6FFD48F5
; ---------------------------------------------------------------------------
		align 10h

loc_6FFD4980:				; CODE XREF: _ZNK16DBusMenuShortcut13toKeySequenceEv+300j
					; _ZNK16DBusMenuShortcut13toKeySequenceEv+317j
		mov	eax, [ebp+var_7C]
		cmp	[ebp+var_8C], eax
		jz	loc_6FFD48F5

loc_6FFD498F:				; CODE XREF: _ZNK16DBusMenuShortcut13toKeySequenceEv+2D2j
		sub	[ebp+var_7C], 4
		mov	edx, [ebp+var_7C]
		mov	eax, [edx]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jnz	short loc_6FFD4980
		mov	ecx, [ebp+var_7C]
		mov	eax, [ecx]
		mov	[ebp+var_68], 7
		mov	[esp], eax
		call	ds:_ZN7QString4freeEPNS_4DataE
		jmp	short loc_6FFD4980
; ---------------------------------------------------------------------------
		align 10h

loc_6FFD49C0:				; CODE XREF: _ZNK16DBusMenuShortcut13toKeySequenceEv+13Dj
		mov	ecx, [ebp+var_10]
		mov	edx, [ecx+0Ch]
		mov	eax, ecx
		add	eax, 14h
		mov	[ebp+var_78], ecx
		lea	edx, [eax+edx*4]
		mov	[ebp+var_70], edx
		mov	edx, [ecx+8]
		lea	edx, [eax+edx*4]
		cmp	[ebp+var_70], edx
		mov	[ebp+var_74], edx
		jnz	short loc_6FFD49EC
		jmp	short loc_6FFD4A1C
; ---------------------------------------------------------------------------

loc_6FFD49E4:				; CODE XREF: _ZNK16DBusMenuShortcut13toKeySequenceEv+35Dj
		mov	eax, [ebp+var_70]
		cmp	[ebp+var_74], eax
		jz	short loc_6FFD4A1C

loc_6FFD49EC:				; CODE XREF: _ZNK16DBusMenuShortcut13toKeySequenceEv+340j
					; _ZNK16DBusMenuShortcut13toKeySequenceEv+37Aj
		sub	[ebp+var_70], 4
		mov	edx, [ebp+var_70]
		mov	eax, [edx]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jnz	short loc_6FFD49E4
		mov	ecx, [ebp+var_70]
		mov	eax, [ecx]
		mov	[ebp+var_68], 6
		mov	[esp], eax
		call	ds:_ZN7QString4freeEPNS_4DataE
		mov	eax, [ebp+var_70]
		cmp	[ebp+var_74], eax
		jnz	short loc_6FFD49EC

loc_6FFD4A1C:				; CODE XREF: _ZNK16DBusMenuShortcut13toKeySequenceEv+342j
					; _ZNK16DBusMenuShortcut13toKeySequenceEv+34Aj
		mov	edx, [ebp+var_78]
		mov	[ebp+var_68], 6
		mov	[esp], edx
		call	ds:_Z5qFreePv
		jmp	loc_6FFD47E3
; ---------------------------------------------------------------------------

loc_6FFD4A34:				; CODE XREF: _ZNK16DBusMenuShortcut13toKeySequenceEv+12Cj
		mov	eax, [ebp+var_14]
		mov	[ebp+var_68], 5
		mov	[esp], eax
		call	ds:_ZN7QString4freeEPNS_4DataE
		jmp	loc_6FFD47D2
; ---------------------------------------------------------------------------
		align 10h

loc_6FFD4A50:				; CODE XREF: _ZNK16DBusMenuShortcut13toKeySequenceEv+11Bj
		mov	eax, [ebp+var_18]
		mov	[ebp+var_68], 4
		mov	[esp], eax
		call	ds:_ZN7QString4freeEPNS_4DataE
		jmp	loc_6FFD47C1
; ---------------------------------------------------------------------------

loc_6FFD4A68:				; CODE XREF: _ZNK16DBusMenuShortcut13toKeySequenceEv+9Fj
		mov	eax, [eax+4]
		lea	edx, [ebp+var_10]
		mov	[esp], edx
		mov	[ebp+var_68], 6
		mov	[esp+4], eax
		call	sub_6FFE8C20
		jmp	loc_6FFD4745
; ---------------------------------------------------------------------------

loc_6FFD4A86:				; CODE XREF: _ZNK16DBusMenuShortcut13toKeySequenceEv+1F6j
		mov	eax, [ebp+var_20]
		mov	[ebp+var_68], 1
		mov	[esp], eax
		call	ds:_ZN7QString4freeEPNS_4DataE
		jmp	loc_6FFD489C
; ---------------------------------------------------------------------------

loc_6FFD4A9E:				; CODE XREF: _ZNK16DBusMenuShortcut13toKeySequenceEv+23Dj
		mov	eax, [ebp+var_C]
		mov	[ebp+var_A8], eax
		mov	ecx, [ebp+var_A8]
		add	eax, 14h
		mov	edx, [ecx+0Ch]
		lea	edx, [eax+edx*4]
		mov	[ebp+var_88], edx
		mov	edx, [ecx+8]
		lea	edx, [eax+edx*4]
		cmp	[ebp+var_88], edx
		mov	[ebp+var_98], edx
		jz	short loc_6FFD4B0F

loc_6FFD4AD0:				; CODE XREF: _ZNK16DBusMenuShortcut13toKeySequenceEv+46Dj
		sub	[ebp+var_88], 4
		mov	edx, [ebp+var_88]
		mov	eax, [edx]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jnz	short loc_6FFD4B01
		mov	ecx, [ebp+var_88]
		mov	eax, [ecx]
		mov	[ebp+var_68], 0FFFFFFFFh
		mov	[esp], eax
		call	ds:_ZN7QString4freeEPNS_4DataE

loc_6FFD4B01:				; CODE XREF: _ZNK16DBusMenuShortcut13toKeySequenceEv+447j
		mov	eax, [ebp+var_88]
		cmp	[ebp+var_98], eax
		jnz	short loc_6FFD4AD0

loc_6FFD4B0F:				; CODE XREF: _ZNK16DBusMenuShortcut13toKeySequenceEv+42Ej
		mov	edx, [ebp+var_A8]
		mov	[ebp+var_68], 0FFFFFFFFh
		mov	[esp], edx
		call	ds:_Z5qFreePv
		jmp	loc_6FFD48E3
; ---------------------------------------------------------------------------

loc_6FFD4B2A:				; CODE XREF: _ZNK16DBusMenuShortcut13toKeySequenceEv+22Cj
		mov	eax, [ebp+var_1C]
		mov	[ebp+var_68], 7
		mov	[esp], eax
		call	ds:_ZN7QString4freeEPNS_4DataE
		jmp	loc_6FFD48D2
; ---------------------------------------------------------------------------

loc_6FFD4B42:				; CODE XREF: _ZNK16DBusMenuShortcut13toKeySequenceEv+55j
		mov	eax, [eax+4]
		mov	[ebp+var_68], 7
		mov	[esp+4], eax
		lea	eax, [ebp+var_30]
		mov	[esp], eax
		call	sub_6FFE54B0
		jmp	loc_6FFD46FB
_ZNK16DBusMenuShortcut13toKeySequenceEv	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn

sub_6FFD4B60	proc near		; DATA XREF: _ZNK16DBusMenuShortcut13toKeySequenceEv+23o

arg_0		= dword	ptr  4

		add	ebp, 8
		mov	eax, [ebp-68h]
		mov	edx, [ebp-64h]
		cmp	eax, 1
		mov	[ebp-0A4h], edx
		jz	loc_6FFD4C44
		cmp	eax, 2
		jz	short loc_6FFD4BCB
		cmp	eax, 3
		jz	short loc_6FFD4BDD
		cmp	eax, 4
		jz	short loc_6FFD4BEF
		cmp	eax, 5
		jz	short loc_6FFD4C01
		cmp	eax, 6
		nop
		jz	short loc_6FFD4BA4
		lea	eax, [ebp-1Ch]
		mov	[esp+0], eax
		mov	dword ptr [ebp-68h], 0
		call	sub_6FFEA140

loc_6FFD4BA4:				; CODE XREF: sub_6FFD4B60+30j
					; sub_6FFD4B60+DFj ...
		lea	eax, [ebp-0Ch]
		mov	[esp+0], eax
		mov	dword ptr [ebp-68h], 0
		call	sub_6FFDF990
		mov	ecx, [ebp-0A4h]
		mov	dword ptr [ebp-68h], 0FFFFFFFFh
		mov	[esp+0], ecx
		call	_Unwind_SjLj_Resume
; ---------------------------------------------------------------------------

loc_6FFD4BCB:				; CODE XREF: sub_6FFD4B60+1Bj
		lea	eax, [ebp-18h]
		mov	[esp+0], eax
		mov	dword ptr [ebp-68h], 0
		call	sub_6FFEA140

loc_6FFD4BDD:				; CODE XREF: sub_6FFD4B60+20j
		lea	eax, [ebp-14h]
		mov	[esp+0], eax
		mov	dword ptr [ebp-68h], 0
		call	sub_6FFEA140

loc_6FFD4BEF:				; CODE XREF: sub_6FFD4B60+25j
		lea	eax, [ebp-10h]
		mov	[esp+0], eax
		mov	dword ptr [ebp-68h], 0
		call	sub_6FFDF990

loc_6FFD4C01:				; CODE XREF: sub_6FFD4B60+2Aj
		mov	ecx, [ebp-0A4h]
		mov	eax, [ebp-30h]
		mov	[ebp-0A0h], ecx
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jnz	short loc_6FFD4C33
		mov	eax, [ebp-30h]
		mov	dword ptr [ebp-68h], 0
		mov	[esp+arg_0], eax
		lea	eax, [ebp-30h]
		mov	[esp+0], eax
		call	sub_6FFE5810

loc_6FFD4C33:				; CODE XREF: sub_6FFD4B60+B8j
		mov	eax, [ebp-0A0h]
		mov	[ebp-0A4h], eax
		jmp	loc_6FFD4BA4
; ---------------------------------------------------------------------------

loc_6FFD4C44:				; CODE XREF: sub_6FFD4B60+12j
		lea	eax, [ebp-20h]
		mov	[esp+0], eax
		mov	dword ptr [ebp-68h], 0
		call	sub_6FFEA140
		jmp	loc_6FFD4BA4
sub_6FFD4B60	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  41. _ZN16DBusMenuShortcut15fromKeySequenceERK12QKeySequence

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public _ZN16DBusMenuShortcut15fromKeySequenceERK12QKeySequence
_ZN16DBusMenuShortcut15fromKeySequenceERK12QKeySequence	proc near
					; CODE XREF: sub_6FFC2AE0+500p

var_AC		= dword	ptr -0ACh
var_94		= dword	ptr -94h
var_90		= dword	ptr -90h
var_8C		= dword	ptr -8Ch
var_88		= dword	ptr -88h
var_84		= dword	ptr -84h
var_80		= dword	ptr -80h
var_7C		= dword	ptr -7Ch
var_78		= dword	ptr -78h
var_74		= dword	ptr -74h
var_70		= dword	ptr -70h
var_6C		= byte ptr -6Ch
var_68		= dword	ptr -68h
var_54		= dword	ptr -54h
var_50		= dword	ptr -50h
var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_A		= byte ptr -0Ah
var_8		= byte ptr -8
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 0D8h
		lea	eax, [ebp+var_8]
		mov	[ebp+var_4C], eax
		lea	eax, [ebp+var_6C]
		mov	[ebp+var_44], esp
		mov	[esp], eax
		mov	[ebp+var_54], offset sub_6FFEC1F0
		mov	[ebp+var_50], offset dword_6FFED3AC
		mov	[ebp+var_48], offset sub_6FFD5170
		call	_Unwind_SjLj_Register
		mov	edx, [ebp+arg_4]
		lea	eax, [ebp+var_10]
		mov	[esp], eax
		mov	[ebp+var_68], 0FFFFFFFFh
		mov	dword ptr [esp+8], 1
		mov	[esp+4], edx
		call	ds:_ZNK12QKeySequence8toStringENS_14SequenceFormatE
		mov	eax, ds:_ZN9QListData11shared_nullE
		mov	edx, [ebp+arg_0]
		mov	[edx], eax
		sub	esp, 4
		lock inc dword ptr [eax]
		setnz	dl
		mov	dword ptr [esp+4], 0FFFFFFFFh
		mov	dword ptr [esp], offset	asc_6FFF552D ; ", "
		mov	[ebp+var_68], 8
		call	ds:_ZN7QString16fromAscii_helperEPKci
		lea	edx, [ebp+var_18]
		mov	[ebp+var_18], eax
		lea	eax, [ebp+var_14]
		mov	[esp+8], edx
		lea	edx, [ebp+var_10]
		mov	dword ptr [esp+10h], 1
		mov	dword ptr [esp+0Ch], 0
		mov	[esp+4], edx
		mov	[esp], eax
		mov	[ebp+var_68], 7
		call	ds:_ZNK7QString5splitERKS_NS_13SplitBehaviorEN2Qt15CaseSensitivityE
		sub	esp, 4
		mov	eax, [ebp+var_18]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jz	loc_6FFD5158

loc_6FFD4D2B:				; CODE XREF: _ZN16DBusMenuShortcut15fromKeySequenceERK12QKeySequence+50Bj
		mov	eax, [ebp+var_14]
		mov	[ebp+var_38], eax
		lock inc dword ptr [eax]
		setnz	dl
		mov	eax, [ebp+var_38]
		test	byte ptr [eax+10h], 1
		jz	loc_6FFD513A

loc_6FFD4D44:				; CODE XREF: _ZN16DBusMenuShortcut15fromKeySequenceERK12QKeySequence+4F3j
		mov	eax, [ebp+var_38]
		mov	[ebp+var_34], 0
		mov	edx, [eax+8]
		mov	ecx, [eax+0Ch]
		lea	edx, [eax+edx*4+14h]
		lea	eax, [eax+ecx*4+14h]
		mov	ecx, [ebp+arg_0]
		cmp	edx, eax
		mov	[ebp+var_30], edx
		mov	[ebp+var_2C], eax
		mov	[ebp+var_7C], ecx
		jz	loc_6FFD4F01
		lea	eax, [ebp+var_1C]
		mov	[ebp+var_AC], eax
		mov	eax, [edx]
		cmp	edx, [ebp+var_AC]
		mov	[ebp+var_1C], eax
		jnz	short loc_6FFD4DC6

loc_6FFD4D86:				; CODE XREF: _ZN16DBusMenuShortcut15fromKeySequenceERK12QKeySequence+164j
		mov	dword ptr [esp+8], 2D6h
		mov	dword ptr [esp+4], offset aRIncludeQtco_6 ; "R:/include/QtCore/qstring.h"
		mov	dword ptr [esp], offset	aOtherThis_1 ; "&other != this"
		mov	[ebp+var_68], 5
		call	ds:_Z9qt_assertPKcS0_i
		mov	eax, [ebp+var_1C]
		jmp	short loc_6FFD4DC6
; ---------------------------------------------------------------------------
		align 10h

loc_6FFD4DB0:				; CODE XREF: _ZN16DBusMenuShortcut15fromKeySequenceERK12QKeySequence+29Bj
		cmp	edx, [ebp+var_2C]
		jz	loc_6FFD4F01
		mov	eax, [edx]
		cmp	edx, [ebp+var_AC]
		mov	[ebp+var_1C], eax
		jz	short loc_6FFD4D86

loc_6FFD4DC6:				; CODE XREF: _ZN16DBusMenuShortcut15fromKeySequenceERK12QKeySequence+124j
					; _ZN16DBusMenuShortcut15fromKeySequenceERK12QKeySequence+14Dj
		lock inc dword ptr [eax]
		setnz	dl
		mov	dword ptr [esp+4], 0FFFFFFFFh
		mov	dword ptr [esp], offset	aPlus ;	"+plus"
		mov	[ebp+var_68], 4
		call	ds:_ZN7QString16fromAscii_helperEPKci
		mov	[ebp+var_24], eax
		mov	dword ptr [esp+4], 0FFFFFFFFh
		mov	dword ptr [esp], offset	asc_6FFF5536 ; "++"
		mov	[ebp+var_68], 3
		call	ds:_ZN7QString16fromAscii_helperEPKci
		mov	[ebp+var_20], eax
		lea	eax, [ebp+var_24]
		mov	[esp+8], eax
		lea	eax, [ebp+var_20]
		mov	[esp+4], eax
		lea	eax, [ebp+var_1C]
		mov	dword ptr [esp+0Ch], 1
		mov	[esp], eax
		mov	[ebp+var_68], 2
		call	ds:_ZN7QString7replaceERKS_S1_N2Qt15CaseSensitivityE
		mov	eax, [ebp+var_20]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jz	loc_6FFD5000

loc_6FFD4E44:				; CODE XREF: _ZN16DBusMenuShortcut15fromKeySequenceERK12QKeySequence+3B3j
		mov	eax, [ebp+var_24]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jz	loc_6FFD4FE5

loc_6FFD4E55:				; CODE XREF: _ZN16DBusMenuShortcut15fromKeySequenceERK12QKeySequence+398j
		lea	eax, [ebp+var_A]
		mov	dword ptr [esp+4], 2Bh
		mov	[esp], eax
		mov	[ebp+var_68], 4
		call	ds:_ZN5QCharC1Ec
		lea	edx, [ebp+var_A]
		lea	eax, [ebp+var_28]
		mov	[esp+8], edx
		lea	edx, [ebp+var_1C]
		mov	dword ptr [esp+10h], 1
		mov	dword ptr [esp+0Ch], 0
		mov	[esp+4], edx
		mov	[esp], eax
		call	ds:_ZNK7QString5splitERK5QCharNS_13SplitBehaviorEN2Qt15CaseSensitivityE
		sub	esp, 4
		mov	ecx, 1
		lea	eax, [ebp+var_28]
		xor	edx, edx
		mov	[ebp+var_68], 1
		call	sub_6FFD4290
		mov	ecx, [ebp+var_7C]
		lea	eax, [ebp+var_28]
		mov	[esp+4], eax
		mov	[esp], ecx
		call	sub_6FFE58E0
		mov	eax, [ebp+var_28]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jz	loc_6FFD4F70

loc_6FFD4ED6:				; CODE XREF: _ZN16DBusMenuShortcut15fromKeySequenceERK12QKeySequence+380j
		sub	[ebp+var_34], 1
		mov	eax, [ebp+var_1C]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jz	short loc_6FFD4F55

loc_6FFD4EE7:				; CODE XREF: _ZN16DBusMenuShortcut15fromKeySequenceERK12QKeySequence+308j
		mov	eax, [ebp+var_34]
		mov	edx, [ebp+var_30]
		add	eax, 1
		add	edx, 4
		test	eax, eax
		mov	[ebp+var_34], eax
		mov	[ebp+var_30], edx
		jz	loc_6FFD4DB0

loc_6FFD4F01:				; CODE XREF: _ZN16DBusMenuShortcut15fromKeySequenceERK12QKeySequence+10Aj
					; _ZN16DBusMenuShortcut15fromKeySequenceERK12QKeySequence+153j
		mov	eax, [ebp+var_38]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jz	loc_6FFD50A0

loc_6FFD4F12:				; CODE XREF: _ZN16DBusMenuShortcut15fromKeySequenceERK12QKeySequence+4D5j
		mov	eax, [ebp+var_14]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jz	loc_6FFD5018

loc_6FFD4F23:				; CODE XREF: _ZN16DBusMenuShortcut15fromKeySequenceERK12QKeySequence+436j
		mov	eax, [ebp+var_10]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jnz	short loc_6FFD4F43
		mov	eax, [ebp+var_10]
		mov	[ebp+var_68], 0FFFFFFFFh
		mov	[esp], eax
		call	ds:_ZN7QString4freeEPNS_4DataE

loc_6FFD4F43:				; CODE XREF: _ZN16DBusMenuShortcut15fromKeySequenceERK12QKeySequence+2CEj
		lea	eax, [ebp+var_6C]
		mov	[esp], eax
		call	_Unwind_SjLj_Unregister
		mov	eax, [ebp+arg_0]
		leave
		retn	4
; ---------------------------------------------------------------------------

loc_6FFD4F55:				; CODE XREF: _ZN16DBusMenuShortcut15fromKeySequenceERK12QKeySequence+285j
		mov	eax, [ebp+var_1C]
		mov	[ebp+var_68], 5
		mov	[esp], eax
		call	ds:_ZN7QString4freeEPNS_4DataE
		jmp	loc_6FFD4EE7
; ---------------------------------------------------------------------------
		align 10h

loc_6FFD4F70:				; CODE XREF: _ZN16DBusMenuShortcut15fromKeySequenceERK12QKeySequence+270j
		mov	eax, [ebp+var_28]
		mov	[ebp+var_78], eax
		mov	ecx, [ebp+var_78]
		add	eax, 14h
		mov	edx, [ecx+0Ch]
		lea	edx, [eax+edx*4]
		mov	[ebp+var_70], edx
		mov	edx, [ecx+8]
		lea	edx, [eax+edx*4]
		cmp	[ebp+var_70], edx
		mov	[ebp+var_74], edx
		jnz	short loc_6FFD4F9D
		jmp	short loc_6FFD4FCD
; ---------------------------------------------------------------------------

loc_6FFD4F95:				; CODE XREF: _ZN16DBusMenuShortcut15fromKeySequenceERK12QKeySequence+34Ej
		mov	eax, [ebp+var_70]
		cmp	[ebp+var_74], eax
		jz	short loc_6FFD4FCD

loc_6FFD4F9D:				; CODE XREF: _ZN16DBusMenuShortcut15fromKeySequenceERK12QKeySequence+331j
					; _ZN16DBusMenuShortcut15fromKeySequenceERK12QKeySequence+36Bj
		sub	[ebp+var_70], 4
		mov	edx, [ebp+var_70]
		mov	eax, [edx]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jnz	short loc_6FFD4F95
		mov	ecx, [ebp+var_70]
		mov	eax, [ecx]
		mov	[ebp+var_68], 4
		mov	[esp], eax
		call	ds:_ZN7QString4freeEPNS_4DataE
		mov	eax, [ebp+var_70]
		cmp	[ebp+var_74], eax
		jnz	short loc_6FFD4F9D

loc_6FFD4FCD:				; CODE XREF: _ZN16DBusMenuShortcut15fromKeySequenceERK12QKeySequence+333j
					; _ZN16DBusMenuShortcut15fromKeySequenceERK12QKeySequence+33Bj
		mov	edx, [ebp+var_78]
		mov	[ebp+var_68], 4
		mov	[esp], edx
		call	ds:_Z5qFreePv
		jmp	loc_6FFD4ED6
; ---------------------------------------------------------------------------

loc_6FFD4FE5:				; CODE XREF: _ZN16DBusMenuShortcut15fromKeySequenceERK12QKeySequence+1EFj
		mov	eax, [ebp+var_24]
		mov	[ebp+var_68], 4
		mov	[esp], eax
		call	ds:_ZN7QString4freeEPNS_4DataE
		jmp	loc_6FFD4E55
; ---------------------------------------------------------------------------
		align 10h

loc_6FFD5000:				; CODE XREF: _ZN16DBusMenuShortcut15fromKeySequenceERK12QKeySequence+1DEj
		mov	eax, [ebp+var_20]
		mov	[ebp+var_68], 3
		mov	[esp], eax
		call	ds:_ZN7QString4freeEPNS_4DataE
		jmp	loc_6FFD4E44
; ---------------------------------------------------------------------------

loc_6FFD5018:				; CODE XREF: _ZN16DBusMenuShortcut15fromKeySequenceERK12QKeySequence+2BDj
		mov	ecx, [ebp+var_14]
		mov	edx, [ecx+0Ch]
		mov	eax, ecx
		add	eax, 14h
		mov	[ebp+var_90], ecx
		lea	edx, [eax+edx*4]
		mov	[ebp+var_80], edx
		mov	edx, [ecx+8]
		lea	edx, [eax+edx*4]
		cmp	[ebp+var_80], edx
		mov	[ebp+var_88], edx
		jnz	short loc_6FFD504D
		jmp	short loc_6FFD5080
; ---------------------------------------------------------------------------

loc_6FFD5042:				; CODE XREF: _ZN16DBusMenuShortcut15fromKeySequenceERK12QKeySequence+3FEj
		mov	eax, [ebp+var_80]
		cmp	[ebp+var_88], eax
		jz	short loc_6FFD5080

loc_6FFD504D:				; CODE XREF: _ZN16DBusMenuShortcut15fromKeySequenceERK12QKeySequence+3DEj
					; _ZN16DBusMenuShortcut15fromKeySequenceERK12QKeySequence+41Ej
		sub	[ebp+var_80], 4
		mov	edx, [ebp+var_80]
		mov	eax, [edx]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jnz	short loc_6FFD5042
		mov	ecx, [ebp+var_80]
		mov	eax, [ecx]
		mov	[ebp+var_68], 8
		mov	[esp], eax
		call	ds:_ZN7QString4freeEPNS_4DataE
		mov	eax, [ebp+var_80]
		cmp	[ebp+var_88], eax
		jnz	short loc_6FFD504D

loc_6FFD5080:				; CODE XREF: _ZN16DBusMenuShortcut15fromKeySequenceERK12QKeySequence+3E0j
					; _ZN16DBusMenuShortcut15fromKeySequenceERK12QKeySequence+3EBj
		mov	edx, [ebp+var_90]
		mov	[ebp+var_68], 8
		mov	[esp], edx
		call	ds:_Z5qFreePv
		jmp	loc_6FFD4F23
; ---------------------------------------------------------------------------
		align 10h

loc_6FFD50A0:				; CODE XREF: _ZN16DBusMenuShortcut15fromKeySequenceERK12QKeySequence+2ACj
		mov	edx, [ebp+var_38]
		mov	eax, edx
		mov	ecx, edx
		mov	[ebp+var_94], edx
		mov	edx, [edx+0Ch]
		add	eax, 14h
		lea	edx, [eax+edx*4]
		mov	[ebp+var_84], edx
		mov	edx, [ecx+8]
		lea	edx, [eax+edx*4]
		cmp	[ebp+var_84], edx
		mov	[ebp+var_8C], edx
		jnz	short loc_6FFD50E0
		jmp	short loc_6FFD511F
; ---------------------------------------------------------------------------

loc_6FFD50D2:				; CODE XREF: _ZN16DBusMenuShortcut15fromKeySequenceERK12QKeySequence+497j
		mov	eax, [ebp+var_84]
		cmp	[ebp+var_8C], eax
		jz	short loc_6FFD511F

loc_6FFD50E0:				; CODE XREF: _ZN16DBusMenuShortcut15fromKeySequenceERK12QKeySequence+46Ej
					; _ZN16DBusMenuShortcut15fromKeySequenceERK12QKeySequence+4BDj
		sub	[ebp+var_84], 4
		mov	edx, [ebp+var_84]
		mov	eax, [edx]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jnz	short loc_6FFD50D2
		mov	ecx, [ebp+var_84]
		mov	eax, [ecx]
		mov	[ebp+var_68], 6
		mov	[esp], eax
		call	ds:_ZN7QString4freeEPNS_4DataE
		mov	eax, [ebp+var_84]
		cmp	[ebp+var_8C], eax
		jnz	short loc_6FFD50E0

loc_6FFD511F:				; CODE XREF: _ZN16DBusMenuShortcut15fromKeySequenceERK12QKeySequence+470j
					; _ZN16DBusMenuShortcut15fromKeySequenceERK12QKeySequence+47Ej
		mov	edx, [ebp+var_94]
		mov	[ebp+var_68], 6
		mov	[esp], edx
		call	ds:_Z5qFreePv
		jmp	loc_6FFD4F12
; ---------------------------------------------------------------------------

loc_6FFD513A:				; CODE XREF: _ZN16DBusMenuShortcut15fromKeySequenceERK12QKeySequence+DEj
		mov	eax, [eax+4]
		mov	[ebp+var_68], 6
		mov	[esp+4], eax
		lea	eax, [ebp+var_38]
		mov	[esp], eax
		call	sub_6FFE8C20
		jmp	loc_6FFD4D44
; ---------------------------------------------------------------------------

loc_6FFD5158:				; CODE XREF: _ZN16DBusMenuShortcut15fromKeySequenceERK12QKeySequence+C5j
		mov	eax, [ebp+var_18]
		mov	[ebp+var_68], 6
		mov	[esp], eax
		call	ds:_ZN7QString4freeEPNS_4DataE
		jmp	loc_6FFD4D2B
_ZN16DBusMenuShortcut15fromKeySequenceERK12QKeySequence	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn

sub_6FFD5170	proc near		; DATA XREF: _ZN16DBusMenuShortcut15fromKeySequenceERK12QKeySequence+26o

arg_0		= dword	ptr  4

		add	ebp, 8
		mov	eax, [ebp-68h]
		mov	ecx, [ebp-64h]
		cmp	eax, 1
		mov	[ebp-9Ch], ecx
		jz	loc_6FFD5268
		cmp	eax, 2
		jz	loc_6FFD527A
		cmp	eax, 3
		jz	short loc_6FFD51C4
		cmp	eax, 4
		jz	short loc_6FFD51D6
		cmp	eax, 5
		xchg	ax, ax
		jz	short loc_6FFD51E8
		cmp	eax, 6
		jz	loc_6FFD5254
		cmp	eax, 7
		xchg	ax, ax
		jz	short loc_6FFD51FA
		lea	eax, [ebp-28h]
		mov	[esp+0], eax
		mov	dword ptr [ebp-68h], 0
		call	sub_6FFDF990

loc_6FFD51C4:				; CODE XREF: sub_6FFD5170+24j
					; sub_6FFD5170+11Cj
		lea	eax, [ebp-1Ch]
		mov	[esp+0], eax
		mov	dword ptr [ebp-68h], 0
		call	sub_6FFEA140

loc_6FFD51D6:				; CODE XREF: sub_6FFD5170+29j
		lea	eax, [ebp-38h]
		mov	[esp+0], eax
		mov	dword ptr [ebp-68h], 0
		call	sub_6FFDF990

loc_6FFD51E8:				; CODE XREF: sub_6FFD5170+30j
		lea	eax, [ebp-14h]
		mov	[esp+0], eax
		mov	dword ptr [ebp-68h], 0
		call	sub_6FFDF990

loc_6FFD51FA:				; CODE XREF: sub_6FFD5170+40j
					; sub_6FFD5170+F6j
		mov	ecx, [ebp-9Ch]
		mov	edx, [ebp+8]
		mov	[ebp-98h], ecx
		mov	eax, [edx]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jnz	short loc_6FFD522D
		mov	ecx, [ebp+8]
		mov	eax, [ecx]
		mov	[esp+0], ecx
		mov	dword ptr [ebp-68h], 0
		mov	[esp+arg_0], eax
		call	sub_6FFE5810

loc_6FFD522D:				; CODE XREF: sub_6FFD5170+A3j
		lea	eax, [ebp-10h]
		mov	[esp+0], eax
		mov	dword ptr [ebp-68h], 0
		call	sub_6FFEA140
		mov	eax, [ebp-98h]
		mov	dword ptr [ebp-68h], 0FFFFFFFFh
		mov	[esp+0], eax
		call	_Unwind_SjLj_Resume
; ---------------------------------------------------------------------------

loc_6FFD5254:				; CODE XREF: sub_6FFD5170+35j
		lea	eax, [ebp-18h]
		mov	[esp+0], eax
		mov	dword ptr [ebp-68h], 0
		call	sub_6FFEA140
		jmp	short loc_6FFD51FA
; ---------------------------------------------------------------------------

loc_6FFD5268:				; CODE XREF: sub_6FFD5170+12j
		lea	eax, [ebp-20h]
		mov	[esp+0], eax
		mov	dword ptr [ebp-68h], 0
		call	sub_6FFEA140

loc_6FFD527A:				; CODE XREF: sub_6FFD5170+1Bj
		lea	eax, [ebp-24h]
		mov	[esp+0], eax
		mov	dword ptr [ebp-68h], 0
		call	sub_6FFEA140
		jmp	loc_6FFD51C4
sub_6FFD5170	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_6FFD52A0	proc near		; CODE XREF: sub_6FFC2AE0+9Cp
					; sub_6FFC3520+210p ...

var_75		= byte ptr -75h
var_74		= dword	ptr -74h
var_70		= dword	ptr -70h
var_6C		= dword	ptr -6Ch
var_68		= dword	ptr -68h
var_64		= dword	ptr -64h
var_60		= dword	ptr -60h
var_5C		= dword	ptr -5Ch
var_58		= dword	ptr -58h
var_52		= word ptr -52h
var_50		= dword	ptr -50h
var_4C		= byte ptr -4Ch
var_48		= dword	ptr -48h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_E		= word ptr -0Eh
var_C		= word ptr -0Ch
var_A		= word ptr -0Ah
var_8		= byte ptr -8
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= byte ptr  10h
arg_C		= byte ptr  14h

		push	ebp
		mov	ebp, esp
		push	ebx
		sub	esp, 94h
		movsx	eax, [ebp+arg_8]
		movsx	edx, [ebp+arg_C]
		lea	ecx, [ebp+var_8]
		mov	[ebp+var_34], offset sub_6FFEC1F0
		mov	[ebp+var_30], offset dword_6FFED3C0
		mov	[ebp+var_60], eax
		lea	eax, [ebp+var_4C]
		mov	[esp], eax
		mov	[ebp+var_6C], edx
		mov	[ebp+var_2C], ecx
		mov	[ebp+var_28], offset sub_6FFD559E
		mov	[ebp+var_24], esp
		call	_Unwind_SjLj_Register
		mov	ebx, [ebp+arg_0]
		mov	eax, ds:_ZN7QString11shared_nullE
		mov	[ebp+var_68], ebx
		mov	[ebx], eax
		lock inc dword ptr [eax]
		setnz	dl
		mov	edx, [ebp+arg_4]
		mov	ecx, [ebp+var_60]
		mov	ebx, [ebp+var_6C]
		mov	[ebp+var_50], 0
		mov	eax, [edx]
		mov	[ebp+var_75], 0
		mov	[ebp+var_64], ecx
		mov	[ebp+var_70], ebx
		mov	edx, [eax+8]
		jmp	short loc_6FFD5383
; ---------------------------------------------------------------------------

loc_6FFD5315:				; CODE XREF: sub_6FFD52A0+14Dj
		mov	ebx, [ebp+arg_4]
		mov	eax, [ebx]
		mov	edx, [eax+8]
		lea	ecx, [edx-1]
		cmp	[ebp+var_50], ecx
		mov	[ebp+var_58], edx
		jz	short loc_6FFD537D
		mov	eax, [ebp+var_64]
		mov	[ebp+var_48], 1
		mov	[esp+4], eax
		lea	eax, [ebp+var_C]
		mov	[esp], eax
		call	ds:_ZN5QCharC1Ec
		mov	ecx, [ebp+arg_4]
		mov	edx, [ebp+var_50]
		mov	eax, [ecx]
		add	edx, 1
		mov	[ebp+var_58], edx
		mov	[ebp+var_74], edx
		cmp	edx, [eax+8]
		jnb	loc_6FFD5490
		mov	edx, [eax+0Ch]
		mov	ecx, [ebp+var_74]
		movzx	edx, word ptr [edx+ecx*2]
		cmp	dx, [ebp+var_C]
		jz	loc_6FFD54C6

loc_6FFD5370:				; CODE XREF: sub_6FFD52A0+220j
		cmp	[ebp+var_75], 0
		jz	loc_6FFD5550

loc_6FFD537A:				; CODE XREF: sub_6FFD52A0+1D7j
		mov	edx, [eax+8]

loc_6FFD537D:				; CODE XREF: sub_6FFD52A0+86j
					; sub_6FFD52A0+25Bj ...
		mov	ecx, [ebp+var_58]
		mov	[ebp+var_50], ecx

loc_6FFD5383:				; CODE XREF: sub_6FFD52A0+73j
		cmp	[ebp+var_50], edx
		jge	loc_6FFD5585
		mov	edx, [ebp+var_50]
		mov	[ebp+var_5C], edx
		jb	short loc_6FFD53BD
		mov	dword ptr [esp+8], 2BDh
		mov	dword ptr [esp+4], offset aRIncludeQtco_7 ; "R:/include/QtCore/qstring.h"
		mov	dword ptr [esp], offset	aUintIUintSize ; "uint(i) < uint(size())"
		mov	[ebp+var_48], 1
		call	ds:_Z9qt_assertPKcS0_i
		mov	ecx, [ebp+arg_4]
		mov	eax, [ecx]

loc_6FFD53BD:				; CODE XREF: sub_6FFD52A0+F2j
		mov	eax, [eax+0Ch]
		lea	edx, [ebp+var_A]
		mov	ebx, [ebp+var_5C]
		movzx	eax, word ptr [eax+ebx*2]
		mov	[esp], edx
		mov	[ebp+var_48], 1
		mov	[ebp+var_52], ax
		mov	eax, [ebp+var_64]
		mov	[esp+4], eax
		call	ds:_ZN5QCharC1Ec
		movzx	ecx, [ebp+var_52]
		cmp	[ebp+var_A], cx
		jz	loc_6FFD5315
		mov	ecx, [ebp+var_70]
		lea	eax, [ebp+var_E]
		mov	[esp], eax
		mov	[ebp+var_48], 1
		mov	[esp+4], ecx
		call	ds:_ZN5QCharC1Ec
		movzx	ebx, [ebp+var_52]
		cmp	[ebp+var_E], bx
		jz	loc_6FFD5500
		mov	ecx, [ebp+var_68]
		mov	eax, [ecx]
		mov	edx, [eax]
		cmp	edx, 1
		jz	short loc_6FFD5480
		mov	edx, [eax+8]

loc_6FFD542A:				; CODE XREF: sub_6FFD52A0+1E8j
		add	edx, 1
		mov	[esp], edx
		mov	[ebp+var_48], 1
		call	ds:_ZN7QString4growEi
		mov	ebx, [ebp+var_68]
		mov	[esp+4], eax
		mov	[esp], ebx
		call	ds:_ZN7QString7reallocEi
		mov	eax, [ebx]
		mov	edx, [eax+8]

loc_6FFD5452:				; CODE XREF: sub_6FFD52A0+1E6j
		mov	ecx, [eax+0Ch]
		movzx	ebx, [ebp+var_52]
		mov	[ecx+edx*2], bx
		add	edx, 1
		mov	[eax+8], edx
		mov	eax, [ebp+var_50]
		mov	word ptr [ecx+edx*2], 0
		mov	edx, [ebp+arg_4]
		add	eax, 1
		mov	[ebp+var_58], eax
		mov	eax, [edx]
		jmp	loc_6FFD537A
; ---------------------------------------------------------------------------
		align 10h

loc_6FFD5480:				; CODE XREF: sub_6FFD52A0+185j
		mov	edx, [eax+8]
		cmp	edx, [eax+4]
		jl	short loc_6FFD5452
		jmp	short loc_6FFD542A
; ---------------------------------------------------------------------------
		align 10h

loc_6FFD5490:				; CODE XREF: sub_6FFD52A0+B6j
		mov	dword ptr [esp+8], 2BDh
		mov	dword ptr [esp+4], offset aRIncludeQtco_7 ; "R:/include/QtCore/qstring.h"
		mov	dword ptr [esp], offset	aUintIUintSize ; "uint(i) < uint(size())"
		call	ds:_Z9qt_assertPKcS0_i
		mov	ebx, [ebp+arg_4]
		mov	ecx, [ebp+var_74]
		mov	eax, [ebx]
		mov	edx, [eax+0Ch]
		movzx	edx, word ptr [edx+ecx*2]
		cmp	dx, [ebp+var_C]
		jnz	loc_6FFD5370

loc_6FFD54C6:				; CODE XREF: sub_6FFD52A0+CAj
		mov	ebx, [ebp+var_64]
		mov	[ebp+var_48], 1
		mov	[esp], ebx
		call	ds:_ZN5QChar9fromAsciiEc
		mov	[esp+4], ax
		mov	eax, [ebp+var_68]
		mov	[esp], eax
		call	ds:_ZN7QString6appendE5QChar
		mov	ecx, [ebp+arg_4]
		mov	edx, [ebp+var_50]
		mov	eax, [ecx]
		add	edx, 2
		mov	[ebp+var_58], edx
		mov	edx, [eax+8]
		jmp	loc_6FFD537D
; ---------------------------------------------------------------------------

loc_6FFD5500:				; CODE XREF: sub_6FFD52A0+175j
		mov	eax, [ebp+var_70]
		mov	[esp], eax
		call	ds:_ZN5QChar9fromAsciiEc
		mov	edx, [ebp+var_68]
		mov	[esp+4], ax
		mov	[esp], edx
		call	ds:_ZN7QString6appendE5QChar
		mov	ecx, [ebp+var_70]
		mov	[esp], ecx
		call	ds:_ZN5QChar9fromAsciiEc
		mov	ebx, [ebp+var_68]
		mov	[esp+4], ax
		mov	[esp], ebx
		call	ds:_ZN7QString6appendE5QChar
		mov	eax, [ebp+var_50]
		mov	edx, [ebp+arg_4]
		add	eax, 1
		mov	[ebp+var_58], eax
		mov	eax, [edx]
		mov	edx, [eax+8]
		jmp	loc_6FFD537D
; ---------------------------------------------------------------------------

loc_6FFD5550:				; CODE XREF: sub_6FFD52A0+D4j
		mov	ebx, [ebp+var_70]
		mov	[ebp+var_48], 1
		mov	[esp], ebx
		call	ds:_ZN5QChar9fromAsciiEc
		mov	[esp+4], ax
		mov	eax, [ebp+var_68]
		mov	[esp], eax
		call	ds:_ZN7QString6appendE5QChar
		mov	edx, [ebp+arg_4]
		mov	[ebp+var_75], 1
		mov	eax, [edx]
		mov	edx, [eax+8]
		jmp	loc_6FFD537D
; ---------------------------------------------------------------------------

loc_6FFD5585:				; CODE XREF: sub_6FFD52A0+E6j
		lea	eax, [ebp+var_4C]
		mov	[esp], eax
		call	_Unwind_SjLj_Unregister
		mov	eax, [ebp+arg_0]
		add	esp, 94h
		pop	ebx
		pop	ebp
		retn	4
sub_6FFD52A0	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn

sub_6FFD559E	proc near		; DATA XREF: sub_6FFD52A0+32o
		add	ebp, 8
		mov	ebx, [ebp-44h]
		mov	edx, [ebp+8]
		mov	[ebp-7Ch], ebx
		mov	eax, [edx]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jnz	short loc_6FFD55CB
		mov	ecx, [ebp+8]
		mov	eax, [ecx]
		mov	dword ptr [ebp-48h], 0
		mov	[esp+0], eax
		call	ds:_ZN7QString4freeEPNS_4DataE

loc_6FFD55CB:				; CODE XREF: sub_6FFD559E+16j
		mov	ebx, [ebp-7Ch]
		mov	dword ptr [ebp-48h], 0FFFFFFFFh
		mov	[esp+0], ebx
		call	_Unwind_SjLj_Resume
sub_6FFD559E	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6FFD55E0	proc near		; DATA XREF: .text:6FFEC814o
		mov	eax, ds:_ZN20QDBusAbstractAdaptor16staticMetaObjectE
		mov	dword_6FFEE040,	eax
		retn
sub_6FFD55E0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6FFD55F0	proc near		; CODE XREF: sub_6FFD5FC0+1C4p

var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
arg_0		= dword	ptr  4
arg_4		= byte ptr  8
arg_8		= byte ptr  0Ch

		sub	esp, 2Ch
		lea	eax, [esp+2Ch+arg_4]
		mov	[esp+2Ch+var_14], eax
		lea	eax, [esp+2Ch+arg_8]
		mov	[esp+2Ch+var_10], eax
		lea	eax, [esp+2Ch+var_18]
		mov	[esp+2Ch+var_20], eax
		mov	eax, [esp+2Ch+arg_0]
		mov	[esp+2Ch+var_18], 0
		mov	[esp+2Ch+var_24], 2
		mov	[esp+2Ch+var_28], offset dword_6FFEE040
		mov	[esp+2Ch+var_2C], eax
		call	ds:_ZN11QMetaObject8activateEP7QObjectPKS_iPPv
		add	esp, 2Ch
		retn
sub_6FFD55F0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6FFD5640	proc near		; CODE XREF: sub_6FFD5FC0+23Cp

var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		sub	esp, 2Ch
		mov	eax, [esp+2Ch+arg_4]
		mov	[esp+2Ch+var_18], 0
		mov	[esp+2Ch+var_24], 1
		mov	[esp+2Ch+var_28], offset dword_6FFEE040
		mov	[esp+2Ch+var_14], eax
		mov	eax, [esp+2Ch+arg_8]
		mov	[esp+2Ch+var_10], eax
		lea	eax, [esp+2Ch+var_18]
		mov	[esp+2Ch+var_20], eax
		mov	eax, [esp+2Ch+arg_0]
		mov	[esp+2Ch+var_2C], eax
		call	ds:_ZN11QMetaObject8activateEP7QObjectPKS_iPPv
		add	esp, 2Ch
		retn
sub_6FFD5640	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6FFD5690	proc near		; CODE XREF: sub_6FFD5FC0+2A3p

var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
arg_0		= dword	ptr  4
arg_4		= byte ptr  8
arg_8		= byte ptr  0Ch

		sub	esp, 2Ch
		lea	eax, [esp+2Ch+arg_4]
		mov	[esp+2Ch+var_14], eax
		lea	eax, [esp+2Ch+arg_8]
		mov	[esp+2Ch+var_10], eax
		lea	eax, [esp+2Ch+var_18]
		mov	[esp+2Ch+var_20], eax
		mov	eax, [esp+2Ch+arg_0]
		mov	[esp+2Ch+var_18], 0
		mov	[esp+2Ch+var_24], 0
		mov	[esp+2Ch+var_28], offset dword_6FFEE040
		mov	[esp+2Ch+var_2C], eax
		call	ds:_ZN11QMetaObject8activateEP7QObjectPKS_iPPv
		add	esp, 2Ch
		retn
sub_6FFD5690	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6FFD56E0	proc near		; DATA XREF: .rdata:6FFF9D2Co

var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		sub	esp, 1Ch
		xor	eax, eax
		mov	edx, [esp+1Ch+arg_4]
		mov	[esp+1Ch+var_4], ebp
		mov	ebp, [esp+1Ch+arg_0]
		mov	[esp+1Ch+var_10], ebx
		mov	[esp+1Ch+var_C], esi
		test	edx, edx
		mov	[esp+1Ch+var_8], edi
		jz	short loc_6FFD571F
		mov	ecx, 10h
		mov	esi, edx
		mov	edi, offset aDbusmenuadapto ; "DbusmenuAdaptor"
		repe cmpsb
		setnbe	al
		setb	cl
		mov	esi, eax
		mov	eax, ebp
		mov	ebx, esi
		cmp	bl, cl
		jnz	short loc_6FFD5733

loc_6FFD571F:				; CODE XREF: sub_6FFD56E0+1Fj
		mov	ebx, [esp+1Ch+var_10]
		mov	esi, [esp+1Ch+var_C]
		mov	edi, [esp+1Ch+var_8]
		mov	ebp, [esp+1Ch+var_4]
		add	esp, 1Ch
		retn
; ---------------------------------------------------------------------------

loc_6FFD5733:				; CODE XREF: sub_6FFD56E0+3Dj
		mov	eax, ds:_ZN20QDBusAbstractAdaptor11qt_metacastEPKc
		mov	ebx, [esp+1Ch+var_10]
		mov	esi, [esp+1Ch+var_C]
		mov	edi, [esp+1Ch+var_8]
		mov	ebp, [esp+1Ch+var_4]
		add	esp, 1Ch
		jmp	eax
sub_6FFD56E0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6FFD5750	proc near		; DATA XREF: .rdata:off_6FFF9D28o

var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
arg_0		= dword	ptr  4

		push	ebx
		sub	esp, 18h
		mov	ebx, [esp+1Ch+arg_0]
		mov	eax, [ebx+4]
		test	eax, eax
		jz	short loc_6FFD5780

loc_6FFD575F:				; CODE XREF: sub_6FFD5750+50j
		mov	eax, [eax+18h]
		test	eax, eax
		jz	short loc_6FFD5770
		add	esp, 18h
		pop	ebx
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6FFD5770:				; CODE XREF: sub_6FFD5750+14j
		mov	eax, offset dword_6FFEE040
		add	esp, 18h
		pop	ebx
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6FFD5780:				; CODE XREF: sub_6FFD5750+Dj
		mov	[esp+1Ch+var_14], 70h
		mov	[esp+1Ch+var_18], offset aRIncludeQtco_8 ; "R:/include/QtCore/qscopedpointer.h"
		mov	[esp+1Ch+var_1C], offset aD_1 ;	"d"
		call	ds:_Z9qt_assertPKcS0_i
		mov	eax, [ebx+4]
		jmp	short loc_6FFD575F
sub_6FFD5750	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6FFD57B0	proc near		; DATA XREF: .rdata:6FFF9D38o

var_1C		= dword	ptr -1Ch
arg_0		= dword	ptr  4

		push	ebx
		sub	esp, 18h
		mov	ebx, [esp+1Ch+arg_0]
		mov	dword ptr [ebx], offset	off_6FFF9D28
		mov	[esp+1Ch+var_1C], ebx
		call	ds:_ZN20QDBusAbstractAdaptorD2Ev
		mov	[esp+1Ch+arg_0], ebx
		add	esp, 18h
		pop	ebx
		jmp	sub_6FFEAE50
sub_6FFD57B0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6FFD57E0	proc near		; DATA XREF: .rdata:6FFF9D34o

arg_0		= dword	ptr  4

		sub	esp, 0Ch
		mov	eax, [esp+0Ch+arg_0]
		mov	dword ptr [eax], offset	off_6FFF9D28
		mov	eax, ds:_ZN20QDBusAbstractAdaptorD2Ev
		add	esp, 0Ch
		jmp	eax
sub_6FFD57E0	endp

; ---------------------------------------------------------------------------
		align 10h
		sub	esp, 0Ch
		mov	eax, [esp+10h]
		mov	dword ptr [eax], offset	off_6FFF9D28
		mov	eax, ds:_ZN20QDBusAbstractAdaptorD2Ev
		add	esp, 0Ch
		jmp	eax
; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_6FFD5820	proc near		; CODE XREF: sub_6FFC8280+A9p
					; .text:6FFC8449p

var_3C		= byte ptr -3Ch
var_38		= dword	ptr -38h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_8		= byte ptr -8
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 58h
		lea	eax, [ebp+var_8]
		mov	[ebp+var_1C], eax
		lea	eax, [ebp+var_3C]
		mov	[esp], eax
		mov	[ebp+var_24], offset sub_6FFEC1F0
		mov	[ebp+var_20], offset dword_6FFED3C8
		mov	[ebp+var_18], offset sub_6FFD5897
		mov	[ebp+var_14], esp
		call	_Unwind_SjLj_Register
		mov	eax, [ebp+arg_4]
		mov	[ebp+var_38], 0FFFFFFFFh
		mov	[esp+4], eax
		mov	eax, [ebp+arg_0]
		mov	[esp], eax
		call	ds:_ZN20QDBusAbstractAdaptorC2EP7QObject
		mov	eax, [ebp+arg_0]
		mov	dword ptr [eax], offset	off_6FFF9D28
		mov	dword ptr [esp+4], 1
		mov	[esp], eax
		mov	[ebp+var_38], 1
		call	ds:_ZN20QDBusAbstractAdaptor19setAutoRelaySignalsEb
		lea	eax, [ebp+var_3C]
		mov	[esp], eax
		call	_Unwind_SjLj_Unregister
		leave
		retn
sub_6FFD5820	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn

sub_6FFD5897	proc near		; DATA XREF: sub_6FFD5820+20o
		add	ebp, 8
		mov	eax, [ebp-34h]
		mov	dword ptr [ebp-38h], 0
		mov	[ebp-40h], eax
		mov	eax, [ebp+8]
		mov	[esp+0], eax
		call	ds:_ZN20QDBusAbstractAdaptorD2Ev
		mov	eax, [ebp-40h]
		mov	dword ptr [ebp-38h], 0FFFFFFFFh
		mov	[esp+0], eax
		call	_Unwind_SjLj_Resume
sub_6FFD5897	endp

; ---------------------------------------------------------------------------
		align 10h
		push	ebp
		mov	ebp, esp
		sub	esp, 58h
		lea	eax, [ebp-8]
		mov	[ebp-1Ch], eax
		lea	eax, [ebp-3Ch]
		mov	[esp], eax
		mov	dword ptr [ebp-24h], offset sub_6FFEC1F0
		mov	dword ptr [ebp-20h], offset word_6FFED3CE
		mov	dword ptr [ebp-18h], offset loc_6FFD5947
		mov	[ebp-14h], esp
		call	_Unwind_SjLj_Register
		mov	eax, [ebp+0Ch]
		mov	dword ptr [ebp-38h], 0FFFFFFFFh
		mov	[esp+4], eax
		mov	eax, [ebp+8]
		mov	[esp], eax
		call	ds:_ZN20QDBusAbstractAdaptorC2EP7QObject
		mov	eax, [ebp+8]
		mov	dword ptr [eax], offset	off_6FFF9D28
		mov	dword ptr [esp+4], 1
		mov	[esp], eax
		mov	dword ptr [ebp-38h], 1
		call	ds:_ZN20QDBusAbstractAdaptor19setAutoRelaySignalsEb
		lea	eax, [ebp-3Ch]
		mov	[esp], eax
		call	_Unwind_SjLj_Unregister
		leave
		retn
; ---------------------------------------------------------------------------

loc_6FFD5947:				; DATA XREF: .text:6FFD58F0o
		add	ebp, 8
		mov	eax, [ebp-34h]
		mov	dword ptr [ebp-38h], 0
		mov	[ebp-40h], eax
		mov	eax, [ebp+8]
		mov	[esp], eax
		call	ds:_ZN20QDBusAbstractAdaptorD2Ev
		mov	eax, [ebp-40h]
		mov	dword ptr [ebp-38h], 0FFFFFFFFh
		mov	[esp], eax
		call	_Unwind_SjLj_Resume
; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6FFD5980	proc near		; CODE XREF: sub_6FFD5FC0+317p

var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		sub	esp, 1Ch
		mov	[esp+1Ch+var_4], esi
		mov	esi, [esp+1Ch+arg_4]
		mov	[esp+1Ch+var_8], ebx
		mov	ebx, [esp+1Ch+arg_0]
		mov	edx, [esi+4]
		test	edx, edx
		jz	short loc_6FFD59D0

loc_6FFD599A:				; CODE XREF: sub_6FFD5980+70j
		mov	eax, [esp+1Ch+arg_C]
		mov	[esp+1Ch+var_10], eax
		mov	eax, [esp+1Ch+arg_8]
		mov	[esp+1Ch+var_14], eax
		mov	eax, [edx+8]
		mov	[esp+1Ch+var_1C], ebx
		mov	[esp+1Ch+var_18], eax
		call	sub_6FFCA610
		mov	eax, ebx
		sub	esp, 4
		mov	ebx, [esp+1Ch+var_8]
		mov	esi, [esp+1Ch+var_4]
		add	esp, 1Ch
		retn	4
; ---------------------------------------------------------------------------
		align 10h

loc_6FFD59D0:				; CODE XREF: sub_6FFD5980+18j
		mov	[esp+1Ch+var_14], 70h
		mov	[esp+1Ch+var_18], offset aRIncludeQtco_8 ; "R:/include/QtCore/qscopedpointer.h"
		mov	[esp+1Ch+var_1C], offset aD_1 ;	"d"
		call	ds:_Z9qt_assertPKcS0_i
		mov	edx, [esi+4]
		jmp	short loc_6FFD599A
sub_6FFD5980	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6FFD5A00	proc near		; CODE XREF: sub_6FFD5FC0+B0p

var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_20		= dword	ptr -20h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h

		sub	esp, 3Ch
		mov	[esp+3Ch+var_10], ebx
		mov	ebx, [esp+3Ch+arg_0]
		mov	[esp+3Ch+var_C], esi
		mov	edx, [esp+3Ch+arg_10]
		mov	[esp+3Ch+var_8], edi
		mov	esi, [esp+3Ch+arg_4]
		mov	[esp+3Ch+var_4], ebp
		mov	edi, [esp+3Ch+arg_8]
		mov	eax, [ebx+4]
		mov	ebp, [esp+3Ch+arg_C]
		test	eax, eax
		jz	short loc_6FFD5A60

loc_6FFD5A2E:				; CODE XREF: sub_6FFD5A00+88j
		mov	[esp+3Ch+arg_C], ebp
		mov	ebx, [esp+3Ch+var_10]
		mov	[esp+3Ch+arg_8], edi
		mov	ebp, [esp+3Ch+var_4]
		mov	[esp+3Ch+arg_4], esi
		mov	edi, [esp+3Ch+var_8]
		mov	[esp+3Ch+arg_10], edx
		mov	eax, [eax+8]
		mov	esi, [esp+3Ch+var_C]
		mov	[esp+3Ch+arg_0], eax
		add	esp, 3Ch
		jmp	sub_6FFCB050
; ---------------------------------------------------------------------------
		align 10h

loc_6FFD5A60:				; CODE XREF: sub_6FFD5A00+2Cj
		mov	[esp+3Ch+var_20], edx
		mov	[esp+3Ch+var_34], 70h
		mov	[esp+3Ch+var_38], offset aRIncludeQtco_8 ; "R:/include/QtCore/qscopedpointer.h"
		mov	[esp+3Ch+var_3C], offset aD_1 ;	"d"
		call	ds:_Z9qt_assertPKcS0_i
		mov	eax, [ebx+4]
		mov	edx, [esp+3Ch+var_20]
		jmp	short loc_6FFD5A2E
sub_6FFD5A00	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6FFD5A90	proc near		; CODE XREF: sub_6FFD5FC0+F5p

var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		sub	esp, 1Ch
		mov	[esp+1Ch+var_4], esi
		mov	esi, [esp+1Ch+arg_4]
		mov	[esp+1Ch+var_8], ebx
		mov	ebx, [esp+1Ch+arg_0]
		mov	edx, [esi+4]
		test	edx, edx
		jz	short loc_6FFD5AE0

loc_6FFD5AAA:				; CODE XREF: sub_6FFD5A90+70j
		mov	eax, [esp+1Ch+arg_C]
		mov	[esp+1Ch+var_10], eax
		mov	eax, [esp+1Ch+arg_8]
		mov	[esp+1Ch+var_14], eax
		mov	eax, [edx+8]
		mov	[esp+1Ch+var_1C], ebx
		mov	[esp+1Ch+var_18], eax
		call	sub_6FFC99B0
		mov	eax, ebx
		sub	esp, 4
		mov	ebx, [esp+1Ch+var_8]
		mov	esi, [esp+1Ch+var_4]
		add	esp, 1Ch
		retn	4
; ---------------------------------------------------------------------------
		align 10h

loc_6FFD5AE0:				; CODE XREF: sub_6FFD5A90+18j
		mov	[esp+1Ch+var_14], 70h
		mov	[esp+1Ch+var_18], offset aRIncludeQtco_8 ; "R:/include/QtCore/qscopedpointer.h"
		mov	[esp+1Ch+var_1C], offset aD_1 ;	"d"
		call	ds:_Z9qt_assertPKcS0_i
		mov	edx, [esi+4]
		jmp	short loc_6FFD5AAA
sub_6FFD5A90	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6FFD5B10	proc near		; CODE XREF: sub_6FFD5FC0+2E0p

var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_20		= dword	ptr -20h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h

		sub	esp, 3Ch
		mov	[esp+3Ch+var_10], ebx
		mov	ebx, [esp+3Ch+arg_0]
		mov	[esp+3Ch+var_C], esi
		mov	edx, [esp+3Ch+arg_10]
		mov	[esp+3Ch+var_8], edi
		mov	esi, [esp+3Ch+arg_4]
		mov	[esp+3Ch+var_4], ebp
		mov	edi, [esp+3Ch+arg_8]
		mov	eax, [ebx+4]
		mov	ebp, [esp+3Ch+arg_C]
		test	eax, eax
		jz	short loc_6FFD5B70

loc_6FFD5B3E:				; CODE XREF: sub_6FFD5B10+88j
		mov	[esp+3Ch+arg_C], ebp
		mov	ebx, [esp+3Ch+var_10]
		mov	[esp+3Ch+arg_8], edi
		mov	ebp, [esp+3Ch+var_4]
		mov	[esp+3Ch+arg_4], esi
		mov	edi, [esp+3Ch+var_8]
		mov	[esp+3Ch+arg_10], edx
		mov	eax, [eax+8]
		mov	esi, [esp+3Ch+var_C]
		mov	[esp+3Ch+arg_0], eax
		add	esp, 3Ch
		jmp	sub_6FFC84C0
; ---------------------------------------------------------------------------
		align 10h

loc_6FFD5B70:				; CODE XREF: sub_6FFD5B10+2Cj
		mov	[esp+3Ch+var_20], edx
		mov	[esp+3Ch+var_34], 70h
		mov	[esp+3Ch+var_38], offset aRIncludeQtco_8 ; "R:/include/QtCore/qscopedpointer.h"
		mov	[esp+3Ch+var_3C], offset aD_1 ;	"d"
		call	ds:_Z9qt_assertPKcS0_i
		mov	eax, [ebx+4]
		mov	edx, [esp+3Ch+var_20]
		jmp	short loc_6FFD5B3E
sub_6FFD5B10	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6FFD5BA0	proc near		; CODE XREF: sub_6FFD5FC0+189p

var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		sub	esp, 1Ch
		mov	[esp+1Ch+var_8], ebx
		mov	ebx, [esp+1Ch+arg_0]
		mov	[esp+1Ch+var_4], esi
		mov	esi, [esp+1Ch+arg_4]
		mov	eax, [ebx+4]
		test	eax, eax
		jz	short loc_6FFD5BD5

loc_6FFD5BBA:				; CODE XREF: sub_6FFD5BA0+55j
		mov	[esp+1Ch+arg_4], esi
		mov	eax, [eax+8]
		mov	ebx, [esp+1Ch+var_8]
		mov	esi, [esp+1Ch+var_4]
		mov	[esp+1Ch+arg_0], eax
		add	esp, 1Ch
		jmp	sub_6FFC9E50
; ---------------------------------------------------------------------------

loc_6FFD5BD5:				; CODE XREF: sub_6FFD5BA0+18j
		mov	[esp+1Ch+var_14], 70h
		mov	[esp+1Ch+var_18], offset aRIncludeQtco_8 ; "R:/include/QtCore/qscopedpointer.h"
		mov	[esp+1Ch+var_1C], offset aD_1 ;	"d"
		call	ds:_Z9qt_assertPKcS0_i
		mov	eax, [ebx+4]
		jmp	short loc_6FFD5BBA
sub_6FFD5BA0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_6FFD5C00	proc near		; CODE XREF: sub_6FFD64B0+E3p

var_60		= dword	ptr -60h
var_5C		= byte ptr -5Ch
var_58		= dword	ptr -58h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_20		= byte ptr -20h
var_C		= dword	ptr -0Ch
var_8		= byte ptr -8
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 78h
		lea	eax, [ebp+var_8]
		mov	[ebp+var_3C], eax
		lea	eax, [ebp+var_5C]
		mov	[esp], eax
		mov	[ebp+var_44], offset sub_6FFEC1F0
		mov	[ebp+var_40], offset dword_6FFED3D4
		mov	[ebp+var_38], offset sub_6FFD5D22
		mov	[ebp+var_34], esp
		call	_Unwind_SjLj_Register
		mov	edx, [ebp+arg_0]
		mov	eax, [edx+4]
		test	eax, eax
		jz	loc_6FFD5CF3

loc_6FFD5C3D:				; CODE XREF: sub_6FFD5C00+11Dj
		mov	dword ptr [esp+8], offset aVersion ; "Version"
		mov	eax, [eax+8]
		mov	[ebp+var_58], 0FFFFFFFFh
		mov	[esp+4], eax
		lea	eax, [ebp+var_20]
		mov	[esp], eax
		call	ds:_ZNK7QObject8propertyEPKc
		lea	edx, [ebp+var_20]
		mov	[ebp+var_58], 1
		sub	esp, 4
		mov	[esp], edx
		call	ds:_ZNK8QVariant8userTypeEv
		cmp	eax, 3
		jz	short loc_6FFD5CE0
		mov	eax, ds:_ZN8QVariant7handlerE
		lea	edx, [ebp+var_C]
		mov	eax, [eax]
		mov	[esp+8], edx
		lea	edx, [ebp+var_20]
		mov	dword ptr [esp+0Ch], 0
		mov	dword ptr [esp+4], 3
		mov	[esp], edx
		mov	eax, [eax+18h]
		mov	[ebp+var_58], 1
		call	eax
		mov	edx, [ebp+var_C]
		cmp	al, 1
		sbb	eax, eax
		not	eax
		and	eax, edx
		mov	[ebp+var_60], eax

loc_6FFD5CB8:				; CODE XREF: sub_6FFD5C00+F1j
		lea	eax, [ebp+var_20]
		mov	[esp], eax
		mov	[ebp+var_58], 0FFFFFFFFh
		call	ds:_ZN8QVariantD1Ev
		lea	eax, [ebp+var_5C]
		mov	[esp], eax
		call	_Unwind_SjLj_Unregister
		mov	eax, [ebp+var_60]
		leave
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6FFD5CE0:				; CODE XREF: sub_6FFD5C00+78j
		lea	eax, [ebp+var_20]
		mov	[esp], eax
		call	ds:_ZNK8QVariant9constDataEv
		mov	eax, [eax]
		mov	[ebp+var_60], eax
		jmp	short loc_6FFD5CB8
; ---------------------------------------------------------------------------

loc_6FFD5CF3:				; CODE XREF: sub_6FFD5C00+37j
		mov	dword ptr [esp+8], 70h
		mov	dword ptr [esp+4], offset aRIncludeQtco_8 ; "R:/include/QtCore/qscopedpointer.h"
		mov	dword ptr [esp], offset	aD_1 ; "d"
		mov	[ebp+var_58], 0FFFFFFFFh
		call	ds:_Z9qt_assertPKcS0_i
		mov	edx, [ebp+arg_0]
		mov	eax, [edx+4]
		jmp	loc_6FFD5C3D
sub_6FFD5C00	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn

sub_6FFD5D22	proc near		; DATA XREF: sub_6FFD5C00+20o
		add	ebp, 8
		mov	eax, [ebp-54h]
		mov	dword ptr [ebp-58h], 0
		mov	[ebp-64h], eax
		lea	eax, [ebp-20h]
		mov	[esp+0], eax
		call	ds:_ZN8QVariantD1Ev
		mov	edx, [ebp-64h]
		mov	dword ptr [ebp-58h], 0FFFFFFFFh
		mov	[esp+0], edx
		call	_Unwind_SjLj_Resume
sub_6FFD5D22	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_6FFD5D50	proc near		; CODE XREF: sub_6FFD64B0+14Ap

var_60		= dword	ptr -60h
var_5C		= byte ptr -5Ch
var_58		= dword	ptr -58h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_20		= byte ptr -20h
var_C		= dword	ptr -0Ch
var_8		= byte ptr -8
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 78h
		lea	eax, [ebp+var_8]
		mov	[ebp+var_3C], eax
		lea	eax, [ebp+var_5C]
		mov	[esp], eax
		mov	[ebp+var_44], offset sub_6FFEC1F0
		mov	[ebp+var_40], offset word_6FFED3DA
		mov	[ebp+var_38], offset sub_6FFD5F55
		mov	[ebp+var_34], esp
		call	_Unwind_SjLj_Register
		mov	edx, [ebp+arg_4]
		mov	eax, [edx+4]
		test	eax, eax
		jz	loc_6FFD5F00

loc_6FFD5D8D:				; CODE XREF: sub_6FFD5D50+1DAj
		mov	dword ptr [esp+8], offset aStatus_0 ; "Status"
		mov	eax, [eax+8]
		mov	[ebp+var_58], 0FFFFFFFFh
		mov	[esp+4], eax
		lea	eax, [ebp+var_20]
		mov	[esp], eax
		call	ds:_ZNK7QObject8propertyEPKc
		lea	edx, [ebp+var_20]
		mov	[ebp+var_58], 2
		sub	esp, 4
		mov	[esp], edx
		call	ds:_ZNK8QVariant8userTypeEv
		cmp	eax, 0Ah
		jz	loc_6FFD5EA0
		mov	edx, ds:_ZN7QString11shared_nullE
		mov	[ebp+var_60], edx
		mov	[ebp+var_C], edx
		lock inc dword ptr [edx]
		setnz	al
		mov	eax, ds:_ZN8QVariant7handlerE
		lea	edx, [ebp+var_C]
		mov	eax, [eax]
		mov	[esp+8], edx
		lea	edx, [ebp+var_20]
		mov	dword ptr [esp+0Ch], 0
		mov	dword ptr [esp+4], 0Ah
		mov	[esp], edx
		mov	eax, [eax+18h]
		mov	[ebp+var_58], 1
		call	eax
		test	al, al
		jnz	short loc_6FFD5E60
		mov	eax, [ebp+var_C]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jz	loc_6FFD5EE2

loc_6FFD5E25:				; CODE XREF: sub_6FFD5D50+1A5j
		mov	eax, [ebp+var_60]
		mov	ecx, [ebp+arg_0]
		mov	edx, eax
		mov	[ecx], eax

loc_6FFD5E2F:				; CODE XREF: sub_6FFD5D50+165j
					; sub_6FFD5D50+18Dj
		lock inc dword ptr [edx]
		setnz	al

loc_6FFD5E35:				; CODE XREF: sub_6FFD5D50+134j
					; sub_6FFD5D50+149j
		lea	eax, [ebp+var_20]
		mov	[esp], eax
		mov	[ebp+var_58], 0FFFFFFFFh
		call	ds:_ZN8QVariantD1Ev
		lea	eax, [ebp+var_5C]
		mov	[esp], eax
		call	_Unwind_SjLj_Unregister
		mov	eax, [ebp+arg_0]
		leave
		retn	4
; ---------------------------------------------------------------------------
		align 10h

loc_6FFD5E60:				; CODE XREF: sub_6FFD5D50+C2j
		mov	ecx, [ebp+arg_0]
		lea	edx, [ebp+var_C]
		mov	eax, [ebp+var_C]
		cmp	ecx, edx
		mov	[ecx], eax
		jz	loc_6FFD5F30

loc_6FFD5E73:				; CODE XREF: sub_6FFD5D50+200j
		lock inc dword ptr [eax]
		setnz	dl
		mov	eax, [ebp+var_C]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jnz	short loc_6FFD5E35
		mov	eax, [ebp+var_C]
		mov	[ebp+var_58], 2
		mov	[esp], eax
		call	ds:_ZN7QString4freeEPNS_4DataE
		jmp	short loc_6FFD5E35
; ---------------------------------------------------------------------------
		align 10h

loc_6FFD5EA0:				; CODE XREF: sub_6FFD5D50+78j
		lea	eax, [ebp+var_20]
		mov	[esp], eax
		call	ds:_ZNK8QVariant9constDataEv
		mov	ecx, [ebp+arg_0]
		mov	edx, [eax]
		cmp	ecx, eax
		mov	[ecx], edx
		jnz	loc_6FFD5E2F
		mov	dword ptr [esp+8], 2D6h
		mov	dword ptr [esp+4], offset aRIncludeQtco_9 ; "R:/include/QtCore/qstring.h"
		mov	dword ptr [esp], offset	aOtherThis_2 ; "&other != this"
		call	ds:_Z9qt_assertPKcS0_i
		mov	eax, [ebp+arg_0]
		mov	edx, [eax]
		jmp	loc_6FFD5E2F
; ---------------------------------------------------------------------------

loc_6FFD5EE2:				; CODE XREF: sub_6FFD5D50+CFj
		mov	eax, [ebp+var_C]
		mov	[ebp+var_58], 2
		mov	[esp], eax
		call	ds:_ZN7QString4freeEPNS_4DataE
		jmp	loc_6FFD5E25
; ---------------------------------------------------------------------------
		align 10h

loc_6FFD5F00:				; CODE XREF: sub_6FFD5D50+37j
		mov	dword ptr [esp+8], 70h
		mov	dword ptr [esp+4], offset aRIncludeQtco_8 ; "R:/include/QtCore/qscopedpointer.h"
		mov	dword ptr [esp], offset	aD_1 ; "d"
		mov	[ebp+var_58], 0FFFFFFFFh
		call	ds:_Z9qt_assertPKcS0_i
		mov	ecx, [ebp+arg_4]
		mov	eax, [ecx+4]
		jmp	loc_6FFD5D8D
; ---------------------------------------------------------------------------
		align 10h

loc_6FFD5F30:				; CODE XREF: sub_6FFD5D50+11Dj
		mov	dword ptr [esp+8], 2D6h
		mov	dword ptr [esp+4], offset aRIncludeQtco_9 ; "R:/include/QtCore/qstring.h"
		mov	dword ptr [esp], offset	aOtherThis_2 ; "&other != this"
		call	ds:_Z9qt_assertPKcS0_i
		mov	eax, [ebp+var_C]
		jmp	loc_6FFD5E73
sub_6FFD5D50	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn

sub_6FFD5F55	proc near		; DATA XREF: sub_6FFD5D50+20o
		add	ebp, 8
		mov	eax, [ebp-54h]
		cmp	dword ptr [ebp-58h], 1
		mov	[ebp-68h], eax
		jz	short loc_6FFD5F8D
		mov	[ebp-64h], eax
		mov	eax, [ebp-0Ch]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jnz	short loc_6FFD5F87
		mov	eax, [ebp-0Ch]
		mov	dword ptr [ebp-58h], 0
		mov	[esp+0], eax
		call	ds:_ZN7QString4freeEPNS_4DataE

loc_6FFD5F87:				; CODE XREF: sub_6FFD5F55+1Dj
		mov	edx, [ebp-64h]
		mov	[ebp-68h], edx

loc_6FFD5F8D:				; CODE XREF: sub_6FFD5F55+Dj
		lea	eax, [ebp-20h]
		mov	[esp+0], eax
		mov	dword ptr [ebp-58h], 0
		call	ds:_ZN8QVariantD1Ev
		mov	ecx, [ebp-68h]
		mov	dword ptr [ebp-58h], 0FFFFFFFFh
		mov	[esp+0], ecx
		call	_Unwind_SjLj_Resume
sub_6FFD5F55	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_6FFD5FC0	proc near		; CODE XREF: sub_6FFD64B0+120p
					; DATA XREF: .rdata:6FFF56D8o

var_64		= dword	ptr -64h
var_60		= dword	ptr -60h
var_5C		= byte ptr -5Ch
var_58		= dword	ptr -58h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_28		= byte ptr -28h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= byte ptr -8
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h

		push	ebp
		mov	ebp, esp
		sub	esp, 98h
		lea	eax, [ebp+var_8]
		mov	[ebp+var_3C], eax
		lea	eax, [ebp+var_5C]
		mov	[esp], eax
		mov	[ebp+var_44], offset sub_6FFEC1F0
		mov	[ebp+var_40], offset dword_6FFED444
		mov	[ebp+var_38], offset sub_6FFD63B9
		mov	[ebp+var_34], esp
		call	_Unwind_SjLj_Register
		mov	eax, [ebp+arg_4]
		test	eax, eax
		jz	short loc_6FFD6006

loc_6FFD5FF9:				; CODE XREF: sub_6FFD5FC0+6Dj
					; sub_6FFD5FC0+BCj ...
		lea	eax, [ebp+var_5C] ; jumptable 6FFD6032 default case
		mov	[esp], eax
		call	_Unwind_SjLj_Unregister
		leave
		retn
; ---------------------------------------------------------------------------

loc_6FFD6006:				; CODE XREF: sub_6FFD5FC0+37j
		mov	edx, [ebp+arg_0]
		mov	dword ptr [esp], offset	dword_6FFEE040
		mov	[ebp+var_58], 0FFFFFFFFh
		mov	[esp+4], edx
		call	ds:_ZNK11QMetaObject4castEP7QObject
		test	eax, eax
		jz	loc_6FFD6317

loc_6FFD6029:				; CODE XREF: sub_6FFD5FC0+374j
		cmp	[ebp+arg_8], 7	; switch 8 cases
		ja	short loc_6FFD5FF9 ; jumptable 6FFD6032	default	case
		mov	ecx, [ebp+arg_8]
		jmp	ds:off_6FFF56B4[ecx*4] ; switch	jump
; ---------------------------------------------------------------------------
		align 10h

loc_6FFD6040:				; CODE XREF: sub_6FFD5FC0+72j
					; DATA XREF: .rdata:off_6FFF56B4o
		mov	ecx, [ebp+arg_C] ; jumptable 6FFD6032 case 6
		mov	eax, [ecx+10h]
		mov	[esp+10h], eax
		mov	eax, [ecx+0Ch]
		mov	[esp+0Ch], eax
		mov	eax, [ecx+8]
		mov	eax, [eax]
		mov	[esp+8], eax
		mov	eax, [ecx+4]
		mov	eax, [eax]
		mov	[ebp+var_58], 0FFFFFFFFh
		mov	[esp+4], eax
		mov	eax, [ebp+arg_0]
		mov	[esp], eax
		call	sub_6FFD5A00
		mov	ecx, [ebp+arg_C]
		mov	edx, [ecx]
		test	edx, edx
		jz	loc_6FFD5FF9	; jumptable 6FFD6032 default case
		mov	[edx], eax
		jmp	loc_6FFD5FF9	; jumptable 6FFD6032 default case
; ---------------------------------------------------------------------------
		align 10h

loc_6FFD6090:				; CODE XREF: sub_6FFD5FC0+72j
					; DATA XREF: .rdata:off_6FFF56B4o
		mov	ecx, [ebp+arg_C] ; jumptable 6FFD6032 case 5
		lea	eax, [ebp+var_14]
		mov	edx, [ecx+8]
		mov	[esp+0Ch], edx
		mov	edx, [ecx+4]
		mov	[esp], eax
		mov	[ebp+var_58], 0FFFFFFFFh
		mov	[esp+8], edx
		mov	edx, [ebp+arg_0]
		mov	[esp+4], edx
		call	sub_6FFD5A90
		mov	ecx, [ebp+arg_C]
		mov	ecx, [ecx]
		sub	esp, 4
		test	ecx, ecx
		mov	[ebp+var_64], ecx
		jz	short loc_6FFD60FD
		mov	eax, [ecx]
		mov	edx, [ebp+var_14]
		cmp	eax, edx
		mov	[ebp+var_60], edx
		jz	short loc_6FFD6100
		lock inc dword ptr [edx]
		setnz	al
		mov	eax, [ecx]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jz	loc_6FFD637E

loc_6FFD60EB:				; CODE XREF: sub_6FFD5FC0+3D3j
		mov	eax, [ebp+var_60]
		mov	ecx, [ebp+var_64]
		mov	[ecx], eax
		test	byte ptr [eax+10h], 1
		jz	loc_6FFD6398

loc_6FFD60FD:				; CODE XREF: sub_6FFD5FC0+107j
					; sub_6FFD5FC0+3F4j
		mov	eax, [ebp+var_14]

loc_6FFD6100:				; CODE XREF: sub_6FFD5FC0+113j
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jnz	loc_6FFD5FF9	; jumptable 6FFD6032 default case
		mov	eax, [ebp+var_14]
		mov	[ebp+var_58], 0FFFFFFFFh
		mov	[esp+4], eax
		lea	eax, [ebp+var_14]
		mov	[esp], eax
		call	sub_6FFE6340
		jmp	loc_6FFD5FF9	; jumptable 6FFD6032 default case
; ---------------------------------------------------------------------------
		align 10h

loc_6FFD6130:				; CODE XREF: sub_6FFD5FC0+72j
					; DATA XREF: .rdata:off_6FFF56B4o
		mov	edx, [ebp+arg_C] ; jumptable 6FFD6032 case 3
		mov	ecx, [ebp+arg_0]
		mov	eax, [edx+4]
		mov	eax, [eax]
		mov	[esp], ecx
		mov	[ebp+var_58], 0FFFFFFFFh
		mov	[esp+4], eax
		call	sub_6FFD5BA0
		mov	ecx, [ebp+arg_C]
		mov	edx, [ecx]
		test	edx, edx
		jz	loc_6FFD5FF9	; jumptable 6FFD6032 default case
		mov	[edx], al
		jmp	loc_6FFD5FF9	; jumptable 6FFD6032 default case
; ---------------------------------------------------------------------------

loc_6FFD6162:				; CODE XREF: sub_6FFD5FC0+72j
					; DATA XREF: .rdata:off_6FFF56B4o
		mov	ecx, [ebp+arg_C] ; jumptable 6FFD6032 case 2
		mov	eax, [ecx+8]
		mov	eax, [eax]
		mov	[esp+8], eax
		mov	eax, [ecx+4]
		mov	eax, [eax]
		mov	[ebp+var_58], 0FFFFFFFFh
		mov	[esp+4], eax
		mov	eax, [ebp+arg_0]
		mov	[esp], eax
		call	sub_6FFD55F0
		jmp	loc_6FFD5FF9	; jumptable 6FFD6032 default case
; ---------------------------------------------------------------------------
		align 10h

loc_6FFD6190:				; CODE XREF: sub_6FFD5FC0+72j
					; DATA XREF: .rdata:off_6FFF56B4o
		mov	edx, [ebp+arg_C] ; jumptable 6FFD6032 case 1
		mov	eax, [edx+8]
		mov	eax, [eax]
		mov	[ebp+var_10], eax
		lock inc dword ptr [eax]
		setnz	dl
		mov	eax, [ebp+var_10]
		test	byte ptr [eax+10h], 1
		jz	loc_6FFD6340

loc_6FFD61AE:				; CODE XREF: sub_6FFD5FC0+399j
		mov	ecx, [ebp+arg_C]
		mov	eax, [ecx+4]
		mov	eax, [eax]
		mov	[ebp+var_C], eax
		lock inc dword ptr [eax]
		setnz	dl
		mov	eax, [ebp+var_C]
		test	byte ptr [eax+10h], 1
		jnz	short loc_6FFD61E1
		mov	eax, [eax+4]
		mov	[ebp+var_58], 4
		mov	[esp+4], eax
		lea	eax, [ebp+var_C]
		mov	[esp], eax
		call	sub_6FFE5F80

loc_6FFD61E1:				; CODE XREF: sub_6FFD5FC0+206j
		lea	eax, [ebp+var_10]
		mov	[esp+8], eax
		lea	eax, [ebp+var_C]
		mov	[esp+4], eax
		mov	eax, [ebp+arg_0]
		mov	[ebp+var_58], 3
		mov	[esp], eax
		call	sub_6FFD5640
		mov	eax, [ebp+var_C]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jz	loc_6FFD6360

loc_6FFD6212:				; CODE XREF: sub_6FFD5FC0+3B9j
		mov	eax, [ebp+var_10]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jnz	loc_6FFD5FF9	; jumptable 6FFD6032 default case
		mov	eax, [ebp+var_10]
		mov	[ebp+var_58], 0FFFFFFFFh
		mov	[esp+4], eax
		lea	eax, [ebp+var_10]
		mov	[esp], eax
		call	sub_6FFE6F70
		jmp	loc_6FFD5FF9	; jumptable 6FFD6032 default case
; ---------------------------------------------------------------------------

loc_6FFD6241:				; CODE XREF: sub_6FFD5FC0+72j
					; DATA XREF: .rdata:off_6FFF56B4o
		mov	edx, [ebp+arg_C] ; jumptable 6FFD6032 case 0
		mov	ecx, [ebp+arg_0]
		mov	eax, [edx+8]
		mov	eax, [eax]
		mov	[esp+8], eax
		mov	eax, [edx+4]
		mov	eax, [eax]
		mov	[esp], ecx
		mov	[ebp+var_58], 0FFFFFFFFh
		mov	[esp+4], eax
		call	sub_6FFD5690
		jmp	loc_6FFD5FF9	; jumptable 6FFD6032 default case
; ---------------------------------------------------------------------------
		align 10h

loc_6FFD6270:				; CODE XREF: sub_6FFD5FC0+72j
					; DATA XREF: .rdata:off_6FFF56B4o
		mov	edx, [ebp+arg_C] ; jumptable 6FFD6032 case 4
		mov	ecx, [ebp+arg_0]
		mov	eax, [edx+10h]
		mov	eax, [eax]
		mov	[esp+10h], eax
		mov	eax, [edx+0Ch]
		mov	[esp+0Ch], eax
		mov	eax, [edx+8]
		mov	[esp+8], eax
		mov	eax, [edx+4]
		mov	eax, [eax]
		mov	[esp], ecx
		mov	[ebp+var_58], 0FFFFFFFFh
		mov	[esp+4], eax
		call	sub_6FFD5B10
		jmp	loc_6FFD5FF9	; jumptable 6FFD6032 default case
; ---------------------------------------------------------------------------
		align 10h

loc_6FFD62B0:				; CODE XREF: sub_6FFD5FC0+72j
					; DATA XREF: .rdata:off_6FFF56B4o
		mov	edx, [ebp+arg_C] ; jumptable 6FFD6032 case 7
		mov	ecx, [ebp+arg_0]
		mov	eax, [edx+8]
		mov	[esp+0Ch], eax
		mov	eax, [edx+4]
		mov	eax, [eax]
		mov	[esp+4], ecx
		mov	[ebp+var_58], 0FFFFFFFFh
		mov	[esp+8], eax
		lea	eax, [ebp+var_28]
		mov	[esp], eax
		call	sub_6FFD5980
		mov	edx, [ebp+arg_C]
		mov	eax, [edx]
		sub	esp, 4
		test	eax, eax
		jz	short loc_6FFD62FF
		lea	ecx, [ebp+var_28]
		mov	[esp+4], ecx
		mov	[esp], eax
		mov	[ebp+var_58], 1
		call	ds:_ZN8QVariantaSERKS_

loc_6FFD62FF:				; CODE XREF: sub_6FFD5FC0+326j
		lea	eax, [ebp+var_28]
		mov	[esp], eax
		mov	[ebp+var_58], 0FFFFFFFFh
		call	ds:_ZN8QVariantD2Ev
		jmp	loc_6FFD5FF9	; jumptable 6FFD6032 default case
; ---------------------------------------------------------------------------

loc_6FFD6317:				; CODE XREF: sub_6FFD5FC0+63j
		mov	dword ptr [esp+8], 0EFh
		mov	dword ptr [esp+4], offset aRBuildKdesup_3 ; "R:\\build\\kdesupport\\dbusmenu-qt-0.9."...
		mov	dword ptr [esp], offset	aStaticmetaob_2	; "staticMetaObject.cast(_o)"
		call	ds:_Z9qt_assertPKcS0_i
		jmp	loc_6FFD6029
; ---------------------------------------------------------------------------
		align 10h

loc_6FFD6340:				; CODE XREF: sub_6FFD5FC0+1E8j
		mov	eax, [eax+4]
		mov	[ebp+var_58], 0FFFFFFFFh
		mov	[esp+4], eax
		lea	eax, [ebp+var_10]
		mov	[esp], eax
		call	sub_6FFE6BF0
		jmp	loc_6FFD61AE
; ---------------------------------------------------------------------------
		align 10h

loc_6FFD6360:				; CODE XREF: sub_6FFD5FC0+24Cj
		mov	eax, [ebp+var_C]
		mov	[ebp+var_58], 4
		mov	[esp+4], eax
		lea	eax, [ebp+var_C]
		mov	[esp], eax
		call	sub_6FFE6340
		jmp	loc_6FFD6212
; ---------------------------------------------------------------------------

loc_6FFD637E:				; CODE XREF: sub_6FFD5FC0+125j
		mov	eax, [ecx]
		mov	[esp], ecx
		mov	[ebp+var_58], 2
		mov	[esp+4], eax
		call	sub_6FFE6340
		jmp	loc_6FFD60EB
; ---------------------------------------------------------------------------

loc_6FFD6398:				; CODE XREF: sub_6FFD5FC0+137j
		mov	edx, [ebp+var_60]
		mov	ecx, [ebp+var_64]
		mov	eax, [edx+4]
		mov	[esp], ecx
		mov	[ebp+var_58], 2
		mov	[esp+4], eax
		call	sub_6FFE5F80
		jmp	loc_6FFD60FD
sub_6FFD5FC0	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn

sub_6FFD63B9	proc near		; DATA XREF: sub_6FFD5FC0+23o

arg_0		= dword	ptr  4

		add	ebp, 8
		mov	eax, [ebp-58h]
		mov	edx, [ebp-54h]
		cmp	eax, 1
		mov	[ebp-74h], edx
		jz	short loc_6FFD63FD
		cmp	eax, 2
		jz	short loc_6FFD643B
		cmp	eax, 3
		jz	loc_6FFD646D
		lea	eax, [ebp-28h]
		mov	[esp+0], eax
		mov	dword ptr [ebp-58h], 0
		call	ds:_ZN8QVariantD2Ev
		mov	ecx, [ebp-74h]
		mov	dword ptr [ebp-58h], 0FFFFFFFFh
		mov	[esp+0], ecx
		call	_Unwind_SjLj_Resume
; ---------------------------------------------------------------------------

loc_6FFD63FD:				; CODE XREF: sub_6FFD63B9+Fj
		mov	eax, [ebp-74h]
		mov	[ebp-68h], eax
		mov	eax, [ebp-14h]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jnz	short loc_6FFD6429
		mov	eax, [ebp-14h]
		mov	dword ptr [ebp-58h], 0
		mov	[esp+arg_0], eax
		lea	eax, [ebp-14h]
		mov	[esp+0], eax
		call	sub_6FFE6340

loc_6FFD6429:				; CODE XREF: sub_6FFD63B9+55j
		mov	edx, [ebp-68h]
		mov	dword ptr [ebp-58h], 0FFFFFFFFh
		mov	[esp+0], edx
		call	_Unwind_SjLj_Resume
; ---------------------------------------------------------------------------

loc_6FFD643B:				; CODE XREF: sub_6FFD63B9+14j
		mov	edx, [ebp-74h]
		mov	eax, [ebp-0Ch]
		mov	[ebp-70h], edx
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jnz	short loc_6FFD6467
		mov	eax, [ebp-0Ch]
		mov	dword ptr [ebp-58h], 0
		mov	[esp+arg_0], eax
		lea	eax, [ebp-0Ch]
		mov	[esp+0], eax
		call	sub_6FFE6340

loc_6FFD6467:				; CODE XREF: sub_6FFD63B9+93j
		mov	ecx, [ebp-70h]
		mov	[ebp-74h], ecx

loc_6FFD646D:				; CODE XREF: sub_6FFD63B9+19j
		mov	eax, [ebp-74h]
		mov	[ebp-6Ch], eax
		mov	eax, [ebp-10h]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jnz	short loc_6FFD6499
		mov	eax, [ebp-10h]
		mov	dword ptr [ebp-58h], 0
		mov	[esp+arg_0], eax
		lea	eax, [ebp-10h]
		mov	[esp+0], eax
		call	sub_6FFE6F70

loc_6FFD6499:				; CODE XREF: sub_6FFD63B9+C5j
		mov	edx, [ebp-6Ch]
		mov	dword ptr [ebp-58h], 0FFFFFFFFh
		mov	[esp+0], edx
		call	_Unwind_SjLj_Resume
sub_6FFD63B9	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_6FFD64B0	proc near		; DATA XREF: .rdata:6FFF9D30o

var_54		= dword	ptr -54h
var_50		= dword	ptr -50h
var_4C		= byte ptr -4Ch
var_48		= dword	ptr -48h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_C		= dword	ptr -0Ch
var_8		= byte ptr -8
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h

		push	ebp
		mov	ebp, esp
		sub	esp, 68h
		lea	eax, [ebp+var_8]
		mov	[ebp+var_2C], eax
		lea	eax, [ebp+var_4C]
		mov	[ebp+var_34], offset sub_6FFEC1F0
		mov	[ebp+var_30], offset dword_6FFED450
		mov	[ebp+var_28], offset sub_6FFD6645
		mov	[ebp+var_24], esp
		mov	[esp], eax
		call	_Unwind_SjLj_Register
		mov	edx, [ebp+arg_C]
		mov	[esp+0Ch], edx
		mov	eax, [ebp+arg_8]
		mov	[esp+8], eax
		mov	eax, [ebp+arg_4]
		mov	[esp+4], eax
		mov	edx, [ebp+arg_0]
		mov	[esp], edx
		mov	[ebp+var_48], 0FFFFFFFFh
		call	ds:_ZN20QDBusAbstractAdaptor11qt_metacallEN11QMetaObject4CallEiPPv
		test	eax, eax
		mov	[ebp+var_50], eax
		js	short loc_6FFD6552
		mov	ecx, [ebp+arg_4]
		test	ecx, ecx
		jz	short loc_6FFD6562
		cmp	[ebp+arg_4], 1
		jz	loc_6FFD65D7
		cmp	[ebp+arg_4], 2
		jz	short loc_6FFD65A0
		cmp	[ebp+arg_4], 3
		jz	short loc_6FFD65A0
		cmp	[ebp+arg_4], 4
		nop
		jz	short loc_6FFD65A0
		cmp	[ebp+arg_4], 5
		jz	short loc_6FFD65A0
		cmp	[ebp+arg_4], 6
		lea	esi, [esi+0]
		jz	short loc_6FFD65A0
		cmp	[ebp+arg_4], 7
		jz	short loc_6FFD65A0
		cmp	[ebp+arg_4], 8
		lea	esi, [esi+0]
		jz	short loc_6FFD65A0

loc_6FFD6552:				; CODE XREF: sub_6FFD64B0+5Cj
		lea	eax, [ebp+var_4C]
		mov	[esp], eax
		call	_Unwind_SjLj_Unregister
		mov	eax, [ebp+var_50]
		leave
		retn
; ---------------------------------------------------------------------------

loc_6FFD6562:				; CODE XREF: sub_6FFD64B0+63j
		cmp	eax, 7
		jle	short loc_6FFD65B4

loc_6FFD6567:				; CODE XREF: sub_6FFD64B0+125j
		sub	[ebp+var_50], 8
		lea	eax, [ebp+var_4C]
		mov	[esp], eax
		call	_Unwind_SjLj_Unregister
		mov	eax, [ebp+var_50]
		leave
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6FFD6580:				; CODE XREF: sub_6FFD64B0+134j
		cmp	[ebp+var_50], 1
		jnz	short loc_6FFD65A0
		mov	eax, [ebp+arg_0]
		mov	[esp], eax
		mov	[ebp+var_48], 0FFFFFFFFh
		call	sub_6FFD5C00
		mov	edx, [ebp+var_54]
		mov	[edx], eax
		lea	esi, [esi+0]

loc_6FFD65A0:				; CODE XREF: sub_6FFD64B0+73j
					; sub_6FFD64B0+79j ...
		sub	[ebp+var_50], 2
		lea	eax, [ebp+var_4C]
		mov	[esp], eax
		call	_Unwind_SjLj_Unregister
		mov	eax, [ebp+var_50]
		leave
		retn
; ---------------------------------------------------------------------------

loc_6FFD65B4:				; CODE XREF: sub_6FFD64B0+B5j
		mov	eax, [ebp+arg_C]
		mov	[esp+0Ch], eax
		mov	edx, [ebp+var_50]
		mov	dword ptr [esp+4], 0
		mov	[esp+8], edx
		mov	eax, [ebp+arg_0]
		mov	[esp], eax
		call	sub_6FFD5FC0
		jmp	short loc_6FFD6567
; ---------------------------------------------------------------------------

loc_6FFD65D7:				; CODE XREF: sub_6FFD64B0+69j
		mov	edx, [ebp+arg_C]
		mov	edx, [edx]
		mov	[ebp+var_54], edx
		mov	edx, [ebp+var_50]
		test	edx, edx
		jnz	short loc_6FFD6580
		mov	eax, [ebp+arg_0]
		lea	edx, [ebp+var_C]
		mov	[esp], edx
		mov	[esp+4], eax
		mov	[ebp+var_48], 0FFFFFFFFh
		call	sub_6FFD5D50
		lea	eax, [ebp+var_C]
		sub	esp, 4
		mov	[esp+4], eax
		mov	edx, [ebp+var_54]
		mov	[esp], edx
		mov	[ebp+var_48], 1
		call	ds:_ZN7QStringaSERKS_
		mov	eax, [ebp+var_C]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jnz	loc_6FFD65A0
		mov	eax, [ebp+var_C]
		mov	[esp], eax
		mov	[ebp+var_48], 0FFFFFFFFh
		call	ds:_ZN7QString4freeEPNS_4DataE
		jmp	loc_6FFD65A0
sub_6FFD64B0	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn

sub_6FFD6645	proc near		; DATA XREF: sub_6FFD64B0+1Do
		add	ebp, 8
		mov	eax, [ebp-44h]
		mov	[ebp-58h], eax
		mov	eax, [ebp-0Ch]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jnz	short loc_6FFD666E
		mov	eax, [ebp-0Ch]
		mov	[esp+0], eax
		mov	dword ptr [ebp-48h], 0
		call	ds:_ZN7QString4freeEPNS_4DataE

loc_6FFD666E:				; CODE XREF: sub_6FFD6645+14j
		mov	edx, [ebp-58h]
		mov	[esp+0], edx
		mov	dword ptr [ebp-48h], 0FFFFFFFFh
		call	_Unwind_SjLj_Resume
sub_6FFD6645	endp

; [00000006 BYTES: COLLAPSED FUNCTION _ZN7QObject11qt_metacastEPKc]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _ZN7QObject11qt_metacallEN11QMetaObject4CallEiPPv]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _ZN7QObject5eventEP6QEvent]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _ZN7QObject10timerEventEP11QTimerEvent]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _ZN7QObject10childEventEP11QChildEvent]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _ZN7QObject11customEventEP6QEvent]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _ZN7QObject13connectNotifyEPKc]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _ZN7QObject16disconnectNotifyEPKc]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _ZN7QObject11eventFilterEPS_P6QEvent]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _ZNK7QObject10metaObjectEv]
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6FFD66D0	proc near		; CODE XREF: sub_6FFD6870+3Ap
					; sub_6FFD6D20+1AAp ...

var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4

		sub	esp, 0Ch
		cmp	edx, 3Ch	; switch 61 cases
		mov	[esp+0Ch+var_4], edi
		mov	edi, [esp+0Ch+arg_0]
		mov	[esp+0Ch+var_C], ebx
		mov	[esp+0Ch+var_8], esi
		jbe	short loc_6FFD6700

loc_6FFD66E7:				; CODE XREF: sub_6FFD66D0:loc_6FFD6700j
					; sub_6FFD66D0+39j ...
		xor	ebx, ebx	; jumptable 6FFD6700 default case

loc_6FFD66E9:				; CODE XREF: sub_6FFD66D0+54j
					; sub_6FFD66D0+5Ej
		mov	eax, ebx
		mov	esi, [esp+0Ch+var_8]
		mov	ebx, [esp+0Ch+var_C]
		mov	edi, [esp+0Ch+var_4]
		add	esp, 0Ch
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6FFD6700:				; CODE XREF: sub_6FFD66D0+15j
		jmp	ds:off_6FFF8560[edx*4] ; switch	jump
; ---------------------------------------------------------------------------

loc_6FFD6707:				; CODE XREF: sub_6FFD66D0:loc_6FFD6700j
					; DATA XREF: .rdata:off_6FFF8560o
		test	edi, edi	; jumptable 6FFD6700 case 38
		jz	short loc_6FFD66E7 ; jumptable 6FFD6700	default	case

loc_6FFD670B:				; CODE XREF: sub_6FFD66D0:loc_6FFD6700j
					; DATA XREF: .rdata:off_6FFF8560o
		mov	esi, [eax+14h]	; jumptable 6FFD6700 cases 23-28,37,41,42
		cmp	esi, [eax+18h]
		jge	short loc_6FFD66E7 ; jumptable 6FFD6700	default	case

loc_6FFD6713:				; CODE XREF: sub_6FFD66D0+72j
		lea	ebx, [esi+esi*2]
		add	esi, 1
		shl	ebx, 2
		add	ebx, [eax+10h]
		mov	[eax+14h], esi
		test	ebx, ebx
		jz	short loc_6FFD66E9
		mov	[ebx], edx
		mov	[ebx+4], ecx
		mov	[ebx+8], edi
		jmp	short loc_6FFD66E9
; ---------------------------------------------------------------------------

loc_6FFD6730:				; CODE XREF: sub_6FFD66D0:loc_6FFD6700j
					; DATA XREF: .rdata:off_6FFF8560o
		test	edi, edi	; jumptable 6FFD6700 cases 1-4,11,29,39,46-53,55
		jz	short loc_6FFD66E7 ; jumptable 6FFD6700	default	case

loc_6FFD6734:				; CODE XREF: sub_6FFD66D0:loc_6FFD6700j
					; DATA XREF: .rdata:off_6FFF8560o
		test	ecx, ecx	; jumptable 6FFD6700 cases 9,10,12-21,30-34,36,45,54,57-60
		jz	short loc_6FFD66E7 ; jumptable 6FFD6700	default	case
		mov	esi, [eax+14h]
		cmp	esi, [eax+18h]
		xchg	ax, ax
		jge	short loc_6FFD66E7 ; jumptable 6FFD6700	default	case
		jmp	short loc_6FFD6713
sub_6FFD66D0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6FFD6750	proc near		; CODE XREF: sub_6FFD6C50+6Fp
					; sub_6FFD6C50+B9p ...

var_8		= dword	ptr -8
var_4		= dword	ptr -4

		sub	esp, 8
		mov	[esp+8+var_8], ebx
		mov	[esp+8+var_4], esi
		mov	esi, [eax+14h]
		cmp	esi, [eax+18h]
		jge	short loc_6FFD6775
		lea	ebx, [esi+esi*2]
		add	esi, 1
		shl	ebx, 2
		add	ebx, [eax+10h]
		mov	[eax+14h], esi
		test	ebx, ebx
		jnz	short loc_6FFD6784

loc_6FFD6775:				; CODE XREF: sub_6FFD6750+10j
					; sub_6FFD6750+36j ...
		xor	ebx, ebx
		mov	esi, [esp+8+var_4]
		mov	eax, ebx
		mov	ebx, [esp+8+var_8]
		add	esp, 8
		retn
; ---------------------------------------------------------------------------

loc_6FFD6784:				; CODE XREF: sub_6FFD6750+23j
		test	edx, edx
		jz	short loc_6FFD6775
		test	ecx, ecx
		jz	short loc_6FFD6775
		mov	dword ptr [ebx], 0
		mov	eax, ebx
		mov	[ebx+4], edx
		mov	[ebx+8], ecx
		mov	ebx, [esp+8+var_8]
		mov	esi, [esp+8+var_4]
		add	esp, 8
		retn
sub_6FFD6750	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6FFD67B0	proc near		; CODE XREF: sub_6FFD6810+2Ap
					; sub_6FFD6810+3Fp ...
		push	edi
		xor	edi, edi
		push	esi
		mov	esi, eax
		push	ebx
		mov	eax, [eax+0Ch]
		movzx	ecx, byte ptr [eax]
		cmp	cl, 6Eh
		jz	short loc_6FFD67F5

loc_6FFD67C2:				; CODE XREF: sub_6FFD67B0+53j
		lea	eax, [ecx-30h]
		cmp	al, 9
		ja	short loc_6FFD6805
		mov	edx, [esi+0Ch]
		xor	eax, eax
		xchg	ax, ax

loc_6FFD67D0:				; CODE XREF: sub_6FFD67B0+39j
		add	edx, 1
		movsx	ecx, cl
		lea	eax, [eax+eax*4]
		lea	eax, [ecx+eax*2-30h]
		mov	[esi+0Ch], edx
		movzx	ecx, byte ptr [edx]
		lea	ebx, [ecx-30h]
		cmp	bl, 9
		jbe	short loc_6FFD67D0

loc_6FFD67EB:				; CODE XREF: sub_6FFD67B0+57j
		test	edi, edi
		jz	short loc_6FFD67F1
		neg	eax

loc_6FFD67F1:				; CODE XREF: sub_6FFD67B0+3Dj
		pop	ebx
		pop	esi
		pop	edi
		retn
; ---------------------------------------------------------------------------

loc_6FFD67F5:				; CODE XREF: sub_6FFD67B0+10j
		lea	edx, [eax+1]
		mov	di, 1
		mov	[esi+0Ch], edx
		movzx	ecx, byte ptr [eax+1]
		jmp	short loc_6FFD67C2
; ---------------------------------------------------------------------------

loc_6FFD6805:				; CODE XREF: sub_6FFD67B0+17j
		xor	eax, eax
		jmp	short loc_6FFD67EB
sub_6FFD67B0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6FFD6810	proc near		; CODE XREF: sub_6FFD8100+1D7p
					; sub_6FFD8100+212p ...
		test	edx, edx
		push	ebx
		mov	ebx, eax
		jnz	short loc_6FFD682A
		mov	eax, [eax+0Ch]
		movzx	edx, byte ptr [eax]
		test	dl, dl
		jz	short loc_6FFD6834
		add	eax, 1
		movsx	edx, dl
		mov	[ebx+0Ch], eax

loc_6FFD682A:				; CODE XREF: sub_6FFD6810+5j
		cmp	edx, 68h
		jz	short loc_6FFD684D
		cmp	edx, 76h
		jz	short loc_6FFD6838

loc_6FFD6834:				; CODE XREF: sub_6FFD6810+Fj
					; sub_6FFD6810+35j ...
		xor	eax, eax
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_6FFD6838:				; CODE XREF: sub_6FFD6810+22j
		mov	eax, ebx
		call	sub_6FFD67B0
		mov	eax, [ebx+0Ch]
		cmp	byte ptr [eax],	5Fh
		jnz	short loc_6FFD6834
		add	eax, 1
		mov	[ebx+0Ch], eax

loc_6FFD684D:				; CODE XREF: sub_6FFD6810+1Dj
		mov	eax, ebx
		call	sub_6FFD67B0
		mov	eax, [ebx+0Ch]
		cmp	byte ptr [eax],	5Fh
		jnz	short loc_6FFD6834
		add	eax, 1
		mov	[ebx+0Ch], eax
		mov	eax, 1
		pop	ebx
		retn
sub_6FFD6810	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6FFD6870	proc near		; CODE XREF: sub_6FFD7060+5Ap
					; sub_6FFD7060+31Fp ...

var_10		= dword	ptr -10h

		push	edi
		mov	edi, ecx
		push	esi
		mov	esi, edx
		push	ebx
		mov	ebx, eax
		sub	esp, 4
		mov	eax, [eax+0Ch]
		movzx	eax, byte ptr [eax]
		jmp	short loc_6FFD68BE
; ---------------------------------------------------------------------------

loc_6FFD6884:				; CODE XREF: sub_6FFD6870+58j
		test	dl, dl
		jnz	short loc_6FFD68CA
		cmp	al, 4Bh
		jnz	short loc_6FFD68E5
		add	dword ptr [ebx+0Ch], 1

loc_6FFD6890:				; CODE XREF: sub_6FFD6870+80j
		cmp	edi, 1
		sbb	edx, edx
		add	dword ptr [ebx+30h], 6
		and	edx, 0FFFFFFFDh
		add	edx, 1Ch

loc_6FFD689F:				; CODE XREF: sub_6FFD6870+71j
					; sub_6FFD6870+91j
		xor	ecx, ecx
		mov	eax, ebx
		mov	[esp+10h+var_10], 0
		call	sub_6FFD66D0
		test	eax, eax
		mov	[esi], eax
		jz	short loc_6FFD68E3
		lea	esi, [eax+4]
		mov	eax, [ebx+0Ch]
		movzx	eax, byte ptr [eax]

loc_6FFD68BE:				; CODE XREF: sub_6FFD6870+12j
		cmp	al, 72h
		setz	dl
		cmp	al, 56h
		setz	cl
		jnz	short loc_6FFD6884

loc_6FFD68CA:				; CODE XREF: sub_6FFD6870+16j
		add	dword ptr [ebx+0Ch], 1
		test	dl, dl
		jz	short loc_6FFD68EE
		cmp	edi, 1
		sbb	edx, edx
		and	edx, 0FFFFFFFDh
		add	edx, 1Ah
		add	dword ptr [ebx+30h], 9
		jmp	short loc_6FFD689F
; ---------------------------------------------------------------------------

loc_6FFD68E3:				; CODE XREF: sub_6FFD6870+43j
		xor	esi, esi

loc_6FFD68E5:				; CODE XREF: sub_6FFD6870+1Aj
		add	esp, 4
		mov	eax, esi
		pop	ebx
		pop	esi
		pop	edi
		retn
; ---------------------------------------------------------------------------

loc_6FFD68EE:				; CODE XREF: sub_6FFD6870+60j
		test	cl, cl
		jz	short loc_6FFD6890
		cmp	edi, 1
		sbb	edx, edx
		and	edx, 0FFFFFFFDh
		add	edx, 1Bh
		add	dword ptr [ebx+30h], 9
		jmp	short loc_6FFD689F
sub_6FFD6870	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6FFD6910	proc near		; CODE XREF: sub_6FFD6D20+1CBj
					; sub_6FFD7060+219p ...
		push	ebx
		mov	ebx, eax
		mov	eax, [eax+0Ch]
		cmp	byte ptr [eax],	54h
		jz	short loc_6FFD6920

loc_6FFD691B:				; CODE XREF: sub_6FFD6910+27j
					; sub_6FFD6910+2Fj ...
		xor	eax, eax

loc_6FFD691D:				; CODE XREF: sub_6FFD6910+57j
		pop	ebx
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6FFD6920:				; CODE XREF: sub_6FFD6910+9j
		lea	edx, [eax+1]
		xor	ecx, ecx
		mov	[ebx+0Ch], edx
		cmp	byte ptr [eax+1], 5Fh
		jz	short loc_6FFD6944
		mov	eax, ebx
		call	sub_6FFD67B0
		test	eax, eax
		js	short loc_6FFD691B
		mov	edx, [ebx+0Ch]
		cmp	byte ptr [edx],	5Fh
		jnz	short loc_6FFD691B
		lea	ecx, [eax+1]

loc_6FFD6944:				; CODE XREF: sub_6FFD6910+1Cj
		add	edx, 1
		mov	[ebx+0Ch], edx
		mov	edx, [ebx+14h]
		add	dword ptr [ebx+28h], 1
		cmp	edx, [ebx+18h]
		jge	short loc_6FFD691B
		lea	eax, [edx+edx*2]
		add	edx, 1
		shl	eax, 2
		add	eax, [ebx+10h]
		mov	[ebx+14h], edx
		test	eax, eax
		jz	short loc_6FFD691D
		mov	dword ptr [eax], 5
		mov	[eax+4], ecx
		pop	ebx
		retn
sub_6FFD6910	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6FFD6980	proc near		; CODE XREF: sub_6FFD7060+1DFp
					; sub_6FFD7DF0+9Dp ...
		push	ebp
		push	edi
		push	esi
		push	ebx
		mov	ebx, [eax+0Ch]
		cmp	byte ptr [ebx],	53h
		jz	short loc_6FFD6995

loc_6FFD698C:				; CODE XREF: sub_6FFD6980+50j
					; sub_6FFD6980+74j ...
		xor	edx, edx

loc_6FFD698E:				; CODE XREF: sub_6FFD6980+161j
					; sub_6FFD6980+173j
		mov	eax, edx
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_6FFD6995:				; CODE XREF: sub_6FFD6980+Aj
		lea	ecx, [ebx+1]
		mov	[eax+0Ch], ecx
		movzx	ecx, byte ptr [ebx+1]
		test	cl, cl
		jnz	short loc_6FFD69F6

loc_6FFD69A3:				; CODE XREF: sub_6FFD6980+19Aj
		mov	ebx, [eax+8]
		shr	ebx, 3
		and	ebx, 1
		test	edx, edx
		jz	short loc_6FFD69C5
		test	ebx, ebx
		jnz	short loc_6FFD69C5
		mov	edx, [eax+0Ch]
		xor	ebx, ebx
		movzx	edx, byte ptr [edx]
		sub	edx, 43h
		cmp	dl, 1
		setbe	bl

loc_6FFD69C5:				; CODE XREF: sub_6FFD6980+2Ej
					; sub_6FFD6980+32j
		mov	edx, offset dword_6FFF9464
		cmp	edx, offset aT	; "t"
		jbe	short loc_6FFD698C
		cmp	cl, 74h
		mov	edx, offset aT	; "t"
		jnz	short loc_6FFD69E9
		jmp	loc_6FFD6A81
; ---------------------------------------------------------------------------

loc_6FFD69E1:				; CODE XREF: sub_6FFD6980+72j
		cmp	cl, [edx]
		jz	loc_6FFD6A81

loc_6FFD69E9:				; CODE XREF: sub_6FFD6980+5Aj
		add	edx, 1Ch
		cmp	edx, offset dword_6FFF9464
		jnz	short loc_6FFD69E1
		jmp	short loc_6FFD698C
; ---------------------------------------------------------------------------

loc_6FFD69F6:				; CODE XREF: sub_6FFD6980+21j
		add	ebx, 2
		mov	[eax+0Ch], ebx
		lea	ebx, [ecx-30h]
		cmp	bl, 9
		ja	loc_6FFD6B05
		cmp	cl, 5Fh
		jz	short loc_6FFD6A7D

loc_6FFD6A0D:				; CODE XREF: sub_6FFD6980+194j
		lea	ebx, [ecx-30h]
		xor	edx, edx
		cmp	bl, 9
		ja	short loc_6FFD6A48

loc_6FFD6A17:				; CODE XREF: sub_6FFD6980+C6j
		lea	ebx, [edx+edx*8]
		movsx	ecx, cl
		lea	ebx, [ecx+ebx*4-30h]

loc_6FFD6A21:				; CODE XREF: sub_6FFD6980+DEj
		cmp	edx, ebx
		ja	loc_6FFD698C
		mov	edx, [eax+0Ch]
		movzx	ecx, byte ptr [edx]
		test	cl, cl
		jz	short loc_6FFD6A3E
		add	edx, 1
		cmp	cl, 5Fh
		mov	[eax+0Ch], edx
		jz	short loc_6FFD6A60

loc_6FFD6A3E:				; CODE XREF: sub_6FFD6980+B1j
		mov	edx, ebx
		lea	ebx, [ecx-30h]
		cmp	bl, 9
		jbe	short loc_6FFD6A17

loc_6FFD6A48:				; CODE XREF: sub_6FFD6980+95j
		lea	ebx, [ecx-41h]
		cmp	bl, 19h
		ja	loc_6FFD698C
		lea	ebx, [edx+edx*8]
		movsx	ecx, cl
		lea	ebx, [ecx+ebx*4-37h]
		jmp	short loc_6FFD6A21
; ---------------------------------------------------------------------------

loc_6FFD6A60:				; CODE XREF: sub_6FFD6980+BCj
		add	ebx, 1

loc_6FFD6A63:				; CODE XREF: sub_6FFD6980+FFj
		cmp	ebx, [eax+20h]
		jnb	loc_6FFD698C
		add	dword ptr [eax+28h], 1
		mov	eax, [eax+1Ch]
		mov	edx, [eax+ebx*4]
		pop	ebx
		pop	esi
		pop	edi
		mov	eax, edx
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_6FFD6A7D:				; CODE XREF: sub_6FFD6980+8Bj
					; sub_6FFD6980+188j
		xor	ebx, ebx
		jmp	short loc_6FFD6A63
; ---------------------------------------------------------------------------

loc_6FFD6A81:				; CODE XREF: sub_6FFD6980+5Cj
					; sub_6FFD6980+63j
		mov	edi, [edx+14h]
		test	edi, edi
		jz	short loc_6FFD6B00
		mov	ecx, [eax+14h]
		xor	esi, esi
		cmp	ecx, [eax+18h]
		mov	ebp, [edx+18h]
		jge	short loc_6FFD6AB7
		lea	esi, [ecx+ecx*2]
		add	ecx, 1
		shl	esi, 2
		add	esi, [eax+10h]
		mov	[eax+14h], ecx
		test	esi, esi
		jz	short loc_6FFD6AB7
		mov	[esi+4], edi
		mov	[esi+8], ebp
		mov	ecx, [eax+14h]
		mov	dword ptr [esi], 16h

loc_6FFD6AB7:				; CODE XREF: sub_6FFD6980+113j
					; sub_6FFD6980+126j
		mov	[eax+2Ch], esi

loc_6FFD6ABA:				; CODE XREF: sub_6FFD6980+183j
		test	ebx, ebx
		jz	short loc_6FFD6AF8
		mov	esi, [edx+0Ch]
		mov	ebx, [edx+10h]

loc_6FFD6AC4:				; CODE XREF: sub_6FFD6980+17Ej
		add	[eax+30h], ebx
		cmp	ecx, [eax+18h]
		jge	loc_6FFD698C
		lea	edx, [ecx+ecx*2]
		add	ecx, 1
		shl	edx, 2
		add	edx, [eax+10h]
		mov	[eax+14h], ecx
		test	edx, edx
		jz	loc_6FFD698E
		mov	dword ptr [edx], 16h
		mov	[edx+4], esi
		mov	[edx+8], ebx
		jmp	loc_6FFD698E
; ---------------------------------------------------------------------------

loc_6FFD6AF8:				; CODE XREF: sub_6FFD6980+13Cj
		mov	esi, [edx+4]
		mov	ebx, [edx+8]
		jmp	short loc_6FFD6AC4
; ---------------------------------------------------------------------------

loc_6FFD6B00:				; CODE XREF: sub_6FFD6980+106j
		mov	ecx, [eax+14h]
		jmp	short loc_6FFD6ABA
; ---------------------------------------------------------------------------

loc_6FFD6B05:				; CODE XREF: sub_6FFD6980+82j
		cmp	cl, 5Fh
		jz	loc_6FFD6A7D
		lea	ebx, [ecx-41h]
		cmp	bl, 19h
		jbe	loc_6FFD6A0D
		jmp	loc_6FFD69A3
sub_6FFD6980	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6FFD6B20	proc near		; CODE XREF: sub_6FFD8C50+120p
					; sub_6FFD90B0+CBp ...

var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_10		= dword	ptr -10h

		push	ebx
		mov	ebx, edx
		sub	esp, 28h
		mov	ecx, [eax+104h]
		cmp	ecx, 0FFh
		lea	edx, [ecx+1]
		jz	short loc_6FFD6B50

loc_6FFD6B37:				; CODE XREF: sub_6FFD6B20+75j
		mov	[eax+ecx+4], bl
		mov	[eax+104h], edx
		mov	[eax+108h], bl
		add	esp, 28h
		pop	ebx
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6FFD6B50:				; CODE XREF: sub_6FFD6B20+15j
		mov	edx, [eax+110h]
		mov	byte ptr [eax+103h], 0
		mov	[esp+2Ch+var_10], eax
		mov	[esp+2Ch+var_28], 0FFh
		mov	[esp+2Ch+var_24], edx
		lea	edx, [eax+4]
		mov	[esp+2Ch+var_2C], edx
		call	dword ptr [eax+10Ch]
		mov	eax, [esp+2Ch+var_10]
		mov	edx, 1
		xor	ecx, ecx
		mov	dword ptr [eax+104h], 0
		add	dword ptr [eax+124h], 1
		jmp	short loc_6FFD6B37
sub_6FFD6B20	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6FFD6BA0	proc near		; CODE XREF: sub_6FFD6BA0+17p
					; sub_6FFD90B0+FDp
		push	esi
		mov	esi, eax
		push	ebx
		mov	ebx, edx
		sub	esp, 4
		test	edx, edx
		jz	short loc_6FFD6BC7 ; jumptable 6FFD6BD2	cases 0,6,22,35,43,56,60

loc_6FFD6BAD:				; CODE XREF: sub_6FFD6BA0+25j
		cmp	dword ptr [ebx], 3Ch ; switch 61 cases
		jbe	short loc_6FFD6BD0

loc_6FFD6BB2:				; CODE XREF: sub_6FFD6BA0+32j
					; DATA XREF: .rdata:off_6FFF8654o
		mov	edx, [ebx+4]	; jumptable 6FFD6BD2 default case
		mov	eax, esi
		call	sub_6FFD6BA0
		test	eax, eax
		jnz	short loc_6FFD6BC9

loc_6FFD6BC0:				; CODE XREF: sub_6FFD6BA0+32j
					; DATA XREF: .rdata:off_6FFF8654o
		mov	ebx, [ebx+8]	; jumptable 6FFD6BD2 cases 7,8,44
		test	ebx, ebx
		jnz	short loc_6FFD6BAD

loc_6FFD6BC7:				; CODE XREF: sub_6FFD6BA0+Bj
					; sub_6FFD6BA0+32j ...
		xor	eax, eax	; jumptable 6FFD6BD2 cases 0,6,22,35,43,56,60

loc_6FFD6BC9:				; CODE XREF: sub_6FFD6BA0+1Ej
					; sub_6FFD6BA0+87j ...
		add	esp, 4
		pop	ebx
		pop	esi
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6FFD6BD0:				; CODE XREF: sub_6FFD6BA0+10j
		mov	eax, [ebx]
		jmp	ds:off_6FFF8654[eax*4] ; switch	jump
; ---------------------------------------------------------------------------
		align 10h

loc_6FFD6BE0:				; CODE XREF: sub_6FFD6BA0+32j
					; DATA XREF: .rdata:off_6FFF8654o
		mov	eax, [esi+114h]	; jumptable 6FFD6BD2 case 5
		test	eax, eax
		jz	short loc_6FFD6C32
		mov	eax, [eax+4]
		mov	edx, [ebx+4]
		mov	eax, [eax+8]
		test	eax, eax
		jnz	short loc_6FFD6C0E
		jmp	short loc_6FFD6BC7 ; jumptable 6FFD6BD2	cases 0,6,22,35,43,56,60
; ---------------------------------------------------------------------------
		align 10h

loc_6FFD6C00:				; CODE XREF: sub_6FFD6BA0+71j
		test	edx, edx
		jle	short loc_6FFD6C15
		mov	eax, [eax+8]
		sub	edx, 1
		test	eax, eax
		jz	short loc_6FFD6BC7 ; jumptable 6FFD6BD2	cases 0,6,22,35,43,56,60

loc_6FFD6C0E:				; CODE XREF: sub_6FFD6BA0+55j
		cmp	dword ptr [eax], 2Ah
		jz	short loc_6FFD6C00
		jmp	short loc_6FFD6BC7 ; jumptable 6FFD6BD2	cases 0,6,22,35,43,56,60
; ---------------------------------------------------------------------------

loc_6FFD6C15:				; CODE XREF: sub_6FFD6BA0+62j
		test	eax, eax
		jz	short loc_6FFD6BC7 ; jumptable 6FFD6BD2	cases 0,6,22,35,43,56,60
		test	edx, edx
		nop
		lea	esi, [esi+0]
		jnz	short loc_6FFD6BC7 ; jumptable 6FFD6BD2	cases 0,6,22,35,43,56,60
		mov	eax, [eax+4]
		test	eax, eax
		jz	short loc_6FFD6BC9
		cmp	dword ptr [eax], 2Ah
		jnz	short loc_6FFD6BC7 ; jumptable 6FFD6BD2	cases 0,6,22,35,43,56,60
		xchg	ax, ax
		jmp	short loc_6FFD6BC9
; ---------------------------------------------------------------------------

loc_6FFD6C32:				; CODE XREF: sub_6FFD6BA0+48j
		mov	dword ptr [esi+11Ch], 1
		lea	esi, [esi+0]
		jmp	short loc_6FFD6BC9
sub_6FFD6BA0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6FFD6C50	proc near		; CODE XREF: sub_6FFD7060+278p
					; sub_6FFD7060+2E0p ...

var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4

		sub	esp, 10h
		mov	[esp+10h+var_10], ebx
		mov	ebx, eax
		mov	[esp+10h+var_C], esi
		mov	[esp+10h+var_8], edi
		mov	[esp+10h+var_4], ebp
		call	sub_6FFD67B0
		xor	ecx, ecx
		test	eax, eax
		jle	short loc_6FFD6CC9
		mov	ebp, [ebx+0Ch]
		mov	esi, [ebx+4]
		sub	esi, ebp
		cmp	eax, esi
		jg	short loc_6FFD6CC6
		test	byte ptr [ebx+8], 4
		lea	ecx, [ebp+eax+0]
		mov	[ebx+0Ch], ecx
		jz	short loc_6FFD6C8D
		cmp	byte ptr [ecx],	24h
		jz	short loc_6FFD6CE0

loc_6FFD6C8D:				; CODE XREF: sub_6FFD6C50+36j
					; sub_6FFD6C50+96j
		cmp	eax, 9
		jle	short loc_6FFD6CB9
		mov	edi, offset a_global_ ;	"_GLOBAL_"
		mov	ecx, 8
		mov	esi, ebp
		repe cmpsb
		jnz	short loc_6FFD6CB9
		movzx	ecx, byte ptr [ebp+8]
		lea	esi, [ebp+8]
		cmp	cl, 5Fh
		jz	short loc_6FFD6CB3
		cmp	cl, 2Eh
		jnz	short loc_6FFD6CE8

loc_6FFD6CB3:				; CODE XREF: sub_6FFD6C50+5Cj
					; sub_6FFD6C50+A0j
		cmp	byte ptr [esi+1], 4Eh
		jz	short loc_6FFD6CF2

loc_6FFD6CB9:				; CODE XREF: sub_6FFD6C50+40j
					; sub_6FFD6C50+50j ...
		mov	ecx, eax
		mov	edx, ebp
		mov	eax, ebx
		call	sub_6FFD6750
		mov	ecx, eax

loc_6FFD6CC6:				; CODE XREF: sub_6FFD6C50+29j
					; sub_6FFD6C50+C0j
		mov	[ebx+2Ch], ecx

loc_6FFD6CC9:				; CODE XREF: sub_6FFD6C50+1Dj
		mov	eax, ecx
		mov	ebx, [esp+10h+var_10]
		mov	esi, [esp+10h+var_C]
		mov	edi, [esp+10h+var_8]
		mov	ebp, [esp+10h+var_4]
		add	esp, 10h
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6FFD6CE0:				; CODE XREF: sub_6FFD6C50+3Bj
		add	ecx, 1
		mov	[ebx+0Ch], ecx
		jmp	short loc_6FFD6C8D
; ---------------------------------------------------------------------------

loc_6FFD6CE8:				; CODE XREF: sub_6FFD6C50+61j
		cmp	cl, 24h
		jnz	short loc_6FFD6CB9
		lea	esi, [esi+0]
		jmp	short loc_6FFD6CB3
; ---------------------------------------------------------------------------

loc_6FFD6CF2:				; CODE XREF: sub_6FFD6C50+67j
		mov	edx, [ebx+30h]
		mov	ecx, 15h
		add	edx, 16h
		sub	edx, eax
		mov	eax, ebx
		mov	[ebx+30h], edx
		mov	edx, offset aAnonymousNames ; "(anonymous namespace)"
		call	sub_6FFD6750
		mov	ecx, eax
		jmp	short loc_6FFD6CC6
sub_6FFD6C50	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6FFD6D20	proc near		; CODE XREF: sub_6FFD6D20+148p
					; sub_6FFD6D20+220p ...

var_3C		= dword	ptr -3Ch
var_20		= dword	ptr -20h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4

		sub	esp, 3Ch
		mov	[esp+3Ch+var_10], ebx
		mov	ebx, eax
		mov	[esp+3Ch+var_C], esi
		mov	[esp+3Ch+var_8], edi
		mov	[esp+3Ch+var_4], ebp
		mov	edx, [eax+0Ch]
		movzx	eax, byte ptr [edx]
		cmp	al, 4Ch
		jz	loc_6FFD6E77
		cmp	al, 54h
		jz	loc_6FFD6ED6
		cmp	al, 73h
		jz	loc_6FFD6DF6
		cmp	al, 66h
		jz	short loc_6FFD6D91

loc_6FFD6D57:				; CODE XREF: sub_6FFD6D20+75j
		sub	eax, 30h
		cmp	al, 9
		ja	loc_6FFD6E0A
		mov	eax, ebx
		call	sub_6FFD7A00
		test	eax, eax
		mov	esi, eax
		jz	short loc_6FFD6D7B
		mov	eax, [ebx+0Ch]
		cmp	byte ptr [eax],	49h
		jz	loc_6FFD6F61

loc_6FFD6D7B:				; CODE XREF: sub_6FFD6D20+4Dj
					; sub_6FFD6D20+C9j ...
		mov	eax, esi
		mov	ebx, [esp+3Ch+var_10]
		mov	esi, [esp+3Ch+var_C]
		mov	edi, [esp+3Ch+var_8]
		mov	ebp, [esp+3Ch+var_4]
		add	esp, 3Ch
		retn
; ---------------------------------------------------------------------------

loc_6FFD6D91:				; CODE XREF: sub_6FFD6D20+35j
		cmp	byte ptr [edx+1], 70h
		jnz	short loc_6FFD6D57
		lea	ecx, [edx+2]
		mov	eax, 1
		mov	[ebx+0Ch], ecx
		cmp	byte ptr [edx+2], 5Fh
		jz	short loc_6FFD6DC6
		mov	eax, ebx
		call	sub_6FFD67B0
		test	eax, eax
		js	loc_6FFD6E70
		mov	ecx, [ebx+0Ch]
		cmp	byte ptr [ecx],	5Fh
		jnz	loc_6FFD6E70
		add	eax, 2

loc_6FFD6DC6:				; CODE XREF: sub_6FFD6D20+86j
		mov	edx, [ebx+14h]
		add	ecx, 1
		cmp	edx, [ebx+18h]
		mov	[ebx+0Ch], ecx
		jge	loc_6FFD6E70
		lea	esi, [edx+edx*2]
		add	edx, 1
		shl	esi, 2
		add	esi, [ebx+10h]
		mov	[ebx+14h], edx
		test	esi, esi
		jz	short loc_6FFD6D7B
		mov	dword ptr [esi], 6
		mov	[esi+4], eax
		jmp	short loc_6FFD6D7B
; ---------------------------------------------------------------------------

loc_6FFD6DF6:				; CODE XREF: sub_6FFD6D20+2Dj
		movzx	eax, byte ptr [edx+1]
		cmp	al, 72h
		jz	loc_6FFD6EF0
		cmp	al, 70h
		jz	loc_6FFD6F38

loc_6FFD6E0A:				; CODE XREF: sub_6FFD6D20+3Cj
		mov	eax, ebx
		call	sub_6FFD7880
		test	eax, eax
		mov	ebp, eax
		jz	short loc_6FFD6E70
		mov	eax, [eax]
		cmp	eax, 2Bh
		jz	short loc_6FFD6E91
		cmp	eax, 2Ch
		jz	loc_6FFD6F30
		cmp	eax, 2Dh
		jz	short loc_6FFD6E59
		cmp	eax, 2Bh
		nop
		jnz	short loc_6FFD6E70
		mov	eax, [ebp+4]

loc_6FFD6E35:				; CODE XREF: sub_6FFD6D20+191j
		mov	edx, [eax+0Ch]
		mov	eax, 2Bh

loc_6FFD6E3D:				; CODE XREF: sub_6FFD6D20+213j
		cmp	edx, 2
		jz	loc_6FFD6FD3
		cmp	edx, 3
		jz	loc_6FFD6F80
		cmp	edx, 1
		jnz	short loc_6FFD6E70
		cmp	eax, 2Dh
		jnz	short loc_6FFD6E66

loc_6FFD6E59:				; CODE XREF: sub_6FFD6D20+10Aj
		mov	eax, [ebx+0Ch]
		cmp	byte ptr [eax],	5Fh
		nop
		jz	loc_6FFD704C

loc_6FFD6E66:				; CODE XREF: sub_6FFD6D20+137j
		mov	eax, ebx
		call	sub_6FFD6D20
		jmp	short loc_6FFD6EBE
; ---------------------------------------------------------------------------
		align 10h

loc_6FFD6E70:				; CODE XREF: sub_6FFD6D20+91j
					; sub_6FFD6D20+9Dj ...
		xor	esi, esi
		jmp	loc_6FFD6D7B
; ---------------------------------------------------------------------------

loc_6FFD6E77:				; CODE XREF: sub_6FFD6D20+1Dj
		mov	eax, ebx
		mov	esi, [esp+3Ch+var_C]
		mov	ebx, [esp+3Ch+var_10]
		mov	edi, [esp+3Ch+var_8]
		mov	ebp, [esp+3Ch+var_4]
		add	esp, 3Ch
		jmp	sub_6FFD7BC0
; ---------------------------------------------------------------------------

loc_6FFD6E91:				; CODE XREF: sub_6FFD6D20+FCj
		mov	edx, [ebp+4]
		mov	edi, offset aSt	; "st"
		mov	ecx, 3
		mov	eax, [ebx+30h]
		add	eax, [edx+8]
		sub	eax, 2
		mov	[ebx+30h], eax
		mov	eax, [ebp+4]
		mov	esi, [eax]
		repe cmpsb
		jnz	loc_6FFD6E35
		mov	eax, ebx
		call	sub_6FFD7060

loc_6FFD6EBE:				; CODE XREF: sub_6FFD6D20+14Dj
					; sub_6FFD6D20+339j
		mov	[esp+3Ch+var_3C], eax
		mov	ecx, ebp
		mov	edx, 2Eh
		mov	eax, ebx
		call	sub_6FFD66D0
		mov	esi, eax
		jmp	loc_6FFD6D7B
; ---------------------------------------------------------------------------

loc_6FFD6ED6:				; CODE XREF: sub_6FFD6D20+25j
		mov	eax, ebx
		mov	esi, [esp+3Ch+var_C]
		mov	ebx, [esp+3Ch+var_10]
		mov	edi, [esp+3Ch+var_8]
		mov	ebp, [esp+3Ch+var_4]
		add	esp, 3Ch
		jmp	sub_6FFD6910
; ---------------------------------------------------------------------------

loc_6FFD6EF0:				; CODE XREF: sub_6FFD6D20+DCj
		add	edx, 2
		mov	eax, ebx
		mov	[ebx+0Ch], edx
		call	sub_6FFD7060
		mov	esi, eax
		mov	eax, ebx
		call	sub_6FFD7A00
		mov	edi, eax
		mov	eax, [ebx+0Ch]
		cmp	byte ptr [eax],	49h
		jz	loc_6FFD702C
		mov	[esp+3Ch+var_3C], edi

loc_6FFD6F17:				; CODE XREF: sub_6FFD6D20+327j
		mov	ecx, esi
		mov	edx, 1
		mov	eax, ebx
		call	sub_6FFD66D0
		mov	esi, eax
		jmp	loc_6FFD6D7B
; ---------------------------------------------------------------------------
		align 10h

loc_6FFD6F30:				; CODE XREF: sub_6FFD6D20+101j
		mov	edx, [ebp+4]
		jmp	loc_6FFD6E3D
; ---------------------------------------------------------------------------

loc_6FFD6F38:				; CODE XREF: sub_6FFD6D20+E4j
		add	edx, 2
		mov	eax, ebx
		mov	[ebx+0Ch], edx
		call	sub_6FFD6D20
		mov	edx, 3Ch
		mov	[esp+3Ch+var_3C], 0
		mov	ecx, eax
		mov	eax, ebx
		call	sub_6FFD66D0
		mov	esi, eax
		jmp	loc_6FFD6D7B
; ---------------------------------------------------------------------------

loc_6FFD6F61:				; CODE XREF: sub_6FFD6D20+55j
		mov	eax, ebx
		call	sub_6FFD7CF0
		mov	ecx, esi
		mov	edx, 4
		mov	[esp+3Ch+var_3C], eax
		mov	eax, ebx
		call	sub_6FFD66D0
		mov	esi, eax
		jmp	loc_6FFD6D7B
; ---------------------------------------------------------------------------

loc_6FFD6F80:				; CODE XREF: sub_6FFD6D20+129j
		mov	eax, ebx
		call	sub_6FFD6D20
		mov	esi, eax
		mov	eax, ebx
		call	sub_6FFD6D20
		mov	edi, eax
		mov	eax, ebx
		call	sub_6FFD6D20
		mov	ecx, edi
		mov	edx, 33h
		mov	[esp+3Ch+var_3C], eax
		mov	eax, ebx
		call	sub_6FFD66D0
		mov	ecx, esi
		mov	edx, 32h
		mov	[esp+3Ch+var_3C], eax
		mov	eax, ebx
		call	sub_6FFD66D0
		mov	ecx, ebp
		mov	edx, 31h
		mov	[esp+3Ch+var_3C], eax
		mov	eax, ebx
		call	sub_6FFD66D0
		mov	esi, eax
		jmp	loc_6FFD6D7B
; ---------------------------------------------------------------------------

loc_6FFD6FD3:				; CODE XREF: sub_6FFD6D20+120j
		mov	eax, ebx
		mov	edi, offset aCl	; "cl"
		call	sub_6FFD6D20
		mov	ecx, 3
		mov	[esp+3Ch+var_20], eax
		mov	eax, [ebp+4]
		mov	esi, [eax]
		repe cmpsb
		jnz	short loc_6FFD7023
		mov	eax, ebx
		call	sub_6FFD8660

loc_6FFD6FF8:				; CODE XREF: sub_6FFD6D20+30Aj
		mov	ecx, [esp+3Ch+var_20]
		mov	edx, 30h
		mov	[esp+3Ch+var_3C], eax
		mov	eax, ebx
		call	sub_6FFD66D0
		mov	ecx, ebp
		mov	edx, 2Fh
		mov	[esp+3Ch+var_3C], eax
		mov	eax, ebx
		call	sub_6FFD66D0
		mov	esi, eax
		jmp	loc_6FFD6D7B
; ---------------------------------------------------------------------------

loc_6FFD7023:				; CODE XREF: sub_6FFD6D20+2CFj
		mov	eax, ebx
		call	sub_6FFD6D20
		jmp	short loc_6FFD6FF8
; ---------------------------------------------------------------------------

loc_6FFD702C:				; CODE XREF: sub_6FFD6D20+1EEj
		mov	eax, ebx
		call	sub_6FFD7CF0
		mov	ecx, edi
		mov	edx, 4
		mov	[esp+3Ch+var_3C], eax
		mov	eax, ebx
		call	sub_6FFD66D0
		mov	[esp+3Ch+var_3C], eax
		jmp	loc_6FFD6F17
; ---------------------------------------------------------------------------

loc_6FFD704C:				; CODE XREF: sub_6FFD6D20+140j
		add	eax, 1
		mov	[ebx+0Ch], eax
		mov	eax, ebx
		call	sub_6FFD8660
		jmp	loc_6FFD6EBE
sub_6FFD6D20	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6FFD7060	proc near		; CODE XREF: sub_6FFD6D20+199p
					; sub_6FFD6D20+1D8p ...

var_3C		= dword	ptr -3Ch
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4

		sub	esp, 3Ch
		mov	[esp+3Ch+var_10], ebx
		mov	ebx, eax
		mov	[esp+3Ch+var_C], esi
		mov	[esp+3Ch+var_8], edi
		mov	[esp+3Ch+var_4], ebp
		mov	ecx, [eax+0Ch]
		movzx	eax, byte ptr [ecx]
		cmp	al, 56h
		jz	short loc_6FFD70B2
		cmp	al, 72h
		jz	short loc_6FFD70B2
		cmp	al, 4Bh
		jz	short loc_6FFD70B2
		lea	edx, [eax-30h]
		cmp	dl, 4Ah		; switch 75 cases
		lea	esi, [esi+0]
		jbe	short loc_6FFD70A8

loc_6FFD7092:				; CODE XREF: sub_6FFD7060+4Bj
					; sub_6FFD7060+63j ...
		xor	eax, eax	; jumptable 6FFD70AB default case

loc_6FFD7094:				; CODE XREF: sub_6FFD7060+96j
					; sub_6FFD7060+A7j ...
		mov	ebx, [esp+3Ch+var_10]
		mov	esi, [esp+3Ch+var_C]
		mov	edi, [esp+3Ch+var_8]
		mov	ebp, [esp+3Ch+var_4]
		add	esp, 3Ch
		retn
; ---------------------------------------------------------------------------

loc_6FFD70A8:				; CODE XREF: sub_6FFD7060+30j
		movzx	edx, dl
		jmp	ds:off_6FFF8770[edx*4] ; switch	jump
; ---------------------------------------------------------------------------

loc_6FFD70B2:				; CODE XREF: sub_6FFD7060+1Dj
					; sub_6FFD7060+21j ...
		xor	ecx, ecx
		mov	eax, ebx
		lea	edx, [esp+3Ch+var_20]
		call	sub_6FFD6870
		test	eax, eax
		mov	esi, eax
		jz	short loc_6FFD7092 ; jumptable 6FFD70AB	default	case
		mov	eax, ebx
		call	sub_6FFD7060
		test	eax, eax
		mov	[esi], eax
		jz	short loc_6FFD7092 ; jumptable 6FFD70AB	default	case
		mov	eax, [esp+3Ch+var_20]
		test	eax, eax
		jz	short loc_6FFD7092 ; jumptable 6FFD70AB	default	case
		lea	esi, [esi+0]

loc_6FFD70E0:				; CODE XREF: sub_6FFD7060+A5j
					; sub_6FFD7060+6A8j
		mov	edx, [ebx+20h]
		cmp	edx, [ebx+24h]
		jge	short loc_6FFD7092 ; jumptable 6FFD70AB	default	case
		mov	ecx, [ebx+1Ch]
		add	dword ptr [ebx+20h], 1
		mov	[ecx+edx*4], eax
		mov	eax, [esp+3Ch+var_20]
		jmp	short loc_6FFD7094
; ---------------------------------------------------------------------------

loc_6FFD70F8:				; CODE XREF: sub_6FFD7060+4Bj
					; DATA XREF: .rdata:off_6FFF8770o
		mov	eax, ebx	; jumptable 6FFD70AB cases 0-9,30,42
		call	sub_6FFD7DF0
		mov	[esp+3Ch+var_20], eax

loc_6FFD7103:				; CODE XREF: sub_6FFD7060+D6j
					; sub_6FFD7060+12Bj ...
		test	eax, eax
		jnz	short loc_6FFD70E0
		jmp	short loc_6FFD7094
; ---------------------------------------------------------------------------
		align 10h

loc_6FFD7110:				; CODE XREF: sub_6FFD7060+4Bj
					; DATA XREF: .rdata:off_6FFF8770o
		add	ecx, 1		; jumptable 6FFD70AB case 19
		mov	eax, ebx
		mov	[ebx+0Ch], ecx
		call	sub_6FFD7060
		mov	edx, 21h
		mov	[esp+3Ch+var_3C], 0
		mov	ecx, eax
		mov	eax, ebx
		call	sub_6FFD66D0
		mov	[esp+3Ch+var_20], eax
		jmp	short loc_6FFD7103
; ---------------------------------------------------------------------------

loc_6FFD7138:				; CODE XREF: sub_6FFD7060+4Bj
					; DATA XREF: .rdata:off_6FFF8770o
		lea	eax, [ecx+1]	; jumptable 6FFD70AB case 20
		mov	[ebx+0Ch], eax
		movzx	eax, byte ptr [ecx+1]
		test	al, al
		jz	loc_6FFD7092	; jumptable 6FFD70AB default case
		sub	eax, 46h
		add	ecx, 2
		cmp	al, 2Eh		; switch 47 cases
		mov	[ebx+0Ch], ecx
		ja	loc_6FFD7092	; jumptable 6FFD70AB default case
		movzx	eax, al
		jmp	ds:off_6FFF889C[eax*4] ; switch	jump
; ---------------------------------------------------------------------------

loc_6FFD7165:				; CODE XREF: sub_6FFD7060+4Bj
					; DATA XREF: .rdata:off_6FFF8770o
		add	ecx, 1		; jumptable 6FFD70AB case 23
		mov	eax, ebx
		mov	[ebx+0Ch], ecx
		call	sub_6FFD7060
		mov	edx, 22h
		mov	[esp+3Ch+var_3C], 0
		mov	ecx, eax
		mov	eax, ebx
		call	sub_6FFD66D0
		mov	[esp+3Ch+var_20], eax
		jmp	loc_6FFD7103
; ---------------------------------------------------------------------------

loc_6FFD7190:				; CODE XREF: sub_6FFD7060+4Bj
					; DATA XREF: .rdata:off_6FFF8770o
		add	ecx, 1		; jumptable 6FFD70AB case 31
		mov	eax, ebx
		mov	[ebx+0Ch], ecx
		call	sub_6FFD7060
		mov	edx, 20h
		mov	[esp+3Ch+var_3C], 0
		mov	ecx, eax
		mov	eax, ebx
		call	sub_6FFD66D0
		mov	[esp+3Ch+var_20], eax
		jmp	loc_6FFD7103
; ---------------------------------------------------------------------------
		align 10h

loc_6FFD71C0:				; CODE XREF: sub_6FFD7060+4Bj
					; DATA XREF: .rdata:off_6FFF8770o
		add	ecx, 1		; jumptable 6FFD70AB case 32
		mov	eax, ebx
		mov	[ebx+0Ch], ecx
		call	sub_6FFD7060
		mov	edx, 1Eh
		mov	[esp+3Ch+var_3C], 0
		mov	ecx, eax
		mov	eax, ebx
		call	sub_6FFD66D0
		mov	[esp+3Ch+var_20], eax
		jmp	loc_6FFD7103
; ---------------------------------------------------------------------------
		align 10h

loc_6FFD71F0:				; CODE XREF: sub_6FFD7060+4Bj
					; DATA XREF: .rdata:off_6FFF8770o
		add	ecx, 1		; jumptable 6FFD70AB case 34
		mov	eax, ebx
		mov	[ebx+0Ch], ecx
		call	sub_6FFD7060
		mov	edx, 1Fh
		mov	[esp+3Ch+var_3C], 0
		mov	ecx, eax
		mov	eax, ebx
		call	sub_6FFD66D0
		mov	[esp+3Ch+var_20], eax
		jmp	loc_6FFD7103
; ---------------------------------------------------------------------------
		align 10h

loc_6FFD7220:				; CODE XREF: sub_6FFD7060+4Bj
					; DATA XREF: .rdata:off_6FFF8770o
		movzx	eax, byte ptr [ecx+1] ;	jumptable 6FFD70AB case	35
		lea	edx, [eax-30h]
		cmp	dl, 9
		jbe	short loc_6FFD723B
		cmp	al, 5Fh
		jz	short loc_6FFD723B
		sub	eax, 41h
		cmp	al, 19h
		ja	loc_6FFD76F2

loc_6FFD723B:				; CODE XREF: sub_6FFD7060+1CAj
					; sub_6FFD7060+1CEj
		xor	edx, edx
		mov	eax, ebx
		call	sub_6FFD6980
		mov	edx, [ebx+0Ch]
		mov	[esp+3Ch+var_20], eax
		cmp	byte ptr [edx],	49h
		jnz	loc_6FFD7094
		mov	eax, ebx
		call	sub_6FFD7CF0
		mov	ecx, [esp+3Ch+var_20]
		mov	edx, 4
		mov	[esp+3Ch+var_3C], eax
		mov	eax, ebx
		call	sub_6FFD66D0
		mov	[esp+3Ch+var_20], eax
		jmp	loc_6FFD7103
; ---------------------------------------------------------------------------

loc_6FFD7277:				; CODE XREF: sub_6FFD7060+4Bj
					; DATA XREF: .rdata:off_6FFF8770o
		mov	eax, ebx	; jumptable 6FFD70AB case 36
		call	sub_6FFD6910
		mov	edx, [ebx+0Ch]
		mov	[esp+3Ch+var_20], eax
		cmp	byte ptr [edx],	49h
		jnz	loc_6FFD7103
		test	eax, eax
		jz	loc_6FFD7094
		mov	edx, [ebx+20h]
		cmp	edx, [ebx+24h]
		jge	loc_6FFD7092	; jumptable 6FFD70AB default case
		mov	ecx, [ebx+1Ch]
		add	dword ptr [ebx+20h], 1
		mov	[ecx+edx*4], eax
		mov	eax, ebx
		call	sub_6FFD7CF0
		mov	ecx, [esp+3Ch+var_20]
		mov	edx, 4
		mov	[esp+3Ch+var_3C], eax
		mov	eax, ebx
		call	sub_6FFD66D0

loc_6FFD72C6:				; CODE XREF: sub_6FFD7060+29Bj
					; sub_6FFD7060+330j ...
		mov	[esp+3Ch+var_20], eax
		jmp	loc_6FFD7103
; ---------------------------------------------------------------------------
		align 10h

loc_6FFD72D0:				; CODE XREF: sub_6FFD7060+4Bj
					; DATA XREF: .rdata:off_6FFF8770o
		add	ecx, 1		; jumptable 6FFD70AB case 37
		mov	eax, ebx
		mov	[ebx+0Ch], ecx
		call	sub_6FFD6C50
		mov	esi, eax
		mov	[esp+3Ch+var_20], eax
		mov	eax, ebx
		call	sub_6FFD7060
		mov	edx, 1Dh
		mov	[esp+3Ch+var_3C], esi
		mov	ecx, eax
		mov	eax, ebx
		call	sub_6FFD66D0
		jmp	short loc_6FFD72C6
; ---------------------------------------------------------------------------
		align 10h

loc_6FFD7300:				; CODE XREF: sub_6FFD7060+4Bj
					; DATA XREF: .rdata:off_6FFF8770o
		movsx	eax, al		; jumptable 6FFD70AB cases 49-58,60-63,67,68,70-74
		lea	eax, [eax+eax*4]
		lea	edx, (off_6FFF8770+9Ch)[eax*4]
		test	edx, edx
		jz	loc_6FFD772D
		mov	ecx, [ebx+14h]
		cmp	ecx, [ebx+18h]
		jl	loc_6FFD76C0
		mov	edx, large ds:4
		xor	eax, eax

loc_6FFD7329:				; CODE XREF: sub_6FFD7060+680j
					; sub_6FFD7060+6D2j ...
		mov	edx, [edx+4]
		add	[ebx+30h], edx
		add	dword ptr [ebx+0Ch], 1
		jmp	loc_6FFD7094
; ---------------------------------------------------------------------------

loc_6FFD7338:				; CODE XREF: sub_6FFD7060+4Bj
					; DATA XREF: .rdata:off_6FFF8770o
		add	ecx, 1		; jumptable 6FFD70AB case 69
		mov	eax, ebx
		mov	[ebx+0Ch], ecx
		call	sub_6FFD6C50
		mov	edx, 24h
		mov	[esp+3Ch+var_3C], 0
		mov	ecx, eax
		mov	eax, ebx
		call	sub_6FFD66D0
		mov	[esp+3Ch+var_20], eax
		jmp	loc_6FFD7103
; ---------------------------------------------------------------------------

loc_6FFD7363:				; CODE XREF: sub_6FFD7060+4Bj
					; DATA XREF: .rdata:off_6FFF8770o
		add	ecx, 1		; jumptable 6FFD70AB case 29
		mov	eax, ebx
		mov	[ebx+0Ch], ecx
		lea	esi, [esp+3Ch+var_24]
		call	sub_6FFD7060
		mov	ecx, 1
		mov	edx, esi
		mov	edi, eax
		mov	eax, ebx
		call	sub_6FFD6870
		test	eax, eax
		mov	ebp, eax
		jnz	loc_6FFD7433

loc_6FFD738E:				; CODE XREF: sub_6FFD7060+36Fj
					; sub_6FFD7060+377j ...
		xor	eax, eax
		jmp	loc_6FFD72C6
; ---------------------------------------------------------------------------

loc_6FFD7395:				; CODE XREF: sub_6FFD7060+4Bj
					; DATA XREF: .rdata:off_6FFF8770o
		lea	edx, [ecx+1]	; jumptable 6FFD70AB case 17
		xor	esi, esi
		mov	[ebx+0Ch], edx
		movzx	eax, byte ptr [ecx+1]
		cmp	al, 5Fh
		jz	short loc_6FFD73D9
		sub	eax, 30h
		cmp	al, 9
		ja	loc_6FFD7715
		mov	ecx, edx

loc_6FFD73B2:				; CODE XREF: sub_6FFD7060+360j
		add	ecx, 1
		mov	[ebx+0Ch], ecx
		movzx	eax, byte ptr [ecx]
		sub	eax, 30h
		cmp	al, 9
		jbe	short loc_6FFD73B2
		sub	ecx, edx
		mov	eax, ebx
		call	sub_6FFD6750
		test	eax, eax
		mov	esi, eax
		jz	short loc_6FFD738E

loc_6FFD73D1:				; CODE XREF: sub_6FFD7060+6C0j
		mov	edx, [ebx+0Ch]
		cmp	byte ptr [edx],	5Fh
		jnz	short loc_6FFD738E

loc_6FFD73D9:				; CODE XREF: sub_6FFD7060+343j
		add	edx, 1
		mov	eax, ebx
		mov	[ebx+0Ch], edx
		call	sub_6FFD7060
		mov	ecx, esi
		mov	edx, 26h
		mov	[esp+3Ch+var_3C], eax
		mov	eax, ebx
		call	sub_6FFD66D0
		jmp	loc_6FFD72C6
; ---------------------------------------------------------------------------
		align 10h

loc_6FFD7400:				; CODE XREF: sub_6FFD7060+4Bj
					; DATA XREF: .rdata:off_6FFF8770o
		lea	eax, [ecx+1]	; jumptable 6FFD70AB case 22
		mov	[ebx+0Ch], eax
		cmp	byte ptr [ecx+1], 59h
		jz	loc_6FFD7747

loc_6FFD7410:				; CODE XREF: sub_6FFD7060+6EDj
		mov	edx, 1
		mov	eax, ebx
		call	sub_6FFD7790
		mov	edx, [ebx+0Ch]
		cmp	byte ptr [edx],	45h
		jnz	loc_6FFD738E
		add	edx, 1
		mov	[ebx+0Ch], edx
		jmp	loc_6FFD72C6
; ---------------------------------------------------------------------------

loc_6FFD7433:				; CODE XREF: sub_6FFD7060+328j
		mov	eax, ebx
		call	sub_6FFD7060
		test	eax, eax
		mov	[ebp+0], eax
		jz	loc_6FFD738E
		cmp	ebp, esi
		jz	short loc_6FFD7452
		cmp	dword ptr [eax], 25h
		jnz	loc_6FFD7752

loc_6FFD7452:				; CODE XREF: sub_6FFD7060+3E7j
					; sub_6FFD7060+714j
		mov	eax, [esp+3Ch+var_24]
		mov	ecx, edi
		mov	edx, 27h
		mov	[esp+3Ch+var_3C], eax
		mov	eax, ebx
		call	sub_6FFD66D0
		jmp	loc_6FFD72C6
; ---------------------------------------------------------------------------
		align 10h

loc_6FFD7470:				; CODE XREF: sub_6FFD7060+FEj
					; DATA XREF: .rdata:off_6FFF889Co
		mov	edx, [ebx+14h]	; jumptable 6FFD715E case 45
		cmp	edx, [ebx+18h]
		jge	loc_6FFD76E5
		lea	eax, [edx+edx*2]
		add	edx, 1
		shl	eax, 2
		add	eax, [ebx+10h]
		mov	[ebx+14h], edx
		test	eax, eax
		jz	loc_6FFD7779
		mov	dword ptr [eax], 23h
		mov	edx, offset off_6FFF91F8
		mov	dword ptr [eax+4], offset off_6FFF91F8

loc_6FFD74A5:				; CODE XREF: sub_6FFD7060+4A6j
					; sub_6FFD7060+4DDj ...
		mov	edx, [edx+4]
		add	[ebx+30h], edx
		jmp	loc_6FFD7094
; ---------------------------------------------------------------------------

loc_6FFD74B0:				; CODE XREF: sub_6FFD7060+FEj
					; DATA XREF: .rdata:off_6FFF889Co
		mov	eax, ebx	; jumptable 6FFD715E case 42
		call	sub_6FFD7060
		mov	edx, 3Ch
		mov	[esp+3Ch+var_3C], 0
		mov	ecx, eax
		mov	eax, ebx
		call	sub_6FFD66D0
		jmp	loc_6FFD7094
; ---------------------------------------------------------------------------

loc_6FFD74D1:				; CODE XREF: sub_6FFD7060+FEj
					; DATA XREF: .rdata:off_6FFF889Co
		mov	edx, [ebx+14h]	; jumptable 6FFD715E case 35
		cmp	edx, [ebx+18h]
		jge	loc_6FFD76E5
		lea	eax, [edx+edx*2]
		add	edx, 1
		shl	eax, 2
		add	eax, [ebx+10h]
		mov	[ebx+14h], edx
		test	eax, eax
		jz	loc_6FFD7779
		mov	dword ptr [eax], 23h
		mov	edx, offset off_6FFF920C
		mov	dword ptr [eax+4], offset off_6FFF920C
		jmp	short loc_6FFD74A5
; ---------------------------------------------------------------------------

loc_6FFD7508:				; CODE XREF: sub_6FFD7060+FEj
					; DATA XREF: .rdata:off_6FFF889Co
		mov	edx, [ebx+14h]	; jumptable 6FFD715E case 31
		cmp	edx, [ebx+18h]
		jge	loc_6FFD76E5
		lea	eax, [edx+edx*2]
		add	edx, 1
		shl	eax, 2
		add	eax, [ebx+10h]
		mov	[ebx+14h], edx
		test	eax, eax
		jz	loc_6FFD7779
		mov	dword ptr [eax], 23h
		mov	edx, offset off_6FFF91D0
		mov	dword ptr [eax+4], offset off_6FFF91D0
		jmp	loc_6FFD74A5
; ---------------------------------------------------------------------------

loc_6FFD7542:				; CODE XREF: sub_6FFD7060+FEj
					; DATA XREF: .rdata:off_6FFF889Co
		mov	edx, [ebx+14h]	; jumptable 6FFD715E case 30
		cmp	edx, [ebx+18h]
		jge	loc_6FFD76E5
		lea	eax, [edx+edx*2]
		add	edx, 1
		shl	eax, 2
		add	eax, [ebx+10h]
		mov	[ebx+14h], edx
		test	eax, eax
		jz	loc_6FFD7779
		mov	dword ptr [eax], 23h
		mov	edx, offset off_6FFF91BC
		mov	dword ptr [eax+4], offset off_6FFF91BC
		jmp	loc_6FFD74A5
; ---------------------------------------------------------------------------

loc_6FFD757C:				; CODE XREF: sub_6FFD7060+FEj
					; DATA XREF: .rdata:off_6FFF889Co
		mov	eax, ebx	; jumptable 6FFD715E cases 14,46
		call	sub_6FFD6D20
		mov	edx, 39h
		mov	[esp+3Ch+var_3C], 0
		mov	ecx, eax
		mov	eax, ebx
		call	sub_6FFD66D0
		test	eax, eax
		mov	[esp+3Ch+var_20], eax
		jz	loc_6FFD7094
		mov	ecx, [ebx+0Ch]
		movzx	edx, byte ptr [ecx]
		test	dl, dl
		jz	loc_6FFD7092	; jumptable 6FFD70AB default case
		add	ecx, 1
		cmp	dl, 45h
		mov	[ebx+0Ch], ecx
		jnz	loc_6FFD7092	; jumptable 6FFD70AB default case
		jmp	loc_6FFD7094
; ---------------------------------------------------------------------------

loc_6FFD75C6:				; CODE XREF: sub_6FFD7060+FEj
					; DATA XREF: .rdata:off_6FFF889Co
		mov	eax, [ebx+14h]	; jumptable 6FFD715E case 0
		xor	esi, esi
		cmp	eax, [ebx+18h]
		jge	short loc_6FFD75DF
		lea	esi, [eax+eax*2]
		add	eax, 1
		shl	esi, 2
		add	esi, [ebx+10h]
		mov	[ebx+14h], eax

loc_6FFD75DF:				; CODE XREF: sub_6FFD7060+56Ej
		mov	eax, [ebx+0Ch]
		mov	[esp+3Ch+var_20], esi
		mov	dword ptr [esi], 28h
		movzx	eax, byte ptr [eax]
		sub	eax, 30h
		cmp	al, 9
		setbe	al
		movzx	eax, al
		test	ax, ax
		mov	[esi+8], ax
		jnz	loc_6FFD7737

loc_6FFD7607:				; CODE XREF: sub_6FFD7060+6E2j
		mov	eax, ebx
		call	sub_6FFD7060
		mov	[esi+4], eax
		mov	eax, [esp+3Ch+var_20]
		mov	eax, [eax+4]
		test	eax, eax
		jz	loc_6FFD7092	; jumptable 6FFD70AB default case
		mov	eax, ebx
		call	sub_6FFD67B0
		mov	ecx, [ebx+0Ch]
		xor	edx, edx
		movzx	eax, byte ptr [ecx]
		test	al, al
		jz	short loc_6FFD7640
		add	ecx, 1
		xor	edx, edx
		cmp	al, 73h
		mov	[ebx+0Ch], ecx
		setz	dl

loc_6FFD7640:				; CODE XREF: sub_6FFD7060+5D1j
		mov	eax, [esp+3Ch+var_20]
		mov	[eax+0Ah], dx
		jmp	loc_6FFD7094
; ---------------------------------------------------------------------------

loc_6FFD764D:				; CODE XREF: sub_6FFD7060+FEj
					; DATA XREF: .rdata:off_6FFF889Co
		mov	edx, [ebx+14h]	; jumptable 6FFD715E case 34
		cmp	edx, [ebx+18h]
		jge	loc_6FFD76E5
		lea	eax, [edx+edx*2]
		add	edx, 1
		shl	eax, 2
		add	eax, [ebx+10h]
		mov	[ebx+14h], edx
		test	eax, eax
		jz	loc_6FFD7779
		mov	dword ptr [eax], 23h
		mov	edx, offset off_6FFF91E4
		mov	dword ptr [eax+4], offset off_6FFF91E4
		jmp	loc_6FFD74A5
; ---------------------------------------------------------------------------

loc_6FFD7687:				; CODE XREF: sub_6FFD7060+FEj
					; DATA XREF: .rdata:off_6FFF889Co
		mov	edx, [ebx+14h]	; jumptable 6FFD715E case 32
		cmp	edx, [ebx+18h]
		jge	short loc_6FFD76E5
		lea	eax, [edx+edx*2]
		add	edx, 1
		shl	eax, 2
		add	eax, [ebx+10h]
		mov	[ebx+14h], edx
		test	eax, eax
		jz	loc_6FFD7779
		mov	dword ptr [eax], 23h
		mov	edx, offset off_6FFF91A8
		mov	dword ptr [eax+4], offset off_6FFF91A8
		jmp	loc_6FFD74A5
; ---------------------------------------------------------------------------
		align 10h

loc_6FFD76C0:				; CODE XREF: sub_6FFD7060+2BBj
		lea	eax, [ecx+ecx*2]
		add	ecx, 1
		shl	eax, 2
		add	eax, [ebx+10h]
		mov	[ebx+14h], ecx
		test	eax, eax
		jz	loc_6FFD7781
		mov	dword ptr [eax], 23h
		mov	[eax+4], edx
		jmp	loc_6FFD7329
; ---------------------------------------------------------------------------

loc_6FFD76E5:				; CODE XREF: sub_6FFD7060+416j
					; sub_6FFD7060+477j ...
		mov	edx, large ds:4
		xor	eax, eax
		jmp	loc_6FFD74A5
; ---------------------------------------------------------------------------

loc_6FFD76F2:				; CODE XREF: sub_6FFD7060+1D5j
		mov	eax, ebx
		call	sub_6FFD7DF0
		test	eax, eax
		jz	loc_6FFD7094
		cmp	dword ptr [eax], 16h
		mov	[esp+3Ch+var_20], eax
		jnz	loc_6FFD70E0
		xchg	ax, ax
		jmp	loc_6FFD7094
; ---------------------------------------------------------------------------

loc_6FFD7715:				; CODE XREF: sub_6FFD7060+34Aj
		mov	eax, ebx
		call	sub_6FFD6D20
		test	eax, eax
		mov	esi, eax
		jnz	loc_6FFD73D1
		xor	eax, eax
		jmp	loc_6FFD72C6
; ---------------------------------------------------------------------------

loc_6FFD772D:				; CODE XREF: sub_6FFD7060+2AFj
		mov	edx, [edx+4]
		xor	eax, eax
		jmp	loc_6FFD7329
; ---------------------------------------------------------------------------

loc_6FFD7737:				; CODE XREF: sub_6FFD7060+5A1j
		mov	eax, ebx
		call	sub_6FFD67B0
		mov	esi, [esp+3Ch+var_20]
		jmp	loc_6FFD7607
; ---------------------------------------------------------------------------

loc_6FFD7747:				; CODE XREF: sub_6FFD7060+3AAj
		add	ecx, 2
		mov	[ebx+0Ch], ecx
		jmp	loc_6FFD7410
; ---------------------------------------------------------------------------

loc_6FFD7752:				; CODE XREF: sub_6FFD7060+3ECj
		mov	edx, [esp+3Ch+var_24]
		test	edx, edx
		jz	loc_6FFD738E
		mov	eax, [ebx+20h]
		cmp	eax, [ebx+24h]
		jge	loc_6FFD738E
		mov	ecx, [ebx+1Ch]
		add	dword ptr [ebx+20h], 1
		mov	[ecx+eax*4], edx
		jmp	loc_6FFD7452
; ---------------------------------------------------------------------------

loc_6FFD7779:				; CODE XREF: sub_6FFD7060+42Dj
					; sub_6FFD7060+48Ej ...
		mov	edx, [eax+4]
		jmp	loc_6FFD74A5
; ---------------------------------------------------------------------------

loc_6FFD7781:				; CODE XREF: sub_6FFD7060+671j
		mov	edx, [eax+4]
		jmp	loc_6FFD7329
sub_6FFD7060	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6FFD7790	proc near		; CODE XREF: sub_6FFD7060+3B7p
					; sub_6FFD8100+71p

var_3C		= dword	ptr -3Ch
var_20		= dword	ptr -20h

		push	ebp
		push	edi
		push	esi
		mov	esi, edx
		push	ebx
		mov	ebx, eax
		sub	esp, 2Ch
		mov	edx, [eax+0Ch]
		cmp	byte ptr [edx],	4Ah
		jz	loc_6FFD7840

loc_6FFD77A7:				; CODE XREF: sub_6FFD7790+BBj
		mov	[esp+3Ch+var_20], 0
		lea	ebp, [esp+3Ch+var_20]
		xor	edi, edi
		jmp	short loc_6FFD77BE
; ---------------------------------------------------------------------------

loc_6FFD77B7:				; CODE XREF: sub_6FFD7790+46j
		mov	edx, [ebx+0Ch]
		xor	esi, esi
		mov	edi, eax

loc_6FFD77BE:				; CODE XREF: sub_6FFD7790+25j
		movzx	eax, byte ptr [edx]
		cmp	al, 45h
		jz	short loc_6FFD7801

loc_6FFD77C5:				; CODE XREF: sub_6FFD7790+6Fj
		test	al, al
		jz	short loc_6FFD7801
		mov	eax, ebx
		call	sub_6FFD7060
		test	eax, eax
		jz	short loc_6FFD7830
		test	esi, esi
		jnz	short loc_6FFD77B7
		mov	ecx, eax
		mov	edx, 29h
		mov	eax, ebx
		mov	[esp+3Ch+var_3C], 0
		call	sub_6FFD66D0
		test	eax, eax
		mov	[ebp+0], eax
		jz	short loc_6FFD7830
		mov	edx, [ebx+0Ch]
		lea	ebp, [eax+8]
		movzx	eax, byte ptr [edx]
		cmp	al, 45h
		jnz	short loc_6FFD77C5

loc_6FFD7801:				; CODE XREF: sub_6FFD7790+33j
					; sub_6FFD7790+37j
		mov	eax, [esp+3Ch+var_20]
		test	eax, eax
		jz	short loc_6FFD7830
		mov	edx, [eax+8]
		test	edx, edx
		jz	short loc_6FFD7850

loc_6FFD7810:				; CODE XREF: sub_6FFD7790+C6j
					; sub_6FFD7790+CFj ...
		mov	[esp+3Ch+var_3C], eax
		mov	ecx, edi
		mov	eax, ebx
		mov	edx, 25h
		call	sub_6FFD66D0
		add	esp, 2Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6FFD7830:				; CODE XREF: sub_6FFD7790+42j
					; sub_6FFD7790+62j ...
		add	esp, 2Ch
		xor	eax, eax
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6FFD7840:				; CODE XREF: sub_6FFD7790+11j
		add	edx, 1
		mov	esi, 1
		mov	[eax+0Ch], edx
		jmp	loc_6FFD77A7
; ---------------------------------------------------------------------------

loc_6FFD7850:				; CODE XREF: sub_6FFD7790+7Ej
		mov	edx, [eax+4]
		cmp	dword ptr [edx], 23h
		jnz	short loc_6FFD7810
		mov	edx, [edx+4]
		cmp	dword ptr [edx+10h], 9
		jnz	short loc_6FFD7810
		mov	eax, [edx+4]
		sub	[ebx+30h], eax
		xor	eax, eax
		mov	[esp+3Ch+var_20], 0
		jmp	short loc_6FFD7810
sub_6FFD7790	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6FFD7880	proc near		; CODE XREF: sub_6FFD6D20+ECp
					; sub_6FFD7A00+55p

var_4C		= dword	ptr -4Ch
var_2D		= byte ptr -2Dh
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h

		push	ebp
		push	edi
		push	esi
		push	ebx
		xor	ebx, ebx
		sub	esp, 3Ch
		mov	[esp+4Ch+var_20], eax
		mov	eax, [eax+0Ch]
		movzx	ebp, byte ptr [eax]
		mov	ecx, ebp
		test	cl, cl
		jz	short loc_6FFD78C6
		mov	ebx, [esp+4Ch+var_20]
		lea	edx, [eax+1]
		mov	[ebx+0Ch], edx
		movzx	ebx, byte ptr [eax+1]
		test	bl, bl
		jz	short loc_6FFD78B5
		mov	esi, [esp+4Ch+var_20]
		add	eax, 2
		mov	[esi+0Ch], eax

loc_6FFD78B5:				; CODE XREF: sub_6FFD7880+29j
		mov	eax, ebp
		cmp	al, 76h
		jnz	short loc_6FFD7935
		lea	eax, [ebx-30h]
		cmp	al, 9
		jbe	loc_6FFD7970

loc_6FFD78C6:				; CODE XREF: sub_6FFD7880+17j
					; sub_6FFD7880+B8j ...
		mov	esi, 34h
		xor	eax, eax
		mov	edi, ebx
		nop

loc_6FFD78D0:				; CODE XREF: sub_6FFD7880+9Cj
		mov	edx, esi
		sub	edx, eax
		mov	ecx, edx
		shr	ecx, 1Fh
		lea	edx, [ecx+edx]
		sar	edx, 1
		add	edx, eax
		mov	ecx, edx
		shl	ecx, 4
		lea	ebx, off_6FFF95A0[ecx]
		mov	ecx, ds:off_6FFF95A0[ecx]
		mov	[esp+4Ch+var_24], ebx
		movzx	ebx, byte ptr [ecx]
		mov	[esp+4Ch+var_2D], bl
		mov	ebx, ebp
		cmp	bl, [esp+4Ch+var_2D]
		jnz	short loc_6FFD7928
		movzx	ecx, byte ptr [ecx+1]
		mov	ebx, edi
		cmp	bl, cl
		jz	loc_6FFD79C0
		mov	ebx, edi
		cmp	cl, bl
		jle	short loc_6FFD7930

loc_6FFD7918:				; CODE XREF: sub_6FFD7880+AEj
		mov	esi, edx

loc_6FFD791A:				; CODE XREF: sub_6FFD7880+B3j
		cmp	eax, esi
		jnz	short loc_6FFD78D0

loc_6FFD791E:				; CODE XREF: sub_6FFD7880+105j
					; sub_6FFD7880+11Cj ...
		xor	eax, eax

loc_6FFD7920:				; CODE XREF: sub_6FFD7880+118j
					; sub_6FFD7880+134j ...
		add	esp, 3Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_6FFD7928:				; CODE XREF: sub_6FFD7880+82j
		mov	ecx, ebp
		cmp	[esp+4Ch+var_2D], cl
		jg	short loc_6FFD7918

loc_6FFD7930:				; CODE XREF: sub_6FFD7880+96j
		lea	eax, [edx+1]
		jmp	short loc_6FFD791A
; ---------------------------------------------------------------------------

loc_6FFD7935:				; CODE XREF: sub_6FFD7880+39j
		cmp	bl, 76h
		jnz	short loc_6FFD78C6
		mov	eax, ebp
		cmp	al, 63h
		xchg	ax, ax
		jnz	short loc_6FFD78C6
		mov	eax, [esp+4Ch+var_20]
		call	sub_6FFD7060
		mov	edx, 2Dh
		mov	[esp+4Ch+var_4C], 0
		mov	ecx, eax
		mov	eax, [esp+4Ch+var_20]
		call	sub_6FFD66D0
		add	esp, 3Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6FFD7970:				; CODE XREF: sub_6FFD7880+40j
		mov	eax, [esp+4Ch+var_20]
		call	sub_6FFD6C50
		mov	esi, [esp+4Ch+var_20]
		mov	edx, [esi+14h]
		cmp	edx, [esi+18h]
		mov	ecx, eax
		jge	short loc_6FFD791E
		lea	eax, [edx+edx*2]
		add	edx, 1
		shl	eax, 2
		add	eax, [esi+10h]
		mov	[esi+14h], edx
		test	eax, eax
		jz	short loc_6FFD7920
		test	ecx, ecx
		jz	loc_6FFD791E
		movsx	edx, bl
		sub	edx, 30h
		mov	dword ptr [eax], 2Ch
		mov	[eax+4], edx
		mov	[eax+8], ecx
		jmp	loc_6FFD7920
; ---------------------------------------------------------------------------
		align 10h

loc_6FFD79C0:				; CODE XREF: sub_6FFD7880+8Cj
		mov	esi, [esp+4Ch+var_20]
		mov	edx, [esi+14h]
		cmp	edx, [esi+18h]
		jge	loc_6FFD791E
		lea	eax, [edx+edx*2]
		add	edx, 1
		shl	eax, 2
		add	eax, [esi+10h]
		mov	[esi+14h], edx
		test	eax, eax
		jz	loc_6FFD7920
		mov	edx, [esp+4Ch+var_24]
		mov	dword ptr [eax], 2Bh
		mov	[eax+4], edx
		add	esp, 3Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
sub_6FFD7880	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6FFD7A00	proc near		; CODE XREF: sub_6FFD6D20+44p
					; sub_6FFD6D20+1E1p ...
		push	esi
		push	ebx
		mov	ebx, eax
		sub	esp, 4
		mov	edx, [eax+0Ch]
		movzx	eax, byte ptr [edx]
		lea	ecx, [eax-30h]
		cmp	cl, 9
		jbe	short loc_6FFD7A74
		lea	ecx, [eax-61h]
		cmp	cl, 19h
		jbe	short loc_6FFD7A53
		lea	ecx, [eax-43h]
		cmp	cl, 1
		ja	loc_6FFD7AE1
		mov	ecx, [ebx+2Ch]
		test	ecx, ecx
		jz	short loc_6FFD7A3F
		mov	esi, [ecx]
		test	esi, esi
		jnz	short loc_6FFD7A80

loc_6FFD7A36:				; CODE XREF: sub_6FFD7A00+83j
		mov	eax, [ecx+8]
		add	[ebx+30h], eax
		movzx	eax, byte ptr [edx]

loc_6FFD7A3F:				; CODE XREF: sub_6FFD7A00+2Ej
		cmp	al, 43h
		jz	short loc_6FFD7A89

loc_6FFD7A43:				; CODE XREF: sub_6FFD7A00+87j
		cmp	al, 44h
		jz	loc_6FFD7B10

loc_6FFD7A4B:				; CODE XREF: sub_6FFD7A00+A0j
					; sub_6FFD7A00+B3j ...
		xor	eax, eax

loc_6FFD7A4D:				; CODE XREF: sub_6FFD7A00+5Cj
					; sub_6FFD7A00+61j ...
		add	esp, 4
		pop	ebx
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_6FFD7A53:				; CODE XREF: sub_6FFD7A00+1Bj
		mov	eax, ebx
		call	sub_6FFD7880
		test	eax, eax
		jz	short loc_6FFD7A4D
		cmp	dword ptr [eax], 2Bh
		jnz	short loc_6FFD7A4D
		mov	ecx, [eax+4]
		mov	edx, [ebx+30h]
		add	edx, [ecx+8]
		add	edx, 7
		mov	[ebx+30h], edx
		jmp	short loc_6FFD7A4D
; ---------------------------------------------------------------------------

loc_6FFD7A74:				; CODE XREF: sub_6FFD7A00+13j
		add	esp, 4
		mov	eax, ebx
		pop	ebx
		pop	esi
		jmp	sub_6FFD6C50
; ---------------------------------------------------------------------------

loc_6FFD7A80:				; CODE XREF: sub_6FFD7A00+34j
		cmp	esi, 16h
		jz	short loc_6FFD7A36
		cmp	al, 43h
		jnz	short loc_6FFD7A43

loc_6FFD7A89:				; CODE XREF: sub_6FFD7A00+41j
		movzx	eax, byte ptr [edx+1]
		cmp	al, 32h
		nop
		jz	loc_6FFD7BB0
		cmp	al, 33h
		jz	loc_6FFD7BA2
		cmp	al, 31h
		jnz	short loc_6FFD7A4B
		mov	esi, 1

loc_6FFD7AA7:				; CODE XREF: sub_6FFD7A00+1A7j
					; sub_6FFD7A00+1B5j
		add	edx, 2
		mov	[ebx+0Ch], edx
		mov	edx, [ebx+14h]
		cmp	edx, [ebx+18h]
		jge	short loc_6FFD7A4B
		lea	eax, [edx+edx*2]
		add	edx, 1
		shl	eax, 2
		add	eax, [ebx+10h]
		mov	[ebx+14h], edx
		test	eax, eax
		jz	short loc_6FFD7A4B
		test	ecx, ecx
		jz	loc_6FFD7A4B
		mov	dword ptr [eax], 7
		mov	[eax+4], esi
		mov	[eax+8], ecx
		jmp	loc_6FFD7A4D
; ---------------------------------------------------------------------------

loc_6FFD7AE1:				; CODE XREF: sub_6FFD7A00+23j
		cmp	al, 4Ch
		jnz	loc_6FFD7A4B
		add	edx, 1
		mov	eax, ebx
		mov	[ebx+0Ch], edx
		call	sub_6FFD6C50
		test	eax, eax
		mov	esi, eax
		jz	loc_6FFD7A4B
		mov	eax, [ebx+0Ch]
		cmp	byte ptr [eax],	5Fh
		jz	short loc_6FFD7B6D
		mov	eax, esi
		jmp	loc_6FFD7A4D
; ---------------------------------------------------------------------------
		align 10h

loc_6FFD7B10:				; CODE XREF: sub_6FFD7A00+45j
		movzx	eax, byte ptr [edx+1]
		cmp	al, 31h
		jz	short loc_6FFD7B97
		cmp	al, 32h
		jz	short loc_6FFD7B90
		cmp	al, 30h
		xchg	ax, ax
		jnz	loc_6FFD7A4B
		mov	esi, 1

loc_6FFD7B2B:				; CODE XREF: sub_6FFD7A00+195j
					; sub_6FFD7A00+1A0j
		add	edx, 2
		mov	[ebx+0Ch], edx
		mov	edx, [ebx+14h]
		cmp	edx, [ebx+18h]
		jge	loc_6FFD7A4B
		lea	eax, [edx+edx*2]
		add	edx, 1
		shl	eax, 2
		add	eax, [ebx+10h]
		mov	[ebx+14h], edx
		test	eax, eax
		jz	loc_6FFD7A4B
		test	ecx, ecx
		jz	loc_6FFD7A4B
		mov	dword ptr [eax], 8
		mov	[eax+4], esi
		mov	[eax+8], ecx
		jmp	loc_6FFD7A4D
; ---------------------------------------------------------------------------

loc_6FFD7B6D:				; CODE XREF: sub_6FFD7A00+106j
		add	eax, 1
		mov	[ebx+0Ch], eax
		mov	eax, ebx
		call	sub_6FFD67B0
		test	eax, eax
		js	loc_6FFD7A4B
		mov	eax, esi
		jmp	loc_6FFD7A4D
; ---------------------------------------------------------------------------
		align 10h

loc_6FFD7B90:				; CODE XREF: sub_6FFD7A00+11Aj
		mov	esi, 3
		jmp	short loc_6FFD7B2B
; ---------------------------------------------------------------------------

loc_6FFD7B97:				; CODE XREF: sub_6FFD7A00+116j
		mov	esi, 2
		lea	esi, [esi+0]
		jmp	short loc_6FFD7B2B
; ---------------------------------------------------------------------------

loc_6FFD7BA2:				; CODE XREF: sub_6FFD7A00+98j
		mov	esi, 3
		jmp	loc_6FFD7AA7
; ---------------------------------------------------------------------------
		align 10h

loc_6FFD7BB0:				; CODE XREF: sub_6FFD7A00+90j
		mov	esi, 2
		jmp	loc_6FFD7AA7
sub_6FFD7A00	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6FFD7BC0	proc near		; CODE XREF: sub_6FFD6D20+16Cj
					; sub_6FFD7CF0+ADp

var_1C		= dword	ptr -1Ch
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4

		sub	esp, 1Ch
		mov	[esp+1Ch+var_C], ebx
		mov	ebx, eax
		mov	[esp+1Ch+var_8], esi
		mov	[esp+1Ch+var_4], edi
		mov	eax, [eax+0Ch]
		cmp	byte ptr [eax],	4Ch
		jz	short loc_6FFD7BF0

loc_6FFD7BD9:				; CODE XREF: sub_6FFD7BC0+5Dj
					; sub_6FFD7BC0+9Bj ...
		xor	eax, eax
		mov	ebx, [esp+1Ch+var_C]
		mov	esi, [esp+1Ch+var_8]
		mov	edi, [esp+1Ch+var_4]
		add	esp, 1Ch
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6FFD7BF0:				; CODE XREF: sub_6FFD7BC0+17j
		lea	edi, [eax+1]
		mov	[ebx+0Ch], edi
		movzx	edx, byte ptr [eax+1]
		cmp	dl, 5Fh
		setz	cl
		cmp	dl, 5Ah
		jnz	short loc_6FFD7C35

loc_6FFD7C05:				; CODE XREF: sub_6FFD7BC0+8Aj
		lea	ecx, [edi+1]
		xor	edx, edx
		mov	[ebx+0Ch], ecx
		mov	eax, ebx
		call	sub_6FFD8100
		mov	edi, [ebx+0Ch]
		movzx	edx, byte ptr [edi]

loc_6FFD7C1A:				; CODE XREF: sub_6FFD7BC0+88j
					; sub_6FFD7BC0+F8j
		cmp	dl, 45h
		jnz	short loc_6FFD7BD9
		lea	ecx, [edi+1]
		mov	[ebx+0Ch], ecx
		mov	ebx, [esp+1Ch+var_C]
		mov	esi, [esp+1Ch+var_8]
		mov	edi, [esp+1Ch+var_4]
		add	esp, 1Ch
		retn
; ---------------------------------------------------------------------------

loc_6FFD7C35:				; CODE XREF: sub_6FFD7BC0+43j
		test	cl, cl
		jz	short loc_6FFD7C50
		lea	edi, [eax+2]
		mov	[ebx+0Ch], edi
		movzx	edx, byte ptr [eax+2]
		xor	eax, eax
		cmp	dl, 5Ah
		jnz	short loc_6FFD7C1A
		jmp	short loc_6FFD7C05
; ---------------------------------------------------------------------------
		align 10h

loc_6FFD7C50:				; CODE XREF: sub_6FFD7BC0+77j
		mov	eax, ebx
		call	sub_6FFD7060
		test	eax, eax
		mov	esi, eax
		jz	loc_6FFD7BD9
		cmp	dword ptr [eax], 23h
		jz	short loc_6FFD7CC0

loc_6FFD7C66:				; CODE XREF: sub_6FFD7BC0+108j
					; sub_6FFD7BC0+110j
		mov	edx, [ebx+0Ch]
		mov	edi, 34h
		movzx	eax, byte ptr [edx]
		cmp	al, 6Eh
		jz	short loc_6FFD7CD2

loc_6FFD7C75:				; CODE XREF: sub_6FFD7BC0+11Fj
		xor	ecx, ecx
		cmp	al, 45h
		jz	short loc_6FFD7C9D
		test	al, al
		mov	ecx, edx
		jnz	short loc_6FFD7C8E
		jmp	loc_6FFD7BD9
; ---------------------------------------------------------------------------

loc_6FFD7C86:				; CODE XREF: sub_6FFD7BC0+D9j
		test	al, al
		jz	loc_6FFD7BD9

loc_6FFD7C8E:				; CODE XREF: sub_6FFD7BC0+BFj
		add	ecx, 1
		mov	[ebx+0Ch], ecx
		movzx	eax, byte ptr [ecx]
		cmp	al, 45h
		jnz	short loc_6FFD7C86
		sub	ecx, edx

loc_6FFD7C9D:				; CODE XREF: sub_6FFD7BC0+B9j
		mov	eax, ebx
		call	sub_6FFD6750
		mov	edx, edi
		mov	ecx, esi
		mov	[esp+1Ch+var_1C], eax
		mov	eax, ebx
		call	sub_6FFD66D0
		mov	edi, [ebx+0Ch]
		movzx	edx, byte ptr [edi]
		jmp	loc_6FFD7C1A
; ---------------------------------------------------------------------------
		align 10h

loc_6FFD7CC0:				; CODE XREF: sub_6FFD7BC0+A4j
		mov	eax, [eax+4]
		mov	ecx, [eax+10h]
		test	ecx, ecx
		jz	short loc_6FFD7C66
		mov	eax, [eax+4]
		sub	[ebx+30h], eax
		jmp	short loc_6FFD7C66
; ---------------------------------------------------------------------------

loc_6FFD7CD2:				; CODE XREF: sub_6FFD7BC0+B3j
		add	edx, 1
		mov	di, 35h
		mov	[ebx+0Ch], edx
		movzx	eax, byte ptr [edx]
		jmp	short loc_6FFD7C75
sub_6FFD7BC0	endp

; ---------------------------------------------------------------------------
		jmp	short sub_6FFD7CF0
; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6FFD7CF0	proc near		; CODE XREF: sub_6FFD6D20+243p
					; sub_6FFD6D20+30Ep ...

var_2C		= dword	ptr -2Ch
var_10		= dword	ptr -10h

		push	edi
		push	esi
		push	ebx
		mov	ebx, eax
		sub	esp, 20h
		mov	edi, [eax+2Ch]
		mov	eax, [eax+0Ch]
		cmp	byte ptr [eax],	49h
		jz	short loc_6FFD7D10

loc_6FFD7D03:				; CODE XREF: sub_6FFD7CF0+77j
					; sub_6FFD7CF0+92j ...
		add	esp, 20h
		xor	eax, eax
		pop	ebx
		pop	esi
		pop	edi
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6FFD7D10:				; CODE XREF: sub_6FFD7CF0+11j
		lea	ecx, [eax+1]
		mov	[ebx+0Ch], ecx
		cmp	byte ptr [eax+1], 45h
		jnz	short loc_6FFD7D40
		add	eax, 2
		xor	ecx, ecx
		mov	[ebx+0Ch], eax
		mov	edx, 2Ah
		mov	eax, ebx
		mov	[esp+2Ch+var_2C], 0
		call	sub_6FFD66D0
		add	esp, 20h
		pop	ebx
		pop	esi
		pop	edi
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6FFD7D40:				; CODE XREF: sub_6FFD7CF0+2Aj
		mov	[esp+2Ch+var_10], 0
		lea	esi, [esp+2Ch+var_10]
		movzx	edx, byte ptr [eax+1]
		jmp	short loc_6FFD7D96
; ---------------------------------------------------------------------------

loc_6FFD7D52:				; CODE XREF: sub_6FFD7CF0+A9j
		cmp	dl, 58h
		jz	short loc_6FFD7DB2
		cmp	dl, 49h
		jz	short loc_6FFD7DA4
		mov	eax, ebx
		xchg	ax, ax
		call	sub_6FFD7060

loc_6FFD7D65:				; CODE XREF: sub_6FFD7CF0+B2j
					; sub_6FFD7CF0+C0j ...
		test	eax, eax
		jz	short loc_6FFD7D03
		mov	ecx, eax
		mov	edx, 2Ah
		mov	eax, ebx
		mov	[esp+2Ch+var_2C], 0
		call	sub_6FFD66D0
		test	eax, eax
		mov	[esi], eax
		jz	loc_6FFD7D03
		mov	ecx, [ebx+0Ch]
		movzx	edx, byte ptr [ecx]
		cmp	dl, 45h
		jz	short loc_6FFD7DD3
		lea	esi, [eax+8]

loc_6FFD7D96:				; CODE XREF: sub_6FFD7CF0+60j
		cmp	dl, 4Ch
		jnz	short loc_6FFD7D52
		mov	eax, ebx
		call	sub_6FFD7BC0
		jmp	short loc_6FFD7D65
; ---------------------------------------------------------------------------

loc_6FFD7DA4:				; CODE XREF: sub_6FFD7CF0+6Aj
		mov	eax, ebx
		call	sub_6FFD7CF0
		nop
		lea	esi, [esi+0]
		jmp	short loc_6FFD7D65
; ---------------------------------------------------------------------------

loc_6FFD7DB2:				; CODE XREF: sub_6FFD7CF0+65j
		add	ecx, 1
		mov	eax, ebx
		mov	[ebx+0Ch], ecx
		call	sub_6FFD6D20
		mov	edx, [ebx+0Ch]
		cmp	byte ptr [edx],	45h
		jnz	loc_6FFD7D03
		add	edx, 1
		mov	[ebx+0Ch], edx
		jmp	short loc_6FFD7D65
; ---------------------------------------------------------------------------

loc_6FFD7DD3:				; CODE XREF: sub_6FFD7CF0+A1j
		add	ecx, 1
		mov	[ebx+2Ch], edi
		mov	eax, [esp+2Ch+var_10]
		mov	[ebx+0Ch], ecx
		add	esp, 20h
		pop	ebx
		pop	esi
		pop	edi
		retn
sub_6FFD7CF0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6FFD7DF0	proc near		; CODE XREF: sub_6FFD7060+9Ap
					; sub_6FFD7060+694p ...

var_3C		= dword	ptr -3Ch
var_20		= dword	ptr -20h

		push	ebp
		push	edi
		push	esi
		push	ebx
		mov	ebx, eax
		sub	esp, 2Ch
		mov	edx, [eax+0Ch]
		movzx	eax, byte ptr [edx]
		cmp	al, 4Eh
		jz	loc_6FFD7F00
		jle	short loc_6FFD7E40
		cmp	al, 53h
		jz	short loc_6FFD7E83
		cmp	al, 5Ah
		nop
		jnz	short loc_6FFD7E44
		add	edx, 1
		mov	eax, ebx
		mov	[ebx+0Ch], edx
		xor	edx, edx
		call	sub_6FFD8100
		mov	esi, eax
		mov	eax, [ebx+0Ch]
		cmp	byte ptr [eax],	45h
		jz	loc_6FFD7FD3

loc_6FFD7E2F:				; CODE XREF: sub_6FFD7DF0+6Fj
					; sub_6FFD7DF0+12Aj ...
		xor	esi, esi

loc_6FFD7E31:				; CODE XREF: sub_6FFD7DF0+63j
					; sub_6FFD7DF0+67j ...
		add	esp, 2Ch
		mov	eax, esi
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6FFD7E40:				; CODE XREF: sub_6FFD7DF0+17j
		cmp	al, 4Ch
		jz	short loc_6FFD7E70

loc_6FFD7E44:				; CODE XREF: sub_6FFD7DF0+20j
		mov	eax, ebx
		call	sub_6FFD7A00
		mov	esi, eax
		mov	eax, [ebx+0Ch]
		cmp	byte ptr [eax],	49h
		jnz	short loc_6FFD7E31

loc_6FFD7E55:				; CODE XREF: sub_6FFD7DF0+B3j
		test	esi, esi
		jz	short loc_6FFD7E31
		mov	eax, [ebx+20h]
		cmp	eax, [ebx+24h]
		jge	short loc_6FFD7E2F
		mov	edx, [ebx+1Ch]
		add	dword ptr [ebx+20h], 1
		mov	[edx+eax*4], esi
		jmp	short loc_6FFD7EA5
; ---------------------------------------------------------------------------
		align 10h

loc_6FFD7E70:				; CODE XREF: sub_6FFD7DF0+52j
		mov	eax, ebx
		call	sub_6FFD7A00
		add	esp, 2Ch
		pop	ebx
		mov	esi, eax
		mov	eax, esi
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_6FFD7E83:				; CODE XREF: sub_6FFD7DF0+1Bj
		cmp	byte ptr [edx+1], 74h
		jz	short loc_6FFD7EC4
		xor	edx, edx
		mov	eax, ebx
		call	sub_6FFD6980
		mov	edx, 1
		mov	esi, eax

loc_6FFD7E99:				; CODE XREF: sub_6FFD7DF0+10Dj
		mov	eax, [ebx+0Ch]
		cmp	byte ptr [eax],	49h
		jnz	short loc_6FFD7E31
		test	edx, edx
		jz	short loc_6FFD7E55

loc_6FFD7EA5:				; CODE XREF: sub_6FFD7DF0+7Bj
		mov	eax, ebx
		call	sub_6FFD7CF0
		mov	ecx, esi
		mov	edx, 4
		mov	[esp+3Ch+var_3C], eax
		mov	eax, ebx
		call	sub_6FFD66D0
		mov	esi, eax
		jmp	loc_6FFD7E31
; ---------------------------------------------------------------------------

loc_6FFD7EC4:				; CODE XREF: sub_6FFD7DF0+97j
		add	edx, 2
		mov	eax, ebx
		mov	[ebx+0Ch], edx
		call	sub_6FFD7A00
		mov	ecx, 3
		mov	edx, offset aStd ; "std"
		mov	esi, eax
		mov	eax, ebx
		call	sub_6FFD6750
		mov	edx, 1
		mov	[esp+3Ch+var_3C], esi
		mov	ecx, eax
		mov	eax, ebx
		call	sub_6FFD66D0
		xor	edx, edx
		add	dword ptr [ebx+30h], 3
		mov	esi, eax
		jmp	short loc_6FFD7E99
; ---------------------------------------------------------------------------
		align 10h

loc_6FFD7F00:				; CODE XREF: sub_6FFD7DF0+11j
		add	edx, 1
		mov	ecx, 1
		mov	[ebx+0Ch], edx
		mov	eax, ebx
		lea	edx, [esp+3Ch+var_20]
		call	sub_6FFD6870
		test	eax, eax
		mov	ebp, eax
		jz	loc_6FFD7E2F
		mov	edx, [ebx+0Ch]
		xor	edi, edi
		movzx	esi, byte ptr [edx]

loc_6FFD7F28:				; CODE XREF: sub_6FFD7DF0+238j
					; sub_6FFD7DF0+25Fj
		mov	eax, esi
		test	al, al
		jz	loc_6FFD7FC0
		lea	eax, [esi-61h]
		cmp	al, 19h
		jbe	loc_6FFD8030
		lea	eax, [esi-30h]
		cmp	al, 9
		jbe	loc_6FFD8030
		mov	eax, esi
		cmp	al, 44h
		jz	loc_6FFD8030
		cmp	al, 43h
		jz	loc_6FFD8030
		cmp	al, 4Ch
		jz	loc_6FFD8030
		mov	eax, esi
		cmp	al, 53h
		jz	loc_6FFD8054
		mov	eax, esi
		cmp	al, 49h
		jz	loc_6FFD8065
		mov	eax, esi
		cmp	al, 54h
		jnz	loc_6FFD807F
		mov	eax, ebx
		call	sub_6FFD6910

loc_6FFD7F87:				; CODE XREF: sub_6FFD7DF0+247j
					; sub_6FFD7DF0+270j
		test	edi, edi
		jz	short loc_6FFD7F9C
		mov	edx, 1

loc_6FFD7F90:				; CODE XREF: sub_6FFD7DF0+28Aj
		mov	[esp+3Ch+var_3C], eax
		mov	ecx, edi
		mov	eax, ebx
		call	sub_6FFD66D0

loc_6FFD7F9C:				; CODE XREF: sub_6FFD7DF0+199j
		mov	edx, esi
		cmp	dl, 53h
		jz	short loc_6FFD8020
		mov	edx, [ebx+0Ch]
		mov	esi, 45h
		cmp	byte ptr [edx],	45h
		jz	short loc_6FFD8026
		test	eax, eax
		jz	short loc_6FFD7FC0
		mov	ecx, [ebx+20h]
		cmp	ecx, [ebx+24h]
		jl	loc_6FFD8040

loc_6FFD7FC0:				; CODE XREF: sub_6FFD7DF0+13Cj
					; sub_6FFD7DF0+1C2j ...
		xor	esi, esi
		mov	dword ptr [ebp+0], 0
		mov	eax, esi
		add	esp, 2Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_6FFD7FD3:				; CODE XREF: sub_6FFD7DF0+39j
		lea	edx, [eax+1]
		mov	[ebx+0Ch], edx
		cmp	byte ptr [eax+1], 73h
		jnz	loc_6FFD80AC
		lea	edx, [eax+2]
		mov	[ebx+0Ch], edx
		cmp	byte ptr [eax+2], 5Fh
		jz	loc_6FFD80DD

loc_6FFD7FF3:				; CODE XREF: sub_6FFD7DF0+2FCj
		mov	ecx, 0Eh
		mov	edx, offset aStringLiteral ; "string literal"
		mov	eax, ebx
		call	sub_6FFD6750
		mov	[esp+3Ch+var_3C], eax

loc_6FFD8007:				; CODE XREF: sub_6FFD7DF0+2D0j
		mov	ecx, esi
		mov	edx, 2
		mov	eax, ebx
		call	sub_6FFD66D0
		mov	esi, eax
		jmp	loc_6FFD7E31
; ---------------------------------------------------------------------------
		align 10h

loc_6FFD8020:				; CODE XREF: sub_6FFD7DF0+1B1j
		mov	edx, [ebx+0Ch]
		movzx	esi, byte ptr [edx]

loc_6FFD8026:				; CODE XREF: sub_6FFD7DF0+1BEj
		mov	edi, eax
		jmp	loc_6FFD7F28
; ---------------------------------------------------------------------------
		align 10h

loc_6FFD8030:				; CODE XREF: sub_6FFD7DF0+147j
					; sub_6FFD7DF0+152j ...
		mov	eax, ebx
		call	sub_6FFD7A00
		jmp	loc_6FFD7F87
; ---------------------------------------------------------------------------
		align 10h

loc_6FFD8040:				; CODE XREF: sub_6FFD7DF0+1CAj
		mov	esi, [ebx+1Ch]
		mov	edi, eax
		add	dword ptr [ebx+20h], 1
		mov	[esi+ecx*4], eax
		movzx	esi, byte ptr [edx]
		jmp	loc_6FFD7F28
; ---------------------------------------------------------------------------

loc_6FFD8054:				; CODE XREF: sub_6FFD7DF0+176j
		mov	edx, 1
		mov	eax, ebx
		call	sub_6FFD6980
		jmp	loc_6FFD7F87
; ---------------------------------------------------------------------------

loc_6FFD8065:				; CODE XREF: sub_6FFD7DF0+180j
		test	edi, edi
		jz	loc_6FFD7FC0
		mov	eax, ebx
		nop
		call	sub_6FFD7CF0
		mov	edx, 4
		jmp	loc_6FFD7F90
; ---------------------------------------------------------------------------

loc_6FFD807F:				; CODE XREF: sub_6FFD7DF0+18Aj
		mov	eax, esi
		cmp	al, 45h
		jnz	loc_6FFD7FC0
		test	edi, edi
		mov	[ebp+0], edi
		jz	loc_6FFD7E2F
		cmp	byte ptr [edx],	45h
		jnz	loc_6FFD7E2F
		add	edx, 1
		mov	esi, [esp+3Ch+var_20]
		mov	[ebx+0Ch], edx
		jmp	loc_6FFD7E31
; ---------------------------------------------------------------------------

loc_6FFD80AC:				; CODE XREF: sub_6FFD7DF0+1EDj
		mov	eax, ebx
		call	sub_6FFD7DF0
		mov	edi, eax
		mov	eax, [ebx+0Ch]
		cmp	byte ptr [eax],	5Fh
		jz	short loc_6FFD80C5

loc_6FFD80BD:				; CODE XREF: sub_6FFD7DF0+2E4j
		mov	[esp+3Ch+var_3C], edi
		jmp	loc_6FFD8007
; ---------------------------------------------------------------------------

loc_6FFD80C5:				; CODE XREF: sub_6FFD7DF0+2CBj
		add	eax, 1
		mov	[ebx+0Ch], eax
		mov	eax, ebx
		call	sub_6FFD67B0
		test	eax, eax
		jns	short loc_6FFD80BD
		xor	esi, esi
		jmp	loc_6FFD7E31
; ---------------------------------------------------------------------------

loc_6FFD80DD:				; CODE XREF: sub_6FFD7DF0+1FDj
		add	eax, 3
		mov	[ebx+0Ch], eax
		mov	eax, ebx
		call	sub_6FFD67B0
		test	eax, eax
		jns	loc_6FFD7FF3
		xor	esi, esi
		jmp	loc_6FFD7E31
sub_6FFD7DF0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6FFD8100	proc near		; CODE XREF: sub_6FFD7BC0+4Fp
					; sub_6FFD7DF0+2Cp ...

var_3C		= dword	ptr -3Ch
var_20		= dword	ptr -20h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4

		sub	esp, 3Ch
		mov	[esp+3Ch+var_10], ebx
		mov	ebx, eax
		mov	[esp+3Ch+var_8], edi
		mov	edi, edx
		mov	[esp+3Ch+var_C], esi
		mov	[esp+3Ch+var_4], ebp
		mov	eax, [eax+0Ch]
		movzx	edx, byte ptr [eax]
		cmp	dl, 54h
		jz	loc_6FFD81D5
		cmp	dl, 47h
		jz	loc_6FFD81D5
		mov	eax, ebx
		call	sub_6FFD7DF0
		test	eax, eax
		mov	esi, eax
		jnz	short loc_6FFD8190

loc_6FFD813C:				; CODE XREF: sub_6FFD8100+92j
					; sub_6FFD8100+98j
		mov	eax, [ebx+0Ch]
		test	esi, esi
		movzx	eax, byte ptr [eax]
		jz	loc_6FFD81F1
		test	al, al
		jz	loc_6FFD81F1
		cmp	al, 45h
		jz	loc_6FFD81F1
		mov	eax, esi

loc_6FFD815C:				; CODE XREF: sub_6FFD8100+118j
		mov	edx, [eax]
		cmp	edx, 4
		jz	loc_6FFD82A0
		jnb	loc_6FFD8207

loc_6FFD816D:				; CODE XREF: sub_6FFD8100+10Dj
					; sub_6FFD8100+120j ...
		xor	edx, edx	; jumptable 6FFD82B8 cases 7,8,45

loc_6FFD816F:				; CODE XREF: sub_6FFD8100+1B1j
		mov	eax, ebx
		call	sub_6FFD7790
		mov	ecx, esi
		mov	edx, 3
		mov	[esp+3Ch+var_3C], eax
		mov	eax, ebx
		call	sub_6FFD66D0
		mov	esi, eax
		jmp	short loc_6FFD81F1
; ---------------------------------------------------------------------------
		align 10h

loc_6FFD8190:				; CODE XREF: sub_6FFD8100+3Aj
		test	edi, edi
		jz	short loc_6FFD813C
		test	byte ptr [ebx+8], 1
		jnz	short loc_6FFD813C
		mov	eax, [esi]
		lea	edx, [eax-1Ah]
		cmp	edx, 2
		ja	short loc_6FFD81B1

loc_6FFD81A4:				; CODE XREF: sub_6FFD8100+AFj
		mov	esi, [esi+4]
		mov	eax, [esi]
		lea	edx, [eax-1Ah]
		cmp	edx, 2
		jbe	short loc_6FFD81A4

loc_6FFD81B1:				; CODE XREF: sub_6FFD8100+A2j
		cmp	eax, 2
		jnz	short loc_6FFD81F1
		mov	eax, [esi+8]
		mov	edx, [eax]
		sub	edx, 1Ah
		cmp	edx, 2
		ja	short loc_6FFD81D0

loc_6FFD81C3:				; CODE XREF: sub_6FFD8100+CEj
		mov	eax, [eax+4]
		mov	edx, [eax]
		sub	edx, 1Ah
		cmp	edx, 2
		jbe	short loc_6FFD81C3

loc_6FFD81D0:				; CODE XREF: sub_6FFD8100+C1j
		mov	[esi+8], eax
		jmp	short loc_6FFD81F1
; ---------------------------------------------------------------------------

loc_6FFD81D5:				; CODE XREF: sub_6FFD8100+20j
					; sub_6FFD8100+29j
		mov	ecx, [ebx+30h]
		add	ecx, 14h
		mov	[ebx+30h], ecx
		movzx	edx, byte ptr [eax]
		cmp	dl, 54h
		jz	loc_6FFD8272
		cmp	dl, 47h
		jz	short loc_6FFD8225

loc_6FFD81EF:				; CODE XREF: sub_6FFD8100+131j
					; sub_6FFD8100+14Bj ...
		xor	esi, esi	; jumptable 6FFD8299 default case

loc_6FFD81F1:				; CODE XREF: sub_6FFD8100+44j
					; sub_6FFD8100+4Cj ...
		mov	eax, esi
		mov	ebx, [esp+3Ch+var_10]
		mov	esi, [esp+3Ch+var_C]
		mov	edi, [esp+3Ch+var_8]
		mov	ebp, [esp+3Ch+var_4]
		add	esp, 3Ch
		retn
; ---------------------------------------------------------------------------

loc_6FFD8207:				; CODE XREF: sub_6FFD8100+67j
		sub	edx, 1Ah
		cmp	edx, 2
		ja	loc_6FFD816D	; jumptable 6FFD82B8 cases 7,8,45
		mov	eax, [eax+4]
		test	eax, eax
		jnz	loc_6FFD815C
		xchg	ax, ax
		jmp	loc_6FFD816D	; jumptable 6FFD82B8 cases 7,8,45
; ---------------------------------------------------------------------------

loc_6FFD8225:				; CODE XREF: sub_6FFD8100+EDj
		lea	edx, [eax+1]
		mov	[ebx+0Ch], edx
		movzx	edx, byte ptr [eax+1]
		test	dl, dl
		jz	short loc_6FFD81EF ; jumptable 6FFD8299	default	case
		add	eax, 2
		cmp	dl, 52h
		mov	[ebx+0Ch], eax
		jz	loc_6FFD84BB
		jg	loc_6FFD84DE
		cmp	dl, 41h
		jnz	short loc_6FFD81EF ; jumptable 6FFD8299	default	case
		xor	edx, edx
		mov	eax, ebx
		call	sub_6FFD8100
		mov	edx, 15h
		mov	[esp+3Ch+var_3C], 0
		mov	ecx, eax
		mov	eax, ebx
		call	sub_6FFD66D0
		mov	esi, eax
		jmp	loc_6FFD81F1
; ---------------------------------------------------------------------------

loc_6FFD8272:				; CODE XREF: sub_6FFD8100+E4j
		lea	edx, [eax+1]
		mov	[ebx+0Ch], edx
		movzx	edx, byte ptr [eax+1]
		test	dl, dl
		jz	loc_6FFD81EF	; jumptable 6FFD8299 default case
		sub	edx, 43h
		add	eax, 2
		cmp	dl, 33h		; switch 52 cases
		mov	[ebx+0Ch], eax
		ja	loc_6FFD81EF	; jumptable 6FFD8299 default case
		movzx	edx, dl
		jmp	ds:off_6FFF896C[edx*4] ; switch	jump
; ---------------------------------------------------------------------------

loc_6FFD82A0:				; CODE XREF: sub_6FFD8100+61j
		mov	eax, [eax+4]
		test	eax, eax
		jz	short loc_6FFD82AC ; jumptable 6FFD82B8	default	case

loc_6FFD82A7:				; CODE XREF: sub_6FFD8100+1C5j
		cmp	dword ptr [eax], 2Dh ; switch 46 cases
		jbe	short loc_6FFD82B6

loc_6FFD82AC:				; CODE XREF: sub_6FFD8100+1A5j
					; sub_6FFD8100+1B8j ...
		mov	edx, 1		; jumptable 6FFD82B8 default case
		jmp	loc_6FFD816F
; ---------------------------------------------------------------------------

loc_6FFD82B6:				; CODE XREF: sub_6FFD8100+1AAj
		mov	edx, [eax]
		jmp	ds:off_6FFF8A3C[edx*4] ; switch	jump
; ---------------------------------------------------------------------------
		align 10h

loc_6FFD82C0:				; CODE XREF: sub_6FFD8100+1B8j
					; DATA XREF: .rdata:off_6FFF8A3Co
		mov	eax, [eax+8]	; jumptable 6FFD82B8 cases 1,2
		test	eax, eax
		jnz	short loc_6FFD82A7
		jmp	short loc_6FFD82AC ; jumptable 6FFD82B8	default	case
; ---------------------------------------------------------------------------
		align 10h

loc_6FFD82D0:				; CODE XREF: sub_6FFD8100+199j
					; DATA XREF: .rdata:off_6FFF896Co
		mov	edx, 76h	; jumptable 6FFD8299 case 51
		mov	eax, ebx
		call	sub_6FFD6810
		test	eax, eax
		xchg	ax, ax
		jz	loc_6FFD81EF	; jumptable 6FFD8299 default case
		xor	edx, edx
		mov	eax, ebx
		call	sub_6FFD8100
		mov	edx, 10h
		mov	[esp+3Ch+var_3C], 0
		mov	ecx, eax
		mov	eax, ebx
		call	sub_6FFD66D0
		mov	esi, eax
		jmp	loc_6FFD81F1
; ---------------------------------------------------------------------------

loc_6FFD830B:				; CODE XREF: sub_6FFD8100+199j
					; DATA XREF: .rdata:off_6FFF896Co
		mov	edx, 68h	; jumptable 6FFD8299 case 37
		mov	eax, ebx
		call	sub_6FFD6810
		test	eax, eax
		jz	loc_6FFD81EF	; jumptable 6FFD8299 default case
		xor	edx, edx
		mov	eax, ebx
		call	sub_6FFD8100
		mov	edx, 0Fh
		mov	[esp+3Ch+var_3C], 0
		mov	ecx, eax
		mov	eax, ebx
		call	sub_6FFD66D0
		mov	esi, eax
		jmp	loc_6FFD81F1
; ---------------------------------------------------------------------------

loc_6FFD8344:				; CODE XREF: sub_6FFD8100+199j
					; DATA XREF: .rdata:off_6FFF896Co
		xor	edx, edx	; jumptable 6FFD8299 case 32
		mov	eax, ebx
		call	sub_6FFD6810
		test	eax, eax
		jz	loc_6FFD81EF	; jumptable 6FFD8299 default case
		xor	edx, edx
		mov	eax, ebx
		call	sub_6FFD6810
		test	eax, eax
		jz	loc_6FFD81EF	; jumptable 6FFD8299 default case
		xor	edx, edx
		mov	eax, ebx
		call	sub_6FFD8100
		mov	edx, 11h
		mov	[esp+3Ch+var_3C], 0
		mov	ecx, eax
		mov	eax, ebx
		call	sub_6FFD66D0
		mov	esi, eax
		jmp	loc_6FFD81F1
; ---------------------------------------------------------------------------
		align 10h

loc_6FFD8390:				; CODE XREF: sub_6FFD8100+199j
					; DATA XREF: .rdata:off_6FFF896Co
		sub	ecx, 5		; jumptable 6FFD8299 case 19
		mov	eax, ebx
		mov	[ebx+30h], ecx
		call	sub_6FFD7060
		mov	edx, 9
		mov	[esp+3Ch+var_3C], 0
		mov	ecx, eax
		mov	eax, ebx
		call	sub_6FFD66D0
		mov	esi, eax
		jmp	loc_6FFD81F1
; ---------------------------------------------------------------------------

loc_6FFD83B9:				; CODE XREF: sub_6FFD8100+199j
					; DATA XREF: .rdata:off_6FFF896Co
		sub	ecx, 0Ah	; jumptable 6FFD8299 case 17
		mov	eax, ebx
		mov	[ebx+30h], ecx
		call	sub_6FFD7060
		mov	edx, 0Ah
		mov	[esp+3Ch+var_3C], 0
		mov	ecx, eax
		mov	eax, ebx
		call	sub_6FFD66D0
		mov	esi, eax
		jmp	loc_6FFD81F1
; ---------------------------------------------------------------------------

loc_6FFD83E2:				; CODE XREF: sub_6FFD8100+199j
					; DATA XREF: .rdata:off_6FFF896Co
		mov	eax, ebx	; jumptable 6FFD8299 case 16
		call	sub_6FFD7060
		mov	edx, 0Dh
		mov	[esp+3Ch+var_3C], 0
		mov	ecx, eax
		mov	eax, ebx
		call	sub_6FFD66D0
		mov	esi, eax
		jmp	loc_6FFD81F1
; ---------------------------------------------------------------------------

loc_6FFD8405:				; CODE XREF: sub_6FFD8100+199j
					; DATA XREF: .rdata:off_6FFF896Co
		mov	eax, ebx	; jumptable 6FFD8299 case 7
		call	sub_6FFD7060
		mov	edx, 12h
		mov	[esp+3Ch+var_3C], 0
		mov	ecx, eax
		mov	eax, ebx
		call	sub_6FFD66D0
		mov	esi, eax
		jmp	loc_6FFD81F1
; ---------------------------------------------------------------------------

loc_6FFD8428:				; CODE XREF: sub_6FFD8100+199j
					; DATA XREF: .rdata:off_6FFF896Co
		mov	eax, ebx	; jumptable 6FFD8299 case 6
		call	sub_6FFD7060
		mov	edx, 0Ch
		mov	[esp+3Ch+var_3C], 0
		mov	ecx, eax
		mov	eax, ebx
		call	sub_6FFD66D0
		mov	esi, eax
		jmp	loc_6FFD81F1
; ---------------------------------------------------------------------------

loc_6FFD844B:				; CODE XREF: sub_6FFD8100+199j
					; DATA XREF: .rdata:off_6FFF896Co
		mov	eax, ebx	; jumptable 6FFD8299 case 3
		call	sub_6FFD7060
		mov	edx, 0Eh
		mov	[esp+3Ch+var_3C], 0
		mov	ecx, eax
		mov	eax, ebx
		call	sub_6FFD66D0
		mov	esi, eax
		jmp	loc_6FFD81F1
; ---------------------------------------------------------------------------

loc_6FFD846E:				; CODE XREF: sub_6FFD8100+199j
					; DATA XREF: .rdata:off_6FFF896Co
		mov	eax, ebx	; jumptable 6FFD8299 case 0
		call	sub_6FFD7060
		mov	esi, eax
		mov	eax, ebx
		call	sub_6FFD67B0
		test	eax, eax
		js	loc_6FFD81EF	; jumptable 6FFD8299 default case
		mov	eax, [ebx+0Ch]
		cmp	byte ptr [eax],	5Fh
		jnz	loc_6FFD81EF	; jumptable 6FFD8299 default case
		add	eax, 1
		mov	[ebx+0Ch], eax
		mov	eax, ebx
		call	sub_6FFD7060
		mov	edx, 0Bh
		add	dword ptr [ebx+30h], 5
		mov	[esp+3Ch+var_3C], esi
		mov	ecx, eax
		mov	eax, ebx
		call	sub_6FFD66D0
		mov	esi, eax
		jmp	loc_6FFD81F1
; ---------------------------------------------------------------------------

loc_6FFD84BB:				; CODE XREF: sub_6FFD8100+13Cj
		mov	eax, ebx
		call	sub_6FFD7DF0
		mov	edx, 14h
		mov	[esp+3Ch+var_3C], 0
		mov	ecx, eax
		mov	eax, ebx
		call	sub_6FFD66D0
		mov	esi, eax
		jmp	loc_6FFD81F1
; ---------------------------------------------------------------------------

loc_6FFD84DE:				; CODE XREF: sub_6FFD8100+142j
		cmp	dl, 56h
		jz	loc_6FFD8585
		cmp	dl, 72h
		jnz	loc_6FFD81EF	; jumptable 6FFD8299 default case
		mov	eax, ebx
		call	sub_6FFD67B0
		cmp	eax, 1
		jle	loc_6FFD81EF	; jumptable 6FFD8299 default case
		mov	esi, [ebx+0Ch]
		movzx	edx, byte ptr [esi]
		test	dl, dl
		jz	loc_6FFD81EF	; jumptable 6FFD8299 default case
		add	esi, 1
		cmp	dl, 5Fh
		mov	[ebx+0Ch], esi
		jnz	loc_6FFD81EF	; jumptable 6FFD8299 default case
		lea	ebp, [eax-1]
		mov	[esp+3Ch+var_20], 0

loc_6FFD8528:				; CODE XREF: sub_6FFD8100+483j
		movzx	eax, byte ptr [esi]
		test	al, al
		jz	loc_6FFD81EF	; jumptable 6FFD8299 default case
		xor	edi, edi
		cmp	al, 24h
		jnz	short loc_6FFD854C
		jmp	short loc_6FFD85A8
; ---------------------------------------------------------------------------
		align 10h

loc_6FFD8540:				; CODE XREF: sub_6FFD8100+451j
		movzx	eax, byte ptr [esi+edi]
		test	al, al
		jz	short loc_6FFD8553
		cmp	al, 24h
		jz	short loc_6FFD8553

loc_6FFD854C:				; CODE XREF: sub_6FFD8100+437j
		add	edi, 1
		cmp	edi, ebp
		jl	short loc_6FFD8540

loc_6FFD8553:				; CODE XREF: sub_6FFD8100+446j
					; sub_6FFD8100+44Aj
		mov	edx, esi
		mov	ecx, edi
		mov	eax, ebx
		call	sub_6FFD6750
		mov	esi, [ebx+0Ch]
		add	esi, edi
		mov	[ebx+0Ch], esi
		test	eax, eax
		jz	loc_6FFD81EF	; jumptable 6FFD8299 default case
		sub	ebp, edi

loc_6FFD8570:				; CODE XREF: sub_6FFD8100+4F8j
		cmp	[esp+3Ch+var_20], 0
		jnz	loc_6FFD8619

loc_6FFD857B:				; CODE XREF: sub_6FFD8100+52Ej
		test	ebp, ebp
		jle	short loc_6FFD85FD
		mov	[esp+3Ch+var_20], eax
		jmp	short loc_6FFD8528
; ---------------------------------------------------------------------------

loc_6FFD8585:				; CODE XREF: sub_6FFD8100+3E1j
		mov	eax, ebx
		call	sub_6FFD7DF0
		mov	edx, 13h
		mov	[esp+3Ch+var_3C], 0
		mov	ecx, eax
		mov	eax, ebx
		call	sub_6FFD66D0
		mov	esi, eax
		jmp	loc_6FFD81F1
; ---------------------------------------------------------------------------

loc_6FFD85A8:				; CODE XREF: sub_6FFD8100+439j
		movzx	eax, byte ptr [esi+1]
		cmp	al, 53h
		jz	loc_6FFD864F
		cmp	al, 5Fh
		jz	loc_6FFD8645
		cmp	al, 24h
		xchg	ax, ax
		jnz	loc_6FFD81EF	; jumptable 6FFD8299 default case
		mov	edx, 24h

loc_6FFD85CB:				; CODE XREF: sub_6FFD8100+54Aj
					; sub_6FFD8100+554j
		mov	ecx, [ebx+14h]
		cmp	ecx, [ebx+18h]
		jge	short loc_6FFD8639
		imul	eax, ecx, 0Ch
		add	ecx, 1
		add	eax, [ebx+10h]
		mov	[ebx+14h], ecx
		test	eax, eax
		jz	short loc_6FFD8639
		mov	[eax+4], edx
		mov	esi, [ebx+0Ch]
		sub	ebp, 2
		mov	dword ptr [eax], 38h
		add	esi, 2
		mov	[ebx+0Ch], esi
		jmp	loc_6FFD8570
; ---------------------------------------------------------------------------

loc_6FFD85FD:				; CODE XREF: sub_6FFD8100+47Dj
		mov	ecx, eax
		mov	edx, 36h
		mov	eax, ebx
		mov	[esp+3Ch+var_3C], 0
		call	sub_6FFD66D0
		mov	esi, eax
		jmp	loc_6FFD81F1
; ---------------------------------------------------------------------------

loc_6FFD8619:				; CODE XREF: sub_6FFD8100+475j
		mov	ecx, [esp+3Ch+var_20]
		mov	edx, 37h
		mov	[esp+3Ch+var_3C], eax
		mov	eax, ebx
		call	sub_6FFD66D0
		test	eax, eax
		jnz	loc_6FFD857B
		jmp	loc_6FFD81EF	; jumptable 6FFD8299 default case
; ---------------------------------------------------------------------------

loc_6FFD8639:				; CODE XREF: sub_6FFD8100+4D1j
					; sub_6FFD8100+4E1j
		add	dword ptr [ebx+0Ch], 2
		xor	esi, esi
		nop
		jmp	loc_6FFD81F1
; ---------------------------------------------------------------------------

loc_6FFD8645:				; CODE XREF: sub_6FFD8100+4B6j
		mov	edx, 2Eh
		jmp	loc_6FFD85CB
; ---------------------------------------------------------------------------

loc_6FFD864F:				; CODE XREF: sub_6FFD8100+4AEj
		mov	edx, 2Fh
		jmp	loc_6FFD85CB
sub_6FFD8100	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6FFD8660	proc near		; CODE XREF: sub_6FFD6D20+2D3p
					; sub_6FFD6D20+334p

var_2C		= dword	ptr -2Ch
var_10		= dword	ptr -10h

		push	esi
		push	ebx
		mov	ebx, eax
		sub	esp, 24h
		mov	eax, [eax+0Ch]
		mov	[esp+2Ch+var_10], 0
		cmp	byte ptr [eax],	45h
		jnz	short loc_6FFD8698
		add	eax, 1
		xor	ecx, ecx
		mov	[ebx+0Ch], eax
		mov	edx, 29h
		mov	eax, ebx
		mov	[esp+2Ch+var_2C], 0
		call	sub_6FFD66D0
		add	esp, 24h
		pop	ebx
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_6FFD8698:				; CODE XREF: sub_6FFD8660+15j
		lea	esi, [esp+2Ch+var_10]
		jmp	short loc_6FFD86A3
; ---------------------------------------------------------------------------
		align 10h

loc_6FFD86A0:				; CODE XREF: sub_6FFD8660+6Fj
		lea	esi, [eax+8]

loc_6FFD86A3:				; CODE XREF: sub_6FFD8660+3Cj
		mov	eax, ebx
		call	sub_6FFD6D20
		test	eax, eax
		jz	short loc_6FFD86E1
		mov	ecx, eax
		mov	edx, 29h
		mov	eax, ebx
		mov	[esp+2Ch+var_2C], 0
		call	sub_6FFD66D0
		test	eax, eax
		mov	[esi], eax
		jz	short loc_6FFD86E1
		mov	edx, [ebx+0Ch]
		cmp	byte ptr [edx],	45h
		jnz	short loc_6FFD86A0
		add	edx, 1
		mov	eax, [esp+2Ch+var_10]
		mov	[ebx+0Ch], edx
		add	esp, 24h
		pop	ebx
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_6FFD86E1:				; CODE XREF: sub_6FFD8660+4Cj
					; sub_6FFD8660+67j
		add	esp, 24h
		xor	eax, eax
		pop	ebx
		pop	esi
		retn
sub_6FFD8660	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_6FFD86F0(void	*, size_t, int)
sub_6FFD86F0	proc near		; DATA XREF: sub_6FFDA290+37o

var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		sub	esp, 1Ch
		mov	[esp+1Ch+var_8], esi
		mov	esi, [esp+1Ch+arg_8]
		mov	[esp+1Ch+var_4], edi
		mov	edi, [esp+1Ch+arg_4]
		mov	[esp+1Ch+var_C], ebx
		mov	eax, [esi+4]
		mov	ebx, [esi+8]
		lea	eax, [edi+eax+1]
		cmp	eax, ebx
		ja	short loc_6FFD8767

loc_6FFD8715:				; CODE XREF: sub_6FFD86F0+ADj
		mov	ebx, [esi+0Ch]
		test	ebx, ebx
		jz	short loc_6FFD8730

loc_6FFD871C:				; CODE XREF: sub_6FFD86F0+7Cj
					; sub_6FFD86F0+D7j
		mov	ebx, [esp+1Ch+var_C]
		mov	esi, [esp+1Ch+var_8]
		mov	edi, [esp+1Ch+var_4]
		add	esp, 1Ch
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6FFD8730:				; CODE XREF: sub_6FFD86F0+2Aj
		mov	eax, [esi]
		mov	edx, [esp+1Ch+arg_0]
		add	eax, [esi+4]
		mov	[esp+1Ch+var_14], edi ;	size_t
		mov	[esp+1Ch+var_18], edx ;	void *
		mov	[esp+1Ch+var_1C], eax ;	void *
		call	memcpy
		mov	edx, [esi]
		mov	eax, [esi+4]
		add	edx, edi
		mov	byte ptr [edx+eax], 0
		add	[esi+4], edi
		mov	ebx, [esp+1Ch+var_C]
		mov	esi, [esp+1Ch+var_8]
		mov	edi, [esp+1Ch+var_4]
		add	esp, 1Ch
		retn
; ---------------------------------------------------------------------------

loc_6FFD8767:				; CODE XREF: sub_6FFD86F0+23j
		mov	edx, [esi+0Ch]
		test	edx, edx
		jnz	short loc_6FFD871C
		test	ebx, ebx
		jnz	short loc_6FFD8780
		cmp	eax, 2
		mov	bl, 2
		jbe	short loc_6FFD8786
		lea	esi, [esi+0]

loc_6FFD8780:				; CODE XREF: sub_6FFD86F0+80j
					; sub_6FFD86F0+94j
		add	ebx, ebx
		cmp	eax, ebx
		ja	short loc_6FFD8780

loc_6FFD8786:				; CODE XREF: sub_6FFD86F0+87j
		mov	[esp+1Ch+var_18], ebx ;	size_t
		mov	eax, [esi]
		mov	[esp+1Ch+var_1C], eax ;	void *
		call	realloc
		test	eax, eax
		jz	short loc_6FFD87A2
		mov	[esi], eax
		mov	[esi+8], ebx
		jmp	loc_6FFD8715
; ---------------------------------------------------------------------------

loc_6FFD87A2:				; CODE XREF: sub_6FFD86F0+A6j
		mov	eax, [esi]
		mov	[esp+1Ch+var_1C], eax ;	void *
		call	free
		mov	dword ptr [esi], 0
		mov	dword ptr [esi+4], 0
		mov	dword ptr [esi+8], 0
		mov	dword ptr [esi+0Ch], 1
		jmp	loc_6FFD871C
sub_6FFD86F0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6FFD87D0	proc near		; CODE XREF: sub_6FFD90B0+BDp
					; sub_6FFD90B0+7F4p ...

var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_28		= dword	ptr -28h
var_24		= byte ptr -24h
var_20		= dword	ptr -20h

		push	ebp
		push	edi
		push	esi
		mov	esi, edx
		push	ebx
		mov	ebx, eax
		sub	esp, 2Ch
		test	ecx, ecx
		jz	loc_6FFD8870
		lea	edx, [ebx+4]
		mov	eax, [eax+104h]
		xor	edi, edi
		mov	[esp+3Ch+var_20], edx
		jmp	short loc_6FFD880D
; ---------------------------------------------------------------------------

loc_6FFD87F4:				; CODE XREF: sub_6FFD87D0+49j
					; sub_6FFD87D0+9Cj
		add	edi, 1
		cmp	ecx, edi
		mov	[ebx+eax+4], dl
		mov	[ebx+104h], ebp
		mov	[ebx+108h], dl
		jbe	short loc_6FFD8870
		mov	eax, ebp

loc_6FFD880D:				; CODE XREF: sub_6FFD87D0+22j
		cmp	eax, 0FFh
		movzx	edx, byte ptr [esi+edi]
		lea	ebp, [eax+1]
		jnz	short loc_6FFD87F4
		mov	eax, [ebx+110h]
		mov	ebp, 1
		mov	[esp+3Ch+var_24], dl
		mov	[esp+3Ch+var_28], ecx
		mov	byte ptr [ebx+103h], 0
		mov	[esp+3Ch+var_34], eax
		mov	eax, [ebx+104h]
		mov	[esp+3Ch+var_38], eax
		mov	eax, [esp+3Ch+var_20]
		mov	[esp+3Ch+var_3C], eax
		call	dword ptr [ebx+10Ch]
		xor	eax, eax
		mov	ecx, [esp+3Ch+var_28]
		mov	dword ptr [ebx+104h], 0
		movzx	edx, [esp+3Ch+var_24]
		add	dword ptr [ebx+124h], 1
		jmp	short loc_6FFD87F4
; ---------------------------------------------------------------------------
		align 10h

loc_6FFD8870:				; CODE XREF: sub_6FFD87D0+Dj
					; sub_6FFD87D0+39j
		add	esp, 2Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
sub_6FFD87D0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6FFD8880	proc near		; CODE XREF: sub_6FFD8C50+E2p
					; sub_6FFD90B0+76p ...

var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_28		= dword	ptr -28h
var_24		= byte ptr -24h
var_20		= dword	ptr -20h

		push	ebp
		push	edi
		push	esi
		mov	esi, edx
		push	ebx
		mov	ebx, eax
		sub	esp, 2Ch
		mov	[esp+3Ch+var_3C], edx ;	char *
		call	strlen
		test	eax, eax
		jz	loc_6FFD8930
		lea	ecx, [ebx+4]
		mov	edx, [ebx+104h]
		xor	edi, edi
		mov	[esp+3Ch+var_20], ecx
		jmp	short loc_6FFD88C9
; ---------------------------------------------------------------------------
		align 10h

loc_6FFD88B0:				; CODE XREF: sub_6FFD8880+56j
					; sub_6FFD8880+A9j
		add	edi, 1
		cmp	eax, edi
		mov	[ebx+edx+4], cl
		mov	[ebx+104h], ebp
		mov	[ebx+108h], cl
		jbe	short loc_6FFD8930
		mov	edx, ebp

loc_6FFD88C9:				; CODE XREF: sub_6FFD8880+2Aj
		cmp	edx, 0FFh
		movzx	ecx, byte ptr [esi+edi]
		lea	ebp, [edx+1]
		jnz	short loc_6FFD88B0
		mov	edx, [ebx+110h]
		mov	ebp, 1
		mov	[esp+3Ch+var_28], eax
		mov	[esp+3Ch+var_24], cl
		mov	byte ptr [ebx+103h], 0
		mov	[esp+3Ch+var_34], edx
		mov	edx, [ebx+104h]
		mov	[esp+3Ch+var_38], edx
		mov	edx, [esp+3Ch+var_20]
		mov	[esp+3Ch+var_3C], edx
		call	dword ptr [ebx+10Ch]
		xor	edx, edx
		movzx	ecx, [esp+3Ch+var_24]
		mov	dword ptr [ebx+104h], 0
		mov	eax, [esp+3Ch+var_28]
		add	dword ptr [ebx+124h], 1
		jmp	short loc_6FFD88B0
; ---------------------------------------------------------------------------
		align 10h

loc_6FFD8930:				; CODE XREF: sub_6FFD8880+15j
					; sub_6FFD8880+45j
		add	esp, 2Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
sub_6FFD8880	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6FFD8940	proc near		; CODE XREF: sub_6FFD8C50+A3p
					; sub_6FFD90B0+6DBp

var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_10		= dword	ptr -10h

		push	edi
		push	esi
		mov	esi, edx
		push	ebx
		mov	edx, ecx
		sub	esp, 20h
		test	ecx, ecx
		mov	ebx, eax
		jz	short loc_6FFD897B
		mov	edi, [ecx+8]
		mov	eax, ecx
		test	edi, edi
		jnz	short loc_6FFD896B
		jmp	loc_6FFD8A00
; ---------------------------------------------------------------------------
		align 10h

loc_6FFD8960:				; CODE XREF: sub_6FFD8940+30j
		mov	ecx, [eax+8]
		test	ecx, ecx
		jz	loc_6FFD8A00

loc_6FFD896B:				; CODE XREF: sub_6FFD8940+17j
		mov	eax, [eax]
		test	eax, eax
		nop
		jnz	short loc_6FFD8960
		xor	ecx, ecx
		mov	eax, ebx
		call	sub_6FFD8C50

loc_6FFD897B:				; CODE XREF: sub_6FFD8940+Ej
		mov	eax, [ebx+104h]

loc_6FFD8981:				; CODE XREF: sub_6FFD8940+142j
		cmp	eax, 0FFh
		lea	edx, [eax+1]
		jz	loc_6FFD8ACE

loc_6FFD898F:				; CODE XREF: sub_6FFD8940+1CDj
		mov	byte ptr [ebx+eax+4], 20h
		mov	[ebx+104h], edx
		mov	byte ptr [ebx+108h], 20h

loc_6FFD89A1:				; CODE XREF: sub_6FFD8940+26Fj
		cmp	edx, 0FFh
		lea	eax, [edx+1]
		jz	loc_6FFD8B56

loc_6FFD89B0:				; CODE XREF: sub_6FFD8940+255j
		mov	byte ptr [ebx+edx+4], 5Bh
		mov	[ebx+104h], eax
		mov	byte ptr [ebx+108h], 5Bh
		mov	edx, [esi+4]
		test	edx, edx
		jz	short loc_6FFD89D6
		mov	eax, ebx
		call	sub_6FFD90B0
		mov	eax, [ebx+104h]

loc_6FFD89D6:				; CODE XREF: sub_6FFD8940+87j
		cmp	eax, 0FFh
		lea	edx, [eax+1]
		jz	loc_6FFD8B12

loc_6FFD89E4:				; CODE XREF: sub_6FFD8940+211j
		mov	byte ptr [ebx+eax+4], 5Dh
		mov	[ebx+104h], edx
		mov	byte ptr [ebx+108h], 5Dh
		add	esp, 20h
		pop	ebx
		pop	esi
		pop	edi
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6FFD8A00:				; CODE XREF: sub_6FFD8940+19j
					; sub_6FFD8940+25j
		mov	eax, [eax+4]
		cmp	dword ptr [eax], 26h
		jz	loc_6FFD8BA0
		mov	ecx, [ebx+104h]
		lea	edi, [ebx+4]
		cmp	ecx, 0FFh
		jz	loc_6FFD8BB4
		lea	eax, [ecx+1]
		cmp	eax, 0FFh
		mov	byte ptr [ebx+ecx+4], 20h
		mov	[ebx+104h], eax
		mov	byte ptr [ebx+108h], 20h
		jz	short loc_6FFD8A87

loc_6FFD8A3D:				; CODE XREF: sub_6FFD8940+2BFj
		lea	ecx, [eax+1]

loc_6FFD8A40:				; CODE XREF: sub_6FFD8940+189j
		mov	byte ptr [ebx+eax+4], 28h
		mov	eax, ebx
		mov	[ebx+104h], ecx
		xor	ecx, ecx
		mov	byte ptr [ebx+108h], 28h
		call	sub_6FFD8C50
		mov	edx, [ebx+104h]
		cmp	edx, 0FFh
		lea	eax, [edx+1]
		jz	loc_6FFD8C04

loc_6FFD8A70:				; CODE XREF: sub_6FFD8940+2FEj
		mov	byte ptr [ebx+edx+4], 29h
		mov	[ebx+104h], eax
		mov	byte ptr [ebx+108h], 29h
		jmp	loc_6FFD8981
; ---------------------------------------------------------------------------

loc_6FFD8A87:				; CODE XREF: sub_6FFD8940+FBj
		mov	eax, [ebx+110h]
		mov	[esp+2Ch+var_10], edx
		mov	byte ptr [ebx+103h], 0
		mov	[esp+2Ch+var_28], 0FFh
		mov	[esp+2Ch+var_24], eax
		mov	[esp+2Ch+var_2C], edi
		call	dword ptr [ebx+10Ch]
		mov	ecx, 1
		xor	eax, eax
		mov	dword ptr [ebx+104h], 0
		mov	edx, [esp+2Ch+var_10]
		add	dword ptr [ebx+124h], 1
		jmp	loc_6FFD8A40
; ---------------------------------------------------------------------------

loc_6FFD8ACE:				; CODE XREF: sub_6FFD8940+49j
		mov	eax, [ebx+110h]
		mov	byte ptr [ebx+103h], 0
		mov	[esp+2Ch+var_24], eax
		mov	eax, [ebx+104h]
		mov	[esp+2Ch+var_28], eax
		lea	eax, [ebx+4]
		mov	[esp+2Ch+var_2C], eax
		call	dword ptr [ebx+10Ch]
		mov	edx, 1
		xor	eax, eax
		mov	dword ptr [ebx+104h], 0
		add	dword ptr [ebx+124h], 1
		jmp	loc_6FFD898F
; ---------------------------------------------------------------------------

loc_6FFD8B12:				; CODE XREF: sub_6FFD8940+9Ej
		mov	eax, [ebx+110h]
		mov	byte ptr [ebx+103h], 0
		mov	[esp+2Ch+var_24], eax
		mov	eax, [ebx+104h]
		mov	[esp+2Ch+var_28], eax
		lea	eax, [ebx+4]
		mov	[esp+2Ch+var_2C], eax
		call	dword ptr [ebx+10Ch]
		mov	edx, 1
		xor	eax, eax
		mov	dword ptr [ebx+104h], 0
		add	dword ptr [ebx+124h], 1
		jmp	loc_6FFD89E4
; ---------------------------------------------------------------------------

loc_6FFD8B56:				; CODE XREF: sub_6FFD8940+6Aj
		mov	eax, [ebx+110h]
		mov	byte ptr [ebx+103h], 0
		mov	[esp+2Ch+var_24], eax
		mov	eax, [ebx+104h]
		mov	[esp+2Ch+var_28], eax
		lea	eax, [ebx+4]
		mov	[esp+2Ch+var_2C], eax
		call	dword ptr [ebx+10Ch]
		mov	eax, 1
		xor	edx, edx
		mov	dword ptr [ebx+104h], 0
		add	dword ptr [ebx+124h], 1
		jmp	loc_6FFD89B0
; ---------------------------------------------------------------------------
		align 10h

loc_6FFD8BA0:				; CODE XREF: sub_6FFD8940+C6j
		xor	ecx, ecx
		mov	eax, ebx
		call	sub_6FFD8C50
		mov	edx, [ebx+104h]
		jmp	loc_6FFD89A1
; ---------------------------------------------------------------------------

loc_6FFD8BB4:				; CODE XREF: sub_6FFD8940+DBj
		mov	eax, [ebx+110h]
		mov	[esp+2Ch+var_10], edx
		mov	byte ptr [ebx+103h], 0
		mov	[esp+2Ch+var_28], 0FFh
		mov	[esp+2Ch+var_24], eax
		mov	[esp+2Ch+var_2C], edi
		call	dword ptr [ebx+10Ch]
		mov	eax, 1
		mov	edx, [esp+2Ch+var_10]
		add	dword ptr [ebx+124h], 1
		mov	byte ptr [ebx+4], 20h
		mov	dword ptr [ebx+104h], 1
		mov	byte ptr [ebx+108h], 20h
		jmp	loc_6FFD8A3D
; ---------------------------------------------------------------------------

loc_6FFD8C04:				; CODE XREF: sub_6FFD8940+12Aj
		mov	eax, [ebx+110h]
		mov	byte ptr [ebx+103h], 0
		mov	[esp+2Ch+var_28], 0FFh
		mov	[esp+2Ch+var_2C], edi
		mov	[esp+2Ch+var_24], eax
		call	dword ptr [ebx+10Ch]
		mov	eax, 1
		xor	edx, edx
		mov	dword ptr [ebx+104h], 0
		add	dword ptr [ebx+124h], 1
		jmp	loc_6FFD8A70
sub_6FFD8940	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6FFD8C50	proc near		; CODE XREF: sub_6FFD8940+36p
					; sub_6FFD8940+116p ...
		push	ebp
		mov	ebp, ecx
		push	edi
		push	esi
		mov	esi, eax
		push	ebx
		mov	ebx, edx
		sub	esp, 0Ch
		test	edx, edx
		jnz	short loc_6FFD8CA1
		jmp	short loc_6FFD8CD0
; ---------------------------------------------------------------------------

loc_6FFD8C63:				; CODE XREF: sub_6FFD8C50+64j
		mov	edx, [ebx+4]

loc_6FFD8C66:				; CODE XREF: sub_6FFD8C50+71j
		mov	eax, [ebx+0Ch]
		mov	edi, [esi+114h]
		mov	dword ptr [ebx+8], 1
		mov	[esi+114h], eax
		mov	eax, [edx]
		cmp	eax, 25h
		jz	short loc_6FFD8CD8
		cmp	eax, 26h
		jz	short loc_6FFD8CEF
		cmp	eax, 2
		jz	short loc_6FFD8D06
		mov	eax, esi
		nop
		call	sub_6FFDA3F0
		mov	[esi+114h], edi

loc_6FFD8C9B:				; CODE XREF: sub_6FFD8C50+60j
		mov	ebx, [ebx]
		test	ebx, ebx
		jz	short loc_6FFD8CD0

loc_6FFD8CA1:				; CODE XREF: sub_6FFD8C50+Fj
					; sub_6FFD8C50+77j
		mov	edx, [esi+11Ch]
		test	edx, edx
		jnz	short loc_6FFD8CD0
		mov	eax, [ebx+8]
		test	eax, eax
		jnz	short loc_6FFD8C9B
		test	ebp, ebp
		jnz	short loc_6FFD8C63
		mov	edx, [ebx+4]
		mov	eax, [edx]
		sub	eax, 1Ah
		cmp	eax, 2
		ja	short loc_6FFD8C66
		mov	ebx, [ebx]
		test	ebx, ebx
		jnz	short loc_6FFD8CA1
		lea	esi, [esi+0]

loc_6FFD8CD0:				; CODE XREF: sub_6FFD8C50+11j
					; sub_6FFD8C50+4Fj ...
		add	esp, 0Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_6FFD8CD8:				; CODE XREF: sub_6FFD8C50+31j
		mov	ecx, [ebx]
		mov	eax, esi
		call	sub_6FFD8D80
		mov	[esi+114h], edi
		add	esp, 0Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_6FFD8CEF:				; CODE XREF: sub_6FFD8C50+36j
		mov	ecx, [ebx]
		mov	eax, esi
		call	sub_6FFD8940
		mov	[esi+114h], edi
		add	esp, 0Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_6FFD8D06:				; CODE XREF: sub_6FFD8C50+3Bj
		mov	ebp, [esi+118h]
		mov	eax, esi
		mov	dword ptr [esi+118h], 0
		mov	edx, [edx+4]
		call	sub_6FFD90B0
		test	byte ptr [esi],	4
		mov	[esi+118h], ebp
		jnz	short loc_6FFD8D69
		mov	edx, offset byte_6FFF8AF4
		mov	eax, esi
		call	sub_6FFD8880

loc_6FFD8D37:				; CODE XREF: sub_6FFD8C50+125j
		mov	eax, [ebx+4]
		mov	edx, [eax+8]
		mov	eax, [edx]
		sub	eax, 1Ah
		cmp	eax, 2
		ja	short loc_6FFD8D54

loc_6FFD8D47:				; CODE XREF: sub_6FFD8C50+102j
		mov	edx, [edx+4]
		mov	eax, [edx]
		sub	eax, 1Ah
		cmp	eax, 2
		jbe	short loc_6FFD8D47

loc_6FFD8D54:				; CODE XREF: sub_6FFD8C50+F5j
		mov	eax, esi
		call	sub_6FFD90B0
		mov	[esi+114h], edi
		add	esp, 0Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_6FFD8D69:				; CODE XREF: sub_6FFD8C50+D9j
		mov	edx, 2Eh
		mov	eax, esi
		call	sub_6FFD6B20
		jmp	short loc_6FFD8D37
sub_6FFD8C50	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6FFD8D80	proc near		; CODE XREF: sub_6FFD8C50+8Cp
					; sub_6FFD90B0+A49p ...

var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h

		push	ebp
		push	edi
		mov	edi, edx
		push	esi
		mov	esi, ecx
		push	ebx
		mov	ebx, eax
		sub	esp, 1Ch
		test	ecx, ecx
		jz	loc_6FFD9014
		mov	eax, ecx
		mov	ecx, [ecx+8]
		mov	edx, 1
		test	ecx, ecx
		jnz	loc_6FFD9014

loc_6FFD8DA7:				; CODE XREF: sub_6FFD8D80+DDj
		mov	ecx, [eax+4]
		mov	ecx, [ecx]
		sub	ecx, 17h
		cmp	ecx, 10h
		ja	loc_6FFD8E52
		mov	ebp, edx
		shl	ebp, cl
		test	ebp, 10C47h
		mov	ecx, ebp
		jz	loc_6FFD8EF5
		movzx	eax, byte ptr [ebx+108h]

loc_6FFD8DD1:				; CODE XREF: sub_6FFD8D80+18Ej
		cmp	al, 20h
		jz	loc_6FFD8F14
		mov	edx, [ebx+104h]
		cmp	edx, 0FFh
		lea	eax, [edx+1]
		jz	loc_6FFD9066

loc_6FFD8DEE:				; CODE XREF: sub_6FFD8D80+323j
		cmp	eax, 0FFh
		mov	byte ptr [ebx+edx+4], 20h
		lea	edx, [eax+1]
		mov	[ebx+104h], eax
		mov	byte ptr [ebx+108h], 20h
		jnz	loc_6FFD8F28

loc_6FFD8E0E:				; CODE XREF: sub_6FFD8D80+1A2j
		mov	eax, [ebx+110h]
		mov	byte ptr [ebx+103h], 0
		mov	[esp+2Ch+var_24], eax
		mov	eax, [ebx+104h]
		mov	[esp+2Ch+var_28], eax
		lea	eax, [ebx+4]
		mov	[esp+2Ch+var_2C], eax
		call	dword ptr [ebx+10Ch]
		mov	edx, 1
		xor	eax, eax
		mov	dword ptr [ebx+104h], 0
		add	dword ptr [ebx+124h], 1
		jmp	loc_6FFD8F28
; ---------------------------------------------------------------------------

loc_6FFD8E52:				; CODE XREF: sub_6FFD8D80+32j
					; sub_6FFD8D80+17Bj
		mov	eax, [eax]
		test	eax, eax
		jz	short loc_6FFD8E63
		mov	ebp, [eax+8]
		test	ebp, ebp
		jz	loc_6FFD8DA7

loc_6FFD8E63:				; CODE XREF: sub_6FFD8D80+D6j
					; sub_6FFD8D80+29Fj
		mov	ebp, [ebx+118h]
		xor	ecx, ecx
		mov	edx, esi
		mov	eax, ebx
		mov	dword ptr [ebx+118h], 0
		call	sub_6FFD8C50
		mov	edx, [ebx+104h]
		cmp	edx, 0FFh
		lea	eax, [edx+1]
		jz	loc_6FFD8F8A

loc_6FFD8E93:				; CODE XREF: sub_6FFD8D80+204j
					; sub_6FFD8D80+249j
		mov	byte ptr [ebx+edx+4], 28h
		mov	[ebx+104h], eax
		mov	byte ptr [ebx+108h], 28h
		mov	edx, [edi+8]
		test	edx, edx
		jz	short loc_6FFD8EB9
		mov	eax, ebx
		call	sub_6FFD90B0
		mov	eax, [ebx+104h]

loc_6FFD8EB9:				; CODE XREF: sub_6FFD8D80+12Aj
		cmp	eax, 0FFh
		lea	edx, [eax+1]
		jz	loc_6FFD8FD0

loc_6FFD8EC7:				; CODE XREF: sub_6FFD8D80+28Fj
		mov	byte ptr [ebx+eax+4], 29h
		mov	ecx, 1
		mov	eax, ebx
		mov	[ebx+104h], edx
		mov	edx, esi
		mov	byte ptr [ebx+108h], 29h
		call	sub_6FFD8C50
		mov	[ebx+118h], ebp
		add	esp, 1Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_6FFD8EF5:				; CODE XREF: sub_6FFD8D80+44j
		and	ecx, 380h
		jz	loc_6FFD8E52

loc_6FFD8F01:				; CODE XREF: sub_6FFD8D80+299j
		movzx	eax, byte ptr [ebx+108h]
		cmp	al, 28h
		jz	short loc_6FFD8F14
		cmp	al, 2Ah
		jnz	loc_6FFD8DD1

loc_6FFD8F14:				; CODE XREF: sub_6FFD8D80+53j
					; sub_6FFD8D80+18Aj
		mov	eax, [ebx+104h]
		cmp	eax, 0FFh
		lea	edx, [eax+1]
		jz	loc_6FFD8E0E

loc_6FFD8F28:				; CODE XREF: sub_6FFD8D80+88j
					; sub_6FFD8D80+CDj
		mov	byte ptr [ebx+eax+4], 28h
		mov	ebp, [ebx+118h]
		xor	ecx, ecx
		mov	[ebx+104h], edx
		mov	eax, ebx
		mov	edx, esi
		mov	byte ptr [ebx+108h], 28h
		mov	dword ptr [ebx+118h], 0
		call	sub_6FFD8C50
		mov	eax, [ebx+104h]
		cmp	eax, 0FFh
		lea	edx, [eax+1]
		jz	loc_6FFD9024

loc_6FFD8F69:				; CODE XREF: sub_6FFD8D80+2E1j
		cmp	edx, 0FFh
		mov	byte ptr [ebx+eax+4], 29h
		lea	eax, [edx+1]
		mov	[ebx+104h], edx
		mov	byte ptr [ebx+108h], 29h
		jnz	loc_6FFD8E93

loc_6FFD8F8A:				; CODE XREF: sub_6FFD8D80+10Dj
		mov	eax, [ebx+110h]
		mov	byte ptr [ebx+103h], 0
		mov	[esp+2Ch+var_24], eax
		mov	eax, [ebx+104h]
		mov	[esp+2Ch+var_28], eax
		lea	eax, [ebx+4]
		mov	[esp+2Ch+var_2C], eax
		call	dword ptr [ebx+10Ch]
		mov	eax, 1
		xor	edx, edx
		mov	dword ptr [ebx+104h], 0
		add	dword ptr [ebx+124h], 1
		jmp	loc_6FFD8E93
; ---------------------------------------------------------------------------
		align 10h

loc_6FFD8FD0:				; CODE XREF: sub_6FFD8D80+141j
		mov	eax, [ebx+110h]
		mov	byte ptr [ebx+103h], 0
		mov	[esp+2Ch+var_24], eax
		mov	eax, [ebx+104h]
		mov	[esp+2Ch+var_28], eax
		lea	eax, [ebx+4]
		mov	[esp+2Ch+var_2C], eax
		call	dword ptr [ebx+10Ch]
		mov	edx, 1
		xor	eax, eax
		mov	dword ptr [ebx+104h], 0
		add	dword ptr [ebx+124h], 1
		jmp	loc_6FFD8EC7
; ---------------------------------------------------------------------------

loc_6FFD9014:				; CODE XREF: sub_6FFD8D80+Fj
					; sub_6FFD8D80+21j
		mov	ecx, [edi+4]
		test	ecx, ecx
		jnz	loc_6FFD8F01
		jmp	loc_6FFD8E63
; ---------------------------------------------------------------------------

loc_6FFD9024:				; CODE XREF: sub_6FFD8D80+1E3j
		mov	eax, [ebx+110h]
		mov	byte ptr [ebx+103h], 0
		mov	[esp+2Ch+var_28], 0FFh
		mov	[esp+2Ch+var_24], eax
		lea	eax, [ebx+4]
		mov	[esp+2Ch+var_2C], eax
		call	dword ptr [ebx+10Ch]
		mov	edx, 1
		xor	eax, eax
		mov	dword ptr [ebx+104h], 0
		add	dword ptr [ebx+124h], 1
		jmp	loc_6FFD8F69
; ---------------------------------------------------------------------------

loc_6FFD9066:				; CODE XREF: sub_6FFD8D80+68j
		mov	eax, [ebx+110h]
		mov	byte ptr [ebx+103h], 0
		mov	[esp+2Ch+var_28], 0FFh
		mov	[esp+2Ch+var_24], eax
		lea	eax, [ebx+4]
		mov	[esp+2Ch+var_2C], eax
		call	dword ptr [ebx+10Ch]
		mov	eax, 1
		xor	edx, edx
		mov	dword ptr [ebx+104h], 0
		add	dword ptr [ebx+124h], 1
		jmp	loc_6FFD8DEE
sub_6FFD8D80	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6FFD90B0	proc near		; CODE XREF: sub_6FFD8940+8Bp
					; sub_6FFD8C50+CBp ...

var_9C		= dword	ptr -9Ch
var_98		= dword	ptr -98h
var_94		= dword	ptr -94h
var_80		= dword	ptr -80h
var_7C		= dword	ptr -7Ch
var_78		= dword	ptr -78h
var_74		= dword	ptr -74h
var_70		= dword	ptr -70h
var_64		= byte ptr -64h
var_60		= dword	ptr -60h
var_5C		= dword	ptr -5Ch
var_58		= dword	ptr -58h
var_54		= byte ptr -54h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4

		sub	esp, 9Ch
		test	edx, edx
		mov	[esp+9Ch+var_10], ebx
		mov	ebx, eax
		mov	[esp+9Ch+var_4], ebp
		mov	ebp, edx
		mov	[esp+9Ch+var_C], esi
		mov	[esp+9Ch+var_8], edi
		jz	short loc_6FFD90EB ; jumptable 6FFD9118	default	case
		mov	eax, [eax+11Ch]
		test	eax, eax
		jnz	short loc_6FFD90F5 ; jumptable 6FFD9D89	default	case
		mov	eax, [edx]
		cmp	eax, 3Ch	; switch 61 cases
		jbe	short loc_6FFD9118

loc_6FFD90EB:				; CODE XREF: sub_6FFD90B0+28j
					; sub_6FFD90B0:loc_6FFD9118j ...
		mov	dword ptr [ebx+11Ch], 1	; jumptable 6FFD9118 default case

loc_6FFD90F5:				; CODE XREF: sub_6FFD90B0+32j
					; sub_6FFD90B0+85j ...
		mov	ebx, [esp+9Ch+var_10] ;	jumptable 6FFD9D89 default case
		mov	esi, [esp+9Ch+var_C]
		mov	edi, [esp+9Ch+var_8]
		mov	ebp, [esp+9Ch+var_4]
		add	esp, 9Ch
		retn
; ---------------------------------------------------------------------------

loc_6FFD9118:				; CODE XREF: sub_6FFD90B0+39j
		jmp	ds:off_6FFF8CA8[eax*4] ; switch	jump
; ---------------------------------------------------------------------------

loc_6FFD911F:				; CODE XREF: sub_6FFD90B0:loc_6FFD9118j
					; DATA XREF: .rdata:off_6FFF8CA8o
		mov	edx, offset aVtableFor ; jumptable 6FFD9118 case 9

loc_6FFD9124:				; CODE XREF: sub_6FFD90B0+D7j
					; sub_6FFD90B0+DEj ...
		mov	eax, ebx
		call	sub_6FFD8880

loc_6FFD912B:				; CODE XREF: sub_6FFD90B0:loc_6FFD9118j
					; sub_6FFD90B0+786j
					; DATA XREF: ...
		mov	edx, [ebp+4]	; jumptable 6FFD9118 case 36
		mov	eax, ebx
		call	sub_6FFD90B0
		jmp	short loc_6FFD90F5 ; jumptable 6FFD9D89	default	case
; ---------------------------------------------------------------------------

loc_6FFD9137:				; CODE XREF: sub_6FFD90B0:loc_6FFD9118j
					; DATA XREF: .rdata:off_6FFF8CA8o
		mov	edx, offset aConstructionVt ; jumptable	6FFD9118 case 11
		mov	eax, ebx
		call	sub_6FFD8880
		mov	edx, [ebp+4]
		mov	eax, ebx
		call	sub_6FFD90B0
		mov	edx, offset aIn	; "-in-"

loc_6FFD9152:				; CODE XREF: sub_6FFD90B0+803j
		mov	eax, ebx
		call	sub_6FFD8880

loc_6FFD9159:				; CODE XREF: sub_6FFD90B0:loc_6FFD9118j
					; sub_6FFD90B0+D0j ...
		mov	edx, [ebp+8]	; jumptable 6FFD9118 case 7
		mov	eax, ebx
		call	sub_6FFD90B0
		jmp	short loc_6FFD90F5 ; jumptable 6FFD9D89	default	case
; ---------------------------------------------------------------------------

loc_6FFD9165:				; CODE XREF: sub_6FFD90B0:loc_6FFD9118j
					; sub_6FFD90B0+181j
					; DATA XREF: ...
		mov	ecx, [ebp+8]	; jumptable 6FFD9118 case 22
		mov	eax, ebx
		mov	edx, [ebp+4]
		call	sub_6FFD87D0
		jmp	short loc_6FFD90F5 ; jumptable 6FFD9D89	default	case
; ---------------------------------------------------------------------------

loc_6FFD9174:				; CODE XREF: sub_6FFD90B0:loc_6FFD9118j
					; DATA XREF: .rdata:off_6FFF8CA8o
		mov	edx, 7Eh	; jumptable 6FFD9118 case 8
		mov	eax, ebx
		call	sub_6FFD6B20
		jmp	short loc_6FFD9159 ; jumptable 6FFD9118	case 7
; ---------------------------------------------------------------------------

loc_6FFD9182:				; CODE XREF: sub_6FFD90B0:loc_6FFD9118j
					; DATA XREF: .rdata:off_6FFF8CA8o
		mov	edx, offset aVttFor ; jumptable	6FFD9118 case 10
		jmp	short loc_6FFD9124
; ---------------------------------------------------------------------------

loc_6FFD9189:				; CODE XREF: sub_6FFD90B0:loc_6FFD9118j
					; DATA XREF: .rdata:off_6FFF8CA8o
		mov	edx, offset aTypeinfoFor ; jumptable 6FFD9118 case 12
		jmp	short loc_6FFD9124
; ---------------------------------------------------------------------------

loc_6FFD9190:				; CODE XREF: sub_6FFD90B0:loc_6FFD9118j
					; DATA XREF: .rdata:off_6FFF8CA8o
		mov	edx, offset aTypeinfoNameFo ; jumptable	6FFD9118 case 13
		jmp	short loc_6FFD9124
; ---------------------------------------------------------------------------

loc_6FFD9197:				; CODE XREF: sub_6FFD90B0:loc_6FFD9118j
					; DATA XREF: .rdata:off_6FFF8CA8o
		mov	edx, offset aTypeinfoFnFor ; jumptable 6FFD9118	case 14
		jmp	short loc_6FFD9124
; ---------------------------------------------------------------------------

loc_6FFD919E:				; CODE XREF: sub_6FFD90B0:loc_6FFD9118j
					; DATA XREF: .rdata:off_6FFF8CA8o
		mov	edx, offset aNonVirtualThun ; jumptable	6FFD9118 case 15
		jmp	loc_6FFD9124
; ---------------------------------------------------------------------------

loc_6FFD91A8:				; CODE XREF: sub_6FFD90B0:loc_6FFD9118j
					; DATA XREF: .rdata:off_6FFF8CA8o
		mov	edx, [edx+4]	; jumptable 6FFD9118 case 60
		mov	eax, ebx
		call	sub_6FFD6BA0
		test	eax, eax
		jz	loc_6FFD9F2F
		cmp	dword ptr [eax], 2Ah
		jnz	loc_6FFD90F5	; jumptable 6FFD9D89 default case
		mov	edx, [eax+4]
		xor	esi, esi
		test	edx, edx
		jnz	short loc_6FFD91E4
		jmp	loc_6FFD90F5	; jumptable 6FFD9D89 default case
; ---------------------------------------------------------------------------

loc_6FFD91D1:				; CODE XREF: sub_6FFD90B0+13Cj
		cmp	dword ptr [eax], 2Ah
		jnz	short loc_6FFD91EE
		mov	edi, [eax+4]
		test	edi, edi
		nop
		lea	esi, [esi+0]
		jz	short loc_6FFD91EE
		mov	esi, edx

loc_6FFD91E4:				; CODE XREF: sub_6FFD90B0+11Aj
		mov	eax, [eax+8]
		lea	edx, [esi+1]
		test	eax, eax
		jnz	short loc_6FFD91D1

loc_6FFD91EE:				; CODE XREF: sub_6FFD90B0+124j
					; sub_6FFD90B0+130j
		mov	[esp+9Ch+var_7C], edx
		xor	edi, edi
		mov	ebp, [ebp+4]
		jmp	short loc_6FFD920D
; ---------------------------------------------------------------------------
		align 10h

loc_6FFD9200:				; CODE XREF: sub_6FFD90B0+16Ej
					; sub_6FFD90B0+17Cj
		add	edi, 1
		cmp	[esp+9Ch+var_7C], edi
		jle	loc_6FFD90F5	; jumptable 6FFD9D89 default case

loc_6FFD920D:				; CODE XREF: sub_6FFD90B0+147j
		mov	[ebx+120h], edi
		mov	edx, ebp
		mov	eax, ebx
		call	sub_6FFD90B0
		cmp	esi, edi
		jle	short loc_6FFD9200
		mov	edx, offset asc_6FFF8C10 ; ", "
		mov	eax, ebx
		call	sub_6FFD8880
		jmp	short loc_6FFD9200
; ---------------------------------------------------------------------------

loc_6FFD922E:				; CODE XREF: sub_6FFD90B0:loc_6FFD9118j
					; DATA XREF: .rdata:off_6FFF8CA8o
		test	byte ptr [ebx],	4 ; jumptable 6FFD9118 case 0
		jz	loc_6FFD9165	; jumptable 6FFD9118 case 22
		mov	eax, [edx+4]
		mov	edi, [edx+8]
		add	edi, eax
		cmp	eax, edi
		jb	short loc_6FFD926B
		jmp	loc_6FFD90F5	; jumptable 6FFD9D89 default case
; ---------------------------------------------------------------------------

loc_6FFD9248:				; CODE XREF: sub_6FFD90B0+1C2j
		movzx	edx, byte ptr [eax]
		lea	esi, [eax+1]
		cmp	dl, 5Fh
		jz	loc_6FFD9B7C

loc_6FFD9257:				; CODE XREF: sub_6FFD90B0+1CAj
					; sub_6FFD90B0+AD3j ...
		movsx	edx, dl
		mov	eax, ebx
		call	sub_6FFD6B20

loc_6FFD9261:				; CODE XREF: sub_6FFD90B0+ECBj
		cmp	esi, edi
		jnb	loc_6FFD90F5	; jumptable 6FFD9D89 default case
		mov	eax, esi

loc_6FFD926B:				; CODE XREF: sub_6FFD90B0+191j
		mov	edx, edi
		sub	edx, eax
		cmp	edx, 3
		jg	short loc_6FFD9248
		lea	esi, [eax+1]
		movzx	edx, byte ptr [eax]
		jmp	short loc_6FFD9257
; ---------------------------------------------------------------------------

loc_6FFD927C:				; CODE XREF: sub_6FFD90B0:loc_6FFD9118j
					; DATA XREF: .rdata:off_6FFF8CA8o
		mov	edx, [edx+4]	; jumptable 6FFD9118 cases 1,2
		mov	eax, ebx
		call	sub_6FFD90B0
		test	byte ptr [ebx],	4
		jnz	loc_6FFD9BF2
		mov	edx, offset byte_6FFF8AF4
		mov	eax, ebx
		call	sub_6FFD8880
		jmp	loc_6FFD9159	; jumptable 6FFD9118 case 7
; ---------------------------------------------------------------------------

loc_6FFD92A0:				; CODE XREF: sub_6FFD90B0:loc_6FFD9118j
					; DATA XREF: .rdata:off_6FFF8CA8o
		mov	eax, [ebx+118h]	; jumptable 6FFD9118 case 3
		mov	dword ptr [ebx+118h], 0
		mov	[esp+9Ch+var_74], eax
		mov	esi, [edx+4]
		test	esi, esi
		jz	loc_6FFD90EB	; jumptable 6FFD9118 default case
		lea	edx, [esp+9Ch+var_64]
		mov	ecx, [ebx+114h]
		mov	[esp+9Ch+var_7C], edx
		mov	[ebx+118h], edx
		mov	edx, [esi]
		mov	dword ptr [esp+9Ch+var_64], 0
		mov	[esp+9Ch+var_60], esi
		mov	[esp+9Ch+var_5C], 0
		lea	eax, [edx-1Ah]
		cmp	eax, 2
		mov	[esp+9Ch+var_78], ecx
		mov	[esp+9Ch+var_58], ecx
		ja	loc_6FFD9F80
		lea	eax, [esp+9Ch+var_54]
		mov	edi, 1

loc_6FFD9306:				; CODE XREF: sub_6FFD90B0+297j
		mov	esi, [esi+4]
		test	esi, esi
		jz	loc_6FFD90EB	; jumptable 6FFD9118 default case
		cmp	edi, 4
		jz	loc_6FFD90EB	; jumptable 6FFD9118 default case
		mov	edx, [ebx+118h]
		add	edi, 1
		mov	[eax+4], esi
		mov	dword ptr [eax+8], 0
		mov	[eax], edx
		mov	edx, [esp+9Ch+var_78]
		mov	[ebx+118h], eax
		mov	[eax+0Ch], edx
		mov	edx, [esi]
		add	eax, 10h
		lea	ecx, [edx-1Ah]
		cmp	ecx, 2
		jbe	short loc_6FFD9306

loc_6FFD9349:				; CODE XREF: sub_6FFD90B0+ED5j
		cmp	edx, 4
		jz	loc_6FFD9F05
		cmp	edx, 2
		jnz	loc_6FFD940E
		mov	edx, [esi+8]
		mov	eax, [edx]
		sub	eax, 1Ah
		cmp	eax, 2
		ja	loc_6FFD940E
		cmp	edi, 3
		ja	loc_6FFD90EB	; jumptable 6FFD9118 default case
		mov	ecx, [esp+9Ch+var_7C]
		mov	eax, edi
		shl	eax, 4
		lea	eax, [eax+ecx-10h]
		mov	[esp+9Ch+var_80], eax
		mov	eax, edi
		shl	eax, 4
		lea	ecx, [eax+ecx-10h]
		mov	eax, edi
		mov	[esp+9Ch+var_70], ecx
		mov	ecx, [esp+9Ch+var_7C]
		shl	eax, 4
		add	ecx, eax
		mov	[esp+9Ch+var_78], ecx
		mov	ecx, [esp+9Ch+var_70]
		mov	[esp+9Ch+var_70], esi
		mov	esi, [esp+9Ch+var_78]
		mov	[esp+9Ch+var_78], ebp
		mov	eax, ecx
		jmp	short loc_6FFD93C8
; ---------------------------------------------------------------------------

loc_6FFD93B6:				; CODE XREF: sub_6FFD90B0+354j
		add	eax, 10h
		add	ecx, 10h
		add	esi, 10h
		cmp	edi, 3
		ja	loc_6FFD90EB	; jumptable 6FFD9118 default case

loc_6FFD93C8:				; CODE XREF: sub_6FFD90B0+304j
		mov	ebp, [eax+4]
		add	edi, 1
		mov	[eax+10h], ecx
		mov	[eax+4], edx
		mov	[eax+14h], ebp
		mov	ebp, [eax+8]
		mov	dword ptr [eax+8], 0
		mov	[eax+18h], ebp
		mov	ebp, [eax+0Ch]
		mov	[eax+1Ch], ebp
		mov	ebp, [ebx+114h]
		mov	[ebx+118h], esi
		mov	[eax+0Ch], ebp
		mov	edx, [edx+4]
		mov	ebp, [edx]
		sub	ebp, 1Ah
		cmp	ebp, 2
		jbe	short loc_6FFD93B6
		mov	esi, [esp+9Ch+var_70]
		mov	ebp, [esp+9Ch+var_78]

loc_6FFD940E:				; CODE XREF: sub_6FFD90B0+2A5j
					; sub_6FFD90B0+2B6j ...
		mov	edx, [ebp+8]
		mov	eax, ebx
		call	sub_6FFD90B0
		cmp	dword ptr [esi], 4
		jz	loc_6FFD9F20

loc_6FFD9421:				; CODE XREF: sub_6FFD90B0+E7Aj
		test	edi, edi
		jz	loc_6FFD9DF6
		mov	edx, [esp+9Ch+var_7C]
		mov	eax, edi
		shl	eax, 4
		lea	esi, [edx+eax-8]
		jmp	short loc_6FFD9443
; ---------------------------------------------------------------------------

loc_6FFD9438:				; CODE XREF: sub_6FFD90B0+39Aj
					; sub_6FFD90B0+3B2j
		sub	esi, 10h
		test	edi, edi
		jz	loc_6FFD9DF6

loc_6FFD9443:				; CODE XREF: sub_6FFD90B0+386j
		mov	ebp, [esi]
		sub	edi, 1
		test	ebp, ebp
		jnz	short loc_6FFD9438
		mov	eax, ebx
		mov	edx, 20h
		call	sub_6FFD6B20
		mov	edx, [esi-4]
		mov	eax, ebx
		call	sub_6FFDA3F0
		jmp	short loc_6FFD9438
; ---------------------------------------------------------------------------

loc_6FFD9464:				; CODE XREF: sub_6FFD90B0:loc_6FFD9118j
					; DATA XREF: .rdata:off_6FFF8CA8o
		mov	edx, offset aJavaClassFor ; jumptable 6FFD9118 case 18
		jmp	loc_6FFD9124
; ---------------------------------------------------------------------------

loc_6FFD946E:				; CODE XREF: sub_6FFD90B0:loc_6FFD9118j
					; DATA XREF: .rdata:off_6FFF8CA8o
		mov	edx, offset aGuardVariableF ; jumptable	6FFD9118 case 19
		jmp	loc_6FFD9124
; ---------------------------------------------------------------------------

loc_6FFD9478:				; CODE XREF: sub_6FFD90B0:loc_6FFD9118j
					; DATA XREF: .rdata:off_6FFF8CA8o
		cmp	word ptr [edx+0Ah], 0 ;	jumptable 6FFD9118 case	40
		jnz	loc_6FFD9C29

loc_6FFD9483:				; CODE XREF: sub_6FFD90B0+B85j
		mov	edx, [ebp+4]
		cmp	dword ptr [edx+4], offset off_6FFF9040
		jz	short loc_6FFD94A2
		mov	eax, ebx
		call	sub_6FFD90B0
		mov	edx, 20h
		mov	eax, ebx
		call	sub_6FFD6B20

loc_6FFD94A2:				; CODE XREF: sub_6FFD90B0+3DDj
		cmp	word ptr [ebp+8], 0
		jz	loc_6FFD9C18
		mov	edx, offset a_accum ; "_Accum"
		mov	eax, ebx
		call	sub_6FFD8880
		jmp	loc_6FFD90F5	; jumptable 6FFD9D89 default case
; ---------------------------------------------------------------------------

loc_6FFD94BE:				; CODE XREF: sub_6FFD90B0:loc_6FFD9118j
					; DATA XREF: .rdata:off_6FFF8CA8o
		mov	edx, [edx+4]	; jumptable 6FFD9118 cases 41,42
		test	edx, edx
		jz	short loc_6FFD94CC
		mov	eax, ebx
		call	sub_6FFD90B0

loc_6FFD94CC:				; CODE XREF: sub_6FFD90B0+413j
		mov	eax, [ebp+8]
		test	eax, eax
		jz	loc_6FFD90F5	; jumptable 6FFD9D89 default case
		mov	eax, [ebx+104h]
		cmp	eax, 0FDh
		ja	loc_6FFD9CB0

loc_6FFD94E8:				; CODE XREF: sub_6FFD90B0+C30j
		mov	edx, offset asc_6FFF8C10 ; ", "
		mov	eax, ebx
		call	sub_6FFD8880
		mov	edx, [ebp+8]
		mov	eax, ebx
		mov	esi, [ebx+124h]
		mov	edi, [ebx+104h]
		call	sub_6FFD90B0
		cmp	[ebx+124h], esi
		jnz	loc_6FFD90F5	; jumptable 6FFD9D89 default case
		mov	eax, [ebx+104h]
		cmp	eax, edi
		jnz	loc_6FFD90F5	; jumptable 6FFD9D89 default case
		sub	eax, 2
		mov	[ebx+104h], eax
		jmp	loc_6FFD90F5	; jumptable 6FFD9D89 default case
; ---------------------------------------------------------------------------

loc_6FFD9532:				; CODE XREF: sub_6FFD90B0:loc_6FFD9118j
					; DATA XREF: .rdata:off_6FFF8CA8o
		mov	edi, [ebx+118h]	; jumptable 6FFD9118 cases 26-34

loc_6FFD9538:				; CODE XREF: sub_6FFD90B0+754j
					; sub_6FFD90B0+764j ...
		lea	eax, [esp+9Ch+var_64]
		mov	[ebx+118h], eax
		mov	eax, [ebx+114h]
		mov	dword ptr [esp+9Ch+var_64], edi
		mov	[esp+9Ch+var_60], ebp
		mov	[esp+9Ch+var_5C], 0
		mov	[esp+9Ch+var_58], eax
		mov	edx, [ebp+4]
		mov	eax, ebx
		call	sub_6FFD90B0
		mov	esi, [esp+9Ch+var_5C]
		test	esi, esi
		jnz	short loc_6FFD9577
		mov	edx, ebp
		mov	eax, ebx
		call	sub_6FFDA3F0

loc_6FFD9577:				; CODE XREF: sub_6FFD90B0+4BCj
					; sub_6FFD90B0+71Fj ...
		mov	eax, dword ptr [esp+9Ch+var_64]
		mov	[ebx+118h], eax
		jmp	loc_6FFD90F5	; jumptable 6FFD9D89 default case
; ---------------------------------------------------------------------------

loc_6FFD9586:				; CODE XREF: sub_6FFD90B0:loc_6FFD9118j
					; DATA XREF: .rdata:off_6FFF8CA8o
		mov	eax, ebx	; jumptable 6FFD9118 case 45
		mov	edx, offset aOperator ;	"operator "
		call	sub_6FFD8880
		mov	edx, ebp
		mov	eax, ebx
		call	sub_6FFDA4E0
		jmp	loc_6FFD90F5	; jumptable 6FFD9D89 default case
; ---------------------------------------------------------------------------

loc_6FFD95A0:				; CODE XREF: sub_6FFD90B0:loc_6FFD9118j
					; DATA XREF: .rdata:off_6FFF8CA8o
		mov	edx, [edx+4]	; jumptable 6FFD9118 case 46
		cmp	dword ptr [edx], 2Dh
		jz	loc_6FFD9C4C
		mov	eax, ebx
		xchg	ax, ax
		call	sub_6FFDA680

loc_6FFD95B5:				; CODE XREF: sub_6FFD90B0+BBEj
		mov	edx, [ebp+8]
		mov	eax, ebx
		call	sub_6FFDA760
		jmp	loc_6FFD90F5	; jumptable 6FFD9D89 default case
; ---------------------------------------------------------------------------

loc_6FFD95C4:				; CODE XREF: sub_6FFD90B0:loc_6FFD9118j
					; DATA XREF: .rdata:off_6FFF8CA8o
		mov	eax, [edx+8]	; jumptable 6FFD9118 case 47
		cmp	dword ptr [eax], 30h
		jnz	loc_6FFD90EB	; jumptable 6FFD9118 default case
		mov	edx, [edx+4]
		cmp	dword ptr [edx], 2Bh
		jz	loc_6FFD9E62

loc_6FFD95DC:				; CODE XREF: sub_6FFD90B0+DB9j
					; sub_6FFD90B0+DC5j ...
		mov	edx, [eax+4]
		mov	eax, ebx
		mov	edi, offset aIx	; "ix"
		call	sub_6FFDA760
		mov	edx, [ebp+4]
		mov	ecx, 3
		mov	eax, [edx+4]
		mov	eax, [eax]
		mov	[esp+9Ch+var_7C], eax
		mov	esi, eax
		repe cmpsb
		jz	loc_6FFD9E38
		mov	esi, [esp+9Ch+var_7C]
		mov	edi, offset aCl	; "cl"
		mov	ecx, 3
		repe cmpsb
		jnz	loc_6FFD9EEB

loc_6FFD961C:				; CODE XREF: sub_6FFD90B0+E45j
		mov	eax, [ebp+8]
		mov	edx, [eax+8]
		mov	eax, ebx
		call	sub_6FFDA760

loc_6FFD9629:				; CODE XREF: sub_6FFD90B0+DADj
		mov	eax, [ebp+4]
		cmp	dword ptr [eax], 2Bh
		jnz	loc_6FFD90F5	; jumptable 6FFD9D89 default case
		mov	eax, [eax+4]
		cmp	dword ptr [eax+8], 1
		jnz	loc_6FFD90F5	; jumptable 6FFD9D89 default case
		mov	eax, [eax+4]
		cmp	byte ptr [eax],	3Eh
		jnz	loc_6FFD90F5	; jumptable 6FFD9D89 default case

loc_6FFD964E:				; CODE XREF: sub_6FFD90B0+AAEj
		mov	edx, 29h
		mov	eax, ebx
		call	sub_6FFD6B20
		jmp	loc_6FFD90F5	; jumptable 6FFD9D89 default case
; ---------------------------------------------------------------------------

loc_6FFD965F:				; CODE XREF: sub_6FFD90B0:loc_6FFD9118j
					; DATA XREF: .rdata:off_6FFF8CA8o
		movsx	edx, byte ptr [edx+4] ;	jumptable 6FFD9118 case	56
		mov	eax, ebx
		call	sub_6FFD6B20
		jmp	loc_6FFD90F5	; jumptable 6FFD9D89 default case
; ---------------------------------------------------------------------------

loc_6FFD966F:				; CODE XREF: sub_6FFD90B0:loc_6FFD9118j
					; DATA XREF: .rdata:off_6FFF8CA8o
		mov	esi, [ebx+118h]	; jumptable 6FFD9118 case 38
		lea	ecx, [esp+9Ch+var_64]
		mov	eax, [ebx+114h]
		mov	[esp+9Ch+var_7C], ecx
		mov	[ebx+118h], ecx
		mov	[esp+9Ch+var_78], esi
		mov	[esp+9Ch+var_58], eax
		mov	eax, [esp+9Ch+var_78]
		mov	dword ptr [esp+9Ch+var_64], esi
		mov	esi, ecx
		mov	[esp+9Ch+var_60], edx
		mov	[esp+9Ch+var_5C], 0
		test	eax, eax
		jz	loc_6FFD9EFA
		mov	edx, [esp+9Ch+var_78]
		mov	eax, [edx+4]
		mov	eax, [eax]
		sub	eax, 17h
		cmp	eax, 2
		ja	loc_6FFD9EFA
		mov	eax, edx
		mov	edi, 1
		mov	[esp+9Ch+var_74], ebp
		jmp	short loc_6FFD96DE
; ---------------------------------------------------------------------------

loc_6FFD96D1:				; CODE XREF: sub_6FFD90B0+67Dj
		mov	edx, [eax+4]
		mov	edx, [edx]
		sub	edx, 17h
		cmp	edx, 2
		ja	short loc_6FFD972F

loc_6FFD96DE:				; CODE XREF: sub_6FFD90B0+61Fj
		mov	ebp, [eax+8]
		test	ebp, ebp
		jnz	short loc_6FFD9729
		cmp	edi, 3
		ja	loc_6FFD90EB	; jumptable 6FFD9118 default case
		mov	ebp, [eax]
		mov	edx, edi
		add	edi, 1
		shl	edx, 4
		lea	ecx, [esp+edx+9Ch+var_64]
		mov	dword ptr [esp+edx+9Ch+var_64],	ebp
		mov	ebp, [eax+4]
		mov	[ecx+4], ebp
		mov	ebp, [eax+8]
		mov	[ecx+8], ebp
		mov	ebp, [eax+0Ch]
		mov	[ecx+0Ch], ebp
		mov	dword ptr [esp+edx+9Ch+var_64],	esi
		mov	esi, [esp+9Ch+var_7C]
		mov	dword ptr [eax+8], 1
		add	esi, edx
		mov	[ebx+118h], esi

loc_6FFD9729:				; CODE XREF: sub_6FFD90B0+633j
		mov	eax, [eax]
		test	eax, eax
		jnz	short loc_6FFD96D1

loc_6FFD972F:				; CODE XREF: sub_6FFD90B0+62Cj
		mov	ebp, [esp+9Ch+var_74]

loc_6FFD9733:				; CODE XREF: sub_6FFD90B0+E50j
		mov	edx, [ebp+8]
		mov	eax, ebx
		call	sub_6FFD90B0
		mov	ecx, [esp+9Ch+var_78]
		mov	[ebx+118h], ecx
		mov	ecx, [esp+9Ch+var_5C]
		test	ecx, ecx
		jnz	loc_6FFD90F5	; jumptable 6FFD9D89 default case
		cmp	edi, 1
		jz	short loc_6FFD9783
		mov	edx, [esp+9Ch+var_7C]
		mov	eax, edi
		shl	eax, 4
		lea	esi, [edx+eax-0Ch]

loc_6FFD9765:				; CODE XREF: sub_6FFD90B0+6C7j
		mov	edx, [esi]
		sub	edi, 1
		mov	eax, ebx
		sub	esi, 10h
		call	sub_6FFDA3F0
		cmp	edi, 1
		ja	short loc_6FFD9765
		mov	ecx, [ebx+118h]
		mov	[esp+9Ch+var_78], ecx

loc_6FFD9783:				; CODE XREF: sub_6FFD90B0+6A6j
		mov	ecx, [esp+9Ch+var_78]
		mov	edx, ebp
		mov	eax, ebx
		call	sub_6FFD8940
		jmp	loc_6FFD90F5	; jumptable 6FFD9D89 default case
; ---------------------------------------------------------------------------

loc_6FFD9795:				; CODE XREF: sub_6FFD90B0:loc_6FFD9118j
					; DATA XREF: .rdata:off_6FFF8CA8o
		mov	eax, [ebx+118h]	; jumptable 6FFD9118 case 39
		mov	[esp+9Ch+var_60], edx
		mov	[esp+9Ch+var_5C], 0
		mov	dword ptr [esp+9Ch+var_64], eax
		lea	eax, [esp+9Ch+var_64]
		mov	[ebx+118h], eax
		mov	eax, [ebx+114h]
		mov	[esp+9Ch+var_58], eax
		mov	edx, [edx+8]
		mov	eax, ebx
		call	sub_6FFD90B0
		mov	edx, [esp+9Ch+var_5C]
		test	edx, edx
		jnz	loc_6FFD9577
		mov	eax, ebx
		mov	edx, 20h
		call	sub_6FFD6B20
		mov	edx, [ebp+4]
		mov	eax, ebx
		call	sub_6FFD90B0
		mov	edx, offset asc_6FFF8BF8 ; "::*"
		mov	eax, ebx
		call	sub_6FFD8880
		jmp	loc_6FFD9577
; ---------------------------------------------------------------------------

loc_6FFD97FC:				; CODE XREF: sub_6FFD90B0:loc_6FFD9118j
					; DATA XREF: .rdata:off_6FFF8CA8o
		mov	edi, [ebx+118h]	; jumptable 6FFD9118 cases 23-25
		test	edi, edi
		jz	loc_6FFD9538
		mov	edx, edi
		jmp	short loc_6FFD981A
; ---------------------------------------------------------------------------
		align 10h

loc_6FFD9810:				; CODE XREF: sub_6FFD90B0+76Fj
					; sub_6FFD90B0+784j
		mov	edx, [edx]
		test	edx, edx
		jz	loc_6FFD9538

loc_6FFD981A:				; CODE XREF: sub_6FFD90B0+75Cj
		mov	ecx, [edx+8]
		test	ecx, ecx
		jnz	short loc_6FFD9810
		mov	ecx, [edx+4]
		mov	ecx, [ecx]
		lea	esi, [ecx-17h]
		cmp	esi, 2
		ja	loc_6FFD9538
		cmp	eax, ecx
		jnz	short loc_6FFD9810
		jmp	loc_6FFD912B	; jumptable 6FFD9118 case 36
; ---------------------------------------------------------------------------

loc_6FFD983B:				; CODE XREF: sub_6FFD90B0:loc_6FFD9118j
					; DATA XREF: .rdata:off_6FFF8CA8o
		mov	edx, offset aParm ; jumptable 6FFD9118 case 6
		mov	eax, ebx
		call	sub_6FFD8880
		mov	eax, [ebp+4]
		lea	esi, [esp+9Ch+var_64]
		mov	[esp+9Ch+var_98], offset aLd ; "%ld"
		mov	[esp+9Ch+var_9C], esi ;	char *
		mov	[esp+9Ch+var_94], eax
		call	sprintf
		mov	edx, esi
		mov	eax, ebx
		call	sub_6FFD8880
		jmp	loc_6FFD90F5	; jumptable 6FFD9D89 default case
; ---------------------------------------------------------------------------

loc_6FFD9870:				; CODE XREF: sub_6FFD90B0:loc_6FFD9118j
					; DATA XREF: .rdata:off_6FFF8CA8o
		mov	edx, offset aOperator_0	; jumptable 6FFD9118 case 43
		mov	eax, ebx
		call	sub_6FFD8880
		mov	eax, [ebp+4]
		mov	edx, [eax+4]
		movzx	ecx, byte ptr [edx]
		sub	ecx, 61h
		cmp	cl, 19h
		ja	short loc_6FFD989F
		mov	edx, 20h
		mov	eax, ebx
		call	sub_6FFD6B20
		mov	eax, [ebp+4]
		mov	edx, [eax+4]

loc_6FFD989F:				; CODE XREF: sub_6FFD90B0+7DBj
		mov	ecx, [eax+8]
		mov	eax, ebx
		call	sub_6FFD87D0
		jmp	loc_6FFD90F5	; jumptable 6FFD9D89 default case
; ---------------------------------------------------------------------------

loc_6FFD98AE:				; CODE XREF: sub_6FFD90B0:loc_6FFD9118j
					; DATA XREF: .rdata:off_6FFF8CA8o
		mov	edx, offset aOperator ;	jumptable 6FFD9118 case	44
		jmp	loc_6FFD9152
; ---------------------------------------------------------------------------

loc_6FFD98B8:				; CODE XREF: sub_6FFD90B0:loc_6FFD9118j
					; DATA XREF: .rdata:off_6FFF8CA8o
		mov	edx, offset aReferenceTempo ; jumptable	6FFD9118 case 20
		jmp	loc_6FFD9124
; ---------------------------------------------------------------------------

loc_6FFD98C2:				; CODE XREF: sub_6FFD90B0:loc_6FFD9118j
					; DATA XREF: .rdata:off_6FFF8CA8o
		mov	edx, offset aHiddenAliasFor ; jumptable	6FFD9118 case 21
		jmp	loc_6FFD9124
; ---------------------------------------------------------------------------

loc_6FFD98CC:				; CODE XREF: sub_6FFD90B0:loc_6FFD9118j
					; DATA XREF: .rdata:off_6FFF8CA8o
		mov	edx, offset aGlobalDestruct ; jumptable	6FFD9118 case 59
		jmp	loc_6FFD9124
; ---------------------------------------------------------------------------

loc_6FFD98D6:				; CODE XREF: sub_6FFD90B0:loc_6FFD9118j
					; DATA XREF: .rdata:off_6FFF8CA8o
		mov	edx, [edx+4]	; jumptable 6FFD9118 cases 52,53
		xor	esi, esi
		cmp	dword ptr [edx], 23h
		jnz	short loc_6FFD98FD
		mov	edx, [edx+4]
		mov	esi, [edx+10h]
		cmp	esi, 1
		jb	short loc_6FFD98FD
		cmp	esi, 6
		jbe	loc_6FFD9D60
		cmp	esi, 7
		jz	loc_6FFD9D15

loc_6FFD98FD:				; CODE XREF: sub_6FFD90B0+82Ej
					; sub_6FFD90B0+839j ...
		mov	edx, 28h
		mov	eax, ebx
		call	sub_6FFD6B20
		mov	edx, [ebp+4]
		mov	eax, ebx
		call	sub_6FFD90B0
		mov	edx, 29h
		mov	eax, ebx
		call	sub_6FFD6B20
		cmp	dword ptr [ebp+0], 35h
		jz	loc_6FFD9E27

loc_6FFD9929:				; CODE XREF: sub_6FFD90B0+D83j
		cmp	esi, 8
		jnz	loc_6FFD9159	; jumptable 6FFD9118 case 7
		mov	eax, ebx
		mov	edx, 5Bh
		call	sub_6FFD6B20
		mov	edx, [ebp+8]
		mov	eax, ebx
		call	sub_6FFD90B0
		mov	edx, 5Dh
		mov	eax, ebx
		call	sub_6FFD6B20
		jmp	loc_6FFD90F5	; jumptable 6FFD9D89 default case
; ---------------------------------------------------------------------------

loc_6FFD9959:				; CODE XREF: sub_6FFD90B0:loc_6FFD9118j
					; DATA XREF: .rdata:off_6FFF8CA8o
		mov	eax, [ebx+118h]	; jumptable 6FFD9118 case 4
		test	byte ptr [ebx],	4
		mov	dword ptr [ebx+118h], 0
		mov	[esp+9Ch+var_7C], eax
		mov	edx, [edx+4]
		jz	short loc_6FFD9985
		mov	esi, [edx]
		test	esi, esi
		jnz	short loc_6FFD9985
		cmp	dword ptr [edx+8], 6
		jz	loc_6FFD9E99

loc_6FFD9985:				; CODE XREF: sub_6FFD90B0+8C3j
					; sub_6FFD90B0+8C9j ...
		mov	eax, ebx
		call	sub_6FFD90B0
		cmp	byte ptr [ebx+108h], 3Ch
		jz	loc_6FFD9E16

loc_6FFD9999:				; CODE XREF: sub_6FFD90B0+D72j
		mov	edx, 3Ch
		mov	eax, ebx
		call	sub_6FFD6B20
		mov	edx, [ebp+8]
		mov	eax, ebx
		call	sub_6FFD90B0
		cmp	byte ptr [ebx+108h], 3Eh
		jz	loc_6FFD9E05

loc_6FFD99BC:				; CODE XREF: sub_6FFD90B0+D61j
		mov	edx, 3Eh
		mov	eax, ebx
		call	sub_6FFD6B20

loc_6FFD99C8:				; CODE XREF: sub_6FFD90B0+E14j
		mov	edx, [esp+9Ch+var_7C]
		mov	[ebx+118h], edx
		jmp	loc_6FFD90F5	; jumptable 6FFD9D89 default case
; ---------------------------------------------------------------------------

loc_6FFD99D7:				; CODE XREF: sub_6FFD90B0:loc_6FFD9118j
					; DATA XREF: .rdata:off_6FFF8CA8o
		mov	esi, [ebx+114h]	; jumptable 6FFD9118 case 5
		test	esi, esi
		jz	loc_6FFD9DE7
		mov	eax, [esi+4]
		mov	edx, [edx+4]
		mov	eax, [eax+8]
		test	eax, eax
		jnz	short loc_6FFD9A0D
		jmp	loc_6FFD90EB	; jumptable 6FFD9118 default case
; ---------------------------------------------------------------------------

loc_6FFD99F7:				; CODE XREF: sub_6FFD90B0+960j
		test	edx, edx
		jle	loc_6FFD9C73
		mov	eax, [eax+8]
		sub	edx, 1
		test	eax, eax
		jz	loc_6FFD90EB	; jumptable 6FFD9118 default case

loc_6FFD9A0D:				; CODE XREF: sub_6FFD90B0+940j
		cmp	dword ptr [eax], 2Ah
		jz	short loc_6FFD99F7
		jmp	loc_6FFD90EB	; jumptable 6FFD9118 default case
; ---------------------------------------------------------------------------

loc_6FFD9A17:				; CODE XREF: sub_6FFD90B0:loc_6FFD9118j
					; DATA XREF: .rdata:off_6FFF8CA8o
		mov	eax, [edx+8]	; jumptable 6FFD9118 case 49
		cmp	dword ptr [eax], 32h
		lea	esi, [esi+0]
		jnz	loc_6FFD90EB	; jumptable 6FFD9118 default case
		mov	edx, [eax+8]
		cmp	dword ptr [edx], 33h
		jnz	loc_6FFD90EB	; jumptable 6FFD9118 default case
		mov	edx, [eax+4]
		mov	eax, ebx
		call	sub_6FFDA760
		mov	edx, [ebp+4]
		mov	eax, ebx
		call	sub_6FFDA680
		mov	eax, [ebp+8]
		mov	eax, [eax+8]
		mov	edx, [eax+4]
		mov	eax, ebx
		call	sub_6FFDA760
		mov	eax, ebx
		mov	edx, offset asc_6FFF8C29 ; " : "
		call	sub_6FFD8880
		mov	eax, [ebp+8]
		mov	eax, [eax+8]
		mov	edx, [eax+8]
		mov	eax, ebx
		call	sub_6FFDA760
		jmp	loc_6FFD90F5	; jumptable 6FFD9D89 default case
; ---------------------------------------------------------------------------

loc_6FFD9A77:				; CODE XREF: sub_6FFD90B0:loc_6FFD9118j
					; DATA XREF: .rdata:off_6FFF8CA8o
		test	byte ptr [ebx],	20h ; jumptable	6FFD9118 case 37
		jnz	loc_6FFD9C3A

loc_6FFD9A80:				; CODE XREF: sub_6FFD90B0+B97j
		mov	ecx, [ebp+4]
		test	ecx, ecx
		jz	short loc_6FFD9AE6
		mov	eax, [ebx+118h]
		mov	[esp+9Ch+var_60], ebp
		mov	[esp+9Ch+var_5C], 0
		mov	dword ptr [esp+9Ch+var_64], eax
		lea	eax, [esp+9Ch+var_64]
		mov	[ebx+118h], eax
		mov	eax, [ebx+114h]
		mov	[esp+9Ch+var_58], eax
		mov	edx, [ebp+4]
		mov	eax, ebx
		call	sub_6FFD90B0
		mov	edx, [esp+9Ch+var_5C]
		mov	eax, dword ptr [esp+9Ch+var_64]
		test	edx, edx
		mov	[ebx+118h], eax
		jnz	loc_6FFD90F5	; jumptable 6FFD9D89 default case
		test	byte ptr [ebx],	20h
		jnz	loc_6FFD90F5	; jumptable 6FFD9D89 default case
		mov	edx, 20h
		mov	eax, ebx
		call	sub_6FFD6B20

loc_6FFD9AE6:				; CODE XREF: sub_6FFD90B0+9D5j
		test	byte ptr [ebx],	20h
		jnz	loc_6FFD90F5	; jumptable 6FFD9D89 default case
		mov	ecx, [ebx+118h]
		mov	edx, ebp
		mov	eax, ebx
		call	sub_6FFD8D80
		jmp	loc_6FFD90F5	; jumptable 6FFD9D89 default case
; ---------------------------------------------------------------------------

loc_6FFD9B03:				; CODE XREF: sub_6FFD90B0:loc_6FFD9118j
					; DATA XREF: .rdata:off_6FFF8CA8o
		mov	edx, offset aGlobalConstruc ; jumptable	6FFD9118 case 58
		jmp	loc_6FFD9124
; ---------------------------------------------------------------------------

loc_6FFD9B0D:				; CODE XREF: sub_6FFD90B0:loc_6FFD9118j
					; DATA XREF: .rdata:off_6FFF8CA8o
		mov	edx, offset aVirtualThunkTo ; jumptable	6FFD9118 case 16
		jmp	loc_6FFD9124
; ---------------------------------------------------------------------------

loc_6FFD9B17:				; CODE XREF: sub_6FFD90B0:loc_6FFD9118j
					; DATA XREF: .rdata:off_6FFF8CA8o
		mov	edx, offset aCovariantRetur ; jumptable	6FFD9118 case 17
		jmp	loc_6FFD9124
; ---------------------------------------------------------------------------

loc_6FFD9B21:				; CODE XREF: sub_6FFD90B0:loc_6FFD9118j
					; DATA XREF: .rdata:off_6FFF8CA8o
		test	byte ptr [ebx],	4 ; jumptable 6FFD9118 case 35
		jnz	loc_6FFD9C03
		mov	eax, [edx+4]
		mov	ecx, [eax+4]
		mov	edx, [eax]
		mov	eax, ebx
		call	sub_6FFD87D0
		jmp	loc_6FFD90F5	; jumptable 6FFD9D89 default case
; ---------------------------------------------------------------------------

loc_6FFD9B3E:				; CODE XREF: sub_6FFD90B0:loc_6FFD9118j
					; DATA XREF: .rdata:off_6FFF8CA8o
		mov	edx, offset aJavaResource ; jumptable 6FFD9118 case 54
		jmp	loc_6FFD9124
; ---------------------------------------------------------------------------

loc_6FFD9B48:				; CODE XREF: sub_6FFD90B0:loc_6FFD9118j
					; DATA XREF: .rdata:off_6FFF8CA8o
		mov	eax, ebx	; jumptable 6FFD9118 case 57
		mov	edx, offset aDecltype ;	"decltype ("
		call	sub_6FFD8880
		mov	edx, [ebp+4]
		mov	eax, ebx
		call	sub_6FFD90B0
		jmp	loc_6FFD964E
; ---------------------------------------------------------------------------

loc_6FFD9B63:				; CODE XREF: sub_6FFD90B0:loc_6FFD9118j
					; DATA XREF: .rdata:off_6FFF8CA8o
		mov	edx, [edx+4]	; jumptable 6FFD9118 case 55
		mov	eax, ebx
		call	sub_6FFD90B0
		mov	edx, [ebp+8]
		mov	eax, ebx
		call	sub_6FFD90B0
		jmp	loc_6FFD90F5	; jumptable 6FFD9D89 default case
; ---------------------------------------------------------------------------

loc_6FFD9B7C:				; CODE XREF: sub_6FFD90B0+1A1j
		cmp	byte ptr [eax+1], 5Fh
		lea	esi, [eax+1]
		jnz	loc_6FFD9257
		cmp	byte ptr [eax+2], 55h
		lea	esi, [esi+0]
		jnz	loc_6FFD9257
		lea	ebp, [eax+3]
		cmp	edi, ebp
		jbe	loc_6FFD9257
		xor	ecx, ecx
		mov	[esp+9Ch+var_7C], esi
		mov	esi, ecx
		jmp	short loc_6FFD9BC2
; ---------------------------------------------------------------------------

loc_6FFD9BAB:				; CODE XREF: sub_6FFD90B0+B1Cj
		movsx	eax, al
		sub	eax, 30h

loc_6FFD9BB1:				; CODE XREF: sub_6FFD90B0+B2Cj
					; sub_6FFD90B0+B40j
		add	ebp, 1
		cmp	edi, ebp
		jbe	loc_6FFD9E90
		shl	esi, 4
		lea	esi, [eax+esi]

loc_6FFD9BC2:				; CODE XREF: sub_6FFD90B0+AF9j
		movzx	eax, byte ptr [ebp+0]
		lea	ecx, [eax-30h]
		cmp	cl, 9
		jbe	short loc_6FFD9BAB
		lea	ecx, [eax-41h]
		cmp	cl, 5
		ja	short loc_6FFD9BDE
		movsx	eax, al
		sub	eax, 37h
		jmp	short loc_6FFD9BB1
; ---------------------------------------------------------------------------

loc_6FFD9BDE:				; CODE XREF: sub_6FFD90B0+B24j
		lea	ecx, [eax-61h]
		cmp	cl, 5
		ja	loc_6FFD9F4A
		movsx	eax, al
		sub	eax, 57h
		jmp	short loc_6FFD9BB1
; ---------------------------------------------------------------------------

loc_6FFD9BF2:				; CODE XREF: sub_6FFD90B0+1D9j
		mov	edx, 2Eh
		mov	eax, ebx
		call	sub_6FFD6B20
		jmp	loc_6FFD9159	; jumptable 6FFD9118 case 7
; ---------------------------------------------------------------------------

loc_6FFD9C03:				; CODE XREF: sub_6FFD90B0+A74j
		mov	eax, [edx+4]
		mov	ecx, [eax+0Ch]
		mov	edx, [eax+8]
		mov	eax, ebx
		call	sub_6FFD87D0
		jmp	loc_6FFD90F5	; jumptable 6FFD9D89 default case
; ---------------------------------------------------------------------------

loc_6FFD9C18:				; CODE XREF: sub_6FFD90B0+3F7j
		mov	edx, offset a_fract ; "_Fract"
		mov	eax, ebx
		call	sub_6FFD8880
		jmp	loc_6FFD90F5	; jumptable 6FFD9D89 default case
; ---------------------------------------------------------------------------

loc_6FFD9C29:				; CODE XREF: sub_6FFD90B0+3CDj
		mov	edx, offset a_sat ; "_Sat "
		mov	eax, ebx
		call	sub_6FFD8880
		jmp	loc_6FFD9483
; ---------------------------------------------------------------------------

loc_6FFD9C3A:				; CODE XREF: sub_6FFD90B0+9CAj
		mov	ecx, [ebx+118h]
		mov	eax, ebx
		call	sub_6FFD8D80
		jmp	loc_6FFD9A80
; ---------------------------------------------------------------------------

loc_6FFD9C4C:				; CODE XREF: sub_6FFD90B0+4F6j
		mov	eax, ebx
		mov	edx, 28h
		call	sub_6FFD6B20
		mov	edx, [ebp+4]
		mov	eax, ebx
		call	sub_6FFDA4E0
		mov	edx, 29h
		mov	eax, ebx
		call	sub_6FFD6B20
		jmp	loc_6FFD95B5
; ---------------------------------------------------------------------------

loc_6FFD9C73:				; CODE XREF: sub_6FFD90B0+949j
		test	eax, eax
		jz	loc_6FFD90EB	; jumptable 6FFD9118 default case
		test	edx, edx
		lea	esi, [esi+0]
		jnz	loc_6FFD90EB	; jumptable 6FFD9118 default case
		mov	edx, [eax+4]
		test	edx, edx
		jz	loc_6FFD90EB	; jumptable 6FFD9118 default case
		cmp	dword ptr [edx], 2Ah
		jz	short loc_6FFD9CE5

loc_6FFD9C96:				; CODE XREF: sub_6FFD90B0+E30j
		mov	eax, [esi]
		mov	[ebx+114h], eax
		mov	eax, ebx
		call	sub_6FFD90B0
		mov	[ebx+114h], esi
		jmp	loc_6FFD90F5	; jumptable 6FFD9D89 default case
; ---------------------------------------------------------------------------

loc_6FFD9CB0:				; CODE XREF: sub_6FFD90B0+432j
		mov	edx, [ebx+110h]
		mov	byte ptr [ebx+eax+4], 0
		mov	[esp+9Ch+var_98], eax
		lea	eax, [ebx+4]
		mov	[esp+9Ch+var_9C], eax
		mov	[esp+9Ch+var_94], edx
		call	dword ptr [ebx+10Ch]
		mov	dword ptr [ebx+104h], 0
		add	dword ptr [ebx+124h], 1
		jmp	loc_6FFD94E8
; ---------------------------------------------------------------------------

loc_6FFD9CE5:				; CODE XREF: sub_6FFD90B0+BE4j
		mov	eax, [ebx+120h]
		test	eax, eax
		jg	short loc_6FFD9D06
		jmp	loc_6FFD9EC9
; ---------------------------------------------------------------------------

loc_6FFD9CF4:				; CODE XREF: sub_6FFD90B0+C5Ej
		cmp	dword ptr [edx], 2Ah
		jnz	loc_6FFD90EB	; jumptable 6FFD9118 default case
		test	eax, eax
		nop
		jle	loc_6FFD9EC9

loc_6FFD9D06:				; CODE XREF: sub_6FFD90B0+C3Dj
		mov	edx, [edx+8]
		sub	eax, 1
		test	edx, edx
		jnz	short loc_6FFD9CF4
		jmp	loc_6FFD90EB	; jumptable 6FFD9118 default case
; ---------------------------------------------------------------------------

loc_6FFD9D15:				; CODE XREF: sub_6FFD90B0+847j
		mov	edx, [ebp+8]
		mov	ecx, [edx]
		test	ecx, ecx
		jnz	loc_6FFD98FD
		cmp	dword ptr [edx+8], 1
		jnz	loc_6FFD98FD
		cmp	eax, 34h
		jnz	loc_6FFD98FD
		mov	eax, [edx+4]
		movzx	eax, byte ptr [eax]
		cmp	al, 30h
		jz	loc_6FFD9F9E
		cmp	al, 31h
		jnz	loc_6FFD98FD
		mov	edx, offset aTrue ; "true"
		mov	eax, ebx
		call	sub_6FFD8880
		jmp	loc_6FFD90F5	; jumptable 6FFD9D89 default case
; ---------------------------------------------------------------------------
		align 10h

loc_6FFD9D60:				; CODE XREF: sub_6FFD90B0+83Ej
		mov	edx, [ebp+8]
		mov	edi, [edx]
		test	edi, edi
		jnz	loc_6FFD98FD
		cmp	eax, 35h
		jz	loc_6FFD9F8A

loc_6FFD9D76:				; CODE XREF: sub_6FFD90B0+EE9j
		mov	eax, ebx
		sub	esi, 2
		call	sub_6FFD90B0
		cmp	esi, 4		; switch 5 cases
		ja	loc_6FFD90F5	; jumptable 6FFD9D89 default case
		jmp	ds:off_6FFF8D9C[esi*4] ; switch	jump
; ---------------------------------------------------------------------------

loc_6FFD9D90:				; CODE XREF: sub_6FFD90B0+CD9j
					; DATA XREF: .rdata:off_6FFF8D9Co
		mov	edx, offset aLl	; jumptable 6FFD9D89 case 3
		mov	eax, ebx
		call	sub_6FFD8880
		jmp	loc_6FFD90F5	; jumptable 6FFD9D89 default case
; ---------------------------------------------------------------------------

loc_6FFD9DA1:				; CODE XREF: sub_6FFD90B0+CD9j
					; DATA XREF: .rdata:off_6FFF8D9Co
		mov	edx, offset aUl	; jumptable 6FFD9D89 case 2
		mov	eax, ebx
		call	sub_6FFD8880
		jmp	loc_6FFD90F5	; jumptable 6FFD9D89 default case
; ---------------------------------------------------------------------------

loc_6FFD9DB2:				; CODE XREF: sub_6FFD90B0+CD9j
					; DATA XREF: .rdata:off_6FFF8D9Co
		mov	edx, 6Ch	; jumptable 6FFD9D89 case 1
		mov	eax, ebx
		call	sub_6FFD6B20
		xchg	ax, ax
		jmp	loc_6FFD90F5	; jumptable 6FFD9D89 default case
; ---------------------------------------------------------------------------

loc_6FFD9DC5:				; CODE XREF: sub_6FFD90B0+CD9j
					; DATA XREF: .rdata:off_6FFF8D9Co
		mov	edx, 75h	; jumptable 6FFD9D89 case 0
		mov	eax, ebx
		call	sub_6FFD6B20
		jmp	loc_6FFD90F5	; jumptable 6FFD9D89 default case
; ---------------------------------------------------------------------------

loc_6FFD9DD6:				; CODE XREF: sub_6FFD90B0+CD9j
					; DATA XREF: .rdata:off_6FFF8D9Co
		mov	edx, offset aUll ; jumptable 6FFD9D89 case 4
		mov	eax, ebx
		call	sub_6FFD8880
		jmp	loc_6FFD90F5	; jumptable 6FFD9D89 default case
; ---------------------------------------------------------------------------

loc_6FFD9DE7:				; CODE XREF: sub_6FFD90B0+92Fj
		mov	dword ptr [ebx+11Ch], 1
		jmp	loc_6FFD90EB	; jumptable 6FFD9118 default case
; ---------------------------------------------------------------------------

loc_6FFD9DF6:				; CODE XREF: sub_6FFD90B0+373j
					; sub_6FFD90B0+38Dj
		mov	ecx, [esp+9Ch+var_74]
		mov	[ebx+118h], ecx
		jmp	loc_6FFD90F5	; jumptable 6FFD9D89 default case
; ---------------------------------------------------------------------------

loc_6FFD9E05:				; CODE XREF: sub_6FFD90B0+906j
		mov	edx, 20h
		mov	eax, ebx
		call	sub_6FFD6B20
		jmp	loc_6FFD99BC
; ---------------------------------------------------------------------------

loc_6FFD9E16:				; CODE XREF: sub_6FFD90B0+8E3j
		mov	edx, 20h
		mov	eax, ebx
		call	sub_6FFD6B20
		jmp	loc_6FFD9999
; ---------------------------------------------------------------------------

loc_6FFD9E27:				; CODE XREF: sub_6FFD90B0+873j
		mov	edx, 2Dh
		mov	eax, ebx
		call	sub_6FFD6B20
		jmp	loc_6FFD9929
; ---------------------------------------------------------------------------

loc_6FFD9E38:				; CODE XREF: sub_6FFD90B0+550j
		mov	eax, ebx
		mov	edx, 5Bh
		call	sub_6FFD6B20
		mov	eax, [ebp+8]
		mov	edx, [eax+8]
		mov	eax, ebx
		call	sub_6FFD90B0
		mov	edx, 5Dh
		mov	eax, ebx
		call	sub_6FFD6B20
		jmp	loc_6FFD9629
; ---------------------------------------------------------------------------

loc_6FFD9E62:				; CODE XREF: sub_6FFD90B0+526j
		mov	edx, [edx+4]
		cmp	dword ptr [edx+8], 1
		jnz	loc_6FFD95DC
		mov	edx, [edx+4]
		cmp	byte ptr [edx],	3Eh
		jnz	loc_6FFD95DC
		mov	eax, ebx
		mov	edx, 28h
		call	sub_6FFD6B20
		mov	eax, [ebp+8]
		jmp	loc_6FFD95DC
; ---------------------------------------------------------------------------
		align 10h

loc_6FFD9E90:				; CODE XREF: sub_6FFD90B0+B06j
		mov	esi, [esp+9Ch+var_7C]
		jmp	loc_6FFD9257
; ---------------------------------------------------------------------------

loc_6FFD9E99:				; CODE XREF: sub_6FFD90B0+8CFj
		mov	esi, [edx+4]
		mov	edi, offset aJarray ; "JArray"
		mov	ecx, 6
		repe cmpsb
		jnz	loc_6FFD9985
		mov	edx, [ebp+8]
		mov	eax, ebx
		call	sub_6FFD90B0
		mov	edx, offset asc_6FFF8AFE ; "[]"
		mov	eax, ebx
		call	sub_6FFD8880
		jmp	loc_6FFD99C8
; ---------------------------------------------------------------------------

loc_6FFD9EC9:				; CODE XREF: sub_6FFD90B0+C3Fj
					; sub_6FFD90B0+C50j
		test	edx, edx
		jz	loc_6FFD90EB	; jumptable 6FFD9118 default case
		test	eax, eax
		jnz	loc_6FFD90EB	; jumptable 6FFD9118 default case
		mov	edx, [edx+4]
		test	edx, edx
		xchg	ax, ax
		jnz	loc_6FFD9C96
		jmp	loc_6FFD90EB	; jumptable 6FFD9118 default case
; ---------------------------------------------------------------------------

loc_6FFD9EEB:				; CODE XREF: sub_6FFD90B0+566j
		mov	eax, ebx
		lea	esi, [esi+0]
		call	sub_6FFDA680
		jmp	loc_6FFD961C
; ---------------------------------------------------------------------------

loc_6FFD9EFA:				; CODE XREF: sub_6FFD90B0+5F9j
					; sub_6FFD90B0+60Ej
		mov	edi, 1
		nop
		jmp	loc_6FFD9733
; ---------------------------------------------------------------------------

loc_6FFD9F05:				; CODE XREF: sub_6FFD90B0+29Cj
		mov	ecx, [esp+9Ch+var_78]
		lea	eax, [esp+9Ch+var_24]
		mov	[ebx+114h], eax
		mov	[esp+9Ch+var_20], esi
		mov	[esp+9Ch+var_24], ecx
		jmp	loc_6FFD940E
; ---------------------------------------------------------------------------

loc_6FFD9F20:				; CODE XREF: sub_6FFD90B0+36Bj
		mov	eax, [esp+9Ch+var_24]
		mov	[ebx+114h], eax
		jmp	loc_6FFD9421
; ---------------------------------------------------------------------------

loc_6FFD9F2F:				; CODE XREF: sub_6FFD90B0+104j
		mov	edx, [ebp+4]
		mov	eax, ebx
		call	sub_6FFDA760
		mov	edx, offset a___ ; "..."
		mov	eax, ebx
		call	sub_6FFD8880
		jmp	loc_6FFD90F5	; jumptable 6FFD9D89 default case
; ---------------------------------------------------------------------------

loc_6FFD9F4A:				; CODE XREF: sub_6FFD90B0+B34j
		cmp	ebp, edi
		mov	ecx, esi
		mov	esi, [esp+9Ch+var_7C]
		jnb	loc_6FFD9257
		cmp	ecx, 0FFh
		xchg	ax, ax
		ja	loc_6FFD9257
		cmp	al, 5Fh
		jnz	loc_6FFD9257
		movsx	edx, cl
		mov	eax, ebx
		call	sub_6FFD6B20
		lea	esi, [ebp+1]
		jmp	loc_6FFD9261
; ---------------------------------------------------------------------------

loc_6FFD9F80:				; CODE XREF: sub_6FFD90B0+247j
		mov	edi, 1
		jmp	loc_6FFD9349
; ---------------------------------------------------------------------------

loc_6FFD9F8A:				; CODE XREF: sub_6FFD90B0+CC0j
		mov	edx, 2Dh
		mov	eax, ebx
		call	sub_6FFD6B20
		mov	edx, [ebp+8]
		jmp	loc_6FFD9D76
; ---------------------------------------------------------------------------

loc_6FFD9F9E:				; CODE XREF: sub_6FFD90B0+C8Dj
		mov	edx, offset aFalse ; "false"
		mov	eax, ebx
		call	sub_6FFD8880
		jmp	loc_6FFD90F5	; jumptable 6FFD9D89 default case
sub_6FFD90B0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_6FFD9FB0	proc near		; CODE XREF: .text:6FFDA278p
					; sub_6FFDA290+64p

var_184		= dword	ptr -184h
var_180		= dword	ptr -180h
var_17C		= dword	ptr -17Ch
var_174		= dword	ptr -174h
var_170		= byte ptr -170h
var_70		= dword	ptr -70h
var_6C		= byte ptr -6Ch
var_68		= dword	ptr -68h
var_64		= dword	ptr -64h
var_60		= dword	ptr -60h
var_5C		= dword	ptr -5Ch
var_58		= dword	ptr -58h
var_50		= dword	ptr -50h
var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		mov	ebx, eax
		sub	esp, 18Ch
		mov	[ebp+var_17C], edx
		mov	[ebp+var_180], ecx
		cmp	byte ptr [eax],	5Fh
		jz	loc_6FFDA180

loc_6FFD9FD3:				; CODE XREF: sub_6FFD9FB0+1D9j
		mov	edi, offset a_global_ ;	"_GLOBAL_"
		mov	ecx, 8
		mov	esi, ebx
		repe cmpsb
		jnz	short loc_6FFDA010
		movzx	eax, byte ptr [ebx+8]
		cmp	al, 5Fh
		jz	short loc_6FFD9FF3
		cmp	al, 2Eh
		jnz	loc_6FFDA170

loc_6FFD9FF3:				; CODE XREF: sub_6FFD9FB0+39j
					; sub_6FFD9FB0+1C8j
		movzx	eax, byte ptr [ebx+9]
		cmp	al, 49h
		setz	dl
		jz	short loc_6FFDA002
		cmp	al, 44h
		jnz	short loc_6FFDA010

loc_6FFDA002:				; CODE XREF: sub_6FFD9FB0+4Cj
		cmp	byte ptr [ebx+0Ah], 5Fh
		jz	loc_6FFDA236
		lea	esi, [esi+0]

loc_6FFDA010:				; CODE XREF: sub_6FFD9FB0+31j
					; sub_6FFD9FB0+50j ...
		xor	esi, esi
		xor	eax, eax
		test	byte ptr [ebp+var_17C],	10h
		jz	loc_6FFDA162

loc_6FFDA021:				; CODE XREF: sub_6FFD9FB0+1E0j
					; sub_6FFD9FB0+291j
		mov	[esp], ebx	; char *
		mov	edi, esp
		call	strlen
		mov	[ebp+var_4C], ebx
		mov	[ebp+var_40], ebx
		mov	[ebp+var_38], 0
		mov	[ebp+var_2C], 0
		mov	[ebp+var_24], 0
		lea	edx, [ebx+eax]
		mov	[ebp+var_48], edx
		mov	edx, [ebp+var_17C]
		lea	ecx, ds:0[eax*4]
		mov	[ebp+var_28], eax
		mov	[ebp+var_20], 0
		mov	[ebp+var_1C], 0
		mov	[ebp+var_44], edx
		lea	edx, [eax+eax]
		mov	[ebp+var_34], edx
		lea	edx, [ecx+edx]
		lea	eax, ds:1Eh[edx*4]
		and	eax, 0FFFFFFF0h
		call	sub_6FFDBC00
		lea	edx, [esp+1Bh]
		lea	eax, [ecx+1Eh]
		and	edx, 0FFFFFFF0h
		and	eax, 0FFFFFFF0h
		call	sub_6FFDBC00
		lea	eax, [esp+1Bh]
		and	eax, 0FFFFFFF0h
		cmp	esi, 1
		mov	[ebp+var_3C], edx
		mov	[ebp+var_30], eax
		jz	loc_6FFDA1F5
		jnb	loc_6FFDA195

loc_6FFDA0B3:				; CODE XREF: sub_6FFD9FB0+1E8j
		lea	eax, [ebp+var_4C]
		call	sub_6FFD7060
		mov	edx, eax

loc_6FFDA0BD:				; CODE XREF: sub_6FFD9FB0+240j
					; sub_6FFD9FB0+24Cj ...
		test	byte ptr [ebp+var_17C],	1
		jz	short loc_6FFDA0D2
		mov	eax, [ebp+var_40]
		cmp	byte ptr [eax],	0
		jnz	loc_6FFDA201

loc_6FFDA0D2:				; CODE XREF: sub_6FFD9FB0+114j
		test	edx, edx
		jz	loc_6FFDA201
		mov	eax, [ebp+var_17C]
		mov	[ebp+var_70], 0
		mov	[ebp+var_6C], 0
		mov	[ebp+var_60], 0
		mov	[ebp+var_174], eax
		mov	eax, [ebp+var_180]
		mov	[ebp+var_5C], 0
		mov	[ebp+var_50], 0
		mov	[ebp+var_58], 0
		mov	[ebp+var_68], eax
		mov	eax, [ebp+arg_0]
		mov	[ebp+var_64], eax
		lea	eax, [ebp+var_174]
		call	sub_6FFD90B0
		mov	eax, [ebp+var_70]
		mov	[ebp+eax+var_170], 0
		mov	eax, [ebp+var_64]
		mov	[esp+8], eax
		mov	eax, [ebp+var_70]
		mov	[esp+4], eax
		lea	eax, [ebp+var_170]
		mov	[esp], eax
		call	[ebp+var_68]
		xor	eax, eax
		add	[ebp+var_50], 1
		cmp	[ebp+var_58], 0
		mov	[ebp+var_70], 0
		mov	esp, edi
		setz	al

loc_6FFDA162:				; CODE XREF: sub_6FFD9FB0+6Bj
					; sub_6FFD9FB0+255j
		lea	esp, [ebp-0Ch]
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6FFDA170:				; CODE XREF: sub_6FFD9FB0+3Dj
		cmp	al, 24h
		jnz	loc_6FFDA010
		jmp	loc_6FFD9FF3
; ---------------------------------------------------------------------------
		align 10h

loc_6FFDA180:				; CODE XREF: sub_6FFD9FB0+1Dj
		cmp	byte ptr [eax+1], 5Ah
		mov	esi, 1
		jnz	loc_6FFD9FD3
		nop
		jmp	loc_6FFDA021
; ---------------------------------------------------------------------------

loc_6FFDA195:				; CODE XREF: sub_6FFD9FB0+FDj
		cmp	esi, 3
		ja	loc_6FFDA0B3
		add	ebx, 0Bh
		mov	[ebp+var_40], ebx
		mov	[esp], ebx	; char *
		call	strlen
		mov	edx, ebx
		mov	ecx, eax
		lea	eax, [ebp+var_4C]
		call	sub_6FFD6750
		xor	edx, edx
		cmp	esi, 2
		setnz	dl
		add	edx, 3Ah
		mov	dword ptr [esp], 0
		mov	ecx, eax
		lea	eax, [ebp+var_4C]
		call	sub_6FFD66D0
		mov	ebx, [ebp+var_40]
		mov	[esp], ebx	; char *
		mov	[ebp+var_184], eax
		call	strlen
		mov	edx, [ebp+var_184]
		add	ebx, eax
		mov	[ebp+var_40], ebx
		jmp	loc_6FFDA0BD
; ---------------------------------------------------------------------------

loc_6FFDA1F5:				; CODE XREF: sub_6FFD9FB0+F7j
		cmp	byte ptr [ebx],	5Fh
		jz	short loc_6FFDA210

loc_6FFDA1FA:				; CODE XREF: sub_6FFD9FB0+26Aj
		xor	edx, edx
		jmp	loc_6FFDA0BD
; ---------------------------------------------------------------------------

loc_6FFDA201:				; CODE XREF: sub_6FFD9FB0+11Cj
					; sub_6FFD9FB0+124j
		xor	eax, eax
		mov	esp, edi
		jmp	loc_6FFDA162
; ---------------------------------------------------------------------------
		align 10h

loc_6FFDA210:				; CODE XREF: sub_6FFD9FB0+248j
		lea	eax, [ebx+1]
		mov	[ebp+var_40], eax
		cmp	byte ptr [ebx+1], 5Ah
		jnz	short loc_6FFDA1FA
		mov	edx, 1
		add	ebx, 2
		lea	eax, [ebp+var_4C]
		mov	[ebp+var_40], ebx
		call	sub_6FFD8100
		mov	edx, eax
		jmp	loc_6FFDA0BD
; ---------------------------------------------------------------------------

loc_6FFDA236:				; CODE XREF: sub_6FFD9FB0+56j
		mov	esi, edx
		shl	esi, 1Fh
		sar	esi, 1Fh
		add	esi, 3
		jmp	loc_6FFDA021
sub_6FFD9FB0	endp

; ---------------------------------------------------------------------------
		align 10h
		sub	esp, 1Ch
		mov	ecx, [esp+24h]
		mov	eax, [esp+20h]
		test	ecx, ecx
		jnz	short loc_6FFDA268

loc_6FFDA25F:				; CODE XREF: .text:6FFDA26Aj
		mov	eax, 0FFFFFFFDh

loc_6FFDA264:				; CODE XREF: .text:6FFDA285j
		add	esp, 1Ch
		retn
; ---------------------------------------------------------------------------

loc_6FFDA268:				; CODE XREF: .text:6FFDA25Dj
		test	eax, eax
		jz	short loc_6FFDA25F
		mov	edx, [esp+28h]
		mov	[esp], edx
		mov	edx, 11h
		call	sub_6FFD9FB0
		cmp	eax, 1
		sbb	eax, eax
		and	eax, 0FFFFFFFEh
		jmp	short loc_6FFDA264
; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_6FFDA290(int,	char *,	int, int)
sub_6FFDA290	proc near		; CODE XREF: sub_6FFEA2D0+B5p

var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		sub	esp, 4Ch
		mov	eax, [esp+4Ch+arg_0]
		mov	[esp+4Ch+var_10], ebx
		mov	ebx, [esp+4Ch+arg_8]
		mov	[esp+4Ch+var_C], esi
		mov	esi, [esp+4Ch+arg_4]
		mov	[esp+4Ch+var_8], edi
		mov	edi, [esp+4Ch+arg_C]
		test	eax, eax
		mov	[esp+4Ch+var_4], ebp
		jz	loc_6FFDA38A
		test	ebx, ebx
		jz	loc_6FFDA382

loc_6FFDA2C3:				; CODE XREF: sub_6FFDA290+F4j
		lea	edx, [esp+4Ch+var_2C]
		mov	ecx, offset sub_6FFD86F0
		mov	[esp+4Ch+var_4C], edx
		mov	edx, 11h
		mov	[esp+4Ch+var_2C], 0
		mov	[esp+4Ch+var_28], 0
		mov	[esp+4Ch+var_24], 0
		mov	[esp+4Ch+var_20], 0
		call	sub_6FFD9FB0
		test	eax, eax
		jz	loc_6FFDA392
		mov	edx, [esp+4Ch+var_20]
		mov	[esp+4Ch+var_30], 1
		test	edx, edx
		jz	short loc_6FFDA378

loc_6FFDA311:				; CODE XREF: sub_6FFDA290+F0j
		mov	ebp, [esp+4Ch+var_2C]
		test	ebp, ebp
		jz	loc_6FFDA3A6
		test	esi, esi
		jz	loc_6FFDA3D0
		mov	[esp+4Ch+var_4C], ebp ;	char *
		call	strlen
		cmp	eax, [ebx]
		nop
		jb	short loc_6FFDA360
		mov	[esp+4Ch+var_4C], esi ;	void *
		call	free

loc_6FFDA33A:				; CODE XREF: sub_6FFDA290+142j
		mov	eax, [esp+4Ch+var_30]
		mov	[ebx], eax

loc_6FFDA340:				; CODE XREF: sub_6FFDA290+E6j
					; sub_6FFDA290+148j
		test	edi, edi
		jz	short loc_6FFDA34A
		mov	dword ptr [edi], 0

loc_6FFDA34A:				; CODE XREF: sub_6FFDA290+B2j
					; sub_6FFDA290+100j ...
		mov	eax, ebp
		mov	ebx, [esp+4Ch+var_10]
		mov	esi, [esp+4Ch+var_C]
		mov	edi, [esp+4Ch+var_8]
		mov	ebp, [esp+4Ch+var_4]
		add	esp, 4Ch
		retn
; ---------------------------------------------------------------------------

loc_6FFDA360:				; CODE XREF: sub_6FFDA290+A0j
		mov	[esp+4Ch+var_48], ebp ;	char *
		mov	[esp+4Ch+var_4C], esi ;	char *
		call	strcpy
		mov	[esp+4Ch+var_4C], ebp ;	void *
		mov	ebp, esi
		call	free
		jmp	short loc_6FFDA340
; ---------------------------------------------------------------------------

loc_6FFDA378:				; CODE XREF: sub_6FFDA290+7Fj
		mov	eax, [esp+4Ch+var_24]
		mov	[esp+4Ch+var_30], eax
		jmp	short loc_6FFDA311
; ---------------------------------------------------------------------------

loc_6FFDA382:				; CODE XREF: sub_6FFDA290+2Dj
		test	esi, esi
		jz	loc_6FFDA2C3

loc_6FFDA38A:				; CODE XREF: sub_6FFDA290+25j
		test	edi, edi
		jnz	short loc_6FFDA3C0

loc_6FFDA38E:				; CODE XREF: sub_6FFDA290+118j
		xor	ebp, ebp
		jmp	short loc_6FFDA34A
; ---------------------------------------------------------------------------

loc_6FFDA392:				; CODE XREF: sub_6FFDA290+6Bj
		mov	eax, [esp+4Ch+var_2C]
		mov	[esp+4Ch+var_4C], eax ;	void *
		call	free
		mov	[esp+4Ch+var_30], 0

loc_6FFDA3A6:				; CODE XREF: sub_6FFDA290+87j
		test	edi, edi
		jz	short loc_6FFDA38E
		cmp	[esp+4Ch+var_30], 1
		jz	short loc_6FFDA3DD
		mov	dword ptr [edi], 0FFFFFFFEh
		xor	ebp, ebp
		jmp	short loc_6FFDA34A
; ---------------------------------------------------------------------------
		align 10h

loc_6FFDA3C0:				; CODE XREF: sub_6FFDA290+FCj
		mov	dword ptr [edi], 0FFFFFFFDh
		xor	ebp, ebp
		jmp	loc_6FFDA34A
; ---------------------------------------------------------------------------
		align 10h

loc_6FFDA3D0:				; CODE XREF: sub_6FFDA290+8Fj
		test	ebx, ebx
		jnz	loc_6FFDA33A
		jmp	loc_6FFDA340
; ---------------------------------------------------------------------------

loc_6FFDA3DD:				; CODE XREF: sub_6FFDA290+11Fj
		mov	dword ptr [edi], 0FFFFFFFFh
		xor	ebp, ebp
		jmp	loc_6FFDA34A
sub_6FFDA290	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6FFDA3F0	proc near		; CODE XREF: sub_6FFD8C50+40p
					; sub_6FFD90B0+3ADp ...

var_8		= dword	ptr -8
var_4		= dword	ptr -4

		sub	esp, 0Ch
		mov	[esp+0Ch+var_8], ebx
		mov	ebx, edx
		mov	[esp+0Ch+var_4], esi
		mov	esi, eax
		mov	eax, [edx]
		sub	eax, 3
		cmp	eax, 24h	; switch 37 cases
		jbe	short loc_6FFDA420

loc_6FFDA409:				; CODE XREF: sub_6FFDA3F0:loc_6FFDA420j
					; DATA XREF: .rdata:off_6FFF8DE4o
		mov	edx, ebx	; jumptable 6FFDA420 default case

loc_6FFDA40B:				; CODE XREF: sub_6FFDA3F0+3Aj
					; sub_6FFDA3F0+76j
		mov	eax, esi
		mov	ebx, [esp+0Ch+var_8]
		mov	esi, [esp+0Ch+var_4]
		add	esp, 0Ch
		jmp	sub_6FFD90B0
; ---------------------------------------------------------------------------
		align 10h

loc_6FFDA420:				; CODE XREF: sub_6FFDA3F0+17j
		jmp	ds:off_6FFF8DE4[eax*4] ; switch	jump
; ---------------------------------------------------------------------------

loc_6FFDA427:				; CODE XREF: sub_6FFDA3F0:loc_6FFDA420j
					; DATA XREF: .rdata:off_6FFF8DE4o
		mov	edx, [edx+4]	; jumptable 6FFDA420 case 0
		jmp	short loc_6FFDA40B
; ---------------------------------------------------------------------------
		align 10h

loc_6FFDA430:				; CODE XREF: sub_6FFDA3F0:loc_6FFDA420j
					; DATA XREF: .rdata:off_6FFF8DE4o
		mov	edx, offset aRestrict ;	jumptable 6FFDA420 cases 20,23

loc_6FFDA435:				; CODE XREF: sub_6FFDA3F0+5Cj
					; sub_6FFDA3F0+65j ...
		mov	eax, esi
		mov	ebx, [esp+0Ch+var_8]
		mov	esi, [esp+0Ch+var_4]
		add	esp, 0Ch
		jmp	sub_6FFD8880
; ---------------------------------------------------------------------------

loc_6FFDA447:				; CODE XREF: sub_6FFDA3F0:loc_6FFDA420j
					; DATA XREF: .rdata:off_6FFF8DE4o
		mov	edx, offset aVolatile ;	jumptable 6FFDA420 cases 21,24
		jmp	short loc_6FFDA435
; ---------------------------------------------------------------------------
		align 10h

loc_6FFDA450:				; CODE XREF: sub_6FFDA3F0:loc_6FFDA420j
					; DATA XREF: .rdata:off_6FFF8DE4o
		mov	edx, offset aConst ; jumptable 6FFDA420	cases 22,25
		jmp	short loc_6FFDA435
; ---------------------------------------------------------------------------

loc_6FFDA457:				; CODE XREF: sub_6FFDA3F0:loc_6FFDA420j
					; DATA XREF: .rdata:off_6FFF8DE4o
		mov	edx, 20h	; jumptable 6FFDA420 case 26
		mov	eax, esi
		call	sub_6FFD6B20
		mov	edx, [ebx+8]
		jmp	short loc_6FFDA40B
; ---------------------------------------------------------------------------

loc_6FFDA468:				; CODE XREF: sub_6FFDA3F0:loc_6FFDA420j
					; DATA XREF: .rdata:off_6FFF8DE4o
		test	byte ptr [esi],	4 ; jumptable 6FFDA420 case 27
		mov	edx, 2Ah
		jz	short loc_6FFDA485
		mov	ebx, [esp+0Ch+var_8]
		mov	esi, [esp+0Ch+var_4]
		add	esp, 0Ch
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6FFDA480:				; CODE XREF: sub_6FFDA3F0:loc_6FFDA420j
					; DATA XREF: .rdata:off_6FFF8DE4o
		mov	edx, 26h	; jumptable 6FFDA420 case 28

loc_6FFDA485:				; CODE XREF: sub_6FFDA3F0+80j
		mov	eax, esi
		mov	ebx, [esp+0Ch+var_8]
		mov	esi, [esp+0Ch+var_4]
		add	esp, 0Ch
		jmp	sub_6FFD6B20
; ---------------------------------------------------------------------------

loc_6FFDA497:				; CODE XREF: sub_6FFDA3F0:loc_6FFDA420j
					; DATA XREF: .rdata:off_6FFF8DE4o
		mov	edx, offset asc_6FFF8DCB ; jumptable 6FFDA420 case 29
		jmp	short loc_6FFDA435
; ---------------------------------------------------------------------------
		align 10h

loc_6FFDA4A0:				; CODE XREF: sub_6FFDA3F0:loc_6FFDA420j
					; DATA XREF: .rdata:off_6FFF8DE4o
		mov	edx, offset aComplex ; jumptable 6FFDA420 case 30
		jmp	short loc_6FFDA435
; ---------------------------------------------------------------------------

loc_6FFDA4A7:				; CODE XREF: sub_6FFDA3F0:loc_6FFDA420j
					; DATA XREF: .rdata:off_6FFF8DE4o
		mov	edx, offset aImaginary ; jumptable 6FFDA420 case 31
		jmp	short loc_6FFDA435
; ---------------------------------------------------------------------------
		align 10h

loc_6FFDA4B0:				; CODE XREF: sub_6FFDA3F0:loc_6FFDA420j
					; DATA XREF: .rdata:off_6FFF8DE4o
		cmp	byte ptr [esi+108h], 28h ; jumptable 6FFDA420 case 36
		jz	short loc_6FFDA4C5
		mov	edx, 20h
		mov	eax, esi
		call	sub_6FFD6B20

loc_6FFDA4C5:				; CODE XREF: sub_6FFDA3F0+C7j
		mov	edx, [ebx+4]
		mov	eax, esi
		call	sub_6FFD90B0
		mov	edx, offset asc_6FFF8BF8 ; "::*"
		jmp	loc_6FFDA435
sub_6FFDA3F0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6FFDA4E0	proc near		; CODE XREF: sub_6FFD90B0+4E6p
					; sub_6FFD90B0+BADp

var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4

		sub	esp, 2Ch
		mov	[esp+2Ch+var_C], ebx
		mov	ebx, eax
		mov	[esp+2Ch+var_8], esi
		mov	esi, edx
		mov	[esp+2Ch+var_4], edi
		mov	edx, [edx+4]
		cmp	dword ptr [edx], 4
		jz	short loc_6FFDA510
		call	sub_6FFD90B0
		mov	ebx, [esp+2Ch+var_C]
		mov	esi, [esp+2Ch+var_8]
		mov	edi, [esp+2Ch+var_4]
		add	esp, 2Ch
		retn
; ---------------------------------------------------------------------------

loc_6FFDA510:				; CODE XREF: sub_6FFDA4E0+19j
		mov	edi, [eax+118h]
		mov	dword ptr [eax+118h], 0
		mov	eax, [eax+114h]
		mov	[esp+2Ch+var_14], eax
		lea	eax, [esp+2Ch+var_14]
		mov	[ebx+114h], eax
		mov	eax, [esi+4]
		mov	[esp+2Ch+var_10], eax
		mov	edx, [eax+4]
		mov	eax, ebx
		call	sub_6FFD90B0
		mov	eax, [esp+2Ch+var_14]
		cmp	byte ptr [ebx+108h], 3Ch
		mov	[ebx+114h], eax
		jz	loc_6FFDA654

loc_6FFDA55C:				; CODE XREF: sub_6FFDA4E0+180j
		mov	eax, [ebx+104h]
		cmp	eax, 0FFh
		lea	edx, [eax+1]
		jz	short loc_6FFDA5D0

loc_6FFDA56C:				; CODE XREF: sub_6FFDA4E0+12Dj
		mov	byte ptr [ebx+eax+4], 3Ch
		mov	[ebx+104h], edx
		mov	byte ptr [ebx+108h], 3Ch
		mov	eax, [esi+4]
		mov	edx, [eax+8]
		mov	eax, ebx
		call	sub_6FFD90B0
		cmp	byte ptr [ebx+108h], 3Eh
		jz	loc_6FFDA665

loc_6FFDA598:				; CODE XREF: sub_6FFDA4E0+191j
		mov	eax, [ebx+104h]
		cmp	eax, 0FFh
		lea	edx, [eax+1]
		jz	short loc_6FFDA612

loc_6FFDA5A8:				; CODE XREF: sub_6FFDA4E0+16Fj
		mov	byte ptr [ebx+eax+4], 3Eh
		mov	[ebx+104h], edx
		mov	byte ptr [ebx+108h], 3Eh
		mov	[ebx+118h], edi
		mov	ebx, [esp+2Ch+var_C]
		mov	esi, [esp+2Ch+var_8]
		mov	edi, [esp+2Ch+var_4]
		add	esp, 2Ch
		retn
; ---------------------------------------------------------------------------

loc_6FFDA5D0:				; CODE XREF: sub_6FFDA4E0+8Aj
		mov	eax, [ebx+110h]
		mov	byte ptr [ebx+103h], 0
		mov	[esp+2Ch+var_28], 0FFh
		mov	[esp+2Ch+var_24], eax
		lea	eax, [ebx+4]
		mov	[esp+2Ch+var_2C], eax
		call	dword ptr [ebx+10Ch]
		mov	edx, 1
		xor	eax, eax
		mov	dword ptr [ebx+104h], 0
		add	dword ptr [ebx+124h], 1
		jmp	loc_6FFDA56C
; ---------------------------------------------------------------------------

loc_6FFDA612:				; CODE XREF: sub_6FFDA4E0+C6j
		mov	eax, [ebx+110h]
		mov	byte ptr [ebx+103h], 0
		mov	[esp+2Ch+var_28], 0FFh
		mov	[esp+2Ch+var_24], eax
		lea	eax, [ebx+4]
		mov	[esp+2Ch+var_2C], eax
		call	dword ptr [ebx+10Ch]
		mov	edx, 1
		xor	eax, eax
		mov	dword ptr [ebx+104h], 0
		add	dword ptr [ebx+124h], 1
		jmp	loc_6FFDA5A8
; ---------------------------------------------------------------------------

loc_6FFDA654:				; CODE XREF: sub_6FFDA4E0+76j
		mov	edx, 20h
		mov	eax, ebx
		call	sub_6FFD6B20
		jmp	loc_6FFDA55C
; ---------------------------------------------------------------------------

loc_6FFDA665:				; CODE XREF: sub_6FFDA4E0+B2j
		mov	edx, 20h
		mov	eax, ebx
		call	sub_6FFD6B20
		jmp	loc_6FFDA598
sub_6FFDA4E0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6FFDA680	proc near		; CODE XREF: sub_6FFD90B0+500p
					; sub_6FFD90B0+991p ...

var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_24		= byte ptr -24h
var_20		= dword	ptr -20h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4

		sub	esp, 3Ch
		mov	[esp+3Ch+var_10], ebx
		mov	[esp+3Ch+var_C], esi
		mov	[esp+3Ch+var_8], edi
		mov	[esp+3Ch+var_4], ebp
		cmp	dword ptr [edx], 2Bh
		jz	short loc_6FFDA6B0
		mov	ebx, [esp+3Ch+var_10]
		mov	esi, [esp+3Ch+var_C]
		mov	edi, [esp+3Ch+var_8]
		mov	ebp, [esp+3Ch+var_4]
		add	esp, 3Ch
		jmp	sub_6FFD90B0
; ---------------------------------------------------------------------------

loc_6FFDA6B0:				; CODE XREF: sub_6FFDA680+16j
		mov	edx, [edx+4]
		mov	edi, [edx+8]
		mov	ebp, [edx+4]
		test	edi, edi
		jz	loc_6FFDA748
		lea	ecx, [eax+4]
		mov	edx, [eax+104h]
		xor	ebx, ebx
		mov	[esp+3Ch+var_20], ecx
		mov	esi, eax
		jmp	short loc_6FFDA6ED
; ---------------------------------------------------------------------------

loc_6FFDA6D4:				; CODE XREF: sub_6FFDA680+7Bj
					; sub_6FFDA680+C6j
		add	ebx, 1
		cmp	edi, ebx
		mov	[esi+edx+4], al
		mov	[esi+104h], ecx
		mov	[esi+108h], al
		jbe	short loc_6FFDA748
		mov	edx, ecx

loc_6FFDA6ED:				; CODE XREF: sub_6FFDA680+52j
		cmp	edx, 0FFh
		movzx	eax, byte ptr [ebp+ebx+0]
		lea	ecx, [edx+1]
		jnz	short loc_6FFDA6D4
		mov	edx, [esi+110h]
		mov	byte ptr [esi+103h], 0
		mov	[esp+3Ch+var_24], al
		mov	[esp+3Ch+var_34], edx
		mov	edx, [esi+104h]
		mov	[esp+3Ch+var_38], edx
		mov	edx, [esp+3Ch+var_20]
		mov	[esp+3Ch+var_3C], edx
		call	dword ptr [esi+10Ch]
		mov	ecx, 1
		xor	edx, edx
		mov	dword ptr [esi+104h], 0
		movzx	eax, [esp+3Ch+var_24]
		add	dword ptr [esi+124h], 1
		jmp	short loc_6FFDA6D4
; ---------------------------------------------------------------------------

loc_6FFDA748:				; CODE XREF: sub_6FFDA680+3Bj
					; sub_6FFDA680+69j
		mov	ebx, [esp+3Ch+var_10]
		mov	esi, [esp+3Ch+var_C]
		mov	edi, [esp+3Ch+var_8]
		mov	ebp, [esp+3Ch+var_4]
		add	esp, 3Ch
		retn
sub_6FFDA680	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6FFDA760	proc near		; CODE XREF: sub_6FFD90B0+50Ap
					; sub_6FFD90B0+536p ...

var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_10		= dword	ptr -10h

		push	ebx
		mov	ebx, eax
		sub	esp, 28h
		mov	eax, [edx]
		cmp	eax, 6
		jz	short loc_6FFDA771
		test	eax, eax
		jnz	short loc_6FFDA780

loc_6FFDA771:				; CODE XREF: sub_6FFDA760+Bj
		mov	eax, ebx
		add	esp, 28h
		pop	ebx
		jmp	sub_6FFD90B0
; ---------------------------------------------------------------------------
		align 10h

loc_6FFDA780:				; CODE XREF: sub_6FFDA760+Fj
		mov	eax, [ebx+104h]
		cmp	eax, 0FFh
		lea	ecx, [eax+1]
		jz	short loc_6FFDA7D0

loc_6FFDA790:				; CODE XREF: sub_6FFDA760+B5j
		mov	byte ptr [ebx+eax+4], 28h
		mov	eax, ebx
		mov	[ebx+104h], ecx
		mov	byte ptr [ebx+108h], 28h
		call	sub_6FFD90B0
		mov	eax, [ebx+104h]
		cmp	eax, 0FFh
		lea	edx, [eax+1]
		jz	short loc_6FFDA820

loc_6FFDA7B9:				; CODE XREF: sub_6FFDA760+FDj
		mov	byte ptr [ebx+eax+4], 29h
		mov	[ebx+104h], edx
		mov	byte ptr [ebx+108h], 29h
		add	esp, 28h
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_6FFDA7D0:				; CODE XREF: sub_6FFDA760+2Ej
		mov	eax, [ebx+110h]
		mov	byte ptr [ebx+103h], 0
		mov	[esp+2Ch+var_10], edx
		mov	[esp+2Ch+var_28], 0FFh
		mov	[esp+2Ch+var_24], eax
		lea	eax, [ebx+4]
		mov	[esp+2Ch+var_2C], eax
		call	dword ptr [ebx+10Ch]
		mov	ecx, 1
		xor	eax, eax
		mov	dword ptr [ebx+104h], 0
		mov	edx, [esp+2Ch+var_10]
		add	dword ptr [ebx+124h], 1
		jmp	loc_6FFDA790
; ---------------------------------------------------------------------------
		align 10h

loc_6FFDA820:				; CODE XREF: sub_6FFDA760+57j
		mov	eax, [ebx+110h]
		mov	byte ptr [ebx+103h], 0
		mov	[esp+2Ch+var_28], 0FFh
		mov	[esp+2Ch+var_24], eax
		lea	eax, [ebx+4]
		mov	[esp+2Ch+var_2C], eax
		call	dword ptr [ebx+10Ch]
		mov	edx, 1
		xor	eax, eax
		mov	dword ptr [ebx+104h], 0
		add	dword ptr [ebx+124h], 1
		jmp	loc_6FFDA7B9
sub_6FFDA760	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_6FFDA870(_onexit_t)
sub_6FFDA870	proc near		; CODE XREF: sub_6FFDA930+Ap

var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
arg_0		= dword	ptr  4

		push	ebx
		sub	esp, 28h
		mov	eax, ds:dword_6FFFA3AC
		mov	ebx, [esp+2Ch+arg_0]
		mov	[esp+2Ch+var_2C], eax
		call	sub_6FFDAA30
		cmp	eax, 0FFFFFFFFh
		mov	[esp+2Ch+var_10], eax
		jz	loc_6FFDA910
		mov	[esp+2Ch+var_2C], 8
		call	_lock
		mov	eax, ds:dword_6FFFA3AC
		mov	[esp+2Ch+var_2C], eax
		call	sub_6FFDAA30
		mov	[esp+2Ch+var_10], eax
		mov	eax, ds:dword_6FFFA3A8
		mov	[esp+2Ch+var_2C], eax
		call	sub_6FFDAA30
		mov	[esp+2Ch+var_2C], ebx
		mov	[esp+2Ch+var_14], eax
		lea	eax, [esp+2Ch+var_14]
		mov	[esp+2Ch+var_24], eax
		lea	eax, [esp+2Ch+var_10]
		mov	[esp+2Ch+var_28], eax
		call	__dllonexit
		mov	ebx, eax
		mov	eax, [esp+2Ch+var_10]
		mov	[esp+2Ch+var_2C], eax
		call	sub_6FFDAA40
		mov	ds:dword_6FFFA3AC, eax
		mov	eax, [esp+2Ch+var_14]
		mov	[esp+2Ch+var_2C], eax
		call	sub_6FFDAA40
		mov	[esp+2Ch+var_2C], 8
		mov	ds:dword_6FFFA3A8, eax
		call	_unlock
		mov	eax, ebx
		add	esp, 28h
		pop	ebx
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6FFDA910:				; CODE XREF: sub_6FFDA870+1Cj
		mov	[esp+2Ch+var_2C], ebx ;	_onexit_t
		call	ds:_onexit
		add	esp, 28h
		mov	ebx, eax
		mov	eax, ebx
		pop	ebx
		retn
sub_6FFDA870	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_6FFDA930(_onexit_t)
sub_6FFDA930	proc near		; CODE XREF: sub_6FFDAF10-2Fp
					; sub_6FFDBE00+12p ...

var_1C		= dword	ptr -1Ch
arg_0		= dword	ptr  4

		sub	esp, 1Ch
		mov	eax, [esp+1Ch+arg_0]
		mov	[esp+1Ch+var_1C], eax ;	_onexit_t
		call	sub_6FFDA870
		cmp	eax, 1
		sbb	eax, eax
		add	esp, 1Ch
		retn
sub_6FFDA930	endp

; ---------------------------------------------------------------------------
		align 10h
		xor	eax, eax
		retn
; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


		public TlsCallback_1
TlsCallback_1	proc near		; DATA XREF: .CRT:7000001Co

var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		sub	esp, 1Ch
		mov	eax, [esp+1Ch+arg_4]
		test	eax, eax
		jz	short loc_6FFDA980
		cmp	eax, 3
		jz	short loc_6FFDA980
		mov	eax, 1
		add	esp, 1Ch
		retn	0Ch
; ---------------------------------------------------------------------------
		align 10h

loc_6FFDA980:				; CODE XREF: TlsCallback_1+9j
					; TlsCallback_1+Ej
		mov	edx, [esp+1Ch+arg_8]
		mov	[esp+1Ch+var_18], eax
		mov	eax, [esp+1Ch+arg_0]
		mov	[esp+1Ch+var_14], edx
		mov	[esp+1Ch+var_1C], eax
		call	sub_6FFDB130
		mov	eax, 1
		add	esp, 1Ch
		retn	0Ch
TlsCallback_1	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


		public TlsCallback_0
TlsCallback_0	proc near		; CODE XREF: sub_6FFC1040+117p
					; DATA XREF: .rdata:off_6FFF9900o ...

var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	ebx
		sub	esp, 18h
		cmp	dword_6FFEE05C,	2
		mov	eax, [esp+1Ch+arg_4]
		jz	short loc_6FFDA9CB
		mov	dword_6FFEE05C,	2

loc_6FFDA9CB:				; CODE XREF: TlsCallback_0+Fj
		cmp	eax, 2
		jz	short loc_6FFDA9E1
		cmp	eax, 1
		jz	short loc_6FFDAA10

loc_6FFDA9D5:				; CODE XREF: TlsCallback_0+3Cj
					; TlsCallback_0+7Cj
		mov	eax, 1
		add	esp, 18h
		pop	ebx
		retn	0Ch
; ---------------------------------------------------------------------------

loc_6FFDA9E1:				; CODE XREF: TlsCallback_0+1Ej
		mov	ebx, offset dword_70000028
		cmp	ebx, offset dword_70000028
		jz	short loc_6FFDA9D5
		xchg	ax, ax

loc_6FFDA9F0:				; CODE XREF: TlsCallback_0+51j
		mov	eax, [ebx]
		test	eax, eax
		jz	short loc_6FFDA9F8
		call	eax

loc_6FFDA9F8:				; CODE XREF: TlsCallback_0+44j
		add	ebx, 4
		cmp	ebx, offset dword_70000028
		jnz	short loc_6FFDA9F0
		mov	eax, 1
		add	esp, 18h
		pop	ebx
		retn	0Ch
; ---------------------------------------------------------------------------
		align 10h

loc_6FFDAA10:				; CODE XREF: TlsCallback_0+23j
		mov	eax, [esp+1Ch+arg_8]
		mov	[esp+1Ch+var_18], 1
		mov	[esp+1Ch+var_14], eax
		mov	eax, [esp+1Ch+arg_0]
		mov	[esp+1Ch+var_1C], eax
		call	sub_6FFDB130
		jmp	short loc_6FFDA9D5
TlsCallback_0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6FFDAA30	proc near		; CODE XREF: sub_6FFC1040+138p
					; sub_6FFC1040+14Bp ...

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		retn
sub_6FFDAA30	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6FFDAA40	proc near		; CODE XREF: sub_6FFC1000+15p
					; sub_6FFDA870+71p ...

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		retn
sub_6FFDAA40	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn

; int __cdecl sub_6FFDAA50(char	*, char)
sub_6FFDAA50	proc near		; CODE XREF: sub_6FFDAAB0+131p
					; sub_6FFDAAB0+141p ...

var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
arg_0		= dword	ptr  4
arg_4		= byte ptr  8

		push	ebx
		sub	esp, 18h
		mov	eax, ds:_iob
		mov	[esp+1Ch+var_14], 1Bh ;	size_t
		lea	ebx, [esp+1Ch+arg_4]
		mov	[esp+1Ch+var_18], 1 ; size_t
		mov	[esp+1Ch+var_1C], offset aMingwW64Runtim ; "Mingw-w64 runtime failure:\n"
		add	eax, 40h
		mov	[esp+1Ch+var_10], eax ;	FILE *
		call	fwrite
		mov	eax, [esp+1Ch+arg_0]
		mov	[esp+1Ch+var_14], ebx ;	va_list
		mov	[esp+1Ch+var_18], eax ;	char *
		mov	eax, ds:_iob
		add	eax, 40h
		mov	[esp+1Ch+var_1C], eax ;	FILE *
		call	vfprintf
		call	abort
sub_6FFDAA50	endp

; ---------------------------------------------------------------------------
		jmp	short sub_6FFDAAB0
; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; int __fastcall sub_6FFDAAB0(size_t)
sub_6FFDAAB0	proc near		; CODE XREF: .text:6FFDAAA1j
					; sub_6FFDAC00+12Ap ...

lpAddress	= dword	ptr -5Ch
lpBuffer	= dword	ptr -58h
dwLength	= dword	ptr -54h
lpflOldProtect	= dword	ptr -50h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
Buffer		= _MEMORY_BASIC_INFORMATION ptr	-38h

		push	ebp
		push	edi
		mov	edi, ecx
		push	esi
		push	ebx
		mov	ebx, eax
		sub	esp, 4Ch
		test	ecx, ecx
		mov	[esp+5Ch+var_40], edx
		jnz	short loc_6FFDAAD0
		add	esp, 4Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6FFDAAD0:				; CODE XREF: sub_6FFDAAB0+11j
		mov	ecx, ds:dword_6FFFA020
		xor	esi, esi
		test	ecx, ecx
		jle	short loc_6FFDAB00
		mov	eax, ds:dword_6FFFA01C

loc_6FFDAAE1:				; CODE XREF: sub_6FFDAAB0+4Ej
		mov	edx, [eax+4]
		cmp	edx, ebx
		ja	short loc_6FFDAAF6
		mov	ebp, [eax+8]
		add	edx, [ebp+8]
		cmp	ebx, edx
		jb	loc_6FFDAB79

loc_6FFDAAF6:				; CODE XREF: sub_6FFDAAB0+36j
		add	esi, 1
		add	eax, 0Ch
		cmp	esi, ecx
		jl	short loc_6FFDAAE1

loc_6FFDAB00:				; CODE XREF: sub_6FFDAAB0+2Aj
		mov	[esp+5Ch+lpAddress], ebx
		call	sub_6FFDB350
		test	eax, eax
		mov	ebp, eax
		jz	loc_6FFDABE6
		lea	edx, [esi+esi*2]
		mov	esi, ds:dword_6FFFA01C
		shl	edx, 2
		mov	[esp+5Ch+var_44], edx
		add	esi, edx
		mov	[esi+8], eax
		mov	dword ptr [esi], 0
		call	sub_6FFDB470
		mov	edx, [esp+5Ch+var_44]
		add	eax, [ebp+0Ch]
		mov	[esi+4], eax
		lea	eax, [esp+5Ch+Buffer]
		mov	[esp+5Ch+lpBuffer], eax	; lpBuffer
		mov	eax, ds:dword_6FFFA01C
		mov	[esp+5Ch+dwLength], 1Ch	; dwLength
		mov	eax, [eax+edx+4]
		mov	[esp+5Ch+lpAddress], eax ; lpAddress
		call	ds:VirtualQuery
		sub	esp, 0Ch
		test	eax, eax
		mov	edx, [esp+5Ch+var_44]
		jz	short loc_6FFDABC6
		mov	eax, [esp+5Ch+Buffer.Protect]
		cmp	eax, 4
		jnz	short loc_6FFDAB95

loc_6FFDAB72:				; CODE XREF: sub_6FFDAAB0+E8j
					; sub_6FFDAAB0+114j
		add	ds:dword_6FFFA020, 1

loc_6FFDAB79:				; CODE XREF: sub_6FFDAAB0+40j
		mov	eax, [esp+5Ch+var_40]
		mov	[esp+5Ch+dwLength], edi	; size_t
		mov	[esp+5Ch+lpAddress], ebx ; void	*
		mov	[esp+5Ch+lpBuffer], eax	; void *
		call	memcpy
		add	esp, 4Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_6FFDAB95:				; CODE XREF: sub_6FFDAAB0+C0j
		cmp	eax, 40h
		jz	short loc_6FFDAB72
		mov	eax, [esp+5Ch+Buffer.RegionSize]
		add	edx, ds:dword_6FFFA01C
		mov	[esp+5Ch+dwLength], 40h	; flNewProtect
		mov	[esp+5Ch+lpBuffer], eax	; dwSize
		mov	eax, [esp+5Ch+Buffer.BaseAddress]
		mov	[esp+5Ch+lpflOldProtect], edx ;	lpflOldProtect
		mov	[esp+5Ch+lpAddress], eax ; lpAddress
		call	ds:VirtualProtect
		sub	esp, 10h
		jmp	short loc_6FFDAB72
; ---------------------------------------------------------------------------

loc_6FFDABC6:				; CODE XREF: sub_6FFDAAB0+B7j
		mov	eax, ds:dword_6FFFA01C
		mov	eax, [eax+edx+4]
		mov	[esp+5Ch+dwLength], eax
		mov	eax, [ebp+8]
		mov	[esp+5Ch+lpAddress], offset aVirtualqueryFa ; "	 VirtualQuery failed for %d bytes at a"...
		mov	[esp+5Ch+lpBuffer], eax	; char
		call	sub_6FFDAA50
; ---------------------------------------------------------------------------

loc_6FFDABE6:				; CODE XREF: sub_6FFDAAB0+5Cj
		mov	[esp+5Ch+lpBuffer], ebx	; char
		mov	[esp+5Ch+lpAddress], offset aAddressPHasNoI ; "Address %p has no image-section"
		call	sub_6FFDAA50
sub_6FFDAAB0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_6FFDAC00	proc near		; CODE XREF: sub_6FFC1260+30p
					; sub_6FFC1260:loc_6FFC12E8p

Buffer		= _MEMORY_BASIC_INFORMATION ptr	-3Ch
flOldProtect	= dword	ptr -20h
var_1C		= dword	ptr -1Ch

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		sub	esp, 4Ch
		mov	ebx, ds:dword_6FFFA024
		test	ebx, ebx
		jz	short loc_6FFDAC20

loc_6FFDAC13:				; CODE XREF: sub_6FFDAC00+64j
					; sub_6FFDAC00+B4j ...
		lea	esp, [ebp-0Ch]
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6FFDAC20:				; CODE XREF: sub_6FFDAC00+11j
		mov	ds:dword_6FFFA024, 1
		call	sub_6FFDB3C0
		lea	eax, [eax+eax*2]
		lea	eax, ds:1Eh[eax*4]
		and	eax, 0FFFFFFF0h
		call	sub_6FFDBC00
		mov	ds:dword_6FFFA020, 0
		lea	eax, [esp+1Fh]
		and	eax, 0FFFFFFF0h
		mov	ds:dword_6FFFA01C, eax
		mov	eax, offset dword_6FFFA000
		sub	eax, offset dword_6FFFA000
		cmp	eax, 7
		jle	short loc_6FFDAC13
		cmp	eax, 0Bh
		mov	ebx, offset dword_6FFFA000
		jle	short loc_6FFDAC92
		mov	ecx, ds:dword_6FFFA000
		test	ecx, ecx
		jnz	short loc_6FFDAC92
		mov	edx, ds:dword_6FFFA004
		test	edx, edx
		jnz	short loc_6FFDAC92
		mov	eax, ds:TlsIndex
		test	eax, eax
		jnz	short loc_6FFDAC92
		mov	ebx, offset dword_6FFFA00C

loc_6FFDAC92:				; CODE XREF: sub_6FFDAC00+6Ej
					; sub_6FFDAC00+78j ...
		mov	edi, [ebx]
		test	edi, edi
		jnz	short loc_6FFDAD00
		mov	esi, [ebx+4]
		test	esi, esi
		jnz	short loc_6FFDAD00
		mov	eax, [ebx+8]
		cmp	eax, 1
		jnz	loc_6FFDAE63
		add	ebx, 0Ch
		cmp	ebx, offset dword_6FFFA000
		jnb	loc_6FFDAC13
		mov	esi, 6FFC0000h

loc_6FFDACBF:				; CODE XREF: sub_6FFDAC00+217j
		mov	eax, [ebx+4]
		mov	ecx, [ebx]
		movzx	edx, byte ptr [ebx+8]
		add	eax, esi
		add	ecx, esi
		cmp	edx, 10h
		mov	edi, [ecx]
		jz	loc_6FFDADBD
		cmp	edx, 20h
		jz	loc_6FFDADFA
		cmp	edx, 8
		jz	loc_6FFDADDC
		mov	[ebp+var_1C], 0
		mov	[esp+4], edx	; char
		mov	dword ptr [esp], offset	aUnknownPseudoR	; "  Unknown pseudo relocation bit size	%d"...
		call	sub_6FFDAA50
; ---------------------------------------------------------------------------

loc_6FFDAD00:				; CODE XREF: sub_6FFDAC00+96j
					; sub_6FFDAC00+9Dj
		cmp	ebx, offset dword_6FFFA000
		jnb	loc_6FFDAC13
		mov	esi, 6FFC0000h
		lea	edi, [ebp+flOldProtect]

loc_6FFDAD14:				; CODE XREF: sub_6FFDAC00+135j
		mov	eax, [ebx+4]
		mov	ecx, 4		; size_t
		add	eax, esi
		mov	edx, [eax]
		add	edx, [ebx]
		add	ebx, 8
		mov	[ebp+flOldProtect], edx
		mov	edx, edi
		call	sub_6FFDAAB0
		cmp	ebx, offset dword_6FFFA000
		jb	short loc_6FFDAD14

loc_6FFDAD37:				; CODE XREF: sub_6FFDAC00+21Dj
		mov	ecx, ds:dword_6FFFA020
		test	ecx, ecx
		jle	loc_6FFDAC13
		xor	ebx, ebx
		xor	esi, esi
		lea	edi, [ebp+flOldProtect]
		jmp	short loc_6FFDAD62
; ---------------------------------------------------------------------------
		align 10h

loc_6FFDAD50:				; CODE XREF: sub_6FFDAC00+16Dj
					; sub_6FFDAC00+1BBj
		add	esi, 1
		add	ebx, 0Ch
		cmp	esi, ds:dword_6FFFA020
		jge	loc_6FFDAC13

loc_6FFDAD62:				; CODE XREF: sub_6FFDAC00+14Cj
		mov	eax, ds:dword_6FFFA01C
		add	eax, ebx
		mov	edx, [eax]
		test	edx, edx
		jz	short loc_6FFDAD50
		lea	edx, [ebp+Buffer]
		mov	dword ptr [esp+8], 1Ch ; dwLength
		mov	[esp+4], edx	; lpBuffer
		mov	eax, [eax+4]
		mov	[esp], eax	; lpAddress
		call	ds:VirtualQuery
		sub	esp, 0Ch
		test	eax, eax
		jz	loc_6FFDAE40
		mov	eax, ds:dword_6FFFA01C
		mov	[esp+0Ch], edi	; lpflOldProtect
		mov	eax, [eax+ebx]
		mov	[esp+8], eax	; flNewProtect
		mov	eax, [ebp+Buffer.RegionSize]
		mov	[esp+4], eax	; dwSize
		mov	eax, [ebp+Buffer.BaseAddress]
		mov	[esp], eax	; lpAddress
		call	ds:VirtualProtect
		sub	esp, 10h
		jmp	short loc_6FFDAD50
; ---------------------------------------------------------------------------

loc_6FFDADBD:				; CODE XREF: sub_6FFDAC00+D1j
		movzx	edx, word ptr [eax]
		test	dx, dx
		js	short loc_6FFDAE31
		sub	edx, ecx
		lea	edi, [edx+edi]
		mov	[ebp+var_1C], edi

loc_6FFDADCD:				; CODE XREF: sub_6FFDAC00+23Ej
		mov	ecx, 2		; size_t
		lea	edx, [ebp+var_1C]
		call	sub_6FFDAAB0
		jmp	short loc_6FFDAE0E
; ---------------------------------------------------------------------------

loc_6FFDADDC:				; CODE XREF: sub_6FFDAC00+E3j
		movzx	edx, byte ptr [eax]
		test	dl, dl
		js	short loc_6FFDAE22
		sub	edx, ecx
		lea	edi, [edx+edi]
		mov	[ebp+var_1C], edi

loc_6FFDADEB:				; CODE XREF: sub_6FFDAC00+22Fj
		mov	ecx, 1		; size_t
		lea	edx, [ebp+var_1C]
		call	sub_6FFDAAB0
		jmp	short loc_6FFDAE0E
; ---------------------------------------------------------------------------

loc_6FFDADFA:				; CODE XREF: sub_6FFDAC00+DAj
		add	edi, [eax]
		lea	edx, [ebp+var_1C]
		sub	edi, ecx
		mov	ecx, 4		; size_t
		mov	[ebp+var_1C], edi
		call	sub_6FFDAAB0

loc_6FFDAE0E:				; CODE XREF: sub_6FFDAC00+1DAj
					; sub_6FFDAC00+1F8j
		add	ebx, 0Ch
		cmp	ebx, offset dword_6FFFA000
		jb	loc_6FFDACBF
		jmp	loc_6FFDAD37
; ---------------------------------------------------------------------------

loc_6FFDAE22:				; CODE XREF: sub_6FFDAC00+1E1j
		or	edx, 0FFFFFF00h
		sub	edx, ecx
		add	edx, edi
		mov	[ebp+var_1C], edx
		jmp	short loc_6FFDADEB
; ---------------------------------------------------------------------------

loc_6FFDAE31:				; CODE XREF: sub_6FFDAC00+1C3j
		or	edx, 0FFFF0000h
		sub	edx, ecx
		add	edx, edi
		mov	[ebp+var_1C], edx
		jmp	short loc_6FFDADCD
; ---------------------------------------------------------------------------

loc_6FFDAE40:				; CODE XREF: sub_6FFDAC00+18Fj
		add	ebx, ds:dword_6FFFA01C
		mov	eax, [ebx+4]
		mov	[esp+8], eax
		mov	eax, [ebx+8]
		mov	eax, [eax+8]
		mov	dword ptr [esp], offset	aVirtualqueryFa	; "  VirtualQuery failed for %d	bytes at a"...
		mov	[esp+4], eax	; char
		call	sub_6FFDAA50
; ---------------------------------------------------------------------------

loc_6FFDAE63:				; CODE XREF: sub_6FFDAC00+A5j
		mov	[esp+4], eax	; char
		mov	dword ptr [esp], offset	aUnknownPseud_0	; "  Unknown pseudo relocation protocol	ve"...
		call	sub_6FFDAA50
sub_6FFDAC00	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_6FFDAE80()
sub_6FFDAE80	proc near		; DATA XREF: sub_6FFDAF10:loc_6FFDAEDAo
		sub	esp, 0Ch
		mov	eax, off_6FFEE058
		mov	eax, [eax]
		test	eax, eax
		jz	short loc_6FFDAEA7
		xchg	ax, ax

loc_6FFDAE90:				; CODE XREF: sub_6FFDAE80+25j
		call	eax
		mov	eax, off_6FFEE058
		lea	edx, [eax+4]
		mov	eax, [eax+4]
		mov	off_6FFEE058, edx
		test	eax, eax
		jnz	short loc_6FFDAE90

loc_6FFDAEA7:				; CODE XREF: sub_6FFDAE80+Cj
		add	esp, 0Ch
		retn
sub_6FFDAE80	endp

; ---------------------------------------------------------------------------
		align 10h
; START	OF FUNCTION CHUNK FOR sub_6FFDAF10

loc_6FFDAEB0:				; CODE XREF: sub_6FFDAF10+1Ej
		push	esi
		push	ebx
		sub	esp, 14h
		mov	ebx, ds:dword_6FFEC800
		cmp	ebx, 0FFFFFFFFh
		jz	short loc_6FFDAEF0

loc_6FFDAEC0:				; CODE XREF: sub_6FFDAF10-Cj
		test	ebx, ebx
		jz	short loc_6FFDAEDA
		lea	esi, dword_6FFEC800[ebx*4]
		nop
		lea	esi, [esi+0]

loc_6FFDAED0:				; CODE XREF: sub_6FFDAF10-38j
		call	dword ptr [esi]
		sub	esi, 4
		sub	ebx, 1
		jnz	short loc_6FFDAED0

loc_6FFDAEDA:				; CODE XREF: sub_6FFDAF10-4Ej
		mov	[esp+1Ch+var_1C], offset sub_6FFDAE80 ;	_onexit_t
		call	sub_6FFDA930
		add	esp, 14h
		pop	ebx
		pop	esi
		retn
; END OF FUNCTION CHUNK	FOR sub_6FFDAF10
; ---------------------------------------------------------------------------
		align 10h
; START	OF FUNCTION CHUNK FOR sub_6FFDAF10

loc_6FFDAEF0:				; CODE XREF: sub_6FFDAF10-52j
		xor	ebx, ebx
		jmp	short loc_6FFDAEF6
; ---------------------------------------------------------------------------

loc_6FFDAEF4:				; CODE XREF: sub_6FFDAF10-Ej
		mov	ebx, eax

loc_6FFDAEF6:				; CODE XREF: sub_6FFDAF10-1Ej
		lea	eax, [ebx+1]
		mov	edx, ds:dword_6FFEC800[eax*4]
		test	edx, edx
		jnz	short loc_6FFDAEF4
		jmp	short loc_6FFDAEC0
; END OF FUNCTION CHUNK	FOR sub_6FFDAF10
; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6FFDAF10	proc near		; CODE XREF: sub_6FFC1260+92p

var_1C		= dword	ptr -1Ch

; FUNCTION CHUNK AT 6FFDAEB0 SIZE 0000003C BYTES
; FUNCTION CHUNK AT 6FFDAEF0 SIZE 00000016 BYTES

		sub	esp, 0Ch
		mov	ecx, ds:dword_6FFFA028
		test	ecx, ecx
		jz	short loc_6FFDAF21
		add	esp, 0Ch
		retn
; ---------------------------------------------------------------------------

loc_6FFDAF21:				; CODE XREF: sub_6FFDAF10+Bj
		mov	ds:dword_6FFFA028, 1
		add	esp, 0Ch
		jmp	short loc_6FFDAEB0
sub_6FFDAF10	endp ; sp-analysis failed


; =============== S U B	R O U T	I N E =======================================


sub_6FFDAF30	proc near		; CODE XREF: sub_6FFC1260+40p
					; sub_6FFC1260+A6p ...
		mov	eax, 1
		retn	0Ch
sub_6FFDAF30	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6FFDAF40	proc near		; CODE XREF: sub_6FFC1260+F1p
					; sub_6FFC1260+10Bp ...
		mov	eax, 1
		retn	0Ch
sub_6FFDAF40	endp

; ---------------------------------------------------------------------------
		align 10h
		push	ebp
		mov	ebp, esp
		sub	esp, 28h
		mov	eax, [ebp+4]
		lea	edx, [ebp+4]
		mov	ds:dword_6FFFA164, edx
		mov	ds:dword_6FFFA040, 0C0000409h
		mov	ds:dword_6FFFA044, 1
		mov	ds:dword_6FFFA158, eax
		mov	ds:dword_6FFFA04C, eax
		mov	eax, [ebp+8]
		mov	dword ptr [esp], 0
		mov	ds:dword_6FFFA14C, eax
		mov	eax, dword_6FFF2AC4
		mov	[ebp-10h], eax
		mov	eax, dword_6FFF2AC8
		mov	[ebp-0Ch], eax
		call	ds:SetUnhandledExceptionFilter
		sub	esp, 4
		mov	dword ptr [esp], offset	off_6FFF99D4
		call	ds:UnhandledExceptionFilter
		sub	esp, 4
		call	ds:GetCurrentProcess
		mov	dword ptr [esp+4], 0C0000409h
		mov	[esp], eax
		call	ds:TerminateProcess
		sub	esp, 8
		call	abort
; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6FFDAFE0	proc near		; CODE XREF: DllEntryPoint+34p

lpSystemTimeAsFileTime=	dword ptr -4Ch
var_30		= dword	ptr -30h
PerformanceCount= LARGE_INTEGER	ptr -2Ch
SystemTimeAsFileTime= _FILETIME	ptr -24h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4

		sub	esp, 4Ch
		mov	eax, dword_6FFF2AC4
		mov	[esp+4Ch+var_10], ebx
		mov	[esp+4Ch+var_C], esi
		mov	[esp+4Ch+var_8], edi
		cmp	eax, 0BB40E64Eh
		mov	[esp+4Ch+var_4], ebp
		jz	short loc_6FFDB020
		not	eax
		mov	dword_6FFF2AC8,	eax

loc_6FFDB006:				; CODE XREF: sub_6FFDAFE0+BDj
		mov	ebx, [esp+4Ch+var_10]
		mov	esi, [esp+4Ch+var_C]
		mov	edi, [esp+4Ch+var_8]
		mov	ebp, [esp+4Ch+var_4]
		add	esp, 4Ch
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6FFDB020:				; CODE XREF: sub_6FFDAFE0+1Dj
		lea	eax, [esp+4Ch+SystemTimeAsFileTime]
		mov	[esp+4Ch+lpSystemTimeAsFileTime], eax ;	lpSystemTimeAsFileTime
		mov	[esp+4Ch+SystemTimeAsFileTime.dwLowDateTime], 0
		mov	[esp+4Ch+SystemTimeAsFileTime.dwHighDateTime], 0
		call	ds:GetSystemTimeAsFileTime
		sub	esp, 4
		mov	eax, [esp+4Ch+SystemTimeAsFileTime.dwHighDateTime]
		mov	ebp, [esp+4Ch+SystemTimeAsFileTime.dwLowDateTime]
		mov	[esp+4Ch+var_30], eax
		call	ds:GetCurrentProcessId
		mov	edi, eax
		call	ds:GetCurrentThreadId
		mov	esi, eax
		call	ds:GetTickCount
		mov	ebx, eax
		lea	eax, [esp+4Ch+PerformanceCount]
		mov	[esp+4Ch+lpSystemTimeAsFileTime], eax ;	lpPerformanceCount
		call	ds:QueryPerformanceCounter
		sub	esp, 4
		xor	ebp, [esp+4Ch+var_30]
		xor	ebp, dword ptr [esp+4Ch+PerformanceCount]
		xor	ebp, dword ptr [esp+4Ch+PerformanceCount+4]
		xor	ebp, edi
		xor	ebp, esi
		xor	ebp, ebx
		mov	eax, ebp
		cmp	ebp, 0BB40E64Eh
		not	eax
		jz	short loc_6FFDB0A2

loc_6FFDB092:				; CODE XREF: sub_6FFDAFE0+CBj
		mov	dword_6FFF2AC4,	ebp
		mov	dword_6FFF2AC8,	eax
		jmp	loc_6FFDB006
; ---------------------------------------------------------------------------

loc_6FFDB0A2:				; CODE XREF: sub_6FFDAFE0+B0j
		mov	eax, 44BF19B0h
		mov	bp, 0E64Fh
		jmp	short loc_6FFDB092
sub_6FFDAFE0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6FFDB0B0	proc near		; CODE XREF: sub_6FFDB130+13p
					; sub_6FFDB130:loc_6FFDB151p

lpCriticalSection= dword ptr -2Ch

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 1Ch
		mov	eax, ds:dword_6FFFA380
		test	eax, eax
		jnz	short loc_6FFDB0C8
		add	esp, 1Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_6FFDB0C8:				; CODE XREF: sub_6FFDB0B0+Ej
		mov	[esp+2Ch+lpCriticalSection], offset CriticalSection ; lpCriticalSection
		call	ds:EnterCriticalSection
		mov	ebx, ds:dword_6FFFA39C
		sub	esp, 4
		test	ebx, ebx
		jz	short loc_6FFDB115
		mov	ebp, ds:TlsGetValue
		mov	edi, ds:GetLastError
		xchg	ax, ax

loc_6FFDB0F0:				; CODE XREF: sub_6FFDB0B0+63j
		mov	eax, [ebx]
		mov	[esp+2Ch+lpCriticalSection], eax ; dwTlsIndex
		call	ebp ; TlsGetValue
		sub	esp, 4
		mov	esi, eax
		call	edi ; GetLastError
		test	eax, eax
		jnz	short loc_6FFDB10E
		test	esi, esi
		jz	short loc_6FFDB10E
		mov	eax, [ebx+4]
		mov	[esp+2Ch+lpCriticalSection], esi
		call	eax

loc_6FFDB10E:				; CODE XREF: sub_6FFDB0B0+50j
					; sub_6FFDB0B0+54j
		mov	ebx, [ebx+8]
		test	ebx, ebx
		jnz	short loc_6FFDB0F0

loc_6FFDB115:				; CODE XREF: sub_6FFDB0B0+30j
		mov	[esp+2Ch+lpCriticalSection], offset CriticalSection ; lpCriticalSection
		call	ds:LeaveCriticalSection
		sub	esp, 4
		add	esp, 1Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
sub_6FFDB0B0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6FFDB130	proc near		; CODE XREF: TlsCallback_1+33p
					; TlsCallback_0+77p

lpCriticalSection= dword ptr -1Ch
arg_4		= dword	ptr  8

		sub	esp, 1Ch
		mov	eax, [esp+1Ch+arg_4]
		cmp	eax, 1
		jz	short loc_6FFDB180
		jb	short loc_6FFDB151
		cmp	eax, 3
		jnz	short loc_6FFDB148
		call	sub_6FFDB0B0

loc_6FFDB148:				; CODE XREF: sub_6FFDB130+11j
					; sub_6FFDB130+2Ej ...
		mov	eax, 1
		add	esp, 1Ch
		retn
; ---------------------------------------------------------------------------

loc_6FFDB151:				; CODE XREF: sub_6FFDB130+Cj
		call	sub_6FFDB0B0
		mov	eax, ds:dword_6FFFA380
		cmp	eax, 1
		jnz	short loc_6FFDB148
		mov	ds:dword_6FFFA380, 0
		mov	[esp+1Ch+lpCriticalSection], offset CriticalSection ; lpCriticalSection
		call	ds:DeleteCriticalSection
		sub	esp, 4
		jmp	short loc_6FFDB148
; ---------------------------------------------------------------------------
		align 10h

loc_6FFDB180:				; CODE XREF: sub_6FFDB130+Aj
		mov	eax, ds:dword_6FFFA380
		test	eax, eax
		jz	short loc_6FFDB1A0

loc_6FFDB189:				; CODE XREF: sub_6FFDB130+80j
		mov	ds:dword_6FFFA380, 1
		mov	eax, 1
		add	esp, 1Ch
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6FFDB1A0:				; CODE XREF: sub_6FFDB130+57j
		mov	[esp+1Ch+lpCriticalSection], offset CriticalSection ; lpCriticalSection
		call	ds:InitializeCriticalSection
		sub	esp, 4
		jmp	short loc_6FFDB189
sub_6FFDB130	endp

; ---------------------------------------------------------------------------
		align 10h

loc_6FFDB1C0:				; CODE XREF: .text:6FFDBCD6j
		push	ebx
		sub	esp, 18h
		mov	eax, ds:dword_6FFFA380
		mov	ebx, [esp+20h]
		test	eax, eax
		jnz	short loc_6FFDB1D8
		xor	eax, eax
		add	esp, 18h
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_6FFDB1D8:				; CODE XREF: .text:6FFDB1CFj
		mov	dword ptr [esp], offset	CriticalSection
		call	ds:EnterCriticalSection
		mov	eax, ds:dword_6FFFA39C
		sub	esp, 4
		test	eax, eax
		jz	short loc_6FFDB20F
		mov	edx, [eax]
		cmp	edx, ebx
		jnz	short loc_6FFDB206
		jmp	short loc_6FFDB246
; ---------------------------------------------------------------------------
		align 10h

loc_6FFDB200:				; CODE XREF: .text:6FFDB20Dj
		mov	edx, [eax]
		cmp	edx, ebx
		jz	short loc_6FFDB226

loc_6FFDB206:				; CODE XREF: .text:6FFDB1F5j
		mov	ecx, eax
		mov	eax, [eax+8]
		test	eax, eax
		jnz	short loc_6FFDB200

loc_6FFDB20F:				; CODE XREF: .text:6FFDB1EFj
		mov	dword ptr [esp], offset	CriticalSection
		call	ds:LeaveCriticalSection
		sub	esp, 4

loc_6FFDB21F:				; CODE XREF: .text:6FFDB244j
		xor	eax, eax
		add	esp, 18h
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_6FFDB226:				; CODE XREF: .text:6FFDB204j
		mov	edx, [eax+8]
		mov	[ecx+8], edx

loc_6FFDB22C:				; CODE XREF: .text:6FFDB24Fj
		mov	[esp], eax
		call	free
		mov	dword ptr [esp], offset	CriticalSection
		call	ds:LeaveCriticalSection
		sub	esp, 4
		jmp	short loc_6FFDB21F
; ---------------------------------------------------------------------------

loc_6FFDB246:				; CODE XREF: .text:6FFDB1F7j
		mov	edx, [eax+8]
		mov	ds:dword_6FFFA39C, edx
		jmp	short loc_6FFDB22C
; ---------------------------------------------------------------------------
		jmp	short loc_6FFDB260
; ---------------------------------------------------------------------------
		align 10h
; START	OF FUNCTION CHUNK FOR sub_6FFDBCA0

loc_6FFDB260:				; CODE XREF: .text:6FFDB251j
					; sub_6FFDBCA0+1Aj
		push	ebx
		sub	esp, 18h
		mov	eax, ds:dword_6FFFA380
		test	eax, eax
		jnz	short loc_6FFDB272

loc_6FFDB26D:				; CODE XREF: sub_6FFDBCA0-A11j
					; sub_6FFDBCA0-9D2j
		add	esp, 18h
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_6FFDB272:				; CODE XREF: sub_6FFDBCA0-A35j
		mov	[esp+1Ch+var_18], 0Ch ;	size_t
		mov	[esp+1Ch+var_1C], 1 ; size_t
		call	calloc
		mov	ebx, eax
		mov	eax, 0FFFFFFFFh
		test	ebx, ebx
		jz	short loc_6FFDB26D
		mov	eax, [esp+1Ch+arg_0]
		mov	[esp+1Ch+var_1C], offset CriticalSection ; lpCriticalSection
		mov	[ebx], eax
		mov	eax, [esp+1Ch+arg_4]
		mov	[ebx+4], eax
		call	ds:EnterCriticalSection
		mov	eax, ds:dword_6FFFA39C
		mov	ds:dword_6FFFA39C, ebx
		mov	[ebx+8], eax
		sub	esp, 4
		mov	[esp+1Ch+var_1C], offset CriticalSection ; lpCriticalSection
		call	ds:LeaveCriticalSection
		xor	eax, eax
		sub	esp, 4
		jmp	short loc_6FFDB26D
; END OF FUNCTION CHUNK	FOR sub_6FFDBCA0
; ---------------------------------------------------------------------------
		mov	eax, [esp+4]
		cmp	word ptr [eax],	5A4Dh
		jz	short loc_6FFDB2E0

loc_6FFDB2DB:				; CODE XREF: .text:6FFDB2E9j
		xor	eax, eax
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6FFDB2E0:				; CODE XREF: .text:6FFDB2D9j
		add	eax, [eax+3Ch]
		cmp	dword ptr [eax], 4550h
		jnz	short loc_6FFDB2DB
		cmp	word ptr [eax+18h], 10Bh
		setz	al
		movzx	eax, al
		retn
; ---------------------------------------------------------------------------
		align 10h
		push	esi
		push	ebx
		mov	eax, [esp+0Ch]
		mov	ebx, [esp+10h]
		add	eax, [eax+3Ch]
		movzx	esi, word ptr [eax+6]
		movzx	edx, word ptr [eax+14h]
		test	esi, esi
		jz	short loc_6FFDB33C
		movzx	edx, dx
		lea	eax, [eax+edx+18h]
		xor	edx, edx
		jmp	short loc_6FFDB327
; ---------------------------------------------------------------------------

loc_6FFDB324:				; CODE XREF: .text:6FFDB33Aj
		add	eax, 28h

loc_6FFDB327:				; CODE XREF: .text:6FFDB322j
		mov	ecx, [eax+0Ch]
		cmp	ecx, ebx
		ja	short loc_6FFDB335
		add	ecx, [eax+8]
		cmp	ebx, ecx
		jb	short loc_6FFDB33E

loc_6FFDB335:				; CODE XREF: .text:6FFDB32Cj
		add	edx, 1
		cmp	edx, esi
		jb	short loc_6FFDB324

loc_6FFDB33C:				; CODE XREF: .text:6FFDB317j
		xor	eax, eax

loc_6FFDB33E:				; CODE XREF: .text:6FFDB333j
		pop	ebx
		pop	esi
		retn
; ---------------------------------------------------------------------------
		jmp	short sub_6FFDB350
; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6FFDB350	proc near		; CODE XREF: sub_6FFDAAB0+53p
					; .text:6FFDB341j

arg_0		= dword	ptr  4

		cmp	word ptr ds:6FFC0000h, 5A4Dh
		push	esi
		push	ebx
		jz	short loc_6FFDB362

loc_6FFDB35D:				; CODE XREF: sub_6FFDB350+27j
					; sub_6FFDB350+2Fj ...
		xor	eax, eax

loc_6FFDB35F:				; CODE XREF: sub_6FFDB350+61j
		pop	ebx
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_6FFDB362:				; CODE XREF: sub_6FFDB350+Bj
		mov	eax, ds:6FFC003Ch
		cmp	dword ptr [eax+6FFC0000h], 4550h
		lea	edx, [eax+6FFC0000h]
		jnz	short loc_6FFDB35D
		cmp	word ptr [edx+18h], 10Bh
		jnz	short loc_6FFDB35D
		mov	ebx, [esp+8+arg_0]
		movzx	esi, word ptr [edx+6]
		movzx	eax, word ptr [edx+14h]
		sub	ebx, 6FFC0000h
		test	esi, esi
		jz	short loc_6FFDB35D
		movzx	eax, ax
		lea	eax, [edx+eax+18h]
		xor	edx, edx
		jmp	short loc_6FFDB3A5
; ---------------------------------------------------------------------------

loc_6FFDB3A2:				; CODE XREF: sub_6FFDB350+68j
		add	eax, 28h

loc_6FFDB3A5:				; CODE XREF: sub_6FFDB350+50j
		mov	ecx, [eax+0Ch]
		cmp	ebx, ecx
		jb	short loc_6FFDB3B3
		add	ecx, [eax+8]
		cmp	ebx, ecx
		jb	short loc_6FFDB35F

loc_6FFDB3B3:				; CODE XREF: sub_6FFDB350+5Aj
		add	edx, 1
		cmp	edx, esi
		jb	short loc_6FFDB3A2
		jmp	short loc_6FFDB35D
sub_6FFDB350	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6FFDB3C0	proc near		; CODE XREF: sub_6FFDAC00+2Ap
		cmp	word ptr ds:6FFC0000h, 5A4Dh
		jz	short loc_6FFDB3D0

loc_6FFDB3CB:				; CODE XREF: sub_6FFDB3C0+25j
					; sub_6FFDB3C0+2Dj
		xor	eax, eax
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6FFDB3D0:				; CODE XREF: sub_6FFDB3C0+9j
		mov	eax, ds:6FFC003Ch
		cmp	dword ptr [eax+6FFC0000h], 4550h
		lea	edx, [eax+6FFC0000h]
		jnz	short loc_6FFDB3CB
		cmp	word ptr [edx+18h], 10Bh
		jnz	short loc_6FFDB3CB
		movzx	eax, word ptr [edx+6]
		retn
sub_6FFDB3C0	endp

; ---------------------------------------------------------------------------
		align 10h
		cmp	word ptr ds:6FFC0000h, 5A4Dh
		push	ebx
		mov	edx, [esp+8]
		jz	short loc_6FFDB414

loc_6FFDB410:				; CODE XREF: .text:6FFDB429j
					; .text:6FFDB431j ...
		xor	eax, eax

loc_6FFDB412:				; CODE XREF: .text:6FFDB45Bj
					; .text:6FFDB469j
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_6FFDB414:				; CODE XREF: .text:6FFDB40Ej
		mov	eax, ds:6FFC003Ch
		cmp	dword ptr [eax+6FFC0000h], 4550h
		lea	ecx, [eax+6FFC0000h]
		jnz	short loc_6FFDB410
		cmp	word ptr [ecx+18h], 10Bh
		jnz	short loc_6FFDB410
		movzx	ebx, word ptr [ecx+6]
		movzx	eax, word ptr [ecx+14h]
		test	ebx, ebx
		jz	short loc_6FFDB410
		movzx	eax, ax
		lea	eax, [ecx+eax+18h]
		xor	ecx, ecx
		jmp	short loc_6FFDB453
; ---------------------------------------------------------------------------
		align 10h

loc_6FFDB450:				; CODE XREF: .text:6FFDB465j
		add	eax, 28h

loc_6FFDB453:				; CODE XREF: .text:6FFDB448j
		test	byte ptr [eax+27h], 20h
		jz	short loc_6FFDB460
		test	edx, edx
		jz	short loc_6FFDB412
		sub	edx, 1

loc_6FFDB460:				; CODE XREF: .text:6FFDB457j
		add	ecx, 1
		cmp	ecx, ebx
		jb	short loc_6FFDB450
		xor	eax, eax
		jmp	short loc_6FFDB412
; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6FFDB470	proc near		; CODE XREF: sub_6FFDAAB0+7Dp
		cmp	word ptr ds:6FFC0000h, 5A4Dh
		jz	short loc_6FFDB480

loc_6FFDB47B:				; CODE XREF: sub_6FFDB470+25j
		xor	eax, eax

locret_6FFDB47D:			; CODE XREF: sub_6FFDB470+32j
					; sub_6FFDB470+36j
		rep retn
; ---------------------------------------------------------------------------
		align 10h

loc_6FFDB480:				; CODE XREF: sub_6FFDB470+9j
		mov	eax, ds:6FFC003Ch
		cmp	dword ptr [eax+6FFC0000h], 4550h
		lea	edx, [eax+6FFC0000h]
		jnz	short loc_6FFDB47B
		cmp	word ptr [edx+18h], 10Bh
		mov	eax, 6FFC0000h
		jz	short locret_6FFDB47D
		xor	eax, eax
		jmp	short locret_6FFDB47D
sub_6FFDB470	endp

; ---------------------------------------------------------------------------
		align 10h
		cmp	word ptr ds:6FFC0000h, 5A4Dh
		push	esi
		push	ebx
		jz	short loc_6FFDB4C2

loc_6FFDB4BD:				; CODE XREF: .text:6FFDB4D7j
					; .text:6FFDB4DFj ...
		xor	eax, eax
		pop	ebx
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_6FFDB4C2:				; CODE XREF: .text:6FFDB4BBj
		mov	eax, ds:6FFC003Ch
		cmp	dword ptr [eax+6FFC0000h], 4550h
		lea	edx, [eax+6FFC0000h]
		jnz	short loc_6FFDB4BD
		cmp	word ptr [edx+18h], 10Bh
		jnz	short loc_6FFDB4BD
		mov	ebx, [esp+0Ch]
		movzx	esi, word ptr [edx+6]
		movzx	eax, word ptr [edx+14h]
		sub	ebx, 6FFC0000h
		test	esi, esi
		jz	short loc_6FFDB4BD
		movzx	eax, ax
		lea	eax, [edx+eax+18h]
		xor	edx, edx
		jmp	short loc_6FFDB505
; ---------------------------------------------------------------------------

loc_6FFDB502:				; CODE XREF: .text:6FFDB518j
		add	eax, 28h

loc_6FFDB505:				; CODE XREF: .text:6FFDB500j
		mov	ecx, [eax+0Ch]
		cmp	ebx, ecx
		jb	short loc_6FFDB513
		add	ecx, [eax+8]
		cmp	ebx, ecx
		jb	short loc_6FFDB520

loc_6FFDB513:				; CODE XREF: .text:6FFDB50Aj
		add	edx, 1
		cmp	esi, edx
		ja	short loc_6FFDB502
		jmp	short loc_6FFDB4BD
; ---------------------------------------------------------------------------
		align 10h

loc_6FFDB520:				; CODE XREF: .text:6FFDB511j
		test	eax, eax
		jz	short loc_6FFDB4BD
		mov	eax, [eax+24h]
		pop	ebx
		pop	esi
		not	eax
		shr	eax, 1Fh
		retn
; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6FFDB530	proc near		; CODE XREF: .text:6FFDB658p

var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4

		sub	esp, 0Ch
		cmp	word ptr ds:6FFC0000h, 5A4Dh
		mov	[esp+0Ch+var_C], ebx
		mov	eax, [esp+0Ch+arg_0]
		mov	[esp+0Ch+var_8], esi
		mov	[esp+0Ch+var_4], edi
		jz	short loc_6FFDB560

loc_6FFDB54D:				; CODE XREF: sub_6FFDB530+46j
					; sub_6FFDB530+4Ej ...
		xor	eax, eax

loc_6FFDB54F:				; CODE XREF: sub_6FFDB530+C8j
		mov	ebx, [esp+0Ch+var_C]
		mov	esi, [esp+0Ch+var_8]
		mov	edi, [esp+0Ch+var_4]
		add	esp, 0Ch
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6FFDB560:				; CODE XREF: sub_6FFDB530+1Bj
		mov	edx, ds:6FFC003Ch
		cmp	dword ptr [edx+6FFC0000h], 4550h
		lea	ecx, [edx+6FFC0000h]
		jnz	short loc_6FFDB54D
		cmp	word ptr [ecx+18h], 10Bh
		jnz	short loc_6FFDB54D
		mov	esi, [ecx+80h]
		test	esi, esi
		jz	short loc_6FFDB54D
		movzx	edi, word ptr [ecx+6]
		movzx	edx, word ptr [ecx+14h]
		test	edi, edi
		jz	short loc_6FFDB54D
		movzx	edx, dx
		lea	edx, [ecx+edx+18h]
		xor	ecx, ecx
		jmp	short loc_6FFDB5A4
; ---------------------------------------------------------------------------

loc_6FFDB5A1:				; CODE XREF: sub_6FFDB530+87j
		add	edx, 28h

loc_6FFDB5A4:				; CODE XREF: sub_6FFDB530+6Fj
		mov	ebx, [edx+0Ch]
		cmp	esi, ebx
		jb	short loc_6FFDB5B2
		add	ebx, [edx+8]
		cmp	esi, ebx
		jb	short loc_6FFDB5BB

loc_6FFDB5B2:				; CODE XREF: sub_6FFDB530+79j
		add	ecx, 1
		cmp	edi, ecx
		ja	short loc_6FFDB5A1
		jmp	short loc_6FFDB54D
; ---------------------------------------------------------------------------

loc_6FFDB5BB:				; CODE XREF: sub_6FFDB530+80j
		test	edx, edx
		lea	esi, [esi+0]
		jz	short loc_6FFDB54D
		add	esi, 6FFC0000h
		jmp	short loc_6FFDB5DA
; ---------------------------------------------------------------------------
		align 10h

loc_6FFDB5D0:				; CODE XREF: sub_6FFDB530+AFj
					; sub_6FFDB530+B6j
		test	eax, eax
		jle	short loc_6FFDB5F0
		sub	eax, 1
		add	esi, 14h

loc_6FFDB5DA:				; CODE XREF: sub_6FFDB530+98j
		mov	ecx, [esi+4]
		test	ecx, ecx
		jnz	short loc_6FFDB5D0
		mov	edx, [esi+0Ch]
		test	edx, edx
		jnz	short loc_6FFDB5D0
		jmp	loc_6FFDB54D
; ---------------------------------------------------------------------------
		align 10h

loc_6FFDB5F0:				; CODE XREF: sub_6FFDB530+A2j
		mov	eax, 6FFC0000h
		add	eax, [esi+0Ch]
		jmp	loc_6FFDB54F
sub_6FFDB530	endp

; ---------------------------------------------------------------------------
		align 10h
		push	ebx
		xor	edx, edx
		sub	esp, 18h
		mov	eax, ds:dword_6FFFA3A4
		test	eax, eax
		jz	short loc_6FFDB652

loc_6FFDB60F:				; CODE XREF: .text:6FFDB69Fj
					; .text:6FFDB6BAj
		add	esp, 18h
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_6FFDB614:				; CODE XREF: .text:6FFDB683j
					; .text:6FFDB688j
		movzx	edx, byte ptr [eax+3]
		cmp	dl, 43h
		jz	short loc_6FFDB622
		cmp	dl, 63h
		jnz	short loc_6FFDB650

loc_6FFDB622:				; CODE XREF: .text:6FFDB61Bj
		movzx	edx, byte ptr [eax+4]
		cmp	dl, 52h
		jz	short loc_6FFDB632
		cmp	dl, 72h
		xchg	ax, ax
		jnz	short loc_6FFDB650

loc_6FFDB632:				; CODE XREF: .text:6FFDB629j
		movzx	edx, byte ptr [eax+5]
		cmp	dl, 54h
		jz	short loc_6FFDB68E
		cmp	dl, 74h
		xchg	ax, ax
		jz	short loc_6FFDB68E
		sub	edx, 30h
		cmp	dl, 9
		jbe	short loc_6FFDB68E
		lea	esi, [esi+0]

loc_6FFDB650:				; CODE XREF: .text:6FFDB620j
					; .text:6FFDB630j ...
		mov	edx, ebx

loc_6FFDB652:				; CODE XREF: .text:6FFDB60Dj
					; .text:6FFDB68Cj
		lea	ebx, [edx+1]
		mov	[esp], edx
		call	sub_6FFDB530
		test	eax, eax
		jz	short loc_6FFDB6A5
		movzx	edx, byte ptr [eax]
		cmp	dl, 4Dh
		jz	short loc_6FFDB66E
		cmp	dl, 6Dh
		jnz	short loc_6FFDB650

loc_6FFDB66E:				; CODE XREF: .text:6FFDB667j
		movzx	edx, byte ptr [eax+1]
		cmp	dl, 53h
		jz	short loc_6FFDB67C
		cmp	dl, 73h
		jnz	short loc_6FFDB650

loc_6FFDB67C:				; CODE XREF: .text:6FFDB675j
		movzx	edx, byte ptr [eax+2]
		cmp	dl, 56h
		jz	short loc_6FFDB614
		cmp	dl, 76h
		jz	short loc_6FFDB614
		mov	edx, ebx
		jmp	short loc_6FFDB652
; ---------------------------------------------------------------------------

loc_6FFDB68E:				; CODE XREF: .text:6FFDB639j
					; .text:6FFDB640j ...
		mov	[esp], eax
		call	ds:GetModuleHandleA
		test	eax, eax
		push	ebx
		mov	ds:dword_6FFFA3A4, eax
		jnz	loc_6FFDB60F

loc_6FFDB6A5:				; CODE XREF: .text:6FFDB65Fj
		mov	dword ptr [esp], offset	aMsvcrt_dll ; "msvcrt.dll"
		call	ds:LoadLibraryW
		sub	esp, 4
		mov	ds:dword_6FFFA3A4, eax
		jmp	loc_6FFDB60F
; ---------------------------------------------------------------------------
		align 10h
		sub	esp, 2Ch
		mov	[esp+20h], esi
		mov	esi, [esp+30h]
		mov	[esp+1Ch], ebx
		mov	[esp+24h], edi
		mov	[esp+28h], ebp
		mov	[esp], esi
		call	strlen
		cmp	eax, 8
		jbe	short loc_6FFDB700

loc_6FFDB6E4:				; CODE XREF: .text:6FFDB709j
					; .text:6FFDB720j ...
		xor	ebx, ebx

loc_6FFDB6E6:				; CODE XREF: .text:6FFDB75Aj
		mov	eax, ebx
		mov	esi, [esp+20h]
		mov	ebx, [esp+1Ch]
		mov	edi, [esp+24h]
		mov	ebp, [esp+28h]
		add	esp, 2Ch
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6FFDB700:				; CODE XREF: .text:6FFDB6E2j
		cmp	word ptr ds:6FFC0000h, 5A4Dh
		jnz	short loc_6FFDB6E4
		mov	eax, ds:6FFC003Ch
		cmp	dword ptr [eax+6FFC0000h], 4550h
		lea	edx, [eax+6FFC0000h]
		jnz	short loc_6FFDB6E4
		cmp	word ptr [edx+18h], 10Bh
		jnz	short loc_6FFDB6E4
		movzx	ebp, word ptr [edx+6]
		movzx	eax, word ptr [edx+14h]
		test	ebp, ebp
		jz	short loc_6FFDB6E4
		movzx	eax, ax
		xor	edi, edi
		lea	ebx, [edx+eax+18h]
		jmp	short loc_6FFDB744
; ---------------------------------------------------------------------------

loc_6FFDB741:				; CODE XREF: .text:6FFDB761j
		add	ebx, 28h

loc_6FFDB744:				; CODE XREF: .text:6FFDB73Fj
		mov	dword ptr [esp+8], 8
		mov	[esp+4], esi
		mov	[esp], ebx
		call	strncmp
		test	eax, eax
		jz	short loc_6FFDB6E6
		add	edi, 1
		cmp	edi, ebp
		jb	short loc_6FFDB741
		jmp	loc_6FFDB6E4
; ---------------------------------------------------------------------------
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _Unwind_SjLj_Resume]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _Unwind_SjLj_Register]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _Unwind_SjLj_Unregister]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _Unwind_GetTextRelBase]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _Unwind_GetDataRelBase]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _Unwind_GetRegionStart]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _Unwind_GetLanguageSpecificData]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _Unwind_GetIPInfo]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _Unwind_SetGR]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _Unwind_SetIP]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _Unwind_DeleteException]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _Unwind_SjLj_Resume_or_Rethrow]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _Unwind_SjLj_RaiseException]
		align 10h
		mov	edx, [esp+4]
		mov	eax, 0FFFFFFFFh
		xor	ecx, ecx
		lock cmpxchg [edx], ecx
		not	eax
		shr	eax, 1Fh
		retn
; ---------------------------------------------------------------------------
		align 10h
		push	ebx
		sub	esp, 18h
		mov	ebx, [esp+20h]
		mov	eax, [ebx+4]
		sub	eax, 1
		test	eax, eax
		mov	[ebx+4], eax
		jz	short loc_6FFDB820

loc_6FFDB815:				; CODE XREF: .text:6FFDB834j
		xor	eax, eax
		add	esp, 18h
		pop	ebx
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6FFDB820:				; CODE XREF: .text:6FFDB813j
		mov	dword ptr [ebx+8], 0
		mov	[esp], ebx
		call	sub_6FFDBD00
		sub	esp, 4
		test	eax, eax
		js	short loc_6FFDB815
		mov	dword ptr [esp+8], 0
		mov	dword ptr [esp+4], 1
		mov	eax, [ebx+0Ch]
		mov	[esp], eax
		call	ds:ReleaseSemaphore
		sub	esp, 0Ch
		test	eax, eax
		setz	al
		add	esp, 18h
		movzx	eax, al
		pop	ebx
		retn
; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6FFDB870	proc near		; CODE XREF: sub_6FFEA170+48p
					; .text:6FFEB5F1p ...

hSemaphore	= dword	ptr -1Ch
lReleaseCount	= dword	ptr -18h
lpPreviousCount	= dword	ptr -14h
arg_0		= dword	ptr  4

		push	ebx
		sub	esp, 18h
		mov	ebx, [esp+1Ch+arg_0]
		mov	[esp+1Ch+hSemaphore], ebx
		call	sub_6FFDBD00
		mov	edx, eax
		sub	esp, 4
		xor	eax, eax
		test	edx, edx
		js	short loc_6FFDB8B2
		mov	[esp+1Ch+lpPreviousCount], 0 ; lpPreviousCount
		mov	[esp+1Ch+lReleaseCount], 1 ; lReleaseCount
		mov	eax, [ebx+4]
		mov	[esp+1Ch+hSemaphore], eax ; hSemaphore
		call	ds:ReleaseSemaphore
		sub	esp, 0Ch
		test	eax, eax
		setz	al
		movzx	eax, al

loc_6FFDB8B2:				; CODE XREF: sub_6FFDB870+19j
		add	esp, 18h
		pop	ebx
		retn
sub_6FFDB870	endp

; ---------------------------------------------------------------------------
		align 10h
		push	ebx
		sub	esp, 8
		mov	ebx, [esp+10h]
		call	ds:GetCurrentThreadId
		xor	edx, edx
		mov	ecx, eax
		mov	eax, 0FFFFFFFFh
		lock cmpxchg [ebx], edx
		test	eax, eax
		js	short loc_6FFDB8F4
		cmp	ecx, [ebx+8]
		mov	eax, 1
		jnz	short loc_6FFDB8EF
		add	dword ptr [ebx+4], 1
		xor	al, al

loc_6FFDB8EF:				; CODE XREF: .text:6FFDB8E7j
		add	esp, 8
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_6FFDB8F4:				; CODE XREF: .text:6FFDB8DDj
		mov	dword ptr [ebx+4], 1
		xor	eax, eax
		mov	[ebx+8], ecx
		add	esp, 8
		pop	ebx
		retn
; ---------------------------------------------------------------------------
		align 10h
		push	esi
		push	ebx
		sub	esp, 14h
		mov	ebx, [esp+20h]
		call	ds:GetCurrentThreadId
		mov	[esp], ebx
		mov	esi, eax
		call	sub_6FFDBD40
		sub	esp, 4
		test	eax, eax
		jz	short loc_6FFDB950
		cmp	esi, [ebx+8]
		jz	short loc_6FFDB976
		mov	dword ptr [esp+4], 0FFFFFFFFh
		mov	eax, [ebx+0Ch]
		mov	[esp], eax
		call	ds:WaitForSingleObject
		sub	esp, 8
		test	eax, eax
		jnz	short loc_6FFDB960

loc_6FFDB950:				; CODE XREF: .text:6FFDB92Ej
		mov	dword ptr [ebx+4], 1
		mov	[ebx+8], esi
		add	esp, 14h
		pop	ebx
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_6FFDB960:				; CODE XREF: .text:6FFDB94Ej
		mov	[esp], ebx
		call	sub_6FFDBD00
		mov	eax, 1
		sub	esp, 4
		add	esp, 14h
		pop	ebx
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_6FFDB976:				; CODE XREF: .text:6FFDB933j
		mov	[esp], ebx
		call	sub_6FFDBD00
		xor	eax, eax
		add	dword ptr [ebx+4], 1
		sub	esp, 4
		add	esp, 14h
		pop	ebx
		pop	esi
		retn
; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6FFDB990	proc near		; CODE XREF: .text:6FFEB58Fp
					; sub_6FFEB6C0+CEp ...

hHandle		= dword	ptr -1Ch
dwMilliseconds	= dword	ptr -18h
arg_0		= dword	ptr  4

		push	ebx
		sub	esp, 18h
		mov	ebx, [esp+1Ch+arg_0]
		mov	[esp+1Ch+hHandle], ebx
		call	sub_6FFDBD40
		sub	esp, 4
		test	eax, eax
		jnz	short loc_6FFDB9B0

loc_6FFDB9A7:				; CODE XREF: sub_6FFDB990+39j
		xor	eax, eax
		add	esp, 18h
		pop	ebx
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6FFDB9B0:				; CODE XREF: sub_6FFDB990+15j
		mov	[esp+1Ch+dwMilliseconds], 0FFFFFFFFh ; dwMilliseconds
		mov	eax, [ebx+4]
		mov	[esp+1Ch+hHandle], eax ; hHandle
		call	ds:WaitForSingleObject
		sub	esp, 8
		test	eax, eax
		jz	short loc_6FFDB9A7
		mov	[esp+1Ch+hHandle], ebx
		call	sub_6FFDBD00
		mov	eax, 1
		sub	esp, 4
		add	esp, 18h
		pop	ebx
		retn
sub_6FFDB990	endp

; ---------------------------------------------------------------------------
		push	ebx
		sub	esp, 18h
		mov	ebx, [esp+20h]
		mov	dword ptr [ebx], 0FFFFFFFFh
		mov	dword ptr [ebx+4], 0
		mov	dword ptr [ebx+8], 0
		mov	dword ptr [esp+0Ch], 0
		mov	dword ptr [esp+8], 0FFFFh
		mov	dword ptr [esp+4], 0
		mov	dword ptr [esp], 0
		call	ds:CreateSemaphoreA
		sub	esp, 10h
		mov	[ebx+0Ch], eax
		add	esp, 18h
		pop	ebx
		retn
; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6FFDBA30	proc near		; CODE XREF: sub_6FFDBE20+13p

lpSemaphoreAttributes= dword ptr -1Ch
lInitialCount	= dword	ptr -18h
lMaximumCount	= dword	ptr -14h
lpName		= dword	ptr -10h
arg_0		= dword	ptr  4

		push	ebx
		sub	esp, 18h
		mov	ebx, [esp+1Ch+arg_0]
		mov	dword ptr [ebx], 0FFFFFFFFh
		mov	[esp+1Ch+lpName], 0 ; lpName
		mov	[esp+1Ch+lMaximumCount], 0FFFFh	; lMaximumCount
		mov	[esp+1Ch+lInitialCount], 0 ; lInitialCount
		mov	[esp+1Ch+lpSemaphoreAttributes], 0 ; lpSemaphoreAttributes
		call	ds:CreateSemaphoreA
		sub	esp, 10h
		mov	[ebx+4], eax
		add	esp, 18h
		pop	ebx
		retn
sub_6FFDBA30	endp

; ---------------------------------------------------------------------------
		align 10h
		sub	esp, 1Ch
		mov	eax, [esp+20h]
		mov	eax, [eax+4]
		mov	[esp], eax
		call	ds:CloseHandle
		sub	esp, 4
		add	esp, 1Ch
		retn
; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_6FFDBA90(DWORD, LPVOID)
sub_6FFDBA90	proc near		; CODE XREF: sub_6FFEBF70+8Ap

dwTlsIndex	= dword	ptr -1Ch
lpTlsValue	= dword	ptr -18h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		sub	esp, 1Ch
		mov	eax, [esp+1Ch+arg_4]
		mov	[esp+1Ch+lpTlsValue], eax ; lpTlsValue
		mov	eax, [esp+1Ch+arg_0]
		mov	[esp+1Ch+dwTlsIndex], eax ; dwTlsIndex
		call	ds:TlsSetValue
		sub	esp, 8
		test	eax, eax
		jz	short loc_6FFDBAB5
		xor	eax, eax
		add	esp, 1Ch
		retn
; ---------------------------------------------------------------------------

loc_6FFDBAB5:				; CODE XREF: sub_6FFDBA90+1Dj
		mov	eax, ds:GetLastError
		add	esp, 1Ch
		jmp	eax
sub_6FFDBA90	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_6FFDBAC0(DWORD)
sub_6FFDBAC0	proc near		; CODE XREF: sub_6FFEBF70+5Fp
					; sub_6FFEC050+5Fp

dwTlsIndex	= dword	ptr -1Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4

		sub	esp, 1Ch
		mov	[esp+1Ch+var_8], ebx
		mov	[esp+1Ch+var_4], esi
		call	ds:GetLastError
		mov	ebx, eax
		mov	eax, [esp+1Ch+arg_0]
		mov	[esp+1Ch+dwTlsIndex], eax ; dwTlsIndex
		call	ds:TlsGetValue
		sub	esp, 4
		mov	esi, eax
		mov	[esp+1Ch+dwTlsIndex], ebx ; dwErrCode
		call	ds:SetLastError
		mov	eax, esi
		sub	esp, 4
		mov	ebx, [esp+1Ch+var_8]
		mov	esi, [esp+1Ch+var_4]
		add	esp, 1Ch
		retn
sub_6FFDBAC0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_6FFDBB00(DWORD)
sub_6FFDBB00	proc near		; CODE XREF: sub_6FFEC7D0+14p

dwTlsIndex	= dword	ptr -1Ch
arg_0		= dword	ptr  4

		sub	esp, 1Ch
		mov	eax, [esp+1Ch+arg_0]
		mov	[esp+1Ch+dwTlsIndex], eax ; dwTlsIndex
		call	ds:TlsFree
		sub	esp, 4
		test	eax, eax
		jz	short loc_6FFDBB20
		xor	eax, eax
		add	esp, 1Ch
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6FFDBB20:				; CODE XREF: sub_6FFDBB00+15j
		mov	eax, ds:GetLastError
		add	esp, 1Ch
		jmp	eax
sub_6FFDBB00	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6FFDBB30	proc near		; CODE XREF: sub_6FFDBE40+22p

var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		sub	esp, 0Ch
		mov	[esp+0Ch+var_8], ebx
		mov	ebx, [esp+0Ch+arg_4]
		mov	[esp+0Ch+var_4], esi
		mov	esi, [esp+0Ch+arg_0]
		call	ds:TlsAlloc
		cmp	eax, 0FFFFFFFFh
		jz	short loc_6FFDBB68
		mov	[esi], eax
		mov	esi, [esp+0Ch+var_4]
		mov	[esp+0Ch+arg_4], ebx
		mov	ebx, [esp+0Ch+var_8]
		mov	[esp+0Ch+arg_0], eax
		add	esp, 0Ch
		jmp	sub_6FFDBCA0
; ---------------------------------------------------------------------------

loc_6FFDBB68:				; CODE XREF: sub_6FFDBB30+1Cj
		mov	eax, ds:GetLastError
		mov	ebx, [esp+0Ch+var_8]
		mov	esi, [esp+0Ch+var_4]
		add	esp, 0Ch
		jmp	eax
sub_6FFDBB30	endp

; ---------------------------------------------------------------------------
		align 10h
		push	esi
		push	ebx
		sub	esp, 14h
		mov	esi, [esp+24h]
		mov	ebx, [esp+20h]
		test	esi, esi
		jz	short loc_6FFDBBA3
		test	ebx, ebx
		jz	short loc_6FFDBBA3
		mov	ecx, [ebx]
		test	ecx, ecx
		jz	short loc_6FFDBBB0

loc_6FFDBB9B:				; CODE XREF: .text:6FFDBBC6j
					; .text:6FFDBBE2j
		xor	eax, eax

loc_6FFDBB9D:				; CODE XREF: .text:6FFDBBF0j
		add	esp, 14h
		pop	ebx
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_6FFDBBA3:				; CODE XREF: .text:6FFDBB8Fj
					; .text:6FFDBB93j
		add	esp, 14h
		mov	eax, 16h
		pop	ebx
		pop	esi
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6FFDBBB0:				; CODE XREF: .text:6FFDBB99j
		lea	eax, [ebx+4]
		mov	[esp], eax
		call	sub_6FFDBD40
		sub	esp, 4
		test	eax, eax
		jz	short loc_6FFDBBE4
		mov	edx, [ebx]
		test	edx, edx
		jnz	short loc_6FFDBB9B
		mov	esi, ds:Sleep
		xchg	ax, ax

loc_6FFDBBD0:				; CODE XREF: .text:6FFDBBE0j
		mov	dword ptr [esp], 0
		call	esi ; Sleep
		mov	eax, [ebx]
		sub	esp, 4
		test	eax, eax
		jz	short loc_6FFDBBD0
		jmp	short loc_6FFDBB9B
; ---------------------------------------------------------------------------

loc_6FFDBBE4:				; CODE XREF: .text:6FFDBBC0j
		call	esi
		xor	eax, eax
		mov	dword ptr [ebx], 1
		xchg	ax, ax
		jmp	short loc_6FFDBB9D
; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6FFDBC00	proc near		; CODE XREF: sub_6FFD9FB0+D0p
					; sub_6FFD9FB0+E2p ...

arg_0		= byte ptr  4

		push	ecx
		lea	ecx, [esp+4+arg_0]
		cmp	eax, 1000h
		jb	short loc_6FFDBC21

loc_6FFDBC0C:				; CODE XREF: sub_6FFDBC00+1Fj
		sub	ecx, 1000h
		or	dword ptr [ecx], 0
		sub	eax, 1000h
		cmp	eax, 1000h
		ja	short loc_6FFDBC0C

loc_6FFDBC21:				; CODE XREF: sub_6FFDBC00+Aj
		sub	ecx, eax
		or	dword ptr [ecx], 0
		mov	eax, esp
		mov	esp, ecx
		mov	ecx, [eax]
		mov	eax, [eax+4]
		push	eax
		retn
sub_6FFDBC00	endp

; ---------------------------------------------------------------------------
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _write]
		align 10h
		mov	eax, [esp+0Ch]
		mov	edx, [esp+8]
		mov	ecx, [esp+4]
		lock cmpxchg [ecx], edx
		retn
; ---------------------------------------------------------------------------
		jmp	short sub_6FFDBC60
; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6FFDBC60	proc near		; CODE XREF: sub_6FFC1040+53p
					; sub_6FFC1040+C8p ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		mov	eax, [esp+arg_8]
		mov	edx, [esp+arg_4]
		mov	ecx, [esp+arg_0]
		lock cmpxchg [ecx], edx
		retn	0Ch
sub_6FFDBC60	endp

; ---------------------------------------------------------------------------
		align 10h
		mov	eax, [esp+8]
		mov	edx, [esp+4]
		lock xchg eax, [edx]
		retn
; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6FFDBC90	proc near		; CODE XREF: sub_6FFC1040+1A2p
					; sub_6FFC1040+211p

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, [esp+arg_4]
		mov	edx, [esp+arg_0]
		lock xchg eax, [edx]
		retn	8
sub_6FFDBC90	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6FFDBCA0	proc near		; CODE XREF: sub_6FFDBB30+33j

var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

; FUNCTION CHUNK AT 6FFDB260 SIZE 00000070 BYTES

		sub	esp, 0Ch
		mov	eax, [esp+0Ch+arg_4]
		mov	edx, [esp+0Ch+arg_0]
		test	eax, eax
		jz	short loc_6FFDBCC0
		mov	[esp+0Ch+arg_4], eax
		mov	[esp+0Ch+arg_0], edx
		add	esp, 0Ch
		jmp	loc_6FFDB260
; ---------------------------------------------------------------------------
		align 10h

loc_6FFDBCC0:				; CODE XREF: sub_6FFDBCA0+Dj
		add	esp, 0Ch
		retn
sub_6FFDBCA0	endp

; ---------------------------------------------------------------------------
		align 10h
		sub	esp, 0Ch
		add	esp, 0Ch
		jmp	loc_6FFDB1C0
; ---------------------------------------------------------------------------
		align 10h
		mov	edx, [esp+4]
		mov	eax, 0FFFFFFFFh
		lock xadd [edx], eax
		sub	eax, 1
		retn
; ---------------------------------------------------------------------------
		jmp	short sub_6FFDBD00
; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6FFDBD00	proc near		; CODE XREF: .text:6FFDB82Ap
					; sub_6FFDB870+Bp ...

arg_0		= dword	ptr  4

		mov	edx, [esp+arg_0]
		mov	eax, 0FFFFFFFFh
		lock xadd [edx], eax
		sub	eax, 1
		retn	4
sub_6FFDBD00	endp

; ---------------------------------------------------------------------------
		align 10h
		mov	edx, [esp+4]
		mov	eax, 1
		lock xadd [edx], eax
		add	eax, 1
		retn
; ---------------------------------------------------------------------------
		jmp	short sub_6FFDBD40
; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6FFDBD40	proc near		; CODE XREF: .text:6FFDB924p
					; sub_6FFDB990+Bp ...

arg_0		= dword	ptr  4

		mov	edx, [esp+arg_0]
		mov	eax, 1
		lock xadd [edx], eax
		add	eax, 1
		retn	4
sub_6FFDBD40	endp

; ---------------------------------------------------------------------------
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION malloc]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _amsg_exit]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION free]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _initterm]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION memcpy]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION abort]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION strcmp]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION fwrite]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION fputs]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION fputc]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION realloc]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION sprintf]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION strlen]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION strcpy]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _lock]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION __dllonexit]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _unlock]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION vfprintf]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION calloc]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION strncmp]
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_6FFDBE00	proc near		; DATA XREF: .text:6FFEC820o
		push	ebp
		mov	ebp, esp
		sub	esp, 18h
		call	sub_6FFC1430
		mov	dword ptr [esp], offset	sub_6FFC1480 ; _onexit_t
		call	sub_6FFDA930
		leave
		retn
sub_6FFDBE00	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6FFDBE20	proc near		; DATA XREF: .text:6FFEC81Co

var_1C		= dword	ptr -1Ch

		sub	esp, 1Ch
		mov	eax, dword_6FFEE05C
		test	eax, eax
		jz	short loc_6FFDBE38
		mov	[esp+1Ch+var_1C], offset dword_6FFF2A90
		call	sub_6FFDBA30

loc_6FFDBE38:				; CODE XREF: sub_6FFDBE20+Aj
		add	esp, 1Ch
		retn
sub_6FFDBE20	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6FFDBE40	proc near		; DATA XREF: .text:6FFEC818o

var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h

		sub	esp, 1Ch
		mov	eax, dword_6FFEE05C
		mov	byte_6FFF2A84, 0
		test	eax, eax
		jz	short loc_6FFDBE70
		mov	[esp+1Ch+var_18], offset sub_6FFDF260
		mov	[esp+1Ch+var_1C], offset dword_6FFF2A80
		call	sub_6FFDBB30
		test	eax, eax
		setz	byte_6FFF2A84

loc_6FFDBE70:				; CODE XREF: sub_6FFDBE40+11j
		mov	[esp+1Ch+var_1C], offset sub_6FFEC7D0 ;	_onexit_t
		call	sub_6FFDA930
		add	esp, 1Ch
		retn
sub_6FFDBE40	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_6FFDBE80	proc near		; CODE XREF: _ZN16DBusMenuImporter31slotAboutToShowDBusCallFinishedEP23QDBusPendingCallWatcher+92Dp
					; _ZN16DBusMenuImporter21slotGetLayoutFinishedEP23QDBusPendingCallWatcher+C3Cp	...

var_50		= dword	ptr -50h
var_4C		= byte ptr -4Ch
var_48		= dword	ptr -48h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_C		= byte ptr -0Ch
var_8		= byte ptr -8
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 68h
		lea	eax, [ebp+var_8]
		mov	[ebp+var_2C], eax
		lea	eax, [ebp+var_4C]
		mov	[esp], eax
		mov	[ebp+var_34], offset sub_6FFEC1F0
		mov	[ebp+var_30], offset dword_6FFECD60
		mov	[ebp+var_28], offset sub_6FFDBFE4
		mov	[ebp+var_24], esp
		call	_Unwind_SjLj_Register
		mov	eax, dword_6FFF2AA0
		test	eax, eax
		jz	loc_6FFDBF98

loc_6FFDBEBC:				; CODE XREF: sub_6FFDBE80+141j
		mov	edx, dword_6FFF2AA0
		mov	eax, [ebp+arg_4]
		mov	[ebp+var_48], 0FFFFFFFFh
		mov	[ebp+var_50], edx
		mov	[esp], eax
		call	ds:_ZNK8QVariant8userTypeEv
		cmp	eax, [ebp+var_50]
		jz	loc_6FFDBFC6
		cmp	[ebp+var_50], 0FFh
		jg	loc_6FFDBF73
		lea	edx, [ebp+var_C]
		mov	[esp], edx
		mov	[ebp+var_48], 0FFFFFFFFh
		call	ds:_ZN13QDBusArgumentC1Ev
		mov	eax, ds:_ZN8QVariant7handlerE
		lea	edx, [ebp+var_C]
		mov	eax, [eax]
		mov	[esp+8], edx
		mov	edx, [ebp+var_50]
		mov	dword ptr [esp+0Ch], 0
		mov	[esp+4], edx
		mov	edx, [ebp+arg_4]
		mov	[esp], edx
		mov	eax, [eax+18h]
		mov	[ebp+var_48], 1
		call	eax
		test	al, al
		jz	short loc_6FFDBF60
		lea	eax, [ebp+var_C]
		mov	[esp+4], eax
		mov	eax, [ebp+arg_0]
		mov	[esp], eax
		call	ds:_ZN13QDBusArgumentC1ERKS_
		lea	eax, [ebp+var_C]
		mov	[esp], eax
		mov	[ebp+var_48], 0FFFFFFFFh
		call	ds:_ZN13QDBusArgumentD1Ev
		jmp	short loc_6FFDBF86
; ---------------------------------------------------------------------------
		align 10h

loc_6FFDBF60:				; CODE XREF: sub_6FFDBE80+B2j
		lea	eax, [ebp+var_C]
		mov	[esp], eax
		mov	[ebp+var_48], 0FFFFFFFFh
		call	ds:_ZN13QDBusArgumentD1Ev

loc_6FFDBF73:				; CODE XREF: sub_6FFDBE80+68j
		mov	edx, [ebp+arg_0]
		mov	[ebp+var_48], 0FFFFFFFFh
		mov	[esp], edx
		call	ds:_ZN13QDBusArgumentC1Ev

loc_6FFDBF86:				; CODE XREF: sub_6FFDBE80+DAj
					; sub_6FFDBE80+162j
		lea	eax, [ebp+var_4C]
		mov	[esp], eax
		call	_Unwind_SjLj_Unregister
		mov	eax, [ebp+arg_0]
		leave
		retn	4
; ---------------------------------------------------------------------------

loc_6FFDBF98:				; CODE XREF: sub_6FFDBE80+36j
		mov	dword ptr [esp+8], offset sub_6FFDE9E0
		mov	dword ptr [esp+4], offset sub_6FFDDD70
		mov	dword ptr [esp], offset	aQdbusargument ; "QDBusArgument"
		mov	[ebp+var_48], 0FFFFFFFFh
		call	ds:_ZN9QMetaType12registerTypeEPKcPFvPvEPFS2_PKvE
		mov	dword_6FFF2AA0,	eax
		jmp	loc_6FFDBEBC
; ---------------------------------------------------------------------------

loc_6FFDBFC6:				; CODE XREF: sub_6FFDBE80+5Bj
		mov	edx, [ebp+arg_4]
		mov	[esp], edx
		call	ds:_ZNK8QVariant9constDataEv
		mov	[esp+4], eax
		mov	eax, [ebp+arg_0]
		mov	[esp], eax
		call	ds:_ZN13QDBusArgumentC1ERKS_
		jmp	short loc_6FFDBF86
sub_6FFDBE80	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn

sub_6FFDBFE4	proc near		; DATA XREF: sub_6FFDBE80+20o
		add	ebp, 8
		mov	edx, [ebp-44h]
		lea	eax, [ebp-0Ch]
		mov	[esp+0], eax
		mov	[ebp-54h], edx
		mov	dword ptr [ebp-48h], 0
		call	ds:_ZN13QDBusArgumentD1Ev
		mov	eax, [ebp-54h]
		mov	dword ptr [ebp-48h], 0FFFFFFFFh
		mov	[esp+0], eax
		call	_Unwind_SjLj_Resume
sub_6FFDBFE4	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6FFDC020	proc near		; DATA XREF: sub_6FFD2F30+31o
		sub	esp, 0Ch
		add	esp, 0Ch
		jmp	_ZlsR13QDBusArgumentRK12DBusMenuItem
sub_6FFDC020	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6FFDC030	proc near		; DATA XREF: sub_6FFD2F30+7Fo
		sub	esp, 0Ch
		add	esp, 0Ch
		jmp	_ZlsR13QDBusArgumentRK16DBusMenuItemKeys
sub_6FFDC030	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6FFDC040	proc near		; DATA XREF: sub_6FFD2F30+117o

var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 1Ch
		mov	ebx, [esp+2Ch+arg_4]
		mov	esi, [esp+2Ch+arg_0]
		mov	[esp+2Ch+var_28], 0Bh
		mov	[esp+2Ch+var_2C], esi
		call	ds:_ZN13QDBusArgument10beginArrayEi
		mov	eax, [ebx]
		mov	edx, [eax+8]
		lea	ebx, [eax+edx*4+14h]
		mov	edx, [eax+0Ch]
		lea	edi, [eax+edx*4+14h]
		cmp	ebx, edi
		jz	short loc_6FFDC092
		mov	ebp, ds:_ZN13QDBusArgumentlsERK11QStringList
		lea	esi, [esi+0]

loc_6FFDC080:				; CODE XREF: sub_6FFDC040+50j
		mov	eax, [ebx]
		add	ebx, 4
		mov	[esp+2Ch+var_2C], esi
		mov	[esp+2Ch+var_28], eax
		call	ebp ; _ZN13QDBusArgumentlsERK11QStringList
		cmp	edi, ebx
		jnz	short loc_6FFDC080

loc_6FFDC092:				; CODE XREF: sub_6FFDC040+32j
		mov	eax, ds:_ZN13QDBusArgument8endArrayEv
		mov	[esp+2Ch+arg_0], esi
		add	esp, 1Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		jmp	eax
sub_6FFDC040	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6FFDC0B0	proc near		; DATA XREF: sub_6FFD2F30+CDo
		sub	esp, 0Ch
		add	esp, 0Ch
		jmp	_ZlsR13QDBusArgumentRK18DBusMenuLayoutItem
sub_6FFDC0B0	endp

; ---------------------------------------------------------------------------
		align 10h

loc_6FFDC0C0:				; DATA XREF: sub_6FFD2F30+58o
		push	edi
		push	esi
		push	ebx
		sub	esp, 10h
		mov	eax, dword_6FFF2A98
		mov	esi, [esp+20h]
		mov	ebx, [esp+24h]
		test	eax, eax
		jz	short loc_6FFDC126

loc_6FFDC0D7:				; CODE XREF: .text:6FFDC148j
		mov	eax, dword_6FFF2A98
		mov	[esp], esi
		mov	[esp+4], eax
		call	ds:_ZN13QDBusArgument10beginArrayEi
		mov	eax, [ebx]
		mov	edx, [eax+8]
		lea	ebx, [eax+edx*4+14h]
		mov	edx, [eax+0Ch]
		lea	edi, [eax+edx*4+14h]
		cmp	ebx, edi
		jz	short loc_6FFDC115
		lea	esi, [esi+0]

loc_6FFDC100:				; CODE XREF: .text:6FFDC113j
		mov	eax, [ebx]
		add	ebx, 4
		mov	[esp], esi
		mov	[esp+4], eax
		call	_ZlsR13QDBusArgumentRK12DBusMenuItem
		cmp	edi, ebx
		jnz	short loc_6FFDC100

loc_6FFDC115:				; CODE XREF: .text:6FFDC0FBj
		mov	eax, ds:_ZN13QDBusArgument8endArrayEv
		mov	[esp+20h], esi
		add	esp, 10h
		pop	ebx
		pop	esi
		pop	edi
		jmp	eax
; ---------------------------------------------------------------------------

loc_6FFDC126:				; CODE XREF: .text:6FFDC0D5j
		mov	dword ptr [esp+8], offset sub_6FFDE7F0
		mov	dword ptr [esp+4], offset sub_6FFDDC80
		mov	dword ptr [esp], offset	aDbusmenuitem ;	"DBusMenuItem"
		call	ds:_ZN9QMetaType12registerTypeEPKcPFvPvEPFS2_PKvE
		mov	dword_6FFF2A98,	eax
		jmp	short loc_6FFDC0D7
; ---------------------------------------------------------------------------
		align 10h

loc_6FFDC150:				; DATA XREF: sub_6FFD2F30+A6o
		push	edi
		push	esi
		push	ebx
		sub	esp, 10h
		mov	eax, dword_6FFF2AA4
		mov	esi, [esp+20h]
		mov	ebx, [esp+24h]
		test	eax, eax
		jz	short loc_6FFDC1B6

loc_6FFDC167:				; CODE XREF: .text:6FFDC1D8j
		mov	eax, dword_6FFF2AA4
		mov	[esp], esi
		mov	[esp+4], eax
		call	ds:_ZN13QDBusArgument10beginArrayEi
		mov	eax, [ebx]
		mov	edx, [eax+8]
		lea	ebx, [eax+edx*4+14h]
		mov	edx, [eax+0Ch]
		lea	edi, [eax+edx*4+14h]
		cmp	ebx, edi
		jz	short loc_6FFDC1A5
		lea	esi, [esi+0]

loc_6FFDC190:				; CODE XREF: .text:6FFDC1A3j
		mov	eax, [ebx]
		add	ebx, 4
		mov	[esp], esi
		mov	[esp+4], eax
		call	_ZlsR13QDBusArgumentRK16DBusMenuItemKeys
		cmp	edi, ebx
		jnz	short loc_6FFDC190

loc_6FFDC1A5:				; CODE XREF: .text:6FFDC18Bj
		mov	eax, ds:_ZN13QDBusArgument8endArrayEv
		mov	[esp+20h], esi
		add	esp, 10h
		pop	ebx
		pop	esi
		pop	edi
		jmp	eax
; ---------------------------------------------------------------------------

loc_6FFDC1B6:				; CODE XREF: .text:6FFDC165j
		mov	dword ptr [esp+8], offset sub_6FFDEAC0
		mov	dword ptr [esp+4], offset sub_6FFDDDA0
		mov	dword ptr [esp], offset	aDbusmenuitemke	; "DBusMenuItemKeys"
		call	ds:_ZN9QMetaType12registerTypeEPKcPFvPvEPFS2_PKvE
		mov	dword_6FFF2AA4,	eax
		jmp	short loc_6FFDC167
; ---------------------------------------------------------------------------
		align 10h

loc_6FFDC1E0:				; DATA XREF: sub_6FFD2F30+F4o
		push	edi
		push	esi
		push	ebx
		sub	esp, 10h
		mov	eax, dword_6FFF2AAC
		mov	esi, [esp+20h]
		mov	ebx, [esp+24h]
		test	eax, eax
		jz	short loc_6FFDC246

loc_6FFDC1F7:				; CODE XREF: .text:6FFDC268j
		mov	eax, dword_6FFF2AAC
		mov	[esp], esi
		mov	[esp+4], eax
		call	ds:_ZN13QDBusArgument10beginArrayEi
		mov	eax, [ebx]
		mov	edx, [eax+8]
		lea	ebx, [eax+edx*4+14h]
		mov	edx, [eax+0Ch]
		lea	edi, [eax+edx*4+14h]
		cmp	ebx, edi
		jz	short loc_6FFDC235
		lea	esi, [esi+0]

loc_6FFDC220:				; CODE XREF: .text:6FFDC233j
		mov	eax, [ebx]
		add	ebx, 4
		mov	[esp], esi
		mov	[esp+4], eax
		call	_ZlsR13QDBusArgumentRK18DBusMenuLayoutItem
		cmp	edi, ebx
		jnz	short loc_6FFDC220

loc_6FFDC235:				; CODE XREF: .text:6FFDC21Bj
		mov	eax, ds:_ZN13QDBusArgument8endArrayEv
		mov	[esp+20h], esi
		add	esp, 10h
		pop	ebx
		pop	esi
		pop	edi
		jmp	eax
; ---------------------------------------------------------------------------

loc_6FFDC246:				; CODE XREF: .text:6FFDC1F5j
		mov	dword ptr [esp+8], offset sub_6FFDECE0
		mov	dword ptr [esp+4], offset sub_6FFDDF50
		mov	dword ptr [esp], offset	aDbusmenulayo_0	; "DBusMenuLayoutItem"
		call	ds:_ZN9QMetaType12registerTypeEPKcPFvPvEPFS2_PKvE
		mov	dword_6FFF2AAC,	eax
		jmp	short loc_6FFDC1F7
; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6FFDC270	proc near		; DATA XREF: sub_6FFD2F30+29o
		sub	esp, 0Ch
		add	esp, 0Ch
		jmp	_ZrsRK13QDBusArgumentR12DBusMenuItem
sub_6FFDC270	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6FFDC280	proc near		; DATA XREF: sub_6FFD2F30+77o
		sub	esp, 0Ch
		add	esp, 0Ch
		jmp	_ZrsRK13QDBusArgumentR16DBusMenuItemKeys
sub_6FFDC280	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_6FFDC290	proc near		; DATA XREF: sub_6FFD2F30+10Fo

var_A4		= dword	ptr -0A4h
var_A0		= dword	ptr -0A0h
var_9C		= dword	ptr -9Ch
var_98		= dword	ptr -98h
var_94		= dword	ptr -94h
var_90		= dword	ptr -90h
var_8C		= dword	ptr -8Ch
var_88		= dword	ptr -88h
var_84		= dword	ptr -84h
var_80		= dword	ptr -80h
var_7C		= dword	ptr -7Ch
var_78		= dword	ptr -78h
var_74		= dword	ptr -74h
var_70		= dword	ptr -70h
var_6C		= dword	ptr -6Ch
var_68		= dword	ptr -68h
var_64		= dword	ptr -64h
var_60		= dword	ptr -60h
var_5C		= dword	ptr -5Ch
var_58		= dword	ptr -58h
var_54		= dword	ptr -54h
var_50		= dword	ptr -50h
var_4C		= byte ptr -4Ch
var_48		= dword	ptr -48h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= byte ptr -8
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 0C8h
		lea	eax, [ebp+var_8]
		mov	[ebp+var_2C], eax
		lea	eax, [ebp+var_4C]
		mov	[esp], eax
		mov	[ebp+var_34], offset sub_6FFEC1F0
		mov	[ebp+var_30], offset word_6FFED1EE
		mov	[ebp+var_28], offset sub_6FFDC655
		mov	[ebp+var_24], esp
		call	_Unwind_SjLj_Register
		mov	edx, [ebp+arg_4]
		mov	ecx, [ebp+arg_0]
		mov	[ebp+var_48], 0FFFFFFFFh
		mov	[ebp+var_6C], edx
		mov	[esp], ecx
		call	ds:_ZNK13QDBusArgument10beginArrayEv
		mov	eax, ds:_ZN9QListData11shared_nullE
		mov	[ebp+var_10], eax
		mov	[ebp+var_50], eax
		mov	[ebp+var_54], eax
		lock inc dword ptr [eax]
		setnz	al
		mov	ecx, [ebp+arg_4]
		mov	edx, [ebp+var_10]
		mov	eax, [ecx]
		mov	[ebp+var_8C], edx
		cmp	eax, edx
		jz	short loc_6FFDC32F
		lock inc dword ptr [edx]
		setnz	al
		mov	eax, [ecx]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jz	loc_6FFDC54A

loc_6FFDC317:				; CODE XREF: sub_6FFDC290+3C0j
		mov	eax, [ebp+var_8C]
		mov	ecx, [ebp+arg_4]
		mov	[ecx], eax
		test	byte ptr [eax+10h], 1
		jz	loc_6FFDC526

loc_6FFDC32C:				; CODE XREF: sub_6FFDC290+2B5j
		mov	eax, [ebp+var_10]

loc_6FFDC32F:				; CODE XREF: sub_6FFDC290+6Fj
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jz	loc_6FFDC431

loc_6FFDC33D:				; CODE XREF: sub_6FFDC290+291j
		mov	ecx, ds:_ZNK13QDBusArgument5atEndEv
		mov	[ebp+var_58], ecx

loc_6FFDC346:				; CODE XREF: sub_6FFDC290+114j
					; sub_6FFDC290+183j
		mov	eax, [ebp+arg_0]
		mov	[ebp+var_48], 0FFFFFFFFh
		mov	[esp], eax
		call	[ebp+var_58]
		test	al, al
		jnz	loc_6FFDC418
		mov	ecx, [ebp+var_50]
		mov	edx, [ebp+var_54]
		mov	[ebp+var_C], ecx
		lock inc dword ptr [edx]
		setnz	al
		mov	eax, [ebp+arg_0]
		lea	ecx, [ebp+var_C]
		mov	[esp+4], ecx
		mov	[ebp+var_48], 2
		mov	[esp], eax
		call	ds:_ZNK13QDBusArgumentrsER11QStringList
		mov	ecx, [ebp+var_6C]
		lea	edx, [ebp+var_C]
		mov	[esp+4], edx
		mov	[esp], ecx
		call	sub_6FFE58E0
		mov	eax, [ebp+var_C]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jnz	short loc_6FFDC346
		mov	edx, [ebp+var_C]
		mov	eax, edx
		mov	ecx, edx
		mov	[ebp+var_64], edx
		mov	edx, [edx+0Ch]
		add	eax, 14h
		lea	edx, [eax+edx*4]
		mov	[ebp+var_5C], edx
		mov	edx, [ecx+8]
		lea	edx, [eax+edx*4]
		cmp	[ebp+var_5C], edx
		mov	[ebp+var_60], edx
		jz	short loc_6FFDC400
		lea	esi, [esi+0]

loc_6FFDC3D0:				; CODE XREF: sub_6FFDC290+16Ej
		sub	[ebp+var_5C], 4
		mov	edx, [ebp+var_5C]
		mov	eax, [edx]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jnz	short loc_6FFDC3F8
		mov	ecx, [ebp+var_5C]
		mov	eax, [ecx]
		mov	[ebp+var_48], 0FFFFFFFFh
		mov	[esp], eax
		call	ds:_ZN7QString4freeEPNS_4DataE

loc_6FFDC3F8:				; CODE XREF: sub_6FFDC290+151j
		mov	eax, [ebp+var_5C]
		cmp	[ebp+var_60], eax
		jnz	short loc_6FFDC3D0

loc_6FFDC400:				; CODE XREF: sub_6FFDC290+138j
		mov	edx, [ebp+var_64]
		mov	[ebp+var_48], 0FFFFFFFFh
		mov	[esp], edx
		call	ds:_Z5qFreePv
		jmp	loc_6FFDC346
; ---------------------------------------------------------------------------

loc_6FFDC418:				; CODE XREF: sub_6FFDC290+C8j
		mov	edx, [ebp+arg_0]
		mov	[esp], edx
		call	ds:_ZNK13QDBusArgument8endArrayEv
		lea	eax, [ebp+var_4C]
		mov	[esp], eax
		call	_Unwind_SjLj_Unregister
		leave
		retn
; ---------------------------------------------------------------------------

loc_6FFDC431:				; CODE XREF: sub_6FFDC290+A7j
		mov	ecx, [ebp+var_10]
		mov	eax, [ecx+0Ch]
		mov	edx, ecx
		add	edx, 14h
		mov	[ebp+var_A0], ecx
		lea	eax, [edx+eax*4]
		mov	[ebp+var_74], eax
		mov	eax, [ecx+8]
		lea	eax, [edx+eax*4]
		cmp	[ebp+var_74], eax
		mov	[ebp+var_94], eax
		jnz	short loc_6FFDC47A
		jmp	loc_6FFDC50B
; ---------------------------------------------------------------------------
		align 10h

loc_6FFDC460:				; CODE XREF: sub_6FFDC290+204j
					; sub_6FFDC290+276j
		mov	ecx, [ebp+var_78]
		mov	[esp], ecx
		call	sub_6FFEAE50

loc_6FFDC46B:				; CODE XREF: sub_6FFDC290+1F8j
		mov	eax, [ebp+var_74]
		cmp	[ebp+var_94], eax
		jz	loc_6FFDC50B

loc_6FFDC47A:				; CODE XREF: sub_6FFDC290+1C7j
		sub	[ebp+var_74], 4
		mov	eax, [ebp+var_74]
		mov	eax, [eax]
		test	eax, eax
		mov	[ebp+var_78], eax
		jz	short loc_6FFDC46B
		mov	eax, [eax]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jnz	short loc_6FFDC460
		mov	ecx, [ebp+var_78]
		mov	ecx, [ecx]
		mov	edx, [ecx+0Ch]
		mov	eax, ecx
		add	eax, 14h
		mov	[ebp+var_90], ecx
		lea	edx, [eax+edx*4]
		mov	[ebp+var_68], edx
		mov	edx, [ecx+8]
		lea	edx, [eax+edx*4]
		cmp	[ebp+var_68], edx
		mov	[ebp+var_80], edx
		jz	short loc_6FFDC4F0
		lea	esi, [esi+0]

loc_6FFDC4C0:				; CODE XREF: sub_6FFDC290+25Ej
		sub	[ebp+var_68], 4
		mov	edx, [ebp+var_68]
		mov	eax, [edx]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jnz	short loc_6FFDC4E8
		mov	ecx, [ebp+var_68]
		mov	eax, [ecx]
		mov	[ebp+var_48], 0FFFFFFFFh
		mov	[esp], eax
		call	ds:_ZN7QString4freeEPNS_4DataE

loc_6FFDC4E8:				; CODE XREF: sub_6FFDC290+241j
		mov	eax, [ebp+var_68]
		cmp	[ebp+var_80], eax
		jnz	short loc_6FFDC4C0

loc_6FFDC4F0:				; CODE XREF: sub_6FFDC290+22Bj
		mov	edx, [ebp+var_90]
		mov	[ebp+var_48], 0FFFFFFFFh
		mov	[esp], edx
		call	ds:_Z5qFreePv
		jmp	loc_6FFDC460
; ---------------------------------------------------------------------------

loc_6FFDC50B:				; CODE XREF: sub_6FFDC290+1C9j
					; sub_6FFDC290+1E4j
		mov	edx, [ebp+var_A0]
		mov	[ebp+var_48], 0FFFFFFFFh
		mov	[esp], edx
		call	ds:_Z5qFreePv
		jmp	loc_6FFDC33D
; ---------------------------------------------------------------------------

loc_6FFDC526:				; CODE XREF: sub_6FFDC290+96j
		mov	edx, [ebp+var_8C]
		mov	ecx, [ebp+arg_4]
		mov	eax, [edx+4]
		mov	[esp], ecx
		mov	[ebp+var_48], 1
		mov	[esp+4], eax
		call	sub_6FFE54B0
		jmp	loc_6FFDC32C
; ---------------------------------------------------------------------------

loc_6FFDC54A:				; CODE XREF: sub_6FFDC290+81j
		mov	ecx, [ecx]
		mov	eax, [ecx+0Ch]
		mov	edx, ecx
		add	edx, 14h
		mov	[ebp+var_A4], ecx
		lea	eax, [edx+eax*4]
		mov	[ebp+var_7C], eax
		mov	eax, [ecx+8]
		lea	eax, [edx+eax*4]
		cmp	[ebp+var_7C], eax
		mov	[ebp+var_9C], eax
		jnz	short loc_6FFDC593
		jmp	loc_6FFDC63A
; ---------------------------------------------------------------------------

loc_6FFDC576:				; CODE XREF: sub_6FFDC290+320j
					; sub_6FFDC290+3A5j
		mov	ecx, [ebp+var_84]
		mov	[esp], ecx
		call	sub_6FFEAE50

loc_6FFDC584:				; CODE XREF: sub_6FFDC290+314j
		mov	eax, [ebp+var_7C]
		cmp	[ebp+var_9C], eax
		jz	loc_6FFDC63A

loc_6FFDC593:				; CODE XREF: sub_6FFDC290+2DFj
		sub	[ebp+var_7C], 4
		mov	eax, [ebp+var_7C]
		mov	eax, [eax]
		test	eax, eax
		mov	[ebp+var_84], eax
		jz	short loc_6FFDC584
		mov	eax, [eax]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jnz	short loc_6FFDC576
		mov	ecx, [ebp+var_84]
		mov	ecx, [ecx]
		mov	eax, [ecx+0Ch]
		mov	edx, ecx
		add	edx, 14h
		mov	[ebp+var_98], ecx
		lea	eax, [edx+eax*4]
		mov	[ebp+var_70], eax
		mov	eax, [ecx+8]
		lea	eax, [edx+eax*4]
		cmp	[ebp+var_70], eax
		mov	[ebp+var_88], eax
		jnz	short loc_6FFDC5EC
		jmp	short loc_6FFDC61F
; ---------------------------------------------------------------------------

loc_6FFDC5E1:				; CODE XREF: sub_6FFDC290+36Dj
		mov	eax, [ebp+var_70]
		cmp	[ebp+var_88], eax
		jz	short loc_6FFDC61F

loc_6FFDC5EC:				; CODE XREF: sub_6FFDC290+34Dj
					; sub_6FFDC290+38Dj
		sub	[ebp+var_70], 4
		mov	edx, [ebp+var_70]
		mov	eax, [edx]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jnz	short loc_6FFDC5E1
		mov	ecx, [ebp+var_70]
		mov	eax, [ecx]
		mov	[ebp+var_48], 1
		mov	[esp], eax
		call	ds:_ZN7QString4freeEPNS_4DataE
		mov	eax, [ebp+var_70]
		cmp	[ebp+var_88], eax
		jnz	short loc_6FFDC5EC

loc_6FFDC61F:				; CODE XREF: sub_6FFDC290+34Fj
					; sub_6FFDC290+35Aj
		mov	edx, [ebp+var_98]
		mov	[ebp+var_48], 1
		mov	[esp], edx
		call	ds:_Z5qFreePv
		jmp	loc_6FFDC576
; ---------------------------------------------------------------------------

loc_6FFDC63A:				; CODE XREF: sub_6FFDC290+2E1j
					; sub_6FFDC290+2FDj
		mov	edx, [ebp+var_A4]
		mov	[ebp+var_48], 1
		mov	[esp], edx
		call	ds:_Z5qFreePv
		jmp	loc_6FFDC317
sub_6FFDC290	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn

sub_6FFDC655	proc near		; DATA XREF: sub_6FFDC290+23o

arg_0		= dword	ptr  4

		add	ebp, 8
		mov	eax, [ebp-44h]
		cmp	dword ptr [ebp-48h], 1
		mov	[ebp-0ACh], eax
		jz	short loc_6FFDC6A8
		mov	[ebp-0A8h], eax
		mov	eax, [ebp-10h]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jnz	short loc_6FFDC693
		mov	eax, [ebp-10h]
		mov	dword ptr [ebp-48h], 0
		mov	[esp+arg_0], eax
		lea	eax, [ebp-10h]
		mov	[esp+0], eax
		call	sub_6FFE5810

loc_6FFDC693:				; CODE XREF: sub_6FFDC655+23j
		mov	edx, [ebp-0A8h]
		mov	dword ptr [ebp-48h], 0FFFFFFFFh
		mov	[esp+0], edx
		call	_Unwind_SjLj_Resume
; ---------------------------------------------------------------------------

loc_6FFDC6A8:				; CODE XREF: sub_6FFDC655+10j
		lea	eax, [ebp-0Ch]
		mov	[esp+0], eax
		mov	dword ptr [ebp-48h], 0
		call	sub_6FFDF990
		mov	eax, [ebp-0ACh]
		mov	dword ptr [ebp-48h], 0FFFFFFFFh
		mov	[esp+0], eax
		call	_Unwind_SjLj_Resume
sub_6FFDC655	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6FFDC6D0	proc near		; DATA XREF: sub_6FFD2F30+C5o
		sub	esp, 0Ch
		add	esp, 0Ch
		jmp	_ZrsRK13QDBusArgumentR18DBusMenuLayoutItem
sub_6FFDC6D0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_6FFDC6E0	proc near		; DATA XREF: sub_6FFD2F30+50o

var_A0		= dword	ptr -0A0h
var_9C		= dword	ptr -9Ch
var_98		= dword	ptr -98h
var_94		= dword	ptr -94h
var_90		= dword	ptr -90h
var_8C		= dword	ptr -8Ch
var_88		= dword	ptr -88h
var_84		= dword	ptr -84h
var_80		= dword	ptr -80h
var_7C		= dword	ptr -7Ch
var_78		= dword	ptr -78h
var_74		= dword	ptr -74h
var_70		= dword	ptr -70h
var_6C		= dword	ptr -6Ch
var_68		= dword	ptr -68h
var_64		= dword	ptr -64h
var_60		= dword	ptr -60h
var_5C		= dword	ptr -5Ch
var_58		= dword	ptr -58h
var_54		= dword	ptr -54h
var_50		= dword	ptr -50h
var_4C		= byte ptr -4Ch
var_48		= dword	ptr -48h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_14		= byte ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= byte ptr -8
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 0B8h
		lea	eax, [ebp+var_8]
		mov	[ebp+var_2C], eax
		lea	eax, [ebp+var_4C]
		mov	[esp], eax
		mov	[ebp+var_34], offset sub_6FFEC1F0
		mov	[ebp+var_30], offset dword_6FFED180
		mov	[ebp+var_28], offset sub_6FFDCADD
		mov	[ebp+var_24], esp
		call	_Unwind_SjLj_Register
		mov	edx, [ebp+arg_0]
		mov	[ebp+var_48], 0FFFFFFFFh
		mov	[esp], edx
		call	ds:_ZNK13QDBusArgument10beginArrayEv
		mov	eax, ds:_ZN9QListData11shared_nullE
		mov	[ebp+var_C], eax
		lock inc dword ptr [eax]
		setnz	dl
		mov	ecx, [ebp+arg_4]
		mov	edx, [ebp+var_C]
		mov	eax, [ecx]
		mov	[ebp+var_90], edx
		cmp	eax, edx
		jz	short loc_6FFDC773
		lock inc dword ptr [edx]
		setnz	al
		mov	eax, [ecx]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jz	loc_6FFDC9C0

loc_6FFDC75B:				; CODE XREF: sub_6FFDC6E0+3F8j
		mov	eax, [ebp+var_90]
		mov	ecx, [ebp+arg_4]
		mov	[ecx], eax
		test	byte ptr [eax+10h], 1
		jz	loc_6FFDC99C

loc_6FFDC770:				; CODE XREF: sub_6FFDC6E0+2DBj
		mov	eax, [ebp+var_C]

loc_6FFDC773:				; CODE XREF: sub_6FFDC6E0+63j
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jz	loc_6FFDC895

loc_6FFDC781:				; CODE XREF: sub_6FFDC6E0+2B7j
		mov	ecx, ds:_ZN8QMapData11shared_nullE
		mov	eax, ds:_ZNK13QDBusArgument5atEndEv
		mov	[ebp+var_50], ecx
		add	ecx, 34h
		mov	[ebp+var_54], ecx
		mov	[ebp+var_58], eax

loc_6FFDC798:				; CODE XREF: sub_6FFDC6E0+10Fj
					; sub_6FFDC6E0+11Aj ...
		mov	edx, [ebp+arg_0]
		mov	[ebp+var_48], 0FFFFFFFFh
		mov	[esp], edx
		call	[ebp+var_58]
		test	al, al
		jnz	loc_6FFDC87C
		mov	edx, [ebp+var_50]
		mov	ecx, [ebp+var_54]
		mov	[ebp+var_10], edx
		lock inc dword ptr [ecx]
		setnz	al
		lea	eax, [ebp+var_14]
		mov	[esp+4], eax
		mov	eax, [ebp+arg_0]
		mov	[ebp+var_48], 2
		mov	[esp], eax
		call	_ZrsRK13QDBusArgumentR12DBusMenuItem
		mov	edx, [ebp+arg_4]
		lea	eax, [ebp+var_14]
		mov	[esp+4], eax
		mov	[esp], edx
		call	sub_6FFE6420
		mov	eax, [ebp+var_10]
		test	eax, eax
		jz	short loc_6FFDC798
		lock dec dword ptr [eax+34h]
		setnz	dl
		test	dl, dl
		jnz	short loc_6FFDC798
		mov	eax, [ebp+var_10]
		mov	edx, eax
		mov	[ebp+var_64], eax
		mov	eax, [eax+4]
		cmp	edx, eax
		jnz	short loc_6FFDC812
		jmp	short loc_6FFDC85C
; ---------------------------------------------------------------------------
		align 10h

loc_6FFDC810:				; CODE XREF: sub_6FFDC6E0+17Aj
		mov	eax, ecx

loc_6FFDC812:				; CODE XREF: sub_6FFDC6E0+129j
		mov	ecx, [eax+4]
		lea	edx, [eax-1Ch]
		mov	[ebp+var_60], edx
		mov	edx, [eax-1Ch]
		mov	[ebp+var_5C], ecx
		lock dec dword ptr [edx]
		setnz	cl
		test	cl, cl
		jnz	short loc_6FFDC83E
		mov	eax, [eax-1Ch]
		mov	[ebp+var_48], 0FFFFFFFFh
		mov	[esp], eax
		call	ds:_ZN7QString4freeEPNS_4DataE

loc_6FFDC83E:				; CODE XREF: sub_6FFDC6E0+149j
		mov	eax, [ebp+var_60]
		mov	[ebp+var_48], 0FFFFFFFFh
		add	eax, 8
		mov	[esp], eax
		call	ds:_ZN8QVariantD1Ev
		mov	ecx, [ebp+var_5C]
		cmp	[ebp+var_64], ecx
		jnz	short loc_6FFDC810

loc_6FFDC85C:				; CODE XREF: sub_6FFDC6E0+12Bj
		mov	eax, [ebp+var_64]
		mov	dword ptr [esp+4], 1Ch
		mov	[ebp+var_48], 0FFFFFFFFh
		mov	[esp], eax
		call	ds:_ZN8QMapData16continueFreeDataEi
		jmp	loc_6FFDC798
; ---------------------------------------------------------------------------

loc_6FFDC87C:				; CODE XREF: sub_6FFDC6E0+CAj
		mov	ecx, [ebp+arg_0]
		mov	[esp], ecx
		call	ds:_ZNK13QDBusArgument8endArrayEv
		lea	eax, [ebp+var_4C]
		mov	[esp], eax
		call	_Unwind_SjLj_Unregister
		leave
		retn
; ---------------------------------------------------------------------------

loc_6FFDC895:				; CODE XREF: sub_6FFDC6E0+9Bj
		mov	ecx, [ebp+var_C]
		mov	edx, [ecx+0Ch]
		mov	eax, ecx
		add	eax, 14h
		mov	[ebp+var_A0], ecx
		lea	edx, [eax+edx*4]
		mov	[ebp+var_78], edx
		mov	edx, [ecx+8]
		lea	edx, [eax+edx*4]
		cmp	[ebp+var_78], edx
		mov	[ebp+var_94], edx
		jnz	short loc_6FFDC8DC
		jmp	loc_6FFDC981
; ---------------------------------------------------------------------------

loc_6FFDC8C2:				; CODE XREF: sub_6FFDC6E0+211j
					; sub_6FFDC6E0+21Cj ...
		mov	ecx, [ebp+var_7C]
		mov	[esp], ecx
		call	sub_6FFEAE50

loc_6FFDC8CD:				; CODE XREF: sub_6FFDC6E0+20Aj
		mov	eax, [ebp+var_78]
		cmp	[ebp+var_94], eax
		jz	loc_6FFDC981

loc_6FFDC8DC:				; CODE XREF: sub_6FFDC6E0+1DBj
		sub	[ebp+var_78], 4
		mov	eax, [ebp+var_78]
		mov	eax, [eax]
		test	eax, eax
		mov	[ebp+var_7C], eax
		jz	short loc_6FFDC8CD
		mov	eax, [eax+4]
		test	eax, eax
		jz	short loc_6FFDC8C2
		lock dec dword ptr [eax+34h]
		setnz	dl
		test	dl, dl
		jnz	short loc_6FFDC8C2
		mov	ecx, [ebp+var_7C]
		mov	ecx, [ecx+4]
		mov	eax, [ecx+4]
		mov	[ebp+var_84], ecx
		cmp	ecx, eax
		jz	short loc_6FFDC95E

loc_6FFDC911:				; CODE XREF: sub_6FFDC6E0+27Cj
		mov	edx, [eax+4]
		lea	ecx, [eax-1Ch]
		mov	[ebp+var_70], ecx
		mov	[ebp+var_68], edx
		mov	edx, [eax-1Ch]
		lock dec dword ptr [edx]
		setnz	cl
		test	cl, cl
		jnz	short loc_6FFDC93D
		mov	eax, [eax-1Ch]
		mov	[ebp+var_48], 0FFFFFFFFh
		mov	[esp], eax
		call	ds:_ZN7QString4freeEPNS_4DataE

loc_6FFDC93D:				; CODE XREF: sub_6FFDC6E0+248j
		mov	eax, [ebp+var_70]
		mov	[ebp+var_48], 0FFFFFFFFh
		add	eax, 8
		mov	[esp], eax
		call	ds:_ZN8QVariantD1Ev
		mov	eax, [ebp+var_68]
		cmp	[ebp+var_84], eax
		jnz	short loc_6FFDC911

loc_6FFDC95E:				; CODE XREF: sub_6FFDC6E0+22Fj
		mov	edx, [ebp+var_84]
		mov	dword ptr [esp+4], 1Ch
		mov	[ebp+var_48], 0FFFFFFFFh
		mov	[esp], edx
		call	ds:_ZN8QMapData16continueFreeDataEi
		jmp	loc_6FFDC8C2
; ---------------------------------------------------------------------------

loc_6FFDC981:				; CODE XREF: sub_6FFDC6E0+1DDj
					; sub_6FFDC6E0+1F6j
		mov	edx, [ebp+var_A0]
		mov	[ebp+var_48], 0FFFFFFFFh
		mov	[esp], edx
		call	ds:_Z5qFreePv
		jmp	loc_6FFDC781
; ---------------------------------------------------------------------------

loc_6FFDC99C:				; CODE XREF: sub_6FFDC6E0+8Aj
		mov	edx, [ebp+var_90]
		mov	ecx, [ebp+arg_4]
		mov	eax, [edx+4]
		mov	[esp], ecx
		mov	[ebp+var_48], 1
		mov	[esp+4], eax
		call	sub_6FFE5F80
		jmp	loc_6FFDC770
; ---------------------------------------------------------------------------

loc_6FFDC9C0:				; CODE XREF: sub_6FFDC6E0+75j
		mov	ecx, [ecx]
		mov	edx, [ecx+0Ch]
		mov	eax, ecx
		add	eax, 14h
		mov	[ebp+var_9C], ecx
		lea	edx, [eax+edx*4]
		mov	[ebp+var_80], edx
		mov	edx, [ecx+8]
		lea	edx, [eax+edx*4]
		cmp	[ebp+var_80], edx
		mov	[ebp+var_98], edx
		jnz	short loc_6FFDCA0D
		jmp	loc_6FFDCAC2
; ---------------------------------------------------------------------------
		align 10h

loc_6FFDC9F0:				; CODE XREF: sub_6FFDC6E0+345j
					; sub_6FFDC6E0+350j ...
		mov	ecx, [ebp+var_88]
		mov	[esp], ecx
		call	sub_6FFEAE50

loc_6FFDC9FE:				; CODE XREF: sub_6FFDC6E0+33Ej
		mov	eax, [ebp+var_80]
		cmp	[ebp+var_98], eax
		jz	loc_6FFDCAC2

loc_6FFDCA0D:				; CODE XREF: sub_6FFDC6E0+305j
		sub	[ebp+var_80], 4
		mov	eax, [ebp+var_80]
		mov	eax, [eax]
		test	eax, eax
		mov	[ebp+var_88], eax
		jz	short loc_6FFDC9FE
		mov	eax, [eax+4]
		test	eax, eax
		jz	short loc_6FFDC9F0
		lock dec dword ptr [eax+34h]
		setnz	dl
		test	dl, dl
		jnz	short loc_6FFDC9F0
		mov	ecx, [ebp+var_88]
		mov	ecx, [ecx+4]
		mov	eax, [ecx+4]
		mov	[ebp+var_8C], ecx
		cmp	ecx, eax
		jnz	short loc_6FFDCA71
		jmp	short loc_6FFDCA9F
; ---------------------------------------------------------------------------
		align 10h

loc_6FFDCA50:				; CODE XREF: sub_6FFDC6E0+3A8j
					; sub_6FFDC6E0+3BDj
		mov	eax, [ebp+var_74]
		mov	[ebp+var_48], 1
		add	eax, 8
		mov	[esp], eax
		call	ds:_ZN8QVariantD1Ev
		mov	eax, [ebp+var_6C]
		cmp	[ebp+var_8C], eax
		jz	short loc_6FFDCA9F

loc_6FFDCA71:				; CODE XREF: sub_6FFDC6E0+366j
		mov	edx, [eax+4]
		lea	ecx, [eax-1Ch]
		mov	[ebp+var_74], ecx
		mov	[ebp+var_6C], edx
		mov	edx, [eax-1Ch]
		lock dec dword ptr [edx]
		setnz	cl
		test	cl, cl
		jnz	short loc_6FFDCA50
		mov	eax, [eax-1Ch]
		mov	[ebp+var_48], 1
		mov	[esp], eax
		call	ds:_ZN7QString4freeEPNS_4DataE
		jmp	short loc_6FFDCA50
; ---------------------------------------------------------------------------

loc_6FFDCA9F:				; CODE XREF: sub_6FFDC6E0+368j
					; sub_6FFDC6E0+38Fj
		mov	edx, [ebp+var_8C]
		mov	dword ptr [esp+4], 1Ch
		mov	[ebp+var_48], 1
		mov	[esp], edx
		call	ds:_ZN8QMapData16continueFreeDataEi
		jmp	loc_6FFDC9F0
; ---------------------------------------------------------------------------

loc_6FFDCAC2:				; CODE XREF: sub_6FFDC6E0+307j
					; sub_6FFDC6E0+327j
		mov	edx, [ebp+var_9C]
		mov	[ebp+var_48], 1
		mov	[esp], edx
		call	ds:_Z5qFreePv
		jmp	loc_6FFDC75B
sub_6FFDC6E0	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn

sub_6FFDCADD	proc near		; DATA XREF: sub_6FFDC6E0+23o

arg_0		= dword	ptr  4

		add	ebp, 8
		mov	eax, [ebp-44h]
		cmp	dword ptr [ebp-48h], 1
		mov	[ebp-0A8h], eax
		jz	short loc_6FFDCB30
		mov	[ebp-0A4h], eax
		mov	eax, [ebp-0Ch]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jnz	short loc_6FFDCB1B
		mov	eax, [ebp-0Ch]
		mov	dword ptr [ebp-48h], 0
		mov	[esp+arg_0], eax
		lea	eax, [ebp-0Ch]
		mov	[esp+0], eax
		call	sub_6FFE6340

loc_6FFDCB1B:				; CODE XREF: sub_6FFDCADD+23j
		mov	edx, [ebp-0A4h]
		mov	dword ptr [ebp-48h], 0FFFFFFFFh
		mov	[esp+0], edx
		call	_Unwind_SjLj_Resume
; ---------------------------------------------------------------------------

loc_6FFDCB30:				; CODE XREF: sub_6FFDCADD+10j
		lea	eax, [ebp-10h]
		mov	[esp+0], eax
		mov	dword ptr [ebp-48h], 0
		call	sub_6FFE4290
		mov	ecx, [ebp-0A8h]
		mov	dword ptr [ebp-48h], 0FFFFFFFFh
		mov	[esp+0], ecx
		call	_Unwind_SjLj_Resume
sub_6FFDCADD	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_6FFDCB60	proc near		; DATA XREF: sub_6FFD2F30+9Eo

var_A0		= dword	ptr -0A0h
var_9C		= dword	ptr -9Ch
var_98		= dword	ptr -98h
var_94		= dword	ptr -94h
var_90		= dword	ptr -90h
var_8C		= dword	ptr -8Ch
var_88		= dword	ptr -88h
var_84		= dword	ptr -84h
var_80		= dword	ptr -80h
var_7C		= dword	ptr -7Ch
var_78		= dword	ptr -78h
var_74		= dword	ptr -74h
var_70		= dword	ptr -70h
var_6C		= dword	ptr -6Ch
var_68		= dword	ptr -68h
var_64		= dword	ptr -64h
var_60		= dword	ptr -60h
var_5C		= dword	ptr -5Ch
var_58		= dword	ptr -58h
var_54		= dword	ptr -54h
var_50		= dword	ptr -50h
var_4C		= byte ptr -4Ch
var_48		= dword	ptr -48h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_14		= byte ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= byte ptr -8
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 0B8h
		lea	eax, [ebp+var_8]
		mov	[ebp+var_2C], eax
		lea	eax, [ebp+var_4C]
		mov	[esp], eax
		mov	[ebp+var_34], offset sub_6FFEC1F0
		mov	[ebp+var_30], offset dword_6FFED244
		mov	[ebp+var_28], offset sub_6FFDCF14
		mov	[ebp+var_24], esp
		call	_Unwind_SjLj_Register
		mov	edx, [ebp+arg_0]
		mov	[ebp+var_48], 0FFFFFFFFh
		mov	[esp], edx
		call	ds:_ZNK13QDBusArgument10beginArrayEv
		mov	ecx, ds:_ZN9QListData11shared_nullE
		mov	[ebp+var_C], ecx
		mov	[ebp+var_50], ecx
		mov	[ebp+var_54], ecx
		lock inc dword ptr [ecx]
		setnz	al
		mov	ecx, [ebp+arg_4]
		mov	edx, [ebp+var_C]
		mov	eax, [ecx]
		mov	[ebp+var_88], edx
		cmp	eax, edx
		jz	short loc_6FFDCBFA
		lock inc dword ptr [edx]
		setnz	al
		mov	eax, [ecx]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jz	loc_6FFDCE0B

loc_6FFDCBE2:				; CODE XREF: sub_6FFDCB60+3AFj
		mov	eax, [ebp+var_88]
		mov	ecx, [ebp+arg_4]
		mov	[ecx], eax
		test	byte ptr [eax+10h], 1
		jz	loc_6FFDCDE7

loc_6FFDCBF7:				; CODE XREF: sub_6FFDCB60+2A6j
		mov	eax, [ebp+var_C]

loc_6FFDCBFA:				; CODE XREF: sub_6FFDCB60+6Aj
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jz	loc_6FFDCCF5

loc_6FFDCC08:				; CODE XREF: sub_6FFDCB60+282j
		mov	ecx, ds:_ZNK13QDBusArgument5atEndEv
		mov	[ebp+var_58], ecx

loc_6FFDCC11:				; CODE XREF: sub_6FFDCB60+10Ej
					; sub_6FFDCB60+177j
		mov	eax, [ebp+arg_0]
		mov	[ebp+var_48], 0FFFFFFFFh
		mov	[esp], eax
		call	[ebp+var_58]
		test	al, al
		jnz	loc_6FFDCCDC
		mov	ecx, [ebp+var_50]
		mov	edx, [ebp+var_54]
		mov	[ebp+var_10], ecx
		lock inc dword ptr [edx]
		setnz	al
		mov	eax, [ebp+arg_0]
		lea	ecx, [ebp+var_14]
		mov	[esp+4], ecx
		mov	[ebp+var_48], 2
		mov	[esp], eax
		call	_ZrsRK13QDBusArgumentR16DBusMenuItemKeys
		mov	ecx, [ebp+arg_4]
		lea	edx, [ebp+var_14]
		mov	[esp+4], edx
		mov	[esp], ecx
		call	sub_6FFE7040
		mov	eax, [ebp+var_10]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jnz	short loc_6FFDCC11
		mov	edx, [ebp+var_10]
		mov	eax, edx
		mov	ecx, edx
		mov	[ebp+var_64], edx
		mov	edx, [edx+0Ch]
		add	eax, 14h
		lea	edx, [eax+edx*4]
		mov	[ebp+var_5C], edx
		mov	edx, [ecx+8]
		lea	edx, [eax+edx*4]
		cmp	[ebp+var_5C], edx
		mov	[ebp+var_60], edx
		jz	short loc_6FFDCCC4

loc_6FFDCC94:				; CODE XREF: sub_6FFDCB60+162j
		sub	[ebp+var_5C], 4
		mov	edx, [ebp+var_5C]
		mov	eax, [edx]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jnz	short loc_6FFDCCBC
		mov	ecx, [ebp+var_5C]
		mov	eax, [ecx]
		mov	[ebp+var_48], 0FFFFFFFFh
		mov	[esp], eax
		call	ds:_ZN7QString4freeEPNS_4DataE

loc_6FFDCCBC:				; CODE XREF: sub_6FFDCB60+145j
		mov	eax, [ebp+var_5C]
		cmp	[ebp+var_60], eax
		jnz	short loc_6FFDCC94

loc_6FFDCCC4:				; CODE XREF: sub_6FFDCB60+132j
		mov	edx, [ebp+var_64]
		mov	[ebp+var_48], 0FFFFFFFFh
		mov	[esp], edx
		call	ds:_Z5qFreePv
		jmp	loc_6FFDCC11
; ---------------------------------------------------------------------------

loc_6FFDCCDC:				; CODE XREF: sub_6FFDCB60+C3j
		mov	edx, [ebp+arg_0]
		mov	[esp], edx
		call	ds:_ZNK13QDBusArgument8endArrayEv
		lea	eax, [ebp+var_4C]
		mov	[esp], eax
		call	_Unwind_SjLj_Unregister
		leave
		retn
; ---------------------------------------------------------------------------

loc_6FFDCCF5:				; CODE XREF: sub_6FFDCB60+A2j
		mov	ecx, [ebp+var_C]
		mov	eax, [ecx+0Ch]
		mov	edx, ecx
		add	edx, 14h
		mov	[ebp+var_9C], ecx
		lea	eax, [edx+eax*4]
		mov	[ebp+var_70], eax
		mov	eax, [ecx+8]
		lea	eax, [edx+eax*4]
		cmp	[ebp+var_70], eax
		mov	[ebp+var_90], eax
		jnz	short loc_6FFDCD3C
		jmp	loc_6FFDCDCC
; ---------------------------------------------------------------------------

loc_6FFDCD22:				; CODE XREF: sub_6FFDCB60+1F7j
					; sub_6FFDCB60+267j
		mov	ecx, [ebp+var_74]
		mov	[esp], ecx
		call	sub_6FFEAE50

loc_6FFDCD2D:				; CODE XREF: sub_6FFDCB60+1EAj
		mov	eax, [ebp+var_70]
		cmp	[ebp+var_90], eax
		jz	loc_6FFDCDCC

loc_6FFDCD3C:				; CODE XREF: sub_6FFDCB60+1BBj
		sub	[ebp+var_70], 4
		mov	eax, [ebp+var_70]
		mov	eax, [eax]
		test	eax, eax
		mov	[ebp+var_74], eax
		jz	short loc_6FFDCD2D
		mov	eax, [eax+4]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jnz	short loc_6FFDCD22
		mov	ecx, [ebp+var_74]
		mov	ecx, [ecx+4]
		mov	edx, [ecx+0Ch]
		mov	eax, ecx
		add	eax, 14h
		mov	[ebp+var_8C], ecx
		lea	edx, [eax+edx*4]
		mov	[ebp+var_68], edx
		mov	edx, [ecx+8]
		lea	edx, [eax+edx*4]
		cmp	[ebp+var_68], edx
		mov	[ebp+var_7C], edx
		jz	short loc_6FFDCDB1

loc_6FFDCD81:				; CODE XREF: sub_6FFDCB60+24Fj
		sub	[ebp+var_68], 4
		mov	edx, [ebp+var_68]
		mov	eax, [edx]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jnz	short loc_6FFDCDA9
		mov	ecx, [ebp+var_68]
		mov	eax, [ecx]
		mov	[ebp+var_48], 0FFFFFFFFh
		mov	[esp], eax
		call	ds:_ZN7QString4freeEPNS_4DataE

loc_6FFDCDA9:				; CODE XREF: sub_6FFDCB60+232j
		mov	eax, [ebp+var_68]
		cmp	[ebp+var_7C], eax
		jnz	short loc_6FFDCD81

loc_6FFDCDB1:				; CODE XREF: sub_6FFDCB60+21Fj
		mov	edx, [ebp+var_8C]
		mov	[ebp+var_48], 0FFFFFFFFh
		mov	[esp], edx
		call	ds:_Z5qFreePv
		jmp	loc_6FFDCD22
; ---------------------------------------------------------------------------

loc_6FFDCDCC:				; CODE XREF: sub_6FFDCB60+1BDj
					; sub_6FFDCB60+1D6j
		mov	edx, [ebp+var_9C]
		mov	[ebp+var_48], 0FFFFFFFFh
		mov	[esp], edx
		call	ds:_Z5qFreePv
		jmp	loc_6FFDCC08
; ---------------------------------------------------------------------------

loc_6FFDCDE7:				; CODE XREF: sub_6FFDCB60+91j
		mov	edx, [ebp+var_88]
		mov	ecx, [ebp+arg_4]
		mov	eax, [edx+4]
		mov	[esp], ecx
		mov	[ebp+var_48], 1
		mov	[esp+4], eax
		call	sub_6FFE6BF0
		jmp	loc_6FFDCBF7
; ---------------------------------------------------------------------------

loc_6FFDCE0B:				; CODE XREF: sub_6FFDCB60+7Cj
		mov	ecx, [ecx]
		mov	eax, [ecx+0Ch]
		mov	edx, ecx
		add	edx, 14h
		mov	[ebp+var_A0], ecx
		lea	eax, [edx+eax*4]
		mov	[ebp+var_78], eax
		mov	eax, [ecx+8]
		lea	eax, [edx+eax*4]
		cmp	[ebp+var_78], eax
		mov	[ebp+var_98], eax
		jnz	short loc_6FFDCE51
		jmp	loc_6FFDCEF9
; ---------------------------------------------------------------------------

loc_6FFDCE37:				; CODE XREF: sub_6FFDCB60+30Cj
					; sub_6FFDCB60+394j
		mov	ecx, [ebp+var_80]
		mov	[esp], ecx
		call	sub_6FFEAE50

loc_6FFDCE42:				; CODE XREF: sub_6FFDCB60+2FFj
		mov	eax, [ebp+var_78]
		cmp	[ebp+var_98], eax
		jz	loc_6FFDCEF9

loc_6FFDCE51:				; CODE XREF: sub_6FFDCB60+2D0j
		sub	[ebp+var_78], 4
		mov	eax, [ebp+var_78]
		mov	eax, [eax]
		test	eax, eax
		mov	[ebp+var_80], eax
		jz	short loc_6FFDCE42
		mov	eax, [eax+4]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jnz	short loc_6FFDCE37
		mov	ecx, [ebp+var_80]
		mov	ecx, [ecx+4]
		mov	eax, [ecx+0Ch]
		mov	edx, ecx
		add	edx, 14h
		mov	[ebp+var_94], ecx
		lea	eax, [edx+eax*4]
		mov	[ebp+var_6C], eax
		mov	eax, [ecx+8]
		lea	eax, [edx+eax*4]
		cmp	[ebp+var_6C], eax
		mov	[ebp+var_84], eax
		jnz	short loc_6FFDCEAB
		jmp	short loc_6FFDCEDE
; ---------------------------------------------------------------------------
		align 10h

loc_6FFDCEA0:				; CODE XREF: sub_6FFDCB60+35Cj
		mov	eax, [ebp+var_6C]
		cmp	[ebp+var_84], eax
		jz	short loc_6FFDCEDE

loc_6FFDCEAB:				; CODE XREF: sub_6FFDCB60+337j
					; sub_6FFDCB60+37Cj
		sub	[ebp+var_6C], 4
		mov	edx, [ebp+var_6C]
		mov	eax, [edx]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jnz	short loc_6FFDCEA0
		mov	ecx, [ebp+var_6C]
		mov	eax, [ecx]
		mov	[ebp+var_48], 1
		mov	[esp], eax
		call	ds:_ZN7QString4freeEPNS_4DataE
		mov	eax, [ebp+var_6C]
		cmp	[ebp+var_84], eax
		jnz	short loc_6FFDCEAB

loc_6FFDCEDE:				; CODE XREF: sub_6FFDCB60+339j
					; sub_6FFDCB60+349j
		mov	edx, [ebp+var_94]
		mov	[ebp+var_48], 1
		mov	[esp], edx
		call	ds:_Z5qFreePv
		jmp	loc_6FFDCE37
; ---------------------------------------------------------------------------

loc_6FFDCEF9:				; CODE XREF: sub_6FFDCB60+2D2j
					; sub_6FFDCB60+2EBj
		mov	edx, [ebp+var_A0]
		mov	[ebp+var_48], 1
		mov	[esp], edx
		call	ds:_Z5qFreePv
		jmp	loc_6FFDCBE2
sub_6FFDCB60	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn

sub_6FFDCF14	proc near		; DATA XREF: sub_6FFDCB60+23o

arg_0		= dword	ptr  4

		add	ebp, 8
		mov	eax, [ebp-44h]
		cmp	dword ptr [ebp-48h], 1
		mov	[ebp-0A8h], eax
		jz	short loc_6FFDCF67
		mov	[ebp-0A4h], eax
		mov	eax, [ebp-0Ch]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jnz	short loc_6FFDCF52
		mov	eax, [ebp-0Ch]
		mov	dword ptr [ebp-48h], 0
		mov	[esp+arg_0], eax
		lea	eax, [ebp-0Ch]
		mov	[esp+0], eax
		call	sub_6FFE6F70

loc_6FFDCF52:				; CODE XREF: sub_6FFDCF14+23j
		mov	edx, [ebp-0A4h]
		mov	dword ptr [ebp-48h], 0FFFFFFFFh
		mov	[esp+0], edx
		call	_Unwind_SjLj_Resume
; ---------------------------------------------------------------------------

loc_6FFDCF67:				; CODE XREF: sub_6FFDCF14+10j
		lea	eax, [ebp-10h]
		mov	[esp+0], eax
		mov	dword ptr [ebp-48h], 0
		call	sub_6FFDF990
		mov	eax, [ebp-0A8h]
		mov	dword ptr [ebp-48h], 0FFFFFFFFh
		mov	[esp+0], eax
		call	_Unwind_SjLj_Resume
sub_6FFDCF14	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_6FFDCF90	proc near		; DATA XREF: sub_6FFD2F30+ECo

var_154		= dword	ptr -154h
var_150		= dword	ptr -150h
var_14C		= dword	ptr -14Ch
var_148		= dword	ptr -148h
var_144		= dword	ptr -144h
var_140		= dword	ptr -140h
var_13C		= dword	ptr -13Ch
var_138		= dword	ptr -138h
var_134		= dword	ptr -134h
var_130		= dword	ptr -130h
var_12C		= dword	ptr -12Ch
var_128		= dword	ptr -128h
var_124		= dword	ptr -124h
var_120		= dword	ptr -120h
var_11C		= dword	ptr -11Ch
var_118		= dword	ptr -118h
var_114		= dword	ptr -114h
var_110		= dword	ptr -110h
var_10C		= dword	ptr -10Ch
var_108		= dword	ptr -108h
var_104		= dword	ptr -104h
var_100		= dword	ptr -100h
var_FC		= dword	ptr -0FCh
var_F8		= dword	ptr -0F8h
var_F4		= dword	ptr -0F4h
var_F0		= dword	ptr -0F0h
var_EC		= dword	ptr -0ECh
var_E8		= dword	ptr -0E8h
var_E4		= dword	ptr -0E4h
var_E0		= dword	ptr -0E0h
var_DC		= dword	ptr -0DCh
var_D8		= dword	ptr -0D8h
var_D4		= dword	ptr -0D4h
var_D0		= dword	ptr -0D0h
var_CC		= dword	ptr -0CCh
var_C8		= dword	ptr -0C8h
var_C4		= dword	ptr -0C4h
var_C0		= dword	ptr -0C0h
var_BC		= dword	ptr -0BCh
var_B8		= dword	ptr -0B8h
var_B4		= dword	ptr -0B4h
var_B0		= dword	ptr -0B0h
var_AC		= dword	ptr -0ACh
var_A8		= dword	ptr -0A8h
var_A4		= dword	ptr -0A4h
var_A0		= dword	ptr -0A0h
var_9C		= dword	ptr -9Ch
var_98		= dword	ptr -98h
var_94		= dword	ptr -94h
var_90		= dword	ptr -90h
var_8C		= dword	ptr -8Ch
var_88		= dword	ptr -88h
var_84		= dword	ptr -84h
var_80		= dword	ptr -80h
var_7C		= dword	ptr -7Ch
var_78		= dword	ptr -78h
var_74		= dword	ptr -74h
var_70		= dword	ptr -70h
var_6C		= dword	ptr -6Ch
var_68		= dword	ptr -68h
var_64		= dword	ptr -64h
var_60		= dword	ptr -60h
var_5C		= dword	ptr -5Ch
var_58		= dword	ptr -58h
var_54		= dword	ptr -54h
var_50		= dword	ptr -50h
var_4C		= byte ptr -4Ch
var_48		= dword	ptr -48h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_18		= byte ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= byte ptr -8
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 168h
		lea	eax, [ebp+var_8]
		mov	[ebp+var_2C], eax
		lea	eax, [ebp+var_4C]
		mov	[esp], eax
		mov	[ebp+var_34], offset sub_6FFEC1F0
		mov	[ebp+var_30], offset dword_6FFED2E0
		mov	[ebp+var_28], offset sub_6FFDDB10
		mov	[ebp+var_24], esp
		call	_Unwind_SjLj_Register
		mov	edx, [ebp+arg_0]
		mov	[ebp+var_48], 0FFFFFFFFh
		mov	[esp], edx
		call	ds:_ZNK13QDBusArgument10beginArrayEv
		mov	ecx, ds:_ZN9QListData11shared_nullE
		mov	[ebp+var_C], ecx
		mov	[ebp+var_50], ecx
		mov	[ebp+var_54], ecx
		lock inc dword ptr [ecx]
		setnz	al
		mov	ecx, [ebp+arg_4]
		mov	edx, [ebp+var_C]
		mov	eax, [ecx]
		mov	[ebp+var_13C], edx
		cmp	eax, edx
		jz	short loc_6FFDD02A
		lock inc dword ptr [edx]
		setnz	al
		mov	eax, [ecx]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jz	loc_6FFDD698

loc_6FFDD012:				; CODE XREF: sub_6FFDCF90+B7Bj
		mov	eax, [ebp+var_13C]
		mov	ecx, [ebp+arg_4]
		mov	[ecx], eax
		test	byte ptr [eax+10h], 1
		jz	loc_6FFDD674

loc_6FFDD027:				; CODE XREF: sub_6FFDCF90+703j
		mov	eax, [ebp+var_C]

loc_6FFDD02A:				; CODE XREF: sub_6FFDCF90+6Aj
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jz	loc_6FFDD1F9

loc_6FFDD038:				; CODE XREF: sub_6FFDCF90+6DFj
		mov	ecx, ds:_ZN8QMapData11shared_nullE
		mov	eax, ds:_ZNK13QDBusArgument5atEndEv
		mov	[ebp+var_58], ecx
		add	ecx, 34h
		mov	[ebp+var_5C], ecx
		mov	[ebp+var_60], eax
		nop

loc_6FFDD050:				; CODE XREF: sub_6FFDCF90+137j
					; sub_6FFDCF90+142j ...
		mov	edx, [ebp+arg_0]
		mov	[ebp+var_48], 0FFFFFFFFh
		mov	[esp], edx
		call	[ebp+var_60]
		test	al, al
		jnz	loc_6FFDD1E0
		mov	ecx, [ebp+var_58]
		mov	edx, [ebp+var_5C]
		mov	[ebp+var_14], ecx
		lock inc dword ptr [edx]
		setnz	al
		mov	ecx, [ebp+var_50]
		mov	edx, [ebp+var_54]
		mov	[ebp+var_10], ecx
		lock inc dword ptr [edx]
		setnz	al
		mov	ecx, [ebp+arg_0]
		lea	eax, [ebp+var_18]
		mov	[esp+4], eax
		mov	[ebp+var_48], 9
		mov	[esp], ecx
		call	_ZrsRK13QDBusArgumentR18DBusMenuLayoutItem
		lea	eax, [ebp+var_18]
		mov	[esp+4], eax
		mov	eax, [ebp+arg_4]
		mov	[esp], eax
		call	sub_6FFE8250
		mov	eax, [ebp+var_10]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jz	loc_6FFDD162

loc_6FFDD0C2:				; CODE XREF: sub_6FFDCF90+24Bj
		mov	eax, [ebp+var_14]
		test	eax, eax
		jz	short loc_6FFDD050
		lock dec dword ptr [eax+34h]
		setnz	dl
		test	dl, dl
		jnz	loc_6FFDD050
		mov	eax, [ebp+var_14]
		mov	edx, eax
		mov	[ebp+var_8C], eax
		mov	eax, [eax+4]
		cmp	edx, eax
		jnz	short loc_6FFDD0F2
		jmp	short loc_6FFDD13F
; ---------------------------------------------------------------------------
		align 10h

loc_6FFDD0F0:				; CODE XREF: sub_6FFDCF90+1ADj
		mov	eax, ecx

loc_6FFDD0F2:				; CODE XREF: sub_6FFDCF90+158j
		mov	ecx, [eax+4]
		lea	edx, [eax-1Ch]
		mov	[ebp+var_80], edx
		mov	edx, [eax-1Ch]
		mov	[ebp+var_74], ecx
		lock dec dword ptr [edx]
		setnz	cl
		test	cl, cl
		jnz	short loc_6FFDD11E
		mov	eax, [eax-1Ch]
		mov	[ebp+var_48], 0FFFFFFFFh
		mov	[esp], eax
		call	ds:_ZN7QString4freeEPNS_4DataE

loc_6FFDD11E:				; CODE XREF: sub_6FFDCF90+179j
		mov	eax, [ebp+var_80]
		mov	[ebp+var_48], 0FFFFFFFFh
		add	eax, 8
		mov	[esp], eax
		call	ds:_ZN8QVariantD1Ev
		mov	ecx, [ebp+var_74]
		cmp	[ebp+var_8C], ecx
		jnz	short loc_6FFDD0F0

loc_6FFDD13F:				; CODE XREF: sub_6FFDCF90+15Aj
		mov	eax, [ebp+var_8C]
		mov	dword ptr [esp+4], 1Ch
		mov	[ebp+var_48], 0FFFFFFFFh
		mov	[esp], eax
		call	ds:_ZN8QMapData16continueFreeDataEi
		jmp	loc_6FFDD050
; ---------------------------------------------------------------------------

loc_6FFDD162:				; CODE XREF: sub_6FFDCF90+12Cj
		mov	ecx, [ebp+var_10]
		mov	edx, [ecx+0Ch]
		mov	eax, ecx
		add	eax, 14h
		mov	[ebp+var_C4], ecx
		lea	edx, [eax+edx*4]
		mov	[ebp+var_68], edx
		mov	edx, [ecx+8]
		lea	edx, [eax+edx*4]
		cmp	[ebp+var_68], edx
		mov	[ebp+var_90], edx
		jz	short loc_6FFDD1C5
		lea	esi, [esi+0]

loc_6FFDD190:				; CODE XREF: sub_6FFDCF90+233j
		sub	[ebp+var_68], 4
		mov	eax, [ebp+var_68]
		mov	eax, [eax]
		test	eax, eax
		mov	[ebp+var_6C], eax
		jz	short loc_6FFDD1BA
		mov	[esp], eax
		mov	[ebp+var_48], 1
		call	sub_6FFDFBB0
		mov	edx, [ebp+var_6C]
		mov	[esp], edx
		call	sub_6FFEAE50

loc_6FFDD1BA:				; CODE XREF: sub_6FFDCF90+20Ej
		mov	ecx, [ebp+var_68]
		cmp	[ebp+var_90], ecx
		jnz	short loc_6FFDD190

loc_6FFDD1C5:				; CODE XREF: sub_6FFDCF90+1F8j
		mov	eax, [ebp+var_C4]
		mov	[ebp+var_48], 1
		mov	[esp], eax
		call	ds:_Z5qFreePv
		jmp	loc_6FFDD0C2
; ---------------------------------------------------------------------------

loc_6FFDD1E0:				; CODE XREF: sub_6FFDCF90+D2j
		mov	ecx, [ebp+arg_0]
		mov	[esp], ecx
		call	ds:_ZNK13QDBusArgument8endArrayEv
		lea	eax, [ebp+var_4C]
		mov	[esp], eax
		call	_Unwind_SjLj_Unregister
		leave
		retn
; ---------------------------------------------------------------------------

loc_6FFDD1F9:				; CODE XREF: sub_6FFDCF90+A2j
		mov	eax, [ebp+var_C]
		mov	edx, eax
		mov	ecx, eax
		mov	[ebp+var_150], eax
		mov	eax, [eax+0Ch]
		add	edx, 14h
		lea	eax, [edx+eax*4]
		mov	[ebp+var_114], eax
		mov	eax, [ecx+8]
		lea	eax, [edx+eax*4]
		cmp	[ebp+var_114], eax
		mov	[ebp+var_144], eax
		jz	loc_6FFDD659
		mov	eax, ds:_ZN7QString4freeEPNS_4DataE
		mov	[ebp+var_F0], eax
		jmp	short loc_6FFDD27C
; ---------------------------------------------------------------------------
		align 10h

loc_6FFDD240:				; CODE XREF: sub_6FFDCF90+310j
					; sub_6FFDCF90+62Bj
		mov	ecx, [ebp+var_110]
		mov	eax, [ecx+4]
		test	eax, eax
		jz	short loc_6FFDD25C
		lock dec dword ptr [eax+34h]
		setnz	dl
		test	dl, dl
		jz	loc_6FFDD5C0

loc_6FFDD25C:				; CODE XREF: sub_6FFDCF90+2BBj
					; sub_6FFDCF90+6C4j
		mov	ecx, [ebp+var_110]
		mov	[esp], ecx
		call	sub_6FFEAE50

loc_6FFDD26A:				; CODE XREF: sub_6FFDCF90+303j
		mov	eax, [ebp+var_114]
		cmp	[ebp+var_144], eax
		jz	loc_6FFDD659

loc_6FFDD27C:				; CODE XREF: sub_6FFDCF90+2A8j
		sub	[ebp+var_114], 4
		mov	edx, [ebp+var_114]
		mov	edx, [edx]
		test	edx, edx
		mov	[ebp+var_110], edx
		jz	short loc_6FFDD26A
		mov	eax, [edx+8]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jnz	short loc_6FFDD240
		mov	ecx, [ebp+var_110]
		mov	ecx, [ecx+8]
		mov	eax, [ecx+0Ch]
		mov	edx, ecx
		add	edx, 14h
		mov	[ebp+var_140], ecx
		lea	eax, [edx+eax*4]
		mov	[ebp+var_D4], eax
		mov	eax, [ecx+8]
		lea	eax, [edx+eax*4]
		cmp	[ebp+var_D4], eax
		mov	[ebp+var_124], eax
		jnz	short loc_6FFDD31C
		jmp	loc_6FFDD5A5
; ---------------------------------------------------------------------------
		align 10h

loc_6FFDD2E0:				; CODE XREF: sub_6FFDCF90+3B0j
					; sub_6FFDCF90+57Cj
		mov	ecx, [ebp+var_D0]
		mov	eax, [ecx+4]
		test	eax, eax
		jz	short loc_6FFDD2FC
		lock dec dword ptr [eax+34h]
		setnz	dl
		test	dl, dl
		jz	loc_6FFDD511

loc_6FFDD2FC:				; CODE XREF: sub_6FFDCF90+35Bj
					; sub_6FFDCF90+610j
		mov	edx, [ebp+var_D0]
		mov	[esp], edx
		call	sub_6FFEAE50

loc_6FFDD30A:				; CODE XREF: sub_6FFDCF90+3A3j
		mov	ecx, [ebp+var_D4]
		cmp	[ebp+var_124], ecx
		jz	loc_6FFDD5A5

loc_6FFDD31C:				; CODE XREF: sub_6FFDCF90+344j
		sub	[ebp+var_D4], 4
		mov	eax, [ebp+var_D4]
		mov	eax, [eax]
		test	eax, eax
		mov	[ebp+var_D0], eax
		jz	short loc_6FFDD30A
		mov	eax, [eax+8]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jnz	short loc_6FFDD2E0
		mov	ecx, [ebp+var_D0]
		mov	ecx, [ecx+8]
		mov	edx, [ecx+0Ch]
		mov	eax, ecx
		add	eax, 14h
		mov	[ebp+var_118], ecx
		lea	edx, [eax+edx*4]
		mov	[ebp+var_A0], edx
		mov	edx, [ecx+8]
		lea	edx, [eax+edx*4]
		cmp	[ebp+var_A0], edx
		mov	[ebp+var_E4], edx
		jnz	short loc_6FFDD3BC
		jmp	loc_6FFDD4F6
; ---------------------------------------------------------------------------
		align 10h

loc_6FFDD380:				; CODE XREF: sub_6FFDCF90+450j
					; sub_6FFDCF90+4CBj
		mov	edx, [ebp+var_9C]
		mov	eax, [edx+4]
		test	eax, eax
		jz	short loc_6FFDD39C
		lock dec dword ptr [eax+34h]
		setnz	dl
		test	dl, dl
		jz	loc_6FFDD460

loc_6FFDD39C:				; CODE XREF: sub_6FFDCF90+3FBj
					; sub_6FFDCF90+561j
		mov	ecx, [ebp+var_9C]
		mov	[esp], ecx
		call	sub_6FFEAE50

loc_6FFDD3AA:				; CODE XREF: sub_6FFDCF90+443j
		mov	eax, [ebp+var_A0]
		cmp	[ebp+var_E4], eax
		jz	loc_6FFDD4F6

loc_6FFDD3BC:				; CODE XREF: sub_6FFDCF90+3E4j
		sub	[ebp+var_A0], 4
		mov	eax, [ebp+var_A0]
		mov	eax, [eax]
		test	eax, eax
		mov	[ebp+var_9C], eax
		jz	short loc_6FFDD3AA
		mov	eax, [eax+8]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jnz	short loc_6FFDD380
		mov	ecx, [ebp+var_9C]
		mov	ecx, [ecx+8]
		mov	edx, [ecx+0Ch]
		mov	eax, ecx
		add	eax, 14h
		mov	[ebp+var_D8], ecx
		lea	edx, [eax+edx*4]
		mov	[ebp+var_70], edx
		mov	edx, [ecx+8]
		lea	edx, [eax+edx*4]
		cmp	[ebp+var_70], edx
		mov	[ebp+var_AC], edx
		jz	short loc_6FFDD445

loc_6FFDD410:				; CODE XREF: sub_6FFDCF90+4B3j
		sub	[ebp+var_70], 4
		mov	eax, [ebp+var_70]
		mov	eax, [eax]
		test	eax, eax
		mov	[ebp+var_78], eax
		jz	short loc_6FFDD43A
		mov	[esp], eax
		mov	[ebp+var_48], 2
		call	sub_6FFDFBB0
		mov	edx, [ebp+var_78]
		mov	[esp], edx
		call	sub_6FFEAE50

loc_6FFDD43A:				; CODE XREF: sub_6FFDCF90+48Ej
		mov	ecx, [ebp+var_70]
		cmp	[ebp+var_AC], ecx
		jnz	short loc_6FFDD410

loc_6FFDD445:				; CODE XREF: sub_6FFDCF90+47Ej
		mov	eax, [ebp+var_D8]
		mov	[ebp+var_48], 2
		mov	[esp], eax
		call	ds:_Z5qFreePv
		jmp	loc_6FFDD380
; ---------------------------------------------------------------------------

loc_6FFDD460:				; CODE XREF: sub_6FFDCF90+406j
		mov	ecx, [ebp+var_9C]
		mov	ecx, [ecx+4]
		mov	eax, [ecx+4]
		mov	[ebp+var_A4], ecx
		cmp	ecx, eax
		jnz	short loc_6FFDD49F
		jmp	short loc_6FFDD4D3
; ---------------------------------------------------------------------------

loc_6FFDD478:				; CODE XREF: sub_6FFDCF90+52Cj
					; sub_6FFDCF90+541j
		mov	eax, [ebp+var_98]
		mov	[ebp+var_48], 3
		add	eax, 8
		mov	[esp], eax
		call	ds:_ZN8QVariantD1Ev
		mov	eax, [ebp+var_84]
		cmp	[ebp+var_A4], eax
		jz	short loc_6FFDD4D3

loc_6FFDD49F:				; CODE XREF: sub_6FFDCF90+4E4j
		mov	edx, [eax+4]
		lea	ecx, [eax-1Ch]
		mov	[ebp+var_98], ecx
		mov	[ebp+var_84], edx
		mov	edx, [eax-1Ch]
		lock dec dword ptr [edx]
		setnz	cl
		test	cl, cl
		jnz	short loc_6FFDD478
		mov	eax, [eax-1Ch]
		mov	[ebp+var_48], 3
		mov	[esp], eax
		call	[ebp+var_F0]
		jmp	short loc_6FFDD478
; ---------------------------------------------------------------------------

loc_6FFDD4D3:				; CODE XREF: sub_6FFDCF90+4E6j
					; sub_6FFDCF90+50Dj
		mov	edx, [ebp+var_A4]
		mov	dword ptr [esp+4], 1Ch
		mov	[ebp+var_48], 3
		mov	[esp], edx
		call	ds:_ZN8QMapData16continueFreeDataEi
		jmp	loc_6FFDD39C
; ---------------------------------------------------------------------------

loc_6FFDD4F6:				; CODE XREF: sub_6FFDCF90+3E6j
					; sub_6FFDCF90+426j
		mov	edx, [ebp+var_118]
		mov	[ebp+var_48], 3
		mov	[esp], edx
		call	ds:_Z5qFreePv
		jmp	loc_6FFDD2E0
; ---------------------------------------------------------------------------

loc_6FFDD511:				; CODE XREF: sub_6FFDCF90+366j
		mov	eax, [ecx+4]
		mov	edx, eax
		mov	[ebp+var_E0], eax
		mov	eax, [eax+4]
		cmp	edx, eax
		jnz	short loc_6FFDD54E
		jmp	short loc_6FFDD582
; ---------------------------------------------------------------------------

loc_6FFDD525:				; CODE XREF: sub_6FFDCF90+5DBj
					; sub_6FFDCF90+5F0j
		mov	eax, [ebp+var_CC]
		mov	[ebp+var_48], 4
		add	eax, 8
		mov	[esp], eax
		call	ds:_ZN8QVariantD1Ev
		mov	ecx, [ebp+var_B8]
		cmp	[ebp+var_E0], ecx
		jz	short loc_6FFDD582
		mov	eax, ecx

loc_6FFDD54E:				; CODE XREF: sub_6FFDCF90+591j
		mov	ecx, [eax+4]
		lea	edx, [eax-1Ch]
		mov	[ebp+var_CC], edx
		mov	edx, [eax-1Ch]
		mov	[ebp+var_B8], ecx
		lock dec dword ptr [edx]
		setnz	cl
		test	cl, cl
		jnz	short loc_6FFDD525
		mov	eax, [eax-1Ch]
		mov	[ebp+var_48], 4
		mov	[esp], eax
		call	ds:_ZN7QString4freeEPNS_4DataE
		jmp	short loc_6FFDD525
; ---------------------------------------------------------------------------

loc_6FFDD582:				; CODE XREF: sub_6FFDCF90+593j
					; sub_6FFDCF90+5BAj
		mov	eax, [ebp+var_E0]
		mov	dword ptr [esp+4], 1Ch
		mov	[ebp+var_48], 4
		mov	[esp], eax
		call	ds:_ZN8QMapData16continueFreeDataEi
		jmp	loc_6FFDD2FC
; ---------------------------------------------------------------------------

loc_6FFDD5A5:				; CODE XREF: sub_6FFDCF90+346j
					; sub_6FFDCF90+386j
		mov	eax, [ebp+var_140]
		mov	[ebp+var_48], 4
		mov	[esp], eax
		call	ds:_Z5qFreePv
		jmp	loc_6FFDD240
; ---------------------------------------------------------------------------

loc_6FFDD5C0:				; CODE XREF: sub_6FFDCF90+2C6j
		mov	eax, [ecx+4]
		mov	edx, eax
		mov	[ebp+var_120], eax
		mov	eax, [eax+4]
		cmp	edx, eax
		jz	short loc_6FFDD636
		mov	ecx, ds:_ZN8QVariantD1Ev
		mov	[ebp+var_64], ecx
		nop
		lea	esi, [esi+0]

loc_6FFDD5E0:				; CODE XREF: sub_6FFDCF90+6A4j
		mov	edx, [eax+4]
		lea	ecx, [eax-1Ch]
		mov	[ebp+var_10C], ecx
		mov	[ebp+var_F4], edx
		mov	edx, [eax-1Ch]
		lock dec dword ptr [edx]
		setnz	cl
		test	cl, cl
		jnz	short loc_6FFDD612
		mov	eax, [eax-1Ch]
		mov	[ebp+var_48], 0FFFFFFFFh
		mov	[esp], eax
		call	ds:_ZN7QString4freeEPNS_4DataE

loc_6FFDD612:				; CODE XREF: sub_6FFDCF90+66Dj
		mov	eax, [ebp+var_10C]
		mov	[ebp+var_48], 0FFFFFFFFh
		add	eax, 8
		mov	[esp], eax
		call	[ebp+var_64]
		mov	eax, [ebp+var_F4]
		cmp	[ebp+var_120], eax
		jnz	short loc_6FFDD5E0

loc_6FFDD636:				; CODE XREF: sub_6FFDCF90+640j
		mov	edx, [ebp+var_120]
		mov	dword ptr [esp+4], 1Ch
		mov	[ebp+var_48], 0FFFFFFFFh
		mov	[esp], edx
		call	ds:_ZN8QMapData16continueFreeDataEi
		jmp	loc_6FFDD25C
; ---------------------------------------------------------------------------

loc_6FFDD659:				; CODE XREF: sub_6FFDCF90+297j
					; sub_6FFDCF90+2E6j
		mov	edx, [ebp+var_150]
		mov	[ebp+var_48], 0FFFFFFFFh
		mov	[esp], edx
		call	ds:_Z5qFreePv
		jmp	loc_6FFDD038
; ---------------------------------------------------------------------------

loc_6FFDD674:				; CODE XREF: sub_6FFDCF90+91j
		mov	edx, [ebp+var_13C]
		mov	ecx, [ebp+arg_4]
		mov	eax, [edx+4]
		mov	[esp], ecx
		mov	[ebp+var_48], 8
		mov	[esp+4], eax
		call	sub_6FFE77F0
		jmp	loc_6FFDD027
; ---------------------------------------------------------------------------

loc_6FFDD698:				; CODE XREF: sub_6FFDCF90+7Cj
		mov	ecx, [ecx]
		mov	eax, [ecx+0Ch]
		mov	edx, ecx
		add	edx, 14h
		mov	[ebp+var_154], ecx
		lea	eax, [edx+eax*4]
		mov	[ebp+var_12C], eax
		mov	eax, [ecx+8]
		lea	eax, [edx+eax*4]
		cmp	[ebp+var_12C], eax
		mov	[ebp+var_14C], eax
		jz	loc_6FFDDAF5
		mov	eax, ds:_ZN7QString4freeEPNS_4DataE
		mov	[ebp+var_104], eax
		jmp	short loc_6FFDD712
; ---------------------------------------------------------------------------

loc_6FFDD6D6:				; CODE XREF: sub_6FFDCF90+7A6j
					; sub_6FFDCF90+ACAj
		mov	edx, [ebp+var_128]
		mov	eax, [edx+4]
		test	eax, eax
		jz	short loc_6FFDD6F2
		lock dec dword ptr [eax+34h]
		setnz	dl
		test	dl, dl
		jz	loc_6FFDDA5F

loc_6FFDD6F2:				; CODE XREF: sub_6FFDCF90+751j
					; sub_6FFDCF90+B60j
		mov	ecx, [ebp+var_128]
		mov	[esp], ecx
		call	sub_6FFEAE50

loc_6FFDD700:				; CODE XREF: sub_6FFDCF90+799j
		mov	eax, [ebp+var_12C]
		cmp	[ebp+var_14C], eax
		jz	loc_6FFDDAF5

loc_6FFDD712:				; CODE XREF: sub_6FFDCF90+744j
		sub	[ebp+var_12C], 4
		mov	edx, [ebp+var_12C]
		mov	edx, [edx]
		test	edx, edx
		mov	[ebp+var_128], edx
		jz	short loc_6FFDD700
		mov	eax, [edx+8]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jnz	short loc_6FFDD6D6
		mov	ecx, [ebp+var_128]
		mov	ecx, [ecx+8]
		mov	eax, [ecx+0Ch]
		mov	edx, ecx
		add	edx, 14h
		mov	[ebp+var_148], ecx
		lea	eax, [edx+eax*4]
		mov	[ebp+var_EC], eax
		mov	eax, [ecx+8]
		lea	eax, [edx+eax*4]
		cmp	[ebp+var_EC], eax
		mov	[ebp+var_138], eax
		jnz	short loc_6FFDD7AD
		jmp	loc_6FFDDA44
; ---------------------------------------------------------------------------

loc_6FFDD771:				; CODE XREF: sub_6FFDCF90+841j
					; sub_6FFDCF90+A19j
		mov	ecx, [ebp+var_E8]
		mov	eax, [ecx+4]
		test	eax, eax
		jz	short loc_6FFDD78D
		lock dec dword ptr [eax+34h]
		setnz	dl
		test	dl, dl
		jz	loc_6FFDD9B0

loc_6FFDD78D:				; CODE XREF: sub_6FFDCF90+7ECj
					; sub_6FFDCF90+AAFj
		mov	edx, [ebp+var_E8]
		mov	[esp], edx
		call	sub_6FFEAE50

loc_6FFDD79B:				; CODE XREF: sub_6FFDCF90+834j
		mov	ecx, [ebp+var_EC]
		cmp	[ebp+var_138], ecx
		jz	loc_6FFDDA44

loc_6FFDD7AD:				; CODE XREF: sub_6FFDCF90+7DAj
		sub	[ebp+var_EC], 4
		mov	eax, [ebp+var_EC]
		mov	eax, [eax]
		test	eax, eax
		mov	[ebp+var_E8], eax
		jz	short loc_6FFDD79B
		mov	eax, [eax+8]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jnz	short loc_6FFDD771
		mov	ecx, [ebp+var_E8]
		mov	ecx, [ecx+8]
		mov	edx, [ecx+0Ch]
		mov	eax, ecx
		add	eax, 14h
		mov	[ebp+var_130], ecx
		lea	edx, [eax+edx*4]
		mov	[ebp+var_B4], edx
		mov	edx, [ecx+8]
		lea	edx, [eax+edx*4]
		cmp	[ebp+var_B4], edx
		mov	[ebp+var_100], edx
		jnz	short loc_6FFDD84C
		jmp	loc_6FFDD993
; ---------------------------------------------------------------------------
		align 10h

loc_6FFDD810:				; CODE XREF: sub_6FFDCF90+8E0j
					; sub_6FFDCF90+961j
		mov	edx, [ebp+var_B0]
		mov	eax, [edx+4]
		test	eax, eax
		jz	short loc_6FFDD82C
		lock dec dword ptr [eax+34h]
		setnz	dl
		test	dl, dl
		jz	loc_6FFDD8F6

loc_6FFDD82C:				; CODE XREF: sub_6FFDCF90+88Bj
					; sub_6FFDCF90+9FEj
		mov	ecx, [ebp+var_B0]
		mov	[esp], ecx
		call	sub_6FFEAE50

loc_6FFDD83A:				; CODE XREF: sub_6FFDCF90+8D3j
		mov	eax, [ebp+var_B4]
		cmp	[ebp+var_100], eax
		jz	loc_6FFDD993

loc_6FFDD84C:				; CODE XREF: sub_6FFDCF90+875j
		sub	[ebp+var_B4], 4
		mov	eax, [ebp+var_B4]
		mov	eax, [eax]
		test	eax, eax
		mov	[ebp+var_B0], eax
		jz	short loc_6FFDD83A
		mov	eax, [eax+8]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jnz	short loc_6FFDD810
		mov	ecx, [ebp+var_B0]
		mov	ecx, [ecx+8]
		mov	edx, [ecx+0Ch]
		mov	eax, ecx
		add	eax, 14h
		mov	[ebp+var_F8], ecx
		lea	edx, [eax+edx*4]
		mov	[ebp+var_7C], edx
		mov	edx, [ecx+8]
		lea	edx, [eax+edx*4]
		cmp	[ebp+var_7C], edx
		mov	[ebp+var_C0], edx
		jz	short loc_6FFDD8DB

loc_6FFDD8A0:				; CODE XREF: sub_6FFDCF90+949j
		sub	[ebp+var_7C], 4
		mov	eax, [ebp+var_7C]
		mov	eax, [eax]
		test	eax, eax
		mov	[ebp+var_88], eax
		jz	short loc_6FFDD8D0
		mov	[esp], eax
		mov	[ebp+var_48], 5
		call	sub_6FFDFBB0
		mov	edx, [ebp+var_88]
		mov	[esp], edx
		call	sub_6FFEAE50

loc_6FFDD8D0:				; CODE XREF: sub_6FFDCF90+921j
		mov	ecx, [ebp+var_7C]
		cmp	[ebp+var_C0], ecx
		jnz	short loc_6FFDD8A0

loc_6FFDD8DB:				; CODE XREF: sub_6FFDCF90+90Ej
		mov	eax, [ebp+var_F8]
		mov	[ebp+var_48], 5
		mov	[esp], eax
		call	ds:_Z5qFreePv
		jmp	loc_6FFDD810
; ---------------------------------------------------------------------------

loc_6FFDD8F6:				; CODE XREF: sub_6FFDCF90+896j
		mov	ecx, [ebp+var_B0]
		mov	ecx, [ecx+4]
		mov	eax, [ecx+4]
		mov	[ebp+var_BC], ecx
		cmp	ecx, eax
		jnz	short loc_6FFDD937
		jmp	short loc_6FFDD970
; ---------------------------------------------------------------------------
		align 10h

loc_6FFDD910:				; CODE XREF: sub_6FFDCF90+9C4j
					; sub_6FFDCF90+9D9j
		mov	eax, [ebp+var_A8]
		mov	[ebp+var_48], 6
		add	eax, 8
		mov	[esp], eax
		call	ds:_ZN8QVariantD1Ev
		mov	eax, [ebp+var_94]
		cmp	[ebp+var_BC], eax
		jz	short loc_6FFDD970

loc_6FFDD937:				; CODE XREF: sub_6FFDCF90+97Aj
		mov	edx, [eax+4]
		lea	ecx, [eax-1Ch]
		mov	[ebp+var_A8], ecx
		mov	[ebp+var_94], edx
		mov	edx, [eax-1Ch]
		lock dec dword ptr [edx]
		setnz	cl
		test	cl, cl
		jnz	short loc_6FFDD910
		mov	eax, [eax-1Ch]
		mov	[ebp+var_48], 6
		mov	[esp], eax
		call	[ebp+var_104]
		jmp	short loc_6FFDD910
; ---------------------------------------------------------------------------
		align 10h

loc_6FFDD970:				; CODE XREF: sub_6FFDCF90+97Cj
					; sub_6FFDCF90+9A5j
		mov	edx, [ebp+var_BC]
		mov	dword ptr [esp+4], 1Ch
		mov	[ebp+var_48], 6
		mov	[esp], edx
		call	ds:_ZN8QMapData16continueFreeDataEi
		jmp	loc_6FFDD82C
; ---------------------------------------------------------------------------

loc_6FFDD993:				; CODE XREF: sub_6FFDCF90+877j
					; sub_6FFDCF90+8B6j
		mov	edx, [ebp+var_130]
		mov	[ebp+var_48], 6
		mov	[esp], edx
		call	ds:_Z5qFreePv
		jmp	loc_6FFDD771
; ---------------------------------------------------------------------------
		align 10h

loc_6FFDD9B0:				; CODE XREF: sub_6FFDCF90+7F7j
		mov	eax, [ecx+4]
		mov	edx, eax
		mov	[ebp+var_FC], eax
		mov	eax, [eax+4]
		cmp	edx, eax
		jnz	short loc_6FFDD9ED
		jmp	short loc_6FFDDA21
; ---------------------------------------------------------------------------

loc_6FFDD9C4:				; CODE XREF: sub_6FFDCF90+A7Aj
					; sub_6FFDCF90+A8Fj
		mov	eax, [ebp+var_DC]
		mov	[ebp+var_48], 7
		add	eax, 8
		mov	[esp], eax
		call	ds:_ZN8QVariantD1Ev
		mov	ecx, [ebp+var_C8]
		cmp	[ebp+var_FC], ecx
		jz	short loc_6FFDDA21
		mov	eax, ecx

loc_6FFDD9ED:				; CODE XREF: sub_6FFDCF90+A30j
		mov	ecx, [eax+4]
		lea	edx, [eax-1Ch]
		mov	[ebp+var_DC], edx
		mov	edx, [eax-1Ch]
		mov	[ebp+var_C8], ecx
		lock dec dword ptr [edx]
		setnz	cl
		test	cl, cl
		jnz	short loc_6FFDD9C4
		mov	eax, [eax-1Ch]
		mov	[ebp+var_48], 7
		mov	[esp], eax
		call	ds:_ZN7QString4freeEPNS_4DataE
		jmp	short loc_6FFDD9C4
; ---------------------------------------------------------------------------

loc_6FFDDA21:				; CODE XREF: sub_6FFDCF90+A32j
					; sub_6FFDCF90+A59j
		mov	eax, [ebp+var_FC]
		mov	dword ptr [esp+4], 1Ch
		mov	[ebp+var_48], 7
		mov	[esp], eax
		call	ds:_ZN8QMapData16continueFreeDataEi
		jmp	loc_6FFDD78D
; ---------------------------------------------------------------------------

loc_6FFDDA44:				; CODE XREF: sub_6FFDCF90+7DCj
					; sub_6FFDCF90+817j
		mov	eax, [ebp+var_148]
		mov	[ebp+var_48], 7
		mov	[esp], eax
		call	ds:_Z5qFreePv
		jmp	loc_6FFDD6D6
; ---------------------------------------------------------------------------

loc_6FFDDA5F:				; CODE XREF: sub_6FFDCF90+75Cj
		mov	ecx, [ebp+var_128]
		mov	ecx, [ecx+4]
		mov	eax, [ecx+4]
		mov	[ebp+var_134], ecx
		cmp	ecx, eax
		jnz	short loc_6FFDDA9E
		jmp	short loc_6FFDDAD2
; ---------------------------------------------------------------------------

loc_6FFDDA77:				; CODE XREF: sub_6FFDCF90+B2Bj
					; sub_6FFDCF90+B40j
		mov	eax, [ebp+var_11C]
		mov	[ebp+var_48], 8
		add	eax, 8
		mov	[esp], eax
		call	ds:_ZN8QVariantD1Ev
		mov	eax, [ebp+var_108]
		cmp	[ebp+var_134], eax
		jz	short loc_6FFDDAD2

loc_6FFDDA9E:				; CODE XREF: sub_6FFDCF90+AE3j
		mov	edx, [eax+4]
		lea	ecx, [eax-1Ch]
		mov	[ebp+var_11C], ecx
		mov	[ebp+var_108], edx
		mov	edx, [eax-1Ch]
		lock dec dword ptr [edx]
		setnz	cl
		test	cl, cl
		jnz	short loc_6FFDDA77
		mov	eax, [eax-1Ch]
		mov	[ebp+var_48], 8
		mov	[esp], eax
		call	ds:_ZN7QString4freeEPNS_4DataE
		jmp	short loc_6FFDDA77
; ---------------------------------------------------------------------------

loc_6FFDDAD2:				; CODE XREF: sub_6FFDCF90+AE5j
					; sub_6FFDCF90+B0Cj
		mov	edx, [ebp+var_134]
		mov	dword ptr [esp+4], 1Ch
		mov	[ebp+var_48], 8
		mov	[esp], edx
		call	ds:_ZN8QMapData16continueFreeDataEi
		jmp	loc_6FFDD6F2
; ---------------------------------------------------------------------------

loc_6FFDDAF5:				; CODE XREF: sub_6FFDCF90+733j
					; sub_6FFDCF90+77Cj
		mov	edx, [ebp+var_154]
		mov	[ebp+var_48], 8
		mov	[esp], edx
		call	ds:_Z5qFreePv
		jmp	loc_6FFDD012
sub_6FFDCF90	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn

sub_6FFDDB10	proc near		; DATA XREF: sub_6FFDCF90+23o
		add	ebp, 8
		mov	eax, [ebp-48h]
		mov	edx, [ebp-44h]
		cmp	eax, 1
		mov	[ebp-158h], edx
		jz	short loc_6FFDDB8D
		cmp	eax, 2
		jz	short loc_6FFDDBA5
		cmp	eax, 3
		jz	loc_6FFDDBBD
		cmp	eax, 4
		jz	loc_6FFDDC11
		cmp	eax, 5
		xchg	ax, ax
		jz	loc_6FFDDC29
		cmp	eax, 6
		jz	loc_6FFDDC41
		cmp	eax, 7
		jz	loc_6FFDDC59
		cmp	eax, 8
		nop
		lea	esi, [esi+0]
		jz	loc_6FFDDBEA
		lea	eax, [ebp-14h]
		mov	[esp+0], eax
		mov	dword ptr [ebp-48h], 0
		call	sub_6FFE4290
		mov	ecx, [ebp-158h]
		mov	dword ptr [ebp-48h], 0FFFFFFFFh
		mov	[esp+0], ecx
		call	_Unwind_SjLj_Resume
; ---------------------------------------------------------------------------

loc_6FFDDB8D:				; CODE XREF: sub_6FFDDB10+12j
		mov	eax, [ebp-9Ch]
		mov	dword ptr [ebp-48h], 0
		add	eax, 4
		mov	[esp+0], eax
		call	sub_6FFE4290

loc_6FFDDBA5:				; CODE XREF: sub_6FFDDB10+17j
		mov	eax, [ebp-0D0h]
		mov	dword ptr [ebp-48h], 0
		add	eax, 4
		mov	[esp+0], eax
		call	sub_6FFE4290

loc_6FFDDBBD:				; CODE XREF: sub_6FFDDB10+1Cj
		mov	eax, [ebp-110h]
		mov	dword ptr [ebp-48h], 0
		add	eax, 4
		mov	[esp+0], eax
		call	sub_6FFE4290
		mov	edx, [ebp-158h]
		mov	dword ptr [ebp-48h], 0FFFFFFFFh
		mov	[esp+0], edx
		call	_Unwind_SjLj_Resume
; ---------------------------------------------------------------------------

loc_6FFDDBEA:				; CODE XREF: sub_6FFDDB10+50j
		lea	eax, [ebp-18h]
		mov	[esp+0], eax
		mov	dword ptr [ebp-48h], 0
		call	sub_6FFDFBB0
		mov	edx, [ebp-158h]
		mov	dword ptr [ebp-48h], 0FFFFFFFFh
		mov	[esp+0], edx
		call	_Unwind_SjLj_Resume
; ---------------------------------------------------------------------------

loc_6FFDDC11:				; CODE XREF: sub_6FFDDB10+25j
		mov	eax, [ebp-0B0h]
		mov	dword ptr [ebp-48h], 0
		add	eax, 4
		mov	[esp+0], eax
		call	sub_6FFE4290

loc_6FFDDC29:				; CODE XREF: sub_6FFDDB10+30j
		mov	eax, [ebp-0E8h]
		mov	dword ptr [ebp-48h], 0
		add	eax, 4
		mov	[esp+0], eax
		call	sub_6FFE4290

loc_6FFDDC41:				; CODE XREF: sub_6FFDDB10+39j
		mov	eax, [ebp-128h]
		mov	dword ptr [ebp-48h], 0
		add	eax, 4
		mov	[esp+0], eax
		call	sub_6FFE4290

loc_6FFDDC59:				; CODE XREF: sub_6FFDDB10+42j
		lea	eax, [ebp-0Ch]
		mov	[esp+0], eax
		mov	dword ptr [ebp-48h], 0
		call	sub_6FFE8A10
		mov	edx, [ebp-158h]
		mov	dword ptr [ebp-48h], 0FFFFFFFFh
		mov	[esp+0], edx
		call	_Unwind_SjLj_Resume
sub_6FFDDB10	endp


; =============== S U B	R O U T	I N E =======================================


sub_6FFDDC80	proc near		; DATA XREF: sub_6FFD2F30+15Co
					; .text:6FFDC12Eo

var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4

		sub	esp, 2Ch
		mov	[esp+2Ch+var_4], ebp
		mov	ebp, [esp+2Ch+arg_0]
		mov	[esp+2Ch+var_10], ebx
		mov	[esp+2Ch+var_C], esi
		mov	[esp+2Ch+var_8], edi
		test	ebp, ebp
		jz	loc_6FFDDD24
		mov	eax, [ebp+4]
		test	eax, eax
		jz	short loc_6FFDDCB1
		lock dec dword ptr [eax+34h]
		setnz	dl
		test	dl, dl
		jz	short loc_6FFDDCD0

loc_6FFDDCB1:				; CODE XREF: sub_6FFDDC80+24j
					; sub_6FFDDC80+A2j
		mov	[esp+2Ch+arg_0], ebp
		mov	ebx, [esp+2Ch+var_10]
		mov	esi, [esp+2Ch+var_C]
		mov	edi, [esp+2Ch+var_8]
		mov	ebp, [esp+2Ch+var_4]
		add	esp, 2Ch
		jmp	sub_6FFEAE50
; ---------------------------------------------------------------------------
		align 10h

loc_6FFDDCD0:				; CODE XREF: sub_6FFDDC80+2Fj
		mov	edi, [ebp+4]
		mov	eax, [edi+4]
		cmp	edi, eax
		jnz	short loc_6FFDDCE2
		jmp	short loc_6FFDDD11
; ---------------------------------------------------------------------------
		align 10h

loc_6FFDDCE0:				; CODE XREF: sub_6FFDDC80+8Fj
		mov	eax, ebx

loc_6FFDDCE2:				; CODE XREF: sub_6FFDDC80+58j
		mov	ebx, [eax+4]
		lea	esi, [eax-1Ch]
		mov	edx, [eax-1Ch]
		lock dec dword ptr [edx]
		setnz	cl
		test	cl, cl
		jnz	short loc_6FFDDD01
		mov	eax, [eax-1Ch]
		mov	[esp+2Ch+var_2C], eax
		call	ds:_ZN7QString4freeEPNS_4DataE

loc_6FFDDD01:				; CODE XREF: sub_6FFDDC80+73j
		lea	eax, [esi+8]
		mov	[esp+2Ch+var_2C], eax
		call	ds:_ZN8QVariantD1Ev
		cmp	edi, ebx
		jnz	short loc_6FFDDCE0

loc_6FFDDD11:				; CODE XREF: sub_6FFDDC80+5Aj
		mov	[esp+2Ch+var_28], 1Ch
		mov	[esp+2Ch+var_2C], edi
		call	ds:_ZN8QMapData16continueFreeDataEi
		jmp	short loc_6FFDDCB1
; ---------------------------------------------------------------------------

loc_6FFDDD24:				; CODE XREF: sub_6FFDDC80+19j
		mov	ebx, [esp+2Ch+var_10]
		mov	esi, [esp+2Ch+var_C]
		mov	edi, [esp+2Ch+var_8]
		mov	ebp, [esp+2Ch+var_4]
		add	esp, 2Ch
		retn
sub_6FFDDC80	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6FFDDD40	proc near		; DATA XREF: _ZlsR13QDBusArgumentRK12DBusMenuItem+177o
					; _ZlsR13QDBusArgumentRK18DBusMenuLayoutItem+7D7o ...

var_1C		= dword	ptr -1Ch
arg_0		= dword	ptr  4

		push	ebx
		sub	esp, 18h
		mov	ebx, [esp+1Ch+arg_0]
		test	ebx, ebx
		jz	short loc_6FFDDD62
		mov	[esp+1Ch+var_1C], ebx
		call	ds:_ZN8QVariantD2Ev
		mov	[esp+1Ch+arg_0], ebx
		add	esp, 18h
		pop	ebx
		jmp	sub_6FFEAE50
; ---------------------------------------------------------------------------

loc_6FFDDD62:				; CODE XREF: sub_6FFDDD40+Aj
		add	esp, 18h
		pop	ebx
		retn
sub_6FFDDD40	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6FFDDD70	proc near		; DATA XREF: _ZN16DBusMenuImporter31slotAboutToShowDBusCallFinishedEP23QDBusPendingCallWatcher+8E8o
					; _ZN16DBusMenuImporter21slotGetLayoutFinishedEP23QDBusPendingCallWatcher+BF7o	...

var_1C		= dword	ptr -1Ch
arg_0		= dword	ptr  4

		push	ebx
		sub	esp, 18h
		mov	ebx, [esp+1Ch+arg_0]
		test	ebx, ebx
		jz	short loc_6FFDDD92
		mov	[esp+1Ch+var_1C], ebx
		call	ds:_ZN13QDBusArgumentD1Ev
		mov	[esp+1Ch+arg_0], ebx
		add	esp, 18h
		pop	ebx
		jmp	sub_6FFEAE50
; ---------------------------------------------------------------------------

loc_6FFDDD92:				; CODE XREF: sub_6FFDDD70+Aj
		add	esp, 18h
		pop	ebx
		retn
sub_6FFDDD70	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6FFDDDA0	proc near		; DATA XREF: sub_6FFD2F30+1AFo
					; .text:6FFDC1BEo

var_2C		= dword	ptr -2Ch
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4

		sub	esp, 2Ch
		mov	[esp+2Ch+var_C], esi
		mov	esi, [esp+2Ch+arg_0]
		mov	[esp+2Ch+var_10], ebx
		mov	[esp+2Ch+var_8], edi
		mov	[esp+2Ch+var_4], ebp
		test	esi, esi
		jz	short loc_6FFDDE30
		mov	eax, [esi+4]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jz	short loc_6FFDDDE4

loc_6FFDDDC8:				; CODE XREF: sub_6FFDDDA0+87j
		mov	[esp+2Ch+arg_0], esi
		mov	ebx, [esp+2Ch+var_10]
		mov	esi, [esp+2Ch+var_C]
		mov	edi, [esp+2Ch+var_8]
		mov	ebp, [esp+2Ch+var_4]
		add	esp, 2Ch
		jmp	sub_6FFEAE50
; ---------------------------------------------------------------------------

loc_6FFDDDE4:				; CODE XREF: sub_6FFDDDA0+26j
		mov	ebp, [esi+4]
		mov	edx, [ebp+0Ch]
		lea	eax, [ebp+14h]
		lea	ebx, [eax+edx*4]
		mov	edx, [ebp+8]
		lea	edi, [eax+edx*4]
		cmp	ebx, edi
		jz	short loc_6FFDDE1E
		lea	esi, [esi+0]

loc_6FFDDE00:				; CODE XREF: sub_6FFDDDA0+7Cj
		sub	ebx, 4
		mov	eax, [ebx]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jnz	short loc_6FFDDE1A
		mov	eax, [ebx]
		mov	[esp+2Ch+var_2C], eax
		call	ds:_ZN7QString4freeEPNS_4DataE

loc_6FFDDE1A:				; CODE XREF: sub_6FFDDDA0+6Dj
		cmp	edi, ebx
		jnz	short loc_6FFDDE00

loc_6FFDDE1E:				; CODE XREF: sub_6FFDDDA0+58j
		mov	[esp+2Ch+var_2C], ebp
		call	ds:_Z5qFreePv
		jmp	short loc_6FFDDDC8
; ---------------------------------------------------------------------------
		align 10h

loc_6FFDDE30:				; CODE XREF: sub_6FFDDDA0+19j
		mov	ebx, [esp+2Ch+var_10]
		mov	esi, [esp+2Ch+var_C]
		mov	edi, [esp+2Ch+var_8]
		mov	ebp, [esp+2Ch+var_4]
		add	esp, 2Ch
		retn
sub_6FFDDDA0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6FFDDE50	proc near		; DATA XREF: sub_6FFC2AE0+5FCo
					; sub_6FFD2F30+138o

var_4C		= dword	ptr -4Ch
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
arg_0		= dword	ptr  4

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 3Ch
		mov	eax, [esp+4Ch+arg_0]
		test	eax, eax
		mov	[esp+4Ch+var_30], eax
		jz	loc_6FFDDF40
		mov	eax, [eax]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jz	short loc_6FFDDE87

loc_6FFDDE73:				; CODE XREF: sub_6FFDDE50+EBj
		mov	ecx, [esp+4Ch+var_30]
		mov	[esp+4Ch+arg_0], ecx
		add	esp, 3Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		jmp	sub_6FFEAE50
; ---------------------------------------------------------------------------

loc_6FFDDE87:				; CODE XREF: sub_6FFDDE50+21j
		mov	ecx, [esp+4Ch+var_30]
		mov	ecx, [ecx]
		mov	edx, [ecx+0Ch]
		mov	eax, ecx
		add	eax, 14h
		mov	[esp+4Ch+var_24], ecx
		lea	esi, [eax+edx*4]
		mov	edx, [ecx+8]
		lea	edx, [eax+edx*4]
		cmp	esi, edx
		mov	[esp+4Ch+var_28], edx
		jz	short loc_6FFDDF22
		mov	edx, ds:_Z5qFreePv
		mov	[esp+4Ch+var_20], edx
		jmp	short loc_6FFDDEC4
; ---------------------------------------------------------------------------

loc_6FFDDEB6:				; CODE XREF: sub_6FFDDE50+87j
					; sub_6FFDDE50+D0j
		mov	[esp+4Ch+var_4C], edi
		call	sub_6FFEAE50

loc_6FFDDEBE:				; CODE XREF: sub_6FFDDE50+7Bj
		cmp	[esp+4Ch+var_28], esi
		jz	short loc_6FFDDF30

loc_6FFDDEC4:				; CODE XREF: sub_6FFDDE50+64j
		sub	esi, 4
		mov	edi, [esi]
		test	edi, edi
		jz	short loc_6FFDDEBE
		mov	eax, [edi]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jnz	short loc_6FFDDEB6
		mov	ecx, [edi]
		mov	edx, [ecx+0Ch]
		mov	eax, ecx
		add	eax, 14h
		mov	[esp+4Ch+var_2C], ecx
		lea	ebx, [eax+edx*4]
		mov	edx, [ecx+8]
		lea	ebp, [eax+edx*4]
		cmp	ebx, ebp
		jz	short loc_6FFDDF12

loc_6FFDDEF4:				; CODE XREF: sub_6FFDDE50+C0j
		sub	ebx, 4
		mov	eax, [ebx]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jnz	short loc_6FFDDF0E
		mov	eax, [ebx]
		mov	[esp+4Ch+var_4C], eax
		call	ds:_ZN7QString4freeEPNS_4DataE

loc_6FFDDF0E:				; CODE XREF: sub_6FFDDE50+B1j
		cmp	ebp, ebx
		jnz	short loc_6FFDDEF4

loc_6FFDDF12:				; CODE XREF: sub_6FFDDE50+A2j
		mov	eax, [esp+4Ch+var_2C]
		mov	[esp+4Ch+var_4C], eax
		call	[esp+4Ch+var_20]
		lea	esi, [esi+0]
		jmp	short loc_6FFDDEB6
; ---------------------------------------------------------------------------

loc_6FFDDF22:				; CODE XREF: sub_6FFDDE50+58j
		mov	eax, ds:_Z5qFreePv
		mov	[esp+4Ch+var_20], eax
		nop
		lea	esi, [esi+0]

loc_6FFDDF30:				; CODE XREF: sub_6FFDDE50+72j
		mov	edx, [esp+4Ch+var_24]
		mov	[esp+4Ch+var_4C], edx
		call	[esp+4Ch+var_20]
		jmp	loc_6FFDDE73
; ---------------------------------------------------------------------------

loc_6FFDDF40:				; CODE XREF: sub_6FFDDE50+11j
		add	esp, 3Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
sub_6FFDDE50	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_6FFDDF50	proc near		; DATA XREF: _ZN16DBusMenuImporter21slotGetLayoutFinishedEP23QDBusPendingCallWatcher+479o
					; _ZN16DBusMenuImporter21slotGetLayoutFinishedEP23QDBusPendingCallWatcher+5E6o	...

var_5C		= dword	ptr -5Ch
var_58		= dword	ptr -58h
var_54		= dword	ptr -54h
var_50		= dword	ptr -50h
var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_3C		= byte ptr -3Ch
var_38		= dword	ptr -38h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_8		= byte ptr -8
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 78h
		lea	eax, [ebp+var_8]
		mov	[ebp+var_1C], eax
		lea	eax, [ebp+var_3C]
		mov	[ebp+var_24], offset sub_6FFEC1F0
		mov	[ebp+var_20], offset dword_6FFECF98
		mov	[ebp+var_18], offset sub_6FFDE0C9
		mov	[ebp+var_14], esp
		mov	[esp], eax
		call	_Unwind_SjLj_Register
		mov	ecx, [ebp+arg_0]
		test	ecx, ecx
		jz	short loc_6FFDDFBA
		mov	edx, [ebp+arg_0]
		mov	eax, [edx+8]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jz	short loc_6FFDDFC7

loc_6FFDDF96:				; CODE XREF: sub_6FFDDF50+E5j
		mov	edx, [ebp+arg_0]
		mov	eax, [edx+4]
		test	eax, eax
		jz	short loc_6FFDDFAF
		lock dec dword ptr [eax+34h]
		setnz	dl
		test	dl, dl
		jz	loc_6FFDE040

loc_6FFDDFAF:				; CODE XREF: sub_6FFDDF50+4Ej
					; sub_6FFDDF50+174j
		mov	edx, [ebp+arg_0]
		mov	[esp], edx
		call	sub_6FFEAE50

loc_6FFDDFBA:				; CODE XREF: sub_6FFDDF50+34j
		lea	eax, [ebp+var_3C]
		mov	[esp], eax
		call	_Unwind_SjLj_Unregister
		leave
		retn
; ---------------------------------------------------------------------------

loc_6FFDDFC7:				; CODE XREF: sub_6FFDDF50+44j
		mov	ecx, [ebp+arg_0]
		mov	ecx, [ecx+8]
		mov	edx, [ecx+0Ch]
		mov	eax, ecx
		add	eax, 14h
		mov	[ebp+var_5C], ecx
		lea	edx, [eax+edx*4]
		mov	[ebp+var_44], edx
		mov	edx, [ecx+8]
		lea	edx, [eax+edx*4]
		cmp	[ebp+var_44], edx
		mov	[ebp+var_58], edx
		jz	short loc_6FFDE022
		lea	esi, [esi+0]

loc_6FFDDFF0:				; CODE XREF: sub_6FFDDF50+D0j
		sub	[ebp+var_44], 4
		mov	eax, [ebp+var_44]
		mov	eax, [eax]
		test	eax, eax
		mov	[ebp+var_48], eax
		jz	short loc_6FFDE01A
		mov	[esp], eax
		mov	[ebp+var_38], 1
		call	sub_6FFDFBB0
		mov	edx, [ebp+var_48]
		mov	[esp], edx
		call	sub_6FFEAE50

loc_6FFDE01A:				; CODE XREF: sub_6FFDDF50+AEj
		mov	ecx, [ebp+var_44]
		cmp	[ebp+var_58], ecx
		jnz	short loc_6FFDDFF0

loc_6FFDE022:				; CODE XREF: sub_6FFDDF50+9Aj
		mov	eax, [ebp+var_5C]
		mov	[ebp+var_38], 1
		mov	[esp], eax
		call	ds:_Z5qFreePv
		jmp	loc_6FFDDF96
; ---------------------------------------------------------------------------
		align 10h

loc_6FFDE040:				; CODE XREF: sub_6FFDDF50+59j
		mov	ecx, [ebp+arg_0]
		mov	ecx, [ecx+4]
		mov	eax, [ecx+4]
		mov	[ebp+var_54], ecx
		cmp	ecx, eax
		jz	short loc_6FFDE0A9
		mov	edx, ds:_ZN8QVariantD1Ev
		mov	[ebp+var_40], edx
		jmp	short loc_6FFDE062
; ---------------------------------------------------------------------------
		align 10h

loc_6FFDE060:				; CODE XREF: sub_6FFDDF50+157j
		mov	eax, ecx

loc_6FFDE062:				; CODE XREF: sub_6FFDDF50+109j
		mov	ecx, [eax+4]
		lea	edx, [eax-1Ch]
		mov	[ebp+var_50], edx
		mov	edx, [eax-1Ch]
		mov	[ebp+var_4C], ecx
		lock dec dword ptr [edx]
		setnz	cl
		test	cl, cl
		jnz	short loc_6FFDE08E
		mov	eax, [eax-1Ch]
		mov	[ebp+var_38], 0FFFFFFFFh
		mov	[esp], eax
		call	ds:_ZN7QString4freeEPNS_4DataE

loc_6FFDE08E:				; CODE XREF: sub_6FFDDF50+129j
		mov	eax, [ebp+var_50]
		mov	[ebp+var_38], 0FFFFFFFFh
		add	eax, 8
		mov	[esp], eax
		call	[ebp+var_40]
		mov	ecx, [ebp+var_4C]
		cmp	[ebp+var_54], ecx
		jnz	short loc_6FFDE060

loc_6FFDE0A9:				; CODE XREF: sub_6FFDDF50+FEj
		mov	eax, [ebp+var_54]
		mov	dword ptr [esp+4], 1Ch
		mov	[ebp+var_38], 0FFFFFFFFh
		mov	[esp], eax
		call	ds:_ZN8QMapData16continueFreeDataEi
		jmp	loc_6FFDDFAF
sub_6FFDDF50	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn

sub_6FFDE0C9	proc near		; DATA XREF: sub_6FFDDF50+1Do
		add	ebp, 8
		mov	eax, [ebp+8]
		mov	edx, [ebp-34h]
		mov	dword ptr [ebp-38h], 0
		add	eax, 4
		mov	[ebp-60h], edx
		mov	[esp+0], eax
		call	sub_6FFE4290
		mov	ecx, [ebp-60h]
		mov	dword ptr [ebp-38h], 0FFFFFFFFh
		mov	[esp+0], ecx
		call	_Unwind_SjLj_Resume
sub_6FFDE0C9	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6FFDE100	proc near		; DATA XREF: sub_6FFD2F30+188o

var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
arg_0		= dword	ptr  4

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 3Ch
		mov	eax, [esp+4Ch+arg_0]
		test	eax, eax
		mov	[esp+4Ch+var_30], eax
		jz	loc_6FFDE206
		mov	eax, [eax]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jz	short loc_6FFDE137

loc_6FFDE123:				; CODE XREF: sub_6FFDE100+101j
		mov	edx, [esp+4Ch+var_30]
		mov	[esp+4Ch+arg_0], edx
		add	esp, 3Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		jmp	sub_6FFEAE50
; ---------------------------------------------------------------------------

loc_6FFDE137:				; CODE XREF: sub_6FFDE100+21j
		mov	ecx, [esp+4Ch+var_30]
		mov	ecx, [ecx]
		mov	edx, [ecx+0Ch]
		mov	eax, ecx
		add	eax, 14h
		mov	[esp+4Ch+var_24], ecx
		lea	edi, [eax+edx*4]
		mov	edx, [ecx+8]
		lea	edx, [eax+edx*4]
		cmp	edi, edx
		mov	[esp+4Ch+var_28], edx
		jnz	short loc_6FFDE172
		jmp	loc_6FFDE1F4
; ---------------------------------------------------------------------------
		align 10h

loc_6FFDE160:				; CODE XREF: sub_6FFDE100+80j
					; sub_6FFDE100+8Bj ...
		mov	[esp+4Ch+var_4C], ebp
		call	sub_6FFEAE50

loc_6FFDE168:				; CODE XREF: sub_6FFDE100+79j
		cmp	[esp+4Ch+var_28], edi
		jz	loc_6FFDE1F4

loc_6FFDE172:				; CODE XREF: sub_6FFDE100+58j
		sub	edi, 4
		mov	ebp, [edi]
		test	ebp, ebp
		jz	short loc_6FFDE168
		mov	eax, [ebp+4]
		test	eax, eax
		jz	short loc_6FFDE160
		lock dec dword ptr [eax+34h]
		setnz	dl
		test	dl, dl
		jnz	short loc_6FFDE160
		mov	eax, [ebp+4]
		mov	edx, eax
		mov	[esp+4Ch+var_2C], eax
		mov	eax, [eax+4]
		cmp	edx, eax
		jz	short loc_6FFDE1DA
		mov	[esp+4Ch+var_20], ebp
		mov	ebp, edx
		jmp	short loc_6FFDE1A7
; ---------------------------------------------------------------------------

loc_6FFDE1A5:				; CODE XREF: sub_6FFDE100+D4j
		mov	eax, ebx

loc_6FFDE1A7:				; CODE XREF: sub_6FFDE100+A3j
		mov	ebx, [eax+4]
		lea	esi, [eax-1Ch]
		mov	edx, [eax-1Ch]
		lock dec dword ptr [edx]
		setnz	cl
		test	cl, cl
		jnz	short loc_6FFDE1C6
		mov	eax, [eax-1Ch]
		mov	[esp+4Ch+var_4C], eax
		call	ds:_ZN7QString4freeEPNS_4DataE

loc_6FFDE1C6:				; CODE XREF: sub_6FFDE100+B8j
		add	esi, 8
		mov	[esp+4Ch+var_4C], esi
		call	ds:_ZN8QVariantD1Ev
		cmp	ebp, ebx
		jnz	short loc_6FFDE1A5
		mov	ebp, [esp+4Ch+var_20]

loc_6FFDE1DA:				; CODE XREF: sub_6FFDE100+9Bj
		mov	ecx, [esp+4Ch+var_2C]
		mov	[esp+4Ch+var_48], 1Ch
		mov	[esp+4Ch+var_4C], ecx
		call	ds:_ZN8QMapData16continueFreeDataEi
		jmp	loc_6FFDE160
; ---------------------------------------------------------------------------

loc_6FFDE1F4:				; CODE XREF: sub_6FFDE100+5Aj
					; sub_6FFDE100+6Cj
		mov	eax, [esp+4Ch+var_24]
		mov	[esp+4Ch+var_4C], eax
		call	ds:_Z5qFreePv
		jmp	loc_6FFDE123
; ---------------------------------------------------------------------------

loc_6FFDE206:				; CODE XREF: sub_6FFDE100+11j
		add	esp, 3Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
sub_6FFDE100	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6FFDE210	proc near		; DATA XREF: sub_6FFD2F30+1D8o

var_4C		= dword	ptr -4Ch
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
arg_0		= dword	ptr  4

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 3Ch
		mov	eax, [esp+4Ch+arg_0]
		test	eax, eax
		mov	[esp+4Ch+var_30], eax
		jz	loc_6FFDE300
		mov	eax, [eax]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jz	short loc_6FFDE247

loc_6FFDE233:				; CODE XREF: sub_6FFDE210+EBj
		mov	ecx, [esp+4Ch+var_30]
		mov	[esp+4Ch+arg_0], ecx
		add	esp, 3Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		jmp	sub_6FFEAE50
; ---------------------------------------------------------------------------

loc_6FFDE247:				; CODE XREF: sub_6FFDE210+21j
		mov	ecx, [esp+4Ch+var_30]
		mov	ecx, [ecx]
		mov	edx, [ecx+0Ch]
		mov	eax, ecx
		add	eax, 14h
		mov	[esp+4Ch+var_24], ecx
		lea	esi, [eax+edx*4]
		mov	edx, [ecx+8]
		lea	edx, [eax+edx*4]
		cmp	esi, edx
		mov	[esp+4Ch+var_28], edx
		jz	short loc_6FFDE2E2
		mov	edx, ds:_Z5qFreePv
		mov	[esp+4Ch+var_20], edx
		jmp	short loc_6FFDE284
; ---------------------------------------------------------------------------

loc_6FFDE276:				; CODE XREF: sub_6FFDE210+88j
					; sub_6FFDE210+D0j
		mov	[esp+4Ch+var_4C], edi
		call	sub_6FFEAE50

loc_6FFDE27E:				; CODE XREF: sub_6FFDE210+7Bj
		cmp	[esp+4Ch+var_28], esi
		jz	short loc_6FFDE2F0

loc_6FFDE284:				; CODE XREF: sub_6FFDE210+64j
		sub	esi, 4
		mov	edi, [esi]
		test	edi, edi
		jz	short loc_6FFDE27E
		mov	eax, [edi+4]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jnz	short loc_6FFDE276
		mov	ecx, [edi+4]
		mov	edx, [ecx+0Ch]
		mov	eax, ecx
		add	eax, 14h
		mov	[esp+4Ch+var_2C], ecx
		lea	ebx, [eax+edx*4]
		mov	edx, [ecx+8]
		lea	ebp, [eax+edx*4]
		cmp	ebx, ebp
		jz	short loc_6FFDE2D4

loc_6FFDE2B6:				; CODE XREF: sub_6FFDE210+C2j
		sub	ebx, 4
		mov	eax, [ebx]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jnz	short loc_6FFDE2D0
		mov	eax, [ebx]
		mov	[esp+4Ch+var_4C], eax
		call	ds:_ZN7QString4freeEPNS_4DataE

loc_6FFDE2D0:				; CODE XREF: sub_6FFDE210+B3j
		cmp	ebp, ebx
		jnz	short loc_6FFDE2B6

loc_6FFDE2D4:				; CODE XREF: sub_6FFDE210+A4j
		mov	eax, [esp+4Ch+var_2C]
		mov	[esp+4Ch+var_4C], eax
		call	[esp+4Ch+var_20]
		nop
		jmp	short loc_6FFDE276
; ---------------------------------------------------------------------------

loc_6FFDE2E2:				; CODE XREF: sub_6FFDE210+58j
		mov	eax, ds:_Z5qFreePv
		mov	[esp+4Ch+var_20], eax
		nop
		lea	esi, [esi+0]

loc_6FFDE2F0:				; CODE XREF: sub_6FFDE210+72j
		mov	edx, [esp+4Ch+var_24]
		mov	[esp+4Ch+var_4C], edx
		call	[esp+4Ch+var_20]
		jmp	loc_6FFDE233
; ---------------------------------------------------------------------------

loc_6FFDE300:				; CODE XREF: sub_6FFDE210+11j
		add	esp, 3Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
sub_6FFDE210	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_6FFDE310	proc near		; DATA XREF: sub_6FFD2F30+228o

var_A8		= dword	ptr -0A8h
var_A4		= dword	ptr -0A4h
var_A0		= dword	ptr -0A0h
var_9C		= dword	ptr -9Ch
var_98		= dword	ptr -98h
var_94		= dword	ptr -94h
var_90		= dword	ptr -90h
var_8C		= dword	ptr -8Ch
var_88		= dword	ptr -88h
var_84		= dword	ptr -84h
var_80		= dword	ptr -80h
var_7C		= dword	ptr -7Ch
var_78		= dword	ptr -78h
var_74		= dword	ptr -74h
var_70		= dword	ptr -70h
var_6C		= dword	ptr -6Ch
var_68		= dword	ptr -68h
var_64		= dword	ptr -64h
var_60		= dword	ptr -60h
var_5C		= dword	ptr -5Ch
var_58		= dword	ptr -58h
var_54		= dword	ptr -54h
var_50		= dword	ptr -50h
var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_3C		= byte ptr -3Ch
var_38		= dword	ptr -38h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_8		= byte ptr -8
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0C8h
		lea	eax, [ebp+var_8]
		mov	[ebp+var_1C], eax
		lea	eax, [ebp+var_3C]
		mov	[ebp+var_24], offset sub_6FFEC1F0
		mov	[ebp+var_20], offset dword_6FFED308
		mov	[ebp+var_18], offset sub_6FFDE777
		mov	[ebp+var_14], esp
		mov	[esp], eax
		call	_Unwind_SjLj_Register
		mov	ecx, [ebp+arg_0]
		test	ecx, ecx
		jz	short loc_6FFDE363
		mov	edx, [ebp+arg_0]
		mov	eax, [edx]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jz	short loc_6FFDE370

loc_6FFDE358:				; CODE XREF: sub_6FFDE310+462j
		mov	edx, [ebp+arg_0]
		mov	[esp], edx
		call	sub_6FFEAE50

loc_6FFDE363:				; CODE XREF: sub_6FFDE310+37j
		lea	eax, [ebp+var_3C]
		mov	[esp], eax
		call	_Unwind_SjLj_Unregister
		leave
		retn
; ---------------------------------------------------------------------------

loc_6FFDE370:				; CODE XREF: sub_6FFDE310+46j
		mov	ecx, [ebp+arg_0]
		mov	ecx, [ecx]
		mov	edx, [ecx+0Ch]
		mov	eax, ecx
		add	eax, 14h
		mov	[ebp+var_A8], ecx
		lea	edx, [eax+edx*4]
		mov	[ebp+var_90], edx
		mov	edx, [ecx+8]
		lea	edx, [eax+edx*4]
		cmp	[ebp+var_90], edx
		mov	[ebp+var_A4], edx
		jz	loc_6FFDE75C
		mov	eax, ds:_ZN7QString4freeEPNS_4DataE
		mov	[ebp+var_80], eax
		jmp	short loc_6FFDE3EC
; ---------------------------------------------------------------------------
		align 10h

loc_6FFDE3B0:				; CODE XREF: sub_6FFDE310+100j
					; sub_6FFDE310+3A6j
		mov	edx, [ebp+var_8C]
		mov	eax, [edx+4]
		test	eax, eax
		jz	short loc_6FFDE3CC
		lock dec dword ptr [eax+34h]
		setnz	dl
		test	dl, dl
		jz	loc_6FFDE6C0

loc_6FFDE3CC:				; CODE XREF: sub_6FFDE310+ABj
					; sub_6FFDE310+447j
		mov	edx, [ebp+var_8C]
		mov	[esp], edx
		call	sub_6FFEAE50

loc_6FFDE3DA:				; CODE XREF: sub_6FFDE310+F3j
		mov	ecx, [ebp+var_90]
		cmp	[ebp+var_A4], ecx
		jz	loc_6FFDE75C

loc_6FFDE3EC:				; CODE XREF: sub_6FFDE310+9Cj
		sub	[ebp+var_90], 4
		mov	edx, [ebp+var_90]
		mov	edx, [edx]
		test	edx, edx
		mov	[ebp+var_8C], edx
		jz	short loc_6FFDE3DA
		mov	eax, [edx+8]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jnz	short loc_6FFDE3B0
		mov	ecx, [ebp+var_8C]
		mov	ecx, [ecx+8]
		mov	edx, [ecx+0Ch]
		mov	eax, ecx
		add	eax, 14h
		mov	[ebp+var_A0], ecx
		lea	edx, [eax+edx*4]
		mov	[ebp+var_70], edx
		mov	edx, [ecx+8]
		lea	edx, [eax+edx*4]
		cmp	[ebp+var_70], edx
		mov	[ebp+var_9C], edx
		jnz	short loc_6FFDE478
		jmp	loc_6FFDE6A0
; ---------------------------------------------------------------------------

loc_6FFDE445:				; CODE XREF: sub_6FFDE310+183j
					; sub_6FFDE310+306j
		mov	edx, [ebp+var_6C]
		mov	eax, [edx+4]
		test	eax, eax
		jz	short loc_6FFDE45E
		lock dec dword ptr [eax+34h]
		setnz	dl
		test	dl, dl
		jz	loc_6FFDE620

loc_6FFDE45E:				; CODE XREF: sub_6FFDE310+13Dj
					; sub_6FFDE310+38Bj
		mov	ecx, [ebp+var_6C]
		mov	[esp], ecx
		call	sub_6FFEAE50

loc_6FFDE469:				; CODE XREF: sub_6FFDE310+176j
		mov	eax, [ebp+var_70]
		cmp	[ebp+var_9C], eax
		jz	loc_6FFDE6A0

loc_6FFDE478:				; CODE XREF: sub_6FFDE310+12Ej
		sub	[ebp+var_70], 4
		mov	eax, [ebp+var_70]
		mov	eax, [eax]
		test	eax, eax
		mov	[ebp+var_6C], eax
		jz	short loc_6FFDE469
		mov	eax, [eax+8]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jnz	short loc_6FFDE445
		mov	ecx, [ebp+var_6C]
		mov	ecx, [ecx+8]
		mov	edx, [ecx+0Ch]
		mov	eax, ecx
		add	eax, 14h
		mov	[ebp+var_94], ecx
		lea	edx, [eax+edx*4]
		mov	[ebp+var_58], edx
		mov	edx, [ecx+8]
		lea	edx, [eax+edx*4]
		cmp	[ebp+var_58], edx
		mov	[ebp+var_7C], edx
		jnz	short loc_6FFDE4F2
		jmp	loc_6FFDE600
; ---------------------------------------------------------------------------

loc_6FFDE4C2:				; CODE XREF: sub_6FFDE310+1FDj
					; sub_6FFDE310+269j
		mov	ecx, [ebp+var_54]
		mov	eax, [ecx+4]
		test	eax, eax
		jz	short loc_6FFDE4DB
		lock dec dword ptr [eax+34h]
		setnz	dl
		test	dl, dl
		jz	loc_6FFDE580

loc_6FFDE4DB:				; CODE XREF: sub_6FFDE310+1BAj
					; sub_6FFDE310+2EBj
		mov	edx, [ebp+var_54]
		mov	[esp], edx
		call	sub_6FFEAE50

loc_6FFDE4E6:				; CODE XREF: sub_6FFDE310+1F0j
		mov	ecx, [ebp+var_58]
		cmp	[ebp+var_7C], ecx
		jz	loc_6FFDE600

loc_6FFDE4F2:				; CODE XREF: sub_6FFDE310+1ABj
		sub	[ebp+var_58], 4
		mov	eax, [ebp+var_58]
		mov	eax, [eax]
		test	eax, eax
		mov	[ebp+var_54], eax
		jz	short loc_6FFDE4E6
		mov	eax, [eax+8]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jnz	short loc_6FFDE4C2
		mov	ecx, [ebp+var_54]
		mov	ecx, [ecx+8]
		mov	edx, [ecx+0Ch]
		mov	eax, ecx
		add	eax, 14h
		mov	[ebp+var_74], ecx
		lea	edx, [eax+edx*4]
		mov	[ebp+var_44], edx
		mov	edx, [ecx+8]
		lea	edx, [eax+edx*4]
		cmp	[ebp+var_44], edx
		mov	[ebp+var_60], edx
		jz	short loc_6FFDE566

loc_6FFDE534:				; CODE XREF: sub_6FFDE310+254j
		sub	[ebp+var_44], 4
		mov	eax, [ebp+var_44]
		mov	eax, [eax]
		test	eax, eax
		mov	[ebp+var_48], eax
		jz	short loc_6FFDE55E
		mov	[esp], eax
		mov	[ebp+var_38], 1
		call	sub_6FFDFBB0
		mov	edx, [ebp+var_48]
		mov	[esp], edx
		call	sub_6FFEAE50

loc_6FFDE55E:				; CODE XREF: sub_6FFDE310+232j
		mov	ecx, [ebp+var_44]
		cmp	[ebp+var_60], ecx
		jnz	short loc_6FFDE534

loc_6FFDE566:				; CODE XREF: sub_6FFDE310+222j
		mov	eax, [ebp+var_74]
		mov	[ebp+var_38], 1
		mov	[esp], eax
		call	ds:_Z5qFreePv
		jmp	loc_6FFDE4C2
; ---------------------------------------------------------------------------
		align 10h

loc_6FFDE580:				; CODE XREF: sub_6FFDE310+1C5j
		mov	eax, [ecx+4]
		mov	edx, eax
		mov	[ebp+var_5C], eax
		mov	eax, [eax+4]
		cmp	edx, eax
		jnz	short loc_6FFDE5B1
		jmp	short loc_6FFDE5E0
; ---------------------------------------------------------------------------

loc_6FFDE591:				; CODE XREF: sub_6FFDE310+2B8j
					; sub_6FFDE310+2CAj
		mov	eax, [ebp+var_50]
		mov	[ebp+var_38], 2
		add	eax, 8
		mov	[esp], eax
		call	ds:_ZN8QVariantD1Ev
		mov	ecx, [ebp+var_4C]
		cmp	[ebp+var_5C], ecx
		jz	short loc_6FFDE5E0
		mov	eax, ecx

loc_6FFDE5B1:				; CODE XREF: sub_6FFDE310+27Dj
		mov	ecx, [eax+4]
		lea	edx, [eax-1Ch]
		mov	[ebp+var_50], edx
		mov	edx, [eax-1Ch]
		mov	[ebp+var_4C], ecx
		lock dec dword ptr [edx]
		setnz	cl
		test	cl, cl
		jnz	short loc_6FFDE591
		mov	eax, [eax-1Ch]
		mov	[ebp+var_38], 2
		mov	[esp], eax
		call	[ebp+var_80]
		jmp	short loc_6FFDE591
; ---------------------------------------------------------------------------
		align 10h

loc_6FFDE5E0:				; CODE XREF: sub_6FFDE310+27Fj
					; sub_6FFDE310+29Dj
		mov	eax, [ebp+var_5C]
		mov	dword ptr [esp+4], 1Ch
		mov	[ebp+var_38], 2
		mov	[esp], eax
		call	ds:_ZN8QMapData16continueFreeDataEi
		jmp	loc_6FFDE4DB
; ---------------------------------------------------------------------------

loc_6FFDE600:				; CODE XREF: sub_6FFDE310+1ADj
					; sub_6FFDE310+1DCj
		mov	eax, [ebp+var_94]
		mov	[ebp+var_38], 2
		mov	[esp], eax
		call	ds:_Z5qFreePv
		jmp	loc_6FFDE445
; ---------------------------------------------------------------------------
		align 10h

loc_6FFDE620:				; CODE XREF: sub_6FFDE310+148j
		mov	ecx, [ebp+var_6C]
		mov	ecx, [ecx+4]
		mov	eax, [ecx+4]
		mov	[ebp+var_78], ecx
		cmp	ecx, eax
		jnz	short loc_6FFDE650
		jmp	short loc_6FFDE680
; ---------------------------------------------------------------------------

loc_6FFDE632:				; CODE XREF: sub_6FFDE310+357j
					; sub_6FFDE310+36Cj
		mov	eax, [ebp+var_68]
		mov	[ebp+var_38], 3
		add	eax, 8
		mov	[esp], eax
		call	ds:_ZN8QVariantD1Ev
		mov	eax, [ebp+var_64]
		cmp	[ebp+var_78], eax
		jz	short loc_6FFDE680

loc_6FFDE650:				; CODE XREF: sub_6FFDE310+31Ej
		mov	edx, [eax+4]
		lea	ecx, [eax-1Ch]
		mov	[ebp+var_68], ecx
		mov	[ebp+var_64], edx
		mov	edx, [eax-1Ch]
		lock dec dword ptr [edx]
		setnz	cl
		test	cl, cl
		jnz	short loc_6FFDE632
		mov	eax, [eax-1Ch]
		mov	[ebp+var_38], 3
		mov	[esp], eax
		call	ds:_ZN7QString4freeEPNS_4DataE
		jmp	short loc_6FFDE632
; ---------------------------------------------------------------------------
		align 10h

loc_6FFDE680:				; CODE XREF: sub_6FFDE310+320j
					; sub_6FFDE310+33Ej
		mov	edx, [ebp+var_78]
		mov	dword ptr [esp+4], 1Ch
		mov	[ebp+var_38], 3
		mov	[esp], edx
		call	ds:_ZN8QMapData16continueFreeDataEi
		jmp	loc_6FFDE45E
; ---------------------------------------------------------------------------

loc_6FFDE6A0:				; CODE XREF: sub_6FFDE310+130j
					; sub_6FFDE310+162j
		mov	edx, [ebp+var_A0]
		mov	[ebp+var_38], 3
		mov	[esp], edx
		call	ds:_Z5qFreePv
		jmp	loc_6FFDE3B0
; ---------------------------------------------------------------------------
		align 10h

loc_6FFDE6C0:				; CODE XREF: sub_6FFDE310+B6j
		mov	ecx, [ebp+var_8C]
		mov	ecx, [ecx+4]
		mov	eax, [ecx+4]
		mov	[ebp+var_98], ecx
		cmp	ecx, eax
		jz	short loc_6FFDE739
		mov	edx, ds:_ZN8QVariantD1Ev
		mov	[ebp+var_40], edx
		jmp	short loc_6FFDE6E3
; ---------------------------------------------------------------------------

loc_6FFDE6E1:				; CODE XREF: sub_6FFDE310+427j
		mov	eax, ecx

loc_6FFDE6E3:				; CODE XREF: sub_6FFDE310+3CFj
		mov	ecx, [eax+4]
		lea	edx, [eax-1Ch]
		mov	[ebp+var_88], edx
		mov	edx, [eax-1Ch]
		mov	[ebp+var_84], ecx
		lock dec dword ptr [edx]
		setnz	cl
		test	cl, cl
		jnz	short loc_6FFDE715
		mov	eax, [eax-1Ch]
		mov	[ebp+var_38], 0FFFFFFFFh
		mov	[esp], eax
		call	ds:_ZN7QString4freeEPNS_4DataE

loc_6FFDE715:				; CODE XREF: sub_6FFDE310+3F0j
		mov	eax, [ebp+var_88]
		mov	[ebp+var_38], 0FFFFFFFFh
		add	eax, 8
		mov	[esp], eax
		call	[ebp+var_40]
		mov	ecx, [ebp+var_84]
		cmp	[ebp+var_98], ecx
		jnz	short loc_6FFDE6E1

loc_6FFDE739:				; CODE XREF: sub_6FFDE310+3C4j
		mov	eax, [ebp+var_98]
		mov	dword ptr [esp+4], 1Ch
		mov	[ebp+var_38], 0FFFFFFFFh
		mov	[esp], eax
		call	ds:_ZN8QMapData16continueFreeDataEi
		jmp	loc_6FFDE3CC
; ---------------------------------------------------------------------------

loc_6FFDE75C:				; CODE XREF: sub_6FFDE310+8Ej
					; sub_6FFDE310+D6j
		mov	eax, [ebp+var_A8]
		mov	[ebp+var_38], 0FFFFFFFFh
		mov	[esp], eax
		call	ds:_Z5qFreePv
		jmp	loc_6FFDE358
sub_6FFDE310	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn

sub_6FFDE777	proc near		; DATA XREF: sub_6FFDE310+20o
		add	ebp, 8
		mov	eax, [ebp-38h]
		mov	edx, [ebp-34h]
		cmp	eax, 1
		mov	[ebp-0ACh], edx
		jz	short loc_6FFDE7A5
		cmp	eax, 2
		jz	short loc_6FFDE7BA
		mov	eax, [ebp-54h]
		mov	dword ptr [ebp-38h], 0
		add	eax, 4
		mov	[esp+0], eax
		call	sub_6FFE4290

loc_6FFDE7A5:				; CODE XREF: sub_6FFDE777+12j
		mov	eax, [ebp-6Ch]
		mov	dword ptr [ebp-38h], 0
		add	eax, 4
		mov	[esp+0], eax
		call	sub_6FFE4290

loc_6FFDE7BA:				; CODE XREF: sub_6FFDE777+17j
		mov	eax, [ebp-8Ch]
		mov	dword ptr [ebp-38h], 0
		add	eax, 4
		mov	[esp+0], eax
		call	sub_6FFE4290
		mov	ecx, [ebp-0ACh]
		mov	dword ptr [ebp-38h], 0FFFFFFFFh
		mov	[esp+0], ecx
		call	_Unwind_SjLj_Resume
sub_6FFDE777	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_6FFDE7F0	proc near		; DATA XREF: sub_6FFD2F30:loc_6FFD3084o
					; .text:loc_6FFDC126o

var_40		= dword	ptr -40h
var_3C		= byte ptr -3Ch
var_38		= dword	ptr -38h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_8		= byte ptr -8
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 58h
		lea	eax, [ebp+var_8]
		mov	[ebp+var_1C], eax
		lea	eax, [ebp+var_3C]
		mov	[ebp+var_24], offset sub_6FFEC1F0
		mov	[ebp+var_20], offset dword_6FFED110
		mov	[ebp+var_18], offset sub_6FFDE8CF
		mov	[ebp+var_14], esp
		mov	[esp], eax
		call	_Unwind_SjLj_Register
		mov	eax, [ebp+arg_0]
		test	eax, eax
		jz	short loc_6FFDE891
		mov	dword ptr [esp], 8 ; size_t
		mov	[ebp+var_38], 0FFFFFFFFh
		call	sub_6FFEAE70
		mov	edx, [ebp+arg_0]
		mov	[ebp+var_40], eax
		mov	eax, [edx]
		mov	edx, [ebp+var_40]
		mov	[edx], eax
		mov	edx, [ebp+arg_0]
		mov	eax, [edx+4]
		mov	edx, [ebp+var_40]
		mov	[edx+4], eax
		lock inc dword ptr [eax+34h]
		setnz	dl
		mov	edx, [ebp+var_40]
		mov	eax, [edx+4]
		test	byte ptr [eax+44h], 2
		jnz	short loc_6FFDE881
		mov	eax, [eax+34h]
		cmp	eax, 1
		jz	short loc_6FFDE881
		mov	eax, edx
		add	eax, 4
		mov	[esp], eax
		mov	[ebp+var_38], 1
		call	sub_6FFE3B80

loc_6FFDE881:				; CODE XREF: sub_6FFDE7F0+73j
					; sub_6FFDE7F0+7Bj
		lea	eax, [ebp+var_3C]
		mov	[esp], eax
		call	_Unwind_SjLj_Unregister
		mov	eax, [ebp+var_40]
		leave
		retn
; ---------------------------------------------------------------------------

loc_6FFDE891:				; CODE XREF: sub_6FFDE7F0+34j
		mov	dword ptr [esp], 8 ; size_t
		mov	[ebp+var_38], 0FFFFFFFFh
		call	sub_6FFEAE70
		mov	[ebp+var_40], eax
		mov	edx, [ebp+var_40]
		mov	dword ptr [eax], 0
		mov	eax, ds:_ZN8QMapData11shared_nullE
		mov	[edx+4], eax
		lock inc dword ptr [eax+34h]
		setnz	dl
		lea	eax, [ebp+var_3C]
		mov	[esp], eax
		call	_Unwind_SjLj_Unregister
		mov	eax, [ebp+var_40]
		leave
		retn
sub_6FFDE7F0	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn

sub_6FFDE8CF	proc near		; DATA XREF: sub_6FFDE7F0+1Do
		add	ebp, 8
		mov	eax, [ebp-34h]
		mov	edx, [ebp-40h]
		mov	[ebp-44h], eax
		mov	[esp+0], edx
		call	sub_6FFEAE50
		mov	eax, [ebp-44h]
		mov	[esp+0], eax
		mov	dword ptr [ebp-38h], 0FFFFFFFFh
		call	_Unwind_SjLj_Resume
sub_6FFDE8CF	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_6FFDE900	proc near		; DATA XREF: _ZlsR13QDBusArgumentRK12DBusMenuItem:loc_6FFD339Fo
					; _ZlsR13QDBusArgumentRK18DBusMenuLayoutItem:loc_6FFD412Fo ...

var_40		= dword	ptr -40h
var_3C		= byte ptr -3Ch
var_38		= dword	ptr -38h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_8		= byte ptr -8
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 58h
		lea	eax, [ebp+var_8]
		mov	[ebp+var_1C], eax
		lea	eax, [ebp+var_3C]
		mov	[ebp+var_24], offset sub_6FFEC1F0
		mov	[ebp+var_20], offset word_6FFECD52
		mov	[ebp+var_18], offset sub_6FFDE9B3
		mov	[ebp+var_14], esp
		mov	[esp], eax
		call	_Unwind_SjLj_Register
		mov	eax, [ebp+arg_0]
		test	eax, eax
		jz	short loc_6FFDE976
		mov	dword ptr [esp], 10h ; size_t
		mov	[ebp+var_38], 0FFFFFFFFh
		call	sub_6FFEAE70
		mov	[ebp+var_40], eax
		mov	eax, [ebp+arg_0]
		mov	[esp+4], eax
		mov	edx, [ebp+var_40]
		mov	[esp], edx
		mov	[ebp+var_38], 1
		call	ds:_ZN8QVariantC2ERKS_
		lea	eax, [ebp+var_3C]
		mov	[esp], eax
		call	_Unwind_SjLj_Unregister
		mov	eax, [ebp+var_40]
		leave
		retn
; ---------------------------------------------------------------------------

loc_6FFDE976:				; CODE XREF: sub_6FFDE900+34j
		mov	dword ptr [esp], 10h ; size_t
		mov	[ebp+var_38], 0FFFFFFFFh
		call	sub_6FFEAE70
		mov	[ebp+var_40], eax
		mov	edx, eax
		mov	eax, [eax+8]
		mov	dword ptr [edx], 0
		and	eax, 0C0000000h
		mov	[edx+8], eax
		lea	eax, [ebp+var_3C]
		mov	byte ptr [edx+0Bh], 80h
		mov	[esp], eax
		call	_Unwind_SjLj_Unregister
		mov	eax, [ebp+var_40]
		leave
		retn
sub_6FFDE900	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn

sub_6FFDE9B3	proc near		; DATA XREF: sub_6FFDE900+1Do
		add	ebp, 8
		mov	eax, [ebp-34h]
		mov	edx, [ebp-40h]
		mov	[ebp-44h], eax
		mov	[esp+0], edx
		call	sub_6FFEAE50
		mov	eax, [ebp-44h]
		mov	[esp+0], eax
		mov	dword ptr [ebp-38h], 0FFFFFFFFh
		call	_Unwind_SjLj_Resume
sub_6FFDE9B3	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_6FFDE9E0	proc near		; DATA XREF: _ZN16DBusMenuImporter31slotAboutToShowDBusCallFinishedEP23QDBusPendingCallWatcher:loc_6FFCFD60o
					; _ZN16DBusMenuImporter21slotGetLayoutFinishedEP23QDBusPendingCallWatcher:loc_6FFD252Fo ...

var_40		= dword	ptr -40h
var_3C		= byte ptr -3Ch
var_38		= dword	ptr -38h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_8		= byte ptr -8
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 58h
		lea	eax, [ebp+var_8]
		mov	[ebp+var_1C], eax
		lea	eax, [ebp+var_3C]
		mov	[ebp+var_24], offset sub_6FFEC1F0
		mov	[ebp+var_20], offset dword_6FFECD58
		mov	[ebp+var_18], offset sub_6FFDEA8C
		mov	[ebp+var_14], esp
		mov	[esp], eax
		call	_Unwind_SjLj_Register
		mov	edx, [ebp+arg_0]
		test	edx, edx
		jz	short loc_6FFDEA56
		mov	dword ptr [esp], 4 ; size_t
		mov	[ebp+var_38], 0FFFFFFFFh
		call	sub_6FFEAE70
		mov	[ebp+var_40], eax
		mov	eax, [ebp+arg_0]
		mov	[esp+4], eax
		mov	eax, [ebp+var_40]
		mov	[esp], eax
		mov	[ebp+var_38], 1
		call	ds:_ZN13QDBusArgumentC1ERKS_
		lea	eax, [ebp+var_3C]
		mov	[esp], eax
		call	_Unwind_SjLj_Unregister
		mov	eax, [ebp+var_40]
		leave
		retn
; ---------------------------------------------------------------------------

loc_6FFDEA56:				; CODE XREF: sub_6FFDE9E0+34j
		mov	dword ptr [esp], 4 ; size_t
		mov	[ebp+var_38], 0FFFFFFFFh
		call	sub_6FFEAE70
		mov	[ebp+var_40], eax
		mov	[esp], eax
		mov	[ebp+var_38], 2
		call	ds:_ZN13QDBusArgumentC1Ev
		lea	eax, [ebp+var_3C]
		mov	[esp], eax
		call	_Unwind_SjLj_Unregister
		mov	eax, [ebp+var_40]
		leave
		retn
sub_6FFDE9E0	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn

sub_6FFDEA8C	proc near		; DATA XREF: sub_6FFDE9E0+1Do
		add	ebp, 8
		mov	eax, [ebp-34h]
		mov	[ebp-44h], eax
		mov	eax, [ebp-40h]
		mov	[esp+0], eax
		call	sub_6FFEAE50
		mov	eax, [ebp-44h]
		mov	[esp+0], eax
		mov	dword ptr [ebp-38h], 0FFFFFFFFh
		call	_Unwind_SjLj_Resume
sub_6FFDEA8C	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_6FFDEAC0	proc near		; DATA XREF: sub_6FFD2F30:loc_6FFD30D7o
					; .text:loc_6FFDC1B6o

var_40		= dword	ptr -40h
var_3C		= byte ptr -3Ch
var_38		= dword	ptr -38h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_8		= byte ptr -8
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 58h
		lea	eax, [ebp+var_8]
		mov	[ebp+var_1C], eax
		lea	eax, [ebp+var_3C]
		mov	[ebp+var_24], offset sub_6FFEC1F0
		mov	[ebp+var_20], offset dword_6FFED19C
		mov	[ebp+var_18], offset sub_6FFDEBAD
		mov	[ebp+var_14], esp
		mov	[esp], eax
		call	_Unwind_SjLj_Register
		mov	eax, [ebp+arg_0]
		test	eax, eax
		jz	short loc_6FFDEB70
		mov	dword ptr [esp], 8 ; size_t
		mov	[ebp+var_38], 0FFFFFFFFh
		call	sub_6FFEAE70
		mov	edx, [ebp+arg_0]
		mov	[ebp+var_40], eax
		mov	eax, [edx]
		mov	edx, [ebp+var_40]
		mov	[edx], eax
		mov	edx, [ebp+arg_0]
		mov	eax, [edx+4]
		mov	edx, [ebp+var_40]
		mov	[edx+4], eax
		lock inc dword ptr [eax]
		setnz	dl
		mov	edx, [ebp+var_40]
		mov	eax, [edx+4]
		test	byte ptr [eax+10h], 1
		jz	short loc_6FFDEB44
		lea	eax, [ebp+var_3C]
		mov	[esp], eax
		call	_Unwind_SjLj_Unregister
		mov	eax, [ebp+var_40]
		leave
		retn
; ---------------------------------------------------------------------------

loc_6FFDEB44:				; CODE XREF: sub_6FFDEAC0+72j
		mov	eax, [eax+4]
		mov	[esp+4], eax
		mov	eax, edx
		add	eax, 4
		mov	[esp], eax
		mov	[ebp+var_38], 1
		call	sub_6FFE8C20
		lea	eax, [ebp+var_3C]
		mov	[esp], eax
		call	_Unwind_SjLj_Unregister
		mov	eax, [ebp+var_40]
		leave
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6FFDEB70:				; CODE XREF: sub_6FFDEAC0+34j
		mov	dword ptr [esp], 8 ; size_t
		mov	[ebp+var_38], 0FFFFFFFFh
		call	sub_6FFEAE70
		mov	[ebp+var_40], eax
		mov	edx, [ebp+var_40]
		mov	dword ptr [eax], 0
		mov	eax, ds:_ZN9QListData11shared_nullE
		mov	[edx+4], eax
		lock inc dword ptr [eax]
		setnz	dl
		lea	eax, [ebp+var_3C]
		mov	[esp], eax
		call	_Unwind_SjLj_Unregister
		mov	eax, [ebp+var_40]
		leave
		retn
sub_6FFDEAC0	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn

sub_6FFDEBAD	proc near		; DATA XREF: sub_6FFDEAC0+1Do
		add	ebp, 8
		mov	eax, [ebp-34h]
		mov	edx, [ebp-40h]
		mov	[ebp-44h], eax
		mov	[esp+0], edx
		call	sub_6FFEAE50
		mov	eax, [ebp-44h]
		mov	[esp+0], eax
		mov	dword ptr [ebp-38h], 0FFFFFFFFh
		call	_Unwind_SjLj_Resume
sub_6FFDEBAD	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_6FFDEBE0	proc near		; DATA XREF: sub_6FFC2AE0:loc_6FFC30D4o
					; sub_6FFD2F30:loc_6FFD3060o

var_40		= dword	ptr -40h
var_3C		= byte ptr -3Ch
var_38		= dword	ptr -38h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_8		= byte ptr -8
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 58h
		lea	eax, [ebp+var_8]
		mov	[ebp+var_1C], eax
		lea	eax, [ebp+var_3C]
		mov	[ebp+var_24], offset sub_6FFEC1F0
		mov	[ebp+var_20], offset dword_6FFEC920
		mov	[ebp+var_18], offset sub_6FFDECB6
		mov	[ebp+var_14], esp
		mov	[esp], eax
		call	_Unwind_SjLj_Register
		mov	edx, [ebp+arg_0]
		test	edx, edx
		jz	short loc_6FFDEC80
		mov	dword ptr [esp], 4 ; size_t
		mov	[ebp+var_38], 0FFFFFFFFh
		call	sub_6FFEAE70
		mov	edx, [ebp+arg_0]
		mov	[ebp+var_40], eax
		mov	eax, [edx]
		mov	edx, [ebp+var_40]
		mov	[edx], eax
		lock inc dword ptr [eax]
		setnz	dl
		mov	edx, [ebp+var_40]
		mov	eax, [edx]
		test	byte ptr [eax+10h], 1
		jz	short loc_6FFDEC57
		lea	eax, [ebp+var_3C]
		mov	[esp], eax
		call	_Unwind_SjLj_Unregister
		mov	eax, [ebp+var_40]
		leave
		retn
; ---------------------------------------------------------------------------

loc_6FFDEC57:				; CODE XREF: sub_6FFDEBE0+65j
		mov	eax, [eax+4]
		mov	[esp], edx
		mov	[esp+4], eax
		mov	[ebp+var_38], 1
		call	sub_6FFE54B0
		lea	eax, [ebp+var_3C]
		mov	[esp], eax
		call	_Unwind_SjLj_Unregister
		mov	eax, [ebp+var_40]
		leave
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6FFDEC80:				; CODE XREF: sub_6FFDEBE0+34j
		mov	dword ptr [esp], 4 ; size_t
		mov	[ebp+var_38], 0FFFFFFFFh
		call	sub_6FFEAE70
		mov	[ebp+var_40], eax
		mov	eax, ds:_ZN9QListData11shared_nullE
		mov	edx, [ebp+var_40]
		mov	[edx], eax
		lock inc dword ptr [eax]
		setnz	dl
		lea	eax, [ebp+var_3C]
		mov	[esp], eax
		call	_Unwind_SjLj_Unregister
		mov	eax, [ebp+var_40]
		leave
		retn
sub_6FFDEBE0	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn

sub_6FFDECB6	proc near		; DATA XREF: sub_6FFDEBE0+1Do
		add	ebp, 8
		mov	eax, [ebp-34h]
		mov	edx, [ebp-40h]
		mov	[ebp-44h], eax
		mov	[esp+0], edx
		call	sub_6FFEAE50
		mov	eax, [ebp-44h]
		mov	[esp+0], eax
		mov	dword ptr [ebp-38h], 0FFFFFFFFh
		call	_Unwind_SjLj_Resume
sub_6FFDECB6	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_6FFDECE0	proc near		; DATA XREF: _ZN16DBusMenuImporter21slotGetLayoutFinishedEP23QDBusPendingCallWatcher+471o
					; _ZN16DBusMenuImporter21slotGetLayoutFinishedEP23QDBusPendingCallWatcher:loc_6FFD1F1Eo ...

var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_3C		= byte ptr -3Ch
var_38		= dword	ptr -38h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_8		= byte ptr -8
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 68h
		lea	eax, [ebp+var_8]
		mov	[ebp+var_1C], eax
		lea	eax, [ebp+var_3C]
		mov	[ebp+var_24], offset sub_6FFEC1F0
		mov	[ebp+var_20], offset word_6FFECFC6
		mov	[ebp+var_18], offset sub_6FFDEE36
		mov	[ebp+var_14], esp
		mov	[esp], eax
		call	_Unwind_SjLj_Register
		mov	eax, [ebp+arg_0]
		test	eax, eax
		jz	loc_6FFDEDE0
		mov	dword ptr [esp], 0Ch ; size_t
		mov	[ebp+var_38], 0FFFFFFFFh
		call	sub_6FFEAE70
		mov	edx, [ebp+arg_0]
		mov	[ebp+var_40], eax
		mov	[ebp+var_44], eax
		mov	eax, [edx]
		mov	edx, [ebp+var_40]
		mov	[edx], eax
		add	edx, 4
		mov	[ebp+var_48], edx
		mov	edx, [ebp+arg_0]
		mov	eax, [edx+4]
		mov	edx, [ebp+var_40]
		mov	[edx+4], eax
		lock inc dword ptr [eax+34h]
		setnz	dl
		mov	edx, [ebp+var_40]
		mov	eax, [edx+4]
		test	byte ptr [eax+44h], 2
		jnz	short loc_6FFDED7C
		mov	eax, [eax+34h]
		cmp	eax, 1
		jz	short loc_6FFDED7C
		mov	eax, [ebp+var_48]
		mov	[esp], eax
		mov	[ebp+var_38], 2
		call	sub_6FFE3B80

loc_6FFDED7C:				; CODE XREF: sub_6FFDECE0+80j
					; sub_6FFDECE0+88j
		mov	edx, [ebp+arg_0]
		mov	eax, [edx+8]
		mov	edx, [ebp+var_44]
		mov	[edx+8], eax
		lock inc dword ptr [eax]
		setnz	dl
		mov	edx, [ebp+var_44]
		mov	eax, [edx+8]
		test	byte ptr [eax+10h], 1
		jz	short loc_6FFDEDB0
		lea	eax, [ebp+var_3C]
		mov	[esp], eax
		call	_Unwind_SjLj_Unregister
		mov	eax, [ebp+var_40]
		leave
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6FFDEDB0:				; CODE XREF: sub_6FFDECE0+B8j
		mov	eax, [eax+4]
		mov	[esp+4], eax
		mov	eax, edx
		add	eax, 8
		mov	[esp], eax
		mov	[ebp+var_38], 1
		call	sub_6FFE77F0
		lea	eax, [ebp+var_3C]
		mov	[esp], eax
		call	_Unwind_SjLj_Unregister
		mov	eax, [ebp+var_40]
		leave
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6FFDEDE0:				; CODE XREF: sub_6FFDECE0+34j
		mov	dword ptr [esp], 0Ch ; size_t
		mov	[ebp+var_38], 0FFFFFFFFh
		call	sub_6FFEAE70
		mov	[ebp+var_40], eax
		mov	edx, [ebp+var_40]
		mov	dword ptr [eax], 0
		mov	dword ptr [eax+8], 0
		mov	eax, ds:_ZN8QMapData11shared_nullE
		mov	[edx+4], eax
		lock inc dword ptr [eax+34h]
		setnz	dl
		mov	edx, [ebp+var_40]
		mov	eax, ds:_ZN9QListData11shared_nullE
		mov	[edx+8], eax
		lock inc dword ptr [eax]
		setnz	dl
		lea	eax, [ebp+var_3C]
		mov	[esp], eax
		call	_Unwind_SjLj_Unregister
		mov	eax, [ebp+var_40]
		leave
		retn
sub_6FFDECE0	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn

sub_6FFDEE36	proc near		; DATA XREF: sub_6FFDECE0+1Do
		add	ebp, 8
		mov	eax, [ebp-34h]
		cmp	dword ptr [ebp-38h], 1
		mov	[ebp-4Ch], eax
		jz	short loc_6FFDEE57
		mov	edx, [ebp-48h]
		mov	[esp+0], edx
		mov	dword ptr [ebp-38h], 0
		call	sub_6FFE4290

loc_6FFDEE57:				; CODE XREF: sub_6FFDEE36+Dj
		mov	eax, [ebp-40h]
		mov	[esp+0], eax
		call	sub_6FFEAE50
		mov	edx, [ebp-4Ch]
		mov	[esp+0], edx
		mov	dword ptr [ebp-38h], 0FFFFFFFFh
		call	_Unwind_SjLj_Resume
sub_6FFDEE36	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_6FFDEE80	proc near		; DATA XREF: sub_6FFD2F30:loc_6FFD30B0o

var_40		= dword	ptr -40h
var_3C		= byte ptr -3Ch
var_38		= dword	ptr -38h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_8		= byte ptr -8
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 58h
		lea	eax, [ebp+var_8]
		mov	[ebp+var_1C], eax
		lea	eax, [ebp+var_3C]
		mov	[ebp+var_24], offset sub_6FFEC1F0
		mov	[ebp+var_20], offset dword_6FFED15C
		mov	[ebp+var_18], offset sub_6FFDEF56
		mov	[ebp+var_14], esp
		mov	[esp], eax
		call	_Unwind_SjLj_Register
		mov	edx, [ebp+arg_0]
		test	edx, edx
		jz	short loc_6FFDEF20
		mov	dword ptr [esp], 4 ; size_t
		mov	[ebp+var_38], 0FFFFFFFFh
		call	sub_6FFEAE70
		mov	edx, [ebp+arg_0]
		mov	[ebp+var_40], eax
		mov	eax, [edx]
		mov	edx, [ebp+var_40]
		mov	[edx], eax
		lock inc dword ptr [eax]
		setnz	dl
		mov	edx, [ebp+var_40]
		mov	eax, [edx]
		test	byte ptr [eax+10h], 1
		jz	short loc_6FFDEEF7
		lea	eax, [ebp+var_3C]
		mov	[esp], eax
		call	_Unwind_SjLj_Unregister
		mov	eax, [ebp+var_40]
		leave
		retn
; ---------------------------------------------------------------------------

loc_6FFDEEF7:				; CODE XREF: sub_6FFDEE80+65j
		mov	eax, [eax+4]
		mov	[esp], edx
		mov	[esp+4], eax
		mov	[ebp+var_38], 1
		call	sub_6FFE5F80
		lea	eax, [ebp+var_3C]
		mov	[esp], eax
		call	_Unwind_SjLj_Unregister
		mov	eax, [ebp+var_40]
		leave
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6FFDEF20:				; CODE XREF: sub_6FFDEE80+34j
		mov	dword ptr [esp], 4 ; size_t
		mov	[ebp+var_38], 0FFFFFFFFh
		call	sub_6FFEAE70
		mov	[ebp+var_40], eax
		mov	eax, ds:_ZN9QListData11shared_nullE
		mov	edx, [ebp+var_40]
		mov	[edx], eax
		lock inc dword ptr [eax]
		setnz	dl
		lea	eax, [ebp+var_3C]
		mov	[esp], eax
		call	_Unwind_SjLj_Unregister
		mov	eax, [ebp+var_40]
		leave
		retn
sub_6FFDEE80	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn

sub_6FFDEF56	proc near		; DATA XREF: sub_6FFDEE80+1Do
		add	ebp, 8
		mov	eax, [ebp-34h]
		mov	edx, [ebp-40h]
		mov	[ebp-44h], eax
		mov	[esp+0], edx
		call	sub_6FFEAE50
		mov	eax, [ebp-44h]
		mov	[esp+0], eax
		mov	dword ptr [ebp-38h], 0FFFFFFFFh
		call	_Unwind_SjLj_Resume
sub_6FFDEF56	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_6FFDEF80	proc near		; DATA XREF: sub_6FFD2F30:loc_6FFD3100o

var_40		= dword	ptr -40h
var_3C		= byte ptr -3Ch
var_38		= dword	ptr -38h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_8		= byte ptr -8
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 58h
		lea	eax, [ebp+var_8]
		mov	[ebp+var_1C], eax
		lea	eax, [ebp+var_3C]
		mov	[ebp+var_24], offset sub_6FFEC1F0
		mov	[ebp+var_20], offset dword_6FFED210
		mov	[ebp+var_18], offset sub_6FFDF056
		mov	[ebp+var_14], esp
		mov	[esp], eax
		call	_Unwind_SjLj_Register
		mov	ecx, [ebp+arg_0]
		test	ecx, ecx
		jz	short loc_6FFDF020
		mov	dword ptr [esp], 4 ; size_t
		mov	[ebp+var_38], 0FFFFFFFFh
		call	sub_6FFEAE70
		mov	edx, [ebp+arg_0]
		mov	[ebp+var_40], eax
		mov	eax, [edx]
		mov	edx, [ebp+var_40]
		mov	[edx], eax
		lock inc dword ptr [eax]
		setnz	dl
		mov	edx, [ebp+var_40]
		mov	eax, [edx]
		test	byte ptr [eax+10h], 1
		jz	short loc_6FFDEFF7
		lea	eax, [ebp+var_3C]
		mov	[esp], eax
		call	_Unwind_SjLj_Unregister
		mov	eax, [ebp+var_40]
		leave
		retn
; ---------------------------------------------------------------------------

loc_6FFDEFF7:				; CODE XREF: sub_6FFDEF80+65j
		mov	eax, [eax+4]
		mov	[esp], edx
		mov	[esp+4], eax
		mov	[ebp+var_38], 1
		call	sub_6FFE6BF0
		lea	eax, [ebp+var_3C]
		mov	[esp], eax
		call	_Unwind_SjLj_Unregister
		mov	eax, [ebp+var_40]
		leave
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6FFDF020:				; CODE XREF: sub_6FFDEF80+34j
		mov	dword ptr [esp], 4 ; size_t
		mov	[ebp+var_38], 0FFFFFFFFh
		call	sub_6FFEAE70
		mov	[ebp+var_40], eax
		mov	eax, ds:_ZN9QListData11shared_nullE
		mov	edx, [ebp+var_40]
		mov	[edx], eax
		lock inc dword ptr [eax]
		setnz	dl
		lea	eax, [ebp+var_3C]
		mov	[esp], eax
		call	_Unwind_SjLj_Unregister
		mov	eax, [ebp+var_40]
		leave
		retn
sub_6FFDEF80	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn

sub_6FFDF056	proc near		; DATA XREF: sub_6FFDEF80+1Do
		add	ebp, 8
		mov	eax, [ebp-34h]
		mov	edx, [ebp-40h]
		mov	[ebp-44h], eax
		mov	[esp+0], edx
		call	sub_6FFEAE50
		mov	eax, [ebp-44h]
		mov	[esp+0], eax
		mov	dword ptr [ebp-38h], 0FFFFFFFFh
		call	_Unwind_SjLj_Resume
sub_6FFDF056	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_6FFDF080	proc near		; DATA XREF: sub_6FFD2F30:loc_6FFD3150o

var_40		= dword	ptr -40h
var_3C		= byte ptr -3Ch
var_38		= dword	ptr -38h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_8		= byte ptr -8
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 58h
		lea	eax, [ebp+var_8]
		mov	[ebp+var_1C], eax
		lea	eax, [ebp+var_3C]
		mov	[ebp+var_24], offset sub_6FFEC1F0
		mov	[ebp+var_20], offset dword_6FFED28C
		mov	[ebp+var_18], offset sub_6FFDF156
		mov	[ebp+var_14], esp
		mov	[esp], eax
		call	_Unwind_SjLj_Register
		mov	edx, [ebp+arg_0]
		test	edx, edx
		jz	short loc_6FFDF120
		mov	dword ptr [esp], 4 ; size_t
		mov	[ebp+var_38], 0FFFFFFFFh
		call	sub_6FFEAE70
		mov	edx, [ebp+arg_0]
		mov	[ebp+var_40], eax
		mov	eax, [edx]
		mov	edx, [ebp+var_40]
		mov	[edx], eax
		lock inc dword ptr [eax]
		setnz	dl
		mov	edx, [ebp+var_40]
		mov	eax, [edx]
		test	byte ptr [eax+10h], 1
		jz	short loc_6FFDF0F7
		lea	eax, [ebp+var_3C]
		mov	[esp], eax
		call	_Unwind_SjLj_Unregister
		mov	eax, [ebp+var_40]
		leave
		retn
; ---------------------------------------------------------------------------

loc_6FFDF0F7:				; CODE XREF: sub_6FFDF080+65j
		mov	eax, [eax+4]
		mov	[esp], edx
		mov	[esp+4], eax
		mov	[ebp+var_38], 1
		call	sub_6FFE77F0
		lea	eax, [ebp+var_3C]
		mov	[esp], eax
		call	_Unwind_SjLj_Unregister
		mov	eax, [ebp+var_40]
		leave
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6FFDF120:				; CODE XREF: sub_6FFDF080+34j
		mov	dword ptr [esp], 4 ; size_t
		mov	[ebp+var_38], 0FFFFFFFFh
		call	sub_6FFEAE70
		mov	[ebp+var_40], eax
		mov	eax, ds:_ZN9QListData11shared_nullE
		mov	edx, [ebp+var_40]
		mov	[edx], eax
		lock inc dword ptr [eax]
		setnz	dl
		lea	eax, [ebp+var_3C]
		mov	[esp], eax
		call	_Unwind_SjLj_Unregister
		mov	eax, [ebp+var_40]
		leave
		retn
sub_6FFDF080	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn

sub_6FFDF156	proc near		; DATA XREF: sub_6FFDF080+1Do
		add	ebp, 8
		mov	eax, [ebp-34h]
		mov	edx, [ebp-40h]
		mov	[ebp-44h], eax
		mov	[esp+0], edx
		call	sub_6FFEAE50
		mov	eax, [ebp-44h]
		mov	[esp+0], eax
		mov	dword ptr [ebp-38h], 0FFFFFFFFh
		call	_Unwind_SjLj_Resume
sub_6FFDF156	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_6FFDF180	proc near		; CODE XREF: sub_6FFC1EB0+B1p
					; _ZN16DBusMenuExporter14activateActionEP7QAction+C6p ...

var_50		= dword	ptr -50h
var_4C		= byte ptr -4Ch
var_48		= dword	ptr -48h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_C		= dword	ptr -0Ch
var_8		= byte ptr -8
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 68h
		lea	eax, [ebp+var_8]
		mov	[ebp+var_2C], eax
		lea	eax, [ebp+var_4C]
		mov	[esp], eax
		mov	[ebp+var_34], offset sub_6FFEC1F0
		mov	[ebp+var_30], offset dword_6FFEC83C
		mov	[ebp+var_28], offset sub_6FFDF231
		mov	[ebp+var_24], esp
		call	_Unwind_SjLj_Register
		mov	dword ptr [esp], 18h ; size_t
		mov	[ebp+var_48], 0FFFFFFFFh
		call	sub_6FFEAE70
		mov	[ebp+var_C], 2
		mov	[ebp+var_48], 1
		mov	[ebp+var_50], eax
		lea	eax, [ebp+var_C]
		mov	edx, [ebp+var_50]
		mov	[esp+8], eax
		mov	eax, [ebp+var_50]
		mov	[esp], edx
		add	eax, 8
		mov	[esp+4], eax
		call	ds:_ZN11QTextStreamC1EP7QString6QFlagsIN9QIODevice12OpenModeFlagEE
		mov	eax, ds:_ZN7QString11shared_nullE
		mov	edx, [ebp+var_50]
		mov	[edx+8], eax
		lock inc dword ptr [eax]
		setnz	dl
		mov	eax, [ebp+var_50]
		mov	edx, [ebp+arg_0]
		mov	dword ptr [eax+0Ch], 1
		mov	dword ptr [eax+10h], 1
		mov	byte ptr [eax+14h], 1
		mov	byte ptr [eax+15h], 1
		mov	[edx], eax
		lea	eax, [ebp+var_4C]
		mov	[esp], eax
		call	_Unwind_SjLj_Unregister
		mov	eax, [ebp+arg_0]
		leave
		retn	4
sub_6FFDF180	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn

sub_6FFDF231	proc near		; DATA XREF: sub_6FFDF180+20o
		add	ebp, 8
		mov	eax, [ebp-44h]
		mov	edx, [ebp-50h]
		mov	[ebp-54h], eax
		mov	[esp+0], edx
		call	sub_6FFEAE50
		mov	eax, [ebp-54h]
		mov	dword ptr [ebp-48h], 0FFFFFFFFh
		mov	[esp+0], eax
		call	_Unwind_SjLj_Resume
sub_6FFDF231	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6FFDF260	proc near		; DATA XREF: sub_6FFDBE40+13o

var_1C		= dword	ptr -1Ch
arg_0		= dword	ptr  4

		push	esi
		push	ebx
		sub	esp, 14h
		mov	esi, [esp+1Ch+arg_0]
		test	esi, esi
		jz	short loc_6FFDF295
		mov	eax, [esi]
		test	eax, eax
		jz	short loc_6FFDF287

loc_6FFDF273:				; CODE XREF: sub_6FFDF260+25j
		mov	ebx, [eax+10h]
		add	eax, 30h
		mov	[esp+1Ch+var_1C], eax
		call	_Unwind_DeleteException
		test	ebx, ebx
		mov	eax, ebx
		jnz	short loc_6FFDF273

loc_6FFDF287:				; CODE XREF: sub_6FFDF260+11j
		mov	[esp+1Ch+arg_0], esi
		add	esp, 14h
		pop	ebx
		pop	esi
		jmp	free
; ---------------------------------------------------------------------------

loc_6FFDF295:				; CODE XREF: sub_6FFDF260+Bj
		add	esp, 14h
		pop	ebx
		pop	esi
		retn
sub_6FFDF260	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6FFDF2A0	proc near		; CODE XREF: sub_6FFDF440+3Bp
					; sub_6FFEC1F0+423p

var_2C		= dword	ptr -2Ch
var_10		= dword	ptr -10h

		push	ebx
		mov	ebx, eax
		sub	esp, 28h
		movzx	ecx, byte ptr [eax+14h]
		cmp	cl, 0FFh
		movzx	eax, cl
		jz	short loc_6FFDF306
		mov	ecx, eax
		and	ecx, 7
		cmp	ecx, 2
		jz	short loc_6FFDF300
		jle	short loc_6FFDF2D0
		cmp	ecx, 3
		jz	short loc_6FFDF2D4
		cmp	ecx, 4
		jz	short loc_6FFDF2F6

loc_6FFDF2C8:				; CODE XREF: sub_6FFDF2A0+32j
		call	abort
; ---------------------------------------------------------------------------
		align 10h

loc_6FFDF2D0:				; CODE XREF: sub_6FFDF2A0+1Cj
		test	ecx, ecx
		jnz	short loc_6FFDF2C8

loc_6FFDF2D4:				; CODE XREF: sub_6FFDF2A0+21j
		shl	edx, 2
		neg	edx

loc_6FFDF2D9:				; CODE XREF: sub_6FFDF2A0+5Bj
					; sub_6FFDF2A0+64j ...
		mov	ecx, [ebx+0Ch]
		add	ecx, edx
		mov	edx, [ebx+8]
		lea	ebx, [esp+2Ch+var_10]
		mov	[esp+2Ch+var_2C], ebx
		call	sub_6FFDF580
		mov	eax, [esp+2Ch+var_10]
		add	esp, 28h
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_6FFDF2F6:				; CODE XREF: sub_6FFDF2A0+26j
		shl	edx, 3
		neg	edx
		jmp	short loc_6FFDF2D9
; ---------------------------------------------------------------------------
		align 10h

loc_6FFDF300:				; CODE XREF: sub_6FFDF2A0+1Aj
		add	edx, edx
		neg	edx
		jmp	short loc_6FFDF2D9
; ---------------------------------------------------------------------------

loc_6FFDF306:				; CODE XREF: sub_6FFDF2A0+10j
		xor	edx, edx
		jmp	short loc_6FFDF2D9
sub_6FFDF2A0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6FFDF310	proc near		; CODE XREF: sub_6FFDF440+46p
					; sub_6FFEC1F0+43Fp

var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4

		sub	esp, 2Ch
		mov	[esp+2Ch+var_C], ebx
		mov	ebx, eax
		mov	eax, [ecx]
		mov	[esp+2Ch+var_8], esi
		mov	esi, edx
		mov	[esp+2Ch+var_4], edi
		mov	edi, ecx
		mov	[esp+2Ch+var_10], eax
		mov	eax, [edx]
		mov	[esp+2Ch+var_2C], edx
		call	dword ptr [eax+8]
		test	al, al
		jz	short loc_6FFDF341
		mov	eax, [esp+2Ch+var_10]
		mov	eax, [eax]
		mov	[esp+2Ch+var_10], eax

loc_6FFDF341:				; CODE XREF: sub_6FFDF310+25j
		mov	eax, [ebx]
		lea	edx, [esp+2Ch+var_10]
		mov	[esp+2Ch+var_24], edx
		mov	[esp+2Ch+var_20], 1
		mov	[esp+2Ch+var_28], esi
		mov	[esp+2Ch+var_2C], ebx
		call	dword ptr [eax+10h]
		mov	edx, eax
		xor	eax, eax
		test	dl, dl
		jz	short loc_6FFDF370
		mov	eax, [esp+2Ch+var_10]
		mov	[edi], eax
		mov	eax, 1

loc_6FFDF370:				; CODE XREF: sub_6FFDF310+53j
		mov	ebx, [esp+2Ch+var_C]
		mov	esi, [esp+2Ch+var_8]
		mov	edi, [esp+2Ch+var_4]
		add	esp, 2Ch
		retn
sub_6FFDF310	endp


; =============== S U B	R O U T	I N E =======================================


sub_6FFDF380	proc near		; CODE XREF: sub_6FFEBACD+69p
					; sub_6FFEC1F0+E3p ...

var_2C		= dword	ptr -2Ch

		push	ebp
		push	edi
		mov	edi, edx
		push	esi
		mov	esi, eax
		push	ebx
		xor	eax, eax
		sub	esp, 1Ch
		test	esi, esi
		mov	ebx, ecx
		jz	short loc_6FFDF39B
		mov	[esp+2Ch+var_2C], esi
		call	_Unwind_GetRegionStart

loc_6FFDF39B:				; CODE XREF: sub_6FFDF380+11j
		mov	[ebx], eax
		movzx	edx, byte ptr [edi]
		add	edi, 1
		cmp	dl, 0FFh
		jz	short loc_6FFDF427
		movzx	ebp, dl
		mov	edx, esi
		mov	eax, ebp
		call	sub_6FFDF4C0
		lea	edx, [ebx+4]
		mov	ecx, edi
		mov	[esp+2Ch+var_2C], edx
		mov	edx, eax
		mov	eax, ebp
		call	sub_6FFDF580
		mov	edi, eax
		movzx	eax, byte ptr [edi]
		add	edi, 1
		cmp	al, 0FFh
		mov	[ebx+14h], al
		jz	short loc_6FFDF437

loc_6FFDF3D4:				; CODE XREF: sub_6FFDF380+B5j
		xor	esi, esi
		xor	ecx, ecx

loc_6FFDF3D8:				; CODE XREF: sub_6FFDF380+6Cj
		movzx	eax, byte ptr [edi]
		add	edi, 1
		mov	edx, eax
		and	edx, 7Fh
		shl	edx, cl
		add	ecx, 7
		or	esi, edx
		test	al, al
		js	short loc_6FFDF3D8
		lea	esi, [edi+esi]
		mov	[ebx+0Ch], esi

loc_6FFDF3F4:				; CODE XREF: sub_6FFDF380+BEj
		movzx	eax, byte ptr [edi]
		xor	ecx, ecx
		mov	[ebx+15h], al
		lea	eax, [edi+1]
		xor	edi, edi

loc_6FFDF401:				; CODE XREF: sub_6FFDF380+97j
		movzx	esi, byte ptr [eax]
		add	eax, 1
		mov	edx, esi
		and	edx, 7Fh
		shl	edx, cl
		add	ecx, 7
		or	edi, edx
		mov	edx, esi
		test	dl, dl
		js	short loc_6FFDF401
		lea	edi, [eax+edi]
		mov	[ebx+10h], edi
		add	esp, 1Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_6FFDF427:				; CODE XREF: sub_6FFDF380+26j
		mov	[ebx+4], eax
		movzx	eax, byte ptr [edi]
		add	edi, 1
		cmp	al, 0FFh
		mov	[ebx+14h], al
		jnz	short loc_6FFDF3D4

loc_6FFDF437:				; CODE XREF: sub_6FFDF380+52j
		mov	dword ptr [ebx+0Ch], 0
		jmp	short loc_6FFDF3F4
sub_6FFDF380	endp


; =============== S U B	R O U T	I N E =======================================


sub_6FFDF440	proc near		; CODE XREF: sub_6FFEBACD+80p
					; sub_6FFEBACD+ADp ...

var_20		= dword	ptr -20h
arg_0		= dword	ptr  4

		push	ebp
		mov	ebp, edx
		push	edi
		xor	edx, edx
		push	esi
		mov	edi, eax
		push	ebx
		sub	esp, 1Ch
		mov	ebx, [esp+2Ch+arg_0]
		mov	[esp+2Ch+var_20], ecx
		xor	ecx, ecx
		not	ebx
		add	ebx, [eax+0Ch]
		lea	esi, [esi+0]

loc_6FFDF460:				; CODE XREF: sub_6FFDF440+53j
					; sub_6FFDF440+58j
		movzx	esi, byte ptr [ebx]
		add	ebx, 1
		mov	eax, esi
		and	eax, 7Fh
		shl	eax, cl
		or	edx, eax
		mov	eax, esi
		test	al, al
		js	short loc_6FFDF495
		test	edx, edx
		jz	short loc_6FFDF4A0
		mov	eax, edi
		call	sub_6FFDF2A0
		lea	ecx, [esp+2Ch+var_20]
		mov	edx, ebp
		call	sub_6FFDF310
		test	al, al
		jnz	short loc_6FFDF4B0
		xor	edx, edx
		xor	ecx, ecx
		jmp	short loc_6FFDF460
; ---------------------------------------------------------------------------

loc_6FFDF495:				; CODE XREF: sub_6FFDF440+33j
		add	ecx, 7
		jmp	short loc_6FFDF460
; ---------------------------------------------------------------------------
		align 10h

loc_6FFDF4A0:				; CODE XREF: sub_6FFDF440+37j
		add	esp, 1Ch
		xor	eax, eax
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6FFDF4B0:				; CODE XREF: sub_6FFDF440+4Dj
		add	esp, 1Ch
		mov	eax, 1
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
sub_6FFDF440	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6FFDF4C0	proc near		; CODE XREF: sub_6FFDF380+2Fp
					; sub_6FFEC1F0+F5p ...

var_1C		= dword	ptr -1Ch

		sub	esp, 1Ch
		cmp	al, 0FFh
		jz	short loc_6FFDF4F4
		and	eax, 70h
		cmp	eax, 20h
		jz	short loc_6FFDF520
		jle	short loc_6FFDF4F0
		cmp	eax, 40h
		jz	short loc_6FFDF507
		cmp	eax, 50h
		lea	esi, [esi+0]
		jz	short loc_6FFDF4F4
		cmp	eax, 30h
		jz	short loc_6FFDF530

loc_6FFDF4E7:				; CODE XREF: sub_6FFDF4C0+43j
		call	abort
; ---------------------------------------------------------------------------
		align 10h

loc_6FFDF4F0:				; CODE XREF: sub_6FFDF4C0+Fj
		test	eax, eax
		jnz	short loc_6FFDF500

loc_6FFDF4F4:				; CODE XREF: sub_6FFDF4C0+5j
					; sub_6FFDF4C0+20j ...
		xor	eax, eax
		add	esp, 1Ch
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6FFDF500:				; CODE XREF: sub_6FFDF4C0+32j
		cmp	eax, 10h
		jnz	short loc_6FFDF4E7
		jmp	short loc_6FFDF4F4
; ---------------------------------------------------------------------------

loc_6FFDF507:				; CODE XREF: sub_6FFDF4C0+14j
		mov	[esp+1Ch+var_1C], edx
		lea	esi, [esi+0]
		call	_Unwind_GetRegionStart
		add	esp, 1Ch
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6FFDF520:				; CODE XREF: sub_6FFDF4C0+Dj
		mov	[esp+1Ch+var_1C], edx
		call	_Unwind_GetTextRelBase
		add	esp, 1Ch
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6FFDF530:				; CODE XREF: sub_6FFDF4C0+25j
		mov	[esp+1Ch+var_1C], edx
		call	_Unwind_GetDataRelBase
		add	esp, 1Ch
		retn
sub_6FFDF4C0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6FFDF540	proc near		; DATA XREF: sub_6FFEC190+37o

var_1C		= dword	ptr -1Ch
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	ebx
		sub	esp, 18h
		mov	eax, [esp+1Ch+arg_4]
		cmp	[esp+1Ch+arg_0], 1
		lea	edx, [eax-40h]
		ja	short loc_6FFDF571
		mov	edx, [edx+14h]
		lea	ebx, [eax+20h]
		test	edx, edx
		jz	short loc_6FFDF564
		lea	ebx, [eax+20h]
		mov	[esp+1Ch+var_1C], ebx
		call	edx

loc_6FFDF564:				; CODE XREF: sub_6FFDF540+1Aj
		mov	[esp+1Ch+arg_0], ebx
		add	esp, 18h
		pop	ebx
		jmp	loc_6FFEBDF0
; ---------------------------------------------------------------------------

loc_6FFDF571:				; CODE XREF: sub_6FFDF540+10j
		mov	eax, [edx+1Ch]
		mov	[esp+1Ch+var_1C], eax
		call	sub_6FFDF790
sub_6FFDF540	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6FFDF580	proc near		; CODE XREF: sub_6FFDF2A0+48p
					; sub_6FFDF380+40p

var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4

		sub	esp, 2Ch
		mov	[esp+2Ch+var_10], ebx
		mov	ebx, eax
		mov	eax, ecx
		cmp	bl, 50h
		mov	[esp+2Ch+var_8], edi
		mov	edi, edx
		mov	edx, ebx
		mov	[esp+2Ch+var_C], esi
		mov	[esp+2Ch+var_4], ebp
		jz	loc_6FFDF6B0
		mov	[esp+2Ch+var_24], ecx
		movzx	ecx, bl
		mov	[esp+2Ch+var_28], ecx
		and	ecx, 0Fh
		cmp	ecx, 0Ch	; switch 13 cases
		jbe	short loc_6FFDF5C0

loc_6FFDF5B7:				; CODE XREF: sub_6FFDF580:loc_6FFDF5C0j
					; DATA XREF: .rdata:off_6FFF8400o
		call	abort		; jumptable 6FFDF5C0 default case
; ---------------------------------------------------------------------------
		align 10h

loc_6FFDF5C0:				; CODE XREF: sub_6FFDF580+35j
		jmp	ds:off_6FFF8400[ecx*4] ; switch	jump
; ---------------------------------------------------------------------------

loc_6FFDF5C7:				; CODE XREF: sub_6FFDF580:loc_6FFDF5C0j
					; DATA XREF: .rdata:off_6FFF8400o
		mov	ebx, [eax]	; jumptable 6FFDF5C0 cases 0,3,11
		add	eax, 4

loc_6FFDF5CC:				; CODE XREF: sub_6FFDF580+95j
					; sub_6FFDF580+C9j ...
		test	ebx, ebx
		xchg	ax, ax
		jz	short loc_6FFDF5F0
		mov	ecx, [esp+2Ch+var_28]
		and	ecx, 70h
		cmp	ecx, 10h
		jz	loc_6FFDF6C0

loc_6FFDF5E2:				; CODE XREF: sub_6FFDF580+144j
		add	ebx, edi
		test	dl, dl
		jns	short loc_6FFDF5F0
		mov	ebx, [ebx]
		lea	esi, [esi+0]

loc_6FFDF5F0:				; CODE XREF: sub_6FFDF580+50j
					; sub_6FFDF580+66j ...
		mov	edx, [esp+2Ch+arg_0]
		mov	[edx], ebx
		mov	ebx, [esp+2Ch+var_10]
		mov	esi, [esp+2Ch+var_C]
		mov	edi, [esp+2Ch+var_8]
		mov	ebp, [esp+2Ch+var_4]
		add	esp, 2Ch
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6FFDF610:				; CODE XREF: sub_6FFDF580:loc_6FFDF5C0j
					; DATA XREF: .rdata:off_6FFF8400o
		mov	ebx, [eax]	; jumptable 6FFDF5C0 cases 4,12
		add	eax, 8
		jmp	short loc_6FFDF5CC
; ---------------------------------------------------------------------------

loc_6FFDF617:				; CODE XREF: sub_6FFDF580:loc_6FFDF5C0j
					; DATA XREF: .rdata:off_6FFF8400o
		xor	ebx, ebx	; jumptable 6FFDF5C0 case 9
		xor	ecx, ecx
		mov	esi, ebx
		mov	ebp, edx
		mov	[esp+2Ch+var_20], edi

loc_6FFDF623:				; CODE XREF: sub_6FFDF580+BAj
		movzx	ebx, byte ptr [eax]
		add	eax, 1
		movzx	edi, bl
		mov	edx, edi
		and	edx, 7Fh
		shl	edx, cl
		add	ecx, 7
		or	esi, edx
		test	bl, bl
		js	short loc_6FFDF623
		cmp	ecx, 1Fh
		mov	ebx, esi
		mov	edx, ebp
		mov	esi, edi
		mov	edi, [esp+2Ch+var_20]
		ja	short loc_6FFDF5CC
		and	esi, 40h
		jz	loc_6FFDF5CC
		mov	esi, 0FFFFFFFFh
		shl	esi, cl
		or	ebx, esi
		jmp	loc_6FFDF5CC
; ---------------------------------------------------------------------------

loc_6FFDF662:				; CODE XREF: sub_6FFDF580:loc_6FFDF5C0j
					; DATA XREF: .rdata:off_6FFF8400o
		mov	ebp, edi	; jumptable 6FFDF5C0 case 1
		xor	ebx, ebx
		xor	ecx, ecx
		mov	edi, edx
		lea	esi, [esi+0]

loc_6FFDF670:				; CODE XREF: sub_6FFDF580+106j
		movzx	edx, byte ptr [eax]
		mov	esi, 7Fh
		add	eax, 1
		and	esi, edx
		shl	esi, cl
		add	ecx, 7
		or	ebx, esi
		test	dl, dl
		js	short loc_6FFDF670
		mov	edx, edi
		mov	edi, ebp
		jmp	loc_6FFDF5CC
; ---------------------------------------------------------------------------

loc_6FFDF691:				; CODE XREF: sub_6FFDF580:loc_6FFDF5C0j
					; DATA XREF: .rdata:off_6FFF8400o
		movsx	ebx, word ptr [eax] ; jumptable	6FFDF5C0 case 10
		add	eax, 2
		jmp	loc_6FFDF5CC
; ---------------------------------------------------------------------------
		align 10h

loc_6FFDF6A0:				; CODE XREF: sub_6FFDF580:loc_6FFDF5C0j
					; DATA XREF: .rdata:off_6FFF8400o
		movzx	ebx, word ptr [eax] ; jumptable	6FFDF5C0 case 2
		add	eax, 2
		jmp	loc_6FFDF5CC
; ---------------------------------------------------------------------------
		align 10h

loc_6FFDF6B0:				; CODE XREF: sub_6FFDF580+1Ej
		add	eax, 3
		and	eax, 0FFFFFFFCh
		mov	ebx, [eax]
		add	eax, 4
		jmp	loc_6FFDF5F0
; ---------------------------------------------------------------------------

loc_6FFDF6C0:				; CODE XREF: sub_6FFDF580+5Cj
		mov	edi, [esp+2Ch+var_24]
		jmp	loc_6FFDF5E2
sub_6FFDF580	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_6FFDF6D0	proc near		; CODE XREF: sub_6FFD014F+153p
					; sub_6FFD295B+157p

var_3C		= byte ptr -3Ch
var_38		= dword	ptr -38h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_8		= byte ptr -8
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 58h
		lea	eax, [ebp+var_8]
		mov	[ebp+var_1C], eax
		lea	eax, [ebp+var_3C]
		mov	[esp], eax
		mov	[ebp+var_24], offset sub_6FFEC1F0
		mov	[ebp+var_20], offset dword_6FFECDDC
		mov	[ebp+var_18], offset sub_6FFDF75A
		mov	[ebp+var_14], esp
		call	_Unwind_SjLj_Register
		mov	edx, [ebp+arg_0]
		mov	eax, [edx+8]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jz	short loc_6FFDF742

loc_6FFDF70F:				; CODE XREF: sub_6FFDF6D0+88j
		mov	edx, [ebp+arg_0]
		mov	eax, [edx+4]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jnz	short loc_6FFDF735
		mov	edx, [ebp+arg_0]
		mov	eax, [edx+4]
		mov	[ebp+var_38], 0FFFFFFFFh
		mov	[esp], eax
		call	ds:_ZN7QString4freeEPNS_4DataE

loc_6FFDF735:				; CODE XREF: sub_6FFDF6D0+4Dj
		lea	eax, [ebp+var_3C]
		mov	[esp], eax
		call	_Unwind_SjLj_Unregister
		leave
		retn
; ---------------------------------------------------------------------------

loc_6FFDF742:				; CODE XREF: sub_6FFDF6D0+3Dj
		mov	edx, [ebp+arg_0]
		mov	eax, [edx+8]
		mov	[ebp+var_38], 1
		mov	[esp], eax
		call	ds:_ZN7QString4freeEPNS_4DataE
		jmp	short loc_6FFDF70F
sub_6FFDF6D0	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn

sub_6FFDF75A	proc near		; DATA XREF: sub_6FFDF6D0+20o
		add	ebp, 8
		mov	eax, [ebp-34h]
		mov	dword ptr [ebp-38h], 0
		mov	[ebp-40h], eax
		mov	eax, [ebp+8]
		add	eax, 4
		mov	[esp+0], eax
		call	sub_6FFEA140
		mov	edx, [ebp-40h]
		mov	dword ptr [ebp-38h], 0FFFFFFFFh
		mov	[esp+0], edx
		call	_Unwind_SjLj_Resume
sub_6FFDF75A	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn bp-based	frame

sub_6FFDF790	proc near		; CODE XREF: sub_6FFDF540+37p
					; sub_6FFEAE40+Bp ...

var_3C		= byte ptr -3Ch
var_38		= dword	ptr -38h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_8		= byte ptr -8
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 58h
		lea	eax, [ebp+var_8]
		mov	[ebp+var_1C], eax
		lea	eax, [ebp+var_3C]
		mov	[ebp+var_24], offset sub_6FFEC1F0
		mov	[ebp+var_20], offset dword_6FFED49C
		mov	[ebp+var_18], offset sub_6FFDF7CE
		mov	[ebp+var_14], esp
		mov	[esp], eax
		call	_Unwind_SjLj_Register
		mov	[ebp+var_38], 2
		call	[ebp+arg_0]
		call	abort
sub_6FFDF790	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn

sub_6FFDF7CE	proc near		; DATA XREF: sub_6FFDF790+1Do
		add	ebp, 8
		mov	eax, [ebp-34h]
		cmp	dword ptr [ebp-38h], 1
		mov	[ebp-40h], eax
		jz	short loc_6FFDF7FB
		mov	dword ptr [ebp-38h], 0
		call	sub_6FFEBBF0
		mov	eax, [ebp-40h]
		mov	dword ptr [ebp-38h], 0FFFFFFFFh
		mov	[esp+0], eax
		call	_Unwind_SjLj_Resume
; ---------------------------------------------------------------------------

loc_6FFDF7FB:				; CODE XREF: sub_6FFDF7CE+Dj
		mov	eax, [ebp-40h]
		mov	[esp+0], eax
		call	sub_6FFEB920
		mov	dword ptr [ebp-38h], 1
		call	abort
sub_6FFDF7CE	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn

sub_6FFDF820	proc near		; CODE XREF: sub_6FFEADE0+Bp
					; sub_6FFEBA60+68p

arg_0		= dword	ptr  4

		sub	esp, 0Ch
		call	[esp+0Ch+arg_0]
		call	sub_6FFEAE40
sub_6FFDF820	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6FFDF830	proc near		; DATA XREF: .rdata:6FFF9EACo

arg_0		= dword	ptr  4

		sub	esp, 0Ch
		mov	eax, [esp+0Ch+arg_0]
		mov	dword ptr [eax], offset	off_6FFF9EA8
		add	esp, 0Ch
		jmp	sub_6FFEAE50
sub_6FFDF830	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6FFDF850	proc near		; DATA XREF: .rdata:off_6FFF9EA8o

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		mov	dword ptr [eax], offset	off_6FFF9EA8
		retn
sub_6FFDF850	endp

; ---------------------------------------------------------------------------
		align 10h
		mov	eax, [esp+4]
		mov	dword ptr [eax], offset	off_6FFF9EA8
		retn
; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6FFDF870	proc near		; DATA XREF: .rdata:6FFF9ECCo

var_1C		= dword	ptr -1Ch
arg_0		= dword	ptr  4

		push	ebx
		sub	esp, 18h
		mov	ebx, [esp+1Ch+arg_0]
		mov	dword ptr [ebx], offset	off_6FFF9EC8
		mov	[esp+1Ch+var_1C], ebx
		call	sub_6FFEADD0
		mov	[esp+1Ch+arg_0], ebx
		add	esp, 18h
		pop	ebx
		jmp	sub_6FFEAE50
sub_6FFDF870	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6FFDF8A0	proc near		; DATA XREF: .rdata:off_6FFF9EC8o

arg_0		= dword	ptr  4

		sub	esp, 0Ch
		mov	eax, [esp+0Ch+arg_0]
		mov	dword ptr [eax], offset	off_6FFF9EC8
		add	esp, 0Ch
		jmp	sub_6FFEADD0
sub_6FFDF8A0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6FFDF8C0	proc near		; CODE XREF: sub_6FFDF920+11p
					; sub_6FFDF950+10j ...

arg_0		= dword	ptr  4

		sub	esp, 0Ch
		mov	eax, [esp+0Ch+arg_0]
		mov	dword ptr [eax], offset	off_6FFF9EC8
		add	esp, 0Ch
		jmp	sub_6FFEADD0
sub_6FFDF8C0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6FFDF8E0	proc near		; DATA XREF: .rdata:6FFF9F0Co

arg_0		= dword	ptr  4

		sub	esp, 0Ch
		mov	eax, [esp+0Ch+arg_0]
		mov	dword ptr [eax], offset	off_6FFF9F08
		add	esp, 0Ch
		jmp	sub_6FFEAE50
sub_6FFDF8E0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6FFDF900	proc near		; DATA XREF: .rdata:off_6FFF9F08o

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		mov	dword ptr [eax], offset	off_6FFF9F08
		retn
sub_6FFDF900	endp

; ---------------------------------------------------------------------------
		align 10h
		mov	eax, [esp+4]
		mov	dword ptr [eax], offset	off_6FFF9F08
		retn
; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6FFDF920	proc near		; DATA XREF: .rdata:6FFF9F2Co

var_1C		= dword	ptr -1Ch
arg_0		= dword	ptr  4

		push	ebx
		sub	esp, 18h
		mov	ebx, [esp+1Ch+arg_0]
		mov	dword ptr [ebx], offset	off_6FFF9F28
		mov	[esp+1Ch+var_1C], ebx
		call	sub_6FFDF8C0
		mov	[esp+1Ch+arg_0], ebx
		add	esp, 18h
		pop	ebx
		jmp	sub_6FFEAE50
sub_6FFDF920	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6FFDF950	proc near		; DATA XREF: .rdata:off_6FFF9F28o

arg_0		= dword	ptr  4

		sub	esp, 0Ch
		mov	eax, [esp+0Ch+arg_0]
		mov	dword ptr [eax], offset	off_6FFF9F28
		add	esp, 0Ch
		jmp	sub_6FFDF8C0
sub_6FFDF950	endp

; ---------------------------------------------------------------------------
		align 10h
		sub	esp, 0Ch
		mov	eax, [esp+10h]
		mov	dword ptr [eax], offset	off_6FFF9F28
		add	esp, 0Ch
		jmp	sub_6FFDF8C0
; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6FFDF990	proc near		; CODE XREF: _ZN16DBusMenuExporter15doUpdateActionsEv+164Fp
					; _ZN16DBusMenuExporter15doUpdateActionsEv+16A7p ...

var_2C		= dword	ptr -2Ch
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4

		sub	esp, 2Ch
		mov	edx, [esp+2Ch+arg_0]
		mov	[esp+2Ch+var_10], ebx
		mov	[esp+2Ch+var_C], esi
		mov	[esp+2Ch+var_8], edi
		mov	[esp+2Ch+var_4], ebp
		mov	eax, [edx]
		lock dec dword ptr [eax]
		setnz	cl
		test	cl, cl
		jz	short loc_6FFDF9C7
		mov	ebx, [esp+2Ch+var_10]
		mov	esi, [esp+2Ch+var_C]
		mov	edi, [esp+2Ch+var_8]
		mov	ebp, [esp+2Ch+var_4]
		add	esp, 2Ch
		retn
; ---------------------------------------------------------------------------

loc_6FFDF9C7:				; CODE XREF: sub_6FFDF990+21j
		mov	edi, [edx]
		mov	edx, [edi+0Ch]
		lea	eax, [edi+14h]
		lea	ebx, [eax+edx*4]
		mov	edx, [edi+8]
		lea	esi, [eax+edx*4]
		cmp	ebx, esi
		jz	short loc_6FFDF9FC
		mov	ebp, ds:_ZN7QString4freeEPNS_4DataE

loc_6FFDF9E2:				; CODE XREF: sub_6FFDF990+6Aj
		sub	ebx, 4
		mov	eax, [ebx]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jnz	short loc_6FFDF9F8
		mov	eax, [ebx]
		mov	[esp+2Ch+var_2C], eax
		call	ebp ; _ZN7QString4freeEPNS_4DataE

loc_6FFDF9F8:				; CODE XREF: sub_6FFDF990+5Fj
		cmp	esi, ebx
		jnz	short loc_6FFDF9E2

loc_6FFDF9FC:				; CODE XREF: sub_6FFDF990+4Aj
		mov	eax, ds:_Z5qFreePv
		mov	[esp+2Ch+arg_0], edi
		mov	ebx, [esp+2Ch+var_10]
		mov	esi, [esp+2Ch+var_C]
		mov	edi, [esp+2Ch+var_8]
		mov	ebp, [esp+2Ch+var_4]
		add	esp, 2Ch
		jmp	eax
sub_6FFDF990	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6FFDFA20	proc near		; DATA XREF: .rdata:6FFF9E00o

var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		sub	esp, 1Ch
		mov	eax, [esp+1Ch+arg_8]
		mov	edx, [esp+1Ch+arg_0]
		movzx	eax, word ptr [eax+8]
		sub	eax, 71h
		cmp	eax, 2
		ja	short loc_6FFDFA4C
		mov	eax, [esp+1Ch+arg_4]
		mov	byte ptr [edx+8], 1
		mov	[esp+1Ch+var_18], edx
		mov	[esp+1Ch+var_1C], eax
		call	ds:_ZN7QObject17removeEventFilterEPS_

loc_6FFDFA4C:				; CODE XREF: sub_6FFDFA20+15j
		xor	eax, eax
		add	esp, 1Ch
		retn
sub_6FFDFA20	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6FFDFA60	proc near		; DATA XREF: .rdata:6FFF9DF8o

var_1C		= dword	ptr -1Ch
arg_0		= dword	ptr  4

		push	ebx
		sub	esp, 18h
		mov	ebx, [esp+1Ch+arg_0]
		mov	dword ptr [ebx], offset	off_6FFF9DE8
		mov	[esp+1Ch+var_1C], ebx
		call	ds:_ZN7QObjectD2Ev
		mov	[esp+1Ch+arg_0], ebx
		add	esp, 18h
		pop	ebx
		jmp	sub_6FFEAE50
sub_6FFDFA60	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6FFDFA90	proc near		; CODE XREF: sub_6FFCA42F+19Bp
					; DATA XREF: .rdata:6FFF9DF4o

arg_0		= dword	ptr  4

		sub	esp, 0Ch
		mov	eax, [esp+0Ch+arg_0]
		mov	dword ptr [eax], offset	off_6FFF9DE8
		mov	eax, ds:_ZN7QObjectD2Ev
		add	esp, 0Ch
		jmp	eax
sub_6FFDFA90	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_6FFDFAB0	proc near		; CODE XREF: _ZN16DBusMenuImporter21slotGetLayoutFinishedEP23QDBusPendingCallWatcher+DC9p
					; _ZN16DBusMenuImporter21slotGetLayoutFinishedEP23QDBusPendingCallWatcher+E01p

var_40		= dword	ptr -40h
var_3C		= byte ptr -3Ch
var_38		= dword	ptr -38h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_8		= byte ptr -8
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 58h
		lea	eax, [ebp+var_8]
		mov	[ebp+var_1C], eax
		lea	eax, [ebp+var_3C]
		mov	[ebp+var_24], offset sub_6FFEC1F0
		mov	[ebp+var_20], offset dword_6FFECFC0
		mov	[ebp+var_18], offset sub_6FFDFB7B
		mov	[ebp+var_14], esp
		mov	[esp], eax
		call	_Unwind_SjLj_Register
		mov	edx, [ebp+arg_4]
		mov	eax, [edx]
		mov	edx, [ebp+arg_0]
		mov	[edx], eax
		add	edx, 4
		mov	[ebp+var_40], edx
		mov	edx, [ebp+arg_4]
		mov	eax, [edx+4]
		mov	edx, [ebp+arg_0]
		mov	[edx+4], eax
		lock inc dword ptr [eax+34h]
		setnz	dl
		mov	edx, [ebp+arg_0]
		mov	eax, [edx+4]
		test	byte ptr [eax+44h], 2
		jnz	short loc_6FFDFB28
		mov	eax, [eax+34h]
		cmp	eax, 1
		jz	short loc_6FFDFB28
		mov	eax, [ebp+var_40]
		mov	[esp], eax
		mov	[ebp+var_38], 0FFFFFFFFh
		call	sub_6FFE3B80

loc_6FFDFB28:				; CODE XREF: sub_6FFDFAB0+5Cj
					; sub_6FFDFAB0+64j
		mov	edx, [ebp+arg_4]
		mov	eax, [edx+8]
		mov	edx, [ebp+arg_0]
		mov	[edx+8], eax
		lock inc dword ptr [eax]
		setnz	dl
		mov	edx, [ebp+arg_0]
		mov	eax, [edx+8]
		test	byte ptr [eax+10h], 1
		jz	short loc_6FFDFB53
		lea	eax, [ebp+var_3C]
		mov	[esp], eax
		call	_Unwind_SjLj_Unregister
		leave
		retn
; ---------------------------------------------------------------------------

loc_6FFDFB53:				; CODE XREF: sub_6FFDFAB0+94j
		mov	eax, [eax+4]
		mov	[esp+4], eax
		mov	eax, edx
		add	eax, 8
		mov	[esp], eax
		mov	[ebp+var_38], 1
		call	sub_6FFE77F0
		lea	eax, [ebp+var_3C]
		mov	[esp], eax
		call	_Unwind_SjLj_Unregister
		leave
		retn
sub_6FFDFAB0	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn

sub_6FFDFB7B	proc near		; DATA XREF: sub_6FFDFAB0+1Do
		add	ebp, 8
		mov	eax, [ebp-34h]
		mov	edx, [ebp-40h]
		mov	[ebp-44h], eax
		mov	[esp+0], edx
		mov	dword ptr [ebp-38h], 0
		call	sub_6FFE4290
		mov	eax, [ebp-44h]
		mov	[esp+0], eax
		mov	dword ptr [ebp-38h], 0FFFFFFFFh
		call	_Unwind_SjLj_Resume
sub_6FFDFB7B	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_6FFDFBB0	proc near		; CODE XREF: sub_6FFC78B0+63Ap
					; sub_6FFC7F61+8Bp ...

var_88		= dword	ptr -88h
var_84		= dword	ptr -84h
var_80		= dword	ptr -80h
var_7C		= dword	ptr -7Ch
var_78		= dword	ptr -78h
var_74		= dword	ptr -74h
var_70		= dword	ptr -70h
var_6C		= dword	ptr -6Ch
var_68		= dword	ptr -68h
var_64		= dword	ptr -64h
var_60		= dword	ptr -60h
var_5C		= dword	ptr -5Ch
var_58		= dword	ptr -58h
var_54		= dword	ptr -54h
var_50		= dword	ptr -50h
var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_3C		= byte ptr -3Ch
var_38		= dword	ptr -38h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_8		= byte ptr -8
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0A8h
		lea	eax, [ebp+var_8]
		mov	[ebp+var_1C], eax
		lea	eax, [ebp+var_3C]
		mov	[ebp+var_24], offset sub_6FFEC1F0
		mov	[ebp+var_20], offset dword_6FFECA1C
		mov	[ebp+var_18], offset sub_6FFDFEF7
		mov	[ebp+var_14], esp
		mov	[esp], eax
		call	_Unwind_SjLj_Register
		mov	edx, [ebp+arg_0]
		mov	eax, [edx+8]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jz	short loc_6FFDFC18

loc_6FFDFBF2:				; CODE XREF: sub_6FFDFBB0+2B6j
		mov	ecx, [ebp+arg_0]
		mov	eax, [ecx+4]
		test	eax, eax
		jz	short loc_6FFDFC0B
		lock dec dword ptr [eax+34h]
		setnz	dl
		test	dl, dl
		jz	loc_6FFDFE70

loc_6FFDFC0B:				; CODE XREF: sub_6FFDFBB0+4Aj
		lea	eax, [ebp+var_3C]
		mov	[esp], eax
		call	_Unwind_SjLj_Unregister
		leave
		retn
; ---------------------------------------------------------------------------

loc_6FFDFC18:				; CODE XREF: sub_6FFDFBB0+40j
		mov	ecx, [ebp+arg_0]
		mov	ecx, [ecx+8]
		mov	edx, [ecx+0Ch]
		mov	eax, ecx
		add	eax, 14h
		mov	[ebp+var_88], ecx
		lea	edx, [eax+edx*4]
		mov	[ebp+var_64], edx
		mov	edx, [ecx+8]
		lea	edx, [eax+edx*4]
		cmp	[ebp+var_64], edx
		mov	[ebp+var_84], edx
		jnz	short loc_6FFDFC7B
		jmp	loc_6FFDFE50
; ---------------------------------------------------------------------------

loc_6FFDFC48:				; CODE XREF: sub_6FFDFBB0+E6j
					; sub_6FFDFBB0+213j
		mov	ecx, [ebp+var_60]
		mov	eax, [ecx+4]
		test	eax, eax
		jz	short loc_6FFDFC61
		lock dec dword ptr [eax+34h]
		setnz	dl
		test	dl, dl
		jz	loc_6FFDFDC8

loc_6FFDFC61:				; CODE XREF: sub_6FFDFBB0+A0j
					; sub_6FFDFBB0+29Bj
		mov	edx, [ebp+var_60]
		mov	[esp], edx
		call	sub_6FFEAE50

loc_6FFDFC6C:				; CODE XREF: sub_6FFDFBB0+D9j
		mov	ecx, [ebp+var_64]
		cmp	[ebp+var_84], ecx
		jz	loc_6FFDFE50

loc_6FFDFC7B:				; CODE XREF: sub_6FFDFBB0+91j
		sub	[ebp+var_64], 4
		mov	eax, [ebp+var_64]
		mov	eax, [eax]
		test	eax, eax
		mov	[ebp+var_60], eax
		jz	short loc_6FFDFC6C
		mov	eax, [eax+8]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jnz	short loc_6FFDFC48
		mov	ecx, [ebp+var_60]
		mov	ecx, [ecx+8]
		mov	edx, [ecx+0Ch]
		mov	eax, ecx
		add	eax, 14h
		mov	[ebp+var_7C], ecx
		lea	edx, [eax+edx*4]
		mov	[ebp+var_50], edx
		mov	edx, [ecx+8]
		lea	edx, [eax+edx*4]
		cmp	[ebp+var_50], edx
		mov	[ebp+var_70], edx
		jnz	short loc_6FFDFCF8
		jmp	loc_6FFDFDB0
; ---------------------------------------------------------------------------

loc_6FFDFCC2:				; CODE XREF: sub_6FFDFBB0+163j
					; sub_6FFDFBB0+1D5j
		mov	edx, [ebp+var_4C]
		mov	ecx, [ebp+var_4C]
		mov	eax, [edx+4]
		add	ecx, 4
		test	eax, eax
		jz	short loc_6FFDFCE1
		lock dec dword ptr [eax+34h]
		setnz	dl
		test	dl, dl
		jz	loc_6FFDFD90

loc_6FFDFCE1:				; CODE XREF: sub_6FFDFBB0+120j
					; sub_6FFDFBB0+1F9j
		mov	ecx, [ebp+var_4C]
		mov	[esp], ecx
		call	sub_6FFEAE50

loc_6FFDFCEC:				; CODE XREF: sub_6FFDFBB0+156j
		mov	eax, [ebp+var_50]
		cmp	[ebp+var_70], eax
		jz	loc_6FFDFDB0

loc_6FFDFCF8:				; CODE XREF: sub_6FFDFBB0+10Bj
		sub	[ebp+var_50], 4
		mov	eax, [ebp+var_50]
		mov	eax, [eax]
		test	eax, eax
		mov	[ebp+var_4C], eax
		jz	short loc_6FFDFCEC
		mov	eax, [eax+8]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jnz	short loc_6FFDFCC2
		mov	ecx, [ebp+var_4C]
		mov	ecx, [ecx+8]
		mov	edx, [ecx+0Ch]
		mov	eax, ecx
		add	eax, 14h
		mov	[ebp+var_68], ecx
		lea	edx, [eax+edx*4]
		mov	[ebp+var_44], edx
		mov	edx, [ecx+8]
		lea	edx, [eax+edx*4]
		cmp	[ebp+var_44], edx
		mov	[ebp+var_54], edx
		jz	short loc_6FFDFD72
		lea	esi, [esi+0]

loc_6FFDFD40:				; CODE XREF: sub_6FFDFBB0+1C0j
		sub	[ebp+var_44], 4
		mov	eax, [ebp+var_44]
		mov	eax, [eax]
		test	eax, eax
		mov	[ebp+var_48], eax
		jz	short loc_6FFDFD6A
		mov	[esp], eax
		mov	[ebp+var_38], 1
		call	sub_6FFDFBB0
		mov	edx, [ebp+var_48]
		mov	[esp], edx
		call	sub_6FFEAE50

loc_6FFDFD6A:				; CODE XREF: sub_6FFDFBB0+19Ej
		mov	ecx, [ebp+var_44]
		cmp	[ebp+var_54], ecx
		jnz	short loc_6FFDFD40

loc_6FFDFD72:				; CODE XREF: sub_6FFDFBB0+188j
		mov	eax, [ebp+var_68]
		mov	[esp], eax
		mov	[ebp+var_38], 1
		call	ds:_Z5qFreePv
		jmp	loc_6FFDFCC2
; ---------------------------------------------------------------------------
		align 10h

loc_6FFDFD90:				; CODE XREF: sub_6FFDFBB0+12Bj
		mov	edx, [ebp+var_4C]
		mov	eax, [edx+4]
		mov	[esp], ecx
		mov	[esp+4], eax
		mov	[ebp+var_38], 2
		call	sub_6FFE4220
		jmp	loc_6FFDFCE1
; ---------------------------------------------------------------------------
		align 10h

loc_6FFDFDB0:				; CODE XREF: sub_6FFDFBB0+10Dj
					; sub_6FFDFBB0+142j
		mov	edx, [ebp+var_7C]
		mov	[esp], edx
		mov	[ebp+var_38], 2
		call	ds:_Z5qFreePv
		jmp	loc_6FFDFC48
; ---------------------------------------------------------------------------

loc_6FFDFDC8:				; CODE XREF: sub_6FFDFBB0+ABj
		mov	eax, [ecx+4]
		mov	edx, eax
		mov	[ebp+var_6C], eax
		mov	eax, [eax+4]
		cmp	edx, eax
		jnz	short loc_6FFDFE00
		jmp	short loc_6FFDFE30
; ---------------------------------------------------------------------------
		align 10h

loc_6FFDFDE0:				; CODE XREF: sub_6FFDFBB0+267j
					; sub_6FFDFBB0+27Cj
		mov	eax, [ebp+var_5C]
		add	eax, 8
		mov	[esp], eax
		mov	[ebp+var_38], 3
		call	ds:_ZN8QVariantD1Ev
		mov	ecx, [ebp+var_58]
		cmp	[ebp+var_6C], ecx
		jz	short loc_6FFDFE30
		mov	eax, ecx

loc_6FFDFE00:				; CODE XREF: sub_6FFDFBB0+225j
		mov	ecx, [eax+4]
		lea	edx, [eax-1Ch]
		mov	[ebp+var_5C], edx
		mov	edx, [eax-1Ch]
		mov	[ebp+var_58], ecx
		lock dec dword ptr [edx]
		setnz	cl
		test	cl, cl
		jnz	short loc_6FFDFDE0
		mov	eax, [eax-1Ch]
		mov	[esp], eax
		mov	[ebp+var_38], 3
		call	ds:_ZN7QString4freeEPNS_4DataE
		jmp	short loc_6FFDFDE0
; ---------------------------------------------------------------------------
		align 10h

loc_6FFDFE30:				; CODE XREF: sub_6FFDFBB0+227j
					; sub_6FFDFBB0+24Cj
		mov	dword ptr [esp+4], 1Ch
		mov	eax, [ebp+var_6C]
		mov	[esp], eax
		mov	[ebp+var_38], 3
		call	ds:_ZN8QMapData16continueFreeDataEi
		jmp	loc_6FFDFC61
; ---------------------------------------------------------------------------

loc_6FFDFE50:				; CODE XREF: sub_6FFDFBB0+93j
					; sub_6FFDFBB0+C5j
		mov	eax, [ebp+var_88]
		mov	[esp], eax
		mov	[ebp+var_38], 3
		call	ds:_Z5qFreePv
		jmp	loc_6FFDFBF2
; ---------------------------------------------------------------------------
		align 10h

loc_6FFDFE70:				; CODE XREF: sub_6FFDFBB0+55j
		mov	eax, [ecx+4]
		mov	edx, eax
		mov	[ebp+var_80], eax
		mov	eax, [eax+4]
		cmp	edx, eax
		jz	short loc_6FFDFECF
		mov	ecx, ds:_ZN8QVariantD1Ev
		mov	[ebp+var_40], ecx

loc_6FFDFE88:				; CODE XREF: sub_6FFDFBB0+31Dj
		mov	edx, [eax+4]
		lea	ecx, [eax-1Ch]
		mov	[ebp+var_78], ecx
		mov	[ebp+var_74], edx
		mov	edx, [eax-1Ch]
		lock dec dword ptr [edx]
		setnz	cl
		test	cl, cl
		jnz	short loc_6FFDFEB4
		mov	eax, [eax-1Ch]
		mov	[esp], eax
		mov	[ebp+var_38], 0FFFFFFFFh
		call	ds:_ZN7QString4freeEPNS_4DataE

loc_6FFDFEB4:				; CODE XREF: sub_6FFDFBB0+2EFj
		mov	eax, [ebp+var_78]
		add	eax, 8
		mov	[esp], eax
		mov	[ebp+var_38], 0FFFFFFFFh
		call	[ebp+var_40]
		mov	eax, [ebp+var_74]
		cmp	[ebp+var_80], eax
		jnz	short loc_6FFDFE88

loc_6FFDFECF:				; CODE XREF: sub_6FFDFBB0+2CDj
		mov	dword ptr [esp+4], 1Ch
		mov	edx, [ebp+var_80]
		mov	[esp], edx
		mov	[ebp+var_38], 0FFFFFFFFh
		call	ds:_ZN8QMapData16continueFreeDataEi
		lea	eax, [ebp+var_3C]
		mov	[esp], eax
		call	_Unwind_SjLj_Unregister
		leave
		retn
sub_6FFDFBB0	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn

sub_6FFDFEF7	proc near		; DATA XREF: sub_6FFDFBB0+20o
		add	ebp, 8
		mov	eax, [ebp-38h]
		mov	edx, [ebp-34h]
		cmp	eax, 1
		mov	[ebp-8Ch], edx
		jz	short loc_6FFDFF25
		cmp	eax, 2
		jz	short loc_6FFDFF3A
		mov	eax, [ebp-4Ch]
		add	eax, 4
		mov	[esp+0], eax
		mov	dword ptr [ebp-38h], 0
		call	sub_6FFE4290

loc_6FFDFF25:				; CODE XREF: sub_6FFDFEF7+12j
		mov	eax, [ebp-60h]
		add	eax, 4
		mov	[esp+0], eax
		mov	dword ptr [ebp-38h], 0
		call	sub_6FFE4290

loc_6FFDFF3A:				; CODE XREF: sub_6FFDFEF7+17j
		mov	eax, [ebp+8]
		add	eax, 4
		mov	[esp+0], eax
		mov	dword ptr [ebp-38h], 0
		call	sub_6FFE4290
		mov	edx, [ebp-8Ch]
		mov	[esp+0], edx
		mov	dword ptr [ebp-38h], 0FFFFFFFFh
		call	_Unwind_SjLj_Resume
sub_6FFDFEF7	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_6FFDFF70	proc near		; DATA XREF: .rdata:6FFF9E38o

var_3C		= byte ptr -3Ch
var_38		= dword	ptr -38h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_8		= byte ptr -8
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 58h
		lea	eax, [ebp+var_8]
		mov	[ebp+var_1C], eax
		lea	eax, [ebp+var_3C]
		mov	[esp], eax
		mov	[ebp+var_24], offset sub_6FFEC1F0
		mov	[ebp+var_20], offset dword_6FFECB5C
		mov	[ebp+var_18], offset sub_6FFDFFF8
		mov	[ebp+var_14], esp
		call	_Unwind_SjLj_Register
		mov	edx, [ebp+arg_0]
		mov	dword ptr [edx], offset	off_6FFF9E28
		mov	eax, [edx+0Ch]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jz	short loc_6FFDFFE0

loc_6FFDFFB5:				; CODE XREF: sub_6FFDFF70+86j
		mov	edx, [ebp+arg_0]
		mov	[ebp+var_38], 0FFFFFFFFh
		mov	[esp], edx
		call	ds:_ZN7QObjectD2Ev
		mov	eax, [ebp+arg_0]
		mov	[esp], eax
		call	sub_6FFEAE50
		lea	eax, [ebp+var_3C]
		mov	[esp], eax
		call	_Unwind_SjLj_Unregister
		leave
		retn
; ---------------------------------------------------------------------------

loc_6FFDFFE0:				; CODE XREF: sub_6FFDFF70+43j
		mov	edx, [ebp+arg_0]
		mov	eax, [edx+0Ch]
		mov	[ebp+var_38], 1
		mov	[esp], eax
		call	ds:_ZN7QString4freeEPNS_4DataE
		jmp	short loc_6FFDFFB5
sub_6FFDFF70	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn

sub_6FFDFFF8	proc near		; DATA XREF: sub_6FFDFF70+20o
		add	ebp, 8
		mov	eax, [ebp-34h]
		mov	edx, [ebp+8]
		mov	dword ptr [ebp-38h], 0
		mov	[ebp-40h], eax
		mov	[esp+0], edx
		call	ds:_ZN7QObjectD2Ev
		mov	eax, [ebp-40h]
		mov	dword ptr [ebp-38h], 0FFFFFFFFh
		mov	[esp+0], eax
		call	_Unwind_SjLj_Resume
sub_6FFDFFF8	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_6FFE0030	proc near		; DATA XREF: .rdata:6FFF9E34o

var_3C		= byte ptr -3Ch
var_38		= dword	ptr -38h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_8		= byte ptr -8
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 58h
		lea	eax, [ebp+var_8]
		mov	[ebp+var_1C], eax
		lea	eax, [ebp+var_3C]
		mov	[esp], eax
		mov	[ebp+var_24], offset sub_6FFEC1F0
		mov	[ebp+var_20], offset word_6FFECB62
		mov	[ebp+var_18], offset sub_6FFE00AD
		mov	[ebp+var_14], esp
		call	_Unwind_SjLj_Register
		mov	edx, [ebp+arg_0]
		mov	dword ptr [edx], offset	off_6FFF9E28
		mov	eax, [edx+0Ch]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jz	short loc_6FFE0095

loc_6FFE0075:				; CODE XREF: sub_6FFE0030+7Bj
		mov	edx, [ebp+arg_0]
		mov	[ebp+var_38], 0FFFFFFFFh
		mov	[esp], edx
		call	ds:_ZN7QObjectD2Ev
		lea	eax, [ebp+var_3C]
		mov	[esp], eax
		call	_Unwind_SjLj_Unregister
		leave
		retn
; ---------------------------------------------------------------------------

loc_6FFE0095:				; CODE XREF: sub_6FFE0030+43j
		mov	edx, [ebp+arg_0]
		mov	eax, [edx+0Ch]
		mov	[ebp+var_38], 1
		mov	[esp], eax
		call	ds:_ZN7QString4freeEPNS_4DataE
		jmp	short loc_6FFE0075
sub_6FFE0030	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn

sub_6FFE00AD	proc near		; DATA XREF: sub_6FFE0030+20o
		add	ebp, 8
		mov	eax, [ebp-34h]
		mov	edx, [ebp+8]
		mov	dword ptr [ebp-38h], 0
		mov	[ebp-40h], eax
		mov	[esp+0], edx
		call	ds:_ZN7QObjectD2Ev
		mov	eax, [ebp-40h]
		mov	dword ptr [ebp-38h], 0FFFFFFFFh
		mov	[esp+0], eax
		call	_Unwind_SjLj_Resume
sub_6FFE00AD	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_6FFE00E0	proc near		; CODE XREF: _ZN16DBusMenuExporterD0Ev+49p
					; _ZN16DBusMenuExporterD1Ev+49p ...

var_3C		= byte ptr -3Ch
var_38		= dword	ptr -38h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_8		= byte ptr -8
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 68h
		lea	eax, [ebp+var_8]
		mov	[ebp+var_1C], eax
		lea	eax, [ebp+var_3C]
		mov	[esp], eax
		mov	[ebp+var_24], offset sub_6FFEC1F0
		mov	[ebp+var_20], offset word_6FFEC882
		mov	[ebp+var_18], offset sub_6FFE0263
		mov	[ebp+var_14], esp
		call	_Unwind_SjLj_Register
		mov	edx, [ebp+arg_0]
		mov	eax, [edx+30h]
		lock dec dword ptr [eax+8]
		setnz	dl
		test	dl, dl
		jz	loc_6FFE01F3

loc_6FFE0124:				; CODE XREF: sub_6FFE00E0+131j
		mov	edx, [ebp+arg_0]
		mov	eax, [edx+28h]
		lock dec dword ptr [eax+8]
		setnz	dl
		test	dl, dl
		jz	loc_6FFE01D0

loc_6FFE0139:				; CODE XREF: sub_6FFE00E0+10Ej
		mov	edx, [ebp+arg_0]
		mov	eax, [edx+18h]
		test	eax, eax
		jz	short loc_6FFE0152
		lock dec dword ptr [eax+34h]
		setnz	dl
		test	dl, dl
		jz	loc_6FFE0240

loc_6FFE0152:				; CODE XREF: sub_6FFE00E0+61j
					; sub_6FFE00E0+17Ej
		mov	edx, [ebp+arg_0]
		mov	eax, [edx+14h]
		test	eax, eax
		jz	short loc_6FFE016B
		lock dec dword ptr [eax+34h]
		setnz	dl
		test	dl, dl
		jz	loc_6FFE0216

loc_6FFE016B:				; CODE XREF: sub_6FFE00E0+7Aj
					; sub_6FFE00E0+154j
		mov	edx, [ebp+arg_0]
		mov	eax, [edx+10h]
		lock dec dword ptr [eax+8]
		setnz	dl
		test	dl, dl
		jnz	short loc_6FFE019A
		mov	edx, [ebp+arg_0]
		mov	dword ptr [esp+4], offset sub_6FFE4CC0
		mov	eax, [edx+10h]
		mov	[ebp+var_38], 5
		mov	[esp], eax
		call	ds:_ZN9QHashData11free_helperEPFvPNS_4NodeEE

loc_6FFE019A:				; CODE XREF: sub_6FFE00E0+9Aj
		mov	edx, [ebp+arg_0]
		mov	eax, [edx+4]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jnz	short loc_6FFE01C0
		mov	edx, [ebp+arg_0]
		mov	eax, [edx+4]
		mov	[ebp+var_38], 0FFFFFFFFh
		mov	[esp], eax
		call	ds:_ZN7QString4freeEPNS_4DataE

loc_6FFE01C0:				; CODE XREF: sub_6FFE00E0+C8j
		lea	eax, [ebp+var_3C]
		mov	[esp], eax
		call	_Unwind_SjLj_Unregister
		leave
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6FFE01D0:				; CODE XREF: sub_6FFE00E0+53j
		mov	edx, [ebp+arg_0]
		mov	dword ptr [esp+4], offset nullsub_1
		mov	eax, [edx+28h]
		mov	[ebp+var_38], 2
		mov	[esp], eax
		call	ds:_ZN9QHashData11free_helperEPFvPNS_4NodeEE
		jmp	loc_6FFE0139
; ---------------------------------------------------------------------------

loc_6FFE01F3:				; CODE XREF: sub_6FFE00E0+3Ej
		mov	edx, [ebp+arg_0]
		mov	dword ptr [esp+4], offset nullsub_1
		mov	eax, [edx+30h]
		mov	[ebp+var_38], 1
		mov	[esp], eax
		call	ds:_ZN9QHashData11free_helperEPFvPNS_4NodeEE
		jmp	loc_6FFE0124
; ---------------------------------------------------------------------------

loc_6FFE0216:				; CODE XREF: sub_6FFE00E0+85j
		mov	edx, [ebp+arg_0]
		mov	dword ptr [esp+4], 8
		mov	eax, [edx+14h]
		mov	[ebp+var_38], 4
		mov	[esp], eax
		call	ds:_ZN8QMapData16continueFreeDataEi
		jmp	loc_6FFE016B
; ---------------------------------------------------------------------------
		align 10h

loc_6FFE0240:				; CODE XREF: sub_6FFE00E0+6Cj
		mov	edx, [ebp+arg_0]
		mov	dword ptr [esp+4], 8
		mov	eax, [edx+18h]
		mov	[ebp+var_38], 3
		mov	[esp], eax
		call	ds:_ZN8QMapData16continueFreeDataEi
		jmp	loc_6FFE0152
sub_6FFE00E0	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn

sub_6FFE0263	proc near		; DATA XREF: sub_6FFE00E0+20o

arg_0		= dword	ptr  4

		add	ebp, 8
		mov	eax, [ebp-38h]
		mov	edx, [ebp-34h]
		cmp	eax, 1
		mov	[ebp-4Ch], edx
		jz	short loc_6FFE02A0
		cmp	eax, 2
		jz	short loc_6FFE02DF
		cmp	eax, 3
		jz	loc_6FFE031E
		cmp	eax, 4
		jz	loc_6FFE0359
		mov	eax, [ebp+8]
		mov	dword ptr [ebp-38h], 0
		add	eax, 28h
		mov	[esp+0], eax
		call	sub_6FFE4A20

loc_6FFE02A0:				; CODE XREF: sub_6FFE0263+Fj
		mov	eax, [ebp-4Ch]
		mov	edx, [ebp+8]
		mov	[ebp-48h], eax
		mov	eax, [edx+18h]
		test	eax, eax
		jz	short loc_6FFE02D9
		lock dec dword ptr [eax+34h]
		setnz	dl
		test	dl, dl
		jnz	short loc_6FFE02D9
		mov	edx, [ebp+8]
		mov	[esp+arg_0], 8
		mov	eax, [edx+18h]
		mov	dword ptr [ebp-38h], 0
		mov	[esp+0], eax
		call	ds:_ZN8QMapData16continueFreeDataEi

loc_6FFE02D9:				; CODE XREF: sub_6FFE0263+4Bj
					; sub_6FFE0263+56j
		mov	eax, [ebp-48h]
		mov	[ebp-4Ch], eax

loc_6FFE02DF:				; CODE XREF: sub_6FFE0263+14j
		mov	eax, [ebp-4Ch]
		mov	edx, [ebp+8]
		mov	[ebp-44h], eax
		mov	eax, [edx+14h]
		test	eax, eax
		jz	short loc_6FFE0318
		lock dec dword ptr [eax+34h]
		setnz	dl
		test	dl, dl
		jnz	short loc_6FFE0318
		mov	edx, [ebp+8]
		mov	[esp+arg_0], 8
		mov	eax, [edx+14h]
		mov	dword ptr [ebp-38h], 0
		mov	[esp+0], eax
		call	ds:_ZN8QMapData16continueFreeDataEi

loc_6FFE0318:				; CODE XREF: sub_6FFE0263+8Aj
					; sub_6FFE0263+95j
		mov	eax, [ebp-44h]
		mov	[ebp-4Ch], eax

loc_6FFE031E:				; CODE XREF: sub_6FFE0263+19j
		mov	eax, [ebp-4Ch]
		mov	edx, [ebp+8]
		mov	[ebp-40h], eax
		mov	eax, [edx+10h]
		lock dec dword ptr [eax+8]
		setnz	dl
		test	dl, dl
		jnz	short loc_6FFE0353
		mov	edx, [ebp+8]
		mov	[esp+arg_0], offset sub_6FFE4CC0
		mov	eax, [edx+10h]
		mov	dword ptr [ebp-38h], 0
		mov	[esp+0], eax
		call	ds:_ZN9QHashData11free_helperEPFvPNS_4NodeEE

loc_6FFE0353:				; CODE XREF: sub_6FFE0263+D0j
		mov	eax, [ebp-40h]
		mov	[ebp-4Ch], eax

loc_6FFE0359:				; CODE XREF: sub_6FFE0263+22j
		mov	eax, [ebp+8]
		mov	dword ptr [ebp-38h], 0
		add	eax, 4
		mov	[esp+0], eax
		call	sub_6FFEA140
		mov	eax, [ebp-4Ch]
		mov	dword ptr [ebp-38h], 0FFFFFFFFh
		mov	[esp+0], eax
		call	_Unwind_SjLj_Resume
sub_6FFE0263	endp


; =============== S U B	R O U T	I N E =======================================


sub_6FFE0380	proc near		; CODE XREF: _ZN16DBusMenuImporter31slotAboutToShowDBusCallFinishedEP23QDBusPendingCallWatcher+C6Cp
					; _ZN16DBusMenuImporter21slotGetLayoutFinishedEP23QDBusPendingCallWatcher+E3Ap

var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_3C		= dword	ptr -3Ch
var_20		= dword	ptr -20h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		sub	esp, 4Ch
		mov	[esp+4Ch+var_8], edi
		mov	edi, [esp+4Ch+arg_0]
		mov	[esp+4Ch+var_10], ebx
		mov	ecx, [esp+4Ch+arg_4]
		mov	[esp+4Ch+var_C], esi
		mov	[esp+4Ch+var_4], ebp
		mov	eax, [edi]
		mov	edx, [eax]
		mov	[esp+4Ch+var_48], ecx
		mov	[esp+4Ch+var_4C], eax
		call	dword ptr [edx+30h]
		mov	ebx, ds:_Z13qFlagLocationPKc
		mov	[esp+4Ch+var_4C], offset a1slotmenuabout ; "1slotMenuAboutToShow()"
		mov	esi, eax
		call	ebx ; _Z13qFlagLocationPKc
		mov	ebp, [edi]
		mov	[esp+4Ch+var_4C], offset a2abouttoshow ; "2aboutToShow()"
		mov	[esp+4Ch+var_20], eax
		call	ebx ; _Z13qFlagLocationPKc
		mov	edx, [esp+4Ch+var_20]
		mov	[esp+4Ch+var_44], ebp
		mov	ebp, ds:_ZN7QObject7connectEPKS_PKcS1_S3_N2Qt14ConnectionTypeE
		mov	[esp+4Ch+var_4C], esi
		mov	[esp+4Ch+var_3C], 0
		mov	[esp+4Ch+var_40], edx
		mov	[esp+4Ch+var_48], eax
		call	ebp ; _ZN7QObject7connectEPKS_PKcS1_S3_N2Qt14ConnectionTypeE
		mov	[esp+4Ch+var_4C], offset a1slotmenuabo_0 ; "1slotMenuAboutToHide()"
		call	ebx ; _Z13qFlagLocationPKc
		mov	edi, [edi]
		mov	[esp+4Ch+var_4C], offset a2abouttohide ; "2aboutToHide()"
		mov	[esp+4Ch+var_20], eax
		call	ebx ; _Z13qFlagLocationPKc
		mov	edx, [esp+4Ch+var_20]
		mov	[esp+4Ch+var_44], edi
		mov	[esp+4Ch+var_4C], esi
		mov	[esp+4Ch+var_3C], 0
		mov	[esp+4Ch+var_40], edx
		mov	[esp+4Ch+var_48], eax
		call	ebp ; _ZN7QObject7connectEPKS_PKcS1_S3_N2Qt14ConnectionTypeE
		mov	eax, esi
		mov	ebx, [esp+4Ch+var_10]
		mov	esi, [esp+4Ch+var_C]
		mov	edi, [esp+4Ch+var_8]
		mov	ebp, [esp+4Ch+var_4]
		add	esp, 4Ch
		retn
sub_6FFE0380	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_6FFE0440	proc near		; CODE XREF: _ZN16DBusMenuImporter21slotGetLayoutFinishedEP23QDBusPendingCallWatcher+7D7p

var_185		= byte ptr -185h
var_184		= dword	ptr -184h
var_180		= dword	ptr -180h
var_17C		= dword	ptr -17Ch
var_178		= dword	ptr -178h
var_174		= dword	ptr -174h
var_170		= dword	ptr -170h
var_16B		= byte ptr -16Bh
var_16A		= byte ptr -16Ah
var_169		= byte ptr -169h
var_168		= dword	ptr -168h
var_164		= dword	ptr -164h
var_160		= dword	ptr -160h
var_15C		= dword	ptr -15Ch
var_158		= dword	ptr -158h
var_154		= dword	ptr -154h
var_150		= dword	ptr -150h
var_14C		= dword	ptr -14Ch
var_148		= dword	ptr -148h
var_144		= dword	ptr -144h
var_140		= dword	ptr -140h
var_13C		= dword	ptr -13Ch
var_138		= dword	ptr -138h
var_134		= dword	ptr -134h
var_130		= dword	ptr -130h
var_12C		= dword	ptr -12Ch
var_128		= dword	ptr -128h
var_124		= dword	ptr -124h
var_120		= dword	ptr -120h
var_11C		= dword	ptr -11Ch
var_118		= dword	ptr -118h
var_114		= dword	ptr -114h
var_110		= dword	ptr -110h
var_10C		= dword	ptr -10Ch
var_108		= dword	ptr -108h
var_104		= dword	ptr -104h
var_100		= dword	ptr -100h
var_FC		= byte ptr -0FCh
var_F8		= dword	ptr -0F8h
var_F4		= dword	ptr -0F4h
var_E4		= dword	ptr -0E4h
var_E0		= dword	ptr -0E0h
var_DC		= dword	ptr -0DCh
var_D8		= dword	ptr -0D8h
var_D4		= dword	ptr -0D4h
var_C8		= dword	ptr -0C8h
var_C0		= dword	ptr -0C0h
var_B8		= dword	ptr -0B8h
var_B4		= dword	ptr -0B4h
var_B0		= dword	ptr -0B0h
var_AC		= dword	ptr -0ACh
var_A8		= byte ptr -0A8h
var_98		= byte ptr -98h
var_88		= byte ptr -88h
var_78		= byte ptr -78h
var_68		= byte ptr -68h
var_58		= byte ptr -58h
var_50		= byte ptr -50h
var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= byte ptr -8
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h

		push	ebp
		mov	ebp, esp
		sub	esp, 1A8h
		lea	eax, [ebp+var_8]
		mov	[ebp+var_DC], eax
		lea	eax, [ebp+var_FC]
		mov	[esp], eax
		mov	[ebp+var_E4], offset sub_6FFEC1F0
		mov	[ebp+var_E0], offset dword_6FFED074
		mov	[ebp+var_D8], offset loc_6FFE12D6
		mov	[ebp+var_D4], esp
		call	_Unwind_SjLj_Register
		mov	eax, [ebp+arg_8]
		mov	eax, [eax]
		mov	[ebp+var_C], eax
		lock inc dword ptr [eax+34h]
		setnz	dl
		mov	eax, [ebp+var_C]
		test	byte ptr [eax+44h], 2
		jnz	short loc_6FFE04B9
		mov	eax, [eax+34h]
		cmp	eax, 1
		jz	short loc_6FFE04B9
		lea	eax, [ebp+var_C]
		mov	[esp], eax
		mov	[ebp+var_F8], 0FFFFFFFFh
		call	sub_6FFE3B80

loc_6FFE04B9:				; CODE XREF: sub_6FFE0440+5Aj
					; sub_6FFE0440+62j
		mov	dword ptr [esp], 8 ; size_t
		mov	[ebp+var_F8], 1Eh
		call	sub_6FFEAE70
		mov	edx, [ebp+arg_C]
		mov	[ebp+var_120], eax
		mov	[ebp+var_118], eax
		mov	[esp], eax
		mov	[esp+4], edx
		mov	[ebp+var_F8], 1Dh
		call	ds:_ZN7QActionC1EP7QObject
		mov	eax, [ebp+arg_4]
		mov	[ebp+var_F8], 1Eh
		mov	[esp+4], eax
		lea	eax, [ebp+var_68]
		mov	[esp], eax
		call	ds:_ZN8QVariantC1Ei
		lea	eax, [ebp+var_68]
		mov	edx, [ebp+var_120]
		mov	[esp+8], eax
		mov	eax, ds:off_6FFF507C
		mov	[ebp+var_F8], 1Ch
		mov	[esp], edx
		mov	[esp+4], eax
		call	ds:_ZN7QObject11setPropertyEPKcRK8QVariant
		lea	eax, [ebp+var_68]
		mov	[esp], eax
		mov	[ebp+var_F8], 1Eh
		call	ds:_ZN8QVariantD1Ev
		mov	dword ptr [esp+4], 0FFFFFFFFh
		mov	dword ptr [esp], offset	aType_0	; "type"
		call	ds:_ZN7QString16fromAscii_helperEPKci
		mov	[ebp+var_14], eax
		lea	eax, [ebp+var_14]
		lea	edx, [ebp+var_78]
		mov	[esp+8], eax
		lea	eax, [ebp+var_C]
		mov	[esp+4], eax
		mov	[esp], edx
		mov	[ebp+var_F8], 1Bh
		call	sub_6FFE3EC0
		lea	edx, [ebp+var_10]
		push	eax
		lea	eax, [ebp+var_78]
		mov	[esp+4], eax
		mov	[esp], edx
		mov	[ebp+var_F8], 1Ah
		call	ds:_ZNK8QVariant8toStringEv
		lea	eax, [ebp+var_78]
		push	ecx
		mov	[esp], eax
		mov	[ebp+var_F8], 19h
		call	ds:_ZN8QVariantD1Ev
		mov	eax, [ebp+var_14]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jz	loc_6FFE0FF2

loc_6FFE05D2:				; CODE XREF: sub_6FFE0440+BC8j
		mov	eax, ds:_ZN7QString16codecForCStringsE
		cmp	dword ptr [eax], 0
		jz	loc_6FFE168C
		lea	eax, [ebp+var_38]
		mov	dword ptr [esp+8], 0FFFFFFFFh
		mov	dword ptr [esp+4], offset aSeparator_0 ; "separator"
		mov	[esp], eax
		mov	[ebp+var_F8], 18h
		call	ds:_ZN7QString9fromAsciiEPKci
		lea	eax, [ebp+var_38]
		push	edx
		mov	[esp+4], eax
		lea	eax, [ebp+var_10]
		mov	[esp], eax
		mov	[ebp+var_F8], 8
		call	ds:_ZNK7QStringeqERKS_
		mov	[ebp+var_16B], al
		mov	eax, [ebp+var_38]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jz	loc_6FFE0FD7

loc_6FFE063B:				; CODE XREF: sub_6FFE0440+BADj
					; sub_6FFE0440+1276j
		cmp	[ebp+var_16B], 0
		jz	short loc_6FFE0665
		mov	ecx, [ebp+var_120]
		mov	dword ptr [esp+4], 1
		mov	[ebp+var_F8], 18h
		mov	[esp], ecx
		call	ds:_ZN7QAction12setSeparatorEb

loc_6FFE0665:				; CODE XREF: sub_6FFE0440+202j
		mov	dword ptr [esp+4], 0FFFFFFFFh
		mov	dword ptr [esp], offset	aChildrenDisp_1	; "children-display"
		mov	[ebp+var_F8], 18h
		call	ds:_ZN7QString16fromAscii_helperEPKci
		mov	[ebp+var_18], eax
		lea	eax, [ebp+var_18]
		lea	edx, [ebp+var_88]
		mov	[esp+8], eax
		lea	eax, [ebp+var_C]
		mov	[esp+4], eax
		mov	[esp], edx
		mov	[ebp+var_F8], 17h
		call	sub_6FFE3EC0
		lea	edx, [ebp+var_1C]
		push	eax
		lea	eax, [ebp+var_88]
		mov	[esp+4], eax
		mov	[esp], edx
		mov	[ebp+var_F8], 16h
		call	ds:_ZNK8QVariant8toStringEv
		mov	eax, ds:_ZN7QString16codecForCStringsE
		push	ecx
		cmp	dword ptr [eax], 0
		jz	loc_6FFE165D
		lea	eax, [ebp+var_40]
		mov	dword ptr [esp+8], 0FFFFFFFFh
		mov	dword ptr [esp+4], offset aSubmenu_1 ; "submenu"
		mov	[esp], eax
		mov	[ebp+var_F8], 15h
		call	ds:_ZN7QString9fromAsciiEPKci
		lea	eax, [ebp+var_40]
		push	edx
		mov	[esp+4], eax
		lea	eax, [ebp+var_1C]
		mov	[esp], eax
		mov	[ebp+var_F8], 7
		call	ds:_ZNK7QStringeqERKS_
		mov	[ebp+var_16A], al
		mov	eax, [ebp+var_40]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jz	loc_6FFE0FBC

loc_6FFE0738:				; CODE XREF: sub_6FFE0440+B92j
					; sub_6FFE0440+1247j
		mov	eax, [ebp+var_1C]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jz	loc_6FFE0FA1

loc_6FFE0749:				; CODE XREF: sub_6FFE0440+B77j
		lea	eax, [ebp+var_88]
		mov	[esp], eax
		mov	[ebp+var_F8], 17h
		call	ds:_ZN8QVariantD1Ev
		mov	eax, [ebp+var_18]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jz	loc_6FFE0F86

loc_6FFE0773:				; CODE XREF: sub_6FFE0440+B5Cj
		cmp	[ebp+var_16A], 0
		jz	loc_6FFE0873
		mov	eax, [ebp+arg_0]
		mov	ecx, [ebp+arg_C]
		mov	edx, [eax]
		mov	eax, [edx]
		mov	[esp+4], ecx
		mov	[esp], edx
		mov	eax, [eax+30h]
		mov	[ebp+var_F8], 18h
		call	eax
		mov	[ebp+var_158], eax
		mov	dword ptr [esp], offset	a1slotmenuabout	; "1slotMenuAboutToShow()"
		call	ds:_Z13qFlagLocationPKc
		mov	[ebp+var_184], eax
		mov	eax, [ebp+arg_0]
		mov	eax, [eax]
		mov	dword ptr [esp], offset	a2abouttoshow ;	"2aboutToShow()"
		mov	[ebp+var_180], eax
		call	ds:_Z13qFlagLocationPKc
		mov	edx, [ebp+var_184]
		mov	ecx, [ebp+var_180]
		mov	[esp+4], eax
		mov	eax, [ebp+var_158]
		mov	dword ptr [esp+10h], 0
		mov	[esp+0Ch], edx
		mov	[esp+8], ecx
		mov	[esp], eax
		call	ds:_ZN7QObject7connectEPKS_PKcS1_S3_N2Qt14ConnectionTypeE
		mov	dword ptr [esp], offset	a1slotmenuabo_0	; "1slotMenuAboutToHide()"
		call	ds:_Z13qFlagLocationPKc
		mov	edx, [ebp+arg_0]
		mov	[ebp+var_17C], eax
		mov	edx, [edx]
		mov	dword ptr [esp], offset	a2abouttohide ;	"2aboutToHide()"
		mov	[ebp+var_170], edx
		call	ds:_Z13qFlagLocationPKc
		mov	ecx, [ebp+var_17C]
		mov	edx, [ebp+var_170]
		mov	dword ptr [esp+10h], 0
		mov	[esp+4], eax
		mov	[esp+0Ch], ecx
		mov	ecx, [ebp+var_158]
		mov	[esp+8], edx
		mov	[esp], ecx
		call	ds:_ZN7QObject7connectEPKS_PKcS1_S3_N2Qt14ConnectionTypeE
		mov	eax, [ebp+var_158]
		mov	edx, [ebp+var_120]
		mov	[esp+4], eax
		mov	[esp], edx
		call	ds:_ZN7QAction7setMenuEP5QMenu

loc_6FFE0873:				; CODE XREF: sub_6FFE0440+33Aj
		mov	dword ptr [esp+4], 0FFFFFFFFh
		mov	dword ptr [esp], offset	aToggleType_0 ;	"toggle-type"
		mov	[ebp+var_F8], 18h
		call	ds:_ZN7QString16fromAscii_helperEPKci
		mov	[ebp+var_24], eax
		lea	eax, [ebp+var_24]
		lea	edx, [ebp+var_98]
		mov	[esp+8], eax
		lea	eax, [ebp+var_C]
		mov	[esp+4], eax
		mov	[esp], edx
		mov	[ebp+var_F8], 14h
		call	sub_6FFE3EC0
		lea	edx, [ebp+var_20]
		push	eax
		lea	eax, [ebp+var_98]
		mov	[esp+4], eax
		mov	[esp], edx
		mov	[ebp+var_F8], 13h
		call	ds:_ZNK8QVariant8toStringEv
		lea	eax, [ebp+var_98]
		push	ecx
		mov	[esp], eax
		mov	[ebp+var_F8], 12h
		call	ds:_ZN8QVariantD1Ev
		mov	eax, [ebp+var_24]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jz	loc_6FFE0F6B

loc_6FFE0907:				; CODE XREF: sub_6FFE0440+B41j
		mov	eax, [ebp+var_20]
		cmp	dword ptr [eax+8], 0
		jz	loc_6FFE09A1
		mov	ecx, [ebp+var_120]
		mov	dword ptr [esp+4], 1
		mov	[ebp+var_F8], 11h
		mov	[esp], ecx
		call	ds:_ZN7QAction12setCheckableEb
		mov	eax, ds:_ZN7QString16codecForCStringsE
		cmp	dword ptr [eax], 0
		jz	loc_6FFE1546
		lea	eax, [ebp+var_48]
		mov	dword ptr [esp+8], 0FFFFFFFFh
		mov	dword ptr [esp+4], offset aRadio_0 ; "radio"
		mov	[esp], eax
		call	ds:_ZN7QString9fromAsciiEPKci
		lea	eax, [ebp+var_48]
		push	edx
		mov	[esp+4], eax
		lea	eax, [ebp+var_20]
		mov	[esp], eax
		mov	[ebp+var_F8], 6
		call	ds:_ZNK7QStringeqERKS_
		mov	[ebp+var_169], al
		mov	eax, [ebp+var_48]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jz	loc_6FFE152B

loc_6FFE0994:				; CODE XREF: sub_6FFE0440+1101j
					; sub_6FFE0440+1130j
		cmp	[ebp+var_169], 0
		jnz	loc_6FFE15F6

loc_6FFE09A1:				; CODE XREF: sub_6FFE0440+4CEj
					; sub_6FFE0440+1218j
		mov	dword ptr [esp+4], 0FFFFFFFFh
		mov	dword ptr [esp], offset	aXKdeTitle_0 ; "x-kde-title"
		mov	[ebp+var_F8], 11h
		call	ds:_ZN7QString16fromAscii_helperEPKci
		mov	[ebp+var_28], eax
		lea	eax, [ebp+var_28]
		lea	edx, [ebp+var_A8]
		mov	[esp+8], eax
		lea	eax, [ebp+var_C]
		mov	[esp+4], eax
		mov	[esp], edx
		mov	[ebp+var_F8], 0Fh
		call	sub_6FFE3EC0
		push	eax
		lea	eax, [ebp+var_A8]
		mov	[esp], eax
		mov	[ebp+var_F8], 0Eh
		call	ds:_ZNK8QVariant6toBoolEv
		mov	[ebp+var_185], al
		lea	eax, [ebp+var_A8]
		mov	[esp], eax
		mov	[ebp+var_F8], 0Fh
		call	ds:_ZN8QVariantD1Ev
		mov	eax, [ebp+var_28]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jz	loc_6FFE0F50

loc_6FFE0A33:				; CODE XREF: sub_6FFE0440+B26j
		mov	eax, ds:_ZN9QListData11shared_nullE
		mov	[ebp+var_2C], eax
		lock inc dword ptr [eax]
		setnz	dl
		mov	eax, [ebp+var_C]
		mov	edx, [ebp+var_2C]
		mov	eax, [eax+3Ch]
		cmp	eax, [edx+4]
		jle	short loc_6FFE0A73
		mov	edx, [edx]
		cmp	edx, 1
		jz	loc_6FFE15D7
		mov	[esp+4], eax
		lea	eax, [ebp+var_2C]
		mov	[esp], eax
		mov	[ebp+var_F8], 0Bh
		call	sub_6FFE8C20

loc_6FFE0A73:				; CODE XREF: sub_6FFE0440+60Dj
					; sub_6FFE0440+11B1j
		mov	eax, [ebp+var_C]
		mov	ecx, [eax+4]
		cmp	eax, ecx
		mov	[ebp+var_114], ecx
		jz	short loc_6FFE0AB9

loc_6FFE0A83:				; CODE XREF: sub_6FFE0440+677j
		mov	eax, [ebp+var_114]
		mov	[ebp+var_F8], 0Bh
		sub	eax, 1Ch
		mov	[esp+4], eax
		lea	eax, [ebp+var_2C]
		mov	[esp], eax
		call	sub_6FFE8EA0
		mov	edx, [ebp+var_114]
		mov	edx, [edx+4]
		cmp	edx, [ebp+var_C]
		mov	[ebp+var_114], edx
		jnz	short loc_6FFE0A83

loc_6FFE0AB9:				; CODE XREF: sub_6FFE0440+641j
		mov	eax, [ebp+var_2C]
		mov	[ebp+var_30], eax
		lock inc dword ptr [eax]
		setnz	dl
		mov	eax, [ebp+var_30]
		test	byte ptr [eax+10h], 1
		jnz	short loc_6FFE0AED
		mov	eax, [eax+4]
		mov	[ebp+var_F8], 0Dh
		mov	[esp+4], eax
		lea	eax, [ebp+var_30]
		mov	[esp], eax
		call	sub_6FFE8C20
		mov	eax, [ebp+var_30]

loc_6FFE0AED:				; CODE XREF: sub_6FFE0440+68Cj
		mov	[ebp+var_B8], eax
		lock inc dword ptr [eax]
		setnz	dl
		mov	eax, [ebp+var_B8]
		test	byte ptr [eax+10h], 1
		jz	loc_6FFE1297

loc_6FFE0B09:				; CODE XREF: sub_6FFE0440+E76j
		mov	edx, [ebp+var_B8]
		mov	[ebp+var_B4], 0
		mov	eax, [edx+8]
		lea	eax, [edx+eax*4+14h]
		mov	[ebp+var_B0], eax
		mov	ecx, [edx+0Ch]
		lea	edx, [edx+ecx*4+14h]
		cmp	eax, edx
		mov	[ebp+var_AC], edx
		jz	loc_6FFE0BFB
		mov	edx, ds:_ZNK7QStringltERKS_
		mov	[ebp+var_154], edx
		jmp	short loc_6FFE0B5C
; ---------------------------------------------------------------------------
		align 10h

loc_6FFE0B50:				; CODE XREF: sub_6FFE0440+7B5j
		cmp	eax, [ebp+var_AC]
		jz	loc_6FFE0BFB

loc_6FFE0B5C:				; CODE XREF: sub_6FFE0440+707j
		mov	[ebp+var_110], eax
		mov	eax, [ebp+var_C]
		mov	edx, [eax+3Ch]
		test	edx, edx
		jnz	loc_6FFE0E5B

loc_6FFE0B70:				; CODE XREF: sub_6FFE0440+A26j
					; sub_6FFE0440+A9Cj ...
		mov	eax, [ebp+var_C0]
		mov	[ebp+var_C8], 0
		and	eax, 0C0000000h
		mov	[ebp+var_C0], eax
		mov	byte ptr [ebp+var_C0+3], 80h

loc_6FFE0B92:				; CODE XREF: sub_6FFE0440+B0Bj
		lea	ecx, [ebp+var_C8]
		mov	eax, [ebp+var_110]
		mov	[esp+0Ch], ecx
		mov	edx, [ebp+var_118]
		mov	ecx, [ebp+arg_0]
		mov	[ebp+var_F8], 9
		mov	[esp+8], eax
		mov	[esp+4], edx
		mov	[esp], ecx
		call	sub_6FFE1870
		lea	eax, [ebp+var_C8]
		mov	[esp], eax
		mov	[ebp+var_F8], 0Ah
		call	ds:_ZN8QVariantD1Ev
		mov	eax, [ebp+var_B0]
		mov	ecx, [ebp+var_B4]
		add	eax, 4
		test	ecx, ecx
		mov	[ebp+var_B0], eax
		jz	loc_6FFE0B50

loc_6FFE0BFB:				; CODE XREF: sub_6FFE0440+6F5j
					; sub_6FFE0440+716j
		mov	eax, [ebp+var_B8]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jz	loc_6FFE1202

loc_6FFE0C0F:				; CODE XREF: sub_6FFE0440+E52j
		mov	eax, [ebp+var_30]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jz	loc_6FFE116E

loc_6FFE0C20:				; CODE XREF: sub_6FFE0440+DBDj
		mov	eax, [ebp+var_2C]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jz	loc_6FFE1043

loc_6FFE0C31:				; CODE XREF: sub_6FFE0440+C88j
		cmp	[ebp+var_185], 0
		jz	loc_6FFE0E0D
		mov	dword ptr [esp], 14h ; size_t
		mov	[ebp+var_F8], 11h
		call	sub_6FFEAE70
		mov	[ebp+var_124], eax
		mov	dword ptr [esp+4], 0
		mov	[esp], eax
		mov	[ebp+var_F8], 5
		call	ds:_ZN11QToolButtonC1EP7QWidget
		mov	edx, [ebp+var_124]
		mov	eax, [edx+10h]
		mov	[ebp+var_F8], 11h
		add	eax, 28h
		mov	[esp+4], eax
		lea	eax, [ebp+var_58]
		mov	[esp], eax
		call	ds:_ZN5QFontC1ERKS_
		lea	eax, [ebp+var_58]
		mov	dword ptr [esp+4], 4Bh
		mov	[esp], eax
		mov	[ebp+var_F8], 4
		call	ds:_ZN5QFont9setWeightEi
		mov	ecx, [ebp+var_124]
		lea	eax, [ebp+var_58]
		mov	[esp+4], eax
		mov	[esp], ecx
		call	ds:_ZN7QWidget7setFontERK5QFont
		mov	edx, [ebp+var_120]
		lea	eax, [ebp+var_50]
		mov	[esp], eax
		mov	[esp+4], edx
		call	ds:_ZNK7QAction4iconEv
		push	ecx
		mov	ecx, [ebp+var_124]
		lea	eax, [ebp+var_50]
		mov	[esp+4], eax
		mov	[ebp+var_F8], 3
		mov	[esp], ecx
		call	ds:_ZN15QAbstractButton7setIconERK5QIcon
		lea	eax, [ebp+var_50]
		mov	[esp], eax
		mov	[ebp+var_F8], 4
		call	ds:_ZN5QIconD1Ev
		mov	edx, [ebp+var_120]
		lea	eax, [ebp+var_4C]
		mov	[esp], eax
		mov	[esp+4], edx
		call	ds:_ZNK7QAction4textEv
		mov	ecx, [ebp+var_124]
		lea	eax, [ebp+var_4C]
		push	edx
		mov	[esp+4], eax
		mov	[esp], ecx
		mov	[ebp+var_F8], 2
		call	ds:_ZN15QAbstractButton7setTextERK7QString
		mov	eax, [ebp+var_4C]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jz	loc_6FFE12BB

loc_6FFE0D64:				; CODE XREF: sub_6FFE0440+E91j
		mov	eax, [ebp+var_124]
		mov	dword ptr [esp+4], 1
		mov	[ebp+var_F8], 4
		mov	[esp], eax
		call	ds:_ZN15QAbstractButton7setDownEb
		mov	edx, [ebp+var_124]
		mov	dword ptr [esp+4], 2
		mov	[esp], edx
		call	ds:_ZN11QToolButton18setToolButtonStyleEN2Qt15ToolButtonStyleE
		mov	dword ptr [esp], 8 ; size_t
		call	sub_6FFEAE70
		mov	ecx, [ebp+arg_C]
		mov	[ebp+var_150], eax
		mov	[esp], eax
		mov	[ebp+var_F8], 1
		mov	[esp+4], ecx
		call	ds:_ZN13QWidgetActionC1EP7QObject
		mov	eax, [ebp+var_124]
		mov	edx, [ebp+var_150]
		mov	[ebp+var_F8], 4
		mov	[esp+4], eax
		mov	[esp], edx
		call	ds:_ZN13QWidgetAction16setDefaultWidgetEP7QWidget
		mov	ecx, [ebp+var_150]
		lea	eax, [ebp+var_58]
		mov	[esp], eax
		mov	[ebp+var_F8], 11h
		mov	[ebp+var_118], ecx
		call	ds:_ZN5QFontD1Ev

loc_6FFE0E0D:				; CODE XREF: sub_6FFE0440+7F8j
		mov	eax, [ebp+var_20]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jz	loc_6FFE1028

loc_6FFE0E1E:				; CODE XREF: sub_6FFE0440+BFEj
		mov	eax, [ebp+var_10]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jz	loc_6FFE100D

loc_6FFE0E2F:				; CODE XREF: sub_6FFE0440+BE3j
		mov	eax, [ebp+var_C]
		test	eax, eax
		jz	short loc_6FFE0E45
		lock dec dword ptr [eax+34h]
		setnz	dl
		test	dl, dl
		jz	loc_6FFE10CD

loc_6FFE0E45:				; CODE XREF: sub_6FFE0440+9F4j
					; sub_6FFE0440+D29j
		lea	eax, [ebp+var_FC]
		mov	[esp], eax
		call	_Unwind_SjLj_Unregister
		mov	eax, [ebp+var_118]
		leave
		retn
; ---------------------------------------------------------------------------

loc_6FFE0E5B:				; CODE XREF: sub_6FFE0440+72Aj
		mov	edx, [eax+38h]
		test	edx, edx
		mov	[ebp+var_108], edx
		js	loc_6FFE0B70
		mov	[ebp+var_10C], eax
		mov	edx, eax

loc_6FFE0E74:				; CODE XREF: sub_6FFE0440+A83j
					; sub_6FFE0440+A94j
		mov	ecx, [ebp+var_108]
		mov	ecx, [edx+ecx*4+4]
		cmp	ecx, eax
		mov	[ebp+var_104], ecx
		jz	short loc_6FFE0EB1
		mov	eax, [ebp+var_110]
		mov	[ebp+var_F8], 0Ah
		mov	[esp+4], eax
		mov	eax, ecx
		sub	eax, 1Ch
		mov	[esp], eax
		call	ds:_ZNK7QStringltERKS_
		test	al, al
		jnz	short loc_6FFE0EC5
		mov	eax, [ebp+var_C]

loc_6FFE0EB1:				; CODE XREF: sub_6FFE0440+A46j
		sub	[ebp+var_108], 1
		js	short loc_6FFE0ED6
		mov	eax, [ebp+var_C]
		mov	edx, [ebp+var_10C]
		jmp	short loc_6FFE0E74
; ---------------------------------------------------------------------------

loc_6FFE0EC5:				; CODE XREF: sub_6FFE0440+A6Cj
		mov	edx, [ebp+var_104]
		mov	eax, [ebp+var_C]
		mov	[ebp+var_10C], edx
		jmp	short loc_6FFE0E74
; ---------------------------------------------------------------------------

loc_6FFE0ED6:				; CODE XREF: sub_6FFE0440+A78j
		cmp	[ebp+var_104], eax
		jz	loc_6FFE0B70
		mov	ecx, [ebp+var_104]
		mov	eax, [ebp+var_110]
		mov	[ebp+var_F8], 0Ah
		sub	ecx, 1Ch
		mov	[ebp+var_11C], ecx
		mov	[esp+4], ecx
		mov	[esp], eax
		call	[ebp+var_154]
		test	al, al
		jnz	loc_6FFE0B70
		mov	edx, [ebp+var_104]
		cmp	[ebp+var_C], edx
		jz	loc_6FFE0B70
		mov	eax, [ebp+var_11C]
		lea	ecx, [ebp+var_C8]
		mov	[esp], ecx
		mov	[ebp+var_F8], 0Ah
		add	eax, 8
		mov	[esp+4], eax
		call	ds:_ZN8QVariantC1ERKS_
		jmp	loc_6FFE0B92
; ---------------------------------------------------------------------------

loc_6FFE0F50:				; CODE XREF: sub_6FFE0440+5EDj
		mov	eax, [ebp+var_28]
		mov	[ebp+var_F8], 11h
		mov	[esp], eax
		call	ds:_ZN7QString4freeEPNS_4DataE
		jmp	loc_6FFE0A33
; ---------------------------------------------------------------------------

loc_6FFE0F6B:				; CODE XREF: sub_6FFE0440+4C1j
		mov	eax, [ebp+var_24]
		mov	[ebp+var_F8], 11h
		mov	[esp], eax
		call	ds:_ZN7QString4freeEPNS_4DataE
		jmp	loc_6FFE0907
; ---------------------------------------------------------------------------

loc_6FFE0F86:				; CODE XREF: sub_6FFE0440+32Dj
		mov	eax, [ebp+var_18]
		mov	[ebp+var_F8], 18h
		mov	[esp], eax
		call	ds:_ZN7QString4freeEPNS_4DataE
		jmp	loc_6FFE0773
; ---------------------------------------------------------------------------

loc_6FFE0FA1:				; CODE XREF: sub_6FFE0440+303j
		mov	eax, [ebp+var_1C]
		mov	[ebp+var_F8], 16h
		mov	[esp], eax
		call	ds:_ZN7QString4freeEPNS_4DataE
		jmp	loc_6FFE0749
; ---------------------------------------------------------------------------

loc_6FFE0FBC:				; CODE XREF: sub_6FFE0440+2F2j
		mov	eax, [ebp+var_40]
		mov	[ebp+var_F8], 15h
		mov	[esp], eax
		call	ds:_ZN7QString4freeEPNS_4DataE
		jmp	loc_6FFE0738
; ---------------------------------------------------------------------------

loc_6FFE0FD7:				; CODE XREF: sub_6FFE0440+1F5j
		mov	eax, [ebp+var_38]
		mov	[ebp+var_F8], 18h
		mov	[esp], eax
		call	ds:_ZN7QString4freeEPNS_4DataE
		jmp	loc_6FFE063B
; ---------------------------------------------------------------------------

loc_6FFE0FF2:				; CODE XREF: sub_6FFE0440+18Cj
		mov	eax, [ebp+var_14]
		mov	[ebp+var_F8], 18h
		mov	[esp], eax
		call	ds:_ZN7QString4freeEPNS_4DataE
		jmp	loc_6FFE05D2
; ---------------------------------------------------------------------------

loc_6FFE100D:				; CODE XREF: sub_6FFE0440+9E9j
		mov	eax, [ebp+var_10]
		mov	[ebp+var_F8], 1Eh
		mov	[esp], eax
		call	ds:_ZN7QString4freeEPNS_4DataE
		jmp	loc_6FFE0E2F
; ---------------------------------------------------------------------------

loc_6FFE1028:				; CODE XREF: sub_6FFE0440+9D8j
		mov	eax, [ebp+var_20]
		mov	[ebp+var_F8], 18h
		mov	[esp], eax
		call	ds:_ZN7QString4freeEPNS_4DataE
		jmp	loc_6FFE0E1E
; ---------------------------------------------------------------------------

loc_6FFE1043:				; CODE XREF: sub_6FFE0440+7EBj
		mov	edx, [ebp+var_2C]
		mov	eax, edx
		mov	ecx, edx
		mov	[ebp+var_14C], edx
		mov	edx, [edx+0Ch]
		add	eax, 14h
		lea	edx, [eax+edx*4]
		mov	[ebp+var_13C], edx
		mov	edx, [ecx+8]
		lea	edx, [eax+edx*4]
		mov	[ebp+var_178], edx

loc_6FFE106B:				; CODE XREF: sub_6FFE0440+C50j
					; sub_6FFE0440+C6Dj
		mov	eax, [ebp+var_13C]
		cmp	[ebp+var_178], eax
		jz	short loc_6FFE10AF
		sub	[ebp+var_13C], 4
		mov	edx, [ebp+var_13C]
		mov	eax, [edx]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jnz	short loc_6FFE106B
		mov	ecx, [ebp+var_13C]
		mov	eax, [ecx]
		mov	[ebp+var_F8], 11h
		mov	[esp], eax
		call	ds:_ZN7QString4freeEPNS_4DataE
		jmp	short loc_6FFE106B
; ---------------------------------------------------------------------------

loc_6FFE10AF:				; CODE XREF: sub_6FFE0440+C37j
		mov	edx, [ebp+var_14C]
		mov	[ebp+var_F8], 11h
		mov	[esp], edx
		call	ds:_Z5qFreePv
		jmp	loc_6FFE0C31
; ---------------------------------------------------------------------------

loc_6FFE10CD:				; CODE XREF: sub_6FFE0440+9FFj
		mov	edx, [ebp+var_C]
		mov	eax, [edx+4]
		mov	[ebp+var_140], edx
		cmp	edx, eax
		jz	short loc_6FFE1148
		mov	ecx, ds:_ZN8QVariantD1Ev
		mov	[ebp+var_100], ecx

loc_6FFE10E9:				; CODE XREF: sub_6FFE0440+D06j
		mov	edx, [eax+4]
		lea	ecx, [eax-1Ch]
		mov	[ebp+var_174], ecx
		mov	[ebp+var_160], edx
		mov	edx, [eax-1Ch]
		lock dec dword ptr [edx]
		setnz	cl
		test	cl, cl
		jnz	short loc_6FFE111E
		mov	eax, [eax-1Ch]
		mov	[ebp+var_F8], 0FFFFFFFFh
		mov	[esp], eax
		call	ds:_ZN7QString4freeEPNS_4DataE

loc_6FFE111E:				; CODE XREF: sub_6FFE0440+CC6j
		mov	eax, [ebp+var_174]
		mov	[ebp+var_F8], 0FFFFFFFFh
		add	eax, 8
		mov	[esp], eax
		call	[ebp+var_100]
		mov	eax, [ebp+var_160]
		cmp	[ebp+var_140], eax
		jnz	short loc_6FFE10E9

loc_6FFE1148:				; CODE XREF: sub_6FFE0440+C9Bj
		mov	edx, [ebp+var_140]
		mov	dword ptr [esp+4], 1Ch
		mov	[ebp+var_F8], 0FFFFFFFFh
		mov	[esp], edx
		call	ds:_ZN8QMapData16continueFreeDataEi
		jmp	loc_6FFE0E45
; ---------------------------------------------------------------------------

loc_6FFE116E:				; CODE XREF: sub_6FFE0440+7DAj
		mov	ecx, [ebp+var_30]
		mov	edx, [ecx+0Ch]
		mov	eax, ecx
		add	eax, 14h
		mov	[ebp+var_144], ecx
		lea	edx, [eax+edx*4]
		mov	[ebp+var_134], edx
		mov	edx, [ecx+8]
		lea	edx, [eax+edx*4]
		cmp	[ebp+var_134], edx
		mov	[ebp+var_164], edx
		jnz	short loc_6FFE11AE
		jmp	short loc_6FFE11E4
; ---------------------------------------------------------------------------
		align 10h

loc_6FFE11A0:				; CODE XREF: sub_6FFE0440+D85j
					; sub_6FFE0440+DA2j
		mov	eax, [ebp+var_134]
		cmp	[ebp+var_164], eax
		jz	short loc_6FFE11E4

loc_6FFE11AE:				; CODE XREF: sub_6FFE0440+D5Aj
		sub	[ebp+var_134], 4
		mov	edx, [ebp+var_134]
		mov	eax, [edx]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jnz	short loc_6FFE11A0
		mov	ecx, [ebp+var_134]
		mov	eax, [ecx]
		mov	[ebp+var_F8], 0Dh
		mov	[esp], eax
		call	ds:_ZN7QString4freeEPNS_4DataE
		jmp	short loc_6FFE11A0
; ---------------------------------------------------------------------------

loc_6FFE11E4:				; CODE XREF: sub_6FFE0440+D5Cj
					; sub_6FFE0440+D6Cj
		mov	edx, [ebp+var_144]
		mov	[ebp+var_F8], 0Dh
		mov	[esp], edx
		call	ds:_Z5qFreePv
		jmp	loc_6FFE0C20
; ---------------------------------------------------------------------------

loc_6FFE1202:				; CODE XREF: sub_6FFE0440+7C9j
		mov	ecx, [ebp+var_B8]
		mov	edx, [ecx+0Ch]
		mov	eax, ecx
		add	eax, 14h
		mov	[ebp+var_148], ecx
		lea	edx, [eax+edx*4]
		mov	[ebp+var_138], edx
		mov	edx, [ecx+8]
		lea	edx, [eax+edx*4]
		cmp	[ebp+var_138], edx
		mov	[ebp+var_168], edx
		jnz	short loc_6FFE1243
		jmp	short loc_6FFE1279
; ---------------------------------------------------------------------------

loc_6FFE1235:				; CODE XREF: sub_6FFE0440+E1Aj
					; sub_6FFE0440+E37j
		mov	eax, [ebp+var_138]
		cmp	[ebp+var_168], eax
		jz	short loc_6FFE1279

loc_6FFE1243:				; CODE XREF: sub_6FFE0440+DF1j
		sub	[ebp+var_138], 4
		mov	edx, [ebp+var_138]
		mov	eax, [edx]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jnz	short loc_6FFE1235
		mov	ecx, [ebp+var_138]
		mov	eax, [ecx]
		mov	[ebp+var_F8], 0Ch
		mov	[esp], eax
		call	ds:_ZN7QString4freeEPNS_4DataE
		jmp	short loc_6FFE1235
; ---------------------------------------------------------------------------

loc_6FFE1279:				; CODE XREF: sub_6FFE0440+DF3j
					; sub_6FFE0440+E01j
		mov	edx, [ebp+var_148]
		mov	[ebp+var_F8], 0Ch
		mov	[esp], edx
		call	ds:_Z5qFreePv
		jmp	loc_6FFE0C0F
; ---------------------------------------------------------------------------

loc_6FFE1297:				; CODE XREF: sub_6FFE0440+6C3j
		mov	eax, [eax+4]
		mov	[ebp+var_F8], 0Ch
		mov	[esp+4], eax
		lea	eax, [ebp+var_B8]
		mov	[esp], eax
		call	sub_6FFE8C20
		jmp	loc_6FFE0B09
; ---------------------------------------------------------------------------

loc_6FFE12BB:				; CODE XREF: sub_6FFE0440+91Ej
		mov	eax, [ebp+var_4C]
		mov	[ebp+var_F8], 4
		mov	[esp], eax
		call	ds:_ZN7QString4freeEPNS_4DataE
		jmp	loc_6FFE0D64
; ---------------------------------------------------------------------------

loc_6FFE12D6:				; DATA XREF: sub_6FFE0440+2Fo
		add	ebp, 8
		mov	eax, [ebp+var_F8]
		mov	edx, [ebp+var_F4]
		cmp	eax, 1
		mov	[ebp+var_130], edx
		jz	loc_6FFE1511
		cmp	eax, 2
		jz	loc_6FFE14F6
		cmp	eax, 3
		jz	loc_6FFE1419
		cmp	eax, 4
		jz	loc_6FFE1851
		cmp	eax, 5
		jz	loc_6FFE1837
		cmp	eax, 6
		nop
		lea	esi, [esi+0]
		jz	loc_6FFE1486
		cmp	eax, 7
		jz	loc_6FFE181D
		cmp	eax, 8
		jz	loc_6FFE174B
		cmp	eax, 9
		nop
		lea	esi, [esi+0]
		jz	loc_6FFE1764
		cmp	eax, 0Ah
		jz	loc_6FFE17D7
		cmp	eax, 0Bh
		jz	loc_6FFE177C
		cmp	eax, 0Ch
		nop
		lea	esi, [esi+0]
		jz	loc_6FFE1791
		cmp	eax, 0Dh
		jz	loc_6FFE1718
		cmp	eax, 0Eh
		jz	loc_6FFE1731
		cmp	eax, 0Fh
		nop
		lea	esi, [esi+0]
		jz	loc_6FFE1705
		cmp	eax, 10h
		jz	loc_6FFE142F
		cmp	eax, 11h
		jz	loc_6FFE16BB
		cmp	eax, 12h
		nop
		lea	esi, [esi+0]
		jz	loc_6FFE16EA
		cmp	eax, 13h
		jz	loc_6FFE16D0
		cmp	eax, 14h
		jz	loc_6FFE149B
		cmp	eax, 15h
		nop
		lea	esi, [esi+0]
		jz	loc_6FFE14B0
		cmp	eax, 16h
		jz	loc_6FFE14C9
		cmp	eax, 17h
		jz	short loc_6FFE1444
		cmp	eax, 18h
		jz	loc_6FFE1590
		cmp	eax, 19h
		jz	loc_6FFE15BF
		cmp	eax, 1Ah
		jz	loc_6FFE15A5
		cmp	eax, 1Bh
		jz	loc_6FFE1575
		cmp	eax, 1Ch
		nop
		lea	esi, [esi+0]
		jz	loc_6FFE14E3
		cmp	eax, 1Dh
		jz	short loc_6FFE1459
		mov	ecx, [ebp+var_150]
		mov	[esp], ecx
		call	sub_6FFEAE50

loc_6FFE1419:				; CODE XREF: sub_6FFE0440+EC0j
					; sub_6FFE0440+10CCj ...
		lea	eax, [ebp+var_58]
		mov	[esp], eax
		mov	[ebp+var_F8], 0
		call	ds:_ZN5QFontD1Ev

loc_6FFE142F:				; CODE XREF: sub_6FFE0440+F49j
					; sub_6FFE0440+12D3j ...
		lea	eax, [ebp+var_20]
		mov	[esp], eax
		mov	[ebp+var_F8], 0
		call	sub_6FFEA140

loc_6FFE1444:				; CODE XREF: sub_6FFE0440+F92j
					; sub_6FFE0440+109Ej ...
		lea	eax, [ebp+var_10]
		mov	[esp], eax
		mov	[ebp+var_F8], 0
		call	sub_6FFEA140

loc_6FFE1459:				; CODE XREF: sub_6FFE0440+FC9j
					; sub_6FFE0440+10B1j ...
		lea	eax, [ebp+var_C]
		mov	[esp], eax
		mov	[ebp+var_F8], 0
		call	sub_6FFE4290
		mov	eax, [ebp+var_130]
		mov	[ebp+var_F8], 0FFFFFFFFh
		mov	[esp], eax
		call	_Unwind_SjLj_Resume
; ---------------------------------------------------------------------------

loc_6FFE1486:				; CODE XREF: sub_6FFE0440+EE0j
		lea	eax, [ebp+var_40]
		mov	[esp], eax
		mov	[ebp+var_F8], 0
		call	sub_6FFEA140

loc_6FFE149B:				; CODE XREF: sub_6FFE0440+F72j
		lea	eax, [ebp+var_1C]
		mov	[esp], eax
		mov	[ebp+var_F8], 0
		call	sub_6FFEA140

loc_6FFE14B0:				; CODE XREF: sub_6FFE0440+F80j
		lea	eax, [ebp+var_88]
		mov	[esp], eax
		mov	[ebp+var_F8], 0
		call	ds:_ZN8QVariantD1Ev

loc_6FFE14C9:				; CODE XREF: sub_6FFE0440+F89j
		lea	eax, [ebp+var_18]
		mov	[esp], eax
		mov	[ebp+var_F8], 0
		call	sub_6FFEA140
		jmp	loc_6FFE1444
; ---------------------------------------------------------------------------

loc_6FFE14E3:				; CODE XREF: sub_6FFE0440+FC0j
		mov	eax, [ebp+var_120]
		mov	[esp], eax
		call	sub_6FFEAE50
		jmp	loc_6FFE1459
; ---------------------------------------------------------------------------

loc_6FFE14F6:				; CODE XREF: sub_6FFE0440+EB7j
		lea	eax, [ebp+var_50]
		mov	[esp], eax
		mov	[ebp+var_F8], 0
		call	ds:_ZN5QIconD1Ev
		jmp	loc_6FFE1419
; ---------------------------------------------------------------------------

loc_6FFE1511:				; CODE XREF: sub_6FFE0440+EAEj
		lea	eax, [ebp+var_4C]
		mov	[esp], eax
		mov	[ebp+var_F8], 0
		call	sub_6FFEA140
		jmp	loc_6FFE1419
; ---------------------------------------------------------------------------

loc_6FFE152B:				; CODE XREF: sub_6FFE0440+54Ej
		mov	eax, [ebp+var_48]
		mov	[ebp+var_F8], 11h
		mov	[esp], eax
		call	ds:_ZN7QString4freeEPNS_4DataE
		jmp	loc_6FFE0994
; ---------------------------------------------------------------------------

loc_6FFE1546:				; CODE XREF: sub_6FFE0440+4FDj
		lea	eax, [ebp+var_44]
		mov	[esp+4], eax
		lea	eax, [ebp+var_20]
		mov	[ebp+var_44], offset aRadio_0 ;	"radio"
		mov	[esp], eax
		mov	[ebp+var_F8], 11h
		call	ds:_ZNK7QStringeqERK13QLatin1String
		mov	[ebp+var_169], al
		jmp	loc_6FFE0994
; ---------------------------------------------------------------------------

loc_6FFE1575:				; CODE XREF: sub_6FFE0440+FB2j
		lea	eax, [ebp+var_68]
		mov	[esp], eax
		mov	[ebp+var_F8], 0
		call	ds:_ZN8QVariantD1Ev
		jmp	loc_6FFE1459
; ---------------------------------------------------------------------------

loc_6FFE1590:				; CODE XREF: sub_6FFE0440+F97j
		lea	eax, [ebp+var_10]
		mov	[esp], eax
		mov	[ebp+var_F8], 0
		call	sub_6FFEA140

loc_6FFE15A5:				; CODE XREF: sub_6FFE0440+FA9j
					; sub_6FFE0440+1195j
		lea	eax, [ebp+var_14]
		mov	[esp], eax
		mov	[ebp+var_F8], 0
		call	sub_6FFEA140
		jmp	loc_6FFE1459
; ---------------------------------------------------------------------------

loc_6FFE15BF:				; CODE XREF: sub_6FFE0440+FA0j
		lea	eax, [ebp+var_78]
		mov	[esp], eax
		mov	[ebp+var_F8], 0
		call	ds:_ZN8QVariantD1Ev
		jmp	short loc_6FFE15A5
; ---------------------------------------------------------------------------

loc_6FFE15D7:				; CODE XREF: sub_6FFE0440+614j
		mov	[esp+4], eax
		lea	eax, [ebp+var_2C]
		mov	[esp], eax
		mov	[ebp+var_F8], 0Bh
		call	ds:_ZN9QListData7reallocEi
		jmp	loc_6FFE0A73
; ---------------------------------------------------------------------------

loc_6FFE15F6:				; CODE XREF: sub_6FFE0440+55Bj
		mov	dword ptr [esp], 8 ; size_t
		mov	[ebp+var_F8], 11h
		call	sub_6FFEAE70
		mov	[ebp+var_15C], eax
		mov	eax, [ebp+var_120]
		mov	edx, [ebp+var_15C]
		mov	[ebp+var_F8], 10h
		mov	[esp+4], eax
		mov	[esp], edx
		call	ds:_ZN12QActionGroupC1EP7QObject
		mov	eax, [ebp+var_120]
		mov	edx, [ebp+var_15C]
		mov	[ebp+var_F8], 11h
		mov	[esp+4], eax
		mov	[esp], edx
		call	ds:_ZN12QActionGroup9addActionEP7QAction
		jmp	loc_6FFE09A1
; ---------------------------------------------------------------------------

loc_6FFE165D:				; CODE XREF: sub_6FFE0440+297j
		lea	eax, [ebp+var_3C]
		mov	[esp+4], eax
		lea	eax, [ebp+var_1C]
		mov	[ebp+var_3C], offset aSubmenu_1	; "submenu"
		mov	[esp], eax
		mov	[ebp+var_F8], 15h
		call	ds:_ZNK7QStringeqERK13QLatin1String
		mov	[ebp+var_16A], al
		jmp	loc_6FFE0738
; ---------------------------------------------------------------------------

loc_6FFE168C:				; CODE XREF: sub_6FFE0440+19Aj
		lea	eax, [ebp+var_34]
		mov	[esp+4], eax
		lea	eax, [ebp+var_10]
		mov	[ebp+var_34], offset aSeparator_0 ; "separator"
		mov	[esp], eax
		mov	[ebp+var_F8], 18h
		call	ds:_ZNK7QStringeqERK13QLatin1String
		mov	[ebp+var_16B], al
		jmp	loc_6FFE063B
; ---------------------------------------------------------------------------

loc_6FFE16BB:				; CODE XREF: sub_6FFE0440+F52j
		lea	eax, [ebp+var_20]
		mov	[esp], eax
		mov	[ebp+var_F8], 0
		call	sub_6FFEA140

loc_6FFE16D0:				; CODE XREF: sub_6FFE0440+F69j
					; sub_6FFE0440+12C3j
		lea	eax, [ebp+var_24]
		mov	[esp], eax
		mov	[ebp+var_F8], 0
		call	sub_6FFEA140
		jmp	loc_6FFE1444
; ---------------------------------------------------------------------------

loc_6FFE16EA:				; CODE XREF: sub_6FFE0440+F60j
		lea	eax, [ebp+var_98]
		mov	[esp], eax
		mov	[ebp+var_F8], 0
		call	ds:_ZN8QVariantD1Ev
		jmp	short loc_6FFE16D0
; ---------------------------------------------------------------------------

loc_6FFE1705:				; CODE XREF: sub_6FFE0440+F40j
		mov	ecx, [ebp+var_15C]
		mov	[esp], ecx
		call	sub_6FFEAE50
		jmp	loc_6FFE142F
; ---------------------------------------------------------------------------

loc_6FFE1718:				; CODE XREF: sub_6FFE0440+F29j
		lea	eax, [ebp+var_A8]
		mov	[esp], eax
		mov	[ebp+var_F8], 0
		call	ds:_ZN8QVariantD1Ev

loc_6FFE1731:				; CODE XREF: sub_6FFE0440+F32j
		lea	eax, [ebp+var_28]
		mov	[esp], eax
		mov	[ebp+var_F8], 0
		call	sub_6FFEA140
		jmp	loc_6FFE142F
; ---------------------------------------------------------------------------

loc_6FFE174B:				; CODE XREF: sub_6FFE0440+EF2j
		lea	eax, [ebp+var_C8]
		mov	[esp], eax
		mov	[ebp+var_F8], 0
		call	ds:_ZN8QVariantD1Ev

loc_6FFE1764:				; CODE XREF: sub_6FFE0440+F00j
		lea	eax, [ebp+var_B8]
		mov	[esp], eax
		mov	[ebp+var_F8], 0
		call	sub_6FFDF990

loc_6FFE177C:				; CODE XREF: sub_6FFE0440+F12j
		lea	eax, [ebp+var_30]
		mov	[esp], eax
		mov	[ebp+var_F8], 0
		call	sub_6FFDF990

loc_6FFE1791:				; CODE XREF: sub_6FFE0440+F20j
		mov	ecx, [ebp+var_130]
		mov	eax, [ebp+var_2C]
		mov	[ebp+var_12C], ecx
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jnz	short loc_6FFE17C6
		mov	eax, [ebp+var_2C]
		mov	[ebp+var_F8], 0
		mov	[esp+4], eax
		lea	eax, [ebp+var_2C]
		mov	[esp], eax
		call	sub_6FFE8E50

loc_6FFE17C6:				; CODE XREF: sub_6FFE0440+1368j
		mov	eax, [ebp+var_12C]
		mov	[ebp+var_130], eax
		jmp	loc_6FFE142F
; ---------------------------------------------------------------------------

loc_6FFE17D7:				; CODE XREF: sub_6FFE0440+F09j
		mov	ecx, [ebp+var_130]
		mov	eax, [ebp+var_2C]
		mov	[ebp+var_128], ecx
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jnz	short loc_6FFE180C
		mov	eax, [ebp+var_2C]
		mov	[ebp+var_F8], 0
		mov	[esp+4], eax
		lea	eax, [ebp+var_2C]
		mov	[esp], eax
		call	sub_6FFE8E50

loc_6FFE180C:				; CODE XREF: sub_6FFE0440+13AEj
		mov	eax, [ebp+var_128]
		mov	[ebp+var_130], eax
		jmp	loc_6FFE142F
; ---------------------------------------------------------------------------

loc_6FFE181D:				; CODE XREF: sub_6FFE0440+EE9j
		lea	eax, [ebp+var_38]
		mov	[esp], eax
		mov	[ebp+var_F8], 0
		call	sub_6FFEA140
		jmp	loc_6FFE1444
; ---------------------------------------------------------------------------

loc_6FFE1837:				; CODE XREF: sub_6FFE0440+ED2j
		lea	eax, [ebp+var_48]
		mov	[esp], eax
		mov	[ebp+var_F8], 0
		call	sub_6FFEA140
		jmp	loc_6FFE142F
; ---------------------------------------------------------------------------

loc_6FFE1851:				; CODE XREF: sub_6FFE0440+EC9j
		mov	ecx, [ebp+var_124]
		mov	[esp], ecx
		call	sub_6FFEAE50
		jmp	loc_6FFE142F
sub_6FFE0440	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_6FFE1870	proc near		; CODE XREF: sub_6FFD10F0+144p
					; sub_6FFD10F0+2D1p ...

var_D0		= dword	ptr -0D0h
var_C0		= dword	ptr -0C0h
var_BB		= byte ptr -0BBh
var_BA		= byte ptr -0BAh
var_B9		= byte ptr -0B9h
var_B8		= dword	ptr -0B8h
var_B4		= dword	ptr -0B4h
var_B0		= dword	ptr -0B0h
var_AC		= byte ptr -0ACh
var_A8		= dword	ptr -0A8h
var_94		= dword	ptr -94h
var_90		= dword	ptr -90h
var_8C		= dword	ptr -8Ch
var_88		= dword	ptr -88h
var_84		= dword	ptr -84h
var_70		= byte ptr -70h
var_60		= byte ptr -60h
var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= byte ptr -2Ch
var_28		= dword	ptr -28h
var_24		= byte ptr -24h
var_20		= byte ptr -20h
var_1C		= byte ptr -1Ch
var_18		= byte ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= byte ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h

		push	ebp
		mov	ebp, esp
		lea	eax, [ebp+var_8]
		push	ebx
		sub	esp, 0E4h
		mov	[ebp+var_8C], eax
		lea	eax, [ebp+var_AC]
		mov	[esp], eax
		mov	[ebp+var_94], offset sub_6FFEC1F0
		mov	[ebp+var_90], offset word_6FFED042
		mov	[ebp+var_88], offset sub_6FFE220E
		mov	[ebp+var_84], esp
		call	_Unwind_SjLj_Register
		mov	eax, ds:_ZN7QString16codecForCStringsE
		mov	eax, [eax]
		test	eax, eax
		jz	loc_6FFE1B20
		lea	edx, [ebp+var_3C]
		mov	[esp], edx
		mov	dword ptr [esp+8], 0FFFFFFFFh
		mov	dword ptr [esp+4], offset aLabel_0 ; "label"
		mov	[ebp+var_A8], 0FFFFFFFFh
		call	ds:_ZN7QString9fromAsciiEPKci
		mov	edx, [ebp+arg_8]
		lea	eax, [ebp+var_3C]
		mov	[ebp+var_A8], 3
		sub	esp, 4
		mov	[esp+4], eax
		mov	[esp], edx
		call	ds:_ZNK7QStringeqERKS_
		mov	[ebp+var_B9], al
		mov	eax, [ebp+var_3C]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jnz	short loc_6FFE1933
		mov	eax, [ebp+var_3C]
		mov	[ebp+var_A8], 0FFFFFFFFh
		mov	[esp], eax
		call	ds:_ZN7QString4freeEPNS_4DataE

loc_6FFE1933:				; CODE XREF: sub_6FFE1870+ABj
					; sub_6FFE1870+2DAj
		cmp	[ebp+var_B9], 0
		jz	loc_6FFE19E1
		mov	eax, [ebp+arg_C]
		lea	edx, [ebp+var_10]
		mov	[esp], edx
		mov	[ebp+var_A8], 0FFFFFFFFh
		mov	[esp+4], eax
		call	ds:_ZNK8QVariant8toStringEv
		lea	eax, [ebp+var_14]
		lea	edx, [ebp+var_10]
		mov	[ebp+var_A8], 10h
		sub	esp, 4
		mov	dword ptr [esp+0Ch], 26h
		mov	dword ptr [esp+8], 5Fh
		mov	[esp+4], edx
		mov	[esp], eax
		call	sub_6FFD52A0
		sub	esp, 4
		mov	eax, [ebp+var_10]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jz	loc_6FFE1AD0

loc_6FFE19A0:				; CODE XREF: sub_6FFE1870+276j
		mov	edx, [ebp+arg_4]
		lea	eax, [ebp+var_14]
		mov	[esp+4], eax
		mov	[ebp+var_A8], 0Fh
		mov	[esp], edx
		call	ds:_ZN7QAction7setTextERK7QString
		mov	eax, [ebp+var_14]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jz	loc_6FFE1AB2

loc_6FFE19CE:				; CODE XREF: sub_6FFE1870+23Dj
					; sub_6FFE1870+258j ...
		lea	eax, [ebp+var_AC]
		mov	[esp], eax
		call	_Unwind_SjLj_Unregister
		mov	ebx, [ebp+var_4]
		leave
		retn
; ---------------------------------------------------------------------------

loc_6FFE19E1:				; CODE XREF: sub_6FFE1870+CAj
		mov	eax, ds:_ZN7QString16codecForCStringsE
		mov	ebx, [eax]
		test	ebx, ebx
		jz	loc_6FFE1AF0
		lea	edx, [ebp+var_44]
		mov	[esp], edx
		mov	dword ptr [esp+8], 0FFFFFFFFh
		mov	dword ptr [esp+4], offset aEnabled_0 ; "enabled"
		mov	[ebp+var_A8], 0FFFFFFFFh
		call	ds:_ZN7QString9fromAsciiEPKci
		mov	edx, [ebp+arg_8]
		lea	eax, [ebp+var_44]
		mov	[ebp+var_A8], 2
		sub	esp, 4
		mov	[esp+4], eax
		mov	[esp], edx
		call	ds:_ZNK7QStringeqERKS_
		mov	[ebp+var_BA], al
		mov	eax, [ebp+var_44]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jnz	short loc_6FFE1A5F
		mov	eax, [ebp+var_44]
		mov	[ebp+var_A8], 0FFFFFFFFh
		mov	[esp], eax
		call	ds:_ZN7QString4freeEPNS_4DataE

loc_6FFE1A5F:				; CODE XREF: sub_6FFE1870+1D7j
					; sub_6FFE1870+2AAj
		cmp	[ebp+var_BA], 0
		jz	loc_6FFE1B50
		mov	edx, [ebp+arg_C]
		mov	eax, 1
		test	dword ptr [edx+8], 3FFFFFFFh
		jz	short loc_6FFE1A93
		mov	[esp], edx
		mov	[ebp+var_A8], 0FFFFFFFFh
		call	ds:_ZNK8QVariant6toBoolEv
		movzx	eax, al

loc_6FFE1A93:				; CODE XREF: sub_6FFE1870+20Bj
		mov	edx, [ebp+arg_4]
		mov	[esp+4], eax
		mov	[ebp+var_A8], 0FFFFFFFFh
		mov	[esp], edx
		call	ds:_ZN7QAction10setEnabledEb
		jmp	loc_6FFE19CE
; ---------------------------------------------------------------------------

loc_6FFE1AB2:				; CODE XREF: sub_6FFE1870+158j
		mov	eax, [ebp+var_14]
		mov	[ebp+var_A8], 0FFFFFFFFh
		mov	[esp], eax
		call	ds:_ZN7QString4freeEPNS_4DataE
		jmp	loc_6FFE19CE
; ---------------------------------------------------------------------------
		align 10h

loc_6FFE1AD0:				; CODE XREF: sub_6FFE1870+12Aj
		mov	eax, [ebp+var_10]
		mov	[ebp+var_A8], 0Fh
		mov	[esp], eax
		call	ds:_ZN7QString4freeEPNS_4DataE
		jmp	loc_6FFE19A0
; ---------------------------------------------------------------------------
		align 10h

loc_6FFE1AF0:				; CODE XREF: sub_6FFE1870+17Aj
		mov	edx, [ebp+arg_8]
		lea	eax, [ebp+var_40]
		mov	[ebp+var_40], offset aEnabled_0	; "enabled"
		mov	[esp+4], eax
		mov	[ebp+var_A8], 0FFFFFFFFh
		mov	[esp], edx
		call	ds:_ZNK7QStringeqERK13QLatin1String
		mov	[ebp+var_BA], al
		jmp	loc_6FFE1A5F
; ---------------------------------------------------------------------------
		align 10h

loc_6FFE1B20:				; CODE XREF: sub_6FFE1870+4Ej
		mov	edx, [ebp+arg_8]
		lea	eax, [ebp+var_38]
		mov	[ebp+var_38], offset aLabel_0 ;	"label"
		mov	[esp+4], eax
		mov	[ebp+var_A8], 0FFFFFFFFh
		mov	[esp], edx
		call	ds:_ZNK7QStringeqERK13QLatin1String
		mov	[ebp+var_B9], al
		jmp	loc_6FFE1933
; ---------------------------------------------------------------------------
		align 10h

loc_6FFE1B50:				; CODE XREF: sub_6FFE1870+1F6j
		mov	eax, ds:_ZN7QString16codecForCStringsE
		mov	ecx, [eax]
		test	ecx, ecx
		jz	loc_6FFE1E45
		lea	eax, [ebp+var_4C]
		mov	[esp], eax
		mov	dword ptr [esp+8], 0FFFFFFFFh
		mov	dword ptr [esp+4], offset aToggleState_0 ; "toggle-state"
		mov	[ebp+var_A8], 0FFFFFFFFh
		call	ds:_ZN7QString9fromAsciiEPKci
		mov	eax, [ebp+arg_8]
		lea	edx, [ebp+var_4C]
		mov	[ebp+var_A8], 1
		sub	esp, 4
		mov	[esp+4], edx
		mov	[esp], eax
		call	ds:_ZNK7QStringeqERKS_
		mov	[ebp+var_BB], al
		mov	eax, [ebp+var_4C]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jnz	short loc_6FFE1BCE
		mov	eax, [ebp+var_4C]
		mov	[ebp+var_A8], 0FFFFFFFFh
		mov	[esp], eax
		call	ds:_ZN7QString4freeEPNS_4DataE

loc_6FFE1BCE:				; CODE XREF: sub_6FFE1870+346j
					; sub_6FFE1870+5FFj
		cmp	[ebp+var_BB], 0
		jz	short loc_6FFE1C34
		mov	eax, [ebp+arg_4]
		mov	[ebp+var_A8], 0FFFFFFFFh
		mov	[esp], eax
		call	ds:_ZNK7QAction11isCheckableEv
		test	al, al
		jz	loc_6FFE19CE
		mov	edx, [ebp+arg_C]
		test	dword ptr [edx+8], 3FFFFFFFh
		jz	loc_6FFE19CE
		mov	dword ptr [esp+4], 0
		mov	[esp], edx
		call	ds:_ZNK8QVariant5toIntEPb
		cmp	eax, 1
		setz	al
		movzx	eax, al
		mov	[esp+4], eax
		mov	eax, [ebp+arg_4]
		mov	[esp], eax
		call	ds:_ZN7QAction10setCheckedEb
		jmp	loc_6FFE19CE
; ---------------------------------------------------------------------------

loc_6FFE1C34:				; CODE XREF: sub_6FFE1870+365j
		mov	edx, [ebp+arg_8]
		mov	dword ptr [esp+4], offset aIconName_0 ;	"icon-name"
		mov	[ebp+var_A8], 0FFFFFFFFh
		mov	[esp], edx
		call	sub_6FFEAAE0
		test	al, al
		jz	loc_6FFE1DB5
		mov	edx, [ebp+arg_C]
		lea	eax, [ebp+var_14]
		mov	[esp], eax
		mov	[esp+4], edx
		call	ds:_ZNK8QVariant8toStringEv
		mov	edx, ds:off_6FFF51F4
		lea	eax, [ebp+var_70]
		mov	[ebp+var_A8], 0Eh
		sub	esp, 4
		mov	[esp+8], edx
		mov	edx, [ebp+arg_4]
		mov	[esp], eax
		mov	[esp+4], edx
		call	ds:_ZNK7QObject8propertyEPKc
		sub	esp, 4
		lea	eax, [ebp+var_18]
		lea	edx, [ebp+var_70]
		mov	[esp+4], edx
		mov	[esp], eax
		mov	[ebp+var_A8], 0Dh
		call	ds:_ZNK8QVariant8toStringEv
		sub	esp, 4
		lea	eax, [ebp+var_70]
		mov	[esp], eax
		mov	[ebp+var_A8], 0Ch
		call	ds:_ZN8QVariantD1Ev
		lea	eax, [ebp+var_14]
		mov	[esp+4], eax
		lea	eax, [ebp+var_18]
		mov	[esp], eax
		call	ds:_ZNK7QStringeqERKS_
		test	al, al
		jnz	loc_6FFE1D86
		lea	eax, [ebp+var_14]
		mov	[esp+4], eax
		lea	eax, [ebp+var_60]
		mov	[esp], eax
		call	ds:_ZN8QVariantC1ERK7QString
		lea	eax, [ebp+var_60]
		mov	edx, [ebp+arg_4]
		mov	[esp+8], eax
		mov	eax, ds:off_6FFF51F4
		mov	[ebp+var_A8], 0Bh
		mov	[esp], edx
		mov	[esp+4], eax
		call	ds:_ZN7QObject11setPropertyEPKcRK8QVariant
		lea	eax, [ebp+var_60]
		mov	[esp], eax
		mov	[ebp+var_A8], 0Ch
		call	ds:_ZN8QVariantD1Ev
		mov	eax, [ebp+var_14]
		mov	edx, [eax+8]
		test	edx, edx
		jnz	loc_6FFE1E92
		lea	eax, [ebp+var_20]
		mov	[esp], eax
		call	ds:_ZN5QIconC1Ev
		lea	eax, [ebp+var_20]
		mov	[esp+4], eax
		mov	eax, [ebp+arg_4]
		mov	[ebp+var_A8], 0Ah
		mov	[esp], eax
		call	ds:_ZN7QAction7setIconERK5QIcon
		lea	eax, [ebp+var_20]
		mov	[esp], eax
		mov	[ebp+var_A8], 0Ch
		call	ds:_ZN5QIconD1Ev

loc_6FFE1D86:				; CODE XREF: sub_6FFE1870+474j
					; sub_6FFE1870+67Fj
		lea	eax, [ebp+var_18]
		mov	[esp], eax
		mov	[ebp+var_A8], 0Eh
		call	sub_6FFEA140
		lea	eax, [ebp+var_14]
		mov	[esp], eax
		mov	[ebp+var_A8], 0FFFFFFFFh
		call	sub_6FFEA140
		jmp	loc_6FFE19CE
; ---------------------------------------------------------------------------

loc_6FFE1DB5:				; CODE XREF: sub_6FFE1870+3E3j
		mov	eax, [ebp+arg_8]
		mov	dword ptr [esp+4], offset aIconData_0 ;	"icon-data"
		mov	[ebp+var_A8], 0FFFFFFFFh
		mov	[esp], eax
		call	sub_6FFEAAE0
		test	al, al
		jnz	loc_6FFE1E74
		mov	eax, [ebp+arg_8]
		mov	dword ptr [esp+4], offset aVisible_0 ; "visible"
		mov	[ebp+var_A8], 0FFFFFFFFh
		mov	[esp], eax
		call	sub_6FFEAAE0
		test	al, al
		jz	loc_6FFE1EF4
		mov	edx, [ebp+arg_C]
		mov	eax, 1
		test	dword ptr [edx+8], 3FFFFFFFh
		jz	short loc_6FFE1E26
		mov	[esp], edx
		mov	[ebp+var_A8], 0FFFFFFFFh
		call	ds:_ZNK8QVariant6toBoolEv
		movzx	eax, al

loc_6FFE1E26:				; CODE XREF: sub_6FFE1870+59Ej
		mov	edx, [ebp+arg_4]
		mov	[esp+4], eax
		mov	[ebp+var_A8], 0FFFFFFFFh
		mov	[esp], edx
		call	ds:_ZN7QAction10setVisibleEb
		jmp	loc_6FFE19CE
; ---------------------------------------------------------------------------

loc_6FFE1E45:				; CODE XREF: sub_6FFE1870+2E9j
		mov	edx, [ebp+arg_8]
		lea	eax, [ebp+var_48]
		mov	[ebp+var_48], offset aToggleState_0 ; "toggle-state"
		mov	[esp+4], eax
		mov	[ebp+var_A8], 0FFFFFFFFh
		mov	[esp], edx
		call	ds:_ZNK7QStringeqERK13QLatin1String
		mov	[ebp+var_BB], al
		jmp	loc_6FFE1BCE
; ---------------------------------------------------------------------------

loc_6FFE1E74:				; CODE XREF: sub_6FFE1870+564j
		mov	edx, [ebp+arg_C]
		mov	eax, [ebp+arg_4]
		mov	[esp+8], edx
		mov	edx, [ebp+arg_0]
		mov	[esp+4], eax
		mov	[esp], edx
		call	sub_6FFE24B0
		jmp	loc_6FFE19CE
; ---------------------------------------------------------------------------

loc_6FFE1E92:				; CODE XREF: sub_6FFE1870+4D1j
		mov	edx, [ebp+arg_0]
		lea	ecx, [ebp+var_1C]
		lea	ebx, [ebp+var_14]
		mov	eax, [edx]
		mov	edx, [eax]
		mov	[esp+8], ebx
		mov	[esp+4], eax
		mov	[esp], ecx
		mov	eax, [edx+34h]
		mov	[ebp+var_A8], 0Ch
		call	eax
		sub	esp, 4
		lea	eax, [ebp+var_1C]
		mov	[esp+4], eax
		mov	eax, [ebp+arg_4]
		mov	[ebp+var_A8], 9
		mov	[esp], eax
		call	ds:_ZN7QAction7setIconERK5QIcon
		lea	eax, [ebp+var_1C]
		mov	[esp], eax
		mov	[ebp+var_A8], 0Ch
		call	ds:_ZN5QIconD1Ev
		jmp	loc_6FFE1D86
; ---------------------------------------------------------------------------

loc_6FFE1EF4:				; CODE XREF: sub_6FFE1870+589j
		mov	eax, [ebp+arg_8]
		mov	dword ptr [esp+4], offset aShortcut_0 ;	"shortcut"
		mov	[ebp+var_A8], 0FFFFFFFFh
		mov	[esp], eax
		call	sub_6FFEAAE0
		test	al, al
		jz	loc_6FFE20E9
		mov	edx, [ebp+arg_C]
		lea	eax, [ebp+var_24]
		mov	[esp], eax
		mov	[esp+4], edx
		call	sub_6FFDBE80
		mov	edx, ds:_ZN9QListData11shared_nullE
		mov	[ebp+var_B0], edx
		mov	[ebp+var_28], edx
		sub	esp, 4
		mov	[ebp+var_B4], edx
		lock inc dword ptr [edx]
		setnz	al
		lea	eax, [ebp+var_24]
		mov	[esp], eax
		mov	[ebp+var_A8], 7
		call	ds:_ZNK13QDBusArgument10beginArrayEv
		mov	edx, [ebp+var_B0]
		mov	[ebp+var_34], edx
		lock inc dword ptr [edx]
		setnz	al
		mov	edx, [ebp+var_34]
		mov	eax, [ebp+var_28]
		mov	[ebp+var_C0], edx
		cmp	eax, edx
		jz	short loc_6FFE1FAB
		lock inc dword ptr [edx]
		setnz	al
		mov	eax, [ebp+var_28]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jz	loc_6FFE21ED

loc_6FFE1F95:				; CODE XREF: sub_6FFE1870+999j
		mov	eax, [ebp+var_C0]
		mov	[ebp+var_28], eax
		test	byte ptr [eax+10h], 1
		jz	loc_6FFE21C6

loc_6FFE1FA8:				; CODE XREF: sub_6FFE1870+978j
		mov	eax, [ebp+var_34]

loc_6FFE1FAB:				; CODE XREF: sub_6FFE1870+70Cj
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jz	loc_6FFE21A5

loc_6FFE1FB9:				; CODE XREF: sub_6FFE1870+951j
		mov	edx, ds:_ZNK13QDBusArgument5atEndEv
		mov	[ebp+var_B8], edx

loc_6FFE1FC5:				; CODE XREF: sub_6FFE1870+7BEj
					; sub_6FFE1870+7DCj
		lea	eax, [ebp+var_24]
		mov	[esp], eax
		mov	[ebp+var_A8], 7
		call	[ebp+var_B8]
		test	al, al
		jnz	short loc_6FFE2051
		mov	eax, [ebp+var_B0]
		mov	edx, [ebp+var_B4]
		mov	[ebp+var_30], eax
		lock inc dword ptr [edx]
		setnz	al
		lea	eax, [ebp+var_30]
		lea	edx, [ebp+var_24]
		mov	[esp+4], eax
		mov	[esp], edx
		mov	[ebp+var_A8], 5
		call	ds:_ZNK13QDBusArgumentrsER11QStringList
		lea	eax, [ebp+var_30]
		lea	edx, [ebp+var_28]
		mov	[esp+4], eax
		mov	[esp], edx
		call	sub_6FFE58E0
		mov	eax, [ebp+var_30]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jnz	short loc_6FFE1FC5
		mov	eax, [ebp+var_30]
		mov	[ebp+var_A8], 7
		mov	[esp+4], eax
		lea	eax, [ebp+var_30]
		mov	[esp], eax
		call	sub_6FFE8E50
		jmp	loc_6FFE1FC5
; ---------------------------------------------------------------------------

loc_6FFE2051:				; CODE XREF: sub_6FFE1870+76Dj
		lea	eax, [ebp+var_24]
		mov	[esp], eax
		call	ds:_ZNK13QDBusArgument8endArrayEv
		lea	eax, [ebp+var_2C]
		lea	edx, [ebp+var_28]
		mov	[esp+4], edx
		mov	[esp], eax
		call	_ZNK16DBusMenuShortcut13toKeySequenceEv
		mov	edx, [ebp+arg_4]
		sub	esp, 4
		lea	eax, [ebp+var_2C]
		mov	[esp+4], eax
		mov	[ebp+var_A8], 6
		mov	[esp], edx
		call	ds:_ZN7QAction11setShortcutERK12QKeySequence
		lea	eax, [ebp+var_2C]
		mov	[esp], eax
		mov	[ebp+var_A8], 7
		call	ds:_ZN12QKeySequenceD1Ev
		mov	eax, [ebp+var_28]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jnz	short loc_6FFE20CE
		mov	eax, [ebp+var_28]
		mov	[ebp+var_A8], 8
		mov	[esp+4], eax
		lea	eax, [ebp+var_28]
		mov	[esp], eax
		call	sub_6FFE5810

loc_6FFE20CE:				; CODE XREF: sub_6FFE1870+840j
		lea	eax, [ebp+var_24]
		mov	[esp], eax
		mov	[ebp+var_A8], 0FFFFFFFFh
		call	ds:_ZN13QDBusArgumentD1Ev
		jmp	loc_6FFE19CE
; ---------------------------------------------------------------------------

loc_6FFE20E9:				; CODE XREF: sub_6FFE1870+6A3j
		lea	edx, [ebp+var_C]
		mov	[esp], edx
		mov	[ebp+var_A8], 0FFFFFFFFh
		call	sub_6FFDF180
		mov	eax, [ebp+var_C]
		mov	byte ptr [eax+14h], 0
		lea	eax, [ebp+var_C]
		mov	[ebp+var_A8], 11h
		sub	esp, 4
		mov	dword ptr [esp+4], offset a31m_1 ; "\x1B[31m"
		mov	[esp], eax
		call	sub_6FFE9FF0
		mov	dword ptr [esp+4], offset aVoidDbusmenu_5 ; "void DBusMenuImporterPrivate::updateAct"...
		mov	[esp], eax
		call	sub_6FFE9FF0
		mov	dword ptr [esp+4], offset a0m_1	; "\x1B[0m:"
		mov	[esp], eax
		call	sub_6FFE9FF0
		mov	edx, eax
		mov	[ebp+var_D0], eax
		mov	eax, [eax]
		mov	byte ptr [eax+14h], 1
		mov	dword ptr [esp+4], 20h
		mov	eax, [edx]
		mov	[esp], eax
		call	ds:_ZN11QTextStreamlsEc
		mov	eax, [ebp+var_D0]
		mov	dword ptr [esp+4], offset aUnhandledPrope ; "Unhandled property	update"
		mov	[esp], eax
		call	sub_6FFE9FF0
		mov	edx, [ebp+arg_8]
		mov	[esp], eax
		mov	[esp+4], edx
		call	sub_6FFEA0E0
		lea	eax, [ebp+var_C]
		mov	[esp], eax
		mov	[ebp+var_A8], 0FFFFFFFFh
		call	sub_6FFE9DD0
		jmp	loc_6FFE19CE
; ---------------------------------------------------------------------------

loc_6FFE21A5:				; CODE XREF: sub_6FFE1870+743j
		mov	eax, [ebp+var_34]
		mov	[ebp+var_A8], 7
		mov	[esp+4], eax
		lea	eax, [ebp+var_34]
		mov	[esp], eax
		call	sub_6FFE5810
		jmp	loc_6FFE1FB9
; ---------------------------------------------------------------------------

loc_6FFE21C6:				; CODE XREF: sub_6FFE1870+732j
		mov	edx, [ebp+var_C0]
		mov	eax, [edx+4]
		mov	[ebp+var_A8], 4
		mov	[esp+4], eax
		lea	eax, [ebp+var_28]
		mov	[esp], eax
		call	sub_6FFE54B0
		jmp	loc_6FFE1FA8
; ---------------------------------------------------------------------------

loc_6FFE21ED:				; CODE XREF: sub_6FFE1870+71Fj
		mov	eax, [ebp+var_28]
		mov	[ebp+var_A8], 4
		mov	[esp+4], eax
		lea	eax, [ebp+var_28]
		mov	[esp], eax
		call	sub_6FFE5810
		jmp	loc_6FFE1F95
sub_6FFE1870	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn

sub_6FFE220E	proc near		; DATA XREF: sub_6FFE1870+30o

arg_0		= dword	ptr  4

		add	ebp, 8
		mov	eax, [ebp-0A8h]
		mov	edx, [ebp-0A4h]
		cmp	eax, 1
		mov	[ebp-0CCh], edx
		jz	loc_6FFE22E4
		cmp	eax, 2
		jz	loc_6FFE24A5
		cmp	eax, 3
		jz	loc_6FFE23C0
		cmp	eax, 4
		jz	loc_6FFE248B
		cmp	eax, 5
		jz	loc_6FFE2470
		cmp	eax, 6
		jz	loc_6FFE2401
		cmp	eax, 7
		lea	esi, [esi+0]
		jz	loc_6FFE2442
		cmp	eax, 8
		jz	loc_6FFE23A8
		cmp	eax, 9
		jz	loc_6FFE2390
		cmp	eax, 0Ah
		nop
		lea	esi, [esi+0]
		jz	loc_6FFE2363
		cmp	eax, 0Bh
		jz	loc_6FFE2379
		cmp	eax, 0Ch
		jz	loc_6FFE2320
		cmp	eax, 0Dh
		nop
		lea	esi, [esi+0]
		jz	loc_6FFE2336
		cmp	eax, 0Eh
		jz	short loc_6FFE231B
		cmp	eax, 0Fh
		xchg	ax, ax
		jz	short loc_6FFE2316
		cmp	eax, 10h
		jz	short loc_6FFE22E9
		lea	eax, [ebp-4Ch]

loc_6FFE22BA:				; CODE XREF: sub_6FFE220E+D9j
					; sub_6FFE220E+10Bj ...
		mov	[esp+0], eax
		mov	dword ptr [ebp-0A8h], 0
		call	sub_6FFEA140
		mov	eax, [ebp-0CCh]
		mov	dword ptr [ebp-0A8h], 0FFFFFFFFh
		mov	[esp+0], eax
		call	_Unwind_SjLj_Resume
; ---------------------------------------------------------------------------

loc_6FFE22E4:				; CODE XREF: sub_6FFE220E+18j
		lea	eax, [ebp-44h]
		jmp	short loc_6FFE22BA
; ---------------------------------------------------------------------------

loc_6FFE22E9:				; CODE XREF: sub_6FFE220E+A7j
		lea	eax, [ebp-0Ch]
		mov	[esp+0], eax
		mov	dword ptr [ebp-0A8h], 0
		call	sub_6FFE9DD0
		mov	eax, [ebp-0CCh]
		mov	dword ptr [ebp-0A8h], 0FFFFFFFFh
		mov	[esp+0], eax
		call	_Unwind_SjLj_Resume
; ---------------------------------------------------------------------------

loc_6FFE2316:				; CODE XREF: sub_6FFE220E+A2j
		lea	eax, [ebp-10h]
		jmp	short loc_6FFE22BA
; ---------------------------------------------------------------------------

loc_6FFE231B:				; CODE XREF: sub_6FFE220E+9Bj
		lea	eax, [ebp-14h]
		jmp	short loc_6FFE22BA
; ---------------------------------------------------------------------------

loc_6FFE2320:				; CODE XREF: sub_6FFE220E+84j
		lea	eax, [ebp-70h]
		mov	[esp+0], eax
		mov	dword ptr [ebp-0A8h], 0
		call	ds:_ZN8QVariantD1Ev

loc_6FFE2336:				; CODE XREF: sub_6FFE220E+92j
					; sub_6FFE220E+180j
		lea	eax, [ebp-14h]
		mov	[esp+0], eax
		mov	dword ptr [ebp-0A8h], 0
		call	sub_6FFEA140
		mov	edx, [ebp-0CCh]
		mov	dword ptr [ebp-0A8h], 0FFFFFFFFh
		mov	[esp+0], edx
		call	_Unwind_SjLj_Resume
; ---------------------------------------------------------------------------

loc_6FFE2363:				; CODE XREF: sub_6FFE220E+72j
		lea	eax, [ebp-60h]
		mov	[esp+0], eax
		mov	dword ptr [ebp-0A8h], 0
		call	ds:_ZN8QVariantD1Ev

loc_6FFE2379:				; CODE XREF: sub_6FFE220E+7Bj
					; sub_6FFE220E+198j ...
		lea	eax, [ebp-18h]
		mov	[esp+0], eax
		mov	dword ptr [ebp-0A8h], 0
		call	sub_6FFEA140
		jmp	short loc_6FFE2336
; ---------------------------------------------------------------------------

loc_6FFE2390:				; CODE XREF: sub_6FFE220E+64j
		lea	eax, [ebp-20h]
		mov	[esp+0], eax
		mov	dword ptr [ebp-0A8h], 0
		call	ds:_ZN5QIconD1Ev
		jmp	short loc_6FFE2379
; ---------------------------------------------------------------------------

loc_6FFE23A8:				; CODE XREF: sub_6FFE220E+5Bj
		lea	eax, [ebp-1Ch]
		mov	[esp+0], eax
		mov	dword ptr [ebp-0A8h], 0
		call	ds:_ZN5QIconD1Ev
		jmp	short loc_6FFE2379
; ---------------------------------------------------------------------------

loc_6FFE23C0:				; CODE XREF: sub_6FFE220E+2Aj
		mov	eax, [ebp-0CCh]
		mov	[ebp-0C8h], eax
		mov	eax, [ebp-34h]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jnz	short loc_6FFE23F5
		mov	eax, [ebp-34h]
		mov	dword ptr [ebp-0A8h], 0
		mov	[esp+arg_0], eax
		lea	eax, [ebp-34h]
		mov	[esp+0], eax
		call	sub_6FFE5810

loc_6FFE23F5:				; CODE XREF: sub_6FFE220E+1C9j
		mov	edx, [ebp-0C8h]
		mov	[ebp-0CCh], edx

loc_6FFE2401:				; CODE XREF: sub_6FFE220E+45j
					; sub_6FFE220E+278j ...
		mov	eax, [ebp-0CCh]
		mov	[ebp-0C4h], eax
		mov	eax, [ebp-28h]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jnz	short loc_6FFE2436
		mov	eax, [ebp-28h]
		mov	dword ptr [ebp-0A8h], 0
		mov	[esp+arg_0], eax
		lea	eax, [ebp-28h]
		mov	[esp+0], eax
		call	sub_6FFE5810

loc_6FFE2436:				; CODE XREF: sub_6FFE220E+20Aj
		mov	edx, [ebp-0C4h]
		mov	[ebp-0CCh], edx

loc_6FFE2442:				; CODE XREF: sub_6FFE220E+52j
		lea	eax, [ebp-24h]
		mov	[esp+0], eax
		mov	dword ptr [ebp-0A8h], 0
		call	ds:_ZN13QDBusArgumentD1Ev
		mov	eax, [ebp-0CCh]
		mov	dword ptr [ebp-0A8h], 0FFFFFFFFh
		mov	[esp+0], eax
		call	_Unwind_SjLj_Resume
; ---------------------------------------------------------------------------

loc_6FFE2470:				; CODE XREF: sub_6FFE220E+3Cj
		lea	eax, [ebp-2Ch]
		mov	[esp+0], eax
		mov	dword ptr [ebp-0A8h], 0
		call	ds:_ZN12QKeySequenceD1Ev
		jmp	loc_6FFE2401
; ---------------------------------------------------------------------------

loc_6FFE248B:				; CODE XREF: sub_6FFE220E+33j
		lea	eax, [ebp-30h]
		mov	[esp+0], eax
		mov	dword ptr [ebp-0A8h], 0
		call	sub_6FFDF990
		jmp	loc_6FFE2401
; ---------------------------------------------------------------------------

loc_6FFE24A5:				; CODE XREF: sub_6FFE220E+21j
		lea	eax, [ebp-3Ch]
		jmp	loc_6FFE22BA
sub_6FFE220E	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_6FFE24B0	proc near		; CODE XREF: sub_6FFE1870+618p

var_AC		= dword	ptr -0ACh
var_A8		= dword	ptr -0A8h
var_A4		= dword	ptr -0A4h
var_A0		= dword	ptr -0A0h
var_9C		= byte ptr -9Ch
var_98		= dword	ptr -98h
var_84		= dword	ptr -84h
var_80		= dword	ptr -80h
var_7C		= dword	ptr -7Ch
var_78		= dword	ptr -78h
var_74		= dword	ptr -74h
var_60		= byte ptr -60h
var_50		= byte ptr -50h
var_3C		= byte ptr -3Ch
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= byte ptr -1Ch
var_18		= byte ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= byte ptr -8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		sub	esp, 0D8h
		lea	eax, [ebp+var_8]
		mov	[ebp+var_7C], eax
		lea	eax, [ebp+var_9C]
		mov	[ebp+var_74], esp
		mov	[ebp+var_84], offset sub_6FFEC1F0
		mov	[ebp+var_80], offset word_6FFED026
		mov	[ebp+var_78], offset sub_6FFE2A9B
		mov	[esp], eax
		call	_Unwind_SjLj_Register
		mov	eax, [ebp+arg_8]
		lea	edx, [ebp+var_C]
		mov	[esp], edx
		mov	[esp+4], eax
		mov	[ebp+var_98], 0FFFFFFFFh
		call	ds:_ZNK8QVariant11toByteArrayEv
		lea	eax, [ebp+var_C]
		sub	esp, 4
		mov	[esp], eax
		mov	[ebp+var_98], 0Ch
		call	ds:_Z5qHashRK10QByteArray
		mov	edx, ds:off_6FFF5214
		mov	[ebp+var_A0], eax
		lea	eax, [ebp+var_50]
		mov	[esp+8], edx
		mov	edx, [ebp+arg_4]
		mov	[esp], eax
		mov	[esp+4], edx
		call	ds:_ZNK7QObject8propertyEPKc
		sub	esp, 4
		lea	eax, [ebp+var_50]
		mov	dword ptr [esp+4], 0
		mov	[esp], eax
		mov	[ebp+var_98], 0Bh
		call	ds:_ZNK8QVariant6toUIntEPb
		mov	[ebp+var_A8], eax
		lea	eax, [ebp+var_50]
		mov	[esp], eax
		mov	[ebp+var_98], 0Ch
		call	ds:_ZN8QVariantD1Ev
		mov	eax, [ebp+var_A8]
		cmp	[ebp+var_A0], eax
		jz	loc_6FFE2957
		mov	edx, [ebp+var_A0]
		lea	eax, [ebp+var_60]
		mov	[esp], eax
		mov	[esp+4], edx
		mov	[ebp+var_98], 0Ch
		call	ds:_ZN8QVariantC1Ej
		lea	eax, [ebp+var_60]
		mov	[esp+8], eax
		mov	eax, ds:off_6FFF5214
		mov	[esp+4], eax
		mov	edx, [ebp+arg_4]
		mov	[esp], edx
		mov	[ebp+var_98], 0Ah
		call	ds:_ZN7QObject11setPropertyEPKcRK8QVariant
		lea	eax, [ebp+var_60]
		mov	[esp], eax
		mov	[ebp+var_98], 0Ch
		call	ds:_ZN8QVariantD1Ev
		lea	eax, [ebp+var_3C]
		mov	[esp], eax
		call	ds:_ZN7QPixmapC1Ev
		mov	eax, [ebp+var_C]
		lea	edx, [ebp+var_20]
		mov	[ebp+var_20], 0
		mov	[esp+10h], edx
		mov	dword ptr [esp+0Ch], 0
		mov	edx, [eax+8]
		mov	[esp+8], edx
		mov	eax, [eax+0Ch]
		mov	[esp+4], eax
		lea	eax, [ebp+var_3C]
		mov	[esp], eax
		mov	[ebp+var_98], 9
		call	ds:_ZN7QPixmap12loadFromDataEPKhjPKc6QFlagsIN2Qt19ImageConversionFlagEE
		test	al, al
		jnz	loc_6FFE28F1
		mov	edx, [ebp+arg_4]
		lea	eax, [ebp+var_14]
		mov	[esp], eax
		mov	[esp+4], edx
		call	ds:_ZNK7QAction4textEv
		sub	esp, 4
		mov	dword ptr [esp], 18h ; size_t
		mov	[ebp+var_98], 8
		call	sub_6FFEAE70
		mov	[ebp+var_A4], eax
		lea	eax, [ebp+var_24]
		mov	[ebp+var_24], 2
		mov	[esp+8], eax
		mov	eax, [ebp+var_A4]
		add	eax, 8
		mov	[esp+4], eax
		mov	eax, [ebp+var_A4]
		mov	[esp], eax
		mov	[ebp+var_98], 4
		call	ds:_ZN11QTextStreamC1EP7QString6QFlagsIN9QIODevice12OpenModeFlagEE
		mov	edx, [ebp+var_A4]
		mov	eax, ds:_ZN7QString11shared_nullE
		mov	[edx+8], eax
		lock inc dword ptr [eax]
		setnz	dl
		mov	eax, [ebp+var_A4]
		mov	dword ptr [eax+0Ch], 1
		mov	dword ptr [eax+10h], 1
		mov	byte ptr [eax+15h], 1
		mov	byte ptr [eax+14h], 0
		mov	[ebp+var_10], eax
		lea	eax, [ebp+var_28]
		mov	dword ptr [esp+8], 0FFFFFFFFh
		mov	dword ptr [esp+4], offset a31m_1 ; "\x1B[31m"
		mov	[esp], eax
		mov	[ebp+var_98], 7
		call	ds:_ZN7QString9fromAsciiEPKci
		sub	esp, 4
		lea	eax, [ebp+var_28]
		mov	[esp+4], eax
		mov	eax, [ebp+var_10]
		mov	[esp], eax
		mov	[ebp+var_98], 3
		call	ds:_ZN11QTextStreamlsERK7QString
		mov	eax, [ebp+var_28]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jz	loc_6FFE2A80

loc_6FFE272D:				; CODE XREF: sub_6FFE24B0+5E6j
		mov	eax, [ebp+var_10]
		cmp	byte ptr [eax+14h], 0
		jnz	loc_6FFE2A60

loc_6FFE273A:				; CODE XREF: sub_6FFE24B0+5CBj
		lea	eax, [ebp+var_2C]
		mov	dword ptr [esp+8], 0FFFFFFFFh
		mov	dword ptr [esp+4], offset aVoidDbusmenu_6 ; "void DBusMenuImporterPrivate::updateAct"...
		mov	[esp], eax
		mov	[ebp+var_98], 7
		call	ds:_ZN7QString9fromAsciiEPKci
		sub	esp, 4
		lea	eax, [ebp+var_2C]
		mov	[esp+4], eax
		mov	eax, [ebp+var_10]
		mov	[esp], eax
		mov	[ebp+var_98], 2
		call	ds:_ZN11QTextStreamlsERK7QString
		mov	eax, [ebp+var_2C]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jz	loc_6FFE2A40

loc_6FFE2791:				; CODE XREF: sub_6FFE24B0+5A6j
		mov	eax, [ebp+var_10]
		cmp	byte ptr [eax+14h], 0
		jnz	loc_6FFE2A20

loc_6FFE279E:				; CODE XREF: sub_6FFE24B0+58Bj
		lea	eax, [ebp+var_30]
		mov	dword ptr [esp+8], 0FFFFFFFFh
		mov	dword ptr [esp+4], offset a0m_1	; "\x1B[0m:"
		mov	[esp], eax
		mov	[ebp+var_98], 7
		call	ds:_ZN7QString9fromAsciiEPKci
		sub	esp, 4
		lea	eax, [ebp+var_30]
		mov	[esp+4], eax
		mov	eax, [ebp+var_10]
		mov	[esp], eax
		mov	[ebp+var_98], 1
		call	ds:_ZN11QTextStreamlsERK7QString
		mov	eax, [ebp+var_30]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jz	loc_6FFE2A00

loc_6FFE27F5:				; CODE XREF: sub_6FFE24B0+566j
		mov	eax, [ebp+var_10]
		cmp	byte ptr [eax+14h], 0
		jnz	loc_6FFE29D6

loc_6FFE2802:				; CODE XREF: sub_6FFE24B0+544j
		mov	byte ptr [eax+14h], 1
		mov	dword ptr [esp+4], 20h
		mov	[esp], eax
		mov	[ebp+var_98], 7
		call	ds:_ZN11QTextStreamlsEc
		lea	eax, [ebp+var_10]
		mov	dword ptr [esp+4], offset aFailedToDecode ; "Failed to decode icon-data	property for"...
		mov	[esp], eax
		call	sub_6FFE9FF0
		mov	[ebp+var_AC], eax
		mov	dword ptr [esp+4], 22h
		mov	eax, [eax]
		mov	[esp], eax
		call	ds:_ZN11QTextStreamlsEc
		lea	edx, [ebp+var_14]
		mov	[esp+4], edx
		mov	[esp], eax
		call	ds:_ZN11QTextStreamlsERK7QString
		mov	dword ptr [esp+4], 22h
		mov	[esp], eax
		call	ds:_ZN11QTextStreamlsEc
		mov	edx, [ebp+var_AC]
		mov	eax, [edx]
		cmp	byte ptr [eax+14h], 0
		jnz	loc_6FFE29C0

loc_6FFE2880:				; CODE XREF: sub_6FFE24B0+521j
		lea	eax, [ebp+var_10]
		mov	[esp], eax
		mov	[ebp+var_98], 8
		call	sub_6FFE9DD0
		mov	eax, [ebp+var_14]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jz	loc_6FFE29A0

loc_6FFE28A6:				; CODE XREF: sub_6FFE24B0+506j
		lea	eax, [ebp+var_18]
		mov	[esp], eax
		mov	[ebp+var_98], 9
		call	ds:_ZN5QIconC1Ev
		lea	eax, [ebp+var_18]
		mov	[esp+4], eax
		mov	eax, [ebp+arg_4]
		mov	[esp], eax
		mov	[ebp+var_98], 6
		call	ds:_ZN7QAction7setIconERK5QIcon
		lea	eax, [ebp+var_18]
		mov	[esp], eax
		mov	[ebp+var_98], 9
		call	ds:_ZN5QIconD1Ev
		jmp	short loc_6FFE2941
; ---------------------------------------------------------------------------

loc_6FFE28F1:				; CODE XREF: sub_6FFE24B0+187j
		lea	eax, [ebp+var_3C]
		mov	[esp+4], eax
		lea	eax, [ebp+var_1C]
		mov	[esp], eax
		mov	[ebp+var_98], 9
		call	ds:_ZN5QIconC1ERK7QPixmap
		lea	eax, [ebp+var_1C]
		mov	[esp+4], eax
		mov	edx, [ebp+arg_4]
		mov	[esp], edx
		mov	[ebp+var_98], 5
		call	ds:_ZN7QAction7setIconERK5QIcon
		lea	eax, [ebp+var_1C]
		mov	[esp], eax
		mov	[ebp+var_98], 9
		call	ds:_ZN5QIconD1Ev

loc_6FFE2941:				; CODE XREF: sub_6FFE24B0+43Fj
		lea	eax, [ebp+var_3C]
		mov	[esp], eax
		mov	[ebp+var_98], 0Ch
		call	ds:_ZN7QPixmapD1Ev

loc_6FFE2957:				; CODE XREF: sub_6FFE24B0+DAj
		mov	eax, [ebp+var_C]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jz	short loc_6FFE2974
		lea	eax, [ebp+var_9C]
		mov	[esp], eax
		call	_Unwind_SjLj_Unregister
		leave
		retn
; ---------------------------------------------------------------------------

loc_6FFE2974:				; CODE XREF: sub_6FFE24B0+4B2j
		mov	eax, [ebp+var_C]
		mov	[esp], eax
		mov	[ebp+var_98], 0FFFFFFFFh
		call	ds:_Z5qFreePv
		lea	eax, [ebp+var_9C]
		mov	[esp], eax
		call	_Unwind_SjLj_Unregister
		leave
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6FFE29A0:				; CODE XREF: sub_6FFE24B0+3F0j
		mov	eax, [ebp+var_14]
		mov	[esp], eax
		mov	[ebp+var_98], 9
		call	ds:_ZN7QString4freeEPNS_4DataE
		jmp	loc_6FFE28A6
; ---------------------------------------------------------------------------
		align 10h

loc_6FFE29C0:				; CODE XREF: sub_6FFE24B0+3CAj
		mov	dword ptr [esp+4], 20h
		mov	[esp], eax
		call	ds:_ZN11QTextStreamlsEc
		jmp	loc_6FFE2880
; ---------------------------------------------------------------------------

loc_6FFE29D6:				; CODE XREF: sub_6FFE24B0+34Cj
		mov	dword ptr [esp+4], 20h
		mov	[esp], eax
		mov	[ebp+var_98], 7
		call	ds:_ZN11QTextStreamlsEc
		mov	eax, [ebp+var_10]
		jmp	loc_6FFE2802
; ---------------------------------------------------------------------------
		align 10h

loc_6FFE2A00:				; CODE XREF: sub_6FFE24B0+33Fj
		mov	eax, [ebp+var_30]
		mov	[esp], eax
		mov	[ebp+var_98], 7
		call	ds:_ZN7QString4freeEPNS_4DataE
		jmp	loc_6FFE27F5
; ---------------------------------------------------------------------------
		align 10h

loc_6FFE2A20:				; CODE XREF: sub_6FFE24B0+2E8j
		mov	dword ptr [esp+4], 20h
		mov	[esp], eax
		mov	[ebp+var_98], 7
		call	ds:_ZN11QTextStreamlsEc
		jmp	loc_6FFE279E
; ---------------------------------------------------------------------------

loc_6FFE2A40:				; CODE XREF: sub_6FFE24B0+2DBj
		mov	eax, [ebp+var_2C]
		mov	[esp], eax
		mov	[ebp+var_98], 7
		call	ds:_ZN7QString4freeEPNS_4DataE
		jmp	loc_6FFE2791
; ---------------------------------------------------------------------------
		align 10h

loc_6FFE2A60:				; CODE XREF: sub_6FFE24B0+284j
		mov	dword ptr [esp+4], 20h
		mov	[esp], eax
		mov	[ebp+var_98], 7
		call	ds:_ZN11QTextStreamlsEc
		jmp	loc_6FFE273A
; ---------------------------------------------------------------------------

loc_6FFE2A80:				; CODE XREF: sub_6FFE24B0+277j
		mov	eax, [ebp+var_28]
		mov	[esp], eax
		mov	[ebp+var_98], 7
		call	ds:_ZN7QString4freeEPNS_4DataE
		jmp	loc_6FFE272D
sub_6FFE24B0	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn

sub_6FFE2A9B	proc near		; DATA XREF: sub_6FFE24B0+29o
		add	ebp, 8
		mov	eax, [ebp-98h]
		mov	edx, [ebp-94h]
		cmp	eax, 1
		mov	[ebp-0B4h], edx
		jz	loc_6FFE2C23
		cmp	eax, 2
		jz	loc_6FFE2C3D
		cmp	eax, 3
		jz	loc_6FFE2BDA
		cmp	eax, 4
		xchg	ax, ax
		jz	loc_6FFE2BBF
		cmp	eax, 5
		jz	loc_6FFE2BA7
		cmp	eax, 6
		jz	short loc_6FFE2B20
		cmp	eax, 7
		jz	short loc_6FFE2B35
		cmp	eax, 8
		lea	esi, [esi+0]
		jz	short loc_6FFE2B4A
		cmp	eax, 9
		jz	loc_6FFE2C08
		cmp	eax, 0Ah
		xchg	ax, ax
		jz	loc_6FFE2BED
		cmp	eax, 0Bh
		jz	short loc_6FFE2B60
		lea	eax, [ebp-30h]
		mov	[esp+0], eax
		mov	dword ptr [ebp-98h], 0
		call	sub_6FFEA140

loc_6FFE2B20:				; CODE XREF: sub_6FFE2A9B+47j
					; sub_6FFE2A9B+19Dj ...
		lea	eax, [ebp-10h]
		mov	[esp+0], eax
		mov	dword ptr [ebp-98h], 0
		call	sub_6FFE9DD0

loc_6FFE2B35:				; CODE XREF: sub_6FFE2A9B+4Cj
					; sub_6FFE2A9B+14Dj
		lea	eax, [ebp-14h]
		mov	[esp+0], eax
		mov	dword ptr [ebp-98h], 0
		call	sub_6FFEA140

loc_6FFE2B4A:				; CODE XREF: sub_6FFE2A9B+55j
					; sub_6FFE2A9B+122j ...
		lea	eax, [ebp-3Ch]
		mov	[esp+0], eax
		mov	dword ptr [ebp-98h], 0
		call	ds:_ZN7QPixmapD1Ev

loc_6FFE2B60:				; CODE XREF: sub_6FFE2A9B+6Ej
					; sub_6FFE2A9B+168j ...
		mov	eax, [ebp-0B4h]
		mov	[ebp-0B0h], eax
		mov	eax, [ebp-0Ch]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jnz	short loc_6FFE2B8F
		mov	eax, [ebp-0Ch]
		mov	[esp+0], eax
		mov	dword ptr [ebp-98h], 0
		call	ds:_Z5qFreePv

loc_6FFE2B8F:				; CODE XREF: sub_6FFE2A9B+DCj
		mov	edx, [ebp-0B0h]
		mov	[esp+0], edx
		mov	dword ptr [ebp-98h], 0FFFFFFFFh
		call	_Unwind_SjLj_Resume
; ---------------------------------------------------------------------------

loc_6FFE2BA7:				; CODE XREF: sub_6FFE2A9B+3Ej
		lea	eax, [ebp-18h]
		mov	[esp+0], eax
		mov	dword ptr [ebp-98h], 0
		call	ds:_ZN5QIconD1Ev
		jmp	short loc_6FFE2B4A
; ---------------------------------------------------------------------------

loc_6FFE2BBF:				; CODE XREF: sub_6FFE2A9B+35j
		lea	eax, [ebp-1Ch]
		mov	[esp+0], eax
		mov	dword ptr [ebp-98h], 0
		call	ds:_ZN5QIconD1Ev
		jmp	loc_6FFE2B4A
; ---------------------------------------------------------------------------

loc_6FFE2BDA:				; CODE XREF: sub_6FFE2A9B+2Aj
		mov	edx, [ebp-0A4h]
		mov	[esp+0], edx
		call	sub_6FFEAE50
		jmp	loc_6FFE2B35
; ---------------------------------------------------------------------------

loc_6FFE2BED:				; CODE XREF: sub_6FFE2A9B+65j
		lea	eax, [ebp-50h]
		mov	[esp+0], eax
		mov	dword ptr [ebp-98h], 0
		call	ds:_ZN8QVariantD1Ev
		jmp	loc_6FFE2B60
; ---------------------------------------------------------------------------

loc_6FFE2C08:				; CODE XREF: sub_6FFE2A9B+5Aj
		lea	eax, [ebp-60h]
		mov	[esp+0], eax
		mov	dword ptr [ebp-98h], 0
		call	ds:_ZN8QVariantD1Ev
		jmp	loc_6FFE2B60
; ---------------------------------------------------------------------------

loc_6FFE2C23:				; CODE XREF: sub_6FFE2A9B+18j
		lea	eax, [ebp-2Ch]
		mov	[esp+0], eax
		mov	dword ptr [ebp-98h], 0
		call	sub_6FFEA140
		jmp	loc_6FFE2B20
; ---------------------------------------------------------------------------

loc_6FFE2C3D:				; CODE XREF: sub_6FFE2A9B+21j
		lea	eax, [ebp-28h]
		mov	[esp+0], eax
		mov	dword ptr [ebp-98h], 0
		call	sub_6FFEA140
		jmp	loc_6FFE2B20
sub_6FFE2A9B	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_6FFE2C60	proc near		; CODE XREF: _ZN16DBusMenuImporterC1ERK7QStringS2_P7QObject+5E0p
					; _ZN16DBusMenuImporterC2ERK7QStringS2_P7QObject+5E0p ...

var_F4		= dword	ptr -0F4h
var_F0		= dword	ptr -0F0h
var_EC		= dword	ptr -0ECh
var_E8		= dword	ptr -0E8h
var_E4		= dword	ptr -0E4h
var_E0		= dword	ptr -0E0h
var_DC		= byte ptr -0DCh
var_D8		= dword	ptr -0D8h
var_C4		= dword	ptr -0C4h
var_C0		= dword	ptr -0C0h
var_BC		= dword	ptr -0BCh
var_B8		= dword	ptr -0B8h
var_B4		= dword	ptr -0B4h
var_A8		= byte ptr -0A8h
var_98		= dword	ptr -98h
var_90		= dword	ptr -90h
var_88		= dword	ptr -88h
var_80		= dword	ptr -80h
var_78		= dword	ptr -78h
var_70		= dword	ptr -70h
var_68		= dword	ptr -68h
var_60		= dword	ptr -60h
var_58		= dword	ptr -58h
var_50		= dword	ptr -50h
var_48		= byte ptr -48h
var_38		= byte ptr -38h
var_28		= byte ptr -28h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= byte ptr -0Ch
var_8		= byte ptr -8
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 128h
		lea	eax, [ebp+var_8]
		mov	[ebp+var_BC], eax
		lea	eax, [ebp+var_DC]
		mov	[esp], eax
		mov	[ebp+var_C4], offset sub_6FFEC1F0
		mov	[ebp+var_C0], offset dword_6FFECE14
		mov	[ebp+var_B8], offset sub_6FFE30D2
		mov	[ebp+var_B4], esp
		call	_Unwind_SjLj_Register
		mov	eax, [ebp+var_90]
		mov	[ebp+var_98], 0
		mov	[ebp+var_88], 0
		mov	[ebp+var_78], 0
		and	eax, 0C0000000h
		mov	[ebp+var_90], eax
		mov	eax, [ebp+var_80]
		mov	byte ptr [ebp+var_90+3], 80h
		mov	[ebp+var_68], 0
		mov	[ebp+var_58], 0
		and	eax, 0C0000000h
		mov	[ebp+var_80], eax
		mov	eax, [ebp+var_70]
		mov	byte ptr [ebp+var_80+3], 80h
		and	eax, 0C0000000h
		mov	[ebp+var_70], eax
		mov	eax, [ebp+var_60]
		mov	byte ptr [ebp+var_70+3], 80h
		and	eax, 0C0000000h
		mov	[ebp+var_60], eax
		mov	eax, [ebp+var_50]
		mov	byte ptr [ebp+var_60+3], 80h
		and	eax, 0C0000000h
		mov	[ebp+var_50], eax
		mov	eax, ds:_ZN9QListData11shared_nullE
		mov	byte ptr [ebp+var_50+3], 80h
		mov	[ebp+var_10], eax
		lock inc dword ptr [eax]
		setnz	dl
		lea	eax, [ebp+var_10]
		mov	[esp+4], eax
		lea	eax, [ebp+var_48]
		mov	[esp], eax
		mov	[ebp+var_D8], 11h
		call	ds:_ZN8QVariantC1ERK11QStringList
		lea	eax, [ebp+var_38]
		mov	dword ptr [esp+4], 1
		mov	[esp], eax
		mov	[ebp+var_D8], 10h
		call	ds:_ZN8QVariantC1Ei
		mov	edx, [ebp+arg_4]
		lea	eax, [ebp+var_28]
		mov	[esp], eax
		mov	[ebp+var_D8], 0Fh
		mov	[esp+4], edx
		call	ds:_ZN8QVariantC1Ei
		mov	dword ptr [esp+4], 0FFFFFFFFh
		mov	dword ptr [esp], offset	aGetlayout ; "GetLayout"
		mov	[ebp+var_D8], 0Eh
		call	ds:_ZN7QString16fromAscii_helperEPKci
		lea	edx, [ebp+var_98]
		mov	ecx, [ebp+arg_0]
		mov	[esp+28h], edx
		lea	edx, [ebp+var_88]
		mov	[esp+24h], edx
		lea	edx, [ebp+var_78]
		mov	[esp+20h], edx
		lea	edx, [ebp+var_68]
		mov	[esp+1Ch], edx
		lea	edx, [ebp+var_58]
		mov	[esp+18h], edx
		lea	edx, [ebp+var_48]
		mov	[esp+14h], edx
		lea	edx, [ebp+var_38]
		mov	[esp+10h], edx
		lea	edx, [ebp+var_28]
		mov	[esp+0Ch], edx
		lea	edx, [ebp+var_14]
		mov	[esp+8], edx
		mov	edx, [ecx+4]
		mov	[ebp+var_14], eax
		lea	eax, [ebp+var_C]
		mov	[esp], eax
		mov	[ebp+var_D8], 0Dh
		mov	[esp+4], edx
		call	ds:_ZN22QDBusAbstractInterface9asyncCallERK7QStringRK8QVariantS5_S5_S5_S5_S5_S5_S5_
		sub	esp, 4
		mov	eax, [ebp+var_14]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jz	loc_6FFE3010

loc_6FFE2E22:				; CODE XREF: sub_6FFE2C60+3C6j
		lea	eax, [ebp+var_28]
		mov	[esp], eax
		mov	[ebp+var_D8], 0Bh
		call	ds:_ZN8QVariantD1Ev
		lea	eax, [ebp+var_38]
		mov	[esp], eax
		mov	[ebp+var_D8], 0Ah
		call	ds:_ZN8QVariantD1Ev
		lea	eax, [ebp+var_48]
		mov	[esp], eax
		mov	[ebp+var_D8], 9
		call	ds:_ZN8QVariantD1Ev
		mov	eax, [ebp+var_10]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jz	loc_6FFE3030

loc_6FFE2E75:				; CODE XREF: sub_6FFE2C60+46Dj
		lea	eax, [ebp+var_58]
		mov	[esp], eax
		mov	[ebp+var_D8], 7
		call	ds:_ZN8QVariantD1Ev
		lea	eax, [ebp+var_68]
		mov	[esp], eax
		mov	[ebp+var_D8], 6
		call	ds:_ZN8QVariantD1Ev
		lea	eax, [ebp+var_78]
		mov	[esp], eax
		mov	[ebp+var_D8], 5
		call	ds:_ZN8QVariantD1Ev
		lea	eax, [ebp+var_88]
		mov	[esp], eax
		mov	[ebp+var_D8], 4
		call	ds:_ZN8QVariantD1Ev
		lea	eax, [ebp+var_98]
		mov	[esp], eax
		mov	[ebp+var_D8], 3
		call	ds:_ZN8QVariantD1Ev
		mov	dword ptr [esp], 0Ch ; size_t
		call	sub_6FFEAE70
		mov	edx, [ebp+arg_0]
		mov	[ebp+var_E4], eax
		mov	ecx, [ebp+var_E4]
		mov	eax, [edx]
		mov	[esp], ecx
		mov	[ebp+var_D8], 2
		mov	[esp+8], eax
		lea	eax, [ebp+var_C]
		mov	[esp+4], eax
		call	ds:_ZN23QDBusPendingCallWatcherC1ERK16QDBusPendingCallP7QObject
		mov	edx, [ebp+arg_4]
		lea	eax, [ebp+var_A8]
		mov	[esp], eax
		mov	[ebp+var_D8], 3
		mov	[esp+4], edx
		call	ds:_ZN8QVariantC1Ei
		lea	eax, [ebp+var_A8]
		mov	ecx, [ebp+var_E4]
		mov	[esp+8], eax
		mov	eax, ds:off_6FFF507C
		mov	[ebp+var_D8], 1
		mov	[esp], ecx
		mov	[esp+4], eax
		call	ds:_ZN7QObject11setPropertyEPKcRK8QVariant
		lea	eax, [ebp+var_A8]
		mov	[esp], eax
		mov	[ebp+var_D8], 3
		call	ds:_ZN8QVariantD1Ev
		mov	dword ptr [esp], offset	a1slotgetlayout	; "1slotGetLayoutFinished(QDBusPendingCall"...
		call	ds:_Z13qFlagLocationPKc
		mov	ecx, [ebp+arg_0]
		mov	[ebp+var_F0], eax
		mov	ecx, [ecx]
		mov	dword ptr [esp], offset	a2finishedQdb_0	; "2finished(QDBusPendingCallWatcher*)"
		mov	[ebp+var_EC], ecx
		call	ds:_Z13qFlagLocationPKc
		mov	edx, [ebp+var_F0]
		mov	ecx, [ebp+var_EC]
		mov	[esp+4], eax
		mov	eax, [ebp+var_E4]
		mov	dword ptr [esp+10h], 0
		mov	[esp+0Ch], edx
		mov	[esp+8], ecx
		mov	[esp], eax
		call	ds:_ZN7QObject7connectEPKS_PKcS1_S3_N2Qt14ConnectionTypeE
		lea	eax, [ebp+var_C]
		mov	[esp], eax
		mov	[ebp+var_D8], 0FFFFFFFFh
		call	ds:_ZN16QDBusPendingCallD1Ev
		lea	eax, [ebp+var_DC]
		mov	[esp], eax
		call	_Unwind_SjLj_Unregister
		mov	eax, [ebp+var_E4]
		leave
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6FFE3010:				; CODE XREF: sub_6FFE2C60+1BCj
		mov	eax, [ebp+var_14]
		mov	[ebp+var_D8], 0Ch
		mov	[esp], eax
		call	ds:_ZN7QString4freeEPNS_4DataE
		jmp	loc_6FFE2E22
; ---------------------------------------------------------------------------
		align 10h

loc_6FFE3030:				; CODE XREF: sub_6FFE2C60+20Fj
		mov	eax, [ebp+var_10]
		mov	[ebp+var_F4], eax
		mov	ecx, [ebp+var_F4]
		add	eax, 14h
		mov	edx, [ecx+0Ch]
		lea	edx, [eax+edx*4]
		mov	[ebp+var_E0], edx
		mov	edx, [ecx+8]
		lea	edx, [eax+edx*4]
		cmp	[ebp+var_E0], edx
		mov	[ebp+var_E8], edx
		jnz	short loc_6FFE3072
		jmp	short loc_6FFE30B4
; ---------------------------------------------------------------------------

loc_6FFE3064:				; CODE XREF: sub_6FFE2C60+429j
		mov	eax, [ebp+var_E0]
		cmp	[ebp+var_E8], eax
		jz	short loc_6FFE30B4

loc_6FFE3072:				; CODE XREF: sub_6FFE2C60+400j
					; sub_6FFE2C60+452j
		sub	[ebp+var_E0], 4
		mov	edx, [ebp+var_E0]
		mov	eax, [edx]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jnz	short loc_6FFE3064
		mov	ecx, [ebp+var_E0]
		mov	eax, [ecx]
		mov	[ebp+var_D8], 8
		mov	[esp], eax
		call	ds:_ZN7QString4freeEPNS_4DataE
		mov	eax, [ebp+var_E0]
		cmp	[ebp+var_E8], eax
		jnz	short loc_6FFE3072

loc_6FFE30B4:				; CODE XREF: sub_6FFE2C60+402j
					; sub_6FFE2C60+410j
		mov	edx, [ebp+var_F4]
		mov	[ebp+var_D8], 8
		mov	[esp], edx
		call	ds:_Z5qFreePv
		jmp	loc_6FFE2E75
sub_6FFE2C60	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn

sub_6FFE30D2	proc near		; DATA XREF: sub_6FFE2C60+2Fo
		add	ebp, 8
		mov	eax, [ebp-0D8h]
		mov	edx, [ebp-0D4h]
		cmp	eax, 1
		mov	[ebp-0F8h], edx
		jz	loc_6FFE31CB
		cmp	eax, 2
		jz	loc_6FFE319D
		cmp	eax, 3
		jz	loc_6FFE33A2
		cmp	eax, 4
		jz	loc_6FFE3387
		cmp	eax, 5
		xchg	ax, ax
		jz	loc_6FFE336C
		cmp	eax, 6
		jz	loc_6FFE3351
		cmp	eax, 7
		jz	loc_6FFE3336
		cmp	eax, 8
		nop
		lea	esi, [esi+0]
		jz	loc_6FFE31DB
		cmp	eax, 9
		jz	loc_6FFE3292
		cmp	eax, 0Ah
		jz	loc_6FFE32C3
		cmp	eax, 0Bh
		nop
		lea	esi, [esi+0]
		jz	loc_6FFE32F1
		cmp	eax, 0Ch
		jz	loc_6FFE331F
		cmp	eax, 0Dh
		jz	loc_6FFE3307
		cmp	eax, 0Eh
		nop
		lea	esi, [esi+0]
		jz	loc_6FFE32D9
		cmp	eax, 0Fh
		jz	loc_6FFE32A8
		cmp	eax, 10h
		jz	short loc_6FFE31F1
		lea	eax, [ebp-0A8h]
		mov	[esp+0], eax
		mov	dword ptr [ebp-0D8h], 0
		call	ds:_ZN8QVariantD1Ev

loc_6FFE319D:				; CODE XREF: sub_6FFE30D2+21j
					; sub_6FFE30D2+107j
		lea	eax, [ebp-0Ch]
		mov	[esp+0], eax
		mov	dword ptr [ebp-0D8h], 0
		call	ds:_ZN16QDBusPendingCallD1Ev
		mov	edx, [ebp-0F8h]
		mov	dword ptr [ebp-0D8h], 0FFFFFFFFh
		mov	[esp+0], edx
		call	_Unwind_SjLj_Resume
; ---------------------------------------------------------------------------

loc_6FFE31CB:				; CODE XREF: sub_6FFE30D2+18j
		mov	eax, [ebp-0E4h]
		mov	[esp+0], eax
		call	sub_6FFEAE50
		jmp	short loc_6FFE319D
; ---------------------------------------------------------------------------

loc_6FFE31DB:				; CODE XREF: sub_6FFE30D2+5Ej
		lea	eax, [ebp-0Ch]
		mov	[esp+0], eax
		mov	dword ptr [ebp-0D8h], 0
		call	ds:_ZN16QDBusPendingCallD1Ev

loc_6FFE31F1:				; CODE XREF: sub_6FFE30D2+B0j
					; sub_6FFE30D2+1ECj
		lea	eax, [ebp-10h]
		mov	[esp+0], eax
		mov	dword ptr [ebp-0D8h], 0
		call	sub_6FFDF990

loc_6FFE3206:				; CODE XREF: sub_6FFE30D2+27Aj
		lea	eax, [ebp-58h]
		mov	[esp+0], eax
		mov	dword ptr [ebp-0D8h], 0
		call	ds:_ZN8QVariantD1Ev

loc_6FFE321C:				; CODE XREF: sub_6FFE30D2+295j
		lea	eax, [ebp-68h]
		mov	[esp+0], eax
		mov	dword ptr [ebp-0D8h], 0
		call	ds:_ZN8QVariantD1Ev

loc_6FFE3232:				; CODE XREF: sub_6FFE30D2+2B0j
		lea	eax, [ebp-78h]
		mov	[esp+0], eax
		mov	dword ptr [ebp-0D8h], 0
		call	ds:_ZN8QVariantD1Ev

loc_6FFE3248:				; CODE XREF: sub_6FFE30D2+2CBj
		lea	eax, [ebp-88h]
		mov	[esp+0], eax
		mov	dword ptr [ebp-0D8h], 0
		call	ds:_ZN8QVariantD1Ev

loc_6FFE3261:				; CODE XREF: sub_6FFE30D2+2E6j
		lea	eax, [ebp-98h]
		mov	[esp+0], eax
		mov	dword ptr [ebp-0D8h], 0
		call	ds:_ZN8QVariantD1Ev
		mov	ecx, [ebp-0F8h]
		mov	dword ptr [ebp-0D8h], 0FFFFFFFFh
		mov	[esp+0], ecx
		call	_Unwind_SjLj_Resume
; ---------------------------------------------------------------------------

loc_6FFE3292:				; CODE XREF: sub_6FFE30D2+67j
		lea	eax, [ebp-0Ch]
		mov	[esp+0], eax
		mov	dword ptr [ebp-0D8h], 0
		call	ds:_ZN16QDBusPendingCallD1Ev

loc_6FFE32A8:				; CODE XREF: sub_6FFE30D2+A7j
					; sub_6FFE30D2+21Dj
		lea	eax, [ebp-48h]
		mov	[esp+0], eax
		mov	dword ptr [ebp-0D8h], 0
		call	ds:_ZN8QVariantD1Ev
		jmp	loc_6FFE31F1
; ---------------------------------------------------------------------------

loc_6FFE32C3:				; CODE XREF: sub_6FFE30D2+70j
		lea	eax, [ebp-0Ch]
		mov	[esp+0], eax
		mov	dword ptr [ebp-0D8h], 0
		call	ds:_ZN16QDBusPendingCallD1Ev

loc_6FFE32D9:				; CODE XREF: sub_6FFE30D2+9Ej
					; sub_6FFE30D2+24Bj
		lea	eax, [ebp-38h]
		mov	[esp+0], eax
		mov	dword ptr [ebp-0D8h], 0
		call	ds:_ZN8QVariantD1Ev
		jmp	short loc_6FFE32A8
; ---------------------------------------------------------------------------

loc_6FFE32F1:				; CODE XREF: sub_6FFE30D2+7Ej
		lea	eax, [ebp-0Ch]
		mov	[esp+0], eax
		mov	dword ptr [ebp-0D8h], 0
		call	ds:_ZN16QDBusPendingCallD1Ev

loc_6FFE3307:				; CODE XREF: sub_6FFE30D2+90j
					; sub_6FFE30D2+262j
		lea	eax, [ebp-28h]
		mov	[esp+0], eax
		mov	dword ptr [ebp-0D8h], 0
		call	ds:_ZN8QVariantD1Ev
		jmp	short loc_6FFE32D9
; ---------------------------------------------------------------------------

loc_6FFE331F:				; CODE XREF: sub_6FFE30D2+87j
		lea	eax, [ebp-14h]
		mov	[esp+0], eax
		mov	dword ptr [ebp-0D8h], 0
		call	sub_6FFEA140
		jmp	short loc_6FFE3307
; ---------------------------------------------------------------------------

loc_6FFE3336:				; CODE XREF: sub_6FFE30D2+50j
		lea	eax, [ebp-0Ch]
		mov	[esp+0], eax
		mov	dword ptr [ebp-0D8h], 0
		call	ds:_ZN16QDBusPendingCallD1Ev
		jmp	loc_6FFE3206
; ---------------------------------------------------------------------------

loc_6FFE3351:				; CODE XREF: sub_6FFE30D2+47j
		lea	eax, [ebp-0Ch]
		mov	[esp+0], eax
		mov	dword ptr [ebp-0D8h], 0
		call	ds:_ZN16QDBusPendingCallD1Ev
		jmp	loc_6FFE321C
; ---------------------------------------------------------------------------

loc_6FFE336C:				; CODE XREF: sub_6FFE30D2+3Ej
		lea	eax, [ebp-0Ch]
		mov	[esp+0], eax
		mov	dword ptr [ebp-0D8h], 0
		call	ds:_ZN16QDBusPendingCallD1Ev
		jmp	loc_6FFE3232
; ---------------------------------------------------------------------------

loc_6FFE3387:				; CODE XREF: sub_6FFE30D2+33j
		lea	eax, [ebp-0Ch]
		mov	[esp+0], eax
		mov	dword ptr [ebp-0D8h], 0
		call	ds:_ZN16QDBusPendingCallD1Ev
		jmp	loc_6FFE3248
; ---------------------------------------------------------------------------

loc_6FFE33A2:				; CODE XREF: sub_6FFE30D2+2Aj
		lea	eax, [ebp-0Ch]
		mov	[esp+0], eax
		mov	dword ptr [ebp-0D8h], 0
		call	ds:_ZN16QDBusPendingCallD1Ev
		jmp	loc_6FFE3261
sub_6FFE30D2	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_6FFE33C0	proc near		; CODE XREF: _ZN16DBusMenuImporter19slotMenuAboutToHideEv+10Ap
					; _ZN16DBusMenuImporter16sendClickedEventEi+6Cp ...

var_F0		= dword	ptr -0F0h
var_EC		= byte ptr -0ECh
var_E8		= dword	ptr -0E8h
var_D4		= dword	ptr -0D4h
var_D0		= dword	ptr -0D0h
var_CC		= dword	ptr -0CCh
var_C8		= dword	ptr -0C8h
var_C4		= dword	ptr -0C4h
var_B8		= dword	ptr -0B8h
var_B0		= dword	ptr -0B0h
var_A8		= dword	ptr -0A8h
var_A0		= dword	ptr -0A0h
var_98		= dword	ptr -98h
var_90		= dword	ptr -90h
var_88		= dword	ptr -88h
var_80		= dword	ptr -80h
var_78		= byte ptr -78h
var_68		= byte ptr -68h
var_58		= byte ptr -58h
var_48		= byte ptr -48h
var_38		= byte ptr -38h
var_28		= byte ptr -28h
var_18		= byte ptr -18h
var_14		= dword	ptr -14h
var_10		= byte ptr -10h
var_C		= dword	ptr -0Ch
var_8		= byte ptr -8
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		sub	esp, 128h
		lea	eax, [ebp+var_8]
		mov	[ebp+var_CC], eax
		lea	eax, [ebp+var_EC]
		mov	[esp], eax
		mov	[ebp+var_D4], offset sub_6FFEC1F0
		mov	[ebp+var_D0], offset dword_6FFECDAC
		mov	[ebp+var_C8], offset sub_6FFE37CB
		mov	[ebp+var_C4], esp
		call	_Unwind_SjLj_Register
		mov	eax, ds:_ZN7QString11shared_nullE
		mov	[ebp+var_C], eax
		lock inc dword ptr [eax]
		setnz	dl
		lea	eax, [ebp+var_C]
		mov	[esp+4], eax
		lea	eax, [ebp+var_38]
		mov	[esp], eax
		mov	[ebp+var_E8], 0Fh
		call	ds:_ZN8QVariantC1ERK7QString
		lea	eax, [ebp+var_38]
		mov	[esp+4], eax
		lea	eax, [ebp+var_48]
		mov	[esp], eax
		mov	[ebp+var_E8], 0Eh
		call	ds:_ZN8QVariantC2ERKS_
		mov	eax, dword_6FFF2A9C
		test	eax, eax
		jnz	short loc_6FFE3481
		mov	dword ptr [esp+8], offset sub_6FFDE900
		mov	dword ptr [esp+4], offset sub_6FFDDD40
		mov	dword ptr [esp], offset	aQdbusvariant_0	; "QDBusVariant"
		mov	[ebp+var_E8], 0Dh
		call	ds:_ZN9QMetaType12registerTypeEPKcPFvPvEPFS2_PKvE
		mov	dword_6FFF2A9C,	eax

loc_6FFE3481:				; CODE XREF: sub_6FFE33C0+93j
		mov	eax, dword_6FFF2A9C
		lea	edx, [ebp+var_48]
		mov	dword ptr [esp+0Ch], 0
		mov	[esp+8], edx
		mov	[ebp+var_E8], 0Dh
		mov	[esp+4], eax
		lea	eax, [ebp+var_28]
		mov	[esp], eax
		call	ds:_ZN8QVariantC1EiPKvj
		lea	eax, [ebp+var_48]
		mov	[esp], eax
		mov	[ebp+var_E8], 0Ch
		call	ds:_ZN8QVariantD2Ev
		lea	eax, [ebp+var_38]
		mov	[esp], eax
		mov	[ebp+var_E8], 0Bh
		call	ds:_ZN8QVariantD1Ev
		mov	eax, [ebp+var_C]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jz	loc_6FFE3790

loc_6FFE34EC:				; CODE XREF: sub_6FFE33C0+3E6j
		lea	eax, [ebp+var_10]
		mov	[esp], eax
		mov	[ebp+var_E8], 0Ah
		call	ds:_ZN9QDateTime15currentDateTimeEv
		sub	esp, 4
		lea	eax, [ebp+var_10]
		mov	[esp], eax
		mov	[ebp+var_E8], 9
		call	ds:_ZNK9QDateTime8toTime_tEv
		mov	[ebp+var_F0], eax
		lea	eax, [ebp+var_10]
		mov	[esp], eax
		mov	[ebp+var_E8], 0Ah
		call	ds:_ZN9QDateTimeD1Ev
		mov	eax, [ebp+var_B0]
		mov	[ebp+var_B8], 0
		mov	[ebp+var_A8], 0
		mov	[ebp+var_98], 0
		and	eax, 0C0000000h
		mov	[ebp+var_B0], eax
		mov	eax, [ebp+var_A0]
		mov	byte ptr [ebp+var_B0+3], 80h
		mov	[ebp+var_88], 0
		mov	[ebp+var_E8], 5
		and	eax, 0C0000000h
		mov	[ebp+var_A0], eax
		mov	eax, [ebp+var_90]
		mov	byte ptr [ebp+var_A0+3], 80h
		and	eax, 0C0000000h
		mov	[ebp+var_90], eax
		mov	eax, [ebp+var_80]
		mov	byte ptr [ebp+var_90+3], 80h
		and	eax, 0C0000000h
		mov	[ebp+var_80], eax
		mov	eax, [ebp+var_F0]
		mov	byte ptr [ebp+var_80+3], 80h
		mov	[esp+4], eax
		lea	eax, [ebp+var_78]
		mov	[esp], eax
		call	ds:_ZN8QVariantC1Ej
		mov	eax, [ebp+arg_8]
		mov	[ebp+var_E8], 4
		mov	[esp+4], eax
		lea	eax, [ebp+var_68]
		mov	[esp], eax
		call	ds:_ZN8QVariantC1ERK7QString
		mov	eax, [ebp+arg_4]
		mov	[ebp+var_E8], 3
		mov	[esp+4], eax
		lea	eax, [ebp+var_58]
		mov	[esp], eax
		call	ds:_ZN8QVariantC1Ei
		mov	dword ptr [esp+4], 0FFFFFFFFh
		mov	dword ptr [esp], offset	aEvent ; "Event"
		mov	[ebp+var_E8], 2
		call	ds:_ZN7QString16fromAscii_helperEPKci
		lea	edx, [ebp+var_B8]
		mov	[esp+28h], edx
		lea	edx, [ebp+var_A8]
		mov	[esp+24h], edx
		lea	edx, [ebp+var_98]
		mov	[esp+20h], edx
		lea	edx, [ebp+var_88]
		mov	[esp+1Ch], edx
		lea	edx, [ebp+var_78]
		mov	[esp+18h], edx
		lea	edx, [ebp+var_28]
		mov	[esp+14h], edx
		lea	edx, [ebp+var_68]
		mov	[esp+10h], edx
		lea	edx, [ebp+var_58]
		mov	[esp+0Ch], edx
		lea	edx, [ebp+var_14]
		mov	[esp+8], edx
		mov	edx, [ebp+arg_0]
		mov	[ebp+var_14], eax
		lea	eax, [ebp+var_18]
		mov	edx, [edx+4]
		mov	[esp], eax
		mov	[ebp+var_E8], 1
		mov	[esp+4], edx
		call	ds:_ZN22QDBusAbstractInterface9asyncCallERK7QStringRK8QVariantS5_S5_S5_S5_S5_S5_S5_
		sub	esp, 4
		lea	eax, [ebp+var_18]
		mov	[esp], eax
		call	ds:_ZN16QDBusPendingCallD1Ev
		mov	eax, [ebp+var_14]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jz	loc_6FFE37B0

loc_6FFE36BD:				; CODE XREF: sub_6FFE33C0+406j
		lea	eax, [ebp+var_58]
		mov	[esp], eax
		mov	[ebp+var_E8], 3
		call	ds:_ZN8QVariantD1Ev
		lea	eax, [ebp+var_68]
		mov	[esp], eax
		mov	[ebp+var_E8], 4
		call	ds:_ZN8QVariantD1Ev
		lea	eax, [ebp+var_78]
		mov	[esp], eax
		mov	[ebp+var_E8], 5
		call	ds:_ZN8QVariantD1Ev
		lea	eax, [ebp+var_88]
		mov	[esp], eax
		mov	[ebp+var_E8], 6
		call	ds:_ZN8QVariantD1Ev
		lea	eax, [ebp+var_98]
		mov	[esp], eax
		mov	[ebp+var_E8], 7
		call	ds:_ZN8QVariantD1Ev
		lea	eax, [ebp+var_A8]
		mov	[esp], eax
		mov	[ebp+var_E8], 8
		call	ds:_ZN8QVariantD1Ev
		lea	eax, [ebp+var_B8]
		mov	[esp], eax
		mov	[ebp+var_E8], 0Ah
		call	ds:_ZN8QVariantD1Ev
		lea	eax, [ebp+var_28]
		mov	[esp], eax
		mov	[ebp+var_E8], 0FFFFFFFFh
		call	ds:_ZN8QVariantD1Ev
		lea	eax, [ebp+var_EC]
		mov	[esp], eax
		call	_Unwind_SjLj_Unregister
		leave
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6FFE3790:				; CODE XREF: sub_6FFE33C0+126j
		mov	eax, [ebp+var_C]
		mov	[ebp+var_E8], 0Ah
		mov	[esp], eax
		call	ds:_ZN7QString4freeEPNS_4DataE
		jmp	loc_6FFE34EC
; ---------------------------------------------------------------------------
		align 10h

loc_6FFE37B0:				; CODE XREF: sub_6FFE33C0+2F7j
		mov	eax, [ebp+var_14]
		mov	[ebp+var_E8], 2
		mov	[esp], eax
		call	ds:_ZN7QString4freeEPNS_4DataE
		jmp	loc_6FFE36BD
sub_6FFE33C0	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn

sub_6FFE37CB	proc near		; DATA XREF: sub_6FFE33C0+2Fo
		add	ebp, 8
		mov	eax, [ebp-0E8h]
		mov	edx, [ebp-0E4h]
		cmp	eax, 1
		mov	[ebp-0F4h], edx
		jz	loc_6FFE3884
		cmp	eax, 2
		jz	loc_6FFE389A
		cmp	eax, 3
		jz	loc_6FFE38B0
		cmp	eax, 4
		xchg	ax, ax
		jz	loc_6FFE38C6
		cmp	eax, 5
		jz	loc_6FFE38DF
		cmp	eax, 6
		jz	loc_6FFE38F8
		cmp	eax, 7
		nop
		lea	esi, [esi+0]
		jz	loc_6FFE3911
		cmp	eax, 8
		jz	loc_6FFE399B
		cmp	eax, 9
		jz	loc_6FFE392A
		cmp	eax, 0Ah
		nop
		lea	esi, [esi+0]
		jz	loc_6FFE3958
		cmp	eax, 0Bh
		jz	loc_6FFE39B6
		cmp	eax, 0Ch
		jz	loc_6FFE39E4
		cmp	eax, 0Dh
		nop
		lea	esi, [esi+0]
		jz	loc_6FFE39CC
		cmp	eax, 0Eh
		jz	loc_6FFE396E
		lea	eax, [ebp-14h]
		mov	[esp+0], eax
		mov	dword ptr [ebp-0E8h], 0
		call	sub_6FFEA140

loc_6FFE3884:				; CODE XREF: sub_6FFE37CB+18j
		lea	eax, [ebp-58h]
		mov	[esp+0], eax
		mov	dword ptr [ebp-0E8h], 0
		call	ds:_ZN8QVariantD1Ev

loc_6FFE389A:				; CODE XREF: sub_6FFE37CB+21j
		lea	eax, [ebp-68h]
		mov	[esp+0], eax
		mov	dword ptr [ebp-0E8h], 0
		call	ds:_ZN8QVariantD1Ev

loc_6FFE38B0:				; CODE XREF: sub_6FFE37CB+2Aj
		lea	eax, [ebp-78h]
		mov	[esp+0], eax
		mov	dword ptr [ebp-0E8h], 0
		call	ds:_ZN8QVariantD1Ev

loc_6FFE38C6:				; CODE XREF: sub_6FFE37CB+35j
		lea	eax, [ebp-88h]
		mov	[esp+0], eax
		mov	dword ptr [ebp-0E8h], 0
		call	ds:_ZN8QVariantD1Ev

loc_6FFE38DF:				; CODE XREF: sub_6FFE37CB+3Ej
		lea	eax, [ebp-98h]
		mov	[esp+0], eax
		mov	dword ptr [ebp-0E8h], 0
		call	ds:_ZN8QVariantD1Ev

loc_6FFE38F8:				; CODE XREF: sub_6FFE37CB+47j
		lea	eax, [ebp-0A8h]
		mov	[esp+0], eax
		mov	dword ptr [ebp-0E8h], 0
		call	ds:_ZN8QVariantD1Ev

loc_6FFE3911:				; CODE XREF: sub_6FFE37CB+55j
		lea	eax, [ebp-0B8h]
		mov	[esp+0], eax
		mov	dword ptr [ebp-0E8h], 0
		call	ds:_ZN8QVariantD1Ev

loc_6FFE392A:				; CODE XREF: sub_6FFE37CB+67j
					; sub_6FFE37CB+1E6j
		lea	eax, [ebp-28h]
		mov	[esp+0], eax
		mov	dword ptr [ebp-0E8h], 0
		call	ds:_ZN8QVariantD1Ev
		mov	eax, [ebp-0F4h]
		mov	dword ptr [ebp-0E8h], 0FFFFFFFFh
		mov	[esp+0], eax
		call	_Unwind_SjLj_Resume
; ---------------------------------------------------------------------------

loc_6FFE3958:				; CODE XREF: sub_6FFE37CB+75j
		lea	eax, [ebp-28h]
		mov	[esp+0], eax
		mov	dword ptr [ebp-0E8h], 0
		call	ds:_ZN8QVariantD1Ev

loc_6FFE396E:				; CODE XREF: sub_6FFE37CB+9Ej
					; sub_6FFE37CB+217j
		lea	eax, [ebp-0Ch]
		mov	[esp+0], eax
		mov	dword ptr [ebp-0E8h], 0
		call	sub_6FFEA140
		mov	edx, [ebp-0F4h]
		mov	dword ptr [ebp-0E8h], 0FFFFFFFFh
		mov	[esp+0], edx
		call	_Unwind_SjLj_Resume
; ---------------------------------------------------------------------------

loc_6FFE399B:				; CODE XREF: sub_6FFE37CB+5Ej
		lea	eax, [ebp-10h]
		mov	[esp+0], eax
		mov	dword ptr [ebp-0E8h], 0
		call	ds:_ZN9QDateTimeD1Ev
		jmp	loc_6FFE392A
; ---------------------------------------------------------------------------

loc_6FFE39B6:				; CODE XREF: sub_6FFE37CB+7Ej
		lea	eax, [ebp-28h]
		mov	[esp+0], eax
		mov	dword ptr [ebp-0E8h], 0
		call	ds:_ZN8QVariantD1Ev

loc_6FFE39CC:				; CODE XREF: sub_6FFE37CB+95j
					; sub_6FFE37CB+22Fj
		lea	eax, [ebp-38h]
		mov	[esp+0], eax
		mov	dword ptr [ebp-0E8h], 0
		call	ds:_ZN8QVariantD1Ev
		jmp	short loc_6FFE396E
; ---------------------------------------------------------------------------

loc_6FFE39E4:				; CODE XREF: sub_6FFE37CB+87j
		lea	eax, [ebp-48h]
		mov	[esp+0], eax
		mov	dword ptr [ebp-0E8h], 0
		call	ds:_ZN8QVariantD2Ev
		jmp	short loc_6FFE39CC
sub_6FFE37CB	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_6FFE3A00	proc near		; CODE XREF: sub_6FFE4110+4Fp

var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_3C		= byte ptr -3Ch
var_38		= dword	ptr -38h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_8		= byte ptr -8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h
arg_10		= dword	ptr  18h

		push	ebp
		mov	ebp, esp
		sub	esp, 58h
		lea	eax, [ebp+var_8]
		mov	[ebp+var_1C], eax
		lea	eax, [ebp+var_3C]
		mov	[esp], eax
		mov	[ebp+var_24], offset sub_6FFEC1F0
		mov	[ebp+var_20], offset dword_6FFEC864
		mov	[ebp+var_18], offset sub_6FFE3ADC
		mov	[ebp+var_14], esp
		call	_Unwind_SjLj_Register
		mov	edx, [ebp+arg_8]
		mov	eax, [ebp+arg_4]
		mov	dword ptr [esp+0Ch], 8
		mov	dword ptr [esp+8], 1Ch
		mov	[esp+4], edx
		mov	[esp], eax
		mov	[ebp+var_38], 0FFFFFFFFh
		call	ds:_ZN8QMapData11node_createEPPNS_4NodeEii
		mov	[ebp+var_40], eax
		sub	eax, 1Ch
		mov	[ebp+var_44], eax
		jz	short loc_6FFE3A80
		mov	edx, [ebp+arg_C]
		mov	eax, [edx]
		mov	edx, [ebp+var_40]
		mov	[edx-1Ch], eax
		mov	edx, [ebp+arg_C]
		cmp	[ebp+var_44], edx
		jz	short loc_6FFE3AB0

loc_6FFE3A77:				; CODE XREF: sub_6FFE3A00+DAj
		lock inc dword ptr [eax]
		setnz	dl
		mov	eax, [ebp+var_44]

loc_6FFE3A80:				; CODE XREF: sub_6FFE3A00+62j
		add	eax, 8
		jz	short loc_6FFE3A9C
		mov	edx, [ebp+arg_10]
		mov	[esp], eax
		mov	[ebp+var_38], 3
		mov	[esp+4], edx
		call	ds:_ZN8QVariantC1ERKS_

loc_6FFE3A9C:				; CODE XREF: sub_6FFE3A00+83j
		lea	eax, [ebp+var_3C]
		mov	[esp], eax
		call	_Unwind_SjLj_Unregister
		mov	eax, [ebp+var_40]
		leave
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6FFE3AB0:				; CODE XREF: sub_6FFE3A00+75j
		mov	dword ptr [esp+8], 2D6h
		mov	dword ptr [esp+4], offset aRIncludeQtco_1 ; "R:/include/QtCore/qstring.h"
		mov	dword ptr [esp], offset	aOtherThis ; "&other !=	this"
		mov	[ebp+var_38], 4
		call	ds:_Z9qt_assertPKcS0_i
		mov	edx, [ebp+var_40]
		mov	eax, [edx-1Ch]
		jmp	short loc_6FFE3A77
sub_6FFE3A00	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn

sub_6FFE3ADC	proc near		; DATA XREF: sub_6FFE3A00+20o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		add	ebp, 8
		mov	eax, [ebp-38h]
		mov	edx, [ebp-34h]
		cmp	eax, 1
		mov	[ebp-48h], edx
		jz	short loc_6FFE3B17
		cmp	eax, 2
		jz	short loc_6FFE3B5C
		cmp	eax, 3
		jz	short loc_6FFE3B23
		mov	dword ptr [ebp-38h], 0
		xchg	ax, ax
		call	sub_6FFEBBF0
		mov	eax, [ebp-48h]
		mov	dword ptr [ebp-38h], 0FFFFFFFFh
		mov	[esp+0], eax
		call	_Unwind_SjLj_Resume
; ---------------------------------------------------------------------------

loc_6FFE3B17:				; CODE XREF: sub_6FFE3ADC+Fj
		mov	dword ptr [ebp-38h], 0
		call	sub_6FFEBBF0

loc_6FFE3B23:				; CODE XREF: sub_6FFE3ADC+19j
		mov	eax, [ebp-48h]
		mov	[esp+0], eax
		call	sub_6FFEB920
		mov	edx, [ebp-40h]
		mov	eax, [ebp+10h]
		mov	[esp+arg_4], 1Ch
		mov	dword ptr [ebp-38h], 1
		mov	[esp+arg_8], edx
		mov	edx, [ebp+0Ch]
		mov	[esp+arg_0], eax
		mov	[esp+0], edx
		call	ds:_ZN8QMapData11node_deleteEPPNS_4NodeEiS1_
		call	sub_6FFEC130
; ---------------------------------------------------------------------------

loc_6FFE3B5C:				; CODE XREF: sub_6FFE3ADC+14j
		mov	eax, [ebp-48h]
		mov	[esp+0], eax
		call	sub_6FFEB920
		mov	edx, [ebp-44h]
		mov	dword ptr [ebp-38h], 2
		mov	[esp+0], edx
		call	sub_6FFEA140
		call	sub_6FFEC130
sub_6FFE3ADC	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_6FFE3B80	proc near		; CODE XREF: sub_6FFC4C20+83Ap
					; _ZN16DBusMenuExporter15doUpdateActionsEv+3CAp ...

var_9C		= dword	ptr -9Ch
var_98		= dword	ptr -98h
var_94		= dword	ptr -94h
var_90		= dword	ptr -90h
var_8C		= dword	ptr -8Ch
var_88		= dword	ptr -88h
var_84		= dword	ptr -84h
var_80		= dword	ptr -80h
var_7C		= dword	ptr -7Ch
var_78		= dword	ptr -78h
var_74		= dword	ptr -74h
var_70		= dword	ptr -70h
var_6C		= byte ptr -6Ch
var_68		= dword	ptr -68h
var_54		= dword	ptr -54h
var_50		= dword	ptr -50h
var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_38		= dword	ptr -38h
var_8		= byte ptr -8
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0B8h
		lea	eax, [ebp+var_8]
		mov	[ebp+var_4C], eax
		lea	eax, [ebp+var_6C]
		mov	[esp], eax
		mov	[ebp+var_54], offset sub_6FFEC1F0
		mov	[ebp+var_50], offset dword_6FFEC928
		mov	[ebp+var_48], offset sub_6FFE3DB9
		mov	[ebp+var_44], esp
		call	_Unwind_SjLj_Register
		mov	dword ptr [esp], 8
		mov	[ebp+var_68], 0FFFFFFFFh
		call	ds:_ZN8QMapData10createDataEi
		mov	edx, [ebp+arg_0]
		mov	[ebp+var_8C], eax
		mov	eax, [edx]
		mov	ecx, [eax+3Ch]
		test	ecx, ecx
		jz	loc_6FFE3CFF
		mov	eax, [ebp+var_8C]
		or	byte ptr [eax+44h], 1
		mov	eax, [edx]
		mov	edx, [eax+4]
		mov	[ebp+var_7C], edx
		mov	edx, [ebp+var_8C]
		cmp	eax, [ebp+var_7C]
		mov	[ebp+var_38], edx
		jz	loc_6FFE3CF0
		mov	eax, ds:_ZN8QMapData11node_createEPPNS_4NodeEii
		mov	[ebp+var_74], eax
		mov	eax, [ebp+var_7C]
		jmp	short loc_6FFE3C4C
; ---------------------------------------------------------------------------
		align 10h

loc_6FFE3C10:				; CODE XREF: sub_6FFE3B80+139j
					; sub_6FFE3B80+169j
		lock inc dword ptr [eax]
		setnz	dl
		mov	eax, [ebp+var_78]

loc_6FFE3C19:				; CODE XREF: sub_6FFE3B80+11Cj
		add	eax, 8
		jz	short loc_6FFE3C38
		mov	edx, [ebp+var_88]
		mov	[esp], eax
		mov	[ebp+var_68], 3
		mov	[esp+4], edx
		call	ds:_ZN8QVariantC1ERKS_

loc_6FFE3C38:				; CODE XREF: sub_6FFE3B80+9Cj
		mov	eax, [ebp+var_7C]
		mov	edx, [ebp+arg_0]
		mov	eax, [eax+4]
		mov	[ebp+var_7C], eax
		cmp	[edx], eax
		jz	loc_6FFE3CF0

loc_6FFE3C4C:				; CODE XREF: sub_6FFE3B80+8Bj
		mov	edx, [ebp+var_7C]
		sub	eax, 14h
		mov	[ebp+var_88], eax
		mov	eax, [ebp+var_8C]
		mov	dword ptr [esp+0Ch], 8
		mov	dword ptr [esp+8], 1Ch
		sub	edx, 1Ch
		mov	[ebp+var_84], edx
		lea	edx, [ebp+var_38]
		mov	[esp+4], edx
		mov	[esp], eax
		mov	[ebp+var_68], 6
		call	[ebp+var_74]
		mov	[ebp+var_80], eax
		sub	eax, 1Ch
		test	eax, eax
		mov	[ebp+var_78], eax
		mov	[ebp+var_94], eax
		jz	loc_6FFE3C19
		mov	edx, [ebp+var_84]
		mov	eax, [edx]
		mov	edx, [ebp+var_80]
		mov	[edx-1Ch], eax
		mov	edx, [ebp+var_78]
		cmp	[ebp+var_84], edx
		jnz	loc_6FFE3C10
		mov	dword ptr [esp+8], 2D6h
		mov	dword ptr [esp+4], offset aRIncludeQtco_1 ; "R:/include/QtCore/qstring.h"
		mov	dword ptr [esp], offset	aOtherThis ; "&other !=	this"
		mov	[ebp+var_68], 4
		call	ds:_Z9qt_assertPKcS0_i
		mov	edx, [ebp+var_80]
		mov	eax, [edx-1Ch]
		jmp	loc_6FFE3C10
; ---------------------------------------------------------------------------
		align 10h

loc_6FFE3CF0:				; CODE XREF: sub_6FFE3B80+7Aj
					; sub_6FFE3B80+C6j
		mov	eax, [ebp+var_8C]
		and	byte ptr [eax+44h], 0FEh
		mov	edx, [ebp+arg_0]
		mov	eax, [edx]

loc_6FFE3CFF:				; CODE XREF: sub_6FFE3B80+56j
		lock dec dword ptr [eax+34h]
		setnz	dl
		test	dl, dl
		jz	short loc_6FFE3D22

loc_6FFE3D0A:				; CODE XREF: sub_6FFE3B80+234j
		mov	eax, [ebp+arg_0]
		mov	edx, [ebp+var_8C]
		mov	[eax], edx
		lea	eax, [ebp+var_6C]
		mov	[esp], eax
		call	_Unwind_SjLj_Unregister
		leave
		retn
; ---------------------------------------------------------------------------

loc_6FFE3D22:				; CODE XREF: sub_6FFE3B80+188j
		mov	eax, [ebp+arg_0]
		mov	eax, [eax]
		mov	edx, eax
		mov	[ebp+var_9C], eax
		mov	eax, [eax+4]
		cmp	edx, eax
		jz	short loc_6FFE3D96
		mov	edx, ds:_ZN8QVariantD1Ev
		mov	[ebp+var_70], edx
		nop

loc_6FFE3D40:				; CODE XREF: sub_6FFE3B80+214j
		mov	edx, [eax+4]
		mov	[ebp+var_90], edx
		lea	edx, [eax-1Ch]
		mov	[ebp+var_98], edx
		mov	edx, [eax-1Ch]
		lock dec dword ptr [edx]
		setnz	cl
		test	cl, cl
		jnz	short loc_6FFE3D72
		mov	eax, [eax-1Ch]
		mov	[ebp+var_68], 0FFFFFFFFh
		mov	[esp], eax
		call	ds:_ZN7QString4freeEPNS_4DataE

loc_6FFE3D72:				; CODE XREF: sub_6FFE3B80+1DDj
		mov	eax, [ebp+var_98]
		mov	[ebp+var_68], 0FFFFFFFFh
		add	eax, 8
		mov	[esp], eax
		call	[ebp+var_70]
		mov	eax, [ebp+var_90]
		cmp	[ebp+var_9C], eax
		jnz	short loc_6FFE3D40

loc_6FFE3D96:				; CODE XREF: sub_6FFE3B80+1B4j
		mov	edx, [ebp+var_9C]
		mov	dword ptr [esp+4], 1Ch
		mov	[ebp+var_68], 0FFFFFFFFh
		mov	[esp], edx
		call	ds:_ZN8QMapData16continueFreeDataEi
		jmp	loc_6FFE3D0A
sub_6FFE3B80	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn

sub_6FFE3DB9	proc near		; DATA XREF: sub_6FFE3B80+23o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		add	ebp, 8
		mov	eax, [ebp-68h]
		mov	edx, [ebp-64h]
		cmp	eax, 1
		mov	[ebp-0A0h], edx
		jz	short loc_6FFE3E45
		cmp	eax, 2
		jz	loc_6FFE3E90
		cmp	eax, 3
		jz	short loc_6FFE3E51
		cmp	eax, 4
		xchg	ax, ax
		jz	short loc_6FFE3E24
		cmp	eax, 5
		jz	short loc_6FFE3DF5
		mov	dword ptr [ebp-68h], 0
		xchg	ax, ax
		call	sub_6FFEBBF0

loc_6FFE3DF5:				; CODE XREF: sub_6FFE3DB9+2Cj
		mov	eax, [ebp-0A0h]
		mov	[esp+0], eax
		call	sub_6FFEB920
		mov	edx, [ebp-8Ch]
		mov	eax, [ebp+8]
		mov	dword ptr [ebp-68h], 5
		mov	[esp+arg_0], edx
		mov	[esp+0], eax
		call	sub_6FFE4220
		call	sub_6FFEC130
; ---------------------------------------------------------------------------

loc_6FFE3E24:				; CODE XREF: sub_6FFE3DB9+27j
		mov	dword ptr [ebp-68h], 0
		call	sub_6FFEBBF0
		mov	edx, [ebp-0A0h]
		mov	dword ptr [ebp-68h], 0FFFFFFFFh
		mov	[esp+0], edx
		call	_Unwind_SjLj_Resume
; ---------------------------------------------------------------------------

loc_6FFE3E45:				; CODE XREF: sub_6FFE3DB9+12j
		mov	dword ptr [ebp-68h], 0
		call	sub_6FFEBBF0

loc_6FFE3E51:				; CODE XREF: sub_6FFE3DB9+20j
		mov	eax, [ebp-0A0h]
		mov	[esp+0], eax
		call	sub_6FFEB920
		lea	eax, [ebp-38h]
		mov	edx, [ebp-80h]
		mov	[esp+arg_0], eax
		mov	eax, [ebp-8Ch]
		mov	[esp+arg_4], 1Ch
		mov	dword ptr [ebp-68h], 1
		mov	[esp+arg_8], edx
		mov	[esp+0], eax
		call	ds:_ZN8QMapData11node_deleteEPPNS_4NodeEiS1_
		call	sub_6FFEC130
; ---------------------------------------------------------------------------

loc_6FFE3E90:				; CODE XREF: sub_6FFE3DB9+17j
		mov	eax, [ebp-0A0h]
		mov	[esp+0], eax
		call	sub_6FFEB920
		mov	edx, [ebp-94h]
		mov	dword ptr [ebp-68h], 2
		mov	[esp+0], edx
		call	sub_6FFEA140
		call	sub_6FFEC130
sub_6FFE3DB9	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_6FFE3EC0	proc near		; CODE XREF: sub_6FFE0440+147p
					; sub_6FFE0440+268p ...

var_90		= dword	ptr -90h
var_8C		= dword	ptr -8Ch
var_88		= dword	ptr -88h
var_84		= dword	ptr -84h
var_80		= dword	ptr -80h
var_7C		= byte ptr -7Ch
var_78		= dword	ptr -78h
var_64		= dword	ptr -64h
var_60		= dword	ptr -60h
var_5C		= dword	ptr -5Ch
var_58		= dword	ptr -58h
var_54		= dword	ptr -54h
var_48		= byte ptr -48h
var_18		= byte ptr -18h
var_8		= byte ptr -8
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		sub	esp, 0A8h
		lea	eax, [ebp+var_8]
		mov	[ebp+var_5C], eax
		lea	eax, [ebp+var_7C]
		mov	[esp], eax
		mov	[ebp+var_64], offset sub_6FFEC1F0
		mov	[ebp+var_60], offset dword_6FFECEC0
		mov	[ebp+var_58], offset sub_6FFE40CE
		mov	[ebp+var_54], esp
		call	_Unwind_SjLj_Register
		mov	edx, [ebp+arg_4]
		mov	eax, [edx]
		mov	eax, [eax+34h]
		cmp	eax, 1
		jz	short loc_6FFE3F0E
		mov	[esp], edx
		mov	[ebp+var_78], 0FFFFFFFFh
		call	sub_6FFE3B80

loc_6FFE3F0E:				; CODE XREF: sub_6FFE3EC0+3Dj
		mov	ecx, [ebp+arg_4]
		mov	ecx, [ecx]
		mov	eax, [ecx+38h]
		mov	[ebp+var_88], ecx
		test	eax, eax
		mov	[ebp+var_84], eax
		js	loc_6FFE4060
		lea	edx, [ebp+eax*4+var_48]
		mov	eax, ecx
		mov	[ebp+var_8C], edx
		mov	edx, [ebp+var_88]
		lea	esi, [esi+0]

loc_6FFE3F40:				; CODE XREF: sub_6FFE3EC0+1DEj
					; sub_6FFE3EC0+1EEj
		mov	ecx, [ebp+var_84]
		mov	ecx, [edx+ecx*4+4]
		cmp	ecx, eax
		mov	[ebp+var_80], ecx
		jz	short loc_6FFE3F7A
		mov	eax, [ebp+arg_8]
		mov	[ebp+var_78], 0FFFFFFFFh
		mov	[esp+4], eax
		mov	eax, ecx
		sub	eax, 1Ch
		mov	[esp], eax
		call	ds:_ZNK7QStringltERKS_
		test	al, al
		jnz	loc_6FFE4090
		mov	edx, [ebp+arg_4]
		mov	eax, [edx]

loc_6FFE3F7A:				; CODE XREF: sub_6FFE3EC0+8Fj
		mov	edx, [ebp+var_8C]
		mov	ecx, [ebp+var_88]
		mov	[edx], ecx
		sub	edx, 4
		sub	[ebp+var_84], 1
		mov	[ebp+var_8C], edx
		jns	loc_6FFE40A3
		cmp	eax, [ebp+var_80]
		jz	loc_6FFE4060
		mov	eax, [ebp+var_80]
		mov	ecx, [ebp+arg_8]
		mov	[ebp+var_78], 0FFFFFFFFh
		sub	eax, 1Ch
		mov	[esp+4], eax
		mov	[esp], ecx
		call	ds:_ZNK7QStringltERKS_
		test	al, al
		jnz	loc_6FFE4060
		mov	eax, [ebp+var_80]
		sub	eax, 14h
		mov	[ebp+var_90], eax
		mov	[esp+4], eax
		lea	eax, [ebp+var_18]
		mov	[esp], eax
		call	ds:_ZN8QVariantC1ERKS_
		mov	edx, [ebp+var_80]
		mov	eax, [edx-1Ch]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jz	loc_6FFE40B3

loc_6FFE3FFC:				; CODE XREF: sub_6FFE3EC0+209j
		mov	eax, [ebp+var_90]
		mov	[ebp+var_78], 1
		mov	[esp], eax
		call	ds:_ZN8QVariantD1Ev
		mov	edx, [ebp+var_80]
		lea	eax, [ebp+var_48]
		mov	ecx, [ebp+arg_4]
		mov	dword ptr [esp+8], 1Ch
		mov	[esp+4], eax
		mov	[esp+0Ch], edx
		mov	eax, [ecx]
		mov	[esp], eax
		call	ds:_ZN8QMapData11node_deleteEPPNS_4NodeEiS1_
		lea	eax, [ebp+var_18]
		mov	[esp+4], eax
		mov	eax, [ebp+arg_0]
		mov	[esp], eax
		call	ds:_ZN8QVariantC1ERKS_
		lea	eax, [ebp+var_18]
		mov	[esp], eax
		mov	[ebp+var_78], 0FFFFFFFFh
		call	ds:_ZN8QVariantD1Ev
		jmp	short loc_6FFE4078
; ---------------------------------------------------------------------------
		align 10h

loc_6FFE4060:				; CODE XREF: sub_6FFE3EC0+64j
					; sub_6FFE3EC0+E1j ...
		mov	ecx, [ebp+arg_0]
		mov	eax, [ecx+8]
		mov	dword ptr [ecx], 0
		and	eax, 0C0000000h
		mov	[ecx+8], eax
		mov	byte ptr [ecx+0Bh], 80h

loc_6FFE4078:				; CODE XREF: sub_6FFE3EC0+19Cj
		lea	eax, [ebp+var_7C]
		mov	[esp], eax
		call	_Unwind_SjLj_Unregister
		mov	eax, [ebp+arg_0]
		leave
		retn	4
; ---------------------------------------------------------------------------
		align 10h

loc_6FFE4090:				; CODE XREF: sub_6FFE3EC0+AFj
		mov	ecx, [ebp+arg_4]
		mov	edx, [ebp+var_80]
		mov	eax, [ecx]
		mov	[ebp+var_88], edx
		jmp	loc_6FFE3F40
; ---------------------------------------------------------------------------

loc_6FFE40A3:				; CODE XREF: sub_6FFE3EC0+D8j
		mov	edx, [ebp+arg_4]
		mov	eax, [edx]
		mov	edx, [ebp+var_88]
		jmp	loc_6FFE3F40
; ---------------------------------------------------------------------------

loc_6FFE40B3:				; CODE XREF: sub_6FFE3EC0+136j
		mov	ecx, [ebp+var_80]
		mov	eax, [ecx-1Ch]
		mov	[ebp+var_78], 1
		mov	[esp], eax
		call	ds:_ZN7QString4freeEPNS_4DataE
		jmp	loc_6FFE3FFC
sub_6FFE3EC0	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn

sub_6FFE40CE	proc near		; DATA XREF: sub_6FFE3EC0+23o
		add	ebp, 8
		mov	edx, [ebp-74h]
		lea	eax, [ebp-18h]
		mov	[ebp-94h], edx
		mov	[esp+0], eax
		mov	dword ptr [ebp-78h], 0
		call	ds:_ZN8QVariantD1Ev
		mov	ecx, [ebp-94h]
		mov	dword ptr [ebp-78h], 0FFFFFFFFh
		mov	[esp+0], ecx
		call	_Unwind_SjLj_Resume
sub_6FFE40CE	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6FFE4110	proc near		; CODE XREF: sub_6FFC24B0+CAp
					; sub_6FFC24B0+266p ...

var_6C		= dword	ptr -6Ch
var_68		= dword	ptr -68h
var_64		= dword	ptr -64h
var_60		= dword	ptr -60h
var_5C		= dword	ptr -5Ch
var_4C		= dword	ptr -4Ch
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 5Ch
		mov	edx, [esp+6Ch+arg_0]
		mov	eax, [edx]
		mov	eax, [eax+34h]
		cmp	eax, 1
		jz	short loc_6FFE412D
		mov	[esp+6Ch+var_6C], edx
		call	sub_6FFE3B80

loc_6FFE412D:				; CODE XREF: sub_6FFE4110+13j
		mov	eax, [esp+6Ch+arg_0]
		mov	edi, [eax]
		mov	esi, [edi+38h]
		test	esi, esi
		jns	short loc_6FFE4170

loc_6FFE413A:				; CODE XREF: sub_6FFE4110+BAj
					; sub_6FFE4110+D6j ...
		mov	edx, [esp+6Ch+arg_8]
		mov	eax, [esp+6Ch+arg_4]
		mov	[esp+6Ch+var_5C], edx
		lea	edx, [esp+6Ch+var_4C]
		mov	[esp+6Ch+var_64], edx
		mov	edx, [esp+6Ch+arg_0]
		mov	[esp+6Ch+var_60], eax
		mov	eax, [edx]
		mov	[esp+6Ch+var_6C], edx
		mov	[esp+6Ch+var_68], eax
		call	sub_6FFE3A00
		add	esp, 5Ch
		mov	ebx, eax
		mov	eax, ebx
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_6FFE4170:				; CODE XREF: sub_6FFE4110+28j
		lea	ebp, ds:0[esi*4]
		mov	eax, edi
		lea	esi, [esi+0]

loc_6FFE4180:				; CODE XREF: sub_6FFE4110+B2j
		mov	ebx, [edi+esi*4+4]
		cmp	ebx, eax
		jz	short loc_6FFE41B0

loc_6FFE4188:				; CODE XREF: sub_6FFE4110+9Ej
		mov	edx, [esp+6Ch+arg_4]
		lea	eax, [ebx-1Ch]
		mov	[esp+6Ch+var_6C], eax
		mov	[esp+6Ch+var_68], edx
		call	ds:_ZNK7QStringltERKS_
		test	al, al
		jz	short loc_6FFE41B0
		mov	edx, [esp+6Ch+arg_0]
		mov	edi, ebx
		mov	ebx, [edi+esi*4+4]
		mov	eax, [edx]
		cmp	ebx, eax
		jnz	short loc_6FFE4188

loc_6FFE41B0:				; CODE XREF: sub_6FFE4110+76j
					; sub_6FFE4110+8Ej
		mov	[esp+ebp+6Ch+var_4C], edi
		sub	ebp, 4
		sub	esi, 1
		js	short loc_6FFE41C4
		mov	edx, [esp+6Ch+arg_0]
		mov	eax, [edx]
		jmp	short loc_6FFE4180
; ---------------------------------------------------------------------------

loc_6FFE41C4:				; CODE XREF: sub_6FFE4110+AAj
		mov	eax, [esp+6Ch+arg_0]
		cmp	[eax], ebx
		jz	loc_6FFE413A
		mov	edx, [esp+6Ch+arg_4]
		lea	eax, [ebx-1Ch]
		mov	[esp+6Ch+var_68], eax
		mov	[esp+6Ch+var_6C], edx
		call	ds:_ZNK7QStringltERKS_
		test	al, al
		jnz	loc_6FFE413A
		mov	eax, [esp+6Ch+arg_0]
		cmp	[eax], ebx
		jz	loc_6FFE413A
		mov	eax, [esp+6Ch+arg_8]
		mov	[esp+6Ch+var_68], eax
		lea	eax, [ebx-14h]
		mov	[esp+6Ch+var_6C], eax
		call	ds:_ZN8QVariantaSERKS_
		add	esp, 5Ch
		mov	eax, ebx
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
sub_6FFE4110	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6FFE4220	proc near		; CODE XREF: sub_6FFC4C20+7ACp
					; sub_6FFDFBB0+1F4p ...

var_2C		= dword	ptr -2Ch
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 1Ch
		mov	edi, [esp+2Ch+arg_4]
		mov	eax, [edi+4]
		cmp	edi, eax
		jz	short loc_6FFE426F
		mov	ebp, ds:_ZN8QVariantD1Ev
		jmp	short loc_6FFE4242
; ---------------------------------------------------------------------------
		align 10h

loc_6FFE4240:				; CODE XREF: sub_6FFE4220+4Bj
		mov	eax, ebx

loc_6FFE4242:				; CODE XREF: sub_6FFE4220+18j
		mov	ebx, [eax+4]
		lea	esi, [eax-1Ch]
		mov	edx, [eax-1Ch]
		lock dec dword ptr [edx]
		setnz	cl
		test	cl, cl
		jnz	short loc_6FFE4261
		mov	eax, [eax-1Ch]
		mov	[esp+2Ch+var_2C], eax
		call	ds:_ZN7QString4freeEPNS_4DataE

loc_6FFE4261:				; CODE XREF: sub_6FFE4220+33j
		lea	eax, [esi+8]
		mov	[esp+2Ch+var_2C], eax
		call	ebp ; _ZN8QVariantD1Ev
		cmp	edi, ebx
		jnz	short loc_6FFE4240
		mov	eax, edi

loc_6FFE426F:				; CODE XREF: sub_6FFE4220+10j
		mov	[esp+2Ch+arg_0], eax
		mov	eax, ds:_ZN8QMapData16continueFreeDataEi
		mov	[esp+2Ch+arg_4], 1Ch
		add	esp, 1Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		jmp	eax
sub_6FFE4220	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6FFE4290	proc near		; CODE XREF: sub_6FFC2A45+52p
					; sub_6FFC324B+162p ...

var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
arg_0		= dword	ptr  4

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 1Ch
		mov	edx, [esp+2Ch+arg_0]
		mov	eax, [edx]
		test	eax, eax
		jz	short loc_6FFE42AC
		lock dec dword ptr [eax+34h]
		setnz	cl
		test	cl, cl
		jz	short loc_6FFE42B4

loc_6FFE42AC:				; CODE XREF: sub_6FFE4290+Fj
		add	esp, 1Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_6FFE42B4:				; CODE XREF: sub_6FFE4290+1Aj
		mov	edi, [edx]
		mov	eax, [edi+4]
		cmp	edi, eax
		jz	short loc_6FFE42F2
		mov	ebp, ds:_ZN8QVariantD1Ev
		jmp	short loc_6FFE42C7
; ---------------------------------------------------------------------------

loc_6FFE42C5:				; CODE XREF: sub_6FFE4290+60j
		mov	eax, ebx

loc_6FFE42C7:				; CODE XREF: sub_6FFE4290+33j
		mov	ebx, [eax+4]
		lea	esi, [eax-1Ch]
		mov	edx, [eax-1Ch]
		lock dec dword ptr [edx]
		setnz	cl
		test	cl, cl
		jnz	short loc_6FFE42E6
		mov	eax, [eax-1Ch]
		mov	[esp+2Ch+var_2C], eax
		call	ds:_ZN7QString4freeEPNS_4DataE

loc_6FFE42E6:				; CODE XREF: sub_6FFE4290+48j
		lea	eax, [esi+8]
		mov	[esp+2Ch+var_2C], eax
		call	ebp ; _ZN8QVariantD1Ev
		cmp	edi, ebx
		jnz	short loc_6FFE42C5

loc_6FFE42F2:				; CODE XREF: sub_6FFE4290+2Bj
		mov	[esp+2Ch+var_2C], edi
		mov	[esp+2Ch+var_28], 1Ch
		call	ds:_ZN8QMapData16continueFreeDataEi
		add	esp, 1Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
sub_6FFE4290	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_6FFE4310	proc near		; CODE XREF: sub_6FFC4020+3Dp
					; sub_6FFC4C20+4B6p

var_7C		= dword	ptr -7Ch
var_78		= dword	ptr -78h
var_74		= dword	ptr -74h
var_70		= dword	ptr -70h
var_6C		= byte ptr -6Ch
var_68		= dword	ptr -68h
var_54		= dword	ptr -54h
var_50		= dword	ptr -50h
var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_38		= dword	ptr -38h
var_8		= byte ptr -8
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		lea	eax, [ebp+var_8]
		push	ebx
		sub	esp, 94h
		mov	[ebp+var_4C], eax
		lea	eax, [ebp+var_6C]
		mov	[esp], eax
		mov	[ebp+var_54], offset sub_6FFEC1F0
		mov	[ebp+var_50], offset dword_6FFEC844
		mov	[ebp+var_48], offset sub_6FFE4435
		mov	[ebp+var_44], esp
		call	_Unwind_SjLj_Register
		mov	dword ptr [esp], 4
		mov	[ebp+var_68], 0FFFFFFFFh
		call	ds:_ZN8QMapData10createDataEi
		mov	edx, [ebp+arg_0]
		mov	[ebp+var_7C], eax
		mov	eax, [edx]
		mov	ecx, [eax+3Ch]
		test	ecx, ecx
		jz	loc_6FFE43F1
		mov	ecx, [ebp+var_7C]
		or	byte ptr [ecx+44h], 1
		mov	eax, [edx]
		mov	ebx, [eax+4]
		mov	[ebp+var_38], ecx
		cmp	eax, ebx
		mov	[ebp+var_74], ebx
		jz	short loc_6FFE43E5
		mov	eax, ds:_ZN8QMapData11node_createEPPNS_4NodeEii
		mov	[ebp+var_70], eax

loc_6FFE4388:				; CODE XREF: sub_6FFE4310+D3j
		mov	edx, [ebp+var_74]
		lea	ecx, [ebp+var_38]
		mov	ebx, [ebp+var_7C]
		mov	dword ptr [esp+0Ch], 4
		mov	dword ptr [esp+8], 8
		sub	edx, 8
		mov	[ebp+var_78], edx
		mov	[esp+4], ecx
		mov	[esp], ebx
		mov	[ebp+var_68], 2
		call	[ebp+var_70]
		mov	edx, eax
		sub	edx, 8
		jz	short loc_6FFE43C7
		mov	ebx, [ebp+var_78]
		mov	ecx, [ebx]
		mov	[eax-8], ecx

loc_6FFE43C7:				; CODE XREF: sub_6FFE4310+ADj
		cmp	edx, 0FFFFFFFCh
		jz	short loc_6FFE43D5
		mov	ecx, [ebp+var_78]
		mov	eax, [ecx+4]
		mov	[edx+4], eax

loc_6FFE43D5:				; CODE XREF: sub_6FFE4310+BAj
		mov	ebx, [ebp+var_74]
		mov	eax, [ebp+arg_0]
		mov	ebx, [ebx+4]
		mov	[ebp+var_74], ebx
		cmp	[eax], ebx
		jnz	short loc_6FFE4388

loc_6FFE43E5:				; CODE XREF: sub_6FFE4310+6Ej
		mov	eax, [ebp+var_7C]
		and	byte ptr [eax+44h], 0FEh
		mov	edx, [ebp+arg_0]
		mov	eax, [edx]

loc_6FFE43F1:				; CODE XREF: sub_6FFE4310+54j
		lock dec dword ptr [eax+34h]
		setnz	dl
		test	dl, dl
		jnz	short loc_6FFE4419
		mov	ecx, [ebp+arg_0]
		mov	dword ptr [esp+4], 8
		mov	eax, [ecx]
		mov	[ebp+var_68], 0FFFFFFFFh
		mov	[esp], eax
		call	ds:_ZN8QMapData16continueFreeDataEi

loc_6FFE4419:				; CODE XREF: sub_6FFE4310+EAj
		mov	eax, [ebp+var_7C]
		mov	ebx, [ebp+arg_0]
		mov	[ebx], eax
		lea	eax, [ebp+var_6C]
		mov	[esp], eax
		call	_Unwind_SjLj_Unregister
		add	esp, 94h
		pop	ebx
		pop	ebp
		retn
sub_6FFE4310	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn

sub_6FFE4435	proc near		; DATA XREF: sub_6FFE4310+24o

arg_0		= dword	ptr  4

		add	ebp, 8
		mov	ebx, [ebp-64h]
		cmp	dword ptr [ebp-68h], 1
		mov	[ebp-80h], ebx
		jz	short loc_6FFE445F
		mov	dword ptr [ebp-68h], 0
		call	sub_6FFEBBF0
		mov	[esp+0], ebx
		mov	dword ptr [ebp-68h], 0FFFFFFFFh
		call	_Unwind_SjLj_Resume
; ---------------------------------------------------------------------------

loc_6FFE445F:				; CODE XREF: sub_6FFE4435+Dj
		mov	edx, [ebp-80h]
		mov	[esp+0], edx
		call	sub_6FFEB920
		mov	ecx, [ebp-7Ch]
		mov	[esp+arg_0], 8
		mov	dword ptr [ebp-68h], 1
		mov	[esp+0], ecx
		call	ds:_ZN8QMapData16continueFreeDataEi
		call	sub_6FFEC130
sub_6FFE4435	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_6FFE4490	proc near		; CODE XREF: _ZN16DBusMenuImporter21slotGetLayoutFinishedEP23QDBusPendingCallWatcher+BE8p

var_40		= dword	ptr -40h
var_3C		= byte ptr -3Ch
var_38		= dword	ptr -38h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_8		= byte ptr -8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h
arg_10		= dword	ptr  18h

		push	ebp
		mov	ebp, esp
		sub	esp, 58h
		lea	eax, [ebp+var_8]
		mov	[ebp+var_1C], eax
		lea	eax, [ebp+var_3C]
		mov	[esp], eax
		mov	[ebp+var_24], offset sub_6FFEC1F0
		mov	[ebp+var_20], offset dword_6FFECD74
		mov	[ebp+var_18], offset sub_6FFE452B
		mov	[ebp+var_14], esp
		call	_Unwind_SjLj_Register
		mov	edx, [ebp+arg_8]
		mov	ecx, [ebp+arg_4]
		mov	dword ptr [esp+0Ch], 4
		mov	dword ptr [esp+8], 8
		mov	[esp+4], edx
		mov	[esp], ecx
		mov	[ebp+var_38], 0FFFFFFFFh
		call	ds:_ZN8QMapData11node_createEPPNS_4NodeEii
		mov	[ebp+var_40], eax
		sub	eax, 8
		jz	short loc_6FFE44FC
		mov	edx, [ebp+arg_C]
		mov	ecx, [ebp+var_40]
		mov	edx, [edx]
		mov	[ecx-8], edx

loc_6FFE44FC:				; CODE XREF: sub_6FFE4490+5Fj
		mov	edx, eax
		add	edx, 4
		jz	short loc_6FFE451B
		mov	ecx, [ebp+arg_10]
		mov	ecx, [ecx]
		mov	[eax+4], ecx
		mov	[esp], edx
		mov	[ebp+var_38], 3
		call	ds:_ZN11QMetaObject8addGuardEPP7QObject

loc_6FFE451B:				; CODE XREF: sub_6FFE4490+71j
		lea	eax, [ebp+var_3C]
		mov	[esp], eax
		call	_Unwind_SjLj_Unregister
		mov	eax, [ebp+var_40]
		leave
		retn
sub_6FFE4490	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn

sub_6FFE452B	proc near		; DATA XREF: sub_6FFE4490+20o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		add	ebp, 8
		mov	eax, [ebp-38h]
		mov	ecx, [ebp-34h]
		cmp	eax, 1
		mov	[ebp-44h], ecx
		jz	short loc_6FFE455F
		cmp	eax, 2
		jz	short loc_6FFE45A4
		mov	dword ptr [ebp-38h], 0
		call	sub_6FFEBBF0
		mov	eax, [ebp-44h]
		mov	dword ptr [ebp-38h], 0FFFFFFFFh
		mov	[esp+0], eax
		call	_Unwind_SjLj_Resume
; ---------------------------------------------------------------------------

loc_6FFE455F:				; CODE XREF: sub_6FFE452B+Fj
		mov	dword ptr [ebp-38h], 0
		call	sub_6FFEBBF0
		mov	edx, [ebp-44h]
		mov	[esp+0], edx
		call	sub_6FFEB920
		mov	ecx, [ebp-40h]
		mov	eax, [ebp+10h]
		mov	edx, [ebp+0Ch]
		mov	[esp+arg_4], 8
		mov	[esp+arg_8], ecx
		mov	[esp+arg_0], eax
		mov	[esp+0], edx
		mov	dword ptr [ebp-38h], 1
		call	ds:_ZN8QMapData11node_deleteEPPNS_4NodeEiS1_
		call	sub_6FFEC130
; ---------------------------------------------------------------------------

loc_6FFE45A4:				; CODE XREF: sub_6FFE452B+14j
		mov	eax, [ebp-44h]
		mov	[esp+0], eax
		call	sub_6FFEB920
		mov	dword ptr [ebp-38h], 2
		call	sub_6FFEC130
sub_6FFE452B	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_6FFE45C0	proc near		; CODE XREF: _ZN16DBusMenuImporter21slotGetLayoutFinishedEP23QDBusPendingCallWatcher+65Ap
					; _ZN16DBusMenuImporter21slotGetLayoutFinishedEP23QDBusPendingCallWatcher+80Cp	...

var_8C		= dword	ptr -8Ch
var_88		= dword	ptr -88h
var_84		= dword	ptr -84h
var_80		= dword	ptr -80h
var_7C		= dword	ptr -7Ch
var_78		= dword	ptr -78h
var_74		= dword	ptr -74h
var_70		= dword	ptr -70h
var_6C		= byte ptr -6Ch
var_68		= dword	ptr -68h
var_54		= dword	ptr -54h
var_50		= dword	ptr -50h
var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_38		= dword	ptr -38h
var_8		= byte ptr -8
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		lea	eax, [ebp+var_8]
		push	ebx
		sub	esp, 0A4h
		mov	[ebp+var_4C], eax
		lea	eax, [ebp+var_6C]
		mov	[esp], eax
		mov	[ebp+var_54], offset sub_6FFEC1F0
		mov	[ebp+var_50], offset dword_6FFECD94
		mov	[ebp+var_48], offset sub_6FFE475C
		mov	[ebp+var_44], esp
		call	_Unwind_SjLj_Register
		mov	dword ptr [esp], 4
		mov	[ebp+var_68], 0FFFFFFFFh
		call	ds:_ZN8QMapData10createDataEi
		mov	edx, [ebp+arg_0]
		mov	[ebp+var_84], eax
		mov	eax, [edx]
		mov	ecx, [eax+3Ch]
		test	ecx, ecx
		jz	loc_6FFE46C7
		mov	ecx, [ebp+var_84]
		or	byte ptr [ecx+44h], 1
		mov	eax, [edx]
		mov	ebx, [eax+4]
		mov	[ebp+var_38], ecx
		cmp	eax, ebx
		mov	[ebp+var_78], ebx
		jz	loc_6FFE46B8
		mov	eax, ds:_ZN8QMapData11node_createEPPNS_4NodeEii
		mov	[ebp+var_74], eax

loc_6FFE4642:				; CODE XREF: sub_6FFE45C0+F6j
		mov	edx, [ebp+var_78]
		lea	ecx, [ebp+var_38]
		mov	ebx, [ebp+var_84]
		mov	dword ptr [esp+0Ch], 4
		mov	dword ptr [esp+8], 8
		sub	edx, 8
		mov	[ebp+var_80], edx
		mov	[esp+4], ecx
		mov	[esp], ebx
		mov	[ebp+var_68], 5
		call	[ebp+var_74]
		mov	[ebp+var_7C], eax
		sub	eax, 8
		jz	short loc_6FFE4688
		mov	ecx, [ebp+var_80]
		mov	ebx, [ebp+var_7C]
		mov	edx, [ecx]
		mov	[ebx-8], edx

loc_6FFE4688:				; CODE XREF: sub_6FFE45C0+BBj
		mov	edx, eax
		add	edx, 4
		jz	short loc_6FFE46A8
		mov	ebx, [ebp+var_80]
		mov	ecx, [ebx+4]
		mov	[eax+4], ecx
		mov	[esp], edx
		mov	[ebp+var_68], 3
		call	ds:_ZN11QMetaObject8addGuardEPP7QObject

loc_6FFE46A8:				; CODE XREF: sub_6FFE45C0+CDj
		mov	ecx, [ebp+var_78]
		mov	ebx, [ebp+arg_0]
		mov	ecx, [ecx+4]
		mov	[ebp+var_78], ecx
		cmp	[ebx], ecx
		jnz	short loc_6FFE4642

loc_6FFE46B8:				; CODE XREF: sub_6FFE45C0+74j
		mov	eax, [ebp+var_84]
		and	byte ptr [eax+44h], 0FEh
		mov	edx, [ebp+arg_0]
		mov	eax, [edx]

loc_6FFE46C7:				; CODE XREF: sub_6FFE45C0+57j
		lock dec dword ptr [eax+34h]
		setnz	dl
		test	dl, dl
		jz	short loc_6FFE46F1

loc_6FFE46D2:				; CODE XREF: sub_6FFE45C0+197j
		mov	eax, [ebp+arg_0]
		mov	edx, [ebp+var_84]
		mov	[eax], edx
		lea	eax, [ebp+var_6C]
		mov	[esp], eax
		call	_Unwind_SjLj_Unregister
		add	esp, 0A4h
		pop	ebx
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_6FFE46F1:				; CODE XREF: sub_6FFE45C0+110j
		mov	ecx, [ebp+arg_0]
		mov	ecx, [ecx]
		mov	eax, [ecx+4]
		mov	[ebp+var_8C], ecx
		cmp	ecx, eax
		jz	short loc_6FFE4739
		mov	ebx, ds:_ZN11QMetaObject11removeGuardEPP7QObject
		mov	[ebp+var_70], ebx
		jmp	short loc_6FFE4712
; ---------------------------------------------------------------------------
		align 10h

loc_6FFE4710:				; CODE XREF: sub_6FFE45C0+177j
		mov	eax, ecx

loc_6FFE4712:				; CODE XREF: sub_6FFE45C0+14Cj
		mov	edx, [eax+4]
		sub	eax, 4
		mov	[esp], eax
		mov	[ebp+var_68], 0FFFFFFFFh
		mov	[ebp+var_88], edx
		call	[ebp+var_70]
		mov	ecx, [ebp+var_88]
		cmp	[ebp+var_8C], ecx
		jnz	short loc_6FFE4710

loc_6FFE4739:				; CODE XREF: sub_6FFE45C0+141j
		mov	ebx, [ebp+var_8C]
		mov	dword ptr [esp+4], 8
		mov	[ebp+var_68], 0FFFFFFFFh
		mov	[esp], ebx
		call	ds:_ZN8QMapData16continueFreeDataEi
		jmp	loc_6FFE46D2
sub_6FFE45C0	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn

sub_6FFE475C	proc near		; DATA XREF: sub_6FFE45C0+24o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		add	ebp, 8
		mov	eax, [ebp-68h]
		mov	edx, [ebp-64h]
		cmp	eax, 1
		mov	[ebp-90h], edx
		jz	loc_6FFE47F9
		cmp	eax, 2
		jz	short loc_6FFE47DF
		cmp	eax, 3
		jz	short loc_6FFE47BE
		cmp	eax, 4
		jz	short loc_6FFE478F
		mov	dword ptr [ebp-68h], 0
		call	sub_6FFEBBF0

loc_6FFE478F:				; CODE XREF: sub_6FFE475C+25j
		mov	eax, [ebp-90h]
		mov	[esp+0], eax
		call	sub_6FFEB920
		mov	edx, [ebp-84h]
		mov	ecx, [ebp+8]
		mov	dword ptr [ebp-68h], 4
		mov	[esp+arg_0], edx
		mov	[esp+0], ecx
		call	sub_6FFE4850
		call	sub_6FFEC130
; ---------------------------------------------------------------------------

loc_6FFE47BE:				; CODE XREF: sub_6FFE475C+20j
		mov	dword ptr [ebp-68h], 0
		call	sub_6FFEBBF0
		mov	ebx, [ebp-90h]
		mov	dword ptr [ebp-68h], 0FFFFFFFFh
		mov	[esp+0], ebx
		call	_Unwind_SjLj_Resume
; ---------------------------------------------------------------------------

loc_6FFE47DF:				; CODE XREF: sub_6FFE475C+1Bj
		mov	eax, [ebp-90h]
		mov	[esp+0], eax
		call	sub_6FFEB920
		mov	dword ptr [ebp-68h], 2
		call	sub_6FFEC130
; ---------------------------------------------------------------------------

loc_6FFE47F9:				; CODE XREF: sub_6FFE475C+12j
		mov	dword ptr [ebp-68h], 0
		call	sub_6FFEBBF0
		mov	edx, [ebp-90h]
		mov	[esp+0], edx
		call	sub_6FFEB920
		mov	ecx, [ebp-7Ch]
		lea	eax, [ebp-38h]
		mov	ebx, [ebp-84h]
		mov	[esp+arg_4], 8
		mov	[esp+arg_0], eax
		mov	[esp+arg_8], ecx
		mov	[esp+0], ebx
		mov	dword ptr [ebp-68h], 1
		call	ds:_ZN8QMapData11node_deleteEPPNS_4NodeEiS1_
		call	sub_6FFEC130
sub_6FFE475C	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6FFE4850	proc near		; CODE XREF: sub_6FFCCF46+7Ap
					; sub_6FFCD988+F4p ...

var_1C		= dword	ptr -1Ch
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	edi
		push	esi
		push	ebx
		sub	esp, 10h
		mov	esi, [esp+1Ch+arg_4]
		mov	eax, [esi+4]
		cmp	esi, eax
		jz	short loc_6FFE4883
		mov	edi, ds:_ZN11QMetaObject11removeGuardEPP7QObject
		jmp	short loc_6FFE4872
; ---------------------------------------------------------------------------
		align 10h

loc_6FFE4870:				; CODE XREF: sub_6FFE4850+2Fj
		mov	eax, ebx

loc_6FFE4872:				; CODE XREF: sub_6FFE4850+17j
		mov	ebx, [eax+4]
		sub	eax, 4
		mov	[esp+1Ch+var_1C], eax
		call	edi ; _ZN11QMetaObject11removeGuardEPP7QObject
		cmp	esi, ebx
		jnz	short loc_6FFE4870
		mov	eax, esi

loc_6FFE4883:				; CODE XREF: sub_6FFE4850+Fj
		mov	[esp+1Ch+arg_0], eax
		mov	eax, ds:_ZN8QMapData16continueFreeDataEi
		mov	[esp+1Ch+arg_4], 8
		add	esp, 10h
		pop	ebx
		pop	esi
		pop	edi
		jmp	eax
sub_6FFE4850	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_6FFE48A0	proc near		; CODE XREF: sub_6FFC4020+B3p
					; sub_6FFC4C20+166p

var_7C		= dword	ptr -7Ch
var_78		= dword	ptr -78h
var_74		= dword	ptr -74h
var_70		= dword	ptr -70h
var_6C		= byte ptr -6Ch
var_68		= dword	ptr -68h
var_54		= dword	ptr -54h
var_50		= dword	ptr -50h
var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_38		= dword	ptr -38h
var_8		= byte ptr -8
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		lea	eax, [ebp+var_8]
		push	ebx
		sub	esp, 94h
		mov	[ebp+var_4C], eax
		lea	eax, [ebp+var_6C]
		mov	[esp], eax
		mov	[ebp+var_54], offset sub_6FFEC1F0
		mov	[ebp+var_50], offset dword_6FFEC854
		mov	[ebp+var_48], offset sub_6FFE49C5
		mov	[ebp+var_44], esp
		call	_Unwind_SjLj_Register
		mov	dword ptr [esp], 4
		mov	[ebp+var_68], 0FFFFFFFFh
		call	ds:_ZN8QMapData10createDataEi
		mov	edx, [ebp+arg_0]
		mov	[ebp+var_7C], eax
		mov	eax, [edx]
		mov	ebx, [eax+3Ch]
		test	ebx, ebx
		jz	loc_6FFE4981
		mov	ecx, [ebp+var_7C]
		or	byte ptr [ecx+44h], 1
		mov	eax, [edx]
		mov	ebx, [eax+4]
		mov	[ebp+var_38], ecx
		cmp	eax, ebx
		mov	[ebp+var_74], ebx
		jz	short loc_6FFE4975
		mov	eax, ds:_ZN8QMapData11node_createEPPNS_4NodeEii
		mov	[ebp+var_70], eax

loc_6FFE4918:				; CODE XREF: sub_6FFE48A0+D3j
		mov	edx, [ebp+var_74]
		lea	ecx, [ebp+var_38]
		mov	ebx, [ebp+var_7C]
		mov	dword ptr [esp+0Ch], 4
		mov	dword ptr [esp+8], 8
		sub	edx, 8
		mov	[ebp+var_78], edx
		mov	[esp+4], ecx
		mov	[esp], ebx
		mov	[ebp+var_68], 2
		call	[ebp+var_70]
		mov	edx, eax
		sub	edx, 8
		jz	short loc_6FFE4957
		mov	ebx, [ebp+var_78]
		mov	ecx, [ebx]
		mov	[eax-8], ecx

loc_6FFE4957:				; CODE XREF: sub_6FFE48A0+ADj
		cmp	edx, 0FFFFFFFCh
		jz	short loc_6FFE4965
		mov	ecx, [ebp+var_78]
		mov	eax, [ecx+4]
		mov	[edx+4], eax

loc_6FFE4965:				; CODE XREF: sub_6FFE48A0+BAj
		mov	ebx, [ebp+var_74]
		mov	eax, [ebp+arg_0]
		mov	ebx, [ebx+4]
		mov	[ebp+var_74], ebx
		cmp	[eax], ebx
		jnz	short loc_6FFE4918

loc_6FFE4975:				; CODE XREF: sub_6FFE48A0+6Ej
		mov	eax, [ebp+var_7C]
		and	byte ptr [eax+44h], 0FEh
		mov	edx, [ebp+arg_0]
		mov	eax, [edx]

loc_6FFE4981:				; CODE XREF: sub_6FFE48A0+54j
		lock dec dword ptr [eax+34h]
		setnz	dl
		test	dl, dl
		jnz	short loc_6FFE49A9
		mov	ecx, [ebp+arg_0]
		mov	dword ptr [esp+4], 8
		mov	eax, [ecx]
		mov	[ebp+var_68], 0FFFFFFFFh
		mov	[esp], eax
		call	ds:_ZN8QMapData16continueFreeDataEi

loc_6FFE49A9:				; CODE XREF: sub_6FFE48A0+EAj
		mov	eax, [ebp+var_7C]
		mov	ebx, [ebp+arg_0]
		mov	[ebx], eax
		lea	eax, [ebp+var_6C]
		mov	[esp], eax
		call	_Unwind_SjLj_Unregister
		add	esp, 94h
		pop	ebx
		pop	ebp
		retn
sub_6FFE48A0	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn

sub_6FFE49C5	proc near		; DATA XREF: sub_6FFE48A0+24o

arg_0		= dword	ptr  4

		add	ebp, 8
		mov	ebx, [ebp-64h]
		cmp	dword ptr [ebp-68h], 1
		mov	[ebp-80h], ebx
		jz	short loc_6FFE49EF
		mov	dword ptr [ebp-68h], 0
		call	sub_6FFEBBF0
		mov	[esp+0], ebx
		mov	dword ptr [ebp-68h], 0FFFFFFFFh
		call	_Unwind_SjLj_Resume
; ---------------------------------------------------------------------------

loc_6FFE49EF:				; CODE XREF: sub_6FFE49C5+Dj
		mov	edx, [ebp-80h]
		mov	[esp+0], edx
		call	sub_6FFEB920
		mov	ecx, [ebp-7Ch]
		mov	[esp+arg_0], 8
		mov	dword ptr [ebp-68h], 1
		mov	[esp+0], ecx
		call	ds:_ZN8QMapData16continueFreeDataEi
		call	sub_6FFEC130
sub_6FFE49C5	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6FFE4A20	proc near		; CODE XREF: sub_6FFC4B8E+69p
					; _ZN16DBusMenuExporter15doUpdateActionsEv+1623p ...

var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
arg_0		= dword	ptr  4

		sub	esp, 1Ch
		mov	edx, [esp+1Ch+arg_0]
		mov	eax, [edx]
		lock dec dword ptr [eax+8]
		setnz	cl
		test	cl, cl
		jnz	short loc_6FFE4A47
		mov	[esp+1Ch+var_18], offset nullsub_1
		mov	eax, [edx]
		mov	[esp+1Ch+var_1C], eax
		call	ds:_ZN9QHashData11free_helperEPFvPNS_4NodeEE

loc_6FFE4A47:				; CODE XREF: sub_6FFE4A20+12j
		add	esp, 1Ch
		retn
sub_6FFE4A20	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6FFE4A50	proc near		; CODE XREF: .text:6FFC1C52p
					; sub_6FFC2030+A3p ...

var_6C		= dword	ptr -6Ch
var_68		= dword	ptr -68h
var_64		= dword	ptr -64h
var_60		= dword	ptr -60h
var_5C		= dword	ptr -5Ch
var_40		= dword	ptr -40h
var_30		= dword	ptr -30h
var_20		= dword	ptr -20h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		sub	esp, 6Ch
		mov	[esp+6Ch+var_C], esi
		mov	esi, [esp+6Ch+arg_0]
		mov	[esp+6Ch+var_4], ebp
		mov	ebp, [esp+6Ch+arg_4]
		mov	[esp+6Ch+var_10], ebx
		mov	[esp+6Ch+var_8], edi
		mov	edi, [esi]
		mov	eax, [edi+8]
		cmp	eax, 1
		jz	short loc_6FFE4AB3
		mov	[esp+6Ch+var_6C], edi
		mov	[esp+6Ch+var_5C], 4
		mov	[esp+6Ch+var_60], 8
		mov	[esp+6Ch+var_64], offset nullsub_1
		mov	[esp+6Ch+var_68], offset nullsub_2
		call	ds:_ZN9QHashData14detach_helper2EPFvPNS_4NodeEPvEPFvS1_Eii
		mov	edi, eax
		mov	eax, [esi]
		lock dec dword ptr [eax+8]
		setnz	dl
		test	dl, dl
		jz	loc_6FFE4B56

loc_6FFE4AB1:				; CODE XREF: sub_6FFE4A50+119j
		mov	[esi], edi

loc_6FFE4AB3:				; CODE XREF: sub_6FFE4A50+23j
		mov	eax, [edi+18h]
		mov	ebx, [ebp+0]
		test	eax, eax
		mov	[esp+6Ch+var_40], eax
		jz	short loc_6FFE4B16
		xor	edx, edx
		mov	eax, ebx
		div	[esp+6Ch+var_40]
		mov	ecx, edx
		shl	ecx, 2
		add	ecx, [edi+4]
		mov	eax, [ecx]
		cmp	eax, edi
		jz	short loc_6FFE4AE1
		mov	edi, [eax]
		test	edi, edi
		jz	loc_6FFE4BA0

loc_6FFE4AE1:				; CODE XREF: sub_6FFE4A50+85j
					; sub_6FFE4A50+177j
		mov	edx, [esi]
		cmp	eax, edx
		jz	short loc_6FFE4AF8

loc_6FFE4AE7:				; CODE XREF: sub_6FFE4A50+A6j
		cmp	ebx, [eax+4]
		jz	loc_6FFE4BCC
		mov	ecx, eax
		mov	eax, [eax]
		cmp	eax, edx
		jnz	short loc_6FFE4AE7

loc_6FFE4AF8:				; CODE XREF: sub_6FFE4A50+95j
					; sub_6FFE4A50+17Ej
		mov	[esp+6Ch+var_20], ebx
		cmp	[ecx], eax
		jz	short loc_6FFE4B22

loc_6FFE4B00:				; CODE XREF: sub_6FFE4A50+D0j
					; sub_6FFE4A50+104j
		mov	eax, esi
		mov	ebx, [esp+6Ch+var_10]
		mov	esi, [esp+6Ch+var_C]
		mov	edi, [esp+6Ch+var_8]
		mov	ebp, [esp+6Ch+var_4]
		add	esp, 6Ch
		retn
; ---------------------------------------------------------------------------

loc_6FFE4B16:				; CODE XREF: sub_6FFE4A50+6Fj
		mov	eax, [esi]
		mov	ecx, esi
		mov	[esp+6Ch+var_20], ebx
		cmp	[ecx], eax
		jnz	short loc_6FFE4B00

loc_6FFE4B22:				; CODE XREF: sub_6FFE4A50+AEj
		mov	edx, [eax+0Ch]
		cmp	edx, [eax+18h]
		jge	short loc_6FFE4B70

loc_6FFE4B2A:				; CODE XREF: sub_6FFE4A50+14Ej
		mov	[esp+6Ch+var_68], 4
		mov	eax, [esi]
		mov	[esp+6Ch+var_30], ecx
		mov	[esp+6Ch+var_6C], eax
		call	ds:_ZN9QHashData12allocateNodeEi
		mov	[eax+4], ebx
		mov	ecx, [esp+6Ch+var_30]
		mov	edx, [ecx]
		mov	[eax], edx
		mov	[ecx], eax
		mov	eax, [esi]
		add	dword ptr [eax+0Ch], 1
		jmp	short loc_6FFE4B00
; ---------------------------------------------------------------------------

loc_6FFE4B56:				; CODE XREF: sub_6FFE4A50+5Bj
		mov	[esp+6Ch+var_68], offset nullsub_1
		mov	eax, [esi]
		mov	[esp+6Ch+var_6C], eax
		call	ds:_ZN9QHashData11free_helperEPFvPNS_4NodeEE
		jmp	loc_6FFE4AB1
; ---------------------------------------------------------------------------
		align 10h

loc_6FFE4B70:				; CODE XREF: sub_6FFE4A50+D8j
		movsx	edx, word ptr [eax+16h]
		mov	[esp+6Ch+var_6C], eax
		add	edx, 1
		mov	[esp+6Ch+var_68], edx
		call	ds:_ZN9QHashData6rehashEi
		lea	eax, [esp+6Ch+var_20]
		mov	[esp+6Ch+var_64], eax
		mov	[esp+6Ch+var_68], ebp
		mov	[esp+6Ch+var_6C], esi
		call	sub_6FFEAA30
		mov	ebx, [esp+6Ch+var_20]
		mov	ecx, eax
		jmp	short loc_6FFE4B2A
; ---------------------------------------------------------------------------

loc_6FFE4BA0:				; CODE XREF: sub_6FFE4A50+8Bj
		mov	[esp+6Ch+var_30], ecx
		mov	[esp+6Ch+var_64], 376h
		mov	[esp+6Ch+var_68], offset aRIncludeQtco_0 ; "R:/include/QtCore/qhash.h"
		mov	[esp+6Ch+var_6C], offset aNodeENodeNext	; "*node == e || (*node)->next"
		call	ds:_Z9qt_assertPKcS0_i
		mov	ecx, [esp+6Ch+var_30]
		mov	eax, [ecx]
		jmp	loc_6FFE4AE1
; ---------------------------------------------------------------------------

loc_6FFE4BCC:				; CODE XREF: sub_6FFE4A50+9Aj
		mov	eax, edx
		jmp	loc_6FFE4AF8
sub_6FFE4A50	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_6FFE4BE0	proc near		; CODE XREF: sub_6FFC4C20+81Ep

var_40		= dword	ptr -40h
var_3C		= byte ptr -3Ch
var_38		= dword	ptr -38h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_8		= byte ptr -8
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h
arg_10		= dword	ptr  18h

		push	ebp
		mov	ebp, esp
		sub	esp, 58h
		lea	eax, [ebp+var_8]
		mov	[ebp+var_1C], eax
		lea	eax, [ebp+var_3C]
		mov	[esp], eax
		mov	[ebp+var_24], offset sub_6FFEC1F0
		mov	[ebp+var_20], offset word_6FFEC94A
		mov	[ebp+var_18], offset sub_6FFE4CA5
		mov	[ebp+var_14], esp
		call	_Unwind_SjLj_Register
		mov	edx, [ebp+arg_0]
		mov	dword ptr [esp+4], 4
		mov	eax, [edx]
		mov	[ebp+var_38], 0FFFFFFFFh
		mov	[esp], eax
		call	ds:_ZN9QHashData12allocateNodeEi
		test	eax, eax
		mov	[ebp+var_40], eax
		jz	short loc_6FFE4C74
		mov	edx, eax
		mov	eax, [ebp+arg_8]
		mov	eax, [eax]
		mov	[edx+8], eax
		mov	eax, [ebp+arg_C]
		mov	eax, [eax]
		mov	[edx+0Ch], eax
		lock inc dword ptr [eax+34h]
		setnz	dl
		mov	edx, [ebp+var_40]
		mov	eax, [edx+0Ch]
		test	byte ptr [eax+44h], 2
		jnz	short loc_6FFE4C74
		mov	eax, [eax+34h]
		cmp	eax, 1
		jz	short loc_6FFE4C74
		mov	eax, edx
		add	eax, 0Ch
		mov	[esp], eax
		mov	[ebp+var_38], 1
		call	sub_6FFE3B80

loc_6FFE4C74:				; CODE XREF: sub_6FFE4BE0+51j
					; sub_6FFE4BE0+76j ...
		mov	eax, [ebp+arg_4]
		mov	edx, [ebp+var_40]
		mov	[edx+4], eax
		mov	edx, [ebp+arg_10]
		mov	eax, [edx]
		mov	edx, [ebp+var_40]
		mov	[edx], eax
		mov	eax, [ebp+arg_10]
		mov	[eax], edx
		mov	edx, [ebp+arg_0]
		mov	eax, [edx]
		add	dword ptr [eax+0Ch], 1
		lea	eax, [ebp+var_3C]
		mov	[esp], eax
		call	_Unwind_SjLj_Unregister
		mov	eax, [ebp+var_40]
		leave
		retn
sub_6FFE4BE0	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn

sub_6FFE4CA5	proc near		; DATA XREF: sub_6FFE4BE0+20o
		add	ebp, 8
		mov	eax, [ebp-34h]
		mov	dword ptr [ebp-38h], 0FFFFFFFFh
		mov	[esp+0], eax
		call	_Unwind_SjLj_Resume
sub_6FFE4CA5	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6FFE4CC0	proc near		; DATA XREF: sub_6FFC4C20+591o
					; sub_6FFC4C20:loc_6FFC5464o ...

var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
arg_0		= dword	ptr  4

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 1Ch
		mov	edx, [esp+2Ch+arg_0]
		mov	eax, [edx+0Ch]
		test	eax, eax
		jz	short loc_6FFE4CDD
		lock dec dword ptr [eax+34h]
		setnz	cl
		test	cl, cl
		jz	short loc_6FFE4CE5

loc_6FFE4CDD:				; CODE XREF: sub_6FFE4CC0+10j
		add	esp, 1Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_6FFE4CE5:				; CODE XREF: sub_6FFE4CC0+1Bj
		mov	edi, [edx+0Ch]
		mov	eax, [edi+4]
		cmp	edi, eax
		jz	short loc_6FFE4D24
		mov	ebp, ds:_ZN8QVariantD1Ev
		jmp	short loc_6FFE4CF9
; ---------------------------------------------------------------------------

loc_6FFE4CF7:				; CODE XREF: sub_6FFE4CC0+62j
		mov	eax, ebx

loc_6FFE4CF9:				; CODE XREF: sub_6FFE4CC0+35j
		mov	ebx, [eax+4]
		lea	esi, [eax-1Ch]
		mov	edx, [eax-1Ch]
		lock dec dword ptr [edx]
		setnz	cl
		test	cl, cl
		jnz	short loc_6FFE4D18
		mov	eax, [eax-1Ch]
		mov	[esp+2Ch+var_2C], eax
		call	ds:_ZN7QString4freeEPNS_4DataE

loc_6FFE4D18:				; CODE XREF: sub_6FFE4CC0+4Aj
		lea	eax, [esi+8]
		mov	[esp+2Ch+var_2C], eax
		call	ebp ; _ZN8QVariantD1Ev
		cmp	edi, ebx
		jnz	short loc_6FFE4CF7

loc_6FFE4D24:				; CODE XREF: sub_6FFE4CC0+2Dj
		mov	[esp+2Ch+var_2C], edi
		mov	[esp+2Ch+var_28], 1Ch
		call	ds:_ZN8QMapData16continueFreeDataEi
		add	esp, 1Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
sub_6FFE4CC0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_6FFE4D40	proc near		; DATA XREF: sub_6FFC4C20+599o
					; _ZN16DBusMenuExporter15doUpdateActionsEv+213o ...

var_3C		= byte ptr -3Ch
var_38		= dword	ptr -38h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_8		= byte ptr -8
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 58h
		lea	eax, [ebp+var_8]
		mov	[ebp+var_1C], eax
		lea	eax, [ebp+var_3C]
		mov	[esp], eax
		mov	[ebp+var_24], offset sub_6FFEC1F0
		mov	[ebp+var_20], offset dword_6FFEC944
		mov	[ebp+var_18], offset sub_6FFE4DCA
		mov	[ebp+var_14], esp
		call	_Unwind_SjLj_Register
		mov	eax, [ebp+arg_4]
		test	eax, eax
		jz	short loc_6FFE4DBD
		mov	edx, [ebp+arg_0]
		mov	eax, [edx+8]
		mov	edx, [ebp+arg_4]
		mov	[edx+8], eax
		mov	edx, [ebp+arg_0]
		mov	eax, [edx+0Ch]
		mov	edx, [ebp+arg_4]
		mov	[edx+0Ch], eax
		lock inc dword ptr [eax+34h]
		setnz	dl
		mov	edx, [ebp+arg_4]
		mov	eax, [edx+0Ch]
		test	byte ptr [eax+44h], 2
		jnz	short loc_6FFE4DBD
		mov	eax, [eax+34h]
		cmp	eax, 1
		jz	short loc_6FFE4DBD
		mov	eax, edx
		add	eax, 0Ch
		mov	[esp], eax
		mov	[ebp+var_38], 1
		call	sub_6FFE3B80

loc_6FFE4DBD:				; CODE XREF: sub_6FFE4D40+34j
					; sub_6FFE4D40+5Fj ...
		lea	eax, [ebp+var_3C]
		mov	[esp], eax
		call	_Unwind_SjLj_Unregister
		leave
		retn
sub_6FFE4D40	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn

sub_6FFE4DCA	proc near		; DATA XREF: sub_6FFE4D40+20o
		add	ebp, 8
		mov	eax, [ebp-34h]
		mov	dword ptr [ebp-38h], 0FFFFFFFFh
		mov	[esp+0], eax
		call	_Unwind_SjLj_Resume
sub_6FFE4DCA	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_6FFE4DE0	proc near		; CODE XREF: sub_6FFC4020+27p

var_78		= dword	ptr -78h
var_74		= dword	ptr -74h
var_70		= dword	ptr -70h
var_6C		= dword	ptr -6Ch
var_68		= dword	ptr -68h
var_61		= byte ptr -61h
var_60		= dword	ptr -60h
var_5C		= dword	ptr -5Ch
var_58		= dword	ptr -58h
var_54		= dword	ptr -54h
var_50		= dword	ptr -50h
var_4C		= byte ptr -4Ch
var_48		= dword	ptr -48h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_18		= byte ptr -18h
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		lea	eax, [ebp+var_18]
		sub	esp, 8Ch
		mov	[ebp+var_2C], eax
		lea	eax, [ebp+var_4C]
		mov	[ebp+var_34], offset sub_6FFEC1F0
		mov	[ebp+var_30], offset dword_6FFEC9C8
		mov	[ebp+var_28], offset sub_6FFE50E0
		mov	[ebp+var_24], esp
		mov	[esp], eax
		call	_Unwind_SjLj_Register
		mov	edx, [ebp+arg_0]
		mov	edx, [edx]
		mov	[ebp+var_74], 0
		mov	ecx, [edx+0Ch]
		mov	[ebp+var_68], edx
		test	ecx, ecx
		mov	[ebp+var_70], ecx
		jnz	short loc_6FFE4E47

loc_6FFE4E2E:				; CODE XREF: sub_6FFE4DE0+288j
		lea	eax, [ebp+var_4C]
		mov	[esp], eax
		call	_Unwind_SjLj_Unregister
		mov	eax, [ebp+var_74]
		add	esp, 8Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_6FFE4E47:				; CODE XREF: sub_6FFE4DE0+4Cj
		mov	eax, [edx+8]
		cmp	eax, 1
		jz	short loc_6FFE4EA4
		mov	dword ptr [esp+10h], 4
		mov	dword ptr [esp+0Ch], 10h
		mov	dword ptr [esp+8], offset sub_6FFE4CC0
		mov	dword ptr [esp+4], offset sub_6FFE4D40
		mov	[esp], edx
		mov	[ebp+var_48], 0FFFFFFFFh
		call	ds:_ZN9QHashData14detach_helper2EPFvPNS_4NodeEPvEPFvS1_Eii
		mov	ecx, [ebp+arg_0]
		mov	[ebp+var_68], eax
		mov	eax, [ecx]
		lock dec dword ptr [eax+8]
		setnz	dl
		test	dl, dl
		jz	loc_6FFE5090

loc_6FFE4E96:				; CODE XREF: sub_6FFE4DE0+2C3j
		mov	edx, [ebp+var_68]
		mov	eax, [ebp+arg_0]
		mov	[eax], edx
		mov	ecx, [edx+0Ch]
		mov	[ebp+var_70], ecx

loc_6FFE4EA4:				; CODE XREF: sub_6FFE4DE0+6Dj
		mov	ecx, [ebp+var_68]
		mov	edx, [ebp+arg_4]
		mov	ebx, [ecx+18h]
		mov	eax, [edx]
		test	ebx, ebx
		jnz	loc_6FFE4FC0
		mov	ecx, [ebp+arg_0]
		mov	[ebp+var_6C], ecx
		mov	eax, [ecx]
		mov	edx, ecx

loc_6FFE4EC1:				; CODE XREF: sub_6FFE4DE0+23Bj
		mov	edx, [edx]
		cmp	edx, eax
		mov	[ebp+var_58], edx
		jnz	short loc_6FFE4F14
		jmp	loc_6FFE5058
; ---------------------------------------------------------------------------
		align 10h

loc_6FFE4ED0:				; CODE XREF: sub_6FFE4DE0+156j
					; sub_6FFE4DE0+161j ...
		mov	edx, [ebp+var_58]
		mov	ecx, [ebp+arg_0]
		mov	[esp+4], edx
		mov	eax, [ecx]
		mov	[ebp+var_48], 0FFFFFFFFh
		mov	[esp], eax
		call	ds:_ZN9QHashData8freeNodeEPv
		mov	edx, [ebp+var_60]
		mov	eax, [ebp+var_6C]
		mov	ecx, [ebp+arg_0]
		mov	[eax], edx
		mov	eax, [ecx]
		mov	edx, [eax+0Ch]
		sub	edx, 1
		cmp	[ebp+var_61], 0
		mov	[eax+0Ch], edx
		jz	loc_6FFE5020
		mov	edx, [ebp+var_60]
		mov	eax, [ecx]
		mov	[ebp+var_58], edx

loc_6FFE4F14:				; CODE XREF: sub_6FFE4DE0+E8j
		mov	edx, [edx]
		mov	[ebp+var_61], 0
		cmp	edx, eax
		mov	[ebp+var_60], edx
		jz	short loc_6FFE4F2E
		mov	eax, [edx+8]
		mov	edx, [ebp+var_58]
		cmp	eax, [edx+8]
		setz	[ebp+var_61]

loc_6FFE4F2E:				; CODE XREF: sub_6FFE4DE0+13Fj
		mov	ecx, [ebp+var_58]
		mov	eax, [ecx+0Ch]
		test	eax, eax
		jz	short loc_6FFE4ED0
		lock dec dword ptr [eax+34h]
		setnz	dl
		test	dl, dl
		jnz	short loc_6FFE4ED0
		mov	eax, [ecx+0Ch]
		mov	edx, eax
		mov	[ebp+var_5C], eax
		mov	eax, [eax+4]
		cmp	edx, eax
		jnz	short loc_6FFE4F56
		jmp	short loc_6FFE4FA0
; ---------------------------------------------------------------------------

loc_6FFE4F54:				; CODE XREF: sub_6FFE4DE0+1BEj
		mov	eax, ecx

loc_6FFE4F56:				; CODE XREF: sub_6FFE4DE0+170j
		mov	ecx, [eax+4]
		lea	edx, [eax-1Ch]
		mov	[ebp+var_54], edx
		mov	edx, [eax-1Ch]
		mov	[ebp+var_50], ecx
		lock dec dword ptr [edx]
		setnz	cl
		test	cl, cl
		jnz	short loc_6FFE4F82
		mov	eax, [eax-1Ch]
		mov	[ebp+var_48], 0FFFFFFFFh
		mov	[esp], eax
		call	ds:_ZN7QString4freeEPNS_4DataE

loc_6FFE4F82:				; CODE XREF: sub_6FFE4DE0+18Dj
		mov	eax, [ebp+var_54]
		mov	[ebp+var_48], 0FFFFFFFFh
		add	eax, 8
		mov	[esp], eax
		call	ds:_ZN8QVariantD1Ev
		mov	ecx, [ebp+var_50]
		cmp	[ebp+var_5C], ecx
		jnz	short loc_6FFE4F54

loc_6FFE4FA0:				; CODE XREF: sub_6FFE4DE0+172j
		mov	eax, [ebp+var_5C]
		mov	dword ptr [esp+4], 1Ch
		mov	[ebp+var_48], 0FFFFFFFFh
		mov	[esp], eax
		call	ds:_ZN8QMapData16continueFreeDataEi
		jmp	loc_6FFE4ED0
; ---------------------------------------------------------------------------

loc_6FFE4FC0:				; CODE XREF: sub_6FFE4DE0+D1j
		xor	edx, edx
		mov	[ebp+var_78], eax
		div	ebx
		mov	eax, [ebp+var_68]
		mov	eax, [eax+4]
		mov	ecx, edx
		shl	ecx, 2
		add	ecx, eax
		mov	edx, [ecx]
		cmp	edx, [ebp+var_68]
		mov	[ebp+var_6C], ecx
		jz	short loc_6FFE4FE8
		mov	ecx, [edx]
		test	ecx, ecx
		jz	loc_6FFE50B2

loc_6FFE4FE8:				; CODE XREF: sub_6FFE4DE0+1FCj
					; sub_6FFE4DE0+2FBj
		mov	ecx, [ebp+arg_0]
		mov	eax, [ecx]
		cmp	eax, edx
		jz	loc_6FFE50AC
		mov	ebx, [ebp+var_78]
		mov	esi, [ebp+var_6C]
		mov	edi, [ebp+arg_4]
		jmp	short loc_6FFE500A
; ---------------------------------------------------------------------------

loc_6FFE5000:				; CODE XREF: sub_6FFE4DE0+22Dj
					; sub_6FFE4DE0+234j
		mov	ecx, [edx]
		cmp	ecx, eax
		jz	short loc_6FFE5081
		mov	esi, edx
		mov	edx, ecx

loc_6FFE500A:				; CODE XREF: sub_6FFE4DE0+21Ej
		cmp	ebx, [edx+4]
		jnz	short loc_6FFE5000
		mov	ecx, [edi]
		cmp	ecx, [edx+8]
		jnz	short loc_6FFE5000
		mov	[ebp+var_6C], esi
		mov	edx, esi
		jmp	loc_6FFE4EC1
; ---------------------------------------------------------------------------

loc_6FFE5020:				; CODE XREF: sub_6FFE4DE0+126j
		mov	ecx, [eax+18h]
		sar	ecx, 3
		cmp	ecx, edx
		jl	short loc_6FFE5060
		movzx	ebx, word ptr [eax+16h]
		movzx	ecx, word ptr [eax+14h]
		cmp	bx, cx
		jle	short loc_6FFE5060
		movsx	edx, bx
		movsx	ecx, cx
		sub	edx, 2
		cmp	edx, ecx
		jl	short loc_6FFE50A8

loc_6FFE5044:				; CODE XREF: sub_6FFE4DE0+2CAj
		mov	[esp+4], edx
		mov	[esp], eax
		mov	[ebp+var_48], 1
		call	ds:_ZN9QHashData6rehashEi

loc_6FFE5058:				; CODE XREF: sub_6FFE4DE0+EAj
		mov	ecx, [ebp+arg_0]
		mov	eax, [ecx]
		mov	edx, [eax+0Ch]

loc_6FFE5060:				; CODE XREF: sub_6FFE4DE0+248j
					; sub_6FFE4DE0+255j ...
		mov	ecx, [ebp+var_70]
		sub	ecx, edx
		mov	[ebp+var_74], ecx
		jmp	loc_6FFE4E2E
; ---------------------------------------------------------------------------

loc_6FFE506D:				; CODE XREF: sub_6FFE50E0+Aj
		mov	[esp], eax
		call	sub_6FFEB920
		mov	[ebp+var_48], 0
		call	sub_6FFEBBF0

loc_6FFE5081:				; CODE XREF: sub_6FFE4DE0+224j
		mov	edx, [ebp+arg_0]
		mov	eax, [edx]
		mov	edx, [eax+0Ch]
		jmp	short loc_6FFE5060
; ---------------------------------------------------------------------------
		align 10h

loc_6FFE5090:				; CODE XREF: sub_6FFE4DE0+B0j
		mov	dword ptr [esp+4], offset sub_6FFE4CC0
		mov	eax, [ecx]
		mov	[esp], eax
		call	ds:_ZN9QHashData11free_helperEPFvPNS_4NodeEE
		jmp	loc_6FFE4E96
; ---------------------------------------------------------------------------

loc_6FFE50A8:				; CODE XREF: sub_6FFE4DE0+262j
		mov	edx, ecx
		jmp	short loc_6FFE5044
; ---------------------------------------------------------------------------

loc_6FFE50AC:				; CODE XREF: sub_6FFE4DE0+20Fj
		mov	edx, [edx+0Ch]
		nop
		jmp	short loc_6FFE5060
; ---------------------------------------------------------------------------

loc_6FFE50B2:				; CODE XREF: sub_6FFE4DE0+202j
		mov	dword ptr [esp+8], 376h
		mov	dword ptr [esp+4], offset aRIncludeQtco_0 ; "R:/include/QtCore/qhash.h"
		mov	dword ptr [esp], offset	aNodeENodeNext ; "*node	== e ||	(*node)->next"
		mov	[ebp+var_48], 0FFFFFFFFh
		call	ds:_Z9qt_assertPKcS0_i
		mov	ecx, [ebp+var_6C]
		mov	edx, [ecx]
		jmp	loc_6FFE4FE8
sub_6FFE4DE0	endp


; =============== S U B	R O U T	I N E =======================================


sub_6FFE50E0	proc near		; DATA XREF: sub_6FFE4DE0+23o
		add	ebp, 18h
		cmp	dword ptr [ebp-40h], 1
		mov	eax, [ebp-44h]
		jz	short loc_6FFE506D
		mov	[esp+0], eax
		mov	dword ptr [ebp-48h], 0FFFFFFFFh
		call	_Unwind_SjLj_Resume
sub_6FFE50E0	endp

; ---------------------------------------------------------------------------
		align 10h
; [00000002 BYTES: COLLAPSED FUNCTION nullsub_1]
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6FFE5110	proc near		; CODE XREF: _ZN16DBusMenuExporter19doEmitLayoutUpdatedEv+23Dp

var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4

		sub	esp, 2Ch
		mov	[esp+2Ch+var_8], ebx
		mov	ebx, [esp+2Ch+arg_0]
		mov	[esp+2Ch+var_4], esi
		mov	[esp+2Ch+var_1C], 4
		mov	[esp+2Ch+var_20], 8
		mov	[esp+2Ch+var_24], offset nullsub_1
		mov	[esp+2Ch+var_28], offset nullsub_2
		mov	eax, [ebx]
		mov	[esp+2Ch+var_2C], eax
		call	ds:_ZN9QHashData14detach_helper2EPFvPNS_4NodeEPvEPFvS1_Eii
		mov	edx, [ebx]
		mov	esi, eax
		lock dec dword ptr [edx+8]
		setnz	al
		test	al, al
		jnz	short loc_6FFE516C
		mov	[esp+2Ch+var_28], offset nullsub_1
		mov	eax, [ebx]
		mov	[esp+2Ch+var_2C], eax
		call	ds:_ZN9QHashData11free_helperEPFvPNS_4NodeEE

loc_6FFE516C:				; CODE XREF: sub_6FFE5110+47j
		mov	[ebx], esi
		mov	ebx, [esp+2Ch+var_8]
		mov	esi, [esp+2Ch+var_4]
		add	esp, 2Ch
		retn
sub_6FFE5110	endp

; ---------------------------------------------------------------------------
		align 10h
; [00000002 BYTES: COLLAPSED FUNCTION nullsub_2]
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_6FFE5190	proc near		; CODE XREF: _ZN16DBusMenuImporter17slotLayoutUpdatedEji+28p

var_70		= dword	ptr -70h
var_6C		= dword	ptr -6Ch
var_68		= dword	ptr -68h
var_64		= dword	ptr -64h
var_60		= dword	ptr -60h
var_5C		= dword	ptr -5Ch
var_58		= dword	ptr -58h
var_54		= dword	ptr -54h
var_50		= dword	ptr -50h
var_4C		= byte ptr -4Ch
var_48		= dword	ptr -48h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_18		= byte ptr -18h
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		lea	eax, [ebp+var_18]
		sub	esp, 8Ch
		mov	[ebp+var_2C], eax
		lea	eax, [ebp+var_4C]
		mov	[ebp+var_34], offset sub_6FFEC1F0
		mov	[ebp+var_30], offset dword_6FFECDF0
		mov	[ebp+var_28], offset sub_6FFE548C
		mov	[ebp+var_24], esp
		mov	[esp], eax
		call	_Unwind_SjLj_Register
		mov	edx, [ebp+arg_0]
		mov	edx, [edx]
		mov	[ebp+var_64], 0
		mov	ecx, [edx+0Ch]
		mov	[ebp+var_60], edx
		test	ecx, ecx
		mov	[ebp+var_68], ecx
		jz	loc_6FFE5350
		mov	eax, [edx+8]
		cmp	eax, 1
		jz	short loc_6FFE523F
		mov	[esp], edx
		mov	dword ptr [esp+10h], 4
		mov	dword ptr [esp+0Ch], 8
		mov	dword ptr [esp+8], offset nullsub_1
		mov	dword ptr [esp+4], offset nullsub_2
		mov	[ebp+var_48], 0FFFFFFFFh
		call	ds:_ZN9QHashData14detach_helper2EPFvPNS_4NodeEPvEPFvS1_Eii
		mov	edx, [ebp+arg_0]
		mov	[ebp+var_60], eax
		mov	eax, [edx]
		lock dec dword ptr [eax+8]
		setnz	dl
		test	dl, dl
		jz	loc_6FFE5390
		mov	eax, [ebp+var_60]
		mov	ebx, [ebp+arg_0]
		mov	[ebx], eax
		mov	edx, [eax+0Ch]
		mov	[ebp+var_68], edx

loc_6FFE523F:				; CODE XREF: sub_6FFE5190+58j
					; sub_6FFE5190+224j
		mov	ecx, [ebp+var_60]
		mov	eax, [ebp+arg_4]
		mov	[ebp+var_64], 0
		mov	ebx, [ecx+18h]
		mov	eax, [eax]
		test	ebx, ebx
		mov	[ebp+var_6C], eax
		jz	loc_6FFE5350
		xor	edx, edx
		mov	[ebp+var_70], eax
		div	ebx
		mov	ebx, [ebp+var_60]
		mov	ebx, [ebx+4]
		mov	ecx, edx
		shl	ecx, 2
		add	ecx, ebx
		mov	eax, [ecx]
		cmp	eax, [ebp+var_60]
		mov	[ebp+var_58], ecx
		jz	short loc_6FFE5284
		mov	edx, [eax]
		test	edx, edx
		jz	loc_6FFE545E

loc_6FFE5284:				; CODE XREF: sub_6FFE5190+E8j
					; sub_6FFE5190+2F7j
		mov	ecx, [ebp+arg_0]
		mov	edx, [ecx]
		cmp	edx, eax
		jz	loc_6FFE5450
		mov	ecx, [ebp+var_6C]
		cmp	ecx, [eax+4]
		jz	short loc_6FFE52B6
		mov	ebx, [ebp+var_70]
		jmp	short loc_6FFE52A2
; ---------------------------------------------------------------------------
		align 10h

loc_6FFE52A0:				; CODE XREF: sub_6FFE5190+11Fj
		mov	eax, ecx

loc_6FFE52A2:				; CODE XREF: sub_6FFE5190+10Cj
		mov	ecx, [eax]
		cmp	ecx, edx
		jz	loc_6FFE53D0
		cmp	ebx, [ecx+4]
		jnz	short loc_6FFE52A0
		mov	[ebp+var_58], eax
		mov	eax, ecx

loc_6FFE52B6:				; CODE XREF: sub_6FFE5190+107j
		mov	ebx, [ebp+arg_0]
		mov	ecx, [ebx]
		mov	ebx, [eax]
		cmp	ebx, edx
		mov	[ebp+var_54], ebx
		jz	loc_6FFE5442
		mov	edx, [ebx+4]
		cmp	edx, [eax+4]
		jz	loc_6FFE53E3

loc_6FFE52D4:				; CODE XREF: sub_6FFE5190+2B5j
		mov	[ebp+var_5C], ebx

loc_6FFE52D7:				; CODE XREF: sub_6FFE5190+29Aj
					; sub_6FFE5190+2ADj
		mov	[esp+4], eax
		mov	[esp], ecx
		mov	[ebp+var_48], 0FFFFFFFFh
		call	ds:_ZN9QHashData8freeNodeEPv
		mov	edx, [ebp+var_5C]
		mov	eax, [ebp+var_58]
		mov	ecx, [ebp+arg_0]
		mov	[eax], edx
		mov	eax, [ecx]
		mov	ecx, [eax+0Ch]
		mov	edx, [eax+18h]
		sub	ecx, 1
		sar	edx, 3
		cmp	edx, ecx
		mov	[eax+0Ch], ecx
		jl	short loc_6FFE5370
		movzx	ebx, word ptr [eax+16h]
		movzx	edx, word ptr [eax+14h]
		cmp	bx, dx
		jle	short loc_6FFE5380
		movsx	ebx, bx
		movsx	edx, dx
		sub	ebx, 2
		cmp	ebx, edx
		jge	short loc_6FFE5327
		mov	ebx, edx

loc_6FFE5327:				; CODE XREF: sub_6FFE5190+193j
		mov	[esp+4], ebx
		mov	[esp], eax
		mov	[ebp+var_48], 1
		call	ds:_ZN9QHashData6rehashEi
		mov	edx, [ebp+arg_0]
		mov	ecx, [ebp+var_68]
		mov	eax, [edx]
		sub	ecx, [eax+0Ch]
		mov	[ebp+var_64], ecx
		lea	esi, [esi+0]

loc_6FFE5350:				; CODE XREF: sub_6FFE5190+4Cj
					; sub_6FFE5190+C6j ...
		lea	eax, [ebp+var_4C]
		mov	[esp], eax
		call	_Unwind_SjLj_Unregister
		mov	eax, [ebp+var_64]
		add	esp, 8Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6FFE5370:				; CODE XREF: sub_6FFE5190+179j
		mov	ebx, [ebp+var_68]
		sub	ebx, ecx
		mov	[ebp+var_64], ebx
		jmp	short loc_6FFE5350
; ---------------------------------------------------------------------------
		align 10h

loc_6FFE5380:				; CODE XREF: sub_6FFE5190+186j
		mov	eax, [ebp+var_68]
		sub	eax, ecx
		mov	[ebp+var_64], eax
		jmp	short loc_6FFE5350
; ---------------------------------------------------------------------------
		align 10h

loc_6FFE5390:				; CODE XREF: sub_6FFE5190+9Bj
		mov	ecx, [ebp+arg_0]
		mov	dword ptr [esp+4], offset nullsub_1
		mov	eax, [ecx]
		mov	[esp], eax
		call	ds:_ZN9QHashData11free_helperEPFvPNS_4NodeEE
		mov	eax, [ebp+var_60]
		mov	ebx, [ebp+arg_0]
		mov	[ebx], eax
		mov	edx, [eax+0Ch]
		mov	[ebp+var_68], edx
		jmp	loc_6FFE523F
; ---------------------------------------------------------------------------

loc_6FFE53B9:				; CODE XREF: sub_6FFE548C+Aj
		mov	[esp], eax
		call	sub_6FFEB920
		mov	[ebp+var_48], 0
		call	sub_6FFEBBF0
		lea	esi, [esi+0]

loc_6FFE53D0:				; CODE XREF: sub_6FFE5190+116j
		mov	ebx, [ebp+arg_0]
		mov	edx, [ebp+var_68]
		mov	eax, [ebx]
		sub	edx, [eax+0Ch]
		mov	[ebp+var_64], edx
		jmp	loc_6FFE5350
; ---------------------------------------------------------------------------

loc_6FFE53E3:				; CODE XREF: sub_6FFE5190+13Ej
		mov	edx, ds:_ZN9QHashData8freeNodeEPv
		mov	[ebp+var_50], edx
		lea	esi, [esi+0]

loc_6FFE53F0:				; CODE XREF: sub_6FFE5190+2A5j
		mov	[esp+4], eax
		mov	[esp], ecx
		mov	[ebp+var_48], 0FFFFFFFFh
		call	[ebp+var_50]
		mov	ebx, [ebp+var_54]
		mov	ecx, [ebp+var_58]
		mov	eax, [ebp+arg_0]
		mov	[ecx], ebx
		mov	edx, [ebx]
		mov	ecx, [eax]
		sub	dword ptr [ecx+0Ch], 1
		mov	eax, [eax]
		cmp	eax, edx
		jz	short loc_6FFE5437
		mov	ebx, [ebp+var_54]
		mov	eax, [edx+4]
		cmp	eax, [ebx+4]
		jz	short loc_6FFE5430
		mov	eax, ebx
		mov	[ebp+var_5C], edx
		jmp	loc_6FFE52D7
; ---------------------------------------------------------------------------
		align 10h

loc_6FFE5430:				; CODE XREF: sub_6FFE5190+293j
		mov	eax, ebx
		mov	[ebp+var_54], edx
		jmp	short loc_6FFE53F0
; ---------------------------------------------------------------------------

loc_6FFE5437:				; CODE XREF: sub_6FFE5190+288j
		mov	[ebp+var_5C], eax
		mov	eax, [ebp+var_54]
		jmp	loc_6FFE52D7
; ---------------------------------------------------------------------------

loc_6FFE5442:				; CODE XREF: sub_6FFE5190+132j
		mov	ebx, [ebp+var_54]
		jmp	loc_6FFE52D4
; ---------------------------------------------------------------------------
		align 10h

loc_6FFE5450:				; CODE XREF: sub_6FFE5190+FBj
		mov	ebx, [ebp+var_68]
		sub	ebx, [eax+0Ch]
		mov	[ebp+var_64], ebx
		jmp	loc_6FFE5350
; ---------------------------------------------------------------------------

loc_6FFE545E:				; CODE XREF: sub_6FFE5190+EEj
		mov	dword ptr [esp+8], 376h
		mov	dword ptr [esp+4], offset aRIncludeQtco_5 ; "R:/include/QtCore/qhash.h"
		mov	dword ptr [esp], offset	aNodeENodeNex_1	; "*node == e || (*node)->next"
		mov	[ebp+var_48], 0FFFFFFFFh
		call	ds:_Z9qt_assertPKcS0_i
		mov	edx, [ebp+var_58]
		mov	eax, [edx]
		jmp	loc_6FFE5284
sub_6FFE5190	endp


; =============== S U B	R O U T	I N E =======================================


sub_6FFE548C	proc near		; DATA XREF: sub_6FFE5190+23o
		add	ebp, 18h
		cmp	dword ptr [ebp-40h], 1
		mov	eax, [ebp-44h]
		jz	loc_6FFE53B9
		mov	[esp+0], eax
		mov	dword ptr [ebp-48h], 0FFFFFFFFh
		call	_Unwind_SjLj_Resume
sub_6FFE548C	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_6FFE54B0	proc near		; CODE XREF: _ZNK16DBusMenuShortcut13toKeySequenceEv+4B6p
					; sub_6FFDC290+2B0p ...

var_78		= dword	ptr -78h
var_74		= dword	ptr -74h
var_70		= dword	ptr -70h
var_6C		= dword	ptr -6Ch
var_68		= dword	ptr -68h
var_64		= dword	ptr -64h
var_60		= dword	ptr -60h
var_5C		= dword	ptr -5Ch
var_58		= dword	ptr -58h
var_54		= dword	ptr -54h
var_50		= dword	ptr -50h
var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_3C		= byte ptr -3Ch
var_38		= dword	ptr -38h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_8		= byte ptr -8
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 98h
		lea	eax, [ebp+var_8]
		mov	[ebp+var_1C], eax
		lea	eax, [ebp+var_3C]
		mov	[ebp+var_24], offset sub_6FFEC1F0
		mov	[ebp+var_20], offset dword_6FFEC908
		mov	[ebp+var_18], offset sub_6FFE56AF
		mov	[ebp+var_14], esp
		mov	[esp], eax
		call	_Unwind_SjLj_Register
		mov	edx, [ebp+arg_0]
		mov	eax, [ebp+arg_4]
		mov	edx, [edx]
		mov	ecx, [edx+8]
		mov	[ebp+var_74], edx
		mov	[ebp+var_78], ecx
		mov	[esp+4], eax
		mov	eax, [ebp+arg_0]
		mov	[esp], eax
		mov	[ebp+var_38], 0FFFFFFFFh
		call	ds:_ZN9QListData6detachEi
		mov	edx, [ebp+arg_0]
		mov	[ebp+var_64], eax
		mov	eax, [edx]
		mov	edx, [eax+0Ch]
		lea	edx, [eax+edx*4+14h]
		mov	[ebp+var_54], edx
		mov	edx, [eax+8]
		lea	eax, [eax+edx*4+10h]
		lea	ecx, [eax+4]
		cmp	[ebp+var_54], ecx
		mov	[ebp+var_70], ecx
		jz	loc_6FFE55B5
		mov	ecx, [ebp+var_74]
		add	eax, 8
		mov	edx, [ebp+var_78]
		mov	[ebp+var_44], eax
		lea	edx, [ecx+edx*4+14h]
		mov	ecx, [ebp+var_70]
		mov	[ebp+var_48], edx
		mov	[ebp+var_4C], ecx
		jmp	short loc_6FFE556D
; ---------------------------------------------------------------------------
		align 10h

loc_6FFE5550:				; CODE XREF: sub_6FFE54B0+EBj
					; sub_6FFE54B0+103j
		mov	edx, [ebp+var_4C]
		mov	eax, [ebp+var_44]
		mov	ecx, [ebp+var_40]
		cmp	[ebp+var_54], eax
		mov	[ebp+var_4C], eax
		mov	[edx], ecx
		jz	short loc_6FFE55B5
		add	[ebp+var_48], 4
		add	eax, 4
		mov	[ebp+var_44], eax

loc_6FFE556D:				; CODE XREF: sub_6FFE54B0+9Bj
		mov	dword ptr [esp], 4 ; size_t
		mov	[ebp+var_38], 3
		call	sub_6FFEAE70
		mov	edx, [ebp+var_48]
		mov	[ebp+var_40], eax
		mov	ecx, [ebp+var_40]
		mov	eax, [edx]
		mov	eax, [eax]
		mov	[ecx], eax
		lock inc dword ptr [eax]
		setnz	dl
		mov	eax, [ecx]
		test	byte ptr [eax+10h], 1
		jnz	short loc_6FFE5550
		mov	eax, [eax+4]
		mov	[esp], ecx
		mov	[esp+4], eax
		mov	[ebp+var_38], 2
		call	sub_6FFE8C20
		jmp	short loc_6FFE5550
; ---------------------------------------------------------------------------

loc_6FFE55B5:				; CODE XREF: sub_6FFE54B0+7Cj
					; sub_6FFE54B0+B1j
		mov	ecx, [ebp+var_64]
		lock dec dword ptr [ecx]
		setnz	al
		test	al, al
		jz	short loc_6FFE55CF
		lea	eax, [ebp+var_3C]
		mov	[esp], eax
		call	_Unwind_SjLj_Unregister
		leave
		retn
; ---------------------------------------------------------------------------

loc_6FFE55CF:				; CODE XREF: sub_6FFE54B0+110j
		mov	edx, [ecx+0Ch]
		mov	eax, ecx
		add	eax, 14h
		lea	edx, [eax+edx*4]
		mov	[ebp+var_58], edx
		mov	edx, [ecx+8]
		lea	edx, [eax+edx*4]
		cmp	[ebp+var_58], edx
		mov	[ebp+var_6C], edx
		jnz	short loc_6FFE5607
		jmp	loc_6FFE568F
; ---------------------------------------------------------------------------

loc_6FFE55F0:				; CODE XREF: sub_6FFE54B0+171j
					; sub_6FFE54B0+1DAj
		mov	ecx, [ebp+var_5C]
		mov	[esp], ecx
		call	sub_6FFEAE50

loc_6FFE55FB:				; CODE XREF: sub_6FFE54B0+165j
		mov	eax, [ebp+var_58]
		cmp	[ebp+var_6C], eax
		jz	loc_6FFE568F

loc_6FFE5607:				; CODE XREF: sub_6FFE54B0+139j
		sub	[ebp+var_58], 4
		mov	eax, [ebp+var_58]
		mov	eax, [eax]
		test	eax, eax
		mov	[ebp+var_5C], eax
		jz	short loc_6FFE55FB
		mov	eax, [eax]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jnz	short loc_6FFE55F0
		mov	ecx, [ebp+var_5C]
		mov	ecx, [ecx]
		mov	edx, [ecx+0Ch]
		mov	eax, ecx
		add	eax, 14h
		mov	[ebp+var_68], ecx
		lea	edx, [eax+edx*4]
		mov	[ebp+var_50], edx
		mov	edx, [ecx+8]
		lea	edx, [eax+edx*4]
		cmp	[ebp+var_50], edx
		mov	[ebp+var_60], edx
		jz	short loc_6FFE5677

loc_6FFE5647:				; CODE XREF: sub_6FFE54B0+1C5j
		sub	[ebp+var_50], 4
		mov	edx, [ebp+var_50]
		mov	eax, [edx]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jnz	short loc_6FFE566F
		mov	ecx, [ebp+var_50]
		mov	eax, [ecx]
		mov	[esp], eax
		mov	[ebp+var_38], 0FFFFFFFFh
		call	ds:_ZN7QString4freeEPNS_4DataE

loc_6FFE566F:				; CODE XREF: sub_6FFE54B0+1A8j
		mov	eax, [ebp+var_50]
		cmp	[ebp+var_60], eax
		jnz	short loc_6FFE5647

loc_6FFE5677:				; CODE XREF: sub_6FFE54B0+195j
		mov	edx, [ebp+var_68]
		mov	[esp], edx
		mov	[ebp+var_38], 0FFFFFFFFh
		call	ds:_Z5qFreePv
		jmp	loc_6FFE55F0
; ---------------------------------------------------------------------------

loc_6FFE568F:				; CODE XREF: sub_6FFE54B0+13Bj
					; sub_6FFE54B0+151j
		mov	edx, [ebp+var_64]
		mov	[esp], edx
		mov	[ebp+var_38], 0FFFFFFFFh
		call	ds:_Z5qFreePv
		lea	eax, [ebp+var_3C]
		mov	[esp], eax
		call	_Unwind_SjLj_Unregister
		leave
		retn
sub_6FFE54B0	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn

sub_6FFE56AF	proc near		; DATA XREF: sub_6FFE54B0+20o
		add	ebp, 8
		mov	eax, [ebp-38h]
		mov	ecx, [ebp-34h]
		cmp	eax, 1
		mov	[ebp-80h], ecx
		jz	short loc_6FFE5707
		cmp	eax, 2
		jz	short loc_6FFE5712
		cmp	eax, 3
		jz	loc_6FFE5751
		mov	dword ptr [ebp-38h], 0
		call	sub_6FFEBBF0
		mov	eax, [ebp-80h]
		mov	[esp+0], eax
		call	sub_6FFEB920
		mov	edx, [ebp+8]
		mov	eax, [edx]
		mov	[esp+0], eax
		mov	dword ptr [ebp-38h], 4
		call	ds:_Z5qFreePv
		mov	eax, [ebp-64h]
		mov	ecx, [ebp+8]
		mov	[ecx], eax
		call	sub_6FFEC130
; ---------------------------------------------------------------------------

loc_6FFE5707:				; CODE XREF: sub_6FFE56AF+Fj
		mov	eax, [ebp-40h]
		mov	[esp+0], eax
		call	sub_6FFEAE50

loc_6FFE5712:				; CODE XREF: sub_6FFE56AF+14j
		mov	edx, [ebp-80h]
		mov	[esp+0], edx
		call	sub_6FFEB920

loc_6FFE571D:				; CODE XREF: sub_6FFE56AF+84j
					; sub_6FFE56AF+A0j
		mov	edx, [ebp-4Ch]
		cmp	[ebp-70h], edx
		jz	short loc_6FFE576F
		sub	dword ptr [ebp-4Ch], 4
		mov	ecx, [ebp-4Ch]
		mov	ecx, [ecx]
		test	ecx, ecx
		mov	[ebp-7Ch], ecx
		jz	short loc_6FFE571D
		mov	[esp+0], ecx
		mov	dword ptr [ebp-38h], 1
		call	sub_6FFDF990
		mov	eax, [ebp-7Ch]
		mov	[esp+0], eax
		call	sub_6FFEAE50
		jmp	short loc_6FFE571D
; ---------------------------------------------------------------------------

loc_6FFE5751:				; CODE XREF: sub_6FFE56AF+19j
		mov	dword ptr [ebp-38h], 0
		call	sub_6FFEBBF0
		mov	edx, [ebp-80h]
		mov	[esp+0], edx
		mov	dword ptr [ebp-38h], 0FFFFFFFFh
		call	_Unwind_SjLj_Resume
; ---------------------------------------------------------------------------

loc_6FFE576F:				; CODE XREF: sub_6FFE56AF+74j
		mov	dword ptr [ebp-38h], 1
		call	sub_6FFEC130
sub_6FFE56AF	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6FFE5780	proc near		; CODE XREF: sub_6FFE5D02+250p

var_3C		= dword	ptr -3Ch
var_20		= dword	ptr -20h
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 2Ch
		mov	esi, [esp+3Ch+arg_8]
		cmp	esi, [esp+3Ch+arg_4]
		jnz	short loc_6FFE57A2
		jmp	short loc_6FFE5801
; ---------------------------------------------------------------------------

loc_6FFE5793:				; CODE XREF: sub_6FFE5780+35j
					; sub_6FFE5780+7Fj
		mov	[esp+3Ch+var_3C], edi
		call	sub_6FFEAE50

loc_6FFE579B:				; CODE XREF: sub_6FFE5780+29j
		cmp	[esp+3Ch+arg_4], esi
		nop
		jz	short loc_6FFE5801

loc_6FFE57A2:				; CODE XREF: sub_6FFE5780+Fj
		sub	esi, 4
		mov	edi, [esi]
		test	edi, edi
		jz	short loc_6FFE579B
		mov	eax, [edi]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jnz	short loc_6FFE5793
		mov	eax, [edi]
		mov	[esp+3Ch+var_20], eax
		mov	ecx, [esp+3Ch+var_20]
		add	eax, 14h
		mov	edx, [ecx+0Ch]
		lea	ebx, [eax+edx*4]
		mov	edx, [ecx+8]
		lea	ebp, [eax+edx*4]
		cmp	ebx, ebp
		jz	short loc_6FFE57F2

loc_6FFE57D4:				; CODE XREF: sub_6FFE5780+70j
		sub	ebx, 4
		mov	eax, [ebx]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jnz	short loc_6FFE57EE
		mov	eax, [ebx]
		mov	[esp+3Ch+var_3C], eax
		call	ds:_ZN7QString4freeEPNS_4DataE

loc_6FFE57EE:				; CODE XREF: sub_6FFE5780+61j
		cmp	ebp, ebx
		jnz	short loc_6FFE57D4

loc_6FFE57F2:				; CODE XREF: sub_6FFE5780+52j
		mov	eax, [esp+3Ch+var_20]
		mov	[esp+3Ch+var_3C], eax
		call	ds:_Z5qFreePv
		jmp	short loc_6FFE5793
; ---------------------------------------------------------------------------

loc_6FFE5801:				; CODE XREF: sub_6FFE5780+11j
					; sub_6FFE5780+20j
		add	esp, 2Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
sub_6FFE5780	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6FFE5810	proc near		; CODE XREF: sub_6FFC2AE0+727p
					; sub_6FFC324B+12Bp ...

var_3C		= dword	ptr -3Ch
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 2Ch
		mov	eax, [esp+3Ch+arg_4]
		mov	[esp+3Ch+var_24], eax
		mov	ecx, [esp+3Ch+var_24]
		add	eax, 14h
		mov	edx, [ecx+0Ch]
		lea	esi, [eax+edx*4]
		mov	edx, [ecx+8]
		lea	edx, [eax+edx*4]
		cmp	esi, edx
		mov	[esp+3Ch+var_28], edx
		jz	short loc_6FFE58B2
		mov	ecx, ds:_Z5qFreePv
		mov	[esp+3Ch+var_20], ecx
		jmp	short loc_6FFE5854
; ---------------------------------------------------------------------------

loc_6FFE5846:				; CODE XREF: sub_6FFE5810+57j
					; sub_6FFE5810+A0j
		mov	[esp+3Ch+var_3C], edi
		call	sub_6FFEAE50

loc_6FFE584E:				; CODE XREF: sub_6FFE5810+4Bj
		cmp	[esp+3Ch+var_28], esi
		jz	short loc_6FFE58C0

loc_6FFE5854:				; CODE XREF: sub_6FFE5810+34j
		sub	esi, 4
		mov	edi, [esi]
		test	edi, edi
		jz	short loc_6FFE584E
		mov	eax, [edi]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jnz	short loc_6FFE5846
		mov	eax, [edi]
		mov	[esp+3Ch+var_2C], eax
		mov	ecx, [esp+3Ch+var_2C]
		add	eax, 14h
		mov	edx, [ecx+0Ch]
		lea	ebx, [eax+edx*4]
		mov	edx, [ecx+8]
		lea	ebp, [eax+edx*4]
		cmp	ebx, ebp
		jz	short loc_6FFE58A4

loc_6FFE5886:				; CODE XREF: sub_6FFE5810+92j
		sub	ebx, 4
		mov	eax, [ebx]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jnz	short loc_6FFE58A0
		mov	eax, [ebx]
		mov	[esp+3Ch+var_3C], eax
		call	ds:_ZN7QString4freeEPNS_4DataE

loc_6FFE58A0:				; CODE XREF: sub_6FFE5810+83j
		cmp	ebp, ebx
		jnz	short loc_6FFE5886

loc_6FFE58A4:				; CODE XREF: sub_6FFE5810+74j
		mov	eax, [esp+3Ch+var_2C]
		mov	[esp+3Ch+var_3C], eax
		call	[esp+3Ch+var_20]
		nop
		jmp	short loc_6FFE5846
; ---------------------------------------------------------------------------

loc_6FFE58B2:				; CODE XREF: sub_6FFE5810+28j
		mov	eax, ds:_Z5qFreePv
		mov	[esp+3Ch+var_20], eax
		nop
		lea	esi, [esi+0]

loc_6FFE58C0:				; CODE XREF: sub_6FFE5810+42j
		mov	ecx, [esp+3Ch+var_24]
		mov	eax, [esp+3Ch+var_20]
		mov	[esp+3Ch+arg_0], ecx
		add	esp, 2Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		jmp	eax
sub_6FFE5810	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_6FFE58E0	proc near		; CODE XREF: _ZN16DBusMenuShortcut15fromKeySequenceERK12QKeySequence+260p
					; sub_6FFDC290+104p ...

var_BC		= dword	ptr -0BCh
var_B8		= dword	ptr -0B8h
var_B4		= dword	ptr -0B4h
var_B0		= dword	ptr -0B0h
var_AC		= dword	ptr -0ACh
var_A8		= dword	ptr -0A8h
var_A4		= dword	ptr -0A4h
var_A0		= dword	ptr -0A0h
var_9C		= dword	ptr -9Ch
var_98		= dword	ptr -98h
var_94		= dword	ptr -94h
var_90		= dword	ptr -90h
var_8C		= dword	ptr -8Ch
var_88		= dword	ptr -88h
var_84		= dword	ptr -84h
var_80		= dword	ptr -80h
var_7C		= dword	ptr -7Ch
var_78		= dword	ptr -78h
var_74		= dword	ptr -74h
var_70		= dword	ptr -70h
var_6C		= dword	ptr -6Ch
var_68		= dword	ptr -68h
var_64		= dword	ptr -64h
var_60		= dword	ptr -60h
var_5C		= byte ptr -5Ch
var_58		= dword	ptr -58h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_1C		= dword	ptr -1Ch
var_18		= byte ptr -18h
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		lea	eax, [ebp+var_18]
		sub	esp, 0CCh
		mov	[ebp+var_3C], eax
		lea	eax, [ebp+var_5C]
		mov	[esp], eax
		mov	[ebp+var_44], offset sub_6FFEC1F0
		mov	[ebp+var_40], offset dword_6FFECF3C
		mov	[ebp+var_38], offset sub_6FFE5D02
		mov	[ebp+var_34], esp
		call	_Unwind_SjLj_Register
		mov	edx, [ebp+arg_0]
		mov	eax, [edx]
		mov	eax, [eax]
		cmp	eax, 1
		jz	loc_6FFE5C7C
		mov	[ebp+var_1C], 7FFFFFFFh
		mov	eax, [edx]
		mov	ecx, edx
		mov	edx, [eax+8]
		mov	[esp], ecx
		mov	dword ptr [esp+8], 1
		mov	[ebp+var_58], 0FFFFFFFFh
		lea	edx, [eax+edx*4+14h]
		lea	eax, [ebp+var_1C]
		mov	[ebp+var_B0], edx
		mov	[esp+4], eax
		call	ds:_ZN9QListData11detach_growEPii
		mov	edi, [ebp+arg_0]
		mov	[ebp+var_98], eax
		mov	eax, [edi]
		mov	ebx, [eax+8]
		lea	edx, [eax+ebx*4+10h]
		lea	ecx, [edx+4]
		mov	[ebp+var_AC], ecx
		mov	ecx, [ebp+var_1C]
		mov	edi, [ebp+var_AC]
		lea	esi, ds:0[ecx*4]
		add	edi, esi
		cmp	[ebp+var_AC], edi
		mov	[ebp+var_88], edi
		jz	loc_6FFE5A32
		add	edx, 8
		mov	eax, [ebp+var_AC]
		mov	[ebp+var_74], edx
		mov	edx, [ebp+var_B0]
		mov	[ebp+var_6C], eax
		mov	[ebp+var_70], edx
		jmp	short loc_6FFE59D3
; ---------------------------------------------------------------------------

loc_6FFE59B5:				; CODE XREF: sub_6FFE58E0+121j
					; sub_6FFE58E0+139j
		mov	edx, [ebp+var_6C]
		mov	edi, [ebp+var_74]
		mov	ecx, [ebp+var_64]
		cmp	[ebp+var_88], edi
		mov	[ebp+var_6C], edi
		mov	[edx], ecx
		jz	short loc_6FFE5A20
		add	[ebp+var_70], 4
		add	[ebp+var_74], 4

loc_6FFE59D3:				; CODE XREF: sub_6FFE58E0+D3j
		mov	dword ptr [esp], 4 ; size_t
		mov	[ebp+var_58], 8
		call	sub_6FFEAE70
		mov	ecx, [ebp+var_70]
		mov	[ebp+var_64], eax
		mov	edi, [ebp+var_64]
		mov	eax, [ecx]
		mov	eax, [eax]
		mov	[edi], eax
		lock inc dword ptr [eax]
		setnz	dl
		mov	eax, [edi]
		test	byte ptr [eax+10h], 1
		jnz	short loc_6FFE59B5
		mov	eax, [eax+4]
		mov	[esp], edi
		mov	[ebp+var_58], 7
		mov	[esp+4], eax
		call	sub_6FFE8C20
		jmp	short loc_6FFE59B5
; ---------------------------------------------------------------------------
		align 10h

loc_6FFE5A20:				; CODE XREF: sub_6FFE58E0+E9j
		mov	edx, [ebp+arg_0]
		mov	ecx, [ebp+var_1C]
		mov	eax, [edx]
		lea	esi, ds:0[ecx*4]
		mov	ebx, [eax+8]

loc_6FFE5A32:				; CODE XREF: sub_6FFE58E0+B5j
		mov	edx, [eax+0Ch]
		lea	edx, [eax+edx*4+14h]
		lea	eax, [eax+ebx*4+14h]
		lea	eax, [eax+ecx*4+4]
		cmp	edx, eax
		mov	[ebp+var_84], edx
		mov	[ebp+var_A8], eax
		jz	loc_6FFE5AE0
		add	esi, [ebp+var_B0]
		mov	ecx, eax
		add	eax, 4
		mov	[ebp+var_68], eax
		mov	[ebp+var_78], esi
		mov	[ebp+var_7C], ecx
		jmp	short loc_6FFE5A92
; ---------------------------------------------------------------------------
		align 10h

loc_6FFE5A70:				; CODE XREF: sub_6FFE58E0+1E3j
					; sub_6FFE58E0+1FBj
		mov	ecx, [ebp+var_68]
		mov	edi, [ebp+var_84]
		mov	eax, [ebp+var_7C]
		mov	edx, [ebp+var_60]
		mov	[ebp+var_7C], ecx
		cmp	ecx, edi
		mov	[eax], edx
		jz	short loc_6FFE5AE0
		add	[ebp+var_78], 4
		add	ecx, 4
		mov	[ebp+var_68], ecx

loc_6FFE5A92:				; CODE XREF: sub_6FFE58E0+189j
		mov	dword ptr [esp], 4 ; size_t
		mov	[ebp+var_58], 5
		call	sub_6FFEAE70
		mov	edi, [ebp+var_78]
		mov	[ebp+var_60], eax
		mov	edx, [ebp+var_60]
		mov	eax, [edi]
		mov	eax, [eax]
		mov	[edx], eax
		lock inc dword ptr [eax]
		setnz	dl
		mov	ecx, [ebp+var_60]
		mov	eax, [ecx]
		test	byte ptr [eax+10h], 1
		jnz	short loc_6FFE5A70
		mov	eax, [eax+4]
		mov	[esp], ecx
		mov	[ebp+var_58], 4
		mov	[esp+4], eax
		call	sub_6FFE8C20
		jmp	short loc_6FFE5A70
; ---------------------------------------------------------------------------
		align 10h

loc_6FFE5AE0:				; CODE XREF: sub_6FFE58E0+16Fj
					; sub_6FFE58E0+1A6j
		mov	ecx, [ebp+var_98]
		lock dec dword ptr [ecx]
		setnz	al
		test	al, al
		jz	loc_6FFE5B7C

loc_6FFE5AF4:				; CODE XREF: sub_6FFE58E0+397j
		mov	edx, [ebp+arg_0]
		mov	eax, [edx]
		mov	edx, [eax+8]
		mov	dword ptr [esp], 4 ; size_t
		mov	[ebp+var_58], 0Eh
		lea	eax, [eax+edx*4+14h]
		mov	edx, [ebp+var_1C]
		lea	edx, [eax+edx*4]
		mov	[ebp+var_B4], edx
		call	sub_6FFEAE70
		mov	ecx, [ebp+arg_4]
		mov	[ebp+var_A4], eax
		mov	edi, [ebp+var_A4]
		mov	eax, [ecx]
		mov	[edi], eax
		lock inc dword ptr [eax]
		setnz	dl
		mov	eax, [edi]
		test	byte ptr [eax+10h], 1
		jz	short loc_6FFE5B64

loc_6FFE5B40:				; CODE XREF: sub_6FFE58E0+29Aj
		mov	ecx, [ebp+var_A4]
		mov	edx, [ebp+var_B4]
		mov	[edx], ecx

loc_6FFE5B4E:				; CODE XREF: sub_6FFE58E0+3F4j
					; sub_6FFE58E0+41Dj
		lea	eax, [ebp+var_5C]
		mov	[esp], eax
		call	_Unwind_SjLj_Unregister
		add	esp, 0CCh
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_6FFE5B64:				; CODE XREF: sub_6FFE58E0+25Ej
		mov	eax, [eax+4]
		mov	[esp], edi
		mov	[ebp+var_58], 2
		mov	[esp+4], eax
		call	sub_6FFE8C20
		jmp	short loc_6FFE5B40
; ---------------------------------------------------------------------------

loc_6FFE5B7C:				; CODE XREF: sub_6FFE58E0+20Ej
		mov	eax, [ecx+0Ch]
		mov	edx, ecx
		add	edx, 14h
		lea	eax, [edx+eax*4]
		mov	[ebp+var_8C], eax
		mov	eax, [ecx+8]
		lea	eax, [edx+eax*4]
		cmp	[ebp+var_8C], eax
		mov	[ebp+var_A0], eax
		jnz	short loc_6FFE5BC6
		jmp	loc_6FFE5C61
; ---------------------------------------------------------------------------

loc_6FFE5BA6:				; CODE XREF: sub_6FFE58E0+309j
					; sub_6FFE58E0+37Cj
		mov	ecx, [ebp+var_90]
		mov	[esp], ecx
		call	sub_6FFEAE50

loc_6FFE5BB4:				; CODE XREF: sub_6FFE58E0+2FDj
		mov	edi, [ebp+var_8C]
		cmp	[ebp+var_A0], edi
		jz	loc_6FFE5C61

loc_6FFE5BC6:				; CODE XREF: sub_6FFE58E0+2BFj
		sub	[ebp+var_8C], 4
		mov	edi, [ebp+var_8C]
		mov	edi, [edi]
		test	edi, edi
		mov	[ebp+var_90], edi
		jz	short loc_6FFE5BB4
		mov	eax, [edi]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jnz	short loc_6FFE5BA6
		mov	eax, [edi]
		mov	[ebp+var_9C], eax
		mov	ecx, [ebp+var_9C]
		add	eax, 14h
		mov	edx, [ecx+0Ch]
		lea	edx, [eax+edx*4]
		mov	[ebp+var_80], edx
		mov	edx, [ecx+8]
		lea	edx, [eax+edx*4]
		cmp	[ebp+var_80], edx
		mov	[ebp+var_94], edx
		jz	short loc_6FFE5C46

loc_6FFE5C16:				; CODE XREF: sub_6FFE58E0+364j
		sub	[ebp+var_80], 4
		mov	edi, [ebp+var_80]
		mov	eax, [edi]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jnz	short loc_6FFE5C3B
		mov	eax, [edi]
		mov	[ebp+var_58], 0FFFFFFFFh
		mov	[esp], eax
		call	ds:_ZN7QString4freeEPNS_4DataE

loc_6FFE5C3B:				; CODE XREF: sub_6FFE58E0+347j
		mov	eax, [ebp+var_80]
		cmp	[ebp+var_94], eax
		jnz	short loc_6FFE5C16

loc_6FFE5C46:				; CODE XREF: sub_6FFE58E0+334j
		mov	edx, [ebp+var_9C]
		mov	[ebp+var_58], 0FFFFFFFFh
		mov	[esp], edx
		call	ds:_Z5qFreePv
		jmp	loc_6FFE5BA6
; ---------------------------------------------------------------------------

loc_6FFE5C61:				; CODE XREF: sub_6FFE58E0+2C1j
					; sub_6FFE58E0+2E0j
		mov	eax, [ebp+var_98]
		mov	[ebp+var_58], 0FFFFFFFFh
		mov	[esp], eax
		call	ds:_Z5qFreePv
		jmp	loc_6FFE5AF4
; ---------------------------------------------------------------------------

loc_6FFE5C7C:				; CODE XREF: sub_6FFE58E0+3Fj
		mov	[esp], edx
		mov	[ebp+var_58], 0FFFFFFFFh
		call	ds:_ZN9QListData6appendEv
		mov	dword ptr [esp], 4 ; size_t
		mov	[ebp+var_58], 0Ch
		mov	[ebp+var_BC], eax
		call	sub_6FFEAE70
		mov	edx, [ebp+arg_4]
		mov	[ebp+var_B8], eax
		mov	ecx, [ebp+var_B8]
		mov	eax, [edx]
		mov	[ecx], eax
		lock inc dword ptr [eax]
		setnz	dl
		mov	eax, [ecx]
		test	byte ptr [eax+10h], 1
		jz	short loc_6FFE5CD9
		mov	ecx, [ebp+var_B8]
		mov	edx, [ebp+var_BC]
		mov	[edx], ecx
		jmp	loc_6FFE5B4E
; ---------------------------------------------------------------------------

loc_6FFE5CD9:				; CODE XREF: sub_6FFE58E0+3E4j
		mov	eax, [eax+4]
		mov	[esp], ecx
		mov	[ebp+var_58], 1
		mov	[esp+4], eax
		call	sub_6FFE8C20
		mov	ecx, [ebp+var_B8]
		mov	edx, [ebp+var_BC]
		mov	[edx], ecx
		jmp	loc_6FFE5B4E
sub_6FFE58E0	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn

sub_6FFE5D02	proc near		; DATA XREF: sub_6FFE58E0+26o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		add	ebp, 18h
		mov	eax, [ebp-58h]
		mov	edi, [ebp-54h]
		cmp	eax, 1
		mov	[ebp-0C0h], edi
		jz	loc_6FFE5EE3
		cmp	eax, 2
		jz	loc_6FFE5F14
		cmp	eax, 3
		jz	loc_6FFE5E89
		cmp	eax, 4
		nop
		jz	loc_6FFE5E94
		cmp	eax, 5
		jz	loc_6FFE5E4A
		cmp	eax, 6
		jz	loc_6FFE5DEE
		cmp	eax, 7
		nop
		lea	esi, [esi+0]
		jz	loc_6FFE5DF9
		cmp	eax, 8
		jz	short loc_6FFE5DCD
		cmp	eax, 9
		xchg	ax, ax
		jz	short loc_6FFE5DCD
		cmp	eax, 0Ah
		jz	short loc_6FFE5DAC
		cmp	eax, 0Bh
		jz	short loc_6FFE5D89
		cmp	eax, 0Ch
		nop
		jz	short loc_6FFE5DAC
		cmp	eax, 0Dh
		jz	loc_6FFE5EF1
		mov	eax, [ebp-0B8h]
		mov	[esp+0], eax
		call	sub_6FFEAE50

loc_6FFE5D89:				; CODE XREF: sub_6FFE5D02+68j
		mov	edi, [ebp-0C0h]
		mov	[esp+0], edi
		call	sub_6FFEB920
		mov	edx, [ebp+8]
		mov	eax, [edx]
		sub	dword ptr [eax+0Ch], 1
		mov	dword ptr [ebp-58h], 0Bh
		call	sub_6FFEC130
; ---------------------------------------------------------------------------

loc_6FFE5DAC:				; CODE XREF: sub_6FFE5D02+63j
					; sub_6FFE5D02+6Ej
		mov	dword ptr [ebp-58h], 0
		call	sub_6FFEBBF0
		mov	ecx, [ebp-0C0h]
		mov	dword ptr [ebp-58h], 0FFFFFFFFh
		mov	[esp+0], ecx
		call	_Unwind_SjLj_Resume
; ---------------------------------------------------------------------------

loc_6FFE5DCD:				; CODE XREF: sub_6FFE5D02+57j
					; sub_6FFE5D02+5Ej
		mov	dword ptr [ebp-58h], 0
		call	sub_6FFEBBF0
		mov	edx, [ebp-0C0h]
		mov	dword ptr [ebp-58h], 0FFFFFFFFh
		mov	[esp+0], edx
		call	_Unwind_SjLj_Resume
; ---------------------------------------------------------------------------

loc_6FFE5DEE:				; CODE XREF: sub_6FFE5D02+40j
		mov	eax, [ebp-64h]
		mov	[esp+0], eax
		call	sub_6FFEAE50

loc_6FFE5DF9:				; CODE XREF: sub_6FFE5D02+4Ej
		mov	ecx, [ebp-0C0h]
		mov	[esp+0], ecx
		call	sub_6FFEB920

loc_6FFE5E07:				; CODE XREF: sub_6FFE5D02+121j
					; sub_6FFE5D02+13Aj
		mov	eax, [ebp-6Ch]
		cmp	[ebp-0ACh], eax
		jz	short loc_6FFE5E3E
		sub	dword ptr [ebp-6Ch], 4
		mov	edi, [ebp-6Ch]
		mov	edi, [edi]
		test	edi, edi
		mov	[ebp-0C8h], edi
		jz	short loc_6FFE5E07
		mov	[esp+0], edi
		mov	dword ptr [ebp-58h], 6
		call	sub_6FFDF990
		mov	[esp+0], edi
		call	sub_6FFEAE50
		jmp	short loc_6FFE5E07
; ---------------------------------------------------------------------------

loc_6FFE5E3E:				; CODE XREF: sub_6FFE5D02+10Ej
		mov	dword ptr [ebp-58h], 6
		call	sub_6FFEC130
; ---------------------------------------------------------------------------

loc_6FFE5E4A:				; CODE XREF: sub_6FFE5D02+37j
		mov	dword ptr [ebp-58h], 0
		call	sub_6FFEBBF0
		mov	edx, [ebp-0C0h]
		mov	[esp+0], edx
		call	sub_6FFEB920
		mov	ecx, [ebp+8]
		mov	eax, [ecx]
		mov	dword ptr [ebp-58h], 0Ah
		mov	[esp+0], eax
		call	ds:_Z5qFreePv
		mov	eax, [ebp-98h]
		mov	edi, [ebp+8]
		mov	[edi], eax
		call	sub_6FFEC130
; ---------------------------------------------------------------------------

loc_6FFE5E89:				; CODE XREF: sub_6FFE5D02+24j
		mov	edi, [ebp-60h]
		mov	[esp+0], edi
		call	sub_6FFEAE50

loc_6FFE5E94:				; CODE XREF: sub_6FFE5D02+2Ej
		mov	eax, [ebp-0C0h]
		mov	[esp+0], eax
		call	sub_6FFEB920

loc_6FFE5EA2:				; CODE XREF: sub_6FFE5D02+1C0j
					; sub_6FFE5D02+1DFj
		mov	edi, [ebp-7Ch]
		cmp	[ebp-0A8h], edi
		jz	loc_6FFE5F72
		sub	dword ptr [ebp-7Ch], 4
		mov	edx, [ebp-7Ch]
		mov	edx, [edx]
		test	edx, edx
		mov	[ebp-0C4h], edx
		jz	short loc_6FFE5EA2
		mov	[esp+0], edx
		mov	dword ptr [ebp-58h], 3
		call	sub_6FFDF990
		mov	ecx, [ebp-0C4h]
		mov	[esp+0], ecx
		call	sub_6FFEAE50
		jmp	short loc_6FFE5EA2
; ---------------------------------------------------------------------------

loc_6FFE5EE3:				; CODE XREF: sub_6FFE5D02+12j
		mov	eax, [ebp-0A4h]
		mov	[esp+0], eax
		call	sub_6FFEAE50

loc_6FFE5EF1:				; CODE XREF: sub_6FFE5D02+73j
		mov	edi, [ebp-0C0h]
		mov	[esp+0], edi
		call	sub_6FFEB920
		mov	edx, [ebp+8]
		mov	eax, [edx]
		sub	dword ptr [eax+0Ch], 1
		mov	dword ptr [ebp-58h], 0Dh
		call	sub_6FFEC130
; ---------------------------------------------------------------------------

loc_6FFE5F14:				; CODE XREF: sub_6FFE5D02+1Bj
		mov	dword ptr [ebp-58h], 0
		call	sub_6FFEBBF0
		mov	eax, [ebp-0C0h]
		mov	[esp+0], eax
		call	sub_6FFEB920
		mov	ecx, [ebp+8]
		mov	edx, [ecx]
		mov	eax, [edx+8]
		mov	[esp+0], ecx
		mov	dword ptr [ebp-58h], 9
		lea	edx, [edx+eax*4+14h]
		mov	eax, [ebp-1Ch]
		mov	[esp+arg_0], edx
		lea	eax, [edx+eax*4]
		mov	[esp+arg_4], eax
		call	sub_6FFE5780
		mov	edi, [ebp+8]
		mov	eax, [edi]
		mov	[esp+0], eax
		call	ds:_Z5qFreePv
		mov	eax, [ebp-98h]
		mov	[edi], eax
		call	sub_6FFEC130
; ---------------------------------------------------------------------------

loc_6FFE5F72:				; CODE XREF: sub_6FFE5D02+1A9j
		mov	dword ptr [ebp-58h], 3
		call	sub_6FFEC130
sub_6FFE5D02	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_6FFE5F80	proc near		; CODE XREF: _ZN16DBusMenuExporter15doUpdateActionsEv+A36p
					; sub_6FFCB780+29Cp ...

var_78		= dword	ptr -78h
var_74		= dword	ptr -74h
var_70		= dword	ptr -70h
var_6C		= dword	ptr -6Ch
var_68		= dword	ptr -68h
var_64		= dword	ptr -64h
var_60		= dword	ptr -60h
var_5C		= dword	ptr -5Ch
var_58		= dword	ptr -58h
var_54		= dword	ptr -54h
var_50		= dword	ptr -50h
var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_3C		= byte ptr -3Ch
var_38		= dword	ptr -38h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_8		= byte ptr -8
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 98h
		lea	eax, [ebp+var_8]
		mov	[ebp+var_1C], eax
		lea	eax, [ebp+var_3C]
		mov	[ebp+var_24], offset sub_6FFEC1F0
		mov	[ebp+var_20], offset dword_6FFECA78
		mov	[ebp+var_18], offset sub_6FFE61AA
		mov	[ebp+var_14], esp
		mov	[esp], eax
		call	_Unwind_SjLj_Register
		mov	edx, [ebp+arg_0]
		mov	eax, [ebp+arg_4]
		mov	edx, [edx]
		mov	ecx, [edx+8]
		mov	[ebp+var_74], edx
		mov	[ebp+var_78], ecx
		mov	[esp+4], eax
		mov	eax, [ebp+arg_0]
		mov	[esp], eax
		mov	[ebp+var_38], 0FFFFFFFFh
		call	ds:_ZN9QListData6detachEi
		mov	edx, [ebp+arg_0]
		mov	[ebp+var_68], eax
		mov	eax, [edx]
		mov	edx, [eax+0Ch]
		lea	edx, [eax+edx*4+14h]
		mov	[ebp+var_50], edx
		mov	edx, [eax+8]
		lea	eax, [eax+edx*4+10h]
		lea	ecx, [eax+4]
		cmp	[ebp+var_50], ecx
		mov	[ebp+var_70], ecx
		jz	loc_6FFE6091
		mov	ecx, [ebp+var_74]
		add	eax, 8
		mov	edx, [ebp+var_78]
		mov	[ebp+var_44], eax
		lea	edx, [ecx+edx*4+14h]
		mov	ecx, [ebp+var_70]
		mov	[ebp+var_48], edx
		mov	[ebp+var_4C], ecx
		jmp	short loc_6FFE602A
; ---------------------------------------------------------------------------
		align 10h

loc_6FFE6020:				; CODE XREF: sub_6FFE5F80+10Fj
		add	[ebp+var_48], 4
		add	eax, 4
		mov	[ebp+var_44], eax

loc_6FFE602A:				; CODE XREF: sub_6FFE5F80+9Bj
		mov	dword ptr [esp], 8 ; size_t
		mov	[ebp+var_38], 3
		call	sub_6FFEAE70
		mov	edx, [ebp+var_48]
		mov	[ebp+var_40], eax
		mov	ecx, [ebp+var_40]
		mov	eax, [edx]
		mov	edx, [eax]
		mov	eax, [eax+4]
		mov	[ecx], edx
		mov	[ecx+4], eax
		lock inc dword ptr [eax+34h]
		setnz	dl
		mov	eax, [ecx+4]
		test	byte ptr [eax+44h], 2
		jnz	short loc_6FFE607E
		mov	eax, [eax+34h]
		cmp	eax, 1
		jz	short loc_6FFE607E
		mov	eax, ecx
		add	eax, 4
		mov	[esp], eax
		mov	[ebp+var_38], 2
		call	sub_6FFE3B80

loc_6FFE607E:				; CODE XREF: sub_6FFE5F80+E0j
					; sub_6FFE5F80+E8j
		mov	edx, [ebp+var_4C]
		mov	eax, [ebp+var_44]
		mov	ecx, [ebp+var_40]
		cmp	[ebp+var_50], eax
		mov	[ebp+var_4C], eax
		mov	[edx], ecx
		jnz	short loc_6FFE6020

loc_6FFE6091:				; CODE XREF: sub_6FFE5F80+7Cj
		mov	ecx, [ebp+var_68]
		lock dec dword ptr [ecx]
		setnz	al
		test	al, al
		jz	short loc_6FFE60AB
		lea	eax, [ebp+var_3C]
		mov	[esp], eax
		call	_Unwind_SjLj_Unregister
		leave
		retn
; ---------------------------------------------------------------------------

loc_6FFE60AB:				; CODE XREF: sub_6FFE5F80+11Cj
		mov	edx, [ecx+0Ch]
		mov	eax, ecx
		add	eax, 14h
		lea	edx, [eax+edx*4]
		mov	[ebp+var_5C], edx
		mov	edx, [ecx+8]
		lea	edx, [eax+edx*4]
		cmp	[ebp+var_5C], edx
		mov	[ebp+var_6C], edx
		jnz	short loc_6FFE60E7
		jmp	loc_6FFE618A
; ---------------------------------------------------------------------------
		align 10h

loc_6FFE60D0:				; CODE XREF: sub_6FFE5F80+17Cj
					; sub_6FFE5F80+187j ...
		mov	ecx, [ebp+var_60]
		mov	[esp], ecx
		call	sub_6FFEAE50

loc_6FFE60DB:				; CODE XREF: sub_6FFE5F80+175j
		mov	eax, [ebp+var_5C]
		cmp	[ebp+var_6C], eax
		jz	loc_6FFE618A

loc_6FFE60E7:				; CODE XREF: sub_6FFE5F80+145j
		sub	[ebp+var_5C], 4
		mov	eax, [ebp+var_5C]
		mov	eax, [eax]
		test	eax, eax
		mov	[ebp+var_60], eax
		jz	short loc_6FFE60DB
		mov	eax, [eax+4]
		test	eax, eax
		jz	short loc_6FFE60D0
		lock dec dword ptr [eax+34h]
		setnz	dl
		test	dl, dl
		jnz	short loc_6FFE60D0
		mov	ecx, [ebp+var_60]
		mov	ecx, [ecx+4]
		mov	eax, [ecx+4]
		mov	[ebp+var_64], ecx
		cmp	ecx, eax
		jz	short loc_6FFE616A
		lea	esi, [esi+0]

loc_6FFE6120:				; CODE XREF: sub_6FFE5F80+1E8j
		mov	edx, [eax+4]
		lea	ecx, [eax-1Ch]
		mov	[ebp+var_58], ecx
		mov	[ebp+var_54], edx
		mov	edx, [eax-1Ch]
		lock dec dword ptr [edx]
		setnz	cl
		test	cl, cl
		jnz	short loc_6FFE614C
		mov	eax, [eax-1Ch]
		mov	[esp], eax
		mov	[ebp+var_38], 0FFFFFFFFh
		call	ds:_ZN7QString4freeEPNS_4DataE

loc_6FFE614C:				; CODE XREF: sub_6FFE5F80+1B7j
		mov	eax, [ebp+var_58]
		add	eax, 8
		mov	[esp], eax
		mov	[ebp+var_38], 0FFFFFFFFh
		call	ds:_ZN8QVariantD1Ev
		mov	eax, [ebp+var_54]
		cmp	[ebp+var_64], eax
		jnz	short loc_6FFE6120

loc_6FFE616A:				; CODE XREF: sub_6FFE5F80+197j
		mov	dword ptr [esp+4], 1Ch
		mov	edx, [ebp+var_64]
		mov	[esp], edx
		mov	[ebp+var_38], 0FFFFFFFFh
		call	ds:_ZN8QMapData16continueFreeDataEi
		jmp	loc_6FFE60D0
; ---------------------------------------------------------------------------

loc_6FFE618A:				; CODE XREF: sub_6FFE5F80+147j
					; sub_6FFE5F80+161j
		mov	edx, [ebp+var_68]
		mov	[esp], edx
		mov	[ebp+var_38], 0FFFFFFFFh
		call	ds:_Z5qFreePv
		lea	eax, [ebp+var_3C]
		mov	[esp], eax
		call	_Unwind_SjLj_Unregister
		leave
		retn
sub_6FFE5F80	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn

sub_6FFE61AA	proc near		; DATA XREF: sub_6FFE5F80+20o
		add	ebp, 8
		mov	eax, [ebp-38h]
		mov	ecx, [ebp-34h]
		cmp	eax, 1
		mov	[ebp-80h], ecx
		jz	short loc_6FFE6202
		cmp	eax, 2
		jz	short loc_6FFE620D
		cmp	eax, 3
		jz	loc_6FFE6251
		mov	dword ptr [ebp-38h], 0
		call	sub_6FFEBBF0
		mov	eax, [ebp-80h]
		mov	[esp+0], eax
		call	sub_6FFEB920
		mov	edx, [ebp+8]
		mov	eax, [edx]
		mov	[esp+0], eax
		mov	dword ptr [ebp-38h], 4
		call	ds:_Z5qFreePv
		mov	eax, [ebp-68h]
		mov	ecx, [ebp+8]
		mov	[ecx], eax
		call	sub_6FFEC130
; ---------------------------------------------------------------------------

loc_6FFE6202:				; CODE XREF: sub_6FFE61AA+Fj
		mov	eax, [ebp-40h]
		mov	[esp+0], eax
		call	sub_6FFEAE50

loc_6FFE620D:				; CODE XREF: sub_6FFE61AA+14j
		mov	edx, [ebp-80h]
		mov	[esp+0], edx
		call	sub_6FFEB920

loc_6FFE6218:				; CODE XREF: sub_6FFE61AA+84j
					; sub_6FFE61AA+A5j
		mov	edx, [ebp-4Ch]
		cmp	[ebp-70h], edx
		jz	short loc_6FFE626F
		sub	dword ptr [ebp-4Ch], 4
		mov	ecx, [ebp-4Ch]
		mov	ecx, [ecx]
		test	ecx, ecx
		mov	[ebp-7Ch], ecx
		jz	short loc_6FFE6218
		mov	eax, ecx
		add	eax, 4
		mov	[esp+0], eax
		mov	dword ptr [ebp-38h], 1
		call	sub_6FFE4290
		mov	eax, [ebp-7Ch]
		mov	[esp+0], eax
		call	sub_6FFEAE50
		jmp	short loc_6FFE6218
; ---------------------------------------------------------------------------

loc_6FFE6251:				; CODE XREF: sub_6FFE61AA+19j
		mov	dword ptr [ebp-38h], 0
		call	sub_6FFEBBF0
		mov	edx, [ebp-80h]
		mov	[esp+0], edx
		mov	dword ptr [ebp-38h], 0FFFFFFFFh
		call	_Unwind_SjLj_Resume
; ---------------------------------------------------------------------------

loc_6FFE626F:				; CODE XREF: sub_6FFE61AA+74j
		mov	dword ptr [ebp-38h], 1
		call	sub_6FFEC130
sub_6FFE61AA	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6FFE6280	proc near		; CODE XREF: sub_6FFE686A+257p

var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 2Ch
		mov	edi, [esp+3Ch+arg_8]
		cmp	edi, [esp+3Ch+arg_4]
		jnz	short loc_6FFE62A8
		jmp	loc_6FFE6330
; ---------------------------------------------------------------------------

loc_6FFE6296:				; CODE XREF: sub_6FFE6280+36j
					; sub_6FFE6280+41j ...
		mov	[esp+3Ch+var_3C], ebp
		call	sub_6FFEAE50

loc_6FFE629E:				; CODE XREF: sub_6FFE6280+2Fj
		cmp	[esp+3Ch+arg_4], edi
		jz	loc_6FFE6330

loc_6FFE62A8:				; CODE XREF: sub_6FFE6280+Fj
		sub	edi, 4
		mov	ebp, [edi]
		test	ebp, ebp
		jz	short loc_6FFE629E
		mov	eax, [ebp+4]
		test	eax, eax
		jz	short loc_6FFE6296
		lock dec dword ptr [eax+34h]
		setnz	dl
		test	dl, dl
		jnz	short loc_6FFE6296
		mov	eax, [ebp+4]
		mov	edx, eax
		mov	[esp+3Ch+var_24], eax
		mov	eax, [eax+4]
		cmp	edx, eax
		jz	short loc_6FFE6315
		mov	[esp+3Ch+var_20], ebp
		mov	ebp, edx
		jmp	short loc_6FFE62E2
; ---------------------------------------------------------------------------
		align 10h

loc_6FFE62E0:				; CODE XREF: sub_6FFE6280+8Fj
		mov	eax, ebx

loc_6FFE62E2:				; CODE XREF: sub_6FFE6280+59j
		mov	ebx, [eax+4]
		lea	esi, [eax-1Ch]
		mov	edx, [eax-1Ch]
		lock dec dword ptr [edx]
		setnz	cl
		test	cl, cl
		jnz	short loc_6FFE6301
		mov	eax, [eax-1Ch]
		mov	[esp+3Ch+var_3C], eax
		call	ds:_ZN7QString4freeEPNS_4DataE

loc_6FFE6301:				; CODE XREF: sub_6FFE6280+73j
		add	esi, 8
		mov	[esp+3Ch+var_3C], esi
		call	ds:_ZN8QVariantD1Ev
		cmp	ebp, ebx
		jnz	short loc_6FFE62E0
		mov	ebp, [esp+3Ch+var_20]

loc_6FFE6315:				; CODE XREF: sub_6FFE6280+51j
		mov	eax, [esp+3Ch+var_24]
		mov	[esp+3Ch+var_38], 1Ch
		mov	[esp+3Ch+var_3C], eax
		call	ds:_ZN8QMapData16continueFreeDataEi
		jmp	loc_6FFE6296
; ---------------------------------------------------------------------------
		align 10h

loc_6FFE6330:				; CODE XREF: sub_6FFE6280+11j
					; sub_6FFE6280+22j
		add	esp, 2Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
sub_6FFE6280	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6FFE6340	proc near		; CODE XREF: _ZN16DBusMenuExporter15doUpdateActionsEv+AD7p
					; _ZN16DBusMenuExporter15doUpdateActionsEv+13F7p ...

var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 2Ch
		mov	eax, [esp+3Ch+arg_4]
		mov	[esp+3Ch+var_24], eax
		mov	ecx, [esp+3Ch+var_24]
		add	eax, 14h
		mov	edx, [ecx+0Ch]
		lea	edi, [eax+edx*4]
		mov	edx, [ecx+8]
		lea	edx, [eax+edx*4]
		cmp	edi, edx
		mov	[esp+3Ch+var_28], edx
		jnz	short loc_6FFE6382
		jmp	loc_6FFE6404
; ---------------------------------------------------------------------------
		align 10h

loc_6FFE6370:				; CODE XREF: sub_6FFE6340+50j
					; sub_6FFE6340+5Bj ...
		mov	[esp+3Ch+var_3C], ebp
		call	sub_6FFEAE50

loc_6FFE6378:				; CODE XREF: sub_6FFE6340+49j
		cmp	[esp+3Ch+var_28], edi
		jz	loc_6FFE6404

loc_6FFE6382:				; CODE XREF: sub_6FFE6340+28j
		sub	edi, 4
		mov	ebp, [edi]
		test	ebp, ebp
		jz	short loc_6FFE6378
		mov	eax, [ebp+4]
		test	eax, eax
		jz	short loc_6FFE6370
		lock dec dword ptr [eax+34h]
		setnz	dl
		test	dl, dl
		jnz	short loc_6FFE6370
		mov	eax, [ebp+4]
		mov	edx, eax
		mov	[esp+3Ch+var_2C], eax
		mov	eax, [eax+4]
		cmp	edx, eax
		jz	short loc_6FFE63EA
		mov	[esp+3Ch+var_20], ebp
		mov	ebp, edx
		jmp	short loc_6FFE63B7
; ---------------------------------------------------------------------------

loc_6FFE63B5:				; CODE XREF: sub_6FFE6340+A4j
		mov	eax, ebx

loc_6FFE63B7:				; CODE XREF: sub_6FFE6340+73j
		mov	ebx, [eax+4]
		lea	esi, [eax-1Ch]
		mov	edx, [eax-1Ch]
		lock dec dword ptr [edx]
		setnz	cl
		test	cl, cl
		jnz	short loc_6FFE63D6
		mov	eax, [eax-1Ch]
		mov	[esp+3Ch+var_3C], eax
		call	ds:_ZN7QString4freeEPNS_4DataE

loc_6FFE63D6:				; CODE XREF: sub_6FFE6340+88j
		add	esi, 8
		mov	[esp+3Ch+var_3C], esi
		call	ds:_ZN8QVariantD1Ev
		cmp	ebp, ebx
		jnz	short loc_6FFE63B5
		mov	ebp, [esp+3Ch+var_20]

loc_6FFE63EA:				; CODE XREF: sub_6FFE6340+6Bj
		mov	ecx, [esp+3Ch+var_2C]
		mov	[esp+3Ch+var_38], 1Ch
		mov	[esp+3Ch+var_3C], ecx
		call	ds:_ZN8QMapData16continueFreeDataEi
		jmp	loc_6FFE6370
; ---------------------------------------------------------------------------

loc_6FFE6404:				; CODE XREF: sub_6FFE6340+2Aj
					; sub_6FFE6340+3Cj
		mov	eax, [esp+3Ch+var_24]
		mov	[esp+3Ch+arg_0], eax
		mov	eax, ds:_Z5qFreePv
		add	esp, 2Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		jmp	eax
sub_6FFE6340	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_6FFE6420	proc near		; CODE XREF: _ZN16DBusMenuExporter15doUpdateActionsEv+F94p
					; sub_6FFC99B0+147p ...

var_BC		= dword	ptr -0BCh
var_B8		= dword	ptr -0B8h
var_B4		= dword	ptr -0B4h
var_B0		= dword	ptr -0B0h
var_AC		= dword	ptr -0ACh
var_A8		= dword	ptr -0A8h
var_A4		= dword	ptr -0A4h
var_A0		= dword	ptr -0A0h
var_9C		= dword	ptr -9Ch
var_98		= dword	ptr -98h
var_94		= dword	ptr -94h
var_90		= dword	ptr -90h
var_8C		= dword	ptr -8Ch
var_88		= dword	ptr -88h
var_84		= dword	ptr -84h
var_80		= dword	ptr -80h
var_7C		= dword	ptr -7Ch
var_78		= dword	ptr -78h
var_74		= dword	ptr -74h
var_70		= dword	ptr -70h
var_6C		= dword	ptr -6Ch
var_68		= dword	ptr -68h
var_64		= dword	ptr -64h
var_60		= dword	ptr -60h
var_5C		= byte ptr -5Ch
var_58		= dword	ptr -58h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_1C		= dword	ptr -1Ch
var_18		= byte ptr -18h
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		lea	eax, [ebp+var_18]
		sub	esp, 0CCh
		mov	[ebp+var_3C], eax
		lea	eax, [ebp+var_5C]
		mov	[esp], eax
		mov	[ebp+var_44], offset sub_6FFEC1F0
		mov	[ebp+var_40], offset dword_6FFECA90
		mov	[ebp+var_38], offset sub_6FFE686A
		mov	[ebp+var_34], esp
		call	_Unwind_SjLj_Register
		mov	edx, [ebp+arg_0]
		mov	eax, [edx]
		mov	eax, [eax]
		cmp	eax, 1
		jz	loc_6FFE67E9
		mov	[ebp+var_1C], 7FFFFFFFh
		mov	eax, [edx]
		mov	ecx, edx
		mov	edx, [eax+8]
		mov	[esp], ecx
		mov	dword ptr [esp+8], 1
		mov	[ebp+var_58], 0FFFFFFFFh
		lea	edx, [eax+edx*4+14h]
		lea	eax, [ebp+var_1C]
		mov	[ebp+var_B0], edx
		mov	[esp+4], eax
		call	ds:_ZN9QListData11detach_growEPii
		mov	edi, [ebp+arg_0]
		mov	[ebp+var_9C], eax
		mov	eax, [edi]
		mov	ebx, [eax+8]
		lea	edx, [eax+ebx*4+10h]
		lea	ecx, [edx+4]
		mov	[ebp+var_AC], ecx
		mov	ecx, [ebp+var_1C]
		mov	edi, [ebp+var_AC]
		lea	esi, ds:0[ecx*4]
		add	edi, esi
		cmp	[ebp+var_AC], edi
		mov	[ebp+var_84], edi
		jz	loc_6FFE6579
		add	edx, 8
		mov	eax, [ebp+var_AC]
		mov	[ebp+var_74], edx
		mov	edx, [ebp+var_B0]
		mov	[ebp+var_6C], eax
		mov	[ebp+var_70], edx
		jmp	short loc_6FFE64FD
; ---------------------------------------------------------------------------

loc_6FFE64F5:				; CODE XREF: sub_6FFE6420+145j
		add	[ebp+var_70], 4
		add	[ebp+var_74], 4

loc_6FFE64FD:				; CODE XREF: sub_6FFE6420+D3j
		mov	dword ptr [esp], 8 ; size_t
		mov	[ebp+var_58], 8
		call	sub_6FFEAE70
		mov	ecx, [ebp+var_70]
		mov	[ebp+var_64], eax
		mov	edi, [ebp+var_64]
		mov	eax, [ecx]
		mov	edx, [eax]
		mov	eax, [eax+4]
		mov	[edi], edx
		mov	[edi+4], eax
		lock inc dword ptr [eax+34h]
		setnz	dl
		mov	eax, [edi+4]
		test	byte ptr [eax+44h], 2
		jnz	short loc_6FFE6551
		mov	eax, [eax+34h]
		cmp	eax, 1
		jz	short loc_6FFE6551
		mov	eax, edi
		add	eax, 4
		mov	[esp], eax
		mov	[ebp+var_58], 7
		call	sub_6FFE3B80

loc_6FFE6551:				; CODE XREF: sub_6FFE6420+113j
					; sub_6FFE6420+11Bj
		mov	edx, [ebp+var_6C]
		mov	edi, [ebp+var_74]
		mov	ecx, [ebp+var_64]
		cmp	[ebp+var_84], edi
		mov	[ebp+var_6C], edi
		mov	[edx], ecx
		jnz	short loc_6FFE64F5
		mov	edx, [ebp+arg_0]
		mov	ecx, [ebp+var_1C]
		mov	eax, [edx]
		lea	esi, ds:0[ecx*4]
		mov	ebx, [eax+8]

loc_6FFE6579:				; CODE XREF: sub_6FFE6420+B5j
		mov	edx, [eax+0Ch]
		lea	edx, [eax+edx*4+14h]
		lea	eax, [eax+ebx*4+14h]
		lea	eax, [eax+ecx*4+4]
		cmp	edx, eax
		mov	[ebp+var_80], edx
		mov	[ebp+var_A8], eax
		jz	loc_6FFE6623
		add	esi, [ebp+var_B0]
		mov	ecx, eax
		add	eax, 4
		mov	[ebp+var_68], eax
		mov	[ebp+var_78], esi
		mov	[ebp+var_7C], ecx
		jmp	short loc_6FFE65BA
; ---------------------------------------------------------------------------
		align 10h

loc_6FFE65B0:				; CODE XREF: sub_6FFE6420+201j
		add	[ebp+var_78], 4
		add	ecx, 4
		mov	[ebp+var_68], ecx

loc_6FFE65BA:				; CODE XREF: sub_6FFE6420+18Dj
		mov	dword ptr [esp], 8 ; size_t
		mov	[ebp+var_58], 5
		call	sub_6FFEAE70
		mov	edi, [ebp+var_78]
		mov	[ebp+var_60], eax
		mov	ecx, [ebp+var_60]
		mov	eax, [edi]
		mov	edx, [eax]
		mov	eax, [eax+4]
		mov	[ecx], edx
		mov	[ecx+4], eax
		lock inc dword ptr [eax+34h]
		setnz	dl
		mov	eax, [ecx+4]
		test	byte ptr [eax+44h], 2
		jnz	short loc_6FFE660E
		mov	eax, [eax+34h]
		cmp	eax, 1
		jz	short loc_6FFE660E
		mov	eax, ecx
		add	eax, 4
		mov	[esp], eax
		mov	[ebp+var_58], 4
		call	sub_6FFE3B80

loc_6FFE660E:				; CODE XREF: sub_6FFE6420+1D0j
					; sub_6FFE6420+1D8j
		mov	ecx, [ebp+var_68]
		mov	edi, [ebp+var_80]
		mov	eax, [ebp+var_7C]
		mov	edx, [ebp+var_60]
		mov	[ebp+var_7C], ecx
		cmp	ecx, edi
		mov	[eax], edx
		jnz	short loc_6FFE65B0

loc_6FFE6623:				; CODE XREF: sub_6FFE6420+173j
		mov	ecx, [ebp+var_9C]
		lock dec dword ptr [ecx]
		setnz	al
		test	al, al
		jz	loc_6FFE66CB

loc_6FFE6637:				; CODE XREF: sub_6FFE6420+3C4j
		mov	edx, [ebp+arg_0]
		mov	eax, [edx]
		mov	edx, [eax+8]
		mov	dword ptr [esp], 8 ; size_t
		mov	[ebp+var_58], 0Eh
		lea	eax, [eax+edx*4+14h]
		mov	edx, [ebp+var_1C]
		lea	edx, [eax+edx*4]
		mov	[ebp+var_B8], edx
		call	sub_6FFEAE70
		mov	ecx, [ebp+arg_4]
		mov	[ebp+var_A0], eax
		mov	edi, [ebp+var_A0]
		mov	eax, [ecx]
		mov	[edi], eax
		mov	eax, [ecx+4]
		mov	[edi+4], eax
		lock inc dword ptr [eax+34h]
		setnz	dl
		mov	eax, [edi+4]
		test	byte ptr [eax+44h], 2
		jnz	short loc_6FFE66A7
		mov	eax, [eax+34h]
		cmp	eax, 1
		jz	short loc_6FFE66A7
		mov	eax, edi
		add	eax, 4
		mov	[esp], eax
		mov	[ebp+var_58], 2
		call	sub_6FFE3B80

loc_6FFE66A7:				; CODE XREF: sub_6FFE6420+269j
					; sub_6FFE6420+271j
		mov	ecx, [ebp+var_A0]
		mov	edx, [ebp+var_B8]
		mov	[edx], ecx

loc_6FFE66B5:				; CODE XREF: sub_6FFE6420+445j
		lea	eax, [ebp+var_5C]
		mov	[esp], eax
		call	_Unwind_SjLj_Unregister
		add	esp, 0CCh
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_6FFE66CB:				; CODE XREF: sub_6FFE6420+211j
		mov	eax, [ecx+0Ch]
		mov	edx, ecx
		add	edx, 14h
		lea	eax, [edx+eax*4]
		mov	[ebp+var_90], eax
		mov	eax, [ecx+8]
		lea	eax, [edx+eax*4]
		cmp	[ebp+var_90], eax
		mov	[ebp+var_A4], eax
		jnz	short loc_6FFE6715
		jmp	loc_6FFE67CE
; ---------------------------------------------------------------------------

loc_6FFE66F5:				; CODE XREF: sub_6FFE6420+313j
					; sub_6FFE6420+31Ej ...
		mov	ecx, [ebp+var_94]
		mov	[esp], ecx
		call	sub_6FFEAE50

loc_6FFE6703:				; CODE XREF: sub_6FFE6420+30Cj
		mov	edi, [ebp+var_90]
		cmp	[ebp+var_A4], edi
		jz	loc_6FFE67CE

loc_6FFE6715:				; CODE XREF: sub_6FFE6420+2CEj
		sub	[ebp+var_90], 4
		mov	edi, [ebp+var_90]
		mov	edi, [edi]
		test	edi, edi
		mov	[ebp+var_94], edi
		jz	short loc_6FFE6703
		mov	eax, [edi+4]
		test	eax, eax
		jz	short loc_6FFE66F5
		lock dec dword ptr [eax+34h]
		setnz	dl
		test	dl, dl
		jnz	short loc_6FFE66F5
		mov	eax, [edi+4]
		mov	edx, eax
		mov	[ebp+var_98], eax
		mov	eax, [eax+4]
		cmp	edx, eax
		jz	short loc_6FFE67AB

loc_6FFE6752:				; CODE XREF: sub_6FFE6420+389j
		mov	ecx, [eax+4]
		lea	edi, [eax-1Ch]
		mov	[ebp+var_8C], edi
		mov	edx, [eax-1Ch]
		mov	[ebp+var_88], ecx
		lock dec dword ptr [edx]
		setnz	cl
		test	cl, cl
		jnz	short loc_6FFE6784
		mov	eax, [eax-1Ch]
		mov	[ebp+var_58], 0FFFFFFFFh
		mov	[esp], eax
		call	ds:_ZN7QString4freeEPNS_4DataE

loc_6FFE6784:				; CODE XREF: sub_6FFE6420+34Fj
		mov	eax, [ebp+var_8C]
		mov	[ebp+var_58], 0FFFFFFFFh
		add	eax, 8
		mov	[esp], eax
		call	ds:_ZN8QVariantD1Ev
		mov	eax, [ebp+var_88]
		cmp	[ebp+var_98], eax
		jnz	short loc_6FFE6752

loc_6FFE67AB:				; CODE XREF: sub_6FFE6420+330j
		mov	edx, [ebp+var_98]
		mov	dword ptr [esp+4], 1Ch
		mov	[ebp+var_58], 0FFFFFFFFh
		mov	[esp], edx
		call	ds:_ZN8QMapData16continueFreeDataEi
		jmp	loc_6FFE66F5
; ---------------------------------------------------------------------------

loc_6FFE67CE:				; CODE XREF: sub_6FFE6420+2D0j
					; sub_6FFE6420+2EFj
		mov	eax, [ebp+var_9C]
		mov	[ebp+var_58], 0FFFFFFFFh
		mov	[esp], eax
		call	ds:_Z5qFreePv
		jmp	loc_6FFE6637
; ---------------------------------------------------------------------------

loc_6FFE67E9:				; CODE XREF: sub_6FFE6420+3Fj
		mov	[esp], edx
		mov	[ebp+var_58], 0FFFFFFFFh
		call	ds:_ZN9QListData6appendEv
		mov	dword ptr [esp], 8 ; size_t
		mov	[ebp+var_58], 0Ch
		mov	[ebp+var_BC], eax
		call	sub_6FFEAE70
		mov	edx, [ebp+arg_4]
		mov	[ebp+var_B4], eax
		mov	ecx, [ebp+var_B4]
		mov	eax, [edx]
		mov	[ecx], eax
		mov	eax, [edx+4]
		mov	[ecx+4], eax
		lock inc dword ptr [eax+34h]
		setnz	dl
		mov	eax, [ecx+4]
		test	byte ptr [eax+44h], 2
		jnz	short loc_6FFE6857
		mov	eax, [eax+34h]
		cmp	eax, 1
		jz	short loc_6FFE6857
		mov	eax, ecx
		add	eax, 4
		mov	[esp], eax
		mov	[ebp+var_58], 1
		call	sub_6FFE3B80

loc_6FFE6857:				; CODE XREF: sub_6FFE6420+419j
					; sub_6FFE6420+421j
		mov	ecx, [ebp+var_B4]
		mov	edx, [ebp+var_BC]
		mov	[edx], ecx
		jmp	loc_6FFE66B5
sub_6FFE6420	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn

sub_6FFE686A	proc near		; DATA XREF: sub_6FFE6420+26o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		add	ebp, 18h
		mov	eax, [ebp-58h]
		mov	edi, [ebp-54h]
		cmp	eax, 1
		mov	[ebp-0C0h], edi
		jz	loc_6FFE6A52
		cmp	eax, 2
		jz	loc_6FFE6A83
		cmp	eax, 3
		jz	loc_6FFE69F3
		cmp	eax, 4
		jz	loc_6FFE69FE
		cmp	eax, 5
		jz	loc_6FFE69B4
		cmp	eax, 6
		jz	loc_6FFE6953
		cmp	eax, 7
		jz	loc_6FFE695E
		cmp	eax, 8
		nop
		lea	esi, [esi+0]
		jz	short loc_6FFE6932
		cmp	eax, 9
		jz	short loc_6FFE6932
		cmp	eax, 0Ah
		jz	short loc_6FFE6911
		cmp	eax, 0Bh
		nop
		jz	short loc_6FFE68EE
		cmp	eax, 0Ch
		jz	short loc_6FFE6911
		cmp	eax, 0Dh
		jz	loc_6FFE6A60
		mov	eax, [ebp-0B4h]
		mov	[esp+0], eax
		call	sub_6FFEAE50

loc_6FFE68EE:				; CODE XREF: sub_6FFE686A+66j
		mov	edi, [ebp-0C0h]
		mov	[esp+0], edi
		call	sub_6FFEB920
		mov	edx, [ebp+8]
		mov	eax, [edx]
		sub	dword ptr [eax+0Ch], 1
		mov	dword ptr [ebp-58h], 0Bh
		call	sub_6FFEC130
; ---------------------------------------------------------------------------

loc_6FFE6911:				; CODE XREF: sub_6FFE686A+60j
					; sub_6FFE686A+6Bj
		mov	dword ptr [ebp-58h], 0
		call	sub_6FFEBBF0
		mov	ecx, [ebp-0C0h]
		mov	dword ptr [ebp-58h], 0FFFFFFFFh
		mov	[esp+0], ecx
		call	_Unwind_SjLj_Resume
; ---------------------------------------------------------------------------

loc_6FFE6932:				; CODE XREF: sub_6FFE686A+56j
					; sub_6FFE686A+5Bj
		mov	dword ptr [ebp-58h], 0
		call	sub_6FFEBBF0
		mov	edx, [ebp-0C0h]
		mov	dword ptr [ebp-58h], 0FFFFFFFFh
		mov	[esp+0], edx
		call	_Unwind_SjLj_Resume
; ---------------------------------------------------------------------------

loc_6FFE6953:				; CODE XREF: sub_6FFE686A+3Fj
		mov	eax, [ebp-64h]
		mov	[esp+0], eax
		call	sub_6FFEAE50

loc_6FFE695E:				; CODE XREF: sub_6FFE686A+48j
		mov	ecx, [ebp-0C0h]
		mov	[esp+0], ecx
		call	sub_6FFEB920

loc_6FFE696C:				; CODE XREF: sub_6FFE686A+11Ej
					; sub_6FFE686A+13Cj
		mov	eax, [ebp-6Ch]
		cmp	[ebp-0ACh], eax
		jz	short loc_6FFE69A8
		sub	dword ptr [ebp-6Ch], 4
		mov	edi, [ebp-6Ch]
		mov	edi, [edi]
		test	edi, edi
		mov	[ebp-0C8h], edi
		jz	short loc_6FFE696C
		mov	eax, edi
		add	eax, 4
		mov	[esp+0], eax
		mov	dword ptr [ebp-58h], 6
		call	sub_6FFE4290
		mov	[esp+0], edi
		call	sub_6FFEAE50
		jmp	short loc_6FFE696C
; ---------------------------------------------------------------------------

loc_6FFE69A8:				; CODE XREF: sub_6FFE686A+10Bj
		mov	dword ptr [ebp-58h], 6
		call	sub_6FFEC130
; ---------------------------------------------------------------------------

loc_6FFE69B4:				; CODE XREF: sub_6FFE686A+36j
		mov	dword ptr [ebp-58h], 0
		call	sub_6FFEBBF0
		mov	edx, [ebp-0C0h]
		mov	[esp+0], edx
		call	sub_6FFEB920
		mov	ecx, [ebp+8]
		mov	eax, [ecx]
		mov	dword ptr [ebp-58h], 0Ah
		mov	[esp+0], eax
		call	ds:_Z5qFreePv
		mov	eax, [ebp-9Ch]
		mov	edi, [ebp+8]
		mov	[edi], eax
		call	sub_6FFEC130
; ---------------------------------------------------------------------------

loc_6FFE69F3:				; CODE XREF: sub_6FFE686A+24j
		mov	edi, [ebp-60h]
		mov	[esp+0], edi
		call	sub_6FFEAE50

loc_6FFE69FE:				; CODE XREF: sub_6FFE686A+2Dj
		mov	eax, [ebp-0C0h]
		mov	[esp+0], eax
		call	sub_6FFEB920

loc_6FFE6A0C:				; CODE XREF: sub_6FFE686A+1C2j
					; sub_6FFE686A+1E6j
		mov	edi, [ebp-7Ch]
		cmp	[ebp-0A8h], edi
		jz	loc_6FFE6AE1
		sub	dword ptr [ebp-7Ch], 4
		mov	edx, [ebp-7Ch]
		mov	edx, [edx]
		test	edx, edx
		mov	[ebp-0C4h], edx
		jz	short loc_6FFE6A0C
		mov	eax, edx
		add	eax, 4
		mov	[esp+0], eax
		mov	dword ptr [ebp-58h], 3
		call	sub_6FFE4290
		mov	ecx, [ebp-0C4h]
		mov	[esp+0], ecx
		call	sub_6FFEAE50
		jmp	short loc_6FFE6A0C
; ---------------------------------------------------------------------------

loc_6FFE6A52:				; CODE XREF: sub_6FFE686A+12j
		mov	eax, [ebp-0A0h]
		mov	[esp+0], eax
		call	sub_6FFEAE50

loc_6FFE6A60:				; CODE XREF: sub_6FFE686A+70j
		mov	edi, [ebp-0C0h]
		mov	[esp+0], edi
		call	sub_6FFEB920
		mov	edx, [ebp+8]
		mov	eax, [edx]
		sub	dword ptr [eax+0Ch], 1
		mov	dword ptr [ebp-58h], 0Dh
		call	sub_6FFEC130
; ---------------------------------------------------------------------------

loc_6FFE6A83:				; CODE XREF: sub_6FFE686A+1Bj
		mov	dword ptr [ebp-58h], 0
		call	sub_6FFEBBF0
		mov	eax, [ebp-0C0h]
		mov	[esp+0], eax
		call	sub_6FFEB920
		mov	ecx, [ebp+8]
		mov	edx, [ecx]
		mov	eax, [edx+8]
		mov	[esp+0], ecx
		mov	dword ptr [ebp-58h], 9
		lea	edx, [edx+eax*4+14h]
		mov	eax, [ebp-1Ch]
		mov	[esp+arg_0], edx
		lea	eax, [edx+eax*4]
		mov	[esp+arg_4], eax
		call	sub_6FFE6280
		mov	edi, [ebp+8]
		mov	eax, [edi]
		mov	[esp+0], eax
		call	ds:_Z5qFreePv
		mov	eax, [ebp-9Ch]
		mov	[edi], eax
		call	sub_6FFEC130
; ---------------------------------------------------------------------------

loc_6FFE6AE1:				; CODE XREF: sub_6FFE686A+1ABj
		mov	dword ptr [ebp-58h], 3
		call	sub_6FFEC130
sub_6FFE686A	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6FFE6AF0	proc near		; CODE XREF: _ZN16DBusMenuExporter15doUpdateActionsEv+15E1p
					; _ZN16DBusMenuExporter15doUpdateActionsEv+16BEp ...

var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
arg_0		= dword	ptr  4

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 2Ch
		mov	edx, [esp+3Ch+arg_0]
		mov	eax, [edx]
		lock dec dword ptr [eax]
		setnz	cl
		test	cl, cl
		jz	short loc_6FFE6B10
		add	esp, 2Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6FFE6B10:				; CODE XREF: sub_6FFE6AF0+15j
		mov	edx, [edx]
		mov	eax, edx
		mov	ecx, edx
		mov	[esp+3Ch+var_24], edx
		mov	edx, [edx+0Ch]
		add	eax, 14h
		lea	edi, [eax+edx*4]
		mov	edx, [ecx+8]
		lea	edx, [eax+edx*4]
		cmp	edi, edx
		mov	[esp+3Ch+var_28], edx
		jnz	short loc_6FFE6B48
		jmp	loc_6FFE6BD0
; ---------------------------------------------------------------------------

loc_6FFE6B36:				; CODE XREF: sub_6FFE6AF0+66j
					; sub_6FFE6AF0+71j ...
		mov	[esp+3Ch+var_3C], ebp
		call	sub_6FFEAE50

loc_6FFE6B3E:				; CODE XREF: sub_6FFE6AF0+5Fj
		cmp	[esp+3Ch+var_28], edi
		jz	loc_6FFE6BD0

loc_6FFE6B48:				; CODE XREF: sub_6FFE6AF0+3Fj
		sub	edi, 4
		mov	ebp, [edi]
		test	ebp, ebp
		jz	short loc_6FFE6B3E
		mov	eax, [ebp+4]
		test	eax, eax
		jz	short loc_6FFE6B36
		lock dec dword ptr [eax+34h]
		setnz	dl
		test	dl, dl
		jnz	short loc_6FFE6B36
		mov	eax, [ebp+4]
		mov	edx, eax
		mov	[esp+3Ch+var_2C], eax
		mov	eax, [eax+4]
		cmp	edx, eax
		jz	short loc_6FFE6BB5
		mov	[esp+3Ch+var_20], ebp
		mov	ebp, edx
		jmp	short loc_6FFE6B82
; ---------------------------------------------------------------------------
		align 10h

loc_6FFE6B80:				; CODE XREF: sub_6FFE6AF0+BFj
		mov	eax, ebx

loc_6FFE6B82:				; CODE XREF: sub_6FFE6AF0+89j
		mov	ebx, [eax+4]
		lea	esi, [eax-1Ch]
		mov	edx, [eax-1Ch]
		lock dec dword ptr [edx]
		setnz	cl
		test	cl, cl
		jnz	short loc_6FFE6BA1
		mov	eax, [eax-1Ch]
		mov	[esp+3Ch+var_3C], eax
		call	ds:_ZN7QString4freeEPNS_4DataE

loc_6FFE6BA1:				; CODE XREF: sub_6FFE6AF0+A3j
		add	esi, 8
		mov	[esp+3Ch+var_3C], esi
		call	ds:_ZN8QVariantD1Ev
		cmp	ebp, ebx
		jnz	short loc_6FFE6B80
		mov	ebp, [esp+3Ch+var_20]

loc_6FFE6BB5:				; CODE XREF: sub_6FFE6AF0+81j
		mov	ecx, [esp+3Ch+var_2C]
		mov	[esp+3Ch+var_38], 1Ch
		mov	[esp+3Ch+var_3C], ecx
		call	ds:_ZN8QMapData16continueFreeDataEi
		jmp	loc_6FFE6B36
; ---------------------------------------------------------------------------
		align 10h

loc_6FFE6BD0:				; CODE XREF: sub_6FFE6AF0+41j
					; sub_6FFE6AF0+52j
		mov	eax, [esp+3Ch+var_24]
		mov	[esp+3Ch+arg_0], eax
		mov	eax, ds:_Z5qFreePv
		add	esp, 2Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		jmp	eax
sub_6FFE6AF0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_6FFE6BF0	proc near		; CODE XREF: _ZN16DBusMenuExporter15doUpdateActionsEv+1418p
					; sub_6FFCB780+388p ...

var_78		= dword	ptr -78h
var_74		= dword	ptr -74h
var_70		= dword	ptr -70h
var_6C		= dword	ptr -6Ch
var_68		= dword	ptr -68h
var_64		= dword	ptr -64h
var_60		= dword	ptr -60h
var_5C		= dword	ptr -5Ch
var_58		= dword	ptr -58h
var_54		= dword	ptr -54h
var_50		= dword	ptr -50h
var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_3C		= byte ptr -3Ch
var_38		= dword	ptr -38h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_8		= byte ptr -8
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 98h
		lea	eax, [ebp+var_8]
		mov	[ebp+var_1C], eax
		lea	eax, [ebp+var_3C]
		mov	[ebp+var_24], offset sub_6FFEC1F0
		mov	[ebp+var_20], offset dword_6FFECA34
		mov	[ebp+var_18], offset sub_6FFE6E08
		mov	[ebp+var_14], esp
		mov	[esp], eax
		call	_Unwind_SjLj_Register
		mov	edx, [ebp+arg_0]
		mov	eax, [ebp+arg_4]
		mov	edx, [edx]
		mov	ecx, [edx+8]
		mov	[ebp+var_74], edx
		mov	[ebp+var_78], ecx
		mov	[esp+4], eax
		mov	eax, [ebp+arg_0]
		mov	[esp], eax
		mov	[ebp+var_38], 0FFFFFFFFh
		call	ds:_ZN9QListData6detachEi
		mov	edx, [ebp+arg_0]
		mov	[ebp+var_64], eax
		mov	eax, [edx]
		mov	edx, [eax+0Ch]
		lea	edx, [eax+edx*4+14h]
		mov	[ebp+var_54], edx
		mov	edx, [eax+8]
		lea	eax, [eax+edx*4+10h]
		lea	ecx, [eax+4]
		cmp	[ebp+var_54], ecx
		mov	[ebp+var_70], ecx
		jz	loc_6FFE6D01
		mov	ecx, [ebp+var_74]
		add	eax, 8
		mov	edx, [ebp+var_78]
		mov	[ebp+var_44], eax
		lea	edx, [ecx+edx*4+14h]
		mov	ecx, [ebp+var_70]
		mov	[ebp+var_48], edx
		mov	[ebp+var_4C], ecx
		jmp	short loc_6FFE6CAD
; ---------------------------------------------------------------------------
		align 10h

loc_6FFE6C90:				; CODE XREF: sub_6FFE6BF0+F2j
					; sub_6FFE6BF0+10Fj
		mov	edx, [ebp+var_4C]
		mov	eax, [ebp+var_44]
		mov	ecx, [ebp+var_40]
		cmp	[ebp+var_54], eax
		mov	[ebp+var_4C], eax
		mov	[edx], ecx
		jz	short loc_6FFE6D01
		add	[ebp+var_48], 4
		add	eax, 4
		mov	[ebp+var_44], eax

loc_6FFE6CAD:				; CODE XREF: sub_6FFE6BF0+9Bj
		mov	dword ptr [esp], 8 ; size_t
		mov	[ebp+var_38], 3
		call	sub_6FFEAE70
		mov	edx, [ebp+var_48]
		mov	[ebp+var_40], eax
		mov	ecx, [ebp+var_40]
		mov	eax, [edx]
		mov	edx, [eax]
		mov	eax, [eax+4]
		mov	[ecx], edx
		mov	[ecx+4], eax
		lock inc dword ptr [eax]
		setnz	dl
		mov	eax, [ecx+4]
		test	byte ptr [eax+10h], 1
		jnz	short loc_6FFE6C90
		mov	eax, [eax+4]
		mov	[esp+4], eax
		mov	eax, ecx
		add	eax, 4
		mov	[esp], eax
		mov	[ebp+var_38], 2
		call	sub_6FFE8C20
		jmp	short loc_6FFE6C90
; ---------------------------------------------------------------------------

loc_6FFE6D01:				; CODE XREF: sub_6FFE6BF0+7Cj
					; sub_6FFE6BF0+B1j
		mov	ecx, [ebp+var_64]
		lock dec dword ptr [ecx]
		setnz	al
		test	al, al
		jz	short loc_6FFE6D1B
		lea	eax, [ebp+var_3C]
		mov	[esp], eax
		call	_Unwind_SjLj_Unregister
		leave
		retn
; ---------------------------------------------------------------------------

loc_6FFE6D1B:				; CODE XREF: sub_6FFE6BF0+11Cj
		mov	edx, [ecx+0Ch]
		mov	eax, ecx
		add	eax, 14h
		lea	edx, [eax+edx*4]
		mov	[ebp+var_58], edx
		mov	edx, [ecx+8]
		lea	edx, [eax+edx*4]
		cmp	[ebp+var_58], edx
		mov	[ebp+var_6C], edx
		jnz	short loc_6FFE6D57
		jmp	loc_6FFE6DE8
; ---------------------------------------------------------------------------
		align 10h

loc_6FFE6D40:				; CODE XREF: sub_6FFE6BF0+182j
					; sub_6FFE6BF0+1F3j
		mov	ecx, [ebp+var_5C]
		mov	[esp], ecx
		call	sub_6FFEAE50

loc_6FFE6D4B:				; CODE XREF: sub_6FFE6BF0+175j
		mov	eax, [ebp+var_58]
		cmp	[ebp+var_6C], eax
		jz	loc_6FFE6DE8

loc_6FFE6D57:				; CODE XREF: sub_6FFE6BF0+145j
		sub	[ebp+var_58], 4
		mov	eax, [ebp+var_58]
		mov	eax, [eax]
		test	eax, eax
		mov	[ebp+var_5C], eax
		jz	short loc_6FFE6D4B
		mov	eax, [eax+4]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jnz	short loc_6FFE6D40
		mov	ecx, [ebp+var_5C]
		mov	ecx, [ecx+4]
		mov	edx, [ecx+0Ch]
		mov	eax, ecx
		add	eax, 14h
		mov	[ebp+var_68], ecx
		lea	edx, [eax+edx*4]
		mov	[ebp+var_50], edx
		mov	edx, [ecx+8]
		lea	edx, [eax+edx*4]
		cmp	[ebp+var_50], edx
		mov	[ebp+var_60], edx
		jz	short loc_6FFE6DD0
		lea	esi, [esi+0]

loc_6FFE6DA0:				; CODE XREF: sub_6FFE6BF0+1DEj
		sub	[ebp+var_50], 4
		mov	edx, [ebp+var_50]
		mov	eax, [edx]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jnz	short loc_6FFE6DC8
		mov	ecx, [ebp+var_50]
		mov	eax, [ecx]
		mov	[esp], eax
		mov	[ebp+var_38], 0FFFFFFFFh
		call	ds:_ZN7QString4freeEPNS_4DataE

loc_6FFE6DC8:				; CODE XREF: sub_6FFE6BF0+1C1j
		mov	eax, [ebp+var_50]
		cmp	[ebp+var_60], eax
		jnz	short loc_6FFE6DA0

loc_6FFE6DD0:				; CODE XREF: sub_6FFE6BF0+1A7j
		mov	edx, [ebp+var_68]
		mov	[esp], edx
		mov	[ebp+var_38], 0FFFFFFFFh
		call	ds:_Z5qFreePv
		jmp	loc_6FFE6D40
; ---------------------------------------------------------------------------

loc_6FFE6DE8:				; CODE XREF: sub_6FFE6BF0+147j
					; sub_6FFE6BF0+161j
		mov	edx, [ebp+var_64]
		mov	[esp], edx
		mov	[ebp+var_38], 0FFFFFFFFh
		call	ds:_Z5qFreePv
		lea	eax, [ebp+var_3C]
		mov	[esp], eax
		call	_Unwind_SjLj_Unregister
		leave
		retn
sub_6FFE6BF0	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn

sub_6FFE6E08	proc near		; DATA XREF: sub_6FFE6BF0+20o
		add	ebp, 8
		mov	eax, [ebp-38h]
		mov	ecx, [ebp-34h]
		cmp	eax, 1
		mov	[ebp-80h], ecx
		jz	short loc_6FFE6E62
		cmp	eax, 2
		jz	short loc_6FFE6E6D
		cmp	eax, 3
		jz	loc_6FFE6EB1
		mov	dword ptr [ebp-38h], 0
		xchg	ax, ax
		call	sub_6FFEBBF0
		mov	eax, [ebp-80h]
		mov	[esp+0], eax
		call	sub_6FFEB920
		mov	edx, [ebp+8]
		mov	eax, [edx]
		mov	[esp+0], eax
		mov	dword ptr [ebp-38h], 4
		call	ds:_Z5qFreePv
		mov	eax, [ebp-64h]
		mov	ecx, [ebp+8]
		mov	[ecx], eax
		call	sub_6FFEC130
; ---------------------------------------------------------------------------

loc_6FFE6E62:				; CODE XREF: sub_6FFE6E08+Fj
		mov	eax, [ebp-40h]
		mov	[esp+0], eax
		call	sub_6FFEAE50

loc_6FFE6E6D:				; CODE XREF: sub_6FFE6E08+14j
		mov	edx, [ebp-80h]
		mov	[esp+0], edx
		call	sub_6FFEB920

loc_6FFE6E78:				; CODE XREF: sub_6FFE6E08+86j
					; sub_6FFE6E08+A7j
		mov	edx, [ebp-4Ch]
		cmp	[ebp-70h], edx
		jz	short loc_6FFE6ECF
		sub	dword ptr [ebp-4Ch], 4
		mov	ecx, [ebp-4Ch]
		mov	ecx, [ecx]
		test	ecx, ecx
		mov	[ebp-7Ch], ecx
		jz	short loc_6FFE6E78
		mov	eax, ecx
		add	eax, 4
		mov	[esp+0], eax
		mov	dword ptr [ebp-38h], 1
		call	sub_6FFDF990
		mov	eax, [ebp-7Ch]
		mov	[esp+0], eax
		call	sub_6FFEAE50
		jmp	short loc_6FFE6E78
; ---------------------------------------------------------------------------

loc_6FFE6EB1:				; CODE XREF: sub_6FFE6E08+19j
		mov	dword ptr [ebp-38h], 0
		call	sub_6FFEBBF0
		mov	edx, [ebp-80h]
		mov	[esp+0], edx
		mov	dword ptr [ebp-38h], 0FFFFFFFFh
		call	_Unwind_SjLj_Resume
; ---------------------------------------------------------------------------

loc_6FFE6ECF:				; CODE XREF: sub_6FFE6E08+76j
		mov	dword ptr [ebp-38h], 1
		call	sub_6FFEC130
sub_6FFE6E08	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6FFE6EE0	proc near		; CODE XREF: sub_6FFE748A+257p

var_3C		= dword	ptr -3Ch
var_20		= dword	ptr -20h
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 2Ch
		mov	esi, [esp+3Ch+arg_8]
		cmp	esi, [esp+3Ch+arg_4]
		jnz	short loc_6FFE6F02
		jmp	short loc_6FFE6F63
; ---------------------------------------------------------------------------

loc_6FFE6EF3:				; CODE XREF: sub_6FFE6EE0+36j
					; sub_6FFE6EE0+81j
		mov	[esp+3Ch+var_3C], edi
		call	sub_6FFEAE50

loc_6FFE6EFB:				; CODE XREF: sub_6FFE6EE0+29j
		cmp	[esp+3Ch+arg_4], esi
		nop
		jz	short loc_6FFE6F63

loc_6FFE6F02:				; CODE XREF: sub_6FFE6EE0+Fj
		sub	esi, 4
		mov	edi, [esi]
		test	edi, edi
		jz	short loc_6FFE6EFB
		mov	eax, [edi+4]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jnz	short loc_6FFE6EF3
		mov	eax, [edi+4]
		mov	[esp+3Ch+var_20], eax
		mov	ecx, [esp+3Ch+var_20]
		add	eax, 14h
		mov	edx, [ecx+0Ch]
		lea	ebx, [eax+edx*4]
		mov	edx, [ecx+8]
		lea	ebp, [eax+edx*4]
		cmp	ebx, ebp
		jz	short loc_6FFE6F54

loc_6FFE6F36:				; CODE XREF: sub_6FFE6EE0+72j
		sub	ebx, 4
		mov	eax, [ebx]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jnz	short loc_6FFE6F50
		mov	eax, [ebx]
		mov	[esp+3Ch+var_3C], eax
		call	ds:_ZN7QString4freeEPNS_4DataE

loc_6FFE6F50:				; CODE XREF: sub_6FFE6EE0+63j
		cmp	ebp, ebx
		jnz	short loc_6FFE6F36

loc_6FFE6F54:				; CODE XREF: sub_6FFE6EE0+54j
		mov	eax, [esp+3Ch+var_20]
		mov	[esp+3Ch+var_3C], eax
		call	ds:_Z5qFreePv
		jmp	short loc_6FFE6EF3
; ---------------------------------------------------------------------------

loc_6FFE6F63:				; CODE XREF: sub_6FFE6EE0+11j
					; sub_6FFE6EE0+20j
		add	esp, 2Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
sub_6FFE6EE0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6FFE6F70	proc near		; CODE XREF: _ZN16DBusMenuExporter15doUpdateActionsEv+A99p
					; _ZN16DBusMenuExporter15doUpdateActionsEv+13BDp ...

var_3C		= dword	ptr -3Ch
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 2Ch
		mov	eax, [esp+3Ch+arg_4]
		mov	[esp+3Ch+var_24], eax
		mov	ecx, [esp+3Ch+var_24]
		add	eax, 14h
		mov	edx, [ecx+0Ch]
		lea	esi, [eax+edx*4]
		mov	edx, [ecx+8]
		lea	edx, [eax+edx*4]
		cmp	esi, edx
		mov	[esp+3Ch+var_28], edx
		jz	short loc_6FFE7013
		mov	ecx, ds:_Z5qFreePv
		mov	[esp+3Ch+var_20], ecx
		jmp	short loc_6FFE6FB4
; ---------------------------------------------------------------------------

loc_6FFE6FA6:				; CODE XREF: sub_6FFE6F70+58j
					; sub_6FFE6F70+A1j
		mov	[esp+3Ch+var_3C], edi
		call	sub_6FFEAE50

loc_6FFE6FAE:				; CODE XREF: sub_6FFE6F70+4Bj
		cmp	[esp+3Ch+var_28], esi
		jz	short loc_6FFE7020

loc_6FFE6FB4:				; CODE XREF: sub_6FFE6F70+34j
		sub	esi, 4
		mov	edi, [esi]
		test	edi, edi
		jz	short loc_6FFE6FAE
		mov	eax, [edi+4]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jnz	short loc_6FFE6FA6
		mov	eax, [edi+4]
		mov	[esp+3Ch+var_2C], eax
		mov	ecx, [esp+3Ch+var_2C]
		add	eax, 14h
		mov	edx, [ecx+0Ch]
		lea	ebx, [eax+edx*4]
		mov	edx, [ecx+8]
		lea	ebp, [eax+edx*4]
		cmp	ebx, ebp
		jz	short loc_6FFE7006

loc_6FFE6FE8:				; CODE XREF: sub_6FFE6F70+94j
		sub	ebx, 4
		mov	eax, [ebx]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jnz	short loc_6FFE7002
		mov	eax, [ebx]
		mov	[esp+3Ch+var_3C], eax
		call	ds:_ZN7QString4freeEPNS_4DataE

loc_6FFE7002:				; CODE XREF: sub_6FFE6F70+85j
		cmp	ebp, ebx
		jnz	short loc_6FFE6FE8

loc_6FFE7006:				; CODE XREF: sub_6FFE6F70+76j
		mov	eax, [esp+3Ch+var_2C]
		mov	[esp+3Ch+var_3C], eax
		call	[esp+3Ch+var_20]
		jmp	short loc_6FFE6FA6
; ---------------------------------------------------------------------------

loc_6FFE7013:				; CODE XREF: sub_6FFE6F70+28j
		mov	eax, ds:_Z5qFreePv
		mov	[esp+3Ch+var_20], eax
		lea	esi, [esi+0]

loc_6FFE7020:				; CODE XREF: sub_6FFE6F70+42j
		mov	ecx, [esp+3Ch+var_24]
		mov	eax, [esp+3Ch+var_20]
		mov	[esp+3Ch+arg_0], ecx
		add	esp, 2Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		jmp	eax
sub_6FFE6F70	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_6FFE7040	proc near		; CODE XREF: _ZN16DBusMenuExporter15doUpdateActionsEv+8C0p
					; sub_6FFDCB60+FEp

var_BC		= dword	ptr -0BCh
var_B8		= dword	ptr -0B8h
var_B4		= dword	ptr -0B4h
var_B0		= dword	ptr -0B0h
var_AC		= dword	ptr -0ACh
var_A8		= dword	ptr -0A8h
var_A4		= dword	ptr -0A4h
var_A0		= dword	ptr -0A0h
var_9C		= dword	ptr -9Ch
var_98		= dword	ptr -98h
var_94		= dword	ptr -94h
var_90		= dword	ptr -90h
var_8C		= dword	ptr -8Ch
var_88		= dword	ptr -88h
var_84		= dword	ptr -84h
var_80		= dword	ptr -80h
var_7C		= dword	ptr -7Ch
var_78		= dword	ptr -78h
var_74		= dword	ptr -74h
var_70		= dword	ptr -70h
var_6C		= dword	ptr -6Ch
var_68		= dword	ptr -68h
var_64		= dword	ptr -64h
var_60		= dword	ptr -60h
var_5C		= byte ptr -5Ch
var_58		= dword	ptr -58h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_1C		= dword	ptr -1Ch
var_18		= byte ptr -18h
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		lea	eax, [ebp+var_18]
		sub	esp, 0CCh
		mov	[ebp+var_3C], eax
		lea	eax, [ebp+var_5C]
		mov	[esp], eax
		mov	[ebp+var_44], offset sub_6FFEC1F0
		mov	[ebp+var_40], offset dword_6FFECA4C
		mov	[ebp+var_38], offset sub_6FFE748A
		mov	[ebp+var_34], esp
		call	_Unwind_SjLj_Register
		mov	edx, [ebp+arg_0]
		mov	eax, [edx]
		mov	eax, [eax]
		cmp	eax, 1
		jz	loc_6FFE73F8
		mov	[ebp+var_1C], 7FFFFFFFh
		mov	eax, [edx]
		mov	ecx, edx
		mov	edx, [eax+8]
		mov	[esp], ecx
		mov	dword ptr [esp+8], 1
		mov	[ebp+var_58], 0FFFFFFFFh
		lea	edx, [eax+edx*4+14h]
		lea	eax, [ebp+var_1C]
		mov	[ebp+var_B0], edx
		mov	[esp+4], eax
		call	ds:_ZN9QListData11detach_growEPii
		mov	edi, [ebp+arg_0]
		mov	[ebp+var_98], eax
		mov	eax, [edi]
		mov	ebx, [eax+8]
		lea	edx, [eax+ebx*4+10h]
		lea	ecx, [edx+4]
		mov	[ebp+var_AC], ecx
		mov	ecx, [ebp+var_1C]
		mov	edi, [ebp+var_AC]
		lea	esi, ds:0[ecx*4]
		add	edi, esi
		cmp	[ebp+var_AC], edi
		mov	[ebp+var_88], edi
		jz	loc_6FFE7199
		add	edx, 8
		mov	eax, [ebp+var_AC]
		mov	[ebp+var_74], edx
		mov	edx, [ebp+var_B0]
		mov	[ebp+var_6C], eax
		mov	[ebp+var_70], edx
		jmp	short loc_6FFE7133
; ---------------------------------------------------------------------------

loc_6FFE7115:				; CODE XREF: sub_6FFE7040+128j
					; sub_6FFE7040+145j
		mov	edx, [ebp+var_6C]
		mov	edi, [ebp+var_74]
		mov	ecx, [ebp+var_64]
		cmp	[ebp+var_88], edi
		mov	[ebp+var_6C], edi
		mov	[edx], ecx
		jz	short loc_6FFE7187
		add	[ebp+var_70], 4
		add	[ebp+var_74], 4

loc_6FFE7133:				; CODE XREF: sub_6FFE7040+D3j
		mov	dword ptr [esp], 8 ; size_t
		mov	[ebp+var_58], 8
		call	sub_6FFEAE70
		mov	ecx, [ebp+var_70]
		mov	[ebp+var_64], eax
		mov	edi, [ebp+var_64]
		mov	eax, [ecx]
		mov	edx, [eax]
		mov	eax, [eax+4]
		mov	[edi], edx
		mov	[edi+4], eax
		lock inc dword ptr [eax]
		setnz	dl
		mov	eax, [edi+4]
		test	byte ptr [eax+10h], 1
		jnz	short loc_6FFE7115
		mov	eax, [eax+4]
		mov	[ebp+var_58], 7
		mov	[esp+4], eax
		mov	eax, edi
		add	eax, 4
		mov	[esp], eax
		call	sub_6FFE8C20
		jmp	short loc_6FFE7115
; ---------------------------------------------------------------------------

loc_6FFE7187:				; CODE XREF: sub_6FFE7040+E9j
		mov	edx, [ebp+arg_0]
		mov	ecx, [ebp+var_1C]
		mov	eax, [edx]
		lea	esi, ds:0[ecx*4]
		mov	ebx, [eax+8]

loc_6FFE7199:				; CODE XREF: sub_6FFE7040+B5j
		mov	edx, [eax+0Ch]
		lea	edx, [eax+edx*4+14h]
		lea	eax, [eax+ebx*4+14h]
		lea	eax, [eax+ecx*4+4]
		cmp	edx, eax
		mov	[ebp+var_84], edx
		mov	[ebp+var_A8], eax
		jz	loc_6FFE7248
		add	esi, [ebp+var_B0]
		mov	ecx, eax
		add	eax, 4
		mov	[ebp+var_68], eax
		mov	[ebp+var_78], esi
		mov	[ebp+var_7C], ecx
		jmp	short loc_6FFE71F4
; ---------------------------------------------------------------------------

loc_6FFE71D2:				; CODE XREF: sub_6FFE7040+1E9j
					; sub_6FFE7040+206j
		mov	ecx, [ebp+var_68]
		mov	edi, [ebp+var_84]
		mov	eax, [ebp+var_7C]
		mov	edx, [ebp+var_60]
		mov	[ebp+var_7C], ecx
		cmp	ecx, edi
		mov	[eax], edx
		jz	short loc_6FFE7248
		add	[ebp+var_78], 4
		add	ecx, 4
		mov	[ebp+var_68], ecx

loc_6FFE71F4:				; CODE XREF: sub_6FFE7040+190j
		mov	dword ptr [esp], 8 ; size_t
		mov	[ebp+var_58], 5
		call	sub_6FFEAE70
		mov	edi, [ebp+var_78]
		mov	[ebp+var_60], eax
		mov	ecx, [ebp+var_60]
		mov	eax, [edi]
		mov	edx, [eax]
		mov	eax, [eax+4]
		mov	[ecx], edx
		mov	[ecx+4], eax
		lock inc dword ptr [eax]
		setnz	dl
		mov	eax, [ecx+4]
		test	byte ptr [eax+10h], 1
		jnz	short loc_6FFE71D2
		mov	eax, [eax+4]
		mov	[ebp+var_58], 4
		mov	[esp+4], eax
		mov	eax, ecx
		add	eax, 4
		mov	[esp], eax
		call	sub_6FFE8C20
		jmp	short loc_6FFE71D2
; ---------------------------------------------------------------------------

loc_6FFE7248:				; CODE XREF: sub_6FFE7040+176j
					; sub_6FFE7040+1A8j
		mov	ecx, [ebp+var_98]
		lock dec dword ptr [ecx]
		setnz	al
		test	al, al
		jz	loc_6FFE72F0

loc_6FFE725C:				; CODE XREF: sub_6FFE7040+3B3j
		mov	edx, [ebp+arg_0]
		mov	eax, [edx]
		mov	edx, [eax+8]
		mov	dword ptr [esp], 8 ; size_t
		mov	[ebp+var_58], 0Eh
		lea	eax, [eax+edx*4+14h]
		mov	edx, [ebp+var_1C]
		lea	edx, [eax+edx*4]
		mov	[ebp+var_B8], edx
		call	sub_6FFEAE70
		mov	ecx, [ebp+arg_4]
		mov	[ebp+var_A0], eax
		mov	edi, [ebp+var_A0]
		mov	eax, [ecx]
		mov	[edi], eax
		mov	eax, [ecx+4]
		mov	[edi+4], eax
		lock inc dword ptr [eax]
		setnz	dl
		mov	eax, [edi+4]
		test	byte ptr [eax+10h], 1
		jz	short loc_6FFE72D3

loc_6FFE72AF:				; CODE XREF: sub_6FFE7040+2AEj
		mov	ecx, [ebp+var_A0]
		mov	edx, [ebp+var_B8]
		mov	[edx], ecx

loc_6FFE72BD:				; CODE XREF: sub_6FFE7040+417j
					; sub_6FFE7040+445j
		lea	eax, [ebp+var_5C]
		mov	[esp], eax
		call	_Unwind_SjLj_Unregister
		add	esp, 0CCh
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_6FFE72D3:				; CODE XREF: sub_6FFE7040+26Dj
		mov	eax, [eax+4]
		mov	[ebp+var_58], 2
		mov	[esp+4], eax
		mov	eax, edi
		add	eax, 4
		mov	[esp], eax
		call	sub_6FFE8C20
		jmp	short loc_6FFE72AF
; ---------------------------------------------------------------------------

loc_6FFE72F0:				; CODE XREF: sub_6FFE7040+216j
		mov	eax, [ecx+0Ch]
		mov	edx, ecx
		add	edx, 14h
		lea	eax, [edx+eax*4]
		mov	[ebp+var_8C], eax
		mov	eax, [ecx+8]
		lea	eax, [edx+eax*4]
		cmp	[ebp+var_8C], eax
		mov	[ebp+var_A4], eax
		jnz	short loc_6FFE7340
		jmp	loc_6FFE73DD
; ---------------------------------------------------------------------------
		align 10h

loc_6FFE7320:				; CODE XREF: sub_6FFE7040+324j
					; sub_6FFE7040+398j
		mov	ecx, [ebp+var_90]
		mov	[esp], ecx
		call	sub_6FFEAE50

loc_6FFE732E:				; CODE XREF: sub_6FFE7040+317j
		mov	edi, [ebp+var_8C]
		cmp	[ebp+var_A4], edi
		jz	loc_6FFE73DD

loc_6FFE7340:				; CODE XREF: sub_6FFE7040+2D3j
		sub	[ebp+var_8C], 4
		mov	edi, [ebp+var_8C]
		mov	edi, [edi]
		test	edi, edi
		mov	[ebp+var_90], edi
		jz	short loc_6FFE732E
		mov	eax, [edi+4]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jnz	short loc_6FFE7320
		mov	eax, [edi+4]
		mov	[ebp+var_9C], eax
		mov	ecx, [ebp+var_9C]
		add	eax, 14h
		mov	edx, [ecx+0Ch]
		lea	edx, [eax+edx*4]
		mov	[ebp+var_80], edx
		mov	edx, [ecx+8]
		lea	edx, [eax+edx*4]
		cmp	[ebp+var_80], edx
		mov	[ebp+var_94], edx
		jz	short loc_6FFE73C2

loc_6FFE7392:				; CODE XREF: sub_6FFE7040+380j
		sub	[ebp+var_80], 4
		mov	edi, [ebp+var_80]
		mov	eax, [edi]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jnz	short loc_6FFE73B7
		mov	eax, [edi]
		mov	[ebp+var_58], 0FFFFFFFFh
		mov	[esp], eax
		call	ds:_ZN7QString4freeEPNS_4DataE

loc_6FFE73B7:				; CODE XREF: sub_6FFE7040+363j
		mov	eax, [ebp+var_80]
		cmp	[ebp+var_94], eax
		jnz	short loc_6FFE7392

loc_6FFE73C2:				; CODE XREF: sub_6FFE7040+350j
		mov	edx, [ebp+var_9C]
		mov	[ebp+var_58], 0FFFFFFFFh
		mov	[esp], edx
		call	ds:_Z5qFreePv
		jmp	loc_6FFE7320
; ---------------------------------------------------------------------------

loc_6FFE73DD:				; CODE XREF: sub_6FFE7040+2D5j
					; sub_6FFE7040+2FAj
		mov	eax, [ebp+var_98]
		mov	[ebp+var_58], 0FFFFFFFFh
		mov	[esp], eax
		call	ds:_Z5qFreePv
		jmp	loc_6FFE725C
; ---------------------------------------------------------------------------

loc_6FFE73F8:				; CODE XREF: sub_6FFE7040+3Fj
		mov	[esp], edx
		mov	[ebp+var_58], 0FFFFFFFFh
		call	ds:_ZN9QListData6appendEv
		mov	dword ptr [esp], 8 ; size_t
		mov	[ebp+var_58], 0Ch
		mov	[ebp+var_BC], eax
		call	sub_6FFEAE70
		mov	edx, [ebp+arg_4]
		mov	[ebp+var_B4], eax
		mov	ecx, [ebp+var_B4]
		mov	eax, [edx]
		mov	[ecx], eax
		mov	eax, [edx+4]
		mov	[ecx+4], eax
		lock inc dword ptr [eax]
		setnz	dl
		mov	eax, [ecx+4]
		test	byte ptr [eax+10h], 1
		jz	short loc_6FFE745C
		mov	ecx, [ebp+var_B4]
		mov	edx, [ebp+var_BC]
		mov	[edx], ecx
		jmp	loc_6FFE72BD
; ---------------------------------------------------------------------------

loc_6FFE745C:				; CODE XREF: sub_6FFE7040+407j
		mov	eax, [eax+4]
		mov	[ebp+var_58], 1
		mov	[esp+4], eax
		mov	eax, ecx
		add	eax, 4
		mov	[esp], eax
		call	sub_6FFE8C20
		mov	ecx, [ebp+var_B4]
		mov	edx, [ebp+var_BC]
		mov	[edx], ecx
		jmp	loc_6FFE72BD
sub_6FFE7040	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn

sub_6FFE748A	proc near		; DATA XREF: sub_6FFE7040+26o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		add	ebp, 18h
		mov	eax, [ebp-58h]
		mov	edi, [ebp-54h]
		cmp	eax, 1
		mov	[ebp-0C0h], edi
		jz	loc_6FFE7672
		cmp	eax, 2
		jz	loc_6FFE76A3
		cmp	eax, 3
		jz	loc_6FFE7613
		cmp	eax, 4
		jz	loc_6FFE761E
		cmp	eax, 5
		jz	loc_6FFE75D4
		cmp	eax, 6
		jz	loc_6FFE7573
		cmp	eax, 7
		jz	loc_6FFE757E
		cmp	eax, 8
		nop
		lea	esi, [esi+0]
		jz	short loc_6FFE7552
		cmp	eax, 9
		jz	short loc_6FFE7552
		cmp	eax, 0Ah
		jz	short loc_6FFE7531
		cmp	eax, 0Bh
		nop
		jz	short loc_6FFE750E
		cmp	eax, 0Ch
		jz	short loc_6FFE7531
		cmp	eax, 0Dh
		jz	loc_6FFE7680
		mov	eax, [ebp-0B4h]
		mov	[esp+0], eax
		call	sub_6FFEAE50

loc_6FFE750E:				; CODE XREF: sub_6FFE748A+66j
		mov	edi, [ebp-0C0h]
		mov	[esp+0], edi
		call	sub_6FFEB920
		mov	edx, [ebp+8]
		mov	eax, [edx]
		sub	dword ptr [eax+0Ch], 1
		mov	dword ptr [ebp-58h], 0Bh
		call	sub_6FFEC130
; ---------------------------------------------------------------------------

loc_6FFE7531:				; CODE XREF: sub_6FFE748A+60j
					; sub_6FFE748A+6Bj
		mov	dword ptr [ebp-58h], 0
		call	sub_6FFEBBF0
		mov	ecx, [ebp-0C0h]
		mov	dword ptr [ebp-58h], 0FFFFFFFFh
		mov	[esp+0], ecx
		call	_Unwind_SjLj_Resume
; ---------------------------------------------------------------------------

loc_6FFE7552:				; CODE XREF: sub_6FFE748A+56j
					; sub_6FFE748A+5Bj
		mov	dword ptr [ebp-58h], 0
		call	sub_6FFEBBF0
		mov	edx, [ebp-0C0h]
		mov	dword ptr [ebp-58h], 0FFFFFFFFh
		mov	[esp+0], edx
		call	_Unwind_SjLj_Resume
; ---------------------------------------------------------------------------

loc_6FFE7573:				; CODE XREF: sub_6FFE748A+3Fj
		mov	eax, [ebp-64h]
		mov	[esp+0], eax
		call	sub_6FFEAE50

loc_6FFE757E:				; CODE XREF: sub_6FFE748A+48j
		mov	ecx, [ebp-0C0h]
		mov	[esp+0], ecx
		call	sub_6FFEB920

loc_6FFE758C:				; CODE XREF: sub_6FFE748A+11Ej
					; sub_6FFE748A+13Cj
		mov	eax, [ebp-6Ch]
		cmp	[ebp-0ACh], eax
		jz	short loc_6FFE75C8
		sub	dword ptr [ebp-6Ch], 4
		mov	edi, [ebp-6Ch]
		mov	edi, [edi]
		test	edi, edi
		mov	[ebp-0C8h], edi
		jz	short loc_6FFE758C
		mov	eax, edi
		add	eax, 4
		mov	[esp+0], eax
		mov	dword ptr [ebp-58h], 6
		call	sub_6FFDF990
		mov	[esp+0], edi
		call	sub_6FFEAE50
		jmp	short loc_6FFE758C
; ---------------------------------------------------------------------------

loc_6FFE75C8:				; CODE XREF: sub_6FFE748A+10Bj
		mov	dword ptr [ebp-58h], 6
		call	sub_6FFEC130
; ---------------------------------------------------------------------------

loc_6FFE75D4:				; CODE XREF: sub_6FFE748A+36j
		mov	dword ptr [ebp-58h], 0
		call	sub_6FFEBBF0
		mov	edx, [ebp-0C0h]
		mov	[esp+0], edx
		call	sub_6FFEB920
		mov	ecx, [ebp+8]
		mov	eax, [ecx]
		mov	dword ptr [ebp-58h], 0Ah
		mov	[esp+0], eax
		call	ds:_Z5qFreePv
		mov	eax, [ebp-98h]
		mov	edi, [ebp+8]
		mov	[edi], eax
		call	sub_6FFEC130
; ---------------------------------------------------------------------------

loc_6FFE7613:				; CODE XREF: sub_6FFE748A+24j
		mov	edi, [ebp-60h]
		mov	[esp+0], edi
		call	sub_6FFEAE50

loc_6FFE761E:				; CODE XREF: sub_6FFE748A+2Dj
		mov	eax, [ebp-0C0h]
		mov	[esp+0], eax
		call	sub_6FFEB920

loc_6FFE762C:				; CODE XREF: sub_6FFE748A+1C2j
					; sub_6FFE748A+1E6j
		mov	edi, [ebp-7Ch]
		cmp	[ebp-0A8h], edi
		jz	loc_6FFE7701
		sub	dword ptr [ebp-7Ch], 4
		mov	edx, [ebp-7Ch]
		mov	edx, [edx]
		test	edx, edx
		mov	[ebp-0C4h], edx
		jz	short loc_6FFE762C
		mov	eax, edx
		add	eax, 4
		mov	[esp+0], eax
		mov	dword ptr [ebp-58h], 3
		call	sub_6FFDF990
		mov	ecx, [ebp-0C4h]
		mov	[esp+0], ecx
		call	sub_6FFEAE50
		jmp	short loc_6FFE762C
; ---------------------------------------------------------------------------

loc_6FFE7672:				; CODE XREF: sub_6FFE748A+12j
		mov	eax, [ebp-0A0h]
		mov	[esp+0], eax
		call	sub_6FFEAE50

loc_6FFE7680:				; CODE XREF: sub_6FFE748A+70j
		mov	edi, [ebp-0C0h]
		mov	[esp+0], edi
		call	sub_6FFEB920
		mov	edx, [ebp+8]
		mov	eax, [edx]
		sub	dword ptr [eax+0Ch], 1
		mov	dword ptr [ebp-58h], 0Dh
		call	sub_6FFEC130
; ---------------------------------------------------------------------------

loc_6FFE76A3:				; CODE XREF: sub_6FFE748A+1Bj
		mov	dword ptr [ebp-58h], 0
		call	sub_6FFEBBF0
		mov	eax, [ebp-0C0h]
		mov	[esp+0], eax
		call	sub_6FFEB920
		mov	ecx, [ebp+8]
		mov	edx, [ecx]
		mov	eax, [edx+8]
		mov	[esp+0], ecx
		mov	dword ptr [ebp-58h], 9
		lea	edx, [edx+eax*4+14h]
		mov	eax, [ebp-1Ch]
		mov	[esp+arg_0], edx
		lea	eax, [edx+eax*4]
		mov	[esp+arg_4], eax
		call	sub_6FFE6EE0
		mov	edi, [ebp+8]
		mov	eax, [edi]
		mov	[esp+0], eax
		call	ds:_Z5qFreePv
		mov	eax, [ebp-98h]
		mov	[edi], eax
		call	sub_6FFEC130
; ---------------------------------------------------------------------------

loc_6FFE7701:				; CODE XREF: sub_6FFE748A+1ABj
		mov	dword ptr [ebp-58h], 3
		call	sub_6FFEC130
sub_6FFE748A	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6FFE7710	proc near		; CODE XREF: _ZN16DBusMenuExporter15doUpdateActionsEv+15CCp
					; _ZN16DBusMenuExporter15doUpdateActionsEv+16D3p

var_3C		= dword	ptr -3Ch
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
arg_0		= dword	ptr  4

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 2Ch
		mov	edx, [esp+3Ch+arg_0]
		mov	eax, [edx]
		lock dec dword ptr [eax]
		setnz	cl
		test	cl, cl
		jz	short loc_6FFE7730
		add	esp, 2Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6FFE7730:				; CODE XREF: sub_6FFE7710+15j
		mov	edx, [edx]
		mov	eax, edx
		mov	ecx, edx
		mov	[esp+3Ch+var_24], edx
		mov	edx, [edx+0Ch]
		add	eax, 14h
		lea	esi, [eax+edx*4]
		mov	edx, [ecx+8]
		lea	edx, [eax+edx*4]
		cmp	esi, edx
		mov	[esp+3Ch+var_28], edx
		jz	short loc_6FFE77CD
		mov	ecx, ds:_Z5qFreePv
		mov	[esp+3Ch+var_20], ecx
		jmp	short loc_6FFE776E
; ---------------------------------------------------------------------------
		align 10h

loc_6FFE7760:				; CODE XREF: sub_6FFE7710+72j
					; sub_6FFE7710+BBj
		mov	[esp+3Ch+var_3C], edi
		call	sub_6FFEAE50

loc_6FFE7768:				; CODE XREF: sub_6FFE7710+65j
		cmp	[esp+3Ch+var_28], esi
		jz	short loc_6FFE77D6

loc_6FFE776E:				; CODE XREF: sub_6FFE7710+4Bj
		sub	esi, 4
		mov	edi, [esi]
		test	edi, edi
		jz	short loc_6FFE7768
		mov	eax, [edi+4]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jnz	short loc_6FFE7760
		mov	eax, [edi+4]
		mov	[esp+3Ch+var_2C], eax
		mov	ecx, [esp+3Ch+var_2C]
		add	eax, 14h
		mov	edx, [ecx+0Ch]
		lea	ebx, [eax+edx*4]
		mov	edx, [ecx+8]
		lea	ebp, [eax+edx*4]
		cmp	ebx, ebp
		jz	short loc_6FFE77C0

loc_6FFE77A2:				; CODE XREF: sub_6FFE7710+AEj
		sub	ebx, 4
		mov	eax, [ebx]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jnz	short loc_6FFE77BC
		mov	eax, [ebx]
		mov	[esp+3Ch+var_3C], eax
		call	ds:_ZN7QString4freeEPNS_4DataE

loc_6FFE77BC:				; CODE XREF: sub_6FFE7710+9Fj
		cmp	ebp, ebx
		jnz	short loc_6FFE77A2

loc_6FFE77C0:				; CODE XREF: sub_6FFE7710+90j
		mov	eax, [esp+3Ch+var_2C]
		mov	[esp+3Ch+var_3C], eax
		call	[esp+3Ch+var_20]
		jmp	short loc_6FFE7760
; ---------------------------------------------------------------------------

loc_6FFE77CD:				; CODE XREF: sub_6FFE7710+3Fj
		mov	eax, ds:_Z5qFreePv
		mov	[esp+3Ch+var_20], eax

loc_6FFE77D6:				; CODE XREF: sub_6FFE7710+5Cj
		mov	ecx, [esp+3Ch+var_24]
		mov	eax, [esp+3Ch+var_20]
		mov	[esp+3Ch+arg_0], ecx
		add	esp, 2Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		jmp	eax
sub_6FFE7710	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_6FFE77F0	proc near		; CODE XREF: _ZN16DBusMenuImporter21slotGetLayoutFinishedEP23QDBusPendingCallWatcher+D59p
					; _ZlsR13QDBusArgumentRK18DBusMenuLayoutItem+7C5p ...

var_C4		= dword	ptr -0C4h
var_C0		= dword	ptr -0C0h
var_BC		= dword	ptr -0BCh
var_B8		= dword	ptr -0B8h
var_B4		= dword	ptr -0B4h
var_B0		= dword	ptr -0B0h
var_AC		= dword	ptr -0ACh
var_A8		= dword	ptr -0A8h
var_A4		= dword	ptr -0A4h
var_A0		= dword	ptr -0A0h
var_9C		= dword	ptr -9Ch
var_98		= dword	ptr -98h
var_94		= dword	ptr -94h
var_90		= dword	ptr -90h
var_8C		= dword	ptr -8Ch
var_88		= dword	ptr -88h
var_84		= dword	ptr -84h
var_80		= dword	ptr -80h
var_7C		= dword	ptr -7Ch
var_78		= dword	ptr -78h
var_74		= dword	ptr -74h
var_70		= dword	ptr -70h
var_6C		= dword	ptr -6Ch
var_68		= dword	ptr -68h
var_64		= dword	ptr -64h
var_60		= dword	ptr -60h
var_5C		= dword	ptr -5Ch
var_58		= dword	ptr -58h
var_54		= dword	ptr -54h
var_50		= dword	ptr -50h
var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_3C		= byte ptr -3Ch
var_38		= dword	ptr -38h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_8		= byte ptr -8
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 0E8h
		lea	eax, [ebp+var_8]
		mov	[ebp+var_1C], eax
		lea	eax, [ebp+var_3C]
		mov	[ebp+var_24], offset sub_6FFEC1F0
		mov	[ebp+var_20], offset dword_6FFECAE0
		mov	[ebp+var_18], offset sub_6FFE7D3C
		mov	[ebp+var_14], esp
		mov	[esp], eax
		call	_Unwind_SjLj_Register
		mov	edx, [ebp+arg_0]
		mov	eax, [ebp+arg_4]
		mov	edx, [edx]
		mov	ecx, [edx+8]
		mov	[ebp+var_C0], edx
		mov	[ebp+var_C4], ecx
		mov	[esp+4], eax
		mov	eax, [ebp+arg_0]
		mov	[esp], eax
		mov	[ebp+var_38], 0FFFFFFFFh
		call	ds:_ZN9QListData6detachEi
		mov	ecx, [ebp+arg_0]
		mov	[ebp+var_B0], eax
		mov	edx, [ecx]
		mov	eax, [edx+0Ch]
		lea	eax, [edx+eax*4+14h]
		mov	[ebp+var_7C], eax
		mov	eax, [edx+8]
		lea	eax, [edx+eax*4+10h]
		lea	edx, [eax+4]
		cmp	[ebp+var_7C], edx
		mov	[ebp+var_BC], edx
		jz	loc_6FFE7963
		add	eax, 8
		mov	ecx, [ebp+var_C4]
		mov	edx, [ebp+var_C0]
		mov	[ebp+var_54], eax
		mov	eax, [ebp+var_BC]
		lea	ecx, [edx+ecx*4+14h]
		mov	[ebp+var_5C], ecx
		mov	[ebp+var_68], eax
		jmp	short loc_6FFE78C3
; ---------------------------------------------------------------------------

loc_6FFE78A2:				; CODE XREF: sub_6FFE77F0+14Dj
					; sub_6FFE77F0+16Ej
		mov	ecx, [ebp+var_68]
		mov	edx, [ebp+var_54]
		mov	eax, [ebp+var_44]
		cmp	[ebp+var_7C], edx
		mov	[ebp+var_68], edx
		mov	[ecx], eax
		jz	loc_6FFE7963
		add	[ebp+var_5C], 4
		add	edx, 4
		mov	[ebp+var_54], edx

loc_6FFE78C3:				; CODE XREF: sub_6FFE77F0+B0j
		mov	dword ptr [esp], 0Ch ; size_t
		mov	[ebp+var_38], 7
		call	sub_6FFEAE70
		mov	edx, [ebp+var_5C]
		mov	[ebp+var_44], eax
		mov	ecx, [ebp+var_44]
		mov	edx, [edx]
		mov	eax, [edx]
		mov	[ebp+var_50], edx
		mov	[ecx], eax
		add	ecx, 4
		mov	[ebp+var_70], ecx
		mov	eax, [edx+4]
		mov	edx, [ebp+var_44]
		mov	[edx+4], eax
		lock inc dword ptr [eax+34h]
		setnz	dl
		mov	ecx, [ebp+var_44]
		mov	eax, [ecx+4]
		test	byte ptr [eax+44h], 2
		jnz	short loc_6FFE7924
		mov	eax, [eax+34h]
		cmp	eax, 1
		jz	short loc_6FFE7924
		mov	eax, [ebp+var_70]
		mov	[esp], eax
		mov	[ebp+var_38], 6
		call	sub_6FFE3B80

loc_6FFE7924:				; CODE XREF: sub_6FFE77F0+118j
					; sub_6FFE77F0+120j
		mov	edx, [ebp+var_50]
		mov	ecx, [ebp+var_44]
		mov	eax, [edx+8]
		mov	[ecx+8], eax
		lock inc dword ptr [eax]
		setnz	dl
		mov	eax, [ecx+8]
		test	byte ptr [eax+10h], 1
		jnz	loc_6FFE78A2
		mov	eax, [eax+4]
		mov	[esp+4], eax
		mov	eax, ecx
		add	eax, 8
		mov	[esp], eax
		mov	[ebp+var_38], 4
		call	sub_6FFE77F0
		jmp	loc_6FFE78A2
; ---------------------------------------------------------------------------

loc_6FFE7963:				; CODE XREF: sub_6FFE77F0+88j
					; sub_6FFE77F0+C3j
		mov	ecx, [ebp+var_B0]
		lock dec dword ptr [ecx]
		setnz	al
		test	al, al
		jz	short loc_6FFE7980
		lea	eax, [ebp+var_3C]
		mov	[esp], eax
		call	_Unwind_SjLj_Unregister
		leave
		retn
; ---------------------------------------------------------------------------

loc_6FFE7980:				; CODE XREF: sub_6FFE77F0+181j
		mov	eax, [ecx+0Ch]
		mov	edx, ecx
		add	edx, 14h
		lea	eax, [edx+eax*4]
		mov	[ebp+var_9C], eax
		mov	eax, [ecx+8]
		lea	eax, [edx+eax*4]
		cmp	[ebp+var_9C], eax
		mov	[ebp+var_B8], eax
		jz	loc_6FFE7D19
		mov	eax, ds:_ZN7QString4freeEPNS_4DataE
		mov	[ebp+var_AC], eax
		jmp	short loc_6FFE79F2
; ---------------------------------------------------------------------------

loc_6FFE79B6:				; CODE XREF: sub_6FFE77F0+226j
					; sub_6FFE77F0+48Ej
		mov	ecx, [ebp+var_98]
		mov	eax, [ecx+4]
		test	eax, eax
		jz	short loc_6FFE79D2
		lock dec dword ptr [eax+34h]
		setnz	dl
		test	dl, dl
		jz	loc_6FFE7C83

loc_6FFE79D2:				; CODE XREF: sub_6FFE77F0+1D1j
					; sub_6FFE77F0+524j
		mov	ecx, [ebp+var_98]
		mov	[esp], ecx
		call	sub_6FFEAE50

loc_6FFE79E0:				; CODE XREF: sub_6FFE77F0+219j
		mov	eax, [ebp+var_9C]
		cmp	[ebp+var_B8], eax
		jz	loc_6FFE7D19

loc_6FFE79F2:				; CODE XREF: sub_6FFE77F0+1C4j
		sub	[ebp+var_9C], 4
		mov	edx, [ebp+var_9C]
		mov	edx, [edx]
		test	edx, edx
		mov	[ebp+var_98], edx
		jz	short loc_6FFE79E0
		mov	eax, [edx+8]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jnz	short loc_6FFE79B6
		mov	ecx, [ebp+var_98]
		mov	ecx, [ecx+8]
		mov	eax, [ecx+0Ch]
		mov	edx, ecx
		add	edx, 14h
		mov	[ebp+var_B4], ecx
		lea	eax, [edx+eax*4]
		mov	[ebp+var_80], eax
		mov	eax, [ecx+8]
		lea	eax, [edx+eax*4]
		cmp	[ebp+var_80], eax
		mov	[ebp+var_A8], eax
		jnz	short loc_6FFE7A83
		jmp	loc_6FFE7C68
; ---------------------------------------------------------------------------
		align 10h

loc_6FFE7A50:				; CODE XREF: sub_6FFE77F0+2AEj
					; sub_6FFE77F0+3E6j
		mov	ecx, [ebp+var_78]
		mov	eax, [ecx+4]
		test	eax, eax
		jz	short loc_6FFE7A69
		lock dec dword ptr [eax+34h]
		setnz	dl
		test	dl, dl
		jz	loc_6FFE7BE0

loc_6FFE7A69:				; CODE XREF: sub_6FFE77F0+268j
					; sub_6FFE77F0+473j
		mov	edx, [ebp+var_78]
		mov	[esp], edx
		call	sub_6FFEAE50

loc_6FFE7A74:				; CODE XREF: sub_6FFE77F0+2A1j
		mov	ecx, [ebp+var_80]
		cmp	[ebp+var_A8], ecx
		jz	loc_6FFE7C68

loc_6FFE7A83:				; CODE XREF: sub_6FFE77F0+254j
		sub	[ebp+var_80], 4
		mov	eax, [ebp+var_80]
		mov	eax, [eax]
		test	eax, eax
		mov	[ebp+var_78], eax
		jz	short loc_6FFE7A74
		mov	eax, [eax+8]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jnz	short loc_6FFE7A50
		mov	ecx, [ebp+var_78]
		mov	ecx, [ecx+8]
		mov	eax, [ecx+0Ch]
		mov	edx, ecx
		add	edx, 14h
		mov	[ebp+var_A0], ecx
		lea	eax, [edx+eax*4]
		mov	[ebp+var_60], eax
		mov	eax, [ecx+8]
		lea	eax, [edx+eax*4]
		cmp	[ebp+var_60], eax
		mov	[ebp+var_8C], eax
		jnz	short loc_6FFE7B09
		jmp	loc_6FFE7BC0
; ---------------------------------------------------------------------------

loc_6FFE7AD0:				; CODE XREF: sub_6FFE77F0+334j
					; sub_6FFE77F0+3A8j
		mov	edx, [ebp+var_58]
		mov	ecx, [ebp+var_58]
		mov	eax, [edx+4]
		add	ecx, 4
		test	eax, eax
		jz	short loc_6FFE7AEF
		lock dec dword ptr [eax+34h]
		setnz	dl
		test	dl, dl
		jz	loc_6FFE7BA0

loc_6FFE7AEF:				; CODE XREF: sub_6FFE77F0+2EEj
					; sub_6FFE77F0+3C9j
		mov	ecx, [ebp+var_58]
		mov	[esp], ecx
		call	sub_6FFEAE50

loc_6FFE7AFA:				; CODE XREF: sub_6FFE77F0+327j
		mov	eax, [ebp+var_60]
		cmp	[ebp+var_8C], eax
		jz	loc_6FFE7BC0

loc_6FFE7B09:				; CODE XREF: sub_6FFE77F0+2D9j
		sub	[ebp+var_60], 4
		mov	eax, [ebp+var_60]
		mov	eax, [eax]
		test	eax, eax
		mov	[ebp+var_58], eax
		jz	short loc_6FFE7AFA
		mov	eax, [eax+8]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jnz	short loc_6FFE7AD0
		mov	ecx, [ebp+var_58]
		mov	ecx, [ecx+8]
		mov	eax, [ecx+0Ch]
		mov	edx, ecx
		add	edx, 14h
		mov	[ebp+var_84], ecx
		lea	eax, [edx+eax*4]
		mov	[ebp+var_48], eax
		mov	eax, [ecx+8]
		lea	eax, [edx+eax*4]
		cmp	[ebp+var_48], eax
		mov	[ebp+var_64], eax
		jz	short loc_6FFE7B82
		xchg	ax, ax

loc_6FFE7B50:				; CODE XREF: sub_6FFE77F0+390j
		sub	[ebp+var_48], 4
		mov	eax, [ebp+var_48]
		mov	eax, [eax]
		test	eax, eax
		mov	[ebp+var_4C], eax
		jz	short loc_6FFE7B7A
		mov	[esp], eax
		mov	[ebp+var_38], 1
		call	sub_6FFDFBB0
		mov	edx, [ebp+var_4C]
		mov	[esp], edx
		call	sub_6FFEAE50

loc_6FFE7B7A:				; CODE XREF: sub_6FFE77F0+36Ej
		mov	ecx, [ebp+var_48]
		cmp	[ebp+var_64], ecx
		jnz	short loc_6FFE7B50

loc_6FFE7B82:				; CODE XREF: sub_6FFE77F0+35Cj
		mov	eax, [ebp+var_84]
		mov	[esp], eax
		mov	[ebp+var_38], 1
		call	ds:_Z5qFreePv
		jmp	loc_6FFE7AD0
; ---------------------------------------------------------------------------
		align 10h

loc_6FFE7BA0:				; CODE XREF: sub_6FFE77F0+2F9j
		mov	edx, [ebp+var_58]
		mov	eax, [edx+4]
		mov	[esp], ecx
		mov	[esp+4], eax
		mov	[ebp+var_38], 2
		call	sub_6FFE4220
		jmp	loc_6FFE7AEF
; ---------------------------------------------------------------------------
		align 10h

loc_6FFE7BC0:				; CODE XREF: sub_6FFE77F0+2DBj
					; sub_6FFE77F0+313j
		mov	edx, [ebp+var_A0]
		mov	[esp], edx
		mov	[ebp+var_38], 2
		call	ds:_Z5qFreePv
		jmp	loc_6FFE7A50
; ---------------------------------------------------------------------------
		align 10h

loc_6FFE7BE0:				; CODE XREF: sub_6FFE77F0+273j
		mov	eax, [ecx+4]
		mov	edx, eax
		mov	[ebp+var_88], eax
		mov	eax, [eax+4]
		cmp	edx, eax
		jnz	short loc_6FFE7C17
		jmp	short loc_6FFE7C45
; ---------------------------------------------------------------------------

loc_6FFE7BF4:				; CODE XREF: sub_6FFE77F0+43Ej
					; sub_6FFE77F0+453j
		mov	eax, [ebp+var_74]
		add	eax, 8
		mov	[esp], eax
		mov	[ebp+var_38], 3
		call	ds:_ZN8QVariantD1Ev
		mov	ecx, [ebp+var_6C]
		cmp	[ebp+var_88], ecx
		jz	short loc_6FFE7C45
		mov	eax, ecx

loc_6FFE7C17:				; CODE XREF: sub_6FFE77F0+400j
		mov	ecx, [eax+4]
		lea	edx, [eax-1Ch]
		mov	[ebp+var_74], edx
		mov	edx, [eax-1Ch]
		mov	[ebp+var_6C], ecx
		lock dec dword ptr [edx]
		setnz	cl
		test	cl, cl
		jnz	short loc_6FFE7BF4
		mov	eax, [eax-1Ch]
		mov	[esp], eax
		mov	[ebp+var_38], 3
		call	[ebp+var_AC]
		jmp	short loc_6FFE7BF4
; ---------------------------------------------------------------------------

loc_6FFE7C45:				; CODE XREF: sub_6FFE77F0+402j
					; sub_6FFE77F0+423j
		mov	dword ptr [esp+4], 1Ch
		mov	eax, [ebp+var_88]
		mov	[esp], eax
		mov	[ebp+var_38], 3
		call	ds:_ZN8QMapData16continueFreeDataEi
		jmp	loc_6FFE7A69
; ---------------------------------------------------------------------------

loc_6FFE7C68:				; CODE XREF: sub_6FFE77F0+256j
					; sub_6FFE77F0+28Dj
		mov	eax, [ebp+var_B4]
		mov	[esp], eax
		mov	[ebp+var_38], 3
		call	ds:_Z5qFreePv
		jmp	loc_6FFE79B6
; ---------------------------------------------------------------------------

loc_6FFE7C83:				; CODE XREF: sub_6FFE77F0+1DCj
		mov	eax, [ecx+4]
		mov	edx, eax
		mov	[ebp+var_A4], eax
		mov	eax, [eax+4]
		cmp	edx, eax
		jz	short loc_6FFE7CF6
		mov	ecx, ds:_ZN8QVariantD1Ev
		mov	[ebp+var_40], ecx
		xchg	ax, ax

loc_6FFE7CA0:				; CODE XREF: sub_6FFE77F0+504j
		mov	edx, [eax+4]
		lea	ecx, [eax-1Ch]
		mov	[ebp+var_94], ecx
		mov	[ebp+var_90], edx
		mov	edx, [eax-1Ch]
		lock dec dword ptr [edx]
		setnz	cl
		test	cl, cl
		jnz	short loc_6FFE7CD2
		mov	eax, [eax-1Ch]
		mov	[esp], eax
		mov	[ebp+var_38], 0FFFFFFFFh
		call	ds:_ZN7QString4freeEPNS_4DataE

loc_6FFE7CD2:				; CODE XREF: sub_6FFE77F0+4CDj
		mov	eax, [ebp+var_94]
		add	eax, 8
		mov	[esp], eax
		mov	[ebp+var_38], 0FFFFFFFFh
		call	[ebp+var_40]
		mov	eax, [ebp+var_90]
		cmp	[ebp+var_A4], eax
		jnz	short loc_6FFE7CA0

loc_6FFE7CF6:				; CODE XREF: sub_6FFE77F0+4A3j
		mov	dword ptr [esp+4], 1Ch
		mov	edx, [ebp+var_A4]
		mov	[esp], edx
		mov	[ebp+var_38], 0FFFFFFFFh
		call	ds:_ZN8QMapData16continueFreeDataEi
		jmp	loc_6FFE79D2
; ---------------------------------------------------------------------------

loc_6FFE7D19:				; CODE XREF: sub_6FFE77F0+1B3j
					; sub_6FFE77F0+1FCj
		mov	edx, [ebp+var_B0]
		mov	[esp], edx
		mov	[ebp+var_38], 0FFFFFFFFh
		call	ds:_Z5qFreePv
		lea	eax, [ebp+var_3C]
		mov	[esp], eax
		call	_Unwind_SjLj_Unregister
		leave
		retn
sub_6FFE77F0	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn

sub_6FFE7D3C	proc near		; DATA XREF: sub_6FFE77F0+20o
		add	ebp, 8
		mov	eax, [ebp-38h]
		mov	edx, [ebp-34h]
		cmp	eax, 1
		mov	[ebp-0C8h], edx
		jz	short loc_6FFE7D97
		cmp	eax, 2
		jz	short loc_6FFE7DAC
		cmp	eax, 3
		jz	loc_6FFE7DFA
		cmp	eax, 4
		jz	loc_6FFE7E62
		cmp	eax, 5
		jz	loc_6FFE7E0C
		cmp	eax, 6
		jz	loc_6FFE7E17
		cmp	eax, 7
		lea	esi, [esi+0]
		jz	short loc_6FFE7DD9
		mov	eax, [ebp-58h]
		add	eax, 4
		mov	[esp+0], eax
		mov	dword ptr [ebp-38h], 0
		call	sub_6FFE4290

loc_6FFE7D97:				; CODE XREF: sub_6FFE7D3C+12j
		mov	eax, [ebp-78h]
		add	eax, 4
		mov	[esp+0], eax
		mov	dword ptr [ebp-38h], 0
		call	sub_6FFE4290

loc_6FFE7DAC:				; CODE XREF: sub_6FFE7D3C+17j
		mov	eax, [ebp-98h]
		add	eax, 4
		mov	[esp+0], eax
		mov	dword ptr [ebp-38h], 0
		call	sub_6FFE4290
		mov	edx, [ebp-0C8h]
		mov	[esp+0], edx
		mov	dword ptr [ebp-38h], 0FFFFFFFFh
		call	_Unwind_SjLj_Resume
; ---------------------------------------------------------------------------

loc_6FFE7DD9:				; CODE XREF: sub_6FFE7D3C+44j
		mov	dword ptr [ebp-38h], 0
		call	sub_6FFEBBF0
		mov	edx, [ebp-0C8h]
		mov	[esp+0], edx
		mov	dword ptr [ebp-38h], 0FFFFFFFFh
		call	_Unwind_SjLj_Resume
; ---------------------------------------------------------------------------

loc_6FFE7DFA:				; CODE XREF: sub_6FFE7D3C+1Cj
		mov	eax, [ebp-70h]
		mov	[esp+0], eax
		mov	dword ptr [ebp-38h], 0
		call	sub_6FFE4290

loc_6FFE7E0C:				; CODE XREF: sub_6FFE7D3C+2Ej
		mov	edx, [ebp-44h]
		mov	[esp+0], edx
		call	sub_6FFEAE50

loc_6FFE7E17:				; CODE XREF: sub_6FFE7D3C+37j
		mov	ecx, [ebp-0C8h]
		mov	[esp+0], ecx
		call	sub_6FFEB920

loc_6FFE7E25:				; CODE XREF: sub_6FFE7D3C+105j
					; sub_6FFE7D3C+124j
		mov	ecx, [ebp-68h]
		cmp	[ebp-0BCh], ecx
		jz	short loc_6FFE7EA1
		sub	dword ptr [ebp-68h], 4
		mov	eax, [ebp-68h]
		mov	eax, [eax]
		test	eax, eax
		mov	[ebp-0CCh], eax
		jz	short loc_6FFE7E25
		mov	[esp+0], eax
		mov	dword ptr [ebp-38h], 5
		call	sub_6FFDFBB0
		mov	edx, [ebp-0CCh]
		mov	[esp+0], edx
		call	sub_6FFEAE50
		jmp	short loc_6FFE7E25
; ---------------------------------------------------------------------------

loc_6FFE7E62:				; CODE XREF: sub_6FFE7D3C+25j
		mov	dword ptr [ebp-38h], 0
		call	sub_6FFEBBF0
		mov	eax, [ebp-0C8h]
		mov	[esp+0], eax
		call	sub_6FFEB920
		mov	edx, [ebp+8]
		mov	eax, [edx]
		mov	[esp+0], eax
		mov	dword ptr [ebp-38h], 8
		call	ds:_Z5qFreePv
		mov	eax, [ebp-0B0h]
		mov	ecx, [ebp+8]
		mov	[ecx], eax
		call	sub_6FFEC130
; ---------------------------------------------------------------------------

loc_6FFE7EA1:				; CODE XREF: sub_6FFE7D3C+F2j
		mov	dword ptr [ebp-38h], 5
		call	sub_6FFEC130
sub_6FFE7D3C	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_6FFE7EB0	proc near		; CODE XREF: sub_6FFE86F0+2F4p

var_5C		= dword	ptr -5Ch
var_58		= dword	ptr -58h
var_54		= dword	ptr -54h
var_50		= dword	ptr -50h
var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_3C		= byte ptr -3Ch
var_38		= dword	ptr -38h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_8		= byte ptr -8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		sub	esp, 78h
		lea	eax, [ebp+var_8]
		mov	[ebp+var_1C], eax
		lea	eax, [ebp+var_3C]
		mov	[ebp+var_24], offset sub_6FFEC1F0
		mov	[ebp+var_20], offset word_6FFECA26
		mov	[ebp+var_18], offset sub_6FFE803D
		mov	[ebp+var_14], esp
		mov	[esp], eax
		call	_Unwind_SjLj_Register
		mov	edx, [ebp+arg_4]
		cmp	[ebp+arg_8], edx
		jnz	short loc_6FFE7F20
		jmp	loc_6FFE8030
; ---------------------------------------------------------------------------
		align 10h

loc_6FFE7EF0:				; CODE XREF: sub_6FFE7EB0+8Bj
					; sub_6FFE7EB0+F5j
		mov	edx, [ebp+var_50]
		mov	eax, [edx+4]
		test	eax, eax
		jz	short loc_6FFE7F09
		lock dec dword ptr [eax+34h]
		setnz	dl
		test	dl, dl
		jz	loc_6FFE7FB0

loc_6FFE7F09:				; CODE XREF: sub_6FFE7EB0+48j
					; sub_6FFE7EB0+175j
		mov	ecx, [ebp+var_50]
		mov	[esp], ecx
		call	sub_6FFEAE50

loc_6FFE7F14:				; CODE XREF: sub_6FFE7EB0+7Ej
		mov	eax, [ebp+arg_8]
		cmp	[ebp+arg_4], eax
		jz	loc_6FFE8030

loc_6FFE7F20:				; CODE XREF: sub_6FFE7EB0+35j
		sub	[ebp+arg_8], 4
		mov	ecx, [ebp+arg_8]
		mov	ecx, [ecx]
		test	ecx, ecx
		mov	[ebp+var_50], ecx
		jz	short loc_6FFE7F14
		mov	eax, [ecx+8]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jnz	short loc_6FFE7EF0
		mov	eax, [ecx+8]
		mov	[ebp+var_5C], eax
		mov	ecx, [ebp+var_5C]
		add	eax, 14h
		mov	edx, [ecx+0Ch]
		lea	edx, [eax+edx*4]
		mov	[ebp+var_40], edx
		mov	edx, [ecx+8]
		lea	edx, [eax+edx*4]
		cmp	[ebp+var_40], edx
		mov	[ebp+var_58], edx
		jz	short loc_6FFE7F92

loc_6FFE7F60:				; CODE XREF: sub_6FFE7EB0+E0j
		sub	[ebp+var_40], 4
		mov	eax, [ebp+var_40]
		mov	eax, [eax]
		test	eax, eax
		mov	[ebp+var_44], eax
		jz	short loc_6FFE7F8A
		mov	[esp], eax
		mov	[ebp+var_38], 1
		call	sub_6FFDFBB0
		mov	edx, [ebp+var_44]
		mov	[esp], edx
		call	sub_6FFEAE50

loc_6FFE7F8A:				; CODE XREF: sub_6FFE7EB0+BEj
		mov	ecx, [ebp+var_40]
		cmp	[ebp+var_58], ecx
		jnz	short loc_6FFE7F60

loc_6FFE7F92:				; CODE XREF: sub_6FFE7EB0+AEj
		mov	eax, [ebp+var_5C]
		mov	[ebp+var_38], 1
		mov	[esp], eax
		call	ds:_Z5qFreePv
		jmp	loc_6FFE7EF0
; ---------------------------------------------------------------------------
		align 10h

loc_6FFE7FB0:				; CODE XREF: sub_6FFE7EB0+53j
		mov	ecx, [ebp+var_50]
		mov	ecx, [ecx+4]
		mov	eax, [ecx+4]
		mov	[ebp+var_54], ecx
		cmp	ecx, eax
		jz	short loc_6FFE800A

loc_6FFE7FC0:				; CODE XREF: sub_6FFE7EB0+158j
		mov	edx, [eax+4]
		lea	ecx, [eax-1Ch]
		mov	[ebp+var_4C], ecx
		mov	[ebp+var_48], edx
		mov	edx, [eax-1Ch]
		lock dec dword ptr [edx]
		setnz	cl
		test	cl, cl
		jnz	short loc_6FFE7FEC
		mov	eax, [eax-1Ch]
		mov	[ebp+var_38], 0FFFFFFFFh
		mov	[esp], eax
		call	ds:_ZN7QString4freeEPNS_4DataE

loc_6FFE7FEC:				; CODE XREF: sub_6FFE7EB0+127j
		mov	eax, [ebp+var_4C]
		mov	[ebp+var_38], 0FFFFFFFFh
		add	eax, 8
		mov	[esp], eax
		call	ds:_ZN8QVariantD1Ev
		mov	eax, [ebp+var_48]
		cmp	[ebp+var_54], eax
		jnz	short loc_6FFE7FC0

loc_6FFE800A:				; CODE XREF: sub_6FFE7EB0+10Ej
		mov	edx, [ebp+var_54]
		mov	dword ptr [esp+4], 1Ch
		mov	[ebp+var_38], 0FFFFFFFFh
		mov	[esp], edx
		call	ds:_ZN8QMapData16continueFreeDataEi
		jmp	loc_6FFE7F09
; ---------------------------------------------------------------------------
		align 10h

loc_6FFE8030:				; CODE XREF: sub_6FFE7EB0+37j
					; sub_6FFE7EB0+6Aj
		lea	eax, [ebp+var_3C]
		mov	[esp], eax
		call	_Unwind_SjLj_Unregister
		leave
		retn
sub_6FFE7EB0	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn

sub_6FFE803D	proc near		; DATA XREF: sub_6FFE7EB0+1Do
		add	ebp, 8
		mov	eax, [ebp-50h]
		mov	edx, [ebp-34h]
		mov	dword ptr [ebp-38h], 0
		add	eax, 4
		mov	[ebp-60h], edx
		mov	[esp+0], eax
		call	sub_6FFE4290
		mov	ecx, [ebp-60h]
		mov	dword ptr [ebp-38h], 0FFFFFFFFh
		mov	[esp+0], ecx
		call	_Unwind_SjLj_Resume
sub_6FFE803D	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_6FFE8070	proc near		; CODE XREF: _ZN16DBusMenuImporter21slotGetLayoutFinishedEP23QDBusPendingCallWatcher+9CDp
					; sub_6FFD295B+1B0p ...

var_64		= dword	ptr -64h
var_60		= dword	ptr -60h
var_5C		= dword	ptr -5Ch
var_58		= dword	ptr -58h
var_54		= dword	ptr -54h
var_50		= dword	ptr -50h
var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_3C		= byte ptr -3Ch
var_38		= dword	ptr -38h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_8		= byte ptr -8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 78h
		lea	eax, [ebp+var_8]
		mov	[ebp+var_1C], eax
		lea	eax, [ebp+var_3C]
		mov	[esp], eax
		mov	[ebp+var_24], offset sub_6FFEC1F0
		mov	[ebp+var_20], offset dword_6FFECA2C
		mov	[ebp+var_18], offset sub_6FFE8220
		mov	[ebp+var_14], esp
		call	_Unwind_SjLj_Register
		mov	ecx, [ebp+arg_4]
		mov	eax, [ebp+arg_4]
		mov	edx, [ecx+0Ch]
		add	eax, 14h
		lea	edx, [eax+edx*4]
		mov	[ebp+var_54], edx
		mov	edx, [ecx+8]
		lea	edx, [eax+edx*4]
		cmp	[ebp+var_54], edx
		mov	[ebp+var_64], edx
		jnz	short loc_6FFE80F4
		jmp	loc_6FFE8200
; ---------------------------------------------------------------------------

loc_6FFE80C4:				; CODE XREF: sub_6FFE8070+9Fj
					; sub_6FFE8070+10Bj
		mov	edx, [ebp+var_50]
		mov	eax, [edx+4]
		test	eax, eax
		jz	short loc_6FFE80DD
		lock dec dword ptr [eax+34h]
		setnz	dl
		test	dl, dl
		jz	loc_6FFE8180

loc_6FFE80DD:				; CODE XREF: sub_6FFE8070+5Cj
					; sub_6FFE8070+185j
		mov	ecx, [ebp+var_50]
		mov	[esp], ecx
		call	sub_6FFEAE50

loc_6FFE80E8:				; CODE XREF: sub_6FFE8070+92j
		mov	eax, [ebp+var_54]
		cmp	[ebp+var_64], eax
		jz	loc_6FFE8200

loc_6FFE80F4:				; CODE XREF: sub_6FFE8070+4Dj
		sub	[ebp+var_54], 4
		mov	eax, [ebp+var_54]
		mov	eax, [eax]
		test	eax, eax
		mov	[ebp+var_50], eax
		jz	short loc_6FFE80E8
		mov	eax, [eax+8]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jnz	short loc_6FFE80C4
		mov	ecx, [ebp+var_50]
		mov	ecx, [ecx+8]
		mov	edx, [ecx+0Ch]
		mov	eax, ecx
		add	eax, 14h
		mov	[ebp+var_60], ecx
		lea	edx, [eax+edx*4]
		mov	[ebp+var_40], edx
		mov	edx, [ecx+8]
		lea	edx, [eax+edx*4]
		cmp	[ebp+var_40], edx
		mov	[ebp+var_5C], edx
		jz	short loc_6FFE8168

loc_6FFE8136:				; CODE XREF: sub_6FFE8070+F6j
		sub	[ebp+var_40], 4
		mov	eax, [ebp+var_40]
		mov	eax, [eax]
		test	eax, eax
		mov	[ebp+var_44], eax
		jz	short loc_6FFE8160
		mov	[esp], eax
		mov	[ebp+var_38], 1
		call	sub_6FFDFBB0
		mov	edx, [ebp+var_44]
		mov	[esp], edx
		call	sub_6FFEAE50

loc_6FFE8160:				; CODE XREF: sub_6FFE8070+D4j
		mov	ecx, [ebp+var_40]
		cmp	[ebp+var_5C], ecx
		jnz	short loc_6FFE8136

loc_6FFE8168:				; CODE XREF: sub_6FFE8070+C4j
		mov	eax, [ebp+var_60]
		mov	[ebp+var_38], 1
		mov	[esp], eax
		call	ds:_Z5qFreePv
		jmp	loc_6FFE80C4
; ---------------------------------------------------------------------------

loc_6FFE8180:				; CODE XREF: sub_6FFE8070+67j
		mov	ecx, [ebp+var_50]
		mov	ecx, [ecx+4]
		mov	eax, [ecx+4]
		mov	[ebp+var_58], ecx
		cmp	ecx, eax
		jz	short loc_6FFE81DA

loc_6FFE8190:				; CODE XREF: sub_6FFE8070+168j
		mov	edx, [eax+4]
		lea	ecx, [eax-1Ch]
		mov	[ebp+var_4C], ecx
		mov	[ebp+var_48], edx
		mov	edx, [eax-1Ch]
		lock dec dword ptr [edx]
		setnz	cl
		test	cl, cl
		jnz	short loc_6FFE81BC
		mov	eax, [eax-1Ch]
		mov	[ebp+var_38], 0FFFFFFFFh
		mov	[esp], eax
		call	ds:_ZN7QString4freeEPNS_4DataE

loc_6FFE81BC:				; CODE XREF: sub_6FFE8070+137j
		mov	eax, [ebp+var_4C]
		mov	[ebp+var_38], 0FFFFFFFFh
		add	eax, 8
		mov	[esp], eax
		call	ds:_ZN8QVariantD1Ev
		mov	eax, [ebp+var_48]
		cmp	[ebp+var_58], eax
		jnz	short loc_6FFE8190

loc_6FFE81DA:				; CODE XREF: sub_6FFE8070+11Ej
		mov	edx, [ebp+var_58]
		mov	dword ptr [esp+4], 1Ch
		mov	[ebp+var_38], 0FFFFFFFFh
		mov	[esp], edx
		call	ds:_ZN8QMapData16continueFreeDataEi
		jmp	loc_6FFE80DD
; ---------------------------------------------------------------------------
		align 10h

loc_6FFE8200:				; CODE XREF: sub_6FFE8070+4Fj
					; sub_6FFE8070+7Ej
		mov	edx, [ebp+arg_4]
		mov	[ebp+var_38], 0FFFFFFFFh
		mov	[esp], edx
		call	ds:_Z5qFreePv
		lea	eax, [ebp+var_3C]
		mov	[esp], eax
		call	_Unwind_SjLj_Unregister
		leave
		retn
sub_6FFE8070	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn

sub_6FFE8220	proc near		; DATA XREF: sub_6FFE8070+20o
		add	ebp, 8
		mov	eax, [ebp-50h]
		mov	edx, [ebp-34h]
		mov	dword ptr [ebp-38h], 0
		add	eax, 4
		mov	[ebp-68h], edx
		mov	[esp+0], eax
		call	sub_6FFE4290
		mov	ecx, [ebp-68h]
		mov	dword ptr [ebp-38h], 0FFFFFFFFh
		mov	[esp+0], ecx
		call	_Unwind_SjLj_Resume
sub_6FFE8220	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_6FFE8250	proc near		; CODE XREF: sub_6FFC78B0+53Bp
					; _ZrsRK13QDBusArgumentR18DBusMenuLayoutItem+18Cp ...

var_BC		= dword	ptr -0BCh
var_B8		= dword	ptr -0B8h
var_B4		= dword	ptr -0B4h
var_B0		= dword	ptr -0B0h
var_AC		= dword	ptr -0ACh
var_A8		= dword	ptr -0A8h
var_A4		= dword	ptr -0A4h
var_A0		= dword	ptr -0A0h
var_9C		= dword	ptr -9Ch
var_98		= dword	ptr -98h
var_94		= dword	ptr -94h
var_90		= dword	ptr -90h
var_8C		= dword	ptr -8Ch
var_88		= dword	ptr -88h
var_84		= dword	ptr -84h
var_80		= dword	ptr -80h
var_7C		= dword	ptr -7Ch
var_78		= dword	ptr -78h
var_74		= dword	ptr -74h
var_70		= dword	ptr -70h
var_6C		= dword	ptr -6Ch
var_68		= dword	ptr -68h
var_64		= dword	ptr -64h
var_60		= dword	ptr -60h
var_5C		= byte ptr -5Ch
var_58		= dword	ptr -58h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_1C		= dword	ptr -1Ch
var_18		= byte ptr -18h
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		lea	eax, [ebp+var_18]
		sub	esp, 0CCh
		mov	[ebp+var_3C], eax
		lea	eax, [ebp+var_5C]
		mov	[esp], eax
		mov	[ebp+var_44], offset sub_6FFEC1F0
		mov	[ebp+var_40], offset dword_6FFECB00
		mov	[ebp+var_38], offset sub_6FFE86F0
		mov	[ebp+var_34], esp
		call	_Unwind_SjLj_Register
		mov	edx, [ebp+arg_0]
		mov	eax, [edx]
		mov	eax, [eax]
		cmp	eax, 1
		jz	loc_6FFE8619
		mov	ecx, edx
		mov	[ebp+var_1C], 7FFFFFFFh
		mov	edx, [edx]
		mov	eax, [edx+8]
		mov	[esp], ecx
		mov	dword ptr [esp+8], 1
		mov	[ebp+var_58], 0FFFFFFFFh
		lea	eax, [edx+eax*4+14h]
		mov	[ebp+var_AC], eax
		lea	eax, [ebp+var_1C]
		mov	[esp+4], eax
		call	ds:_ZN9QListData11detach_growEPii
		mov	edi, [ebp+arg_0]
		mov	[ebp+var_9C], eax
		mov	edx, [edi]
		mov	ebx, [edx+8]
		lea	eax, [edx+ebx*4+10h]
		lea	ecx, [eax+4]
		mov	[ebp+var_A4], ecx
		mov	ecx, [ebp+var_1C]
		mov	edi, [ebp+var_A4]
		lea	esi, ds:0[ecx*4]
		add	edi, esi
		cmp	[ebp+var_A4], edi
		mov	[ebp+var_94], edi
		jz	loc_6FFE8402
		add	eax, 8
		mov	edx, [ebp+var_AC]
		mov	[ebp+var_7C], eax
		mov	eax, [ebp+var_A4]
		mov	[ebp+var_78], edx
		mov	[ebp+var_74], eax
		jmp	short loc_6FFE8344
; ---------------------------------------------------------------------------

loc_6FFE8325:				; CODE XREF: sub_6FFE8250+171j
					; sub_6FFE8250+195j
		mov	edx, [ebp+var_74]
		mov	edi, [ebp+var_7C]
		cmp	[ebp+var_94], edi
		mov	[edx], ecx
		mov	[ebp+var_74], edi
		jz	loc_6FFE83F0
		add	[ebp+var_78], 4
		add	[ebp+var_7C], 4

loc_6FFE8344:				; CODE XREF: sub_6FFE8250+D3j
		mov	dword ptr [esp], 0Ch ; size_t
		mov	[ebp+var_58], 0Ch
		call	sub_6FFEAE70
		mov	ecx, [ebp+var_78]
		mov	[ebp+var_64], eax
		mov	edi, [ebp+var_64]
		mov	edx, [ebp+var_64]
		mov	ecx, [ecx]
		mov	eax, [ecx]
		mov	[ebp+var_6C], ecx
		mov	[edi], eax
		add	edi, 4
		mov	[ebp+var_8C], edi
		mov	eax, [ecx+4]
		mov	[edx+4], eax
		lock inc dword ptr [eax+34h]
		setnz	dl
		mov	ecx, [ebp+var_64]
		mov	eax, [ecx+4]
		test	byte ptr [eax+44h], 2
		jnz	short loc_6FFE83A5
		mov	eax, [eax+34h]
		cmp	eax, 1
		jz	short loc_6FFE83A5
		mov	[esp], edi
		mov	[ebp+var_58], 0Bh
		call	sub_6FFE3B80

loc_6FFE83A5:				; CODE XREF: sub_6FFE8250+13Cj
					; sub_6FFE8250+144j
		mov	edi, [ebp+var_6C]
		mov	edx, [ebp+var_64]
		mov	eax, [edi+8]
		mov	[edx+8], eax
		lock inc dword ptr [eax]
		setnz	dl
		mov	ecx, [ebp+var_64]
		mov	eax, [ecx+8]
		test	byte ptr [eax+10h], 1
		jnz	loc_6FFE8325
		mov	eax, [eax+4]
		mov	[ebp+var_58], 9
		mov	[esp+4], eax
		mov	eax, ecx
		add	eax, 8
		mov	[esp], eax
		call	sub_6FFE77F0
		mov	ecx, [ebp+var_64]
		jmp	loc_6FFE8325
; ---------------------------------------------------------------------------
		align 10h

loc_6FFE83F0:				; CODE XREF: sub_6FFE8250+E6j
		mov	eax, [ebp+arg_0]
		mov	ecx, [ebp+var_1C]
		mov	edx, [eax]
		lea	esi, ds:0[ecx*4]
		mov	ebx, [edx+8]

loc_6FFE8402:				; CODE XREF: sub_6FFE8250+B5j
		mov	eax, [edx+0Ch]
		lea	eax, [edx+eax*4+14h]
		mov	[ebp+var_90], eax
		lea	eax, [edx+ebx*4+14h]
		lea	eax, [eax+ecx*4+4]
		cmp	[ebp+var_90], eax
		mov	[ebp+var_A0], eax
		jz	loc_6FFE8511
		add	esi, [ebp+var_AC]
		mov	ecx, eax
		add	eax, 4
		mov	[ebp+var_70], eax
		mov	[ebp+var_80], esi
		mov	[ebp+var_84], ecx
		jmp	short loc_6FFE846E
; ---------------------------------------------------------------------------

loc_6FFE8442:				; CODE XREF: sub_6FFE8250+29Bj
					; sub_6FFE8250+2BCj
		mov	edi, [ebp+var_70]
		mov	eax, [ebp+var_90]
		mov	edx, [ebp+var_84]
		mov	ecx, [ebp+var_60]
		mov	[ebp+var_84], edi
		cmp	edi, eax
		mov	[edx], ecx
		jz	loc_6FFE8511
		add	[ebp+var_80], 4
		add	edi, 4
		mov	[ebp+var_70], edi

loc_6FFE846E:				; CODE XREF: sub_6FFE8250+1F0j
		mov	dword ptr [esp], 0Ch ; size_t
		mov	[ebp+var_58], 8
		call	sub_6FFEAE70
		mov	edi, [ebp+var_80]
		mov	[ebp+var_60], eax
		mov	edx, [ebp+var_60]
		mov	ecx, [ebp+var_60]
		mov	edi, [edi]
		mov	eax, [edi]
		mov	[ebp+var_68], edi
		mov	[edx], eax
		add	edx, 4
		mov	[ebp+var_88], edx
		mov	eax, [edi+4]
		mov	[ecx+4], eax
		lock inc dword ptr [eax+34h]
		setnz	dl
		mov	eax, [ecx+4]
		test	byte ptr [eax+44h], 2
		jnz	short loc_6FFE84D2
		mov	eax, [eax+34h]
		cmp	eax, 1
		jz	short loc_6FFE84D2
		mov	edi, [ebp+var_88]
		mov	[ebp+var_58], 7
		mov	[esp], edi
		call	sub_6FFE3B80

loc_6FFE84D2:				; CODE XREF: sub_6FFE8250+263j
					; sub_6FFE8250+26Bj
		mov	edx, [ebp+var_68]
		mov	ecx, [ebp+var_60]
		mov	eax, [edx+8]
		mov	[ecx+8], eax
		lock inc dword ptr [eax]
		setnz	dl
		mov	eax, [ecx+8]
		test	byte ptr [eax+10h], 1
		jnz	loc_6FFE8442
		mov	eax, [eax+4]
		mov	[ebp+var_58], 5
		mov	[esp+4], eax
		mov	eax, ecx
		add	eax, 8
		mov	[esp], eax
		call	sub_6FFE77F0
		jmp	loc_6FFE8442
; ---------------------------------------------------------------------------

loc_6FFE8511:				; CODE XREF: sub_6FFE8250+1D3j
					; sub_6FFE8250+20Ej
		mov	ecx, [ebp+var_9C]
		lock dec dword ptr [ecx]
		setnz	al
		test	al, al
		jz	loc_6FFE85E1

loc_6FFE8525:				; CODE XREF: sub_6FFE8250+3A7j
		mov	eax, [ebp+arg_0]
		mov	edx, [eax]
		mov	eax, [edx+8]
		mov	dword ptr [esp], 0Ch ; size_t
		mov	[ebp+var_58], 12h
		lea	edx, [edx+eax*4+14h]
		mov	eax, [ebp+var_1C]
		lea	eax, [edx+eax*4]
		mov	[ebp+var_B0], eax
		call	sub_6FFEAE70
		mov	edx, [ebp+arg_4]
		mov	[ebp+var_98], eax
		mov	ecx, [ebp+var_98]
		mov	edi, [ebp+var_98]
		mov	eax, [edx]
		mov	[ecx], eax
		add	ecx, 4
		mov	[ebp+var_B4], ecx
		mov	eax, [edx+4]
		mov	[edi+4], eax
		lock inc dword ptr [eax+34h]
		setnz	dl
		mov	eax, [edi+4]
		test	byte ptr [eax+44h], 2
		jnz	short loc_6FFE859F
		mov	eax, [eax+34h]
		cmp	eax, 1
		jz	short loc_6FFE859F
		mov	[esp], ecx
		mov	[ebp+var_58], 4
		call	sub_6FFE3B80

loc_6FFE859F:				; CODE XREF: sub_6FFE8250+336j
					; sub_6FFE8250+33Ej
		mov	edx, [ebp+arg_4]
		mov	ecx, [ebp+var_98]
		mov	eax, [edx+8]
		mov	[ecx+8], eax
		lock inc dword ptr [eax]
		setnz	dl
		mov	eax, [ecx+8]
		test	byte ptr [eax+10h], 1
		jz	short loc_6FFE85FC

loc_6FFE85BD:				; CODE XREF: sub_6FFE8250+3C7j
		mov	ecx, [ebp+var_98]
		mov	edx, [ebp+var_B0]
		mov	[edx], ecx

loc_6FFE85CB:				; CODE XREF: sub_6FFE8250+46Dj
					; sub_6FFE8250+49Bj
		lea	eax, [ebp+var_5C]
		mov	[esp], eax
		call	_Unwind_SjLj_Unregister
		add	esp, 0CCh
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_6FFE85E1:				; CODE XREF: sub_6FFE8250+2CFj
		mov	edi, [ebp+arg_0]
		mov	[esp+4], ecx
		mov	[ebp+var_58], 0FFFFFFFFh
		mov	[esp], edi
		call	sub_6FFE8070
		jmp	loc_6FFE8525
; ---------------------------------------------------------------------------

loc_6FFE85FC:				; CODE XREF: sub_6FFE8250+36Bj
		mov	eax, [eax+4]
		mov	[ebp+var_58], 3
		mov	[esp+4], eax
		mov	eax, ecx
		add	eax, 8
		mov	[esp], eax
		call	sub_6FFE77F0
		jmp	short loc_6FFE85BD
; ---------------------------------------------------------------------------

loc_6FFE8619:				; CODE XREF: sub_6FFE8250+3Fj
		mov	[esp], edx
		mov	[ebp+var_58], 0FFFFFFFFh
		call	ds:_ZN9QListData6appendEv
		mov	dword ptr [esp], 0Ch ; size_t
		mov	[ebp+var_58], 10h
		mov	[ebp+var_B8], eax
		call	sub_6FFEAE70
		mov	edx, [ebp+arg_4]
		mov	[ebp+var_A8], eax
		mov	ecx, [ebp+var_A8]
		mov	edi, [ebp+var_A8]
		mov	eax, [edx]
		mov	[ecx], eax
		add	ecx, 4
		mov	[ebp+var_BC], ecx
		mov	eax, [edx+4]
		mov	[edi+4], eax
		lock inc dword ptr [eax+34h]
		setnz	dl
		mov	eax, [edi+4]
		test	byte ptr [eax+44h], 2
		jnz	short loc_6FFE8691
		mov	eax, [eax+34h]
		cmp	eax, 1
		jz	short loc_6FFE8691
		mov	[esp], ecx
		mov	[ebp+var_58], 2
		call	sub_6FFE3B80

loc_6FFE8691:				; CODE XREF: sub_6FFE8250+428j
					; sub_6FFE8250+430j
		mov	edx, [ebp+arg_4]
		mov	ecx, [ebp+var_A8]
		mov	eax, [edx+8]
		mov	[ecx+8], eax
		lock inc dword ptr [eax]
		setnz	dl
		mov	eax, [ecx+8]
		test	byte ptr [eax+10h], 1
		jz	short loc_6FFE86C2
		mov	edi, [ebp+var_A8]
		mov	ecx, [ebp+var_B8]
		mov	[ecx], edi
		jmp	loc_6FFE85CB
; ---------------------------------------------------------------------------

loc_6FFE86C2:				; CODE XREF: sub_6FFE8250+45Dj
		mov	eax, [eax+4]
		mov	[ebp+var_58], 1
		mov	[esp+4], eax
		mov	eax, ecx
		add	eax, 8
		mov	[esp], eax
		call	sub_6FFE77F0
		mov	edi, [ebp+var_A8]
		mov	ecx, [ebp+var_B8]
		mov	[ecx], edi
		jmp	loc_6FFE85CB
sub_6FFE8250	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn

sub_6FFE86F0	proc near		; DATA XREF: sub_6FFE8250+26o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		add	ebp, 18h
		mov	eax, [ebp-58h]
		mov	edi, [ebp-54h]
		cmp	eax, 1
		mov	[ebp-0C0h], edi
		jz	loc_6FFE87B7
		cmp	eax, 2
		jz	loc_6FFE87E8
		cmp	eax, 3
		jz	loc_6FFE87FD
		cmp	eax, 4
		lea	esi, [esi+0]
		jz	loc_6FFE8926
		cmp	eax, 5
		jz	loc_6FFE89A6
		cmp	eax, 6
		jz	loc_6FFE893B
		cmp	eax, 7
		nop
		lea	esi, [esi+0]
		jz	loc_6FFE8946
		cmp	eax, 8
		jz	loc_6FFE8870
		cmp	eax, 9
		jz	loc_6FFE88E7
		cmp	eax, 0Ah
		nop
		lea	esi, [esi+0]
		jz	loc_6FFE8885
		cmp	eax, 0Bh
		jz	loc_6FFE8890
		cmp	eax, 0Ch
		jz	loc_6FFE884F
		cmp	eax, 0Dh
		nop
		lea	esi, [esi+0]
		jz	loc_6FFE884F
		cmp	eax, 0Eh
		jz	loc_6FFE882E
		cmp	eax, 0Fh
		jz	short loc_6FFE87C5
		cmp	eax, 10h
		jz	loc_6FFE882E
		cmp	eax, 11h
		jz	short loc_6FFE880B
		mov	eax, [ebp-0BCh]
		mov	dword ptr [ebp-58h], 0
		mov	[esp+0], eax
		call	sub_6FFE4290

loc_6FFE87B7:				; CODE XREF: sub_6FFE86F0+12j
		mov	edx, [ebp-0A8h]
		mov	[esp+0], edx
		call	sub_6FFEAE50

loc_6FFE87C5:				; CODE XREF: sub_6FFE86F0+A2j
		mov	eax, [ebp-0C0h]
		mov	[esp+0], eax
		call	sub_6FFEB920
		mov	edx, [ebp+8]
		mov	eax, [edx]
		sub	dword ptr [eax+0Ch], 1
		mov	dword ptr [ebp-58h], 0Fh
		call	sub_6FFEC130
; ---------------------------------------------------------------------------

loc_6FFE87E8:				; CODE XREF: sub_6FFE86F0+1Bj
		mov	edi, [ebp-0B4h]
		mov	dword ptr [ebp-58h], 0
		mov	[esp+0], edi
		call	sub_6FFE4290

loc_6FFE87FD:				; CODE XREF: sub_6FFE86F0+24j
		mov	eax, [ebp-98h]
		mov	[esp+0], eax
		call	sub_6FFEAE50

loc_6FFE880B:				; CODE XREF: sub_6FFE86F0+B0j
		mov	edi, [ebp-0C0h]
		mov	[esp+0], edi
		call	sub_6FFEB920
		mov	edx, [ebp+8]
		mov	eax, [edx]
		sub	dword ptr [eax+0Ch], 1
		mov	dword ptr [ebp-58h], 11h
		call	sub_6FFEC130
; ---------------------------------------------------------------------------

loc_6FFE882E:				; CODE XREF: sub_6FFE86F0+99j
					; sub_6FFE86F0+A7j
		mov	dword ptr [ebp-58h], 0
		call	sub_6FFEBBF0
		mov	ecx, [ebp-0C0h]
		mov	dword ptr [ebp-58h], 0FFFFFFFFh
		mov	[esp+0], ecx
		call	_Unwind_SjLj_Resume
; ---------------------------------------------------------------------------

loc_6FFE884F:				; CODE XREF: sub_6FFE86F0+82j
					; sub_6FFE86F0+90j
		mov	dword ptr [ebp-58h], 0
		call	sub_6FFEBBF0
		mov	edx, [ebp-0C0h]
		mov	dword ptr [ebp-58h], 0FFFFFFFFh
		mov	[esp+0], edx
		call	_Unwind_SjLj_Resume
; ---------------------------------------------------------------------------

loc_6FFE8870:				; CODE XREF: sub_6FFE86F0+59j
		mov	edi, [ebp-8Ch]
		mov	dword ptr [ebp-58h], 0
		mov	[esp+0], edi
		call	sub_6FFE4290

loc_6FFE8885:				; CODE XREF: sub_6FFE86F0+70j
		mov	eax, [ebp-64h]
		mov	[esp+0], eax
		call	sub_6FFEAE50

loc_6FFE8890:				; CODE XREF: sub_6FFE86F0+79j
		mov	edx, [ebp-0C0h]
		mov	[esp+0], edx
		call	sub_6FFEB920

loc_6FFE889E:				; CODE XREF: sub_6FFE86F0+1CAj
					; sub_6FFE86F0+1E9j
		mov	eax, [ebp-74h]
		cmp	[ebp-0A4h], eax
		jz	short loc_6FFE88DB
		sub	dword ptr [ebp-74h], 4
		mov	ecx, [ebp-74h]
		mov	ecx, [ecx]
		test	ecx, ecx
		mov	[ebp-0C8h], ecx
		jz	short loc_6FFE889E
		mov	[esp+0], ecx
		mov	dword ptr [ebp-58h], 0Ah
		call	sub_6FFDFBB0
		mov	edi, [ebp-0C8h]
		mov	[esp+0], edi
		call	sub_6FFEAE50
		jmp	short loc_6FFE889E
; ---------------------------------------------------------------------------

loc_6FFE88DB:				; CODE XREF: sub_6FFE86F0+1B7j
		mov	dword ptr [ebp-58h], 0Ah
		call	sub_6FFEC130
; ---------------------------------------------------------------------------

loc_6FFE88E7:				; CODE XREF: sub_6FFE86F0+62j
		mov	dword ptr [ebp-58h], 0
		call	sub_6FFEBBF0
		mov	edx, [ebp-0C0h]
		mov	[esp+0], edx
		call	sub_6FFEB920
		mov	ecx, [ebp+8]
		mov	eax, [ecx]
		mov	dword ptr [ebp-58h], 0Eh
		mov	[esp+0], eax
		call	ds:_Z5qFreePv
		mov	eax, [ebp-9Ch]
		mov	edi, [ebp+8]
		mov	[edi], eax
		call	sub_6FFEC130
; ---------------------------------------------------------------------------

loc_6FFE8926:				; CODE XREF: sub_6FFE86F0+30j
		mov	edi, [ebp-88h]
		mov	dword ptr [ebp-58h], 0
		mov	[esp+0], edi
		call	sub_6FFE4290

loc_6FFE893B:				; CODE XREF: sub_6FFE86F0+42j
		mov	eax, [ebp-60h]
		mov	[esp+0], eax
		call	sub_6FFEAE50

loc_6FFE8946:				; CODE XREF: sub_6FFE86F0+50j
		mov	edx, [ebp-0C0h]
		mov	[esp+0], edx
		call	sub_6FFEB920

loc_6FFE8954:				; CODE XREF: sub_6FFE86F0+289j
					; sub_6FFE86F0+2A8j
		mov	eax, [ebp-84h]
		cmp	[ebp-0A0h], eax
		jz	short loc_6FFE899A
		sub	dword ptr [ebp-84h], 4
		mov	ecx, [ebp-84h]
		mov	ecx, [ecx]
		test	ecx, ecx
		mov	[ebp-0C4h], ecx
		jz	short loc_6FFE8954
		mov	[esp+0], ecx
		mov	dword ptr [ebp-58h], 6
		call	sub_6FFDFBB0
		mov	edi, [ebp-0C4h]
		mov	[esp+0], edi
		call	sub_6FFEAE50
		jmp	short loc_6FFE8954
; ---------------------------------------------------------------------------

loc_6FFE899A:				; CODE XREF: sub_6FFE86F0+270j
		mov	dword ptr [ebp-58h], 6
		call	sub_6FFEC130
; ---------------------------------------------------------------------------

loc_6FFE89A6:				; CODE XREF: sub_6FFE86F0+39j
		mov	dword ptr [ebp-58h], 0
		call	sub_6FFEBBF0
		mov	edx, [ebp-0C0h]
		mov	[esp+0], edx
		call	sub_6FFEB920
		mov	ecx, [ebp+8]
		mov	edx, [ecx]
		mov	eax, [edx+8]
		mov	[esp+0], ecx
		mov	dword ptr [ebp-58h], 0Dh
		lea	edx, [edx+eax*4+14h]
		mov	eax, [ebp-1Ch]
		mov	[esp+arg_0], edx
		lea	eax, [edx+eax*4]
		mov	[esp+arg_4], eax
		call	sub_6FFE7EB0
		mov	edi, [ebp+8]
		mov	eax, [edi]
		mov	[esp+0], eax
		call	ds:_Z5qFreePv
		mov	eax, [ebp-9Ch]
		mov	[edi], eax
		call	sub_6FFEC130
sub_6FFE86F0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_6FFE8A10	proc near		; CODE XREF: sub_6FFD417D+C9p
					; sub_6FFDDB10+156p

var_68		= dword	ptr -68h
var_64		= dword	ptr -64h
var_60		= dword	ptr -60h
var_5C		= dword	ptr -5Ch
var_58		= dword	ptr -58h
var_54		= dword	ptr -54h
var_50		= dword	ptr -50h
var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_3C		= byte ptr -3Ch
var_38		= dword	ptr -38h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_8		= byte ptr -8
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 88h
		lea	eax, [ebp+var_8]
		mov	[ebp+var_1C], eax
		lea	eax, [ebp+var_3C]
		mov	[ebp+var_24], offset sub_6FFEC1F0
		mov	[ebp+var_20], offset dword_6FFED268
		mov	[ebp+var_18], offset sub_6FFE8BF0
		mov	[ebp+var_14], esp
		mov	[esp], eax
		call	_Unwind_SjLj_Register
		mov	edx, [ebp+arg_0]
		mov	eax, [edx]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jz	short loc_6FFE8A60
		lea	eax, [ebp+var_3C]
		mov	[esp], eax
		call	_Unwind_SjLj_Unregister
		leave
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6FFE8A60:				; CODE XREF: sub_6FFE8A10+3Fj
		mov	ecx, [ebp+arg_0]
		mov	ecx, [ecx]
		mov	edx, [ecx+0Ch]
		mov	eax, ecx
		add	eax, 14h
		mov	[ebp+var_68], ecx
		lea	edx, [eax+edx*4]
		mov	[ebp+var_54], edx
		mov	edx, [ecx+8]
		lea	edx, [eax+edx*4]
		cmp	[ebp+var_54], edx
		mov	[ebp+var_64], edx
		jnz	short loc_6FFE8AC0
		jmp	loc_6FFE8BD0
; ---------------------------------------------------------------------------
		align 10h

loc_6FFE8A90:				; CODE XREF: sub_6FFE8A10+CBj
					; sub_6FFE8A10+137j
		mov	edx, [ebp+var_50]
		mov	eax, [edx+4]
		test	eax, eax
		jz	short loc_6FFE8AA9
		lock dec dword ptr [eax+34h]
		setnz	dl
		test	dl, dl
		jz	loc_6FFE8B50

loc_6FFE8AA9:				; CODE XREF: sub_6FFE8A10+88j
					; sub_6FFE8A10+1B5j
		mov	ecx, [ebp+var_50]
		mov	[esp], ecx
		call	sub_6FFEAE50

loc_6FFE8AB4:				; CODE XREF: sub_6FFE8A10+BEj
		mov	eax, [ebp+var_54]
		cmp	[ebp+var_64], eax
		jz	loc_6FFE8BD0

loc_6FFE8AC0:				; CODE XREF: sub_6FFE8A10+72j
		sub	[ebp+var_54], 4
		mov	eax, [ebp+var_54]
		mov	eax, [eax]
		test	eax, eax
		mov	[ebp+var_50], eax
		jz	short loc_6FFE8AB4
		mov	eax, [eax+8]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jnz	short loc_6FFE8A90
		mov	ecx, [ebp+var_50]
		mov	ecx, [ecx+8]
		mov	edx, [ecx+0Ch]
		mov	eax, ecx
		add	eax, 14h
		mov	[ebp+var_60], ecx
		lea	edx, [eax+edx*4]
		mov	[ebp+var_40], edx
		mov	edx, [ecx+8]
		lea	edx, [eax+edx*4]
		cmp	[ebp+var_40], edx
		mov	[ebp+var_5C], edx
		jz	short loc_6FFE8B34

loc_6FFE8B02:				; CODE XREF: sub_6FFE8A10+122j
		sub	[ebp+var_40], 4
		mov	eax, [ebp+var_40]
		mov	eax, [eax]
		test	eax, eax
		mov	[ebp+var_44], eax
		jz	short loc_6FFE8B2C
		mov	[esp], eax
		mov	[ebp+var_38], 1
		call	sub_6FFDFBB0
		mov	edx, [ebp+var_44]
		mov	[esp], edx
		call	sub_6FFEAE50

loc_6FFE8B2C:				; CODE XREF: sub_6FFE8A10+100j
		mov	ecx, [ebp+var_40]
		cmp	[ebp+var_5C], ecx
		jnz	short loc_6FFE8B02

loc_6FFE8B34:				; CODE XREF: sub_6FFE8A10+F0j
		mov	eax, [ebp+var_60]
		mov	[esp], eax
		mov	[ebp+var_38], 1
		call	ds:_Z5qFreePv
		jmp	loc_6FFE8A90
; ---------------------------------------------------------------------------
		align 10h

loc_6FFE8B50:				; CODE XREF: sub_6FFE8A10+93j
		mov	ecx, [ebp+var_50]
		mov	ecx, [ecx+4]
		mov	eax, [ecx+4]
		mov	[ebp+var_58], ecx
		cmp	ecx, eax
		jz	short loc_6FFE8BAA

loc_6FFE8B60:				; CODE XREF: sub_6FFE8A10+198j
		mov	edx, [eax+4]
		lea	ecx, [eax-1Ch]
		mov	[ebp+var_4C], ecx
		mov	[ebp+var_48], edx
		mov	edx, [eax-1Ch]
		lock dec dword ptr [edx]
		setnz	cl
		test	cl, cl
		jnz	short loc_6FFE8B8C
		mov	eax, [eax-1Ch]
		mov	[esp], eax
		mov	[ebp+var_38], 0FFFFFFFFh
		call	ds:_ZN7QString4freeEPNS_4DataE

loc_6FFE8B8C:				; CODE XREF: sub_6FFE8A10+167j
		mov	eax, [ebp+var_4C]
		add	eax, 8
		mov	[esp], eax
		mov	[ebp+var_38], 0FFFFFFFFh
		call	ds:_ZN8QVariantD1Ev
		mov	eax, [ebp+var_48]
		cmp	[ebp+var_58], eax
		jnz	short loc_6FFE8B60

loc_6FFE8BAA:				; CODE XREF: sub_6FFE8A10+14Ej
		mov	dword ptr [esp+4], 1Ch
		mov	edx, [ebp+var_58]
		mov	[esp], edx
		mov	[ebp+var_38], 0FFFFFFFFh
		call	ds:_ZN8QMapData16continueFreeDataEi
		jmp	loc_6FFE8AA9
; ---------------------------------------------------------------------------
		align 10h

loc_6FFE8BD0:				; CODE XREF: sub_6FFE8A10+74j
					; sub_6FFE8A10+AAj
		mov	edx, [ebp+var_68]
		mov	[esp], edx
		mov	[ebp+var_38], 0FFFFFFFFh
		call	ds:_Z5qFreePv
		lea	eax, [ebp+var_3C]
		mov	[esp], eax
		call	_Unwind_SjLj_Unregister
		leave
		retn
sub_6FFE8A10	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn

sub_6FFE8BF0	proc near		; DATA XREF: sub_6FFE8A10+20o
		add	ebp, 8
		mov	eax, [ebp-50h]
		mov	edx, [ebp-34h]
		add	eax, 4
		mov	[ebp-6Ch], edx
		mov	[esp+0], eax
		mov	dword ptr [ebp-38h], 0
		call	sub_6FFE4290
		mov	ecx, [ebp-6Ch]
		mov	[esp+0], ecx
		mov	dword ptr [ebp-38h], 0FFFFFFFFh
		call	_Unwind_SjLj_Resume
sub_6FFE8BF0	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_6FFE8C20	proc near		; CODE XREF: _ZN16DBusMenuExporter15doUpdateActionsEv+10F9p
					; sub_6FFC88E0+CA0p ...

var_64		= dword	ptr -64h
var_60		= dword	ptr -60h
var_5C		= dword	ptr -5Ch
var_58		= dword	ptr -58h
var_54		= dword	ptr -54h
var_50		= dword	ptr -50h
var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_3C		= byte ptr -3Ch
var_38		= dword	ptr -38h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_8		= byte ptr -8
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 78h
		lea	eax, [ebp+var_8]
		mov	[ebp+var_1C], eax
		lea	eax, [ebp+var_3C]
		mov	[ebp+var_24], offset sub_6FFEC1F0
		mov	[ebp+var_20], offset dword_6FFEC8F4
		mov	[ebp+var_18], offset sub_6FFE8DA0
		mov	[ebp+var_14], esp
		mov	[esp], eax
		call	_Unwind_SjLj_Register
		mov	edx, [ebp+arg_0]
		mov	eax, [ebp+arg_4]
		mov	edx, [edx]
		mov	ecx, [edx+8]
		mov	[ebp+var_60], edx
		mov	[ebp+var_64], ecx
		mov	[esp+4], eax
		mov	eax, [ebp+arg_0]
		mov	[esp], eax
		mov	[ebp+var_38], 0FFFFFFFFh
		call	ds:_ZN9QListData6detachEi
		mov	edx, [ebp+arg_0]
		mov	[ebp+var_54], eax
		mov	eax, [edx]
		mov	edx, [eax+0Ch]
		lea	edx, [eax+edx*4+14h]
		mov	[ebp+var_48], edx
		mov	edx, [eax+8]
		lea	edx, [eax+edx*4+14h]
		cmp	[ebp+var_48], edx
		mov	[ebp+var_5C], edx
		jz	short loc_6FFE8D10
		mov	ecx, [ebp+var_64]
		mov	eax, [ebp+var_60]
		mov	[ebp+var_40], edx
		mov	[ebp+var_4C], edx
		lea	ecx, [eax+ecx*4+14h]
		mov	[ebp+var_44], ecx
		jmp	short loc_6FFE8CC9
; ---------------------------------------------------------------------------
		align 10h

loc_6FFE8CB0:				; CODE XREF: sub_6FFE8C20+BCj
					; sub_6FFE8C20+E7j
		lock inc dword ptr [eax]
		setnz	dl

loc_6FFE8CB6:				; CODE XREF: sub_6FFE8C20+AEj
		add	[ebp+var_40], 4
		mov	ecx, [ebp+var_40]
		cmp	[ebp+var_48], ecx
		mov	[ebp+var_4C], ecx
		jz	short loc_6FFE8D10
		add	[ebp+var_44], 4

loc_6FFE8CC9:				; CODE XREF: sub_6FFE8C20+8Bj
		mov	eax, [ebp+var_40]
		test	eax, eax
		jz	short loc_6FFE8CB6
		mov	edx, [ebp+var_44]
		mov	ecx, [ebp+var_40]
		mov	eax, [edx]
		cmp	edx, ecx
		mov	[ecx], eax
		jnz	short loc_6FFE8CB0
		mov	dword ptr [esp+8], 2D6h
		mov	dword ptr [esp+4], offset aRIncludeQtco_1 ; "R:/include/QtCore/qstring.h"
		mov	dword ptr [esp], offset	aOtherThis ; "&other !=	this"
		mov	[ebp+var_38], 2
		call	ds:_Z9qt_assertPKcS0_i
		mov	edx, [ebp+var_40]
		mov	eax, [edx]
		jmp	short loc_6FFE8CB0
; ---------------------------------------------------------------------------
		align 10h

loc_6FFE8D10:				; CODE XREF: sub_6FFE8C20+76j
					; sub_6FFE8C20+A3j
		mov	ecx, [ebp+var_54]
		lock dec dword ptr [ecx]
		setnz	al
		test	al, al
		jz	short loc_6FFE8D30
		lea	eax, [ebp+var_3C]
		mov	[esp], eax
		call	_Unwind_SjLj_Unregister
		leave
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6FFE8D30:				; CODE XREF: sub_6FFE8C20+FBj
		mov	edx, [ecx+0Ch]
		mov	eax, ecx
		add	eax, 14h
		lea	edx, [eax+edx*4]
		mov	[ebp+var_50], edx
		mov	edx, [ecx+8]
		lea	edx, [eax+edx*4]
		cmp	[ebp+var_50], edx
		mov	[ebp+var_58], edx
		jz	short loc_6FFE8D80
		lea	esi, [esi+0]

loc_6FFE8D50:				; CODE XREF: sub_6FFE8C20+15Ej
		sub	[ebp+var_50], 4
		mov	edx, [ebp+var_50]
		mov	eax, [edx]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jnz	short loc_6FFE8D78
		mov	ecx, [ebp+var_50]
		mov	eax, [ecx]
		mov	[esp], eax
		mov	[ebp+var_38], 0FFFFFFFFh
		call	ds:_ZN7QString4freeEPNS_4DataE

loc_6FFE8D78:				; CODE XREF: sub_6FFE8C20+141j
		mov	eax, [ebp+var_50]
		cmp	[ebp+var_58], eax
		jnz	short loc_6FFE8D50

loc_6FFE8D80:				; CODE XREF: sub_6FFE8C20+12Aj
		mov	edx, [ebp+var_54]
		mov	[esp], edx
		mov	[ebp+var_38], 0FFFFFFFFh
		call	ds:_Z5qFreePv
		lea	eax, [ebp+var_3C]
		mov	[esp], eax
		call	_Unwind_SjLj_Unregister
		leave
		retn
sub_6FFE8C20	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn

sub_6FFE8DA0	proc near		; DATA XREF: sub_6FFE8C20+1Do
		add	ebp, 8
		mov	eax, [ebp-38h]
		mov	edx, [ebp-34h]
		cmp	eax, 1
		mov	[ebp-68h], edx
		jz	short loc_6FFE8DEF
		cmp	eax, 2
		jz	short loc_6FFE8E1A
		mov	dword ptr [ebp-38h], 0
		call	sub_6FFEBBF0
		mov	ecx, [ebp-68h]
		mov	[esp+0], ecx
		call	sub_6FFEB920
		mov	edx, [ebp+8]
		mov	eax, [edx]
		mov	[esp+0], eax
		mov	dword ptr [ebp-38h], 3
		call	ds:_Z5qFreePv
		mov	eax, [ebp-54h]
		mov	ecx, [ebp+8]
		mov	[ecx], eax
		call	sub_6FFEC130
; ---------------------------------------------------------------------------

loc_6FFE8DEF:				; CODE XREF: sub_6FFE8DA0+Fj
		mov	eax, [ebp-68h]
		mov	[esp+0], eax
		call	sub_6FFEB920

loc_6FFE8DFA:				; CODE XREF: sub_6FFE8DA0+78j
		mov	ecx, [ebp-4Ch]
		cmp	[ebp-5Ch], ecx
		jz	short loc_6FFE8E38
		sub	dword ptr [ebp-4Ch], 4
		mov	edx, [ebp-4Ch]
		mov	[esp+0], edx
		mov	dword ptr [ebp-38h], 1
		call	sub_6FFEA140
		jmp	short loc_6FFE8DFA
; ---------------------------------------------------------------------------

loc_6FFE8E1A:				; CODE XREF: sub_6FFE8DA0+14j
		mov	dword ptr [ebp-38h], 0
		call	sub_6FFEBBF0
		mov	edx, [ebp-68h]
		mov	[esp+0], edx
		mov	dword ptr [ebp-38h], 0FFFFFFFFh
		call	_Unwind_SjLj_Resume
; ---------------------------------------------------------------------------

loc_6FFE8E38:				; CODE XREF: sub_6FFE8DA0+60j
		mov	dword ptr [ebp-38h], 1
		call	sub_6FFEC130
sub_6FFE8DA0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6FFE8E50	proc near		; CODE XREF: sub_6FFE0440+1381p
					; sub_6FFE0440+13C7p ...

var_2C		= dword	ptr -2Ch
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 1Ch
		mov	edi, [esp+2Ch+arg_4]
		mov	edx, [edi+0Ch]
		lea	eax, [edi+14h]
		lea	ebx, [eax+edx*4]
		mov	edx, [edi+8]
		lea	esi, [eax+edx*4]
		cmp	ebx, esi
		jz	short loc_6FFE8E8E
		mov	ebp, ds:_ZN7QString4freeEPNS_4DataE

loc_6FFE8E74:				; CODE XREF: sub_6FFE8E50+3Cj
		sub	ebx, 4
		mov	eax, [ebx]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jnz	short loc_6FFE8E8A
		mov	eax, [ebx]
		mov	[esp+2Ch+var_2C], eax
		call	ebp ; _ZN7QString4freeEPNS_4DataE

loc_6FFE8E8A:				; CODE XREF: sub_6FFE8E50+31j
		cmp	esi, ebx
		jnz	short loc_6FFE8E74

loc_6FFE8E8E:				; CODE XREF: sub_6FFE8E50+1Cj
		mov	eax, ds:_Z5qFreePv
		mov	[esp+2Ch+arg_0], edi
		add	esp, 1Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		jmp	eax
sub_6FFE8E50	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_6FFE8EA0	proc near		; CODE XREF: _ZN16DBusMenuExporter15doUpdateActionsEv+70Bp
					; _ZNK16DBusMenuShortcut13toKeySequenceEv+10Bp	...

var_9C		= dword	ptr -9Ch
var_88		= dword	ptr -88h
var_84		= dword	ptr -84h
var_80		= dword	ptr -80h
var_7C		= dword	ptr -7Ch
var_78		= dword	ptr -78h
var_74		= dword	ptr -74h
var_70		= dword	ptr -70h
var_6C		= dword	ptr -6Ch
var_68		= dword	ptr -68h
var_64		= dword	ptr -64h
var_60		= dword	ptr -60h
var_5C		= dword	ptr -5Ch
var_58		= dword	ptr -58h
var_54		= dword	ptr -54h
var_50		= dword	ptr -50h
var_4C		= byte ptr -4Ch
var_48		= dword	ptr -48h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= byte ptr -8
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		push	esi
		push	ebx
		lea	eax, [ebp+var_8]
		sub	esp, 0B0h
		mov	[ebp+var_2C], eax
		lea	eax, [ebp+var_4C]
		mov	[esp], eax
		mov	[ebp+var_34], offset sub_6FFEC1F0
		mov	[ebp+var_30], offset dword_6FFEC8D0
		mov	[ebp+var_28], offset sub_6FFE9197
		mov	[ebp+var_24], esp
		call	_Unwind_SjLj_Register
		mov	edx, [ebp+arg_0]
		mov	eax, [edx]
		mov	eax, [eax]
		cmp	eax, 1
		jz	loc_6FFE9105
		mov	[ebp+var_10], 7FFFFFFFh
		mov	eax, [edx]
		mov	ecx, edx
		mov	edx, [eax+8]
		mov	[esp], ecx
		mov	dword ptr [esp+8], 1
		mov	[ebp+var_48], 0FFFFFFFFh
		lea	edx, [eax+edx*4+14h]
		lea	eax, [ebp+var_10]
		mov	[ebp+var_88], edx
		mov	[esp+4], eax
		call	ds:_ZN9QListData11detach_growEPii
		mov	ebx, [ebp+arg_0]
		mov	[ebp+var_74], eax
		mov	eax, [ebx]
		mov	ecx, [eax+8]
		lea	edx, [eax+ecx*4+14h]
		mov	[ebp+var_78], edx
		mov	edx, [ebp+var_10]
		mov	ebx, [ebp+var_78]
		lea	esi, ds:0[edx*4]
		add	ebx, esi
		cmp	[ebp+var_78], ebx
		mov	[ebp+var_68], ebx
		jz	short loc_6FFE8FC2
		mov	eax, [ebp+var_78]
		mov	edx, [ebp+var_88]
		mov	[ebp+var_54], eax
		mov	[ebp+var_58], edx
		mov	[ebp+var_60], eax
		jmp	short loc_6FFE8F71
; ---------------------------------------------------------------------------

loc_6FFE8F58:				; CODE XREF: sub_6FFE8EA0+E4j
					; sub_6FFE8EA0+10Cj
		lock inc dword ptr [eax]
		setnz	dl

loc_6FFE8F5E:				; CODE XREF: sub_6FFE8EA0+D6j
		add	[ebp+var_54], 4
		mov	eax, [ebp+var_54]
		cmp	[ebp+var_68], eax
		mov	[ebp+var_60], eax
		jz	short loc_6FFE8FB0
		add	[ebp+var_58], 4

loc_6FFE8F71:				; CODE XREF: sub_6FFE8EA0+B6j
		mov	ecx, [ebp+var_54]
		test	ecx, ecx
		jz	short loc_6FFE8F5E
		mov	ecx, [ebp+var_58]
		mov	ebx, [ebp+var_54]
		mov	eax, [ecx]
		cmp	ecx, ebx
		mov	[ebx], eax
		jnz	short loc_6FFE8F58
		mov	dword ptr [esp+8], 2D6h
		mov	dword ptr [esp+4], offset aRIncludeQtco_1 ; "R:/include/QtCore/qstring.h"
		mov	dword ptr [esp], offset	aOtherThis ; "&other !=	this"
		mov	[ebp+var_48], 4
		call	ds:_Z9qt_assertPKcS0_i
		mov	eax, [ebx]
		jmp	short loc_6FFE8F58
; ---------------------------------------------------------------------------
		align 10h

loc_6FFE8FB0:				; CODE XREF: sub_6FFE8EA0+CBj
		mov	ecx, [ebp+arg_0]
		mov	edx, [ebp+var_10]
		mov	eax, [ecx]
		lea	esi, ds:0[edx*4]
		mov	ecx, [eax+8]

loc_6FFE8FC2:				; CODE XREF: sub_6FFE8EA0+A2j
		mov	ebx, [eax+0Ch]
		lea	ebx, [eax+ebx*4+14h]
		lea	eax, [eax+ecx*4+14h]
		lea	eax, [eax+edx*4+4]
		cmp	ebx, eax
		mov	[ebp+var_64], ebx
		mov	[ebp+var_80], eax
		jz	short loc_6FFE9046
		add	esi, [ebp+var_88]
		mov	[ebp+var_50], eax
		mov	[ebp+var_6C], eax
		mov	[ebp+var_5C], esi
		jmp	short loc_6FFE9009
; ---------------------------------------------------------------------------
		align 10h

loc_6FFE8FF0:				; CODE XREF: sub_6FFE8EA0+17Cj
					; sub_6FFE8EA0+1A4j
		lock inc dword ptr [eax]
		setnz	dl

loc_6FFE8FF6:				; CODE XREF: sub_6FFE8EA0+16Ej
		add	[ebp+var_50], 4
		mov	eax, [ebp+var_50]
		cmp	[ebp+var_64], eax
		mov	[ebp+var_6C], eax
		jz	short loc_6FFE9046
		add	[ebp+var_5C], 4

loc_6FFE9009:				; CODE XREF: sub_6FFE8EA0+14Aj
		mov	edx, [ebp+var_50]
		test	edx, edx
		jz	short loc_6FFE8FF6
		mov	ecx, [ebp+var_5C]
		mov	ebx, [ebp+var_50]
		mov	eax, [ecx]
		cmp	ecx, ebx
		mov	[ebx], eax
		jnz	short loc_6FFE8FF0
		mov	dword ptr [esp+8], 2D6h
		mov	dword ptr [esp+4], offset aRIncludeQtco_1 ; "R:/include/QtCore/qstring.h"
		mov	dword ptr [esp], offset	aOtherThis ; "&other !=	this"
		mov	[ebp+var_48], 2
		call	ds:_Z9qt_assertPKcS0_i
		mov	eax, [ebx]
		jmp	short loc_6FFE8FF0
; ---------------------------------------------------------------------------

loc_6FFE9046:				; CODE XREF: sub_6FFE8EA0+139j
					; sub_6FFE8EA0+163j
		mov	edx, [ebp+var_74]
		lock dec dword ptr [edx]
		setnz	al
		test	al, al
		jz	short loc_6FFE90A0

loc_6FFE9053:				; CODE XREF: sub_6FFE8EA0+260j
		mov	ecx, [ebp+arg_0]
		mov	eax, [ecx]
		mov	edx, [eax+8]
		lea	eax, [eax+edx*4+14h]
		mov	edx, [ebp+var_10]
		lea	edx, [eax+edx*4]
		test	edx, edx
		mov	[ebp+var_84], edx
		jz	short loc_6FFE9084
		mov	ebx, [ebp+arg_4]
		mov	eax, [ebx]
		cmp	ebx, edx
		mov	[edx], eax
		jz	loc_6FFE9140

loc_6FFE907E:				; CODE XREF: sub_6FFE8EA0+2CCj
		lock inc dword ptr [eax]
		setnz	dl

loc_6FFE9084:				; CODE XREF: sub_6FFE8EA0+1CDj
					; sub_6FFE8EA0+29Bj
		lea	eax, [ebp+var_4C]
		mov	[esp], eax
		call	_Unwind_SjLj_Unregister
		add	esp, 0B0h
		pop	ebx
		pop	esi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6FFE90A0:				; CODE XREF: sub_6FFE8EA0+1B1j
		mov	ecx, [ebp+var_74]
		mov	edx, [ebp+var_74]
		mov	eax, [ecx+0Ch]
		add	edx, 14h
		lea	eax, [edx+eax*4]
		mov	[ebp+var_70], eax
		mov	eax, [ecx+8]
		lea	eax, [edx+eax*4]
		cmp	[ebp+var_70], eax
		mov	[ebp+var_7C], eax
		jz	short loc_6FFE90ED

loc_6FFE90C0:				; CODE XREF: sub_6FFE8EA0+24Bj
		sub	[ebp+var_70], 4
		mov	ebx, [ebp+var_70]
		mov	eax, [ebx]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jnz	short loc_6FFE90E5
		mov	eax, [ebx]
		mov	[ebp+var_48], 0FFFFFFFFh
		mov	[esp], eax
		call	ds:_ZN7QString4freeEPNS_4DataE

loc_6FFE90E5:				; CODE XREF: sub_6FFE8EA0+231j
		mov	eax, [ebp+var_70]
		cmp	[ebp+var_7C], eax
		jnz	short loc_6FFE90C0

loc_6FFE90ED:				; CODE XREF: sub_6FFE8EA0+21Ej
		mov	edx, [ebp+var_74]
		mov	[ebp+var_48], 0FFFFFFFFh
		mov	[esp], edx
		call	ds:_Z5qFreePv
		jmp	loc_6FFE9053
; ---------------------------------------------------------------------------

loc_6FFE9105:				; CODE XREF: sub_6FFE8EA0+3Ej
		mov	ecx, [ebp+arg_4]
		lea	edx, [ebp+var_C]
		mov	[ebp+var_9C], edx
		mov	eax, [ecx]
		cmp	ecx, edx
		mov	[ebp+var_C], eax
		jz	short loc_6FFE9171

loc_6FFE911A:				; CODE XREF: sub_6FFE8EA0+2F5j
		mov	eax, [ebp+var_C]
		lock inc dword ptr [eax]
		setnz	dl
		mov	ebx, [ebp+arg_0]
		mov	[ebp+var_48], 0Ah
		mov	[esp], ebx
		call	ds:_ZN9QListData6appendEv
		mov	edx, [ebp+var_C]
		mov	[eax], edx
		jmp	loc_6FFE9084
; ---------------------------------------------------------------------------

loc_6FFE9140:				; CODE XREF: sub_6FFE8EA0+1D8j
		mov	dword ptr [esp+8], 2D6h
		mov	dword ptr [esp+4], offset aRIncludeQtco_1 ; "R:/include/QtCore/qstring.h"
		mov	dword ptr [esp], offset	aOtherThis ; "&other !=	this"
		mov	[ebp+var_48], 8
		call	ds:_Z9qt_assertPKcS0_i
		mov	edx, [ebp+var_84]
		mov	eax, [edx]
		jmp	loc_6FFE907E
; ---------------------------------------------------------------------------

loc_6FFE9171:				; CODE XREF: sub_6FFE8EA0+278j
		mov	dword ptr [esp+8], 2D6h
		mov	dword ptr [esp+4], offset aRIncludeQtco_1 ; "R:/include/QtCore/qstring.h"
		mov	dword ptr [esp], offset	aOtherThis ; "&other !=	this"
		mov	[ebp+var_48], 7
		call	ds:_Z9qt_assertPKcS0_i
		jmp	short loc_6FFE911A
sub_6FFE8EA0	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn

sub_6FFE9197	proc near		; DATA XREF: sub_6FFE8EA0+25o
		add	ebp, 8
		mov	eax, [ebp-48h]
		mov	edx, [ebp-44h]
		cmp	eax, 1
		mov	[ebp-8Ch], edx
		jz	loc_6FFE9273
		cmp	eax, 2
		jz	loc_6FFE93BD
		cmp	eax, 3
		jz	loc_6FFE938F
		cmp	eax, 4
		jz	loc_6FFE936E
		cmp	eax, 5
		lea	esi, [esi+0]
		jz	loc_6FFE934D
		cmp	eax, 6
		jz	loc_6FFE9338
		cmp	eax, 7
		jz	loc_6FFE9315
		cmp	eax, 8
		nop
		lea	esi, [esi+0]
		jz	loc_6FFE92F4
		cmp	eax, 9
		jz	loc_6FFE92CF
		cmp	eax, 0Ah
		jz	loc_6FFE936E
		mov	dword ptr [ebp-48h], 0
		nop
		call	sub_6FFEBBF0
		mov	ecx, [ebp-8Ch]
		mov	[esp+0], ecx
		call	sub_6FFEB920
		mov	ebx, [ebp+8]
		mov	edx, [ebx]
		mov	eax, [edx+8]
		lea	eax, [edx+eax*4+14h]
		mov	[ebp-94h], eax
		mov	eax, [ebp-10h]
		mov	edx, [ebp-94h]
		lea	eax, [edx+eax*4]
		mov	[ebp-90h], eax

loc_6FFE9247:				; CODE XREF: sub_6FFE9197+DAj
		mov	ebx, [ebp-90h]
		cmp	[ebp-94h], ebx
		jz	short loc_6FFE92A1
		sub	dword ptr [ebp-90h], 4
		mov	ecx, [ebp-90h]
		mov	dword ptr [ebp-48h], 5
		mov	[esp+0], ecx
		call	sub_6FFEA140
		jmp	short loc_6FFE9247
; ---------------------------------------------------------------------------

loc_6FFE9273:				; CODE XREF: sub_6FFE9197+12j
		mov	edx, [ebp-8Ch]
		mov	[esp+0], edx
		call	sub_6FFEB920

loc_6FFE9281:				; CODE XREF: sub_6FFE9197+108j
		mov	ebx, [ebp-6Ch]
		cmp	[ebp-80h], ebx
		jz	short loc_6FFE92C3
		sub	dword ptr [ebp-6Ch], 4
		mov	ecx, [ebp-6Ch]
		mov	dword ptr [ebp-48h], 1
		mov	[esp+0], ecx
		call	sub_6FFEA140
		jmp	short loc_6FFE9281
; ---------------------------------------------------------------------------

loc_6FFE92A1:				; CODE XREF: sub_6FFE9197+BCj
		mov	edx, [ebp+8]
		mov	eax, [edx]
		mov	dword ptr [ebp-48h], 5
		mov	[esp+0], eax
		call	ds:_Z5qFreePv
		mov	ebx, [ebp-74h]
		mov	ecx, [ebp+8]
		mov	[ecx], ebx
		call	sub_6FFEC130
; ---------------------------------------------------------------------------

loc_6FFE92C3:				; CODE XREF: sub_6FFE9197+F0j
		mov	dword ptr [ebp-48h], 1
		call	sub_6FFEC130
; ---------------------------------------------------------------------------

loc_6FFE92CF:				; CODE XREF: sub_6FFE9197+62j
		mov	edx, [ebp-8Ch]
		mov	[esp+0], edx
		call	sub_6FFEB920
		lea	ecx, [ebp-0Ch]
		mov	[esp+0], ecx
		mov	dword ptr [ebp-48h], 9
		call	sub_6FFEA140
		call	sub_6FFEC130
; ---------------------------------------------------------------------------

loc_6FFE92F4:				; CODE XREF: sub_6FFE9197+59j
		mov	dword ptr [ebp-48h], 0
		call	sub_6FFEBBF0
		mov	ebx, [ebp-8Ch]
		mov	dword ptr [ebp-48h], 0FFFFFFFFh
		mov	[esp+0], ebx
		call	_Unwind_SjLj_Resume
; ---------------------------------------------------------------------------

loc_6FFE9315:				; CODE XREF: sub_6FFE9197+4Bj
		mov	ecx, [ebp-8Ch]
		mov	[esp+0], ecx
		call	sub_6FFEB920
		mov	ebx, [ebp+8]
		mov	eax, [ebx]
		sub	dword ptr [eax+0Ch], 1
		mov	dword ptr [ebp-48h], 0Bh
		call	sub_6FFEC130
; ---------------------------------------------------------------------------

loc_6FFE9338:				; CODE XREF: sub_6FFE9197+42j
		mov	eax, [ebp-8Ch]
		mov	dword ptr [ebp-48h], 0FFFFFFFFh
		mov	[esp+0], eax
		call	_Unwind_SjLj_Resume
; ---------------------------------------------------------------------------

loc_6FFE934D:				; CODE XREF: sub_6FFE9197+39j
		mov	dword ptr [ebp-48h], 0
		call	sub_6FFEBBF0
		mov	edx, [ebp-8Ch]
		mov	dword ptr [ebp-48h], 0FFFFFFFFh
		mov	[esp+0], edx
		call	_Unwind_SjLj_Resume
; ---------------------------------------------------------------------------

loc_6FFE936E:				; CODE XREF: sub_6FFE9197+2Dj
					; sub_6FFE9197+6Bj
		mov	dword ptr [ebp-48h], 0
		call	sub_6FFEBBF0
		mov	eax, [ebp-8Ch]
		mov	dword ptr [ebp-48h], 0FFFFFFFFh
		mov	[esp+0], eax
		call	_Unwind_SjLj_Resume
; ---------------------------------------------------------------------------

loc_6FFE938F:				; CODE XREF: sub_6FFE9197+24j
		mov	ebx, [ebp-8Ch]
		mov	[esp+0], ebx
		call	sub_6FFEB920

loc_6FFE939D:				; CODE XREF: sub_6FFE9197+224j
		mov	edx, [ebp-60h]
		cmp	[ebp-78h], edx
		jz	short loc_6FFE93F6
		sub	dword ptr [ebp-60h], 4
		mov	eax, [ebp-60h]
		mov	dword ptr [ebp-48h], 3
		mov	[esp+0], eax
		call	sub_6FFEA140
		jmp	short loc_6FFE939D
; ---------------------------------------------------------------------------

loc_6FFE93BD:				; CODE XREF: sub_6FFE9197+1Bj
		mov	dword ptr [ebp-48h], 0
		call	sub_6FFEBBF0
		mov	ecx, [ebp-8Ch]
		mov	[esp+0], ecx
		call	sub_6FFEB920
		mov	ebx, [ebp+8]
		mov	eax, [ebx]
		mov	dword ptr [ebp-48h], 6
		mov	[esp+0], eax
		call	ds:_Z5qFreePv
		mov	eax, [ebp-74h]
		mov	[ebx], eax
		call	sub_6FFEC130
; ---------------------------------------------------------------------------

loc_6FFE93F6:				; CODE XREF: sub_6FFE9197+20Cj
		mov	dword ptr [ebp-48h], 3
		call	sub_6FFEC130
sub_6FFE9197	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_6FFE9410	proc near		; CODE XREF: sub_6FFCBEA0+46Bp

var_6C		= dword	ptr -6Ch
var_68		= dword	ptr -68h
var_64		= dword	ptr -64h
var_60		= dword	ptr -60h
var_5C		= dword	ptr -5Ch
var_58		= dword	ptr -58h
var_54		= dword	ptr -54h
var_50		= dword	ptr -50h
var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_3C		= byte ptr -3Ch
var_38		= dword	ptr -38h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_8		= byte ptr -8
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 88h
		lea	eax, [ebp+var_8]
		mov	[ebp+var_1C], eax
		lea	eax, [ebp+var_3C]
		mov	[ebp+var_24], offset sub_6FFEC1F0
		mov	[ebp+var_20], offset dword_6FFECB98
		mov	[ebp+var_18], offset sub_6FFE9586
		mov	[ebp+var_14], esp
		mov	[esp], eax
		call	_Unwind_SjLj_Register
		mov	edx, [ebp+arg_0]
		mov	eax, [ebp+arg_4]
		mov	edx, [edx]
		mov	ecx, [edx+8]
		mov	[ebp+var_68], edx
		mov	[ebp+var_6C], ecx
		mov	[esp+4], eax
		mov	eax, [ebp+arg_0]
		mov	[esp], eax
		mov	[ebp+var_38], 0FFFFFFFFh
		call	ds:_ZN9QListData6detachEi
		mov	edx, [ebp+arg_0]
		mov	[ebp+var_5C], eax
		mov	eax, [edx]
		mov	edx, [eax+0Ch]
		lea	edx, [eax+edx*4+14h]
		mov	[ebp+var_50], edx
		mov	edx, [eax+8]
		lea	eax, [eax+edx*4+10h]
		lea	ecx, [eax+4]
		cmp	[ebp+var_50], ecx
		mov	[ebp+var_64], ecx
		jz	short loc_6FFE94FD
		mov	ecx, [ebp+var_68]
		add	eax, 8
		mov	edx, [ebp+var_6C]
		mov	[ebp+var_44], eax
		lea	edx, [ecx+edx*4+14h]
		mov	ecx, [ebp+var_64]
		mov	[ebp+var_4C], edx
		mov	[ebp+var_40], ecx
		jmp	short loc_6FFE94B4
; ---------------------------------------------------------------------------
		align 10h

loc_6FFE94B0:				; CODE XREF: sub_6FFE9410+EBj
		add	[ebp+var_4C], 4

loc_6FFE94B4:				; CODE XREF: sub_6FFE9410+97j
		mov	dword ptr [esp], 10h ; size_t
		mov	[ebp+var_38], 3
		call	sub_6FFEAE70
		mov	edx, [ebp+var_4C]
		mov	[ebp+var_48], eax
		mov	eax, [edx]
		mov	[esp+4], eax
		mov	ecx, [ebp+var_48]
		mov	[esp], ecx
		mov	[ebp+var_38], 2
		call	ds:_ZN8QVariantC1ERKS_
		mov	eax, [ebp+var_44]
		mov	edx, [ebp+var_40]
		mov	ecx, [ebp+var_48]
		add	[ebp+var_44], 4
		cmp	[ebp+var_50], eax
		mov	[ebp+var_40], eax
		mov	[edx], ecx
		jnz	short loc_6FFE94B0

loc_6FFE94FD:				; CODE XREF: sub_6FFE9410+7Cj
		mov	ecx, [ebp+var_5C]
		lock dec dword ptr [ecx]
		setnz	al
		test	al, al
		jz	short loc_6FFE9517
		lea	eax, [ebp+var_3C]
		mov	[esp], eax
		call	_Unwind_SjLj_Unregister
		leave
		retn
; ---------------------------------------------------------------------------

loc_6FFE9517:				; CODE XREF: sub_6FFE9410+F8j
		mov	edx, [ecx+0Ch]
		mov	eax, ecx
		add	eax, 14h
		lea	edx, [eax+edx*4]
		mov	[ebp+var_54], edx
		mov	edx, [ecx+8]
		lea	edx, [eax+edx*4]
		cmp	[ebp+var_54], edx
		mov	[ebp+var_60], edx
		jz	short loc_6FFE9566

loc_6FFE9533:				; CODE XREF: sub_6FFE9410+154j
		sub	[ebp+var_54], 4
		mov	eax, [ebp+var_54]
		mov	eax, [eax]
		test	eax, eax
		mov	[ebp+var_58], eax
		jz	short loc_6FFE955E
		mov	[esp], eax
		mov	[ebp+var_38], 0FFFFFFFFh
		call	ds:_ZN8QVariantD1Ev
		mov	edx, [ebp+var_58]
		mov	[esp], edx
		call	sub_6FFEAE50

loc_6FFE955E:				; CODE XREF: sub_6FFE9410+131j
		mov	ecx, [ebp+var_54]
		cmp	[ebp+var_60], ecx
		jnz	short loc_6FFE9533

loc_6FFE9566:				; CODE XREF: sub_6FFE9410+121j
		mov	eax, [ebp+var_5C]
		mov	[esp], eax
		mov	[ebp+var_38], 0FFFFFFFFh
		call	ds:_Z5qFreePv
		lea	eax, [ebp+var_3C]
		mov	[esp], eax
		call	_Unwind_SjLj_Unregister
		leave
		retn
sub_6FFE9410	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn

sub_6FFE9586	proc near		; DATA XREF: sub_6FFE9410+20o
		add	ebp, 8
		mov	eax, [ebp-38h]
		mov	ecx, [ebp-34h]
		cmp	eax, 1
		mov	[ebp-74h], ecx
		jz	short loc_6FFE95E2
		cmp	eax, 2
		jz	short loc_6FFE95ED
		cmp	eax, 3
		jz	loc_6FFE962D
		mov	dword ptr [ebp-38h], 0
		lea	esi, [esi+0]
		call	sub_6FFEBBF0
		mov	eax, [ebp-74h]
		mov	[esp+0], eax
		call	sub_6FFEB920
		mov	edx, [ebp+8]
		mov	eax, [edx]
		mov	[esp+0], eax
		mov	dword ptr [ebp-38h], 4
		call	ds:_Z5qFreePv
		mov	eax, [ebp-5Ch]
		mov	ecx, [ebp+8]
		mov	[ecx], eax
		call	sub_6FFEC130
; ---------------------------------------------------------------------------

loc_6FFE95E2:				; CODE XREF: sub_6FFE9586+Fj
		mov	eax, [ebp-48h]
		mov	[esp+0], eax
		call	sub_6FFEAE50

loc_6FFE95ED:				; CODE XREF: sub_6FFE9586+14j
		mov	edx, [ebp-74h]
		mov	[esp+0], edx
		call	sub_6FFEB920

loc_6FFE95F8:				; CODE XREF: sub_6FFE9586+88j
					; sub_6FFE9586+A5j
		mov	edx, [ebp-40h]
		cmp	[ebp-64h], edx
		jz	short loc_6FFE964B
		sub	dword ptr [ebp-40h], 4
		mov	ecx, [ebp-40h]
		mov	ecx, [ecx]
		test	ecx, ecx
		mov	[ebp-70h], ecx
		jz	short loc_6FFE95F8
		mov	[esp+0], ecx
		mov	dword ptr [ebp-38h], 1
		call	ds:_ZN8QVariantD1Ev
		mov	eax, [ebp-70h]
		mov	[esp+0], eax
		call	sub_6FFEAE50
		jmp	short loc_6FFE95F8
; ---------------------------------------------------------------------------

loc_6FFE962D:				; CODE XREF: sub_6FFE9586+19j
		mov	dword ptr [ebp-38h], 0
		call	sub_6FFEBBF0
		mov	edx, [ebp-74h]
		mov	[esp+0], edx
		mov	dword ptr [ebp-38h], 0FFFFFFFFh
		call	_Unwind_SjLj_Resume
; ---------------------------------------------------------------------------

loc_6FFE964B:				; CODE XREF: sub_6FFE9586+78j
		mov	dword ptr [ebp-38h], 1
		call	sub_6FFEC130
sub_6FFE9586	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_6FFE9660	proc near		; CODE XREF: sub_6FFCBEA0+420p
					; sub_6FFCBEA0+432p ...

var_B0		= dword	ptr -0B0h
var_AC		= dword	ptr -0ACh
var_A8		= dword	ptr -0A8h
var_A4		= dword	ptr -0A4h
var_A0		= dword	ptr -0A0h
var_9C		= dword	ptr -9Ch
var_98		= dword	ptr -98h
var_94		= dword	ptr -94h
var_90		= dword	ptr -90h
var_8C		= dword	ptr -8Ch
var_88		= dword	ptr -88h
var_84		= dword	ptr -84h
var_80		= dword	ptr -80h
var_7C		= dword	ptr -7Ch
var_78		= dword	ptr -78h
var_74		= dword	ptr -74h
var_70		= dword	ptr -70h
var_6C		= dword	ptr -6Ch
var_68		= dword	ptr -68h
var_64		= dword	ptr -64h
var_60		= dword	ptr -60h
var_5C		= byte ptr -5Ch
var_58		= dword	ptr -58h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_1C		= dword	ptr -1Ch
var_18		= byte ptr -18h
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		lea	eax, [ebp+var_18]
		sub	esp, 0CCh
		mov	[ebp+var_3C], eax
		lea	eax, [ebp+var_5C]
		mov	[esp], eax
		mov	[ebp+var_44], offset sub_6FFEC1F0
		mov	[ebp+var_40], offset dword_6FFECBEC
		mov	[ebp+var_38], offset sub_6FFE9979
		mov	[ebp+var_34], esp
		call	_Unwind_SjLj_Register
		mov	edx, [ebp+arg_0]
		mov	eax, [edx]
		mov	eax, [eax]
		cmp	eax, 1
		jz	loc_6FFE991A
		mov	[ebp+var_1C], 7FFFFFFFh
		mov	eax, [edx]
		mov	ecx, edx
		mov	edx, [eax+8]
		mov	[esp], ecx
		mov	dword ptr [esp+8], 1
		mov	[ebp+var_58], 0FFFFFFFFh
		lea	edx, [eax+edx*4+14h]
		lea	eax, [ebp+var_1C]
		mov	[ebp+var_A4], edx
		mov	[esp+4], eax
		call	ds:_ZN9QListData11detach_growEPii
		mov	edi, [ebp+arg_0]
		mov	[ebp+var_90], eax
		mov	eax, [edi]
		mov	ebx, [eax+8]
		lea	edx, [eax+ebx*4+10h]
		lea	ecx, [edx+4]
		mov	[ebp+var_9C], ecx
		mov	ecx, [ebp+var_1C]
		mov	edi, [ebp+var_9C]
		lea	esi, ds:0[ecx*4]
		add	edi, esi
		cmp	[ebp+var_9C], edi
		mov	[ebp+var_84], edi
		jz	loc_6FFE979C
		add	edx, 8
		mov	eax, [ebp+var_9C]
		mov	[ebp+var_7C], edx
		mov	edx, [ebp+var_A4]
		mov	[ebp+var_60], eax
		mov	[ebp+var_74], edx
		jmp	short loc_6FFE9739
; ---------------------------------------------------------------------------

loc_6FFE9735:				; CODE XREF: sub_6FFE9660+128j
		add	[ebp+var_74], 4

loc_6FFE9739:				; CODE XREF: sub_6FFE9660+D3j
		mov	dword ptr [esp], 10h ; size_t
		mov	[ebp+var_58], 8
		call	sub_6FFEAE70
		mov	ecx, [ebp+var_74]
		mov	[ebp+var_70], eax
		mov	edi, [ebp+var_70]
		mov	eax, [ecx]
		mov	[esp], edi
		mov	[ebp+var_58], 7
		mov	[esp+4], eax
		call	ds:_ZN8QVariantC1ERKS_
		mov	edi, [ebp+var_7C]
		mov	edx, [ebp+var_60]
		mov	ecx, [ebp+var_70]
		mov	[ebp+var_60], edi
		mov	eax, [ebp+var_60]
		add	edi, 4
		cmp	[ebp+var_84], eax
		mov	[edx], ecx
		mov	[ebp+var_7C], edi
		jnz	short loc_6FFE9735
		mov	edx, [ebp+arg_0]
		mov	ecx, [ebp+var_1C]
		mov	eax, [edx]
		lea	esi, ds:0[ecx*4]
		mov	ebx, [eax+8]

loc_6FFE979C:				; CODE XREF: sub_6FFE9660+B5j
		mov	edx, [eax+0Ch]
		lea	edx, [eax+edx*4+14h]
		lea	eax, [eax+ebx*4+14h]
		lea	eax, [eax+ecx*4+4]
		cmp	edx, eax
		mov	[ebp+var_80], edx
		mov	[ebp+var_98], eax
		jz	short loc_6FFE981D
		add	esi, [ebp+var_A4]
		mov	ecx, eax
		add	eax, 4
		mov	[ebp+var_68], eax
		mov	[ebp+var_78], esi
		mov	[ebp+var_64], ecx
		jmp	short loc_6FFE97D4
; ---------------------------------------------------------------------------
		align 10h

loc_6FFE97D0:				; CODE XREF: sub_6FFE9660+1BBj
		add	[ebp+var_78], 4

loc_6FFE97D4:				; CODE XREF: sub_6FFE9660+16Cj
		mov	dword ptr [esp], 10h ; size_t
		mov	[ebp+var_58], 5
		call	sub_6FFEAE70
		mov	edi, [ebp+var_78]
		mov	[ebp+var_6C], eax
		mov	eax, [edi]
		mov	[ebp+var_58], 4
		mov	[esp+4], eax
		mov	eax, [ebp+var_6C]
		mov	[esp], eax
		call	ds:_ZN8QVariantC1ERKS_
		mov	eax, [ebp+var_68]
		mov	ecx, [ebp+var_64]
		mov	edi, [ebp+var_6C]
		add	[ebp+var_68], 4
		cmp	[ebp+var_80], eax
		mov	[ebp+var_64], eax
		mov	[ecx], edi
		jnz	short loc_6FFE97D0

loc_6FFE981D:				; CODE XREF: sub_6FFE9660+156j
		mov	ecx, [ebp+var_90]
		lock dec dword ptr [ecx]
		setnz	al
		test	al, al
		jz	short loc_6FFE9899

loc_6FFE982D:				; CODE XREF: sub_6FFE9660+2B5j
		mov	ecx, [ebp+arg_0]
		mov	eax, [ecx]
		mov	edx, [eax+8]
		mov	dword ptr [esp], 10h ; size_t
		mov	[ebp+var_58], 0Eh
		lea	edx, [eax+edx*4+14h]
		mov	eax, [ebp+var_1C]
		lea	eax, [edx+eax*4]
		mov	[ebp+var_A8], eax
		call	sub_6FFEAE70
		mov	edi, [ebp+arg_4]
		mov	[ebp+var_A0], eax
		mov	[esp], eax
		mov	[ebp+var_58], 2
		mov	[esp+4], edi
		call	ds:_ZN8QVariantC1ERKS_
		mov	ecx, [ebp+var_A0]
		mov	edx, [ebp+var_A8]
		mov	[edx], ecx

loc_6FFE9883:				; CODE XREF: sub_6FFE9660+314j
		lea	eax, [ebp+var_5C]
		mov	[esp], eax
		call	_Unwind_SjLj_Unregister
		add	esp, 0CCh
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_6FFE9899:				; CODE XREF: sub_6FFE9660+1CBj
		mov	eax, [ecx+0Ch]
		mov	edx, ecx
		add	edx, 14h
		lea	eax, [edx+eax*4]
		mov	[ebp+var_88], eax
		mov	eax, [ecx+8]
		lea	eax, [edx+eax*4]
		cmp	[ebp+var_88], eax
		mov	[ebp+var_94], eax
		jz	short loc_6FFE98FF
		xchg	ax, ax

loc_6FFE98C0:				; CODE XREF: sub_6FFE9660+29Dj
		sub	[ebp+var_88], 4
		mov	edi, [ebp+var_88]
		mov	edi, [edi]
		test	edi, edi
		mov	[ebp+var_8C], edi
		jz	short loc_6FFE98F1
		mov	[esp], edi
		mov	[ebp+var_58], 0FFFFFFFFh
		call	ds:_ZN8QVariantD1Ev
		mov	[esp], edi
		call	sub_6FFEAE50

loc_6FFE98F1:				; CODE XREF: sub_6FFE9660+277j
		mov	eax, [ebp+var_88]
		cmp	[ebp+var_94], eax
		jnz	short loc_6FFE98C0

loc_6FFE98FF:				; CODE XREF: sub_6FFE9660+25Cj
		mov	edx, [ebp+var_90]
		mov	[ebp+var_58], 0FFFFFFFFh
		mov	[esp], edx
		call	ds:_Z5qFreePv
		jmp	loc_6FFE982D
; ---------------------------------------------------------------------------

loc_6FFE991A:				; CODE XREF: sub_6FFE9660+3Fj
		mov	[esp], edx
		mov	[ebp+var_58], 0FFFFFFFFh
		call	ds:_ZN9QListData6appendEv
		mov	dword ptr [esp], 10h ; size_t
		mov	[ebp+var_58], 0Ch
		mov	[ebp+var_B0], eax
		call	sub_6FFEAE70
		mov	[ebp+var_AC], eax
		mov	eax, [ebp+arg_4]
		mov	edx, [ebp+var_AC]
		mov	[ebp+var_58], 1
		mov	[esp+4], eax
		mov	[esp], edx
		call	ds:_ZN8QVariantC1ERKS_
		mov	edx, [ebp+var_AC]
		mov	eax, [ebp+var_B0]
		mov	[eax], edx
		jmp	loc_6FFE9883
sub_6FFE9660	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn

sub_6FFE9979	proc near		; DATA XREF: sub_6FFE9660+26o
		add	ebp, 18h
		mov	eax, [ebp-58h]
		mov	ecx, [ebp-54h]
		cmp	eax, 1
		mov	[ebp-0B4h], ecx
		jz	loc_6FFE9B43
		cmp	eax, 2
		jz	loc_6FFE9ABE
		cmp	eax, 3
		jz	loc_6FFE9BB7
		cmp	eax, 4
		jz	loc_6FFE9BC2
		cmp	eax, 5
		nop
		jz	loc_6FFE9C1A
		cmp	eax, 6
		jz	loc_6FFE9A69
		cmp	eax, 7
		jz	loc_6FFE9A74
		cmp	eax, 8
		nop
		lea	esi, [esi+0]
		jz	short loc_6FFE9A48
		cmp	eax, 9
		jz	short loc_6FFE9A48
		cmp	eax, 0Ah
		jz	short loc_6FFE9A27
		cmp	eax, 0Bh
		nop
		jz	short loc_6FFE9A04
		cmp	eax, 0Ch
		jz	loc_6FFE9B96
		cmp	eax, 0Dh
		xchg	ax, ax
		jz	loc_6FFE9B51
		mov	edi, [ebp-0ACh]
		mov	[esp+0], edi
		call	sub_6FFEAE50

loc_6FFE9A04:				; CODE XREF: sub_6FFE9979+67j
		mov	ecx, [ebp-0B4h]
		mov	[esp+0], ecx
		call	sub_6FFEB920
		mov	edi, [ebp+8]
		mov	eax, [edi]
		sub	dword ptr [eax+0Ch], 1
		mov	dword ptr [ebp-58h], 0Bh
		call	sub_6FFEC130
; ---------------------------------------------------------------------------

loc_6FFE9A27:				; CODE XREF: sub_6FFE9979+61j
		mov	dword ptr [ebp-58h], 0
		call	sub_6FFEBBF0
		mov	eax, [ebp-0B4h]
		mov	dword ptr [ebp-58h], 0FFFFFFFFh
		mov	[esp+0], eax
		call	_Unwind_SjLj_Resume
; ---------------------------------------------------------------------------

loc_6FFE9A48:				; CODE XREF: sub_6FFE9979+57j
					; sub_6FFE9979+5Cj
		mov	dword ptr [ebp-58h], 0
		call	sub_6FFEBBF0
		mov	edx, [ebp-0B4h]
		mov	dword ptr [ebp-58h], 0FFFFFFFFh
		mov	[esp+0], edx
		call	_Unwind_SjLj_Resume
; ---------------------------------------------------------------------------

loc_6FFE9A69:				; CODE XREF: sub_6FFE9979+40j
		mov	eax, [ebp-70h]
		mov	[esp+0], eax
		call	sub_6FFEAE50

loc_6FFE9A74:				; CODE XREF: sub_6FFE9979+49j
		mov	ecx, [ebp-0B4h]
		mov	[esp+0], ecx
		call	sub_6FFEB920

loc_6FFE9A82:				; CODE XREF: sub_6FFE9979+129j
					; sub_6FFE9979+143j
		mov	eax, [ebp-60h]
		cmp	[ebp-9Ch], eax
		jz	loc_6FFE9C59
		sub	dword ptr [ebp-60h], 4
		mov	edi, [ebp-60h]
		mov	edi, [edi]
		test	edi, edi
		mov	[ebp-0C4h], edi
		jz	short loc_6FFE9A82
		mov	[esp+0], edi
		mov	dword ptr [ebp-58h], 6
		call	ds:_ZN8QVariantD1Ev
		mov	[esp+0], edi
		call	sub_6FFEAE50
		jmp	short loc_6FFE9A82
; ---------------------------------------------------------------------------

loc_6FFE9ABE:				; CODE XREF: sub_6FFE9979+1Bj
		mov	dword ptr [ebp-58h], 0
		call	sub_6FFEBBF0
		mov	edx, [ebp-0B4h]
		mov	[esp+0], edx
		call	sub_6FFEB920
		mov	ecx, [ebp+8]
		mov	edx, [ecx]
		mov	eax, [edx+8]
		lea	eax, [edx+eax*4+14h]
		mov	[ebp-0C8h], eax
		mov	eax, [ebp-1Ch]
		mov	edi, [ebp-0C8h]
		lea	eax, [edi+eax*4]
		mov	[ebp-0B8h], eax

loc_6FFE9AFC:				; CODE XREF: sub_6FFE9979+1A8j
					; sub_6FFE9979+1C8j
		mov	ecx, [ebp-0B8h]
		cmp	[ebp-0C8h], ecx
		jz	short loc_6FFE9B74
		sub	dword ptr [ebp-0B8h], 4
		mov	eax, [ebp-0B8h]
		mov	eax, [eax]
		test	eax, eax
		mov	[ebp-0BCh], eax
		jz	short loc_6FFE9AFC
		mov	[esp+0], eax
		mov	dword ptr [ebp-58h], 9
		call	ds:_ZN8QVariantD1Ev
		mov	edx, [ebp-0BCh]
		mov	[esp+0], edx
		call	sub_6FFEAE50
		jmp	short loc_6FFE9AFC
; ---------------------------------------------------------------------------

loc_6FFE9B43:				; CODE XREF: sub_6FFE9979+12j
		mov	eax, [ebp-0A0h]
		mov	[esp+0], eax
		call	sub_6FFEAE50

loc_6FFE9B51:				; CODE XREF: sub_6FFE9979+77j
		mov	edi, [ebp-0B4h]
		mov	[esp+0], edi
		call	sub_6FFEB920
		mov	edx, [ebp+8]
		mov	eax, [edx]
		sub	dword ptr [eax+0Ch], 1
		mov	dword ptr [ebp-58h], 0Dh
		call	sub_6FFEC130
; ---------------------------------------------------------------------------

loc_6FFE9B74:				; CODE XREF: sub_6FFE9979+18Fj
		mov	edi, [ebp+8]
		mov	eax, [edi]
		mov	dword ptr [ebp-58h], 9
		mov	[esp+0], eax
		call	ds:_Z5qFreePv
		mov	eax, [ebp-90h]
		mov	[edi], eax
		call	sub_6FFEC130
; ---------------------------------------------------------------------------

loc_6FFE9B96:				; CODE XREF: sub_6FFE9979+6Cj
		mov	dword ptr [ebp-58h], 0
		call	sub_6FFEBBF0
		mov	ecx, [ebp-0B4h]
		mov	dword ptr [ebp-58h], 0FFFFFFFFh
		mov	[esp+0], ecx
		call	_Unwind_SjLj_Resume
; ---------------------------------------------------------------------------

loc_6FFE9BB7:				; CODE XREF: sub_6FFE9979+24j
		mov	edx, [ebp-6Ch]
		mov	[esp+0], edx
		call	sub_6FFEAE50

loc_6FFE9BC2:				; CODE XREF: sub_6FFE9979+2Dj
		mov	edx, [ebp-0B4h]
		mov	[esp+0], edx
		call	sub_6FFEB920

loc_6FFE9BD0:				; CODE XREF: sub_6FFE9979+273j
					; sub_6FFE9979+293j
		mov	eax, [ebp-64h]
		cmp	[ebp-98h], eax
		jz	short loc_6FFE9C0E
		sub	dword ptr [ebp-64h], 4
		mov	ecx, [ebp-64h]
		mov	ecx, [ecx]
		test	ecx, ecx
		mov	[ebp-0C0h], ecx
		jz	short loc_6FFE9BD0
		mov	[esp+0], ecx
		mov	dword ptr [ebp-58h], 3
		call	ds:_ZN8QVariantD1Ev
		mov	edi, [ebp-0C0h]
		mov	[esp+0], edi
		call	sub_6FFEAE50
		jmp	short loc_6FFE9BD0
; ---------------------------------------------------------------------------

loc_6FFE9C0E:				; CODE XREF: sub_6FFE9979+260j
		mov	dword ptr [ebp-58h], 3
		call	sub_6FFEC130
; ---------------------------------------------------------------------------

loc_6FFE9C1A:				; CODE XREF: sub_6FFE9979+37j
		mov	dword ptr [ebp-58h], 0
		call	sub_6FFEBBF0
		mov	edx, [ebp-0B4h]
		mov	[esp+0], edx
		call	sub_6FFEB920
		mov	ecx, [ebp+8]
		mov	eax, [ecx]
		mov	dword ptr [ebp-58h], 0Ah
		mov	[esp+0], eax
		call	ds:_Z5qFreePv
		mov	eax, [ebp-90h]
		mov	edi, [ebp+8]
		mov	[edi], eax
		call	sub_6FFEC130
; ---------------------------------------------------------------------------

loc_6FFE9C59:				; CODE XREF: sub_6FFE9979+112j
		mov	dword ptr [ebp-58h], 6
		call	sub_6FFEC130
sub_6FFE9979	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6FFE9C70	proc near		; CODE XREF: sub_6FFCC720+192p
					; sub_6FFCC720+1D7p ...

var_3C		= dword	ptr -3Ch
var_20		= dword	ptr -20h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4

		sub	esp, 3Ch
		mov	edx, [esp+3Ch+arg_0]
		mov	[esp+3Ch+var_10], ebx
		mov	[esp+3Ch+var_C], esi
		mov	[esp+3Ch+var_8], edi
		mov	[esp+3Ch+var_4], ebp
		mov	eax, [edx]
		lock dec dword ptr [eax]
		setnz	cl
		test	cl, cl
		jz	short loc_6FFE9CA7
		mov	ebx, [esp+3Ch+var_10]
		mov	esi, [esp+3Ch+var_C]
		mov	edi, [esp+3Ch+var_8]
		mov	ebp, [esp+3Ch+var_4]
		add	esp, 3Ch
		retn
; ---------------------------------------------------------------------------

loc_6FFE9CA7:				; CODE XREF: sub_6FFE9C70+21j
		mov	edx, [edx]
		mov	eax, edx
		mov	ecx, edx
		mov	[esp+3Ch+var_20], edx
		mov	edx, [edx+0Ch]
		add	eax, 14h
		lea	ebx, [eax+edx*4]
		mov	edx, [ecx+8]
		lea	edi, [eax+edx*4]
		cmp	ebx, edi
		jz	short loc_6FFE9CEA
		mov	ebp, ds:_ZN8QVariantD1Ev
		lea	esi, [esi+0]

loc_6FFE9CD0:				; CODE XREF: sub_6FFE9C70+78j
		sub	ebx, 4
		mov	esi, [ebx]
		test	esi, esi
		jz	short loc_6FFE9CE6
		mov	[esp+3Ch+var_3C], esi
		call	ebp ; _ZN8QVariantD1Ev
		mov	[esp+3Ch+var_3C], esi
		call	sub_6FFEAE50

loc_6FFE9CE6:				; CODE XREF: sub_6FFE9C70+67j
		cmp	edi, ebx
		jnz	short loc_6FFE9CD0

loc_6FFE9CEA:				; CODE XREF: sub_6FFE9C70+52j
		mov	eax, [esp+3Ch+var_20]
		mov	ebx, [esp+3Ch+var_10]
		mov	esi, [esp+3Ch+var_C]
		mov	edi, [esp+3Ch+var_8]
		mov	[esp+3Ch+arg_0], eax
		mov	eax, ds:_Z5qFreePv
		mov	ebp, [esp+3Ch+var_4]
		add	esp, 3Ch
		jmp	eax
sub_6FFE9C70	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6FFE9D10	proc near		; CODE XREF: sub_6FFC56B0+114p
					; sub_6FFC78B0+11Fp

var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4

		sub	esp, 1Ch
		mov	[esp+1Ch+var_8], esi
		mov	esi, [esp+1Ch+arg_0]
		mov	[esp+1Ch+var_C], ebx
		mov	[esp+1Ch+var_4], edi
		mov	eax, [esi]
		mov	edx, [eax+8]
		lea	edi, [eax+edx*4+14h]
		mov	eax, [eax+4]
		mov	[esp+1Ch+var_1C], esi
		mov	[esp+1Ch+var_18], eax
		call	ds:_ZN9QListData6detachEi
		mov	ebx, eax
		mov	eax, [esi]
		mov	edx, [eax+8]
		mov	ecx, [eax+0Ch]
		lea	edx, [eax+edx*4+14h]
		cmp	edi, edx
		jz	short loc_6FFE9D59
		lea	eax, [eax+ecx*4+14h]
		sub	eax, edx
		cmp	eax, 3
		jg	short loc_6FFE9D80

loc_6FFE9D59:				; CODE XREF: sub_6FFE9D10+3Cj
					; sub_6FFE9D10+83j
		lock dec dword ptr [ebx]
		setnz	al
		test	al, al
		jnz	short loc_6FFE9D6C
		mov	[esp+1Ch+var_1C], ebx
		call	ds:_Z5qFreePv

loc_6FFE9D6C:				; CODE XREF: sub_6FFE9D10+51j
		mov	ebx, [esp+1Ch+var_C]
		mov	esi, [esp+1Ch+var_8]
		mov	edi, [esp+1Ch+var_4]
		add	esp, 1Ch
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6FFE9D80:				; CODE XREF: sub_6FFE9D10+47j
		and	eax, 0FFFFFFFCh
		mov	[esp+1Ch+var_14], eax ;	size_t
		mov	[esp+1Ch+var_18], edi ;	void *
		mov	[esp+1Ch+var_1C], edx ;	void *
		call	memcpy
		jmp	short loc_6FFE9D59
sub_6FFE9D10	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6FFE9DA0	proc near		; CODE XREF: sub_6FFC4330+34Ap
					; sub_6FFC4685+19p ...

arg_0		= dword	ptr  4

		sub	esp, 0Ch
		mov	edx, [esp+0Ch+arg_0]
		mov	eax, [edx]
		lock dec dword ptr [eax]
		setnz	cl
		test	cl, cl
		jz	short loc_6FFE9DB7
		add	esp, 0Ch
		retn
; ---------------------------------------------------------------------------

loc_6FFE9DB7:				; CODE XREF: sub_6FFE9DA0+11j
		mov	eax, [edx]
		mov	[esp+0Ch+arg_0], eax
		mov	eax, ds:_Z5qFreePv
		add	esp, 0Ch
		jmp	eax
sub_6FFE9DA0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_6FFE9DD0	proc near		; CODE XREF: sub_6FFC1EB0+135p
					; sub_6FFC1FF6+16p ...

var_60		= dword	ptr -60h
var_5C		= byte ptr -5Ch
var_58		= dword	ptr -58h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_1C		= dword	ptr -1Ch
var_18		= byte ptr -18h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 88h
		lea	eax, [ebp+var_18]
		mov	[ebp+var_3C], eax
		lea	eax, [ebp+var_5C]
		mov	[esp], eax
		mov	[ebp+var_C], ebx
		mov	[ebp+var_8], esi
		mov	[ebp+var_4], edi
		mov	[ebp+var_44], offset sub_6FFEC1F0
		mov	[ebp+var_40], offset dword_6FFEC8A4
		mov	[ebp+var_38], offset sub_6FFE9F53
		mov	[ebp+var_34], esp
		call	_Unwind_SjLj_Register
		mov	edx, [ebp+arg_0]
		mov	eax, [edx]
		mov	edx, [eax+0Ch]
		sub	edx, 1
		test	edx, edx
		mov	[eax+0Ch], edx
		jnz	short loc_6FFE9E5F
		cmp	byte ptr [eax+15h], 0
		mov	[ebp+var_60], eax
		jnz	short loc_6FFE9E77

loc_6FFE9E26:				; CODE XREF: sub_6FFE9DD0+16Bj
		mov	edx, [ebp+var_60]
		test	edx, edx
		jz	short loc_6FFE9E5F

loc_6FFE9E2D:				; CODE XREF: sub_6FFE9DD0+12Aj
		mov	edx, [ebp+var_60]
		mov	eax, [edx+8]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jz	loc_6FFE9F05

loc_6FFE9E41:				; CODE XREF: sub_6FFE9DD0+14Bj
		mov	edx, [ebp+var_60]
		mov	[ebp+var_58], 0FFFFFFFFh
		mov	[esp], edx
		call	ds:_ZN11QTextStreamD1Ev
		mov	eax, [ebp+var_60]
		mov	[esp], eax
		call	sub_6FFEAE50

loc_6FFE9E5F:				; CODE XREF: sub_6FFE9DD0+4Bj
					; sub_6FFE9DD0+5Bj ...
		lea	eax, [ebp+var_5C]
		mov	[esp], eax
		call	_Unwind_SjLj_Unregister
		mov	ebx, [ebp+var_C]
		mov	esi, [ebp+var_8]
		mov	edi, [ebp+var_4]
		mov	esp, ebp
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_6FFE9E77:				; CODE XREF: sub_6FFE9DD0+54j
		mov	edx, eax
		add	edx, 8
		lea	eax, [ebp+var_1C]
		mov	[esp+4], edx
		mov	[esp], eax
		mov	[ebp+var_58], 3
		call	ds:_ZNK7QString11toLocal8BitEv
		mov	eax, [ebp+var_1C]
		sub	esp, 4
		mov	edx, [eax]
		cmp	edx, 1
		jz	loc_6FFE9F40

loc_6FFE9EA4:				; CODE XREF: sub_6FFE9DD0+178j
		mov	eax, [eax+8]
		mov	[ebp+var_58], 2
		mov	[esp+4], eax
		lea	eax, [ebp+var_1C]
		mov	[esp], eax
		call	ds:_ZN10QByteArray7reallocEi
		mov	eax, [ebp+var_1C]
		mov	edx, [eax+0Ch]

loc_6FFE9EC4:				; CODE XREF: sub_6FFE9DD0+17Ej
		mov	[esp+4], edx
		mov	edx, [ebp+arg_0]
		mov	eax, [edx]
		mov	eax, [eax+10h]
		mov	[ebp+var_58], 2
		mov	[esp], eax
		call	ds:_Z17qt_message_output9QtMsgTypePKc
		mov	eax, [ebp+var_1C]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jz	short loc_6FFE9F20

loc_6FFE9EED:				; CODE XREF: sub_6FFE9F53+8Cj
		mov	eax, [ebp+arg_0]
		mov	eax, [eax]
		mov	[ebp+var_60], eax
		mov	edx, [ebp+var_60]
		test	edx, edx
		jnz	loc_6FFE9E2D
		jmp	loc_6FFE9E5F
; ---------------------------------------------------------------------------

loc_6FFE9F05:				; CODE XREF: sub_6FFE9DD0+6Bj
		mov	edx, [ebp+var_60]
		mov	eax, [edx+8]
		mov	[ebp+var_58], 1
		mov	[esp], eax
		call	ds:_ZN7QString4freeEPNS_4DataE
		jmp	loc_6FFE9E41
; ---------------------------------------------------------------------------

loc_6FFE9F20:				; CODE XREF: sub_6FFE9DD0+11Bj
		mov	eax, [ebp+var_1C]
		mov	[ebp+var_58], 3
		mov	[esp], eax
		call	ds:_Z5qFreePv
		mov	edx, [ebp+arg_0]
		mov	edx, [edx]
		mov	[ebp+var_60], edx
		jmp	loc_6FFE9E26
; ---------------------------------------------------------------------------

loc_6FFE9F40:				; CODE XREF: sub_6FFE9DD0+CEj
		mov	edx, [eax+0Ch]
		lea	ecx, [eax+10h]
		cmp	edx, ecx
		jnz	loc_6FFE9EA4
		jmp	loc_6FFE9EC4
sub_6FFE9DD0	endp


; =============== S U B	R O U T	I N E =======================================


sub_6FFE9F53	proc near		; DATA XREF: sub_6FFE9DD0+2Co
		add	ebp, 18h
		mov	edx, [ebp-58h]
		mov	eax, [ebp-54h]
		cmp	edx, 1
		mov	[ebp-68h], eax
		mov	eax, [ebp-50h]
		jz	short loc_6FFE9F91
		cmp	edx, 2
		jz	short loc_6FFE9FC3
		mov	edx, [ebp-60h]
		mov	dword ptr [ebp-58h], 0
		mov	[esp+0], edx
		call	ds:_ZN11QTextStreamD1Ev

loc_6FFE9F7F:				; CODE XREF: sub_6FFE9F53+73j
		mov	eax, [ebp-68h]
		mov	dword ptr [ebp-58h], 0FFFFFFFFh
		mov	[esp+0], eax
		call	_Unwind_SjLj_Resume
; ---------------------------------------------------------------------------

loc_6FFE9F91:				; CODE XREF: sub_6FFE9F53+12j
		mov	[ebp-6Ch], eax
		mov	eax, [ebp-68h]
		mov	[ebp-64h], eax
		mov	eax, [ebp-1Ch]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jnz	short loc_6FFE9FBA
		mov	eax, [ebp-1Ch]
		mov	dword ptr [ebp-58h], 0
		mov	[esp+0], eax
		call	ds:_Z5qFreePv

loc_6FFE9FBA:				; CODE XREF: sub_6FFE9F53+52j
		mov	edx, [ebp-64h]
		mov	eax, [ebp-6Ch]
		mov	[ebp-68h], edx

loc_6FFE9FC3:				; CODE XREF: sub_6FFE9F53+17j
		cmp	eax, 1
		jnz	short loc_6FFE9F7F
		mov	edx, [ebp-68h]
		mov	[esp+0], edx
		call	sub_6FFEB920
		mov	dword ptr [ebp-58h], 0
		call	sub_6FFEBBF0
		jmp	loc_6FFE9EED
sub_6FFE9F53	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_6FFE9FF0	proc near		; CODE XREF: sub_6FFC1EB0+D5p
					; sub_6FFC1EB0+E5p ...

var_4C		= byte ptr -4Ch
var_48		= dword	ptr -48h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_C		= dword	ptr -0Ch
var_8		= byte ptr -8
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 68h
		lea	eax, [ebp+var_8]
		mov	[ebp+var_2C], eax
		lea	eax, [ebp+var_4C]
		mov	[esp], eax
		mov	[ebp+var_24], esp
		mov	[ebp+var_34], offset sub_6FFEC1F0
		mov	[ebp+var_30], offset dword_6FFEC87C
		mov	[ebp+var_28], offset sub_6FFEA0B3
		call	_Unwind_SjLj_Register
		mov	eax, [ebp+arg_4]
		lea	edx, [ebp+var_C]
		mov	[esp], edx
		mov	dword ptr [esp+8], 0FFFFFFFFh
		mov	[ebp+var_48], 0FFFFFFFFh
		mov	[esp+4], eax
		call	ds:_ZN7QString9fromAsciiEPKci
		mov	edx, [ebp+arg_0]
		lea	eax, [ebp+var_C]
		sub	esp, 4
		mov	[esp+4], eax
		mov	eax, [edx]
		mov	[ebp+var_48], 1
		mov	[esp], eax
		call	ds:_ZN11QTextStreamlsERK7QString
		mov	eax, [ebp+var_C]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jnz	short loc_6FFEA080
		mov	eax, [ebp+var_C]
		mov	[ebp+var_48], 0FFFFFFFFh
		mov	[esp], eax
		call	ds:_ZN7QString4freeEPNS_4DataE

loc_6FFEA080:				; CODE XREF: sub_6FFE9FF0+7Bj
		mov	edx, [ebp+arg_0]
		mov	eax, [edx]
		cmp	byte ptr [eax+14h], 0
		jz	short loc_6FFEA0A3
		mov	dword ptr [esp+4], 20h
		mov	[esp], eax
		mov	[ebp+var_48], 0FFFFFFFFh
		call	ds:_ZN11QTextStreamlsEc

loc_6FFEA0A3:				; CODE XREF: sub_6FFE9FF0+99j
		lea	eax, [ebp+var_4C]
		mov	[esp], eax
		call	_Unwind_SjLj_Unregister
		mov	eax, [ebp+arg_0]
		leave
		retn
sub_6FFE9FF0	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn

sub_6FFEA0B3	proc near		; DATA XREF: sub_6FFE9FF0+23o
		add	ebp, 8
		mov	eax, [ebp-44h]
		mov	dword ptr [ebp-48h], 0
		mov	[ebp-50h], eax
		lea	eax, [ebp-0Ch]
		mov	[esp+0], eax
		call	sub_6FFEA140
		mov	edx, [ebp-50h]
		mov	dword ptr [ebp-48h], 0FFFFFFFFh
		mov	[esp+0], edx
		call	_Unwind_SjLj_Resume
sub_6FFEA0B3	endp


; =============== S U B	R O U T	I N E =======================================


sub_6FFEA0E0	proc near		; CODE XREF: sub_6FFE1870+916p

var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	esi
		push	ebx
		sub	esp, 14h
		mov	esi, ds:_ZN11QTextStreamlsEc
		mov	ebx, [esp+1Ch+arg_0]
		mov	[esp+1Ch+var_18], 22h
		mov	eax, [ebx]
		mov	[esp+1Ch+var_1C], eax
		call	esi ; _ZN11QTextStreamlsEc
		mov	edx, [esp+1Ch+arg_4]
		mov	[esp+1Ch+var_18], edx
		mov	[esp+1Ch+var_1C], eax
		call	ds:_ZN11QTextStreamlsERK7QString
		mov	[esp+1Ch+var_18], 22h
		mov	[esp+1Ch+var_1C], eax
		call	esi ; _ZN11QTextStreamlsEc
		mov	eax, [ebx]
		cmp	byte ptr [eax+14h], 0
		jz	short loc_6FFEA131
		mov	[esp+1Ch+var_18], 20h
		mov	[esp+1Ch+var_1C], eax
		call	esi ; _ZN11QTextStreamlsEc

loc_6FFEA131:				; CODE XREF: sub_6FFEA0E0+42j
		mov	eax, ebx
		add	esp, 14h
		pop	ebx
		pop	esi
		retn
sub_6FFEA0E0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6FFEA140	proc near		; CODE XREF: sub_6FFC27A8+54p
					; sub_6FFC27A8+ABp ...

arg_0		= dword	ptr  4

		sub	esp, 0Ch
		mov	edx, [esp+0Ch+arg_0]
		mov	eax, [edx]
		lock dec dword ptr [eax]
		setnz	cl
		test	cl, cl
		jz	short loc_6FFEA157
		add	esp, 0Ch
		retn
; ---------------------------------------------------------------------------

loc_6FFEA157:				; CODE XREF: sub_6FFEA140+11j
		mov	eax, [edx]
		mov	[esp+0Ch+arg_0], eax
		mov	eax, ds:_ZN7QString4freeEPNS_4DataE
		add	esp, 0Ch
		jmp	eax
sub_6FFEA140	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_6FFEA170	proc near		; CODE XREF: .text:6FFEB69Ep
					; sub_6FFEB891+40p

var_3C		= byte ptr -3Ch
var_38		= dword	ptr -38h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_8		= byte ptr -8
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 58h
		lea	eax, [ebp+var_8]
		mov	[ebp+var_1C], eax
		lea	eax, [ebp+var_3C]
		mov	[esp], eax
		mov	[ebp+var_24], offset sub_6FFEC1F0
		mov	[ebp+var_20], offset dword_6FFED4CC
		mov	[ebp+var_18], offset sub_6FFEA1F8
		mov	[ebp+var_14], esp
		call	_Unwind_SjLj_Register
		mov	edx, dword_6FFEE05C
		mov	eax, [ebp+arg_0]
		test	edx, edx
		mov	eax, [eax]
		jz	short loc_6FFEA1C1
		mov	[esp], eax
		mov	[ebp+var_38], 1
		call	sub_6FFDB870
		test	eax, eax
		jnz	short loc_6FFEA1CE

loc_6FFEA1C1:				; CODE XREF: sub_6FFEA170+3Cj
		lea	eax, [ebp+var_3C]
		mov	[esp], eax
		call	_Unwind_SjLj_Unregister
		leave
		retn
; ---------------------------------------------------------------------------

loc_6FFEA1CE:				; CODE XREF: sub_6FFEA170+4Fj
		mov	dword ptr [esp], 4
		call	sub_6FFEB6C0
		mov	dword ptr [eax], offset	off_6FFF9F80
		mov	dword ptr [esp+8], offset sub_6FFEA2B0
		mov	dword ptr [esp+4], offset off_6FFF9A88
		mov	[esp], eax
		call	sub_6FFEC190
sub_6FFEA170	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn

sub_6FFEA1F8	proc near		; DATA XREF: sub_6FFEA170+20o
		add	ebp, 8
		cmp	dword ptr [ebp-30h], 0FFFFFFFFh
		mov	eax, [ebp-34h]
		jz	short loc_6FFEA213
		mov	[esp+0], eax
		mov	dword ptr [ebp-38h], 0FFFFFFFFh
		call	_Unwind_SjLj_Resume
; ---------------------------------------------------------------------------

loc_6FFEA213:				; CODE XREF: sub_6FFEA1F8+Aj
		mov	[esp+0], eax
		mov	dword ptr [ebp-38h], 0FFFFFFFFh
		call	sub_6FFEBA60
sub_6FFEA1F8	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6FFEA230	proc near		; DATA XREF: .rdata:6FFF9F6Co

var_1C		= dword	ptr -1Ch
arg_0		= dword	ptr  4

		push	ebx
		sub	esp, 18h
		mov	ebx, [esp+1Ch+arg_0]
		mov	dword ptr [ebx], offset	off_6FFF9F68
		mov	[esp+1Ch+var_1C], ebx
		call	sub_6FFEAD90
		mov	[esp+1Ch+arg_0], ebx
		add	esp, 18h
		pop	ebx
		jmp	sub_6FFEAE50
sub_6FFEA230	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6FFEA260	proc near		; DATA XREF: .text:6FFEB63Ao
					; sub_6FFEB6C0+1B9o ...

arg_0		= dword	ptr  4

		sub	esp, 0Ch
		mov	eax, [esp+0Ch+arg_0]
		mov	dword ptr [eax], offset	off_6FFF9F68
		add	esp, 0Ch
		jmp	sub_6FFEAD90
sub_6FFEA260	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6FFEA280	proc near		; DATA XREF: .rdata:6FFF9F84o

var_1C		= dword	ptr -1Ch
arg_0		= dword	ptr  4

		push	ebx
		sub	esp, 18h
		mov	ebx, [esp+1Ch+arg_0]
		mov	dword ptr [ebx], offset	off_6FFF9F80
		mov	[esp+1Ch+var_1C], ebx
		call	sub_6FFEAD90
		mov	[esp+1Ch+arg_0], ebx
		add	esp, 18h
		pop	ebx
		jmp	sub_6FFEAE50
sub_6FFEA280	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6FFEA2B0	proc near		; DATA XREF: sub_6FFEA170+70o
					; .text:6FFEB610o ...

arg_0		= dword	ptr  4

		sub	esp, 0Ch
		mov	eax, [esp+0Ch+arg_0]
		mov	dword ptr [eax], offset	off_6FFF9F80
		add	esp, 0Ch
		jmp	sub_6FFEAD90
sub_6FFEA2B0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn bp-based	frame

sub_6FFEA2D0	proc near		; DATA XREF: .data:off_6FFF2A88o

var_54		= dword	ptr -54h
var_50		= dword	ptr -50h
var_4C		= byte ptr -4Ch
var_48		= dword	ptr -48h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_C		= dword	ptr -0Ch
var_8		= byte ptr -8

		push	ebp
		mov	ebp, esp
		sub	esp, 78h
		lea	eax, [ebp+var_8]
		mov	[ebp+var_2C], eax
		lea	eax, [ebp+var_4C]
		mov	[ebp+var_34], offset sub_6FFEC1F0
		mov	[ebp+var_30], offset dword_6FFED524
		mov	[ebp+var_28], offset sub_6FFEA47D
		mov	[ebp+var_24], esp
		mov	[esp], eax
		call	_Unwind_SjLj_Register
		cmp	byte_6FFF2ABC, 0
		jz	short loc_6FFEA340
		mov	eax, ds:_iob
		mov	dword ptr [esp+8], 1Dh ; size_t
		mov	dword ptr [esp+4], 1 ; size_t
		mov	dword ptr [esp], offset	aTerminateCalle	; "terminate called recursively\n"
		add	eax, 40h
		mov	[esp+0Ch], eax	; FILE *
		mov	[ebp+var_48], 0FFFFFFFFh
		call	fwrite
		call	abort
; ---------------------------------------------------------------------------
		align 10h

loc_6FFEA340:				; CODE XREF: sub_6FFEA2D0+36j
		mov	byte_6FFF2ABC, 1
		mov	[ebp+var_48], 0FFFFFFFFh
		call	sub_6FFEBBC0
		test	eax, eax
		jz	loc_6FFEA435
		mov	eax, [eax+4]
		mov	[ebp+var_C], 0FFFFFFFFh
		mov	dword ptr [esp+8], 0 ; int
		mov	dword ptr [esp+4], 0 ; char *
		mov	[ebp+var_50], eax
		lea	eax, [ebp+var_C]
		mov	[esp+0Ch], eax	; int
		mov	eax, [ebp+var_50]
		mov	[esp], eax	; int
		call	sub_6FFDA290
		mov	dword ptr [esp+8], 30h ; size_t
		mov	dword ptr [esp+4], 1 ; size_t
		mov	dword ptr [esp], offset	aTerminateCal_0	; "terminate called after throwing an inst"...
		mov	[ebp+var_54], eax
		mov	eax, ds:_iob
		add	eax, 40h
		mov	[esp+0Ch], eax	; FILE *
		call	fwrite
		mov	edx, [ebp+var_C]
		test	edx, edx
		jnz	short loc_6FFEA415
		mov	eax, ds:_iob
		add	eax, 40h
		mov	[esp+4], eax	; FILE *
		mov	eax, [ebp+var_54]
		mov	[esp], eax	; char *
		call	fputs

loc_6FFEA3D3:				; CODE XREF: sub_6FFEA2D0+163j
		mov	eax, ds:_iob
		mov	dword ptr [esp+8], 2 ; size_t
		mov	dword ptr [esp+4], 1 ; size_t
		mov	dword ptr [esp], offset	asc_6FFF8521 ; "'\n"
		add	eax, 40h
		mov	[esp+0Ch], eax	; FILE *
		mov	[ebp+var_48], 0FFFFFFFFh
		call	fwrite
		mov	eax, [ebp+var_C]
		test	eax, eax
		jz	short loc_6FFEA470

loc_6FFEA409:				; CODE XREF: sub_6FFEA2D0+1ABj
		mov	[ebp+var_48], 2
		call	sub_6FFEC130
; ---------------------------------------------------------------------------

loc_6FFEA415:				; CODE XREF: sub_6FFEA2D0+EAj
		mov	eax, ds:_iob
		mov	[ebp+var_48], 0FFFFFFFFh
		add	eax, 40h
		mov	[esp+4], eax	; FILE *
		mov	eax, [ebp+var_50]
		mov	[esp], eax	; char *
		call	fputs
		jmp	short loc_6FFEA3D3
; ---------------------------------------------------------------------------

loc_6FFEA435:				; CODE XREF: sub_6FFEA2D0+85j
		mov	eax, ds:_iob
		mov	dword ptr [esp+8], 2Dh ; size_t
		mov	dword ptr [esp+4], 1 ; size_t
		mov	dword ptr [esp], offset	aTerminateCal_1	; "terminate called without an active exce"...
		add	eax, 40h
		mov	[esp+0Ch], eax	; FILE *
		mov	[ebp+var_48], 0FFFFFFFFh
		call	fwrite

loc_6FFEA464:				; CODE XREF: sub_6FFEA47D+4Cj
		mov	[ebp+var_48], 0FFFFFFFFh
		call	abort
; ---------------------------------------------------------------------------

loc_6FFEA470:				; CODE XREF: sub_6FFEA2D0+137j
		mov	eax, [ebp+var_54]
		mov	[esp], eax	; void *
		call	free
		jmp	short loc_6FFEA409
sub_6FFEA2D0	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn

; int __cdecl sub_6FFEA47D(size_t, size_t, FILE	*)
sub_6FFEA47D	proc near		; DATA XREF: sub_6FFEA2D0+1Do

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		add	ebp, 8
		mov	eax, [ebp-44h]
		cmp	dword ptr [ebp-48h], 1
		mov	[ebp-58h], eax
		mov	eax, [ebp-40h]
		jz	short loc_6FFEA4AD
		mov	dword ptr [ebp-48h], 0
		call	sub_6FFEBBF0
		mov	eax, [ebp-58h]
		mov	dword ptr [ebp-48h], 0FFFFFFFFh
		mov	[esp+0], eax
		call	_Unwind_SjLj_Resume
; ---------------------------------------------------------------------------

loc_6FFEA4AD:				; CODE XREF: sub_6FFEA47D+10j
		cmp	eax, 2
		jz	short loc_6FFEA4CB
		mov	eax, [ebp-58h]
		mov	[esp+0], eax
		call	sub_6FFEB920

loc_6FFEA4BD:				; CODE XREF: sub_6FFEA47D+C4j
		mov	dword ptr [ebp-48h], 0
		call	sub_6FFEBBF0
		jmp	short loc_6FFEA464
; ---------------------------------------------------------------------------

loc_6FFEA4CB:				; CODE XREF: sub_6FFEA47D+33j
		mov	eax, [ebp-58h]
		mov	[esp+0], eax
		call	sub_6FFEB920
		mov	edx, [eax]
		mov	[esp+0], eax
		mov	eax, [edx+8]
		mov	dword ptr [ebp-48h], 1
		call	eax
		mov	[ebp-5Ch], eax
		mov	eax, ds:_iob
		mov	[esp+arg_4], 0Bh ; size_t
		mov	[esp+arg_0], 1	; size_t
		mov	dword ptr [esp+0], offset aWhat	; "  what():  "
		add	eax, 40h
		mov	[esp+arg_8], eax ; FILE	*
		call	fwrite
		mov	eax, ds:_iob
		add	eax, 40h
		mov	[esp+arg_0], eax ; FILE	*
		mov	eax, [ebp-5Ch]
		mov	[esp+0], eax	; char *
		call	fputs
		mov	eax, ds:_iob
		mov	dword ptr [esp+0], 0Ah ; int
		add	eax, 40h
		mov	[esp+arg_0], eax ; FILE	*
		call	fputc
		jmp	loc_6FFEA4BD
sub_6FFEA47D	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6FFEA550	proc near		; DATA XREF: .rdata:6FFF9ED8o
					; .rdata:6FFF9F38o

var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		sub	esp, 2Ch
		mov	[esp+2Ch+var_10], ebx
		mov	ebx, [esp+2Ch+arg_4]
		mov	[esp+2Ch+var_C], esi
		mov	esi, [esp+2Ch+arg_0]
		mov	[esp+2Ch+var_8], edi
		mov	edi, [esp+2Ch+arg_C]
		mov	[esp+2Ch+var_4], ebp
		mov	ebp, [esp+2Ch+arg_8]
		mov	[esp+2Ch+var_28], ebx
		mov	[esp+2Ch+var_2C], esi
		call	sub_6FFEAC80
		mov	edx, eax
		mov	eax, 1
		test	dl, dl
		jnz	short loc_6FFEA591
		xor	eax, eax
		cmp	edi, 3
		jbe	short loc_6FFEA5A5

loc_6FFEA591:				; CODE XREF: sub_6FFEA550+38j
		mov	ebx, [esp+2Ch+var_10]
		mov	esi, [esp+2Ch+var_C]
		mov	edi, [esp+2Ch+var_8]
		mov	ebp, [esp+2Ch+var_4]
		add	esp, 2Ch
		retn
; ---------------------------------------------------------------------------

loc_6FFEA5A5:				; CODE XREF: sub_6FFEA550+3Fj
		mov	eax, [ebx]
		mov	[esp+2Ch+arg_8], ebp
		mov	edi, [esp+2Ch+var_8]
		mov	[esp+2Ch+arg_4], esi
		mov	ebp, [esp+2Ch+var_4]
		mov	[esp+2Ch+arg_0], ebx
		mov	esi, [esp+2Ch+var_C]
		mov	eax, [eax+14h]
		mov	ebx, [esp+2Ch+var_10]
		add	esp, 2Ch
		jmp	eax
sub_6FFEA550	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6FFEA5D0	proc near		; CODE XREF: sub_6FFEA730+32p
					; DATA XREF: .rdata:6FFF9EE0o

var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		push	ebx
		sub	esp, 18h
		mov	eax, [esp+1Ch+arg_4]
		mov	ebx, [esp+1Ch+arg_C]
		mov	[esp+1Ch+var_18], eax
		mov	eax, [esp+1Ch+arg_0]
		mov	[esp+1Ch+var_1C], eax
		call	sub_6FFEAC80
		mov	edx, eax
		xor	eax, eax
		test	dl, dl
		jz	short loc_6FFEA60D
		mov	eax, [esp+1Ch+arg_8]
		mov	dword ptr [ebx+0Ch], 8
		mov	dword ptr [ebx+4], 6
		mov	[ebx], eax
		mov	eax, 1

loc_6FFEA60D:				; CODE XREF: sub_6FFEA5D0+22j
		add	esp, 18h
		pop	ebx
		retn
sub_6FFEA5D0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6FFEA620	proc near		; DATA XREF: .rdata:6FFF9EDCo
					; .rdata:6FFF9F3Co

var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	ebx
		sub	esp, 28h
		mov	eax, [esp+2Ch+arg_0]
		lea	ecx, [esp+2Ch+var_1C]
		mov	ebx, [esp+2Ch+arg_8]
		mov	[esp+2Ch+var_1C], 0
		mov	[esp+2Ch+var_18], 0
		mov	edx, [eax]
		mov	[esp+2Ch+var_20], ecx
		mov	ecx, [ebx]
		mov	[esp+2Ch+var_14], 10h
		mov	[esp+2Ch+var_10], 0
		mov	[esp+2Ch+var_2C], eax
		mov	[esp+2Ch+var_24], ecx
		mov	ecx, [esp+2Ch+arg_4]
		mov	[esp+2Ch+var_28], ecx
		call	dword ptr [edx+18h]
		mov	edx, [esp+2Ch+var_18]
		xor	eax, eax
		and	edx, 6
		cmp	edx, 6
		jnz	short loc_6FFEA683
		mov	eax, [esp+2Ch+var_1C]
		mov	[ebx], eax
		mov	eax, 1

loc_6FFEA683:				; CODE XREF: sub_6FFEA620+56j
		add	esp, 28h
		pop	ebx
		retn
sub_6FFEA620	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6FFEA690	proc near		; DATA XREF: .rdata:6FFF9EE4o

var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h
arg_18		= dword	ptr  1Ch
arg_1C		= dword	ptr  20h

		sub	esp, 2Ch
		mov	[esp+2Ch+var_10], ebx
		mov	ebx, [esp+2Ch+arg_10]
		cmp	ebx, [esp+2Ch+arg_18]
		mov	[esp+2Ch+var_C], esi
		mov	esi, [esp+2Ch+arg_0]
		mov	[esp+2Ch+var_8], edi
		mov	edi, [esp+2Ch+arg_1C]
		mov	[esp+2Ch+var_4], ebp
		mov	ebp, [esp+2Ch+arg_8]
		jz	short loc_6FFEA6F0

loc_6FFEA6B9:				; CODE XREF: sub_6FFEA690+72j
		mov	eax, [esp+2Ch+arg_C]
		mov	[esp+2Ch+var_2C], esi
		mov	[esp+2Ch+var_28], eax
		call	sub_6FFEAC80
		test	al, al
		jz	short loc_6FFEA6D9
		mov	[edi], ebx
		mov	[edi+4], ebp
		mov	dword ptr [edi+0Ch], 1

loc_6FFEA6D9:				; CODE XREF: sub_6FFEA690+3Bj
					; sub_6FFEA690+77j
		xor	eax, eax
		mov	ebx, [esp+2Ch+var_10]
		mov	esi, [esp+2Ch+var_C]
		mov	edi, [esp+2Ch+var_8]
		mov	ebp, [esp+2Ch+var_4]
		add	esp, 2Ch
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6FFEA6F0:				; CODE XREF: sub_6FFEA690+27j
		mov	eax, [esp+2Ch+arg_14]
		mov	[esp+2Ch+var_2C], esi
		mov	[esp+2Ch+var_28], eax
		call	sub_6FFEAC80
		test	al, al
		jz	short loc_6FFEA6B9
		mov	[edi+8], ebp
		jmp	short loc_6FFEA6D9
sub_6FFEA690	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6FFEA710	proc near		; DATA XREF: .rdata:6FFF9EE8o

arg_8		= dword	ptr  0Ch
arg_10		= dword	ptr  14h

		mov	eax, [esp+arg_10]
		cmp	eax, [esp+arg_8]
		setz	al
		movzx	eax, al
		lea	eax, [eax+eax*4+1]
		retn
sub_6FFEA710	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6FFEA730	proc near		; DATA XREF: .rdata:6FFF9F40o

var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		sub	esp, 2Ch
		mov	[esp+2Ch+var_10], ebx
		mov	ebx, [esp+2Ch+arg_4]
		mov	[esp+2Ch+var_C], esi
		mov	esi, [esp+2Ch+arg_8]
		mov	[esp+2Ch+var_8], edi
		mov	edi, [esp+2Ch+arg_C]
		mov	[esp+2Ch+var_4], ebp
		mov	ebp, [esp+2Ch+arg_0]
		mov	[esp+2Ch+var_28], ebx
		mov	[esp+2Ch+var_24], esi
		mov	[esp+2Ch+var_20], edi
		mov	[esp+2Ch+var_2C], ebp
		call	sub_6FFEA5D0
		test	al, al
		jz	short loc_6FFEA784
		mov	eax, 1
		mov	ebx, [esp+2Ch+var_10]
		mov	esi, [esp+2Ch+var_C]
		mov	edi, [esp+2Ch+var_8]
		mov	ebp, [esp+2Ch+var_4]
		add	esp, 2Ch
		retn
; ---------------------------------------------------------------------------

loc_6FFEA784:				; CODE XREF: sub_6FFEA730+39j
		mov	eax, [ebp+8]
		mov	ebp, [esp+2Ch+var_4]
		mov	edx, [eax]
		mov	[esp+2Ch+arg_C], edi
		mov	edi, [esp+2Ch+var_8]
		mov	[esp+2Ch+arg_8], esi
		mov	esi, [esp+2Ch+var_C]
		mov	[esp+2Ch+arg_4], ebx
		mov	ebx, [esp+2Ch+var_10]
		mov	[esp+2Ch+arg_0], eax
		mov	eax, [edx+18h]
		add	esp, 2Ch
		jmp	eax
sub_6FFEA730	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6FFEA7C0	proc near		; DATA XREF: .rdata:6FFF9F44o

var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h
arg_18		= dword	ptr  1Ch
arg_1C		= dword	ptr  20h

		sub	esp, 3Ch
		mov	ecx, [esp+3Ch+arg_14]
		mov	edx, [esp+3Ch+arg_C]
		mov	[esp+3Ch+var_8], edi
		mov	eax, [esp+3Ch+arg_8]
		mov	edi, [esp+3Ch+arg_0]
		mov	[esp+3Ch+var_20], ecx
		mov	ecx, [esp+3Ch+arg_18]
		mov	[esp+3Ch+var_10], ebx
		mov	ebx, [esp+3Ch+arg_1C]
		mov	[esp+3Ch+var_C], esi
		mov	esi, [esp+3Ch+arg_10]
		mov	[esp+3Ch+var_4], ebp
		mov	ebp, [esp+3Ch+arg_4]
		mov	[esp+3Ch+var_38], edx
		mov	[esp+3Ch+var_28], edx
		mov	[esp+3Ch+var_2C], ecx
		mov	[esp+3Ch+var_24], eax
		mov	[esp+3Ch+var_3C], edi
		call	sub_6FFEAC80
		mov	edx, [esp+3Ch+var_28]
		mov	ecx, [esp+3Ch+var_2C]
		test	al, al
		jz	short loc_6FFEA850
		mov	eax, [esp+3Ch+var_24]
		test	ebp, ebp
		mov	[ebx], esi
		mov	[ebx+4], eax
		js	short loc_6FFEA8A0
		add	esi, ebp
		xor	eax, eax
		cmp	ecx, esi
		setz	al
		lea	eax, [eax+eax*4+1]
		mov	[ebx+0Ch], eax

loc_6FFEA838:				; CODE XREF: sub_6FFEA7C0+E3j
					; sub_6FFEA7C0+ECj ...
		xor	eax, eax
		mov	ebx, [esp+3Ch+var_10]
		mov	esi, [esp+3Ch+var_C]
		mov	edi, [esp+3Ch+var_8]
		mov	ebp, [esp+3Ch+var_4]
		add	esp, 3Ch
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6FFEA850:				; CODE XREF: sub_6FFEA7C0+59j
		cmp	esi, ecx
		jz	short loc_6FFEA8B0

loc_6FFEA854:				; CODE XREF: sub_6FFEA7C0+112j
		mov	edi, [edi+8]
		mov	eax, [edi]
		mov	[esp+3Ch+arg_18], ecx
		mov	ecx, [esp+3Ch+var_20]
		mov	[esp+3Ch+arg_C], edx
		mov	edx, [esp+3Ch+var_24]
		mov	[esp+3Ch+arg_1C], ebx
		mov	ebx, [esp+3Ch+var_10]
		mov	[esp+3Ch+arg_10], esi
		mov	esi, [esp+3Ch+var_C]
		mov	[esp+3Ch+arg_4], ebp
		mov	ebp, [esp+3Ch+var_4]
		mov	[esp+3Ch+arg_0], edi
		mov	edi, [esp+3Ch+var_8]
		mov	[esp+3Ch+arg_14], ecx
		mov	[esp+3Ch+arg_8], edx
		mov	eax, [eax+1Ch]
		add	esp, 3Ch
		jmp	eax
; ---------------------------------------------------------------------------
		align 10h

loc_6FFEA8A0:				; CODE XREF: sub_6FFEA7C0+66j
		cmp	ebp, 0FFFFFFFEh
		jnz	short loc_6FFEA838
		mov	dword ptr [ebx+0Ch], 1
		jmp	short loc_6FFEA838
; ---------------------------------------------------------------------------
		align 10h

loc_6FFEA8B0:				; CODE XREF: sub_6FFEA7C0+92j
		mov	eax, [esp+3Ch+var_20]
		mov	[esp+3Ch+var_28], edx
		mov	[esp+3Ch+var_2C], ecx
		mov	[esp+3Ch+var_3C], edi
		mov	[esp+3Ch+var_38], eax
		call	sub_6FFEAC80
		mov	edx, [esp+3Ch+var_28]
		mov	ecx, [esp+3Ch+var_2C]
		test	al, al
		jz	short loc_6FFEA854
		mov	edx, [esp+3Ch+var_24]
		mov	[ebx+8], edx
		jmp	loc_6FFEA838
sub_6FFEA7C0	endp


; =============== S U B	R O U T	I N E =======================================


sub_6FFEA8E0	proc near		; DATA XREF: .rdata:6FFF9F48o

var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_20		= dword	ptr -20h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h

		sub	esp, 3Ch
		mov	[esp+3Ch+var_10], ebx
		mov	ebx, [esp+3Ch+arg_8]
		mov	[esp+3Ch+var_C], esi
		mov	esi, [esp+3Ch+arg_10]
		mov	[esp+3Ch+var_8], edi
		mov	edx, [esp+3Ch+arg_4]
		mov	[esp+3Ch+var_4], ebp
		mov	edi, [esp+3Ch+arg_C]
		mov	ebp, [esp+3Ch+arg_0]
		cmp	esi, ebx
		jz	short loc_6FFEA940

loc_6FFEA90B:				; CODE XREF: sub_6FFEA8E0+76j
		mov	eax, [ebp+8]
		mov	ebp, [esp+3Ch+var_4]
		mov	ecx, [eax]
		mov	[esp+3Ch+arg_10], esi
		mov	esi, [esp+3Ch+var_C]
		mov	[esp+3Ch+arg_C], edi
		mov	edi, [esp+3Ch+var_8]
		mov	[esp+3Ch+arg_8], ebx
		mov	ebx, [esp+3Ch+var_10]
		mov	[esp+3Ch+arg_4], edx
		mov	[esp+3Ch+arg_0], eax
		mov	eax, [ecx+20h]
		add	esp, 3Ch
		jmp	eax
; ---------------------------------------------------------------------------
		align 10h

loc_6FFEA940:				; CODE XREF: sub_6FFEA8E0+29j
		mov	[esp+3Ch+var_20], edx
		mov	[esp+3Ch+var_38], edi
		mov	[esp+3Ch+var_3C], ebp
		call	sub_6FFEAC80
		mov	edx, [esp+3Ch+var_20]
		test	al, al
		jz	short loc_6FFEA90B
		mov	eax, 6
		mov	ebx, [esp+3Ch+var_10]
		mov	esi, [esp+3Ch+var_C]
		mov	edi, [esp+3Ch+var_8]
		mov	ebp, [esp+3Ch+var_4]
		add	esp, 3Ch
		retn
sub_6FFEA8E0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6FFEA980	proc near		; CODE XREF: sub_6FFC4C20+96Bp

var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_30		= dword	ptr -30h
var_24		= dword	ptr -24h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		sub	esp, 4Ch
		mov	[esp+4Ch+var_8], edi
		mov	edi, [esp+4Ch+arg_0]
		mov	[esp+4Ch+var_C], esi
		mov	esi, [esp+4Ch+arg_4]
		mov	[esp+4Ch+var_4], ebp
		mov	ebp, [esp+4Ch+arg_8]
		mov	[esp+4Ch+var_10], ebx
		mov	ecx, [edi]
		mov	ebx, [esi]
		mov	eax, [ecx+18h]
		mov	[esp+4Ch+var_30], eax
		mov	edx, [esp+4Ch+var_30]
		mov	eax, edi
		test	edx, edx
		jz	short loc_6FFEA9D6
		xor	edx, edx
		mov	eax, ebx
		div	[esp+4Ch+var_30]
		mov	eax, edx
		shl	eax, 2
		add	eax, [ecx+4]
		mov	edx, [eax]
		cmp	edx, ecx
		jz	short loc_6FFEA9D0
		mov	ecx, [edx]
		test	ecx, ecx
		jz	short loc_6FFEAA07

loc_6FFEA9D0:				; CODE XREF: sub_6FFEA980+48j
					; sub_6FFEA980+AEj
		mov	ecx, [edi]
		cmp	edx, ecx
		jnz	short loc_6FFEAA00

loc_6FFEA9D6:				; CODE XREF: sub_6FFEA980+32j
					; sub_6FFEA980+76j ...
		test	ebp, ebp
		jz	short loc_6FFEA9DD
		mov	[ebp+0], ebx

loc_6FFEA9DD:				; CODE XREF: sub_6FFEA980+58j
		mov	ebx, [esp+4Ch+var_10]
		mov	esi, [esp+4Ch+var_C]
		mov	edi, [esp+4Ch+var_8]
		mov	ebp, [esp+4Ch+var_4]
		add	esp, 4Ch
		retn
; ---------------------------------------------------------------------------

loc_6FFEA9F1:				; CODE XREF: sub_6FFEA980+85j
		mov	edi, [esi]
		cmp	edi, [edx+8]
		jz	short loc_6FFEA9D6

loc_6FFEA9F8:				; CODE XREF: sub_6FFEA980+83j
		mov	eax, edx
		mov	edx, [edx]
		cmp	edx, ecx
		jz	short loc_6FFEA9D6

loc_6FFEAA00:				; CODE XREF: sub_6FFEA980+54j
		cmp	ebx, [edx+4]
		jnz	short loc_6FFEA9F8
		jmp	short loc_6FFEA9F1
; ---------------------------------------------------------------------------

loc_6FFEAA07:				; CODE XREF: sub_6FFEA980+4Ej
		mov	[esp+4Ch+var_24], eax
		mov	[esp+4Ch+var_44], 376h
		mov	[esp+4Ch+var_48], offset aRIncludeQtco_0 ; "R:/include/QtCore/qhash.h"
		mov	[esp+4Ch+var_4C], offset aNodeENodeNext	; "*node == e || (*node)->next"
		call	ds:_Z9qt_assertPKcS0_i
		mov	eax, [esp+4Ch+var_24]
		mov	edx, [eax]
		jmp	short loc_6FFEA9D0
sub_6FFEA980	endp


; =============== S U B	R O U T	I N E =======================================


sub_6FFEAA30	proc near		; CODE XREF: _ZN16DBusMenuImporter17slotLayoutUpdatedEji+180p
					; _ZN16DBusMenuImporter31slotAboutToShowDBusCallFinishedEP23QDBusPendingCallWatcher+C28p ...

var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_30		= dword	ptr -30h
var_20		= dword	ptr -20h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		sub	esp, 4Ch
		mov	[esp+4Ch+var_C], esi
		mov	esi, [esp+4Ch+arg_0]
		mov	[esp+4Ch+var_8], edi
		mov	eax, [esp+4Ch+arg_4]
		mov	[esp+4Ch+var_4], ebp
		mov	edi, [esp+4Ch+arg_8]
		mov	[esp+4Ch+var_10], ebx
		mov	ecx, [esi]
		mov	ebx, [eax]
		mov	eax, [ecx+18h]
		mov	[esp+4Ch+var_30], eax
		mov	ebp, [esp+4Ch+var_30]
		mov	eax, esi
		test	ebp, ebp
		jz	short loc_6FFEAA95
		xor	edx, edx
		mov	eax, ebx
		div	[esp+4Ch+var_30]
		lea	eax, ds:0[edx*4]
		add	eax, [ecx+4]
		mov	edx, [eax]
		cmp	edx, ecx
		jz	short loc_6FFEAA82
		mov	ecx, [edx]
		test	ecx, ecx
		jz	short loc_6FFEAAAF

loc_6FFEAA82:				; CODE XREF: sub_6FFEAA30+4Aj
					; sub_6FFEAA30+A6j
		mov	ecx, [esi]
		cmp	edx, ecx
		jz	short loc_6FFEAA95

loc_6FFEAA88:				; CODE XREF: sub_6FFEAA30+63j
		cmp	ebx, [edx+4]
		jz	short loc_6FFEAA95
		mov	eax, edx
		mov	edx, [edx]
		cmp	ecx, edx
		jnz	short loc_6FFEAA88

loc_6FFEAA95:				; CODE XREF: sub_6FFEAA30+32j
					; sub_6FFEAA30+56j ...
		test	edi, edi
		jz	short loc_6FFEAA9B
		mov	[edi], ebx

loc_6FFEAA9B:				; CODE XREF: sub_6FFEAA30+67j
		mov	ebx, [esp+4Ch+var_10]
		mov	esi, [esp+4Ch+var_C]
		mov	edi, [esp+4Ch+var_8]
		mov	ebp, [esp+4Ch+var_4]
		add	esp, 4Ch
		retn
; ---------------------------------------------------------------------------

loc_6FFEAAAF:				; CODE XREF: sub_6FFEAA30+50j
		mov	[esp+4Ch+var_20], eax
		mov	[esp+4Ch+var_44], 376h
		mov	[esp+4Ch+var_48], offset aRIncludeQtco_0 ; "R:/include/QtCore/qhash.h"
		mov	[esp+4Ch+var_4C], offset aNodeENodeNext	; "*node == e || (*node)->next"
		call	ds:_Z9qt_assertPKcS0_i
		mov	eax, [esp+4Ch+var_20]
		mov	edx, [eax]
		jmp	short loc_6FFEAA82
sub_6FFEAA30	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_6FFEAAE0	proc near		; CODE XREF: sub_6FFE1870+3DCp
					; sub_6FFE1870+55Dp ...

var_4D		= byte ptr -4Dh
var_4C		= byte ptr -4Ch
var_48		= dword	ptr -48h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= byte ptr -8
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 68h
		lea	eax, [ebp+var_8]
		mov	[ebp+var_2C], eax
		lea	eax, [ebp+var_4C]
		mov	[esp], eax
		mov	[ebp+var_34], offset sub_6FFEC1F0
		mov	[ebp+var_30], offset dword_6FFECDE8
		mov	[ebp+var_28], offset sub_6FFEABB5
		mov	[ebp+var_24], esp
		call	_Unwind_SjLj_Register
		mov	eax, ds:_ZN7QString16codecForCStringsE
		mov	eax, [eax]
		test	eax, eax
		jz	short loc_6FFEAB90
		mov	eax, [ebp+arg_4]
		mov	dword ptr [esp+8], 0FFFFFFFFh
		mov	[ebp+var_48], 0FFFFFFFFh
		mov	[esp+4], eax
		lea	eax, [ebp+var_10]
		mov	[esp], eax
		call	ds:_ZN7QString9fromAsciiEPKci
		lea	eax, [ebp+var_10]
		mov	[ebp+var_48], 1
		sub	esp, 4
		mov	[esp+4], eax
		mov	eax, [ebp+arg_0]
		mov	[esp], eax
		call	ds:_ZNK7QStringeqERKS_
		mov	[ebp+var_4D], al
		mov	eax, [ebp+var_10]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jnz	short loc_6FFEAB7C
		mov	eax, [ebp+var_10]
		mov	[ebp+var_48], 0FFFFFFFFh
		mov	[esp], eax
		call	ds:_ZN7QString4freeEPNS_4DataE

loc_6FFEAB7C:				; CODE XREF: sub_6FFEAAE0+87j
					; sub_6FFEAAE0+D3j
		lea	eax, [ebp+var_4C]
		mov	[esp], eax
		call	_Unwind_SjLj_Unregister
		movzx	eax, [ebp+var_4D]
		leave
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6FFEAB90:				; CODE XREF: sub_6FFEAAE0+38j
		mov	eax, [ebp+arg_4]
		mov	[ebp+var_48], 0FFFFFFFFh
		mov	[ebp+var_C], eax
		lea	eax, [ebp+var_C]
		mov	[esp+4], eax
		mov	eax, [ebp+arg_0]
		mov	[esp], eax
		call	ds:_ZNK7QStringeqERK13QLatin1String
		mov	[ebp+var_4D], al
		jmp	short loc_6FFEAB7C
sub_6FFEAAE0	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn

sub_6FFEABB5	proc near		; DATA XREF: sub_6FFEAAE0+20o
		add	ebp, 8
		mov	eax, [ebp-44h]
		mov	dword ptr [ebp-48h], 0
		mov	[ebp-54h], eax
		lea	eax, [ebp-10h]
		mov	[esp+0], eax
		call	sub_6FFEA140
		mov	eax, [ebp-54h]
		mov	dword ptr [ebp-48h], 0FFFFFFFFh
		mov	[esp+0], eax
		call	_Unwind_SjLj_Resume
sub_6FFEABB5	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6FFEABF0	proc near		; DATA XREF: .rdata:6FFF9F70o
		mov	eax, offset a__gnu_cxx__con ; "__gnu_cxx::__concurrence_lock_error"
		retn
sub_6FFEABF0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6FFEAC00	proc near		; DATA XREF: .rdata:6FFF9F88o
		mov	eax, offset a__gnu_cxx__c_0 ; "__gnu_cxx::__concurrence_unlock_error"
		retn
sub_6FFEAC00	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6FFEAC10	proc near		; DATA XREF: .rdata:6FFF9FA0o
		mov	eax, offset aStdBad_excepti ; "std::bad_exception"
		retn
sub_6FFEAC10	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6FFEAC20	proc near		; DATA XREF: .rdata:6FFF9FB8o
		mov	eax, offset aStdBad_alloc ; "std::bad_alloc"
		retn
sub_6FFEAC20	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6FFEAC30	proc near		; DATA XREF: .rdata:6FFF9FD0o
		mov	eax, offset aStdException ; "std::exception"
		retn
sub_6FFEAC30	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6FFEAC40	proc near		; DATA XREF: .rdata:6FFF9FF8o
		sub	esp, 0Ch
		add	esp, 0Ch
		jmp	sub_6FFEAC80
sub_6FFEAC40	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6FFEAC50	proc near		; DATA XREF: .rdata:6FFF9FFCo
		xor	eax, eax
		retn
sub_6FFEAC50	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6FFEAC60	proc near		; DATA XREF: .rdata:6FFF9ED0o
					; .rdata:6FFF9F30o ...
		xor	eax, eax
		retn
sub_6FFEAC60	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6FFEAC70	proc near		; DATA XREF: .rdata:6FFF9ED4o
					; .rdata:6FFF9F34o ...
		xor	eax, eax
		retn
sub_6FFEAC70	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6FFEAC80	proc near		; CODE XREF: sub_6FFEA550+2Ap
					; sub_6FFEA5D0+17p ...

var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		sub	esp, 1Ch
		mov	eax, 1
		mov	edx, [esp+1Ch+arg_0]
		mov	ecx, [esp+1Ch+arg_4]
		cmp	ecx, edx
		jz	short loc_6FFEACAB
		mov	eax, [ecx+4]
		mov	[esp+1Ch+var_18], eax ;	char *
		mov	eax, [edx+4]
		mov	[esp+1Ch+var_1C], eax ;	char *
		call	strcmp
		test	eax, eax
		setz	al

loc_6FFEACAB:				; CODE XREF: sub_6FFEAC80+12j
		add	esp, 1Ch
		retn
sub_6FFEAC80	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6FFEACB0	proc near		; DATA XREF: .rdata:6FFF9F9Co

arg_0		= dword	ptr  4

		sub	esp, 0Ch
		mov	eax, [esp+0Ch+arg_0]
		mov	dword ptr [eax], offset	off_6FFF9FC8
		add	esp, 0Ch
		jmp	sub_6FFEAE50
sub_6FFEACB0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6FFEACD0	proc near		; DATA XREF: sub_6FFEBACD+C8o
					; .rdata:off_6FFF9F98o

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		mov	dword ptr [eax], offset	off_6FFF9FC8
		retn
sub_6FFEACD0	endp

; ---------------------------------------------------------------------------
		align 10h
		mov	eax, [esp+4]
		mov	dword ptr [eax], offset	off_6FFF9FC8
		retn
; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6FFEACF0	proc near		; DATA XREF: .rdata:6FFF9FB4o

var_1C		= dword	ptr -1Ch
arg_0		= dword	ptr  4

		push	ebx
		sub	esp, 18h
		mov	ebx, [esp+1Ch+arg_0]
		mov	dword ptr [ebx], offset	off_6FFF9FB0
		mov	[esp+1Ch+var_1C], ebx
		call	sub_6FFEAD90
		mov	[esp+1Ch+arg_0], ebx
		add	esp, 18h
		pop	ebx
		jmp	sub_6FFEAE50
sub_6FFEACF0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6FFEAD20	proc near		; DATA XREF: sub_6FFEAE70+86o
					; .rdata:off_6FFF9FB0o

arg_0		= dword	ptr  4

		sub	esp, 0Ch
		mov	eax, [esp+0Ch+arg_0]
		mov	dword ptr [eax], offset	off_6FFF9FB0
		add	esp, 0Ch
		jmp	sub_6FFEAD90
sub_6FFEAD20	endp

; ---------------------------------------------------------------------------
		align 10h
		sub	esp, 0Ch
		mov	eax, [esp+10h]
		mov	dword ptr [eax], offset	off_6FFF9FB0
		add	esp, 0Ch
		jmp	sub_6FFEAD90
; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6FFEAD60	proc near		; DATA XREF: .rdata:6FFF9FCCo

arg_0		= dword	ptr  4

		sub	esp, 0Ch
		mov	eax, [esp+0Ch+arg_0]
		mov	dword ptr [eax], offset	off_6FFF9FC8
		add	esp, 0Ch
		jmp	sub_6FFEAE50
sub_6FFEAD60	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6FFEAD80	proc near		; DATA XREF: .rdata:off_6FFF9FC8o

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		mov	dword ptr [eax], offset	off_6FFF9FC8
		retn
sub_6FFEAD80	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6FFEAD90	proc near		; CODE XREF: sub_6FFEA230+11p
					; sub_6FFEA260+10j ...

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		mov	dword ptr [eax], offset	off_6FFF9FC8
		retn
sub_6FFEAD90	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6FFEADA0	proc near		; DATA XREF: .rdata:6FFF9FECo

arg_0		= dword	ptr  4

		sub	esp, 0Ch
		mov	eax, [esp+0Ch+arg_0]
		mov	dword ptr [eax], offset	off_6FFF9FE8
		add	esp, 0Ch
		jmp	sub_6FFEAE50
sub_6FFEADA0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6FFEADC0	proc near		; DATA XREF: .rdata:off_6FFF9FE8o

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		mov	dword ptr [eax], offset	off_6FFF9FE8
		retn
sub_6FFEADC0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6FFEADD0	proc near		; CODE XREF: sub_6FFDF870+11p
					; sub_6FFDF8A0+10j ...

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		mov	dword ptr [eax], offset	off_6FFF9FE8
		retn
sub_6FFEADD0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn

sub_6FFEADE0	proc near		; CODE XREF: sub_6FFEC1F0+58Ep

var_1C		= dword	ptr -1Ch

		sub	esp, 1Ch
		mov	eax, off_6FFF2A8C
		mov	[esp+1Ch+var_1C], eax
		call	sub_6FFDF820
sub_6FFEADE0	endp

; ---------------------------------------------------------------------------
		mov	edx, [esp+4]
		mov	eax, off_6FFF2A88
		mov	off_6FFF2A88, edx
		retn
; ---------------------------------------------------------------------------
		mov	edx, [esp+4]
		mov	eax, off_6FFF2A8C
		mov	off_6FFF2A8C, edx
		retn
; ---------------------------------------------------------------------------
		mov	edx, [esp+4]
		mov	eax, dword_6FFF2AC0
		mov	dword_6FFF2AC0,	edx
		retn
; ---------------------------------------------------------------------------
		sub	esp, 0Ch
		call	sub_6FFEBF70
		mov	eax, [eax+4]
		test	eax, eax
		setnz	al
		add	esp, 0Ch
		retn
; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn

sub_6FFEAE40	proc near		; CODE XREF: sub_6FFDF820+7p
					; .text:6FFEB68Cp ...

var_1C		= dword	ptr -1Ch

		sub	esp, 1Ch
		mov	eax, off_6FFF2A88
		mov	[esp+1Ch+var_1C], eax
		call	sub_6FFDF790
sub_6FFEAE40	endp


; =============== S U B	R O U T	I N E =======================================


sub_6FFEAE50	proc near		; CODE XREF: sub_6FFC1650+1Fj
					; _ZN16DBusMenuExporterD0Ev+57p ...

arg_0		= dword	ptr  4

		sub	esp, 0Ch
		mov	eax, [esp+0Ch+arg_0]
		test	eax, eax
		jz	short loc_6FFEAE63
		add	esp, 0Ch
		jmp	free
; ---------------------------------------------------------------------------

loc_6FFEAE63:				; CODE XREF: sub_6FFEAE50+9j
		add	esp, 0Ch
		retn
sub_6FFEAE50	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl sub_6FFEAE70(size_t)
sub_6FFEAE70	proc near		; CODE XREF: sub_6FFC4C20+24Dp
					; sub_6FFC56B0+A4p ...

var_40		= dword	ptr -40h
var_3C		= byte ptr -3Ch
var_38		= dword	ptr -38h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_8		= byte ptr -8
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 58h
		lea	eax, [ebp+var_8]
		mov	[ebp+var_1C], eax
		lea	eax, [ebp+var_3C]
		mov	[esp], eax
		mov	[ebp+var_24], offset sub_6FFEC1F0
		mov	[ebp+var_20], offset dword_6FFED488
		mov	[ebp+var_18], offset sub_6FFEAF15
		mov	[ebp+var_14], esp
		call	_Unwind_SjLj_Register
		mov	eax, [ebp+arg_0]
		test	eax, eax
		jnz	short loc_6FFEAEC2
		mov	[ebp+arg_0], 1
		jmp	short loc_6FFEAEC2
; ---------------------------------------------------------------------------
		align 10h

loc_6FFEAEB0:				; CODE XREF: sub_6FFEAE70+62j
		mov	eax, dword_6FFF2AC0
		test	eax, eax
		jz	short loc_6FFEAEE4
		mov	[ebp+var_38], 1
		call	eax ; dword_6FFF2AC0

loc_6FFEAEC2:				; CODE XREF: sub_6FFEAE70+34j
					; sub_6FFEAE70+3Dj
		mov	eax, [ebp+arg_0]
		mov	[esp], eax	; size_t
		call	malloc
		test	eax, eax
		mov	[ebp+var_40], eax
		jz	short loc_6FFEAEB0
		lea	eax, [ebp+var_3C]
		mov	[esp], eax
		call	_Unwind_SjLj_Unregister
		mov	eax, [ebp+var_40]
		leave
		retn
; ---------------------------------------------------------------------------

loc_6FFEAEE4:				; CODE XREF: sub_6FFEAE70+47j
		mov	dword ptr [esp], 4
		call	sub_6FFEB6C0
		mov	dword ptr [eax], offset	off_6FFF9FB0
		mov	dword ptr [esp+8], offset sub_6FFEAD20
		mov	dword ptr [esp+4], offset off_6FFF9AA0
		mov	[esp], eax
		mov	[ebp+var_38], 1
		call	sub_6FFEC190
sub_6FFEAE70	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn

sub_6FFEAF15	proc near		; DATA XREF: sub_6FFEAE70+20o
		add	ebp, 8
		cmp	dword ptr [ebp-30h], 0FFFFFFFFh
		mov	eax, [ebp-34h]
		jz	short loc_6FFEAF30
		mov	[esp+0], eax
		mov	dword ptr [ebp-38h], 0FFFFFFFFh
		call	_Unwind_SjLj_Resume
; ---------------------------------------------------------------------------

loc_6FFEAF30:				; CODE XREF: sub_6FFEAF15+Aj
		mov	[esp+0], eax
		mov	dword ptr [ebp-38h], 0FFFFFFFFh
		call	sub_6FFEBA60
sub_6FFEAF15	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_6FFEAF40	proc near		; CODE XREF: _ZrsRK13QDBusArgumentR12DBusMenuItem+33p
					; _ZrsRK13QDBusArgumentR18DBusMenuLayoutItem+65p

var_CC		= dword	ptr -0CCh
var_C8		= dword	ptr -0C8h
var_C4		= dword	ptr -0C4h
var_C0		= dword	ptr -0C0h
var_BC		= dword	ptr -0BCh
var_B8		= dword	ptr -0B8h
var_B4		= dword	ptr -0B4h
var_B0		= dword	ptr -0B0h
var_AC		= dword	ptr -0ACh
var_A8		= dword	ptr -0A8h
var_A4		= dword	ptr -0A4h
var_A0		= dword	ptr -0A0h
var_9C		= dword	ptr -9Ch
var_98		= dword	ptr -98h
var_94		= dword	ptr -94h
var_90		= dword	ptr -90h
var_8C		= byte ptr -8Ch
var_88		= dword	ptr -88h
var_84		= dword	ptr -84h
var_74		= dword	ptr -74h
var_70		= dword	ptr -70h
var_6C		= dword	ptr -6Ch
var_68		= dword	ptr -68h
var_64		= dword	ptr -64h
var_50		= dword	ptr -50h
var_20		= dword	ptr -20h
var_18		= dword	ptr -18h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= byte ptr -8
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 0E8h
		lea	eax, [ebp+var_8]
		mov	[ebp+var_6C], eax
		lea	eax, [ebp+var_8C]
		mov	[esp], eax
		mov	[ebp+var_74], offset sub_6FFEC1F0
		mov	[ebp+var_70], offset dword_6FFED164
		mov	[ebp+var_68], offset loc_6FFEB2B4
		mov	[ebp+var_64], esp
		call	_Unwind_SjLj_Register
		mov	edx, [ebp+arg_0]
		mov	[ebp+var_88], 0FFFFFFFFh
		mov	[esp], edx
		call	ds:_ZNK13QDBusArgument8beginMapEv
		mov	eax, ds:_ZN8QMapData11shared_nullE
		mov	[ebp+var_10], eax
		lock inc dword ptr [eax+34h]
		setnz	dl
		mov	ecx, [ebp+arg_4]
		mov	edx, [ebp+var_10]
		mov	eax, [ecx]
		mov	[ebp+var_B8], edx
		cmp	eax, edx
		jz	short loc_6FFEAFDC
		lock inc dword ptr [edx+34h]
		setnz	al
		mov	eax, [ecx]
		lock dec dword ptr [eax+34h]
		setnz	dl
		test	dl, dl
		jz	loc_6FFEB4DD

loc_6FFEAFC4:				; CODE XREF: sub_6FFEAF40+5B5j
		mov	eax, [ebp+var_B8]
		mov	ecx, [ebp+arg_4]
		mov	[ecx], eax
		test	byte ptr [eax+44h], 2
		jz	loc_6FFEB430

loc_6FFEAFD9:				; CODE XREF: sub_6FFEAF40+505j
		mov	eax, [ebp+var_10]

loc_6FFEAFDC:				; CODE XREF: sub_6FFEAF40+6Aj
		test	eax, eax
		jz	short loc_6FFEAFEF
		lock dec dword ptr [eax+34h]
		setnz	dl
		test	dl, dl
		jz	loc_6FFEB44A

loc_6FFEAFEF:				; CODE XREF: sub_6FFEAF40+9Ej
					; sub_6FFEAF40+598j
		mov	edx, ds:_ZN7QString11shared_nullE
		mov	ecx, ds:_ZNK13QDBusArgument5atEndEv
		mov	[ebp+var_90], edx
		mov	[ebp+var_94], edx
		mov	[ebp+var_98], ecx

loc_6FFEB00D:				; CODE XREF: sub_6FFEAF40+2FFj
					; sub_6FFEAF40+31Bj
		mov	ecx, [ebp+arg_0]
		mov	[ebp+var_88], 0FFFFFFFFh
		mov	[esp], ecx
		call	[ebp+var_98]
		test	al, al
		jnz	loc_6FFEB295
		mov	edx, [ebp+var_90]
		mov	ecx, [ebp+var_94]
		mov	[ebp+var_C], edx
		lock inc dword ptr [ecx]
		setnz	al
		mov	eax, [ebp+var_18]
		mov	[ebp+var_20], 0
		mov	[ebp+var_88], 6
		and	eax, 0C0000000h
		mov	[ebp+var_18], eax
		mov	eax, [ebp+arg_0]
		mov	byte ptr [ebp+var_18+3], 80h
		mov	[esp], eax
		call	ds:_ZNK13QDBusArgument13beginMapEntryEv
		mov	edx, [ebp+arg_0]
		lea	eax, [ebp+var_C]
		mov	[esp+4], eax
		mov	[esp], edx
		call	ds:_ZNK13QDBusArgumentrsER7QString
		lea	edx, [ebp+var_20]
		mov	[esp+4], edx
		mov	[esp], eax
		call	ds:_ZrsRK13QDBusArgumentR8QVariant
		mov	ecx, [ebp+arg_4]
		mov	eax, [ecx]
		mov	eax, [eax+34h]
		cmp	eax, 1
		jz	short loc_6FFEB0A4
		mov	[esp], ecx
		call	sub_6FFE3B80

loc_6FFEB0A4:				; CODE XREF: sub_6FFEAF40+15Aj
		mov	eax, [ebp+arg_4]
		mov	eax, [eax]
		mov	edx, [eax+38h]
		mov	[ebp+var_A4], eax
		test	edx, edx
		mov	[ebp+var_A0], edx
		js	loc_6FFEB17C
		shl	edx, 2
		mov	[ebp+var_A8], edx
		mov	edx, [ebp+var_A4]
		nop

loc_6FFEB0D0:				; CODE XREF: sub_6FFEAF40+1DAj
					; sub_6FFEAF40+20Dj
		mov	ecx, [ebp+var_A0]
		mov	ecx, [edx+ecx*4+4]
		cmp	ecx, eax
		mov	[ebp+var_9C], ecx
		jz	short loc_6FFEB120
		lea	eax, [ebp+var_C]
		mov	[esp+4], eax
		mov	eax, ecx
		sub	eax, 1Ch
		mov	[esp], eax
		mov	[ebp+var_88], 6
		call	ds:_ZNK7QStringltERKS_
		test	al, al
		jz	short loc_6FFEB120
		mov	edx, [ebp+arg_4]
		mov	ecx, [ebp+var_9C]
		mov	eax, [edx]
		mov	[ebp+var_A4], ecx
		mov	edx, ecx
		jmp	short loc_6FFEB0D0
; ---------------------------------------------------------------------------
		align 10h

loc_6FFEB120:				; CODE XREF: sub_6FFEAF40+1A2j
					; sub_6FFEAF40+1C5j
		mov	edx, [ebp+var_A8]
		mov	ecx, [ebp+var_A4]
		mov	[ebp+edx+var_50], ecx
		sub	edx, 4
		sub	[ebp+var_A0], 1
		mov	[ebp+var_A8], edx
		js	short loc_6FFEB150
		mov	edx, [ebp+arg_4]
		mov	eax, [edx]
		mov	edx, [ebp+var_A4]
		jmp	short loc_6FFEB0D0
; ---------------------------------------------------------------------------
		align 10h

loc_6FFEB150:				; CODE XREF: sub_6FFEAF40+200j
		mov	eax, [ebp+arg_4]
		mov	edx, [ebp+var_9C]
		cmp	[eax], edx
		jz	short loc_6FFEB17C
		mov	eax, edx
		sub	eax, 1Ch
		mov	[esp+4], eax
		lea	eax, [ebp+var_C]
		mov	[esp], eax
		mov	[ebp+var_88], 6
		call	ds:_ZNK7QStringltERKS_

loc_6FFEB17C:				; CODE XREF: sub_6FFEAF40+17Aj
					; sub_6FFEAF40+21Bj
		mov	ecx, [ebp+arg_4]
		lea	eax, [ebp+var_50]
		mov	ecx, [ecx]
		mov	dword ptr [esp+0Ch], 8
		mov	dword ptr [esp+8], 1Ch
		mov	[esp+4], eax
		mov	[ebp+var_B4], ecx
		mov	[esp], ecx
		mov	[ebp+var_88], 6
		call	ds:_ZN8QMapData11node_createEPPNS_4NodeEii
		mov	[ebp+var_AC], eax
		sub	eax, 1Ch
		mov	[ebp+var_B0], eax
		jz	short loc_6FFEB1E9
		mov	edx, [ebp+var_AC]
		mov	eax, [ebp+var_C]
		mov	[edx-1Ch], eax
		lea	edx, [ebp+var_C]
		cmp	[ebp+var_B0], edx
		jz	loc_6FFEB260

loc_6FFEB1DD:				; CODE XREF: sub_6FFEAF40+350j
		lock inc dword ptr [eax]
		setnz	dl
		mov	eax, [ebp+var_B0]

loc_6FFEB1E9:				; CODE XREF: sub_6FFEAF40+280j
		add	eax, 8
		jz	short loc_6FFEB208
		lea	edx, [ebp+var_20]
		mov	[esp+4], edx
		mov	[esp], eax
		mov	[ebp+var_88], 3
		call	ds:_ZN8QVariantC1ERKS_

loc_6FFEB208:				; CODE XREF: sub_6FFEAF40+2ACj
		mov	ecx, [ebp+arg_0]
		mov	[ebp+var_88], 6
		mov	[esp], ecx
		call	ds:_ZNK13QDBusArgument11endMapEntryEv
		lea	eax, [ebp+var_20]
		mov	[esp], eax
		mov	[ebp+var_88], 7
		call	ds:_ZN8QVariantD1Ev
		mov	eax, [ebp+var_C]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jnz	loc_6FFEB00D
		mov	eax, [ebp+var_C]
		mov	[ebp+var_88], 0FFFFFFFFh
		mov	[esp], eax
		call	ds:_ZN7QString4freeEPNS_4DataE
		jmp	loc_6FFEB00D
; ---------------------------------------------------------------------------

loc_6FFEB260:				; CODE XREF: sub_6FFEAF40+297j
		mov	dword ptr [esp+8], 2D6h
		mov	dword ptr [esp+4], offset aRIncludeQtc_10 ; "R:/include/QtCore/qstring.h"
		mov	dword ptr [esp], offset	aOtherThis_3 ; "&other != this"
		mov	[ebp+var_88], 4
		call	ds:_Z9qt_assertPKcS0_i
		mov	ecx, [ebp+var_AC]
		mov	eax, [ecx-1Ch]
		jmp	loc_6FFEB1DD
; ---------------------------------------------------------------------------

loc_6FFEB295:				; CODE XREF: sub_6FFEAF40+E5j
		mov	eax, [ebp+arg_0]
		mov	[esp], eax
		call	ds:_ZNK13QDBusArgument6endMapEv
		lea	eax, [ebp+var_8C]
		mov	[esp], eax
		call	_Unwind_SjLj_Unregister
		mov	eax, [ebp+arg_0]
		leave
		retn
; ---------------------------------------------------------------------------

loc_6FFEB2B4:				; DATA XREF: sub_6FFEAF40+26o
		add	ebp, 8
		mov	eax, [ebp+var_88]
		mov	edx, [ebp+var_84]
		cmp	eax, 1
		mov	[ebp+var_C0], edx
		jz	loc_6FFEB390
		cmp	eax, 2
		jz	loc_6FFEB3E4
		cmp	eax, 3
		jz	loc_6FFEB39F
		cmp	eax, 4
		jz	short loc_6FFEB363
		cmp	eax, 5
		lea	esi, [esi+0]
		jz	short loc_6FFEB306
		cmp	eax, 6
		jz	short loc_6FFEB31C
		mov	[ebp+var_88], 0
		call	sub_6FFEBBF0

loc_6FFEB306:				; CODE XREF: sub_6FFEAF40+3B0j
		lea	eax, [ebp+var_20]
		mov	[esp], eax
		mov	[ebp+var_88], 0
		call	ds:_ZN8QVariantD1Ev

loc_6FFEB31C:				; CODE XREF: sub_6FFEAF40+3B5j
		mov	eax, [ebp+var_C0]
		mov	[ebp+var_BC], eax
		mov	eax, [ebp+var_C]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jnz	short loc_6FFEB34B
		mov	eax, [ebp+var_C]
		mov	[ebp+var_88], 0
		mov	[esp], eax
		call	ds:_ZN7QString4freeEPNS_4DataE

loc_6FFEB34B:				; CODE XREF: sub_6FFEAF40+3F3j
		mov	edx, [ebp+var_BC]
		mov	[ebp+var_88], 0FFFFFFFFh
		mov	[esp], edx
		call	_Unwind_SjLj_Resume
; ---------------------------------------------------------------------------

loc_6FFEB363:				; CODE XREF: sub_6FFEAF40+3A7j
		lea	eax, [ebp+var_10]
		mov	[esp], eax
		mov	[ebp+var_88], 0
		call	sub_6FFE4290
		mov	eax, [ebp+var_C0]
		mov	[ebp+var_88], 0FFFFFFFFh
		mov	[esp], eax
		call	_Unwind_SjLj_Resume
; ---------------------------------------------------------------------------

loc_6FFEB390:				; CODE XREF: sub_6FFEAF40+38Cj
		mov	[ebp+var_88], 0
		call	sub_6FFEBBF0

loc_6FFEB39F:				; CODE XREF: sub_6FFEAF40+39Ej
		mov	eax, [ebp+var_C0]
		mov	[esp], eax
		call	sub_6FFEB920
		mov	edx, [ebp+var_AC]
		lea	eax, [ebp+var_50]
		mov	ecx, [ebp+var_B4]
		mov	dword ptr [esp+8], 1Ch
		mov	[esp+4], eax
		mov	[esp+0Ch], edx
		mov	[esp], ecx
		mov	[ebp+var_88], 1
		call	ds:_ZN8QMapData11node_deleteEPPNS_4NodeEiS1_
		call	sub_6FFEC130
; ---------------------------------------------------------------------------

loc_6FFEB3E4:				; CODE XREF: sub_6FFEAF40+395j
		mov	eax, [ebp+var_C0]
		mov	[esp], eax
		call	sub_6FFEB920
		mov	edx, [ebp+var_B0]
		mov	eax, [edx]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jz	short loc_6FFEB413

loc_6FFEB404:				; CODE XREF: sub_6FFEAF40+4EEj
		mov	[ebp+var_88], 2
		call	sub_6FFEC130
; ---------------------------------------------------------------------------

loc_6FFEB413:				; CODE XREF: sub_6FFEAF40+4C2j
		mov	ecx, [ebp+var_B0]
		mov	eax, [ecx]
		mov	[ebp+var_88], 2
		mov	[esp], eax
		call	ds:_ZN7QString4freeEPNS_4DataE
		jmp	short loc_6FFEB404
; ---------------------------------------------------------------------------

loc_6FFEB430:				; CODE XREF: sub_6FFEAF40+93j
		mov	edx, [ebp+arg_4]
		mov	[ebp+var_88], 5
		mov	[esp], edx
		call	sub_6FFE3B80
		jmp	loc_6FFEAFD9
; ---------------------------------------------------------------------------

loc_6FFEB44A:				; CODE XREF: sub_6FFEAF40+A9j
		mov	ecx, [ebp+var_10]
		mov	[ebp+var_C4], ecx
		mov	eax, [ecx+4]
		jmp	short loc_6FFEB4AF
; ---------------------------------------------------------------------------

loc_6FFEB458:				; CODE XREF: sub_6FFEAF40+575j
		mov	edx, [eax+4]
		lea	ecx, [eax-1Ch]
		mov	[ebp+var_CC], ecx
		mov	[ebp+var_C8], edx
		mov	edx, [eax-1Ch]
		lock dec dword ptr [edx]
		setnz	cl
		test	cl, cl
		jnz	short loc_6FFEB48D
		mov	eax, [eax-1Ch]
		mov	[ebp+var_88], 0FFFFFFFFh
		mov	[esp], eax
		call	ds:_ZN7QString4freeEPNS_4DataE

loc_6FFEB48D:				; CODE XREF: sub_6FFEAF40+535j
		mov	eax, [ebp+var_CC]
		mov	[ebp+var_88], 0FFFFFFFFh
		add	eax, 8
		mov	[esp], eax
		call	ds:_ZN8QVariantD1Ev
		mov	eax, [ebp+var_C8]

loc_6FFEB4AF:				; CODE XREF: sub_6FFEAF40+516j
		cmp	[ebp+var_C4], eax
		jnz	short loc_6FFEB458
		mov	eax, [ebp+var_C4]
		mov	dword ptr [esp+4], 1Ch
		mov	[ebp+var_88], 0FFFFFFFFh
		mov	[esp], eax
		call	ds:_ZN8QMapData16continueFreeDataEi
		jmp	loc_6FFEAFEF
; ---------------------------------------------------------------------------

loc_6FFEB4DD:				; CODE XREF: sub_6FFEAF40+7Ej
		mov	eax, [ecx]
		mov	[esp], ecx
		mov	[ebp+var_88], 5
		mov	[esp+4], eax
		call	sub_6FFE4220
		jmp	loc_6FFEAFC4
sub_6FFEAF40	endp

; ---------------------------------------------------------------------------
		align 10h
		push	ebp
		mov	ebp, esp
		lea	eax, [ebp-8]
		push	edi
		sub	esp, 64h
		mov	[ebp-2Ch], eax
		lea	eax, [ebp-4Ch]
		mov	[esp], eax
		mov	dword ptr [ebp-34h], offset sub_6FFEC1F0
		mov	dword ptr [ebp-30h], offset dword_6FFED510
		mov	dword ptr [ebp-28h], offset loc_6FFEB652
		mov	[ebp-24h], esp
		call	_Unwind_SjLj_Register
		mov	dword ptr [esp], 50h
		call	malloc
		test	eax, eax
		mov	[ebp-50h], eax
		jz	short loc_6FFEB570

loc_6FFEB543:				; CODE XREF: .text:6FFEB5E1j
					; .text:6FFEB5F8j
		call	sub_6FFEBF70
		mov	edi, [ebp-50h]
		mov	ecx, 14h
		add	dword ptr [eax+4], 1
		xor	eax, eax
		rep stosd
		lea	eax, [ebp-4Ch]
		mov	[esp], eax
		call	_Unwind_SjLj_Unregister
		mov	eax, [ebp-50h]
		add	esp, 64h
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6FFEB570:				; CODE XREF: .text:6FFEB541j
		mov	ecx, dword_6FFEE05C
		mov	dword ptr [ebp-0Ch], offset dword_6FFF2A90
		test	ecx, ecx
		jz	short loc_6FFEB59C
		mov	dword ptr [esp], offset	dword_6FFF2A90
		mov	dword ptr [ebp-48h], 3
		call	sub_6FFDB990
		test	eax, eax
		jnz	loc_6FFEB628

loc_6FFEB59C:				; CODE XREF: .text:6FFEB57Fj
		mov	edx, dword_6FFEE06C
		xor	ecx, ecx
		mov	eax, edx
		jmp	short loc_6FFEB5B6
; ---------------------------------------------------------------------------

loc_6FFEB5A8:				; CODE XREF: .text:6FFEB5B8j
		add	ecx, 1
		cmp	ecx, 20h
		jz	loc_6FFEB685
		shr	eax, 1

loc_6FFEB5B6:				; CODE XREF: .text:6FFEB5A6j
		test	al, 1
		jnz	short loc_6FFEB5A8
		mov	eax, 1
		shl	eax, cl
		or	eax, edx
		mov	edx, dword_6FFEE05C
		mov	dword_6FFEE06C,	eax
		lea	eax, [ecx+ecx*4]
		shl	eax, 4
		add	eax, offset dword_6FFF2080
		test	edx, edx
		mov	[ebp-50h], eax
		mov	eax, [ebp-0Ch]
		jz	loc_6FFEB543
		mov	[esp], eax
		mov	dword ptr [ebp-48h], 1
		call	sub_6FFDB870
		test	eax, eax
		jz	loc_6FFEB543
		mov	dword ptr [esp], 4
		call	sub_6FFEB6C0
		mov	dword ptr [eax], offset	off_6FFF9F80
		mov	dword ptr [esp+8], offset sub_6FFEA2B0
		mov	dword ptr [esp+4], offset off_6FFF9A88
		mov	[esp], eax
		call	sub_6FFEC190
; ---------------------------------------------------------------------------

loc_6FFEB628:				; CODE XREF: .text:6FFEB596j
		mov	dword ptr [esp], 4
		call	sub_6FFEB6C0
		mov	dword ptr [eax], offset	off_6FFF9F68
		mov	dword ptr [esp+8], offset sub_6FFEA260
		mov	dword ptr [esp+4], offset off_6FFF9A7C
		mov	[esp], eax
		call	sub_6FFEC190
; ---------------------------------------------------------------------------

loc_6FFEB652:				; DATA XREF: .text:6FFEB521o
		add	ebp, 8
		mov	edx, [ebp-44h]
		mov	eax, [ebp-48h]
		mov	[ebp-54h], edx
		mov	edx, [ebp-40h]
		cmp	eax, 1
		mov	[ebp-58h], edx
		jz	short loc_6FFEB691
		cmp	eax, 2
		jz	short loc_6FFEB6A3
		cmp	edx, 0FFFFFFFFh
		jz	short loc_6FFEB6A9

loc_6FFEB673:				; CODE XREF: .text:6FFEB6A7j
		mov	eax, [ebp-54h]
		mov	dword ptr [ebp-48h], 0FFFFFFFFh
		mov	[esp], eax
		call	_Unwind_SjLj_Resume
; ---------------------------------------------------------------------------

loc_6FFEB685:				; CODE XREF: .text:6FFEB5AEj
		mov	dword ptr [ebp-48h], 2
		call	sub_6FFEAE40
; ---------------------------------------------------------------------------

loc_6FFEB691:				; CODE XREF: .text:6FFEB667j
		lea	eax, [ebp-0Ch]
		mov	[esp], eax
		mov	dword ptr [ebp-48h], 0FFFFFFFFh
		call	sub_6FFEA170

loc_6FFEB6A3:				; CODE XREF: .text:6FFEB66Cj
		cmp	dword ptr [ebp-58h], 0FFFFFFFFh
		jnz	short loc_6FFEB673

loc_6FFEB6A9:				; CODE XREF: .text:6FFEB671j
		mov	edx, [ebp-54h]
		mov	dword ptr [ebp-48h], 0FFFFFFFFh
		mov	[esp], edx
		call	sub_6FFEBA60
; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_6FFEB6C0	proc near		; CODE XREF: sub_6FFEA170+65p
					; sub_6FFEAE70+7Bp ...

var_58		= dword	ptr -58h
var_54		= dword	ptr -54h
var_50		= dword	ptr -50h
var_4C		= byte ptr -4Ch
var_48		= dword	ptr -48h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_C		= dword	ptr -0Ch
var_8		= byte ptr -8
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		lea	eax, [ebp+var_8]
		push	edi
		sub	esp, 74h
		mov	[ebp+var_2C], eax
		lea	eax, [ebp+var_4C]
		mov	[esp], eax
		mov	[ebp+var_34], offset sub_6FFEC1F0
		mov	[ebp+var_30], offset dword_6FFED4FC
		mov	[ebp+var_28], offset sub_6FFEB891
		mov	[ebp+var_24], esp
		call	_Unwind_SjLj_Register
		mov	eax, [ebp+arg_0]
		add	eax, 60h
		mov	[ebp+var_54], eax
		mov	[esp], eax	; size_t
		call	malloc
		test	eax, eax
		mov	[ebp+var_50], eax
		jz	short loc_6FFEB770

loc_6FFEB708:				; CODE XREF: sub_6FFEB6C0+135j
					; sub_6FFEB6C0+14Cj
		call	sub_6FFEBF70
		mov	edi, [ebp+var_50]
		mov	edx, 60h
		add	dword ptr [eax+4], 1
		test	edi, 1
		jnz	loc_6FFEB840
		test	edi, 2
		jnz	loc_6FFEB857

loc_6FFEB731:				; CODE XREF: sub_6FFEB6C0+191j
					; sub_6FFEB6C0+1A2j
		mov	ecx, edx
		xor	eax, eax
		shr	ecx, 2
		test	dl, 2
		rep stosd
		jz	short loc_6FFEB747
		mov	word ptr [edi],	0
		add	edi, 2

loc_6FFEB747:				; CODE XREF: sub_6FFEB6C0+7Dj
		and	edx, 1
		jz	short loc_6FFEB74F
		mov	byte ptr [edi],	0

loc_6FFEB74F:				; CODE XREF: sub_6FFEB6C0+8Aj
		mov	eax, [ebp+var_50]
		add	eax, 60h
		mov	[ebp+var_58], eax
		lea	eax, [ebp+var_4C]
		mov	[esp], eax
		call	_Unwind_SjLj_Unregister
		mov	eax, [ebp+var_58]
		add	esp, 74h
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6FFEB770:				; CODE XREF: sub_6FFEB6C0+46j
		mov	eax, dword_6FFEE05C
		mov	[ebp+var_C], offset dword_6FFF2A90
		test	eax, eax
		jz	short loc_6FFEB79B
		mov	dword ptr [esp], offset	dword_6FFF2A90
		mov	[ebp+var_48], 3
		call	sub_6FFDB990
		test	eax, eax
		jnz	loc_6FFEB867

loc_6FFEB79B:				; CODE XREF: sub_6FFEB6C0+BEj
		mov	eax, dword_6FFEE068
		xor	ecx, ecx
		cmp	[ebp+var_54], 200h
		mov	edx, eax
		jbe	short loc_6FFEB7CA

loc_6FFEB7AD:				; CODE XREF: sub_6FFEB6C0+106j
		mov	[ebp+var_48], 2
		call	sub_6FFEAE40
; ---------------------------------------------------------------------------
		align 10h

loc_6FFEB7C0:				; CODE XREF: sub_6FFEB6C0+10Dj
		add	ecx, 1
		cmp	ecx, 20h
		jz	short loc_6FFEB7AD
		shr	edx, 1

loc_6FFEB7CA:				; CODE XREF: sub_6FFEB6C0+EBj
		test	dl, 1
		jnz	short loc_6FFEB7C0
		mov	edi, dword_6FFEE05C
		mov	edx, 1
		shl	edx, cl
		shl	ecx, 9
		or	edx, eax
		mov	eax, [ebp+var_C]
		add	ecx, offset dword_6FFEE080
		test	edi, edi
		mov	dword_6FFEE068,	edx
		mov	[ebp+var_50], ecx
		jz	loc_6FFEB708
		mov	[esp], eax
		mov	[ebp+var_48], 1
		call	sub_6FFDB870
		test	eax, eax
		jz	loc_6FFEB708
		mov	dword ptr [esp], 4
		call	sub_6FFEB6C0
		mov	dword ptr [eax], offset	off_6FFF9F80
		mov	dword ptr [esp+8], offset sub_6FFEA2B0
		mov	dword ptr [esp+4], offset off_6FFF9A88
		mov	[esp], eax
		call	sub_6FFEC190
; ---------------------------------------------------------------------------
		align 10h

loc_6FFEB840:				; CODE XREF: sub_6FFEB6C0+5Fj
		mov	byte ptr [edi],	0
		mov	edi, [ebp+var_50]
		mov	dl, 5Fh
		add	edi, 1
		test	edi, 2
		jz	loc_6FFEB731

loc_6FFEB857:				; CODE XREF: sub_6FFEB6C0+6Bj
		mov	word ptr [edi],	0
		sub	edx, 2
		add	edi, 2
		jmp	loc_6FFEB731
; ---------------------------------------------------------------------------

loc_6FFEB867:				; CODE XREF: sub_6FFEB6C0+D5j
		mov	dword ptr [esp], 4
		call	sub_6FFEB6C0
		mov	dword ptr [eax], offset	off_6FFF9F68
		mov	dword ptr [esp+8], offset sub_6FFEA260
		mov	dword ptr [esp+4], offset off_6FFF9A7C
		mov	[esp], eax
		call	sub_6FFEC190
sub_6FFEB6C0	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn

sub_6FFEB891	proc near		; DATA XREF: sub_6FFEB6C0+21o
		add	ebp, 8
		mov	edx, [ebp-44h]
		mov	eax, [ebp-48h]
		mov	[ebp-5Ch], edx
		mov	edx, [ebp-40h]
		cmp	eax, 1
		mov	[ebp-60h], edx
		jz	short loc_6FFEB8C4
		cmp	eax, 2
		jz	short loc_6FFEB8D6
		cmp	edx, 0FFFFFFFFh
		jz	short loc_6FFEB8EE
		mov	eax, [ebp-5Ch]
		mov	dword ptr [ebp-48h], 0FFFFFFFFh
		mov	[esp+0], eax
		call	_Unwind_SjLj_Resume
; ---------------------------------------------------------------------------

loc_6FFEB8C4:				; CODE XREF: sub_6FFEB891+15j
		lea	eax, [ebp-0Ch]
		mov	[esp+0], eax
		mov	dword ptr [ebp-48h], 0FFFFFFFFh
		call	sub_6FFEA170

loc_6FFEB8D6:				; CODE XREF: sub_6FFEB891+1Aj
		cmp	dword ptr [ebp-60h], 0FFFFFFFFh
		jz	short loc_6FFEB900
		mov	edx, [ebp-5Ch]
		mov	dword ptr [ebp-48h], 0FFFFFFFFh
		mov	[esp+0], edx
		call	_Unwind_SjLj_Resume
; ---------------------------------------------------------------------------

loc_6FFEB8EE:				; CODE XREF: sub_6FFEB891+1Fj
		mov	edx, [ebp-5Ch]
		mov	dword ptr [ebp-48h], 0FFFFFFFFh
		mov	[esp+0], edx
		call	sub_6FFEBA60
; ---------------------------------------------------------------------------

loc_6FFEB900:				; CODE XREF: sub_6FFEB891+49j
		mov	eax, [ebp-5Ch]
		mov	dword ptr [ebp-48h], 0FFFFFFFFh
		mov	[esp+0], eax
		call	sub_6FFEBA60
sub_6FFEB891	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_6FFEB920	proc near		; CODE XREF: sub_6FFC88E0+F40p
					; sub_6FFC88E0+F88p ...

var_40		= dword	ptr -40h
var_3C		= byte ptr -3Ch
var_38		= dword	ptr -38h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_8		= byte ptr -8
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	esi
		push	ebx
		lea	eax, [ebp+var_8]
		sub	esp, 50h
		mov	[ebp+var_1C], eax
		lea	eax, [ebp+var_3C]
		mov	[esp], eax
		mov	[ebp+var_24], offset sub_6FFEC1F0
		mov	[ebp+var_20], offset dword_6FFED478
		mov	[ebp+var_18], offset sub_6FFEB9D7
		mov	[ebp+var_14], esp
		call	_Unwind_SjLj_Register
		call	sub_6FFEBF70
		mov	edx, [ebp+arg_0]
		sub	edx, 30h
		mov	ecx, [edx+30h]
		mov	ebx, [edx+34h]
		mov	esi, [eax]
		add	ecx, 0BCD4D500h
		adc	ebx, 0B8B1AABCh
		cmp	ebx, 0
		ja	short loc_6FFEB97A
		cmp	ecx, 1
		jbe	short loc_6FFEB9A0

loc_6FFEB97A:				; CODE XREF: sub_6FFEB920+53j
		test	esi, esi
		jnz	short loc_6FFEB9CB
		mov	[eax], edx
		mov	[ebp+var_40], 0

loc_6FFEB987:				; CODE XREF: sub_6FFEB920+A0j
		lea	eax, [ebp+var_3C]
		mov	[esp], eax
		call	_Unwind_SjLj_Unregister
		mov	eax, [ebp+var_40]
		add	esp, 50h
		pop	ebx
		pop	esi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6FFEB9A0:				; CODE XREF: sub_6FFEB920+58j
		mov	ecx, [edx+14h]
		test	ecx, ecx
		lea	ebx, [ecx+1]
		js	short loc_6FFEB9C2

loc_6FFEB9AA:				; CODE XREF: sub_6FFEB920+A9j
		mov	[edx+14h], ebx
		sub	dword ptr [eax+4], 1
		cmp	esi, edx
		jz	short loc_6FFEB9BA
		mov	[edx+10h], esi
		mov	[eax], edx

loc_6FFEB9BA:				; CODE XREF: sub_6FFEB920+93j
		mov	edx, [edx+28h]
		mov	[ebp+var_40], edx
		jmp	short loc_6FFEB987
; ---------------------------------------------------------------------------

loc_6FFEB9C2:				; CODE XREF: sub_6FFEB920+88j
		mov	ebx, 1
		sub	ebx, ecx
		jmp	short loc_6FFEB9AA
; ---------------------------------------------------------------------------

loc_6FFEB9CB:				; CODE XREF: sub_6FFEB920+5Cj
		mov	[ebp+var_38], 1
		call	sub_6FFEAE40
sub_6FFEB920	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn

sub_6FFEB9D7	proc near		; DATA XREF: sub_6FFEB920+22o
		add	ebp, 8
		cmp	dword ptr [ebp-30h], 0FFFFFFFFh
		mov	eax, [ebp-34h]
		jz	short loc_6FFEB9F2
		mov	[esp+0], eax
		mov	dword ptr [ebp-38h], 0FFFFFFFFh
		call	_Unwind_SjLj_Resume
; ---------------------------------------------------------------------------

loc_6FFEB9F2:				; CODE XREF: sub_6FFEB9D7+Aj
		mov	[esp+0], eax
		mov	dword ptr [ebp-38h], 0FFFFFFFFh
		call	sub_6FFEBA60
sub_6FFEB9D7	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn

sub_6FFEBA10	proc near		; CODE XREF: sub_6FFEC1F0+236p

var_1C		= dword	ptr -1Ch
arg_0		= dword	ptr  4

		push	ebx
		sub	esp, 18h
		mov	ebx, [esp+1Ch+arg_0]
		test	ebx, ebx
		jz	short loc_6FFEBA50
		mov	[esp+1Ch+var_1C], ebx
		call	sub_6FFEB920
		mov	eax, [ebx]
		mov	edx, [ebx+4]
		add	eax, 0BCD4D500h
		adc	edx, 0B8B1AABCh
		cmp	edx, 0
		ja	short loc_6FFEBA50
		cmp	eax, 1
		ja	short loc_6FFEBA50
		mov	eax, [ebx-24h]
		mov	[esp+1Ch+var_1C], eax
		call	sub_6FFDF790
; ---------------------------------------------------------------------------
		align 10h

loc_6FFEBA50:				; CODE XREF: sub_6FFEBA10+Aj
					; sub_6FFEBA10+27j ...
		call	sub_6FFEAE40
sub_6FFEBA10	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn bp-based	frame

sub_6FFEBA60	proc near		; CODE XREF: sub_6FFEA1F8+25p
					; sub_6FFEAF15+25p ...

var_68		= dword	ptr -68h
var_64		= dword	ptr -64h
var_60		= dword	ptr -60h
var_5C		= byte ptr -5Ch
var_58		= dword	ptr -58h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_18		= dword	ptr -18h
var_8		= byte ptr -8
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 88h
		lea	eax, [ebp+var_8]
		mov	[ebp+var_3C], eax
		lea	eax, [ebp+var_5C]
		mov	[esp], eax
		mov	[ebp+var_44], offset sub_6FFEC1F0
		mov	[ebp+var_40], offset dword_6FFED458
		mov	[ebp+var_38], offset sub_6FFEBACD
		mov	[ebp+var_34], esp
		call	_Unwind_SjLj_Register
		mov	edx, [ebp+arg_0]
		mov	[esp], edx
		call	sub_6FFEB920
		mov	eax, [ebp+arg_0]
		sub	eax, 30h
		mov	edx, [eax+18h]
		mov	ecx, [eax+20h]
		mov	[ebp+var_60], edx
		mov	edx, [eax+24h]
		mov	[ebp+var_68], ecx
		mov	ecx, [eax+0Ch]
		mov	eax, [eax+8]
		mov	[ebp+var_58], 2
		mov	[ebp+var_18], edx
		mov	[ebp+var_64], ecx
		mov	[esp], eax
		call	sub_6FFDF820
sub_6FFEBA60	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn

sub_6FFEBACD	proc near		; DATA XREF: sub_6FFEBA60+23o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		add	ebp, 8
		mov	eax, [ebp-54h]
		cmp	dword ptr [ebp-58h], 1
		mov	[ebp-70h], eax
		jz	short loc_6FFEBB06
		mov	dword ptr [ebp-58h], 0
		call	sub_6FFEBBF0
		mov	dword ptr [ebp-58h], 0
		call	sub_6FFEBBF0
		mov	edx, [ebp-70h]
		mov	dword ptr [ebp-58h], 0FFFFFFFFh
		mov	[esp+0], edx
		call	_Unwind_SjLj_Resume
; ---------------------------------------------------------------------------

loc_6FFEBB06:				; CODE XREF: sub_6FFEBACD+Dj
		mov	eax, [ebp-70h]
		mov	[esp+0], eax
		call	sub_6FFEB920
		call	sub_6FFEC050
		mov	eax, [eax]
		test	byte ptr [eax+30h], 1
		lea	edx, [eax+30h]
		jz	short loc_6FFEBB5B
		mov	edx, [edx-30h]
		mov	[ebp-6Ch], edx

loc_6FFEBB27:				; CODE XREF: sub_6FFEBACD+94j
		mov	edx, [ebp-68h]
		lea	ecx, [ebp-20h]
		xor	eax, eax
		mov	dword ptr [ebp-58h], 1
		call	sub_6FFDF380
		mov	ecx, [ebp-6Ch]
		lea	eax, [ebp-20h]
		mov	edx, [ecx-50h]
		mov	ecx, [ebp-60h]
		mov	[esp+0], ecx
		mov	ecx, [ebp-6Ch]
		call	sub_6FFDF440
		test	al, al
		jz	short loc_6FFEBB63
		call	sub_6FFEC130
; ---------------------------------------------------------------------------

loc_6FFEBB5B:				; CODE XREF: sub_6FFEBACD+52j
		add	eax, 50h
		mov	[ebp-6Ch], eax
		jmp	short loc_6FFEBB27
; ---------------------------------------------------------------------------

loc_6FFEBB63:				; CODE XREF: sub_6FFEBACD+87j
		mov	edx, [ebp-60h]
		lea	eax, [ebp-20h]
		xor	ecx, ecx
		mov	dword ptr [ebp-58h], 1
		mov	[esp+0], edx
		mov	edx, offset off_6FFF9A94
		call	sub_6FFDF440
		test	al, al
		jz	short loc_6FFEBBAD
		mov	dword ptr [esp+0], 4
		call	sub_6FFEB6C0
		mov	dword ptr [eax], offset	off_6FFF9F98
		mov	[esp+arg_4], offset sub_6FFEACD0
		mov	[esp+arg_0], offset off_6FFF9A94
		mov	[esp+0], eax
		call	sub_6FFEC190
; ---------------------------------------------------------------------------

loc_6FFEBBAD:				; CODE XREF: sub_6FFEBACD+B4j
		mov	ecx, [ebp-64h]
		mov	dword ptr [ebp-58h], 1
		mov	[esp+0], ecx
		call	sub_6FFDF790
sub_6FFEBACD	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6FFEBBC0	proc near		; CODE XREF: sub_6FFEA2D0+7Ep
		sub	esp, 0Ch
		call	sub_6FFEBF70
		mov	edx, [eax]
		xor	eax, eax
		test	edx, edx
		jz	short loc_6FFEBBD8
		test	byte ptr [edx+30h], 1
		jnz	short loc_6FFEBBE0

loc_6FFEBBD6:				; CODE XREF: sub_6FFEBBC0+25j
		mov	eax, [edx]

loc_6FFEBBD8:				; CODE XREF: sub_6FFEBBC0+Ej
		add	esp, 0Ch
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6FFEBBE0:				; CODE XREF: sub_6FFEBBC0+14j
		mov	edx, [edx]
		sub	edx, 50h
		jmp	short loc_6FFEBBD6
sub_6FFEBBC0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6FFEBBF0	proc near		; CODE XREF: sub_6FFC88E0+E89p
					; sub_6FFC88E0+F32p ...

var_5C		= dword	ptr -5Ch
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h

		push	ebx
		sub	esp, 18h
		call	sub_6FFEC050
		mov	edx, [eax]
		test	edx, edx
		jz	short loc_6FFEBC27
		mov	ecx, [edx+30h]
		mov	ebx, [edx+34h]
		add	ecx, 0BCD4D500h
		adc	ebx, 0B8B1AABCh
		cmp	ebx, 0
		jbe	short loc_6FFEBC30

loc_6FFEBC16:				; CODE XREF: sub_6FFEBBF0+43j
		mov	dword ptr [eax], 0
		add	edx, 30h
		mov	[esp+1Ch+var_1C], edx
		call	_Unwind_DeleteException

loc_6FFEBC27:				; CODE XREF: sub_6FFEBBF0+Dj
					; sub_6FFEBBF0+80j
		add	esp, 18h
		pop	ebx
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6FFEBC30:				; CODE XREF: sub_6FFEBBF0+24j
		cmp	ecx, 1
		ja	short loc_6FFEBC16
		mov	ecx, [edx+14h]
		test	ecx, ecx
		js	short loc_6FFEBC51
		sub	ecx, 1
		nop
		jz	short loc_6FFEBC60
		cmp	ecx, 0FFFFFFFFh
		jz	short loc_6FFEBC72

loc_6FFEBC47:				; CODE XREF: sub_6FFEBBF0+64j
					; sub_6FFEBBF0+6Bj
		mov	[edx+14h], ecx
		add	esp, 18h
		pop	ebx
		xchg	ax, ax
		retn
; ---------------------------------------------------------------------------

loc_6FFEBC51:				; CODE XREF: sub_6FFEBBF0+4Aj
		add	ecx, 1
		jnz	short loc_6FFEBC47
		mov	ebx, [edx+10h]
		mov	[eax], ebx
		jmp	short loc_6FFEBC47
; ---------------------------------------------------------------------------
		align 10h

loc_6FFEBC60:				; CODE XREF: sub_6FFEBBF0+50j
		mov	ecx, [edx+10h]
		add	edx, 30h
		mov	[eax], ecx
		mov	[esp+1Ch+var_1C], edx
		call	_Unwind_DeleteException
		jmp	short loc_6FFEBC27
; ---------------------------------------------------------------------------

loc_6FFEBC72:				; CODE XREF: sub_6FFEBBF0+55j
		call	sub_6FFEAE40
; ---------------------------------------------------------------------------
		align 10h
		push	ebp
		mov	ebp, esp
		sub	esp, 58h
		lea	eax, [ebp-8]
		mov	[ebp-1Ch], eax
		lea	eax, [ebp-3Ch]
		mov	dword ptr [ebp-24h], offset sub_6FFEC1F0
		mov	dword ptr [ebp-20h], offset dword_6FFED4DC
		mov	dword ptr [ebp-18h], offset loc_6FFEBDB9
		mov	[ebp-14h], esp
		mov	[esp+5Ch+var_5C], eax
		call	_Unwind_SjLj_Register
		cmp	dword ptr [ebp+8], offset dword_6FFF2080
		jb	short loc_6FFEBCC1
		cmp	dword ptr [ebp+8], offset dword_6FFF2A80
		jb	short loc_6FFEBCE0

loc_6FFEBCC1:				; CODE XREF: sub_6FFEBBF0+C6j
		mov	eax, [ebp+8]
		mov	[esp+20h+var_20], eax ;	void *
		call	free

loc_6FFEBCCC:				; CODE XREF: sub_6FFEBBF0+13Ej
					; sub_6FFEBBF0+155j
		lea	eax, [ebp-3Ch]
		mov	[esp+20h+var_20], eax
		call	_Unwind_SjLj_Unregister
		leave
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6FFEBCE0:				; CODE XREF: sub_6FFEBBF0+CFj
		mov	eax, [ebp+8]
		mov	ecx, 0CCCCCCCDh
		sub	eax, offset dword_6FFF2080
		mul	ecx
		mov	eax, dword_6FFEE05C
		shr	edx, 6
		test	eax, eax
		mov	[ebp-40h], edx
		jz	short loc_6FFEBD71
		mov	[esp+20h+var_20], offset dword_6FFF2A90
		mov	dword ptr [ebp-38h], 2
		call	sub_6FFDB990
		test	eax, eax
		jnz	short loc_6FFEBD8F
		movzx	ecx, byte ptr [ebp-40h]
		mov	eax, 0FFFFFFFEh
		rol	eax, cl
		mov	ecx, dword_6FFEE05C
		and	dword_6FFEE06C,	eax
		test	ecx, ecx
		jz	short loc_6FFEBCCC
		mov	[esp+20h+var_20], offset dword_6FFF2A90
		mov	dword ptr [ebp-38h], 1
		call	sub_6FFDB870
		test	eax, eax
		jz	short loc_6FFEBCCC
		mov	[esp+20h+var_20], 4
		call	sub_6FFEB6C0
		mov	dword ptr [eax], offset	off_6FFF9F80
		mov	[esp+20h+var_18], offset sub_6FFEA2B0
		mov	[esp+20h+var_1C], offset off_6FFF9A88
		mov	[esp+20h+var_20], eax
		call	sub_6FFEC190
; ---------------------------------------------------------------------------

loc_6FFEBD71:				; CODE XREF: sub_6FFEBBF0+10Cj
		movzx	ecx, byte ptr [ebp-40h]
		mov	eax, 0FFFFFFFEh
		rol	eax, cl
		and	dword_6FFEE06C,	eax
		lea	eax, [ebp-3Ch]
		mov	[esp+20h+var_20], eax
		call	_Unwind_SjLj_Unregister
		leave
		retn
; ---------------------------------------------------------------------------

loc_6FFEBD8F:				; CODE XREF: sub_6FFEBBF0+123j
		mov	[esp+20h+var_20], 4
		call	sub_6FFEB6C0
		mov	dword ptr [eax], offset	off_6FFF9F68
		mov	[esp+20h+var_18], offset sub_6FFEA260
		mov	[esp+20h+var_1C], offset off_6FFF9A7C
		mov	[esp+20h+var_20], eax
		call	sub_6FFEC190
; ---------------------------------------------------------------------------

loc_6FFEBDB9:				; DATA XREF: sub_6FFEBBF0+ADo
		add	ebp, 8
		mov	edx, [ebp-30h]
		mov	eax, [ebp-34h]
		cmp	edx, 0FFFFFFFFh
		jz	short loc_6FFEBDD6
		mov	[esp+1Ch+var_1C], eax
		mov	dword ptr [ebp-38h], 0FFFFFFFFh
		call	_Unwind_SjLj_Resume
; ---------------------------------------------------------------------------

loc_6FFEBDD6:				; CODE XREF: sub_6FFEBBF0+1D5j
		mov	[esp+1Ch+var_1C], eax
		mov	dword ptr [ebp-38h], 0FFFFFFFFh
		call	sub_6FFEBA60
; ---------------------------------------------------------------------------
		align 10h

loc_6FFEBDF0:				; CODE XREF: sub_6FFDF540+2Cj
		push	ebp
		mov	ebp, esp
		sub	esp, 58h
		lea	eax, [ebp-8]
		mov	[ebp-1Ch], eax
		lea	eax, [ebp-3Ch]
		mov	dword ptr [ebp-24h], offset sub_6FFEC1F0
		mov	dword ptr [ebp-20h], offset dword_6FFED4EC
		mov	dword ptr [ebp-18h], offset sub_6FFEBF28
		mov	[ebp-14h], esp
		mov	[esp+5Ch+var_5C], eax
		call	_Unwind_SjLj_Register
		cmp	dword ptr [ebp+8], offset dword_6FFEE080
		jb	short loc_6FFEBE31
		cmp	dword ptr [ebp+8], offset dword_6FFF2080
		jb	short loc_6FFEBE50

loc_6FFEBE31:				; CODE XREF: sub_6FFEBBF0+236j
		mov	eax, [ebp+8]
		sub	eax, 60h
		mov	[esp+20h+var_20], eax ;	void *
		call	free

loc_6FFEBE3F:				; CODE XREF: sub_6FFEBBF0+2A9j
					; sub_6FFEBBF0+2C0j
		lea	eax, [ebp-3Ch]
		mov	[esp+20h+var_20], eax
		call	_Unwind_SjLj_Unregister
		leave
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6FFEBE50:				; CODE XREF: sub_6FFEBBF0+23Fj
		mov	ecx, [ebp+8]
		sub	ecx, offset dword_6FFEE080
		shr	ecx, 9
		mov	[ebp-40h], ecx
		mov	ecx, dword_6FFEE05C
		test	ecx, ecx
		jz	short loc_6FFEBEE0
		mov	[esp+20h+var_20], offset dword_6FFF2A90
		mov	dword ptr [ebp-38h], 2
		call	sub_6FFDB990
		test	eax, eax
		jnz	short loc_6FFEBEFE
		movzx	ecx, byte ptr [ebp-40h]
		mov	eax, 0FFFFFFFEh
		mov	edx, dword_6FFEE05C
		rol	eax, cl
		and	dword_6FFEE068,	eax
		test	edx, edx
		jz	short loc_6FFEBE3F
		mov	[esp+20h+var_20], offset dword_6FFF2A90
		mov	dword ptr [ebp-38h], 1
		call	sub_6FFDB870
		test	eax, eax
		jz	short loc_6FFEBE3F
		mov	[esp+20h+var_20], 4
		call	sub_6FFEB6C0
		mov	dword ptr [eax], offset	off_6FFF9F80
		mov	[esp+20h+var_18], offset sub_6FFEA2B0
		mov	[esp+20h+var_1C], offset off_6FFF9A88
		mov	[esp+20h+var_20], eax
		call	sub_6FFEC190
; ---------------------------------------------------------------------------
		align 10h

loc_6FFEBEE0:				; CODE XREF: sub_6FFEBBF0+277j
		movzx	ecx, byte ptr [ebp-40h]
		mov	eax, 0FFFFFFFEh
		rol	eax, cl
		and	dword_6FFEE068,	eax
		lea	eax, [ebp-3Ch]
		mov	[esp+20h+var_20], eax
		call	_Unwind_SjLj_Unregister
		leave
		retn
; ---------------------------------------------------------------------------

loc_6FFEBEFE:				; CODE XREF: sub_6FFEBBF0+28Ej
		mov	[esp+20h+var_20], 4
		call	sub_6FFEB6C0
		mov	dword ptr [eax], offset	off_6FFF9F68
		mov	[esp+20h+var_18], offset sub_6FFEA260
		mov	[esp+20h+var_1C], offset off_6FFF9A7C
		mov	[esp+20h+var_20], eax
		call	sub_6FFEC190
sub_6FFEBBF0	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn

sub_6FFEBF28	proc near		; DATA XREF: sub_6FFEBBF0+21Do
		add	ebp, 8
		mov	edx, [ebp-30h]
		mov	eax, [ebp-34h]
		cmp	edx, 0FFFFFFFFh
		jz	short loc_6FFEBF45
		mov	[esp+0], eax
		mov	dword ptr [ebp-38h], 0FFFFFFFFh
		call	_Unwind_SjLj_Resume
; ---------------------------------------------------------------------------

loc_6FFEBF45:				; CODE XREF: sub_6FFEBF28+Cj
		mov	[esp+0], eax
		mov	dword ptr [ebp-38h], 0FFFFFFFFh
		call	sub_6FFEBA60
sub_6FFEBF28	endp

; ---------------------------------------------------------------------------
		align 10h
		mov	eax, [esp+4]
		mov	eax, [eax-8]
		retn
; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_6FFEBF70	proc near		; CODE XREF: .text:6FFEAE23p
					; .text:loc_6FFEB543p ...

var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_3C		= byte ptr -3Ch
var_38		= dword	ptr -38h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_8		= byte ptr -8

		push	ebp
		mov	ebp, esp
		sub	esp, 58h
		lea	eax, [ebp+var_8]
		mov	[ebp+var_1C], eax
		lea	eax, [ebp+var_3C]
		mov	[ebp+var_24], offset sub_6FFEC1F0
		mov	[ebp+var_20], offset dword_6FFED4BC
		mov	[ebp+var_18], offset sub_6FFEC025
		mov	[ebp+var_14], esp
		mov	[esp], eax
		call	_Unwind_SjLj_Register
		cmp	byte_6FFF2A84, 0
		mov	[ebp+var_44], offset dword_6FFEE060
		jnz	short loc_6FFEBFC0

loc_6FFEBFAF:				; CODE XREF: sub_6FFEBF70+69j
					; sub_6FFEBF70+B3j
		lea	eax, [ebp+var_3C]
		mov	[esp], eax
		call	_Unwind_SjLj_Unregister
		mov	eax, [ebp+var_44]
		leave
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6FFEBFC0:				; CODE XREF: sub_6FFEBF70+3Dj
		mov	eax, dword_6FFF2A80
		mov	[ebp+var_38], 1
		mov	[esp], eax	; DWORD
		call	sub_6FFDBAC0
		test	eax, eax
		mov	[ebp+var_44], eax
		jnz	short loc_6FFEBFAF
		mov	dword ptr [esp], 8 ; size_t
		call	malloc
		test	eax, eax
		mov	[ebp+var_40], eax
		jz	short loc_6FFEC003
		mov	[esp+4], eax	; LPVOID
		mov	eax, dword_6FFF2A80
		mov	[esp], eax	; DWORD
		call	sub_6FFDBA90
		test	eax, eax
		jz	short loc_6FFEC010

loc_6FFEC003:				; CODE XREF: sub_6FFEBF70+7Cj
		mov	[ebp+var_38], 1
		call	sub_6FFEAE40
; ---------------------------------------------------------------------------
		align 10h

loc_6FFEC010:				; CODE XREF: sub_6FFEBF70+91j
		mov	eax, [ebp+var_40]
		mov	[ebp+var_44], eax
		mov	dword ptr [eax], 0
		mov	dword ptr [eax+4], 0
		jmp	short loc_6FFEBFAF
sub_6FFEBF70	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn

sub_6FFEC025	proc near		; DATA XREF: sub_6FFEBF70+1Do
		add	ebp, 8
		cmp	dword ptr [ebp-30h], 0FFFFFFFFh
		mov	eax, [ebp-34h]
		jz	short loc_6FFEC040
		mov	[esp+0], eax
		mov	dword ptr [ebp-38h], 0FFFFFFFFh
		call	_Unwind_SjLj_Resume
; ---------------------------------------------------------------------------

loc_6FFEC040:				; CODE XREF: sub_6FFEC025+Aj
		mov	[esp+0], eax
		mov	dword ptr [ebp-38h], 0FFFFFFFFh
		call	sub_6FFEBA60
sub_6FFEC025	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_6FFEC050	proc near		; CODE XREF: sub_6FFEBACD+44p
					; sub_6FFEBBF0+4p

var_40		= dword	ptr -40h
var_3C		= byte ptr -3Ch
var_38		= dword	ptr -38h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_8		= byte ptr -8

		push	ebp
		mov	ebp, esp
		sub	esp, 58h
		lea	eax, [ebp+var_8]
		mov	[ebp+var_1C], eax
		lea	eax, [ebp+var_3C]
		mov	[ebp+var_24], offset sub_6FFEC1F0
		mov	[ebp+var_20], offset dword_6FFED4AC
		mov	[ebp+var_18], offset sub_6FFEC0C7
		mov	[ebp+var_14], esp
		mov	[esp], eax
		call	_Unwind_SjLj_Register
		cmp	byte_6FFF2A84, 0
		mov	[ebp+var_40], offset dword_6FFEE060
		jnz	short loc_6FFEC0A0
		lea	eax, [ebp+var_3C]
		mov	[esp], eax
		call	_Unwind_SjLj_Unregister
		mov	eax, [ebp+var_40]
		leave
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6FFEC0A0:				; CODE XREF: sub_6FFEC050+3Dj
		mov	eax, dword_6FFF2A80
		mov	[esp], eax	; DWORD
		mov	[ebp+var_38], 1
		call	sub_6FFDBAC0
		mov	[ebp+var_40], eax
		lea	eax, [ebp+var_3C]
		mov	[esp], eax
		call	_Unwind_SjLj_Unregister
		mov	eax, [ebp+var_40]
		leave
		retn
sub_6FFEC050	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn

sub_6FFEC0C7	proc near		; DATA XREF: sub_6FFEC050+1Do
		add	ebp, 8
		cmp	dword ptr [ebp-30h], 0FFFFFFFFh
		mov	eax, [ebp-34h]
		jz	short loc_6FFEC0E2
		mov	[esp+0], eax
		mov	dword ptr [ebp-38h], 0FFFFFFFFh
		call	_Unwind_SjLj_Resume
; ---------------------------------------------------------------------------

loc_6FFEC0E2:				; CODE XREF: sub_6FFEC0C7+Aj
		mov	[esp+0], eax
		mov	dword ptr [ebp-38h], 0FFFFFFFFh
		call	sub_6FFEBA60
sub_6FFEC0C7	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn

sub_6FFEC100	proc near		; DATA XREF: .rdata:6FFF9EB0o
					; .rdata:6FFF9F10o

var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h

		sub	esp, 1Ch
		mov	[esp+1Ch+var_14], 1Bh ;	unsigned int
		mov	[esp+1Ch+var_18], offset aPureVirtualMet ; "pure virtual method	called\n"
		mov	[esp+1Ch+var_1C], 2 ; int
		call	_write
		call	sub_6FFEAE40
sub_6FFEC100	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn

sub_6FFEC130	proc near		; CODE XREF: sub_6FFC88E0+F7Ap
					; sub_6FFC88E0+FA5p ...

var_1C		= dword	ptr -1Ch

		push	ebx
		sub	esp, 18h
		call	sub_6FFEBF70
		mov	ebx, [eax]
		add	dword ptr [eax+4], 1
		test	ebx, ebx
		jz	short loc_6FFEC173
		mov	edx, [ebx+30h]
		mov	ecx, [ebx+34h]
		add	edx, 0BCD4D500h
		adc	ecx, 0B8B1AABCh
		cmp	ecx, 0
		jbe	short loc_6FFEC178

loc_6FFEC15A:				; CODE XREF: sub_6FFEC130+4Bj
		mov	dword ptr [eax], 0

loc_6FFEC160:				; CODE XREF: sub_6FFEC130+50j
		add	ebx, 30h
		mov	[esp+1Ch+var_1C], ebx
		call	_Unwind_SjLj_Resume_or_Rethrow
; ---------------------------------------------------------------------------
		mov	[esp+1Ch+var_1C], ebx
		call	sub_6FFEB920

loc_6FFEC173:				; CODE XREF: sub_6FFEC130+11j
		call	sub_6FFEAE40
; ---------------------------------------------------------------------------

loc_6FFEC178:				; CODE XREF: sub_6FFEC130+28j
		cmp	edx, 1
		ja	short loc_6FFEC15A
		neg	dword ptr [ebx+14h]
		jmp	short loc_6FFEC160
sub_6FFEC130	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn

sub_6FFEC190	proc near		; CODE XREF: sub_6FFEA170+83p
					; sub_6FFEAE70+A0p ...

var_1C		= dword	ptr -1Ch
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	ebx
		sub	esp, 18h
		mov	ebx, [esp+1Ch+arg_0]
		mov	edx, [esp+1Ch+arg_4]
		lea	eax, [ebx-60h]
		mov	[eax+10h], edx
		mov	edx, [esp+1Ch+arg_8]
		mov	dword ptr [ebx-60h], 1
		sub	ebx, 20h
		mov	dword ptr [eax+40h], 432B2B00h
		mov	dword ptr [eax+44h], 474E5543h
		mov	[eax+14h], edx
		mov	edx, off_6FFF2A8C
		mov	dword ptr [eax+48h], offset sub_6FFDF540
		mov	[eax+18h], edx
		mov	edx, off_6FFF2A88
		mov	[eax+1Ch], edx
		mov	[esp+1Ch+var_1C], ebx
		call	_Unwind_SjLj_RaiseException
		mov	[esp+1Ch+var_1C], ebx
		call	sub_6FFEB920
		call	sub_6FFEAE40
sub_6FFEC190	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_6FFEC1F0	proc near		; DATA XREF: sub_6FFC1680+12o
					; .text:6FFC1792o ...

var_B8		= dword	ptr -0B8h
var_B4		= dword	ptr -0B4h
var_AD		= byte ptr -0ADh
var_AC		= dword	ptr -0ACh
var_A8		= dword	ptr -0A8h
var_A4		= dword	ptr -0A4h
var_A0		= dword	ptr -0A0h
var_99		= byte ptr -99h
var_98		= dword	ptr -98h
var_94		= dword	ptr -94h
var_8C		= dword	ptr -8Ch
var_88		= dword	ptr -88h
var_84		= dword	ptr -84h
var_80		= dword	ptr -80h
var_7C		= dword	ptr -7Ch
var_78		= dword	ptr -78h
var_74		= dword	ptr -74h
var_70		= dword	ptr -70h
var_6C		= byte ptr -6Ch
var_68		= dword	ptr -68h
var_54		= dword	ptr -54h
var_50		= dword	ptr -50h
var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_38		= byte ptr -38h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= byte ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= byte ptr -18h
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h
arg_10		= dword	ptr  18h
arg_14		= dword	ptr  1Ch

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		sub	esp, 0CCh
		mov	eax, [ebp+arg_8]
		mov	edx, [ebp+arg_C]
		mov	[ebp+var_54], offset sub_6FFEC1F0
		mov	[ebp+var_50], offset dword_6FFED468
		mov	[ebp+var_98], eax
		lea	eax, [ebp+var_6C]
		mov	[ebp+var_94], edx
		lea	edx, [ebp+var_18]
		mov	[ebp+var_4C], edx
		mov	[ebp+var_48], offset sub_6FFEC783
		mov	[ebp+var_44], esp
		mov	[esp], eax
		call	_Unwind_SjLj_Register
		cmp	[ebp+arg_0], 1
		mov	[ebp+var_78], 3
		jz	short loc_6FFEC260

loc_6FFEC244:				; CODE XREF: sub_6FFEC1F0+1C4j
					; sub_6FFEC1F0+257j ...
		lea	eax, [ebp+var_6C]
		mov	[esp], eax
		call	_Unwind_SjLj_Unregister
		mov	eax, [ebp+var_78]
		add	esp, 0CCh
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6FFEC260:				; CODE XREF: sub_6FFEC1F0+52j
		mov	eax, [ebp+arg_10]
		mov	edx, [ebp+var_94]
		mov	[ebp+var_1C], 0
		mov	[ebp+var_20], 0
		sub	eax, 30h
		mov	[ebp+var_A4], eax
		mov	eax, [ebp+var_98]
		mov	[ebp+var_99], 1
		add	eax, 0BCD4D500h
		adc	edx, 0B8B1AABCh
		cmp	edx, 0
		jbe	loc_6FFEC3C0
		cmp	[ebp+arg_4], 6
		jz	loc_6FFEC3DA

loc_6FFEC2AB:				; CODE XREF: sub_6FFEC1F0+1E4j
					; sub_6FFEC1F0+1F1j
		mov	eax, [ebp+arg_14]
		mov	[ebp+var_68], 0FFFFFFFFh
		mov	[esp], eax
		call	_Unwind_GetLanguageSpecificData
		test	eax, eax
		mov	[ebp+var_A0], eax
		jz	loc_6FFEC50E
		mov	edx, eax
		mov	eax, [ebp+arg_14]
		lea	ecx, [ebp+var_38]
		call	sub_6FFDF380
		mov	edx, [ebp+arg_14]
		mov	[ebp+var_B4], eax
		movzx	eax, [ebp+var_24]
		call	sub_6FFDF4C0
		mov	edx, [ebp+arg_14]
		mov	[esp], edx
		mov	[ebp+var_30], eax
		lea	eax, [ebp+var_20]
		mov	[esp+4], eax
		call	_Unwind_GetIPInfo
		cmp	[ebp+var_20], 1
		sbb	eax, 0
		cmp	eax, 0
		mov	[ebp+var_74], eax
		jl	loc_6FFEC50E
		jnz	loc_6FFEC482
		mov	[ebp+var_7C], 0
		mov	eax, 1
		mov	[ebp+var_AC], 0
		mov	[ebp+var_80], 0

loc_6FFEC335:				; CODE XREF: sub_6FFEC1F0+44Dj
					; sub_6FFEC1F0+537j
		test	byte ptr [ebp+arg_4], 1
		jnz	loc_6FFEC430

loc_6FFEC33F:				; CODE XREF: sub_6FFEC1F0+32Fj
		test	byte ptr [ebp+arg_4], 8
		jz	loc_6FFEC695

loc_6FFEC349:				; CODE XREF: sub_6FFEC1F0+4ACj
		cmp	eax, 1
		jz	loc_6FFEC76B
		mov	edx, [ebp+var_7C]
		test	edx, edx
		js	loc_6FFEC777

loc_6FFEC35D:				; CODE XREF: sub_6FFEC1F0+4C0j
					; sub_6FFEC1F0+4F3j
		mov	eax, [ebp+arg_10]
		mov	edx, [ebp+arg_14]
		mov	dword ptr [esp+4], 0
		mov	[ebp+var_68], 0FFFFFFFFh
		mov	[esp+8], eax
		mov	[esp], edx
		call	_Unwind_SetGR
		mov	eax, [ebp+var_7C]
		mov	edx, [ebp+arg_14]
		mov	dword ptr [esp+4], 1
		mov	[esp+8], eax
		mov	[esp], edx
		call	_Unwind_SetGR
		mov	eax, [ebp+var_AC]
		mov	edx, [ebp+arg_14]
		mov	[esp+4], eax
		mov	[esp], edx
		call	_Unwind_SetIP
		mov	[ebp+var_78], 7
		jmp	loc_6FFEC244
; ---------------------------------------------------------------------------
		align 10h

loc_6FFEC3C0:				; CODE XREF: sub_6FFEC1F0+ABj
		cmp	eax, 2
		sbb	eax, eax
		not	eax
		and	eax, 1
		cmp	[ebp+arg_4], 6
		mov	[ebp+var_99], al
		jnz	loc_6FFEC2AB

loc_6FFEC3DA:				; CODE XREF: sub_6FFEC1F0+B5j
		cmp	[ebp+var_99], 0
		jnz	loc_6FFEC2AB
		mov	edx, [ebp+var_A4]
		mov	eax, [ebp+var_A4]
		mov	edx, [edx+18h]
		mov	eax, [eax+20h]
		mov	[ebp+var_7C], edx
		mov	edx, [ebp+var_A4]
		mov	[ebp+var_A0], eax
		mov	edx, [edx+24h]
		test	edx, edx
		mov	[ebp+var_AC], edx
		jnz	loc_6FFEC51A

loc_6FFEC419:				; CODE XREF: sub_6FFEC1F0+4B5j
		mov	eax, [ebp+arg_10]
		mov	[ebp+var_68], 0FFFFFFFFh
		mov	[esp], eax
		call	sub_6FFEBA10
; ---------------------------------------------------------------------------
		align 10h

loc_6FFEC430:				; CODE XREF: sub_6FFEC1F0+149j
		cmp	eax, 2
		jz	loc_6FFEC50E
		cmp	[ebp+var_99], 0
		mov	[ebp+var_78], 6
		jnz	loc_6FFEC244
		mov	eax, [ebp+var_A4]
		mov	edx, [ebp+var_7C]
		mov	[eax+18h], edx
		mov	edx, [ebp+var_80]
		mov	[eax+1Ch], edx
		mov	edx, [ebp+var_A0]
		mov	[eax+20h], edx
		mov	eax, [ebp+var_1C]
		mov	edx, [ebp+var_A4]
		mov	[edx+28h], eax
		mov	eax, [ebp+var_AC]
		mov	[edx+24h], eax
		jmp	loc_6FFEC244
; ---------------------------------------------------------------------------

loc_6FFEC482:				; CODE XREF: sub_6FFEC1F0+122j
		mov	eax, [ebp+var_B4]
		xor	edi, edi
		lea	esi, [esi+0]

loc_6FFEC490:				; CODE XREF: sub_6FFEC1F0+2EAj
		mov	[ebp+var_84], edi
		mov	ecx, edi
		mov	esi, edi
		lea	esi, [esi+0]

loc_6FFEC4A0:				; CODE XREF: sub_6FFEC1F0+2C4j
		movzx	ebx, byte ptr [eax]
		add	eax, 1
		mov	edx, ebx
		and	edx, 7Fh
		shl	edx, cl
		add	ecx, 7
		or	esi, edx
		test	bl, bl
		js	short loc_6FFEC4A0
		mov	[ebp+var_84], esi
		mov	ecx, edi
		mov	esi, edi

loc_6FFEC4C0:				; CODE XREF: sub_6FFEC1F0+2E4j
		movzx	ebx, byte ptr [eax]
		add	eax, 1
		mov	edx, ebx
		and	edx, 7Fh
		shl	edx, cl
		add	ecx, 7
		or	esi, edx
		test	bl, bl
		js	short loc_6FFEC4C0
		sub	[ebp+var_74], 1
		jnz	short loc_6FFEC490
		mov	ebx, esi
		mov	esi, [ebp+var_84]
		mov	[ebp+var_80], 0
		add	esi, 1
		test	ebx, ebx
		mov	[ebp+var_AC], esi
		jz	short loc_6FFEC504
		sub	ebx, 1
		mov	eax, [ebp+var_28]
		mov	[ebp+var_80], ebx
		add	[ebp+var_80], eax

loc_6FFEC504:				; CODE XREF: sub_6FFEC1F0+306j
		mov	edx, [ebp+var_AC]
		test	edx, edx
		jnz	short loc_6FFEC524

loc_6FFEC50E:				; CODE XREF: sub_6FFEC1F0+D5j
					; sub_6FFEC1F0+11Cj ...
		mov	[ebp+var_78], 8
		jmp	loc_6FFEC244
; ---------------------------------------------------------------------------

loc_6FFEC51A:				; CODE XREF: sub_6FFEC1F0+223j
		mov	eax, 3
		jmp	loc_6FFEC33F
; ---------------------------------------------------------------------------

loc_6FFEC524:				; CODE XREF: sub_6FFEC1F0+31Cj
		mov	eax, [ebp+var_80]
		test	eax, eax
		jz	loc_6FFEC71B
		mov	edx, [ebp+arg_4]
		and	edx, 8
		mov	[ebp+var_B8], edx
		jz	loc_6FFEC730
		mov	[ebp+var_A8], offset off_6FFF9A54

loc_6FFEC54B:				; CODE XREF: sub_6FFEC1F0+551j
					; sub_6FFEC1F0+56Ej
		mov	[ebp+var_AD], 0

loc_6FFEC552:				; CODE XREF: sub_6FFEC1F0+410j
		mov	eax, [ebp+var_80]
		xor	edi, edi
		xor	ecx, ecx
		lea	esi, [esi+0]

loc_6FFEC560:				; CODE XREF: sub_6FFEC1F0+387j
		movzx	ebx, byte ptr [eax]
		add	eax, 1
		movzx	esi, bl
		mov	edx, esi
		and	edx, 7Fh
		shl	edx, cl
		add	ecx, 7
		or	edi, edx
		test	bl, bl
		js	short loc_6FFEC560
		cmp	ecx, 1Fh
		mov	[ebp+var_8C], eax
		ja	short loc_6FFEC592
		and	esi, 40h
		jz	short loc_6FFEC592
		mov	edx, 0FFFFFFFFh
		shl	edx, cl
		or	edi, edx

loc_6FFEC592:				; CODE XREF: sub_6FFEC1F0+392j
					; sub_6FFEC1F0+397j
		mov	[ebp+var_7C], edi
		xor	ecx, ecx
		mov	[ebp+var_88], edi
		xor	edi, edi
		mov	[ebp+var_70], 0

loc_6FFEC5A6:				; CODE XREF: sub_6FFEC1F0+3CDj
		movzx	ebx, byte ptr [eax]
		add	eax, 1
		movzx	esi, bl
		mov	edx, esi
		and	edx, 7Fh
		shl	edx, cl
		add	ecx, 7
		or	edi, edx
		test	bl, bl
		js	short loc_6FFEC5A6
		cmp	ecx, 1Fh
		mov	[ebp+var_70], edi
		mov	edi, [ebp+var_88]
		ja	short loc_6FFEC5DC
		and	esi, 40h
		jz	short loc_6FFEC5DC
		mov	eax, 0FFFFFFFFh
		shl	eax, cl
		or	[ebp+var_70], eax

loc_6FFEC5DC:				; CODE XREF: sub_6FFEC1F0+3DBj
					; sub_6FFEC1F0+3E0j
		cmp	[ebp+var_7C], 0
		jnz	short loc_6FFEC605
		mov	[ebp+var_AD], 1

loc_6FFEC5E9:				; CODE XREF: sub_6FFEC1F0+434j
					; sub_6FFEC1F0+446j ...
		mov	ecx, [ebp+var_70]
		test	ecx, ecx
		jz	loc_6FFEC70E
		mov	edx, [ebp+var_8C]
		add	edx, [ebp+var_70]
		mov	[ebp+var_80], edx
		jmp	loc_6FFEC552
; ---------------------------------------------------------------------------

loc_6FFEC605:				; CODE XREF: sub_6FFEC1F0+3F0j
		jle	short loc_6FFEC642
		mov	edx, edi
		lea	eax, [ebp+var_38]
		mov	[ebp+var_68], 0FFFFFFFFh
		call	sub_6FFDF2A0
		test	eax, eax
		jz	short loc_6FFEC638
		mov	edi, [ebp+var_A8]
		test	edi, edi
		jz	short loc_6FFEC5E9
		mov	edx, [ebp+var_A8]
		lea	ecx, [ebp+var_1C]
		call	sub_6FFDF310
		test	al, al
		jz	short loc_6FFEC5E9

loc_6FFEC638:				; CODE XREF: sub_6FFEC1F0+42Aj
					; sub_6FFEC1F0+4A3j
		mov	eax, 3
		jmp	loc_6FFEC335
; ---------------------------------------------------------------------------

loc_6FFEC642:				; CODE XREF: sub_6FFEC1F0:loc_6FFEC605j
		mov	esi, [ebp+var_A8]
		test	esi, esi
		jz	short loc_6FFEC663
		mov	ebx, [ebp+var_B8]
		test	ebx, ebx
		jnz	short loc_6FFEC663
		cmp	[ebp+var_99], 0
		jz	loc_6FFEC6E8

loc_6FFEC663:				; CODE XREF: sub_6FFEC1F0+45Aj
					; sub_6FFEC1F0+464j
		not	edi
		xor	ebx, ebx
		add	edi, [ebp+var_2C]
		xor	ecx, ecx
		lea	esi, [esi+0]

loc_6FFEC670:				; CODE XREF: sub_6FFEC1F0+494j
		movzx	edx, byte ptr [edi]
		add	edi, 1
		mov	eax, edx
		and	eax, 7Fh
		shl	eax, cl
		add	ecx, 7
		or	ebx, eax
		test	dl, dl
		js	short loc_6FFEC670
		test	ebx, ebx
		setz	al

loc_6FFEC68B:				; CODE XREF: sub_6FFEC1F0+519j
		test	al, al
		jz	loc_6FFEC5E9
		jmp	short loc_6FFEC638
; ---------------------------------------------------------------------------

loc_6FFEC695:				; CODE XREF: sub_6FFEC1F0+153j
		cmp	[ebp+var_99], 0
		jnz	loc_6FFEC349
		cmp	eax, 1
		jz	loc_6FFEC419
		mov	eax, [ebp+var_7C]
		test	eax, eax
		jns	loc_6FFEC35D
		mov	edx, [ebp+var_A0]
		lea	ecx, [ebp+var_38]
		mov	eax, [ebp+arg_14]
		mov	[ebp+var_68], 0FFFFFFFFh
		call	sub_6FFDF380
		mov	edx, [ebp+arg_14]
		movzx	eax, [ebp+var_24]
		call	sub_6FFDF4C0
		mov	edx, [ebp+var_A4]
		mov	[edx+24h], eax
		jmp	loc_6FFEC35D
; ---------------------------------------------------------------------------

loc_6FFEC6E8:				; CODE XREF: sub_6FFEC1F0+46Dj
		mov	eax, [ebp+var_7C]
		mov	ecx, [ebp+var_1C]
		mov	edx, [ebp+var_A8]
		mov	[ebp+var_68], 0FFFFFFFFh
		mov	[esp], eax
		lea	eax, [ebp+var_38]
		call	sub_6FFDF440
		xor	eax, 1
		jmp	loc_6FFEC68B
; ---------------------------------------------------------------------------

loc_6FFEC70E:				; CODE XREF: sub_6FFEC1F0+3FEj
		cmp	[ebp+var_AD], 0
		jz	loc_6FFEC50E

loc_6FFEC71B:				; CODE XREF: sub_6FFEC1F0+339j
		mov	[ebp+var_7C], 0
		mov	eax, 2
		jmp	loc_6FFEC335
; ---------------------------------------------------------------------------
		align 10h

loc_6FFEC730:				; CODE XREF: sub_6FFEC1F0+34Bj
		cmp	[ebp+var_99], 0
		mov	[ebp+var_A8], offset off_6FFF9A68
		jnz	loc_6FFEC54B
		mov	eax, [ebp+arg_10]
		test	byte ptr [eax],	1
		jz	short loc_6FFEC763
		mov	eax, [eax-30h]

loc_6FFEC752:				; CODE XREF: sub_6FFEC1F0+579j
		mov	[ebp+var_1C], eax
		mov	eax, [eax-50h]
		mov	[ebp+var_A8], eax
		jmp	loc_6FFEC54B
; ---------------------------------------------------------------------------

loc_6FFEC763:				; CODE XREF: sub_6FFEC1F0+55Dj
		mov	eax, [ebp+arg_10]
		add	eax, 20h
		jmp	short loc_6FFEC752
; ---------------------------------------------------------------------------

loc_6FFEC76B:				; CODE XREF: sub_6FFEC1F0+15Cj
		mov	[ebp+var_68], 0FFFFFFFFh
		call	sub_6FFEAE40
; ---------------------------------------------------------------------------

loc_6FFEC777:				; CODE XREF: sub_6FFEC1F0+167j
		mov	[ebp+var_68], 2
		call	sub_6FFEADE0
sub_6FFEC1F0	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn

sub_6FFEC783	proc near		; DATA XREF: sub_6FFEC1F0+35o
		add	ebp, 18h
		mov	eax, [ebp-64h]
		cmp	dword ptr [ebp-68h], 1
		mov	[ebp-0BCh], eax
		jz	short loc_6FFEC7B6
		mov	dword ptr [ebp-68h], 0
		call	sub_6FFEBBF0
		mov	edx, [ebp-0BCh]
		mov	dword ptr [ebp-68h], 0FFFFFFFFh
		mov	[esp+0], edx
		call	_Unwind_SjLj_Resume
; ---------------------------------------------------------------------------

loc_6FFEC7B6:				; CODE XREF: sub_6FFEC783+10j
		mov	edx, [ebp-0BCh]
		mov	[esp+0], edx
		call	sub_6FFEB920
		mov	dword ptr [ebp-68h], 1
		call	sub_6FFEAE40
sub_6FFEC783	endp


; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_6FFEC7D0()
sub_6FFEC7D0	proc near		; DATA XREF: sub_6FFDBE40:loc_6FFDBE70o

var_1C		= dword	ptr -1Ch

		sub	esp, 1Ch
		cmp	byte_6FFF2A84, 0
		jz	short loc_6FFEC7E9
		mov	eax, dword_6FFF2A80
		mov	[esp+1Ch+var_1C], eax ;	DWORD
		call	sub_6FFDBB00

loc_6FFEC7E9:				; CODE XREF: sub_6FFEC7D0+Aj
		mov	byte_6FFF2A84, 0
		add	esp, 1Ch
		retn
sub_6FFEC7D0	endp

; ---------------------------------------------------------------------------
		align 10h
dword_6FFEC800	dd 0FFFFFFFFh		; DATA XREF: sub_6FFDAF10-5Br
					; sub_6FFDAF10-4Co ...
		dd offset loc_6FFC14B0
		dd offset loc_6FFC1A10
		dd offset sub_6FFC8060
		dd offset sub_6FFCCA40
		dd offset sub_6FFD55E0
		dd offset sub_6FFDBE40
		dd offset sub_6FFDBE20
		dd offset sub_6FFDBE00
		align 8
		dd 0FFFFFFFFh
dword_6FFEC82C	dd 0			; DATA XREF: .data:off_6FFEE058o
dword_6FFEC830	dd 201FFFFh		; DATA XREF: sub_6FFC1680+19o
		db 2 dup(0)
word_6FFEC836	dw 0FFFFh		; DATA XREF: .text:6FFC1799o
		dd 201h
dword_6FFEC83C	dd 201FFFFh, 0		; DATA XREF: sub_6FFDF180+19o
dword_6FFEC844	dd 10D00FFh, 1000004h, 101h, 0 ; DATA XREF: sub_6FFE4310+1Do
dword_6FFEC854	dd 10D00FFh, 1000004h, 101h, 0 ; DATA XREF: sub_6FFE48A0+1Do
dword_6FFEC864	dd 11500FFh, 1000008h, 3030203h, 103h, 7Dh, 0 ;	DATA XREF: sub_6FFE3A00+19o
dword_6FFEC87C	dd 201FFFFh		; DATA XREF: sub_6FFE9FF0+1Co
		db 2 dup(0)
word_6FFEC882	dw 0FFFFh		; DATA XREF: sub_6FFE00E0+19o
		dd 0A01h, 20001h, 40003h
dword_6FFEC890	dd 201FFFFh		; DATA XREF: _ZN16DBusMenuExporterD0Ev+19o
		db 2 dup(0)
word_6FFEC896	dw 0FFFFh		; DATA XREF: _ZN16DBusMenuExporterD1Ev+19o
		dd 201h
dword_6FFEC89C	dd 201FFFFh, 0		; DATA XREF: _ZN16DBusMenuExporterD2Ev+19o
dword_6FFEC8A4	dd 11100FFh, 1000006h, 1010203h, 7D0000h ; DATA	XREF: sub_6FFE9DD0+25o
		dd offset off_6FFF9AA0
dword_6FFEC8B8	dd 201FFFFh		; DATA XREF: sub_6FFC1EB0+19o
		db 2 dup(0)
word_6FFEC8BE	dw 0FFFFh		; DATA XREF: _ZN16DBusMenuExporter14activateActionEP7QAction+16o
		dd 401h
		db 1, 0
word_6FFEC8C6	dw 0FFFFh		; DATA XREF: _ZN16DBusMenuExporter17iconNameForActionEP7QAction+19o
		dd 401h, 1
dword_6FFEC8D0	dd 12100FFh, 1030016h, 3030203h, 5000403h, 7000600h, 9000803h
					; DATA XREF: sub_6FFE8EA0+1Eo
		dd 1000A01h, 7D0000h, 0
dword_6FFEC8F4	dd 11100FFh, 1030006h, 1000203h, 7D0000h, 0 ; DATA XREF: sub_6FFE8C20+16o
dword_6FFEC908	dd 11500FFh, 1030008h, 3010203h, 100h, 7Dh, 0 ;	DATA XREF: sub_6FFE54B0+19o
dword_6FFEC920	dd 201FFFFh, 0		; DATA XREF: sub_6FFDEBE0+16o
dword_6FFEC928	dd 11900FFh, 103000Ch, 3030203h, 5000403h, 101h, 7Dh, 0
					; DATA XREF: sub_6FFE3B80+1Co
dword_6FFEC944	dd 201FFFFh		; DATA XREF: sub_6FFE4D40+19o
		db 2 dup(0)
word_6FFEC94A	dw 0FFFFh		; DATA XREF: sub_6FFE4BE0+19o
		dd 201h
dword_6FFEC950	dd 1001FFFFh, 10000h, 30002h, 50004h, 70006h ; DATA XREF: sub_6FFC24B0+22o
dword_6FFEC964	dd 0A01FFFFh, 10000h, 30002h ; DATA XREF: sub_6FFC28C0+1Co
		db 4, 0
word_6FFEC972	dw 0FFFFh		; DATA XREF: sub_6FFC2AE0+25o
		dd 2601h, 20001h, 40003h, 60005h, 80007h, 0A0009h, 0C000Bh
		dd 0E000Dh, 10000Fh, 120011h
dword_6FFEC99C	dd 1C01FFFFh, 10000h, 30002h, 50004h, 70006h, 90008h, 0B000Ah
					; DATA XREF: sub_6FFC3520+25o
		dd 0D000Ch
dword_6FFEC9BC	dd 601FFFFh, 10000h, 2	; DATA XREF: sub_6FFC3D40+19o
dword_6FFEC9C8	dd 10D00FFh, 1010002h, 0 ; DATA	XREF: sub_6FFE4DE0+1Co
		dd offset off_6FFF9AA0
dword_6FFEC9D8	dd 201FFFFh		; DATA XREF: sub_6FFC4330+20o
		db 2 dup(0)
word_6FFEC9DE	dw 0FFFFh		; DATA XREF: _ZN16DBusMenuExporter19doEmitLayoutUpdatedEv+1Fo
		dd 601h, 20001h
dword_6FFEC9E8	dd 801FFFFh, 10000h, 30002h ; DATA XREF: sub_6FFC4C20+22o
dword_6FFEC9F4	dd 801FFFFh, 10000h, 30002h ; DATA XREF: sub_6FFC56B0+19o
dword_6FFECA00	dd 0A01FFFFh, 10000h, 30002h
					; DATA XREF: _ZN16DBusMenuExporterC1ERK7QStringP5QMenuRK15QDBusConnection+1Do
		db 4, 0
word_6FFECA0E	dw 0FFFFh		; DATA XREF: _ZN16DBusMenuExporterC2ERK7QStringP5QMenuRK15QDBusConnection+1Do
		dd 0A01h, 20001h, 40003h
dword_6FFECA1C	dd 601FFFFh, 10000h	; DATA XREF: sub_6FFDFBB0+19o
		db 2, 0
word_6FFECA26	dw 0FFFFh		; DATA XREF: sub_6FFE7EB0+16o
		dd 201h
dword_6FFECA2C	dd 201FFFFh, 0		; DATA XREF: sub_6FFE8070+19o
dword_6FFECA34	dd 11500FFh, 1030008h, 3010203h, 100h, 7Dh, 0 ;	DATA XREF: sub_6FFE6BF0+19o
dword_6FFECA4C	dd 12900FFh, 103001Ch, 3030203h, 5010403h, 7030603h, 9000801h
					; DATA XREF: sub_6FFE7040+1Fo
		dd 0B000A00h, 0D000C01h, 101h, 7Dh, 0
dword_6FFECA78	dd 11500FFh, 1030008h, 3010203h, 100h, 7Dh, 0 ;	DATA XREF: sub_6FFE5F80+19o
dword_6FFECA90	dd 12900FFh, 103001Ch, 3030203h, 5010403h, 7030603h, 9000801h
					; DATA XREF: sub_6FFE6420+1Fo
		dd 0B000A00h, 0D000C01h, 101h, 7Dh, 0
dword_6FFECABC	dd 1E01FFFFh, 10000h, 30002h, 50004h, 70006h, 90008h, 0B000Ah
					; DATA XREF: _ZN16DBusMenuExporter15doUpdateActionsEv+25o
		dd 0D000Ch, 0Eh
dword_6FFECAE0	dd 11D00FFh, 1000010h, 3000200h, 5030403h, 7010603h, 100h
					; DATA XREF: sub_6FFE77F0+19o
		dd 7Dh,	0
dword_6FFECB00	dd 13100FFh, 1030024h, 3030203h, 5030403h, 7030603h, 9030801h
					; DATA XREF: sub_6FFE8250+1Fo
		dd 0B030A03h, 0D000C01h, 0F000E00h, 11001001h, 101h, 7Dh
		dd 0
dword_6FFECB34	dd 0E01FFFFh, 10000h, 30002h, 50004h, 6	; DATA XREF: sub_6FFC78B0+22o
dword_6FFECB48	dd 601FFFFh, 10000h	; DATA XREF: sub_6FFC8280+19o
		db 2, 0
word_6FFECB52	dw 0FFFFh		; DATA XREF: .text:6FFC83B9o
		dd 601h, 20001h
dword_6FFECB5C	dd 201FFFFh		; DATA XREF: sub_6FFDFF70+19o
		db 2 dup(0)
word_6FFECB62	dw 0FFFFh		; DATA XREF: sub_6FFE0030+19o
		dd 201h, 201FFFFh, 0
		dd 11100FFh, 1000006h, 1010203h, 7D0000h
		dd offset off_6FFF9AA0
		dd 11100FFh, 1030006h, 1000203h, 7D0000h, 0
dword_6FFECB98	dd 11500FFh, 1030008h, 3010203h, 100h, 7Dh, 0 ;	DATA XREF: sub_6FFE9410+19o
dword_6FFECBB0	dd 401FFFFh, 10000h, 11500FFh, 1030008h, 3010203h, 100h
					; DATA XREF: sub_6FFC84C0+1Fo
		dd 7Dh,	0
		dd 11900FFh, 103000Ch, 3030203h, 5000403h, 101h, 7Dh, 0
dword_6FFECBEC	dd 12900FFh, 103001Ch, 3030203h, 5010403h, 7030603h, 9000801h
					; DATA XREF: sub_6FFE9660+1Fo
		dd 0B000A00h, 0D000C01h, 101h, 7Dh, 0
		dd 11500FFh, 1030008h, 3010203h, 100h, 7Dh, 0
		dd 12900FFh, 103001Ch, 3030203h, 5010403h, 7030603h, 9000801h
		dd 0B000A00h, 0D000C01h, 101h, 7Dh, 0
dword_6FFECC5C	dd 12D00FFh, 1000022h, 3010201h, 5000401h, 7010600h, 9010801h
					; DATA XREF: sub_6FFC88E0+25o
		dd 0B000A00h, 0D000C00h, 0F000E00h, 1001000h, 2	dup(0)
dword_6FFECC8C	dd 801FFFFh, 10000h, 30002h ; DATA XREF: sub_6FFC99B0+1Co
dword_6FFECC98	dd 12100FFh, 1000014h, 3010203h, 5000400h, 7000600h, 9000800h
					; DATA XREF: sub_6FFC9E50+1Fo
		dd 100h, 7Dh
		dd offset off_6FFF9AA0
dword_6FFECCBC	dd 12100FFh, 1000016h, 3010203h, 5000400h, 7000600h, 9000800h
					; DATA XREF: sub_6FFCA610+1Fo
		dd 1000A00h, 7D0000h
		dd offset off_6FFF9AA0
dword_6FFECCE0	dd 11D00FFh, 1000012h, 3010203h, 5000400h, 7000600h, 1000800h
					; DATA XREF: sub_6FFCB050+1Fo
		dd 7D0000h
		dd offset off_6FFF9AA0
dword_6FFECD00	dd 801FFFFh, 10000h, 30002h ; DATA XREF: sub_6FFCB780+1Co
dword_6FFECD0C	dd 201FFFFh, 0		; DATA XREF: sub_6FFCBCE0+16o
dword_6FFECD14	dd 13500FFh, 100002Ah, 3010201h, 5000401h, 7000600h, 9000800h
					; DATA XREF: sub_6FFCBEA0+22o
		dd 0B000A00h, 0D000C00h, 0F000E00h, 11001000h, 13001200h
		dd 1001400h, 2 dup(0)
dword_6FFECD4C	dd 201FFFFh		; DATA XREF: _ZN16DBusMenuImporter10createMenuEP7QWidget+19o
		db 2 dup(0)
word_6FFECD52	dw 0FFFFh		; DATA XREF: sub_6FFDE900+16o
		dd 201h
dword_6FFECD58	dd 401FFFFh, 10000h	; DATA XREF: sub_6FFDE9E0+16o
dword_6FFECD60	dd 201FFFFh		; DATA XREF: sub_6FFDBE80+19o
		db 2 dup(0)
word_6FFECD66	dw 0FFFFh		; DATA XREF: sub_6FFCCC80+1Fo
		dd 201h, 201FFFFh, 0
dword_6FFECD74	dd 11100FFh, 1000006h, 1030203h, 7D0000h, 0 ; DATA XREF: sub_6FFE4490+19o
dword_6FFECD88	dd 801FFFFh, 10000h, 30002h ; DATA XREF: _ZN16DBusMenuImporterD2Ev+19o
dword_6FFECD94	dd 11500FFh, 103000Ah, 3030203h, 1010400h, 7D0000h, 0
					; DATA XREF: sub_6FFE45C0+1Do
dword_6FFECDAC	dd 1E01FFFFh, 10000h, 30002h, 50004h, 70006h, 90008h, 0B000Ah
					; DATA XREF: sub_6FFE33C0+25o
		dd 0D000Ch, 0FFFF000Eh,	201h
dword_6FFECDD4	dd 401FFFFh, 10000h	; DATA XREF: _ZN16DBusMenuImporter19slotMenuAboutToHideEv+1Co
dword_6FFECDDC	dd 201FFFFh		; DATA XREF: sub_6FFDF6D0+19o
		db 2 dup(0)
word_6FFECDE2	dw 0FFFFh		; DATA XREF: _ZN16DBusMenuImporter16sendClickedEventEi+19o
		dd 201h
dword_6FFECDE8	dd 201FFFFh, 0		; DATA XREF: sub_6FFEAAE0+19o
dword_6FFECDF0	dd 10D00FFh, 1010002h, 0 ; DATA	XREF: sub_6FFE5190+1Co
		dd offset off_6FFF9AA0
		dd 11100FFh, 1000006h, 1010203h, 7D0000h
		dd offset off_6FFF9AA0
dword_6FFECE14	dd 2201FFFFh, 10000h, 30002h, 50004h, 70006h, 90008h, 0B000Ah
					; DATA XREF: sub_6FFE2C60+25o
		dd 0D000Ch, 0F000Eh
		db 10h,	0
word_6FFECE3A	dw 0FFFFh		; DATA XREF: _ZN16DBusMenuImporterC1ERK7QStringS2_P7QObject+1Co
		dd 2401h, 20001h, 40003h, 60005h, 80007h, 0A0009h, 0C000Bh
		dd 0E000Dh, 10000Fh
		db 11h,	0
word_6FFECE62	dw 0FFFFh		; DATA XREF: _ZN16DBusMenuImporterC2ERK7QStringS2_P7QObject+1Co
		dd 2401h, 20001h, 40003h, 60005h, 80007h, 0A0009h, 0C000Bh
		dd 0E000Dh, 10000Fh, 11h, 11900FFh, 103000Ch, 3030203h
		dd 5000403h, 101h, 7Dh,	0
		dd 11500FFh, 1030008h, 3010203h, 100h, 7Dh, 0
dword_6FFECEC0	dd 201FFFFh, 0		; DATA XREF: sub_6FFE3EC0+1Co
		dd 11100FFh, 1030006h, 1000203h, 7D0000h, 0
		dd 11500FFh, 1030008h, 3010203h, 100h, 7Dh, 0
dword_6FFECEF4	dd 601FFFFh, 10000h, 2,	12100FFh, 1030016h, 3030203h, 5000403h
					; DATA XREF: _ZN16DBusMenuImporter27processPendingLayoutUpdatesEv+1Do
		dd 7000600h, 9000803h, 1000A01h, 7D0000h, 0
		dd 11500FFh, 1030008h, 3010203h, 100h, 7Dh, 0
dword_6FFECF3C	dd 12900FFh, 103001Ch, 3030203h, 5010403h, 7030603h, 9000801h
					; DATA XREF: sub_6FFE58E0+1Fo
		dd 0B000A00h, 0D000C01h, 101h, 7Dh, 0
dword_6FFECF68	dd 801FFFFh, 10000h, 30002h ; DATA XREF: _ZN16DBusMenuImporterD0Ev+19o
dword_6FFECF74	dd 801FFFFh, 10000h, 30002h ; DATA XREF: _ZN16DBusMenuImporterD1Ev+19o
dword_6FFECF80	dd 401FFFFh, 10000h, 601FFFFh, 10000h, 0FFFF0002h, 201h
					; DATA XREF: _ZN16DBusMenuImporter27slotItemActivationRequestedEij+1Fo
dword_6FFECF98	dd 201FFFFh, 0		; DATA XREF: sub_6FFDDF50+16o
		dd 11D00FFh, 1000010h, 3000200h, 5030403h, 7010603h, 100h
		dd 7Dh,	0
dword_6FFECFC0	dd 201FFFFh		; DATA XREF: sub_6FFDFAB0+16o
		db 2 dup(0)
word_6FFECFC6	dw 0FFFFh		; DATA XREF: sub_6FFDECE0+16o
		dd 401h
		db 1, 0
word_6FFECFCE	dw 0FFFFh		; DATA XREF: _ZN16DBusMenuImporter31slotAboutToShowDBusCallFinishedEP23QDBusPendingCallWatcher+2Eo
		dd 2201h, 20001h, 40003h, 60005h, 80007h, 0A0009h, 0C000Bh
		dd 0E000Dh, 10000Fh
dword_6FFECFF4	dd 2E01FFFFh, 10000h, 30002h, 50004h, 70006h, 90008h, 0B000Ah
					; DATA XREF: _ZN16DBusMenuImporter19slotMenuAboutToShowEv+25o
		dd 0D000Ch, 0F000Eh, 110010h, 130012h, 150014h
		db 16h,	0
word_6FFED026	dw 0FFFFh		; DATA XREF: sub_6FFE24B0+22o
		dd 1801h, 20001h, 40003h, 60005h, 80007h, 0A0009h
		db 0Bh,	0
word_6FFED042	dw 0FFFFh		; DATA XREF: sub_6FFE1870+26o
		dd 2201h, 20001h, 40003h, 60005h, 80007h, 0A0009h, 0C000Bh
		dd 0E000Dh, 10000Fh
dword_6FFED068	dd 801FFFFh, 10000h, 30002h ; DATA XREF: sub_6FFD10F0+25o
dword_6FFED074	dd 3C01FFFFh, 10000h, 30002h, 50004h, 70006h, 90008h, 0B000Ah
					; DATA XREF: sub_6FFE0440+25o
		dd 0D000Ch, 0F000Eh, 110010h, 130012h, 150014h,	170016h
		dd 190018h, 1B001Ah, 1D001Ch
dword_6FFED0B4	dd 2601FFFFh, 10000h, 30002h, 50004h, 70006h, 90008h, 0B000Ah
					; DATA XREF: _ZN16DBusMenuImporter21slotGetLayoutFinishedEP23QDBusPendingCallWatcher+31o
		dd 0D000Ch, 0F000Eh, 110010h, 12h, 401FFFFh, 10000h, 201FFFFh
		db 2 dup(0)
word_6FFED0EE	dw 0FFFFh		; DATA XREF: _ZlsR13QDBusArgumentRK12DBusMenuItem+1Co
		dd 201h, 11900FFh, 103000Ch, 3030203h, 5000403h, 101h
		dd 7Dh,	0
dword_6FFED110	dd 201FFFFh, 0		; DATA XREF: sub_6FFDE7F0+16o
		dd 12900FFh, 103001Ch, 3030203h, 5010403h, 7030603h, 9000801h
		dd 0B000A00h, 0D000C01h, 101h, 7Dh, 0
		dd 11500FFh, 1030008h, 3010203h, 100h, 7Dh, 0
dword_6FFED15C	dd 201FFFFh, 0		; DATA XREF: sub_6FFDEE80+16o
dword_6FFED164	dd 11900FFh, 100000Eh, 3010201h, 5000401h, 1000600h, 2 dup(0)
					; DATA XREF: sub_6FFEAF40+1Fo
dword_6FFED180	dd 401FFFFh, 10000h, 11100FFh, 1030006h, 1000203h, 7D0000h
					; DATA XREF: sub_6FFDC6E0+1Co
		dd 0
dword_6FFED19C	dd 201FFFFh, 0		; DATA XREF: sub_6FFDEAC0+16o
		dd 12900FFh, 103001Ch, 3030203h, 5010403h, 7030603h, 9000801h
		dd 0B000A00h, 0D000C01h, 101h, 7Dh, 0
		dd 11500FFh, 1030008h, 3010203h, 100h, 7Dh, 0
		dd 201FFFFh
		db 2 dup(0)
word_6FFED1EE	dw 0FFFFh		; DATA XREF: sub_6FFDC290+1Co
		dd 401h, 1, 11500FFh, 1030008h,	3010203h, 100h,	7Dh, 0
dword_6FFED210	dd 201FFFFh, 0		; DATA XREF: sub_6FFDEF80+16o
		dd 12900FFh, 103001Ch, 3030203h, 5010403h, 7030603h, 9000801h
		dd 0B000A00h, 0D000C01h, 101h, 7Dh, 0
dword_6FFED244	dd 401FFFFh, 10000h, 601FFFFh, 10000h, 0FFFF0002h, 201h
					; DATA XREF: sub_6FFDCB60+1Co
		dd 201FFFFh, 0FFFF0000h, 201h
dword_6FFED268	dd 201FFFFh, 0		; DATA XREF: sub_6FFE8A10+19o
		dd 11900FFh, 100000Ch, 3030203h, 5010403h, 100h, 7Dh, 0
dword_6FFED28C	dd 201FFFFh, 0FFFF0000h, 401h, 1, 13100FFh, 1030024h, 3030203h
					; DATA XREF: sub_6FFDF080+16o
		dd 5030403h, 7030603h, 9030801h, 0B030A03h, 0D000C01h
		dd 0F000E00h, 11001001h, 101h, 7Dh, 0
dword_6FFED2D0	dd 0C01FFFFh, 10000h, 30002h, 50004h
					; DATA XREF: _ZrsRK13QDBusArgumentR18DBusMenuLayoutItem+1Co
dword_6FFED2E0	dd 1201FFFFh, 10000h, 30002h, 50004h, 70006h ; DATA XREF: sub_6FFDCF90+1Co
		db 8, 0
word_6FFED2F6	dw 0FFFFh		; DATA XREF: _ZlsR13QDBusArgumentRK18DBusMenuLayoutItem+1Co
		dd 0E01h, 20001h, 40003h, 60005h
dword_6FFED308	dd 601FFFFh, 10000h, 2	; DATA XREF: sub_6FFDE310+19o
dword_6FFED314	dd 401FFFFh, 10000h, 11100FFh, 1030006h, 1000203h, 7D0000h
					; DATA XREF: sub_6FFD4290+25o
		dd 0
		dd 11500FFh, 1030008h, 3010203h, 100h, 7Dh, 0
		dd 12100FFh, 1030016h, 3030203h, 5000403h, 7000600h, 9000803h
		dd 1000A01h, 7D0000h, 0
dword_6FFED36C	dd 0E01FFFFh, 10000h, 30002h, 50004h, 6, 12900FFh, 103001Ch
					; DATA XREF: _ZNK16DBusMenuShortcut13toKeySequenceEv+1Co
		dd 3030203h, 5010403h, 7030603h, 9000801h, 0B000A00h, 0D000C01h
		dd 101h, 7Dh, 0
dword_6FFED3AC	dd 1001FFFFh, 10000h, 30002h, 50004h, 70006h
					; DATA XREF: _ZN16DBusMenuShortcut15fromKeySequenceERK12QKeySequence+1Fo
dword_6FFED3C0	dd 201FFFFh, 0		; DATA XREF: sub_6FFD52A0+1Co
dword_6FFED3C8	dd 201FFFFh		; DATA XREF: sub_6FFD5820+19o
		db 2 dup(0)
word_6FFED3CE	dw 0FFFFh		; DATA XREF: .text:6FFD58E9o
		dd 201h
dword_6FFED3D4	dd 201FFFFh		; DATA XREF: sub_6FFD5C00+19o
		db 2 dup(0)
word_6FFED3DA	dw 0FFFFh		; DATA XREF: sub_6FFD5D50+19o
		dd 401h, 1, 11100FFh, 1030006h,	1000203h, 7D0000h, 0
		dd 11500FFh, 1030008h, 3010203h, 100h, 7Dh, 0
		dd 11900FFh, 103000Ch, 3030203h, 5000403h, 101h, 7Dh, 0
		dd 11500FFh, 1030008h, 3010203h, 100h, 7Dh, 0
dword_6FFED444	dd 801FFFFh, 10000h, 30002h ; DATA XREF: sub_6FFD5FC0+1Co
dword_6FFED450	dd 201FFFFh, 0		; DATA XREF: sub_6FFD64B0+16o
dword_6FFED458	dd 10D00FFh, 1000004h, 101h, 0 ; DATA XREF: sub_6FFEBA60+1Co
dword_6FFED468	dd 10D00FFh, 1000004h, 101h, 0 ; DATA XREF: sub_6FFEC1F0+19o
dword_6FFED478	dd 10900FFh, 7F010002h,	2 dup(0) ; DATA	XREF: sub_6FFEB920+1Bo
dword_6FFED488	dd 10D00FFh, 7F010002h,	0 ; DATA XREF: sub_6FFEAE70+19o
		dd offset off_6FFF9AA0
		dd 1
dword_6FFED49C	dd 10D00FFh, 1000004h, 101h, 0 ; DATA XREF: sub_6FFDF790+16o
dword_6FFED4AC	dd 10900FFh, 7F010002h,	2 dup(0) ; DATA	XREF: sub_6FFEC050+16o
dword_6FFED4BC	dd 10900FFh, 7F010002h,	2 dup(0) ; DATA	XREF: sub_6FFEBF70+16o
dword_6FFED4CC	dd 10900FFh, 7F010002h,	2 dup(0) ; DATA	XREF: sub_6FFEA170+19o
dword_6FFED4DC	dd 10900FFh, 1010004h, 7F01h, 0	; DATA XREF: sub_6FFEBBF0+A6o
dword_6FFED4EC	dd 10900FFh, 1010004h, 7F01h, 0	; DATA XREF: sub_6FFEBBF0+216o
dword_6FFED4FC	dd 10D00FFh, 1010006h, 7F010203h, 7D0000h, 0 ; DATA XREF: sub_6FFEB6C0+1Ao
dword_6FFED510	dd 10D00FFh, 1010006h, 7F010203h, 7D0000h, 0 ; DATA XREF: .text:6FFEB51Ao
dword_6FFED524	dd 11500FFh, 1000004h, 2000103h, 7Dh ; DATA XREF: sub_6FFEA2D0+16o
		dd offset off_6FFF9AAC
		align 100h
		dd 280h	dup(?)
_text		ends

; Section 2. (virtual address 0002E000)
; Virtual size			: 00004AD0 (  19152.)
; Section size in file		: 00004C00 (  19456.)
; Offset to raw	data for section: 0002CA00
; Flags	C0600040: Data Readable	Writable
; Alignment	: 32 bytes
; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read/Write
; Segment alignment '32byte' can not be represented in assembly
_data		segment	para public 'DATA' use32
		assume cs:_data
		;org 6FFEE000h
dword_6FFEE000	dd 0			; DATA XREF: .text:6FFC14B5w
					; sub_6FFC1530:loc_6FFC1550o ...
		dd offset aDbusmenu	; "DBusMenu"
		dd offset dword_6FFF31E0
		dd offset dword_6FFF31A8
; Exported entry   5. _ZN16DBusMenuExporter16staticMetaObjectE
		public _ZN16DBusMenuExporter16staticMetaObjectE
_ZN16DBusMenuExporter16staticMetaObjectE dd 0 ;	DATA XREF: .text:6FFC1A15w
					; _ZNK16DBusMenuExporter10metaObjectEv:loc_6FFC1AB0o ...
		dd offset aDbusmenuexport ; "DBusMenuExporter"
		dd offset dword_6FFF3B00
		dd offset _ZN16DBusMenuExporter25staticMetaObjectExtraDataE
dword_6FFEE020	dd 0			; DATA XREF: sub_6FFC8060+5w
					; sub_6FFC8070+2Fo ...
		dd offset aDbusmenuexpo_0 ; "DBusMenuExporterDBus"
		dd offset dword_6FFF4140
		dd offset dword_6FFF3D50
; Exported entry  24. _ZN16DBusMenuImporter16staticMetaObjectE
		public _ZN16DBusMenuImporter16staticMetaObjectE
_ZN16DBusMenuImporter16staticMetaObjectE dd 0 ;	DATA XREF: sub_6FFCCA40+5w
					; _ZN16DBusMenuImporter25actionActivationRequestedEP7QAction+27o ...
		dd offset aDbusmenuimport ; "DBusMenuImporter"
		dd offset dword_6FFF52E0
		dd offset _ZN16DBusMenuImporter25staticMetaObjectExtraDataE
dword_6FFEE040	dd 0			; DATA XREF: sub_6FFD55E0+5w
					; sub_6FFD55F0+2Fo ...
		dd offset aDbusmenuadapto ; "DbusmenuAdaptor"
		dd offset dword_6FFF82E0
		dd offset dword_6FFF56D4
dword_6FFEE050	dd 0FFFFFFFFh		; DATA XREF: sub_6FFC1260+1Bw
					; sub_6FFC1260+61w
		dd 0FFFFFFFFh
off_6FFEE058	dd offset dword_6FFEC82C ; DATA	XREF: sub_6FFDAE80+3r
					; sub_6FFDAE80+12r ...
dword_6FFEE05C	dd 2			; DATA XREF: TlsCallback_0+4r
					; TlsCallback_0+11w ...
dword_6FFEE060	dd 2 dup(0)		; DATA XREF: sub_6FFEBF70+36o
					; sub_6FFEC050+36o
dword_6FFEE068	dd 0			; DATA XREF: sub_6FFEB6C0:loc_6FFEB79Br
					; sub_6FFEB6C0+12Cw ...
dword_6FFEE06C	dd 0			; DATA XREF: .text:loc_6FFEB59Cr
					; .text:6FFEB5C9w ...
		align 20h
dword_6FFEE080	dd 1000h dup(0)		; DATA XREF: sub_6FFEB6C0+124o
					; sub_6FFEBBF0+22Fo ...
dword_6FFF2080	dd 280h	dup(0)		; DATA XREF: .text:6FFEB5D4o
					; sub_6FFEBBF0+BFo ...
; DWORD	dword_6FFF2A80
dword_6FFF2A80	dd 0			; DATA XREF: sub_6FFDBE40+1Bo
					; sub_6FFEBBF0+C8o ...
byte_6FFF2A84	db 0			; DATA XREF: sub_6FFDBE40+8w
					; sub_6FFDBE40+29w ...
		align 4
off_6FFF2A88	dd offset sub_6FFEA2D0	; DATA XREF: .text:6FFEADF4r
					; .text:6FFEADF9w ...
off_6FFF2A8C	dd offset sub_6FFEAE40	; DATA XREF: sub_6FFEADE0+3r
					; .text:6FFEAE04r ...
dword_6FFF2A90	dd 2 dup(0)		; DATA XREF: sub_6FFDBE20+Co
					; .text:6FFEB576o ...
dword_6FFF2A98	dd 0			; DATA XREF: sub_6FFD2F30+11r
					; sub_6FFD2F30:loc_6FFD2F4Er ...
dword_6FFF2A9C	dd 0			; DATA XREF: _ZlsR13QDBusArgumentRK12DBusMenuItem+5Dr
					; _ZlsR13QDBusArgumentRK12DBusMenuItem:loc_6FFD329Ar ...
dword_6FFF2AA0	dd 0			; DATA XREF: _ZN16DBusMenuImporter31slotAboutToShowDBusCallFinishedEP23QDBusPendingCallWatcher+48Cr
					; _ZN16DBusMenuImporter31slotAboutToShowDBusCallFinishedEP23QDBusPendingCallWatcher+499r ...
dword_6FFF2AA4	dd 0			; DATA XREF: sub_6FFD2F30+65r
					; sub_6FFD2F30:loc_6FFD2FA2r ...
dword_6FFF2AA8	dd 0			; DATA XREF: sub_6FFC2AE0+505r
					; sub_6FFC2AE0:loc_6FFC2FF5r ...
dword_6FFF2AAC	dd 0			; DATA XREF: _ZN16DBusMenuImporter21slotGetLayoutFinishedEP23QDBusPendingCallWatcher+D7r
					; _ZN16DBusMenuImporter21slotGetLayoutFinishedEP23QDBusPendingCallWatcher:loc_6FFD1A2Br ...
dword_6FFF2AB0	dd 0			; DATA XREF: sub_6FFD2F30+3Er
					; sub_6FFD2F30:loc_6FFD2F7Br ...
dword_6FFF2AB4	dd 0			; DATA XREF: sub_6FFD2F30+8Cr
					; sub_6FFD2F30:loc_6FFD2FC9r ...
dword_6FFF2AB8	dd 0			; DATA XREF: sub_6FFD2F30+DAr
					; sub_6FFD2F30:loc_6FFD3017r ...
byte_6FFF2ABC	db 0			; DATA XREF: sub_6FFEA2D0+2Fr
					; sub_6FFEA2D0:loc_6FFEA340w
		align 10h
dword_6FFF2AC0	dd 0			; DATA XREF: .text:6FFEAE14r
					; .text:6FFEAE19w ...
dword_6FFF2AC4	dd 0BB40E64Eh		; DATA XREF: .text:6FFDAF8Fr
					; sub_6FFDAFE0+3r ...
dword_6FFF2AC8	dd 44BF19B1h		; DATA XREF: .text:6FFDAF97r
					; sub_6FFDAFE0+21w ...
dword_6FFF2ACC	dd 0			; DATA XREF: sub_6FFC1430+6r
					; sub_6FFC1430+42o
		align 800h
_data		ends

; Section 3. (virtual address 00033000)
; Virtual size			: 00007000 (  28672.)
; Section size in file		: 00007000 (  28672.)
; Offset to raw	data for section: 00031600
; Flags	40600040: Data Readable
; Alignment	: 32 bytes
; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
; Segment alignment '32byte' can not be represented in assembly
_rdata		segment	para public 'DATA' use32
		assume cs:_rdata
		;org 6FFF3000h
; CHAR ModuleName[]
ModuleName	db 'libgcj_s.dll',0     ; DATA XREF: sub_6FFC1430+Fo
; CHAR ProcName[]
ProcName	db '_Jv_RegisterClasses',0 ; DATA XREF: sub_6FFC1430+2Ao
		align 20h
aRIncludeQtc_12	db 'R:/include/QtCore/qscopedpointer.h',0 ; DATA XREF: sub_6FFC1530+38o
aD_3		db 'd',0                ; DATA XREF: sub_6FFC1530+40o
		align 4
a1deleteme	db '1deleteMe()',0      ; DATA XREF: sub_6FFC1680+75o
					; .text:6FFC17F5o
aRBuildKdesup_5	db 'r:\build\kdesupport\dbusmenu-qt-0.9.2\work\libdbusmenu-qt-0.9.2\s'
		db 'rc\dbusmenu_p.cpp:39',0
		align 4
a2destroyedQobj	db '2destroyed(QObject*)',0 ; DATA XREF: sub_6FFC1680+85o
					; .text:6FFC1805o
aRBuildKdesup_6	db 'r:\build\kdesupport\dbusmenu-qt-0.9.2\work\libdbusmenu-qt-0.9.2\s'
		db 'rc\dbusmenu_p.cpp:39',0
		align 4
aRBuildKdesup_4	db 'R:/build/kdesupport/dbusmenu-qt-0.9.2/work/mingw4-Release-0.9.2/s'
					; DATA XREF: sub_6FFC1910+68o
		db 'rc/dbusmenu_p.moc',0
aStaticmetaob_3	db 'staticMetaObject.cast(_o)',0 ; DATA XREF: sub_6FFC1910+70o
		align 4
dword_6FFF31A8	dd 0			; DATA XREF: .data:6FFEE00Co
		dd offset sub_6FFC1910
aDbusmenu	db 'DBusMenu',0         ; DATA XREF: sub_6FFC14C0+28o
					; .data:6FFEE004o
		align 2
aDeleteme	db 'deleteMe()',0
		align 20h
dword_6FFF31E0	dd 6, 3	dup(0)		; DATA XREF: .data:6FFEE008o
		dd 1, 0Eh, 8 dup(0)
		dd 0Ah,	3 dup(9), 8, 5 dup(0)
aRIncludeQtcore	db 'R:/include/QtCore/qscopedpointer.h',0
					; DATA XREF: _ZNK16DBusMenuExporter10metaObjectEv+38o
aD		db 'd',0                ; DATA XREF: _ZNK16DBusMenuExporter10metaObjectEv+40o
aRIncludeQtco_0	db 'R:/include/QtCore/qhash.h',0 ; DATA XREF: .text:6FFC1C6Do
					; sub_6FFC2030+BEo ...
aNodeENodeNext	db '*node == e || (*node)->next',0 ; DATA XREF: .text:6FFC1C75o
					; sub_6FFC2030+C6o ...
aRIncludeQtco_1	db 'R:/include/QtCore/qstring.h',0
					; DATA XREF: _ZN16DBusMenuExporter15doUpdateActionsEv+74Bo
					; _ZN16DBusMenuExporter15doUpdateActionsEv+77Ao ...
aOtherThis	db '&other != this',0   ; DATA XREF: _ZN16DBusMenuExporter15doUpdateActionsEv+753o
					; _ZN16DBusMenuExporter15doUpdateActionsEv+782o ...
a31m		db 1Bh,'[31m',0         ; DATA XREF: sub_6FFC1EB0+CAo
					; _ZN16DBusMenuExporter14activateActionEP7QAction+D8o ...
a0m		db 1Bh,'[0m:',0         ; DATA XREF: sub_6FFC1EB0+EAo
					; _ZN16DBusMenuExporter14activateActionEP7QAction+FFo ...
aConditionFaile	db 'Condition failed: action',0 ; DATA XREF: sub_6FFC1EB0+118o
					; _ZN16DBusMenuExporter17iconNameForActionEP7QAction+147o ...
aConditionFai_0	db 'Condition failed: id >= 0',0
					; DATA XREF: _ZN16DBusMenuExporter14activateActionEP7QAction+12Do
aIconName	db 'icon-name',0        ; DATA XREF: sub_6FFC24B0+92o
aPng		db 'PNG',0              ; DATA XREF: sub_6FFC24B0+1D9o
aIconData	db 'icon-data',0        ; DATA XREF: sub_6FFC24B0+22Eo
aSeparator	db 'separator',0        ; DATA XREF: sub_6FFC28C0+46o
aType		db 'type',0             ; DATA XREF: sub_6FFC28C0+66o
aVisible	db 'visible',0          ; DATA XREF: sub_6FFC28C0+111o
					; sub_6FFC2AE0+227o ...
aLabel		db 'label',0            ; DATA XREF: sub_6FFC2AE0+C9o
					; sub_6FFC3520+23Do
aEnabled	db 'enabled',0          ; DATA XREF: sub_6FFC2AE0+189o
					; sub_6FFC3520+7Bo
aSubmenu	db 'submenu',0          ; DATA XREF: sub_6FFC2AE0+2ACo
aChildrenDispla	db 'children-display',0 ; DATA XREF: sub_6FFC2AE0+2C5o
aRadio		db 'radio',0            ; DATA XREF: sub_6FFC2AE0:loc_6FFC31E0o
aToggleType	db 'toggle-type',0      ; DATA XREF: sub_6FFC2AE0+39Eo
aToggleState	db 'toggle-state',0     ; DATA XREF: sub_6FFC2AE0+432o
aDbusmenushortc	db 'DBusMenuShortcut',0 ; DATA XREF: sub_6FFC2AE0+604o
aShortcut	db 'shortcut',0         ; DATA XREF: sub_6FFC2AE0+54Eo
aCheckmark	db 'checkmark',0        ; DATA XREF: sub_6FFC2AE0:loc_6FFC2E54o
aXKdeTitle	db 'x-kde-title',0      ; DATA XREF: sub_6FFC3520+FBo
		align 4
aConditionFai_1	db 'Condition failed: widgetAction',0 ; DATA XREF: sub_6FFC3520+4C9o
aConditionFai_2	db 'Condition failed: button',0 ; DATA XREF: sub_6FFC3520+56Co
a1slotactiond_0	db '1slotActionDestroyed(QObject*)',0 ; DATA XREF: sub_6FFC4220+29o
aRBuildKdesup_7	db 'r:\build\kdesupport\dbusmenu-qt-0.9.2\work\libdbusmenu-qt-0.9.2\s'
		db 'rc\dbusmenuexporter.cpp:220',0
a2destroyedQo_1	db '2destroyed(QObject*)',0 ; DATA XREF: sub_6FFC4220+34o
aRBuildKdesup_8	db 'r:\build\kdesupport\dbusmenu-qt-0.9.2\work\libdbusmenu-qt-0.9.2\s'
		db 'rc\dbusmenuexporter.cpp:220',0
aAlreadyTrackin	db 'Already tracking action',0 ; DATA XREF: sub_6FFC4C20+327o
aUnderId	db 'under id',0         ; DATA XREF: sub_6FFC4C20+392o
		align 4
a1slotactiondes	db '1slotActionDestroyed(QObject*)',0 ; DATA XREF: sub_6FFC4C20+F1o
aRBuildKdesup_9	db 'r:\build\kdesupport\dbusmenu-qt-0.9.2\work\libdbusmenu-qt-0.9.2\s'
		db 'rc\dbusmenuexporter.cpp:193',0
a2destroyedQo_0	db '2destroyed(QObject*)',0 ; DATA XREF: sub_6FFC4C20+110o
aRBuildKdesu_10	db 'r:\build\kdesupport\dbusmenu-qt-0.9.2\work\libdbusmenu-qt-0.9.2\s'
		db 'rc\dbusmenuexporter.cpp:193',0
		align 4
a1doupdateactio	db '1doUpdateActions()',0
					; DATA XREF: _ZN16DBusMenuExporterC1ERK7QStringP5QMenuRK15QDBusConnection+1E0o
					; _ZN16DBusMenuExporterC2ERK7QStringP5QMenuRK15QDBusConnection+1E0o
aRBuildKdesu_11	db 'r:\build\kdesupport\dbusmenu-qt-0.9.2\work\libdbusmenu-qt-0.9.2\s'
		db 'rc\dbusmenuexporter.cpp:346',0
a2timeout	db '2timeout()',0       ; DATA XREF: _ZN16DBusMenuExporterC1ERK7QStringP5QMenuRK15QDBusConnection+1F0o
					; _ZN16DBusMenuExporterC2ERK7QStringP5QMenuRK15QDBusConnection+1F0o
aRBuildKdesu_12	db 'r:\build\kdesupport\dbusmenu-qt-0.9.2\work\libdbusmenu-qt-0.9.2\s'
		db 'rc\dbusmenuexporter.cpp:346',0
a1doemitlayoutu	db '1doEmitLayoutUpdated()',0
					; DATA XREF: _ZN16DBusMenuExporterC1ERK7QStringP5QMenuRK15QDBusConnection+24Do
					; _ZN16DBusMenuExporterC2ERK7QStringP5QMenuRK15QDBusConnection+24Do
aRBuildKdesu_13	db 'r:\build\kdesupport\dbusmenu-qt-0.9.2\work\libdbusmenu-qt-0.9.2\s'
		db 'rc\dbusmenuexporter.cpp:350',0
a2timeout_0	db '2timeout()',0       ; DATA XREF: _ZN16DBusMenuExporterC1ERK7QStringP5QMenuRK15QDBusConnection+25Do
					; _ZN16DBusMenuExporterC2ERK7QStringP5QMenuRK15QDBusConnection+25Do
aRBuildKdesu_14	db 'r:\build\kdesupport\dbusmenu-qt-0.9.2\work\libdbusmenu-qt-0.9.2\s'
		db 'rc\dbusmenuexporter.cpp:350',0
aRBuildKdesuppo	db 'R:/build/kdesupport/dbusmenu-qt-0.9.2/work/mingw4-Release-0.9.2/s'
					; DATA XREF: _ZN16DBusMenuExporter18qt_static_metacallEP7QObjectN11QMetaObject4CallEiPPv+B8o
		db 'rc/dbusmenuexporter.moc',0
aStaticmetaobje	db 'staticMetaObject.cast(_o)',0
					; DATA XREF: _ZN16DBusMenuExporter18qt_static_metacallEP7QObjectN11QMetaObject4CallEiPPv+C0o
aNoIdForAction	db 'No id for action',0 ; DATA XREF: sub_6FFC78B0+2B7o
; Exported entry  10. _ZN16DBusMenuExporter25staticMetaObjectExtraDataE
		public _ZN16DBusMenuExporter25staticMetaObjectExtraDataE
_ZN16DBusMenuExporter25staticMetaObjectExtraDataE dd 0 ; DATA XREF: .data:6FFEE01Co
		dd offset _ZN16DBusMenuExporter18qt_static_metacallEP7QObjectN11QMetaObject4CallEiPPv
		align 20h
aDbusmenuexport	db 'DBusMenuExporter',0 ; DATA XREF: _ZN16DBusMenuExporter11qt_metacastEPKc+28o
					; .data:6FFEE014o
		align 2
aDoupdateacti_0	db 'doUpdateActions()',0
aDoemitlayoutup	db 'doEmitLayoutUpdated()',0
aSlotactiondest	db 'slotActionDestroyed(QObject*)',0
		align 10h
aVoidDbusmenuex	db 'void DBusMenuExporter::activateAction(QAction*)',0
					; DATA XREF: _ZN16DBusMenuExporter14activateActionEP7QAction+EFo
		align 20h
aVirtualQstring	db 'virtual QString DBusMenuExporter::iconNameForAction(QAction*)',0
					; DATA XREF: _ZN16DBusMenuExporter17iconNameForActionEP7QAction+106o
		align 10h
aVoidDbusmenu_0	db 'void DBusMenuExporterPrivate::addAction(QAction*, int)',0
					; DATA XREF: sub_6FFC4C20+2D6o
		align 10h
aVoidDbusmenu_1	db 'void DBusMenuExporterPrivate::fillLayoutItem(DBusMenuLayoutItem*,'
					; DATA XREF: sub_6FFC78B0+269o
		db ' QMenu*, int, int, const QStringList&)',0
		align 20h
aQvariantmapDbu	db 'QVariantMap DBusMenuExporterPrivate::propertiesForKMenuTitleActio'
					; DATA XREF: sub_6FFC3520+482o
					; sub_6FFC3520+525o ...
		db 'n(QAction*) const',0
aKmenu_title	db 'kmenu_title',0      ; DATA XREF: .rdata:off_6FFF3A40o
		align 10h
off_6FFF3A40	dd offset aKmenu_title	; DATA XREF: sub_6FFC3D40+66r
					; sub_6FFC3D40:loc_6FFC3F80r
					; "kmenu_title"
		align 20h
aQvariantmapD_0	db 'QVariantMap DBusMenuExporterPrivate::propertiesForAction(QAction*'
					; DATA XREF: sub_6FFC3D40+1C6o
		db ') const',0
		align 20h
aIntDbusmenuexp	db 'int DBusMenuExporterPrivate::idForAction(QAction*) const',0
					; DATA XREF: sub_6FFC1EB0+DAo
		align 10h
dword_6FFF3B00	dd 6, 3	dup(0)		; DATA XREF: .data:6FFEE018o
		dd 3, 0Eh, 8 dup(0)
		dd 12h,	3 dup(11h), 8, 24h, 3 dup(11h),	8, 3Ah,	3 dup(11h)
		dd 8, 3	dup(0)
aRIncludeQtc_11	db 'R:/include/QtCore/qscopedpointer.h',0 ; DATA XREF: sub_6FFC81D0+38o
aD_2		db 'd',0                ; DATA XREF: sub_6FFC81D0+40o
aRIncludeQtco_2	db 'R:/include/QtCore/qstring.h',0 ; DATA XREF: sub_6FFC8230+2Fo
					; sub_6FFC88E0+CF3o ...
aOtherThis_0	db '&other != this',0   ; DATA XREF: sub_6FFC8230+37o
					; sub_6FFC88E0+CFBo ...
aNormal		db 'normal',0           ; DATA XREF: sub_6FFC8280+60o
					; .text:6FFC8400o
aClicked	db 'clicked',0          ; DATA XREF: sub_6FFC84C0+4Fo
					; sub_6FFC84C0+39Do
aTrigger	db 'trigger',0          ; DATA XREF: sub_6FFC84C0+34Ao
aHovered	db 'hovered',0          ; DATA XREF: sub_6FFC84C0+F1o
					; sub_6FFC84C0+371o
aAbouttoshow	db 'aboutToShow',0      ; DATA XREF: sub_6FFC84C0+22Fo
					; sub_6FFC9E50+15Ao
aSubmenu_0	db 'submenu',0          ; DATA XREF: sub_6FFC88E0+64o
aChildrenDisp_0	db 'children-display',0 ; DATA XREF: sub_6FFC88E0+87o
a31m_0		db 1Bh,'[31m',0         ; DATA XREF: sub_6FFC88E0+1D5o
					; sub_6FFC9E50+231o ...
a0m_0		db 1Bh,'[0m:',0         ; DATA XREF: sub_6FFC88E0+209o
					; sub_6FFC9E50+2EDo ...
aConditionFai_3	db 'Condition failed: action',0 ; DATA XREF: sub_6FFC88E0+240o
					; sub_6FFCA610+213o
aRIncludeQtco_3	db 'R:/include/QtCore/qhash.h',0 ; DATA XREF: sub_6FFC88E0+DA2o
					; sub_6FFCA610+76Do
aNodeENodeNex_0	db '*node == e || (*node)->next',0 ; DATA XREF: sub_6FFC88E0+DAAo
					; sub_6FFCA610+775o
aConditionFai_4	db 'Condition failed: menu',0 ; DATA XREF: sub_6FFC9E50+367o
					; sub_6FFCB050+338o
aDoupdateaction	db 'doUpdateActions',0  ; DATA XREF: sub_6FFCB050+11Do
		align 4
aRBuildKdesup_0	db 'R:/build/kdesupport/dbusmenu-qt-0.9.2/work/mingw4-Release-0.9.2/s'
					; DATA XREF: sub_6FFCB780+33Co
		db 'rc/dbusmenuexporterdbus_p.moc',0
aStaticmetaob_0	db 'staticMetaObject.cast(_o)',0 ; DATA XREF: sub_6FFCB780+344o
		align 4
off_6FFF3D14	dd offset loc_6FFCB9D0	; DATA XREF: sub_6FFCB780+72r
		dd offset loc_6FFCB9A0	; jump table for switch	statement
		dd offset loc_6FFCB971
		dd offset loc_6FFCB937
		dd offset loc_6FFCB8D0
		dd offset loc_6FFCB882
		dd offset loc_6FFCB800
		dd offset loc_6FFCBA82
aStatus		db 'Status',0           ; DATA XREF: sub_6FFCBEA0+CAo
aPropertieschan	db 'PropertiesChanged',0 ; DATA XREF: sub_6FFCBEA0+301o
		align 10h
dword_6FFF3D50	dd 0			; DATA XREF: .data:6FFEE02Co
		dd offset sub_6FFCB780
		align 10h
aDbusmenuexpo_0	db 'DBusMenuExporterDBus',0 ; DATA XREF: sub_6FFC8160+28o
					; .data:6FFEE024o
aCom_canonica_1	db 'com.canonical.dbusmenu',0
aDBusInterface	db 'D-Bus Interface',0
		db    0
		db ',',0
aItemspropert_0	db 'ItemsPropertiesUpdated(DBusMenuItemList,DBusMenuItemKeysList)',0
aRevisionParent	db 'revision,parentId',0
aLayoutupdatedU	db 'LayoutUpdated(uint,int)',0
aIdTimestamp	db 'id,timeStamp',0
aItemactivati_0	db 'ItemActivationRequested(int,uint)',0
aQ_noreply	db 'Q_NOREPLY',0
aIdEventidDataT	db 'id,eventId,data,timestamp',0
aEventIntQstrin	db 'Event(int,QString,QDBusVariant,uint)',0
aQdbusvariant_1	db 'QDBusVariant',0
aIdProperty	db 'id,property',0
aGetpropertyInt	db 'GetProperty(int,QString)',0
aUint		db 'uint',0
aParentidRecurs	db 'parentId,recursionDepth,propertyNames,item',0
aGetlayoutIntIn	db 'GetLayout(int,int,QStringList,DBusMenuLayoutItem&)',0
aDbusmenuitem_1	db 'DBusMenuItemList',0
aIdsPropertynam	db 'ids,propertyNames',0
aGetgroupproper	db 'GetGroupProperties(QList<int>,QStringList)',0
aBool		db 'bool',0
aId		db 'id',0
aAbouttoshowInt	db 'AboutToShow(int)',0
aVersion_0	db 'Version',0
aQstring	db 'QString',0
aStatus_1	db 'Status',0
		align 4
aOrg_freedeskto	db 'org.freedesktop.DBus.Properties',0 ; DATA XREF: .rdata:off_6FFF3FB4o
off_6FFF3FB4	dd offset aOrg_freedeskto ; DATA XREF: sub_6FFCBEA0+311r
					; "org.freedesktop.DBus.Properties"
aCom_canonical_	db 'com.canonical.dbusmenu',0 ; DATA XREF: .rdata:off_6FFF3FD0o
		align 10h
off_6FFF3FD0	dd offset aCom_canonical_ ; DATA XREF: sub_6FFCBEA0+3DBr
					; "com.canonical.dbusmenu"
		align 10h
aBoolDbusmenuex	db 'bool DBusMenuExporterDBus::AboutToShow(int)',0
					; DATA XREF: sub_6FFC9E50+28Fo
		align 20h
aQvariantmapD_1	db 'QVariantMap DBusMenuExporterDBus::getProperties(int, const QStrin'
					; DATA XREF: sub_6FFC88E0+1EFo
		db 'gList&) const',0
		align 20h
aQdbusvariantDb	db 'QDBusVariant DBusMenuExporterDBus::GetProperty(int, const QString'
					; DATA XREF: sub_6FFCA610+138o
		db '&)',0
		align 20h
aUintDbusmenuex	db 'uint DBusMenuExporterDBus::GetLayout(int, int, const QStringList&'
					; DATA XREF: sub_6FFCB050+260o
		db ', DBusMenuLayoutItem&)',0
		align 10h
dword_6FFF4140	dd 6, 0			; DATA XREF: .data:6FFEE028o
		dd 1, 0Eh, 8, 10h, 2, 38h, 5 dup(0)
		dd 3, 2Ch, 15h,	3Fh, 3Dh, 2 dup(3Ch), 5, 8Fh, 7Dh, 2 dup(3Ch)
		dd 5, 0B4h, 0A7h, 2 dup(3Ch), 5, 0FAh, 0E0h, 3Ch, 0D6h
		dd 0Ah,	138h, 12Ch, 11Fh, 3Ch, 0Ah, 181h, 156h,	151h, 3Ch
		dd 0Ah,	1D7h, 1C5h, 1B4h, 3Ch, 0Ah, 20Ah, 207h,	202h, 3Ch
		dd 0Ah,	21Bh, 151h, 3095001h, 22Bh, 223h, 0A095001h, 2 dup(0)
aRIncludeQtco_4	db 'R:/include/QtCore/qscopedpointer.h',0
					; DATA XREF: _ZNK16DBusMenuImporter10metaObjectEv+38o
aD_0		db 'd',0                ; DATA XREF: _ZNK16DBusMenuImporter10metaObjectEv+40o
aRIncludeQtco_5	db 'R:/include/QtCore/qhash.h',0
					; DATA XREF: _ZN16DBusMenuImporter17slotLayoutUpdatedEji+199o
					; _ZN16DBusMenuImporter31slotAboutToShowDBusCallFinishedEP23QDBusPendingCallWatcher+CA3o ...
aNodeENodeNex_1	db '*node == e || (*node)->next',0
					; DATA XREF: _ZN16DBusMenuImporter17slotLayoutUpdatedEji+1A1o
					; _ZN16DBusMenuImporter31slotAboutToShowDBusCallFinishedEP23QDBusPendingCallWatcher+CABo ...
aQdbusargument	db 'QDBusArgument',0    ; DATA XREF: _ZN16DBusMenuImporter31slotAboutToShowDBusCallFinishedEP23QDBusPendingCallWatcher+8F0o
					; _ZN16DBusMenuImporter21slotGetLayoutFinishedEP23QDBusPendingCallWatcher+BFFo	...
		align 4
a1slotmenuabout	db '1slotMenuAboutToShow()',0 ; DATA XREF: _ZNK16DBusMenuImporter4menuEv+4Do
					; _ZN16DBusMenuImporter10updateMenuEv+13Fo ...
aRBuildKdesu_15	db 'r:\build\kdesupport\dbusmenu-qt-0.9.2\work\libdbusmenu-qt-0.9.2\s'
		db 'rc\dbusmenuimporter.cpp:111',0
a2abouttoshow	db '2aboutToShow()',0   ; DATA XREF: _ZNK16DBusMenuImporter4menuEv+5Ao
					; _ZN16DBusMenuImporter10updateMenuEv+14Co ...
aRBuildKdesu_16	db 'r:\build\kdesupport\dbusmenu-qt-0.9.2\work\libdbusmenu-qt-0.9.2\s'
		db 'rc\dbusmenuimporter.cpp:110',0
a1slotmenuabo_0	db '1slotMenuAboutToHide()',0 ; DATA XREF: _ZNK16DBusMenuImporter4menuEv+96o
					; _ZN16DBusMenuImporter10updateMenuEv+188o ...
aRBuildKdesu_17	db 'r:\build\kdesupport\dbusmenu-qt-0.9.2\work\libdbusmenu-qt-0.9.2\s'
		db 'rc\dbusmenuimporter.cpp:113',0
a2abouttohide	db '2aboutToHide()',0   ; DATA XREF: _ZNK16DBusMenuImporter4menuEv+A7o
					; _ZN16DBusMenuImporter10updateMenuEv+199o ...
aRBuildKdesu_18	db 'r:\build\kdesupport\dbusmenu-qt-0.9.2\work\libdbusmenu-qt-0.9.2\s'
		db 'rc\dbusmenuimporter.cpp:112',0
aQdbusvariant_0	db 'QDBusVariant',0     ; DATA XREF: sub_6FFE33C0+A5o
aEvent		db 'Event',0            ; DATA XREF: sub_6FFE33C0+258o
		align 10h
aRBuildKdesup_1	db 'r:\build\kdesupport\dbusmenu-qt-0.9.2\work\libdbusmenu-qt-0.9.2\s'
					; DATA XREF: _ZN16DBusMenuImporter19slotMenuAboutToHideEv+148o
					; _ZN16DBusMenuImporter19slotMenuAboutToHideEv+16Ao ...
		db 'rc\dbusmenuimporter.cpp',0
aMenu		db 'menu',0             ; DATA XREF: _ZN16DBusMenuImporter19slotMenuAboutToHideEv+172o
					; _ZN16DBusMenuImporter19slotMenuAboutToShowEv+900o
aAction		db 'action',0           ; DATA XREF: _ZN16DBusMenuImporter19slotMenuAboutToHideEv+150o
					; _ZN16DBusMenuImporter19slotMenuAboutToShowEv+922o
aClosed		db 'closed',0           ; DATA XREF: _ZN16DBusMenuImporter19slotMenuAboutToHideEv+DCo
aClicked_0	db 'clicked',0          ; DATA XREF: _ZN16DBusMenuImporter16sendClickedEventEi+37o
aGetlayout	db 'GetLayout',0        ; DATA XREF: sub_6FFE2C60+12Fo
		align 10h
a1slotgetlayout	db '1slotGetLayoutFinished(QDBusPendingCallWatcher*)',0
					; DATA XREF: sub_6FFE2C60+329o
aRBuildKdesu_19	db 'r:\build\kdesupport\dbusmenu-qt-0.9.2\work\libdbusmenu-qt-0.9.2\s'
		db 'rc\dbusmenuimporter.cpp:102',0
		align 10h
a2finishedQdb_0	db '2finished(QDBusPendingCallWatcher*)',0 ; DATA XREF: sub_6FFE2C60+341o
aRBuildKdesu_20	db 'r:\build\kdesupport\dbusmenu-qt-0.9.2\work\libdbusmenu-qt-0.9.2\s'
		db 'rc\dbusmenuimporter.cpp:101',0
		align 4
a1sendclickedev	db '1sendClickedEvent(int)',0
					; DATA XREF: _ZN16DBusMenuImporterC1ERK7QStringS2_P7QObject+1B2o
					; _ZN16DBusMenuImporterC2ERK7QStringS2_P7QObject+1B2o
aRBuildKdesu_21	db 'r:\build\kdesupport\dbusmenu-qt-0.9.2\work\libdbusmenu-qt-0.9.2\s'
		db 'rc\dbusmenuimporter.cpp:295',0
a2mappedInt	db '2mapped(int)',0     ; DATA XREF: _ZN16DBusMenuImporterC1ERK7QStringS2_P7QObject+1CCo
					; _ZN16DBusMenuImporterC2ERK7QStringS2_P7QObject+1CCo
aRBuildKdesu_22	db 'r:\build\kdesupport\dbusmenu-qt-0.9.2\work\libdbusmenu-qt-0.9.2\s'
		db 'rc\dbusmenuimporter.cpp:295',0
		align 4
a1processpendin	db '1processPendingLayoutUpdates()',0
					; DATA XREF: _ZN16DBusMenuImporterC1ERK7QStringS2_P7QObject+247o
					; _ZN16DBusMenuImporterC2ERK7QStringS2_P7QObject+247o
aRBuildKdesu_23	db 'r:\build\kdesupport\dbusmenu-qt-0.9.2\work\libdbusmenu-qt-0.9.2\s'
		db 'rc\dbusmenuimporter.cpp:299',0
a2timeout_1	db '2timeout()',0       ; DATA XREF: _ZN16DBusMenuImporterC1ERK7QStringS2_P7QObject+261o
					; _ZN16DBusMenuImporterC2ERK7QStringS2_P7QObject+261o
aRBuildKdesu_24	db 'r:\build\kdesupport\dbusmenu-qt-0.9.2\work\libdbusmenu-qt-0.9.2\s'
		db 'rc\dbusmenuimporter.cpp:299',0
a1slotlayoutupd	db '1slotLayoutUpdated(uint, int)',0
					; DATA XREF: _ZN16DBusMenuImporterC1ERK7QStringS2_P7QObject+29Ao
					; _ZN16DBusMenuImporterC2ERK7QStringS2_P7QObject+29Ao
aRBuildKdesu_25	db 'r:\build\kdesupport\dbusmenu-qt-0.9.2\work\libdbusmenu-qt-0.9.2\s'
		db 'rc\dbusmenuimporter.cpp:304',0
aUi		db 'ui',0               ; DATA XREF: _ZN16DBusMenuImporterC1ERK7QStringS2_P7QObject+2B5o
					; _ZN16DBusMenuImporterC2ERK7QStringS2_P7QObject+2B5o
aLayoutupdated	db 'LayoutUpdated',0    ; DATA XREF: _ZN16DBusMenuImporterC1ERK7QStringS2_P7QObject+2CDo
					; _ZN16DBusMenuImporterC2ERK7QStringS2_P7QObject+2CDo
a1slotitemsprop	db '1slotItemsPropertiesUpdated(DBusMenuItemList, DBusMenuItemKeysLis'
					; DATA XREF: _ZN16DBusMenuImporterC1ERK7QStringS2_P7QObject:loc_6FFCD647o
					; _ZN16DBusMenuImporterC2ERK7QStringS2_P7QObject:loc_6FFCDF97o
		db 't)',0
aRBuildKdesu_26	db 'r:\build\kdesupport\dbusmenu-qt-0.9.2\work\libdbusmenu-qt-0.9.2\s'
		db 'rc\dbusmenuimporter.cpp:306',0
aAIaSvAIas	db 'a(ia{sv})a(ias)',0  ; DATA XREF: _ZN16DBusMenuImporterC1ERK7QStringS2_P7QObject+3C9o
					; _ZN16DBusMenuImporterC2ERK7QStringS2_P7QObject+3C9o
aItemspropertie	db 'ItemsPropertiesUpdated',0
					; DATA XREF: _ZN16DBusMenuImporterC1ERK7QStringS2_P7QObject+3E1o
					; _ZN16DBusMenuImporterC2ERK7QStringS2_P7QObject+3E1o
a1slotitemactiv	db '1slotItemActivationRequested(int, uint)',0
					; DATA XREF: _ZN16DBusMenuImporterC1ERK7QStringS2_P7QObject:loc_6FFCD75Co
					; _ZN16DBusMenuImporterC2ERK7QStringS2_P7QObject:loc_6FFCE0ACo
aRBuildKdesu_27	db 'r:\build\kdesupport\dbusmenu-qt-0.9.2\work\libdbusmenu-qt-0.9.2\s'
		db 'rc\dbusmenuimporter.cpp:308',0
aIu		db 'iu',0               ; DATA XREF: _ZN16DBusMenuImporterC1ERK7QStringS2_P7QObject+4DEo
					; _ZN16DBusMenuImporterC2ERK7QStringS2_P7QObject+4DEo
aItemactivation	db 'ItemActivationRequested',0
					; DATA XREF: _ZN16DBusMenuImporterC1ERK7QStringS2_P7QObject+4F6o
					; _ZN16DBusMenuImporterC2ERK7QStringS2_P7QObject+4F6o
aRIncludeQtc_13	db 'R:/include/QtCore/qstring.h',0
aOtherThis_4	db '&other != this',0
a31m_1		db 1Bh,'[31m',0         ; DATA XREF: _ZN16DBusMenuImporter27slotItemActivationRequestedEij+D5o
					; _ZN16DBusMenuImporter31slotAboutToShowDBusCallFinishedEP23QDBusPendingCallWatcher+1E8o ...
a0m_1		db 1Bh,'[0m:',0         ; DATA XREF: _ZN16DBusMenuImporter27slotItemActivationRequestedEij+103o
					; _ZN16DBusMenuImporter31slotAboutToShowDBusCallFinishedEP23QDBusPendingCallWatcher+2B0o ...
aConditionFai_5	db 'Condition failed: action',0
					; DATA XREF: _ZN16DBusMenuImporter27slotItemActivationRequestedEij+131o
aAbouttoshow_0	db 'aboutToShow',0      ; DATA XREF: _ZN16DBusMenuImporter10updateMenuEv+F3o
aCallToAbouttos	db 'Call to AboutToShow() failed:',0
					; DATA XREF: _ZN16DBusMenuImporter31slotAboutToShowDBusCallFinishedEP23QDBusPendingCallWatcher+336o
aConditionFai_6	db 'Condition failed: menu',0
					; DATA XREF: _ZN16DBusMenuImporter31slotAboutToShowDBusCallFinishedEP23QDBusPendingCallWatcher+BA3o
		align 10h
aApplicationDid	db 'Application did not refresh before timeout',0
					; DATA XREF: _ZN16DBusMenuImporter31slotAboutToShowDBusCallFinishedEP23QDBusPendingCallWatcher+725o
aAbouttoshow_1	db 'AboutToShow',0      ; DATA XREF: _ZN16DBusMenuImporter19slotMenuAboutToShowEv+1F9o
		align 4
a1slotabouttosh	db '1slotAboutToShowDBusCallFinished(QDBusPendingCallWatcher*)',0
					; DATA XREF: _ZN16DBusMenuImporter19slotMenuAboutToShowEv+3F3o
aRBuildKdesu_28	db 'r:\build\kdesupport\dbusmenu-qt-0.9.2\work\libdbusmenu-qt-0.9.2\s'
		db 'rc\dbusmenuimporter.cpp:487',0
a2finishedQdbus	db '2finished(QDBusPendingCallWatcher*)',0
					; DATA XREF: _ZN16DBusMenuImporter19slotMenuAboutToShowEv+406o
aRBuildKdesu_29	db 'r:\build\kdesupport\dbusmenu-qt-0.9.2\work\libdbusmenu-qt-0.9.2\s'
		db 'rc\dbusmenuimporter.cpp:486',0
		align 4
aApplicationD_0	db 'Application did not answer to AboutToShow() before timeout',0
					; DATA XREF: _ZN16DBusMenuImporter19slotMenuAboutToShowEv+72Ao
aOpened		db 'opened',0           ; DATA XREF: _ZN16DBusMenuImporter19slotMenuAboutToShowEv+497o
		align 4
aFailedToDecode	db 'Failed to decode icon-data property for action',0
					; DATA XREF: sub_6FFE24B0+374o
aLabel_0	db 'label',0            ; DATA XREF: sub_6FFE1870+62o
					; sub_6FFE1870+2B6o
aEnabled_0	db 'enabled',0          ; DATA XREF: sub_6FFE1870+18Eo
					; sub_6FFE1870+286o
aToggleState_0	db 'toggle-state',0     ; DATA XREF: sub_6FFE1870+2FDo
					; sub_6FFE1870+5DBo
aIconName_0	db 'icon-name',0        ; DATA XREF: sub_6FFE1870+3C7o
aIconData_0	db 'icon-data',0        ; DATA XREF: sub_6FFE1870+548o
aVisible_0	db 'visible',0          ; DATA XREF: sub_6FFE1870+56Do
aShortcut_0	db 'shortcut',0         ; DATA XREF: sub_6FFE1870+687o
aUnhandledPrope	db 'Unhandled property update',0 ; DATA XREF: sub_6FFE1870+8FCo
aType_0		db 'type',0             ; DATA XREF: sub_6FFE0440+119o
aSeparator_0	db 'separator',0        ; DATA XREF: sub_6FFE0440+1ABo
					; sub_6FFE0440+1256o
aChildrenDisp_1	db 'children-display',0 ; DATA XREF: sub_6FFE0440+22Do
aSubmenu_1	db 'submenu',0          ; DATA XREF: sub_6FFE0440+2A8o
					; sub_6FFE0440+1227o
aToggleType_0	db 'toggle-type',0      ; DATA XREF: sub_6FFE0440+43Bo
aRadio_0	db 'radio',0            ; DATA XREF: sub_6FFE0440+50Eo
					; sub_6FFE0440+1110o
aXKdeTitle_0	db 'x-kde-title',0      ; DATA XREF: sub_6FFE0440+569o
aDbusmenulayout	db 'DBusMenuLayoutItem',0
					; DATA XREF: _ZN16DBusMenuImporter21slotGetLayoutFinishedEP23QDBusPendingCallWatcher+481o
					; _ZN16DBusMenuImporter21slotGetLayoutFinishedEP23QDBusPendingCallWatcher+5EEo
aNoMenuForId	db 'No menu for id',0   ; DATA XREF: _ZN16DBusMenuImporter21slotGetLayoutFinishedEP23QDBusPendingCallWatcher+EDCo
		align 4
a1map		db '1map()',0           ; DATA XREF: _ZN16DBusMenuImporter21slotGetLayoutFinishedEP23QDBusPendingCallWatcher+6F6o
aRBuildKdesu_30	db 'r:\build\kdesupport\dbusmenu-qt-0.9.2\work\libdbusmenu-qt-0.9.2\s'
		db 'rc\dbusmenuimporter.cpp:422',0
a2triggered	db '2triggered()',0     ; DATA XREF: _ZN16DBusMenuImporter21slotGetLayoutFinishedEP23QDBusPendingCallWatcher+70Fo
aRBuildKdesu_31	db 'r:\build\kdesupport\dbusmenu-qt-0.9.2\work\libdbusmenu-qt-0.9.2\s'
		db 'rc\dbusmenuimporter.cpp:421',0
		align 4
aRBuildKdesup_2	db 'R:/build/kdesupport/dbusmenu-qt-0.9.2/work/mingw4-Release-0.9.2/s'
					; DATA XREF: _ZN16DBusMenuImporter18qt_static_metacallEP7QObjectN11QMetaObject4CallEiPPv+218o
		db 'rc/dbusmenuimporter.moc',0
aStaticmetaob_1	db 'staticMetaObject.cast(_o)',0
					; DATA XREF: _ZN16DBusMenuImporter18qt_static_metacallEP7QObjectN11QMetaObject4CallEiPPv+220o
		align 10h
off_6FFF4E30	dd offset loc_6FFD2E38	; DATA XREF: _ZN16DBusMenuImporter18qt_static_metacallEP7QObjectN11QMetaObject4CallEiPPv+51r
		dd offset loc_6FFD2E20	; jump table for switch	statement
		dd offset loc_6FFD2DF8
		dd offset loc_6FFD2DE0
		dd offset loc_6FFD2DB8
		dd offset loc_6FFD2DA0
		dd offset loc_6FFD2D83
		dd offset loc_6FFD2D62
		dd offset loc_6FFD2D38
		dd offset loc_6FFD2D20
		dd offset loc_6FFD2CF0
		dd offset loc_6FFD2CC8
		dd offset loc_6FFD2E50
; Exported entry  32. _ZN16DBusMenuImporter25staticMetaObjectExtraDataE
		public _ZN16DBusMenuImporter25staticMetaObjectExtraDataE
_ZN16DBusMenuImporter25staticMetaObjectExtraDataE dd 0 ; DATA XREF: .data:6FFEE03Co
		dd offset _ZN16DBusMenuImporter18qt_static_metacallEP7QObjectN11QMetaObject4CallEiPPv
		align 20h
aDbusmenuimport	db 'DBusMenuImporter',0 ; DATA XREF: _ZN16DBusMenuImporter11qt_metacastEPKc+28o
					; .data:6FFEE034o
		align 2
aMenuupdated	db 'menuUpdated()',0
aMenureadytobes	db 'menuReadyToBeShown()',0
aActionactivati	db 'actionActivationRequested(QAction*)',0
aUpdatemenu	db 'updateMenu()',0
aSendclickedeve	db 'sendClickedEvent(int)',0
aSlotmenuaboutt	db 'slotMenuAboutToShow()',0
aSlotmenuabou_0	db 'slotMenuAboutToHide()',0
aSlotabouttosho	db 'slotAboutToShowDBusCallFinished(QDBusPendingCallWatcher*)',0
aIdTimestamp_0	db 'id,timestamp',0
aSlotitemactiva	db 'slotItemActivationRequested(int,uint)',0
aProcesspending	db 'processPendingLayoutUpdates()',0
aRevisionPare_0	db 'revision,parentId',0
aSlotlayoutupda	db 'slotLayoutUpdated(uint,int)',0
aSlotgetlayoutf	db 'slotGetLayoutFinished(QDBusPendingCallWatcher*)',0
aUpdatedlistRem	db 'updatedList,removedList',0
aSlotitemsprope	db 'slotItemsPropertiesUpdated(DBusMenuItemList,DBusMenuItemKeysList)'
		db 0
		align 4
a_dbusmenu_id	db '_dbusmenu_id',0     ; DATA XREF: .rdata:off_6FFF507Co
		align 4
off_6FFF507C	dd offset a_dbusmenu_id	; DATA XREF: _ZN16DBusMenuImporter19slotMenuAboutToHideEv:loc_6FFCD06Dr
					; _ZN16DBusMenuImporter31slotAboutToShowDBusCallFinishedEP23QDBusPendingCallWatcher+47r ...
					; "_dbusmenu_id"
aVoidDbusmenu_2	db 'void DBusMenuImporter::slotAboutToShowDBusCallFinished(QDBusPendi'
					; DATA XREF: _ZN16DBusMenuImporter31slotAboutToShowDBusCallFinishedEP23QDBusPendingCallWatcher+24Co
					; _ZN16DBusMenuImporter31slotAboutToShowDBusCallFinishedEP23QDBusPendingCallWatcher+6DEo ...
		db 'ngCallWatcher*)',0
		align 10h
aVoidDbusmenu_3	db 'void DBusMenuImporter::slotMenuAboutToShow()',0
					; DATA XREF: _ZN16DBusMenuImporter19slotMenuAboutToShowEv+640o
		align 20h
aVoidDbusmenu_4	db 'void DBusMenuImporter::slotGetLayoutFinished(QDBusPendingCallWatc'
					; DATA XREF: _ZN16DBusMenuImporter21slotGetLayoutFinishedEP23QDBusPendingCallWatcher+268o
					; _ZN16DBusMenuImporter21slotGetLayoutFinishedEP23QDBusPendingCallWatcher+E9Bo
		db 'her*)',0
		align 20h
aVoidDbusmenu_5	db 'void DBusMenuImporterPrivate::updateActionProperty(QAction*, cons'
					; DATA XREF: sub_6FFE1870+8B5o
		db 't QString&, const QVariant&)',0
a_dbusmenu_icon	db '_dbusmenu_icon_name',0 ; DATA XREF: .rdata:off_6FFF51F4o
		align 4
off_6FFF51F4	dd offset a_dbusmenu_icon ; DATA XREF: sub_6FFE1870+3FCr
					; sub_6FFE1870+497r
					; "_dbusmenu_icon_name"
a_dbusmenu_ic_0	db '_dbusmenu_icon_data_hash',0 ; DATA XREF: .rdata:off_6FFF5214o
		align 4
off_6FFF5214	dd offset a_dbusmenu_ic_0 ; DATA XREF: sub_6FFE24B0+6Er
					; sub_6FFE24B0+107r
					; "_dbusmenu_icon_data_hash"
		align 10h
aVoidDbusmenu_6	db 'void DBusMenuImporterPrivate::updateActionIconByData(QAction*, co'
					; DATA XREF: sub_6FFE24B0+295o
		db 'nst QVariant&)',0
		align 20h
aVoidDbusmenuim	db 'void DBusMenuImporter::slotItemActivationRequested(int, uint)',0
					; DATA XREF: _ZN16DBusMenuImporter27slotItemActivationRequestedEij+ECo
aCom_canonica_0	db 'com.canonical.dbusmenu',0 ; DATA XREF: .rdata:off_6FFF52D8o
		align 4
off_6FFF52D8	dd offset aCom_canonica_0
					; DATA XREF: _ZN16DBusMenuImporterC1ERK7QStringS2_P7QObject+E6r
					; _ZN16DBusMenuImporterC1ERK7QStringS2_P7QObject+2E4r ...
					; "com.canonical.dbusmenu"
		align 10h
dword_6FFF52E0	dd 6, 3	dup(0)		; DATA XREF: .data:6FFEE038o
		dd 0Dh,	0Eh, 7 dup(0)
		dd 3, 12h, 3 dup(11h), 5, 20h, 3 dup(11h), 5, 35h, 3 dup(11h)
		dd 5, 59h, 3 dup(11h), 0Ah, 66h, 3 dup(11h), 8,	7Ch, 3 dup(11h)
		dd 8, 92h, 3 dup(11h), 8, 0A8h,	3 dup(11h), 8, 0EFh, 0E2h
		dd 2 dup(11h), 8, 115h,	3 dup(11h), 8, 145h, 133h, 2 dup(11h)
		dd 8, 161h, 3 dup(11h),	8, 1A9h, 191h, 2 dup(11h), 8, 0
aDbusmenuitem	db 'DBusMenuItem',0     ; DATA XREF: sub_6FFD2F30+164o
					; .text:6FFDC136o
aDbusmenuitemli	db 'DBusMenuItemList',0 ; DATA XREF: sub_6FFD2F30+190o
aDbusmenuitemke	db 'DBusMenuItemKeys',0 ; DATA XREF: sub_6FFD2F30+1B7o
					; .text:6FFDC1C6o
aDbusmenuitem_0	db 'DBusMenuItemKeysList',0 ; DATA XREF: sub_6FFD2F30+1E0o
aDbusmenulayo_0	db 'DBusMenuLayoutItem',0 ; DATA XREF: sub_6FFD2F30+207o
					; _ZlsR13QDBusArgumentRK18DBusMenuLayoutItem+22Bo ...
aDbusmenulayo_1	db 'DBusMenuLayoutItemList',0 ; DATA XREF: sub_6FFD2F30+230o
aDbusmenushor_0	db 'DBusMenuShortcut',0 ; DATA XREF: sub_6FFD2F30+140o
aQdbusvariant	db 'QDBusVariant',0     ; DATA XREF: _ZlsR13QDBusArgumentRK12DBusMenuItem+17Fo
					; _ZlsR13QDBusArgumentRK18DBusMenuLayoutItem+7DFo ...
aRIncludeQtc_10	db 'R:/include/QtCore/qstring.h',0 ; DATA XREF: sub_6FFEAF40+328o
aOtherThis_3	db '&other != this',0   ; DATA XREF: sub_6FFEAF40+330o
aQdbusargumen_0	db 'QDBusArgument',0    ; DATA XREF: _ZrsRK13QDBusArgumentR18DBusMenuLayoutItem+255o
		align 20h
aRIncludeQtco_6	db 'R:/include/QtCore/qstring.h',0
					; DATA XREF: _ZN16DBusMenuShortcut15fromKeySequenceERK12QKeySequence+12Eo
aOtherThis_1	db '&other != this',0   ; DATA XREF: _ZN16DBusMenuShortcut15fromKeySequenceERK12QKeySequence+136o
asc_6FFF552B	db '+',0                ; DATA XREF: _ZNK16DBusMenuShortcut13toKeySequenceEv+C3o
					; .rdata:6FFF5570o
asc_6FFF552D	db ', ',0               ; DATA XREF: _ZNK16DBusMenuShortcut13toKeySequenceEv+1B0o
					; _ZN16DBusMenuShortcut15fromKeySequenceERK12QKeySequence+6Fo
aPlus		db '+plus',0            ; DATA XREF: _ZN16DBusMenuShortcut15fromKeySequenceERK12QKeySequence+174o
asc_6FFF5536	db '++',0               ; DATA XREF: _ZN16DBusMenuShortcut15fromKeySequenceERK12QKeySequence+193o
aMeta		db 'Meta',0             ; DATA XREF: .rdata:off_6FFF5560o
aSuper		db 'Super',0            ; DATA XREF: .rdata:6FFF5564o
aCtrl		db 'Ctrl',0             ; DATA XREF: .rdata:6FFF5568o
aControl	db 'Control',0          ; DATA XREF: .rdata:6FFF556Co
aPlus_0		db 'plus',0             ; DATA XREF: .rdata:6FFF5574o
asc_6FFF5556	db '-',0                ; DATA XREF: .rdata:6FFF5578o
aMinus		db 'minus',0            ; DATA XREF: .rdata:6FFF557Co
		align 10h
off_6FFF5560	dd offset aMeta		; DATA XREF: sub_6FFD4290+3Er
					; sub_6FFD4290+58o ...
					; "Meta"
		dd offset aSuper	; "Super"
		dd offset aCtrl		; "Ctrl"
		dd offset aControl	; "Control"
		dd offset asc_6FFF552B	; "+"
		dd offset aPlus_0	; "plus"
		dd offset asc_6FFF5556	; "-"
		dd offset aMinus	; "minus"
		dd 8 dup(0)
aRIncludeQtco_7	db 'R:/include/QtCore/qstring.h',0 ; DATA XREF: sub_6FFD52A0+FCo
					; sub_6FFD52A0+1F8o
aUintIUintSize	db 'uint(i) < uint(size())',0 ; DATA XREF: sub_6FFD52A0+104o
					; sub_6FFD52A0+200o
		align 10h
aRIncludeQtco_8	db 'R:/include/QtCore/qscopedpointer.h',0 ; DATA XREF: sub_6FFD5750+38o
					; sub_6FFD5980+58o ...
aD_1		db 'd',0                ; DATA XREF: sub_6FFD5750+40o
					; sub_6FFD5980+60o ...
aVersion	db 'Version',0          ; DATA XREF: sub_6FFD5C00:loc_6FFD5C3Do
aStatus_0	db 'Status',0           ; DATA XREF: sub_6FFD5D50:loc_6FFD5D8Do
aRIncludeQtco_9	db 'R:/include/QtCore/qstring.h',0 ; DATA XREF: sub_6FFD5D50+173o
					; sub_6FFD5D50+1E8o
aOtherThis_2	db '&other != this',0   ; DATA XREF: sub_6FFD5D50+17Bo
					; sub_6FFD5D50+1F0o
		align 10h
aRBuildKdesup_3	db 'R:\build\kdesupport\dbusmenu-qt-0.9.2\work\mingw4-Release-0.9.2\s'
					; DATA XREF: sub_6FFD5FC0+35Fo
		db 'rc\/dbusmenuadaptor.moc',0
aStaticmetaob_2	db 'staticMetaObject.cast(_o)',0 ; DATA XREF: sub_6FFD5FC0+367o
		align 4
off_6FFF56B4	dd offset loc_6FFD6241	; DATA XREF: sub_6FFD5FC0+72r
		dd offset loc_6FFD6190	; jump table for switch	statement
		dd offset loc_6FFD6162
		dd offset loc_6FFD6130
		dd offset loc_6FFD6270
		dd offset loc_6FFD6090
		dd offset loc_6FFD6040
		dd offset loc_6FFD62B0
dword_6FFF56D4	dd 0			; DATA XREF: .data:6FFEE04Co
		dd offset sub_6FFD5FC0
		align 10h
aDbusmenuadapto	db 'DbusmenuAdaptor',0  ; DATA XREF: sub_6FFD56E0+28o
					; .data:6FFEE044o
aCom_canonica_2	db 'com.canonical.dbusmenu',0
aDBusInterfac_0	db 'D-Bus Interface',0
aInterfaceNameC	db '  <interface name="com.canonical.dbusmenu">',0Ah
		db '    <dox:d><![CDATA[',0Ah
		db 9,9,'A DBus interface to expose menus on DBus.',0Ah
		db 0Ah
		db 9,9,'Menu items are represented with a unique numeric id and a dicti'
		db 'onary of',0Ah
		db 9,9,'properties.',0Ah
		db 0Ah
		db 9,9,'To reduce the amount of DBus traffic, a property should only be'
		db ' returned',0Ah
		db 9,9,'if its value is not the default value.',0Ah
		db 0Ah
		db 9,9,'Available properties are:',0Ah
		db 0Ah
		db 9,9,'<table>',0Ah
		db 9,9,'<tr>',0Ah
		db 9,9,9,'<th>Name</th>',0Ah
		db 9,9,9,'<th>Type</th>',0Ah
		db 9,9,9,'<th>Description</th>',0Ah
		db 9,9,9,'<th>Default Value</th>',0Ah
		db 9,9,'</tr>',0Ah
		db 9,9,'<tr>',0Ah
		db 9,9,9,'<td>type</td>',0Ah
		db 9,9,9,'<td>String</td>',0Ah
		db 9,9,9,'<td>Can be one of:',0Ah
		db 9,9,9,'- "standard": an item which can be clicked to trigger an actio'
		db 'n or',0Ah
		db 9,9,9,'  show another menu',0Ah
		db 9,9,9,'- "separator": a separator',0Ah
		db 0Ah
		db 9,9,9,'Vendor specific types can be added by prefixing them with',0Ah
		db 9,9,9,'"x-<vendor>-".',0Ah
		db 9,9,9,'</td>',0Ah
		db 9,9,9,'<td>"standard"</td>',0Ah
		db 9,9,'</tr>',0Ah
		db 9,9,'<tr>',0Ah
		db 9,9,9,'<td>label</td>',0Ah
		db 9,9,9,'<td>string</td>',0Ah
		db 9,9,9,'<td>Text of the item, except that:',0Ah
		db 9,9,9,'-# two consecutive underscore characters "__" are displayed as'
		db ' a',0Ah
		db 9,9,9,'single underscore,',0Ah
		db 9,9,9,'-# any remaining underscore characters are not displayed at al'
		db 'l,',0Ah
		db 9,9,9,'-# the first of those remaining underscore characters (unless '
		db 'it is',0Ah
		db 9,9,9,'the last character in the string) indicates that the following'
		db 0Ah
		db 9,9,9,'character is the access key.',0Ah
		db 9,9,9,'</td>',0Ah
		db 9,9,9,'<td>""</td>',0Ah
		db 9,9,'</tr>',0Ah
		db 9,9,'<tr>',0Ah
		db 9,9,9,'<td>enabled</td>',0Ah
		db 9,9,9,'<td>boolean</td>',0Ah
		db 9,9,9,'<td>Whether the item can be activated or not.</td>',0Ah
		db 9,9,9,'<td>true</td>',0Ah
		db 9,9,'</tr>',0Ah
		db 9,9,'<tr>',0Ah
		db 9,9,9,'<td>visible</td>',0Ah
		db 9,9,9,'<td>boolean</td>',0Ah
		db 9,9,9,'<td>True if the item is visible in the menu.</td>',0Ah
		db 9,9,9,'<td>true</td>',0Ah
		db 9,9,'</tr>',0Ah
		db 9,9,'<tr>',0Ah
		db 9,9,9,'<td>icon-name</td>',0Ah
		db 9,9,9,'<td>string</td>',0Ah
		db 9,9,9,'<td>Icon name of the item, following the freedesktop.org icon '
		db 'spec.</td>',0Ah
		db 9,9,9,'<td>""</td>',0Ah
		db 9,9,'</tr>',0Ah
		db 9,9,'<tr>',0Ah
		db 9,9,9,'<td>icon-data</td>',0Ah
		db 9,9,9,'<td>binary</td>',0Ah
		db 9,9,9,'<td>PNG data of the icon.</td>',0Ah
		db 9,9,9,'<td>Empty</td>',0Ah
		db 9,9,'</tr>',0Ah
		db 9,9,'<tr>',0Ah
		db 9,9,9,'<td>shortcut</td>',0Ah
		db 9,9,9,'<td>array of arrays of strings</td>',0Ah
		db 9,9,9,'<td>The shortcut of the item. Each array represents the key pr'
		db 'ess',0Ah
		db 9,9,9,'in the list of keypresses. Each list of strings contains a lis'
		db 't of',0Ah
		db 9,9,9,'modifiers and then the key that is used. The modifier strings',0Ah
		db 9,9,9,'allowed are: "Control", "Alt", "Shift" and "Super".',0Ah
		db 0Ah
		db 9,9,9,'- A simple shortcut like Ctrl+S is represented as:',0Ah
		db 9,9,9,'  [["Control", "S"]]',0Ah
		db 9,9,9,'- A complex shortcut like Ctrl+Q, Alt+X is represented as:',0Ah
		db 9,9,9,'  [["Control", "Q"], ["Alt", "X"]]</td>',0Ah
		db 9,9,9,'<td>Empty</td>',0Ah
		db 9,9,'</tr>',0Ah
		db 9,9,'<tr>',0Ah
		db 9,9,9,'<td>toggle-type</td>',0Ah
		db 9,9,9,'<td>string</td>',0Ah
		db 9,9,9,'<td>',0Ah
		db 9,9,9,'If the item can be toggled, this property should be set to:',0Ah
		db 9,9,9,'- "checkmark": Item is an independent togglable item',0Ah
		db 9,9,9,'- "radio": Item is part of a group where only one item can be',0Ah
		db 9,9,9,'  toggled at a time',0Ah
		db 9,9,9,'- "": Item cannot be toggled',0Ah
		db 9,9,9,'</td>',0Ah
		db 9,9,9,'<td>""</td>',0Ah
		db 9,9,'</tr>',0Ah
		db 9,9,'<tr>',0Ah
		db 9,9,9,'<td>toggle-state</td>',0Ah
		db 9,9,9,'<td>int</td>',0Ah
		db 9,9,9,'<td>',0Ah
		db 9,9,9,'Describe the current state of a "togglable" item. Can be one o'
		db 'f:',0Ah
		db 9,9,9,'- 0 = off',0Ah
		db 9,9,9,'- 1 = on',0Ah
		db 9,9,9,'- anything else = indeterminate',0Ah
		db 0Ah
		db 9,9,9,'Note:',0Ah
		db 9,9,9,'The implementation does not itself handle ensuring that only o'
		db 'ne',0Ah
		db 9,9,9,'item in a radio group is set to "on", or that a group does not'
		db ' have',0Ah
		db 9,9,9,'"on" and "indeterminate" items simultaneously; maintaining thi'
		db 's',0Ah
		db 9,9,9,'policy is up to the toolkit wrappers.',0Ah
		db 9,9,9,'</td>',0Ah
		db 9,9,9,'<td>-1</td>',0Ah
		db 9,9,'</tr>',0Ah
		db 9,9,'<tr>',0Ah
		db 9,9,9,'<td>children-display</td>',0Ah
		db 9,9,9,'<td>string</td>',0Ah
		db 9,9,9,'<td>',0Ah
		db 9,9,9,'If the menu item has children this property should be set to',0Ah
		db 9,9,9,'"submenu".',0Ah
		db 9,9,9,'</td>',0Ah
		db 9,9,9,'<td>""</td>',0Ah
		db 9,9,'</tr>',0Ah
		db 9,9,'</table>',0Ah
		db 0Ah
		db 9,9,'Vendor specific properties can be added by prefixing them with',0Ah
		db 9,9,'"x-<vendor>-".',0Ah
		db 9,9,']]></dox:d>',0Ah
		db '    <!-- Properties -->',0Ah
		db '    <property access="read" type="u" name="Version">',0Ah
		db '      <dox:d>',0Ah
		db 9,9,9,'Provides the version of the DBusmenu API that this API is',0Ah
		db 9,9,9,'implementing.',0Ah
		db 9,9,9,'</dox:d>',0Ah
		db '    </property>',0Ah
		db '    <property access="read" type="s" name="Status">',0Ah
		db '      <dox:d>',0Ah
		db '            Tells if the menus are in a normal state or they beli'
		db 'eve that they',0Ah
		db '            could use some attention.  Cases for showing them wou'
		db 'ld be if help',0Ah
		db '            were referring to them or they accessors were being h'
		db 'ighlighted.',0Ah
		db '            This property can have two values: "normal" in almost'
		db ' all cases and',0Ah
		db '            "notice" when they should have a higher priority to b'
		db 'e shown.',0Ah
		db '            </dox:d>',0Ah
		db '    </property>',0Ah
		db '    <!-- Functions -->',0Ah
		db '    <method name="GetLayout">',0Ah
		db '      <annotation value="DBusMenuLayoutItem" name="com.trolltech.'
		db 'QtDBus.QtTypeName.Out1"/>',0Ah
		db '      <dox:d>',0Ah
		db 9,9,9,'  Provides the layout and propertiers that are attached to the'
		db ' entries',0Ah
		db 9,9,9,'  that are in the layout.  It only gives the items that are ch'
		db 'ildren',0Ah
		db 9,9,9,'  of the item that is specified in @a parentId.  It will retur'
		db 'n all of the',0Ah
		db 9,9,9,'  properties or specific ones depending of the value in @a pro'
		db 'pertyNames.',0Ah
		db 0Ah
		db 9,9,9,'  The format is recursive, where the second ',27h,'v',27h,' is in th'
		db 'e same format',0Ah
		db 9,9,9,'  as the original ',27h,'a(ia{sv}av)',27h,'.  Its content depends on'
		db ' the value',0Ah
		db 9,9,9,'  of @a recursionDepth.',0Ah
		db 9,9,9,'</dox:d>',0Ah
		db '      <arg direction="in" type="i" name="parentId">',0Ah
		db '        <dox:d>The ID of the parent node for the layout.  For',0Ah
		db 9,9,9,9,'grabbing the layout from the root node use zero.</dox:d>',0Ah
		db '      </arg>',0Ah
		db '      <arg direction="in" type="i" name="recursionDepth">',0Ah
		db '        <dox:d>',0Ah
		db 9,9,9,9,'  The amount of levels of recursion to use.  This affects the'
		db 0Ah
		db 9,9,9,9,'  content of the second variant array.',0Ah
		db 9,9,9,9,'  - -1: deliver all the items under the @a parentId.',0Ah
		db 9,9,9,9,'  - 0: no recursion, the array will be empty.',0Ah
		db 9,9,9,9,'  - n: array will contains items up to ',27h,'n',27h,' level depth.'
		db 0Ah
		db 9,9,9,9,'</dox:d>',0Ah
		db '      </arg>',0Ah
		db '      <arg direction="in" type="as" name="propertyNames">',0Ah
		db '        <dox:d>',0Ah
		db 9,9,9,9,9,'The list of item properties we are',0Ah
		db 9,9,9,9,9,'interested in.  If there are no entries in the list all of',0Ah
		db 9,9,9,9,9,'the properties will be sent.',0Ah
		db 9,9,9,9,'</dox:d>',0Ah
		db '      </arg>',0Ah
		db '      <arg direction="out" type="u" name="revision">',0Ah
		db '        <dox:d>The revision number of the layout.  For matching',0Ah
		db 9,9,9,9,'with layoutUpdated signals.</dox:d>',0Ah
		db '      </arg>',0Ah
		db '      <arg direction="out" type="(ia{sv}av)" name="layout">',0Ah
		db '        <dox:d>The layout, as a recursive structure.</dox:d>',0Ah
		db '      </arg>',0Ah
		db '    </method>',0Ah
		db '    <method name="GetGroupProperties">',0Ah
		db '      <annotation value="QList&lt;int>" name="com.trolltech.QtDBu'
		db 's.QtTypeName.In0"/>',0Ah
		db '      <annotation value="DBusMenuItemList" name="com.trolltech.Qt'
		db 'DBus.QtTypeName.Out0"/>',0Ah
		db '      <dox:d>',0Ah
		db 9,9,9,'Returns the list of items which are children of @a parentId.',0Ah
		db 9,9,9,'</dox:d>',0Ah
		db '      <arg direction="in" type="ai" name="ids">',0Ah
		db '        <dox:d>',0Ah
		db 9,9,9,9,9,'A list of ids that we should be finding the properties',0Ah
		db 9,9,9,9,9,'on.  If the list is empty, all menu items should be sent.',0Ah
		db 9,9,9,9,'</dox:d>',0Ah
		db '      </arg>',0Ah
		db '      <arg direction="in" type="as" name="propertyNames">',0Ah
		db '        <dox:d>',0Ah
		db 9,9,9,9,9,'The list of item properties we are',0Ah
		db 9,9,9,9,9,'interested in.  If there are no entries in the list all of',0Ah
		db 9,9,9,9,9,'the properties will be sent.',0Ah
		db 9,9,9,9,'</dox:d>',0Ah
		db '      </arg>',0Ah
		db '      <arg direction="out" type="a(ia{sv})" name="properties">',0Ah
		db '        <dox:d>',0Ah
		db 9,9,9,9,9,'An array of property values.',0Ah
		db 9,9,9,9,9,'An item in this area is represented as a struct following',0Ah
		db 9,9,9,9,9,'this format:',0Ah
		db 9,9,9,9,9,'@li id unsigned the item id',0Ah
		db 9,9,9,9,9,'@li properties map(string => variant) the requested item pro'
		db 'perties',0Ah
		db 9,9,9,9,'</dox:d>',0Ah
		db '      </arg>',0Ah
		db '    </method>',0Ah
		db '    <method name="GetProperty">',0Ah
		db '      <dox:d>',0Ah
		db 9,9,9,'  Get a signal property on a single item.  This is not useful '
		db 'if you',27h,'re',0Ah
		db 9,9,9,'  going to implement this interface, it should only be used if'
		db ' you',27h,'re',0Ah
		db 9,9,9,'  debugging via a commandline tool.',0Ah
		db 9,9,9,'</dox:d>',0Ah
		db '      <arg direction="in" type="i" name="id">',0Ah
		db '        <dox:d>the id of the item which received the event</dox:d'
		db '>',0Ah
		db '      </arg>',0Ah
		db '      <arg direction="in" type="s" name="name">',0Ah
		db '        <dox:d>the name of the property to get</dox:d>',0Ah
		db '      </arg>',0Ah
		db '      <arg direction="out" type="v" name="value">',0Ah
		db '        <dox:d>the value of the property</dox:d>',0Ah
		db '      </arg>',0Ah
		db '    </method>',0Ah
		db '    <method name="Event">',0Ah
		db '      <dox:d><![CDATA[',0Ah
		db 9,9,9,'This is called by the applet to notify the application an even'
		db 't happened on a',0Ah
		db 9,9,9,'menu item.',0Ah
		db 0Ah
		db 9,9,9,'@a type can be one of the following:',0Ah
		db 0Ah
		db 9,9,9,'@li "clicked"',0Ah
		db 9,9,9,'@li "hovered"',0Ah
		db 0Ah
		db 9,9,9,'Vendor specific events can be added by prefixing them with "x-'
		db '<vendor>-"',0Ah
		db 9,9,9,']]></dox:d>',0Ah
		db '      <arg direction="in" type="i" name="id">',0Ah
		db '        <dox:d>the id of the item which received the event</dox:d'
		db '>',0Ah
		db '      </arg>',0Ah
		db '      <arg direction="in" type="s" name="eventId">',0Ah
		db '        <dox:d>the type of event</dox:d>',0Ah
		db '      </arg>',0Ah
		db '      <arg direction="in" type="v" name="data">',0Ah
		db '        <dox:d>event-specific data</dox:d>',0Ah
		db '      </arg>',0Ah
		db '      <arg direction="in" type="u" name="timestamp">',0Ah
		db '        <dox:d>The time that the event occured if available or th'
		db 'e time the message was sent if not</dox:d>',0Ah
		db '      </arg>',0Ah
		db '    </method>',0Ah
		db '    <method name="AboutToShow">',0Ah
		db '      <dox:d>',0Ah
		db 9,9,9,'This is called by the applet to notify the application that it'
		db ' is about',0Ah
		db 9,9,9,'to show the menu under the specified item.',0Ah
		db 9,9,9,'</dox:d>',0Ah
		db '      <arg direction="in" type="i" name="id">',0Ah
		db '        <dox:d>',0Ah
		db 9,9,9,9,'Which menu item represents the parent of the item about to be'
		db ' shown.',0Ah
		db 9,9,9,9,'</dox:d>',0Ah
		db '      </arg>',0Ah
		db '      <arg direction="out" type="b" name="needUpdate">',0Ah
		db '        <dox:d>',0Ah
		db 9,9,9,9,'Whether this AboutToShow event should result in the menu bein'
		db 'g updated.',0Ah
		db 9,9,9,9,'</dox:d>',0Ah
		db '      </arg>',0Ah
		db '    </method>',0Ah
		db '    <!-- Signals -->',0Ah
		db '    <signal name="ItemsPropertiesUpdated">',0Ah
		db '      <annotation value="DBusMenuItemList" name="com.trolltech.Qt'
		db 'DBus.QtTypeName.In0"/>',0Ah
		db '      <annotation value="DBusMenuItemKeysList" name="com.trolltec'
		db 'h.QtDBus.QtTypeName.In1"/>',0Ah
		db '      <dox:d>',0Ah
		db 9,9,9,'Triggered when there are lots of property updates across many '
		db 'items',0Ah
		db 9,9,9,'so they all get grouped into a single dbus message.  The forma'
		db 't is',0Ah
		db 9,9,9,'the ID of the item with a hashtable of names and values for th'
		db 'ose',0Ah
		db 9,9,9,'properties.',0Ah
		db 9,9,9,'</dox:d>',0Ah
		db '      <arg direction="out" type="a(ia{sv})" name="updatedProps"/>'
		db 0Ah
		db '      <arg direction="out" type="a(ias)" name="removedProps"/>',0Ah
		db '    </signal>',0Ah
		db '    <signal name="LayoutUpdated">',0Ah
		db '      <dox:d>',0Ah
		db 9,9,9,'Triggered by the application to notify display of a layout upd'
		db 'ate, up to',0Ah
		db 9,9,9,'revision',0Ah
		db 9,9,9,'</dox:d>',0Ah
		db '      <arg direction="out" type="u" name="revision">',0Ah
		db '        <dox:d>The revision of the layout that we',27h,'re currently'
		db ' on</dox:d>',0Ah
		db '      </arg>',0Ah
		db '      <arg direction="out" type="i" name="parent">',0Ah
		db '        <dox:d>',0Ah
		db 9,9,9,9,'If the layout update is only of a subtree, this is the',0Ah
		db 9,9,9,9,'parent item for the entries that have changed.  It is zero if'
		db 0Ah
		db 9,9,9,9,'the whole layout should be considered invalid.',0Ah
		db 9,9,9,9,'</dox:d>',0Ah
		db '      </arg>',0Ah
		db '    </signal>',0Ah
		db '    <signal name="ItemActivationRequested">',0Ah
		db '      <dox:d>',0Ah
		db 9,9,9,'  The server is requesting that all clients displaying this',0Ah
		db 9,9,9,'  menu open it to the user.  This would be for things like',0Ah
		db 9,9,9,'  hotkeys that when the user presses them the menu should',0Ah
		db 9,9,9,'  open and display itself to the user.',0Ah
		db 9,9,9,'</dox:d>',0Ah
		db '      <arg direction="out" type="i" name="id">',0Ah
		db '        <dox:d>ID of the menu that should be activated</dox:d>',0Ah
		db '      </arg>',0Ah
		db '      <arg direction="out" type="u" name="timestamp">',0Ah
		db '        <dox:d>The time that the event occured</dox:d>',0Ah
		db '      </arg>',0Ah
		db '    </signal>',0Ah
		db '    <!-- End of interesting stuff -->',0Ah
		db '  </interface>',0Ah,0
aDBusIntrospect	db 'D-Bus Introspection',0
		align 4
aIdTimestamp_1	db 'id,timestamp',0
aItemactivati_1	db 'ItemActivationRequested(int,uint)',0
aUpdatedpropsRe	db 'updatedProps,removedProps',0
aItemspropert_1	db 'ItemsPropertiesUpdated(DBusMenuItemList,DBusMenuItemKeysList)',0
aRevisionPare_1	db 'revision,parent',0
aLayoutupdate_0	db 'LayoutUpdated(uint,int)',0
aBool_0		db 'bool',0
aId_0		db 'id',0
aAbouttoshowI_0	db 'AboutToShow(int)',0
aIdEventidDat_0	db 'id,eventId,data,timestamp',0
aEventIntQstr_0	db 'Event(int,QString,QDBusVariant,uint)',0
aDbusmenuitem_2	db 'DBusMenuItemList',0
aIdsPropertyn_0	db 'ids,propertyNames',0
aGetgroupprop_0	db 'GetGroupProperties(QList<int>,QStringList)',0
aUint_0		db 'uint',0
aParentidRecu_0	db 'parentId,recursionDepth,propertyNames,layout',0
aGetlayoutInt_0	db 'GetLayout(int,int,QStringList,DBusMenuLayoutItem&)',0
aQdbusvariant_2	db 'QDBusVariant',0
aIdName		db 'id,name',0
aGetpropertyI_0	db 'GetProperty(int,QString)',0
aQstring_0	db 'QString',0
aStatus_2	db 'Status',0
aVersion_1	db 'Version',0
		align 10h
dword_6FFF82E0	dd 6, 0			; DATA XREF: .data:6FFEE048o
		dd 2, 0Eh, 8, 12h, 2, 3Ah, 5 dup(0)
		dd 3, 27h, 10h,	29E3h, 37h, 2A05h, 29F8h, 2 dup(29F7h)
		dd 5, 2A41h, 2A27h, 2 dup(29F7h), 5, 2A8Fh, 2A7Fh, 2 dup(29F7h)
		dd 5, 2AAFh, 2AACh, 2AA7h, 29F7h, 0Ah, 2ADAh, 2AC0h, 2 dup(29F7h)
		dd 0Ah,	2B22h, 2B10h, 2AFFh, 29F7h, 0Ah, 2B7Fh,	2B52h
		dd 2B4Dh, 29F7h, 0Ah, 2BC7h, 2BBFh, 2BB2h, 29F7h, 0Ah
		dd 2BE8h, 2BE0h, 0A095001h, 2BEFh, 2B4Dh, 3095001h, 8 dup(0)
off_6FFF8400	dd offset loc_6FFDF5C7	; DATA XREF: sub_6FFDF580:loc_6FFDF5C0r
		dd offset loc_6FFDF662	; jump table for switch	statement
		dd offset loc_6FFDF6A0
		dd offset loc_6FFDF5C7
		dd offset loc_6FFDF610
		dd offset loc_6FFDF5B7
		dd offset loc_6FFDF5B7
		dd offset loc_6FFDF5B7
		dd offset loc_6FFDF5B7
		dd offset loc_6FFDF617
		dd offset loc_6FFDF691
		dd offset loc_6FFDF5C7
		dd offset loc_6FFDF610
aStdException	db 'std::exception',0   ; DATA XREF: sub_6FFEAC30o
aStdBad_excepti	db 'std::bad_exception',0 ; DATA XREF: sub_6FFEAC10o
		align 4
a__gnu_cxx__con	db '__gnu_cxx::__concurrence_lock_error',0 ; DATA XREF: sub_6FFEABF0o
; a__gnu_cxx(char)
a__gnu_cxx__c_0	db '__gnu_cxx::__concurrence_unlock_error',0 ; DATA XREF: sub_6FFEAC00o
		align 4
aStdBad_alloc	db 'std::bad_alloc',0   ; DATA XREF: sub_6FFEAC20o
		align 4
aPureVirtualMet	db 'pure virtual method called',0Ah,0 ; DATA XREF: sub_6FFEC100+Bo
aTerminateCalle	db 'terminate called recursively',0Ah,0 ; DATA XREF: sub_6FFEA2D0+4Do
		align 10h
aTerminateCal_0	db 'terminate called after throwing an instance of ',27h,0
					; DATA XREF: sub_6FFEA2D0+CAo
asc_6FFF8521	db 27h,0Ah,0		; DATA XREF: sub_6FFEA2D0+118o
aWhat		db '  what():  ',0      ; DATA XREF: sub_6FFEA47D+82o
aTerminateCal_1	db 'terminate called without an active exception',0Ah,0
					; DATA XREF: sub_6FFEA2D0+17Ao
		align 10h
off_6FFF8560	dd offset loc_6FFD66E7,	offset loc_6FFD6730, offset loc_6FFD6730
					; DATA XREF: sub_6FFD66D0:loc_6FFD6700r
		dd offset loc_6FFD6730,	offset loc_6FFD6730, offset loc_6FFD66E7 ; jump	table for switch statement
		dd offset loc_6FFD66E7,	offset loc_6FFD66E7, offset loc_6FFD66E7
		dd offset loc_6FFD6734,	offset loc_6FFD6734, offset loc_6FFD6730
		dd offset loc_6FFD6734,	offset loc_6FFD6734, offset loc_6FFD6734
		dd offset loc_6FFD6734,	offset loc_6FFD6734, offset loc_6FFD6734
		dd offset loc_6FFD6734,	offset loc_6FFD6734, offset loc_6FFD6734
		dd offset loc_6FFD6734,	offset loc_6FFD66E7, offset loc_6FFD670B
		dd offset loc_6FFD670B,	offset loc_6FFD670B, offset loc_6FFD670B
		dd offset loc_6FFD670B,	offset loc_6FFD670B, offset loc_6FFD6730
		dd offset loc_6FFD6734,	offset loc_6FFD6734, offset loc_6FFD6734
		dd offset loc_6FFD6734,	offset loc_6FFD6734, offset loc_6FFD66E7
		dd offset loc_6FFD6734,	offset loc_6FFD670B, offset loc_6FFD6707
		dd offset loc_6FFD6730,	offset loc_6FFD66E7, offset loc_6FFD670B
		dd offset loc_6FFD670B,	offset loc_6FFD66E7, offset loc_6FFD66E7
		dd offset loc_6FFD6734,	offset loc_6FFD6730, offset loc_6FFD6730
		dd offset loc_6FFD6730,	offset loc_6FFD6730, offset loc_6FFD6730
		dd offset loc_6FFD6730,	offset loc_6FFD6730, offset loc_6FFD6730
		dd offset loc_6FFD6734,	offset loc_6FFD6730, offset loc_6FFD66E7
		dd offset loc_6FFD6734,	offset loc_6FFD6734, offset loc_6FFD6734
		dd offset loc_6FFD6734
off_6FFF8654	dd offset loc_6FFD6BC7,	offset loc_6FFD6BB2, offset loc_6FFD6BB2
					; DATA XREF: sub_6FFD6BA0+32r
		dd offset loc_6FFD6BB2,	offset loc_6FFD6BB2, offset loc_6FFD6BE0 ; jump	table for switch statement
		dd offset loc_6FFD6BC7,	offset loc_6FFD6BC0, offset loc_6FFD6BC0
		dd offset loc_6FFD6BB2,	offset loc_6FFD6BB2, offset loc_6FFD6BB2
		dd offset loc_6FFD6BB2,	offset loc_6FFD6BB2, offset loc_6FFD6BB2
		dd offset loc_6FFD6BB2,	offset loc_6FFD6BB2, offset loc_6FFD6BB2
		dd offset loc_6FFD6BB2,	offset loc_6FFD6BB2, offset loc_6FFD6BB2
		dd offset loc_6FFD6BB2,	offset loc_6FFD6BC7, offset loc_6FFD6BB2
		dd offset loc_6FFD6BB2,	offset loc_6FFD6BB2, offset loc_6FFD6BB2
		dd offset loc_6FFD6BB2,	offset loc_6FFD6BB2, offset loc_6FFD6BB2
		dd offset loc_6FFD6BB2,	offset loc_6FFD6BB2, offset loc_6FFD6BB2
		dd offset loc_6FFD6BB2,	offset loc_6FFD6BB2, offset loc_6FFD6BC7
		dd offset loc_6FFD6BB2,	offset loc_6FFD6BB2, offset loc_6FFD6BB2
		dd offset loc_6FFD6BB2,	offset loc_6FFD6BB2, offset loc_6FFD6BB2
		dd offset loc_6FFD6BB2,	offset loc_6FFD6BC7, offset loc_6FFD6BC0
		dd offset loc_6FFD6BB2,	offset loc_6FFD6BB2, offset loc_6FFD6BB2
		dd offset loc_6FFD6BB2,	offset loc_6FFD6BB2, offset loc_6FFD6BB2
		dd offset loc_6FFD6BB2,	offset loc_6FFD6BB2, offset loc_6FFD6BB2
		dd offset loc_6FFD6BB2,	offset loc_6FFD6BB2, offset loc_6FFD6BC7
		dd offset loc_6FFD6BB2,	offset loc_6FFD6BB2, offset loc_6FFD6BB2
		dd offset loc_6FFD6BC7
a_global_	db '_GLOBAL_',0         ; DATA XREF: sub_6FFD6C50+42o
					; sub_6FFD9FB0:loc_6FFD9FD3o
aAnonymousNames	db '(anonymous namespace)',0 ; DATA XREF: sub_6FFD6C50+B4o
aSt		db 'st',0               ; DATA XREF: sub_6FFD6D20+174o
					; .rdata:6FFF98A0o
aCl		db 'cl',0               ; DATA XREF: sub_6FFD6D20+2B5o
					; sub_6FFD90B0+55Ao ...
		align 10h
off_6FFF8770	dd offset loc_6FFD70F8,	offset loc_6FFD70F8, offset loc_6FFD70F8
					; DATA XREF: sub_6FFD7060+4Br
		dd offset loc_6FFD70F8,	offset loc_6FFD70F8, offset loc_6FFD70F8 ; jump	table for switch statement
		dd offset loc_6FFD70F8,	offset loc_6FFD70F8, offset loc_6FFD70F8
		dd offset loc_6FFD70F8,	offset loc_6FFD7092, offset loc_6FFD7092
		dd offset loc_6FFD7092,	offset loc_6FFD7092, offset loc_6FFD7092
		dd offset loc_6FFD7092,	offset loc_6FFD7092, offset loc_6FFD7395
		dd offset loc_6FFD7092,	offset loc_6FFD7110, offset loc_6FFD7138
		dd offset loc_6FFD7092,	offset loc_6FFD7400, offset loc_6FFD7165
		dd offset loc_6FFD7092,	offset loc_6FFD7092, offset loc_6FFD7092
		dd offset loc_6FFD7092,	offset loc_6FFD7092, offset loc_6FFD7363
		dd offset loc_6FFD70F8,	offset loc_6FFD7190, offset loc_6FFD71C0
		dd offset loc_6FFD7092,	offset loc_6FFD71F0, offset loc_6FFD7220
		dd offset loc_6FFD7277,	offset loc_6FFD72D0, offset loc_6FFD7092
		dd offset loc_6FFD7092,	offset loc_6FFD7092, offset loc_6FFD7092
		dd offset loc_6FFD70F8,	offset loc_6FFD7092, offset loc_6FFD7092
		dd offset loc_6FFD7092,	offset loc_6FFD7092, offset loc_6FFD7092
		dd offset loc_6FFD7092,	offset loc_6FFD7300, offset loc_6FFD7300
		dd offset loc_6FFD7300,	offset loc_6FFD7300, offset loc_6FFD7300
		dd offset loc_6FFD7300,	offset loc_6FFD7300, offset loc_6FFD7300
		dd offset loc_6FFD7300,	offset loc_6FFD7300, offset loc_6FFD7092
		dd offset loc_6FFD7300,	offset loc_6FFD7300, offset loc_6FFD7300
		dd offset loc_6FFD7300,	offset loc_6FFD7092, offset loc_6FFD7092
		dd offset loc_6FFD7092,	offset loc_6FFD7300, offset loc_6FFD7300
		dd offset loc_6FFD7338,	offset loc_6FFD7300, offset loc_6FFD7300
		dd offset loc_6FFD7300,	offset loc_6FFD7300, offset loc_6FFD7300
off_6FFF889C	dd offset loc_6FFD75C6	; DATA XREF: sub_6FFD7060+FEr
		dd offset loc_6FFD7092	; jump table for switch	statement
		dd offset loc_6FFD7092
		dd offset loc_6FFD7092
		dd offset loc_6FFD7092
		dd offset loc_6FFD7092
		dd offset loc_6FFD7092
		dd offset loc_6FFD7092
		dd offset loc_6FFD7092
		dd offset loc_6FFD7092
		dd offset loc_6FFD7092
		dd offset loc_6FFD7092
		dd offset loc_6FFD7092
		dd offset loc_6FFD7092
		dd offset loc_6FFD757C
		dd offset loc_6FFD7092
		dd offset loc_6FFD7092
		dd offset loc_6FFD7092
		dd offset loc_6FFD7092
		dd offset loc_6FFD7092
		dd offset loc_6FFD7092
		dd offset loc_6FFD7092
		dd offset loc_6FFD7092
		dd offset loc_6FFD7092
		dd offset loc_6FFD7092
		dd offset loc_6FFD7092
		dd offset loc_6FFD7092
		dd offset loc_6FFD7092
		dd offset loc_6FFD7092
		dd offset loc_6FFD7092
		dd offset loc_6FFD7542
		dd offset loc_6FFD7508
		dd offset loc_6FFD7687
		dd offset loc_6FFD7092
		dd offset loc_6FFD764D
		dd offset loc_6FFD74D1
		dd offset loc_6FFD7092
		dd offset loc_6FFD7092
		dd offset loc_6FFD7092
		dd offset loc_6FFD7092
		dd offset loc_6FFD7092
		dd offset loc_6FFD7092
		dd offset loc_6FFD74B0
		dd offset loc_6FFD7092
		dd offset loc_6FFD7092
		dd offset loc_6FFD7470
		dd offset loc_6FFD757C
aStringLiteral	db 'string literal',0   ; DATA XREF: sub_6FFD7DF0+208o
aStd		db 'std',0              ; DATA XREF: sub_6FFD7DF0+E6o
					; .rdata:6FFF93A4o ...
		align 4
off_6FFF896C	dd offset loc_6FFD846E,	offset loc_6FFD81EF, offset loc_6FFD81EF
					; DATA XREF: sub_6FFD8100+199r
		dd offset loc_6FFD844B,	offset loc_6FFD81EF, offset loc_6FFD81EF ; jump	table for switch statement
		dd offset loc_6FFD8428,	offset loc_6FFD8405, offset loc_6FFD81EF
		dd offset loc_6FFD81EF,	offset loc_6FFD81EF, offset loc_6FFD81EF
		dd offset loc_6FFD81EF,	offset loc_6FFD81EF, offset loc_6FFD81EF
		dd offset loc_6FFD81EF,	offset loc_6FFD83E2, offset loc_6FFD83B9
		dd offset loc_6FFD81EF,	offset loc_6FFD8390, offset loc_6FFD81EF
		dd offset loc_6FFD81EF,	offset loc_6FFD81EF, offset loc_6FFD81EF
		dd offset loc_6FFD81EF,	offset loc_6FFD81EF, offset loc_6FFD81EF
		dd offset loc_6FFD81EF,	offset loc_6FFD81EF, offset loc_6FFD81EF
		dd offset loc_6FFD81EF,	offset loc_6FFD81EF, offset loc_6FFD8344
		dd offset loc_6FFD81EF,	offset loc_6FFD81EF, offset loc_6FFD81EF
		dd offset loc_6FFD81EF,	offset loc_6FFD830B, offset loc_6FFD81EF
		dd offset loc_6FFD81EF,	offset loc_6FFD81EF, offset loc_6FFD81EF
		dd offset loc_6FFD81EF,	offset loc_6FFD81EF, offset loc_6FFD81EF
		dd offset loc_6FFD81EF,	offset loc_6FFD81EF, offset loc_6FFD81EF
		dd offset loc_6FFD81EF,	offset loc_6FFD81EF, offset loc_6FFD81EF
		dd offset loc_6FFD82D0
off_6FFF8A3C	dd offset loc_6FFD82AC	; DATA XREF: sub_6FFD8100+1B8r
		dd offset loc_6FFD82C0	; jump table for switch	statement
		dd offset loc_6FFD82C0
		dd offset loc_6FFD82AC
		dd offset loc_6FFD82AC
		dd offset loc_6FFD82AC
		dd offset loc_6FFD82AC
		dd offset loc_6FFD816D
		dd offset loc_6FFD816D
		dd offset loc_6FFD82AC
		dd offset loc_6FFD82AC
		dd offset loc_6FFD82AC
		dd offset loc_6FFD82AC
		dd offset loc_6FFD82AC
		dd offset loc_6FFD82AC
		dd offset loc_6FFD82AC
		dd offset loc_6FFD82AC
		dd offset loc_6FFD82AC
		dd offset loc_6FFD82AC
		dd offset loc_6FFD82AC
		dd offset loc_6FFD82AC
		dd offset loc_6FFD82AC
		dd offset loc_6FFD82AC
		dd offset loc_6FFD82AC
		dd offset loc_6FFD82AC
		dd offset loc_6FFD82AC
		dd offset loc_6FFD82AC
		dd offset loc_6FFD82AC
		dd offset loc_6FFD82AC
		dd offset loc_6FFD82AC
		dd offset loc_6FFD82AC
		dd offset loc_6FFD82AC
		dd offset loc_6FFD82AC
		dd offset loc_6FFD82AC
		dd offset loc_6FFD82AC
		dd offset loc_6FFD82AC
		dd offset loc_6FFD82AC
		dd offset loc_6FFD82AC
		dd offset loc_6FFD82AC
		dd offset loc_6FFD82AC
		dd offset loc_6FFD82AC
		dd offset loc_6FFD82AC
		dd offset loc_6FFD82AC
		dd offset loc_6FFD82AC
		dd offset loc_6FFD82AC
		dd offset loc_6FFD816D
byte_6FFF8AF4	db 2 dup(3Ah), 0	; DATA XREF: sub_6FFD8C50+DBo
					; sub_6FFD90B0+1DFo
aJarray		db 'JArray',0           ; DATA XREF: sub_6FFD90B0+DECo
asc_6FFF8AFE	db '[]',0               ; DATA XREF: sub_6FFD90B0+E08o
					; .rdata:6FFF96D4o
aVtableFor	db 'vtable for ',0      ; DATA XREF: sub_6FFD90B0:loc_6FFD911Fo
aVttFor		db 'VTT for ',0         ; DATA XREF: sub_6FFD90B0:loc_6FFD9182o
aConstructionVt	db 'construction vtable for ',0 ; DATA XREF: sub_6FFD90B0:loc_6FFD9137o
aIn		db '-in-',0             ; DATA XREF: sub_6FFD90B0+9Do
aTypeinfoFor	db 'typeinfo for ',0    ; DATA XREF: sub_6FFD90B0:loc_6FFD9189o
aTypeinfoNameFo	db 'typeinfo name for ',0 ; DATA XREF: sub_6FFD90B0:loc_6FFD9190o
aTypeinfoFnFor	db 'typeinfo fn for ',0 ; DATA XREF: sub_6FFD90B0:loc_6FFD9197o
aNonVirtualThun	db 'non-virtual thunk to ',0 ; DATA XREF: sub_6FFD90B0:loc_6FFD919Eo
aVirtualThunkTo	db 'virtual thunk to ',0 ; DATA XREF: sub_6FFD90B0:loc_6FFD9B0Do
aCovariantRetur	db 'covariant return thunk to ',0 ; DATA XREF: sub_6FFD90B0:loc_6FFD9B17o
aJavaClassFor	db 'java Class for ',0  ; DATA XREF: sub_6FFD90B0:loc_6FFD9464o
aGuardVariableF	db 'guard variable for ',0 ; DATA XREF: sub_6FFD90B0:loc_6FFD946Eo
aReferenceTempo	db 'reference temporary for ',0 ; DATA XREF: sub_6FFD90B0:loc_6FFD98B8o
aHiddenAliasFor	db 'hidden alias for ',0 ; DATA XREF: sub_6FFD90B0:loc_6FFD98C2o
asc_6FFF8BF8	db '::*',0              ; DATA XREF: sub_6FFD90B0+73Bo
					; sub_6FFDA3F0+DFo
a_sat		db '_Sat ',0            ; DATA XREF: sub_6FFD90B0:loc_6FFD9C29o
a_accum		db '_Accum',0           ; DATA XREF: sub_6FFD90B0+3FDo
a_fract		db '_Fract',0           ; DATA XREF: sub_6FFD90B0:loc_6FFD9C18o
asc_6FFF8C10	db ', ',0               ; DATA XREF: sub_6FFD90B0+170o
					; sub_6FFD90B0:loc_6FFD94E8o
aOperator_0	db 'operator',0         ; DATA XREF: sub_6FFD90B0:loc_6FFD9870o
aOperator	db 'operator ',0        ; DATA XREF: sub_6FFD90B0+4D8o
					; sub_6FFD90B0:loc_6FFD98AEo
aIx		db 'ix',0               ; DATA XREF: sub_6FFD90B0+531o
					; .rdata:6FFF96D0o
asc_6FFF8C29	db ' : ',0              ; DATA XREF: sub_6FFD90B0+9A8o
aUl		db 'ul',0               ; DATA XREF: sub_6FFD90B0:loc_6FFD9DA1o
aLl		db 'll',0               ; DATA XREF: sub_6FFD90B0:loc_6FFD9D90o
aUll		db 'ull',0              ; DATA XREF: sub_6FFD90B0:loc_6FFD9DD6o
aFalse		db 'false',0            ; DATA XREF: sub_6FFD90B0:loc_6FFD9F9Eo
aTrue		db 'true',0             ; DATA XREF: sub_6FFD90B0+C9Bo
aJavaResource	db 'java resource ',0   ; DATA XREF: sub_6FFD90B0:loc_6FFD9B3Eo
aDecltype	db 'decltype (',0       ; DATA XREF: sub_6FFD90B0+A9Ao
a___		db '...',0              ; DATA XREF: sub_6FFD90B0+E89o
					; .rdata:6FFF9194o ...
aParm		db 'parm#',0            ; DATA XREF: sub_6FFD90B0:loc_6FFD983Bo
; char aLd[]
aLd		db '%ld',0              ; DATA XREF: sub_6FFD90B0+79Eo
aGlobalConstruc	db 'global constructors keyed to ',0 ; DATA XREF: sub_6FFD90B0:loc_6FFD9B03o
aGlobalDestruct	db 'global destructors keyed to ',0 ; DATA XREF: sub_6FFD90B0:loc_6FFD98CCo
		align 4
off_6FFF8CA8	dd offset loc_6FFD922E,	offset loc_6FFD927C, offset loc_6FFD927C
					; DATA XREF: sub_6FFD90B0:loc_6FFD9118r
		dd offset loc_6FFD92A0,	offset loc_6FFD9959, offset loc_6FFD99D7 ; jump	table for switch statement
		dd offset loc_6FFD983B,	offset loc_6FFD9159, offset loc_6FFD9174
		dd offset loc_6FFD911F,	offset loc_6FFD9182, offset loc_6FFD9137
		dd offset loc_6FFD9189,	offset loc_6FFD9190, offset loc_6FFD9197
		dd offset loc_6FFD919E,	offset loc_6FFD9B0D, offset loc_6FFD9B17
		dd offset loc_6FFD9464,	offset loc_6FFD946E, offset loc_6FFD98B8
		dd offset loc_6FFD98C2,	offset loc_6FFD9165, offset loc_6FFD97FC
		dd offset loc_6FFD97FC,	offset loc_6FFD97FC, offset loc_6FFD9532
		dd offset loc_6FFD9532,	offset loc_6FFD9532, offset loc_6FFD9532
		dd offset loc_6FFD9532,	offset loc_6FFD9532, offset loc_6FFD9532
		dd offset loc_6FFD9532,	offset loc_6FFD9532, offset loc_6FFD9B21
		dd offset loc_6FFD912B,	offset loc_6FFD9A77, offset loc_6FFD966F
		dd offset loc_6FFD9795,	offset loc_6FFD9478, offset loc_6FFD94BE
		dd offset loc_6FFD94BE,	offset loc_6FFD9870, offset loc_6FFD98AE
		dd offset loc_6FFD9586,	offset loc_6FFD95A0, offset loc_6FFD95C4
		dd offset loc_6FFD90EB,	offset loc_6FFD9A17, offset loc_6FFD90EB
		dd offset loc_6FFD90EB,	offset loc_6FFD98D6, offset loc_6FFD98D6
		dd offset loc_6FFD9B3E,	offset loc_6FFD9B63, offset loc_6FFD965F
		dd offset loc_6FFD9B48,	offset loc_6FFD9B03, offset loc_6FFD98CC
		dd offset loc_6FFD91A8
off_6FFF8D9C	dd offset loc_6FFD9DC5	; DATA XREF: sub_6FFD90B0+CD9r
		dd offset loc_6FFD9DB2	; jump table for switch	statement
		dd offset loc_6FFD9DA1
		dd offset loc_6FFD9D90
		dd offset loc_6FFD9DD6
aRestrict	db ' restrict',0        ; DATA XREF: sub_6FFDA3F0:loc_6FFDA430o
aVolatile	db ' volatile',0        ; DATA XREF: sub_6FFDA3F0:loc_6FFDA447o
aConst		db ' const',0           ; DATA XREF: sub_6FFDA3F0:loc_6FFDA450o
asc_6FFF8DCB	db '&&',0               ; DATA XREF: sub_6FFDA3F0:loc_6FFDA497o
					; .rdata:6FFF95C4o
aComplex	db 'complex ',0         ; DATA XREF: sub_6FFDA3F0:loc_6FFDA4A0o
aImaginary	db 'imaginary ',0       ; DATA XREF: sub_6FFDA3F0:loc_6FFDA4A7o
		align 4
off_6FFF8DE4	dd offset loc_6FFDA427	; DATA XREF: sub_6FFDA3F0:loc_6FFDA420r
		dd offset loc_6FFDA409	; jump table for switch	statement
		dd offset loc_6FFDA409
		dd offset loc_6FFDA409
		dd offset loc_6FFDA409
		dd offset loc_6FFDA409
		dd offset loc_6FFDA409
		dd offset loc_6FFDA409
		dd offset loc_6FFDA409
		dd offset loc_6FFDA409
		dd offset loc_6FFDA409
		dd offset loc_6FFDA409
		dd offset loc_6FFDA409
		dd offset loc_6FFDA409
		dd offset loc_6FFDA409
		dd offset loc_6FFDA409
		dd offset loc_6FFDA409
		dd offset loc_6FFDA409
		dd offset loc_6FFDA409
		dd offset loc_6FFDA409
		dd offset loc_6FFDA430
		dd offset loc_6FFDA447
		dd offset loc_6FFDA450
		dd offset loc_6FFDA430
		dd offset loc_6FFDA447
		dd offset loc_6FFDA450
		dd offset loc_6FFDA457
		dd offset loc_6FFDA468
		dd offset loc_6FFDA480
		dd offset loc_6FFDA497
		dd offset loc_6FFDA4A0
		dd offset loc_6FFDA4A7
		dd offset loc_6FFDA409
		dd offset loc_6FFDA409
		dd offset loc_6FFDA409
		dd offset loc_6FFDA409
		dd offset loc_6FFDA4B0
aSignedChar	db 'signed char',0      ; DATA XREF: .rdata:6FFF8FA0o
					; .rdata:6FFF8FA8o
aBool_1		db 'bool',0             ; DATA XREF: .rdata:6FFF8FB4o
aBoolean	db 'boolean',0          ; DATA XREF: .rdata:6FFF8FBCo
aChar		db 'char',0             ; DATA XREF: .rdata:6FFF8FC8o
					; .rdata:6FFF9160o
aByte		db 'byte',0             ; DATA XREF: .rdata:6FFF8FD0o
aDouble		db 'double',0           ; DATA XREF: .rdata:6FFF8FDCo
					; .rdata:6FFF8FE4o
aLongDouble	db 'long double',0      ; DATA XREF: .rdata:6FFF8FF0o
					; .rdata:6FFF8FF8o
aFloat		db 'float',0            ; DATA XREF: .rdata:6FFF9004o
					; .rdata:6FFF900Co
a__float128	db '__float128',0       ; DATA XREF: .rdata:6FFF9018o
					; .rdata:6FFF9020o
aUnsignedChar	db 'unsigned char',0    ; DATA XREF: .rdata:6FFF902Co
					; .rdata:6FFF9034o
aInt		db 'int',0              ; DATA XREF: .rdata:off_6FFF9040o
					; .rdata:6FFF9048o
aUnsignedInt	db 'unsigned int',0     ; DATA XREF: .rdata:6FFF9054o
aUnsigned	db 'unsigned',0         ; DATA XREF: .rdata:6FFF905Co
aLong		db 'long',0             ; DATA XREF: .rdata:6FFF907Co
					; .rdata:6FFF9084o ...
aUnsignedLong	db 'unsigned long',0    ; DATA XREF: .rdata:6FFF9090o
					; .rdata:6FFF9098o
a__int128	db '__int128',0         ; DATA XREF: .rdata:6FFF90A4o
					; .rdata:6FFF90ACo
aUnsigned__int1	db 'unsigned __int128',0 ; DATA XREF: .rdata:6FFF90B8o
					; .rdata:6FFF90C0o
aShort		db 'short',0            ; DATA XREF: .rdata:6FFF9108o
					; .rdata:6FFF9110o
aUnsignedShort	db 'unsigned short',0   ; DATA XREF: .rdata:6FFF911Co
					; .rdata:6FFF9124o
aVoid		db 'void',0             ; DATA XREF: .rdata:6FFF9144o
					; .rdata:6FFF914Co
aWchar_t	db 'wchar_t',0          ; DATA XREF: .rdata:6FFF9158o
aLongLong	db 'long long',0        ; DATA XREF: .rdata:6FFF916Co
aUnsignedLongLo	db 'unsigned long long',0 ; DATA XREF: .rdata:6FFF9180o
					; .rdata:6FFF9188o
aDecimal32	db 'decimal32',0        ; DATA XREF: .rdata:off_6FFF91A8o
					; .rdata:6FFF91B0o
aDecimal64	db 'decimal64',0        ; DATA XREF: .rdata:off_6FFF91BCo
					; .rdata:6FFF91C4o
aDecimal128	db 'decimal128',0       ; DATA XREF: .rdata:off_6FFF91D0o
					; .rdata:6FFF91D8o
aHalf		db 'half',0             ; DATA XREF: .rdata:off_6FFF91E4o
					; .rdata:6FFF91ECo
aChar16_t	db 'char16_t',0         ; DATA XREF: .rdata:off_6FFF91F8o
					; .rdata:6FFF9200o
aChar32_t	db 'char32_t',0         ; DATA XREF: .rdata:off_6FFF920Co
					; .rdata:6FFF9214o
		align 20h
		dd offset aSignedChar	; "signed char"
		dd 0Bh
		dd offset aSignedChar	; "signed char"
		dd 0Bh,	0
		dd offset aBool_1	; "bool"
		dd 4
		dd offset aBoolean	; "boolean"
		dd 2 dup(7)
		dd offset aChar		; "char"
		dd 4
		dd offset aByte		; "byte"
		dd 4, 0
		dd offset aDouble	; "double"
		dd 6
		dd offset aDouble	; "double"
		dd 6, 8
		dd offset aLongDouble	; "long	double"
		dd 0Bh
		dd offset aLongDouble	; "long	double"
		dd 0Bh,	8
		dd offset aFloat	; "float"
		dd 5
		dd offset aFloat	; "float"
		dd 5, 8
		dd offset a__float128	; "__float128"
		dd 0Ah
		dd offset a__float128	; "__float128"
		dd 0Ah,	8
		dd offset aUnsignedChar	; "unsigned char"
		dd 0Dh
		dd offset aUnsignedChar	; "unsigned char"
		dd 0Dh,	0
off_6FFF9040	dd offset aInt		; DATA XREF: sub_6FFD90B0+3D6o
					; "int"
		dd 3
		dd offset aInt		; "int"
		dd 3, 1
		dd offset aUnsignedInt	; "unsigned int"
		dd 0Ch
		dd offset aUnsigned	; "unsigned"
		dd 8, 2, 5 dup(0)
		dd offset aLong		; "long"
		dd 4
		dd offset aLong		; "long"
		dd 4, 3
		dd offset aUnsignedLong	; "unsigned long"
		dd 0Dh
		dd offset aUnsignedLong	; "unsigned long"
		dd 0Dh,	4
		dd offset a__int128	; "__int128"
		dd 8
		dd offset a__int128	; "__int128"
		dd 8, 0
		dd offset aUnsigned__int1 ; "unsigned __int128"
		dd 11h
		dd offset aUnsigned__int1 ; "unsigned __int128"
		dd 11h,	10h dup(0)
		dd offset aShort	; "short"
		dd 5
		dd offset aShort	; "short"
		dd 5, 0
		dd offset aUnsignedShort ; "unsigned short"
		dd 0Eh
		dd offset aUnsignedShort ; "unsigned short"
		dd 0Eh,	6 dup(0)
		dd offset aVoid		; "void"
		dd 4
		dd offset aVoid		; "void"
		dd 4, 9
		dd offset aWchar_t	; "wchar_t"
		dd 7
		dd offset aChar		; "char"
		dd 4, 0
		dd offset aLongLong	; "long	long"
		dd 9
		dd offset aLong		; "long"
		dd 4, 5
		dd offset aUnsignedLongLo ; "unsigned long long"
		dd 12h
		dd offset aUnsignedLongLo ; "unsigned long long"
		dd 12h,	6
		dd offset a___		; "..."
		dd 3
		dd offset a___		; "..."
		dd 3, 0
off_6FFF91A8	dd offset aDecimal32	; DATA XREF: sub_6FFD7060+64Co
					; sub_6FFD7060+651o
					; "decimal32"
		dd 9
		dd offset aDecimal32	; "decimal32"
		dd 9, 0
off_6FFF91BC	dd offset aDecimal64	; DATA XREF: sub_6FFD7060+50Bo
					; sub_6FFD7060+510o
					; "decimal64"
		dd 9
		dd offset aDecimal64	; "decimal64"
		dd 9, 0
off_6FFF91D0	dd offset aDecimal128	; DATA XREF: sub_6FFD7060+4D1o
					; sub_6FFD7060+4D6o
					; "decimal128"
		dd 0Ah
		dd offset aDecimal128	; "decimal128"
		dd 0Ah,	0
off_6FFF91E4	dd offset aHalf		; DATA XREF: sub_6FFD7060+616o
					; sub_6FFD7060+61Bo
					; "half"
		dd 4
		dd offset aHalf		; "half"
		dd 4, 8
off_6FFF91F8	dd offset aChar16_t	; DATA XREF: sub_6FFD7060+439o
					; sub_6FFD7060+43Eo
					; "char16_t"
		dd 8
		dd offset aChar16_t	; "char16_t"
		dd 8, 0
off_6FFF920C	dd offset aChar32_t	; DATA XREF: sub_6FFD7060+49Ao
					; sub_6FFD7060+49Fo
					; "char32_t"
		dd 8
		dd offset aChar32_t	; "char32_t"
		dd 8, 0
aStdAllocator	db 'std::allocator',0   ; DATA XREF: .rdata:6FFF93C0o
					; .rdata:6FFF93C8o
aAllocator	db 'allocator',0        ; DATA XREF: .rdata:6FFF93D0o
aStdBasic_strin	db 'std::basic_string',0 ; DATA XREF: .rdata:6FFF93DCo
					; .rdata:6FFF93E4o
aBasic_string	db 'basic_string',0     ; DATA XREF: .rdata:6FFF93ECo
					; .rdata:6FFF9408o
aStdString	db 'std::string',0      ; DATA XREF: .rdata:6FFF93F8o
aStdBasic_str_0	db 'std::basic_string<char, std::char_traits<char>, std::allocator<ch'
					; DATA XREF: .rdata:6FFF9400o
		db 'ar> >',0
aStdIstream	db 'std::istream',0     ; DATA XREF: .rdata:6FFF9414o
aStdBasic_istre	db 'std::basic_istream<char, std::char_traits<char> >',0
					; DATA XREF: .rdata:6FFF941Co
aBasic_istream	db 'basic_istream',0    ; DATA XREF: .rdata:6FFF9424o
aStdOstream	db 'std::ostream',0     ; DATA XREF: .rdata:6FFF9430o
		align 4
aStdBasic_ostre	db 'std::basic_ostream<char, std::char_traits<char> >',0
					; DATA XREF: .rdata:6FFF9438o
aBasic_ostream	db 'basic_ostream',0    ; DATA XREF: .rdata:6FFF9440o
aStdIostream	db 'std::iostream',0    ; DATA XREF: .rdata:6FFF944Co
		align 4
aStdBasic_iostr	db 'std::basic_iostream<char, std::char_traits<char> >',0
					; DATA XREF: .rdata:6FFF9454o
aBasic_iostream	db 'basic_iostream',0   ; DATA XREF: .rdata:6FFF945Co
		align 10h
aT		db 't',0                ; DATA XREF: sub_6FFD6980+4Ao
					; sub_6FFD6980+55o
		align 4
		dd offset aStd		; "std"
		dd 3
		dd offset aStd		; "std"
		dd 3, 2	dup(0)
		dd 61h
		dd offset aStdAllocator	; "std::allocator"
		dd 0Eh
		dd offset aStdAllocator	; "std::allocator"
		dd 0Eh
		dd offset aAllocator	; "allocator"
		dd 9, 62h
		dd offset aStdBasic_strin ; "std::basic_string"
		dd 11h
		dd offset aStdBasic_strin ; "std::basic_string"
		dd 11h
		dd offset aBasic_string	; "basic_string"
		dd 0Ch,	73h
		dd offset aStdString	; "std::string"
		dd 0Bh
		dd offset aStdBasic_str_0 ; "std::basic_string<char, std::char_trait"...
		dd 46h
		dd offset aBasic_string	; "basic_string"
		dd 0Ch,	69h
		dd offset aStdIstream	; "std::istream"
		dd 0Ch
		dd offset aStdBasic_istre ; "std::basic_istream<char, std::char_trai"...
		dd 31h
		dd offset aBasic_istream ; "basic_istream"
		dd 0Dh,	6Fh
		dd offset aStdOstream	; "std::ostream"
		dd 0Ch
		dd offset aStdBasic_ostre ; "std::basic_ostream<char, std::char_trai"...
		dd 31h
		dd offset aBasic_ostream ; "basic_ostream"
		dd 0Dh,	64h
		dd offset aStdIostream	; "std::iostream"
		dd 0Dh
		dd offset aStdBasic_iostr ; "std::basic_iostream<char, std::char_tra"...
		dd 32h
		dd offset aBasic_iostream ; "basic_iostream"
		dd 0Eh
dword_6FFF9464	dd 26004E61h, 5361003Dh, 61003D00h, 64610061h, 61002600h
					; DATA XREF: sub_6FFD6980:loc_6FFD69C5o
					; sub_6FFD6980+6Co ...
		dd 2928006Eh, 6D6300h, 6F63002Ch, 64007E00h, 3D2F0056h
		dd 616400h, 656C6564h, 5D5B6574h, 656400h, 6C64002Ah, 6C656400h
		dd 657465h, 2E007464h, 766400h,	4F65002Fh, 3D5E00h, 5E006F65h
		dd 716500h, 67003D3Dh, 3D3E0065h, 746700h, 536C003Eh, 3D3C3C00h
		dd 656C00h, 6C003D3Ch, 3C3C0073h, 746C00h, 496D003Ch, 3D2D00h
		dd 2A004C6Dh, 696D003Dh, 6D002D00h, 6D6D006Ch, 2D2D00h
		dd 6E00616Eh, 5D5B7765h, 656E00h, 6E003D21h, 746E0067h
		dd 6E002100h, 656E0077h, 526F0077h, 3D7C00h, 7C006F6Fh
		dd 726F007Ch, 70007C00h, 3D2B004Ch, 6C7000h, 6D70002Bh
		dd 2A3E2D00h, 707000h, 70002B2Bh, 74700073h, 3E2D00h, 3F007571h
		dd 4D7200h, 72003D25h, 3E3E0053h, 6D72003Dh, 72002500h
		dd 3E3E0073h, 7A697300h, 20666F65h, 7A7300h, 61007461h
		dd 6E67696Ch, 20666Fh, 7A61h, 6	dup(0)
off_6FFF95A0	dd offset dword_6FFF9464 ; DATA	XREF: sub_6FFD7880+65o
					; sub_6FFD7880+6Br
		dd offset dword_6FFF9464+3
		dd 2 dup(2)
		dd offset dword_6FFF9464+6
		dd offset dword_6FFF9464+9
		dd 1, 2
		dd offset dword_6FFF9464+0Bh
		dd offset asc_6FFF8DCB	; "&&"
		dd 2 dup(2)
		dd offset dword_6FFF9464+0Eh
		dd offset dword_6FFF9464+11h
		dd 2 dup(1)
		dd offset dword_6FFF9464+13h
		dd offset dword_6FFF9464+11h
		dd 1, 2
		dd offset aCl		; "cl"
		dd offset dword_6FFF9464+16h
		dd 2 dup(2)
		dd offset dword_6FFF9464+19h
		dd offset dword_6FFF9464+1Ch
		dd 1, 2
		dd offset dword_6FFF9464+1Eh
		dd offset dword_6FFF9464+21h
		dd 2 dup(1)
		dd offset dword_6FFF9464+23h
		dd offset dword_6FFF9464+26h
		dd 2 dup(2)
		dd offset dword_6FFF9464+29h
		dd offset dword_6FFF9464+2Ch
		dd 8, 1
		dd offset dword_6FFF9464+35h
		dd offset dword_6FFF9464+38h
		dd 2 dup(1)
		dd offset dword_6FFF9464+3Ah
		dd offset dword_6FFF9464+3Dh
		dd 6, 1
		dd offset dword_6FFF9464+44h
		dd offset dword_6FFF9464+47h
		dd 1, 2
		dd offset dword_6FFF9464+49h
		dd offset dword_6FFF9464+4Ch
		dd 1, 2
		dd offset dword_6FFF9464+4Eh
		dd offset dword_6FFF9464+51h
		dd 2 dup(2)
		dd offset dword_6FFF9464+54h
		dd offset dword_6FFF9464+57h
		dd 1, 2
		dd offset dword_6FFF9464+59h
		dd offset dword_6FFF9464+5Ch
		dd 2 dup(2)
		dd offset dword_6FFF9464+5Fh
		dd offset dword_6FFF9464+62h
		dd 2 dup(2)
		dd offset dword_6FFF9464+65h
		dd offset dword_6FFF9464+68h
		dd 1, 2
		dd offset aIx		; "ix"
		dd offset asc_6FFF8AFE	; "[]"
		dd 2 dup(2)
		dd offset dword_6FFF9464+6Ah
		dd offset dword_6FFF9464+6Dh
		dd 3, 2
		dd offset dword_6FFF9464+71h
		dd offset dword_6FFF9464+74h
		dd 2 dup(2)
		dd offset dword_6FFF9464+77h
		dd offset dword_6FFF9464+7Ah
		dd 2 dup(2)
		dd offset dword_6FFF9464+7Dh
		dd offset dword_6FFF9464+80h
		dd 1, 2
		dd offset dword_6FFF9464+82h
		dd offset dword_6FFF9464+85h
		dd 2 dup(2)
		dd offset dword_6FFF9464+88h
		dd offset dword_6FFF9464+8Bh
		dd 2 dup(2)
		dd offset dword_6FFF9464+8Eh
		dd offset dword_6FFF9464+91h
		dd 1, 2
		dd offset dword_6FFF9464+93h
		dd offset dword_6FFF9464+38h
		dd 1, 2
		dd offset dword_6FFF9464+96h
		dd offset dword_6FFF9464+99h
		dd 2, 1
		dd offset dword_6FFF9464+9Ch
		dd offset dword_6FFF9464+9Fh
		dd 5, 1
		dd offset dword_6FFF9464+0A5h
		dd offset dword_6FFF9464+0A8h
		dd 2 dup(2)
		dd offset dword_6FFF9464+0ABh
		dd offset dword_6FFF9464+91h
		dd 2 dup(1)
		dd offset dword_6FFF9464+0AEh
		dd offset dword_6FFF9464+0B1h
		dd 2 dup(1)
		dd offset dword_6FFF9464+0B3h
		dd offset dword_6FFF9464+0B6h
		dd 3, 1
		dd offset dword_6FFF9464+0BAh
		dd offset dword_6FFF9464+0BDh
		dd 2 dup(2)
		dd offset dword_6FFF9464+0C0h
		dd offset dword_6FFF9464+0C3h
		dd 2 dup(2)
		dd offset dword_6FFF9464+0C6h
		dd offset dword_6FFF9464+0C9h
		dd 1, 2
		dd offset dword_6FFF9464+0CBh
		dd offset dword_6FFF9464+0CEh
		dd 2 dup(2)
		dd offset dword_6FFF9464+0D1h
		dd offset dword_6FFF9464+0D4h
		dd 1, 2
		dd offset dword_6FFF9464+0D6h
		dd offset dword_6FFF9464+0D9h
		dd 3, 2
		dd offset dword_6FFF9464+0DDh
		dd offset dword_6FFF9464+0E0h
		dd 2, 1
		dd offset dword_6FFF9464+0E3h
		dd offset dword_6FFF9464+0D4h
		dd 2 dup(1)
		dd offset dword_6FFF9464+0E6h
		dd offset dword_6FFF9464+0E9h
		dd 2 dup(2)
		dd offset dword_6FFF9464+0ECh
		dd offset dword_6FFF9464+0EFh
		dd 1, 3
		dd offset dword_6FFF9464+0F1h
		dd offset dword_6FFF9464+0F4h
		dd 2 dup(2)
		dd offset dword_6FFF9464+0F7h
		dd offset dword_6FFF9464+0FAh
		dd 3, 2
		dd offset dword_6FFF9464+0FEh
		dd offset dword_6FFF9464+101h
		dd 1, 2
		dd offset dword_6FFF9464+103h
		dd offset dword_6FFF9464+106h
		dd 2 dup(2)
		dd offset aSt		; "st"
		dd offset dword_6FFF9464+109h
		dd 7, 1
		dd offset dword_6FFF9464+111h
		dd offset dword_6FFF9464+109h
		dd 7, 1
		dd offset dword_6FFF9464+114h
		dd offset dword_6FFF9464+117h
		dd 8, 1
		dd offset dword_6FFF9464+120h
		dd offset dword_6FFF9464+117h
		dd 8, 1, 8 dup(0)
off_6FFF9900	dd offset TlsCallback_0	; DATA XREF: sub_6FFC1040:loc_6FFC1137r
aMingwW64Runtim	db 'Mingw-w64 runtime failure:',0Ah,0 ; DATA XREF: sub_6FFDAA50+1Do
; char aAddressPHasNoI[]
aAddressPHasNoI	db 'Address %p has no image-section',0 ; DATA XREF: sub_6FFDAAB0+13Ao
; char aVirtualqueryFa[]
aVirtualqueryFa	db '  VirtualQuery failed for %d bytes at address %p',0
					; DATA XREF: sub_6FFDAAB0+126o
					; sub_6FFDAC00+253o
		align 4
; char aUnknownPseud_0[]
aUnknownPseud_0	db '  Unknown pseudo relocation protocol version %d.',0Ah,0
					; DATA XREF: sub_6FFDAC00+267o
		align 4
; char aUnknownPseudoR[]
aUnknownPseudoR	db '  Unknown pseudo relocation bit size %d.',0Ah,0
					; DATA XREF: sub_6FFDAC00+F4o
		align 4
off_6FFF99D4	dd offset dword_6FFFA040 ; DATA	XREF: .text:6FFDAFA8o
		dd offset dword_6FFFA0A0
aMsvcrt_dll:				; DATA XREF: .text:loc_6FFDB6A5o
		unicode	0, <msvcrt.dll>,0
		align 8
off_6FFF99F8	dd offset off_6FFF9F28	; DATA XREF: .rdata:6FFF9D24o
		dd offset a15dbusmenuadap ; "15DbusmenuAdaptor"
		dd offset off_6FFF9A34
off_6FFF9A04	dd offset off_6FFF9F28	; DATA XREF: .rdata:6FFF9D64o
		dd offset a16dbusmenuexpo ; "16DBusMenuExporter"
		dd offset off_6FFF9A40
off_6FFF9A10	dd offset off_6FFF9F28	; DATA XREF: .rdata:6FFF9DA4o
		dd offset a16dbusmenuimpo ; "16DBusMenuImporter"
		dd offset off_6FFF9A40
off_6FFF9A1C	dd offset off_6FFF9F28	; DATA XREF: .rdata:6FFF9DE4o
		dd offset a17actioneventf ; "17ActionEventFilter"
		dd offset off_6FFF9A40
off_6FFF9A28	dd offset off_6FFF9F28	; DATA XREF: .rdata:6FFF9E24o
		dd offset a20dbusmenuexpo ; "20DBusMenuExporterDBus"
		dd offset off_6FFF9A40
off_6FFF9A34	dd offset off_6FFF9F28	; DATA XREF: .rdata:6FFF9A00o
		dd offset a20qdbusabstrac ; "20QDBusAbstractAdaptor"
		dd offset off_6FFF9A40
off_6FFF9A40	dd offset off_6FFF9EC8	; DATA XREF: .rdata:6FFF9A0Co
					; .rdata:6FFF9A18o ...
		dd offset a7qobject	; "7QObject"
off_6FFF9A48	dd offset off_6FFF9F28	; DATA XREF: .rdata:6FFF9E64o
		dd offset a8dbusmenu	; "8DBusMenu"
		dd offset off_6FFF9A40
off_6FFF9A54	dd offset off_6FFF9EC8	; DATA XREF: sub_6FFEC1F0+351o
					; .rdata:6FFF9EA4o
		dd offset aN10__cxxabiv11 ; "N10__cxxabiv115__forced_unwindE"
off_6FFF9A5C	dd offset off_6FFF9F28	; DATA XREF: .rdata:6FFF9A78o
					; .rdata:6FFF9EC4o
		dd offset aN10__cxxabiv_0 ; "N10__cxxabiv117__class_type_infoE"
		dd offset off_6FFF9AB4
off_6FFF9A68	dd offset off_6FFF9EC8	; DATA XREF: sub_6FFEC1F0+547o
					; .rdata:6FFF9F04o
		dd offset aN10__cxxabiv_1 ; "N10__cxxabiv119__foreign_exceptionE"
off_6FFF9A70	dd offset off_6FFF9F28	; DATA XREF: .rdata:6FFF9F24o
		dd offset aN10__cxxabiv12 ; "N10__cxxabiv120__si_class_type_infoE"
		dd offset off_6FFF9A5C
off_6FFF9A7C	dd offset off_6FFF9F28	; DATA XREF: .text:6FFEB642o
					; sub_6FFEB6C0+1C1o ...
		dd offset aN9__gnu_cxx24_ ; "N9__gnu_cxx24__concurrence_lock_errorE"
		dd offset off_6FFF9AAC
off_6FFF9A88	dd offset off_6FFF9F28	; DATA XREF: sub_6FFEA170+78o
					; .text:6FFEB618o ...
		dd offset aN9__gnu_cxx26_ ; "N9__gnu_cxx26__concurrence_unlock_error"...
		dd offset off_6FFF9AAC
off_6FFF9A94	dd offset off_6FFF9F28	; DATA XREF: sub_6FFEBACD+A8o
					; sub_6FFEBACD+D0o ...
		dd offset aSt13bad_except ; "St13bad_exception"
		dd offset off_6FFF9AAC
off_6FFF9AA0	dd offset off_6FFF9F28	; DATA XREF: sub_6FFEAE70+8Eo
					; .text:6FFEC8B4o ...
		dd offset aSt9bad_alloc	; "St9bad_alloc"
		dd offset off_6FFF9AAC
off_6FFF9AAC	dd offset off_6FFF9EC8	; DATA XREF: .text:6FFED534o
					; .rdata:6FFF9A84o ...
		dd offset aSt9exception	; "St9exception"
off_6FFF9AB4	dd offset off_6FFF9EC8	; DATA XREF: .rdata:6FFF9A64o
					; .rdata:6FFF9FE4o
		dd offset aSt9type_info	; "St9type_info"
a15dbusmenuadap	db '15DbusmenuAdaptor',0 ; DATA XREF: .rdata:6FFF99FCo
		align 10h
a16dbusmenuexpo	db '16DBusMenuExporter',0 ; DATA XREF: .rdata:6FFF9A08o
		align 4
a16dbusmenuimpo	db '16DBusMenuImporter',0 ; DATA XREF: .rdata:6FFF9A14o
		align 4
a17actioneventf	db '17ActionEventFilter',0 ; DATA XREF: .rdata:6FFF9A20o
a20dbusmenuexpo	db '20DBusMenuExporterDBus',0 ; DATA XREF: .rdata:6FFF9A2Co
		align 4
a20qdbusabstrac	db '20QDBusAbstractAdaptor',0 ; DATA XREF: .rdata:6FFF9A38o
		align 4
a7qobject	db '7QObject',0         ; DATA XREF: .rdata:6FFF9A44o
		align 4
a8dbusmenu	db '8DBusMenu',0        ; DATA XREF: .rdata:6FFF9A4Co
		align 10h
aN10__cxxabiv11	db 'N10__cxxabiv115__forced_unwindE',0 ; DATA XREF: .rdata:6FFF9A58o
aN10__cxxabiv_0	db 'N10__cxxabiv117__class_type_infoE',0 ; DATA XREF: .rdata:6FFF9A60o
		align 20h
aN10__cxxabiv_1	db 'N10__cxxabiv119__foreign_exceptionE',0 ; DATA XREF: .rdata:6FFF9A6Co
		align 20h
aN10__cxxabiv12	db 'N10__cxxabiv120__si_class_type_infoE',0 ; DATA XREF: .rdata:6FFF9A74o
		align 20h
aN9__gnu_cxx24_	db 'N9__gnu_cxx24__concurrence_lock_errorE',0 ; DATA XREF: .rdata:6FFF9A80o
		align 20h
aN9__gnu_cxx26_	db 'N9__gnu_cxx26__concurrence_unlock_errorE',0
					; DATA XREF: .rdata:6FFF9A8Co
		align 20h
aSt13bad_except	db 'St13bad_exception',0 ; DATA XREF: .rdata:6FFF9A98o
		align 4
aSt9bad_alloc	db 'St9bad_alloc',0     ; DATA XREF: .rdata:6FFF9AA4o
		align 4
aSt9exception	db 'St9exception',0     ; DATA XREF: .rdata:6FFF9AB0o
		align 4
aSt9type_info	db 'St9type_info',0     ; DATA XREF: .rdata:6FFF9AB8o
		align 4
		dd 8 dup(0)
		dd offset off_6FFF99F8
off_6FFF9D28	dd offset sub_6FFD5750	; DATA XREF: sub_6FFD57B0+8o
					; sub_6FFD57E0+7o ...
		dd offset sub_6FFD56E0
		dd offset sub_6FFD64B0
		dd offset sub_6FFD57E0
		dd offset sub_6FFD57B0
		dd offset _ZN7QObject5eventEP6QEvent
		dd offset _ZN7QObject11eventFilterEPS_P6QEvent
		dd offset _ZN7QObject10timerEventEP11QTimerEvent
		dd offset _ZN7QObject10childEventEP11QChildEvent
		dd offset _ZN7QObject11customEventEP6QEvent
		dd offset _ZN7QObject13connectNotifyEPKc
		dd offset _ZN7QObject16disconnectNotifyEPKc
		align 10h
; Exported entry  47. _ZTV16DBusMenuExporter
		public _ZTV16DBusMenuExporter
_ZTV16DBusMenuExporter dd 0
		dd offset off_6FFF9A04
off_6FFF9D68	dd offset _ZNK16DBusMenuExporter10metaObjectEv
					; DATA XREF: _ZN16DBusMenuExporterD0Ev+35o
					; _ZN16DBusMenuExporterD1Ev+35o ...
		dd offset _ZN16DBusMenuExporter11qt_metacastEPKc
		dd offset _ZN16DBusMenuExporter11qt_metacallEN11QMetaObject4CallEiPPv
		dd offset _ZN16DBusMenuExporterD1Ev
		dd offset _ZN16DBusMenuExporterD0Ev
		dd offset _ZN7QObject5eventEP6QEvent
		dd offset _ZN7QObject11eventFilterEPS_P6QEvent
		dd offset _ZN7QObject10timerEventEP11QTimerEvent
		dd offset _ZN7QObject10childEventEP11QChildEvent
		dd offset _ZN7QObject11customEventEP6QEvent
		dd offset _ZN7QObject13connectNotifyEPKc
		dd offset _ZN7QObject16disconnectNotifyEPKc
		dd offset _ZN16DBusMenuExporter17iconNameForActionEP7QAction
		align 10h
; Exported entry  48. _ZTV16DBusMenuImporter
		public _ZTV16DBusMenuImporter
_ZTV16DBusMenuImporter dd 0
		dd offset off_6FFF9A10
off_6FFF9DA8	dd offset _ZNK16DBusMenuImporter10metaObjectEv
					; DATA XREF: _ZN16DBusMenuImporterD2Ev+35o
					; _ZN16DBusMenuImporterC1ERK7QStringS2_P7QObject+4Fo ...
		dd offset _ZN16DBusMenuImporter11qt_metacastEPKc
		dd offset _ZN16DBusMenuImporter11qt_metacallEN11QMetaObject4CallEiPPv
		dd offset _ZN16DBusMenuImporterD1Ev
		dd offset _ZN16DBusMenuImporterD0Ev
		dd offset _ZN7QObject5eventEP6QEvent
		dd offset _ZN7QObject11eventFilterEPS_P6QEvent
		dd offset _ZN7QObject10timerEventEP11QTimerEvent
		dd offset _ZN7QObject10childEventEP11QChildEvent
		dd offset _ZN7QObject11customEventEP6QEvent
		dd offset _ZN7QObject13connectNotifyEPKc
		dd offset _ZN7QObject16disconnectNotifyEPKc
		dd offset _ZN16DBusMenuImporter10createMenuEP7QWidget
		dd offset _ZN16DBusMenuImporter11iconForNameERK7QString
		dd 0
		dd offset off_6FFF9A1C
off_6FFF9DE8	dd offset _ZNK7QObject10metaObjectEv ; DATA XREF: sub_6FFC9E50+80o
					; sub_6FFC9E50+16Fo ...
		dd offset _ZN7QObject11qt_metacastEPKc
		dd offset _ZN7QObject11qt_metacallEN11QMetaObject4CallEiPPv
		dd offset sub_6FFDFA90
		dd offset sub_6FFDFA60
		dd offset _ZN7QObject5eventEP6QEvent
		dd offset sub_6FFDFA20
		dd offset _ZN7QObject10timerEventEP11QTimerEvent
		dd offset _ZN7QObject10childEventEP11QChildEvent
		dd offset _ZN7QObject11customEventEP6QEvent
		dd offset _ZN7QObject13connectNotifyEPKc
		dd offset _ZN7QObject16disconnectNotifyEPKc
		dd 3 dup(0)
		dd offset off_6FFF9A28
off_6FFF9E28	dd offset sub_6FFC81D0	; DATA XREF: sub_6FFC8280+4Fo
					; .text:6FFC83EFo ...
		dd offset sub_6FFC8160
		dd offset sub_6FFCBCE0
		dd offset sub_6FFE0030
		dd offset sub_6FFDFF70
		dd offset _ZN7QObject5eventEP6QEvent
		dd offset _ZN7QObject11eventFilterEPS_P6QEvent
		dd offset _ZN7QObject10timerEventEP11QTimerEvent
		dd offset _ZN7QObject10childEventEP11QChildEvent
		dd offset _ZN7QObject11customEventEP6QEvent
		dd offset _ZN7QObject13connectNotifyEPKc
		dd offset _ZN7QObject16disconnectNotifyEPKc
		dd 3 dup(0)
		dd offset off_6FFF9A48
off_6FFF9E68	dd offset sub_6FFC1530	; DATA XREF: sub_6FFC1610+7o
					; .text:6FFC1637o ...
		dd offset sub_6FFC14C0
		dd offset sub_6FFC1990
		dd offset sub_6FFC1610
		dd offset sub_6FFC1650
		dd offset _ZN7QObject5eventEP6QEvent
		dd offset sub_6FFC1880
		dd offset _ZN7QObject10timerEventEP11QTimerEvent
		dd offset _ZN7QObject10childEventEP11QChildEvent
		dd offset _ZN7QObject11customEventEP6QEvent
		dd offset _ZN7QObject13connectNotifyEPKc
		dd offset _ZN7QObject16disconnectNotifyEPKc
		dd 3 dup(0)
		dd offset off_6FFF9A54
off_6FFF9EA8	dd offset sub_6FFDF850	; DATA XREF: sub_6FFDF830+7o
					; sub_6FFDF850+4o ...
		dd offset sub_6FFDF830
		dd offset sub_6FFEC100
		dd 4 dup(0)
		dd offset off_6FFF9A5C
off_6FFF9EC8	dd offset sub_6FFDF8A0	; DATA XREF: sub_6FFDF870+8o
					; sub_6FFDF8A0+7o ...
		dd offset sub_6FFDF870
		dd offset sub_6FFEAC60
		dd offset sub_6FFEAC70
		dd offset sub_6FFEA550
		dd offset sub_6FFEA620
		dd offset sub_6FFEA5D0
		dd offset sub_6FFEA690
		dd offset sub_6FFEA710
		dd 6 dup(0)
		dd offset off_6FFF9A68
off_6FFF9F08	dd offset sub_6FFDF900	; DATA XREF: sub_6FFDF8E0+7o
					; sub_6FFDF900+4o ...
		dd offset sub_6FFDF8E0
		dd offset sub_6FFEC100
		dd 4 dup(0)
		dd offset off_6FFF9A70
off_6FFF9F28	dd offset sub_6FFDF950	; DATA XREF: sub_6FFDF920+8o
					; sub_6FFDF950+7o ...
		dd offset sub_6FFDF920
		dd offset sub_6FFEAC60
		dd offset sub_6FFEAC70
		dd offset sub_6FFEA550
		dd offset sub_6FFEA620
		dd offset sub_6FFEA730
		dd offset sub_6FFEA7C0
		dd offset sub_6FFEA8E0
		dd 6 dup(0)
		dd offset off_6FFF9A7C
off_6FFF9F68	dd offset sub_6FFEA260	; DATA XREF: sub_6FFEA230+8o
					; sub_6FFEA260+7o ...
		dd offset sub_6FFEA230
		dd offset sub_6FFEABF0
		dd 2 dup(0)
		dd offset off_6FFF9A88
off_6FFF9F80	dd offset sub_6FFEA2B0	; DATA XREF: sub_6FFEA170+6Ao
					; sub_6FFEA280+8o ...
		dd offset sub_6FFEA280
		dd offset sub_6FFEAC00
		dd 2 dup(0)
		dd offset off_6FFF9A94
off_6FFF9F98	dd offset sub_6FFEACD0	; DATA XREF: sub_6FFEBACD+C2o
		dd offset sub_6FFEACB0
		dd offset sub_6FFEAC10
		dd 2 dup(0)
		dd offset off_6FFF9AA0
off_6FFF9FB0	dd offset sub_6FFEAD20	; DATA XREF: sub_6FFEACF0+8o
					; sub_6FFEAD20+7o ...
		dd offset sub_6FFEACF0
		dd offset sub_6FFEAC20
		dd 2 dup(0)
		dd offset off_6FFF9AAC
off_6FFF9FC8	dd offset sub_6FFEAD80	; DATA XREF: sub_6FFEACB0+7o
					; sub_6FFEACD0+4o ...
		dd offset sub_6FFEAD60
		dd offset sub_6FFEAC30
		dd 4 dup(0)
		dd offset off_6FFF9AB4
off_6FFF9FE8	dd offset sub_6FFEADC0	; DATA XREF: sub_6FFEADA0+7o
					; sub_6FFEADC0+4o ...
		dd offset sub_6FFEADA0
		dd offset sub_6FFEAC60
		dd offset sub_6FFEAC70
		dd offset sub_6FFEAC40
		dd offset sub_6FFEAC50
_rdata		ends

; Section 4. (virtual address 0003A000)
; Virtual size			: 000003C8 (	968.)
; Section size in file		: 00000000 (	  0.)
; Offset to raw	data for section: 00000000
; Flags	C0600080: Bss Readable Writable
; Alignment	: 32 bytes
; ===========================================================================

; Segment type:	Uninitialized
; Segment permissions: Read/Write
; Segment alignment '32byte' can not be represented in assembly
_bss		segment	para public 'BSS' use32
		assume cs:_bss
		;org 6FFFA000h
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
dword_6FFFA000	dd ?			; DATA XREF: sub_6FFC1040+Dr
					; sub_6FFC1040+22w ...
dword_6FFFA004	dd ?			; DATA XREF: sub_6FFD2F30+4r
					; sub_6FFD2F30+124w ...
TlsIndex	dd ?			; DATA XREF: sub_6FFDAC00+84r
					; .tls:TlsIndex_ptro
dword_6FFFA00C	dd 3 dup(?)		; DATA XREF: sub_6FFDAC00+8Do
dword_6FFFA018	dd ?			; DATA XREF: DllEntryPoint+7w
dword_6FFFA01C	dd ?			; DATA XREF: sub_6FFDAAB0+2Cr
					; sub_6FFDAAB0+65r ...
dword_6FFFA020	dd ?			; DATA XREF: sub_6FFDAAB0:loc_6FFDAAD0r
					; sub_6FFDAAB0:loc_6FFDAB72w ...
dword_6FFFA024	dd ?			; DATA XREF: sub_6FFDAC00+9r
					; sub_6FFDAC00:loc_6FFDAC20w
dword_6FFFA028	dd ?			; DATA XREF: sub_6FFDAF10+3r
					; sub_6FFDAF10:loc_6FFDAF21w
		align 20h
dword_6FFFA040	dd ?			; DATA XREF: .text:6FFDAF62w
					; .rdata:off_6FFF99D4o
dword_6FFFA044	dd ?			; DATA XREF: .text:6FFDAF6Cw
		dd ?
dword_6FFFA04C	dd ?			; DATA XREF: .text:6FFDAF7Bw
		dd 14h dup(?)
dword_6FFFA0A0	dd 2Bh dup(?)		; DATA XREF: .rdata:6FFF99D8o
dword_6FFFA14C	dd ?			; DATA XREF: .text:6FFDAF8Aw
		dd 2 dup(?)
dword_6FFFA158	dd ?			; DATA XREF: .text:6FFDAF76w
		dd 2 dup(?)
dword_6FFFA164	dd ?			; DATA XREF: .text:6FFDAF5Cw
		dd 86h dup(?)
dword_6FFFA380	dd ?			; DATA XREF: sub_6FFDB0B0+7r
					; sub_6FFDB130+26r ...
; struct _RTL_CRITICAL_SECTION CriticalSection
CriticalSection	_RTL_CRITICAL_SECTION <?> ; DATA XREF: sub_6FFDB0B0:loc_6FFDB0C8o
					; sub_6FFDB0B0:loc_6FFDB115o ...
dword_6FFFA39C	dd ?			; DATA XREF: sub_6FFDB0B0+25r
					; .text:6FFDB1E5r ...
		dd ?
dword_6FFFA3A4	dd ?			; DATA XREF: .text:6FFDB606r
					; .text:6FFDB69Aw ...
dword_6FFFA3A8	dd ?			; DATA XREF: sub_6FFC1000+21w
					; sub_6FFC1040+143r ...
dword_6FFFA3AC	dd ?			; DATA XREF: sub_6FFC1000+1Cw
					; sub_6FFC1040:loc_6FFC1170r ...
dword_6FFFA3B0	dd ?			; DATA XREF: sub_6FFC1040+4Co
					; sub_6FFC1040+C1o ...
dword_6FFFA3B4	dd ?			; DATA XREF: sub_6FFC1040+5Fr
					; sub_6FFC1040:loc_6FFC1116r ...
		align 1000h
_bss		ends

;
; Imports from QtCore4.dll
;
; Section 6. (virtual address 0003C000)
; Virtual size			: 000035F4 (  13812.)
; Section size in file		: 00003600 (  13824.)
; Offset to raw	data for section: 00039200
; Flags	C0300040: Data Readable	Writable
; Alignment	: 4 bytes
; ===========================================================================

; Segment type:	Externs
; _idata
		extrn _ZN7QObject16staticMetaObjectE:dword ; DATA XREF:	.text:loc_6FFC14B0r
					; .text:loc_6FFC1A10r ...
		extrn __imp__ZN7QObject11qt_metacastEPKc:dword
					; DATA XREF: sub_6FFC14C0:loc_6FFC1513r
					; _ZN16DBusMenuExporter11qt_metacastEPKc:loc_6FFC1A73r	...
		extrn _Z9qt_assertPKcS0_i:dword	; CODE XREF: sub_6FFC1530+47p
					; sub_6FFC1910+77p ...
		extrn _ZN7QObjectD2Ev:dword ; CODE XREF: sub_6FFC1650+11p
					; sub_6FFC1745+16p ...
		extrn _ZN7QObjectC2EPS_:dword ;	CODE XREF: sub_6FFC1680+43p
					; .text:6FFC17C3p ...
		extrn _ZN7QObject18installEventFilterEPS_:dword
					; CODE XREF: sub_6FFC1680+6Fp
					; .text:6FFC17EFp ...
		extrn _Z13qFlagLocationPKc:dword ; CODE	XREF: sub_6FFC1680+7Cp
					; sub_6FFC1680+8Cp ...
		extrn _ZN7QObject7connectEPKS_PKcS1_S3_N2Qt14ConnectionTypeE:dword
					; CODE XREF: sub_6FFC1680+B2p
					; .text:6FFC1832p ...
		extrn _ZNK11QMetaObject4castEP7QObject:dword ; CODE XREF: sub_6FFC1910+32p
					; sub_6FFC3520+16Ep ...
		extrn __imp__ZN7QObject11qt_metacallEN11QMetaObject4CallEiPPv:dword
					; CODE XREF: sub_6FFC1990+2Ep
					; _ZN16DBusMenuExporter11qt_metacallEN11QMetaObject4CallEiPPv+2Ep ...
		extrn __imp__ZN7QObject5eventEP6QEvent:dword
					; DATA XREF: _ZN7QObject5eventEP6QEventr
		extrn __imp__ZN7QObject10timerEventEP11QTimerEvent:dword
					; DATA XREF: _ZN7QObject10timerEventEP11QTimerEventr
		extrn __imp__ZN7QObject10childEventEP11QChildEvent:dword
					; DATA XREF: _ZN7QObject10childEventEP11QChildEventr
		extrn __imp__ZN7QObject11customEventEP6QEvent:dword
					; DATA XREF: _ZN7QObject11customEventEP6QEventr
		extrn __imp__ZN7QObject13connectNotifyEPKc:dword
					; DATA XREF: _ZN7QObject13connectNotifyEPKcr
		extrn __imp__ZN7QObject16disconnectNotifyEPKc:dword
					; DATA XREF: _ZN7QObject16disconnectNotifyEPKcr
		extrn _ZN11QTextStreamC1EP7QString6QFlagsIN9QIODevice12OpenModeFlagEE:dword
					; CODE XREF: sub_6FFC4C20+286p
					; sub_6FFC78B0+218p ...
		extrn _ZN7QString11shared_nullE:dword
					; DATA XREF: _ZN16DBusMenuExporter17iconNameForActionEP7QAction:loc_6FFC233Er
					; _ZN16DBusMenuExporter17iconNameForActionEP7QAction+169r ...
		extrn _ZN7QString4freeEPNS_4DataE:dword	; CODE XREF: sub_6FFC24B0+113p
					; sub_6FFC24B0+2D0p ...
		extrn _Z5qFreePv:dword	; CODE XREF: sub_6FFC4330+286p
					; sub_6FFC4330+2DEp ...
		extrn _ZN9QHashData14detach_helper2EPFvPNS_4NodeEPvEPFvS1_Eii:dword
					; CODE XREF: _ZN16DBusMenuExporter19doEmitLayoutUpdatedEv+83p
					; _ZN16DBusMenuExporter19doEmitLayoutUpdatedEv+41Ap ...
		extrn _ZN9QHashData11free_helperEPFvPNS_4NodeEE:dword
					; CODE XREF: _ZN16DBusMenuExporter19doEmitLayoutUpdatedEv+3AEp
					; _ZN16DBusMenuExporter19doEmitLayoutUpdatedEv+3E5p ...
		extrn _ZN8QMapData10createDataEi:dword ; CODE XREF: sub_6FFE3B80+40p
					; sub_6FFE4310+41p ...
		extrn _ZN8QMapData11node_createEPPNS_4NodeEii:dword
					; CODE XREF: sub_6FFC4C20+474p
					; sub_6FFC4C20+541p ...
		extrn _ZN8QMapData16continueFreeDataEi:dword ; CODE XREF: sub_6FFC4C20+88Dp
					; _ZN16DBusMenuExporter15doUpdateActionsEv+DBCp ...
		extrn _ZN9QListData6detachEi:dword ; CODE XREF:	sub_6FFC4330+86p
					; sub_6FFC4330+FAp ...
		extrn _ZN8QVariantC1ERKS_:dword	; CODE XREF: sub_6FFC88E0+4D0p
					; sub_6FFC88E0+87Ep ...
		extrn _ZN8QMapData11node_deleteEPPNS_4NodeEiS1_:dword
					; CODE XREF: sub_6FFC4020+13Fp
					; sub_6FFC4020+176p ...
		extrn _ZN9QHashData12allocateNodeEi:dword
					; CODE XREF: _ZN16DBusMenuExporter15doUpdateActionsEv+B41p
					; _ZN16DBusMenuImporter17slotLayoutUpdatedEji+13Ap ...
		extrn _ZN9QHashData6rehashEi:dword ; CODE XREF:	sub_6FFC4C20+944p
					; _ZN16DBusMenuExporter15doUpdateActionsEv+12B8p ...
		extrn _ZN6QTimer5startEv:dword ; CODE XREF: .text:6FFC1C5Dp
					; sub_6FFC2030+AEp ...
		extrn _ZN8QVariantD1Ev:dword ; CODE XREF: sub_6FFC24B0+F0p
					; sub_6FFC24B0+288p ...
		extrn _ZN7QString9fromAsciiEPKci:dword ; CODE XREF: sub_6FFC3D40+85p
					; sub_6FFC84C0+61p ...
		extrn _ZN11QTextStreamlsERK7QString:dword ; CODE XREF: sub_6FFC4C20+35Cp
					; sub_6FFC9E50+260p ...
		extrn _ZN11QTextStreamlsEc:dword ; CODE	XREF: sub_6FFC1EB0+112p
					; _ZN16DBusMenuExporter14activateActionEP7QAction+127p	...
		extrn _ZN11QTextStreamD1Ev:dword ; CODE	XREF: sub_6FFC9E50+3FDp
					; sub_6FFCA42F+79p ...
		extrn _ZNK7QString11toLocal8BitEv:dword	; CODE XREF: sub_6FFC9E50+54Ap
					; sub_6FFCA610+7ACp ...
		extrn _ZN10QByteArray7reallocEi:dword ;	CODE XREF: sub_6FFC9E50+571p
					; sub_6FFCA610+7D3p ...
		extrn _Z17qt_message_output9QtMsgTypePKc:dword
					; CODE XREF: sub_6FFC9E50+591p
					; sub_6FFCA610+7F3p ...
		extrn _ZN9QDateTime15currentDateTimeEv:dword
					; CODE XREF: _ZN16DBusMenuExporter14activateActionEP7QAction+5Fp
					; sub_6FFE33C0+13Cp
					; DATA XREF: ...
		extrn _ZNK9QDateTime8toTime_tEv:dword
					; CODE XREF: _ZN16DBusMenuExporter14activateActionEP7QAction+75p
					; sub_6FFE33C0+155p
					; DATA XREF: ...
		extrn _ZN9QDateTimeD1Ev:dword
					; CODE XREF: _ZN16DBusMenuExporter14activateActionEP7QAction+8Bp
					; sub_6FFC226F+1Cp ...
		extrn _ZN9QListData11detach_growEPii:dword ; CODE XREF:	sub_6FFE58E0+76p
					; sub_6FFE6420+76p ...
		extrn _ZN9QListData6appendEv:dword ; CODE XREF:	sub_6FFE58E0+3A6p
					; sub_6FFE6420+3D3p ...
		extrn _ZN9QListData11shared_nullE:dword
					; DATA XREF: _ZN16DBusMenuExporter15doUpdateActionsEv:loc_6FFC6080r
					; sub_6FFC78B0+17Cr ...
		extrn _ZNK7QStringltERKS_:dword
					; CODE XREF: _ZN16DBusMenuExporter15doUpdateActionsEv+44Bp
					; _ZN16DBusMenuExporter15doUpdateActionsEv+48Dp ...
		extrn _ZN8QVariantaSERKS_:dword	; CODE XREF: sub_6FFC88E0+B1Cp
					; sub_6FFC88E0+D8Fp ...
		extrn _ZN8QVariantC1ERK7QString:dword ;	CODE XREF: sub_6FFC24B0+84p
					; sub_6FFC2AE0+BBp ...
		extrn _ZN7QString16fromAscii_helperEPKci:dword ; CODE XREF: sub_6FFC24B0+A3p
					; sub_6FFC24B0+23Fp ...
		extrn _ZN7QBufferC1EP7QObject:dword ; CODE XREF: sub_6FFC24B0+17Cp
					; DATA XREF: sub_6FFC24B0+17Cr
		extrn _ZNK7QBuffer4dataEv:dword	; CODE XREF: sub_6FFC24B0+210p
					; DATA XREF: sub_6FFC24B0+210r
		extrn _ZN8QVariantC1ERK10QByteArray:dword ; CODE XREF: sub_6FFC24B0+220p
					; DATA XREF: sub_6FFC24B0+220r
		extrn _ZN7QBufferD1Ev:dword ; CODE XREF: sub_6FFC24B0+29Ep
					; sub_6FFC27A8+7Fp
					; DATA XREF: ...
		extrn _ZN8QMapData11shared_nullE:dword ; DATA XREF: sub_6FFC28C0+32r
					; sub_6FFC2AE0+44r ...
		extrn _ZN8QVariantC1EPKc:dword ; CODE XREF: sub_6FFC28C0+58p
					; sub_6FFC2AE0+2B7p ...
		extrn _ZN8QVariantC1Eb:dword ; CODE XREF: sub_6FFC28C0+103p
					; sub_6FFC2AE0+17Bp ...
		extrn _ZN8QVariantC1Ei:dword ; CODE XREF: sub_6FFC2AE0+424p
					; _ZN16DBusMenuImporter19slotMenuAboutToShowEv+1EBp ...
		extrn _ZN8QVariantC1EiPKvj:dword ; CODE	XREF: sub_6FFC2AE0+540p
					; _ZlsR13QDBusArgumentRK18DBusMenuLayoutItem+26Cp ...
		extrn _ZN9QMetaType12registerTypeEPKcPFvPvEPFS2_PKvE:dword
					; CODE XREF: sub_6FFC2AE0+615p
					; _ZN16DBusMenuImporter31slotAboutToShowDBusCallFinishedEP23QDBusPendingCallWatcher+8F7p ...
		extrn _ZNK7QObject10objectNameEv:dword ; CODE XREF: sub_6FFC3D40+4Ep
					; DATA XREF: sub_6FFC3D40+4Er
		extrn _ZN7QString16codecForCStringsE:dword ; DATA XREF:	sub_6FFC3D40+54r
					; sub_6FFC84C0+35r ...
		extrn _ZNK7QStringeqERKS_:dword	; CODE XREF: sub_6FFC3D40+A2p
					; sub_6FFC84C0+7Ep ...
		extrn _ZNK7QStringeqERK13QLatin1String:dword ; CODE XREF: sub_6FFC3D40+25Cp
					; sub_6FFC84C0+382p ...
		extrn _ZN9QHashData8freeNodeEPv:dword ;	CODE XREF: sub_6FFE4DE0+106p
					; sub_6FFE5190+155p
					; DATA XREF: ...
		extrn _ZN7QObject10disconnectEPKS_PKcS1_S3_:dword
					; CODE XREF: sub_6FFC4220+58p
					; DATA XREF: sub_6FFC4220+58r
		extrn _ZN9QHashData8nextNodeEPNS_4NodeE:dword
					; CODE XREF: _ZN16DBusMenuExporter19doEmitLayoutUpdatedEv+183p
					; _ZN16DBusMenuExporter19doEmitLayoutUpdatedEv+2BAp ...
		extrn _ZN9QHashData11shared_nullE:dword
					; DATA XREF: _ZN16DBusMenuExporter19doEmitLayoutUpdatedEv:loc_6FFC49F8r
					; _ZN16DBusMenuExporter19doEmitLayoutUpdatedEv+380r ...
		extrn _ZN11QTextStreamlsEi:dword ; CODE	XREF: sub_6FFC4C20+3C1p
					; _ZN16DBusMenuImporter21slotGetLayoutFinishedEP23QDBusPendingCallWatcher+F01p
					; DATA XREF: ...
		extrn _Z20qt_qFindChild_helperPK7QObjectRK7QStringRK11QMetaObject:dword
					; CODE XREF: sub_6FFC56B0+59p
					; DATA XREF: sub_6FFC56B0+59r
		extrn _ZN7QStringaSERKS_:dword
					; CODE XREF: _ZN16DBusMenuExporterC1ERK7QStringP5QMenuRK15QDBusConnection+CBp
					; _ZN16DBusMenuExporterC2ERK7QStringP5QMenuRK15QDBusConnection+CBp ...
		extrn _ZN6QTimerC1EP7QObject:dword
					; CODE XREF: _ZN16DBusMenuExporterC1ERK7QStringP5QMenuRK15QDBusConnection+112p
					; _ZN16DBusMenuExporterC1ERK7QStringP5QMenuRK15QDBusConnection+14Ep ...
		extrn _ZN6QTimer11setIntervalEi:dword
					; CODE XREF: _ZN16DBusMenuExporterC1ERK7QStringP5QMenuRK15QDBusConnection+1CDp
					; _ZN16DBusMenuExporterC1ERK7QStringP5QMenuRK15QDBusConnection+23Ap ...
		extrn _ZNK8QVariant3cmpERKS_:dword
					; CODE XREF: _ZN16DBusMenuExporter15doUpdateActionsEv+653p
					; DATA XREF: _ZN16DBusMenuExporter15doUpdateActionsEv+653r
		extrn __imp__ZN7QObject11eventFilterEPS_P6QEvent:dword
					; DATA XREF: _ZN7QObject11eventFilterEPS_P6QEventr
		extrn _ZN11QMetaObject8activateEP7QObjectPKS_iPPv:dword
					; CODE XREF: sub_6FFC8070+3Ap
					; sub_6FFC80C0+3Ap ...
		extrn _ZN7QObject17removeEventFilterEPS_:dword ; CODE XREF: sub_6FFDFA20+26p
					; DATA XREF: sub_6FFDFA20+26r
		extrn _ZN11QMetaObject12invokeMethodEP7QObjectPKcN2Qt14ConnectionTypeE22QGenericReturnArgument16QGenericArgumentS7_S7_S7_S7_S7_S7_S7_S7_S7_:dword
					; CODE XREF: sub_6FFC84C0+23Ap
					; sub_6FFC84C0+35Cp ...
		extrn _ZN8QVariantC2ERKS_:dword	; CODE XREF: sub_6FFCA610+44Ap
					; _ZlsR13QDBusArgumentRK18DBusMenuLayoutItem+286p ...
		extrn _ZN8QVariantD2Ev:dword ; CODE XREF: sub_6FFCB780+1ACp
					; sub_6FFCBC18+52p ...
		extrn _ZN8QVariantC1ERK11QStringList:dword ; CODE XREF:	sub_6FFCBEA0+3B8p
					; sub_6FFE2C60+E6p
					; DATA XREF: ...
		extrn _ZN8QVariantC1ERK4QMapI7QStringS_E:dword
					; CODE XREF: sub_6FFCBEA0+3D5p
					; DATA XREF: sub_6FFCBEA0+3D5r
		extrn __imp__ZNK7QObject10metaObjectEv:dword
					; DATA XREF: _ZNK7QObject10metaObjectEvr
		extrn _ZNK8QVariant8userTypeEv:dword
					; CODE XREF: _ZN16DBusMenuImporter31slotAboutToShowDBusCallFinishedEP23QDBusPendingCallWatcher+480p
					; _ZN16DBusMenuImporter31slotAboutToShowDBusCallFinishedEP23QDBusPendingCallWatcher+4BDp ...
		extrn _ZN8QVariant7handlerE:dword
					; DATA XREF: _ZN16DBusMenuImporter31slotAboutToShowDBusCallFinishedEP23QDBusPendingCallWatcher+4CCr
					; _ZN16DBusMenuImporter21slotGetLayoutFinishedEP23QDBusPendingCallWatcher+D80r	...
		extrn _ZNK8QVariant9constDataEv:dword
					; CODE XREF: _ZN16DBusMenuImporter31slotAboutToShowDBusCallFinishedEP23QDBusPendingCallWatcher+9E9p
					; _ZN16DBusMenuImporter21slotGetLayoutFinishedEP23QDBusPendingCallWatcher+DF1p	...
		extrn _ZN5QTime5startEv:dword ;	CODE XREF: sub_6FFCCC80+49p
					; DATA XREF: sub_6FFCCC80+49r
		extrn _ZN11QMetaObject8addGuardEPP7QObject:dword
					; CODE XREF: sub_6FFCCC80+5Bp
					; _ZN16DBusMenuImporter27slotItemActivationRequestedEij+1BAp ...
		extrn _ZN11QMetaObject11removeGuardEPP7QObject:dword
					; CODE XREF: sub_6FFCCC80+B1p
					; sub_6FFCCD83+16p ...
		extrn _ZNK5QTime7elapsedEv:dword ; CODE	XREF: sub_6FFCCC80+CEp
					; DATA XREF: sub_6FFCCC80+CEr
		extrn _ZN16QCoreApplication13processEventsE6QFlagsIN10QEventLoop17ProcessEventsFlagEE:dword
					; CODE XREF: sub_6FFCCC80+E6p
					; DATA XREF: sub_6FFCCC80+E6r
		extrn _ZN7QObject11deleteLaterEv:dword
					; CODE XREF: _ZN16DBusMenuImporterD2Ev+48p
					; _ZN16DBusMenuImporterD0Ev+48p ...
		extrn _ZN13QSignalMapperD1Ev:dword
					; CODE XREF: _ZN16DBusMenuImporterD2Ev+92p
					; sub_6FFCCF46+40p ...
		extrn _ZN8QVariantC1Ej:dword ; CODE XREF: sub_6FFE24B0+FAp
					; sub_6FFE33C0+210p
					; DATA XREF: ...
		extrn _ZNK7QObject6senderEv:dword
					; CODE XREF: _ZN16DBusMenuImporter19slotMenuAboutToHideEv+3Fp
					; _ZN16DBusMenuImporter19slotMenuAboutToShowEv+54p
					; DATA XREF: ...
		extrn _ZNK7QObject8propertyEPKc:dword
					; CODE XREF: _ZN16DBusMenuImporter19slotMenuAboutToHideEv+9Ap
					; _ZN16DBusMenuImporter31slotAboutToShowDBusCallFinishedEP23QDBusPendingCallWatcher+67p ...
		extrn _ZNK8QVariant5toIntEPb:dword
					; CODE XREF: _ZN16DBusMenuImporter19slotMenuAboutToHideEv+B8p
					; _ZN16DBusMenuImporter31slotAboutToShowDBusCallFinishedEP23QDBusPendingCallWatcher+88p ...
		extrn _ZN7QObject11setPropertyEPKcRK8QVariant:dword
					; CODE XREF: _ZN16DBusMenuImporter19slotMenuAboutToShowEv+3D4p
					; sub_6FFE0440+F5p ...
		extrn _ZN13QSignalMapperC1EP7QObject:dword
					; CODE XREF: _ZN16DBusMenuImporterC1ERK7QStringS2_P7QObject+9Bp
					; _ZN16DBusMenuImporterC2ERK7QStringS2_P7QObject+9Bp
					; DATA XREF: ...
		extrn _ZNK8QVariant11toByteArrayEv:dword ; CODE	XREF: sub_6FFE24B0+4Fp
					; DATA XREF: sub_6FFE24B0+4Fr
		extrn _Z5qHashRK10QByteArray:dword ; CODE XREF:	sub_6FFE24B0+68p
					; DATA XREF: sub_6FFE24B0+68r
		extrn _ZNK8QVariant6toUIntEPb:dword ; CODE XREF: sub_6FFE24B0+ACp
					; DATA XREF: sub_6FFE24B0+ACr
		extrn _ZNK8QVariant8toStringEv:dword ; CODE XREF: sub_6FFE0440+164p
					; sub_6FFE0440+288p ...
		extrn _ZNK8QVariant6toBoolEv:dword ; CODE XREF:	sub_6FFE0440+5BDp
					; sub_6FFE1870+21Ap ...
		extrn _ZN9QListData7reallocEi:dword ; CODE XREF: sub_6FFE0440+11ABp
					; DATA XREF: sub_6FFE0440+11ABr
		extrn _ZN11QMetaObject11changeGuardEPP7QObjectS1_:dword
					; CODE XREF: _ZN16DBusMenuImporter21slotGetLayoutFinishedEP23QDBusPendingCallWatcher+6CDp
					; _ZN16DBusMenuImporter21slotGetLayoutFinishedEP23QDBusPendingCallWatcher+B95p
					; DATA XREF: ...
		extrn _ZN13QSignalMapper10setMappingEP7QObjecti:dword
					; CODE XREF: _ZN16DBusMenuImporter21slotGetLayoutFinishedEP23QDBusPendingCallWatcher+770p
					; DATA XREF: _ZN16DBusMenuImporter21slotGetLayoutFinishedEP23QDBusPendingCallWatcher+770r
		extrn _ZN9QtPrivate28QStringList_replaceInStringsEP11QStringListRK7QStringS4_N2Qt15CaseSensitivityE:dword
					; CODE XREF: sub_6FFD4290+13Ep
					; sub_6FFD4290+203p ...
		extrn _ZN7QString17fromLatin1_helperEPKci:dword
					; CODE XREF: _ZNK16DBusMenuShortcut13toKeySequenceEv+CAp
					; _ZNK16DBusMenuShortcut13toKeySequenceEv+1BEp
					; DATA XREF: ...
		extrn _ZN9QtPrivate16QStringList_joinEPK11QStringListRK7QString:dword
					; CODE XREF: _ZNK16DBusMenuShortcut13toKeySequenceEv+EEp
					; _ZNK16DBusMenuShortcut13toKeySequenceEv+1E2p
					; DATA XREF: ...
		extrn _ZNK7QString5splitERKS_NS_13SplitBehaviorEN2Qt15CaseSensitivityE:dword
					; CODE XREF: _ZN16DBusMenuShortcut15fromKeySequenceERK12QKeySequence+B1p
					; DATA XREF: _ZN16DBusMenuShortcut15fromKeySequenceERK12QKeySequence+B1r
		extrn _ZN7QString7replaceERKS_S1_N2Qt15CaseSensitivityE:dword
					; CODE XREF: _ZN16DBusMenuShortcut15fromKeySequenceERK12QKeySequence+1CDp
					; DATA XREF: _ZN16DBusMenuShortcut15fromKeySequenceERK12QKeySequence+1CDr
		extrn _ZN5QCharC1Ec:dword
					; CODE XREF: _ZN16DBusMenuShortcut15fromKeySequenceERK12QKeySequence+20Ap
					; sub_6FFD52A0+9Cp ...
		extrn _ZNK7QString5splitERK5QCharNS_13SplitBehaviorEN2Qt15CaseSensitivityE:dword
					; CODE XREF: _ZN16DBusMenuShortcut15fromKeySequenceERK12QKeySequence+234p
					; DATA XREF: _ZN16DBusMenuShortcut15fromKeySequenceERK12QKeySequence+234r
		extrn _ZN7QString4growEi:dword ; CODE XREF: sub_6FFD52A0+197p
					; DATA XREF: sub_6FFD52A0+197r
		extrn _ZN7QString7reallocEi:dword ; CODE XREF: sub_6FFD52A0+1A7p
					; DATA XREF: sub_6FFD52A0+1A7r
		extrn _ZN5QChar9fromAsciiEc:dword ; CODE XREF: sub_6FFD52A0+233p
					; sub_6FFD52A0+266p ...
		extrn _ZN7QString6appendE5QChar:dword ;	CODE XREF: sub_6FFD52A0+244p
					; sub_6FFD52A0+277p ...

;
; Imports from QtDBus4.dll
;
		extrn _ZN15QDBusConnectionC1ERKS_:dword
					; CODE XREF: _ZN16DBusMenuExporterC1ERK7QStringP5QMenuRK15QDBusConnection+2A0p
					; _ZN16DBusMenuExporterC2ERK7QStringP5QMenuRK15QDBusConnection+2A0p
					; DATA XREF: ...
		extrn _ZN15QDBusConnection14registerObjectERK7QStringP7QObject6QFlagsINS_14RegisterOptionEE:dword
					; CODE XREF: _ZN16DBusMenuExporterC1ERK7QStringP5QMenuRK15QDBusConnection+2D5p
					; _ZN16DBusMenuExporterC2ERK7QStringP5QMenuRK15QDBusConnection+2D5p
					; DATA XREF: ...
		extrn _ZN15QDBusConnectionD1Ev:dword
					; CODE XREF: _ZN16DBusMenuExporterC1ERK7QStringP5QMenuRK15QDBusConnection+2E8p
					; sub_6FFC5C02+31p ...
		extrn _ZN12QDBusMessage12createSignalERK7QStringS2_S2_:dword
					; CODE XREF: sub_6FFCBEA0+362p
					; DATA XREF: sub_6FFCBEA0+362r
		extrn _ZN12QDBusMessage12setArgumentsERK5QListI8QVariantE:dword
					; CODE XREF: sub_6FFCBEA0+4EBp
					; DATA XREF: sub_6FFCBEA0+4EBr
		extrn _ZN15QDBusConnection10sessionBusEv:dword
					; CODE XREF: sub_6FFCBEA0+4F7p
					; _ZN16DBusMenuImporterC1ERK7QStringS2_P7QObject+113p ...
		extrn _ZNK15QDBusConnection4sendERK12QDBusMessage:dword
					; CODE XREF: sub_6FFCBEA0+517p
					; DATA XREF: sub_6FFCBEA0+517r
		extrn _ZN12QDBusMessageD1Ev:dword ; CODE XREF: sub_6FFCBEA0+554p
					; sub_6FFCC720+14Ep ...
		extrn _ZN13QDBusArgumentD1Ev:dword
					; CODE XREF: _ZN16DBusMenuImporter31slotAboutToShowDBusCallFinishedEP23QDBusPendingCallWatcher+96Cp
					; sub_6FFD014F+FFp ...
		extrn _ZN13QDBusArgumentC1ERKS_:dword
					; CODE XREF: _ZrsRK13QDBusArgumentR18DBusMenuLayoutItem+110p
					; _ZrsRK13QDBusArgumentR18DBusMenuLayoutItem+416p ...
		extrn _ZN13QDBusArgumentC1Ev:dword
					; CODE XREF: _ZrsRK13QDBusArgumentR18DBusMenuLayoutItem+C3p
					; _ZrsRK13QDBusArgumentR18DBusMenuLayoutItem+2B6p ...
		extrn _ZNK16QDBusPendingCall10isFinishedEv:dword
					; CODE XREF: sub_6FFCCC80+75p
					; sub_6FFCCC80+93p
					; DATA XREF: ...
		extrn _ZN23QDBusPendingCallWatcher15waitForFinishedEv:dword
					; CODE XREF: sub_6FFCCC80+F7p
					; DATA XREF: sub_6FFCCC80+F7r
		extrn _ZN22QDBusAbstractInterface9asyncCallERK7QStringRK8QVariantS5_S5_S5_S5_S5_S5_S5_:dword
					; CODE XREF: _ZN16DBusMenuImporter19slotMenuAboutToShowEv+27Bp
					; sub_6FFE2C60+1A8p ...
		extrn _ZN16QDBusPendingCallD1Ev:dword
					; CODE XREF: _ZN16DBusMenuImporter19slotMenuAboutToShowEv+50Dp
					; sub_6FFD0CF4+144p ...
		extrn _ZN23QDBusPendingCallWatcherC1ERK16QDBusPendingCallP7QObject:dword
					; CODE XREF: _ZN16DBusMenuImporter19slotMenuAboutToShowEv+384p
					; sub_6FFE2C60+2BEp
					; DATA XREF: ...
		extrn _ZN14QDBusInterfaceC1ERK7QStringS2_S2_RK15QDBusConnectionP7QObject:dword
					; CODE XREF: _ZN16DBusMenuImporterC1ERK7QStringS2_P7QObject+168p
					; _ZN16DBusMenuImporterC2ERK7QStringS2_P7QObject+168p
					; DATA XREF: ...
		extrn _ZN15QDBusConnection7connectERK7QStringS2_S2_S2_S2_P7QObjectPKc:dword
					; CODE XREF: _ZN16DBusMenuImporterC1ERK7QStringS2_P7QObject+35Bp
					; _ZN16DBusMenuImporterC1ERK7QStringS2_P7QObject+470p ...
		extrn _ZN21QDBusPendingReplyDataC2Ev:dword
					; CODE XREF: _ZN16DBusMenuImporter31slotAboutToShowDBusCallFinishedEP23QDBusPendingCallWatcher+ADp
					; _ZN16DBusMenuImporter21slotGetLayoutFinishedEP23QDBusPendingCallWatcher+ADp
					; DATA XREF: ...
		extrn _ZN21QDBusPendingReplyData6assignERK16QDBusPendingCall:dword
					; CODE XREF: _ZN16DBusMenuImporter31slotAboutToShowDBusCallFinishedEP23QDBusPendingCallWatcher+CDp
					; _ZN16DBusMenuImporter21slotGetLayoutFinishedEP23QDBusPendingCallWatcher+CAp
					; DATA XREF: ...
		extrn _ZN21QDBusPendingReplyData12setMetaTypesEiPKi:dword
					; CODE XREF: _ZN16DBusMenuImporter31slotAboutToShowDBusCallFinishedEP23QDBusPendingCallWatcher+F6p
					; _ZN16DBusMenuImporter21slotGetLayoutFinishedEP23QDBusPendingCallWatcher+112p
					; DATA XREF: ...
		extrn _ZNK16QDBusPendingCall7isErrorEv:dword
					; CODE XREF: _ZN16DBusMenuImporter31slotAboutToShowDBusCallFinishedEP23QDBusPendingCallWatcher+10Cp
					; DATA XREF: _ZN16DBusMenuImporter31slotAboutToShowDBusCallFinishedEP23QDBusPendingCallWatcher+10Cr
		extrn _ZNK16QDBusPendingCall5errorEv:dword
					; CODE XREF: _ZN16DBusMenuImporter31slotAboutToShowDBusCallFinishedEP23QDBusPendingCallWatcher+131p
					; _ZN16DBusMenuImporter21slotGetLayoutFinishedEP23QDBusPendingCallWatcher+150p
					; DATA XREF: ...
		extrn _ZNK10QDBusError7messageEv:dword
					; CODE XREF: _ZN16DBusMenuImporter31slotAboutToShowDBusCallFinishedEP23QDBusPendingCallWatcher+151p
					; _ZN16DBusMenuImporter21slotGetLayoutFinishedEP23QDBusPendingCallWatcher+173p
					; DATA XREF: ...
		extrn _ZN21QDBusPendingReplyDataD2Ev:dword
					; CODE XREF: _ZN16DBusMenuImporter31slotAboutToShowDBusCallFinishedEP23QDBusPendingCallWatcher+426p
					; sub_6FFD014F+D1p ...
		extrn _ZNK21QDBusPendingReplyData10argumentAtEi:dword
					; CODE XREF: _ZN16DBusMenuImporter31slotAboutToShowDBusCallFinishedEP23QDBusPendingCallWatcher+464p
					; _ZN16DBusMenuImporter21slotGetLayoutFinishedEP23QDBusPendingCallWatcher+422p
					; DATA XREF: ...
		extrn _ZNK13QDBusArgumentrsERb:dword
					; CODE XREF: _ZN16DBusMenuImporter31slotAboutToShowDBusCallFinishedEP23QDBusPendingCallWatcher+94Cp
					; DATA XREF: _ZN16DBusMenuImporter31slotAboutToShowDBusCallFinishedEP23QDBusPendingCallWatcher+94Cr
		extrn _ZNK13QDBusArgument10beginArrayEv:dword
					; CODE XREF: _ZrsRK13QDBusArgumentR18DBusMenuLayoutItem+70p
					; sub_6FFDC290+45p ...
		extrn _ZNK13QDBusArgument5atEndEv:dword
					; DATA XREF: _ZrsRK13QDBusArgumentR18DBusMenuLayoutItem+90r
					; sub_6FFDC290:loc_6FFDC33Dr ...
		extrn _ZNK13QDBusArgumentrsER11QStringList:dword
					; CODE XREF: _ZrsRK13QDBusArgumentR16DBusMenuItemKeys+33p
					; sub_6FFDC290+F1p ...
		extrn _ZNK13QDBusArgument8endArrayEv:dword
					; CODE XREF: _ZrsRK13QDBusArgumentR18DBusMenuLayoutItem+427p
					; sub_6FFDC290+18Ep ...
		extrn _ZNK16QDBusPendingCall7isValidEv:dword
					; CODE XREF: _ZN16DBusMenuImporter21slotGetLayoutFinishedEP23QDBusPendingCallWatcher+128p
					; DATA XREF: _ZN16DBusMenuImporter21slotGetLayoutFinishedEP23QDBusPendingCallWatcher+128r
		extrn _ZN13QDBusMetaType25registerMarshallOperatorsEiPFvR13QDBusArgumentPKvEPFvRKS0_PvE:dword
					; CODE XREF: sub_6FFD2F30+3Cp
					; sub_6FFD2F30+63p ...
		extrn _ZN13QDBusArgument10beginArrayEi:dword
					; CODE XREF: _ZlsR13QDBusArgumentRK18DBusMenuLayoutItem+1B8p
					; sub_6FFDC040+1Ap ...
		extrn _ZN13QDBusArgumentlsERK11QStringList:dword
					; CODE XREF: _ZlsR13QDBusArgumentRK16DBusMenuItemKeys+35p
					; sub_6FFDC040+4Cp
					; DATA XREF: ...
		extrn _ZN13QDBusArgument8endArrayEv:dword
					; CODE XREF: _ZlsR13QDBusArgumentRK18DBusMenuLayoutItem+2FAp
					; DATA XREF: _ZlsR13QDBusArgumentRK18DBusMenuLayoutItem+2FAr ...
		extrn _ZNK13QDBusArgument14beginStructureEv:dword
					; CODE XREF: _ZrsRK13QDBusArgumentR16DBusMenuItemKeys+16p
					; _ZrsRK13QDBusArgumentR12DBusMenuItem+16p ...
		extrn _ZNK13QDBusArgumentrsERi:dword
					; CODE XREF: _ZrsRK13QDBusArgumentR16DBusMenuItemKeys+26p
					; _ZrsRK13QDBusArgumentR12DBusMenuItem+26p ...
		extrn _ZNK13QDBusArgument12endStructureEv:dword
					; CODE XREF: _ZrsRK13QDBusArgumentR16DBusMenuItemKeys+3Cp
					; _ZrsRK13QDBusArgumentR12DBusMenuItem+3Bp ...
		extrn _ZN13QDBusArgument14beginStructureEv:dword
					; CODE XREF: _ZlsR13QDBusArgumentRK16DBusMenuItemKeys+16p
					; _ZlsR13QDBusArgumentRK12DBusMenuItem+3Fp ...
		extrn _ZN13QDBusArgumentlsEi:dword
					; CODE XREF: _ZlsR13QDBusArgumentRK16DBusMenuItemKeys+28p
					; _ZlsR13QDBusArgumentRK12DBusMenuItem+54p ...
		extrn _ZN13QDBusArgument12endStructureEv:dword
					; CODE XREF: _ZlsR13QDBusArgumentRK16DBusMenuItemKeys+3Ep
					; _ZlsR13QDBusArgumentRK12DBusMenuItem+159p ...
		extrn _ZN13QDBusArgument8beginMapEii:dword
					; CODE XREF: _ZlsR13QDBusArgumentRK12DBusMenuItem+88p
					; _ZlsR13QDBusArgumentRK18DBusMenuLayoutItem+8Ep
					; DATA XREF: ...
		extrn _ZN13QDBusArgument13beginMapEntryEv:dword
					; DATA XREF: _ZlsR13QDBusArgumentRK12DBusMenuItem+A5r
					; _ZlsR13QDBusArgumentRK18DBusMenuLayoutItem+B1r
		extrn _ZN13QDBusArgumentlsERK7QString:dword
					; DATA XREF: _ZlsR13QDBusArgumentRK12DBusMenuItem+B3r
					; _ZlsR13QDBusArgumentRK18DBusMenuLayoutItem+BDr
		extrn _ZN13QDBusArgumentlsERK12QDBusVariant:dword
					; CODE XREF: _ZlsR13QDBusArgumentRK12DBusMenuItem+10Dp
					; _ZlsR13QDBusArgumentRK18DBusMenuLayoutItem+13Cp ...
		extrn _ZN13QDBusArgument11endMapEntryEv:dword
					; CODE XREF: _ZlsR13QDBusArgumentRK12DBusMenuItem+12Cp
					; _ZlsR13QDBusArgumentRK18DBusMenuLayoutItem+15Ep
					; DATA XREF: ...
		extrn _ZN13QDBusArgument6endMapEv:dword
					; CODE XREF: _ZlsR13QDBusArgumentRK12DBusMenuItem+14Dp
					; _ZlsR13QDBusArgumentRK18DBusMenuLayoutItem+18Fp
					; DATA XREF: ...
		extrn _ZNK13QDBusArgument8beginMapEv:dword ; CODE XREF:	sub_6FFEAF40+45p
					; DATA XREF: sub_6FFEAF40+45r
		extrn _ZNK13QDBusArgument13beginMapEntryEv:dword
					; CODE XREF: sub_6FFEAF40+126p
					; DATA XREF: sub_6FFEAF40+126r
		extrn _ZNK13QDBusArgumentrsER7QString:dword ; CODE XREF: sub_6FFEAF40+139p
					; DATA XREF: sub_6FFEAF40+139r
		extrn _ZrsRK13QDBusArgumentR8QVariant:dword ; CODE XREF: sub_6FFEAF40+149p
					; DATA XREF: sub_6FFEAF40+149r
		extrn _ZNK13QDBusArgument11endMapEntryEv:dword
					; CODE XREF: sub_6FFEAF40+2D8p
					; DATA XREF: sub_6FFEAF40+2D8r
		extrn _ZNK13QDBusArgument6endMapEv:dword ; CODE	XREF: sub_6FFEAF40+35Bp
					; DATA XREF: sub_6FFEAF40+35Br
		extrn _ZNK13QDBusArgumentrsER12QDBusVariant:dword
					; CODE XREF: _ZrsRK13QDBusArgumentR18DBusMenuLayoutItem+223p
					; DATA XREF: _ZrsRK13QDBusArgumentR18DBusMenuLayoutItem+223r
		extrn _ZN20QDBusAbstractAdaptor16staticMetaObjectE:dword
					; DATA XREF: sub_6FFD55E0r
		extrn _ZN20QDBusAbstractAdaptor11qt_metacastEPKc:dword
					; DATA XREF: sub_6FFD56E0:loc_6FFD5733r
		extrn _ZN20QDBusAbstractAdaptorD2Ev:dword ; CODE XREF: sub_6FFD57B0+11p
					; sub_6FFD5897+16p ...
		extrn _ZN20QDBusAbstractAdaptorC2EP7QObject:dword
					; CODE XREF: sub_6FFD5820+43p
					; .text:6FFD5913p
					; DATA XREF: ...
		extrn _ZN20QDBusAbstractAdaptor19setAutoRelaySignalsEb:dword
					; CODE XREF: sub_6FFD5820+64p
					; .text:6FFD5934p
					; DATA XREF: ...
		extrn _ZN20QDBusAbstractAdaptor11qt_metacallEN11QMetaObject4CallEiPPv:dword
					; CODE XREF: sub_6FFD64B0+51p
					; DATA XREF: sub_6FFD64B0+51r

;
; Imports from QtGui4.dll
;
		extrn _ZNK7QAction4menuEv:dword	; CODE XREF: sub_6FFC2AE0+29Bp
					; _ZN16DBusMenuExporter19doEmitLayoutUpdatedEv+12Dp ...
		extrn _ZNK7QAction4iconEv:dword
					; CODE XREF: _ZN16DBusMenuExporter17iconNameForActionEP7QAction+4Ep
					; sub_6FFC24B0+147p ...
		extrn _ZNK7QAction19isIconVisibleInMenuEv:dword
					; CODE XREF: _ZN16DBusMenuExporter17iconNameForActionEP7QAction+64p
					; DATA XREF: _ZN16DBusMenuExporter17iconNameForActionEP7QAction+64r
		extrn _ZN5QIconD1Ev:dword
					; CODE XREF: _ZN16DBusMenuExporter17iconNameForActionEP7QAction+8Bp
					; sub_6FFC244E+1Cp ...
		extrn _ZNK5QIcon6isNullEv:dword
					; CODE XREF: _ZN16DBusMenuExporter17iconNameForActionEP7QAction+A9p
					; sub_6FFC24B0+160p
					; DATA XREF: ...
		extrn _ZNK5QIcon4nameEv:dword
					; CODE XREF: _ZN16DBusMenuExporter17iconNameForActionEP7QAction+C0p
					; DATA XREF: _ZN16DBusMenuExporter17iconNameForActionEP7QAction+C0r
		extrn _ZNK5QIcon6pixmapERK5QSizeNS_4ModeENS_5StateE:dword
					; CODE XREF: sub_6FFC24B0+1BEp
					; DATA XREF: sub_6FFC24B0+1BEr
		extrn _ZNK7QPixmap4saveEP9QIODevicePKci:dword ;	CODE XREF: sub_6FFC24B0+1EEp
					; DATA XREF: sub_6FFC24B0+1EEr
		extrn _ZN7QPixmapD1Ev:dword ; CODE XREF: sub_6FFC24B0+204p
					; sub_6FFC27A8+105p ...
		extrn _ZNK7QAction9isVisibleEv:dword ; CODE XREF: sub_6FFC28C0+C3p
					; sub_6FFC2AE0+1FDp ...
		extrn _ZNK7QAction4textEv:dword	; CODE XREF: sub_6FFC2AE0+6Cp
					; sub_6FFC3520+1E0p ...
		extrn _ZNK7QAction9isEnabledEv:dword ; CODE XREF: sub_6FFC2AE0+15Fp
					; DATA XREF: sub_6FFC2AE0+15Fr
		extrn _ZNK7QAction11isCheckableEv:dword	; CODE XREF: sub_6FFC2AE0+339p
					; sub_6FFE1870+377p
					; DATA XREF: ...
		extrn _ZNK7QAction11actionGroupEv:dword	; CODE XREF: sub_6FFC2AE0+34Dp
					; sub_6FFC2AE0+35Dp
					; DATA XREF: ...
		extrn _ZNK12QActionGroup11isExclusiveEv:dword ;	CODE XREF: sub_6FFC2AE0+366p
					; DATA XREF: sub_6FFC2AE0+366r
		extrn _ZNK7QAction9isCheckedEv:dword ; CODE XREF: sub_6FFC2AE0+40Ep
					; DATA XREF: sub_6FFC2AE0+40Er
		extrn _ZNK7QAction8shortcutEv:dword ; CODE XREF: sub_6FFC2AE0+4CCp
					; DATA XREF: sub_6FFC2AE0+4CCr
		extrn _ZNK12QKeySequence7isEmptyEv:dword ; CODE	XREF: sub_6FFC2AE0+4E5p
					; DATA XREF: sub_6FFC2AE0+4E5r
		extrn _ZN12QKeySequenceD1Ev:dword ; CODE XREF: sub_6FFC2AE0+5D9p
					; sub_6FFC324B+14Cp ...
		extrn _ZN13QWidgetAction16staticMetaObjectE:dword
					; DATA XREF: sub_6FFC3520+166r
		extrn _ZNK13QWidgetAction13defaultWidgetEv:dword
					; CODE XREF: sub_6FFC3520+189p
					; DATA XREF: sub_6FFC3520+189r
		extrn _ZN11QToolButton16staticMetaObjectE:dword
					; DATA XREF: sub_6FFC3520+193r
		extrn _ZNK11QToolButton13defaultActionEv:dword
					; CODE XREF: sub_6FFC3520+1B6p
					; DATA XREF: sub_6FFC3520+1B6r
		extrn _ZNK7QAction11isSeparatorEv:dword	; CODE XREF: sub_6FFC3D40+EFp
					; DATA XREF: sub_6FFC3D40+EFr ...
		extrn _ZNK7QWidget7actionsEv:dword ; CODE XREF:	sub_6FFC4330+47p
					; sub_6FFC56B0+E9p ...
		extrn _ZN7QAction10setVisibleEb:dword ;	CODE XREF: sub_6FFC4330+170p
					; sub_6FFC4330+1E7p ...
		extrn _ZNK5QMenu21separatorsCollapsibleEv:dword
					; CODE XREF: _ZN16DBusMenuExporter19doEmitLayoutUpdatedEv+14Ap
					; DATA XREF: _ZN16DBusMenuExporter19doEmitLayoutUpdatedEv+14Ar
		extrn _ZN5QIconC1Ev:dword
					; CODE XREF: _ZN16DBusMenuImporter11iconForNameERK7QString+Bp
					; sub_6FFE1870+4DDp ...
		extrn _ZN5QMenuC1EP7QWidget:dword
					; CODE XREF: _ZN16DBusMenuImporter10createMenuEP7QWidget+59p
					; DATA XREF: _ZN16DBusMenuImporter10createMenuEP7QWidget+59r
		extrn _ZN5QMenu16staticMetaObjectE:dword
					; DATA XREF: _ZN16DBusMenuImporter19slotMenuAboutToHideEv+49r
					; _ZN16DBusMenuImporter19slotMenuAboutToShowEv+5Er
		extrn _ZNK5QMenu10menuActionEv:dword
					; CODE XREF: _ZN16DBusMenuImporter19slotMenuAboutToHideEv+6Cp
					; _ZN16DBusMenuImporter19slotMenuAboutToShowEv+8Dp
					; DATA XREF: ...
		extrn _ZN7QPixmapC1Ev:dword ; CODE XREF: sub_6FFE24B0+142p
					; DATA XREF: sub_6FFE24B0+142r
		extrn _ZN7QPixmap12loadFromDataEPKhjPKc6QFlagsIN2Qt19ImageConversionFlagEE:dword
					; CODE XREF: sub_6FFE24B0+17Fp
					; DATA XREF: sub_6FFE24B0+17Fr
		extrn _ZN7QAction7setIconERK5QIcon:dword ; CODE	XREF: sub_6FFE1870+4FAp
					; sub_6FFE1870+663p ...
		extrn _ZN5QIconC1ERK7QPixmap:dword ; CODE XREF:	sub_6FFE24B0+458p
					; DATA XREF: sub_6FFE24B0+458r
		extrn _ZN7QAction7setTextERK7QString:dword ; CODE XREF:	sub_6FFE1870+147p
					; DATA XREF: sub_6FFE1870+147r
		extrn _ZN7QAction10setEnabledEb:dword ;	CODE XREF: sub_6FFE1870+237p
					; DATA XREF: sub_6FFE1870+237r
		extrn _ZN7QAction10setCheckedEb:dword ;	CODE XREF: sub_6FFE1870+3B9p
					; DATA XREF: sub_6FFE1870+3B9r
		extrn _ZN7QAction11setShortcutERK12QKeySequence:dword
					; CODE XREF: sub_6FFE1870+819p
					; DATA XREF: sub_6FFE1870+819r
		extrn _ZN7QActionC1EP7QObject:dword ; CODE XREF: sub_6FFE0440+AFp
					; DATA XREF: sub_6FFE0440+AFr
		extrn _ZN7QAction12setSeparatorEb:dword	; CODE XREF: sub_6FFE0440+21Fp
					; DATA XREF: sub_6FFE0440+21Fr
		extrn _ZN7QAction7setMenuEP5QMenu:dword	; CODE XREF: sub_6FFE0440+42Dp
					; DATA XREF: sub_6FFE0440+42Dr
		extrn _ZN7QAction12setCheckableEb:dword	; CODE XREF: sub_6FFE0440+4EFp
					; DATA XREF: sub_6FFE0440+4EFr
		extrn _ZN11QToolButtonC1EP7QWidget:dword ; CODE	XREF: sub_6FFE0440+82Fp
					; DATA XREF: sub_6FFE0440+82Fr
		extrn _ZN5QFontC1ERKS_:dword ; CODE XREF: sub_6FFE0440+855p
					; DATA XREF: sub_6FFE0440+855r
		extrn _ZN5QFont9setWeightEi:dword ; CODE XREF: sub_6FFE0440+873p
					; DATA XREF: sub_6FFE0440+873r
		extrn _ZN7QWidget7setFontERK5QFont:dword ; CODE	XREF: sub_6FFE0440+889p
					; DATA XREF: sub_6FFE0440+889r
		extrn _ZN15QAbstractButton7setIconERK5QIcon:dword
					; CODE XREF: sub_6FFE0440+8C0p
					; DATA XREF: sub_6FFE0440+8C0r
		extrn _ZN15QAbstractButton7setTextERK7QString:dword
					; CODE XREF: sub_6FFE0440+90Dp
					; DATA XREF: sub_6FFE0440+90Dr
		extrn _ZN15QAbstractButton7setDownEb:dword ; CODE XREF:	sub_6FFE0440+93Fp
					; DATA XREF: sub_6FFE0440+93Fr
		extrn _ZN11QToolButton18setToolButtonStyleEN2Qt15ToolButtonStyleE:dword
					; CODE XREF: sub_6FFE0440+956p
					; DATA XREF: sub_6FFE0440+956r
		extrn _ZN13QWidgetActionC1EP7QObject:dword ; CODE XREF:	sub_6FFE0440+982p
					; DATA XREF: sub_6FFE0440+982r
		extrn _ZN13QWidgetAction16setDefaultWidgetEP7QWidget:dword
					; CODE XREF: sub_6FFE0440+9A5p
					; DATA XREF: sub_6FFE0440+9A5r
		extrn _ZN5QFontD1Ev:dword ; CODE XREF: sub_6FFE0440+9C7p
					; sub_6FFE0440+FE9p
					; DATA XREF: ...
		extrn _ZN12QActionGroupC1EP7QObject:dword ; CODE XREF: sub_6FFE0440+11EFp
					; DATA XREF: sub_6FFE0440+11EFr
		extrn _ZN12QActionGroup9addActionEP7QAction:dword
					; CODE XREF: sub_6FFE0440+1212p
					; DATA XREF: sub_6FFE0440+1212r
		extrn _ZN5QMenu5clearEv:dword
					; CODE XREF: _ZN16DBusMenuImporter21slotGetLayoutFinishedEP23QDBusPendingCallWatcher+567p
					; DATA XREF: _ZN16DBusMenuImporter21slotGetLayoutFinishedEP23QDBusPendingCallWatcher+567r
		extrn _ZN7QWidget9addActionEP7QAction:dword
					; CODE XREF: _ZN16DBusMenuImporter21slotGetLayoutFinishedEP23QDBusPendingCallWatcher+6F0p
					; DATA XREF: _ZN16DBusMenuImporter21slotGetLayoutFinishedEP23QDBusPendingCallWatcher+6F0r
		extrn _ZN12QKeySequence10fromStringERK7QStringNS_14SequenceFormatE:dword
					; CODE XREF: _ZNK16DBusMenuShortcut13toKeySequenceEv+218p
					; DATA XREF: _ZNK16DBusMenuShortcut13toKeySequenceEv+218r
		extrn _ZNK12QKeySequence8toStringENS_14SequenceFormatE:dword
					; CODE XREF: _ZN16DBusMenuShortcut15fromKeySequenceERK12QKeySequence+4Ep
					; DATA XREF: _ZN16DBusMenuShortcut15fromKeySequenceERK12QKeySequence+4Er

;
; Imports from KERNEL32.dll
;
; BOOL __stdcall CloseHandle(HANDLE hObject)
		extrn CloseHandle:dword	; CODE XREF: .text:6FFDBA7Dp
					; DATA XREF: .text:6FFDBA7Dr
; HANDLE __stdcall CreateSemaphoreA(LPSECURITY_ATTRIBUTES lpSemaphoreAttributes, LONG lInitialCount, LONG lMaximumCount, LPCSTR	lpName)
		extrn CreateSemaphoreA:dword ; CODE XREF: .text:6FFDBA1Bp
					; sub_6FFDBA30+2Dp
					; DATA XREF: ...
; void __stdcall DeleteCriticalSection(LPCRITICAL_SECTION lpCriticalSection)
		extrn DeleteCriticalSection:dword ; CODE XREF: sub_6FFDB130+41p
					; DATA XREF: sub_6FFDB130+41r
; void __stdcall EnterCriticalSection(LPCRITICAL_SECTION lpCriticalSection)
		extrn EnterCriticalSection:dword ; CODE	XREF: sub_6FFDB0B0+1Fp
					; .text:6FFDB1DFp ...
; HANDLE __stdcall GetCurrentProcess()
		extrn GetCurrentProcess:dword ;	CODE XREF: .text:6FFDAFB8p
					; DATA XREF: .text:6FFDAFB8r
; DWORD	__stdcall GetCurrentProcessId()
		extrn GetCurrentProcessId:dword	; CODE XREF: sub_6FFDAFE0+6Cp
					; DATA XREF: sub_6FFDAFE0+6Cr
; DWORD	__stdcall GetCurrentThreadId()
		extrn GetCurrentThreadId:dword ; CODE XREF: sub_6FFDAFE0+74p
					; .text:6FFDB8C8p ...
; DWORD	__stdcall GetLastError()
		extrn GetLastError:dword ; CODE	XREF: sub_6FFDB0B0+4Cp
					; sub_6FFDBAC0+Bp
					; DATA XREF: ...
; HMODULE __stdcall GetModuleHandleA(LPCSTR lpModuleName)
		extrn GetModuleHandleA:dword ; CODE XREF: sub_6FFC1430+16p
					; .text:6FFDB691p
					; DATA XREF: ...
; FARPROC __stdcall GetProcAddress(HMODULE hModule, LPCSTR lpProcName)
		extrn GetProcAddress:dword ; CODE XREF:	sub_6FFC1430+35p
					; DATA XREF: sub_6FFC1430+35r
; void __stdcall GetSystemTimeAsFileTime(LPFILETIME lpSystemTimeAsFileTime)
		extrn GetSystemTimeAsFileTime:dword ; CODE XREF: sub_6FFDAFE0+57p
					; DATA XREF: sub_6FFDAFE0+57r
; DWORD	__stdcall GetTickCount()
		extrn GetTickCount:dword ; CODE	XREF: sub_6FFDAFE0+7Cp
					; DATA XREF: sub_6FFDAFE0+7Cr
; void __stdcall InitializeCriticalSection(LPCRITICAL_SECTION lpCriticalSection)
		extrn InitializeCriticalSection:dword ;	CODE XREF: sub_6FFDB130+77p
					; DATA XREF: sub_6FFDB130+77r
; PVOID	__stdcall InterlockedCompareExchange(PVOID *Destination, PVOID Exchange, PVOID Comperand)
		extrn InterlockedCompareExchange:dword
; LONG __stdcall InterlockedExchange(LPLONG Target, LONG Value)
		extrn InterlockedExchange:dword
; void __stdcall LeaveCriticalSection(LPCRITICAL_SECTION lpCriticalSection)
		extrn LeaveCriticalSection:dword ; CODE	XREF: sub_6FFDB0B0+6Cp
					; .text:6FFDB216p ...
; HMODULE __stdcall LoadLibraryW(LPCWSTR lpLibFileName)
		extrn LoadLibraryW:dword ; CODE	XREF: .text:6FFDB6ACp
					; DATA XREF: .text:6FFDB6ACr
; BOOL __stdcall QueryPerformanceCounter(LARGE_INTEGER *lpPerformanceCount)
		extrn QueryPerformanceCounter:dword ; CODE XREF: sub_6FFDAFE0+8Bp
					; DATA XREF: sub_6FFDAFE0+8Br
; BOOL __stdcall ReleaseSemaphore(HANDLE hSemaphore, LONG lReleaseCount, LPLONG	lpPreviousCount)
		extrn ReleaseSemaphore:dword ; CODE XREF: .text:6FFDB84Cp
					; sub_6FFDB870+31p
					; DATA XREF: ...
; void __stdcall SetLastError(DWORD dwErrCode)
		extrn SetLastError:dword ; CODE	XREF: sub_6FFDBAC0+28p
					; DATA XREF: sub_6FFDBAC0+28r
; LPTOP_LEVEL_EXCEPTION_FILTER __stdcall SetUnhandledExceptionFilter(LPTOP_LEVEL_EXCEPTION_FILTER lpTopLevelExceptionFilter)
		extrn SetUnhandledExceptionFilter:dword	; CODE XREF: .text:6FFDAF9Fp
					; DATA XREF: .text:6FFDAF9Fr
; void __stdcall Sleep(DWORD dwMilliseconds)
		extrn Sleep:dword	; CODE XREF: sub_6FFC1040+37p
					; sub_6FFC1040+B0p ...
; BOOL __stdcall TerminateProcess(HANDLE hProcess, UINT	uExitCode)
		extrn TerminateProcess:dword ; CODE XREF: .text:6FFDAFC9p
					; DATA XREF: .text:6FFDAFC9r
; DWORD	__stdcall TlsAlloc()
		extrn TlsAlloc:dword	; CODE XREF: sub_6FFDBB30+13p
					; DATA XREF: sub_6FFDBB30+13r
; BOOL __stdcall TlsFree(DWORD dwTlsIndex)
		extrn TlsFree:dword	; CODE XREF: sub_6FFDBB00+Ap
					; DATA XREF: sub_6FFDBB00+Ar
; LPVOID __stdcall TlsGetValue(DWORD dwTlsIndex)
		extrn TlsGetValue:dword	; CODE XREF: sub_6FFDB0B0+45p
					; sub_6FFDBAC0+1Ap
					; DATA XREF: ...
; BOOL __stdcall TlsSetValue(DWORD dwTlsIndex, LPVOID lpTlsValue)
		extrn TlsSetValue:dword	; CODE XREF: sub_6FFDBA90+12p
					; DATA XREF: sub_6FFDBA90+12r
; LONG __stdcall UnhandledExceptionFilter(struct _EXCEPTION_POINTERS *ExceptionInfo)
		extrn UnhandledExceptionFilter:dword ; CODE XREF: .text:6FFDAFAFp
					; DATA XREF: .text:6FFDAFAFr
; BOOL __stdcall VirtualProtect(LPVOID lpAddress, DWORD	dwSize,	DWORD flNewProtect, PDWORD lpflOldProtect)
		extrn VirtualProtect:dword ; CODE XREF:	sub_6FFDAAB0+10Bp
					; sub_6FFDAC00+1B2p
					; DATA XREF: ...
; DWORD	__stdcall VirtualQuery(LPCVOID lpAddress, PMEMORY_BASIC_INFORMATION lpBuffer, DWORD dwLength)
		extrn VirtualQuery:dword ; CODE	XREF: sub_6FFDAAB0+A8p
					; sub_6FFDAC00+184p
					; DATA XREF: ...
; DWORD	__stdcall WaitForSingleObject(HANDLE hHandle, DWORD dwMilliseconds)
		extrn WaitForSingleObject:dword	; CODE XREF: .text:6FFDB943p
					; sub_6FFDB990+2Ep
					; DATA XREF: ...

;
; Imports from msvcrt.dll
;
; int __cdecl _write(int, const	void *,	unsigned int)
		extrn __imp__write:dword ; DATA	XREF: _writer

;
; Imports from msvcrt.dll
;
		extrn __imp___dllonexit:dword ;	DATA XREF: __dllonexitr
		extrn __imp__amsg_exit:dword ; DATA XREF: _amsg_exitr
		extrn __imp__initterm:dword ; DATA XREF: _inittermr
; FILE iob[]
		extrn _iob:dword	; DATA XREF: sub_6FFDAA50+4r
					; sub_6FFDAA50+3Cr ...
		extrn __imp__lock:dword	; DATA XREF: _lockr
; _onexit_t __cdecl onexit(_onexit_t)
		extrn _onexit:dword	; CODE XREF: sub_6FFDA870+A3p
					; DATA XREF: sub_6FFDA870+A3r
		extrn __imp__unlock:dword ; DATA XREF: _unlockr
; void __cdecl __noreturn abort()
		extrn __imp_abort:dword	; DATA XREF: abortr
; void *__cdecl	calloc(size_t, size_t)
		extrn __imp_calloc:dword ; DATA	XREF: callocr
; int __cdecl fputc(int, FILE *)
		extrn __imp_fputc:dword	; DATA XREF: fputcr
; int __cdecl fputs(const char *, FILE *)
		extrn __imp_fputs:dword	; DATA XREF: fputsr
; void __cdecl free(void *)
		extrn __imp_free:dword	; DATA XREF: freer
; size_t __cdecl fwrite(const void *, size_t, size_t, FILE *)
		extrn __imp_fwrite:dword ; DATA	XREF: fwriter
; void *__cdecl	malloc(size_t)
		extrn __imp_malloc:dword ; DATA	XREF: mallocr
; void *__cdecl	memcpy(void *, const void *, size_t)
		extrn __imp_memcpy:dword ; DATA	XREF: memcpyr
; void *__cdecl	realloc(void *,	size_t)
		extrn __imp_realloc:dword ; DATA XREF: reallocr
; int sprintf(char *, const char *, ...)
		extrn __imp_sprintf:dword ; DATA XREF: sprintfr
; int __cdecl strcmp(const char	*, const char *)
		extrn __imp_strcmp:dword ; DATA	XREF: strcmpr
; char *__cdecl	strcpy(char *, const char *)
		extrn __imp_strcpy:dword ; DATA	XREF: strcpyr
; size_t __cdecl strlen(const char *)
		extrn __imp_strlen:dword ; DATA	XREF: strlenr
; int __cdecl strncmp(const char *, const char *, size_t)
		extrn __imp_strncmp:dword ; DATA XREF: strncmpr
; int __cdecl vfprintf(FILE *, const char *, va_list)
		extrn __imp_vfprintf:dword ; DATA XREF:	vfprintfr

;
; Imports from libgcc_s_sjlj-1.dll
;
		extrn __imp__Unwind_SjLj_Resume:dword ;	DATA XREF: _Unwind_SjLj_Resumer
		extrn __imp__Unwind_SjLj_Register:dword	; DATA XREF: _Unwind_SjLj_Registerr
		extrn __imp__Unwind_SjLj_Unregister:dword
					; DATA XREF: _Unwind_SjLj_Unregisterr
		extrn __imp__Unwind_GetTextRelBase:dword
					; DATA XREF: _Unwind_GetTextRelBaser
		extrn __imp__Unwind_GetDataRelBase:dword
					; DATA XREF: _Unwind_GetDataRelBaser
		extrn __imp__Unwind_GetRegionStart:dword
					; DATA XREF: _Unwind_GetRegionStartr
		extrn __imp__Unwind_GetLanguageSpecificData:dword
					; DATA XREF: _Unwind_GetLanguageSpecificDatar
		extrn __imp__Unwind_GetIPInfo:dword ; DATA XREF: _Unwind_GetIPInfor
		extrn __imp__Unwind_SetGR:dword	; DATA XREF: _Unwind_SetGRr
		extrn __imp__Unwind_SetIP:dword	; DATA XREF: _Unwind_SetIPr
		extrn __imp__Unwind_DeleteException:dword
					; DATA XREF: _Unwind_DeleteExceptionr
		extrn __imp__Unwind_SjLj_Resume_or_Rethrow:dword
					; DATA XREF: _Unwind_SjLj_Resume_or_Rethrowr
		extrn __imp__Unwind_SjLj_RaiseException:dword
					; DATA XREF: _Unwind_SjLj_RaiseExceptionr


; Section 7. (virtual address 00040000)
; Virtual size			: 0000002C (	 44.)
; Section size in file		: 00000200 (	512.)
; Offset to raw	data for section: 0003C800
; Flags	C0300040: Data Readable	Writable
; Alignment	: 4 bytes
; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read/Write
_CRT		segment	dword public 'DATA' use32
		assume cs:_CRT
		;org 70000000h
dword_70000000	dd 0			; DATA XREF: sub_6FFC1040+1DDo
dword_70000004	dd 0			; DATA XREF: sub_6FFC1040+1D5o
dword_70000008	dd 0			; DATA XREF: sub_6FFC1040+1C9o
		dd offset sub_6FFC1000
dword_70000010	dd 2 dup(0)		; DATA XREF: sub_6FFC1040+1C1o
TlsCallbacks	dd offset TlsCallback_0	; DATA XREF: .tls:TlsCallbacks_ptro
		dd offset TlsCallback_1
		dd 0
		align 8
dword_70000028	dd 76h dup(0)		; DATA XREF: TlsCallback_0:loc_6FFDA9E1o
					; TlsCallback_0+36o ...
		align 1000h
_CRT		ends

; Section 8. (virtual address 00041000)
; Virtual size			: 00000020 (	 32.)
; Section size in file		: 00000200 (	512.)
; Offset to raw	data for section: 0003CA00
; Flags	C0300040: Data Readable	Writable
; Alignment	: 4 bytes
; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read/Write
_tls		segment	dword public 'DATA' use32
		assume cs:_tls
		;org 70001000h
TlsDirectory	dd offset TlsStart
TlsEnd_ptr	dd offset TlsEnd
TlsIndex_ptr	dd offset TlsIndex
TlsCallbacks_ptr dd offset TlsCallbacks
TlsSizeOfZeroFill dd 0
TlsCharacteristics dd 0
		db 0
TlsStart	db 3 dup(0)		; DATA XREF: .tls:TlsDirectoryo
TlsEnd		dd 79h dup(0)		; DATA XREF: .tls:TlsEnd_ptro
		align 1000h
_tls		ends


		end DllEntryPoint
