;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2015 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-3677-7074-51			    |
; |		Michalis Polychronakis,	Stony Brook University		    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	68F4C23B1E2BA7F1A13AE131EADA4A62
; Input	CRC32 :	8C6745A1

; File Name   :	C:\compspace\compare\gpg\dlls\full\dbus-monitor.exe
; Format      :	Portable executable for	80386 (PE)
; Imagebase   :	400000
; Section 1. (virtual address 00001000)
; Virtual size			: 00002E84 (  11908.)
; Section size in file		: 00003000 (  12288.)
; Offset to raw	data for section: 00000400
; Flags	60500060: Text Data Executable Readable
; Alignment	: 16 bytes

		include	uni.inc	; see unicode subdir of	ida for	info on	unicode

		.686p
		.mmx
		.model flat

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 401000h
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
; [00000002 BYTES: COLLAPSED FUNCTION nullsub_1]
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_401010	proc near		; DATA XREF: .CRT:00408004o

var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch

		sub	esp, 2Ch
		mov	eax, ds:dword_406028
		mov	[esp+2Ch+var_1C], offset dword_406024
		mov	[esp+2Ch+var_24], offset dword_406018
		mov	[esp+2Ch+var_28], offset dword_406014
		mov	ds:dword_406024, eax
		mov	eax, dword_404000
		mov	[esp+2Ch+var_2C], offset dword_406010
		mov	[esp+2Ch+var_20], eax
		call	__getmainargs
		mov	ds:dword_40601C, eax
		add	esp, 2Ch
		retn
sub_401010	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_401060	proc near		; DATA XREF: .CRT:00408010o

var_1C		= dword	ptr -1Ch

		sub	esp, 1Ch
		cmp	word ptr ds:400000h, 5A4Dh
		mov	ds:dword_406030, 1
		mov	ds:dword_406034, 1
		mov	ds:dword_406038, 1
		mov	ds:dword_40603C, 1
		jz	short loc_401102

loc_401096:				; CODE XREF: sub_401060+B7j
					; sub_401060+CBj ...
		xor	eax, eax

loc_401098:				; CODE XREF: sub_401060+EAj
					; sub_401060+126j
		mov	ecx, ds:dword_406040
		mov	ds:dword_406020, eax
		test	ecx, ecx
		jz	short loc_4010F4
		mov	[esp+1Ch+var_1C], 2
		call	__set_app_type

loc_4010B3:				; CODE XREF: sub_401060+A0j
		mov	[esp+1Ch+var_1C], 0FFFFFFFFh
		call	sub_402BA0
		mov	edx, ds:dword_406044
		mov	ds:dword_4063D4, eax
		mov	ds:dword_4063D8, eax
		mov	eax, ds:_fmode
		mov	[eax], edx
		call	sub_402CF0
		mov	edx, ds:dword_406000
		test	edx, edx
		jz	short loc_4010EE
		mov	eax, ds:dword_406048
		test	eax, eax
		jz	short loc_401150

loc_4010EE:				; CODE XREF: sub_401060+83j
		xor	eax, eax
		add	esp, 1Ch
		retn
; ---------------------------------------------------------------------------

loc_4010F4:				; CODE XREF: sub_401060+45j
		mov	[esp+1Ch+var_1C], 1
		call	__set_app_type
		jmp	short loc_4010B3
; ---------------------------------------------------------------------------

loc_401102:				; CODE XREF: sub_401060+34j
		mov	eax, ds:40003Ch
		cmp	dword ptr [eax+400000h], 4550h
		lea	edx, [eax+400000h]
		jnz	loc_401096
		movzx	eax, word ptr [edx+18h]
		cmp	ax, 10Bh
		jz	short loc_401170
		cmp	ax, 20Bh
		jnz	loc_401096
		add	edx, 18h
		cmp	dword ptr [edx+6Ch], 0Eh
		jbe	loc_401096
		xor	eax, eax
		cmp	dword ptr [edx+0E0h], 0
		setnz	al
		jmp	loc_401098
; ---------------------------------------------------------------------------
		align 10h

loc_401150:				; CODE XREF: sub_401060+8Cj
		mov	[esp+1Ch+var_1C], offset sub_402C90
		call	ds:__setusermatherr
		xor	eax, eax
		mov	ds:dword_406048, 1
		add	esp, 1Ch
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_401170:				; CODE XREF: sub_401060+C5j
		cmp	dword ptr [edx+74h], 0Eh
		jbe	loc_401096
		xor	eax, eax
		cmp	dword ptr [edx+0E8h], 0
		setnz	al
		jmp	loc_401098
sub_401060	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn bp-based	frame

sub_401190	proc near		; CODE XREF: start+15j	.text:00401515j

dwMilliseconds	= dword	ptr -0B8h
lpProcName	= dword	ptr -0B4h
Size		= dword	ptr -0B0h
var_9D		= byte ptr -9Dh
var_70		= dword	ptr -70h
var_6C		= dword	ptr -6Ch
StartupInfo	= _STARTUPINFOA	ptr -5Ch

		push	ebp
		xor	eax, eax
		mov	ebp, esp
		mov	ecx, 11h
		push	edi
		push	esi
		push	ebx
		lea	edx, [ebp+StartupInfo]
		sub	esp, 0ACh
		mov	edi, edx
		rep stosd
		lea	eax, [esp+0B8h+var_9D]
		and	eax, 0FFFFFFF0h
		mov	dword ptr [eax], 0CCCCCCCCh
		mov	dword ptr [eax+4], 0CCCCCCCCh
		mov	dword ptr [eax+8], 0CCCCCCCCh
		mov	dword ptr [eax+0Ch], 0CCCCCCCCh
		mov	dword ptr [eax+10h], 0CCCCCCCCh
		mov	dword ptr [eax+14h], 0CCCCCCCCh
		mov	dword ptr [eax+18h], 0CCCCCCCCh
		mov	dword ptr [eax+1Ch], 0CCCCCCCCh
		and	esp, 0FFFFFFF0h
		mov	ebx, ds:dword_406040
		test	ebx, ebx
		jnz	loc_4014A2

loc_4011F9:				; CODE XREF: sub_401190+320j
		mov	eax, large fs:18h
		mov	esi, ds:Sleep
		mov	ebx, [eax+4]
		jmp	short loc_401224
; ---------------------------------------------------------------------------
		align 10h

loc_401210:				; CODE XREF: sub_401190+B1j
		cmp	eax, ebx
		jz	loc_401431
		mov	[esp+0B8h+dwMilliseconds], 3E8h	; dwMilliseconds
		call	esi ; Sleep
		sub	esp, 4

loc_401224:				; CODE XREF: sub_401190+78j
		mov	[esp+0B8h+Size], 0
		mov	[esp+0B8h+lpProcName], ebx
		mov	[esp+0B8h+dwMilliseconds], offset dword_4063DC
		call	sub_403CC0
		sub	esp, 0Ch
		test	eax, eax
		jnz	short loc_401210
		mov	eax, ds:dword_4063E0
		xor	ebx, ebx
		cmp	eax, 1
		jz	loc_401444

loc_401253:				; CODE XREF: sub_401190+2AEj
		mov	eax, ds:dword_4063E0
		test	eax, eax
		jz	loc_4014B5
		mov	ds:dword_406004, 1

loc_40126A:				; CODE XREF: sub_401190+343j
		mov	eax, ds:dword_4063E0
		cmp	eax, 1
		jz	loc_401460

loc_401278:				; CODE XREF: sub_401190+2C8j
		test	ebx, ebx
		jz	loc_401486

loc_401280:				; CODE XREF: sub_401190+2F0j
					; sub_401190+30Dj
		mov	eax, ds:off_4054F4
		test	eax, eax
		jz	short loc_4012A5
		mov	[esp+0B8h+Size], 0
		mov	[esp+0B8h+lpProcName], 2
		mov	[esp+0B8h+dwMilliseconds], 0
		call	eax ; TlsCallback_0
		sub	esp, 0Ch

loc_4012A5:				; CODE XREF: sub_401190+F7j
		call	sub_402EB0
		mov	[esp+0B8h+dwMilliseconds], offset TopLevelExceptionFilter ; lpTopLevelExceptionFilter
		call	ds:SetUnhandledExceptionFilter
		sub	esp, 4
		mov	ds:dword_406008, eax
		call	sub_403460
		mov	[esp+0B8h+lpProcName], offset ProcName ; "_set_invalid_parameter_handler"
		mov	[esp+0B8h+dwMilliseconds], eax ; hModule
		call	ds:GetProcAddress
		sub	esp, 8
		test	eax, eax
		jz	short loc_4012E5
		mov	[esp+0B8h+dwMilliseconds], offset nullsub_1
		call	eax

loc_4012E5:				; CODE XREF: sub_401190+14Aj
		call	sub_403730
		mov	ecx, ds:dword_406040
		test	ecx, ecx
		jz	short loc_401354
		mov	eax, ds:_acmdln
		xor	ecx, ecx
		mov	eax, [eax]
		jmp	short loc_401310
; ---------------------------------------------------------------------------
		align 10h

loc_401300:				; CODE XREF: sub_401190+186j
		test	dl, dl
		setnz	dl
		test	cl, cl
		jz	short loc_40132D
		test	dl, dl
		jz	short loc_40132D

loc_40130D:				; CODE XREF: sub_401190+18Bj
					; sub_401190+190j
		add	eax, 1

loc_401310:				; CODE XREF: sub_401190+16Dj
		movzx	edx, byte ptr [eax]
		cmp	dl, 20h
		jle	short loc_401300
		cmp	dl, 22h
		jnz	short loc_40130D
		xor	ecx, 1
		jmp	short loc_40130D
; ---------------------------------------------------------------------------

loc_401322:				; CODE XREF: sub_401190+19Fj
		add	eax, 1
		movzx	edx, byte ptr [eax]
		cmp	dl, 20h
		jg	short loc_401331

loc_40132D:				; CODE XREF: sub_401190+177j
					; sub_401190+17Bj
		test	dl, dl
		jnz	short loc_401322

loc_401331:				; CODE XREF: sub_401190+19Bj
		test	byte ptr [ebp+StartupInfo.dwFlags], 1
		mov	ds:dword_4063C8, eax
		mov	eax, 0Ah
		mov	ds:dword_4063D0, 400000h
		jnz	loc_401428

loc_40134F:				; CODE XREF: sub_401190+29Cj
		mov	ds:dword_4063CC, eax

loc_401354:				; CODE XREF: sub_401190+162j
		mov	eax, ds:dword_406010
		xor	ebx, ebx
		mov	[ebp+var_6C], eax
		lea	eax, ds:4[eax*4]
		mov	[esp+0B8h+dwMilliseconds], eax ; Size
		call	malloc
		mov	edx, [ebp+var_6C]
		mov	edi, ds:dword_406014
		mov	[ebp+var_70], eax
		xor	eax, eax
		test	edx, edx
		jle	short loc_4013BD
		nop

loc_401380:				; CODE XREF: sub_401190+225j
		mov	eax, [edi+ebx*4]
		mov	[esp+0B8h+dwMilliseconds], eax ; Str
		call	strlen
		lea	esi, [eax+1]
		mov	[esp+0B8h+dwMilliseconds], esi ; Size
		call	malloc
		mov	edx, [ebp+var_70]
		mov	[edx+ebx*4], eax
		mov	edx, [edi+ebx*4]
		add	ebx, 1
		mov	[esp+0B8h+Size], esi ; Size
		mov	[esp+0B8h+dwMilliseconds], eax ; Dst
		mov	[esp+0B8h+lpProcName], edx ; Src
		call	memcpy
		cmp	[ebp+var_6C], ebx
		jg	short loc_401380
		mov	eax, [ebp+var_6C]
		shl	eax, 2

loc_4013BD:				; CODE XREF: sub_401190+1EDj
		mov	edx, [ebp+var_70]
		mov	ds:dword_406014, edx
		mov	dword ptr [edx+eax], 0
		mov	eax, ds:__initenv
		mov	edx, ds:dword_406018
		mov	[eax], edx
		mov	eax, ds:dword_406018
		mov	[esp+0B8h+Size], eax
		mov	eax, ds:dword_406014
		mov	[esp+0B8h+lpProcName], eax
		mov	eax, ds:dword_406010
		mov	[esp+0B8h+dwMilliseconds], eax
		call	sub_401AC0
; ---------------------------------------------------------------------------
		mov	esi, ds:dword_406020
		test	esi, esi
		mov	ds:dword_40600C, eax
		jz	loc_4014D8
		mov	ebx, ds:dword_406004
		test	ebx, ebx
		jnz	short loc_401420
		call	_cexit
		mov	eax, ds:dword_40600C

loc_401420:				; CODE XREF: sub_401190+284j
		lea	esp, [ebp-0Ch]
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_401428:				; CODE XREF: sub_401190+1B9j
		movzx	eax, [ebp+StartupInfo.wShowWindow]
		jmp	loc_40134F
; ---------------------------------------------------------------------------

loc_401431:				; CODE XREF: sub_401190+82j
		mov	eax, ds:dword_4063E0
		mov	ebx, 1
		cmp	eax, 1
		jnz	loc_401253

loc_401444:				; CODE XREF: sub_401190+BDj
		mov	[esp+0B8h+dwMilliseconds], 1Fh
		call	_amsg_exit
		mov	eax, ds:dword_4063E0
		cmp	eax, 1
		jnz	loc_401278
		xchg	ax, ax

loc_401460:				; CODE XREF: sub_401190+E2j
		mov	[esp+0B8h+lpProcName], offset dword_408008
		mov	[esp+0B8h+dwMilliseconds], offset dword_408000
		call	_initterm
		test	ebx, ebx
		mov	ds:dword_4063E0, 2
		jnz	loc_401280

loc_401486:				; CODE XREF: sub_401190+EAj
		mov	[esp+0B8h+lpProcName], 0
		mov	[esp+0B8h+dwMilliseconds], offset dword_4063DC
		call	sub_403CF0
		sub	esp, 8
		jmp	loc_401280
; ---------------------------------------------------------------------------

loc_4014A2:				; CODE XREF: sub_401190+63j
		mov	[esp+0B8h+dwMilliseconds], edx ; lpStartupInfo
		call	ds:GetStartupInfoA
		sub	esp, 4
		xchg	ax, ax
		jmp	loc_4011F9
; ---------------------------------------------------------------------------

loc_4014B5:				; CODE XREF: sub_401190+CAj
		mov	ds:dword_4063E0, 1
		mov	[esp+0B8h+lpProcName], offset dword_408018
		mov	[esp+0B8h+dwMilliseconds], offset dword_40800C
		call	_initterm
		jmp	loc_40126A
; ---------------------------------------------------------------------------

loc_4014D8:				; CODE XREF: sub_401190+276j
		mov	[esp+0B8h+dwMilliseconds], eax ; Code
		call	exit
sub_401190	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn

		public start
start		proc near
		sub	esp, 0Ch
		mov	ds:dword_406040, 0
		call	sub_403660
		add	esp, 0Ch
		jmp	sub_401190
start		endp

; ---------------------------------------------------------------------------
		align 10h
		sub	esp, 0Ch
		mov	ds:dword_406040, 1
		call	sub_403660
		add	esp, 0Ch
		jmp	sub_401190
; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; LONG __stdcall TopLevelExceptionFilter(struct	_EXCEPTION_POINTERS *ExceptionInfo)
TopLevelExceptionFilter	proc near	; DATA XREF: sub_401190+11Ao

var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
ExceptionInfo	= dword	ptr  4

		push	esi
		push	ebx
		sub	esp, 14h
		mov	ebx, [esp+1Ch+ExceptionInfo]
		mov	eax, [ebx]
		mov	eax, [eax]
		cmp	eax, 0C0000091h
		ja	short loc_401577
		cmp	eax, 0C000008Dh
		jb	short loc_4015A3

loc_40153B:				; CODE XREF: TopLevelExceptionFilter+6Aj
		mov	esi, 1

loc_401540:				; CODE XREF: TopLevelExceptionFilter+C6j
		mov	[esp+1Ch+var_18], 0
		mov	[esp+1Ch+var_1C], 8
		call	signal
		cmp	eax, 1
		jz	loc_401663
		test	eax, eax
		jz	short loc_40158C
		mov	[esp+1Ch+var_1C], 8
		call	eax
		mov	eax, 0FFFFFFFFh

loc_40156F:				; CODE XREF: TopLevelExceptionFilter+76j
					; TopLevelExceptionFilter+120j	...
		add	esp, 14h
		pop	ebx
		pop	esi
		retn	4
; ---------------------------------------------------------------------------

loc_401577:				; CODE XREF: TopLevelExceptionFilter+12j
		cmp	eax, 0C0000094h
		jz	short loc_4015E4
		cmp	eax, 0C0000096h
		jz	short loc_4015B1
		cmp	eax, 0C0000093h
		jz	short loc_40153B

loc_40158C:				; CODE XREF: TopLevelExceptionFilter+3Fj
					; TopLevelExceptionFilter+8Fj ...
		mov	edx, ds:dword_406008
		xor	eax, eax
		test	edx, edx
		jz	short loc_40156F
		mov	[esp+1Ch+ExceptionInfo], ebx
		add	esp, 14h
		pop	ebx
		pop	esi
		jmp	edx
; ---------------------------------------------------------------------------

loc_4015A3:				; CODE XREF: TopLevelExceptionFilter+19j
		cmp	eax, 0C0000005h
		jz	short loc_4015F0
		cmp	eax, 0C000001Dh
		jnz	short loc_40158C

loc_4015B1:				; CODE XREF: TopLevelExceptionFilter+63j
		mov	[esp+1Ch+var_18], 0
		mov	[esp+1Ch+var_1C], 4
		call	signal
		cmp	eax, 1
		jz	short loc_401627
		test	eax, eax
		jz	short loc_40158C
		mov	[esp+1Ch+var_1C], 4
		call	eax
		add	esp, 14h
		mov	eax, 0FFFFFFFFh
		pop	ebx
		pop	esi
		retn	4
; ---------------------------------------------------------------------------

loc_4015E4:				; CODE XREF: TopLevelExceptionFilter+5Cj
		xor	esi, esi
		jmp	loc_401540
; ---------------------------------------------------------------------------
		align 10h

loc_4015F0:				; CODE XREF: TopLevelExceptionFilter+88j
		mov	[esp+1Ch+var_18], 0
		mov	[esp+1Ch+var_1C], 0Bh
		call	signal
		cmp	eax, 1
		jz	short loc_401645
		test	eax, eax
		jz	loc_40158C
		mov	[esp+1Ch+var_1C], 0Bh
		call	eax
		add	esp, 14h
		mov	eax, 0FFFFFFFFh
		pop	ebx
		pop	esi
		retn	4
; ---------------------------------------------------------------------------

loc_401627:				; CODE XREF: TopLevelExceptionFilter+A8j
		mov	[esp+1Ch+var_18], 1
		mov	[esp+1Ch+var_1C], 4
		call	signal
		mov	eax, 0FFFFFFFFh
		jmp	loc_40156F
; ---------------------------------------------------------------------------

loc_401645:				; CODE XREF: TopLevelExceptionFilter+E7j
		mov	[esp+1Ch+var_18], 1
		mov	[esp+1Ch+var_1C], 0Bh
		call	signal
		mov	eax, 0FFFFFFFFh
		jmp	loc_40156F
; ---------------------------------------------------------------------------

loc_401663:				; CODE XREF: TopLevelExceptionFilter+37j
		mov	[esp+1Ch+var_18], 1
		mov	[esp+1Ch+var_1C], 8
		call	signal
		test	esi, esi
		mov	eax, 0FFFFFFFFh
		jz	loc_40156F
		call	sub_403730
		mov	eax, 0FFFFFFFFh
		xchg	ax, ax
		jmp	loc_40156F
TopLevelExceptionFilter	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_4016A0	proc near		; CODE XREF: sub_403E50+6p

lpModuleName	= dword	ptr -18h
lpProcName	= dword	ptr -14h

		push	ebp
		mov	ebp, esp
		sub	esp, 18h
		mov	eax, dword_404020
		test	eax, eax
		jz	short locret_4016EB
		mov	[esp+18h+lpModuleName],	offset ModuleName ; "libgcj_s.dll"
		call	ds:GetModuleHandleA
		mov	edx, eax
		sub	esp, 4
		test	edx, edx
		mov	eax, 0
		jz	short loc_4016DE
		mov	[esp+18h+lpProcName], offset a_jv_registercl ; "_Jv_RegisterClasses"
		mov	[esp+18h+lpModuleName],	edx ; hModule
		call	ds:GetProcAddress
		sub	esp, 8

loc_4016DE:				; CODE XREF: sub_4016A0+28j
		test	eax, eax
		jz	short locret_4016EB
		mov	[esp+18h+lpModuleName],	offset dword_404020
		call	eax

locret_4016EB:				; CODE XREF: sub_4016A0+Dj
					; sub_4016A0+40j
		leave
		retn
sub_4016A0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl sub_4016F0()
sub_4016F0	proc near		; DATA XREF: sub_403E50+Bo
		push	ebp
		mov	ebp, esp
		pop	ebp
		retn
sub_4016F0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_401700	proc near		; CODE XREF: .text:00401A00p
					; .text:00401A19p ...

Format		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
arg_0		= dword	ptr  4

		push	edi
		push	esi
		push	ebx
		mov	ebx, edx
		sub	esp, 10h
		mov	edx, [ecx+4]
		mov	esi, [esp+1Ch+arg_0]
		mov	[esp+1Ch+var_18], eax
		mov	[esp+1Ch+Format], offset aSLuLu	; "%s\t%lu\t%lu"
		mov	[esp+1Ch+var_10], edx
		mov	edx, [ecx]
		mov	[esp+1Ch+var_14], edx
		call	printf
		test	esi, 1
		jnz	loc_4018D0

loc_401735:				; CODE XREF: sub_401700+1E9j
		test	esi, 2
		jnz	loc_4018B0

loc_401741:				; CODE XREF: sub_401700+1C9j
		test	esi, 4
		jnz	loc_401880

loc_40174D:				; CODE XREF: sub_401700+1ABj
		test	esi, 8
		jnz	loc_401850

loc_401759:				; CODE XREF: sub_401700+17Bj
		test	esi, 10h
		nop
		jnz	loc_401820

loc_401766:				; CODE XREF: sub_401700+14Bj
		test	esi, 20h
		lea	esi, [esi+0]
		jnz	short loc_4017F0

loc_401772:				; CODE XREF: sub_401700+11Bj
		test	esi, 40h
		jnz	short loc_4017C2

loc_40177A:				; CODE XREF: sub_401700+EDj
		mov	eax, esi
		test	al, al
		xchg	ax, ax
		js	short loc_401795

loc_401782:				; CODE XREF: sub_401700+C0j
		mov	[esp+1Ch+arg_0], 0Ah
		add	esp, 10h
		pop	ebx
		pop	esi
		pop	edi
		jmp	putchar
; ---------------------------------------------------------------------------

loc_401795:				; CODE XREF: sub_401700+80j
		mov	esi, ds:dbus_message_get_error_name
		mov	[esp+1Ch+Format], ebx
		call	esi ; dbus_message_get_error_name
		mov	edx, eax
		mov	eax, offset aNone ; "<none>"
		test	edx, edx
		jz	short loc_4017B0
		mov	[esp+1Ch+Format], ebx
		call	esi ; dbus_message_get_error_name

loc_4017B0:				; CODE XREF: sub_401700+A9j
		mov	[esp+1Ch+var_18], eax
		mov	[esp+1Ch+Format], offset aS_1 ;	"\t%s"
		call	printf
		jmp	short loc_401782
; ---------------------------------------------------------------------------

loc_4017C2:				; CODE XREF: sub_401700+78j
		mov	edi, ds:dbus_message_get_member
		mov	[esp+1Ch+Format], ebx
		call	edi ; dbus_message_get_member
		mov	edx, eax
		mov	eax, offset aNone ; "<none>"
		test	edx, edx
		jz	short loc_4017DD
		mov	[esp+1Ch+Format], ebx
		call	edi ; dbus_message_get_member

loc_4017DD:				; CODE XREF: sub_401700+D6j
		mov	[esp+1Ch+var_18], eax
		mov	[esp+1Ch+Format], offset aS_1 ;	"\t%s"
		call	printf
		jmp	short loc_40177A
; ---------------------------------------------------------------------------
		align 10h

loc_4017F0:				; CODE XREF: sub_401700+70j
		mov	edi, ds:dbus_message_get_interface
		mov	[esp+1Ch+Format], ebx
		call	edi ; dbus_message_get_interface
		mov	edx, eax
		mov	eax, offset aNone ; "<none>"
		test	edx, edx
		jz	short loc_40180B
		mov	[esp+1Ch+Format], ebx
		call	edi ; dbus_message_get_interface

loc_40180B:				; CODE XREF: sub_401700+104j
		mov	[esp+1Ch+var_18], eax
		mov	[esp+1Ch+Format], offset aS_1 ;	"\t%s"
		call	printf
		jmp	loc_401772
; ---------------------------------------------------------------------------

loc_401820:				; CODE XREF: sub_401700+60j
		mov	edi, ds:dbus_message_get_path
		mov	[esp+1Ch+Format], ebx
		call	edi ; dbus_message_get_path
		mov	edx, eax
		mov	eax, offset aNone ; "<none>"
		test	edx, edx
		jz	short loc_40183B
		mov	[esp+1Ch+Format], ebx
		call	edi ; dbus_message_get_path

loc_40183B:				; CODE XREF: sub_401700+134j
		mov	[esp+1Ch+var_18], eax
		mov	[esp+1Ch+Format], offset aS_1 ;	"\t%s"
		call	printf
		jmp	loc_401766
; ---------------------------------------------------------------------------

loc_401850:				; CODE XREF: sub_401700+53j
		mov	edi, ds:dbus_message_get_destination
		mov	[esp+1Ch+Format], ebx
		call	edi ; dbus_message_get_destination
		mov	edx, eax
		mov	eax, offset aNone ; "<none>"
		test	edx, edx
		jz	short loc_40186B
		mov	[esp+1Ch+Format], ebx
		call	edi ; dbus_message_get_destination

loc_40186B:				; CODE XREF: sub_401700+164j
		mov	[esp+1Ch+var_18], eax
		mov	[esp+1Ch+Format], offset aS_1 ;	"\t%s"
		call	printf
		jmp	loc_401759
; ---------------------------------------------------------------------------

loc_401880:				; CODE XREF: sub_401700+47j
		mov	edi, ds:dbus_message_get_sender
		mov	[esp+1Ch+Format], ebx
		call	edi ; dbus_message_get_sender
		mov	edx, eax
		mov	eax, offset aNone ; "<none>"
		test	edx, edx
		jz	short loc_40189B
		mov	[esp+1Ch+Format], ebx
		call	edi ; dbus_message_get_sender

loc_40189B:				; CODE XREF: sub_401700+194j
		mov	[esp+1Ch+var_18], eax
		mov	[esp+1Ch+Format], offset aS_1 ;	"\t%s"
		call	printf
		jmp	loc_40174D
; ---------------------------------------------------------------------------

loc_4018B0:				; CODE XREF: sub_401700+3Bj
		mov	[esp+1Ch+Format], ebx
		call	ds:dbus_message_get_reply_serial
		mov	[esp+1Ch+Format], offset aU ; "\t%u"
		mov	[esp+1Ch+var_18], eax
		call	printf
		jmp	loc_401741
; ---------------------------------------------------------------------------
		align 10h

loc_4018D0:				; CODE XREF: sub_401700+2Fj
		mov	[esp+1Ch+Format], ebx
		call	ds:dbus_message_get_serial
		mov	[esp+1Ch+Format], offset aU ; "\t%u"
		mov	[esp+1Ch+var_18], eax
		call	printf
		jmp	loc_401735
sub_401700	endp

; ---------------------------------------------------------------------------
		align 10h

loc_4018F0:				; DATA XREF: sub_401AC0:loc_401E72o
		push	edi
		push	esi
		push	ebx
		sub	esp, 20h
		lea	eax, [esp+10h]
		mov	ebx, [esp+34h]
		mov	[esp], eax
		call	ds:GetSystemTimeAsFileTime
		sub	esp, 4
		mov	esi, [esp+10h]
		mov	edi, [esp+14h]
		mov	dword ptr [esp+8], 0Ah
		mov	dword ptr [esp+0Ch], 0
		mov	[esp], esi
		mov	[esp+4], edi
		call	sub_403A10
		mov	dword ptr [esp+8], 0F4240h
		mov	dword ptr [esp+0Ch], 0
		mov	[esp], eax
		mov	[esp+4], edx
		call	sub_403B30
		mov	dword ptr [esp+8], 1CA5AA00h
		mov	dword ptr [esp+0Ch], 1Bh
		mov	[esp], esi
		mov	[esp+4], edi
		mov	[esp+1Ch], eax
		call	sub_403A10
		mov	[esp], ebx
		add	eax, 49EF6F00h
		mov	[esp+18h], eax
		call	ds:dbus_message_get_type
		cmp	eax, 2
		jz	loc_401A20
		jg	short loc_4019E4
		cmp	eax, 1
		lea	esi, [esi+0]
		jz	loc_401A40

loc_401996:				; CODE XREF: .text:004019ECj
		mov	eax, [esp+1Ch]
		mov	dword ptr [esp+4], offset aTun ; "tun"
		mov	dword ptr [esp], offset	aSLuLu_0 ; "%s\t%lu\t%lu\n"
		mov	[esp+0Ch], eax
		mov	eax, [esp+18h]
		mov	[esp+8], eax
		call	printf

loc_4019BA:				; CODE XREF: .text:00401A05j
					; .text:00401A1Ej ...
		mov	dword ptr [esp+8], offset aDisconnected	; "Disconnected"
		mov	dword ptr [esp+4], offset aOrg_freedeskto ; "org.freedesktop.DBus.Local"
		mov	[esp], ebx
		call	ds:dbus_message_is_signal
		test	eax, eax
		jnz	loc_401A5C
		add	esp, 20h
		xor	eax, eax
		pop	ebx
		pop	esi
		pop	edi
		retn
; ---------------------------------------------------------------------------

loc_4019E4:				; CODE XREF: .text:00401985j
		cmp	eax, 3
		jz	short loc_401A07
		cmp	eax, 4
		jnz	short loc_401996
		lea	ecx, [esp+18h]
		mov	edx, ebx
		mov	eax, offset aSig ; "sig"
		mov	dword ptr [esp], 71h
		call	sub_401700
		jmp	short loc_4019BA
; ---------------------------------------------------------------------------

loc_401A07:				; CODE XREF: .text:004019E7j
		lea	ecx, [esp+18h]
		mov	edx, ebx
		mov	eax, offset aErr ; "err"
		mov	dword ptr [esp], 0Bh
		call	sub_401700
		jmp	short loc_4019BA
; ---------------------------------------------------------------------------

loc_401A20:				; CODE XREF: .text:0040197Fj
		lea	ecx, [esp+18h]
		mov	edx, ebx
		mov	eax, offset aMr	; "mr"
		mov	dword ptr [esp], 0Bh
		call	sub_401700
		jmp	loc_4019BA
; ---------------------------------------------------------------------------
		align 10h

loc_401A40:				; CODE XREF: .text:00401990j
		lea	ecx, [esp+18h]
		mov	edx, ebx
		mov	eax, offset aMc	; "mc"
		mov	dword ptr [esp], 75h
		call	sub_401700
		jmp	loc_4019BA
; ---------------------------------------------------------------------------

loc_401A5C:				; CODE XREF: .text:004019D5j
		mov	dword ptr [esp], 0
		call	exit
; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_401A70	proc near		; DATA XREF: sub_401AC0+70o
					; sub_401AC0+100o ...

Code		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
arg_4		= dword	ptr  8

		push	ebx
		sub	esp, 18h
		mov	ebx, [esp+1Ch+arg_4]
		mov	[esp+1Ch+var_18], 0
		mov	[esp+1Ch+Code],	ebx
		call	sub_4028C0
		mov	[esp+1Ch+var_14], offset aDisconnected ; "Disconnected"
		mov	[esp+1Ch+var_18], offset aOrg_freedeskto ; "org.freedesktop.DBus.Local"
		mov	[esp+1Ch+Code],	ebx
		call	ds:dbus_message_is_signal
		test	eax, eax
		jnz	short loc_401AAC
		xor	eax, eax
		add	esp, 18h
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_401AAC:				; CODE XREF: sub_401A70+33j
		mov	[esp+1Ch+Code],	0 ; Code
		call	exit
sub_401A70	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn bp-based	frame

sub_401AC0	proc near		; CODE XREF: sub_401190+264p

File		= dword	ptr -60h
Buf		= dword	ptr -5Ch
Mode		= dword	ptr -58h
Size		= dword	ptr -54h
var_44		= dword	ptr -44h
Memory		= dword	ptr -40h
var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= byte ptr -20h
var_1C		= dword	ptr -1Ch
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		and	esp, 0FFFFFFF0h
		push	edi
		push	esi
		push	ebx
		sub	esp, 54h
		call	sub_4037D0
		mov	eax, ds:_iob
		mov	[esp+60h+Size],	0 ; Size
		mov	[esp+60h+Mode],	4 ; Mode
		mov	[esp+60h+Buf], 0 ; Buf
		add	eax, 20h
		mov	[esp+60h+File],	eax ; File
		call	setvbuf
		cmp	[ebp+arg_0], 1
		jle	loc_401E80
		mov	[esp+60h+var_28], 0
		mov	edx, 1
		mov	[esp+60h+Memory], 0
		mov	[esp+60h+var_3C], 0
		mov	[esp+60h+var_2C], 0
		mov	[esp+60h+var_34], 0
		mov	[esp+60h+var_38], offset sub_401A70
		mov	[esp+60h+var_30], 0

loc_401B40:				; CODE XREF: sub_401AC0+108j
					; sub_401AC0+227j
		mov	eax, [ebp+arg_4]
		mov	ecx, 9
		mov	edi, offset aSystem ; "--system"
		mov	[esp+60h+var_24], edx
		mov	ebx, [eax+edx*4]
		mov	esi, ebx
		repe cmpsb
		setnbe	cl
		mov	esi, ecx
		setb	cl
		mov	eax, esi
		cmp	al, cl
		jz	loc_401CC0
		mov	ecx, 0Ah
		mov	esi, ebx
		mov	edi, offset aSession ; "--session"
		repe cmpsb
		jz	loc_401CF2
		mov	edi, offset aAddress ; "--address"
		mov	ecx, 0Ah
		mov	esi, ebx
		repe cmpsb
		jz	loc_401E10
		mov	edi, offset aHelp ; "--help"
		mov	ecx, 7
		mov	esi, ebx
		repe cmpsb
		jz	loc_401E45
		mov	edi, offset aMonitor ; "--monitor"
		mov	ecx, 0Ah
		mov	esi, ebx
		repe cmpsb
		jnz	loc_401D15
		add	edx, 1
		cmp	[ebp+arg_0], edx
		mov	[esp+60h+var_38], offset sub_401A70
		jg	loc_401B40
		xchg	ax, ax

loc_401BD0:				; CODE XREF: sub_401AC0+22Dj
		lea	edi, [esp+60h+var_20]
		mov	[esp+60h+File],	edi
		call	ds:dbus_error_init
		mov	ecx, [esp+60h+var_34]
		test	ecx, ecx
		jz	loc_401EB5
		mov	edx, [esp+60h+var_34]
		mov	[esp+60h+Buf], edi
		mov	[esp+60h+File],	edx
		call	ds:dbus_connection_open
		test	eax, eax
		mov	[esp+60h+var_24], eax
		jz	loc_402040
		mov	[esp+60h+Buf], edi
		mov	[esp+60h+File],	eax
		call	ds:dbus_bus_register
		test	eax, eax
		jz	loc_402020

loc_401C1B:				; CODE XREF: sub_401AC0+40Cj
		mov	edx, [esp+60h+var_3C]
		test	edx, edx
		jz	loc_401EF3
		mov	eax, [esp+60h+var_2C]
		test	eax, eax
		jz	loc_401F80
		mov	ebx, [esp+60h+Memory]
		xor	esi, esi
		jmp	short loc_401C5A
; ---------------------------------------------------------------------------
		align 10h

loc_401C40:				; CODE XREF: sub_401AC0+1BCj
		mov	eax, [ebx]
		add	esi, 1
		add	ebx, 4
		mov	[esp+60h+File],	eax ; Memory
		call	free
		cmp	esi, [esp+60h+var_2C]
		jge	loc_401F80

loc_401C5A:				; CODE XREF: sub_401AC0+179j
		mov	ecx, [esp+60h+var_24]
		mov	[esp+60h+Mode],	edi
		mov	eax, [ebx]
		mov	[esp+60h+File],	ecx
		mov	[esp+60h+Buf], eax
		call	ds:dbus_bus_add_match
		mov	[esp+60h+File],	edi
		call	ds:dbus_error_is_set
		test	eax, eax
		jz	short loc_401C40
		mov	eax, [esp+60h+var_1C]
		mov	[esp+60h+Size],	eax
		mov	eax, [ebx]
		mov	[esp+60h+Buf], offset Format ; "Failed to setup	match \"%s\": %s\n"
		mov	[esp+60h+Mode],	eax

loc_401C94:				; CODE XREF: sub_401AC0+578j
					; sub_401AC0+598j
		mov	eax, ds:_iob
		add	eax, 40h
		mov	[esp+60h+File],	eax ; File
		call	fprintf
		mov	[esp+60h+File],	edi
		call	ds:dbus_error_free
		mov	[esp+60h+File],	1 ; Code
		call	exit
; ---------------------------------------------------------------------------
		align 10h

loc_401CC0:				; CODE XREF: sub_401AC0+A4j
		mov	eax, [esp+60h+var_28]
		mov	ecx, [ebp+arg_4]
		test	eax, eax
		mov	ebx, [ecx]
		jnz	loc_401DC0
		mov	[esp+60h+var_28], 1
		mov	[esp+60h+var_30], 1

loc_401CE1:				; CODE XREF: sub_401AC0+253j
					; sub_401AC0+277j ...
		add	edx, 1
		cmp	[ebp+arg_0], edx
		jg	loc_401B40
		jmp	loc_401BD0
; ---------------------------------------------------------------------------

loc_401CF2:				; CODE XREF: sub_401AC0+B8j
		mov	edi, [esp+60h+var_28]
		mov	ecx, [ebp+arg_4]
		test	edi, edi
		mov	ebx, [ecx]
		jnz	loc_401DC0
		mov	[esp+60h+var_28], 1
		mov	[esp+60h+var_30], 0
		jmp	short loc_401CE1
; ---------------------------------------------------------------------------

loc_401D15:				; CODE XREF: sub_401AC0+F4j
		mov	edi, offset aProfile ; "--profile"
		mov	ecx, 0Ah
		mov	esi, ebx
		repe cmpsb
		jz	loc_401E72
		mov	edi, offset asc_405172 ; "--"
		mov	ecx, 3
		mov	esi, ebx
		repe cmpsb
		jz	short loc_401CE1
		cmp	byte ptr [ebx],	2Dh
		jz	loc_40205D
		add	[esp+60h+var_3C], 1
		mov	eax, [esp+60h+var_3C]
		mov	[esp+60h+var_44], edx
		shl	eax, 2
		mov	[esp+60h+Buf], eax ; NewSize
		mov	eax, [esp+60h+Memory]
		mov	[esp+60h+File],	eax ; Memory
		call	realloc
		mov	[esp+60h+File],	ebx ; Str
		mov	[esp+60h+Memory], eax
		call	strlen
		lea	eax, ds:4[eax*4]
		mov	[esp+60h+File],	eax ; Size
		call	malloc
		mov	ecx, [esp+60h+var_2C]
		mov	esi, eax
		mov	eax, [esp+60h+Memory]
		mov	[eax+ecx*4], esi
		mov	[esp+60h+File],	ebx ; Str
		call	strlen
		mov	[esp+60h+Size],	ebx ; char
		mov	[esp+60h+Mode],	offset aS ; "%s"
		mov	[esp+60h+File],	esi ; char *
		add	eax, 1
		mov	[esp+60h+Buf], eax ; size_t
		call	sub_403D00
		mov	edx, [esp+60h+var_44]
		add	[esp+60h+var_2C], 1
		jmp	loc_401CE1
; ---------------------------------------------------------------------------
		align 10h

loc_401DC0:				; CODE XREF: sub_401AC0+20Bj
					; sub_401AC0+23Dj ...
		mov	eax, ds:_iob
		mov	[esp+60h+Mode],	2Dh ; Count
		mov	[esp+60h+Buf], 1 ; Size
		mov	[esp+60h+File],	offset aIOnlySupportMo ; "I only support monitoring one	bus at a "...
		add	eax, 40h
		mov	[esp+60h+Size],	eax ; File
		call	fwrite
		mov	[esp+60h+Mode],	ebx
		mov	[esp+60h+Buf], offset aUsageSSystemSe ;	"Usage:	%s [--system | --session | --add"...

loc_401DF4:				; CODE XREF: sub_401AC0+42Ej
					; sub_401AC0+520j ...
		mov	eax, ds:_iob
		add	eax, 40h
		mov	[esp+60h+File],	eax ; File
		call	fprintf
		mov	[esp+60h+File],	1 ; Code
		call	exit
; ---------------------------------------------------------------------------

loc_401E10:				; CODE XREF: sub_401AC0+CCj
		mov	esi, [esp+60h+var_28]
		mov	ecx, [ebp+arg_4]
		test	esi, esi
		mov	ebx, [ecx]
		jnz	short loc_401DC0
		add	edx, 1
		cmp	[ebp+arg_0], edx
		jle	loc_401EE2
		mov	eax, [esp+60h+var_24]
		mov	ecx, [ebp+arg_4]
		mov	[esp+60h+var_28], 1
		mov	eax, [ecx+eax*4+4]
		mov	[esp+60h+var_34], eax
		jmp	loc_401CE1
; ---------------------------------------------------------------------------

loc_401E45:				; CODE XREF: sub_401AC0+E0j
		mov	edx, [ebp+arg_4]
		mov	eax, [edx]
		mov	[esp+60h+Buf], offset aUsageSSystemSe ;	"Usage:	%s [--system | --session | --add"...
		mov	[esp+60h+Mode],	eax
		mov	eax, ds:_iob
		add	eax, 40h
		mov	[esp+60h+File],	eax ; File
		call	fprintf
		mov	[esp+60h+File],	0 ; Code
		call	exit
; ---------------------------------------------------------------------------

loc_401E72:				; CODE XREF: sub_401AC0+263j
		mov	[esp+60h+var_38], offset loc_4018F0
		jmp	loc_401CE1
; ---------------------------------------------------------------------------
		align 10h

loc_401E80:				; CODE XREF: sub_401AC0+3Dj
		lea	edi, [esp+60h+var_20]
		mov	[esp+60h+File],	edi
		call	ds:dbus_error_init
		mov	[esp+60h+Memory], 0
		mov	[esp+60h+var_30], 0
		mov	[esp+60h+var_3C], 0
		mov	[esp+60h+var_38], offset sub_401A70
		mov	[esp+60h+var_2C], 0

loc_401EB5:				; CODE XREF: sub_401AC0+123j
		mov	eax, [esp+60h+var_30]
		mov	[esp+60h+Buf], edi
		mov	[esp+60h+File],	eax
		call	ds:dbus_bus_get
		test	eax, eax
		mov	[esp+60h+var_24], eax
		jnz	loc_401C1B
		mov	edx, [esp+60h+var_30]
		mov	eax, ds:off_405270[edx*4]
		jmp	loc_402044
; ---------------------------------------------------------------------------

loc_401EE2:				; CODE XREF: sub_401AC0+363j
		mov	[esp+60h+Mode],	ebx
		mov	[esp+60h+Buf], offset aUsageSSystemSe ;	"Usage:	%s [--system | --session | --add"...
		jmp	loc_401DF4
; ---------------------------------------------------------------------------

loc_401EF3:				; CODE XREF: sub_401AC0+161j
		mov	eax, [esp+60h+var_24]
		mov	ebx, ds:dbus_bus_add_match
		mov	[esp+60h+Mode],	edi
		mov	[esp+60h+Buf], offset aTypeSignal ; "type='signal'"
		mov	[esp+60h+File],	eax
		call	ebx ; dbus_bus_add_match
		mov	esi, ds:dbus_error_is_set
		mov	[esp+60h+File],	edi
		call	esi ; dbus_error_is_set
		test	eax, eax
		jnz	loc_401FD0
		mov	edx, [esp+60h+var_24]
		mov	[esp+60h+Mode],	edi
		mov	[esp+60h+Buf], offset aTypeMethod_cal ;	"type='method_call'"
		mov	[esp+60h+File],	edx
		call	ebx ; dbus_bus_add_match
		mov	[esp+60h+File],	edi
		call	esi ; dbus_error_is_set
		test	eax, eax
		jnz	loc_401FD0
		mov	ecx, [esp+60h+var_24]
		mov	[esp+60h+Mode],	edi
		mov	[esp+60h+Buf], offset aTypeMethod_ret ;	"type='method_return'"
		mov	[esp+60h+File],	ecx
		call	ebx ; dbus_bus_add_match
		mov	[esp+60h+File],	edi
		call	esi ; dbus_error_is_set
		test	eax, eax
		jnz	short loc_401FD0
		mov	eax, [esp+60h+var_24]
		mov	[esp+60h+Mode],	edi
		mov	[esp+60h+Buf], offset aTypeError ; "type='error'"
		mov	[esp+60h+File],	eax
		call	ebx ; dbus_bus_add_match
		mov	[esp+60h+File],	edi
		call	esi ; dbus_error_is_set
		test	eax, eax
		jnz	short loc_401FD0
		nop

loc_401F80:				; CODE XREF: sub_401AC0+16Dj
					; sub_401AC0+194j
		mov	edx, [esp+60h+var_38]
		mov	ecx, [esp+60h+var_24]
		mov	[esp+60h+Size],	0
		mov	[esp+60h+Mode],	0
		mov	[esp+60h+Buf], edx
		mov	[esp+60h+File],	ecx
		call	ds:dbus_connection_add_filter
		test	eax, eax
		jz	short loc_401FE5
		mov	ebx, ds:dbus_connection_read_write_dispatch
		mov	esi, [esp+60h+var_24]

loc_401FB3:				; CODE XREF: sub_401AC0+502j
		mov	[esp+60h+Buf], 0FFFFFFFFh
		mov	[esp+60h+File],	esi
		call	ebx ; dbus_connection_read_write_dispatch
		test	eax, eax
		jnz	short loc_401FB3
		mov	[esp+60h+File],	0 ; Code
		call	exit
; ---------------------------------------------------------------------------

loc_401FD0:				; CODE XREF: sub_401AC0+45Bj
					; sub_401AC0+47Dj ...
		mov	eax, [esp+60h+var_1C]
		mov	[esp+60h+Buf], offset aErrorS ;	"Error:	%s\n"
		mov	[esp+60h+Mode],	eax
		jmp	loc_401DF4
; ---------------------------------------------------------------------------

loc_401FE5:				; CODE XREF: sub_401AC0+4E7j
		mov	eax, ds:_iob
		mov	[esp+60h+Mode],	15h ; Count
		mov	[esp+60h+Buf], 1 ; Size
		mov	[esp+60h+File],	offset aCouldnTAddFilt ; "Couldn't add filter!\n"
		add	eax, 40h
		mov	[esp+60h+Size],	eax ; File
		call	fwrite
		mov	[esp+60h+File],	1 ; Code
		call	exit
; ---------------------------------------------------------------------------
		align 10h

loc_402020:				; CODE XREF: sub_401AC0+155j
		mov	eax, [esp+60h+var_1C]
		mov	ecx, [esp+60h+var_34]
		mov	[esp+60h+Buf], offset aFailedToRegist ;	"Failed	to register connection to bus at"...
		mov	[esp+60h+Size],	eax
		mov	[esp+60h+Mode],	ecx
		jmp	loc_401C94
; ---------------------------------------------------------------------------
		align 10h

loc_402040:				; CODE XREF: sub_401AC0+140j
		mov	eax, [esp+60h+var_34]

loc_402044:				; CODE XREF: sub_401AC0+41Dj
		mov	edx, [esp+60h+var_1C]
		mov	[esp+60h+Mode],	eax
		mov	[esp+60h+Buf], offset aFailedToOpenCo ;	"Failed	to open	connection to %s: %s\n"
		mov	[esp+60h+Size],	edx
		jmp	loc_401C94
; ---------------------------------------------------------------------------

loc_40205D:				; CODE XREF: sub_401AC0+27Cj
		mov	ecx, [ebp+arg_4]
		mov	eax, [ecx]
		mov	[esp+60h+Buf], offset aUsageSSystemSe ;	"Usage:	%s [--system | --session | --add"...
		mov	[esp+60h+Mode],	eax
		jmp	loc_401DF4
sub_401AC0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_402080	proc near		; CODE XREF: sub_402080+147p
					; sub_402080+265p ...

Format		= dword	ptr -0BCh
NewSize		= dword	ptr -0B8h
var_A4		= dword	ptr -0A4h
var_A0		= dword	ptr -0A0h
var_9C		= dword	ptr -9Ch
var_98		= dword	ptr -98h
var_94		= dword	ptr -94h
Memory		= dword	ptr -90h
var_8C		= dword	ptr -8Ch
var_88		= dword	ptr -88h
var_84		= dword	ptr -84h
var_80		= dword	ptr -80h
var_74		= byte ptr -74h
var_3C		= qword	ptr -3Ch
var_34		= byte ptr -34h
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_1E		= word ptr -1Eh

		push	ebp
		push	edi
		mov	edi, eax
		push	esi
		mov	eax, ecx
		push	ebx
		add	eax, 1
		sub	esp, 0ACh
		mov	ebx, 55555556h
		mov	esi, ds:dbus_message_iter_get_arg_type
		mov	[esp+0BCh+var_9C], eax
		mov	eax, ecx
		not	eax
		mov	[esp+0BCh+var_A4], ecx
		lea	ecx, [eax+eax*2+50h]
		mov	eax, ecx
		mov	[esp+0BCh+var_A0], edx
		imul	ebx
		sar	ecx, 1Fh
		sub	edx, ecx
		mov	[esp+0BCh+var_98], edx
		lea	esi, [esi+0]

loc_4020C0:				; CODE XREF: sub_402080+8Fj
					; sub_402080+E0j ...
		mov	[esp+0BCh+Format], edi
		call	esi
		test	eax, eax
		mov	ebp, eax
		jz	short loc_402111
		mov	edx, [esp+0BCh+var_A4]
		test	edx, edx
		jle	short loc_4020EA
		mov	ebx, [esp+0BCh+var_A4]

loc_4020D7:				; CODE XREF: sub_402080+68j
		sub	ebx, 1
		mov	[esp+0BCh+Format], offset asc_405278 ; "   "
		call	printf
		test	ebx, ebx
		jg	short loc_4020D7

loc_4020EA:				; CODE XREF: sub_402080+51j
		lea	eax, [ebp-61h]
		cmp	eax, 18h	; switch 25 cases
		jbe	short loc_402120

loc_4020F2:				; CODE XREF: sub_402080:loc_402120j
					; DATA XREF: .rdata:off_4053A8o
		mov	[esp+0BCh+NewSize], ebp	; jumptable 00402120 default case
		mov	[esp+0BCh+Format], offset aDbusMonitorToo ; " (dbus-monitor too	dumb to	decipher arg"...
		call	printf
		mov	ebp, ds:dbus_message_iter_next

loc_402108:				; CODE XREF: sub_402080+7ECj
		mov	[esp+0BCh+Format], edi
		call	ebp ; dbus_message_iter_next
		test	eax, eax
		jnz	short loc_4020C0

loc_402111:				; CODE XREF: sub_402080+49j
					; sub_402080+E6j ...
		add	esp, 0ACh
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_402120:				; CODE XREF: sub_402080+70j
		jmp	ds:off_4053A8[eax*4] ; switch jump
; ---------------------------------------------------------------------------

loc_402127:				; CODE XREF: sub_402080:loc_402120j
					; DATA XREF: .rdata:off_4053A8o
		lea	eax, [esp+0BCh+var_1E] ; jumptable 00402120 case 24
		mov	[esp+0BCh+NewSize], eax
		mov	[esp+0BCh+Format], edi
		call	ds:dbus_message_iter_get_basic
		movzx	eax, byte ptr [esp+0BCh+var_1E]
		mov	[esp+0BCh+Format], offset aByteD ; "byte %d\n"
		mov	[esp+0BCh+NewSize], eax
		call	printf
		mov	ebp, ds:dbus_message_iter_next
		mov	[esp+0BCh+Format], edi
		call	ebp ; dbus_message_iter_next
		test	eax, eax
		jnz	loc_4020C0
		jmp	short loc_402111
; ---------------------------------------------------------------------------

loc_402168:				; CODE XREF: sub_402080:loc_402120j
					; DATA XREF: .rdata:off_4053A8o
		lea	eax, [esp+0BCh+var_34] ; jumptable 00402120 case 23
		mov	[esp+0BCh+NewSize], eax
		mov	[esp+0BCh+Format], edi
		call	ds:dbus_message_iter_get_basic
		mov	[esp+0BCh+Format], offset Str ;	"int64 (omitted)"
		call	puts
		mov	ebp, ds:dbus_message_iter_next
		mov	[esp+0BCh+Format], edi
		call	ebp ; dbus_message_iter_next
		test	eax, eax
		jnz	loc_4020C0
		jmp	loc_402111
; ---------------------------------------------------------------------------

loc_4021A0:				; CODE XREF: sub_402080:loc_402120j
					; DATA XREF: .rdata:off_4053A8o
		lea	ebx, [esp+0BCh+var_74] ; jumptable 00402120 case 21
		mov	[esp+0BCh+NewSize], ebx
		mov	[esp+0BCh+Format], edi
		call	ds:dbus_message_iter_recurse
		mov	[esp+0BCh+Format], offset aVariant ; "variant "
		call	printf
		mov	ecx, [esp+0BCh+var_9C]
		mov	eax, ebx
		mov	edx, [esp+0BCh+var_A0]
		call	sub_402080
		mov	ebp, ds:dbus_message_iter_next
		mov	[esp+0BCh+Format], edi
		call	ebp ; dbus_message_iter_next
		test	eax, eax
		jnz	loc_4020C0
		nop
		jmp	loc_402111
; ---------------------------------------------------------------------------

loc_4021E5:				; CODE XREF: sub_402080:loc_402120j
					; DATA XREF: .rdata:off_4053A8o
		lea	eax, [esp+0BCh+var_28] ; jumptable 00402120 case 20
		mov	[esp+0BCh+NewSize], eax
		mov	[esp+0BCh+Format], edi
		call	ds:dbus_message_iter_get_basic
		mov	eax, [esp+0BCh+var_28]
		mov	[esp+0BCh+Format], offset aUint32U ; "uint32 %u\n"
		mov	[esp+0BCh+NewSize], eax
		call	printf
		mov	ebp, ds:dbus_message_iter_next
		mov	[esp+0BCh+Format], edi
		call	ebp ; dbus_message_iter_next
		test	eax, eax
		jnz	loc_4020C0
		jmp	loc_402111
; ---------------------------------------------------------------------------

loc_402228:				; CODE XREF: sub_402080:loc_402120j
					; DATA XREF: .rdata:off_4053A8o
		lea	eax, [esp+0BCh+var_34] ; jumptable 00402120 case 19
		mov	[esp+0BCh+NewSize], eax
		mov	[esp+0BCh+Format], edi
		call	ds:dbus_message_iter_get_basic
		mov	[esp+0BCh+Format], offset aUint64Omitted ; "uint64 (omitted)"
		call	puts
		mov	ebp, ds:dbus_message_iter_next
		mov	[esp+0BCh+Format], edi
		call	ebp ; dbus_message_iter_next
		test	eax, eax
		jnz	loc_4020C0
		jmp	loc_402111
; ---------------------------------------------------------------------------

loc_402260:				; CODE XREF: sub_402080:loc_402120j
					; DATA XREF: .rdata:off_4053A8o
		lea	eax, [esp+0BCh+var_24] ; jumptable 00402120 case 18
		mov	[esp+0BCh+NewSize], eax
		mov	[esp+0BCh+Format], edi
		call	ds:dbus_message_iter_get_basic
		mov	eax, [esp+0BCh+var_A0]
		test	eax, eax
		jz	loc_402681

loc_402280:				; CODE XREF: sub_402080+333j
					; sub_402080+3E6j
		mov	eax, [esp+0BCh+var_24]
		mov	[esp+0BCh+Format], offset aS_0 ; "%s"
		mov	[esp+0BCh+NewSize], eax
		call	printf
		mov	ebp, ds:dbus_message_iter_next
		mov	[esp+0BCh+Format], edi
		call	ebp ; dbus_message_iter_next
		test	eax, eax
		jnz	loc_4020C0
		jmp	loc_402111
; ---------------------------------------------------------------------------

loc_4022AF:				; CODE XREF: sub_402080:loc_402120j
					; DATA XREF: .rdata:off_4053A8o
		lea	ebx, [esp+0BCh+var_74] ; jumptable 00402120 case 17
		mov	[esp+0BCh+NewSize], ebx
		mov	[esp+0BCh+Format], edi
		call	ds:dbus_message_iter_recurse
		mov	[esp+0BCh+Format], offset aStruct ; "struct {"
		call	puts
		mov	ebp, ds:dbus_message_iter_next

loc_4022D2:				; CODE XREF: sub_402080+276j
		mov	[esp+0BCh+Format], ebx
		call	esi
		test	eax, eax
		jz	short loc_40230E

loc_4022DB:				; CODE XREF: sub_402080+28Cj
		mov	ecx, [esp+0BCh+var_9C]
		mov	eax, ebx
		mov	edx, [esp+0BCh+var_A0]
		call	sub_402080
		mov	[esp+0BCh+Format], ebx
		call	ebp ; dbus_message_iter_next
		mov	[esp+0BCh+Format], ebx
		call	esi
		test	eax, eax
		jz	short loc_4022D2
		mov	[esp+0BCh+Format], 2Ch ; Ch
		nop
		call	putchar
		mov	[esp+0BCh+Format], ebx
		call	esi
		test	eax, eax
		jnz	short loc_4022DB

loc_40230E:				; CODE XREF: sub_402080+259j
		mov	eax, [esp+0BCh+var_A4]
		test	eax, eax
		jle	short loc_402333
		mov	ebx, [esp+0BCh+var_A4]
		lea	esi, [esi+0]

loc_402320:				; CODE XREF: sub_402080+2B1j
		sub	ebx, 1
		mov	[esp+0BCh+Format], offset asc_405278 ; "   "
		call	printf
		test	ebx, ebx
		jg	short loc_402320

loc_402333:				; CODE XREF: sub_402080+294j
		mov	[esp+0BCh+Format], offset asc_40536F ; "}"
		call	puts
		mov	[esp+0BCh+Format], edi
		call	ebp ; dbus_message_iter_next
		test	eax, eax
		jnz	loc_4020C0
		lea	esi, [esi+0]
		jmp	loc_402111
; ---------------------------------------------------------------------------

loc_402355:				; CODE XREF: sub_402080:loc_402120j
					; DATA XREF: .rdata:off_4053A8o
		lea	edx, [esp+0BCh+var_1E] ; jumptable 00402120 case 16
		mov	[esp+0BCh+NewSize], edx
		mov	[esp+0BCh+Format], edi
		call	ds:dbus_message_iter_get_basic
		movzx	eax, [esp+0BCh+var_1E]
		mov	[esp+0BCh+Format], offset aUint16U ; "uint16 %u\n"
		mov	[esp+0BCh+NewSize], eax
		call	printf
		mov	ebp, ds:dbus_message_iter_next
		mov	[esp+0BCh+Format], edi
		call	ebp ; dbus_message_iter_next
		test	eax, eax
		jnz	loc_4020C0
		jmp	loc_402111
; ---------------------------------------------------------------------------

loc_402399:				; CODE XREF: sub_402080:loc_402120j
					; DATA XREF: .rdata:off_4053A8o
		lea	eax, [esp+0BCh+var_24] ; jumptable 00402120 case 14
		mov	[esp+0BCh+NewSize], eax
		mov	[esp+0BCh+Format], edi
		call	ds:dbus_message_iter_get_basic
		mov	ebx, [esp+0BCh+var_A0]
		test	ebx, ebx
		jnz	loc_402280
		mov	[esp+0BCh+Format], offset aObjectPath ;	"object	path \""
		jmp	loc_402473
; ---------------------------------------------------------------------------

loc_4023C5:				; CODE XREF: sub_402080:loc_402120j
					; DATA XREF: .rdata:off_4053A8o
		lea	eax, [esp+0BCh+var_1E] ; jumptable 00402120 case 13
		mov	[esp+0BCh+NewSize], eax
		mov	[esp+0BCh+Format], edi
		call	ds:dbus_message_iter_get_basic
		movsx	eax, [esp+0BCh+var_1E]
		mov	[esp+0BCh+Format], offset aInt16D ; "int16 %d\n"
		mov	[esp+0BCh+NewSize], eax
		call	printf
		mov	ebp, ds:dbus_message_iter_next
		mov	[esp+0BCh+Format], edi
		call	ebp ; dbus_message_iter_next
		test	eax, eax
		jnz	loc_4020C0
		jmp	loc_402111
; ---------------------------------------------------------------------------

loc_402409:				; CODE XREF: sub_402080:loc_402120j
					; DATA XREF: .rdata:off_4053A8o
		lea	eax, [esp+0BCh+var_28] ; jumptable 00402120 case 8
		mov	[esp+0BCh+NewSize], eax
		mov	[esp+0BCh+Format], edi
		call	ds:dbus_message_iter_get_basic
		mov	eax, [esp+0BCh+var_28]
		mov	[esp+0BCh+Format], offset aInt32D ; "int32 %d\n"
		mov	[esp+0BCh+NewSize], eax
		call	printf
		mov	ebp, ds:dbus_message_iter_next
		mov	[esp+0BCh+Format], edi
		call	ebp ; dbus_message_iter_next
		test	eax, eax
		jnz	loc_4020C0
		jmp	loc_402111
; ---------------------------------------------------------------------------

loc_40244C:				; CODE XREF: sub_402080:loc_402120j
					; DATA XREF: .rdata:off_4053A8o
		lea	eax, [esp+0BCh+var_24] ; jumptable 00402120 case 6
		mov	[esp+0BCh+NewSize], eax
		mov	[esp+0BCh+Format], edi
		call	ds:dbus_message_iter_get_basic
		mov	ebp, [esp+0BCh+var_A0]
		test	ebp, ebp
		jnz	loc_402280
		mov	[esp+0BCh+Format], offset aSignature ; "signature \""

loc_402473:				; CODE XREF: sub_402080+340j
					; sub_402080+608j
		call	printf
		mov	eax, [esp+0BCh+var_24]
		mov	[esp+0BCh+Format], offset aS_0 ; "%s"
		mov	[esp+0BCh+NewSize], eax
		call	printf
		mov	[esp+0BCh+Format], offset asc_405288 ; "\""
		call	puts
		mov	ebp, ds:dbus_message_iter_next
		mov	[esp+0BCh+Format], edi
		call	ebp ; dbus_message_iter_next
		test	eax, eax
		jnz	loc_4020C0
		xchg	ax, ax
		jmp	loc_402111
; ---------------------------------------------------------------------------

loc_4024B5:				; CODE XREF: sub_402080:loc_402120j
					; DATA XREF: .rdata:off_4053A8o
		lea	ebx, [esp+0BCh+var_74] ; jumptable 00402120 case 4
		mov	[esp+0BCh+NewSize], ebx
		mov	[esp+0BCh+Format], edi
		call	ds:dbus_message_iter_recurse
		mov	[esp+0BCh+Format], offset aDictEntry ; "dict entry("
		call	puts
		mov	ecx, [esp+0BCh+var_9C]
		mov	eax, ebx
		mov	edx, [esp+0BCh+var_A0]
		call	sub_402080
		mov	ebp, ds:dbus_message_iter_next
		mov	[esp+0BCh+Format], ebx
		call	ebp ; dbus_message_iter_next
		mov	edx, [esp+0BCh+var_A0]
		mov	eax, ebx
		mov	ecx, [esp+0BCh+var_9C]
		call	sub_402080
		mov	edx, [esp+0BCh+var_A4]
		test	edx, edx
		jle	short loc_40251A
		mov	ebx, [esp+0BCh+var_A4]

loc_402507:				; CODE XREF: sub_402080+498j
		sub	ebx, 1
		mov	[esp+0BCh+Format], offset asc_405278 ; "   "
		call	printf
		test	ebx, ebx
		jg	short loc_402507

loc_40251A:				; CODE XREF: sub_402080+481j
		mov	[esp+0BCh+Format], offset asc_405364 ; ")"
		call	puts
		mov	[esp+0BCh+Format], edi
		call	ebp ; dbus_message_iter_next
		test	eax, eax
		jnz	loc_4020C0
		jmp	loc_402111
; ---------------------------------------------------------------------------

loc_402538:				; CODE XREF: sub_402080:loc_402120j
					; DATA XREF: .rdata:off_4053A8o
		lea	eax, [esp+0BCh+var_3C] ; jumptable 00402120 case 3
		mov	[esp+0BCh+NewSize], eax
		mov	[esp+0BCh+Format], edi
		call	ds:dbus_message_iter_get_basic
		mov	[esp+0BCh+Format], offset aDoubleG ; "double %g\n"
		fld	[esp+0BCh+var_3C]
		fstp	qword ptr [esp+0BCh+NewSize]
		call	printf
		mov	ebp, ds:dbus_message_iter_next
		mov	[esp+0BCh+Format], edi
		call	ebp ; dbus_message_iter_next
		test	eax, eax
		jnz	loc_4020C0
		jmp	loc_402111
; ---------------------------------------------------------------------------

loc_40257B:				; CODE XREF: sub_402080:loc_402120j
					; DATA XREF: .rdata:off_4053A8o
		lea	eax, [esp+0BCh+var_28] ; jumptable 00402120 case 1
		mov	[esp+0BCh+NewSize], eax
		mov	[esp+0BCh+Format], edi
		call	ds:dbus_message_iter_get_basic
		mov	ecx, [esp+0BCh+var_28]
		mov	eax, offset aTrue ; "true"
		test	ecx, ecx
		jz	loc_402677

loc_4025A3:				; CODE XREF: sub_402080+5FCj
		mov	[esp+0BCh+NewSize], eax
		mov	[esp+0BCh+Format], offset aBooleanS ; "boolean %s\n"
		call	printf
		mov	ebp, ds:dbus_message_iter_next
		mov	[esp+0BCh+Format], edi
		call	ebp ; dbus_message_iter_next
		test	eax, eax
		jnz	loc_4020C0
		jmp	loc_402111
; ---------------------------------------------------------------------------

loc_4025CB:				; CODE XREF: sub_402080:loc_402120j
					; DATA XREF: .rdata:off_4053A8o
		lea	ebx, [esp+0BCh+var_74] ; jumptable 00402120 case 0
		mov	[esp+0BCh+NewSize], ebx
		mov	[esp+0BCh+Format], edi
		call	ds:dbus_message_iter_recurse
		mov	[esp+0BCh+Format], ebx
		call	esi
		cmp	eax, 79h
		mov	ebp, eax
		jz	loc_40268D
		mov	[esp+0BCh+Format], offset aArray ; "array ["
		call	puts
		test	ebp, ebp
		jz	loc_4028B3
		mov	ebp, ds:dbus_message_iter_next

loc_402606:				; CODE XREF: sub_402080+5F5j
		mov	ecx, [esp+0BCh+var_9C]
		mov	eax, ebx
		mov	edx, [esp+0BCh+var_A0]
		call	sub_402080
		mov	[esp+0BCh+Format], ebx
		call	ebp ; dbus_message_iter_next
		mov	[esp+0BCh+Format], ebx
		call	esi
		test	eax, eax
		jnz	short loc_402665

loc_402623:				; CODE XREF: sub_402080+839j
		mov	ecx, [esp+0BCh+var_A4]
		test	ecx, ecx
		jle	short loc_402643
		mov	ebx, [esp+0BCh+var_A4]
		nop

loc_402630:				; CODE XREF: sub_402080+5C1j
		sub	ebx, 1
		mov	[esp+0BCh+Format], offset asc_405278 ; "   "
		call	printf
		test	ebx, ebx
		jg	short loc_402630

loc_402643:				; CODE XREF: sub_402080+5A9j
		mov	[esp+0BCh+Format], offset asc_40534E ; "]"
		call	puts
		mov	[esp+0BCh+Format], edi
		call	ebp ; dbus_message_iter_next
		test	eax, eax
		jnz	loc_4020C0
		lea	esi, [esi+0]
		jmp	loc_402111
; ---------------------------------------------------------------------------

loc_402665:				; CODE XREF: sub_402080+5A1j
		mov	[esp+0BCh+Format], 2Ch ; Ch
		lea	esi, [esi+0]
		call	putchar
		jmp	short loc_402606
; ---------------------------------------------------------------------------

loc_402677:				; CODE XREF: sub_402080+51Dj
		mov	eax, offset aFalse ; "false"
		jmp	loc_4025A3
; ---------------------------------------------------------------------------

loc_402681:				; CODE XREF: sub_402080+1FAj
		mov	[esp+0BCh+Format], offset aString ; "string \""
		jmp	loc_402473
; ---------------------------------------------------------------------------

loc_40268D:				; CODE XREF: sub_402080+566j
		mov	[esp+0BCh+Format], 65h ; Size
		call	malloc
		mov	ebp, ds:dbus_message_iter_next
		mov	[esp+0BCh+var_80], edi
		xor	edi, edi
		mov	[esp+0BCh+var_94], 1
		mov	[esp+0BCh+var_8C], 64h
		mov	[esp+0BCh+var_88], ebp
		mov	[esp+0BCh+var_84], 0
		mov	[esp+0BCh+Memory], eax
		mov	eax, 3
		mov	ebp, eax
		jmp	short loc_4026DA
; ---------------------------------------------------------------------------
		align 10h

loc_4026D0:				; CODE XREF: sub_402080+6A0j
					; sub_402080+6B9j
		mov	[esp+0BCh+Format], ebx
		add	ebp, 2
		call	[esp+0BCh+var_88]

loc_4026DA:				; CODE XREF: sub_402080+64Cj
		mov	[esp+0BCh+Format], ebx
		call	esi
		test	eax, eax
		jz	short loc_40273B
		lea	edx, [esp+0BCh+var_1E]
		mov	[esp+0BCh+NewSize], edx
		mov	[esp+0BCh+Format], ebx
		call	ds:dbus_message_iter_get_basic
		movzx	eax, byte ptr [esp+0BCh+var_1E]
		mov	edx, [esp+0BCh+Memory]
		mov	[edx+edi], al
		movzx	eax, byte ptr [esp+0BCh+var_1E]
		add	edi, 1
		sub	eax, 20h
		cmp	al, 5Fh
		sbb	eax, eax
		and	[esp+0BCh+var_94], eax
		cmp	edi, [esp+0BCh+var_8C]
		jnz	short loc_4026D0
		lea	eax, [edi+edi]
		mov	[esp+0BCh+var_8C], eax
		mov	[esp+0BCh+NewSize], ebp	; NewSize
		mov	[esp+0BCh+Format], edx ; Memory
		call	realloc
		mov	[esp+0BCh+Memory], eax
		jmp	short loc_4026D0
; ---------------------------------------------------------------------------

loc_40273B:				; CODE XREF: sub_402080+661j
		mov	edx, [esp+0BCh+var_94]
		mov	[esp+0BCh+var_84], edi
		mov	ebp, [esp+0BCh+var_88]
		mov	edi, [esp+0BCh+var_80]
		test	edx, edx
		jnz	loc_402895
		mov	[esp+0BCh+Format], offset aArrayOfBytes	; "array of bytes ["
		call	puts
		cmp	[esp+0BCh+var_9C], 0
		jle	short loc_402780
		mov	ebx, [esp+0BCh+var_A4]

loc_40276A:				; CODE XREF: sub_402080+6FEj
		sub	ebx, 1
		mov	[esp+0BCh+Format], offset asc_405278 ; "   "
		call	printf
		lea	eax, [ebx+1]
		test	eax, eax
		jg	short loc_40276A

loc_402780:				; CODE XREF: sub_402080+6E4j
		mov	edx, [esp+0BCh+var_98]
		cmp	edx, 7
		mov	[esp+0BCh+var_94], edx
		jbe	loc_402886

loc_402791:				; CODE XREF: sub_402080+810j
		cmp	[esp+0BCh+var_84], 0
		jz	loc_40282A
		mov	[esp+0BCh+var_88], edi
		mov	edi, [esp+0BCh+var_84]
		xor	ebx, ebx
		mov	[esp+0BCh+var_84], ebp
		mov	ebp, [esp+0BCh+Memory]

loc_4027AE:				; CODE XREF: sub_402080+7A0j
		movzx	eax, byte ptr [ebp+ebx+0]
		add	ebx, 1
		mov	[esp+0BCh+Format], offset a02x ; "%02x"
		mov	[esp+0BCh+NewSize], eax
		call	printf
		cmp	edi, ebx
		jz	loc_402882
		xor	edx, edx
		mov	eax, ebx
		div	[esp+0BCh+var_94]
		test	edx, edx
		jnz	loc_402871
		mov	[esp+0BCh+Format], 0Ah ; Ch
		call	putchar
		mov	eax, [esp+0BCh+var_9C]
		test	eax, eax
		jle	short loc_40281E
		mov	edx, [esp+0BCh+var_A4]
		mov	[esp+0BCh+var_8C], ebp
		mov	ebp, edi
		mov	edi, ebx
		mov	ebx, edx

loc_402800:				; CODE XREF: sub_402080+794j
		sub	ebx, 1
		mov	[esp+0BCh+Format], offset asc_405278 ; "   "
		call	printf
		lea	eax, [ebx+1]
		test	eax, eax
		jg	short loc_402800
		mov	ebx, edi
		mov	edi, ebp
		mov	ebp, [esp+0BCh+var_8C]

loc_40281E:				; CODE XREF: sub_402080+770j
					; sub_402080+800j ...
		cmp	ebx, edi
		jb	short loc_4027AE
		mov	edi, [esp+0BCh+var_88]
		mov	ebp, [esp+0BCh+var_84]

loc_40282A:				; CODE XREF: sub_402080+716j
		mov	[esp+0BCh+Format], 0Ah ; Ch
		call	putchar
		cmp	[esp+0BCh+var_A4], 0
		jle	short loc_402854
		mov	ebx, [esp+0BCh+var_A4]

loc_402841:				; CODE XREF: sub_402080+7D2j
		sub	ebx, 1
		mov	[esp+0BCh+Format], offset asc_405278 ; "   "
		call	printf
		test	ebx, ebx
		jg	short loc_402841

loc_402854:				; CODE XREF: sub_402080+7BBj
		mov	[esp+0BCh+Format], offset asc_40534E ; "]"
		call	puts

loc_402860:				; CODE XREF: sub_402080+831j
		mov	eax, [esp+0BCh+Memory]
		mov	[esp+0BCh+Format], eax ; Memory
		call	free
		jmp	loc_402108
; ---------------------------------------------------------------------------

loc_402871:				; CODE XREF: sub_402080+758j
		mov	[esp+0BCh+Format], 20h ; Ch
		call	putchar
		lea	esi, [esi+0]
		jmp	short loc_40281E
; ---------------------------------------------------------------------------

loc_402882:				; CODE XREF: sub_402080+748j
		mov	ebx, edi
		jmp	short loc_40281E
; ---------------------------------------------------------------------------

loc_402886:				; CODE XREF: sub_402080+70Bj
		mov	[esp+0BCh+var_94], 8
		xchg	ax, ax
		jmp	loc_402791
; ---------------------------------------------------------------------------

loc_402895:				; CODE XREF: sub_402080+6CDj
		mov	eax, [esp+0BCh+Memory]
		mov	edx, [esp+0BCh+var_84]
		mov	byte ptr [eax+edx], 0
		mov	[esp+0BCh+NewSize], eax
		mov	[esp+0BCh+Format], offset aArrayOfBytesS ; "array of bytes \"%s\"\n"
		call	printf
		jmp	short loc_402860
; ---------------------------------------------------------------------------

loc_4028B3:				; CODE XREF: sub_402080+57Aj
		mov	ebp, ds:dbus_message_iter_next
		jmp	loc_402623
sub_402080	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_4028C0	proc near		; CODE XREF: sub_401A70+13p

Format		= dword	ptr -8Ch
var_88		= dword	ptr -88h
var_84		= dword	ptr -84h
var_80		= dword	ptr -80h
var_7C		= dword	ptr -7Ch
var_60		= dword	ptr -60h
var_54		= byte ptr -54h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		sub	esp, 8Ch
		mov	[esp+8Ch+var_8], edi
		mov	edi, [esp+8Ch+arg_0]
		mov	[esp+8Ch+var_10], ebx
		mov	[esp+8Ch+var_C], esi
		mov	esi, [esp+8Ch+arg_4]
		mov	[esp+8Ch+var_4], ebp
		mov	[esp+8Ch+Format], edi
		call	ds:dbus_message_get_type
		mov	[esp+8Ch+Format], edi
		mov	ebx, eax
		call	ds:dbus_message_get_sender
		mov	[esp+8Ch+Format], edi
		mov	ebp, eax
		call	ds:dbus_message_get_destination
		test	esi, esi
		jnz	loc_4029C0
		test	eax, eax
		jz	loc_402A80

loc_40291C:				; CODE XREF: sub_4028C0+1C5j
		test	ebp, ebp
		xchg	ax, ax
		jz	loc_402A90

loc_402926:				; CODE XREF: sub_4028C0+1D5j
		lea	ecx, [ebx-1]
		mov	edx, offset aUnknownMessage ; "(unknown	message	type)"
		cmp	ecx, 3
		ja	short loc_40293A
		mov	edx, ds:off_4054E4[ecx*4]

loc_40293A:				; CODE XREF: sub_4028C0+71j
		mov	[esp+8Ch+var_80], eax
		mov	[esp+8Ch+var_84], ebp
		mov	[esp+8Ch+var_88], edx
		mov	[esp+8Ch+Format], offset aSSenderSDestS	; "%s sender=%s	-> dest=%s"
		call	printf
		cmp	ebx, 2
		jz	loc_402A30
		jg	loc_402A10
		cmp	ebx, 1
		jnz	loc_402A1E

loc_40296A:				; CODE XREF: sub_4028C0+158j
		mov	[esp+8Ch+Format], edi
		lea	esi, [esi+0]
		call	ds:dbus_message_get_member
		mov	[esp+8Ch+Format], edi
		mov	[esp+8Ch+var_60], eax
		call	ds:dbus_message_get_interface
		mov	[esp+8Ch+Format], edi
		mov	ebp, eax
		call	ds:dbus_message_get_path
		mov	[esp+8Ch+Format], edi
		mov	ebx, eax
		call	ds:dbus_message_get_serial
		mov	edx, [esp+8Ch+var_60]
		mov	[esp+8Ch+var_80], ebp
		mov	[esp+8Ch+var_84], ebx
		mov	[esp+8Ch+Format], offset aSerialUPathSIn ; " serial=%u path=%s;	interface=%s; membe"...
		mov	[esp+8Ch+var_7C], edx
		mov	[esp+8Ch+var_88], eax
		call	printf
		lea	esi, [esi+0]

loc_4029C0:				; CODE XREF: sub_4028C0+4Ej
					; sub_4028C0+16Aj ...
		lea	ebx, [esp+8Ch+var_54]
		mov	[esp+8Ch+var_88], ebx
		mov	[esp+8Ch+Format], edi
		call	ds:dbus_message_iter_init
		mov	edx, esi
		mov	eax, ebx
		mov	ecx, 1
		call	sub_402080
		mov	eax, ds:_iob
		add	eax, 20h
		mov	[esp+8Ch+Format], eax ;	File
		call	fflush
		mov	ebx, [esp+8Ch+var_10]
		mov	esi, [esp+8Ch+var_C]
		mov	edi, [esp+8Ch+var_8]
		mov	ebp, [esp+8Ch+var_4]
		add	esp, 8Ch
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_402A10:				; CODE XREF: sub_4028C0+9Bj
		cmp	ebx, 3
		jz	short loc_402A50
		cmp	ebx, 4
		jz	loc_40296A

loc_402A1E:				; CODE XREF: sub_4028C0+A4j
		mov	[esp+8Ch+Format], 0Ah ;	Ch
		call	putchar
		jmp	short loc_4029C0
; ---------------------------------------------------------------------------
		align 10h

loc_402A30:				; CODE XREF: sub_4028C0+95j
		mov	[esp+8Ch+Format], edi
		call	ds:dbus_message_get_reply_serial
		mov	[esp+8Ch+Format], offset aReply_serialU	; " reply_serial=%u\n"
		mov	[esp+8Ch+var_88], eax
		call	printf
		jmp	loc_4029C0
; ---------------------------------------------------------------------------
		align 10h

loc_402A50:				; CODE XREF: sub_4028C0+153j
		mov	[esp+8Ch+Format], edi
		call	ds:dbus_message_get_reply_serial
		mov	[esp+8Ch+Format], edi
		mov	ebx, eax
		call	ds:dbus_message_get_error_name
		mov	[esp+8Ch+var_84], ebx
		mov	[esp+8Ch+Format], offset aError_nameSRep ; " error_name=%s reply_serial=%u\n"
		mov	[esp+8Ch+var_88], eax
		call	printf
		jmp	loc_4029C0
; ---------------------------------------------------------------------------
		align 10h

loc_402A80:				; CODE XREF: sub_4028C0+56j
		mov	eax, offset aNullDestinatio ; "(null destination)"
		jmp	loc_40291C
; ---------------------------------------------------------------------------
		align 10h

loc_402A90:				; CODE XREF: sub_4028C0+60j
		mov	ebp, offset aNullSender	; "(null sender)"
		jmp	loc_402926
sub_4028C0	endp

; ---------------------------------------------------------------------------
		align 10h
		xor	eax, eax
		retn
; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


		public TlsCallback_1
TlsCallback_1	proc near		; DATA XREF: .CRT:00408024o

var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		sub	esp, 1Ch
		mov	eax, [esp+1Ch+arg_4]
		test	eax, eax
		jz	short loc_402AD0
		cmp	eax, 3
		jz	short loc_402AD0
		mov	eax, 1
		add	esp, 1Ch
		retn	0Ch
; ---------------------------------------------------------------------------
		align 10h

loc_402AD0:				; CODE XREF: TlsCallback_1+9j
					; TlsCallback_1+Ej
		mov	edx, [esp+1Ch+arg_8]
		mov	[esp+1Ch+var_18], eax
		mov	eax, [esp+1Ch+arg_0]
		mov	[esp+1Ch+var_14], edx
		mov	[esp+1Ch+var_1C], eax
		call	sub_403870
		mov	eax, 1
		add	esp, 1Ch
		retn	0Ch
TlsCallback_1	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


		public TlsCallback_0
TlsCallback_0	proc near		; CODE XREF: sub_401190+110p
					; DATA XREF: .rdata:off_4054F4o ...

var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	ebx
		sub	esp, 18h
		cmp	dword_404014, 2
		mov	eax, [esp+1Ch+arg_4]
		jz	short loc_402B1B
		mov	dword_404014, 2

loc_402B1B:				; CODE XREF: TlsCallback_0+Fj
		cmp	eax, 2
		jz	short loc_402B31
		cmp	eax, 1
		jz	short loc_402B60

loc_402B25:				; CODE XREF: TlsCallback_0+3Cj
					; TlsCallback_0+7Cj
		mov	eax, 1
		add	esp, 18h
		pop	ebx
		retn	0Ch
; ---------------------------------------------------------------------------

loc_402B31:				; CODE XREF: TlsCallback_0+1Ej
		mov	ebx, offset dword_408030
		cmp	ebx, offset dword_408030
		jz	short loc_402B25
		xchg	ax, ax

loc_402B40:				; CODE XREF: TlsCallback_0+51j
		mov	eax, [ebx]
		test	eax, eax
		jz	short loc_402B48
		call	eax

loc_402B48:				; CODE XREF: TlsCallback_0+44j
		add	ebx, 4
		cmp	ebx, offset dword_408030
		jnz	short loc_402B40
		mov	eax, 1
		add	esp, 18h
		pop	ebx
		retn	0Ch
; ---------------------------------------------------------------------------
		align 10h

loc_402B60:				; CODE XREF: TlsCallback_0+23j
		mov	eax, [esp+1Ch+arg_8]
		mov	[esp+1Ch+var_18], 1
		mov	[esp+1Ch+var_14], eax
		mov	eax, [esp+1Ch+arg_0]
		mov	[esp+1Ch+var_1C], eax
		call	sub_403870
		jmp	short loc_402B25
TlsCallback_0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_402B80	proc near		; DATA XREF: .CRT:00408014o
		sub	esp, 0Ch
		mov	eax, ds:__lconv_init
		add	esp, 0Ch
		jmp	eax
sub_402B80	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_402B90	proc near		; CODE XREF: sub_402BB0+10p
					; sub_402BB0+36p ...

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		retn
sub_402B90	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_402BA0	proc near		; CODE XREF: sub_401060+5Ap
					; sub_402BB0+71p ...

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		retn
sub_402BA0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_402BB0(_onexit_t)
sub_402BB0	proc near		; CODE XREF: sub_402C70+Ap

Func		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
arg_0		= dword	ptr  4

		push	ebx
		sub	esp, 28h
		mov	eax, ds:dword_4063D8
		mov	ebx, [esp+2Ch+arg_0]
		mov	[esp+2Ch+Func],	eax
		call	sub_402B90
		cmp	eax, 0FFFFFFFFh
		mov	[esp+2Ch+var_10], eax
		jz	loc_402C50
		mov	[esp+2Ch+Func],	8
		call	_lock
		mov	eax, ds:dword_4063D8
		mov	[esp+2Ch+Func],	eax
		call	sub_402B90
		mov	[esp+2Ch+var_10], eax
		mov	eax, ds:dword_4063D4
		mov	[esp+2Ch+Func],	eax
		call	sub_402B90
		mov	[esp+2Ch+Func],	ebx
		mov	[esp+2Ch+var_14], eax
		lea	eax, [esp+2Ch+var_14]
		mov	[esp+2Ch+var_24], eax
		lea	eax, [esp+2Ch+var_10]
		mov	[esp+2Ch+var_28], eax
		call	__dllonexit
		mov	ebx, eax
		mov	eax, [esp+2Ch+var_10]
		mov	[esp+2Ch+Func],	eax
		call	sub_402BA0
		mov	ds:dword_4063D8, eax
		mov	eax, [esp+2Ch+var_14]
		mov	[esp+2Ch+Func],	eax
		call	sub_402BA0
		mov	[esp+2Ch+Func],	8
		mov	ds:dword_4063D4, eax
		call	_unlock
		mov	eax, ebx
		add	esp, 28h
		pop	ebx
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_402C50:				; CODE XREF: sub_402BB0+1Cj
		mov	[esp+2Ch+Func],	ebx ; Func
		call	ds:_onexit
		add	esp, 28h
		mov	ebx, eax
		mov	eax, ebx
		pop	ebx
		retn
sub_402BB0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_402C70(_onexit_t)
sub_402C70	proc near		; CODE XREF: sub_4037D0-2Fp
					; sub_403E50+12p

var_1C		= dword	ptr -1Ch
arg_0		= dword	ptr  4

		sub	esp, 1Ch
		mov	eax, [esp+1Ch+arg_0]
		mov	[esp+1Ch+var_1C], eax ;	_onexit_t
		call	sub_402BB0
		cmp	eax, 1
		sbb	eax, eax
		add	esp, 1Ch
		retn
sub_402C70	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_402C90	proc near		; DATA XREF: sub_401060:loc_401150o

File		= dword	ptr -3Ch
Format		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= qword	ptr -2Ch
var_24		= qword	ptr -24h
var_1C		= qword	ptr -1Ch
arg_0		= dword	ptr  4

		sub	esp, 3Ch
		mov	edx, offset aUnknownError ; "Unknown error"
		mov	eax, [esp+3Ch+arg_0]
		mov	ecx, [eax]
		sub	ecx, 1
		cmp	ecx, 5
		ja	short loc_402CAD
		mov	edx, ds:off_405614[ecx*4]

loc_402CAD:				; CODE XREF: sub_402C90+14j
		fld	qword ptr [eax+18h]
		fstp	[esp+3Ch+var_1C]
		fld	qword ptr [eax+10h]
		fstp	[esp+3Ch+var_24]
		fld	qword ptr [eax+8]
		fstp	[esp+3Ch+var_2C]
		mov	eax, [eax+4]
		mov	[esp+3Ch+var_34], edx
		mov	[esp+3Ch+Format], offset a_matherrSInSGG ; "_matherr():	%s in %s(%g, %g)  (retval=%"...
		mov	[esp+3Ch+var_30], eax
		mov	eax, ds:_iob
		add	eax, 40h
		mov	[esp+3Ch+File],	eax ; File
		call	fprintf
		xor	eax, eax
		add	esp, 3Ch
		retn
sub_402C90	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_402CF0	proc near		; CODE XREF: sub_401060+76p
		xor	eax, eax
		retn
sub_402CF0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn

; int __cdecl sub_402D00(char *Format, char ArgList)
sub_402D00	proc near		; CODE XREF: sub_402D60+131p
					; sub_402D60+141p ...

Str		= dword	ptr -1Ch
Size		= dword	ptr -18h
Count		= dword	ptr -14h
File		= dword	ptr -10h
Format		= dword	ptr  4
ArgList		= byte ptr  8

		push	ebx
		sub	esp, 18h
		mov	eax, ds:_iob
		mov	[esp+1Ch+Count], 1Bh ; Count
		lea	ebx, [esp+1Ch+ArgList]
		mov	[esp+1Ch+Size],	1 ; Size
		mov	[esp+1Ch+Str], offset aMingwW64Runtim ;	"Mingw-w64 runtime failure:\n"
		add	eax, 40h
		mov	[esp+1Ch+File],	eax ; File
		call	fwrite
		mov	eax, [esp+1Ch+Format]
		mov	[esp+1Ch+Count], ebx ; ArgList
		mov	[esp+1Ch+Size],	eax ; Format
		mov	eax, ds:_iob
		add	eax, 40h
		mov	[esp+1Ch+Str], eax ; File
		call	vfprintf
		call	abort
sub_402D00	endp

; ---------------------------------------------------------------------------
		jmp	short sub_402D60
; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; int __thiscall sub_402D60(size_t Size)
sub_402D60	proc near		; CODE XREF: .text:00402D51j
					; sub_402EB0+12Ap ...

lpAddress	= dword	ptr -5Ch
lpBuffer	= dword	ptr -58h
dwLength	= dword	ptr -54h
lpflOldProtect	= dword	ptr -50h
var_44		= dword	ptr -44h
Src		= dword	ptr -40h
Buffer		= _MEMORY_BASIC_INFORMATION ptr	-38h

		push	ebp
		push	edi
		mov	edi, ecx
		push	esi
		push	ebx
		mov	ebx, eax
		sub	esp, 4Ch
		test	ecx, ecx
		mov	[esp+5Ch+Src], edx
		jnz	short loc_402D80
		add	esp, 4Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_402D80:				; CODE XREF: sub_402D60+11j
		mov	ecx, ds:dword_406050
		xor	esi, esi
		test	ecx, ecx
		jle	short loc_402DB0
		mov	eax, ds:dword_40604C

loc_402D91:				; CODE XREF: sub_402D60+4Ej
		mov	edx, [eax+4]
		cmp	edx, ebx
		ja	short loc_402DA6
		mov	ebp, [eax+8]
		add	edx, [ebp+8]
		cmp	ebx, edx
		jb	loc_402E29

loc_402DA6:				; CODE XREF: sub_402D60+36j
		add	esi, 1
		add	eax, 0Ch
		cmp	esi, ecx
		jl	short loc_402D91

loc_402DB0:				; CODE XREF: sub_402D60+2Aj
		mov	[esp+5Ch+lpAddress], ebx
		call	sub_4031B0
		test	eax, eax
		mov	ebp, eax
		jz	loc_402E96
		lea	edx, [esi+esi*2]
		mov	esi, ds:dword_40604C
		shl	edx, 2
		mov	[esp+5Ch+var_44], edx
		add	esi, edx
		mov	[esi+8], eax
		mov	dword ptr [esi], 0
		call	sub_4032D0
		mov	edx, [esp+5Ch+var_44]
		add	eax, [ebp+0Ch]
		mov	[esi+4], eax
		lea	eax, [esp+5Ch+Buffer]
		mov	[esp+5Ch+lpBuffer], eax	; lpBuffer
		mov	eax, ds:dword_40604C
		mov	[esp+5Ch+dwLength], 1Ch	; dwLength
		mov	eax, [eax+edx+4]
		mov	[esp+5Ch+lpAddress], eax ; lpAddress
		call	ds:VirtualQuery
		sub	esp, 0Ch
		test	eax, eax
		mov	edx, [esp+5Ch+var_44]
		jz	short loc_402E76
		mov	eax, [esp+5Ch+Buffer.Protect]
		cmp	eax, 4
		jnz	short loc_402E45

loc_402E22:				; CODE XREF: sub_402D60+E8j
					; sub_402D60+114j
		add	ds:dword_406050, 1

loc_402E29:				; CODE XREF: sub_402D60+40j
		mov	eax, [esp+5Ch+Src]
		mov	[esp+5Ch+dwLength], edi	; Size
		mov	[esp+5Ch+lpAddress], ebx ; Dst
		mov	[esp+5Ch+lpBuffer], eax	; Src
		call	memcpy
		add	esp, 4Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_402E45:				; CODE XREF: sub_402D60+C0j
		cmp	eax, 40h
		jz	short loc_402E22
		mov	eax, [esp+5Ch+Buffer.RegionSize]
		add	edx, ds:dword_40604C
		mov	[esp+5Ch+dwLength], 40h	; flNewProtect
		mov	[esp+5Ch+lpBuffer], eax	; dwSize
		mov	eax, [esp+5Ch+Buffer.BaseAddress]
		mov	[esp+5Ch+lpflOldProtect], edx ;	lpflOldProtect
		mov	[esp+5Ch+lpAddress], eax ; lpAddress
		call	ds:VirtualProtect
		sub	esp, 10h
		jmp	short loc_402E22
; ---------------------------------------------------------------------------

loc_402E76:				; CODE XREF: sub_402D60+B7j
		mov	eax, ds:dword_40604C
		mov	eax, [eax+edx+4]
		mov	[esp+5Ch+dwLength], eax
		mov	eax, [ebp+8]
		mov	[esp+5Ch+lpAddress], offset aVirtualqueryFa ; "	 VirtualQuery failed for %d bytes at a"...
		mov	[esp+5Ch+lpBuffer], eax	; ArgList
		call	sub_402D00
; ---------------------------------------------------------------------------

loc_402E96:				; CODE XREF: sub_402D60+5Cj
		mov	[esp+5Ch+lpBuffer], ebx	; ArgList
		mov	[esp+5Ch+lpAddress], offset aAddressPHasNoI ; "Address %p has no image-section"
		call	sub_402D00
sub_402D60	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_402EB0	proc near		; CODE XREF: sub_401190:loc_4012A5p

lpAddress	= dword	ptr -58h
lpBuffer	= dword	ptr -54h
dwLength	= dword	ptr -50h
lpflOldProtect	= dword	ptr -4Ch
Buffer		= _MEMORY_BASIC_INFORMATION ptr	-3Ch
flOldProtect	= dword	ptr -20h
var_1C		= dword	ptr -1Ch

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		sub	esp, 4Ch
		mov	ebx, ds:dword_406054
		test	ebx, ebx
		jz	short loc_402ED0

loc_402EC3:				; CODE XREF: sub_402EB0+64j
					; sub_402EB0+B4j ...
		lea	esp, [ebp-0Ch]
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_402ED0:				; CODE XREF: sub_402EB0+11j
		mov	ds:dword_406054, 1
		call	sub_403220
		lea	eax, [eax+eax*2]
		lea	eax, ds:1Eh[eax*4]
		and	eax, 0FFFFFFF0h
		call	sub_403C60
		mov	ds:dword_406050, 0
		lea	eax, [esp+58h+Buffer.BaseAddress+3]
		and	eax, 0FFFFFFF0h
		mov	ds:dword_40604C, eax
		mov	eax, offset dword_40571C
		sub	eax, offset dword_40571C
		cmp	eax, 7
		jle	short loc_402EC3
		cmp	eax, 0Bh
		mov	ebx, offset dword_40571C
		jle	short loc_402F42
		mov	ecx, ds:dword_40571C
		test	ecx, ecx
		jnz	short loc_402F42
		mov	edx, ds:dword_405720
		test	edx, edx
		jnz	short loc_402F42
		mov	eax, ds:dword_405724
		test	eax, eax
		jnz	short loc_402F42
		mov	ebx, offset dword_405728

loc_402F42:				; CODE XREF: sub_402EB0+6Ej
					; sub_402EB0+78j ...
		mov	edi, [ebx]
		test	edi, edi
		jnz	short loc_402FB0
		mov	esi, [ebx+4]
		test	esi, esi
		jnz	short loc_402FB0
		mov	eax, [ebx+8]
		cmp	eax, 1
		jnz	loc_403113
		add	ebx, 0Ch
		cmp	ebx, offset dword_40571C
		jnb	loc_402EC3
		mov	esi, 400000h

loc_402F6F:				; CODE XREF: sub_402EB0+217j
		mov	eax, [ebx+4]
		mov	ecx, [ebx]
		movzx	edx, byte ptr [ebx+8]
		add	eax, esi
		add	ecx, esi
		cmp	edx, 10h
		mov	edi, [ecx]
		jz	loc_40306D
		cmp	edx, 20h
		jz	loc_4030AA
		cmp	edx, 8
		jz	loc_40308C
		mov	[ebp+var_1C], 0
		mov	[esp+58h+lpBuffer], edx	; ArgList
		mov	[esp+58h+lpAddress], offset aUnknownPseudoR ; "	 Unknown pseudo	relocation bit size %d"...
		call	sub_402D00
; ---------------------------------------------------------------------------

loc_402FB0:				; CODE XREF: sub_402EB0+96j
					; sub_402EB0+9Dj
		cmp	ebx, offset dword_40571C
		jnb	loc_402EC3
		mov	esi, 400000h
		lea	edi, [ebp+flOldProtect]

loc_402FC4:				; CODE XREF: sub_402EB0+135j
		mov	eax, [ebx+4]
		mov	ecx, 4		; Size
		add	eax, esi
		mov	edx, [eax]
		add	edx, [ebx]
		add	ebx, 8
		mov	[ebp+flOldProtect], edx
		mov	edx, edi
		call	sub_402D60
		cmp	ebx, offset dword_40571C
		jb	short loc_402FC4

loc_402FE7:				; CODE XREF: sub_402EB0+21Dj
		mov	ecx, ds:dword_406050
		test	ecx, ecx
		jle	loc_402EC3
		xor	ebx, ebx
		xor	esi, esi
		lea	edi, [ebp+flOldProtect]
		jmp	short loc_403012
; ---------------------------------------------------------------------------
		align 10h

loc_403000:				; CODE XREF: sub_402EB0+16Dj
					; sub_402EB0+1BBj
		add	esi, 1
		add	ebx, 0Ch
		cmp	esi, ds:dword_406050
		jge	loc_402EC3

loc_403012:				; CODE XREF: sub_402EB0+14Cj
		mov	eax, ds:dword_40604C
		add	eax, ebx
		mov	edx, [eax]
		test	edx, edx
		jz	short loc_403000
		lea	edx, [ebp+Buffer]
		mov	[esp+58h+dwLength], 1Ch	; dwLength
		mov	[esp+58h+lpBuffer], edx	; lpBuffer
		mov	eax, [eax+4]
		mov	[esp+58h+lpAddress], eax ; lpAddress
		call	ds:VirtualQuery
		sub	esp, 0Ch
		test	eax, eax
		jz	loc_4030F0
		mov	eax, ds:dword_40604C
		mov	[esp+58h+lpflOldProtect], edi ;	lpflOldProtect
		mov	eax, [eax+ebx]
		mov	[esp+58h+dwLength], eax	; flNewProtect
		mov	eax, [ebp+Buffer.RegionSize]
		mov	[esp+58h+lpBuffer], eax	; dwSize
		mov	eax, [ebp+Buffer.BaseAddress]
		mov	[esp+58h+lpAddress], eax ; lpAddress
		call	ds:VirtualProtect
		sub	esp, 10h
		jmp	short loc_403000
; ---------------------------------------------------------------------------

loc_40306D:				; CODE XREF: sub_402EB0+D1j
		movzx	edx, word ptr [eax]
		test	dx, dx
		js	short loc_4030E1
		sub	edx, ecx
		lea	edi, [edx+edi]
		mov	[ebp+var_1C], edi

loc_40307D:				; CODE XREF: sub_402EB0+23Ej
		mov	ecx, 2		; Size
		lea	edx, [ebp+var_1C]
		call	sub_402D60
		jmp	short loc_4030BE
; ---------------------------------------------------------------------------

loc_40308C:				; CODE XREF: sub_402EB0+E3j
		movzx	edx, byte ptr [eax]
		test	dl, dl
		js	short loc_4030D2
		sub	edx, ecx
		lea	edi, [edx+edi]
		mov	[ebp+var_1C], edi

loc_40309B:				; CODE XREF: sub_402EB0+22Fj
		mov	ecx, 1		; Size
		lea	edx, [ebp+var_1C]
		call	sub_402D60
		jmp	short loc_4030BE
; ---------------------------------------------------------------------------

loc_4030AA:				; CODE XREF: sub_402EB0+DAj
		add	edi, [eax]
		lea	edx, [ebp+var_1C]
		sub	edi, ecx
		mov	ecx, 4		; Size
		mov	[ebp+var_1C], edi
		call	sub_402D60

loc_4030BE:				; CODE XREF: sub_402EB0+1DAj
					; sub_402EB0+1F8j
		add	ebx, 0Ch
		cmp	ebx, offset dword_40571C
		jb	loc_402F6F
		jmp	loc_402FE7
; ---------------------------------------------------------------------------

loc_4030D2:				; CODE XREF: sub_402EB0+1E1j
		or	edx, 0FFFFFF00h
		sub	edx, ecx
		add	edx, edi
		mov	[ebp+var_1C], edx
		jmp	short loc_40309B
; ---------------------------------------------------------------------------

loc_4030E1:				; CODE XREF: sub_402EB0+1C3j
		or	edx, 0FFFF0000h
		sub	edx, ecx
		add	edx, edi
		mov	[ebp+var_1C], edx
		jmp	short loc_40307D
; ---------------------------------------------------------------------------

loc_4030F0:				; CODE XREF: sub_402EB0+18Fj
		add	ebx, ds:dword_40604C
		mov	eax, [ebx+4]
		mov	[esp+58h+dwLength], eax
		mov	eax, [ebx+8]
		mov	eax, [eax+8]
		mov	[esp+58h+lpAddress], offset aVirtualqueryFa ; "	 VirtualQuery failed for %d bytes at a"...
		mov	[esp+58h+lpBuffer], eax	; ArgList
		call	sub_402D00
; ---------------------------------------------------------------------------

loc_403113:				; CODE XREF: sub_402EB0+A5j
		mov	[esp+58h+lpBuffer], eax	; ArgList
		mov	[esp+58h+lpAddress], offset aUnknownPseud_0 ; "	 Unknown pseudo	relocation protocol ve"...
		call	sub_402D00
sub_402EB0	endp

; ---------------------------------------------------------------------------
		align 10h
		mov	eax, [esp+4]
		cmp	word ptr [eax],	5A4Dh
		jz	short loc_403140

loc_40313B:				; CODE XREF: .text:00403149j
		xor	eax, eax
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_403140:				; CODE XREF: .text:00403139j
		add	eax, [eax+3Ch]
		cmp	dword ptr [eax], 4550h
		jnz	short loc_40313B
		cmp	word ptr [eax+18h], 10Bh
		setz	al
		movzx	eax, al
		retn
; ---------------------------------------------------------------------------
		align 10h
		push	esi
		push	ebx
		mov	eax, [esp+0Ch]
		mov	ebx, [esp+10h]
		add	eax, [eax+3Ch]
		movzx	esi, word ptr [eax+6]
		movzx	edx, word ptr [eax+14h]
		test	esi, esi
		jz	short loc_40319C
		movzx	edx, dx
		lea	eax, [eax+edx+18h]
		xor	edx, edx
		jmp	short loc_403187
; ---------------------------------------------------------------------------

loc_403184:				; CODE XREF: .text:0040319Aj
		add	eax, 28h

loc_403187:				; CODE XREF: .text:00403182j
		mov	ecx, [eax+0Ch]
		cmp	ecx, ebx
		ja	short loc_403195
		add	ecx, [eax+8]
		cmp	ebx, ecx
		jb	short loc_40319E

loc_403195:				; CODE XREF: .text:0040318Cj
		add	edx, 1
		cmp	edx, esi
		jb	short loc_403184

loc_40319C:				; CODE XREF: .text:00403177j
		xor	eax, eax

loc_40319E:				; CODE XREF: .text:00403193j
		pop	ebx
		pop	esi
		retn
; ---------------------------------------------------------------------------
		jmp	short sub_4031B0
; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_4031B0	proc near		; CODE XREF: sub_402D60+53p
					; .text:004031A1j

arg_0		= dword	ptr  4

		cmp	word ptr ds:400000h, 5A4Dh
		push	esi
		push	ebx
		jz	short loc_4031C2

loc_4031BD:				; CODE XREF: sub_4031B0+27j
					; sub_4031B0+2Fj ...
		xor	eax, eax

loc_4031BF:				; CODE XREF: sub_4031B0+61j
		pop	ebx
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_4031C2:				; CODE XREF: sub_4031B0+Bj
		mov	eax, ds:40003Ch
		cmp	dword ptr [eax+400000h], 4550h
		lea	edx, [eax+400000h]
		jnz	short loc_4031BD
		cmp	word ptr [edx+18h], 10Bh
		jnz	short loc_4031BD
		mov	ebx, [esp+8+arg_0]
		movzx	esi, word ptr [edx+6]
		movzx	eax, word ptr [edx+14h]
		sub	ebx, 400000h
		test	esi, esi
		jz	short loc_4031BD
		movzx	eax, ax
		lea	eax, [edx+eax+18h]
		xor	edx, edx
		jmp	short loc_403205
; ---------------------------------------------------------------------------

loc_403202:				; CODE XREF: sub_4031B0+68j
		add	eax, 28h

loc_403205:				; CODE XREF: sub_4031B0+50j
		mov	ecx, [eax+0Ch]
		cmp	ebx, ecx
		jb	short loc_403213
		add	ecx, [eax+8]
		cmp	ebx, ecx
		jb	short loc_4031BF

loc_403213:				; CODE XREF: sub_4031B0+5Aj
		add	edx, 1
		cmp	edx, esi
		jb	short loc_403202
		jmp	short loc_4031BD
sub_4031B0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_403220	proc near		; CODE XREF: sub_402EB0+2Ap
		cmp	word ptr ds:400000h, 5A4Dh
		jz	short loc_403230

loc_40322B:				; CODE XREF: sub_403220+25j
					; sub_403220+2Dj
		xor	eax, eax
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_403230:				; CODE XREF: sub_403220+9j
		mov	eax, ds:40003Ch
		cmp	dword ptr [eax+400000h], 4550h
		lea	edx, [eax+400000h]
		jnz	short loc_40322B
		cmp	word ptr [edx+18h], 10Bh
		jnz	short loc_40322B
		movzx	eax, word ptr [edx+6]
		retn
sub_403220	endp

; ---------------------------------------------------------------------------
		align 10h
		cmp	word ptr ds:400000h, 5A4Dh
		push	ebx
		mov	edx, [esp+8]
		jz	short loc_403274

loc_403270:				; CODE XREF: .text:00403289j
					; .text:00403291j ...
		xor	eax, eax

loc_403272:				; CODE XREF: .text:004032BBj
					; .text:004032C9j
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_403274:				; CODE XREF: .text:0040326Ej
		mov	eax, ds:40003Ch
		cmp	dword ptr [eax+400000h], 4550h
		lea	ecx, [eax+400000h]
		jnz	short loc_403270
		cmp	word ptr [ecx+18h], 10Bh
		jnz	short loc_403270
		movzx	ebx, word ptr [ecx+6]
		movzx	eax, word ptr [ecx+14h]
		test	ebx, ebx
		jz	short loc_403270
		movzx	eax, ax
		lea	eax, [ecx+eax+18h]
		xor	ecx, ecx
		jmp	short loc_4032B3
; ---------------------------------------------------------------------------
		align 10h

loc_4032B0:				; CODE XREF: .text:004032C5j
		add	eax, 28h

loc_4032B3:				; CODE XREF: .text:004032A8j
		test	byte ptr [eax+27h], 20h
		jz	short loc_4032C0
		test	edx, edx
		jz	short loc_403272
		sub	edx, 1

loc_4032C0:				; CODE XREF: .text:004032B7j
		add	ecx, 1
		cmp	ecx, ebx
		jb	short loc_4032B0
		xor	eax, eax
		jmp	short loc_403272
; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_4032D0	proc near		; CODE XREF: sub_402D60+7Dp
		cmp	word ptr ds:400000h, 5A4Dh
		jz	short loc_4032E0

loc_4032DB:				; CODE XREF: sub_4032D0+25j
		xor	eax, eax

locret_4032DD:				; CODE XREF: sub_4032D0+32j
					; sub_4032D0+36j
		rep retn
; ---------------------------------------------------------------------------
		align 10h

loc_4032E0:				; CODE XREF: sub_4032D0+9j
		mov	eax, ds:40003Ch
		cmp	dword ptr [eax+400000h], 4550h
		lea	edx, [eax+400000h]
		jnz	short loc_4032DB
		cmp	word ptr [edx+18h], 10Bh
		mov	eax, 400000h
		jz	short locret_4032DD
		xor	eax, eax
		jmp	short locret_4032DD
sub_4032D0	endp

; ---------------------------------------------------------------------------
		align 10h
		cmp	word ptr ds:400000h, 5A4Dh
		push	esi
		push	ebx
		jz	short loc_403322

loc_40331D:				; CODE XREF: .text:00403337j
					; .text:0040333Fj ...
		xor	eax, eax
		pop	ebx
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_403322:				; CODE XREF: .text:0040331Bj
		mov	eax, ds:40003Ch
		cmp	dword ptr [eax+400000h], 4550h
		lea	edx, [eax+400000h]
		jnz	short loc_40331D
		cmp	word ptr [edx+18h], 10Bh
		jnz	short loc_40331D
		mov	ebx, [esp+0Ch]
		movzx	esi, word ptr [edx+6]
		movzx	eax, word ptr [edx+14h]
		sub	ebx, 400000h
		test	esi, esi
		jz	short loc_40331D
		movzx	eax, ax
		lea	eax, [edx+eax+18h]
		xor	edx, edx
		jmp	short loc_403365
; ---------------------------------------------------------------------------

loc_403362:				; CODE XREF: .text:00403378j
		add	eax, 28h

loc_403365:				; CODE XREF: .text:00403360j
		mov	ecx, [eax+0Ch]
		cmp	ebx, ecx
		jb	short loc_403373
		add	ecx, [eax+8]
		cmp	ebx, ecx
		jb	short loc_403380

loc_403373:				; CODE XREF: .text:0040336Aj
		add	edx, 1
		cmp	esi, edx
		ja	short loc_403362
		jmp	short loc_40331D
; ---------------------------------------------------------------------------
		align 10h

loc_403380:				; CODE XREF: .text:00403371j
		test	eax, eax
		jz	short loc_40331D
		mov	eax, [eax+24h]
		pop	ebx
		pop	esi
		not	eax
		shr	eax, 1Fh
		retn
; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_403390	proc near		; CODE XREF: sub_403460+58p

var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4

		sub	esp, 0Ch
		cmp	word ptr ds:400000h, 5A4Dh
		mov	[esp+0Ch+var_C], ebx
		mov	eax, [esp+0Ch+arg_0]
		mov	[esp+0Ch+var_8], esi
		mov	[esp+0Ch+var_4], edi
		jz	short loc_4033C0

loc_4033AD:				; CODE XREF: sub_403390+46j
					; sub_403390+4Ej ...
		xor	eax, eax

loc_4033AF:				; CODE XREF: sub_403390+C8j
		mov	ebx, [esp+0Ch+var_C]
		mov	esi, [esp+0Ch+var_8]
		mov	edi, [esp+0Ch+var_4]
		add	esp, 0Ch
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_4033C0:				; CODE XREF: sub_403390+1Bj
		mov	edx, ds:40003Ch
		cmp	dword ptr [edx+400000h], 4550h
		lea	ecx, [edx+400000h]
		jnz	short loc_4033AD
		cmp	word ptr [ecx+18h], 10Bh
		jnz	short loc_4033AD
		mov	esi, [ecx+80h]
		test	esi, esi
		jz	short loc_4033AD
		movzx	edi, word ptr [ecx+6]
		movzx	edx, word ptr [ecx+14h]
		test	edi, edi
		jz	short loc_4033AD
		movzx	edx, dx
		lea	edx, [ecx+edx+18h]
		xor	ecx, ecx
		jmp	short loc_403404
; ---------------------------------------------------------------------------

loc_403401:				; CODE XREF: sub_403390+87j
		add	edx, 28h

loc_403404:				; CODE XREF: sub_403390+6Fj
		mov	ebx, [edx+0Ch]
		cmp	esi, ebx
		jb	short loc_403412
		add	ebx, [edx+8]
		cmp	esi, ebx
		jb	short loc_40341B

loc_403412:				; CODE XREF: sub_403390+79j
		add	ecx, 1
		cmp	edi, ecx
		ja	short loc_403401
		jmp	short loc_4033AD
; ---------------------------------------------------------------------------

loc_40341B:				; CODE XREF: sub_403390+80j
		test	edx, edx
		lea	esi, [esi+0]
		jz	short loc_4033AD
		add	esi, 400000h
		jmp	short loc_40343A
; ---------------------------------------------------------------------------
		align 10h

loc_403430:				; CODE XREF: sub_403390+AFj
					; sub_403390+B6j
		test	eax, eax
		jle	short loc_403450
		sub	eax, 1
		add	esi, 14h

loc_40343A:				; CODE XREF: sub_403390+98j
		mov	ecx, [esi+4]
		test	ecx, ecx
		jnz	short loc_403430
		mov	edx, [esi+0Ch]
		test	edx, edx
		jnz	short loc_403430
		jmp	loc_4033AD
; ---------------------------------------------------------------------------
		align 10h

loc_403450:				; CODE XREF: sub_403390+A2j
		mov	eax, 400000h
		add	eax, [esi+0Ch]
		jmp	loc_4033AF
sub_403390	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_403460	proc near		; CODE XREF: sub_401190+12Fp

lpModuleName	= dword	ptr -1Ch

		push	ebx
		xor	edx, edx
		sub	esp, 18h
		mov	eax, ds:dword_406058
		test	eax, eax
		jz	short loc_4034B2

loc_40346F:				; CODE XREF: sub_403460+9Fj
					; sub_403460+BAj
		add	esp, 18h
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_403474:				; CODE XREF: sub_403460+83j
					; sub_403460+88j
		movzx	edx, byte ptr [eax+3]
		cmp	dl, 43h
		jz	short loc_403482
		cmp	dl, 63h
		jnz	short loc_4034B0

loc_403482:				; CODE XREF: sub_403460+1Bj
		movzx	edx, byte ptr [eax+4]
		cmp	dl, 52h
		jz	short loc_403492
		cmp	dl, 72h
		xchg	ax, ax
		jnz	short loc_4034B0

loc_403492:				; CODE XREF: sub_403460+29j
		movzx	edx, byte ptr [eax+5]
		cmp	dl, 54h
		jz	short loc_4034EE
		cmp	dl, 74h
		xchg	ax, ax
		jz	short loc_4034EE
		sub	edx, 30h
		cmp	dl, 9
		jbe	short loc_4034EE
		lea	esi, [esi+0]

loc_4034B0:				; CODE XREF: sub_403460+20j
					; sub_403460+30j ...
		mov	edx, ebx

loc_4034B2:				; CODE XREF: sub_403460+Dj
					; sub_403460+8Cj
		lea	ebx, [edx+1]
		mov	[esp+1Ch+lpModuleName],	edx
		call	sub_403390
		test	eax, eax
		jz	short loc_403505
		movzx	edx, byte ptr [eax]
		cmp	dl, 4Dh
		jz	short loc_4034CE
		cmp	dl, 6Dh
		jnz	short loc_4034B0

loc_4034CE:				; CODE XREF: sub_403460+67j
		movzx	edx, byte ptr [eax+1]
		cmp	dl, 53h
		jz	short loc_4034DC
		cmp	dl, 73h
		jnz	short loc_4034B0

loc_4034DC:				; CODE XREF: sub_403460+75j
		movzx	edx, byte ptr [eax+2]
		cmp	dl, 56h
		jz	short loc_403474
		cmp	dl, 76h
		jz	short loc_403474
		mov	edx, ebx
		jmp	short loc_4034B2
; ---------------------------------------------------------------------------

loc_4034EE:				; CODE XREF: sub_403460+39j
					; sub_403460+40j ...
		mov	[esp+1Ch+lpModuleName],	eax ; lpModuleName
		call	ds:GetModuleHandleA
		test	eax, eax
		push	ebx
		mov	ds:dword_406058, eax
		jnz	loc_40346F

loc_403505:				; CODE XREF: sub_403460+5Fj
		mov	[esp+1Ch+lpModuleName],	offset LibFileName ; "msvcrt.dll"
		call	ds:LoadLibraryW
		sub	esp, 4
		mov	ds:dword_406058, eax
		jmp	loc_40346F
sub_403460	endp

; ---------------------------------------------------------------------------
		align 10h
		sub	esp, 2Ch
		mov	[esp+20h], esi
		mov	esi, [esp+30h]
		mov	[esp+1Ch], ebx
		mov	[esp+24h], edi
		mov	[esp+28h], ebp
		mov	[esp], esi
		call	strlen
		cmp	eax, 8
		jbe	short loc_403560

loc_403544:				; CODE XREF: .text:00403569j
					; .text:00403580j ...
		xor	ebx, ebx

loc_403546:				; CODE XREF: .text:004035BAj
		mov	eax, ebx
		mov	esi, [esp+20h]
		mov	ebx, [esp+1Ch]
		mov	edi, [esp+24h]
		mov	ebp, [esp+28h]
		add	esp, 2Ch
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_403560:				; CODE XREF: .text:00403542j
		cmp	word ptr ds:400000h, 5A4Dh
		jnz	short loc_403544
		mov	eax, ds:40003Ch
		cmp	dword ptr [eax+400000h], 4550h
		lea	edx, [eax+400000h]
		jnz	short loc_403544
		cmp	word ptr [edx+18h], 10Bh
		jnz	short loc_403544
		movzx	ebp, word ptr [edx+6]
		movzx	eax, word ptr [edx+14h]
		test	ebp, ebp
		jz	short loc_403544
		movzx	eax, ax
		xor	edi, edi
		lea	ebx, [edx+eax+18h]
		jmp	short loc_4035A4
; ---------------------------------------------------------------------------

loc_4035A1:				; CODE XREF: .text:004035C1j
		add	ebx, 28h

loc_4035A4:				; CODE XREF: .text:0040359Fj
		mov	dword ptr [esp+8], 8
		mov	[esp+4], esi
		mov	[esp], ebx
		call	strncmp
		test	eax, eax
		jz	short loc_403546
		add	edi, 1
		cmp	edi, ebp
		jb	short loc_4035A1
		jmp	loc_403544
; ---------------------------------------------------------------------------
		align 10h
		push	ebp
		mov	ebp, esp
		sub	esp, 28h
		mov	eax, [ebp+4]
		lea	edx, [ebp+4]
		mov	ds:dword_406184, edx
		mov	ds:dword_406060, 0C0000409h
		mov	ds:dword_406064, 1
		mov	ds:dword_406178, eax
		mov	ds:dword_40606C, eax
		mov	eax, [ebp+8]
		mov	dword ptr [esp], 0
		mov	ds:dword_40616C, eax
		mov	eax, dword_404018
		mov	[ebp-10h], eax
		mov	eax, dword_40401C
		mov	[ebp-0Ch], eax
		call	ds:SetUnhandledExceptionFilter
		sub	esp, 4
		mov	dword ptr [esp], offset	off_405714
		call	ds:UnhandledExceptionFilter
		sub	esp, 4
		call	ds:GetCurrentProcess
		mov	dword ptr [esp+4], 0C0000409h
		mov	[esp], eax
		call	ds:TerminateProcess
		sub	esp, 8
		call	abort
; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_403660	proc near		; CODE XREF: start+Dp .text:0040150Dp

lpSystemTimeAsFileTime=	dword ptr -4Ch
var_30		= dword	ptr -30h
PerformanceCount= LARGE_INTEGER	ptr -2Ch
SystemTimeAsFileTime= _FILETIME	ptr -24h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4

		sub	esp, 4Ch
		mov	eax, dword_404018
		mov	[esp+4Ch+var_10], ebx
		mov	[esp+4Ch+var_C], esi
		mov	[esp+4Ch+var_8], edi
		cmp	eax, 0BB40E64Eh
		mov	[esp+4Ch+var_4], ebp
		jz	short loc_4036A0
		not	eax
		mov	dword_40401C, eax

loc_403686:				; CODE XREF: sub_403660+BDj
		mov	ebx, [esp+4Ch+var_10]
		mov	esi, [esp+4Ch+var_C]
		mov	edi, [esp+4Ch+var_8]
		mov	ebp, [esp+4Ch+var_4]
		add	esp, 4Ch
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_4036A0:				; CODE XREF: sub_403660+1Dj
		lea	eax, [esp+4Ch+SystemTimeAsFileTime]
		mov	[esp+4Ch+lpSystemTimeAsFileTime], eax ;	lpSystemTimeAsFileTime
		mov	[esp+4Ch+SystemTimeAsFileTime.dwLowDateTime], 0
		mov	[esp+4Ch+SystemTimeAsFileTime.dwHighDateTime], 0
		call	ds:GetSystemTimeAsFileTime
		sub	esp, 4
		mov	eax, [esp+4Ch+SystemTimeAsFileTime.dwHighDateTime]
		mov	ebp, [esp+4Ch+SystemTimeAsFileTime.dwLowDateTime]
		mov	[esp+4Ch+var_30], eax
		call	ds:GetCurrentProcessId
		mov	edi, eax
		call	ds:GetCurrentThreadId
		mov	esi, eax
		call	ds:GetTickCount
		mov	ebx, eax
		lea	eax, [esp+4Ch+PerformanceCount]
		mov	[esp+4Ch+lpSystemTimeAsFileTime], eax ;	lpPerformanceCount
		call	ds:QueryPerformanceCounter
		sub	esp, 4
		xor	ebp, [esp+4Ch+var_30]
		xor	ebp, dword ptr [esp+4Ch+PerformanceCount]
		xor	ebp, dword ptr [esp+4Ch+PerformanceCount+4]
		xor	ebp, edi
		xor	ebp, esi
		xor	ebp, ebx
		mov	eax, ebp
		cmp	ebp, 0BB40E64Eh
		not	eax
		jz	short loc_403722

loc_403712:				; CODE XREF: sub_403660+CBj
		mov	dword_404018, ebp
		mov	dword_40401C, eax
		jmp	loc_403686
; ---------------------------------------------------------------------------

loc_403722:				; CODE XREF: sub_403660+B0j
		mov	eax, 44BF19B0h
		mov	bp, 0E64Fh
		jmp	short loc_403712
sub_403660	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_403730	proc near		; CODE XREF: sub_401190:loc_4012E5p
					; TopLevelExceptionFilter+164p
		fninit
		retn
sub_403730	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_403740()
sub_403740	proc near		; DATA XREF: sub_4037D0:loc_40379Ao
		sub	esp, 0Ch
		mov	eax, off_404010
		mov	eax, [eax]
		test	eax, eax
		jz	short loc_403767
		xchg	ax, ax

loc_403750:				; CODE XREF: sub_403740+25j
		call	eax
		mov	eax, off_404010
		lea	edx, [eax+4]
		mov	eax, [eax+4]
		mov	off_404010, edx
		test	eax, eax
		jnz	short loc_403750

loc_403767:				; CODE XREF: sub_403740+Cj
		add	esp, 0Ch
		retn
sub_403740	endp

; ---------------------------------------------------------------------------
		align 10h
; START	OF FUNCTION CHUNK FOR sub_4037D0

loc_403770:				; CODE XREF: sub_4037D0+1Ej
		push	esi
		push	ebx
		sub	esp, 14h
		mov	ebx, ds:dword_403E70
		cmp	ebx, 0FFFFFFFFh
		jz	short loc_4037B0

loc_403780:				; CODE XREF: sub_4037D0-Cj
		test	ebx, ebx
		jz	short loc_40379A
		lea	esi, ds:403E70h[ebx*4]
		nop
		lea	esi, [esi+0]

loc_403790:				; CODE XREF: sub_4037D0-38j
		call	dword ptr [esi]
		sub	esi, 4
		sub	ebx, 1
		jnz	short loc_403790

loc_40379A:				; CODE XREF: sub_4037D0-4Ej
		mov	[esp+1Ch+var_1C], offset sub_403740 ; _onexit_t
		call	sub_402C70
		add	esp, 14h
		pop	ebx
		pop	esi
		retn
; END OF FUNCTION CHUNK	FOR sub_4037D0
; ---------------------------------------------------------------------------
		align 10h
; START	OF FUNCTION CHUNK FOR sub_4037D0

loc_4037B0:				; CODE XREF: sub_4037D0-52j
		xor	ebx, ebx
		jmp	short loc_4037B6
; ---------------------------------------------------------------------------

loc_4037B4:				; CODE XREF: sub_4037D0-Ej
		mov	ebx, eax

loc_4037B6:				; CODE XREF: sub_4037D0-1Ej
		lea	eax, [ebx+1]
		mov	edx, ds:dword_403E70[eax*4]
		test	edx, edx
		jnz	short loc_4037B4
		jmp	short loc_403780
; END OF FUNCTION CHUNK	FOR sub_4037D0
; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_4037D0	proc near		; CODE XREF: sub_401AC0+Cp

var_1C		= dword	ptr -1Ch

; FUNCTION CHUNK AT 00403770 SIZE 0000003C BYTES
; FUNCTION CHUNK AT 004037B0 SIZE 00000016 BYTES

		sub	esp, 0Ch
		mov	ecx, ds:dword_4063A0
		test	ecx, ecx
		jz	short loc_4037E1
		add	esp, 0Ch
		retn
; ---------------------------------------------------------------------------

loc_4037E1:				; CODE XREF: sub_4037D0+Bj
		mov	ds:dword_4063A0, 1
		add	esp, 0Ch
		jmp	short loc_403770
sub_4037D0	endp ; sp-analysis failed


; =============== S U B	R O U T	I N E =======================================


sub_4037F0	proc near		; CODE XREF: sub_403870+13p
					; sub_403870:loc_403891p

lpCriticalSection= dword ptr -2Ch

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 1Ch
		mov	eax, ds:dword_4063A4
		test	eax, eax
		jnz	short loc_403808
		add	esp, 1Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_403808:				; CODE XREF: sub_4037F0+Ej
		mov	[esp+2Ch+lpCriticalSection], offset CriticalSection ; lpCriticalSection
		call	ds:EnterCriticalSection
		mov	ebx, ds:dword_4063C0
		sub	esp, 4
		test	ebx, ebx
		jz	short loc_403855
		mov	ebp, ds:TlsGetValue
		mov	edi, ds:GetLastError
		xchg	ax, ax

loc_403830:				; CODE XREF: sub_4037F0+63j
		mov	eax, [ebx]
		mov	[esp+2Ch+lpCriticalSection], eax ; dwTlsIndex
		call	ebp ; TlsGetValue
		sub	esp, 4
		mov	esi, eax
		call	edi ; GetLastError
		test	eax, eax
		jnz	short loc_40384E
		test	esi, esi
		jz	short loc_40384E
		mov	eax, [ebx+4]
		mov	[esp+2Ch+lpCriticalSection], esi
		call	eax

loc_40384E:				; CODE XREF: sub_4037F0+50j
					; sub_4037F0+54j
		mov	ebx, [ebx+8]
		test	ebx, ebx
		jnz	short loc_403830

loc_403855:				; CODE XREF: sub_4037F0+30j
		mov	[esp+2Ch+lpCriticalSection], offset CriticalSection ; lpCriticalSection
		call	ds:LeaveCriticalSection
		sub	esp, 4
		add	esp, 1Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
sub_4037F0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_403870	proc near		; CODE XREF: TlsCallback_1+33p
					; TlsCallback_0+77p

lpCriticalSection= dword ptr -1Ch
arg_4		= dword	ptr  8

		sub	esp, 1Ch
		mov	eax, [esp+1Ch+arg_4]
		cmp	eax, 1
		jz	short loc_4038C0
		jb	short loc_403891
		cmp	eax, 3
		jnz	short loc_403888
		call	sub_4037F0

loc_403888:				; CODE XREF: sub_403870+11j
					; sub_403870+2Ej ...
		mov	eax, 1
		add	esp, 1Ch
		retn
; ---------------------------------------------------------------------------

loc_403891:				; CODE XREF: sub_403870+Cj
		call	sub_4037F0
		mov	eax, ds:dword_4063A4
		cmp	eax, 1
		jnz	short loc_403888
		mov	ds:dword_4063A4, 0
		mov	[esp+1Ch+lpCriticalSection], offset CriticalSection ; lpCriticalSection
		call	ds:DeleteCriticalSection
		sub	esp, 4
		jmp	short loc_403888
; ---------------------------------------------------------------------------
		align 10h

loc_4038C0:				; CODE XREF: sub_403870+Aj
		mov	eax, ds:dword_4063A4
		test	eax, eax
		jz	short loc_4038E0

loc_4038C9:				; CODE XREF: sub_403870+80j
		mov	ds:dword_4063A4, 1
		mov	eax, 1
		add	esp, 1Ch
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_4038E0:				; CODE XREF: sub_403870+57j
		mov	[esp+1Ch+lpCriticalSection], offset CriticalSection ; lpCriticalSection
		call	ds:InitializeCriticalSection
		sub	esp, 4
		jmp	short loc_4038C9
sub_403870	endp

; ---------------------------------------------------------------------------
		align 10h

loc_403900:				; CODE XREF: .text:00403D66j
		push	ebx
		sub	esp, 18h
		mov	eax, ds:dword_4063A4
		mov	ebx, [esp+20h]
		test	eax, eax
		jnz	short loc_403918
		xor	eax, eax
		add	esp, 18h
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_403918:				; CODE XREF: .text:0040390Fj
		mov	dword ptr [esp], offset	CriticalSection
		call	ds:EnterCriticalSection
		mov	eax, ds:dword_4063C0
		sub	esp, 4
		test	eax, eax
		jz	short loc_40394F
		mov	edx, [eax]
		cmp	edx, ebx
		jnz	short loc_403946
		jmp	short loc_403986
; ---------------------------------------------------------------------------
		align 10h

loc_403940:				; CODE XREF: .text:0040394Dj
		mov	edx, [eax]
		cmp	edx, ebx
		jz	short loc_403966

loc_403946:				; CODE XREF: .text:00403935j
		mov	ecx, eax
		mov	eax, [eax+8]
		test	eax, eax
		jnz	short loc_403940

loc_40394F:				; CODE XREF: .text:0040392Fj
		mov	dword ptr [esp], offset	CriticalSection
		call	ds:LeaveCriticalSection
		sub	esp, 4

loc_40395F:				; CODE XREF: .text:00403984j
		xor	eax, eax
		add	esp, 18h
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_403966:				; CODE XREF: .text:00403944j
		mov	edx, [eax+8]
		mov	[ecx+8], edx

loc_40396C:				; CODE XREF: .text:0040398Fj
		mov	[esp], eax
		call	free
		mov	dword ptr [esp], offset	CriticalSection
		call	ds:LeaveCriticalSection
		sub	esp, 4
		jmp	short loc_40395F
; ---------------------------------------------------------------------------

loc_403986:				; CODE XREF: .text:00403937j
		mov	edx, [eax+8]
		mov	ds:dword_4063C0, edx
		jmp	short loc_40396C
; ---------------------------------------------------------------------------
		jmp	short loc_4039A0
; ---------------------------------------------------------------------------
		align 10h

loc_4039A0:				; CODE XREF: .text:00403991j
					; .text:00403D4Aj
		push	ebx
		sub	esp, 18h
		mov	eax, ds:dword_4063A4
		test	eax, eax
		jnz	short loc_4039B2

loc_4039AD:				; CODE XREF: .text:004039CFj
					; .text:00403A0Ej
		add	esp, 18h
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_4039B2:				; CODE XREF: .text:004039ABj
		mov	dword ptr [esp+4], 0Ch
		mov	dword ptr [esp], 1
		call	calloc
		mov	ebx, eax
		mov	eax, 0FFFFFFFFh
		test	ebx, ebx
		jz	short loc_4039AD
		mov	eax, [esp+20h]
		mov	dword ptr [esp], offset	CriticalSection
		mov	[ebx], eax
		mov	eax, [esp+24h]
		mov	[ebx+4], eax
		call	ds:EnterCriticalSection
		mov	eax, ds:dword_4063C0
		mov	ds:dword_4063C0, ebx
		mov	[ebx+8], eax
		sub	esp, 4
		mov	dword ptr [esp], offset	CriticalSection
		call	ds:LeaveCriticalSection
		xor	eax, eax
		sub	esp, 4
		jmp	short loc_4039AD

; =============== S U B	R O U T	I N E =======================================


sub_403A10	proc near		; CODE XREF: .text:00401929p
					; .text:00401965p

var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		sub	esp, 2Ch
		mov	edx, [esp+2Ch+arg_C]
		mov	[esp+2Ch+var_10], ebx
		mov	ebx, [esp+2Ch+arg_8]
		mov	[esp+2Ch+var_C], esi
		mov	esi, [esp+2Ch+arg_4]
		mov	[esp+2Ch+var_8], edi
		mov	edi, [esp+2Ch+arg_0]
		test	edx, edx
		mov	[esp+2Ch+var_4], ebp
		jnz	short loc_403A60
		cmp	ebx, esi
		ja	short loc_403AA0
		test	ebx, ebx
		jnz	short loc_403A4A
		mov	eax, 1
		xor	edx, edx
		div	ebx
		mov	ebx, eax

loc_403A4A:				; CODE XREF: sub_403A10+2Dj
		mov	eax, esi
		xor	edx, edx
		div	ebx
		mov	esi, eax
		mov	eax, edi
		div	ebx
		mov	edi, eax
		jmp	short loc_403A84
; ---------------------------------------------------------------------------
		align 10h

loc_403A60:				; CODE XREF: sub_403A10+25j
		cmp	edx, esi
		ja	short loc_403A80
		bsr	ebp, edx
		xor	ebp, 1Fh
		jnz	short loc_403AB0
		cmp	ebx, edi
		xchg	ax, ax
		jbe	loc_403B12
		cmp	edx, esi
		jb	loc_403B12
		xchg	ax, ax

loc_403A80:				; CODE XREF: sub_403A10+52j
		xor	esi, esi
		xor	edi, edi

loc_403A84:				; CODE XREF: sub_403A10+48j
					; sub_403A10+9Aj ...
		mov	eax, edi
		mov	edx, esi
		mov	ebx, [esp+2Ch+var_10]
		mov	esi, [esp+2Ch+var_C]
		mov	edi, [esp+2Ch+var_8]
		mov	ebp, [esp+2Ch+var_4]
		add	esp, 2Ch
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_403AA0:				; CODE XREF: sub_403A10+29j
		mov	edx, esi
		mov	eax, edi
		xor	esi, esi
		div	ebx
		mov	edi, eax
		jmp	short loc_403A84
; ---------------------------------------------------------------------------
		align 10h

loc_403AB0:				; CODE XREF: sub_403A10+5Aj
		mov	ecx, ebp
		mov	eax, 20h
		sub	eax, ebp
		shl	edx, cl
		mov	ecx, eax
		mov	[esp+2Ch+var_20], edx
		mov	edx, ebx
		shr	edx, cl
		mov	ecx, [esp+2Ch+var_20]
		or	ecx, edx
		mov	edx, edi
		mov	[esp+2Ch+var_20], ecx
		mov	ecx, ebp
		shl	ebx, cl
		mov	ecx, eax
		mov	[esp+2Ch+var_24], ebx
		mov	ebx, esi
		shr	ebx, cl
		mov	ecx, ebp
		shl	esi, cl
		mov	ecx, eax
		shr	edx, cl
		or	esi, edx
		mov	edx, ebx
		mov	eax, esi
		div	[esp+2Ch+var_20]
		mov	ebx, edx
		mov	esi, eax
		mul	[esp+2Ch+var_24]
		cmp	ebx, edx
		jb	short loc_403B20
		mov	ecx, ebp
		shl	edi, cl
		cmp	edi, eax
		jnb	short loc_403B09
		cmp	ebx, edx
		jz	short loc_403B20

loc_403B09:				; CODE XREF: sub_403A10+F3j
		mov	edi, esi
		xor	esi, esi
		jmp	loc_403A84
; ---------------------------------------------------------------------------

loc_403B12:				; CODE XREF: sub_403A10+60j
					; sub_403A10+68j
		xor	esi, esi
		mov	edi, 1
		jmp	loc_403A84
; ---------------------------------------------------------------------------
		align 10h

loc_403B20:				; CODE XREF: sub_403A10+EBj
					; sub_403A10+F7j
		lea	edi, [esi-1]
		xor	esi, esi
		jmp	loc_403A84
sub_403A10	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_403B30	proc near		; CODE XREF: .text:00401945p

var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		sub	esp, 2Ch
		mov	[esp+2Ch+var_8], edi
		mov	edi, [esp+2Ch+arg_C]
		mov	eax, [esp+2Ch+arg_0]
		mov	[esp+2Ch+var_10], ebx
		mov	ebx, [esp+2Ch+arg_4]
		mov	[esp+2Ch+var_C], esi
		mov	esi, [esp+2Ch+arg_8]
		test	edi, edi
		mov	[esp+2Ch+var_4], ebp
		mov	ecx, eax
		mov	ebp, eax
		jnz	short loc_403B80
		cmp	esi, ebx
		jbe	short loc_403BA2
		mov	edx, ebx
		div	esi

loc_403B63:				; CODE XREF: sub_403B30+8Bj
		mov	eax, edx
		xor	edx, edx

loc_403B67:				; CODE XREF: sub_403B30+70j
					; sub_403B30+105j
		mov	ebx, [esp+2Ch+var_10]
		mov	esi, [esp+2Ch+var_C]
		mov	edi, [esp+2Ch+var_8]
		mov	ebp, [esp+2Ch+var_4]
		add	esp, 2Ch
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_403B80:				; CODE XREF: sub_403B30+29j
		cmp	edi, ebx
		ja	short loc_403B9E
		bsr	eax, edi
		xor	eax, 1Fh
		mov	[esp+2Ch+var_28], eax
		jnz	short loc_403BC0
		cmp	esi, ebp
		ja	loc_403C50

loc_403B98:				; CODE XREF: sub_403B30+122j
		sub	ecx, esi
		sbb	ebx, edi
		mov	eax, ecx

loc_403B9E:				; CODE XREF: sub_403B30+52j
					; sub_403B30+12Aj
		mov	edx, ebx
		jmp	short loc_403B67
; ---------------------------------------------------------------------------

loc_403BA2:				; CODE XREF: sub_403B30+2Dj
		test	esi, esi
		jnz	short loc_403BB1
		mov	eax, 1
		xor	edx, edx
		div	esi
		mov	esi, eax

loc_403BB1:				; CODE XREF: sub_403B30+74j
		mov	eax, ebx
		xor	edx, edx
		div	esi
		mov	eax, ecx
		div	esi
		jmp	short loc_403B63
; ---------------------------------------------------------------------------
		align 10h

loc_403BC0:				; CODE XREF: sub_403B30+5Ej
		movzx	ecx, byte ptr [esp+2Ch+var_28]
		mov	eax, edi
		mov	edi, 20h
		sub	edi, [esp+2Ch+var_28]
		mov	edx, esi
		shl	eax, cl
		mov	ecx, edi
		shr	edx, cl
		movzx	ecx, byte ptr [esp+2Ch+var_28]
		or	edx, eax
		mov	eax, ebp
		mov	[esp+2Ch+var_20], edx
		shl	esi, cl
		mov	ecx, edi
		mov	[esp+2Ch+var_24], esi
		mov	esi, ebx
		shr	esi, cl
		movzx	ecx, byte ptr [esp+2Ch+var_28]
		mov	edx, esi
		shl	ebx, cl
		mov	ecx, edi
		shr	eax, cl
		movzx	ecx, byte ptr [esp+2Ch+var_28]
		or	eax, ebx
		div	[esp+2Ch+var_20]
		mov	esi, edx
		shl	ebp, cl
		mul	[esp+2Ch+var_24]
		cmp	esi, edx
		jb	short loc_403C44
		cmp	ebp, eax
		jb	short loc_403C40

loc_403C19:				; CODE XREF: sub_403B30+112j
					; sub_403B30+11Cj
		movzx	ecx, byte ptr [esp+2Ch+var_28]
		sub	ebp, eax
		sbb	esi, edx
		mov	eax, esi
		mov	edx, esi
		shr	ebp, cl
		mov	ecx, edi
		shl	eax, cl
		movzx	ecx, byte ptr [esp+2Ch+var_28]
		or	eax, ebp
		shr	edx, cl
		jmp	loc_403B67
; ---------------------------------------------------------------------------
		align 10h

loc_403C40:				; CODE XREF: sub_403B30+E7j
		cmp	esi, edx
		jnz	short loc_403C19

loc_403C44:				; CODE XREF: sub_403B30+E3j
		sub	eax, [esp+2Ch+var_24]
		sbb	edx, [esp+2Ch+var_20]
		jmp	short loc_403C19
; ---------------------------------------------------------------------------
		align 10h

loc_403C50:				; CODE XREF: sub_403B30+62j
		cmp	edi, ebx
		jb	loc_403B98
		mov	eax, ecx
		jmp	loc_403B9E
sub_403B30	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_403C60	proc near		; CODE XREF: sub_402EB0+3Cp

arg_0		= byte ptr  4

		push	ecx
		lea	ecx, [esp+4+arg_0]
		cmp	eax, 1000h
		jb	short loc_403C81

loc_403C6C:				; CODE XREF: sub_403C60+1Fj
		sub	ecx, 1000h
		or	dword ptr [ecx], 0
		sub	eax, 1000h
		cmp	eax, 1000h
		ja	short loc_403C6C

loc_403C81:				; CODE XREF: sub_403C60+Aj
		sub	ecx, eax
		or	dword ptr [ecx], 0
		mov	eax, esp
		mov	esp, ecx
		mov	ecx, [eax]
		mov	eax, [eax+4]
		push	eax
		retn
sub_403C60	endp

; ---------------------------------------------------------------------------
		align 10h
		mov	eax, [esp+0Ch]
		mov	edx, [esp+8]
		mov	ecx, [esp+4]
		lock cmpxchg [ecx], edx
		retn
; ---------------------------------------------------------------------------
		jmp	short sub_403CC0
; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_403CC0	proc near		; CODE XREF: sub_401190+A7p
					; .text:00403CB1j

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		mov	eax, [esp+arg_8]
		mov	edx, [esp+arg_4]
		mov	ecx, [esp+arg_0]
		lock cmpxchg [ecx], edx
		retn	0Ch
sub_403CC0	endp

; ---------------------------------------------------------------------------
		align 10h
		mov	eax, [esp+8]
		mov	edx, [esp+4]
		lock xchg eax, [edx]
		retn
; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_403CF0	proc near		; CODE XREF: sub_401190+305p

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, [esp+arg_4]
		mov	edx, [esp+arg_0]
		lock xchg eax, [edx]
		retn	8
sub_403CF0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_403D00(char *, size_t, char *, char)
sub_403D00	proc near		; CODE XREF: sub_401AC0+2E8p

DstBuf		= dword	ptr -1Ch
MaxCount	= dword	ptr -18h
Format		= dword	ptr -14h
ArgList		= dword	ptr -10h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= byte ptr  10h

		sub	esp, 1Ch
		lea	eax, [esp+1Ch+arg_C]
		mov	[esp+1Ch+ArgList], eax ; ArgList
		mov	eax, [esp+1Ch+arg_8]
		mov	[esp+1Ch+Format], eax ;	Format
		mov	eax, [esp+1Ch+arg_4]
		mov	[esp+1Ch+MaxCount], eax	; MaxCount
		mov	eax, [esp+1Ch+arg_0]
		mov	[esp+1Ch+DstBuf], eax ;	DstBuf
		call	_vsnprintf
		add	esp, 1Ch
		retn
sub_403D00	endp

; ---------------------------------------------------------------------------
		align 10h
		sub	esp, 0Ch
		mov	eax, [esp+14h]
		mov	edx, [esp+10h]
		test	eax, eax
		jz	short loc_403D50
		mov	[esp+14h], eax
		mov	[esp+10h], edx
		add	esp, 0Ch
		jmp	loc_4039A0
; ---------------------------------------------------------------------------
		align 10h

loc_403D50:				; CODE XREF: .text:00403D3Dj
		add	esp, 0Ch
		retn
; ---------------------------------------------------------------------------
		align 10h
		sub	esp, 0Ch
		add	esp, 0Ch
		jmp	loc_403900
; ---------------------------------------------------------------------------
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION __getmainargs]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION __set_app_type]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION strlen]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION malloc]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION memcpy]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _cexit]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _amsg_exit]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _initterm]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION exit]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION signal]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION putchar]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION printf]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION setvbuf]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION free]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION realloc]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION fprintf]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION fwrite]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION puts]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION fflush]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _lock]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION __dllonexit]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _unlock]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION vfprintf]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION abort]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION strncmp]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION calloc]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _vsnprintf]
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_403E50	proc near		; DATA XREF: .text:00403E74o

var_18		= dword	ptr -18h

		push	ebp
		mov	ebp, esp
		sub	esp, 18h
		call	sub_4016A0
		mov	[esp+18h+var_18], offset sub_4016F0 ; _onexit_t
		call	sub_402C70
		leave
		retn
sub_403E50	endp

; ---------------------------------------------------------------------------
		align 10h
dword_403E70	dd 0FFFFFFFFh		; DATA XREF: sub_4037D0-5Br
					; sub_4037D0-17r
		dd offset sub_403E50
		dd 0
		dd 0FFFFFFFFh
dword_403E80	dd 60h dup(0)		; DATA XREF: .data:off_404010o
_text		ends

; Section 2. (virtual address 00004000)
; Virtual size			: 00000024 (	 36.)
; Section size in file		: 00000200 (	512.)
; Offset to raw	data for section: 00003400
; Flags	C0300040: Data Readable	Writable
; Alignment	: 4 bytes
; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read/Write
_data		segment	dword public 'DATA' use32
		assume cs:_data
		;org 404000h
dword_404000	dd 0FFFFFFFFh		; DATA XREF: sub_401010+25r
		dd 0FFh, 2 dup(0FFFFFFFFh)
off_404010	dd offset dword_403E80	; DATA XREF: sub_403740+3r
					; sub_403740+12r ...
dword_404014	dd 2			; DATA XREF: TlsCallback_0+4r
					; TlsCallback_0+11w
dword_404018	dd 0BB40E64Eh		; DATA XREF: .text:0040360Fr
					; sub_403660+3r ...
dword_40401C	dd 44BF19B1h		; DATA XREF: .text:00403617r
					; sub_403660+21w ...
dword_404020	dd 0			; DATA XREF: sub_4016A0+6r
					; sub_4016A0+42o
		align 1000h
_data		ends

; Section 3. (virtual address 00005000)
; Virtual size			: 0000071C (   1820.)
; Section size in file		: 00000800 (   2048.)
; Offset to raw	data for section: 00003600
; Flags	40300040: Data Readable
; Alignment	: 4 bytes
; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 405000h
; CHAR ProcName[]
ProcName	db '_set_invalid_parameter_handler',0 ; DATA XREF: sub_401190+134o
		align 10h
; CHAR ModuleName[]
ModuleName	db 'libgcj_s.dll',0     ; DATA XREF: sub_4016A0+Fo
; CHAR a_jv_registercl[]
a_jv_registercl	db '_Jv_RegisterClasses',0 ; DATA XREF: sub_4016A0+2Ao
		align 4
; char aSLuLu[]
aSLuLu		db '%s',9,'%lu',9,'%lu',0 ; DATA XREF: sub_401700+13o
; char aU[]
aU		db 9,'%u',0             ; DATA XREF: sub_401700+1B9o
					; sub_401700+1D9o
aNone		db '<none>',0           ; DATA XREF: sub_401700+A2o
					; sub_401700+CFo ...
; char aS_1[]
aS_1		db 9,'%s',0             ; DATA XREF: sub_401700+B4o
					; sub_401700+E1o ...
aMc		db 'mc',0               ; DATA XREF: .text:00401A46o
aMr		db 'mr',0               ; DATA XREF: .text:00401A26o
aErr		db 'err',0              ; DATA XREF: .text:00401A0Do
aSig		db 'sig',0              ; DATA XREF: .text:004019F4o
aTun		db 'tun',0              ; DATA XREF: .text:0040199Ao
aSLuLu_0	db '%s',9,'%lu',9,'%lu',0Ah,0 ; DATA XREF: .text:004019A2o
aDisconnected	db 'Disconnected',0     ; DATA XREF: .text:loc_4019BAo
					; sub_401A70+18o
aOrg_freedeskto	db 'org.freedesktop.DBus.Local',0 ; DATA XREF: .text:004019C2o
					; sub_401A70+20o
aSystem		db '--system',0         ; DATA XREF: sub_401AC0+88o
		align 10h
aIOnlySupportMo	db 'I only support monitoring one bus at a time!',0Ah,0
					; DATA XREF: sub_401AC0+315o
		align 10h
; char aUsageSSystemSe[]
aUsageSSystemSe	db 'Usage: %s [--system | --session | --address ADDRESS] [--monitor |'
					; DATA XREF: sub_401AC0+32Co
					; sub_401AC0+38Ao ...
		db ' --profile ] [watch expressions]',0Ah,0
aSession	db '--session',0        ; DATA XREF: sub_401AC0+B1o
aAddress	db '--address',0        ; DATA XREF: sub_401AC0+BEo
aHelp		db '--help',0           ; DATA XREF: sub_401AC0+D2o
aMonitor	db '--monitor',0        ; DATA XREF: sub_401AC0+E6o
aProfile	db '--profile',0        ; DATA XREF: sub_401AC0:loc_401D15o
asc_405172	db '--',0               ; DATA XREF: sub_401AC0+269o
; char aS[]
aS		db '%s',0               ; DATA XREF: sub_401AC0+2D6o
aFailedToRegist	db 'Failed to register connection to bus at %s: %s',0Ah,0
					; DATA XREF: sub_401AC0+568o
		dd 0
aFailedToOpenCo	db 'Failed to open connection to %s: %s',0Ah,0 ; DATA XREF: sub_401AC0+58Co
		align 4
; char Format[]
Format		db 'Failed to setup match "%s": %s',0Ah,0 ; DATA XREF: sub_401AC0+1C8o
aTypeSignal	db 'type=',27h,'signal',27h,0 ; DATA XREF: sub_401AC0+441o
aTypeMethod_cal	db 'type=',27h,'method_call',27h,0 ; DATA XREF: sub_401AC0+469o
aTypeMethod_ret	db 'type=',27h,'method_return',27h,0 ; DATA XREF: sub_401AC0+48Bo
aTypeError	db 'type=',27h,'error',27h,0 ; DATA XREF: sub_401AC0+4A9o
aCouldnTAddFilt	db 'Couldn',27h,'t add filter!',0Ah,0 ; DATA XREF: sub_401AC0+53Ao
aErrorS		db 'Error: %s',0Ah,0    ; DATA XREF: sub_401AC0+514o
aSessionBus	db 'session bus',0      ; DATA XREF: .rdata:off_405270o
aSystemBus	db 'system bus',0       ; DATA XREF: .rdata:00405274o
		align 10h
off_405270	dd offset aSessionBus	; DATA XREF: sub_401AC0+416r
					; "session bus"
		dd offset aSystemBus	; "system bus"
; char asc_405278[4]
asc_405278	db '   ',0              ; DATA XREF: sub_402080+5Ao
					; sub_402080+2A3o ...
aString		db 'string "',0         ; DATA XREF: sub_402080:loc_402681o
; char aS_0[]
aS_0		db '%s',0               ; DATA XREF: sub_402080+207o
					; sub_402080+3FFo
; char asc_405288[]
asc_405288	db '"',0                ; DATA XREF: sub_402080+40Fo
; char aSignature[]
aSignature	db 'signature "',0      ; DATA XREF: sub_402080+3ECo
aObjectPath	db 'object path "',0    ; DATA XREF: sub_402080+339o
; char aInt16D[]
aInt16D		db 'int16 %d',0Ah,0     ; DATA XREF: sub_402080+361o
; char aUint16U[]
aUint16U	db 'uint16 %u',0Ah,0    ; DATA XREF: sub_402080+2F1o
; char aInt32D[]
aInt32D		db 'int32 %d',0Ah,0     ; DATA XREF: sub_402080+3A4o
; char aUint32U[]
aUint32U	db 'uint32 %u',0Ah,0    ; DATA XREF: sub_402080+180o
; char Str[]
Str		db 'int64 (omitted)',0  ; DATA XREF: sub_402080+FCo
; char aUint64Omitted[]
aUint64Omitted	db 'uint64 (omitted)',0 ; DATA XREF: sub_402080+1BCo
; char aDoubleG[]
aDoubleG	db 'double %g',0Ah,0    ; DATA XREF: sub_402080+4CCo
; char aByteD[]
aByteD		db 'byte %d',0Ah,0      ; DATA XREF: sub_402080+C3o
aFalse		db 'false',0            ; DATA XREF: sub_402080:loc_402677o
aTrue		db 'true',0             ; DATA XREF: sub_402080+516o
; char aBooleanS[]
aBooleanS	db 'boolean %s',0Ah,0   ; DATA XREF: sub_402080+527o
; char aVariant[]
aVariant	db 'variant ',0         ; DATA XREF: sub_402080+131o
; char aArrayOfBytesS[]
aArrayOfBytesS	db 'array of bytes "%s"',0Ah,0 ; DATA XREF: sub_402080+825o
; char aArrayOfBytes[]
aArrayOfBytes	db 'array of bytes [',0 ; DATA XREF: sub_402080+6D3o
; char a02x[]
a02x		db '%02x',0             ; DATA XREF: sub_402080+736o
; char asc_40534E[]
asc_40534E	db ']',0                ; DATA XREF: sub_402080:loc_402643o
					; sub_402080:loc_402854o
; char aArray[]
aArray		db 'array [',0          ; DATA XREF: sub_402080+56Co
; char aDictEntry[]
aDictEntry	db 'dict entry(',0      ; DATA XREF: sub_402080+446o
; char asc_405364[]
asc_405364	db ')',0                ; DATA XREF: sub_402080:loc_40251Ao
; char aStruct[]
aStruct		db 'struct {',0         ; DATA XREF: sub_402080+240o
; char asc_40536F[]
asc_40536F	db '}',0                ; DATA XREF: sub_402080:loc_402333o
		align 4
; char aDbusMonitorToo[]
aDbusMonitorToo	db ' (dbus-monitor too dumb to decipher arg type ',27h,'%c',27h,')',0Ah,0
					; DATA XREF: sub_402080+76o
off_4053A8	dd offset loc_4025CB	; DATA XREF: sub_402080:loc_402120r
		dd offset loc_40257B	; jump table for switch	statement
		dd offset loc_4020F2
		dd offset loc_402538
		dd offset loc_4024B5
		dd offset loc_4020F2
		dd offset loc_40244C
		dd offset loc_4020F2
		dd offset loc_402409
		dd offset loc_4020F2
		dd offset loc_4020F2
		dd offset loc_4020F2
		dd offset loc_4020F2
		dd offset loc_4023C5
		dd offset loc_402399
		dd offset loc_4020F2
		dd offset loc_402355
		dd offset loc_4022AF
		dd offset loc_402260
		dd offset loc_402228
		dd offset loc_4021E5
		dd offset loc_4021A0
		dd offset loc_4020F2
		dd offset loc_402168
		dd offset loc_402127
aNullDestinatio	db '(null destination)',0 ; DATA XREF: sub_4028C0:loc_402A80o
aNullSender	db '(null sender)',0    ; DATA XREF: sub_4028C0:loc_402A90o
aUnknownMessage	db '(unknown message type)',0 ; DATA XREF: sub_4028C0+69o
; char aSSenderSDestS[]
aSSenderSDestS	db '%s sender=%s -> dest=%s',0 ; DATA XREF: sub_4028C0+86o
; char aSerialUPathSIn[]
aSerialUPathSIn	db ' serial=%u path=%s; interface=%s; member=%s',0Ah,0
					; DATA XREF: sub_4028C0+E5o
; char aReply_serialU[]
aReply_serialU	db ' reply_serial=%u',0Ah,0 ; DATA XREF: sub_4028C0+179o
		align 4
; char aError_nameSRep[]
aError_nameSRep	db ' error_name=%s reply_serial=%u',0Ah,0 ; DATA XREF: sub_4028C0+1A8o
aMethodCall	db 'method call',0      ; DATA XREF: .rdata:off_4054E4o
aMethodReturn	db 'method return',0    ; DATA XREF: .rdata:004054E8o
aError		db 'error',0            ; DATA XREF: .rdata:004054ECo
aSignal		db 'signal',0           ; DATA XREF: .rdata:004054F0o
		align 4
off_4054E4	dd offset aMethodCall	; DATA XREF: sub_4028C0+73r
					; "method call"
		dd offset aMethodReturn	; "method return"
		dd offset aError	; "error"
		dd offset aSignal	; "signal"
off_4054F4	dd offset TlsCallback_0	; DATA XREF: sub_401190:loc_401280r
aUnknownError	db 'Unknown error',0    ; DATA XREF: sub_402C90+3o
		align 4
; char a_matherrSInSGG[]
a_matherrSInSGG	db '_matherr(): %s in %s(%g, %g)  (retval=%g)',0Ah,0
					; DATA XREF: sub_402C90+39o
		align 4
aArgumentDomain	db 'Argument domain error (DOMAIN)',0 ; DATA XREF: .rdata:off_405614o
aArgumentSingul	db 'Argument singularity (SIGN)',0 ; DATA XREF: .rdata:00405618o
		align 10h
aOverflowRangeE	db 'Overflow range error (OVERFLOW)',0 ; DATA XREF: .rdata:0040561Co
aTheResultIsToo	db 'The result is too small to be represented (UNDERFLOW)',0
					; DATA XREF: .rdata:00405620o
		align 4
aTotalLossOfSig	db 'Total loss of significance (TLOSS)',0 ; DATA XREF: .rdata:00405624o
		align 4
aPartialLossOfS	db 'Partial loss of significance (PLOSS)',0 ; DATA XREF: .rdata:00405628o
		align 4
off_405614	dd offset aArgumentDomain ; DATA XREF: sub_402C90+16r
					; "Argument domain error (DOMAIN)"
		dd offset aArgumentSingul ; "Argument singularity (SIGN)"
		dd offset aOverflowRangeE ; "Overflow range error (OVERFLOW)"
		dd offset aTheResultIsToo ; "The result	is too small to	be represent"...
		dd offset aTotalLossOfSig ; "Total loss	of significance	(TLOSS)"
		dd offset aPartialLossOfS ; "Partial loss of significance (PLOSS)"
aMingwW64Runtim	db 'Mingw-w64 runtime failure:',0Ah,0 ; DATA XREF: sub_402D00+1Do
; char aAddressPHasNoI[]
aAddressPHasNoI	db 'Address %p has no image-section',0 ; DATA XREF: sub_402D60+13Ao
; char aVirtualqueryFa[]
aVirtualqueryFa	db '  VirtualQuery failed for %d bytes at address %p',0
					; DATA XREF: sub_402D60+126o
					; sub_402EB0+253o
		align 4
; char aUnknownPseud_0[]
aUnknownPseud_0	db '  Unknown pseudo relocation protocol version %d.',0Ah,0
					; DATA XREF: sub_402EB0+267o
		align 10h
; char aUnknownPseudoR[]
aUnknownPseudoR	db '  Unknown pseudo relocation bit size %d.',0Ah,0
					; DATA XREF: sub_402EB0+F4o
		align 4
; const	WCHAR LibFileName
LibFileName:				; DATA XREF: sub_403460:loc_403505o
		unicode	0, <msvcrt.dll>,0
		align 4
off_405714	dd offset dword_406060	; DATA XREF: .text:00403628o
		dd offset dword_4060C0
dword_40571C	dd 0			; DATA XREF: sub_402EB0+57o
					; sub_402EB0+5Co ...
dword_405720	dd 0			; DATA XREF: sub_402EB0+7Ar
dword_405724	dd 0			; DATA XREF: sub_402EB0+84r
dword_405728	dd 36h dup(0)		; DATA XREF: sub_402EB0+8Do
		align 1000h
_rdata		ends

; Section 4. (virtual address 00006000)
; Virtual size			: 000003F4 (   1012.)
; Section size in file		: 00000000 (	  0.)
; Offset to raw	data for section: 00000000
; Flags	C0600080: Bss Readable Writable
; Alignment	: 32 bytes
; ===========================================================================

; Segment type:	Uninitialized
; Segment permissions: Read/Write
; Segment alignment '32byte' can not be represented in assembly
_bss		segment	para public 'BSS' use32
		assume cs:_bss
		;org 406000h
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
dword_406000	dd ?			; DATA XREF: sub_401060+7Br
dword_406004	dd ?			; DATA XREF: sub_401190+D0w
					; sub_401190+27Cr
dword_406008	dd ?			; DATA XREF: sub_401190+12Aw
					; TopLevelExceptionFilter:loc_40158Cr
dword_40600C	dd ?			; DATA XREF: sub_401190+271w
					; sub_401190+28Br
dword_406010	dd ?			; DATA XREF: sub_401010+2Ao
					; sub_401190:loc_401354r ...
dword_406014	dd ?			; DATA XREF: sub_401010+18o
					; sub_401190+1E0r ...
dword_406018	dd ?			; DATA XREF: sub_401010+10o
					; sub_401190+242r ...
dword_40601C	dd ?			; DATA XREF: sub_401010+3Aw
dword_406020	dd ?			; DATA XREF: sub_401060+3Ew
					; sub_401190+269r
dword_406024	dd ?			; DATA XREF: sub_401010+8o
					; sub_401010+20w
dword_406028	dd ?			; DATA XREF: sub_401010+3r
TlsIndex	dd ?			; DATA XREF: .tls:TlsIndex_ptro
dword_406030	dd ?			; DATA XREF: sub_401060+Cw
dword_406034	dd ?			; DATA XREF: sub_401060+16w
dword_406038	dd ?			; DATA XREF: sub_401060+20w
dword_40603C	dd ?			; DATA XREF: sub_401060+2Aw
dword_406040	dd ?			; DATA XREF: sub_401060:loc_401098r
					; sub_401190+5Br ...
dword_406044	dd ?			; DATA XREF: sub_401060+5Fr
dword_406048	dd ?			; DATA XREF: sub_401060+85r
					; sub_401060+FFw
dword_40604C	dd ?			; DATA XREF: sub_402D60+2Cr
					; sub_402D60+65r ...
dword_406050	dd ?			; DATA XREF: sub_402D60:loc_402D80r
					; sub_402D60:loc_402E22w ...
dword_406054	dd ?			; DATA XREF: sub_402EB0+9r
					; sub_402EB0:loc_402ED0w
dword_406058	dd ?			; DATA XREF: sub_403460+6r
					; sub_403460+9Aw ...
		align 10h
dword_406060	dd ?			; DATA XREF: .text:004035E2w
					; .rdata:off_405714o
dword_406064	dd ?			; DATA XREF: .text:004035ECw
		dd ?
dword_40606C	dd ?			; DATA XREF: .text:004035FBw
		dd 14h dup(?)
dword_4060C0	dd 2Bh dup(?)		; DATA XREF: .rdata:00405718o
dword_40616C	dd ?			; DATA XREF: .text:0040360Aw
		dd 2 dup(?)
dword_406178	dd ?			; DATA XREF: .text:004035F6w
		dd 2 dup(?)
dword_406184	dd ?			; DATA XREF: .text:004035DCw
		dd 86h dup(?)
dword_4063A0	dd ?			; DATA XREF: sub_4037D0+3r
					; sub_4037D0:loc_4037E1w
dword_4063A4	dd ?			; DATA XREF: sub_4037F0+7r
					; sub_403870+26r ...
; struct _RTL_CRITICAL_SECTION CriticalSection
CriticalSection	_RTL_CRITICAL_SECTION <?> ; DATA XREF: sub_4037F0:loc_403808o
					; sub_4037F0:loc_403855o ...
dword_4063C0	dd ?			; DATA XREF: sub_4037F0+25r
					; .text:00403925r ...
		align 8
dword_4063C8	dd ?			; DATA XREF: sub_401190+1A5w
dword_4063CC	dd ?			; DATA XREF: sub_401190:loc_40134Fw
dword_4063D0	dd ?			; DATA XREF: sub_401190+1AFw
dword_4063D4	dd ?			; DATA XREF: sub_401060+65w
					; sub_402BB0+3Fr ...
dword_4063D8	dd ?			; DATA XREF: sub_401060+6Aw
					; sub_402BB0+4r ...
dword_4063DC	dd ?			; DATA XREF: sub_401190+A0o
					; sub_401190+2FEo
dword_4063E0	dd ?			; DATA XREF: sub_401190+B3r
					; sub_401190:loc_401253r ...
		align 1000h
_bss		ends

;
; Imports from libdbus-1.dll
;
; Section 5. (virtual address 00007000)
; Virtual size			: 00000A70 (   2672.)
; Section size in file		: 00000C00 (   3072.)
; Offset to raw	data for section: 00003E00
; Flags	C0300040: Data Readable	Writable
; Alignment	: 4 bytes
; ===========================================================================

; Segment type:	Externs
; _idata
		extrn dbus_message_get_error_name:dword	; CODE XREF: sub_401700+9Ep
					; sub_401700+AEp ...
		extrn dbus_message_get_member:dword ; CODE XREF: sub_401700+CBp
					; sub_401700+DBp ...
		extrn dbus_message_get_interface:dword ; CODE XREF: sub_401700+F9p
					; sub_401700+109p ...
		extrn dbus_message_get_path:dword ; CODE XREF: sub_401700+129p
					; sub_401700+139p ...
		extrn dbus_message_get_destination:dword ; CODE	XREF: sub_401700+159p
					; sub_401700+169p ...
		extrn dbus_message_get_sender:dword ; CODE XREF: sub_401700+189p
					; sub_401700+199p ...
		extrn dbus_message_get_reply_serial:dword ; CODE XREF: sub_401700+1B3p
					; sub_4028C0+173p ...
		extrn dbus_message_get_serial:dword ; CODE XREF: sub_401700+1D3p
					; sub_4028C0+D3p
					; DATA XREF: ...
		extrn dbus_message_get_type:dword ; CODE XREF: .text:00401976p
					; sub_4028C0+30p
					; DATA XREF: ...
		extrn dbus_message_is_signal:dword ; CODE XREF:	.text:004019CDp
					; sub_401A70+2Bp
					; DATA XREF: ...
		extrn dbus_error_init:dword ; CODE XREF: sub_401AC0+117p
					; sub_401AC0+3C7p
					; DATA XREF: ...
		extrn dbus_connection_open:dword ; CODE	XREF: sub_401AC0+134p
					; DATA XREF: sub_401AC0+134r
		extrn dbus_bus_register:dword ;	CODE XREF: sub_401AC0+14Dp
					; DATA XREF: sub_401AC0+14Dr
		extrn dbus_bus_add_match:dword ; CODE XREF: sub_401AC0+1ABp
					; sub_401AC0+44Cp ...
		extrn dbus_error_is_set:dword ;	CODE XREF: sub_401AC0+1B4p
					; sub_401AC0+457p ...
		extrn dbus_error_free:dword ; CODE XREF: sub_401AC0+1E7p
					; DATA XREF: sub_401AC0+1E7r
		extrn dbus_bus_get:dword ; CODE	XREF: sub_401AC0+400p
					; DATA XREF: sub_401AC0+400r
		extrn dbus_connection_add_filter:dword ; CODE XREF: sub_401AC0+4DFp
					; DATA XREF: sub_401AC0+4DFr
		extrn dbus_connection_read_write_dispatch:dword	; CODE XREF: sub_401AC0+4FEp
					; DATA XREF: sub_401AC0+4E9r
		extrn dbus_message_iter_get_arg_type:dword ; DATA XREF:	sub_402080+16r
		extrn dbus_message_iter_next:dword ; CODE XREF:	sub_402080+8Bp
					; sub_402080+DCp ...
		extrn dbus_message_iter_get_basic:dword	; CODE XREF: sub_402080+B5p
					; sub_402080+F6p ...
		extrn dbus_message_iter_recurse:dword ;	CODE XREF: sub_402080+12Bp
					; sub_402080+23Ap ...
		extrn dbus_message_iter_init:dword ; CODE XREF:	sub_4028C0+10Bp
					; DATA XREF: sub_4028C0+10Br

;
; Imports from KERNEL32.dll
;
; void __stdcall DeleteCriticalSection(LPCRITICAL_SECTION lpCriticalSection)
		extrn DeleteCriticalSection:dword ; CODE XREF: sub_403870+41p
					; DATA XREF: sub_403870+41r
; void __stdcall EnterCriticalSection(LPCRITICAL_SECTION lpCriticalSection)
		extrn EnterCriticalSection:dword ; CODE	XREF: sub_4037F0+1Fp
					; .text:0040391Fp ...
; HANDLE __stdcall GetCurrentProcess()
		extrn GetCurrentProcess:dword ;	CODE XREF: .text:00403638p
					; DATA XREF: .text:00403638r
; DWORD	__stdcall GetCurrentProcessId()
		extrn GetCurrentProcessId:dword	; CODE XREF: sub_403660+6Cp
					; DATA XREF: sub_403660+6Cr
; DWORD	__stdcall GetCurrentThreadId()
		extrn GetCurrentThreadId:dword ; CODE XREF: sub_403660+74p
					; DATA XREF: sub_403660+74r
; DWORD	__stdcall GetLastError()
		extrn GetLastError:dword ; CODE	XREF: sub_4037F0+4Cp
					; DATA XREF: sub_4037F0+38r
; HMODULE __stdcall GetModuleHandleA(LPCSTR lpModuleName)
		extrn GetModuleHandleA:dword ; CODE XREF: sub_4016A0+16p
					; sub_403460+91p
					; DATA XREF: ...
; FARPROC __stdcall GetProcAddress(HMODULE hModule, LPCSTR lpProcName)
		extrn GetProcAddress:dword ; CODE XREF:	sub_401190+13Fp
					; sub_4016A0+35p
					; DATA XREF: ...
; void __stdcall GetStartupInfoA(LPSTARTUPINFOA	lpStartupInfo)
		extrn GetStartupInfoA:dword ; CODE XREF: sub_401190+315p
					; DATA XREF: sub_401190+315r
; void __stdcall GetSystemTimeAsFileTime(LPFILETIME lpSystemTimeAsFileTime)
		extrn GetSystemTimeAsFileTime:dword ; CODE XREF: .text:00401901p
					; sub_403660+57p
					; DATA XREF: ...
; DWORD	__stdcall GetTickCount()
		extrn GetTickCount:dword ; CODE	XREF: sub_403660+7Cp
					; DATA XREF: sub_403660+7Cr
; void __stdcall InitializeCriticalSection(LPCRITICAL_SECTION lpCriticalSection)
		extrn InitializeCriticalSection:dword ;	CODE XREF: sub_403870+77p
					; DATA XREF: sub_403870+77r
; LONG __stdcall InterlockedCompareExchange(volatile LONG *Destination,	LONG Exchange, LONG Comperand)
		extrn InterlockedCompareExchange:dword
; LONG __stdcall InterlockedExchange(volatile LONG *Target, LONG Value)
		extrn InterlockedExchange:dword
; void __stdcall LeaveCriticalSection(LPCRITICAL_SECTION lpCriticalSection)
		extrn LeaveCriticalSection:dword ; CODE	XREF: sub_4037F0+6Cp
					; .text:00403956p ...
; HMODULE __stdcall LoadLibraryW(LPCWSTR lpLibFileName)
		extrn LoadLibraryW:dword ; CODE	XREF: sub_403460+ACp
					; DATA XREF: sub_403460+ACr
; BOOL __stdcall QueryPerformanceCounter(LARGE_INTEGER *lpPerformanceCount)
		extrn QueryPerformanceCounter:dword ; CODE XREF: sub_403660+8Bp
					; DATA XREF: sub_403660+8Br
; LPTOP_LEVEL_EXCEPTION_FILTER __stdcall SetUnhandledExceptionFilter(LPTOP_LEVEL_EXCEPTION_FILTER lpTopLevelExceptionFilter)
		extrn SetUnhandledExceptionFilter:dword	; CODE XREF: sub_401190+121p
					; .text:0040361Fp
					; DATA XREF: ...
; void __stdcall Sleep(DWORD dwMilliseconds)
		extrn Sleep:dword	; CODE XREF: sub_401190+8Fp
					; DATA XREF: sub_401190+6Fr
; BOOL __stdcall TerminateProcess(HANDLE hProcess, UINT	uExitCode)
		extrn TerminateProcess:dword ; CODE XREF: .text:00403649p
					; DATA XREF: .text:00403649r
; LPVOID __stdcall TlsGetValue(DWORD dwTlsIndex)
		extrn TlsGetValue:dword	; CODE XREF: sub_4037F0+45p
					; DATA XREF: sub_4037F0+32r
; LONG __stdcall UnhandledExceptionFilter(struct _EXCEPTION_POINTERS *ExceptionInfo)
		extrn UnhandledExceptionFilter:dword ; CODE XREF: .text:0040362Fp
					; DATA XREF: .text:0040362Fr
; BOOL __stdcall VirtualProtect(LPVOID lpAddress, SIZE_T dwSize, DWORD flNewProtect, PDWORD lpflOldProtect)
		extrn VirtualProtect:dword ; CODE XREF:	sub_402D60+10Bp
					; sub_402EB0+1B2p
					; DATA XREF: ...
; SIZE_T __stdcall VirtualQuery(LPCVOID	lpAddress, PMEMORY_BASIC_INFORMATION lpBuffer, SIZE_T dwLength)
		extrn VirtualQuery:dword ; CODE	XREF: sub_402D60+A8p
					; sub_402EB0+184p
					; DATA XREF: ...

;
; Imports from msvcrt.dll
;
		extrn __imp___dllonexit:dword ;	DATA XREF: __dllonexitr
		extrn __imp___getmainargs:dword	; DATA XREF: __getmainargsr
		extrn __initenv:dword	; DATA XREF: sub_401190+23Dr
		extrn __lconv_init:dword ; DATA	XREF: sub_402B80+3r
		extrn __imp___set_app_type:dword ; DATA	XREF: __set_app_typer
		extrn __setusermatherr:dword ; CODE XREF: sub_401060+F7p
					; DATA XREF: sub_401060+F7r
		extrn _acmdln:dword	; DATA XREF: sub_401190+164r
		extrn __imp__amsg_exit:dword ; DATA XREF: _amsg_exitr
		extrn __imp__cexit:dword ; DATA	XREF: _cexitr
; int fmode
		extrn _fmode:dword	; DATA XREF: sub_401060+6Fr
		extrn __imp__initterm:dword ; DATA XREF: _inittermr
		extrn _iob:dword	; DATA XREF: sub_401AC0+11r
					; sub_401AC0:loc_401C94r ...
		extrn __imp__lock:dword	; DATA XREF: _lockr
; _onexit_t __cdecl onexit(_onexit_t Func)
		extrn _onexit:dword	; CODE XREF: sub_402BB0+A3p
					; DATA XREF: sub_402BB0+A3r
		extrn __imp__unlock:dword ; DATA XREF: _unlockr
; int __cdecl _vsnprintf(char *DstBuf, size_t MaxCount,	const char *Format, va_list ArgList)
		extrn __imp__vsnprintf:dword ; DATA XREF: _vsnprintfr
; void __cdecl abort()
		extrn __imp_abort:dword	; DATA XREF: abortr
; void *__cdecl	calloc(size_t NumOfElements, size_t SizeOfElements)
		extrn __imp_calloc:dword ; DATA	XREF: callocr
; void __cdecl __noreturn exit(int Code)
		extrn __imp_exit:dword	; DATA XREF: exitr
; int __cdecl fflush(FILE *File)
		extrn __imp_fflush:dword ; DATA	XREF: fflushr
; int fprintf(FILE *File, const	char *Format, ...)
		extrn __imp_fprintf:dword ; DATA XREF: fprintfr
; void __cdecl free(void *Memory)
		extrn __imp_free:dword	; DATA XREF: freer
; size_t __cdecl fwrite(const void *Str, size_t	Size, size_t Count, FILE *File)
		extrn __imp_fwrite:dword ; DATA	XREF: fwriter
; void *__cdecl	malloc(size_t Size)
		extrn __imp_malloc:dword ; DATA	XREF: mallocr
; void *__cdecl	memcpy(void *Dst, const	void *Src, size_t Size)
		extrn __imp_memcpy:dword ; DATA	XREF: memcpyr
; int printf(const char	*Format, ...)
		extrn __imp_printf:dword ; DATA	XREF: printfr
; int __cdecl putchar(int Ch)
		extrn __imp_putchar:dword ; DATA XREF: putcharr
; int __cdecl puts(const char *Str)
		extrn __imp_puts:dword	; DATA XREF: putsr
; void *__cdecl	realloc(void *Memory, size_t NewSize)
		extrn __imp_realloc:dword ; DATA XREF: reallocr
; int __cdecl setvbuf(FILE *File, char *Buf, int Mode, size_t Size)
		extrn __imp_setvbuf:dword ; DATA XREF: setvbufr
		extrn __imp_signal:dword ; DATA	XREF: signalr
; size_t __cdecl strlen(const char *Str)
		extrn __imp_strlen:dword ; DATA	XREF: strlenr
; int __cdecl strncmp(const char *Str1,	const char *Str2, size_t MaxCount)
		extrn __imp_strncmp:dword ; DATA XREF: strncmpr
; int __cdecl vfprintf(FILE *File, const char *Format, va_list ArgList)
		extrn __imp_vfprintf:dword ; DATA XREF:	vfprintfr


; Section 6. (virtual address 00008000)
; Virtual size			: 00000034 (	 52.)
; Section size in file		: 00000200 (	512.)
; Offset to raw	data for section: 00004A00
; Flags	C0300040: Data Readable	Writable
; Alignment	: 4 bytes
; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read/Write
_CRT		segment	dword public 'DATA' use32
		assume cs:_CRT
		;org 408000h
dword_408000	dd 0			; DATA XREF: sub_401190+2D8o
		dd offset sub_401010
dword_408008	dd 0			; DATA XREF: sub_401190:loc_401460o
dword_40800C	dd 0			; DATA XREF: sub_401190+337o
		dd offset sub_401060
		dd offset sub_402B80
dword_408018	dd 2 dup(0)		; DATA XREF: sub_401190+32Fo
TlsCallbacks	dd offset TlsCallback_0	; DATA XREF: .tls:TlsCallbacks_ptro
		dd offset TlsCallback_1
		dd 0
		align 10h
dword_408030	dd 74h dup(0)		; DATA XREF: TlsCallback_0:loc_402B31o
					; TlsCallback_0+36o ...
		align 1000h
_CRT		ends

; Section 7. (virtual address 00009000)
; Virtual size			: 00000020 (	 32.)
; Section size in file		: 00000200 (	512.)
; Offset to raw	data for section: 00004C00
; Flags	C0300040: Data Readable	Writable
; Alignment	: 4 bytes
; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read/Write
_tls		segment	dword public 'DATA' use32
		assume cs:_tls
		;org 409000h
TlsDirectory	dd offset TlsStart
TlsEnd_ptr	dd offset TlsEnd
TlsIndex_ptr	dd offset TlsIndex
TlsCallbacks_ptr dd offset TlsCallbacks
TlsSizeOfZeroFill dd 0
TlsCharacteristics dd 0
		db 0
TlsStart	db 3 dup(0)		; DATA XREF: .tls:TlsDirectoryo
TlsEnd		dd 79h dup(0)		; DATA XREF: .tls:TlsEnd_ptro
		align 1000h
_tls		ends


		end start
