;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2015 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-3677-7074-51			    |
; |		Michalis Polychronakis,	Stony Brook University		    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	5A1C187E62549F3A44BB3BF7A96DF9DD
; Input	CRC32 :	4C7C37DA

; File Name   :	d:\pidgin-o\nmfield.o
; Format      :	COFF (X386MAGIC)

		.686p
		.mmx
		.model flat
.intel_syntax noprefix

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	dword public 'CODE' use32
		assume cs:_text
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


__add_blank_field proc near		; CODE XREF: _nm_field_add_number:loc_CFp
					; _nm_field_add_pointer:loc_1B3p
					; DATA XREF: ...

var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_10		= dword	ptr -10h

		push	ebx
		sub	esp, 28h
		mov	ecx, dword ptr ds:___stack_chk_guard
		mov	[esp+2Ch+var_10], ecx
		xor	ecx, ecx
		test	eax, eax
		jz	short loc_48
		lea	ecx, [edx+2]
		cmp	[eax+14h], ecx
		jnb	short loc_34
		lea	ebx, [edx+0Ah]
		lea	edx, [ebx+ebx*2]
		shl	edx, 3
		mov	[esp+2Ch+var_28], edx
		mov	[esp+2Ch+var_2C], eax

loc_2C:					; DATA XREF: .debug_loc:0000189Co
		call	_g_realloc

loc_31:					; DATA XREF: .debug_info:off_C0Fo
		mov	[eax+14h], ebx

loc_34:					; CODE XREF: __add_blank_field+1Aj
					; __add_blank_field+5Bj
		mov	edx, [esp+2Ch+var_10]
		xor	edx, dword ptr ds:___stack_chk_guard
		jnz	short loc_5D

loc_40:					; DATA XREF: .eh_frame:0000289Co
		add	esp, 28h
		pop	ebx
		retn
; ---------------------------------------------------------------------------
		align 4

loc_48:					; CODE XREF: __add_blank_field+12j
					; DATA XREF: .debug_info:00000BD1o ...
		mov	[esp+2Ch+var_2C], 0F0h ; ''
		call	_g_malloc0

loc_54:					; DATA XREF: .debug_info:00000BFCo
					; .debug_loc:off_1937o
		mov	dword ptr [eax+14h], 0Ah
		jmp	short loc_34
; ---------------------------------------------------------------------------

loc_5D:					; CODE XREF: __add_blank_field+3Ej
					; DATA XREF: .debug_info:00000BD5o ...
		call	___stack_chk_fail
__add_blank_field endp

; ---------------------------------------------------------------------------
unk_62		db  66h	; f		; DATA XREF: .debug_info:00000BA4o
					; .debug_info:off_C33o	...
		db  90h	; ê

; =============== S U B	R O U T	I N E =======================================


		public _nm_field_add_number
_nm_field_add_number proc near		; DATA XREF: .debug_info:00000C59o
					; .debug_loc:off_194Ao	...

var_4C		= dword	ptr -4Ch
var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_32		= byte ptr -32h
var_31		= byte ptr -31h
var_30		= dword	ptr -30h
var_20		= dword	ptr -20h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= byte ptr  10h
arg_10		= byte ptr  14h
arg_14		= dword	ptr  18h
arg_18		= byte ptr  1Ch

		push	ebp

loc_65:					; DATA XREF: .debug_loc:0000194Eo
					; .eh_frame:000028B8o
		push	edi
		push	esi
		push	ebx
		sub	esp, 3Ch
		mov	eax, [esp+4Ch+arg_0]
		mov	ebp, [esp+4Ch+arg_4]

loc_73:					; DATA XREF: .eh_frame:000028E8o
		mov	esi, [esp+4Ch+arg_8]
		mov	edx, [esp+4Ch+arg_14]
		mov	[esp+4Ch+var_38], edx

loc_7F:					; DATA XREF: .eh_frame:00002974o
		mov	bl, [esp+4Ch+arg_C]
		mov	dl, [esp+4Ch+arg_10]
		mov	[esp+4Ch+var_32], dl
		mov	dl, [esp+4Ch+arg_18]
		mov	[esp+4Ch+var_31], dl
		mov	edx, dword ptr ds:___stack_chk_guard
		mov	[esp+4Ch+var_20], edx
		xor	edx, edx

loc_9F:					; DATA XREF: .debug_info:0000095Co
					; .debug_info:00000CF0o ...
		test	eax, eax
		jz	loc_134
		mov	ecx, [eax]
		test	ecx, ecx
		jz	loc_134
		mov	ecx, eax

loc_B3:					; DATA XREF: .debug_loc:00001A3Co
					; .debug_loc:00001A65o
		nop

loc_B4:					; CODE XREF: _nm_field_add_number+58j
		inc	edx
		add	ecx, 18h
		mov	edi, [ecx]
		test	edi, edi
		jnz	short loc_B4
		lea	edi, [edx+edx*2]
		shl	edi, 3
		lea	ecx, [edx+edx*2+3]
		shl	ecx, 3
		mov	[esp+4Ch+var_30], ecx

loc_CF:					; CODE XREF: _nm_field_add_number+DCj
					; DATA XREF: .debug_ranges:000023F4o ...
		call	__add_blank_field

loc_D4:					; DATA XREF: .debug_info:00000D18o
					; .debug_loc:000019E8o
		add	edi, eax

loc_D6:					; DATA XREF: .debug_loc:off_1A0Fo
		mov	[esp+4Ch+var_4C], ebp
		mov	[esp+4Ch+var_3C], eax
		call	_g_strdup

loc_E2:					; DATA XREF: .debug_info:00000D21o
					; .eh_frame:0000281Co ...
		mov	[edi], eax
		mov	[edi+8], esi
		mov	[edi+4], bl
		mov	al, [esp+4Ch+var_32]
		mov	[edi+5], al
		mov	eax, [esp+4Ch+var_38]
		mov	[edi+0Ch], eax
		mov	al, [esp+4Ch+var_31]
		mov	[edi+6], al
		mov	edx, [esp+4Ch+var_3C]
		mov	ecx, [esp+4Ch+var_30]
		add	ecx, edx

loc_109:				; DATA XREF: .debug_loc:00001A13o
		mov	dword ptr [ecx], 0
		mov	dword ptr [ecx+0Ch], 0
		mov	dword ptr [ecx+10h], 0
		mov	eax, edx
		mov	edx, [esp+4Ch+var_20]
		xor	edx, dword ptr ds:___stack_chk_guard
		jnz	short loc_142
		add	esp, 3Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 4

loc_134:				; CODE XREF: _nm_field_add_number+3Dj
					; _nm_field_add_number+47j
					; DATA XREF: ...
		mov	[esp+4Ch+var_30], 18h
		xor	edi, edi

loc_13E:				; DATA XREF: .debug_info:000008F9o
					; .debug_info:0000125Co ...
		xor	edx, edx
		jmp	short loc_CF
; ---------------------------------------------------------------------------

loc_142:				; CODE XREF: _nm_field_add_number+C5j
					; DATA XREF: .debug_ranges:000023FCo ...
		call	___stack_chk_fail
_nm_field_add_number endp

; ---------------------------------------------------------------------------
unk_147		db  90h	; ê		; DATA XREF: .debug_info:00000C5Do
					; .debug_info:00000D36o

; =============== S U B	R O U T	I N E =======================================


		public _nm_field_add_pointer
_nm_field_add_pointer proc near		; DATA XREF: .debug_info:00000D68o
					; .debug_loc:off_1A8Co	...

var_4C		= dword	ptr -4Ch
var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_32		= byte ptr -32h
var_31		= byte ptr -31h
var_30		= dword	ptr -30h
var_20		= dword	ptr -20h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= byte ptr  10h
arg_10		= byte ptr  14h
arg_14		= dword	ptr  18h
arg_18		= byte ptr  1Ch

		push	ebp

loc_149:				; DATA XREF: .debug_loc:00001A90o
		push	edi
		push	esi
		push	ebx
		sub	esp, 3Ch

loc_14F:				; DATA XREF: .eh_frame:00002934o
		mov	eax, [esp+4Ch+arg_0]
		mov	ebp, [esp+4Ch+arg_4]
		mov	esi, [esp+4Ch+arg_8]
		mov	edx, [esp+4Ch+arg_14]
		mov	[esp+4Ch+var_38], edx
		mov	bl, [esp+4Ch+arg_C]
		mov	dl, [esp+4Ch+arg_10]
		mov	[esp+4Ch+var_32], dl
		mov	dl, [esp+4Ch+arg_18]
		mov	[esp+4Ch+var_31], dl
		mov	edx, dword ptr ds:___stack_chk_guard
		mov	[esp+4Ch+var_20], edx
		xor	edx, edx

loc_183:				; DATA XREF: .debug_info:00000DFFo
					; .debug_loc:off_1B51o	...
		test	eax, eax
		jz	loc_218
		mov	ecx, [eax]
		test	ecx, ecx

loc_18F:				; DATA XREF: .debug_info:00000DACo
		jz	loc_218
		mov	ecx, eax

loc_197:				; DATA XREF: .debug_loc:00001B96o
					; .debug_loc:00001BBFo
		nop

loc_198:				; CODE XREF: _nm_field_add_pointer+58j
		inc	edx
		add	ecx, 18h
		mov	edi, [ecx]
		test	edi, edi
		jnz	short loc_198
		lea	edi, [edx+edx*2]
		shl	edi, 3
		lea	ecx, [edx+edx*2+3]
		shl	ecx, 3

loc_1AF:				; DATA XREF: .debug_info:off_B4Co
					; .debug_info:00000CD8o ...
		mov	[esp+4Ch+var_30], ecx

loc_1B3:				; CODE XREF: _nm_field_add_pointer+DCj
					; DATA XREF: .debug_ranges:00002424o ...
		call	__add_blank_field

loc_1B8:				; DATA XREF: .debug_info:00000E27o
					; .debug_loc:00001B2Ao
		add	edi, eax

loc_1BA:				; DATA XREF: .debug_loc:00001B55o
		mov	[esp+4Ch+var_4C], ebp
		mov	[esp+4Ch+var_3C], eax
		call	_g_strdup

loc_1C6:				; DATA XREF: .debug_info:00000E30o
		mov	[edi], eax
		mov	[edi+8], esi
		mov	[edi+4], bl
		mov	al, [esp+4Ch+var_32]
		mov	[edi+5], al
		mov	eax, [esp+4Ch+var_38]
		mov	[edi+10h], eax
		mov	al, [esp+4Ch+var_31]
		mov	[edi+6], al
		mov	edx, [esp+4Ch+var_3C]
		mov	ecx, [esp+4Ch+var_30]
		add	ecx, edx
		mov	dword ptr [ecx], 0
		mov	dword ptr [ecx+0Ch], 0
		mov	dword ptr [ecx+10h], 0
		mov	eax, edx
		mov	edx, [esp+4Ch+var_20]
		xor	edx, dword ptr ds:___stack_chk_guard
		jnz	short loc_226
		add	esp, 3Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 4

loc_218:				; CODE XREF: _nm_field_add_pointer+3Dj
					; _nm_field_add_pointer:loc_18Fj
					; DATA XREF: ...
		mov	[esp+4Ch+var_30], 18h
		xor	edi, edi
		xor	edx, edx
		jmp	short loc_1B3
; ---------------------------------------------------------------------------

loc_226:				; CODE XREF: _nm_field_add_pointer+C5j
					; DATA XREF: .debug_ranges:0000242Co ...
		call	___stack_chk_fail
_nm_field_add_pointer endp

; ---------------------------------------------------------------------------
unk_22B		db  90h	; ê		; DATA XREF: .debug_info:00000D6Co
					; .debug_info:00000E45o

; =============== S U B	R O U T	I N E =======================================


		public _nm_count_fields
_nm_count_fields proc near		; DATA XREF: .debug_info:00000E53o
					; .debug_loc:off_1BE6o	...

var_10		= dword	ptr -10h
arg_0		= dword	ptr  4

		sub	esp, 1Ch

loc_22F:				; DATA XREF: .debug_loc:00001BEAo
		mov	edx, [esp+1Ch+arg_0]

loc_233:				; DATA XREF: .debug_info:0000141Do
					; .debug_info:00001445o ...
		mov	eax, dword ptr ds:___stack_chk_guard
		mov	[esp+1Ch+var_10], eax
		xor	eax, eax

loc_23E:				; DATA XREF: .debug_loc:off_1C3Do
		test	edx, edx
		jz	short loc_264

loc_242:				; DATA XREF: .debug_loc:00001C22o
		mov	ecx, [edx]

loc_244:				; DATA XREF: .debug_info:0000147Do
		test	ecx, ecx
		jz	short loc_264

loc_248:				; CODE XREF: _nm_count_fields+24j
					; DATA XREF: .debug_loc:00001C41o
		inc	eax
		add	edx, 18h
		mov	ecx, [edx]
		test	ecx, ecx
		jnz	short loc_248

loc_252:				; CODE XREF: _nm_count_fields+3Aj
		mov	edx, [esp+1Ch+var_10]
		xor	edx, dword ptr ds:___stack_chk_guard
		jnz	short loc_268
		add	esp, 1Ch
		retn
; ---------------------------------------------------------------------------
		align 4

loc_264:				; CODE XREF: _nm_count_fields+14j
					; _nm_count_fields+1Aj
		xor	eax, eax
		jmp	short loc_252
; ---------------------------------------------------------------------------

loc_268:				; CODE XREF: _nm_count_fields+30j
		call	___stack_chk_fail
_nm_count_fields endp

; ---------------------------------------------------------------------------
unk_26D		db  8Dh	; ç		; DATA XREF: .debug_info:00000E57o
					; .debug_info:00000E77o
		db  76h	; v
		db    0

; =============== S U B	R O U T	I N E =======================================


		public _nm_free_fields
_nm_free_fields	proc near		; CODE XREF: __free_field_value+4Ep
					; DATA XREF: .debug_info:00000EB5o ...

var_2C		= dword	ptr -2Ch
var_10		= dword	ptr -10h
arg_0		= dword	ptr  4

		push	esi

loc_271:				; DATA XREF: .debug_loc:00001C77o
		push	ebx
		sub	esp, 24h
		mov	esi, [esp+2Ch+arg_0]
		mov	eax, dword ptr ds:___stack_chk_guard
		mov	[esp+2Ch+var_10], eax
		xor	eax, eax

loc_284:				; DATA XREF: .debug_loc:off_1CDBo
		test	esi, esi
		jz	short loc_2BE
		mov	ebx, [esi]
		test	ebx, ebx
		jz	short loc_2BE

loc_28E:				; DATA XREF: .debug_loc:00001CDFo
		mov	eax, [ebx]
		test	eax, eax
		jz	short loc_2B0

loc_294:				; CODE XREF: _nm_free_fields+3Cj
					; DATA XREF: .debug_info:00000EE8o ...
		mov	eax, ebx
		call	__free_field_value

loc_29B:				; DATA XREF: .debug_info:00000F00o
		mov	eax, [ebx]
		mov	[esp+2Ch+var_2C], eax
		call	_g_free

loc_2A5:				; DATA XREF: .debug_info:00000EECo
					; .debug_info:00000F14o
		add	ebx, 18h

loc_2A8:				; DATA XREF: .debug_loc:00001CFEo
		mov	eax, [ebx]
		test	eax, eax
		jnz	short loc_294
		mov	ebx, [esi]

loc_2B0:				; CODE XREF: _nm_free_fields+22j
					; DATA XREF: .debug_line:off_2500o
		mov	[esp+2Ch+var_2C], ebx
		call	_g_free

loc_2B8:				; DATA XREF: .debug_info:00000F1Eo
		mov	dword ptr [esi], 0

loc_2BE:				; CODE XREF: _nm_free_fields+16j
					; _nm_free_fields+1Cj
		mov	eax, [esp+2Ch+var_10]
		xor	eax, dword ptr ds:___stack_chk_guard
		jnz	short loc_2D0
		add	esp, 24h
		pop	ebx
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_2D0:				; CODE XREF: _nm_free_fields+58j
		call	___stack_chk_fail
_nm_free_fields	endp

; ---------------------------------------------------------------------------
unk_2D5		db  8Dh	; ç		; DATA XREF: .debug_info:00000EB9o
					; .debug_info:00000F33o
		db  76h	; v
		db    0

; =============== S U B	R O U T	I N E =======================================


__free_field_value proc	near		; CODE XREF: _nm_free_fields+26p
					; _nm_remove_field+21p
					; DATA XREF: ...

var_3C		= dword	ptr -3Ch
var_20		= dword	ptr -20h
var_10		= dword	ptr -10h

		sub	esp, 3Ch

loc_2DB:				; DATA XREF: .debug_loc:00001D1Eo
		mov	edx, dword ptr ds:___stack_chk_guard
		mov	[esp+3Ch+var_10], edx
		xor	edx, edx
		test	eax, eax
		jz	short loc_2FF
		cmp	byte ptr [eax+6], 0Dh ;	switch 14 cases
		jbe	short loc_310

loc_2F1:				; CODE XREF: __free_field_value+3Cj
					; __free_field_value+57j ...
		mov	dword ptr [eax+8], 0 ; jumptable 00000314 default case
		mov	dword ptr [eax+10h], 0

loc_2FF:				; CODE XREF: __free_field_value+11j
					; DATA XREF: .debug_info:00000D1Co
		mov	eax, [esp+3Ch+var_10]
		xor	eax, dword ptr ds:___stack_chk_guard
		jnz	short loc_349
		add	esp, 3Ch
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_310:				; CODE XREF: __free_field_value+17j
		movzx	edx, byte ptr [eax+6]
		jmp	ds:off_740[edx*4] ; switch jump
; ---------------------------------------------------------------------------
		align 4

loc_31C:				; CODE XREF: __free_field_value+3Cj
					; DATA XREF: .rdata:off_740o
		lea	edx, [eax+10h]	; jumptable 00000314 cases 9,12
		mov	[esp+3Ch+var_3C], edx
		mov	[esp+3Ch+var_20], eax
		call	_nm_free_fields

loc_32B:				; DATA XREF: .debug_info:00000F79o
		mov	eax, [esp+3Ch+var_20]
		jmp	short loc_2F1	; jumptable 00000314 default case
; ---------------------------------------------------------------------------
		align 4

loc_334:				; CODE XREF: __free_field_value+3Cj
					; DATA XREF: .rdata:off_740o ...
		mov	edx, [eax+10h]	; jumptable 00000314 cases 2,10,13
		mov	[esp+3Ch+var_3C], edx
		mov	[esp+3Ch+var_20], eax
		call	_g_free

loc_343:				; DATA XREF: .debug_info:00000F91o
					; .debug_info:00000D64o ...
		mov	eax, [esp+3Ch+var_20]
		jmp	short loc_2F1	; jumptable 00000314 default case
; ---------------------------------------------------------------------------

loc_349:				; CODE XREF: __free_field_value+31j
					; DATA XREF: .debug_info:00000CECo ...
		call	___stack_chk_fail
__free_field_value endp

; ---------------------------------------------------------------------------
unk_34E		db  66h	; f		; DATA XREF: .debug_info:00000F5Co
					; .debug_info:00000F9Ao
		db  90h	; ê

; =============== S U B	R O U T	I N E =======================================


		public _nm_locate_field
_nm_locate_field proc near		; DATA XREF: .debug_info:00000FBCo
					; .debug_loc:off_1DA7o	...

var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_10		= dword	ptr -10h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	esi

loc_351:				; DATA XREF: .debug_loc:00001DABo
		push	ebx
		sub	esp, 24h
		mov	esi, [esp+2Ch+arg_0]
		mov	ebx, [esp+2Ch+arg_4]
		mov	eax, dword ptr ds:___stack_chk_guard
		mov	[esp+2Ch+var_10], eax
		xor	eax, eax
		test	ebx, ebx
		jz	short loc_398
		test	esi, esi
		jz	short loc_398

loc_370:				; DATA XREF: .debug_loc:00001E13o
		mov	eax, [ebx]

loc_372:				; DATA XREF: .debug_info:00000E1Co
		test	eax, eax
		jnz	short loc_381
		jmp	short loc_398
; ---------------------------------------------------------------------------

loc_378:				; CODE XREF: _nm_locate_field+3Fj
		add	ebx, 18h
		mov	eax, [ebx]
		test	eax, eax
		jz	short loc_398

loc_381:				; CODE XREF: _nm_locate_field+24j
		mov	[esp+2Ch+var_28], esi
		mov	[esp+2Ch+var_2C], eax
		call	_g_ascii_strcasecmp

loc_38D:				; DATA XREF: .debug_info:00000FFEo
		test	eax, eax
		jnz	short loc_378
		mov	eax, ebx
		jmp	short loc_39A
; ---------------------------------------------------------------------------
		align 4

loc_398:				; CODE XREF: _nm_locate_field+1Aj
					; _nm_locate_field+1Ej	...
		xor	eax, eax

loc_39A:				; CODE XREF: _nm_locate_field+43j
		mov	edx, [esp+2Ch+var_10]
		xor	edx, dword ptr ds:___stack_chk_guard
		jnz	short loc_3AC
		add	esp, 24h
		pop	ebx
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_3AC:				; CODE XREF: _nm_locate_field+54j
		call	___stack_chk_fail
_nm_locate_field endp

; ---------------------------------------------------------------------------
unk_3B1		db  8Dh	; ç		; DATA XREF: .debug_info:00000FC0o
					; .debug_info:00001013o
		db  76h	; v
		db    0

; =============== S U B	R O U T	I N E =======================================


		public _nm_copy_field_array
_nm_copy_field_array proc near		; CODE XREF: _nm_copy_field_array+11Ap
					; DATA XREF: .debug_info:00001099o ...

var_4C		= dword	ptr -4Ch
var_30		= dword	ptr -30h
var_20		= dword	ptr -20h
arg_0		= dword	ptr  4

		push	ebp

loc_3B5:				; DATA XREF: .debug_loc:00001E32o
		push	edi
		push	esi
		push	ebx
		sub	esp, 3Ch
		mov	ebx, [esp+4Ch+arg_0]
		mov	eax, dword ptr ds:___stack_chk_guard
		mov	[esp+4Ch+var_20], eax
		xor	eax, eax

loc_3CA:				; DATA XREF: .debug_loc:off_1EFEo
					; .debug_loc:off_1F4Bo
		test	ebx, ebx
		jz	loc_4F4

loc_3D2:				; DATA XREF: .debug_info:000010ECo
					; .debug_loc:off_1FACo	...
		mov	esi, [ebx]
		test	esi, esi
		jz	loc_4E5
		mov	eax, ebx
		xor	edx, edx

loc_3E0:				; CODE XREF: _nm_copy_field_array+34j
					; DATA XREF: .debug_loc:00001FB0o ...
		inc	edx
		add	eax, 18h
		mov	ecx, [eax]
		test	ecx, ecx
		jnz	short loc_3E0
		lea	esi, [edx+1]
		lea	eax, [esi+esi*2]
		shl	eax, 3

loc_3F3:				; CODE XREF: _nm_copy_field_array+13Bj
					; DATA XREF: .debug_loc:off_1F99o ...
		mov	[esp+4Ch+var_4C], eax
		call	_g_malloc0

loc_3FB:				; DATA XREF: .debug_info:0000117Bo
		mov	[esp+4Ch+var_30], eax

loc_3FF:				; DATA XREF: .debug_loc:00001F4Fo
		mov	[eax+14h], esi

loc_402:				; DATA XREF: .debug_loc:00001ECCo
					; .debug_loc:00001F02o
		mov	eax, [ebx]
		test	eax, eax
		jz	loc_4B0
		mov	ebp, [esp+4Ch+var_30]
		jmp	short loc_430
; ---------------------------------------------------------------------------
unk_412		db  66h	; f		; DATA XREF: .debug_loc:00001F9Do
					; .debug_loc:off_2000o	...
		db  90h	; ê
; ---------------------------------------------------------------------------

loc_414:				; CODE XREF: _nm_copy_field_array+A2j
					; _nm_copy_field_array+A4j
					; DATA XREF: ...
		mov	eax, [ebx+0Ch]	; jumptable 00000458 default case
		mov	[ebp+0Ch], eax

loc_41A:				; CODE XREF: _nm_copy_field_array+D1j
		mov	ecx, [ebx+8]

loc_41D:				; CODE XREF: _nm_copy_field_array+B8j
					; _nm_copy_field_array+CAj ...
		mov	[ebp+8], ecx

loc_420:				; DATA XREF: .debug_ranges:00002484o
					; .debug_ranges:000024A4o
		add	ebp, 18h

loc_423:				; DATA XREF: .debug_loc:00002047o
					; .debug_loc:000020CDo	...
		add	ebx, 18h

loc_426:				; DATA XREF: .debug_loc:00002004o
					; .debug_loc:0000208Ao
		mov	eax, [ebx]
		test	eax, eax
		jz	loc_4B0

loc_430:				; CODE XREF: _nm_copy_field_array+5Cj
					; _nm_copy_field_array+F8j
					; DATA XREF: ...
		mov	dl, [ebx+6]
		mov	[ebp+6], dl
		mov	dl, [ebx+5]
		mov	[ebp+5], dl
		mov	dl, [ebx+4]
		mov	[ebp+4], dl
		mov	[esp+4Ch+var_4C], eax
		call	_g_strdup

loc_44A:				; DATA XREF: .debug_info:00001171o
		mov	[ebp+0], eax

loc_44D:				; DATA XREF: .debug_ranges:000024A8o
		movzx	eax, byte ptr [ebx+6]
		mov	[ebp+6], al
		cmp	al, 0Dh		; switch 14 cases
		ja	short loc_414	; jumptable 00000458 default case
		jmp	ds:off_778[eax*4] ; switch jump
; ---------------------------------------------------------------------------
		align 10h

loc_460:				; CODE XREF: _nm_copy_field_array+A4j
					; DATA XREF: .rdata:off_778o
		mov	ecx, [ebx+8]	; jumptable 00000458 cases 10,13
		test	ecx, ecx
		jnz	short loc_480
		mov	edi, [ebx+10h]
		test	edi, edi
		jz	short loc_41D
		mov	ecx, 0FFFFFFFFh
		xor	eax, eax
		repne scasb
		not	ecx
		mov	[ebx+8], ecx

loc_47C:				; CODE XREF: _nm_copy_field_array+12Fj
		test	ecx, ecx
		jz	short loc_41D

loc_480:				; CODE XREF: _nm_copy_field_array+B1j
		mov	eax, [ebx+10h]
		test	eax, eax
		jz	short loc_41A
		mov	[esp+4Ch+var_4C], ecx
		call	_g_malloc0

loc_48F:				; DATA XREF: .debug_info:0000115Eo
		mov	[ebp+10h], eax
		mov	esi, [ebx+10h]
		mov	edi, eax
		mov	ecx, [ebx+8]
		rep movsb
		mov	ecx, [ebx+8]
		mov	[ebp+8], ecx

loc_4A2:				; DATA XREF: .debug_ranges:0000248Co
					; .debug_ranges:000024ACo
		add	ebp, 18h
		add	ebx, 18h
		mov	eax, [ebx]
		test	eax, eax
		jnz	short loc_430
		xchg	ax, ax

loc_4B0:				; CODE XREF: _nm_copy_field_array+52j
					; _nm_copy_field_array+76j ...
		mov	eax, [esp+4Ch+var_30]
		mov	edx, [esp+4Ch+var_20]
		xor	edx, dword ptr ds:___stack_chk_guard
		jnz	short loc_4FE
		add	esp, 3Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_4C8:				; CODE XREF: _nm_copy_field_array+A4j
					; DATA XREF: .rdata:off_778o ...
		mov	eax, [ebx+10h]	; jumptable 00000458 cases 9,12
		mov	[esp+4Ch+var_4C], eax
		call	_nm_copy_field_array

loc_4D3:				; DATA XREF: .debug_info:00001167o
		mov	[ebp+10h], eax
		mov	ecx, [ebx+8]
		jmp	loc_41D
; ---------------------------------------------------------------------------
		align 10h

loc_4E0:				; CODE XREF: _nm_copy_field_array+A4j
					; DATA XREF: .rdata:off_778o
		mov	ecx, [ebx+8]	; jumptable 00000458 case 2
		jmp	short loc_47C
; ---------------------------------------------------------------------------

loc_4E5:				; CODE XREF: _nm_copy_field_array+22j
					; DATA XREF: .debug_ranges:00002458o ...
		mov	eax, 18h
		mov	esi, 1
		jmp	loc_3F3
; ---------------------------------------------------------------------------

loc_4F4:				; CODE XREF: _nm_copy_field_array+18j
					; DATA XREF: .debug_ranges:0000245Co ...
		mov	[esp+4Ch+var_30], 0
		jmp	short loc_4B0
; ---------------------------------------------------------------------------

loc_4FE:				; CODE XREF: _nm_copy_field_array+10Aj
		call	___stack_chk_fail
_nm_copy_field_array endp

; ---------------------------------------------------------------------------
unk_503		db  90h	; ê		; DATA XREF: .debug_info:0000109Do
					; .debug_info:00001184o

; =============== S U B	R O U T	I N E =======================================


		public _nm_remove_field
_nm_remove_field proc near		; DATA XREF: .debug_info:000011A3o
					; .debug_loc:off_210Co	...

var_2C		= dword	ptr -2Ch
var_10		= dword	ptr -10h
arg_0		= dword	ptr  4

		push	edi

loc_505:				; DATA XREF: .debug_loc:00002110o
		push	esi
		push	ebx
		sub	esp, 20h
		mov	ebx, [esp+2Ch+arg_0]
		mov	eax, dword ptr ds:___stack_chk_guard
		mov	[esp+2Ch+var_10], eax
		xor	eax, eax

loc_519:				; DATA XREF: .debug_info:00000D29o
		test	ebx, ebx
		jz	short loc_56C
		mov	eax, [ebx]
		test	eax, eax
		jz	short loc_56C

loc_523:				; DATA XREF: .debug_info:000011E9o
					; .debug_loc:off_21E8o
		mov	eax, ebx
		call	__free_field_value

loc_52A:				; DATA XREF: .debug_info:00001202o
		mov	eax, [ebx]
		mov	[esp+2Ch+var_2C], eax
		call	_g_free

loc_534:				; DATA XREF: .debug_info:000011EDo
					; .debug_info:00001216o
		lea	edx, [ebx+18h]

loc_537:				; DATA XREF: .debug_loc:00002190o
					; .debug_loc:off_21ABo
		mov	eax, [ebx+14h]

loc_53A:				; DATA XREF: .debug_loc:off_21BEo
		mov	ecx, 6
		mov	edi, ebx
		mov	esi, edx
		rep movsd
		mov	[ebx+14h], eax
		mov	eax, [ebx+18h]

loc_54B:				; DATA XREF: .debug_loc:000021C2o
		test	eax, eax
		jz	short loc_56C
		mov	ebx, 6

loc_554:				; CODE XREF: _nm_remove_field+66j
					; DATA XREF: .debug_loc:000021ECo
		add	edx, 18h
		mov	eax, [edx-4]
		lea	edi, [edx-18h]
		mov	esi, edx
		mov	ecx, ebx
		rep movsd
		mov	[edx-4], eax
		mov	edi, [edx]
		test	edi, edi
		jnz	short loc_554

loc_56C:				; CODE XREF: _nm_remove_field+17j
					; _nm_remove_field+1Dj	...
		mov	eax, [esp+2Ch+var_10]
		xor	eax, dword ptr ds:___stack_chk_guard
		jnz	short loc_57F
		add	esp, 20h
		pop	ebx
		pop	esi
		pop	edi
		retn
; ---------------------------------------------------------------------------

loc_57F:				; CODE XREF: _nm_remove_field+72j
		call	___stack_chk_fail
_nm_remove_field endp


; =============== S U B	R O U T	I N E =======================================


		public _nm_print_fields
_nm_print_fields proc near		; CODE XREF: _nm_print_fields+B8p
					; DATA XREF: .debug_info:000011A7o ...

var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_20		= dword	ptr -20h
arg_0		= dword	ptr  4

		push	ebp

loc_585:				; DATA XREF: .debug_loc:0000220Bo
		push	edi
		push	esi
		push	ebx
		sub	esp, 2Ch
		mov	ebx, [esp+3Ch+arg_0]
		mov	eax, dword ptr ds:___stack_chk_guard
		mov	[esp+3Ch+var_20], eax
		xor	eax, eax

loc_59A:				; DATA XREF: .debug_loc:off_22A1o
					; .debug_loc:off_22C1o
		test	ebx, ebx
		jnz	short loc_609
		jmp	loc_6B0
; ---------------------------------------------------------------------------
		align 4

loc_5A4:				; CODE XREF: _nm_print_fields+98j
					; DATA XREF: .debug_info:000012BCo ...
		cmp	al, 0Ah
		jz	loc_658
		cmp	al, 0Dh
		jz	loc_658

loc_5B4:				; CODE XREF: _nm_print_fields+D9j
		cmp	al, 2
		jz	loc_6C4
		cmp	al, 0Bh
		jnz	loc_688
		mov	eax, [ebx+0Ch]
		test	eax, eax
		jz	loc_6E8
		mov	[esp+3Ch+var_3C], offset a1 ; "1"
		call	_g_strdup

loc_5DB:				; DATA XREF: .debug_info:000012E3o
		mov	ebp, eax

loc_5DD:				; DATA XREF: .debug_loc:0000230Co
		lea	esi, [esi+0]

loc_5E0:				; CODE XREF: _nm_print_fields+11Aj
					; _nm_print_fields+15Ej ...
		test	ebp, ebp	; jumptable 000006A7 default case
		jz	loc_675

loc_5E8:				; CODE XREF: _nm_print_fields+EBj
					; _nm_print_fields:loc_683j
					; DATA XREF: ...
		mov	[esp+3Ch+var_34], ebp
		mov	eax, [ebx]
		mov	[esp+3Ch+var_38], eax
		mov	[esp+3Ch+var_3C], offset aTagSValueS ; "Tag=%s;Value=%s\n"
		call	_printf

loc_5FE:				; DATA XREF: .debug_info:0000137Fo
		mov	[esp+3Ch+var_3C], ebp
		call	_g_free

loc_606:				; CODE XREF: _nm_print_fields:loc_653j
					; DATA XREF: .debug_info:0000139Eo ...
		add	ebx, 18h

loc_609:				; CODE XREF: _nm_print_fields+18j
		mov	edx, [ebx]
		test	edx, edx
		jz	loc_6B0
		mov	al, [ebx+6]
		cmp	al, 9
		jz	short loc_61E
		cmp	al, 0Ch
		jnz	short loc_5A4

loc_61E:				; CODE XREF: _nm_print_fields+94j
		movzx	eax, byte ptr [ebx+4]
		mov	[esp+3Ch+var_34], eax

loc_626:				; DATA XREF: .debug_info:00000E38o
		mov	[esp+3Ch+var_38], edx
		mov	[esp+3Ch+var_3C], offset aSubarrayStartS ; "Subarray START: %s Method =	%d\n"
		call	_printf

loc_636:				; DATA XREF: .debug_info:000013B3o
		mov	eax, [ebx+10h]
		mov	[esp+3Ch+var_3C], eax
		call	_nm_print_fields

loc_641:				; DATA XREF: .debug_info:000013CBo
		mov	eax, [ebx]
		mov	[esp+3Ch+var_38], eax
		mov	[esp+3Ch+var_3C], offset aSubarrayEndS ; "Subarray END:	%s\n"
		call	_printf

loc_653:				; DATA XREF: .debug_info:000013D4o
		jmp	short loc_606
; ---------------------------------------------------------------------------
		align 4

loc_658:				; CODE XREF: _nm_print_fields+22j
					; _nm_print_fields+2Aj
					; DATA XREF: ...
		mov	edx, [ebx+10h]
		test	edx, edx
		jz	loc_5B4

loc_663:				; DATA XREF: .debug_info:00000E60o
					; .debug_info:00000EE4o
		mov	[esp+3Ch+var_3C], edx
		call	_g_strdup

loc_66B:				; DATA XREF: .debug_info:000012FBo
		mov	ebp, eax
		test	ebp, ebp
		jnz	loc_5E8

loc_675:				; CODE XREF: _nm_print_fields+5Ej
		mov	[esp+3Ch+var_3C], offset aNull ; "NULL"
		call	_g_strdup

loc_681:				; DATA XREF: .debug_info:00001304o
		mov	ebp, eax

loc_683:				; DATA XREF: .debug_info:00000F7Do
		jmp	loc_5E8
; ---------------------------------------------------------------------------

loc_688:				; CODE XREF: _nm_print_fields+3Aj
					; _nm_print_fields+145j
		mov	[esp+3Ch+var_3C], 14h
		call	_g_malloc0

loc_694:				; DATA XREF: .debug_info:0000131Co
		mov	ebp, eax
		mov	al, [ebx+6]
		sub	eax, 3
		cmp	al, 5		; switch 6 cases
		ja	loc_5E0		; jumptable 000006A7 default case
		movzx	eax, al
		jmp	ds:off_804[eax*4] ; switch jump
; ---------------------------------------------------------------------------
		align 10h

loc_6B0:				; CODE XREF: _nm_print_fields+1Aj
					; _nm_print_fields+89j
					; DATA XREF: ...
		mov	eax, [esp+3Ch+var_20]
		xor	eax, dword ptr ds:___stack_chk_guard
		jnz	short loc_732
		add	esp, 2Ch
		pop	ebx

loc_6C0:				; DATA XREF: .debug_loc:000022C5o
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_6C4:				; CODE XREF: _nm_print_fields+32j
					; DATA XREF: .debug_loc:000022CCo ...
		mov	eax, [ebx+10h]
		test	eax, eax
		jz	short loc_688
		mov	eax, [ebx+8]
		mov	[esp+3Ch+var_3C], eax
		call	_g_malloc0

loc_6D6:				; DATA XREF: .debug_info:00001330o
		mov	ebp, eax
		mov	esi, [ebx+10h]
		mov	ecx, [ebx+8]
		mov	edi, eax
		rep movsb
		jmp	loc_5E0		; jumptable 000006A7 default case
; ---------------------------------------------------------------------------
		align 4

loc_6E8:				; CODE XREF: _nm_print_fields+45j
		mov	[esp+3Ch+var_3C], offset a0 ; "0"
		call	_g_strdup

loc_6F4:				; DATA XREF: .debug_info:00001339o
		mov	ebp, eax

loc_6F6:				; DATA XREF: .debug_info:00000F08o
		jmp	loc_5E0		; jumptable 000006A7 default case
; ---------------------------------------------------------------------------
		align 4

loc_6FC:				; CODE XREF: _nm_print_fields+123j
					; DATA XREF: .rdata:off_804o
		mov	eax, [ebx+0Ch]	; jumptable 000006A7 cases 0,2,4
		mov	[esp+3Ch+var_38], eax
		mov	[esp+3Ch+var_3C], offset aLd ; "%ld"
		call	_g_strdup_printf

loc_70F:				; DATA XREF: .debug_info:00001351o
		mov	ebp, eax
		jmp	loc_5E0		; jumptable 000006A7 default case
; ---------------------------------------------------------------------------
unk_716		db  66h	; f		; DATA XREF: .debug_info:00000F26o
		db  90h	; ê
; ---------------------------------------------------------------------------

loc_718:				; CODE XREF: _nm_print_fields+123j
					; DATA XREF: .rdata:off_804o
		mov	eax, [ebx+0Ch]	; jumptable 000006A7 cases 1,3,5
		mov	[esp+3Ch+var_38], eax
		mov	[esp+3Ch+var_3C], offset aLu ; "%lu"

loc_726:				; DATA XREF: .debug_info:00000F04o
					; .debug_info:00001206o
		call	_g_strdup_printf

loc_72B:				; DATA XREF: .debug_info:00001369o
		mov	ebp, eax
		jmp	loc_5E0		; jumptable 000006A7 default case
; ---------------------------------------------------------------------------

loc_732:				; CODE XREF: _nm_print_fields+136j
					; DATA XREF: .debug_ranges:000024D4o ...
		call	___stack_chk_fail
_nm_print_fields endp

; ---------------------------------------------------------------------------
unk_737		db  90h	; ê		; DATA XREF: .debug_info:0000088Do
					; .debug_info:0000127Bo ...
_text		ends

; ===========================================================================

; Segment type:	Zero-length
; Segment permissions: Read/Write
_data		segment	dword public 'DATA' use32
_data		ends

; ===========================================================================

; Segment type:	Zero-length
; Segment permissions: Read/Write
_bss		segment	dword public 'BSS' use32
_bss		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 740h
off_740		dd offset loc_2F1	; DATA XREF: __free_field_value+3Cr
		dd offset loc_2F1	; jump table for switch	statement
		dd offset loc_334
		dd offset loc_2F1
		dd offset loc_2F1
		dd offset loc_2F1
		dd offset loc_2F1
		dd offset loc_2F1
		dd offset loc_2F1
		dd offset loc_31C
		dd offset loc_334
		dd offset loc_2F1
		dd offset loc_31C
		dd offset loc_334
off_778		dd offset loc_414	; DATA XREF: _nm_copy_field_array+A4r
		dd offset loc_414	; jump table for switch	statement
		dd offset loc_4E0
		dd offset loc_414
		dd offset loc_414
		dd offset loc_414
		dd offset loc_414
		dd offset loc_414
		dd offset loc_414
		dd offset loc_4C8
		dd offset loc_460
		dd offset loc_414
		dd offset loc_4C8
		dd offset loc_460
; char aSubarrayStartS[]
aSubarrayStartS	db 'Subarray START: %s Method = %d',0Ah,0 ; DATA XREF: _nm_print_fields+A6o
					; .debug_info:000013C5o
; char aSubarrayEndS[]
aSubarrayEndS	db 'Subarray END: %s',0Ah,0 ; DATA XREF: _nm_print_fields+C3o
					; .debug_info:000013E6o
a1		db '1',0                ; DATA XREF: _nm_print_fields+4Bo
					; .debug_info:000012F5o
a0		db '0',0                ; DATA XREF: _nm_print_fields:loc_6E8o
					; .debug_info:0000134Bo
aLd		db '%ld',0              ; DATA XREF: _nm_print_fields+17Fo
					; .debug_info:00001363o
aLu		db '%lu',0              ; DATA XREF: _nm_print_fields+19Bo
					; .debug_info:00001377o
aNull		db 'NULL',0             ; DATA XREF: _nm_print_fields:loc_675o
					; .debug_info:00001316o
; char aTagSValueS[]
aTagSValueS	db 'Tag=%s;Value=%s',0Ah,0 ; DATA XREF: _nm_print_fields+6Eo
					; .debug_info:00001391o ...
off_804		dd offset loc_6FC	; DATA XREF: _nm_print_fields+123r
		dd offset loc_718	; jump table for switch	statement
		dd offset loc_6FC
		dd offset loc_718
		dd offset loc_6FC
		dd offset loc_718
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_debug_info	segment	byte public 'DATA' use32
		assume cs:_debug_info
		;org 81Ch
off_81C		dd offset byte_CE4	; DATA XREF: .debug_aranges:000023D6o
		db 2, 0
		dd offset dword_1504
		dw 104h
aGnuC4_7_2	db 'GNU C 4.7.2',0      ; DATA XREF: .debug_info:0000102Do
dword_834	dd 666D6E01h, 646C6569h, 4300632Eh, 775C5C3Ah, 736B726Fh
		dd 65636170h, 69705C5Ch, 6E696764h, 7665642Dh, 5C5C6C65h
		dd 67646970h, 322D6E69h, 2E30312Eh, 5C5C3131h, 7062696Ch
		dd 6C707275h, 705C5C65h, 6F746F72h, 736C6F63h, 6F6E5C5Ch
		dd 6C6C6576h
		db 0
		dd offset __add_blank_field
		dd offset unk_737
		dd offset off_2500
		db 2, 4, 7
aUnsignedInt	db 'unsigned int',0
		db 2 dup(2), 7
aShortUnsignedI	db 'short unsigned int',0
		db 2
		db    1
		db 6, 63h, 68h
		db  61h	; a
		db 72h,	0, 3
a_iobuf		db '_iobuf',0
		db 20h
		db    2
		db 81h,	3Eh, 1
		db    0
		align 2
		dw 5F04h
		db  70h	; p
		db 74h,	72h, 0
		db    2
		db 83h,	3Eh, 1
		db    0
		align 2
		dw 2302h
		db    0
		db 4, 5Fh, 63h
		db  6Eh	; n
		db 74h,	0, 2
		db  84h	; Ñ
		dd offset loc_142+2
		db 2, 23h, 4
		db    4
a_base		db '_base',0
		db 2
		db  85h	; Ö
		dd offset loc_13E
		db 2, 23h, 8
		db    4
a_flag		db '_flag',0
		db 2
		db  86h	; Ü
		dd offset loc_142+2
		db 2, 23h, 0Ch
		db    4
a_file		db '_file',0
		db 2
		db  87h	; á
		dd offset loc_142+2
		db 2, 23h, 10h
		db    4
a_charbuf	db '_charbuf',0
		dw 8802h
		dd offset loc_142+2
		db    2
		db 23h,	14h, 4
a_bufsiz	db '_bufsiz',0
		db    2
		db 89h,	44h, 1
		db    0
		align 2
		dw 2302h
		db  18h
		db 4, 5Fh, 74h
aMpfname	db 'mpfname',0
		db    2
		db 8Ah,	3Eh, 1
		db    0
		align 2
		dw 2302h
		db  1Ch
		align 2
		dw 405h
		dd offset loc_9F
		db    2
		db 4, 5, 69h
		db  6Eh	; n
		db 74h,	0, 6
aFile		db 'FILE',0
		db 2, 8Bh, 0A7h
		db    0
		db 2 dup(0), 2
		db    8
		db 5, 6Ch, 6Fh
aNgLongInt	db 'ng long int',0
		db    2
		db 4, 5, 6Ch
aOngInt		db 'ong int',0
		db    2
		db 2, 5, 73h
aHortInt	db 'hort int',0
		db 2, 1, 6
aSignedChar	db 'signed char',0
		db    6
aGuint8		db 'guint8',0
		db    3
		db 20h,	9Eh, 1
		db    0
		align 2
		dw 102h
aUnsignedChar	db 8,'unsigned char',0
		db 6
aGuint32	db 'guint32',0
		db    3
		db 27h,	79h, 0
		db    0
		align 2
		dw 802h
aLongLongUnsign	db 7,'long long unsigned int',0
dword_9F4	dd 69736706h, 300657Ah,	795Ah, 7040200h, 657A6973h, 65707974h
					; DATA XREF: .debug_info:0000120Ao
					; .debug_info:000011F4o
		dd 4080200h, 62756F64h,	700656Ch, 63670604h, 726168h, 9F2D04h
		dd 67060000h, 746E69h, 1443004h, 4020000h
aLongUnsignedIn	db 7,'long unsigned int',0
		db 2
		dd 6C660404h, 74616Fh, 6F706706h, 65746E69h, 4C040072h
		dd 1FBh, 24A0405h, 0FD080000h, 5000001h, 1FD04h, 40C0200h
		dd 676E6F6Ch, 756F6420h, 656C62h, 464D4E03h, 646C6569h
		dd 1800745Fh, 2F11A05h,	74040000h, 5006761h, 13E1Ch, 230200h
		db 9
		dd offset aMethod	; "method"
		db 5, 1Dh, 90h
		dd 2000001h, 66040423h,	7367616Ch, 901E0500h, 2000001h
		dd 74040523h, 657079h, 1901F05h, 23020000h, 69730406h
		dd 500657Ah, 1AF20h, 8230200h
		db 9
off_ADD		dd offset aValue	; DATA XREF: .debug_info:000012EBo
					; "value"
		db 5, 21h, 0AFh
dword_AE4	dd 2000001h, 70040C23h,	765F7274h, 65756C61h, 34220500h
		dd 2000002h, 6C041023h,	5006E65h, 1AF23h, 14230200h, 4D4E0600h
		dd 6C656946h, 24050064h, 264h
a_add_blank_fie	db 0Ah
		db '_add_blank_field',0
		dw 2901h
dword_B30	dd 34401h, 3440100h	; DATA XREF: .debug_info:00001341o
		db 2 dup(0), 0Bh
		dd offset aFields	; "fields"
		db 1
		dd 34429h
		db 0, 0Bh
		dd offset aCount	; "count"
		dw 2901h
off_B4C		dd offset loc_1AF	; DATA XREF: .debug_info:00001359o
dword_B50	dd 77656E0Ch, 6E656C5Fh, 0AF2B0100h, 1,	2F10405h, 10D0000h
		dd 635F6D6Eh, 746E756Fh, 6569665Fh, 73646Ch, 0AF017101h
		dd 1000001h, 37Fh
		db 0Bh
		dd offset aFields	; "fields"
		db 1, 71h, 44h
		dd 0E000003h
		dd offset aCount	; "count"
dword_B94	dd 1AF7301h, 0F000000h,	300h ; DATA XREF: .debug_info:000013A6o
		dd offset __add_blank_field
		dd offset unk_62
		dd offset dword_1848
dword_BAC	dd 42001h, 31E1000h	; DATA XREF: .debug_info:000013BBo
		db 2 dup(0)
		dd offset dword_1898
		dw 2910h
		db 3, 2	dup(0)
		dd offset byte_18DD
		db 11h
		dd offset loc_334	; jumptable 00000314 cases 2,10,13
		dd offset dword_1924
dword_BCC	dd 30012h		; DATA XREF: .debug_info:000013DCo
		db 0
		dd offset loc_48
		dd offset loc_5D
byte_BD9	db 1, 29h, 0F2h		; DATA XREF: .debug_info:00001284o
					; .debug_info:00001408o
		dd 13000003h
		dd offset loc_48
off_BE4		dd offset loc_5D	; DATA XREF: .debug_info:000013FAo
dword_BE8	dd 33414h, 3291500h, 1E100000h ; DATA XREF: .debug_info:00000C00o
					; .debug_info:00001162o ...
		db 3, 2	dup(0)
		dd offset off_1937
		db 16h
		dd offset loc_54
		dd offset dword_BE8+0Ah
		dd 740217h, 0F00802h
		db 2 dup(0), 18h
off_C0F		dd offset loc_31	; DATA XREF: .debug_info:00000C13o
		dd offset off_C0F+1
		dd offset loc_414+2	; jumptable 00000458 default case
		db 17h
		dd 3007402h, 175001F3h,	9047402h, 24310073h, 33220073h
		db 24h,	0, 19h
off_C33		dd offset unk_62	; DATA XREF: .debug_info:00000C37o
					; .debug_info:00000D3Ao ...
		dd offset off_C33
		align 4
		db  1Ah
		db 1, 6Eh, 6Dh
a_field_add_num	db '_field_add_number',0 ; DATA XREF: .debug_info:00000D25o
					; .debug_info:00000E34o ...
		dw 3B01h
		dd 34401h
		db 0
		dd offset _nm_field_add_number
		dd offset unk_147
		dd offset off_194A
byte_C65	db 1, 23h, 5		; DATA XREF: .debug_info:00000F18o
					; .debug_info:00000F22o ...
		db 2 dup(0), 1Bh
		dd offset aFields	; "fields"
		db 1
		dd 3443Bh
		db 0
		dd offset off_19E4
		db 1Ch,	74h, 61h
dword_C7C	dd 3B010067h, 523h, 1C049102h, 657A6973h, 0AF3B0100h, 2000001h
					; DATA XREF: .debug_info:00001002o
		db 91h,	8, 1Dh
		dd offset aMethod	; "method"
		db 1
dword_C9C	dd 1903Bh, 0C910200h, 616C661Ch, 1007367h, 1903Ch, 10910200h
					; DATA XREF: .debug_info:00001355o
					; .debug_info:0000136Do
		db 1Dh
		dd offset aValue	; "value"
		db 1, 3Ch, 0AFh
dword_CBC	dd 2000001h, 741C1491h,	657079h, 1903C01h, 91020000h
		db 18h,	0Eh
		dd offset aCount	; "count"
		dw 3E01h
		dd offset loc_1AF
		db 1Eh
		dd offset aField	; "field"
		db 1, 3Fh, 44h
byte_CE4	db 3, 2	dup(0)		; DATA XREF: .debug_info:off_81Co
		dd offset off_1A0F
		db 1Fh
		dd offset loc_349+1
		dd offset loc_9F
		dd offset off_23F0
		dd 4FB4101h, 68100000h
		db 3, 2	dup(0)
		dd offset off_1A38
		db 20h
		dd offset off_2408
		dd 37311h
		db 0
		dd offset off_1A61
		db 2 dup(0), 19h
		dd offset loc_D4
		dd offset loc_2FF+1
		db 18h
		dd offset loc_E2
		dd offset a_field_add_num+9 ; "d_number"
		dd offset loc_519
		db 17h,	2, 74h
		dd 750200h
		db 0, 19h
		dd offset unk_147
		dd offset off_C33
		dw 500h
		dd 52904h, 9F0800h, 11A0000h
aNm_field_add_p	db 'nm_field_add_pointer',0
		db 1, 56h, 1
		dd offset loc_343+1
		dd offset _nm_field_add_pointer
		dd offset unk_22B
		dd offset off_1A8C
		dd 63201h
		db 0, 1Bh
		dd offset aFields	; "fields"
		dw 5601h
		dd offset loc_343+1
		dd offset off_1B26
		dd 6761741Ch, 23560100h, 2000005h, 731C0491h, 657A69h
		dd 1AF5601h, 91020000h
		db 8, 1Dh
		dd offset aMethod	; "method"
		dw 5601h
		dd offset loc_18F+1
		dd 1C0C9102h, 67616C66h, 57010073h, 190h, 1D109102h
		dd offset aValue	; "value"
		dd 2345701h, 91020000h,	79741C14h, 1006570h, 19057h, 18910200h
		db 0Eh
		dd offset aCount	; "count"
		db 1, 59h, 0AFh
		dd 1E000001h
		dd offset aField	; "field"
		dd 3445A01h
		db 2 dup(0)
		dd offset off_1B51
		dw 4A1Fh
		db 3, 2	dup(0)
		dd offset loc_183
		dd offset off_2420
		db 1
		dd 60A5Ch, 3681000h
		db 2 dup(0)
		dd offset off_1B92
		db 20h
		dd offset off_2438
		db 11h
		dd offset loc_372+1
		dd offset off_1BBB
		db 2 dup(0), 19h
		dd offset loc_1B8
		align 4
		dd 18000003h
		dd offset loc_1C6
		dd offset a_field_add_num+9 ; "d_number"
		dd offset loc_626+2
		dd 740217h, 7502h
		db 19h
		dd offset unk_22B
		dd offset off_C33
		align 2
		dw 4A0Fh
		db 3, 2	dup(0)
		dd offset _nm_count_fields
		dd offset unk_26D
		dd offset off_1BE6
		db 1
		dd offset loc_663+1
		dd 36810h
		db 0
		dd offset off_1C1E
		db 11h,	73h, 3
		db 2 dup(0)
		dd offset off_1C3D
		db 19h
		dd offset unk_26D
		dd offset off_C33
		align 10h
a_free_field	db '!_free_field',0
		db 1, 94h, 1
		dd 68501h
		db 0, 0Bh
		dd offset aField	; "field"
		dw 9401h
		dd offset loc_343+1
		dd 6E012200h, 72665F6Dh, 665F6565h, 646C6569h, 80010073h
		db 1
		dd offset _nm_free_fields
		dd offset unk_2D5
		dd offset off_1C73
		db 1, 20h, 7
		db 2 dup(0), 1Dh
		dd offset aFields	; "fields"
		db 1
		dd 72080h, 910200h
		db 1Eh
		dd offset aField	; "field"
		db 1, 82h, 44h
		db 3, 2	dup(0)
		dd offset off_1CDB
		db 12h
		dd offset loc_663+1
		dd offset loc_294
		dd offset loc_2A5
		dd 7018A01h, 79100000h
		db 6, 2	dup(0)
		dd offset off_1CFA
		db 18h
		dd offset loc_29B
		dd offset loc_726
		dd offset loc_6F6+1
		dd 2500117h, 19000073h
		dd offset loc_2A5
		dd offset byte_C65+1
		db 0, 18h
		dd offset loc_2B8
		dd offset byte_C65+1
		dd offset unk_716
		dw 217h
		dd 73020074h
		db 2 dup(0), 19h
		dd offset unk_2D5
		dd offset off_C33
		align 4
		db    5
		db 4, 44h, 3
		db    0
		align 2
a_free_field_va	db '#_free_field_value',0
		db 1, 9Eh, 1
		dd offset __free_field_value
		dd offset unk_34E
		dd offset off_1D1A
		dd 78701h
		db 0, 1Bh
		dd offset aField	; "field"
		dw 9E01h
		dd offset loc_343+1
		dd offset off_1D54
		db 18h
		dd offset loc_32B
		dd offset loc_683+2
		dd offset off_740+34h
		db 17h,	2, 74h
		dd 1F30500h, 102350h
		db 19h
		dd offset loc_343
		dd offset byte_C65+1
		db 19h
		dd offset unk_34E
		dd offset off_C33
		dw 1A00h
		dd 5F6D6E01h, 61636F6Ch, 665F6574h, 646C6569h, 1B80100h
		dd 344h
		dd offset _nm_locate_field
		dd offset unk_3B1
		dd offset off_1DA7
		dd 80001h, 61741C00h, 0B8010067h, 13Eh,	1B009102h
		dd offset aFields	; "fields"
		dd 344B801h
		db 2 dup(0)
		dd offset off_1E0F
aRet_fields	db '$ret_fields',0
		dw 0BA01h
		dd offset loc_343+1
		db 0, 18h
		dd offset loc_38D
		dd offset dword_C7C+1
		dd offset aTagSValueS+3	; "=%s;Value=%s\n"
		dw 217h
		dd 76020474h
		db 2 dup(0), 19h
		dd offset unk_3B1
		dd offset off_C33
		align 4
a_copy_field	db '!_copy_field',0
		db 1, 0E2h, 1
		db    1
		dd offset aGnuC4_7_2+5	; " 4.7.2"
aDest		db '%dest',0
		db 1
		db 0E2h	; ‚
		dd offset loc_343+1
aSrc		db '%src',0
		dw 0E201h
		dd offset loc_343+1
		db    0
a_copy_field_va	db '!_copy_field_value',0
		db    1
		db 0ECh, 2 dup(1)
		dd offset dword_834+2Ch
aDest_0		db '%dest',0
		dw 0EC01h
		dd offset loc_343+1
aSrc_0		db '%src',0
		db 1, 0ECh, 44h
		db    3
		align 4
		db  1Ah
		db 1, 6Eh, 6Dh
a_copy_field_ar	db '_copy_field_array',0
		dw 0CC01h
		dd 34401h
		db 0
		dd offset _nm_copy_field_array
		dd offset unk_503
		dd offset off_1E2E
		db 1, 71h, 9
		dd 73260000h, 1006372h,	344CCh
		db 0
		dd offset off_1EC8
aPtr		db 27h,'ptr',0
		dw 0CE01h
		dd offset loc_343+1
		dd offset off_1EFE
aDest_1		db 27h,'dest',0
		dw 0CF01h
		dd offset loc_343+1
		dd offset off_1F4B
		db 1Eh
		dd offset aCount	; "count"
		db 1, 0D0h, 44h
		db 1, 2	dup(0)
		dd offset off_1F99
		db 1Fh
		dd offset loc_349+1
		dd offset loc_3D2
		dd offset off_2450
		dd 8F7D301h, 68100000h
		db 3, 2	dup(0)
		dd offset off_1FAC
		db 20h
		dd offset off_2468
		dd 37311h
		db 0
		dd offset off_1FD5
		db 2 dup(0), 1Fh
		dd offset aTagSValueS+0Dh ; "%s\n"
		dd offset loc_414	; jumptable 00000458 default case
		dd offset off_2480
		dd 95ED801h, 21100000h
		db 8, 2	dup(0)
		dd offset off_2000
		db 10h
		dd offset off_804+11h
		dd offset off_2043
		dd 82D1Fh
		db 0
		dd offset loc_414	; jumptable 00000458 default case
		dd offset off_24A0
		db 1, 0E8h, 54h
		dd 10000009h, 854h
		dd offset off_2086
		dd 84810h
		db 0
		dd offset off_20C9
		db 19h
		dd offset loc_48F
		dd offset dword_BE8+0Ah
		db 19h
		dd offset loc_4D3
		dd offset dword_834+2Ch
		align 10h
		db 19h
		dd offset loc_44A
		dd offset a_field_add_num+9 ; "d_number"
		align 2
		db 19h
		dd offset loc_3FB
		dd offset dword_BE8+0Ah
		db 19h
		dd offset unk_503
		dd offset off_C33
		dd 6E012800h, 65725F6Dh, 65766F6Dh, 6569665Fh, 100646Ch
		db 0Ch,	2 dup(1)
		dd offset _nm_remove_field
		dd offset _nm_print_fields
		dd offset off_210C
		db 1
		dd offset dword_9F4+19h
		db 29h
		dd offset aField	; "field"
		db 1, 0Ch, 1
		dd offset loc_343+1
		dd offset off_218C
aTmp		db '*tmp',0
		db 1, 0Eh, 1
		dd offset loc_343+1
		dd offset off_21AB
aLen		db '*len',0
		db 1, 0Fh, 1
		dd offset loc_1AF
		dd offset off_21BE
		dd 6642Bh
		db 0
		dd offset loc_523
		dd offset loc_534
		db 1, 12h, 1
		dd offset dword_9F4+0Fh
		dd 67910h
		db 0
		dd offset off_21E8
		db 18h
		dd offset loc_52A
		dd offset loc_726
		dd offset dword_9F4+5
		dw 117h
		dd 730250h
		db 0, 19h
		dd offset loc_534
		dd offset byte_C65+1
		dw 1900h
		dd offset _nm_print_fields
		dd offset off_C33
		db    0
a_value_to_stri	db ',_value_to_string',0
		db 1
		dd 3E010141h, 1000001h,	0A45h
		db 2Dh
		dd offset aField	; "field"
		db 1, 41h, 1
		dd offset loc_343+1
		db 2Eh
		dd offset aValue	; "value"
		db 1, 43h, 1
		dd offset loc_13E
		dd 6E012800h, 72705F6Dh, 5F746E69h, 6C656966h, 1007364h
		db 28h,	2 dup(1)
		dd offset _nm_print_fields
		dd offset unk_737
		dd offset off_2207
		db 1
		dd offset byte_BD9
		db 2Fh
		dd offset aFields	; "fields"
		db 1, 28h, 1
		dd offset loc_343+1
		dd 2A009102h, 727473h, 3E012A01h
		db 1, 2	dup(0)
		dd offset off_22A1
		db 30h
		dd offset aField	; "field"
		dd 44012B01h
		db 3, 2	dup(0)
		dd offset off_22C1
		db 31h
		dd offset dword_9F4+19h
		dd offset loc_5A4
		dd offset off_24C0
		dd 62013601h, 1000000Bh, 0A2Ch
		dd offset off_22DF
		db 20h
		dd offset off_24E0
		db 11h,	38h, 0Ah
		db 2 dup(0)
		dd offset off_2308
		db 18h
		dd offset loc_5DB
		dd offset a_field_add_num+9 ; "d_number"
		dd offset off_ADD+1
		db 17h
		dd 5007402h
		db 3
		dd offset a1		; "1"
		align 2
		db 19h
		dd offset loc_66B
		dd offset a_field_add_num+9 ; "d_number"
		db 18h
		dd offset loc_681
		dd offset a_field_add_num+9 ; "d_number"
		dd offset dword_AE4+1Bh
		dd 740217h
		db 5, 3
		dd offset aNull		; "NULL"
		dw 1800h
		dd offset loc_694
		dd offset dword_BE8+0Ah
		dd offset dword_AE4+2Fh
		dd 740217h, 19004401h
		dd offset loc_6D6
		dd offset dword_BE8+0Ah
		db 18h
		dd offset loc_6F4
		dd offset a_field_add_num+9 ; "d_number"
		dd offset dword_B30+4
		db 17h,	2, 74h
		db 0, 5, 3
		dd offset a0		; "0"
		align 10h
		db 18h
		dd offset loc_70F
		dd offset dword_C9C+0Dh
		dd offset off_B4C
		db 17h,	2, 74h
		db 0, 5, 3
		dd offset aLd		; "%ld"
		align 4
		db 16h
		dd offset loc_72B
		dd offset dword_C9C+0Dh
		db 17h,	2, 74h
		db 0, 5, 3
		dd offset aLu		; "%lu"
		align 4
		db 2 dup(0), 18h
		dd offset loc_5FE
		dd offset dword_CBC+12h
		dd offset dword_B50+31h
		db 17h
		dd 5007402h
		db 3
		dd offset aTagSValueS	; "Tag=%s;Value=%s\n"
		db 17h,	2, 74h
		dd 750208h
		db 0, 18h
		dd offset loc_606
		dd offset byte_C65+1
		dd offset dword_B94+2
		dw 217h
		dd 75020074h
		db 2 dup(0), 18h
		dd offset loc_636
		dd offset dword_CBC+12h
		dd offset dword_BAC+2
		db 17h
		dd 5007402h
		db 3
		dd offset aSubarrayStartS ; "Subarray START: %s	Method = %d\n"
		align 2
		db 19h
		dd offset loc_641
		dd offset aLongUnsignedIn+11h ;	"t"
		db 18h
		dd offset loc_653
		dd offset dword_CBC+12h
		dd offset dword_BCC+3
		dd 740217h
		db 5, 3
		dd offset aSubarrayEndS	; "Subarray END: %s\n"
		dw 1900h
		dd offset unk_737
		dd offset off_C33
		db    0
		db 32h,	4Bh, 1
		db    0
		align 2
		dd offset off_BE4
		dw 33h
a4_iob		db '4_iob',0
		dw 9A02h
		dd offset byte_BD9
		db    1
		db 1, 35h, 1
aG_malloc0	db 'g_malloc0',0
		dw 3406h
		db    1
		dd offset loc_233+1
		db 1, 10h, 0Ch
		db    0
		align 2
		dw 0D836h
		db    1
		align 4
		db  35h	; 5
		db 1, 67h, 5Fh
aRealloc	db 'realloc',0
		db    6
		db 35h,	1, 34h
		db    2
		db 2 dup(0), 1
		dd offset off_C33
		db  36h	; 6
		dd offset loc_233+1
		db 36h,	0D8h, 1
		db    0
		db 2 dup(0), 37h
		db    1
a__stack_chk_fa	db '__stack_chk_fail',0
		dw 101h
		db    1
		db 35h,	1, 67h
a_strdup	db '_strdup',0
		db    7
		db 0BDh, 1, 4Fh
		db    2
		db 2 dup(0), 1
		dd offset byte_C65+1
		db  36h	; 6
		dd offset loc_244
		align 2
		dw 138h
aG_free		db 'g_free',0
		db 6
		db  37h	; 7
		db 2 dup(1), 7Dh
		db  0Ch
		db 2 dup(0), 36h
		dd offset loc_233+1
		db    0
		db 35h,	1, 67h
a_ascii_strcase	db '_ascii_strcasecmp',0
		dw 9F07h
		dd 20A01h, 0CA90100h, 44360000h, 36000002h, 244h, 67013500h
		dd 7274735Fh, 5F707564h, 6E697270h, 7006674h, 24F01BEh
		dd 0CE010000h, 3600000Ch, 244h,	13A0039h, 6E697270h, 2006674h
		dd 44010126h, 1000001h,	52336h,	3900h
_debug_info	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_debug_abbrev	segment	byte public 'DATA' use32
		assume cs:_debug_abbrev
		;org 1504h
dword_1504	dd 25011101h, 30B1308h,	11081B08h, 10011201h, 2000006h
					; DATA XREF: .debug_info:00000822o
		dd 0B0B0024h, 8030B3Eh,	13030000h, 0B080301h, 3B0B3A0Bh
		dd 13010Bh, 0D0400h, 0B3A0803h,	13490B3Bh, 0A38h, 0B000F05h
		dd 13490Bh, 160600h, 0B3A0803h,	13490B3Bh, 0F070000h, 0B0B00h
		dd 260800h, 1349h, 3000D09h, 3B0B3A0Eh,	3813490Bh, 0A00000Ah
		dd 803012Eh, 0B3B0B3Ah,	13490C27h, 13010B20h, 50B0000h
		dd 3A0E0300h, 490B3B0Bh, 0C000013h, 8030034h, 0B3B0B3Ah
		dd 1349h, 3F012E0Dh, 3A08030Ch,	270B3B0Bh, 2013490Ch, 13010Bh
		dd 340E00h, 0B3A0E03h, 13490B3Bh, 2E0F0000h, 11133101h
		dd 40011201h, 0C429706h, 1301h,	31000510h, 60213h, 341100h
		dd 6021331h, 1D120000h,	11133101h, 58011201h, 10B590Bh
		dd 13000013h, 111010Bh,	112h, 31003414h, 15000013h, 13310005h
		dd 89160000h, 11010182h, 133101h, 828A1700h, 0A020001h
		dd 0A4291h, 82891800h, 1110101h, 13011331h, 89190000h
		dd 11000182h, 133101h, 12E1A00h, 8030C3Fh, 0B3B0B3Ah, 13490C27h
		dd 1120111h, 42970640h,	13010Ch, 51B00h, 0B3A0E03h, 13490B3Bh
		dd 602h, 300051Ch, 3B0B3A08h, 213490Bh,	1D00000Ah, 0E030005h
		dd 0B3B0B3Ah, 0A021349h, 341E0000h, 3A0E0300h, 490B3B0Bh
		dd 60213h, 11D1F00h, 1521331h, 0B580655h, 13010B59h, 0B200000h
		dd 65501h, 12E2100h, 0B3A0803h,	0C270B3Bh, 13010B20h, 2E220000h
		dd 30C3F01h, 3B0B3A08h,	110C270Bh, 40011201h, 0C429706h
		dd 1301h, 3012E23h, 3B0B3A08h, 110C270Bh, 40011201h, 0C429706h
		dd 1301h, 3003424h, 3B0B3A08h, 1C13490Bh, 2500000Bh, 8030005h
		dd 0B3B0B3Ah, 1349h, 3000526h, 3B0B3A08h, 213490Bh, 27000006h
		dd 8030034h, 0B3B0B3Ah,	6021349h, 2E280000h, 30C3F01h
		dd 3B0B3A08h, 110C2705h, 40011201h, 0C429706h, 1301h, 3000529h
		dd 3B0B3A0Eh, 2134905h,	2A000006h, 8030034h, 53B0B3Ah
		dd 6021349h, 1D2B0000h,	11133101h, 58011201h, 105590Bh
		dd 2C000013h, 803012Eh,	53B0B3Ah, 13490C27h, 13010B20h
		dd 52D0000h, 3A0E0300h,	49053B0Bh, 2E000013h, 0E030034h
		dd 53B0B3Ah, 1349h, 300052Fh, 3B0B3A0Eh, 2134905h, 3000000Ah
		dd 0E030034h, 53B0B3Ah,	6021349h, 1D310000h, 52133101h
		dd 58065501h, 105590Bh,	32000013h, 13490101h, 1301h, 2133h
		dd 343400h, 0B3A0803h, 13490B3Bh, 0C3C0C3Fh, 2E350000h
		dd 30C3F01h, 3B0B3A08h,	490C270Bh, 10C3C13h, 36000013h
		dd 13490005h, 2E370000h, 30C3F00h, 340C2708h, 0C3C0Ch
		dd 12E3800h, 8030C3Fh, 0B3B0B3Ah, 0C3C0C27h, 1301h, 1839h
		dd 12E3A00h, 8030C3Fh, 53B0B3Ah, 13490C27h, 0C3Ch
		db 0
		align 4
_debug_abbrev	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_debug_loc	segment	byte public 'DATA' use32
		assume cs:_debug_loc
		;org 1848h
dword_1848	dd 0			; DATA XREF: .debug_info:00000BA8o
		dd 1, 4740002h,	1, 4, 8740002h,	4, 43h,	30740002h, 43h
		dd 44h,	8740002h, 44h, 48h, 4740002h, 48h, 62h,	30740002h
		dd 2 dup(0)
dword_1898	dd 0			; DATA XREF: .debug_info:00000BB6o
		dd offset loc_2C+4
		dd 30500001h, 31000000h, 4000000h, 5001F300h, 319Fh, 5300h
		dd 50000100h, 53h, 5Dh,	1F30004h, 5D9F50h, 610000h, 10000h
		dd 50h,	0
		db 0
byte_18DD	db 3 dup(0)		; DATA XREF: .debug_info:00000BBFo
		dd offset dword_2200
		dd 52000100h, 22h, 34h,	76730003h, 349Fh, 4500h, 0F3000400h
		dd 459F5201h, 53000000h, 1000000h, 535200h, 620000h, 40000h
		dd 9F5201F3h, 2	dup(0)
dword_1924	dd 1Fh,	34h, 530001h, 0	; DATA XREF: .debug_info:00000BC8o
		db 3 dup(0)
off_1937	dd offset loc_54	; DATA XREF: .debug_info:00000BF7o
		dd offset loc_5D
		db 1
		dd 5000h, 0
		db 2 dup(0)
off_194A	dd offset _nm_field_add_number ; DATA XREF: .debug_info:00000C61o
		dd offset loc_65
		dw 2
		dd 650474h, 660000h, 20000h, 660874h, 670000h, 20000h
		dd 670C74h, 680000h, 20000h, 681074h, 6B0000h, 20000h
		dd 6B1474h, 12E0000h, 30000h, 2E00D074h, 2F000001h, 2000001h
		dd 2F147400h, 30000001h, 2000001h, 30107400h, 31000001h
		dd 2000001h, 310C7400h,	32000001h, 2000001h, 32087400h
		dd 34000001h, 2000001h,	34047400h, 47000001h, 3000001h
		dd 0D07400h, 2 dup(0)
off_19E4	dd offset _nm_field_add_number ; DATA XREF: .debug_info:00000C75o
		dd offset loc_D4
		dd 910002h, 0D4h, 0E1h,	33500001h, 42000001h, 2000001h
		dd 9100h, 0
		db 3 dup(0)
off_1A0F	dd offset loc_D6	; DATA XREF: .debug_info:00000CE7o
		dd offset loc_109
		db 1
		dd 1095700h, 1330000h, 10000h, 14251h, 14600h, 51000100h
		dd 2 dup(0)
off_1A38	dd offset loc_9F	; DATA XREF: .debug_info:00000D03o
		dd offset loc_B3
		dd 0B3500001h, 0C8000000h, 1000000h, 1335100h, 1420000h
		dd 10000h, 50h,	0
		db 0
off_1A61	dd offset loc_9F	; DATA XREF: .debug_info:00000D11o
		dd offset loc_B3
		db 2, 0, 30h
		dd 0B59Fh, 0D300h, 52000100h, 133h, 142h, 9F300002h, 2 dup(0)
off_1A8C	dd offset _nm_field_add_pointer	; DATA XREF: .debug_info:00000D70o
		dd offset loc_149
		dd 4740002h, 149h, 14Ah, 8740002h, 14Ah, 14Bh, 0C740002h
		dd 14Bh, 14Ch, 10740002h, 14Ch,	14Fh, 14740002h, 14Fh
		dd 212h, 0D0740003h, 21200h, 21300h, 74000200h,	21314h
		dd 21400h, 74000200h, 21410h, 21500h, 74000200h, 2150Ch
		dd 21600h, 74000200h, 21608h, 21800h, 74000200h, 21804h
		dd 22B00h, 74000300h, 0D0h, 0
		db 2 dup(0)
off_1B26	dd offset _nm_field_add_pointer	; DATA XREF: .debug_info:00000D84o
		dd offset loc_1B8
		dw 2
		dd 1B80091h, 1C50000h, 10000h, 21750h, 22600h, 91000200h
		dd 2 dup(0)
		db 0
off_1B51	dd offset loc_183	; DATA XREF: .debug_info:00000DF6o
		dd offset loc_1BA
		db 2, 0, 30h
		dd 1BA9Fh, 1ED00h, 57000100h, 1EDh, 217h, 17510001h, 26000002h
		dd 2000002h, 269F3000h,	2A000002h, 1000002h, 5100h, 0
		db 2 dup(0)
off_1B92	dd offset loc_183	; DATA XREF: .debug_info:00000E12o
		dd offset loc_197
		dw 1
		dd 19750h, 1AC00h, 51000100h, 217h, 226h, 500001h, 0
		db 3 dup(0)
off_1BBB	dd offset loc_183	; DATA XREF: .debug_info:00000E20o
		dd offset loc_197
		db 2
		dd 999F3000h, 0B7000001h, 1000001h, 2175200h, 2260000h
		dd 20000h, 9F30h, 0
		db 2 dup(0)
off_1BE6	dd offset _nm_count_fields ; DATA XREF:	.debug_info:00000E5Bo
		dd offset loc_22F
		dw 2
		dd 22F0474h, 2610000h, 20000h, 2612074h, 2640000h, 20000h
		dd 2640474h, 26D0000h, 20000h, 2074h, 0
		db 2 dup(0)
off_1C1E	dd offset _nm_count_fields ; DATA XREF:	.debug_info:00000E69o
		dd offset loc_242
		dw 2
		dd 2420091h, 2520000h, 10000h, 52h, 0
		db 0
off_1C3D	dd offset loc_23E	; DATA XREF: .debug_info:00000E72o
		dd offset loc_248
		db 2, 0, 30h
		dd 2499Fh, 26200h, 50000100h, 262h, 268h, 9F300002h, 268h
		dd 26Ch, 500001h, 0
		db 3 dup(0)
off_1C73	dd offset _nm_free_fields ; DATA XREF: .debug_info:00000EBDo
		dd offset loc_271
		db 2
		dd 71047400h, 72000002h, 2000002h, 72087400h, 75000002h
		dd 2000002h, 750C7400h,	0CD000002h, 2000002h, 0CD307400h
		dd 0CE000002h, 2000002h, 0CE0C7400h, 0CF000002h, 2000002h
		dd 0CF087400h, 0D0000002h, 2000002h, 0D0047400h, 0D5000002h
		dd 2000002h, 307400h, 0
		db 3 dup(0)
off_1CDB	dd offset loc_284	; DATA XREF: .debug_info:00000EDFo
		dd offset loc_28E
		db 2
		dd 8E9F3000h, 0B0000002h, 1000002h, 5300h, 0
		db 2 dup(0)
off_1CFA	dd offset loc_294	; DATA XREF: .debug_info:00000EFBo
		dd offset loc_2A8
		dw 1
		dd 2A853h, 2B000h, 73000300h, 9F68h, 0
		db 2 dup(0)
off_1D1A	dd offset __free_field_value ; DATA XREF: .debug_info:00000F60o
		dd offset loc_2DB
		dw 2
		dd 2DB0474h, 30E0000h, 30000h, 0E00C074h, 10000003h, 2000003h
		dd 10047400h, 4E000003h, 3000003h, 0C07400h, 2 dup(0)
off_1D54	dd offset __free_field_value ; DATA XREF: .debug_info:00000F74o
		dd offset loc_2F1	; jumptable 00000314 default case
		dd 0F1500001h, 0F000002h, 4000003h, 5001F300h, 30F9Fh
		dd 32A00h, 50000100h, 32Ah, 331h, 1F30004h, 3319F50h, 3420000h
		dd 10000h, 34250h, 34E00h, 0F3000400h, 9F5001h,	0
		db 3 dup(0)
off_1DA7	dd offset _nm_locate_field ; DATA XREF:	.debug_info:00000FC4o
		dd offset loc_351
		db 2
		dd 51047400h, 52000003h, 2000003h, 52087400h, 55000003h
		dd 2000003h, 550C7400h,	0A9000003h, 2000003h, 0A9307400h
		dd 0AA000003h, 2000003h, 0AA0C7400h, 0AB000003h, 2000003h
		dd 0AB087400h, 0AC000003h, 2000003h, 0AC047400h, 0B1000003h
		dd 2000003h, 307400h, 0
		db 3 dup(0)
off_1E0F	dd offset _nm_locate_field ; DATA XREF:	.debug_info:00000FE6o
		dd offset loc_370
		db 2
		dd 70049100h, 95000003h, 1000003h, 5300h, 0
		db 2 dup(0)
off_1E2E	dd offset _nm_copy_field_array ; DATA XREF: .debug_info:000010A1o
		dd offset loc_3B5
		dw 2
		dd 3B50474h, 3B60000h, 20000h, 3B60874h, 3B70000h, 20000h
		dd 3B70C74h, 3B80000h, 20000h, 3B81074h, 3BB0000h, 20000h
		dd 3BB1474h, 4C30000h, 30000h, 0C300D074h, 0C4000004h
		dd 2000004h, 0C4147400h, 0C5000004h, 2000004h, 0C5107400h
		dd 0C6000004h, 2000004h, 0C60C7400h, 0C7000004h, 2000004h
		dd 0C7087400h, 0C8000004h, 2000004h, 0C8047400h, 3000004h
		dd 3000005h, 0D07400h, 2 dup(0)
off_1EC8	dd offset _nm_copy_field_array ; DATA XREF: .debug_info:000010B5o
		dd offset loc_402
		dd 910002h, 402h, 4AEh,	0C8530001h, 0E5000004h,	1000004h
		dd 4E55300h, 4FE0000h, 20000h, 91h, 0
		db 2 dup(0)
off_1EFE	dd offset loc_3CA	; DATA XREF: .debug_info:000010C4o
		dd offset loc_402
		dw 2
		dd 4029F30h, 4040000h, 10000h, 40450h, 41200h, 91000200h
		dd 4124Ch, 4AE00h, 55000100h, 4C8h, 4E5h, 0E5550001h, 0FE000004h
		dd 2000004h, 9F3000h, 0
		db 3 dup(0)
off_1F4B	dd offset loc_3CA	; DATA XREF: .debug_info:000010D4o
		dd offset loc_3FF
		db 2
		dd 0FF9F3000h, 4000003h, 1000004h, 4045000h, 4E50000h
		dd 20000h, 4E54C91h, 4FE0000h, 20000h, 4FE9F30h, 5020000h
		dd 10000h, 50250h, 50300h, 91000200h, 4Ch, 0
		db 0
off_1F99	dd offset loc_3F3	; DATA XREF: .debug_info:000010E3o
		dd offset unk_412
		db 1, 0, 56h
		dd 2 dup(0)
off_1FAC	dd offset loc_3D2	; DATA XREF: .debug_info:000010FFo
		dd offset loc_3E0
		dd 0E0530001h, 0F0000003h, 1000003h, 4E55000h, 4F40000h
		dd 10000h, 53h,	0
		db 0
off_1FD5	dd offset loc_3D2	; DATA XREF: .debug_info:0000110Do
		dd offset loc_3E0
		db 2, 0, 30h
		dd 3E19Fh, 3F300h, 52000100h, 4E5h, 4F4h, 9F300002h, 2 dup(0)
off_2000	dd offset unk_412	; DATA XREF: .debug_info:0000112Bo
		dd offset loc_426
		dd 26530001h, 30000004h, 3000004h, 9F687300h, 430h, 4A8h
		dd 0A8530001h, 0AE000004h, 3000004h, 9F687300h,	4C8h, 4E5h
		dd 530001h, 0
		db 3 dup(0)
off_2043	dd offset unk_412	; DATA XREF: .debug_info:00001134o
		dd offset loc_423
		db 1
		dd 4235500h, 4300000h, 30000h, 309F6875h, 0A5000004h, 1000004h
		dd 4A55500h, 4AE0000h, 30000h, 0C89F6875h, 0E5000004h
		dd 1000004h, 5500h, 0
		db 2 dup(0)
off_2086	dd offset unk_412	; DATA XREF: .debug_info:00001150o
		dd offset loc_426
		dw 1
		dd 42653h, 43000h, 73000300h, 44D9F68h,	4A80000h, 10000h
		dd 4A853h, 4AE00h, 73000300h, 4C89F68h,	4E50000h, 10000h
		dd 53h,	0
		db 0
off_20C9	dd offset unk_412	; DATA XREF: .debug_info:00001159o
		dd offset loc_423
		db 1, 0, 55h
		dd offset loc_423
		dd offset loc_430
		dd 68750003h, 44D9Fh, 4A500h, 55000100h, 4A5h, 4AEh, 68750003h
		dd 4C89Fh, 4E500h, 55000100h, 2	dup(0)
off_210C	dd offset _nm_remove_field ; DATA XREF:	.debug_info:000011ABo
		dd offset loc_505
		dd 4740002h, 505h, 506h, 8740002h, 506h, 507h, 0C740002h
		dd 507h, 50Ah, 10740002h, 50Ah,	57Bh, 30740002h, 57Bh
		dd 57Ch, 10740002h, 57Ch, 57Dh,	0C740002h, 57Dh, 57Eh
		dd 8740002h, 57Eh, 57Fh, 4740002h, 57Fh, 584h, 30740002h
		dd 2 dup(0)
off_218C	dd offset _nm_remove_field ; DATA XREF:	.debug_info:000011C0o
		dd offset loc_537
		dd 910002h, 537h, 554h,	530001h, 0
		db 3 dup(0)
off_21AB	dd offset loc_537	; DATA XREF: .debug_info:000011D0o
		dd offset loc_56C
		db 1
		dd 5200h, 0
		db 2 dup(0)
off_21BE	dd offset loc_53A	; DATA XREF: .debug_info:000011E0o
		dd offset loc_54B
		dw 1
		dd 54B50h, 55400h, 73000200h, 55A14h, 56C00h, 50000100h
		dd 2 dup(0)
off_21E8	dd offset loc_523	; DATA XREF: .debug_info:000011FDo
		dd offset loc_554
		dd 54530001h, 6C000005h, 2000005h, 9100h
dword_2200	dd 0			; DATA XREF: .debug_loc:000018E0o
		db 3 dup(0)
off_2207	dd offset _nm_print_fields ; DATA XREF:	.debug_info:0000127Fo
		dd offset loc_585
		db 2
		dd 85047400h, 86000005h, 2000005h, 86087400h, 87000005h
		dd 2000005h, 870C7400h,	88000005h, 2000005h, 88107400h
		dd 8B000005h, 2000005h,	8B147400h, 0BF000005h, 3000006h
		dd 0C07400h, 6BFh, 6C0h, 14740002h, 6C0h, 6C1h,	10740002h
		dd 6C1h, 6C2h, 0C740002h, 6C2h,	6C3h, 8740002h,	6C3h, 6C4h
		dd 4740002h, 6C4h, 737h, 0C0740003h, 2 dup(0)
		db 0
off_22A1	dd offset loc_59A	; DATA XREF: .debug_info:000012A3o
		dd offset loc_5E8
		db 2, 0, 30h
		dd 6069Fh, 73700h, 30000200h, 9Fh, 0
		db 0
off_22C1	dd offset loc_59A	; DATA XREF: .debug_info:000012B3o
		dd offset loc_6C0
		db 1, 0, 53h
		dd offset loc_6C4
		dd offset unk_737
		dd 530001h, 0
		db 3 dup(0)
off_22DF	dd offset loc_5A4	; DATA XREF: .debug_info:000012D0o
		dd offset loc_606
		db 1
		dd 6555300h, 6AE0000h, 10000h, 6C453h, 73200h, 53000100h
		dd 2 dup(0)
off_2308	dd offset loc_5A4	; DATA XREF: .debug_info:000012DEo
		dd offset loc_5DD
		dd 9F300002h, 5DDh, 606h, 55550001h, 6D000006h,	2000006h
		dd 6D9F3000h, 75000006h, 1000006h, 6755000h, 6830000h
		dd 10000h, 68355h, 68800h, 50000100h, 688h, 696h, 9F300002h
		dd 696h, 699h, 99500001h, 0AE000006h, 1000006h,	6C45500h
		dd 6D80000h, 20000h, 6D89F30h, 6E70000h, 10000h, 6E750h
		dd 6F600h, 30000200h, 6F69Fh, 6FB00h, 50000100h, 6FBh
		dd 711h, 11550001h, 16000007h, 1000007h, 7165000h, 72D0000h
		dd 10000h, 72D55h, 73200h, 50000100h, 2	dup(0)
_debug_loc	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_debug_aranges	segment	byte public 'DATA' use32
		assume cs:_debug_aranges
		;org 23D0h
		dd 1Ch
		db 2, 0
		dd offset off_81C
		dw 4
		dd 0
		dd offset __add_blank_field
		dd offset unk_737
		align 10h
_debug_aranges	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_debug_ranges	segment	byte public 'DATA' use32
		assume cs:_debug_ranges
		;org 23F0h
off_23F0	dd offset loc_9F	; DATA XREF: .debug_info:00000CF4o
		dd offset loc_CF
		dd offset loc_134
		dd offset loc_142
		dd 2 dup(0)
off_2408	dd offset loc_9F	; DATA XREF: .debug_info:00000D08o
		dd offset loc_CF
		dd offset loc_134
		dd offset loc_142
		align 10h
off_2420	dd offset loc_183	; DATA XREF: .debug_info:00000E03o
		dd offset loc_1B3
		dd offset loc_218
		dd offset loc_226
		dd 2 dup(0)
off_2438	dd offset loc_183	; DATA XREF: .debug_info:00000E17o
		dd offset loc_1B3
		dd offset loc_218
		dd offset loc_226
		align 10h
off_2450	dd offset loc_3D2	; DATA XREF: .debug_info:000010F0o
		dd offset loc_3F3
		dd offset loc_4E5
		dd offset loc_4F4
		dd 2 dup(0)
off_2468	dd offset loc_3D2	; DATA XREF: .debug_info:00001104o
		dd offset loc_3F3
		dd offset loc_4E5
		dd offset loc_4F4
		align 10h
off_2480	dd offset loc_414	; DATA XREF: .debug_info:0000111Co
					; jumptable 00000458 default case
		dd offset loc_420
		dd offset loc_430
		dd offset loc_4A2
		dd offset loc_4C8	; jumptable 00000458 cases 9,12
		dd offset loc_4E5
		align 10h
off_24A0	dd offset loc_414	; DATA XREF: .debug_info:00001141o
					; jumptable 00000458 default case
		dd offset loc_420
		dd offset loc_44D
		dd offset loc_4A2
		dd offset loc_4C8	; jumptable 00000458 cases 9,12
		dd offset loc_4E5
		align 10h
off_24C0	dd offset loc_5A4	; DATA XREF: .debug_info:000012C0o
		dd offset loc_5E8
		dd offset loc_658
		dd offset loc_6B0
		dd offset loc_6C4
		dd offset loc_732
		align 10h
off_24E0	dd offset loc_5A4	; DATA XREF: .debug_info:000012D5o
		dd offset loc_5E8
		dd offset loc_658
		dd offset loc_6B0
		dd offset loc_6C4
		dd offset loc_732
		align 10h
_debug_ranges	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_debug_line	segment	byte public 'DATA' use32
		assume cs:_debug_line
		;org 2500h
off_2500	dd offset loc_2B0	; DATA XREF: .debug_info:00000891o
		db    2
		align 2
		dd offset loc_13E+1
		dw 101h
		db 0FBh	; ˚
		db 0Eh,	0Dh, 0
		db    1
		db 3 dup(1)
		db    0
		db 2 dup(0), 1
		db    0
		align 2
		dw 6301h
aWorkspacePidgi	db ':/workspace/pidgin-devel/win32-dev/mingw-4.7.2/bin/../lib/gcc/min'
		db 'gw32/4.7.2/../../../../include',0
a________Win32D	db '../../../../win32-dev/gtk_2_0-2.14/lib/glib-2.0/include',0
a________Win3_0	db '../../../../win32-dev/gtk_2_0-2.14/include/glib-2.0/glib',0
		align 2
aNmfield_c	db 'nmfield.c',0
		dd 73000000h, 6F696474h, 100682Eh, 6C670000h, 6F636269h
		dd 6769666Eh, 200682Eh,	74670000h, 73657079h, 300682Eh
		dd 6D6E0000h, 6C656966h, 682E64h, 67000000h, 2E6D656Dh
		dd 30068h, 74736700h, 6E756672h, 682E7363h, 300h, 2050000h
		dd offset __add_blank_field
		dd 4A012903h, 3D834EBDh, 3402108h, 0BB3C0876h, 79900903h
		dd 3122F02h, 0C983BA38h, 4C033A21h, 2F5A6608h, 753D3DD7h
		dd 679F7775h, 23037775h, 39B6608h, 26B4A60h, 1D03122Fh
		dd 21C983BAh, 867033Ah,	0D72F5A66h, 75753D3Dh, 75679F77h
		dd 9B6E0877h, 0AF746A45h, 1040200h, 3A21674Bh, 876036Dh
		dd 4A0A0320h, 0AF9086h,	6010402h, 402004Ah, 36B0601h, 3756610h
		dd 873A9E71h, 0F036783h, 0BB3C9008h, 6610034Dh,	6E037575h
		dd 9031208h, 32F08BAh, 3E5587Ah, 0C878660Dh, 40200AFh
		dd 4A0601h, 6010402h, 6737874Eh, 0C036208h, 0AC94082Eh
		dd 7FA403B1h, 3A21D782h, 0E400DE03h, 2D033EBBh,	3942008h
		dd 393D3C51h, 679E0D03h, 75B36767h, 0ADDAD7BDh,	0C80F03ADh
		dd 3D3C5103h, 20038A39h, 0F7037408h, 3BA087Eh, 3E400D9h
		dd 2E039E10h, 0B09E66h,	6010402h, 8803064Ah, 375667Fh
		dd 3F9E00FBh, 703EAE3Eh, 3C760360h, 6D3E923Eh, 0B0AC7808h
		dd 0F59E1C03h, 3AD8385h, 3120817h, 5908824Fh, 3C750385h
		dd 402009Fh, 6740601h, 0AD75084Bh, 66081603h, 9E1D03ADh
		dd 86E0383h, 6503D82Eh,	0E039008h, 0C9753C08h, 80A03F7h
		dd 3B2083Ch, 290085Bh, 1010005h
_debug_line	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_debug_str	segment	byte public 'DATA' use32
		assume cs:_debug_str
		;org 27B4h
aMethod		db 'method',0           ; DATA XREF: .debug_info:00000AA1o
					; .debug_info:00000C97o ...
aValue		db 'value',0            ; DATA XREF: .debug_info:off_ADDo
					; .debug_info:00000CB5o ...
aField		db 'field',0            ; DATA XREF: .debug_info:00000CDDo
					; .debug_info:00000DECo ...
aCount		db 'count',0            ; DATA XREF: .debug_info:00000B46o
					; .debug_info:00000B90o ...
aFields		db 'fields',0           ; DATA XREF: .debug_info:00000B3Bo
					; .debug_info:00000B85o ...
_debug_str	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_eh_frame	segment	dword public 'DATA' use32
		assume cs:_eh_frame
		;org 27D4h
		dd 14h,	0
		dd 527A01h, 1087C01h, 4040C1Bh,	188h, 20h, 1Ch
		dd offset unk_737-2F2Bh
		dd offset unk_62
		dd 80E4100h, 0E430283h,	0E0A7F30h, 0EC34108h, 0B4404h
		dd 3Ch,	40h
		dd offset unk_737-2EEBh
		dd offset loc_E2+1
		dd 80E4100h, 0E410285h,	4103870Ch, 486100Eh, 83140E41h
		dd 500E4305h, 0E0AC302h, 0EC34114h, 0EC64110h, 0EC7410Ch
		dd 0EC54108h, 0B4204h, 3Ch, 80h
		dd offset unk_737-2E47h
		dd offset loc_E2+1
		dd 80E4100h, 0E410285h,	4103870Ch, 486100Eh, 83140E41h
		dd 500E4305h, 0E0AC302h, 0EC34114h, 0EC64110h, 0EC7410Ch
		dd 0EC54108h, 0B4204h, 18h, 0C0h
		dd offset unk_737-2DA3h
		dd offset loc_40+1
		dd 200E4300h, 40E0A72h,	0B43h, 2Ch, 0DCh
		dd offset unk_737-2D7Bh
		dd offset loc_65
		dd 80E4100h, 0E410286h,	4303830Ch, 5802300Eh, 410C0E0Ah
		dd 41080EC3h, 41040EC6h, 0Bh, 18h, 10Ch
		dd offset unk_737-2D43h
		dd offset loc_73+3
		dd 400E4300h, 40E0A73h,	0B42h, 2Ch, 128h
		dd offset unk_737-2CE7h
		dd offset loc_5D+4
		dd 80E4100h, 0E410286h,	4303830Ch, 5402300Eh, 410C0E0Ah
		dd 41080EC3h, 41040EC6h, 0Bh, 3Ch, 158h
		dd offset unk_737-2CB3h
		dd offset loc_14F
		dd 80E4100h, 0E410285h,	4103870Ch, 486100Eh, 83140E41h
		dd 500E4305h, 0A010803h, 0C341140Eh, 0C641100Eh, 0C7410C0Eh
		dd 0C541080Eh, 0B41040Eh, 34h, 198h
		dd offset unk_737-2BA3h
		dd offset loc_7F+1
		dd 80E4100h, 0E410287h,	4103860Ch, 483100Eh, 2300E43h
		dd 100E0A71h, 0C0EC341h, 80EC641h, 40EC741h, 0B41h, 3Ch
		dd 1D0h
		dd offset unk_737-2B5Bh
		dd offset loc_1B3
		dd 80E4100h, 0E410285h,	4103870Ch, 486100Eh, 83140E41h
		dd 400E4305h, 0A013403h, 0C341140Eh, 0C641100Eh, 0C7410C0Eh
		dd 0C541080Eh, 0B41040Eh
_eh_frame	ends

; ===========================================================================

; Segment type:	Externs
; UNDEF
		extrn ___stack_chk_guard:near ;	DATA XREF: __add_blank_field+4r
					; __add_blank_field+38r ...
		extrn _g_realloc:near	; CODE XREF: __add_blank_field:loc_2Cp
		extrn _g_malloc0:near	; CODE XREF: __add_blank_field+4Fp
					; _nm_copy_field_array+42p ...
		extrn ___stack_chk_fail:near ; CODE XREF: __add_blank_field:loc_5Dp
					; _nm_field_add_number:loc_142p ...
		extrn _g_strdup:near	; CODE XREF: _nm_field_add_number+79p
					; _nm_field_add_pointer+79p ...
		extrn _g_free:near	; CODE XREF: _nm_free_fields+30p
					; _nm_free_fields+43p ...
		extrn _g_ascii_strcasecmp:near ; CODE XREF: _nm_locate_field+38p
; int printf(const char	*, ...)
		extrn _printf:near	; CODE XREF: _nm_print_fields+75p
					; _nm_print_fields+ADp	...
		extrn _g_strdup_printf:near ; CODE XREF: _nm_print_fields+186p
					; _nm_print_fields:loc_726p


		end
