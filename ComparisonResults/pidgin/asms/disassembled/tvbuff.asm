;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2015 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-3677-7074-51			    |
; |		Michalis Polychronakis,	Stony Brook University		    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	14A6A4A5DB8A6C331D173AC6DFDE1042
; Input	CRC32 :	C7A3441B

; File Name   :	d:\pidgin-o\tvbuff.o
; Format      :	COFF (X386MAGIC)

		.686p
		.mmx
		.model flat
.intel_syntax noprefix

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	dword public 'CODE' use32
		assume cs:_text
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _gg_tvbuff_new
_gg_tvbuff_new	proc near		; DATA XREF: .debug_info:00000F84o
					; .debug_info:00001365o ...

var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_20		= dword	ptr -20h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 2Ch
		mov	esi, [esp+3Ch+arg_0]
		mov	ebp, [esp+3Ch+arg_4]
		mov	eax, dword ptr ds:___stack_chk_guard
		mov	[esp+3Ch+var_20], eax
		xor	eax, eax
		mov	[esp+3Ch+var_3C], 10h ;	size_t
		call	_malloc

loc_26:					; DATA XREF: .debug_info:000013A2o
		mov	ebx, eax

loc_28:					; DATA XREF: .debug_loc:off_2712o
		test	eax, eax
		jz	short loc_4E
		mov	ecx, 10h
		xor	eax, eax

loc_33:					; DATA XREF: .debug_loc:00002716o
		mov	edi, ebx

loc_35:					; DATA XREF: .eh_frame:000039FCo
		rep stosb
		test	esi, esi
		jz	short loc_64

loc_3B:					; CODE XREF: _gg_tvbuff_new:loc_66j
		mov	[ebx], esi

loc_3D:					; DATA XREF: .eh_frame:00003A18o
		mov	[ebx+4], ebp
		mov	dword ptr [ebx+8], 0

loc_47:					; DATA XREF: .eh_frame:00003D38o
		mov	dword ptr [ebx+0Ch], 1

loc_4E:					; CODE XREF: _gg_tvbuff_new+2Aj
					; _gg_tvbuff_new+83j
		mov	eax, ebx
		mov	edx, [esp+3Ch+var_20]

loc_54:					; DATA XREF: .debug_loc:00002E48o
		xor	edx, dword ptr ds:___stack_chk_guard
		jnz	short loc_85
		add	esp, 2Ch

loc_5F:					; DATA XREF: .eh_frame:00003D1Co
		pop	ebx
		pop	esi
		pop	edi

loc_62:					; DATA XREF: .eh_frame:00003A58o
					; .eh_frame:00003A7Co
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_64:					; CODE XREF: _gg_tvbuff_new+39j
		test	ebp, ebp

loc_66:					; DATA XREF: .eh_frame:00003CE4o
		jz	short loc_3B

loc_68:					; DATA XREF: .eh_frame:00003CACo
		mov	[esp+3Ch+var_38], offset aGg_tvbuff_newI ; "// gg_tvbuff_new() invalid arguments\n"

loc_70:					; DATA XREF: .eh_frame:00003A34o
		mov	[esp+3Ch+var_3C], 80h ;	'Ä'

loc_77:					; DATA XREF: .debug_info:0000125Co
					; .debug_info:0000133Co
		call	_gg_debug

loc_7C:					; DATA XREF: .debug_info:000013B6o
					; .eh_frame:00003AC4o ...
		mov	dword ptr [ebx+0Ch], 0
		jmp	short loc_4E
; ---------------------------------------------------------------------------

loc_85:					; CODE XREF: _gg_tvbuff_new+5Aj
					; DATA XREF: .debug_info:000010E1o
		call	___stack_chk_fail
_gg_tvbuff_new	endp

; ---------------------------------------------------------------------------
unk_8A		db  66h	; f		; DATA XREF: .debug_info:00001369o
					; .debug_info:000013D5o ...
unk_8B		db  90h	; ê		; DATA XREF: .eh_frame:00003AA0o

; =============== S U B	R O U T	I N E =======================================


		public _gg_tvbuff_is_valid
_gg_tvbuff_is_valid proc near		; DATA XREF: .debug_info:000013E3o
					; .debug_loc:off_275Co	...

var_10		= dword	ptr -10h
arg_0		= dword	ptr  4

		sub	esp, 1Ch

loc_8F:					; DATA XREF: .debug_loc:00002760o
					; .eh_frame:00003AE8o
		mov	eax, [esp+1Ch+arg_0]
		mov	edx, dword ptr ds:___stack_chk_guard
		mov	[esp+1Ch+var_10], edx
		xor	edx, edx
		test	eax, eax

loc_A1:					; DATA XREF: .eh_frame:00003BECo
		jz	short loc_B8
		mov	eax, [eax+0Ch]

loc_A6:					; CODE XREF: _gg_tvbuff_is_valid+2Ej
		mov	edx, [esp+1Ch+var_10]

loc_AA:					; DATA XREF: .debug_info:off_1078o
					; .debug_info:000011D1o
		xor	edx, dword ptr ds:___stack_chk_guard
		jnz	short loc_BC
		add	esp, 1Ch
		retn
; ---------------------------------------------------------------------------
		align 4

loc_B8:					; CODE XREF: _gg_tvbuff_is_valid:loc_A1j
					; DATA XREF: .eh_frame:00003BACo
		xor	eax, eax
		jmp	short loc_A6
; ---------------------------------------------------------------------------

loc_BC:					; CODE XREF: _gg_tvbuff_is_valid+24j
		call	___stack_chk_fail
_gg_tvbuff_is_valid endp

; ---------------------------------------------------------------------------
unk_C1		db  8Dh	; ç		; DATA XREF: .debug_info:000013E7o
					; .debug_info:000013FDo
		db  76h	; v
		db    0

; =============== S U B	R O U T	I N E =======================================


		public _gg_tvbuff_get_remaining
_gg_tvbuff_get_remaining proc near	; DATA XREF: .debug_info:0000140Bo
					; .debug_loc:off_2794o

var_10		= dword	ptr -10h
arg_0		= dword	ptr  4

		sub	esp, 1Ch

loc_C7:					; DATA XREF: .debug_loc:00002798o
		mov	edx, [esp+1Ch+arg_0]
		mov	eax, dword ptr ds:___stack_chk_guard
		mov	[esp+1Ch+var_10], eax
		xor	eax, eax

loc_D6:					; DATA XREF: .debug_info:00001429o
					; .debug_loc:off_27CCo
		test	edx, edx
		jz	short loc_F8

loc_DA:					; DATA XREF: .debug_info:0000142Do
		mov	eax, [edx+0Ch]
		test	eax, eax

loc_DF:					; DATA XREF: .eh_frame:00003C6Co
		jz	short loc_F8
		mov	eax, [edx+4]
		sub	eax, [edx+8]

loc_E7:					; CODE XREF: _gg_tvbuff_get_remaining:loc_FAj
		mov	edx, [esp+1Ch+var_10]
		xor	edx, dword ptr ds:___stack_chk_guard

loc_F1:					; DATA XREF: .debug_loc:000027D0o
		jnz	short loc_FC
		add	esp, 1Ch
		retn
; ---------------------------------------------------------------------------
		align 4

loc_F8:					; CODE XREF: _gg_tvbuff_get_remaining+14j
					; _gg_tvbuff_get_remaining:loc_DFj
		xor	eax, eax

loc_FA:					; DATA XREF: .eh_frame:00003C2Co
		jmp	short loc_E7
; ---------------------------------------------------------------------------

loc_FC:					; CODE XREF: _gg_tvbuff_get_remaining:loc_F1j
		call	___stack_chk_fail
_gg_tvbuff_get_remaining endp

; ---------------------------------------------------------------------------
unk_101		db  8Dh	; ç		; DATA XREF: .debug_info:off_140Fo
					; .debug_info:00001442o
		db  76h	; v
		db    0

; =============== S U B	R O U T	I N E =======================================


		public _gg_tvbuff_have_remaining
_gg_tvbuff_have_remaining proc near	; CODE XREF: _gg_tvbuff_match+47p
					; _gg_tvbuff_read_uint8+3Fp ...

var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_10		= dword	ptr -10h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	ebx

loc_105:				; DATA XREF: .debug_loc:00002806o
		sub	esp, 28h
		mov	ebx, [esp+2Ch+arg_0]
		mov	edx, [esp+2Ch+arg_4]
		mov	eax, dword ptr ds:___stack_chk_guard
		mov	[esp+2Ch+var_10], eax
		xor	eax, eax

loc_11B:				; DATA XREF: .debug_info:00001476o
					; .debug_loc:off_2852o
		test	ebx, ebx
		jz	short loc_170

loc_11F:				; DATA XREF: .debug_info:0000147Ao
		mov	ecx, [ebx+0Ch]
		test	ecx, ecx
		jz	short loc_170

loc_126:				; DATA XREF: .debug_info:00001493o
					; .debug_loc:off_287Co
		mov	eax, [ebx+4]
		sub	eax, [ebx+8]

loc_12C:				; DATA XREF: .debug_info:00001497o
		cmp	edx, eax

loc_12E:				; DATA XREF: .debug_line:000035FEo
		jbe	short loc_168

loc_130:				; DATA XREF: .debug_info:000014B0o
		mov	[esp+2Ch+var_20], edx
		mov	[esp+2Ch+var_24], eax
		mov	[esp+2Ch+var_28], offset aGg_tvbuff_have ; "// gg_tvbuff_have_remaining() failed (%"...
		mov	[esp+2Ch+var_2C], 40h ;	'@'

loc_147:				; DATA XREF: .eh_frame:00003B3Co
		call	_gg_debug

loc_14C:				; DATA XREF: .debug_info:000014C9o
		mov	dword ptr [ebx+0Ch], 0
		xor	eax, eax

loc_155:				; CODE XREF: _gg_tvbuff_have_remaining+69j
					; _gg_tvbuff_have_remaining+6Ej
					; DATA XREF: ...
		mov	edx, [esp+2Ch+var_10]
		xor	edx, dword ptr ds:___stack_chk_guard
		jnz	short loc_174
		add	esp, 28h
		pop	ebx

locret_165:				; DATA XREF: .debug_loc:00002856o
		retn
; ---------------------------------------------------------------------------
		align 4

loc_168:				; CODE XREF: _gg_tvbuff_have_remaining:loc_12Ej
		mov	eax, 1
		jmp	short loc_155
; ---------------------------------------------------------------------------
		align 10h

loc_170:				; CODE XREF: _gg_tvbuff_have_remaining+19j
					; _gg_tvbuff_have_remaining+20j
		xor	eax, eax
		jmp	short loc_155
; ---------------------------------------------------------------------------

loc_174:				; CODE XREF: _gg_tvbuff_have_remaining+5Bj
		call	___stack_chk_fail
_gg_tvbuff_have_remaining endp

; ---------------------------------------------------------------------------
unk_179		db  8Dh	; ç		; DATA XREF: .debug_info:00001454o
					; .debug_info:000014EDo
		db  76h	; v
		db    0

; =============== S U B	R O U T	I N E =======================================


		public _gg_tvbuff_skip
_gg_tvbuff_skip	proc near		; DATA XREF: .debug_info:00001008o
					; .debug_info:00001014o ...

var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_10		= dword	ptr -10h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	ebx

loc_17D:				; DATA XREF: .debug_loc:0000289Eo
		sub	esp, 28h
		mov	ebx, [esp+2Ch+arg_0]
		mov	eax, [esp+2Ch+arg_4]
		mov	edx, dword ptr ds:___stack_chk_guard
		mov	[esp+2Ch+var_10], edx
		xor	edx, edx

loc_194:				; DATA XREF: .debug_info:0000153Fo
					; .debug_loc:off_28EAo
		test	ebx, ebx
		jz	short loc_1AA

loc_198:				; DATA XREF: .debug_info:00001543o
		mov	edx, [ebx+0Ch]
		test	edx, edx
		jz	short loc_1AA
		add	eax, [ebx+8]
		cmp	eax, [ebx+4]
		ja	short loc_1BC
		mov	[ebx+8], eax

loc_1AA:				; CODE XREF: _gg_tvbuff_skip+1Aj
					; _gg_tvbuff_skip+21j ...
		mov	eax, [esp+2Ch+var_10]
		xor	eax, dword ptr ds:___stack_chk_guard
		jnz	short loc_1D9
		add	esp, 28h
		pop	ebx

locret_1BA:				; DATA XREF: .debug_loc:000028EEo
		retn
; ---------------------------------------------------------------------------
		align 4

loc_1BC:				; CODE XREF: _gg_tvbuff_skip+29j
					; DATA XREF: .debug_info:00001118o ...
		mov	[esp+2Ch+var_28], offset aGg_tvbuff_skip ; "// gg_tvbuff_skip()	failed\n"
		mov	[esp+2Ch+var_2C], 40h ;	'@'

loc_1CB:				; DATA XREF: .debug_info:000012D4o
		call	_gg_debug

loc_1D0:				; DATA XREF: .debug_info:00001558o
		mov	dword ptr [ebx+0Ch], 0
		jmp	short loc_1AA
; ---------------------------------------------------------------------------

loc_1D9:				; CODE XREF: _gg_tvbuff_skip+38j
					; DATA XREF: .debug_info:000010F1o
		call	___stack_chk_fail
_gg_tvbuff_skip	endp

; ---------------------------------------------------------------------------
unk_1DE		db  66h	; f		; DATA XREF: .debug_info:0000150Eo
					; .debug_info:00001577o
		db  90h	; ê

; =============== S U B	R O U T	I N E =======================================


		public _gg_tvbuff_rewind
_gg_tvbuff_rewind proc near		; DATA XREF: .debug_info:00001596o
					; .debug_loc:off_2914o

var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_10		= dword	ptr -10h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	ebx

loc_1E1:				; DATA XREF: .debug_loc:00002918o
		sub	esp, 28h
		mov	ebx, [esp+2Ch+arg_0]
		mov	eax, [esp+2Ch+arg_4]
		mov	edx, dword ptr ds:___stack_chk_guard
		mov	[esp+2Ch+var_10], edx
		xor	edx, edx

loc_1F8:				; DATA XREF: .debug_info:000015CBo
					; .debug_loc:off_2964o
		test	ebx, ebx
		jz	short loc_20F

loc_1FC:				; DATA XREF: .debug_info:000015CFo
		mov	ecx, [ebx+0Ch]
		test	ecx, ecx
		jz	short loc_20F
		mov	edx, [ebx+8]
		cmp	edx, eax
		jb	short loc_220
		sub	edx, eax
		mov	[ebx+8], edx

loc_20F:				; CODE XREF: _gg_tvbuff_rewind+1Aj
					; _gg_tvbuff_rewind+21j ...
		mov	eax, [esp+2Ch+var_10]
		xor	eax, dword ptr ds:___stack_chk_guard
		jnz	short loc_23D
		add	esp, 28h
		pop	ebx

locret_21F:				; DATA XREF: .debug_loc:00002968o
		retn
; ---------------------------------------------------------------------------

loc_220:				; CODE XREF: _gg_tvbuff_rewind+28j
					; DATA XREF: .debug_info:000011EDo
		mov	[esp+2Ch+var_28], offset aGg_tvbuff_rewi ; "// gg_tvbuff_rewind() failed\n"
		mov	[esp+2Ch+var_2C], 40h ;	'@'
		call	_gg_debug

loc_234:				; DATA XREF: .debug_info:000015E4o
		mov	dword ptr [ebx+0Ch], 0
		jmp	short loc_20F
; ---------------------------------------------------------------------------

loc_23D:				; CODE XREF: _gg_tvbuff_rewind+39j
		call	___stack_chk_fail
_gg_tvbuff_rewind endp

; ---------------------------------------------------------------------------
unk_242		db  66h	; f		; DATA XREF: .debug_info:0000159Ao
					; .debug_info:00001603o
		db  90h	; ê

; =============== S U B	R O U T	I N E =======================================


		public _gg_tvbuff_match
_gg_tvbuff_match proc near		; DATA XREF: .debug_info:00001625o
					; .debug_loc:off_298Eo

var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_20		= byte ptr -20h
var_10		= dword	ptr -10h
arg_0		= dword	ptr  4
arg_4		= byte ptr  8

		push	ebx

loc_245:				; DATA XREF: .debug_loc:00002992o
		sub	esp, 38h
		mov	ebx, [esp+3Ch+arg_0]
		mov	dl, [esp+3Ch+arg_4]
		mov	eax, dword ptr ds:___stack_chk_guard
		mov	[esp+3Ch+var_10], eax
		xor	eax, eax

loc_25B:				; DATA XREF: .debug_info:00001659o
					; .debug_loc:off_29E0o
		test	ebx, ebx
		jz	short loc_266

loc_25F:				; DATA XREF: .debug_info:0000165Do
		mov	eax, [ebx+0Ch]
		test	eax, eax
		jnz	short loc_27C

loc_266:				; CODE XREF: _gg_tvbuff_match+19j
					; _gg_tvbuff_match+60j	...
		xor	eax, eax

loc_268:				; CODE XREF: _gg_tvbuff_match+6Bj
		mov	edx, [esp+3Ch+var_10]
		xor	edx, dword ptr ds:___stack_chk_guard
		jnz	short loc_2CA
		add	esp, 38h
		pop	ebx

locret_278:				; DATA XREF: .debug_loc:000029E4o
		retn
; ---------------------------------------------------------------------------
		align 4

loc_27C:				; CODE XREF: _gg_tvbuff_match+20j
		mov	[esp+3Ch+var_38], 1
		mov	[esp+3Ch+var_3C], ebx
		mov	[esp+3Ch+var_20], dl
		call	_gg_tvbuff_have_remaining

loc_290:				; DATA XREF: .debug_info:00001672o
		test	eax, eax
		movzx	edx, [esp+3Ch+var_20]
		jz	short loc_2B4
		mov	eax, [ebx+8]
		mov	ecx, [ebx]

loc_29E:				; DATA XREF: .debug_info:00001C1Co
					; .debug_info:00001D44o ...
		movsx	ecx, byte ptr [ecx+eax]
		cmp	ecx, edx
		jnz	short loc_266
		inc	eax
		mov	[ebx+8], eax
		mov	eax, 1
		jmp	short loc_268
; ---------------------------------------------------------------------------
		align 4

loc_2B4:				; CODE XREF: _gg_tvbuff_match+53j
		mov	[esp+3Ch+var_38], offset aGg_tvbuff_matc ; "// gg_tvbuff_match() failed\n"
		mov	[esp+3Ch+var_3C], 40h ;	'@'
		call	_gg_debug

loc_2C8:				; DATA XREF: .debug_info:0000168Do
		jmp	short loc_266
; ---------------------------------------------------------------------------

loc_2CA:				; CODE XREF: _gg_tvbuff_match+2Ej
					; DATA XREF: .debug_info:off_11E1o ...
		call	___stack_chk_fail
_gg_tvbuff_match endp

; ---------------------------------------------------------------------------
unk_2CF		db  90h	; ê		; DATA XREF: .debug_info:00001629o
					; .debug_info:000016ACo

; =============== S U B	R O U T	I N E =======================================


		public _gg_tvbuff_read_uint8
_gg_tvbuff_read_uint8 proc near		; CODE XREF: _gg_tvbuff_read_packed_uint+44p
					; _gg_tvbuff_read_uin:loc_8DDp	...

var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_10		= dword	ptr -10h
arg_0		= dword	ptr  4

		push	ebx

loc_2D1:				; DATA XREF: .debug_loc:00002A0Eo
		sub	esp, 28h

loc_2D4:				; DATA XREF: .debug_info:000011E8o
		mov	ebx, [esp+2Ch+arg_0]
		mov	eax, dword ptr ds:___stack_chk_guard
		mov	[esp+2Ch+var_10], eax
		xor	eax, eax

loc_2E3:				; DATA XREF: .debug_info:000016D8o
					; .debug_loc:off_2A5Ao
		test	ebx, ebx
		jz	short loc_2EE

loc_2E7:				; DATA XREF: .debug_info:000016DCo
		mov	eax, [ebx+0Ch]
		test	eax, eax
		jnz	short loc_304

loc_2EE:				; CODE XREF: _gg_tvbuff_read_uint8+15j
		xor	eax, eax

loc_2F0:				; CODE XREF: _gg_tvbuff_read_uint8+54j
					; _gg_tvbuff_read_uint8+75j
		mov	edx, [esp+2Ch+var_10]
		xor	edx, dword ptr ds:___stack_chk_guard
		jnz	short loc_347
		add	esp, 28h
		pop	ebx

locret_300:				; DATA XREF: .debug_loc:00002A5Eo
		retn
; ---------------------------------------------------------------------------
		align 4

loc_304:				; CODE XREF: _gg_tvbuff_read_uint8+1Cj
					; DATA XREF: .debug_info:0000144Co ...
		mov	[esp+2Ch+var_28], 1
		mov	[esp+2Ch+var_2C], ebx
		call	_gg_tvbuff_have_remaining

loc_314:				; DATA XREF: .debug_info:00001729o
		test	eax, eax
		jz	short loc_328
		mov	edx, [ebx+8]
		mov	eax, [ebx]
		mov	al, [eax+edx]
		inc	edx
		mov	[ebx+8], edx
		jmp	short loc_2F0
; ---------------------------------------------------------------------------
		align 4

loc_328:				; CODE XREF: _gg_tvbuff_read_uint8+46j
					; DATA XREF: .debug_info:000016F5o ...
		mov	eax, [ebx+8]
		mov	[esp+2Ch+var_24], eax
		mov	[esp+2Ch+var_28], offset aGg_tvbuff_read ; "// gg_tvbuff_read_uint8() failed at	%Iu"...
		mov	[esp+2Ch+var_2C], 40h ;	'@'
		call	_gg_debug

loc_343:				; DATA XREF: .debug_info:0000170Do
		xor	eax, eax
		jmp	short loc_2F0
; ---------------------------------------------------------------------------

loc_347:				; CODE XREF: _gg_tvbuff_read_uint8+2Aj
					; DATA XREF: .debug_info:000016F9o ...
		call	___stack_chk_fail
_gg_tvbuff_read_uint8 endp


; =============== S U B	R O U T	I N E =======================================


		public _gg_tvbuff_read_uint32
_gg_tvbuff_read_uint32 proc near	; CODE XREF: _gg_tvbuff_expected_uint32+1Fp
					; DATA XREF: .debug_info:000016BEo ...

var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_10		= dword	ptr -10h
arg_0		= dword	ptr  4

		push	ebx

loc_34D:				; DATA XREF: .debug_loc:00002A9Bo
					; .debug_info:00001994o ...
		sub	esp, 28h
		mov	ebx, [esp+2Ch+arg_0]
		mov	eax, dword ptr ds:___stack_chk_guard
		mov	[esp+2Ch+var_10], eax
		xor	eax, eax

loc_35F:				; DATA XREF: .debug_info:0000179Fo
					; .debug_loc:off_2B1Eo
		test	ebx, ebx
		jz	short loc_36A

loc_363:				; DATA XREF: .debug_info:000017A3o
		mov	eax, [ebx+0Ch]
		test	eax, eax
		jnz	short loc_380

loc_36A:				; CODE XREF: _gg_tvbuff_read_uint32+15j
					; _gg_tvbuff_read_uint32:loc_3D4j
		xor	eax, eax
		mov	edx, [esp+2Ch+var_10]
		xor	edx, dword ptr ds:___stack_chk_guard
		jnz	short loc_3D6
		add	esp, 28h
		pop	ebx

locret_37C:				; DATA XREF: .debug_loc:00002B22o
		retn
; ---------------------------------------------------------------------------
		db 8Dh
; ---------------------------------------------------------------------------

loc_37E:				; DATA XREF: .debug_info:00001C3Eo
					; .debug_info:00001D66o ...
		jbe	short $+2

loc_380:				; CODE XREF: _gg_tvbuff_read_uint32+1Cj
					; _gg_tvbuff_read_uint32:loc_37Ej
					; DATA XREF: ...
		mov	[esp+2Ch+var_28], 4
		mov	[esp+2Ch+var_2C], ebx
		call	_gg_tvbuff_have_remaining

loc_390:				; DATA XREF: .debug_info:000017B8o
		test	eax, eax
		mov	eax, [ebx+8]
		jz	short loc_3BC
		mov	edx, [ebx]
		mov	edx, [edx+eax]

loc_39C:				; DATA XREF: .debug_loc:off_2B0Bo
		add	eax, 4
		mov	[ebx+8], eax
		mov	eax, [esp+2Ch+var_10]
		xor	eax, dword ptr ds:___stack_chk_guard
		jnz	short loc_3D6
		mov	[esp+2Ch+arg_0], edx

loc_3B2:				; DATA XREF: .debug_info:0000192Co
		add	esp, 28h
		pop	ebx

loc_3B6:				; DATA XREF: .debug_loc:00002B0Fo
		jmp	_gg_fix32
; ---------------------------------------------------------------------------
unk_3BB		db  90h	; ê		; DATA XREF: .debug_info:000017D3o
; ---------------------------------------------------------------------------

loc_3BC:				; CODE XREF: _gg_tvbuff_read_uint32+49j
		mov	[esp+2Ch+var_24], eax
		mov	[esp+2Ch+var_28], offset aGg_tvbuff_re_0 ; "// gg_tvbuff_read_uint32() failed at %I"...
		mov	[esp+2Ch+var_2C], 40h ;	'@'
		call	_gg_debug

loc_3D4:				; DATA XREF: .debug_info:000017DDo
		jmp	short loc_36A
; ---------------------------------------------------------------------------

loc_3D6:				; CODE XREF: _gg_tvbuff_read_uint32+2Aj
					; _gg_tvbuff_read_uint32+60j
		call	___stack_chk_fail
_gg_tvbuff_read_uint32 endp

; ---------------------------------------------------------------------------
unk_3DB		db  90h	; ê		; DATA XREF: .debug_info:00001770o
					; .debug_info:000017FCo ...

; =============== S U B	R O U T	I N E =======================================


		public _gg_tvbuff_read_uint64
_gg_tvbuff_read_uint64 proc near	; DATA XREF: .debug_info:00001825o
					; .debug_loc:off_2B5Fo

var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_10		= dword	ptr -10h
arg_0		= dword	ptr  4

		push	ebx

loc_3DD:				; DATA XREF: .debug_loc:00002B63o
		sub	esp, 28h
		mov	ebx, [esp+2Ch+arg_0]
		mov	eax, dword ptr ds:___stack_chk_guard
		mov	[esp+2Ch+var_10], eax

loc_3ED:				; DATA XREF: .debug_info:off_12BCo
					; .debug_info:00001C6Fo ...
		xor	eax, eax

loc_3EF:				; DATA XREF: .debug_info:0000185Ao
					; .debug_loc:off_2BC7o
		test	ebx, ebx
		jz	short loc_3FA

loc_3F3:				; DATA XREF: .debug_info:0000185Eo
		mov	eax, [ebx+0Ch]
		test	eax, eax
		jnz	short loc_410

loc_3FA:				; CODE XREF: _gg_tvbuff_read_uint64+15j
		xor	eax, eax
		xor	edx, edx

loc_3FE:				; CODE XREF: _gg_tvbuff_read_uint64:loc_442j
					; _gg_tvbuff_read_uint64+87j
		mov	ecx, [esp+2Ch+var_10]
		xor	ecx, dword ptr ds:___stack_chk_guard
		jnz	short loc_465
		add	esp, 28h
		pop	ebx

locret_40E:				; DATA XREF: .debug_loc:00002BCBo
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_410:				; CODE XREF: _gg_tvbuff_read_uint64+1Cj
					; DATA XREF: .debug_info:00001A5Co
		mov	[esp+2Ch+var_28], 8
		mov	[esp+2Ch+var_2C], ebx
		call	_gg_tvbuff_have_remaining

loc_420:				; DATA XREF: .debug_info:00001874o
		test	eax, eax
		jz	short loc_444
		mov	ecx, [ebx+8]
		mov	eax, [ebx]
		mov	edx, [eax+ecx+4]
		mov	eax, [eax+ecx]

loc_430:				; DATA XREF: .debug_loc:off_2BAFo
		add	ecx, 8
		mov	[ebx+8], ecx
		mov	[esp+2Ch+var_2C], eax
		mov	[esp+2Ch+var_28], edx

loc_43D:				; DATA XREF: .debug_loc:00002BB3o
		call	_gg_fix64

loc_442:				; DATA XREF: .debug_info:0000188Fo
		jmp	short loc_3FE
; ---------------------------------------------------------------------------

loc_444:				; CODE XREF: _gg_tvbuff_read_uint64+46j
		mov	eax, [ebx+8]
		mov	[esp+2Ch+var_24], eax
		mov	[esp+2Ch+var_28], offset aGg_tvbuff_re_1 ; "// gg_tvbuff_read_uint64() failed at %I"...
		mov	[esp+2Ch+var_2C], 40h ;	'@'
		call	_gg_debug

loc_45F:				; DATA XREF: .debug_info:00001898o
		xor	eax, eax
		xor	edx, edx
		jmp	short loc_3FE
; ---------------------------------------------------------------------------

loc_465:				; CODE XREF: _gg_tvbuff_read_uint64+2Cj
		call	___stack_chk_fail
_gg_tvbuff_read_uint64 endp

; ---------------------------------------------------------------------------
unk_46A		db  66h	; f		; DATA XREF: .debug_info:00001829o
					; .debug_info:000018B7o
		db  90h	; ê

; =============== S U B	R O U T	I N E =======================================


		public _gg_tvbuff_read_packed_uint
_gg_tvbuff_read_packed_uint proc near	; CODE XREF: _gg_tvbuff_read_str+2Bp
					; _gg_tvbuff_read_str_dup+46p ...

var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_20		= dword	ptr -20h
arg_0		= dword	ptr  4

		push	ebp

loc_46D:				; DATA XREF: .debug_loc:00002BF5o
		push	edi
		push	esi
		push	ebx
		sub	esp, 3Ch
		mov	ebx, [esp+4Ch+arg_0]
		mov	eax, dword ptr ds:___stack_chk_guard
		mov	[esp+4Ch+var_20], eax
		xor	eax, eax

loc_482:				; DATA XREF: .debug_info:000018F4o
					; .debug_loc:off_2C8Bo
		test	ebx, ebx
		jz	loc_53C

loc_48A:				; DATA XREF: .debug_info:000018F8o
		mov	eax, [ebx+0Ch]
		test	eax, eax
		jz	loc_53C
		xor	ebp, ebp
		nop

loc_498:				; CODE XREF: _gg_tvbuff_read_packed_uint+4Bj
					; DATA XREF: .debug_info:00001912o ...
		mov	[esp+4Ch+var_48], 1
		mov	[esp+4Ch+var_4C], ebx
		call	_gg_tvbuff_have_remaining

loc_4A8:				; DATA XREF: .debug_info:00001975o
		test	eax, eax
		jz	short loc_4B9
		inc	ebp
		mov	[esp+4Ch+var_4C], ebx
		call	_gg_tvbuff_read_uint8

loc_4B5:				; DATA XREF: .debug_info:00001990o
		test	al, al
		js	short loc_498

loc_4B9:				; CODE XREF: _gg_tvbuff_read_packed_uint+3Ej
		mov	eax, [ebx+0Ch]

loc_4BC:				; DATA XREF: .debug_info:off_13BEo
		test	eax, eax
		jz	loc_594
		cmp	ebp, 9
		jg	short loc_544

loc_4C9:				; DATA XREF: .debug_loc:off_2CD8o
					; .debug_loc:off_2D34o
		test	ebp, ebp
		jle	short loc_53C
		mov	edx, [ebx]
		mov	eax, [ebx+8]

loc_4D2:				; DATA XREF: .debug_ranges:off_35C0o
		lea	ecx, [edx+eax-1]
		add	edx, eax
		mov	[esp+4Ch+var_34], edx
		sub	[esp+4Ch+var_34], ebp

loc_4E0:				; DATA XREF: .debug_ranges:00003584o
					; .debug_ranges:000035A4o ...
		xor	eax, eax
		xor	edx, edx
		mov	ebp, ecx

loc_4E6:				; DATA XREF: .debug_loc:00002D4Co
		mov	[esp+4Ch+var_30], ebx
		mov	ecx, eax
		mov	ebx, edx

loc_4EE:				; DATA XREF: .debug_info:000013F0o
					; .debug_loc:00002C8Fo
		jmp	short loc_50F
; ---------------------------------------------------------------------------

loc_4F0:				; CODE XREF: _gg_tvbuff_read_packed_uint+B3j
					; DATA XREF: .debug_loc:00002CDCo ...
		mov	ecx, esi
		mov	ebx, edi
		shld	ebx, ecx, 7
		shl	ecx, 7

loc_4FB:				; DATA XREF: .debug_loc:00002CF0o
		dec	ebp
		mov	eax, ecx
		mov	edx, ebx
		shrd	eax, edx, 7
		shr	edx, 7
		xor	edx, edi
		xor	eax, esi
		or	edx, eax
		jnz	short loc_56C

loc_50F:				; CODE XREF: _gg_tvbuff_read_packed_uint:loc_4EEj
					; DATA XREF: .debug_loc:00002D75o
		mov	al, [ebp+0]
		and	eax, 7Fh
		mov	esi, ecx
		or	esi, eax
		mov	edi, ebx

loc_51B:				; DATA XREF: .debug_ranges:000035CCo
		cmp	ebp, [esp+4Ch+var_34]
		jnz	short loc_4F0
		lea	esi, [esi+0]

loc_524:				; CODE XREF: _gg_tvbuff_read_packed_uint+D4j
					; _gg_tvbuff_read_packed_uint+FBj ...
		mov	eax, esi
		mov	edx, edi
		mov	ecx, [esp+4Ch+var_20]
		xor	ecx, dword ptr ds:___stack_chk_guard

loc_532:				; DATA XREF: .debug_info:00001418o
		jnz	short loc_5B1
		add	esp, 3Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_53C:				; CODE XREF: _gg_tvbuff_read_packed_uint+18j
					; _gg_tvbuff_read_packed_uint+23j ...
		xor	esi, esi
		xor	edi, edi
		jmp	short loc_524
; ---------------------------------------------------------------------------
		align 4

loc_544:				; CODE XREF: _gg_tvbuff_read_packed_uint+5Bj
					; DATA XREF: .debug_ranges:00003590o ...
		mov	[esp+4Ch+var_44], ebp
		mov	[esp+4Ch+var_48], offset aGg_tvbuff_re_2 ; "// gg_tvbuff_read_packed_uint() packed "...
		mov	[esp+4Ch+var_4C], 40h ;	'@'
		call	_gg_debug

loc_55C:				; DATA XREF: .debug_info:000019A5o
		mov	dword ptr [ebx+0Ch], 0
		xor	esi, esi
		xor	edi, edi
		jmp	short loc_524
; ---------------------------------------------------------------------------
		align 4

loc_56C:				; CODE XREF: _gg_tvbuff_read_packed_uint+A1j
		mov	ebx, [esp+4Ch+var_30]

loc_570:				; DATA XREF: .debug_ranges:000035D0o
					; .debug_info:00001480o
		mov	[esp+4Ch+var_48], offset aGg_tvbuff_re_3 ; "// gg_tvbuff_read_packed_uint() overflo"...
		mov	[esp+4Ch+var_4C], 40h ;	'@'
		call	_gg_debug

loc_584:				; DATA XREF: .debug_info:00001959o
		mov	dword ptr [ebx+0Ch], 0
		xor	esi, esi
		xor	edi, edi
		jmp	short loc_524
; ---------------------------------------------------------------------------
		align 4

loc_594:				; CODE XREF: _gg_tvbuff_read_packed_uint+52j
					; DATA XREF: .debug_ranges:000035D4o
		mov	[esp+4Ch+var_48], offset aGg_tvbuff_re_4 ; "// gg_tvbuff_read_packed_uint() failed\"...
		mov	[esp+4Ch+var_4C], 40h ;	'@'
		call	_gg_debug

loc_5A8:				; DATA XREF: .debug_info:000019CBo
		xor	esi, esi
		xor	edi, edi
		jmp	loc_524
; ---------------------------------------------------------------------------

loc_5B1:				; CODE XREF: _gg_tvbuff_read_packed_uint:loc_532j
					; DATA XREF: .debug_ranges:00003594o ...
		call	___stack_chk_fail
_gg_tvbuff_read_packed_uint endp

; ---------------------------------------------------------------------------
unk_5B6		db  66h	; f		; DATA XREF: .debug_info:000018C9o
					; .debug_info:000019E8o
		db  90h	; ê

; =============== S U B	R O U T	I N E =======================================


		public _gg_tvbuff_read_buff
_gg_tvbuff_read_buff proc near		; CODE XREF: _gg_tvbuff_read_str+50p
					; _gg_tvbuff_read_uin+9Bp
					; DATA XREF: ...

var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_10		= dword	ptr -10h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	esi

loc_5B9:				; DATA XREF: .debug_loc:00002D9Do
		push	ebx
		sub	esp, 24h
		mov	ebx, [esp+2Ch+arg_0]
		mov	esi, [esp+2Ch+arg_4]
		mov	eax, dword ptr ds:___stack_chk_guard
		mov	[esp+2Ch+var_10], eax
		xor	eax, eax

loc_5D0:				; DATA XREF: .debug_info:00001A25o
					; .debug_loc:off_2E14o
		test	ebx, ebx
		jz	short loc_60C

loc_5D4:				; DATA XREF: .debug_info:00001A29o
		mov	edx, [ebx+0Ch]
		test	edx, edx
		jz	short loc_60C
		mov	[esp+2Ch+var_28], esi
		mov	[esp+2Ch+var_2C], ebx
		call	_gg_tvbuff_have_remaining

loc_5E7:				; DATA XREF: .debug_info:00001A97o
		test	eax, eax
		jz	short loc_610
		mov	edx, [ebx+8]
		mov	eax, [ebx]
		add	eax, edx

loc_5F2:				; DATA XREF: .debug_loc:off_2E01o
		add	esi, edx
		mov	[ebx+8], esi

loc_5F7:				; CODE XREF: _gg_tvbuff_read_buff+56j
					; _gg_tvbuff_read_buff+79j
					; DATA XREF: ...
		mov	edx, [esp+2Ch+var_10]
		xor	edx, dword ptr ds:___stack_chk_guard
		jnz	short loc_633
		add	esp, 24h
		pop	ebx

loc_607:				; DATA XREF: .debug_loc:00002E18o
		pop	esi
		retn
; ---------------------------------------------------------------------------
		align 4

loc_60C:				; CODE XREF: _gg_tvbuff_read_buff+1Aj
					; _gg_tvbuff_read_buff+21j
		xor	eax, eax
		jmp	short loc_5F7
; ---------------------------------------------------------------------------

loc_610:				; CODE XREF: _gg_tvbuff_read_buff+31j
					; DATA XREF: .debug_info:00001A43o ...
		mov	[esp+2Ch+var_20], esi
		mov	eax, [ebx+8]
		mov	[esp+2Ch+var_24], eax
		mov	[esp+2Ch+var_28], offset aGg_tvbuff_get_ ; "// gg_tvbuff_get_buff() failed at %Iu:%"...
		mov	[esp+2Ch+var_2C], 40h ;	'@'
		call	_gg_debug

loc_62F:				; DATA XREF: .debug_info:00001A73o
		xor	eax, eax
		jmp	short loc_5F7
; ---------------------------------------------------------------------------

loc_633:				; CODE XREF: _gg_tvbuff_read_buff+49j
					; DATA XREF: .debug_info:00001A47o ...
		call	___stack_chk_fail
_gg_tvbuff_read_buff endp


; =============== S U B	R O U T	I N E =======================================


		public _gg_tvbuff_read_buff_cpy
_gg_tvbuff_read_buff_cpy proc near	; CODE XREF: _gg_tvbuff_read_str_dup:loc_838p
					; DATA XREF: .debug_info:000019FAo ...

var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_30		= dword	ptr -30h
var_20		= dword	ptr -20h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	ebp

loc_639:				; DATA XREF: .debug_loc:00002E68o
		push	edi
		push	esi
		push	ebx
		sub	esp, 3Ch
		mov	ebx, [esp+4Ch+arg_0]
		mov	ebp, [esp+4Ch+arg_4]
		mov	edx, [esp+4Ch+arg_8]
		mov	eax, dword ptr ds:___stack_chk_guard
		mov	[esp+4Ch+var_20], eax
		xor	eax, eax

loc_656:				; DATA XREF: .debug_info:00001B1Do
					; .debug_loc:off_2EFEo
		test	ebx, ebx
		jz	short loc_661

loc_65A:				; DATA XREF: .debug_info:00001B21o
		mov	ecx, [ebx+0Ch]

loc_65D:				; DATA XREF: .debug_info:00001560o
		test	ecx, ecx
		jnz	short loc_678

loc_661:				; CODE XREF: _gg_tvbuff_read_buff_cpy+20j
					; _gg_tvbuff_read_buff_cpy+6Aj	...
		mov	eax, [esp+4Ch+var_20]
		xor	eax, dword ptr ds:___stack_chk_guard
		jnz	short loc_6EC
		add	esp, 3Ch
		pop	ebx

loc_671:				; DATA XREF: .debug_loc:00002F02o
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 4

loc_678:				; CODE XREF: _gg_tvbuff_read_buff_cpy+27j
		mov	[esp+4Ch+var_48], edx
		mov	[esp+4Ch+var_4C], ebx
		mov	[esp+4Ch+var_30], edx
		call	_gg_tvbuff_have_remaining

loc_688:				; DATA XREF: .debug_info:00001B37o
		test	eax, eax
		mov	edx, [esp+4Ch+var_30]
		jz	short loc_6C8
		test	ebp, ebp
		jz	short loc_6A4

loc_694:				; CODE XREF: _gg_tvbuff_read_buff_cpy+6Ej
		mov	esi, [ebx]
		add	esi, [ebx+8]
		mov	edi, ebp
		mov	ecx, edx
		rep movsb
		add	[ebx+8], edx
		jmp	short loc_661
; ---------------------------------------------------------------------------

loc_6A4:				; CODE XREF: _gg_tvbuff_read_buff_cpy+5Aj
		test	edx, edx
		jz	short loc_694
		mov	[esp+4Ch+var_48], offset aGg_tvbuff_newI ; "// gg_tvbuff_new() invalid arguments\n"
		mov	[esp+4Ch+var_4C], 80h ;	'Ä'
		call	_gg_debug

loc_6BC:				; DATA XREF: .debug_info:00001B54o
		mov	dword ptr [ebx+0Ch], 0
		jmp	short loc_661
; ---------------------------------------------------------------------------
		align 4

loc_6C8:				; CODE XREF: _gg_tvbuff_read_buff_cpy+56j
		mov	[esp+4Ch+var_40], edx
		mov	eax, [ebx+8]
		mov	[esp+4Ch+var_44], eax
		mov	[esp+4Ch+var_48], offset aGg_tvbuff_re_5 ; "// gg_tvbuff_read_buff() failed at %Iu:"...
		mov	[esp+4Ch+var_4C], 40h ;	'@'
		call	_gg_debug

loc_6E7:				; DATA XREF: .debug_info:00001B73o
					; .debug_info:000015ECo
		jmp	loc_661
; ---------------------------------------------------------------------------

loc_6EC:				; CODE XREF: _gg_tvbuff_read_buff_cpy+33j
		call	___stack_chk_fail
_gg_tvbuff_read_buff_cpy endp

; ---------------------------------------------------------------------------
unk_6F1		db  8Dh	; ç		; DATA XREF: .debug_info:00001ADEo
					; .debug_info:00001B92o
		db  76h	; v
		db    0

; =============== S U B	R O U T	I N E =======================================


		public _gg_tvbuff_read_str
_gg_tvbuff_read_str proc near		; DATA XREF: .debug_info:00001BB8o
					; .debug_loc:off_2F28o

var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_20		= dword	ptr -20h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	ebp

loc_6F5:				; DATA XREF: .debug_loc:00002F2Co
		push	edi
		push	esi
		push	ebx
		sub	esp, 2Ch
		mov	ebx, [esp+3Ch+arg_0]
		mov	edi, [esp+3Ch+arg_4]
		mov	eax, dword ptr ds:___stack_chk_guard
		mov	[esp+3Ch+var_20], eax
		xor	eax, eax

loc_70E:				; DATA XREF: .debug_info:00001C20o
					; .debug_loc:off_301Co
		test	ebx, ebx
		jz	short loc_78C

loc_712:				; DATA XREF: .debug_info:00001C24o
		mov	eax, [ebx+0Ch]
		test	eax, eax
		jz	short loc_78C
		mov	ebp, [ebx+8]

loc_71C:				; DATA XREF: .debug_loc:off_2FC2o
		mov	[esp+3Ch+var_3C], ebx
		call	_gg_tvbuff_read_packed_uint

loc_724:				; DATA XREF: .debug_info:00001C3Ao
		mov	esi, eax

loc_726:				; DATA XREF: .debug_loc:off_2FE0o
		mov	eax, [ebx+0Ch]

loc_729:				; DATA XREF: .debug_loc:00002FE4o
		test	eax, eax
		jz	short loc_770
		mov	[esp+3Ch+var_38], esi
		mov	[esp+3Ch+var_3C], ebx
		call	_gg_tvbuff_have_remaining

loc_739:				; DATA XREF: .debug_info:00001C4Fo
		test	eax, eax
		jz	short loc_770
		mov	[esp+3Ch+var_38], esi
		mov	[esp+3Ch+var_3C], ebx
		call	_gg_tvbuff_read_buff

loc_749:				; DATA XREF: .debug_info:00001C6Bo
					; .debug_loc:off_3009o
		mov	ebx, [ebx+0Ch]

loc_74C:				; DATA XREF: .debug_loc:00003020o
		test	ebx, ebx
		jz	short loc_78C
		test	edi, edi
		jz	short loc_756
		mov	[edi], esi

loc_756:				; CODE XREF: _gg_tvbuff_read_str+5Ej
		test	esi, esi
		jz	short loc_78C

loc_75A:				; CODE XREF: _gg_tvbuff_read_str+9Aj
					; DATA XREF: .debug_loc:00002FC6o ...
		mov	edx, [esp+3Ch+var_20]
		xor	edx, dword ptr ds:___stack_chk_guard
		jnz	short loc_790
		add	esp, 2Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_770:				; CODE XREF: _gg_tvbuff_read_str+37j
					; _gg_tvbuff_read_str+47j
		mov	[esp+3Ch+var_30], esi

loc_774:				; DATA XREF: .debug_info:0000167Ao
		mov	[esp+3Ch+var_34], ebp
		mov	[esp+3Ch+var_38], offset aGg_tvbuff_re_6 ; "// gg_tvbuff_read_str() failed at %Iu:%"...
		mov	[esp+3Ch+var_3C], 40h ;	'@'
		call	_gg_debug

loc_78C:				; CODE XREF: _gg_tvbuff_read_str+1Cj
					; _gg_tvbuff_read_str+23j ...
		xor	eax, eax
		jmp	short loc_75A
; ---------------------------------------------------------------------------

loc_790:				; CODE XREF: _gg_tvbuff_read_str+70j
					; DATA XREF: .debug_info:00001695o
		call	___stack_chk_fail
_gg_tvbuff_read_str endp

; ---------------------------------------------------------------------------
unk_795		db  8Dh	; ç		; DATA XREF: .debug_info:00001BBCo
					; .debug_info:00001CB4o
		db  76h	; v
		db    0

; =============== S U B	R O U T	I N E =======================================


		public _gg_tvbuff_read_str_dup
_gg_tvbuff_read_str_dup	proc near	; DATA XREF: .debug_info:00001CE0o
					; .debug_loc:off_3052o

var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_20		= dword	ptr -20h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	ebp

loc_799:				; DATA XREF: .debug_loc:00003056o
		push	edi
		push	esi
		push	ebx
		sub	esp, 2Ch
		mov	ebx, [esp+3Ch+arg_0]
		mov	esi, [esp+3Ch+arg_4]
		mov	eax, dword ptr ds:___stack_chk_guard
		mov	[esp+3Ch+var_20], eax
		xor	eax, eax

loc_7B2:				; DATA XREF: .debug_info:00001D48o
					; .debug_loc:off_3151o
		test	ebx, ebx
		jz	short loc_7BD

loc_7B6:				; DATA XREF: .debug_info:00001D4Co
		mov	eax, [ebx+0Ch]
		test	eax, eax
		jnz	short loc_7D8

loc_7BD:				; CODE XREF: _gg_tvbuff_read_str_dup+1Cj
					; _gg_tvbuff_read_str_dup:loc_818j ...
		mov	eax, [esp+3Ch+var_20]
		xor	eax, dword ptr ds:___stack_chk_guard
		jnz	loc_88D
		add	esp, 2Ch
		pop	ebx

loc_7D1:				; DATA XREF: .debug_loc:00003155o
					; .debug_loc:0000315Co
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
unk_7D5		db  8Dh	; ç		; DATA XREF: .debug_loc:00003160o
		db  76h	; v
		db    0
; ---------------------------------------------------------------------------

loc_7D8:				; CODE XREF: _gg_tvbuff_read_str_dup+23j
		mov	ebp, [ebx+8]

loc_7DB:				; DATA XREF: .debug_loc:off_30ECo
		mov	[esp+3Ch+var_3C], ebx
		call	_gg_tvbuff_read_packed_uint

loc_7E3:				; DATA XREF: .debug_info:00001D62o
		mov	edi, eax

loc_7E5:				; DATA XREF: .debug_loc:off_30FFo
		mov	eax, [ebx+0Ch]

loc_7E8:				; DATA XREF: .debug_loc:00003103o
		test	eax, eax
		jz	short loc_7FC
		mov	[esp+3Ch+var_38], edi
		mov	[esp+3Ch+var_3C], ebx
		call	_gg_tvbuff_have_remaining

loc_7F8:				; DATA XREF: .debug_info:00001D77o
		test	eax, eax
		jnz	short loc_81C

loc_7FC:				; CODE XREF: _gg_tvbuff_read_str_dup+52j
		mov	[esp+3Ch+var_30], edi
		mov	[esp+3Ch+var_34], ebp
		mov	[esp+3Ch+var_38], offset aGg_tvbuff_re_7 ; "// gg_tvbuff_read_str_dup()	failed at %"...
		mov	[esp+3Ch+var_3C], 40h ;	'@'
		call	_gg_debug

loc_818:				; DATA XREF: .debug_info:00001D93o
		jmp	short loc_7BD
; ---------------------------------------------------------------------------
		align 4

loc_81C:				; CODE XREF: _gg_tvbuff_read_str_dup+62j
		lea	eax, [edi+1]
		mov	[esp+3Ch+var_3C], eax ;	size_t
		call	_malloc

loc_827:				; DATA XREF: .debug_info:00001DC0o
		mov	ebp, eax

loc_829:				; DATA XREF: .debug_loc:000030F0o
					; .debug_loc:off_311Do	...
		mov	[esp+3Ch+var_34], edi
		test	eax, eax
		jz	short loc_86D
		mov	[esp+3Ch+var_38], eax

loc_835:				; DATA XREF: .debug_info:000020EBo
		mov	[esp+3Ch+var_3C], ebx

loc_838:				; DATA XREF: .debug_loc:00003121o
					; .debug_loc:00003128o
		call	_gg_tvbuff_read_buff_cpy

loc_83D:				; DATA XREF: .debug_info:00001DD5o
		mov	byte ptr [ebp+edi+0], 0
		mov	eax, [esi]
		test	eax, eax
		jz	short loc_866
		mov	[esp+3Ch+var_38], offset aGg_tvbuff_re_8 ; "// gg_tvbuff_read_str_dup()	destination"...
		mov	[esp+3Ch+var_3C], 40h ;	'@'
		call	_gg_debug

loc_85C:				; DATA XREF: .debug_info:00001DF8o
		mov	eax, [esi]
		mov	[esp+3Ch+var_3C], eax ;	void *
		call	_free

loc_866:				; CODE XREF: _gg_tvbuff_read_str_dup+AEj
					; DATA XREF: .debug_info:00001E17o
		mov	[esi], ebp
		jmp	loc_7BD
; ---------------------------------------------------------------------------

loc_86D:				; CODE XREF: _gg_tvbuff_read_str_dup+97j
					; DATA XREF: .debug_loc:0000312Co
		mov	[esp+3Ch+var_38], offset aGg_tvbuff_re_9 ; "// gg_tvbuff_read_str_dup()	not enough "...
		mov	[esp+3Ch+var_3C], 80h ;	'Ä'
		call	_gg_debug

loc_881:				; DATA XREF: .debug_info:00001E20o
		mov	dword ptr [ebx+0Ch], 0
		jmp	loc_7BD
; ---------------------------------------------------------------------------

loc_88D:				; CODE XREF: _gg_tvbuff_read_str_dup+2Fj
		call	___stack_chk_fail
_gg_tvbuff_read_str_dup	endp

; ---------------------------------------------------------------------------
unk_892		db  66h	; f		; DATA XREF: .debug_info:00001CE4o
					; .debug_info:00001E3Fo
		db  90h	; ê

; =============== S U B	R O U T	I N E =======================================


		public _gg_tvbuff_read_uin
_gg_tvbuff_read_uin proc near		; DATA XREF: .debug_info:00001E65o
					; .debug_loc:off_317Bo

var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_20		= dword	ptr -20h
arg_0		= dword	ptr  4

		push	ebp

loc_895:				; DATA XREF: .debug_loc:0000317Fo
		push	edi
		push	esi
		push	ebx
		sub	esp, 2Ch
		mov	ebx, [esp+3Ch+arg_0]
		mov	eax, dword ptr ds:___stack_chk_guard
		mov	[esp+3Ch+var_20], eax
		xor	eax, eax

loc_8AA:				; DATA XREF: .debug_info:00001EE8o
					; .debug_loc:off_3215o	...
		test	ebx, ebx
		jz	short loc_8B5

loc_8AE:				; DATA XREF: .debug_info:00001EECo
		mov	ecx, [ebx+0Ch]
		test	ecx, ecx
		jnz	short loc_8D0

loc_8B5:				; CODE XREF: _gg_tvbuff_read_uin+18j
					; _gg_tvbuff_read_uin+5Dj ...
		xor	eax, eax

loc_8B7:				; CODE XREF: _gg_tvbuff_read_uin+B2j
					; _gg_tvbuff_read_uin+D5j
					; DATA XREF: ...
		mov	edx, [esp+3Ch+var_20]
		xor	edx, dword ptr ds:___stack_chk_guard
		jnz	loc_96E
		add	esp, 2Ch
		pop	ebx

loc_8CB:				; DATA XREF: .debug_loc:000032CCo
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_8D0:				; CODE XREF: _gg_tvbuff_read_uin+1Fj
		mov	[esp+3Ch+var_3C], ebx
		call	_gg_tvbuff_read_packed_uint

loc_8D8:				; DATA XREF: .debug_info:00001F02o
		mov	esi, eax

loc_8DA:				; DATA XREF: .debug_loc:off_3263o
		mov	[esp+3Ch+var_3C], ebx

loc_8DD:				; DATA XREF: .debug_loc:00003267o
		call	_gg_tvbuff_read_uint8

loc_8E2:				; DATA XREF: .debug_info:00001F17o
					; .debug_info:000017E5o
		mov	edi, eax

loc_8E4:				; DATA XREF: .debug_loc:off_3281o
		mov	[esp+3Ch+var_3C], ebx

loc_8E7:				; DATA XREF: .debug_loc:00003285o
					; .debug_loc:0000328Co
		call	_gg_tvbuff_read_uint8

loc_8EC:				; DATA XREF: .debug_info:00001F2Co
					; .debug_loc:off_3240o
		mov	edx, [ebx+0Ch]
		test	edx, edx
		jz	short loc_8B5
		movzx	ebp, al

loc_8F6:				; DATA XREF: .debug_loc:00003244o
		lea	eax, [ebp+2]
		cmp	eax, esi
		jnz	short loc_908
		mov	edx, edi
		test	dl, dl
		jnz	short loc_908
		cmp	ebp, 0Ah
		jbe	short loc_928

loc_908:				; CODE XREF: _gg_tvbuff_read_uin+67j
					; _gg_tvbuff_read_uin+6Dj
		mov	[esp+3Ch+var_38], offset aGg_tvbuff_r_10 ; "// gg_tvbuff_read_uin() failed (1)\n"
		mov	[esp+3Ch+var_3C], 40h ;	'@'
		call	_gg_debug

loc_91C:				; DATA XREF: .debug_info:00001F41o
		mov	dword ptr [ebx+0Ch], 0
		jmp	short loc_8B5
; ---------------------------------------------------------------------------
unk_925		db  8Dh	; ç		; DATA XREF: .debug_loc:00003290o
		db  76h	; v
		db    0
; ---------------------------------------------------------------------------

loc_928:				; CODE XREF: _gg_tvbuff_read_uin+72j
		mov	[esp+3Ch+var_38], ebp
		mov	[esp+3Ch+var_3C], ebx
		call	_gg_tvbuff_read_buff

loc_934:				; DATA XREF: .debug_info:00001F60o
					; .debug_loc:off_32B5o
		test	eax, eax
		jz	short loc_94C
		mov	[esp+3Ch+var_38], ebp
		mov	[esp+3Ch+var_3C], eax

loc_93F:				; DATA XREF: .debug_loc:000032B9o
		call	_gg_str_to_uin

loc_944:				; DATA XREF: .debug_info:00001F7Co
		test	eax, eax
		jnz	loc_8B7

loc_94C:				; CODE XREF: _gg_tvbuff_read_uin+A2j
		mov	[esp+3Ch+var_38], offset aGg_tvbuff_r_11 ; "// gg_tvbuff_read_uin() failed (2)\n"
		mov	[esp+3Ch+var_3C], 40h ;	'@'
		call	_gg_debug

loc_960:				; DATA XREF: .debug_info:00001F91o
		mov	dword ptr [ebx+0Ch], 0
		xor	eax, eax
		jmp	loc_8B7
; ---------------------------------------------------------------------------

loc_96E:				; CODE XREF: _gg_tvbuff_read_uin+2Dj
		call	___stack_chk_fail
_gg_tvbuff_read_uin endp

; ---------------------------------------------------------------------------
unk_973		db  90h	; ê		; DATA XREF: .debug_info:00001E69o
					; .debug_info:00001FB0o

; =============== S U B	R O U T	I N E =======================================


		public _gg_tvbuff_expected_uint8
_gg_tvbuff_expected_uint8 proc near	; DATA XREF: .debug_info:00001FD8o
					; .debug_loc:off_32F2o

var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_10		= dword	ptr -10h
arg_0		= dword	ptr  4
arg_4		= byte ptr  8

		push	edi

loc_975:				; DATA XREF: .debug_loc:000032F6o
		push	esi

loc_976:				; DATA XREF: .debug_info:0000187Co
		push	ebx
		sub	esp, 30h
		mov	esi, [esp+3Ch+arg_0]
		movzx	ebx, [esp+3Ch+arg_4]
		mov	eax, dword ptr ds:___stack_chk_guard
		mov	[esp+3Ch+var_10], eax
		xor	eax, eax
		mov	edi, [esi+8]

loc_991:				; DATA XREF: .debug_loc:off_3387o
		mov	[esp+3Ch+var_3C], esi
		call	_gg_tvbuff_read_uint8

loc_999:				; DATA XREF: .debug_info:0000202Ao
					; .debug_loc:off_3374o
		mov	esi, [esi+0Ch]
		test	esi, esi

loc_99E:				; DATA XREF: .debug_info:000018A0o
		jz	short loc_9C7
		cmp	al, bl
		jz	short loc_9C7
		mov	[esp+3Ch+var_2C], edi
		movzx	eax, al
		mov	[esp+3Ch+var_30], eax
		mov	[esp+3Ch+var_34], ebx
		mov	[esp+3Ch+var_38], offset aGg_tvbuff_expe ; "// gg_tvbuff_expected_uint8() expected "...
		mov	[esp+3Ch+var_3C], 40h ;	'@'

loc_9C2:				; DATA XREF: .debug_loc:00003378o
		call	_gg_debug

loc_9C7:				; CODE XREF: _gg_tvbuff_expected_uint8:loc_99Ej
					; _gg_tvbuff_expected_uint8+2Ej
					; DATA XREF: ...
		mov	eax, [esp+3Ch+var_10]
		xor	eax, dword ptr ds:___stack_chk_guard
		jnz	short loc_9DA
		add	esp, 30h
		pop	ebx
		pop	esi
		pop	edi

locret_9D9:				; DATA XREF: .debug_loc:0000338Bo
		retn
; ---------------------------------------------------------------------------

loc_9DA:				; CODE XREF: _gg_tvbuff_expected_uint8+5Dj
		call	___stack_chk_fail
_gg_tvbuff_expected_uint8 endp

; ---------------------------------------------------------------------------
unk_9DF		db  90h	; ê		; DATA XREF: .debug_info:00001FDCo
					; .debug_info:0000206Co

; =============== S U B	R O U T	I N E =======================================


		public _gg_tvbuff_expected_uint32
_gg_tvbuff_expected_uint32 proc	near	; DATA XREF: .debug_info:00002095o
					; .debug_loc:off_33A5o

var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_10		= dword	ptr -10h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	edi

loc_9E1:				; DATA XREF: .debug_loc:000033A9o
		push	esi
		push	ebx
		sub	esp, 30h
		mov	ebx, [esp+3Ch+arg_0]
		mov	esi, [esp+3Ch+arg_4]
		mov	eax, dword ptr ds:___stack_chk_guard
		mov	[esp+3Ch+var_10], eax
		xor	eax, eax
		mov	edi, [ebx+8]

loc_9FC:				; DATA XREF: .debug_loc:off_343Ao
		mov	[esp+3Ch+var_3C], ebx
		call	_gg_tvbuff_read_uint32

loc_A04:				; DATA XREF: .debug_info:000020E7o
					; .debug_loc:off_3427o
		mov	edx, [ebx+0Ch]
		test	edx, edx
		jz	short loc_A2F
		cmp	eax, esi
		jz	short loc_A2F
		mov	[esp+3Ch+var_2C], edi
		mov	[esp+3Ch+var_30], eax
		mov	[esp+3Ch+var_34], esi
		mov	[esp+3Ch+var_38], offset aGg_tvbuff_ex_0 ; "// gg_tvbuff_expected_uint32() expected"...
		mov	[esp+3Ch+var_3C], 40h ;	'@'

loc_A2A:				; DATA XREF: .debug_loc:0000342Bo
		call	_gg_debug

loc_A2F:				; CODE XREF: _gg_tvbuff_expected_uint32+29j
					; _gg_tvbuff_expected_uint32+2Dj
					; DATA XREF: ...
		mov	eax, [esp+3Ch+var_10]
		xor	eax, dword ptr ds:___stack_chk_guard
		jnz	short loc_A42
		add	esp, 30h
		pop	ebx
		pop	esi
		pop	edi

locret_A41:				; DATA XREF: .debug_loc:0000343Eo
		retn
; ---------------------------------------------------------------------------

loc_A42:				; CODE XREF: _gg_tvbuff_expected_uint32+59j
		call	___stack_chk_fail
_gg_tvbuff_expected_uint32 endp

; ---------------------------------------------------------------------------
unk_A47		db  90h	; ê		; DATA XREF: .debug_info:00002099o
					; .debug_info:00002129o

; =============== S U B	R O U T	I N E =======================================


		public _gg_tvbuff_expected_eob
_gg_tvbuff_expected_eob	proc near	; CODE XREF: _gg_tvbuff_close+17p
					; DATA XREF: .debug_info:0000214Fo ...

var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_10		= dword	ptr -10h
arg_0		= dword	ptr  4

		sub	esp, 2Ch

loc_A4B:				; DATA XREF: .debug_loc:0000345Co
		mov	eax, [esp+2Ch+arg_0]
		mov	edx, dword ptr ds:___stack_chk_guard
		mov	[esp+2Ch+var_10], edx
		xor	edx, edx

loc_A5B:				; DATA XREF: .debug_info:00002174o
					; .debug_loc:off_3490o	...
		test	eax, eax
		jz	short loc_A92

loc_A5F:				; DATA XREF: .debug_info:00002178o
		mov	ecx, [eax+0Ch]
		test	ecx, ecx
		jz	short loc_A92

loc_A66:				; DATA XREF: .debug_info:00002192o
					; .debug_loc:off_34AFo
		mov	edx, [eax+8]

loc_A69:				; DATA XREF: .debug_info:00002196o
		mov	ecx, [eax+4]
		sub	ecx, edx
		jz	short loc_A92
		mov	eax, [eax]

loc_A72:				; DATA XREF: .debug_loc:00003494o
					; .debug_loc:000034B3o
		movsx	eax, byte ptr [eax+edx]

loc_A76:				; DATA XREF: .debug_info:0000197Do
		mov	[esp+2Ch+var_20], eax
		mov	[esp+2Ch+var_24], ecx
		mov	[esp+2Ch+var_28], offset aGg_tvbuff_ex_1 ; "// gg_tvbuff_expected_eob()	unexpected "...

loc_A86:				; DATA XREF: .debug_info:00001998o
		mov	[esp+2Ch+var_2C], 40h ;	'@'
		call	_gg_debug

loc_A92:				; CODE XREF: _gg_tvbuff_expected_eob+15j
					; _gg_tvbuff_expected_eob+1Cj ...
		mov	ecx, [esp+2Ch+var_10]
		xor	ecx, dword ptr ds:___stack_chk_guard
		jnz	short loc_AA2
		add	esp, 2Ch
		retn
; ---------------------------------------------------------------------------

loc_AA2:				; CODE XREF: _gg_tvbuff_expected_eob+54j
		call	___stack_chk_fail
_gg_tvbuff_expected_eob	endp

; ---------------------------------------------------------------------------
unk_AA7		db  90h	; ê		; DATA XREF: .debug_info:00002153o
					; .debug_info:000021CBo

; =============== S U B	R O U T	I N E =======================================


; int __cdecl gg_tvbuff_close(void *)
		public _gg_tvbuff_close
_gg_tvbuff_close proc near		; DATA XREF: .debug_info:000021EDo
					; .debug_loc:off_34CEo

var_2C		= dword	ptr -2Ch
var_10		= dword	ptr -10h
arg_0		= dword	ptr  4

		push	esi

loc_AA9:				; DATA XREF: .debug_loc:000034D2o
		push	ebx
		sub	esp, 24h
		mov	ebx, [esp+2Ch+arg_0]

loc_AB1:				; DATA XREF: .debug_info:000019ADo
		mov	eax, dword ptr ds:___stack_chk_guard
		mov	[esp+2Ch+var_10], eax
		xor	eax, eax
		mov	[esp+2Ch+var_2C], ebx
		call	_gg_tvbuff_expected_eob

loc_AC4:				; DATA XREF: .debug_info:00002220o
					; .debug_info:00002239o ...
		test	ebx, ebx
		jz	short loc_AE8
		mov	esi, [ebx+0Ch]

loc_ACB:				; CODE XREF: _gg_tvbuff_close+42j
					; DATA XREF: .debug_ranges:000035E4o
		mov	[esp+2Ch+var_2C], ebx ;	void *
		call	_free

loc_AD3:				; DATA XREF: .debug_info:0000224Eo
		mov	eax, esi
		mov	edx, [esp+2Ch+var_10]
		xor	edx, dword ptr ds:___stack_chk_guard
		jnz	short loc_AEC
		add	esp, 24h
		pop	ebx

loc_AE5:				; DATA XREF: .debug_loc:0000353Ao
		pop	esi
		retn
; ---------------------------------------------------------------------------
		align 4

loc_AE8:				; CODE XREF: _gg_tvbuff_close+1Ej
					; DATA XREF: .debug_ranges:000035E8o
		xor	esi, esi
		jmp	short loc_ACB
; ---------------------------------------------------------------------------

loc_AEC:				; CODE XREF: _gg_tvbuff_close+37j
					; DATA XREF: .debug_ranges:000035ECo
		call	___stack_chk_fail
_gg_tvbuff_close endp

; ---------------------------------------------------------------------------
unk_AF1		db  90h	; ê		; DATA XREF: .debug_info:00000F88o
					; .debug_info:000021F1o ...
		db  90h	; ê
unk_AF3		db  90h	; ê		; DATA XREF: .eh_frame:000039B8o
					; .eh_frame:000039F8o ...
_text		ends

; ===========================================================================

; Segment type:	Zero-length
; Segment permissions: Read/Write
_data		segment	dword public 'DATA' use32
_data		ends

; ===========================================================================

; Segment type:	Zero-length
; Segment permissions: Read/Write
_bss		segment	dword public 'BSS' use32
_bss		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0AFCh
aGg_tvbuff_newI	db '// gg_tvbuff_new() invalid arguments',0Ah,0
					; DATA XREF: _gg_tvbuff_new:loc_68o
					; _gg_tvbuff_read_buff_cpy+70o	...
		align 4
aGg_tvbuff_have	db '// gg_tvbuff_have_remaining() failed (%Iu < %Iu)',0Ah,0
					; DATA XREF: _gg_tvbuff_have_remaining+34o
					; .debug_info:000014DEo ...
aGg_tvbuff_skip	db '// gg_tvbuff_skip() failed',0Ah,0 ; DATA XREF: _gg_tvbuff_skip:loc_1BCo
					; .debug_info:00001571o
aGg_tvbuff_rewi	db '// gg_tvbuff_rewind() failed',0Ah,0
					; DATA XREF: _gg_tvbuff_rewind:loc_220o
					; .debug_info:000015FDo
aGg_tvbuff_matc	db '// gg_tvbuff_match() failed',0Ah,0
					; DATA XREF: _gg_tvbuff_match:loc_2B4o
					; .debug_info:000016A6o ...
		align 10h
aGg_tvbuff_read	db '// gg_tvbuff_read_uint8() failed at %Iu',0Ah,0
					; DATA XREF: _gg_tvbuff_read_uint8+5Fo
					; .debug_info:00001722o
		align 4
aGg_tvbuff_re_0	db '// gg_tvbuff_read_uint32() failed at %Iu',0Ah,0
					; DATA XREF: _gg_tvbuff_read_uint32+74o
					; .debug_info:000017F6o
		align 4
aGg_tvbuff_re_1	db '// gg_tvbuff_read_uint64() failed at %Iu',0Ah,0
					; DATA XREF: _gg_tvbuff_read_uint64+6Fo
					; .debug_info:000018B1o
		align 4
aGg_tvbuff_re_4	db '// gg_tvbuff_read_packed_uint() failed',0Ah,0
					; DATA XREF: _gg_tvbuff_read_packed_uint:loc_594o
					; .debug_info:000019E0o ...
aGg_tvbuff_re_2	db '// gg_tvbuff_read_packed_uint() packed uint size too big: %d',0Ah,0
					; DATA XREF: _gg_tvbuff_read_packed_uint+DCo
					; .debug_info:000019BEo
		align 4
aGg_tvbuff_re_3	db '// gg_tvbuff_read_packed_uint() overflow',0Ah,0
					; DATA XREF: _gg_tvbuff_read_packed_uint:loc_570o
					; .debug_info:0000196Eo
		align 4
aGg_tvbuff_get_	db '// gg_tvbuff_get_buff() failed at %Iu:%Iu',0Ah,0
					; DATA XREF: _gg_tvbuff_read_buff+63o
					; .debug_info:00001A88o
		align 4
aGg_tvbuff_re_5	db '// gg_tvbuff_read_buff() failed at %Iu:%Iu',0Ah,0
					; DATA XREF: _gg_tvbuff_read_buff_cpy+9Bo
					; .debug_info:00001B8Co
aGg_tvbuff_re_6	db '// gg_tvbuff_read_str() failed at %Iu:%d',0Ah,0
					; DATA XREF: _gg_tvbuff_read_str+84o
					; .debug_info:00001CA0o
		align 4
aGg_tvbuff_re_7	db '// gg_tvbuff_read_str_dup() failed at %Iu:%d',0Ah,0
					; DATA XREF: _gg_tvbuff_read_str_dup+6Co
					; .debug_info:00001DACo ...
		align 4
aGg_tvbuff_re_9	db '// gg_tvbuff_read_str_dup() not enough free memory: %d + 1',0Ah,0
					; DATA XREF: _gg_tvbuff_read_str_dup:loc_86Do
					; .debug_info:00001E39o
aGg_tvbuff_re_8	db '// gg_tvbuff_read_str_dup() destination already filled, freeing i'
					; DATA XREF: _gg_tvbuff_read_str_dup+B0o
					; .debug_info:00001E11o
		db 't...',0Ah,0
		align 10h
aGg_tvbuff_r_10	db '// gg_tvbuff_read_uin() failed (1)',0Ah,0
					; DATA XREF: _gg_tvbuff_read_uin:loc_908o
					; .debug_info:00001F5Ao
aGg_tvbuff_r_11	db '// gg_tvbuff_read_uin() failed (2)',0Ah,0
					; DATA XREF: _gg_tvbuff_read_uin:loc_94Co
					; .debug_info:00001FAAo
aGg_tvbuff_expe	db '// gg_tvbuff_expected_uint8() expected %#02x, but %#02x found at '
					; DATA XREF: _gg_tvbuff_expected_uint8+3Fo
					; .debug_info:00002058o
		db '%Iu',0Ah,0
		align 10h
aGg_tvbuff_ex_0	db '// gg_tvbuff_expected_uint32() expected %#08x, but %#08x found at'
					; DATA XREF: _gg_tvbuff_expected_uint32+3Bo
					; .debug_info:00002115o
		db ' %Iu',0Ah,0
		align 4
aGg_tvbuff_ex_1	db '// gg_tvbuff_expected_eob() unexpected %Iu bytes, first=%#02x',0Ah,0
					; DATA XREF: _gg_tvbuff_expected_eob+36o
					; .debug_info:000021C5o ...
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_debug_info	segment	byte public 'DATA' use32
		assume cs:_debug_info
		;org 0F18h
off_F18		dd offset off_142D+3	; DATA XREF: .debug_aranges:00003566o
		db 2, 0
		dd offset dword_234C
		dw 104h
aGnuC4_7_2	db 'GNU C 4.7.2',0      ; DATA XREF: .debug_info:00001E28o
		db    1
aLibTvbuff_c	db 'lib/tvbuff.c',0
aCWorkspacePidg	db 'C:\\workspace\\pidgin-devel\\pidgin-2.10.11\\libpurple\\protocols'
		db '\\gg',0
		dd offset _gg_tvbuff_new
		dd offset unk_AF1
		dd offset off_35F8
		dd 7A697302h, 745F65h, 86D503h,	4030000h, 736E7507h, 656E6769h
		dd 6E692064h, 2030074h
aShortUnsignedI	db 7,'short unsigned int',0
		db    3
		db 4, 5, 69h
		db  6Eh	; n
		db 74h,	0, 3
		db    4
		db 5, 6Ch, 6Fh
aNgInt		db 'ng int',0
		db 3
		db    8
		db 5, 6Ch, 6Fh
aNgLongInt	db 'ng long int',0
		db    3
		db 2, 5, 73h
aHortInt	db 'hort int',0
		db 3, 1, 6
aChar		db 'char',0
byte_FFD	db 4, 5Fh, 69h		; DATA XREF: .debug_info:00001F0Ao
aObuf		db 'obuf',0
		db 20h,	2, 81h
		dd offset _gg_tvbuff_skip
		db    5
a_ptr		db '_ptr',0
word_1012	dw 8302h		; DATA XREF: .debug_info:00001F1Fo
		dd offset _gg_tvbuff_skip
		db    2
		db 23h,	0, 5
a_cnt		db '_cnt',0
		db 2, 84h, 0ACh
		db    0
		db 2 dup(0), 2
unk_1028	db  23h	; #		; DATA XREF: .debug_info:00001F34o
		db 4, 5, 5Fh
aBase		db 'base',0
		db 2, 85h, 7Ch
		db    1
		db 2 dup(0), 2
		db  23h	; #
		db 8, 5, 5Fh
aFlag		db 'flag',0
		db 2, 86h, 0ACh
		db    0
byte_1045	db 2 dup(0), 2		; DATA XREF: .debug_info:00001F49o
		db  23h	; #
		db 0Ch,	5, 5Fh
aFile		db 'file',0
		db 2, 87h, 0ACh
		db    0
		db 2 dup(0), 2
		db  23h	; #
		db 10h,	5, 5Fh
aCharbuf	db 'charbuf',0          ; DATA XREF: .debug_info:00001F68o
		db    2
		db 88h,	0ACh, 0
		db    0
		align 2
		dw 2302h
		db  14h
		db 5, 5Fh, 62h
aUfsiz		db 'ufsiz',0
		dw 8902h
off_1078	dd offset loc_AA+2	; DATA XREF: .debug_info:00001F84o
		db    2
		db 23h,	18h, 5
a_tmpfname	db '_tmpfname',0
		dw 8A02h
		dd offset _gg_tvbuff_skip
		db    2
		db 23h,	1Ch, 0
		db    6
byte_1095	db 4, 0DDh, 0		; DATA XREF: .debug_info:00001F99o
		db    0
		align 2
		dw 4602h
		db  49h	; I
		db 4Ch,	45h, 0
		db    2
		db 8Bh,	0E5h, 0
		db    0
		align 2
		dw 103h
		db    6
aSignedChar	db 'signed char',0
		db 2, 75h, 69h
aNt8_t		db 'nt8_t',0
		dw 1C04h
		dd offset loc_1AA+2
		db    3
		db 1, 8, 75h
aNsignedChar	db 'nsigned char',0
		db 2, 75h, 69h
aNt32_t		db 'nt32_t',0
		db 4
		db  20h
		dd offset loc_85+1
		db 2, 75h, 69h
aNt64_t		db 'nt64_t',0
		db 4
		db  22h	; "
		dd offset loc_1D9+4
		db 3, 8, 7
aLongLongUnsign	db 'long long unsigned int',0
		db 2
aUin_t		db 'uin_t',0
		dw 0A305h
		dd offset loc_1BC+1
dword_111C	dd 73070403h, 74657A69h, 657079h, 4060407h, 218h, 0DD08h
					; DATA XREF: .debug_info:00002032o
		dd 7C040600h, 2000001h,	745F6767h, 66756276h, 745F66h
		dd 2361A06h, 67040000h,	76745F67h, 66667562h, 22011000h
		dd 283h
		db 9
		dd offset aBuffer	; "buffer"
		db 1, 24h, 12h
		dd 2000002h
		db 23h,	0, 9
		dd offset aLength	; "length"
		db 1
		dd 7825h, 4230200h
		db 9
		dd offset aOffset	; "offset"
		db 1, 26h, 78h
		db    0
		db 2 dup(0), 2
		db  23h	; #
		db 8, 5, 76h
aAlid		db 'alid',0
		db 1, 27h, 0ACh
		db    0
		db 2 dup(0), 2
		db  23h	; #
		db 0Ch,	0, 3
		db    4
aLongUnsignedIn	db 7,'long unsigned int',0
		db    3
		db 2 dup(4), 66h
aLoat		db 'loat',0
		db 0Ah,	1, 67h
aG_tvbuff_is_va	db 'g_tvbuff_is_valid',0
		dw 6701h
		db    1
		dd offset loc_AA+2
		db 1, 0CEh, 2
		db    0
		align 2
aTvb		db 0Bh,'tvb',0
		db 1
		db  67h	; g
off_11E1	dd offset loc_2CA+4	; DATA XREF: .debug_info:000020EFo
		align 2
		dw 406h
		dd offset loc_2D4
		db    8
		dd offset loc_220+3
		db 0Ah,	1, 67h
aG_tvbuff_get_r	db 'g_tvbuff_get_remaining',0
		db 1
		db  75h	; u
		db 1, 78h, 0
unk_1210	db    0			; DATA XREF: .debug_info:00002104o
		align 2
		dw 0B01h
		db    3
		db 2 dup(0), 0Bh
		db  74h	; t
byte_1219	db 76h,	62h, 0		; DATA XREF: .debug_info:0000223Do
		db    1
		db 75h,	0CEh, 2
		db    0
		db 2 dup(0), 0Ah
		db    1
aGg_tvbuff_ha_0	db 'gg_tvbuff_have_remaining',0
		dw 8601h
		dd 0AC01h, 3490100h, 740B0000h,	1006276h, 34986h
		db 0, 0Ch
		dd offset aLength	; "length"
		dw 8601h
		dd offset loc_77+1
		db    0
		db 6, 4, 23h
		db    2
		db 2 dup(0), 0Ah
		db    1
aGg_tvbuff_r_12	db 'gg_tvbuff_read_uint8',0
		dw 0E001h
		dd 19D01h, 37E0100h, 740B0000h,	1006276h, 349E0h, 10D0000h
aGg_tvbuff_r_13	db 'gg_tvbuff_read_packed_uint',0
		db 1
		db  34h	; 4
		db 2 dup(1), 0CDh
		db    1
		db 2 dup(0), 1
off_12BC	dd offset loc_3ED	; DATA XREF: .debug_info:0000215Co
		db  0Eh
		db 74h,	76h, 62h
		db    0
		db 1, 34h, 1
		dd offset loc_347+2
		db  0Fh
		db 76h,	61h, 6Ch
		db    0
		db 1, 36h, 1
		dd offset loc_1CB+2
		db  0Fh
		db 69h,	0, 1
		db  37h	; 7
		db 1, 0ACh, 0
		db    0
		align 2
		dw 760Fh
aAl_len		db 'al_len',0
		db 1
		db  37h	; 7
		db 1, 0ACh, 0
		db    0
		align 2
		dw 0F10h
aOld_val	db 'old_val',0
		db    1
		db 50h,	1, 0CDh
		db    1
		align 4
		db    0
		db 0Dh,	1, 67h
aG_tvbuff_read_	db 'g_tvbuff_read_buff',0
		db 1
		dd 12010167h, 1000002h,	436h, 6276740Eh, 1670100h, 349h
		db 11h
off_1335	dd offset aLength	; DATA XREF: .debug_info:00002241o
					; "length"
		db 1, 67h, 1
		dd offset loc_77+1
dword_1340	dd 6675620Fh, 69010066h, 21201h, 1120000h, 745F6767h, 66756276h
					; DATA XREF: .debug_info:00002256o
		dd 656E5F66h, 34010077h, 34901h
		db 0
		dd offset _gg_tvbuff_new
		dd offset unk_8A
off_136D	dd offset dword_2678	; DATA XREF: .debug_info:off_13A6o
					; .debug_info:00001DC4o
		db 1, 0C6h, 4
		db 2 dup(0), 13h
		dd offset aBuffer	; "buffer"
		db 1
		dd 21234h, 910200h
		db 13h
		dd offset aLength	; "length"
byte_1389	db 1, 34h, 78h		; DATA XREF: .debug_info:000013BAo
					; .debug_info:000014CDo ...
		dd 2000000h, 74140491h,	1006276h, 34936h
		db 0
		dd offset off_2712
		db 15h
		dd offset loc_26
off_13A6	dd offset off_136D	; DATA XREF: .debug_info:000013D9o
					; .debug_info:00001401o ...
		dd offset loc_498+5
		dw 216h
		dd 40010074h
		db 0, 15h
		dd offset loc_7C
		dd offset byte_1389
off_13BE	dd offset loc_4BC	; DATA XREF: .debug_info:000017D8o
		dw 216h
		dd 8020074h, 74021680h
		db 4, 5, 3
		dd offset aGg_tvbuff_newI ; "//	gg_tvbuff_new()	invalid	arguments\n"
		align 4
		db 17h
		dd offset unk_8A
		dd offset off_13A6+3
unk_13DD	db    0			; DATA XREF: .debug_info:00001893o
		dw 0A118h
		db 2, 2	dup(0)
		dd offset _gg_tvbuff_is_valid
		dd offset unk_C1
		dd offset off_275C
		db 1
		dd offset loc_4EE
dword_13F4	dd 2C219h, 910200h	; DATA XREF: .debug_info:00001E1Bo
					; .debug_info:00002252o
		db 17h
		dd offset unk_C1
		dd offset off_13A6+3
		align 2
		dw 0D918h
		db 2, 2	dup(0)
		dd offset _gg_tvbuff_get_remaining
off_140F	dd offset unk_101	; DATA XREF: .debug_info:00001F80o
		dd offset off_2794
		db 1
		dd offset loc_532+1
		dd 2FF19h, 910200h, 2A11Ah
		db 0
		dd offset loc_D6
off_142D	dd offset loc_DA	; DATA XREF: .debug_info:off_F18o
		db 1, 77h, 29h
		dd 1B000005h, 2C2h
		dd offset off_27CC
		db 0, 17h
		dd offset unk_101
		dd offset off_13A6+3
		dw 1800h
		dd offset loc_304+7
		dd offset _gg_tvbuff_have_remaining
		dd offset unk_179
		dd offset off_2802
		dd 5DE01h, 3321900h, 91020000h,	33D1900h, 91020000h, 2A11A04h
		db 2 dup(0)
		dd offset loc_11B
		dd offset loc_11F
		dw 8801h
		dd offset loc_570+6
		dd 2C21Bh
		db 0
		dd offset off_2852
		align 2
		dw 0D91Ah
		db 2, 2	dup(0)
		dd offset loc_126
		dd offset loc_12C
		db 1
		dd 5938Bh, 2FF1B00h
		db 2 dup(0)
		dd offset off_287C
		dw 1A00h
		dd offset loc_304+7
		dd offset loc_130
		dd offset loc_155
		dd 5D48601h, 3D1C0000h,	1C000003h, 332h
		db 1Dh
		dd offset loc_14C
		dd offset byte_1389
		db 16h,	2, 74h
		dd 40080200h, 4740216h
		db 5, 3
		dd offset aGg_tvbuff_have ; "//	gg_tvbuff_have_remaining() failed (%"...
		dw 216h
		dd 91030C74h, 604h
		db 17h
		dd offset unk_179
		dd offset off_13A6+3
		align 2
		dw 11Eh
aGg_tvbuff_sk_0	db 'gg_tvbuff_skip',0
		db 1
		db 9Ch,	1
		dd offset _gg_tvbuff_skip
		dd offset unk_1DE
		dd offset off_289A
		dw 6801h
		dd 1F000006h, 627674h, 3499C01h, 91020000h, 6D611F00h
		dd 746E756Fh, 789C0100h, 2000000h, 0A11A0491h
		db 2, 2	dup(0)
		dd offset loc_194
		dd offset loc_198
		db 1
		dd 63F9Eh, 2C21B00h
		db 2 dup(0)
		dd offset off_28EA
		dw 1500h
		dd offset loc_1D0
		dd offset byte_1389
		dd offset loc_65D+1
		dd 740216h, 16400802h, 5047402h
		db 3
		dd offset aGg_tvbuff_skip ; "//	gg_tvbuff_skip() failed\n"
		align 2
		db 17h
		dd offset unk_1DE
		dd offset off_13A6+3
		align 10h
		dd 6767011Eh, 6276745Fh, 5F666675h, 69776572h, 100646Eh
		db 0B1h, 1
		dd offset _gg_tvbuff_rewind
		dd offset unk_242
		dd offset off_2914
		dw 0F401h
		dd 1F000006h, 627674h, 349B101h, 91020000h, 6D611F00h
		dd 746E756Fh, 78B10100h, 2000000h, 0A11A0491h
		db 2, 2	dup(0)
		dd offset loc_1F8
		dd offset loc_1FC
		db 1
		dd 6CBB3h, 2C21B00h
		db 2 dup(0)
		dd offset off_2964
		dw 1500h
		dd offset loc_234
		dd offset byte_1389
		dd offset loc_6E7+3
		dd 740216h, 16400802h, 5047402h
		db 3
		dd offset aGg_tvbuff_rewi ; "//	gg_tvbuff_rewind() failed\n"
		align 2
		db 17h
		dd offset unk_242
		dd offset off_13A6+3
		align 4
		dd 67670112h, 6276745Fh, 5F666675h, 6374616Dh, 0C8010068h
		dd 0AC01h
		db 0
		dd offset _gg_tvbuff_match
		dd offset unk_2CF
		dd offset off_298E
		db 1, 9Dh, 7
		dd 741F0000h, 1006276h,	349C8h,	910200h, 6C61761Fh, 1006575h
		dd 19DC8h, 4910200h, 2A11Ah
		db 0
		dd offset loc_25B
		dd offset loc_25F
		db 1, 0CAh, 59h
		dd 1B000007h, 2C2h
		dd offset off_29E0
		db 0, 15h
		dd offset loc_290
		dd offset loc_304+7
		dd offset loc_774
		dw 216h
		dd 73020074h, 74021600h, 310104h
		db 15h
		dd offset loc_2C8
		dd offset byte_1389
		dd offset loc_790+3
		db 16h,	2, 74h
		dd 40080200h, 4740216h
		db 5, 3
		dd offset aGg_tvbuff_matc ; "//	gg_tvbuff_match() failed\n"
		dw 1700h
		dd offset unk_2CF
		dd offset off_13A6+3
		dd 34F1800h
		db 2 dup(0)
		dd offset _gg_tvbuff_read_uint8
		dd offset _gg_tvbuff_read_uint32
		dd offset off_2A0A
		dw 3501h
		dd 19000008h, 372h, 1A009102h, 2A1h
		dd offset loc_2E3
		dd offset loc_2E7
		dd 7D8E201h, 0C21B0000h
		db 2, 2	dup(0)
		dd offset off_2A5A
		align 10h
		dd 34F1Ah
		db 0
		dd offset loc_328
		dd offset loc_347
		db 1, 0E0h, 10h
		dd 1B000008h, 372h
		dd offset off_2A84
		db 1Dh
		dd offset loc_343
		dd offset byte_1389
		db 16h,	2, 74h
		dd 40080200h, 4740216h
		db 5, 3
		dd offset aGg_tvbuff_read ; "//	gg_tvbuff_read_uint8() failed at %Iu"...
		align 4
		db 15h
		dd offset loc_314
		dd offset loc_304+7
		dd offset loc_829+2
		db 16h,	2, 74h
		dd 730200h, 4740216h, 17003101h
		dd offset _gg_tvbuff_read_uint32
		dd offset off_13A6+3
		db    0
		db 12h,	1, 67h
aG_tvbuff_rea_0	db 'g_tvbuff_read_uint32',0
		db 1, 0F5h, 1
		dd offset loc_1BC+1
		dd offset _gg_tvbuff_read_uint32
		dd offset unk_3DB
		dd offset off_2A97
		dd 8ED01h, 76741F00h, 0F5010062h, 349h,	14009102h, 6C6176h
		dd 1BDF701h
		db 2 dup(0)
		dd offset off_2B0B
		dw 0A11Ah
		db 2, 2	dup(0)
		dd offset loc_35F
		dd offset loc_363
		db 1
		dd 89FF9h, 2C21B00h
		db 2 dup(0)
		dd offset off_2B1E
		dw 1500h
		dd offset loc_390
		dd offset loc_304+7
		dd offset loc_8B7+3
		dd 740216h, 16007302h, 1047402h
		db 34h,	0, 20h
		dd offset unk_3BB
		db 1
		dd offset off_13BE+1
		db 15h
		dd offset loc_3D4
		dd offset byte_1389
		dd offset loc_8E2+1
		db 16h,	2, 74h
		dd 40080200h, 4740216h
		db 5, 3
		dd offset aGg_tvbuff_re_0 ; "//	gg_tvbuff_read_uint32()	failed at %I"...
		dw 1700h
		dd offset unk_3DB
		dd offset off_13A6+3
		db    0
		db 21h,	1, 67h
aG_tvbuff_rea_1	db 'g_tvbuff_read_uint64',0
		db 1, 0Fh, 1
		dd 1CD01h
		db 0
		dd offset _gg_tvbuff_read_uint64
		dd offset unk_46A
		dd offset off_2B5F
		db 1, 0A8h, 9
		dd 74220000h, 1006276h,	349010Fh, 91020000h, 61762300h
		dd 1101006Ch, 1CD01h
		db 0
		dd offset off_2BAF
		db 24h,	0A1h, 2
		db 2 dup(0)
		dd offset loc_3EF
		dd offset loc_3F3
		dw 1301h
		dd 95B01h, 2C21B00h
		db 2 dup(0)
		dd offset off_2BC7
		dw 1500h
		dd offset loc_420
		dd offset loc_304+7
		dd offset loc_976
		dd 740216h, 16007302h, 1047402h
		db 38h,	0, 17h
		dd offset loc_442
		dd offset unk_13DD
		db 15h
		dd offset loc_45F
		dd offset byte_1389
		dd offset loc_99E
		dd 740216h, 16400802h, 5047402h
		db 3
		dd offset aGg_tvbuff_re_1 ; "//	gg_tvbuff_read_uint64()	failed at %I"...
		align 2
		db 17h
		dd offset unk_46A
		dd offset off_13A6+3
		align 10h
		dd 37E18h
		db 0
		dd offset _gg_tvbuff_read_packed_uint
		dd offset unk_5B6
		dd offset off_2BF1
		db 1, 0D9h, 0Ah
		dd 0A8190000h, 2000003h, 0B4250091h, 3,	3C026h,	3CA2500h
		dd 24000000h, 2A1h
		dd offset loc_482
		dd offset loc_48A
		dd 0F5013901h, 1B000009h, 2C2h
		dd offset off_2C8B
		dd 37E2700h
		db 2 dup(0)
		dd offset loc_498
		dd offset off_3580
		dw 3401h
		dd 0ACF01h, 3A81C00h
		db 2 dup(0), 28h
		dd offset off_35A0
		db 29h
		dd offset loc_3B2+2
		dd offset off_2CD8
		dd 3C029h
		db 0
		dd offset off_2D34
		db 29h,	0CAh, 3
		db 2 dup(0)
		dd offset off_2D48
		db 2Ah
		dd offset off_35C0
		dd offset loc_A5B+1
		db 29h
		dd offset unk_3DB
		dd offset off_2D71
		db 1Dh
		dd offset loc_584
		dd offset byte_1389
		db 16h,	2, 74h
		dd 40080200h, 4740216h
		db 5, 3
		dd offset aGg_tvbuff_re_3 ; "//	gg_tvbuff_read_packed_uint() overflo"...
		align 4
		db 15h
		dd offset loc_4A8
		dd offset loc_304+7
		dd offset loc_A76+1
		db 16h,	2, 74h
		dd 730200h, 4740216h, 15003101h
		dd offset loc_4B5
		dd offset loc_34D+2
		dd offset loc_A86+6
		dd 740216h, 7302h
		db 15h
		dd offset loc_55C
		dd offset byte_1389
		dd offset loc_AB1+1
		db 16h,	2, 74h
		dd 40080200h, 4740216h
		db 5, 3
		dd offset aGg_tvbuff_re_2 ; "//	gg_tvbuff_read_packed_uint() packed "...
		dw 216h
		dd 75020874h
		db 2 dup(0), 1Dh
		dd offset loc_5A8
		dd offset byte_1389
		db 16h
		dd 2007402h, 2164008h, 3050474h
		dd offset aGg_tvbuff_re_4 ; "//	gg_tvbuff_read_packed_uint() failed\"...
		dd 17000000h
		dd offset unk_5B6
		dd offset off_13A6+3
		dd 3ED1800h
		db 2 dup(0)
		dd offset _gg_tvbuff_read_buff
		dd offset _gg_tvbuff_read_buff_cpy
		dd offset off_2D99
		dw 0A401h
		dd 1900000Bh, 410h, 19009102h, 41Ch, 29049102h,	428h
		dd offset off_2E01
		dd 2A124h
		db 0
		dd offset loc_5D0
		dd offset loc_5D4
		db 1, 6Bh, 1
		dd offset aGg_tvbuff_have+2 ; "	gg_tvbuff_have_remaining() failed (%Iu"...
		dd 2C21Bh
		db 0
		dd offset off_2E14
		align 2
		dw 0ED24h
		db 3, 2	dup(0)
		dd offset loc_610
		dd offset loc_633
		db 1
		dd 0B7E0167h, 1C1B0000h
		db 4, 2	dup(0)
		dd offset off_2E3E
		db 1Bh
		dd offset loc_410
		dd offset off_2E51
		db 2Bh
		dd offset loc_610
		dd offset loc_633
		db 26h,	28h, 4
		db 2 dup(0), 1Dh
		dd offset loc_62F
		dd offset byte_1389
		db 16h
		dd 2007402h, 2164008h, 3050474h
		dd offset aGg_tvbuff_get_ ; "//	gg_tvbuff_get_buff() failed at %Iu:%"...
		dd 0C740216h, 7602h
		db 2 dup(0), 15h
		dd offset loc_5E7
		dd offset loc_304+7
		dd offset aGg_tvbuff_matc+0Ah ;	"ff_match() failed\n"
		db 16h
		dd 2007402h, 2160073h, 76020474h
		db 2 dup(0), 17h
		dd offset _gg_tvbuff_read_buff_cpy
		dd offset off_13A6+3
		align 4
		db  2Ch	; ,
		db 1, 2	dup(67h)
a_tvbuff_read_b	db '_tvbuff_read_buff_cpy',0
		dw 8101h
		db 2 dup(1)
		dd offset _gg_tvbuff_read_buff_cpy
		dd offset unk_6F1
		dd offset off_2E64
		dw 8301h
		dd 2200000Ch, 627674h, 49018101h, 2000003h
		db 91h,	0, 2Dh
		dd offset aBuffer	; "buffer"
		db 1
		dd 17C0181h, 91020000h
		db 4, 2Dh
		dd offset aLength	; "length"
		dw 8101h
		dd 7801h, 8910200h, 2A124h
		db 0
		dd offset loc_656
		dd offset loc_65A
		db 1, 83h, 1
		dd offset aGg_tvbuff_re_1+16h ;	"64() failed at	%Iu\n"
		dd 2C21Bh
		db 0
		dd offset off_2EFE
		align 2
		db 15h
		dd offset loc_688
		dd offset loc_304+7
		dd offset aGg_tvbuff_re_4+7 ; "vbuff_read_packed_uint()	failed\n"
		db 16h
		dd 2007402h, 2160073h, 91030474h, 15000608h
		dd offset loc_6BC
		dd offset byte_1389
		dd offset aGg_tvbuff_re_4+26h ;	"\n"
		dd 740216h, 16800802h, 5047402h
		db 3
		dd offset aGg_tvbuff_newI ; "//	gg_tvbuff_new()	invalid	arguments\n"
		align 2
		db 15h
		dd offset loc_6E7
		dd offset byte_1389
		dd offset aGg_tvbuff_re_2+1Dh ;	"() packed uint	size too big: %d\n"
		db 16h
		dd 2007402h, 2164008h, 3050474h
		dd offset aGg_tvbuff_re_5 ; "//	gg_tvbuff_read_buff() failed at	%Iu:"...
		db 0, 17h
		dd offset unk_6F1
		dd offset off_13A6+3
		dw 2100h
		db    1
aGg_tvbuff_r_14	db 'gg_tvbuff_read_str',0
		dd 101A201h, 212h
		dd offset _gg_tvbuff_read_str
		dd offset unk_795
		dd offset off_2F28
		dd 0DA501h, 76742200h, 0A2010062h, 34901h, 910200h
		db 2Dh
		dd offset aLength	; "length"
		db 1, 0A2h, 1
		dd offset aGg_tvbuff_re_9+29h ;	"ee memory: %d + 1\n"
		dd 2E049102h
		dd offset aOffset	; "offset"
		dd 7801A401h
		db 3 dup(0)
		dd offset off_2FC2
aStr_len	db '#str_len',0
		dd 0BD01A501h
		db 1, 2	dup(0)
		dd offset off_2FE0
aStr		db '#str',0
		dd 1201A601h
		db 2, 2	dup(0)
		dd offset off_3009
		db 24h
		dd offset loc_29E+3
		dd offset loc_70E
		dd offset loc_712
		dd 2101A801h, 1B00000Dh, 2C2h
		dd offset off_301C
		db 0, 15h
		dd offset loc_724
		dd offset loc_37E
		dd offset aGg_tvbuff_re_6+16h ;	") failed at %Iu:%d\n"
		dw 216h
		dd 73020074h
		db 2 dup(0), 15h
		dd offset loc_739
		dd offset loc_304+7
		dd offset aGg_tvbuff_re_7+6 ; "tvbuff_read_str_dup() failed at %Iu:%d\"...
		db 16h
		dd 2007402h, 2160073h, 76020474h
		db 2 dup(0), 15h
		dd offset loc_749
		dd offset loc_3ED
		dd offset aGg_tvbuff_re_7+22h ;	" at %Iu:%d\n"
		db 16h
		dd 2007402h, 2160073h, 76020474h
		db 2 dup(0), 15h
		dd offset loc_78C
		dd offset byte_1389
		dd offset aGg_tvbuff_re_9+1Fh ;	" enough free memory: %d + 1\n"
		db 16h
		dd 2007402h, 2164008h, 3050474h
		dd offset aGg_tvbuff_re_6 ; "//	gg_tvbuff_read_str() failed at %Iu:%"...
		dd 8740216h, 16007502h,	20C7402h, 17000076h
		dd offset unk_795
		dd offset off_13A6+3
		db    0
		db 6, 4, 78h
		db    0
		db 2 dup(0), 2Ch
		db    1
aGg_tvbuff_r_15	db 'gg_tvbuff_read_str_dup',0
		dd 101CD01h
		dd offset _gg_tvbuff_read_str_dup
		dd offset unk_892
		dd offset off_3052
		dd 0F3001h, 76742200h, 0CD010062h, 34901h, 910200h, 74736422h
		dd 1CD0100h, 21Dh, 2E049102h
		dd offset aOffset	; "offset"
		dd 7801CF01h
		db 3 dup(0)
		dd offset off_30EC
aStr_len_0	db '#str_len',0
		dd 0BD01D001h
		db 1, 2	dup(0)
		dd offset off_30FF
aStr_0		db '#str',0
		dd 7C01D101h
		db 1, 2	dup(0)
		dd offset off_311D
		db 24h
		dd offset loc_29E+3
		dd offset loc_7B2
		dd offset loc_7B6
		dd 4901D301h, 1B00000Eh, 2C2h
		dd offset off_3151
		db 0, 15h
		dd offset loc_7E3
		dd offset loc_37E
		dd offset aGg_tvbuff_expe+16h ;	"uint8() expected %#02x, but %#02x found"...
		dw 216h
		dd 73020074h
		db 2 dup(0), 15h
		dd offset loc_7F8
		dd offset loc_304+7
		dd offset aGg_tvbuff_expe+32h ;	"%#02x found at	%Iu\n"
		db 16h
		dd 2007402h, 2160073h, 77020474h
		db 2 dup(0), 15h
		dd offset loc_818
		dd offset byte_1389
		dd offset aGg_tvbuff_ex_0+17h ;	"int32() expected %#08x, but %#08x found"...
		db 16h
		dd 2007402h, 2164008h, 3050474h
		dd offset aGg_tvbuff_re_7 ; "//	gg_tvbuff_read_str_dup() failed	at %"...
		dd 8740216h, 16007502h,	20C7402h, 15000077h
		dd offset loc_827
		dd offset off_136D
		dd offset aGg_tvbuff_ex_0+2Ch ;	"x, but	%#08x found at %Iu\n"
		dd 740216h, 17702h
		db 15h
		dd offset loc_83D
		dd offset aGg_tvbuff_matc+14h ;	" failed\n"
		dd offset aGg_tvbuff_ex_1+7 ; "vbuff_expected_eob() unexpected %Iu byt"...
		db 16h,	2, 74h
		dd 730200h, 4740216h, 16007502h, 2087402h, 15000077h
		dd offset loc_85C
		dd offset byte_1389
		dd offset aGg_tvbuff_ex_1+26h ;	" %Iu bytes, first=%#02x\n"
		dd 740216h, 16400802h, 5047402h
		db 3
		dd offset aGg_tvbuff_re_8 ; "//	gg_tvbuff_read_str_dup() destination"...
		align 2
		db 17h
		dd offset loc_866
		dd offset dword_13F4+6
		db 15h
		dd offset loc_881
		dd offset byte_1389
		dd offset aGnuC4_7_2+2	; "U C 4.7.2"
		dd 740216h, 16800802h, 5047402h
		db 3
		dd offset aGg_tvbuff_re_9 ; "//	gg_tvbuff_read_str_dup() not enough "...
		align 2
		db 17h
		dd offset unk_892
		dd offset off_13A6+3
		align 4
		db  21h	; !
		db 1, 2	dup(67h)
a_tvbuff_read_u	db '_tvbuff_read_uin',0
		db 1, 0FAh, 1
		dd 1F701h
		db 0
		dd offset _gg_tvbuff_read_uin
		dd offset unk_973
		dd offset off_317B
		db 1, 0A1h, 10h
		dd 74220000h, 1006276h,	34901FAh, 91020000h, 69752300h
		dd 0FC01006Eh, 1F701h
		db 0
		dd offset off_3215
aUin_len	db '#uin_len',0
		dw 0FD01h
		dd 1BD01h
		db 0
		dd offset off_3240
aFull_len	db '#full_len',0
		db 1
		dd 1BD01FDh
		db 2 dup(0)
		dd offset off_3263
aUin_type	db '#uin_type',0
		dd 9D01FE01h
		db 1, 2	dup(0)
		dd offset off_3281
aRaw		db '#raw',0
		dd 1201FF01h
		db 2, 2	dup(0)
		dd offset off_32B5
		db 24h
		dd offset loc_29E+3
		dd offset loc_8AA
		dd offset loc_8AE
		dd 0E9020101h, 1B00000Fh, 2C2h
		dd offset off_32C8
		db 0, 15h
		dd offset loc_8D8
		dd offset loc_37E
		dd offset byte_FFD+1
		dw 216h
		dd 73020074h
		db 2 dup(0), 15h
		dd offset loc_8E2
		dd offset loc_34D+2
		dd offset word_1012+1
		db 16h
		dd 2007402h, 15000073h
		dd offset loc_8EC
		dd offset loc_34D+2
		dd offset unk_1028
		dd 740216h, 7302h
		db 15h
		dd offset loc_91C
		dd offset byte_1389
		dd offset byte_1045+2
		db 16h,	2, 74h
		dd 40080200h, 4740216h
		db 5, 3
		dd offset aGg_tvbuff_r_10 ; "//	gg_tvbuff_read_uin() failed (1)\n"
		dw 1500h
		dd offset loc_934
		dd offset loc_3ED
		dd offset aCharbuf+7	; ""
		dd 740216h, 16007302h, 2047402h, 15000075h
		dd offset loc_944
		dd offset off_140F+1
		dd offset off_1078
		dd 4740216h, 7502h
		db 15h
		dd offset loc_960
		dd offset byte_1389
		dd offset byte_1095+2
		db 16h,	2, 74h
		dd 40080200h, 4740216h
		db 5, 3
		dd offset aGg_tvbuff_r_11 ; "//	gg_tvbuff_read_uin() failed (2)\n"
		dw 1700h
		dd offset unk_973
		dd offset off_13A6+3
		db    0
		db 2Ch,	1, 67h
aG_tvbuff_expec	db 'g_tvbuff_expected_uint8',0
		dd 1022801h
		dd offset _gg_tvbuff_expected_uint8
		dd offset unk_9DF
		dd offset off_32F2
		dd 115D01h, 76742200h, 28010062h, 34902h, 910200h, 6C617622h
		dd 1006575h, 19D0228h, 91020000h, 6F672304h, 2A010074h
		dd 19D02h
		db 0
		dd offset off_3374
		db 2Eh
		dd offset aOffset	; "offset"
		dw 2B01h
		dd 7802h
		db 0
		dd offset off_3387
		db 15h
		dd offset loc_999
		dd offset loc_34D+2
		dd offset dword_111C+0Ah
		dw 216h
		dd 76020074h
		db 2 dup(0), 15h
		dd offset loc_9C7
		dd offset byte_1389
		dd offset dword_111C+37h
		db 16h
		dd 2007402h, 2164008h, 3050474h
		dd offset aGg_tvbuff_expe ; "//	gg_tvbuff_expected_uint8() expected "...
		dd 8740216h, 16007302h,	2107402h, 17000077h
		dd offset unk_9DF
		dd offset off_13A6+3
		db    0
		db 2Ch,	1, 67h
aG_tvbuff_exp_0	db 'g_tvbuff_expected_uint32',0
		db 1, 3Fh, 2
		db 1
		dd offset _gg_tvbuff_expected_uint32
		dd offset unk_A47
		dd offset off_33A5
		db 1, 1Ah, 12h
		dd 74220000h, 1006276h,	349023Fh, 91020000h, 61762200h
		dd 65756Ch, 0BD023F01h,	2000001h, 67230491h, 100746Fh
		dd 1BD0241h
		db 2 dup(0)
		dd offset off_3427
		db 2Eh
		dd offset aOffset	; "offset"
		db 1
		dd 780242h
		db 2 dup(0)
		dd offset off_343A
		db 15h
		dd offset loc_A04
		dd offset loc_835
		dd offset off_11E1+2
		db 16h
		dd 2007402h, 15000073h
		dd offset loc_A2F
		dd offset byte_1389
		dd offset unk_1210
		dd 740216h, 16400802h, 5047402h
		db 3
		dd offset aGg_tvbuff_ex_0 ; "//	gg_tvbuff_expected_uint32() expected"...
		db 16h,	2, 74h
		dd 760208h, 10740216h, 7702h
		db 17h
		dd offset unk_A47
		dd offset off_13A6+3
		align 2
		dw 12Ch
aGg_tvbuff_ex_2	db 'gg_tvbuff_expected_eob',0
		db 1
		db 55h,	2, 1
		dd offset _gg_tvbuff_expected_eob
		dd offset unk_AA7
		dd offset off_3458
		db 1
		dd offset off_12BC
aTvb_0		db '"tvb',0
		db 1, 55h, 2
		dd offset loc_2CA+4
		dd 24009102h, 2A1h
		dd offset loc_A5B
		dd offset loc_A5F
		dd 75025701h, 1B000012h, 2C2h
		dd offset off_3490
		dd 2D92400h
		db 2 dup(0)
		dd offset loc_A66
		dd offset loc_A69
		dw 5A01h
		dd 129302h, 2FF1B00h
		db 2 dup(0)
		dd offset off_34AF
		dw 1500h
		dd offset loc_A92
		dd offset byte_1389
		dd offset aGg_tvbuff_r_13+1Ah ;	""
		dd 740216h, 16400802h, 5047402h
		db 3
		dd offset aGg_tvbuff_ex_1 ; "//	gg_tvbuff_expected_eob() unexpected "...
		align 2
		db 17h
		dd offset unk_AA7
		dd offset off_13A6+3
		align 4
		dd 67670112h, 6276745Fh, 5F666675h, 736F6C63h, 55010065h
		dd 0AC01h
		db 0
		dd offset _gg_tvbuff_close
		dd offset unk_AF1
		dd offset off_34CE
		db 1, 54h, 13h
		dd 741F0000h, 1006276h,	34955h,	910200h, 6C61762Fh, 1006469h
		dd 0AC57h, 30560100h, 2A1h
		dd offset loc_AC4
		dd offset off_35E0
		dd 13205A01h, 0C21B0000h
		db 2, 2	dup(0)
		dd offset off_3536
		align 4
		db 15h
		dd offset loc_AC4
		dd offset byte_1219+1
		dd offset off_1335
		db 16h,	2, 74h
		dd 730200h
		db 0, 15h
		dd offset loc_AD3
		dd offset dword_13F4+6
		dd offset dword_1340+0Ah
		dw 216h
		dd 73020074h
		db 2 dup(0), 17h
		dd offset unk_AF1
		dd offset off_13A6+3
		align 4
		dd 18231h, 135F00h, 33003200h, 626F695Fh, 549A0200h, 1000013h
		dd 6D013401h, 6F6C6C61h, 64070063h, 2100101h, 89010000h
		dd 35000013h, 78h, 67013600h, 65645F67h, 677562h, 1063B05h
		dd 13A901h, 0AC3500h, 12350000h, 37000002h, 5F013800h
		dd 6174735Fh, 635F6B63h, 665F6B68h, 6C6961h, 34010101h
		dd 5F676701h, 33786966h, 0EF050032h, 1BD0106h, 0DD010000h
		dd 35000013h, 1BDh, 67013900h, 69665F67h, 343678h, 0CD01B008h
		dd 1000001h, 13FAh, 1CD35h, 1360000h, 65657266h, 1660700h
		dd 14100101h, 10350000h, 2, 6767013Ah, 7274735Fh, 5F6F745Fh
		dd 6E6975h, 0F701AE08h,	1000001h, 21235h, 0AC3500h, 0
_debug_info	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_debug_abbrev	segment	byte public 'DATA' use32
		assume cs:_debug_abbrev
		;org 234Ch
dword_234C	dd 25011101h, 30B1308h,	11081B08h, 10011201h, 2000006h
					; DATA XREF: .debug_info:00000F1Eo
		dd 8030016h, 0B3B0B3Ah,	1349h, 0B002403h, 30B3E0Bh, 4000008h
		dd 8030113h, 0B3A0B0Bh,	13010B3Bh, 0D050000h, 3A080300h
		dd 490B3B0Bh, 0A3813h, 0F0600h,	13490B0Bh, 0F070000h, 0B0B00h
		dd 260800h, 1349h, 3000D09h, 3B0B3A0Eh,	3813490Bh, 0A00000Ah
		dd 0C3F012Eh, 0B3A0803h, 0C270B3Bh, 0B201349h, 1301h, 300050Bh
		dd 3B0B3A08h, 13490Bh, 50C00h, 0B3A0E03h, 13490B3Bh, 2E0D0000h
		dd 30C3F01h, 3B0B3A08h,	490C2705h, 10B2013h, 0E000013h
		dd 8030005h, 53B0B3Ah, 1349h, 300340Fh,	3B0B3A08h, 134905h
		dd 10B1000h, 5110000h, 3A0E0300h, 49053B0Bh, 12000013h
		dd 0C3F012Eh, 0B3A0803h, 0C270B3Bh, 1111349h, 6400112h
		dd 10C4297h, 13000013h,	0E030005h, 0B3B0B3Ah, 0A021349h
		dd 34140000h, 3A080300h, 490B3B0Bh, 60213h, 82891500h
		dd 1110101h, 13011331h,	8A160000h, 2000182h, 0A42910Ah
		dd 89170000h, 11000182h, 133101h, 12E1800h, 1111331h, 6400112h
		dd 10C4297h, 19000013h,	13310005h, 0A02h, 31011D1Ah, 12011113h
		dd 590B5801h, 13010Bh, 51B00h, 6021331h, 51C0000h, 133100h
		dd 82891D00h, 1110101h,	1331h, 3F012E1Eh, 3A08030Ch, 270B3B0Bh
		dd 1201110Ch, 97064001h, 13010C42h, 51F0000h, 3A080300h
		dd 490B3B0Bh, 0A0213h, 82892000h, 1110001h, 310C4295h
		dd 21000013h, 0C3F012Eh, 0B3A0803h, 0C27053Bh, 1111349h
		dd 6400112h, 10C4297h, 22000013h, 8030005h, 53B0B3Ah, 0A021349h
		dd 34230000h, 3A080300h, 49053B0Bh, 60213h, 11D2400h, 1111331h
		dd 0B580112h, 13010559h, 34250000h, 1C133100h, 2600000Bh
		dd 13310034h, 1D270000h, 52133101h, 58065501h, 105590Bh
		dd 28000013h, 655010Bh,	34290000h, 2133100h, 2A000006h
		dd 655010Bh, 1301h, 11010B2Bh, 11201h, 12E2C00h, 8030C3Fh
		dd 53B0B3Ah, 1110C27h, 6400112h, 10C4297h, 2D000013h, 0E030005h
		dd 53B0B3Ah, 0A021349h,	342E0000h, 3A0E0300h, 49053B0Bh
		dd 60213h, 342F00h, 0B3A0803h, 13490B3Bh, 0A02h, 31011D30h
		dd 55015213h, 590B5806h, 13010Bh, 1013100h, 13011349h
		dd 21320000h, 33000000h, 8030034h, 0B3B0B3Ah, 0C3F1349h
		dd 0C3Ch, 3F012E34h, 3A08030Ch,	27053B0Bh, 3C13490Ch, 13010Ch
		dd 53500h, 1349h, 3F012E36h, 3A08030Ch,	27053B0Bh, 10C3C0Ch
		dd 37000013h, 18h, 3F002E38h, 2708030Ch, 3C0C340Ch, 3900000Ch
		dd 0C3F012Eh, 0B3A0803h, 0C270B3Bh, 0C3C1349h, 1301h, 3F012E3Ah
		dd 3A08030Ch, 270B3B0Bh, 3C13490Ch, 0Ch
_debug_abbrev	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_debug_loc	segment	byte public 'DATA' use32
		assume cs:_debug_loc
		;org 2678h
dword_2678	dd 0			; DATA XREF: .debug_info:off_136Do
		dd 1, 4740002h,	1, 2, 8740002h,	2, 3, 0C740002h, 3, 4
		dd 10740002h, 4, 7, 14740002h, 7, 5Fh, 0C0740003h, 5F00h
		dd 6000h, 74000200h, 6014h, 6100h, 74000200h, 6110h, 6200h
		dd 74000200h, 620Ch, 6300h, 74000200h, 6308h, 6400h, 74000200h
		dd 6404h, 8A00h, 74000300h, 0C0h, 0
		db 2 dup(0)
off_2712	dd offset loc_28	; DATA XREF: .debug_info:0000139Do
		dd offset loc_33
		dw 1
		dd offset dword_3350
		dd 5C00h, 53000100h, 5Ch, 64h, 64500001h, 85000000h, 1000000h
		dd 855300h, 890000h, 10000h, 8950h, 8A00h, 53000100h, 2	dup(0)
off_275C	dd offset _gg_tvbuff_is_valid ;	DATA XREF: .debug_info:000013EBo
		dd offset loc_8F
		dd 4740002h, 8Fh, 0B5h,	20740002h, 0B5h, 0B8h, 4740002h
		dd 0B8h, 0C1h, 20740002h, 2 dup(0)
off_2794	dd offset _gg_tvbuff_get_remaining ; DATA XREF:	.debug_info:00001413o
		dd offset loc_C7
		dd 4740002h, 0C7h, 0F6h, 20740002h, 0F6h, 0F8h,	4740002h
		dd 0F8h, 101h, 20740002h, 2 dup(0)
off_27CC	dd offset loc_D6	; DATA XREF: .debug_info:0000143Co
		dd offset loc_F1
		dd 0F1520001h, 0F7000000h, 2000000h, 0F7009100h, 0FC000000h
		dd 1000000h, 0FC5200h, 1010000h, 20000h, 91h, 0
		db 2 dup(0)
off_2802	dd offset _gg_tvbuff_have_remaining ; DATA XREF: .debug_info:00001458o
		dd offset loc_105
		dw 2
		dd 1050474h, 1080000h, 20000h, 1080874h, 1640000h, 20000h
		dd 1643074h, 1650000h, 20000h, 1650874h, 1680000h, 20000h
		dd 1680474h, 1790000h, 20000h, 3074h, 0
		db 2 dup(0)
off_2852	dd offset loc_11B	; DATA XREF: .debug_info:00001489o
		dd offset locret_165
		dw 1
		dd 16553h, 16600h, 91000200h, 16600h, 17900h, 53000100h
		dd 2 dup(0)
off_287C	dd offset loc_126	; DATA XREF: .debug_info:000014A6o
		dd offset loc_155
		dd 66530001h, 6F000001h, 1000001h, 5300h, 0
		db 2 dup(0)
off_289A	dd offset _gg_tvbuff_skip ; DATA XREF: .debug_info:00001512o
		dd offset loc_17D
		dw 2
		dd 17D0474h, 1800000h, 20000h, 1800874h, 1B90000h, 20000h
		dd 1B93074h, 1BA0000h, 20000h, 1BA0874h, 1BC0000h, 20000h
		dd 1BC0474h, 1DE0000h, 20000h, 3074h, 0
		db 2 dup(0)
off_28EA	dd offset loc_194	; DATA XREF: .debug_info:00001552o
		dd offset locret_1BA
		dw 1
		dd 1BA53h, 1BB00h, 91000200h, 1BB00h, 1DE00h, 53000100h
		dd 2 dup(0)
off_2914	dd offset _gg_tvbuff_rewind ; DATA XREF: .debug_info:0000159Eo
		dd offset loc_1E1
		dd 4740002h, 1E1h, 1E4h, 8740002h, 1E4h, 21Eh, 30740002h
		dd 21Eh, 21Fh, 8740002h, 21Fh, 220h, 4740002h, 220h, 242h
		dd 30740002h, 2	dup(0)
off_2964	dd offset loc_1F8	; DATA XREF: .debug_info:000015DEo
		dd offset locret_21F
		dd 1F530001h, 20000002h, 2000002h, 20009100h, 42000002h
		dd 1000002h, 5300h, 0
		db 2 dup(0)
off_298E	dd offset _gg_tvbuff_match ; DATA XREF:	.debug_info:0000162Do
		dd offset loc_245
		dw 2
		dd 2450474h, 2480000h, 20000h, 2480874h, 2770000h, 30000h
		dd 7700C074h, 78000002h, 2000002h, 78087400h, 7C000002h
		dd 2000002h, 7C047400h,	0CF000002h, 3000002h, 0C07400h
		dd 2 dup(0)
off_29E0	dd offset loc_25B	; DATA XREF: .debug_info:0000166Co
		dd offset locret_278
		dd 78530001h, 79000002h, 2000002h, 79009100h, 0CF000002h
		dd 1000002h, 5300h, 0
		db 2 dup(0)
off_2A0A	dd offset _gg_tvbuff_read_uint8	; DATA XREF: .debug_info:000016C2o
		dd offset loc_2D1
		dw 2
		dd 2D10474h, 2D40000h, 20000h, 2D40874h, 2FF0000h, 20000h
		dd 2FF3074h, 3000000h, 20000h, 3000874h, 3040000h, 20000h
		dd 3040474h, 34C0000h, 20000h, 3074h, 0
		db 2 dup(0)
off_2A5A	dd offset loc_2E3	; DATA XREF: .debug_info:000016EBo
		dd offset locret_300
		dw 1
		dd 30053h, 30100h, 91000200h, 30100h, 34C00h, 53000100h
		dd 2 dup(0)
off_2A84	dd offset loc_328	; DATA XREF: .debug_info:00001708o
		dd offset loc_347
		dd 530001h, 0
		db 3 dup(0)
off_2A97	dd offset _gg_tvbuff_read_uint32 ; DATA	XREF: .debug_info:00001774o
		dd offset loc_34D
		db 2
		dd 4D047400h, 50000003h, 2000003h, 50087400h, 7B000003h
		dd 2000003h, 7B307400h,	7C000003h, 2000003h, 7C087400h
		dd 80000003h, 2000003h,	80047400h, 0B5000003h, 2000003h
		dd 0B5307400h, 0B6000003h, 2000003h, 0B6087400h, 0BC000003h
		dd 2000003h, 0BC047400h, 0DB000003h, 2000003h, 307400h
		dd 0
		db 3 dup(0)
off_2B0B	dd offset loc_39C	; DATA XREF: .debug_info:00001796o
		dd offset loc_3B6+4
		db 1
		dd 5200h, 0
		db 2 dup(0)
off_2B1E	dd offset loc_35F	; DATA XREF: .debug_info:000017B2o
		dd offset locret_37C
		dw 1
		dd 37C53h, 37D00h, 91000200h, 37D00h, 3B600h, 53000100h
		dd 3B6h, 3BBh, 910002h,	3BBh, 3DBh, 530001h, 0
		db 3 dup(0)
off_2B5F	dd offset _gg_tvbuff_read_uint64 ; DATA	XREF: .debug_info:0000182Do
		dd offset loc_3DD
		db 2
		dd 0DD047400h, 0E0000003h, 2000003h, 0E0087400h, 0D000003h
		dd 2000004h, 0D307400h,	0E000004h, 2000004h, 0E087400h
		dd 10000004h, 2000004h,	10047400h, 6A000004h, 2000004h
		dd 307400h, 0
		db 3 dup(0)
off_2BAF	dd offset loc_430	; DATA XREF: .debug_info:00001851o
		dd offset loc_43D+4
		db 6
		dd 4935000h, 49352h, 0
		db 3 dup(0)
off_2BC7	dd offset loc_3EF	; DATA XREF: .debug_info:0000186Eo
		dd offset locret_40E
		db 1
		dd 40E5300h, 40F0000h, 20000h, 40F0091h, 46A0000h, 10000h
		dd 53h,	0
		db 0
off_2BF1	dd offset _gg_tvbuff_read_packed_uint ;	DATA XREF: .debug_info:000018CDo
		dd offset loc_46D
		db 2, 0, 74h
		dd 46D04h, 46E00h, 74000200h, 46E08h, 46F00h, 74000200h
		dd 46F0Ch, 47000h, 74000200h, 47010h, 47300h, 74000200h
		dd 47314h, 53700h, 74000300h, 53700D0h,	5380000h, 20000h
		dd 5381474h, 5390000h, 20000h, 5391074h, 53A0000h, 20000h
		dd 53A0C74h, 53B0000h, 20000h, 53B0874h, 53C0000h, 20000h
		dd 53C0474h, 5B60000h, 30000h, 0D074h, 0
		db 3 dup(0)
off_2C8B	dd offset loc_482	; DATA XREF: .debug_info:00001908o
		dd offset loc_4EE
		db 1
		dd 4EE5300h, 53C0000h, 20000h, 53C0091h, 5690000h, 10000h
		dd 56953h, 59100h, 91000200h, 59100h, 5B100h, 53000100h
		dd 5B1h, 5B6h, 910002h,	2 dup(0)
off_2CD8	dd offset loc_4C9	; DATA XREF: .debug_info:00001930o
		dd offset loc_4F0
		dd 89E000Ah, 2 dup(0)
		dd offset loc_4F0
		dd offset loc_4FB
		dd 93560006h, 4935704h,	4FBh, 50Fh, 93510006h, 4935304h
		dd 51Bh, 521h, 93560006h, 4935704h, 569h, 583h,	93510006h
		dd 4935304h, 2 dup(0)
off_2D34	dd offset loc_4C9	; DATA XREF: .debug_info:00001939o
		dd offset loc_4F0
		dd 9F310002h, 2	dup(0)
off_2D48	dd offset loc_498	; DATA XREF: .debug_info:00001942o
		dd offset loc_4E6
		dd 42550001h, 69000005h, 1000005h, 5915500h, 5B10000h
		dd 10000h, 55h,	0
		db 0
off_2D71	dd offset loc_4F0	; DATA XREF: .debug_info:00001954o
		dd offset loc_50F
		db 6, 0, 56h
		dd 93570493h, 56904h, 58D00h, 56000600h, 93570493h, 4
		dd 0
		db 0
off_2D99	dd offset _gg_tvbuff_read_buff ; DATA XREF: .debug_info:000019FEo
		dd offset loc_5B9
		db 2, 0, 74h
		dd 5B904h, 5BA00h, 74000200h, 5BA08h, 5BD00h, 74000200h
		dd 5BD0Ch, 60600h, 74000200h, 60630h, 60700h, 74000200h
		dd 6070Ch, 60800h, 74000200h, 60808h, 60C00h, 74000200h
		dd 60C04h, 63800h, 74000200h, 30h, 0
		db 0
off_2E01	dd offset loc_5F2	; DATA XREF: .debug_info:00001A1Co
		dd offset loc_5F7
		db 1, 0, 50h
		dd 2 dup(0)
off_2E14	dd offset loc_5D0	; DATA XREF: .debug_info:00001A39o
		dd offset loc_607
		dd 7530001h, 9000006h, 2000006h, 9009100h, 38000006h, 1000006h
		dd 5300h, 0
		db 2 dup(0)
off_2E3E	dd offset loc_610	; DATA XREF: .debug_info:00001A57o
		dd offset loc_633
		dw 1
		dd offset loc_54+2
		dd 0
		db 0
off_2E51	dd offset loc_610	; DATA XREF: .debug_info:00001A60o
		dd offset loc_633
		db 1, 0, 53h
		dd 2 dup(0)
off_2E64	dd offset _gg_tvbuff_read_buff_cpy ; DATA XREF:	.debug_info:00001AE2o
		dd offset loc_639
		dd 4740002h, 639h, 63Ah, 8740002h, 63Ah, 63Bh, 0C740002h
		dd 63Bh, 63Ch, 10740002h, 63Ch,	63Fh, 14740002h, 63Fh
		dd 670h, 0D0740003h, 67000h, 67100h, 74000200h,	67114h
		dd 67200h, 74000200h, 67210h, 67300h, 74000200h, 6730Ch
		dd 67400h, 74000200h, 67408h, 67800h, 74000200h, 67804h
		dd 6F100h, 74000300h, 0D0h, 0
		db 2 dup(0)
off_2EFE	dd offset loc_656	; DATA XREF: .debug_info:00001B31o
		dd offset loc_671
		dw 1
		dd 67153h, 67500h, 91000200h, 67500h, 6F100h, 53000100h
		dd 2 dup(0)
off_2F28	dd offset _gg_tvbuff_read_str ;	DATA XREF: .debug_info:00001BC0o
		dd offset loc_6F5
		dd 4740002h, 6F5h, 6F6h, 8740002h, 6F6h, 6F7h, 0C740002h
		dd 6F7h, 6F8h, 10740002h, 6F8h,	6FBh, 14740002h, 6FBh
		dd 769h, 0C0740003h, 76900h, 76A00h, 74000200h,	76A14h
		dd 76B00h, 74000200h, 76B10h, 76C00h, 74000200h, 76C0Ch
		dd 76D00h, 74000200h, 76D08h, 77000h, 74000200h, 77004h
		dd 79500h, 74000300h, 0C0h, 0
		db 2 dup(0)
off_2FC2	dd offset loc_71C	; DATA XREF: .debug_info:00001BF3o
		dd offset loc_75A
		dw 1
		dd 76E55h, 78C00h, 55000100h, 2	dup(0)
off_2FE0	dd offset loc_726	; DATA XREF: .debug_info:00001C07o
		dd offset loc_729
		dd 29500001h, 5A000007h, 1000007h, 76E5600h, 78C0000h
		dd 10000h, 56h,	0
		db 0
off_3009	dd offset loc_749	; DATA XREF: .debug_info:00001C17o
		dd offset loc_75A
		db 1, 0, 50h
		dd 2 dup(0)
off_301C	dd offset loc_70E	; DATA XREF: .debug_info:00001C34o
		dd offset loc_74C
		dd 4C530001h, 6E000007h, 2000007h, 6E009100h, 8C000007h
		dd 1000007h, 78C5300h, 7950000h, 20000h, 91h, 0
		db 2 dup(0)
off_3052	dd offset _gg_tvbuff_read_str_dup ; DATA XREF: .debug_info:00001CE8o
		dd offset loc_799
		dw 2
		dd 7990474h, 79A0000h, 20000h, 79A0874h, 79B0000h, 20000h
		dd 79B0C74h, 79C0000h, 20000h, 79C1074h, 79F0000h, 20000h
		dd 79F1474h, 7D00000h, 30000h, 0D000C074h, 0D1000007h
		dd 2000007h, 0D1147400h, 0D2000007h, 2000007h, 0D2107400h
		dd 0D3000007h, 2000007h, 0D30C7400h, 0D4000007h, 2000007h
		dd 0D4087400h, 0D8000007h, 2000007h, 0D8047400h, 92000007h
		dd 3000008h, 0C07400h, 2 dup(0)
off_30EC	dd offset loc_7DB	; DATA XREF: .debug_info:00001D1Bo
		dd offset loc_829
		dd 550001h, 0
		db 3 dup(0)
off_30FF	dd offset loc_7E5	; DATA XREF: .debug_info:00001D2Fo
		dd offset loc_7E8
		db 1
		dd 7E85000h, 88D0000h, 10000h, 57h, 0
		db 0
off_311D	dd offset loc_829	; DATA XREF: .debug_info:00001D3Fo
		dd offset loc_838+4
		db 1, 0, 50h
		dd offset loc_838+4
		dd offset loc_86D
		dd 6D550001h, 80000008h, 1000008h, 8805000h, 88D0000h
		dd 10000h, 55h,	0
		db 0
off_3151	dd offset loc_7B2	; DATA XREF: .debug_info:00001D5Co
		dd offset loc_7D1
		db 1, 0, 53h
		dd offset loc_7D1
		dd offset unk_7D5
		dd 910002h, 7D5h, 892h,	530001h, 0
		db 3 dup(0)
off_317B	dd offset _gg_tvbuff_read_uin ;	DATA XREF: .debug_info:00001E6Do
		dd offset loc_895
		db 2
		dd 95047400h, 96000008h, 2000008h, 96087400h, 97000008h
		dd 2000008h, 970C7400h,	98000008h, 2000008h, 98107400h
		dd 9B000008h, 2000008h,	9B147400h, 0CA000008h, 3000008h
		dd 0C07400h, 8CAh, 8CBh, 14740002h, 8CBh, 8CCh,	10740002h
		dd 8CCh, 8CDh, 0C740002h, 8CDh,	8CEh, 8740002h,	8CEh, 8D0h
		dd 4740002h, 8D0h, 973h, 0C0740003h, 2 dup(0)
		db 0
off_3215	dd offset loc_8AA	; DATA XREF: .debug_info:00001E91o
		dd offset loc_8B7
		db 2, 0, 30h
		dd 8CF9Fh, 94400h, 30000200h, 9449Fh, 94C00h, 50000100h
		dd 2 dup(0)
off_3240	dd offset loc_8EC	; DATA XREF: .debug_info:00001EA5o
		dd offset loc_8F6
		dd 700006h, 9F1AFF08h, 8F6h, 96Eh, 550001h, 0
		db 3 dup(0)
off_3263	dd offset loc_8DA	; DATA XREF: .debug_info:00001EBAo
		dd offset loc_8DD+4
		db 1
		dd 8E15000h, 96E0000h, 10000h, 56h, 0
		db 0
off_3281	dd offset loc_8E4	; DATA XREF: .debug_info:00001ECFo
		dd offset loc_8E7+4
		db 1, 0, 50h
		dd offset loc_8E7+4
		dd offset unk_925
		dd 25570001h, 33000009h, 1000009h, 9335200h, 96E0000h
		dd 10000h, 57h,	0
		db 0
off_32B5	dd offset loc_934	; DATA XREF: .debug_info:00001EDFo
		dd offset loc_93F+4
		db 1, 0, 50h
		dd 2 dup(0)
off_32C8	dd offset loc_8AA	; DATA XREF: .debug_info:00001EFCo
		dd offset loc_8CB
		dd 0CB530001h, 0CF000008h, 2000008h, 0CF009100h, 73000008h
		dd 1000009h, 5300h, 0
		db 2 dup(0)
off_32F2	dd offset _gg_tvbuff_expected_uint8 ; DATA XREF: .debug_info:00001FE0o
		dd offset loc_975
		dw 2
		dd 9750474h, 9760000h, 20000h, 9760874h, 9770000h, 20000h
		dd 9770C74h, 97A0000h, 20000h, 97A1074h, 9D60000h, 30000h
		dd 0D600C074h, 0D7000009h, 2000009h, 0D7107400h, 0D8000009h
		dd 2000009h, 0D80C7400h, 0D9000009h, 2000009h
dword_3350	dd 0D9087400h, 0DA000009h, 2000009h, 0DA047400h, 0DF000009h
					; DATA XREF: .debug_loc:0000271Co
		dd 3000009h, 0C07400h, 2 dup(0)
off_3374	dd offset loc_999	; DATA XREF: .debug_info:00002015o
		dd offset loc_9C2+4
		dd 500001h, 0
		db 3 dup(0)
off_3387	dd offset loc_991	; DATA XREF: .debug_info:00002025o
		dd offset locret_9D9
		db 1
		dd 9DA5700h, 9DF0000h, 10000h, 57h, 0
		db 0
off_33A5	dd offset _gg_tvbuff_expected_uint32 ; DATA XREF: .debug_info:0000209Do
		dd offset loc_9E1
		db 2, 0, 74h
		dd 9E104h, 9E200h, 74000200h, 9E208h, 9E300h, 74000200h
		dd 9E30Ch, 9E600h, 74000200h, 9E610h, 0A3E00h, 74000300h
		dd 0A3E00C0h, 0A3F0000h, 20000h, 0A3F1074h, 0A400000h
		dd 20000h, 0A400C74h, 0A410000h, 20000h, 0A410874h, 0A420000h
		dd 20000h, 0A420474h, 0A470000h, 30000h, 0C074h, 0
		db 3 dup(0)
off_3427	dd offset loc_A04	; DATA XREF: .debug_info:000020D2o
		dd offset loc_A2A+4
		db 1
		dd 5000h, 0
		db 2 dup(0)
off_343A	dd offset loc_9FC	; DATA XREF: .debug_info:000020E2o
		dd offset locret_A41
		dw 1
		dd 0A4257h, 0A4700h, 57000100h,	2 dup(0)
off_3458	dd offset _gg_tvbuff_expected_eob ; DATA XREF: .debug_info:00002157o
		dd offset loc_A4B
		dd 4740002h, 0A4Bh, 0AA1h, 30740002h, 0AA1h, 0AA2h, 4740002h
		dd 0AA2h, 0AA7h, 30740002h, 2 dup(0)
off_3490	dd offset loc_A5B	; DATA XREF: .debug_info:00002188o
		dd offset loc_A72
		dd 72500001h, 0A700000Ah, 200000Ah, 9100h, 0
		db 3 dup(0)
off_34AF	dd offset loc_A66	; DATA XREF: .debug_info:000021A6o
		dd offset loc_A72
		db 1
		dd 0A725000h, 0A920000h, 20000h, 91h, 0
		db 2 dup(0)
off_34CE	dd offset _gg_tvbuff_close ; DATA XREF:	.debug_info:000021F5o
		dd offset loc_AA9
		dw 2
		dd 0AA90474h, 0AAA0000h, 20000h, 0AAA0874h, 0AAD0000h
		dd 20000h, 0AAD0C74h, 0AE40000h, 20000h, 0AE43074h, 0AE50000h
		dd 20000h, 0AE50C74h, 0AE60000h, 20000h, 0AE60874h, 0AE80000h
		dd 20000h, 0AE80474h, 0AF10000h, 20000h, 3074h,	0
		db 2 dup(0)
off_3536	dd offset loc_AC4	; DATA XREF: .debug_info:00002233o
		dd offset loc_AE5
		dw 1
		dd 0AE553h, 0AE700h, 91000200h,	0AE700h, 0AF100h, 53000100h
		dd 2 dup(0)
_debug_loc	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_debug_aranges	segment	byte public 'DATA' use32
		assume cs:_debug_aranges
		;org 3560h
		dd 1Ch
		db 2, 0
		dd offset off_F18
		dw 4
		dd 0
		dd offset _gg_tvbuff_new
		dd offset unk_AF1
		align 10h
_debug_aranges	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_debug_ranges	segment	byte public 'DATA' use32
		assume cs:_debug_ranges
		;org 3580h
off_3580	dd offset loc_498	; DATA XREF: .debug_info:00001916o
		dd offset loc_4E0
		dd offset loc_4F0
		dd offset loc_524
		dd offset loc_544
		dd offset loc_5B1
		align 10h
off_35A0	dd offset loc_498	; DATA XREF: .debug_info:00001927o
		dd offset loc_4E0
		dd offset loc_4F0
		dd offset loc_524
		dd offset loc_544
		dd offset loc_5B1
		align 10h
off_35C0	dd offset loc_4D2	; DATA XREF: .debug_info:00001947o
		dd offset loc_4E0
		dd offset loc_4F0
		dd offset loc_51B
		dd offset loc_570
		dd offset loc_594
		align 10h
off_35E0	dd offset loc_AC4	; DATA XREF: .debug_info:00002224o
		dd offset loc_ACB
		dd offset loc_AE8
		dd offset loc_AEC
		dd 2 dup(0)
_debug_ranges	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_debug_line	segment	byte public 'DATA' use32
		assume cs:_debug_line
		;org 35F8h
off_35F8	dd offset loc_380+4	; DATA XREF: .debug_info:00000F8Co
		db    2
		align 2
		dd offset loc_12E+1
		dw 101h
		db 0FBh	; ˚
		db 0Eh,	0Dh, 0
		db    1
		db 3 dup(1)
		db    0
		db 2 dup(0), 1
		db    0
		align 2
		dw 6C01h
		db  69h	; i
		db 62h,	0, 63h
aWorkspacePidgi	db ':/workspace/pidgin-devel/win32-dev/mingw-4.7.2/bin/../lib/gcc/min'
		db 'gw32/4.7.2/../../../../include',0
aCWorkspacePi_0	db 'c:/workspace/pidgin-devel/win32-dev/mingw-4.7.2/bin/../lib/gcc/mi'
		db 'ngw32/4.7.2/include',0
		align 2
aTvbuff_c	db 'tvbuff.c',0
		db 1
		dd 74730000h, 2E6F6964h, 20068h, 64747300h, 2E666564h
		dd 30068h, 64747300h, 2E746E69h, 20068h, 62696C00h, 75646167h
		dd 100682Eh, 76740000h,	66667562h, 100682Eh, 74730000h
		dd 62696C64h, 200682Eh,	6E690000h, 6E726574h, 682E6C61h
		dd 100h, 2050000h
		dd offset _gg_tvbuff_new
		dd 0E4013403h, 0AE4CD7AFh, 753D2F51h, 4020077h,	8730301h
		dd 3E084B58h, 2E090375h, 74741E03h, 83D4CBBh, 0A034C1Eh
		dd 73037482h, 4A0E03ACh, 4DFD6777h, 0BA820C03h,	3AC6203h
		dd 72034A1Fh, 66110374h, 92AF084Dh, 2E087903h, 4A0A037Fh
		dd 0BA820A03h, 3BA4C03h, 88774A35h, 87A033Dh, 753D0820h
		dd 740A0332h, 7FB703BAh, 0CA03BAh, 597A774Ah, 12087A03h
		dd 32753D08h, 0BA740C03h, 0AC7FA003h, 4A00E103h, 76033679h
		dd 0BF083C08h, 78034BCBh, 809039Eh, 660A0358h, 7F880382h
		dd 0F903ACh, 903754Ah, 879032Eh, 0ED42083Ch, 0A03DC08h
		dd 0F3038258h, 9003AC7Eh, 0D034A01h, 8760374h, 3B210858h
		dd 0F3685934h, 66780349h, 90080903h, 82660A03h,	0AC7ED903h
		dd 4A01AA03h, 4A0C0375h, 20087603h, 68BB4208h, 8D67803h
		dd 15036DA0h, 0B403AC74h, 0D003AC7Eh, 8D98201h,	0B2BE213Dh
		dd 9065035Fh, 8D61D03h,	33408ADh, 0D03BA77h, 85E0390h
		dd 820F0374h, 0CF757608h, 3753E08h, 3E08906Dh, 3901703h
		dd 3C8740Ch, 3AC7E81h, 774A0282h, 35A75F9h, 4D4A0874h
		dd 23020903h, 580A0301h, 0E7032E08h, 9A03AC7Dh,	13034A02h
		dd 8700374h, 517B0866h,	40200ADh, 58780301h, 753E084Bh
		dd 8587603h, 580C03D9h,	0E4820D03h, 0AC7DC603h,	4A02BF03h
		dd 9F3D77h, 75010402h, 1040200h, 77BC52B9h, 34D2F4Bh, 8580871h
		dd 4A0D03AEh, 0E4820F03h, 0AC7D9B03h, 4A02EA03h, 3741E03h
		dd 3D9E0865h, 402009Fh,	2007501h, 4DB90104h, 0CA4DAE08h
		dd 5ABB5149h, 0A03E0867h, 8747203h, 0C03753Eh, 740A0358h
		dd 7CEE03ACh, 39803ACh,	7410034Ah, 32E0E03h, 9F820865h
		dd 4172849Fh, 1040200h,	67067406h, 0BE3D085Bh, 83BC4BBBh
		dd 78753D08h, 0E4660A03h, 77833DB0h, 1523024Bh,	82080A03h
		dd 833DB0D6h, 0E7084B77h, 82080903h, 7C930374h,	3EE03BAh
		dd 7CA3034Ah, 3E00374h,	82B783Ch, 7BF703E8h, 0AF905808h
		dd 4C821003h, 853C7003h, 4A080C03h, 24A7403h, 1010005h
_debug_line	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_debug_str	segment	byte public 'DATA' use32
		assume cs:_debug_str
		;org 3980h
aBuffer		db 'buffer',0           ; DATA XREF: .debug_info:00001161o
					; .debug_info:00001377o ...
aOffset		db 'offset',0           ; DATA XREF: .debug_info:0000117Do
					; .debug_info:00001BE8o ...
aLength		db 'length',0           ; DATA XREF: .debug_info:0000116Fo
					; .debug_info:00001256o ...
		align 4
_debug_str	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_eh_frame	segment	dword public 'DATA' use32
		assume cs:_eh_frame
		;org 3998h
		dd 14h,	0
		dd 527A01h, 1087C01h, 4040C1Bh,	188h, 3Ch, 1Ch
		dd offset unk_AF3-44ABh
		dd offset unk_8A
		dd 80E4100h, 0E410285h,	4103870Ch, 486100Eh, 83140E41h
		dd 400E4305h, 0E0A5802h, 0EC34114h, 0EC64110h, 0EC7410Ch
		dd 0EC54108h, 0B4104h, 18h, 5Ch
		dd offset unk_AF3-445Fh
		dd offset loc_35
		dd 200E4300h, 40E0A66h,	0B43h, 18h, 78h
		dd offset unk_AF3-4443h
		dd offset loc_3D
		dd 200E4300h, 40E0A6Fh,	0B42h, 20h, 94h
		dd offset unk_AF3-441Fh
		dd offset loc_70+5
		dd 80E4100h, 0E430283h,	0A5C0230h, 0C341080Eh, 0B43040Eh
		dd 20h,	0B8h
		dd offset unk_AF3-43CBh
		dd offset loc_62
		dd 80E4100h, 0E430283h,	0E0A7930h, 0EC34108h, 0B4204h
		dd 20h,	0DCh
		dd offset unk_AF3-438Bh
		dd offset loc_62
		dd 80E4100h, 0E430283h,	0E0A7A30h, 0EC34108h, 0B4104h
		dd 20h,	100h
		dd offset unk_AF3-434Bh
		dd offset unk_8B
		dd 80E4100h, 0E430283h,	0E0A6F40h, 0EC34108h, 0B4404h
		dd 20h,	124h
		dd offset unk_AF3-42E3h
		dd offset loc_7C
		dd 80E4100h, 0E430283h,	0E0A6B30h, 0EC34108h, 0B4404h
		dd 2Ch,	148h
		dd offset unk_AF3-428Bh
		dd offset loc_8F
		dd 80E4100h, 0E430283h,	0E0A6B30h, 0EC34108h, 750B4404h
		dd 41080E0Ah, 46040EC3h, 0Bh, 20h, 178h
		dd offset unk_AF3-422Bh
		dd offset _gg_tvbuff_is_valid+2
		dd 80E4100h, 0E430283h,	0E0A6D30h, 0EC34108h, 0B4204h
		dd 3Ch,	19Ch
		dd offset unk_AF3-41BFh
		dd offset loc_147+3
		dd 80E4100h, 0E410285h,	4103870Ch, 486100Eh, 83140E41h
		dd 500E4305h, 0E0AC402h, 0EC34114h, 0EC64110h, 0EC7410Ch
		dd 0EC54108h, 0B4104h, 2Ch, 1DCh
		dd offset unk_AF3-40B3h
		dd offset loc_7C+4
		dd 80E4100h, 0E410286h,	4303830Ch, 4902300Eh, 410C0E0Ah
		dd 41080EC3h, 44040EC6h, 0Bh, 3Ch, 20Ch
		dd offset unk_AF3-4063h
		dd offset loc_B8+1
		dd 80E4100h, 0E410285h,	4103870Ch, 486100Eh, 83140E41h
		dd 500E4305h, 140E0A71h, 100EC341h, 0C0EC641h, 80EC741h
		dd 40EC541h, 0B44h, 3Ch, 24Ch
		dd offset unk_AF3-3FE7h
		dd offset loc_A1
		dd 80E4100h, 0E410285h,	4103870Ch, 486100Eh, 83140E41h
		dd 400E4305h, 0E0A6E02h, 0EC34114h, 0EC64110h, 0EC7410Ch
		dd 0EC54108h, 0B4304h, 3Ch, 28Ch
		dd offset unk_AF3-3F83h
		dd offset loc_FA
		dd 80E4100h, 0E410285h,	4103870Ch, 486100Eh, 83140E41h
		dd 400E4305h, 140E0A71h, 100EC341h, 0C0EC641h, 80EC741h
		dd 40EC541h, 0B44h, 3Ch, 2CCh
		dd offset unk_AF3-3EC7h
		dd offset loc_DF
		dd 80E4100h, 0E410285h,	4103870Ch, 486100Eh, 83140E41h
		dd 400E4305h, 140E0A6Fh, 100EC341h, 0C0EC641h, 80EC741h
		dd 40EC541h, 0B42h, 34h, 30Ch
		dd offset unk_AF3-3E27h
		dd offset loc_68+3
		dd 80E4100h, 0E410287h,	4103860Ch, 483100Eh, 2400E43h
		dd 100E0A5Ch, 0C0EC341h, 80EC641h, 40EC741h, 0B41h, 34h
		dd 344h
		dd offset unk_AF3-3DF3h
		dd offset loc_66+1
		dd 80E4100h, 0E410287h,	4103860Ch, 483100Eh, 2400E43h
		dd 100E0A58h, 0C0EC341h, 80EC641h, 40EC741h, 0B41h, 18h
		dd 37Ch
		dd offset unk_AF3-3DC3h
		dd offset loc_5F
		dd 300E4300h, 0E0A5602h, 0B4104h, 28h, 398h
		dd offset unk_AF3-3D7Fh
		dd offset loc_47+2
		dd 80E4100h, 0E410286h,	4303830Ch, 0A77300Eh, 0C3410C0Eh
		dd 0C641080Eh, 0B42040Eh
_eh_frame	ends

; ===========================================================================

; Segment type:	Externs
; UNDEF
		extrn ___stack_chk_guard:near ;	DATA XREF: _gg_tvbuff_new+Fr
					; _gg_tvbuff_new:loc_54r ...
; void *__cdecl	malloc(size_t)
		extrn _malloc:near	; CODE XREF: _gg_tvbuff_new+21p
					; _gg_tvbuff_read_str_dup+8Ap
		extrn _gg_debug:near	; CODE XREF: _gg_tvbuff_new:loc_77p
					; _gg_tvbuff_have_remaining:loc_147p ...
		extrn ___stack_chk_fail:near ; CODE XREF: _gg_tvbuff_new:loc_85p
					; _gg_tvbuff_is_valid:loc_BCp ...
		extrn _gg_fix32:near	; CODE XREF: _gg_tvbuff_read_uint32:loc_3B6j
		extrn _gg_fix64:near	; CODE XREF: _gg_tvbuff_read_uint64:loc_43Dp
; void __cdecl free(void *)
		extrn _free:near	; CODE XREF: _gg_tvbuff_read_str_dup+C9p
					; _gg_tvbuff_close+26p
		extrn _gg_str_to_uin:near ; CODE XREF: _gg_tvbuff_read_uin:loc_93Fp


		end
