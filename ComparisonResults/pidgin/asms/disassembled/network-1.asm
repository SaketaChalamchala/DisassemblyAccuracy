;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2015 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-3677-7074-51			    |
; |		Michalis Polychronakis,	Stony Brook University		    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	E8D31C9F27C1B12067FE969D6558DE41
; Input	CRC32 :	0B4FBECF

; File Name   :	d:\pidgin-o\network-1.o
; Format      :	COFF (X386MAGIC)

		.686p
		.mmx
		.model flat
.intel_syntax noprefix

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	dword public 'CODE' use32
		assume cs:_text
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; jumptable 00000038 cases 2,15

_gg_win32_map_wsa_error_to_errno proc near ; CODE XREF:	_gg_win32_accept+58p
					; _gg_win32_bind+58p ...

var_10		= dword	ptr -10h

; FUNCTION CHUNK AT 00000790 SIZE 00000001 BYTES
; FUNCTION CHUNK AT 00000BB8 SIZE 0000007B BYTES
; FUNCTION CHUNK AT 00000C3A SIZE 0000006A BYTES
; FUNCTION CHUNK AT 00000CAD SIZE 0000005E BYTES
; FUNCTION CHUNK AT 00000D2D SIZE 0000000E BYTES
; FUNCTION CHUNK AT 00000D60 SIZE 0000000D BYTES
; FUNCTION CHUNK AT 00000DD4 SIZE 0000000E BYTES
; FUNCTION CHUNK AT 00000E4E SIZE 00000010 BYTES
; FUNCTION CHUNK AT 00000E7F SIZE 0000000A BYTES

		push	ebx
		sub	esp, 18h
		mov	ebx, eax
		mov	eax, dword ptr ds:___stack_chk_guard
		mov	[esp+1Ch+var_10], eax
		xor	eax, eax
		call	_WSAGetLastError@0

loc_16:					; DATA XREF: .debug_info:00000DEAo
		lea	edx, [eax-2714h]
		cmp	edx, 38h ; '8'  ; switch 57 cases
		jbe	short loc_38

loc_21:					; DATA XREF: .rdata:00000794o
					; .rdata:00000798o ...
		mov	ebx, eax	; jumptable 00000038 default case
		nop

loc_24:					; CODE XREF: _gg_win32_map_wsa_error_to_errno+45j
					; _gg_win32_map_wsa_error_to_errno+4Dj	...
		mov	eax, ebx
		mov	edx, [esp+1Ch+var_10]
		xor	edx, dword ptr ds:___stack_chk_guard
		jnz	short loc_6F
		add	esp, 18h
		pop	ebx
		retn
; ---------------------------------------------------------------------------
		align 4

loc_38:					; CODE XREF: _gg_win32_map_wsa_error_to_errno+1Fj
		jmp	dword ptr ds:loc_790[edx*4] ; switch jump
; ---------------------------------------------------------------------------
		align 10h
		mov	ebx, 4
		jmp	short loc_24
; ---------------------------------------------------------------------------
		align 4

loc_48:					; DATA XREF: .rdata:000007B8o
		mov	ebx, 0Eh
		jmp	short loc_24
; ---------------------------------------------------------------------------
		align 10h

loc_50:					; DATA XREF: .rdata:000007D8o
					; .eh_frame:00002F34o ...
		mov	ebx, 16h
		jmp	short loc_24
; ---------------------------------------------------------------------------
		align 4

loc_58:					; DATA XREF: .rdata:00000858o
		mov	ebx, 2746h

loc_5D:					; DATA XREF: .eh_frame:0000306Co
		jmp	short loc_24
; ---------------------------------------------------------------------------
		align 10h

loc_60:					; DATA XREF: .rdata:00000864o
		mov	ebx, 2749h

loc_65:					; DATA XREF: .eh_frame:00002ECCo
					; .eh_frame:00002F00o ...
		jmp	short loc_24
; ---------------------------------------------------------------------------
		align 4

loc_68:					; DATA XREF: .rdata:00000870o
		mov	ebx, 274Ch

loc_6D:					; DATA XREF: .eh_frame:000030A0o
					; .eh_frame:000030D4o
		jmp	short loc_24
; ---------------------------------------------------------------------------

loc_6F:					; CODE XREF: _gg_win32_map_wsa_error_to_errno+30j
		call	___stack_chk_fail
_gg_win32_map_wsa_error_to_errno endp ;	sp-analysis failed


; =============== S U B	R O U T	I N E =======================================


; int __cdecl gg_win32_accept(SOCKET, struct sockaddr *, int *)
		public _gg_win32_accept
_gg_win32_accept proc near		; CODE XREF: _gg_win32_socketpair+16Bp
					; DATA XREF: .debug_info:00000DA9o ...

s		= dword	ptr -2Ch
addr		= dword	ptr -28h
addrlen		= dword	ptr -24h
var_10		= dword	ptr -10h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	esi

loc_75:					; DATA XREF: .debug_loc:000020F7o
		push	ebx

loc_76:					; DATA XREF: .eh_frame:00003004o
					; .eh_frame:00003108o
		sub	esp, 24h

loc_79:					; DATA XREF: _gg_win32_map_wsa_error_to_errno+C02w
		mov	eax, dword ptr ds:___stack_chk_guard
		mov	[esp+2Ch+var_10], eax
		xor	eax, eax
		mov	eax, [esp+2Ch+arg_8]
		mov	[esp+2Ch+addrlen], eax ; addrlen
		mov	eax, [esp+2Ch+arg_4]
		mov	[esp+2Ch+addr],	eax ; addr

loc_94:					; DATA XREF: .debug_info:00000D14o
					; .debug_info:00000D78o ...
		mov	eax, [esp+2Ch+arg_0]
		mov	[esp+2Ch+s], eax ; s
		call	_accept@12

loc_A0:					; DATA XREF: .debug_info:00000E61o
		sub	esp, 0Ch
		mov	ebx, eax
		cmp	eax, 0FFFFFFFFh
		jz	short loc_C0

loc_AA:					; CODE XREF: _gg_win32_accept+5Fj
		mov	eax, ebx
		mov	edx, [esp+2Ch+var_10]
		xor	edx, dword ptr ds:___stack_chk_guard
		jnz	short loc_D5
		add	esp, 24h
		pop	ebx
		pop	esi
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_C0:					; CODE XREF: _gg_win32_accept+34j
		call	__errno
		mov	esi, eax
		mov	eax, 0Bh
		call	_gg_win32_map_wsa_error_to_errno ; jumptable 00000038 cases 2,15

loc_D1:					; DATA XREF: .debug_info:00000E90o
		mov	[esi], eax
		jmp	short loc_AA
; ---------------------------------------------------------------------------

loc_D5:					; CODE XREF: _gg_win32_accept+42j
		call	___stack_chk_fail
_gg_win32_accept endp

; ---------------------------------------------------------------------------
unk_DA		db  66h	; f		; DATA XREF: .debug_info:00000E19o
					; .debug_info:00000EA3o
		db  90h	; ê

; =============== S U B	R O U T	I N E =======================================


; int __cdecl gg_win32_bind(SOCKET, struct sockaddr *, int)
		public _gg_win32_bind
_gg_win32_bind	proc near		; CODE XREF: _gg_win32_socketpair+C7p
					; DATA XREF: .debug_info:00000EC9o ...

s		= dword	ptr -2Ch
name		= dword	ptr -28h
namelen		= dword	ptr -24h
var_10		= dword	ptr -10h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	esi

loc_DD:					; DATA XREF: .debug_loc:000021C1o
		push	ebx
		sub	esp, 24h

loc_E1:					; DATA XREF: .debug_info:00000955o
		mov	eax, dword ptr ds:___stack_chk_guard

loc_E6:					; DATA XREF: .debug_info:00000974o
		mov	[esp+2Ch+var_10], eax
		xor	eax, eax
		mov	eax, [esp+2Ch+arg_8]
		mov	[esp+2Ch+namelen], eax ; namelen
		mov	eax, [esp+2Ch+arg_4]
		mov	[esp+2Ch+name],	eax ; name
		mov	eax, [esp+2Ch+arg_0]
		mov	[esp+2Ch+s], eax ; s
		call	_bind@12

loc_108:				; DATA XREF: .debug_info:00000F15o
		sub	esp, 0Ch
		mov	ebx, eax

loc_10D:				; DATA XREF: .debug_loc:off_223Do
		cmp	eax, 0FFFFFFFFh
		jz	short loc_128

loc_112:				; CODE XREF: _gg_win32_bind+5Fj
					; DATA XREF: .debug_loc:00002241o ...
		mov	eax, ebx
		mov	edx, [esp+2Ch+var_10]

loc_118:				; DATA XREF: .debug_line:00002C7Ao
		xor	edx, dword ptr ds:___stack_chk_guard
		jnz	short loc_13D

loc_120:				; DATA XREF: .debug_loc:0000224Co
		add	esp, 24h
		pop	ebx
		pop	esi
		retn
; ---------------------------------------------------------------------------
		align 4

loc_128:				; CODE XREF: _gg_win32_bind+34j
		call	__errno

loc_12D:				; DATA XREF: .debug_info:00000F3Bo
		mov	esi, eax
		mov	eax, 0Bh
		call	_gg_win32_map_wsa_error_to_errno ; jumptable 00000038 cases 2,15

loc_139:				; DATA XREF: .debug_info:00000F44o
		mov	[esi], eax
		jmp	short loc_112
; ---------------------------------------------------------------------------

loc_13D:				; CODE XREF: _gg_win32_bind+42j
		call	___stack_chk_fail
_gg_win32_bind	endp

; ---------------------------------------------------------------------------
unk_142		db  66h	; f		; DATA XREF: .debug_info:off_ECDo
					; .debug_info:00000F57o
		db  90h	; ê

; =============== S U B	R O U T	I N E =======================================


; int __cdecl gg_win32_close(SOCKET)
		public _gg_win32_close
_gg_win32_close	proc near		; CODE XREF: _gg_win32_socketpair+179p
					; _gg_win32_socketpair+19Ep ...

s		= dword	ptr -2Ch
var_10		= dword	ptr -10h
arg_0		= dword	ptr  4

		push	esi

loc_145:				; DATA XREF: .debug_loc:0000228Bo
		push	ebx
		sub	esp, 24h
		mov	eax, dword ptr ds:___stack_chk_guard
		mov	[esp+2Ch+var_10], eax
		xor	eax, eax
		mov	eax, [esp+2Ch+arg_0]
		mov	[esp+2Ch+s], eax ; s
		call	_closesocket@4

loc_160:				; DATA XREF: .debug_info:00000FC8o
		push	edx
		mov	ebx, eax

loc_163:				; DATA XREF: .debug_loc:off_2307o
		cmp	eax, 0FFFFFFFFh
		jz	short loc_17C

loc_168:				; CODE XREF: _gg_win32_close+4Bj
					; DATA XREF: .debug_loc:0000230Bo
		mov	eax, ebx
		mov	edx, [esp+2Ch+var_10]
		xor	edx, dword ptr ds:___stack_chk_guard
		jnz	short loc_191
		add	esp, 24h
		pop	ebx
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_17C:				; CODE XREF: _gg_win32_close+22j
					; DATA XREF: .debug_info:00000F8Co ...
		call	__errno

loc_181:				; DATA XREF: .debug_info:off_FAEo
		mov	esi, eax
		mov	eax, 0Bh
		call	_gg_win32_map_wsa_error_to_errno ; jumptable 00000038 cases 2,15

loc_18D:				; DATA XREF: .debug_info:00000FB7o
		mov	[esi], eax
		jmp	short loc_168
; ---------------------------------------------------------------------------

loc_191:				; CODE XREF: _gg_win32_close+30j
					; DATA XREF: .debug_info:00000F90o ...
		call	___stack_chk_fail
_gg_win32_close	endp

; ---------------------------------------------------------------------------
unk_196		db  66h	; f		; DATA XREF: .debug_info:00000F69o
					; .debug_info:off_FDEo
		db  90h	; ê

; =============== S U B	R O U T	I N E =======================================


; int __cdecl gg_win32_connect(SOCKET, struct sockaddr *, int)
		public _gg_win32_connect
_gg_win32_connect proc near		; CODE XREF: _gg_win32_socketpair+150p
					; DATA XREF: .debug_info:00001001o ...

s		= dword	ptr -2Ch
name		= dword	ptr -28h
namelen		= dword	ptr -24h
var_10		= dword	ptr -10h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	esi

loc_199:				; DATA XREF: .debug_loc:00002355o
		push	ebx
		sub	esp, 24h
		mov	eax, dword ptr ds:___stack_chk_guard
		mov	[esp+2Ch+var_10], eax
		xor	eax, eax
		mov	eax, [esp+2Ch+arg_8]
		mov	[esp+2Ch+namelen], eax ; namelen
		mov	eax, [esp+2Ch+arg_4]
		mov	[esp+2Ch+name],	eax ; name
		mov	eax, [esp+2Ch+arg_0]
		mov	[esp+2Ch+s], eax ; s
		call	_connect@12

loc_1C4:				; DATA XREF: .debug_info:off_104Do
		sub	esp, 0Ch
		mov	ebx, eax

loc_1C9:				; DATA XREF: .debug_loc:off_23D1o
		cmp	eax, 0FFFFFFFFh

loc_1CC:				; DATA XREF: .eh_frame:00003170o
		jz	short loc_1E4

loc_1CE:				; CODE XREF: _gg_win32_connect+5Fj
					; DATA XREF: .debug_loc:000023D5o ...
		mov	eax, ebx
		mov	edx, [esp+2Ch+var_10]
		xor	edx, dword ptr ds:___stack_chk_guard
		jnz	short loc_1F9

loc_1DC:				; DATA XREF: .debug_loc:000023E0o
		add	esp, 24h
		pop	ebx
		pop	esi
		retn
; ---------------------------------------------------------------------------
		align 4

loc_1E4:				; CODE XREF: _gg_win32_connect:loc_1CCj
		call	__errno

loc_1E9:				; DATA XREF: .debug_info:00001073o
		mov	esi, eax
		mov	eax, 2734h
		call	_gg_win32_map_wsa_error_to_errno ; jumptable 00000038 cases 2,15

loc_1F5:				; DATA XREF: .debug_info:0000107Co
		mov	[esi], eax
		jmp	short loc_1CE
; ---------------------------------------------------------------------------

loc_1F9:				; CODE XREF: _gg_win32_connect+42j
					; DATA XREF: .debug_line:off_2C74o
		call	___stack_chk_fail
_gg_win32_connect endp

; ---------------------------------------------------------------------------
unk_1FE		db  66h	; f		; DATA XREF: .debug_info:00001005o
					; .debug_info:00001091o
		db  90h	; ê

; =============== S U B	R O U T	I N E =======================================


; int __cdecl gg_win32_gethostbyname(char *)
		public _gg_win32_gethostbyname
_gg_win32_gethostbyname	proc near	; DATA XREF: .debug_info:off_10BAo
					; .debug_loc:off_241Bo

name		= dword	ptr -2Ch
var_10		= dword	ptr -10h
arg_0		= dword	ptr  4

		push	esi

loc_201:				; DATA XREF: .debug_loc:0000241Fo
		push	ebx
		sub	esp, 24h
		mov	eax, dword ptr ds:___stack_chk_guard
		mov	[esp+2Ch+var_10], eax
		xor	eax, eax
		mov	eax, [esp+2Ch+arg_0]
		mov	[esp+2Ch+name],	eax ; name
		call	_gethostbyname@4

loc_21C:				; DATA XREF: .debug_info:000010EAo
		push	ecx
		mov	ebx, eax

loc_21F:				; DATA XREF: .debug_loc:off_249Bo
		test	eax, eax
		jz	short loc_238

loc_223:				; CODE XREF: _gg_win32_gethostbyname+4Bj
					; DATA XREF: .debug_loc:0000249Fo
		mov	eax, ebx
		mov	edx, [esp+2Ch+var_10]
		xor	edx, dword ptr ds:___stack_chk_guard
		jnz	short loc_24D
		add	esp, 24h
		pop	ebx
		pop	esi
		retn
; ---------------------------------------------------------------------------
		align 4

loc_238:				; CODE XREF: _gg_win32_gethostbyname+21j
		call	__errno

loc_23D:				; DATA XREF: .debug_info:00001100o
		mov	esi, eax
		mov	eax, 0Bh
		call	_gg_win32_map_wsa_error_to_errno ; jumptable 00000038 cases 2,15

loc_249:				; DATA XREF: .debug_info:00001109o
		mov	[esi], eax
		jmp	short loc_223
; ---------------------------------------------------------------------------

loc_24D:				; CODE XREF: _gg_win32_gethostbyname+2Fj
		call	___stack_chk_fail
_gg_win32_gethostbyname	endp

; ---------------------------------------------------------------------------
unk_252		db  66h	; f		; DATA XREF: .debug_info:000010BEo
					; .debug_info:0000111Co
		db  90h	; ê

; =============== S U B	R O U T	I N E =======================================


; int __cdecl gg_win32_getsockname(SOCKET, struct sockaddr *, int *)
		public _gg_win32_getsockname
_gg_win32_getsockname proc near		; CODE XREF: _gg_win32_socketpair+F9p
					; DATA XREF: .debug_info:off_1143o ...

s		= dword	ptr -2Ch
name		= dword	ptr -28h
namelen		= dword	ptr -24h
var_10		= dword	ptr -10h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	esi

loc_255:				; DATA XREF: .debug_loc:000024E9o
		push	ebx
		sub	esp, 24h
		mov	eax, dword ptr ds:___stack_chk_guard
		mov	[esp+2Ch+var_10], eax
		xor	eax, eax
		mov	eax, [esp+2Ch+arg_8]
		mov	[esp+2Ch+namelen], eax ; namelen
		mov	eax, [esp+2Ch+arg_4]
		mov	[esp+2Ch+name],	eax ; name
		mov	eax, [esp+2Ch+arg_0]
		mov	[esp+2Ch+s], eax ; s
		call	_getsockname@12

loc_280:				; DATA XREF: .debug_info:0000118Fo
		sub	esp, 0Ch
		mov	ebx, eax

loc_285:				; DATA XREF: .debug_loc:off_2565o
		cmp	eax, 0FFFFFFFFh
		jz	short loc_2A0

loc_28A:				; CODE XREF: _gg_win32_getsockname+5Fj
					; DATA XREF: .debug_loc:00002569o ...
		mov	eax, ebx
		mov	edx, [esp+2Ch+var_10]
		xor	edx, dword ptr ds:___stack_chk_guard
		jnz	short loc_2B5

loc_298:				; DATA XREF: .debug_loc:00002574o
		add	esp, 24h
		pop	ebx
		pop	esi
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_2A0:				; CODE XREF: _gg_win32_getsockname+34j
		call	__errno

loc_2A5:				; DATA XREF: .debug_info:000011B5o
		mov	esi, eax
		mov	eax, 0Bh
		call	_gg_win32_map_wsa_error_to_errno ; jumptable 00000038 cases 2,15

loc_2B1:				; DATA XREF: .debug_info:000011BEo
		mov	[esi], eax
		jmp	short loc_28A
; ---------------------------------------------------------------------------

loc_2B5:				; CODE XREF: _gg_win32_getsockname+42j
		call	___stack_chk_fail
_gg_win32_getsockname endp

; ---------------------------------------------------------------------------
unk_2BA		db  66h	; f		; DATA XREF: .debug_info:00001147o
					; .debug_info:000011D1o
		db  90h	; ê

; =============== S U B	R O U T	I N E =======================================


; int __cdecl gg_win32_getsockopt(SOCKET, int, int, char *, int	*)
		public _gg_win32_getsockopt
_gg_win32_getsockopt proc near		; DATA XREF: .debug_info:000011F7o
					; .debug_loc:off_25AFo

s		= dword	ptr -3Ch
level		= dword	ptr -38h
optname		= dword	ptr -34h
optval		= dword	ptr -30h
optlen		= dword	ptr -2Ch
var_10		= dword	ptr -10h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h

		push	esi

loc_2BD:				; DATA XREF: .debug_loc:000025B3o
		push	ebx
		sub	esp, 34h
		mov	eax, dword ptr ds:___stack_chk_guard
		mov	[esp+3Ch+var_10], eax
		xor	eax, eax
		mov	eax, [esp+3Ch+arg_10]
		mov	[esp+3Ch+optlen], eax ;	optlen
		mov	eax, [esp+3Ch+arg_C]
		mov	[esp+3Ch+optval], eax ;	optval
		mov	eax, [esp+3Ch+arg_8]
		mov	[esp+3Ch+optname], eax ; optname
		mov	eax, [esp+3Ch+arg_4]
		mov	[esp+3Ch+level], eax ; level
		mov	eax, [esp+3Ch+arg_0]
		mov	[esp+3Ch+s], eax ; s
		call	_getsockopt@20

loc_2F8:				; DATA XREF: .debug_info:0000126Ao
		sub	esp, 14h
		mov	ebx, eax

loc_2FD:				; DATA XREF: .debug_loc:off_2632o
		cmp	eax, 0FFFFFFFFh
		jz	short loc_318

loc_302:				; CODE XREF: _gg_win32_getsockopt+6Fj
					; DATA XREF: .debug_loc:00002636o
		mov	eax, ebx
		mov	edx, [esp+3Ch+var_10]
		xor	edx, dword ptr ds:___stack_chk_guard
		jnz	short loc_32D
		add	esp, 34h
		pop	ebx
		pop	esi
		retn
; ---------------------------------------------------------------------------
		align 4

loc_318:				; CODE XREF: _gg_win32_getsockopt+44j
		call	__errno

loc_31D:				; DATA XREF: .debug_info:000012A0o
		mov	esi, eax
		mov	eax, 0Bh
		call	_gg_win32_map_wsa_error_to_errno ; jumptable 00000038 cases 2,15

loc_329:				; DATA XREF: .debug_info:000012A9o
		mov	[esi], eax
		jmp	short loc_302
; ---------------------------------------------------------------------------

loc_32D:				; CODE XREF: _gg_win32_getsockopt+52j
		call	___stack_chk_fail
_gg_win32_getsockopt endp

; ---------------------------------------------------------------------------
unk_332		db  66h	; f		; DATA XREF: .debug_info:000011FBo
					; .debug_info:000012BCo
		db  90h	; ê

; =============== S U B	R O U T	I N E =======================================


; int __cdecl gg_win32_ioctl(SOCKET, __int32, u_long *)
		public _gg_win32_ioctl
_gg_win32_ioctl	proc near		; DATA XREF: .debug_info:000012DDo
					; .debug_loc:off_267Co

s		= dword	ptr -2Ch
cmd		= dword	ptr -28h
argp		= dword	ptr -24h
var_10		= dword	ptr -10h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	esi

loc_335:				; DATA XREF: .debug_loc:00002680o
		push	ebx
		sub	esp, 24h
		mov	eax, dword ptr ds:___stack_chk_guard
		mov	[esp+2Ch+var_10], eax
		xor	eax, eax
		mov	eax, [esp+2Ch+arg_8]
		mov	[esp+2Ch+argp],	eax ; argp
		mov	eax, [esp+2Ch+arg_4]
		mov	[esp+2Ch+cmd], eax ; cmd
		mov	eax, [esp+2Ch+arg_0]
		mov	[esp+2Ch+s], eax ; s
		call	_ioctlsocket@12

loc_360:				; DATA XREF: .debug_info:0000132Bo
		sub	esp, 0Ch
		mov	ebx, eax

loc_365:				; DATA XREF: .debug_loc:off_26FCo
		cmp	eax, 0FFFFFFFFh
		jz	short loc_380

loc_36A:				; CODE XREF: _gg_win32_ioctl+5Fj
					; DATA XREF: .debug_loc:00002700o
		mov	eax, ebx
		mov	edx, [esp+2Ch+var_10]
		xor	edx, dword ptr ds:___stack_chk_guard
		jnz	short loc_395
		add	esp, 24h
		pop	ebx
		pop	esi
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_380:				; CODE XREF: _gg_win32_ioctl+34j
		call	__errno

loc_385:				; DATA XREF: .debug_info:00001351o
		mov	esi, eax
		mov	eax, 0Bh
		call	_gg_win32_map_wsa_error_to_errno ; jumptable 00000038 cases 2,15

loc_391:				; DATA XREF: .debug_info:0000135Ao
		mov	[esi], eax
		jmp	short loc_36A
; ---------------------------------------------------------------------------

loc_395:				; CODE XREF: _gg_win32_ioctl+42j
		call	___stack_chk_fail
_gg_win32_ioctl	endp

; ---------------------------------------------------------------------------
unk_39A		db  66h	; f		; DATA XREF: .debug_info:000012E1o
					; .debug_info:0000136Do
		db  90h	; ê

; =============== S U B	R O U T	I N E =======================================


; int __cdecl gg_win32_listen(SOCKET, int)
		public _gg_win32_listen
_gg_win32_listen proc near		; CODE XREF: _gg_win32_socketpair+DEp
					; DATA XREF: .debug_info:0000138Fo ...

s		= dword	ptr -2Ch
backlog		= dword	ptr -28h
var_10		= dword	ptr -10h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	esi

loc_39D:				; DATA XREF: .debug_loc:0000274Ao
		push	ebx
		sub	esp, 24h
		mov	eax, dword ptr ds:___stack_chk_guard
		mov	[esp+2Ch+var_10], eax
		xor	eax, eax
		mov	eax, [esp+2Ch+arg_4]
		mov	[esp+2Ch+backlog], eax ; backlog
		mov	eax, [esp+2Ch+arg_0]
		mov	[esp+2Ch+s], eax ; s
		call	_listen@8

loc_3C0:				; DATA XREF: .debug_info:000013D0o
		sub	esp, 8
		mov	ebx, eax

loc_3C5:				; DATA XREF: .debug_loc:off_27C6o
		cmp	eax, 0FFFFFFFFh
		jz	short loc_3E0

loc_3CA:				; CODE XREF: _gg_win32_listen+57j
					; DATA XREF: .debug_loc:000027CAo
		mov	eax, ebx
		mov	edx, [esp+2Ch+var_10]
		xor	edx, dword ptr ds:___stack_chk_guard
		jnz	short loc_3F5
		add	esp, 24h
		pop	ebx
		pop	esi
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_3E0:				; CODE XREF: _gg_win32_listen+2Cj
		call	__errno

loc_3E5:				; DATA XREF: .debug_info:000013EEo
		mov	esi, eax
		mov	eax, 0Bh
		call	_gg_win32_map_wsa_error_to_errno ; jumptable 00000038 cases 2,15

loc_3F1:				; DATA XREF: .debug_info:000013F7o
		mov	[esi], eax
		jmp	short loc_3CA
; ---------------------------------------------------------------------------

loc_3F5:				; CODE XREF: _gg_win32_listen+3Aj
		call	___stack_chk_fail
_gg_win32_listen endp

; ---------------------------------------------------------------------------
unk_3FA		db  66h	; f		; DATA XREF: .debug_info:00001393o
					; .debug_info:0000140Ao
		db  90h	; ê

; =============== S U B	R O U T	I N E =======================================


; int __cdecl gg_win32_recv(SOCKET, char *, int, int)
		public _gg_win32_recv
_gg_win32_recv	proc near		; DATA XREF: .debug_info:off_142Bo
					; .debug_loc:off_2810o

s		= dword	ptr -2Ch
buf		= dword	ptr -28h
len		= dword	ptr -24h
flags		= dword	ptr -20h
var_10		= dword	ptr -10h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		push	esi

loc_3FD:				; DATA XREF: .debug_loc:00002814o
		push	ebx
		sub	esp, 24h
		mov	eax, dword ptr ds:___stack_chk_guard
		mov	[esp+2Ch+var_10], eax
		xor	eax, eax
		mov	eax, [esp+2Ch+arg_C]
		mov	[esp+2Ch+flags], eax ; flags
		mov	eax, [esp+2Ch+arg_8]
		mov	[esp+2Ch+len], eax ; len
		mov	eax, [esp+2Ch+arg_4]
		mov	[esp+2Ch+buf], eax ; buf
		mov	eax, [esp+2Ch+arg_0]
		mov	[esp+2Ch+s], eax ; s
		call	_recv@16

loc_430:				; DATA XREF: .debug_info:0000148Bo
		sub	esp, 10h
		mov	ebx, eax

loc_435:				; DATA XREF: .debug_loc:off_2890o
		cmp	eax, 0FFFFFFFFh
		jz	short loc_450

loc_43A:				; CODE XREF: _gg_win32_recv+67j
					; DATA XREF: .debug_loc:00002894o
		mov	eax, ebx
		mov	edx, [esp+2Ch+var_10]
		xor	edx, dword ptr ds:___stack_chk_guard
		jnz	short loc_465
		add	esp, 24h
		pop	ebx
		pop	esi
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_450:				; CODE XREF: _gg_win32_recv+3Cj
		call	__errno

loc_455:				; DATA XREF: .debug_info:000014B9o
		mov	esi, eax
		mov	eax, 0Bh
		call	_gg_win32_map_wsa_error_to_errno ; jumptable 00000038 cases 2,15

loc_461:				; DATA XREF: .debug_info:000014C2o
		mov	[esi], eax
		jmp	short loc_43A
; ---------------------------------------------------------------------------

loc_465:				; CODE XREF: _gg_win32_recv+4Aj
		call	___stack_chk_fail
_gg_win32_recv	endp

; ---------------------------------------------------------------------------
unk_46A		db  66h	; f		; DATA XREF: .debug_info:0000142Fo
					; .debug_info:000014D5o
		db  90h	; ê

; =============== S U B	R O U T	I N E =======================================


; int __cdecl gg_win32_send(SOCKET, char *, int, int)
		public _gg_win32_send
_gg_win32_send	proc near		; DATA XREF: .debug_info:000014F6o
					; .debug_loc:off_28DAo

s		= dword	ptr -2Ch
buf		= dword	ptr -28h
len		= dword	ptr -24h
flags		= dword	ptr -20h
var_10		= dword	ptr -10h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		push	esi

loc_46D:				; DATA XREF: .debug_loc:000028DEo
		push	ebx
		sub	esp, 24h
		mov	eax, dword ptr ds:___stack_chk_guard
		mov	[esp+2Ch+var_10], eax
		xor	eax, eax

loc_47C:				; DATA XREF: .debug_info:00000F88o
					; .debug_info:0000191Fo ...
		mov	eax, [esp+2Ch+arg_C]
		mov	[esp+2Ch+flags], eax ; flags
		mov	eax, [esp+2Ch+arg_8]
		mov	[esp+2Ch+len], eax ; len
		mov	eax, [esp+2Ch+arg_4]
		mov	[esp+2Ch+buf], eax ; buf
		mov	eax, [esp+2Ch+arg_0]
		mov	[esp+2Ch+s], eax ; s
		call	_send@16

loc_4A0:				; DATA XREF: .debug_info:00001556o
		sub	esp, 10h

loc_4A3:				; DATA XREF: .debug_info:00000FA4o
		mov	ebx, eax

loc_4A5:				; DATA XREF: .debug_loc:off_295Ao
		cmp	eax, 0FFFFFFFFh
		jz	short loc_4C0

loc_4AA:				; CODE XREF: _gg_win32_send+67j
					; DATA XREF: .debug_loc:0000295Eo
		mov	eax, ebx
		mov	edx, [esp+2Ch+var_10]

loc_4B0:				; DATA XREF: .debug_info:0000169Co
					; .debug_info:000017EFo ...
		xor	edx, dword ptr ds:___stack_chk_guard
		jnz	short loc_4D5
		add	esp, 24h
		pop	ebx
		pop	esi
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_4C0:				; CODE XREF: _gg_win32_send+3Cj
		call	__errno

loc_4C5:				; DATA XREF: .debug_info:00001584o
		mov	esi, eax
		mov	eax, 0Bh
		call	_gg_win32_map_wsa_error_to_errno ; jumptable 00000038 cases 2,15

loc_4D1:				; DATA XREF: .debug_info:0000158Do
		mov	[esi], eax
		jmp	short loc_4AA
; ---------------------------------------------------------------------------

loc_4D5:				; CODE XREF: _gg_win32_send+4Aj
		call	___stack_chk_fail
_gg_win32_send	endp

; ---------------------------------------------------------------------------
unk_4DA		db  66h	; f		; DATA XREF: .debug_info:000014FAo
					; .debug_info:000015A0o
		db  90h	; ê

; =============== S U B	R O U T	I N E =======================================


; int __cdecl gg_win32_setsockopt(SOCKET, int, int, char *, int)
		public _gg_win32_setsockopt
_gg_win32_setsockopt proc near		; CODE XREF: _gg_win32_socketpair+ACp
					; DATA XREF: .debug_info:000015C7o ...

s		= dword	ptr -3Ch
level		= dword	ptr -38h
optname		= dword	ptr -34h
optval		= dword	ptr -30h
optlen		= dword	ptr -2Ch
var_10		= dword	ptr -10h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h

		push	esi

loc_4DD:				; DATA XREF: .debug_loc:000029A8o
		push	ebx
		sub	esp, 34h
		mov	eax, dword ptr ds:___stack_chk_guard
		mov	[esp+3Ch+var_10], eax
		xor	eax, eax
		mov	eax, [esp+3Ch+arg_10]
		mov	[esp+3Ch+optlen], eax ;	optlen
		mov	eax, [esp+3Ch+arg_C]
		mov	[esp+3Ch+optval], eax ;	optval

loc_4FC:				; DATA XREF: .debug_info:000016F0o
		mov	eax, [esp+3Ch+arg_8]
		mov	[esp+3Ch+optname], eax ; optname
		mov	eax, [esp+3Ch+arg_4]

loc_508:				; DATA XREF: .debug_info:00000E94o
					; .debug_info:00000F48o ...
		mov	[esp+3Ch+level], eax ; level
		mov	eax, [esp+3Ch+arg_0]
		mov	[esp+3Ch+s], eax ; s
		call	_setsockopt@20

loc_518:				; DATA XREF: .debug_info:00001640o
		sub	esp, 14h
		mov	ebx, eax

loc_51D:				; DATA XREF: .debug_loc:off_2A27o
		cmp	eax, 0FFFFFFFFh
		jz	short loc_538

loc_522:				; CODE XREF: _gg_win32_setsockopt+6Fj
					; DATA XREF: .debug_loc:00002A2Bo
		mov	eax, ebx
		mov	edx, [esp+3Ch+var_10]
		xor	edx, dword ptr ds:___stack_chk_guard
		jnz	short loc_54D
		add	esp, 34h
		pop	ebx
		pop	esi
		retn
; ---------------------------------------------------------------------------
		align 4

loc_538:				; CODE XREF: _gg_win32_setsockopt+44j
		call	__errno

loc_53D:				; DATA XREF: .debug_info:00001676o
		mov	esi, eax
		mov	eax, 0Bh
		call	_gg_win32_map_wsa_error_to_errno ; jumptable 00000038 cases 2,15

loc_549:				; DATA XREF: .debug_info:0000167Fo
		mov	[esi], eax
		jmp	short loc_522
; ---------------------------------------------------------------------------

loc_54D:				; CODE XREF: _gg_win32_setsockopt+52j
		call	___stack_chk_fail
_gg_win32_setsockopt endp

; ---------------------------------------------------------------------------
unk_552		db  66h	; f		; DATA XREF: .debug_info:000015CBo
					; .debug_info:00001692o
		db  90h	; ê

; =============== S U B	R O U T	I N E =======================================


		public _gg_win32_socket
_gg_win32_socket proc near		; CODE XREF: _gg_win32_socketpair+3Dp
					; _gg_win32_socketpair+134p
					; DATA XREF: ...

var_2C		= dword	ptr -2Ch
type		= dword	ptr -28h
protocol	= dword	ptr -24h
var_10		= dword	ptr -10h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	esi

loc_555:				; DATA XREF: .debug_loc:00002A75o
		push	ebx
		sub	esp, 24h
		mov	eax, dword ptr ds:___stack_chk_guard
		mov	[esp+2Ch+var_10], eax
		xor	eax, eax
		mov	eax, [esp+2Ch+arg_8]
		mov	[esp+2Ch+protocol], eax	; protocol
		mov	eax, [esp+2Ch+arg_4]
		mov	[esp+2Ch+type],	eax ; type
		mov	eax, [esp+2Ch+arg_0]
		mov	[esp+2Ch+var_2C], eax ;	af
		call	_socket@12

loc_580:				; DATA XREF: .debug_info:0000171Eo
		sub	esp, 0Ch
		mov	ebx, eax

loc_585:				; DATA XREF: .debug_loc:off_2AF1o
		cmp	eax, 0FFFFFFFFh

loc_588:				; DATA XREF: .debug_info:000018FEo
		jz	short loc_5A0

loc_58A:				; CODE XREF: _gg_win32_socket+5Fj
					; DATA XREF: .debug_loc:00002AF5o ...
		mov	eax, ebx
		mov	edx, [esp+2Ch+var_10]
		xor	edx, dword ptr ds:___stack_chk_guard
		jnz	short loc_5B5

loc_598:				; DATA XREF: .debug_loc:00002B00o
		add	esp, 24h
		pop	ebx
		pop	esi
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_5A0:				; CODE XREF: _gg_win32_socket:loc_588j
					; DATA XREF: .debug_info:000016D7o ...
		call	__errno

loc_5A5:				; DATA XREF: .debug_info:00001704o
		mov	esi, eax
		mov	eax, 0Bh
		call	_gg_win32_map_wsa_error_to_errno ; jumptable 00000038 cases 2,15

loc_5B1:				; DATA XREF: .debug_info:0000170Do
		mov	[esi], eax
		jmp	short loc_58A
; ---------------------------------------------------------------------------

loc_5B5:				; CODE XREF: _gg_win32_socket+42j
					; DATA XREF: .debug_info:000016DBo ...
		call	___stack_chk_fail
_gg_win32_socket endp

; ---------------------------------------------------------------------------
unk_5BA		db  66h	; f		; DATA XREF: .debug_info:000016A4o
					; .debug_info:00001744o
		db  90h	; ê

; =============== S U B	R O U T	I N E =======================================


		public _gg_win32_socketpair
_gg_win32_socketpair proc near		; DATA XREF: .debug_info:0000176Ao
					; .debug_loc:off_2B3Bo

hostlong	= dword	ptr -5Ch
var_58		= dword	ptr -58h
var_54		= dword	ptr -54h
var_50		= dword	ptr -50h
var_4C		= dword	ptr -4Ch
var_38		= dword	ptr -38h
var_34		= byte ptr -34h
var_30		= sockaddr ptr -30h
var_20		= dword	ptr -20h
arg_0		= dword	ptr  4

		push	ebp

loc_5BD:				; DATA XREF: .debug_loc:00002B3Fo
		push	edi
		push	esi
		push	ebx
		sub	esp, 4Ch
		mov	ebp, [esp+5Ch+arg_0]
		mov	eax, dword ptr ds:___stack_chk_guard
		mov	[esp+5Ch+var_20], eax
		xor	eax, eax
		mov	[esp+5Ch+var_38], 10h

loc_5DA:				; DATA XREF: .debug_loc:off_2C09o
		mov	dword ptr [esp+5Ch+var_34], 1
		mov	[esp+5Ch+var_54], 6
		mov	[esp+5Ch+var_58], 1
		mov	[esp+5Ch+hostlong], 2
		call	_gg_win32_socket

loc_5FE:				; DATA XREF: .debug_info:000017EBo
		mov	ebx, eax
		mov	dword ptr [ebp+0], 0FFFFFFFFh
		mov	dword ptr [ebp+4], 0FFFFFFFFh
		cmp	eax, 0FFFFFFFFh

loc_611:				; DATA XREF: .debug_info:00000E69o
		jz	loc_750
		lea	esi, [esp+5Ch+var_30]
		mov	ecx, 10h
		xor	eax, eax
		mov	edi, esi
		rep stosb
		mov	[esp+5Ch+var_30.sa_family], 2

loc_62D:				; DATA XREF: .debug_info:00000E98o
		mov	[esp+5Ch+hostlong], 7F000001h ;	hostlong

loc_634:				; DATA XREF: .debug_info:00001178o
		call	_htonl@4

loc_639:				; DATA XREF: .debug_info:0000180Bo
		push	edx
		mov	dword ptr [esp+5Ch+var_30.sa_data+2], eax

loc_63E:				; DATA XREF: .debug_info:00001857o
		mov	word ptr [esp+5Ch+var_30.sa_data], 0
		mov	[esp+5Ch+var_4C], 4 ; int
		lea	eax, [esp+5Ch+var_34]
		mov	[esp+5Ch+var_50], eax ;	char *
		mov	[esp+5Ch+var_54], 4 ; int
		mov	[esp+5Ch+var_58], 0FFFFh ; int
		mov	[esp+5Ch+hostlong], ebx	; SOCKET
		call	_gg_win32_setsockopt

loc_66D:				; DATA XREF: .debug_info:00001823o
		inc	eax
		jz	loc_750
		mov	eax, [esp+5Ch+var_38]
		mov	[esp+5Ch+var_54], eax ;	int
		mov	[esp+5Ch+var_58], esi ;	struct sockaddr	*
		mov	[esp+5Ch+hostlong], ebx	; SOCKET
		call	_gg_win32_bind

loc_688:				; DATA XREF: .debug_info:00001853o
		inc	eax
		jz	loc_750
		mov	[esp+5Ch+var_58], 1 ; int
		mov	[esp+5Ch+hostlong], ebx	; SOCKET
		call	_gg_win32_listen

loc_69F:				; DATA XREF: .debug_info:0000186Fo
		inc	eax
		jz	loc_750
		lea	eax, [esp+5Ch+var_38]
		mov	[esp+5Ch+var_54], eax ;	int *
		mov	[esp+5Ch+var_58], esi ;	struct sockaddr	*
		mov	[esp+5Ch+hostlong], ebx	; SOCKET
		call	_gg_win32_getsockname

loc_6BA:				; DATA XREF: .debug_info:0000188Ao
		inc	eax
		jz	loc_750

loc_6C1:				; DATA XREF: .debug_info:00000F1Do
		mov	[esp+5Ch+var_30.sa_family], 2
		mov	[esp+5Ch+hostlong], 7F000001h ;	hostlong
		call	_htonl@4

loc_6D4:				; DATA XREF: .debug_info:000018ADo
		push	edi
		mov	dword ptr [esp+5Ch+var_30.sa_data+2], eax
		mov	[esp+5Ch+var_54], 0

loc_6E1:				; DATA XREF: .debug_info:00000F4Co
		mov	[esp+5Ch+var_58], 1
		mov	[esp+5Ch+hostlong], 2
		call	_gg_win32_socket

loc_6F5:				; DATA XREF: .debug_info:000018C5o
		mov	[ebp+0], eax
		cmp	eax, 0FFFFFFFFh
		jz	short loc_750
		mov	edx, [esp+5Ch+var_38]
		mov	[esp+5Ch+var_54], edx ;	int
		mov	[esp+5Ch+var_58], esi ;	struct sockaddr	*
		mov	[esp+5Ch+hostlong], eax	; SOCKET
		call	_gg_win32_connect

loc_711:				; DATA XREF: .debug_info:000018E5o
		inc	eax
		jz	short loc_750
		mov	[esp+5Ch+var_54], 0 ; int *
		mov	[esp+5Ch+var_58], 0 ; struct sockaddr *
		mov	[esp+5Ch+hostlong], ebx	; SOCKET
		call	_gg_win32_accept

loc_72C:				; DATA XREF: .debug_info:000018FAo
		mov	[ebp+4], eax
		inc	eax
		jz	short loc_750
		mov	[esp+5Ch+hostlong], ebx	; SOCKET
		call	_gg_win32_close

loc_73A:				; DATA XREF: .debug_info:0000191Bo
		xor	eax, eax

loc_73C:				; CODE XREF: _gg_win32_socketpair+1C5j
		mov	edx, [esp+5Ch+var_20]
		xor	edx, dword ptr ds:___stack_chk_guard
		jnz	short loc_783
		add	esp, 4Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_750:				; CODE XREF: _gg_win32_socketpair:loc_611j
					; _gg_win32_socketpair+B2j ...
		call	__errno

loc_755:				; DATA XREF: .debug_info:00001930o
		mov	esi, [eax]

loc_757:				; DATA XREF: .debug_loc:off_2C3Fo
		mov	[esp+5Ch+hostlong], ebx	; SOCKET
		call	_gg_win32_close

loc_75F:				; DATA XREF: .debug_info:00001939o
		mov	eax, [ebp+0]
		mov	[esp+5Ch+hostlong], eax	; SOCKET

loc_765:				; DATA XREF: .debug_info:00000FD0o
		call	_gg_win32_close

loc_76A:				; DATA XREF: .debug_info:0000194Eo
		mov	eax, [ebp+4]
		mov	[esp+5Ch+hostlong], eax	; SOCKET

loc_770:				; DATA XREF: .debug_info:000018E9o
		call	_gg_win32_close

loc_775:				; DATA XREF: .debug_info:00001957o
		call	__errno

loc_77A:				; DATA XREF: .debug_info:00001960o
		mov	[eax], esi
		mov	eax, 0FFFFFFFFh
		jmp	short loc_73C
; ---------------------------------------------------------------------------

loc_783:				; CODE XREF: _gg_win32_socketpair+18Aj
					; DATA XREF: .debug_loc:00002C43o ...
		call	___stack_chk_fail
_gg_win32_socketpair endp

_text		ends

; ===========================================================================

; Segment type:	Zero-length
; Segment permissions: Read/Write
_data		segment	dword public 'DATA' use32
byte_788	label byte		; DATA XREF: .debug_aranges:00002C68o
_data		ends

; ===========================================================================

; Segment type:	Zero-length
; Segment permissions: Read/Write
_bss		segment	dword public 'BSS' use32
_bss		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 790h
; START	OF FUNCTION CHUNK FOR _gg_win32_map_wsa_error_to_errno

loc_790:				; CODE XREF: _gg_win32_map_wsa_error_to_errno:loc_38j
					; DATA XREF: _gg_win32_map_wsa_error_to_errno:loc_38r
		inc	eax
; END OF FUNCTION CHUNK	FOR _gg_win32_map_wsa_error_to_errno
; ---------------------------------------------------------------------------
		db 3 dup(0)
		dd offset loc_21	; jumptable 00000038 default case
		dd offset loc_21	; jumptable 00000038 default case
		dd offset loc_21	; jumptable 00000038 default case
		dd offset loc_21	; jumptable 00000038 default case
		dd offset loc_21	; jumptable 00000038 default case
		dd offset loc_21	; jumptable 00000038 default case
		dd offset loc_21	; jumptable 00000038 default case
		dd offset loc_21	; jumptable 00000038 default case
		dd offset loc_21	; jumptable 00000038 default case
		dd offset loc_48
		dd offset loc_21	; jumptable 00000038 default case
		dd offset loc_21	; jumptable 00000038 default case
		dd offset loc_21	; jumptable 00000038 default case
		dd offset loc_21	; jumptable 00000038 default case
		dd offset loc_21	; jumptable 00000038 default case
		dd offset loc_21	; jumptable 00000038 default case
		dd offset loc_21	; jumptable 00000038 default case
		dd offset loc_50
		dd offset loc_21	; jumptable 00000038 default case
		dd offset loc_21	; jumptable 00000038 default case
		dd offset loc_21	; jumptable 00000038 default case
		dd offset loc_21	; jumptable 00000038 default case
		dd offset loc_21	; jumptable 00000038 default case
		dd offset loc_21	; jumptable 00000038 default case
		dd offset loc_21	; jumptable 00000038 default case
		dd offset loc_21	; jumptable 00000038 default case
off_7FC		dd offset loc_21	; DATA XREF: .debug_info:00001055o
					; jumptable 00000038 default case
		dd offset loc_21	; jumptable 00000038 default case
		dd offset loc_21	; jumptable 00000038 default case
		dd offset loc_21	; jumptable 00000038 default case
		dd offset loc_24
		dd offset loc_21	; jumptable 00000038 default case
		dd offset loc_21	; jumptable 00000038 default case
		dd offset loc_21	; jumptable 00000038 default case
off_81C		dd offset loc_21	; DATA XREF: .debug_info:off_1084o
					; jumptable 00000038 default case
		dd offset loc_21	; jumptable 00000038 default case
		dd offset loc_21	; jumptable 00000038 default case
		dd offset loc_21	; jumptable 00000038 default case
		dd offset loc_21	; jumptable 00000038 default case
		dd offset loc_21	; jumptable 00000038 default case
		dd offset loc_21	; jumptable 00000038 default case
		dd offset loc_21	; jumptable 00000038 default case
		dd offset loc_21	; jumptable 00000038 default case
		dd offset loc_21	; jumptable 00000038 default case
		dd offset loc_21	; jumptable 00000038 default case
		dd offset loc_21	; jumptable 00000038 default case
		dd offset loc_21	; jumptable 00000038 default case
		dd offset loc_21	; jumptable 00000038 default case
		dd offset loc_21	; jumptable 00000038 default case
		dd offset loc_58
		dd offset loc_21	; jumptable 00000038 default case
		dd offset loc_21	; jumptable 00000038 default case
		dd offset loc_60
		dd offset loc_21	; jumptable 00000038 default case
		dd offset loc_21	; jumptable 00000038 default case
		dd offset loc_68
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_debug_info	segment	byte public 'DATA' use32
		assume cs:_debug_info
		;org 874h
off_874		dd offset off_142B	; DATA XREF: .debug_aranges:00002C5Ao
		db 2, 0
		dd offset dword_1CA4
		dw 104h
aGnuC4_7_2	db 'GNU C 4.7.2',0      ; DATA XREF: .debug_info:000010F2o
dword_88C	dd 62696C01h, 74656E2Fh, 6B726F77h, 4300632Eh, 775C5C3Ah
		dd 736B726Fh, 65636170h, 69705C5Ch, 6E696764h, 7665642Dh
		dd 5C5C6C65h, 67646970h, 322D6E69h, 2E30312Eh, 5C5C3131h
		dd 7062696Ch, 6C707275h, 705C5C65h, 6F746F72h, 736C6F63h
		dd 67675C5Ch
		db 0
		dd offset _gg_win32_map_wsa_error_to_errno ; jumptable 00000038	cases 2,15
		dd offset loc_783+5
		dd offset off_2C74
		db 2, 1, 6
aChar		db 'char',0
		db 2, 4, 7
aLongUnsignedIn	db 'long unsigned int',0
		dw 402h
		db    5
		db 69h,	6Eh, 74h
		db    0
		db 3, 4, 96h
		db    0
		db 2 dup(0), 2
		db    1
aUnsignedChar	db 8,'unsigned char',0
		db    2
		db 2, 7, 73h
aHortUnsignedIn	db 'hort unsigned int',0
		dw 402h
unk_940		db    4			; DATA XREF: .debug_info:00001197o
aFloat		db 'float',0
		db 2
		db    4
		db 5, 6Ch, 6Fh
aNgInt		db 'ng int',0
		db 3
		db    4
		dd offset loc_E1+4
		db 4, 2, 4
aUnsignedInt	db 7,'unsigned int',0   ; DATA XREF: .debug_info:00001150o
		dw 7305h
aIze_t		db 'ize_t',0
		dw 0D502h
		dd offset loc_E6
		db    2
		db 2, 5, 73h
aHortInt	db 'hort int',0
		db 3, 4, 79h
		db    0
		db 2 dup(0), 6
		db    4
		db 2, 8, 5
aLongLongInt	db 'long long int',0
		dw 802h
aLongLongUnsign	db 7,'long long unsigned int',0
dword_9B8	dd 73060102h, 656E6769h, 68632064h, 2007261h, 69730704h
		dd 7974657Ah, 5006570h,	68635F75h, 3007261h, 0A326h, 5F750500h
		dd 726F6873h, 27030074h, 0B4h, 695F7505h, 300746Eh, 0E628h
		dd 5F750500h, 676E6F6Ch, 81290300h, 5000000h, 4B434F53h
		dd 3005445h, 17C2Ch, 6F680700h,	6E657473h, 3100074h, 21978h
		dd 5F680800h, 656D616Eh, 11790300h, 2000001h, 68080023h
		dd 696C615Fh, 73657361h, 197A0300h, 2000002h, 68080423h
		dd 6464615Fh, 70797472h, 7B030065h, 104h, 8082302h, 656C5F68h
		dd 6874676Eh, 47C0300h,	2000001h, 68080A23h, 6464615Fh
		dd 696C5F72h, 3007473h,	2197Dh,	0C230200h, 11040300h, 9000001h
		dd 64E10304h, 8000002h,	31625F73h, 5FE10300h, 2000001h
		dd 73080023h, 32625Fh, 15FE103h, 23020000h, 5F730801h
		dd 3003362h, 15FE1h, 2230200h, 625F7308h, 0E1030034h, 15Fh
		dd 32302h, 0E2030409h, 28Bh, 775F7308h,	0E2030031h, 16Dh
		dd 8002302h, 32775F73h,	6DE20300h, 2000001h, 0A000223h
		dd 0BEE00304h, 0B000002h, 6E755F53h, 300625Fh, 21FE1h
		dd 5F530B00h, 775F6E75h, 64E20300h, 0B000002h, 64615F53h
		dd 3007264h, 189E3h, 69070000h,	64615F6Eh, 4007264h, 2DEDF03h
		dd 53080000h, 6E755Fh, 28BE403h, 23020000h, 73070000h
		dd 616B636Fh, 5F726464h, 10006E69h, 344FE03h, 73080000h
		dd 665F6E69h, 6C696D61h, 0FF030079h, 104h, 0C002302h, 5F6E6973h
		dd 74726F70h, 1000300h,	16Dh, 0C022302h, 5F6E6973h, 72646461h
		dd 1010300h, 2BEh, 0C042302h, 5F6E6973h, 6F72657Ah, 1020300h
		dd 344h, 82302h
; ---------------------------------------------------------------------------
; START	OF FUNCTION CHUNK FOR _gg_win32_map_wsa_error_to_errno

loc_BB8:				; CODE XREF: _gg_win32_map_wsa_error_to_errno:loc_38j
		or	eax, 79h	; jumptable 00000038 case 50
		push	esp
		add	eax, [eax]
		add	[esi], cl
		push	ebx
		add	[eax], eax
		add	[edi], al
		add	[edi], cl
		jnb	short loc_C3A
		arpl	[ebx+61h], bp
		db	64h, 64h
		jb	short $+4

loc_BD2:				; CODE XREF: _gg_win32_map_wsa_error_to_errno+BCEj
		adc	[ebx], al
		push	eax
		add	[edi+0C000003h], ecx
		jnb	short loc_C3E
		pop	edi
		popaw
		insd
		imul	ebp, [ecx+edi*2+0], 6D015103h
		add	[eax], eax
		add	[edx], al
		and	eax, [eax]
		or	al, 73h
		popa
		pop	edi
		db	64h
		popa
		jz	short near ptr loc_C56+2
		add	[ebx], al
		push	edx
		add	[edi+2000003h],	ecx
		and	eax, [edx]
		add	byte ptr ds:loc_79, cl
		lahf
		add	eax, [eax]
		add	[esi], cl
		push	ebx
		add	[eax], eax
		add	ds:54040300h, cl
		add	eax, [eax]
		add	[ebx], al
		add	al, 0ABh ; '´'
		add	eax, [eax]
		add	[eax], dl
		push	esp
		add	eax, [eax]
		add	[ebx], al
		add	al, 89h	; 'â'
		add	[eax], eax
		add	[ebx], al
		add	al, 0BCh ; 'º'
		add	eax, [eax]
		add	[eax], dl
		jns	short $+2
; END OF FUNCTION CHUNK	FOR _gg_win32_map_wsa_error_to_errno
; ---------------------------------------------------------------------------
byte_C33	db 0			; CODE XREF: _gg_win32_map_wsa_error_to_errno+C31j
		dd 0A5040300h
		db 1, 0
; ---------------------------------------------------------------------------
; START	OF FUNCTION CHUNK FOR _gg_win32_map_wsa_error_to_errno

loc_C3A:				; CODE XREF: _gg_win32_map_wsa_error_to_errno+BC9j
		add	[ecx], dl
		jnb	short loc_CAD

loc_C3E:				; CODE XREF: _gg_win32_map_wsa_error_to_errno+BDBj
		arpl	[ebx+6Ch], bp
		outs	dx, byte ptr gs:[esi]
		pop	edi

loc_C44:				; DATA XREF: .debug_info:00001493o
		jz	short $+2

loc_C46:				; CODE XREF: _gg_win32_map_wsa_error_to_errno:loc_C44j
		add	al, 10h
		add	[esi+7000000h],	edx
		pop	edi
		imul	ebp, [edi+62h],	20006675h

loc_C56:				; CODE XREF: _gg_win32_map_wsa_error_to_errno+BF5j
		add	eax, 47081h
		add	[eax], cl
		pop	edi
		jo	short near ptr loc_CD3+1

loc_C60:				; DATA XREF: .debug_info:000014CAo
		jb	short $+2

loc_C62:				; CODE XREF: _gg_win32_map_wsa_error_to_errno:loc_C60j
		add	eax, 11183h
		add	[edx], al

loc_C69:				; DATA XREF: .debug_info:00001438o
		and	eax, [eax]
		or	[edi+63h], bl
		outsb
		jz	short $+2

loc_C71:				; CODE XREF: _gg_win32_map_wsa_error_to_errno+C6Fj
		add	eax, 9684h
		add	[edx], al
		and	eax, [eax+ecx]
		pop	edi
		bound	esp, [ecx+73h]
		add	gs:11185h, al
		add	[edx], al
		and	ecx, [eax]
		or	[edi+66h], bl
		insb
		popa
		add	[di], al
		xchg	dl, [esi+2000000h]
		and	ecx, [eax+ecx]
		pop	edi
		imul	bp, [ebp+0], 8705h
		xchg	eax, esi
; END OF FUNCTION CHUNK	FOR _gg_win32_map_wsa_error_to_errno
; ---------------------------------------------------------------------------
		dd 2000000h, 5F081023h
		db 63h
; ---------------------------------------------------------------------------
; START	OF FUNCTION CHUNK FOR _gg_win32_map_wsa_error_to_errno

loc_CAD:				; CODE XREF: _gg_win32_map_wsa_error_to_errno+C3Cj
		push	75627261h
		db	66h
		add	large ds:9688h,	al
		add	[edx], al
		and	edx, [eax+ecx]
		pop	edi
		bound	esi, [ebp+66h]
		jnb	short loc_D2D
		jp	short $+2

loc_CC6:				; CODE XREF: _gg_win32_map_wsa_error_to_errno+CC4j
		add	eax, 9689h
		add	[edx], al
		and	ebx, [eax]
		or	[edi+74h], bl
		insd

loc_CD3:				; CODE XREF: _gg_win32_map_wsa_error_to_errno+C5Ej
		jo	short near ptr byte_D3B
		outsb
		popa
		insd
		add	gs:1118Ah, al
		add	[edx], al
		and	ebx, [eax+eax]
		add	eax, 454C4946h
		add	ds:3D98Bh, al
		add	[edx], dl
		add	[edi+67h], esp
		pop	edi
		ja	short loc_D60
		outsb
		xor	esi, [edx]
		pop	edi
		arpl	[edi+ebp*2+73h], bp
		add	gs:[ecx], al
		test	eax, 9601h
		add	[ecx], al
		mov	al, 4
; END OF FUNCTION CHUNK	FOR _gg_win32_map_wsa_error_to_errno
; ---------------------------------------------------------------------------
		db 0
		db 0, 13h
off_D0E		dd offset aSockfd	; DATA XREF: .debug_info:0000155Eo
					; "sockfd"
		dw 0A901h
		dd offset loc_94+2
		dd 73657214h, 96AB0100h, 0
dword_D24	dd 67670115h, 6E69775Fh	; DATA XREF: .debug_info:00001595o
		db 33h
; ---------------------------------------------------------------------------
; START	OF FUNCTION CHUNK FOR _gg_win32_map_wsa_error_to_errno

loc_D2D:				; CODE XREF: _gg_win32_map_wsa_error_to_errno+CC2j
		xor	bl, [edi+73h]
		outsd
		arpl	[ebx+65h], bp

loc_D34:				; DATA XREF: .debug_info:00001827o
		jz	short $+2

loc_D36:				; CODE XREF: _gg_win32_map_wsa_error_to_errno:loc_D34j
		add	[edx], ebp
		add	[ecx], eax
		xchg	eax, esi
; END OF FUNCTION CHUNK	FOR _gg_win32_map_wsa_error_to_errno
; ---------------------------------------------------------------------------
byte_D3B	db 0			; CODE XREF: _gg_win32_map_wsa_error_to_errno:loc_CD3j
		dd 9010000h, 16000005h,	616D6F64h, 1006E69h, 96012Ah, 74160000h
		dd 657079h, 96012A01h, 16000000h
; ---------------------------------------------------------------------------
; START	OF FUNCTION CHUNK FOR _gg_win32_map_wsa_error_to_errno

loc_D60:				; CODE XREF: _gg_win32_map_wsa_error_to_errno+CF5j
		jo	short loc_DD4
		outsd
		jz	short loc_DD4
		arpl	[edi+6Ch], bp
		add	[ecx], al
		sub	al, [ecx]
		xchg	eax, esi
; END OF FUNCTION CHUNK	FOR _gg_win32_map_wsa_error_to_errno
; ---------------------------------------------------------------------------
		db 3 dup(0)
		db  17h
		db 72h,	65h, 73h
		db    0
		db 1, 2Ch, 1
		dd offset loc_94+2
		db    0
		db 18h,	2 dup(67h)
a_win32_map_wsa	db '_win32_map_wsa_error_to_errno',0
		dw 6501h
		dd 9601h
		db 0
		dd offset _gg_win32_map_wsa_error_to_errno ; jumptable 00000038	cases 2,15
		dd offset _gg_win32_accept
		dd offset dword_1FB4
		db 1, 88h, 5
		db    0
		align 2
		dw 7719h
aSaewouldblock_	db 'saewouldblock_map',0
		dw 6501h
		dd offset loc_94+2
		dd offset dword_2004
; ---------------------------------------------------------------------------
; START	OF FUNCTION CHUNK FOR _gg_win32_map_wsa_error_to_errno

loc_DD4:				; CODE XREF: _gg_win32_map_wsa_error_to_errno:loc_D60j
					; _gg_win32_map_wsa_error_to_errno+D63j
		sbb	dh, [edi+73h]
		popa
		pop	edi
		db	65h
		jb	short loc_E4E
		outsd
		jb	short $+2

loc_DDF:				; CODE XREF: _gg_win32_map_wsa_error_to_errno+DDDj
		add	[edi-6Ah], esp
; END OF FUNCTION CHUNK	FOR _gg_win32_map_wsa_error_to_errno
; ---------------------------------------------------------------------------
		dw 0
		db 0
		dd offset word_20C6
		db 1Bh
		dd offset loc_16
		dd offset byte_1117
		db 1Bh
		dd offset _gg_win32_accept
		dd offset off_1143+1
		align 4
dword_DFC	dd 6767011Ch, 6E69775Fh, 615F3233h, 70656363h, 90010074h
					; DATA XREF: .debug_info:00001648o
		dd 9601h
		db 0
		dd offset _gg_win32_accept
		dd offset unk_DA
off_E1D		dd offset off_20F3	; DATA XREF: .debug_info:00001687o
		db 1, 38h, 6
		db 2 dup(0), 1Dh
off_E27		dd offset aSockfd	; DATA XREF: .debug_info:000015D4o
					; "sockfd"
		db 1
		dd 9690h, 910200h, 6464611Eh, 90010072h, 39Fh, 1D049102h
		dd offset aAddrlen	; "addrlen"
		dd 6389001h
		db 2 dup(0)
; ---------------------------------------------------------------------------
; START	OF FUNCTION CHUNK FOR _gg_win32_map_wsa_error_to_errno

loc_E4E:				; CODE XREF: _gg_win32_map_wsa_error_to_errno+DD9j
		add	dl, [ecx+65721A08h]
		jnb	short $+2

loc_E56:				; CODE XREF: _gg_win32_map_wsa_error_to_errno+E54j
		add	[edx+96h], edx
		jnb	short loc_E7F
; END OF FUNCTION CHUNK	FOR _gg_win32_map_wsa_error_to_errno
; ---------------------------------------------------------------------------
		dw 0
		db 1Fh
		dd offset loc_A0
		dd offset word_115A
		dd offset loc_611+1
		db 20h,	2, 74h
		dd 910300h, 74022006h, 4910304h
		db 6, 20h, 2
; ---------------------------------------------------------------------------
; START	OF FUNCTION CHUNK FOR _gg_win32_map_wsa_error_to_errno

loc_E7F:				; CODE XREF: _gg_win32_map_wsa_error_to_errno+E5Cj
		jz	short near ptr byte_E89
		add	edx, [ecx+1B000608h]
		lds	eax, fword ptr ds:_gg_win32_map_wsa_error_to_errno[eax]	; jumptable 00000038 cases 2,15
; END OF FUNCTION CHUNK	FOR _gg_win32_map_wsa_error_to_errno
; ---------------------------------------------------------------------------
byte_E89	db 2 dup(0), 8Ah	; CODE XREF: _gg_win32_map_wsa_error_to_errno:loc_E7Fj
		dd 1F000011h
		dd offset loc_D1
		dd offset loc_508+1
		dd offset loc_62D+1
		dd 1500120h
		db 3Bh,	0, 1Bh
		dd offset unk_DA
		dd offset off_1143+1
		align 4
		dd 3C70403h, 11C0000h, 775F6767h, 32336E69h, 6E69625Fh
		dd 9D010064h, 9601h
		db 0
		dd offset _gg_win32_bind
off_ECD		dd offset unk_142	; DATA XREF: .debug_info:00001726o
		dd offset off_21BD
		db 1, 0ECh, 6
		db 2 dup(0), 1Dh
		dd offset aSockfd	; "sockfd"
		db 1
		dd 969Dh, 910200h, 6464611Eh, 9D010072h, 3A5h, 1D049102h
		dd offset aAddrlen	; "addrlen"
		dd 3C79D01h, 91020000h,	65721A08h, 9F010073h, 96h
		dd offset off_223D
		db 1Fh
		dd offset loc_108
		dd offset byte_119B
		dd offset loc_6C1+5
		db 20h,	2, 74h
		dd 910300h, 74022006h, 4910304h, 74022006h, 8910308h
		db 6, 0, 1Bh
		dd offset loc_12D
		dd offset off_118A
		db 1Fh
		dd offset loc_139
		dd offset loc_508+1
		dd offset loc_6E1+1
		dd 1500120h
		db 3Bh,	0, 1Bh
		dd offset unk_142
		dd offset off_1143+1
		align 10h
		dd 47C21h
		db 0
		dd offset _gg_win32_close
		dd offset unk_196
		dd offset off_2287
		db 1, 73h, 7
		dd 99220000h, 2000004h,	0A4230091h
		db 4, 2	dup(0)
		dd offset off_2307
		db 24h
		dd offset loc_47C
		dd offset loc_17C
		dd offset loc_191
dword_F94	dd 753A901h		; DATA XREF: .debug_info:000017F3o
		db 2 dup(0), 25h
		dd offset loc_17C
		dd offset loc_191
		db 26h
		dd offset loc_4A3+1
		dd 49927h
		db 0, 1Bh
off_FAE		dd offset loc_181	; DATA XREF: .debug_info:00001813o
		dd offset off_118A
		db 28h
		dd offset loc_18D
		dd offset loc_508+1
		db 20h
		dd 3B015001h, 1F000000h
		dd offset loc_160
		dd offset byte_11C7
		dd offset loc_765+4
		dd 740220h, 6009103h
		db 0, 1Bh
off_FDE		dd offset unk_196	; DATA XREF: .debug_info:0000182Bo
		dd offset off_1143+1
		dw 1C00h
dword_FE8	dd 5F676701h, 336E6977h, 6F635F32h, 63656E6Eh, 0B6010074h
		dd 9601h
		db 0
		dd offset _gg_win32_connect
		dd offset unk_1FE
		dd offset off_2351
		db 1, 26h, 8
		db 2 dup(0), 1Dh
off_1013	dd offset aSockfd	; DATA XREF: .debug_info:00001877o
					; "sockfd"
		db 1
		dd 96B6h, 910200h, 6464611Eh, 0B6010072h, 3A5h,	1D049102h
		dd offset aAddrlen	; "addrlen"
dword_1034	dd 3C7B601h, 91020000h,	65721A08h, 0B8010073h, 96h
					; DATA XREF: .debug_info:00001892o
		dd offset off_23D1
		db 1Fh
off_104D	dd offset loc_1C4	; DATA XREF: .debug_info:000018B5o
		dd offset byte_11F6
		dd offset off_7FC+2
		db 20h,	2, 74h
		dd 910300h, 74022006h, 4910304h, 74022006h, 8910308h
byte_1070	db 6, 0, 1Bh		; DATA XREF: .debug_info:000018CDo
		dd offset loc_1E9
		dd offset off_118A
		db 1Fh
		dd offset loc_1F5
		dd offset loc_508+1
off_1084	dd offset off_81C	; DATA XREF: .debug_info:000018EDo
		dd 3500120h, 27340Ah
		db 1Bh
		dd offset unk_1FE
		dd offset off_1143+1
		align 2
		dw 11Ch
aGg_win32_getho	db 'gg_win32_gethostbyname',0 ; DATA XREF: .debug_info:00001902o
		db 1
		dd 3C101C3h
		db 2 dup(0)
off_10BA	dd offset _gg_win32_gethostbyname ; DATA XREF: .debug_info:00001923o
		dd offset unk_252
		dd offset off_241B
		dw 0B101h
dword_10C8	dd 1E000008h, 656D616Eh, 0B6C30100h, 2000003h, 721A0091h
		dd 1007365h, 3C1C5h
		db 0
		dd offset off_249B
		db 1Fh
		dd offset loc_21C
		dd offset aPtname	; "ptname"
		dd offset aGnuC4_7_2+0Bh ; ""
		dw 220h
		dd 91030074h, 1B000600h
		dd offset loc_23D
		dd offset off_118A
		db 1Fh
		dd offset loc_249
		dd offset loc_508+1
		dd offset dword_88C+1Bh
		db 20h,	1
byte_1117	db 50h			; DATA XREF: .debug_info:00000DEEo
		dd 1B003B01h
		dd offset unk_252
		dd offset off_1143+1
		db    0
		db 1Ch,	1, 67h
aG_win32_getsoc	db 'g_win32_getsockname',0
		dd 9601D001h
		db 3 dup(0)
off_1143	dd offset _gg_win32_getsockname	; DATA XREF: .debug_info:00000DF7o
					; .debug_info:00000EA7o ...
		dd offset unk_2BA
		dd offset off_24E5
		db 1
		dd offset aUnsignedInt+0Ah ; "int"
		db 1Dh
		dd offset aSockfd	; "sockfd"
		db 1
word_115A	dw 96D0h		; DATA XREF: .debug_info:00000E65o
		dd 2000000h, 611E0091h,	726464h, 39FD001h, 91020000h
		db 4, 1Dh
		dd offset aAddrlen	; "addrlen"
		dw 0D001h
		dd offset loc_634+4
		dd 1A089102h, 736572h, 96D201h
		db 2 dup(0)
off_118A	dd offset off_2565	; DATA XREF: .debug_info:00000F3Fo
					; .debug_info:00000FB2o ...
		db 1Fh
		dd offset loc_280
		dd offset byte_125B
		dd offset unk_940
byte_119B	db 20h			; DATA XREF: .debug_info:00000F19o
		dd 3007402h, 20060091h,	3047402h, 20060491h, 3087402h
		dd 60891h
		db 1Bh
		dd offset loc_2A5
		dd offset off_118A
		db 1Fh
		dd offset loc_2B1
		dd offset loc_508+1
		db 5Ch
byte_11C7	db 9			; DATA XREF: .debug_info:00000FCCo
		dd 1200000h, 3B0150h
		db 1Bh
		dd offset unk_2BA
		dd offset off_1143+1
		align 2
		dw 11Ch
aGg_win32_getso	db 'gg_win32_getsockopt',0
		dd 9601DD01h
		db 2 dup(0)
byte_11F6	db 0			; DATA XREF: .debug_info:00001051o
		dd offset _gg_win32_getsockopt
		dd offset unk_332
		dd offset off_25AF
		db 1
		dd offset dword_9B8+99h
		db 1Dh
		dd offset aSockfd	; "sockfd"
		db 1, 0DDh, 96h
		dd 2000000h, 6C1E0091h,	6C657665h, 96DD0100h, 2000000h
		dd 6F1E0491h
aPtname		db 'ptname',0           ; DATA XREF: .debug_info:000010EEo
		db 1
		dd 96DDh, 8910200h, 74706F1Eh, 6C6176h,	117DD01h, 91020000h
		dd 706F1E0Ch, 6E656C74h, 38DD0100h, 2000006h
		db 91h,	10h, 1Ah
byte_125B	db 72h			; DATA XREF: .debug_info:00001193o
		dd 1007365h, 96DFh
		db 0
		dd offset off_2632
		db 1Fh
		dd offset loc_2F8
		dd offset byte_1295
		dd offset dword_9B8+73h
		dw 220h
		dd 91030074h, 2200600h,	91030474h, 2200604h, 91030874h
		dd 2200608h, 91030C74h
		db 0Ch
byte_1295	db 6, 20h, 2		; DATA XREF: .debug_info:0000126Eo
		dd 91031074h, 1B000610h
		dd offset loc_31D
		dd offset off_118A
		db 1Fh
		dd offset loc_329
		dd offset loc_508+1
		dd offset dword_9B8+8Fh
		db 20h,	1, 50h
		dd 1B003B01h
		dd offset unk_332
		dd offset off_1143+1
dword_12C4	dd 67011C00h, 69775F67h, 5F32336Eh, 74636F69h, 0E901006Ch
		dd 9601h
		db 0
		dd offset _gg_win32_ioctl
		dd offset unk_39A
		dd offset off_267C
		db 1, 2, 0Bh
dword_12EC	dd 641E0000h, 96E90100h, 2000000h, 721E0091h, 65757165h
		dd 1007473h, 96E9h, 4910200h, 6772611Eh, 0E9010070h, 9Dh
		dd 1A089102h, 736572h, 96EB01h
		db 2 dup(0)
		dd offset off_26FC
		db 1Fh
		dd offset loc_360
		dd offset dword_12C4+13h
		dd offset dword_9B8+124h
		db 20h
dword_1338	dd 3007402h, 20060091h,	3047402h, 20060491h, 3087402h
					; DATA XREF: .debug_info:0000148Fo
		dd 60891h
		db 1Bh
		dd offset loc_385
		dd offset off_118A
		db 1Fh
		dd offset loc_391
		dd offset loc_508+1
		dd offset dword_9B8+140h
		dw 120h
		dd 3B0150h
byte_136C	db 1Bh			; DATA XREF: .debug_info:0000155Ao
		dd offset unk_39A
		dd offset off_1143+1
		align 2
		dw 11Ch
aGg_win32_liste	db 'gg_win32_listen',0
		dd 9601F601h
		db 3 dup(0)
		dd offset _gg_win32_listen
		dd offset unk_3FA
		dd offset off_2746
		db 1
off_139C	dd offset dword_9B8+1E7h ; DATA	XREF: .debug_info:00001644o
		db 1Dh
		dd offset aSockfd	; "sockfd"
		db 1, 0F6h, 96h
		dd 2000000h, 621E0091h,	6C6B6361h, 100676Fh, 96F6h, 4910200h
		dd 7365721Ah, 96F80100h
		db 3 dup(0)
		dd offset off_27C6
		db 1Fh
		dd offset loc_3C0
		dd offset dword_12EC+25h
		dd offset dword_9B8+1C1h
dword_13DC	dd 740220h, 6009103h, 4740220h,	6049103h ; DATA	XREF: .debug_info:00001722o
		db 0, 1Bh
		dd offset loc_3E5
		dd offset off_118A
		db 1Fh
		dd offset loc_3F1
		dd offset loc_508+1
		dd offset dword_9B8+1DDh
		db 20h
		dd 3B015001h
		db 0, 1Bh
		dd offset unk_3FA
off_140E	dd offset off_1143+1	; DATA XREF: .debug_info:0000180Fo
					; .debug_info:000018B1o
		dw 2900h
		dd 5F676701h, 336E6977h, 65725F32h, 1007663h, 96010103h
		db 3 dup(0)
off_142B	dd offset _gg_win32_recv ; DATA	XREF: .debug_info:off_874o
		dd offset unk_46A
		dd offset off_2810
		db 1
		dd offset loc_C69+1
		db 2Ah
		dd offset aSockfd	; "sockfd"
		db 1, 3, 1
		dd offset loc_94+2
		dd 2B009102h, 667562h, 17010301h, 2000001h, 6C2B0491h
		dd 1006E65h, 0F60103h, 91020000h, 6C662B08h, 736761h, 96010301h
		dd 2000000h, 722C0C91h,	1007365h, 960105h
		db 2 dup(0)
		dd offset off_2890
		db 1Fh
		dd offset loc_430
		dd offset dword_1338+3
		dd offset loc_C44
		db 20h
		dd 3007402h, 20060091h,	3047402h, 20060491h, 3087402h
		dd 20060891h, 30C7402h,	60C91h
		db 1Bh
		dd offset loc_455
		dd offset off_118A
		db 1Fh
		dd offset loc_461
		dd offset loc_508+1
		dd offset loc_C60
		dw 120h
		dd 3B0150h
		db 1Bh
		dd offset unk_46A
		dd offset off_1143+1
		align 2
		dw 129h
aGg_win32_send	db 'gg_win32_send',0
		dw 1001h
		dd 960101h
		db 2 dup(0)
		dd offset _gg_win32_send
		dd offset unk_4DA
		dd offset off_28DA
		dw 3501h
		dd 2A00000Dh
		dd offset aSockfd	; "sockfd"
		dd 96011001h, 2000000h,	622B0091h, 1006675h, 0DF0110h
		dd 91020000h, 656C2B04h, 1001006Eh, 0F601h, 8910200h, 616C662Bh
		dd 1007367h, 960110h, 91020000h, 65722C0Ch, 12010073h
		dd 9601h
		db 0
		dd offset off_295A
		db 1Fh
		dd offset loc_4A0
		dd offset byte_136C
		dd offset off_D0E+1
		dw 220h
		dd 91030074h, 2200600h,	91030474h, 2200604h, 91030874h
		dd 2200608h, 91030C74h,	1B00060Ch
		dd offset loc_4C5
		dd offset off_118A
		db 1Fh
		dd offset loc_4D1
		dd offset loc_508+1
		dd offset dword_D24+7
		db 20h,	1, 50h
		dd 1B003B01h
		dd offset unk_4DA
		dd offset off_1143+1
		db    0
		db 29h,	1, 67h
aG_win32_setsoc	db 'g_win32_setsockopt',0
		db 1
		dd 9601011Dh
		db 3 dup(0)
		dd offset _gg_win32_setsockopt
		dd offset unk_552
		dd offset off_29A4
		db 1
		dd offset off_E27
		db 2Ah
		dd offset aSockfd	; "sockfd"
		db 1, 1Dh, 1
		dd offset loc_94+2
		dd 2B009102h, 6576656Ch, 1D01006Ch, 9601h, 4910200h, 74706F2Bh
		dd 656D616Eh, 11D0100h,	96h, 2B089102h,	7674706Fh, 1006C61h
		dd 0DF011Dh, 91020000h,	706F2B0Ch, 6E656C74h, 11D0100h
		dd 3C7h, 2C109102h, 736572h, 96011F01h
		db 3 dup(0)
		dd offset off_2A27
		db 1Fh
		dd offset loc_518
		dd offset off_139C+1
		dd offset dword_DFC+5
		dd 740220h, 6009103h, 4740220h,	6049103h, 8740220h, 6089103h
		dd 0C740220h, 60C9103h,	10740220h, 6109103h
		db 0, 1Bh
		dd offset loc_53D
		dd offset off_118A
		db 1Fh
		dd offset loc_549
		dd offset loc_508+1
		dd offset off_E1D
		db 20h
		dd 3B015001h
		db 0, 1Bh
		dd offset unk_552
		dd offset off_1143+1
		dw 2100h
		dd offset loc_4B0
		dd offset _gg_win32_socket
		dd offset unk_5BA
		dd offset off_2A71
		dd 0ED901h, 4CF2200h, 91020000h, 4DE2200h, 91020000h, 4EB2204h
		dd 91020000h, 4FC2308h
		db 2 dup(0)
		dd offset off_2AF1
		dw 0B02Dh
		db 4, 2	dup(0)
		dd offset loc_5A0
		dd offset loc_5B5
		db 1
		dd 0EA9012Ah
		db 2 dup(0), 25h
		dd offset loc_5A0
		dd offset loc_5B5
		db 26h
		dd offset loc_4FC
		dd 4EB27h, 4DE2700h, 0CF270000h, 1B000004h
		dd offset loc_5A5
		dd offset off_118A
		db 28h
		dd offset loc_5B1
		dd offset loc_508+1
		db 20h,	1, 50h
		dd 3B01h
		db 0, 1Fh
		dd offset loc_580
		dd offset dword_13DC+3
		dd offset off_ECD+2
		dw 220h
		dd 91030074h, 2200600h,	91030474h, 2200604h, 91030874h
		dd 1B000608h
		dd offset unk_5BA
		dd offset off_1143+1
		db    0
		db 1Ch,	1, 67h
aG_win32_socket	db 'g_win32_socketpair',0
		db 1
		dd 960126h
		db 2 dup(0)
		dd offset _gg_win32_socketpair
		dd offset loc_783+5
		dd offset off_2B3B
		dw 0FE01h
		dd 1E000010h, 1007673h,	9D26h, 910200h,	6E69732Eh, 0DE280100h
		dd 2000002h, 732E4C91h,	6C5F6E69h, 1006E65h, 3C729h, 44910200h
		dd 7265731Ah, 726576h, 962A01h
		db 2 dup(0)
		dd offset off_2C09
a_tmp		db '.tmp',0
		db 1
		dd 962Bh, 48910200h, 7272651Ah,	635F6F6Eh, 79706Fh, 962C01h
		db 2 dup(0)
		dd offset off_2C3F
aFail		db '/fail',0
		db 1, 5Bh
		dd offset loc_750
		db 1Fh
		dd offset loc_5FE
		dd offset loc_4B0
		dd offset dword_F94+2
		db 20h
		dd 1007402h, 74022032h,	20310104h, 1087402h
		db 36h,	0, 1Fh
		dd offset loc_639
		dd offset off_140E+1
		dd offset off_FAE
		db 20h
		dd 5007402h, 10Ch
		db 7Fh,	0, 1Fh
		dd offset loc_66D
		dd offset loc_D34+1
		dd offset off_FDE
		db 20h
		dd 2007402h, 2200073h, 0A030474h, 220FFFFh, 34010874h
		dd 0C740220h, 20489102h, 1107402h
		db 34h,	0, 1Fh
		dd offset loc_688
		dd offset loc_63E
		dd offset dword_FE8+12h
		db 20h
		dd 2007402h, 2200073h, 76020474h
		db 2 dup(0), 1Fh
		dd offset loc_69F
		dd offset dword_9B8+14Ah
		dd offset off_1013+2
		db 20h
		dd 2007402h, 2200073h, 31010474h
		db 0, 1Fh
		dd offset loc_6BA
		dd offset dword_88C+25h
		dd offset dword_1034+4
		dw 220h
		dd 73020074h, 74022000h, 760204h, 8740220h, 449102h
		db 1Fh
		dd offset loc_6D4
		dd offset off_140E+1
		dd offset off_104D+3
		db 20h,	2, 74h
		dd 10C0500h, 7F0000h
		db 1Fh
		dd offset loc_6F5
		dd offset loc_4B0
		dd offset byte_1070
		db 20h,	2, 74h
		dd 20320100h, 1047402h,	74022031h, 300108h
		db 1Fh
		dd offset loc_711
		dd offset loc_770+3
		dd offset off_1084+1
		db 20h,	2, 74h
		dd 760204h
		db 0, 1Fh
		dd offset loc_72C
		dd offset loc_588
		dd offset aGg_win32_getho+0Ah ;	"ethostbyname"
		dw 220h
		dd 73020074h, 74022000h, 20300104h, 1087402h
		db 30h,	0, 1Fh
		dd offset loc_73A
		dd offset loc_47C
		dd offset off_10BA+1
		db 20h
		dd 2007402h, 1B000073h
		dd offset loc_755
		dd offset off_118A
		db 1Fh
		dd offset loc_75F
		dd offset loc_47C
		dd offset dword_10C8+11h
		db 20h,	2, 74h
		dd 730200h
		db 0, 1Bh
		dd offset loc_76A
		dd offset loc_47C
		db 1Bh
		dd offset loc_775
		dd offset loc_47C
		db 1Bh
		dd offset loc_77A
		dd offset off_118A
		db 1Bh
		dd offset loc_783+5
		dd offset off_1143+1
		align 2
		dw 700Dh
		dd 9000004h, 30000011h,	695F3100h, 500626Fh, 10FE9Ah, 32010100h
		dd 41535701h, 4C746547h, 45747361h, 726F7272h, 2520300h
		dd 47415357h, 614C7465h, 72457473h, 40726F72h, 96010030h
		dd 1000000h, 5F5F0133h,	63617473h, 68635F6Bh, 61665F6Bh
		dd 1006C69h, 1340101h, 65636361h, 3007470h, 63610218h
		dd 74706563h, 323140h, 19701h, 118A0100h, 97350000h, 35000001h
		dd 39Fh, 9D35h,	1360000h, 7272655Fh, 6006F6Eh, 9D015Bh
		dd 34010000h, 6E696201h, 19030064h, 6E696202h, 32314064h
		dd 960100h, 0C7010000h,	35000011h, 197h, 3A535h, 963500h
		dd 34000000h, 6F6C6301h, 6F736573h, 74656B63h, 21A0300h
		dd 736F6C63h, 636F7365h, 4074656Bh, 96010034h, 1000000h
		dd 11F6h, 19735h, 1340000h, 6E6E6F63h, 746365h,	63021B03h
		dd 656E6E6Fh, 31407463h, 96010032h, 1000000h, 1228h, 19735h
		dd 3A53500h, 96350000h,	0
		dd 65670134h, 736F6874h, 6E796274h, 656D61h, 67022B03h
		dd 6F687465h, 79627473h, 656D616Eh, 1003440h, 3C1h, 125B01h
		dd 3B63500h, 34000000h,	74656701h, 6B636F73h, 656D616Eh
		dd 21E0300h, 73746567h,	6E6B636Fh, 40656D61h, 1003231h
		dd 96h,	129501h, 1973500h, 9F350000h, 35000003h, 9Dh, 67013400h
		dd 6F737465h, 706F6B63h, 1F030074h, 74656702h, 6B636F73h
		dd 4074706Fh, 1003032h,	96h, 12D701h, 1973500h,	96350000h
		dd 35000000h, 96h, 11135h, 9D3500h, 34000000h, 636F6901h
		dd 6F736C74h, 74656B63h, 21C0300h, 74636F69h, 636F736Ch
		dd 4074656Bh, 1003231h,	96h, 131101h, 1973500h,	0D3350000h
		dd 35000000h, 3B0h, 6C013400h, 65747369h, 2203006Eh, 73696C02h
		dd 406E6574h, 96010038h, 1000000h, 133Bh, 19735h, 963500h
		dd 34000000h, 63657201h, 23030076h, 63657202h, 36314076h
		dd 960100h, 6C010000h, 35000013h, 197h,	11135h,	963500h
		dd 96350000h, 0
		dd 65730134h, 300646Eh,	65730225h, 3140646Eh, 96010036h
		dd 1000000h, 139Dh, 19735h, 3B63500h, 96350000h, 35000000h
		dd 96h,	73013400h, 6F737465h, 706F6B63h, 27030074h, 74657302h
		dd 6B636F73h, 4074706Fh, 1003032h, 96h,	13DF01h, 1973500h
		dd 96350000h, 35000000h, 96h, 3B635h, 963500h, 34000000h
		dd 636F7301h, 74656Bh, 73022903h, 656B636Fh, 32314074h
		dd 1970100h, 0F010000h,	35000014h, 96h,	9635h, 963500h
		dd 37000000h, 6F746801h, 3006C6Eh, 74680274h, 406C6E6Fh
		dd 89010034h, 1000001h,	18935h
		db 3 dup(0)
		align 4
_debug_info	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_debug_abbrev	segment	byte public 'DATA' use32
		assume cs:_debug_abbrev
		;org 1CA4h
dword_1CA4	dd 25011101h, 30B1308h,	11081B08h, 10011201h, 2000006h
					; DATA XREF: .debug_info:0000087Ao
		dd 0B0B0024h, 8030B3Eh,	0F030000h, 490B0B00h, 4000013h
		dd 26h,	3001605h, 3B0B3A08h, 13490Bh, 0F0600h, 0B0Bh, 3011307h
		dd 3A0B0B08h, 10B3B0Bh,	8000013h, 803000Dh, 0B3B0B3Ah
		dd 0A381349h, 13090000h, 3A0B0B01h, 10B3B0Bh, 0A000013h
		dd 0B0B0117h, 0B3B0B3Ah, 1301h,	3000D0Bh, 3B0B3A08h, 13490Bh
		dd 0D0C00h, 0B3A0803h, 1349053Bh, 0A38h, 4901010Dh, 130113h
		dd 210E00h, 0B2F1349h, 130F0000h, 0B080301h, 3B0B3A0Bh
		dd 130105h, 261000h, 1349h, 3001611h, 3B0B3A08h, 134905h
		dd 12E1200h, 8030C3Fh, 0B3B0B3Ah, 13490C27h, 13010B20h
		dd 5130000h, 3A0E0300h,	490B3B0Bh, 14000013h, 8030034h
		dd 0B3B0B3Ah, 1349h, 3F012E15h,	3A08030Ch, 27053B0Bh, 2013490Ch
		dd 13010Bh, 51600h, 0B3A0803h, 1349053Bh, 34170000h, 3A080300h
		dd 49053B0Bh, 18000013h, 803012Eh, 0B3B0B3Ah, 13490C27h
		dd 1120111h, 42970640h,	13010Ch, 51900h, 0B3A0803h, 13490B3Bh
		dd 602h, 300341Ah, 3B0B3A08h, 213490Bh,	1B000006h, 18289h
		dd 13310111h, 2E1C0000h, 30C3F01h, 3B0B3A08h, 490C270Bh
		dd 12011113h, 97064001h, 13010C42h, 51D0000h, 3A0E0300h
		dd 490B3B0Bh, 0A0213h, 51E00h, 0B3A0803h, 13490B3Bh, 0A02h
		dd 182891Fh, 31011101h,	130113h, 828A2000h, 0A020001h
		dd 0A4291h, 12E2100h, 1111331h,	6400112h, 10C4297h, 22000013h
		dd 13310005h, 0A02h, 31003423h,	60213h,	11D2400h, 1111331h
		dd 0B580112h, 13010B59h, 0B250000h, 12011101h, 26000001h
		dd 13310034h, 5270000h,	133100h, 82892800h, 1110101h, 1331h
		dd 3F012E29h, 3A08030Ch, 27053B0Bh, 1113490Ch, 40011201h
		dd 0C429706h, 1301h, 300052Ah, 3B0B3A0Eh, 2134905h, 2B00000Ah
		dd 8030005h, 53B0B3Ah, 0A021349h, 342C0000h, 3A080300h
		dd 49053B0Bh, 60213h, 11D2D00h,	1111331h, 0B580112h, 13010559h
		dd 342E0000h, 3A080300h, 490B3B0Bh, 0A0213h, 0A2F00h, 0B3A0803h
		dd 1110B3Bh, 21300000h,	31000000h, 8030034h, 0B3B0B3Ah
		dd 0C3F1349h, 0C3Ch, 3F002E32h,	3A08030Ch, 87053B0Bh, 0C270840h
		dd 0C3C1349h, 2E330000h, 30C3F00h, 340C2708h, 0C3C0Ch
		dd 12E3400h, 8030C3Fh, 53B0B3Ah, 27084087h, 3C13490Ch
		dd 13010Ch, 53500h, 1349h, 3F002E36h, 3A08030Ch, 270B3B0Bh
		dd 3C13490Ch, 3700000Ch, 0C3F012Eh, 0B3A0803h, 4087053Bh
		dd 490C2708h, 0C3C13h
		db 2 dup(0)
		align 4
_debug_abbrev	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_debug_loc	segment	byte public 'DATA' use32
		assume cs:_debug_loc
		;org 1FB4h
dword_1FB4	dd 0			; DATA XREF: .debug_info:00000DADo
		dd 1, 4740002h,	1, 4, 8740002h,	4, 35h,	20740002h, 35h
		dd 36h,	8740002h, 36h, 38h, 4740002h, 38h, 74h,	20740002h
		dd 2 dup(0)
dword_2004	dd 0			; DATA XREF: .debug_info:00000DD0o
		dd 11h,	11500001h, 23000000h, 1000000h,	235300h, 370000h
		dd 40000h, 9F5001F3h, 37h, 45h,	45530001h, 47000000h, 4000000h
		dd 5001F300h, 479Fh, 4D00h, 53000100h, 4Dh, 4Fh, 1F30004h
		dd 4F9F50h, 550000h, 10000h, 5553h, 5700h, 0F3000400h
		dd 579F5001h, 5D000000h, 1000000h, 5D5300h, 5F0000h, 40000h
		dd 9F5001F3h, 5Fh, 65h,	65530001h, 67000000h, 4000000h
		dd 5001F300h, 679Fh, 6D00h, 53000100h, 6Dh, 74h, 1F30004h
		dd 9F50h, 0
		db 2 dup(0)
word_20C6	dw 16h			; DATA XREF: .debug_info:00000DE5o
		dd 260000h, 10000h, 2650h, 3000h, 72000500h, 9F00CE94h
		dd 37h,	6Fh, 500001h, 0
		db 3 dup(0)
off_20F3	dd offset _gg_win32_accept ; DATA XREF:	.debug_info:off_E1Do
		dd offset loc_75
		db 2
		dd 75047400h, 76000000h, 2000000h, 76087400h, 79000000h
		dd 2000000h, 790C7400h,	0A0000000h, 2000000h, 0A0307400h
		dd 0A3000000h, 2000000h, 0A3247400h, 0BB000000h, 2000000h
		dd 0BB307400h, 0BC000000h, 2000000h, 0BC0C7400h, 0BD000000h
		dd 2000000h, 0BD087400h, 0C0000000h, 2000000h, 0C0047400h
		dd 0DA000000h, 2000000h, 307400h, 0
		dd 0A5000000h, 0AA000000h, 1000000h, 0AA5000h, 0B80000h
		dd 10000h, 0B853h, 0C400h, 50000100h, 0C4h, 0D5h, 0D5530001h
		dd 0D9000000h, 1000000h, 0D95000h, 0DA0000h, 10000h, 53h
		dd 0
		db 0
off_21BD	dd offset _gg_win32_bind ; DATA	XREF: .debug_info:00000ED1o
		dd offset loc_DD
		db 2, 0, 74h
		dd 0DD04h, 0DE00h, 74000200h, 0DE08h, 0E100h, 74000200h
		dd 0E10Ch, 10800h, 74000200h, 10830h, 10B00h, 74000200h
		dd 10B24h, 12300h, 74000200h, 12330h, 12400h, 74000200h
		dd 1240Ch, 12500h, 74000200h, 12508h, 12800h, 74000200h
		dd 12804h, 14200h, 74000200h, 30h, 0
		db 0
off_223D	dd offset loc_10D	; DATA XREF: .debug_info:00000F10o
		dd offset loc_112
		db 1, 0, 50h
		dd offset loc_112
		dd offset loc_120
		dd 20530001h, 2C000001h, 1000001h, 12C5000h, 13D0000h
		dd 10000h, 13D53h, 14100h, 50000100h, 141h, 142h, 530001h
		dd 0
		db 3 dup(0)
off_2287	dd offset _gg_win32_close ; DATA XREF: .debug_info:00000F6Do
		dd offset loc_145
		db 2
		dd 45047400h, 46000001h, 2000001h, 46087400h, 49000001h
		dd 2000001h, 490C7400h,	60000001h, 2000001h, 60307400h
		dd 61000001h, 2000001h,	612C7400h, 79000001h, 2000001h
		dd 79307400h, 7A000001h, 2000001h, 7A0C7400h, 7B000001h
		dd 2000001h, 7B087400h,	7C000001h, 2000001h, 7C047400h
		dd 96000001h, 2000001h,	307400h, 0
		db 3 dup(0)
off_2307	dd offset loc_163	; DATA XREF: .debug_info:00000F83o
		dd offset loc_168
		db 1
		dd 1685000h, 1760000h, 10000h, 17653h, 18000h, 50000100h
		dd 180h, 191h, 91530001h, 95000001h, 1000001h, 1955000h
		dd 1960000h, 10000h, 53h, 0
		db 0
off_2351	dd offset _gg_win32_connect ; DATA XREF: .debug_info:00001009o
		dd offset loc_199
		db 2, 0, 74h
		dd 19904h, 19A00h, 74000200h, 19A08h, 19D00h, 74000200h
		dd 19D0Ch, 1C400h, 74000200h, 1C430h, 1C700h, 74000200h
		dd 1C724h, 1DF00h, 74000200h, 1DF30h, 1E000h, 74000200h
		dd 1E00Ch, 1E100h, 74000200h, 1E108h, 1E400h, 74000200h
		dd 1E404h, 1FE00h, 74000200h, 30h, 0
		db 0
off_23D1	dd offset loc_1C9	; DATA XREF: .debug_info:00001048o
		dd offset loc_1CE
		db 1, 0, 50h
		dd offset loc_1CE
		dd offset loc_1DC
		dd 0DC530001h, 0E8000001h, 1000001h, 1E85000h, 1F90000h
		dd 10000h, 1F953h, 1FD00h, 50000100h, 1FDh, 1FEh, 530001h
		dd 0
		db 3 dup(0)
off_241B	dd offset _gg_win32_gethostbyname ; DATA XREF: .debug_info:000010C2o
		dd offset loc_201
		db 2
		dd 1047400h, 2 dup(2000002h), 2087400h,	5000002h, 2000002h
		dd 50C7400h, 1C000002h,	2000002h, 1C307400h, 1D000002h
		dd 2000002h, 1D2C7400h,	34000002h, 2000002h, 34307400h
		dd 35000002h, 2000002h,	350C7400h, 36000002h, 2000002h
		dd 36087400h, 38000002h, 2000002h, 38047400h, 52000002h
		dd 2000002h, 307400h, 0
		db 3 dup(0)
off_249B	dd offset loc_21F	; DATA XREF: .debug_info:000010E5o
		dd offset loc_223
		db 1
		dd 2235000h, 2310000h, 10000h, 23153h, 23C00h, 50000100h
		dd 23Ch, 24Dh, 4D530001h, 51000002h, 1000002h, 2515000h
		dd 2520000h, 10000h, 53h, 0
		db 0
off_24E5	dd offset _gg_win32_getsockname	; DATA XREF: .debug_info:0000114Bo
		dd offset loc_255
		db 2, 0, 74h
		dd 25504h, 25600h, 74000200h, 25608h, 25900h, 74000200h
		dd 2590Ch, 28000h, 74000200h, 28030h, 28300h, 74000200h
		dd 28324h, 29B00h, 74000200h, 29B30h, 29C00h, 74000200h
		dd 29C0Ch, 29D00h, 74000200h, 29D08h, 2A000h, 74000200h
		dd 2A004h, 2BA00h, 74000200h, 30h, 0
		db 0
off_2565	dd offset loc_285	; DATA XREF: .debug_info:off_118Ao
		dd offset loc_28A
		db 1, 0, 50h
		dd offset loc_28A
		dd offset loc_298
		dd 98530001h, 0A4000002h, 1000002h, 2A45000h, 2B50000h
		dd 10000h, 2B553h, 2B900h, 50000100h, 2B9h, 2BAh, 530001h
		dd 0
		db 3 dup(0)
off_25AF	dd offset _gg_win32_getsockopt ; DATA XREF: .debug_info:000011FFo
		dd offset loc_2BD
		db 2
		dd 0BD047400h, 0BE000002h, 2000002h, 0BE087400h, 0C1000002h
		dd 2000002h, 0C10C7400h, 0F8000002h, 3000002h, 0C07400h
		dd 2F8h, 2FBh, 2C740002h, 2FBh,	313h, 0C0740003h, 31300h
		dd 31400h, 74000200h, 3140Ch, 31500h, 74000200h, 31508h
		dd 31800h, 74000200h, 31804h, 33200h, 74000300h, 0C0h
		dd 0
		db 2 dup(0)
off_2632	dd offset loc_2FD	; DATA XREF: .debug_info:00001265o
		dd offset loc_302
		dw 1
		dd 30250h, 31000h, 53000100h, 310h, 31Ch, 1C500001h, 2D000003h
		dd 1000003h, 32D5300h, 3310000h, 10000h, 33150h, 33200h
		dd 53000100h, 2	dup(0)
off_267C	dd offset _gg_win32_ioctl ; DATA XREF: .debug_info:000012E5o
		dd offset loc_335
		dd 4740002h, 335h, 336h, 8740002h, 336h, 339h, 0C740002h
		dd 339h, 360h, 30740002h, 360h,	363h, 24740002h, 363h
		dd 37Bh, 30740002h, 37Bh, 37Ch,	0C740002h, 37Ch, 37Dh
		dd 8740002h, 37Dh, 380h, 4740002h, 380h, 39Ah, 30740002h
		dd 2 dup(0)
off_26FC	dd offset loc_365	; DATA XREF: .debug_info:00001326o
		dd offset loc_36A
		dd 6A500001h, 78000003h, 1000003h, 3785300h, 3840000h
		dd 10000h, 38450h, 39500h, 53000100h, 395h, 399h, 99500001h
		dd 9A000003h, 1000003h,	5300h, 0
		db 2 dup(0)
off_2746	dd offset _gg_win32_listen ; DATA XREF:	.debug_info:00001397o
		dd offset loc_39D
		dw 2
		dd 39D0474h, 39E0000h, 20000h, 39E0874h, 3A10000h, 20000h
		dd 3A10C74h, 3C00000h, 20000h, 3C03074h, 3C30000h, 20000h
		dd 3C32874h, 3DB0000h, 20000h, 3DB3074h, 3DC0000h, 20000h
		dd 3DC0C74h, 3DD0000h, 20000h, 3DD0874h, 3E00000h, 20000h
		dd 3E00474h, 3FA0000h, 20000h, 3074h, 0
		db 2 dup(0)
off_27C6	dd offset loc_3C5	; DATA XREF: .debug_info:000013CBo
		dd offset loc_3CA
		dw 1
		dd 3CA50h, 3D800h, 53000100h, 3D8h, 3E4h, 0E4500001h, 0F5000003h
		dd 1000003h, 3F55300h, 3F90000h, 10000h, 3F950h, 3FA00h
		dd 53000100h, 2	dup(0)
off_2810	dd offset _gg_win32_recv ; DATA	XREF: .debug_info:00001433o
		dd offset loc_3FD
		dd 4740002h, 3FDh, 3FEh, 8740002h, 3FEh, 401h, 0C740002h
		dd 401h, 430h, 30740002h, 430h,	433h, 20740002h, 433h
		dd 44Bh, 30740002h, 44Bh, 44Ch,	0C740002h, 44Ch, 44Dh
		dd 8740002h, 44Dh, 450h, 4740002h, 450h, 46Ah, 30740002h
		dd 2 dup(0)
off_2890	dd offset loc_435	; DATA XREF: .debug_info:00001486o
		dd offset loc_43A
		dd 3A500001h, 48000004h, 1000004h, 4485300h, 4540000h
		dd 10000h, 45450h, 46500h, 53000100h, 465h, 469h, 69500001h
		dd 6A000004h, 1000004h,	5300h, 0
		db 2 dup(0)
off_28DA	dd offset _gg_win32_send ; DATA	XREF: .debug_info:000014FEo
		dd offset loc_46D
		dw 2
		dd 46D0474h, 46E0000h, 20000h, 46E0874h, 4710000h, 20000h
		dd 4710C74h, 4A00000h, 20000h, 4A03074h, 4A30000h, 20000h
		dd 4A32074h, 4BB0000h, 20000h, 4BB3074h, 4BC0000h, 20000h
		dd 4BC0C74h, 4BD0000h, 20000h, 4BD0874h, 4C00000h, 20000h
		dd 4C00474h, 4DA0000h, 20000h, 3074h, 0
		db 2 dup(0)
off_295A	dd offset loc_4A5	; DATA XREF: .debug_info:00001551o
		dd offset loc_4AA
		dw 1
		dd 4AA50h, 4B800h, 53000100h, 4B8h, 4C4h, 0C4500001h, 0D5000004h
		dd 1000004h, 4D55300h, 4D90000h, 10000h, 4D950h, 4DA00h
		dd 53000100h, 2	dup(0)
off_29A4	dd offset _gg_win32_setsockopt ; DATA XREF: .debug_info:000015CFo
		dd offset loc_4DD
		dd 4740002h, 4DDh, 4DEh, 8740002h, 4DEh, 4E1h, 0C740002h
		dd 4E1h, 518h, 0C0740003h, 51800h, 51B00h, 74000200h, 51B2Ch
		dd 53300h, 74000300h, 53300C0h,	5340000h, 20000h, 5340C74h
		dd 5350000h, 20000h, 5350874h, 5380000h, 20000h, 5380474h
		dd 5520000h, 30000h, 0C074h, 0
		db 3 dup(0)
off_2A27	dd offset loc_51D	; DATA XREF: .debug_info:0000163Bo
		dd offset loc_522
		db 1
		dd 5225000h, 5300000h, 10000h, 53053h, 53C00h, 50000100h
		dd 53Ch, 54Dh, 4D530001h, 51000005h, 1000005h, 5515000h
		dd 5520000h, 10000h, 53h, 0
		db 0
off_2A71	dd offset _gg_win32_socket ; DATA XREF:	.debug_info:000016A8o
		dd offset loc_555
		db 2, 0, 74h
		dd 55504h, 55600h, 74000200h, 55608h, 55900h, 74000200h
		dd 5590Ch, 58000h, 74000200h, 58030h, 58300h, 74000200h
		dd 58324h, 59B00h, 74000200h, 59B30h, 59C00h, 74000200h
		dd 59C0Ch, 59D00h, 74000200h, 59D08h, 5A000h, 74000200h
		dd 5A004h, 5BA00h, 74000200h, 30h, 0
		db 0
off_2AF1	dd offset loc_585	; DATA XREF: .debug_info:000016CEo
		dd offset loc_58A
		db 1, 0, 50h
		dd offset loc_58A
		dd offset loc_598
		dd 98530001h, 0A4000005h, 1000005h, 5A45000h, 5B50000h
		dd 10000h, 5B553h, 5B900h, 50000100h, 5B9h, 5BAh, 530001h
		dd 0
		db 3 dup(0)
off_2B3B	dd offset _gg_win32_socketpair ; DATA XREF: .debug_info:00001772o
		dd offset loc_5BD
		db 2
		dd 0BD047400h, 0BE000005h, 2000005h, 0BE087400h, 0BF000005h
		dd 2000005h, 0BF0C7400h, 0C0000005h, 2000005h, 0C0107400h
		dd 0C3000005h, 2000005h, 0C3147400h, 39000005h,	3000006h
		dd 0E07400h, 639h, 63Ah, 0DC740003h, 63A00h, 6D400h, 74000300h
		dd 6D400E0h, 6D50000h, 30000h, 0D500DC74h, 4B000006h, 3000007h
		dd 0E07400h, 74Bh, 74Ch, 14740002h, 74Ch, 74Dh,	10740002h
		dd 74Dh, 74Eh, 0C740002h, 74Eh,	74Fh, 8740002h,	74Fh, 750h
		dd 4740002h, 750h, 788h, 0E0740003h, 2 dup(0)
		db 0
off_2C09	dd offset loc_5DA	; DATA XREF: .debug_info:000017B6o
		align 2
		dw 6
		dd 9000300h, 6009FFFh, 6220000h, 10000h, 62250h, 74C00h
		dd 53000100h, 750h, 788h, 530001h, 0
		db 3 dup(0)
off_2C3F	dd offset loc_757	; DATA XREF: .debug_info:000017DAo
		dd offset loc_783
		db 1
		dd 5600h, 0
		db 2 dup(0)
		align 4
_debug_loc	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_debug_aranges	segment	byte public 'DATA' use32
		assume cs:_debug_aranges
		;org 2C54h
		dd 1Ch
		db 2, 0
		dd offset off_874
		dw 4
		dd 0
		dd offset _gg_win32_map_wsa_error_to_errno ; jumptable 00000038	cases 2,15
		dd offset byte_788
		dd 2 dup(0)
_debug_aranges	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_debug_line	segment	byte public 'DATA' use32
		assume cs:_debug_line
		;org 2C74h
off_2C74	dd offset loc_1F9+3	; DATA XREF: .debug_info:000008E9o
		db    2
		align 2
		dd offset loc_118
		dw 101h
		db 0FBh	; ˚
		db 0Eh,	0Dh, 0
		db    1
		db 3 dup(1)
		db    0
		db 2 dup(0), 1
		db    0
		align 2
		dw 6C01h
		db  69h	; i
		db 62h,	0, 63h
aWorkspacePidgi	db ':/workspace/pidgin-devel/win32-dev/mingw-4.7.2/bin/../lib/gcc/min'
		db 'gw32/4.7.2/include',0
aCWorkspacePidg	db 'c:/workspace/pidgin-devel/win32-dev/mingw-4.7.2/bin/../lib/gcc/mi'
		db 'ngw32/4.7.2/../../../../include',0
		align 2
aNetwork_c	db 'network.c',0
		dd 73000001h, 65646474h, 682E66h, 77000002h, 6F736E69h
		dd 2E326B63h, 30068h, 32737700h, 69706374h, 682E70h, 73000003h
		dd 6F696474h, 300682Eh,	72650000h, 2E6F6E72h, 30068h, 5000000h
		db 2
		dd offset _gg_win32_map_wsa_error_to_errno ; jumptable 00000038	cases 2,15
		db 3, 0E5h, 0
		dd 3AF6601h, 7403580Ch,	3C2403ACh, 3C086803h, 7E848986h
		dd 5C7B8488h, 0F408AF58h, 855085Ch, 0AF58784Dh,	85CF408h
		dd 774D0855h, 5CE6AF58h, 4D083908h, 8AF5878h, 55085CF4h
		dd 58784D08h, 84EE6AFh,	784D0847h, 0F408AF58h, 855085Ch
		dd 0AF58784Dh, 5C143102h, 4D085508h, 8AF5877h, 55085CF4h
		dd 58784D08h, 5C8408AFh, 4D085508h, 2AF5878h, 85C1429h
		dd 784D0855h, 2902AF58h, 55085C14h, 58784D08h, 143102AFh
		dd 855085Ch, 0AF58784Dh, 85CF408h, 34D0855h, 0AC747DF3h
		dd 88584AEh, 937675CAh,	130875E5h, 152F0276h, 6908A108h
		dd 875A108h, 5BD80814h,	0A0086908h, 0A03843Fh, 879032Eh
		dd 0AD83753Ch, 27576ADh, 1010005h
_debug_line	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_debug_str	segment	byte public 'DATA' use32
		assume cs:_debug_str
		;org 2E74h
aAddrlen	db 'addrlen',0          ; DATA XREF: .debug_info:00000E44o
					; .debug_info:00000EF8o ...
aSockfd		db 'sockfd',0           ; DATA XREF: .debug_info:off_D0Eo
					; .debug_info:off_E27o	...
		align 4
_debug_str	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_eh_frame	segment	dword public 'DATA' use32
		assume cs:_eh_frame
		;org 2E84h
		dd 14h,	0
		dd 527A01h, 1087C01h, 4040C1Bh,	188h, 20h, 1Ch
		dd offset loc_783-3627h
		dd offset _gg_win32_accept
		dd 80E4100h, 0E430283h,	0E0A7120h, 0EC34108h, 0B4204h
		dd 30h,	40h
		dd offset loc_783-35D7h
		dd offset loc_65+1
		dd 80E4100h, 0E410286h,	4303830Ch, 0E67300Eh, 300E4324h
		dd 0C0E0A58h, 80EC341h,	40EC641h, 0B43h, 30h, 74h
		dd offset loc_783-35A3h
		dd offset loc_65+1
		dd 80E4100h, 0E410286h,	4303830Ch, 0E67300Eh, 300E4324h
		dd 0C0E0A58h, 80EC341h,	40EC641h, 0B43h, 30h, 0A8h
		dd offset loc_783-356Fh
		dd offset loc_50+2
		dd 80E4100h, 0E410286h,	4303830Ch, 0E57300Eh, 300E412Ch
		dd 0C0E0A58h, 80EC341h,	40EC641h, 0B41h, 30h, 0DCh
		dd offset loc_783-354Fh
		dd offset loc_65+1
		dd 80E4100h, 0E410286h,	4303830Ch, 0E67300Eh, 300E4324h
		dd 0C0E0A58h, 80EC341h,	40EC641h, 0B43h, 30h, 110h
		dd offset loc_783-351Bh
		dd offset loc_50+2
		dd 80E4100h, 0E410286h,	4303830Ch, 0E57300Eh, 300E412Ch
		dd 0C0E0A57h, 80EC341h,	40EC641h, 0B42h, 30h, 144h
		dd offset loc_783-34FBh
		dd offset loc_65+1
		dd 80E4100h, 0E410286h,	4303830Ch, 0E67300Eh, 300E4324h
		dd 0C0E0A58h, 80EC341h,	40EC641h, 0B43h, 30h, 178h
		dd offset loc_783-34C7h
		dd offset loc_76
		dd 80E4100h, 0E410286h,	4303830Ch, 0E77400Eh, 400E432Ch
		dd 0C0E0A58h, 80EC341h,	40EC641h, 0B43h, 30h, 1ACh
		dd offset loc_783-3483h
		dd offset loc_65+1
		dd 80E4100h, 0E410286h,	4303830Ch, 0E67300Eh, 300E4324h
		dd 0C0E0A58h, 80EC341h,	40EC641h, 0B43h, 30h, 1E0h
		dd offset loc_783-344Fh
		dd offset loc_5D+1
		dd 80E4100h, 0E410286h,	4303830Ch, 0E5F300Eh, 300E4328h
		dd 0C0E0A58h, 80EC341h,	40EC641h, 0B43h, 30h, 214h
		dd offset loc_783-3423h
		dd offset loc_6D+1
		dd 80E4100h, 0E410286h,	4303830Ch, 0E6F300Eh, 300E4320h
		dd 0C0E0A58h, 80EC341h,	40EC641h, 0B43h, 30h, 248h
		dd offset loc_783-33E7h
		dd offset loc_6D+1
		dd 80E4100h, 0E410286h,	4303830Ch, 0E6F300Eh, 300E4320h
		dd 0C0E0A58h, 80EC341h,	40EC641h, 0B43h, 30h, 27Ch
		dd offset loc_783-33ABh
		dd offset loc_76
		dd 80E4100h, 0E410286h,	4303830Ch, 0E77400Eh, 400E432Ch
		dd 0C0E0A58h, 80EC341h,	40EC641h, 0B43h, 30h, 2B0h
		dd offset loc_783-3367h
		dd offset loc_65+1
		dd 80E4100h, 0E410286h,	4303830Ch, 0E67300Eh, 300E4324h
		dd 0C0E0A58h, 80EC341h,	40EC641h, 0B43h, 4Ch, 2E4h
		dd offset loc_783-3333h
		dd offset loc_1CC
		dd 80E4100h, 0E410285h,	4103870Ch, 486100Eh, 83140E41h
		dd 600E4305h, 5C0E7602h, 2600E41h, 415C0E9Ah, 7602600Eh
		dd 41140E0Ah, 41100EC3h, 410C0EC6h, 41080EC7h, 41040EC5h
		dd 0Bh
_eh_frame	ends

; ===========================================================================

; Segment type:	Externs
; UNDEF
		extrn ___stack_chk_guard:near
					; CODE XREF: _gg_win32_map_wsa_error_to_errno:loc_38j
					; DATA XREF: _gg_win32_map_wsa_error_to_errno+6r ...
; int __stdcall	WSAGetLastError()
		extrn _WSAGetLastError@0:near
					; CODE XREF: _gg_win32_map_wsa_error_to_errno+11p
		extrn ___stack_chk_fail:near
					; CODE XREF: _gg_win32_map_wsa_error_to_errno:loc_6Fp
					; _gg_win32_accept:loc_D5p ...
; SOCKET __stdcall accept(SOCKET s, struct sockaddr *addr, int *addrlen)
		extrn _accept@12:near	; CODE XREF: _gg_win32_accept+27p
		extrn __errno:near	; CODE XREF: _gg_win32_accept:loc_C0p
					; _gg_win32_bind:loc_128p ...
; int __stdcall	bind(SOCKET s, const struct sockaddr *name, int	namelen)
		extrn _bind@12:near	; CODE XREF: _gg_win32_bind+27p
; int __stdcall	closesocket(SOCKET s)
		extrn _closesocket@4:near ; CODE XREF: _gg_win32_close+17p
; int __stdcall	connect(SOCKET s, const	struct sockaddr	*name, int namelen)
		extrn _connect@12:near	; CODE XREF: _gg_win32_connect+27p
; struct hostent *__stdcall gethostbyname(const	char *name)
		extrn _gethostbyname@4:near ; CODE XREF: _gg_win32_gethostbyname+17p
; int __stdcall	getsockname(SOCKET s, struct sockaddr *name, int *namelen)
		extrn _getsockname@12:near ; CODE XREF:	_gg_win32_getsockname+27p
; int __stdcall	getsockopt(SOCKET s, int level,	int optname, char *optval, int *optlen)
		extrn _getsockopt@20:near ; CODE XREF: _gg_win32_getsockopt+37p
; int __stdcall	ioctlsocket(SOCKET s, __int32 cmd, u_long *argp)
		extrn _ioctlsocket@12:near ; CODE XREF:	_gg_win32_ioctl+27p
; int __stdcall	listen(SOCKET s, int backlog)
		extrn _listen@8:near	; CODE XREF: _gg_win32_listen+1Fp
; int __stdcall	recv(SOCKET s, char *buf, int len, int flags)
		extrn _recv@16:near	; CODE XREF: _gg_win32_recv+2Fp
; int __stdcall	send(SOCKET s, const char *buf,	int len, int flags)
		extrn _send@16:near	; CODE XREF: _gg_win32_send+2Fp
; int __stdcall	setsockopt(SOCKET s, int level,	int optname, const char	*optval, int optlen)
		extrn _setsockopt@20:near ; CODE XREF: _gg_win32_setsockopt+37p
; SOCKET __stdcall socket(int af, int type, int	protocol)
		extrn _socket@12:near	; CODE XREF: _gg_win32_socket+27p
; u_long __stdcall htonl(u_long	hostlong)
		extrn _htonl@4:near	; CODE XREF: _gg_win32_socketpair:loc_634p
					; _gg_win32_socketpair+113p


		end
