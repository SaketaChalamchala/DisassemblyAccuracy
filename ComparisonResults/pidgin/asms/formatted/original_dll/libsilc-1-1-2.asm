assume cs:_text

assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
public __onexit
push	ebp
mov	ebp, esp
sub	esp, 18h
mov	eax, [ebp+arg_0]
mov	dword ptr [esp+8], offset _next_atexit
mov	dword ptr [esp+4], offset __bss_start__
mov	[esp], eax
call	___dllonexit
leave
retn
align 10h
public _atexit
			
push	ebp
mov	ebp, esp
sub	esp, 18h
mov	eax, [ebp+arg_0]
mov	dword ptr [esp+8], offset _next_atexit
mov	dword ptr [esp+4], offset __bss_start__
mov	[esp], eax
call	___dllonexit
leave
cmp	eax, 1
sbb	eax, eax
retn
align 10h
			
push	ebp
mov	ebp, esp
push	ebx
sub	esp, 14h
mov	edx, ds:__bss_start__
test	edx, edx
jz	short loc_641C10A5
mov	ebx, ds:_next_atexit
sub	ebx, 4
cmp	edx, ebx
ja	short loc_641C1093
mov	eax, [ebx]
test	eax, eax
jz	short loc_641C1077
call	eax
mov	edx, ds:__bss_start__
sub	ebx, 4
cmp	edx, ebx
jbe	short loc_641C107E
mov	[esp], edx	
call	_free
mov	ds:__bss_start__, 0
mov	dword ptr [esp], 0 
call	_fflush
add	esp, 14h
pop	ebx
pop	ebp
retn
align 10h
public _DllMainCRTStartup@12
push	ebp
mov	ebp, esp
sub	esp, 38h
mov	[ebp+var_C], ebx
mov	ebx, [ebp+fdwReason]
mov	[ebp+var_8], esi
mov	esi, [ebp+hinstDLL]
mov	[ebp+var_4], edi
mov	edi, [ebp+lpReserved]
cmp	ebx, 1
jz	short loc_641C1118
mov	[esp+8], edi	
mov	[esp+4], ebx	
mov	[esp], esi	
call	_DllMain@12
sub	esp, 0Ch
test	ebx, ebx
jnz	short loc_641C1109
mov	edx, ds:__bss_start__
test	edx, edx
jz	short loc_641C1166
mov	[ebp+var_1C], eax
call	___dll_exit
mov	eax, [ebp+var_1C]
			
mov	ebx, [ebp+var_C]
mov	esi, [ebp+var_8]
mov	edi, [ebp+var_4]
mov	esp, ebp
pop	ebp
retn	0Ch
mov	dword ptr [esp], 80h 
call	_malloc
test	eax, eax
mov	ds:__bss_start__, eax
jz	short loc_641C1170
mov	dword ptr [eax], 0
mov	ds:_next_atexit, eax
call	__pei386_runtime_relocator
call	___main
mov	[esp+8], edi	
mov	dword ptr [esp+4], 1 
mov	[esp], esi	
call	_DllMain@12
sub	esp, 0Ch
test	eax, eax
jnz	short loc_641C1109
call	___dll_exit
xor	eax, eax
jmp	short loc_641C1109
xor	eax, eax
jmp	short loc_641C1109
align 10h
call	__errno
mov	dword ptr [eax], 0Ch
xor	eax, eax
jmp	short loc_641C1109
align 10h
public ___gcc_register_frame
push	ebp
mov	ebp, esp
sub	esp, 18h
mov	dword ptr [esp], offset	ModuleName 
call	_GetModuleHandleA@4
push	edx
test	eax, eax
jz	short loc_641C11FC
mov	dword ptr [esp+4], offset ProcName 
mov	[esp], eax	
call	_GetProcAddress@8
sub	esp, 8
test	eax, eax
jz	short loc_641C11BF
mov	dword ptr [esp+4], offset _obj
mov	dword ptr [esp], offset	_eh_frame
call	eax
mov	ecx, ___JCR_END__
test	ecx, ecx
jz	short locret_641C11FA
mov	dword ptr [esp], offset	aLibgcj_s_dll 
call	_GetModuleHandleA@4
push	edx
test	eax, eax
jz	short loc_641C1204
mov	dword ptr [esp+4], offset a_jv_registercl 
mov	[esp], eax	
call	_GetProcAddress@8
sub	esp, 8
test	eax, eax
jz	short locret_641C11FA
mov	dword ptr [esp], offset	___JCR_END__
call	eax
			
leave
retn
mov	eax, 0
jmp	short loc_641C11AA
align 4
mov	eax, 0
jmp	short loc_641C11ED
align 4
public ___gcc_deregister_frame
push	ebp
mov	ebp, esp
sub	esp, 18h
mov	dword ptr [esp], offset	ModuleName 
call	_GetModuleHandleA@4
push	ecx
test	eax, eax
jz	short loc_641C1248
mov	dword ptr [esp+4], offset a__deregister_f 
mov	[esp], eax	
call	_GetProcAddress@8
sub	esp, 8
test	eax, eax
jz	short locret_641C1243
mov	dword ptr [esp], offset	_eh_frame
call	eax
leave
retn
align 4
mov	eax, 0
jmp	short loc_641C1236
align 10h
push	ebp
mov	ebp, esp
push	edi
push	esi
push	ebx
sub	esp, 20h
dec	len
mov	[ebp+var_18], edx
mov	esi, string
jmp	short loc_641C1295
align 4
mov	i, eax
shr	edx, 8
mov	dx, ds:_combining_class_table_part1[edx+edx]
cmp	dx, 10FFh
jle	short loc_641C12CA
movsx	edx, dx
sub	edx, 1100h
mov	[ebp+last], edx
			
xor	swap, swap
xor	edx, edx
			
cmp	i, [ebp+var_18]
jb	short loc_641C12E4
test	swap, swap
jz	loc_641C1408
mov	eax, [string]
cmp	eax, 2FAFFh
jbe	short loc_641C1264
lea	i, [eax-0E0000h]
cmp	edx, 2FFFFh
jbe	short loc_641C12B8
mov	[ebp+last], 0
jmp	short loc_641C1284
align 4
shr	edx, 8
mov	dx, ds:_combining_class_table_part2[edx+edx]
cmp	dx, 10FFh
jg	short loc_641C1278
and	eax, 0FFh
movsx	edx, dx
shl	edx, 8
movzx	edx, ds:_cclass_data[eax+edx]
mov	[ebp+last], edx
jmp	short loc_641C1284
align 4
lea	eax, [i+1]
mov	[ebp+var_20], eax
mov	eax, [string+eax*4]
cmp	eax, 2FAFFh
ja	loc_641C13D0
mov	ebx, eax
shr	ebx, 8
mov	bx, ds:_combining_class_table_part1[ebx+ebx]
cmp	bx, 10FFh
jg	loc_641C13F4
and	eax, 0FFh
movsx	ebx, bx
shl	ebx, 8
movzx	ebx, ds:_cclass_data[eax+ebx]
mov	[ebp+next], ebx
mov	eax, [ebp+next]
test	eax, eax
jz	loc_641C13C0
mov	eax, [ebp+next]
cmp	[ebp+last], eax
jle	loc_641C13C0
mov	ebx, [ebp+var_20]
mov	[ebp+j], ebx
xor	ebx, ebx
mov	[ebp+var_24], swap
mov	[ebp+var_2C], string
jmp	short loc_641C1394
align 10h
mov	t, ecx
shr	edi, 8
mov	di, ds:_combining_class_table_part1[edi+edi]
cmp	di, 10FFh
jle	loc_641C143E
movsx	edi, di
sub	edi, 1100h
cmp	[ebp+next], edi
jge	short loc_641C13B2
mov	edi, [eax+i*4+4]
mov	[eax+i*4+4], ecx
mov	[eax+i*4], t
sub	ebx, 4
mov	[ebp+var_24], 1
dec	[ebp+j]
jz	loc_641C1454
mov	eax, [ebp+var_2C]
add	eax, ebx
mov	swap, [eax+i*4]
cmp	ecx, 2FAFFh
jbe	short loc_641C1350
lea	t, [ecx-0E0000h]
cmp	edi, 2FFFFh
jbe	short loc_641C1428
mov	ecx, [ebp+var_24]
mov	string,	[ebp+var_2C]
mov	ebx, [ebp+last]
mov	[ebp+next], ebx
xchg	ax, ax
			
mov	eax, [ebp+next]
mov	[ebp+last], eax
mov	i, [ebp+var_20]
jmp	loc_641C1288
align 10h
lea	ebx, [eax-0E0000h]
cmp	ebx, 2FFFFh
ja	short loc_641C1410
shr	ebx, 8
mov	bx, ds:_combining_class_table_part2[ebx+ebx]
cmp	bx, 10FFh
jle	loc_641C1310
movsx	ebx, bx
sub	ebx, 1100h
mov	[ebp+next], ebx
jmp	loc_641C1326
align 4
add	esp, 20h
pop	ebx
pop	string
pop	t
leave
retn
mov	[ebp+next], 0
mov	eax, [ebp+next]
mov	[ebp+last], eax
mov	i, [ebp+var_20]
jmp	loc_641C1288
align 4
shr	edi, 8
mov	di, ds:_combining_class_table_part2[edi+edi]
cmp	di, 10FFh
jg	loc_641C1368
movzx	string,	cl
movsx	edi, di
shl	edi, 8
movzx	edi, ds:_cclass_data[esi+edi]
jmp	loc_641C1371
mov	ecx, 1
mov	string,	[ebp+var_2C]
mov	eax, [ebp+last]
mov	[ebp+next], eax
mov	eax, [ebp+next]
mov	[ebp+last], eax
mov	i, [ebp+var_20]
jmp	loc_641C1288
public _stringprep_utf8_to_unichar
push	ebp
mov	ebp, esp
push	edi
push	esi
push	ebx
mov	esi, [ebp+p]
mov	al, [esi]
test	al, al
js	short loc_641C1488
and	eax, 7Fh
pop	ebx
pop	p_0
pop	edi
leave
retn
align 4
movzx	edx, al
mov	ecx, edx
and	ecx, 0E0h
cmp	ecx, 0C0h
jz	short loc_641C14F6
mov	ecx, edx
and	ecx, 0F0h
cmp	ecx, 0E0h
jz	loc_641C1547
mov	ecx, edx
and	ecx, 0F8h
cmp	ecx, 0F0h
jz	loc_641C1553
mov	ecx, edx
and	ecx, 0FCh
cmp	ecx, 0F8h
jz	loc_641C155F
and	edx, 0FEh
cmp	edx, 0FCh
jz	loc_641C156B
lea	p_0, [p_0+0]
			
mov	eax, 0FFFFFFFFh
pop	ebx
pop	p_0
pop	edi
leave
retn
mov	edi, 2
mov	edx, 1Fh
			
movsx	ecx, byte ptr [p_0+1]
mov	ebx, ecx
and	ebx, 0C0h
add	ebx, 0FFFFFF80h
jnz	short loc_641C14EC
movsx	eax, al
and	eax, edx
mov	edx, 1
jmp	short loc_641C1531
align 10h
movsx	ecx, byte ptr [p_0+edx]
mov	ebx, ecx
and	ebx, 0C0h
add	ebx, 0FFFFFF80h
jnz	short loc_641C14EC
mov	ebx, eax
shl	ebx, 6
mov	eax, ecx
and	eax, 3Fh
or	eax, ebx
inc	edx
cmp	edi, edx
jg	short loc_641C1520
pop	ebx
pop	p_0
pop	edi
leave
retn
mov	edi, 3
mov	edx, 0Fh
jmp	short loc_641C1500
mov	edi, 4
mov	edx, 7
jmp	short loc_641C1500
mov	edi, 5
mov	edx, 3
jmp	short loc_641C1500
mov	edi, 6
mov	edx, 1
jmp	short loc_641C1500
align 4
public _stringprep_unichar_to_utf8
push	ebp
mov	ebp, esp
push	edi
push	esi
push	ebx
sub	esp, 4
mov	ecx, [ebp+c]
mov	edi, [ebp+outbuf]
cmp	ecx, 7Fh
ja	short loc_641C15C8
mov	[ebp+var_10], 0
mov	eax, 1
			
test	outbuf_0, outbuf_0
jz	short loc_641C15C1
lea	ebx, [eax-1]
test	ebx, ebx
jle	short loc_641C15BC
lea	esi, [outbuf_0+eax]
xchg	ax, ax
mov	dl, cl
and	edx, 3Fh
or	edx, 0FFFFFF80h
mov	[esi-1], dl
shr	ecx, 6
dec	ebx
dec	esi
test	ebx, ebx
jg	short loc_641C15A8
or	c_0, [ebp+var_10]
mov	[outbuf_0], cl
pop	edx
pop	ebx
pop	esi
pop	outbuf_0
leave
retn
align 4
cmp	c_0, 7FFh
ja	short loc_641C15E0
mov	[ebp+var_10], 0C0h
mov	eax, 2
jmp	short loc_641C1598
align 10h
cmp	c_0, 0FFFFh
jbe	short loc_641C1600
cmp	c_0, 1FFFFFh
ja	short loc_641C160E
mov	[ebp+var_10], 0F0h
mov	eax, 4
jmp	short loc_641C1598
align 10h
mov	[ebp+var_10], 0E0h
mov	eax, 3
jmp	short loc_641C1598
cmp	c_0, 4000000h
sbb	eax, eax
and	eax, 0FFFFFFFCh
add	eax, 0FCh
mov	[ebp+var_10], eax
cmp	c_0, 4000000h
sbb	eax, eax
add	eax, 6
jmp	loc_641C1598
align 4
			
push	ebp
mov	ebp, esp
push	edi
push	esi
push	ebx
sub	esp, 3Ch
mov	[ebp+var_24], str
mov	[ebp+var_30], items_read
xor	esi, esi
xor	ebx, ebx
mov	items_read, str
jmp	short loc_641C1654
align 4
mov	eax, 1
			
add	result_length, eax
inc	i
test	len, len
js	short loc_641C165C
cmp	i, len
jge	short loc_641C16AC
mov	eax, [str+i*4]
cmp	eax, 0
jz	short loc_641C16AC
jl	loc_641C17D7
cmp	eax, 7Fh
jbe	short loc_641C164C
cmp	eax, 7FFh
ja	short loc_641C1680
mov	eax, 2
jmp	short loc_641C1651
align 10h
cmp	eax, 0FFFFh
ja	short loc_641C1690
mov	eax, 3
jmp	short loc_641C1651
align 10h
cmp	eax, 1FFFFFh
ja	short loc_641C16A0
mov	eax, 4
jmp	short loc_641C1651
align 10h
cmp	eax, 4000000h
sbb	eax, eax
add	eax, 6
jmp	short loc_641C1651
			
lea	eax, [result_length+1]
mov	[esp], eax	
call	_malloc
mov	[ebp+var_2C], eax
mov	[ebp+result], eax
test	eax, eax
jz	loc_641C1747
add	result_length, eax
mov	[ebp+var_28], result_length
cmp	result_length, eax
jbe	loc_641C17FB
mov	edi, [ebp+var_2C]
xor	i, i
nop
mov	eax, [ebp+var_24]
mov	edx, [eax+i*4]
inc	i
cmp	edx, 7Fh
ja	short loc_641C1754
mov	[ebp+var_20], 0
mov	eax, 1
			
test	p, p
jz	short loc_641C176C
lea	ecx, [eax-1]
test	ecx, ecx
jle	loc_641C17CC
lea	eax, [p+eax]
mov	[ebp+var_1C], eax
mov	ebx, eax
nop
mov	al, dl
and	eax, 3Fh
or	eax, 0FFFFFF80h
mov	[ebx-1], al
shr	edx, 6
dec	ecx
dec	ebx
test	ecx, ecx
jg	short loc_641C1708
or	edx, [ebp+var_20]
mov	[p], dl
mov	p, [ebp+var_1C]
cmp	[ebp+var_28], p
ja	short loc_641C16D8
mov	byte ptr [p], 0
mov	ebx, [ebp+items_written]
test	ebx, ebx
jz	short err_out
sub	p, [ebp+var_2C]
mov	eax, [ebp+items_written]
mov	[eax], edi
mov	ecx, [ebp+var_30]
test	ecx, ecx
jz	short loc_641C1747
mov	eax, [ebp+var_30]
mov	[eax], i
			
mov	eax, [ebp+result]
add	esp, 3Ch
pop	result_length
pop	i
pop	p
leave
retn
align 4
cmp	edx, 7FFh
ja	short loc_641C1774
mov	[ebp+var_20], 0C0h
mov	eax, 2
test	p, p
jnz	short loc_641C16F4
mov	[ebp+var_1C], eax
jmp	short loc_641C1721
align 4
cmp	edx, 0FFFFh
ja	short loc_641C1790
mov	[ebp+var_20], 0E0h
mov	eax, 3
jmp	loc_641C16F0
align 10h
cmp	edx, 1FFFFFh
ja	short loc_641C17A9
mov	[ebp+var_20], 0F0h
mov	eax, 4
jmp	loc_641C16F0
cmp	edx, 4000000h
sbb	eax, eax
and	eax, 0FFFFFFFCh
add	eax, 0FCh
mov	[ebp+var_20], eax
cmp	edx, 4000000h
sbb	eax, eax
add	eax, 6
jmp	loc_641C16F0
lea	eax, [p+eax]
mov	[ebp+var_1C], eax
jmp	loc_641C171C
mov	edi, [ebp+var_30]
test	edi, edi
jz	short loc_641C17EF
mov	eax, [ebp+var_30]
mov	[eax], i
mov	[ebp+result], 0
jmp	loc_641C1742
mov	[ebp+result], 0
jmp	loc_641C1747
mov	edi, eax
xor	i, i
jmp	loc_641C1729
public _stringprep_ucs4_to_utf8
push	ebp
mov	ebp, esp
sub	esp, 8
mov	eax, [ebp+str]
mov	edx, [ebp+len]
mov	[ebp+len], 0
mov	ecx, [ebp+items_written]
mov	[ebp+str], ecx
mov	ecx, [ebp+items_read]
leave
jmp	_g_ucs4_to_utf8
align 4
public _stringprep_utf8_to_ucs4
push	ebp
mov	ebp, esp
push	edi
push	esi
push	ebx
sub	esp, 2Ch
mov	ebx, [ebp+str]
mov	ecx, [ebp+len]
test	ecx, ecx
js	loc_641C1961
lea	len_0, [str_0+len_0]
cmp	str_0, ecx
jnb	loc_641C198B
cmp	byte ptr [str_0], 0
jz	loc_641C198B
mov	eax, str_0
mov	[ebp+var_1C], 0
xor	edx, edx
jmp	short loc_641C1865
cmp	byte ptr [str_0], 0
jz	short loc_641C1876
movzx	esi, byte ptr [str_0]
movsx	esi, ds:_utf8_skip_data[esi]
add	str_0, esi
inc	edx
cmp	str_0, ecx
jb	short loc_641C1860
			
mov	[ebp+var_1C], edx
lea	str_0, ds:4[edx*4]
mov	[esp], eax
call	_malloc
mov	[ebp+var_20], eax
test	eax, eax
jz	short loc_641C190A
mov	edx, [ebp+var_1C]
test	edx, edx
jz	loc_641C199C
xor	edi, edi
jmp	short loc_641C18AD
align 10h
mov	edx, [ebp+var_20]
mov	[edx+edi*4], eax
inc	str_0
inc	edi
cmp	edi, [ebp+var_1C]
jz	short loc_641C18EB
			
movzx	eax, byte ptr [str_0]
cmp	eax, 7Fh
jbe	short loc_641C18A0
cmp	eax, 0DFh
ja	short loc_641C1918
and	eax, 1Fh
mov	esi, 2
			
mov	edx, 1
lea	esi, [esi+0]
shl	eax, 6
movzx	ecx, byte ptr [str_0+edx]
and	ecx, 3Fh
or	eax, ecx
inc	edx
cmp	edx, esi
jl	short loc_641C18CC
mov	edx, [ebp+var_20]
mov	[edx+edi*4], eax
add	str_0, esi
inc	edi
cmp	edi, [ebp+var_1C]
jnz	short loc_641C18AD
mov	eax, [ebp+var_1C]
shl	eax, 2
mov	edx, [ebp+var_20]
mov	dword ptr [edx+eax], 0
mov	eax, [ebp+items_written]
test	eax, eax
jz	short loc_641C190A
mov	edx, [ebp+var_1C]
mov	eax, [ebp+items_written]
mov	[eax], edx
			
mov	eax, [ebp+var_20]
add	esp, 2Ch
pop	str_0
pop	esi
pop	edi
leave
retn
align 4
cmp	eax, 0EFh
ja	short loc_641C192C
and	eax, 0Fh
mov	esi, 3
jmp	short loc_641C18C4
align 4
cmp	eax, 0F7h
ja	short loc_641C1940
and	eax, 7
mov	esi, 4
jmp	short loc_641C18C4
align 10h
cmp	eax, 0FBh
ja	short loc_641C1954
and	eax, 3
mov	esi, 5
jmp	loc_641C18C4
and	eax, 1
mov	esi, 6
jmp	loc_641C18C4
cmp	byte ptr [str_0], 0
jz	short loc_641C198B
mov	eax, str_0
mov	[ebp+var_1C], 0
xor	edx, edx
lea	esi, [esi+0]
movzx	len_0, byte ptr	[str_0]
movsx	ecx, ds:_utf8_skip_data[ecx]
add	str_0, ecx
inc	edx
cmp	byte ptr [str_0], 0
jnz	short loc_641C1974
jmp	loc_641C1876
			
mov	eax, 4
mov	[ebp+var_1C], 0
jmp	loc_641C1880
xor	eax, eax
jmp	loc_641C18F1
align 4
			
push	ebp
mov	ebp, esp
push	edi
push	esi
push	ebx
sub	esp, 3Ch
mov	[ebp+var_24], str
mov	[ebp+var_28], max_len
mov	ecx, str
mov	[ebp+var_1C], 0
add	str, max_len
mov	[ebp+var_20], str
jmp	short loc_641C19E0
align 4
cmp	wc, 9Fh
ja	loc_641C1E58
inc	[ebp+var_1C]
nop
movzx	result_len, byte ptr [str]
movsx	eax, ds:_utf8_skip_data[eax]
add	str, eax
mov	wc, [ebp+var_28]
test	edx, edx
js	short loc_641C19F0
cmp	str, [ebp+var_20]
jnb	loc_641C1AB0
mov	dl, [str]
cmp	dl, 0
jz	loc_641C1AB0
jl	short loc_641C1A24
and	edx, 7Fh
lea	eax, [wc-0AC00h]
cmp	eax, 2BAFh
ja	short loc_641C19C4
cmp	eax, 2BA3h
jbe	loc_641C1A98
mov	eax, 1
add	[ebp+var_1C], result_len
jmp	short loc_641C19D4
align 4
movzx	eax, dl
mov	ebx, eax
and	ebx, 0E0h
cmp	ebx, 0C0h
jz	loc_641C1D48
mov	ebx, eax
and	ebx, 0F0h
cmp	ebx, 0E0h
jz	loc_641C1DF7
mov	ebx, eax
and	ebx, 0F8h
cmp	ebx, 0F0h
jz	loc_641C1E12
mov	ebx, eax
and	ebx, 0FCh
cmp	ebx, 0F8h
jz	loc_641C1E3A
and	eax, 0FEh
cmp	eax, 0FCh
jnz	loc_641C19D0
mov	edi, 6
mov	eax, 1
jmp	loc_641C1D52
align 4
mov	wc, 1Ch
mov	ebx, edx
cdq
idiv	ebx
cmp	edx, 1
sbb	eax, eax
add	result_len, 3
jmp	loc_641C1A1D
align 10h
mov	esi, [ebp+var_1C]
lea	eax, ds:4[esi*4]
mov	[esp], eax	
call	_malloc
mov	[ebp+var_2C], eax
test	eax, eax
jz	loc_641C1D3C
mov	ebx, [ebp+var_24]
mov	[ebp+var_30], 0
mov	[ebp+var_24], 0
mov	edi, [ebp+var_28]
add	edi, str
mov	[ebp+var_38], edi
xchg	ax, ax
mov	edi, [ebp+var_28]
test	edi, edi
js	short loc_641C1AF8
cmp	str, [ebp+var_38]
jnb	loc_641C1D1C
mov	al, [str]
cmp	al, 0
jz	loc_641C1D1C
jl	loc_641C1BCC
and	eax, 7Fh
lea	ecx, [wc-0AC00h]
cmp	ecx, 2BAFh
jbe	loc_641C1BA0
cmp	wc, 9Fh
ja	loc_641C2295
mov	ecx, wc
mov	esi, [ebp+var_24]
mov	edi, [ebp+var_2C]
mov	[edi+esi*4], wc
inc	esi
mov	[ebp+var_1C], esi
nop
mov	result_len, [ebp+var_1C]
test	eax, eax
jz	short loc_641C1B7C
mov	pd, [ebp+var_24]
mov	wc, [ebp+var_2C]
mov	eax, [ecx+edx*4]
cmp	eax, 2FAFFh
ja	loc_641C1C40
mov	edx, eax
shr	edx, 8
mov	dx, ds:_combining_class_table_part1[edx+edx]
cmp	dx, 10FFh
jle	loc_641C1C64
movsx	edx, dx
sub	edx, 1100h
test	cc, cc
jz	loc_641C1C80
mov	eax, [ebp+var_30]
mov	[ebp+var_24], eax
movzx	eax, byte ptr [str]
movsx	eax, ds:_utf8_skip_data[eax]
add	str, eax
mov	pd, [ebp+var_24]
mov	[ebp+var_30], edx
mov	wc, [ebp+var_1C]
mov	[ebp+var_24], ecx
jmp	loc_641C1AE8
align 10h
mov	edx, [ebp+var_24]
mov	edi, [ebp+var_2C]
lea	esi, [edi+edx*4]
cmp	ecx, 2BA3h
jbe	loc_641C1C9C
test	esi, esi
jz	short loc_641C1BBB
mov	[esi], wc
mov	wc, 1
add	result_len, [ebp+var_24]
mov	[ebp+var_1C], result_len
jmp	loc_641C1B38
align 4
movzx	edx, al
mov	ecx, edx
and	ecx, 0E0h
cmp	ecx, 0C0h
jz	loc_641C1DA0
mov	ecx, edx
and	ecx, 0F0h
cmp	ecx, 0E0h
jz	loc_641C1E06
mov	ecx, edx
and	ecx, 0F8h
cmp	ecx, 0F0h
jz	loc_641C1E2B
mov	ecx, edx
and	ecx, 0FCh
cmp	ecx, 0F8h
jz	loc_641C1E49
and	edx, 0FEh
cmp	edx, 0FCh
jz	loc_641C2198
lea	esi, [esi+0]
mov	ecx, 0FFFFFFFFh
jmp	loc_641C1B2A
align 10h
lea	edx, [eax-0E0000h]
cmp	edx, 2FFFFh
ja	short loc_641C1C80
shr	edx, 8
mov	dx, ds:_combining_class_table_part2[edx+edx]
cmp	dx, 10FFh
jg	loc_641C1B6B
and	eax, 0FFh
movsx	edx, dx
shl	edx, 8
movzx	edx, ds:_cclass_data[eax+edx]
test	cc, cc
jnz	loc_641C1B7C
nop
mov	cc, [ebp+var_1C]
sub	edx, [ebp+var_30] 
mov	esi, [ebp+var_30]
mov	edi, [ebp+var_2C]
lea	eax, [edi+esi*4] 
call	_g_unicode_canonical_ordering
jmp	loc_641C1B82
align 4
mov	edx, 1Ch
mov	wc, ecx
mov	edi, edx
cdq
idiv	edi
add	edx, 11A7h
mov	[ebp+var_20], edx
test	esi, esi
jz	short loc_641C1CF8
mov	eax, 6F74AE27h
imul	ecx
mov	edi, edx
sar	edi, 8
mov	eax, ecx
cdq
sub	edi, edx
mov	edx, edi
add	edx, 1100h
mov	[esi], edx
lea	edx, [edi+edi*8]
lea	edx, [edi+edx*8]
lea	eax, [edi+edx*2]
shl	eax, 2
sub	ecx, eax
mov	eax, 92492493h
imul	ecx
lea	eax, [ecx+edx]
sar	eax, 4
sar	ecx, 1Fh
sub	eax, ecx
add	eax, 1161h
mov	[esi+4], eax
cmp	[ebp+var_20], 11A7h
jz	loc_641C1E21
test	esi, esi
jz	short loc_641C1D0F
mov	edx, [ebp+var_20]
mov	[esi+8], edx
mov	eax, 3
jmp	loc_641C1BC0
align 4
mov	esi, [ebp+var_24]
test	esi, esi
jnz	loc_641C1EE8
mov	eax, [ebp+var_2C]
mov	dword ptr [eax], 0
xor	eax, eax
mov	n_wc, [ebp+var_2C]
mov	dword ptr [esi+eax], 0
mov	eax, [ebp+var_2C]
add	esp, 3Ch
pop	str
pop	esi
pop	edi
leave
retn
align 4
mov	edi, 2
mov	eax, 1Fh
movsx	ebx, byte ptr [str+1]
mov	esi, ebx
and	esi, 0C0h
add	esi, 0FFFFFF80h
jnz	loc_641C19D0
movsx	edx, dl
and	wc, eax
mov	eax, 1
jmp	short loc_641C1D89
align 4
movsx	ebx, byte ptr [str+eax]
mov	esi, ebx
and	esi, 0C0h
add	esi, 0FFFFFF80h
jnz	loc_641C19D0
mov	esi, wc
shl	esi, 6
mov	wc, ebx
and	wc, 3Fh
or	wc, esi
inc	eax
cmp	eax, edi
jl	short loc_641C1D74
jmp	loc_641C1A00
align 10h
mov	edi, 2
mov	edx, 1Fh
movsx	ecx, byte ptr [str+1]
mov	esi, ecx
and	esi, 0C0h
add	esi, 0FFFFFF80h
jnz	loc_641C1C34
movsx	eax, al
and	wc, edx
mov	edx, 1
jmp	short loc_641C1DE1
align 4
movsx	ecx, byte ptr [str+edx]
mov	esi, ecx
and	esi, 0C0h
add	esi, 0FFFFFF80h
jnz	loc_641C1C34
mov	esi, wc
shl	esi, 6
mov	wc, ecx
and	wc, 3Fh
or	wc, esi
inc	edx
cmp	edi, edx
jg	short loc_641C1DCC
jmp	loc_641C1B0B
mov	edi, 3
mov	eax, 0Fh
jmp	loc_641C1D52
mov	edi, 3
mov	edx, 0Fh
jmp	short loc_641C1DAA
mov	edi, 4
mov	eax, 7
jmp	loc_641C1D52
mov	eax, 2
jmp	loc_641C1BC0
mov	edi, 4
mov	edx, 7
jmp	loc_641C1DAA
mov	edi, 5
mov	eax, 3
jmp	loc_641C1D52
mov	edi, 5
mov	edx, 3
jmp	loc_641C1DAA
cmp	wc, 2FA1Dh
ja	loc_641C19D0
mov	esi, 1417h
xor	ebx, ebx
nop
lea	eax, [ebx+esi]
mov	edi, eax
shr	edi, 1Fh
lea	eax, [edi+eax]
sar	eax, 1
mov	edi, dword ptr ds:_decomp_table._ch[eax*8]
cmp	edi, wc
jz	short loc_641C1E98
cmp	ebx, eax
jz	loc_641C19D0
cmp	edi, wc
jnb	short loc_641C1E94
mov	ebx, eax
jmp	short loc_641C1E6C
mov	esi, eax
jmp	short loc_641C1E6C
movzx	wc, ds:_decomp_table.compat_offset[eax*8]
cmp	edx, 0FFFFh
jz	loc_641C2219
mov	eax, edx
add	decomp,	offset _decomp_expansion_string
jz	loc_641C19D0
cmp	ds:_decomp_expansion_string[edx], 0
jz	short loc_641C1EDE
xor	edx, edx
movzx	ebx, byte ptr [decomp]
movsx	ebx, ds:_utf8_skip_data[ebx]
add	decomp,	ebx
inc	edx
cmp	byte ptr [decomp], 0
jnz	short loc_641C1EC4
add	[ebp+var_1C], edx
jmp	loc_641C19D4
xor	edx, edx
add	[ebp+var_1C], edx
jmp	loc_641C19D4
mov	edx, [ebp+var_24]
sub	edx, [ebp+var_30] 
mov	str, [ebp+var_30]
mov	esi, [ebp+var_2C]
lea	eax, [esi+ebx*4] 
call	_g_unicode_canonical_ordering
mov	edi, [ebp+var_24]
mov	dword ptr [esi+edi*4], 0
xor	edi, edi
xor	edx, edx
xor	ecx, ecx
mov	ebx, [ebp+var_2C]
lea	ebx, [ebx+i*4]
mov	[ebp+var_1C], ebx
mov	ebx, [ebx]
cmp	ebx, 2FAFFh
ja	loc_641C2148
mov	eax, ebx
shr	eax, 8
mov	ax, ds:_combining_class_table_part1[eax+eax]
cmp	ax, 10FFh
jle	loc_641C2181
cwde
sub	eax, 1100h
mov	[ebp+var_38], eax
test	i, i
jz	loc_641C2124
test	last_cc, last_cc
jz	short loc_641C1F58
cmp	last_cc, [ebp+var_38]
jz	loc_641C2164
mov	eax, [ebp+var_2C]
lea	eax, [eax+edi*4]
mov	[ebp+var_28], eax
mov	last_cc, [eax]
mov	[ebp+var_20], edx
mov	eax, edx
sub	eax, 1100h
cmp	eax, 12h
ja	loc_641C203A
mov	n_wc, ebx
sub	esi, 1161h
js	loc_641C203A
cmp	esi, 14h
jg	loc_641C203A
lea	edx, [eax+eax*4]
lea	eax, [eax+edx*4]
add	eax, esi
lea	edx, ds:0[eax*4]
lea	eax, ds:0[edx*8]
sub	eax, edx
add	eax, 0AC00h
mov	ebx, [ebp+var_28]
mov	[ebx], eax
lea	eax, [ecx+1]
cmp	[ebp+var_24], j
jbe	short loc_641C1FDA
mov	esi, [ebp+var_2C]
lea	ebx, [esi+j*4]
mov	edx, [ebp+var_1C]
mov	[ebp+var_1C], i
mov	esi, [ebp+var_24]
xchg	ax, ax
mov	i, [ebx]
mov	[edx], ecx
inc	j
add	ebx, 4
add	edx, 4
cmp	n_wc, j
ja	short loc_641C1FC8
mov	ecx, [ebp+var_1C]
dec	[ebp+var_24]
lea	j, [i-1]
cmp	edi, i
jz	loc_641C2226
mov	ebx, [ebp+var_2C]
mov	edx, [ebx+ecx*4-8]
cmp	edx, 2FAFFh
ja	loc_641C21FB
mov	i, edx
shr	ecx, 8
mov	cx, ds:_combining_class_table_part1[ecx+ecx]
cmp	cx, 10FFh
jle	loc_641C224A
movsx	ecx, cx
sub	ecx, 1100h
mov	[ebp+var_38], ecx
mov	ecx, edi
mov	edi, i
lea	i, [edi+1]
cmp	i, [ebp+var_24]
jb	loc_641C2139
mov	i, [ebp+var_24]
shl	eax, 2
jmp	loc_641C1D32
mov	n_wc, [ebp+var_20]
sub	esi, 0AC00h
mov	[ebp+var_30], esi
cmp	esi, 2BA3h
ja	short loc_641C2077
mov	eax, esi
mov	esi, 1Ch
cdq
idiv	esi
test	edx, edx
jnz	short loc_641C2077
mov	eax, ebx
sub	eax, 11A7h
js	short loc_641C2077
cmp	eax, 1Ch
jg	short loc_641C2077
add	eax, [ebp+var_20]
mov	edx, [ebp+var_28]
mov	[edx], eax
jmp	loc_641C1FAF
mov	eax, [ebp+var_20]
shr	eax, 8
cmp	eax, 30h
ja	short loc_641C20D9
mov	ax, ds:_compose_table[eax+eax]
cmp	ax, 10FFh
jg	loc_641C21F0
movzx	edx, byte ptr [ebp+var_20]
cwde
shl	eax, 8
add	eax, edx
mov	dx, ds:_compose_data[eax+eax]
lea	eax, [edx-93h]
cmp	ax, 0D1h
ja	short loc_641C20DB
movzx	edx, dx
sub	edx, 93h
movzx	eax, ds:_compose_first_single[edx*4]
cmp	ebx, eax
jnz	short loc_641C2124
movzx	eax, ds:(_compose_first_single+2)[edx*4]
mov	ebx, [ebp+var_28]
mov	[ebx], eax
jmp	loc_641C1FAF
xor	edx, edx
mov	eax, ebx
shr	eax, 8
cmp	eax, 30h
ja	loc_641C21A7
mov	ax, ds:_compose_table[eax+eax]
cmp	ax, 10FFh
jle	loc_641C226A
sub	eax, 1100h
cmp	ax, 183h
jbe	loc_641C21A9
movzx	eax, ax
lea	edx, [eax-184h]
movzx	eax, ds:_compose_second_single[edx*4]
cmp	[ebp+var_20], eax
jz	loc_641C2283
mov	ebx, [ebp+var_38]
test	ebx, ebx
jnz	short loc_641C2164
mov	edi, i
lea	eax, [i+1]
cmp	i, [ebp+var_24]
jnb	loc_641C202F
mov	edi, ecx
mov	last_cc, [ebp+var_38]
mov	ecx, i
jmp	loc_641C1F0C
align 4
lea	eax, [ebx-0E0000h]
cmp	eax, 2FFFFh
jbe	short loc_641C216C
mov	[ebp+var_38], 0
jmp	loc_641C1F43
align 4
mov	eax, i
mov	i, edi
mov	edi, eax
jmp	short loc_641C212D
shr	eax, 8
mov	ax, ds:_combining_class_table_part2[eax+eax]
cmp	ax, 10FFh
jg	loc_641C1F3A
movzx	n_wc, bl
cwde
shl	eax, 8
movzx	eax, ds:_cclass_data[esi+eax]
mov	[ebp+var_38], eax
jmp	loc_641C1F43
mov	edi, 6
mov	edx, 1
jmp	loc_641C1DAA
xor	eax, eax
lea	ebx, [edx-1]
cmp	bx, 91h
ja	loc_641C2124
cmp	ax, 164h
jbe	loc_641C2124
movzx	ebx, ax
movzx	edx, dx
dec	edx
mov	eax, edx
shl	eax, 5
sub	eax, edx
lea	eax, [ebx+eax-165h]
movzx	eax, ds:_compose_array[eax+eax]
test	eax, eax
jz	loc_641C2124
mov	edx, [ebp+var_28]
mov	[edx], eax
jmp	loc_641C1FAF
lea	edx, [eax-1100h]
jmp	loc_641C20A6
lea	i, [edx-0E0000h]
cmp	ecx, 2FFFFh
jbe	short loc_641C2234
mov	ecx, edi
mov	edi, i
mov	[ebp+var_38], 0
jmp	loc_641C212D
movzx	edx, ds:_decomp_table.canon_offset[eax*8]
jmp	loc_641C1EAC
mov	ecx, edi
mov	[ebp+var_38], 0
jmp	loc_641C212D
shr	ecx, 8
mov	cx, ds:_combining_class_table_part2[ecx+ecx]
cmp	cx, 10FFh
jg	loc_641C2013
and	edx, 0FFh
movsx	ecx, cx
shl	ecx, 8
movzx	ecx, ds:_cclass_data[edx+ecx]
mov	[ebp+var_38], ecx
mov	ecx, edi
mov	edi, i
jmp	loc_641C212D
and	ebx, 0FFh
cwde
shl	eax, 8
add	eax, ebx
mov	ax, ds:_compose_data[eax+eax]
jmp	loc_641C2100
movzx	eax, ds:(_compose_second_single+2)[edx*4]
mov	esi, [ebp+var_28]
mov	[esi], eax
jmp	loc_641C1FAF
cmp	wc, 2FA1Dh
ja	loc_641C1B28
mov	edi, 1417h
xor	esi, esi
nop
lea	edx, [esi+edi]
mov	ecx, edx
shr	ecx, 1Fh
lea	edx, [ecx+edx]
sar	edx, 1
mov	ecx, dword ptr ds:_decomp_table._ch[edx*8]
cmp	wc, eax
jz	short loc_641C22D4
cmp	esi, edx
jz	loc_641C1B28
cmp	ecx, wc
jnb	short loc_641C22D0
mov	esi, edx
jmp	short loc_641C22A8
mov	edi, edx
jmp	short loc_641C22A8
movzx	wc, ds:_decomp_table.compat_offset[edx*8]
cmp	eax, 0FFFFh
jz	loc_641C2444
mov	edx, eax
add	pd, offset _decomp_expansion_string
jz	loc_641C1B2A
mov	al, ds:_decomp_expansion_string[eax]
test	al, al
jz	loc_641C2439
mov	edi, [ebp+var_24]
mov	wc, [ebp+var_2C]
lea	esi, [ecx+edi*4]
mov	[ebp+var_1C], edi
mov	[ebp+var_34], str
jmp	short loc_641C2331
and	eax, 7Fh
mov	[esi], eax
inc	[ebp+var_1C]
movzx	eax, byte ptr [pd]
movsx	eax, ds:_utf8_skip_data[eax]
add	pd, eax
mov	al, [pd]
add	esi, 4
test	al, al
jz	short loc_641C23A0
test	al, al
jns	short loc_641C2314
movzx	ecx, al
mov	str, ecx
and	ebx, 0E0h
cmp	ebx, 0C0h
jz	short loc_641C23A8
mov	ebx, ecx
and	ebx, 0F0h
cmp	ebx, 0E0h
jz	loc_641C23F8
mov	ebx, ecx
and	ebx, 0F8h
cmp	ebx, 0F0h
jz	loc_641C2408
mov	ebx, ecx
and	ebx, 0FCh
cmp	ebx, 0F8h
jz	loc_641C2418
and	ecx, 0FEh
cmp	ecx, 0FCh
jz	loc_641C2428
mov	eax, 0FFFFFFFFh
jmp	loc_641C2317
mov	str, [ebp+var_34]
jmp	loc_641C1B38
mov	[ebp+var_20], 2
mov	ecx, 1Fh
movsx	ebx, byte ptr [pd+1]
mov	edi, ebx
and	edi, 0C0h
add	edi, 0FFFFFF80h
jnz	short loc_641C2396
movsx	eax, al
and	eax, ecx
mov	ecx, 1
mov	edi, eax
shl	edi, 6
mov	eax, ebx
and	eax, 3Fh
or	eax, edi
inc	ecx
cmp	ecx, [ebp+var_20]
jge	loc_641C2317
movsx	ebx, byte ptr [pd+ecx]
mov	edi, ebx
and	edi, 0C0h
add	edi, 0FFFFFF80h
jnz	short loc_641C2396
jmp	short loc_641C23CF
mov	[ebp+var_20], 3
mov	ecx, 0Fh
jmp	short loc_641C23B4
align 4
mov	[ebp+var_20], 4
mov	ecx, 7
jmp	short loc_641C23B4
align 4
mov	[ebp+var_20], 5
mov	ecx, 3
jmp	short loc_641C23B4
align 4
mov	[ebp+var_20], 6
mov	ecx, 1
jmp	loc_641C23B4
mov	wc, [ebp+var_24]
mov	[ebp+var_1C], ecx
jmp	loc_641C1B38
movzx	eax, ds:_decomp_table.canon_offset[edx*8]
jmp	loc_641C22E7
align 4
public _stringprep_ucs4_nfkc_normalize
push	ebp
mov	ebp, esp
push	ebx
sub	esp, 24h
mov	dword ptr [esp+4], 0 
mov	dword ptr [esp], 0 
xor	ecx, ecx	
mov	edx, [ebp+len]	
mov	result_wc, [ebp+str] 
call	_g_ucs4_to_utf8
mov	ebx, result_wc
mov	edx, 0FFFFFFFFh
call	_T_156
mov	[esp], p	
mov	[ebp+var_C], result_wc
call	_free
mov	result_wc, [ebp+var_C]
add	esp, 24h
pop	p
leave
retn
align 4
public _stringprep_utf8_nfkc_normalize
push	ebp
mov	ebp, esp
push	ebx
sub	esp, 24h
mov	edx, [ebp+len]
mov	eax, [ebp+str]
call	_T_156
mov	ebx, eax
mov	dword ptr [esp+4], 0 
mov	dword ptr [esp], 0 
xor	ecx, ecx	
mov	edx, 0FFFFFFFFh	
call	_g_ucs4_to_utf8
mov	[esp], ebx	
mov	[ebp+var_C], eax
call	_free
mov	eax, [ebp+var_C]
add	esp, 24h
pop	ebx
leave
retn
align 4
public _regerror
push	ebp
mov	ebp, esp
mov	eax, 0FFFFFFFFh
leave
retn
align 4
public _regfree
			
push	ebp
mov	ebp, esp
sub	esp, 8
mov	eax, [ebp+preg]
mov	eax, [eax]
mov	[ebp+preg], eax
leave
jmp	_free
			
push	ebp
mov	ebp, esp
push	edi
mov	eax, ds:_syntax_table_inited_37674
test	eax, eax
jz	loc_641C26A5
mov	ds:_re_compile_initialized, 1
xor	a, a
lea	esi, [esi+0]
mov	ds:_regexp_plain_ops[a], 1
mov	ds:_regexp_quoted_ops[a], 1
inc	a
cmp	a, 100h
jnz	short loc_641C251C
mov	ax, 30h
xchg	ax, ax
mov	ds:_regexp_quoted_ops[eax], 0Ch
inc	a
cmp	a, 3Ah
jnz	short loc_641C2538
mov	ds:_regexp_plain_ops+5Ch, 3
mov	edx, ds:_regexp_syntax
test	dl, 1
jz	loc_641C267B
mov	ds:_regexp_plain_ops+28h, 0Ah
mov	ds:_regexp_plain_ops+29h, 0Bh
test	dl, 2
jz	loc_641C266F
mov	ds:_regexp_plain_ops+7Ch, 9
mov	ds:_regexp_plain_ops+2Ah, 7
test	dl, 4
jz	loc_641C265C
mov	ds:_regexp_quoted_ops+2Bh, 8
mov	ds:_regexp_quoted_ops+3Fh, 6
test	dl, 10h
jz	short loc_641C25A3
mov	ds:_regexp_plain_ops+0Ah, 9
mov	ds:_regexp_plain_ops+5Bh, 0Eh
mov	ds:_regexp_plain_ops+5Eh, 4
mov	ds:_regexp_plain_ops+24h, 5
mov	ds:_regexp_plain_ops+2Eh, 2
test	dl, dl
js	short loc_641C25FB
mov	ds:_regexp_quoted_ops+77h, 11h
mov	ds:_regexp_quoted_ops+57h, 12h
mov	ds:_regexp_quoted_ops+3Ch, 13h
mov	ds:_regexp_quoted_ops+3Eh, 14h
mov	ds:_regexp_quoted_ops+62h, 15h
mov	ds:_regexp_quoted_ops+42h, 16h
mov	ds:_regexp_quoted_ops+60h, 0Fh
mov	ds:_regexp_quoted_ops+27h, 10h
mov	ecx, edx
and	ecx, 40h
jz	short loc_641C2609
mov	ds:_regexp_quoted_ops+76h, 0Dh
xor	a, a
nop
mov	ds:_regexp_precedences[a], 4
inc	a
cmp	a, 17h
jnz	short loc_641C260C
test	dl, 8
jnz	short loc_641C268E
mov	ds:_regexp_precedences+9, 2
mov	ds:_regexp_precedences+4, 3
mov	ds:_regexp_precedences+5, 3
mov	ds:_regexp_precedences+0Bh, 1
mov	ds:_regexp_precedences,	0
shr	edx, 5
and	edx, 1
mov	ds:_regexp_context_indep_ops, edx
xor	a, a
test	ecx, ecx
setnz	al
mov	ds:_regexp_ansi_sequences, eax
pop	edi
leave
retn
mov	ds:_regexp_plain_ops+2Bh, 8
mov	ds:_regexp_plain_ops+3Fh, 6
jmp	loc_641C2597
mov	ds:_regexp_quoted_ops+7Ch, 9
jmp	loc_641C2579
mov	ds:_regexp_quoted_ops+28h, 0Ah
mov	ds:_regexp_quoted_ops+29h, 0Bh
jmp	loc_641C2569
mov	ds:_regexp_precedences+9, 3
mov	ds:_regexp_precedences+4, 2
mov	ds:_regexp_precedences+5, 2
jmp	short loc_641C2633
mov	ds:_syntax_table_inited_37674, 1
mov	edx, offset _re_syntax_table
mov	ecx, 100h
xor	eax, eax
mov	edi, edx
rep stosb
mov	eax, 61h
mov	ds:_re_syntax_table[a],	1
inc	a
cmp	a, 7Bh
jnz	short loc_641C26C4
mov	al, 41h
nop
mov	ds:_re_syntax_table[eax], 1
inc	a
cmp	a, 5Bh
jnz	short loc_641C26D4
mov	al, 30h
nop
mov	ds:_re_syntax_table[eax], 1
inc	a
cmp	a, 3Ah
jnz	short loc_641C26E4
jmp	loc_641C250D
align 4
public _re_set_syntax
push	ebp
mov	ebp, esp
push	ebx
mov	ebx, ds:_regexp_syntax
mov	eax, [ebp+syntax]
mov	ds:_regexp_syntax, eax
call	_re_compile_initialize
mov	eax, ret
pop	ret
leave
retn
			
push	ebp
mov	ebp, esp
push	edi
push	esi
push	ebx
sub	esp, 2Ch
mov	edi, code
mov	esi, pos
mov	[ebp+var_1C], visited
mov	ebx, [ebp+fastmap]
mov	code, visited
add	eax, pos
cmp	byte ptr [eax],	0
jnz	short loc_641C2758
mov	byte ptr [eax],	1
			
lea	eax, [code+pos]
inc	pos
cmp	byte ptr [eax],	15h 
jbe	short loc_641C2760
call	_abort		
			
xor	eax, eax
nop
mov	byte ptr [fastmap_0+a],	1
inc	a
cmp	a, 100h
jnz	short loc_641C2744
			
mov	a, [ebp+can_be_null] 
mov	byte ptr [eax],	1
xchg	ax, ax
			
add	esp, 2Ch
pop	fastmap_0
pop	pos
pop	code
leave
retn
movzx	a, byte	ptr [eax]
jmp	ds:off_64250A80[edx*4] 
			
mov	cl, [code+pos]	
xor	eax, eax
nop
movzx	edx, al
cmp	cl, ds:_re_syntax_table[a]
jz	short loc_641C277F
mov	byte ptr [fastmap_0+eax], 1
inc	eax
cmp	a, 100h
jnz	short loc_641C2770
jmp	short loc_641C2758
			
mov	byte ptr [fastmap_0+0Ah], 1
mov	eax, [ebp+can_be_null]
cmp	byte ptr [eax],	0
jnz	short loc_641C2758
mov	byte ptr [eax],	2
jmp	short loc_641C2758
			
inc	eax		
jmp	short loc_641C2736
			
mov	cl, [code+pos]	
xor	eax, eax
jmp	short loc_641C27AC
			
inc	eax
cmp	a, 100h
jz	short loc_641C2758
movzx	edx, al
cmp	cl, ds:_re_syntax_table[a]
jnz	short loc_641C27A4
mov	byte ptr [fastmap_0+eax], 1
jmp	short loc_641C27A4
			
movzx	edx, byte ptr [code+pos]
lea	eax, [pos+1]
add	esi, 2
movzx	eax, byte ptr [code+eax]
shl	eax, 8
or	eax, a
cwde
lea	a, [eax+pos]	
mov	[esp+4], fastmap_0 
mov	eax, [ebp+can_be_null]
mov	[esp], eax	
mov	visited, [ebp+var_1C] 
mov	eax, code	
call	_re_compile_fastmap_aux
jmp	loc_641C2733
			
movzx	edx, byte ptr [code+pos]
movzx	eax, byte ptr [code+pos+1]
shl	eax, 8
or	eax, a
cwde
lea	pos, [eax+pos+2]
mov	eax, [ebp+var_1C]
add	eax, pos
cmp	byte ptr [eax],	0
jz	loc_641C2730
jmp	loc_641C2758
align 4
			
inc	pos		
jmp	loc_641C2733
			
mov	eax, 1		
nop
cmp	eax, 0Bh
jz	short loc_641C2835
mov	byte ptr [fastmap_0+eax-1], 1
cmp	eax, 0FFh
jg	loc_641C2758
inc	eax
jmp	short loc_641C2820
			
movzx	eax, byte ptr [code+pos] 
mov	byte ptr [fastmap_0+eax], 1
jmp	loc_641C2758
			
lea	pos, [code+pos]	
xor	code, code
xchg	ax, ax
mov	al, [esi]
test	al, al
jz	short loc_641C2871
lea	edx, [fastmap_0+a*8]
xor	b, b
jmp	short loc_641C285E
align 4
mov	al, [esi]
movsx	eax, al
sar	eax, cl
test	al, 1
jz	short loc_641C286A
mov	byte ptr [edx],	1
inc	b
inc	edx
cmp	b, 8
jnz	short loc_641C285C
inc	a
inc	esi
cmp	a, 20h
jnz	short loc_641C284C
jmp	loc_641C2758
align 10h
			
push	ebp
mov	ebp, esp
push	edi
push	esi
push	ebx
sub	esp, 22Ch
mov	ebx, buffer
mov	[ebp+pos], pos
cmp	used, 200h
jbe	short loc_641C2910
mov	[esp], used	
mov	[ebp+var_220], used
call	_malloc
mov	esi, eax
test	eax, eax
mov	edx, [ebp+var_220]
jz	loc_641C295C
mov	eax, [ebp+can_be_null]
mov	byte ptr [eax],	0
xor	eax, eax
mov	ecx, 100h
mov	edi, [ebp+fastmap]
rep stosb
mov	fastmap_0, esi
mov	ecx, edx
rep stosb
mov	eax, [ebp+fastmap]
mov	[esp+4], eax	
mov	ecx, [ebp+can_be_null]
mov	[esp], ecx	
mov	ecx, esi	
mov	used, [ebp+pos]	
mov	eax, buffer	
call	_re_compile_fastmap_aux
lea	eax, [ebp+small_visited]
cmp	esi, eax
jz	short loc_641C2900
mov	[esp], esi	
call	_free
mov	eax, 1
add	esp, 22Ch
pop	buffer
pop	esi
pop	visited
leave
retn
mov	eax, [ebp+can_be_null]
mov	byte ptr [eax],	0
xor	eax, eax
mov	pos, 100h
mov	edi, [ebp+fastmap]
rep stosb
lea	esi, [ebp+small_visited]
mov	fastmap_0, esi
mov	ecx, used
rep stosb
mov	eax, [ebp+fastmap]
mov	[esp+4], eax	
mov	ecx, [ebp+can_be_null]
mov	[esp], ecx	
mov	ecx, esi	
mov	used, [ebp+pos]	
mov	eax, buffer	
call	_re_compile_fastmap_aux
mov	eax, 1
add	esp, 22Ch
pop	buffer
pop	esi
pop	edi
leave
retn
align 4
xor	eax, eax
jmp	short loc_641C294F
public _re_compile_fastmap
push	ebp
mov	ebp, esp
push	ebx
sub	esp, 14h
mov	ebx, [ebp+bufp]
mov	eax, [ebx+0Ch]
test	eax, eax
jz	short loc_641C29AB
cmp	byte ptr [bufp_0+14h], 0
jnz	short loc_641C29AB
mov	edx, [bufp_0+8]	
test	edx, edx
jle	short loc_641C29BA
mov	[esp+4], eax	
lea	eax, [bufp_0+15h]
mov	[esp], eax	
xor	ecx, ecx	
mov	eax, [bufp_0]	
call	_re_do_compile_fastmap
test	eax, eax
jz	short loc_641C29AB
mov	eax, [bufp_0]
mov	al, [eax]
cmp	al, 1
jz	short loc_641C29B4
cmp	al, 0Eh
setz	al
shl	eax, 1
mov	[bufp_0+17h], al
mov	byte ptr [bufp_0+14h], 1
			
add	esp, 14h
pop	bufp_0
leave
retn
align 4
mov	byte ptr [bufp_0+17h], 1
jmp	short loc_641C29A7
mov	dword ptr [esp+8], 37Eh	
mov	dword ptr [esp+4], offset aRegexpr_c 
mov	dword ptr [esp], offset	aBufpUsed0 
call	__assert
align 4
public _re_match_2
			
push	ebp
mov	ebp, esp
push	edi
push	esi
push	ebx
sub	esp, 80Ch
mov	eax, [ebp+mstop]
mov	edx, [ebp+pos]
test	edx, edx
js	loc_641C3654
mov	edi, [ebp+size1]
test	edi, edi
js	loc_641C3654
mov	esi, [ebp+size2]
test	esi, esi
js	loc_641C3654
test	mstop_0, mstop_0
js	loc_641C3654
mov	edx, [ebp+size2]
add	edx, [ebp+size1]
cmp	mstop_0, edx
jg	loc_641C3688
cmp	[ebp+pos], mstop_0
jg	loc_641C36DC
mov	edx, [ebp+size1]
cmp	[ebp+pos], edx
jle	loc_641C2AEC
mov	edx, [ebp+pos]
sub	edx, [ebp+size1]
add	edx, [ebp+string2]
mov	[ebp+var_7CC], edx
sub	mstop_0, [ebp+size1]
add	eax, [ebp+string2]
mov	[ebp+partend], eax
mov	[ebp+part_2_end], eax
mov	[ebp+var_7EC], eax
mov	textend, [ebp+bufp]
cmp	byte ptr [eax+16h], 0
jz	short loc_641C2A81
mov	ebx, [ebp+regs]
test	ebx, ebx
jz	short loc_641C2A81
xor	eax, eax
lea	edx, [ebp+regend_text]
xchg	ax, ax
mov	dword ptr [edx+a*4], 0
inc	a
cmp	a, 0Ah
jnz	short loc_641C2A74
			
mov	edx, [ebp+bufp]
mov	edx, [edx]
mov	[ebp+match_end], edx
mov	ecx, [ebp+bufp]
mov	ecx, [ecx+10h]
mov	[ebp+var_7DC], ecx
lea	a, [ebp+initial_failure_stack]
mov	[ebp+var_7FC], eax
lea	edx, [ebp+map]
mov	[ebp+failure_stack_end], edx
mov	ecx, [ebp+match_end]
mov	dl, [ecx]
mov	esi, eax
mov	[ebp+var_7D8], eax
mov	ecx, [ebp+string2]
add	ecx, [ebp+size2]
mov	[ebp+var_7E4], ecx
mov	eax, [ebp+string1]
add	eax, [ebp+size1]
mov	[ebp+var_7E8], eax
mov	code, [ebp+match_end]
inc	code
cmp	dl, 15h		
jbe	short loc_641C2B24
			
call	_abort		
align 4
cmp	edx, mstop_0
jl	loc_641C32A0
mov	ecx, [ebp+string1]
add	ecx, mstop_0
mov	[ebp+partend], ecx
sub	mstop_0, edx
add	eax, [ebp+string2]
mov	[ebp+var_7EC], ecx
mov	ecx, [ebp+string1]
add	ecx, [ebp+pos]
mov	[ebp+var_7CC], ecx
mov	[ebp+part_2_end], textend
jmp	loc_641C2A5A
align 4
movzx	text, dl
jmp	ds:off_64250BAC[eax*4] 
align 10h
			
mov	eax, [ebp+partend] 
cmp	[ebp+var_7CC], eax
jz	loc_641C3536
mov	edx, [ebp+var_7CC]
movzx	eax, byte ptr [edx]
mov	a, [ebp+var_7DC]
test	ecx, ecx
jz	short loc_641C2B5F
mov	ecx, [ebp+var_7DC]
movzx	ch_0, byte ptr [ecx+ch_0]
movsx	edx, ds:_re_syntax_table[ch_0]
movzx	ch_0, byte ptr [code]
cmp	edx, eax
jz	loc_641C31A2
lea	failure_sp, [failure_sp+0]
			
cmp	[ebp+var_7D8], failure_sp
jz	loc_641C327C
sub	failure_sp, 0Ch
mov	reg, [failure_sp]
test	text, text
jnz	short loc_641C2BA1
mov	regtext, [ebp+var_7D8]
nop
cmp	failure_stack_start, failure_sp
jz	loc_641C327C
sub	failure_sp, 0Ch
mov	text, [failure_sp]
test	text, text
jz	short loc_641C2B90
mov	regtext, [failure_sp+4]
mov	[ebp+partend], edx
mov	ch_0, [failure_sp+8]
mov	dl, [code]
			
mov	[ebp+var_7CC], text
mov	[ebp+match_end], code
jmp	loc_641C2AD8
			
mov	eax, [ebp+string1] 
cmp	[ebp+var_7CC], eax
jz	short loc_641C2B74
mov	edx, [ebp+var_7E4]
cmp	[ebp+var_7CC], edx
jz	short loc_641C2B74
mov	regpartend, [ebp+size2]
test	edi, edi
jnz	loc_641C33B7
mov	a, [ebp+var_7E8]
cmp	[ebp+var_7CC], ecx
jz	short loc_641C2B74
mov	edx, [ebp+var_7CC]
movzx	eax, byte ptr [edx-1]
cmp	ds:_re_syntax_table[eax], 1
setnz	dl
mov	ecx, [ebp+var_7CC]
movzx	eax, byte ptr [ecx]
cmp	ds:_re_syntax_table[eax], 1
setz	al
cmp	al, dl
jnz	loc_641C2B74
			
mov	dl, [code]
mov	reg, [ebp+var_7CC]
jmp	short loc_641C2BAF
align 4
			
mov	regpartend, [ebp+size2]	
test	edi, edi
jz	loc_641C32C0
mov	edx, [ebp+var_7E4]
cmp	[ebp+var_7CC], edx
setz	al
test	al, al
jz	loc_641C2B74
jmp	short loc_641C2C21
			
mov	a, [ebp+string1]
cmp	[ebp+var_7CC], ecx
jz	loc_641C2B74
mov	edx, [ebp+var_7CC]
movzx	eax, byte ptr [edx-1]
cmp	ds:_re_syntax_table[eax], 1
jnz	loc_641C2B74
mov	eax, [ebp+var_7E4]
cmp	text, edx
jz	loc_641C3059
mov	edx, [ebp+size2]
test	edx, edx
jnz	short loc_641C2C9F
mov	eax, [ebp+var_7E8]
mov	ecx, [ebp+var_7CC]
cmp	text, ecx
jz	loc_641C3059
mov	edx, [ebp+var_7CC]
movzx	eax, byte ptr [edx]
cmp	ds:_re_syntax_table[eax], 1
jnz	loc_641C2C21
jmp	loc_641C2B74
align 4
			
mov	a, [ebp+var_7E4] 
cmp	[ebp+var_7CC], ecx
jz	loc_641C2B74
mov	ecx, [ebp+size2]
test	ecx, ecx
jnz	loc_641C3308
mov	eax, [ebp+var_7E8]
cmp	[ebp+var_7CC], eax
jz	loc_641C2B74
mov	edx, [ebp+var_7CC]
movzx	eax, byte ptr [edx]
cmp	ds:_re_syntax_table[eax], 1
jnz	loc_641C2B74
mov	ecx, [ebp+string1]
cmp	[ebp+var_7CC], ecx
jz	loc_641C2DE8
mov	edx, [ebp+var_7CC]
movzx	eax, byte ptr [edx-1]
cmp	ds:_re_syntax_table[eax], 1
jnz	loc_641C2C21
jmp	loc_641C2B74
			
mov	a, [ebp+string1]
cmp	[ebp+var_7CC], ecx
jz	loc_641C2DE8
mov	eax, [ebp+var_7E4]
mov	edx, [ebp+var_7CC]
cmp	text, edx
jz	loc_641C3059
mov	eax, [ebp+size2]
test	eax, eax
jnz	loc_641C3386
mov	eax, [ebp+var_7E8]
mov	ecx, [ebp+var_7CC]
cmp	text, ecx
jz	loc_641C3059
mov	ecx, [ebp+var_7CC]
movzx	eax, byte ptr [ecx-1]
cmp	ds:_re_syntax_table[eax], 1
setz	dl
mov	ecx, [ebp+var_7CC]
movzx	eax, byte ptr [ecx]
cmp	ds:_re_syntax_table[eax], 1
setz	al
cmp	al, dl
jz	loc_641C2B74
jmp	loc_641C2C21
align 4
			
lea	edx, [code+1]	
mov	a, [ebp+var_7CC]
mov	[failure_sp-0Ch], ecx
mov	eax, [ebp+partend]
mov	[failure_sp-8],	eax
movzx	a, byte	ptr [code]
movzx	eax, byte ptr [edx]
shl	eax, 8
or	eax, a
cwde
lea	code, [edx+eax+1]
mov	dl, [code]
mov	eax, [ebp+var_7CC]
jmp	loc_641C2BAF
align 4
			
mov	a, [ebp+string1] 
cmp	[ebp+var_7CC], ecx
jnz	loc_641C2B74
nop
			
mov	dl, [code]
mov	eax, ecx
jmp	loc_641C2BAF
align 4
			
cmp	failure_sp, [ebp+failure_stack_end] 
jz	loc_641C35BA
movzx	a, byte	ptr [code]
lea	eax, [code+1]
add	ebx, 2
movzx	eax, byte ptr [eax]
shl	eax, 8
or	eax, a
movsx	a, ax
cmp	dl, 0Dh
jz	loc_641C3325
lea	a, [code+a]
mov	[failure_sp+8],	ecx
mov	eax, [ebp+var_7CC]
mov	[failure_sp], eax
mov	edx, [ebp+partend]
mov	[failure_sp+4],	edx
add	failure_sp, 0Ch
mov	dl, [code]
mov	eax, [ebp+var_7CC]
jmp	loc_641C2BAF
			
movzx	eax, byte ptr [code] 
lea	regpartend, [code+2]
movzx	edx, byte ptr [ebx+1]
shl	edx, 8
or	a, edx
cwde
add	a, 3
mov	[ebp+var_7F4], eax
lea	ebx, [code+eax]
cmp	byte ptr [p1-3], 0Bh
jnz	loc_641C36C0
mov	edx, [ebp+bufp]
mov	eax, [edx]	
mov	translate, code
sub	ecx, eax	
mov	edx, [edx+8]
mov	[ebp+used], edx
lea	edx, [ebp+map]
mov	[esp+4], edx	
lea	edx, [ebp+can_be_null]
mov	[esp], edx	
mov	edx, [ebp+used]	
call	_re_do_compile_fastmap
test	eax, eax
jz	make_normal_jump 
			
			
			
mov	al, [p1]	
inc	p1
cmp	al, 13h		
ja	make_normal_jump 
			
movzx	eax, al
jmp	ds:off_64250C04[eax*4] 
			
lea	edx, [code+1]
jmp	loc_641C2DB9
			
mov	eax, [ebp+var_7E4] 
mov	edx, [ebp+var_7CC]
cmp	text, edx
jz	loc_641C3059
mov	eax, [ebp+var_7E8]
mov	a, [ebp+var_7CC]
cmp	text, ecx
jz	loc_641C33F3
mov	ecx, [ebp+var_7CC]
cmp	byte ptr [ecx],	0Ah
jnz	loc_641C2B74
jmp	loc_641C2DE8
			
mov	edx, [ebp+string1]
cmp	[ebp+var_7CC], edx
jz	loc_641C352C
mov	a, [ebp+var_7CC]
cmp	byte ptr [ecx-1], 0Ah
jnz	loc_641C2B74
jmp	loc_641C2DE8
			
mov	edx, [ebp+part_2_end]
cmp	[ebp+partend], edx
jz	loc_641C34E9
mov	a, [ebp+var_7CC]
sub	ecx, [ebp+string1]
mov	[ebp+match_end], ecx
mov	a, [ebp+regs]
test	ecx, ecx
jz	loc_641C2FE0
mov	edx, [ebp+pos]
mov	eax, [ebp+regs]
mov	[eax], edx
mov	ecx, [ebp+match_end]
mov	[eax+28h], ecx
mov	eax, [ebp+bufp]
cmp	byte ptr [eax+16h], 0
jz	loc_641C32D4
mov	eax, 1
lea	edx, [ebp+regend_text]
lea	failure_sp, [ebp+regstart_partend]
lea	regpartend, [ebp+regend_partend]
mov	code, [ebp+regs]
mov	[ebp+var_7CC], edx
jmp	short loc_641C2FBD
align 4
mov	edx, [ebp+part_2_end]
cmp	[esi+a*4], edx
jz	loc_641C3374
mov	edx, [ebp+a*4+regstart_text]
sub	edx, [ebp+string1]
mov	[regs_0+a*4], edx
mov	edx, [ebp+part_2_end]
cmp	[edi+a*4], edx
jz	loc_641C3364
sub	ecx, [ebp+string1]
mov	[regs_0+a*4+28h], ecx
inc	a
cmp	a, 0Ah
jz	short loc_641C2FE0
			
mov	edx, [ebp+var_7CC]
mov	ecx, [edx+a*4]
test	ecx, ecx
jnz	short loc_641C2F88
mov	dword ptr [regs_0+a*4],	0FFFFFFFFh
mov	dword ptr [regs_0+a*4+28h], 0FFFFFFFFh
inc	a
cmp	a, 0Ah
jnz	short loc_641C2FBD
nop
			
mov	ecx, [ebp+var_7FC]
cmp	[ebp+var_7D8], ecx
jz	short loc_641C2FFC
mov	a, [ebp+var_7D8]
mov	[esp], eax	
call	_free
			
mov	a, [ebp+match_end]
sub	eax, [ebp+pos]
add	esp, 80Ch
pop	code
pop	failure_sp
pop	regpartend
leave
retn
			
mov	eax, [ebp+partend]
cmp	[ebp+var_7CC], eax
jz	loc_641C3615
mov	edx, [ebp+var_7CC]
movzx	eax, byte ptr [edx]
mov	edx, [ebp+var_7DC]
test	edx, edx
jz	short loc_641C303F
mov	a, [ebp+var_7DC]
movzx	ch_0, byte ptr [ecx+ch_0]
movsx	edx, ds:_re_syntax_table[ch_0]
movzx	ch_0, byte ptr [code]
cmp	edx, eax
jz	loc_641C2B74
mov	eax, [ebp+var_7CC]
inc	text
inc	code
			
mov	dl, [code]
jmp	loc_641C2BAF
			
movsx	eax, byte ptr [code] 
inc	code
mov	edx, [ebp+var_7CC]
mov	[ebp+reg*4+regstart_text], edx
mov	a, [ebp+partend]
mov	[ebp+reg*4+regstart_partend], ecx
mov	dl, [code]
mov	reg, [ebp+var_7CC]
jmp	loc_641C2BAF
align 4
			
movsx	eax, byte ptr [code] 
mov	regpartend, [ebp+reg*4+regend_text]
test	regpartend, regpartend
jz	loc_641C2B74
mov	edx, [ebp+reg*4+regstart_text]
mov	a, [ebp+reg*4+regstart_partend]
cmp	ecx, [ebp+reg*4+regend_partend]
jz	loc_641C33E8
mov	reg, [ebp+var_7E8]
mov	[ebp+match_end], eax
inc	code
cmp	regpartend, regtext
jz	loc_641C2C21
mov	[ebp+var_7F4], code
mov	reg, [ebp+var_7CC]
mov	ecx, [ebp+var_7DC]
mov	[ebp+var_7CC], failure_sp
jmp	short loc_641C3114
align 10h
			
movzx	ch_0, byte ptr [text]
test	translate, translate
jz	short loc_641C30EB
movzx	ch_0, byte ptr [translate+ch_0]
cmp	regtext, [ebp+match_end]
jz	loc_641C3350
movzx	regch, byte ptr	[regtext]
test	translate, translate
jz	short loc_641C3102
movzx	regch, byte ptr	[translate+regch]
cmp	regch, ch_0
jnz	loc_641C3358
inc	text
inc	regtext
cmp	regpartend, regtext
jz	loc_641C3641
cmp	text, [ebp+partend]
jnz	short loc_641C30E0
cmp	[ebp+var_7EC], text
jz	loc_641C3358
mov	text, [ebp+part_2_end]
mov	[ebp+partend], eax
mov	eax, [ebp+string2]
jmp	short loc_641C30E0
align 4
			
movsx	eax, byte ptr [code] 
inc	code
mov	edx, [ebp+var_7CC]
mov	[ebp+reg*4+regend_text], edx
mov	a, [ebp+partend]
mov	[ebp+reg*4+regend_partend], ecx
mov	dl, [code]
mov	reg, [ebp+var_7CC]
jmp	loc_641C2BAF
align 4
			
mov	edx, [ebp+partend] 
cmp	[ebp+var_7CC], edx
jz	loc_641C3500
mov	a, [ebp+var_7CC]
movzx	eax, byte ptr [ecx]
mov	ecx, [ebp+var_7DC]
test	ecx, ecx
jz	short loc_641C3197
mov	edx, [ebp+var_7DC]
movzx	ch_0, byte ptr [edx+ch_0]
movzx	edx, byte ptr [code]
cmp	ch_0, edx
jnz	loc_641C2B74
mov	ch_0, [ebp+var_7CC]
inc	text
inc	code
mov	dl, [code]
jmp	loc_641C2BAF
align 4
			
mov	eax, [ebp+partend] 
cmp	[ebp+var_7CC], eax
jz	loc_641C3562
mov	a, [ebp+var_7CC]
movzx	edx, byte ptr [ecx]
mov	regpartend, [ebp+var_7DC]
test	edi, edi
jz	short loc_641C31E3
mov	eax, [ebp+var_7DC]
movzx	ch_0, byte ptr [eax+ch_0]
mov	eax, ch_0
sar	eax, 3
movsx	eax, byte ptr [code+eax]
mov	ecx, ch_0
and	ecx, 7
sar	eax, cl
test	al, 1
jz	loc_641C2B74
mov	eax, [ebp+var_7CC]
inc	text
add	code, 20h
mov	dl, [code]
jmp	loc_641C2BAF
			
mov	a, [ebp+partend]
cmp	[ebp+var_7CC], ecx
jz	loc_641C358E
mov	edx, [ebp+var_7CC]
movzx	eax, byte ptr [edx]
mov	edx, [ebp+var_7DC]
test	edx, edx
jz	short loc_641C323B
mov	ecx, [ebp+var_7DC]
movzx	ch_0, byte ptr [ecx+ch_0]
cmp	ch_0, 0Ah
jz	loc_641C2B74
mov	ch_0, [ebp+var_7CC]
inc	text
mov	dl, [code]
jmp	loc_641C2BAF
			
movzx	eax, byte ptr [p1]
cmp	[ebp+eax+map], 0
jz	loc_641C3439	
nop
			
mov	ecx, [ebp+match_end] 
			
mov	byte ptr [ecx],	9
mov	b, [ebp+var_7CC]
mov	p1, ecx
mov	dl, 9
jmp	loc_641C2BAF
			
mov	a, [ebp+var_7FC]
cmp	[ebp+var_7D8], ecx
jnz	loc_641C34CC
mov	reg, 0FFFFFFFFh
add	esp, 80Ch
pop	ch_0
pop	failure_sp
pop	regpartend
leave
retn
align 10h
mov	edx, [ebp+string1]
add	edx, [ebp+size1]
mov	[ebp+partend], edx
sub	mstop_0, [ebp+size1]
add	eax, [ebp+string2]
mov	[ebp+var_7EC], eax
jmp	loc_641C2B0A
align 10h
mov	eax, [ebp+var_7E8]
cmp	[ebp+var_7CC], eax
setz	al
jmp	loc_641C2C46
mov	eax, 1
mov	edx, [ebp+regs]
mov	dword ptr [regs_0+a*4],	0FFFFFFFFh
mov	dword ptr [regs_0+a*4+28h], 0FFFFFFFFh
inc	a
cmp	a, 0Ah
jnz	short loc_641C32DC
mov	ecx, [ebp+var_7FC]
cmp	[ebp+var_7D8], ecx
jnz	loc_641C2FEE
jmp	loc_641C2FFC
mov	edx, [ebp+var_7E8]
cmp	[ebp+var_7CC], edx
jnz	loc_641C2CEB
mov	ecx, [ebp+string1]
movzx	eax, byte ptr [ecx]
jmp	loc_641C2CF4
cmp	byte ptr [code], 0Bh
jnz	loc_641C36A4
movzx	edx, byte ptr [code+1]
movzx	eax, byte ptr [code+2]
shl	eax, 8
or	eax, b
cwde
lea	eax, [code+eax+3]
mov	[failure_sp+8],	eax
mov	dword ptr [failure_sp],	0
add	code, a
jmp	loc_641C2E34
mov	regtext, [ebp+string2]
jmp	loc_641C30F7
			
mov	regch, [ebp+var_7CC]
jmp	loc_641C2B74
align 4
add	ecx, [ebp+size1]
sub	ecx, [ebp+string2]
mov	[regs_0+a*4+28h], ecx
jmp	loc_641C2FB7
align 4
mov	edx, [ebp+size1]
add	edx, [ebp+a*4+regstart_text]
sub	edx, [ebp+string2]
mov	[regs_0+a*4], edx
jmp	loc_641C2FA1
mov	edx, [ebp+var_7CC]
movzx	eax, byte ptr [edx-1]
cmp	ds:_re_syntax_table[eax], 1
setz	dl
mov	ecx, [ebp+var_7E8]
cmp	[ebp+var_7CC], ecx
jnz	loc_641C2D82
mov	ecx, [ebp+string2]
movzx	eax, byte ptr [ecx]
jmp	loc_641C2D8B
mov	edx, [ebp+var_7CC]
movzx	eax, byte ptr [edx-1]
cmp	ds:_re_syntax_table[eax], 1
setnz	dl
mov	a, [ebp+var_7E8]
cmp	[ebp+var_7CC], ecx
jnz	loc_641C2C06
mov	ecx, [ebp+string2]
movzx	eax, byte ptr [ecx]
jmp	loc_641C2C0F
mov	[ebp+match_end], regpartend
jmp	loc_641C30BB
mov	edx, [ebp+size2]
test	edx, edx
jz	loc_641C3059
mov	edx, [ebp+string2]
cmp	byte ptr [edx],	0Ah
jnz	loc_641C2B74
mov	dl, [code]
jmp	loc_641C2BAF
			
inc	p1
jmp	loc_641C2E9F	
			
mov	eax, 1		
cmp	eax, 0Bh
jz	short loc_641C3436
cmp	byte ptr [ebp+eax+initial_failure_stack.code+5F7h], 0
jnz	make_normal_jump 
			
cmp	eax, 0FFh
jg	short loc_641C343A 
inc	eax
jmp	short loc_641C341C
			
			
inc	p1		
			
cmp	[ebp+match_end], p1
jz	short make_update_jump
mov	al, [p1]
inc	p1
cmp	al, 15h		
jbe	loc_641C34DF
movsx	eax, al		
mov	[esp+4], eax
mov	dword ptr [esp], offset	aRegexpr_cProce	
call	_printf
cmp	[ebp+match_end], p1
jnz	short loc_641C3442
lea	p1, [code-2]
mov	b, [ebp+match_end]
mov	byte ptr [eax],	0Ch
mov	dl, byte ptr [ebp+var_7F4]
mov	[edi-2], dl
lea	edx, [edi-1]
mov	eax, [ebp+var_7F4]
sar	eax, 8
mov	[edi-1], al
jmp	loc_641C2DA7
align 4
			
xor	eax, eax	
jmp	short loc_641C34A0
			
inc	b
cmp	b, 100h
jz	short loc_641C34C4 
mov	edx, b
sar	edx, 3
movsx	edx, byte ptr [p1+edx]
mov	ecx, b
and	ecx, 7
sar	edx, cl
and	edx, 1
jz	short loc_641C3498
cmp	[ebp+b+map], 0
jz	short loc_641C3498
jmp	make_normal_jump 
			
			
			
add	p1, 20h		
jmp	loc_641C343A	
mov	reg, [ebp+var_7D8]
mov	[esp], eax	
call	_free
jmp	loc_641C328E
movzx	eax, al
jmp	ds:off_64250C54[eax*4] 
mov	eax, [ebp+size1]
sub	eax, [ebp+string2]
add	eax, [ebp+var_7CC]
mov	[ebp+match_end], eax
jmp	loc_641C2F3D
mov	a, [ebp+var_7EC]
cmp	[ebp+var_7CC], ecx
jz	loc_641C2B74
mov	eax, [ebp+part_2_end]
mov	[ebp+partend], eax
mov	edx, [ebp+string2]
mov	[ebp+var_7CC], edx
jmp	loc_641C317A
mov	dl, [code]
mov	eax, [ebp+string1]
jmp	loc_641C2BAF
mov	edx, [ebp+var_7EC]
cmp	[ebp+var_7CC], edx
jz	loc_641C2B74
mov	a, [ebp+part_2_end]
mov	[ebp+partend], ecx
mov	eax, [ebp+string2]
mov	[ebp+var_7CC], eax
jmp	loc_641C2B42
mov	edx, [ebp+var_7EC]
cmp	[ebp+var_7CC], edx
jz	loc_641C2B74
mov	a, [ebp+part_2_end]
mov	[ebp+partend], ecx
mov	eax, [ebp+string2]
mov	[ebp+var_7CC], eax
jmp	loc_641C31C6
mov	eax, [ebp+var_7EC]
cmp	[ebp+var_7CC], eax
jz	loc_641C2B74
mov	edx, [ebp+part_2_end]
mov	[ebp+partend], edx
mov	ecx, [ebp+string2]
mov	[ebp+var_7CC], ecx
jmp	loc_641C321E
mov	edx, [ebp+var_7FC]
cmp	[ebp+var_7D8], edx
jnz	error
mov	dword ptr [esp], 0C030h	
call	_malloc
mov	[ebp+var_7D8], eax
add	eax, 0C030h
mov	[ebp+failure_stack_end], eax
mov	ecx, 180h
mov	regpartend, [ebp+var_7D8]
mov	failure_sp, [ebp+var_7FC]
rep movsd
mov	esi, [ebp+var_7D8]
add	failure_sp, 600h
mov	ecx, [ebp+match_end]
mov	dl, [ecx]
jmp	loc_641C2E00
mov	edx, [ebp+var_7EC]
cmp	[ebp+var_7CC], edx
jz	loc_641C2B74
mov	a, [ebp+part_2_end]
mov	[ebp+partend], ecx
mov	eax, [ebp+string2]
mov	[ebp+var_7CC], eax
jmp	loc_641C3022
mov	ch_0, [ebp+var_7F4]
mov	regch, [ebp+var_7CC]
mov	dl, [code]
jmp	loc_641C2BAF
			
mov	dword ptr [esp+8], 3B1h
mov	dword ptr [esp+4], offset aRegexpr_c 
mov	dword ptr [esp], offset	aPos0Size10Size	
call	__assert
mov	edx, [ebp+var_7D8]
mov	[esp], edx	
call	_free
mov	eax, 0FFFFFFFEh
jmp	loc_641C3293
mov	dword ptr [esp+8], 3B2h
mov	dword ptr [esp+4], offset aRegexpr_c 
mov	dword ptr [esp], offset	aMstopSize1Size	
call	__assert
mov	dword ptr [esp+8], 4EAh
mov	dword ptr [esp+4], offset aRegexpr_c 
mov	dword ptr [esp], offset	aCodeCfailure_j	
call	__assert
mov	dword ptr [esp+8], 465h
mov	dword ptr [esp+4], offset aRegexpr_c 
mov	dword ptr [esp], offset	aP13Cfailure_ju	
call	__assert
mov	dword ptr [esp+8], 3B3h
mov	dword ptr [esp+4], offset aRegexpr_c 
mov	dword ptr [esp], offset	aPosMstop 
call	__assert
public _re_match
push	ebp
mov	ebp, esp
sub	esp, 28h
mov	eax, [ebp+size]
mov	[esp+1Ch], eax	
mov	edx, [ebp+regs]
mov	[esp+18h], edx	
mov	edx, [ebp+pos]
mov	[esp+14h], edx	
mov	dword ptr [esp+10h], 0 
mov	dword ptr [esp+0Ch], 0 
mov	[esp+8], eax	
mov	eax, [ebp+string]
mov	[esp+4], eax	
mov	eax, [ebp+bufp]
mov	[esp], eax	
call	_re_match_2
leave
retn
align 4
public _re_compile_pattern
push	ebp
mov	ebp, esp
push	edi
push	esi
push	ebx
sub	esp, 9FCh
mov	edx, ds:_re_compile_initialized
test	edx, edx
jz	loc_641C4433
mov	eax, [ebp+bufp]
mov	dword ptr [eax+8], 0
mov	byte ptr [eax+14h], 0
mov	byte ptr [eax+16h], 0
mov	edx, [eax+10h]
mov	[ebp+translate], edx
mov	edx, [eax]
mov	ecx, [eax+4]
mov	[ebp+alloc], ecx
test	ecx, ecx
jz	loc_641C440E
test	pattern, pattern
jz	loc_641C440E
mov	[ebp+starts], 0
mov	[ebp+beginning_context], 1
mov	[ebp+num_open_registers], 0
mov	[ebp+paren_depth], 0
mov	[ebp+next_register], 1
xor	ecx, ecx
mov	[ebp+var_9C8], 0
mov	[ebp+starts_base], 0
xor	ebx, ebx
mov	[ebp+p], 0
mov	[ebp+gethex_value], 0
mov	edi, [ebp+gethex_value]
cmp	[ebp+size], edi
jg	loc_641C3A3F
lea	esi, [esi+0]
mov	[ebp+op], 0
			
mov	edi, [ebp+op]
movzx	edi, ds:_regexp_precedences[edi]
mov	[ebp+ad], edi
mov	eax, [ebp+p]
cmp	edi, eax
jle	loc_641C38B0
inc	eax
mov	[ebp+gethex_value_0], eax
cmp	edi, eax
jle	short loc_641C3884
mov	edi, [ebp+p]
mov	esi, [ebp+starts_base]
lea	eax, [edi+esi+1]
lea	esi, [ebp+eax*4+starts]
mov	eax, edi
not	eax
add	eax, [ebp+ad]
lea	edi, ds:0[eax*4]
xor	eax, eax
mov	[esi], pattern_offset
add	esi, 4
add	eax, 4
cmp	eax, edi
jnz	short loc_641C385C
mov	eax, [ebp+ad]
sub	eax, [ebp+p]
mov	esi, [ebp+gethex_value_0]
lea	esi, [esi+eax-1]
mov	[ebp+gethex_value_0], esi
mov	eax, [ebp+gethex_value_0]
add	eax, [ebp+starts_base]
mov	[ebp+eax*4+starts], pattern_offset
mov	edi, [ebp+var_9C8]
			
cmp	[ebp+op], 16h
jbe	loc_641C395F
			
			
call	_abort		
align 10h
jge	loc_641C3B18
mov	edi, [ebp+var_9C8]
test	edi, edi
jz	loc_641C45E8
mov	edi, [ebp+var_9C8]
dec	num_jumps
mov	eax, [ebp+num_jumps*4+future_jumps]
mov	esi, [ebp+ad]
add	esi, [ebp+starts_base]
mov	esi, [ebp+esi*4+starts]
mov	[ebp+p], esi
cmp	eax, esi
jl	loc_641C45E8
lea	esi, [pattern_offset-2]
mov	[ebp+gethex_value_0], esi
mov	esi, [ebp+var_9C8]
lea	esi, [ebp+esi*4+starts+7C8h]
mov	[ebp+complement], esi
mov	[ebp+var_9C8], pattern_offset
jmp	short loc_641C392A
align 4
lea	ebx, [num_jumps-1]
mov	eax, [esi]
sub	esi, 4
cmp	eax, [ebp+p]
jl	short loc_641C3940
mov	edi, num_jumps
mov	pattern_offset,	[ebp+gethex_value_0]
sub	disp, eax
mov	[pattern+eax], bl
sar	disp, 8
mov	[pattern+eax+1], bl
test	num_jumps, num_jumps
jnz	short loc_641C3918
mov	num_jumps, [ebp+var_9C8]
mov	esi, [ebp+ad]
mov	[ebp+gethex_value_0], esi
cmp	[ebp+op], 16h	
ja	loc_641C38AA	
mov	esi, [ebp+op]
jmp	ds:off_64250D90[esi*4] 
mov	eax, [ebp+gethex_value]
inc	eax
cmp	[ebp+size], eax
jle	short loc_641C398B
mov	eax, [ebp+regex]
mov	esi, [ebp+gethex_value]
cmp	byte ptr [eax+esi], 5Ch
jz	loc_641C49CE
			
mov	opcode,	ds:_regexp_context_indep_ops
test	esi, esi
jnz	op_error
			
mov	[ebp+p], 4	
			
lea	esi, [pattern_offset+1]
cmp	esi, [ebp+alloc]
jge	loc_641C3CFF
			
mov	eax, [ebp+gethex_value_0]
add	eax, [ebp+starts_base]
mov	[ebp+eax*4+starts], pattern_offset
mov	al, byte ptr [ebp+p]
mov	[pattern+pattern_offset], al
mov	[pattern+esi], cl
lea	pattern_offset,	[esi+1]
mov	esi, [ebp+op]
test	esi, esi
jz	loc_641C4933
mov	esi, [ebp+starts_base]
mov	[ebp+p], esi
mov	[ebp+var_9EC], pattern_offset
			
mov	eax, [ebp+op]
sub	eax, 9
cmp	eax, 1
setbe	al
movzx	eax, al
mov	[ebp+beginning_context], eax
mov	[ebp+var_9C8], num_jumps
mov	pattern_offset,	[ebp+p]
mov	[ebp+starts_base], ebx
mov	ebx, [ebp+var_9EC]
mov	firstchar, [ebp+gethex_value_0]
mov	[ebp+p], esi
mov	num_jumps, [ebp+gethex_value]
cmp	[ebp+size], edi
jle	loc_641C37FC
mov	esi, [ebp+regex]
mov	eax, [ebp+gethex_value]
mov	cl, [esi+eax]
inc	eax
mov	[ebp+gethex_value], eax
mov	eax, [ebp+translate]
test	eax, eax
jz	short loc_641C3A68
movzx	ch_0, cl
mov	edi, [ebp+translate]
mov	cl, [edi+ch_0]
movzx	eax, cl
movzx	ch_0, ds:_regexp_plain_ops[ch_0]
mov	[ebp+op], eax
cmp	eax, 3
jnz	loc_641C3806
mov	eax, [ebp+gethex_value]
cmp	[ebp+size], eax
jle	ends_prematurely
mov	esi, [ebp+regex]
mov	cl, [esi+eax]
inc	eax
mov	[ebp+gethex_value], eax
movzx	eax, cl
movzx	ch_0, ds:_regexp_quoted_ops[ch_0]
mov	[ebp+op], eax
dec	eax
jnz	loc_641C3806
cmp	ds:_regexp_ansi_sequences, 0
jz	loc_641C3806
cmp	cl, 58h
jz	loc_641C48AE
ja	loc_641C45FF
cmp	cl, 4Eh
jz	loc_641C4984
ja	loc_641C487C
cmp	cl, 42h
jz	loc_641C492C
cmp	cl, 46h
jz	loc_641C49F7
cmp	cl, 41h
jz	loc_641C4625
			
cmp	[ebp+translate], 0
jz	loc_641C3806
movzx	ch_0, cl
mov	esi, [ebp+translate]
mov	cl, [esi+ch_0]
jmp	loc_641C3806
mov	edi, [ebp+var_9C8]
mov	eax, [ebp+p]
mov	[ebp+gethex_value_0], eax
jmp	loc_641C389D
			
mov	esi, 12h	
			
cmp	pattern_offset,	[ebp+alloc]
jge	loc_641C43C9
mov	eax, [ebp+gethex_value_0]
add	eax, [ebp+starts_base]
mov	[ebp+eax*4+starts], pattern_offset
mov	eax, opcode
mov	[pattern+pattern_offset], al
inc	pattern_offset
jmp	loc_641C39D4
			
mov	esi, 11h	
jmp	short loc_641C3B34
			
mov	cl, 1		
mov	[ebp+p], 15h
jmp	loc_641C39A3
			
mov	cl, 1		
mov	[ebp+p], 14h
jmp	loc_641C39A3
			
mov	esi, 0Fh	
jmp	short loc_641C3B34
			
mov	esi, 0Eh	
jmp	short loc_641C3B34
			
mov	esi, 10h	
jmp	short loc_641C3B34
			
mov	eax, [ebp+gethex_value_0] 
add	eax, [ebp+starts_base]
mov	[ebp+eax*4+starts], pattern_offset
lea	eax, [pattern_offset+20h]
cmp	eax, [ebp+alloc]
jge	loc_641C44BE
lea	ch_0, [pattern+pattern_offset]
mov	[ebp+beginning_context], ecx
mov	byte ptr [ecx],	3
inc	pattern_offset
mov	[ebp+p], ebx
xor	eax, eax
mov	ecx, [ebp+beginning_context]
lea	esi, [esi+0]
mov	byte ptr [ecx+a+1], 0
inc	a
cmp	a, 20h
jnz	short loc_641C3BDC
mov	ebx, [ebp+p]
add	pattern_offset,	20h
mov	esi, [ebp+size]
cmp	[ebp+gethex_value], esi
jge	ends_prematurely
mov	esi, [ebp+regex]
mov	a, [ebp+gethex_value]
mov	cl, [esi+eax]
inc	eax
mov	[ebp+gethex_value], eax
cmp	[ebp+translate], 0
jz	short loc_641C3C27
movzx	ch_0, cl
mov	eax, [ebp+translate]
mov	cl, [eax+ch_0]
mov	[ebp+complement], 0
cmp	cl, 5Eh
jz	loc_641C45A2
			
mov	esi, 1
mov	[ebp+ad], 0
or	eax, 0FFFFFFFFh
mov	[ebp+var_9C8], pattern_offset
mov	[ebp+var_9E4], num_jumps
mov	num_jumps, [ebp+gethex_value]
cmp	cl, 5Dh
jz	loc_641C42C6
nop
			
mov	pattern_offset,	ds:_regexp_ansi_sequences
test	ebx, ebx
jz	short loc_641C3C7B
cmp	cl, 5Ch
jz	loc_641C4388
			
mov	firstchar, [ebp+ad]
test	esi, esi
jz	loc_641C4328
movzx	esi, cl
cmp	prev, esi
jg	loc_641C4286
mov	[ebp+ad], pos
jmp	short loc_641C3CBF
			
sar	a, 3
add	ebx, [ebp+p]
mov	ch_0, prev
and	ecx, 7
mov	pos, 1
shl	edi, cl
mov	ecx, edi
or	[pattern+ebx], cl
inc	prev
cmp	a, esi
jg	loc_641C4280
mov	ebx, prev
test	prev, prev
jns	short loc_641C3C9C
lea	ebx, [prev+7]
jmp	short loc_641C3C9C
			
cmp	cl, 30h
jz	bad_match_register
sub	ch_0, 30h
cmp	cl, 9
ja	loc_641C4957
mov	esi, [ebp+bufp]
mov	byte ptr [esi+16h], 1
mov	[ebp+p], 8
lea	esi, [pattern_offset+1]
cmp	esi, [ebp+alloc]
jl	loc_641C39B2
add	[ebp+alloc], 102h
mov	eax, [ebp+alloc]
mov	[esp+4], eax	
mov	[esp], pattern	
mov	[ebp+var_9E8], cl
call	_realloc
mov	edx, eax
test	eax, eax
mov	cl, [ebp+var_9E8]
jnz	loc_641C39B2
mov	esi, pattern_offset
jmp	loc_641C4255
			
cmp	[ebp+paren_depth], 0
jz	parenthesis_error
mov	eax, [ebp+starts_base]
sub	eax, 5
mov	[ebp+p], eax
movzx	esi, ds:_regexp_precedences+0Ah
mov	[ebp+gethex_value_0], esi
dec	[ebp+paren_depth]
mov	[ebp+var_9EC], pattern_offset
mov	eax, [ebp+num_open_registers]
cmp	[ebp+paren_depth], eax
jge	loc_641C39F4
mov	esi, [ebp+bufp]
mov	byte ptr [esi+16h], 1
lea	esi, [pattern_offset+1]
cmp	esi, [ebp+alloc]
jge	loc_641C46F3
mov	byte ptr [pattern+pattern_offset], 7
dec	[ebp+num_open_registers]
mov	pattern_offset,	[ebp+num_open_registers]
mov	eax, [ebp+ebx*4+open_registers]
mov	[pattern+esi], al
inc	esi
mov	[ebp+var_9EC], esi
jmp	loc_641C39F4
			
mov	eax, [ebp+size]
cmp	[ebp+gethex_value], eax
jge	ends_prematurely
mov	eax, [ebp+regex]
mov	ch_0, [ebp+gethex_value]
movzx	esi, byte ptr [eax+ecx]
lea	eax, [ch_0-30h]
cmp	al, 9
ja	bad_match_register
mov	eax, ecx
inc	pos
cmp	[ebp+size], pos
jle	ends_prematurely
mov	pos, [ebp+regex]
movsx	ecx, byte ptr [eax+ecx+1]
mov	[ebp+p], ecx
sub	ecx, 30h
cmp	ecx, 9
ja	bad_match_register
mov	cl, 0Ah
mov	al, byte ptr [ebp+p]
mul	cl
mov	cl, al
lea	ecx, [ch_0+ecx-10h]
lea	eax, [ch_0-1]
cmp	al, 8
ja	bad_match_register
add	[ebp+gethex_value], 2
jmp	loc_641C3CDF
			
mov	[ebp+var_9EC], pattern_offset 
cmp	[ebp+next_register], 9
jle	loc_641C443D
cmp	[ebp+starts_base], 1EEh
jg	too_complex
inc	[ebp+paren_depth]
mov	eax, [ebp+starts_base]
add	eax, 5
mov	[ebp+p], eax
mov	eax, [ebp+gethex_value_0]
add	eax, [ebp+starts_base]
mov	[ebp+eax*4+starts], pattern_offset
mov	esi, [ebp+var_9EC]
mov	pattern_offset,	[ebp+p]
mov	[ebp+ebx*4+starts], esi
mov	[ebp+gethex_value_0], 0
jmp	loc_641C39F4
			
lea	esi, [pattern_offset+5]
mov	[ebp+var_9C8], esi
mov	eax, [ebp+alloc]
cmp	esi, eax
jge	loc_641C448A
mov	esi, [ebp+gethex_value_0]
add	esi, [ebp+starts_base]
mov	[ebp+ad], esi
mov	eax, [ebp+esi*4+starts]
mov	[ebp+p], eax
lea	esi, [pattern_offset-1]
cmp	eax, a
jg	short loc_641C3EF5
lea	eax, [pattern+pattern_offset]
mov	[ebp+beginning_context], pattern
mov	dl, [eax-1]
mov	[eax+2], dl
dec	a
dec	eax
cmp	[ebp+p], a
jle	short loc_641C3EDF
mov	edx, [ebp+beginning_context]
mov	a, [ebp+p]
mov	byte ptr [pattern+esi],	0Bh
lea	eax, [pattern_offset+4]
mov	[ebp+complement], eax
mov	esi, [ebp+p]
not	esi
add	eax, esi
mov	[ebp+beginning_context], eax
mov	esi, [ebp+p]
mov	[pattern+esi+1], al
mov	eax, [ebp+beginning_context]
sar	eax, 8
mov	[pattern+esi+2], al
lea	esi, [pattern_offset+3]
mov	[ebp+var_9EC], esi
cmp	num_jumps, 63h
jg	too_complex
mov	byte ptr [pattern+pattern_offset+3], 9
mov	eax, [ebp+complement]
mov	[ebp+num_jumps*4+future_jumps],	eax
inc	num_jumps
mov	byte ptr [pattern+pattern_offset+4], 0
mov	esi, [ebp+var_9C8]
mov	byte ptr [pattern+esi],	0
add	pattern_offset,	6
mov	[ebp+var_9EC], ebx
mov	eax, [ebp+ad]
mov	[ebp+eax*4+starts], ebx
mov	ebx, [ebp+starts_base]
mov	[ebp+p], ebx
jmp	loc_641C39F4
			
cmp	[ebp+beginning_context], 0
jnz	loc_641C398B
mov	eax, [ebp+gethex_value_0]
add	eax, [ebp+starts_base]
mov	eax, [ebp+eax*4+starts]
mov	[ebp+var_9EC], eax
cmp	eax, pattern_offset
jz	loc_641C462C
lea	eax, [pattern_offset+8]
cmp	eax, [ebp+alloc]
jge	loc_641C47DB
lea	eax, [pattern_offset-1]
mov	[ebp+p], eax
cmp	[ebp+var_9EC], eax
jg	short loc_641C4008
lea	eax, [pattern+pattern_offset]
mov	[ebp+ad], pattern
mov	esi, [ebp+var_9EC]
mov	dl, [eax-1]
mov	[eax+2], dl
dec	[ebp+p]
dec	eax
cmp	pattern_offset,	[ebp+p]
jle	short loc_641C3FE7
mov	edx, [ebp+ad]
mov	[ebp+var_9EC], pattern_offset
mov	pattern_offset,	[ebp+var_9EC]
add	esi, pattern
mov	[ebp+var_9E4], esi
mov	byte ptr [esi],	0Bh
mov	eax, [ebp+var_9EC]
not	eax
mov	[ebp+complement], eax
lea	eax, [pattern_offset+eax+4]
mov	[ebp+p], eax
mov	esi, [ebp+var_9EC]
lea	esi, [pattern+esi+1]
mov	[ebp+beginning_context], esi
mov	[esi], al
mov	eax, [ebp+var_9EC]
lea	eax, [pattern+eax+2]
mov	[ebp+var_9C8], eax
mov	esi, [ebp+p]
sar	esi, 8
mov	[ebp+p], esi
mov	al, byte ptr [ebp+p]
mov	esi, [ebp+var_9C8]
mov	[esi], al
lea	eax, [pattern_offset+3]
mov	[ebp+p], eax
mov	byte ptr [pattern+pattern_offset+3], 0Ah
mov	esi, eax
not	esi
mov	eax, [ebp+var_9EC]
lea	eax, [eax+esi-2]
mov	[ebp+ad], eax
mov	esi, [ebp+p]
mov	[pattern+esi+1], al
mov	eax, [ebp+ad]
sar	eax, 8
mov	[pattern+esi+2], al
lea	esi, [pattern_offset+6]
mov	[ebp+ad], esi
cmp	[ebp+op], 8
jz	loc_641C475D
mov	eax, [ebp+starts_base]
mov	[ebp+p], eax
mov	[ebp+var_9EC], esi
jmp	loc_641C39F4
			
cmp	[ebp+beginning_context], 0 
jnz	loc_641C398B
mov	eax, [ebp+gethex_value_0]
add	eax, [ebp+starts_base]
mov	eax, [ebp+eax*4+starts]
mov	[ebp+var_9EC], eax
cmp	eax, pattern_offset
jz	loc_641C462C
lea	eax, [pattern_offset+2]
cmp	eax, [ebp+alloc]
jge	loc_641C4828
lea	eax, [pattern_offset+3]
mov	[ebp+ad], eax
lea	eax, [pattern_offset-1]
cmp	[ebp+var_9EC], a
jg	short loc_641C414E
lea	pattern_offset,	[pattern+pattern_offset]
mov	[ebp+p], pattern
mov	esi, [ebp+var_9EC]
mov	dl, [ebx-1]
mov	[ebx+2], dl
dec	a
dec	ebx
cmp	pattern_offset,	a
jle	short loc_641C4136
mov	edx, [ebp+p]
mov	[ebp+var_9EC], pattern_offset
mov	ebx, [ebp+var_9EC]
mov	byte ptr [pattern+ebx],	0Bh
mov	a, ebx
not	eax
mov	pattern_offset,	[ebp+ad]
lea	eax, [esi+eax-2]
mov	[pattern+ebx+1], al
sar	disp, 8
mov	[pattern+ebx+2], al
mov	eax, [ebp+starts_base]
mov	[ebp+p], eax
mov	[ebp+var_9EC], esi
jmp	loc_641C39F4
			
mov	esi, [ebp+size]
cmp	[ebp+gethex_value], esi
jge	short store_opcode
mov	eax, ds:_regexp_syntax
mov	[ebp+p], eax
test	al, 2
jz	loc_641C463D
mov	eax, [ebp+regex]
mov	esi, [ebp+gethex_value]
cmp	byte ptr [eax+esi], 7Ch
setnz	al
test	al, al
jz	short store_opcode
			
test	byte ptr [ebp+p], 1
jz	loc_641C396C
mov	eax, [ebp+regex]
mov	esi, [ebp+gethex_value]
cmp	byte ptr [eax+esi], 29h
setnz	al
test	al, al
jnz	loc_641C398B
			
mov	esi, 2
jmp	loc_641C3B34
			
mov	esi, 1		
cmp	[ebp+beginning_context], 0
jnz	loc_641C3B34
jmp	loc_641C398B
			
mov	esi, 5		
jmp	loc_641C3B34
			
mov	esi, pattern_offset 
mov	eax, pattern
cmp	[ebp+starts_base], 0
jnz	parenthesis_error
test	num_jumps, num_jumps
jnz	loc_641C49DB
cmp	ebx, [ebp+alloc]
jl	loc_641C468C
add	[ebp+alloc], 101h
mov	num_jumps, [ebp+alloc]
mov	[esp+4], edi	
mov	[esp], pattern	
call	_realloc
mov	edx, eax
test	eax, eax
jnz	loc_641C468C
			
mov	num_jumps, [ebp+alloc]
mov	ebx, [ebp+bufp]
mov	[ebx+4], edi
mov	dword ptr [ebx], 0
mov	[ebx+8], pattern_offset
mov	pattern, offset	aOutOfMemory 
jmp	loc_641C437D
			
mov	esi, 13h
jmp	loc_641C3B34
align 10h
mov	edi, [ebp+ad]
mov	[ebp+ad], 0
mov	prev, 0FFFFFFFFh
cmp	pos, [ebp+size]
jge	loc_641C4361
mov	ebx, [ebp+regex]
mov	cl, [ebx+pos]
mov	ebx, [ebp+translate]
test	ebx, ebx
jz	short loc_641C42BA
movzx	ch_0, cl
mov	esi, [ebp+translate]
mov	cl, [esi+ch_0]
inc	pos
xor	esi, esi
cmp	cl, 5Dh
jnz	loc_641C3C68
test	firstchar, firstchar
jnz	loc_641C3C68
mov	pattern_offset,	[ebp+var_9C8]
mov	[ebp+gethex_value], pos
mov	pos, [ebp+var_9E4]
cmp	[ebp+ad], 0
jz	short loc_641C42F4
mov	prev, [ebp+p]
or	byte ptr [pattern+eax+5], 20h
cmp	[ebp+complement], 0
jz	short loc_641C430F
mov	prev, [ebp+beginning_context]
xor	firstchar, firstchar
not	byte ptr [eax+1]
inc	a
inc	eax
cmp	a, 20h
jnz	short loc_641C4305
mov	prev, [ebp+starts_base]
mov	[ebp+p], eax
mov	[ebp+var_9EC], pattern_offset
jmp	loc_641C39F4
align 4
cmp	prev, 0FFFFFFFFh
jz	short loc_641C4336
cmp	cl, 2Dh
jz	loc_641C43BA
mov	bl, cl
shr	bl, 3
movzx	ebx, bl
add	ebx, [ebp+p]
movzx	prev, cl
mov	ch_0, prev
and	ecx, 7
mov	esi, 1
shl	esi, cl
mov	ecx, esi
or	[pattern+ebx], cl
cmp	pos, [ebp+size]
jl	loc_641C429E
			
mov	ebx, [ebp+var_9C8]
			
mov	ch_0, [ebp+alloc]
mov	prev, [ebp+bufp]
mov	[eax+4], ecx
mov	[eax], pattern
mov	[eax+8], pattern_offset
mov	eax, offset aRegularExpress 
			
add	esp, 9FCh
pop	ebx
pop	firstchar
pop	num_jumps
leave
retn
cmp	pos, [ebp+size]
jge	short loc_641C4361
mov	ebx, [ebp+regex]
mov	cl, [ebx+pos]
inc	pos
lea	ebx, [ch_0-41h]
cmp	bl, 37h		
jbe	short loc_641C4404
			
cmp	[ebp+translate], 0 
jz	loc_641C3C7B
movzx	ch_0, cl
mov	firstchar, [ebp+translate]
mov	cl, [esi+ch_0]
jmp	loc_641C3C7B
mov	[ebp+ad], 1
jmp	loc_641C4295
add	[ebp+alloc], 101h
mov	eax, [ebp+alloc]
mov	[esp+4], eax	
mov	[esp], pattern	
mov	[ebp+var_9E8], cl
call	_realloc
mov	edx, eax
test	eax, eax
mov	cl, [ebp+var_9E8]
jnz	loc_641C3B40
mov	opcode,	pattern_offset
jmp	loc_641C4255
align 4
movzx	ebx, bl
jmp	ds:off_64250DEC[ebx*4] 
			
mov	dword ptr [esp], 100h 
call	_malloc
mov	edx, eax
test	eax, eax
jz	loc_641C46E2
mov	[ebp+alloc], 100h
jmp	loc_641C378C
call	_re_compile_initialize
jmp	loc_641C3756
mov	esi, [ebp+bufp]
mov	byte ptr [esi+16h], 1
lea	esi, [pattern_offset+1]
cmp	esi, [ebp+alloc]
jge	loc_641C46A9
mov	byte ptr [pattern+pattern_offset], 6
mov	al, byte ptr [ebp+next_register]
mov	[pattern+esi], al
inc	esi
mov	[ebp+var_9EC], esi
mov	eax, [ebp+next_register]
mov	esi, [ebp+num_open_registers]
mov	[ebp+esi*4+open_registers], eax
inc	esi
mov	[ebp+num_open_registers], esi
inc	eax
mov	[ebp+next_register], eax
jmp	loc_641C3E3F
add	eax, 106h
mov	[ebp+alloc], eax
mov	[esp+4], eax	
mov	[esp], pattern	
mov	[ebp+var_9E8], cl
call	_realloc
mov	edx, eax
test	eax, eax
mov	cl, [ebp+var_9E8]
jnz	loc_641C3EB0
mov	esi, pattern_offset
jmp	loc_641C4255
add	[ebp+alloc], 121h
mov	eax, [ebp+alloc]
mov	[esp+4], eax	
mov	[esp], pattern	
call	_realloc
mov	edx, eax
test	eax, eax
jnz	loc_641C3BBE
mov	esi, pattern_offset
jmp	loc_641C4255
			
cmp	[ebp+size], pos
jle	loc_641C4361
mov	firstchar, [ebp+regex]
movsx	ch_0, byte ptr [esi+pos]
lea	ebx, [ecx-30h]
cmp	ebx, 9
jbe	short loc_641C4512
lea	ebx, [ecx-61h]
cmp	ebx, 5
ja	loc_641C4814
lea	ebx, [ecx-57h]
			
mov	byte ptr [ebp+gethex_value], bl
lea	esi, [pos+1]
cmp	[ebp+size], pos
jle	loc_641C4361
mov	ebx, [ebp+regex]
movsx	ecx, byte ptr [ebx+edi+1]
lea	ebx, [ecx-30h]
cmp	ebx, 9
jbe	short loc_641C4543
lea	ebx, [ecx-61h]
cmp	ebx, 5
ja	loc_641C472C
lea	ebx, [ecx-57h]
			
lea	pos, [esi+1]
mov	cl, byte ptr [ebp+gethex_value]
shl	ecx, 4
add	ecx, ebx
jmp	loc_641C3C7B
			
mov	cl, 0Ah
jmp	loc_641C3C7B
			
mov	cl, 0Ch		
jmp	loc_641C3C7B
			
mov	cl, 8		
jmp	loc_641C3C7B
			
mov	cl, 7		
jmp	loc_641C3C7B
			
mov	cl, 9		
jmp	loc_641C3C7B
			
mov	cl, 0Dh		
jmp	loc_641C3C7B
			
mov	cl, 0Bh		
jmp	loc_641C3C7B
			
mov	ch_0, [ebp+alloc]
mov	eax, [ebp+bufp]
mov	[eax+4], ecx
mov	[eax], pattern
mov	[eax+8], pattern_offset
mov	eax, offset aBadlyPlacedPar 
jmp	loc_641C437D
mov	ch_0, [ebp+gethex_value]
cmp	[ebp+size], ecx
jle	ends_prematurely
mov	eax, [ebp+regex]
mov	esi, ecx
mov	cl, [eax+ecx]
inc	esi
mov	[ebp+gethex_value], esi
mov	[ebp+complement], 1
cmp	[ebp+translate], 0
jz	loc_641C3C3A
movzx	ch_0, cl
mov	esi, [ebp+translate]
mov	cl, [esi+ch_0]
jmp	loc_641C3C3A
			
mov	num_jumps, [ebp+var_9C8]
mov	eax, [ebp+ad]
mov	[ebp+gethex_value_0], eax
jmp	loc_641C389D
cmp	cl, 6Eh
jz	loc_641C4984
ja	short loc_641C466D
cmp	cl, 62h
jz	loc_641C492C
cmp	cl, 66h
jz	loc_641C49F7
cmp	cl, 61h
jnz	loc_641C3AFA
mov	cl, 7
jmp	loc_641C3806
			
mov	pattern_offset,	[ebp+starts_base]
mov	[ebp+p], ebx
jmp	loc_641C39F4
mov	eax, [ebp+gethex_value]
inc	eax
cmp	[ebp+size], eax
jle	loc_641C41BA
mov	eax, [ebp+regex]
mov	esi, [ebp+gethex_value]
cmp	byte ptr [eax+esi], 5Ch
jnz	loc_641C41BA
cmp	byte ptr [eax+esi+1], 7Ch
setnz	al
jmp	loc_641C41B6
cmp	cl, 74h
jz	loc_641C49C7
ja	loc_641C489C
cmp	cl, 72h
jnz	loc_641C3AFA
mov	cl, 0Dh
jmp	loc_641C3806
			
mov	byte ptr [edx+pattern_offset], 0
mov	ch_0, [ebp+alloc]
mov	pattern, [ebp+bufp]
mov	[eax+4], ecx
mov	[eax], pattern
inc	pattern_offset
mov	[eax+8], ebx
xor	eax, eax
jmp	loc_641C437D
add	[ebp+alloc], 102h
mov	eax, [ebp+alloc]
mov	[esp+4], eax	
mov	[esp], pattern	
mov	[ebp+var_9E8], cl
call	_realloc
mov	edx, eax
test	eax, eax
mov	cl, [ebp+var_9E8]
jnz	loc_641C4453
mov	esi, pattern_offset
jmp	loc_641C4255
mov	[ebp+alloc], 100h
xor	esi, esi
jmp	loc_641C4255
add	[ebp+alloc], 102h
mov	eax, [ebp+alloc]
mov	[esp+4], eax	
mov	[esp], pattern	
mov	[ebp+var_9E8], cl
call	_realloc
mov	edx, eax
test	eax, eax
mov	cl, [ebp+var_9E8]
jnz	loc_641C3D95
mov	esi, pattern_offset
jmp	loc_641C4255
lea	ebx, [ecx-41h]
cmp	ebx, 5
ja	short loc_641C473C
lea	ebx, [ecx-37h]
jmp	loc_641C4543
			
mov	ebx, [ebp+var_9C8]
			
mov	edi, [ebp+alloc]
mov	pos, [ebp+bufp]
mov	[esi+4], edi
mov	[esi], pattern
mov	[esi+8], pattern_offset
mov	prev, offset aBadHexadecimal 
jmp	loc_641C437D
lea	eax, [pattern_offset+5]
cmp	[ebp+var_9EC], a
jg	short loc_641C478F
lea	pattern_offset,	[pattern+pattern_offset]
mov	[ebp+p], pattern
mov	esi, [ebp+var_9EC]
mov	dl, [ebx+5]
mov	[ebx+8], dl
dec	a
dec	ebx
cmp	pattern_offset,	a
jle	short loc_641C4777
mov	edx, [ebp+p]
mov	[ebp+var_9EC], pattern_offset
mov	ebx, [ebp+var_9E4]
mov	byte ptr [ebx],	0Dh
mov	ebx, [ebp+var_9EC]
mov	pattern_offset,	[ebp+complement]
lea	a, [ebx+esi+4]
mov	esi, [ebp+beginning_context]
mov	[esi], al
sar	disp, 8
mov	ebx, [ebp+var_9C8]
mov	[ebx], al
mov	esi, [ebp+ad]
add	esi, 3
mov	[ebp+var_9EC], esi
mov	eax, [ebp+starts_base]
mov	[ebp+p], eax
jmp	loc_641C39F4
add	[ebp+alloc], 109h
mov	esi, [ebp+alloc]
mov	[esp+4], esi	
mov	[esp], pattern	
mov	[ebp+var_9E8], cl
call	_realloc
mov	edx, eax
test	eax, eax
mov	cl, [ebp+var_9E8]
jnz	loc_641C3FC7
mov	esi, pattern_offset
jmp	loc_641C4255
lea	ebx, [ecx-41h]
cmp	ebx, 5
ja	loc_641C473C
lea	ebx, [ecx-37h]
jmp	loc_641C4512
add	[ebp+alloc], 103h
mov	esi, [ebp+alloc]
mov	[esp+4], esi	
mov	[esp], pattern	
mov	[ebp+var_9E8], cl
call	_realloc
mov	edx, eax
test	eax, eax
mov	cl, [ebp+var_9E8]
jnz	loc_641C4113
mov	esi, pattern_offset
jmp	loc_641C4255
			
mov	ch_0, [ebp+alloc]
mov	eax, [ebp+bufp]
mov	[eax+4], ecx
mov	[eax], pattern
mov	[eax+8], pattern_offset
mov	eax, offset aBadMatchRegist 
jmp	loc_641C437D
cmp	cl, 54h
jz	loc_641C49C7
cmp	cl, 56h
jz	loc_641C498B
cmp	cl, 52h
jnz	loc_641C3AFA
jmp	loc_641C4685
cmp	cl, 76h
jz	loc_641C498B
cmp	cl, 78h
jnz	loc_641C3AFA
mov	edi, [ebp+gethex_value]
cmp	[ebp+size], edi
jle	ends_prematurely
mov	ch_0, [ebp+regex]
movsx	eax, byte ptr [ecx+edi]
lea	ecx, [eax-30h]
cmp	ecx, 9
jbe	short loc_641C48DB
lea	ecx, [eax-61h]
cmp	ecx, 5
ja	loc_641C49B3
lea	ecx, [eax-57h]
			
mov	byte ptr [ebp+gethex_value_0], cl
mov	esi, [ebp+gethex_value]
inc	pos
cmp	[ebp+size], pos
jle	ends_prematurely
mov	ecx, [ebp+regex]
mov	edi, [ebp+gethex_value]
movsx	eax, byte ptr [ecx+edi+1]
lea	ecx, [eax-30h]
cmp	ecx, 9
jbe	short loc_641C4912
lea	ecx, [eax-61h]
cmp	ecx, 5
ja	short loc_641C4973
lea	ecx, [eax-57h]
			
inc	pos
mov	[ebp+gethex_value], esi
mov	al, byte ptr [ebp+gethex_value_0]
shl	eax, 4
mov	edi, eax
lea	ecx, [edi+ecx]
jmp	loc_641C3806
			
mov	cl, 8
jmp	loc_641C3806
mov	eax, pattern
mov	esi, pattern_offset
jmp	loc_641C420E
mov	num_jumps, [ebp+alloc]
mov	esi, [ebp+bufp]
mov	[esi+4], edi
mov	[esi], pattern
mov	[esi+8], pattern_offset
mov	eax, offset aBadlyPlacedSpe 
jmp	loc_641C437D
mov	dword ptr [esp+8], 24Eh
mov	dword ptr [esp+4], offset aRegexpr_c 
mov	dword ptr [esp], offset	aCh0Ch9	
call	__assert
lea	ecx, [eax-41h]
cmp	ecx, 5
ja	hex_error
lea	ecx, [eax-37h]
jmp	short loc_641C4912
			
mov	cl, 0Ah
jmp	loc_641C3806
			
mov	cl, 0Bh
jmp	loc_641C3806
			
mov	esi, [ebp+var_9EC]
mov	num_jumps, [ebp+alloc]
mov	ebx, [ebp+bufp]
mov	[ebx+4], edi
mov	[ebx], pattern
mov	[ebx+8], pattern_offset
mov	eax, offset aRegularExpre_0 
jmp	loc_641C437D
lea	ecx, [eax-41h]
cmp	ecx, 5
ja	hex_error
lea	ecx, [eax-37h]
jmp	loc_641C48DB
			
mov	cl, 9
jmp	loc_641C3806
cmp	byte ptr [eax+esi+1], 29h
setnz	al
jmp	loc_641C41D7
mov	dword ptr [esp+8], 2D1h
mov	dword ptr [esp+4], offset aRegexpr_c 
mov	dword ptr [esp], offset	aNum_jumps0 
call	__assert
			
mov	cl, 0Ch
jmp	loc_641C3806
align 10h
public _regcomp
			
push	ebp
mov	ebp, esp
push	edi
push	esi
push	ebx
sub	esp, 2Ch
mov	ebx, [ebp+preg]
mov	esi, [ebp+regex]
mov	edx, [ebp+cflags]
xor	eax, eax
mov	ecx, 18h
mov	edi, ebx
rep stosb
and	syntax,	1
neg	syntax
and	syntax,	23h
mov	ds:_regexp_syntax, syntax
mov	[ebp+var_1C], al
call	_re_compile_initialize
mov	ecx, 0FFFFFFFFh
mov	al, [ebp+var_1C]
mov	preg_0,	esi
repne scasb
not	ecx
dec	ecx
mov	[esp+8], ebx	
mov	[esp+4], ecx	
mov	[esp], esi	
call	_re_compile_pattern
cmp	eax, 1
sbb	eax, eax
not	eax
add	esp, 2Ch
pop	preg_0
pop	regex_0
pop	edi
leave
retn
align 4
public _re_comp
push	ebp
mov	ebp, esp
push	edi
push	ebx
sub	esp, 10h
mov	ebx, [ebp+s]
test	ebx, ebx
jz	short loc_641C4AA8
mov	ecx, ds:_re_comp_buf.buffer
test	ecx, ecx
jz	short loc_641C4AC0
xor	eax, eax
mov	ecx, 0FFFFFFFFh
mov	edi, s_0
repne scasb
not	ecx
dec	ecx
mov	dword ptr [esp+8], offset _re_comp_buf 
mov	[esp+4], ecx	
mov	[esp], ebx	
call	_re_compile_pattern
add	esp, 10h
pop	ebx
pop	edi
leave
retn
align 4
mov	s_0, ds:_re_comp_buf.buffer
test	ebx, ebx
jnz	short loc_641C4ABC
mov	eax, offset aOutOfMemory 
jmp	short loc_641C4A9F
align 4
xor	eax, eax
jmp	short loc_641C4A9F
mov	dword ptr [esp], 100h
call	_malloc
mov	ds:_re_comp_buf.fastmap, eax
mov	ds:_re_comp_buf.translate, 0
jmp	short loc_641C4A7D
align 10h
public _re_search_2
			
push	ebp
mov	ebp, esp
push	edi
push	esi
push	ebx
sub	esp, 4Ch
mov	edi, [ebp+pos]
mov	ecx, [ebp+size1]
test	ecx, ecx
js	loc_641C4EDA
mov	edx, [ebp+size2]
test	edx, edx
js	loc_641C4EDA
test	pos_0, pos_0
js	loc_641C4EDA
mov	eax, [ebp+mstop]
test	eax, eax
js	loc_641C4EDA
mov	eax, [ebp+range]
add	eax, pos_0
js	loc_641C4F12
mov	edx, [ebp+size2]
add	edx, [ebp+size1]
mov	[ebp+var_24], edx
cmp	eax, edx
jg	loc_641C4F12
cmp	pos_0, [ebp+mstop]
jg	loc_641C4EF6
mov	esi, [ebp+bufp]
mov	ebx, [esi+0Ch]
mov	eax, [esi+10h]
mov	[ebp+var_1C], eax
test	fastmap, fastmap
jz	short loc_641C4B54
cmp	byte ptr [esi+14h], 0
jz	loc_641C4E6B
			
mov	eax, [ebp+bufp]
mov	al, [eax+17h]
mov	[ebp+anchor], al
mov	edx, [ebp+bufp]
cmp	byte ptr [edx+15h], 1
jz	loc_641C4E38
mov	esi, [ebp+range]
test	esi, esi
js	loc_641C4E45
mov	[ebp+dir], 1
cmp	[ebp+anchor], 2
jz	loc_641C4E23
mov	esi, [ebp+string1]
add	esi, [ebp+size1]
mov	[ebp+var_2C], esi
mov	esi, [ebp+var_1C]
xchg	ax, ax
test	fastmap, fastmap
jz	short loc_641C4C04
cmp	[ebp+dir], 1
jz	loc_641C4D14
cmp	[ebp+size1], pos_0
jl	loc_641C4C7C
mov	edx, [ebp+string1]
add	edx, pos_0
mov	[ebp+var_1C], edx
mov	partend, pos_0
sub	ecx, [ebp+range]
add	ecx, [ebp+string1]
test	translate, translate
jz	loc_641C4C9D
cmp	partstart, [ebp+var_1C]
jz	loc_641C4E1C
mov	edx, [ebp+var_1C]
movzx	ret, byte ptr [edx]
movzx	eax, byte ptr [translate+eax]
cmp	byte ptr [fastmap+eax],	0
jnz	loc_641C4E1C
mov	eax, edx
jmp	short loc_641C4BF5
movzx	edx, byte ptr [text]
movzx	edx, byte ptr [translate+edx]
cmp	byte ptr [fastmap+edx],	0
jnz	loc_641C4D0C
dec	text
cmp	partstart, text
jnz	short loc_641C4BE4
mov	text, partstart
sub	eax, [ebp+var_1C]
			
add	pos_0, eax
add	[ebp+range], eax
			
cmp	[ebp+anchor], 1
jz	loc_641C4CD0
test	pos_0, pos_0
js	loc_641C4EBE
cmp	pos_0, [ebp+var_24]
jg	loc_641C4EBE
mov	ret, [ebp+mstop]
mov	[esp+1Ch], eax	
mov	edx, [ebp+regs]
mov	[esp+18h], edx	
mov	[esp+14h], pos_0 
mov	eax, [ebp+size2]
mov	[esp+10h], eax	
mov	edx, [ebp+string2]
mov	[esp+0Ch], edx	
mov	eax, [ebp+size1]
mov	[esp+8], eax	
mov	edx, [ebp+string1]
mov	[esp+4], edx	
mov	eax, [ebp+bufp]
mov	[esp], eax	
call	_re_match_2
test	eax, eax
jns	loc_641C4D02
cmp	ret, 0FFFFFFFEh
jz	loc_641C4E5C
dec	[ebp+range]
js	loc_641C4CFD
add	pos_0, [ebp+dir]
jmp	loc_641C4B94
align 4
mov	partend, pos_0
sub	ecx, [ebp+size1]
mov	ret, [ebp+string2]
add	eax, ecx
mov	[ebp+var_1C], eax
cmp	[ebp+range], ecx
jl	loc_641C4DA0
mov	ecx, [ebp+string2]
test	translate, translate
jnz	loc_641C4BC3
cmp	partstart, [ebp+var_1C]
jz	loc_641C4E1C
mov	edx, [ebp+var_1C]
movzx	ret, byte ptr [edx]
cmp	byte ptr [fastmap+eax],	0
jnz	loc_641C4E1C
mov	eax, [ebp+var_1C]
jmp	short loc_641C4CC5
align 4
movzx	edx, byte ptr [text]
cmp	byte ptr [fastmap+edx],	0
jnz	short loc_641C4D0C
dec	text
cmp	partstart, text
jnz	short loc_641C4CBC
jmp	loc_641C4BFA
align 10h
test	pos_0, pos_0
jle	loc_641C4C0E
cmp	pos_0, [ebp+size1]
jg	loc_641C4DFC
mov	ret, [ebp+string1]
cmp	byte ptr [eax+pos_0-1],	0Ah
setnz	al
test	al, al
jz	loc_641C4C16
dec	[ebp+range]
jns	loc_641C4C72
			
mov	pos_0, 0FFFFFFFFh
mov	ret, pos_0
add	esp, 4Ch
pop	fastmap
pop	translate
pop	pos_0
leave
retn
			
sub	text, [ebp+var_1C]
jmp	loc_641C4BFF
cmp	[ebp+size1], pos_0
jle	loc_641C4DAC
mov	ret, [ebp+string1]
add	eax, pos_0
mov	[ebp+var_1C], eax
mov	edx, [ebp+range]
lea	partend, [pos_0+edx]
cmp	[ebp+size1], ecx
jge	loc_641C4E14
mov	ecx, [ebp+var_2C]
test	translate, translate
jz	loc_641C4DCB
cmp	partend, [ebp+var_1C]
jz	loc_641C4E54
mov	edx, [ebp+var_1C]
movzx	eax, byte ptr [edx]
movzx	eax, byte ptr [translate+eax]
cmp	byte ptr [fastmap+eax],	0
jnz	loc_641C4E54
mov	eax, edx
jmp	short loc_641C4D6D
movzx	edx, byte ptr [text]
movzx	edx, byte ptr [translate+edx]
cmp	byte ptr [fastmap+edx],	0
jnz	short loc_641C4D72
inc	text
cmp	partend, text
jnz	short loc_641C4D60
			
sub	pos_0, [ebp+var_1C]
add	edi, text
mov	edx, [ebp+var_1C]
add	[ebp+range], edx
sub	[ebp+range], text
cmp	[ebp+var_24], pos_0
jnz	loc_641C4C04
mov	text, [ebp+bufp]
cmp	byte ptr [eax+15h], 0
jz	loc_641C4CFD
mov	pos_0, [ebp+var_24]
jmp	loc_641C4C04
align 10h
sub	ecx, [ebp+range]
add	ecx, [ebp+string2]
jmp	loc_641C4BBB
align 4
mov	ret, pos_0
sub	eax, [ebp+size1]
add	eax, [ebp+string2]
mov	[ebp+var_1C], eax
mov	eax, [ebp+range]
lea	partend, [pos_0+eax]
sub	ecx, [ebp+size1]
add	ecx, [ebp+string2]
test	translate, translate
jnz	loc_641C4D3F
cmp	partend, [ebp+var_1C]
jz	loc_641C4E54
mov	edx, [ebp+var_1C]
movzx	eax, byte ptr [edx]
cmp	byte ptr [fastmap+eax],	0
jnz	short loc_641C4E54
mov	eax, [ebp+var_1C]
jmp	short loc_641C4DF1
align 4
movzx	edx, byte ptr [text]
cmp	byte ptr [fastmap+edx],	0
jnz	short loc_641C4D72
inc	text
cmp	partend, text
jnz	short loc_641C4DE8
jmp	loc_641C4D72
align 4
mov	ret, pos_0
sub	eax, [ebp+size1]
mov	edx, [ebp+string2]
cmp	byte ptr [edx+eax-1], 0Ah
setnz	al
jmp	loc_641C4CEC
align 4
add	ecx, [ebp+string1]
jmp	loc_641C4D37
			
xor	ret, ret
jmp	loc_641C4BFF
test	pos_0, pos_0
jnz	loc_641C4CFD
mov	[ebp+range], 0
jmp	loc_641C4B86
align 4
xor	fastmap, fastmap
mov	esi, [ebp+range]
test	esi, esi
jns	loc_641C4B75
neg	[ebp+range]
mov	[ebp+dir], 0FFFFFFFFh
jmp	loc_641C4B7C
			
mov	eax, [ebp+var_1C]
jmp	loc_641C4D72
mov	pos_0, 0FFFFFFFEh
mov	ret, pos_0
add	esp, 4Ch
pop	fastmap
pop	translate
pop	pos_0
leave
retn
mov	edx, [esi+8]
test	edx, edx
jle	loc_641C4F2E
mov	[esp+4], fastmap 
mov	eax, [ebp+bufp]
add	eax, 15h
mov	[esp], eax	
xor	ecx, ecx	
mov	esi, [ebp+bufp]
mov	eax, [esi]	
call	_re_do_compile_fastmap
test	eax, eax
jz	loc_641C4B54
mov	eax, [esi]
mov	al, [eax]
cmp	al, 1
jz	short loc_641C4EB8
cmp	al, 0Eh
setz	al
shl	eax, 1
mov	edx, [ebp+bufp]
mov	[edx+17h], al
mov	esi, [ebp+bufp]
mov	byte ptr [esi+14h], 1
jmp	loc_641C4B54
mov	byte ptr [esi+17h], 1
jmp	short loc_641C4EAC
			
mov	dword ptr [esp+8], 5CFh
mov	dword ptr [esp+4], offset aRegexpr_c 
mov	dword ptr [esp], offset	aPos0PosSize1Si	
call	__assert
			
mov	dword ptr [esp+8], 572h	
mov	dword ptr [esp+4], offset aRegexpr_c 
mov	dword ptr [esp], offset	aSize10Size20Po	
call	__assert
mov	dword ptr [esp+8], 574h	
mov	dword ptr [esp+4], offset aRegexpr_c 
mov	dword ptr [esp], offset	aPosMstop 
call	__assert
			
mov	dword ptr [esp+8], 573h	
mov	dword ptr [esp+4], offset aRegexpr_c 
mov	dword ptr [esp], offset	aPosRange0PosRa	
call	__assert
mov	dword ptr [esp+8], 37Eh
mov	dword ptr [esp+4], offset aRegexpr_c 
mov	dword ptr [esp], offset	aBufpUsed0 
call	__assert
align 4
public _re_search
push	ebp
mov	ebp, esp
sub	esp, 38h
mov	eax, [ebp+size]
mov	[esp+20h], eax	
mov	edx, [ebp+regs]
mov	[esp+1Ch], edx	
mov	edx, [ebp+range]
mov	[esp+18h], edx	
mov	edx, [ebp+startpos]
mov	[esp+14h], edx	
mov	dword ptr [esp+10h], 0 
mov	dword ptr [esp+0Ch], 0 
mov	[esp+8], eax	
mov	eax, [ebp+string]
mov	[esp+4], eax	
mov	eax, [ebp+bufp]
mov	[esp], eax	
call	_re_search_2
leave
retn
align 4
public _re_exec
push	ebp
mov	ebp, esp
push	edi
sub	esp, 34h
mov	edx, [ebp+s]
mov	edi, edx
xor	eax, eax
mov	ecx, 0FFFFFFFFh
repne scasb
not	ecx
dec	ecx
mov	[esp+20h], ecx	
mov	dword ptr [esp+1Ch], 0 
mov	[esp+18h], ecx	
mov	dword ptr [esp+14h], 0 
mov	dword ptr [esp+10h], 0 
mov	dword ptr [esp+0Ch], 0 
mov	[esp+8], ecx	
mov	[esp+4], edx	
mov	dword ptr [esp], offset	_re_comp_buf 
call	_re_search_2
not	eax
shr	eax, 1Fh
add	esp, 34h
pop	edi
leave
retn
align 4
public _regexec
			
push	ebp
mov	ebp, esp
push	edi
sub	esp, 34h
mov	edx, [ebp+string]
xor	eax, eax
mov	ecx, 0FFFFFFFFh
mov	edi, edx
repne scasb
not	ecx
dec	ecx
mov	[esp+20h], ecx	
mov	dword ptr [esp+1Ch], 0 
mov	[esp+18h], ecx	
mov	dword ptr [esp+14h], 0 
mov	dword ptr [esp+10h], 0 
mov	dword ptr [esp+0Ch], 0 
mov	[esp+8], ecx	
mov	[esp+4], edx	
mov	eax, [ebp+preg]
mov	[esp], eax	
call	_re_search_2
test	eax, eax
jle	short loc_641C5051
xor	ret, ret
add	esp, 34h
pop	edi
leave
retn
align 4
public _stringprep_4i
			
push	ebp
mov	ebp, esp
push	edi
push	esi
push	ebx
sub	esp, 5Ch
mov	ebx, [ebp+ucs4]
mov	eax, [ebp+len]
mov	eax, [eax]
mov	[ebp+var_24], eax
mov	ecx, [ebp+profile]
mov	edx, [ecx]
test	edx, edx
jz	loc_641C5139
add	ecx, 0Ch
mov	[ebp+var_3C], ecx
mov	[ebp+var_2C], ecx
mov	eax, [ebp+profile]
mov	ecx, [ebp+flags]
and	ecx, 4
mov	[ebp+var_48], ecx
mov	ecx, [ebp+flags]
and	ecx, 1
mov	[ebp+var_4C], ecx
cmp	edx, 8
jbe	short loc_641C50A9
			
mov	eax, 65h	
			
add	esp, 5Ch
pop	ebx
pop	q
pop	edi
leave
retn
jmp	ds:off_64263520[edx*4]
			
mov	profile_0, [profile_0+4] 
test	eax, 7FFFFFFFh
jnz	loc_641C556E
test	[ebp+flags], eax
jz	loc_641C5542
			
cmp	[ebp+var_4C], 0
jz	short loc_641C50D5
test	eax, eax
jz	loc_641C5591
mov	ecx, [ebp+var_24]
mov	[esp+4], ecx	
mov	[esp], ucs4_0	
call	_stringprep_ucs4_nfkc_normalize
test	eax, eax
jz	loc_641C55BB
mov	[ebp+var_24], 0
xor	ecx, ecx
cmp	dword ptr [q], 0
jz	short loc_641C510E
xor	edx, edx
inc	ucs4len
lea	ecx, ds:0[ucs4len*4]
mov	edi, [q+ucs4len*4]
test	edi, edi
jnz	short loc_641C50FC
mov	[ebp+var_24], ucs4len
mov	ucs4len, [ebp+var_24]
cmp	[ebp+maxucs4len], edx
jbe	loc_641C55A9
mov	edi, ucs4_0
mov	esi, q
rep movsb
mov	[esp], eax	
call	_free
			
mov	eax, [ebp+var_2C]
mov	edx, [profile_0]
add	[ebp+var_2C], 0Ch
test	edx, edx
jnz	loc_641C5097
mov	ecx, [ebp+var_24]
mov	edx, [ebp+len]
mov	[edx], ecx
xor	profile_0, profile_0
jmp	loc_641C50A1
			
mov	profile_0, [profile_0+8]
mov	[ebp+var_1C], eax
cmp	[ebp+var_24], 0
jz	short loc_641C5128 
xor	edi, edi
mov	ecx, [ucs4_0+edi*4]
mov	edx, [ebp+var_1C]
jmp	short loc_641C5178
align 10h
cmp	ecx, eax
jb	short loc_641C5175
mov	q, [edx+4]
test	esi, esi
jz	short loc_641C516D
mov	eax, esi
			
cmp	ecx, eax
jbe	loc_641C554F
add	edx, 18h
mov	eax, [edx]
test	eax, eax
jnz	short loc_641C5160
mov	eax, [edx+4]
test	eax, eax
jnz	short loc_641C516D
inc	edi
cmp	[ebp+var_24], edi
ja	short loc_641C5156
jmp	short loc_641C5128 
			
mov	edx, [profile_0+4]
test	edx, 7FFFFFFFh
jnz	loc_641C557C
test	[ebp+flags], edx
jnz	short loc_641C51A5
test	edx, edx
jnz	short loc_641C5128 
			
cmp	[ebp+var_48], 0
jz	loc_641C5128	
mov	profile_0, [profile_0+8]
mov	[ebp+var_1C], eax
xor	edi, edi
cmp	[ebp+var_24], edi
jbe	loc_641C5128	
mov	ecx, [ucs4_0+edi*4]
mov	edx, [ebp+var_1C]
jmp	short loc_641C51E0
cmp	ecx, eax
jb	short loc_641C51DD
mov	q, [edx+4]
test	esi, esi
jz	short loc_641C51D5
mov	eax, esi
cmp	ecx, eax
jbe	loc_641C5598
add	edx, 18h
mov	eax, [edx]
test	eax, eax
jnz	short loc_641C51C8
mov	q, [edx+4]
test	esi, esi
jnz	short loc_641C51CC
inc	edi
jmp	short loc_641C51B7
			
mov	edx, [ebp+profile]
mov	profile_0, [edx]
test	eax, eax
jz	loc_641C509C	
mov	edx, [ebp+var_3C]
mov	[ebp+var_1C], edx
mov	edx, [ebp+profile]
mov	[ebp+contains_l], 0FFFFFFFFh
mov	[ebp+contains_ral], 0FFFFFFFFh
mov	[ebp+done_l], 0
mov	[ebp+done_ral],	0
mov	[ebp+done_prohibited], 0
mov	[ebp+j], 0
jmp	short loc_641C5254
cmp	eax, 7
jz	loc_641C54AF
cmp	eax, 8
jz	loc_641C5461
			
inc	[ebp+j]
mov	edx, [ebp+var_1C]
mov	eax, [profile_0]
add	[ebp+var_1C], 0Ch
test	eax, eax
jz	short loc_641C52B2
			
cmp	eax, 6
jnz	short loc_641C5232
mov	profile_0, [profile_0+8]
mov	[ebp+var_20], edx
mov	eax, [ebp+var_24]
test	eax, eax
jz	short loc_641C529B
xor	edi, edi
mov	ecx, [ucs4_0+edi*4]
mov	edx, [ebp+var_20]
jmp	short loc_641C5288
cmp	ecx, eax
jb	short loc_641C5285
mov	q, [edx+4]
test	esi, esi
jz	short loc_641C527D
mov	eax, esi
			
cmp	ecx, eax
jbe	loc_641C5450
add	edx, 18h
mov	eax, [edx]
test	eax, eax
jnz	short loc_641C5270
mov	eax, [edx+4]
test	eax, eax
jnz	short loc_641C527D
inc	edi
cmp	[ebp+var_24], edi
ja	short loc_641C5268
			
mov	[ebp+done_prohibited], 1
inc	[ebp+j]
mov	edx, [ebp+var_1C]
mov	eax, [profile_0]
add	[ebp+var_1C], 0Ch
test	eax, eax
jnz	short loc_641C5254
cmp	[ebp+done_prohibited], 0
jz	loc_641C509C	
cmp	[ebp+done_ral],	0
jz	loc_641C509C	
cmp	[ebp+done_l], 0
jz	loc_641C509C	
cmp	[ebp+contains_ral], 0FFFFFFFFh
jz	loc_641C5128	
cmp	[ebp+contains_l], 0FFFFFFFFh
jnz	loc_641C558A
mov	q, [ucs4_0]
imul	eax, [ebp+contains_ral], 0Ch
mov	ecx, [ebp+profile]
mov	profile_0, [eax+ecx+8]
mov	ecx, edx
jmp	short loc_641C52FB
align 4
			
add	ecx, 18h
mov	eax, [ecx]
test	eax, eax
jz	loc_641C5525
cmp	esi, eax
jb	short loc_641C52F8
mov	edi, [ecx+4]
test	edi, edi
jz	short loc_641C5312
mov	eax, edi
			
cmp	esi, eax
ja	short loc_641C52F8
mov	eax, [ebp+var_24]
mov	ecx, [ucs4_0+eax*4-4]
jmp	short loc_641C5338
align 10h
cmp	ecx, eax
jb	short loc_641C5335
mov	esi, [edx+4]
test	esi, esi
jz	short loc_641C532D
mov	eax, esi
			
cmp	ecx, eax
jbe	loc_641C5128	
add	edx, 18h
mov	eax, [edx]
test	eax, eax
jnz	short loc_641C5320
mov	eax, [edx+4]
test	eax, eax
jnz	short loc_641C532D
mov	eax, 4
jmp	loc_641C50A1
			
mov	edx, [profile_0+4]
test	edx, 7FFFFFFFh
jnz	loc_641C5560
test	[ebp+flags], edx
jz	loc_641C5535
			
mov	profile_0, [profile_0+8]
mov	[ebp+var_20], eax
mov	[ebp+var_1C], ucs4_0
mov	edi, [ebp+var_24]
test	edi, edi
jz	short loc_641C53B3
xor	ecx, ecx
lea	edi, ds:0[ecx*4]
mov	eax, [ebp+var_1C]
mov	edx, [eax+ecx*4]
mov	ebx, [ebp+var_20]
jmp	short loc_641C53A0
align 4
cmp	edx, eax
jb	short loc_641C539D
mov	q, [ebx+4]
test	esi, esi
jz	short loc_641C5399
mov	eax, esi
cmp	edx, eax
jbe	short loc_641C53BC
add	ebx, 18h
mov	eax, [ebx]
test	eax, eax
jnz	short loc_641C538C
mov	q, [ebx+4]
test	esi, esi
jnz	short loc_641C5390
inc	ecx
cmp	[ebp+var_24], ecx
ja	short loc_641C5379
			
mov	ebx, [ebp+var_1C]
jmp	loc_641C5128	
align 4
cmp	ecx, 0FFFFFFFFh
jz	short loc_641C53B3
mov	esi, 4
lea	eax, [esi-1]
mov	edx, [ebx+eax*4+8]
test	edx, edx
jnz	short loc_641C53E2
test	eax, eax
jz	short loc_641C5434
mov	esi, eax
lea	eax, [esi-1]
mov	edx, [ebx+eax*4+8]
test	edx, edx
jz	short loc_641C53D1
add	eax, [ebp+var_24]
mov	[ebp+j], eax
cmp	[ebp+maxucs4len], eax
jbe	short loc_641C5446
mov	eax, [ebp+var_24]
sub	eax, ecx
lea	eax, ds:0FFFFFFFCh[eax*4]
mov	[esp+8], eax	
mov	edx, [ebp+var_1C]
lea	eax, [edx+ecx*4+4]
mov	[esp+4], eax	
lea	ecx, [esi+ecx]
lea	eax, [edx+ecx*4]
mov	[esp], eax	
call	_memmove
mov	eax, [ebp+var_1C]
add	eax, edi
lea	ecx, ds:0[esi*4]
lea	esi, [ebx+8]
mov	edi, eax
rep movsb
mov	ecx, [ebp+j]
mov	[ebp+var_24], ecx
jmp	loc_641C5370
xor	esi, esi
mov	eax, 0FFFFFFFFh
add	eax, [ebp+var_24]
mov	[ebp+j], eax
cmp	[ebp+maxucs4len], eax
ja	short loc_641C53ED
mov	eax, 64h
jmp	loc_641C50A1
inc	edi
jz	loc_641C529B
mov	eax, 5
jmp	loc_641C50A1
mov	profile_0, [profile_0+8]
mov	[ebp+var_20], edx
cmp	[ebp+var_24], 0
jz	short loc_641C54A3
xor	edi, edi
mov	ecx, [ucs4_0+edi*4]
mov	edx, [ebp+var_20]
jmp	short loc_641C5490
align 4
cmp	ecx, eax
jb	short loc_641C548D
mov	q, [edx+4]
test	esi, esi
jz	short loc_641C5485
mov	eax, esi
			
cmp	ecx, eax
jbe	loc_641C5510
add	edx, 18h
mov	eax, [edx]
test	eax, eax
jnz	short loc_641C5478
mov	eax, [edx+4]
test	eax, eax
jnz	short loc_641C5485
inc	edi
cmp	[ebp+var_24], edi
ja	short loc_641C546F
			
mov	[ebp+done_l], 1
jmp	loc_641C5244
mov	profile_0, [profile_0+8]
mov	[ebp+var_20], edx
cmp	[ebp+var_24], 0
jz	short loc_641C54EF
xor	edi, edi
mov	ecx, [ucs4_0+edi*4]
mov	edx, [ebp+var_20]
jmp	short loc_641C54DC
align 4
cmp	ecx, eax
jb	short loc_641C54D9
mov	q, [edx+4]
test	esi, esi
jz	short loc_641C54D5
mov	eax, esi
			
cmp	ecx, eax
jbe	short loc_641C54FB
add	edx, 18h
mov	eax, [edx]
test	eax, eax
jnz	short loc_641C54C8
mov	eax, [edx+4]
test	eax, eax
jnz	short loc_641C54D5
inc	edi
cmp	[ebp+var_24], edi
ja	short loc_641C54BD
			
mov	[ebp+done_ral],	1
jmp	loc_641C5244
inc	edi
jz	short loc_641C54EF
mov	ecx, [ebp+j]
mov	[ebp+contains_ral], ecx
mov	[ebp+done_ral],	1
jmp	loc_641C5244
inc	edi
jz	short loc_641C54A3
mov	eax, [ebp+j]
mov	[ebp+contains_l], eax
mov	[ebp+done_l], 1
jmp	loc_641C5244
mov	eax, [ecx+4]
test	eax, eax
jnz	loc_641C5312
jmp	loc_641C5345
test	edx, edx
jnz	loc_641C5128	
jmp	loc_641C5367
test	eax, eax
jnz	loc_641C5128	
jmp	loc_641C50C7
inc	edi
jz	loc_641C5128	
mov	eax, 2
jmp	loc_641C50A1
test	[ebp+flags], edx
jnz	loc_641C5128	
jmp	loc_641C5367
test	[ebp+flags], eax
jnz	loc_641C5128	
jmp	loc_641C50C7
test	[ebp+flags], edx
jnz	loc_641C5128	
jmp	loc_641C51A5
mov	al, 3
jmp	loc_641C50A1
mov	al, 66h
jmp	loc_641C50A1
inc	edi
jz	loc_641C5128	
mov	eax, 1
jmp	loc_641C50A1
mov	[esp], q
call	_free
mov	eax, 64h
jmp	loc_641C50A1
mov	al, 0C8h
jmp	loc_641C50A1
align 4
public _stringprep
			
push	ebp
mov	ebp, esp
push	edi
push	esi
push	ebx
sub	esp, 4Ch
mov	[ebp+adducs4len], 32h
xor	ebx, ebx
lea	edi, [ebp+ucs4len]
jmp	short loc_641C55E0
align 4
add	[ebp+adducs4len], 32h
test	ucs4, ucs4
jz	short loc_641C55EC
mov	[esp], ucs4	
call	_free
mov	[esp+8], edi
mov	dword ptr [esp+4], 0FFFFFFFFh 
mov	rc, [ebp+in]
mov	[esp], eax	
call	_stringprep_utf8_to_ucs4
mov	edx, eax
mov	maxucs4len, [ebp+adducs4len]
add	maxucs4len, [ebp+ucs4len]
lea	eax, ds:0[maxucs4len*4]
mov	[esp+4], eax	
mov	[esp], ucs4	
mov	[ebp+var_30], ucs4
call	_realloc
mov	ebx, eax
test	eax, eax
mov	edx, [ebp+var_30]
jz	loc_641C56B4
mov	eax, [ebp+profile]
mov	[esp+10h], eax	
mov	eax, [ebp+flags]
mov	[esp+0Ch], eax	
mov	[esp+8], maxucs4len 
mov	[esp+4], edi	
mov	[esp], ebx	
call	_stringprep_4i
cmp	eax, 64h
jz	short loc_641C55DC
mov	maxucs4len, rc
test	rc, rc
jnz	short loc_641C56CC
mov	dword ptr [esp+0Ch], 0 
mov	dword ptr [esp+8], 0 
mov	rc, [ebp+ucs4len]
mov	[esp+4], eax	
mov	[esp], ebx	
call	_stringprep_ucs4_to_utf8
mov	[esp], ebx	
mov	[ebp+var_30], eax
call	_free
mov	edx, [ebp+var_30]
test	edx, edx
jz	short loc_641C56DE
xor	eax, eax
mov	ecx, 0FFFFFFFFh
mov	edi, utf8
repne scasb
not	ecx
dec	ecx
cmp	ecx, [ebp+maxlen]
jb	short loc_641C56E8
mov	[esp], edx	
call	_free
mov	rc, 64h
mov	eax, rc
add	esp, 4Ch
pop	ebx
pop	rc
pop	edi
leave
retn
align 4
mov	[esp], edx	
call	_free
mov	maxucs4len, 0C9h
mov	eax, rc
add	esp, 4Ch
pop	ebx
pop	rc
pop	edi
leave
retn
align 4
mov	[esp], ebx	
call	_free
mov	eax, rc
add	esp, 4Ch
pop	ebx
pop	rc
pop	edi
leave
retn
mov	rc, 0C9h
jmp	short loc_641C56A8
align 4
mov	[esp+4], edx	
mov	eax, [ebp+in]
mov	[esp], eax	
mov	[ebp+var_30], utf8
call	_strcpy
mov	edx, [ebp+var_30]
mov	[esp], edx	
call	_free
mov	eax, rc
add	esp, 4Ch
pop	ebx
pop	rc
pop	edi
leave
retn
align 10h
public _stringprep_profile
push	ebp
mov	ebp, esp
mov	eax, 67h
leave
retn
align 4
public _stringprep_4zi
push	ebp
mov	ebp, esp
push	esi
push	ebx
sub	esp, 30h
mov	esi, [ebp+ucs4]
mov	ebx, [ebp+maxucs4len]
test	ebx, ebx
jz	short loc_641C578D
mov	ecx, [ucs4_0]
test	ecx, ecx
jz	short loc_641C578D
xor	eax, eax
jmp	short loc_641C573F
mov	edx, [ucs4_0+ucs4len*4]
test	edx, edx
jz	short loc_641C5744
inc	ucs4len
cmp	maxucs4len_0, ucs4len
ja	short loc_641C5738
			
mov	[ebp+len], ucs4len
mov	ucs4len, [ebp+profile]
mov	[esp+10h], eax	
mov	eax, [ebp+flags]
mov	[esp+0Ch], eax	
mov	[esp+8], maxucs4len_0 
lea	eax, [ebp+len]
mov	[esp+4], eax	
mov	[esp], ucs4_0	
call	_stringprep_4i
test	eax, eax
jnz	short loc_641C577A
mov	edx, [ebp+len]
cmp	maxucs4len_0, edx
jbe	short loc_641C5784
mov	dword ptr [ucs4_0+edx*4], 0
add	esp, 30h
pop	maxucs4len_0
pop	ucs4_0
leave
retn
align 4
mov	al, 64h
add	esp, 30h
pop	maxucs4len_0
pop	ucs4_0
leave
retn
			
xor	eax, eax
jmp	short loc_641C5744
align 4
public _silc_argument_get_arg_num
			
push	ebp
mov	ebp, esp
mov	eax, [ebp+payload]
test	eax, eax
jz	short locret_641C57A0
mov	payload_0, [payload_0]
leave
retn
align 4
public _silc_argument_get_first_arg
push	ebp
mov	ebp, esp
push	ebx
mov	edx, [ebp+payload]
mov	eax, [ebp+type]
mov	ebx, [ebp+ret_len]
test	edx, edx
jz	short loc_641C57F8
mov	dword ptr [payload_0+10h], 0
test	type_0,	type_0
jz	short loc_641C57F4
mov	ecx, [payload_0+0Ch]
mov	ecx, [ecx]
mov	[type_0], ecx
mov	ecx, [payload_0+10h]
lea	type_0,	ds:0[ecx*4]
test	ret_len_0, ret_len_0
jz	short loc_641C57E7
mov	ecx, [payload_0+8]
mov	eax, [ecx+eax]
mov	[ret_len_0], eax
mov	ecx, [payload_0+10h]
lea	eax, ds:0[ecx*4]
mov	ret_len_0, [payload_0+4]
mov	eax, [ebx+eax]
inc	ecx
mov	[payload_0+10h], ecx
pop	ebx
leave
retn
xor	ecx, ecx
jmp	short loc_641C57D1
xor	type_0,	type_0
pop	ret_len_0
leave
retn
align 10h
public _silc_argument_get_next_arg
push	ebp
mov	ebp, esp
push	esi
push	ebx
mov	edx, [ebp+payload]
mov	ebx, [ebp+type]
mov	eax, [ebp+ret_len]
test	edx, edx
jnz	short loc_641C5818
xor	ret_len_0, ret_len_0
pop	type_0
pop	esi
leave
retn
mov	ecx, [payload_0+10h]
cmp	ecx, [payload_0]
jnb	short loc_641C5812
test	type_0,	type_0
jz	short loc_641C582E
mov	esi, [payload_0+0Ch]
mov	ecx, [esi+ecx*4]
mov	[type_0], ecx
mov	ecx, [payload_0+10h]
test	ret_len_0, ret_len_0
jz	short loc_641C583D
mov	type_0,	[payload_0+8]
mov	ecx, [ebx+ecx*4]
mov	[ret_len_0], ecx
mov	ecx, [payload_0+10h]
mov	ret_len_0, [payload_0+4]
mov	eax, [eax+ecx*4]
inc	ecx
mov	[payload_0+10h], ecx
pop	ebx
pop	esi
leave
retn
align 4
public _silc_argument_get_arg_type
			
push	ebp
mov	ebp, esp
push	edi
push	esi
push	ebx
mov	edi, [ebp+payload]
mov	edx, [ebp+type]
test	edi, edi
jnz	short loc_641C5864
			
xor	i, i
pop	ebx
pop	esi
pop	payload_0
leave
retn
align 4
mov	ecx, [payload_0]
test	ecx, ecx
jz	short loc_641C585C
mov	ebx, [payload_0+0Ch]
cmp	[ebx], type_0
jz	short loc_641C588B
xor	eax, eax
jmp	short loc_641C5884
align 4
lea	esi, ds:0[i*4]
cmp	[ebx+i*4], type_0
jz	short loc_641C5890
inc	i
cmp	i, ecx
jb	short loc_641C5878
jmp	short loc_641C585C
xor	esi, esi
lea	esi, [esi+0]
mov	i, [ebp+ret_len]
test	eax, eax
jz	short loc_641C58A2
mov	eax, [payload_0+8]
mov	eax, [eax+esi]
mov	type_0,	[ebp+ret_len]
mov	[edx], eax
mov	eax, [payload_0+4]
mov	eax, [eax+esi]
pop	ebx
pop	esi
pop	payload_0
leave
retn
align 10h
public _silc_argument_payload_free
			
push	ebp
mov	ebp, esp
push	esi
push	ebx
sub	esp, 10h
mov	esi, [ebp+payload]
test	esi, esi
jz	short loc_641C5910
mov	edx, [payload_0]
test	edx, edx
jz	short loc_641C58E1
xor	eax, eax
xor	ebx, ebx
lea	payload_0, [payload_0+0]
mov	edx, [payload_0+4]
mov	eax, [edx+eax*4]
mov	[esp], eax	
call	_silc_free
inc	i
mov	eax, i
cmp	[payload_0], i
ja	short loc_641C58CC
mov	eax, [payload_0+4]
mov	[esp], eax	
call	_silc_free
mov	eax, [payload_0+8]
mov	[esp], eax	
call	_silc_free
mov	eax, [payload_0+0Ch]
mov	[esp], eax	
call	_silc_free
mov	[ebp+payload], payload_0
add	esp, 10h
pop	i
pop	payload_0
leave
jmp	_silc_free
add	esp, 10h
pop	ebx
pop	payload_0
leave
retn
align 4
public _silc_argument_list_free
push	ebp
mov	ebp, esp
push	edi
push	esi
push	ebx
sub	esp, 3Ch
mov	ebx, [ebp+list]
mov	edi, [ebp+dec_type]
test	ebx, ebx
jz	loc_641C5A93
mov	eax, [list_0]
mov	[list_0+8], eax
mov	dl, [list_0+10h]
and	edx, 0FFFFFFFDh
mov	[list_0+10h], dl
mov	dword ptr [list_0+18h],	0
mov	dword ptr [list_0+14h],	0
xor	eax, eax
mov	[list_0+18h], eax
mov	eax, [list_0+8]
test	eax, eax
jz	short loc_641C59A2
nop
test	dl, 2
jz	loc_641C5A38
movzx	ecx, word ptr [list_0+0Eh]
mov	ecx, [eax+ecx]
mov	[list_0+8], ecx
mov	[list_0+14h], eax
mov	dec, [eax]
test	dec, dec
jz	short loc_641C59A9
cmp	dec_type_0, 4	
ja	short loc_641C598A 
jmp	ds:off_6426354C[dec_type_0*4] 
			
mov	eax, [dec]	
mov	[esp], eax	
call	_silc_pkcs_public_key_free
			
mov	[esp], dec	
call	_silc_free
mov	eax, [list_0+14h]
mov	dl, [list_0+10h]
mov	[list_0+18h], eax
mov	eax, [list_0+8]
test	eax, eax
jnz	short loc_641C5958
mov	dword ptr [list_0+14h],	0
mov	ecx, [list_0]
mov	[list_0+8], ecx
and	edx, 0FFFFFFFDh
mov	[list_0+10h], dl
test	ecx, ecx
jz	short loc_641C5A07
test	byte ptr [list_0+10h], 2
jz	loc_641C5A44
movzx	eax, word ptr [list_0+0Eh]
mov	eax, [ecx+eax]
mov	[list_0+8], eax
mov	eax, [list_0]
test	eax, eax
jz	short loc_641C59EF
cmp	ecx, eax
jz	loc_641C5A9B
movzx	dec_type_0, word ptr [list_0+0Ch]
jmp	short loc_641C59E6
cmp	ecx, esi
jz	short loc_641C5A50
mov	eax, esi
lea	edx, [eax+edi]
mov	dec, [edx]
test	esi, esi
jnz	short loc_641C59E0
cmp	ecx, [list_0+4]
jz	loc_641C5A81
			
mov	[esp], ecx	
call	_silc_free
mov	ecx, [list_0+8]
test	ecx, ecx
jnz	short loc_641C59B8
mov	[ebp+list], list_0
add	esp, 3Ch
pop	list_0
pop	dec
pop	edi
leave
jmp	_silc_free
align 4
			
mov	eax, [dec]	
mov	[esp], eax	
call	_silc_free
jmp	loc_641C598A	
align 4
			
mov	eax, [dec]	
mov	[esp], eax	
call	_silc_attribute_payload_free
jmp	loc_641C598A	
align 4
movzx	ecx, word ptr [list_0+0Ch]
mov	ecx, [eax+ecx]
jmp	loc_641C5968
movzx	eax, word ptr [list_0+0Ch]
mov	eax, [ecx+eax]
jmp	loc_641C59C9
mov	[ebp+var_2C], edx
mov	dec, [ecx+edi]
mov	edx, [ebp+var_2C]
mov	[edx], esi
test	esi, esi
jz	short loc_641C5A6F
test	byte ptr [list_0+10h], 1
jz	short loc_641C5A6F
movzx	edi, word ptr [list_0+0Eh]
mov	edx, [ecx+edi]
mov	[esi+edi], edx
			
cmp	ecx, [list_0+8]
jz	short loc_641C5A89
sub	dword ptr [list_0+10h],	4
cmp	ecx, [list_0+4]
jnz	loc_641C59F8
mov	[list_0+4], eax
jmp	loc_641C59F8
mov	esi, [ebp+var_2C]
mov	edx, [esi]
mov	[list_0+8], edx
jmp	short loc_641C5A74
add	esp, 3Ch
pop	list_0
pop	esi
pop	dec_type_0
leave
retn
movzx	dec_type_0, word ptr [list_0+0Ch]
mov	[ebp+var_2C], list_0
xor	eax, eax
jmp	short loc_641C5A53
align 4
			
push	ebp
mov	ebp, esp
push	edi
push	esi
push	ebx
sub	esp, 5Ch
mov	ebx, data
mov	data, [ebp+ret_arg]
mov	esi, [ebp+ret_arg_alloc]
cmp	dec_type, 4	
ja	short loc_641C5B0C 
jmp	ds:off_64263560[dec_type*4] 
align 4
			
test	ret_arg_0, ret_arg_0 
jz	short loc_641C5AE6
mov	[esp+8], ret_arg_0 
mov	[esp+4], data_len 
mov	[esp], data	
mov	[ebp+var_4C], data_len
call	_silc_id_payload_parse_id
test	al, al
mov	edx, [ebp+var_4C]
jz	short loc_641C5B0C 
test	ret_arg_alloc_0, ret_arg_alloc_0
jz	loc_641C5C08
lea	edi, [ebp+id]
mov	[esp+8], edi	
mov	[esp+4], data_len 
mov	[esp], data	
call	_silc_id_payload_parse_id
test	al, al
jnz	loc_641C5C10
lea	ret_arg_alloc_0, [ret_arg_alloc_0+0]
			
xor	eax, eax	
			
add	esp, 5Ch
pop	data
pop	ret_arg_alloc_0
pop	edi
leave
retn
align 4
			
cmp	data_len, 4	
jnz	short loc_641C5B0C 
test	ret_arg_0, ret_arg_0
jz	short loc_641C5B41
movzx	data_len, byte ptr [data+3]
movzx	dec_type, byte ptr [data]
shl	ecx, 18h
or	edx, ecx
movzx	ecx, byte ptr [data+1]
shl	ecx, 10h
or	edx, ecx
movzx	ecx, byte ptr [data+2]
shl	ecx, 8
or	edx, ecx
mov	[ret_arg_0], edx
test	ret_arg_alloc_0, ret_arg_alloc_0
jz	loc_641C5C08
movzx	ret_arg_0, byte	ptr [data+3]
movzx	data_len, byte ptr [data]
shl	edx, 18h
or	eax, edx
movzx	edx, byte ptr [data+1]
shl	edx, 10h
or	eax, edx
movzx	edx, byte ptr [data+2]
shl	edx, 8
or	eax, edx
mov	[ebp+i], eax
mov	dword ptr [esp+4], 4 
lea	eax, [ebp+i]
mov	[esp], eax	
call	_silc_memdup
mov	[ret_arg_alloc_0], eax
mov	al, 1
jmp	short loc_641C5B0E
align 4
			
dec	data_len	
jnz	short loc_641C5B0C 
test	ret_arg_0, ret_arg_0
jz	short loc_641C5B91
cmp	byte ptr [data], 1
setz	byte ptr [ret_arg_0]
test	ret_arg_alloc_0, ret_arg_alloc_0
jz	short loc_641C5C08
cmp	byte ptr [data], 1
setz	byte ptr [ebp+public_key]
mov	dword ptr [esp+4], 1 
lea	ret_arg_0, [ebp+public_key]
mov	[esp], eax	
call	_silc_memdup
mov	[ret_arg_alloc_0], eax
mov	al, 1
jmp	loc_641C5B0E
			
test	ret_arg_alloc_0, ret_arg_alloc_0
jz	loc_641C5B0C	
lea	ret_arg_0, [ebp+public_key]
mov	[esp+8], eax	
mov	[esp+4], data_len 
mov	[esp], data	
call	_silc_public_key_payload_decode
test	al, al
jz	loc_641C5B0C	
mov	eax, [ebp+public_key]
mov	[ret_arg_alloc_0], eax
mov	al, 1
jmp	loc_641C5B0E
align 4
			
test	ret_arg_alloc_0, ret_arg_alloc_0 
jz	loc_641C5B0C	
mov	[esp+4], data_len 
mov	[esp], data	
call	_silc_attribute_payload_parse
mov	[ret_arg_alloc_0], eax
mov	al, 1
add	esp, 5Ch
pop	data
pop	ret_arg_alloc_0
pop	edi
leave
retn
			
mov	al, 1
jmp	loc_641C5B0E
align 10h
mov	dword ptr [esp+4], 20h 
mov	[esp], edi	
call	_silc_memdup
mov	[ret_arg_alloc_0], eax
mov	al, 1
jmp	loc_641C5B0E
align 4
public _silc_argument_payload_encode_one
push	ebp
mov	ebp, esp
push	edi
push	esi
push	ebx
sub	esp, 5Ch
mov	ebx, [ebp+args]
movzx	edx, word ptr [ebp+arg_len]
lea	esi, [edx+3]
test	ebx, ebx
jz	loc_641C5D1C
mov	eax, [args_0]
mov	[ebp+ptr], eax
mov	eax, [args_0+0Ch]
sub	eax, [ebp+ptr]
lea	ecx, [len+eax]
cmp	len, eax
jbe	loc_641C5D77
mov	edi, [args_0+4]
mov	[ebp+var_20], edi
mov	eax, [args_0+8]
mov	[ebp+var_1C], eax
mov	[esp+4], len	
mov	edi, [ebp+ptr]
mov	[esp], edi	
mov	[ebp+var_24], edx
mov	[ebp+var_28], len
call	_silc_realloc
test	eax, eax
mov	edx, [ebp+var_24]
mov	ecx, [ebp+var_28]
jz	loc_641C5D6B
mov	[args_0], eax
mov	edi, [ebp+var_20]
sub	edi, [ebp+ptr]
add	edi, eax
mov	[ebp+ptr], edi
mov	[args_0+4], edi
mov	edi, [ebp+var_1C]
sub	edi, [ebp+var_20]
mov	[ebp+var_1C], edi
mov	edi, [ebp+ptr]
add	edi, [ebp+var_1C]
mov	[args_0+8], edi
lea	ecx, [eax+ecx]
mov	[args_0+0Ch], len
			
mov	[buffer+4], edi
mov	ecx, [buffer+8]
mov	eax, [buffer+0Ch]
sub	eax, ecx
cmp	len, eax
ja	short loc_641C5CC9
lea	len, [ecx+len]
mov	[buffer+8], esi
mov	dword ptr [esp+20h], 1Dh
mov	[esp+1Ch], edx
mov	eax, [ebp+arg]
mov	[esp+18h], eax
mov	dword ptr [esp+14h], 1Bh
mov	eax, [ebp+arg_type]
mov	[esp+10h], eax
mov	dword ptr [esp+0Ch], 1
mov	eax, [ebp+arg_len]
mov	[esp+8], eax
mov	dword ptr [esp+4], 3
mov	[esp], buffer	
call	_silc_buffer_format
mov	eax, [buffer]
mov	[buffer+4], eax
mov	eax, buffer
add	esp, 5Ch
pop	buffer
pop	len
pop	edi
leave
retn
align 4
mov	dword ptr [esp+4], 10h 
mov	dword ptr [esp], 1 
mov	[ebp+var_24], edx
call	_silc_calloc
mov	args_0,	eax
test	eax, eax
mov	edx, [ebp+var_24]
jz	short loc_641C5D0F
mov	dword ptr [esp+4], 1 
mov	[esp], len	
mov	[ebp+var_24], edx
call	_silc_calloc
mov	[buffer], eax
test	eax, eax
mov	edx, [ebp+var_24]
jz	short loc_641C5D6B
mov	[buffer+4], eax
mov	[buffer+8], eax
lea	ecx, [eax+len]
mov	[buffer+0Ch], ecx
mov	edi, eax
jmp	loc_641C5CB4
			
xor	buffer,	buffer
mov	eax, buffer
add	esp, 5Ch
pop	buffer
pop	len
pop	edi
leave
retn
mov	edi, [args_0+8]
jmp	loc_641C5CB4
align 10h
public _silc_argument_payload_parse
			
push	ebp
mov	ebp, esp
push	edi
push	esi
push	ebx
sub	esp, 7Ch
mov	eax, [ebp+payload]
mov	[ebp+p_len], 0
mov	[ebp+arg_type],	0
mov	[ebp+buffer.head], eax
mov	[ebp+buffer.data], eax
add	eax, [ebp+payload_len]
mov	[ebp+buffer.end], eax
mov	[ebp+buffer.tail], eax
mov	dword ptr [esp+4], 14h 
mov	dword ptr [esp], 1 
call	_silc_calloc
mov	ebx, eax
test	eax, eax
jz	loc_641C5F3E
mov	dword ptr [esp+4], 4 
mov	newp, [ebp+argc]
mov	[esp], eax	
call	_silc_calloc
mov	[newp+4], eax
test	eax, eax
jz	loc_641C5F65
mov	dword ptr [esp+4], 4 
mov	edx, [ebp+argc]
mov	[esp], edx	
call	_silc_calloc
mov	[newp+8], eax
test	eax, eax
jz	loc_641C5F13
mov	dword ptr [esp+4], 4 
mov	ecx, [ebp+argc]
mov	[esp], ecx	
call	_silc_calloc
mov	[newp+0Ch], eax
test	eax, eax
jz	loc_641C5F13
mov	ecx, [ebp+argc]
test	ecx, ecx
jz	loc_641C5F69
xor	edi, edi
xor	esi, esi
mov	[ebp+var_5C], i
jmp	loc_641C5EBF
movzx	edx, [ebp+p_len]
mov	ecx, [ebp+buffer.data]
mov	[ebp+var_3C], ecx
mov	eax, [ebp+buffer.tail]
sub	eax, ecx
lea	ecx, [eax-3]
cmp	edx, ecx
ja	loc_641C5EF7
shl	edi, 2
mov	ecx, [newp+8]
mov	[ecx+edi], edx
movzx	esi, [ebp+arg_type]
mov	ecx, [newp+0Ch]
mov	[ecx+edi], esi
cmp	eax, 2
jbe	short loc_641C5E6F
mov	eax, [ebp+var_3C]
add	eax, 3
mov	[ebp+buffer.data], eax
mov	dword ptr [esp+10h], 1Dh
mov	[esp+0Ch], edx
add	edi, [newp+4]
mov	[esp+8], edi
mov	dword ptr [esp+4], 1Ch
lea	esi, [ebp+buffer]
mov	[esp], esi	
call	_silc_buffer_unformat
inc	eax
jz	short loc_641C5EF7
movzx	ret, [ebp+p_len]
mov	edx, [ebp+buffer.data]
mov	ecx, [ebp+buffer.tail]
mov	edi, ecx
sub	edi, edx
cmp	ret, edi
ja	short loc_641C5EB0
lea	ret, [edx+ret]
mov	[ebp+buffer.data], ret
inc	[ebp+var_5C]
mov	edi, [ebp+var_5C]
cmp	[ebp+argc], edi
jbe	loc_641C5F48
mov	dword ptr [esp+14h], 1Dh
lea	i, [ebp+arg_type]
mov	[esp+10h], esi
mov	dword ptr [esp+0Ch], 1
lea	ret, [ebp+p_len]
mov	[esp+8], ret
mov	dword ptr [esp+4], 3
lea	edx, [ebp+buffer]
mov	[esp], edx	
call	_silc_buffer_unformat
inc	ret
jnz	loc_641C5E34
			
mov	esi, [ebp+var_5C]
test	i, i
jz	short loc_641C5F13
xor	edi, edi
mov	eax, [newp+4]
mov	eax, [eax+ret*4]
mov	[esp], eax	
call	_silc_free
inc	ret
cmp	i, ret
jg	short loc_641C5F00
			
mov	eax, [newp+4]
mov	[esp], eax	
call	_silc_free
mov	eax, [newp+8]
mov	[esp], eax	
call	_silc_free
mov	eax, [newp+0Ch]
mov	[esp], eax	
call	_silc_free
mov	[esp], newp	
call	_silc_free
xor	newp, newp
mov	eax, newp
add	esp, 7Ch
pop	newp
pop	i
pop	ret
leave
retn
mov	esi, edi
cmp	ecx, [ebp+buffer.data]
jnz	short err
mov	eax, [ebp+argc]
mov	[newp],	eax
mov	dword ptr [newp+10h], 0
mov	eax, newp
add	esp, 7Ch
pop	newp
pop	i
pop	edi
leave
retn
xor	eax, eax
jmp	short loc_641C5F16
xor	esi, esi
mov	ecx, [ebp+buffer.tail]
jmp	short loc_641C5F4A
public _silc_argument_list_parse
push	ebp
mov	ebp, esp
push	ebx
sub	esp, 14h
mov	edx, [ebp+payload]
mov	eax, [ebp+payload_len]
cmp	eax, 4
ja	short loc_641C5F8C
xor	payload_len_0, payload_len_0
add	esp, 14h
pop	ebx
leave
retn
align 4
movzx	ecx, byte ptr [payload_0+1]
movzx	ebx, byte ptr [payload_0]
shl	ebx, 8
or	ecx, ebx
movzx	ecx, cx
mov	[esp+8], ecx	
sub	payload_len_0, 2
mov	[esp+4], eax	
add	payload_0, 2
mov	[esp], edx	
call	_silc_argument_payload_parse
add	esp, 14h
pop	ebx
leave
retn
align 4
public _silc_argument_get_decoded
push	ebp
mov	ebp, esp
push	edi
push	esi
push	ebx
sub	esp, 1Ch
mov	esi, [ebp+payload]
mov	edx, [ebp+type]
mov	eax, [ebp+dec_type]
mov	[ebp+var_1C], eax
mov	ecx, [ebp+ret_arg]
mov	[ebp+var_20], ecx
mov	eax, [ebp+ret_arg_alloc]
mov	[ebp+var_24], eax
test	esi, esi
jnz	short loc_641C5FE8
			
xor	tmp, tmp
add	esp, 1Ch
pop	ebx
pop	payload_0
pop	edi
leave
retn
align 4
mov	ecx, [payload_0]
test	ecx, ecx
jz	short loc_641C5FDD
mov	edi, [payload_0+0Ch]
cmp	type_0,	[edi]
jz	short loc_641C6034
xor	eax, eax
nop
inc	eax
cmp	ecx, eax
jbe	short loc_641C5FDD
lea	ebx, ds:0[eax*4]
cmp	type_0,	[edi+eax*4]
jnz	short loc_641C5FF8
mov	eax, [payload_0+8]
mov	type_0,	[eax+ebx]
mov	eax, [payload_0+4]
mov	eax, [eax+ebx]
test	tmp, tmp
jz	short loc_641C5FDD
mov	ecx, [ebp+var_24]
mov	[ebp+type], ecx
mov	ecx, [ebp+var_20]
mov	[ebp+payload], ecx
mov	ecx, [ebp+var_1C]
add	esp, 1Ch
pop	ebx
pop	payload_0
pop	edi
leave
jmp	_silc_argument_decode
xor	ebx, ebx
jmp	short loc_641C6009
public _silc_argument_list_parse_decoded
push	ebp
mov	ebp, esp
push	edi
push	esi
push	ebx
sub	esp, 2Ch
mov	edx, [ebp+payload]
mov	eax, [ebp+payload_len]
cmp	eax, 4
ja	short loc_641C6058
xor	ebx, ebx
mov	arg, list
add	esp, 2Ch
pop	list
pop	esi
pop	arg
leave
retn
movzx	ecx, byte ptr [payload_0+1]
movzx	ebx, byte ptr [payload_0]
shl	ebx, 8
or	ecx, ebx
movzx	ecx, cx
mov	[esp+8], ecx	
sub	payload_len_0, 2
mov	[esp+4], eax	
add	payload_0, 2
mov	[esp], edx	
call	_silc_argument_payload_parse
mov	edi, eax
test	eax, eax
jz	short loc_641C604C
mov	dword ptr [esp], 1Ch 
call	_silc_malloc
mov	ebx, eax
test	eax, eax
jz	loc_641C620C
mov	dword ptr [list+18h], 0
mov	dword ptr [list+14h], 0
mov	list, [list+10h]
and	eax, 3
mov	[list+10h], eax
mov	word ptr [list+0Ch], 4
mov	word ptr [list+0Eh], 8
mov	byte ptr [list+10h], 1
mov	dword ptr [list+8], 0
mov	dword ptr [list+4], 0
mov	dword ptr [list], 0
mov	dword ptr [arg+10h], 0
mov	eax, [arg+0Ch]
mov	eax, [eax]
mov	[ebp+type], eax
mov	eax, [arg+8]
mov	eax, [eax]
mov	[ebp+data_len],	eax
mov	eax, [arg+4]
mov	eax, [eax]
mov	[ebp+data], eax
mov	dword ptr [arg+10h], 1
mov	esi, [ebp+data]
test	esi, esi
jz	loc_641C61C8
lea	esi, [esi+0]
			
mov	dword ptr [esp+4], 8 
mov	dword ptr [esp], 1 
call	_silc_calloc
test	eax, eax
jz	short loc_641C6108
mov	esi, eax
mov	eax, [ebp+type]
mov	[esi+4], eax
mov	[esp+4], esi	
mov	dword ptr [esp], 0 
mov	ecx, [ebp+dec_type] 
mov	edx, [ebp+data_len] 
mov	eax, [ebp+data]	
call	_silc_argument_decode
test	al, al
jz	loc_641C61F4
mov	dword ptr [esp], 0Ch 
call	_silc_malloc
test	eax, eax
jz	short loc_641C618D
mov	[eax], esi
mov	edx, [list]
test	edx, edx
jz	loc_641C6200
movzx	edx, word ptr [list+0Ch]
mov	ecx, [list+4]
mov	[ecx+edx], eax
test	byte ptr [list+10h], 1
jz	short loc_641C617F
movzx	ecx, word ptr [list+0Eh]
mov	esi, [list+4]
mov	[eax+ecx], esi
mov	[list+4], eax
mov	dword ptr [eax+edx], 0
add	dword ptr [list+10h], 4
			
mov	eax, [arg+10h]
cmp	eax, [arg]
jnb	short loc_641C61C8
lea	edx, ds:0[eax*4]
mov	ecx, [arg+0Ch]
mov	ecx, [ecx+edx]
mov	[ebp+type], ecx
mov	ecx, [arg+8]
mov	ecx, [ecx+edx]
mov	[ebp+data_len],	ecx
mov	ecx, [arg+4]
mov	ecx, [ecx+edx]
mov	[ebp+data], ecx
inc	eax
mov	[arg+10h], eax
mov	esi, [ebp+data]
test	esi, esi
jnz	loc_641C6108
lea	esi, [esi+0]
			
mov	[esp], arg	
call	_silc_argument_payload_free
mov	eax, [list]
mov	[list+8], eax
and	byte ptr [list+10h], 0FDh
mov	dword ptr [list+18h], 0
mov	dword ptr [list+14h], 0
mov	eax, list
add	esp, 2Ch
pop	list
pop	esi
pop	arg
leave
retn
align 4
mov	[esp], esi	
call	_silc_free
jmp	short loc_641C618D
align 10h
mov	[list],	eax
movzx	edx, word ptr [list+0Ch]
jmp	loc_641C616F
align 4
mov	[esp], arg	
call	_silc_argument_payload_free
mov	eax, list
add	esp, 2Ch
pop	list
pop	esi
pop	arg
leave
retn
align 10h
public _silc_argument_payload_encode_payload
			
push	ebp
mov	ebp, esp
push	edi
push	esi
push	ebx
sub	esp, 4Ch
mov	edi, [ebp+payload]
mov	ebx, [edi]
test	ebx, ebx
jz	loc_641C6357
mov	esi, [payload_0+8]
xor	ecx, ecx
xor	eax, eax
xor	edx, edx
nop
mov	ecx, [esi+ecx*4]
lea	len, [len+ecx+3]
inc	i
mov	ecx, i
cmp	i, ebx
jnz	short loc_641C6240
mov	dword ptr [esp+4], 10h 
mov	dword ptr [esp], 1 
mov	[ebp+items], len
call	_silc_calloc
mov	ebx, eax
test	eax, eax
mov	edx, [ebp+items]
jz	loc_641C634D
test	edx, edx
jz	loc_641C635E
mov	dword ptr [esp+4], 1 
mov	[esp], len	
call	_silc_calloc
mov	[buffer], eax
test	eax, eax
mov	edx, [ebp+items]
jz	loc_641C6366
mov	[buffer+4], eax
mov	[buffer+8], eax
lea	ecx, [eax+edx]
mov	[buffer+0Ch], ecx
mov	esi, ecx
sub	esi, eax
cmp	len, esi
ja	short loc_641C62AE
mov	[buffer+8], ecx
mov	ecx, [payload_0]
test	ecx, ecx
jz	loc_641C6341
xor	esi, esi
xor	eax, eax
mov	ecx, [payload_0+8]
mov	[ebp+var_20], len
mov	len, payload_0
mov	payload_0, i
xchg	ax, ax
shl	esi, 2
mov	eax, [ecx+esi]
mov	dword ptr [esp+20h], 1Dh
mov	[esp+1Ch], eax
mov	ecx, [payload_0+4]
mov	ecx, [ecx+esi]
mov	[esp+18h], ecx
mov	dword ptr [esp+14h], 1Bh
mov	ecx, [payload_0+0Ch]
mov	ecx, [ecx+esi]
mov	[esp+10h], ecx
mov	dword ptr [esp+0Ch], 1
mov	[esp+8], eax
mov	dword ptr [esp+4], 3
mov	[esp], buffer	
mov	[ebp+items], payload_0
call	_silc_buffer_format
mov	edx, [ebp+items]
mov	ecx, [edx+8]
mov	esi, [ecx+esi]
add	esi, 3
mov	[ebp+var_1C], esi
mov	esi, [buffer+4]
mov	eax, [buffer+8]
sub	eax, esi
cmp	[ebp+var_1C], eax
ja	short loc_641C6337
add	esi, [ebp+var_1C]
mov	[buffer+4], esi
inc	i
mov	esi, i
cmp	[payload_0], i
ja	short loc_641C62C8
mov	payload_0, [ebp+var_20]
neg	len
add	edx, [buffer+4]
cmp	edx, [buffer]
jb	short loc_641C634D
mov	[buffer+4], edx
			
mov	eax, buffer
add	esp, 4Ch
pop	buffer
pop	esi
pop	i
leave
retn
xor	edx, edx
jmp	loc_641C624E
mov	ecx, [buffer+8]
jmp	loc_641C62AB
xor	buffer,	buffer
jmp	short loc_641C634D
align 4
public _silc_argument_payload_encode
			
push	ebp
mov	ebp, esp
push	edi
push	esi
push	ebx
sub	esp, 5Ch
mov	esi, [ebp+argv_types]
mov	edx, [ebp+argc]
test	edx, edx
jz	loc_641C649A
xor	edx, edx
xor	eax, eax
xor	edi, edi
mov	ecx, [ebp+argc]
mov	ebx, [ebp+argv_lens]
nop
movzx	edx, word ptr [argv_lens_0+edx*4]
lea	len, [len+edx+3]
inc	i
mov	edx, i
cmp	i, argc_0
jnz	short loc_641C6390
mov	dword ptr [esp+4], 10h 
mov	dword ptr [esp], 1 
call	_silc_calloc
mov	ebx, eax
test	eax, eax
jz	loc_641C6490
test	len, len
jz	loc_641C64A1
mov	dword ptr [esp+4], 1 
mov	[esp], len	
call	_silc_calloc
mov	[buffer], eax
test	eax, eax
jz	loc_641C64A9
mov	[buffer+4], eax
mov	[buffer+8], eax
lea	edx, [eax+len]
mov	[buffer+0Ch], edx
mov	ecx, edx
sub	ecx, eax
cmp	len, ecx
ja	short loc_641C63F6
mov	[buffer+8], edx
mov	eax, [ebp+argc]
test	eax, eax
jz	loc_641C6484
xor	eax, eax
mov	[ebp+var_1C], 0
mov	[ebp+var_20], len
mov	len, argv_types_0
nop
shl	eax, 2
mov	esi, [ebp+argv_lens]
add	esi, eax
mov	edx, [esi]
mov	dword ptr [esp+20h], 1Dh
movzx	ecx, dx
mov	[esp+1Ch], ecx
mov	ecx, [ebp+argv]
mov	ecx, [ecx+eax]
mov	[esp+18h], ecx
mov	dword ptr [esp+14h], 1Bh
mov	eax, [argv_types_0+eax]
mov	[esp+10h], eax
mov	dword ptr [esp+0Ch], 1
mov	[esp+8], edx
mov	dword ptr [esp+4], 3
mov	[esp], buffer	
call	_silc_buffer_format
movzx	edx, word ptr [esi]
add	edx, 3
mov	ecx, [buffer+4]
mov	eax, [buffer+8]
sub	eax, ecx
cmp	edx, eax
ja	short loc_641C6476
lea	edx, [ecx+edx]
mov	[buffer+4], edx
inc	[ebp+var_1C]
mov	eax, [ebp+var_1C]
cmp	[ebp+argc], eax
ja	short loc_641C6410
mov	argv_types_0, [ebp+var_20]
neg	len
add	edi, [buffer+4]
cmp	edi, [buffer]
jb	short loc_641C6490
mov	[buffer+4], edi
			
mov	eax, buffer
add	esp, 5Ch
pop	buffer
pop	esi
pop	len
leave
retn
xor	edi, edi
jmp	loc_641C639F
mov	edx, [buffer+8]
jmp	loc_641C63F3
xor	buffer,	buffer
jmp	short loc_641C6490
align 10h
public _silc_attribute_get_attribute
push	ebp
mov	ebp, esp
mov	eax, [ebp+payload]
mov	al, [eax]
leave
retn
align 4
public _silc_attribute_get_flags
push	ebp
mov	ebp, esp
mov	eax, [ebp+payload]
mov	al, [eax+1]
leave
retn
align 4
public _silc_attribute_get_data
push	ebp
mov	ebp, esp
mov	eax, [ebp+payload]
mov	edx, [ebp+data_len]
test	edx, edx
jz	short loc_641C64DB
movzx	ecx, word ptr [payload_0+2]
mov	[data_len_0], ecx
mov	payload_0, [payload_0+4]
leave
retn
public _silc_attribute_get_object
push	ebp
mov	ebp, esp
push	edi
push	esi
push	ebx
sub	esp, 9Ch
mov	esi, [ebp+payload]
mov	ebx, [ebp+object]
mov	eax, [ebp+object_size]
test	ebx, ebx
jz	short loc_641C6504 
test	byte ptr [payload_0+1],	1
jnz	short loc_641C6504 
cmp	byte ptr [payload_0], 11h 
jbe	short loc_641C6514
			
xor	eax, eax
			
add	esp, 9Ch
pop	ebx
pop	signon_0
pop	edi
leave
retn
align 4
movzx	edx, byte ptr [payload_0]
jmp	ds:off_64263574[edx*4] 
align 10h
			
cmp	res, 8
jnz	short loc_641C6504 
movzx	edx, word ptr [payload_0+2]
mov	res, [payload_0+4]
mov	[ebp+buffer.head], res
mov	[ebp+buffer.data], res
add	res, edx
mov	[ebp+buffer.end], res
mov	[ebp+buffer.tail], res
mov	dword ptr [esp+14h], 1Dh
lea	res, [object_0+4]
mov	[esp+10h], res
mov	dword ptr [esp+0Ch], 11h
lea	res, [ebp+type]
mov	[esp+8], res
mov	dword ptr [esp+4], 5
lea	res, [ebp+buffer]
mov	[esp], res	
call	_silc_buffer_unformat
inc	res
jz	short loc_641C6504 
mov	res, [ebp+type]
mov	[object_0], res
mov	al, 1
jmp	short loc_641C6506
align 4
			
cmp	object_size_0, 64h 
jnz	short loc_641C6504 
mov	[esp+8], object_0 
movzx	object_size_0, word ptr	[payload_0+2]
mov	[esp+4], eax	
mov	eax, [payload_0+4]
mov	[esp], eax	
call	_silc_vcard_decode
test	al, al
setnz	al
jmp	loc_641C6506
align 10h
			
cmp	object_size_0, 14Ch 
jnz	loc_641C6504	
mov	ax, [payload_0+2]
cmp	ax, 0Ch
jbe	loc_641C6504	
mov	edx, [payload_0+4]
mov	[ebp+buffer.head], edx
mov	[ebp+buffer.data], edx
movzx	eax, ax
add	edx, eax
mov	[ebp+buffer.end], edx
mov	[ebp+buffer.tail], edx
mov	dword ptr [esp+34h], 1Dh
lea	eax, [object_0+4]
mov	[esp+30h], eax
mov	dword ptr [esp+2Ch], 5
lea	eax, [ebp+signon_len]
mov	[esp+28h], eax
lea	eax, [ebp+signon]
mov	[esp+24h], eax
mov	dword ptr [esp+20h], 0Eh
lea	eax, [object_0+148h]
mov	[esp+1Ch], eax
mov	dword ptr [esp+18h], 1
lea	eax, [ebp+addr_len]
mov	[esp+14h], eax
lea	eax, [ebp+addr]
mov	[esp+10h], eax
mov	dword ptr [esp+0Ch], 0Eh
mov	[esp+8], object_0
mov	dword ptr [esp+4], 5
lea	eax, [ebp+buffer]
mov	[esp], eax	
call	_silc_buffer_unformat
inc	eax
jz	loc_641C6504	
lea	edx, [object_0+48h]
xor	eax, eax
mov	ecx, 100h
mov	edi, edx
rep stosb
add	object_0, 8
mov	cl, 40h
mov	edi, ebx
rep stosb
mov	ecx, [ebp+addr_len]
cmp	cx, 0FEh
jbe	loc_641C691F
mov	ecx, 0FFh
mov	payload_0, [ebp+addr]
mov	edi, edx
rep movsb
mov	cx, [ebp+signon_len]
cmp	cx, 3Eh
jbe	loc_641C6917
mov	ecx, 3Fh
mov	addr_0,	[ebp+signon]
mov	edi, ebx
rep movsb
mov	al, 1
jmp	loc_641C6506
align 4
			
cmp	object_size_0, 4 
jnz	loc_641C6504	
cmp	word ptr [payload_0+2],	3
jbe	loc_641C6504	
mov	edx, [payload_0+4]
movzx	object_size_0, byte ptr	[edx+3]
movzx	ecx, byte ptr [edx]
shl	ecx, 18h
or	eax, ecx
movzx	ecx, byte ptr [edx+1]
shl	ecx, 10h
or	eax, ecx
movzx	edx, byte ptr [edx+2]
shl	edx, 8
or	eax, edx
mov	[object_0], eax
mov	al, 1
jmp	loc_641C6506
align 4
			
mov	di, [payload_0+2] 
cmp	di, 1
jbe	loc_641C6504	
mov	payload_0, [payload_0+4]
movzx	edx, byte ptr [esi+1]
movzx	ecx, byte ptr [esi]
shl	ecx, 8
or	len_0, ecx
movzx	ecx, dx
mov	[ebp+var_5C], ecx
inc	ecx
movzx	edi, di
cmp	ecx, edi
jge	loc_641C6504	
cmp	object_size_0, [ebp+var_5C]
jb	loc_641C6504	
mov	word ptr [ebp+addr_len+2], dx
add	esi, 2
mov	edi, object_0
mov	ecx, [ebp+var_5C]
rep movsb
mov	al, 1
jmp	loc_641C6506
align 4
			
cmp	object_size_0, 18h 
jnz	loc_641C6504	
movzx	object_size_0, word ptr	[payload_0+2]
mov	[esp+8], eax	
mov	eax, [payload_0+4]
mov	[esp+4], eax	
mov	[esp], object_0	
call	_silc_mime_decode
test	eax, eax
setnz	al
jmp	loc_641C6506
align 10h
			
cmp	res, 10h
jnz	loc_641C6504	
movzx	edx, word ptr [payload_0+2]
mov	res, [payload_0+4]
mov	[ebp+buffer.head], res
mov	[ebp+buffer.data], res
add	res, edx
mov	[ebp+buffer.end], res
mov	[ebp+buffer.tail], res
mov	dword ptr [esp+24h], 1Dh
lea	res, [object_0+0Ch]
mov	[esp+20h], res
mov	dword ptr [esp+1Ch], 11h
lea	res, [object_0+8]
mov	[esp+18h], res
mov	dword ptr [esp+14h], 11h
lea	res, [object_0+4]
mov	[esp+10h], res
mov	dword ptr [esp+0Ch], 11h
mov	[esp+8], object_0
mov	dword ptr [esp+4], 11h
lea	res, [ebp+buffer]
mov	[esp], res	
call	_silc_buffer_unformat
inc	res
setnz	al
jmp	loc_641C6506
align 4
			
cmp	res, 14h
jnz	loc_641C6504	
movzx	edx, word ptr [payload_0+2]
mov	res, [payload_0+4]
mov	[ebp+buffer.head], res
mov	[ebp+buffer.data], res
add	res, edx
mov	[ebp+buffer.end], res
mov	[ebp+buffer.tail], res
mov	dword ptr [esp+2Ch], 1Dh
lea	res, [object_0+10h]
mov	[esp+28h], res
mov	dword ptr [esp+24h], 11h
lea	res, [object_0+0Ch]
mov	[esp+20h], res
mov	dword ptr [esp+1Ch], 11h
lea	res, [object_0+8]
mov	[esp+18h], res
mov	dword ptr [esp+14h], 11h
lea	res, [object_0+4]
mov	[esp+10h], res
mov	dword ptr [esp+0Ch], 11h
lea	res, [ebp+type]
mov	[esp+8], res
mov	dword ptr [esp+4], 5
lea	res, [ebp+buffer]
mov	[esp], res	
call	_silc_buffer_unformat
inc	res
jnz	loc_641C656E
jmp	loc_641C6504	
			
cmp	res, 0Ch
jnz	loc_641C6504	
movzx	edx, word ptr [payload_0+2]
mov	res, [payload_0+4]
mov	[ebp+buffer.head], res
mov	[ebp+buffer.data], res
add	res, edx
mov	[ebp+buffer.end], res
mov	[ebp+buffer.tail], res
mov	dword ptr [esp+10h], 1Dh
lea	res, [ebp+addr_len+2]
mov	[esp+0Ch], res
mov	[esp+8], object_0
mov	dword ptr [esp+4], 14h
lea	res, [ebp+buffer]
mov	[esp], res	
call	_silc_buffer_unformat
inc	res
jz	loc_641C6504	
movzx	edx, word ptr [ebp+addr_len+2]
mov	res, [ebp+buffer.tail]
sub	res, [ebp+buffer.data]
sub	res, 2
cmp	edx, res
ja	loc_641C6504	
movzx	res, word ptr [payload_0+2]
sub	res, 2
sub	res, edx
mov	[esp+4], res	
add	edx, 2
add	edx, [payload_0+4]
mov	[esp], edx	
call	_silc_memdup
mov	[object_0+4], res
movzx	res, word ptr [payload_0+2]
sub	res, 2
movzx	edx, word ptr [ebp+addr_len+2]
sub	res, len_0
mov	[object_0+8], res
mov	al, 1
jmp	loc_641C6506
align 4
			
cmp	object_size_0, 0Ch 
jnz	loc_641C6504	
mov	dword ptr [object_0], 0
movzx	object_size_0, word ptr	[payload_0+2]
mov	[esp+4], eax	
mov	eax, [payload_0+4]
mov	[esp], eax	
call	_silc_memdup
mov	[object_0+4], eax
movzx	eax, word ptr [payload_0+2]
mov	[object_0+8], eax
mov	al, 1
jmp	loc_641C6506
movzx	ecx, cx
jmp	loc_641C6684
movzx	ecx, cx
jmp	loc_641C666A
align 4
public _silc_attribute_get_verify_data
push	ebp
mov	ebp, esp
push	edi
push	esi
push	ebx
sub	esp, 5Ch
mov	ebx, [ebp+attrs]
mov	al, [ebp+server_verification]
mov	[ebp+var_29], al
mov	eax, [ebx]
mov	[ebx+8], eax
and	byte ptr [ebx+10h], 0FDh
mov	dword ptr [ebx+18h], 0
mov	dword ptr [ebx+14h], 0
xor	eax, eax
xor	edx, edx
xor	edi, edi
nop
mov	[attrs_0+18h], eax
mov	eax, [attrs_0+8]
test	eax, eax
jz	loc_641C6A3F
test	byte ptr [attrs_0+10h],	2
jz	loc_641C6A5C
movzx	ecx, word ptr [attrs_0+0Eh]
mov	ecx, [eax+ecx]
mov	[attrs_0+8], ecx
mov	[attrs_0+14h], eax
mov	attr, [eax]
test	attr, attr
jz	loc_641C6A46
mov	cl, [attr]
cmp	cl, 0Eh
jz	loc_641C6A68
cmp	cl, 0Fh
jz	short loc_641C6958
movzx	eax, word ptr [attr+2]
lea	eax, [len+eax+4]
mov	[esp+4], eax	
mov	[esp], data	
mov	[ebp+var_30], len
call	_silc_realloc
mov	data, eax
test	eax, eax
mov	edx, [ebp+var_30]
jz	loc_641C6A52
movzx	data, word ptr [attr+2]
lea	ecx, [data+edx]
mov	[ebp+buffer.head], ecx
mov	[ebp+buffer.data], ecx
lea	ecx, [ecx+eax+4]
mov	[ebp+buffer.end], ecx
mov	[ebp+buffer.tail], ecx
mov	dword ptr [esp+28h], 1Dh
mov	[esp+24h], eax
mov	ecx, [attr+4]
mov	[esp+20h], ecx
mov	dword ptr [esp+1Ch], 1Bh
mov	[esp+18h], eax
mov	dword ptr [esp+14h], 3
movzx	eax, byte ptr [attr+1]
mov	[esp+10h], eax
mov	dword ptr [esp+0Ch], 1
movzx	eax, byte ptr [attr]
mov	[esp+8], eax
mov	dword ptr [esp+4], 1
lea	eax, [ebp+buffer]
mov	[esp], eax	
call	_silc_buffer_format
movzx	eax, word ptr [attr+2]
mov	edx, [ebp+var_30]
lea	edx, [edx+eax+4]
mov	eax, [attrs_0+14h]
mov	[attrs_0+18h], eax
mov	eax, [attrs_0+8]
test	eax, eax
jnz	loc_641C6966
mov	dword ptr [attrs_0+14h], 0
mov	eax, [ebp+data_len]
test	eax, eax
jz	short loc_641C6A52
mov	eax, [ebp+data_len]
mov	[eax], len
			
mov	eax, data
add	esp, 5Ch
pop	attrs_0
pop	attr
pop	data
leave
retn
movzx	ecx, word ptr [attrs_0+0Ch]
mov	ecx, [eax+ecx]
jmp	loc_641C6977
cmp	[ebp+var_29], 0
jz	short loc_641C6A2E
jmp	loc_641C6997
align 4
public _silc_attribute_payload_free
push	ebp
mov	ebp, esp
push	ebx
sub	esp, 14h
mov	ebx, [ebp+payload]
mov	eax, [ebx+4]
mov	[esp], eax	
call	_silc_free
mov	[ebp+payload], ebx
add	esp, 14h
pop	ebx
leave
jmp	_silc_free
align 4
			
push	ebp
mov	ebp, esp
push	esi
push	ebx
sub	esp, 10h
mov	esi, len
mov	dword ptr [esp+4], 10h 
mov	dword ptr [esp], 1 
call	_silc_calloc
mov	ebx, eax
test	eax, eax
jz	short loc_641C6AE2
test	len, len
jz	short loc_641C6AE2
mov	dword ptr [esp+4], 1 
mov	[esp], len	
call	_silc_calloc
mov	[sb], eax
test	eax, eax
jz	short loc_641C6AEB
mov	[sb+4],	eax
mov	[sb+8],	eax
lea	len, [eax+len]
mov	[sb+0Ch], esi
			
mov	eax, sb
add	esp, 10h
pop	sb
pop	len
leave
retn
xor	sb, sb
jmp	short loc_641C6AE2
align 10h
public _silc_attribute_payload_encode_data
			
push	ebp
mov	ebp, esp
push	edi
push	esi
push	ebx
sub	esp, 6Ch
mov	ebx, [ebp+attrs]
mov	al, [ebp+attribute]
mov	[ebp+var_21], al
mov	dl, [ebp+flags]
mov	[ebp+var_22], dl
movzx	edi, word ptr [ebp+data_len]
lea	esi, [edi+4]
test	ebx, ebx
jz	loc_641C6BF4
mov	eax, [attrs_0]
mov	[ebp+ptr], eax
mov	eax, [attrs_0+0Ch]
sub	eax, [ebp+ptr]
lea	ecx, [len+eax]
cmp	len, eax
jbe	loc_641C6C0F
mov	edx, [attrs_0+4]
mov	[ebp+var_20], edx
mov	eax, [attrs_0+8]
mov	[ebp+var_1C], eax
mov	[esp+4], len	
mov	edx, [ebp+ptr]
mov	[esp], edx	
mov	[ebp+var_28], len
call	_silc_realloc
test	eax, eax
mov	ecx, [ebp+var_28]
jz	loc_641C6C0B
mov	[attrs_0], eax
mov	edx, [ebp+var_20]
sub	edx, [ebp+ptr]
add	edx, eax
mov	[ebp+ptr], edx
mov	[attrs_0+4], edx
mov	edx, [ebp+var_1C]
sub	edx, [ebp+var_20]
mov	[ebp+var_1C], edx
mov	edx, [ebp+ptr]
add	edx, [ebp+var_1C]
mov	[attrs_0+8], edx
lea	ecx, [eax+ecx]
mov	[attrs_0+0Ch], len
mov	eax, [attrs_0+8]
mov	[buffer+4], edx
mov	edx, [buffer+0Ch]
sub	edx, eax
cmp	esi, edx
ja	short loc_641C6B93
lea	len, [eax+len]
mov	[buffer+8], esi
mov	dword ptr [esp+28h], 1Dh
mov	[esp+24h], edi
mov	eax, [ebp+data]
mov	[esp+20h], eax
mov	dword ptr [esp+1Ch], 1Bh
mov	[esp+18h], edi
mov	dword ptr [esp+14h], 3
movzx	eax, [ebp+var_22]
mov	[esp+10h], flags_0
mov	dword ptr [esp+0Ch], 1
movzx	flags_0, [ebp+var_21]
mov	[esp+8], attribute_0
mov	dword ptr [esp+4], 1
mov	[esp], buffer	
call	_silc_buffer_format
mov	eax, [buffer]
mov	[buffer+4], eax
			
mov	eax, buffer
add	esp, 6Ch
pop	buffer
pop	len
pop	edi
leave
retn
align 4
mov	eax, len	
call	_silc_buffer_alloc
mov	attrs_0, eax
test	eax, eax
jz	short loc_641C6BE7
mov	buffer,	[ebx+8]
mov	edx, eax
jmp	loc_641C6B81
xor	attrs_0, attrs_0
jmp	short loc_641C6BE7
mov	edx, [attrs_0+8]
jmp	loc_641C6B7E
align 4
public _silc_attribute_payload_list_free
push	ebp
mov	ebp, esp
push	edi
push	esi
push	ebx
sub	esp, 4Ch
mov	ebx, [ebp+list]
mov	eax, [ebx]
mov	[ebx+8], eax
mov	al, [ebx+10h]
and	eax, 0FFFFFFFDh
mov	[ebx+10h], al
mov	dword ptr [ebx+18h], 0
mov	dword ptr [ebx+14h], 0
xor	edx, edx
mov	[list_0+18h], edx
mov	edx, [list_0+8]
test	edx, edx
jz	short loc_641C6CC9
test	al, 2
jz	loc_641C6DC0
movzx	ecx, word ptr [list_0+0Eh]
mov	ecx, [edx+ecx]
mov	[list_0+8], ecx
mov	[list_0+14h], edx
mov	entry, [edx]
test	entry, entry
jz	short loc_641C6CD0
mov	eax, [entry+4]
mov	[esp], eax	
call	_silc_free
mov	[esp], entry	
call	_silc_free
mov	ecx, [list_0]
mov	[ebp+ptr], ecx
mov	[list_0+8], ecx
mov	al, [list_0+10h]
and	eax, 0FFFFFFFDh
mov	[list_0+10h], al
mov	dl, al
and	edx, 2
mov	[ebp+var_19], dl
mov	edx, [ebp+ptr]
test	edx, edx
jz	short loc_641C6CBC
cmp	[ebp+var_19], 0
jz	loc_641C6D44
movzx	edi, word ptr [list_0+0Eh]
mov	edi, [edx+edi]
mov	[list_0+8], edi
cmp	entry, [edx]
jz	loc_641C6D56
mov	edx, edi
test	edx, edx
jnz	short loc_641C6C9A
mov	edx, [list_0+14h]
mov	[list_0+18h], edx
mov	edx, [list_0+8]
test	edx, edx
jnz	short loc_641C6C4C
mov	dword ptr [list_0+14h],	0
mov	ecx, [list_0]
mov	[list_0+8], ecx
and	eax, 0FFFFFFFDh
mov	[list_0+10h], al
test	ecx, ecx
jz	short loc_641C6D33
nop
test	byte ptr [list_0+10h], 2
jz	loc_641C6DCC
movzx	eax, word ptr [list_0+0Eh]
mov	eax, [ecx+eax]
mov	[list_0+8], eax
mov	eax, [list_0]
test	eax, eax
jz	short loc_641C6D1B
cmp	ecx, eax
jz	loc_641C6E1B
movzx	edi, word ptr [list_0+0Ch]
jmp	short loc_641C6D12
cmp	ecx, esi
jz	loc_641C6DD8
mov	eax, esi
lea	edx, [eax+edi]
mov	entry, [edx]
test	esi, esi
jnz	short loc_641C6D08
cmp	ecx, [list_0+4]
jz	loc_641C6E09
			
mov	[esp], ecx	
call	_silc_free
mov	ecx, [list_0+8]
test	ecx, ecx
jnz	short loc_641C6CE0
mov	[ebp+list], list_0
add	esp, 4Ch
pop	list_0
pop	entry
pop	edi
leave
jmp	_silc_free
align 4
movzx	edi, word ptr [list_0+0Ch]
mov	edi, [edx+edi]
mov	[list_0+8], edi
cmp	entry, [edx]
jnz	loc_641C6CB6
mov	[ebp+ptr], edx
test	ecx, ecx
jz	short loc_641C6D86
cmp	edx, ecx
jz	loc_641C6E78
movzx	edi, word ptr [list_0+0Ch]
mov	edx, [ebp+ptr]
jmp	short loc_641C6D7A
align 10h
cmp	edx, esi
jz	loc_641C6E26
mov	ecx, esi
lea	eax, [ecx+edi]
mov	entry, [eax]
test	esi, esi
jnz	short loc_641C6D70
mov	[ebp+ptr], edx
			
mov	edi, [ebp+ptr]
cmp	edi, [list_0+4]
jz	loc_641C6E70
mov	eax, [ebp+ptr]
cmp	eax, [list_0+14h]
jz	loc_641C6E64
mov	edx, [ebp+ptr]
cmp	edx, [list_0+18h]
jz	loc_641C6E58
mov	entry, [ebp+ptr]
mov	[esp], esi	
call	_silc_free
mov	edx, [list_0+14h]
mov	al, [list_0+10h]
jmp	loc_641C6C42
movzx	ecx, word ptr [list_0+0Ch]
mov	ecx, [edx+ecx]
jmp	loc_641C6C5B
movzx	eax, word ptr [list_0+0Ch]
mov	eax, [ecx+eax]
jmp	loc_641C6CF1
mov	[ebp+var_3C], edx
mov	entry, [ecx+edi]
mov	edi, [ebp+var_3C]
mov	[edi], esi
test	esi, esi
jz	short loc_641C6DF7
test	byte ptr [list_0+10h], 1
jz	short loc_641C6DF7
movzx	edx, word ptr [list_0+0Eh]
mov	edi, [ecx+edx]
mov	[esi+edx], edi
			
cmp	ecx, [list_0+8]
jz	short loc_641C6E11
sub	dword ptr [list_0+10h],	4
cmp	ecx, [list_0+4]
jnz	loc_641C6D24
mov	[list_0+4], eax
jmp	loc_641C6D24
mov	esi, [ebp+var_3C]
mov	edx, [esi]
mov	[list_0+8], edx
jmp	short loc_641C6DFC
movzx	edi, word ptr [list_0+0Ch]
mov	[ebp+var_3C], list_0
xor	eax, eax
jmp	short loc_641C6DDB
mov	[ebp+ptr], edx
mov	edx, [ebp+ptr]
mov	entry, [edx+edi]
mov	[eax], esi
test	esi, esi
jz	short loc_641C6E3B
test	byte ptr [list_0+10h], 1
jnz	short loc_641C6E4C
			
mov	esi, [ebp+ptr]
cmp	esi, [list_0+8]
jz	short loc_641C6E82
sub	dword ptr [list_0+10h],	4
jmp	loc_641C6D86
movzx	edi, word ptr [list_0+0Eh]
mov	edx, [edx+edi]
mov	[esi+edi], edx
jmp	short loc_641C6E3B
mov	dword ptr [list_0+18h],	0
jmp	loc_641C6DAA
mov	dword ptr [list_0+14h],	0
jmp	loc_641C6D9E
mov	[list_0+4], ecx
jmp	loc_641C6D92
movzx	edi, word ptr [list_0+0Ch]
mov	eax, list_0
xor	ecx, ecx
jmp	short loc_641C6E29
mov	eax, [eax]
mov	[list_0+8], eax
jmp	short loc_641C6E43
align 4
public _silc_attribute_payload_parse
push	ebp
mov	ebp, esp
push	edi
push	esi
push	ebx
sub	esp, 4Ch
mov	ret, [ebp+payload]
mov	[ebp+buffer.head], ret
mov	[ebp+buffer.data], ret
add	ret, [ebp+payload_len]
mov	[ebp+buffer.end], ret
mov	[ebp+buffer.tail], ret
mov	dword ptr [esp], 1Ch 
call	_silc_malloc
mov	ebx, ret
test	ret, ret
jz	short loc_641C6F20
mov	dword ptr [ret+18h], 0
mov	dword ptr [ret+14h], 0
mov	ret, [ret+10h]
and	ret, 3
mov	[list+10h], ret
mov	word ptr [list+0Ch], 4
mov	word ptr [list+0Eh], 8
mov	byte ptr [list+10h], 1
mov	dword ptr [list+8], 0
mov	dword ptr [list+4], 0
mov	dword ptr [list], 0
jmp	short loc_641C6F20
align 4
movzx	edx, word ptr [list+0Ch]
mov	ecx, [list+4]
mov	[ecx+edx], ret
test	byte ptr [list+10h], 1
jz	short loc_641C6F12
movzx	ecx, word ptr [list+0Eh]
mov	esi, [list+4]
mov	[ret+ecx], esi
mov	[list+4], ret
mov	dword ptr [ret+edx], 0
add	dword ptr [list+10h], 4
			
mov	ret, [ebp+buffer.tail]
cmp	ret, [ebp+buffer.data]
jz	loc_641C7002
mov	dword ptr [esp+4], 8 
mov	dword ptr [esp], 1 
call	_silc_calloc
mov	esi, ret
test	ret, ret
jz	err
mov	dword ptr [esp+20h], 1Dh
lea	ret, [ret+2]
mov	[esp+1Ch], ret
lea	ret, [esi+4]
mov	[esp+18h], ret
mov	dword ptr [esp+14h], 14h
lea	ret, [esi+1]
mov	[esp+10h], ret
mov	dword ptr [esp+0Ch], 1
mov	[esp+8], esi
mov	dword ptr [esp+4], 1
lea	ret, [ebp+buffer]
mov	[esp], ret	
call	_silc_buffer_unformat
inc	ret
jz	short err
mov	ecx, [ebp+buffer.data]
mov	ret, [ebp+buffer.tail]
sub	ret, ecx
movzx	edx, word ptr [esi+2]
lea	edi, [ret-4]
cmp	edx, edi
ja	short loc_641C6FDC
add	edx, 4
cmp	len, ret
ja	short loc_641C7002
lea	len, [ecx+len]
mov	[ebp+buffer.data], edx
mov	dword ptr [esp], 0Ch 
call	_silc_malloc
test	ret, ret
jz	loc_641C6F20
mov	[ret], esi
mov	edx, [list]
test	edx, edx
jnz	loc_641C6EF8
mov	[list],	ret
movzx	edx, word ptr [list+0Ch]
jmp	loc_641C6F02
mov	dword ptr [esp], offset	fmt 
call	_silc_format
mov	[esp+4], ret	
mov	dword ptr [esp], 3 
call	_silc_log_output
			
mov	[esp], list	
call	_silc_attribute_payload_list_free
xor	list, list
			
mov	ret, list
add	esp, 4Ch
pop	list
pop	esi
pop	edi
leave
retn
			
push	ebp
mov	ebp, esp
push	esi
push	ebx
sub	esp, 10h
mov	esi, len
mov	dword ptr [esp+4], 10h 
mov	dword ptr [esp], 1 
call	_silc_calloc
mov	ebx, eax
test	eax, eax
jz	short loc_641C7061
test	len, len
jz	short loc_641C706A
mov	dword ptr [esp+4], 1 
mov	[esp], len	
call	_silc_calloc
mov	[sb], eax
test	eax, eax
jz	short loc_641C706F
mov	[sb+4],	eax
mov	[sb+8],	eax
lea	edx, [eax+len]
mov	[sb+0Ch], edx
mov	ecx, edx
sub	ecx, eax
cmp	len, ecx
ja	short loc_641C7061
mov	[sb+8],	edx
			
mov	eax, sb
add	esp, 10h
pop	sb
pop	len
leave
retn
mov	edx, [sb+8]
jmp	short loc_641C705E
xor	sb, sb
jmp	short loc_641C7061
align 4
			
push	ebp
mov	ebp, esp
push	edi
push	esi
push	ebx
sub	esp, 9Ch
mov	esi, object
and	flags, 2
jz	short loc_641C708F 
test	ecx, ecx
jz	short loc_641C70A8
cmp	al, 11h
jbe	short loc_641C709C
			
xor	str, str
			
add	esp, 9Ch
pop	str
pop	object
pop	len4
leave
retn
movzx	attribute, al
jmp	ds:off_642635E4[attribute*4] 
align 4
mov	ebx, [ebp+object_size]
test	ebx, ebx
jz	short loc_641C708F 
jmp	short loc_641C708B
align 4
			
cmp	[ebp+object_size], 8 
jnz	short loc_641C708F 
mov	edi, [esi+4]
test	edi, edi
jz	short loc_641C708F 
or	ecx, 0FFFFFFFFh
xor	attribute, attribute
repne scasb
not	ecx
dec	ecx
cmp	ecx, 4
jbe	short loc_641C708F 
xor	eax, eax	
call	_silc_buffer_alloc
mov	ebx, eax
test	eax, eax
jz	short loc_641C708F 
mov	edx, [object+4]
or	ecx, 0FFFFFFFFh
mov	edi, edx
xor	tmpbuf,	tmpbuf
repne scasb
not	ecx
dec	ecx
mov	dword ptr [esp+1Ch], 1Dh
mov	[esp+18h], edx
mov	dword ptr [esp+14h], 9
mov	[esp+10h], ecx
mov	dword ptr [esp+0Ch], 3
mov	eax, [object]
mov	[esp+8], eax
mov	dword ptr [esp+4], 5
mov	[esp], tmpbuf	
call	_silc_buffer_format
test	eax, eax
js	loc_641C708F	
			
mov	edx, [tmpbuf+4]
mov	eax, [tmpbuf+8]
sub	eax, object
mov	[ebp+object_size], eax
mov	[esp+4], eax
mov	[esp], object	
call	_silc_memdup
mov	edx, [tmpbuf]
mov	[esp], edx	
mov	[ebp+var_3C], eax
call	_silc_free
mov	[esp], tmpbuf	
call	_silc_free
xor	tmpbuf,	tmpbuf
mov	eax, [ebp+var_3C]
mov	[esp], str
mov	[ebp+var_3C], eax
call	_silc_free
mov	ecx, [ebp+ret_len]
test	ecx, ecx
mov	eax, [ebp+var_3C]
jz	loc_641C7091
mov	edx, [ebp+object_size]
mov	ecx, [ebp+ret_len]
mov	[ecx], edx
jmp	loc_641C7091
align 4
			
cmp	[ebp+object_size], 64h 
jnz	loc_641C708F	
lea	attribute, [ebp+object_size]
mov	[esp+4], eax	
mov	[esp], esi	
call	_silc_vcard_encode
mov	ebx, eax
test	eax, eax
jz	loc_641C708F	
mov	str, [ebp+object_size]
mov	edx, str
			
mov	[esp+4], eax
mov	[esp], object	
call	_silc_memdup
jmp	short loc_641C715B
align 4
			
cmp	[ebp+object_size], 14Ch	
jnz	loc_641C708F	
lea	object,	[esi+48h]
mov	[ebp+len1], ecx
or	ebx, 0FFFFFFFFh
xor	attribute, attribute
mov	ecx, ebx
mov	edi, [ebp+len1]
repne scasb
mov	flags, ecx
not	edx
dec	edx
lea	ecx, [object+8]
mov	[ebp+len3], ecx
mov	ecx, ebx
mov	edi, [ebp+len3]
repne scasb
not	ecx
lea	edi, [ecx-1]
lea	eax, [len+edi+0Dh] 
mov	[ebp+var_3C], len
call	_silc_buffer_alloc_size
mov	ebx, eax
test	eax, eax
mov	edx, [ebp+var_3C]
jz	loc_641C708F	
mov	dword ptr [esp+44h], 1Dh
mov	tmpbuf,	[object+4]
mov	[esp+40h], eax
mov	dword ptr [esp+3Ch], 5
mov	[esp+38h], edi
mov	eax, [ebp+len3]
mov	[esp+34h], eax
mov	dword ptr [esp+30h], 1Bh
mov	[esp+2Ch], edi
mov	dword ptr [esp+28h], 3
movzx	eax, byte ptr [object+148h]
mov	[esp+24h], eax
mov	dword ptr [esp+20h], 1
mov	[esp+1Ch], edx
mov	ecx, [ebp+len1]
mov	[esp+18h], ecx
mov	dword ptr [esp+14h], 1Bh
mov	[esp+10h], len
mov	dword ptr [esp+0Ch], 3
mov	eax, [object]
mov	[esp+8], eax
mov	dword ptr [esp+4], 5
mov	[esp], tmpbuf
call	_silc_buffer_format
jmp	loc_641C712A
align 10h
			
cmp	[ebp+object_size], 4 
jnz	loc_641C708F	
mov	attribute, esi
shr	eax, 18h
mov	[ebp+tmp], al
mov	eax, esi
shr	eax, 10h
mov	[ebp+tmp+1], al
mov	eax, esi
shr	eax, 8
mov	[ebp+tmp+2], al
mov	eax, esi
mov	[ebp+tmp+3], al
mov	[ebp+object_size], 4
mov	eax, 4
xor	ebx, ebx
lea	flags, [ebp+tmp]
jmp	loc_641C71AC
align 10h
			
mov	attribute, [ebp+object_size] 
add	eax, 2
mov	[esp], eax	
call	_silc_malloc
mov	ebx, eax
test	eax, eax
jz	loc_641C708F	
mov	str, [ebp+object_size]
shr	eax, 8
mov	[str], al
mov	eax, [ebp+object_size]
mov	[str+1], al
lea	eax, [str+2]
mov	ecx, [ebp+object_size]
mov	edi, eax
rep movsb
mov	eax, [ebp+object_size]
add	eax, 2
mov	[ebp+object_size], eax
mov	edx, str
jmp	loc_641C71AC
			
cmp	[ebp+object_size], 18h
jnz	loc_641C708F	
lea	object,	[ebp+object_size]
mov	[esp+4], ecx	
mov	[esp], object	
call	_silc_mime_encode
mov	ebx, eax
test	eax, eax
jnz	loc_641C71A7
jmp	loc_641C708F	
			
cmp	[ebp+object_size], 10h
jnz	loc_641C708F	
mov	edi, [esi]
test	edi, edi
jz	loc_641C76CC
xor	attribute, attribute
mov	ecx, 0FFFFFFFFh
repne scasb
not	ecx
dec	ecx
mov	[ebp+len1], ecx
mov	edi, [object+4]
test	edi, edi
jz	loc_641C76A6
xor	attribute, attribute
mov	ecx, 0FFFFFFFFh
repne scasb
not	ecx
lea	flags, [ecx-1]
mov	edi, [object+8]
test	edi, edi
jz	loc_641C769A
xor	attribute, attribute
mov	ecx, 0FFFFFFFFh
repne scasb
not	ecx
dec	ecx
mov	[ebp+len3], ecx
mov	edi, [object+0Ch]
test	edi, edi
jz	short loc_641C73A3
xor	attribute, attribute
mov	ecx, 0FFFFFFFFh
repne scasb
not	ecx
lea	edi, [ecx-1]
mov	ecx, [ebp+len1]
lea	attribute, [len2+ecx]
add	eax, [ebp+len3]
add	eax, len4
jz	loc_641C708F	
add	eax, 8		
mov	[ebp+var_3C], len2
call	_silc_buffer_alloc_size
mov	ebx, eax
test	eax, eax
mov	edx, [ebp+var_3C]
jz	loc_641C708F	
mov	[ebp+var_4C], offset dword_642635E0
test	len4, len4
jz	short loc_641C73DD
mov	tmpbuf,	[object+0Ch]
mov	[ebp+var_4C], eax
mov	ecx, offset dword_642635E0
cmp	[ebp+len3], 0
jz	short loc_641C73EB
mov	ecx, [object+8]
mov	[ebp+var_38], offset dword_642635E0
test	edx, edx
jz	short loc_641C73FC
mov	eax, [object+4]
mov	[ebp+var_38], eax
mov	[ebp+var_34], offset dword_642635E0
cmp	[ebp+len1], 0
jz	short loc_641C740E
mov	object,	[object]
mov	[ebp+var_34], esi
mov	dword ptr [esp+44h], 1Dh
mov	eax, [ebp+var_4C]
mov	[esp+40h], eax
mov	dword ptr [esp+3Ch], 9
mov	[esp+38h], len4
mov	dword ptr [esp+34h], 3
mov	[esp+30h], ecx
mov	dword ptr [esp+2Ch], 9
mov	ecx, [ebp+len3]
mov	[esp+28h], ecx
mov	dword ptr [esp+24h], 3
mov	eax, [ebp+var_38]
mov	[esp+20h], eax
mov	dword ptr [esp+1Ch], 9
mov	[esp+18h], len2
mov	dword ptr [esp+14h], 3
mov	ecx, [ebp+var_34]
mov	[esp+10h], ecx
mov	dword ptr [esp+0Ch], 9
mov	eax, [ebp+len1]
mov	[esp+8], eax
mov	dword ptr [esp+4], 3
jmp	loc_641C7281
align 4
			
cmp	[ebp+object_size], 14h 
jnz	loc_641C708F	
mov	edi, [esi+4]
test	edi, edi
jz	loc_641C76C0
xor	attribute, attribute
mov	ecx, 0FFFFFFFFh
repne scasb
not	ecx
dec	ecx
mov	[ebp+len1], ecx
mov	edi, [object+8]
test	edi, edi
jz	loc_641C76B9
xor	attribute, attribute
mov	ecx, 0FFFFFFFFh
repne scasb
not	ecx
lea	flags, [ecx-1]
mov	edi, [object+0Ch]
test	edi, edi
jz	loc_641C76AD
xor	attribute, attribute
mov	ecx, 0FFFFFFFFh
repne scasb
not	ecx
dec	ecx
mov	[ebp+len3], ecx
mov	edi, [object+10h]
test	edi, edi
jz	short loc_641C74F8
xor	attribute, attribute
mov	ecx, 0FFFFFFFFh
repne scasb
not	ecx
lea	edi, [ecx-1]
mov	ecx, [ebp+len1]
lea	attribute, [len2+ecx]
add	eax, [ebp+len3]
add	eax, len4
jz	loc_641C708F	
add	eax, 0Ch	
mov	[ebp+var_3C], len2
call	_silc_buffer_alloc_size
mov	ebx, eax
test	eax, eax
mov	edx, [ebp+var_3C]
jz	loc_641C708F	
mov	[ebp+var_4C], offset dword_642635E0
test	len4, len4
jz	short loc_641C7532
mov	tmpbuf,	[object+10h]
mov	[ebp+var_4C], eax
mov	ecx, offset dword_642635E0
cmp	[ebp+len3], 0
jz	short loc_641C7540
mov	ecx, [object+0Ch]
mov	[ebp+var_38], offset dword_642635E0
test	edx, edx
jz	short loc_641C7551
mov	eax, [object+8]
mov	[ebp+var_38], eax
mov	[ebp+var_34], offset dword_642635E0
cmp	[ebp+len1], 0
jz	short loc_641C7564
mov	eax, [object+4]
mov	[ebp+var_34], eax
mov	dword ptr [esp+4Ch], 1Dh
mov	eax, [ebp+var_4C]
mov	[esp+48h], eax
mov	dword ptr [esp+44h], 9
mov	[esp+40h], len4
mov	dword ptr [esp+3Ch], 3
mov	[esp+38h], ecx
mov	dword ptr [esp+34h], 9
mov	ecx, [ebp+len3]
mov	[esp+30h], ecx
mov	dword ptr [esp+2Ch], 3
mov	eax, [ebp+var_38]
mov	[esp+28h], eax
mov	dword ptr [esp+24h], 9
mov	[esp+20h], len2
mov	dword ptr [esp+1Ch], 3
mov	ecx, [ebp+var_34]
mov	[esp+18h], ecx
mov	dword ptr [esp+14h], 9
mov	eax, [ebp+len1]
mov	[esp+10h], eax
mov	dword ptr [esp+0Ch], 3
mov	eax, [object]
mov	[esp+8], eax
mov	dword ptr [esp+4], 5
mov	[esp], tmpbuf	
call	_silc_buffer_format
mov	edx, [tmpbuf+4]
mov	eax, [tmpbuf+8]
sub	eax, object
mov	[ebp+object_size], eax
jmp	loc_641C7135
align 4
			
cmp	[ebp+object_size], 0Ch 
jnz	loc_641C708F	
mov	edi, [esi]
test	edi, edi
jz	short loc_641C7622
xor	attribute, attribute
mov	ecx, 0FFFFFFFFh
repne scasb
not	ecx
lea	edi, [ecx-1]
mov	attribute, [object+8]
lea	eax, [len+eax+2] 
call	_silc_buffer_alloc_size
mov	ebx, eax
test	eax, eax
jz	loc_641C708F	
mov	dword ptr [esp+20h], 1Dh
mov	tmpbuf,	[object+8]
mov	[esp+1Ch], eax
mov	eax, [object+4]
mov	[esp+18h], eax
mov	dword ptr [esp+14h], 1Bh
mov	eax, [object]
mov	[esp+10h], eax
mov	dword ptr [esp+0Ch], 9
mov	[esp+8], len
mov	dword ptr [esp+4], 3
mov	[esp], tmpbuf	
call	_silc_buffer_format
jmp	loc_641C712A
align 10h
			
cmp	[ebp+object_size], 0Ch 
jnz	loc_641C708F	
mov	flags, [esi+4]
mov	attribute, [esi+8]
mov	[ebp+object_size], eax
xor	ebx, ebx
jmp	loc_641C71AC
mov	[ebp+len3], 0
jmp	loc_641C738E
xor	flags, flags
jmp	loc_641C7374
mov	[ebp+len3], 0
jmp	loc_641C74E3
xor	flags, flags
jmp	loc_641C74C9
mov	[ebp+len1], 0
jmp	loc_641C74B0
mov	[ebp+len1], 0
jmp	loc_641C735B
public _silc_attribute_payload_encode
push	ebp
mov	ebp, esp
push	edi
push	esi
push	ebx
sub	esp, 3Ch
movzx	ebx, [ebp+flags]
movzx	esi, [ebp+attribute]
lea	eax, [ebp+object_size]
mov	[esp+4], eax	
mov	eax, [ebp+object_size]
mov	[esp], eax	
mov	ecx, [ebp+object] 
mov	edx, ebx	
mov	eax, esi	
call	_silc_attribute_payload_encode_int
mov	edi, eax
mov	eax, [ebp+object_size]
mov	[esp+10h], eax	
mov	[esp+0Ch], object_0 
mov	[esp+8], ebx	
mov	[esp+4], esi	
mov	eax, [ebp+attrs]
mov	[esp], eax	
call	_silc_attribute_payload_encode_data
mov	[esp], object_0	
mov	[ebp+var_1C], eax
call	_silc_free
mov	eax, [ebp+var_1C]
add	esp, 3Ch
pop	ebx
pop	esi
pop	object_0
leave
retn
public _silc_attribute_payload_alloc
push	ebp
mov	ebp, esp
push	edi
push	esi
push	ebx
sub	esp, 3Ch
mov	edi, [ebp+attribute]
mov	esi, [ebp+flags]
mov	edx, edi
mov	[ebp+var_29], dl
mov	edx, esi
mov	[ebp+var_2A], dl
mov	dword ptr [esp+4], 8 
mov	dword ptr [esp], 1 
call	_silc_calloc
mov	ebx, eax
test	eax, eax
jz	short loc_641C779F
mov	attr, attribute_0
mov	[attr],	al
mov	edx, flags_0
mov	[attr+1], dl
movzx	edx, [ebp+var_2A] 
movzx	eax, [ebp+var_29] 
lea	ecx, [ebp+tmp_len]
mov	[esp+4], ecx	
mov	ecx, [ebp+object_size]
mov	[esp], ecx	
mov	ecx, [ebp+object] 
call	_silc_attribute_payload_encode_int
mov	[attr+4], eax
mov	edx, [ebp+tmp_len]
mov	[attr+2], dx
test	eax, eax
jz	short loc_641C77A9
			
mov	eax, attr
add	esp, 3Ch
pop	attr
pop	flags_0
pop	attribute_0
leave
retn
mov	[esp], attr
call	_silc_free
xor	attr, attr
jmp	short loc_641C779F
align 4
public _silc_auth_get_method
push	ebp
mov	ebp, esp
mov	eax, [ebp+payload]
mov	ax, [eax+2]
leave
retn
public _silc_auth_get_public_data
push	ebp
mov	ebp, esp
mov	eax, [ebp+payload]
mov	edx, [ebp+pubdata_len]
test	edx, edx
jz	short loc_641C77D7
movzx	ecx, word ptr [payload_0+4]
mov	[pubdata_len_0], ecx
mov	payload_0, [payload_0+8]
leave
retn
public _silc_auth_get_data
push	ebp
mov	ebp, esp
mov	eax, [ebp+payload]
mov	edx, [ebp+auth_len]
test	edx, edx
jz	short loc_641C77EF
movzx	ecx, word ptr [payload_0+0Ch]
mov	[auth_len_0], ecx
mov	payload_0, [payload_0+10h]
leave
retn
public _silc_key_agreement_get_hostname
push	ebp
mov	ebp, esp
mov	eax, [ebp+payload]
mov	eax, [eax+4]
leave
retn
align 10h
public _silc_key_agreement_get_protocol
push	ebp
mov	ebp, esp
mov	eax, [ebp+payload]
mov	eax, [eax+8]
leave
retn
align 4
public _silc_key_agreement_get_port
push	ebp
mov	ebp, esp
mov	eax, [ebp+payload]
mov	ax, [eax+0Ah]
leave
retn
public _silc_key_agreement_payload_free
push	ebp
mov	ebp, esp
push	ebx
sub	esp, 14h
mov	ebx, [ebp+payload]
test	ebx, ebx
jz	short loc_641C7840
mov	eax, [payload_0+4]
mov	[esp], eax	
call	_silc_free
mov	[ebp+payload], payload_0
add	esp, 14h
pop	payload_0
leave
jmp	_silc_free
align 10h
add	esp, 14h
pop	payload_0
leave
retn
align 4
public _silc_key_agreement_payload_parse
push	ebp
mov	ebp, esp
push	esi
push	ebx
sub	esp, 40h
mov	esi, [ebp+payload]
mov	dword ptr [esp+4], 0Ch 
mov	dword ptr [esp], 1 
call	_silc_calloc
mov	ebx, ret
test	ret, ret
jz	short loc_641C78D3
mov	[ebp+buffer.head], payload_0
mov	[ebp+buffer.data], payload_0
add	payload_0, [ebp+payload_len]
mov	[ebp+buffer.end], esi
mov	[ebp+buffer.tail], esi
mov	dword ptr [esp+20h], 1Dh
lea	ret, [ret+0Ah]
mov	[esp+1Ch], ret
mov	dword ptr [esp+18h], 3
lea	ret, [newp+8]
mov	[esp+14h], ret
mov	dword ptr [esp+10h], 3
mov	[esp+0Ch], newp
lea	ret, [newp+4]
mov	[esp+8], ret
mov	dword ptr [esp+4], 14h
lea	ret, [ebp+buffer]
mov	[esp], ret	
call	_silc_buffer_unformat
inc	ret
jz	short loc_641C78DC
movzx	edx, word ptr [newp]
mov	ret, [ebp+buffer.tail]
sub	ret, [ebp+buffer.data]
sub	ret, 6
cmp	edx, ret
ja	short loc_641C78DC
			
mov	ret, newp
add	esp, 40h
pop	newp
pop	esi
leave
retn
			
mov	[esp], newp
call	_silc_free
xor	newp, newp
jmp	short loc_641C78D3
public _silc_auth_payload_free
			
push	ebp
mov	ebp, esp
push	edi
push	ebx
sub	esp, 10h
mov	ebx, [ebp+payload]
test	ebx, ebx
jz	short loc_641C7940
mov	edx, [payload_0+8]
test	edx, edx
jz	short loc_641C7913
movzx	ecx, word ptr [payload_0+4]
xor	eax, eax
mov	edi, edx
rep stosb
mov	eax, [payload_0+8]
mov	[esp], eax	
call	_silc_free
mov	edx, [payload_0+10h]
test	edx, edx
jz	short loc_641C792F
movzx	ecx, word ptr [payload_0+0Ch]
xor	eax, eax
mov	edi, edx
rep stosb
mov	eax, [payload_0+10h]
mov	[esp], eax	
call	_silc_free
mov	[ebp+payload], payload_0
add	esp, 10h
pop	payload_0
pop	edi
leave
jmp	_silc_free
align 10h
add	esp, 10h
pop	payload_0
pop	edi
leave
retn
align 4
public _silc_auth_payload_parse
			
push	ebp
mov	ebp, esp
push	edi
push	esi
push	ebx
sub	esp, 4Ch
mov	ret, [ebp+data]
mov	[ebp+buffer.head], ret
mov	[ebp+buffer.data], ret
add	ret, [ebp+data_len]
mov	[ebp+buffer.end], ret
mov	[ebp+buffer.tail], ret
mov	dword ptr [esp+4], 14h 
mov	dword ptr [esp], 1 
call	_silc_calloc
mov	ebx, ret
test	ret, ret
jz	loc_641C7A1C
mov	dword ptr [esp+2Ch], 1Dh
lea	ret, [ret+0Ch]
mov	[esp+28h], ret
lea	ret, [newp+10h]
mov	[esp+24h], ret
mov	dword ptr [esp+20h], 14h
lea	ret, [newp+4]
mov	[esp+1Ch], ret
lea	ret, [newp+8]
mov	[esp+18h], ret
mov	dword ptr [esp+14h], 14h
lea	ret, [newp+2]
mov	[esp+10h], ret
mov	dword ptr [esp+0Ch], 3
mov	[esp+8], newp
mov	dword ptr [esp+4], 3
lea	ret, [ebp+buffer]
mov	[esp], ret	
call	_silc_buffer_unformat
inc	ret
jz	short loc_641C7A44
movzx	edx, word ptr [newp]
mov	ret, [ebp+buffer.tail]
sub	ret, [ebp+buffer.data]
cmp	edx, ret
jnz	short loc_641C7A30
mov	ecx, [newp+4]
mov	ret, [newp+0Ch]
movzx	edi, ax
movzx	esi, cx
lea	esi, [edi+esi]
sub	edx, 8
cmp	esi, edx
ja	short loc_641C7A30
test	ax, ax
jz	short loc_641C7A30
mov	ax, [newp+2]
cmp	ax, 1
jz	short loc_641C7A28
cmp	ax, 2
jnz	short loc_641C7A1C
cmp	cx, 7Fh
jbe	short loc_641C7A30
			
mov	ret, newp
add	esp, 4Ch
pop	newp
pop	esi
pop	edi
leave
retn
align 4
test	cx, cx
jz	short loc_641C7A1C
lea	esi, [esi+0]
			
mov	[esp], newp	
call	_silc_auth_payload_free
xor	newp, newp
mov	ret, newp
add	esp, 4Ch
pop	newp
pop	esi
pop	edi
leave
retn
mov	[esp], newp
call	_silc_free
xor	newp, newp
jmp	short loc_641C7A1C
			
			
push	ebp
mov	ebp, esp
push	edi
push	esi
push	ebx
sub	esp, 7Ch
mov	[ebp+var_50], randomdata
mov	[ebp+var_4C], random_len
mov	ebx, [ebp+type]
lea	randomdata, [ebp+pk_len]
mov	[esp+4], edx	
mov	[esp], public_key 
call	_silc_pkcs_public_key_encode
mov	esi, eax
test	eax, eax
jz	loc_641C7BC0
lea	pk, [ebp+id_len]
mov	[esp+10h], eax	
mov	dword ptr [esp+0Ch], 20h 
lea	eax, [ebp+id_data]
mov	[esp+8], eax	
movzx	type_0,	bx
mov	[esp+4], type_0	
mov	eax, [ebp+id]
mov	[esp], eax	
call	_silc_id_id2str
test	al, al
jz	loc_641C7BB8
mov	edx, [ebp+id_len]
mov	[ebp+var_54], edx
mov	edi, [ebp+pk_len]
mov	dword ptr [esp+4], 10h 
mov	dword ptr [esp], 1 
call	_silc_calloc
mov	type_0,	eax
test	eax, eax
jz	loc_641C7BCA
add	edi, [ebp+var_54]
add	edi, [ebp+var_4C]
jz	loc_641C7BD6
mov	dword ptr [esp+4], 1 
mov	[esp], edi	
call	_silc_calloc
mov	[buf], eax
test	eax, eax
jz	loc_641C7BCA
mov	[buf+4], eax
mov	[buf+8], eax
lea	edx, [eax+edi]
mov	[buf+0Ch], edx
mov	ecx, edx
sub	ecx, eax
cmp	edi, ecx
ja	short loc_641C7B0F
mov	[buf+8], edx
mov	dword ptr [esp+28h], 1Dh
mov	eax, [ebp+pk_len]
mov	[esp+24h], eax
mov	[esp+20h], pk
mov	dword ptr [esp+1Ch], 1Bh
mov	eax, [ebp+id_len]
mov	[esp+18h], eax
lea	eax, [ebp+id_data]
mov	[esp+14h], eax
mov	dword ptr [esp+10h], 1Bh
mov	edx, [ebp+var_4C]
mov	[esp+0Ch], edx
mov	ecx, [ebp+var_50]
mov	[esp+8], ecx
mov	dword ptr [esp+4], 1Bh
mov	[esp], buf	
call	_silc_buffer_format
mov	eax, [buf]
mov	edx, [ebp+ret_len]
test	edx, edx
jz	short loc_641C7B71
mov	edx, [buf+0Ch]
sub	edx, ret
mov	ecx, [ebp+ret_len]
mov	[ecx], edx
mov	dword ptr [buf+0Ch], 0
mov	dword ptr [buf+8], 0
mov	dword ptr [buf+4], 0
mov	dword ptr [buf], 0
mov	dword ptr [esp], 0 
mov	[ebp+var_58], ret
call	_silc_free
mov	[esp], buf	
call	_silc_free
mov	[esp], pk	
call	_silc_free
mov	eax, [ebp+var_58]
add	esp, 7Ch
pop	buf
pop	pk
pop	edi
leave
retn
align 4
mov	[esp], pk	
call	_silc_free
xor	eax, eax
add	esp, 7Ch
pop	type_0
pop	pk
pop	edi
leave
retn
			
mov	[esp], pk
call	_silc_free
xor	eax, eax
jmp	short loc_641C7BAE
mov	edx, [buf+8]
jmp	loc_641C7B0C
align 10h
public _silc_auth_public_key_auth_verify
			
push	ebp
mov	ebp, esp
push	edi
push	esi
push	ebx
sub	esp, 3Ch
mov	ebx, [ebp+payload]
mov	edi, [ebp+public_key]
movzx	eax, [ebp+type]
movzx	ecx, word ptr [ebx+4] 
mov	edx, [ebx+8]	
lea	esi, [ebp+tmp_len]
mov	[esp+8], esi	
mov	[esp+4], type_0	
mov	type_0,	[ebp+id]
mov	[esp], eax	
mov	eax, edi	
call	_silc_auth_public_key_encode_data
mov	esi, eax
test	eax, eax
jz	short loc_641C7C6F
mov	tmp, [ebp+hash]
mov	[esp+14h], eax	
mov	eax, [ebp+tmp_len]
mov	[esp+10h], eax	
mov	[esp+0Ch], tmp	
movzx	eax, word ptr [payload_0+0Ch]
mov	[esp+8], eax	
mov	eax, [payload_0+10h]
mov	[esp+4], eax	
mov	[esp], public_key_0 
call	_silc_pkcs_verify
test	al, al
jz	short loc_641C7C60
mov	ecx, [ebp+tmp_len]
xor	eax, eax
mov	public_key_0, tmp
rep stosb
mov	[esp], esi	
call	_silc_free
mov	al, 1
add	esp, 3Ch
pop	payload_0
pop	esi
pop	tmp
leave
retn
mov	ecx, [ebp+tmp_len]
mov	public_key_0, tmp
rep stosb
mov	[esp], esi	
call	_silc_free
xor	eax, eax
add	esp, 3Ch
pop	payload_0
pop	tmp
pop	tmp
leave
retn
align 4
public _silc_auth_verify
push	ebp
mov	ebp, esp
push	edi
push	esi
push	ebx
sub	esp, 1Ch
mov	eax, [ebp+payload]
mov	edx, [ebp+auth_data]
mov	[ebp+var_1C], edx
mov	edx, [ebp+auth_data_len]
mov	[ebp+var_20], edx
mov	esi, [ebp+hash]
mov	edi, [ebp+id]
mov	ecx, [ebp+auth_method]
mov	ebx, [ebp+type]
test	eax, eax
jz	short loc_641C7CAD
mov	dx, [payload_0+2]
cmp	dx, cx
jz	short loc_641C7CB8
			
xor	payload_0, payload_0
			
add	esp, 1Ch
pop	ebx
pop	esi
pop	edi
leave
retn
align 4
cmp	dx, 1
jz	short loc_641C7CEC
jnb	short loc_641C7CC4
mov	al, 1
jmp	short loc_641C7CAF
cmp	dx, 2
jnz	short loc_641C7CAD
movzx	type_0,	bx
mov	[ebp+hash], type_0
mov	[ebp+auth_data_len], id_0
mov	[ebp+auth_data], hash_0
mov	edx, [ebp+var_1C]
mov	[ebp+auth_method], edx
mov	[ebp+payload], payload_0
add	esp, 1Ch
pop	type_0
pop	hash_0
pop	id_0
leave
jmp	_silc_auth_public_key_auth_verify
align 4
mov	auth_method_0, [payload_0+0Ch]
test	cx, cx
jz	short loc_641C7CAD
mov	type_0,	[ebp+var_1C]
test	ebx, ebx
jz	short loc_641C7CAD
movzx	ecx, cx
cmp	ecx, [ebp+var_20]
jnz	short loc_641C7CAD
mov	hash_0,	[payload_0+10h]
cmp	ecx, ecx
mov	id_0, [ebp+var_1C]
repe cmpsb
setz	al
jmp	short loc_641C7CAF
align 4
public _silc_auth_public_key_auth_verify_data
push	ebp
mov	ebp, esp
push	esi
push	ebx
sub	esp, 30h
mov	esi, [ebp+type]
mov	eax, [ebp+payload_len]
mov	[esp+4], eax	
mov	eax, [ebp+payload]
mov	[esp], eax	
call	_silc_auth_payload_parse
mov	ebx, eax
test	eax, eax
jz	short loc_641C7D70
movzx	type_0,	si
mov	[esp+10h], type_0 
mov	auth_payload, [ebp+id]
mov	[esp+0Ch], eax	
mov	eax, [ebp+hash]
mov	[esp+8], eax	
mov	eax, [ebp+public_key]
mov	[esp+4], eax	
mov	[esp], auth_payload 
call	_silc_auth_public_key_auth_verify
mov	[esp], auth_payload 
mov	[ebp+var_C], al
call	_silc_auth_payload_free
mov	al, [ebp+var_C]
add	esp, 30h
pop	auth_payload
pop	type_0
leave
retn
xor	auth_payload, auth_payload
add	esp, 30h
pop	auth_payload
pop	type_0
leave
retn
align 4
public _silc_auth_verify_data
push	ebp
mov	ebp, esp
push	edi
push	esi
push	ebx
sub	esp, 3Ch
mov	edi, [ebp+auth_data]
mov	esi, [ebp+auth_method]
mov	eax, [ebp+type]
mov	[ebp+var_1A], ax
mov	eax, [ebp+payload_len]
mov	[esp+4], eax	
mov	eax, [ebp+payload]
mov	[esp], eax	
call	_silc_auth_payload_parse
mov	ebx, eax
test	eax, eax
jz	short loc_641C7DB2
mov	auth_payload, [auth_payload+0Ch]
test	ax, ax
jnz	short loc_641C7DBC
xor	eax, eax
add	esp, 3Ch
pop	auth_payload
pop	auth_method_0
pop	auth_data_0
leave
retn
cmp	si, [auth_payload+2]
jz	short loc_641C7DDC
			
xor	eax, eax
			
mov	[esp], auth_payload
mov	[ebp+var_20], al
call	_silc_auth_payload_free
mov	al, [ebp+var_20]
add	esp, 3Ch
pop	auth_payload
pop	esi
pop	auth_data_0
leave
retn
align 4
cmp	si, 1
jz	short loc_641C7E10
jb	short loc_641C7E2C
cmp	si, 2
jnz	short loc_641C7DC2
movzx	eax, [ebp+var_1A]
mov	[esp+10h], type_0 
mov	type_0,	[ebp+id]
mov	[esp+0Ch], eax	
mov	eax, [ebp+hash]
mov	[esp+8], eax	
mov	[esp+4], auth_data_0 
mov	[esp], auth_payload 
call	_silc_auth_public_key_auth_verify
jmp	short loc_641C7DC4
align 10h
test	auth_data_0, auth_data_0
jz	short loc_641C7DC2
movzx	eax, ax
cmp	[ebp+auth_data_len], eax
jnz	short loc_641C7DC2
mov	auth_method_0, [auth_payload+10h]
mov	eax, [ebp+auth_data_len]
cmp	eax, eax
mov	ecx, eax
repe cmpsb
jnz	short loc_641C7DC2
xchg	ax, ax
mov	al, 1
jmp	short loc_641C7DC4
public _silc_key_agreement_payload_encode
push	ebp
mov	ebp, esp
push	edi
push	esi
push	ebx
sub	esp, 4Ch
mov	eax, [ebp+protocol]
mov	[ebp+var_1E], ax
mov	ebx, [ebp+port]
mov	esi, [ebp+hostname]
test	esi, esi
jz	loc_641C7F18
xor	eax, eax
mov	ecx, 0FFFFFFFFh
mov	edi, [ebp+hostname]
repne scasb
not	ecx
lea	eax, [ecx-1]
mov	[ebp+len], eax
lea	edi, [ecx+5]
mov	dword ptr [esp+4], 10h 
mov	dword ptr [esp], 1 
call	_silc_calloc
mov	esi, eax
test	eax, eax
jz	loc_641C7F0D
test	edi, edi
jz	loc_641C7F29
mov	dword ptr [esp+4], 1 
mov	[esp], edi	
call	_silc_calloc
mov	[buffer], eax
test	eax, eax
jz	loc_641C7F2E
mov	[buffer+4], eax
mov	[buffer+8], eax
lea	edx, [eax+edi]
mov	[buffer+0Ch], edx
mov	ecx, edx
sub	ecx, eax
cmp	edi, ecx
ja	short loc_641C7EBC
mov	[buffer+8], edx
mov	dword ptr [esp+28h], 1Dh
movzx	port_0,	bx
mov	[esp+24h], port_0
mov	dword ptr [esp+20h], 3
movzx	eax, [ebp+var_1E]
mov	[esp+1Ch], protocol_0
mov	dword ptr [esp+18h], 3
mov	protocol_0, [ebp+len]
mov	[esp+14h], eax
mov	ecx, [ebp+hostname]
mov	[esp+10h], ecx
mov	dword ptr [esp+0Ch], 1Bh
mov	[esp+8], eax
mov	dword ptr [esp+4], 3
mov	[esp], buffer	
call	_silc_buffer_format
			
mov	eax, buffer
add	esp, 4Ch
pop	port_0
pop	buffer
pop	edi
leave
retn
align 4
mov	edi, 6
mov	[ebp+len], 0
jmp	loc_641C7E65
mov	edx, [buffer+8]
jmp	short loc_641C7EB9
xor	buffer,	buffer
jmp	short loc_641C7F0D
align 4
public _silc_auth_payload_encode
push	ebp
mov	ebp, esp
push	edi
push	esi
push	ebx
sub	esp, 6Ch
mov	eax, [ebp+method]
mov	[ebp+var_1A], ax
mov	esi, [ebp+random_len]
mov	edi, [ebp+auth_len]
dec	ax
jz	loc_641C803C
mov	[ebp+autf8], 0
mov	dword ptr [esp+4], 10h 
mov	dword ptr [esp], 1 
call	_silc_calloc
mov	ebx, eax
test	eax, eax
jz	loc_641C80B6
movzx	edx, si
movzx	auth_len_0, di
lea	random_len_0, [edi+edx+8]
mov	dword ptr [esp+4], 1 
mov	[esp], len	
mov	[ebp+var_24], edx
call	_silc_calloc
mov	[ebp+var_2C], eax
mov	[buffer], eax
test	eax, eax
mov	edx, [ebp+var_24]
jz	loc_641C80B6
mov	[buffer+4], eax
mov	[buffer+8], eax
mov	ecx, eax
add	ecx, len
mov	[buffer+0Ch], ecx
mov	eax, ecx
sub	eax, [ebp+var_2C]
cmp	len, eax
ja	short loc_641C7FBD
mov	[buffer+8], ecx
mov	dword ptr [esp+3Ch], 1Dh
mov	[esp+38h], edi
mov	eax, [ebp+auth_data]
mov	[esp+34h], eax
mov	dword ptr [esp+30h], 1Bh
mov	[esp+2Ch], edi
mov	dword ptr [esp+28h], 3
mov	[esp+24h], edx
mov	eax, [ebp+random_data]
mov	[esp+20h], eax
mov	dword ptr [esp+1Ch], 1Bh
mov	[esp+18h], edx
mov	dword ptr [esp+14h], 3
movzx	eax, [ebp+var_1A]
mov	[esp+10h], method_0
mov	dword ptr [esp+0Ch], 3
mov	[esp+8], len
mov	dword ptr [esp+4], 3
mov	[esp], buffer	
call	_silc_buffer_format
mov	eax, [ebp+autf8]
mov	[esp], eax	
call	_silc_free
			
mov	autf8_len, buffer
add	esp, 6Ch
pop	buffer
pop	len
pop	autf8_len
leave
retn
movzx	ebx, di
mov	[esp+4], ebx	
mov	eax, [ebp+auth_data]
mov	[esp], eax	
call	_silc_utf8_valid
test	al, al
jnz	loc_641C7F52
mov	dword ptr [esp+8], 0 
mov	[esp+4], ebx	
mov	eax, [ebp+auth_data]
mov	[esp], eax	
call	_silc_utf8_encoded_len
mov	auth_len_0, eax
test	eax, eax
jnz	short loc_641C8077
xor	ebx, ebx
jmp	short loc_641C8032
mov	dword ptr [esp+4], 1 
mov	[esp], autf8_len 
call	_silc_calloc
mov	[ebp+autf8], eax
mov	[esp+10h], autf8_len 
mov	[esp+0Ch], eax	
mov	dword ptr [esp+8], 0 
mov	[esp+4], ebx	
mov	eax, [ebp+auth_data]
mov	[esp], eax	
call	_silc_utf8_encode
mov	autf8_len, eax
mov	eax, [ebp+autf8]
mov	[ebp+auth_data], eax
jmp	loc_641C7F59
			
mov	eax, [ebp+autf8]
mov	[esp], eax	
call	_silc_free
xor	buffer,	buffer
jmp	loc_641C8032
public _silc_auth_public_key_auth_generate_wpub
			
push	ebp
mov	ebp, esp
push	edi
push	esi
push	ebx
sub	esp, 84Ch
mov	edi, [ebp+pubdata_len]
movzx	eax, [ebp+type]
lea	edx, [ebp+tmp_len]
mov	[esp+8], edx	
mov	[esp+4], type_0	
mov	type_0,	[ebp+id]
mov	[esp], eax	
mov	ecx, edi	
mov	edx, [ebp+pubdata] 
mov	eax, [ebp+public_key] 
call	_silc_auth_public_key_encode_data
mov	ebx, eax
test	eax, eax
jz	loc_641C81AF
mov	tmp, [ebp+hash]
mov	[esp+1Ch], eax	
mov	dword ptr [esp+18h], 1 
lea	eax, [ebp+dst_len]
mov	[esp+14h], eax	
mov	dword ptr [esp+10h], 800h 
lea	esi, [ebp+auth_data]
mov	[esp+0Ch], esi	
mov	eax, [ebp+tmp_len]
mov	[esp+8], eax	
mov	[esp+4], tmp	
mov	eax, [ebp+private_key]
mov	[esp], eax	
call	_silc_pkcs_sign
test	al, al
jz	short loc_641C81A0
movzx	eax, word ptr [ebp+dst_len]
mov	[esp+10h], eax	
mov	[esp+0Ch], esi	
movzx	pubdata_len_0, di
mov	[esp+8], pubdata_len_0 
mov	eax, [ebp+pubdata]
mov	[esp+4], eax	
mov	dword ptr [esp], 2 
call	_silc_auth_payload_encode
mov	edx, eax
mov	ecx, [ebp+tmp_len]
xor	eax, eax
mov	pubdata_len_0, tmp
rep stosb
mov	cx, 801h
mov	tmp, esi
rep stosb
mov	[esp], ebx	
mov	[ebp+var_82C], buf
call	_silc_free
mov	edx, [ebp+var_82C]
mov	eax, edx
add	esp, 84Ch
pop	tmp
pop	esi
pop	edi
leave
retn
align 10h
mov	ecx, [ebp+tmp_len]
mov	pubdata_len_0, tmp
rep stosb
mov	[esp], ebx	
call	_silc_free
xor	edx, edx
mov	eax, buf
add	esp, 84Ch
pop	tmp
pop	esi
pop	tmp
leave
retn
align 10h
public _silc_auth_public_key_auth_generate
push	ebp
mov	ebp, esp
push	edi
push	esi
push	ebx
sub	esp, 2Ch
mov	eax, [ebp+rng]
mov	esi, [ebp+type]
test	eax, eax
jz	short loc_641C8248
mov	dword ptr [esp+4], 100h	
mov	[esp], rng_0	
call	_silc_rng_get_rn_data
mov	ebx, eax
test	randomdata, randomdata
jz	short loc_641C823C
movzx	type_0,	si
mov	[esp+18h], type_0 
mov	eax, [ebp+id]
mov	[esp+14h], eax	
mov	eax, [ebp+hash]
mov	[esp+10h], eax	
mov	dword ptr [esp+0Ch], 100h 
mov	[esp+8], randomdata 
mov	eax, [ebp+private_key]
mov	[esp+4], eax	
mov	eax, [ebp+public_key]
mov	[esp], eax	
call	_silc_auth_public_key_auth_generate_wpub
mov	type_0,	eax
mov	ecx, 100h
xor	eax, eax
mov	edi, randomdata
rep stosb
mov	[esp], ebx	
call	_silc_free
mov	eax, buf
add	esp, 2Ch
pop	ebx
pop	buf
pop	randomdata
leave
retn
align 4
xor	type_0,	type_0
mov	eax, buf
add	esp, 2Ch
pop	randomdata
pop	buf
pop	edi
leave
retn
mov	dword ptr [esp], 100h
call	_silc_rng_global_get_rn_data
mov	ebx, eax
jmp	short loc_641C81E5
public _silc_channel_get_name
push	ebp
mov	ebp, esp
mov	eax, [ebp+payload]
mov	edx, [ebp+channel_name_len]
test	edx, edx
jz	short loc_641C826B
movzx	ecx, word ptr [payload_0+0Ch]
mov	[channel_name_len_0], ecx
mov	payload_0, [payload_0]
leave
retn
align 10h
public _silc_channel_get_id
push	ebp
mov	ebp, esp
mov	eax, [ebp+payload]
mov	edx, [ebp+channel_id_len]
test	edx, edx
jz	short loc_641C8283
movzx	ecx, word ptr [payload_0+0Eh]
mov	[channel_id_len_0], ecx
mov	payload_0, [payload_0+4]
leave
retn
public _silc_channel_get_mode
push	ebp
mov	ebp, esp
mov	eax, [ebp+payload]
mov	eax, [eax+8]
leave
retn
align 4
public _silc_channel_key_get_id
push	ebp
mov	ebp, esp
mov	eax, [ebp+payload]
mov	edx, [ebp+id_len]
test	edx, edx
jz	short loc_641C82A7
movzx	ecx, word ptr [payload_0+0Ch]
mov	[id_len_0], ecx
mov	payload_0, [payload_0]
leave
retn
align 4
public _silc_channel_key_get_cipher
push	ebp
mov	ebp, esp
mov	eax, [ebp+payload]
mov	edx, [ebp+cipher_len]
test	edx, edx
jz	short loc_641C82BF
movzx	ecx, word ptr [payload_0+0Eh]
mov	[cipher_len_0],	ecx
mov	payload_0, [payload_0+4]
leave
retn
public _silc_channel_key_get_key
push	ebp
mov	ebp, esp
mov	eax, [ebp+payload]
mov	edx, [ebp+key_len]
test	edx, edx
jz	short loc_641C82D7
movzx	ecx, word ptr [payload_0+10h]
mov	[key_len_0], ecx
mov	payload_0, [payload_0+8]
leave
retn
public _silc_channel_payload_list_free
push	ebp
mov	ebp, esp
push	edi
push	esi
push	ebx
sub	esp, 4Ch
mov	ebx, [ebp+list]
mov	eax, [ebx]
mov	[ebx+8], eax
mov	dl, [ebx+10h]
and	edx, 0FFFFFFFDh
mov	[ebx+10h], dl
mov	dword ptr [ebx+18h], 0
mov	dword ptr [ebx+14h], 0
xor	eax, eax
mov	[ebx+18h], eax
mov	eax, [ebx+8]
test	eax, eax
jz	short loc_641C838C
test	dl, 2
jz	loc_641C847C
movzx	ecx, word ptr [list_0+0Eh]
mov	ecx, [eax+ecx]
mov	[list_0+8], ecx
mov	[list_0+14h], eax
mov	entry, [eax]
test	entry, entry
jz	short loc_641C8393
mov	eax, [entry]
mov	[esp], eax	
call	_silc_free
mov	eax, [entry+4]
mov	[esp], eax	
call	_silc_free
mov	esi, [list_0]
mov	eax, esi
mov	[list_0+8], esi
and	byte ptr [list_0+10h], 0FDh
xor	ecx, ecx
test	eax, eax
jz	short loc_641C8374
xchg	ax, ax
test	cl, cl
jz	loc_641C8408
movzx	edx, word ptr [list_0+0Eh]
mov	edx, [eax+edx]
mov	[list_0+8], edx
cmp	entry, [eax]
jz	loc_641C841A
mov	eax, edx
test	eax, eax
jnz	short loc_641C8354
mov	[esp], entry	
call	_silc_free
mov	eax, [list_0+14h]
mov	dl, [list_0+10h]
mov	[list_0+18h], eax
mov	eax, [list_0+8]
test	eax, eax
jnz	short loc_641C8310
mov	dword ptr [list_0+14h],	0
mov	ecx, [list_0]
mov	[list_0+8], ecx
and	edx, 0FFFFFFFDh
mov	[list_0+10h], dl
test	ecx, ecx
jz	short loc_641C83F7
xchg	ax, ax
test	byte ptr [list_0+10h], 2
jz	loc_641C84E8
movzx	eax, word ptr [list_0+0Eh]
mov	eax, [ecx+eax]
mov	[list_0+8], eax
mov	eax, [list_0]
test	eax, eax
jz	short loc_641C83DF
cmp	ecx, eax
jz	loc_641C8544
movzx	entry, word ptr	[list_0+0Ch]
jmp	short loc_641C83D6
cmp	ecx, esi
jz	loc_641C84F4
mov	eax, esi
lea	edx, [eax+edi]
mov	esi, [edx]
test	esi, esi
jnz	short loc_641C83CC
cmp	ecx, [list_0+4]
jz	loc_641C8525
			
mov	[esp], ecx	
call	_silc_free
mov	ecx, [list_0+8]
test	ecx, ecx
jnz	short loc_641C83A4
mov	[ebp+list], list_0
add	esp, 4Ch
pop	list_0
pop	esi
pop	entry
leave
jmp	_silc_free
align 4
movzx	edx, word ptr [list_0+0Ch]
mov	edx, [eax+edx]
mov	[list_0+8], edx
cmp	entry, [eax]
jnz	loc_641C836E
mov	[ebp+var_3C], esi
test	esi, esi
jz	short loc_641C8451
cmp	eax, esi
jz	loc_641C854F
movzx	esi, word ptr [list_0+0Ch]
mov	[ebp+var_1C], esi
mov	ecx, [ebp+var_3C]
mov	[ebp+var_20], entry
mov	entry, esi
jmp	short loc_641C8442
align 4
cmp	eax, edx
jz	short loc_641C8488
mov	ecx, edx
lea	esi, [ecx+edi]
mov	edx, [esi]
test	edx, edx
jnz	short loc_641C843C
mov	[ebp+var_3C], ecx
mov	edi, [ebp+var_20]
cmp	eax, [list_0+4]
jz	short loc_641C84C4
cmp	eax, [list_0+14h]
jz	short loc_641C84D0
cmp	eax, [list_0+18h]
jz	short loc_641C84DC
			
mov	[esp], eax	
call	_silc_free
mov	[esp], entry	
call	_silc_free
mov	eax, [list_0+14h]
mov	dl, [list_0+10h]
jmp	loc_641C8382
align 4
movzx	ecx, word ptr [list_0+0Ch]
mov	ecx, [eax+ecx]
jmp	loc_641C8320
mov	[ebp+var_3C], ecx
mov	[ebp+var_2C], esi
mov	edi, [ebp+var_20]
mov	ecx, [ebp+var_1C]
mov	ecx, [eax+ecx]
mov	[ebp+var_20], ecx
mov	esi, [ebp+var_2C]
mov	[esi], ecx
test	ecx, ecx
jz	short loc_641C84B6
test	byte ptr [list_0+10h], 1
jz	short loc_641C84B6
movzx	edx, word ptr [list_0+0Eh]
mov	ecx, [eax+edx]
mov	esi, [ebp+var_20]
mov	[esi+edx], ecx
			
cmp	eax, [list_0+8]
jz	short loc_641C8537
sub	dword ptr [list_0+10h],	4
cmp	eax, [list_0+4]
jnz	short loc_641C8456
mov	edx, [ebp+var_3C]
mov	[list_0+4], edx
cmp	eax, [list_0+14h]
jnz	short loc_641C845B
nop
mov	dword ptr [list_0+14h],	0
cmp	eax, [list_0+18h]
jnz	short loc_641C8460
mov	dword ptr [list_0+18h],	0
jmp	loc_641C8460
movzx	eax, word ptr [list_0+0Ch]
mov	eax, [ecx+eax]
jmp	loc_641C83B5
mov	[ebp+var_20], edx
mov	esi, [ecx+edi]
mov	edi, [ebp+var_20]
mov	[edi], esi
test	esi, esi
jz	short loc_641C8513
test	byte ptr [list_0+10h], 1
jz	short loc_641C8513
movzx	edx, word ptr [list_0+0Eh]
mov	edi, [ecx+edx]
mov	[esi+edx], edi
			
cmp	ecx, [list_0+8]
jz	short loc_641C852D
sub	dword ptr [list_0+10h],	4
cmp	ecx, [list_0+4]
jnz	loc_641C83E8
mov	[list_0+4], eax
jmp	loc_641C83E8
mov	esi, [ebp+var_20]
mov	edx, [esi]
mov	[list_0+8], edx
jmp	short loc_641C8518
mov	ecx, [ebp+var_2C]
mov	edx, [ecx]
mov	[list_0+8], edx
jmp	loc_641C84BB
movzx	entry, word ptr	[list_0+0Ch]
mov	[ebp+var_20], list_0
xor	eax, eax
jmp	short loc_641C84F7
movzx	edx, word ptr [list_0+0Ch]
mov	[ebp+var_1C], edx
mov	[ebp+var_2C], list_0
mov	[ebp+var_3C], 0
jmp	loc_641C8491
align 4
public _silc_channel_payload_free
push	ebp
mov	ebp, esp
push	ebx
sub	esp, 14h
mov	ebx, [ebp+payload]
mov	eax, [ebx]
mov	[esp], eax	
call	_silc_free
mov	eax, [ebx+4]
mov	[esp], eax	
call	_silc_free
mov	[ebp+payload], ebx
add	esp, 14h
pop	ebx
leave
jmp	_silc_free
public _silc_channel_key_payload_free
push	ebp
mov	ebp, esp
push	edi
push	ebx
sub	esp, 10h
mov	ebx, [ebp+payload]
test	ebx, ebx
jz	short loc_641C85E4
mov	eax, [payload_0]
mov	[esp], eax	
call	_silc_free
mov	eax, [payload_0+4]
mov	[esp], eax	
call	_silc_free
mov	edx, [payload_0+8]
test	edx, edx
jz	short loc_641C85D4
movzx	ecx, word ptr [payload_0+10h]
xor	eax, eax
mov	edi, edx
rep stosb
mov	eax, [payload_0+8]
mov	[esp], eax	
call	_silc_free
mov	[ebp+payload], payload_0
add	esp, 10h
pop	payload_0
pop	edi
leave
jmp	_silc_free
align 4
add	esp, 10h
pop	payload_0
pop	edi
leave
retn
align 4
public _silc_channel_key_payload_encode
push	ebp
mov	ebp, esp
push	edi
push	esi
push	ebx
sub	esp, 7Ch
mov	esi, [ebp+id_len]
mov	edi, [ebp+cipher_len]
mov	eax, [ebp+key_len]
mov	word ptr [ebp+len], ax
mov	dword ptr [esp+4], 10h 
mov	dword ptr [esp], 1 
call	_silc_calloc
mov	ebx, eax
test	eax, eax
jz	loc_641C86DE
movzx	id_len_0, si
movzx	edx, word ptr [ebp+len]
movzx	cipher_len_0, di
lea	buffer,	[edi+esi+6]
add	eax, edx
mov	[ebp+len], eax
mov	dword ptr [esp+4], 1 
mov	[esp], eax	
mov	[ebp+var_20], edx
call	_silc_calloc
mov	[buffer], eax
test	eax, eax
mov	edx, [ebp+var_20]
jz	loc_641C86E8
mov	[buffer+4], eax
mov	[buffer+8], eax
mov	ecx, [ebp+len]
add	ecx, eax
mov	[ebp+var_2C], ecx
mov	[buffer+0Ch], ecx
sub	ecx, eax
cmp	[ebp+len], ecx
ja	short loc_641C8671
mov	eax, [ebp+var_2C]
mov	[buffer+8], eax
mov	dword ptr [esp+40h], 1Dh
mov	[esp+3Ch], edx
mov	eax, [ebp+key]
mov	[esp+38h], eax
mov	dword ptr [esp+34h], 1Bh
mov	[esp+30h], edx
mov	dword ptr [esp+2Ch], 3
mov	[esp+28h], edi
mov	eax, [ebp+cipher]
mov	[esp+24h], eax
mov	dword ptr [esp+20h], 1Bh
mov	[esp+1Ch], edi
mov	dword ptr [esp+18h], 3
mov	[esp+14h], esi
mov	eax, [ebp+id]
mov	[esp+10h], eax
mov	dword ptr [esp+0Ch], 1Bh
mov	[esp+8], esi
mov	dword ptr [esp+4], 3
mov	[esp], buffer	
call	_silc_buffer_format
			
mov	eax, buffer
add	esp, 7Ch
pop	buffer
pop	esi
pop	edi
leave
retn
xor	buffer,	buffer
jmp	short loc_641C86DE
public _silc_channel_key_payload_parse
push	ebp
mov	ebp, esp
push	ebx
sub	esp, 44h
mov	ret, [ebp+payload]
mov	[ebp+buffer.head], ret
mov	[ebp+buffer.data], ret
add	ret, [ebp+payload_len]
mov	[ebp+buffer.end], ret
mov	[ebp+buffer.tail], ret
mov	dword ptr [esp+4], 14h 
mov	dword ptr [esp], 1 
call	_silc_calloc
mov	ebx, ret
test	ret, ret
jz	loc_641C87AD
mov	dword ptr [esp+28h], 1Dh
lea	ret, [ret+10h]
mov	[esp+24h], ret
lea	ret, [newp+8]
mov	[esp+20h], ret
mov	dword ptr [esp+1Ch], 14h
lea	ret, [newp+0Eh]
mov	[esp+18h], ret
lea	ret, [newp+4]
mov	[esp+14h], ret
mov	dword ptr [esp+10h], 14h
lea	ret, [newp+0Ch]
mov	[esp+0Ch], ret
mov	[esp+8], newp
mov	dword ptr [esp+4], 14h
lea	ret, [ebp+buffer]
mov	[esp], ret	
call	_silc_buffer_unformat
inc	ret
jz	short err
mov	ret, [newp+0Ch]
test	ax, ax
jz	short loc_641C87B8
mov	edx, [newp+10h]
test	dx, dx
jz	short loc_641C87B8
mov	cx, [newp+0Eh]
test	cx, cx
jz	short loc_641C87B8
movzx	ecx, cx
movzx	ret, ax
lea	ret, [ecx+ret]
movzx	edx, dx
lea	edx, [ret+edx]
mov	ret, [ebp+buffer.tail]
sub	ret, [ebp+buffer.data]
sub	ret, 6
cmp	edx, ret
ja	short loc_641C87B8
mov	ret, newp
add	esp, 44h
pop	newp
leave
retn
align 4
			
mov	dword ptr [esp], offset	aIncorrectChann	
call	_silc_format
mov	[esp+4], ret	
mov	dword ptr [esp], 3 
call	_silc_log_output
mov	ret, [newp]
test	ret, ret
jz	short loc_641C87E2
mov	[esp], ret	
call	_silc_free
mov	ret, [newp+4]
test	ret, ret
jz	short loc_641C87F1
mov	[esp], ret	
call	_silc_free
mov	ret, [newp+8]
test	ret, ret
jz	short loc_641C8800
mov	[esp], ret	
call	_silc_free
mov	[esp], newp	
call	_silc_free
xor	newp, newp
mov	ret, newp
add	esp, 44h
pop	newp
leave
retn
align 4
public _silc_channel_get_id_parse
push	ebp
mov	ebp, esp
sub	esp, 28h
mov	eax, [ebp+payload]
mov	dword ptr [esp+10h], 16h 
mov	edx, [ebp+ret_channel_id]
mov	[esp+0Ch], edx	
mov	dword ptr [esp+8], 3 
movzx	edx, word ptr [eax+0Eh]
mov	[esp+4], edx	
mov	eax, [eax+4]
mov	[esp], eax	
call	_silc_id_str2id
leave
retn
align 4
public _silc_channel_payload_parse_list
push	ebp
mov	ebp, esp
push	edi
push	esi
push	ebx
sub	esp, 5Ch
mov	ret, [ebp+payload]
mov	[ebp+buffer.head], ret
mov	[ebp+buffer.data], ret
add	ret, [ebp+payload_len]
mov	[ebp+buffer.end], ret
mov	[ebp+buffer.tail], ret
mov	dword ptr [esp], 1Ch 
call	_silc_malloc
mov	esi, ret
test	ret, ret
jz	short loc_641C88E0
mov	dword ptr [ret+18h], 0
mov	dword ptr [ret+14h], 0
mov	ret, [ret+10h]
and	ret, 3
mov	[list+10h], ret
mov	word ptr [list+0Ch], 4
mov	word ptr [list+0Eh], 8
mov	byte ptr [list+10h], 1
mov	dword ptr [list+8], 0
mov	dword ptr [list+4], 0
mov	dword ptr [list], 0
jmp	short loc_641C88E0
align 4
movzx	edx, word ptr [list+0Ch]
mov	ecx, [list+4]
mov	[ecx+edx], ret
test	byte ptr [list+10h], 1
jz	short loc_641C88D2
movzx	ecx, word ptr [list+0Eh]
mov	newp, [list+4]
mov	[ret+ecx], ebx
mov	[list+4], ret
mov	dword ptr [ret+edx], 0
add	dword ptr [list+10h], 4
			
mov	ret, [ebp+buffer.tail]
cmp	ret, [ebp+buffer.data]
jz	loc_641C89F2
mov	dword ptr [esp+4], 10h 
mov	dword ptr [esp], 1 
call	_silc_calloc
mov	newp, ret
test	ret, ret
jz	err
mov	dword ptr [esp+24h], 1Dh
lea	ret, [ret+8]
mov	[esp+20h], ret
mov	dword ptr [esp+1Ch], 5
lea	ret, [newp+0Eh]
mov	[esp+18h], ret
lea	ret, [newp+4]
mov	[esp+14h], ret
mov	dword ptr [esp+10h], 14h
lea	ret, [newp+0Ch]
mov	[esp+0Ch], ret
mov	[esp+8], newp
mov	dword ptr [esp+4], 14h
lea	ret, [ebp+buffer]
mov	[esp], ret	
call	_silc_buffer_unformat
inc	ret
jz	err
mov	ecx, [newp+0Ch]
test	cx, cx
jz	short loc_641C89CC
mov	ret, [ebp+buffer.data]
mov	[ebp+var_2C], ret
mov	ret, [ebp+buffer.tail]
sub	ret, [ebp+var_2C]
lea	edx, [ret-8]
movzx	ecx, cx
cmp	ecx, edx
ja	short loc_641C89CC
mov	di, [newp+0Eh]
test	di, di
jz	short loc_641C89CC
movzx	edi, di
cmp	edx, edi
jb	short loc_641C89CC
lea	edi, [ecx+edi]
cmp	edx, edi
jb	short loc_641C89CC
add	edi, 8
cmp	len, ret
ja	short loc_641C89F2
add	len, [ebp+var_2C]
mov	[ebp+buffer.data], edi
mov	dword ptr [esp], 0Ch 
call	_silc_malloc
test	ret, ret
jz	loc_641C88E0
mov	[ret], newp
mov	edx, [list]
test	edx, edx
jnz	loc_641C88B8
mov	[list],	ret
movzx	edx, word ptr [list+0Ch]
jmp	loc_641C88C2
align 4
			
mov	dword ptr [esp], offset	aIncorrectCha_0	
call	_silc_format
mov	[esp+4], ret	
mov	dword ptr [esp], 3 
call	_silc_log_output
			
mov	[esp], list	
call	_silc_channel_payload_list_free
xor	list, list
			
mov	ret, list
add	esp, 5Ch
pop	newp
pop	list
pop	len
leave
retn
public _silc_channel_payload_encode
push	ebp
mov	ebp, esp
push	edi
push	esi
push	ebx
sub	esp, 6Ch
mov	edi, [ebp+channel_id_len]
mov	esi, [ebp+channel_name_len]
mov	dword ptr [esp+4], 10h 
mov	dword ptr [esp], 1 
call	_silc_calloc
mov	ebx, eax
test	eax, eax
jz	loc_641C8AD1
movzx	edx, si
lea	channel_name_len_0, [channel_id_len_0+edx+8]
test	esi, esi
jz	loc_641C8ADB
mov	dword ptr [esp+4], 1 
mov	[esp], esi	
mov	[ebp+var_1C], edx
call	_silc_calloc
mov	[ebp+var_2C], eax
mov	[buffer], eax
test	eax, eax
mov	edx, [ebp+var_1C]
jz	loc_641C8AE0
mov	[buffer+4], eax
mov	[buffer+8], eax
mov	ecx, eax
add	ecx, esi
mov	[buffer+0Ch], ecx
mov	eax, ecx
sub	eax, [ebp+var_2C]
cmp	esi, eax
ja	short loc_641C8A74
mov	[buffer+8], ecx
mov	dword ptr [esp+34h], 1Dh
mov	eax, [ebp+mode]
mov	[esp+30h], eax
mov	dword ptr [esp+2Ch], 5
mov	[esp+28h], channel_id_len_0
mov	eax, [ebp+channel_id]
mov	[esp+24h], eax
mov	dword ptr [esp+20h], 1Bh
mov	[esp+1Ch], channel_id_len_0
mov	dword ptr [esp+18h], 3
mov	[esp+14h], edx
mov	eax, [ebp+channel_name]
mov	[esp+10h], eax
mov	dword ptr [esp+0Ch], 1Bh
mov	[esp+8], edx
mov	dword ptr [esp+4], 3
mov	[esp], buffer	
call	_silc_buffer_format
			
mov	eax, buffer
add	esp, 6Ch
pop	buffer
pop	esi
pop	channel_id_len_0
leave
retn
mov	ecx, [buffer+8]
jmp	short loc_641C8A71
xor	buffer,	buffer
jmp	short loc_641C8AD1
public _silc_channel_payload_parse
push	ebp
mov	ebp, esp
push	ebx
sub	esp, 44h
mov	ret, [ebp+payload]
mov	[ebp+buffer.head], ret
mov	[ebp+buffer.data], ret
add	ret, [ebp+payload_len]
mov	[ebp+buffer.end], ret
mov	[ebp+buffer.tail], ret
mov	dword ptr [esp+4], 10h 
mov	dword ptr [esp], 1 
call	_silc_calloc
mov	ebx, ret
test	ret, ret
jz	short loc_641C8B93
mov	dword ptr [esp+24h], 1Dh
lea	ret, [ret+8]
mov	[esp+20h], ret
mov	dword ptr [esp+1Ch], 5
lea	ret, [newp+0Eh]
mov	[esp+18h], ret
lea	ret, [newp+4]
mov	[esp+14h], ret
mov	dword ptr [esp+10h], 14h
lea	ret, [newp+0Ch]
mov	[esp+0Ch], ret
mov	[esp+8], newp
mov	dword ptr [esp+4], 14h
lea	ret, [ebp+buffer]
mov	[esp], ret	
call	_silc_buffer_unformat
inc	ret
jz	short loc_641C8BB8
mov	edx, [newp+0Ch]
test	dx, dx
jz	short loc_641C8B9C
mov	ret, [ebp+buffer.tail]
sub	ret, [ebp+buffer.data]
sub	ret, 8
movzx	edx, dx
cmp	edx, ret
ja	short loc_641C8B9C
mov	cx, [newp+0Eh]
test	cx, cx
jz	short loc_641C8B9C
movzx	ecx, cx
cmp	ret, ecx
jb	short loc_641C8B9C
add	edx, ecx
cmp	ret, edx
jb	short loc_641C8B9C
mov	ret, newp
add	esp, 44h
pop	newp
leave
retn
align 4
			
mov	dword ptr [esp], offset	aIncorrectCha_0	
call	_silc_format
mov	[esp+4], ret	
mov	dword ptr [esp], 3 
call	_silc_log_output
mov	ret, [newp]
mov	[esp], ret	
call	_silc_free
mov	ret, [newp+4]
mov	[esp], ret	
call	_silc_free
mov	[esp], newp	
call	_silc_free
xor	newp, newp
mov	ret, newp
add	esp, 44h
pop	newp
leave
retn
align 10h
public _silc_command_get
push	ebp
mov	ebp, esp
mov	eax, [ebp+payload]
mov	al, [eax]
leave
retn
align 4
public _silc_command_get_args
push	ebp
mov	ebp, esp
mov	eax, [ebp+payload]
mov	eax, [eax+4]
leave
retn
align 4
public _silc_command_get_ident
push	ebp
mov	ebp, esp
mov	eax, [ebp+payload]
mov	ax, [eax+2]
leave
retn
public _silc_command_set_ident
push	ebp
mov	ebp, esp
mov	edx, [ebp+ident]
mov	eax, [ebp+payload]
mov	[eax+2], dx
leave
retn
align 4
public _silc_command_set_command
push	ebp
mov	ebp, esp
mov	edx, [ebp+command]
mov	eax, [ebp+payload]
mov	[eax], dl
leave
retn
align 4
public _silc_command_get_status
push	ebp
mov	ebp, esp
push	esi
push	ebx
sub	esp, 20h
mov	esi, [ebp+status]
mov	ebx, [ebp+error]
mov	eax, [ebp+payload]
mov	eax, [eax+4]
test	eax, eax
jz	short loc_641C8C5D
lea	edx, [ebp+tmp_len]
mov	[esp+8], edx	
mov	dword ptr [esp+4], 1 
mov	[esp], eax	
call	_silc_argument_get_arg_type
test	eax, eax
jz	short loc_641C8C5D
cmp	[ebp+tmp_len], 2
jz	short loc_641C8C68
			
xor	tmp, tmp
			
add	esp, 20h
pop	error_0
pop	status_0
leave
retn
align 4
mov	dl, [tmp]
test	dl, dl
jz	short loc_641C8C9C
test	status_0, status_0
jz	short loc_641C8C74
mov	[status_0], dl
test	error_0, error_0
jz	short loc_641C8C7D
mov	dl, [tmp+1]
mov	[error_0], dl
mov	dl, [tmp]
cmp	dl, 9
jbe	short loc_641C8C90
test	error_0, error_0
jz	short loc_641C8C5D
mov	[error_0], dl
cmp	byte ptr [tmp],	9
ja	short loc_641C8C5D
nop
cmp	byte ptr [tmp+1], 0
setz	al
jmp	short loc_641C8C5F
align 4
mov	cl, [tmp+1]
test	cl, cl
jz	short loc_641C8C6E
test	status_0, status_0
jz	short loc_641C8CA9
mov	[status_0], cl
test	error_0, error_0
jz	short loc_641C8CB0
mov	byte ptr [error_0], 0
cmp	cl, 9
jbe	short loc_641C8CBB
test	error_0, error_0
jz	short loc_641C8CBB
mov	[error_0], cl
			
cmp	cl, 9
setbe	al
jmp	short loc_641C8C5F
align 4
public _silc_command_payload_free
push	ebp
mov	ebp, esp
push	ebx
sub	esp, 14h
mov	ebx, [ebp+payload]
test	ebx, ebx
jz	short loc_641C8CEC
mov	eax, [payload_0+4]
mov	[esp], eax	
call	_silc_argument_payload_free
mov	[ebp+payload], payload_0
add	esp, 14h
pop	payload_0
leave
jmp	_silc_free
align 4
add	esp, 14h
pop	payload_0
leave
retn
align 4
public _silc_command_payload_parse
push	ebp
mov	ebp, esp
push	esi
push	ebx
sub	esp, 50h
mov	ret, [ebp+payload]
mov	[ebp+buffer.head], ret
mov	[ebp+buffer.data], ret
add	ret, [ebp+payload_len]
mov	[ebp+buffer.end], ret
mov	[ebp+buffer.tail], ret
mov	dword ptr [esp+4], 8 
mov	dword ptr [esp], 1 
call	_silc_calloc
mov	ebx, ret
test	ret, ret
jz	short loc_641C8DA0
mov	dword ptr [esp+24h], 1Dh
lea	ret, [ret+2]
mov	[esp+20h], ret
mov	dword ptr [esp+1Ch], 3
lea	ret, [ebp+args_num]
mov	[esp+18h], ret
mov	dword ptr [esp+14h], 1
mov	[esp+10h], newp
mov	dword ptr [esp+0Ch], 1
lea	ret, [ebp+p_len]
mov	[esp+8], ret
mov	dword ptr [esp+4], 3
lea	ret, [ebp+buffer]
mov	[esp], ret	
call	_silc_buffer_unformat
inc	ret
jz	short loc_641C8DD8
movzx	edx, [ebp+p_len]
mov	ret, [ebp+buffer.data]
mov	ecx, [ebp+buffer.tail]
mov	esi, ecx
sub	esi, ret
cmp	edx, esi
jnz	short loc_641C8DD8
cmp	byte ptr [newp], 0
jz	short loc_641C8E08
cmp	edx, 5
jbe	short loc_641C8D99
add	ret, 6
mov	[ebp+buffer.data], ret
mov	al, [ebp+args_num]
test	al, al
jnz	short loc_641C8DAC
			
mov	ret, newp
add	esp, 50h
pop	newp
pop	esi
leave
retn
align 4
mov	edx, [ebp+buffer.data]
movzx	ret, al
mov	[esp+8], ret	
sub	ecx, edx
mov	[esp+4], ecx	
mov	[esp], edx	
call	_silc_argument_payload_parse
mov	[newp+4], ret
test	ret, ret
jnz	short loc_641C8DA0
mov	[esp], newp	
call	_silc_free
xor	newp, newp
jmp	short loc_641C8DA0
align 4
			
mov	dword ptr [esp], offset	aIncorrectComma	
call	_silc_format
mov	[esp+4], ret	
mov	dword ptr [esp], 3 
call	_silc_log_output
mov	[esp], newp	
call	_silc_free
xor	newp, newp
mov	ret, newp
add	esp, 50h
pop	newp
pop	esi
leave
retn
align 4
mov	dword ptr [esp], offset	aIncorrectCom_0	
jmp	short loc_641C8DDF
align 4
public _silc_command_payload_encode
			
push	ebp
mov	ebp, esp
push	edi
push	esi
push	ebx
sub	esp, 4Ch
mov	al, [ebp+cmd]
mov	[ebp+var_19], al
mov	ecx, [ebp+ident]
mov	[ebp+var_1C], cx
mov	edx, [ebp+argc]
test	edx, edx
jnz	loc_641C8F4C
mov	esi, 6
xor	edi, edi
mov	dword ptr [esp+4], 10h
mov	dword ptr [esp], 1 
call	_silc_calloc
mov	ebx, eax
test	eax, eax
jz	loc_641C8F3F
test	esi, esi
jz	loc_641C8F8E
mov	dword ptr [esp+4], 1 
mov	[esp], esi	
call	_silc_calloc
mov	[buffer], eax
test	eax, eax
jz	loc_641C8F72
mov	[buffer+4], eax
mov	[buffer+8], eax
lea	edx, [eax+esi]
mov	[buffer+0Ch], edx
mov	ecx, edx
sub	ecx, eax
cmp	esi, ecx
ja	short loc_641C8E93
mov	[buffer+8], edx
mov	dword ptr [esp+24h], 1Dh
movzx	eax, [ebp+var_1C]
mov	[esp+20h], ident_0
mov	dword ptr [esp+1Ch], 3
mov	ident_0, [ebp+argc]
mov	[esp+18h], eax
mov	dword ptr [esp+14h], 1
movzx	eax, [ebp+var_19]
mov	[esp+10h], cmd_0
mov	dword ptr [esp+0Ch], 1
mov	[esp+8], esi
mov	dword ptr [esp+4], 3
mov	[esp], buffer	
call	_silc_buffer_format
mov	eax, [ebp+argc]
test	eax, eax
jz	short loc_641C8F3F
mov	edx, [buffer+4]
mov	eax, [buffer+8]
sub	eax, edx
cmp	eax, 5
jbe	short loc_641C8EF8
add	edx, 6
mov	[buffer+4], edx
mov	edx, [args+4]
mov	dword ptr [esp+10h], 1Dh
mov	eax, [args+8]
sub	eax, edx
mov	[esp+0Ch], eax
mov	[esp+8], edx
mov	dword ptr [esp+4], 1Bh
mov	[esp], buffer	
call	_silc_buffer_format
mov	eax, [buffer+4]
sub	eax, 6
cmp	eax, [buffer]
jb	short loc_641C8F2D
mov	[buffer+4], eax
mov	eax, [args]
mov	[esp], eax	
call	_silc_free
mov	[esp], args	
call	_silc_free
			
mov	eax, buffer
add	esp, 4Ch
pop	buffer
pop	esi
pop	args
leave
retn
align 4
mov	eax, [ebp+argv_types]
mov	[esp+0Ch], eax	
mov	eax, [ebp+argv_lens]
mov	[esp+8], eax	
mov	eax, [ebp+argv]
mov	[esp+4], eax	
mov	eax, [ebp+argc]
mov	[esp], eax	
call	_silc_argument_payload_encode
mov	edi, eax
test	eax, eax
jnz	short loc_641C8F80
xor	buffer,	buffer
mov	eax, buffer
add	esp, 4Ch
pop	buffer
pop	esi
pop	args
leave
retn
align 10h
mov	esi, [args+8]
sub	esi, [args+4]
add	esi, 6
jmp	loc_641C8E3C
mov	edx, [buffer+8]
jmp	loc_641C8E90
align 4
public _silc_command_reply_payload_encode_vap
			
push	ebp
mov	ebp, esp
push	edi
push	esi
push	ebx
sub	esp, 7Ch
mov	esi, [ebp+status]
mov	edi, [ebp+error]
mov	ebx, [ebp+ap]
mov	al, [ebp+cmd]
mov	[ebp+var_3D], al
mov	edx, [ebp+ident]
mov	[ebp+var_40], dx
mov	ecx, [ebp+argc]
inc	ecx
mov	dword ptr [esp+4], 4 
mov	[esp], argc_0	
mov	[ebp+items], argc_0
call	_silc_calloc
mov	[ebp+argv], eax
test	eax, eax
mov	ecx, [ebp+items]
jz	loc_641C918C
mov	dword ptr [esp+4], 4 
mov	[esp], ecx	
mov	[ebp+items], argc_0
call	_silc_calloc
mov	[ebp+argv_lens], eax
test	eax, eax
mov	ecx, [ebp+items]
jz	loc_641C91AD
mov	dword ptr [esp+4], 4 
mov	[esp], ecx	
mov	[ebp+items], argc_0
call	_silc_calloc
mov	[ebp+argv_types], eax
test	eax, eax
mov	ecx, [ebp+items]
jz	loc_641C9175
mov	edx, status_0
mov	[ebp+status_data], dl
mov	eax, error_0
mov	[ebp+status_data+1], al
mov	dword ptr [esp+4], 2 
lea	eax, [ebp+status_data]
mov	[esp], eax	
mov	[ebp+items], ecx
call	_silc_memdup
mov	edx, [ebp+argv]
mov	[edx], eax
test	eax, eax
mov	ecx, [ebp+items]
jz	loc_641C916A
mov	edx, [ebp+argv_lens]
mov	dword ptr [edx], 2
mov	esi, [ebp+argv_types]
mov	dword ptr [esi], 1
cmp	ecx, 1
jbe	loc_641C919C
mov	[ebp+var_2C], 1
mov	esi, 1
mov	[ebp+var_5C], i
mov	[ebp+var_50], argc_0
jmp	short loc_641C908B
align 10h
			
inc	[ebp+var_5C]
mov	argc_0,	[ebp+var_5C]
cmp	[ebp+var_50], ecx
jbe	short loc_641C90EC
			
mov	x_type,	[ap_0]
mov	x, [ap_0+4]
add	ap_0, 0Ch
mov	x_len, [ebx-4]
test	x_type,	x_type
jz	short loc_641C9080
test	x, x
jz	short loc_641C9080
test	x_len, x_len
jz	short loc_641C9080
mov	argc_0,	[ebp+var_2C]
shl	ecx, 2
mov	[ebp+var_30], ecx
mov	[esp+4], x_len	
mov	[esp], x	
mov	[ebp+items], x_len
call	_silc_memdup
mov	ecx, [ebp+argv]
mov	i, [ebp+var_30]
mov	[ecx+esi], eax
test	eax, eax
mov	edx, [ebp+items]
jz	loc_641C9198
mov	eax, [ebp+argv_lens]
mov	esi, [ebp+var_30]
mov	[eax+esi], edx
mov	x_len, [ebp+argv_types]
mov	[edx+esi], x_type
inc	[ebp+var_2C]
inc	[ebp+var_5C]
mov	ecx, [ebp+var_5C]
cmp	[ebp+var_50], ecx
ja	short loc_641C908B
nop
mov	x, [ebp+var_2C]
movzx	x_len, [ebp+var_40]
mov	[esp+14h], ident_0 
mov	i, [ebp+argv_types]
mov	[esp+10h], esi	
mov	ident_0, [ebp+argv_lens]
mov	[esp+0Ch], edx	
mov	argc_0,	[ebp+argv]
mov	[esp+8], ecx	
mov	[esp+4], eax	
movzx	eax, [ebp+var_3D]
mov	[esp], cmd_0	
call	_silc_command_payload_encode
mov	esi, eax
xor	ap_0, ap_0
mov	x_type,	[ebp+var_2C]
mov	[ebp+var_2C], buffer
mov	buffer,	[ebp+argv]
lea	esi, [esi+0]
mov	eax, [esi+i*4]
mov	[esp], eax	
call	_silc_free
inc	i
cmp	k, i
jg	short loc_641C912C
mov	esi, [ebp+var_2C]
mov	eax, [ebp+argv]
mov	[esp], eax	
call	_silc_free
mov	edx, [ebp+argv_lens]
mov	[esp], edx	
call	_silc_free
mov	ecx, [ebp+argv_types]
mov	[esp], ecx	
call	_silc_free
mov	eax, buffer
add	esp, 7Ch
pop	i
pop	buffer
pop	k
leave
retn
mov	ecx, [ebp+argv_types]
mov	[esp], ecx	
call	_silc_free
mov	esi, [ebp+argv_lens]
mov	[esp], esi	
call	_silc_free
mov	eax, [ebp+argv]
mov	[esp], eax	
call	_silc_free
nop
xor	esi, esi
mov	eax, buffer
add	esp, 7Ch
pop	ap_0
pop	buffer
pop	edi
leave
retn
xor	esi, esi
jmp	short out
mov	eax, 1
mov	[ebp+var_2C], 1
jmp	loc_641C90EF
mov	ecx, [ebp+argv]
mov	[esp], ecx	
call	_silc_free
xor	status_0, status_0
jmp	short loc_641C918E
public _silc_command_reply_payload_encode_va
push	ebp
mov	ebp, esp
sub	esp, 28h
movzx	buffer,	[ebp+ident]
lea	edx, [ebp+ap]
mov	[esp+14h], edx	
mov	edx, [ebp+argc]
mov	[esp+10h], edx	
mov	[esp+0Ch], buffer 
movzx	buffer,	[ebp+error]
mov	[esp+8], buffer	
movzx	buffer,	[ebp+status]
mov	[esp+4], buffer	
movzx	buffer,	[ebp+cmd]
mov	[esp], buffer	
call	_silc_command_reply_payload_encode_vap
leave
retn
align 4
public _silc_command_payload_encode_vap
push	ebp
mov	ebp, esp
push	edi
push	esi
push	ebx
sub	esp, 5Ch
mov	cl, [ebp+cmd]
mov	edx, [ebp+ident]
mov	ebx, [ebp+argc]
test	ebx, ebx
jnz	loc_641C9294
xor	eax, eax
xor	esi, esi
mov	[ebp+argv_types], 0
xor	edi, edi
xor	ebx, ebx
movzx	ident_0, dx
mov	[esp+14h], ident_0 
mov	ident_0, [ebp+argv_types]
mov	[esp+10h], edx	
mov	[esp+0Ch], argv_lens 
mov	[esp+8], argv	
mov	[esp+4], eax	
movzx	cmd_0, cl
mov	[esp], cmd_0	
call	_silc_command_payload_encode
mov	[ebp+buffer], eax
test	k, k
jz	short loc_641C926D
xor	eax, eax
mov	[ebp+var_24], argv_lens
mov	argv_lens, argv
mov	argv, k
mov	k, i
mov	eax, [argv+i*4]
mov	[esp], eax	
call	_silc_free
inc	i
cmp	k, i
jg	short loc_641C9258
mov	k, argv
mov	argv, [ebp+var_24]
mov	[esp], argv
call	_silc_free
mov	[esp], argv_lens 
call	_silc_free
mov	ecx, [ebp+argv_types]
mov	[esp], ecx	
call	_silc_free
mov	eax, [ebp+buffer]
add	esp, 5Ch
pop	argv
pop	k
pop	argv_lens
leave
retn
align 4
mov	dword ptr [esp+4], 4 
mov	eax, [ebp+argc]
mov	[esp], eax	
mov	[ebp+var_38], ident_0
mov	[ebp+var_3C], cl
call	_silc_calloc
mov	ebx, eax
test	eax, eax
jnz	short loc_641C92BC
			
mov	[ebp+buffer], 0
jmp	short loc_641C9288
mov	dword ptr [esp+4], 4
mov	argv, [ebp+argc]
mov	[esp], eax	
call	_silc_calloc
mov	edi, eax
test	eax, eax
jz	short loc_641C92B3
mov	dword ptr [esp+4], 4 
mov	argv_lens, [ebp+argc]
mov	[esp], eax	
call	_silc_calloc
mov	[ebp+argv_types], eax
test	eax, eax
mov	edx, [ebp+var_38]
mov	cl, [ebp+var_3C]
jz	short loc_641C92B3
xor	esi, esi
mov	[ebp+var_28], 0
mov	[ebp+var_2C], argv_lens
mov	[ebp+var_30], argv
mov	byte ptr [ebp+var_24], cl
mov	[ebp+var_32], dx
mov	edx, k
mov	argv, [ebp+ap]
jmp	short loc_641C931F
align 4
			
inc	[ebp+var_28]
mov	x, [ebp+var_28]
cmp	[ebp+argc], eax
jbe	short loc_641C9361
mov	x_type,	[ap_0]
mov	eax, [ap_0+4]
add	ap_0, 0Ch
mov	x_len, [ebx-4]
test	x_type,	x_type
jz	short loc_641C9314
test	x, x
jz	short loc_641C9314
test	x_len, x_len
jz	short loc_641C9314
mov	[esp+4], x_len	
mov	[esp], x	
mov	[ebp+var_38], k
call	_silc_memdup
mov	edx, [ebp+var_38]
mov	ecx, [ebp+var_30]
mov	[ecx+edx*4], eax
test	eax, eax
jz	short loc_641C9377
mov	eax, [ebp+var_2C]
mov	[eax+k*4], x_len
mov	ecx, [ebp+argv_types]
mov	[ecx+k*4], x_type
inc	k
jmp	short loc_641C9314
mov	x_type,	k
mov	x_len, [ebp+var_2C]
mov	ap_0, [ebp+var_30]
mov	cl, byte ptr [ebp+var_24]
mov	dx, [ebp+var_32]
mov	eax, k
jmp	loc_641C9221
mov	x_type,	k
mov	x_len, [ebp+var_2C]
mov	ap_0, ecx
mov	[ebp+buffer], 0
jmp	out
align 4
public _silc_command_payload_encode_va
push	ebp
mov	ebp, esp
sub	esp, 18h
movzx	buffer,	[ebp+ident]
lea	edx, [ebp+ap]
mov	[esp+0Ch], edx	
mov	edx, [ebp+argc]
mov	[esp+8], edx	
mov	[esp+4], buffer	
movzx	buffer,	[ebp+cmd]
mov	[esp], buffer	
call	_silc_command_payload_encode_vap
leave
retn
align 4
public _silc_command_payload_encode_payload
push	ebp
mov	ebp, esp
push	edi
push	esi
push	ebx
sub	esp, 4Ch
mov	edx, [ebp+payload]
mov	eax, [edx+4]
test	eax, eax
jz	loc_641C9508
mov	[esp], eax	
call	_silc_argument_payload_encode_payload
mov	esi, eax
test	eax, eax
jz	loc_641C951C
mov	edi, [args+8]
sub	len, [args+4]
mov	ecx, [ebp+payload]
mov	args, [ecx+4]
mov	[esp], eax	
call	_silc_argument_get_arg_num
mov	[ebp+argc], eax
add	len, 6
mov	dword ptr [esp+4], 10h 
mov	dword ptr [esp], 1 
call	_silc_calloc
mov	ebx, eax
test	eax, eax
jz	loc_641C9523
test	edi, edi
jz	loc_641C953F
mov	dword ptr [esp+4], 1 
mov	[esp], edi	
call	_silc_calloc
mov	[buffer], eax
test	eax, eax
jz	loc_641C9523
mov	[buffer+4], eax
mov	[buffer+8], eax
lea	edx, [eax+edi]
mov	[buffer+0Ch], edx
mov	ecx, edx
sub	ecx, eax
cmp	ecx, edi
jb	short loc_641C9452
mov	[buffer+8], edx
mov	dword ptr [esp+24h], 1Dh
mov	edx, [ebp+payload]
movzx	eax, word ptr [edx+2]
mov	[esp+20h], eax
mov	dword ptr [esp+1Ch], 3
mov	ecx, [ebp+argc]
mov	[esp+18h], ecx
mov	dword ptr [esp+14h], 1
movzx	eax, byte ptr [edx]
mov	[esp+10h], eax
mov	dword ptr [esp+0Ch], 1
mov	[esp+8], edi
mov	dword ptr [esp+4], 3
mov	[esp], buffer	
call	_silc_buffer_format
test	args, args
jz	short loc_641C94FD
mov	edx, [buffer+4]
mov	eax, [buffer+8]
sub	eax, edx
cmp	eax, 5
jbe	short loc_641C94B6
add	edx, 6
mov	[buffer+4], edx
mov	edx, [args+4]
mov	dword ptr [esp+10h], 1Dh
mov	eax, [args+8]
sub	eax, edx
mov	[esp+0Ch], eax
mov	[esp+8], edx
mov	dword ptr [esp+4], 1Bh
mov	[esp], buffer	
call	_silc_buffer_format
mov	eax, [buffer+4]
sub	eax, 6
cmp	eax, [buffer]
jb	short loc_641C94EB
mov	[buffer+4], eax
mov	eax, [args]
mov	[esp], eax	
call	_silc_free
mov	[esp], args	
call	_silc_free
			
mov	eax, buffer
add	esp, 4Ch
pop	buffer
pop	args
pop	edi
leave
retn
align 4
mov	edi, 6
mov	[ebp+argc], 0
xor	esi, esi
jmp	loc_641C93FB
align 4
xor	edi, edi
jmp	loc_641C93E7
			
xor	buffer,	buffer
test	args, args
jz	short loc_641C94FD
mov	eax, [args]
mov	[esp], eax	
call	_silc_free
mov	[esp], args	
call	_silc_free
xor	buffer,	buffer
jmp	short loc_641C94FD
mov	edx, [buffer+8]
jmp	loc_641C944F
align 4
public _silc_id_payload_get_type
push	ebp
mov	ebp, esp
mov	eax, [ebp+payload]
test	eax, eax
jz	short locret_641C9554
mov	payload_0, [payload_0]
leave
retn
align 4
public _silc_id_payload_get_len
push	ebp
mov	ebp, esp
mov	eax, [ebp+payload]
test	eax, eax
jz	short locret_641C9566
movzx	payload_0, word	ptr [payload_0+2]
leave
retn
public _silc_id_get_len
push	ebp
mov	ebp, esp
mov	edx, [ebp+id]
mov	eax, [ebp+type]
cmp	ax, 2
jz	short loc_641C9594
cmp	ax, 3
jz	short loc_641C9588
dec	ax
jz	short loc_641C9588
xor	eax, eax
leave
retn
align 4
			
movzx	type_0,	byte ptr [id_0+10h]
add	eax, 4
leave
retn
align 4
movzx	type_0,	byte ptr [id_0+10h]
add	eax, 0Ch
leave
retn
align 10h
public _silc_id_dup
			
push	ebp
mov	ebp, esp
sub	esp, 8
mov	edx, [ebp+id]
mov	eax, [ebp+type]
cmp	ax, 2
jz	short loc_641C95D0
cmp	ax, 3
jz	short loc_641C95C0
dec	ax
jz	short loc_641C95C0
xor	eax, eax
leave
retn
			
mov	[ebp+type], 16h
mov	[ebp+id], id_0
leave
jmp	_silc_memdup
mov	[ebp+type], 1Dh
mov	[ebp+id], id_0
leave
jmp	_silc_memdup
public _silc_id_payload_get_data
push	ebp
mov	ebp, esp
sub	esp, 18h
mov	eax, [ebp+payload]
test	eax, eax
jz	short locret_641C9600
movzx	edx, word ptr [payload_0+2]
mov	[esp+4], edx	
mov	payload_0, [payload_0+4]
mov	[esp], eax	
call	_silc_memdup
leave
retn
align 4
public _silc_id_str2id
			
push	ebp
mov	ebp, esp
push	edi
push	esi
push	ebx
sub	esp, 8
mov	ebx, [ebp+id]
mov	edx, [ebp+id_len]
mov	ecx, [ebp+ret_id_size]
mov	eax, [ebp+type]
cmp	edx, 1Ch
ja	short loc_641C9632
cmp	ax, 2
jz	short loc_641C963C
cmp	ax, 3
jz	loc_641C96F0
dec	ax
jz	short loc_641C9694
			
xor	type_0,	type_0
			
add	esp, 8
pop	id_0
pop	esi
pop	edi
leave
retn
cmp	id_len_0, 10h
jz	short loc_641C9646
cmp	id_len_0, 1Ch
jnz	short loc_641C9632
cmp	ret_id_size_0, 1Ch
jbe	short loc_641C9632
xor	type_0,	type_0
mov	edi, [ebp+ret_id]
rep stosb
cmp	id_len_0, 10h
jbe	loc_641C979C
mov	cl, 4
mov	ret_id_0, [ebp+ret_id]
mov	esi, id_0
rep movsd
mov	id_0, 11h
mov	id_len_0, 10h
mov	al, 10h
mov	client_id, [ebp+ret_id]
mov	[edi+10h], al
mov	al, [id_0+edx]
mov	[edi+11h], al
mov	eax, edi
add	eax, 12h
lea	esi, [id_0+esi]
mov	ret_id_size_0, 0Bh
mov	edi, eax
rep movsb
mov	al, 1
jmp	short loc_641C9634
align 4
cmp	id_len_0, 8
jz	short loc_641C969E
cmp	id_len_0, 14h
jnz	short loc_641C9632
cmp	ret_id_size_0, 15h
jbe	short loc_641C9632
xor	eax, eax
mov	edi, [ebp+ret_id]
rep stosb
cmp	id_len_0, 8
jbe	loc_641C97B4
mov	cl, 4
mov	ret_id_0, [ebp+ret_id]
mov	esi, id_0
rep movsd
mov	id_0, 13h
mov	cl, 12h
mov	[ebp+var_10], 11h
mov	[ebp+var_14], 10h
mov	server_id, 10h
mov	eax, edi
mov	id_len_0, [ebp+ret_id]
mov	[edx+10h], al
mov	edi, [ebp+var_14]
movzx	eax, byte ptr [id_0+edi]
shl	eax, 8
mov	edi, [ebp+var_10]
jmp	short loc_641C974B
align 10h
cmp	id_len_0, 8
jz	short loc_641C96FE
cmp	id_len_0, 14h
jnz	loc_641C9632
cmp	ret_id_size_0, 15h
jbe	loc_641C9632
xor	type_0,	type_0
mov	edi, [ebp+ret_id]
rep stosb
cmp	id_len_0, 8
jbe	short loc_641C9774
mov	cl, 4
mov	ret_id_0, [ebp+ret_id]
mov	esi, id_0
rep movsd
mov	id_0, 13h
mov	cl, 12h
mov	[ebp+var_14], 11h
mov	[ebp+var_10], 10h
mov	channel_id, 10h
mov	eax, edi
mov	id_len_0, [ebp+ret_id]
mov	[edx+10h], al
mov	edi, [ebp+var_10]
movzx	eax, byte ptr [id_0+edi]
shl	eax, 8
mov	edi, [ebp+var_14]
movzx	edx, byte ptr [id_0+edi]
or	eax, edx
mov	edx, [ebp+ret_id]
mov	[edx+12h], ax
movzx	eax, byte ptr [id_0+ecx]
shl	eax, 8
movzx	edx, byte ptr [id_0+esi]
or	eax, edx
mov	ecx, [ebp+ret_id]
mov	[ecx+14h], ax
mov	al, 1
jmp	loc_641C9634
align 4
mov	eax, [id_0]
mov	ret_id_size_0, [ebp+ret_id]
mov	[ecx], eax
mov	esi, 7
mov	ecx, 6
mov	[ebp+var_14], 5
mov	[ebp+var_10], 4
mov	ret_id_0, 4
jmp	short loc_641C9736
align 4
mov	eax, [id_0]
mov	id_len_0, [ebp+ret_id]
mov	[edx], eax
mov	esi, 5
mov	edx, 4
mov	al, 4
jmp	loc_641C9670
mov	eax, [id_0]
mov	ret_id_0, [ebp+ret_id]
mov	[edi], eax
mov	esi, 7
mov	ret_id_size_0, 6
mov	[ebp+var_10], 5
mov	[ebp+var_14], 4
mov	edi, 4
jmp	loc_641C96D6
align 10h
public _silc_id_str2id2
			
push	ebp
mov	ebp, esp
push	esi
push	ebx
sub	esp, 14h
mov	ebx, [ebp+id]
mov	esi, [ebp+id_len]
mov	ecx, [ebp+type]
mov	eax, [ebp+ret_id]
mov	edx, ecx
test	eax, eax
jz	short loc_641C980E
mov	[ret_id_0+1Eh],	cx
cmp	cx, 2
jz	short loc_641C9868
cmp	cx, 3
jz	short loc_641C9818
dec	dx
jz	short loc_641C9840
xor	ret_id_0, ret_id_0
add	esp, 14h
pop	id_0
pop	id_len_0
leave
retn
align 4
mov	dword ptr [esp+10h], 16h 
mov	[esp+0Ch], ret_id_0 
mov	dword ptr [esp+8], 3 
mov	[esp+4], id_len_0 
mov	[esp], id_0	
call	_silc_id_str2id
add	esp, 14h
pop	id_0
pop	id_len_0
leave
retn
align 10h
mov	dword ptr [esp+10h], 16h 
mov	[esp+0Ch], ret_id_0 
mov	dword ptr [esp+8], 1 
mov	[esp+4], id_len_0 
mov	[esp], id_0	
call	_silc_id_str2id
add	esp, 14h
pop	id_0
pop	id_len_0
leave
retn
align 4
mov	dword ptr [esp+10h], 1Dh 
mov	[esp+0Ch], ret_id_0 
mov	dword ptr [esp+8], 2 
mov	[esp+4], id_len_0 
mov	[esp], id_0	
call	_silc_id_str2id
add	esp, 14h
pop	id_0
pop	id_len_0
leave
retn
align 10h
public _silc_id_payload_get_id
push	ebp
mov	ebp, esp
sub	esp, 14h
mov	eax, [ebp+payload]
test	eax, eax
jz	short locret_641C98C5
mov	edx, [ebp+ret_id_len]
mov	[esp+10h], edx	
mov	edx, [ebp+ret_id]
mov	[esp+0Ch], edx	
movzx	edx, word ptr [payload_0]
mov	[esp+8], edx	
movzx	edx, word ptr [payload_0+2]
mov	[esp+4], edx	
mov	payload_0, [payload_0+4]
mov	[esp], eax	
call	_silc_id_str2id
leave
retn
align 4
public _silc_id_id2str
			
push	ebp
mov	ebp, esp
push	edi
push	esi
push	ebx
mov	eax, [ebp+id]
mov	edx, [ebp+ret_id]
mov	edi, [ebp+ret_id_len]
mov	ecx, [ebp+type]
cmp	cx, 2
jz	loc_641C9964
cmp	cx, 3
jz	short loc_641C9950
cmp	cx, 1
jz	short loc_641C9950
xor	esi, esi
test	ret_id_len_0, ret_id_len_0
jz	short loc_641C98F8
mov	[ret_id_len_0],	id_len
cmp	id_len,	1Ch
ja	short loc_641C995C
cmp	cx, 2
jz	short loc_641C9970
cmp	cx, 3
jz	short loc_641C990D
dec	cx
jnz	short loc_641C995C
movzx	type_0,	byte ptr [id_0+10h]
mov	ret_id_len_0, ret_id_0
mov	id_len,	id_0
rep movsb
movzx	ecx, byte ptr [id_0+10h]
movzx	ebx, byte ptr [id_0+13h]
mov	[edx+ecx], bl
movzx	ecx, byte ptr [id_0+10h]
mov	bx, [id_0+12h]
mov	[edx+ecx+1], bl
movzx	ecx, byte ptr [id_0+10h]
movzx	ebx, byte ptr [id_0+15h]
mov	[edx+ecx+2], bl
movzx	ecx, byte ptr [id_0+10h]
mov	ax, [id_0+14h]
mov	[edx+ecx+3], al
mov	al, 1
pop	ebx
pop	channel_id
pop	ret_id_0
leave
retn
align 10h
			
movzx	esi, byte ptr [id_0+10h]
add	esi, 4
cmp	[ebp+ret_id_size], id_len
jnb	short loc_641C98F2
			
xor	id_0, id_0
pop	ebx
pop	id_len
pop	edi
leave
retn
align 4
movzx	esi, byte ptr [id_0+10h]
add	esi, 0Ch
jmp	short loc_641C9957
align 10h
movzx	type_0,	byte ptr [id_0+10h]
mov	ret_id_len_0, ret_id_0
mov	id_len,	id_0
rep movsb
movzx	ecx, byte ptr [id_0+10h]
mov	bl, [id_0+11h]
mov	[edx+ecx], bl
movzx	ecx, byte ptr [id_0+10h]
lea	edx, [edx+ecx+1]
lea	client_id, [id_0+12h]
mov	ecx, 0Bh
mov	ret_id_0, edx
rep movsb
mov	al, 1
jmp	short loc_641C995E
public _silc_id_payload_free
push	ebp
mov	ebp, esp
push	ebx
sub	esp, 14h
mov	ebx, [ebp+payload]
test	ebx, ebx
jz	short loc_641C99C4
mov	eax, [payload_0+4]
mov	[esp], eax	
call	_silc_free
mov	[ebp+payload], payload_0
add	esp, 14h
pop	payload_0
leave
jmp	_silc_free
align 4
add	esp, 14h
pop	payload_0
leave
retn
align 4
public _silc_id_payload_encode_data
push	ebp
mov	ebp, esp
push	edi
push	esi
push	ebx
sub	esp, 4Ch
mov	esi, [ebp+id_len]
mov	eax, [ebp+type]
mov	[ebp+var_1A], ax
mov	dword ptr [esp+4], 10h 
mov	dword ptr [esp], 1 
call	_silc_calloc
mov	ebx, eax
test	eax, eax
jz	short loc_641C9A6C
mov	edi, id_len_0
add	edi, 4
jz	short loc_641C9A76
mov	dword ptr [esp+4], 1 
mov	[esp], edi	
call	_silc_calloc
mov	[buffer], eax
test	eax, eax
jz	short loc_641C9A7B
mov	[buffer+4], eax
mov	[buffer+8], eax
lea	edx, [eax+edi]
mov	[buffer+0Ch], edx
mov	ecx, edx
sub	ecx, eax
cmp	edi, ecx
ja	short loc_641C9A2D
mov	[buffer+8], edx
mov	dword ptr [esp+20h], 1Dh
mov	[esp+1Ch], id_len_0
mov	eax, [ebp+id]
mov	[esp+18h], eax
mov	dword ptr [esp+14h], 0Ch
mov	[esp+10h], id_len_0
mov	dword ptr [esp+0Ch], 3
movzx	eax, [ebp+var_1A]
mov	[esp+8], type_0
mov	dword ptr [esp+4], 3
mov	[esp], buffer	
call	_silc_buffer_format
			
mov	eax, buffer
add	esp, 4Ch
pop	buffer
pop	id_len_0
pop	edi
leave
retn
mov	edx, [buffer+8]
jmp	short loc_641C9A2A
xor	buffer,	buffer
jmp	short loc_641C9A6C
align 10h
public _silc_id_payload_encode
push	ebp
mov	ebp, esp
push	esi
push	ebx
sub	esp, 50h
movzx	esi, [ebp+type]
lea	eax, [ebp+len]
mov	[esp+10h], eax	
mov	dword ptr [esp+0Ch], 20h 
lea	ebx, [ebp+id_data]
mov	[esp+8], ebx	
mov	[esp+4], esi	
mov	eax, [ebp+id]
mov	[esp], eax	
call	_silc_id_id2str
test	al, al
jnz	short loc_641C9AC0
xor	eax, eax
add	esp, 50h
pop	ebx
pop	esi
leave
retn
align 10h
mov	[esp+8], esi	
mov	eax, [ebp+len]
mov	[esp+4], eax	
mov	[esp], ebx	
call	_silc_id_payload_encode_data
add	esp, 50h
pop	ebx
pop	esi
leave
retn
align 4
public _silc_id_payload_parse_id
			
push	ebp
mov	ebp, esp
push	esi
push	ebx
sub	esp, 40h
mov	eax, [ebp+data]
mov	ebx, [ebp+ret_id]
test	ebx, ebx
jz	short loc_641C9B5C
mov	[ebp+buffer.head], data_0
mov	[ebp+buffer.data], data_0
add	data_0,	[ebp+len]
mov	[ebp+buffer.end], eax
mov	[ebp+buffer.tail], eax
mov	dword ptr [esp+14h], 1Dh
lea	eax, [ebp+idlen]
mov	[esp+10h], eax
mov	dword ptr [esp+0Ch], 3
lea	eax, [ebp+idlen+2]
mov	[esp+8], eax
mov	dword ptr [esp+4], 3
lea	esi, [ebp+buffer]
mov	[esp], esi	
call	_silc_buffer_unformat
inc	eax
jz	short loc_641C9B5C
cmp	word ptr [ebp+idlen+2],	3
ja	short loc_641C9B5C
mov	ecx, [ebp+buffer.data]
mov	edx, [ebp+buffer.tail]
mov	ret, edx
sub	ret, ecx
cmp	ret, 3
jbe	short loc_641C9B51
lea	ret, [ecx+4]
mov	[ebp+buffer.data], ret
sub	edx, ret
mov	ret, edx
mov	edx, [ebp+idlen]
movzx	ecx, dx
cmp	ecx, ret
jbe	short loc_641C9B68
nop
			
xor	ret, ret
add	esp, 40h
pop	ret_id_0
pop	esi
leave
retn
align 4
cmp	dx, 1Ch
ja	short loc_641C9B5C
mov	dword ptr [esp+10h], 1Dh
mov	[esp+0Ch], ecx
lea	ret, [ebp+id_data]
mov	[esp+8], ret
mov	dword ptr [esp+4], 0Ch
mov	[esp], esi	
call	_silc_buffer_unformat
inc	ret
jz	short loc_641C9B5C
mov	ax, word ptr [ebp+idlen+2]
mov	[ret_id_0+1Eh],	ax
cmp	ax, 2
jz	short loc_641C9BEB
cmp	ax, 1
jz	short loc_641C9BD5
mov	dword ptr [esp+10h], 16h 
mov	[esp+0Ch], ret_id_0 
movzx	ret, ax
mov	[esp+8], ret	
			
movzx	ret, word ptr [ebp+idlen]
mov	[esp+4], ret	
mov	ret, [ebp+id_data]
mov	[esp], ret	
call	_silc_id_str2id
test	al, al
setnz	al
jmp	short loc_641C9B5E
mov	dword ptr [esp+10h], 16h
mov	[esp+0Ch], ret_id_0
mov	dword ptr [esp+8], 1
jmp	short loc_641C9BBB
mov	dword ptr [esp+10h], 1Dh
mov	[esp+0Ch], ret_id_0
mov	dword ptr [esp+8], 2
jmp	short loc_641C9BBB
align 4
public _silc_id_payload_parse
push	ebp
mov	ebp, esp
push	esi
push	ebx
sub	esp, 30h
mov	eax, [ebp+payload]
mov	[ebp+buffer.head], eax
mov	[ebp+buffer.data], eax
add	eax, [ebp+payload_len]
mov	[ebp+buffer.end], eax
mov	[ebp+buffer.tail], eax
mov	dword ptr [esp+4], 8 
mov	dword ptr [esp], 1 
call	_silc_calloc
mov	ebx, eax
test	eax, eax
jz	loc_641C9CC3
mov	dword ptr [esp+14h], 1Dh
lea	newp, [newp+2]
mov	[esp+10h], eax
mov	dword ptr [esp+0Ch], 3
mov	[esp+8], newp
mov	dword ptr [esp+4], 3
lea	esi, [ebp+buffer]
mov	[esp], esi	
call	_silc_buffer_unformat
inc	eax
jz	short err
cmp	word ptr [newp], 3
ja	short err
mov	ecx, [ebp+buffer.data]
mov	edx, [ebp+buffer.tail]
mov	ret, edx
sub	ret, ecx
cmp	ret, 3
jbe	short loc_641C9C8C
lea	ret, [ecx+4]
mov	[ebp+buffer.data], ret
sub	edx, ret
mov	ret, edx
mov	dx, [newp+2]
movzx	ecx, dx
cmp	ecx, ret
ja	short err
cmp	dx, 1Ch
ja	short err
mov	dword ptr [esp+10h], 1Dh
mov	[esp+0Ch], ecx
lea	ret, [newp+4]
mov	[esp+8], ret
mov	dword ptr [esp+4], 16h
mov	[esp], esi	
call	_silc_buffer_unformat
inc	ret
jz	short err
mov	ret, newp
add	esp, 30h
pop	newp
pop	esi
leave
retn
			
mov	[esp], newp
call	_silc_free
xor	newp, newp
mov	ret, newp
add	esp, 30h
pop	newp
pop	esi
leave
retn
align 10h
public _silc_message_get_flags
push	ebp
mov	ebp, esp
mov	eax, [ebp+payload]
mov	eax, [eax+1Ch]
leave
retn
align 4
public _silc_message_get_data
push	ebp
mov	ebp, esp
mov	eax, [ebp+payload]
mov	edx, [ebp+data_len]
test	edx, edx
jz	short loc_641C9CFF
movzx	ecx, word ptr [payload_0+1Eh]
mov	[data_len_0], ecx
mov	payload_0, [payload_0]
leave
retn
align 4
public _silc_message_get_mac
push	ebp
mov	ebp, esp
mov	eax, [ebp+payload]
mov	eax, [eax+8]
leave
retn
align 10h
public _silc_message_signed_get_public_key
push	ebp
mov	ebp, esp
push	edi
push	esi
push	ebx
sub	esp, 2Ch
mov	ebx, [ebp+payload]
mov	edi, [ebp+pk_data]
mov	esi, [ebp+pk_data_len]
mov	eax, [ebx+0Ch]
test	eax, eax
jnz	short loc_641C9D34
xor	eax, eax
add	esp, 2Ch
pop	payload_0
pop	pk_data_len_0
pop	pk_data_0
leave
retn
align 4
lea	edx, [ebp+pk]
mov	[esp+0Ch], edx	
movzx	edx, word ptr [payload_0+14h]
mov	[esp+8], edx	
mov	[esp+4], eax	
movzx	eax, word ptr [payload_0+16h]
mov	[esp], eax	
call	_silc_pkcs_public_key_alloc
test	al, al
jz	short loc_641C9D29
test	pk_data_0, pk_data_0
jz	short loc_641C9D60
mov	eax, [payload_0+0Ch]
mov	[pk_data_0], eax
test	pk_data_len_0, pk_data_len_0
jz	short loc_641C9D6A
movzx	eax, word ptr [payload_0+14h]
mov	[pk_data_len_0], eax
mov	eax, [ebp+pk]
add	esp, 2Ch
pop	payload_0
pop	pk_data_len_0
pop	pk_data_0
leave
retn
align 4
push	ebp
mov	ebp, esp
push	esi
push	ebx
sub	esp, 10h
mov	esi, len
mov	dword ptr [esp+4], 10h 
mov	dword ptr [esp], 1 
call	_silc_calloc
mov	ebx, eax
test	eax, eax
jz	short loc_641C9DC2
test	len, len
jz	short loc_641C9DC2
mov	dword ptr [esp+4], 1 
mov	[esp], len	
call	_silc_calloc
mov	[sb], eax
test	eax, eax
jz	short loc_641C9DCB
mov	[sb+4],	eax
mov	[sb+8],	eax
lea	len, [eax+len]
mov	[sb+0Ch], esi
			
mov	eax, sb
add	esp, 10h
pop	sb
pop	len
leave
retn
xor	sb, sb
jmp	short loc_641C9DC2
align 10h
			
push	ebp
mov	ebp, esp
push	edi
push	ebx
mov	edx, sb
mov	ebx, [sb]
mov	ecx, [sb+0Ch]
sub	ecx, ebx
xor	sb, sb
mov	edi, ebx
rep stosb
mov	eax, [sb]
mov	[sb+8],	eax
mov	[sb+4],	eax
pop	ebx
pop	edi
leave
retn
			
push	ebp
mov	ebp, esp
push	ebx
sub	esp, 14h
mov	ebx, sb
test	sb, sb
jz	short loc_641C9E0F
mov	sb, [sb]
mov	[esp], eax	
call	_silc_free
mov	[esp], sb	
call	_silc_free
add	esp, 14h
pop	sb
leave
retn
align 4
public _silc_message_payload_encode
push	ebp
mov	ebp, esp
push	edi
push	esi
push	ebx
sub	esp, 0ECh
mov	edi, [ebp+rng]
mov	eax, [ebp+flags]
mov	[ebp+var_76], ax
mov	dl, [ebp+generate_iv]
mov	bl, [ebp+private_message]
mov	esi, [ebp+data_len]
test	esi, esi
jz	loc_641CA16A
test	bl, bl
jz	loc_641CA15A
mov	ecx, [ebp+buffer]
test	ecx, ecx
jz	loc_641CA129
mov	[ebp+buf], 0
mov	ecx, [ebp+buffer]
mov	eax, [ecx]
mov	[ecx+8], eax
mov	[ecx+4], eax
test	bl, bl
jnz	short loc_641C9E70
test	dl, dl
jz	loc_641CA05C
			
mov	eax, [ebp+cipher]
test	eax, eax
jz	short loc_641C9E7F
test	dl, dl
jnz	loc_641CA070
mov	[ebp+var_74], 0
lea	private_message_0, [ebp+iv]
mov	[ebp+var_70], ebx
			
mov	i, [ebp+hmac]
test	ebx, ebx
jz	loc_641CA064
mov	eax, [ebp+hmac]
mov	[esp], eax	
call	_silc_hmac_len
mov	[ebp+mac_len], eax
movzx	edx, [ebp+var_76]
mov	[ebp+var_7C], edx
and	edx, 20h
jz	short loc_641C9EDC
mov	ecx, [ebp+public_key]
test	ecx, ecx
jz	loc_641CA0AC
mov	ecx, [ebp+public_key]
mov	[esp], ecx	
call	_silc_pkcs_public_key_get_len
mov	iv_len,	eax
mov	ecx, [ebp+private_key]
mov	[esp], ecx	
call	_silc_pkcs_private_key_get_len
shr	eax, 3
jmp	short loc_641C9EE0
align 4
xor	iv_len,	iv_len
xor	eax, eax
mov	ecx, [ebp+var_74]
mov	ebx, [ebp+data_len]
lea	edx, [ecx+ebx+16h]
add	edx, [ebp+mac_len]
lea	eax, [edx+eax]
add	eax, esi
cmp	eax, 0FFF9h
ja	loc_641CA176
mov	eax, [ebp+data_len]
add	eax, 6
and	eax, 0Fh
mov	esi, 10h
sub	pad_len, eax
mov	edx, [ebp+cipher]
test	edx, edx
jz	loc_641CA0B4
test	rng_0, rng_0
jz	loc_641CA0C0
xor	ebx, ebx
lea	eax, [ebp+pad]
mov	[ebp+mac_len], eax
mov	[esp], rng_0	
call	_silc_rng_get_byte_fast
mov	edx, [ebp+mac_len]
mov	[edx+i], al
inc	i
cmp	pad_len, i
ja	short loc_641C9F28
			
mov	eax, [ebp+var_74]
test	eax, eax
jnz	loc_641CA054
xor	eax, eax
mov	bx, [ebp+var_76]
mov	[ebp+e.flags], bx
mov	edx, [ebp+public_key]
mov	[ebp+e.public_key], edx
mov	ecx, [ebp+private_key]
mov	[ebp+e.private_key], ecx
mov	edx, [ebp+hash]
mov	[ebp+e.hash], edx
mov	ebx, [ebp+cipher]
mov	[ebp+e.cipher],	ebx
mov	edx, [ebp+hmac]
mov	[ebp+e.hmac], edx
mov	edx, [ebp+sender_id]
mov	[ebp+e.sid], edx
mov	edx, [ebp+receiver_id]
mov	[ebp+e.rid], edx
mov	[ebp+e.iv], eax
mov	ecx, [ebp+data_len]
lea	eax, [ecx+pad_len+6]
mov	[ebp+e.payload_len], ax
mov	dword ptr [esp+60h], 1Dh
lea	eax, [ebp+e]
mov	[esp+5Ch], eax
mov	dword ptr [esp+58h], 0
mov	dword ptr [esp+54h], offset _silc_message_payload_encode_encrypt
mov	dword ptr [esp+50h], 1Ah
mov	ebx, [ebp+var_74]
mov	[esp+4Ch], ebx
mov	edx, [ebp+var_70]
mov	[esp+48h], edx
mov	dword ptr [esp+44h], 0Ch
mov	[esp+40h], eax
mov	dword ptr [esp+3Ch], 0
mov	dword ptr [esp+38h], offset _silc_message_payload_encode_sig
mov	dword ptr [esp+34h], 1Ah
mov	[esp+30h], pad_len
mov	ecx, [ebp+mac_len]
mov	[esp+2Ch], ecx
mov	dword ptr [esp+28h], 0Ch
mov	[esp+24h], pad_len
mov	dword ptr [esp+20h], 3
mov	ebx, [ebp+data_len]
mov	[esp+1Ch], ebx
mov	eax, [ebp+data]
mov	[esp+18h], eax
mov	dword ptr [esp+14h], 0Ch
mov	[esp+10h], ebx
mov	dword ptr [esp+0Ch], 3
mov	eax, [ebp+var_7C]
mov	[esp+8], eax
mov	dword ptr [esp+4], 3
mov	edx, [ebp+buffer]
mov	[esp], edx	
call	_silc_buffer_format
test	eax, eax
js	loc_641CA115
			
mov	eax, [ebp+buffer]
add	esp, 0ECh
pop	ebx
pop	pad_len
pop	edi
leave
retn
align 4
mov	eax, [ebp+var_70]
jmp	loc_641C9F48
mov	dl, 1
jmp	loc_641C9E70
align 4
mov	[ebp+mac_len], 0
jmp	loc_641C9EA5
mov	private_message_0, [ebp+cipher]
mov	[esp], ebx	
call	_silc_cipher_get_block_len
mov	[ebp+var_74], eax
test	rng_0, rng_0
jz	short loc_641CA0E9
mov	esi, [ebp+var_74]
test	esi, esi
jz	short loc_641CA0DE
xor	ebx, ebx
lea	ecx, [ebp+iv]
mov	[ebp+var_70], ecx
mov	esi, [ebp+var_74]
mov	[esp], rng_0
call	_silc_rng_get_byte_fast
mov	edx, [ebp+var_70]
mov	[edx+i], al
inc	i
cmp	iv_len,	i
ja	short loc_641CA094
jmp	loc_641C9E8C
xor	iv_len,	iv_len
jmp	loc_641C9EC9
align 4
lea	ebx, [ebp+pad]
mov	[ebp+mac_len], ebx
jmp	loc_641C9F3B
align 10h
xor	ebx, ebx
lea	ecx, [ebp+pad]
mov	[ebp+mac_len], ecx
mov	rng_0, ecx
xchg	ax, ax
call	_silc_rng_global_get_byte_fast
mov	[edi+i], al
inc	i
cmp	pad_len, i
ja	short loc_641CA0CC
jmp	loc_641C9F3B
lea	edx, [ebp+iv]
mov	[ebp+var_70], edx
jmp	loc_641C9E8C
test	eax, eax
jz	short loc_641CA14F
xor	ebx, ebx
lea	ecx, [ebp+iv]
mov	[ebp+var_70], ecx
mov	esi, [ebp+var_74]
mov	[ebp+mac_len], rng_0
mov	rng_0, ecx
lea	iv_len,	[iv_len+0]
call	_silc_rng_global_get_byte_fast
mov	[edi+i], al
inc	i
cmp	iv_len,	i
ja	short loc_641CA100
mov	edi, [ebp+mac_len]
jmp	loc_641C9E8C
mov	eax, [ebp+buf]
call	_silc_buffer_free
mov	[ebp+buffer], 0
jmp	loc_641CA044
xor	eax, eax
mov	[ebp+var_84], dl
call	_silc_buffer_alloc_0
mov	[ebp+buffer], eax
test	eax, eax
mov	dl, [ebp+var_84]
jz	loc_641CA044
mov	[ebp+buf], eax
jmp	loc_641C9E59
lea	eax, [ebp+iv]
mov	[ebp+var_70], eax
jmp	loc_641C9E8C
cmp	[ebp+cipher], 0
jz	short loc_641CA16A
cmp	[ebp+hmac], 0
jnz	loc_641C9E47
			
mov	[ebp+buffer], 0
jmp	loc_641CA044
add	ebx, 10005h
sub	ebx, eax
mov	[ebp+data_len],	ebx
jmp	loc_641C9EFD
align 4
public _silc_message_payload_encrypt
push	ebp
mov	ebp, esp
push	edi
push	esi
push	ebx
sub	esp, 2Ch
mov	ebx, [ebp+data]
mov	edi, [ebp+true_len]
mov	esi, [ebp+hmac]
mov	eax, [ebp+iv]
mov	[esp+10h], eax	
mov	eax, [ebp+data_len]
mov	[esp+0Ch], eax	
mov	[esp+8], ebx	
mov	[esp+4], ebx	
mov	eax, [ebp+cipher]
mov	[esp], eax	
call	_silc_cipher_encrypt
test	al, al
jz	short loc_641CA1EF
mov	[esp], hmac_0	
call	_silc_hmac_init
mov	[esp+8], true_len_0 
mov	[esp+4], data_0	
mov	[esp], hmac_0	
call	_silc_hmac_update
mov	dword ptr [esp+8], 0 
add	data_0,	true_len_0
mov	[esp+4], ebx	
mov	[esp], hmac_0	
call	_silc_hmac_final
mov	al, 1
add	esp, 2Ch
pop	ebx
pop	hmac_0
pop	true_len_0
leave
retn
align 4
			
push	ebp
mov	ebp, esp
push	edi
push	esi
push	ebx
sub	esp, 5Ch
mov	esi, [ebp+buffer]
mov	ebx, [ebp+context]
mov	edi, [ebx+10h]
test	edi, edi
jz	short loc_641CA215
mov	eax, [context_0+14h]
test	eax, eax
jnz	short loc_641CA220
xor	eax, eax
			
add	esp, 5Ch
pop	context_0
pop	buffer_0
pop	mac_len
leave
retn
align 10h
mov	[esp], eax	
call	_silc_hmac_len
mov	edi, eax
mov	eax, [buffer_0+8]
mov	edx, [buffer_0+4]
mov	[ebp+var_3C], edx
mov	ecx, eax
sub	ecx, edx
mov	[ebp+var_1C], ecx
cmp	mac_len, ecx
jbe	short loc_641CA268
mov	edx, [buffer_0+0Ch]
mov	[ebp+var_28], edx
sub	edx, eax
mov	[ebp+var_20], edx
add	edx, [ebp+var_1C]
cmp	mac_len, edx
ja	short loc_641CA2B8
mov	edx, [buffer_0]
mov	ecx, mac_len
sub	ecx, [ebp+var_1C]
mov	[ebp+var_1C], ecx
cmp	[ebp+var_20], ecx
jb	short loc_641CA26A
add	eax, ecx
mov	[buffer_0+8], eax
jmp	short loc_641CA26A
align 4
mov	edx, [buffer_0]
			
mov	eax, [context_0+14h]
mov	[esp+1Ch], eax	
mov	eax, [context_0+10h]
mov	[esp+18h], eax	
mov	eax, [context_0+24h]
mov	[esp+14h], eax	
mov	eax, [context_0+20h]
mov	[esp+10h], eax	
mov	eax, [context_0+18h]
mov	[esp+0Ch], eax	
mov	ecx, [ebp+var_3C]
sub	ecx, edx
mov	[esp+8], ecx	
movzx	eax, word ptr [context_0+1Ch]
mov	[esp+4], eax	
mov	[esp], edx	
call	_silc_message_payload_encrypt
test	al, al
jz	loc_641CA330
mov	eax, mac_len
jmp	loc_641CA217
align 4
mov	edx, [buffer_0]
mov	ecx, [ebp+var_28]
sub	ecx, edx
mov	[ebp+var_2C], ecx
sub	ecx, [ebp+var_1C]
mov	[ebp+var_24], ecx
mov	ecx, [ebp+var_20]
sub	[ebp+var_24], ecx
mov	ecx, [ebp+var_24]
add	ecx, mac_len
mov	[ebp+var_24], ecx
cmp	[ebp+var_2C], ecx
jnb	short loc_641CA31B
mov	[esp+4], ecx	
mov	[esp], edx	
mov	[ebp+var_30], edx
call	_silc_realloc
mov	[ebp+var_20], eax
test	eax, eax
mov	edx, [ebp+var_30]
jz	short loc_641CA330
mov	[buffer_0], eax
mov	ecx, [ebp+var_3C]
sub	ecx, edx
add	ecx, eax
mov	[buffer_0+4], ecx
mov	edx, [ebp+var_1C]
lea	eax, [ecx+edx]
mov	[buffer_0+8], eax
mov	edx, [ebp+var_20]
add	edx, [ebp+var_24]
mov	[buffer_0+0Ch],	edx
mov	[ebp+var_3C], ecx
mov	[ebp+var_28], edx
mov	edx, [ebp+var_20]
mov	ecx, eax
sub	ecx, [ebp+var_3C]
mov	[ebp+var_1C], ecx
mov	ecx, [ebp+var_28]
sub	ecx, eax
mov	[ebp+var_20], ecx
jmp	loc_641CA252
			
or	eax, 0FFFFFFFFh
jmp	loc_641CA217
public _silc_message_payload_decrypt
push	ebp
mov	ebp, esp
push	edi
push	esi
push	ebx
sub	esp, 7Ch
mov	ebx, [ebp+hmac]
mov	dl, [ebp+private_message]
movzx	edi, [ebp+static_key]
movzx	esi, [ebp+check_mac]
mov	[esp], ebx	
mov	[ebp+var_54], dl
call	_silc_hmac_len
mov	[ebp+mac_len], eax
mov	mac_len_0, [ebp+cipher]
mov	[esp], eax	
call	_silc_cipher_get_block_len
mov	[ebp+block_len], eax
mov	dl, [ebp+var_54]
test	dl, dl
jz	short loc_641CA37C
mov	private_message_0, static_key_0
test	dl, dl
jz	loc_641CA4E0
mov	ecx, [ebp+block_len]
mov	[ebp+iv_len], ecx
mov	eax, [ebp+block_len]
add	eax, [ebp+mac_len]
add	eax, [ebp+iv_len]
cmp	eax, [ebp+data_len]
ja	loc_641CA549
mov	eax, check_mac_0
test	al, al
jz	short loc_641CA418
mov	[esp], hmac_0	
call	_silc_hmac_init
mov	eax, [ebp+data_len]
sub	eax, [ebp+mac_len]
mov	[esp+8], eax	
mov	edx, [ebp+data]
mov	[esp+4], edx	
mov	[esp], hmac_0	
call	_silc_hmac_update
mov	eax, [ebp+sender_id_len]
mov	[esp+8], eax	
mov	eax, [ebp+sender_id]
mov	[esp+4], eax	
mov	[esp], hmac_0	
call	_silc_hmac_update
mov	eax, [ebp+receiver_id_len]
mov	[esp+8], eax	
mov	eax, [ebp+receiver_id]
mov	[esp+4], eax	
mov	[esp], hmac_0	
call	_silc_hmac_update
lea	ecx, [ebp+mac_len]
mov	[esp+8], ecx	
lea	eax, [ebp+mac]
mov	[ebp+var_5C], eax
mov	[esp+4], eax	
mov	[esp], hmac_0	
call	_silc_hmac_final
mov	ecx, [ebp+mac_len]
mov	check_mac_0, [ebp+data_len]
sub	esi, ecx
add	esi, [ebp+data]
cmp	ecx, ecx
mov	static_key_0, [ebp+var_5C]
repe cmpsb
jnz	loc_641CA4EC
			
mov	eax, [ebp+iv_len]
test	eax, eax
jz	short loc_641CA494
mov	hmac_0,	[ebp+data_len]
sub	ebx, [ebp+iv_len]
sub	ebx, [ebp+mac_len]
add	ebx, [ebp+data]
mov	[esp+10h], ivp
mov	edx, [ebp+block_len]
mov	[esp+0Ch], edx	
mov	ecx, [ebp+data]
mov	[esp+8], ecx	
mov	[esp+4], ecx	
mov	eax, [ebp+cipher]
mov	[esp], eax	
call	_silc_cipher_decrypt
test	al, al
jz	loc_641CA549
mov	edx, [ebp+data]
movzx	eax, byte ptr [edx+2]
shl	eax, 8
movzx	edx, byte ptr [edx+3]
or	eax, edx
lea	edx, [eax+4]
movzx	totlen,	dx
mov	ecx, [ebp+iv_len]
add	ecx, [ebp+mac_len]
lea	totlen,	[ecx+totlen+2]
cmp	[ebp+data_len],	edx
jb	loc_641CA549
add	eax, 6
movzx	eax, ax
cmp	[ebp+block_len], eax
jbe	short loc_641CA4A4
mov	al, 1
add	esp, 7Ch
pop	ivp
pop	esi
pop	edi
leave
retn
align 4
mov	eax, [ebp+cipher]
mov	[esp], eax	
call	_silc_cipher_get_iv
mov	hmac_0,	eax
jmp	short loc_641CA42B
align 4
mov	edx, [ebp+data]
add	edx, [ebp+block_len]
mov	[esp+10h], ivp	
and	eax, 0FFF0h
add	eax, 10h
sub	eax, [ebp+block_len]
mov	[esp+0Ch], eax	
mov	[esp+8], edx	
mov	[esp+4], edx	
mov	ecx, [ebp+cipher]
mov	[esp], ecx	
call	_silc_cipher_decrypt
test	al, al
setnz	al
add	esp, 7Ch
pop	ivp
pop	esi
pop	edi
leave
retn
align 10h
mov	[ebp+iv_len], 0
jmp	loc_641CA382
mov	[esp], hmac_0	
call	_silc_hmac_init
mov	eax, [ebp+data_len]
sub	eax, [ebp+mac_len]
mov	[esp+8], eax	
mov	ecx, [ebp+data]
mov	[esp+4], ecx	
mov	[esp], hmac_0	
call	_silc_hmac_update
lea	eax, [ebp+mac_len]
mov	[esp+8], eax	
lea	edx, [ebp+mac]
mov	[esp+4], edx	
mov	[esp], hmac_0	
call	_silc_hmac_final
mov	eax, [ebp+mac_len]
mov	edx, [ebp+data_len]
sub	edx, eax
add	edx, [ebp+data]
mov	[esp+8], eax	
lea	ecx, [ebp+mac]
mov	[esp+4], ecx	
mov	[esp], edx	
call	_memcmp
test	eax, eax
jz	loc_641CA418
			
xor	eax, eax
jmp	loc_641CA48A
public _silc_message_payload_free
push	ebp
mov	ebp, esp
push	edi
push	ebx
sub	esp, 10h
mov	ebx, [ebp+payload]
mov	edx, [ebx+10h]
test	edx, edx
jz	short loc_641CA577
movzx	ecx, word ptr [payload_0+18h]
xor	eax, eax
mov	edi, edx
rep stosb
mov	eax, [payload_0+10h]
mov	[esp], eax	
call	_silc_free
mov	eax, [payload_0+0Ch]
mov	[esp], eax	
call	_silc_free
mov	edx, [payload_0]
test	edx, edx
jz	short loc_641CA5AA
movzx	ecx, word ptr [payload_0+1Eh]
xor	eax, eax
mov	edi, edx
rep stosb
test	byte ptr [payload_0+24h], 1
jnz	short loc_641CA5A0
add	esp, 10h
pop	payload_0
pop	edi
leave
retn
align 10h
mov	eax, [payload_0]
mov	[esp], eax	
call	_silc_free
test	byte ptr [payload_0+24h], 1
jz	short loc_641CA598
mov	eax, [payload_0+4]
mov	[esp], eax	
call	_silc_free
mov	[ebp+payload], payload_0
add	esp, 10h
pop	payload_0
pop	edi
leave
jmp	_silc_free
align 4
			
			
push	ebp
mov	ebp, esp
push	edi
push	esi
push	ebx
sub	esp, 5Ch
mov	[ebp+var_24], message_payload
mov	ebx, message_payload_len
mov	[ebp+var_20], pk
mov	edi, [ebp+pk_len]
mov	dword ptr [esp+4], 10h 
mov	dword ptr [esp], 1 
call	_silc_calloc
mov	esi, eax
test	eax, eax
jz	loc_641CA6DB
lea	sign, [message_payload_len+4]
mov	[ebp+var_1C], eax
mov	edx, eax
add	edx, pk_len_0
jz	loc_641CA6E9
mov	dword ptr [esp+4], 1 
mov	[esp], edx	
mov	[ebp+var_28], edx
call	_silc_calloc
mov	[ebp+var_2C], eax
mov	[sign],	eax
test	eax, eax
mov	edx, [ebp+var_28]
jz	loc_641CA6E5
mov	eax, [ebp+var_2C]
mov	[sign+4], eax
mov	[sign+8], eax
mov	ecx, eax
add	ecx, edx
mov	[sign+0Ch], ecx
mov	eax, ecx
sub	eax, [ebp+var_2C]
cmp	edx, eax
ja	short loc_641CA64D
mov	[sign+8], ecx
mov	dword ptr [esp+20h], 1Dh
mov	eax, [ebp+pk_type]
mov	[esp+1Ch], eax
mov	dword ptr [esp+18h], 3
mov	[esp+14h], pk_len_0
mov	dword ptr [esp+10h], 3
mov	[esp+0Ch], message_payload_len
mov	eax, [ebp+var_24]
mov	[esp+8], eax
mov	dword ptr [esp+4], 1Bh
mov	[esp], sign	
call	_silc_buffer_format
mov	edx, [ebp+var_20]
test	edx, edx
jz	short loc_641CA6DB
test	pk_len_0, pk_len_0
jz	short loc_641CA6DB
mov	edx, [sign+4]
mov	eax, [sign+8]
sub	eax, edx
cmp	[ebp+var_1C], eax
ja	short loc_641CA6A9
add	edx, [ebp+var_1C]
mov	[sign+4], edx
mov	dword ptr [esp+10h], 1Dh
mov	[esp+0Ch], pk_len_0
mov	eax, [ebp+var_20]
mov	[esp+8], eax
mov	dword ptr [esp+4], 1Bh
mov	[esp], sign	
call	_silc_buffer_format
mov	eax, [ebp+var_1C]
neg	eax
add	eax, [sign+4]
cmp	eax, [sign]
jb	short loc_641CA6DB
mov	[sign+4], eax
			
mov	eax, sign
add	esp, 5Ch
pop	message_payload_len
pop	sign
pop	pk_len_0
leave
retn
xor	sign, sign
jmp	short loc_641CA6DB
mov	ecx, [sign+8]
jmp	loc_641CA64A
align 4
			
push	ebp
mov	ebp, esp
push	edi
push	esi
push	ebx
sub	esp, 85Ch
mov	ebx, message_payload
mov	esi, [ebp+private_key]
mov	edi, [ebp+hash]
test	message_payload, message_payload
jnz	short loc_641CA71C
			
xor	message_payload, message_payload
			
mov	message_payload, buffer
add	esp, 85Ch
pop	buffer
pop	esi
pop	edi
leave
retn
align 4
test	message_payload_len, message_payload_len
jz	short loc_641CA70C
test	private_key_0, private_key_0
jz	short loc_641CA70C
test	hash_0,	hash_0
jz	short loc_641CA70C
mov	[ebp+pk_len], 0
test	public_key, public_key
jnz	loc_641CA96C
mov	[ebp+pk], 0
mov	[esp], private_key_0
mov	[ebp+message_payload_len], message_payload_len
call	_silc_pkcs_get_type
movzx	eax, ax
mov	[ebp+var_834], eax
mov	[esp+4], eax	
mov	eax, [ebp+pk_len]
mov	[esp], eax	
mov	ecx, [ebp+pk]	
mov	edx, [ebp+message_payload_len] 
mov	eax, message_payload 
call	_silc_message_signed_encode_data
mov	[ebp+sign], eax
test	eax, eax
jz	loc_641CAA06
mov	edx, [ebp+sign]
mov	eax, [edx+4]
mov	[esp+1Ch], hash_0 
mov	dword ptr [esp+18h], 1 
lea	edx, [ebp+auth_len]
mov	[esp+14h], edx	
mov	dword ptr [esp+10h], 800h 
lea	ecx, [ebp+auth_data]
mov	[ebp+var_83C], ecx
mov	[esp+0Ch], ecx	
mov	ecx, [ebp+sign]
mov	edx, [ecx+8]
sub	edx, eax
mov	[esp+8], edx	
mov	[esp+4], eax	
mov	[esp], private_key_0 
call	_silc_pkcs_sign
test	al, al
jz	loc_641CA99A
mov	private_key_0, [ebp+pk_len]
mov	hash_0,	[ebp+auth_len]
mov	dword ptr [esp+4], 10h 
mov	dword ptr [esp], 1 
call	_silc_calloc
mov	message_payload, eax
test	eax, eax
jz	loc_641CA9E1
lea	esi, [esi+edi+6]
test	esi, esi
jz	loc_641CAA23
mov	dword ptr [esp+4], 1 
mov	[esp], esi	
call	_silc_calloc
mov	[buffer], eax
test	eax, eax
jz	loc_641CA9E1
mov	[buffer+4], eax
mov	[buffer+8], eax
lea	edx, [eax+esi]
mov	[buffer+0Ch], edx
mov	ecx, edx
sub	ecx, eax
cmp	esi, ecx
ja	short loc_641CA83B
mov	[buffer+8], edx
mov	dword ptr [esp+14h], 1Dh
mov	eax, [ebp+var_834]
mov	[esp+10h], eax
mov	dword ptr [esp+0Ch], 3
mov	eax, [ebp+pk_len]
mov	[esp+8], eax
mov	dword ptr [esp+4], 3
mov	[esp], buffer	
call	_silc_buffer_format
mov	eax, [ebp+pk_len]
test	eax, eax
jz	loc_641CA964
mov	ecx, [ebp+pk]
test	ecx, ecx
jz	loc_641CA964
mov	ecx, [buffer+4]
mov	edx, [buffer+8]
sub	edx, ecx
cmp	edx, 3
jbe	short loc_641CA898
add	ecx, 4
mov	[buffer+4], ecx
mov	dword ptr [esp+10h], 1Dh
mov	[esp+0Ch], eax
mov	edx, [ebp+pk]
mov	[esp+8], edx
mov	dword ptr [esp+4], 1Bh
mov	[esp], buffer	
call	_silc_buffer_format
mov	edx, [buffer+4]
lea	ecx, [edx-4]
cmp	ecx, [buffer]
jb	loc_641CAA1B
mov	[buffer+4], ecx
mov	eax, [ebp+pk_len]
mov	edx, ecx
			
lea	ecx, [eax+4]
mov	eax, [buffer+8]
sub	eax, edx
cmp	ecx, eax
ja	short loc_641CA8E5
add	edx, ecx
mov	[buffer+4], edx
mov	eax, [ebp+auth_len]
mov	dword ptr [esp+18h], 1Dh
mov	[esp+14h], eax
lea	ecx, [ebp+auth_data]
mov	[esp+10h], ecx
mov	dword ptr [esp+0Ch], 1Bh
mov	[esp+8], eax
mov	dword ptr [esp+4], 3
mov	[esp], buffer	
call	_silc_buffer_format
mov	eax, 0FFFFFFFCh
sub	eax, [ebp+pk_len]
add	eax, [buffer+4]
cmp	eax, [buffer]
jb	short loc_641CA92C
mov	[buffer+4], eax
mov	ecx, 801h
xor	eax, eax
mov	edi, [ebp+var_83C]
rep stosb
mov	eax, [ebp+sign]	
call	_silc_buffer_clear
mov	eax, [ebp+sign]	
call	_silc_buffer_free
mov	edi, [ebp+pk]
mov	[esp], edi	
call	_silc_free
jmp	loc_641CA70E
			
mov	edx, [buffer+4]
jmp	loc_641CA8D4
lea	message_payload, [ebp+pk_len]
mov	[esp+4], eax	
mov	[esp], public_key 
mov	[ebp+message_payload_len], message_payload_len
call	_silc_pkcs_public_key_encode
mov	[ebp+pk], eax
test	eax, eax
mov	edx, [ebp+message_payload_len]
jnz	loc_641CA741
jmp	loc_641CA70C
mov	dword ptr [esp], offset	aCouldNotComput	
call	_silc_format
mov	[esp+4], eax	
mov	dword ptr [esp], 3 
call	_silc_log_output
mov	eax, [ebp+sign]	
call	_silc_buffer_clear
mov	eax, [ebp+sign]	
call	_silc_buffer_free
mov	hash_0,	[ebp+pk]
mov	[esp], edi	
call	_silc_free
xor	message_payload, message_payload
jmp	loc_641CA70E
			
mov	eax, [ebp+sign]	
call	_silc_buffer_clear
mov	eax, [ebp+sign]	
call	_silc_buffer_free
mov	ecx, 801h
xor	eax, eax
mov	edi, [ebp+var_83C]
rep stosb
mov	eax, [ebp+pk]
mov	[esp], eax	
call	_silc_free
xor	buffer,	buffer
jmp	loc_641CA70E
mov	eax, [ebp+pk_len]
jmp	loc_641CA8D4
mov	edx, [buffer+8]
jmp	loc_641CA838
align 4
push	ebp
mov	ebp, esp
push	edi
push	esi
push	ebx
sub	esp, 2Ch
mov	ebx, [ebp+buffer]
mov	esi, [ebp+context]
test	byte ptr [esi],	20h
jnz	short loc_641CAA4C
xor	buffer_0, buffer_0
			
mov	eax, len
add	esp, 2Ch
pop	len
pop	sig
pop	edi
leave
retn
mov	eax, [buffer_0]
mov	ecx, [context_0+4] 
mov	edx, [buffer_0+4]
sub	edx, eax	
mov	edi, [context_0+0Ch]
mov	[esp+4], edi	
mov	context_0, [context_0+8]
mov	[esp], esi	
call	_silc_message_signed_payload_encode
mov	esi, eax
test	eax, eax
jz	short loc_641CAAAC
mov	edx, [sig+4]
mov	dword ptr [esp+10h], 1Dh
mov	sig, [sig+8]
sub	eax, edx
mov	[esp+0Ch], eax
mov	[esp+8], edx
mov	dword ptr [esp+4], 0Ch
mov	[esp], buffer_0	
call	_silc_buffer_format
mov	buffer_0, eax
test	eax, eax
js	short loc_641CAAA5
mov	len, sig	
call	_silc_buffer_free
jmp	short loc_641CAA42
mov	len, sig
call	_silc_buffer_free
or	len, 0FFFFFFFFh
jmp	short loc_641CAA42
align 4
public _silc_message_payload_parse
push	ebp
mov	ebp, esp
push	edi
push	esi
push	ebx
sub	esp, 8Ch
mov	ret, [ebp+payload]
mov	edi, [ebp+cipher]
mov	esi, [ebp+hmac]
mov	ebx, [ebp+message]
mov	dl, [ebp+private_message]
mov	byte ptr [ebp+iv_len], dl
mov	dl, [ebp+static_key]
mov	byte ptr [ebp+var_44], dl
mov	dl, [ebp+no_allocation]
mov	[ebp+var_49], dl
mov	[ebp+buffer.head], ret
mov	[ebp+buffer.data], ret
mov	edx, [ebp+payload_len]
add	edx, ret
mov	[ebp+buffer.end], edx
mov	[ebp+buffer.tail], edx
test	edi, edi
jz	short loc_641CAB45
mov	dword ptr [esp+28h], 1 
mov	ecx, [ebp+receiver_id_len]
mov	[esp+24h], ecx	
mov	ecx, [ebp+receiver_id]
mov	[esp+20h], ecx	
mov	ecx, [ebp+sender_id_len]
mov	[esp+1Ch], ecx	
mov	ecx, [ebp+sender_id]
mov	[esp+18h], ecx	
mov	[esp+14h], hmac_0 
mov	[esp+10h], cipher_0 
movzx	ecx, byte ptr [ebp+var_44]
mov	[esp+0Ch], static_key_0	
movzx	static_key_0, byte ptr [ebp+iv_len]
mov	[esp+8], private_message_0 
sub	edx, ret
mov	[esp+4], edx	
mov	[esp], ret	
call	_silc_message_payload_decrypt
test	al, al
jz	loc_641CAE83
test	hmac_0,	hmac_0
jz	short loc_641CAB53
mov	[esp], hmac_0	
call	_silc_hmac_len
mov	hmac_0,	ret
test	cipher_0, cipher_0
jz	short loc_641CAB6B
cmp	byte ptr [ebp+iv_len], 0
jz	loc_641CACBC
cmp	byte ptr [ebp+var_44], 0
jnz	loc_641CACBC
mov	[ebp+iv_len], 0
test	message_0, message_0
jz	loc_641CAE40
mov	[ebp+newp], 0
mov	ecx, 28h
xor	ret, ret
mov	cipher_0, message_0
rep stosb
mov	message_0, [ebp+stack]
test	edi, edi
jz	loc_641CACCC
and	byte ptr [ebx+24h], 0FEh
cmp	[ebp+var_49], 0
jnz	loc_641CAC6C
mov	dword ptr [esp+28h], 1Dh
lea	ret, [message_0+20h]
mov	[esp+24h], ret
lea	ret, [message_0+4]
mov	[esp+20h], ret
mov	dword ptr [esp+1Ch], 14h
lea	ret, [message_0+1Eh]
mov	[esp+18h], ret
mov	[esp+14h], message_0
mov	dword ptr [esp+10h], 14h
lea	ret, [message_0+1Ch]
mov	[esp+0Ch], ret
mov	dword ptr [esp+8], 3
lea	ret, [ebp+buffer]
mov	[esp+4], ret	
mov	edi, [ebp+stack]
mov	[esp], edi	
call	_silc_buffer_sunformat
inc	ret
jz	err
movzx	ecx, word ptr [message_0+1Eh]
mov	ret, [ebp+buffer.data]
mov	[ebp+var_44], ret
mov	edx, [ebp+buffer.tail]
sub	edx, ret
lea	ret, [edx-6]
sub	ret, mac_len
sub	ret, [ebp+iv_len]
cmp	ecx, ret
ja	loc_641CAE62
movzx	edi, word ptr [message_0+20h]
mov	[ebp+var_5C], edi
add	edi, ecx
mov	[ebp+var_3C], edi
cmp	ret, edi
jb	loc_641CAE62
test	byte ptr [message_0+1Ch], 20h
jz	short loc_641CAC4B
mov	ret, [ebp+var_3C]
add	ret, 6
lea	edi, [ret+mac_len]
add	edi, [ebp+iv_len]
cmp	edi, edx
jb	loc_641CACDC
			
test	mac_len, mac_len
jz	short loc_641CAC57
mov	ret, [ebp+buffer.tail]
sub	ret, mac_len
mov	[message_0+8], ret
			
mov	ret, [ebp+newp]
add	esp, 8Ch
pop	message_0
pop	mac_len
pop	edi
leave
retn
align 4
and	byte ptr [ebx+24h], 0FEh
mov	dword ptr [esp+24h], 1Dh
lea	ret, [message_0+20h]
mov	[esp+20h], ret
lea	ret, [message_0+4]
mov	[esp+1Ch], ret
mov	dword ptr [esp+18h], 0Eh
lea	ret, [message_0+1Eh]
mov	[esp+14h], ret
mov	[esp+10h], message_0
mov	dword ptr [esp+0Ch], 0Eh
lea	ret, [message_0+1Ch]
mov	[esp+8], ret
mov	dword ptr [esp+4], 3
lea	ret, [ebp+buffer]
mov	[esp], ret	
call	_silc_buffer_unformat
jmp	loc_641CABF7
			
mov	[esp], cipher_0
call	_silc_cipher_get_block_len
mov	[ebp+iv_len], ret
jmp	loc_641CAB72
cmp	[ebp+var_49], 0
jnz	short loc_641CAC68
or	byte ptr [ebx+24h], 1
jmp	loc_641CABA5
align 4
mov	edi, [ebp+var_5C]
neg	edi
sub	edi, ecx
sub	edx, [ebp+iv_len]
sub	edx, mac_len
lea	edx, [edi+edx-6]
mov	[ebp+iv_len], edx
add	ret, [ebp+var_44]
mov	[ebp+src.head],	ret
mov	[ebp+src.data],	ret
add	ret, edx
mov	[ebp+src.end], ret
mov	[ebp+src.tail],	ret
mov	dword ptr [esp+14h], 1Dh
lea	ret, [message_0+16h]
mov	[esp+10h], ret
mov	dword ptr [esp+0Ch], 3
lea	ret, [message_0+14h]
mov	[esp+8], ret
mov	dword ptr [esp+4], 3
lea	edi, [ebp+src]
mov	[esp], edi	
call	_silc_buffer_unformat
inc	ret
jz	err
movzx	ret, word ptr [message_0+14h]
mov	edx, [ebp+iv_len]
sub	edx, 4
cmp	ret, edx
ja	err
mov	ecx, [ebp+src.data]
mov	edx, [ebp+src.tail]
sub	edx, ecx
cmp	edx, 3
jbe	short loc_641CAD5D
add	ecx, 4
mov	[ebp+src.data],	ecx
mov	dword ptr [esp+1Ch], 1Dh
lea	edx, [message_0+18h]
mov	[esp+18h], edx
lea	edx, [message_0+10h]
mov	[esp+14h], edx
mov	dword ptr [esp+10h], 14h
mov	[esp+0Ch], ret
lea	ret, [message_0+0Ch]
mov	[esp+8], ret
mov	dword ptr [esp+4], 1Ch
mov	[esp], edi	
call	_silc_buffer_unformat
inc	ret
jz	loc_641CAE20
mov	ecx, [message_0+18h]
movzx	ret, cx
mov	[ebp+iv_len], ret
mov	edi, [ebp+src.data]
movzx	ret, word ptr [message_0+14h]
mov	edx, 0FFFFFFFEh
sub	edx, ret
mov	ret, [ebp+src.tail]
sub	ret, edi
lea	ret, [edx+ret]
cmp	[ebp+iv_len], ret
ja	short loc_641CAE20
sub	edi, 4
cmp	edi, [ebp+src.head]
jb	short loc_641CADCC
mov	[ebp+src.data],	edi
test	cx, cx
jnz	loc_641CAC4B
mov	edx, [message_0+10h]
test	edx, edx
jz	short loc_641CADF0
xor	ret, ret
mov	edi, edx
mov	ecx, [ebp+iv_len]
rep stosb
mov	ret, [message_0+10h]
mov	[esp], ret	
call	_silc_free
			
mov	ret, [message_0+0Ch]
mov	[esp], ret	
call	_silc_free
			
mov	message_0, [ebp+newp]
test	ebx, ebx
jz	loc_641CAC57
mov	edx, [ebp+newp]
mov	[esp], edx	
call	_silc_message_payload_free
mov	[ebp+newp], 0
jmp	loc_641CAC57
align 10h
			
mov	edx, [message_0+10h]
test	edx, edx
jz	short loc_641CADF0
movzx	ecx, word ptr [message_0+18h]
xor	ret, ret
mov	edi, edx
rep stosb
mov	ret, [message_0+10h]
mov	[esp], ret	
call	_silc_free
jmp	short loc_641CADF0
align 10h
mov	dword ptr [esp+4], 28h 
mov	dword ptr [esp], 1 
call	_silc_calloc
mov	message_0, ret
test	ret, ret
jz	short loc_641CAE83
mov	[ebp+newp], ret
jmp	loc_641CAB81
			
mov	dword ptr [esp], offset	aIncorrectMessa
call	_silc_format
mov	[esp+4], ret	
mov	dword ptr [esp], 3 
call	_silc_log_output
jmp	err
			
mov	[ebp+newp], 0
jmp	loc_641CAC57
align 10h
public _silc_message_signed_verify
push	ebp
mov	ebp, esp
push	edi
push	esi
push	ebx
sub	esp, 5Ch
mov	ebx, [ebp+message]
test	byte ptr [ebx+1Ch], 20h
jz	loc_641CB054
cmp	word ptr [message_0+18h], 0
jz	loc_641CB054
mov	edx, [ebp+remote_public_key]
test	edx, edx
jz	loc_641CB054
mov	eax, [ebp+hash]
test	eax, eax
jz	loc_641CB054
mov	ax, [message_0+1Eh]
mov	[ebp+var_1A], ax
mov	edi, [message_0+20h]
mov	dword ptr [esp+4], 10h 
mov	dword ptr [esp], 1 
call	_silc_calloc
mov	esi, eax
test	eax, eax
jz	loc_641CB07C
movzx	tmp, [ebp+var_1A]
movzx	edi, di
lea	edi, [eax+edi+6]
mov	dword ptr [esp+4], 1 
mov	[esp], edi	
call	_silc_calloc
mov	[tmp], eax
test	eax, eax
jz	loc_641CB07C
mov	[tmp+4], eax
mov	[tmp+8], eax
lea	edx, [eax+edi]
mov	[tmp+0Ch], edx
mov	ecx, edx
sub	ecx, eax
cmp	edi, ecx
ja	short loc_641CAF2C
mov	[tmp+8], edx
			
movzx	edx, word ptr [message_0+20h]
movzx	eax, word ptr [message_0+1Eh]
mov	dword ptr [esp+34h], 1Dh
mov	[esp+30h], edx
mov	ecx, [message_0+4]
mov	[esp+2Ch], ecx
mov	dword ptr [esp+28h], 1Bh
mov	[esp+24h], edx
mov	dword ptr [esp+20h], 3
mov	[esp+1Ch], eax
mov	edx, [message_0]
mov	[esp+18h], edx
mov	dword ptr [esp+14h], 1Bh
mov	[esp+10h], eax
mov	dword ptr [esp+0Ch], 3
movzx	eax, word ptr [message_0+1Ch]
mov	[esp+8], eax
mov	dword ptr [esp+4], 3
mov	[esp], tmp	
call	_silc_buffer_format
mov	eax, [tmp+4]	
mov	ecx, [message_0+0Ch] 
mov	edx, [tmp+8]
sub	edx, eax	
movzx	edi, word ptr [message_0+16h]
mov	[esp+4], edi	
movzx	edi, word ptr [message_0+14h]
mov	[esp], edi	
call	_silc_message_signed_encode_data
mov	edx, eax
mov	ecx, [tmp+0Ch]
sub	ecx, [tmp]
xor	eax, eax
mov	edi, [tmp]
rep stosb
mov	eax, [tmp]
mov	[tmp+8], eax
mov	[tmp+4], eax
test	tmp, tmp
jz	short loc_641CAFDF
mov	[esp], eax	
mov	[ebp+ptr], sign
call	_silc_free
mov	[esp], tmp	
call	_silc_free
mov	edx, [ebp+ptr]
test	sign, sign
jz	short loc_641CB054
mov	ecx, [sign+4]
mov	eax, [ebp+hash]
mov	[esp+14h], eax	
mov	eax, [sign+8]
sub	eax, ecx
mov	[esp+10h], eax	
mov	[esp+0Ch], ecx	
movzx	eax, word ptr [message_0+18h]
mov	[esp+8], eax	
mov	eax, [message_0+10h]
mov	[esp+4], eax	
mov	ecx, [ebp+remote_public_key]
mov	[esp], ecx	
mov	[ebp+ptr], sign
call	_silc_pkcs_verify
test	al, al
mov	edx, [ebp+ptr]
jz	short loc_641CB064
mov	message_0, [edx]
mov	ecx, [sign+0Ch]
sub	ecx, ebx
xor	eax, eax
mov	edi, ebx
rep stosb
mov	eax, [sign]
mov	[sign+8], eax
mov	[sign+4], eax
mov	[esp], eax	
mov	[ebp+ptr], sign
call	_silc_free
mov	edx, [ebp+ptr]
mov	[esp], edx	
call	_silc_free
xor	eax, eax
add	esp, 5Ch
pop	ebx
pop	tmp
pop	edi
leave
retn
align 4
			
mov	eax, 1
add	esp, 5Ch
pop	message_0
pop	tmp
pop	edi
leave
retn
align 4
mov	eax, edx	
call	_silc_buffer_clear
mov	edx, [ebp+ptr]
mov	eax, edx	
call	_silc_buffer_free
mov	eax, 1
jmp	short loc_641CB059
			
xor	tmp, tmp
jmp	loc_641CAF2C
align 4
public _silc_notify_get_type
push	ebp
mov	ebp, esp
mov	eax, [ebp+payload]
mov	eax, [eax]
leave
retn
align 10h
public _silc_notify_get_arg_num
push	ebp
mov	ebp, esp
mov	eax, [ebp+payload]
movzx	eax, byte ptr [eax+2]
leave
retn
public _silc_notify_get_args
push	ebp
mov	ebp, esp
mov	eax, [ebp+payload]
mov	eax, [eax+4]
leave
retn
align 4
public _silc_notify_payload_free
push	ebp
mov	ebp, esp
push	ebx
sub	esp, 14h
mov	ebx, [ebp+payload]
test	ebx, ebx
jz	short loc_641CB0D0
mov	eax, [payload_0+4]
mov	[esp], eax	
call	_silc_argument_payload_free
mov	[ebp+payload], payload_0
add	esp, 14h
pop	payload_0
leave
jmp	_silc_free
align 10h
add	esp, 14h
pop	payload_0
leave
retn
align 4
public _silc_notify_payload_encode
push	ebp
mov	ebp, esp
push	edi
push	esi
push	ebx
sub	esp, 6Ch
mov	edx, [ebp+argc]
mov	esi, [ebp+ap]
mov	eax, [ebp+type]
mov	[ebp+var_22], ax
test	edx, edx
jnz	loc_641CB1F4
mov	edi, 5
mov	[ebp+var_1C], 0
xor	ap_0, ap_0
mov	dword ptr [esp+4], 10h
mov	dword ptr [esp], 1 
call	_silc_calloc
mov	i, eax
test	eax, eax
jz	loc_641CB1E7
test	edi, edi
jz	loc_641CB377
mov	dword ptr [esp+4], 1 
mov	[esp], edi	
call	_silc_calloc
mov	[buffer], eax
test	eax, eax
jz	loc_641CB33C
mov	[buffer+4], eax
mov	[buffer+8], eax
lea	edx, [eax+edi]
mov	[buffer+0Ch], edx
mov	ecx, edx
sub	ecx, eax
cmp	ecx, edi
jb	short loc_641CB15B
mov	[buffer+8], edx
mov	dword ptr [esp+1Ch], 1Dh
mov	eax, [ebp+var_1C]
mov	[esp+18h], eax
mov	dword ptr [esp+14h], 1
mov	[esp+10h], edi
mov	dword ptr [esp+0Ch], 3
movzx	eax, [ebp+var_22]
mov	[esp+8], type_0
mov	dword ptr [esp+4], 3
mov	[esp], buffer	
call	_silc_buffer_format
mov	eax, [ebp+var_1C]
test	eax, eax
jz	short loc_641CB1E7
mov	edx, [args+4]
mov	dword ptr [esp+18h], 1Dh
mov	eax, [args+8]
sub	eax, edx
mov	[esp+14h], eax
mov	[esp+10h], edx
mov	dword ptr [esp+0Ch], 0Ch
mov	dword ptr [esp+8], 5
mov	dword ptr [esp+4], 18h
mov	[esp], buffer	
call	_silc_buffer_format
mov	eax, [args]
mov	[esp], eax	
call	_silc_free
mov	[esp], args	
call	_silc_free
			
mov	eax, buffer
add	esp, 6Ch
pop	buffer
pop	args
pop	edi
leave
retn
align 4
mov	dword ptr [esp+4], 4 
mov	[esp], argc_0	
mov	[ebp+items], argc_0
call	_silc_calloc
mov	[ebp+argv], eax
test	eax, eax
mov	edx, [ebp+items]
jz	loc_641CB33C
mov	dword ptr [esp+4], 4 
mov	[esp], edx	
call	_silc_calloc
mov	[ebp+argv_lens], eax
test	eax, eax
mov	edx, [ebp+items]
jz	loc_641CB348
mov	dword ptr [esp+4], 4 
mov	[esp], edx	
mov	[ebp+items], edx
call	_silc_calloc
mov	[ebp+argv_types], eax
test	eax, eax
mov	edx, [ebp+items]
jz	loc_641CB35A
mov	ebx, 1
mov	[ebp+var_1C], 0
mov	[ebp+var_4C], edx
jmp	short loc_641CB26A
align 4
mov	ebx, eax
mov	eax, [ap_0+ebx*8-8]
mov	x_len, [ap_0+ebx*8-4]
test	x, x
jz	short loc_641CB27E
test	x_len, x_len
jnz	loc_641CB304
			
lea	x, [ebx+1]
cmp	[ebp+var_4C], ebx
ja	short loc_641CB268
mov	ecx, [ebp+argv_types]
mov	[esp+0Ch], ecx	
mov	eax, [ebp+argv_lens]
mov	[esp+8], eax	
mov	edx, [ebp+argv]
mov	[esp+4], edx	
mov	ecx, [ebp+var_1C]
mov	[esp], ecx	
call	_silc_argument_payload_encode
mov	ap_0, eax
mov	x_len, [eax+8]
sub	len, [eax+4]
mov	edx, [ebp+var_1C]
test	edx, edx
jz	short loc_641CB2DA
xor	ebx, ebx
mov	[ebp+var_30], len
mov	[ebp+var_34], args
mov	esi, [ebp+var_1C]
mov	len, [ebp+argv]
nop
mov	args, [edi+i*4]
mov	[esp], eax	
call	_silc_free
inc	i
cmp	i, k
jl	short loc_641CB2C4
mov	edi, [ebp+var_30]
mov	k, [ebp+var_34]
mov	eax, [ebp+argv]
mov	[esp], eax	
call	_silc_free
mov	edx, [ebp+argv_lens]
mov	[esp], edx	
call	_silc_free
mov	ecx, [ebp+argv_types]
mov	[esp], ecx	
call	_silc_free
add	len, 5
jmp	loc_641CB104
align 4
mov	argc_0,	[ebp+var_1C]
shl	edx, 2
mov	[ebp+var_30], edx
mov	[esp+4], x_len	
mov	[esp], x	
call	_silc_memdup
mov	edx, [ebp+argv]
mov	ecx, [ebp+var_30]
mov	[edx+ecx], eax
test	eax, eax
jz	short loc_641CB33C
mov	eax, [ebp+argv_lens]
mov	[eax+ecx], x_len
mov	edx, [ebp+argv_types]
mov	[edx+ecx], ebx
inc	[ebp+var_1C]
jmp	loc_641CB27E
align 4
			
xor	buffer,	buffer
mov	eax, buffer
add	esp, 6Ch
pop	buffer
pop	args
pop	x_len
leave
retn
mov	edx, [ebp+argv]
mov	[esp], edx	
call	_silc_free
xor	ebx, ebx
jmp	loc_641CB1E7
mov	ecx, [ebp+argv_lens]
mov	[esp], ecx	
call	_silc_free
mov	eax, [ebp+argv]
mov	[esp], eax	
call	_silc_free
xor	ebx, ebx
jmp	loc_641CB1E7
mov	edx, [buffer+8]
jmp	loc_641CB158
align 10h
public _silc_notify_payload_parse
push	ebp
mov	ebp, esp
push	edi
push	esi
push	ebx
sub	esp, 4Ch
mov	ret, [ebp+payload]
mov	[ebp+buffer.head], ret
mov	[ebp+buffer.data], ret
add	ret, [ebp+payload_len]
mov	[ebp+buffer.end], ret
mov	[ebp+buffer.tail], ret
mov	dword ptr [esp+4], 8 
mov	dword ptr [esp], 1 
call	_silc_calloc
mov	ebx, ret
test	ret, ret
jz	loc_641CB441
mov	dword ptr [esp+1Ch], 1Dh
lea	ret, [ret+2]
mov	[esp+18h], ret
mov	dword ptr [esp+14h], 1
lea	ret, [ebp+len]
mov	[esp+10h], ret
mov	dword ptr [esp+0Ch], 3
mov	[esp+8], newp
mov	dword ptr [esp+4], 3
lea	ret, [ebp+buffer]
mov	[esp], ret	
call	_silc_buffer_unformat
inc	ret
jz	short err
mov	ret, [ebp+buffer.data]
mov	edi, [ebp+buffer.tail]
mov	edx, edi
sub	edx, ret
movzx	esi, [ebp+len]
cmp	esi, edx
ja	short err
movzx	esi, byte ptr [newp+2]
mov	ecx, esi
test	cl, cl
jz	short loc_641CB441
cmp	edx, 4
jbe	short loc_641CB424
add	ret, 5
mov	[ebp+buffer.data], ret
mov	edx, edi
sub	edx, ret
and	esi, 0FFh
mov	[esp+8], esi	
mov	[esp+4], edx	
mov	[esp], ret	
call	_silc_argument_payload_parse
mov	[newp+4], ret
test	ret, ret
jz	short err
			
mov	ret, newp
add	esp, 4Ch
pop	newp
pop	len_0
pop	edi
leave
retn
align 4
			
mov	[esp], newp	
call	_silc_free
xor	newp, newp
jmp	short loc_641CB441
public _silc_notify_payload_encode_args
push	ebp
mov	ebp, esp
push	edi
push	esi
push	ebx
sub	esp, 3Ch
mov	edi, [ebp+args]
mov	eax, [ebp+type]
mov	[ebp+var_1A], ax
test	edi, edi
jz	loc_641CB554
mov	esi, [args_0+8]
sub	esi, [args_0+4]
add	esi, 5
mov	dword ptr [esp+4], 10h
mov	dword ptr [esp], 1 
call	_silc_calloc
mov	ebx, eax
test	eax, eax
jz	loc_641CB54A
test	len, len
jz	loc_641CB55E
mov	dword ptr [esp+4], 1 
mov	[esp], len	
call	_silc_calloc
mov	[buffer], eax
test	eax, eax
jz	loc_641CB566
mov	[buffer+4], eax
mov	[buffer+8], eax
lea	edx, [eax+len]
mov	[buffer+0Ch], edx
mov	ecx, edx
sub	ecx, eax
cmp	len, ecx
ja	short loc_641CB4D3
mov	[buffer+8], edx
mov	dword ptr [esp+1Ch], 1Dh
mov	eax, [ebp+argc]
mov	[esp+18h], eax
mov	dword ptr [esp+14h], 1
mov	[esp+10h], len
mov	dword ptr [esp+0Ch], 3
movzx	eax, [ebp+var_1A]
mov	[esp+8], type_0
mov	dword ptr [esp+4], 3
mov	[esp], buffer	
call	_silc_buffer_format
test	args_0,	args_0
jz	short loc_641CB54A
mov	edx, [args_0+4]
mov	dword ptr [esp+18h], 1Dh
mov	eax, [args_0+8]
sub	eax, edx
mov	[esp+14h], eax
mov	[esp+10h], edx
mov	dword ptr [esp+0Ch], 0Ch
mov	dword ptr [esp+8], 5
mov	dword ptr [esp+4], 18h
mov	[esp], buffer	
call	_silc_buffer_format
			
mov	eax, buffer
add	esp, 3Ch
pop	buffer
pop	len
pop	args_0
leave
retn
mov	esi, 5
jmp	loc_641CB47C
mov	edx, [buffer+8]
jmp	loc_641CB4D0
xor	buffer,	buffer
jmp	short loc_641CB54A
align 4
public _silc_packet_error_string
push	ebp
mov	ebp, esp
mov	eax, [ebp+error]
cmp	eax, 6
ja	short loc_641CB580
mov	error_0, ds:_packet_error[error_0*4]
leave
retn
mov	error_0, offset	aInvalidErrorCo
leave
retn
align 4
public _silc_packet_stream_is_valid
push	ebp
mov	ebp, esp
mov	eax, [ebp+stream]
mov	al, [eax+67h]
shr	al, 1
xor	eax, 1
and	eax, 1
leave
retn
align 4
public _silc_packet_stream_set_router
push	ebp
mov	ebp, esp
mov	eax, [ebp+stream]
or	byte ptr [eax+67h], 1
leave
retn
public _silc_packet_stream_set_iv_included
push	ebp
mov	ebp, esp
mov	eax, [ebp+stream]
or	byte ptr [eax+67h], 4
leave
retn
public _silc_packet_get_sender
push	ebp
mov	ebp, esp
mov	eax, [ebp+packet]
mov	eax, [eax+4]
mov	eax, [eax+14h]
test	eax, eax
jz	short locret_641CB5D6
mov	ecx, [eax]
mov	edx, [ebp+sender_ip]
mov	[edx], ecx
mov	edx, [eax+4]
mov	eax, [ebp+sender_port]
mov	[eax], dx
mov	al, 1
leave
retn
public _silc_packet_stream_ref
push	ebp
mov	ebp, esp
mov	eax, [ebp+stream]
mov	edx, [eax+60h]
mov	edx, [eax+60h]
inc	edx
mov	[eax+60h], edx
leave
retn
align 4
public _silc_packet_get_engine
push	ebp
mov	ebp, esp
mov	eax, [ebp+stream]
mov	eax, [eax+4]
mov	eax, [eax+4]
leave
retn
align 4
public _silc_packet_stream_get_stream
push	ebp
mov	ebp, esp
mov	eax, [ebp+stream]
mov	eax, [eax+8]
leave
retn
align 4
public _silc_packet_set_sid
push	ebp
mov	ebp, esp
mov	eax, [ebp+stream]
mov	edx, [ebp+sid]
test	byte ptr [eax+67h], 4
jz	short loc_641CB620
mov	[stream_0+64h],	dl
mov	al, 1
leave
retn
align 10h
xor	stream_0, stream_0
leave
retn
public _silc_packet_wrap_read_more
push	ebp
mov	ebp, esp
sub	esp, 8
mov	eax, [ebp+context]
test	byte ptr [eax+3Ah], 1
jnz	short locret_641CB650
mov	edx, [context_0+1Ch]
test	edx, edx
jz	short locret_641CB650
mov	ecx, [context_0+20h]
mov	[ebp+type], ecx
mov	[ebp+app_context], 0
mov	[ebp+schedule],	context_0
leave
jmp	edx
align 10h
			
leave
retn
align 4
public _silc_packet_wrap_get_schedule
push	ebp
mov	ebp, esp
xor	eax, eax
leave
retn
align 4
			
push	ebp
mov	ebp, esp
push	ebx
sub	esp, 14h
mov	ebx, sb
test	sb, sb
jz	short loc_641CB67B
mov	sb, [sb]
mov	[esp], eax	
call	_silc_free
mov	[esp], sb	
call	_silc_free
add	esp, 14h
pop	sb
leave
retn
align 4
			
push	ebp
mov	ebp, esp
push	edi
push	esi
push	ebx
sub	esp, 3Ch
mov	esi, entry
mov	edi, [list]
mov	ecx, prev
mov	[list+8], prev
and	byte ptr [list+10h], 0FDh
xor	entry, entry
test	ecx, ecx
jz	short loc_641CB6B8
test	dl, dl
jz	short loc_641CB6C0
movzx	ebx, word ptr [list+0Eh]
mov	ebx, [ecx+ebx]
mov	[list+8], ebx
cmp	[ecx], entry
jz	short loc_641CB6CE
mov	ecx, ebx
test	ecx, ecx
jnz	short loc_641CB6A0
add	esp, 3Ch
pop	ebx
pop	entry
pop	prev
leave
retn
movzx	ebx, word ptr [list+0Ch]
mov	ebx, [ecx+ebx]
mov	[list+8], ebx
cmp	[ecx], entry
jnz	short loc_641CB6B2
mov	edx, prev
test	prev, prev
jz	short loc_641CB6F3
cmp	ecx, prev
jz	loc_641CB76E
movzx	prev, word ptr [list+0Ch]
jmp	short loc_641CB6EA
align 4
cmp	ecx, prev
jz	short loc_641CB714
mov	edx, prev
lea	p, [prev+edi]
mov	entry, [p]
test	prev, prev
jnz	short loc_641CB6E4
cmp	[list+4], ecx
jz	short loc_641CB737
cmp	[list+14h], ecx
jz	short loc_641CB740
cmp	[list+18h], ecx
jz	short loc_641CB74C
			
mov	[esp], ecx	
call	_silc_free
add	esp, 3Ch
pop	p
pop	entry
pop	prev
leave
retn
align 4
mov	[ebp+var_2C], p
mov	prev, [ecx+edi]
mov	p, [ebp+var_2C]
mov	[ebx], esi
test	esi, esi
jz	short loc_641CB729
test	byte ptr [list+10h], 1
jnz	short loc_641CB758
			
cmp	[list+8], ecx
jz	short loc_641CB764
sub	dword ptr [list+10h], 4
cmp	[list+4], ecx
jnz	short loc_641CB6F8
mov	[list+4], prev
cmp	[list+14h], ecx
jnz	short loc_641CB6FD
nop
mov	dword ptr [list+14h], 0
cmp	[list+18h], ecx
jnz	short loc_641CB702
mov	dword ptr [list+18h], 0
jmp	short loc_641CB702
align 4
movzx	edi, word ptr [list+0Eh]
mov	ebx, [ecx+edi]
mov	[esi+edi], ebx
jmp	short loc_641CB729
mov	esi, [ebp+var_2C]
mov	ebx, [esi]
mov	[list+8], ebx
jmp	short loc_641CB72E
mov	[ebp+var_2C], list
movzx	prev, word ptr [list+0Ch]
xor	prev, prev
jmp	short loc_641CB717
align 4
push	ebp
mov	ebp, esp
sub	esp, 8
leave
jmp	_silc_free
			
push	ebp
mov	ebp, esp
push	esi
push	ebx
sub	esp, 10h
mov	esi, len
mov	dword ptr [esp+4], 10h 
mov	dword ptr [esp], 1 
call	_silc_calloc
mov	ebx, eax
test	eax, eax
jz	short loc_641CB7D2
test	len, len
jz	short loc_641CB7D2
mov	dword ptr [esp+4], 1 
mov	[esp], len	
call	_silc_calloc
mov	[sb], eax
test	eax, eax
jz	short loc_641CB7DB
mov	[sb+4],	eax
mov	[sb+8],	eax
lea	len, [eax+len]
mov	[sb+0Ch], esi
			
mov	eax, sb
add	esp, 10h
pop	sb
pop	len
leave
retn
xor	sb, sb
jmp	short loc_641CB7D2
align 10h
push	ebp
mov	ebp, esp
push	esi
push	ebx
sub	esp, 10h
mov	esi, [ebp+packet]
mov	ebx, [ebp+callback_context]
test	byte ptr [ebx+3Ah], 1
jnz	short loc_641CB860
mov	edx, [callback_context_0+1Ch]
test	edx, edx
jz	short loc_641CB860
mov	eax, [callback_context_0+8]
mov	[esp], eax	
call	_silc_mutex_lock
mov	eax, [callback_context_0+24h]
test	eax, eax
jz	short loc_641CB86C
movzx	eax, word ptr [callback_context_0+30h]
mov	edx, [callback_context_0+28h]
mov	[edx+eax], packet_0
test	byte ptr [callback_context_0+34h], 1
jz	short loc_641CB827
movzx	edx, word ptr [callback_context_0+32h]
mov	ecx, [callback_context_0+28h]
mov	[packet_0+edx],	ecx
mov	[callback_context_0+28h], packet_0
mov	dword ptr [packet_0+eax], 0
add	dword ptr [callback_context_0+34h], 4
mov	eax, [callback_context_0+8]
mov	[esp], eax	
call	_silc_mutex_unlock
mov	eax, [callback_context_0+20h]
mov	[esp+8], eax
mov	dword ptr [esp+4], 0
mov	[esp], callback_context_0
call	dword ptr [callback_context_0+1Ch]
mov	al, 1
add	esp, 10h
pop	callback_context_0
pop	packet_0
leave
retn
align 10h
			
xor	eax, eax
add	esp, 10h
pop	callback_context_0
pop	packet_0
leave
retn
align 4
mov	[callback_context_0+24h], packet_0
movzx	eax, word ptr [callback_context_0+30h]
jmp	short loc_641CB817
align 4
public _silc_packet_free
			
push	ebp
mov	ebp, esp
push	edi
push	esi
push	ebx
sub	esp, 1Ch
mov	ebx, [ebp+packet]
mov	esi, [ebx+4]
mov	dword ptr [ebx+4], 0
mov	dword ptr [ebx+1Ch], 0
mov	dword ptr [ebx+18h], 0
mov	eax, [ebx+8]
mov	[ebx+10h], eax
mov	[ebx+0Ch], eax
mov	eax, [stream+4]
mov	eax, [eax+4]
mov	eax, [eax]
mov	[esp], eax	
call	_silc_mutex_lock
mov	eax, [stream+4]
mov	edx, [eax+4]
mov	ecx, [edx+28h]
test	ecx, ecx
jz	short loc_641CB928
movzx	ecx, word ptr [edx+34h]
mov	edx, [edx+2Ch]
mov	[edx+ecx], packet_0
mov	edx, [eax+4]
test	byte ptr [edx+38h], 1
jz	short loc_641CB8DF
movzx	ecx, word ptr [edx+36h]
mov	edi, [edx+2Ch]
mov	[packet_0+ecx],	edi
mov	[edx+2Ch], packet_0
mov	eax, [eax+4]
movzx	edx, word ptr [eax+34h]
mov	dword ptr [packet_0+edx], 0
add	dword ptr [eax+38h], 4
mov	eax, [stream+4]
mov	eax, [eax+4]
mov	edx, [eax+38h]
and	edx, 0FFFFFFFCh
cmp	edx, 4
jnz	short loc_641CB915
mov	edx, [eax+28h]
mov	[eax+30h], edx
and	byte ptr [eax+38h], 0FDh
mov	eax, [stream+4]
mov	eax, [eax+4]
mov	eax, [eax]
mov	[ebp+packet], eax
add	esp, 1Ch
pop	packet_0
pop	stream
pop	edi
leave
jmp	_silc_mutex_unlock
align 4
mov	[edx+28h], packet_0
jmp	short loc_641CB8CC
align 10h
public _silc_packet_get_keys
			
push	ebp
mov	ebp, esp
push	edi
push	esi
push	ebx
sub	esp, 1Ch
mov	ebx, [ebp+stream]
mov	edi, [ebp+send_hmac]
mov	esi, [ebp+receive_hmac]
mov	ecx, [ebx+30h]
test	ecx, ecx
jz	short loc_641CB99C
			
mov	eax, [stream_0+0Ch]
mov	[esp], eax	
call	_silc_mutex_lock
mov	edx, [ebp+send_key]
test	edx, edx
jz	short loc_641CB963
mov	eax, [stream_0+30h]
mov	edx, [ebp+send_key]
mov	[edx], eax
mov	eax, [ebp+receive_key]
test	eax, eax
jz	short loc_641CB972
mov	eax, [stream_0+40h]
mov	edx, [ebp+receive_key]
mov	[edx], eax
test	send_hmac_0, send_hmac_0
jz	short loc_641CB97B
mov	eax, [stream_0+38h]
mov	[send_hmac_0], eax
test	receive_hmac_0,	receive_hmac_0
jz	short loc_641CB984
mov	eax, [stream_0+48h]
mov	[receive_hmac_0], eax
mov	eax, [stream_0+0Ch]
mov	[esp], eax	
call	_silc_mutex_unlock
mov	al, 1
add	esp, 1Ch
pop	stream_0
pop	receive_hmac_0
pop	send_hmac_0
leave
retn
align 4
mov	edx, [stream_0+40h]
test	edx, edx
jnz	short loc_641CB949
mov	eax, [stream_0+38h]
test	eax, eax
jnz	short loc_641CB949
mov	ecx, [stream_0+48h]
test	ecx, ecx
jnz	short loc_641CB949
xor	eax, eax
jmp	short loc_641CB991
align 4
			
push	ebp
mov	ebp, esp
push	edi
push	esi
push	ebx
sub	esp, 3Ch
mov	esi, packet
mov	ebx, [packet+4]
mov	packet,	[stream+10h]
test	eax, eax
jnz	short loc_641CBA22
mov	eax, [stream+0Ch]
mov	[esp], eax	
call	_silc_mutex_unlock
mov	eax, [stream+4]
mov	eax, [eax+4]
mov	edx, [eax+0Ch]
mov	ecx, [stream+18h]
mov	[esp+10h], ecx
mov	ecx, [eax+10h]
mov	[esp+0Ch], ecx
mov	[esp+8], packet
mov	[esp+4], stream
mov	[esp], eax
call	dword ptr [edx]
test	al, al
jz	loc_641CBBA8
			
mov	eax, [stream+0Ch]
mov	[esp], eax	
call	_silc_mutex_lock
mov	al, [stream+67h]
shr	al, 1
xor	eax, 1
and	eax, 1
add	esp, 3Ch
pop	stream
pop	packet
pop	p
leave
retn
mov	edx, [eax]
mov	[eax+8], edx
and	byte ptr [eax+10h], 0FDh
mov	dword ptr [eax+18h], 0
mov	dword ptr [eax+14h], 0
mov	[ebp+default_sent], 0
			
mov	pt, [stream+10h]
mov	edx, [eax+14h]
mov	[eax+18h], edx
mov	edx, [eax+8]
test	edx, edx
jz	loc_641CBB41
test	byte ptr [eax+10h], 2
jz	loc_641CBB35
movzx	ecx, word ptr [eax+0Eh]
mov	ecx, [edx+ecx]
mov	[eax+8], ecx
mov	[eax+14h], edx
mov	p, [edx]
test	p, p
jz	loc_641CBB48
cmp	[ebp+default_sent], 0
jnz	loc_641CBB2C
mov	eax, [p+0Ch]
test	eax, eax
jle	short loc_641CBAEA
mov	eax, [p]
test	pt, pt
jz	short loc_641CBAA3
mov	dl, [pt]
test	dl, dl
jz	short loc_641CBA3D
mov	cl, [packet+22h]
cmp	dl, cl
jz	short loc_641CBAA3
xchg	ax, ax
inc	pt
mov	dl, [pt]
test	dl, dl
jz	short loc_641CBA3D
cmp	cl, dl
jnz	short loc_641CBA98
			
mov	pt, [stream+0Ch]
mov	[esp], eax	
call	_silc_mutex_unlock
mov	eax, [p+4]
mov	edx, [stream+18h]
mov	[esp+10h], edx
mov	edx, [p+8]
mov	[esp+0Ch], edx
mov	[esp+8], packet
mov	[esp+4], stream
mov	edx, [stream+4]
mov	edx, [edx+4]
mov	[esp], edx
call	dword ptr [eax]
test	al, al
jnz	loc_641CBA04
mov	eax, [stream+0Ch]
mov	[esp], eax	
call	_silc_mutex_lock
jmp	loc_641CBA3D
mov	eax, [stream+0Ch]
mov	[esp], eax	
call	_silc_mutex_unlock
mov	eax, [stream+4]
mov	eax, [eax+4]
mov	edx, [eax+0Ch]
mov	ecx, [stream+18h]
mov	[esp+10h], ecx
mov	ecx, [eax+10h]
mov	[esp+0Ch], ecx
mov	[esp+8], packet
mov	[esp+4], stream
mov	[esp], eax
call	dword ptr [edx]
test	al, al
jnz	loc_641CBA04
mov	eax, [stream+0Ch]
mov	[esp], eax	
call	_silc_mutex_lock
mov	[ebp+default_sent], 1
jmp	loc_641CBA83
movzx	ecx, word ptr [eax+0Ch]
mov	ecx, [edx+ecx]
jmp	loc_641CBA62
mov	dword ptr [eax+14h], 0
cmp	[ebp+default_sent], 0
jnz	short loc_641CBB90
mov	eax, [stream+0Ch]
mov	[esp], eax	
call	_silc_mutex_unlock
mov	eax, [stream+4]
mov	eax, [eax+4]
mov	edx, [eax+0Ch]
mov	ecx, [stream+18h]
mov	[esp+10h], ecx
mov	ecx, [eax+10h]
mov	[esp+0Ch], ecx
mov	[esp+8], packet
mov	[esp+4], stream
mov	[esp], eax
call	dword ptr [edx]
test	al, al
jnz	loc_641CBA04
mov	eax, [stream+0Ch]
mov	[esp], eax	
call	_silc_mutex_lock
mov	[esp], packet	
call	_silc_packet_free
mov	al, [stream+67h]
shr	al, 1
xor	eax, 1
and	eax, 1
jmp	loc_641CBA1A
mov	[esp], packet	
call	_silc_packet_free
jmp	loc_641CBA04
align 4
public _silc_packet_get_context
push	ebp
mov	ebp, esp
push	esi
push	ebx
sub	esp, 10h
mov	ebx, [ebp+stream]
mov	eax, [ebx+0Ch]
mov	[esp], eax	
call	_silc_mutex_lock
mov	esi, [ebx+18h]
mov	eax, [ebx+0Ch]
mov	[esp], eax	
call	_silc_mutex_unlock
mov	eax, context
add	esp, 10h
pop	ebx
pop	context
leave
retn
align 4
public _silc_packet_set_context
push	ebp
mov	ebp, esp
push	esi
push	ebx
sub	esp, 10h
mov	ebx, [ebp+stream]
mov	esi, [ebp+stream_context]
mov	eax, [ebx+0Ch]
mov	[esp], eax	
call	_silc_mutex_lock
mov	[ebx+18h], esi
mov	eax, [ebx+0Ch]
mov	[ebp+stream], eax
add	esp, 10h
pop	ebx
pop	esi
leave
jmp	_silc_mutex_unlock
align 4
public _silc_packet_wait
push	ebp
mov	ebp, esp
push	edi
push	esi
push	ebx
sub	esp, 3Ch
mov	ebx, [ebp+waiter]
mov	esi, [ebp+timeout]
mov	eax, [ebx]
mov	[esp], eax	
call	_silc_mutex_lock
test	dword ptr [ebx+18h], 0FFFFFFFCh
jnz	loc_641CBCF3
xchg	ax, ax
cmp	byte ptr [waiter_0+38h], 0
js	loc_641CBCFC
mov	[esp+8], timeout_0 
mov	eax, [waiter_0]
mov	[esp+4], eax	
mov	eax, [waiter_0+4]
mov	[esp], eax	
call	_silc_cond_timedwait
test	dword ptr [waiter_0+18h], 0FFFFFFFCh
jz	short loc_641CBC40
mov	[ebp+var_29], al
mov	edx, [waiter_0+8]
mov	[waiter_0+10h],	prev
and	byte ptr [waiter_0+18h], 0FDh
test	prev, prev
jz	short loc_641CBC83
movzx	ecx, word ptr [waiter_0+14h]
mov	ecx, [prev+ecx]
mov	[waiter_0+10h],	ecx
mov	timeout_0, prev
mov	ret, [ebp+return_packet]
mov	[eax], prev
mov	ecx, prev
test	prev, prev
jz	short loc_641CBCBB
lea	edi, [waiter_0+8]
movzx	esi, word ptr [waiter_0+14h]
xor	ecx, ecx
mov	esi, [edx+esi]
mov	[p], esi
test	esi, esi
jz	short loc_641CBCA8
test	byte ptr [waiter_0+18h], 1
jnz	short loc_641CBCDB
			
mov	edx, [waiter_0+10h]
mov	eax, [ebp+return_packet]
cmp	edx, [eax]
jz	short loc_641CBCEC
sub	dword ptr [waiter_0+18h], 4
mov	eax, [ebp+return_packet]
mov	esi, [eax]
cmp	[waiter_0+0Ch],	esi
jz	short loc_641CBCE7
mov	edx, [waiter_0]
mov	[esp], edx	
call	_silc_mutex_unlock
xor	eax, eax
cmp	[ebp+var_29], 1
setz	al
add	esp, 3Ch
pop	waiter_0
pop	esi
pop	p
leave
retn
movzx	eax, word ptr [waiter_0+16h]
mov	prev, [prev+eax]
mov	[esi+eax], edx
jmp	short loc_641CBCA8
mov	[waiter_0+0Ch],	prev
jmp	short loc_641CBCC0
mov	edx, [p]
mov	[waiter_0+10h],	edx
jmp	short loc_641CBCB2
mov	[ebp+var_29], 0
jmp	loc_641CBC6B
mov	eax, [waiter_0]
mov	[esp], eax	
call	_silc_mutex_unlock
or	eax, 0FFFFFFFFh
jmp	short loc_641CBCD3
align 4
push	ebp
mov	ebp, esp
push	edi
push	esi
push	ebx
sub	esp, 3Ch
mov	eax, [ebp+packet]
mov	ebx, [ebp+callback_context]
mov	cl, [ebx+38h]
test	cl, 7Ch
jz	short loc_641CBD56
mov	esi, 3
and	esi, ecx
mov	dl, [packet_0+20h]
shr	dl, 6
mov	[ebp+var_29], dl
mov	edx, esi
cmp	dl, [ebp+var_29]
jz	short loc_641CBD44
xor	packet_0, packet_0
add	esp, 3Ch
pop	callback_context_0
pop	esi
pop	edi
leave
retn
lea	esi, [callback_context_0+1Ch]
mov	edi, [packet_0+18h]
shr	cl, 2
and	ecx, 1Fh
cmp	ecx, ecx
repe cmpsb
jnz	short loc_641CBD3A
mov	edx, [callback_context_0]
mov	[esp], edx	
mov	[ebp+var_1C], packet_0
call	_silc_mutex_lock
cmp	byte ptr [callback_context_0+38h], 0
mov	eax, [ebp+var_1C]
js	short loc_641CBDC5
mov	edx, [callback_context_0+8]
test	edx, edx
jz	short loc_641CBDBC
movzx	edx, word ptr [callback_context_0+14h]
mov	ecx, [callback_context_0+0Ch]
mov	[ecx+edx], eax
test	byte ptr [callback_context_0+18h], 1
jz	short loc_641CBD8D
movzx	ecx, word ptr [callback_context_0+16h]
mov	esi, [callback_context_0+0Ch]
mov	[packet_0+ecx],	esi
mov	[callback_context_0+0Ch], packet_0
mov	dword ptr [packet_0+edx], 0
add	dword ptr [callback_context_0+18h], 4
mov	packet_0, [callback_context_0+4]
mov	[esp], eax	
call	_silc_cond_broadcast
mov	eax, [callback_context_0]
mov	[esp], eax	
call	_silc_mutex_unlock
mov	al, 1
add	esp, 3Ch
pop	callback_context_0
pop	esi
pop	edi
leave
retn
align 4
mov	[callback_context_0+8],	eax
movzx	edx, word ptr [callback_context_0+14h]
jmp	short loc_641CBD7D
mov	eax, [callback_context_0]
mov	[esp], eax	
call	_silc_mutex_unlock
xor	eax, eax
jmp	loc_641CBD3C
align 4
			
push	ebp
mov	ebp, esp
push	edi
push	esi
push	ebx
sub	esp, 2Ch
mov	ebx, sb
mov	esi, newsize
test	sb, sb
jz	short loc_641CBE3C
mov	edi, [sb]
mov	sb, [sb+0Ch]
sub	eax, edi
cmp	edx, eax
jbe	short loc_641CBE2F
mov	newsize, [sb+4]
mov	eax, [sb+8]
mov	[ebp+var_1C], eax
mov	[esp+4], newsize 
mov	[esp], edi	
mov	[ebp+var_20], edx
call	_silc_realloc
test	eax, eax
mov	edx, [ebp+var_20]
jz	short loc_641CBE4A
mov	[sb], eax
mov	ecx, edx
sub	ecx, edi
lea	edi, [eax+ecx]
mov	[sb+4],	edi
mov	ecx, [ebp+var_1C]
sub	ecx, edx
add	edi, ecx
mov	[sb+8],	edi
lea	newsize, [eax+newsize]
mov	[sb+0Ch], esi
			
mov	eax, sb
add	esp, 2Ch
pop	sb
pop	newsize
pop	edi
leave
retn
align 4
mov	sb, edx
add	esp, 2Ch
pop	sb
pop	newsize
pop	edi
leave
jmp	_silc_buffer_alloc_1
xor	sb, sb
jmp	short loc_641CBE2F
align 10h
			
push	ebp
mov	ebp, esp
sub	esp, 18h
mov	dword ptr [esp], 1Ch 
call	_silc_malloc
test	eax, eax
jz	short locret_641CBEA1
mov	dword ptr [list+18h], 0
mov	dword ptr [list+14h], 0
mov	edx, [list+10h]
and	edx, 3
mov	[list+10h], edx
mov	word ptr [list+0Ch], 4
mov	word ptr [list+0Eh], 8
mov	byte ptr [list+10h], 1
mov	dword ptr [list+8], 0
mov	dword ptr [list+4], 0
mov	dword ptr [list], 0
leave
retn
align 4
			
push	ebp
mov	ebp, esp
push	esi
push	ebx
sub	esp, 10h
mov	ebx, list
mov	esi, context
mov	dword ptr [esp], 0Ch 
call	_silc_malloc
test	eax, eax
jz	short loc_641CBEE8
mov	[e], context
mov	ecx, [list]
test	ecx, ecx
jz	short loc_641CBEFC
movzx	edx, word ptr [list+0Ch]
mov	ecx, [list+4]
mov	[ecx+edx], e
test	byte ptr [list+10h], 1
jnz	short loc_641CBEF0
mov	[list+4], e
mov	dword ptr [e+edx], 0
add	dword ptr [list+10h], 4
mov	al, 1
add	esp, 10h
pop	list
pop	context
leave
retn
align 10h
movzx	ecx, word ptr [list+0Eh]
mov	context, [list+4]
mov	[e+ecx], esi
jmp	short loc_641CBED8
mov	[list],	e
movzx	edx, word ptr [list+0Ch]
jmp	short loc_641CBED2
			
push	ebp
mov	ebp, esp
push	edi
push	esi
push	ebx
sub	esp, 3Ch
mov	[ebp+var_20], stream
mov	edi, [ebp+ap]
test	callbacks, callbacks
jz	loc_641CC050
mov	ebx, [callbacks]
test	ebx, ebx
jz	loc_641CC050
mov	dword ptr [esp+4], 10h 
mov	dword ptr [esp], 1 
mov	[ebp+var_24], callbacks
mov	[ebp+var_28], callback_context
call	_silc_calloc
mov	esi, eax
test	eax, eax
mov	edx, [ebp+var_24]
mov	ecx, [ebp+var_28]
jz	loc_641CC050
mov	eax, [ebp+priority]
mov	[esi+0Ch], eax
mov	[esi+4], edx
mov	[esi+8], ecx
mov	callbacks, [ebp+var_20]
mov	eax, [edx+0Ch]
mov	[esp], eax	
call	_silc_mutex_lock
mov	ecx, [ebp+var_20]
mov	eax, [ecx+10h]
test	eax, eax
jz	loc_641CC14B
mov	edx, [eax]
mov	[eax+8], edx
and	byte ptr [eax+10h], 0FDh
mov	dword ptr [eax+18h], 0
mov	dword ptr [eax+14h], 0
mov	ecx, [ebp+var_20]
mov	ebx, [ecx+10h]
jmp	short loc_641CBFB7
align 4
movzx	edx, word ptr [ebx+0Eh]
mov	edx, [eax+edx]
mov	[ebx+8], edx
mov	[ebx+14h], eax
mov	eax, [eax]
test	e, e
jz	short loc_641CBFDB
mov	edx, [esi+0Ch]
cmp	edx, [e+0Ch]
jg	loc_641CC05C
mov	e, [ebx+14h]
mov	[ebx+18h], eax
mov	eax, [ebx+8]
test	eax, eax
jz	short loc_641CBFD4
test	byte ptr [ebx+10h], 2
jnz	short loc_641CBF98
movzx	edx, word ptr [ebx+0Ch]
mov	edx, [eax+edx]
jmp	short loc_641CBF9F
align 4
mov	dword ptr [ebx+14h], 0
mov	edx, esi
mov	e, ebx		
call	_silc_dlist_add
			
mov	edx, [ap_0]
test	packet_type, packet_type
jz	loc_641CC0C8
cmp	packet_type, 0FFFFFFFFh
jz	loc_641CC0C8
mov	ebx, 1
mov	[ebp+var_1C], ap_0
mov	ap_0, packet_type
jmp	short loc_641CC022
align 4
mov	ecx, packet_type
mov	[eax+i-2], cl
mov	eax, [ebp+var_1C]
mov	edi, [eax+i*4-4]
test	packet_type, packet_type
jz	loc_641CC0D0
cmp	packet_type, 0FFFFFFFFh
jz	loc_641CC0D0
inc	i
mov	[esp+4], i	
mov	eax, [esi]
mov	[esp], eax	
call	_silc_realloc
mov	[esi], eax
test	eax, eax
jnz	short loc_641CC004
mov	edx, [ebp+var_20]
mov	eax, [edx+0Ch]
mov	[esp], eax	
call	_silc_mutex_unlock
xor	eax, eax
add	esp, 3Ch
pop	i
pop	esi
pop	packet_type
leave
retn
align 10h
			
xor	stream,	stream
add	esp, 3Ch
pop	ebx
pop	esi
pop	ap_0
leave
retn
align 4
mov	dword ptr [esp], 0Ch 
call	_silc_malloc
test	eax, eax
jz	loc_641CBFE4
mov	[eax], esi
mov	edx, [ebx+18h]
test	edx, edx
jz	loc_641CC100
movzx	ecx, word ptr [ebx+0Ch]
mov	[ebp+var_2C], ecx
mov	edx, [edx+ecx]
mov	[eax+ecx], edx
mov	edx, [ebx+18h]
mov	[edx+ecx], eax
test	byte ptr [ebx+10h], 1
jz	short loc_641CC0B3
movzx	edx, word ptr [ebx+0Eh]
mov	[ebp+var_1C], edx
mov	ecx, [ebx+18h]
mov	[eax+edx], ecx
mov	ecx, [ebp+var_2C]
mov	edx, [eax+ecx]
test	edx, edx
jz	short loc_641CC0B3
mov	ecx, [ebp+var_1C]
mov	[edx+ecx], eax
			
mov	edx, [ebx+4]
cmp	edx, [ebx+18h]
jz	loc_641CC143
			
add	dword ptr [ebx+10h], 4
jmp	loc_641CBFE4
			
mov	ebx, 1
lea	esi, [esi+0]
			
mov	eax, [esi]
test	eax, eax
jz	short loc_641CC0DB
mov	byte ptr [eax+i-1], 0
mov	edx, [ebp+var_20]
mov	eax, [edx+0Ch]
mov	[esp], eax	
call	_silc_mutex_unlock
mov	ecx, [ebp+var_20]
mov	eax, [ecx+60h]
mov	eax, [ecx+60h]
inc	eax
mov	[ecx+60h], eax
mov	al, 1
add	esp, 3Ch
pop	i
pop	esi
pop	packet_type
leave
retn
mov	ecx, [ebx]
test	ecx, ecx
jz	short loc_641CC17D
movzx	edx, word ptr [ebx+0Ch]
mov	[eax+edx], ecx
mov	dl, [ebx+10h]
test	dl, 1
jz	short loc_641CC125
mov	ecx, [ebx]
test	ecx, ecx
jz	short loc_641CC125
movzx	edx, word ptr [ebx+0Eh]
mov	[ecx+edx], eax
mov	dl, [ebx+10h]
			
mov	ecx, [ebx+4]
test	ecx, ecx
jz	short loc_641CC178
mov	[ebx], eax
and	edx, 1
jz	short loc_641CC0BF
movzx	edx, word ptr [ebx+0Eh]
mov	dword ptr [eax+edx], 0
jmp	loc_641CC0BF
mov	[ebx+4], eax
jmp	loc_641CC0BF
call	_silc_dlist_init
mov	edx, [ebp+var_20]
mov	[edx+10h], eax
test	eax, eax
jnz	loc_641CBF77
mov	eax, [edx+0Ch]
mov	[esp], eax	
call	_silc_mutex_unlock
mov	[esp], esi	
call	_silc_free
xor	eax, eax
jmp	loc_641CC052
mov	[ebx+4], eax
jmp	short loc_641CC12C
movzx	edx, word ptr [ebx+0Ch]
mov	dword ptr [eax+edx], 0
jmp	short loc_641CC10D
align 4
public _silc_packet_wait_init
push	ebp
mov	ebp, esp
push	esi
push	ebx
sub	esp, 30h
mov	esi, [ebp+source_id]
mov	dword ptr [esp+4], 3Ch 
mov	dword ptr [esp], 1 
call	_silc_calloc
mov	ebx, eax
test	eax, eax
jz	loc_641CC2A1
mov	[esp], pw	
call	_silc_mutex_alloc
test	al, al
jz	loc_641CC299
lea	eax, [pw+4]
mov	[esp], eax	
call	_silc_cond_alloc
test	al, al
jz	loc_641CC28F
lea	eax, [ebp+ap]
mov	[esp+4], eax	
mov	dword ptr [esp], 989680h 
mov	ecx, pw		
mov	edx, offset _silc_packet_wait_cbs 
mov	eax, [ebp+stream] 
call	_silc_packet_stream_link_va
test	al, al
jz	loc_641CC284
mov	ret, [pw+18h]
and	eax, 3
mov	[pw+18h], eax
mov	word ptr [pw+14h], 0
mov	word ptr [pw+16h], 0
mov	byte ptr [pw+18h], 0
mov	dword ptr [pw+10h], 0
mov	dword ptr [pw+0Ch], 0
mov	dword ptr [pw+8], 0
test	source_id_0, source_id_0
jz	short loc_641CC278
movzx	eax, word ptr [source_id_0+1Eh]
lea	edx, [ebp+id_len]
mov	[esp+10h], edx	
mov	dword ptr [esp+0Ch], 1Ch 
lea	edx, [pw+1Ch]
mov	[esp+8], edx	
mov	[esp+4], eax	
mov	[esp], source_id_0 
call	_silc_id_id2str
mov	dx, [source_id_0+1Eh]
and	edx, 3
mov	al, [pw+38h]
and	eax, 0FFFFFFFCh
or	eax, edx
mov	[pw+38h], al
mov	edx, [ebp+id_len]
and	edx, 1Fh
shl	edx, 2
and	eax, 0FFFFFF83h
or	eax, edx
mov	[pw+38h], al
mov	eax, pw
add	esp, 30h
pop	pw
pop	source_id_0
leave
retn
align 4
mov	ret, [pw+4]
mov	[esp], eax	
call	_silc_cond_free
mov	eax, [pw]
mov	[esp], eax	
call	_silc_mutex_free
mov	[esp], pw	
call	_silc_free
xor	eax, eax
add	esp, 30h
pop	pw
pop	source_id_0
leave
retn
align 4
public _silc_packet_stream_link
			
push	ebp
mov	ebp, esp
sub	esp, 18h
lea	ret, [ebp+ap]
mov	[esp+4], ret	
mov	ret, [ebp+priority]
mov	[esp], ret	
mov	ecx, [ebp+callback_context] 
mov	edx, [ebp+callbacks] 
mov	ret, [ebp+stream] 
call	_silc_packet_stream_link_va
leave
retn
align 10h
			
push	ebp
mov	ebp, esp
push	edi
push	esi
push	ebx
sub	esp, 1BCh
mov	ebx, stream
mov	[ebp+var_ED], dl
mov	[ebp+var_108], cl
mov	stream,	[ebp+src_id_type]
mov	[ebp+var_10A], ax
mov	type, [ebp+dst_id_type]
mov	[ebp+var_10C], dx
mov	edi, [ebp+cipher]
test	edi, edi
jz	loc_641CC78E
mov	flags, [ebp+cipher]
mov	[esp], ecx	
call	_silc_cipher_get_block_len
mov	[ebp+var_DC], eax
mov	esi, [ebp+dst_id_len]
add	esi, [ebp+src_id_len]
mov	[ebp+enclen], esi
mov	eax, [ebp+data_len]
add	eax, esi
lea	edx, [eax+0Ah]
cmp	edx, 0FFFFh
jbe	short loc_641CC340
add	[ebp+data_len],	0FFF5h
sub	[ebp+data_len],	eax
mov	flags, [ebp+src_id_len]
mov	edx, [ebp+dst_id_len]
lea	eax, [ecx+edx+0Ah]
add	eax, [ebp+data_len]
mov	[ebp+truelen], eax
mov	esi, [ebp+cipher]
test	esi, esi
jz	short loc_641CC36E
mov	esi, [ebp+cipher]
mov	[esp], esi	
call	_silc_cipher_get_mode
cmp	eax, 3
jz	loc_641CC7D7
test	byte ptr [stream+67h], 4
jnz	loc_641CC6A0
xor	eax, eax
mov	[ebp+psnlen], 0
mov	[ebp+ivlen], 0
			
cmp	[ebp+var_ED], 9
jz	loc_641CC6F1
cmp	[ebp+var_ED], 7
jz	loc_641CC79D
movzx	edx, [ebp+var_108]
and	edx, 20h
jz	loc_641CC72A
mov	block_len, [ebp+psnlen]
add	ecx, [ebp+truelen]
mov	edx, [ebp+var_DC]
test	edx, edx
jz	loc_641CC8B8
mov	ctr, ecx
cdq
idiv	[ebp+var_DC]
mov	esi, 80h
sub	padlen,	edx
			
add	ecx, padlen
mov	[ebp+enclen], ecx
			
test	padlen,	padlen
jle	short loc_641CC40D
xor	edi, edi
mov	ctr, [stream+4]
mov	eax, [eax+4]
mov	eax, [eax+4]
mov	[esp], eax	
call	_silc_rng_get_byte_fast
mov	[ebp+i+tmppad],	al
inc	i
cmp	padlen,	i
jg	short loc_641CC3F0
mov	ctr, [stream+0Ch]
mov	[esp], eax	
call	_silc_mutex_lock
mov	edx, [ebp+hmac]
test	edx, edx
jz	loc_641CC787
mov	eax, [ebp+hmac]
mov	[esp], eax	
call	_silc_hmac_len
mov	i, eax
mov	ecx, [ebp+ivlen]
add	ecx, [ebp+psnlen]
add	ecx, [ebp+truelen]
add	ecx, padlen
lea	ecx, [edi+ecx]
mov	edx, [stream+28h]
mov	[ebp+var_11C], edx
mov	eax, [stream+24h]
sub	edx, eax
cmp	ecx, edx
ja	loc_641CCA5C
lea	edx, [eax+ecx]
mov	[stream+24h], edx
mov	[ebp+packet.head], eax
mov	[ebp+packet.data], eax
mov	[ebp+packet.end], edx
mov	[ebp+packet.tail], edx
sub	edx, edi
cmp	edx, eax
jb	short loc_641CC478
mov	[ebp+packet.tail], edx
mov	eax, [stream+58h]
mov	edx, eax
shr	edx, 18h
mov	[ebp+psn], dl
mov	edx, eax
shr	edx, 10h
mov	[ebp+psn+1], dl
mov	edx, eax
shr	edx, 8
mov	[ebp+psn+2], dl
mov	[ebp+psn+3], al
mov	dword ptr [esp+94h], 1Dh
mov	eax, [ebp+data_len]
mov	[esp+90h], eax
mov	eax, [ebp+data]
mov	[esp+8Ch], eax
mov	dword ptr [esp+88h], 0Ch
mov	[esp+84h], padlen
lea	eax, [ebp+tmppad]
mov	[esp+80h], eax
mov	dword ptr [esp+7Ch], 0Ch
mov	edx, [ebp+dst_id_len]
mov	[esp+78h], edx
mov	eax, [ebp+dst_id]
mov	[esp+74h], eax
mov	dword ptr [esp+70h], 0Ch
movzx	eax, [ebp+var_10C]
mov	[esp+6Ch], dst_id_type_0
mov	dword ptr [esp+68h], 1
mov	ecx, [ebp+src_id_len]
mov	[esp+64h], ecx
mov	dst_id_type_0, [ebp+src_id]
mov	[esp+60h], eax
mov	dword ptr [esp+5Ch], 0Ch
movzx	eax, [ebp+var_10A]
mov	[esp+58h], src_id_type_0
mov	dword ptr [esp+54h], 1
mov	[esp+50h], edx
mov	dword ptr [esp+4Ch], 1
mov	[esp+48h], ecx
mov	dword ptr [esp+44h], 1
mov	dword ptr [esp+40h], 0
mov	dword ptr [esp+3Ch], 1
mov	[esp+38h], padlen
mov	dword ptr [esp+34h], 1
movzx	src_id_type_0, [ebp+var_ED]
mov	[esp+30h], type
mov	dword ptr [esp+2Ch], 1
mov	al, [ebp+var_108]
and	eax, 0DFh
mov	[esp+28h], eax
mov	dword ptr [esp+24h], 1
mov	padlen,	[ebp+truelen]
mov	[esp+20h], esi
mov	dword ptr [esp+1Ch], 3
mov	eax, [ebp+psnlen]
mov	[esp+18h], eax
lea	esi, [ebp+psn]
mov	[esp+14h], esi
mov	dword ptr [esp+10h], 0Ch
mov	edx, [ebp+ivlen]
mov	[esp+0Ch], edx
lea	eax, [ebp+iv]
mov	[esp+8], eax
mov	dword ptr [esp+4], 0Ch
lea	eax, [ebp+packet]
mov	[esp], eax	
call	_silc_buffer_format
test	eax, eax
js	loc_641CCA4A
mov	i, [ebp+cipher]
test	eax, eax
jz	short loc_641CC633
mov	dword ptr [esp+4], 0 
mov	ecx, [ebp+cipher]
mov	[esp], ecx	
call	_silc_cipher_set_iv
mov	eax, [ebp+ivlen]
add	eax, [ebp+packet.data]
mov	dword ptr [esp+10h], 0 
mov	edx, [ebp+enclen]
mov	[esp+0Ch], edx	
mov	[esp+8], eax	
mov	[esp+4], eax	
mov	ecx, [ebp+cipher]
mov	[esp], ecx	
call	_silc_cipher_encrypt
test	al, al
jz	loc_641CCA2E
mov	edi, [ebp+hmac]
test	edi, edi
jz	short loc_641CC693
mov	eax, [ebp+hmac]
mov	[esp], eax	
call	_silc_hmac_init
mov	dword ptr [esp+8], 4 
mov	[esp+4], esi	
mov	edx, [ebp+hmac]
mov	[esp], edx	
call	_silc_hmac_update
mov	edx, [ebp+packet.data]
mov	eax, [ebp+packet.tail]
sub	eax, edx
mov	[esp+8], eax	
mov	[esp+4], edx	
mov	ecx, [ebp+hmac]
mov	[esp], ecx	
call	_silc_hmac_update
lea	eax, [ebp+mac_len]
mov	[esp+8], eax	
mov	eax, [ebp+packet.tail]
mov	[esp+4], eax	
mov	esi, [ebp+hmac]
mov	[esp], esi	
call	_silc_hmac_final
inc	dword ptr [stream+58h]
mov	al, 1
add	esp, 1BCh
pop	stream
pop	padlen
pop	edi
leave
retn
mov	ecx, [ebp+cipher]
test	ecx, ecx
jz	loc_641CC378
mov	eax, [ebp+var_DC]
inc	eax
mov	[ebp+ivlen], eax
mov	al, [stream+64h]
mov	[ebp+iv], al
mov	edx, [ebp+cipher]
mov	[esp], edx	
call	_silc_cipher_get_iv
mov	esi, eax
lea	eax, [ebp+iv+1]
mov	edi, eax
mov	ecx, [ebp+var_DC]
rep movsb
xor	eax, eax
mov	[ebp+psnlen], 4
cmp	[ebp+var_ED], 9
jnz	loc_641CC39B
movzx	edx, [ebp+var_108]
test	dl, 1
jz	loc_641CC3AF
test	al, al
jz	loc_641CC9CA
mov	ctr, [ebp+psnlen]
mov	esi, [ebp+enclen]
lea	block_len, [eax+esi+0Ah]
xor	eax, eax
xor	esi, esi
			
add	ecx, eax
mov	[ebp+enclen], ecx
jmp	loc_641CC3EA
test	al, al
jnz	loc_641CC8A5
mov	block_len, [ebp+psnlen]
add	ecx, [ebp+truelen]
mov	ctr, [ebp+var_DC]
test	eax, eax
jnz	loc_641CC973
mov	edx, 10h
			
mov	ctr, ecx
mov	esi, block_len
cdq
idiv	esi
mov	esi, 10h
sub	padlen,	edx
cmp	padlen,	7
jg	loc_641CC3E2
mov	edi, [ebp+var_DC]
test	edi, edi
jnz	short loc_641CC77C
mov	[ebp+var_DC], 10h
add	padlen,	[ebp+var_DC]
jmp	loc_641CC3E2
xor	i, i
jmp	loc_641CC430
mov	[ebp+var_DC], 0
jmp	loc_641CC31A
mov	edx, [stream+4]
mov	edx, [edx+4]
test	byte ptr [edx+40h], 1
jnz	loc_641CC893
test	al, al
jz	loc_641CC97E
mov	edx, [ebp+psnlen]
mov	ctr, [ebp+enclen]
lea	block_len, [edx+eax+0Ah]
xor	eax, eax
xor	esi, esi
			
lea	ecx, [eax+ecx]
mov	[ebp+enclen], ecx
jmp	loc_641CC3EA
mov	[esp], esi	
call	_silc_cipher_get_iv
mov	esi, eax
mov	dword ptr [eax+0Ch], 0
test	byte ptr [stream+67h], 4
jnz	loc_641CC8E2
movzx	eax, byte ptr [eax+4]
shl	eax, 18h
movzx	edx, byte ptr [esi+5]
shl	edx, 10h
or	eax, edx
movzx	edx, byte ptr [esi+7]
or	eax, edx
movzx	edx, byte ptr [esi+6]
shl	edx, 8
or	eax, edx
movzx	ecx, byte ptr [esi+8]
shl	ecx, 18h
movzx	edx, byte ptr [esi+9]
shl	edx, 10h
or	ecx, edx
movzx	edx, byte ptr [esi+0Bh]
or	ecx, edx
movzx	edx, byte ptr [esi+0Ah]
shl	edx, 8
or	ecx, edx
add	ecx, 1
adc	eax, 0
mov	edx, eax
shr	edx, 18h
mov	[esi+4], dl
mov	edx, eax
shr	edx, 10h
mov	[esi+5], dl
mov	edx, eax
shr	edx, 8
mov	[esi+6], dl
mov	[esi+7], al
mov	eax, ecx
shr	eax, 18h
mov	[esi+8], al
mov	eax, ecx
shr	eax, 10h
mov	[esi+9], al
mov	eax, ecx
shr	eax, 8
mov	[esi+0Ah], al
mov	[esi+0Bh], cl
test	byte ptr [stream+67h], 4
jz	short loc_641CC8C7
mov	al, [stream+64h]
mov	[ebp+iv], al
mov	al, 1
mov	[ebp+psnlen], 4
mov	[ebp+ivlen], 9
jmp	loc_641CC38E
test	byte ptr [stream+67h], 1
jz	loc_641CC7AD
test	al, al
jz	loc_641CC955
mov	block_len, [ebp+psnlen]
add	ecx, [ebp+truelen]
xor	esi, esi
jmp	loc_641CC3E2
mov	[ebp+var_DC], 10h
jmp	loc_641CC3D2
mov	al, 1
mov	[ebp+psnlen], 0
mov	[ebp+ivlen], 0
jmp	loc_641CC38E
mov	eax, [stream+4]
mov	eax, [eax+4]
mov	eax, [eax+4]
mov	[esp], eax	
call	_silc_rng_get_byte_fast
mov	[ebp+iv+1], al
mov	dl, al
add	dl, [esi+4]
mov	[ebp+iv+2], dl
xor	edx, eax
mov	[ebp+iv+3], dl
lea	eax, [edx+eax]
mov	[ebp+iv+4], al
movzx	edx, byte ptr [esi+8]
shl	edx, 18h
movzx	eax, byte ptr [esi+9]
shl	eax, 10h
or	edx, eax
movzx	eax, byte ptr [esi+0Bh]
or	edx, eax
movzx	eax, byte ptr [esi+0Ah]
shl	eax, 8
or	edx, eax
inc	edx
mov	eax, edx
shr	eax, 18h
mov	[ebp+iv+5], al
mov	eax, edx
shr	eax, 10h
mov	[ebp+iv+6], al
mov	eax, edx
shr	eax, 8
mov	[ebp+iv+7], al
mov	[ebp+iv+8], dl
mov	eax, dword ptr [ebp+iv+1]
mov	[esi+4], eax
mov	eax, dword ptr [ebp+iv+5]
mov	[esi+8], eax
jmp	loc_641CC86C
mov	block_len, [ebp+psnlen]
add	ecx, [ebp+truelen]
mov	edx, 10h
cmp	[ebp+var_DC], 0
jz	loc_641CC751
mov	block_len, [ebp+var_DC]
jmp	loc_641CC751
mov	ctr, [ebp+psnlen]
mov	esi, [ebp+enclen]
lea	block_len, [eax+esi+0Ah]
mov	edx, [ebp+var_DC]
test	edx, edx
jnz	short loc_641CC99A
mov	dl, 10h
mov	eax, ecx
mov	esi, edx
xor	edx, edx
div	esi
mov	esi, 10h
sub	padlen,	edx
mov	eax, padlen
cmp	padlen,	7
jg	loc_641CC7C9
cmp	[ebp+var_DC], 0
jz	short loc_641CCA22
add	padlen,	[ebp+var_DC]
mov	eax, padlen
jmp	loc_641CC7C9
mov	esi, [ebp+psnlen]
mov	edx, [ebp+enclen]
lea	block_len, [esi+edx+0Ah]
mov	edx, [ebp+var_DC]
test	edx, edx
jz	short loc_641CCA1E
mov	ctr, ecx
mov	esi, edx
xor	edx, edx
div	esi
mov	esi, 10h
sub	padlen,	edx
mov	eax, padlen
cmp	padlen,	7
jg	loc_641CC71D
cmp	[ebp+var_DC], 0
jnz	short loc_641CCA11
mov	[ebp+var_DC], 10h
add	padlen,	[ebp+var_DC]
mov	eax, padlen
jmp	loc_641CC71D
mov	dl, 10h
jmp	short loc_641CC9E4
mov	[ebp+var_DC], 10h
jmp	short loc_641CC9BD
mov	dword ptr [esp], offset	aPacketEncrypti	
call	_silc_format
mov	[esp+4], eax	
mov	dword ptr [esp], 3 
call	_silc_log_output
			
mov	i, [stream+0Ch]
mov	[esp], eax	
call	_silc_mutex_unlock
xor	eax, eax
jmp	loc_641CC695
mov	edx, [ebp+var_11C]
sub	edx, [stream+1Ch]
lea	edx, [ecx+edx]	
lea	eax, [stream+1Ch] 
mov	[ebp+var_110], ecx
call	_silc_buffer_realloc
test	eax, eax
mov	ecx, [ebp+var_110]
jz	short loc_641CCA4A
mov	eax, [stream+24h]
mov	edx, [stream+28h]
sub	edx, eax
cmp	ecx, edx
jbe	loc_641CC45D
mov	[ebp+packet.head], 0
mov	[ebp+packet.data], 0
mov	[ebp+packet.end], ecx
mov	edx, ecx
sub	edx, edi
jmp	loc_641CC475
align 4
public _silc_packet_stream_is_udp
			
push	ebp
mov	ebp, esp
sub	esp, 18h
mov	eax, [ebp+stream]
test	byte ptr [eax+67h], 8
jz	short loc_641CCAC0
mov	al, 1
leave
retn
align 10h
mov	dword ptr [esp+4], 0 
mov	stream_0, [stream_0+8]
mov	[esp], eax	
call	_silc_socket_stream_is_udp
test	al, al
setnz	al
leave
retn
align 4
public _silc_packet_send_ext
push	ebp
mov	ebp, esp
push	edi
push	esi
push	ebx
sub	esp, 0ACh
mov	ebx, [ebp+stream]
mov	esi, [ebp+src_id]
mov	al, [ebp+type]
mov	[ebp+var_6D], al
mov	dl, [ebp+flags]
mov	[ebp+var_6E], dl
mov	edi, [ebp+src_id_type]
mov	eax, [ebp+dst_id_type]
mov	[ebp+var_6C], ax
test	esi, esi
jz	short loc_641CCB35
lea	eax, [ebp+src_id_len]
mov	[esp+10h], eax	
mov	dword ptr [esp+0Ch], 20h 
lea	eax, [ebp+src_id_data]
mov	[esp+8], eax	
movzx	eax, di
mov	[esp+4], src_id_type_0 
mov	[esp], src_id_0	
call	_silc_id_id2str
test	al, al
jz	loc_641CCC07
mov	eax, [ebp+dst_id]
test	eax, eax
jz	short loc_641CCB6D
lea	eax, [ebp+dst_id_len]
mov	[esp+10h], eax	
mov	dword ptr [esp+0Ch], 20h 
lea	eax, [ebp+dst_id_data]
mov	[esp+8], eax	
movzx	eax, [ebp+var_6C]
mov	[esp+4], dst_id_type_0 
mov	edx, [ebp+dst_id]
mov	[esp], edx	
call	_silc_id_id2str
test	al, al
jz	loc_641CCC07
mov	ecx, [ebp+hmac]
test	ecx, ecx
jz	loc_641CCCB8
mov	edx, [ebp+cipher]
test	edx, edx
jz	loc_641CCCC4
mov	eax, [ebp+dst_id]
test	eax, eax
jz	loc_641CCCD0
mov	eax, [ebp+dst_id_len]
mov	[ebp+var_78], eax
movzx	edx, [ebp+var_6C]
mov	dword ptr [ebp+var_6C],	edx
lea	eax, [ebp+dst_id_data]
mov	[ebp+var_74], eax
test	src_id_0, src_id_0
jz	loc_641CCD58
mov	edx, [ebp+src_id_len]
mov	[ebp+var_7C], edx
movzx	src_id_type_0, di
lea	src_id_0, [ebp+src_id_data]
movzx	ecx, [ebp+var_6E] 
movzx	edx, [ebp+var_6D] 
mov	eax, [ebp+hmac]
mov	[esp+24h], eax	
mov	eax, [ebp+cipher]
mov	[esp+20h], eax	
mov	eax, [ebp+data_len]
mov	[esp+1Ch], eax	
mov	eax, [ebp+data]
mov	[esp+18h], eax	
mov	eax, [ebp+var_78]
mov	[esp+14h], eax	
mov	eax, [ebp+var_74]
mov	[esp+10h], eax	
mov	eax, dword ptr [ebp+var_6C]
mov	[esp+0Ch], eax	
mov	eax, [ebp+var_7C]
mov	[esp+8], eax	
mov	[esp+4], esi	
mov	[esp], edi	
mov	eax, stream_0	
call	_silc_packet_send_raw
test	al, al
jnz	short loc_641CCC14
			
xor	ret, ret
			
add	esp, 0ACh
pop	stream_0
pop	esi
pop	edi
leave
retn
test	byte ptr [stream_0+67h], 8
jz	loc_641CCCF0
mov	ret, [stream_0+8]
mov	esi, [eax+8]
lea	eax, [ebp+connected]
mov	[esp+4], eax	
mov	[esp], esi	
call	_silc_socket_stream_is_udp
test	al, al
jz	loc_641CCCF3
cmp	[ebp+connected], 0
jnz	loc_641CCCF3
mov	ecx, [stream_0+24h]
mov	edx, [stream_0+20h]
jmp	short loc_641CCC98
align 10h
mov	eax, [stream_0+14h]
sub	ecx, edx
mov	[esp+10h], ecx	
mov	[esp+0Ch], edx	
movzx	edx, word ptr [eax+4]
mov	[esp+8], edx	
mov	eax, [eax]
mov	[esp+4], eax	
mov	[esp], esi	
call	_silc_net_udp_send
cmp	eax, 0FFFFFFFEh
jz	loc_641CCDF1
cmp	eax, 0FFFFFFFFh
jz	loc_641CCD40
mov	ecx, [stream_0+24h]
mov	edx, [stream_0+20h]
mov	edi, ecx
sub	edi, edx
cmp	eax, edi
ja	short loc_641CCC98
add	edx, eax
mov	[stream_0+20h],	edx
			
cmp	ecx, edx
jnz	short loc_641CCC50
mov	eax, [stream_0+1Ch]
mov	[stream_0+24h],	eax
mov	[stream_0+20h],	eax
mov	eax, [stream_0+0Ch]
mov	[esp], eax	
call	_silc_mutex_unlock
mov	al, 1
jmp	loc_641CCC09
align 4
mov	eax, [stream_0+38h]
mov	[ebp+hmac], eax
jmp	loc_641CCB78
align 4
mov	edx, [stream_0+30h]
mov	[ebp+cipher], edx
jmp	loc_641CCB83
align 10h
mov	al, [stream_0+66h]
mov	edx, eax
and	edx, 3Fh
mov	[ebp+var_78], edx
mov	edx, [stream_0+54h]
mov	[ebp+var_74], edx
shr	al, 6
movzx	eax, al
mov	dword ptr [ebp+var_6C],	eax
jmp	loc_641CCBA1
align 10h
mov	esi, [stream_0+8]
			
mov	ecx, [stream_0+24h]
mov	edx, [stream_0+20h]
jmp	short loc_641CCD33
align 4
sub	ecx, edx
mov	[esp+8], ecx	
mov	[esp+4], edx	
mov	[esp], esi	
call	_silc_stream_write
test	eax, eax
jz	loc_641CCDB5
cmp	eax, 0FFFFFFFEh
jz	short loc_641CCD71
cmp	eax, 0FFFFFFFFh
jz	short loc_641CCD40
mov	ecx, [stream_0+24h]
mov	edx, [stream_0+20h]
mov	edi, ecx
sub	edi, edx
cmp	eax, edi
ja	short loc_641CCD33
add	edx, eax
mov	[stream_0+20h],	edx
			
cmp	edx, ecx
jnz	short loc_641CCCFC
mov	ret, [stream_0+1Ch]
mov	[stream_0+24h],	eax
mov	[stream_0+20h],	eax
			
mov	eax, [stream_0+0Ch]
mov	[esp], eax	
call	_silc_mutex_unlock
mov	al, 1
add	esp, 0ACh
pop	stream_0
pop	esi
pop	edi
leave
retn
mov	dl, [stream_0+65h]
mov	eax, edx
and	eax, 3Fh
mov	[ebp+var_7C], eax
mov	src_id_0, [stream_0+50h]
shr	dl, 6
movzx	src_id_type_0, dl
jmp	loc_641CCBB5
mov	eax, [stream_0+1Ch]
mov	[stream_0+24h],	eax
mov	[stream_0+20h],	eax
mov	eax, [stream_0+0Ch]
mov	[esp], eax	
call	_silc_mutex_unlock
mov	eax, [stream_0+4]
mov	eax, [eax+4]
mov	edx, [eax+0Ch]
mov	ecx, [stream_0+18h]
mov	[esp+10h], ecx
mov	ecx, [eax+10h]
mov	[esp+0Ch], ecx
mov	dword ptr [esp+8], 1
mov	[esp+4], stream_0
mov	[esp], eax
call	dword ptr [edx+8]
xor	eax, eax
jmp	loc_641CCC09
mov	eax, [stream_0+1Ch]
mov	[stream_0+24h],	eax
mov	[stream_0+20h],	eax
mov	eax, [stream_0+0Ch]
mov	[esp], eax	
call	_silc_mutex_unlock
mov	eax, [stream_0+4]
mov	eax, [eax+4]
mov	edx, [eax+0Ch]
mov	ecx, [stream_0+18h]
mov	[esp+0Ch], ecx
mov	ecx, [eax+10h]
mov	[esp+8], ecx
mov	[esp+4], stream_0
mov	[esp], eax
call	dword ptr [edx+4]
xor	eax, eax
jmp	loc_641CCC09
mov	eax, [stream_0+1Ch]
mov	[stream_0+24h],	eax
mov	[stream_0+20h],	eax
jmp	short loc_641CCD85
public _silc_packet_get_ids
push	ebp
mov	ebp, esp
push	edi
push	esi
push	ebx
sub	esp, 1Ch
mov	ebx, [ebp+stream]
mov	edi, [ebp+src_id_set]
mov	edx, [ebp+src_id]
mov	esi, [ebp+dst_id]
test	edx, edx
jz	short loc_641CCE42
mov	eax, [stream_0+50h]
test	eax, eax
jz	short loc_641CCE50
mov	[esp+0Ch], src_id_0 
mov	cl, [stream_0+65h]
mov	dl, cl
shr	dl, 6
movzx	edx, dl
mov	[esp+8], edx	
and	ecx, 3Fh
mov	[esp+4], ecx	
mov	[esp], eax	
call	_silc_id_str2id2
test	al, al
jz	short loc_641CCEA0
mov	eax, [stream_0+50h]
test	eax, eax
jz	short loc_641CCE50
test	src_id_set_0, src_id_set_0
jz	short loc_641CCE50
mov	byte ptr [src_id_set_0], 1
			
test	dst_id_0, dst_id_0
jz	short loc_641CCE81
mov	eax, [stream_0+54h]
test	eax, eax
jz	short loc_641CCEAC
mov	[esp+0Ch], dst_id_0 
mov	dl, [stream_0+66h]
mov	cl, dl
shr	cl, 6
movzx	ecx, cl
mov	[esp+8], ecx	
and	edx, 3Fh
mov	[esp+4], edx	
mov	[esp], eax	
call	_silc_id_str2id2
test	al, al
jz	short loc_641CCEA0
mov	ecx, [stream_0+54h]
test	ecx, ecx
jz	short loc_641CCEAC
mov	edx, [ebp+dst_id_set]
test	edx, edx
jz	short loc_641CCEAC
mov	eax, [ebp+dst_id_set]
mov	byte ptr [eax],	1
mov	al, 1
add	esp, 1Ch
pop	stream_0
pop	dst_id_0
pop	src_id_set_0
leave
retn
align 10h
			
xor	eax, eax
add	esp, 1Ch
pop	stream_0
pop	dst_id_0
pop	src_id_set_0
leave
retn
align 4
			
mov	al, 1
add	esp, 1Ch
pop	stream_0
pop	dst_id_0
pop	src_id_set_0
leave
retn
align 4
public _silc_packet_set_ids
			
push	ebp
mov	ebp, esp
push	edi
push	esi
push	ebx
sub	esp, 6Ch
mov	ebx, [ebp+stream]
mov	edx, [ebp+src_id]
mov	edi, [ebp+src_id_type]
mov	eax, [ebp+dst_id_type]
mov	[ebp+var_4E], ax
test	edx, edx
jz	loc_641CCFEC
mov	eax, [stream_0+0Ch]
mov	[esp], eax	
mov	[ebp+id], src_id_0
call	_silc_mutex_lock
lea	eax, [ebp+len]
mov	[ebp+ret_id_len], eax
mov	[esp+10h], eax	
mov	dword ptr [esp+0Ch], 20h 
lea	esi, [ebp+tmp]
mov	[esp+8], esi	
movzx	eax, di
mov	[esp+4], src_id_type_0 
mov	edx, [ebp+id]
mov	[esp], edx	
call	_silc_id_id2str
test	al, al
jz	loc_641CCFD4
mov	eax, [ebp+len]
mov	[esp+4], eax	
mov	[esp], esi	
call	_silc_memdup
test	eax, eax
jz	loc_641CD00C
mov	edx, [stream_0+50h]
mov	[esp], edx	
mov	[ebp+id], tmp_id
call	_silc_free
mov	eax, [ebp+id]
mov	[stream_0+50h],	eax
mov	edx, [ebp+len]
and	edx, 3Fh
mov	tmp_id,	edi
shl	eax, 6
or	eax, edx
mov	[stream_0+65h],	al
mov	edx, [ebp+dst_id]
test	edx, edx
jz	short loc_641CCFBE
mov	eax, [ebp+ret_id_len]
mov	[esp+10h], eax	
mov	dword ptr [esp+0Ch], 20h 
mov	[esp+8], esi	
movzx	eax, [ebp+var_4E]
mov	[esp+4], dst_id_type_0 
mov	dst_id_type_0, [ebp+dst_id]
mov	[esp], eax	
call	_silc_id_id2str
test	al, al
jz	loc_641CD00C
mov	eax, [ebp+len]
mov	[esp+4], eax	
mov	[esp], esi	
call	_silc_memdup
mov	esi, eax
test	eax, eax
jz	short loc_641CD00C
mov	tmp_id,	[stream_0+54h]
mov	[esp], eax	
call	_silc_free
mov	[stream_0+54h],	tmp_id
mov	edx, [ebp+len]
and	edx, 3Fh
mov	al, byte ptr [ebp+var_4E]
shl	eax, 6
or	eax, edx
mov	[stream_0+66h],	al
mov	eax, [stream_0+0Ch]
mov	[esp], eax	
call	_silc_mutex_unlock
mov	al, 1
add	esp, 6Ch
pop	stream_0
pop	tmp_id
pop	src_id_type_0
leave
retn
align 4
mov	eax, [stream_0+0Ch]
mov	[esp], eax	
call	_silc_mutex_unlock
xor	eax, eax
add	esp, 6Ch
pop	stream_0
pop	esi
pop	src_id_type_0
leave
retn
align 4
mov	ecx, [ebp+dst_id]
test	ecx, ecx
jz	short loc_641CCFDF
mov	eax, [stream_0+0Ch]
mov	[esp], eax	
call	_silc_mutex_lock
lea	eax, [ebp+len]
mov	[ebp+ret_id_len], eax
lea	esi, [ebp+tmp]
jmp	loc_641CCF5C
			
mov	tmp_id,	[stream_0+0Ch]
mov	[esp], eax	
call	_silc_mutex_unlock
xor	eax, eax
add	esp, 6Ch
pop	stream_0
pop	tmp_id
pop	src_id_type_0
leave
retn
align 4
public _silc_packet_stream_set_stream
push	ebp
mov	ebp, esp
push	esi
push	ebx
sub	esp, 10h
mov	ebx, [ebp+ps]
mov	esi, [ebp+stream]
mov	eax, [ebx+8]
test	eax, eax
jz	short loc_641CD05A
mov	dword ptr [esp+0Ch], 0 
mov	dword ptr [esp+8], 0 
mov	edx, [ps_0+4]
mov	edx, [edx]
mov	[esp+4], edx	
mov	[esp], eax	
call	_silc_stream_set_notifier
mov	[ps_0+8], stream_0
mov	[esp+0Ch], ps_0	
mov	dword ptr [esp+8], offset _silc_packet_stream_io 
mov	eax, [ps_0+4]
mov	eax, [eax]
mov	[esp+4], eax	
mov	[esp], stream_0	
call	_silc_stream_set_notifier
add	esp, 10h
pop	ps_0
pop	stream_0
leave
retn
align 4
public _silc_packet_engine_stop
push	ebp
mov	ebp, esp
push	esi
push	ebx
sub	esp, 10h
mov	esi, [ebp+engine]
test	esi, esi
jz	loc_641CD118
mov	ebx, [engine_0+28h]
mov	[engine_0+30h],	ebx
and	byte ptr [engine_0+38h], 0FDh
jmp	short loc_641CD0E0
align 4
movzx	eax, word ptr [engine_0+36h]
mov	eax, [ebx+eax]
mov	[engine_0+30h],	eax
mov	eax, [ebx+8]
mov	dword ptr [ebx+14h], 0
mov	dword ptr [ebx+10h], 0
mov	dword ptr [ebx+0Ch], 0
mov	dword ptr [ebx+8], 0
mov	[esp], eax	
call	_silc_free
mov	[esp], ebx	
call	_silc_free
mov	ebx, [engine_0+30h]
test	ebx, ebx
jz	short loc_641CD0F4
test	byte ptr [engine_0+38h], 2
jnz	short loc_641CD0A4
movzx	eax, word ptr [engine_0+34h]
mov	eax, [ebx+eax]
jmp	short loc_641CD0AB
align 4
mov	eax, [engine_0+8]
mov	[esp], eax	
call	_silc_hash_table_free
mov	eax, [engine_0]
mov	[esp], eax	
call	_silc_mutex_free
mov	[ebp+engine], engine_0
add	esp, 10h
pop	ebx
pop	engine_0
leave
jmp	_silc_free
align 4
add	esp, 10h
pop	ebx
pop	engine_0
leave
retn
align 10h
public _silc_packet_engine_start
push	ebp
mov	ebp, esp
push	edi
push	esi
push	ebx
sub	esp, 3Ch
mov	ebx, [ebp+callbacks]
mov	dl, [ebp+router]
test	ebx, ebx
jnz	short loc_641CD140
			
xor	esi, esi
			
mov	eax, engine
add	esp, 3Ch
pop	packet
pop	engine
pop	i
leave
retn
align 10h
mov	edi, [callbacks_0]
test	edi, edi
jz	short loc_641CD133
mov	esi, [callbacks_0+4]
test	esi, esi
jz	short loc_641CD133
mov	ecx, [callbacks_0+8]
test	ecx, ecx
jz	short loc_641CD133
mov	dword ptr [esp+4], 44h 
mov	dword ptr [esp], 1 
mov	[ebp+var_1C], dl
call	_silc_calloc
mov	esi, eax
test	eax, eax
jz	short loc_641CD135
mov	dword ptr [esp+1Ch], 1 
mov	[esp+18h], engine 
mov	dword ptr [esp+14h], offset _silc_packet_engine_context_destr 
mov	dword ptr [esp+10h], 0 
mov	dword ptr [esp+0Ch], 0 
mov	dword ptr [esp+8], 0 
mov	dword ptr [esp+4], offset _silc_hash_ptr 
mov	dword ptr [esp], 0 
call	_silc_hash_table_alloc
mov	[engine+8], eax
test	eax, eax
mov	dl, [ebp+var_1C]
jz	loc_641CD2DA
mov	eax, [ebp+rng]
mov	[engine+4], eax
and	edx, 1
mov	al, [engine+40h]
and	eax, 0FFFFFFFEh
or	eax, edx
mov	[engine+40h], al
mov	[engine+0Ch], callbacks_0
mov	eax, [ebp+callback_context]
mov	[engine+10h], eax
mov	eax, [engine+24h]
and	eax, 3
mov	[engine+24h], eax
mov	word ptr [engine+20h], 0
mov	word ptr [engine+22h], 0
mov	byte ptr [engine+24h], 0
mov	dword ptr [engine+1Ch],	0
mov	dword ptr [engine+18h],	0
mov	dword ptr [engine+14h],	0
mov	[esp], engine	
call	_silc_mutex_alloc
mov	eax, [engine+38h]
and	eax, 3
mov	[engine+38h], eax
mov	word ptr [engine+34h], 0
mov	word ptr [engine+36h], 0
mov	byte ptr [engine+38h], 0
mov	dword ptr [engine+30h],	0
mov	dword ptr [engine+2Ch],	0
mov	dword ptr [engine+28h],	0
xor	edi, edi
mov	dword ptr [esp+4], 24h
mov	dword ptr [esp], 1 
call	_silc_calloc
mov	packet,	eax
test	eax, eax
jz	short loc_641CD2CB
mov	dword ptr [esp], 400h 
call	_silc_malloc
test	eax, eax
jz	short loc_641CD2CB
mov	[packet+8], tmp
lea	edx, [tmp+400h]
mov	[packet+14h], edx
mov	[packet+10h], tmp
mov	[packet+0Ch], tmp
mov	tmp, [engine+28h]
test	eax, eax
jz	short loc_641CD2C2
movzx	eax, word ptr [engine+34h]
mov	edx, [engine+2Ch]
mov	[edx+eax], packet
test	byte ptr [engine+38h], 1
jz	short loc_641CD29F
movzx	edx, word ptr [engine+36h]
mov	ecx, [engine+2Ch]
mov	[packet+edx], ecx
mov	[engine+2Ch], packet
mov	dword ptr [packet+eax],	0
add	dword ptr [engine+38h],	4
inc	i
cmp	i, 5
jnz	short loc_641CD242
mov	eax, [engine+28h]
mov	[engine+30h], eax
and	byte ptr [engine+38h], 0FDh
jmp	loc_641CD135
mov	[engine+28h], packet
movzx	eax, word ptr [engine+34h]
jmp	short loc_641CD28F
			
mov	[esp], engine
call	_silc_packet_engine_stop
xor	engine,	engine
jmp	loc_641CD135
mov	[esp], engine
call	_silc_free
xor	engine,	engine
jmp	loc_641CD135
align 4
public _silc_packet_send_va_ext
push	ebp
mov	ebp, esp
push	edi
push	esi
push	ebx
sub	esp, 5Ch
mov	al, [ebp+type]
mov	[ebp+var_29], al
mov	al, [ebp+flags]
mov	[ebp+var_2A], al
mov	esi, [ebp+src_id_type]
mov	ebx, [ebp+dst_id_type]
lea	edx, [ebp+buf]
mov	ecx, 10h
xor	eax, eax
mov	edi, edx
rep stosb
lea	eax, [ebp+ap]
mov	[esp+4], eax	
mov	[esp], edx	
call	_silc_buffer_format_vp
test	eax, eax
js	loc_641CD3B4
mov	edx, [ebp+buf.data]
mov	eax, [ebp+hmac]
mov	[esp+28h], eax	
mov	eax, [ebp+cipher]
mov	[esp+24h], eax	
mov	eax, [ebp+buf.tail]
sub	eax, edx
mov	[esp+20h], eax	
mov	[esp+1Ch], edx	
mov	eax, [ebp+dst_id]
mov	[esp+18h], eax	
movzx	dst_id_type_0, bx
mov	[esp+14h], dst_id_type_0 
mov	eax, [ebp+src_id]
mov	[esp+10h], eax	
movzx	src_id_type_0, si
mov	[esp+0Ch], src_id_type_0 
movzx	eax, [ebp+var_2A]
mov	[esp+8], flags_0 
movzx	flags_0, [ebp+var_29]
mov	[esp+4], type_0	
mov	type_0,	[ebp+stream]
mov	[esp], eax	
call	_silc_packet_send_ext
mov	eax, [ebp+buf.head]
mov	[ebp+buf.end], 0
mov	[ebp+buf.tail],	0
mov	[ebp+buf.data],	0
mov	[ebp+buf.head],	0
mov	[esp], eax	
call	_silc_free
mov	al, 1
add	esp, 5Ch
pop	dst_id_type_0
pop	src_id_type_0
pop	edi
leave
retn
align 4
xor	eax, eax
add	esp, 5Ch
pop	dst_id_type_0
pop	src_id_type_0
pop	edi
leave
retn
align 10h
public _silc_packet_engine_get_streams
push	ebp
mov	ebp, esp
push	edi
push	esi
push	ebx
sub	esp, 1Ch
mov	edi, [ebp+engine]
mov	dword ptr [esp], 1Ch 
call	_silc_malloc
mov	ebx, eax
test	eax, eax
jz	loc_641CD4B2
mov	dword ptr [list+18h], 0
mov	dword ptr [list+14h], 0
mov	list, [list+10h]
and	eax, 3
mov	[list+10h], eax
mov	word ptr [list+0Ch], 4
mov	word ptr [list+0Eh], 8
mov	byte ptr [list+10h], 1
mov	dword ptr [list+8], 0
mov	dword ptr [list+4], 0
mov	dword ptr [list], 0
mov	eax, [engine_0]
mov	[esp], eax	
call	_silc_mutex_lock
mov	esi, [engine_0+14h]
mov	[engine_0+1Ch],	esi
and	byte ptr [engine_0+24h], 0FDh
jmp	short loc_641CD48B
align 4
movzx	eax, word ptr [engine_0+22h]
mov	eax, [esi+eax]
mov	[engine_0+1Ch],	eax
mov	eax, [esi+60h]
mov	eax, [esi+60h]
inc	eax
mov	[esi+60h], eax
mov	dword ptr [esp], 0Ch 
call	_silc_malloc
test	eax, eax
jz	short loc_641CD488
mov	[eax], esi
mov	edx, [list]
test	edx, edx
jz	short loc_641CD4A0
movzx	edx, word ptr [list+0Ch]
mov	ecx, [list+4]
mov	[ecx+edx], eax
test	byte ptr [list+10h], 1
jz	short loc_641CD47A
movzx	ecx, word ptr [list+0Eh]
mov	esi, [list+4]
mov	[eax+ecx], esi
mov	[list+4], eax
mov	dword ptr [eax+edx], 0
add	dword ptr [list+10h], 4
mov	esi, [engine_0+1Ch]
test	esi, esi
jz	short loc_641CD4A8
test	byte ptr [engine_0+24h], 2
jnz	short loc_641CD434
movzx	eax, word ptr [engine_0+20h]
mov	eax, [esi+eax]
jmp	short loc_641CD43B
align 10h
mov	[list],	eax
movzx	edx, word ptr [list+0Ch]
jmp	short loc_641CD46A
mov	eax, [engine_0]
mov	[esp], eax	
call	_silc_mutex_unlock
mov	eax, list
add	esp, 1Ch
pop	list
pop	esi
pop	engine_0
leave
retn
public _silc_packet_stream_destroy
			
push	ebp
mov	ebp, esp
push	edi
push	esi
push	ebx
sub	esp, 8Ch
mov	ebx, [ebp+stream]
test	ebx, ebx
jz	short loc_641CD501
mov	edx, [ebp+stream]
mov	eax, [edx+60h]
mov	ecx, edx
mov	edx, [edx+60h]
dec	edx
mov	[ecx+60h], edx
dec	eax
jz	short loc_641CD50C
mov	al, [ecx+67h]
test	al, 2
jnz	short loc_641CD501
or	eax, 2
mov	[ecx+67h], al
test	al, 8
jnz	short loc_641CD501
mov	eax, [ecx+8]
test	eax, eax
jz	short loc_641CD501
mov	[esp], eax	
call	_silc_stream_close
			
add	esp, 8Ch
pop	ebx
pop	esi
pop	edi
leave
retn
mov	ebx, [ebp+stream]
test	byte ptr [ebx+67h], 8
jnz	loc_641CD59D
mov	eax, [ebx+4]
test	eax, eax
jz	short loc_641CD585
mov	ebx, [eax+4]
mov	eax, [engine]
mov	[esp], eax	
call	_silc_mutex_lock
mov	eax, [engine+14h]
test	prev, prev
jz	short loc_641CD55B
cmp	[ebp+stream], prev
jz	loc_641CD961
movzx	esi, word ptr [engine+20h]
mov	edi, [ebp+stream]
jmp	short loc_641CD552
align 4
cmp	stream_0, prev
jz	loc_641CD96A
mov	eax, prev
lea	p, [prev+esi]
mov	ecx, [p]
test	prev, prev
jnz	short loc_641CD548
			
mov	esi, [ebp+stream]
cmp	[engine+18h], esi
jz	loc_641CD9AF
mov	edi, [ebp+stream]
mov	prev, [edi+4]
dec	dword ptr [eax+0Ch]
mov	prev, [eax+0Ch]
test	ecx, ecx
jz	loc_641CD999
mov	eax, [engine]
mov	[esp], eax	
call	_silc_mutex_unlock
mov	edx, [ebp+stream]
mov	eax, [edx+8]
test	eax, eax
jz	loc_641CD61B
mov	[esp], eax	
call	_silc_stream_destroy
jmp	short loc_641CD61B
mov	ecx, [ebp+stream]
mov	eax, [ecx+4]
mov	ebx, [eax+4]
mov	eax, [ecx+14h]
mov	edx, [eax]
mov	[esp+10h], edx
movzx	eax, word ptr [eax+4]
mov	[esp+0Ch], eax
mov	dword ptr [esp+8], offset aDS 
mov	dword ptr [esp+4], 40h 
lea	esi, [ebp+tuple]
mov	[esp], esi	
call	_silc_snprintf
mov	eax, [engine]
mov	[esp], eax	
call	_silc_mutex_lock
mov	[esp+4], esi	
mov	eax, [engine+3Ch]
mov	[esp], eax	
call	_silc_hash_table_del
mov	eax, [engine]
mov	[esp], eax	
call	_silc_mutex_unlock
mov	engine,	[ebp+stream]
mov	eax, [ebx+14h]
mov	eax, [eax]
mov	[esp], eax	
call	_silc_free
mov	eax, [ebx+14h]
mov	[esp], eax	
call	_silc_free
mov	eax, [ebx+8]
mov	[esp], eax	
call	_silc_packet_stream_unref
			
mov	esi, [ebp+stream]
mov	edx, [esi+1Ch]
mov	ecx, [esi+28h]
sub	ecx, edx
xor	eax, eax
mov	edi, edx
rep stosb
mov	eax, [esi+1Ch]
mov	dword ptr [esi+28h], 0
mov	dword ptr [esi+24h], 0
mov	dword ptr [esi+20h], 0
mov	dword ptr [esi+1Ch], 0
mov	[esp], eax	
call	_silc_free
mov	eax, [esi+10h]
test	eax, eax
jz	loc_641CD817
mov	edx, [eax]
mov	[eax+8], edx
and	byte ptr [eax+10h], 0FDh
mov	dword ptr [eax+18h], 0
mov	dword ptr [eax+14h], 0
lea	p, [p+0]
			
mov	edi, [ebp+stream]
mov	engine,	[edi+10h]
mov	eax, [ebx+14h]
mov	[ebx+18h], eax
mov	eax, [ebx+8]
test	eax, eax
jz	loc_641CD7A4
test	byte ptr [ebx+10h], 2
jz	loc_641CD744
movzx	edx, word ptr [ebx+0Eh]
mov	edx, [eax+edx]
mov	[ebx+8], edx
mov	[ebx+14h], eax
mov	p, [eax]
test	p, p
jz	loc_641CD7AB
mov	eax, [p]
mov	[esp], eax	
call	_silc_free
mov	[esp], p	
call	_silc_free
mov	edi, [ebp+stream]
mov	edx, [edi+10h]
mov	edi, [edx]
mov	eax, edi
mov	[edx+8], edi
and	byte ptr [edx+10h], 0FDh
xor	ecx, ecx
test	eax, eax
jz	short loc_641CD678
test	cl, cl
jz	short loc_641CD6F5
movzx	ebx, word ptr [edx+0Eh]
mov	ebx, [eax+ebx]
mov	[edx+8], ebx
cmp	p, [eax]
jz	short loc_641CD703
mov	eax, ebx
test	eax, eax
jz	short loc_641CD678
test	cl, cl
jnz	short loc_641CD6DD
movzx	ebx, word ptr [edx+0Ch]
mov	ebx, [eax+ebx]
mov	[edx+8], ebx
cmp	p, [eax]
jnz	short loc_641CD6EB
mov	ecx, edi
test	edi, edi
jz	short loc_641CD727
cmp	eax, edi
jz	loc_641CD953
movzx	edi, word ptr [edx+0Ch]
jmp	short loc_641CD71E
align 4
cmp	eax, esi
jz	short loc_641CD750
mov	ecx, esi
lea	ebx, [ecx+edi]
mov	p, [ebx]
test	esi, esi
jnz	short loc_641CD718
cmp	eax, [edx+4]
jz	short loc_641CD781
cmp	eax, [edx+14h]
jz	short loc_641CD78C
cmp	eax, [edx+18h]
jz	short loc_641CD798
			
mov	[esp], eax	
call	_silc_free
jmp	loc_641CD678
align 4
movzx	edx, word ptr [ebx+0Ch]
mov	edx, [eax+edx]
jmp	loc_641CD6A0
mov	[ebp+var_6C], ebx
mov	p, [eax+edi]
mov	ebx, [ebp+var_6C]
mov	[ebx], esi
test	esi, esi
jz	short loc_641CD76F
test	byte ptr [edx+10h], 1
jz	short loc_641CD76F
movzx	edi, word ptr [edx+0Eh]
mov	ebx, [eax+edi]
mov	[esi+edi], ebx
			
cmp	eax, [edx+8]
jz	loc_641CD93B
sub	dword ptr [edx+10h], 4
cmp	eax, [edx+4]
jnz	short loc_641CD72C
mov	[edx+4], ecx
cmp	eax, [edx+14h]
jnz	short loc_641CD731
lea	p, [p+0]
mov	dword ptr [edx+14h], 0
cmp	eax, [edx+18h]
jnz	short loc_641CD736
mov	dword ptr [edx+18h], 0
jmp	short loc_641CD736
align 4
mov	dword ptr [ebx+14h], 0
test	ebx, ebx
jz	short loc_641CD817
mov	p, [ebx]
mov	[ebx+8], esi
and	byte ptr [ebx+10h], 0FDh
test	esi, esi
jz	short loc_641CD80F
test	byte ptr [ebx+10h], 2
jz	loc_641CD8EC
movzx	eax, word ptr [ebx+0Eh]
mov	eax, [esi+eax]
mov	[ebx+8], eax
mov	eax, [ebx]
test	eax, eax
jz	short loc_641CD7F7
cmp	esi, eax
jz	loc_641CD948
movzx	edi, word ptr [ebx+0Ch]
jmp	short loc_641CD7EE
cmp	esi, ecx
jz	loc_641CD8F8
mov	eax, ecx
lea	edx, [eax+edi]
mov	ecx, [edx]
test	ecx, ecx
jnz	short loc_641CD7E4
cmp	esi, [ebx+4]
jz	loc_641CD929
			
mov	[esp], esi	
call	_silc_free
mov	esi, [ebx+8]
test	esi, esi
jnz	short loc_641CD7BC
mov	[esp], ebx	
call	_silc_free
			
mov	engine,	[ebp+stream]
mov	eax, [ebx+30h]
test	eax, eax
jz	short loc_641CD829
mov	[esp], eax	
call	_silc_cipher_free
mov	p, [ebp+stream]
mov	eax, [esi+40h]
test	eax, eax
jz	short loc_641CD83B
mov	[esp], eax	
call	_silc_cipher_free
mov	edi, [ebp+stream]
mov	eax, [edi+38h]
test	eax, eax
jz	short loc_641CD84D
mov	[esp], eax	
call	_silc_hmac_free
mov	edx, [ebp+stream]
mov	eax, [edx+48h]
test	eax, eax
jz	short loc_641CD85F
mov	[esp], eax	
call	_silc_hmac_free
mov	ecx, [ebp+stream]
mov	eax, [ecx+34h]
test	eax, eax
jz	short loc_641CD871
mov	[esp], eax	
call	_silc_cipher_free
mov	ebx, [ebp+stream]
mov	eax, [ebx+44h]
test	eax, eax
jz	short loc_641CD883
mov	[esp], eax	
call	_silc_cipher_free
mov	esi, [ebp+stream]
mov	eax, [esi+3Ch]
test	eax, eax
jz	short loc_641CD895
mov	[esp], eax	
call	_silc_hmac_free
mov	edi, [ebp+stream]
mov	eax, [edi+4Ch]
test	eax, eax
jz	short loc_641CD8A7
mov	[esp], eax	
call	_silc_hmac_free
mov	edx, [ebp+stream]
mov	eax, [edx+50h]
mov	[esp], eax	
call	_silc_free
mov	ecx, [ebp+stream]
mov	eax, [ecx+54h]
mov	[esp], eax	
call	_silc_free
mov	ebx, [ebp+stream]
mov	dword ptr [ebx+60h], 0
mov	eax, [ebx+0Ch]
mov	[esp], eax	
call	_silc_mutex_free
mov	[esp], ebx	
call	_silc_free
add	esp, 8Ch
pop	ebx
pop	esi
pop	edi
leave
retn
align 4
movzx	eax, word ptr [ebx+0Ch]
mov	eax, [esi+eax]
jmp	loc_641CD7CD
mov	[ebp+var_6C], edx
mov	ecx, [esi+edi]
mov	edx, [ebp+var_6C]
mov	[edx], ecx
test	ecx, ecx
jz	short loc_641CD917
test	byte ptr [ebx+10h], 1
jz	short loc_641CD917
movzx	edi, word ptr [ebx+0Eh]
mov	edx, [esi+edi]
mov	[ecx+edi], edx
			
cmp	esi, [ebx+8]
jz	short loc_641CD931
sub	dword ptr [ebx+10h], 4
cmp	esi, [ebx+4]
jnz	loc_641CD800
mov	[ebx+4], eax
jmp	loc_641CD800
mov	ecx, [ebp+var_6C]
mov	edx, [ecx]
mov	[ebx+8], edx
jmp	short loc_641CD91C
mov	esi, [ebp+var_6C]
mov	ebx, [esi]
mov	[edx+8], ebx
jmp	loc_641CD778
movzx	edi, word ptr [ebx+0Ch]
mov	[ebp+var_6C], ebx
xor	eax, eax
jmp	short loc_641CD8FB
mov	[ebp+var_6C], edx
movzx	edi, word ptr [edx+0Ch]
xor	ecx, ecx
jmp	loc_641CD753
lea	edx, [engine+14h]
movzx	esi, word ptr [engine+20h]
xor	prev, prev
mov	edi, [ebp+stream]
mov	prev, [edi+esi]
mov	[p], ecx
test	ecx, ecx
jz	short loc_641CD97C
test	byte ptr [engine+24h], 1
jnz	short loc_641CD98D
			
mov	ecx, [ebp+stream]
cmp	[engine+1Ch], ecx
jz	short loc_641CD9B7
sub	dword ptr [engine+24h],	4
jmp	loc_641CD55B
movzx	esi, word ptr [engine+22h]
mov	edi, [edi+esi]
mov	[ecx+esi], edi
jmp	short loc_641CD97C
mov	eax, [eax]
mov	[esp+4], eax	
mov	eax, [engine+8]
mov	[esp], eax	
call	_silc_hash_table_del
jmp	loc_641CD57B
mov	[engine+18h], prev
jmp	loc_641CD567
mov	p, [p]
mov	[engine+1Ch], edx
jmp	short loc_641CD984
align 10h
public _silc_packet_stream_unref
push	ebp
mov	ebp, esp
sub	esp, 8
mov	eax, [ebp+stream]
mov	edx, [eax+60h]
mov	ecx, [eax+60h]
dec	ecx
mov	[eax+60h], ecx
dec	edx
jz	short loc_641CD9D8
leave
retn
mov	edx, [stream_0+60h]
mov	edx, [stream_0+60h]
inc	edx
mov	[stream_0+60h],	edx
leave
jmp	_silc_packet_stream_destroy
public _silc_packet_stream_add_remote
push	ebp
mov	ebp, esp
push	edi
push	esi
push	ebx
sub	esp, 4Ch
mov	esi, [ebp+stream]
mov	edi, [ebp+remote_port]
mov	edx, edi
mov	eax, [esi+4]
mov	ecx, [eax+4]
mov	ebx, [ebp+remote_ip]
test	ebx, ebx
jnz	short loc_641CDA14
xor	ebx, ebx
			
mov	eax, ps
add	esp, 4Ch
pop	ps
pop	stream_0
pop	remote_port_0
leave
retn
align 4
test	di, di
jz	short loc_641CDA06
mov	dword ptr [esp+4], 0 
mov	eax, [stream_0+8]
mov	[esp], eax	
mov	[ebp+key], edx
mov	[ebp+var_1C], engine
call	_silc_socket_stream_is_udp
test	al, al
mov	edx, [ebp+key]
mov	ecx, [ebp+var_1C]
jz	loc_641CDBE4
mov	dword ptr [esp+4], 68h 
mov	dword ptr [esp], 1 
mov	[ebp+key], edx
mov	[ebp+var_1C], ecx
call	_silc_calloc
mov	ebx, eax
test	eax, eax
jz	short loc_641CDA08
mov	ps, [stream_0+4]
mov	[ps+4],	eax
mov	dword ptr [ps+60h], 1
lea	eax, [ps+0Ch]
mov	[esp], eax	
call	_silc_mutex_alloc
mov	eax, [stream_0+60h]
mov	eax, [stream_0+60h]
inc	eax
mov	[stream_0+60h],	eax
mov	[ps+8],	stream_0
or	byte ptr [ps+67h], 8
mov	dword ptr [esp], 400h 
call	_silc_malloc
mov	[ebp+tmp], eax
test	eax, eax
mov	edx, [ebp+key]
mov	ecx, [ebp+var_1C]
jz	loc_641CDC20
mov	eax, [ebp+tmp]
mov	[ps+1Ch], eax
add	eax, 400h
mov	[ps+28h], eax
mov	eax, [ebp+tmp]
mov	[ps+24h], eax
mov	[ps+20h], eax
mov	[ebp+key], edx
mov	[ebp+var_1C], ecx
call	_silc_dlist_init
mov	[ps+10h], eax
test	eax, eax
mov	edx, [ebp+key]
mov	ecx, [ebp+var_1C]
jz	loc_641CDC20
mov	eax, [ebp+remote_ip]
mov	[esp+8], eax
movzx	edx, dx
mov	[esp+4], remote_port_0
mov	dword ptr [esp], offset	aDS 
mov	[ebp+var_1C], ecx
call	_silc_format
mov	ecx, [ebp+var_1C]
mov	edx, [ecx]
mov	[esp], edx	
mov	[ebp+key], eax
call	_silc_mutex_lock
mov	eax, [ebp+key]
test	eax, eax
mov	ecx, [ebp+var_1C]
jz	loc_641CDC07
mov	[esp+8], ps	
mov	[esp+4], tuple	
mov	tuple, [ecx+3Ch]
mov	[esp], eax	
call	_silc_hash_table_add
test	al, al
mov	ecx, [ebp+var_1C]
jz	loc_641CDC07
mov	eax, [ecx]
mov	[esp], eax	
call	_silc_mutex_unlock
mov	dword ptr [esp+4], 8 
mov	dword ptr [esp], 1 
call	_silc_calloc
mov	edx, eax
mov	[ps+14h], eax
test	eax, eax
jz	loc_641CDC20
mov	[eax+4], di
mov	eax, [ebp+remote_ip]
mov	[esp], eax	
mov	[ebp+key], edx
call	_strdup
mov	edx, [ebp+key]
mov	[edx], eax
mov	eax, [ps+14h]
mov	eax, [eax]
test	eax, eax
jz	loc_641CDC20
mov	remote_port_0, [ebp+packet]
test	edi, edi
jz	loc_641CDA08
mov	edx, [ebp+packet]
mov	[edx+4], ps
mov	eax, [ps+60h]
mov	eax, [ps+60h]
inc	eax
mov	[ps+60h], eax
mov	eax, [stream_0+8]
mov	[esp], eax	
call	_silc_stream_get_schedule
mov	dword ptr [esp+18h], 1 
mov	dword ptr [esp+14h], 0 
mov	dword ptr [esp+10h], 0 
mov	edx, [ebp+packet]
mov	[esp+0Ch], edx	
mov	dword ptr [esp+8], offset _silc_packet_stream_inject_packet 
mov	dword ptr [esp+4], 0 
mov	[esp], eax	
call	_silc_schedule_task_add
jmp	loc_641CDA08
align 4
mov	dword ptr [esp], offset	aStreamIsNotUdp	
call	_silc_format
mov	[esp+4], eax	
mov	dword ptr [esp], 3 
call	_silc_log_output
xor	ebx, ebx
jmp	loc_641CDA08
			
mov	tuple, [ecx]
mov	[esp], eax	
call	_silc_mutex_unlock
mov	[esp], ps	
call	_silc_packet_stream_destroy
xor	ps, ps
jmp	loc_641CDA08
			
mov	[esp], ps
call	_silc_packet_stream_destroy
xor	ps, ps
jmp	loc_641CDA08
align 10h
public _silc_packet_stream_create
push	ebp
mov	ebp, esp
push	edi
push	esi
push	ebx
sub	esp, 3Ch
mov	esi, [ebp+engine]
mov	edi, [ebp+stream]
test	esi, esi
jnz	short loc_641CDC50
xor	ebx, ebx
			
mov	eax, ps
add	esp, 3Ch
pop	ps
pop	engine_0
pop	stream_0
leave
retn
align 10h
test	stream_0, stream_0
jz	short loc_641CDC43
mov	dword ptr [esp+4], 68h 
mov	dword ptr [esp], 1 
call	_silc_calloc
mov	ebx, eax
test	eax, eax
jz	short loc_641CDC45
mov	[ps+8],	stream_0
mov	dword ptr [ps+60h], 1
lea	ps, [ps+0Ch]
mov	[esp], eax	
call	_silc_mutex_alloc
mov	dword ptr [esp], 400h 
call	_silc_malloc
test	eax, eax
jz	loc_641CDD67
mov	[ps+1Ch], tmp
lea	edx, [tmp+400h]
mov	[ps+28h], edx
mov	[ps+24h], tmp
mov	[ps+20h], tmp
call	_silc_dlist_init
mov	[ps+10h], eax
test	eax, eax
jz	loc_641CDD60
mov	eax, [engine_0]
mov	[esp], eax	
call	_silc_mutex_lock
lea	eax, [ps+4]
mov	[esp+0Ch], eax	
mov	dword ptr [esp+8], 0 
mov	eax, [ebp+schedule]
mov	[esp+4], eax	
mov	eax, [engine_0+8]
mov	[esp], eax	
call	_silc_hash_table_find
test	al, al
jz	loc_641CDD78
mov	eax, [ps+4]
inc	dword ptr [eax+0Ch]
mov	edx, [engine_0+14h]
test	edx, edx
jz	loc_641CDE50
movzx	eax, word ptr [engine_0+20h]
mov	edx, [engine_0+18h]
mov	[edx+eax], ps
test	byte ptr [engine_0+24h], 1
jz	short loc_641CDD17
movzx	edx, word ptr [engine_0+22h]
mov	ecx, [engine_0+18h]
mov	[ps+edx], ecx
mov	[engine_0+18h],	ps
mov	dword ptr [ps+eax], 0
add	dword ptr [engine_0+24h], 4
mov	eax, [engine_0+3Ch]
test	eax, eax
jz	loc_641CDE5C
			
mov	eax, [engine_0]
mov	[esp], eax	
call	_silc_mutex_unlock
mov	[esp+0Ch], ps	
mov	dword ptr [esp+8], offset _silc_packet_stream_io 
mov	edx, [ebp+schedule]
mov	[esp+4], edx	
mov	eax, [ps+8]
mov	[esp], eax	
call	_silc_stream_set_notifier
test	al, al
jnz	loc_641CDC45
			
mov	dword ptr [ps+8], 0
			
mov	[esp], ps
call	_silc_packet_stream_destroy
xor	ps, ps
jmp	loc_641CDC45
align 4
mov	dword ptr [esp+4], 10h 
mov	dword ptr [esp], 1 
call	_silc_calloc
mov	[ps+4],	eax
test	eax, eax
jz	loc_641CDEE8
mov	[eax+4], engine_0
mov	edx, [ebp+schedule]
mov	[eax], edx
mov	eax, 10400h	
call	_silc_buffer_alloc_1
mov	ecx, eax
test	eax, eax
jz	loc_641CDEC7
mov	inbuf, [inbuf]
mov	[inbuf+8], eax
mov	[inbuf+4], eax
mov	edx, [ps+4]
mov	[ebp+var_20], edx
mov	[ebp+context], inbuf
call	_silc_dlist_init
mov	edx, [ebp+var_20]
mov	[edx+8], eax
mov	eax, [ps+4]
mov	eax, [eax+8]	
test	eax, eax
mov	ecx, [ebp+context]
jz	loc_641CDEC0
mov	edx, ecx	
mov	[ebp+context], inbuf
call	_silc_dlist_add
mov	eax, [ps+4]
mov	[esp+8], eax	
mov	eax, [ebp+schedule]
mov	[esp+4], eax	
mov	eax, [engine_0+8]
mov	[esp], eax	
call	_silc_hash_table_add
test	al, al
mov	ecx, [ebp+context]
jnz	loc_641CDCEC
mov	eax, ecx	
call	_silc_buffer_free_0
mov	eax, [ps+4]
mov	eax, [eax+8]	
mov	ecx, [ebp+context]
mov	edx, ecx	
call	_silc_dlist_del
mov	eax, [ps+4]
mov	[esp], eax	
call	_silc_free
mov	dword ptr [ps+4], 0
mov	eax, [engine_0]
mov	[esp], eax	
call	_silc_mutex_unlock
mov	dword ptr [ps+8], 0
jmp	loc_641CDD67
align 10h
mov	[engine_0+14h],	ps
movzx	eax, word ptr [engine_0+20h]
jmp	loc_641CDD07
mov	dword ptr [esp+4], 0 
mov	[esp], stream_0	
call	_silc_socket_stream_is_udp
test	al, al
jz	loc_641CDD30
mov	dword ptr [esp+1Ch], 1 
mov	dword ptr [esp+18h], 0 
mov	dword ptr [esp+14h], offset _silc_packet_engine_hash_destr 
mov	dword ptr [esp+10h], 0 
mov	dword ptr [esp+0Ch], offset _silc_hash_string_compare 
mov	dword ptr [esp+8], 0 
mov	dword ptr [esp+4], offset _silc_hash_string 
mov	dword ptr [esp], 0 
call	_silc_hash_table_alloc
mov	[engine_0+3Ch],	eax
jmp	loc_641CDD30
mov	eax, ecx	
call	_silc_buffer_free_0
mov	inbuf, [ps+4]
mov	[esp], eax	
call	_silc_free
mov	dword ptr [ps+4], 0
mov	eax, [engine_0]
mov	[esp], eax	
call	_silc_mutex_unlock
jmp	loc_641CDD60
mov	eax, [engine_0]
mov	[esp], eax	
call	_silc_mutex_unlock
jmp	loc_641CDD60
align 4
public _silc_packet_stream_inject_packet
push	ebp
mov	ebp, esp
push	esi
push	ebx
sub	esp, 10h
mov	esi, [ebp+context]
mov	ebx, [esi+4]
mov	eax, [stream+0Ch]
mov	[esp], eax	
call	_silc_mutex_lock
test	byte ptr [stream+67h], 2
jnz	short loc_641CDF1E
mov	eax, context_0	
call	_silc_packet_dispatch
mov	eax, [stream+0Ch]
mov	[esp], eax	
call	_silc_mutex_unlock
mov	eax, [stream+60h]
mov	edx, [stream+60h]
dec	edx
mov	[stream+60h], edx
dec	eax
jz	short loc_641CDF40
add	esp, 10h
pop	stream
pop	context_0
leave
retn
align 10h
mov	eax, [stream+60h]
mov	eax, [stream+60h]
inc	eax
mov	[stream+60h], eax
mov	[ebp+schedule],	stream
add	esp, 10h
pop	stream
pop	context_0
leave
jmp	_silc_packet_stream_destroy
push	ebp
mov	ebp, esp
push	edi
push	esi
push	ebx
sub	esp, 4Ch
mov	eax, [ebp+context]
mov	[ebp+sc], eax
mov	eax, [eax+8]
mov	edx, [eax]
mov	[eax+8], edx
and	byte ptr [eax+10h], 0FDh
mov	dword ptr [eax+18h], 0
mov	dword ptr [eax+14h], 0
lea	esi, [esi+0]
			
mov	eax, [ebp+sc]
mov	edi, [eax+8]
mov	eax, [edi+14h]
mov	[edi+18h], eax
mov	eax, [edi+8]
test	eax, eax
jz	loc_641CE0C8
test	byte ptr [edi+10h], 2
jz	loc_641CE068
movzx	edx, word ptr [edi+0Eh]
mov	edx, [eax+edx]
mov	[edi+8], edx
mov	[edi+14h], eax
mov	buffer,	[eax]
test	buffer,	buffer
jz	loc_641CE0CF
mov	edx, [buffer]
mov	ecx, [buffer+0Ch]
sub	ecx, edx
mov	edi, edx
xor	eax, eax
rep stosb
mov	eax, [buffer]
mov	[buffer+8], eax
mov	[buffer+4], eax
mov	[esp], eax	
call	_silc_free
mov	[esp], buffer	
call	_silc_free
mov	ecx, [ebp+sc]
mov	edx, [ecx+8]
mov	edi, [edx]
mov	eax, edi
mov	[edx+8], edi
and	byte ptr [edx+10h], 0FDh
xor	ecx, ecx
test	eax, eax
jz	short loc_641CDF84
test	cl, cl
jz	short loc_641CE018
movzx	esi, word ptr [edx+0Eh]
mov	esi, [eax+esi]
mov	[edx+8], esi
cmp	buffer,	[eax]
jz	short loc_641CE026
mov	eax, esi
test	eax, eax
jz	loc_641CDF84
test	cl, cl
jnz	short loc_641CDFFC
movzx	esi, word ptr [edx+0Ch]
mov	esi, [eax+esi]
mov	[edx+8], esi
cmp	buffer,	[eax]
jnz	short loc_641CE00A
mov	ecx, edi
test	edi, edi
jz	short loc_641CE04B
cmp	eax, edi
jz	loc_641CE1A4
movzx	edi, word ptr [edx+0Ch]
jmp	short loc_641CE042
align 4
cmp	eax, esi
jz	short loc_641CE074
mov	ecx, esi
lea	buffer,	[ecx+edi]
mov	esi, [ebx]
test	esi, esi
jnz	short loc_641CE03C
cmp	eax, [edx+4]
jz	short loc_641CE0A5
cmp	eax, [edx+14h]
jz	short loc_641CE0B0
cmp	eax, [edx+18h]
jz	short loc_641CE0BC
			
mov	[esp], eax	
call	_silc_free
jmp	loc_641CDF84
align 4
movzx	edx, word ptr [edi+0Ch]
mov	edx, [eax+edx]
jmp	loc_641CDFAC
mov	[ebp+var_3C], ebx
mov	esi, [eax+edi]
mov	buffer,	[ebp+var_3C]
mov	[ebx], esi
test	esi, esi
jz	short loc_641CE093
test	byte ptr [edx+10h], 1
jz	short loc_641CE093
movzx	edi, word ptr [edx+0Eh]
mov	ebx, [eax+edi]
mov	[esi+edi], ebx
			
cmp	eax, [edx+8]
jz	loc_641CE18C
sub	dword ptr [edx+10h], 4
cmp	eax, [edx+4]
jnz	short loc_641CE050
mov	[edx+4], ecx
cmp	eax, [edx+14h]
jnz	short loc_641CE055
lea	esi, [esi+0]
mov	dword ptr [edx+14h], 0
cmp	eax, [edx+18h]
jnz	short loc_641CE05A
mov	dword ptr [edx+18h], 0
jmp	short loc_641CE05A
align 4
mov	dword ptr [edi+14h], 0
test	edi, edi
jz	short loc_641CE12F
mov	buffer,	[edi]
mov	[edi+8], ebx
and	byte ptr [edi+10h], 0FDh
test	ebx, ebx
jz	short loc_641CE127
test	byte ptr [edi+10h], 2
jz	short loc_641CE144
movzx	eax, word ptr [edi+0Eh]
mov	eax, [ebx+eax]
mov	[edi+8], eax
mov	eax, [edi]
test	eax, eax
jz	short loc_641CE113
cmp	ebx, eax
jz	loc_641CE199
movzx	esi, word ptr [edi+0Ch]
jmp	short loc_641CE10A
cmp	ebx, ecx
jz	short loc_641CE150
mov	eax, ecx
lea	edx, [eax+esi]
mov	ecx, [edx]
test	ecx, ecx
jnz	short loc_641CE104
cmp	ebx, [edi+4]
jz	short loc_641CE17D
			
mov	[esp], ebx	
call	_silc_free
mov	ebx, [edi+8]
test	ebx, ebx
jnz	short loc_641CE0E0
mov	[esp], edi	
call	_silc_free
mov	buffer,	[ebp+sc]
mov	[ebp+key], ebx
add	esp, 4Ch
pop	ebx
pop	esi
pop	edi
leave
jmp	_silc_free
align 4
movzx	eax, word ptr [edi+0Ch]
mov	eax, [ebx+eax]
jmp	short loc_641CE0ED
align 10h
mov	[ebp+var_3C], edx
mov	ecx, [ebx+esi]
mov	edx, [ebp+var_3C]
mov	[edx], ecx
test	ecx, ecx
jz	short loc_641CE16F
test	byte ptr [edi+10h], 1
jz	short loc_641CE16F
movzx	esi, word ptr [edi+0Eh]
mov	edx, [ebx+esi]
mov	[ecx+esi], edx
			
cmp	ebx, [edi+8]
jz	short loc_641CE182
sub	dword ptr [edi+10h], 4
cmp	ebx, [edi+4]
jnz	short loc_641CE118
mov	[edi+4], eax
jmp	short loc_641CE118
mov	ecx, [ebp+var_3C]
mov	edx, [ecx]
mov	[edi+8], edx
jmp	short loc_641CE174
mov	esi, [ebp+var_3C]
mov	ebx, [esi]
mov	[edx+8], ebx
jmp	loc_641CE09C
movzx	esi, word ptr [edi+0Ch]
mov	[ebp+var_3C], edi
xor	eax, eax
jmp	short loc_641CE153
mov	[ebp+var_3C], edx
movzx	edi, word ptr [edx+0Ch]
xor	ecx, ecx
jmp	loc_641CE077
align 4
public _silc_packet_engine_free_streams_list
push	ebp
mov	ebp, esp
push	edi
push	esi
push	ebx
sub	esp, 3Ch
mov	ebx, [ebp+streams]
mov	eax, [ebx]
mov	[ebx+8], eax
movzx	esi, byte ptr [ebx+10h]
and	esi, 0FFFFFFFDh
mov	eax, esi
mov	[ebx+10h], al
mov	dword ptr [ebx+18h], 0
mov	dword ptr [ebx+14h], 0
xor	eax, eax
jmp	short loc_641CE208
align 4
movzx	ps, word ptr [streams_0+0Eh]
mov	edx, [eax+edx]
mov	[streams_0+8], edx
mov	[streams_0+14h], eax
mov	edx, [eax]
test	ps, ps
jz	short loc_641CE243
mov	ecx, [ps+60h]
mov	esi, [ps+60h]
dec	esi
mov	[ps+60h], esi
dec	ecx
jz	short loc_641CE224
movzx	esi, byte ptr [streams_0+10h]
mov	[streams_0+18h], eax
mov	eax, [streams_0+8]
test	eax, eax
jz	short loc_641CE23C
test	esi, 2
jnz	short loc_641CE1E4
movzx	ps, word ptr [streams_0+0Ch]
mov	edx, [eax+edx]
jmp	short loc_641CE1EB
align 4
mov	eax, [ps+60h]
mov	eax, [ps+60h]
inc	eax
mov	[ps+60h], eax
mov	[esp], ps	
call	_silc_packet_stream_destroy
mov	eax, [streams_0+14h]
jmp	short loc_641CE204
align 4
mov	dword ptr [streams_0+14h], 0
mov	ecx, [streams_0]
mov	[streams_0+8], ecx
mov	eax, esi
and	eax, 0FFFFFFFDh
mov	[streams_0+10h], al
test	ecx, ecx
jz	short loc_641CE29B
test	byte ptr [streams_0+10h], 2
jz	short loc_641CE2AC
movzx	eax, word ptr [streams_0+0Eh]
mov	eax, [ecx+eax]
mov	[streams_0+8], eax
mov	eax, [streams_0]
test	eax, eax
jz	short loc_641CE287
cmp	ecx, eax
jz	loc_641CE2F4
movzx	edi, word ptr [streams_0+0Ch]
jmp	short loc_641CE27E
cmp	ecx, esi
jz	short loc_641CE2B8
mov	eax, esi
lea	ps, [eax+edi]
mov	esi, [edx]
test	esi, esi
jnz	short loc_641CE278
cmp	ecx, [streams_0+4]
jz	short loc_641CE2E5
			
mov	[esp], ecx	
call	_silc_free
mov	ecx, [streams_0+8]
test	ecx, ecx
jnz	short loc_641CE254
mov	[ebp+streams], streams_0
add	esp, 3Ch
pop	streams_0
pop	esi
pop	edi
leave
jmp	_silc_free
align 4
movzx	eax, word ptr [streams_0+0Ch]
mov	eax, [ecx+eax]
jmp	short loc_641CE261
align 4
mov	[ebp+var_2C], edx
mov	esi, [ecx+edi]
mov	ps, [ebp+var_2C]
mov	[edx], esi
test	esi, esi
jz	short loc_641CE2D7
test	byte ptr [streams_0+10h], 1
jz	short loc_641CE2D7
movzx	edi, word ptr [streams_0+0Eh]
mov	edx, [ecx+edi]
mov	[esi+edi], edx
			
cmp	ecx, [streams_0+8]
jz	short loc_641CE2EA
sub	dword ptr [streams_0+10h], 4
cmp	ecx, [streams_0+4]
jnz	short loc_641CE28C
mov	[streams_0+4], eax
jmp	short loc_641CE28C
mov	esi, [ebp+var_2C]
mov	edx, [esi]
mov	[streams_0+8], edx
jmp	short loc_641CE2DC
movzx	edi, word ptr [streams_0+0Ch]
mov	[ebp+var_2C], streams_0
xor	eax, eax
jmp	short loc_641CE2BB
align 10h
			
push	ebp
mov	ebp, esp
push	edi
push	esi
push	ebx
sub	esp, 0ECh
mov	[ebp+var_70], stream
mov	stream,	[stream+2Ch]
mov	[ebp+inbuf], eax
test	eax, eax
jz	loc_641CEE17
			
mov	[ebp+packet_seq], 0
mov	eax, [ebp+inbuf]
mov	ecx, [eax+8]
mov	edx, [eax+4]
cmp	ecx, edx
jz	out
mov	packet,	[ebp+var_70]
mov	ebx, [ebx+40h]
mov	[ebp+cipher], ebx
mov	esi, [ebp+var_70]
mov	esi, [esi+48h]
mov	[ebp+hmac], esi
mov	edi, [ebp+var_70]
mov	al, [edi+67h]
and	eax, 4
cmp	al, 1
sbb	eax, eax
and	eax, 0FFFFFFEFh
add	eax, 21h
sub	ecx, edx
cmp	eax, ecx
ja	loc_641CF1F8
mov	eax, [ebp+hmac]
test	eax, eax
jz	loc_641CF25A
mov	edx, [ebp+hmac]
mov	[esp], edx	
call	_silc_hmac_len
mov	[ebp+mac_len], eax
mov	edi, [ebp+cipher]
test	edi, edi
jz	loc_641CF07E
mov	ecx, [ebp+cipher]
mov	[esp], ecx	
call	_silc_cipher_get_block_len
mov	[ebp+len], eax
mov	ebx, [ebp+var_70]
test	byte ptr [ebx+67h], 4
jz	loc_641CE9D4
mov	esi, [ebp+inbuf]
mov	eax, [esi+4]
mov	al, [eax]
mov	byte ptr [ebp+paddedlen], al
mov	edi, [ebp+cipher]
mov	[esp], edi	
call	_silc_cipher_get_mode
cmp	eax, 3
jz	loc_641CEBD0
lea	ebx, [ebp+iv]
mov	edi, [ebp+inbuf]
mov	esi, [edi+4]
inc	esi
mov	edi, ebx
mov	ecx, [ebp+len]
rep movsb
mov	eax, [ebp+len]
inc	eax
mov	[ebp+ivlen], eax
mov	edx, [ebp+var_70]
mov	al, [edx+64h]
cmp	al, byte ptr [ebp+paddedlen]
jz	loc_641CEC91
cmp	byte ptr [ebp+paddedlen], 0
jz	loc_641CEDD0
test	al, al
jz	loc_641CEDD0
movzx	eax, al
dec	eax
movzx	edx, byte ptr [ebp+paddedlen]
cmp	eax, sid
jnz	loc_641CEDD0
mov	block_len, [ebp+var_70]
mov	ecx, [ecx+44h]
mov	[ebp+cipher], ecx
test	ecx, ecx
jz	loc_641CEDD0
mov	esi, [ebp+var_70]
mov	esi, [esi+4Ch]
test	esi, esi
jnz	loc_641CEDD0
mov	[ebp+psnlen], 4
mov	[ebp+hmac], 0
mov	esi, [ebp+cipher]
mov	[esp], esi	
call	_silc_cipher_get_mode
cmp	eax, 3
jz	loc_641CEA27
			
mov	[esp+10h], ebx	
mov	edi, [ebp+len]
mov	[esp+0Ch], edi	
lea	eax, [ebp+tmp]
mov	[esp+8], eax	
mov	eax, [ebp+ivlen]
mov	edx, [ebp+inbuf]
add	eax, [edx+4]
mov	[esp+4], eax	
mov	ecx, [ebp+cipher]
mov	[esp], ecx	
call	_silc_cipher_decrypt
mov	ebx, [ebp+var_70]
test	byte ptr [ebx+67h], 4
jz	loc_641CEA5C
lea	ecx, [ebp+tmp+7]
lea	edx, [ebp+tmp+6]
lea	esi, [ebp+tmp+8]
lea	eax, [ebp+tmp+5]
lea	edi, [ebp+tmp]
mov	[ebp+packet_seq], edi
lea	ebx, [ebp+tmp+4]
mov	[ebp+var_88], ebx
			
mov	edi, [ebp+var_88]
movzx	ebx, byte ptr [edi]
shl	packetlen, 8
movzx	eax, byte ptr [eax]
or	packetlen, eax
movzx	edi, bx
movzx	eax, byte ptr [esi]
lea	eax, [packetlen+eax]
mov	[ebp+paddedlen], eax
mov	dl, [edx]
mov	[ebp+flags], dl
mov	cl, [ecx]
mov	[ebp+type], cl
mov	edx, [ebp+var_70]
mov	eax, [edx+4]
mov	eax, [eax+4]
test	byte ptr [eax+40h], 1
jz	loc_641CEA3C
cmp	cl, 9
jz	loc_641CECF4
cmp	[ebp+type], 7
jz	loc_641CEE74
mov	[ebp+normal], 1
			
mov	ecx, [ebp+cipher]
test	ecx, ecx
jz	short loc_641CE541
mov	ecx, [ebp+cipher]
mov	[esp], ecx	
call	_silc_cipher_get_mode
cmp	eax, 3
jz	short loc_641CE541
cmp	[ebp+normal], 0
jz	loc_641CEB54
mov	eax, [ebp+paddedlen]
xor	edx, edx
div	[ebp+len]
test	edx, edx
jnz	loc_641CEB79
			
mov	eax, [ebp+inbuf]
mov	eax, [eax+4]
mov	[ebp+data], eax
mov	esi, [ebp+paddedlen]
add	esi, [ebp+ivlen]
mov	ecx, [ebp+mac_len]
lea	edx, [esi+ecx]
mov	packetlen, [ebp+inbuf]
mov	eax, [edi+8]
sub	eax, [ebp+data]
cmp	edx, eax
ja	loc_641CEEA4
mov	eax, [ebp+var_70]
mov	edi, [eax+5Ch]
mov	edx, [ebp+hmac]
test	edx, edx
jz	short loc_641CE5FB
mov	edx, [ebp+hmac]
mov	[esp], edx	
call	_silc_hmac_init
mov	eax, [ebp+packet_seq]
test	eax, eax
jz	loc_641CECA0
mov	dword ptr [esp+8], 4 
mov	eax, [ebp+packet_seq]
mov	[esp+4], eax	
mov	edx, [ebp+hmac]
mov	[esp], edx	
call	_silc_hmac_update
mov	[esp+8], esi	
mov	ecx, [ebp+data]
mov	[esp+4], ecx	
mov	edi, [ebp+hmac]
mov	[esp], edi	
call	_silc_hmac_update
lea	eax, [ebp+return_len]
mov	[esp+8], eax	
lea	edi, [ebp+return_hash]
mov	[esp+4], edi	
mov	eax, [ebp+hmac]
mov	[esp], eax	
call	_silc_hmac_final
add	esi, [ebp+data]
mov	ecx, [ebp+return_len]
cmp	ecx, ecx
repe cmpsb
jnz	loc_641CEFFE
cmp	bx, 0Ah
jbe	loc_641CF115
mov	edx, [ebp+var_70]
mov	eax, [edx+4]
mov	edi, [eax+4]
mov	eax, [edi]
mov	[esp], eax	
call	_silc_mutex_lock
mov	ecx, [edi+30h]
mov	[ebp+hmac], ecx
test	ecx, ecx
jz	loc_641CEEF2
test	byte ptr [edi+38h], 2
jz	loc_641CEAC4
movzx	eax, word ptr [edi+36h]
mov	eax, [ecx+eax]
mov	[edi+30h], eax
mov	packetlen, [ebp+hmac]
mov	edx, [edi+28h]
test	edx, edx
jz	short loc_641CE668
cmp	[ebp+hmac], edx
jz	loc_641CEDBC
movzx	esi, word ptr [edi+34h]
jmp	short loc_641CE65F
align 4
cmp	[ebp+hmac], eax
jz	loc_641CEA78
mov	edx, eax
lea	ecx, [edx+esi]
mov	eax, [ecx]
test	eax, eax
jnz	short loc_641CE654
mov	esi, [ebp+hmac]
cmp	esi, [edi+2Ch]
jz	loc_641CEABC
			
mov	eax, [edi]
mov	[esp], eax	
call	_silc_mutex_unlock
mov	eax, [ebp+var_70]
mov	[packet+4], eax
mov	dl, [ebp+flags]
mov	[packet+23h], dl
mov	cl, [ebp+type]
mov	[packet+22h], cl
mov	eax, [packet+14h]
mov	edx, eax
sub	edx, [packet+8]
cmp	[ebp+paddedlen], edx
ja	loc_641CF063
mov	edx, [packet+10h]
sub	eax, edx
cmp	[ebp+paddedlen], eax
ja	short loc_641CE6B7
add	edx, [ebp+paddedlen]
mov	[packet+10h], edx
mov	eax, [ebp+len]
sub	eax, [ebp+psnlen]
mov	[ebp+hmac], eax
mov	eax, [packet+0Ch]
sub	edx, eax
cmp	[ebp+hmac], edx
ja	short loc_641CE6F3
mov	edi, eax
mov	esi, [ebp+var_88]
mov	ecx, [ebp+hmac]
rep movsb
mov	eax, [packet+0Ch]
mov	ecx, [packet+10h]
mov	edx, ecx
sub	edx, eax
cmp	[ebp+hmac], edx
ja	short loc_641CE6F3
add	eax, [ebp+hmac]
mov	[packet+0Ch], eax
mov	edx, ecx
sub	edx, eax
			
mov	ecx, [ebp+paddedlen]
sub	ecx, [ebp+ivlen]
sub	ecx, [ebp+len]
mov	edi, [ebp+inbuf]
mov	header,	[edi+4]
cmp	ecx, edx
ja	short loc_641CE71E
mov	edx, [ebp+psnlen]
add	edx, [ebp+ivlen]
add	edx, [ebp+hmac]
add	esi, edx
mov	edi, eax
rep movsb
mov	esi, [ebp+cipher]
test	esi, esi
jz	loc_641CE7E9
lea	eax, [ebp+iv]
mov	[esp+4], eax	
mov	eax, [ebp+cipher]
mov	[esp], eax	
call	_silc_cipher_set_iv
cmp	[ebp+normal], 1
jz	loc_641CEAD4
mov	ecx, [ebp+cipher]
mov	[esp], ecx	
call	_silc_cipher_get_block_len
mov	edx, [packet+0Ch]
mov	ecx, edx
sub	ecx, eax
cmp	ecx, [packet+8]
jb	short loc_641CE764
mov	[packet+0Ch], ecx
mov	edx, ecx
mov	cl, [edx+4]
mov	byte ptr [ebp+var_88], cl
movzx	edi, byte ptr [edx+6]
mov	cl, [edx+7]
mov	byte ptr [ebp+ivlen], cl
mov	ecx, [packet+10h]
mov	esi, ecx
sub	esi, edx
mov	[ebp+hmac], esi
cmp	eax, esi
ja	short loc_641CE792
add	edx, eax
mov	[packet+0Ch], edx
sub	ecx, edx
mov	[ebp+hmac], ecx
movzx	esi, byte ptr [ebp+var_88]
and	edi, 0FFh
lea	esi, [esi+edi+0Ah]
movzx	ecx, byte ptr [ebp+ivlen]
lea	ecx, [esi+ecx]
sub	cx, ax
movzx	ecx, cx
cmp	ecx, [ebp+hmac]
ja	loc_641CF042
mov	dword ptr [esp+10h], 0 
mov	[esp+0Ch], ecx	
mov	[esp+8], edx	
mov	[esp+4], edx	
mov	edi, [ebp+cipher]
mov	[esp], edi	
call	_silc_cipher_decrypt
test	al, al
jz	loc_641CEB03
mov	edi, [ebp+var_70]
inc	dword ptr [edi+5Ch]
mov	eax, [ebp+len]
neg	eax
add	eax, [packet+0Ch]
cmp	eax, [packet+8]
jb	short loc_641CE7F9
mov	[packet+0Ch], eax
mov	eax, [ebp+paddedlen]
add	eax, [ebp+mac_len]
mov	edx, [ebp+inbuf]
mov	ecx, [edx+4]
mov	esi, edx
mov	edx, [edx+8]
sub	edx, ecx
cmp	eax, edx
ja	short loc_641CE819
lea	eax, [ecx+eax]
mov	[esi+4], eax
lea	esi, [packet+8]
mov	eax, [packet+0Ch]
movzx	edi, byte ptr [eax+4]
mov	dword ptr [esp+28h], 1Dh
lea	eax, [ebp+var_1B]
mov	[esp+24h], eax
mov	dword ptr [esp+20h], 1
lea	eax, [ebp+var_1A]
mov	[esp+1Ch], eax
mov	dword ptr [esp+18h], 1
lea	eax, [ebp+var_19]
mov	[esp+14h], eax
mov	dword ptr [esp+10h], 1
mov	dword ptr [esp+0Ch], 6
mov	dword ptr [esp+8], 18h
mov	dword ptr [esp+4], 19h
mov	[esp], esi	
call	_silc_buffer_unformat
inc	eax
jz	loc_641CF211
mov	al, [ebp+var_19]
cmp	al, 1Ch
ja	loc_641CEF51
mov	dl, [ebp+var_1A]
cmp	dl, 1Ch
ja	loc_641CEF51
mov	dword ptr [esp+30h], 1Dh
and	edi, 0FFh
mov	[esp+2Ch], edi
mov	dword ptr [esp+28h], 18h
movzx	edx, dl
mov	[esp+24h], edx
lea	edx, [packet+1Ch]
mov	[esp+20h], edx
mov	dword ptr [esp+1Ch], 0Ch
lea	edx, [ebp+return_len]
mov	[esp+18h], edx
mov	dword ptr [esp+14h], 1
movzx	eax, al
mov	[esp+10h], eax
lea	eax, [packet+18h]
mov	[esp+0Ch], eax
mov	dword ptr [esp+8], 0Ch
mov	dword ptr [esp+4], 19h
mov	[esp], esi	
call	_silc_buffer_unformat
inc	eax
jz	loc_641CF211
cmp	[ebp+var_1B], 3
ja	loc_641CEFAD
cmp	byte ptr [ebp+return_len], 3
ja	loc_641CEFAD
mov	al, [ebp+var_19]
and	eax, 3Fh
mov	dl, [packet+20h]
and	edx, 0FFFFFFC0h
or	edx, eax
mov	[packet+20h], dl
mov	cl, [ebp+var_1A]
and	ecx, 3Fh
mov	al, [packet+21h]
and	eax, 0FFFFFFC0h
or	eax, ecx
mov	[packet+21h], al
mov	cl, [ebp+var_1B]
shl	ecx, 6
and	edx, 3Fh
or	edx, ecx
mov	[packet+20h], dl
mov	dl, byte ptr [ebp+return_len]
shl	edx, 6
and	eax, 3Fh
or	eax, edx
mov	[packet+21h], al
mov	eax, packet	
call	_silc_packet_dispatch
test	al, al
jnz	loc_641CE327
			
mov	edx, [ebp+var_70]
mov	packet,	[edx+2Ch]
test	ebx, ebx
jz	short loc_641CE9BE
mov	eax, [edx+4]
mov	ebx, [eax+8]
mov	dword ptr [esp], 0Ch 
call	_silc_malloc
test	eax, eax
jz	short loc_641CE9B4
mov	ecx, [ebp+inbuf]
mov	[eax], ecx
mov	ecx, [ebx]
test	ecx, ecx
jz	loc_641CEE99
movzx	edx, word ptr [ebx+0Ch]
mov	ecx, [ebx+4]
mov	[ecx+edx], eax
test	byte ptr [ebx+10h], 1
jnz	loc_641CED0A
mov	[ebx+4], eax
mov	dword ptr [eax+edx], 0
add	dword ptr [ebx+10h], 4
mov	ebx, [ebp+var_70]
mov	dword ptr [ebx+2Ch], 0
mov	esi, [ebp+inbuf]
mov	eax, [esi]
mov	[esi+8], eax
mov	[esi+4], eax
			
add	esp, 0ECh
pop	ebx
pop	esi
pop	edi
leave
retn
mov	eax, [ebp+cipher]
mov	[esp], eax	
call	_silc_cipher_get_iv
mov	esi, eax
lea	ebx, [ebp+iv]
mov	edi, ebx
mov	ecx, [ebp+len]
rep movsb
mov	edx, [ebp+cipher]
mov	[esp], edx	
call	_silc_cipher_get_mode
cmp	eax, 3
jz	loc_641CED19
mov	[ebp+psnlen], 0
mov	[ebp+ivlen], 0
mov	esi, [ebp+cipher]
mov	[esp], esi	
call	_silc_cipher_get_mode
cmp	eax, 3
jnz	loc_641CE458
mov	dword ptr [esp+4], 0 
mov	[esp], esi	
call	_silc_cipher_set_iv
jmp	loc_641CE458
cmp	[ebp+type], 9
jz	loc_641CECDC
cmp	[ebp+type], 7
setnz	[ebp+normal]
jmp	loc_641CE50D
lea	ecx, [ebp+tmp+3]
lea	edx, [ebp+tmp+2]
lea	esi, [ebp+tmp+4]
lea	eax, [ebp+tmp+1]
lea	edi, [ebp+tmp]
mov	[ebp+var_88], edi
jmp	loc_641CE4B0
align 4
mov	[ebp+data], ecx
mov	ecx, [ebp+hmac]
mov	eax, [ecx+esi]
mov	esi, [ebp+data]
mov	[esi], eax
test	eax, eax
jz	short loc_641CEAA0
test	byte ptr [edi+38h], 1
jz	short loc_641CEAA0
movzx	esi, word ptr [edi+36h]
mov	ecx, [ecx+esi]
mov	[eax+esi], ecx
			
mov	esi, [ebp+hmac]
cmp	esi, [edi+30h]
jz	loc_641CEDAC
sub	dword ptr [edi+38h], 4
mov	esi, [ebp+hmac]
cmp	esi, [edi+2Ch]
jnz	loc_641CE674
mov	[edi+2Ch], edx
jmp	loc_641CE674
movzx	eax, word ptr [edi+34h]
mov	packetlen, [ebp+hmac]
mov	eax, [ebx+eax]
jmp	loc_641CE637
align 4
mov	eax, [packet+0Ch]
mov	dword ptr [esp+10h], 0 
mov	edx, [packet+10h]
sub	edx, eax
mov	[esp+0Ch], edx	
mov	[esp+8], eax	
mov	[esp+4], eax	
mov	edx, [ebp+cipher]
mov	[esp], edx	
call	_silc_cipher_decrypt
test	al, al
jnz	loc_641CE7E3
			
mov	edx, [ebp+var_70]
mov	eax, [edx+0Ch]
mov	[esp], eax	
call	_silc_mutex_unlock
mov	ecx, [ebp+var_70]
mov	eax, [ecx+4]
mov	eax, [eax+4]
mov	edx, [eax+0Ch]
mov	esi, ecx
mov	ecx, [ecx+18h]
mov	[esp+10h], ecx
mov	ecx, [eax+10h]
mov	[esp+0Ch], ecx
mov	dword ptr [esp+8], 3
mov	[esp+4], esi
mov	[esp], eax
call	dword ptr [edx+8]
mov	eax, [esi+0Ch]
mov	[esp], eax	
call	_silc_mutex_lock
mov	[esp], packet	
call	_silc_packet_free
jmp	short loc_641CEBBB
movzx	edx, byte ptr [esi]
mov	esi, [ebp+var_88]
movzx	eax, byte ptr [esi+6]
lea	edx, [edx+eax+0Ah]
movzx	eax, byte ptr [esi+7]
lea	eax, [edx+eax]
xor	edx, edx
div	[ebp+len]
test	edx, edx
jz	loc_641CE541
mov	packetlen, [ebp+var_70]
mov	eax, [edi+0Ch]
mov	[esp], eax	
call	_silc_mutex_unlock
mov	eax, [edi+4]
mov	eax, [eax+4]
mov	edx, [eax+0Ch]
mov	ecx, [edi+18h]
mov	[esp+10h], ecx
mov	ecx, [eax+10h]
mov	[esp+0Ch], ecx
mov	dword ptr [esp+8], 5
mov	[esp+4], edi
mov	[esp], eax
call	dword ptr [edx+8]
mov	eax, [edi+0Ch]
mov	[esp], eax	
call	_silc_mutex_lock
			
lea	edx, [ebp+tmp]
mov	ecx, 4
xor	eax, eax
mov	edi, edx
rep stosd
jmp	out
align 10h
mov	[esp], edi	
call	_silc_cipher_get_iv
mov	esi, eax
lea	ebx, [ebp+iv]
mov	edi, ebx
mov	ecx, [ebp+len]
rep movsb
mov	edx, [ebp+inbuf]
mov	eax, [edx+4]
mov	block_len, [ebp+var_70]
test	byte ptr [ecx+67h], 4
jnz	loc_641CEE88
movzx	edx, [ebp+iv+4]
shl	edx, 18h
movzx	eax, [ebp+iv+5]
shl	eax, 10h
or	edx, eax
movzx	eax, [ebp+iv+7]
or	edx, eax
movzx	eax, [ebp+iv+6]
shl	eax, 8
or	edx, eax
movzx	ecx, [ebp+iv+8]
shl	ecx, 18h
movzx	eax, [ebp+iv+9]
shl	eax, 10h
or	ecx, eax
movzx	eax, [ebp+iv+0Bh]
or	ecx, eax
movzx	eax, [ebp+iv+0Ah]
shl	eax, 8
or	ecx, eax
add	ecx, 1
adc	edx, 0
mov	eax, edx
shr	eax, 18h
mov	[ebp+iv+4], al
mov	eax, edx
shr	eax, 10h
mov	[ebp+iv+5], al
mov	eax, edx
shr	eax, 8
mov	[ebp+iv+6], al
mov	[ebp+iv+7], dl
mov	eax, ecx
shr	eax, 18h
mov	[ebp+iv+8], al
mov	eax, ecx
shr	eax, 10h
mov	[ebp+iv+9], al
mov	eax, ecx
shr	eax, 8
mov	[ebp+iv+0Ah], al
mov	[ebp+iv+0Bh], cl
mov	dword ptr [ebp+iv+0Ch],	0
mov	[ebp+ivlen], 9
mov	edx, [ebp+var_70]
mov	al, [edx+64h]
cmp	al, byte ptr [ebp+paddedlen]
jnz	loc_641CE3F2
mov	[ebp+psnlen], 4
jmp	loc_641CE444
mov	eax, edi
shr	eax, 18h
mov	[ebp+var_1F], al
mov	eax, edi
shr	eax, 10h
mov	[ebp+var_1E], al
mov	eax, edi
shr	eax, 8
mov	[ebp+var_1D], al
mov	ecx, edi
mov	[ebp+var_1C], cl
mov	dword ptr [esp+8], 4 
lea	eax, [ebp+var_1F]
mov	[esp+4], eax	
mov	edi, [ebp+hmac]
mov	[esp], edi	
call	_silc_hmac_update
jmp	loc_641CE5B6
mov	dl, [ebp+flags]
not	edx
and	edx, 1
mov	[ebp+normal], dl
jmp	loc_641CE50D
align 4
mov	cl, [ebp+flags]
not	ecx
and	ecx, 1
mov	[ebp+normal], cl
jmp	loc_641CE50D
movzx	ecx, word ptr [ebx+0Eh]
mov	esi, [ebx+4]
mov	[eax+ecx], esi
jmp	loc_641CE9A6
mov	ecx, [ebp+var_70]
test	byte ptr [ecx+67h], 4
jnz	loc_641CEED1
movzx	edx, [ebp+iv+4]
shl	edx, 18h
movzx	eax, [ebp+iv+5]
shl	eax, 10h
or	edx, eax
movzx	eax, [ebp+iv+7]
or	edx, eax
movzx	eax, [ebp+iv+6]
shl	eax, 8
or	edx, eax
movzx	ecx, [ebp+iv+8]
shl	ecx, 18h
movzx	eax, [ebp+iv+9]
shl	eax, 10h
or	ecx, eax
movzx	eax, [ebp+iv+0Bh]
or	ecx, eax
movzx	eax, [ebp+iv+0Ah]
shl	eax, 8
or	ecx, eax
add	ecx, 1
adc	edx, 0
mov	eax, edx
shr	eax, 18h
mov	[ebp+iv+4], al
mov	eax, edx
shr	eax, 10h
mov	[ebp+iv+5], al
mov	eax, edx
shr	eax, 8
mov	[ebp+iv+6], al
mov	[ebp+iv+7], dl
mov	eax, ecx
shr	eax, 18h
mov	[ebp+iv+8], al
mov	eax, ecx
shr	eax, 10h
mov	[ebp+iv+9], al
mov	eax, ecx
shr	eax, 8
mov	[ebp+iv+0Ah], al
mov	[ebp+iv+0Bh], cl
mov	dword ptr [ebp+iv+0Ch],	0
jmp	loc_641CE9FF
mov	ecx, [ebp+data]
mov	eax, [ecx]
mov	[edi+30h], eax
jmp	loc_641CEAAC
lea	esi, [edi+28h]
mov	[ebp+data], esi
movzx	esi, word ptr [edi+34h]
xor	edx, edx
jmp	loc_641CEA7E
			
mov	edi, [ebp+var_70]
mov	eax, [edi+0Ch]
mov	[esp], eax	
call	_silc_mutex_unlock
mov	eax, [edi+4]
mov	eax, [eax+4]
mov	edx, [eax+0Ch]
mov	ecx, [edi+18h]
mov	[esp+10h], ecx
mov	ecx, [eax+10h]
mov	[esp+0Ch], ecx
mov	dword ptr [esp+8], 4
mov	[esp+4], edi
mov	[esp], eax
call	dword ptr [edx+8]
mov	eax, [edi+0Ch]
mov	[esp], eax	
call	_silc_mutex_lock
jmp	out
mov	edx, [ebp+var_70]
mov	eax, [edx+4]
mov	eax, [eax+8]
mov	edx, [eax]
mov	[eax+8], edx
and	byte ptr [eax+10h], 0FDh
mov	dword ptr [eax+18h], 0
mov	dword ptr [eax+14h], 0
mov	ecx, [ebp+var_70]
mov	eax, [ecx+4]
mov	eax, [eax+8]
mov	edx, [eax+14h]
mov	[eax+18h], edx
mov	edx, [eax+8]
test	edx, edx
jz	loc_641CEF45
test	byte ptr [eax+10h], 2
jz	loc_641CEEE6
movzx	ecx, word ptr [eax+0Eh]
mov	ecx, [edx+ecx]
mov	[eax+8], ecx
mov	[eax+14h], edx
mov	edx, [edx]
mov	[ebp+inbuf], edx
jmp	loc_641CE31D
align 4
mov	eax, [ebp+var_70]
mov	al, [eax+67h]
and	eax, 1
mov	[ebp+normal], al
jmp	loc_641CE50D
mov	edx, [eax+1]
mov	dword ptr [ebp+iv+4], edx
mov	eax, [eax+5]
mov	dword ptr [ebp+iv+8], eax
jmp	loc_641CEC71
mov	[ebx], eax
movzx	edx, word ptr [ebx+0Ch]
jmp	loc_641CE99C
lea	edx, [ebp+tmp]
mov	ecx, 10h
xor	eax, eax
mov	edi, edx
rep stosb
mov	edx, [ebp+var_70]
mov	eax, [edx+4]
mov	eax, [eax+8]	
mov	edx, [ebp+inbuf] 
call	_silc_dlist_del
mov	ebx, [ebp+inbuf]
mov	ecx, [ebp+var_70]
mov	[ecx+2Ch], ebx
jmp	loc_641CE9C9
mov	eax, large ds:0
mov	dword ptr [ebp+iv+4], eax
mov	eax, large ds:4
mov	dword ptr [ebp+iv+8], eax
jmp	loc_641CEDA0
movzx	ecx, word ptr [eax+0Ch]
mov	ecx, [edx+ecx]
jmp	loc_641CEE62
mov	eax, [edi]
mov	[esp], eax	
call	_silc_mutex_unlock
mov	dword ptr [esp+4], 24h 
mov	dword ptr [esp], 1 
call	_silc_calloc
mov	packetlen, eax
test	eax, eax
jz	loc_641CF0CE
mov	dword ptr [esp], 400h 
call	_silc_malloc
test	eax, eax
jz	loc_641CF0C6
mov	[packet+8], eax
lea	edx, [eax+400h]
mov	[packet+14h], edx
mov	[packet+10h], eax
mov	[packet+0Ch], eax
jmp	loc_641CE67E
mov	dword ptr [eax+14h], 0
jmp	loc_641CE31D
			
mov	eax, [packet+4]
test	byte ptr [eax+67h], 8
jz	loc_641CF16C
			
mov	edi, [ebp+var_70]
mov	eax, [edi+0Ch]
mov	[esp], eax	
call	_silc_mutex_unlock
mov	eax, [edi+4]
mov	eax, [eax+4]
mov	edx, [eax+0Ch]
mov	ecx, [edi+18h]
mov	[esp+10h], ecx
mov	ecx, [eax+10h]
mov	[esp+0Ch], ecx
mov	dword ptr [esp+8], 5
mov	[esp+4], edi
mov	[esp], eax
call	dword ptr [edx+8]
mov	eax, [edi+0Ch]
mov	[esp], eax	
call	_silc_mutex_lock
mov	[esp], packet	
call	_silc_packet_free
jmp	loc_641CEBBB
			
mov	eax, [packet+4]
test	byte ptr [eax+67h], 8
jnz	short loc_641CEF5E
mov	dword ptr [esp+4], 0 
mov	eax, [eax+8]
mov	[esp], eax	
call	_silc_socket_stream_is_udp
test	al, al
jnz	short loc_641CEF5E
movzx	eax, byte ptr [ebp+return_len]
mov	[esp+8], eax
movzx	eax, [ebp+var_1B]
mov	[esp+4], eax
mov	dword ptr [esp], offset	aBadIdTypesInPa	
call	_silc_format
mov	[esp+4], eax	
mov	dword ptr [esp], 3 
call	_silc_log_output
jmp	loc_641CEF5E
mov	edx, [ebp+var_70]
mov	eax, [edx+0Ch]
mov	[esp], eax	
call	_silc_mutex_unlock
mov	ecx, [ebp+var_70]
mov	eax, [ecx+4]
mov	eax, [eax+4]
mov	edx, [eax+0Ch]
mov	ebx, ecx
mov	ecx, [ecx+18h]
mov	[esp+10h], ecx
mov	ecx, [eax+10h]
mov	[esp+0Ch], ecx
mov	dword ptr [esp+8], 2
mov	[esp+4], ebx
mov	[esp], eax
call	dword ptr [edx+8]
mov	eax, [ebx+0Ch]
jmp	loc_641CEBB3
mov	dword ptr [esp], offset	aGarbageInHeade
call	_silc_format
mov	[esp+4], eax	
mov	dword ptr [esp], 3 
call	_silc_log_output
jmp	loc_641CEB03
lea	eax, [packet+8]	
mov	edx, [ebp+paddedlen] 
call	_silc_buffer_realloc
test	eax, eax
jz	loc_641CF269
mov	eax, [packet+14h]
jmp	loc_641CE6A7
mov	eax, [ebp+inbuf]
mov	eax, [eax+4]
mov	[ebp+var_88], eax
inc	eax
mov	esi, [ebp+var_88]
add	esi, 4
mov	edx, [ebp+var_88]
add	edx, 2
mov	ecx, [ebp+var_88]
add	ecx, 3
mov	[ebp+psnlen], 0
mov	[ebp+ivlen], 0
mov	[ebp+len], 10h
jmp	loc_641CE4B0
mov	[esp], packet
call	_silc_free
mov	edi, [ebp+var_70]
mov	eax, [edi+0Ch]
mov	[esp], eax	
call	_silc_mutex_unlock
mov	eax, [edi+4]
mov	eax, [eax+4]
mov	edx, [eax+0Ch]
mov	ecx, [edi+18h]
mov	[esp+10h], ecx
mov	ecx, [eax+10h]
mov	[esp+0Ch], ecx
mov	dword ptr [esp+8], 6
mov	[esp+4], edi
mov	[esp], eax
call	dword ptr [edx+8]
mov	eax, [edi+0Ch]
mov	[esp], eax	
call	_silc_mutex_lock
jmp	loc_641CEBBB
mov	eax, [ebp+var_70]
test	byte ptr [eax+67h], 8
jz	loc_641CF1BC
			
mov	ecx, [ebp+var_70]
mov	eax, [ecx+0Ch]
mov	[esp], eax	
call	_silc_mutex_unlock
mov	packetlen, [ebp+var_70]
mov	eax, [ebx+4]
mov	eax, [eax+4]
mov	edx, [eax+0Ch]
mov	ecx, [ebx+18h]
mov	[esp+10h], ecx
mov	ecx, [eax+10h]
mov	[esp+0Ch], ecx
mov	dword ptr [esp+8], 5
mov	[esp+4], ebx
mov	[esp], eax
call	dword ptr [edx+8]
mov	eax, [ebx+0Ch]
mov	[esp], eax	
call	_silc_mutex_lock
jmp	loc_641CEBBB
mov	dword ptr [esp+4], 0
mov	eax, [eax+8]
mov	[esp], eax	
call	_silc_socket_stream_is_udp
test	al, al
jnz	loc_641CEF5E
mov	al, [packet+21h]
and	eax, 3Fh
mov	[esp+8], eax
mov	al, [packet+20h]
and	eax, 3Fh
mov	[esp+4], eax
mov	dword ptr [esp], offset	aBadIdLengthsIn	
call	_silc_format
mov	[esp+4], eax	
mov	dword ptr [esp], 3 
call	_silc_log_output
jmp	loc_641CEF5E
mov	dword ptr [esp+4], 0
mov	eax, [eax+8]
mov	[esp], eax	
call	_silc_socket_stream_is_udp
test	al, al
jnz	loc_641CF122
mov	dword ptr [esp], offset	aReceivedTooSho	
call	_silc_format
mov	[esp+4], eax	
mov	dword ptr [esp], 3 
call	_silc_log_output
jmp	loc_641CF122
mov	eax, [edi+4]
mov	eax, [eax+8]	
mov	edx, [ebp+inbuf] 
call	_silc_dlist_del
mov	eax, [ebp+inbuf]
mov	[edi+2Ch], eax
jmp	loc_641CE9C9
			
mov	eax, [packet+4]
test	byte ptr [eax+67h], 8
jnz	loc_641CEF5E
mov	dword ptr [esp+4], 0 
mov	eax, [eax+8]
mov	[esp], eax	
call	_silc_socket_stream_is_udp
test	al, al
jnz	loc_641CEF5E
mov	dword ptr [esp], offset	aMalformedPacke	
call	_silc_format
mov	[esp+4], eax	
mov	dword ptr [esp], 3 
call	_silc_log_output
jmp	loc_641CEF5E
mov	[ebp+mac_len], 0
jmp	loc_641CE383
mov	ecx, [ebp+var_70]
mov	edx, [ecx+0Ch]
mov	[esp], edx	
mov	[ebp+var_AC], eax
call	_silc_mutex_unlock
mov	esi, [ebp+var_70]
mov	edx, [esi+4]
mov	edx, [edx+4]
mov	ecx, [edx+0Ch]
mov	edi, esi
mov	esi, [esi+18h]
mov	[esp+10h], esi
mov	esi, [edx+10h]
mov	[esp+0Ch], esi
mov	dword ptr [esp+8], 6
mov	[esp+4], edi
mov	[esp], edx
call	dword ptr [ecx+8]
mov	edx, [edi+0Ch]
mov	[esp], edx	
call	_silc_mutex_lock
mov	[esp], packet	
call	_silc_packet_free
lea	edx, [ebp+tmp]
mov	ecx, 4
mov	eax, [ebp+var_AC]
mov	edi, edx
rep stosd
jmp	out
align 4
public _silc_packet_stream_wrap
push	ebp
mov	ebp, esp
push	edi
push	esi
push	ebx
sub	esp, 2Ch
mov	esi, [ebp+stream]
mov	eax, [ebp+type]
mov	[ebp+var_1C], eax
mov	edi, [ebp+flags]
mov	dl, [ebp+blocking_mode]
mov	[ebp+var_1D], dl
mov	dword ptr [esp+4], 3Ch 
mov	dword ptr [esp], 1 
call	_silc_calloc
mov	ebx, eax
test	eax, eax
jz	loc_641CF41C
mov	dword ptr [pws], offset	_silc_packet_stream_ops
mov	[pws+4], stream_0
mov	al, byte ptr [ebp+var_1C]
mov	[pws+38h], al
mov	edx, flags_0
mov	[pws+39h], dl
mov	dl, [ebp+var_1D]
and	edx, 1
shl	edx, 1
mov	al, [pws+3Ah]
and	eax, 0FFFFFFFDh
or	eax, edx
mov	[pws+3Ah], al
mov	edx, [ebp+coder]
mov	[pws+10h], edx
mov	edx, [ebp+context]
mov	[pws+14h], edx
mov	edx, [ebp+coder]
test	edx, edx
jz	short loc_641CF395
mov	dword ptr [esp+4], 10h 
mov	dword ptr [esp], 1 
call	_silc_calloc
mov	edi, eax
test	eax, eax
jz	short loc_641CF38F
mov	dword ptr [esp+4], 1 
mov	dword ptr [esp], 8 
call	_silc_calloc
mov	[edi], eax
test	eax, eax
jz	loc_641CF426
mov	[edi+4], eax
mov	[edi+8], eax
add	eax, 8
mov	[edi+0Ch], eax
			
mov	[pws+18h], edi
mov	al, [pws+3Ah]
test	al, 2
jnz	short loc_641CF3E8
lea	eax, [pws+8]
mov	[esp], eax	
call	_silc_mutex_alloc
mov	eax, [pws+34h]
and	eax, 3
mov	[pws+34h], eax
mov	word ptr [pws+30h], 0
mov	word ptr [pws+32h], 0
mov	byte ptr [pws+34h], 0
mov	dword ptr [pws+2Ch], 0
mov	dword ptr [pws+28h], 0
mov	dword ptr [pws+24h], 0
mov	eax, [stream_0+60h]
mov	eax, [stream_0+60h]
inc	eax
mov	[stream_0+60h],	eax
mov	eax, pws
add	esp, 2Ch
pop	pws
pop	stream_0
pop	edi
leave
retn
align 4
mov	dword ptr [esp+0Ch], 0FFFFFFFFh
movzx	eax, byte ptr [pws+38h]
mov	[esp+8], eax
mov	dword ptr [esp+4], 0 
mov	eax, [pws+4]
mov	[esp], eax	
call	_silc_packet_wait_init
mov	[pws+0Ch], eax
test	eax, eax
jnz	short loc_641CF3D2
mov	[esp], pws	
call	_silc_free
xchg	ax, ax
xor	eax, eax
add	esp, 2Ch
pop	pws
pop	stream_0
pop	edi
leave
retn
xor	edi, edi
jmp	loc_641CF38F
align 10h
public _silc_packet_wrap_destroy
push	ebp
mov	ebp, esp
push	edi
push	esi
push	ebx
sub	esp, 3Ch
mov	ebx, [ebp+stream]
mov	[esp], pws	
call	_silc_stream_close
mov	esi, [pws+24h]
mov	[pws+2Ch], esi
and	byte ptr [pws+34h], 0FDh
jmp	loc_641CF509
align 4
movzx	eax, word ptr [pws+32h]
mov	eax, [esi+eax]
mov	[pws+2Ch], eax
mov	edi, [esi+4]
mov	dword ptr [esi+4], 0
mov	dword ptr [esi+1Ch], 0
mov	dword ptr [esi+18h], 0
mov	eax, [esi+8]
mov	[esi+10h], eax
mov	[esi+0Ch], eax
mov	eax, [edi+4]
mov	eax, [eax+4]
mov	eax, [eax]
mov	[esp], eax	
call	_silc_mutex_lock
mov	eax, [edi+4]
mov	[ebp+var_2C], eax
mov	eax, [eax+4]
mov	ecx, [eax+28h]
test	ecx, ecx
jz	loc_641CF524
movzx	ecx, word ptr [eax+34h]
mov	eax, [eax+2Ch]
mov	[eax+ecx], esi
mov	edx, [ebp+var_2C]
mov	eax, [edx+4]
test	byte ptr [eax+38h], 1
jz	short loc_641CF4C3
movzx	ecx, word ptr [eax+36h]
mov	edx, [eax+2Ch]
mov	[esi+ecx], edx
mov	[eax+2Ch], esi
mov	ecx, [ebp+var_2C]
mov	eax, [ecx+4]
movzx	edx, word ptr [eax+34h]
mov	dword ptr [esi+edx], 0
add	dword ptr [eax+38h], 4
mov	eax, [edi+4]
mov	eax, [eax+4]
mov	edx, [eax+38h]
and	edx, 0FFFFFFFCh
cmp	edx, 4
jnz	short loc_641CF4FC
mov	edx, [eax+28h]
mov	[eax+30h], edx
and	byte ptr [eax+38h], 0FDh
mov	eax, [edi+4]
mov	eax, [eax+4]
mov	eax, [eax]
mov	[esp], eax	
call	_silc_mutex_unlock
mov	esi, [pws+2Ch]
test	esi, esi
jz	short loc_641CF52C
test	byte ptr [pws+34h], 2
jnz	loc_641CF454
movzx	eax, word ptr [pws+30h]
mov	eax, [esi+eax]
jmp	loc_641CF45B
align 4
mov	[eax+28h], esi
jmp	short loc_641CF4AD
align 4
mov	eax, [pws+8]
test	eax, eax
jz	short loc_641CF53B
mov	[esp], eax	
call	_silc_mutex_free
mov	esi, [pws+18h]
test	esi, esi
jz	short loc_641CF554
mov	eax, [esi]
mov	[esp], eax	
call	_silc_free
mov	[esp], esi	
call	_silc_free
mov	eax, [pws+4]
mov	edx, [eax+60h]
mov	ecx, [eax+60h]
dec	ecx
mov	[eax+60h], ecx
dec	edx
jz	short loc_641CF574
mov	[ebp+stream], pws
add	esp, 3Ch
pop	pws
pop	esi
pop	edi
leave
jmp	_silc_free
align 4
mov	edx, [eax+60h]
mov	edx, [eax+60h]
inc	edx
mov	[eax+60h], edx
mov	[esp], eax	
call	_silc_packet_stream_destroy
mov	[ebp+stream], pws
add	esp, 3Ch
pop	pws
pop	esi
pop	edi
leave
jmp	_silc_free
align 4
public _silc_packet_stream_unlink
			
push	ebp
mov	ebp, esp
push	edi
push	esi
push	ebx
sub	esp, 5Ch
mov	eax, [ebp+stream]
mov	[ebp+var_1C], eax
mov	edi, [ebp+callbacks]
mov	edx, [ebp+callback_context]
mov	eax, [eax+0Ch]
mov	[esp], eax	
mov	[ebp+var_2C], edx
call	_silc_mutex_lock
mov	ecx, [ebp+var_1C]
mov	eax, [ecx+10h]
mov	ecx, [eax]
mov	[eax+8], ecx
and	byte ptr [eax+10h], 0FDh
mov	dword ptr [eax+18h], 0
mov	dword ptr [eax+14h], 0
mov	eax, [ebp+var_1C]
mov	ebx, [eax+10h]
mov	edx, [ebp+var_2C]
jmp	short loc_641CF5FC
align 4
movzx	ecx, word ptr [ebx+0Eh]
mov	ecx, [eax+ecx]
mov	[ebx+8], ecx
mov	[ebx+14h], eax
mov	p, [eax]
test	p, p
jz	short loc_641CF61F
cmp	[p+4], callbacks_0
jz	short loc_641CF658
			
mov	eax, [ebx+14h]
mov	[ebx+18h], eax
mov	eax, [ebx+8]
test	eax, eax
jz	short loc_641CF618
test	byte ptr [ebx+10h], 2
jnz	short loc_641CF5E4
movzx	ecx, word ptr [ebx+0Ch]
mov	ecx, [eax+ecx]
jmp	short loc_641CF5EB
mov	dword ptr [ebx+14h], 0
mov	eax, [ebx+10h]
shr	eax, 2
jz	loc_641CF6B4
			
mov	edx, [ebp+var_1C]
mov	eax, [edx+0Ch]
mov	[esp], eax	
call	_silc_mutex_unlock
mov	ecx, [ebp+var_1C]
mov	eax, [ecx+60h]
mov	edx, [ecx+60h]
dec	edx
mov	[ecx+60h], edx
dec	eax
jz	loc_641CF7F3
add	esp, 5Ch
pop	ebx
pop	p
pop	edi
leave
retn
align 4
cmp	[p+8], edx
jnz	short loc_641CF5FC
mov	callbacks_0, [ebx]
mov	eax, edi
mov	[ebx+8], edi
and	byte ptr [ebx+10h], 0FDh
xor	ecx, ecx
test	eax, eax
jz	short loc_641CF690
xchg	ax, ax
test	cl, cl
jz	loc_641CF730
movzx	callback_context_0, word ptr [ebx+0Eh]
mov	edx, [eax+edx]
mov	[ebx+8], edx
cmp	p, [eax]
jz	loc_641CF742
mov	eax, edx
test	eax, eax
jnz	short loc_641CF670
			
mov	eax, [p]
mov	[esp], eax	
call	_silc_free
mov	[esp], p	
call	_silc_free
mov	ecx, [ebp+var_1C]
mov	ebx, [ecx+10h]
mov	eax, [ebx+10h]
shr	eax, 2
jnz	loc_641CF62B
mov	p, [ebx]
mov	[ebx+8], esi
and	byte ptr [ebx+10h], 0FDh
test	esi, esi
jz	short loc_641CF717
lea	esi, [esi+0]
test	byte ptr [ebx+10h], 2
jz	loc_641CF7A4
movzx	eax, word ptr [ebx+0Eh]
mov	eax, [esi+eax]
mov	[ebx+8], eax
mov	eax, [ebx]
test	eax, eax
jz	short loc_641CF6FF
cmp	esi, eax
jz	loc_641CF818
movzx	edi, word ptr [ebx+0Ch]
jmp	short loc_641CF6F6
cmp	esi, ecx
jz	loc_641CF7B0
mov	eax, ecx
lea	edx, [eax+edi]
mov	ecx, [edx]
test	ecx, ecx
jnz	short loc_641CF6EC
cmp	esi, [ebx+4]
jz	loc_641CF7E1
			
mov	[esp], esi	
call	_silc_free
mov	esi, [ebx+8]
test	esi, esi
jnz	short loc_641CF6C4
mov	[esp], ebx	
call	_silc_free
mov	edi, [ebp+var_1C]
mov	dword ptr [edi+10h], 0
jmp	loc_641CF62B
align 10h
movzx	callback_context_0, word ptr [ebx+0Ch]
mov	edx, [eax+edx]
mov	[ebx+8], edx
cmp	p, [eax]
jnz	loc_641CF68A
mov	[ebp+var_4C], edi
test	edi, edi
jz	short loc_641CF77D
cmp	eax, edi
jz	loc_641CF886
movzx	edi, word ptr [ebx+0Ch]
mov	[ebp+var_20], edi
mov	ecx, [ebp+var_4C]
mov	[ebp+var_24], p
mov	p, edi
jmp	short loc_641CF76E
align 4
cmp	eax, edx
jz	loc_641CF823
mov	ecx, edx
lea	edi, [ecx+esi]
mov	edx, [edi]
test	edx, edx
jnz	short loc_641CF764
mov	[ebp+var_4C], ecx
mov	esi, [ebp+var_24]
cmp	eax, [ebx+4]
jz	loc_641CF871
			
cmp	eax, [ebx+14h]
jz	loc_641CF865
cmp	eax, [ebx+18h]
jz	short loc_641CF80C
mov	[esp], eax	
call	_silc_free
jmp	loc_641CF690
align 4
movzx	eax, word ptr [ebx+0Ch]
mov	eax, [esi+eax]
jmp	loc_641CF6D5
mov	[ebp+var_24], edx
mov	ecx, [esi+edi]
mov	edi, [ebp+var_24]
mov	[edi], ecx
test	ecx, ecx
jz	short loc_641CF7CF
test	byte ptr [ebx+10h], 1
jz	short loc_641CF7CF
movzx	edx, word ptr [ebx+0Eh]
mov	edi, [esi+edx]
mov	[ecx+edx], edi
			
cmp	esi, [ebx+8]
jz	short loc_641CF7E9
sub	dword ptr [ebx+10h], 4
cmp	esi, [ebx+4]
jnz	loc_641CF708
mov	[ebx+4], eax
jmp	loc_641CF708
mov	ecx, [ebp+var_24]
mov	edx, [ecx]
mov	[ebx+8], edx
jmp	short loc_641CF7D4
mov	eax, [ecx+60h]
mov	eax, [ecx+60h]
inc	eax
mov	[ecx+60h], eax
mov	[ebp+stream], ecx
add	esp, 5Ch
pop	ebx
pop	p
pop	edi
leave
jmp	_silc_packet_stream_destroy
mov	dword ptr [ebx+18h], 0
jmp	loc_641CF794
movzx	edi, word ptr [ebx+0Ch]
mov	[ebp+var_24], ebx
xor	eax, eax
jmp	short loc_641CF7B3
mov	[ebp+var_4C], ecx
mov	[ebp+var_3C], edi
mov	esi, [ebp+var_24]
mov	ecx, [ebp+var_20]
mov	ecx, [eax+ecx]
mov	[ebp+var_24], ecx
mov	edi, [ebp+var_3C]
mov	[edi], ecx
test	ecx, ecx
jz	short loc_641CF851
test	byte ptr [ebx+10h], 1
jz	short loc_641CF851
movzx	edx, word ptr [ebx+0Eh]
mov	ecx, [eax+edx]
mov	edi, [ebp+var_24]
mov	[edi+edx], ecx
			
cmp	eax, [ebx+8]
jz	short loc_641CF87C
sub	dword ptr [ebx+10h], 4
cmp	eax, [ebx+4]
jnz	loc_641CF786
jmp	short loc_641CF871
mov	dword ptr [ebx+14h], 0
jmp	loc_641CF78F
			
mov	edx, [ebp+var_4C]
mov	[ebx+4], edx
jmp	loc_641CF786
mov	ecx, [ebp+var_3C]
mov	edx, [ecx]
mov	[ebx+8], edx
jmp	short loc_641CF856
mov	[ebp+var_3C], ebx
movzx	edx, word ptr [ebx+0Ch]
mov	[ebp+var_20], edx
mov	[ebp+var_4C], 0
jmp	short loc_641CF82C
align 4
public _silc_packet_wrap_notifier
push	ebp
mov	ebp, esp
push	esi
push	ebx
sub	esp, 20h
mov	ebx, [ebp+stream]
mov	esi, [ebp+callback]
test	byte ptr [ebx+3Ah], 3
jnz	short loc_641CF8F8
test	callback_0, callback_0
jz	short loc_641CF904
mov	dword ptr [esp+14h], 0FFFFFFFFh
movzx	eax, byte ptr [stream_0+38h]
mov	[esp+10h], eax
mov	dword ptr [esp+0Ch], 186A0h 
mov	[esp+8], stream_0 
mov	dword ptr [esp+4], offset _silc_packet_wrap_cbs	
mov	eax, [stream_0+4]
mov	[esp], eax	
call	_silc_packet_stream_link
mov	[stream_0+1Ch],	callback_0
mov	eax, [ebp+context]
mov	[stream_0+20h],	eax
mov	al, 1
add	esp, 20h
pop	stream_0
pop	callback_0
leave
retn
align 4
xor	eax, eax
add	esp, 20h
pop	stream_0
pop	callback_0
leave
retn
align 4
mov	[esp+8], stream_0 
mov	dword ptr [esp+4], offset _silc_packet_wrap_cbs	
mov	eax, [stream_0+4]
mov	[esp], eax	
call	_silc_packet_stream_unlink
jmp	short loc_641CF8E3
align 10h
public _silc_packet_wait_uninit
push	ebp
mov	ebp, esp
push	edi
push	esi
push	ebx
sub	esp, 3Ch
mov	esi, [ebp+waiter]
mov	ebx, [ebp+stream]
mov	eax, [esi]
mov	[esp], eax	
call	_silc_mutex_lock
or	byte ptr [esi+38h], 80h
mov	eax, [esi+4]
mov	[esp], eax	
call	_silc_cond_broadcast
mov	eax, [esi]
mov	[esp], eax	
call	_silc_mutex_unlock
call	_silc_thread_yield
mov	eax, [esi]
mov	[esp], eax	
call	_silc_mutex_lock
mov	[esp+8], esi	
mov	dword ptr [esp+4], offset _silc_packet_wait_cbs	
mov	[esp], ebx	
call	_silc_packet_stream_unlink
mov	ebx, [esi+8]
mov	[esi+10h], ebx
and	byte ptr [esi+18h], 0FDh
jmp	loc_641CFA39
movzx	eax, word ptr [waiter_0+16h]
mov	eax, [ebx+eax]
mov	[waiter_0+10h],	eax
mov	edi, [ebx+4]
mov	dword ptr [ebx+4], 0
mov	dword ptr [ebx+1Ch], 0
mov	dword ptr [ebx+18h], 0
mov	eax, [ebx+8]
mov	[ebx+10h], eax
mov	[ebx+0Ch], eax
mov	eax, [edi+4]
mov	eax, [eax+4]
mov	eax, [eax]
mov	[esp], eax	
call	_silc_mutex_lock
mov	eax, [edi+4]
mov	[ebp+var_2C], eax
mov	eax, [eax+4]
mov	edx, [eax+28h]
test	edx, edx
jz	loc_641CFA54
movzx	ecx, word ptr [eax+34h]
mov	eax, [eax+2Ch]
mov	[eax+ecx], ebx
mov	edx, [ebp+var_2C]
mov	eax, [edx+4]
test	byte ptr [eax+38h], 1
jz	short loc_641CF9F3
movzx	ecx, word ptr [eax+36h]
mov	edx, [eax+2Ch]
mov	[ebx+ecx], edx
mov	[eax+2Ch], ebx
mov	ecx, [ebp+var_2C]
mov	eax, [ecx+4]
movzx	edx, word ptr [eax+34h]
mov	dword ptr [ebx+edx], 0
add	dword ptr [eax+38h], 4
mov	eax, [edi+4]
mov	eax, [eax+4]
mov	edx, [eax+38h]
and	edx, 0FFFFFFFCh
cmp	edx, 4
jnz	short loc_641CFA2C
mov	edx, [eax+28h]
mov	[eax+30h], edx
and	byte ptr [eax+38h], 0FDh
mov	eax, [edi+4]
mov	eax, [eax+4]
mov	eax, [eax]
mov	[esp], eax	
call	_silc_mutex_unlock
mov	ebx, [waiter_0+10h]
test	ebx, ebx
jz	short loc_641CFA5C
test	byte ptr [waiter_0+18h], 2
jnz	loc_641CF984
movzx	eax, word ptr [waiter_0+14h]
mov	eax, [ebx+eax]
jmp	loc_641CF98B
align 4
mov	[eax+28h], ebx
jmp	short loc_641CF9DD
align 4
mov	eax, [waiter_0]
mov	[esp], eax	
call	_silc_mutex_unlock
mov	eax, [waiter_0+4]
mov	[esp], eax	
call	_silc_cond_free
mov	eax, [waiter_0]
mov	[esp], eax	
call	_silc_mutex_free
mov	[ebp+waiter], waiter_0
add	esp, 3Ch
pop	ebx
pop	waiter_0
pop	edi
leave
jmp	_silc_free
align 4
public _silc_packet_wrap_close
push	ebp
mov	ebp, esp
push	ebx
sub	esp, 14h
mov	ebx, [ebp+stream]
mov	al, [ebx+3Ah]
test	al, 1
jnz	short loc_641CFAC8
test	al, 2
jnz	short loc_641CFAD0
mov	ecx, [stream_0+1Ch]
test	ecx, ecx
jz	short loc_641CFAC2
mov	[esp+8], stream_0 
mov	dword ptr [esp+4], offset _silc_packet_wrap_cbs	
mov	eax, [stream_0+4]
mov	[esp], eax	
call	_silc_packet_stream_unlink
mov	al, [stream_0+3Ah]
			
or	eax, 1
mov	[stream_0+3Ah],	al
mov	al, 1
add	esp, 14h
pop	stream_0
leave
retn
mov	eax, [stream_0+4]
mov	[esp+4], eax	
mov	eax, [stream_0+0Ch]
mov	[esp], eax	
call	_silc_packet_wait_uninit
mov	al, [stream_0+3Ah]
jmp	short loc_641CFAC2
align 4
public _silc_packet_wrap_read
push	ebp
mov	ebp, esp
push	edi
push	esi
push	ebx
sub	esp, 6Ch
mov	ebx, [ebp+stream]
mov	al, [ebx+3Ah]
test	al, 1
jnz	loc_641CFD64
test	al, 2
jnz	loc_641CFD3C
mov	eax, [stream_0+8]
mov	[esp], eax	
call	_silc_mutex_lock
test	dword ptr [stream_0+34h], 0FFFFFFFCh
jz	loc_641CFE04
mov	eax, [stream_0+24h]
mov	[stream_0+2Ch],	prev
and	byte ptr [stream_0+34h], 0FDh
test	prev, prev
jz	short loc_641CFB37
movzx	edx, word ptr [stream_0+30h]
mov	edx, [prev+edx]
mov	[stream_0+2Ch],	edx
mov	ecx, prev
test	prev, prev
jz	short loc_641CFB6C
lea	edx, [stream_0+24h]
mov	[ebp+p], edx
movzx	edx, word ptr [stream_0+30h]
xor	ecx, ecx
mov	edx, [eax+edx]
mov	esi, [ebp+p]
mov	[esi], edx
test	edx, edx
jz	short loc_641CFB5F
test	byte ptr [stream_0+34h], 1
jnz	loc_641CFDBC
			
cmp	prev, [stream_0+2Ch]
jz	loc_641CFDEC
sub	dword ptr [stream_0+34h], 4
cmp	prev, [stream_0+28h]
jz	loc_641CFDCC
mov	edx, [stream_0+8]
mov	[ebp+packet], prev
mov	[esp], edx	
call	_silc_mutex_unlock
mov	eax, [stream_0+10h]
test	eax, eax
jz	short loc_641CFB94
test	byte ptr [stream_0+3Ah], 4
jz	loc_641CFD84
mov	eax, [ebp+packet]
mov	esi, [eax+0Ch]
mov	edx, [eax+10h]
sub	len, esi
cmp	[ebp+buf_len], len
jb	loc_641CFC78
mov	edi, [ebp+buf]
mov	ecx, len
rep movsb
mov	cl, [stream_0+3Ah]
and	ecx, 0FFFFFFFBh
mov	[stream_0+3Ah],	cl
mov	stream_0, [eax+4]
mov	dword ptr [eax+4], 0
mov	dword ptr [eax+1Ch], 0
mov	dword ptr [eax+18h], 0
mov	ecx, [eax+8]
mov	[eax+10h], ecx
mov	[eax+0Ch], ecx
mov	ecx, [ebx+4]
mov	ecx, [ecx+4]
mov	ecx, [ecx]
mov	[esp], ecx	
mov	[ebp+var_30], eax
mov	[ebp+var_2C], len
call	_silc_mutex_lock
mov	ecx, [ebx+4]
mov	[ebp+p], ecx
mov	esi, [ecx+4]
mov	buf_0, [esi+28h]
test	edi, edi
mov	eax, [ebp+var_30]
mov	edx, [ebp+var_2C]
jz	loc_641CFDD4
movzx	edi, word ptr [esi+34h]
mov	esi, [esi+2Ch]
mov	[esi+edi], eax
mov	edi, [ebp+p]
mov	esi, [edi+4]
test	byte ptr [esi+38h], 1
jnz	loc_641CFD74
mov	[esi+2Ch], eax
mov	esi, [ebp+p]
mov	ecx, [esi+4]
movzx	esi, word ptr [ecx+34h]
mov	dword ptr [eax+esi], 0
add	dword ptr [ecx+38h], 4
mov	eax, [ebx+4]
mov	eax, [eax+4]
mov	ecx, [eax+38h]
and	ecx, 0FFFFFFFCh
cmp	ecx, 4
jnz	short loc_641CFC5C
mov	ecx, [eax+28h]
mov	[eax+30h], ecx
and	byte ptr [eax+38h], 0FDh
mov	eax, [ebx+4]
mov	eax, [eax+4]
mov	eax, [eax]
mov	[esp], eax	
mov	[ebp+var_2C], edx
call	_silc_mutex_unlock
mov	edx, [ebp+var_2C]
mov	eax, len
add	esp, 6Ch
pop	ebx
pop	esi
pop	edi
leave
retn
align 4
			
mov	len, [ebp+buf_len]
mov	edi, [ebp+buf]
mov	ecx, len
rep movsb
mov	cl, [stream_0+3Ah]
test	cl, 2
jnz	loc_641CFBB2
mov	esi, [eax+0Ch]
mov	ecx, [eax+10h]
sub	ecx, esi
cmp	len, ecx
ja	short loc_641CFC9F
add	esi, len
mov	[eax+0Ch], esi
mov	ecx, [stream_0+24h]
test	ecx, ecx
jz	loc_641CFDDC
movzx	esi, word ptr [stream_0+30h]
mov	[eax+esi], ecx
mov	cl, [stream_0+34h]
test	cl, 1
jz	short loc_641CFCCA
mov	esi, [stream_0+24h]
test	esi, esi
jz	short loc_641CFCCA
movzx	ecx, word ptr [stream_0+32h]
mov	[esi+ecx], eax
mov	cl, [stream_0+34h]
			
mov	esi, [stream_0+28h]
test	esi, esi
jz	loc_641CFDFC
mov	[stream_0+24h],	eax
and	ecx, 1
jz	short loc_641CFCE8
movzx	ecx, word ptr [stream_0+32h]
mov	dword ptr [eax+ecx], 0
add	dword ptr [stream_0+34h], 4
mov	dword ptr [esp+18h], 1 
mov	dword ptr [esp+14h], 0 
mov	dword ptr [esp+10h], 0 
mov	[esp+0Ch], stream_0 
mov	dword ptr [esp+8], offset _silc_packet_wrap_read_more 
mov	dword ptr [esp+4], 0 
mov	eax, [stream_0+4]
mov	eax, [eax+4]
mov	eax, [eax]
mov	[esp], eax	
mov	[ebp+var_2C], len
call	_silc_schedule_task_add
or	byte ptr [stream_0+3Ah], 4
mov	edx, [ebp+var_2C]
mov	eax, edx
add	esp, 6Ch
pop	stream_0
pop	esi
pop	buf_0
leave
retn
lea	eax, [ebp+packet]
mov	[esp+8], eax	
mov	dword ptr [esp+4], 0 
mov	eax, [stream_0+0Ch]
mov	[esp], eax	
call	_silc_packet_wait
test	eax, eax
js	short loc_641CFD64
test	byte ptr [stream_0+3Ah], 1
jz	loc_641CFB83
			
mov	edx, 0FFFFFFFEh
mov	eax, len
add	esp, 6Ch
pop	stream_0
pop	esi
pop	edi
leave
retn
align 4
movzx	ecx, word ptr [esi+36h]
mov	edi, [esi+2Ch]
mov	[eax+ecx], edi
jmp	loc_641CFC23
align 4
mov	edx, [stream_0+14h]
mov	[esp+0Ch], edx
mov	edx, [ebp+packet]
add	edx, 8
mov	[esp+8], edx
mov	dword ptr [esp+4], 0
mov	[esp], stream_0
call	eax
mov	eax, [ebp+packet]
mov	esi, [eax+0Ch]
mov	edx, [eax+10h]
sub	len, esi
cmp	[ebp+buf_len], len
jnb	loc_641CFBA8
jmp	loc_641CFC78
align 4
movzx	edi, word ptr [stream_0+32h]
mov	esi, [prev+edi]
mov	[edx+edi], esi
jmp	loc_641CFB5F
align 4
mov	[stream_0+28h],	ecx
jmp	loc_641CFB75
mov	[esi+28h], eax
jmp	loc_641CFC13
movzx	ecx, word ptr [stream_0+30h]
mov	dword ptr [eax+ecx], 0
jmp	loc_641CFCB1
mov	edi, [ebp+p]
mov	edx, [edi]
mov	[stream_0+2Ch],	edx
jmp	loc_641CFB68
align 4
mov	[stream_0+28h],	eax
jmp	loc_641CFCD5
mov	eax, [stream_0+8]
mov	[esp], eax	
call	_silc_mutex_unlock
mov	edx, 0FFFFFFFFh
jmp	loc_641CFC6C
align 4
public _silc_packet_send
			
push	ebp
mov	ebp, esp
push	edi
push	esi
push	ebx
sub	esp, 4Ch
mov	ebx, [ebp+stream]
movzx	ecx, [ebp+flags] 
movzx	edx, [ebp+type]	
mov	eax, [ebx+38h]
mov	[esp+24h], eax	
mov	eax, [ebx+30h]
mov	[esp+20h], eax	
mov	eax, [ebp+data_len]
mov	[esp+1Ch], eax	
mov	eax, [ebp+data]
mov	[esp+18h], eax	
mov	al, [ebx+66h]
mov	esi, 3Fh
and	esi, eax
mov	[esp+14h], esi	
mov	esi, [ebx+54h]
mov	[esp+10h], esi	
shr	al, 6
movzx	eax, al
mov	[esp+0Ch], eax	
mov	al, [ebx+65h]
mov	esi, 3Fh
and	esi, eax
mov	[esp+8], esi	
mov	esi, [ebx+50h]
mov	[esp+4], esi	
shr	al, 6
movzx	eax, al
mov	[esp], eax	
mov	eax, ebx	
call	_silc_packet_send_raw
test	al, al
jnz	short loc_641CFE9C
			
add	esp, 4Ch
pop	stream_0
pop	esi
pop	edi
leave
retn
test	byte ptr [stream_0+67h], 8
jnz	short loc_641CFF10
mov	esi, [stream_0+8]
			
mov	ecx, [stream_0+24h]
mov	edx, [stream_0+20h]
jmp	short loc_641CFEEB
align 10h
sub	ecx, edx
mov	[esp+8], ecx	
mov	[esp+4], edx	
mov	[esp], esi	
call	_silc_stream_write
test	eax, eax
jz	loc_641CFFE7
cmp	eax, 0FFFFFFFEh
jz	loc_641CFFA3
cmp	eax, 0FFFFFFFFh
jz	short loc_641CFEF8
mov	ecx, [stream_0+24h]
mov	edx, [stream_0+20h]
mov	edi, ecx
sub	edi, edx
cmp	eax, edi
ja	short loc_641CFEEB
add	edx, eax
mov	[stream_0+20h],	edx
			
cmp	ecx, edx
jnz	short loc_641CFEB0
mov	ret, [stream_0+1Ch]
mov	[stream_0+24h],	eax
mov	[stream_0+20h],	eax
			
mov	eax, [stream_0+0Ch]
mov	[esp], eax	
call	_silc_mutex_unlock
mov	al, 1
add	esp, 4Ch
pop	stream_0
pop	esi
pop	edi
leave
retn
align 10h
mov	ret, [stream_0+8]
mov	esi, [eax+8]
lea	eax, [ebp+connected]
mov	[esp+4], eax	
mov	[esp], esi	
call	_silc_socket_stream_is_udp
test	al, al
jz	loc_641CFEA5
cmp	[ebp+connected], 0
jnz	loc_641CFEA5
mov	ecx, [stream_0+24h]
mov	edx, [stream_0+20h]
jmp	short loc_641CFF84
align 10h
mov	eax, [stream_0+14h]
sub	ecx, edx
mov	[esp+10h], ecx	
mov	[esp+0Ch], edx	
movzx	edx, word ptr [eax+4]
mov	[esp+8], edx	
mov	eax, [eax]
mov	[esp+4], eax	
mov	[esp], esi	
call	_silc_net_udp_send
cmp	eax, 0FFFFFFFEh
jz	loc_641D0023
cmp	eax, 0FFFFFFFFh
jz	short loc_641CFEF8
mov	ecx, [stream_0+24h]
mov	edx, [stream_0+20h]
mov	edi, ecx
sub	edi, edx
cmp	eax, edi
ja	short loc_641CFF84
add	edx, eax
mov	[stream_0+20h],	edx
			
cmp	edx, ecx
jnz	short loc_641CFF40
mov	eax, [stream_0+1Ch]
mov	[stream_0+24h],	eax
mov	[stream_0+20h],	eax
mov	eax, [stream_0+0Ch]
mov	[esp], eax	
call	_silc_mutex_unlock
mov	al, 1
jmp	loc_641CFE94
mov	eax, [stream_0+1Ch]
mov	[stream_0+24h],	eax
mov	[stream_0+20h],	eax
mov	eax, [stream_0+0Ch]
mov	[esp], eax	
call	_silc_mutex_unlock
mov	eax, [stream_0+4]
mov	eax, [eax+4]
mov	edx, [eax+0Ch]
mov	ecx, [stream_0+18h]
mov	[esp+10h], ecx
mov	ecx, [eax+10h]
mov	[esp+0Ch], ecx
mov	dword ptr [esp+8], 1
mov	[esp+4], stream_0
mov	[esp], eax
call	dword ptr [edx+8]
xor	eax, eax
jmp	loc_641CFE94
mov	eax, [stream_0+1Ch]
mov	[stream_0+24h],	eax
mov	[stream_0+20h],	eax
mov	eax, [stream_0+0Ch]
mov	[esp], eax	
call	_silc_mutex_unlock
mov	eax, [stream_0+4]
mov	eax, [eax+4]
mov	edx, [eax+0Ch]
mov	ecx, [stream_0+18h]
mov	[esp+0Ch], ecx
mov	ecx, [eax+10h]
mov	[esp+8], ecx
mov	[esp+4], stream_0
mov	[esp], eax
call	dword ptr [edx+4]
xor	eax, eax
jmp	loc_641CFE94
mov	eax, [stream_0+1Ch]
mov	[stream_0+24h],	eax
mov	[stream_0+20h],	eax
jmp	short loc_641CFFB7
align 10h
			
push	ebp
mov	ebp, esp
push	edi
push	esi
push	ebx
sub	esp, 0DCh
mov	esi, [ebp+status]
mov	ebx, [ebp+context]
mov	eax, [ebx+0Ch]
mov	[esp], eax	
call	_silc_mutex_lock
mov	al, [ebx+67h]
test	al, 2
jnz	loc_641D0178
test	status_0, status_0
jnz	loc_641D0118
mov	edi, [context_0+8]
mov	status_0, [context_0+2Ch]
test	esi, esi
jz	loc_641D0326
			
mov	eax, [esi+0Ch]
mov	edx, [esi+8]
mov	ecx, eax
sub	ecx, edx
cmp	ecx, 7FFh
jbe	loc_641D03B7
			
lea	eax, [ebp+connected]
mov	[esp+4], eax	
mov	[esp], edi	
call	_silc_socket_stream_is_udp
test	al, al
jz	short loc_641D00A1
cmp	[ebp+connected], 0
jz	loc_641D0221
mov	edx, [esi+8]
mov	eax, [esi+0Ch]
sub	eax, edx
mov	[esp+8], eax	
mov	[esp+4], edx	
mov	[esp], edi	
call	_silc_stream_read
test	eax, eax
jle	loc_641D0582
mov	ecx, [esi+8]
mov	edx, [esi+0Ch]
sub	edx, ecx
cmp	eax, edx
ja	short loc_641D00D3
lea	eax, [ecx+eax]
mov	[esi+8], eax
			
mov	eax, [context_0+60h]
mov	eax, [context_0+60h]
inc	eax
mov	[context_0+60h], eax
mov	eax, context_0
call	_silc_packet_read_process
mov	eax, [context_0+0Ch]
mov	[esp], eax	
call	_silc_mutex_unlock
nop
mov	eax, [context_0+60h]
mov	edx, [context_0+60h]
dec	edx
mov	[context_0+60h], edx
dec	eax
jnz	loc_641D0183
mov	eax, [context_0+60h]
mov	eax, [context_0+60h]
inc	eax
mov	[context_0+60h], eax
mov	[esp], context_0 
call	_silc_packet_stream_destroy
jmp	short loc_641D0183
align 4
dec	status_0
jnz	short loc_641D0178
mov	edx, [context_0+20h]
cmp	edx, [context_0+1Ch]
jz	short loc_641D0178
test	al, 8
jnz	short loc_641D0190
mov	esi, [context_0+8]
mov	ecx, [context_0+24h]
jmp	short loc_641D016B
align 10h
sub	ecx, edx
mov	[esp+8], ecx	
mov	[esp+4], edx	
mov	[esp], esi	
call	_silc_stream_write
test	eax, eax
jz	loc_641D04A3
cmp	eax, 0FFFFFFFEh
jz	loc_641D0535
cmp	eax, 0FFFFFFFFh
jz	short loc_641D0178
mov	ecx, [context_0+24h]
mov	edx, [context_0+20h]
mov	edi, ecx
sub	edi, edx
cmp	eax, edi
ja	short loc_641D016B
add	edx, eax
mov	[context_0+20h], edx
			
cmp	ecx, edx
jnz	short loc_641D0130
mov	eax, [context_0+1Ch]
mov	[context_0+24h], eax
mov	[context_0+20h], eax
			
mov	eax, [context_0+0Ch]
mov	[esp], eax	
call	_silc_mutex_unlock
			
add	esp, 0DCh
pop	context_0
pop	remote
pop	edi
leave
retn
align 10h
mov	eax, [context_0+8]
mov	esi, [eax+8]
lea	eax, [ebp+connected]
mov	[esp+4], eax	
mov	[esp], esi	
call	_silc_socket_stream_is_udp
test	al, al
jz	loc_641D03AC
cmp	[ebp+connected], 0
jnz	loc_641D03AC
mov	edx, [context_0+20h]
mov	ecx, [context_0+24h]
jmp	short loc_641D0204
align 10h
mov	eax, [context_0+14h]
sub	ecx, edx
mov	[esp+10h], ecx	
mov	[esp+0Ch], edx	
movzx	edx, word ptr [eax+4]
mov	[esp+8], edx	
mov	eax, [eax]
mov	[esp+4], eax	
mov	[esp], esi	
call	_silc_net_udp_send
cmp	eax, 0FFFFFFFEh
jz	loc_641D0577
cmp	eax, 0FFFFFFFFh
jz	short loc_641D0178
mov	ecx, [context_0+24h]
mov	edx, [context_0+20h]
mov	edi, ecx
sub	edi, edx
cmp	eax, edi
ja	short loc_641D0204
add	edx, eax
mov	[context_0+20h], edx
			
cmp	edx, ecx
jnz	short loc_641D01C0
mov	eax, [context_0+1Ch]
mov	[context_0+24h], eax
mov	[context_0+20h], eax
mov	eax, [context_0+0Ch]
mov	[esp], eax	
call	_silc_mutex_unlock
jmp	loc_641D0183
mov	edx, [esi+8]
mov	eax, [esi+0Ch]
sub	eax, edx
mov	[esp+14h], eax	
mov	[esp+10h], edx	
lea	eax, [ebp+remote_port]
mov	[esp+0Ch], eax	
mov	dword ptr [esp+8], 40h 
lea	eax, [ebp+remote_ip_addr]
mov	[esp+4], eax	
mov	[esp], edi	
call	_silc_net_udp_receive
mov	[ebp+var_AC], eax
test	eax, eax
js	loc_641D05DA
lea	ecx, [ebp+remote_ip_addr]
mov	[esp+10h], ecx
mov	eax, [ebp+remote_port]
mov	[esp+0Ch], eax
mov	dword ptr [esp+8], offset aDS 
mov	dword ptr [esp+4], 40h 
lea	edi, [ebp+str]
mov	[esp], edi	
call	_silc_snprintf
mov	eax, [context_0+4]
mov	eax, [eax+4]
mov	eax, [eax]
mov	[esp], eax	
call	_silc_mutex_lock
lea	eax, [ebp+ret_context]
mov	[esp+0Ch], eax	
mov	dword ptr [esp+8], 0 
mov	[esp+4], edi	
mov	eax, [context_0+4]
mov	eax, [eax+4]
mov	eax, [eax+3Ch]
mov	[esp], eax	
call	_silc_hash_table_find
test	al, al
jnz	loc_641D0436
mov	eax, [context_0+4]
mov	eax, [eax+4]
mov	eax, [eax]
mov	[esp], eax	
call	_silc_mutex_unlock
mov	eax, [context_0+14h]
test	eax, eax
jz	loc_641D04DD
mov	eax, [eax]
mov	[esp], eax	
call	_silc_free
mov	edi, [context_0+14h]
lea	eax, [ebp+remote_ip_addr]
mov	[esp], eax	
call	_strdup
mov	[edi], eax
mov	eax, [context_0+14h]
mov	edx, [ebp+remote_port]
mov	[eax+4], dx
mov	edx, [esi+8]
mov	eax, [esi+0Ch]
sub	eax, edx
cmp	[ebp+var_AC], eax
ja	loc_641D00D3
add	edx, [ebp+var_AC]
mov	[esi+8], edx
jmp	loc_641D00D3
mov	eax, [context_0+4]
mov	eax, [eax+8]
mov	edx, [eax]
mov	[eax+8], edx
and	byte ptr [eax+10h], 0FDh
mov	dword ptr [eax+18h], 0
mov	dword ptr [eax+14h], 0
mov	eax, [context_0+4]
mov	eax, [eax+8]
mov	edx, [eax+14h]
mov	[eax+18h], edx
mov	edx, [eax+8]
test	edx, edx
jz	loc_641D048B
test	byte ptr [eax+10h], 2
jz	loc_641D0497
movzx	ecx, word ptr [eax+0Eh]
mov	ecx, [edx+ecx]
mov	[eax+8], ecx
mov	[eax+14h], edx
mov	esi, [edx]
test	esi, esi
jnz	loc_641D006E
mov	eax, 10400h	
call	_silc_buffer_alloc_1
mov	esi, eax
test	eax, eax
jz	loc_641D0178
mov	eax, [eax]
mov	[esi+8], eax
mov	[esi+4], eax
mov	eax, [context_0+4]
mov	eax, [eax+8]	
mov	edx, esi	
call	_silc_dlist_add
jmp	loc_641D006E
align 4
			
mov	edx, [context_0+20h]
mov	ecx, [context_0+24h]
jmp	loc_641D016B
mov	ecx, [esi]
mov	[ebp+ptr], ecx
mov	ecx, eax
sub	ecx, [ebp+ptr]
lea	eax, [ecx+800h]
mov	[ebp+var_AC], eax
cmp	ecx, eax
jnb	loc_641D0084
mov	ecx, [esi+4]
mov	[ebp+var_B0], ecx
mov	[esp+4], eax	
mov	eax, [ebp+ptr]
mov	[esp], eax	
mov	[ebp+var_B4], edx
call	_silc_realloc
test	eax, eax
mov	edx, [ebp+var_B4]
jz	loc_641D0084
mov	[esi], eax
mov	ecx, [ebp+var_B0]
sub	ecx, [ebp+ptr]
add	ecx, eax
mov	[esi+4], ecx
sub	edx, [ebp+var_B0]
add	edx, ecx
mov	[esi+8], edx
add	eax, [ebp+var_AC]
mov	[esi+0Ch], eax
jmp	loc_641D0084
mov	eax, [context_0+4]
mov	eax, [eax+4]
mov	eax, [eax]
mov	[esp], eax	
call	_silc_mutex_unlock
mov	eax, [context_0+0Ch]
mov	[esp], eax	
call	_silc_mutex_unlock
mov	eax, [ebp+ret_context]
mov	eax, [eax+0Ch]
mov	[esp], eax	
call	_silc_mutex_lock
mov	esi, [ebp+ret_context]
mov	eax, [context_0+60h]
mov	eax, [context_0+60h]
inc	eax
mov	[context_0+60h], eax
test	remote,	remote
jz	loc_641D00DD
mov	eax, remote	
call	_silc_packet_read_process
mov	eax, [remote+0Ch]
mov	[esp], eax	
call	_silc_mutex_unlock
jmp	loc_641D00F0
mov	dword ptr [eax+14h], 0
jmp	loc_641D037B
movzx	ecx, word ptr [eax+0Ch]
mov	ecx, [edx+ecx]
jmp	loc_641D036B
mov	eax, [context_0+1Ch]
mov	[context_0+24h], eax
mov	[context_0+20h], eax
mov	eax, [context_0+0Ch]
mov	[esp], eax	
call	_silc_mutex_unlock
mov	eax, [context_0+4]
mov	eax, [eax+4]
mov	edx, [eax+0Ch]
mov	ecx, [context_0+18h]
mov	[esp+0Ch], ecx
mov	ecx, [eax+10h]
mov	[esp+8], ecx
mov	[esp+4], context_0
mov	[esp], eax
call	dword ptr [edx+4]
jmp	loc_641D0183
mov	dword ptr [esp+4], 8 
mov	dword ptr [esp], 1 
call	_silc_calloc
mov	[context_0+14h], eax
test	eax, eax
jnz	loc_641D02E0
mov	eax, [context_0+0Ch]
mov	[esp], eax	
call	_silc_mutex_unlock
mov	eax, [context_0+4]
mov	eax, [eax+4]
mov	edx, [eax+0Ch]
mov	ecx, [context_0+18h]
mov	[esp+10h], ecx
mov	ecx, [eax+10h]
mov	[esp+0Ch], ecx
mov	dword ptr [esp+8], 6
mov	[esp+4], context_0
mov	[esp], eax
call	dword ptr [edx+8]
jmp	loc_641D0183
mov	eax, [context_0+1Ch]
mov	[context_0+24h], eax
mov	[context_0+20h], eax
mov	eax, [context_0+0Ch]
mov	[esp], eax	
call	_silc_mutex_unlock
mov	eax, [context_0+4]
mov	eax, [eax+4]
mov	edx, [eax+0Ch]
mov	ecx, [context_0+18h]
mov	[esp+10h], ecx
mov	ecx, [eax+10h]
mov	[esp+0Ch], ecx
mov	dword ptr [esp+8], 1
mov	[esp+4], context_0
mov	[esp], eax
call	dword ptr [edx+8]
jmp	loc_641D0183
mov	eax, [context_0+1Ch]
mov	[context_0+24h], eax
mov	[context_0+20h], eax
jmp	short loc_641D0549
mov	edx, [context_0+0Ch]
mov	[esp], edx	
mov	[ebp+var_B4], eax
call	_silc_mutex_unlock
mov	eax, [ebp+var_B4]
test	eax, eax
jz	short loc_641D05F3
inc	eax
jz	loc_641D0183
mov	eax, [esi]
mov	[esi+8], eax
mov	[esi+4], eax
mov	eax, [context_0+4]
mov	eax, [eax+4]
mov	edx, [eax+0Ch]
mov	ecx, [context_0+18h]
mov	[esp+10h], ecx
mov	ecx, [eax+10h]
mov	[esp+0Ch], ecx
mov	dword ptr [esp+8], 0
mov	[esp+4], context_0
mov	[esp], eax
call	dword ptr [edx+8]
jmp	loc_641D0183
mov	eax, [context_0+0Ch]
mov	[esp], eax	
call	_silc_mutex_unlock
cmp	[ebp+var_AC], 0FFFFFFFFh
jnz	short loc_641D05A4
jmp	loc_641D0183
mov	eax, [esi]
mov	[esi+8], eax
mov	[esi+4], eax
jmp	loc_641D04B7
public _silc_packet_send_va
push	ebp
mov	ebp, esp
push	edi
push	esi
push	ebx
sub	esp, 6Ch
mov	ebx, [ebp+stream]
mov	al, [ebp+type]
mov	[ebp+var_39], al
mov	al, [ebp+flags]
mov	[ebp+var_3A], al
lea	esi, [ebp+ap]
lea	edx, [ebp+buf]
mov	ecx, 10h
xor	eax, eax
mov	edi, edx
rep stosb
mov	[esp+4], esi	
mov	[esp], edx	
call	_silc_buffer_format_vp
test	eax, eax
js	loc_641D07E0
mov	esi, [ebp+buf.data]
movzx	ecx, [ebp+var_3A] 
movzx	edx, [ebp+var_39] 
mov	eax, [stream_0+38h]
mov	[esp+24h], eax	
mov	eax, [stream_0+30h]
mov	[esp+20h], eax	
mov	eax, [ebp+buf.tail]
sub	eax, esi
mov	[esp+1Ch], eax	
mov	[esp+18h], esi	
mov	al, [stream_0+66h]
mov	esi, 3Fh
and	esi, eax
mov	[esp+14h], esi	
mov	esi, [stream_0+54h]
mov	[esp+10h], esi	
shr	al, 6
movzx	eax, al
mov	[esp+0Ch], eax	
mov	al, [stream_0+65h]
mov	esi, 3Fh
and	esi, eax
mov	[esp+8], esi	
mov	esi, [stream_0+50h]
mov	[esp+4], esi	
shr	al, 6
movzx	eax, al
mov	[esp], eax	
mov	eax, stream_0	
call	_silc_packet_send_raw
test	al, al
jnz	short loc_641D06E0
xor	stream_0, stream_0
			
mov	eax, [ebp+buf.head]
mov	[ebp+buf.end], 0
mov	[ebp+buf.tail],	0
mov	[ebp+buf.data],	0
mov	[ebp+buf.head],	0
mov	[esp], eax	
call	_silc_free
mov	al, bl
add	esp, 6Ch
pop	ret
pop	esi
pop	edi
leave
retn
align 10h
test	byte ptr [stream_0+67h], 8
jnz	short loc_641D0750
mov	esi, [stream_0+8]
			
mov	ecx, [stream_0+24h]
mov	edx, [stream_0+20h]
jmp	short loc_641D072F
align 4
sub	ecx, edx
mov	[esp+8], ecx	
mov	[esp+4], edx	
mov	[esp], esi	
call	_silc_stream_write
test	eax, eax
jz	loc_641D082E
cmp	eax, 0FFFFFFFEh
jz	loc_641D07EC
cmp	eax, 0FFFFFFFFh
jz	short loc_641D073C
mov	ecx, [stream_0+24h]
mov	edx, [stream_0+20h]
mov	edi, ecx
sub	edi, edx
cmp	eax, edi
ja	short loc_641D072F
add	edx, eax
mov	[stream_0+20h],	edx
			
cmp	ecx, edx
jnz	short loc_641D06F4
mov	eax, [stream_0+1Ch]
mov	[stream_0+24h],	eax
mov	[stream_0+20h],	eax
			
mov	eax, [stream_0+0Ch]
mov	[esp], eax	
call	_silc_mutex_unlock
mov	bl, 1
jmp	loc_641D06AD
align 10h
mov	eax, [stream_0+8]
mov	esi, [eax+8]
lea	eax, [ebp+connected]
mov	[esp+4], eax	
mov	[esp], esi	
call	_silc_socket_stream_is_udp
test	al, al
jz	short loc_641D06E9
cmp	[ebp+connected], 0
jnz	loc_641D06E9
mov	ecx, [stream_0+24h]
mov	edx, [stream_0+20h]
jmp	short loc_641D07C0
align 4
mov	eax, [stream_0+14h]
sub	ecx, edx
mov	[esp+10h], ecx	
mov	[esp+0Ch], edx	
movzx	edx, word ptr [eax+4]
mov	[esp+8], edx	
mov	eax, [eax]
mov	[esp+4], eax	
mov	[esp], esi	
call	_silc_net_udp_send
cmp	eax, 0FFFFFFFEh
jz	loc_641D086A
cmp	eax, 0FFFFFFFFh
jz	short loc_641D073C
mov	ecx, [stream_0+24h]
mov	edx, [stream_0+20h]
mov	edi, ecx
sub	edi, edx
cmp	eax, edi
ja	short loc_641D07C0
add	edx, eax
mov	[stream_0+20h],	edx
			
cmp	edx, ecx
jnz	short loc_641D077C
mov	eax, [stream_0+1Ch]
mov	[stream_0+24h],	eax
mov	[stream_0+20h],	eax
mov	eax, [stream_0+0Ch]
mov	[esp], eax	
call	_silc_mutex_unlock
mov	bl, 1
jmp	loc_641D06AD
align 10h
xor	stream_0, stream_0
mov	al, bl
add	esp, 6Ch
pop	ret
pop	esi
pop	edi
leave
retn
mov	eax, [stream_0+1Ch]
mov	[stream_0+24h],	eax
mov	[stream_0+20h],	eax
mov	eax, [stream_0+0Ch]
mov	[esp], eax	
call	_silc_mutex_unlock
mov	eax, [stream_0+4]
mov	eax, [eax+4]
mov	edx, [eax+0Ch]
mov	ecx, [stream_0+18h]
mov	[esp+10h], ecx
mov	ecx, [eax+10h]
mov	[esp+0Ch], ecx
mov	dword ptr [esp+8], 1
mov	[esp+4], stream_0
mov	[esp], eax
call	dword ptr [edx+8]
jmp	loc_641D06AB
mov	eax, [stream_0+1Ch]
mov	[stream_0+24h],	eax
mov	[stream_0+20h],	eax
mov	eax, [stream_0+0Ch]
mov	[esp], eax	
call	_silc_mutex_unlock
mov	eax, [stream_0+4]
mov	eax, [eax+4]
mov	edx, [eax+0Ch]
mov	ecx, [stream_0+18h]
mov	[esp+0Ch], ecx
mov	ecx, [eax+10h]
mov	[esp+8], ecx
mov	[esp+4], stream_0
mov	[esp], eax
call	dword ptr [edx+4]
xor	stream_0, stream_0
jmp	loc_641D06AD
mov	eax, [stream_0+1Ch]
mov	[stream_0+24h],	eax
mov	[stream_0+20h],	eax
jmp	short loc_641D0800
align 4
public _silc_packet_set_keys
			
push	ebp
mov	ebp, esp
push	edi
push	esi
push	ebx
sub	esp, 4Ch
mov	ebx, [ebp+stream]
cmp	[ebp+rekey], 0
jz	short loc_641D0900
mov	eax, [stream_0+38h]
mov	[esp+24h], eax	
mov	eax, [stream_0+30h]
mov	[esp+20h], eax	
mov	dword ptr [esp+1Ch], 0 
mov	dword ptr [esp+18h], 0 
mov	dl, [stream_0+66h]
mov	eax, edx
and	eax, 3Fh
mov	[esp+14h], eax	
mov	eax, [stream_0+54h]
mov	[esp+10h], eax	
shr	dl, 6
movzx	edx, dl
mov	[esp+0Ch], edx	
mov	dl, [stream_0+65h]
mov	eax, edx
and	eax, 3Fh
mov	[esp+8], eax	
mov	eax, [stream_0+50h]
mov	[esp+4], eax	
shr	dl, 6
movzx	edx, dl
mov	[esp], edx	
xor	ecx, ecx	
mov	edx, 17h	
mov	eax, stream_0	
call	_silc_packet_send_raw
test	al, al
jnz	loc_641D0A38
			
add	esp, 4Ch
pop	stream_0
pop	esi
pop	edi
leave
retn
align 10h
mov	eax, [stream_0+0Ch]
mov	[esp], eax	
call	_silc_mutex_lock
			
test	byte ptr [stream_0+67h], 4
jz	loc_641D09D0
mov	eax, [stream_0+34h]
test	eax, eax
jz	short loc_641D0931
mov	ecx, [ebp+send_key]
test	ecx, ecx
jz	short loc_641D0931
mov	[esp], eax	
call	_silc_cipher_free
mov	eax, [stream_0+30h]
mov	[stream_0+34h],	eax
			
mov	eax, [stream_0+44h]
test	eax, eax
jz	short loc_641D094D
mov	edx, [ebp+receive_key]
test	edx, edx
jz	short loc_641D094D
mov	[esp], eax	
call	_silc_cipher_free
mov	eax, [stream_0+40h]
mov	[stream_0+44h],	eax
			
mov	eax, [stream_0+3Ch]
test	eax, eax
jz	short loc_641D0969
mov	edi, [ebp+send_hmac]
test	edi, edi
jz	short loc_641D0969
mov	[esp], eax	
call	_silc_hmac_free
mov	eax, [stream_0+38h]
mov	[stream_0+3Ch],	eax
			
mov	eax, [stream_0+4Ch]
test	eax, eax
jz	short loc_641D0985
mov	esi, [ebp+receive_hmac]
test	esi, esi
jz	short loc_641D0985
mov	[esp], eax	
call	_silc_hmac_free
mov	eax, [stream_0+48h]
mov	[stream_0+4Ch],	eax
			
mov	ecx, [ebp+send_key]
test	ecx, ecx
jz	short loc_641D0992
mov	eax, [ebp+send_key]
mov	[stream_0+30h],	eax
mov	edx, [ebp+receive_key]
test	edx, edx
jz	short loc_641D099F
mov	eax, [ebp+receive_key]
mov	[stream_0+40h],	eax
mov	eax, [ebp+send_hmac]
test	eax, eax
jz	short loc_641D09AC
mov	eax, [ebp+send_hmac]
mov	[stream_0+38h],	eax
mov	edi, [ebp+receive_hmac]
test	edi, edi
jz	short loc_641D09B9
mov	eax, [ebp+receive_hmac]
mov	[stream_0+48h],	eax
mov	eax, [stream_0+0Ch]
mov	[esp], eax	
call	_silc_mutex_unlock
mov	al, 1
add	esp, 4Ch
pop	stream_0
pop	esi
pop	edi
leave
retn
align 10h
mov	eax, [stream_0+30h]
test	eax, eax
jz	short loc_641D09E6
mov	ecx, [ebp+send_key]
test	ecx, ecx
jz	short loc_641D09E6
mov	[esp], eax	
call	_silc_cipher_free
			
mov	eax, [stream_0+40h]
test	eax, eax
jz	short loc_641D09FC
mov	edx, [ebp+receive_key]
test	edx, edx
jz	short loc_641D09FC
mov	[esp], eax	
call	_silc_cipher_free
			
mov	eax, [stream_0+38h]
test	eax, eax
jz	short loc_641D0A12
mov	edi, [ebp+send_hmac]
test	edi, edi
jz	short loc_641D0A12
mov	[esp], eax	
call	_silc_hmac_free
			
mov	eax, [stream_0+48h]
test	eax, eax
jz	loc_641D0985
mov	esi, [ebp+receive_hmac]
test	esi, esi
jz	loc_641D0985
mov	[esp], eax	
call	_silc_hmac_free
jmp	loc_641D0985
align 4
test	byte ptr [stream_0+67h], 8
jz	loc_641D0AC8
mov	eax, [stream_0+8]
mov	esi, [eax+8]
lea	eax, [ebp+connected]
mov	[esp+4], eax	
mov	[esp], esi	
call	_silc_socket_stream_is_udp
test	al, al
jz	short loc_641D0ACB
cmp	[ebp+connected], 0
jnz	short loc_641D0ACB
mov	ecx, [stream_0+24h]
mov	edx, [stream_0+20h]
jmp	short loc_641D0AB4
align 4
mov	eax, [stream_0+14h]
sub	ecx, edx
mov	[esp+10h], ecx	
mov	[esp+0Ch], edx	
movzx	edx, word ptr [eax+4]
mov	[esp+8], edx	
mov	eax, [eax]
mov	[esp+4], eax	
mov	[esp], esi	
call	_silc_net_udp_send
cmp	eax, 0FFFFFFFEh
jz	loc_641D0B9D
cmp	eax, 0FFFFFFFFh
jz	loc_641D090B
mov	ecx, [stream_0+24h]
mov	edx, [stream_0+20h]
mov	edi, ecx
sub	edi, edx
cmp	eax, edi
ja	short loc_641D0AB4
add	edx, eax
mov	[stream_0+20h],	edx
			
cmp	edx, ecx
jnz	short loc_641D0A6C
mov	eax, [stream_0+1Ch]
mov	[stream_0+24h],	eax
mov	[stream_0+20h],	eax
jmp	loc_641D090B
align 4
mov	esi, [stream_0+8]
			
mov	ecx, [stream_0+24h]
mov	edx, [stream_0+20h]
jmp	short loc_641D0B0B
align 4
sub	ecx, edx
mov	[esp+8], ecx	
mov	[esp+4], edx	
mov	[esp], esi	
call	_silc_stream_write
test	eax, eax
jz	short loc_641D0B61
cmp	eax, 0FFFFFFFEh
jz	short loc_641D0B1D
cmp	eax, 0FFFFFFFFh
jz	loc_641D090B
mov	ecx, [stream_0+24h]
mov	edx, [stream_0+20h]
mov	edi, ecx
sub	edi, edx
cmp	eax, edi
ja	short loc_641D0B0B
add	edx, eax
mov	[stream_0+20h],	edx
			
cmp	ecx, edx
jnz	short loc_641D0AD4
mov	eax, [stream_0+1Ch]
mov	[stream_0+24h],	eax
mov	[stream_0+20h],	eax
jmp	loc_641D090B
mov	eax, [stream_0+1Ch]
mov	[stream_0+24h],	eax
mov	[stream_0+20h],	eax
mov	eax, [stream_0+0Ch]
mov	[esp], eax	
call	_silc_mutex_unlock
mov	eax, [stream_0+4]
mov	eax, [eax+4]
mov	edx, [eax+0Ch]
mov	ecx, [stream_0+18h]
mov	[esp+10h], ecx
mov	ecx, [eax+10h]
mov	[esp+0Ch], ecx
mov	dword ptr [esp+8], 1
mov	[esp+4], stream_0
mov	[esp], eax
call	dword ptr [edx+8]
xor	eax, eax
jmp	loc_641D08F7
mov	eax, [stream_0+1Ch]
mov	[stream_0+24h],	eax
mov	[stream_0+20h],	eax
mov	eax, [stream_0+0Ch]
mov	[esp], eax	
call	_silc_mutex_unlock
mov	eax, [stream_0+4]
mov	eax, [eax+4]
mov	edx, [eax+0Ch]
mov	ecx, [stream_0+18h]
mov	[esp+0Ch], ecx
mov	ecx, [eax+10h]
mov	[esp+8], ecx
mov	[esp+4], stream_0
mov	[esp], eax
call	dword ptr [edx+4]
xor	eax, eax
jmp	loc_641D08F7
mov	eax, [stream_0+1Ch]
mov	[stream_0+24h],	eax
mov	[stream_0+20h],	eax
jmp	short loc_641D0B31
public _silc_packet_wrap_write
push	ebp
mov	ebp, esp
push	edi
push	esi
push	ebx
sub	esp, 4Ch
mov	esi, [ebp+stream]
mov	edi, [ebp+data]
mov	edx, [esi+10h]
test	edx, edx
jz	loc_641D0C4C
mov	eax, [stream_0+18h]
mov	ecx, [eax]
mov	[eax+8], ecx
mov	[eax+4], ecx
mov	ecx, [stream_0+14h]
mov	[esp+0Ch], ecx
mov	[esp+8], eax
mov	dword ptr [esp+4], 1
mov	[esp], stream_0
call	edx
test	al, al
jz	short loc_641D0C4C
mov	ret, [stream_0+18h]
mov	edx, [eax+4]
mov	dword ptr [esp+24h], 1Dh
mov	ecx, [ebp+data_len]
mov	[esp+20h], ecx
mov	[esp+1Ch], data_0
mov	dword ptr [esp+18h], 0Ch
mov	eax, [eax+8]
sub	eax, edx
mov	[esp+14h], eax
mov	[esp+10h], edx
mov	dword ptr [esp+0Ch], 0Ch
movzx	eax, byte ptr [stream_0+39h]
mov	[esp+8], eax	
movzx	eax, byte ptr [stream_0+38h]
mov	[esp+4], eax	
mov	eax, [stream_0+4]
mov	[esp], eax	
call	_silc_packet_send_va
test	al, al
jz	short loc_641D0CB6
mov	eax, [ebp+data_len]
			
add	esp, 4Ch
pop	ebx
pop	esi
pop	data_0
leave
retn
align 4
			
mov	ebx, [stream_0+4]
movzx	ecx, byte ptr [stream_0+39h] 
movzx	edx, byte ptr [stream_0+38h] 
mov	ret, [ebx+38h]
mov	[esp+24h], eax	
mov	eax, [ebx+30h]
mov	[esp+20h], eax	
mov	eax, [ebp+data_len]
mov	[esp+1Ch], eax	
mov	[esp+18h], data_0 
mov	al, [ebx+66h]
and	eax, 3Fh
mov	[esp+14h], eax	
mov	eax, [ebx+54h]
mov	[esp+10h], eax	
mov	al, [ebx+66h]
shr	al, 6
movzx	eax, al
mov	[esp+0Ch], eax	
mov	al, [ebx+65h]
and	eax, 3Fh
mov	[esp+8], eax	
mov	eax, [ebx+50h]
mov	[esp+4], eax	
mov	al, [ebx+65h]
shr	al, 6
movzx	eax, al
mov	[esp], eax	
mov	eax, ebx	
call	_silc_packet_send_raw
test	al, al
jnz	short loc_641D0CC4
mov	eax, 0FFFFFFFEh
add	esp, 4Ch
pop	ebx
pop	stream_0
pop	data_0
leave
retn
align 4
test	byte ptr [ebx+67h], 8
jz	loc_641D0D5C
mov	eax, [ebx+8]
mov	stream_0, [eax+8]
lea	eax, [ebp+connected]
mov	[esp+4], eax	
mov	[esp], esi	
call	_silc_socket_stream_is_udp
test	al, al
jz	short loc_641D0D5F
cmp	[ebp+connected], 0
jnz	short loc_641D0D5F
mov	ecx, [ebx+24h]
mov	edx, [ebx+20h]
jmp	short loc_641D0D3C
align 4
mov	eax, [ebx+14h]
sub	ecx, edx
mov	[esp+10h], ecx	
mov	[esp+0Ch], edx	
movzx	edx, word ptr [eax+4]
mov	[esp+8], edx	
mov	eax, [eax]
mov	[esp+4], eax	
mov	[esp], esi	
call	_silc_net_udp_send
cmp	eax, 0FFFFFFFEh
jz	loc_641D0E27
cmp	eax, 0FFFFFFFFh
jz	short loc_641D0D49
mov	ecx, [ebx+24h]
mov	edx, [ebx+20h]
mov	data_0,	ecx
sub	edi, edx
cmp	eax, edi
ja	short loc_641D0D3C
add	edx, eax
mov	[ebx+20h], edx
			
cmp	ecx, edx
jnz	short loc_641D0CF8
mov	eax, [ebx+1Ch]
mov	[ebx+24h], eax
mov	[ebx+20h], eax
			
mov	eax, [ebx+0Ch]
mov	[esp], eax	
call	_silc_mutex_unlock
jmp	loc_641D0C3E
align 4
mov	stream_0, [ebx+8]
			
mov	ecx, [ebx+24h]
mov	edx, [ebx+20h]
jmp	short loc_641D0D9B
align 4
sub	ecx, edx
mov	[esp+8], ecx	
mov	[esp+4], edx	
mov	[esp], esi	
call	_silc_stream_write
test	eax, eax
jz	short loc_641D0DE8
cmp	eax, 0FFFFFFFEh
jz	short loc_641D0DA1
cmp	eax, 0FFFFFFFFh
jz	short loc_641D0D49
mov	ecx, [ebx+24h]
mov	edx, [ebx+20h]
mov	data_0,	ecx
sub	edi, edx
cmp	eax, edi
ja	short loc_641D0D9B
add	edx, eax
mov	[ebx+20h], edx
			
cmp	ecx, edx
jnz	short loc_641D0D68
jmp	short loc_641D0D40
mov	eax, [ebx+1Ch]
mov	[ebx+24h], eax
mov	[ebx+20h], eax
mov	eax, [ebx+0Ch]
mov	[esp], eax	
call	_silc_mutex_unlock
mov	eax, [ebx+4]
mov	eax, [eax+4]
mov	edx, [eax+0Ch]
mov	ecx, [ebx+18h]
mov	[esp+10h], ecx
mov	ecx, [eax+10h]
mov	[esp+0Ch], ecx
mov	dword ptr [esp+8], 1
mov	[esp+4], ebx
mov	[esp], eax
call	dword ptr [edx+8]
mov	eax, 0FFFFFFFEh
jmp	loc_641D0C41
mov	eax, [ebx+1Ch]
mov	[ebx+24h], eax
mov	[ebx+20h], eax
mov	eax, [ebx+0Ch]
mov	[esp], eax	
call	_silc_mutex_unlock
mov	eax, [ebx+4]
mov	eax, [eax+4]
mov	edx, [eax+0Ch]
mov	ecx, [ebx+18h]
mov	[esp+0Ch], ecx
mov	ecx, [eax+10h]
mov	[esp+8], ecx
mov	[esp+4], ebx
mov	[esp], eax
call	dword ptr [edx+4]
mov	eax, 0FFFFFFFEh
jmp	loc_641D0C41
mov	eax, [ebx+1Ch]
mov	[ebx+24h], eax
mov	[ebx+20h], eax
jmp	short loc_641D0DB5
align 4
public _silc_public_key_payload_decode
push	ebp
mov	ebp, esp
push	edi
push	esi
push	ebx
sub	esp, 4Ch
mov	eax, [ebp+data]
mov	ebx, [ebp+data_len]
mov	esi, [ebp+public_key]
test	esi, esi
jz	short loc_641D0EAA
mov	[ebp+buf.head],	data_0
mov	[ebp+buf.data],	data_0
add	data_0,	data_len_0
mov	[ebp+buf.end], eax
mov	[ebp+buf.tail],	eax
mov	dword ptr [esp+18h], 1Dh
lea	eax, [ebp+pk_type]
mov	[esp+14h], eax
mov	dword ptr [esp+10h], 3
lea	eax, [ebp+pk_type+2]
mov	[esp+0Ch], eax
mov	dword ptr [esp+8], 3
mov	dword ptr [esp+4], 19h
lea	edi, [ebp+buf]
mov	[esp], edi	
call	_silc_buffer_unformat
test	eax, eax
js	short loc_641D0EAA
movzx	ret, word ptr [ebp+pk_type+2]
sub	data_len_0, 4
cmp	eax, ebx
ja	short loc_641D0EAA
mov	edx, [ebp+pk_type]
dec	edx
cmp	dx, 4
jbe	short loc_641D0EB4
			
xor	ret, ret
add	esp, 4Ch
pop	ebx
pop	public_key_0
pop	edi
leave
retn
mov	dword ptr [esp+10h], 1Dh
mov	[esp+0Ch], eax
lea	eax, [ebp+pk]
mov	[esp+8], eax
mov	dword ptr [esp+4], 0Ch
mov	[esp], edi	
call	_silc_buffer_unformat
test	eax, eax
js	short loc_641D0EAA
mov	[esp+0Ch], public_key_0	
movzx	ret, word ptr [ebp+pk_type+2]
mov	[esp+8], pk_len_0 
mov	pk_len_0, [ebp+pk]
mov	[esp+4], eax	
movzx	eax, word ptr [ebp+pk_type]
mov	[esp], pk_type_0 
call	_silc_pkcs_public_key_alloc
jmp	short loc_641D0EAC
public _silc_public_key_payload_encode
push	ebp
mov	ebp, esp
push	edi
push	esi
push	ebx
sub	esp, 6Ch
mov	ebx, [ebp+public_key]
test	ebx, ebx
jnz	short loc_641D0F18
xor	public_key_0, public_key_0
mov	eax, buffer
add	esp, 6Ch
pop	buffer
pop	pk
pop	type
leave
retn
mov	[esp], public_key_0
call	_silc_pkcs_get_type
mov	edi, eax
lea	eax, [ebp+pk_len]
mov	[esp+4], eax	
mov	[esp], public_key_0 
call	_silc_pkcs_public_key_encode
mov	esi, eax
test	eax, eax
jz	short loc_641D0F0C
mov	edx, [ebp+pk_len]
mov	dword ptr [esp+4], 10h 
mov	dword ptr [esp], 1 
mov	[ebp+var_2C], edx
call	_silc_calloc
mov	public_key_0, eax
test	eax, eax
mov	edx, [ebp+var_2C]
jz	loc_641D1002
add	edx, 4
jz	loc_641D1011
mov	dword ptr [esp+4], 1 
mov	[esp], edx	
mov	[ebp+var_2C], edx
call	_silc_calloc
mov	[ebp+var_3C], eax
mov	[buffer], eax
test	eax, eax
mov	edx, [ebp+var_2C]
jz	short loc_641D1002
mov	[buffer+4], eax
mov	[buffer+8], eax
mov	ecx, eax
add	ecx, edx
mov	[buffer+0Ch], ecx
mov	eax, ecx
sub	eax, [ebp+var_3C]
cmp	edx, eax
ja	short loc_641D0F9F
mov	[buffer+8], ecx
mov	eax, [ebp+pk_len]
mov	dword ptr [esp+20h], 1Dh
mov	[esp+1Ch], eax
mov	[esp+18h], pk
mov	dword ptr [esp+14h], 0Ch
mov	[esp+10h], type
mov	dword ptr [esp+0Ch], 3
mov	[esp+8], eax
mov	dword ptr [esp+4], 3
mov	[esp], buffer	
call	_silc_buffer_format
test	eax, eax
js	short loc_641D0FF0
mov	[esp], pk	
call	_silc_free
mov	eax, buffer
add	esp, 6Ch
pop	buffer
pop	pk
pop	type
leave
retn
mov	eax, [buffer]
mov	[esp], eax	
call	_silc_free
mov	[esp], buffer	
call	_silc_free
			
mov	[esp], pk	
call	_silc_free
xor	buffer,	buffer
jmp	loc_641D0F0E
mov	ecx, [buffer+8]
jmp	short loc_641D0F9C
align 4
public _silc_status_get_args
push	ebp
mov	ebp, esp
push	edi
push	esi
push	ebx
sub	esp, 0BCh
mov	ebx, [ebp+args]
mov	esi, [ebp+ret_arg1]
mov	edi, [ebp+ret_arg2]
mov	al, [ebp+status]
mov	[ebp+var_A9], al
test	esi, esi
jz	loc_641D1277
test	ret_arg2_0, ret_arg2_0
jz	loc_641D1277
mov	[esp], args_0	
call	_silc_argument_get_arg_num
cmp	eax, 3
ja	short loc_641D1064 
test	num, num
jz	short loc_641D1066
mov	al, [ebp+var_A9]
sub	eax, 0Ah
cmp	al, 29h		
jbe	short loc_641D1074
			
xor	tmp, tmp
			
add	esp, 0BCh
pop	ebx
pop	ret_arg1_0
pop	ret_arg2_0
leave
retn
align 4
movzx	eax, al
jmp	ds:off_6426394C[eax*4] 
align 10h
			
lea	eax, [ebp+len]	
mov	[esp+8], eax	
mov	dword ptr [esp+4], 2 
mov	[esp], args_0	
call	_silc_argument_get_arg_type
test	eax, eax
jz	short loc_641D1064 
lea	args_0,	[ebp+id_0]
mov	[esp+8], ebx	
mov	edx, [ebp+len]
mov	[esp+4], edx	
mov	[esp], tmp	
call	_silc_id_payload_parse_id
test	al, al
jnz	short loc_641D1064 
mov	dword ptr [esp+4], 1
jmp	loc_641D1219
align 4
			
lea	edx, [ebp+len]	
mov	[esp+8], edx	
mov	dword ptr [esp+4], 2 
mov	[esp], args_0	
call	_silc_argument_get_arg_type
test	eax, eax
jz	short loc_641D1064 
lea	edx, [ebp+id]
mov	[esp+8], edx	
mov	edx, [ebp+len]
mov	[esp+4], edx	
mov	[esp], tmp	
call	_silc_id_payload_parse_id
test	al, al
jnz	loc_641D1064	
movzx	eax, [ebp+id.type]
mov	[esp+4], eax	
lea	eax, [ebp+id]
mov	[esp], eax	
call	_silc_id_dup
mov	[ret_arg1_0], eax
test	eax, eax
jz	loc_641D1064	
lea	edx, [ebp+len]
mov	[esp+8], edx	
mov	dword ptr [esp+4], 3 
mov	[esp], args_0	
call	_silc_argument_get_arg_type
test	eax, eax
jz	loc_641D126D
lea	edx, [ebp+id]
mov	[esp+8], edx	
mov	edx, [ebp+len]
mov	[esp+4], edx	
mov	[esp], tmp	
call	_silc_id_payload_parse_id
test	al, al
jnz	loc_641D1064	
movzx	eax, [ebp+id.type]
mov	[esp+4], eax	
lea	eax, [ebp+id]
mov	[esp], eax	
call	_silc_id_dup
mov	[ret_arg2_0], eax
test	eax, eax
jz	loc_641D126D
mov	eax, 2
jmp	loc_641D1066
align 4
			
lea	eax, [ebp+len]	
mov	[esp+8], eax	
mov	dword ptr [esp+4], 2 
mov	[esp], args_0	
call	_silc_argument_get_arg_type
test	eax, eax
jz	loc_641D1064	
lea	args_0,	[ebp+id_1]
mov	[esp+8], ebx	
mov	edx, [ebp+len]
mov	[esp+4], edx	
mov	[esp], tmp	
call	_silc_id_payload_parse_id
test	al, al
jnz	loc_641D1064	
mov	dword ptr [esp+4], 3
jmp	short loc_641D1219
align 4
			
lea	eax, [ebp+len]	
mov	[esp+8], eax	
mov	dword ptr [esp+4], 2 
mov	[esp], args_0	
call	_silc_argument_get_arg_type
test	eax, eax
jz	loc_641D1064	
lea	args_0,	[ebp+id_2]
mov	[esp+8], ebx	
mov	edx, [ebp+len]
mov	[esp+4], edx	
mov	[esp], tmp	
call	_silc_id_payload_parse_id
test	al, al
jnz	loc_641D1064	
mov	dword ptr [esp+4], 2 
			
mov	[esp], ebx	
call	_silc_id_dup
mov	[ret_arg1_0], eax
test	eax, eax
setnz	al
movzx	eax, al
jmp	loc_641D1066
			
lea	eax, [ebp+len]
mov	[esp+8], eax	
mov	dword ptr [esp+4], 2 
mov	[esp], args_0	
call	_silc_argument_get_arg_type
test	eax, eax
jz	loc_641D1064	
mov	edx, [ebp+len]
mov	[esp+4], edx	
mov	[esp], tmp	
call	_silc_memdup
mov	[ret_arg1_0], eax
test	eax, eax
setnz	al
movzx	eax, al
jmp	loc_641D1066
			
mov	tmp, 1
jmp	loc_641D1066
			
mov	dword ptr [esp+8], 21h 
mov	dword ptr [esp+4], offset aSilcstatus_c	
mov	dword ptr [esp], offset	aRet_arg1Ret_ar	
call	__assert
align 4
public _silc_async_halt
push	ebp
mov	ebp, esp
sub	esp, 18h
mov	eax, [ebp+op]
mov	edx, [eax+4]
test	edx, edx
jz	short loc_641D12BC
mov	ecx, [op_0+8]
mov	[esp+8], ecx
mov	dword ptr [esp+4], 1
mov	[esp], op_0
call	edx
leave
retn
align 4
xor	op_0, op_0
leave
retn
public _silc_async_resume
push	ebp
mov	ebp, esp
sub	esp, 18h
mov	eax, [ebp+op]
mov	edx, [eax+4]
test	edx, edx
jz	short loc_641D12E8
mov	ecx, [op_0+8]
mov	[esp+8], ecx
mov	dword ptr [esp+4], 0
mov	[esp], op_0
call	edx
leave
retn
align 4
xor	op_0, op_0
leave
retn
public _silc_async_init
			
push	ebp
mov	ebp, esp
mov	eax, [ebp+op]
mov	edx, [ebp+abort_cb]
mov	[eax], edx
mov	edx, [ebp+pause_cb]
mov	[eax+4], edx
mov	edx, [ebp+context]
mov	[eax+8], edx
and	byte ptr [eax+0Ch], 0FEh
mov	al, 1
leave
retn
align 4
public _silc_async_get_context
push	ebp
mov	ebp, esp
mov	eax, [ebp+op]
mov	eax, [eax+8]
leave
retn
align 4
public _silc_async_free
			
push	ebp
mov	ebp, esp
sub	esp, 8
mov	eax, [ebp+op]
test	byte ptr [eax+0Ch], 1
jnz	short locret_641D132C
leave
retn
align 4
leave
jmp	_silc_free
align 4
public _silc_async_alloc
			
push	ebp
mov	ebp, esp
sub	esp, 18h
mov	dword ptr [esp+4], 10h 
mov	dword ptr [esp], 1 
call	_silc_calloc
test	eax, eax
jz	short locret_641D1367
mov	edx, [ebp+abort_cb]
mov	[op], edx
mov	edx, [ebp+pause_cb]
mov	[op+4],	edx
mov	edx, [ebp+context]
mov	[op+8],	edx
or	byte ptr [op+0Ch], 1
leave
retn
align 4
public _silc_async_abort
push	ebp
mov	ebp, esp
push	edi
push	esi
push	ebx
sub	esp, 1Ch
mov	ebx, [ebp+op]
mov	esi, [ebp+abort_cb]
mov	edi, [ebp+context]
mov	eax, [ebx]
test	eax, eax
jz	short loc_641D1390
mov	edx, [op_0+8]
mov	[esp+4], edx
mov	[esp], op_0
call	eax
test	abort_cb_0, abort_cb_0
jz	short loc_641D139D
mov	[esp+4], context_0
mov	[esp], op_0
call	abort_cb_0
test	byte ptr [op_0+0Ch], 1
jnz	short loc_641D13AC
add	esp, 1Ch
pop	op_0
pop	abort_cb_0
pop	context_0
leave
retn
align 4
mov	[ebp+op], op_0
add	esp, 1Ch
pop	op_0
pop	abort_cb_0
pop	context_0
leave
jmp	_silc_free
align 4
public _silc_buffer_sstrformat
			
push	ebp
mov	ebp, esp
push	edi
push	esi
push	ebx
sub	esp, 3Ch
mov	edx, [ebp+dst]
mov	eax, [edx]
mov	[ebp+var_24], eax
mov	esi, [edx+0Ch]
sub	len, eax
mov	eax, [edx+4]
mov	[ebp+var_28], eax
lea	eax, [ebp+arg_8]
mov	[ebp+va], eax
mov	ebx, edx
jmp	short loc_641D143A
align 4
mov	ecx, 0FFFFFFFFh
mov	edi, string
xor	eax, eax
repne scasb
not	ecx
dec	ecx
lea	eax, [ecx+len]
mov	[ebp+var_1C], eax
inc	eax
mov	[esp+0Ch], eax	
mov	eax, [dst_0]
mov	[esp+8], eax	
lea	eax, [len+1]
mov	[esp+4], eax	
mov	eax, [ebp+stack]
mov	[esp], eax	
mov	[ebp+var_2C], edx
mov	[ebp+var_30], ecx
call	_silc_srealloc
test	eax, eax
mov	edx, [ebp+var_2C]
mov	ecx, [ebp+var_30]
jz	short loc_641D146C
mov	[dst_0], eax
add	eax, len
mov	edi, eax
mov	len, edx
rep movsb
mov	eax, [dst_0]
mov	edx, [ebp+var_1C]
mov	byte ptr [eax+edx], 0
mov	string,	edx
			
add	[ebp+va], 4
mov	eax, [ebp+va]
mov	string,	[eax-4]
test	string,	string
jz	short loc_641D143A
cmp	string,	1Dh
jnz	short loc_641D13E4
mov	ecx, [dst_0]
add	ecx, len
mov	[dst_0+0Ch], ecx
mov	eax, [ebp+var_28]
sub	eax, [ebp+var_24]
add	eax, [dst_0]
mov	[dst_0+4], eax
mov	[dst_0+8], ecx
mov	eax, len
add	esp, 3Ch
pop	dst_0
pop	len
pop	edi
leave
retn
or	len, 0FFFFFFFFh
jmp	short loc_641D1462
align 4
public _silc_buffer_strformat
			
push	ebp
mov	ebp, esp
push	edi
push	esi
push	ebx
sub	esp, 3Ch
mov	ebx, [ebp+dst]
mov	eax, [ebx]
mov	[ebp+var_24], eax
mov	edx, [ebx+0Ch]
sub	len, eax
mov	eax, [ebx+4]
mov	[ebp+var_28], eax
lea	eax, [ebp+arg_4]
mov	[ebp+va], eax
mov	esi, len
jmp	short loc_641D14E4
align 4
mov	ecx, 0FFFFFFFFh
mov	edi, string
xor	eax, eax
repne scasb
not	ecx
dec	ecx
lea	eax, [ecx+len]
mov	[ebp+var_1C], eax
inc	eax
mov	[esp+4], eax	
mov	eax, [dst_0]
mov	[esp], eax	
mov	[ebp+var_2C], edx
mov	[ebp+var_30], ecx
call	_silc_realloc
test	eax, eax
mov	edx, [ebp+var_2C]
mov	ecx, [ebp+var_30]
jz	short loc_641D1518
mov	[dst_0], eax
add	eax, len
mov	edi, eax
mov	len, edx
rep movsb
mov	eax, [dst_0]
mov	edx, [ebp+var_1C]
mov	byte ptr [eax+edx], 0
mov	string,	edx
			
add	[ebp+va], 4
mov	eax, [ebp+va]
mov	string,	[eax-4]
test	string,	string
jz	short loc_641D14E4
cmp	string,	1Dh
jnz	short loc_641D149C
mov	string,	len
mov	ecx, [dst_0]
add	ecx, len
mov	[dst_0+0Ch], ecx
mov	eax, [ebp+var_28]
sub	eax, [ebp+var_24]
add	eax, [dst_0]
mov	[dst_0+4], eax
mov	[dst_0+8], ecx
mov	eax, len
add	esp, 3Ch
pop	dst_0
pop	esi
pop	edi
leave
retn
or	edx, 0FFFFFFFFh
jmp	short loc_641D150E
align 10h
push	ebp
mov	ebp, esp
push	esi
push	ebx
sub	esp, 10h
mov	esi, len
mov	dword ptr [esp+4], 10h 
mov	dword ptr [esp], 1 
call	_silc_calloc
mov	ebx, eax
test	eax, eax
jz	short loc_641D156A
test	len, len
jz	short loc_641D156A
mov	dword ptr [esp+4], 1 
mov	[esp], len	
call	_silc_calloc
mov	[sb], eax
test	eax, eax
jz	short loc_641D1573
mov	[sb+4],	eax
mov	[sb+8],	eax
lea	len, [eax+len]
mov	[sb+0Ch], esi
			
mov	eax, sb
add	esp, 10h
pop	sb
pop	len
leave
retn
xor	sb, sb
jmp	short loc_641D156A
align 4
			
push	ebp
mov	ebp, esp
push	edi
push	esi
push	ebx
sub	esp, 4Ch
mov	esi, stack
mov	ebx, size
mov	stack, [sb+8]
mov	size, [sb+4]
mov	[ebp+var_24], ecx
mov	edi, eax
sub	edi, ecx
mov	[ebp+var_1C], edi
cmp	size, edi
jbe	short loc_641D15FC
mov	ecx, [sb+0Ch]
mov	[ebp+var_3C], ecx
sub	ecx, eax
add	edi, ecx
cmp	size, edi
ja	short loc_641D15C0
			
sub	size, [ebp+var_1C]
cmp	ebx, ecx
ja	short loc_641D15FC
lea	ebx, [eax+ebx]
mov	[sb+8],	ebx
mov	al, 1
add	esp, 4Ch
pop	size
pop	stack
pop	edi
leave
retn
align 10h
mov	edi, [sb]
mov	[ebp+ptr], edi
mov	edi, [ebp+var_3C]
sub	edi, [ebp+ptr]
mov	[ebp+old_size],	edi
mov	edi, size
sub	edi, [ebp+var_1C]
add	edi, [ebp+old_size]
sub	edi, ecx
mov	[ebp+var_20], edi
test	stack, stack
jz	loc_641D166C
mov	edi, [ebp+old_size]
cmp	[ebp+var_20], edi
ja	short loc_641D1608
mov	edi, eax
sub	edi, [ebp+var_24]
mov	[ebp+var_1C], edi
mov	ecx, [ebp+var_3C]
sub	ecx, eax
jmp	short loc_641D15A7
align 4
			
mov	al, 1
add	esp, 4Ch
pop	size
pop	stack
pop	edi
leave
retn
align 4
mov	eax, [ebp+var_20]
mov	[esp+0Ch], eax	
mov	ecx, [ebp+ptr]
mov	[esp+8], ecx	
mov	[esp+4], edi	
mov	[esp], stack	
mov	[ebp+var_30], sb
call	_silc_srealloc
test	eax, eax
mov	edx, [ebp+var_30]
jz	short loc_641D1699
mov	[sb], eax
mov	stack, [ebp+var_24]
sub	esi, [ebp+ptr]
lea	esi, [eax+esi]
mov	[sb+4],	esi
mov	ecx, [ebp+var_1C]
add	ecx, esi
mov	[ebp+var_1C], ecx
mov	[sb+8],	ecx
mov	ecx, [ebp+var_20]
lea	edi, [eax+ecx]
mov	[sb+0Ch], edi
mov	eax, [ebp+var_1C]
mov	[ebp+var_24], esi
mov	[ebp+var_3C], edi
mov	edi, eax
sub	edi, [ebp+var_24]
mov	[ebp+var_1C], edi
mov	ecx, [ebp+var_3C]
sub	ecx, eax
jmp	loc_641D15A7
align 4
mov	ecx, [ebp+old_size]
cmp	edi, ecx
jbe	loc_641D15EB
mov	[esp+4], edi	
mov	edi, [ebp+ptr]
mov	[esp], edi	
mov	[ebp+var_30], sb
call	_silc_realloc
test	eax, eax
mov	edx, [ebp+var_30]
jz	short loc_641D16BF
mov	[edx], eax
mov	stack, [ebp+var_24]
sub	esi, edi
jmp	short loc_641D1634
mov	edi, [ebp+var_20]
mov	[esp+4], edi	
mov	[esp], stack	
call	_silc_smalloc
test	eax, eax
mov	edx, [ebp+var_30]
jz	short loc_641D16BF
mov	stack, [edx]
mov	ecx, [sb+0Ch]
sub	ecx, esi
mov	edi, eax
rep movsb
jmp	loc_641D162C
			
xor	eax, eax
jmp	loc_641D15B6
align 4
public _silc_buffer_sformat_vp
			
push	ebp
mov	ebp, esp
push	edi
push	esi
push	ebx
sub	esp, 5Ch
mov	ebx, [ebp+dst]
mov	[ebp+advance], 0
mov	[ebp+flen], 0
nop
			
mov	offst, [ebp+ap]
add	ap_0, 4
cmp	dword ptr [ap_0-4], 1Dh	
jbe	short loc_641D1708
			
cmp	[ebp+advance], 0
jz	loc_641D1EF2
mov	[ebp+flen], 0FFFFFFFFh
			
mov	offst, [ebp+flen]
add	esp, 5Ch
pop	dst_0
pop	x
pop	edi
leave
retn
mov	edx, [ap_0-4]
jmp	ds:off_642639F4[edx*4] 
align 4
			
mov	edx, [ebp+stack] 
test	edx, edx
jz	loc_641D1ED4
lea	tmp_len, [ap_0+0Ch]
mov	[ebp+ap], ecx
mov	edx, [eax+8]
mov	[esp+0Ch], edx
mov	edx, [eax+4]
mov	[esp+8], edx
mov	[esp+4], dst_0
mov	x, [ebp+stack]
mov	[esp], esi
call	dword ptr [eax]
cmp	eax, 0
jl	short fail	
jz	short loc_641D16E0
mov	ecx, [dst_0+4]
mov	edx, [dst_0+8]
sub	edx, ecx
cmp	tmp_len, edx
ja	short loc_641D1757
add	ecx, offst
mov	[dst_0+4], ecx
add	[ebp+flen], offst
jmp	short loc_641D16E0
			
mov	[ebp+advance], 1
jmp	short loc_641D16E3
align 4
			
lea	tmp_len, [ap_0+4] 
mov	[ebp+ap], ecx
mov	eax, [eax]
test	offst, offst
jz	loc_641D16E0
cmp	offst, 1
jle	loc_641D1E99
mov	ecx, [dst_0+4]
mov	edx, [dst_0+8]
sub	edx, ecx
cmp	offst, edx
jbe	short loc_641D1752
jmp	fail		
align 10h
			
mov	x, [ap_0]	
lea	edx, [ap_0+8]
mov	[ebp+ap], edx
mov	eax, [eax+4]
mov	[ebp+var_2C], eax
test	x, x
jz	loc_641D16E0
test	eax, eax
jz	loc_641D16E0
mov	tmp_len, eax	
mov	edx, dst_0	
mov	eax, [ebp+stack] 
call	_silc_buffer_senlarge
test	al, al
jz	fail		
mov	ecx, [ebp+var_2C]
add	[ebp+flen], ecx
mov	eax, [dst_0+4]
mov	edx, [dst_0+8]
sub	edx, eax
cmp	ecx, edx
ja	loc_641D16E0
mov	edi, eax
jmp	loc_641D190D
align 10h
			
lea	edx, [ap_0+4]	
mov	[ebp+ap], edx
mov	eax, [eax]
mov	[ebp+var_2C], eax
test	eax, eax
jz	loc_641D16E0
mov	edx, [eax+8]
mov	eax, [eax+4]
cmp	edx, eax
jz	loc_641D16E0
sub	edx, eax
lea	tmp_len, [edx+4] 
mov	edx, dst_0	
mov	eax, [ebp+stack] 
call	_silc_buffer_senlarge
test	al, al
jz	fail		
mov	x, [ebp+var_2C]
mov	eax, [esi+8]
sub	eax, [esi+4]
mov	edi, [ebp+flen]
lea	edi, [eax+edi+4]
mov	[ebp+flen], edi
shr	eax, 18h
mov	[ebp+xf], al
mov	eax, [esi+8]
sub	eax, [esi+4]
shr	eax, 10h
mov	[ebp+xf+1], al
mov	eax, [esi+8]
sub	eax, [esi+4]
shr	eax, 8
mov	[ebp+xf+2], al
mov	eax, [esi+8]
sub	eax, [esi+4]
mov	[ebp+xf+3], al
mov	eax, [dst_0+4]
mov	edx, [dst_0+8]
sub	edx, eax
cmp	edx, 3
jbe	short loc_641D187D
mov	edx, dword ptr [ebp+xf]
mov	[eax], edx
mov	eax, [dst_0+4]
mov	ecx, [dst_0+8]
mov	edx, ecx
sub	edx, eax
cmp	edx, 3
jbe	short loc_641D187D
add	eax, 4
mov	[dst_0+4], eax
mov	edx, ecx
sub	edx, eax
			
mov	ecx, [ebp+var_2C]
mov	esi, [ecx+4]
mov	ecx, [ecx+8]
sub	ecx, esi
cmp	ecx, edx
ja	loc_641D16E0
mov	edi, eax
rep movsb
mov	edx, [ebp+var_2C]
mov	eax, [edx+8]
sub	eax, [edx+4]
mov	ecx, [dst_0+4]
mov	edx, [dst_0+8]
sub	edx, ecx
cmp	eax, edx
ja	loc_641D16E0
lea	eax, [ecx+eax]
mov	[dst_0+4], eax
jmp	loc_641D16E0
			
lea	edi, [ap_0+4]
mov	[ebp+ap], edi
mov	x, [eax]
test	esi, esi
jz	loc_641D16E0
xor	ap_0, ap_0
mov	tmp_len, 0FFFFFFFFh
mov	edi, esi
repne scasb
not	ecx
dec	ecx		
mov	[ebp+var_2C], ecx
jz	loc_641D16E0
mov	edx, dst_0	
mov	eax, [ebp+stack] 
call	_silc_buffer_senlarge
test	al, al
jz	fail		
mov	eax, [ebp+var_2C]
add	[ebp+flen], eax
mov	eax, [dst_0+4]
mov	edx, [dst_0+8]
sub	edx, eax
cmp	[ebp+var_2C], edx
ja	loc_641D16E0
mov	edi, eax
mov	ecx, [ebp+var_2C]
rep movsb
mov	edx, [dst_0+4]
mov	eax, [dst_0+8]
sub	eax, edx
cmp	[ebp+var_2C], eax
ja	loc_641D16E0
add	edx, [ebp+var_2C]
mov	[dst_0+4], edx
jmp	loc_641D16E0
align 4
			
lea	x, [ap_0+8]	
mov	[ebp+ap], esi
mov	edx, [eax]
mov	[ebp+var_34], edx
mov	eax, [eax+4]
mov	[ebp+old_size],	eax
mov	eax, [dst_0+8]
mov	edx, [dst_0+4]
mov	tmp_len, eax
sub	ecx, edx
mov	[ebp+var_2C], ecx
cmp	ecx, 7
ja	short loc_641D19B0
mov	ecx, [dst_0+0Ch]
mov	esi, ecx
sub	esi, eax
mov	edi, [ebp+var_2C]
add	edi, esi
cmp	edi, 7
ja	short loc_641D199F
mov	edi, [dst_0]
mov	[ebp+size], edi
mov	edi, ecx
sub	edi, [ebp+size]
mov	[ebp+ptr], edi
mov	edi, 8
sub	edi, esi
sub	edi, [ebp+var_2C]
add	edi, [ebp+ptr]
mov	[ebp+var_48], edi
mov	esi, [ebp+stack]
test	esi, esi
jz	loc_641D2182
mov	esi, [ebp+var_48]
cmp	[ebp+ptr], esi
jb	loc_641D2033
			
mov	esi, eax
sub	esi, edx
mov	[ebp+var_2C], esi
mov	esi, ecx
sub	esi, eax
mov	ecx, 8
sub	ecx, [ebp+var_2C]
cmp	ecx, esi
ja	short loc_641D19B0
add	eax, ecx
mov	[dst_0+8], eax
			
add	[ebp+flen], 8
mov	ecx, [ebp+old_size]
shr	ecx, 18h
mov	[ebp+xf], cl
mov	ecx, [ebp+old_size]
shr	ecx, 10h
mov	[ebp+xf+1], cl
mov	ecx, [ebp+old_size]
shr	ecx, 8
mov	[ebp+xf+2], cl
mov	cl, byte ptr [ebp+old_size]
mov	[ebp+xf+3], cl
mov	ecx, [ebp+var_34]
shr	ecx, 18h
mov	byte ptr [ebp+var_1D], cl
mov	ecx, [ebp+var_34]
shr	ecx, 10h
mov	byte ptr [ebp+var_1D+1], cl
mov	ecx, [ebp+var_34]
shr	ecx, 8
mov	byte ptr [ebp+var_1D+2], cl
mov	cl, byte ptr [ebp+var_34]
mov	byte ptr [ebp+var_1D+3], cl
sub	eax, edx
cmp	eax, 7
jbe	loc_641D16E0
mov	eax, dword ptr [ebp+xf]
mov	[edx], eax
mov	eax, [ebp+var_1D]
mov	[edx+4], eax
jmp	short loc_641D1A8C
align 10h
			
lea	edx, [ap_0+8]	
mov	[ebp+ap], edx
mov	edi, [eax]
mov	x, [eax+4]
mov	tmp_len, 8	
mov	edx, dst_0	
mov	eax, [ebp+stack] 
call	_silc_buffer_senlarge
test	al, al
jz	fail		
add	[ebp+flen], 8
mov	eax, esi
shr	eax, 18h
mov	[ebp+xf], al
mov	eax, esi
shr	eax, 10h
mov	[ebp+xf+1], al
mov	eax, esi
shr	eax, 8
mov	[ebp+xf+2], al
mov	ecx, esi
mov	[ebp+xf+3], cl
mov	eax, edi
shr	eax, 18h
mov	byte ptr [ebp+var_1D], al
mov	eax, edi
shr	eax, 10h
mov	byte ptr [ebp+var_1D+1], al
mov	eax, edi
shr	eax, 8
mov	byte ptr [ebp+var_1D+2], al
mov	eax, edi
mov	byte ptr [ebp+var_1D+3], al
mov	eax, [dst_0+4]
mov	edx, [dst_0+8]
sub	edx, eax
cmp	edx, 7
jbe	loc_641D16E0
mov	edx, dword ptr [ebp+xf]
mov	[eax], edx
mov	edx, [ebp+var_1D]
mov	[eax+4], edx
mov	edx, [dst_0+4]
mov	eax, [dst_0+8]
sub	eax, edx
cmp	eax, 7
jbe	loc_641D16E0
add	edx, 8
mov	[dst_0+4], edx
jmp	loc_641D16E0
			
lea	edx, [ap_0+4]
mov	[ebp+ap], edx
mov	eax, [eax]
mov	[ebp+var_34], eax
mov	eax, [dst_0+8]
mov	edx, [dst_0+4]
mov	tmp_len, eax
sub	ecx, edx
mov	[ebp+var_2C], ecx
cmp	ecx, 1
ja	short loc_641D1B2B
mov	ecx, [dst_0+0Ch]
mov	x, ecx
sub	esi, eax
mov	[ebp+ptr], esi
add	esi, [ebp+var_2C]
cmp	esi, 1
ja	short loc_641D1B19
mov	edi, [dst_0]
mov	[ebp+old_size],	edi
mov	edi, ecx
sub	edi, [ebp+old_size]
mov	esi, 2
sub	esi, [ebp+ptr]
mov	[ebp+ptr], esi
mov	esi, [ebp+var_2C]
sub	[ebp+ptr], esi
mov	esi, [ebp+ptr]
add	esi, edi
mov	[ebp+ptr], esi
cmp	[ebp+stack], 0
jz	loc_641D2154
cmp	edi, [ebp+ptr]
jb	loc_641D1FA2
			
mov	esi, eax
sub	esi, edx
mov	[ebp+var_2C], esi
sub	ecx, eax
mov	[ebp+ptr], ecx
mov	ecx, 2
sub	ecx, [ebp+var_2C]
cmp	[ebp+ptr], ecx
jb	short loc_641D1B2B
add	eax, ecx
mov	[dst_0+8], eax
			
mov	edi, [ebp+var_34]
add	[ebp+flen], 2
mov	x, edi
sar	si, 8
mov	ecx, esi
mov	[ebp+xf], cl
mov	ecx, x
mov	[ebp+xf+1], cl
sub	eax, edx
cmp	eax, 1
jbe	loc_641D16E0
mov	ax, word ptr [ebp+xf]
mov	[edx], ax
mov	edx, [dst_0+4]
mov	eax, [dst_0+8]
sub	eax, edx
cmp	eax, 1
jbe	loc_641D16E0
add	edx, 2
mov	[dst_0+4], edx
jmp	loc_641D16E0
			
lea	x, [ap_0+4]
mov	[ebp+ap], esi
mov	eax, [eax]
mov	[ebp+var_2C], eax
mov	eax, [dst_0+8]
mov	[ebp+old_size],	eax
mov	edx, [dst_0+4]
mov	esi, edx
cmp	eax, edx
jnz	loc_641D1EB0
mov	tmp_len, [dst_0+0Ch]
cmp	ecx, eax
jz	loc_641D1E3C
mov	esi, eax
mov	edi, eax
sub	edi, esi
mov	[ebp+var_34], edi
mov	edi, 1
sub	edi, [ebp+var_34]
mov	[ebp+var_34], edi
sub	ecx, eax
cmp	edi, ecx
ja	short loc_641D1BBD
add	eax, edi
mov	[ebp+old_size],	eax
mov	[dst_0+8], eax
mov	esi, edx
inc	[ebp+flen]
cmp	esi, [ebp+old_size]
jz	loc_641D16E0
lea	esi, [esi+0]
mov	al, byte ptr [ebp+var_2C]
mov	[esi], al
mov	eax, [dst_0+4]
cmp	[dst_0+8], eax
jz	loc_641D16E0
			
inc	eax
mov	[dst_0+4], eax
jmp	loc_641D16E0
align 4
			
lea	x, [ap_0+4]	
mov	[ebp+ap], esi
mov	esi, [eax]
mov	tmp_len, 4	
mov	edx, dst_0	
mov	eax, [ebp+stack] 
call	_silc_buffer_senlarge
test	al, al
jz	fail		
add	[ebp+flen], 4
mov	eax, x
sar	eax, 18h
mov	[ebp+xf], al
mov	eax, x
sar	eax, 10h
mov	[ebp+xf+1], al
mov	eax, x
sar	eax, 8
mov	[ebp+xf+2], al
mov	eax, x
mov	[ebp+xf+3], al
mov	edx, [dst_0+4]
mov	eax, [dst_0+8]
sub	eax, edx
cmp	eax, 3
jbe	loc_641D16E0
mov	eax, dword ptr [ebp+xf]
mov	[edx], eax
mov	edx, [dst_0+4]
mov	eax, [dst_0+8]
sub	eax, edx
cmp	eax, 3
jbe	loc_641D16E0
add	edx, 4
mov	[dst_0+4], edx
jmp	loc_641D16E0
align 4
			
lea	edx, [ap_0+4]	
mov	[ebp+ap], edx
mov	eax, [eax]
mov	[ebp+var_34], eax
mov	eax, [dst_0+8]
mov	edx, [dst_0+4]
mov	tmp_len, eax
sub	ecx, edx
mov	[ebp+var_2C], ecx
cmp	ecx, 1
ja	short loc_641D1CDF
mov	ecx, [dst_0+0Ch]
mov	x, ecx
sub	esi, eax
mov	[ebp+ptr], esi
add	esi, [ebp+var_2C]
cmp	esi, 1
ja	short loc_641D1CCD
mov	edi, [dst_0]
mov	[ebp+old_size],	edi
mov	edi, ecx
sub	edi, [ebp+old_size]
mov	esi, 2
sub	esi, [ebp+ptr]
mov	[ebp+ptr], esi
mov	esi, [ebp+var_2C]
sub	[ebp+ptr], esi
mov	esi, [ebp+ptr]
add	esi, edi
mov	[ebp+ptr], esi
cmp	[ebp+stack], 0
jz	loc_641D2201
cmp	edi, [ebp+ptr]
jb	loc_641D2082
			
mov	esi, eax
sub	esi, edx
mov	[ebp+var_2C], esi
sub	ecx, eax
mov	[ebp+ptr], ecx
mov	ecx, 2
sub	ecx, [ebp+var_2C]
cmp	ecx, [ebp+ptr]
ja	short loc_641D1CDF
add	eax, ecx
mov	[dst_0+8], eax
			
mov	edi, [ebp+var_34]
add	[ebp+flen], 2
mov	x, edi
shr	si, 8
jmp	loc_641D1B38
align 4
			
lea	x, [ap_0+4]	
mov	[ebp+ap], esi
mov	eax, [eax]
mov	[ebp+var_34], eax
mov	eax, [dst_0+8]
mov	edx, [dst_0+4]
mov	edi, eax
sub	edi, edx
mov	[ebp+var_2C], edi
cmp	edi, 3
ja	short loc_641D1D6F
mov	tmp_len, [dst_0+0Ch]
mov	esi, ecx
sub	esi, eax
add	edi, esi
cmp	edi, 3
ja	short loc_641D1D5E
mov	edi, [dst_0]
mov	[ebp+ptr], edi
mov	edi, ecx
sub	edi, [ebp+ptr]
mov	[ebp+old_size],	edi
mov	edi, 4
sub	edi, esi
sub	edi, [ebp+var_2C]
add	edi, [ebp+old_size]
mov	[ebp+size], edi
mov	esi, [ebp+stack]
test	esi, esi
jz	loc_641D20D3
mov	edi, [ebp+size]
cmp	[ebp+old_size],	edi
jb	loc_641D1F11
			
mov	esi, eax
sub	esi, edx
mov	[ebp+var_2C], esi
mov	esi, ecx
sub	esi, eax
mov	ecx, 4
sub	ecx, [ebp+var_2C]
cmp	esi, ecx
jb	short loc_641D1D6F
add	eax, ecx
mov	[dst_0+8], eax
			
add	[ebp+flen], 4
mov	tmp_len, [ebp+var_34]
shr	ecx, 18h
mov	[ebp+xf], cl
mov	ecx, [ebp+var_34]
shr	ecx, 10h
mov	[ebp+xf+1], cl
mov	ecx, [ebp+var_34]
shr	ecx, 8
mov	[ebp+xf+2], cl
mov	cl, byte ptr [ebp+var_34]
mov	[ebp+xf+3], cl
sub	eax, edx
cmp	eax, 3
ja	loc_641D1C39
jmp	loc_641D16E0
			
lea	x, [ap_0+4]
mov	[ebp+ap], esi
mov	eax, [eax]
mov	[ebp+var_19], al
mov	eax, [dst_0+8]
mov	[ebp+var_34], eax
mov	edx, [dst_0+4]
mov	esi, edx
cmp	eax, edx
jnz	loc_641D1EB8
mov	tmp_len, [dst_0+0Ch]
cmp	ecx, eax
jz	loc_641D1E6C
mov	esi, eax
mov	edi, eax
sub	edi, esi
mov	[ebp+var_2C], edi
mov	edi, 1
sub	edi, [ebp+var_2C]
mov	[ebp+var_2C], edi
sub	ecx, eax
cmp	edi, ecx
ja	short loc_641D1DF1
add	eax, edi
mov	[ebp+var_34], eax
mov	[dst_0+8], eax
mov	esi, edx
inc	[ebp+flen]
cmp	[ebp+var_34], esi
jz	loc_641D16E0
mov	al, [ebp+var_19]
mov	[esi], al
mov	eax, [dst_0+4]
cmp	[dst_0+8], eax
jnz	loc_641D1BDD
jmp	loc_641D16E0
align 4
			
cmp	[ebp+advance], 0 
jnz	loc_641D16FD
mov	ap_0, [ebp+flen]
neg	eax
add	eax, [dst_0+4]
cmp	eax, [dst_0]
jb	loc_641D16FD
mov	[dst_0+4], eax
mov	eax, [ebp+flen]
add	esp, 5Ch
pop	dst_0
pop	x
pop	edi
leave
retn
mov	esi, [dst_0]
mov	edi, ecx
sub	edi, esi
mov	[ebp+var_34], edi
inc	edi
mov	[ebp+old_size],	edi
cmp	[ebp+stack], 0
jz	loc_641D21C9
mov	edi, [ebp+old_size]
cmp	[ebp+var_34], edi
jb	loc_641D1FF3
			
mov	[ebp+old_size],	eax
mov	esi, edx
jmp	loc_641D1B9B
align 4
mov	esi, [dst_0]
mov	edi, ecx
sub	edi, esi
mov	[ebp+var_2C], edi
inc	edi
mov	[ebp+var_34], edi
cmp	[ebp+stack], 0
jz	loc_641D211C
mov	edi, [ebp+var_34]
cmp	[ebp+var_2C], edi
jb	loc_641D1F62
			
mov	[ebp+var_34], eax
mov	esi, edx
jmp	loc_641D1DCF
mov	edx, [dst_0+4]
add	edx, offst
cmp	edx, [dst_0]
jb	short loc_641D1EA5
mov	[dst_0+4], edx
sub	[ebp+flen], offst
jmp	loc_641D16E0
align 10h
inc	[ebp+flen]
jmp	loc_641D1BCC
inc	[ebp+flen]
mov	al, [ebp+var_19]
mov	[esi], al
mov	eax, [dst_0+4]
cmp	[dst_0+8], eax
jnz	loc_641D1BDD
jmp	loc_641D16E0
align 4
lea	edx, [ap_0+0Ch]
mov	[ebp+ap], edx
mov	edx, [eax+8]
mov	[esp+8], edx
mov	edx, [eax+4]
mov	[esp+4], edx
mov	[esp], dst_0
call	dword ptr [eax]
jmp	loc_641D173F
mov	offst, [ebp+flen]
neg	eax
add	eax, [dst_0+4]
cmp	eax, [dst_0]
jb	loc_641D16F6
mov	[dst_0+4], eax
mov	[ebp+flen], 0FFFFFFFFh
jmp	loc_641D16FD
mov	[esp+0Ch], edi	
mov	eax, [ebp+ptr]
mov	[esp+8], eax	
mov	ecx, [ebp+old_size]
mov	[esp+4], ecx	
mov	esi, [ebp+stack]
mov	[esp], esi	
mov	[ebp+var_4C], edx
call	_silc_srealloc
test	eax, eax
mov	edx, [ebp+var_4C]
jz	loc_641D22FB
mov	[dst_0], eax
sub	edx, [ebp+ptr]
lea	edx, [eax+edx]
mov	[dst_0+4], edx
mov	edi, [ebp+var_2C]
lea	ecx, [edx+edi]
mov	[dst_0+8], ecx
mov	edi, [ebp+size]
lea	esi, [eax+edi]
mov	[dst_0+0Ch], esi
mov	eax, ecx
mov	ecx, esi
jmp	loc_641D1D53
mov	[esp+0Ch], edi	
mov	[esp+8], esi	
mov	eax, [ebp+var_2C]
mov	[esp+4], eax	
mov	edx, [ebp+stack]
mov	[esp], edx	
call	_silc_srealloc
test	eax, eax
jz	loc_641D2283
mov	[dst_0], eax
mov	esi, [ebp+var_2C]
lea	edx, [eax+esi]
mov	[dst_0+4], edx
mov	[dst_0+8], edx
mov	edi, [ebp+var_34]
lea	ecx, [eax+edi]
mov	[dst_0+0Ch], ecx
mov	eax, edx
jmp	loc_641D1E8F
mov	eax, [ebp+ptr]
mov	[esp+0Ch], eax	
mov	ecx, [ebp+old_size]
mov	[esp+8], ecx	
mov	[esp+4], edi	
mov	esi, [ebp+stack]
mov	[esp], esi	
mov	[ebp+var_4C], edx
call	_silc_srealloc
test	eax, eax
mov	edx, [ebp+var_4C]
jz	loc_641D222F
mov	[dst_0], eax
sub	edx, [ebp+old_size]
lea	edx, [eax+edx]
mov	[dst_0+4], edx
mov	esi, [ebp+var_2C]
lea	ecx, [edx+esi]
mov	[dst_0+8], ecx
mov	edi, [ebp+ptr]
lea	esi, [eax+edi]
mov	[dst_0+0Ch], esi
mov	eax, ecx
mov	ecx, esi
jmp	loc_641D1B0D
mov	[esp+0Ch], edi	
mov	[esp+8], esi	
mov	eax, [ebp+var_34]
mov	[esp+4], eax	
mov	edx, [ebp+stack]
mov	[esp], edx	
call	_silc_srealloc
test	eax, eax
jz	loc_641D22AA
mov	[dst_0], eax
mov	esi, [ebp+var_34]
lea	edx, [eax+esi]
mov	[dst_0+4], edx
mov	[dst_0+8], edx
mov	edi, [ebp+old_size]
lea	ecx, [eax+edi]
mov	[dst_0+0Ch], ecx
mov	eax, edx
jmp	loc_641D1E5F
mov	[esp+0Ch], esi	
mov	edi, [ebp+size]
mov	[esp+8], edi	
mov	eax, [ebp+ptr]
mov	[esp+4], eax	
mov	ecx, [ebp+stack]
mov	[esp], ecx	
mov	[ebp+var_4C], edx
call	_silc_srealloc
test	eax, eax
mov	edx, [ebp+var_4C]
jz	loc_641D2259
mov	[dst_0], eax
sub	edx, [ebp+size]
lea	edx, [eax+edx]
mov	[dst_0+4], edx
mov	edi, [ebp+var_2C]
lea	esi, [edx+edi]
mov	[dst_0+8], esi
mov	edi, [ebp+var_48]
lea	ecx, [eax+edi]
mov	[dst_0+0Ch], ecx
mov	eax, esi
jmp	loc_641D1994
mov	eax, [ebp+ptr]
mov	[esp+0Ch], eax	
mov	ecx, [ebp+old_size]
mov	[esp+8], ecx	
mov	[esp+4], edi	
mov	esi, [ebp+stack]
mov	[esp], esi	
mov	[ebp+var_4C], edx
call	_silc_srealloc
test	eax, eax
mov	edx, [ebp+var_4C]
jz	loc_641D22D1
mov	[dst_0], eax
sub	edx, [ebp+old_size]
lea	edx, [eax+edx]
mov	[dst_0+4], edx
mov	esi, [ebp+var_2C]
lea	ecx, [edx+esi]
mov	[dst_0+8], ecx
mov	edi, [ebp+ptr]
lea	esi, [eax+edi]
mov	[dst_0+0Ch], esi
mov	eax, ecx
mov	ecx, esi
jmp	loc_641D1CC1
cmp	[ebp+old_size],	edi
jnb	loc_641D1D53
mov	[esp+4], edi	
mov	eax, [ebp+ptr]
mov	[esp], eax	
mov	[ebp+var_4C], edx
call	_silc_realloc
test	eax, eax
mov	edx, [ebp+var_4C]
jz	fail		
mov	[dst_0], eax
sub	edx, [ebp+ptr]
lea	edx, [eax+edx]
mov	[dst_0+4], edx
mov	esi, [ebp+var_2C]
lea	ecx, [edx+esi]
mov	[dst_0+8], ecx
lea	esi, [eax+edi]
mov	[dst_0+0Ch], esi
mov	eax, ecx
mov	ecx, esi
jmp	loc_641D1D53
cmp	[ebp+var_2C], edi
jnb	loc_641D1E8F
mov	[esp+4], edi	
mov	[esp], esi	
call	_silc_realloc
test	eax, eax
jz	fail		
mov	[dst_0], eax
mov	ecx, [ebp+var_2C]
lea	edx, [eax+ecx]
mov	[dst_0+4], edx
mov	[dst_0+8], edx
lea	ecx, [eax+edi]
mov	[dst_0+0Ch], ecx
mov	eax, edx
jmp	loc_641D1E8F
cmp	edi, esi
jnb	loc_641D1B0D
mov	[esp+4], esi	
mov	edi, [ebp+old_size]
mov	[esp], edi	
mov	[ebp+var_4C], edx
call	_silc_realloc
test	eax, eax
mov	edx, [ebp+var_4C]
jz	fail		
mov	[dst_0], eax
sub	edx, edi
jmp	loc_641D1FD2
cmp	[ebp+ptr], edi
jnb	loc_641D1994
mov	[esp+4], edi	
mov	eax, [ebp+size]
mov	[esp], eax	
mov	[ebp+var_4C], edx
call	_silc_realloc
test	eax, eax
mov	edx, [ebp+var_4C]
jz	fail		
mov	[dst_0], eax
sub	edx, [ebp+size]
lea	edx, [eax+edx]
mov	[dst_0+4], edx
mov	ecx, [ebp+var_2C]
lea	esi, [edx+ecx]
mov	[dst_0+8], esi
lea	ecx, [eax+edi]
mov	[dst_0+0Ch], ecx
mov	eax, esi
jmp	loc_641D1994
cmp	[ebp+var_34], edi
jnb	loc_641D1E5F
mov	[esp+4], edi	
mov	[esp], esi	
call	_silc_realloc
test	eax, eax
jz	fail		
mov	[dst_0], eax
mov	ecx, [ebp+var_34]
lea	edx, [eax+ecx]
mov	[dst_0+4], edx
mov	[dst_0+8], edx
lea	ecx, [eax+edi]
mov	[dst_0+0Ch], ecx
mov	eax, edx
jmp	loc_641D1E5F
cmp	edi, esi
jnb	loc_641D1CC1
mov	[esp+4], esi	
mov	edi, [ebp+old_size]
mov	[esp], edi	
mov	[ebp+var_4C], edx
call	_silc_realloc
test	eax, eax
mov	edx, [ebp+var_4C]
jz	fail		
mov	[dst_0], eax
sub	edx, edi
jmp	loc_641D20B2
mov	edi, [ebp+ptr]
mov	[esp+4], edi	
mov	[esp], esi	
call	_silc_smalloc
test	eax, eax
mov	edx, [ebp+var_4C]
jz	fail		
mov	esi, [dst_0]
mov	ecx, [dst_0+0Ch]
sub	ecx, esi
mov	edi, eax
rep movsb
jmp	loc_641D1FCD
mov	[esp+4], esi	
mov	esi, [ebp+stack]
mov	[esp], esi	
call	_silc_smalloc
test	eax, eax
mov	edx, [ebp+var_4C]
jz	fail		
mov	esi, [dst_0]
mov	ecx, [dst_0+0Ch]
sub	ecx, esi
mov	edi, eax
rep movsb
jmp	loc_641D205E
mov	[esp+4], edi	
mov	ecx, [ebp+stack]
mov	[esp], ecx	
call	_silc_smalloc
test	eax, eax
jz	fail		
mov	esi, [dst_0]
mov	ecx, [dst_0+0Ch]
sub	ecx, esi
mov	edi, eax
rep movsb
jmp	loc_641D1F84
mov	[esp+4], edi	
mov	ecx, [ebp+stack]
mov	[esp], ecx	
call	_silc_smalloc
test	eax, eax
jz	fail		
mov	esi, [dst_0]
mov	ecx, [dst_0+0Ch]
sub	ecx, esi
mov	edi, eax
rep movsb
jmp	loc_641D2015
mov	edi, [ebp+ptr]
mov	[esp+4], edi	
mov	[esp], esi	
call	_silc_smalloc
test	eax, eax
mov	edx, [ebp+var_4C]
jz	fail		
mov	esi, [dst_0]
mov	ecx, [dst_0+0Ch]
sub	ecx, esi
mov	edi, eax
rep movsb
jmp	loc_641D20AD
mov	[esp+4], edi	
mov	[esp], esi	
call	_silc_smalloc
test	eax, eax
mov	edx, [ebp+var_4C]
jz	fail		
mov	esi, [dst_0]
mov	ecx, [dst_0+0Ch]
sub	ecx, esi
mov	edi, eax
rep movsb
jmp	loc_641D1F3C
align 4
public _silc_buffer_sformat
push	ebp
mov	ebp, esp
sub	esp, 18h
lea	ret, [ebp+ap]
mov	[esp+8], ret	
mov	ret, [ebp+dst]
mov	[esp+4], ret	
mov	ret, [ebp+stack]
mov	[esp], ret	
call	_silc_buffer_sformat_vp
leave
retn
align 4
public _silc_buffer_sunformat_vp
			
push	ebp
mov	ebp, esp
push	edi
push	esi
push	ebx
sub	esp, 5Ch
mov	ebx, [ebp+src]
mov	edx, [ebp+ap]
mov	eax, [ebx+4]
mov	[ebp+start_ptr], eax
mov	[ebp+advance], 0
lea	x, [x+0]
			
mov	x, ap_0
add	ap_0, 4
cmp	dword ptr [ap_0-4], 1Dh	
jbe	short loc_641D2388
			
mov	offst, [ebp+start_ptr]
cmp	eax, [src_0]
jb	short loc_641D2379
mov	[src_0+4], eax
mov	eax, 0FFFFFFFFh
add	esp, 5Ch
pop	src_0
pop	x
pop	edi
leave
retn
align 4
mov	offst, [ap_0-4]
jmp	ds:off_64263A6C[eax*4] 
align 4
			
lea	edx, [ap_0+4]	
mov	esi, [esi]
mov	[ebp+len3], esi
mov	ecx, [src_0+4]
mov	eax, [src_0+8]
sub	eax, ecx
cmp	eax, 7
jbe	short fail	
test	esi, esi
jz	short loc_641D2416
movzx	eax, byte ptr [ecx+4]
mov	[ebp+len3_0], eax
mov	[ebp+var_1C], 0
mov	esi, [ebp+len3_0]
mov	edi, [ebp+var_1C]
shld	edi, esi, 18h
shl	esi, 18h
mov	[ebp+len3_0], esi
mov	[ebp+var_1C], edi
movzx	esi, byte ptr [ecx+7]
or	esi, [ebp+len3_0]
mov	[ebp+len3_0], edi
movzx	eax, byte ptr [ecx+5]
shl	eax, 10h
or	esi, eax
movzx	eax, byte ptr [ecx+6]
shl	eax, 8
or	esi, eax
movzx	edi, byte ptr [ecx+3]
movzx	eax, byte ptr [ecx]
shl	eax, 18h
or	eax, edi
movzx	edi, byte ptr [ecx+1]
shl	edi, 10h
or	eax, edi
movzx	edi, byte ptr [ecx+2]
shl	edi, 8
or	eax, edi
mov	edi, [ebp+len3]
mov	[edi], esi
or	[ebp+len3_0], eax
mov	eax, [ebp+len3_0]
mov	[edi+4], eax
add	ecx, 8
mov	[src_0+4], ecx
jmp	loc_641D2364
align 4
			
lea	edx, [ap_0+4]	
mov	edi, [esi]
mov	ecx, [src_0+4]
mov	eax, [src_0+8]
sub	eax, ecx
cmp	eax, 3
jbe	fail		
test	edi, edi
jz	short loc_641D245E
movzx	eax, byte ptr [ecx+3]
movzx	ap_0, byte ptr [ecx]
shl	esi, 18h
or	eax, esi
movzx	esi, byte ptr [ecx+1]
shl	esi, 10h
or	eax, esi
movzx	esi, byte ptr [ecx+2]
shl	esi, 8
or	eax, esi
mov	[edi], eax
add	ecx, 4
mov	[src_0+4], ecx
jmp	loc_641D2364
align 4
			
lea	edx, [ap_0+4]	
mov	edi, [esi]
mov	ecx, [src_0+4]
mov	eax, [src_0+8]
sub	eax, ecx
cmp	eax, 1
jbe	fail		
test	edi, edi
jz	short loc_641D2495
movzx	eax, byte ptr [ecx+1]
movzx	ap_0, byte ptr [ecx]
shl	esi, 8
or	eax, esi
mov	[edi], ax
add	ecx, 2
mov	[src_0+4], ecx
jmp	loc_641D2364
			
lea	edx, [ap_0+4]
mov	esi, [esi]
mov	ecx, [src_0+8]
mov	eax, [src_0+4]
cmp	ecx, eax
jz	fail		
test	esi, esi
jz	short loc_641D24C7
mov	al, [eax]
mov	[esi], al
mov	eax, [src_0+4]
cmp	[src_0+8], eax
jz	loc_641D2364
inc	eax
mov	[src_0+4], eax
jmp	loc_641D2364
			
			
mov	ecx, [src_0+4]
mov	edi, [src_0+8]
mov	tmp_len, [ap_0]
lea	edx, [ap_0+8]
mov	esi, [esi+4]
sub	edi, ecx
cmp	len2, edi
ja	fail		
cmp	len2, 0FFFFFFFFh
jz	fail		
test	len2, len2
jz	short loc_641D250B
test	eax, eax
jz	short loc_641D250B
mov	[eax], ecx
mov	ecx, [src_0+4]
mov	eax, [src_0+8]
sub	eax, ecx
cmp	len2, eax
ja	loc_641D2364
			
add	ecx, len2
mov	[src_0+4], ecx
jmp	loc_641D2364
align 4
			
lea	edx, [ap_0+4]	
mov	esi, [esi]
mov	[ebp+len3_0], esi
mov	ecx, [src_0+4]
mov	edi, [src_0+8]
mov	eax, edi
sub	eax, ecx
cmp	eax, 3
jbe	fail		
movzx	esi, byte ptr [ecx+3]
movzx	eax, byte ptr [ecx]
shl	eax, 18h
or	len2, eax
movzx	eax, byte ptr [ecx+1]
shl	eax, 10h
or	len2, eax
movzx	eax, byte ptr [ecx+2]
shl	eax, 8
or	len2, eax
add	ecx, 4
mov	[src_0+4], ecx
sub	edi, ecx
cmp	len2, edi
ja	fail		
cmp	len2, 0FFFFFFFFh
jz	fail		
mov	dword ptr [esp+14h], 1Dh
mov	[esp+10h], len2
mov	[esp+0Ch], ecx
mov	dword ptr [esp+8], 0Ch
mov	ecx, [ebp+len3_0]
mov	[esp+4], ecx	
mov	edi, [ebp+stack]
mov	[esp], edi	
mov	[ebp+var_34], ap_0
call	_silc_buffer_sformat
test	eax, eax
mov	edx, [ebp+var_34]
jns	loc_641D24FB
jmp	fail		
align 4
			
mov	edi, [ap_0]	
lea	edx, [ap_0+8]
mov	esi, [esi+4]
mov	[ebp+len3_0], esi
mov	ecx, [src_0+4]
mov	eax, [src_0+8]
sub	eax, ecx
cmp	esi, eax
ja	fail		
cmp	esi, 0FFFFFFFFh
jz	fail		
test	esi, esi
jz	short loc_641D2615
test	edi, edi
jz	short loc_641D2615
mov	dword ptr [esp+8], 1 
mov	eax, esi
inc	eax
mov	[esp+4], eax	
mov	ecx, [ebp+stack]
mov	[esp], ecx	
mov	[ebp+var_34], ap_0
call	_silc_scalloc
mov	[edi], eax
test	eax, eax
mov	edx, [ebp+var_34]
jz	short loc_641D2604
			
mov	x, [src_0+4]
mov	edi, eax
mov	ecx, [ebp+len3_0]
rep movsb
			
mov	ecx, [src_0+4]
			
mov	len2, [src_0+8]
sub	eax, ecx
cmp	[ebp+len3_0], eax
ja	loc_641D2364
			
add	ecx, [ebp+len3_0]
mov	[src_0+4], ecx
jmp	loc_641D2364
			
mov	edi, [ap_0]
mov	[ebp+x_1], edi
lea	edx, [ap_0+8]
mov	esi, [esi+4]
mov	[ebp+len3], esi
mov	ecx, [src_0+4]
mov	edi, [src_0+8]
mov	eax, edi
sub	eax, ecx
cmp	eax, 1
jbe	fail		
movzx	eax, byte ptr [ecx+1]
movzx	esi, byte ptr [ecx]
shl	esi, 8
or	len2, esi
add	ecx, 2
mov	[src_0+4], ecx
movzx	esi, ax
mov	[ebp+len3_0], esi
mov	esi, edi
sub	esi, ecx
cmp	[ebp+len3_0], esi
ja	fail		
mov	esi, [ebp+len3]
test	esi, esi
jz	short loc_641D2673
mov	ecx, [ebp+len3]
mov	[ecx], ax
mov	ecx, [ebp+x_1]
test	ecx, ecx
jz	short loc_641D2683
test	ax, ax
jnz	loc_641D2C60
			
mov	len2, [src_0+4]
sub	edi, eax
cmp	[ebp+len3_0], edi
ja	loc_641D2364
add	eax, [ebp+len3_0]
mov	[src_0+4], eax
jmp	loc_641D2364
			
mov	eax, [ap_0]
mov	[ebp+len3], eax
lea	edx, [ap_0+8]
mov	esi, [esi+4]
mov	[ebp+x_1], esi
mov	edi, [src_0+8]
mov	ecx, [src_0+4]
cmp	edi, ecx
jz	fail		
mov	al, [ecx]
inc	ecx
mov	[src_0+4], ecx
movzx	esi, al
mov	[ebp+len3_0], esi
sub	edi, ecx
cmp	esi, edi
ja	fail		
mov	ecx, [ebp+x_1]
test	ecx, ecx
jz	short loc_641D26DA
mov	edi, [ebp+x_1]
mov	[edi], al
mov	edi, [ebp+len3]
test	edi, edi
jz	loc_641D2604
test	al, al
jz	loc_641D2604
mov	dword ptr [esp+8], 1 
movzx	len2, al
inc	len2
mov	[esp+4], eax	
mov	eax, [ebp+stack]
mov	[esp], eax	
mov	[ebp+var_34], ap_0
call	_silc_scalloc
mov	ecx, [ebp+len3]
mov	[ecx], eax
test	eax, eax
mov	edx, [ebp+var_34]
jnz	loc_641D25FA
jmp	loc_641D2604
			
lea	edx, [ap_0+4]
mov	esi, [esi]
mov	ecx, [src_0+4]
mov	edi, [src_0+8]
mov	eax, edi
sub	eax, ecx
cmp	eax, 3
jbe	fail		
movzx	eax, byte ptr [ecx+3]
mov	[ebp+len3_0], eax
movzx	eax, byte ptr [ecx]
shl	eax, 18h
or	[ebp+len3_0], eax
movzx	eax, byte ptr [ecx+1]
shl	eax, 10h
or	[ebp+len3_0], eax
movzx	eax, byte ptr [ecx+2]
shl	eax, 8
or	[ebp+len3_0], eax
add	ecx, 4
mov	[src_0+4], ecx
sub	edi, ecx
cmp	[ebp+len3_0], edi
ja	fail		
cmp	[ebp+len3_0], 0FFFFFFFFh
jz	fail		
test	x, x
jz	loc_641D2615
mov	eax, [ebp+len3_0]
test	eax, eax
jz	loc_641D2615
mov	dword ptr [esp+8], 1 
mov	eax, [ebp+len3_0]
inc	eax
mov	[esp+4], eax	
mov	ecx, [ebp+stack]
mov	[esp], ecx	
mov	[ebp+var_34], ap_0
call	_silc_scalloc
mov	[x], eax
test	eax, eax
mov	edx, [ebp+var_34]
jz	short loc_641D27BB
mov	x, [src_0+4]
mov	edi, eax
mov	ecx, [ebp+len3_0]
rep movsb
			
mov	len2, [src_0+4]
mov	eax, [src_0+8]
sub	eax, ecx
cmp	[ebp+len3_0], eax
jbe	loc_641D2615
jmp	loc_641D2364
align 4
			
lea	edx, [ap_0+4]	
mov	esi, [esi]
mov	[ebp+len3], esi
mov	ecx, [src_0+4]
mov	edi, [src_0+8]
mov	eax, edi
sub	eax, ecx
cmp	eax, 1
jbe	fail		
movzx	eax, byte ptr [ecx+1]
movzx	esi, byte ptr [ecx]
shl	esi, 8
or	len2, esi
add	ecx, 2
mov	[src_0+4], ecx
movzx	esi, ax
mov	[ebp+len3_0], esi
sub	edi, ecx
cmp	esi, edi
ja	fail		
mov	edi, [ebp+len3]
test	edi, edi
jz	loc_641D2615
test	ax, ax
jz	loc_641D2615
mov	dword ptr [esp+8], 1 
mov	len2, esi
inc	eax
mov	[esp+4], eax	
mov	edi, [ebp+stack]
mov	[esp], edi	
mov	[ebp+var_34], ap_0
call	_silc_scalloc
mov	ecx, [ebp+len3]
mov	[ecx], eax
test	eax, eax
mov	edx, [ebp+var_34]
jnz	loc_641D27B1
jmp	loc_641D27BB
align 4
			
lea	edx, [ap_0+4]	
mov	esi, [esi]
mov	edi, [src_0+8]
mov	ecx, [src_0+4]
cmp	edi, ecx
jz	fail		
mov	al, [ecx]
mov	byte ptr [ebp+len3], al
inc	ecx
mov	[src_0+4], ecx
movzx	eax, al
mov	[ebp+len3_0], eax
sub	edi, ecx
cmp	eax, edi
ja	fail		
test	x, x
jz	loc_641D2615
cmp	byte ptr [ebp+len3], 0
jz	loc_641D2615
mov	dword ptr [esp+8], 1 
inc	eax
mov	[esp+4], eax	
mov	ecx, [ebp+stack]
mov	[esp], ecx	
mov	[ebp+var_34], ap_0
call	_silc_scalloc
mov	[x], eax
test	eax, eax
mov	edx, [ebp+var_34]
jnz	loc_641D25FA
jmp	loc_641D2604
align 4
			
mov	eax, [ap_0]	
mov	[ebp+len3], eax
lea	edx, [ap_0+8]
mov	esi, [esi+4]
mov	[ebp+len3_0], esi
mov	ecx, [src_0+4]
mov	edi, [src_0+8]
mov	eax, edi
sub	eax, ecx
cmp	eax, 3
jbe	fail		
movzx	eax, byte ptr [ecx+3]
movzx	esi, byte ptr [ecx]
shl	esi, 18h
or	len2, esi
movzx	esi, byte ptr [ecx+1]
shl	esi, 10h
or	len2, esi
movzx	esi, byte ptr [ecx+2]
shl	esi, 8
or	len2, esi
add	ecx, 4
mov	[src_0+4], ecx
mov	esi, edi
sub	esi, ecx
cmp	len2, esi
ja	fail		
cmp	len2, 0FFFFFFFFh
jz	fail		
mov	esi, [ebp+len3_0]
test	esi, esi
jz	short loc_641D292A
mov	esi, [ebp+len3_0]
mov	[esi], len2
mov	esi, [ebp+len3]
test	esi, esi
jz	short loc_641D2939
mov	edi, [ebp+len3]
mov	[edi], ecx
mov	edi, [src_0+8]
mov	esi, [src_0+4]
sub	edi, esi
cmp	len2, edi
ja	loc_641D2364
lea	len2, [esi+len2]
mov	[src_0+4], eax
jmp	loc_641D2364
align 4
			
mov	edi, [ap_0]	
mov	[ebp+len3], edi
lea	edx, [ap_0+8]
mov	esi, [esi+4]
mov	[ebp+len3_0], esi
mov	ecx, [src_0+4]
mov	edi, [src_0+8]
mov	eax, edi
sub	eax, ecx
cmp	eax, 1
jbe	fail		
movzx	eax, byte ptr [ecx+1]
movzx	esi, byte ptr [ecx]
shl	esi, 8
or	len2, esi
add	ecx, 2
mov	[src_0+4], ecx
movzx	esi, ax
mov	[ebp+var_3C], esi
mov	esi, edi
sub	esi, ecx
cmp	[ebp+var_3C], esi
ja	fail		
mov	esi, [ebp+len3_0]
test	esi, esi
jz	short loc_641D29A7
mov	esi, [ebp+len3_0]
mov	[esi], ax
mov	esi, [ebp+len3]
test	esi, esi
jz	short loc_641D29B6
mov	edi, [ebp+len3]
mov	[edi], ecx
mov	edi, [src_0+8]
mov	len2, [src_0+4]
sub	edi, eax
cmp	[ebp+var_3C], edi
ja	loc_641D2364
add	eax, [ebp+var_3C]
mov	[src_0+4], eax
jmp	loc_641D2364
align 10h
			
mov	edi, [ap_0]	
mov	[ebp+x_1], edi
lea	edx, [ap_0+8]
mov	esi, [esi+4]
mov	ecx, [src_0+8]
mov	edi, ecx
mov	ecx, [src_0+4]
cmp	edi, ecx
jz	fail		
mov	al, [ecx]
mov	byte ptr [ebp+len3], al
inc	ecx
mov	[src_0+4], ecx
movzx	eax, al
mov	[ebp+len3_0], eax
sub	edi, ecx
cmp	eax, edi
ja	fail		
test	esi, esi
jz	short loc_641D2A10
mov	cl, byte ptr [ebp+len3]
mov	[esi], cl
mov	ecx, [src_0+4]
mov	edi, [ebp+x_1]
test	edi, edi
jz	loc_641D2607
mov	esi, [ebp+x_1]
mov	[esi], ecx
mov	ecx, [src_0+4]
jmp	loc_641D2607
			
lea	edx, [ap_0+4]
mov	esi, [esi]
mov	ecx, [src_0+4]
mov	eax, [src_0+8]
mov	[ebp+len3_0], eax
sub	eax, ecx
cmp	eax, 3
jbe	fail		
movzx	eax, byte ptr [ecx+3]
movzx	edi, byte ptr [ecx]
shl	edi, 18h
or	len2, edi
movzx	edi, byte ptr [ecx+1]
shl	edi, 10h
or	len2, edi
movzx	edi, byte ptr [ecx+2]
shl	edi, 8
or	len2, edi
add	ecx, 4
mov	[src_0+4], ecx
mov	edi, [ebp+len3_0]
sub	edi, ecx
cmp	len2, edi
ja	fail		
cmp	len2, 0FFFFFFFFh
jz	fail		
mov	[x], ecx
mov	[x+4], ecx
add	ecx, len2
mov	[x+0Ch], ecx
mov	[x+8], ecx
mov	x, [src_0+4]
mov	ecx, [src_0+8]
sub	ecx, esi
cmp	len2, ecx
jbe	loc_641D2946
jmp	loc_641D2364
align 10h
			
lea	edx, [ap_0+4]	
mov	esi, [esi]
mov	[ebp+len3_0], esi
mov	ecx, [src_0+4]
mov	edi, [src_0+8]
mov	eax, edi
sub	eax, ecx
cmp	eax, 3
jbe	fail		
movzx	eax, byte ptr [ecx+3]
movzx	esi, byte ptr [ecx]
shl	esi, 18h
or	len2, esi
movzx	esi, byte ptr [ecx+1]
shl	esi, 10h
or	len2, esi
movzx	esi, byte ptr [ecx+2]
shl	esi, 8
or	len2, esi
add	ecx, 4
mov	[src_0+4], ecx
sub	edi, ecx
cmp	len2, edi
ja	fail		
cmp	len2, 0FFFFFFFFh
jz	fail		
mov	esi, [ebp+len3_0]
test	esi, esi
jz	short loc_641D2B0E
mov	esi, [ebp+len3_0]
mov	[x], ecx
mov	ecx, [src_0+4]
mov	esi, [src_0+8]
sub	esi, ecx
cmp	len2, esi
ja	loc_641D2364
			
lea	offst, [ecx+offst]
mov	[src_0+4], eax
jmp	loc_641D2364
align 4
			
lea	edx, [ap_0+4]	
mov	esi, [esi]
mov	[ebp+len3_0], esi
mov	ecx, [src_0+4]
mov	edi, [src_0+8]
mov	eax, edi
sub	eax, ecx
cmp	eax, 1
jbe	fail		
movzx	eax, byte ptr [ecx+1]
movzx	esi, byte ptr [ecx]
shl	esi, 8
or	len2, esi
add	ecx, 2
mov	[src_0+4], ecx
movzx	len2, ax
sub	edi, ecx
cmp	eax, edi
jbe	short loc_641D2AF2
jmp	fail		
align 4
			
lea	edx, [ap_0+4]	
mov	esi, [esi]
mov	ecx, [src_0+8]
mov	edi, ecx
mov	ecx, [src_0+4]
cmp	edi, ecx
jz	fail		
mov	al, [ecx]
inc	ecx
mov	[src_0+4], ecx
movzx	len2, al
sub	edi, ecx
cmp	eax, edi
ja	fail		
test	x, x
jnz	loc_641D2AFC
jmp	short loc_641D2B0E
align 4
			
lea	edx, [ap_0+4]	
mov	eax, [esi]
test	offst, offst
jz	loc_641D2364
cmp	offst, 1
jle	loc_641D2C4D
mov	ecx, [src_0+4]
mov	ap_0, [src_0+8]
sub	esi, ecx
cmp	offst, esi
jbe	loc_641D2B0E
jmp	fail		
align 4
			
mov	[ebp+advance], 1 
jmp	loc_641D2366
align 4
			
mov	edi, [ebp+stack] 
test	edi, edi
jz	loc_641D2C9C
lea	edx, [ap_0+4]
mov	eax, [esi]
lea	ecx, [esi+8]
add	esi, 0Ch
mov	ecx, [ecx]
mov	[esp+0Ch], ecx
mov	edx, [edx]
mov	[esp+8], edx
mov	[esp+4], src_0
mov	edx, [ebp+stack]
mov	[esp], edx
call	funcs
cmp	eax, 0
jl	fail		
jz	loc_641D24D0	
mov	ecx, [src_0+4]
mov	edi, [src_0+8]
mov	edx, edi
sub	edx, ecx
cmp	tmp_len, edx
ja	fail		
add	ecx, tmp_len
mov	[src_0+4], ecx
jmp	loc_641D24D6
align 10h
			
cmp	[ebp+advance], 0
jz	short loc_641D2C30
xor	eax, eax
add	esp, 5Ch
pop	src_0
pop	ap_0
pop	edi
leave
retn
mov	edx, [src_0+4]
mov	eax, edx
sub	len, [ebp+start_ptr]
sub	edx, len
cmp	edx, [src_0]
jb	loc_641D237E
mov	[src_0+4], edx
add	esp, 5Ch
pop	src_0
pop	ap_0
pop	edi
leave
retn
add	offst, [src_0+4]
cmp	eax, [src_0]
jb	loc_641D2364
mov	[src_0+4], eax
jmp	loc_641D2364
mov	dword ptr [esp+8], 1
mov	len2, [ebp+len3_0]
inc	eax
mov	[esp+4], eax	
mov	esi, [ebp+stack]
mov	[esp], esi	
mov	[ebp+var_34], ap_0
call	_silc_scalloc
mov	edi, [ebp+x_1]
mov	[edi], eax
test	eax, eax
mov	edx, [ebp+var_34]
jz	short loc_641D2C94
mov	esi, [src_0+4]
mov	edi, eax
mov	ecx, [ebp+len3_0]
rep movsb
mov	edi, [src_0+8]
jmp	loc_641D2683
lea	edx, [ap_0+4]
mov	eax, [esi]
lea	ecx, [esi+8]
add	esi, 0Ch
mov	ecx, [ecx]
mov	[esp+8], ecx
mov	edx, [edx]
mov	[esp+4], edx
mov	[esp], src_0
call	func
jmp	loc_641D2BF2
align 10h
public _silc_buffer_sunformat
push	ebp
mov	ebp, esp
sub	esp, 18h
lea	ret, [ebp+ap]
mov	[esp+8], ret	
mov	ret, [ebp+src]
mov	[esp+4], ret	
mov	ret, [ebp+stack]
mov	[esp], ret	
call	_silc_buffer_sunformat_vp
leave
retn
align 4
public _silc_buffer_unformat_vp
push	ebp
mov	ebp, esp
sub	esp, 18h
mov	eax, [ebp+ap]
mov	[esp+8], eax	
mov	eax, [ebp+src]
mov	[esp+4], eax	
mov	dword ptr [esp], 0 
call	_silc_buffer_sunformat_vp
leave
retn
align 4
public _silc_buffer_unformat
			
push	ebp
mov	ebp, esp
sub	esp, 18h
lea	ret, [ebp+ap]
mov	[esp+8], ret	
mov	ret, [ebp+src]
mov	[esp+4], ret	
mov	dword ptr [esp], 0 
call	_silc_buffer_sunformat_vp
leave
retn
align 4
public _silc_buffer_format_vp
			
push	ebp
mov	ebp, esp
sub	esp, 18h
mov	eax, [ebp+ap]
mov	[esp+8], eax	
mov	eax, [ebp+dst]
mov	[esp+4], eax	
mov	dword ptr [esp], 0 
call	_silc_buffer_sformat_vp
leave
retn
align 10h
public _silc_buffer_format
			
push	ebp
mov	ebp, esp
sub	esp, 18h
lea	ret, [ebp+ap]
mov	[esp+8], ret	
mov	ret, [ebp+dst]
mov	[esp+4], ret	
mov	dword ptr [esp], 0 
call	_silc_buffer_sformat_vp
leave
retn
align 4
public _silc_config_strerror
push	ebp
mov	ebp, esp
mov	eax, [ebp+errnum]
cmp	eax, 10h
ja	short loc_641D2D8C
mov	errnum_0, ds:_errorstrs[errnum_0*4]
test	eax, eax
jz	short loc_641D2D8C
leave
retn
			
mov	eax, offset aInvaliderror 
leave
retn
align 4
public _silc_config_get_filename
push	ebp
mov	ebp, esp
mov	eax, [ebp+file]
test	eax, eax
jz	short locret_641D2DA0
mov	file_0,	[file_0]
leave
retn
align 4
public _silc_config_get_line
push	ebp
mov	ebp, esp
mov	eax, [ebp+file]
test	eax, eax
jz	short locret_641D2DB1
mov	file_0,	[file_0+14h]
leave
retn
align 4
public _silc_config_init
push	ebp
mov	ebp, esp
push	ebx
sub	esp, 14h
mov	ebx, [ebp+file]
test	ebx, ebx
jz	short loc_641D2DE0
mov	dword ptr [esp+4], 8 
mov	dword ptr [esp], 1 
call	_silc_calloc
mov	[eax+4], file_0
add	esp, 14h
pop	file_0
leave
retn
align 10h
xor	eax, eax
add	esp, 14h
pop	file_0
leave
retn
public _silc_config_register
			
push	ebp
mov	ebp, esp
push	edi
push	esi
push	ebx
sub	esp, 1Ch
mov	edi, [ebp+ent]
mov	esi, [ebp+name]
test	edi, edi
jz	short loc_641D2E3D
test	name_0,	name_0
jz	short loc_641D2E3D
cmp	[ebp+type], 4
jz	short loc_641D2E48
mov	dword ptr [esp+4], offset aInclude 
mov	[esp], name_0	
call	_stricmp
test	eax, eax
jz	short loc_641D2E3D
mov	ebx, [ent_0]
test	ebx, ebx
jnz	short loc_641D2E2B
jmp	short loc_641D2E54
align 4
mov	ebx, [ebx+14h]
test	ebx, ebx
jz	short loc_641D2E54
mov	[esp+4], name_0	
mov	eax, [ebx]
mov	[esp], eax	
call	_stricmp
test	eax, eax
jnz	short loc_641D2E24
			
xor	eax, eax
			
add	esp, 1Ch
pop	ebx
pop	name_0
pop	ent_0
leave
retn
align 4
mov	eax, [ebp+subtable]
test	eax, eax
jnz	short loc_641D2E05
jmp	short loc_641D2E3D
align 4
			
mov	dword ptr [esp+4], 18h 
mov	dword ptr [esp], 1 
call	_silc_calloc
mov	ebx, eax
mov	[esp], name_0	
call	_strdup
mov	[ebx], eax
mov	eax, [ebp+type]
mov	[ebx+4], eax
mov	eax, [ebp+cb]
mov	[ebx+8], eax
mov	eax, [ebp+subtable]
mov	[ebx+0Ch], eax
mov	eax, [ebp+context]
mov	[ebx+10h], eax
mov	eax, [ent_0]
test	tmp, tmp
jz	short loc_641D2EA2
mov	edx, tmp
mov	tmp, [tmp+14h]
test	tmp, tmp
jnz	short loc_641D2E92
mov	[edx+14h], ebx
mov	al, 1
jmp	short loc_641D2E3F
mov	[ent_0], ebx
mov	al, 1
jmp	short loc_641D2E3F
public _silc_config_register_table
push	ebp
mov	ebp, esp
push	edi
push	esi
push	ebx
sub	esp, 2Ch
mov	esi, [ebp+ent]
mov	eax, [ebp+table]
mov	edi, [ebp+context]
test	esi, esi
jz	short loc_641D2F04
test	table_0, table_0
jz	short loc_641D2F04
mov	edx, [table_0]
test	edx, edx
jz	short loc_641D2F10
lea	ebx, [table_0+10h]
jmp	short loc_641D2EDB
align 10h
mov	eax, ebx
mov	edx, [ebx]
add	ebx, 10h
test	edx, edx
jz	short loc_641D2F10
mov	[esp+14h], context_0 
mov	ecx, [table_0+0Ch]
mov	[esp+10h], ecx	
mov	ecx, [table_0+8]
mov	[esp+0Ch], ecx	
mov	table_0, [table_0+4]
mov	[esp+8], eax	
mov	[esp+4], edx	
mov	[esp], ent_0	
call	_silc_config_register
test	al, al
jnz	short loc_641D2ED0
			
xor	eax, eax
add	esp, 2Ch
pop	ebx
pop	ent_0
pop	context_0
leave
retn
align 10h
			
mov	al, 1
add	esp, 2Ch
pop	ebx
pop	ent_0
pop	context_0
leave
retn
align 4
			
push	ebp
mov	ebp, esp
push	edi
push	esi
push	ebx
sub	esp, 2Ch
mov	[ebp+ptr], ent
test	dl, dl
jz	short skip_sect
mov	ebx, [ent]
test	oldopt,	oldopt
jz	short skip_sect
xchg	ax, ax
mov	esi, [oldopt+14h]
mov	destroy_opts, [oldopt]
mov	ecx, 0FFFFFFFFh
mov	edi, edx
xor	ent, ent
repne scasb
not	ecx
mov	al, 46h
mov	edi, edx
rep stosb
mov	edx, [oldopt]
mov	[esp], edx	
mov	[ebp+var_20], al
call	_silc_free
mov	ecx, 18h
mov	al, [ebp+var_20]
mov	edi, oldopt
rep stosb
mov	[esp], ebx	
call	_silc_free
mov	ebx, nextopt
test	nextopt, nextopt
jnz	short loc_641D2F34
			
mov	ent, [ebp+ptr]
mov	dword ptr [eax], 46464646h
mov	dword ptr [eax+4], 46464646h
mov	[esp], eax	
call	_silc_free
add	esp, 2Ch
pop	oldopt
pop	nextopt
pop	edi
leave
retn
align 4
public _silc_config_close
			
push	ebp
mov	ebp, esp
push	edi
push	ebx
sub	esp, 20h
mov	ebx, [ebp+file]
test	ebx, ebx
jz	short loc_641D2FE4
mov	eax, [file_0]
mov	[esp], eax	
call	_silc_free
mov	ecx, [file_0+10h]
mov	edx, [file_0+8]
mov	al, 46h
mov	edi, edx
rep stosb
mov	edx, [file_0+8]
mov	[esp], edx	
mov	[ebp+var_C], al
call	_silc_free
mov	ecx, 1Ch
mov	al, [ebp+var_C]
mov	edi, file_0
rep stosb
mov	[ebp+file], ebx
add	esp, 20h
pop	ebx
pop	file_0
leave
jmp	_silc_free
align 4
add	esp, 20h
pop	file_0
pop	edi
leave
retn
align 4
public _silc_config_read_line
push	ebp
mov	ebp, esp
push	edi
push	ebx
sub	esp, 10h
mov	eax, [ebp+file]
mov	edx, [ebp+line]
test	eax, eax
jnz	short loc_641D3008
			
xor	len, len
add	esp, 10h
pop	p
pop	edi
leave
retn
align 4
test	line_0,	line_0
jz	short loc_641D2FFE
mov	ebx, [file_0+8]
mov	al, [p]
lea	ecx, [eax-1]
cmp	cl, 0FDh
jbe	short loc_641D3027
jmp	short loc_641D2FFE
align 4
			
inc	p
mov	al, [p]
lea	ecx, [eax-1]
cmp	cl, 0FDh
ja	short loc_641D2FFE
cmp	line_0,	1
jbe	short loc_641D3034
cmp	al, 0Ah
jnz	short loc_641D301C
dec	line_0
jmp	short loc_641D301C
align 4
mov	dword ptr [esp+4], 0Ah 
mov	[esp], p	
call	_strchr
test	eax, eax
jz	short loc_641D305F
sub	eax, p
test	len, len
jle	short loc_641D2FFE
mov	[ebp+line], len
mov	[ebp+file], p
add	esp, 10h
pop	p
pop	edi
leave
jmp	_silc_memdup
xor	eax, eax
mov	ecx, 0FFFFFFFFh
mov	edi, p
repne scasb
not	ecx
dec	ecx
mov	[ebp+line], ecx
jmp	short loc_641D3051
align 4
public _silc_config_open
push	ebp
mov	ebp, esp
push	edi
push	esi
push	ebx
sub	esp, 2Ch
mov	edi, [ebp+configfile]
lea	eax, [ebp+filelen]
mov	[esp+4], eax	
mov	[esp], edi	
call	_silc_file_readfile
mov	esi, eax
test	eax, eax
jz	short loc_641D30D4
mov	dword ptr [esp+4], 1Ch 
mov	dword ptr [esp], 1 
call	_silc_calloc
mov	ebx, eax
mov	[esp], configfile_0 
call	_strdup
mov	[ret], eax
mov	[ret+0Ch], buffer
mov	[ret+8], buffer
mov	eax, [ebp+filelen]
mov	[ret+10h], eax
mov	dword ptr [ret+14h], 1
mov	eax, ret
add	esp, 2Ch
pop	ret
pop	buffer
pop	configfile_0
leave
retn
align 4
xor	ebx, ebx
mov	buffer,	ret
add	esp, 2Ch
pop	ret
pop	buffer
pop	configfile_0
leave
retn
			
push	ebp
mov	ebp, esp
push	edi
push	esi
push	ebx
sub	esp, 2Ch
mov	[ebp+var_1C], file
mov	[ebp+var_20], to
mov	ebx, [file+0Ch]
mov	esi, ds:__imp____mb_cur_max
mov	edi, ds:__imp___pctype
mov	al, [o]
lea	to, [eax-1]
cmp	dl, 0FDh
ja	short loc_641D3135
movzx	eax, al
cmp	dword ptr [esi], 1
jnz	loc_641D31FC
mov	edx, [edi]
movzx	eax, word ptr [edx+eax*2]
and	eax, 8
test	eax, eax
jz	short loc_641D3135
cmp	byte ptr [o], 0Ah
jz	loc_641D31F0
inc	o
mov	al, [o]
lea	edx, [eax-1]
cmp	dl, 0FDh
jbe	short loc_641D3108
			
mov	edx, [ebp+var_1C]
mov	[edx+0Ch], o
mov	al, [o]
cmp	al, 22h
jz	loc_641D3254
mov	ecx, ds:__imp____mb_cur_max
mov	edx, [ecx]
mov	esi, ds:__imp___pctype
mov	edi, [ebp+var_1C]
lea	ecx, [eax-1]
cmp	cl, 0FDh
ja	short loc_641D318E
xchg	ax, ax
movzx	eax, al
cmp	edx, 1
jnz	loc_641D3220
mov	ecx, [esi]
movzx	eax, word ptr [ecx+eax*2]
and	eax, 8
test	eax, eax
jz	short loc_641D318E
mov	al, [o]
inc	o
cmp	al, 0Ah
jz	loc_641D3214
mov	al, [o]
lea	ecx, [eax-1]
cmp	cl, 0FDh
jbe	short loc_641D3160
			
mov	eax, [ebp+var_1C]
mov	[eax+0Ch], o
mov	esi, [ebp+var_20]
xor	file, file
jmp	short loc_641D31D6
align 4
mov	ecx, ds:__imp___pctype
mov	edx, [ecx]
movzx	eax, word ptr [edx+eax*2]
and	eax, 107h
test	eax, eax
jnz	short loc_641D31BF
mov	al, [o]
cmp	al, 5Fh
jz	short loc_641D31BF
cmp	al, 2Dh
jnz	loc_641D3240
			
cmp	edi, 0FFh
jz	short loc_641D3240
inc	edi
mov	al, [o]
mov	[to], al
inc	to
inc	o
mov	ecx, ds:__imp____mb_cur_max
mov	edx, [ecx]
movzx	eax, byte ptr [o]
dec	edx
jz	short loc_641D319C
mov	dword ptr [esp+4], 107h	
mov	[esp], eax	
call	__isctype
jmp	short loc_641D31AD
align 10h
mov	eax, [ebp+var_1C]
inc	dword ptr [eax+14h]
inc	o
jmp	loc_641D312B
mov	dword ptr [esp+4], 8 
mov	[esp], eax	
call	__isctype
jmp	loc_641D311D
align 4
inc	dword ptr [file+14h]
mov	al, [o]
jmp	loc_641D3186
align 10h
mov	dword ptr [esp+4], 8 
mov	[esp], eax	
call	__isctype
mov	ecx, ds:__imp____mb_cur_max
mov	edx, [ecx]
jmp	loc_641D3175
align 10h
			
mov	byte ptr [to], 0
mov	eax, [ebp+var_1C]
mov	[eax+0Ch], o
mov	eax, [ebp+var_20]
add	esp, 2Ch
pop	o
pop	to
pop	edi
leave
retn
mov	edx, [ebp+var_20]
mov	ecx, d
add	ecx, 0FEh
jmp	short loc_641D326B
align 4
			
mov	[d], al
cmp	d, ecx
jz	short loc_641D3291
inc	d
inc	o
mov	al, [o]
cmp	al, 22h
jz	short loc_641D327C
cmp	al, 5Ch
jnz	short loc_641D3264
inc	o
mov	al, [o]
jmp	short loc_641D3264
align 4
mov	byte ptr [d], 0
inc	o
mov	eax, [ebp+var_1C]
mov	[eax+0Ch], ebx
mov	eax, [ebp+var_20]
add	esp, 2Ch
pop	ebx
pop	esi
pop	edi
leave
retn
mov	eax, ds:__imp___iob
add	eax, 40h
mov	[esp+0Ch], eax	
mov	dword ptr [esp+8], 1Ch 
mov	dword ptr [esp+4], 1 
mov	dword ptr [esp], offset	aBullshitMissin	
call	_fwrite
mov	dword ptr [esp], 1 
call	_exit
align 4
public _silc_config_read_current_line
push	ebp
mov	ebp, esp
push	edi
push	ebx
sub	esp, 10h
mov	edx, [ebp+file]
mov	eax, [edx+14h]
test	eax, eax
jnz	short loc_641D32E4
			
xor	eax, eax
			
add	esp, 10h
pop	ebx
pop	edi
leave
retn
align 4
mov	ebx, [file_0+8]
mov	dl, [ebx]
lea	ecx, [edx-1]
cmp	cl, 0FDh
jbe	short loc_641D32FF
jmp	short loc_641D32DA
align 4
			
inc	ebx
mov	dl, [ebx]
lea	ecx, [edx-1]
cmp	cl, 0FDh
ja	short loc_641D32DA
cmp	eax, 1
jbe	short loc_641D330C
cmp	dl, 0Ah
jnz	short loc_641D32F4
dec	eax
jmp	short loc_641D32F4
mov	dword ptr [esp+4], 0Ah 
mov	[esp], ebx	
call	_strchr
test	eax, eax
jz	short loc_641D3334
sub	eax, ebx
test	eax, eax
jle	short loc_641D32DA
mov	[esp+4], eax	
mov	[esp], ebx	
call	_silc_memdup
jmp	short loc_641D32DC
xor	eax, eax
mov	ecx, 0FFFFFFFFh
mov	edi, ebx
repne scasb
not	ecx
dec	ecx
mov	[esp+4], ecx	
mov	[esp], ebx	
call	_silc_memdup
jmp	short loc_641D32DC
			
push	ebp
mov	ebp, esp
push	edi
push	esi
push	ebx
sub	esp, 17Ch
mov	[ebp+var_150], ent
mov	esi, [ent+4]
mov	[ebp+file], esi
mov	edi, [esi+0Ch]
lea	ent, [ebp+buf]
mov	[ebp+var_160], eax
			
mov	al, [edi]
lea	edx, [eax-1]
cmp	dl, 0FDh
ja	short loc_641D33BD
movzx	eax, al
mov	ret, ds:__imp____mb_cur_max
cmp	dword ptr [ecx], 1
jnz	loc_641D34A0
mov	edx, ds:__imp___pctype
mov	edx, [edx]
movzx	eax, word ptr [edx+eax*2]
and	eax, 8
test	eax, eax
jz	short loc_641D33BD
cmp	byte ptr [edi],	0Ah
jz	loc_641D3490
inc	edi
mov	al, [edi]
lea	edx, [eax-1]
cmp	dl, 0FDh
jbe	short loc_641D3384
			
mov	esi, [ebp+file]
mov	[esi+0Ch], edi
mov	al, [edi]
cmp	al, 23h
jz	loc_641D34C8
lea	edx, [eax-1]
cmp	dl, 0FDh
ja	loc_641D3C21
cmp	al, 7Dh
jz	loc_641D3C01
mov	esi, ds:__imp____mb_cur_max
mov	inc_file, ds:__imp___pctype
lea	edx, [eax-1]
cmp	dl, 0FDh
ja	short loc_641D3426
movzx	eax, al
cmp	dword ptr [esi], 1
jnz	loc_641D34F4
mov	edx, [ebx]
movzx	eax, word ptr [edx+eax*2]
and	eax, 8
test	eax, eax
jz	short loc_641D3426
mov	al, [edi]
inc	edi
cmp	al, 0Ah
jz	loc_641D34E4
mov	al, [edi]
lea	edx, [eax-1]
cmp	dl, 0FDh
jbe	short loc_641D33F8
			
mov	edx, [ebp+file]
mov	[edx+0Ch], edi
lea	ret, [ebp+tmp_file]
mov	[ebp+var_15C], ecx
lea	ebx, [ebp+buf]
jmp	short loc_641D3475
mov	ecx, ds:__imp___pctype
mov	edx, [ecx]
movzx	eax, word ptr [edx+eax*2]
and	eax, 107h
test	eax, eax
jnz	short loc_641D3463
mov	al, [edi]
cmp	al, 5Fh
jz	short loc_641D3463
cmp	al, 2Dh
jnz	loc_641D350C
			
cmp	ebx, [ebp+var_15C]
jz	loc_641D350C
mov	al, [edi]
mov	[ebx], al
inc	ebx
inc	edi
movzx	eax, byte ptr [edi]
cmp	dword ptr [esi], 1
jz	short loc_641D3440
mov	dword ptr [esp+4], 107h	
mov	[esp], eax	
call	__isctype
jmp	short loc_641D3451
align 10h
mov	edx, [ebp+file]
inc	dword ptr [edx+14h]
inc	edi
jmp	loc_641D33B3
align 10h
mov	dword ptr [esp+4], 8 
mov	[esp], eax	
call	__isctype
jmp	loc_641D33A5
align 4
cmp	al, 0Ah
jz	loc_641D38FD
cmp	al, 0Dh
jz	loc_641D38FD
inc	edi
mov	al, [edi]
lea	edx, [eax-1]
cmp	dl, 0FDh
jbe	short loc_641D34B8
mov	eax, [ebp+file]
mov	[eax+0Ch], edi
inc	dword ptr [eax+14h]
jmp	loc_641D337A
mov	eax, [ebp+file]
inc	dword ptr [eax+14h]
mov	al, [edi]
jmp	loc_641D341E
mov	dword ptr [esp+4], 8 
mov	[esp], eax	
call	__isctype
jmp	loc_641D340D
align 4
			
mov	byte ptr [ebx],	0
mov	eax, [ebp+file]
mov	[eax+0Ch], edi
mov	dword ptr [esp+4], offset aInclude 
lea	edx, [ebp+buf]
mov	[esp], edx	
call	_stricmp
test	eax, eax
jz	loc_641D378C
mov	eax, [ebp+var_150]
mov	ebx, [eax]
test	thisopt, thisopt
jnz	short loc_641D3553
jmp	loc_641D390F
align 4
mov	thisopt, [thisopt+14h]
test	thisopt, thisopt
jz	loc_641D390F
lea	edx, [ebp+buf]
mov	[esp+4], edx	
mov	eax, [thisopt]
mov	[esp], eax	
call	_stricmp
test	eax, eax
jnz	short loc_641D3548
mov	ecx, [ebp+file]
mov	edi, [ecx+0Ch]
mov	[ebp+var_154], thisopt
mov	thisopt, ecx
mov	al, [edi]
lea	edx, [eax-1]
cmp	dl, 0FDh
ja	short loc_641D35BB
xchg	ax, ax
movzx	eax, al
cmp	dword ptr [esi], 1
jnz	loc_641D3644
mov	ecx, ds:__imp___pctype
mov	edx, [ecx]
movzx	eax, word ptr [edx+eax*2]
and	eax, 8
test	eax, eax
jz	short loc_641D35BB
cmp	byte ptr [edi],	0Ah
jz	loc_641D3638
inc	edi
mov	al, [edi]
lea	edx, [eax-1]
cmp	dl, 0FDh
jbe	short loc_641D3588
			
mov	file, [ebp+var_154]
mov	esi, [ebp+file]
mov	[esi+0Ch], edi
mov	eax, [thisopt+4]
cmp	eax, 4
jz	loc_641D3659
cmp	eax, 6
jz	loc_641D3ABD
mov	al, [edi]
inc	edi
mov	edx, [ebp+file]
mov	[edx+0Ch], edi
cmp	al, 3Dh
jnz	loc_641D3BF7
lea	edx, [ebp+buf]	
mov	eax, [ebp+file]	
call	_my_get_string
mov	ecx, [ebp+file]
mov	eax, [ecx+0Ch]
mov	dl, [eax]
inc	eax
mov	[ecx+0Ch], eax
cmp	dl, 3Bh
jnz	loc_641D3782
cmp	dword ptr [thisopt+4], 5 
jbe	loc_641D391F
			
mov	eax, 0Ah
			
add	esp, 17Ch
pop	inc_file
pop	esi
pop	pt
leave
retn
align 4
inc	dword ptr [file+14h]
inc	edi
jmp	loc_641D35B1
align 4
mov	dword ptr [esp+4], 8 
mov	[esp], eax	
call	__isctype
jmp	loc_641D35A3
mov	al, [edi]
inc	edi
mov	[esi+0Ch], edi
cmp	al, 7Bh
jnz	loc_641D3C52
mov	eax, [ebp+var_150]
mov	edi, [eax+4]
test	edi, edi
jz	loc_641D3929
mov	dword ptr [esp+4], 8 
mov	dword ptr [esp], 1 
call	_silc_calloc
mov	esi, eax
mov	[eax+4], edi
mov	ecx, [thisopt+10h]
mov	eax, [thisopt+0Ch]
test	eax, eax
jz	short loc_641D36ED
mov	edx, [eax]
test	edx, edx
jz	short loc_641D36ED
lea	edi, [eax+10h]
mov	[ebp+var_154], thisopt
mov	thisopt, ecx
jmp	short loc_641D36BB
align 10h
mov	eax, edi
mov	edx, [edi]
add	edi, 10h
test	edx, edx
jz	short loc_641D36E4
mov	[esp+14h], ebx	
mov	ecx, [eax+0Ch]
mov	[esp+10h], ecx	
mov	ecx, [eax+8]
mov	[esp+0Ch], ecx	
mov	eax, [eax+4]
mov	[esp+8], eax	
mov	[esp+4], edx	
mov	[esp], esi	
call	_silc_config_register
test	al, al
jnz	short loc_641D36B0
mov	ebx, [ebp+var_154]
mov	edi, [esi+4]
			
inc	dword ptr [edi+4]
mov	eax, esi	
call	_silc_config_main_internal
mov	ecx, eax
mov	eax, [edi+4]
test	eax, eax
jz	short loc_641D372A
dec	eax
mov	[edi+4], eax
test	eax, eax
jnz	short loc_641D3712
cmp	byte ptr [edi+18h], 1
jz	loc_641D3B84
mov	edx, 1		
mov	eax, esi	
mov	[ebp+var_158], ret
call	_silc_config_destroy
mov	ecx, [ebp+var_158]
			
test	ret, ret
jnz	loc_641D3C4B
mov	eax, [thisopt+8]
test	eax, eax
jz	short loc_641D376B
mov	edx, [thisopt+10h]
mov	[esp+10h], edx
mov	dword ptr [esp+0Ch], 0
mov	ret, [ebp+file]
mov	edx, [ecx+14h]
mov	[esp+8], edx
mov	edx, [thisopt]
mov	[esp+4], edx
mov	edx, [thisopt+4]
mov	[esp], edx
call	eax
test	eax, eax
jnz	loc_641D362B
mov	esi, [ebp+file]
mov	edi, [esi+0Ch]
mov	al, [edi]
inc	edi
mov	[esi+0Ch], edi
cmp	al, 3Bh
jz	loc_641D337A
			
mov	eax, 10h
jmp	loc_641D362B
mov	ecx, [ebp+file]
mov	ebx, [ecx+0Ch]
mov	edi, ds:__imp___pctype
mov	al, [ebx]
lea	edx, [eax-1]
cmp	dl, 0FDh
ja	short loc_641D37D5
lea	esi, [esi+0]
movzx	eax, al
cmp	dword ptr [esi], 1
jnz	loc_641D38E8
mov	edx, [edi]
movzx	eax, word ptr [edx+eax*2]
and	eax, 8
test	eax, eax
jz	short loc_641D37D5
cmp	byte ptr [ebx],	0Ah
jz	loc_641D38D8
inc	ebx
mov	al, [ebx]
lea	edx, [eax-1]
cmp	dl, 0FDh
jbe	short loc_641D37A8
			
mov	edx, [ebp+file]
mov	[edx+0Ch], ebx
lea	edx, [ebp+buf]	
mov	eax, [ebp+file]	
call	_my_get_string
mov	ecx, [ebp+file]
mov	eax, [ecx+0Ch]
mov	dl, [eax]
inc	eax
mov	[ecx+0Ch], eax
cmp	dl, 3Bh
jnz	loc_641D3782
lea	eax, [ebp+return_len]
mov	[esp+4], eax	
lea	esi, [ebp+buf]
mov	[esp], esi	
call	_silc_file_readfile
mov	esi, eax
test	eax, eax
jz	loc_641D3933
mov	dword ptr [esp+4], 1Ch 
mov	dword ptr [esp], 1 
call	_silc_calloc
mov	ebx, eax
lea	eax, [ebp+buf]
mov	[esp], eax	
call	_strdup
mov	[inc_file], eax
mov	[inc_file+0Ch],	esi
mov	[inc_file+8], esi
mov	eax, [ebp+return_len]
mov	[inc_file+10h],	eax
mov	dword ptr [inc_file+14h], 1
mov	byte ptr [inc_file+18h], 1
mov	dword ptr [esp+4], 8 
mov	dword ptr [esp], 1 
call	_silc_calloc
mov	esi, eax
mov	[eax+4], inc_file
mov	edx, [ebp+var_150]
mov	eax, [edx]
mov	[esi], eax
inc	dword ptr [inc_file+4]
mov	eax, esi	
call	_silc_config_main_internal
mov	edi, eax
mov	eax, [inc_file+4]
test	eax, eax
jz	short loc_641D38B7
dec	eax
mov	[inc_file+4], eax
test	eax, eax
jnz	short loc_641D38AB
cmp	byte ptr [inc_file+18h], 1
jz	loc_641D3B9E
mov	edx, 1		
mov	eax, esi	
call	_silc_config_destroy
			
test	ret, ret
jnz	loc_641D3B14
mov	[esp], inc_file	
call	_silc_config_close
mov	ecx, [ebp+file]
mov	ret, [ecx+0Ch]
jmp	loc_641D337A
align 4
mov	eax, [ebp+file]
inc	dword ptr [eax+14h]
inc	ebx
jmp	loc_641D37CB
align 4
mov	dword ptr [esp+4], 8 
mov	[esp], eax	
call	__isctype
jmp	loc_641D37BD
			
inc	edi
mov	eax, [ebp+file]
mov	[eax+0Ch], edi
inc	dword ptr [eax+14h]
jmp	loc_641D337A
			
mov	eax, 9
add	esp, 17Ch
pop	thisopt
pop	esi
pop	edi
leave
retn
mov	eax, [thisopt+4]
jmp	ds:off_64263B50[eax*4] 
mov	edi, [edi+4]
xor	esi, esi
jmp	loc_641D36ED
mov	eax, 5
add	esp, 17Ch
pop	ebx
pop	esi
pop	edi
leave
retn
			
cmp	[ebp+buf], 0
jz	loc_641D3626	
			
lea	esi, [ebp+buf]	
mov	[esp], esi	
call	_strdup
mov	edi, eax
			
test	pt, pt
jz	loc_641D3626	
mov	eax, [thisopt+8]
test	eax, eax
jz	loc_641D3B6E
mov	edx, [thisopt+10h]
mov	[esp+10h], edx
mov	[esp+0Ch], pt
mov	ecx, [ebp+file]
mov	edx, [ecx+14h]
mov	[esp+8], edx
mov	edx, [thisopt]
mov	[esp+4], edx
mov	edx, [thisopt+4]
mov	[esp], edx
call	eax
mov	esi, eax
mov	[esp], pt	
call	_silc_free
test	ret, ret
jz	loc_641D3B60
mov	eax, ret
add	esp, 17Ch
pop	thisopt
pop	ret
pop	pt
leave
retn
			
mov	dword ptr [esp+8], 0
lea	eax, [ebp+var_20]
mov	[esp+4], eax	
lea	edx, [ebp+buf]
mov	[esp], edx	
call	_strtol
mov	esi, eax
mov	eax, [ebp+var_20]
cmp	byte ptr [eax],	0
jnz	loc_641D3626	
jmp	loc_641D3AA0
			
mov	dword ptr [esp+4], offset aYes 
lea	esi, [ebp+buf]
mov	[esp], esi	
call	_stricmp
test	eax, eax
jz	short loc_641D3A1A
mov	dword ptr [esp+4], offset aTrue	
mov	[esp], esi	
call	_stricmp
test	eax, eax
jnz	loc_641D3BAC
			
mov	esi, 1
mov	dword ptr [esp+4], 1 
mov	dword ptr [esp], 1 
call	_silc_calloc
mov	edi, eax
mov	eax, esi
mov	[pt], al
jmp	loc_641D3960
			
mov	dword ptr [esp+8], 0 
lea	eax, [ebp+var_20]
mov	[esp+4], eax	
lea	ecx, [ebp+buf]
mov	[esp], ecx	
call	_strtol
mov	edi, [ebp+var_20]
cmp	edi, [ebp+var_160]
jz	loc_641D3626	
mov	esi, eax
movsx	eax, byte ptr [edi]
mov	[esp], eax	
call	_tolower
cmp	eax, 6Bh
jz	loc_641D3C5C
jg	loc_641D3C3A
test	eax, eax
jz	short loc_641D3A96
cmp	eax, 67h
jnz	loc_641D3626	
shl	esi, 1Eh
			
cmp	byte ptr [edi+1], 0
jnz	loc_641D3626	
mov	dword ptr [esp+4], 4 
mov	dword ptr [esp], 1 
call	_silc_calloc
mov	edi, eax
mov	[eax], esi
jmp	loc_641D3960
mov	al, [edi]
inc	edi
mov	edx, [ebp+file]
mov	[edx+0Ch], edi
cmp	al, 3Bh
jnz	loc_641D3782
mov	eax, [thisopt+8]
test	eax, eax
jz	loc_641D337A
mov	edx, [thisopt+10h]
mov	[esp+10h], edx
mov	dword ptr [esp+0Ch], 0
mov	ecx, [ebp+file]
mov	edx, [ecx+14h]
mov	[esp+8], edx
mov	edx, [thisopt]
mov	[esp+4], edx
mov	edx, [thisopt+4]
mov	[esp], edx
call	eax
mov	esi, [ebp+file]
mov	edi, [esi+0Ch]
jmp	loc_641D337A
mov	eax, ret
mov	ecx, 7
mov	ret, [ebp+var_15C]
mov	esi, inc_file
rep movsd
mov	cl, 7
mov	edi, ebx
mov	inc_file, [ebp+file]
rep movsd
mov	[esp], ebx	
mov	[ebp+var_158], ret
call	_silc_config_close
lea	file, [ebp+tmp_file]
mov	ecx, 7
mov	inc_file, [ebp+file]
rep movsd
mov	eax, [ebp+var_158]
add	esp, 17Ch
pop	inc_file
pop	esi
pop	file
leave
retn
mov	ret, [ebp+file]
mov	pt, [esi+0Ch]
jmp	loc_641D337A
mov	[esp], pt
call	_silc_free
mov	eax, [ebp+file]
mov	pt, [eax+0Ch]
jmp	loc_641D337A
xor	edx, edx
mov	eax, esi	
mov	[ebp+var_158], ret
call	_silc_config_destroy
mov	ecx, [ebp+var_158]
jmp	loc_641D372A
xor	edx, edx
mov	eax, esi	
call	_silc_config_destroy
jmp	loc_641D38B7
mov	dword ptr [esp+4], offset aOn
mov	[esp], esi	
call	_stricmp
test	eax, eax
jz	loc_641D3A1A
mov	dword ptr [esp+4], offset a1 
mov	[esp], esi	
call	_stricmp
test	eax, eax
jz	loc_641D3A1A
mov	dword ptr [esp+4], offset aNo 
mov	[esp], esi	
call	_stricmp
test	eax, eax
jnz	short loc_641D3C64
			
xor	esi, esi
jmp	loc_641D3A1F
mov	eax, 0Dh
jmp	loc_641D362B
mov	eax, 0Eh
mov	ret, [ebp+file]
cmp	dword ptr [ecx+4], 1
jle	loc_641D362B
inc	edi
mov	[ecx+0Ch], edi
xor	al, al
jmp	loc_641D362B
xor	eax, eax
mov	edx, [ebp+file]
cmp	dword ptr [edx+4], 1
jle	loc_641D362B
mov	al, 0Ch
jmp	loc_641D362B
cmp	eax, 6Dh
jnz	loc_641D3626	
shl	esi, 14h
jmp	loc_641D3A96
mov	eax, ret
jmp	loc_641D362B
mov	eax, 6
jmp	loc_641D362B
shl	esi, 0Ah
jmp	loc_641D3A96
mov	dword ptr [esp+4], offset aFalse 
mov	[esp], esi	
call	_stricmp
test	eax, eax
jz	loc_641D3BF0
mov	dword ptr [esp+4], offset aOff 
mov	[esp], esi	
call	_stricmp
test	eax, eax
jz	loc_641D3BF0
mov	dword ptr [esp+4], offset a0 
mov	[esp], esi	
call	_stricmp
test	eax, eax
jz	loc_641D3BF0
jmp	loc_641D3626	
align 4
public _silc_config_main
push	ebp
mov	ebp, esp
push	edi
push	esi
push	ebx
sub	esp, 0Ch
mov	ebx, [ebp+ent]
mov	edi, [ebx+4]
inc	dword ptr [file+4]
mov	eax, ebx	
call	_silc_config_main_internal
mov	esi, eax
mov	eax, [file+4]
test	eax, eax
jz	short loc_641D3CF0
dec	eax
mov	[file+4], eax
test	eax, eax
jnz	short loc_641D3CE4
cmp	byte ptr [file+18h], 1
jz	short loc_641D3CFC
mov	edx, 1		
mov	eax, ent_0	
call	_silc_config_destroy
mov	eax, ret
add	esp, 0Ch
pop	ent_0
pop	ret
pop	file
leave
retn
align 4
xor	edx, edx	
mov	eax, ent_0	
call	_silc_config_destroy
mov	eax, ret
add	esp, 0Ch
pop	ent_0
pop	ret
pop	file
leave
retn
align 10h
public _silc_fd_stream_io
			
push	ebp
mov	ebp, esp
sub	esp, 8
mov	ecx, [ebp+type]
mov	eax, [ebp+context]
mov	edx, [eax+8]
test	edx, edx
jz	short locret_641D3D2D
cmp	type_0,	1
jz	short loc_641D3D44
cmp	type_0,	2
jz	short loc_641D3D30
leave
retn
align 10h
mov	type_0,	[context_0+0Ch]
mov	[ebp+type], ecx
mov	[ebp+app_context], 1
mov	[ebp+schedule],	context_0
leave
jmp	edx
align 4
mov	type_0,	[context_0+0Ch]
mov	[ebp+type], ecx
mov	[ebp+app_context], 0
mov	[ebp+schedule],	context_0
leave
jmp	edx
align 4
public _silc_fd_stream_get_info
push	ebp
mov	ebp, esp
push	ebx
mov	eax, [ebp+stream]
mov	ecx, [ebp+read_fd]
mov	edx, [ebp+write_fd]
test	eax, eax
jz	short loc_641D3D71
cmp	dword ptr [stream_0], offset _silc_fd_stream_ops
jz	short loc_641D3D78
xor	stream_0, stream_0
pop	ebx
leave
retn
align 4
test	read_fd_0, read_fd_0
jz	short loc_641D3D81
mov	ebx, [stream_0+10h]
mov	[read_fd_0], ebx
test	write_fd_0, write_fd_0
jz	short loc_641D3D8A
mov	stream_0, [stream_0+14h]
mov	[write_fd_0], eax
mov	al, 1
pop	ebx
leave
retn
align 10h
public _silc_fd_stream_get_error
push	ebp
mov	ebp, esp
mov	eax, [ebp+stream]
test	eax, eax
jz	short loc_641D3DA2
cmp	dword ptr [stream_0], offset _silc_fd_stream_ops
jz	short loc_641D3DA8
xor	stream_0, stream_0
leave
retn
align 4
mov	stream_0, [stream_0+18h]
leave
retn
align 10h
public _silc_fd_stream_get_schedule
push	ebp
mov	ebp, esp
mov	eax, [ebp+stream]
mov	eax, [eax+4]
leave
retn
align 4
public _silc_fd_stream_notifier
push	ebp
mov	ebp, esp
push	esi
push	ebx
sub	esp, 20h
mov	ebx, [ebp+stream]
mov	esi, [ebp+schedule]
mov	eax, [ebp+callback]
mov	[ebx+8], eax
mov	eax, [ebp+context]
mov	[ebx+0Ch], eax
mov	[ebx+4], esi
test	esi, esi
jz	loc_641D3E8B
mov	context_0, [stream_0+14h]
test	eax, eax
jle	short loc_641D3E23
mov	dword ptr [esp+18h], 0 
mov	dword ptr [esp+14h], 0 
mov	dword ptr [esp+10h], 0 
mov	[esp+0Ch], stream_0 
mov	dword ptr [esp+8], offset _silc_fd_stream_io 
mov	[esp+4], eax	
mov	[esp], schedule_0 
call	_silc_schedule_task_add
mov	eax, [stream_0+14h]
mov	[esp], eax	
call	_silc_file_set_nonblock
mov	eax, [stream_0+10h]
test	eax, eax
jle	short loc_641D3E8B
mov	dword ptr [esp+18h], 0 
mov	dword ptr [esp+14h], 0 
mov	dword ptr [esp+10h], 0 
mov	[esp+0Ch], stream_0 
mov	dword ptr [esp+8], offset _silc_fd_stream_io 
mov	[esp+4], eax	
mov	[esp], schedule_0 
call	_silc_schedule_task_add
mov	dword ptr [esp+0Ch], 0 
mov	dword ptr [esp+8], 1 
mov	eax, [stream_0+10h]
mov	[esp+4], eax	
mov	[esp], schedule_0 
call	_silc_schedule_set_listen_fd
mov	eax, [stream_0+10h]
mov	[esp], eax	
call	_silc_file_set_nonblock
mov	eax, [stream_0+14h]
test	eax, eax
jle	short loc_641D3E94
			
mov	al, 1
add	esp, 20h
pop	stream_0
pop	schedule_0
leave
retn
mov	eax, [stream_0+10h]
mov	[stream_0+14h],	eax
mov	al, 1
add	esp, 20h
pop	stream_0
pop	schedule_0
leave
retn
align 4
public _silc_fd_stream_close
			
push	ebp
mov	ebp, esp
push	ebx
sub	esp, 14h
mov	ebx, [ebp+stream]
mov	eax, [ebx+10h]
test	eax, eax
jle	short loc_641D3EE5
mov	[esp], eax	
call	_silc_file_close
mov	eax, [stream_0+4]
test	eax, eax
jz	short loc_641D3EE5
mov	edx, [stream_0+10h]
mov	[esp+4], edx	
mov	[esp], eax	
call	_silc_schedule_unset_listen_fd
mov	eax, [stream_0+10h]
mov	[esp+4], eax	
mov	eax, [stream_0+4]
mov	[esp], eax	
call	_silc_schedule_task_del_by_fd
			
mov	eax, [stream_0+14h]
test	eax, eax
jle	short loc_641D3F21
cmp	eax, [stream_0+10h]
jz	short loc_641D3F21
mov	[esp], eax	
call	_silc_file_close
mov	eax, [stream_0+4]
test	eax, eax
jz	short loc_641D3F21
mov	edx, [stream_0+14h]
mov	[esp+4], edx	
mov	[esp], eax	
call	_silc_schedule_unset_listen_fd
mov	eax, [stream_0+14h]
mov	[esp+4], eax	
mov	eax, [stream_0+4]
mov	[esp], eax	
call	_silc_schedule_task_del_by_fd
			
mov	al, 1
add	esp, 14h
pop	stream_0
leave
retn
align 4
public _silc_fd_stream_destroy
push	ebp
mov	ebp, esp
push	ebx
sub	esp, 14h
mov	ebx, [ebp+stream]
mov	[esp], ebx	
call	_silc_fd_stream_close
mov	[ebp+stream], ebx
add	esp, 14h
pop	ebx
leave
jmp	_silc_free
align 4
public _silc_fd_stream_write
push	ebp
mov	ebp, esp
push	esi
push	ebx
sub	esp, 10h
mov	ebx, [ebp+stream]
mov	edx, [ebx+8]
test	edx, edx
jz	short loc_641D3FD0
mov	eax, [ebp+data_len]
mov	[esp+8], eax	
mov	eax, [ebp+data]
mov	[esp+4], eax	
mov	eax, [stream_0+14h]
mov	[esp], eax	
call	_silc_file_write
mov	esi, eax
test	eax, eax
js	short loc_641D3FA0
mov	edx, [stream_0+10h]
mov	ret, [stream_0+14h]
cmp	edx, eax
jz	short loc_641D3FE0
mov	[esp+4], eax	
mov	eax, [stream_0+4]
mov	[esp], eax	
call	_silc_schedule_unset_listen_fd
mov	eax, ret
add	esp, 10h
pop	stream_0
pop	ret
leave
retn
align 10h
call	__errno
cmp	dword ptr [eax], 0Bh
jz	short loc_641D4008
call	__errno
cmp	dword ptr [eax], 4
jz	short loc_641D4008
mov	eax, [stream_0+14h]
mov	[esp+4], eax	
mov	eax, [stream_0+4]
mov	[esp], eax	
call	_silc_schedule_unset_listen_fd
call	__errno
mov	eax, [eax]
mov	[stream_0+18h],	eax
mov	ret, 0FFFFFFFEh
mov	eax, ret
add	esp, 10h
pop	stream_0
pop	ret
leave
retn
align 10h
mov	dword ptr [esp+0Ch], 0 
mov	dword ptr [esp+8], 1 
mov	[esp+4], edx	
mov	eax, [stream_0+4]
mov	[esp], eax	
call	_silc_schedule_set_listen_fd
mov	eax, ret
add	esp, 10h
pop	stream_0
pop	ret
leave
retn
			
mov	dword ptr [esp+0Ch], 0
mov	dword ptr [esp+8], 3 
mov	eax, [stream_0+14h]
mov	[esp+4], eax	
mov	eax, [stream_0+4]
mov	[esp], eax	
call	_silc_schedule_set_listen_fd
mov	ret, 0FFFFFFFFh
jmp	loc_641D3F96
public _silc_fd_stream_read
push	ebp
mov	ebp, esp
push	ebx
sub	esp, 24h
mov	ebx, [ebp+stream]
mov	ecx, [ebx+8]
test	ecx, ecx
jz	short loc_641D40BC
mov	eax, [ebp+buf_len]
mov	[esp+8], eax	
mov	eax, [ebp+buf]
mov	[esp+4], eax	
mov	eax, [stream_0+10h]
mov	[esp], eax	
call	_silc_file_read
cmp	eax, 0
jl	short loc_641D408C
jz	short loc_641D406C
add	esp, 24h
pop	stream_0
leave
retn
align 4
mov	edx, [stream_0+10h]
mov	[esp+4], edx	
mov	edx, [stream_0+4]
mov	[esp], edx	
mov	[ebp+var_C], len
call	_silc_schedule_unset_listen_fd
mov	eax, [ebp+var_C]
add	esp, 24h
pop	stream_0
leave
retn
align 4
call	__errno
cmp	dword ptr [eax], 0Bh
jz	short loc_641D40C8
call	__errno
cmp	dword ptr [eax], 4
jz	short loc_641D40C8
mov	eax, [stream_0+10h]
mov	[esp+4], eax	
mov	eax, [stream_0+4]
mov	[esp], eax	
call	_silc_schedule_unset_listen_fd
call	__errno
mov	eax, [eax]
mov	[stream_0+18h],	eax
mov	eax, 0FFFFFFFEh
add	esp, 24h
pop	stream_0
leave
retn
align 4
			
mov	dword ptr [esp+0Ch], 0 
mov	dword ptr [esp+8], 1 
mov	eax, [stream_0+10h]
mov	[esp+4], eax	
mov	eax, [stream_0+4]
mov	[esp], eax	
call	_silc_schedule_set_listen_fd
mov	eax, 0FFFFFFFFh
jmp	loc_641D4065
public _silc_fd_stream_create2
push	ebp
mov	ebp, esp
sub	esp, 18h
mov	dword ptr [esp+4], 1Ch 
mov	dword ptr [esp], 1 
call	_silc_calloc
test	eax, eax
jz	short locret_641D4124
mov	dword ptr [eax], offset	_silc_fd_stream_ops
mov	edx, [ebp+read_fd]
mov	[eax+10h], edx
mov	edx, [ebp+write_fd]
mov	[eax+14h], edx
leave
retn
align 4
public _silc_fd_stream_file2
push	ebp
mov	ebp, esp
push	esi
push	ebx
sub	esp, 10h
mov	esi, [ebp+read_file]
mov	eax, [ebp+write_file]
test	eax, eax
jz	short loc_641D41A0
mov	dword ptr [esp+4], 101h	
mov	[esp], write_file_0 
call	_silc_file_open
mov	ebx, eax
test	eax, eax
js	short loc_641D41B8
test	read_file_0, read_file_0
jnz	short loc_641D4180
mov	dword ptr [esp+4], 1Ch
mov	dword ptr [esp], 1 
call	_silc_calloc
test	eax, eax
jz	short loc_641D41A4
mov	dword ptr [eax], offset	_silc_fd_stream_ops
mov	[eax+10h], fd1
mov	[eax+14h], fd2
add	esp, 10h
pop	fd2
pop	fd1
leave
retn
align 10h
mov	dword ptr [esp+4], 0 
mov	[esp], read_file_0 
call	_silc_file_open
mov	read_file_0, eax
test	eax, eax
jns	short loc_641D4154
xor	fd1, fd1
add	esp, 10h
pop	fd2
pop	fd1
leave
retn
align 10h
xor	ebx, ebx
jmp	short loc_641D4150
mov	[esp], fd1
call	_silc_file_close
mov	[esp], fd2	
call	_silc_file_close
xor	eax, eax
jmp	short loc_641D4198
mov	dword ptr [esp], 0
call	_silc_file_close
xor	eax, eax
jmp	short loc_641D4178
public _silc_fd_stream_file
push	ebp
mov	ebp, esp
sub	esp, 8
mov	eax, [ebp+filename]
mov	dl, byte ptr [ebp+reading]
mov	cl, [ebp+writing]
test	eax, eax
jz	short locret_641D41F8
test	cl, cl
jnz	short loc_641D41F4
xor	writing_0, writing_0
test	dl, dl
jnz	short loc_641D41E7
xor	filename_0, filename_0
mov	[ebp+reading], write_file
mov	[ebp+filename],	read_file
leave
jmp	_silc_fd_stream_file2
align 4
mov	writing_0, filename_0
jmp	short loc_641D41E1
leave
retn
align 4
public _silc_fd_stream_create
push	ebp
mov	ebp, esp
push	ebx
sub	esp, 14h
mov	ebx, [ebp+fd]
test	ebx, ebx
jle	short loc_641D4238
mov	dword ptr [esp+4], 1Ch 
mov	dword ptr [esp], 1 
call	_silc_calloc
test	eax, eax
jz	short loc_641D4232
mov	dword ptr [eax], offset	_silc_fd_stream_ops
mov	[eax+10h], fd_0
mov	dword ptr [eax+14h], 0
add	esp, 14h
pop	fd_0
leave
retn
xor	eax, eax
add	esp, 14h
pop	fd_0
leave
retn
public _silc_file_size
			
push	ebp
mov	ebp, esp
sub	esp, 48h
lea	eax, [ebp+stats]
mov	[esp+4], eax	
mov	eax, [ebp+filename]
mov	[esp], eax	
call	_stat
test	eax, eax
js	short loc_641D4264
mov	ret, [ebp+stats.st_size]
cdq
leave
retn
align 4
xor	ret, ret
xor	edx, edx
leave
retn
align 4
public _silc_file_open_mode
push	ebp
mov	ebp, esp
sub	esp, 8
leave
jmp	_open
public _silc_file_open
			
push	ebp
mov	ebp, esp
sub	esp, 18h
mov	dword ptr [esp+8], 180h
mov	eax, [ebp+flags]
mov	[esp+4], eax	
mov	eax, [ebp+filename]
mov	[esp], eax	
call	_open
leave
retn
align 4
public _silc_file_close
			
push	ebp
mov	ebp, esp
sub	esp, 8
leave
jmp	_close
public _silc_file_write
			
push	ebp
mov	ebp, esp
sub	esp, 8
leave
jmp	_write
public _silc_file_read
			
push	ebp
mov	ebp, esp
sub	esp, 8
leave
jmp	_read
public _silc_file_writefile_mode
push	ebp
mov	ebp, esp
push	edi
push	esi
push	ebx
sub	esp, 2Ch
mov	esi, [ebp+filename]
mov	edi, [ebp+buffer]
mov	eax, [ebp+len]
mov	[ebp+var_1C], eax
mov	eax, [ebp+mode]
mov	[esp+8], eax
mov	dword ptr [esp+4], 8301h 
mov	[esp], esi	
call	_open
mov	ebx, eax
cmp	eax, 0FFFFFFFFh
jz	short loc_641D4318
mov	fd, [ebp+var_1C]
mov	[esp+8], eax	
mov	[esp+4], buffer_0 
mov	[esp], fd	
call	_write
inc	eax
jz	short loc_641D4358
mov	[ebp+filename],	fd
add	esp, 2Ch
pop	fd
pop	filename_0
pop	buffer_0
leave
jmp	_close
call	__errno
mov	eax, [eax]
mov	[esp], eax	
call	_strerror
mov	[esp+8], eax
mov	[esp+4], filename_0
mov	dword ptr [esp], offset	aCannotOpenFile	
call	_silc_format
mov	[esp+4], eax	
mov	dword ptr [esp], 3 
call	_silc_log_output
mov	eax, 0FFFFFFFFh
add	esp, 2Ch
pop	fd
pop	filename_0
pop	buffer_0
leave
retn
call	__errno
mov	eax, [eax]
mov	[esp], eax	
call	_strerror
mov	[esp+8], eax
mov	[esp+4], filename_0
mov	dword ptr [esp], offset	aCannotWriteToF	
call	_silc_format
mov	[esp+4], eax	
mov	dword ptr [esp], 3 
call	_silc_log_output
mov	[esp], fd	
call	_silc_file_close
jmp	short loc_641D434B
align 4
public _silc_file_writefile
			
push	ebp
mov	ebp, esp
push	edi
push	esi
push	ebx
sub	esp, 2Ch
mov	esi, [ebp+filename]
mov	edi, [ebp+buffer]
mov	eax, [ebp+len]
mov	[ebp+var_1C], eax
mov	dword ptr [esp+8], 1A4h
mov	dword ptr [esp+4], 8301h 
mov	[esp], esi	
call	_open
mov	ebx, eax
cmp	eax, 0FFFFFFFFh
jz	short loc_641D43F4
mov	fd, [ebp+var_1C]
mov	[esp+8], eax	
mov	[esp+4], buffer_0 
mov	[esp], fd	
call	_write
inc	eax
jz	short loc_641D4434
mov	[ebp+filename],	fd
add	esp, 2Ch
pop	fd
pop	filename_0
pop	buffer_0
leave
jmp	_close
align 4
call	__errno
mov	eax, [eax]
mov	[esp], eax	
call	_strerror
mov	[esp+8], eax
mov	[esp+4], filename_0
mov	dword ptr [esp], offset	aCannotOpenFile	
call	_silc_format
mov	[esp+4], eax	
mov	dword ptr [esp], 3 
call	_silc_log_output
mov	eax, 0FFFFFFFFh
add	esp, 2Ch
pop	fd
pop	filename_0
pop	buffer_0
leave
retn
call	__errno
mov	eax, [eax]
mov	[esp], eax	
call	_strerror
mov	[esp+8], eax
mov	[esp+4], filename_0
mov	dword ptr [esp], offset	aCannotWriteToF	
call	_silc_format
mov	[esp+4], eax	
mov	dword ptr [esp], 3 
call	_silc_log_output
mov	[esp], fd	
call	_silc_file_close
jmp	short loc_641D4427
align 4
public _silc_file_readfile
			
push	ebp
mov	ebp, esp
push	edi
push	esi
push	ebx
sub	esp, 1Ch
mov	dword ptr [esp+8], 180h
mov	dword ptr [esp+4], 0 
mov	eax, [ebp+filename]
mov	[esp], eax	
call	_open
mov	ebx, eax
test	eax, eax
js	loc_641D4534
mov	dword ptr [esp+8], 2 
mov	dword ptr [esp+4], 0 
mov	[esp], fd	
call	_lseek
mov	esi, eax
test	eax, eax
js	short loc_641D4528
mov	dword ptr [esp+8], 0 
mov	dword ptr [esp+4], 0 
mov	[esp], fd	
call	_lseek
test	eax, eax
js	short loc_641D4528
mov	dword ptr [esp+4], 1 
lea	eax, [filelen+1]
mov	[esp], eax	
call	_silc_calloc
mov	edi, eax
mov	[esp+8], filelen 
mov	[esp+4], eax	
mov	[esp], fd	
call	_read
inc	eax
jz	short loc_641D457C
mov	[esp], fd	
call	_close
mov	byte ptr [buffer+filelen], 0FFh
mov	eax, [ebp+return_len]
test	eax, eax
jz	short loc_641D451C
mov	eax, [ebp+return_len]
mov	[eax], filelen
			
mov	eax, buffer
add	esp, 1Ch
pop	fd
pop	filelen
pop	buffer
leave
retn
align 4
			
mov	[esp], fd	
call	_silc_file_close
xor	edi, edi
jmp	short loc_641D451C
call	__errno
cmp	dword ptr [eax], 2
jnz	short loc_641D4542
xor	edi, edi
jmp	short loc_641D451C
call	__errno
mov	eax, [eax]
mov	[esp], eax	
call	_strerror
mov	[esp+8], eax
mov	eax, [ebp+filename]
mov	[esp+4], eax
mov	dword ptr [esp], offset	aCannotOpenFi_0	
call	_silc_format
mov	[esp+4], eax	
mov	dword ptr [esp], 3 
call	_silc_log_output
xor	edi, edi
jmp	short loc_641D451C
mov	dword ptr [buffer], 0
mov	[esp], fd	
call	_silc_file_close
call	__errno
mov	eax, [eax]
mov	[esp], eax	
call	_strerror
mov	[esp+8], eax
mov	eax, [ebp+filename]
mov	[esp+4], eax
mov	dword ptr [esp], offset	aCannotReadFrom	
call	_silc_format
mov	[esp+4], eax	
mov	dword ptr [esp], 3 
call	_silc_log_output
xor	buffer,	buffer
jmp	loc_641D451C
align 4
public _silc_fsm_init
			
push	ebp
mov	ebp, esp
mov	eax, [ebp+fsm]
mov	edx, [ebp+schedule]
test	edx, edx
jz	short loc_641D4608
mov	ecx, [ebp+fsm_context]
mov	[fsm_0+4], ecx
mov	dword ptr [fsm_0+14h], 0
mov	ecx, [ebp+destructor]
mov	[fsm_0+18h], ecx
mov	ecx, [ebp+destructor_context]
mov	[fsm_0+1Ch], ecx
mov	[fsm_0+8], schedule_0
and	byte ptr [fsm_0+28h], 7Ah
mov	dword ptr [fsm_0+24h], 0
mov	dword ptr [fsm_0+20h], 0
mov	al, 1
leave
retn
align 4
xor	fsm_0, fsm_0
leave
retn
public _silc_fsm_next
			
push	ebp
mov	ebp, esp
mov	edx, [ebp+next_state]
mov	eax, [ebp+fsm]
mov	[eax+10h], edx
leave
retn
align 4
public _silc_fsm_get_schedule
			
push	ebp
mov	ebp, esp
mov	eax, [ebp+fsm]
mov	eax, [eax+8]
leave
retn
align 4
public _silc_fsm_get_machine
push	ebp
mov	ebp, esp
mov	eax, [ebp+thread]
mov	eax, [eax+20h]
leave
retn
align 4
public _silc_fsm_is_started
push	ebp
mov	ebp, esp
mov	eax, [ebp+fsm]
mov	al, [eax+28h]
shr	al, 7
leave
retn
align 4
public _silc_fsm_set_context
push	ebp
mov	ebp, esp
mov	edx, [ebp+fsm_context]
mov	eax, [ebp+fsm]
mov	[eax+4], edx
leave
retn
align 4
public _silc_fsm_get_context
push	ebp
mov	ebp, esp
mov	eax, [ebp+fsm]
mov	eax, [eax+4]
leave
retn
align 10h
public _silc_fsm_set_state_context
push	ebp
mov	ebp, esp
mov	edx, [ebp+state_context]
mov	eax, [ebp+fsm]
mov	[eax+14h], edx
leave
retn
align 10h
public _silc_fsm_get_state_context
push	ebp
mov	ebp, esp
mov	eax, [ebp+fsm]
mov	eax, [eax+14h]
leave
retn
align 4
public _silc_fsm_thread
push	ebp
mov	ebp, esp
push	esi
push	ebx
sub	esp, 20h
mov	ebx, [ebp+context]
mov	esi, [ebx+8]
mov	[esp+4], old	
mov	dword ptr [esp], 0 
call	_silc_schedule_init
mov	[ebx+8], eax
test	eax, eax
jz	loc_641D4735
mov	dword ptr [esp+18h], 1 
mov	dword ptr [esp+14h], 0 
mov	dword ptr [esp+10h], 0 
mov	[esp+0Ch], context_0 
mov	dword ptr [esp+8], offset _silc_fsm_run	
mov	dword ptr [esp+4], 0 
mov	[esp], eax	
call	_silc_schedule_task_add
test	eax, eax
jz	short loc_641D4735
mov	eax, [context_0+8]
mov	[esp], eax	
call	_silc_schedule
mov	eax, [context_0+8]
mov	[esp], eax	
call	_silc_schedule_uninit
mov	[context_0+8], old
mov	dword ptr [esp+18h], 1 
mov	dword ptr [esp+14h], 0 
mov	dword ptr [esp+10h], 0 
mov	[esp+0Ch], context_0 
mov	dword ptr [esp+8], offset _silc_fsm_finish_fsm 
mov	dword ptr [esp+4], 0 
mov	[esp], old	
call	_silc_schedule_task_add
mov	eax, [context_0+8]
mov	[esp], eax	
call	_silc_schedule_wakeup
			
xor	eax, eax
add	esp, 20h
pop	context_0
pop	old
leave
retn
align 10h
public _silc_fsm_next_later
push	ebp
mov	ebp, esp
push	ebx
sub	esp, 24h
mov	ebx, [ebp+fsm]
mov	eax, [ebp+seconds]
mov	edx, [ebp+useconds]
mov	ecx, [ebp+next_state]
mov	[ebx+10h], ecx
test	eax, eax
jnz	short loc_641D475E
test	useconds_0, useconds_0
jz	short loc_641D47A4
mov	dword ptr [esp+18h], 1 
mov	[esp+14h], useconds_0 
mov	[esp+10h], seconds_0 
mov	[esp+0Ch], fsm_0 
mov	dword ptr [esp+8], offset _silc_fsm_run	
mov	dword ptr [esp+4], 0 
mov	seconds_0, [fsm_0+8]
mov	[esp], eax	
call	_silc_schedule_task_add
or	byte ptr [fsm_0+28h], 40h
mov	eax, [fsm_0+8]
mov	[ebp+fsm], eax
add	esp, 24h
pop	fsm_0
leave
jmp	_silc_schedule_wakeup
align 4
add	esp, 24h
pop	fsm_0
leave
retn
align 4
public _silc_fsm_event_signal
push	ebp
mov	ebp, esp
push	edi
push	esi
push	ebx
sub	esp, 2Ch
mov	esi, [ebp+event]
mov	eax, [esi]
mov	edi, [eax+24h]
mov	[esp], lock	
call	_silc_mutex_lock
mov	eax, [esi+18h]
lea	edx, [eax+1]
and	edx, 1FFFFFh
and	eax, 0FFE00000h
or	eax, edx
mov	[esi+18h], eax
mov	ebx, [esi+4]
mov	[esi+0Ch], ebx
and	byte ptr [esi+14h], 0FDh
jmp	loc_641D48A5
align 4
movzx	eax, word ptr [event_0+12h]
mov	eax, [ebx+eax]
mov	[event_0+0Ch], eax
mov	eax, [ebx+0Ch]
test	eax, eax
jz	short loc_641D4823
mov	[esp+0Ch], ebx	
mov	dword ptr [esp+8], offset _silc_fsm_event_timedout 
mov	dword ptr [esp+4], 0 
mov	eax, [ebx+8]
mov	[esp], eax	
call	_silc_schedule_task_del_by_all
mov	dword ptr [ebx+0Ch], 0
mov	dword ptr [esp+4], 8 
mov	dword ptr [esp], 1 
call	_silc_calloc
test	eax, eax
jz	short loc_641D48A2
mov	[eax], event_0
mov	[eax+4], ebx
mov	cx, [event_0+1Ah]
mov	edx, ecx
shr	dx, 5
inc	edx
and	edx, 3FFh
shl	edx, 5
and	ecx, 0FFFF801Fh
or	ecx, edx
mov	[event_0+1Ah], cx
mov	dword ptr [esp+18h], 1 
mov	dword ptr [esp+14h], 0 
mov	dword ptr [esp+10h], 0 
mov	[esp+0Ch], eax	
mov	dword ptr [esp+8], offset _silc_fsm_signal 
mov	dword ptr [esp+4], 0 
mov	eax, [ebx+8]
mov	[esp], eax	
call	_silc_schedule_task_add
mov	eax, [ebx+8]
mov	[esp], eax	
call	_silc_schedule_wakeup
mov	ebx, [event_0+0Ch]
test	ebx, ebx
jz	short loc_641D48C0
test	byte ptr [event_0+14h],	2
jnz	loc_641D47EC
movzx	eax, word ptr [event_0+10h]
mov	eax, [ebx+eax]
jmp	loc_641D47F3
align 10h
mov	[ebp+event], lock
add	esp, 2Ch
pop	ebx
pop	event_0
pop	lock
leave
jmp	_silc_mutex_unlock
align 10h
public _silc_fsm_event_wait
			
push	ebp
mov	ebp, esp
push	edi
push	esi
push	ebx
sub	esp, 4Ch
mov	ebx, [ebp+event]
mov	esi, [ebp+fsm]
mov	eax, [ebx]
mov	eax, [eax+24h]
mov	[ebp+lock], eax
mov	[esp], eax	
call	_silc_mutex_lock
test	dword ptr [ebx+18h], 1FFFFFh
jnz	short loc_641D4940
mov	edx, [event_0+4]
test	edx, edx
jz	loc_641D49E4
movzx	eax, word ptr [event_0+10h]
mov	edx, [event_0+8]
mov	[edx+eax], fsm_0
test	byte ptr [event_0+14h],	1
jz	short loc_641D491D
movzx	edx, word ptr [event_0+12h]
mov	ecx, [event_0+8]
mov	[fsm_0+edx], ecx
mov	[event_0+8], fsm_0
mov	dword ptr [fsm_0+eax], 0
add	dword ptr [event_0+14h], 4
mov	eax, [ebp+lock]
mov	[esp], eax	
call	_silc_mutex_unlock
xor	eax, eax
add	esp, 4Ch
pop	event_0
pop	fsm_0
pop	edi
leave
retn
mov	edx, [event_0+4]
test	prev, prev
jz	short loc_641D4967
cmp	fsm_0, prev
jz	loc_641D4A02
movzx	edi, word ptr [event_0+10h]
jmp	short loc_641D495E
align 4
cmp	fsm_0, prev
jz	short loc_641D49B0
mov	edx, prev
lea	p, [prev+edi]
mov	eax, [p]
test	prev, prev
jnz	short loc_641D4958
cmp	[event_0+8], fsm_0
jz	loc_641D49F0
			
test	dword ptr [event_0+14h], 0FFFFFFFCh
jz	short loc_641D4994
mov	edi, [ebp+lock]
mov	[esp], edi	
call	_silc_mutex_unlock
mov	eax, 1
add	esp, 4Ch
pop	event_0
pop	fsm_0
pop	edi
leave
retn
align 4
mov	eax, [event_0+18h]
lea	prev, [eax+1FFFFFh]
and	edx, 1FFFFFh
and	eax, 0FFE00000h
or	eax, edx
mov	[event_0+18h], eax
jmp	short loc_641D4979
align 10h
mov	[ebp+var_3C], p
mov	prev, [fsm_0+edi]
mov	edi, [ebp+var_3C]
mov	[edi], eax
test	eax, eax
jz	short loc_641D49C5
test	byte ptr [event_0+14h],	1
jnz	short loc_641D49D8
			
cmp	[event_0+0Ch], fsm_0
jz	short loc_641D49F8
sub	dword ptr [event_0+14h], 4
cmp	[event_0+8], fsm_0
jnz	short loc_641D4970
jmp	short loc_641D49F0
align 4
movzx	p, word	ptr [event_0+12h]
mov	edi, [fsm_0+ecx]
mov	[eax+ecx], edi
jmp	short loc_641D49C5
mov	[event_0+4], fsm_0
movzx	eax, word ptr [event_0+10h]
jmp	loc_641D490D
			
mov	[event_0+8], prev
jmp	loc_641D4970
mov	p, [ebp+var_3C]
mov	eax, [ecx]
mov	[event_0+0Ch], eax
jmp	short loc_641D49CA
lea	ecx, [event_0+4]
mov	[ebp+var_3C], ecx
movzx	edi, word ptr [event_0+10h]
xor	prev, prev
jmp	short loc_641D49B3
public _silc_fsm_event_timedwait
push	ebp
mov	ebp, esp
push	edi
push	esi
push	ebx
sub	esp, 3Ch
mov	edi, [ebp+event]
mov	ebx, [ebp+fsm]
mov	esi, [ebp+ret_to]
mov	eax, [edi]
mov	eax, [eax+24h]
mov	[esp], lock	
mov	[ebp+mutex], lock
call	_silc_mutex_lock
mov	dl, [ebx+28h]
test	dl, 10h
mov	eax, [ebp+mutex]
jz	short loc_641D4A64
and	edx, 0FFFFFFEFh
mov	[fsm_0+28h], dl
test	ret_to_0, ret_to_0
jz	short loc_641D4A4A
mov	byte ptr [ret_to_0], 1
mov	[esp], eax	
call	_silc_mutex_unlock
mov	edx, 1
mov	eax, value
add	esp, 3Ch
pop	fsm_0
pop	ret_to_0
pop	event_0
leave
retn
align 4
mov	[esp], eax	
call	_silc_mutex_unlock
mov	[esp+4], fsm_0	
mov	[esp], event_0	
call	_silc_fsm_event_wait
mov	edx, eax
test	eax, eax
jz	short loc_641D4A90
test	ret_to_0, ret_to_0
jz	short loc_641D4A57
mov	byte ptr [ret_to_0], 0
mov	value, edx
add	esp, 3Ch
pop	fsm_0
pop	ret_to_0
pop	event_0
leave
retn
align 10h
mov	dword ptr [esp+18h], 1 
mov	value, [ebp+useconds]
mov	[esp+14h], eax	
mov	eax, [ebp+seconds]
mov	[esp+10h], eax	
mov	[esp+0Ch], fsm_0 
mov	dword ptr [esp+8], offset _silc_fsm_event_timedout 
mov	dword ptr [esp+4], 0 
mov	eax, [fsm_0+8]
mov	[esp], eax	
mov	[ebp+mutex], value
call	_silc_schedule_task_add
mov	[fsm_0+0Ch], event_0
mov	edx, [ebp+mutex]
jmp	short loc_641D4A7E
public _silc_fsm_event_free
push	ebp
mov	ebp, esp
sub	esp, 8
mov	eax, [ebp+event]
test	word ptr [eax+1Ah], 7FE0h
jz	short loc_641D4AE4
leave
retn
align 4
mov	edx, [event_0+14h]
shr	edx, 2
jnz	short locret_641D4AE1
leave
jmp	_silc_free
align 4
public _silc_fsm_alloc
push	ebp
mov	ebp, esp
push	ebx
sub	esp, 14h
mov	ebx, [ebp+schedule]
mov	dword ptr [esp+4], 2Ch 
mov	dword ptr [esp], 1 
call	_silc_calloc
test	eax, eax
jz	short loc_641D4B48
test	schedule_0, schedule_0
jz	short loc_641D4B50
mov	edx, [ebp+fsm_context]
mov	[fsm+4], edx
mov	dword ptr [fsm+14h], 0
mov	edx, [ebp+destructor]
mov	[fsm+18h], edx
mov	edx, [ebp+destructor_context]
mov	[fsm+1Ch], edx
mov	[fsm+8], schedule_0
and	byte ptr [fsm+28h], 7Ah
mov	dword ptr [fsm+24h], 0
mov	dword ptr [fsm+20h], 0
add	esp, 14h
pop	schedule_0
leave
retn
align 10h
mov	[esp], fsm	
call	_silc_free
xor	eax, eax
add	esp, 14h
pop	schedule_0
leave
retn
public _silc_fsm_event_init
push	ebp
mov	ebp, esp
push	edi
mov	edx, [ebp+event]
mov	ecx, 1Ch
xor	eax, eax
mov	edi, edx
rep stosb
mov	eax, [ebp+fsm]
mov	[edx], eax
mov	word ptr [edx+1Ah], 0
mov	dword ptr [edx+14h], 0
mov	byte ptr [edx+14h], 0
pop	event_0
leave
retn
align 4
public _silc_fsm_thread_init
push	ebp
mov	ebp, esp
push	esi
push	ebx
sub	esp, 10h
mov	ebx, [ebp+thread]
mov	edx, [ebp+fsm]
mov	cl, [ebp+real_thread]
mov	eax, [ebp+thread_context]
mov	[ebx+4], eax
mov	dword ptr [ebx+14h], 0
mov	eax, [ebp+destructor]
mov	[ebx+18h], eax
mov	eax, [ebp+destructor_context]
mov	[ebx+1Ch], eax
mov	eax, [edx+8]
mov	[ebx+8], eax
mov	al, [ebx+28h]
or	eax, 1
mov	esi, 1
and	esi, ecx
shl	esi, 1
and	eax, 79h
or	eax, esi
mov	[ebx+28h], al
mov	[ebx+20h], edx
mov	eax, [edx+20h]
mov	eax, [edx+20h]
inc	eax
mov	[edx+20h], eax
test	cl, cl
jz	short loc_641D4BEB
mov	real_thread_0, [fsm_0+24h]
test	ecx, ecx
jz	short loc_641D4BF4
			
add	esp, 10h
pop	thread_0
pop	esi
leave
retn
align 4
add	fsm_0, 24h
mov	[esp], edx	
call	_silc_mutex_alloc
test	al, al
jnz	short loc_641D4BEB
and	byte ptr [thread_0+28h], 0FDh
jmp	short loc_641D4BEB
align 4
public _silc_fsm_event_alloc
push	ebp
mov	ebp, esp
push	edi
sub	esp, 14h
mov	dword ptr [esp+4], 1Ch 
mov	dword ptr [esp], 1 
call	_silc_calloc
mov	edx, eax
test	eax, eax
jz	short loc_641D4C52
mov	ecx, 1Ch
xor	event, event
mov	edi, event
rep stosb
mov	eax, [ebp+fsm]
mov	[edx], eax
mov	word ptr [edx+1Ah], 0
mov	dword ptr [edx+14h], 0
mov	byte ptr [edx+14h], 0
or	byte ptr [edx+1Bh], 80h
mov	eax, event
add	esp, 14h
pop	edi
leave
retn
align 4
public _silc_fsm_thread_alloc
push	ebp
mov	ebp, esp
push	esi
push	ebx
sub	esp, 20h
mov	esi, [ebp+fsm]
mov	dl, [ebp+real_thread]
mov	dword ptr [esp+4], 2Ch 
mov	dword ptr [esp], 1 
mov	[ebp+var_C], dl
call	_silc_calloc
mov	ebx, eax
test	eax, eax
mov	dl, [ebp+var_C]
jz	short loc_641D4CD6
mov	thread,	[ebp+thread_context]
mov	[thread+4], eax
mov	dword ptr [thread+14h],	0
mov	eax, [ebp+destructor]
mov	[thread+18h], eax
mov	eax, [ebp+destructor_context]
mov	[thread+1Ch], eax
mov	eax, [fsm_0+8]
mov	[thread+8], eax
mov	al, [thread+28h]
or	eax, 1
mov	cl, dl
and	ecx, 1
shl	ecx, 1
and	eax, 79h
or	eax, ecx
mov	[thread+28h], al
mov	[thread+20h], fsm_0
mov	eax, [fsm_0+20h]
mov	eax, [fsm_0+20h]
inc	eax
mov	[fsm_0+20h], eax
test	dl, dl
jz	short loc_641D4CD6
mov	eax, [fsm_0+24h]
test	eax, eax
jz	short loc_641D4CE0
			
mov	eax, thread
add	esp, 20h
pop	thread
pop	esi
leave
retn
align 10h
add	fsm_0, 24h
mov	[esp], esi	
call	_silc_mutex_alloc
test	al, al
jnz	short loc_641D4CD6
and	byte ptr [thread+28h], 0FDh
jmp	short loc_641D4CD6
align 4
public _silc_fsm_free_final
push	ebp
mov	ebp, esp
push	ebx
sub	esp, 14h
mov	ebx, [ebp+context]
test	byte ptr [f+28h], 1
jnz	short loc_641D4D34
mov	eax, [f+24h]
test	eax, eax
jz	short loc_641D4D1D
mov	[esp], eax	
call	_silc_mutex_free
test	byte ptr [f+28h], 1
jnz	short loc_641D4D34
			
mov	dword ptr [f+20h], 0
			
mov	[ebp+schedule],	f
add	esp, 14h
pop	f
leave
jmp	_silc_free
align 4
			
mov	eax, [f+24h]
test	eax, eax
jz	short loc_641D4D24
test	word ptr [eax+1Ah], 7FE0h
jnz	short loc_641D4D24
mov	edx, [eax+14h]
shr	edx, 2
jnz	short loc_641D4D24
mov	[esp], eax	
call	_silc_free
test	byte ptr [f+28h], 1
jnz	short loc_641D4D24
jmp	short loc_641D4D1D
align 4
public _silc_fsm_thread_wait
push	ebp
mov	ebp, esp
push	edi
push	esi
push	ebx
sub	esp, 1Ch
mov	ebx, [ebp+thread]
mov	esi, [ebx+20h]
mov	dword ptr [esp+4], 1Ch 
mov	dword ptr [esp], 1 
call	_silc_calloc
mov	edx, eax
test	eax, eax
jz	short loc_641D4DC3
mov	ecx, 1Ch
xor	eax, eax
mov	edi, edx
rep stosb
mov	[edx], esi
mov	word ptr [edx+1Ah], 0
mov	dword ptr [edx+14h], 0
mov	byte ptr [edx+14h], 0
or	byte ptr [edx+1Bh], 80h
mov	[thread_0+24h],	edx
mov	eax, [ebp+fsm]
mov	[esp+4], eax	
mov	[esp], edx	
call	_silc_fsm_event_wait
mov	al, 1
add	esp, 1Ch
pop	thread_0
pop	esi
pop	edi
leave
retn
mov	dword ptr [thread_0+24h], 0
xor	eax, eax
jmp	short loc_641D4DBB
align 10h
public _silc_fsm_free
push	ebp
mov	ebp, esp
push	ebx
sub	esp, 24h
mov	ebx, [ebp+fsm]
test	byte ptr [ebx+28h], 1
jnz	short loc_641D4E24
mov	dword ptr [esp+18h], 1 
mov	dword ptr [esp+14h], 0 
mov	dword ptr [esp+10h], 0 
mov	[esp+0Ch], fsm_0 
mov	dword ptr [esp+8], offset _silc_fsm_free_final 
mov	dword ptr [esp+4], 0 
mov	eax, [fsm_0+8]
mov	[esp], eax	
call	_silc_schedule_task_add
test	eax, eax
jz	short loc_641D4E24
add	esp, 24h
pop	fsm_0
leave
retn
align 4
			
mov	eax, [fsm_0+8]
mov	[esp], eax	
call	_silc_schedule_get_context
test	byte ptr [fsm_0+28h], 1
jnz	short loc_641D4E60
mov	eax, [fsm_0+24h]
test	eax, eax
jz	short loc_641D4E4A
mov	[esp], eax	
call	_silc_mutex_free
test	byte ptr [fsm_0+28h], 1
jnz	short loc_641D4E60
			
mov	dword ptr [fsm_0+20h], 0
			
mov	[ebp+fsm], fsm_0
add	esp, 24h
pop	fsm_0
leave
jmp	_silc_free
align 10h
			
mov	eax, [fsm_0+24h]
test	eax, eax
jz	short loc_641D4E51
test	word ptr [eax+1Ah], 7FE0h
jnz	short loc_641D4E51
mov	edx, [eax+14h]
shr	edx, 2
jnz	short loc_641D4E51
mov	[esp], eax	
call	_silc_free
test	byte ptr [fsm_0+28h], 1
jnz	short loc_641D4E51
jmp	short loc_641D4E4A
align 4
public _silc_fsm_continue
			
push	ebp
mov	ebp, esp
push	ebx
sub	esp, 24h
mov	ebx, [ebp+fsm]
test	byte ptr [f+28h], 40h
jnz	short loc_641D4EE4
mov	dword ptr [esp+18h], 1 
mov	dword ptr [esp+14h], 0 
mov	dword ptr [esp+10h], 0 
mov	[esp+0Ch], f	
mov	dword ptr [esp+8], offset _silc_fsm_run	
mov	dword ptr [esp+4], 0 
mov	eax, [f+8]
mov	[esp], eax	
call	_silc_schedule_task_add
test	eax, eax
jz	short loc_641D4F0C
			
mov	eax, [f+8]
mov	[ebp+fsm], eax
add	esp, 24h
pop	f
leave
jmp	_silc_schedule_wakeup
align 4
mov	[esp+0Ch], f	
mov	dword ptr [esp+8], offset _silc_fsm_run	
mov	dword ptr [esp+4], 0 
mov	eax, [f+8]
mov	[esp], eax	
call	_silc_schedule_task_del_by_all
and	byte ptr [f+28h], 0BFh
jmp	short loc_641D4E98
align 4
mov	eax, [f+8]
mov	[esp], eax	
call	_silc_schedule_get_context
nop
mov	eax, [f+14h]
mov	[esp+8], eax
mov	eax, [f+4]
mov	[esp+4], eax
mov	[esp], f
call	dword ptr [f+10h]
test	eax, eax
jz	short loc_641D4F18
cmp	eax, 2
jz	short loc_641D4F54
cmp	eax, 3
jz	short loc_641D4F48
dec	eax
jnz	short loc_641D4ED3
mov	[esp], f	
call	_silc_fsm_continue
jmp	short loc_641D4ED3
align 4
mov	[esp], f	
call	_silc_fsm_finish
jmp	short loc_641D4ED3
align 4
and	byte ptr [f+28h], 0DFh
jmp	loc_641D4ED3
align 10h
public _silc_fsm_event_timedout
			
push	ebp
mov	ebp, esp
push	edi
push	esi
push	ebx
sub	esp, 4Ch
mov	ebx, [ebp+context]
mov	eax, [fsm+0Ch]
mov	eax, [eax]
mov	eax, [eax+24h]
mov	[ebp+lock], eax
mov	[esp], eax	
call	_silc_mutex_lock
mov	edi, [fsm+0Ch]
mov	edx, [edi+4]
test	prev, prev
jz	short loc_641D4FA7
cmp	fsm, prev
jz	loc_641D5017
movzx	esi, word ptr [edi+10h]
jmp	short loc_641D4F9E
align 4
cmp	fsm, prev
jz	short loc_641D4FD8
mov	edx, prev
lea	p, [prev+esi]
mov	eax, [p]
test	prev, prev
jnz	short loc_641D4F98
cmp	[edi+8], fsm
jz	short loc_641D5008
			
test	edi, edi
jz	short loc_641D4FC3
mov	[esp], fsm	
call	_silc_fsm_continue
or	byte ptr [fsm+28h], 10h
mov	dword ptr [fsm+0Ch], 0
mov	eax, [ebp+lock]
mov	[ebp+schedule],	eax
add	esp, 4Ch
pop	fsm
pop	esi
pop	edi
leave
jmp	_silc_mutex_unlock
align 4
mov	[ebp+var_3C], p
mov	prev, [fsm+esi]
mov	p, [ebp+var_3C]
mov	[ecx], eax
test	eax, eax
jz	short loc_641D4FF7
test	byte ptr [edi+14h], 1
jz	short loc_641D4FF7
movzx	esi, word ptr [edi+12h]
mov	ecx, [fsm+esi]
mov	[eax+esi], ecx
			
cmp	[edi+0Ch], fsm
jz	short loc_641D500D
sub	dword ptr [edi+14h], 4
mov	edi, [fsm+0Ch]
cmp	[edi+8], fsm
jnz	short loc_641D4FAC
mov	[edi+8], prev
jmp	short loc_641D4FAC
mov	esi, [ebp+var_3C]
mov	eax, [esi]
mov	[edi+0Ch], eax
jmp	short loc_641D4FFC
lea	eax, [edi+4]
mov	[ebp+var_3C], eax
movzx	esi, word ptr [edi+10h]
xor	prev, prev
jmp	short loc_641D4FDB
align 4
public _silc_fsm_finish_fsm
			
push	ebp
mov	ebp, esp
push	edi
push	esi
push	ebx
sub	esp, 4Ch
mov	eax, [ebp+context]
mov	[ebp+fsm], eax
mov	dword ptr [eax+10h], 0
test	byte ptr [eax+28h], 1
jz	loc_641D5130
mov	edi, [eax+24h]
test	edi, edi
jz	loc_641D5101
mov	eax, [edi]
mov	eax, [eax+24h]
mov	[ebp+mutex], eax
mov	[esp], eax	
call	_silc_mutex_lock
mov	ebx, [edi+4]
mov	[edi+0Ch], ebx
and	byte ptr [edi+14h], 0FDh
lea	edx, [edi+4]
mov	[ebp+var_24], edx
test	ebx, ebx
jz	short loc_641D50DA
nop
test	byte ptr [edi+14h], 2
jz	loc_641D5180
movzx	eax, word ptr [edi+12h]
mov	eax, [ebx+eax]
mov	[edi+0Ch], eax
mov	eax, [edi+4]
test	eax, eax
jz	short loc_641D50B7
cmp	ebx, eax
jz	loc_641D51CF
movzx	esi, word ptr [edi+10h]
jmp	short loc_641D50AE
align 4
cmp	ebx, ecx
jz	loc_641D518C
mov	eax, ecx
lea	edx, [eax+esi]
mov	ecx, [edx]
test	ecx, ecx
jnz	short loc_641D50A4
cmp	ebx, [edi+8]
jz	loc_641D51BD
			
mov	[esp], ebx	
call	_silc_fsm_continue
mov	eax, [ebx+8]
mov	[esp], eax	
call	_silc_schedule_wakeup
mov	ebx, [edi+0Ch]
test	ebx, ebx
jnz	short loc_641D5078
mov	esi, [ebp+mutex]
mov	[esp], esi	
call	_silc_mutex_unlock
mov	edx, [ebp+fsm]
mov	eax, [edx+24h]
test	word ptr [eax+1Ah], 7FE0h
jz	loc_641D51F5
			
mov	ecx, [ebp+fsm]
mov	dword ptr [ecx+24h], 0
mov	esi, [ebp+fsm]
mov	eax, [esi+20h]
mov	edx, [eax+20h]
mov	edx, [eax+20h]
dec	edx
mov	[eax+20h], edx
mov	eax, [esi+18h]
test	eax, eax
jz	short loc_641D5125
mov	edx, [esi+20h]
test	byte ptr [edx+28h], 8
jz	loc_641D51DD
			
add	esp, 4Ch
pop	ebx
pop	esi
pop	edi
leave
retn
align 10h
mov	edx, [ebp+fsm]
mov	eax, [edx+20h]
test	eax, eax
jnz	loc_641D520E
mov	ecx, [ebp+fsm]
mov	eax, [ecx+24h]
test	eax, eax
jz	short loc_641D515A
mov	[esp], eax	
call	_silc_mutex_free
mov	esi, [ebp+fsm]
mov	dword ptr [esi+24h], 0
mov	edx, [ebp+fsm]
mov	eax, [edx+18h]
test	eax, eax
jz	short loc_641D5125
mov	ecx, edx
mov	edx, [edx+1Ch]
mov	[ebp+type], edx
mov	edx, [ecx+4]
mov	[ebp+app_context], edx
mov	[ebp+schedule],	ecx
add	esp, 4Ch
pop	ebx
pop	esi
pop	edi
leave
jmp	eax
align 10h
movzx	eax, word ptr [edi+10h]
mov	eax, [ebx+eax]
jmp	loc_641D5089
mov	[ebp+var_3C], edx
mov	ecx, [ebx+esi]
mov	esi, [ebp+var_3C]
mov	[esi], ecx
test	ecx, ecx
jz	short loc_641D51AB
test	byte ptr [edi+14h], 1
jz	short loc_641D51AB
movzx	edx, word ptr [edi+12h]
mov	esi, [ebx+edx]
mov	[ecx+edx], esi
			
cmp	ebx, [edi+0Ch]
jz	short loc_641D51C5
sub	dword ptr [edi+14h], 4
cmp	ebx, [edi+8]
jnz	loc_641D50C0
mov	[edi+8], eax
jmp	loc_641D50C0
mov	ecx, [ebp+var_3C]
mov	edx, [ecx]
mov	[edi+0Ch], edx
jmp	short loc_641D51B0
movzx	esi, word ptr [edi+10h]
mov	ecx, [ebp+var_24]
mov	[ebp+var_3C], ecx
xor	eax, eax
jmp	short loc_641D518F
mov	edx, [esi+1Ch]
mov	[ebp+type], edx
mov	edx, [esi+4]
mov	[ebp+app_context], edx
mov	[ebp+schedule],	esi
add	esp, 4Ch
pop	ebx
pop	esi
pop	edi
leave
jmp	eax
mov	edx, [eax+14h]
shr	edx, 2
jnz	loc_641D50F7
mov	[esp], eax	
call	_silc_free
jmp	loc_641D50F7
mov	dword ptr [esp+8], 1E4h	
mov	dword ptr [esp+4], offset aSilcfsm_c 
mov	dword ptr [esp], offset	aSilc_atomic_ge	
call	__assert
align 4
public _silc_fsm_finish
			
push	ebp
mov	ebp, esp
push	ebx
sub	esp, 24h
mov	ebx, [ebp+fsm]
mov	al, [ebx+28h]
and	eax, 7Fh
or	eax, 8
mov	[ebx+28h], al
mov	[esp+0Ch], ebx	
mov	dword ptr [esp+8], offset _silc_fsm_run	
mov	dword ptr [esp+4], 0 
mov	eax, [ebx+8]
mov	[esp], eax	
call	_silc_schedule_task_del_by_all
mov	al, [ebx+28h]
mov	dl, al
and	edx, 0FFFFFFBFh
mov	[ebx+28h], dl
mov	dl, al
and	edx, 3
cmp	dl, 3
jz	short loc_641D52F4
test	al, 20h
jz	short loc_641D52B0
mov	eax, [fsm_0+8]
mov	[esp], eax	
call	_silc_schedule_get_context
mov	[esp+10h], fsm_0 
mov	dword ptr [esp+0Ch], 0 
mov	dword ptr [esp+8], 0 
mov	[esp+4], eax	
mov	eax, [fsm_0+8]
mov	[esp], eax	
call	_silc_fsm_finish_fsm
add	esp, 24h
pop	fsm_0
leave
retn
align 10h
mov	dword ptr [esp+18h], 1 
mov	dword ptr [esp+14h], 0 
mov	dword ptr [esp+10h], 0 
mov	[esp+0Ch], fsm_0 
mov	dword ptr [esp+8], offset _silc_fsm_finish_fsm 
mov	dword ptr [esp+4], 0 
mov	eax, [fsm_0+8]
mov	[esp], eax	
call	_silc_schedule_task_add
test	eax, eax
jz	short loc_641D527A
add	esp, 24h
pop	fsm_0
leave
retn
align 4
mov	eax, [fsm_0+8]
mov	[esp], eax	
call	_silc_schedule_stop
mov	eax, [fsm_0+8]
mov	[ebp+fsm], eax
add	esp, 24h
pop	fsm_0
leave
jmp	_silc_schedule_wakeup
align 10h
public _silc_fsm_run
			
push	ebp
mov	ebp, esp
push	ebx
sub	esp, 14h
mov	ebx, [ebp+context]
xchg	ax, ax
mov	eax, [fsm+14h]
mov	[esp+8], eax
mov	eax, [fsm+4]
mov	[esp+4], eax
mov	[esp], fsm
call	dword ptr [fsm+10h]
test	eax, eax
jz	short loc_641D531C
cmp	eax, 2
jz	short loc_641D5368
cmp	eax, 3
jz	short loc_641D5358
dec	eax
jz	short loc_641D5348
add	esp, 14h
pop	fsm
leave
retn
align 4
mov	[ebp+schedule],	fsm
add	esp, 14h
pop	fsm
leave
jmp	_silc_fsm_continue
align 4
mov	[ebp+schedule],	fsm
add	esp, 14h
pop	fsm
leave
jmp	_silc_fsm_finish
align 4
and	byte ptr [fsm+28h], 0DFh
add	esp, 14h
pop	fsm
leave
retn
align 4
public _silc_fsm_continue_sync
			
push	ebp
mov	ebp, esp
push	ebx
sub	esp, 14h
mov	ebx, [ebp+fsm]
test	byte ptr [f+28h], 40h
jz	short loc_641D53A7
mov	[esp+0Ch], f	
mov	dword ptr [esp+8], offset _silc_fsm_run	
mov	dword ptr [esp+4], 0 
mov	eax, [f+8]
mov	[esp], eax	
call	_silc_schedule_task_del_by_all
and	byte ptr [f+28h], 0BFh
mov	eax, [f+8]
mov	[esp], eax	
call	_silc_schedule_get_context
xchg	ax, ax
mov	eax, [f+14h]
mov	[esp+8], eax
mov	eax, [f+4]
mov	[esp+4], eax
mov	[esp], f
call	dword ptr [f+10h]
test	eax, eax
jz	short loc_641D53B4
cmp	eax, 2
jz	short loc_641D5400
cmp	eax, 3
jz	short loc_641D53F0
dec	eax
jz	short loc_641D53E0
add	esp, 14h
pop	f
leave
retn
align 10h
mov	[ebp+fsm], f
add	esp, 14h
pop	f
leave
jmp	_silc_fsm_continue
align 10h
mov	[ebp+fsm], f
add	esp, 14h
pop	f
leave
jmp	_silc_fsm_finish
align 10h
and	byte ptr [f+28h], 0DFh
add	esp, 14h
pop	f
leave
retn
align 4
public _silc_fsm_signal
push	ebp
mov	ebp, esp
push	esi
push	ebx
sub	esp, 10h
mov	ebx, [ebp+context]
mov	eax, [p]
mov	eax, [eax]
mov	esi, [eax+24h]
mov	[esp], lock	
call	_silc_mutex_lock
mov	eax, [p]
test	dword ptr [eax+18h], 1FFFFFh
jz	loc_641D54BC
mov	edx, [eax+4]
mov	[eax+0Ch], edx
and	byte ptr [eax+14h], 0FDh
mov	eax, [p]
lea	lock, [lock+0]
mov	edx, [eax+0Ch]
test	edx, edx
jz	short loc_641D54BC
test	byte ptr [eax+14h], 2
jz	short loc_641D54B0
movzx	ecx, word ptr [eax+12h]
mov	ecx, [edx+ecx]
mov	[eax+0Ch], ecx
cmp	[p+4], edx
jnz	short loc_641D5444
mov	[esp], lock	
call	_silc_mutex_unlock
mov	eax, [p+4]
mov	[esp], eax	
call	_silc_fsm_continue_sync
mov	ecx, [p]
mov	dx, [ecx+1Ah]
mov	eax, edx
shr	ax, 5
add	eax, 3FFh
and	eax, 3FFh
shl	eax, 5
and	edx, 0FFFF801Fh
or	edx, eax
mov	[ecx+1Ah], dx
and	edx, 0FFFFFFE0h
cmp	dx, 8000h
jz	short loc_641D54C8
mov	[ebp+schedule],	p
add	esp, 10h
pop	p
pop	lock
leave
jmp	_silc_free
movzx	ecx, word ptr [eax+10h]
mov	ecx, [edx+ecx]
jmp	short loc_641D5458
align 4
			
mov	[esp], lock	
call	_silc_mutex_unlock
jmp	short loc_641D5473
align 4
mov	[esp], ecx	
call	_silc_fsm_event_free
mov	[ebp+schedule],	p
add	esp, 10h
pop	p
pop	lock
leave
jmp	_silc_free
align 10h
public _silc_fsm_start_real_thread
push	ebp
mov	ebp, esp
sub	esp, 8
mov	eax, [ebp+context]
and	byte ptr [eax+28h], 0FDh
mov	[ebp+schedule],	eax
leave
jmp	_silc_fsm_continue_sync
align 4
public _silc_fsm_start
			
push	ebp
mov	ebp, esp
push	ebx
sub	esp, 24h
mov	ebx, [ebp+fsm]
mov	al, [ebx+28h]
mov	edx, [ebp+start_state]
mov	[ebx+10h], edx
and	eax, 0FFFFFFD7h
or	eax, 0FFFFFF80h
mov	[ebx+28h], al
and	eax, 3
cmp	al, 3
jz	short loc_641D5564
mov	dword ptr [esp+18h], 1 
mov	dword ptr [esp+14h], 0 
mov	dword ptr [esp+10h], 0 
mov	[esp+0Ch], fsm_0 
mov	dword ptr [esp+8], offset _silc_fsm_run	
mov	dword ptr [esp+4], 0 
mov	eax, [fsm_0+8]
mov	[esp], eax	
call	_silc_schedule_task_add
test	eax, eax
jz	short loc_641D55C8
test	byte ptr [fsm_0+28h], 1
jnz	short loc_641D55B8
add	esp, 24h
pop	fsm_0
leave
retn
align 4
mov	dword ptr [esp+18h], 1 
mov	dword ptr [esp+14h], 0 
mov	dword ptr [esp+10h], 0 
mov	[esp+0Ch], fsm_0 
mov	dword ptr [esp+8], offset _silc_fsm_start_real_thread 
mov	dword ptr [esp+4], 0 
mov	eax, [fsm_0+8]
mov	[esp], eax	
call	_silc_schedule_task_add
test	eax, eax
jnz	short loc_641D55B8
mov	eax, [fsm_0+8]
mov	[esp], eax	
call	_silc_schedule_get_context
and	byte ptr [fsm_0+28h], 0FDh
mov	[esp], fsm_0	
call	_silc_fsm_continue_sync
xchg	ax, ax
			
mov	eax, [fsm_0+8]
mov	[ebp+fsm], eax
add	esp, 24h
pop	fsm_0
leave
jmp	_silc_schedule_wakeup
mov	eax, [fsm_0+8]
mov	[esp], eax	
call	_silc_schedule_get_context
mov	[esp+10h], fsm_0 
mov	dword ptr [esp+0Ch], 0 
mov	dword ptr [esp+8], 0 
mov	[esp+4], eax	
mov	eax, [fsm_0+8]
mov	[esp], eax	
call	_silc_fsm_run
jmp	loc_641D5556
align 4
public _silc_fsm_start_sync
push	ebp
mov	ebp, esp
push	ebx
sub	esp, 14h
mov	ebx, [ebp+fsm]
mov	al, [ebx+28h]
and	eax, 0FFFFFFF7h
mov	edx, [ebp+start_state]
mov	[ebx+10h], edx
or	eax, 0FFFFFFA0h
mov	[ebx+28h], al
and	eax, 3
cmp	al, 3
jz	short loc_641D5684
mov	eax, [fsm_0+8]
mov	[esp], eax	
call	_silc_schedule_get_context
xchg	ax, ax
mov	eax, [fsm_0+14h]
mov	[esp+8], eax
mov	eax, [fsm_0+4]
mov	[esp+4], eax
mov	[esp], fsm_0
call	dword ptr [fsm_0+10h]
test	eax, eax
jz	short loc_641D562C
cmp	eax, 2
jz	short loc_641D5678
cmp	eax, 3
jz	short loc_641D5658
dec	eax
jz	short loc_641D5668
add	esp, 14h
pop	fsm_0
leave
retn
align 4
mov	[ebp+fsm], fsm_0
add	esp, 14h
pop	fsm_0
leave
jmp	_silc_fsm_finish
align 4
mov	[ebp+fsm], fsm_0
add	esp, 14h
pop	fsm_0
leave
jmp	_silc_fsm_continue
align 4
and	byte ptr [fsm_0+28h], 0DFh
add	esp, 14h
pop	fsm_0
leave
retn
align 4
mov	eax, [fsm_0+8]
mov	[esp], eax	
call	_silc_schedule_get_context
and	byte ptr [fsm_0+28h], 0FDh
mov	[ebp+fsm], fsm_0
add	esp, 14h
pop	fsm_0
leave
jmp	_silc_fsm_continue_sync
public _silc_hash_table_size
push	ebp
mov	ebp, esp
mov	eax, [ebp+ht]
mov	eax, [eax+4]
mov	eax, ds:_primesize[eax*4]
leave
retn
align 4
public _silc_hash_table_count
			
push	ebp
mov	ebp, esp
mov	eax, [ebp+ht]
mov	eax, [eax+8]
leave
retn
align 10h
public _silc_hash_table_find_ext
			
push	ebp
mov	ebp, esp
push	edi
push	esi
push	ebx
sub	esp, 2Ch
mov	ecx, [ebp+ht]
mov	ebx, [ebp+key]
mov	eax, [ebp+hash]
mov	edx, [ebp+hash_user_context]
mov	edi, [ebp+compare]
mov	esi, [ebp+compare_user_context]
test	esi, esi
jz	loc_641D57C0
test	compare_0, compare_0
jz	loc_641D57D0
test	hash_user_context_0, hash_user_context_0
jz	loc_641D57DC
test	hash_0,	hash_0
jz	loc_641D57E8
			
mov	[esp+4], hash_user_context_0
mov	[esp], key_0
mov	[ebp+var_24], ht_0
call	hash_0
mov	[ebp+var_1C], eax
mov	ecx, [ebp+var_24]
mov	esi, [ecx+4]
xor	edx, edx
div	ds:_primesize[esi*4]
mov	eax, [ecx]
lea	edx, [eax+edx*4]
mov	[ebp+var_20], edx
test	compare_0, compare_0
jz	short loc_641D5798
mov	edx, [ebp+var_20]
mov	eax, [edx]
test	eax, eax
jz	loc_641D57B4
mov	esi, [ebp+compare_user_context]
mov	[ebp+var_1C], esi
mov	esi, key_0
mov	key_0, [ebp+var_20]
jmp	short loc_641D574C
align 10h
mov	entry, [entry]
mov	eax, [ebx+8]
test	eax, eax
jz	short loc_641D57B4
add	ebx, 8
mov	edx, [ebp+var_1C]
mov	[esp+8], edx
mov	[esp+4], key_0
mov	eax, [eax]
mov	[esp], eax
call	compare_0
test	al, al
jz	short loc_641D5740
mov	[ebp+var_20], entry
mov	edx, [entry]
test	edx, edx
jz	short loc_641D57B4
			
mov	ecx, [ebp+ret_key]
test	ecx, ecx
jz	short loc_641D5779
mov	eax, [edx]
mov	edx, [ebp+ret_key]
mov	[edx], eax
mov	eax, [ebp+ret_context]
test	eax, eax
jz	short loc_641D578D
mov	esi, [ebp+var_20]
mov	eax, [esi]
mov	eax, [eax+4]
mov	edx, [ebp+ret_context]
mov	[edx], eax
mov	al, 1
add	esp, 2Ch
pop	ebx
pop	esi
pop	compare_0
leave
retn
align 4
mov	edx, [edx]
test	edx, edx
jz	short loc_641D57B4
cmp	key_0, [edx]
jnz	short loc_641D57AA
jmp	short loc_641D576B
cmp	key_0, [eax]
jz	short loc_641D57F0
mov	edx, eax
mov	eax, [edx+8]
test	eax, eax
jnz	short loc_641D57A4
lea	esi, [esi+0]
			
xor	eax, eax
add	esp, 2Ch
pop	ebx
pop	esi
pop	compare_0
leave
retn
align 10h
mov	esi, [ht_0+1Ch]
mov	[ebp+compare_user_context], esi
test	compare_0, compare_0
jnz	loc_641D56EB
xchg	ax, ax
mov	compare_0, [ht_0+10h]
test	hash_user_context_0, hash_user_context_0
jnz	loc_641D56F3
nop
mov	hash_user_context_0, [ht_0+18h]
test	hash_0,	hash_0
jnz	loc_641D56FB
nop
mov	hash_0,	[ht_0+0Ch]
jmp	loc_641D56FB
add	edx, 8
mov	[ebp+var_20], edx
mov	edx, eax
jmp	loc_641D576B
align 10h
public _silc_hash_table_find_foreach_ext
push	ebp
mov	ebp, esp
push	edi
push	esi
push	ebx
sub	esp, 2Ch
mov	ebx, [ebp+key]
mov	eax, [ebp+hash]
mov	edx, [ebp+hash_user_context]
mov	esi, [ebp+compare_user_context]
test	esi, esi
jz	loc_641D5924
mov	ecx, [ebp+compare]
test	ecx, ecx
jz	loc_641D5938
test	hash_user_context_0, hash_user_context_0
jz	loc_641D594C
			
test	hash_0,	hash_0
jz	loc_641D58FC
mov	[esp+4], hash_user_context_0
mov	[esp], key_0
call	hash_0
mov	edx, [ebp+ht]
mov	edi, [edx+4]
xor	edx, edx
div	ds:_primesize[edi*4]
mov	ecx, edx
mov	edx, [ebp+ht]
mov	al, [edx+24h]
mov	dl, al
and	edx, 1
mov	[ebp+var_1E], dl
and	eax, 0FFFFFFFEh
mov	edx, [ebp+ht]
mov	[edx+24h], al
mov	eax, [edx]
mov	edi, [eax+ecx*4]
mov	eax, [ebp+compare]
test	eax, eax
jz	loc_641D5908
test	edi, edi
jz	short loc_641D58E4
mov	[ebp+var_1D], 0
mov	[ebp+var_1C], compare_user_context_0
jmp	short loc_641D588E
align 4
test	esi, esi
jz	short loc_641D58C6
mov	edi, esi
mov	esi, [edi+8]
mov	ecx, [ebp+var_1C]
mov	[esp+8], ecx	
mov	[esp+4], key_0	
mov	eax, [edi]
mov	[esp], eax	
call	[ebp+compare]
test	al, al
jz	short loc_641D5888
mov	eax, [ebp+foreach_user_context]
mov	[esp+8], eax	
mov	eax, [edi+4]
mov	[esp+4], eax	
mov	eax, [edi]
mov	[esp], eax	
call	[ebp+foreach]
mov	[ebp+var_1D], 1
test	esi, esi
jnz	short loc_641D588C
			
cmp	[ebp+var_1D], 0
jz	short loc_641D58E4
mov	edx, [ebp+ht]
mov	al, [edx+24h]
and	eax, 0FFFFFFFEh
or	al, [ebp+var_1E]
mov	[edx+24h], al
add	esp, 2Ch
pop	key_0
pop	esi
pop	edi
leave
retn
align 4
			
mov	ecx, [ebp+foreach_user_context]
mov	[esp+8], ecx	
mov	dword ptr [esp+4], 0 
mov	[esp], key_0	
call	[ebp+foreach]
jmp	short loc_641D58CC
align 4
mov	ecx, [ebp+ht]
mov	hash_0,	[ecx+0Ch]
jmp	loc_641D5838
align 4
test	edi, edi
jz	short loc_641D58E4
mov	[ebp+var_1D], 0
jmp	short loc_641D5916
align 4
mov	edi, esi
mov	esi, [edi+8]
cmp	key_0, [edi]
jz	short loc_641D5958
test	esi, esi
jnz	short loc_641D5914
jmp	short loc_641D58C6
align 4
mov	ecx, [ebp+ht]
mov	compare_user_context_0,	[ecx+1Ch]
mov	ecx, [ebp+compare]
test	ecx, ecx
jnz	loc_641D5828
lea	compare_user_context_0,	[compare_user_context_0+0]
mov	ecx, [ebp+ht]
mov	ecx, [ecx+10h]
mov	[ebp+compare], ecx
test	hash_user_context_0, hash_user_context_0
jnz	loc_641D5830
lea	compare_user_context_0,	[compare_user_context_0+0]
mov	ecx, [ebp+ht]
mov	hash_user_context_0, [ecx+18h]
jmp	loc_641D5830
align 4
mov	edx, [ebp+foreach_user_context]
mov	[esp+8], edx	
mov	eax, [edi+4]
mov	[esp+4], eax	
mov	[esp], key_0	
call	[ebp+foreach]
mov	[ebp+var_1D], 1
jmp	short loc_641D591D
align 4
public _silc_hash_table_foreach
push	ebp
mov	ebp, esp
push	edi
push	esi
push	ebx
sub	esp, 2Ch
mov	esi, [ebp+foreach]
mov	edi, [ebp+user_context]
test	esi, esi
jz	short loc_641D5A02
mov	edx, [ebp+ht]
mov	al, [edx+24h]
mov	bl, al
and	ebx, 1
mov	[ebp+var_1D], bl
and	eax, 0FFFFFFFEh
mov	[edx+24h], al
mov	ecx, [edx+4]
mov	ebx, ds:_primesize[ecx*4]
test	ebx, ebx
jz	short loc_641D59F6
xor	eax, eax
mov	[ebp+i], 0
xchg	ax, ax
mov	tmp, [ebp+ht]
mov	edx, [ebx]
mov	eax, [edx+eax*4]
test	e, e
jz	short loc_641D59E1
mov	ebx, [e+8]
mov	[esp+8], user_context_0
mov	edx, [e+4]
mov	[esp+4], edx
mov	e, [e]
mov	[esp], eax
call	foreach_0
mov	eax, tmp
test	tmp, tmp
jnz	short loc_641D59C0
mov	eax, [ebp+ht]
mov	ecx, [eax+4]
inc	[ebp+i]
mov	eax, [ebp+i]
cmp	ds:_primesize[ecx*4], eax
ja	short loc_641D59B4
mov	edx, [ebp+ht]
mov	al, [edx+24h]
and	eax, 0FFFFFFFEh
or	al, [ebp+var_1D]
mov	tmp, [ebp+ht]
mov	[ebx+24h], al
add	esp, 2Ch
pop	ebx
pop	foreach_0
pop	user_context_0
leave
retn
align 4
public _silc_hash_table_list
			
push	ebp
mov	ebp, esp
push	ebx
mov	ecx, [ebp+ht]
mov	eax, [ebp+htl]
mov	[eax], ecx
mov	dword ptr [eax+4], 0
and	dword ptr [eax+8], 80000000h
mov	bl, [ecx+24h]
shl	ebx, 7
mov	dl, [eax+0Bh]
and	edx, 7Fh
or	edx, ebx
mov	[eax+0Bh], dl
and	byte ptr [ecx+24h], 0FEh
pop	ebx
leave
retn
align 10h
public _silc_hash_table_list_reset
			
push	ebp
mov	ebp, esp
mov	eax, [ebp+htl]
mov	ecx, [eax]
mov	dl, [eax+0Bh]
shr	dl, 7
mov	al, [ecx+24h]
and	eax, 0FFFFFFFEh
or	eax, edx
mov	[ecx+24h], al
leave
retn
align 4
public _silc_hash_table_get
			
push	ebp
mov	ebp, esp
push	edi
push	esi
push	ebx
mov	esi, [ebp+htl]
mov	edx, [esi+4]
mov	ebx, [esi]
mov	eax, [ebx+8]
test	eax, eax
jz	loc_641D5AF8
test	edx, edx
jnz	short loc_641D5AB4
mov	edi, [htl_0+8]
mov	eax, edi
and	eax, 7FFFFFFFh
mov	entry, [ebx+4]
mov	ecx, ds:_primesize[edx*4]
cmp	ecx, eax
jbe	short loc_641D5AF8
mov	ebx, [ebx]
jmp	short loc_641D5A9C
align 4
cmp	eax, ecx
jnb	short loc_641D5AE0
mov	entry, [ebx+eax*4]
inc	eax
and	eax, 7FFFFFFFh
test	entry, entry
jz	short loc_641D5A98
and	edi, 80000000h
or	edi, eax
mov	[htl_0+8], edi
mov	eax, [entry+8]
mov	[htl_0+4], eax
mov	edi, [ebp+key]
test	edi, edi
jz	short loc_641D5AC8
mov	eax, [entry]
mov	ecx, [ebp+key]
mov	[ecx], eax
mov	htl_0, [ebp+context]
test	esi, esi
jz	short loc_641D5AD7
mov	eax, [entry+4]
mov	entry, [ebp+context]
mov	[edx], eax
mov	al, 1
pop	ebx
pop	esi
pop	edi
leave
retn
align 10h
and	eax, 7FFFFFFFh
and	edi, 80000000h
or	edi, eax
mov	[htl_0+8], edi
xor	eax, eax
pop	ebx
pop	htl_0
pop	edi
leave
retn
align 4
			
xor	eax, eax
pop	ebx
pop	htl_0
pop	edi
leave
retn
align 10h
public _silc_hash_table_free
			
push	ebp
mov	ebp, esp
push	edi
push	esi
push	ebx
sub	esp, 2Ch
mov	edi, [ebp+ht]
mov	ecx, [edi+4]
mov	edx, ds:_primesize[ecx*4]
test	edx, edx
jz	short loc_641D5B8C
mov	eax, [ht_0]
xor	edx, edx
mov	[ebp+i], 0
lea	esi, [esi+0]
mov	e, [eax+edx*4]
test	e, e
jnz	short loc_641D5B36
jmp	short loc_641D5B66
align 4
mov	ebx, e
mov	eax, [ht_0+14h]
test	eax, eax
jz	short loc_641D5B52
mov	edx, [ht_0+20h]
mov	[esp+8], edx
mov	edx, [e+4]
mov	[esp+4], edx
mov	edx, [e]
mov	[esp], edx
call	eax
mov	esi, [e+8]
mov	[esp], ebx	
call	_silc_free
test	e, e
jnz	short loc_641D5B34
mov	eax, [ht_0]
mov	ecx, [ht_0+4]
inc	[ebp+i]
mov	edx, [ebp+i]
cmp	ds:_primesize[ecx*4], edx
ja	short loc_641D5B28
mov	[esp], eax	
call	_silc_free
mov	[ebp+ht], ht_0
add	esp, 2Ch
pop	e
pop	e
pop	ht_0
leave
jmp	_silc_free
mov	eax, [ht_0]
jmp	short loc_641D5B75
public _silc_hash_table_alloc
			
push	ebp
mov	ebp, esp
push	edi
push	esi
push	ebx
sub	esp, 2Ch
mov	edi, [ebp+hash]
mov	dl, [ebp+auto_rehash]
test	edi, edi
jnz	short loc_641D5BB0
xor	ht, ht
mov	eax, ht
add	esp, 2Ch
pop	size_index
pop	ht
pop	hash_0
leave
retn
align 10h
mov	dword ptr [esp+4], 28h 
mov	dword ptr [esp], 1 
mov	[ebp+var_20], dl
call	_silc_calloc
mov	esi, eax
test	eax, eax
mov	dl, [ebp+var_20]
jz	short loc_641D5BA5
mov	ecx, [ebp+table_size]
test	ecx, ecx
jnz	short loc_641D5C40
mov	ebx, 2
mov	ecx, 0Bh
			
mov	dword ptr [esp+4], 4
mov	[esp], ecx	
mov	[ebp+var_20], dl
call	_silc_calloc
mov	[ht], eax
test	eax, eax
mov	dl, [ebp+var_20]
jz	loc_641D5C8E
mov	[ht+4],	size_index
mov	[ht+0Ch], hash_0
mov	eax, [ebp+compare]
mov	[ht+10h], eax
mov	eax, [ebp+destructor]
mov	[ht+14h], eax
mov	eax, [ebp+hash_user_context]
mov	[ht+18h], eax
mov	eax, [ebp+compare_user_context]
mov	[ht+1Ch], eax
mov	eax, [ebp+destructor_user_context]
mov	[ht+20h], eax
and	edx, 1
mov	al, [ht+24h]
and	eax, 0FFFFFFFEh
or	eax, edx
mov	[ht+24h], al
mov	eax, ht
add	esp, 2Ch
pop	size_index
pop	ht
pop	hash_0
leave
retn
align 10h
cmp	[ebp+table_size], 3
jbe	short loc_641D5C82
mov	ebx, 1
mov	ht, 1
mov	[ebp+var_1C], ht
mov	ht, [ebp+table_size]
jmp	short loc_641D5C62
lea	size_index, [eax+1]
cmp	size_index, 32h
jz	short loc_641D5C78
mov	eax, size_index
mov	ecx, ds:_primesize[eax*4]
cmp	table_size_0, ecx
ja	short loc_641D5C58
mov	table_size_0, [ebp+var_1C]
jmp	loc_641D5BE1
align 4
mov	table_size_0, [ebp+var_1C]
mov	size_index, eax
jmp	loc_641D5BE1
xor	ebx, ebx
mov	ecx, 3
jmp	loc_641D5BE1
mov	[esp], ht
call	_silc_free
jmp	loc_641D5BA3
align 4
public _silc_hash_table_find_by_context
push	ebp
mov	ebp, esp
push	edi
push	esi
push	ebx
sub	esp, 2Ch
mov	edi, [ebp+ht]
mov	ebx, [ebp+key]
mov	esi, [edi+1Ch]
mov	eax, [edi+10h]
mov	[ebp+var_20], eax
mov	eax, [edi+18h]
mov	[esp+4], eax
mov	[esp], ebx
call	dword ptr [edi+0Ch]
mov	ecx, [edi+4]
xor	edx, edx
div	ds:_primesize[ecx*4]
mov	ecx, edx
shl	ecx, 2
add	ecx, [edi]
mov	edi, [edi+10h]
test	edi, edi
jz	short loc_641D5D44
mov	eax, [ecx]
test	eax, eax
jz	short loc_641D5D38
mov	edi, ecx
mov	[ebp+var_1C], key_0
mov	key_0, [ebp+var_20]
jmp	short loc_641D5CF8
align 4
mov	edi, [edi]
mov	eax, [edi+8]
test	eax, eax
jz	short loc_641D5D38
add	edi, 8
mov	[esp+8], esi
mov	edx, [ebp+var_1C]
mov	[esp+4], edx
mov	eax, [eax]
mov	[esp], eax
call	ebx
test	al, al
jz	short loc_641D5CEC
mov	edi, [edi]
mov	eax, [ebp+context]
cmp	eax, [edi+4]
jnz	short loc_641D5CEE
mov	edx, edi
test	edx, edx
jz	short loc_641D5D38
mov	ebx, [ebp+ret_key]
test	ebx, ebx
jz	short loc_641D5D2C
mov	eax, [edx]
mov	edx, [ebp+ret_key]
mov	[edx], eax
mov	al, 1
add	esp, 2Ch
pop	ebx
pop	esi
pop	edi
leave
retn
align 4
			
xor	eax, eax
add	esp, 2Ch
pop	ebx
pop	esi
pop	edi
leave
retn
align 4
mov	eax, [ecx]
test	eax, eax
jz	short loc_641D5D38
mov	esi, [ebp+context]
jmp	short loc_641D5D5C
align 10h
			
mov	edx, [eax+8]
test	edx, edx
jz	short loc_641D5D38
lea	ecx, [eax+8]
mov	eax, edx
cmp	key_0, [eax]
jnz	short loc_641D5D50
cmp	context_0, [eax+4]
jnz	short loc_641D5D50
mov	edx, [ecx]
jmp	short loc_641D5D1A
align 4
public _silc_hash_table_find_by_context_ext
push	ebp
mov	ebp, esp
push	edi
push	esi
push	ebx
sub	esp, 3Ch
mov	ecx, [ebp+ht]
mov	edx, [ebp+hash]
mov	eax, [ebp+hash_user_context]
mov	edi, [ebp+compare]
mov	esi, [ebp+compare_user_context]
test	esi, esi
jz	loc_641D5E68
test	compare_0, compare_0
jz	loc_641D5E74
test	hash_user_context_0, hash_user_context_0
jz	loc_641D5E80
test	hash_0,	hash_0
jz	loc_641D5E8C
			
mov	[esp+4], hash_user_context_0
mov	hash_user_context_0, [ebp+key]
mov	[esp], eax
mov	[ebp+var_20], ht_0
call	hash_0
mov	ecx, [ebp+var_20]
mov	ebx, [ecx+4]
xor	edx, edx
div	ds:_primesize[ebx*4]
mov	[ebp+var_1C], edx
shl	edx, 2
add	entry, [ecx]
mov	ecx, [ecx+10h]
test	ecx, ecx
jz	short loc_641D5E3C
mov	eax, [entry]
test	eax, eax
jz	short loc_641D5E30
mov	[ebp+var_1C], compare_user_context_0
mov	compare_user_context_0,	[ebp+key]
mov	ebx, entry
jmp	short loc_641D5DF0
align 4
mov	entry, [entry]
mov	eax, [ebx+8]
test	eax, eax
jz	short loc_641D5E30
add	ebx, 8
mov	edx, [ebp+var_1C]
mov	[esp+8], edx
mov	[esp+4], key_0
mov	eax, [eax]
mov	[esp], eax
call	compare_0
test	al, al
jz	short loc_641D5DE4
mov	entry, [entry]
mov	eax, [ebp+context]
cmp	eax, [ebx+4]
jnz	short loc_641D5DE6
mov	edx, ebx
test	edx, edx
jz	short loc_641D5E30
mov	eax, [ebp+ret_key]
test	eax, eax
jz	short loc_641D5E24
mov	eax, [edx]
mov	edx, [ebp+ret_key]
mov	[edx], eax
mov	al, 1
add	esp, 3Ch
pop	ebx
pop	esi
pop	compare_0
leave
retn
align 10h
			
xor	eax, eax
add	esp, 3Ch
pop	ebx
pop	esi
pop	compare_0
leave
retn
align 4
mov	eax, [entry]
test	eax, eax
jz	short loc_641D5E30
mov	ecx, entry
mov	ebx, [ebp+key]
mov	compare_user_context_0,	[ebp+context]
jmp	short loc_641D5E58
			
mov	edx, [eax+8]
test	edx, edx
jz	short loc_641D5E30
lea	entry, [eax+8]
mov	eax, edx
cmp	key_0, [eax]
jnz	short loc_641D5E4C
cmp	context_0, [eax+4]
jnz	short loc_641D5E4C
mov	edx, [entry]
jmp	short loc_641D5E12
align 4
mov	compare_user_context_0,	[ht_0+1Ch]
test	compare_0, compare_0
jnz	loc_641D5D94
nop
mov	compare_0, [ht_0+10h]
test	hash_user_context_0, hash_user_context_0
jnz	loc_641D5D9C
nop
mov	hash_user_context_0, [ht_0+18h]
test	hash_0,	hash_0
jnz	loc_641D5DA4
nop
mov	hash_0,	[ht_0+0Ch]
jmp	loc_641D5DA4
public _silc_hash_table_find
			
push	ebp
mov	ebp, esp
push	edi
push	esi
push	ebx
sub	esp, 2Ch
mov	edi, [ebp+ht]
mov	ebx, [ebp+key]
mov	esi, [edi+1Ch]
mov	eax, [edi+10h]
mov	[ebp+var_20], eax
mov	eax, [edi+18h]
mov	[esp+4], eax
mov	[esp], ebx
call	dword ptr [edi+0Ch]
mov	ecx, [edi+4]
xor	edx, edx
div	ds:_primesize[ecx*4]
mov	ecx, edx
shl	ecx, 2
add	ecx, [edi]
mov	edi, [ebp+var_20]
test	edi, edi
jz	short loc_641D5F38
mov	eax, [ecx]
test	eax, eax
jz	short loc_641D5F54
mov	edi, ecx
mov	[ebp+var_1C], key_0
mov	key_0, [ebp+var_20]
jmp	short loc_641D5EF0
align 4
mov	edi, [edi]
mov	eax, [edi+8]
test	eax, eax
jz	short loc_641D5F54
add	edi, 8
mov	[esp+8], esi
mov	edx, [ebp+var_1C]
mov	[esp+4], edx
mov	eax, [eax]
mov	[esp], eax
call	ebx
test	al, al
jz	short loc_641D5EE4
mov	ecx, edi
mov	edx, [edi]
test	edx, edx
jz	short loc_641D5F54
			
mov	esi, [ebp+ret_key]
test	esi, esi
jz	short loc_641D5F1C
mov	eax, [edx]
mov	edx, [ebp+ret_key]
mov	[edx], eax
mov	ebx, [ebp+ret_context]
test	ebx, ebx
jz	short loc_641D5F2D
mov	eax, [ecx]
mov	eax, [eax+4]
mov	edx, [ebp+ret_context]
mov	[edx], eax
mov	al, 1
add	esp, 2Ch
pop	ebx
pop	esi
pop	edi
leave
retn
align 4
mov	edx, [ecx]
test	edx, edx
jz	short loc_641D5F54
cmp	key_0, [edx]
jnz	short loc_641D5F4A
jmp	short loc_641D5F0E
cmp	key_0, [eax]
jz	short loc_641D5F5E
mov	edx, eax
mov	eax, [edx+8]
test	eax, eax
jnz	short loc_641D5F44
lea	esi, [esi+0]
			
xor	eax, eax
add	esp, 2Ch
pop	ebx
pop	esi
pop	edi
leave
retn
lea	ecx, [edx+8]
mov	edx, eax
jmp	short loc_641D5F0E
align 4
public _silc_hash_table_find_foreach
			
push	ebp
mov	ebp, esp
push	edi
push	esi
push	ebx
sub	esp, 3Ch
mov	esi, [ebp+ht]
mov	ebx, [ebp+key]
mov	eax, [esi+1Ch]
mov	[ebp+var_28], eax
mov	edx, [esi+10h]
mov	[ebp+var_1C], edx
mov	eax, [esi+18h]
mov	[esp+4], eax
mov	[esp], ebx
call	dword ptr [esi+0Ch]
mov	ecx, [esi+4]
xor	edx, edx
div	ds:_primesize[ecx*4]
mov	ecx, edx
mov	al, [esi+24h]
mov	dl, al
and	edx, 1
mov	[ebp+var_22], dl
and	eax, 0FFFFFFFEh
mov	[esi+24h], al
mov	eax, [esi]
mov	edi, [eax+ecx*4]
mov	eax, [ebp+var_1C]
test	eax, eax
jz	loc_641D604C
test	edi, edi
jz	short loc_641D6034
mov	[ebp+var_21], 0
mov	[ebp+var_2C], ht_0
mov	[ebp+var_20], key_0
mov	key_0, [ebp+var_28]
jmp	short loc_641D5FDA
align 4
test	esi, esi
jz	short loc_641D6012
mov	edi, esi
mov	esi, [edi+8]
mov	[esp+8], ebx
mov	eax, [ebp+var_20]
mov	[esp+4], eax
mov	eax, [edi]
mov	[esp], eax
call	[ebp+var_1C]
test	al, al
jz	short loc_641D5FD4
mov	edx, [ebp+user_context]
mov	[esp+8], edx	
mov	eax, [edi+4]
mov	[esp+4], eax	
mov	eax, [edi]
mov	[esp], eax	
call	[ebp+foreach]
mov	[ebp+var_21], 1
test	esi, esi
jnz	short loc_641D5FD8
mov	esi, [ebp+var_2C]
mov	ebx, [ebp+var_20]
cmp	[ebp+var_21], 0
jz	short loc_641D6034
mov	al, [ht_0+24h]
and	eax, 0FFFFFFFEh
or	al, [ebp+var_22]
mov	[ht_0+24h], al
add	esp, 3Ch
pop	key_0
pop	ht_0
pop	edi
leave
retn
align 4
			
mov	eax, [ebp+user_context]
mov	[esp+8], eax	
mov	dword ptr [esp+4], 0 
mov	[esp], key_0	
call	[ebp+foreach]
jmp	short loc_641D601E
align 4
test	edi, edi
jz	short loc_641D6034
mov	[ebp+var_21], 0
jmp	short loc_641D605E
align 4
			
test	eax, eax
jz	short loc_641D6018
mov	edi, eax
mov	eax, [edi+8]
cmp	key_0, [edi]
jnz	short loc_641D6058
mov	edx, [ebp+user_context]
mov	[esp+8], edx	
mov	edx, [edi+4]
mov	[esp+4], edx	
mov	[esp], key_0	
mov	[ebp+var_30], eax
call	[ebp+foreach]
mov	[ebp+var_21], 1
mov	eax, [ebp+var_30]
jmp	short loc_641D6058
align 4
public _silc_hash_table_rehash
			
push	ebp
mov	ebp, esp
push	edi
push	esi
push	ebx
sub	esp, 3Ch
mov	ebx, [ebp+ht]
mov	edx, [ebp+new_size]
test	edx, edx
jnz	loc_641D624B
mov	new_size_0, [ht_0+8]
xor	esi, esi
cmp	edx, 3
jbe	short loc_641D60CB
mov	si, 1
mov	eax, 1
jmp	short loc_641D60C2
lea	size_index, [eax+1]
cmp	size_index, 32h
jz	loc_641D6284
mov	eax, size_index
cmp	edx, ds:_primesize[eax*4]
ja	short loc_641D60B4
			
mov	edi, [ht_0+4]
cmp	edi, size_index
jz	loc_641D627C
mov	eax, [ht_0]
mov	[ebp+table], eax
mov	al, [ht_0+24h]
mov	dl, al
and	edx, 1
mov	[ebp+var_2D], dl
and	eax, 0FFFFFFFEh
mov	[ht_0+24h], al
mov	dword ptr [esp+4], 4 
mov	eax, ds:_primesize[size_index*4]
mov	[esp], eax	
call	_silc_calloc
mov	[ht_0],	eax
test	eax, eax
jz	loc_641D627C
mov	[ht_0+4], size_index
mov	dword ptr [ht_0+8], 0
mov	edi, ds:_primesize[edi*4]
mov	[ebp+var_2C], edi
test	edi, edi
jz	loc_641D6207
xor	eax, eax
mov	[ebp+i], 0
xchg	ax, ax
mov	edx, [ebp+table]
mov	size_index, [edx+eax*4]
test	e, e
jz	loc_641D61F8
xchg	ax, ax
mov	eax, [e+4]
mov	[ebp+var_20], eax
mov	edx, [e]
mov	[ebp+var_1C], edx
mov	eax, [ht_0+18h]
mov	[esp+4], eax
mov	[esp], edx
call	dword ptr [ht_0+0Ch]
mov	ecx, [ht_0+4]
xor	edx, edx
div	ds:_primesize[ecx*4]
lea	edx, ds:0[edx*4]
add	edx, [ht_0]
mov	edi, [edx]
test	edi, edi
jz	loc_641D6225
mov	eax, [edi+8]
test	eax, eax
jnz	short loc_641D6186
jmp	short loc_641D618F
mov	eax, edx
mov	edx, [eax+8]
test	edx, edx
jnz	short loc_641D6184
mov	edi, eax
mov	dword ptr [esp+4], 0Ch 
mov	dword ptr [esp], 1 
call	_silc_calloc
mov	[edi+8], eax
test	eax, eax
jz	short loc_641D61DF
mov	edx, [ebp+var_1C]
mov	[eax], edx
mov	edx, [ebp+var_20]
mov	[eax+4], edx
inc	dword ptr [ht_0+8]
test	byte ptr [ht_0+24h], 1
jz	short loc_641D61DF
mov	eax, [ht_0+8]
shr	eax, 1
mov	edx, [ht_0+4]
cmp	eax, ds:_primesize[edx*4]
jbe	short loc_641D61DF
mov	dword ptr [esp+4], 0 
mov	[esp], ht_0	
call	_silc_hash_table_rehash
			
mov	edi, [e+8]
mov	[esp], esi	
call	_silc_free
test	e, e
jz	short loc_641D61F8
mov	esi, e
jmp	loc_641D6144
align 4
			
inc	[ebp+i]
mov	eax, [ebp+i]
cmp	[ebp+var_2C], eax
ja	loc_641D6134
mov	al, [ht_0+24h]
and	eax, 0FFFFFFFEh
or	al, [ebp+var_2D]
mov	[ht_0+24h], al
mov	eax, [ebp+table]
mov	[ebp+ht], eax
add	esp, 3Ch
pop	ht_0
pop	size_index
pop	e
leave
jmp	_silc_free
mov	dword ptr [esp+4], 0Ch
mov	dword ptr [esp], 1 
mov	[ebp+var_34], edx
call	_silc_calloc
mov	edx, [ebp+var_34]
mov	[edx], eax
test	eax, eax
jnz	loc_641D61AA
jmp	short loc_641D61DF
xor	esi, esi
cmp	new_size_0, 3
jbe	loc_641D60CB
mov	si, 1
mov	eax, 1
jmp	short loc_641D626E
align 4
lea	size_index, [eax+1]
cmp	size_index, 32h
jz	short loc_641D6284
mov	eax, size_index
cmp	new_size_0, ds:_primesize[eax*4]
ja	short loc_641D6264
jmp	loc_641D60CB
			
add	esp, 3Ch
pop	ht_0
pop	size_index
pop	edi
leave
retn
			
mov	size_index, eax
jmp	loc_641D60CB
align 4
public _silc_hash_table_replace
push	ebp
mov	ebp, esp
push	edi
push	esi
push	ebx
sub	esp, 1Ch
mov	ebx, [ebp+ht]
mov	esi, [ebp+key]
mov	eax, [ebx+18h]
mov	[esp+4], eax
mov	[esp], esi
call	dword ptr [ebx+0Ch]
mov	ecx, [ebx+4]
xor	edx, edx
div	ds:_primesize[ecx*4]
mov	edi, edx
shl	edi, 2
add	edi, [ebx]
mov	edx, [edi]
mov	eax, edx
test	edx, edx
jz	short loc_641D6328
mov	ecx, [ht_0+14h]
test	ecx, ecx
jz	short loc_641D62E3
mov	eax, [ht_0+20h]
mov	[esp+8], eax
mov	eax, [edx+4]
mov	[esp+4], eax
mov	eax, [edx]
mov	[esp], eax
call	ecx
mov	edx, [edi]
mov	eax, edx
			
mov	[eax], key_0
mov	eax, [ebp+context]
mov	[edx+4], eax
test	byte ptr [ht_0+24h], 1
jz	short loc_641D6302
mov	context_0, [ht_0+8]
shr	eax, 1
mov	edx, [ht_0+4]
cmp	eax, ds:_primesize[edx*4]
ja	short loc_641D630C
mov	al, 1
add	esp, 1Ch
pop	ht_0
pop	key_0
pop	edi
leave
retn
mov	dword ptr [esp+4], 0
mov	[esp], ht_0	
call	_silc_hash_table_rehash
mov	al, 1
add	esp, 1Ch
pop	ht_0
pop	key_0
pop	edi
leave
retn
align 4
mov	dword ptr [esp+4], 0Ch 
mov	dword ptr [esp], 1 
call	_silc_calloc
mov	[edi], eax
test	eax, eax
jz	short loc_641D6304
inc	dword ptr [ht_0+8]
mov	edx, eax
jmp	short loc_641D62E3
align 4
public _silc_hash_table_add
			
push	ebp
mov	ebp, esp
push	edi
push	esi
push	ebx
sub	esp, 2Ch
mov	ebx, [ebp+ht]
mov	esi, [ebp+key]
mov	eax, [ebx+18h]
mov	[esp+4], eax
mov	[esp], esi
call	dword ptr [ebx+0Ch]
mov	ecx, [ebx+4]
xor	edx, edx
div	ds:_primesize[ecx*4]
lea	edx, ds:0[edx*4]
add	edx, [ebx]
mov	edi, [edx]
test	edi, edi
jz	short loc_641D63FA
mov	edx, [edi+8]
test	edx, edx
jnz	short loc_641D638E
jmp	short loc_641D6397
mov	edx, eax
mov	eax, [edx+8]
test	eax, eax
jnz	short loc_641D638C
mov	edi, edx
mov	dword ptr [esp+4], 0Ch 
mov	dword ptr [esp], 1 
call	_silc_calloc
mov	[edi+8], eax
test	eax, eax
jz	short loc_641D641C
mov	[eax], key_0
mov	edx, [ebp+context]
mov	[eax+4], edx
inc	dword ptr [ht_0+8]
test	byte ptr [ht_0+24h], 1
jz	short loc_641D63D4
mov	eax, [ht_0+8]
shr	eax, 1
mov	edx, [ht_0+4]
cmp	eax, ds:_primesize[edx*4]
ja	short loc_641D63E0
mov	al, 1
add	esp, 2Ch
pop	ht_0
pop	key_0
pop	edi
leave
retn
align 10h
mov	dword ptr [esp+4], 0 
mov	[esp], ht_0	
call	_silc_hash_table_rehash
mov	al, 1
add	esp, 2Ch
pop	ht_0
pop	key_0
pop	edi
leave
retn
mov	dword ptr [esp+4], 0Ch
mov	dword ptr [esp], 1 
mov	[ebp+var_1C], edx
call	_silc_calloc
mov	edx, [ebp+var_1C]
mov	[edx], eax
test	eax, eax
jnz	short loc_641D63B2
xchg	ax, ax
xor	eax, eax
add	esp, 2Ch
pop	ht_0
pop	key_0
pop	edi
leave
retn
align 4
public _silc_hash_table_del_by_context_ext
push	ebp
mov	ebp, esp
push	edi
push	esi
push	ebx
sub	esp, 2Ch
mov	ebx, [ebp+key]
mov	edx, [ebp+hash]
mov	eax, [ebp+hash_user_context]
mov	esi, [ebp+compare_user_context]
test	esi, esi
jz	loc_641D65D8
mov	ecx, [ebp+compare]
test	ecx, ecx
jz	loc_641D65EC
test	hash_user_context_0, hash_user_context_0
jz	loc_641D6600
test	hash_0,	hash_0
jz	loc_641D6610
			
mov	[esp+4], hash_user_context_0
mov	[esp], key_0
call	hash_0
mov	edx, [ebp+ht]
mov	edi, [edx+4]
xor	edx, edx
div	ds:_primesize[edi*4]
lea	edx, ds:0[edx*4]
mov	ecx, [ebp+ht]
add	entry, [ecx]
mov	edi, [ecx+10h]
test	edi, edi
jz	loc_641D65A0
mov	eax, [entry]
test	eax, eax
jz	short loc_641D64D6
xor	edi, edi
mov	[ebp+var_1C], compare_user_context_0
mov	compare_user_context_0,	key_0
mov	key_0, entry
jmp	short loc_641D64AC
mov	prev, [entry]
mov	eax, [prev+8]
test	eax, eax
jz	short loc_641D64D6
lea	entry, [prev+8]
mov	edx, [ebp+var_1C]
mov	[esp+8], edx	
mov	[esp+4], key_0	
mov	eax, [eax]
mov	[esp], eax	
call	[ebp+compare]
test	al, al
jz	short loc_641D64A0
mov	eax, [entry]
mov	ecx, [ebp+context]
cmp	ecx, [prev+4]
jz	short loc_641D64E0
mov	edi, prev
mov	prev, [edi+8]
test	eax, eax
jnz	short loc_641D64A9
			
xor	eax, eax
add	esp, 2Ch
pop	entry
pop	esi
pop	prev
leave
retn
mov	edx, entry
test	prev, prev
jz	short loc_641D64D6
test	edi, edi
jz	loc_641D661C
mov	dword ptr [prev+8], 0
mov	entry, [eax+8]
test	edx, edx
jz	short loc_641D64FF
mov	[edi+8], edx
			
mov	edx, [ebp+destructor]
test	edx, edx
jz	short loc_641D655C
mov	edx, [ebp+destructor_user_context]
mov	[esp+8], edx	
mov	edx, [prev+4]
mov	[esp+4], edx	
mov	edx, [prev]
mov	[esp], edx	
mov	[ebp+ptr], prev
call	[ebp+destructor]
mov	eax, [ebp+ptr]
			
mov	[esp], eax	
call	_silc_free
mov	edx, [ebp+ht]
mov	eax, [edx+8]
dec	eax
mov	[edx+8], eax
test	byte ptr [edx+24h], 1
jz	short loc_641D6550
lea	ecx, [eax+eax]
mov	entry, edx
mov	edx, [edx+4]
cmp	ecx, ds:_primesize[edx*4]
jnb	short loc_641D6550
cmp	eax, 0Bh
ja	short loc_641D6584
			
mov	al, 1
add	esp, 2Ch
pop	entry
pop	esi
pop	prev
leave
retn
align 4
mov	entry, [ebp+ht]
mov	edx, [ebx+14h]
test	edx, edx
jz	short loc_641D6522
mov	ecx, [ebx+20h]
mov	[esp+8], ecx
mov	ecx, [prev+4]
mov	[esp+4], ecx
mov	ecx, [prev]
mov	[esp], ecx
mov	[ebp+ptr], prev
call	edx
mov	eax, [ebp+ptr]
jmp	short loc_641D6522
align 4
mov	dword ptr [esp+4], 0 
mov	[esp], ebx	
call	_silc_hash_table_rehash
mov	al, 1
add	esp, 2Ch
pop	ebx
pop	esi
pop	prev
leave
retn
align 10h
mov	eax, [entry]
test	prev, prev
jz	loc_641D64D6
xor	edi, edi
mov	compare_user_context_0,	[ebp+context]
jmp	short loc_641D65C6
align 4
			
mov	ecx, [prev+8]
test	prev, prev
jz	loc_641D64D6
lea	entry, [eax+8]
mov	edi, eax
mov	eax, prev
cmp	key_0, [eax]
jnz	short loc_641D65B4
cmp	context_0, [prev+4]
jnz	short loc_641D65B4
mov	prev, [entry]
jmp	loc_641D64E2
align 4
mov	ecx, [ebp+ht]
mov	compare_user_context_0,	[ecx+1Ch]
mov	ecx, [ebp+compare]
test	ecx, ecx
jnz	loc_641D6450
lea	compare_user_context_0,	[compare_user_context_0+0]
mov	ecx, [ebp+ht]
mov	ecx, [ecx+10h]
mov	[ebp+compare], ecx
test	hash_user_context_0, hash_user_context_0
jnz	loc_641D6458
lea	compare_user_context_0,	[compare_user_context_0+0]
mov	ecx, [ebp+ht]
mov	hash_user_context_0, [ecx+18h]
test	hash_0,	hash_0
jnz	loc_641D6460
xchg	ax, ax
mov	ecx, [ebp+ht]
mov	hash_0,	[ecx+0Ch]
jmp	loc_641D6460
align 4
mov	ecx, [eax+8]
test	ecx, ecx
jz	short loc_641D6630
mov	[entry], ecx
mov	ecx, [prev+8]
test	ecx, ecx
jnz	loc_641D64FF
mov	dword ptr [entry], 0
jmp	loc_641D64FF
align 4
public _silc_hash_table_del_by_context
			
push	ebp
mov	ebp, esp
push	edi
push	esi
push	ebx
sub	esp, 3Ch
mov	esi, [ebp+ht]
mov	ebx, [ebp+key]
mov	eax, [esi+1Ch]
mov	[ebp+var_24], eax
mov	edx, [esi+10h]
mov	[ebp+var_1C], edx
mov	eax, [esi+18h]
mov	[esp+4], eax
mov	[esp], ebx
call	dword ptr [esi+0Ch]
mov	ecx, [esi+4]
xor	edx, edx
div	ds:_primesize[ecx*4]
lea	edx, ds:0[edx*4]
add	entry, [esi]
mov	edi, [esi+10h]
test	edi, edi
jz	loc_641D6770
mov	eax, [entry]
test	eax, eax
jz	short loc_641D66D2
xor	edi, edi
mov	[ebp+var_28], ht_0
mov	ht_0, entry
mov	[ebp+var_20], key_0
mov	key_0, [ebp+var_24]
jmp	short loc_641D66A8
align 4
mov	prev, [entry]
mov	eax, [prev+8]
test	eax, eax
jz	short loc_641D66D2
lea	entry, [prev+8]
mov	[esp+8], ebx
mov	ecx, [ebp+var_20]
mov	[esp+4], ecx
mov	eax, [eax]
mov	[esp], eax
call	[ebp+var_1C]
test	al, al
jz	short loc_641D669C
mov	eax, [entry]
mov	edx, [ebp+context]
cmp	edx, [prev+4]
jz	short loc_641D66DC
mov	edi, prev
mov	prev, [edi+8]
test	eax, eax
jnz	short loc_641D66A5
			
xor	eax, eax
add	esp, 3Ch
pop	ebx
pop	entry
pop	prev
leave
retn
mov	edx, entry
mov	entry, [ebp+var_28]
test	prev, prev
jz	short loc_641D66D2
test	edi, edi
jz	loc_641D67A8
mov	dword ptr [prev+8], 0
mov	entry, [eax+8]
test	edx, edx
jz	short loc_641D66FE
mov	[edi+8], edx
			
mov	entry, [ht_0+14h]
test	edx, edx
jz	short loc_641D6720
mov	ecx, [ht_0+20h]
mov	[esp+8], ecx
mov	ecx, [prev+4]
mov	[esp+4], ecx
mov	ecx, [prev]
mov	[esp], ecx
mov	[ebp+var_2C], prev
call	edx
mov	eax, [ebp+var_2C]
mov	[esp], eax	
call	_silc_free
mov	eax, [ht_0+8]
dec	eax
mov	[ht_0+8], eax
test	byte ptr [ht_0+24h], 1
jz	short loc_641D6749
lea	ecx, [eax+eax]
mov	edx, [ht_0+4]
cmp	ecx, ds:_primesize[edx*4]
jnb	short loc_641D6749
cmp	eax, 0Bh
ja	short loc_641D6754
			
mov	al, 1
add	esp, 3Ch
pop	ebx
pop	ht_0
pop	prev
leave
retn
align 4
mov	dword ptr [esp+4], 0 
mov	[esp], ht_0	
call	_silc_hash_table_rehash
mov	al, 1
add	esp, 3Ch
pop	ebx
pop	ht_0
pop	prev
leave
retn
align 10h
mov	eax, [entry]
test	prev, prev
jz	loc_641D66D2
xor	edi, edi
jmp	short loc_641D6792
align 10h
			
mov	ecx, [prev+8]
test	prev, prev
jz	loc_641D66D2
lea	entry, [eax+8]
mov	edi, eax
mov	eax, prev
cmp	key_0, [eax]
jnz	short loc_641D6780
mov	ecx, [ebp+context]
cmp	ecx, [prev+4]
jnz	short loc_641D6780
mov	prev, [entry]
jmp	loc_641D66E1
align 4
mov	ecx, [eax+8]
test	ecx, ecx
jz	short loc_641D67BC
mov	[entry], ecx
mov	ebx, [prev+8]
test	ebx, ebx
jnz	loc_641D66FE
mov	dword ptr [entry], 0
jmp	loc_641D66FE
align 4
public _silc_hash_table_del_ext
push	ebp
mov	ebp, esp
push	edi
push	esi
push	ebx
sub	esp, 2Ch
mov	ebx, [ebp+key]
mov	eax, [ebp+hash]
mov	edx, [ebp+hash_user_context]
mov	esi, [ebp+compare_user_context]
test	esi, esi
jz	loc_641D6950
mov	ecx, [ebp+compare]
test	ecx, ecx
jz	loc_641D6964
test	hash_user_context_0, hash_user_context_0
jz	loc_641D6978
test	hash_0,	hash_0
jz	loc_641D6988
			
mov	[esp+4], hash_user_context_0
mov	[esp], key_0
call	hash_0
mov	edx, [ebp+ht]
mov	edi, [edx+4]
xor	edx, edx
div	ds:_primesize[edi*4]
lea	edx, ds:0[edx*4]
mov	ecx, [ebp+ht]
add	entry, [ecx]
mov	edi, [ebp+compare]
test	edi, edi
jz	loc_641D6924
mov	eax, [entry]
test	eax, eax
jz	loc_641D6944
xor	edi, edi
mov	[ebp+var_1C], compare_user_context_0
mov	compare_user_context_0,	key_0
mov	key_0, entry
jmp	short loc_641D6854
mov	prev, [entry]
mov	eax, [prev+8]
test	eax, eax
jz	loc_641D6944
lea	entry, [prev+8]
mov	edx, [ebp+var_1C]
mov	[esp+8], edx	
mov	[esp+4], key_0	
mov	eax, [eax]
mov	[esp], eax	
call	[ebp+compare]
test	al, al
jz	short loc_641D6844
mov	edx, entry
mov	key_0, [entry]
test	prev, prev
jz	loc_641D6944
test	edi, edi
jz	loc_641D6994
mov	dword ptr [prev+8], 0
mov	eax, [esi+8]
test	eax, eax
jz	short loc_641D6890
mov	[edi+8], eax
			
mov	eax, [ebp+destructor]
test	eax, eax
jz	short loc_641D68E4
mov	eax, [ebp+destructor_user_context]
mov	[esp+8], eax	
mov	eax, [prev+4]
mov	[esp+4], eax	
mov	eax, [prev]
mov	[esp], eax	
call	[ebp+destructor]
			
mov	[esp], prev
call	_silc_free
mov	entry, [ebp+ht]
mov	eax, [ebx+8]
dec	eax
mov	[ebx+8], eax
test	byte ptr [ebx+24h], 1
jz	short loc_641D68D9
lea	ecx, [eax+eax]
mov	edx, [ebx+4]
cmp	ecx, ds:_primesize[edx*4]
jnb	short loc_641D68D9
cmp	eax, 0Bh
ja	short loc_641D6908
			
mov	al, 1
add	esp, 2Ch
pop	ebx
pop	prev
pop	prev
leave
retn
align 4
mov	ecx, [ebp+ht]
mov	eax, [ecx+14h]
test	eax, eax
jz	short loc_641D68AD
mov	entry, [ecx+20h]
mov	[esp+8], edx
mov	edx, [prev+4]
mov	[esp+4], edx
mov	edx, [prev]
mov	[esp], edx
call	eax
jmp	short loc_641D68AD
align 4
mov	dword ptr [esp+4], 0 
mov	[esp], ebx	
call	_silc_hash_table_rehash
mov	al, 1
add	esp, 2Ch
pop	ebx
pop	prev
pop	prev
leave
retn
align 4
mov	compare_user_context_0,	[entry]
test	prev, prev
jz	short loc_641D6944
cmp	key_0, [prev]
jz	short loc_641D6994
mov	edi, prev
jmp	short loc_641D693A
align 4
cmp	key_0, [prev]
jz	short loc_641D69B3
mov	edi, prev
mov	eax, [prev+8]
test	prev, prev
jnz	short loc_641D6934
lea	prev, [prev+0]
			
xor	eax, eax
add	esp, 2Ch
pop	ebx
pop	prev
pop	prev
leave
retn
align 10h
mov	ecx, [ebp+ht]
mov	compare_user_context_0,	[ecx+1Ch]
mov	ecx, [ebp+compare]
test	ecx, ecx
jnz	loc_641D67F0
lea	compare_user_context_0,	[compare_user_context_0+0]
mov	ecx, [ebp+ht]
mov	ecx, [ecx+10h]
mov	[ebp+compare], ecx
test	hash_user_context_0, hash_user_context_0
jnz	loc_641D67F8
lea	compare_user_context_0,	[compare_user_context_0+0]
mov	ecx, [ebp+ht]
mov	hash_user_context_0, [ecx+18h]
test	hash_0,	hash_0
jnz	loc_641D6800
xchg	ax, ax
mov	ecx, [ebp+ht]
mov	hash_0,	[ecx+0Ch]
jmp	loc_641D6800
align 4
			
mov	eax, [prev+8]
test	eax, eax
jz	short loc_641D69A8
mov	[entry], eax
mov	ecx, [prev+8]
test	ecx, ecx
jnz	loc_641D6890
mov	dword ptr [entry], 0
jmp	loc_641D6890
lea	entry, [edi+8]
mov	esi, prev
jmp	loc_641D6877
align 10h
public _silc_hash_table_del
			
push	ebp
mov	ebp, esp
push	edi
push	esi
push	ebx
sub	esp, 3Ch
mov	esi, [ebp+ht]
mov	ebx, [ebp+key]
mov	eax, [esi+1Ch]
mov	[ebp+var_24], eax
mov	edx, [esi+10h]
mov	[ebp+var_1C], edx
mov	eax, [esi+18h]
mov	[esp+4], eax
mov	[esp], ebx
call	dword ptr [esi+0Ch]
mov	ecx, [esi+4]
xor	edx, edx
div	ds:_primesize[ecx*4]
lea	edx, ds:0[edx*4]
add	entry, [esi]
mov	edi, [ebp+var_1C]
test	edi, edi
jz	loc_641D6AE4
mov	eax, [entry]
test	eax, eax
jz	loc_641D6B00
xor	edi, edi
mov	[ebp+var_28], ht_0
mov	ht_0, entry
mov	[ebp+var_20], key_0
mov	key_0, [ebp+var_24]
jmp	short loc_641D6A34
align 4
mov	prev, [entry]
mov	eax, [prev+8]
test	eax, eax
jz	loc_641D6B00
lea	entry, [prev+8]
mov	[esp+8], ebx
mov	edx, [ebp+var_20]
mov	[esp+4], edx
mov	eax, [eax]
mov	[esp], eax
call	[ebp+var_1C]
test	al, al
jz	short loc_641D6A24
mov	edx, entry
mov	entry, [ebp+var_28]
mov	eax, [entry]
test	prev, prev
jz	loc_641D6B00
test	edi, edi
jz	loc_641D6B0C
mov	dword ptr [prev+8], 0
mov	entry, [eax+8]
test	edx, edx
jz	short loc_641D6A73
mov	[edi+8], edx
			
mov	entry, [ht_0+14h]
test	edx, edx
jz	short loc_641D6A95
mov	ecx, [ht_0+20h]
mov	[esp+8], ecx
mov	ecx, [prev+4]
mov	[esp+4], ecx
mov	ecx, [prev]
mov	[esp], ecx
mov	[ebp+var_2C], prev
call	edx
mov	eax, [ebp+var_2C]
mov	[esp], eax	
call	_silc_free
mov	eax, [ht_0+8]
dec	eax
mov	[ht_0+8], eax
test	byte ptr [ht_0+24h], 1
jz	short loc_641D6ABE
lea	ecx, [eax+eax]
mov	edx, [ht_0+4]
cmp	ecx, ds:_primesize[edx*4]
jnb	short loc_641D6ABE
cmp	eax, 0Bh
ja	short loc_641D6AC8
			
mov	al, 1
add	esp, 3Ch
pop	ebx
pop	ht_0
pop	prev
leave
retn
mov	dword ptr [esp+4], 0
mov	[esp], ht_0	
call	_silc_hash_table_rehash
mov	al, 1
add	esp, 3Ch
pop	ebx
pop	ht_0
pop	prev
leave
retn
align 4
mov	eax, [entry]
test	prev, prev
jz	short loc_641D6B00
cmp	key_0, [prev]
jnz	short loc_641D6AF4
jmp	short loc_641D6B0C
cmp	key_0, [prev]
jz	short loc_641D6B2B
mov	edi, prev
mov	prev, [prev+8]
test	prev, prev
jnz	short loc_641D6AF0
lea	esi, [esi+0]
			
xor	prev, prev
add	esp, 3Ch
pop	ebx
pop	esi
pop	prev
leave
retn
align 4
			
mov	ecx, [prev+8]
test	ecx, ecx
jz	short loc_641D6B20
mov	[entry], ecx
mov	ebx, [prev+8]
test	ebx, ebx
jnz	loc_641D6A73
mov	dword ptr [entry], 0
jmp	loc_641D6A73
lea	entry, [edi+8]
jmp	loc_641D6A5A
align 4
public _silc_hash_table_rehash_ext
push	ebp
mov	ebp, esp
push	edi
push	esi
push	ebx
sub	esp, 4Ch
mov	ebx, [ebp+ht]
mov	edx, [ebp+new_size]
mov	eax, [ebp+hash]
mov	[ebp+var_24], eax
mov	eax, [ebp+hash_user_context]
mov	[ebp+var_28], eax
test	edx, edx
jnz	loc_641D6D03
mov	new_size_0, [ht_0+8]
xor	esi, esi
cmp	edx, 3
jbe	short loc_641D6B83
mov	si, 1
mov	eax, 1
jmp	short loc_641D6B7A
lea	size_index, [eax+1]
cmp	size_index, 32h
jz	loc_641D6D3C
mov	eax, size_index
cmp	edx, ds:_primesize[eax*4]
ja	short loc_641D6B6C
			
mov	edi, [ht_0+4]
cmp	edi, size_index
jz	loc_641D6D34
mov	edx, [ht_0]
mov	[ebp+table], edx
mov	al, [ht_0+24h]
mov	dl, al
and	edx, 1
mov	[ebp+var_35], dl
and	eax, 0FFFFFFFEh
mov	[ht_0+24h], al
mov	dword ptr [esp+4], 4 
mov	eax, ds:_primesize[size_index*4]
mov	[esp], eax	
call	_silc_calloc
mov	[ht_0],	eax
test	eax, eax
jz	loc_641D6D34
mov	[ht_0+4], size_index
mov	dword ptr [ht_0+8], 0
mov	edi, ds:_primesize[edi*4]
mov	[ebp+var_34], edi
test	edi, edi
jz	loc_641D6CBF
xor	eax, eax
mov	[ebp+i], 0
xchg	ax, ax
mov	edx, [ebp+table]
mov	size_index, [edx+eax*4]
test	e, e
jz	loc_641D6CB0
xchg	ax, ax
mov	eax, [e+4]
mov	[ebp+var_20], eax
mov	edx, [e]
mov	[ebp+var_1C], edx
mov	eax, [ebp+var_28]
mov	[esp+4], eax
mov	[esp], edx
call	[ebp+var_24]
mov	ecx, [ht_0+4]
xor	edx, edx
div	ds:_primesize[ecx*4]
lea	edx, ds:0[edx*4]
add	edx, [ht_0]
mov	edi, [edx]
test	edi, edi
jz	loc_641D6CDD
mov	eax, [edi+8]
test	eax, eax
jnz	short loc_641D6C3E
jmp	short loc_641D6C47
mov	eax, edx
mov	edx, [eax+8]
test	edx, edx
jnz	short loc_641D6C3C
mov	edi, eax
mov	dword ptr [esp+4], 0Ch 
mov	dword ptr [esp], 1 
call	_silc_calloc
mov	[edi+8], eax
test	eax, eax
jz	short loc_641D6C97
mov	edx, [ebp+var_1C]
mov	[eax], edx
mov	edx, [ebp+var_20]
mov	[eax+4], edx
inc	dword ptr [ht_0+8]
test	byte ptr [ht_0+24h], 1
jz	short loc_641D6C97
mov	eax, [ht_0+8]
shr	eax, 1
mov	edx, [ht_0+4]
cmp	eax, ds:_primesize[edx*4]
jbe	short loc_641D6C97
mov	dword ptr [esp+4], 0 
mov	[esp], ht_0	
call	_silc_hash_table_rehash
			
mov	edi, [e+8]
mov	[esp], esi	
call	_silc_free
test	e, e
jz	short loc_641D6CB0
mov	esi, e
jmp	loc_641D6BFC
align 10h
			
inc	[ebp+i]
mov	eax, [ebp+i]
cmp	[ebp+var_34], eax
ja	loc_641D6BEC
mov	al, [ht_0+24h]
and	eax, 0FFFFFFFEh
or	al, [ebp+var_35]
mov	[ht_0+24h], al
mov	eax, [ebp+table]
mov	[ebp+ht], eax
add	esp, 4Ch
pop	ht_0
pop	size_index
pop	e
leave
jmp	_silc_free
mov	dword ptr [esp+4], 0Ch
mov	dword ptr [esp], 1 
mov	[ebp+var_3C], edx
call	_silc_calloc
mov	edx, [ebp+var_3C]
mov	[edx], eax
test	eax, eax
jnz	loc_641D6C62
jmp	short loc_641D6C97
xor	esi, esi
cmp	new_size_0, 3
jbe	loc_641D6B83
mov	si, 1
mov	eax, 1
jmp	short loc_641D6D26
align 4
lea	size_index, [eax+1]
cmp	size_index, 32h
jz	short loc_641D6D3C
mov	eax, size_index
cmp	new_size_0, ds:_primesize[eax*4]
ja	short loc_641D6D1C
jmp	loc_641D6B83
			
add	esp, 4Ch
pop	ht_0
pop	size_index
pop	edi
leave
retn
			
mov	size_index, eax
jmp	loc_641D6B83
align 4
public _silc_hash_table_replace_ext
push	ebp
mov	ebp, esp
push	edi
push	esi
push	ebx
sub	esp, 1Ch
mov	ebx, [ebp+ht]
mov	esi, [ebp+key]
mov	eax, [ebp+hash_user_context]
mov	[esp+4], eax	
mov	[esp], esi	
call	[ebp+hash]
mov	ecx, [ebx+4]
xor	edx, edx
div	ds:_primesize[ecx*4]
mov	edi, edx
shl	edi, 2
add	edi, [ebx]
mov	edx, [edi]
mov	eax, edx
test	edx, edx
jz	short loc_641D6DE0
mov	ecx, [ht_0+14h]
test	ecx, ecx
jz	short loc_641D6D9B
mov	eax, [ht_0+20h]
mov	[esp+8], eax
mov	eax, [edx+4]
mov	[esp+4], eax
mov	eax, [edx]
mov	[esp], eax
call	ecx
mov	edx, [edi]
mov	eax, edx
			
mov	[eax], key_0
mov	eax, [ebp+context]
mov	[edx+4], eax
test	byte ptr [ht_0+24h], 1
jz	short loc_641D6DBA
mov	context_0, [ht_0+8]
shr	eax, 1
mov	edx, [ht_0+4]
cmp	eax, ds:_primesize[edx*4]
ja	short loc_641D6DC4
mov	al, 1
add	esp, 1Ch
pop	ht_0
pop	key_0
pop	edi
leave
retn
mov	dword ptr [esp+4], 0
mov	[esp], ht_0	
call	_silc_hash_table_rehash
mov	al, 1
add	esp, 1Ch
pop	ht_0
pop	key_0
pop	edi
leave
retn
align 10h
mov	dword ptr [esp+4], 0Ch 
mov	dword ptr [esp], 1 
call	_silc_calloc
mov	[edi], eax
test	eax, eax
jz	short loc_641D6DBC
inc	dword ptr [ht_0+8]
mov	edx, eax
jmp	short loc_641D6D9B
align 4
public _silc_hash_table_add_ext
push	ebp
mov	ebp, esp
push	edi
push	esi
push	ebx
sub	esp, 2Ch
mov	ebx, [ebp+ht]
mov	esi, [ebp+key]
mov	eax, [ebp+hash_user_context]
mov	[esp+4], eax	
mov	[esp], esi	
call	[ebp+hash]
mov	ecx, [ebx+4]
xor	edx, edx
div	ds:_primesize[ecx*4]
lea	edx, ds:0[edx*4]
add	edx, [ebx]
mov	edi, [edx]
test	edi, edi
jz	short loc_641D6EB2
mov	edx, [edi+8]
test	edx, edx
jnz	short loc_641D6E46
jmp	short loc_641D6E4F
mov	edx, eax
mov	eax, [edx+8]
test	eax, eax
jnz	short loc_641D6E44
mov	edi, edx
mov	dword ptr [esp+4], 0Ch 
mov	dword ptr [esp], 1 
call	_silc_calloc
mov	[edi+8], eax
test	eax, eax
jz	short loc_641D6ED4
mov	[eax], key_0
mov	edx, [ebp+context]
mov	[eax+4], edx
inc	dword ptr [ht_0+8]
test	byte ptr [ht_0+24h], 1
jz	short loc_641D6E8C
mov	eax, [ht_0+8]
shr	eax, 1
mov	edx, [ht_0+4]
cmp	eax, ds:_primesize[edx*4]
ja	short loc_641D6E98
mov	al, 1
add	esp, 2Ch
pop	ht_0
pop	key_0
pop	edi
leave
retn
align 4
mov	dword ptr [esp+4], 0 
mov	[esp], ht_0	
call	_silc_hash_table_rehash
mov	al, 1
add	esp, 2Ch
pop	ht_0
pop	key_0
pop	edi
leave
retn
mov	dword ptr [esp+4], 0Ch
mov	dword ptr [esp], 1 
mov	[ebp+var_1C], edx
call	_silc_calloc
mov	edx, [ebp+var_1C]
mov	[edx], eax
test	eax, eax
jnz	short loc_641D6E6A
xchg	ax, ax
xor	eax, eax
add	esp, 2Ch
pop	ht_0
pop	key_0
pop	edi
leave
retn
align 10h
public _silc_log_get_file
push	ebp
mov	ebp, esp
mov	eax, [ebp+type]
dec	eax
cmp	eax, 3
ja	short loc_641D6F08
lea	eax, [eax+eax*8]
shl	eax, 5
add	eax, offset _silclogs
jz	short loc_641D6F08
mov	edx, [log+100h]
test	edx, edx
jz	short loc_641D6F08
leave
retn
align 4
			
xor	log, log
leave
retn
public _silc_log_set_callback
push	ebp
mov	ebp, esp
mov	log, [ebp+type]
dec	log
cmp	log, 3
ja	short locret_641D6F37
lea	log, [log+log*8]
shl	log, 5
add	log, offset _silclogs
jz	short locret_641D6F37
mov	edx, [ebp+cb]
mov	[log+118h], edx
mov	edx, [ebp+context]
mov	[log+11Ch], edx
			
leave
retn
align 4
public _silc_log_reset_callbacks
push	ebp
mov	ebp, esp
mov	dword_6423B1BC,	0
mov	dword_6423B1B8,	0
mov	log.context, 0
mov	log.cb,	0
mov	stru_6423B2E0.context, 0
mov	stru_6423B2E0.cb, 0
mov	stru_6423B400.context, 0
mov	stru_6423B400.cb, 0
leave
retn
align 4
public _silc_log_set_debug_callbacks
push	ebp
mov	ebp, esp
mov	eax, [ebp+debug_cb]
mov	__data_start__.debug_cb, eax
mov	eax, [ebp+debug_context]
mov	__data_start__.debug_context, eax
mov	eax, [ebp+hexdump_cb]
mov	__data_start__.hexdump_cb, eax
mov	eax, [ebp+hexdump_context]
mov	__data_start__.hexdump_context,	eax
leave
retn
align 4
public _silc_log_reset_debug_callbacks
push	ebp
mov	ebp, esp
mov	__data_start__.debug_cb, 0
mov	__data_start__.debug_context, 0
mov	__data_start__.hexdump_cb, 0
mov	__data_start__.hexdump_context,	0
leave
retn
align 4
public _silc_log_timestamp
push	ebp
mov	ebp, esp
mov	dl, [ebp+enable]
and	edx, 1
mov	al, __data_start__._bf94
and	eax, 0FFFFFFFEh
or	eax, edx
mov	__data_start__._bf94, al
leave
retn
align 4
public _silc_log_flushdelay
push	ebp
mov	ebp, esp
mov	eax, [ebp+flushdelay]
mov	__data_start__.flushdelay, eax
leave
retn
align 4
public _silc_log_quick
push	ebp
mov	ebp, esp
mov	al, [ebp+enable]
and	eax, 1
lea	edx, [eax+eax]
mov	al, __data_start__._bf94
and	eax, 0FFFFFFFDh
or	eax, edx
mov	__data_start__._bf94, al
leave
retn
align 4
public _silc_log_debug
push	ebp
mov	ebp, esp
mov	al, [ebp+enable]
and	eax, 1
lea	edx, ds:0[eax*4]
mov	al, __data_start__._bf94
and	eax, 0FFFFFFFBh
or	eax, edx
mov	__data_start__._bf94, al
leave
retn
align 4
public _silc_log_debug_hexdump
push	ebp
mov	ebp, esp
mov	al, [ebp+enable]
and	eax, 1
lea	edx, ds:0[eax*8]
mov	al, __data_start__._bf94
and	eax, 0FFFFFFF7h
or	eax, edx
mov	__data_start__._bf94, al
leave
retn
align 10h
public _silc_log_output_hexdump
push	ebp
mov	ebp, esp
push	edi
push	esi
push	ebx
sub	esp, 5Ch
mov	esi, [ebp+file]
mov	ebx, [ebp+function]
mov	edi, [ebp+line]
mov	eax, [ebp+data_in]
mov	[ebp+var_2C], eax
mov	edx, [ebp+len]
mov	[ebp+var_24], edx
mov	ecx, [ebp+string]
mov	[ebp+var_30], ecx
test	__data_start__._bf94, 8
jnz	short loc_641D70C0
			
mov	ecx, [ebp+var_30]
mov	[ebp+file], ecx
add	esp, 5Ch
pop	i
pop	esi
pop	count
leave
jmp	_silc_free
align 10h
mov	[esp+4], file_0	
mov	dword ptr [esp], offset	__data_start__.debug_string 
call	_silc_string_regex_match
test	eax, eax
jz	loc_641D7314
mov	eax, __data_start__.hexdump_cb
test	eax, eax
jz	short loc_641D7111
mov	edx, __data_start__.hexdump_context
mov	[esp+18h], edx
mov	edx, [ebp+var_30]
mov	[esp+14h], edx
mov	ecx, [ebp+var_24]
mov	[esp+10h], ecx
mov	edx, [ebp+var_2C]
mov	[esp+0Ch], edx
mov	[esp+8], line_0
mov	[esp+4], function_0
mov	[esp], file_0
call	eax
test	al, al
jnz	short end
mov	file_0,	ds:__imp___iob
add	esi, 40h
mov	ecx, [ebp+var_30]
mov	[esp+10h], ecx
mov	[esp+0Ch], line_0
mov	[esp+8], function_0
mov	dword ptr [esp+4], offset aSDS 
mov	[esp], esi	
call	_fprintf
mov	eax, [ebp+var_24]
and	eax, 0Fh
mov	[ebp+off], eax
mov	line_0,	10h
mov	[ebp+pos], 0
mov	[ebp+k], 0
mov	edx, [ebp+var_24]
sub	edx, eax
mov	[ebp+var_3C], edx
mov	ecx, [ebp+off]
test	ecx, ecx
jz	loc_641D72F1
mov	eax, [ebp+var_24]
sub	eax, [ebp+pos]
cmp	eax, 0Fh
ja	short loc_641D717C
cmp	eax, [ebp+var_3C]
ja	short loc_641D717C
mov	count, [ebp+off]
nop
			
mov	eax, [ebp+off]
cmp	[ebp+var_24], eax
jz	loc_641D730C
			
test	count, count
jz	end
mov	eax, [ebp+k]
shl	eax, 4
inc	[ebp+k]
mov	[esp+8], eax
mov	dword ptr [esp+4], offset a08x 
mov	[esp], esi	
call	_fprintf
test	count, count
jle	short loc_641D7219
mov	ecx, [ebp+var_2C]
mov	edx, [ebp+pos]
movzx	eax, byte ptr [ecx+edx]
mov	[esp+8], eax
mov	dword ptr [esp+4], offset a02x 
mov	[esp], esi	
call	_fprintf
mov	i, 1
mov	eax, [ebp+var_2C]
add	eax, [ebp+pos]
mov	[ebp+var_1C], eax
lea	esi, [esi+0]
cmp	count, i
jle	short loc_641D7219
mov	edx, [ebp+var_1C]
movzx	eax, byte ptr [edx+i]
mov	[esp+8], eax
mov	dword ptr [esp+4], offset a02x 
mov	[esp], esi	
call	_fprintf
inc	i
test	bl, 3
jnz	short loc_641D71E0
mov	[esp+4], esi	
mov	dword ptr [esp], 20h 
call	_fputc
cmp	count, i
jg	short loc_641D71E4
			
cmp	count, 0Fh
jg	short loc_641D7286
mov	[ebp+var_1C], 10h
sub	[ebp+var_1C], count
lea	eax, [count+1]
xor	i, i
mov	[ebp+var_38], count
mov	count, j
mov	j, eax
jmp	short loc_641D723F
align 4
inc	j
inc	ebx
cmp	j, [ebp+var_1C]
jge	short loc_641D727B
			
mov	[esp+0Ch], esi	
mov	dword ptr [esp+8], 3 
mov	dword ptr [esp+4], 1 
mov	dword ptr [esp], offset	asc_64263EF8 
call	_fwrite
test	bl, 3
jnz	short loc_641D7238
mov	[esp+4], esi	
mov	dword ptr [esp], 20h 
call	_fputc
inc	j
inc	ebx
cmp	j, [ebp+var_1C]
jl	short loc_641D723F
mov	j, [ebp+var_38]
test	count, count
jle	loc_641D7331
xor	i, i
mov	eax, [ebp+var_2C]
mov	ecx, [ebp+pos]
lea	ecx, [eax+ecx]
mov	[ebp+var_1C], ecx
jmp	short loc_641D72AE
align 4
mov	eax, 2Eh
mov	[esp+4], esi	
mov	[esp], eax	
call	_fputc
inc	i
cmp	count, i
jle	short loc_641D72C4
mov	edx, [ebp+var_1C]
mov	al, [edx+i]
lea	edx, [eax-20h]
cmp	dl, 5Eh
ja	short loc_641D7298
movsx	eax, al
jmp	short loc_641D729D
align 4
mov	eax, [ebp+pos]
lea	eax, [count+eax]
mov	[ebp+pos], eax
mov	[esp+4], esi	
mov	dword ptr [esp], 0Ah 
call	_fputc
cmp	count, 0Fh
jle	end
mov	ecx, [ebp+off]
test	ecx, ecx
jnz	loc_641D7168
mov	ecx, [ebp+var_24]
cmp	[ebp+pos], ecx
jnz	loc_641D717C
xor	count, count
mov	eax, [ebp+off]
cmp	[ebp+var_24], eax
jnz	loc_641D7188
nop
mov	count, [ebp+var_24]
jmp	loc_641D7188
mov	[esp+4], function_0
mov	dword ptr [esp], offset	__data_start__.debug_string 
call	_silc_string_regex_match
test	eax, eax
jnz	loc_641D70D8
jmp	end
mov	[esp+4], esi
mov	dword ptr [esp], 0Ah 
call	_fputc
jmp	end
align 4
public _silc_log_output_debug
push	ebp
mov	ebp, esp
push	edi
push	esi
push	ebx
sub	esp, 3Ch
mov	esi, [ebp+file]
mov	edi, [ebp+function]
mov	ebx, [ebp+string]
test	__data_start__._bf94, 4
jnz	short loc_641D7374
			
mov	[esp], string_0
call	_silc_free
add	esp, 3Ch
pop	string_0
pop	file_0
pop	function_0
leave
retn
align 4
mov	[esp+4], file_0	
mov	dword ptr [esp], offset	__data_start__.debug_string 
call	_silc_string_regex_match
test	eax, eax
jz	loc_641D742C
mov	eax, __data_start__.debug_cb
test	eax, eax
jz	short loc_641D73B7
mov	edx, __data_start__.debug_context
mov	[esp+10h], edx
mov	[esp+0Ch], string_0
mov	edx, [ebp+line]
mov	[esp+8], edx
mov	[esp+4], function_0
mov	[esp], file_0
call	eax
test	al, al
jnz	short end
lea	eax, [ebp+curtime]
mov	[esp+8], eax	
mov	dword ptr [esp], 0 
mov	dword ptr [esp+4], 0
call	_silc_time_value
mov	dword ptr [esp+4], 5Ch 
mov	[esp], function_0 
call	_strrchr
test	eax, eax
jz	short loc_641D744C
mov	[esp+10h], string_0
mov	edx, [ebp+line]
mov	[esp+0Ch], edx
inc	eax
mov	[esp+8], eax
mov	dword ptr [esp+4], offset aSDS 
mov	file_0,	ds:__imp___iob
lea	eax, [esi+40h]
mov	[esp], eax	
call	_fprintf
add	esi, 40h
mov	[esp], esi	
call	_fflush
mov	[esp], string_0	
call	_silc_free
add	esp, 3Ch
pop	string_0
pop	esi
pop	function_0
leave
retn
align 4
mov	[esp+4], function_0 
mov	dword ptr [esp], offset	__data_start__.debug_string 
call	_silc_string_regex_match
test	eax, eax
jnz	loc_641D738C
jmp	end
align 4
mov	[esp+1Ch], string_0
mov	eax, [ebp+line]
mov	[esp+18h], eax
mov	[esp+14h], function_0
mov	eax, [ebp+curtime._bf4]
shr	ax, 6
and	eax, 3Fh
mov	[esp+10h], eax
mov	al, byte ptr [ebp+curtime._bf4]
and	eax, 3Fh
mov	[esp+0Ch], eax
mov	al, byte ptr [ebp+curtime._bf2+1]
and	eax, 1Fh
mov	[esp+8], eax
mov	dword ptr [esp+4], offset a02d02d02dSDS	
mov	file_0,	ds:__imp___iob
lea	eax, [esi+40h]
mov	[esp], eax	
call	_fprintf
jmp	loc_641D740F
align 4
public _silc_log_flush_all
push	ebp
mov	ebp, esp
sub	esp, 18h
mov	eax, dword_6423B1A0
test	eax, eax
jz	short loc_641D74B3
mov	[esp], eax	
call	_fflush
mov	eax, log.fp
test	eax, eax
jz	short loc_641D74C4
mov	[esp], eax	
call	_fflush
mov	eax, stru_6423B2E0.fp
test	eax, eax
jz	short loc_641D74D5
mov	[esp], eax	
call	_fflush
mov	eax, stru_6423B400.fp
test	eax, eax
jz	short locret_641D74E6
mov	[esp], eax	
call	_fflush
leave
retn
public _silc_log_set_debug_string
push	ebp
mov	ebp, esp
push	edi
push	esi
push	ebx
sub	esp, 1Ch
mov	ebx, [ebp+debug_string]
mov	dword ptr [esp+4], 28h 
mov	[esp], ebx	
call	_strchr
test	eax, eax
jz	short loc_641D7570
mov	dword ptr [esp+4], 29h 
mov	[esp], debug_string_0 
call	_strchr
test	eax, eax
jz	short loc_641D7570
mov	[esp], debug_string_0 
call	_strdup
mov	debug_string_0,	eax
xor	eax, eax
mov	ecx, 0FFFFFFFFh
mov	edi, string
repne scasb
not	ecx
lea	esi, [ecx-1]
cmp	esi, 7Fh
jbe	short loc_641D7540
mov	esi, 7Fh
mov	edx, offset __data_start__.debug_string
mov	ecx, 80h
xor	eax, eax
mov	edi, edx
rep stosb
mov	[esp+8], esi	
mov	[esp+4], ebx	
mov	[esp], edx	
call	_strncpy
mov	[ebp+debug_string], string
add	esp, 1Ch
pop	string
pop	esi
pop	edi
leave
jmp	_silc_free
align 10h
			
mov	dword ptr [esp+4], 24h 
mov	[esp], debug_string_0 
call	_strchr
test	eax, eax
jnz	short loc_641D751C
mov	[esp], debug_string_0 
call	_silc_string_regexify
mov	debug_string_0,	eax
jmp	short loc_641D7526
public _silc_log_set_file
push	ebp
mov	ebp, esp
push	edi
push	esi
push	ebx
sub	esp, 2Ch
mov	eax, [ebp+type]
dec	eax
cmp	eax, 3
ja	loc_641D76E8
lea	edi, [eax+eax*8]
shl	edi, 5
mov	ebx, edi
add	log, offset _silclogs
jz	loc_641D76E8
mov	esi, [ebp+filename]
test	esi, esi
jz	loc_641D76E0
mov	dword ptr [esp+4], offset aA 
mov	eax, [ebp+filename]
mov	[esp], eax	
call	_fopen
mov	esi, eax
test	eax, eax
jz	loc_641D76F4
mov	dword ptr [esp+4], 180h	
mov	fp, [ebp+filename]
mov	[esp], eax	
call	_chmod
cmp	_silclogs[edi],	0
jnz	loc_641D76B4
test	fp, fp
jz	short loc_641D7652
mov	[log+100h], fp
mov	eax, [ebp+maxsize]
mov	[log+108h], eax
mov	dword ptr [log+10Ch], 0
xor	eax, eax
mov	ecx, 100h
mov	edi, log
rep stosb
mov	ecx, 0FFFFFFFFh
mov	edi, [ebp+filename]
repne scasb
not	ecx
dec	ecx
mov	[esp+0Ch], ecx	
mov	eax, [ebp+filename]
mov	[esp+8], eax	
mov	dword ptr [esp+4], 100h	
mov	[esp], log	
call	_silc_strncat
mov	log, [ebp+scheduler]
test	ebx, ebx
jz	short loc_641D76AA
mov	dword ptr [esp+4], offset _silc_log_fflush_callback 
mov	eax, [ebp+scheduler]
mov	[esp], eax	
call	_silc_schedule_task_del_by_callback
mov	dword ptr [esp+18h], 1 
mov	dword ptr [esp+14h], 0 
mov	dword ptr [esp+10h], 0Ah 
mov	eax, [ebp+scheduler]
mov	[esp+0Ch], eax	
mov	dword ptr [esp+8], offset _silc_log_fflush_callback 
mov	dword ptr [esp+4], 0 
mov	[esp], eax	
call	_silc_schedule_task_add
or	__data_start__._bf94, 10h
mov	al, 1
add	esp, 2Ch
pop	log
pop	fp
pop	edi
leave
retn
mov	eax, [log+100h]
test	eax, eax
jz	short loc_641D76C6
mov	[esp], eax	
call	_fclose
mov	ecx, 100h
xor	eax, eax
mov	edi, log
rep stosb
mov	dword ptr [log+100h], 0
jmp	loc_641D7602
xor	esi, esi
jmp	loc_641D75F5
align 4
			
xor	eax, eax
add	esp, 2Ch
pop	log
pop	esi
pop	edi
leave
retn
align 4
call	__errno
mov	eax, [eax]
mov	[esp], eax	
call	_strerror
mov	[esp+0Ch], eax
mov	eax, [ebp+filename]
mov	[esp+8], eax
mov	dword ptr [esp+4], offset aWarningCouldnT 
mov	eax, ds:__imp___iob
add	eax, 40h
mov	[esp], eax	
call	_fprintf
xor	eax, eax
jmp	short loc_641D76AC
align 4
			
push	ebp
mov	ebp, esp
push	edi
push	esi
push	ebx
sub	esp, 13Ch
mov	ebx, log
test	log, log
jz	short loc_641D7756
mov	edi, [log+100h]
test	edi, edi
jz	short loc_641D7756
mov	log, [log+10Ch]
or	eax, [log+108h]
jnz	short loc_641D7764
			
add	esp, 13Ch
pop	log
pop	esi
pop	edi
leave
retn
align 4
mov	[esp], log	
call	_silc_file_size
mov	esi, eax
mov	eax, edx
or	eax, esi
jz	loc_641D7860
mov	edi, [log+108h]
cmp	edx, [log+10Ch]
jb	short loc_641D7756
ja	short loc_641D778C
cmp	esi, edi
jb	short loc_641D7756
mov	esi, [log+110h]
mov	dword ptr [esp], 0 
mov	dword ptr [esp+4], 0
call	_silc_time_string
shr	edi, 0Ah
mov	[esp+10h], edi
mov	[esp+0Ch], esi
mov	[esp+8], eax
mov	dword ptr [esp+4], offset aSSCyclingLogFi 
mov	eax, [log+100h]
mov	[esp], eax	
call	_fprintf
mov	eax, [log+100h]
mov	[esp], eax	
call	_fflush
mov	eax, [log+100h]
mov	[esp], eax	
call	_fclose
lea	esi, [ebp+newname]
mov	ecx, 100h
xor	eax, eax
mov	edi, esi
rep stosb
mov	[esp+0Ch], log
mov	dword ptr [esp+8], offset aS_old 
mov	dword ptr [esp+4], 0FFh	
mov	[esp], esi	
call	_silc_snprintf
mov	[esp], esi	
call	_unlink
mov	[esp+4], esi	
mov	[esp], log	
call	_rename
mov	dword ptr [esp+4], offset aW 
mov	[esp], log	
call	_fopen
mov	[log+100h], eax
test	eax, eax
jz	short loc_641D7889
mov	dword ptr [esp+4], 180h	
mov	[esp], log	
call	_chmod
add	esp, 13Ch
pop	log
pop	esi
pop	edi
leave
retn
align 10h
mov	eax, [log+100h]
mov	[esp], eax	
mov	[ebp+var_11C], edx
call	_fclose
mov	dword ptr [log+100h], 0
mov	edx, [ebp+var_11C]
jmp	loc_641D7778
call	__errno
mov	eax, [eax]
mov	[esp], eax	
call	_strerror
mov	[esp+0Ch], eax
mov	eax, [log+110h]
mov	[esp+8], eax
mov	[esp+4], log
mov	dword ptr [esp], offset	aCouldnTReopenL	
call	_silc_format
mov	[esp+4], eax	
mov	dword ptr [esp], 2 
call	_silc_log_output
jmp	loc_641D7842
align 4
public _silc_log_output
			
push	ebp
mov	ebp, esp
push	edi
push	esi
push	ebx
sub	esp, 3Ch
mov	eax, [ebp+type]
mov	edx, [ebp+string]
mov	[ebp+var_1C], edx
lea	ebx, [eax-1]
cmp	type_0,	3
ja	short loc_641D7918
lea	esi, [type_0+type_0*8]
shl	esi, 5
add	esi, offset _silclogs
jz	short loc_641D7918
mov	edx, [log+118h]
test	edx, edx
jz	short loc_641D792C
mov	ecx, [log+11Ch]
mov	[esp+8], ecx
mov	ecx, [ebp+var_1C]
mov	[esp+4], ecx
mov	[esp], eax
call	edx
test	al, al
jz	short loc_641D792C
			
mov	edx, [ebp+var_1C]
mov	[ebp+type], edx
add	esp, 3Ch
pop	type_0
pop	log
pop	fp
leave
jmp	_silc_free
align 4
			
mov	eax, [log+110h]
mov	[ebp+typename],	eax
mov	al, __data_start__._bf94
test	al, 10h
jz	loc_641D7A10
mov	edi, [log+100h]
test	fp, fp
jnz	short found
dec	type_0
cmp	type_0,	3
jbe	short loc_641D7994
			
mov	eax, [ebp+typename]
test	eax, eax
jz	short loc_641D7918
test	__data_start__._bf94, 4
jz	short loc_641D7918
mov	type_0,	ds:__imp___iob
add	ebx, 40h
mov	ecx, [ebp+var_1C]
mov	[esp+0Ch], ecx
mov	eax, [ebp+typename]
mov	[esp+8], eax
mov	dword ptr [esp+4], offset aLoggingSS 
mov	[esp], ebx	
call	_fprintf
mov	[esp], ebx	
call	_fflush
jmp	short loc_641D7918
align 4
lea	log, [type_0+type_0*8]
shl	esi, 5
add	esi, offset _silclogs
jz	short end
mov	fp, [log+100h]
test	fp, fp
jz	short loc_641D794C
test	al, 1
jz	short loc_641D7A23
mov	dword ptr [esp], 0 
mov	dword ptr [esp+4], 0
call	_silc_time_string
mov	edx, [ebp+var_1C]
mov	[esp+10h], edx
mov	ecx, [ebp+typename]
mov	[esp+0Ch], ecx
mov	[esp+8], eax
mov	dword ptr [esp+4], offset aSSS 
mov	[esp], fp	
call	_fprintf
test	__data_start__._bf94, 42h
jz	end
mov	[esp], fp	
call	_fflush
test	log, log
jz	end
mov	eax, log	
call	_silc_log_checksize
jmp	end
align 10h
test	al, 20h
jz	short loc_641D7A44
mov	edi, ds:__imp___iob
add	edi, 40h
xor	log, log
test	al, 1
jnz	short loc_641D79B0
mov	eax, [ebp+var_1C]
mov	[esp+0Ch], eax
mov	edx, [ebp+typename]
mov	[esp+8], edx
mov	dword ptr [esp+4], offset aSS 
mov	[esp], fp	
call	_fprintf
jmp	short loc_641D79E6
align 4
mov	edi, ds:__imp___iob
lea	eax, [edi+40h]
mov	[esp+0Ch], eax	
mov	dword ptr [esp+8], 5Ah 
mov	dword ptr [esp+4], 1 
mov	dword ptr [esp], offset	aWarningTryingT	
call	_fwrite
mov	al, __data_start__._bf94
or	eax, 20h
mov	__data_start__._bf94, al
jmp	short loc_641D7A1A
			
push	ebp
mov	ebp, esp
push	ebx
sub	esp, 14h
mov	ebx, log
mov	log, [log+100h]
test	eax, eax
jz	short loc_641D7AA5
mov	[esp], eax	
call	_fflush
mov	eax, [log+100h]
mov	[esp], eax	
call	_fclose
cmp	byte ptr [log],	0
jnz	short loc_641D7AB0
			
add	esp, 14h
pop	log
leave
retn
mov	dword ptr [esp+4], offset aA
mov	[esp], log	
call	_fopen
mov	[log+100h], eax
test	eax, eax
jnz	short loc_641D7AAA
call	__errno
mov	eax, [eax]
mov	[esp], eax	
call	_strerror
mov	[esp+0Ch], eax
mov	eax, [log+110h]
mov	[esp+8], eax
mov	[esp+4], log
mov	dword ptr [esp], offset	aCouldnTResetLo	
call	_silc_format
mov	[esp+4], eax	
mov	dword ptr [esp], 2 
call	_silc_log_output
jmp	short loc_641D7AAA
align 4
public _silc_log_reset_all
push	ebp
mov	ebp, esp
sub	esp, 18h
mov	edx, dword_6423B1A0
test	edx, edx
jz	short loc_641D7B26
mov	eax, offset _silclogs 
call	_silc_log_reset
mov	eax, log.fp
test	eax, eax
jz	short loc_641D7B39
mov	eax, offset log	
call	_silc_log_reset
mov	ecx, stru_6423B2E0.fp
test	ecx, ecx
jz	short loc_641D7B4D
mov	eax, offset stru_6423B2E0 
call	_silc_log_reset
mov	edx, stru_6423B400.fp
test	edx, edx
jz	short loc_641D7B61
mov	eax, offset stru_6423B400 
call	_silc_log_reset
mov	eax, dword_6423B1A0
test	eax, eax
jz	short loc_641D7B72
mov	[esp], eax	
call	_fflush
mov	eax, log.fp
test	eax, eax
jz	short loc_641D7B83
mov	[esp], eax	
call	_fflush
mov	eax, stru_6423B2E0.fp
test	eax, eax
jz	short loc_641D7B94
mov	[esp], eax	
call	_fflush
mov	eax, stru_6423B400.fp
test	eax, eax
jz	short locret_641D7BA5
mov	[esp], eax	
call	_fflush
leave
retn
align 4
public _silc_log_fflush_callback
			
push	ebp
mov	ebp, esp
push	ebx
sub	esp, 24h
mov	ebx, [ebp+context]
mov	al, __data_start__._bf94
test	al, 2
jz	short loc_641D7C14
and	eax, 0FFFFFFBFh
mov	__data_start__._bf94, al
mov	eax, __data_start__.flushdelay
cmp	eax, 1
ja	short loc_641D7BDC
mov	__data_start__.flushdelay, 2
mov	eax, 2
mov	dword ptr [esp+18h], 1 
mov	dword ptr [esp+14h], 0 
mov	[esp+10h], eax	
mov	[esp+0Ch], context_0 
mov	dword ptr [esp+8], offset _silc_log_fflush_callback 
mov	dword ptr [esp+4], 0 
mov	[esp], context_0 
call	_silc_schedule_task_add
add	esp, 24h
pop	context_0
leave
retn
align 4
mov	eax, dword_6423B1A0
test	eax, eax
jz	short loc_641D7C25
mov	[esp], eax	
call	_fflush
mov	eax, log.fp
test	eax, eax
jz	short loc_641D7C36
mov	[esp], eax	
call	_fflush
mov	eax, stru_6423B2E0.fp
test	eax, eax
jz	short loc_641D7C47
mov	[esp], eax	
call	_fflush
mov	eax, stru_6423B400.fp
test	eax, eax
jz	short loc_641D7C58
mov	[esp], eax	
call	_fflush
mov	eax, offset _silclogs 
call	_silc_log_checksize
mov	eax, offset log	
call	_silc_log_checksize
mov	eax, offset stru_6423B2E0 
call	_silc_log_checksize
mov	eax, offset stru_6423B400 
call	_silc_log_checksize
mov	al, __data_start__._bf94
jmp	loc_641D7BBB
align 4
public _silc_free
			
push	ebp
mov	ebp, esp
sub	esp, 8
leave
jmp	_free
public _silc_realloc
			
push	ebp
mov	ebp, esp
push	ebx
sub	esp, 14h
mov	eax, [ebp+size]
lea	edx, [eax-1]
cmp	edx, 3FFFFFFEh
ja	short loc_641D7CCA
mov	[esp+4], size_0	
mov	size_0,	[ebp+ptr]
mov	[esp], eax	
call	_realloc
mov	ebx, eax
test	eax, eax
jz	short loc_641D7CEA
			
mov	eax, addr
add	esp, 14h
pop	addr
leave
retn
mov	dword ptr [esp], offset	aInvalidMemoryA
call	_silc_format
mov	[esp+4], eax	
mov	dword ptr [esp], 3 
call	_silc_log_output
xor	ebx, ebx
jmp	short loc_641D7CC2
mov	dword ptr [esp], offset	aSystemOutOfMem
call	_silc_format
mov	[esp+4], eax	
mov	dword ptr [esp], 3 
call	_silc_log_output
jmp	short loc_641D7CC2
public _silc_srealloc_ua
push	ebp
mov	ebp, esp
push	ebx
sub	esp, 24h
mov	eax, [ebp+stack]
mov	ebx, [ebp+old_size]
mov	edx, [ebp+ptr]
mov	ecx, [ebp+size]
test	eax, eax
jz	short loc_641D7D44
mov	dword ptr [esp+10h], 0 
mov	[esp+0Ch], size_0 
mov	[esp+8], ptr_0	
mov	[esp+4], old_size_0 
mov	[esp], stack_0	
call	_silc_stack_realloc
add	esp, 24h
pop	old_size_0
leave
retn
align 4
mov	[ebp+old_size],	size_0
mov	[ebp+stack], ptr_0
add	esp, 24h
pop	old_size_0
leave
jmp	_silc_realloc
public _silc_srealloc
			
push	ebp
mov	ebp, esp
push	ebx
sub	esp, 24h
mov	eax, [ebp+stack]
mov	ebx, [ebp+old_size]
mov	edx, [ebp+ptr]
mov	ecx, [ebp+size]
test	eax, eax
jz	short loc_641D7D90
mov	dword ptr [esp+10h], 1 
mov	[esp+0Ch], size_0 
mov	[esp+8], ptr_0	
mov	[esp+4], old_size_0 
mov	[esp], stack_0	
call	_silc_stack_realloc
add	esp, 24h
pop	old_size_0
leave
retn
align 10h
mov	[ebp+old_size],	size_0
mov	[ebp+stack], ptr_0
add	esp, 24h
pop	old_size_0
leave
jmp	_silc_realloc
public _silc_calloc
			
push	ebp
mov	ebp, esp
push	ebx
sub	esp, 14h
mov	eax, [ebp+items]
mov	edx, [ebp+size]
mov	ecx, edx
imul	ecx, eax
dec	ecx
cmp	ecx, 3FFFFFFEh
ja	short loc_641D7DD5
mov	[esp+4], size_0	
mov	[esp], items_0	
call	_calloc
mov	ebx, eax
test	eax, eax
jz	short loc_641D7DF5
			
mov	eax, addr
add	esp, 14h
pop	addr
leave
retn
mov	dword ptr [esp], offset	aInvalidMemoryA
call	_silc_format
mov	[esp+4], eax	
mov	dword ptr [esp], 3 
call	_silc_log_output
xor	ebx, ebx
jmp	short loc_641D7DCD
mov	dword ptr [esp], offset	aSystemOutOfMem
call	_silc_format
mov	[esp+4], eax	
mov	dword ptr [esp], 3 
call	_silc_log_output
jmp	short loc_641D7DCD
align 4
public _silc_scalloc
			
push	ebp
mov	ebp, esp
push	edi
push	ebx
sub	esp, 10h
mov	edx, [ebp+stack]
mov	eax, [ebp+items]
mov	ebx, [ebp+size]
test	edx, edx
jnz	short loc_641D7E3C
mov	[ebp+items], size_0
mov	[ebp+stack], items_0
add	esp, 10h
pop	size_0
pop	edi
leave
jmp	_silc_calloc
align 4
imul	size_0,	items_0
mov	dword ptr [esp+8], 1 
mov	[esp+4], ebx	
mov	[esp], stack_0	
call	_silc_stack_malloc
mov	edx, eax
test	eax, eax
jz	short loc_641D7E6A
xor	eax, eax
mov	edi, edx
mov	ecx, ebx
rep stosb
mov	eax, edx
add	esp, 10h
pop	ebx
pop	addr
leave
retn
xor	eax, eax
jmp	short loc_641D7E63
align 10h
public _silc_malloc
			
push	ebp
mov	ebp, esp
push	ebx
sub	esp, 14h
mov	eax, [ebp+size]
lea	edx, [eax-1]
cmp	edx, 3FFFFFFEh
ja	short loc_641D7E9B
mov	[esp], size_0	
call	_malloc
mov	ebx, eax
test	eax, eax
jz	short loc_641D7EBB
			
mov	eax, addr
add	esp, 14h
pop	addr
leave
retn
mov	dword ptr [esp], offset	aInvalidMemoryA
call	_silc_format
mov	[esp+4], eax	
mov	dword ptr [esp], 3 
call	_silc_log_output
xor	ebx, ebx
jmp	short loc_641D7E93
mov	dword ptr [esp], offset	aSystemOutOfMem
call	_silc_format
mov	[esp+4], eax	
mov	dword ptr [esp], 3 
call	_silc_log_output
jmp	short loc_641D7E93
align 4
public _silc_smalloc_ua
push	ebp
mov	ebp, esp
sub	esp, 18h
mov	eax, [ebp+stack]
mov	edx, [ebp+size]
test	eax, eax
jz	short loc_641D7F04
mov	dword ptr [esp+8], 0 
mov	[esp+4], size_0	
mov	[esp], stack_0	
call	_silc_stack_malloc
leave
retn
align 4
mov	[ebp+stack], size_0
leave
jmp	_silc_malloc
align 10h
public _silc_smalloc
			
push	ebp
mov	ebp, esp
sub	esp, 18h
mov	eax, [ebp+stack]
mov	edx, [ebp+size]
test	eax, eax
jz	short loc_641D7F38
mov	dword ptr [esp+8], 1 
mov	[esp+4], size_0	
mov	[esp], stack_0	
call	_silc_stack_malloc
leave
retn
align 4
mov	[ebp+stack], size_0
leave
jmp	_silc_malloc
align 4
public _silc_memdup
			
push	ebp
mov	ebp, esp
push	edi
push	esi
push	ebx
sub	esp, 1Ch
mov	esi, [ebp+ptr]
mov	ebx, [ebp+size]
lea	eax, [ebx+1]
mov	[esp], eax	
call	_silc_malloc
test	eax, eax
jz	short loc_641D7F74
mov	edi, eax
mov	ecx, size_0
rep movsb
mov	byte ptr [eax+ebx], 0
add	esp, 1Ch
pop	size_0
pop	ptr_0
pop	addr
leave
retn
mov	dword ptr [esp], offset	aSystemOutOfMem
call	_silc_format
mov	[esp+4], eax	
mov	dword ptr [esp], 3 
call	_silc_log_output
xor	eax, eax
jmp	short loc_641D7F6C
public _silc_smemdup
			
push	ebp
mov	ebp, esp
push	edi
push	esi
push	ebx
sub	esp, 1Ch
mov	eax, [ebp+stack]
mov	esi, [ebp+ptr]
mov	ebx, [ebp+size]
test	eax, eax
jnz	short loc_641D7FCC
lea	stack_0, [size_0+1]
mov	[esp], eax	
call	_silc_malloc
test	eax, eax
jz	short loc_641D7FE9
mov	edi, eax
mov	ecx, size_0
rep movsb
mov	byte ptr [eax+ebx], 0
			
add	esp, 1Ch
pop	size_0
pop	ptr_0
pop	addr
leave
retn
align 4
mov	dword ptr [esp+8], 1 
lea	edx, [size_0+1]
mov	[esp+4], edx	
mov	[esp], stack_0	
call	_silc_stack_malloc
test	eax, eax
jnz	short loc_641D7FB9
jmp	short loc_641D7FC3
mov	dword ptr [esp], offset	aSystemOutOfMem	
call	_silc_format
mov	[esp+4], eax	
mov	dword ptr [esp], 3 
call	_silc_log_output
xor	eax, eax
jmp	short loc_641D7FC3
align 4
public _silc_sstrdup
push	ebp
mov	ebp, esp
push	edi
push	esi
push	ebx
sub	esp, 1Ch
mov	edx, [ebp+stack]
mov	esi, [ebp+str]
xor	eax, eax
mov	ecx, 0FFFFFFFFh
mov	edi, esi
repne scasb
not	ecx
lea	ebx, [ecx-1]
test	edx, edx
jnz	short loc_641D8050
mov	[esp], ecx	
call	_silc_malloc
test	eax, eax
jz	short loc_641D806A
mov	edi, addr
mov	ecx, ebx
rep movsb
mov	byte ptr [eax+ebx], 0
			
add	esp, 1Ch
pop	ebx
pop	str_0
pop	addr
leave
retn
align 10h
mov	dword ptr [esp+8], 0 
mov	[esp+4], ecx	
mov	[esp], stack_0	
call	_silc_stack_malloc
test	eax, eax
jnz	short loc_641D803B
jmp	short loc_641D8045
mov	dword ptr [esp], offset	aSystemOutOfMem	
call	_silc_format
mov	[esp+4], eax	
mov	dword ptr [esp], 3 
call	_silc_log_output
xor	eax, eax
jmp	short loc_641D8045
align 4
public _silc_mime_get_data
push	ebp
mov	ebp, esp
mov	eax, [ebp+mime]
mov	edx, [ebp+data_len]
test	eax, eax
jz	short locret_641D80A5
test	data_len_0, data_len_0
jz	short loc_641D80A2
mov	ecx, [mime_0+8]
mov	[data_len_0], ecx
mov	mime_0,	[mime_0+4]
leave
retn
align 4
public _silc_mime_steal_data
push	ebp
mov	ebp, esp
mov	edx, [ebp+mime]
mov	eax, [ebp+data_len]
test	edx, edx
jz	short loc_641D80D4
test	data_len_0, data_len_0
jz	short loc_641D80BE
mov	ecx, [mime_0+8]
mov	[data_len_0], ecx
mov	data_len_0, [mime_0+4]
mov	dword ptr [mime_0+4], 0
mov	dword ptr [mime_0+8], 0
leave
retn
align 4
xor	data_len_0, data_len_0
leave
retn
public _silc_mime_is_multipart
push	ebp
mov	ebp, esp
mov	eax, [ebp+mime]
test	eax, eax
jz	short locret_641D80EA
mov	mime_0,	[mime_0+0Ch]
test	eax, eax
setnz	al
leave
retn
public _silc_mime_get_multiparts
push	ebp
mov	ebp, esp
mov	eax, [ebp+mime]
mov	edx, [ebp+type]
test	eax, eax
jz	short locret_641D8105
test	type_0,	type_0
jz	short loc_641D8102
mov	ecx, [mime_0+14h]
mov	[type_0], ecx
mov	mime_0,	[mime_0+0Ch]
leave
retn
align 4
			
push	ebp
mov	ebp, esp
push	esi
push	ebx
sub	esp, 10h
mov	ebx, list
mov	esi, context
mov	dword ptr [esp], 0Ch 
call	_silc_malloc
test	eax, eax
jz	short loc_641D814C
mov	[e], context
mov	edx, [list]
test	edx, edx
jz	short loc_641D8160
movzx	edx, word ptr [list+0Ch]
mov	ecx, [list+4]
mov	[ecx+edx], e
test	byte ptr [list+10h], 1
jnz	short loc_641D8154
mov	[list+4], e
mov	dword ptr [e+edx], 0
add	dword ptr [list+10h], 4
mov	al, 1
add	esp, 10h
pop	list
pop	context
leave
retn
align 4
movzx	ecx, word ptr [list+0Eh]
mov	context, [list+4]
mov	[e+ecx], esi
jmp	short loc_641D813C
mov	[list],	e
movzx	edx, word ptr [list+0Ch]
jmp	short loc_641D8136
			
push	ebp
mov	ebp, esp
push	ebx
sub	esp, 14h
mov	ebx, sb
test	sb, sb
jz	short loc_641D8187
mov	sb, [sb]
mov	[esp], eax	
call	_silc_free
mov	[esp], sb	
call	_silc_free
add	esp, 14h
pop	sb
leave
retn
align 10h
			
push	ebp
mov	ebp, esp
push	ebx
sub	esp, 14h
mov	ebx, [ebp+context]
mov	eax, [ebp+key]
mov	[esp], eax	
call	_silc_free
mov	[ebp+key], ebx
add	esp, 14h
pop	ebx
leave
jmp	_silc_free
align 4
public _silc_mime_add_data
			
push	ebp
mov	ebp, esp
push	edi
push	esi
push	ebx
sub	esp, 1Ch
mov	ebx, [ebp+mime]
mov	edi, [ebp+data]
mov	esi, [ebp+data_len]
test	ebx, ebx
jz	short loc_641D81EF
test	data_0,	data_0
jz	short loc_641D81EF
mov	eax, [mime_0+4]
test	eax, eax
jz	short loc_641D81DD
mov	[esp], eax	
call	_silc_free
mov	[esp+4], data_len_0 
mov	[esp], data_0	
call	_silc_memdup
mov	[mime_0+4], eax
mov	[mime_0+8], data_len_0
			
add	esp, 1Ch
pop	mime_0
pop	data_len_0
pop	data_0
leave
retn
align 4
public _silc_mime_get_field
			
push	ebp
mov	ebp, esp
sub	esp, 28h
mov	eax, [ebp+mime]
mov	edx, [ebp+field]
test	eax, eax
jnz	short loc_641D820C
			
xor	eax, eax
leave
retn
test	field_0, field_0
jz	short loc_641D8208
lea	ecx, [ebp+value]
mov	[esp+0Ch], ecx	
mov	dword ptr [esp+8], 0 
mov	[esp+4], field_0 
mov	mime_0,	[mime_0]
mov	[esp], eax	
call	_silc_hash_table_find
test	al, al
jz	short loc_641D8208
mov	eax, [ebp+value]
leave
retn
align 4
public _silc_mime_add_field
			
push	ebp
mov	ebp, esp
push	edi
push	esi
push	ebx
sub	esp, 1Ch
mov	ebx, [ebp+mime]
mov	esi, [ebp+field]
mov	eax, [ebp+value]
test	ebx, ebx
jz	short loc_641D8280
test	field_0, field_0
jz	short loc_641D8280
test	value_0, value_0
jz	short loc_641D8280
mov	[esp], value_0	
call	_strdup
mov	edi, eax
mov	[esp], field_0	
call	_strdup
mov	[ebp+value], edi
mov	[ebp+field], eax
mov	eax, [mime_0]
mov	[ebp+mime], eax
add	esp, 1Ch
pop	mime_0
pop	field_0
pop	edi
leave
jmp	_silc_hash_table_add
align 10h
			
add	esp, 1Ch
pop	mime_0
pop	field_0
pop	edi
leave
retn
push	ebp
mov	ebp, esp
push	esi
push	ebx
sub	esp, 10h
mov	esi, len
mov	dword ptr [esp+4], 10h 
mov	dword ptr [esp], 1 
call	_silc_calloc
mov	ebx, eax
test	eax, eax
jz	short loc_641D82D2
test	len, len
jz	short loc_641D82D2
mov	dword ptr [esp+4], 1 
mov	[esp], len	
call	_silc_calloc
mov	[sb], eax
test	eax, eax
jz	short loc_641D82DB
mov	[sb+4],	eax
mov	[sb+8],	eax
lea	len, [eax+len]
mov	[sb+0Ch], esi
			
mov	eax, sb
add	esp, 10h
pop	sb
pop	len
leave
retn
xor	sb, sb
jmp	short loc_641D82D2
align 10h
public _silc_mime_assembler_free
push	ebp
mov	ebp, esp
push	ebx
sub	esp, 14h
mov	ebx, [ebp+assembler]
mov	eax, [ebx]
mov	[esp], eax	
call	_silc_hash_table_free
mov	[ebp+assembler], ebx
add	esp, 14h
pop	ebx
leave
jmp	_silc_free
align 4
public _silc_mime_assembler_alloc
push	ebp
mov	ebp, esp
push	ebx
sub	esp, 24h
mov	dword ptr [esp+4], 4 
mov	dword ptr [esp], 1 
call	_silc_calloc
mov	ebx, eax
test	eax, eax
jz	short loc_641D836B
mov	dword ptr [esp+1Ch], 1 
mov	[esp+18h], assembler 
mov	dword ptr [esp+14h], offset _silc_mime_assembler_dest 
mov	dword ptr [esp+10h], 0 
mov	dword ptr [esp+0Ch], offset _silc_hash_string_compare 
mov	dword ptr [esp+8], 0 
mov	dword ptr [esp+4], offset _silc_hash_string 
mov	dword ptr [esp], 0 
call	_silc_hash_table_alloc
mov	[assembler], eax
test	eax, eax
jz	short loc_641D8373
			
mov	eax, assembler
add	esp, 24h
pop	assembler
leave
retn
mov	[esp], assembler
call	_silc_mime_assembler_free
xor	assembler, assembler
jmp	short loc_641D836B
align 10h
push	ebp
mov	ebp, esp
push	ebx
sub	esp, 14h
mov	ebx, [ebp+context]
mov	eax, [ebp+key]
mov	[esp], eax	
call	_silc_free
mov	[ebp+key], ebx
add	esp, 14h
pop	ebx
leave
jmp	_silc_hash_table_free
align 4
public _silc_mime_is_partial
push	ebp
mov	ebp, esp
sub	esp, 28h
mov	eax, [ebp+mime]
test	eax, eax
jnz	short loc_641D83B8
			
xor	type, type
leave
retn
align 4
lea	edx, [ebp+ret_context]
mov	[esp+0Ch], edx	
mov	dword ptr [esp+8], 0 
mov	dword ptr [esp+4], offset aContentType 
mov	mime_0,	[mime_0]
mov	[esp], eax	
call	_silc_hash_table_find
test	al, al
jz	short loc_641D83B1
mov	eax, [ebp+ret_context]
test	type, type
jz	short loc_641D83B1
mov	dword ptr [esp+4], offset aMessagePartial 
mov	[esp], type	
call	_strstr
test	eax, eax
setnz	al
leave
retn
align 4
public _silc_mime_partial_free
push	ebp
mov	ebp, esp
push	edi
push	esi
push	ebx
sub	esp, 3Ch
mov	ebx, [ebp+partials]
test	ebx, ebx
jz	loc_641D852C
mov	eax, [partials_0]
mov	[partials_0+8],	eax
mov	dl, [partials_0+10h]
and	edx, 0FFFFFFFDh
mov	[partials_0+10h], dl
mov	dword ptr [partials_0+18h], 0
mov	dword ptr [partials_0+14h], 0
xor	eax, eax
jmp	short loc_641D845B
movzx	ecx, word ptr [partials_0+0Eh]
mov	ecx, [eax+ecx]
mov	[partials_0+8],	ecx
mov	[partials_0+14h], eax
mov	buf, [eax]
test	buf, buf
jz	short loc_641D847B
mov	eax, [buf]
mov	[esp], eax	
call	_silc_free
mov	[esp], buf	
call	_silc_free
mov	eax, [partials_0+14h]
mov	dl, [partials_0+10h]
mov	[partials_0+18h], eax
mov	eax, [partials_0+8]
test	eax, eax
jz	short loc_641D8474
test	dl, 2
jnz	short loc_641D8430
movzx	ecx, word ptr [partials_0+0Ch]
mov	ecx, [eax+ecx]
jmp	short loc_641D8437
align 4
mov	dword ptr [partials_0+14h], 0
mov	ecx, [partials_0]
mov	[partials_0+8],	ecx
and	edx, 0FFFFFFFDh
mov	[partials_0+10h], dl
test	ecx, ecx
jz	short loc_641D84D3
xchg	ax, ax
test	byte ptr [partials_0+10h], 2
jz	short loc_641D84E4
movzx	eax, word ptr [partials_0+0Eh]
mov	eax, [ecx+eax]
mov	[partials_0+8],	eax
mov	eax, [partials_0]
test	eax, eax
jz	short loc_641D84BF
cmp	ecx, eax
jz	loc_641D8534
movzx	edi, word ptr [partials_0+0Ch]
jmp	short loc_641D84B6
cmp	ecx, esi
jz	short loc_641D84F0
mov	eax, esi
lea	edx, [eax+edi]
mov	buf, [edx]
test	esi, esi
jnz	short loc_641D84B0
cmp	ecx, [partials_0+4]
jz	short loc_641D851D
			
mov	[esp], ecx	
call	_silc_free
mov	ecx, [partials_0+8]
test	ecx, ecx
jnz	short loc_641D848C
mov	[ebp+partials],	partials_0
add	esp, 3Ch
pop	partials_0
pop	buf
pop	edi
leave
jmp	_silc_free
align 4
movzx	eax, word ptr [partials_0+0Ch]
mov	eax, [ecx+eax]
jmp	short loc_641D8499
align 10h
mov	[ebp+var_2C], edx
mov	buf, [ecx+edi]
mov	edx, [ebp+var_2C]
mov	[edx], esi
test	esi, esi
jz	short loc_641D850F
test	byte ptr [partials_0+10h], 1
jz	short loc_641D850F
movzx	edi, word ptr [partials_0+0Eh]
mov	edx, [ecx+edi]
mov	[esi+edi], edx
			
cmp	ecx, [partials_0+8]
jz	short loc_641D8522
sub	dword ptr [partials_0+10h], 4
cmp	ecx, [partials_0+4]
jnz	short loc_641D84C4
mov	[partials_0+4],	eax
jmp	short loc_641D84C4
mov	esi, [ebp+var_2C]
mov	edx, [esi]
mov	[partials_0+8],	edx
jmp	short loc_641D8514
add	esp, 3Ch
pop	partials_0
pop	esi
pop	edi
leave
retn
movzx	edi, word ptr [partials_0+0Ch]
mov	[ebp+var_2C], partials_0
xor	eax, eax
jmp	short loc_641D84F3
align 10h
public _silc_mime_free
			
push	ebp
mov	ebp, esp
push	edi
push	esi
push	ebx
sub	esp, 4Ch
mov	eax, [ebp+mime]
mov	[ebp+var_1C], eax
mov	eax, [eax]
test	eax, eax
jz	short loc_641D855D
mov	[esp], eax	
call	_silc_hash_table_free
mov	ecx, [ebp+var_1C]
mov	eax, [ecx+0Ch]
test	eax, eax
jz	loc_641D8633
mov	edx, [eax]
mov	[eax+8], edx
and	byte ptr [eax+10h], 0FDh
mov	dword ptr [eax+18h], 0
mov	dword ptr [eax+14h], 0
mov	esi, ecx
jmp	short loc_641D85A3
align 4
movzx	edx, word ptr [ebx+0Eh]
mov	edx, [eax+edx]
mov	[ebx+8], edx
mov	[ebx+14h], eax
mov	eax, [eax]
test	m, m
jz	short loc_641D85CB
mov	[esp], m	
call	_silc_mime_free
mov	ebx, [mime_0+0Ch]
mov	eax, [ebx+14h]
mov	[ebx+18h], eax
mov	eax, [ebx+8]
test	eax, eax
jz	short loc_641D85C4
test	byte ptr [ebx+10h], 2
jnz	short loc_641D8588
movzx	edx, word ptr [ebx+0Ch]
mov	edx, [eax+edx]
jmp	short loc_641D858F
align 4
mov	dword ptr [ebx+14h], 0
test	ebx, ebx
jz	short loc_641D8633
mov	mime_0,	[ebx]
mov	[ebx+8], esi
and	byte ptr [ebx+10h], 0FDh
test	esi, esi
jz	short loc_641D862B
test	byte ptr [ebx+10h], 2
jz	loc_641D8668
movzx	m, word	ptr [ebx+0Eh]
mov	eax, [esi+eax]
mov	[ebx+8], eax
mov	eax, [ebx]
test	eax, eax
jz	short loc_641D8613
cmp	esi, eax
jz	loc_641D86B7
movzx	edi, word ptr [ebx+0Ch]
jmp	short loc_641D860A
cmp	esi, ecx
jz	short loc_641D8674
mov	eax, ecx
lea	edx, [eax+edi]
mov	ecx, [edx]
test	ecx, ecx
jnz	short loc_641D8604
cmp	esi, [ebx+4]
jz	loc_641D86A5
			
mov	[esp], esi	
call	_silc_free
mov	esi, [ebx+8]
test	esi, esi
jnz	short loc_641D85DC
mov	[esp], ebx
call	_silc_free
			
mov	edi, [ebp+var_1C]
mov	m, [edi+10h]
mov	[esp], eax	
call	_silc_free
mov	eax, [edi+14h]
mov	[esp], eax	
call	_silc_free
mov	eax, [edi+4]
mov	[esp], eax	
call	_silc_free
mov	[ebp+mime], edi
add	esp, 4Ch
pop	ebx
pop	esi
pop	edi
leave
jmp	_silc_free
align 4
movzx	m, word	ptr [ebx+0Ch]
mov	eax, [esi+eax]
jmp	loc_641D85ED
mov	[ebp+var_3C], edx
mov	ecx, [esi+edi]
mov	edi, [ebp+var_3C]
mov	[edi], ecx
test	ecx, ecx
jz	short loc_641D8693
test	byte ptr [ebx+10h], 1
jz	short loc_641D8693
movzx	edx, word ptr [ebx+0Eh]
mov	edi, [esi+edx]
mov	[ecx+edx], edi
			
cmp	esi, [ebx+8]
jz	short loc_641D86AD
sub	dword ptr [ebx+10h], 4
cmp	esi, [ebx+4]
jnz	loc_641D861C
mov	[ebx+4], eax
jmp	loc_641D861C
mov	ecx, [ebp+var_3C]
mov	edx, [ecx]
mov	[ebx+8], edx
jmp	short loc_641D8698
movzx	edi, word ptr [ebx+0Ch]
mov	[ebp+var_3C], ebx
xor	eax, eax
jmp	short loc_641D8677
align 4
push	ebp
mov	ebp, esp
sub	esp, 8
mov	eax, [ebp+context]
mov	[ebp+key], eax
leave
jmp	_silc_mime_free
align 4
public _silc_mime_alloc
			
push	ebp
mov	ebp, esp
push	ebx
sub	esp, 24h
mov	dword ptr [esp+4], 18h 
mov	dword ptr [esp], 1 
call	_silc_calloc
mov	ebx, eax
test	eax, eax
jz	short loc_641D8737
mov	dword ptr [esp+1Ch], 1 
mov	[esp+18h], mime	
mov	dword ptr [esp+14h], offset _silc_mime_field_dest 
mov	[esp+10h], mime	
mov	dword ptr [esp+0Ch], offset _silc_hash_string_compare 
mov	[esp+8], mime	
mov	dword ptr [esp+4], offset _silc_hash_string 
mov	dword ptr [esp], 0 
call	_silc_hash_table_alloc
mov	[mime],	eax
test	eax, eax
jz	short loc_641D873F
			
mov	eax, mime
add	esp, 24h
pop	mime
leave
retn
mov	[esp], mime
call	_silc_mime_free
xor	mime, mime
jmp	short loc_641D8737
align 4
public _silc_mime_add_multipart
push	ebp
mov	ebp, esp
push	esi
push	ebx
sub	esp, 10h
mov	eax, [ebp+mime]
mov	esi, [ebp+part]
test	eax, eax
jz	short loc_641D87B4
mov	ebx, [mime_0+0Ch]
test	ebx, ebx
jz	short loc_641D87B4
test	part_0,	part_0
jz	short loc_641D87B4
mov	dword ptr [esp], 0Ch 
call	_silc_malloc
test	eax, eax
jz	short loc_641D87A9
mov	[eax], part_0
mov	ecx, [ebx]
test	ecx, ecx
jz	short loc_641D87C0
movzx	edx, word ptr [ebx+0Ch]
mov	ecx, [ebx+4]
mov	[ecx+edx], eax
test	byte ptr [ebx+10h], 1
jz	short loc_641D879B
movzx	ecx, word ptr [ebx+0Eh]
mov	part_0,	[ebx+4]
mov	[eax+ecx], esi
mov	[ebx+4], eax
mov	dword ptr [eax+edx], 0
add	dword ptr [ebx+10h], 4
mov	al, 1
add	esp, 10h
pop	ebx
pop	esi
leave
retn
align 4
			
xor	mime_0,	mime_0
add	esp, 10h
pop	ebx
pop	part_0
leave
retn
align 10h
mov	[ebx], eax
movzx	edx, word ptr [ebx+0Ch]
jmp	short loc_641D878B
public _silc_mime_encode
			
push	ebp
mov	ebp, esp
push	edi
push	esi
push	ebx
sub	esp, 47Ch
mov	ebx, [ebp+mime]
test	ebx, ebx
jnz	short loc_641D87EC
			
xor	part, part
mov	eax, ret
add	esp, 47Ch
pop	buffer
pop	ret
pop	edi
leave
retn
align 4
lea	eax, [ebp+buf]
mov	[ebp+var_45C], eax
mov	ecx, 10h
xor	eax, eax
mov	edi, [ebp+var_45C]
rep stosb
lea	ebx, [ebp+htl]
mov	[esp+4], ebx	
mov	edx, [ebp+mime]
mov	eax, [edx]
mov	[esp], eax	
call	_silc_hash_table_list
mov	[ebp+i], 0
lea	esi, [ebp+tmp]
jmp	short loc_641D887A
align 4
mov	ecx, 400h
mov	edi, esi
xor	eax, eax
rep stosb
mov	eax, [ebp+value]
mov	[esp+10h], eax
mov	eax, [ebp+field]
mov	[esp+0Ch], eax
mov	dword ptr [esp+8], offset aSS_0	
mov	dword ptr [esp+4], 3FFh	
mov	[esp], esi	
call	_silc_snprintf
mov	dword ptr [esp+8], 1Dh
mov	[esp+4], esi
lea	edx, [ebp+buf]
mov	[esp], edx	
call	_silc_buffer_strformat
inc	[ebp+i]
lea	ecx, [ebp+value]
mov	[esp+8], ecx	
lea	eax, [ebp+field]
mov	[esp+4], eax	
mov	[esp], ebx	
call	_silc_hash_table_get
test	al, al
jnz	short loc_641D882C
mov	[esp], ebx	
call	_silc_hash_table_list_reset
mov	ecx, [ebp+i]
test	ecx, ecx
jnz	loc_641D8BB0
mov	ecx, [ebp+mime]
mov	ecx, [ecx+8]
mov	[ebp+i], ecx
mov	edi, [ebp+buf.tail]
mov	esi, [ebp+buf.data]
mov	dword ptr [esp+4], 10h 
mov	dword ptr [esp], 1 
call	_silc_calloc
mov	ebx, eax
test	eax, eax
jz	loc_641D87DB
sub	edi, esi
add	edi, [ebp+i]
jz	loc_641D8D62
mov	dword ptr [esp+4], 1 
mov	[esp], edi	
call	_silc_calloc
mov	[buffer], eax
test	eax, eax
jz	loc_641D87DB
mov	[buffer+4], eax
mov	[buffer+8], eax
lea	edx, [eax+edi]
mov	[buffer+0Ch], edx
mov	esi, edx
sub	esi, eax
cmp	edi, esi
ja	short loc_641D8919
mov	[buffer+8], edx
mov	ecx, [ebp+buf.tail]
mov	eax, [ebp+buf.data]
cmp	ecx, eax
jz	short loc_641D8977
sub	ecx, eax
mov	esi, [ebp+buf.head]
mov	eax, [buffer+4]
mov	edx, [buffer+8]
sub	edx, eax
cmp	ecx, edx
ja	short loc_641D8953
mov	edi, eax
rep movsb
mov	eax, [ebp+buf.tail]
sub	eax, [ebp+buf.data]
mov	ecx, [buffer+4]
mov	edx, [buffer+8]
sub	edx, ecx
cmp	eax, edx
ja	short loc_641D8950
lea	eax, [ecx+eax]
mov	[buffer+4], eax
mov	esi, [ebp+buf.head]
mov	[ebp+buf.end], 0
mov	[ebp+buf.tail],	0
mov	[ebp+buf.data],	0
mov	[ebp+buf.head],	0
mov	[esp], esi	
call	_silc_free
mov	eax, [ebp+mime]
mov	esi, [eax+4]
test	esi, esi
jz	short loc_641D8994
mov	ecx, [eax+8]
mov	eax, [buffer+4]
mov	edx, [buffer+8]
sub	edx, eax
cmp	ecx, edx
ja	short loc_641D8994
mov	edi, eax
rep movsb
			
mov	edx, [ebp+mime]
mov	eax, [edx+0Ch]
test	eax, eax
jz	loc_641D8D28
mov	edx, [eax]
mov	[eax+8], edx
and	byte ptr [eax+10h], 0FDh
mov	dword ptr [eax+18h], 0
mov	dword ptr [eax+14h], 0
mov	[ebp+var_450], 0
lea	ecx, [ebp+tmp]
mov	[ebp+var_460], ecx
jmp	loc_641D8B16
mov	edx, offset byte_642640E9
lea	part, [ebp+tmp2]
mov	[esp+14h], esi
mov	[esp+10h], eax
mov	[esp+0Ch], edx
mov	dword ptr [esp+8], offset aSSS_0 
mov	dword ptr [esp+4], 3FFh	
lea	eax, [ebp+tmp]
mov	[esp], eax	
call	_silc_snprintf
mov	esi, [buffer]
mov	edx, [buffer+0Ch]
mov	[ebp+var_450], edx
sub	edx, esi
mov	ecx, 0FFFFFFFFh
mov	edi, [ebp+var_460]
xor	eax, eax
repne scasb
not	ecx
mov	eax, [ebp+pd_len]
add	eax, edx
lea	edi, [ecx+eax-1]
cmp	edi, edx
jbe	short loc_641D8A83
mov	edx, [buffer+4]
mov	ecx, [buffer+8]
mov	[ebp+var_450], ecx
mov	[esp+4], edi	
mov	[esp], esi	
mov	[ebp+var_454], edx
call	_silc_realloc
test	eax, eax
mov	edx, [ebp+var_454]
jz	loc_641D87DB
mov	[buffer], eax
mov	ecx, edx
sub	ecx, esi
lea	esi, [eax+ecx]
mov	[buffer+4], esi
mov	ecx, [ebp+var_450]
sub	ecx, edx
lea	edx, [esi+ecx]
mov	[buffer+8], edx
lea	edi, [eax+edi]
mov	[buffer+0Ch], edi
mov	[ebp+var_450], edi
mov	edx, 0FFFFFFFFh
mov	ecx, edx
mov	edi, [ebp+var_460]
xor	eax, eax
repne scasb
not	ecx
dec	ecx
mov	eax, [buffer+8]
mov	edi, [ebp+var_450]
sub	edi, eax
cmp	ecx, edi
ja	short loc_641D8AD8
mov	edi, eax
mov	esi, [ebp+var_460]
rep movsb
mov	ecx, edx
mov	edi, [ebp+var_460]
xor	eax, eax
repne scasb
mov	edx, ecx
not	edx
dec	edx
mov	eax, [buffer+8]
mov	ecx, [buffer+0Ch]
mov	edi, ecx
sub	edi, eax
cmp	edx, edi
ja	short loc_641D8AD8
add	eax, edx
mov	[buffer+8], eax
mov	edi, ecx
sub	edi, eax
			
mov	ecx, [ebp+pd_len]
cmp	ecx, edi
ja	short loc_641D8AFE
mov	edi, eax
mov	esi, [ebp+i]
rep movsb
mov	edx, [ebp+pd_len]
mov	ecx, [buffer+8]
mov	eax, [buffer+0Ch]
sub	eax, ecx
cmp	edx, eax
ja	short loc_641D8AFE
lea	edx, [ecx+edx]
mov	[buffer+8], edx
			
mov	pd, [ebp+i]
mov	[esp], esi	
call	_silc_free
mov	[ebp+var_450], 1
mov	edx, [ebp+mime]
mov	eax, [edx+0Ch]
mov	edx, [eax+14h]
mov	[eax+18h], edx
mov	edx, [eax+8]
test	edx, edx
jz	loc_641D8BFC
test	byte ptr [eax+10h], 2
jz	loc_641D8BD0
movzx	ecx, word ptr [eax+0Eh]
mov	ecx, [edx+ecx]
mov	[eax+8], ecx
mov	[eax+14h], edx
mov	esi, [edx]
test	part, part
jz	loc_641D8C03
lea	eax, [ebp+pd_len]
mov	[esp+4], eax	
mov	[esp], part	
call	_silc_mime_encode
mov	[ebp+i], eax
test	eax, eax
jz	loc_641D87DB
mov	edi, [ebp+var_460]
mov	ecx, 400h
xor	eax, eax
rep stosb
mov	dword ptr [ebp+tmp2], 0
mov	eax, [part]
mov	[esp], eax	
call	_silc_hash_table_count
test	eax, eax
jz	short loc_641D8BDC
mov	ecx, [ebp+mime]
mov	eax, [ecx+10h]
mov	edx, [ebp+var_450]
test	edx, edx
jz	loc_641D89D4
mov	edx, offset asc_642640E6 
jmp	loc_641D89D9
align 10h
mov	dword ptr [esp+8], 1Dh
mov	dword ptr [esp+4], offset asc_642640E6 
lea	edx, [ebp+buf]
mov	[esp], edx	
call	_silc_buffer_strformat
jmp	loc_641D88AA
movzx	ecx, word ptr [eax+0Ch]
mov	ecx, [edx+ecx]
jmp	loc_641D8B3E
mov	dword ptr [esp+8], offset asc_642640E6
mov	dword ptr [esp+4], 3 
lea	edx, [ebp+tmp2]
mov	[esp], edx	
call	_silc_snprintf
jmp	short loc_641D8B8F
align 4
mov	dword ptr [eax+14h], 0
lea	ecx, [ebp+tmp]
mov	[ebp+var_464], ecx
xor	part, part
mov	ecx, 400h
mov	edi, [ebp+var_464]
mov	eax, esi
rep stosb
mov	edx, [ebp+mime]
mov	eax, [edx+10h]
mov	[esp+0Ch], eax
mov	dword ptr [esp+8], offset aS 
mov	dword ptr [esp+4], 3FFh	
lea	ecx, [ebp+tmp]
mov	[esp], ecx	
call	_silc_snprintf
mov	edx, [buffer]
mov	eax, [buffer+0Ch]
mov	[ebp+i], eax
sub	eax, edx
mov	[ebp+var_450], eax
mov	ecx, 0FFFFFFFFh
mov	edi, [ebp+var_464]
mov	eax, esi
repne scasb
not	ecx
mov	eax, [ebp+var_450]
lea	esi, [eax+ecx-1]
cmp	esi, eax
jbe	short loc_641D8CCC
mov	edi, [buffer+4]
mov	ecx, [buffer+8]
mov	[ebp+i], ecx
mov	[esp+4], esi	
mov	[esp], edx	
mov	[ebp+var_454], edx
call	_silc_realloc
test	eax, eax
mov	edx, [ebp+var_454]
jz	loc_641D87DB
mov	[buffer], eax
mov	ecx, edi
sub	ecx, edx
lea	edx, [eax+ecx]
mov	[buffer+4], edx
mov	ecx, [ebp+i]
sub	ecx, edi
lea	edi, [edx+ecx]
mov	[buffer+8], edi
lea	esi, [eax+esi]
mov	[buffer+0Ch], esi
mov	[ebp+i], esi
mov	edx, 0FFFFFFFFh
xor	eax, eax
mov	ecx, edx
mov	edi, [ebp+var_464]
repne scasb
not	ecx
dec	ecx
mov	esi, [buffer+8]
mov	[ebp+var_450], esi
mov	esi, [ebp+i]
sub	esi, [ebp+var_450]
cmp	ecx, esi
ja	short loc_641D8D28
mov	edi, [ebp+var_450]
mov	esi, [ebp+var_464]
rep movsb
mov	ecx, edx
mov	edi, [ebp+var_464]
repne scasb
mov	edx, ecx
not	edx
dec	edx
mov	eax, [buffer+8]
mov	ecx, [buffer+0Ch]
sub	ecx, eax
cmp	edx, ecx
ja	short loc_641D8D28
lea	edx, [eax+edx]
mov	[buffer+8], edx
			
mov	esi, [buffer]
mov	edi, [ebp+encoded_len]
test	edi, edi
jz	short loc_641D8D3B
mov	eax, [buffer+0Ch]
sub	eax, ret
mov	edx, [ebp+encoded_len]
mov	[edx], eax
mov	dword ptr [buffer+0Ch],	0
mov	dword ptr [buffer+8], 0
mov	dword ptr [buffer+4], 0
mov	dword ptr [buffer], 0
mov	eax, buffer	
call	_silc_buffer_free_1
jmp	loc_641D87DD
mov	edx, [buffer+8]
jmp	loc_641D8916
align 4
public _silc_mime_decode
			
push	ebp
mov	ebp, esp
push	edi
push	esi
push	ebx
sub	esp, 45Ch
mov	edx, [ebp+data]
test	edx, edx
jz	loc_641D92E6
mov	eax, [ebp+mime]
test	eax, eax
jz	loc_641D93DD
mov	[ebp+m], 0
mov	edi, [ebp+data_len]
test	edi, edi
jz	loc_641D938E
mov	edx, [ebp+data]
xor	esi, esi
xor	ebx, ebx
jmp	short loc_641D8DB8
			
inc	i
mov	esi, i
cmp	i, [ebp+data_len]
jnb	loc_641D8F3C
mov	eax, [ebp+data_len]
sub	eax, esi
cmp	eax, 1
jbe	short loc_641D8DAC
mov	edi, [ebp+data]
add	edi, esi
cmp	byte ptr [edi],	0Dh
jnz	short loc_641D8DAC
mov	eax, [ebp+data]
cmp	byte ptr [eax+esi+1], 0Ah
jnz	short loc_641D8DAC
mov	dword ptr [esp+4], 3Ah 
mov	[esp], line	
mov	[ebp+ptr], line
call	_strchr
test	eax, eax
mov	edx, [ebp+ptr]
jz	err
sub	eax, edx
mov	[esp+4], eax	
mov	[esp], line	
call	_silc_memdup
mov	[ebp+var_430], eax
test	eax, eax
mov	edx, [ebp+ptr]
jz	err
mov	dword ptr [esp+4], 3Ah 
mov	[esp], edx	
call	_strchr
mov	edx, edi
sub	edx, eax
dec	edx
jle	err
lea	edx, [eax+1]
mov	[ebp+var_434], edx
mov	ecx, edi
sub	ecx, edx
mov	[ebp+var_42C], ecx
test	ecx, ecx
jle	err
mov	cl, [eax+1]
cmp	cl, 0Dh
jz	err
xor	edx, edx
mov	[ebp+var_438], i
mov	i, [ebp+var_42C]
jmp	short loc_641D8E7D
align 10h
mov	cl, [eax+k+1]
cmp	cl, 0Dh
jz	err
cmp	cl, 20h
jz	short loc_641D8E87
cmp	cl, 9
jnz	short loc_641D8E8C
inc	k
cmp	k, ebx
jl	short loc_641D8E70
mov	ebx, [ebp+var_438]
add	k, [ebp+var_434]
sub	edi, value
test	edi, edi
jle	err
mov	[esp+4], edi	
mov	[esp], value	
call	_silc_memdup
mov	edi, eax
test	eax, eax
jz	err
mov	[esp], eax	
call	_strdup
mov	edx, eax
mov	eax, [ebp+var_430]
mov	[esp], eax	
mov	[ebp+ptr], edx
call	_strdup
mov	edx, [ebp+ptr]
mov	[esp+8], edx	
mov	[esp+4], eax	
mov	edx, [ebp+mime]
mov	eax, [edx]
mov	[esp], eax	
call	_silc_hash_table_add
mov	ecx, [ebp+var_430]
mov	[esp], ecx	
call	_silc_free
mov	[esp], edi	
call	_silc_free
mov	eax, [ebp+data]
lea	edx, [eax+esi+2]
add	i, 2
mov	eax, [ebp+data_len]
sub	eax, i
cmp	eax, 1
jbe	loc_641D8DAC
mov	ecx, [ebp+data]
cmp	byte ptr [ecx+i], 0Dh
jnz	loc_641D8DAC
cmp	byte ptr [ecx+i+1], 0Ah
jnz	loc_641D8DAC
add	i, 2
xchg	ax, ax
			
lea	eax, [ebp+ret_context]
mov	[esp+0Ch], eax	
mov	dword ptr [esp+8], 0 
mov	dword ptr [esp+4], offset aContentType 
mov	line, [ebp+mime]
mov	eax, [edx]
mov	[esp], eax	
call	_silc_hash_table_find
test	al, al
jz	loc_641D9320
mov	ecx, [ebp+ret_context]
mov	[ebp+var_42C], ecx
test	ecx, ecx
jz	loc_641D9320
mov	dword ptr [esp+4], offset aMultipart 
mov	[esp], ecx	
call	_strstr
test	eax, eax
jz	loc_641D9320
mov	dword ptr [esp], 1Ch 
call	_silc_malloc
test	eax, eax
jz	loc_641D92D0
mov	dword ptr [eax+18h], 0
mov	dword ptr [eax+14h], 0
mov	edx, [eax+10h]
and	edx, 3
mov	[eax+10h], edx
mov	word ptr [eax+0Ch], 4
mov	word ptr [eax+0Eh], 8
mov	byte ptr [eax+10h], 1
mov	dword ptr [eax+8], 0
mov	dword ptr [eax+4], 0
mov	dword ptr [eax], 0
mov	edx, [ebp+mime]
mov	[edx+0Ch], eax
mov	dword ptr [esp+4], 2Fh 
mov	ecx, [ebp+var_42C]
mov	[esp], ecx	
call	_strchr
mov	esi, eax
test	eax, eax
jz	err
lea	edx, [eax+1]
mov	[ebp+var_430], edx
mov	dword ptr [esp+4], 22h 
mov	ecx, [ebp+var_42C]
mov	[esp], ecx	
call	_strchr
test	eax, eax
jz	short loc_641D9032
add	esi, 2
mov	[ebp+var_430], esi
mov	dword ptr [esp+4], 3Bh 
mov	eax, [ebp+var_42C]
mov	[esp], eax	
call	_strchr
test	eax, eax
jz	err
lea	edx, [ebp+b]
mov	[ebp+var_44C], edx
mov	ecx, 400h
xor	eax, eax
mov	edi, edx
rep stosb
mov	dword ptr [esp+4], 3Bh 
mov	ecx, [ebp+var_42C]
mov	[esp], ecx	
call	_strchr
sub	eax, [ebp+var_430]
cmp	len, 3FFh
ja	err
mov	[esp+8], len	
mov	len, [ebp+var_430]
mov	[esp+4], eax	
lea	edx, [ebp+b]
mov	[esp], edx	
call	_strncpy
mov	dword ptr [esp+4], 22h 
lea	ecx, [ebp+b]
mov	[esp], ecx	
call	_strchr
test	eax, eax
jz	short loc_641D90C7
mov	byte ptr [eax],	0
xor	esi, esi
mov	ecx, 0FFFFFFFFh
mov	edi, [ebp+var_44C]
mov	eax, esi
repne scasb
not	ecx
dec	ecx
mov	[esp+4], ecx	
lea	edx, [ebp+b]
mov	[esp], edx	
call	_silc_memdup
mov	ecx, [ebp+mime]
mov	[ecx+14h], eax
mov	dword ptr [esp+4], 3Dh 
mov	eax, [ebp+var_42C]
mov	[esp], eax	
call	_strrchr
mov	edx, eax
test	eax, eax
jz	loc_641D92ED
mov	ecx, 0FFFFFFFFh
mov	edi, eax
mov	eax, esi
repne scasb
not	ecx
dec	ecx
cmp	ecx, 1
jbe	loc_641D92ED
mov	ecx, 400h
mov	edi, [ebp+var_44C]
rep stosb
inc	edx
mov	[esp], edx	
call	_strdup
mov	esi, eax
mov	dword ptr [esp+4], 22h 
mov	[esp], eax	
call	_strrchr
test	eax, eax
jz	loc_641D93A8
mov	byte ptr [eax],	0
lea	edi, [line+1]
mov	[esp+0Ch], edi
mov	dword ptr [esp+8], offset aS_0 
mov	dword ptr [esp+4], 3FFh	
lea	edx, [ebp+b]
mov	[esp], edx	
call	_silc_snprintf
mov	[esp], edi	
call	_strdup
mov	ecx, [ebp+mime]
mov	[ecx+10h], eax
mov	[esp], line	
call	_silc_free
cmp	[ebp+data_len],	i
ja	short loc_641D91AE
jmp	loc_641D92ED
align 4
			
inc	i
cmp	[ebp+data_len],	i
jbe	loc_641D92ED
mov	ecx, 0FFFFFFFFh
mov	edi, [ebp+var_44C]
xor	eax, eax
repne scasb
not	ecx
lea	edx, [ecx-1]
mov	eax, [ebp+data_len]
sub	eax, i
cmp	eax, edx
jb	short loc_641D91A4
mov	ecx, [ebp+data]
cmp	byte ptr [ecx+i], 2Dh
jnz	short loc_641D91A4
cmp	byte ptr [ecx+i+1], 2Dh
jnz	short loc_641D91A4
mov	line, ecx
add	esi, i
cmp	edx, edx
mov	edi, [ebp+var_44C]
mov	ecx, edx
repe cmpsb
jnz	short loc_641D91A4
add	i, edx
mov	[ebp+var_430], ebx
mov	eax, [ebp+data_len]
sub	eax, ebx
cmp	eax, 3
ja	loc_641D935C
cmp	eax, 1
jbe	short loc_641D921E
mov	ecx, [ebp+data]
mov	al, [ecx+ebx]
cmp	al, 0Dh
jz	loc_641D93F8
cmp	al, 2Dh
jz	loc_641D9395
			
mov	ecx, [ebp+var_430]
cmp	[ebp+data_len],	ecx
jbe	err
mov	eax, ecx
mov	ebx, ecx
mov	[ebp+var_42C], edx
mov	edx, [ebp+data_len]
jmp	short loc_641D9247
			
inc	k
mov	eax, k
cmp	data_len_0, k
jbe	err
mov	ecx, data_len_0
sub	ecx, eax
cmp	[ebp+var_42C], ecx
ja	short loc_641D923C
mov	ecx, [ebp+data]
cmp	byte ptr [ecx+eax], 2Dh
jnz	short loc_641D923C
cmp	byte ptr [ecx+eax+1], 2Dh
jnz	short loc_641D923C
mov	esi, ecx
add	esi, eax
mov	ecx, [ebp+var_42C]
cmp	ecx, ecx
mov	edi, [ebp+var_44C]
repe cmpsb
setnbe	cl
setb	byte ptr [ebp+var_434]
cmp	cl, byte ptr [ebp+var_434]
jnz	short loc_641D923C
cmp	[ebp+data_len],	eax
jbe	short err
sub	k, [ebp+var_430]
sub	ebx, 2
mov	[esp+8], ebx	
mov	eax, [ebp+data]
add	eax, [ebp+var_430]
mov	[esp+4], eax	
mov	dword ptr [esp], 0 
call	_silc_mime_decode
mov	edx, eax	
test	eax, eax
jz	short err
mov	ecx, [ebp+mime]
mov	p, [ecx+0Ch]	
call	_silc_dlist_add_0
add	ebx, [ebp+var_430]
jmp	loc_641D91A4
mov	eax, [ebp+mime]
mov	dword ptr [eax+0Ch], 0
xchg	ax, ax
			
mov	esi, [ebp+m]
test	esi, esi
jnz	short loc_641D92FB
mov	[ebp+mime], 0
			
mov	len, [ebp+mime]
add	esp, 45Ch
pop	k
pop	line
pop	edi
leave
retn
mov	len, [ebp+m]
mov	[esp], eax	
call	_silc_mime_free
mov	[ebp+mime], 0
mov	eax, [ebp+mime]
add	esp, 45Ch
pop	k
pop	esi
pop	edi
leave
retn
align 10h
			
cmp	[ebp+data_len],	i
jbe	short loc_641D9342
mov	eax, [ebp+data_len]
sub	eax, ebx
mov	[esp+8], eax	
add	ebx, [ebp+data]
mov	[esp+4], ebx	
mov	ecx, [ebp+mime]
mov	[esp], ecx	
call	_silc_mime_add_data
jmp	short loc_641D92ED
mov	edx, [ebp+mime]
mov	eax, [edx]
mov	[esp], eax	
call	_silc_hash_table_count
test	eax, eax
jnz	short loc_641D9355
xor	ebx, ebx
cmp	[ebp+data_len],	ebx
jz	short loc_641D92ED
jmp	short loc_641D9325
mov	ecx, [ebp+data]
mov	al, [ecx+ebx]
cmp	al, 0Dh
jnz	loc_641D9216
cmp	byte ptr [ecx+ebx+1], 0Ah
jnz	loc_641D921E
cmp	byte ptr [ecx+ebx+2], 0Dh
jz	loc_641D9408
			
add	ebx, 2
mov	[ebp+var_430], ebx
jmp	loc_641D921E
xor	ebx, ebx
jmp	loc_641D8F3C
mov	eax, [ebp+data]
cmp	byte ptr [eax+ebx+1], 2Dh
jnz	loc_641D921E
jmp	loc_641D92ED
mov	[esp+0Ch], line
mov	dword ptr [esp+8], offset aS_0 
mov	dword ptr [esp+4], 3FFh	
lea	eax, [ebp+b]
mov	[esp], eax	
call	_silc_snprintf
mov	[esp], line	
call	_strdup
mov	edx, [ebp+mime]
mov	[edx+10h], eax
jmp	loc_641D9190
call	_silc_mime_alloc
mov	[ebp+mime], eax
test	eax, eax
jz	loc_641D92ED
mov	[ebp+m], eax
jmp	loc_641D8D98
cmp	byte ptr [ecx+ebx+1], 0Ah
jnz	loc_641D921E
jmp	loc_641D9380
cmp	byte ptr [ecx+ebx+3], 0Ah
jnz	loc_641D9380
add	[ebp+var_430], 4
jmp	loc_641D921E
align 10h
public _silc_mime_assemble
push	ebp
mov	ebp, esp
push	edi
push	esi
push	ebx
sub	esp, 6Ch
mov	edi, [ebp+assembler]
test	edi, edi
jz	loc_641D965C
mov	esi, [ebp+partial]
test	esi, esi
jz	loc_641D965C
lea	eax, [ebp+ret_context]
mov	[esp+0Ch], eax	
mov	dword ptr [esp+8], 0 
mov	dword ptr [esp+4], offset aContentType 
mov	edx, [ebp+partial]
mov	eax, [edx]
mov	[esp], eax	
call	_silc_hash_table_find
test	al, al
jz	loc_641D965C
mov	ebx, [ebp+ret_context]
test	type, type
jz	loc_641D965C
mov	dword ptr [esp+4], offset aId 
mov	[esp], type	
call	_strstr
mov	edx, eax
test	eax, eax
jz	loc_641D965C
xor	eax, eax
mov	ecx, 0FFFFFFFFh
mov	edi, edx
repne scasb
not	ecx
dec	ecx
cmp	ecx, 4
jbe	loc_641D965C
lea	eax, [edx+3]
cmp	byte ptr [edx+3], 22h
jz	loc_641D9688
mov	[esp], tmp	
call	_strdup
mov	[ebp+id], eax
mov	dword ptr [esp+4], 3Bh 
mov	[esp], eax	
call	_strchr
test	eax, eax
jz	short loc_641D94D6
mov	byte ptr [eax],	0
mov	dword ptr [esp+4], 22h 
mov	ecx, [ebp+id]
mov	[esp], ecx	
call	_strrchr
test	eax, eax
jz	short loc_641D94F0
mov	byte ptr [eax],	0
mov	dword ptr [esp+4], offset aNumber 
mov	[esp], type	
call	_strstr
test	eax, eax
jz	loc_641D9663
mov	dword ptr [esp+4], 3Dh 
mov	[esp], eax	
call	_strchr
mov	edx, eax
xor	eax, eax
mov	ecx, 0FFFFFFFFh
mov	edi, edx
repne scasb
not	ecx
dec	ecx
cmp	ecx, 1
jbe	loc_641D9663
lea	esi, [edx+1]
mov	dword ptr [esp+4], 3Bh 
mov	[esp], tmp	
call	_strchr
test	eax, eax
jz	loc_641D98E0
mov	[esp], tmp	
call	_strdup
mov	tmp, eax
mov	dword ptr [esp+4], 3Bh 
mov	[esp], eax	
call	_strchr
mov	byte ptr [eax],	0
mov	[esp], esi	
call	_atoi
mov	[ebp+number], eax
mov	[esp], esi	
call	_silc_free
lea	eax, [ebp+f]
mov	[esp+0Ch], eax	
mov	dword ptr [esp+8], 0 
mov	eax, [ebp+id]
mov	[esp+4], eax	
mov	edx, [ebp+assembler]
mov	eax, [edx]
mov	[esp], eax	
call	_silc_hash_table_find
test	al, al
jz	loc_641D9690
mov	dword ptr [esp+4], offset aTotal 
mov	[esp], type	
call	_strstr
test	eax, eax
jz	loc_641D98F0
mov	dword ptr [esp+4], 3Dh 
mov	[esp], eax	
call	_strchr
mov	edx, eax
xor	eax, eax
mov	ecx, 0FFFFFFFFh
mov	edi, edx
repne scasb
not	ecx
dec	ecx
cmp	ecx, 1
jbe	short loc_641D9663
lea	type, [edx+1]
mov	dword ptr [esp+4], 3Bh 
mov	[esp], tmp	
call	_strchr
test	eax, eax
jz	loc_641D98FC
mov	[esp], tmp	
call	_strdup
mov	tmp, eax
mov	dword ptr [esp+4], 3Bh 
mov	[esp], eax	
call	_strchr
mov	byte ptr [eax],	0
mov	[esp], ebx	
call	_atoi
mov	esi, eax
mov	[esp], ebx	
call	_silc_free
			
cmp	[ebp+number], total
jz	loc_641D9718
mov	ecx, [ebp+partial]
mov	[esp+8], ecx	
mov	eax, [ebp+number]
mov	[esp+4], eax	
mov	eax, [ebp+f]
mov	[esp], eax	
call	_silc_hash_table_add
xor	total, total
mov	eax, complete
add	esp, 6Ch
pop	compbuf
pop	complete
pop	edi
leave
retn
			
mov	[ebp+id], 0
			
mov	eax, [ebp+id]
mov	[esp], eax	
call	_silc_free
			
mov	ecx, [ebp+partial]
mov	[esp], ecx	
call	_silc_mime_free
xor	data, data
mov	eax, complete
add	esp, 6Ch
pop	compbuf
pop	complete
pop	edi
leave
retn
align 4
lea	tmp, [edx+4]
jmp	loc_641D94B4
mov	dword ptr [esp+1Ch], 1
mov	dword ptr [esp+18h], 0 
mov	dword ptr [esp+14h], offset _silc_mime_assemble_dest 
mov	dword ptr [esp+10h], 0 
mov	dword ptr [esp+0Ch], 0 
mov	dword ptr [esp+8], 0 
mov	dword ptr [esp+4], offset _silc_hash_uint 
mov	dword ptr [esp], 0 
call	_silc_hash_table_alloc
mov	[ebp+f], eax
test	f_0, f_0
jz	short loc_641D9663
mov	ecx, [ebp+partial]
mov	[esp+8], ecx	
mov	edx, [ebp+number]
mov	[esp+4], edx	
mov	[esp], f_0	
call	_silc_hash_table_add
mov	eax, [ebp+f]
mov	[esp+8], eax	
mov	ecx, [ebp+id]
mov	[esp+4], ecx	
mov	edx, [ebp+assembler]
mov	eax, [edx]
mov	[esp], eax	
call	_silc_hash_table_add
xor	tmp, tmp
mov	eax, complete
add	esp, 6Ch
pop	type
pop	complete
pop	edi
leave
retn
mov	edx, [ebp+partial]
mov	[esp+8], edx	
mov	ecx, [ebp+number]
mov	[esp+4], ecx	
mov	eax, [ebp+f]
mov	[esp], eax	
call	_silc_hash_table_add
mov	eax, [ebp+f]
mov	[esp], eax	
call	_silc_hash_table_count
cmp	eax, [ebp+number]
jb	loc_641D9679
mov	tmp, [ebp+number]
test	ebx, ebx
jle	loc_641D990B
xor	ebx, ebx
mov	[ebp+i], 1
jmp	loc_641D9805
align 10h
mov	ecx, [eax+8]
mov	[ebp+items], ecx
mov	data, [eax+4]
test	data, data
jz	err
test	compbuf, compbuf
jz	loc_641D9860
mov	eax, [compbuf+0Ch]
mov	edx, [compbuf]
mov	[ebp+ptr], edx
mov	edx, eax
sub	edx, [ebp+ptr]
mov	ecx, [ebp+items]
lea	edi, [edx+ecx]
cmp	edi, edx
jbe	loc_641D9960
mov	eax, [compbuf+4]
mov	[ebp+var_4C], eax
mov	edx, [compbuf+8]
mov	[ebp+var_3C], edx
mov	[esp+4], edi	
mov	ecx, [ebp+ptr]
mov	[esp], ecx	
call	_silc_realloc
test	eax, eax
jz	loc_641D9663
mov	[compbuf], eax
mov	ecx, [ebp+var_4C]
sub	ecx, [ebp+ptr]
lea	edx, [eax+ecx]
mov	[compbuf+4], edx
mov	ecx, [ebp+var_3C]
sub	ecx, [ebp+var_4C]
add	edx, ecx
mov	[compbuf+8], edx
add	eax, edi
mov	[compbuf+0Ch], eax
sub	eax, edx
cmp	[ebp+items], eax
ja	short loc_641D97F6
mov	edi, edx
mov	ecx, [ebp+items]
rep movsb
mov	data_len, [compbuf+8]
mov	eax, [compbuf+0Ch]
sub	eax, ecx
cmp	[ebp+items], eax
ja	short loc_641D97F6
add	ecx, [ebp+items]
mov	[compbuf+8], ecx
			
inc	[ebp+i]
mov	eax, [ebp+i]
cmp	[ebp+number], eax
jl	loc_641D9910
lea	eax, [ebp+p]
mov	[esp+0Ch], eax	
mov	dword ptr [esp+8], 0 
mov	edx, [ebp+i]
mov	[esp+4], edx	
mov	eax, [ebp+f]
mov	[esp], eax	
call	_silc_hash_table_find
test	al, al
jz	short err
mov	eax, [ebp+p]
test	eax, eax
jnz	loc_641D9760
			
mov	edx, [ebp+id]
mov	[esp], edx	
call	_silc_free
test	compbuf, compbuf
jz	loc_641D966E
mov	eax, [compbuf]
mov	[esp], eax	
call	_silc_free
mov	[esp], compbuf	
call	_silc_free
jmp	loc_641D966E
align 10h
mov	dword ptr [esp+4], 10h 
mov	dword ptr [esp], 1 
call	_silc_calloc
mov	compbuf, eax
test	eax, eax
jz	loc_641D9663
mov	ecx, [ebp+items]
test	ecx, ecx
jz	loc_641D9968
mov	dword ptr [esp+4], 1 
mov	compbuf, [ebp+items]
mov	[esp], eax	
call	_silc_calloc
mov	[compbuf], eax
test	eax, eax
jz	loc_641D9663
mov	[compbuf+4], eax
mov	[compbuf+8], eax
mov	ecx, [ebp+items]
lea	edx, [eax+ecx]
mov	[compbuf+0Ch], edx
mov	ecx, edx
sub	ecx, eax
cmp	[ebp+items], ecx
ja	short loc_641D98C3
mov	[compbuf+8], edx
mov	eax, edx
mov	edx, [compbuf+4]
sub	eax, edx
cmp	[ebp+items], eax
ja	loc_641D97F6
mov	edi, edx
mov	ecx, [ebp+items]
rep movsb
jmp	loc_641D97F6
align 10h
mov	[esp], tmp	
call	_atoi
mov	[ebp+number], eax
jmp	loc_641D957C
mov	tmp, 0FFFFFFFFh
jmp	loc_641D962E
align 4
mov	[esp], tmp	
call	_atoi
mov	esi, eax
jmp	loc_641D962E
xor	ebx, ebx
lea	data, [data+0]
mov	edx, [compbuf]
mov	eax, [compbuf+0Ch]
sub	eax, edx
mov	[esp+8], eax	
mov	[esp+4], edx	
mov	dword ptr [esp], 0 
call	_silc_mime_decode
mov	data, eax
test	eax, eax
jz	err
mov	edx, [ebp+id]
mov	[esp+4], edx	
mov	ecx, [ebp+assembler]
mov	complete, [ecx]
mov	[esp], eax	
call	_silc_hash_table_del
mov	eax, [ebp+id]
mov	[esp], eax	
call	_silc_free
mov	eax, compbuf	
call	_silc_buffer_free_1
jmp	loc_641D9652
mov	edx, [compbuf+8]
jmp	loc_641D97D5
mov	edx, [compbuf+8]
jmp	loc_641D98BE
public _silc_mime_set_multipart
push	ebp
mov	ebp, esp
push	edi
push	esi
push	ebx
sub	esp, 43Ch
mov	ebx, [ebp+mime]
mov	edx, [ebp+boundary]
test	ebx, ebx
jz	loc_641D9A22
mov	ecx, [ebp+type]
test	ecx, ecx
jz	loc_641D9A22
test	boundary_0, boundary_0
jz	loc_641D9A22
lea	esi, [ebp+tmp]
mov	ecx, 400h
xor	eax, eax
mov	edi, esi
rep stosb
mov	[esp+10h], boundary_0
mov	eax, [ebp+type]
mov	[esp+0Ch], eax
mov	dword ptr [esp+8], offset aMultipartSBoun 
mov	dword ptr [esp+4], 3FFh	
mov	[esp], esi	
mov	[ebp+var_41C], boundary_0
call	_silc_snprintf
mov	[esp], esi	
call	_strdup
mov	esi, eax
mov	dword ptr [esp], offset	aContentType 
call	_strdup
mov	[esp+8], esi	
mov	[esp+4], eax	
mov	eax, [mime_0]
mov	[esp], eax	
call	_silc_hash_table_add
mov	eax, [mime_0+10h]
mov	[esp], eax	
call	_silc_free
mov	edx, [ebp+var_41C]
mov	[esp], edx	
call	_strdup
mov	[mime_0+10h], eax
mov	eax, [mime_0+0Ch]
test	eax, eax
jz	short loc_641D9A30
			
add	esp, 43Ch
pop	mime_0
pop	esi
pop	edi
leave
retn
align 10h
mov	dword ptr [esp], 1Ch 
call	_silc_malloc
test	eax, eax
jz	short loc_641D9A7B
mov	dword ptr [eax+18h], 0
mov	dword ptr [eax+14h], 0
mov	edx, [eax+10h]
and	edx, 3
mov	[eax+10h], edx
mov	word ptr [eax+0Ch], 4
mov	word ptr [eax+0Eh], 8
mov	byte ptr [eax+10h], 1
mov	dword ptr [eax+8], 0
mov	dword ptr [eax+4], 0
mov	dword ptr [eax], 0
mov	[mime_0+0Ch], eax
jmp	short loc_641D9A22
public _silc_mime_encode_partial
push	ebp
mov	ebp, esp
push	edi
push	esi
push	ebx
sub	esp, 12Ch
lea	eax, [ebp+buf_len]
mov	[esp+4], eax	
mov	eax, [ebp+mime]
mov	[esp], eax	
call	_silc_mime_encode
mov	[ebp+ptr], eax
test	eax, eax
jz	loc_641D9D84
mov	dword ptr [esp], 1Ch 
call	_silc_malloc
mov	ebx, eax
test	eax, eax
jz	short loc_641D9AF9
mov	dword ptr [list+18h], 0
mov	dword ptr [list+14h], 0
mov	list, [list+10h]
and	eax, 3
mov	[list+10h], eax
mov	word ptr [list+0Ch], 4
mov	word ptr [list+0Eh], 8
mov	byte ptr [list+10h], 1
mov	dword ptr [list+8], 0
mov	dword ptr [list+4], 0
mov	dword ptr [list], 0
mov	esi, [ebp+buf_len]
cmp	[ebp+max_size],	esi
jb	loc_641D9BEC
mov	dword ptr [esp+4], 10h 
mov	dword ptr [esp], 1 
call	_silc_calloc
mov	edx, eax
test	eax, eax
jz	loc_641D9D84
test	esi, esi
jz	loc_641DA151
mov	dword ptr [esp+4], 1 
mov	[esp], esi	
mov	[ebp+context], buffer
call	_silc_calloc
mov	edx, [ebp+context]
mov	[edx], eax
test	eax, eax
jz	loc_641D9D84
mov	[buffer+4], eax
mov	[buffer+8], eax
lea	ecx, [eax+esi]
mov	[buffer+0Ch], ecx
mov	edi, ecx
sub	edi, eax
cmp	esi, edi
ja	short loc_641D9B6A
mov	[buffer+8], ecx
mov	eax, ecx
mov	ecx, [ebp+buf_len]
mov	esi, [buffer+4]
mov	[ebp+var_EC], esi
sub	eax, esi
cmp	ecx, eax
ja	short loc_641D9B8A
mov	edi, [ebp+var_EC]
mov	esi, [ebp+ptr]
rep movsb
mov	dword ptr [esp], 0Ch 
mov	[ebp+context], buffer
call	_silc_malloc
test	eax, eax
mov	edx, [ebp+context]
jz	short loc_641D9BD4
mov	[eax], edx
mov	buf, [list]
test	esi, esi
jz	loc_641DA120
movzx	buffer,	word ptr [list+0Ch]
mov	ecx, [list+4]
mov	[ecx+edx], eax
test	byte ptr [list+10h], 1
jnz	loc_641D9D90
mov	[list+4], eax
mov	dword ptr [eax+edx], 0
add	dword ptr [list+10h], 4
			
mov	tmp, [ebp+ptr]
mov	[esp], esi	
call	_silc_free
mov	eax, list
lea	esp, [ebp-0Ch]
pop	list
pop	esi
pop	edi
leave
retn
lea	eax, [ebp+id]
mov	[ebp+var_10C], eax
mov	ecx, 40h
mov	edi, eax
xor	eax, eax
rep stosb
lea	edx, [ebp+type]
mov	[ebp+var_110], edx
mov	cl, 80h
mov	edi, edx
rep stosb
mov	dword ptr [esp+4], 7Fh 
mov	[esp], edx	
call	_gethostname@8
sub	esp, 8
mov	dword ptr [esp], 0 
call	_time
mov	esi, [ebp+buf_len]
add	esi, eax
call	_rand
xor	eax, esi
mov	[esp], eax	
call	_srand
mov	edi, [ebp+buf_len]
mov	dword ptr [esp], 0 
call	_time
mov	esi, eax
call	_rand
lea	edx, [ebp+type]
mov	[esp+18h], edx
mov	[esp+14h], edi
mov	[esp+10h], esi
mov	[esp+0Ch], eax
mov	dword ptr [esp+8], offset aXXXS	
mov	dword ptr [esp+4], 3Fh 
lea	ecx, [ebp+id]
mov	[esp], ecx	
call	_silc_snprintf
mov	dword ptr [esp+4], 18h 
mov	dword ptr [esp], 1 
call	_silc_calloc
mov	esi, eax
test	eax, eax
jz	loc_641D9D84
mov	dword ptr [esp+1Ch], 1 
mov	[esp+18h], eax	
mov	dword ptr [esp+14h], offset _silc_mime_field_dest 
mov	[esp+10h], eax	
mov	dword ptr [esp+0Ch], offset _silc_hash_string_compare 
mov	[esp+8], eax	
mov	dword ptr [esp+4], offset _silc_hash_string 
mov	dword ptr [esp], 0 
call	_silc_hash_table_alloc
mov	[esi], eax
test	eax, eax
jz	loc_641DA137
mov	dword ptr [esp+8], offset value	
mov	dword ptr [esp+4], offset field	
mov	[esp], esi	
call	_silc_mime_add_field
mov	ecx, 80h
mov	edi, [ebp+var_110]
xor	eax, eax
rep stosb
lea	edx, [ebp+id]
mov	[esp+0Ch], edx
mov	dword ptr [esp+8], offset aMessageParti_0 
mov	dword ptr [esp+4], 7Fh 
lea	ecx, [ebp+type]
mov	[esp], ecx	
call	_silc_snprintf
lea	eax, [ebp+type]
mov	[esp+8], eax	
mov	dword ptr [esp+4], offset aContentType 
mov	[esp], esi	
call	_silc_mime_add_field
mov	edx, [ebp+max_size]
mov	[esp+8], edx	
mov	ecx, [ebp+ptr]
mov	[esp+4], ecx	
mov	[esp], esi	
call	_silc_mime_add_data
lea	eax, [ebp+tmp_len]
mov	[esp+4], eax	
mov	[esp], esi	
call	_silc_mime_encode
mov	[ebp+var_F4], eax
test	eax, eax
jnz	short loc_641D9DA0
			
xor	num, num
mov	eax, list
lea	esp, [ebp-0Ch]
pop	list
pop	partial
pop	edi
leave
retn
movzx	ecx, word ptr [list+0Eh]
mov	esi, [list+4]
mov	[eax+ecx], esi
jmp	loc_641D9BC6
align 10h
mov	[esp], esi	
call	_silc_mime_free
mov	esi, [ebp+tmp_len]
mov	dword ptr [esp+4], 10h 
mov	dword ptr [esp], 1 
call	_silc_calloc
mov	edx, eax
test	eax, eax
jz	short loc_641D9D84
test	esi, esi
jz	loc_641DA161
mov	dword ptr [esp+4], 1 
mov	[esp], esi	
mov	[ebp+context], buffer
call	_silc_calloc
mov	edx, [ebp+context] 
mov	[edx], eax
test	eax, eax
jz	short loc_641D9D84
mov	[buffer+4], eax
mov	[buffer+8], eax
lea	ecx, [eax+esi]
mov	[buffer+0Ch], ecx
mov	edi, ecx
sub	edi, eax
cmp	esi, edi
ja	short loc_641D9E08
mov	[buffer+8], ecx
mov	eax, ecx
mov	ecx, [ebp+tmp_len]
mov	esi, [buffer+4]
mov	[ebp+var_F8], esi
sub	eax, esi
cmp	ecx, eax
ja	short loc_641D9E28
mov	edi, [ebp+var_F8]
mov	esi, [ebp+var_F4]
rep movsb
mov	eax, list	
call	_silc_dlist_add_0
mov	tmp, [ebp+var_F4]
mov	[esp], esi	
call	_silc_free
mov	eax, [ebp+buf_len]
sub	eax, [ebp+max_size]
mov	[ebp+len], buf_len_0
jz	loc_641D9BD4
mov	buf_len_0, [ebp+max_size]
mov	[ebp+off], eax
mov	eax, 2
mov	[ebp+var_F4], list
mov	list, num
jmp	loc_641DA00F
align 4
lea	edx, [num+1]
mov	[ebp+var_104], edx
mov	[esp+10h], num
lea	ecx, [ebp+id]
mov	[esp+0Ch], ecx
mov	dword ptr [esp+8], offset aMessageParti_2 
mov	dword ptr [esp+4], 7Fh 
lea	num, [ebp+type]
mov	[esp], ebx	
call	_silc_snprintf
mov	eax, [ebp+max_size]
mov	[esp+8], eax	
mov	eax, [ebp+ptr]
add	eax, [ebp+off]
mov	[esp+4], eax	
mov	[esp], partial	
call	_silc_mime_add_data
mov	edx, [ebp+max_size]
add	[ebp+off], edx
sub	[ebp+len], edx
lea	ecx, [ebp+type]
mov	[esp], ecx	
call	_strdup
mov	num, eax
mov	dword ptr [esp], offset	aContentType 
call	_strdup
mov	[esp+8], ebx	
mov	[esp+4], eax	
mov	eax, [partial]
mov	[esp], eax	
call	_silc_hash_table_add
lea	ebx, [ebp+tmp_len]
mov	[esp+4], ebx	
mov	[esp], partial	
call	_silc_mime_encode
mov	[ebp+var_F8], eax
test	eax, eax
jz	loc_641D9D84
mov	[esp], partial	
call	_silc_mime_free
mov	partial, [ebp+tmp_len]
mov	dword ptr [esp+4], 10h 
mov	dword ptr [esp], 1 
call	_silc_calloc
mov	ebx, eax
test	eax, eax
jz	loc_641D9D84
test	esi, esi
jz	loc_641DA159
mov	dword ptr [esp+4], 1 
mov	[esp], esi	
call	_silc_calloc
mov	[buffer], eax
test	eax, eax
jz	loc_641D9D84
mov	[buffer+4], eax
mov	[buffer+8], eax
lea	edx, [eax+esi]
mov	[buffer+0Ch], edx
mov	ecx, edx
sub	ecx, eax
cmp	esi, ecx
ja	short loc_641D9F7B
mov	[buffer+8], edx
mov	eax, edx
mov	ecx, [ebp+tmp_len]
mov	edx, [buffer+4]
sub	eax, edx
cmp	ecx, eax
ja	short loc_641D9F91
mov	edi, edx
mov	esi, [ebp+var_F8]
rep movsb
mov	dword ptr [esp], 0Ch 
call	_silc_malloc
test	eax, eax
jz	short loc_641D9FED
mov	[eax], buffer
mov	tmp, [ebp+var_F4]
mov	edx, [esi]
test	edx, edx
jz	loc_641DA12C
mov	ecx, [ebp+var_F4]
movzx	edx, word ptr [ecx+0Ch]
mov	ecx, [ecx+4]
mov	[ecx+edx], eax
mov	esi, [ebp+var_F4]
test	byte ptr [esi+10h], 1
jz	short loc_641D9FD9
movzx	ecx, word ptr [esi+0Eh]
mov	buffer,	[esi+4]
mov	[eax+ecx], ebx
mov	ecx, [ebp+var_F4]
mov	[ecx+4], eax
mov	dword ptr [eax+edx], 0
add	dword ptr [ecx+10h], 4
mov	buffer,	[ebp+var_F8]
mov	[esp], ebx	
call	_silc_free
mov	edi, [ebp+len]
test	edi, edi
jz	loc_641DA146
mov	ebx, [ebp+var_104]
mov	dword ptr [esp+4], 18h
mov	dword ptr [esp], 1 
call	_silc_calloc
mov	tmp, eax
test	eax, eax
jz	loc_641D9D84
mov	dword ptr [esp+1Ch], 1 
mov	[esp+18h], partial 
mov	dword ptr [esp+14h], offset _silc_mime_field_dest 
mov	[esp+10h], partial 
mov	dword ptr [esp+0Ch], offset _silc_hash_string_compare 
mov	[esp+8], partial 
mov	dword ptr [esp+4], offset _silc_hash_string 
mov	dword ptr [esp], 0 
call	_silc_hash_table_alloc
mov	[partial], eax
test	eax, eax
jz	loc_641DA137
mov	edi, [ebp+var_110]
mov	ecx, 80h
xor	eax, eax
rep stosb
mov	dword ptr [esp], offset	value 
call	_strdup
mov	edi, eax
mov	dword ptr [esp], offset	field 
call	_strdup
mov	[esp+8], edi	
mov	[esp+4], eax	
mov	eax, [partial]
mov	[esp], eax	
call	_silc_hash_table_add
mov	edx, [ebp+len]
cmp	[ebp+max_size],	edx
jb	loc_641D9E6C
mov	[esp+14h], num
mov	[esp+10h], num
lea	ecx, [ebp+id]
mov	[esp+0Ch], ecx
mov	dword ptr [esp+8], offset aMessageParti_1 
mov	dword ptr [esp+4], 7Fh 
lea	eax, [ebp+type]
mov	[esp], eax	
call	_silc_snprintf
mov	edx, [ebp+len]
mov	[esp+8], edx	
mov	eax, [ebp+ptr]
add	eax, [ebp+off]
mov	[esp+4], eax	
mov	[esp], partial	
call	_silc_mime_add_data
mov	[ebp+var_104], num
mov	[ebp+len], 0
jmp	loc_641D9ECC
align 10h
mov	[list],	eax
movzx	buffer,	word ptr [list+0Ch]
jmp	loc_641D9BBC
align 4
mov	[esi], eax
movzx	edx, word ptr [esi+0Ch]
jmp	loc_641D9FC3
			
mov	[esp], partial
call	_silc_mime_free
xor	num, num
jmp	loc_641D9D86
mov	ebx, [ebp+var_F4]
jmp	loc_641D9BD4
mov	ecx, [buffer+8]
jmp	loc_641D9B65
mov	edx, [buffer+8]
jmp	loc_641D9F76
mov	ecx, [buffer+8]
jmp	loc_641D9E03
align 4
public _silc_net_get_error_string
push	ebp
mov	ebp, esp
mov	eax, [ebp+error]
cmp	eax, 7
ja	short loc_641DA180
mov	error_0, ds:_silc_net_error[error_0*4]
leave
retn
mov	error_0, offset	byte_642641E0
leave
retn
align 4
public _silc_net_is_ip4
			
push	ebp
mov	ebp, esp
mov	edx, [ebp+addr]
mov	al, [edx]
test	al, al
jz	short locret_641DA1BC
xor	count, count
jmp	short loc_641DA1AA
movsx	eax, al
sub	eax, 30h
cmp	eax, 9
ja	short loc_641DA1C0
inc	addr_0
mov	al, [addr_0]
test	al, al
jz	short loc_641DA1B6
			
cmp	al, 2Eh
jnz	short loc_641DA198
inc	count
inc	addr_0
mov	al, [addr_0]
test	al, al
jnz	short loc_641DA1AA
cmp	count, 3
setz	al
leave
retn
align 10h
xor	eax, eax
leave
retn
public _silc_net_get_local_port
push	ebp
mov	ebp, esp
push	edi
sub	esp, 34h
lea	edx, [ebp+local]
mov	ecx, 10h
xor	eax, eax
mov	edi, edx
rep stosb
mov	[ebp+len], 10h
lea	eax, [ebp+len]
mov	[esp+8], eax	
mov	[esp+4], edx	
mov	eax, [ebp+sock]
mov	[esp], eax	
call	_getsockname@12
sub	esp, 0Ch
test	eax, eax
js	short loc_641DA210
movzx	eax, [ebp+local.sin_port]
mov	[esp], eax	
call	_ntohs@4
push	edx
mov	edi, [ebp+var_4]
leave
retn
align 10h
xor	eax, eax
mov	edi, [ebp+var_4]
leave
retn
align 4
public _silc_net_get_remote_port
push	ebp
mov	ebp, esp
push	edi
sub	esp, 34h
lea	edx, [ebp+remote]
mov	ecx, 10h
xor	eax, eax
mov	edi, edx
rep stosb
mov	[ebp+len], 10h
lea	eax, [ebp+len]
mov	[esp+8], eax	
mov	[esp+4], edx	
mov	eax, [ebp+sock]
mov	[esp], eax	
call	_getpeername@12
sub	esp, 0Ch
test	eax, eax
js	short loc_641DA264
movzx	eax, [ebp+remote.sin_port]
mov	[esp], eax	
call	_ntohs@4
push	ecx
mov	edi, [ebp+var_4]
leave
retn
align 4
xor	eax, eax
mov	edi, [ebp+var_4]
leave
retn
align 4
public _silc_net_gethostbyaddr_async
push	ebp
mov	ebp, esp
push	edi
push	esi
push	ebx
sub	esp, 2Ch
mov	ecx, [ebp+addr]
mov	esi, [ebp+schedule]
mov	edx, [ebp+completion]
mov	edi, [ebp+context]
mov	dword ptr [esp+4], 18h 
mov	dword ptr [esp], 1 
mov	[ebp+var_20], edx
mov	[ebp+var_1C], ecx
call	_silc_calloc
mov	ebx, eax
mov	edx, [ebp+var_20]
mov	[eax], edx
mov	[eax+4], edi
mov	[eax+0Ch], esi
mov	ecx, [ebp+var_1C]
mov	[esp], ecx	
call	_strdup
mov	[ebx+10h], eax
mov	[ebp+completion], 0
mov	[ebp+schedule],	ebx
mov	[ebp+addr], offset _silc_net_gethostbyaddr_thread
add	esp, 2Ch
pop	ebx
pop	esi
pop	edi
leave
jmp	_silc_thread_create
align 4
public _silc_net_gethostbyname_async
push	ebp
mov	ebp, esp
push	edi
push	esi
push	ebx
sub	esp, 2Ch
mov	eax, [ebp+name]
mov	[ebp+var_1C], eax
mov	esi, [ebp+prefer_ipv6]
mov	ecx, [ebp+schedule]
mov	edx, [ebp+completion]
mov	edi, [ebp+context]
mov	dword ptr [esp+4], 18h 
mov	dword ptr [esp], 1 
mov	[ebp+var_24], edx
mov	[ebp+var_20], ecx
call	_silc_calloc
mov	ebx, eax
mov	edx, [ebp+var_24]
mov	[eax], edx
mov	[eax+4], edi
mov	eax, esi
mov	[ebx+8], al
mov	ecx, [ebp+var_20]
mov	[ebx+0Ch], ecx
mov	eax, [ebp+var_1C]
mov	[esp], eax	
call	_strdup
mov	[ebx+10h], eax
mov	[ebp+schedule],	0
mov	[ebp+prefer_ipv6], ebx
mov	[ebp+name], offset _silc_net_gethostbyname_thread
add	esp, 2Ch
pop	ebx
pop	esi
pop	edi
leave
jmp	_silc_thread_create
align 4
public _silc_net_gethostbyaddr
			
push	ebp
mov	ebp, esp
push	edi
push	esi
push	ebx
sub	esp, 2Ch
mov	esi, [ebp+name]
mov	dword ptr [esp+8], 4 
lea	ebx, [ebp+a]
mov	[esp+4], ebx	
mov	eax, [ebp+addr]
mov	[esp], eax	
call	_silc_net_addr2bin
test	al, al
jnz	short loc_641DA380
			
xor	eax, eax
lea	esp, [ebp-0Ch]
pop	ebx
pop	name_0
pop	edi
leave
retn
mov	dword ptr [esp+8], 2
mov	dword ptr [esp+4], 4 
mov	[esp], ebx	
call	_gethostbyaddr@12
sub	esp, 0Ch
mov	edx, eax
test	eax, eax
jz	short loc_641DA376
mov	edi, [hp]
mov	ebx, 0FFFFFFFFh
xor	hp, hp
mov	ecx, ebx
repne scasb
not	ecx
dec	ecx
cmp	ecx, [ebp+name_len]
ja	short loc_641DA376
mov	edi, name_0
mov	ecx, [ebp+name_len]
rep stosb
mov	hp, [hp]
mov	name_len_0, ebx
mov	name_0,	edx
repne scasb
mov	ebx, ecx
not	ebx
dec	ebx
mov	[esp+8], ebx	
mov	[esp+4], edx	
mov	[esp], esi	
call	_strncpy
mov	al, 1
lea	esp, [ebp-0Ch]
pop	ebx
pop	name_0
pop	edi
leave
retn
push	ebp
mov	ebp, esp
push	edi
push	esi
push	ebx
sub	esp, 12Ch
mov	ebx, [ebp+context]
mov	esi, [ebx+0Ch]
mov	dword ptr [esp+8], 100h	
lea	edi, [ebp+tmp]
mov	[esp+4], edi	
mov	eax, [ebx+10h]
mov	[esp], eax	
call	_silc_net_gethostbyaddr
test	al, al
jz	short loc_641DA422
mov	[esp], edi	
call	_strdup
mov	[context_0+14h], eax
mov	dword ptr [esp+18h], 1 
mov	dword ptr [esp+14h], 1 
mov	dword ptr [esp+10h], 0 
mov	[esp+0Ch], context_0 
mov	dword ptr [esp+8], offset _silc_net_resolve_completion 
mov	dword ptr [esp+4], 0 
mov	[esp], schedule	
call	_silc_schedule_task_add
mov	[esp], schedule	
call	_silc_schedule_wakeup
xor	eax, eax
add	esp, 12Ch
pop	context_0
pop	schedule
pop	edi
leave
retn
align 4
public _silc_net_gethostbyname
			
push	ebp
mov	ebp, esp
push	edi
push	esi
push	ebx
sub	esp, 1Ch
mov	edx, [ebp+name]
mov	esi, [ebp+address]
mov	al, [edx]
test	al, al
jz	short loc_641DA4AB
mov	ecx, name_0
xor	ebx, ebx
jmp	short loc_641DA49A
align 4
movsx	eax, al
sub	eax, 30h
cmp	eax, 9
ja	short loc_641DA4AB
inc	name_0
mov	al, [name_0]
test	al, al
jz	short loc_641DA4A6
			
cmp	al, 2Eh
jnz	short loc_641DA488
inc	ebx
inc	name_0
mov	al, [name_0]
test	al, al
jnz	short loc_641DA49A
cmp	ebx, 3
jz	short loc_641DA4F0
			
mov	[esp], name_0
call	_gethostbyname@4
push	edi
test	eax, eax
jz	short loc_641DA4E3
mov	hp, [hp+0Ch]
mov	eax, [eax]
mov	eax, [eax]
mov	[esp], ip_0	
call	_inet_ntoa@4
push	ebx
mov	edx, eax
test	eax, eax
jz	short loc_641DA4E3
mov	ebx, 0FFFFFFFFh
xor	tmp, tmp
mov	ecx, ebx
mov	edi, tmp
repne scasb
not	ecx
dec	ecx
cmp	[ebp+address_len], ecx
jnb	short loc_641DA524
			
xor	tmp, tmp
lea	esp, [ebp-0Ch]
pop	ebx
pop	address_0
pop	edi
leave
retn
align 10h
mov	edi, address_0
mov	name_0,	[ebp+address_len]
rep stosb
mov	address_len_0, 0FFFFFFFFh
mov	address_0, edx
repne scasb
not	ecx
dec	ecx
cmp	[ebp+address_len], ecx
jb	short loc_641DA4E3
mov	[esp+8], ecx	
mov	[esp+4], edx	
mov	[esp], esi	
call	_strncpy
mov	al, 1
lea	esp, [ebp-0Ch]
pop	ebx
pop	address_0
pop	edi
leave
retn
align 4
mov	edi, address_0
mov	ecx, [ebp+address_len]
rep stosb
mov	address_len_0, ebx
mov	address_0, edx
repne scasb
not	ecx
dec	ecx
jmp	short loc_641DA508
align 4
public _silc_net_localip
push	ebp
mov	ebp, esp
push	esi
push	ebx
sub	esp, 150h
mov	dword ptr [esp+4], 100h	
lea	ebx, [ebp+hostname]
mov	[esp], ebx	
call	_gethostname@8
sub	esp, 8
test	eax, eax
jz	short loc_641DA56C
xor	eax, eax
lea	esp, [ebp-8]
pop	ebx
pop	esi
leave
retn
align 4
mov	dword ptr [esp+0Ch], 40h 
lea	esi, [ebp+ip_addr]
mov	[esp+8], esi	
mov	dword ptr [esp+4], 1 
mov	[esp], ebx	
call	_silc_net_gethostbyname
test	al, al
jz	short loc_641DA560
mov	[esp], esi	
call	_strdup
jmp	short loc_641DA562
align 4
public _silc_net_localhost
push	ebp
mov	ebp, esp
push	esi
push	ebx
sub	esp, 150h
mov	dword ptr [esp+4], 100h	
lea	ebx, [ebp+hostname]
mov	[esp], ebx	
call	_gethostname@8
sub	esp, 8
test	eax, eax
jz	short loc_641DA5D0
xor	eax, eax
lea	esp, [ebp-8]
pop	ebx
pop	esi
leave
retn
align 10h
mov	dword ptr [esp+0Ch], 40h 
lea	esi, [ebp+ip_addr]
mov	[esp+8], esi	
mov	dword ptr [esp+4], 1 
mov	[esp], ebx	
call	_silc_net_gethostbyname
test	al, al
jz	short loc_641DA607
mov	dword ptr [esp+8], 100h	
mov	[esp+4], ebx	
mov	[esp], esi	
call	_silc_net_gethostbyaddr
mov	[esp], ebx	
call	_strdup
lea	esp, [ebp-8]
pop	ebx
pop	esi
leave
retn
align 4
public _silc_net_check_local_by_sock
			
push	ebp
mov	ebp, esp
push	edi
push	esi
push	ebx
sub	esp, 43Ch
mov	ebx, [ebp+hostname]
test	ebx, ebx
jz	short loc_641DA631
mov	dword ptr [hostname_0],	0
mov	eax, [ebp+ip_0]
mov	dword ptr [eax], 0
lea	edx, [ebp+local]
mov	ecx, 10h
mov	edi, edx
xor	eax, eax
rep stosb
mov	[ebp+len], 10h
lea	eax, [ebp+len]
mov	[esp+8], eax	
mov	[esp+4], edx	
mov	eax, [ebp+sock]
mov	[esp], eax	
call	_getsockname@12
sub	esp, 0Ch
test	eax, eax
js	short loc_641DA6C3
mov	rval, dword ptr	[ebp+local.sin_addr.S_un]
mov	[esp], eax	
call	_inet_ntoa@4
push	edx
mov	edx, eax
test	eax, eax
jz	short loc_641DA6C3
mov	ecx, 0FFFFFFFFh
mov	edi, host_ip
xor	host_ip, host_ip
repne scasb
not	ecx
dec	ecx
mov	[esp+4], ecx	
mov	[esp], edx	
call	_silc_memdup
mov	edx, [ebp+ip_0]
mov	[edx], eax
test	eax, eax
jz	short loc_641DA6C3
test	hostname_0, hostname_0
jz	short loc_641DA724
mov	dword ptr [esp+8], 400h	
lea	esi, [ebp+host]
mov	[esp+4], esi	
mov	[esp], eax	
call	_silc_net_gethostbyaddr
test	al, al
jnz	short loc_641DA6D0
			
xor	host_ip, host_ip
lea	esp, [ebp-0Ch]
pop	hostname_0
pop	esi
pop	edi
leave
retn
align 10h
mov	ecx, 0FFFFFFFFh
mov	edi, esi
xor	eax, eax
repne scasb
not	ecx
dec	ecx
mov	[esp+4], ecx	
mov	[esp], esi	
call	_silc_memdup
mov	[hostname_0], eax
mov	dword ptr [esp+0Ch], 400h 
mov	[esp+8], esi	
mov	dword ptr [esp+4], 1 
mov	[esp], eax	
call	_silc_net_gethostbyname
test	al, al
jz	short loc_641DA6C3
mov	edx, [ebp+ip_0]
mov	eax, [edx]
mov	[esp+4], esi	
mov	[esp], eax	
call	_strcmp
test	eax, eax
setz	al
jmp	short loc_641DA6C5
mov	al, 1
lea	esp, [ebp-0Ch]
pop	hostname_0
pop	esi
pop	edi
leave
retn
align 10h
public _silc_net_listener_get_hostname
push	ebp
mov	ebp, esp
push	edi
push	esi
push	ebx
sub	esp, 3Ch
mov	esi, [ebp+listener]
mov	dword ptr [esp+4], 4 
mov	eax, [esi+10h]
and	eax, 3FFFFFFFh
mov	[esp], eax	
call	_silc_calloc
mov	[ebp+hs], eax
test	eax, eax
jz	short loc_641DA7AC
test	dword ptr [listener_0+10h], 3FFFFFFFh
jz	short loc_641DA7B7
xor	edi, edi
xor	ebx, ebx
mov	dword ptr [esp+8], 0
lea	eax, [ebp+h]
mov	[esp+4], eax	
mov	eax, [listener_0+0Ch]
mov	eax, [eax+i*4]
mov	[esp], eax	
call	_silc_net_check_local_by_sock
test	al, al
jz	short loc_641DA793
mov	eax, [ebp+h]
mov	edx, [ebp+hs]
mov	[edx+k*4], eax
inc	k
inc	i
mov	eax, [listener_0+10h]
and	eax, 3FFFFFFFh
cmp	eax, i
jg	short loc_641DA768
mov	ecx, [ebp+hostname_count]
test	ecx, ecx
jz	short loc_641DA7AC
mov	eax, [ebp+hostname_count]
mov	[eax], k
			
mov	eax, [ebp+hs]
add	esp, 3Ch
pop	i
pop	listener_0
pop	k
leave
retn
xor	edi, edi
jmp	short loc_641DA7A0
align 4
public _silc_net_listener_get_ip
push	ebp
mov	ebp, esp
push	edi
push	esi
push	ebx
sub	esp, 3Ch
mov	esi, [ebp+listener]
mov	dword ptr [esp+4], 4 
mov	eax, [esi+10h]
and	eax, 3FFFFFFFh
mov	[esp], eax	
call	_silc_calloc
mov	[ebp+ips], eax
test	eax, eax
jz	short loc_641DA838
test	dword ptr [listener_0+10h], 3FFFFFFFh
jz	short loc_641DA843
xor	edi, edi
xor	ebx, ebx
lea	eax, [ebp+ip_0]
mov	[esp+8], eax	
mov	dword ptr [esp+4], 0 
mov	eax, [listener_0+0Ch]
mov	eax, [eax+i*4]
mov	[esp], eax	
call	_silc_net_check_local_by_sock
test	al, al
jz	short loc_641DA81F
mov	eax, [ebp+ip_0]
mov	edx, [ebp+ips]
mov	[edx+k*4], eax
inc	k
inc	i
mov	eax, [listener_0+10h]
and	eax, 3FFFFFFFh
cmp	eax, i
jg	short loc_641DA7F4
mov	i, [ebp+ip_count]
test	ebx, ebx
jz	short loc_641DA838
mov	eax, [ebp+ip_count]
mov	[eax], k
			
mov	eax, [ebp+ips]
add	esp, 3Ch
pop	ebx
pop	listener_0
pop	k
leave
retn
xor	edi, edi
jmp	short loc_641DA82C
align 4
public _silc_net_check_host_by_sock
push	ebp
mov	ebp, esp
push	edi
push	esi
push	ebx
sub	esp, 43Ch
mov	ebx, [ebp+hostname]
test	ebx, ebx
jz	short loc_641DA861
mov	dword ptr [hostname_0],	0
mov	eax, [ebp+ip_0]
mov	dword ptr [eax], 0
lea	edx, [ebp+remote]
mov	ecx, 10h
mov	edi, edx
xor	eax, eax
rep stosb
mov	[ebp+len], 10h
lea	eax, [ebp+len]
mov	[esp+8], eax	
mov	[esp+4], edx	
mov	eax, [ebp+sock]
mov	[esp], eax	
call	_getpeername@12
sub	esp, 0Ch
test	eax, eax
js	short loc_641DA8F3
mov	rval, dword ptr	[ebp+remote.sin_addr.S_un]
mov	[esp], eax	
call	_inet_ntoa@4
push	esi
mov	edx, eax
test	eax, eax
jz	short loc_641DA8F3
mov	ecx, 0FFFFFFFFh
mov	edi, host_ip
xor	host_ip, host_ip
repne scasb
not	ecx
dec	ecx
mov	[esp+4], ecx	
mov	[esp], edx	
call	_silc_memdup
mov	edx, [ebp+ip_0]
mov	[edx], eax
test	eax, eax
jz	short loc_641DA8F3
test	hostname_0, hostname_0
jz	short loc_641DA954
mov	dword ptr [esp+8], 400h	
lea	esi, [ebp+host]
mov	[esp+4], esi	
mov	[esp], eax	
call	_silc_net_gethostbyaddr
test	al, al
jnz	short loc_641DA900
			
xor	host_ip, host_ip
lea	esp, [ebp-0Ch]
pop	hostname_0
pop	esi
pop	edi
leave
retn
align 10h
mov	ecx, 0FFFFFFFFh
mov	edi, esi
xor	eax, eax
repne scasb
not	ecx
dec	ecx
mov	[esp+4], ecx	
mov	[esp], esi	
call	_silc_memdup
mov	[hostname_0], eax
mov	dword ptr [esp+0Ch], 400h 
mov	[esp+8], esi	
mov	dword ptr [esp+4], 1 
mov	[esp], eax	
call	_silc_net_gethostbyname
test	al, al
jz	short loc_641DA8F3
mov	edx, [ebp+ip_0]
mov	eax, [edx]
mov	[esp+4], esi	
mov	[esp], eax	
call	_strcmp
test	eax, eax
setz	al
jmp	short loc_641DA8F5
mov	al, 1
lea	esp, [ebp-0Ch]
pop	hostname_0
pop	esi
pop	edi
leave
retn
align 10h
push	ebp
mov	ebp, esp
push	edi
push	esi
push	ebx
sub	esp, 6Ch
mov	ebx, [ebp+context]
mov	esi, [ebx+0Ch]
mov	dword ptr [esp+0Ch], 40h 
lea	edi, [ebp+tmp]
mov	[esp+8], edi	
movzx	eax, byte ptr [ebx+8]
mov	[esp+4], eax	
mov	eax, [ebx+10h]
mov	[esp], eax	
call	_silc_net_gethostbyname
test	al, al
jz	short loc_641DA9A0
mov	[esp], edi	
call	_strdup
mov	[context_0+14h], eax
mov	dword ptr [esp+18h], 1 
mov	dword ptr [esp+14h], 1 
mov	dword ptr [esp+10h], 0 
mov	[esp+0Ch], context_0 
mov	dword ptr [esp+8], offset _silc_net_resolve_completion 
mov	dword ptr [esp+4], 0 
mov	[esp], schedule	
call	_silc_schedule_task_add
mov	[esp], schedule	
call	_silc_schedule_wakeup
xor	eax, eax
add	esp, 6Ch
pop	context_0
pop	schedule
pop	edi
leave
retn
align 4
public _silc_net_resolve_completion
			
push	ebp
mov	ebp, esp
push	ebx
sub	esp, 14h
mov	ebx, [ebp+context]
mov	eax, [r]
test	eax, eax
jz	short loc_641DAA07
mov	edx, [r+4]
mov	[esp+4], edx
mov	edx, [r+14h]
mov	[esp], edx
call	eax
mov	eax, [r+10h]
mov	[esp], eax	
call	_silc_free
mov	eax, [r+14h]
mov	[esp], eax	
call	_silc_free
mov	[ebp+schedule],	r
add	esp, 14h
pop	r
leave
jmp	_silc_free
align 4
public _silc_net_is_ip6
			
push	ebp
mov	ebp, esp
push	edi
push	esi
push	ebx
sub	esp, 1Ch
mov	ebx, [ebp+addr]
mov	al, [ebx]
test	al, al
jz	short loc_641DAA8C
mov	esi, ds:__imp____mb_cur_max
mov	edi, ds:__imp___pctype
jmp	short loc_641DAA62
mov	edx, [edi]
movzx	eax, word ptr [edx+eax*2]
and	eax, 80h
test	eax, eax
jz	short loc_641DAA82
			
inc	addr_0
mov	al, [addr_0]
test	al, al
jz	short loc_641DAA8C
cmp	al, 3Ah
jz	short loc_641DAA5B
movsx	eax, al
cmp	dword ptr [esi], 1
jz	short loc_641DAA4C
mov	dword ptr [esp+4], 80h 
mov	[esp], eax	
call	__isctype
test	eax, eax
jnz	short loc_641DAA5B
add	esp, 1Ch
pop	addr_0
pop	esi
pop	edi
leave
retn
align 4
			
mov	al, 1
add	esp, 1Ch
pop	addr_0
pop	esi
pop	edi
leave
retn
align 4
public _silc_net_get_socket_opt
push	ebp
mov	ebp, esp
sub	esp, 28h
mov	eax, [ebp+opt_len]
mov	[esp+10h], eax	
mov	eax, [ebp+optval]
mov	[esp+0Ch], eax	
mov	eax, [ebp+option]
mov	[esp+8], eax	
mov	eax, [ebp+level]
mov	[esp+4], eax	
mov	eax, [ebp+sock]
mov	[esp], eax	
call	_getsockopt@20
sub	esp, 14h
leave
retn
align 4
public _silc_net_set_socket_opt
			
push	ebp
mov	ebp, esp
sub	esp, 28h
mov	dword ptr [esp+10h], 4 
lea	eax, [ebp+on]
mov	[esp+0Ch], eax	
mov	eax, [ebp+option]
mov	[esp+8], eax	
mov	eax, [ebp+level]
mov	[esp+4], eax	
mov	eax, [ebp+sock]
mov	[esp], eax	
call	_setsockopt@20
sub	esp, 14h
leave
retn
align 10h
public _silc_net_accept_connection
push	ebp
mov	ebp, esp
sub	esp, 18h
mov	dword ptr [esp+8], 0 
mov	dword ptr [esp+4], 0 
mov	eax, [ebp+sock]
mov	[esp], eax	
call	_accept@12
sub	esp, 0Ch
leave
retn
align 4
public _silc_net_listener_get_port
push	ebp
mov	ebp, esp
push	edi
push	esi
push	ebx
sub	esp, 5Ch
mov	esi, [ebp+listener]
mov	dword ptr [esp+4], 2 
mov	eax, [esi+10h]
and	eax, 3FFFFFFFh
mov	[esp], eax	
call	_silc_calloc
mov	[ebp+var_3C], eax
test	eax, eax
jz	short loc_641DABD0
mov	eax, [listener_0+10h]
and	eax, 3FFFFFFFh
jz	short loc_641DABC4
lea	eax, [ebp+name]
mov	[ebp+var_4C], eax
xor	ebx, ebx
jmp	short loc_641DAB89
align 4
movzx	eax, word ptr [ebp+name.sa_data]
mov	[esp], eax	
call	_ntohs@4
push	edx
mov	edx, [ebp+var_3C]
mov	[edx+i*2], ax
inc	i
mov	eax, [listener_0+10h]
and	eax, 3FFFFFFFh
cmp	eax, i
jle	short loc_641DABC4
mov	eax, [listener_0+0Ch]
mov	edx, [eax+i*4]
mov	edi, [ebp+var_4C]
mov	ecx, 10h
xor	eax, eax
rep stosb
mov	[ebp+namelen], 10h
lea	eax, [ebp+namelen]
mov	[esp+8], eax	
lea	eax, [ebp+name]
mov	[esp+4], eax	
mov	[esp], edx	
call	_getsockname@12
sub	esp, 0Ch
test	eax, eax
jns	short loc_641DAB68
xor	eax, eax
jmp	short loc_641DAB75
align 4
			
mov	edi, [ebp+port_count]
test	edi, edi
jz	short loc_641DABD0
mov	edx, [ebp+port_count]
mov	[edx], eax
			
mov	eax, [ebp+var_3C]
lea	esp, [ebp-0Ch]
pop	i
pop	listener_0
pop	edi
leave
retn
align 4
public _silc_net_is_ip
push	ebp
mov	ebp, esp
push	edi
push	esi
push	ebx
sub	esp, 1Ch
mov	ebx, [ebp+addr]
mov	cl, [ebx]
test	cl, cl
jz	short loc_641DAC64
mov	al, cl
mov	edx, addr_0
xor	esi, esi
jmp	short loc_641DAC0A
align 4
movsx	eax, al
sub	eax, 30h
cmp	eax, 9
ja	short loc_641DAC1B
inc	addr_0
mov	al, [addr_0]
test	al, al
jz	short loc_641DAC16
			
cmp	al, 2Eh
jnz	short loc_641DABF8
inc	esi
inc	addr_0
mov	al, [addr_0]
test	al, al
jnz	short loc_641DAC0A
cmp	esi, 3
jz	short loc_641DAC64
mov	esi, ds:__imp____mb_cur_max
mov	edi, ds:__imp___pctype
jmp	short loc_641DAC42
align 4
mov	eax, [edi]
movzx	eax, word ptr [eax+ecx*2]
and	eax, 80h
test	eax, eax
jz	short loc_641DAC66
inc	addr_0
mov	cl, [addr_0]
test	cl, cl
jz	short loc_641DAC64
cmp	cl, 3Ah
jz	short loc_641DAC3B
movsx	ecx, cl
cmp	dword ptr [esi], 1
jz	short loc_641DAC2C
mov	dword ptr [esp+4], 80h 
mov	[esp], ecx	
call	__isctype
jmp	short loc_641DAC37
align 4
			
mov	al, 1
add	esp, 1Ch
pop	addr_0
pop	esi
pop	edi
leave
retn
align 10h
public _silc_schedule_wakeup
			
push	ebp
mov	ebp, esp
leave
retn
align 4
public _silc_schedule_get_context
			
push	ebp
mov	ebp, esp
mov	eax, [ebp+schedule]
mov	eax, [eax+4]
leave
retn
align 4
public _silc_schedule_set_notify
push	ebp
mov	ebp, esp
mov	eax, [ebp+schedule]
mov	edx, [ebp+notify]
mov	[eax+8], edx
mov	edx, [ebp+context]
mov	[eax+0Ch], edx
leave
retn
public _silc_schedule_get_fd_events
			
push	ebp
mov	ebp, esp
push	esi
push	ebx
sub	esp, 20h
mov	ebx, [ebp+schedule]
test	byte ptr [ebx+5Fh], 40h
jz	short loc_641DAD21
mov	eax, [schedule_0+50h]
mov	[esp], eax	
call	_silc_mutex_lock
mov	eax, [schedule_0]
mov	[esp+4], eax	
mov	[esp], schedule_0 
call	ds:_schedule_ops.signals_block
lea	eax, [ebp+task]
mov	[esp+0Ch], eax	
mov	dword ptr [esp+8], 0 
mov	eax, [ebp+fd]
mov	[esp+4], eax	
mov	eax, [schedule_0+10h]
mov	[esp], eax	
call	_silc_hash_table_find
test	al, al
jnz	short loc_641DAD10
xor	esi, esi
mov	task_0,	[schedule_0]
mov	[esp+4], eax	
mov	[esp], schedule_0 
call	ds:_schedule_ops.signals_unblock
mov	eax, [schedule_0+50h]
mov	[esp], eax	
call	_silc_mutex_unlock
mov	eax, event
add	esp, 20h
pop	schedule_0
pop	event
leave
retn
align 10h
mov	eax, [ebp+task]
mov	esi, [eax+10h]
shr	si, 1
and	esi, 3FFFh
jmp	short loc_641DACEA
xor	esi, esi
jmp	short loc_641DAD04
align 4
public _silc_schedule_task_del_by_fd
			
push	ebp
mov	ebp, esp
push	edi
push	esi
push	ebx
sub	esp, 4Ch
mov	ebx, [ebp+schedule]
mov	esi, [ebp+fd]
mov	[ebp+task], 0
mov	eax, [ebx+50h]
mov	[esp], eax	
call	_silc_mutex_lock
mov	eax, [ebx]
mov	[esp+4], eax	
mov	[esp], ebx	
call	ds:_schedule_ops.signals_block
lea	eax, [ebp+task]
mov	[esp+0Ch], eax	
mov	dword ptr [esp+8], 0 
mov	[esp+4], esi	
mov	eax, [ebx+10h]
mov	[esp], eax	
call	_silc_hash_table_find
test	al, al
jz	short loc_641DADF4
mov	eax, [ebp+task]
and	byte ptr [eax+0Ch], 0FDh
mov	edx, [schedule_0+8]
test	edx, edx
jz	short loc_641DADC4
mov	ecx, [schedule_0+0Ch]
mov	[esp+20h], ecx
mov	dword ptr [esp+1Ch], 0
mov	dword ptr [esp+18h], 0
mov	dword ptr [esp+14h], 0
mov	[esp+10h], fd_0
mov	dword ptr [esp+0Ch], 1
mov	[esp+8], eax
mov	dword ptr [esp+4], 0
mov	[esp], schedule_0
call	edx
mov	edi, 1
mov	eax, [schedule_0]
mov	[esp+4], eax	
mov	[esp], schedule_0 
call	ds:_schedule_ops.signals_unblock
mov	eax, [schedule_0+50h]
mov	[esp], eax	
call	_silc_mutex_unlock
mov	eax, [ebp+task]
test	eax, eax
jz	short loc_641DADF8
mov	eax, ret
add	esp, 4Ch
pop	schedule_0
pop	fd_0
pop	ret
leave
retn
xor	edi, edi
jmp	short loc_641DADC9
mov	[esp+8], fd_0	
mov	eax, [schedule_0]
mov	[esp+4], eax	
mov	[esp], schedule_0 
call	ds:_schedule_ops.signal_unregister
mov	ret, 1
jmp	short loc_641DADEA
align 4
public _silc_schedule_task_del_by_all
			
push	ebp
mov	ebp, esp
push	edi
push	esi
push	ebx
sub	esp, 7Ch
mov	ebx, [ebp+schedule]
mov	ecx, [ebp+fd]
mov	eax, [ebp+callback]
mov	edx, [ebp+context]
test	ecx, ecx
jnz	loc_641DAF10
mov	fd_0, [schedule_0+50h]
mov	[esp], ecx	
mov	[ebp+var_40], callback_0
mov	[ebp+var_44], context_0
call	_silc_mutex_lock
mov	ecx, [schedule_0]
mov	[esp+4], ecx	
mov	[esp], schedule_0 
call	ds:_schedule_ops.signals_block
lea	edi, [ebp+list]
lea	esi, [schedule_0+28h]
mov	ecx, 5
rep movsd
mov	ecx, [ebp+list.head]
movzx	edi, [ebp+list.next_offset]
mov	eax, [ebp+var_40]
mov	edx, [ebp+var_44]
mov	[ebp+var_4C], edx
test	ecx, ecx
jz	short loc_641DAE86
xchg	ax, ax
and	[ebp+list._bf10], 0FDh
mov	esi, [ecx+edi]
cmp	[ecx+4], eax
jz	short loc_641DAEAC
			
mov	ecx, esi
test	ecx, ecx
jnz	short loc_641DAE74
mov	eax, [schedule_0]
mov	[esp+4], eax	
mov	[esp], schedule_0 
call	ds:_schedule_ops.signals_unblock
mov	eax, [schedule_0+50h]
mov	[esp], eax	
call	_silc_mutex_unlock
mov	al, 1
add	esp, 7Ch
pop	schedule_0
pop	esi
pop	edi
leave
retn
align 4
mov	context_0, [ebp+var_4C]
cmp	[ecx+8], edx
jnz	short loc_641DAE80
and	byte ptr [ecx+0Ch], 0FDh
mov	edx, [schedule_0+8]
mov	[ebp+var_3C], edx
test	edx, edx
jz	short loc_641DAE80
mov	edx, [schedule_0+0Ch]
mov	[esp+20h], edx
mov	dword ptr [esp+1Ch], 0
mov	dword ptr [esp+18h], 0
mov	dword ptr [esp+14h], 0
mov	dword ptr [esp+10h], 0
mov	dword ptr [esp+0Ch], 0
mov	[esp+8], ecx
mov	dword ptr [esp+4], 0
mov	[esp], schedule_0
mov	[ebp+var_40], callback_0
call	[ebp+var_3C]
mov	eax, [ebp+var_40]
mov	ecx, esi
jmp	loc_641DAE82
add	esp, 7Ch
pop	schedule_0
pop	esi
pop	edi
leave
jmp	_silc_schedule_task_del_by_fd
public _silc_schedule_stop
push	ebp
mov	ebp, esp
push	ebx
sub	esp, 14h
mov	ebx, [ebp+schedule]
mov	eax, [ebx+50h]
mov	[esp], eax	
call	_silc_mutex_lock
mov	eax, [ebx]
mov	[esp+4], eax	
mov	[esp], ebx	
call	ds:_schedule_ops.signals_block
and	byte ptr [ebx+5Fh], 0BFh
mov	eax, [ebx]
mov	[esp+4], eax	
mov	[esp], ebx	
call	ds:_schedule_ops.signals_unblock
mov	eax, [ebx+50h]
mov	[ebp+schedule],	eax
add	esp, 14h
pop	ebx
leave
jmp	_silc_mutex_unlock
align 4
public _silc_schedule_task_del_by_context
			
push	ebp
mov	ebp, esp
push	edi
push	esi
push	ebx
sub	esp, 8Ch
mov	ebx, [ebp+context]
mov	edx, [ebp+schedule]
mov	eax, [edx+50h]
mov	[esp], eax	
call	_silc_mutex_lock
mov	ecx, [ebp+schedule]
mov	eax, [ecx]
mov	[esp+4], eax	
mov	[esp], ecx	
call	ds:_schedule_ops.signals_block
lea	esi, [ebp+htl]
mov	[esp+4], esi	
mov	edx, [ebp+schedule]
mov	eax, [edx+10h]
mov	[esp], eax	
call	_silc_hash_table_list
lea	edi, [ebp+task]
mov	[ebp+ret], 0
nop
			
mov	[esp+8], edi	
mov	dword ptr [esp+4], 0 
mov	[esp], esi	
call	_silc_hash_table_get
test	al, al
jz	short loc_641DB028
mov	eax, [ebp+task]
cmp	[eax+8], context_0
jnz	short loc_641DAFB0
and	byte ptr [eax+0Ch], 0FDh
mov	ecx, [ebp+schedule]
mov	edx, [ecx+8]
mov	[ebp+ret], 1
test	edx, edx
jz	short loc_641DAFB0
mov	ecx, [ecx+0Ch]
mov	[esp+20h], ecx
mov	dword ptr [esp+1Ch], 0
mov	dword ptr [esp+18h], 0
mov	dword ptr [esp+14h], 0
mov	ecx, [eax+14h]
mov	[esp+10h], ecx
mov	dword ptr [esp+0Ch], 1
mov	[esp+8], eax
mov	dword ptr [esp+4], 0
mov	eax, [ebp+schedule]
mov	[esp], eax
call	edx
jmp	short loc_641DAFB0
align 4
mov	[esp], esi	
call	_silc_hash_table_list_reset
lea	edi, [ebp+list]
mov	esi, [ebp+schedule]
add	esi, 28h
mov	ecx, 5
rep movsd
mov	eax, [ebp+list.head]
movzx	edi, [ebp+list.next_offset]
test	eax, eax
jz	short loc_641DB061
nop
and	[ebp+list._bf10], 0FDh
mov	esi, [eax+edi]
mov	[ebp+task], eax
cmp	[eax+8], context_0
jz	short loc_641DB098
mov	eax, esi
test	eax, eax
jnz	short loc_641DB04C
mov	[ebp+task], 0
mov	edx, [ebp+schedule]
mov	eax, [edx]
mov	[esp+4], eax	
mov	[esp], edx	
call	ds:_schedule_ops.signals_unblock
mov	ecx, [ebp+schedule]
mov	eax, [ecx+50h]
mov	[esp], eax	
call	_silc_mutex_unlock
mov	al, [ebp+ret]
add	esp, 8Ch
pop	context_0
pop	esi
pop	edi
leave
retn
align 4
and	byte ptr [eax+0Ch], 0FDh
mov	ecx, [ebp+schedule]
mov	edx, [ecx+8]
test	edx, edx
jz	short loc_641DB0EC
mov	ecx, [ebp+schedule]
mov	ecx, [ecx+0Ch]
mov	[esp+20h], ecx
mov	dword ptr [esp+1Ch], 0
mov	dword ptr [esp+18h], 0
mov	dword ptr [esp+14h], 0
mov	dword ptr [esp+10h], 0
mov	dword ptr [esp+0Ch], 0
mov	[esp+8], eax
mov	dword ptr [esp+4], 0
mov	eax, [ebp+schedule]
mov	[esp], eax
call	edx
mov	[ebp+ret], 1
mov	eax, esi
jmp	loc_641DB05D
align 4
public _silc_schedule_task_del_by_callback
			
push	ebp
mov	ebp, esp
push	edi
push	esi
push	ebx
sub	esp, 8Ch
mov	ebx, [ebp+callback]
mov	edx, [ebp+schedule]
mov	eax, [edx+50h]
mov	[esp], eax	
call	_silc_mutex_lock
mov	ecx, [ebp+schedule]
mov	eax, [ecx]
mov	[esp+4], eax	
mov	[esp], ecx	
call	ds:_schedule_ops.signals_block
lea	esi, [ebp+htl]
mov	[esp+4], esi	
mov	edx, [ebp+schedule]
mov	eax, [edx+10h]
mov	[esp], eax	
call	_silc_hash_table_list
lea	edi, [ebp+task]
mov	[ebp+ret], 0
nop
			
mov	[esp+8], edi	
mov	dword ptr [esp+4], 0 
mov	[esp], esi	
call	_silc_hash_table_get
test	al, al
jz	short loc_641DB1BC
mov	eax, [ebp+task]
cmp	[eax+4], callback_0
jnz	short loc_641DB144
and	byte ptr [eax+0Ch], 0FDh
mov	ecx, [ebp+schedule]
mov	edx, [ecx+8]
mov	[ebp+ret], 1
test	edx, edx
jz	short loc_641DB144
mov	ecx, [ecx+0Ch]
mov	[esp+20h], ecx
mov	dword ptr [esp+1Ch], 0
mov	dword ptr [esp+18h], 0
mov	dword ptr [esp+14h], 0
mov	ecx, [eax+14h]
mov	[esp+10h], ecx
mov	dword ptr [esp+0Ch], 1
mov	[esp+8], eax
mov	dword ptr [esp+4], 0
mov	eax, [ebp+schedule]
mov	[esp], eax
call	edx
jmp	short loc_641DB144
align 4
mov	[esp], esi	
call	_silc_hash_table_list_reset
lea	edi, [ebp+list]
mov	esi, [ebp+schedule]
add	esi, 28h
mov	ecx, 5
rep movsd
mov	eax, [ebp+list.head]
movzx	edi, [ebp+list.next_offset]
test	eax, eax
jz	short loc_641DB1F5
nop
and	[ebp+list._bf10], 0FDh
mov	esi, [eax+edi]
mov	[ebp+task], eax
cmp	[eax+4], callback_0
jz	short loc_641DB22C
mov	eax, esi
test	eax, eax
jnz	short loc_641DB1E0
mov	[ebp+task], 0
mov	edx, [ebp+schedule]
mov	eax, [edx]
mov	[esp+4], eax	
mov	[esp], edx	
call	ds:_schedule_ops.signals_unblock
mov	ecx, [ebp+schedule]
mov	eax, [ecx+50h]
mov	[esp], eax	
call	_silc_mutex_unlock
mov	al, [ebp+ret]
add	esp, 8Ch
pop	callback_0
pop	esi
pop	edi
leave
retn
align 4
and	byte ptr [eax+0Ch], 0FDh
mov	ecx, [ebp+schedule]
mov	edx, [ecx+8]
test	edx, edx
jz	short loc_641DB280
mov	ecx, [ebp+schedule]
mov	ecx, [ecx+0Ch]
mov	[esp+20h], ecx
mov	dword ptr [esp+1Ch], 0
mov	dword ptr [esp+18h], 0
mov	dword ptr [esp+14h], 0
mov	dword ptr [esp+10h], 0
mov	dword ptr [esp+0Ch], 0
mov	[esp+8], eax
mov	dword ptr [esp+4], 0
mov	eax, [ebp+schedule]
mov	[esp], eax
call	edx
mov	[ebp+ret], 1
mov	eax, esi
jmp	loc_641DB1F1
align 4
public _silc_schedule_task_del
push	ebp
mov	ebp, esp
push	edi
push	esi
push	ebx
sub	esp, 4Ch
mov	ebx, [ebp+schedule]
cmp	[ebp+task], 1
jz	loc_641DB333
mov	eax, [schedule_0+50h]
mov	[esp], eax	
call	_silc_mutex_lock
mov	eax, [schedule_0]
mov	[esp+4], eax	
mov	[esp], schedule_0 
call	ds:_schedule_ops.signals_block
mov	eax, [ebp+task]
and	byte ptr [eax+0Ch], 0FDh
mov	ecx, [schedule_0+8]
test	ecx, ecx
jz	short loc_641DB30F
mov	edx, [schedule_0+0Ch]
mov	[esp+20h], edx
mov	dword ptr [esp+1Ch], 0
mov	dword ptr [esp+18h], 0
mov	dword ptr [esp+14h], 0
mov	dword ptr [esp+10h], 0
mov	dl, [eax+0Ch]
xor	edx, 1
and	edx, 1
mov	[esp+0Ch], edx
mov	[esp+8], eax
mov	dword ptr [esp+4], 0
mov	[esp], schedule_0
call	ecx
			
mov	eax, [schedule_0]
mov	[esp+4], eax	
mov	[esp], schedule_0 
call	ds:_schedule_ops.signals_unblock
mov	eax, [schedule_0+50h]
mov	[esp], eax	
call	_silc_mutex_unlock
mov	al, 1
add	esp, 4Ch
pop	schedule_0
pop	esi
pop	edi
leave
retn
mov	eax, [schedule_0+50h]
mov	[esp], eax	
call	_silc_mutex_lock
mov	eax, [schedule_0]
mov	[esp+4], eax	
mov	[esp], schedule_0 
call	ds:_schedule_ops.signals_block
lea	esi, [ebp+htl]
mov	[esp+4], esi	
mov	eax, [schedule_0+10h]
mov	[esp], eax	
call	_silc_hash_table_list
lea	edi, [ebp+task]
			
mov	[esp+8], edi	
mov	dword ptr [esp+4], 0 
mov	[esp], esi	
call	_silc_hash_table_get
test	al, al
jz	short loc_641DB3C9
mov	eax, [ebp+task]
and	byte ptr [eax+0Ch], 0FDh
mov	edx, [schedule_0+8]
test	edx, edx
jz	short loc_641DB362
mov	ecx, [schedule_0+0Ch]
mov	[esp+20h], ecx
mov	dword ptr [esp+1Ch], 0
mov	dword ptr [esp+18h], 0
mov	dword ptr [esp+14h], 0
mov	ecx, [eax+14h]
mov	[esp+10h], ecx
mov	dword ptr [esp+0Ch], 1
mov	[esp+8], eax
mov	dword ptr [esp+4], 0
mov	[esp], schedule_0
call	edx
jmp	short loc_641DB362
mov	[esp], esi	
call	_silc_hash_table_list_reset
mov	eax, [schedule_0+28h]
mov	[schedule_0+30h], eax
and	byte ptr [schedule_0+38h], 0FDh
jmp	short loc_641DB3F5
movzx	edx, word ptr [schedule_0+36h]
mov	edx, [eax+edx]
mov	[schedule_0+30h], edx
and	byte ptr [eax+0Ch], 0FDh
mov	edx, [schedule_0+8]
test	edx, edx
jnz	short loc_641DB414
mov	eax, [schedule_0+30h]
test	eax, eax
jz	short loc_641DB408
test	byte ptr [schedule_0+38h], 2
jnz	short loc_641DB3DD
movzx	edx, word ptr [schedule_0+34h]
mov	edx, [eax+edx]
jmp	short loc_641DB3E4
mov	[ebp+task], 0
jmp	loc_641DB30F
mov	[ebp+task], eax
mov	ecx, [schedule_0+0Ch]
mov	[esp+20h], ecx
mov	dword ptr [esp+1Ch], 0
mov	dword ptr [esp+18h], 0
mov	dword ptr [esp+14h], 0
mov	dword ptr [esp+10h], 0
mov	dword ptr [esp+0Ch], 0
mov	[esp+8], eax
mov	dword ptr [esp+4], 0
mov	[esp], schedule_0
call	edx
jmp	short loc_641DB3F2
align 4
			
push	ebp
mov	ebp, esp
push	edi
push	esi
push	ebx
sub	esp, 7Ch
mov	ebx, schedule
cmp	task, 1
jz	loc_641DB549
test	byte ptr [task+0Ch], 1
jz	loc_641DB535
mov	eax, [eax+28h]
test	prev, prev
jz	short loc_641DB49F
cmp	task, prev
jz	loc_641DB527
movzx	edi, word ptr [schedule+34h]
jmp	short loc_641DB496
align 10h
cmp	task, prev
jz	short loc_641DB4DC
mov	eax, prev
lea	p, [prev+edi]
mov	esi, [p]
test	prev, prev
jnz	short loc_641DB490
cmp	[schedule+2Ch],	task
jz	short loc_641DB509
mov	p, [schedule+3Ch]
test	ecx, ecx
jz	short loc_641DB514
movzx	prev, word ptr [schedule+48h]
mov	ecx, [schedule+40h]
mov	[ecx+eax], task
test	byte ptr [schedule+4Ch], 1
jz	short loc_641DB4C5
movzx	ecx, word ptr [schedule+4Ah]
mov	prev, [schedule+40h]
mov	[task+ecx], esi
mov	[schedule+40h],	task
mov	dword ptr [task+eax], 0
add	dword ptr [schedule+4Ch], 4
			
add	esp, 7Ch
pop	schedule
pop	prev
pop	edi
leave
retn
align 4
mov	[ebp+var_4C], p
mov	prev, [task+edi]
mov	p, [ebp+var_4C]
mov	[ecx], esi
test	esi, esi
jz	short loc_641DB4FB
test	byte ptr [schedule+38h], 1
jz	short loc_641DB4FB
movzx	edi, word ptr [schedule+36h]
mov	ecx, [task+edi]
mov	[esi+edi], ecx
			
cmp	[schedule+30h],	task
jz	short loc_641DB51D
sub	dword ptr [schedule+38h], 4
cmp	[schedule+2Ch],	task
jnz	short loc_641DB4A4
mov	[schedule+2Ch],	prev
mov	p, [schedule+3Ch]
test	ecx, ecx
jnz	short loc_641DB4AB
nop
mov	[schedule+3Ch],	task
movzx	prev, word ptr [schedule+48h]
jmp	short loc_641DB4B5
mov	esi, [ebp+var_4C]
mov	ecx, [esi]
mov	[schedule+30h],	ecx
jmp	short loc_641DB500
lea	prev, [schedule+28h]
mov	[ebp+var_4C], eax
movzx	edi, word ptr [schedule+34h]
xor	eax, eax
jmp	short loc_641DB4DF
mov	eax, [task+14h]
mov	[esp+4], eax	
mov	eax, [schedule+10h]
mov	[esp], eax	
call	_silc_hash_table_del
jmp	short loc_641DB4D3
lea	esi, [ebp+htl]
mov	[esp+4], esi	
mov	eax, [eax+10h]
mov	[esp], eax	
call	_silc_hash_table_list
lea	edi, [ebp+fd]
jmp	short loc_641DB572
mov	eax, [ebp+fd]
mov	[esp+4], eax	
mov	eax, [schedule+10h]
mov	[esp], eax	
call	_silc_hash_table_del
lea	eax, [ebp+context]
mov	[esp+8], eax	
mov	[esp+4], edi	
mov	[esp], esi	
call	_silc_hash_table_get
test	al, al
jnz	short loc_641DB560
mov	[esp], esi	
call	_silc_hash_table_list_reset
mov	eax, [schedule+28h]
mov	[schedule+30h],	eax
and	byte ptr [schedule+38h], 0FDh
lea	edx, [schedule+28h]
mov	[ebp+var_3C], edx
test	eax, eax
jz	loc_641DB4D3
test	byte ptr [schedule+38h], 2
jz	short loc_641DB5EE
movzx	edx, word ptr [schedule+36h]
mov	edx, [eax+edx]
mov	[schedule+30h],	edx
mov	edx, [schedule+28h]
test	prev, prev
jz	short loc_641DB5D9
cmp	eax, prev
jz	short loc_641DB62C
movzx	edi, word ptr [schedule+34h]
jmp	short loc_641DB5D0
cmp	eax, prev
jz	short loc_641DB5F7
mov	edx, prev
lea	p, [prev+edi]
mov	esi, [p]
test	prev, prev
jnz	short loc_641DB5CA
			
cmp	eax, [schedule+2Ch]
jz	short loc_641DB627
mov	[ebp+context], eax
mov	[esp], eax	
call	_silc_free
mov	eax, [schedule+30h]
jmp	short loc_641DB5A1
movzx	edx, word ptr [schedule+34h]
mov	edx, [eax+edx]
jmp	short loc_641DB5B6
mov	[ebp+var_6C], p
mov	edi, [eax+edi]
mov	[ebp+var_4C], edi
mov	prev, [ebp+var_6C]
mov	[esi], edi
test	edi, edi
jz	short loc_641DB61C
test	byte ptr [schedule+38h], 1
jz	short loc_641DB61C
movzx	edi, word ptr [schedule+36h]
mov	p, [eax+edi]
mov	esi, [ebp+var_4C]
mov	[esi+edi], ecx
			
cmp	eax, [schedule+30h]
jz	short loc_641DB63A
sub	dword ptr [schedule+38h], 4
jmp	short loc_641DB5D9
mov	[schedule+2Ch],	prev
jmp	short loc_641DB5DE
movzx	edi, word ptr [schedule+34h]
mov	ecx, [ebp+var_3C]
mov	[ebp+var_6C], ecx
xor	prev, prev
jmp	short loc_641DB5FA
mov	edi, [ebp+var_6C]
mov	p, [edi]
mov	[schedule+30h],	ecx
jmp	short loc_641DB621
			
push	ebp
mov	ebp, esp
push	esi
push	ebx
sub	esp, 20h
mov	ebx, schedule
mov	schedule, [schedule]
mov	[esp+4], eax	
mov	[esp], schedule	
call	ds:_schedule_ops.signals_unblock
mov	eax, [schedule+50h]
mov	[esp], eax	
call	_silc_mutex_unlock
mov	esi, [schedule+14h]
mov	[schedule+1Ch],	esi
and	byte ptr [schedule+24h], 0FDh
jmp	short loc_641DB68D
movzx	eax, word ptr [schedule+22h]
mov	eax, [esi+eax]
mov	[schedule+1Ch],	eax
test	byte ptr [esi+11h], 80h
jnz	short loc_641DB6A7
test	byte ptr [esi+0Ch], 2
jnz	short loc_641DB6D0
			
mov	esi, [schedule+1Ch]
test	esi, esi
jz	short loc_641DB6FC
test	byte ptr [schedule+24h], 2
jnz	short loc_641DB674
movzx	eax, word ptr [schedule+20h]
mov	eax, [esi+eax]
mov	[schedule+1Ch],	eax
test	byte ptr [esi+11h], 80h
jz	short loc_641DB684
mov	eax, [esi+8]
mov	[esp+10h], eax
mov	eax, [esi+14h]
mov	[esp+0Ch], eax
mov	dword ptr [esp+8], 1
mov	eax, [schedule+4]
mov	[esp+4], eax
mov	[esp], schedule
call	dword ptr [esi+4]
test	byte ptr [esi+0Ch], 2
jz	short loc_641DB68A
test	byte ptr [esi+12h], 1
jz	short loc_641DB68A
mov	eax, [esi+8]
mov	[esp+10h], eax
mov	eax, [esi+14h]
mov	[esp+0Ch], eax
mov	dword ptr [esp+8], 2
mov	eax, [schedule+4]
mov	[esp+4], eax
mov	[esp], schedule
call	dword ptr [esi+4]
jmp	short loc_641DB68A
align 4
mov	eax, [schedule+50h]
mov	[esp], eax	
call	_silc_mutex_lock
mov	eax, [schedule]
mov	[esp+4], eax	
mov	[esp], schedule	
call	ds:_schedule_ops.signals_block
mov	edx, [schedule+14h]
mov	[schedule+1Ch],	edx
and	byte ptr [schedule+24h], 0FDh
jmp	short loc_641DB736
align 4
movzx	eax, word ptr [schedule+22h]
mov	eax, [edx+eax]
mov	[schedule+1Ch],	eax
test	byte ptr [edx+0Ch], 2
jz	short loc_641DB753
mov	edx, eax	
			
test	edx, edx
jz	short loc_641DB74C
test	byte ptr [schedule+24h], 2
jnz	short loc_641DB724
movzx	eax, word ptr [schedule+20h]
mov	eax, [edx+eax]
jmp	short loc_641DB72B
align 4
add	esp, 20h
pop	schedule
pop	esi
leave
retn
mov	eax, schedule
call	_silc_schedule_task_remove
mov	edx, [schedule+1Ch]
jmp	short loc_641DB736
align 10h
public _silc_schedule_set_listen_fd
			
push	ebp
mov	ebp, esp
push	edi
push	esi
push	ebx
sub	esp, 5Ch
mov	ebx, [ebp+schedule]
mov	esi, [ebp+mask]
mov	al, [ebp+send_events]
mov	[ebp+var_29], al
test	byte ptr [ebx+5Fh], 40h
jz	loc_641DB88E
mov	eax, [schedule_0+50h]
mov	[esp], eax	
call	_silc_mutex_lock
mov	eax, [schedule_0]
mov	[esp+4], eax	
mov	[esp], schedule_0 
call	ds:_schedule_ops.signals_block
lea	eax, [ebp+task]
mov	[esp+0Ch], eax	
mov	dword ptr [esp+8], 0 
mov	eax, [ebp+fd]
mov	[esp+4], eax	
mov	eax, [schedule_0+10h]
mov	[esp], eax	
call	_silc_hash_table_find
test	al, al
jz	loc_641DB850
mov	[esp+0Ch], mask_0 
mov	eax, [ebp+task]
mov	[esp+8], eax	
mov	eax, [schedule_0]
mov	[esp+4], eax	
mov	[esp], schedule_0 
call	ds:_schedule_ops.schedule_fd
test	al, al
jz	loc_641DB874
mov	edx, [ebp+task]
mov	ecx, mask_0
mov	edi, mask_0
and	edi, 3FFFh
shl	edi, 1
mov	eax, [edx+10h]
and	eax, 0FFFF8001h
or	eax, edi
mov	[edx+10h], ax
cmp	[ebp+var_29], 0
jnz	loc_641DB898
			
mov	eax, [schedule_0+8]
test	eax, eax
jz	short loc_641DB850
mov	edx, [ebp+task]
mov	ecx, [schedule_0+0Ch]
mov	[esp+20h], ecx
mov	dword ptr [esp+1Ch], 0
mov	dword ptr [esp+18h], 0
mov	[esp+14h], esi
mov	ecx, [edx+14h]
mov	[esp+10h], ecx
mov	dword ptr [esp+0Ch], 1
mov	[esp+8], edx
mov	dword ptr [esp+4], 1
mov	[esp], schedule_0
call	eax
			
mov	eax, [schedule_0]
mov	[esp+4], eax	
mov	[esp], schedule_0 
call	ds:_schedule_ops.signals_unblock
mov	eax, [schedule_0+50h]
mov	[esp], eax	
call	_silc_mutex_unlock
mov	al, 1
add	esp, 5Ch
pop	schedule_0
pop	mask_0
pop	edi
leave
retn
mov	eax, [schedule_0]
mov	[esp+4], eax	
mov	[esp], schedule_0 
call	ds:_schedule_ops.signals_unblock
mov	eax, [schedule_0+50h]
mov	[esp], eax	
call	_silc_mutex_unlock
xor	eax, eax
add	esp, 5Ch
pop	schedule_0
pop	mask_0
pop	edi
leave
retn
test	esi, esi
jz	loc_641DB80B
and	ecx, 7FFFh
shl	ecx, 0Fh
mov	eax, [edx+10h]
and	eax, 0C0007FFFh
or	eax, ecx
mov	[edx+10h], eax
mov	eax, schedule_0	
call	_silc_schedule_dispatch_fd
jmp	loc_641DB80B
align 4
public _silc_schedule_unset_listen_fd
			
push	ebp
mov	ebp, esp
sub	esp, 18h
mov	dword ptr [esp+0Ch], 0 
mov	dword ptr [esp+8], 0 
mov	eax, [ebp+fd]
mov	[esp+4], eax	
mov	eax, [ebp+schedule]
mov	[esp], eax	
call	_silc_schedule_set_listen_fd
leave
retn
align 10h
push	ebp
mov	ebp, esp
sub	esp, 8
mov	eax, [ebp+context]
mov	[ebp+key], eax
leave
jmp	_silc_free
align 4
			
push	ebp
mov	ebp, esp
push	edi
push	esi
push	ebx
sub	esp, 4Ch
mov	ebx, schedule
mov	[ebp+var_29], dl
lea	edi, [ebp+curtime]
mov	[esp], edi	
call	_silc_gettimeofday
mov	edx, [schedule+28h]
mov	[schedule+30h],	edx
and	byte ptr [schedule+38h], 0FDh
test	edx, edx
jz	loc_641DBA08
movzx	eax, word ptr [schedule+34h]
mov	eax, [edx+eax]
mov	[schedule+30h],	eax
xor	esi, esi
jmp	short loc_641DB94A
align 10h
movzx	eax, word ptr [schedule+36h]
mov	eax, [edx+eax]
mov	[schedule+30h],	eax
test	byte ptr [edx+0Ch], 2
jz	loc_641DBA10
mov	[esp+4], edi	
lea	eax, [task+10h]
mov	[esp], eax	
mov	[ebp+task], task
call	_silc_compare_timeval
test	eax, eax
mov	edx, [ebp+task]
jle	short loc_641DB977
cmp	[ebp+var_29], 0
jz	loc_641DBA08
and	byte ptr [edx+0Ch], 0FDh
mov	eax, [schedule]
mov	[esp+4], eax	
mov	[esp], schedule	
mov	[ebp+task], task
call	ds:_schedule_ops.signals_unblock
mov	eax, [schedule+50h]
mov	[esp], eax	
call	_silc_mutex_unlock
mov	edx, [ebp+task]
mov	eax, [edx+8]
mov	[esp+10h], eax
mov	dword ptr [esp+0Ch], 0
mov	dword ptr [esp+8], 4
mov	eax, [schedule+4]
mov	[esp+4], eax
mov	[esp], schedule
call	dword ptr [task+4]
mov	eax, [schedule+50h]
mov	[esp], eax	
call	_silc_mutex_lock
mov	eax, [schedule]
mov	[esp+4], eax	
mov	[esp], schedule	
call	ds:_schedule_ops.signals_block
mov	edx, [ebp+task]	
mov	eax, schedule	
call	_silc_schedule_task_remove
inc	count
cmp	count, 28h
jg	short loc_641DBA08
mov	edx, [schedule+30h] 
test	edx, edx
jz	short loc_641DBA08
test	byte ptr [schedule+38h], 2
jnz	loc_641DB940
movzx	eax, word ptr [schedule+34h]
mov	eax, [edx+eax]
jmp	loc_641DB947
align 4
			
add	esp, 4Ch
pop	schedule
pop	count
pop	edi
leave
retn
mov	eax, schedule
call	_silc_schedule_task_remove
jmp	short loc_641DB9E9
align 4
public _silc_schedule_task_add
			
push	ebp
mov	ebp, esp
push	edi
push	esi
push	ebx
sub	esp, 7Ch
mov	ebx, [ebp+schedule]
mov	edi, [ebp+fd]
mov	esi, [ebp+type]
test	byte ptr [ebx+5Fh], 40h
jz	loc_641DBD76
mov	eax, [schedule_0+50h]
mov	[ebp+task], 0
mov	[esp], eax	
call	_silc_mutex_lock
mov	eax, [schedule_0]
mov	[esp+4], eax	
mov	[esp], schedule_0 
call	ds:_schedule_ops.signals_block
cmp	type_0,	1
jnz	loc_641DBDA1
mov	eax, [schedule_0+3Ch]
mov	[schedule_0+44h], prev
and	byte ptr [schedule_0+4Ch], 0FDh
test	prev, prev
jz	loc_641DBD7D
movzx	ecx, word ptr [schedule_0+48h]
mov	edx, [prev+ecx]
mov	[schedule_0+44h], edx
mov	[ebp+ttask], prev
lea	type_0,	[schedule_0+3Ch]
mov	ecx, [prev+ecx]
mov	[p], ecx
test	ecx, ecx
jz	short loc_641DBA97
test	byte ptr [schedule_0+4Ch], 1
jnz	loc_641DBBCC
			
cmp	[schedule_0+44h], prev
jz	loc_641DBCFC
sub	dword ptr [schedule_0+4Ch], 4
cmp	[schedule_0+40h], prev
jz	loc_641DBC90
			
mov	edx, [ebp+ttask]
mov	al, [edx+0Ch]
mov	ecx, [ebp+callback]
mov	[edx+4], ecx
mov	edi, [ebp+context]
mov	[edx+8], edi
or	eax, 3
mov	[edx+0Ch], al
add	edx, 10h
mov	[ebp+t1], edx
mov	[esp], edx	
call	_silc_gettimeofday
mov	eax, [ebp+useconds]
add	eax, [ebp+seconds]
test	eax, eax
jle	short loc_641DBB41
mov	p, [ebp+seconds]
mov	eax, [ebp+ttask]
add	esi, [eax+10h]
mov	ecx, 431BDE83h
mov	eax, [ebp+useconds]
imul	ecx
mov	[ebp+var_40], eax
mov	[ebp+var_3C], edx
mov	eax, [ebp+var_3C]
sar	eax, 12h
mov	ecx, [ebp+useconds]
sar	ecx, 1Fh
sub	eax, ecx
add	esi, eax
mov	edx, [ebp+ttask]
mov	[edx+10h], esi
lea	eax, [eax+eax*4]
lea	eax, [eax+eax*4]
lea	eax, [eax+eax*4]
lea	eax, [eax+eax*4]
lea	eax, [eax+eax*4]
lea	eax, [eax+eax*4]
shl	eax, 6
mov	ecx, [ebp+useconds]
sub	ecx, eax
mov	eax, [edx+14h]
add	eax, ecx
mov	[edx+14h], eax
cmp	eax, 0F423Fh
jle	short loc_641DBB41
inc	esi
mov	[edx+10h], esi
sub	eax, 0F4240h
mov	[edx+14h], eax
			
lea	edi, [ebp+list]
lea	p, [schedule_0+28h]
mov	ecx, 5
rep movsd
mov	eax, [ebp+list.head]
xor	edi, edi
movzx	edx, [ebp+list.next_offset]
mov	[ebp+var_40], edx
mov	[ebp+var_4C], schedule_0
mov	schedule_0, prev
test	eax, eax
jz	short loc_641DBB8E
nop
and	[ebp+list._bf10], 0FDh
mov	edx, [ebp+var_40]
mov	edi, [eax+edx]
mov	tmp, eax
lea	eax, [eax+10h]
mov	[esp+4], eax	
mov	ecx, [ebp+t1]
mov	[esp], ecx	
call	_silc_compare_timeval
test	eax, eax
js	short loc_641DBBDC
mov	eax, edi
mov	prev, tmp
test	eax, eax
jnz	short loc_641DBB64
mov	prev, [ebp+var_4C]
mov	tmp, [schedule_0+28h]
test	esi, esi
jz	loc_641DBD08
movzx	eax, word ptr [schedule_0+34h]
mov	ecx, [schedule_0+2Ch]
mov	edx, [ebp+ttask]
mov	[ecx+eax], edx
test	byte ptr [schedule_0+38h], 1
jz	short loc_641DBBBC
movzx	ecx, word ptr [schedule_0+36h]
mov	esi, [schedule_0+2Ch]
mov	prev, [ebp+ttask]
mov	[edi+ecx], esi
mov	edx, [ebp+ttask]
mov	[schedule_0+2Ch], edx
mov	dword ptr [edx+eax], 0
jmp	short loc_641DBC19
align 4
movzx	edx, word ptr [schedule_0+4Ah]
mov	fd_0, [prev+edx]
mov	[ecx+edx], edi
jmp	loc_641DBA97
align 4
mov	edi, prev
mov	prev, [ebp+var_4C]
test	prev, prev
jz	loc_641DBC9C
movzx	eax, word ptr [schedule_0+34h]
mov	ecx, [prev+eax]
mov	edx, [ebp+ttask]
mov	[edx+eax], ecx
mov	[prev+eax], edx
test	byte ptr [schedule_0+38h], 1
jz	short loc_641DBC10
movzx	ecx, word ptr [schedule_0+36h]
mov	[edx+ecx], prev
mov	eax, [edx+eax]
test	eax, eax
jz	short loc_641DBC10
mov	[eax+ecx], edx
			
cmp	[schedule_0+2Ch], prev
jz	loc_641DBCF0
			
add	dword ptr [schedule_0+38h], 4
mov	ecx, [ebp+ttask]
mov	[ebp+task], ecx
mov	eax, [schedule_0+8]
test	eax, eax
jz	short out
mov	ecx, [schedule_0+0Ch]
mov	[esp+20h], ecx
mov	prev, [ebp+useconds]
mov	[esp+1Ch], edi
mov	edx, [ebp+seconds]
mov	[esp+18h], edx
mov	dword ptr [esp+14h], 0
mov	dword ptr [esp+10h], 0
mov	dword ptr [esp+0Ch], 0
mov	ecx, [ebp+ttask]
mov	[esp+8], ecx
mov	dword ptr [esp+4], 1
mov	[esp], schedule_0
call	eax
			
mov	eax, [schedule_0]
mov	[esp+4], eax	
mov	[esp], schedule_0 
call	ds:_schedule_ops.signals_unblock
mov	eax, [schedule_0+50h]
mov	[esp], eax	
call	_silc_mutex_unlock
mov	eax, [ebp+task]
add	esp, 7Ch
pop	schedule_0
pop	tmp
pop	prev
leave
retn
mov	dword ptr [schedule_0+40h], 0
jmp	loc_641DBAAD
mov	eax, [schedule_0+28h]
test	eax, eax
jz	short loc_641DBD1F
movzx	ecx, word ptr [schedule_0+34h]
mov	prev, [ebp+ttask]
mov	[edi+ecx], eax
mov	al, [schedule_0+38h]
test	al, 1
jz	short loc_641DBCC8
mov	ecx, [schedule_0+28h]
test	ecx, ecx
jz	short loc_641DBCC8
movzx	eax, word ptr [schedule_0+36h]
mov	prev, [ebp+ttask]
mov	[ecx+eax], edi
mov	al, [schedule_0+38h]
			
mov	prev, [schedule_0+2Ch]
test	edi, edi
jz	short loc_641DBD17
mov	ecx, [ebp+ttask]
mov	[schedule_0+28h], ecx
test	al, 1
jz	loc_641DBC19
movzx	eax, word ptr [schedule_0+36h]
mov	dword ptr [ecx+eax], 0
jmp	loc_641DBC19
align 10h
mov	ecx, [ebp+ttask]
mov	[schedule_0+2Ch], ecx
jmp	loc_641DBC19
align 4
mov	ecx, [p]
mov	[schedule_0+44h], ecx
jmp	loc_641DBAA0
align 4
mov	prev, [ebp+ttask]
mov	[schedule_0+28h], edi
movzx	eax, word ptr [schedule_0+34h]
jmp	loc_641DBBA9
mov	edx, [ebp+ttask]
mov	[schedule_0+2Ch], edx
jmp	short loc_641DBCCF
movzx	eax, word ptr [schedule_0+34h]
mov	edx, [ebp+ttask]
mov	dword ptr [edx+eax], 0
jmp	loc_641DBCAD
cmp	type_0,	2
jnz	out
mov	eax, [schedule_0]
mov	[esp+4], eax	
mov	[esp], schedule_0 
call	ds:_schedule_ops.signals_unblock
mov	eax, [schedule_0+50h]
mov	[esp], eax	
call	_silc_mutex_unlock
mov	eax, [ebp+context]
mov	[esp+10h], eax	
mov	edx, [ebp+callback]
mov	[esp+0Ch], edx	
mov	[esp+8], fd_0	
mov	eax, [schedule_0]
mov	[esp+4], eax	
mov	[esp], schedule_0 
call	ds:_schedule_ops.signal_register
xor	eax, eax
jmp	loc_641DBC88
mov	dword ptr [esp+4], 18h
mov	dword ptr [esp], 1 
call	_silc_calloc
mov	[ebp+ttask], eax
test	eax, eax
jnz	loc_641DBAAD
jmp	out
test	type_0,	type_0
jnz	short loc_641DBD32
lea	eax, [ebp+task]
mov	[esp+0Ch], eax	
mov	dword ptr [esp+8], 0 
mov	[esp+4], fd_0	
mov	eax, [schedule_0+10h]
mov	[esp], eax	
call	_silc_hash_table_find
test	al, al
jnz	loc_641DBE87
test	dword ptr [schedule_0+5Ch], 1FFFFFFFh
jnz	short loc_641DBE43
mov	dword ptr [esp+4], 18h 
mov	dword ptr [esp], 1 
call	_silc_calloc
mov	type_0,	eax
test	eax, eax
jz	short loc_641DBE37
mov	al, [eax+0Ch]
and	eax, 0FFFFFFFEh
mov	edx, [ebp+callback]
mov	[esi+4], edx
mov	ecx, [ebp+context]
mov	[esi+8], ecx
or	eax, 2
mov	[esi+0Ch], al
mov	eax, [esi+10h]
and	eax, 0FFFF8001h
or	eax, 2
mov	[esi+10h], ax
mov	[esi+14h], fd_0
mov	[esp+8], esi	
mov	[esp+4], fd_0	
mov	eax, [schedule_0+10h]
mov	[esp], eax	
call	_silc_hash_table_add
test	al, al
jnz	short loc_641DBEA0
mov	[esp], esi	
call	_silc_free
mov	[ebp+task], 0
jmp	out
mov	eax, [schedule_0+10h]
mov	[esp], eax	
call	_silc_hash_table_count
mov	edx, [schedule_0+5Ch]
and	edx, 1FFFFFFFh
cmp	eax, edx
jb	loc_641DBDD4
mov	dword ptr [esp], offset	aSchedulerTaskL	
call	_silc_format
mov	[esp+4], eax	
mov	dword ptr [esp], 2 
call	_silc_log_output
mov	[ebp+task], 0
jmp	out
mov	edx, [ebp+task]	
test	byte ptr [edx+0Ch], 2
jnz	out
mov	eax, schedule_0	
call	_silc_schedule_task_remove
jmp	loc_641DBDCB
mov	eax, [esi+10h]
shr	ax, 1
and	eax, 3FFFh
mov	[esp+0Ch], eax	
mov	[esp+8], esi	
mov	eax, [schedule_0]
mov	[esp+4], eax	
mov	[esp], schedule_0 
call	ds:_schedule_ops.schedule_fd
test	al, al
jz	short loc_641DBF18
mov	[ebp+task], esi
mov	eax, [schedule_0+8]
test	eax, eax
jz	out
mov	edx, [schedule_0+0Ch]
mov	[esp+20h], edx
mov	dword ptr [esp+1Ch], 0
mov	dword ptr [esp+18h], 0
mov	dword ptr [esp+14h], 1
mov	edx, [esi+14h]
mov	[esp+10h], edx
mov	dword ptr [esp+0Ch], 1
mov	[esp+8], esi
mov	dword ptr [esp+4], 1
mov	[esp], schedule_0
call	eax
jmp	out
mov	[esp+4], fd_0	
mov	eax, [schedule_0+10h]
mov	[esp], eax	
call	_silc_hash_table_del
mov	[ebp+task], 0
jmp	out
align 4
public _silc_schedule_timeout_gc
			
push	ebp
mov	ebp, esp
push	edi
push	esi
push	ebx
sub	esp, 5Ch
mov	esi, [ebp+schedule]
test	byte ptr [esi+5Fh], 40h
jnz	short loc_641DBF50
add	esp, 5Ch
pop	ebx
pop	schedule_0
pop	edi
leave
retn
align 10h
mov	eax, [schedule_0+50h]
mov	[esp], eax	
call	_silc_mutex_lock
mov	eax, [schedule_0]
mov	[esp+4], eax	
mov	[esp], schedule_0 
call	ds:_schedule_ops.signals_block
mov	eax, [schedule_0+4Ch]
shr	eax, 2
cmp	eax, 0Ah
jle	loc_641DC029
mov	edx, [schedule_0+38h]
shr	edx, 2
cmp	eax, edx
jl	loc_641DC029
mov	ecx, eax
sar	ecx, 1
mov	[ebp+c], ecx
cmp	edx, ecx
jge	short loc_641DBF99
mov	edi, eax
sub	edi, edx
mov	[ebp+c], edi
sub	eax, [ebp+c]
cmp	eax, 9
jle	loc_641DC0C5
mov	edx, [schedule_0+3Ch]
mov	ebx, edx
mov	[schedule_0+44h], edx
mov	al, [schedule_0+4Ch]
and	eax, 0FFFFFFFDh
mov	[schedule_0+4Ch], al
lea	ecx, [schedule_0+3Ch]
mov	[ebp+var_20], ecx
test	ebx, ebx
jz	short loc_641DC020
test	al, 2
jz	loc_641DC080
movzx	ecx, word ptr [schedule_0+4Ah]
mov	ecx, [ebx+ecx]
mov	[schedule_0+44h], ecx
mov	ecx, [ebp+c]
test	ecx, ecx
jle	short loc_641DC020
test	edx, edx
jz	short loc_641DBFFF
cmp	ebx, prev
jz	loc_641DC0DE
movzx	edi, word ptr [schedule_0+48h]
jmp	short loc_641DBFF6
align 4
cmp	ebx, prev
jz	loc_641DC08C
mov	edx, prev
lea	p, [prev+edi]
mov	eax, [p]
test	prev, prev
jnz	short loc_641DBFEC
cmp	[schedule_0+40h], ebx
jz	loc_641DC0BD
			
dec	[ebp+c]
mov	[esp], ebx	
call	_silc_free
mov	ebx, [schedule_0+44h]
mov	edx, [schedule_0+3Ch]
mov	al, [schedule_0+4Ch]
test	ebx, ebx
jnz	short loc_641DBFC0
			
mov	[schedule_0+44h], edx
and	eax, 0FFFFFFFDh
mov	[schedule_0+4Ch], al
			
mov	eax, [schedule_0]
mov	[esp+4], eax	
mov	[esp], schedule_0 
call	ds:_schedule_ops.signals_unblock
mov	eax, [schedule_0+50h]
mov	[esp], eax	
call	_silc_mutex_unlock
mov	dword ptr [esp+18h], 1 
mov	dword ptr [esp+14h], 0 
mov	dword ptr [esp+10h], 0E10h 
mov	[esp+0Ch], schedule_0 
mov	dword ptr [esp+8], offset _silc_schedule_timeout_gc 
mov	dword ptr [esp+4], 0 
mov	[esp], schedule_0 
call	_silc_schedule_task_add
add	esp, 5Ch
pop	ebx
pop	schedule_0
pop	edi
leave
retn
align 10h
movzx	ecx, word ptr [schedule_0+48h]
mov	ecx, [ebx+ecx]
jmp	loc_641DBFCF
mov	[ebp+var_3C], p
mov	prev, [ebx+edi]
mov	p, [ebp+var_3C]
mov	[ecx], eax
test	eax, eax
jz	short loc_641DC0AB
test	byte ptr [schedule_0+4Ch], 1
jz	short loc_641DC0AB
movzx	edi, word ptr [schedule_0+4Ah]
mov	ecx, [ebx+edi]
mov	[eax+edi], ecx
			
cmp	[schedule_0+44h], ebx
jz	short loc_641DC0D4
sub	dword ptr [schedule_0+4Ch], 4
cmp	[schedule_0+40h], ebx
jnz	loc_641DC008
mov	[schedule_0+40h], prev
jmp	loc_641DC008
mov	edx, [ebp+c]
lea	edx, [edx+eax-0Ah]
mov	[ebp+c], edx
jmp	loc_641DBFA5
mov	edi, [ebp+var_3C]
mov	eax, [edi]
mov	[schedule_0+44h], eax
jmp	short loc_641DC0B0
movzx	edi, word ptr [schedule_0+48h]
mov	eax, [ebp+var_20]
mov	[ebp+var_3C], eax
xor	prev, prev
jmp	short loc_641DC08F
			
push	ebp
mov	ebp, esp
push	edi
push	esi
push	ebx
sub	esp, 3Ch
mov	ebx, schedule
mov	[ebp+var_2C], timeout_usecs
lea	edi, [ebp+tv]
lea	ret, [ret+0]
mov	al, [schedule+5Fh]
test	al, al
js	loc_641DC2B5
test	al, 40h
jz	loc_641DC304
mov	[esp], edi	
call	_silc_gettimeofday
mov	al, [schedule+5Fh]
and	eax, 0FFFFFFDFh
mov	[schedule+5Fh],	al
mov	edx, [schedule+28h]
mov	[schedule+30h],	edx
and	byte ptr [schedule+38h], 0FDh
test	edx, edx
jz	loc_641DC1EC
movzx	eax, word ptr [schedule+34h]
mov	eax, [edx+eax]
mov	[schedule+30h],	eax
mov	ret, 1
jmp	short loc_641DC152
align 4
movzx	eax, word ptr [schedule+36h]
mov	eax, [edx+eax]
mov	[schedule+30h],	eax
test	byte ptr [edx+0Ch], 2
jz	loc_641DC283
mov	[esp+4], edi	
lea	eax, [edx+10h]
mov	[esp], eax	
mov	[ebp+var_30], edx
call	_silc_compare_timeval
test	eax, eax
mov	edx, [ebp+var_30]
jg	short loc_641DC1B4
mov	eax, esi
test	al, al
jz	short loc_641DC1B4
xor	edx, edx	
mov	eax, schedule	
call	_silc_schedule_dispatch_timeout
test	byte ptr [schedule+5Fh], 40h
jz	loc_641DC304
mov	edx, [schedule+28h] 
mov	[schedule+30h],	edx
and	byte ptr [schedule+38h], 0FDh
xor	esi, esi
test	edx, edx
jz	loc_641DC24C
test	byte ptr [schedule+38h], 2
jnz	short loc_641DC148
movzx	eax, word ptr [schedule+34h]
mov	eax, [edx+eax]
jmp	short loc_641DC14F
align 4
			
mov	ecx, [edx+10h]
sub	ecx, [ebp+tv.tv_sec]
mov	[ebp+tv.tv_sec], ecx
mov	eax, [edx+14h]
sub	eax, [ebp+tv.tv_usec]
mov	[ebp+tv.tv_usec], eax
test	ecx, ecx
js	loc_641DC254
test	eax, eax
js	loc_641DC263
			
mov	eax, [ebp+tv.tv_sec]
mov	edx, [ebp+tv.tv_usec]
mov	[schedule+54h],	eax
mov	[schedule+58h],	edx
mov	al, [schedule+5Fh]
or	eax, 20h
mov	[schedule+5Fh],	al
nop
			
test	al, 40h
jz	loc_641DC304
mov	ret, [ebp+var_2C]
test	esi, esi
js	short loc_641DC20E
mov	edx, [ebp+var_2C]
mov	[schedule+58h],	edx
mov	dword ptr [schedule+54h], 0
or	eax, 20h
mov	[schedule+5Fh],	al
mov	eax, [schedule]
mov	[esp+4], eax	
mov	[esp], schedule	
call	ds:_schedule_ops.schedule
mov	esi, eax
cmp	eax, 0
jnz	short loc_641DC292
test	dword ptr [schedule+38h], 0FFFFFFFCh
jz	short loc_641DC236
xor	edx, edx
mov	eax, schedule	
call	_silc_schedule_dispatch_timeout
			
cmp	[ebp+var_2C], 0FFFFFFFFh
jz	loc_641DC100
mov	al, 1
add	esp, 3Ch
pop	schedule
pop	ret
pop	edi
leave
retn
align 4
mov	al, [schedule+5Fh]
jmp	short loc_641DC1EC
align 4
mov	[ebp+tv.tv_sec], 0
test	eax, eax
jns	loc_641DC1D6
mov	eax, [ebp+tv.tv_sec]
dec	eax
mov	[ebp+tv.tv_sec], eax
test	eax, eax
js	short loc_641DC27A
add	[ebp+tv.tv_usec], 0F4240h
jmp	loc_641DC1D6
mov	[ebp+tv.tv_sec], 0
jmp	short loc_641DC26E
mov	eax, schedule	
call	_silc_schedule_task_remove
mov	edx, [schedule+30h]
jmp	loc_641DC19A
jle	short loc_641DC30B
mov	ret, schedule	
call	_silc_schedule_dispatch_fd
test	byte ptr [schedule+5Fh], 20h
jz	short loc_641DC236
cmp	dword ptr [schedule+54h], 0
jnz	short loc_641DC236
cmp	dword ptr [schedule+58h], 0C34Fh
jg	short loc_641DC236
jmp	loc_641DC22D
mov	eax, [schedule]
mov	[esp+4], eax	
mov	[esp], schedule	
call	ds:_schedule_ops.signals_unblock
mov	eax, [schedule+50h]
mov	[esp], eax	
call	_silc_mutex_unlock
mov	eax, [schedule]
mov	[esp+4], eax	
mov	[esp], schedule	
call	ds:_schedule_ops.signals_call
and	byte ptr [schedule+5Fh], 7Fh
mov	eax, [schedule+50h]
mov	[esp], eax	
call	_silc_mutex_lock
mov	eax, [schedule]
mov	[esp+4], eax	
mov	[esp], schedule	
call	ds:_schedule_ops.signals_block
mov	al, [schedule+5Fh]
jmp	loc_641DC10B
			
xor	eax, eax
jmp	loc_641DC242
call	__errno
cmp	dword ptr [eax], 4
jz	loc_641DC236
cmp	ret, 0FFFFFFFEh
jz	loc_641DC240
call	__errno
mov	eax, [eax]
mov	[esp], eax	
call	_strerror
mov	[esp+4], eax
mov	dword ptr [esp], offset	aErrorInSelectP	
call	_silc_format
mov	[esp+4], eax	
mov	dword ptr [esp], 3 
call	_silc_log_output
jmp	loc_641DC236
align 4
public _silc_schedule
push	ebp
mov	ebp, esp
push	ebx
sub	esp, 14h
mov	ebx, [ebp+schedule]
mov	eax, [ebx+50h]
mov	[esp], eax	
call	_silc_mutex_lock
mov	eax, [ebx]
mov	[esp+4], eax	
mov	[esp], ebx	
call	ds:_schedule_ops.signals_block
mov	edx, 0FFFFFFFFh	
mov	eax, ebx	
call	_silc_schedule_iterate
mov	eax, [ebx]
mov	[esp+4], eax	
mov	[esp], ebx	
call	ds:_schedule_ops.signals_unblock
mov	eax, [ebx+50h]
mov	[ebp+schedule],	eax
add	esp, 14h
pop	ebx
leave
jmp	_silc_mutex_unlock
align 4
public _silc_schedule_one
push	ebp
mov	ebp, esp
push	ebx
sub	esp, 24h
mov	ebx, [ebp+schedule]
mov	ret, [ebx+50h]
mov	[esp], ret	
call	_silc_mutex_lock
mov	ret, [ebx]
mov	[esp+4], ret	
mov	[esp], ebx	
call	ds:_schedule_ops.signals_block
mov	edx, [ebp+timeout_usecs] 
mov	ret, ebx	
call	_silc_schedule_iterate
mov	edx, [ebx]
mov	[esp+4], edx	
mov	[esp], ebx	
mov	[ebp+var_C], al
call	ds:_schedule_ops.signals_unblock
mov	edx, [ebx+50h]
mov	[esp], edx	
call	_silc_mutex_unlock
mov	al, [ebp+var_C]
add	esp, 24h
pop	ebx
leave
retn
public _silc_schedule_uninit
push	ebp
mov	ebp, esp
push	ebx
sub	esp, 14h
mov	ebx, [ebp+schedule]
test	byte ptr [ebx+5Fh], 40h
jz	short loc_641DC414
xor	eax, eax
add	esp, 14h
pop	schedule_0
leave
retn
mov	eax, [schedule_0+50h]
mov	[esp], eax	
call	_silc_mutex_lock
mov	eax, [schedule_0]
mov	[esp+4], eax	
mov	[esp], schedule_0 
call	ds:_schedule_ops.signals_block
mov	edx, 1		
mov	eax, schedule_0	
call	_silc_schedule_dispatch_timeout
mov	eax, [schedule_0]
mov	[esp+4], eax	
mov	[esp], schedule_0 
call	ds:_schedule_ops.signals_unblock
mov	eax, [schedule_0+50h]
mov	[esp], eax	
call	_silc_mutex_unlock
cmp	byte ptr [schedule_0+5Fh], 0
js	loc_641DC4E8
mov	dword ptr [esp+4], 1 
mov	[esp], schedule_0 
call	_silc_schedule_task_del
mov	edx, 1		
mov	eax, schedule_0	
call	_silc_schedule_task_remove
mov	eax, [schedule_0+3Ch]
mov	[schedule_0+44h], eax
and	byte ptr [schedule_0+4Ch], 0FDh
jmp	short loc_641DC49D
align 4
movzx	edx, word ptr [schedule_0+4Ah]
mov	edx, [eax+edx]
mov	[schedule_0+44h], edx
mov	[esp], eax	
call	_silc_free
mov	eax, [schedule_0+44h]
test	eax, eax
jz	short loc_641DC4B0
test	byte ptr [schedule_0+4Ch], 2
jnz	short loc_641DC488
movzx	edx, word ptr [schedule_0+48h]
mov	edx, [eax+edx]
jmp	short loc_641DC48F
mov	eax, [schedule_0+10h]
mov	[esp], eax	
call	_silc_hash_table_free
mov	eax, [schedule_0]
mov	[esp+4], eax	
mov	[esp], schedule_0 
call	ds:_schedule_ops.uninit
mov	eax, [schedule_0+50h]
mov	[esp], eax	
call	_silc_mutex_free
mov	[esp], schedule_0 
call	_silc_free
mov	al, 1
add	esp, 14h
pop	schedule_0
leave
retn
align 4
mov	eax, [schedule_0]
mov	[esp+4], eax	
mov	[esp], schedule_0 
call	ds:_schedule_ops.signals_call
and	byte ptr [schedule_0+5Fh], 7Fh
jmp	loc_641DC45E
public _silc_schedule_init
push	ebp
mov	ebp, esp
push	esi
push	ebx
sub	esp, 20h
mov	esi, [ebp+app_context]
mov	dword ptr [esp+4], 60h 
mov	dword ptr [esp], 1 
call	_silc_calloc
mov	ebx, eax
test	eax, eax
jz	loc_641DC643
mov	dword ptr [esp+1Ch], 1 
mov	dword ptr [esp+18h], 0 
mov	dword ptr [esp+14h], offset _silc_schedule_fd_destructor 
mov	dword ptr [esp+10h], 0 
mov	dword ptr [esp+0Ch], 0 
mov	dword ptr [esp+8], 0 
mov	dword ptr [esp+4], offset _silc_hash_uint 
mov	dword ptr [esp], 0 
call	_silc_hash_table_alloc
mov	[schedule+10h],	eax
test	eax, eax
jz	loc_641DC662
mov	eax, [schedule+38h]
and	eax, 3
mov	[schedule+38h],	eax
mov	word ptr [schedule+34h], 0
mov	word ptr [schedule+36h], 0
mov	byte ptr [schedule+38h], 0
mov	dword ptr [schedule+30h], 0
mov	dword ptr [schedule+2Ch], 0
mov	dword ptr [schedule+28h], 0
mov	eax, [schedule+4Ch]
and	eax, 3
mov	[schedule+4Ch],	eax
mov	word ptr [schedule+48h], 0
mov	word ptr [schedule+4Ah], 0
mov	byte ptr [schedule+4Ch], 0
mov	dword ptr [schedule+44h], 0
mov	dword ptr [schedule+40h], 0
mov	dword ptr [schedule+3Ch], 0
mov	[schedule+4], app_context_0
or	byte ptr [schedule+5Fh], 40h
mov	edx, [ebp+max_tasks]
and	edx, 1FFFFFFFh
mov	eax, [schedule+5Ch]
and	eax, 0E0000000h
or	eax, edx
mov	[schedule+5Ch],	eax
lea	eax, [schedule+50h]
mov	[esp], eax	
call	_silc_mutex_alloc
mov	[esp+4], app_context_0 
mov	[esp], schedule	
call	ds:_schedule_ops.init
mov	[schedule], eax
test	eax, eax
jz	short loc_641DC64C
mov	dword ptr [esp+18h], 1 
mov	dword ptr [esp+14h], 0 
mov	dword ptr [esp+10h], 0E10h 
mov	[esp+0Ch], schedule 
mov	dword ptr [esp+8], offset _silc_schedule_timeout_gc 
mov	dword ptr [esp+4], 0 
mov	[esp], schedule	
call	_silc_schedule_task_add
			
mov	eax, schedule
add	esp, 20h
pop	schedule
pop	app_context_0
leave
retn
mov	eax, [schedule+10h]
mov	[esp], eax	
call	_silc_hash_table_free
mov	eax, [schedule+50h]
mov	[esp], eax	
call	_silc_mutex_free
mov	[esp], schedule	
call	_silc_free
xor	schedule, schedule
jmp	short loc_641DC643
align 10h
push	ebp
mov	ebp, esp
push	edi
push	esi
push	ebx
sub	esp, 3Ch
mov	edi, buffer
mov	ebx, currlen
mov	buffer,	[ebp+max]
mov	[ebp+var_38], eax
test	eax, eax
js	loc_641DC898
mov	eax, [ebp+value]
test	byte ptr [ebp+flags], 40h
jnz	short loc_641DC6B8
test	uvalue,	uvalue
js	loc_641DC8B0
test	byte ptr [ebp+flags], 2
jnz	loc_641DC8A4
test	byte ptr [ebp+flags], 4
jz	short loc_641DC6B8
mov	[ebp+signvalue], 20h
jmp	short loc_641DC6BF
align 4
mov	[ebp+signvalue], 0
mov	edx, [ebp+flags]
and	edx, 20h
mov	[ebp+var_34], edx
xor	edx, edx
lea	esi, [ebp+convert]
mov	[ebp+var_48], esi
mov	[ebp+var_44], buffer
mov	buffer,	currlen
mov	esi, maxlen
jmp	short loc_641DC6FD
align 4
mov	ebx, offset a0123456789ab_0 
xor	edx, edx
div	[ebp+base]
mov	dl, [ebx+edx]
mov	[ebp+place+convert], dl
lea	edx, [place+1]
test	eax, eax
jz	loc_641DC864
cmp	place, 14h
jz	short loc_641DC710
mov	ecx, place
mov	ebx, [ebp+var_34]
test	ebx, ebx
jz	short loc_641DC6DC
mov	ebx, offset a0123456789abcd 
jmp	short loc_641DC6E1
align 10h
mov	place, ecx
mov	ebx, currlen
mov	currlen, [ebp+var_44]
mov	ecx, maxlen
mov	[ebp+var_34], place
mov	uvalue,	[ebp+var_34]
mov	[ebp+eax+convert], 0
mov	place, [ebp+var_38]
sub	edx, eax
mov	[ebp+var_30], edx
mov	esi, eax
mov	edx, [ebp+var_38]
cmp	eax, edx
jge	short loc_641DC737
mov	place, edx
mov	eax, [ebp+min]
sub	eax, place
mov	place, min_0
xor	min_0, min_0
cmp	[ebp+signvalue], 0
setnz	al
sub	spadlen, eax
mov	edx, [ebp+var_30]
test	edx, edx
js	loc_641DC880
test	spadlen, spadlen
js	loc_641DC88F
test	byte ptr [ebp+flags], 10h
jz	short loc_641DC76D
cmp	[ebp+var_30], spadlen
jl	loc_641DC85C
xor	spadlen, spadlen
test	byte ptr [ebp+flags], 1
jz	loc_641DC818
neg	spadlen
cmp	byte ptr [ebp+flags], 0
jns	short loc_641DC799
mov	eax, [currlen]
cmp	maxlen,	eax
jbe	short loc_641DC78B
mov	byte ptr [buffer+eax], 30h
mov	eax, [currlen]
inc	eax
mov	[currlen], eax
cmp	maxlen,	eax
ja	loc_641DC850
inc	eax
mov	[currlen], eax
mov	eax, [ebp+signvalue]
test	eax, eax
jz	short loc_641DC7AF
mov	place, [currlen]
cmp	maxlen,	edx
ja	loc_641DC840
lea	eax, [edx+1]
mov	[currlen], eax
mov	place, [ebp+var_30]
test	edx, edx
jz	short loc_641DC7CC
mov	eax, [currlen]
mov	edx, [ebp+var_30]
nop
cmp	maxlen,	eax
jbe	short loc_641DC7C6
mov	byte ptr [buffer+eax], 30h
mov	eax, [currlen]
inc	eax
mov	[currlen], eax
dec	zpadlen
jnz	short loc_641DC7BC
mov	eax, [ebp+var_34]
test	eax, eax
jz	short loc_641DC7FA
mov	eax, [currlen]
lea	zpadlen, [ebp+convert]
add	edx, [ebp+var_34]
mov	[ebp+var_30], spadlen
mov	spadlen, maxlen
mov	cl, [edx-1]
cmp	maxlen,	eax
jbe	short loc_641DC7EC
mov	[buffer+eax], cl
mov	eax, [currlen]
inc	eax
mov	[currlen], eax
dec	edx
cmp	edx, [ebp+var_48]
jnz	short loc_641DC7E0
mov	ecx, maxlen
mov	maxlen,	[ebp+var_30]
test	spadlen, spadlen
jz	short loc_641DC810
mov	eax, [currlen]
cmp	maxlen,	eax
jbe	short loc_641DC80A
mov	byte ptr [buffer+eax], 20h
mov	eax, [currlen]
inc	eax
mov	[currlen], eax
inc	spadlen
jnz	short loc_641DC800
add	esp, 3Ch
pop	currlen
pop	spadlen
pop	buffer
leave
retn
test	spadlen, spadlen
jle	loc_641DC779
mov	eax, [currlen]
mov	edx, [ebp+var_34]
lea	spadlen, [spadlen+0]
cmp	maxlen,	eax
jbe	short loc_641DC832
mov	byte ptr [buffer+eax], 20h
mov	eax, [currlen]
inc	eax
mov	[currlen], eax
dec	spadlen
jnz	short loc_641DC828
mov	[ebp+var_34], place
jmp	loc_641DC779
mov	al, byte ptr [ebp+signvalue]
mov	[buffer+edx], al
mov	edx, [currlen]
jmp	loc_641DC7AA
align 10h
mov	byte ptr [buffer+eax], 78h
mov	eax, [currlen]
jmp	loc_641DC796
align 4
mov	[ebp+var_30], spadlen
jmp	loc_641DC76B
mov	[ebp+var_34], place
mov	place, ecx
mov	ebx, currlen
mov	currlen, [ebp+var_44]
mov	ecx, maxlen
cmp	[ebp+var_34], 14h
jnz	loc_641DC71C
jmp	loc_641DC719
align 10h
mov	[ebp+var_30], 0
test	spadlen, spadlen
jns	loc_641DC75C
xor	spadlen, spadlen
jmp	loc_641DC75C
align 4
mov	[ebp+var_38], 0
jmp	loc_641DC68B
mov	[ebp+signvalue], 2Bh
jmp	loc_641DC6BF
neg	uvalue
mov	[ebp+signvalue], 2Dh
jmp	loc_641DC6BF
align 10h
push	ebp
mov	ebp, esp
push	ebx
sub	esp, 94h
fld	[ebp+x0]
mov	ebx, iptr
fld	st
fld1
fld	st
fxch	st(2)
xor	edx, edx
fnstcw	[ebp+var_1A]
mov	ax, [ebp+var_1A]
mov	ah, 0Ch
mov	[ebp+var_1C], ax
jmp	short loc_641DC904
fstp	st
jmp	short loc_641DC8EE
fstp	st
fmul	ds:dbl_642644D0
fxch	st(2)
fmul	ds:flt_642644D8
inc	i
cmp	i, 64h
jz	short loc_641DC94C
fxch	st(2)
fldcw	[ebp+var_1C]
fist	[ebp+var_20]
fldcw	[ebp+var_1A]
mov	eax, [ebp+var_20]
mov	[ebp+var_20], eax
fild	[ebp+var_20]
fld	st(1)
fadd	st, st(3)
fucomp	st(1)
fnstsw	ax
test	ah, 5
jnz	short loc_641DC8E8
fld	st(1)
fsub	st, st(3)
fxch	st(1)
fucom	st(1)
fnstsw	ax
fstp	st(1)
test	ah, 5
jnz	short loc_641DC8EC
test	i, i
jnz	short loc_641DC96C
fstp	st(3)
fstp	st(3)
fstp	st
fst	qword ptr [iptr]
fsubp	st(1), st
add	esp, 94h
pop	iptr
leave
retn
align 4
fstp	st
fstp	st
fstp	st
fstp	st
mov	dword ptr [iptr], 0
mov	dword ptr [iptr+4], 0
fldz
add	esp, 94h
pop	iptr
leave
retn
fstp	st(1)
fmulp	st(2), st
fxch	st(2)
fsub	st, st(1)
fld	st
xor	i, i
fld1
fxch	st(1)
jmp	short loc_641DC99C
align 10h
fstp	st
jmp	short loc_641DC986
fstp	st
fmul	ds:dbl_642644D0
fxch	st(4)
fmul	ds:flt_642644D8
inc	edx
cmp	edx, 64h
jz	short loc_641DC9EB
fxch	st(4)
fldcw	[ebp+var_1C]
fist	[ebp+var_20]
fldcw	[ebp+var_1A]
mov	eax, [ebp+var_20]
mov	[ebp+var_20], eax
fild	[ebp+var_20]
fld	st(1)
fadd	st, st(3)
fucomp	st(1)
fnstsw	ax
test	ah, 5
jnz	short loc_641DC980
fld	st(1)
fsub	st, st(3)
fxch	st(1)
fucom	st(1)
fnstsw	ax
fstp	st(1)
test	ah, 5
jnz	short loc_641DC984
test	edx, edx
jnz	short loc_641DC9F9
fstp	st(5)
fstp	st(2)
fstp	st
fxch	st(1)
fxch	st(2)
fsub	st(1), st
			
faddp	st(2), st
fxch	st(1)
fstp	qword ptr [iptr]
add	esp, 94h
pop	iptr
leave
retn
fstp	st
fstp	st
fstp	st
fstp	st(1)
fldz
fld	st
jmp	short loc_641DC9DC
fstp	st(1)
fmulp	st(4), st
fxch	st(3)
fst	[ebp+var_50]
fsubp	st(1), st
fld	st
xor	edx, edx
fld1
fxch	st(1)
jmp	short loc_641DCA2C
align 10h
fstp	st
jmp	short loc_641DCA16
fstp	st
fmul	ds:dbl_642644D0
fxch	st(4)
fmul	ds:flt_642644D8
inc	edx
cmp	edx, 64h
jz	short loc_641DCA74
fxch	st(4)
fldcw	[ebp+var_1C]
fist	[ebp+var_20]
fldcw	[ebp+var_1A]
mov	eax, [ebp+var_20]
mov	[ebp+var_20], eax
fild	[ebp+var_20]
fld	st(1)
fadd	st, st(3)
fucomp	st(1)
fnstsw	ax
test	ah, 5
jnz	short loc_641DCA10
fld	st(1)
fsub	st, st(3)
fxch	st(1)
fucom	st(1)
fnstsw	ax
fstp	st(1)
test	ah, 5
jnz	short loc_641DCA14
test	edx, edx
jnz	short loc_641DCA82
fstp	st(5)
fstp	st(2)
fstp	st
fxch	st(1)
fxch	st(2)
fsub	st(1), st
			
fadd	[ebp+var_50]
jmp	loc_641DC9DC
fstp	st
fstp	st
fstp	st
fstp	st(1)
fldz
fld	st
jmp	short loc_641DCA6C
fstp	st(1)
fmulp	st(4), st
fxch	st(3)
fst	[ebp+var_48]
fsubp	st(1), st
fld	st
xor	edx, edx
fld1
fxch	st(1)
jmp	short loc_641DCAB4
align 4
fstp	st
jmp	short loc_641DCA9E
fstp	st
fmul	ds:dbl_642644D0
fxch	st(4)
fmul	ds:flt_642644D8
inc	edx
cmp	edx, 64h
jz	short loc_641DCAFC
fxch	st(4)
fldcw	[ebp+var_1C]
fist	[ebp+var_20]
fldcw	[ebp+var_1A]
mov	eax, [ebp+var_20]
mov	[ebp+var_20], eax
fild	[ebp+var_20]
fld	st(1)
fadd	st, st(3)
fucomp	st(1)
fnstsw	ax
test	ah, 5
jnz	short loc_641DCA98
fld	st(1)
fsub	st, st(3)
fxch	st(1)
fucom	st(1)
fnstsw	ax
fstp	st(1)
test	ah, 5
jnz	short loc_641DCA9C
test	edx, edx
jnz	short loc_641DCB0A
fstp	st(5)
fstp	st(2)
fstp	st
fxch	st(1)
fxch	st(2)
fsub	st(1), st
			
fadd	[ebp+var_48]
jmp	loc_641DCA6C
fstp	st
fstp	st
fstp	st
fstp	st(1)
fldz
fld	st
jmp	short loc_641DCAF4
fstp	st(1)
fmulp	st(4), st
fxch	st(3)
fst	[ebp+var_40]
fsubp	st(1), st
fld	st
xor	edx, edx
fld1
fxch	st(1)
jmp	short loc_641DCB3B
fstp	st
jmp	short loc_641DCB25
fstp	st
fmul	ds:dbl_642644D0
fxch	st(4)
fmul	ds:flt_642644D8
inc	edx
cmp	edx, 64h
jz	short loc_641DCB7F
fxch	st(4)
fldcw	[ebp+var_1C]
fist	[ebp+var_20]
fldcw	[ebp+var_1A]
mov	eax, [ebp+var_20]
mov	[ebp+var_20], eax
fild	[ebp+var_20]
fld	st(1)
fadd	st, st(3)
fucomp	st(1)
fnstsw	ax
sahf
jb	short loc_641DCB1F
fld	st(1)
fsub	st, st(3)
fxch	st(1)
fucom	st(1)
fnstsw	ax
fstp	st(1)
sahf
jb	short loc_641DCB23
test	edx, edx
jnz	short loc_641DCB8D
fstp	st(5)
fstp	st(2)
fstp	st
fxch	st(1)
fxch	st(2)
fsub	st(1), st
			
fadd	[ebp+var_40]
jmp	loc_641DCAF4
fstp	st
fstp	st
fstp	st
fstp	st(1)
fldz
fld	st
jmp	short loc_641DCB77
fstp	st(1)
fmulp	st(4), st
fxch	st(3)
fst	[ebp+var_38]
fsubp	st(1), st
fld	st
xor	edx, edx
fld1
fxch	st(1)
jmp	short loc_641DCBBE
fstp	st
jmp	short loc_641DCBA8
fstp	st
fmul	ds:dbl_642644D0
fxch	st(4)
fmul	ds:flt_642644D8
inc	edx
cmp	edx, 64h
jz	short loc_641DCC02
fxch	st(4)
fldcw	[ebp+var_1C]
fist	[ebp+var_20]
fldcw	[ebp+var_1A]
mov	eax, [ebp+var_20]
mov	[ebp+var_20], eax
fild	[ebp+var_20]
fld	st(1)
fadd	st, st(3)
fucomp	st(1)
fnstsw	ax
sahf
jb	short loc_641DCBA2
fld	st(1)
fsub	st, st(3)
fxch	st(1)
fucom	st(1)
fnstsw	ax
fstp	st(1)
sahf
jb	short loc_641DCBA6
test	edx, edx
jnz	short loc_641DCC10
fstp	st(5)
fstp	st(2)
fstp	st
fxch	st(1)
fxch	st(2)
fsub	st(1), st
			
fadd	[ebp+var_38]
jmp	loc_641DCB77
fstp	st
fstp	st
fstp	st
fstp	st(1)
fldz
fld	st
jmp	short loc_641DCBFA
fstp	st(1)
fmulp	st(4), st
fxch	st(3)
fst	[ebp+var_30]
fsubp	st(1), st
fld	st
xor	edx, edx
fld1
fxch	st(1)
jmp	short loc_641DCC27
fxch	st(4)
fldcw	[ebp+var_1C]
fist	[ebp+var_20]
fldcw	[ebp+var_1A]
mov	eax, [ebp+var_20]
mov	[ebp+var_20], eax
fild	[ebp+var_20]
fld	st(1)
fadd	st, st(3)
fucomp	st(1)
fnstsw	ax
sahf
jb	short loc_641DCC57
fld	st(1)
fsub	st, st(3)
fxch	st(1)
fucom	st(1)
fnstsw	ax
fstp	st(1)
sahf
jnb	short loc_641DCC7B
fstp	st
jmp	short loc_641DCC59
fstp	st
fmul	ds:dbl_642644D0
fxch	st(4)
fmul	ds:flt_642644D8
inc	edx
cmp	edx, 64h
jnz	short loc_641DCC25
fstp	st
fstp	st
fstp	st
fstp	st(1)
fldz
fld	st
jmp	short loc_641DCC8B
test	edx, edx
jnz	short loc_641DCC93
fstp	st(5)
fstp	st(2)
fstp	st
fxch	st(1)
fxch	st(2)
fsub	st(1), st
			
fadd	[ebp+var_30]
jmp	loc_641DCBFA
fstp	st(1)
fmulp	st(4), st
fxch	st(3)
fst	[ebp+var_28]
fsubp	st(1), st
fld	st
xor	edx, edx
fld1
fxch	st(1)
jmp	short loc_641DCCAA
fxch	st(4)
fldcw	[ebp+var_1C]
fist	[ebp+var_20]
fldcw	[ebp+var_1A]
mov	eax, [ebp+var_20]
mov	[ebp+var_20], eax
fild	[ebp+var_20]
fld	st(1)
fadd	st, st(3)
fucomp	st(1)
fnstsw	ax
sahf
jb	short loc_641DCCDA
fld	st(1)
fsub	st, st(3)
fxch	st(1)
fucom	st(1)
fnstsw	ax
fstp	st(1)
sahf
jnb	short loc_641DCCFE
fstp	st
jmp	short loc_641DCCDC
fstp	st
fmul	ds:dbl_642644D0
fxch	st(4)
fmul	ds:flt_642644D8
inc	edx
cmp	edx, 64h
jnz	short loc_641DCCA8
fstp	st
fstp	st
fstp	st
fstp	st(1)
fldz
fld	st
jmp	short loc_641DCD0E
test	edx, edx
jnz	short loc_641DCD16
fstp	st(5)
fstp	st(2)
fstp	st
fxch	st(1)
fxch	st(2)
fsub	st(1), st
			
fadd	[ebp+var_28]
jmp	loc_641DCC8B
fstp	st(1)
fmulp	st(4), st
fxch	st(1)
fsub	st, st(3)
fld	st
xor	edx, edx
fld1
fxch	st(1)
jmp	short loc_641DCD2A
fxch	st(3)
fldcw	[ebp+var_1C]
fist	[ebp+var_20]
fldcw	[ebp+var_1A]
mov	eax, [ebp+var_20]
mov	[ebp+var_20], eax
fild	[ebp+var_20]
fld	st(1)
fadd	st, st(3)
fucomp	st(1)
fnstsw	ax
sahf
jb	short loc_641DCD5A
fld	st(1)
fsub	st, st(3)
fxch	st(1)
fucom	st(1)
fnstsw	ax
fstp	st(1)
sahf
jnb	short loc_641DCD7E
fstp	st
jmp	short loc_641DCD5C
fstp	st
fmul	ds:dbl_642644D0
fxch	st(3)
fmul	ds:flt_642644D8
inc	edx
cmp	edx, 64h
jnz	short loc_641DCD28
fstp	st
fstp	st
fstp	st
fstp	st
fldz
fld	st
jmp	short loc_641DCD8C
fstp	st(2)
fxch	st(1)
test	edx, edx
jnz	short loc_641DCD97
fstp	st(2)
fstp	st(2)
fsub	st(1), st
			
faddp	st(3), st
fxch	st(1)
fxch	st(2)
jmp	loc_641DCD0E
fstp	st(1)
fmulp	st(2), st
lea	eax, [ebp+var_10] 
fsub	st, st(1)
fstp	qword ptr [esp]	
fxch	st(1)
fstp	[ebp+var_88]
fxch	st(1)
fstp	[ebp+var_78]
fstp	[ebp+var_68]
call	_my_modf
fld	[ebp+var_68]
fadd	[ebp+var_10]
fld	[ebp+var_88]
fld	[ebp+var_78]
fxch	st(3)
fxch	st(1)
fxch	st(2)
jmp	short loc_641DCD8C
align 10h
push	ebp
mov	ebp, esp
push	edi
push	esi
push	ebx
sub	esp, 31Ch
mov	ebx, buffer
mov	esi, currlen
mov	edi, maxlen
fld	[ebp+fvalue.value]
mov	buffer,	[ebp+max]
test	eax, eax
js	loc_641DD5FC
mov	[ebp+var_2BC], max_0
cmp	max_0, 10h
jg	loc_641DD589
fldz
fucomp	st(1)
fnstsw	ax
test	ah, 45h
jnz	loc_641DD509
fchs
fstp	[ebp+var_2A0]
fld	[ebp+var_2A0]
mov	[ebp+signvalue], 2Dh
fld	st
xor	edx, edx
fld1
fld	st
fxch	st(2)
fnstcw	[ebp+var_2A2]
mov	ax, [ebp+var_2A2]
mov	ah, 0Ch
mov	[ebp+var_2A4], ax
jmp	short loc_641DCE6C
fstp	st
fxch	st(2)
jmp	short loc_641DCE54
align 10h
fstp	st
fxch	st(2)
fmul	fracpart:flt_642644D8
inc	edx
cmp	edx, 64h
jz	loc_641DD5CE
fxch	st(2)
fmul	fracpart:dbl_642644D0
fldcw	[ebp+var_2A4]
fist	[ebp+var_2A8]
fldcw	[ebp+var_2A2]
mov	eax, [ebp+var_2A8]
mov	[ebp+var_2A8], eax
fild	[ebp+var_2A8]
fld	st(1)
fadd	st, st(3)
fucomp	st(1)
fnstsw	ax
test	ah, 5
jnz	short loc_641DCE48
fld	st(1)
fsub	st, st(3)
fxch	st(1)
fucom	st(1)
fnstsw	ax
fstp	st(1)
test	ah, 5
jnz	short loc_641DCE50
fstp	st(2)
fstp	st
test	edx, edx
jnz	loc_641DD648
fstp	st(1)
mov	ecx, [ebp+var_2BC]
test	ecx, ecx
jz	loc_641DD5E4
mov	eax, [ebp+var_2BC]
fld1
fld	fracpart:flt_642644D8
fmul	st(1), st
dec	max_0
jnz	short loc_641DCED8
fstp	st
fxch	st(2)
fsub	st, st(1)
fmulp	st(2), st
fld	st(1)
fldcw	[ebp+var_2A4]
fistp	[ebp+var_2B0]
fldcw	[ebp+var_2A2]
mov	edx, dword ptr [ebp+var_2B0]
mov	ecx, dword ptr [ebp+var_2B0+4]
mov	dword ptr [ebp+var_2B0], edx
mov	dword ptr [ebp+var_2B0+4], ecx
fild	[ebp+var_2B0]
fsubp	st(2), st
fld	fracpart:flt_642644DC
fxch	st(2)
fucomp	st(2)
fnstsw	ax
fstp	st(1)
test	ah, 5
jnz	short loc_641DCF32
add	edx, 1
adc	ecx, 0
mov	dword ptr [ebp+var_2B0], edx
mov	dword ptr [ebp+var_2B0+4], ecx
fild	[ebp+var_2B0]
fld	st
mov	edx, [ebp+var_2BC]
test	edx, edx
jz	loc_641DD695
mov	eax, [ebp+var_2BC]
fld1
fld	fracpart:flt_642644D8
xchg	ax, ax
fmul	st(1), st
dec	max_0
jnz	short loc_641DCF64
fstp	st
fxch	st(1)
fucom	st(1)
fnstsw	ax
fstp	st(1)
test	ah, 5
jnz	short loc_641DCFB9
fstp	st(1)
mov	eax, [ebp+var_2BC]
test	eax, eax
jz	loc_641DD63F
mov	eax, [ebp+var_2BC]
fld1
fld	fracpart:flt_642644D8
xchg	ax, ax
fmul	st(1), st
dec	max_0
jnz	short loc_641DCF98
fstp	st
fxch	st(2)
fadd	fracpart:flt_642644CC
fxch	st(2)
fsubp	st(1), st
fstp	[ebp+var_2A0]
fld	[ebp+var_2A0]
jmp	short loc_641DCFBB
fstp	st
xor	ecx, ecx
fld1
nop
fld	fracpart:dbl_642644D0
fmulp	st(3), st
fld	st(2)
xor	edx, edx
fld	st(1)
fld1
fxch	st(2)
jmp	short loc_641DCFF4
fstp	st
jmp	short loc_641DCFDA
fstp	st
fld	fracpart:flt_642644D8
fmul	st(2), st
inc	edx
cmp	edx, 64h
jz	loc_641DD0A7
fstp	st
fmul	fracpart:dbl_642644D0
fldcw	[ebp+var_2A4]
fist	[ebp+var_2A8]
fldcw	[ebp+var_2A2]
mov	eax, [ebp+var_2A8]
mov	[ebp+var_2A8], eax
fild	[ebp+var_2A8]
fld	st(1)
fadd	st, st(4)
fucomp	st(1)
fnstsw	ax
test	ah, 5
jnz	short loc_641DCFD4
fld	st(1)
fsub	st, st(4)
fxch	st(1)
fucom	st(1)
fnstsw	ax
fstp	st(1)
test	ah, 5
jnz	short loc_641DCFD8
fstp	st(3)
fstp	st
fxch	st(1)
test	edx, edx
jnz	loc_641DD490
fstp	st(1)
fsub	st(3), st
fxch	st(3)
fadd	fracpart:dbl_642644E0
fmul	fracpart:flt_642644D8
fldcw	[ebp+var_2A4]
fistp	[ebp+var_2A8]
fldcw	[ebp+var_2A2]
mov	eax, [ebp+var_2A8]
mov	al, byte ptr fracpart:a0123456789ab_0[eax] 
mov	[ebp+iplace+iconvert], al
lea	edx, [iplace+1]
fldz
fxch	st(3)
fucom	st(3)
fnstsw	ax
fstp	st(3)
and	ah, 45h
cmp	ah, 40h
jz	loc_641DD6B3
cmp	iplace,	137h
jz	loc_641DD5ED
mov	ecx, iplace
jmp	loc_641DCFC0
fstp	st(4)
fstp	st
fstp	st
fstp	st
fxch	st(2)
fadd	fracpart:dbl_642644E0
fmulp	st(2), st
fxch	st(1)
fldcw	[ebp+var_2A4]
fistp	[ebp+var_2A8]
fldcw	[ebp+var_2A2]
mov	eax, [ebp+var_2A8]
mov	al, byte ptr fracpart:a0123456789ab_0[eax] 
mov	[ebp+iplace+iconvert], al
lea	edx, [iplace+1]
mov	[ebp+var_2C0], iplace
cmp	iplace,	137h
jz	loc_641DD5F1
mov	iplace,	[ebp+var_2C0]
mov	[ebp+edx+iconvert], 0
fldz
fxch	st(1)
fucom	st(1)
fnstsw	ax
fstp	st(1)
and	ah, 45h
cmp	ah, 40h
jz	loc_641DD52E
mov	[ebp+var_2B4], 0
fld1
lea	iplace,	[ebp+fconvert]
mov	[ebp+var_2B8], buffer
xor	buffer,	buffer
nop
fld	fracpart:dbl_642644D0
fmulp	st(2), st
fld	st(1)
xor	edx, edx
fld	st(1)
fld1
fxch	st(2)
jmp	short loc_641DD168
fstp	st
jmp	short loc_641DD14E
fstp	st
fld	fracpart:flt_642644D8
fmul	st(2), st
inc	edx
cmp	edx, 64h
jz	loc_641DD218
fstp	st
fmul	fracpart:dbl_642644D0
fldcw	[ebp+var_2A4]
fist	[ebp+var_2A8]
fldcw	[ebp+var_2A2]
mov	eax, [ebp+var_2A8]
mov	[ebp+var_2A8], eax
fild	[ebp+var_2A8]
fld	st(1)
fadd	st, st(4)
fucomp	st(1)
fnstsw	ax
test	ah, 5
jnz	short loc_641DD148
fld	st(1)
fsub	st, st(4)
fxch	st(1)
fucom	st(1)
fnstsw	ax
fstp	st(1)
test	ah, 5
jnz	short loc_641DD14C
fstp	st(3)
fstp	st
fxch	st(1)
test	edx, edx
jnz	loc_641DD42B
fstp	st(1)
fsub	st(2), st
fxch	st(2)
fadd	fracpart:dbl_642644E0
fmul	fracpart:flt_642644D8
fldcw	[ebp+var_2A4]
fistp	[ebp+var_2A8]
fldcw	[ebp+var_2A2]
mov	eax, [ebp+var_2A8]
mov	al, byte ptr fracpart:a0123456789ab_0[eax] 
mov	[ecx+fplace], al
lea	edx, [fplace+1]
fldz
fxch	st(2)
fucom	st(2)
fnstsw	ax
fstp	st(2)
and	ah, 45h
cmp	ah, 40h
jz	loc_641DD6C2
cmp	fplace,	137h
jz	loc_641DD69E
mov	ebx, fplace
jmp	loc_641DD134
align 4
fstp	st(4)
fstp	st
fstp	st
fstp	st
fxch	st(1)
mov	[ebp+var_2B4], fplace
mov	fplace,	[ebp+var_2B8]
fadd	fracpart:dbl_642644E0
fmulp	st(1), st
fldcw	[ebp+var_2A4]
fistp	[ebp+var_2A8]
fldcw	[ebp+var_2A2]
mov	eax, [ebp+var_2A8]
mov	al, byte ptr fracpart:a0123456789ab_0[eax] 
mov	edx, [ebp+var_2B4]
mov	[ebp+edx+fconvert], al
inc	edx
cmp	fplace,	137h
jz	short loc_641DD270
mov	[ebp+var_2B4], fplace
mov	fplace,	[ebp+var_2B4]
mov	[ebp+edx+fconvert], 0
mov	edx, [ebp+var_2BC]
not	edx
add	edx, [ebp+min]
xor	eax, eax
cmp	[ebp+signvalue], 0
setnz	al
sub	padlen,	eax
sub	padlen,	[ebp+var_2C0]
mov	eax, [ebp+var_2BC]
sub	eax, [ebp+var_2B4]
mov	[ebp+var_2C8], eax
jns	short loc_641DD2BB
mov	[ebp+var_2C8], 0
mov	[ebp+var_2B8], padlen
test	padlen,	padlen
js	loc_641DD57A
test	byte ptr [ebp+flags], 1
jz	short loc_641DD2D5
neg	[ebp+var_2B8]
test	byte ptr [ebp+flags], 10h
jz	short loc_641DD313
mov	iplace,	[ebp+var_2B8]
test	ecx, ecx
jle	short loc_641DD33E
mov	eax, [ebp+signvalue]
test	eax, eax
jz	loc_641DD60B
mov	eax, [currlen]
cmp	maxlen,	eax
ja	loc_641DD62F
inc	eax
mov	[currlen], eax
dec	[ebp+var_2B8]
jz	short loc_641DD355
mov	padlen,	[ebp+var_2B8]
jmp	loc_641DD614
mov	padlen,	[ebp+var_2B8]
test	edx, edx
jle	short loc_641DD33E
mov	eax, [currlen]
mov	edx, [ebp+var_2B8]
lea	currlen, [currlen+0]
cmp	maxlen,	eax
jbe	short loc_641DD332
mov	byte ptr [buffer+eax], 20h
mov	eax, [currlen]
inc	eax
mov	[currlen], eax
dec	padlen
jnz	short loc_641DD328
mov	[ebp+var_2B8], padlen
mov	iplace,	[ebp+signvalue]
test	ecx, ecx
jz	short loc_641DD355
mov	eax, [currlen]
cmp	maxlen,	eax
ja	loc_641DD5A3
inc	eax
mov	[currlen], eax
mov	padlen,	[ebp+var_2C0]
test	edx, edx
jz	short loc_641DD38C
mov	eax, [currlen]
lea	edx, [ebp+iconvert]
mov	[ebp+var_30C], edx
add	edx, [ebp+var_2C0]
nop
mov	cl, [edx-1]
cmp	maxlen,	eax
jbe	short loc_641DD380
mov	[buffer+eax], cl
mov	eax, [currlen]
inc	eax
mov	[currlen], eax
dec	edx
cmp	edx, [ebp+var_30C]
jnz	short loc_641DD374
mov	eax, [ebp+var_2BC]
test	eax, eax
jz	short loc_641DD3FC
mov	eax, [currlen]
cmp	maxlen,	eax
ja	loc_641DD598
inc	eax
mov	[currlen], eax
mov	edx, [ebp+var_2C8]
test	edx, edx
jz	short loc_641DD3C4
mov	edx, [ebp+var_2C8]
nop
cmp	maxlen,	eax
jbe	short loc_641DD3BE
mov	byte ptr [buffer+eax], 30h
mov	eax, [currlen]
inc	eax
mov	[currlen], eax
dec	zpadlen
jnz	short loc_641DD3B4
mov	eax, [ebp+var_2B4]
test	eax, eax
jz	short loc_641DD3FC
mov	eax, [currlen]
lea	zpadlen, [ebp+fconvert]
mov	[ebp+var_310], edx
add	edx, [ebp+var_2B4]
xchg	ax, ax
mov	cl, [edx-1]
cmp	maxlen,	eax
jbe	short loc_641DD3F0
mov	[buffer+eax], cl
mov	eax, [currlen]
inc	eax
mov	[currlen], eax
dec	edx
cmp	edx, [ebp+var_310]
jnz	short loc_641DD3E4
mov	ecx, [ebp+var_2B8]
test	ecx, ecx
jz	short loc_641DD420
mov	eax, [currlen]
mov	zpadlen, [ebp+var_2B8]
xchg	ax, ax
cmp	maxlen,	eax
jbe	short loc_641DD41A
mov	byte ptr [buffer+eax], 20h
mov	eax, [currlen]
inc	eax
mov	[currlen], eax
inc	padlen
jnz	short loc_641DD410
add	esp, 31Ch
pop	buffer
pop	currlen
pop	maxlen
leave
retn
fmulp	st(1), st
fld	st(2)
fsub	st, st(1)
fstp	qword ptr [esp]	
lea	eax, [ebp+iptr]	
mov	[ebp+var_2EC], ecx
fstp	[ebp+var_2D8]
fxch	st(1)
fstp	[ebp+var_2F8]
fstp	[ebp+var_2E8]
call	_my_modf
fstp	st
fld	[ebp+var_2D8]
fadd	[ebp+iptr]
fnstcw	[ebp+var_2A2]
mov	ax, [ebp+var_2A2]
mov	ah, 0Ch
mov	[ebp+var_2A4], ax
fld	[ebp+var_2E8]
fld	[ebp+var_2F8]
fxch	st(2)
mov	ecx, [ebp+var_2EC]
jmp	loc_641DD1BA
fmulp	st(1), st
fld	st(3)
fsub	st, st(1)
fstp	qword ptr [esp]	
fxch	st(2)
lea	eax, [ebp+iptr]	
mov	[ebp+var_2EC], iplace
fstp	[ebp+var_2D8]
fxch	st(2)
fstp	[ebp+var_2F8]
fxch	st(1)
fstp	[ebp+var_2E8]
fstp	[ebp+var_308]
call	_my_modf
fstp	st
fld	[ebp+var_308]
fadd	[ebp+iptr]
fnstcw	[ebp+var_2A2]
mov	ax, [ebp+var_2A2]
mov	ah, 0Ch
mov	[ebp+var_2A4], ax
fld	[ebp+var_2E8]
fld	[ebp+var_2F8]
fld	[ebp+var_2D8]
fxch	st(2)
fxch	st(1)
fxch	st(3)
mov	ecx, [ebp+var_2EC]
jmp	loc_641DD046
fstp	[ebp+var_2A0]
fld	[ebp+var_2A0]
test	byte ptr [ebp+flags], 2
jz	loc_641DD5B3
mov	[ebp+signvalue], 2Bh
jmp	loc_641DCE26
fstp	st
mov	[ebp+fconvert],	0
mov	edx, [ebp+var_2BC]
not	edx
add	edx, [ebp+min]
xor	eax, eax
cmp	[ebp+signvalue], 0
setnz	al
sub	padlen,	eax
sub	padlen,	[ebp+var_2C0]
mov	eax, [ebp+var_2BC]
mov	[ebp+var_2C8], eax
mov	[ebp+var_2B4], 0
mov	[ebp+var_2B8], padlen
test	padlen,	padlen
jns	loc_641DD2C9
mov	[ebp+var_2B8], 0
jmp	loc_641DD2C9
mov	[ebp+var_2BC], 10h
jmp	loc_641DCDFF
mov	byte ptr [buffer+eax], 2Eh
mov	eax, [currlen]
jmp	loc_641DD3A0
mov	dl, byte ptr [ebp+signvalue]
mov	[buffer+eax], dl
mov	eax, [currlen]
jmp	loc_641DD352
mov	eax, [ebp+flags]
and	eax, 4
cmp	eax, 1
sbb	eax, eax
not	eax
and	eax, 20h
mov	[ebp+signvalue], eax
jmp	loc_641DCE26
fstp	st
fstp	st
fstp	st
fldz
mov	ecx, [ebp+var_2BC]
test	ecx, ecx
jnz	loc_641DCECA
fld1
fxch	st(2)
jmp	loc_641DCEE1
fstp	st
fstp	st(1)
mov	[ebp+var_2C0], ecx
jmp	loc_641DD0F5
mov	[ebp+var_2BC], 6
jmp	loc_641DCDFF
mov	eax, [currlen]
mov	padlen,	[ebp+var_2B8]
nop
cmp	maxlen,	eax
jbe	short loc_641DD61E
mov	byte ptr [buffer+eax], 30h
mov	eax, [currlen]
inc	eax
mov	[currlen], eax
dec	padlen
jnz	short loc_641DD614
mov	[ebp+var_2B8], padlen
jmp	loc_641DD355
mov	dl, byte ptr [ebp+signvalue]
mov	[buffer+eax], dl
mov	eax, [currlen]
jmp	loc_641DD2FD
fld1
fxch	st(2)
jmp	loc_641DCFA1
fmulp	st(1), st
lea	eax, [ebp+iptr]	
fld	st(1)
fsub	st, st(1)
fstp	qword ptr [esp]	
fxch	st(1)
fstp	[ebp+var_2D8]
fstp	[ebp+var_308]
call	_my_modf
fstp	st
fld	[ebp+var_308]
fadd	[ebp+iptr]
fnstcw	[ebp+var_2A2]
mov	ax, [ebp+var_2A2]
mov	ah, 0Ch
mov	[ebp+var_2A4], ax
fld	[ebp+var_2D8]
fxch	st(1)
jmp	loc_641DCEBC
fld1
fxch	st(1)
jmp	loc_641DCF6D
fstp	st
fstp	st
mov	[ebp+var_2B4], ebx
mov	ebx, [ebp+var_2B8]
jmp	loc_641DD270
fstp	st
fstp	st(1)
mov	[ebp+var_2C0], iplace
jmp	loc_641DD0E9
fstp	st
fstp	st
mov	[ebp+var_2B4], ebx
mov	ebx, [ebp+var_2B8]
jmp	loc_641DD262
align 4
			
push	ebp
mov	ebp, esp
push	edi
push	esi
push	ebx
sub	esp, 6Ch
mov	[ebp+buffer], buffer
mov	[ebp+maxlen], maxlen
mov	[ebp+currlen], 0
mov	dl, [format]
lea	ebx, [format+1]
mov	edi, [ebp+args_in]
mov	[ebp+cflags], 0
mov	[ebp+flags], 0
xor	buffer,	buffer
mov	ecx, 0FFFFFFFFh
mov	[ebp+min], 0
mov	[ebp+max], max
test	dl, dl
jz	short loc_641DD72C
lea	esi, [esi+0]
cmp	state, 6	
jbe	short loc_641DD75C
mov	esi, args	
mov	args, esi
lea	esi, [esi+0]
test	dl, dl
jnz	short loc_641DD71C
mov	format,	[ebp+maxlen]
test	ebx, ebx
jz	short loc_641DD750
mov	state, [ebp+currlen]
mov	ch_0, [ebp+maxlen]
dec	edx
cmp	edx, eax
ja	loc_641DD8C4
mov	edx, [ebp+buffer]
mov	currlen_0, [ebp+maxlen]
mov	byte ptr [edx+eax-1], 0
lea	esi, [esi+0]
mov	state, [ebp+currlen]
add	esp, 6Ch
pop	ebx
pop	esi
pop	args
leave
retn
align 4
jmp	ds:off_6426431C[state*4] 
align 4
			
cmp	dl, 68h		
jz	loc_641DD980
cmp	dl, 6Ch
jz	loc_641DD95C
cmp	dl, 4Ch
jz	loc_641DD8D4
mov	state, 6
jmp	short loc_641DD721 
align 4
			
movzx	esi, dl		
sub	ch_0, 30h
cmp	esi, 9
ja	loc_641DD884
mov	max, [ebp+max]
test	max, max
js	loc_641DDCF4
lea	max, [max+max*4]
movsx	edx, dl
lea	ch_0, [ch_0+ecx*2-30h]
mov	[ebp+max], edx
mov	dl, [format]
inc	format
mov	esi, args
mov	args, esi
jmp	loc_641DD728
align 4
			
cmp	dl, 2Eh		
jz	loc_641DD948
mov	esi, args
mov	state, 5
mov	args, esi
jmp	loc_641DD728
align 4
			
movzx	esi, dl		
sub	ch_0, 30h
cmp	esi, 9
ja	loc_641DD8A4
mov	max, [ebp+min]
lea	esi, [ecx+ecx*4]
movsx	edx, dl
lea	ch_0, [ch_0+esi*2-30h]
mov	[ebp+min], edx
mov	dl, [format]
inc	format
mov	esi, args
mov	args, esi
jmp	loc_641DD728
align 10h
			
lea	esi, [ch_0-20h]	
mov	max, esi
cmp	cl, 10h		
jbe	short loc_641DD874
			
mov	state, 2	
jmp	loc_641DD721	
			
sub	ch_0, 25h
cmp	dl, 53h		
jbe	short loc_641DD848
			
mov	esi, args	
xchg	ax, ax
mov	dl, [format]
inc	format
mov	[ebp+cflags], 0
mov	[ebp+flags], 0
xor	state, state
mov	[ebp+max], 0FFFFFFFFh
mov	[ebp+min], 0
mov	edi, args
jmp	loc_641DD728
movzx	edx, dl
jmp	ds:off_64264338[edx*4] 
align 4
			
cmp	dl, 25h		
jz	loc_641DD93C
mov	max, [ebp+currlen]
cmp	[ebp+maxlen], ecx
ja	short loc_641DD8BC
lea	esi, [ecx+1]
mov	[ebp+currlen], esi
mov	dl, [format]
inc	format
jmp	loc_641DD721	
align 4
and	esi, 0FFh
jmp	ds:off_64264488[esi*4] 
align 4
cmp	dl, 2Ah
jnz	loc_641DD7C5
lea	esi, [args+4]
mov	edi, [edi]
mov	[ebp+max], edi
mov	dl, [format]
inc	format
mov	state, 5
mov	edi, args
jmp	loc_641DD728
cmp	dl, 2Ah
jz	loc_641DD998
mov	esi, args
mov	state, 3
mov	args, esi
jmp	loc_641DD728
align 4
mov	esi, [ebp+buffer]
mov	[esi+ecx], dl
jmp	short loc_641DD865
mov	args, [ebp+buffer]
mov	byte ptr [edi+currlen_0], 0
add	esp, 6Ch
pop	ebx
pop	args
pop	edi
leave
retn
align 4
mov	dl, [format]
inc	format
mov	esi, args
mov	[ebp+cflags], 3
mov	state, 6
mov	args, esi
jmp	loc_641DD728
			
or	[ebp+flags], 8	
mov	dl, [format]
inc	format
mov	esi, args
mov	args, esi
jmp	loc_641DD728
			
or	[ebp+flags], 4	
mov	dl, [format]
inc	format
mov	esi, args
mov	args, esi
jmp	loc_641DD728
			
or	[ebp+flags], 10h 
mov	dl, [format]
inc	format
mov	esi, args
mov	args, esi
jmp	loc_641DD728
			
or	[ebp+flags], 1	
mov	dl, [format]
inc	format
mov	esi, args
mov	args, esi
jmp	loc_641DD728
			
or	[ebp+flags], 2	
mov	dl, [format]
inc	format
mov	esi, args
mov	args, esi
jmp	loc_641DD728
mov	state, 1
jmp	loc_641DD86B
align 4
mov	dl, [format]
inc	format
mov	esi, args
mov	state, 4
mov	args, esi
jmp	loc_641DD728
align 4
mov	dl, [format]
inc	format
cmp	dl, 6Ch
jz	loc_641DDCFB
mov	esi, args
mov	[ebp+cflags], 2
mov	state, 6
mov	args, esi
jmp	loc_641DD728
align 10h
mov	dl, [format]
inc	format
mov	esi, args
mov	[ebp+cflags], 1
mov	state, 6
mov	args, esi
jmp	loc_641DD728
lea	esi, [args+4]
mov	edi, [edi]
mov	[ebp+min], edi
mov	dl, [format]
inc	format
mov	state, 3
mov	edi, args
jmp	loc_641DD728
			
or	[ebp+flags], 20h
			
cmp	[ebp+cflags], 3	
jz	loc_641DDD7A
lea	esi, [args+8]
fld	qword ptr [edi]
mov	max, [ebp+flags]
mov	[esp+14h], ecx	
mov	args, [ebp+max]
mov	[esp+10h], edi	
mov	state, [ebp+min]
mov	[esp+0Ch], eax	
fstp	tbyte ptr [esp]
mov	max, [ebp+maxlen] 
lea	edx, [ebp+currlen] 
mov	eax, [ebp+buffer] 
call	_fmtfp
jmp	loc_641DD820
			
or	[ebp+flags], 20h
			
cmp	[ebp+cflags], 1	
jz	short loc_641DDA07
cmp	[ebp+cflags], 2
jz	short loc_641DDA07
cmp	[ebp+cflags], 4
jz	loc_641DDD8E
lea	esi, [args+4]
mov	state, [edi]
mov	args, [ebp+flags]
or	edi, 40h
mov	[esp+10h], edi	
mov	max, [ebp+max]
mov	[esp+0Ch], ecx	
mov	edi, [ebp+min]
mov	[esp+8], edi	
mov	dword ptr [esp+4], 10h 
mov	[esp], eax
mov	max, [ebp+maxlen] 
lea	edx, [ebp+currlen] 
mov	eax, [ebp+buffer] 
call	_fmtint
jmp	loc_641DD820
			
or	[ebp+flags], 20h
			
cmp	[ebp+cflags], 3	
jz	loc_641DDD84
lea	esi, [args+8]
fld	qword ptr [edi]
mov	args, [ebp+flags]
mov	[esp+14h], edi
mov	state, [ebp+max]
mov	[esp+10h], eax
mov	edx, [ebp+min]
mov	[esp+0Ch], edx
jmp	loc_641DD9D7
			
cmp	[ebp+cflags], 1
jz	loc_641DDD98
cmp	[ebp+cflags], 2
jz	loc_641DDD6B
cmp	[ebp+cflags], 4
jz	loc_641DDDDF
lea	esi, [args+4]
mov	state, [edi]
mov	edx, [ebp+currlen]
mov	[eax], edx
jmp	loc_641DD820
			
inc	format
mov	esi, args
jmp	loc_641DD820
			
cmp	[ebp+cflags], 3	
jz	loc_641DDDA8
lea	esi, [args+8]
fld	qword ptr [edi]
mov	state, [ebp+flags]
mov	[esp+14h], eax
mov	edx, [ebp+max]
mov	[esp+10h], edx
mov	max, [ebp+min]
mov	[esp+0Ch], ecx
jmp	loc_641DD9D7
			
mov	state, [ebp+currlen]
cmp	[ebp+maxlen], eax
jbe	short loc_641DDADC
mov	esi, [ebp+buffer]
mov	byte ptr [esi+eax], 25h
inc	eax
mov	[ebp+currlen], eax
jmp	loc_641DD81C	
			
lea	esi, [args+4]
mov	edx, [edi]
mov	state, [ebp+currlen]
cmp	[ebp+maxlen], eax
jbe	short loc_641DDAF8
mov	max, [ebp+buffer]
mov	[ecx+eax], dl
inc	eax
mov	[ebp+currlen], eax
jmp	loc_641DD820
			
cmp	[ebp+cflags], 1
jz	loc_641DDCBF
cmp	[ebp+cflags], 2
jz	loc_641DDCBF
cmp	[ebp+cflags], 4
jnz	loc_641DDCBF
lea	esi, [args+8]
mov	state, [edi]
jmp	loc_641DDCC4
			
cmp	[ebp+cflags], 1
jz	loc_641DDC95
cmp	[ebp+cflags], 2
jz	loc_641DDC95
cmp	[ebp+cflags], 4
jnz	loc_641DDC95
lea	esi, [args+8]
mov	state, [edi]
jmp	loc_641DDC9A
			
lea	esi, [args+4]
mov	edi, [edi]
mov	[ebp+cflags], edi
test	edi, edi
jz	loc_641DDDD3
cmp	[ebp+max], 0FFFFFFFFh
jz	loc_641DDDB2
mov	edi, [ebp+min]
test	edi, edi
jle	short loc_641DDB84
mov	max, [ebp+max]
test	ecx, ecx
js	short loc_641DDB84
mov	state, [ebp+min]
cmp	[ebp+max], eax
jge	short loc_641DDB84
mov	[ebp+max], eax
mov	edx, [ebp+cflags]
movzx	edi, byte ptr [edx]
mov	max, edi
test	cl, cl
jz	loc_641DDDF5
xor	state, state
mov	ecx, [ebp+max]
mov	edx, [ebp+cflags]
inc	eax
cmp	byte ptr [strvalue+eax], 0
jnz	short loc_641DDB9C
mov	[ebp+max], max
mov	strvalue, [ebp+min]
sub	edx, eax
mov	[ebp+min], edx
js	loc_641DDDC7
test	byte ptr [ebp+flags], 1
jz	loc_641DDD13
neg	[ebp+min]
xor	eax, eax
mov	max, edi
test	cl, cl
jz	short loc_641DDC0B
cmp	[ebp+max], eax
jle	short loc_641DDC0B
mov	edx, [ebp+currlen]
mov	[ebp+flags], format
mov	[ebp+var_4C], args
mov	args, [ebp+max]
mov	ecx, edi
mov	format,	[ebp+cflags]
mov	edi, max
jmp	short loc_641DDBE8
align 4
cmp	max, eax
jle	short loc_641DDC02
inc	strvalue
cmp	[ebp+maxlen], edx
jbe	short loc_641DDBF7
mov	esi, [ebp+buffer]
mov	[esi+edx], cl
mov	edx, [ebp+currlen]
inc	edx
mov	[ebp+currlen], edx
inc	eax
mov	cl, [strvalue]
test	cl, cl
jnz	short loc_641DDBE4
mov	strvalue, [ebp+flags]
mov	esi, [ebp+var_4C]
mov	[ebp+max], max
mov	max, [ebp+min]
test	edi, edi
jns	loc_641DD820
cmp	[ebp+max], eax
jle	loc_641DD820
mov	edx, [ebp+currlen]
mov	edi, [ebp+min]
mov	[ebp+min], format
mov	ecx, [ebp+max]
jmp	short loc_641DDC35
align 10h
inc	eax
cmp	max, eax
jle	short loc_641DDC4B
cmp	[ebp+maxlen], edx
jbe	short loc_641DDC44
mov	format,	[ebp+buffer]
mov	byte ptr [ebx+edx], 20h
mov	edx, [ebp+currlen]
inc	edx
mov	[ebp+currlen], edx
inc	edi
js	short loc_641DDC30
mov	format,	[ebp+min]
jmp	loc_641DD820
			
lea	esi, [args+4]
mov	state, [ebp+flags]
or	al, 0C0h
mov	[esp+10h], eax
mov	eax, [ebp+max]
mov	[esp+0Ch], eax
mov	edx, [ebp+min]
mov	[esp+8], edx
mov	dword ptr [esp+4], 10h
mov	eax, [edi]
jmp	loc_641DDA2C
			
cmp	[ebp+cflags], 1
jz	short loc_641DDCE6
cmp	[ebp+cflags], 2
jz	short loc_641DDCE6
cmp	[ebp+cflags], 4
jnz	short loc_641DDCE6
lea	esi, [args+8]
mov	state, [edi]
jmp	short loc_641DDCEB
lea	esi, [args+4]
mov	state, [edi]
mov	args, [ebp+flags]
or	edi, 40h
mov	[esp+10h], edi
mov	max, [ebp+max]
mov	[esp+0Ch], ecx
mov	edi, [ebp+min]
mov	[esp+8], edi
mov	dword ptr [esp+4], 8
jmp	loc_641DDA2C
lea	esi, [args+4]
mov	state, [edi]
mov	args, [ebp+flags]
mov	[esp+10h], edi
mov	max, [ebp+max]
mov	[esp+0Ch], ecx
mov	edi, [ebp+min]
mov	[esp+8], edi
mov	dword ptr [esp+4], 0Ah
jmp	loc_641DDA2C
lea	esi, [args+4]
mov	state, [edi]
mov	args, [ebp+flags]
or	edi, 40h
jmp	short loc_641DDCC7
align 4
xor	max, max
jmp	loc_641DD7A2
mov	dl, [format]
inc	format
mov	esi, args
mov	[ebp+cflags], 4
mov	state, 6
mov	args, esi
jmp	loc_641DD728
mov	edx, [ebp+min]
test	edx, edx
jle	loc_641DDDFC
mov	eax, [ebp+max]
test	eax, eax
jle	loc_641DDDFC
mov	edx, [ebp+currlen]
xor	eax, eax
mov	edi, [ebp+min]
mov	[ebp+flags], format
mov	max, [ebp+max]
jmp	short loc_641DDD40
align 4
cmp	max, eax
jle	short loc_641DDD57
cmp	[ebp+maxlen], edx
jbe	short loc_641DDD4F
mov	format,	[ebp+buffer]
mov	byte ptr [ebx+edx], 20h
mov	edx, [ebp+currlen]
inc	edx
mov	[ebp+currlen], edx
inc	eax
dec	edi
jnz	short loc_641DDD3C
mov	[ebp+min], edi
mov	format,	[ebp+flags]
mov	[ebp+max], max
mov	edx, [ebp+cflags]
movzx	edi, byte ptr [edx]
jmp	loc_641DDBC3
lea	esi, [args+4]
mov	edx, [edi]
mov	state, [ebp+currlen]
mov	[edx], eax
jmp	loc_641DD820
lea	esi, [args+0Ch]
fld	tbyte ptr [edi]
jmp	loc_641DD9C2
lea	esi, [args+0Ch]
fld	tbyte ptr [edi]
jmp	loc_641DDA55
lea	esi, [args+8]
mov	state, [edi]
jmp	loc_641DDA0C
lea	esi, [args+4]
mov	edx, [edi]
mov	state, [ebp+currlen]
mov	[edx], ax
jmp	loc_641DD820
lea	esi, [args+0Ch]
fld	tbyte ptr [edi]
jmp	loc_641DDAB3
xor	state, state
mov	max, [ebp+max]
mov	edi, [ebp+cflags]
repne scasb
not	ecx
dec	ecx
mov	[ebp+max], ecx
jmp	loc_641DDB6B
mov	[ebp+min], 0
jmp	loc_641DDBB4
mov	[ebp+cflags], offset aNull
jmp	loc_641DDB61
lea	esi, [args+4]
mov	state, [edi]
mov	max, [ebp+currlen]
mov	[eax], ecx
mov	dword ptr [eax+4], 0
jmp	loc_641DD820
xor	state, state
jmp	loc_641DDBA6
xor	eax, eax
jmp	loc_641DDBC3
align 4
public _silc_vsnprintf
			
push	ebp
mov	ebp, esp
push	ebx
sub	esp, 4
mov	eax, [ebp+str]
mov	edx, [ebp+count]
mov	ecx, [ebp+fmt]
mov	ebx, [ebp+args]
test	eax, eax
jz	short loc_641DDE1E
mov	byte ptr [str_0], 0
mov	[ebp+str], args_0
pop	args_0
pop	ebx
leave
jmp	_dopr
align 4
public _silc_snprintf
			
push	ebp
mov	ebp, esp
sub	esp, 18h
mov	eax, [ebp+str]	
lea	edx, [ebp+args_in]
test	eax, eax
jz	short loc_641DDE3F
mov	byte ptr [str_0], 0
mov	[esp], edx	
mov	ecx, [ebp+fmt]	
mov	edx, [ebp+count] 
call	_dopr
leave
retn
align 10h
public _silc_vasprintf
push	ebp
mov	ebp, esp
push	edi
push	esi
push	ebx
sub	esp, 1Ch
mov	esi, [ebp+format]
mov	ebx, [ebp+ap]
mov	[esp], ebx	
mov	ecx, esi	
xor	edx, edx	
xor	eax, eax	
call	_dopr
test	eax, eax
jg	short loc_641DDE7C
			
add	esp, 1Ch
pop	ap_0
pop	format_0
pop	edi
leave
retn
align 4
lea	edi, [ret+1]
mov	[esp], edi	
call	_silc_malloc
mov	edx, [ebp+ptr]
mov	[edx], eax
test	eax, eax
jz	short loc_641DDEA6
mov	[esp+0Ch], ap_0	
mov	[esp+8], format_0 
mov	[esp+4], edi	
mov	[esp], eax	
call	_silc_vsnprintf
jmp	short loc_641DDE71
mov	eax, 0FFFFFFFFh
jmp	short loc_641DDE71
align 10h
public _silc_asprintf
push	ebp
mov	ebp, esp
sub	esp, 18h
mov	ret, [ebp+ptr]
mov	dword ptr [ret], 0
lea	edx, [ebp+ap]
mov	[esp+8], edx	
mov	edx, [ebp+format]
mov	[esp+4], edx	
mov	[esp], ret	
call	_silc_vasprintf
leave
retn
align 4
push	ebp
mov	ebp, esp
mov	eax, [ebp+context]
or	byte ptr [eax+14h], 2
leave
retn
public _silc_socket_stream_is_udp
			
push	ebp
mov	ebp, esp
mov	eax, [ebp+stream]
mov	edx, [ebp+connected]
test	eax, eax
jz	short loc_641DDEF9
cmp	dword ptr [stream_0], offset _silc_socket_udp_stream_ops
jz	short loc_641DDF00
xor	stream_0, stream_0
leave
retn
align 10h
test	connected_0, connected_0
jz	short loc_641DDF0E
mov	al, [stream_0+24h]
shr	al, 1
and	eax, 1
mov	[connected_0], al
mov	al, 1
leave
retn
align 4
public _silc_socket_stream_get_info
push	ebp
mov	ebp, esp
push	edi
push	esi
push	ebx
mov	eax, [ebp+stream]
mov	ecx, [ebp+sock]
mov	edi, [ebp+hostname]
mov	esi, [ebp+ip_0]
mov	ebx, [ebp+port]
test	eax, eax
jz	short loc_641DDF3F
mov	edx, [stream_0]
cmp	edx, offset _silc_socket_stream_ops
jz	short loc_641DDF48
cmp	edx, offset _silc_socket_udp_stream_ops
jz	short loc_641DDF48
			
xor	eax, eax
pop	port_0
pop	ip_0_0
pop	hostname_0
leave
retn
align 4
			
test	sock_0,	sock_0
jz	short loc_641DDF51
mov	edx, [stream_0+8]
mov	[sock_0], edx
test	port_0,	port_0
jz	short loc_641DDF60
mov	edx, [stream_0+14h]
test	dx, dx
jz	short loc_641DDF3F
mov	[port_0], dx
test	ip_0_0,	ip_0_0
jz	short loc_641DDF6D
mov	edx, [stream_0+10h]
test	edx, edx
jz	short loc_641DDF3F
mov	[ip_0_0], edx
test	hostname_0, hostname_0
jz	short loc_641DDF7A
mov	stream_0, [stream_0+0Ch]
test	eax, eax
jz	short loc_641DDF3F
mov	[hostname_0], eax
mov	al, 1
pop	port_0
pop	ip_0_0
pop	hostname_0
leave
retn
align 4
public _silc_socket_stream_get_error
push	ebp
mov	ebp, esp
mov	eax, [ebp+stream]
test	eax, eax
jz	short loc_641DDFA0
mov	edx, [stream_0]
cmp	edx, offset _silc_socket_stream_ops
jz	short loc_641DDFA4
cmp	edx, offset _silc_socket_udp_stream_ops
jz	short loc_641DDFA4
xor	stream_0, stream_0
leave
retn
			
movzx	stream_0, word ptr [stream_0+16h]
leave
retn
align 4
public _silc_socket_stream_get_schedule
			
push	ebp
mov	ebp, esp
mov	eax, [ebp+stream]
test	eax, eax
jz	short loc_641DDFD0
mov	edx, [stream_0]
cmp	edx, offset _silc_socket_stream_ops
jnz	short loc_641DDFC8
mov	stream_0, [stream_0+4]
leave
retn
align 4
cmp	edx, offset _silc_socket_udp_stream_ops
jz	short loc_641DDFC0
xor	stream_0, stream_0
leave
retn
public _silc_socket_udp_stream_create
push	ebp
mov	ebp, esp
push	esi
push	ebx
sub	esp, 10h
movzx	esi, [ebp+ipv6]
mov	bl, [ebp+connected]
mov	dword ptr [esp+4], 28h 
mov	dword ptr [esp], 1 
call	_silc_calloc
test	eax, eax
jz	short loc_641DE022
mov	dword ptr [eax], offset	_silc_socket_udp_stream_ops
mov	edx, [ebp+sock]
mov	[eax+8], edx
mov	edx, [ebp+schedule]
mov	[eax+4], edx
and	ipv6_0,	1
mov	dl, [eax+24h]
and	edx, 0FFFFFFFCh
and	connected_0, 1
shl	ebx, 1
or	edx, esi
or	edx, ebx
mov	[eax+24h], dl
add	esp, 10h
pop	ebx
pop	esi
leave
retn
align 4
public _silc_socket_stream_set_qos
push	ebp
mov	ebp, esp
push	edi
push	esi
push	ebx
sub	esp, 2Ch
mov	ebx, [ebp+stream]
mov	edi, [ebp+read_rate]
mov	esi, [ebp+read_limit_bytes]
mov	edx, [ebp+limit_sec]
test	ebx, ebx
jz	short loc_641DE055
mov	eax, [stream_0]
cmp	eax, offset _silc_socket_stream_ops
jz	short loc_641DE060
cmp	eax, offset _silc_socket_udp_stream_ops
jz	short loc_641DE060
			
xor	eax, eax
add	esp, 2Ch
pop	stream_0
pop	read_limit_bytes_0
pop	read_rate_0
leave
retn
align 10h
			
mov	ecx, [stream_0+18h]
mov	eax, ecx
test	ecx, ecx
jz	short loc_641DE0B0
test	read_rate_0, read_rate_0
jnz	short loc_641DE0D4
test	read_limit_bytes_0, read_limit_bytes_0
jnz	short loc_641DE0D4
test	limit_sec_0, limit_sec_0
jnz	short loc_641DE0D4
cmp	[ebp+limit_usec], 0
jnz	short loc_641DE0D4
mov	[esp+4], ecx	
mov	eax, [stream_0+4]
mov	[esp], eax	
call	_silc_schedule_task_del_by_context
mov	eax, [stream_0+18h]
mov	eax, [eax+1Ch]
mov	[esp], eax	
call	_silc_free
mov	eax, [stream_0+18h]
mov	[esp], eax	
call	_silc_free
mov	dword ptr [stream_0+18h], 0
mov	al, 1
jmp	short loc_641DE057
align 10h
mov	dword ptr [esp+4], 24h 
mov	dword ptr [esp], 1 
mov	[ebp+var_1C], limit_sec_0
call	_silc_calloc
mov	[stream_0+18h],	eax
test	eax, eax
mov	edx, [ebp+var_1C]
jz	short loc_641DE055
mov	ecx, eax
nop
			
mov	[eax+2], di
mov	[ecx], si
mov	[ecx+4], dx
mov	eax, [ebp+limit_usec]
mov	[ecx+8], eax
mov	dword ptr [ecx+0Ch], 0
mov	dword ptr [ecx+10h], 0
mov	eax, [stream_0+18h]
and	dword ptr [eax+14h], 80000000h
mov	read_rate_0, [stream_0+18h]
mov	[edi+20h], stream_0
mov	[esp+4], read_limit_bytes_0 
mov	eax, [edi+1Ch]
mov	[esp], eax	
call	_silc_realloc
mov	[edi+1Ch], eax
mov	eax, [stream_0+18h]
mov	eax, [eax+1Ch]
test	eax, eax
setnz	al
add	esp, 2Ch
pop	stream_0
pop	read_limit_bytes_0
pop	edi
leave
retn
public _silc_socket_stream_set_info
push	ebp
mov	ebp, esp
push	edi
push	esi
push	ebx
sub	esp, 2Ch
mov	ebx, [ebp+stream]
mov	edx, [ebp+hostname]
mov	esi, [ebp+ip_0]
mov	edi, [ebp+port]
test	ebx, ebx
jz	short loc_641DE151
mov	eax, [stream_0]
cmp	eax, offset _silc_socket_stream_ops
jz	short loc_641DE15C
cmp	eax, offset _silc_socket_udp_stream_ops
jz	short loc_641DE15C
			
xor	eax, eax
add	esp, 2Ch
pop	stream_0
pop	ip_0_0
pop	port_0
leave
retn
align 4
			
test	hostname_0, hostname_0
jz	short loc_641DE180
mov	eax, [stream_0+0Ch]
mov	[esp], eax	
mov	[ebp+var_1C], hostname_0
call	_silc_free
mov	edx, [ebp+var_1C]
mov	[esp], edx	
call	_strdup
mov	[stream_0+0Ch],	eax
test	eax, eax
jz	short loc_641DE151
test	ip_0_0,	ip_0_0
jz	short loc_641DE1A5
mov	eax, [stream_0+10h]
mov	[esp], eax	
call	_silc_free
mov	[esp], ip_0_0	
call	_strdup
mov	[stream_0+10h],	eax
test	eax, eax
jz	short loc_641DE151
mov	eax, [stream_0+0Ch]
test	eax, eax
jz	short loc_641DE1B8
			
test	di, di
jz	short loc_641DE1AE
mov	[stream_0+14h],	di
mov	al, 1
add	esp, 2Ch
pop	stream_0
pop	ip_0_0
pop	port_0
leave
retn
mov	[esp], ip_0_0
call	_strdup
mov	[stream_0+0Ch],	eax
test	eax, eax
jnz	short loc_641DE1A5
jmp	short loc_641DE151
align 4
push	ebp
mov	ebp, esp
push	edi
push	esi
push	ebx
sub	esp, 2Ch
mov	esi, [ebp+context]
mov	ebx, [esi]
mov	edi, [stream+4]
mov	eax, [stream+8]
mov	[esp], eax	
call	_silc_net_get_remote_port
mov	[stream+14h], ax
lea	eax, [stream+10h]
mov	[esp+8], eax	
lea	eax, [stream+0Ch]
mov	[esp+4], eax	
mov	eax, [stream+8]
mov	[esp], eax	
call	_silc_net_check_host_by_sock
mov	eax, [stream+10h]
test	eax, eax
jz	short loc_641DE280
mov	edx, [stream+0Ch]
test	edx, edx
jz	short loc_641DE260
mov	dword ptr [context_0+4], 0
			
mov	dword ptr [esp+18h], 1 
mov	dword ptr [esp+14h], 0 
mov	dword ptr [esp+10h], 0 
mov	[esp+0Ch], context_0 
mov	dword ptr [esp+8], offset _silc_socket_host_lookup_finish 
mov	dword ptr [esp+4], 0 
mov	[esp], schedule	
call	_silc_schedule_task_add
mov	[esp], schedule	
call	_silc_schedule_wakeup
xor	eax, eax
add	esp, 2Ch
pop	stream
pop	context_0
pop	schedule
leave
retn
test	byte ptr [context_0+14h], 1
jnz	short loc_641DE28C
mov	[esp], eax	
call	_strdup
mov	[stream+0Ch], eax
test	eax, eax
jnz	short loc_641DE213
mov	dword ptr [context_0+4], 3
jmp	short out
align 10h
mov	dword ptr [context_0+4], 1
jmp	short out
align 4
mov	dword ptr [context_0+4], 2
jmp	short out
align 4
public _silc_socket_host_lookup_finish
			
push	ebp
mov	ebp, esp
push	ebx
sub	esp, 14h
mov	ebx, [ebp+context]
mov	eax, [lookup]
test	byte ptr [lookup+14h], 2
jnz	short loc_641DE304
mov	ecx, [lookup+4]
test	ecx, ecx
jnz	short loc_641DE2E8
mov	edx, [lookup+8]
test	edx, edx
jz	short loc_641DE2CB
mov	ecx, [lookup+10h]
mov	[esp+8], ecx
mov	[esp+4], stream
mov	stream,	[lookup+4]
mov	[esp], eax
call	edx
mov	stream,	[lookup+0Ch]
test	eax, eax
jz	short loc_641DE2DA
mov	[esp], eax	
call	_silc_async_free
mov	[ebp+schedule],	lookup
add	esp, 14h
pop	lookup
leave
jmp	_silc_free
align 4
mov	dword ptr [stream+4], 0
mov	[esp], stream	
call	_silc_socket_stream_destroy
mov	dword ptr [lookup], 0
xor	eax, eax
jmp	short loc_641DE2B1
align 4
mov	dword ptr [stream+4], 0
mov	[esp], stream	
call	_silc_socket_stream_destroy
mov	[ebp+schedule],	lookup
add	esp, 14h
pop	lookup
leave
jmp	_silc_free
public _silc_socket_tcp_stream_create
			
push	ebp
mov	ebp, esp
push	edi
push	esi
push	ebx
sub	esp, 3Ch
mov	ebx, [ebp+sock]
mov	edi, [ebp+schedule]
mov	al, [ebp+lookup]
mov	[ebp+var_19], al
mov	al, [ebp+require_fqdn]
mov	[ebp+var_1A], al
test	ebx, ebx
jz	loc_641DE404
test	schedule_0, schedule_0
jz	loc_641DE404
mov	dword ptr [esp+4], 28h 
mov	dword ptr [esp], 1 
call	_silc_calloc
mov	esi, eax
test	eax, eax
jz	loc_641DE4A8
mov	dword ptr [eax], offset	_silc_socket_stream_ops
mov	[eax+8], sock_0
mov	[eax+4], schedule_0
or	byte ptr [eax+24h], 2
mov	dword ptr [esp+4], 18h 
mov	dword ptr [esp], 1 
call	_silc_calloc
mov	sock_0,	eax
test	eax, eax
jz	loc_641DE4A0
mov	[eax], esi
mov	eax, [ebp+callback]
mov	[ebx+8], eax
mov	eax, [ebp+context]
mov	[ebx+10h], eax
mov	dl, [ebp+var_1A]
and	edx, 1
mov	al, [ebx+14h]
and	eax, 0FFFFFFFEh
or	eax, edx
mov	[ebx+14h], al
cmp	[ebp+var_19], 0
jz	short loc_641DE434
mov	[esp+8], ebx	
mov	dword ptr [esp+4], 0 
mov	dword ptr [esp], offset	_silc_socket_host_lookup_abort 
call	_silc_async_alloc
mov	[ebx+0Ch], eax
test	eax, eax
jz	loc_641DE468
mov	dword ptr [esp+8], 0 
mov	[esp+4], ebx	
mov	dword ptr [esp], offset	_silc_socket_host_lookup_start 
call	_silc_thread_create
mov	eax, [ebx+0Ch]
			
add	esp, 3Ch
pop	ebx
pop	esi
pop	edi
leave
retn
align 4
			
mov	dword ptr [esp], offset	aMissingArgumen	
call	_silc_format
mov	[esp+4], eax	
mov	dword ptr [esp], 3 
call	_silc_log_output
mov	schedule_0, [ebp+callback]
test	edi, edi
jnz	short loc_641DE480
			
xor	eax, eax
add	esp, 3Ch
pop	ebx
pop	esi
pop	edi
leave
retn
align 4
mov	dword ptr [ebx+4], 0
mov	[esp], schedule_0 
call	_silc_schedule_get_context
mov	[esp+10h], ebx	
mov	dword ptr [esp+0Ch], 0 
mov	dword ptr [esp+8], 0 
mov	[esp+4], eax	
mov	[esp], schedule_0 
call	_silc_socket_host_lookup_finish
xor	eax, eax
jmp	short loc_641DE3FA
align 4
mov	[esp], esi	
call	_silc_free
mov	[esp], ebx	
call	_silc_free
mov	ebx, [ebp+callback]
test	ebx, ebx
jz	short loc_641DE427
nop
mov	eax, [ebp+context]
mov	[esp+8], eax	
mov	dword ptr [esp+4], 0 
mov	dword ptr [esp], 4 
call	[ebp+callback]
xor	eax, eax
jmp	loc_641DE3FA
mov	[esp], esi
call	_silc_free
mov	esi, [ebp+callback]
test	esi, esi
jz	loc_641DE427
mov	eax, [ebp+context]
mov	[esp+8], eax	
mov	dword ptr [esp+4], 0 
mov	dword ptr [esp], 3 
call	[ebp+callback]
xor	eax, eax
jmp	loc_641DE3FA
align 4
public _silc_stack_malloc
			
push	ebp
mov	ebp, esp
push	edi
push	esi
push	ebx
sub	esp, 2Ch
mov	esi, [ebp+stack]
mov	ebx, [ebp+size]
mov	al, [ebp+aligned]
mov	edx, [esi+44h]
mov	dl, [edx+0Bh]
shr	dl, 3
test	ebx, ebx
jz	loc_641DE5EA
cmp	size_0,	2000000h
ja	loc_641DE60D
test	al, al
jz	short loc_641DE50D
add	size_0,	3
and	size_0,	0FFFFFFFCh
movzx	edx, dl
test	si_0, si_0
jnz	short loc_641DE58C
mov	aligned_0, [stack_0+48h]
mov	si_0, [stack_0+si_0*4]
mov	ecx, [edx]
cmp	size_0,	ecx
jbe	short loc_641DE59F
cmp	bsize, 3FFh
jbe	loc_641DE5B4
add	bsize, size_0
cmp	bsize, 400h
jbe	loc_641DE5BE
xor	edx, edx
mov	edi, 400h
nop
shl	bsize2,	1
inc	si_0
cmp	bsize, bsize2
ja	short loc_641DE540
cmp	si_0, 0Fh
ja	loc_641DE616
mov	ecx, [stack_0+si_0*4]
test	ecx, ecx
jz	short loc_641DE5C7
mov	bsize, [ecx]
mov	[ebp+var_1C], eax
cmp	size_0,	eax
ja	loc_641DE61F
sub	bsize2,	[ebp+var_1C]
lea	eax, [ecx+edi+4]
mov	edi, [ebp+var_1C]
sub	edi, size_0
mov	[ecx], edi
mov	size_0,	[stack_0+44h]
shl	si_0, 3
mov	cl, [ebx+0Bh]
and	ecx, 7
or	ecx, edx
mov	[ebx+0Bh], cl
			
add	esp, 2Ch
pop	ebx
pop	stack_0
pop	bsize2
leave
retn
align 4
lea	ecx, [si_0-1]
mov	aligned_0, 800h
shl	bsize, cl
mov	si_0, [stack_0+si_0*4]
mov	ecx, [edx]
cmp	size_0,	ecx
ja	short loc_641DE520
sub	bsize, ecx
lea	eax, [edx+eax+4]
sub	ecx, size_0
mov	[edx], ecx
add	esp, 2Ch
pop	size_0
pop	stack_0
pop	edi
leave
retn
align 4
mov	bsize, 400h
jmp	loc_641DE52B
xor	edx, edx
mov	edi, 400h
jmp	short loc_641DE550
lea	bsize, [bsize2+4]
mov	[esp], eax	
mov	[ebp+var_20], si_0
call	_silc_malloc
mov	ecx, eax
mov	edx, [ebp+var_20]
mov	[stack_0+edx*4], eax
xor	eax, eax
test	ecx, ecx
jz	short loc_641DE583
mov	[ecx], bsize2
jmp	loc_641DE557
mov	dword ptr [esp], offset	aAllocationByZe
			
call	_silc_format
mov	[esp+4], eax	
mov	dword ptr [esp], 3 
call	_silc_log_output
xor	eax, eax
jmp	loc_641DE583
mov	dword ptr [esp], offset	aAllocatingTooM
jmp	short loc_641DE5F1
mov	dword ptr [esp], offset	aAllocatingTooL
jmp	short loc_641DE5F1
mov	dword ptr [esp+8], 0DCh	
mov	dword ptr [esp+4], offset aSilcstack_c 
mov	dword ptr [esp], offset	aStackStackSiBy	
call	__assert
align 4
public _silc_stack_realloc
			
push	ebp
mov	ebp, esp
push	edi
push	esi
push	ebx
sub	esp, 2Ch
mov	ebx, [ebp+stack]
mov	edx, [ebp+old_size]
mov	eax, [ebp+ptr]
mov	edi, [ebp+size]
mov	cl, [ebp+aligned]
mov	[ebp+var_1D], cl
mov	ecx, [ebx+44h]
mov	cl, [ecx+0Bh]
shr	cl, 3
test	eax, eax
jz	short loc_641DE6E0
test	size_0,	size_0
jz	loc_641DE6F6
test	old_size_0, old_size_0
jz	loc_641DE6F6
cmp	size_0,	2000000h
ja	loc_641DE716
cmp	[ebp+var_1D], 0
jz	short loc_641DE68C
add	old_size_0, 3
and	old_size_0, 0FFFFFFFCh
movzx	esi, cl
test	si_0, si_0
jz	short loc_641DE6C0
lea	ecx, [si_0-1]
mov	[ebp+bsize], 800h
shl	[ebp+bsize], cl
mov	ecx, [stack_0+si_0*4]
mov	stack_0, [ecx]
mov	si_0, ptr_0
sub	esi, ecx
lea	esi, [esi+ebx-4]
add	esi, old_size_0
cmp	[ebp+bsize], esi
jz	short loc_641DE6C8
xor	ptr_0, ptr_0
			
add	esp, 2Ch
pop	ebx
pop	esi
pop	size_0
leave
retn
align 10h
mov	ecx, [stack_0+48h]
mov	[ebp+bsize], ecx
jmp	short loc_641DE6A0
cmp	size_0,	ebx
ja	short loc_641DE6B4
cmp	[ebp+var_1D], 0
jz	short loc_641DE6D8
add	size_0,	3
and	size_0,	0FFFFFFFCh
add	old_size_0, ebx
sub	edx, size_0
mov	[ecx], edx
jmp	short loc_641DE6B6
movzx	ptr_0, [ebp+var_1D]
mov	[ebp+ptr], aligned_0
mov	[ebp+old_size],	size_0
add	esp, 2Ch
pop	stack_0
pop	esi
pop	size_0
leave
jmp	_silc_stack_malloc
			
mov	dword ptr [esp], offset	aAllocationByZe
call	_silc_format
mov	[esp+4], eax	
mov	dword ptr [esp], 3 
call	_silc_log_output
xor	eax, eax
jmp	short loc_641DE6B6
mov	dword ptr [esp], offset	aAllocatingTooM
jmp	short loc_641DE6FD
align 10h
public _silc_stack_pop
			
push	ebp
mov	ebp, esp
push	edi
push	esi
push	ebx
sub	esp, 4Ch
mov	eax, [ebp+stack]
test	eax, eax
jz	loc_641DE7CC
mov	eax, [ebp+stack]
mov	eax, [eax+44h]
mov	[ebp+var_24], eax
mov	edx, [eax]
mov	[ebp+var_20], edx
test	edx, edx
jz	loc_641DE7D6
mov	ecx, [ebp+var_24]
mov	al, [ecx+0Bh]
shr	al, 3
movzx	eax, al
mov	edi, [ebp+var_20]
mov	dl, [edi+0Bh]
shr	dl, 3
movzx	edi, dl
cmp	si_0, edi
jbe	short loc_641DE7A4
mov	ecx, [ebp+stack]
lea	edx, [ecx+si_0*4]
dec	si_0
mov	[ebp+var_1C], eax
xor	ebx, ebx
mov	[ebp+var_3C], edi
jmp	short loc_641DE77A
align 4
mov	si_0, ecx
mov	esi, [edx]
test	esi, esi
jz	short loc_641DE798
mov	edi, [ebp+var_1C]
add	edi, ebx
mov	[ebp+var_2C], edi
mov	edi, 400h
mov	cl, byte ptr [ebp+var_2C]
shl	edi, cl
mov	ecx, edi
shl	ecx, 1
mov	[esi], ecx
sub	edx, 4
lea	ecx, [si_0-1]
dec	ebx
cmp	[ebp+var_3C], eax
jb	short loc_641DE778
mov	edx, [ebp+stack]
mov	si_0, [edx+si_0*4]
mov	si_0, [ebp+var_24]
mov	edx, [ecx+4]
mov	[eax], edx
mov	eax, [ebp+var_20]
mov	edi, [ebp+stack]
mov	[edi+44h], eax
mov	eax, [eax+8]
and	eax, 7FFFFFFh
inc	eax
add	esp, 4Ch
pop	ebx
pop	esi
pop	edi
leave
retn
xor	eax, eax
add	esp, 4Ch
pop	ebx
pop	esi
pop	edi
leave
retn
mov	dword ptr [esp+8], 83h 
mov	dword ptr [esp+4], offset aSilcstack_c 
mov	dword ptr [esp], offset	aStackFramePrev	
call	__assert
align 4
public _silc_stack_push
			
push	ebp
mov	ebp, esp
push	edi
push	esi
push	ebx
sub	esp, 1Ch
mov	ebx, [ebp+stack]
mov	edx, [ebp+frame]
test	ebx, ebx
jz	short loc_641DE884
test	frame_0, frame_0
jz	short loc_641DE860
mov	edi, [stack_0+44h]
mov	[frame_0], edi
mov	eax, [edi+8]
inc	eax
and	eax, 7FFFFFFh
mov	i, [frame_0+8]
and	ecx, 0F8000000h
or	ecx, eax
mov	[frame_0+8], ecx
movzx	esi, byte ptr [edi+0Bh]
mov	ecx, esi
shr	cl, 3
mov	esi, ecx
lea	edi, ds:0[esi*8]
mov	cl, [frame_0+0Bh]
and	ecx, 7
or	ecx, edi
mov	[frame_0+0Bh], cl
and	esi, 0FFh
mov	ecx, [stack_0+esi*4]
mov	ecx, [ecx]
mov	[frame_0+4], ecx
mov	[stack_0+44h], frame_0
add	esp, 1Ch
pop	stack_0
pop	esi
pop	edi
leave
retn
align 10h
mov	edi, [stack_0+44h]
mov	esi, [edi+8]
and	esi, 7FFFFFFh
lea	eax, [esi+7]
and	eax, 0FFFFFFF8h
cmp	esi, eax
jge	short loc_641DE890
mov	eax, [stack_0+40h]
			
lea	edx, [esi+esi*2]
lea	edx, [frame_0+edx*4]
jmp	short loc_641DE80E
align 4
			
xor	eax, eax
add	esp, 1Ch
pop	stack_0
pop	esi
pop	edi
leave
retn
align 10h
lea	eax, [esi+8]
and	eax, 0FFFFFFF8h
lea	eax, [eax+eax*2]
shl	eax, 2
mov	[esp+4], eax	
mov	eax, [stack_0+40h]
mov	[esp], eax	
call	_silc_realloc
test	eax, eax
jz	short loc_641DE884
mov	[stack_0+40h], frame_0
lea	edx, [esi+esi*2-3]
lea	edi, [frame_0+edx*4]
mov	[stack_0+44h], edi
mov	esi, [edi+8]
and	esi, 7FFFFFFh
cmp	esi, 1
jle	short loc_641DE879
mov	edx, frame_0
mov	ecx, 1
lea	esi, [esi+0]
mov	[edx+0Ch], edx
inc	i
add	edx, 0Ch
cmp	i, esi
jl	short loc_641DE8D4
jmp	short loc_641DE879
align 4
public _silc_stack_free
			
push	ebp
mov	ebp, esp
push	esi
push	ebx
sub	esp, 10h
mov	esi, [ebp+stack]
test	esi, esi
jz	short loc_641DE920
mov	eax, [stack_0+40h]
mov	[esp], eax	
call	_silc_free
xor	ebx, ebx
mov	eax, [stack_0+i*4]
mov	[esp], eax	
call	_silc_free
inc	i
cmp	i, 10h
jnz	short loc_641DE900
mov	[ebp+stack], stack_0
add	esp, 10h
pop	i
pop	stack_0
leave
jmp	_silc_free
align 10h
add	esp, 10h
pop	ebx
pop	stack_0
leave
retn
align 4
public _silc_stack_alloc
			
push	ebp
mov	ebp, esp
push	esi
push	ebx
sub	esp, 10h
mov	esi, [ebp+stack_size]
mov	dword ptr [esp+4], 4Ch 
mov	dword ptr [esp], 1 
call	_silc_calloc
mov	ebx, eax
test	eax, eax
jz	short loc_641DE9B0
mov	dword ptr [esp+4], 0Ch 
mov	dword ptr [esp], 8 
call	_silc_calloc
mov	[stack+40h], eax
test	eax, eax
jz	short loc_641DE9CC
test	stack_size_0, stack_size_0
jnz	short loc_641DE9BC
mov	eax, 404h
mov	si, 400h
mov	[stack+48h], esi
mov	[esp], eax	
call	_silc_malloc
mov	[stack], eax
test	eax, eax
jz	short loc_641DE9C1
mov	edx, [stack+48h]
mov	[eax], edx
mov	eax, [stack+40h]
mov	[stack+44h], eax
mov	dword ptr [eax], 0
mov	edx, [stack+48h]
mov	[eax+4], edx
mov	edx, [eax+8]
and	edx, 0F8000000h
or	edx, 1
mov	[eax+8], edx
and	byte ptr [eax+0Bh], 7
			
mov	eax, stack
add	esp, 10h
pop	stack
pop	stack_size_0
leave
retn
align 4
lea	eax, [stack_size_0+4]
jmp	short loc_641DE975
mov	eax, [stack+40h]
mov	[esp], eax	
call	_silc_free
mov	[esp], stack	
call	_silc_free
xor	stack, stack
jmp	short loc_641DE9B0
public _silc_stream_read
			
push	ebp
mov	ebp, esp
sub	esp, 8
mov	eax, [ebp+stream]
mov	edx, [eax]
mov	eax, [edx]
leave
jmp	eax
public _silc_stream_write
			
push	ebp
mov	ebp, esp
sub	esp, 8
mov	eax, [ebp+stream]
mov	edx, [eax]
mov	eax, [edx+4]
leave
jmp	eax
align 4
public _silc_stream_close
			
push	ebp
mov	ebp, esp
sub	esp, 8
mov	eax, [ebp+stream]
mov	edx, [eax]
mov	eax, [edx+8]
leave
jmp	eax
align 10h
public _silc_stream_destroy
			
push	ebp
mov	ebp, esp
sub	esp, 8
mov	eax, [ebp+stream]
mov	edx, [eax]
mov	eax, [edx+0Ch]
leave
jmp	eax
align 4
public _silc_stream_set_notifier
			
push	ebp
mov	ebp, esp
sub	esp, 8
mov	eax, [ebp+stream]
mov	edx, [eax]
mov	eax, [edx+10h]
leave
jmp	eax
align 4
public _silc_stream_get_schedule
push	ebp
mov	ebp, esp
sub	esp, 8
mov	eax, [ebp+stream]
mov	edx, [eax]
mov	eax, [edx+14h]
leave
jmp	eax
align 4
public _silc_stringprep
			
push	ebp
mov	ebp, esp
push	edi
push	esi
push	ebx
sub	esp, 3Ch
mov	esi, [ebp+bin]
mov	edi, [ebp+bin_len]
test	esi, esi
jz	loc_641DEB68
test	bin_len_0, bin_len_0
jz	loc_641DEB68
mov	ebx, [ebp+profile_name]
test	ebx, ebx
jz	loc_641DEB68
mov	eax, [ebp+bin_encoding]
mov	[esp+8], eax	
mov	[esp+4], bin_len_0 
mov	[esp], bin_0	
call	_silc_utf8_encoded_len
mov	ebx, eax
test	eax, eax
jnz	short loc_641DEA9C
mov	utf8s_len, 7
			
add	esp, 3Ch
pop	utf8s_len
pop	f
pop	edi
leave
retn
lea	ecx, [utf8s_len+1]
mov	[ebp+var_24], ecx
mov	dword ptr [esp+4], 1 
mov	[esp], ecx	
call	_silc_calloc
mov	edx, eax
test	eax, eax
jz	loc_641DEB78
mov	[esp+10h], utf8s_len 
mov	[esp+0Ch], utf8s 
mov	utf8s, [ebp+bin_encoding]
mov	[esp+8], eax	
mov	[esp+4], bin_len_0 
mov	[esp], bin_0	
mov	[ebp+in], utf8s
call	_silc_utf8_encode
mov	bin_len_0, offset aSilcIdentifier 
mov	ecx, 15h
mov	bin_0, [ebp+profile_name]
repe cmpsb
mov	edx, [ebp+in]
jnz	loc_641DEB84
mov	[ebp+profile], offset _stringprep_silc_identifier_prep
			
mov	eax, [ebp+flags]
and	eax, 1
cmp	eax, 1
sbb	esi, esi
and	f, 4
mov	ecx, [ebp+profile]
mov	[esp+0Ch], ecx	
mov	[esp+8], f	
mov	[esp+4], utf8s_len 
mov	[esp], edx	
mov	[ebp+in], utf8s
call	_stringprep
cmp	eax, 64h
mov	edx, [ebp+in]
jz	loc_641DEC08
cmp	ret, 3
jz	loc_641DEC88
jg	loc_641DEBCC
cmp	ret, 1
jz	loc_641DEBFC
jle	loc_641DECAA
mov	ret, 2
			
mov	[esp], edx	
mov	[ebp+in], eax
call	_silc_free
mov	eax, [ebp+in]
add	esp, 3Ch
pop	utf8s_len
pop	f
pop	edi
leave
retn
align 4
			
mov	eax, 0Ah
add	esp, 3Ch
pop	ebx
pop	bin_0
pop	bin_len_0
leave
retn
align 4
			
mov	utf8s, 6
jmp	loc_641DEA94
align 4
mov	edi, offset aSilcIdentifi_0 
mov	ecx, 18h
mov	esi, [ebp+profile_name]
repe cmpsb
jz	short loc_641DEBE4
mov	edi, offset aSilcIdentifi_1 
mov	ecx, 16h
mov	esi, [ebp+profile_name]
repe cmpsb
jz	loc_641DEC94
mov	edi, offset aSilcCasefoldPr 
mov	ecx, 13h
mov	esi, [ebp+profile_name]
repe cmpsb
jnz	loc_641DECA0
mov	[ebp+profile], offset _stringprep_silc_casefold_prep
jmp	loc_641DEAF9
align 4
cmp	ret, 5
jz	short loc_641DEBF0
jge	loc_641DEC5C
mov	ret, 5
jmp	loc_641DEB50
align 4
mov	[ebp+profile], offset _stringprep_silc_identifier_ch_prep
jmp	loc_641DEAF9
mov	ret, 3
jmp	loc_641DEB50
align 4
mov	ret, 1
jmp	loc_641DEB50
align 4
lea	ret, [utf8s_len+utf8s_len]
mov	[ebp+maxlen], eax
inc	eax
mov	[esp+4], eax	
mov	[esp], edx	
call	_silc_realloc
mov	edx, eax
test	eax, eax
jz	loc_641DEB78
mov	ecx, [ebp+var_24]
add	ecx, utf8s
mov	[ebp+var_24], ecx
xor	utf8s, utf8s
mov	edi, ecx
mov	ecx, utf8s_len
rep stosb
mov	eax, [ebp+profile]
mov	[esp+0Ch], eax	
mov	[esp+8], f	
mov	utf8s_len, [ebp+maxlen]
mov	[esp+4], ecx	
mov	[esp], utf8s	
mov	[ebp+in], utf8s
call	_stringprep
mov	edx, [ebp+in]
jmp	loc_641DEB2D
align 4
cmp	ret, 67h
jz	short loc_641DEC7C
cmp	ret, 0C9h
jz	short loc_641DEC72
mov	ret, 0Ah
jmp	loc_641DEB50
			
mov	ret, 6
jmp	loc_641DEB50
mov	ret, 9
jmp	loc_641DEB50
align 4
mov	ret, 4
jmp	loc_641DEB50
align 4
mov	[ebp+profile], offset _stringprep_silc_identifierc_prep
jmp	loc_641DEAF9
mov	eax, 9
jmp	loc_641DEA94
test	ret, ret
jnz	short loc_641DEC68
mov	ecx, [ebp+out]
test	ecx, ecx
jz	loc_641DED99
mov	ret, [ebp+out_len]
test	eax, eax
jz	loc_641DED99
cmp	[ebp+out_encoding], 7
jz	short loc_641DED04
xor	eax, eax
mov	ecx, 0FFFFFFFFh
mov	edi, edx
repne scasb
not	ecx
dec	ecx
mov	f, [ebp+out_encoding]
mov	[esp+8], esi	
mov	[esp+4], ecx	
mov	[esp], utf8s	
mov	[ebp+in], utf8s
call	_silc_utf8_decoded_len
mov	ecx, [ebp+out_len]
mov	[ecx], eax
test	eax, eax
mov	edx, [ebp+in]
jnz	short loc_641DED38
mov	al, 7
jmp	loc_641DEB50
align 4
xor	eax, eax
mov	ecx, 0FFFFFFFFh
mov	edi, edx
repne scasb
not	ecx
dec	ecx
mov	f, [ebp+out_len]
mov	[esi], ecx
mov	[esp+4], ecx	
mov	[esp], edx	
mov	[ebp+in], utf8s
call	_silc_memdup
mov	ecx, [ebp+out]
mov	[ecx], eax
xor	eax, eax
mov	edx, [ebp+in]
jmp	loc_641DEB50
align 4
mov	dword ptr [esp+4], 1 
inc	eax
mov	[esp], eax	
mov	[ebp+in], edx
call	_silc_calloc
mov	utf8s_len, eax
mov	esi, [ebp+out]
mov	[esi], eax
test	eax, eax
mov	edx, [ebp+in]
jz	loc_641DEC72
xor	eax, eax
mov	ecx, 0FFFFFFFFh
mov	edi, edx
repne scasb
not	ecx
dec	ecx
mov	esi, [ebp+out_len]
mov	eax, [esi]
mov	[esp+10h], eax	
mov	[esp+0Ch], ebx	
mov	eax, [ebp+out_encoding]
mov	[esp+8], eax	
mov	[esp+4], ecx	
mov	[esp], utf8s	
mov	[ebp+in], utf8s
call	_silc_utf8_decode
xor	eax, eax
mov	edx, [ebp+in]
jmp	loc_641DEB50
			
xor	ret, ret
jmp	loc_641DEB50
public _silc_string_regex_match
			
push	ebp
mov	ebp, esp
push	ebx
sub	esp, 54h
mov	dword ptr [esp+8], 9 
mov	eax, [ebp+regex]
mov	[esp+4], eax	
lea	ebx, [ebp+preg]
mov	[esp], ebx	
call	_regcomp
test	eax, eax
jz	short loc_641DEDD0
xor	eax, eax
add	esp, 54h
pop	ebx
leave
retn
align 10h
mov	dword ptr [esp+10h], 0 
mov	dword ptr [esp+0Ch], 0 
mov	dword ptr [esp+8], 0 
mov	eax, [ebp+string]
mov	[esp+4], eax	
mov	[esp], ebx	
call	_regexec
test	eax, eax
setz	al
movzx	eax, al
mov	[esp], ebx	
mov	[ebp+var_2C], ret
call	_regfree
mov	eax, [ebp+var_2C]
add	esp, 54h
pop	ebx
leave
retn
align 4
public _silc_string_regexify
			
push	ebp
mov	ebp, esp
push	edi
push	esi
push	ebx
sub	esp, 2Ch
mov	ebx, [ebp+string]
test	ebx, ebx
jnz	short loc_641DEE30
xor	edi, edi
mov	eax, regex
add	esp, 2Ch
pop	string_0
pop	esi
pop	regex
leave
retn
xor	eax, eax
mov	ecx, 0FFFFFFFFh
mov	edi, string_0
repne scasb
not	ecx
lea	esi, [ecx-1]
test	esi, esi
jle	loc_641DEF05
mov	ecx, 4
xor	eax, eax
jmp	short loc_641DEE63
align 4
cmp	dl, 3Fh
jz	short loc_641DEE6B
cmp	dl, 2Ch
jz	short loc_641DEE71
inc	i
cmp	esi, i
jz	short loc_641DEE79
			
mov	dl, [string_0+i]
cmp	dl, 2Ah
jnz	short loc_641DEE54
inc	count
cmp	dl, 2Ch
jnz	short loc_641DEE5E
add	count, 2
inc	i
cmp	esi, i
jnz	short loc_641DEE63
			
mov	dword ptr [esp+4], 1 
lea	i, [count+esi+1]
mov	[esp], eax	
call	_silc_calloc
mov	edi, eax
test	eax, eax
jz	short loc_641DEE26
mov	byte ptr [regex], 28h
mov	byte ptr [regex+1], 5Eh
test	esi, esi
jle	short loc_641DEF0F
lea	regex, [esi+2]
mov	edx, 2
mov	ecx, 2
mov	[ebp+var_1C], esi
mov	esi, eax
jmp	short loc_641DEEC5
align 4
cmp	al, 3Fh
jz	short loc_641DEECD
cmp	al, 2Ch
jz	short loc_641DEED8
mov	[regex+count], al
inc	count
inc	edx
cmp	edx, esi
jz	short loc_641DEEF0
			
mov	al, [string_0+edx-2]
cmp	al, 2Ah
jnz	short loc_641DEEB4
mov	byte ptr [regex+count],	2Eh
inc	count
mov	al, [string_0+edx-2]
jmp	short loc_641DEEBC
cmp	edx, [ebp+var_1C]
jz	short loc_641DEEC0
mov	byte ptr [regex+count],	7Ch
mov	byte ptr [regex+count+1], 5Eh
add	count, 2
inc	edx
cmp	edx, esi
jnz	short loc_641DEEC5
xchg	ax, ax
lea	eax, [count+1]
mov	byte ptr [regex+ecx], 29h
mov	byte ptr [regex+eax], 24h
mov	eax, regex
add	esp, 2Ch
pop	string_0
pop	esi
pop	regex
leave
retn
mov	ecx, 4
jmp	loc_641DEE79
mov	regex, 3
mov	ecx, 2
jmp	short loc_641DEEF3
align 4
public _silc_base64_decode
			
push	ebp
mov	ebp, esp
push	edi
push	esi
push	ebx
sub	esp, 3Ch
mov	ebx, [ebp+base64]
mov	esi, [ebp+base64_len]
mov	ecx, 3Fh
movzx	eax, ds:_pem_enc[i]
mov	ds:_ialpha_37702[eax], 1
mov	ds:_decoder_37703[eax],	cl
dec	i
cmp	i, 0FFFFFFFFh
jnz	short loc_641DEF30
test	base64_len_0, base64_len_0
jnz	loc_641DF030
xor	eax, eax
mov	edi, base64_0
repne scasb
not	ecx
lea	base64_len_0, [ecx-1]
mov	dword ptr [esp+4], 1 
lea	eax, [len+len*2]
shl	eax, 1
shr	eax, 3
mov	[esp], eax	
call	_silc_calloc
test	len, len
jz	loc_641DF092
movzx	ecx, byte ptr [base64_0]
cmp	c, 3Dh
jz	loc_641DF092
mov	[ebp+j], 0
xor	edx, edx
mov	[ebp+bits], 0
xor	edi, edi
jmp	short loc_641DEFBA
align 10h
mov	ecx, [ebp+bits]
shl	ecx, 6
mov	[ebp+bits], ecx
lea	len, [len+0]
			
inc	i
cmp	len, i
jbe	short loc_641DF00C
movzx	c, byte	ptr [base64_0+i]
cmp	c, 3Dh
jz	short loc_641DF00C
cmp	c, 7Fh
ja	short loc_641DEFAC
cmp	ds:_ialpha_37702[c], 0
jz	short loc_641DEFAC
movsx	c, ds:_decoder_37703[c]
add	ecx, [ebp+bits]
mov	[ebp+bits], ecx
inc	char_count
cmp	char_count, 4
jnz	short loc_641DEFA0
shr	ecx, 10h
mov	char_count, [ebp+j]
mov	[data+edi], cl
mov	ecx, [ebp+bits]
shr	ecx, 8
mov	[data+edi+1], cl
mov	cl, byte ptr [ebp+bits]
mov	[data+edi+2], cl
add	edi, 3
mov	[ebp+j], edi
mov	[ebp+bits], 0
xor	edi, edi
inc	i
cmp	len, i
ja	short loc_641DEFB1
lea	len, [len+0]
			
cmp	char_count, 2
jz	short loc_641DF080
cmp	char_count, 3
jz	short loc_641DF04D
dec	char_count
jz	short loc_641DF06E
			
mov	i, [ebp+ret_len]
test	edx, edx
jz	short loc_641DF028
mov	c, [ebp+j]
mov	edx, [ebp+ret_len]
mov	[edx], ecx
add	esp, 3Ch
pop	base64_0
pop	len
pop	edi
leave
retn
mov	dword ptr [esp+4], 1
lea	eax, [base64_len_0+base64_len_0*2]
shl	eax, 1
shr	eax, 3
mov	[esp], eax	
call	_silc_calloc
jmp	loc_641DEF7D
mov	i, [ebp+bits]
shr	edx, 10h
mov	c, [ebp+j]
mov	[data+ecx], dl
mov	ecx, [ebp+bits]
shr	ecx, 8
mov	char_count, [ebp+j]
mov	[data+edi+1], cl
add	edi, 2
mov	[ebp+j], edi
jmp	short loc_641DF019
mov	[esp], data
call	_silc_free
xor	eax, eax
add	esp, 3Ch
pop	base64_0
pop	len
pop	edi
leave
retn
mov	c, [ebp+bits]
shr	ecx, 0Ah
mov	char_count, [ebp+j]
mov	[data+edi], cl
inc	edi
mov	[ebp+j], edi
jmp	short loc_641DF019
			
mov	[ebp+j], 0
jmp	loc_641DF019
align 10h
public _silc_base64_encode
push	ebp
mov	ebp, esp
push	edi
push	esi
push	ebx
sub	esp, 2Ch
mov	dword ptr [esp+4], 1 
mov	edx, [ebp+len]
lea	eax, ds:5[edx*8]
mov	edx, 0AAAAAAABh
mul	edx
shr	edx, 2
add	edx, 5
mov	[esp], edx	
call	_silc_calloc
mov	ecx, [ebp+len]
test	ecx, ecx
jz	loc_641DF1A5
xor	edi, edi
xor	edx, edx
xor	ebx, ebx
xor	esi, esi
xor	ecx, ecx
mov	[ebp+var_1C], eax
jmp	short loc_641DF0F7
align 4
shl	bits, 8
inc	i
mov	edi, i
cmp	i, [ebp+len]
jz	short loc_641DF158
			
mov	pem, [ebp+data]
movzx	edi, byte ptr [eax+edi]
lea	bits, [edi+bits]
inc	char_count
cmp	char_count, 3
jnz	short loc_641DF0EC
mov	char_count, bits
shr	edx, 12h
mov	dl, ds:_pem_enc[edx]
mov	eax, [ebp+var_1C]
mov	[eax+j], dl
mov	edx, bits
shr	edx, 0Ch
and	edx, 3Fh
mov	dl, ds:_pem_enc[edx]
mov	[eax+j+1], dl
mov	edx, bits
shr	edx, 6
and	edx, 3Fh
mov	dl, ds:_pem_enc[edx]
mov	[eax+j+2], dl
and	bits, 3Fh
mov	dl, ds:_pem_enc[ebx]
mov	[eax+j+3], dl
add	j, 4
xor	edx, edx
xor	ebx, ebx
inc	i
mov	edi, i
cmp	i, [ebp+len]
jnz	short loc_641DF0F7
mov	eax, [ebp+var_1C]
test	char_count, char_count
jz	short loc_641DF1A5
mov	i, 2
sub	ecx, char_count
shl	ecx, 3
shl	bits, cl
mov	ecx, bits
shr	ecx, 12h
mov	cl, ds:_pem_enc[ecx]
mov	[pem+j], cl
mov	edi, bits
shr	edi, 0Ch
and	edi, 3Fh
mov	cl, ds:_pem_enc[edi]
mov	[pem+j+1], cl
add	j, 2
dec	char_count
jz	short loc_641DF1B0
shr	bits, 6
and	ebx, 3Fh
mov	dl, ds:_pem_enc[ebx]
mov	[pem+j], dl
mov	byte ptr [pem+j+1], 3Dh
			
add	esp, 2Ch
pop	bits
pop	j
pop	edi
leave
retn
align 10h
mov	byte ptr [pem+j], 3Dh
mov	byte ptr [pem+j+1], 3Dh
add	esp, 2Ch
pop	bits
pop	j
pop	edi
leave
retn
align 4
public _silc_strncat
			
push	ebp
mov	ebp, esp
push	edi
push	esi
push	ebx
sub	esp, 1Ch
mov	ebx, [ebp+dest]
mov	edx, [ebp+dest_size]
mov	esi, [ebp+src_len]
mov	byte ptr [ebx+edx-1], 0
xor	eax, eax
mov	ecx, 0FFFFFFFFh
mov	edi, ebx
repne scasb
lea	eax, [edx+ecx+1]
cmp	eax, esi
jnb	short loc_641DF210
test	eax, eax
jle	short loc_641DF205
mov	[esp+8], eax	
mov	eax, [ebp+src]
mov	[esp+4], eax	
mov	[esp], ebx	
call	_strncat
mov	eax, dest_0
add	esp, 1Ch
pop	dest_0
pop	src_len_0
pop	edi
leave
retn
align 10h
mov	[esp+8], src_len_0 
mov	eax, [ebp+src]
mov	[esp+4], eax	
mov	[esp], ebx	
call	_strncat
mov	eax, dest_0
add	esp, 1Ch
pop	dest_0
pop	src_len_0
pop	edi
leave
retn
align 10h
public _silc_string_regex_combine
push	ebp
mov	ebp, esp
push	edi
push	esi
push	ebx
sub	esp, 2Ch
mov	esi, [ebp+string1]
test	esi, esi
jnz	short loc_641DF24C
xor	ebx, ebx
mov	eax, tmp
add	esp, 2Ch
pop	tmp
pop	string1_0
pop	edi
leave
retn
mov	ebx, [ebp+string2]
test	ebx, ebx
jz	short loc_641DF240
mov	ecx, 0FFFFFFFFh
mov	edi, string1_0
xor	eax, eax
repne scasb
mov	edx, ecx
not	edx
mov	ecx, 0FFFFFFFFh
mov	edi, [ebp+string2]
repne scasb
not	ecx
mov	[ebp+var_1C], ecx
mov	dword ptr [esp+4], 1 
lea	eax, [edx+ecx]
mov	[esp], eax	
mov	[ebp+var_20], edx
call	_silc_calloc
mov	ebx, eax
mov	edx, [ebp+var_20]
sub	edx, 3
mov	[esp+8], edx	
mov	[esp+4], esi	
mov	[esp], eax	
call	_strncat
mov	ecx, 0FFFFFFFFh
mov	edi, tmp
xor	eax, eax
repne scasb
not	ecx
mov	word ptr [ebx+ecx-1], 7Ch
mov	eax, [ebp+var_1C]
sub	eax, 2
mov	[esp+8], eax	
mov	eax, [ebp+string2]
inc	eax
mov	[esp+4], eax	
mov	[esp], tmp	
call	_strncat
mov	eax, tmp
add	esp, 2Ch
pop	tmp
pop	string1_0
pop	edi
leave
retn
align 4
public _silc_string_split
push	ebp
mov	ebp, esp
push	edi
push	esi
push	ebx
sub	esp, 3Ch
mov	esi, [ebp+string]
mov	edi, [ebp+ch_0]
mov	edx, edi
test	esi, esi
jnz	short loc_641DF2FC
xor	ebx, ebx
			
mov	eax, splitted
add	esp, 3Ch
pop	splitted
pop	cp
pop	ch_0_0
leave
retn
align 4
mov	eax, [ebp+ret_count]
test	eax, eax
jz	short loc_641DF2ED
mov	dword ptr [esp+4], 4 
mov	dword ptr [esp], 1 
mov	byte ptr [ebp+var_34], dl
call	_silc_calloc
mov	ebx, eax
test	eax, eax
mov	dl, byte ptr [ebp+var_34]
jz	short loc_641DF2EF
movsx	edx, dl
mov	[esp+4], ch_0_0	
mov	[esp], string_0	
call	_strchr
test	eax, eax
jz	loc_641DF3D3
mov	edx, edi
mov	[ebp+sep], dl
mov	[ebp+var_30], 0
mov	[ebp+i], 0
jmp	short loc_641DF387
align 10h
xor	cp, cp
inc	[ebp+i]
mov	item, [ebp+i]
shl	eax, 2
mov	[esp+4], eax	
mov	[esp], splitted	
mov	[ebp+var_34], item
call	_silc_realloc
mov	splitted, eax
test	eax, eax
mov	edx, [ebp+var_34]
jz	loc_641DF2EF
mov	splitted, [ebp+var_30]
mov	[splitted+eax],	edx
add	eax, 4
mov	[ebp+var_30], eax
test	cp, cp
jz	short loc_641DF3B4
lea	eax, [ebp+sep]
mov	[esp+4], eax	
mov	[esp], cp	
call	_strcspn
mov	edi, eax
mov	[esp+4], eax	
mov	[esp], cp	
call	_silc_memdup
mov	edx, eax
test	eax, eax
jz	short loc_641DF3C4
add	cp, edi
cmp	byte ptr [cp], 0
jz	short loc_641DF350
inc	cp
jmp	short loc_641DF352
mov	eax, [ebp+i]
mov	item, [ebp+ret_count]
mov	[edx], eax
jmp	loc_641DF2EF
align 4
mov	[esp], splitted	
call	_silc_free
xor	splitted, splitted
jmp	loc_641DF2EF
mov	ecx, 0FFFFFFFFh
mov	edi, string_0
repne scasb
not	ecx
dec	ecx
mov	[esp+4], ecx	
mov	[esp], esi	
call	_silc_memdup
mov	[splitted], eax
mov	eax, [ebp+ret_count]
mov	dword ptr [eax], 1
jmp	loc_641DF2EF
align 4
public _silc_string_compare
push	ebp
mov	ebp, esp
push	edi
push	esi
push	ebx
sub	esp, 2Ch
mov	esi, [ebp+string1]
test	esi, esi
jz	loc_641DF5F0
mov	ecx, [ebp+string2]
test	ecx, ecx
jz	loc_641DF5F0
mov	edx, 0FFFFFFFFh
xor	eax, eax
mov	ecx, edx
mov	edi, string1_0
repne scasb
not	ecx
dec	ecx
mov	[ebp+var_24], ecx
mov	ecx, edx
mov	edi, [ebp+string2]
repne scasb
mov	edx, ecx
not	edx
dec	edx
mov	[ebp+var_20], edx
mov	[esp+8], edx	
mov	eax, [ebp+string2]
mov	[esp+4], eax	
mov	[esp], esi	
call	_strncmp
test	eax, eax
jz	loc_641DF5B0
mov	ecx, [ebp+var_20]
cmp	[ebp+var_24], ecx
jle	short loc_641DF478
mov	dword ptr [esp+4], 2Ah 
mov	[esp], string1_0 
call	_strchr
test	eax, eax
jz	loc_641DF5F0
mov	dword ptr [esp+4], 1 
mov	eax, [ebp+var_24]
inc	eax
mov	[esp], eax	
call	_silc_calloc
mov	ebx, eax
mov	edi, eax
mov	ecx, [ebp+var_24]
rep movsb
mov	dword ptr [esp+4], 1 
mov	eax, [ebp+var_20]
inc	eax
mov	[esp], eax	
call	_silc_calloc
mov	[ebp+var_1C], eax
mov	tmpstr1, eax
mov	string1_0, [ebp+string2]
mov	ecx, [ebp+var_20]
rep movsb
mov	edx, [ebp+var_24]
test	edx, edx
jle	short loc_641DF50A
xor	string2_0, string2_0
mov	tmpstr2, [ebp+var_24]
jmp	short loc_641DF4D1
cmp	al, 3Fh
jz	loc_641DF568
			
inc	i
cmp	edi, i
jle	short loc_641DF50A
mov	al, [ebx+i]
cmp	al, 2Ah
jnz	short loc_641DF4C4
mov	[esp+8], i	
mov	eax, [ebp+var_1C]
mov	[esp+4], eax	
mov	[esp], ebx	
call	_strncmp
test	eax, eax
jnz	short loc_641DF4CC
mov	edi, [ebp+var_1C]
mov	ecx, [ebp+var_20]
rep stosb
mov	[esp+8], i	
mov	[esp+4], ebx	
mov	edx, [ebp+var_1C]
mov	[esp], edx	
call	_strncpy
			
mov	dword ptr [esp+4], 2Ah 
mov	[esp], ebx	
call	_strchr
test	eax, eax
jz	short loc_641DF521
mov	byte ptr [eax],	0
mov	eax, [ebp+var_1C]
mov	[esp+4], eax	
mov	[esp], ebx	
call	_strcmp
test	eax, eax
jz	loc_641DF5C0
xor	eax, eax
mov	tmpstr2, ebx
mov	ecx, [ebp+var_24]
rep stosb
mov	tmpstr1, [ebp+var_1C]
mov	ecx, [ebp+var_20]
rep stosb
mov	[esp], ebx	
call	_silc_free
mov	ecx, [ebp+var_1C]
mov	[esp], ecx	
call	_silc_free
xor	eax, eax
add	esp, 2Ch
pop	ebx
pop	i
pop	tmpstr2
leave
retn
align 4
mov	[esp+8], i	
mov	ecx, [ebp+var_1C]
mov	[esp+4], ecx	
mov	[esp], ebx	
call	_strncmp
test	eax, eax
jnz	loc_641DF4CC
mov	al, [ebx+i+1]
cmp	al, 3Fh
jz	short loc_641DF598
mov	edx, [ebp+var_1C]
cmp	al, [edx+i+1]
jnz	loc_641DF4CC
cmp	edi, [ebp+var_20]
jl	loc_641DF4CC
mov	ecx, [ebp+var_1C]
mov	byte ptr [ecx+i], 3Fh
jmp	loc_641DF4CC
align 10h
mov	edx, [ebp+var_24]
cmp	[ebp+var_20], edx
jnz	loc_641DF458
mov	al, 1
jmp	short loc_641DF55E
mov	tmpstr2, ebx
mov	ecx, [ebp+var_24]
rep stosb
mov	tmpstr1, [ebp+var_1C]
mov	ecx, [ebp+var_20]
rep stosb
mov	[esp], ebx	
call	_silc_free
mov	edx, [ebp+var_1C]
mov	[esp], edx	
call	_silc_free
mov	eax, 1
add	esp, 2Ch
pop	ebx
pop	i
pop	tmpstr2
leave
retn
align 10h
			
xor	eax, eax
add	esp, 2Ch
pop	ebx
pop	string1_0
pop	edi
leave
retn
align 4
public _silc_string_match
push	ebp
mov	ebp, esp
push	edi
push	esi
push	ebx
sub	esp, 4Ch
mov	eax, [ebp+string1]
mov	ebx, [ebp+string2]
test	eax, eax
jz	short loc_641DF684
test	string2_0, string2_0
jz	short loc_641DF684
mov	[esp], string1_0 
call	_silc_string_regexify
mov	esi, eax
mov	dword ptr [esp+8], 9 
mov	[esp+4], eax	
lea	edi, [ebp+preg]
mov	[esp], edi	
call	_regcomp
test	eax, eax
jz	short loc_641DF64C
xor	string2_0, string2_0
mov	[esp], s1
call	_silc_free
mov	eax, ret
add	esp, 4Ch
pop	ret
pop	s1
pop	edi
leave
retn
mov	dword ptr [esp+10h], 0
mov	dword ptr [esp+0Ch], 0 
mov	dword ptr [esp+8], 0 
mov	[esp+4], string2_0 
mov	[esp], edi	
call	_regexec
xor	string2_0, string2_0
test	eax, eax
setz	bl
mov	[esp], edi	
call	_regfree
jmp	short loc_641DF63A
align 4
			
xor	string2_0, string2_0
mov	string1_0, ret
add	esp, 4Ch
pop	ret
pop	esi
pop	edi
leave
retn
public _silc_base64_encode_file
			
push	ebp
mov	ebp, esp
push	edi
push	esi
push	ebx
sub	esp, 4Ch
mov	dword ptr [esp+4], 1 
mov	edx, [ebp+data_len]
lea	eax, ds:5[edx*8]
mov	edx, 0AAAAAAABh
mul	edx
shr	edx, 2
add	edx, 5
mov	[esp], edx	
call	_silc_calloc
mov	ebx, eax
mov	edi, [ebp+data_len]
test	edi, edi
jz	loc_641DF799
xor	edi, edi
xor	esi, esi
xor	eax, eax
xor	edx, edx
xor	ecx, ecx
mov	[ebp+len], pem
jmp	short loc_641DF6E7
shl	edx, 8
inc	ecx
mov	edi, ecx
cmp	ecx, [ebp+data_len]
jz	short loc_641DF748
			
mov	pem, [ebp+data]
movzx	edi, byte ptr [ebx+edi]
lea	edx, [edi+edx]
inc	eax
cmp	eax, 3
jnz	short loc_641DF6DC
mov	eax, edx
shr	eax, 12h
mov	al, ds:_pem_enc[eax]
mov	ebx, [ebp+len]
mov	[ebx+esi], al
mov	eax, edx
shr	eax, 0Ch
and	eax, 3Fh
mov	al, ds:_pem_enc[eax]
mov	[ebx+esi+1], al
mov	eax, edx
shr	eax, 6
and	eax, 3Fh
mov	al, ds:_pem_enc[eax]
mov	[ebx+esi+2], al
and	edx, 3Fh
mov	al, ds:_pem_enc[edx]
mov	[ebx+esi+3], al
add	esi, 4
xor	eax, eax
xor	edx, edx
inc	ecx
mov	edi, ecx
cmp	ecx, [ebp+data_len]
jnz	short loc_641DF6E7
mov	ebx, [ebp+len]
test	eax, eax
jz	short loc_641DF799
mov	ecx, 2
sub	ecx, eax
shl	ecx, 3
shl	edx, cl
mov	ecx, edx
shr	ecx, 12h
mov	cl, ds:_pem_enc[ecx]
mov	[pem+esi], cl
mov	edi, edx
shr	edi, 0Ch
and	edi, 3Fh
mov	cl, ds:_pem_enc[edi]
mov	[pem+esi+1], cl
add	esi, 2
dec	eax
jz	loc_641DF834
shr	edx, 6
and	edx, 3Fh
mov	al, ds:_pem_enc[edx]
mov	[pem+esi], al
mov	byte ptr [pem+esi+1], 3Dh
			
xor	eax, eax
mov	ecx, 0FFFFFFFFh
mov	edi, pem
repne scasb
not	ecx
lea	eax, [ecx-1]
mov	[ebp+len], eax
mov	dword ptr [esp+4], 1 
mov	edx, 38E38E39h
mul	edx
shr	edx, 4
add	ecx, edx
mov	[esp], ecx	
call	_silc_calloc
mov	esi, [ebp+len]
test	esi, esi
jz	short loc_641DF81B
xor	edi, edi
mov	ecx, 1
xor	esi, esi
xor	edx, edx
mov	[ebp+var_2C], eax
mov	[ebp+var_3C], cols
jmp	short loc_641DF7F9
align 4
mov	al, [pem+j]
mov	cols, [ebp+var_2C]
mov	[ecx+edi], al
inc	j
inc	[ebp+var_3C]
inc	i
mov	edi, i
cmp	[ebp+len], i
jbe	short loc_641DF818
			
cmp	[ebp+var_3C], 48h
jnz	short loc_641DF7E4
mov	cols, [ebp+var_2C]
mov	byte ptr [ecx+edi], 0Ah
inc	[ebp+len]
mov	[ebp+var_3C], 1
inc	i
mov	edi, i
cmp	[ebp+len], i
ja	short loc_641DF7F9
mov	pem2, [ebp+var_2C]
mov	[esp], pem	
mov	[ebp+var_20], pem2
call	_silc_free
mov	eax, [ebp+var_20]
add	esp, 4Ch
pop	pem
pop	j
pop	edi
leave
retn
align 4
mov	byte ptr [pem+esi], 3Dh
mov	byte ptr [pem+esi+1], 3Dh
jmp	loc_641DF799
align 4
public _silc_compare_timeval
			
push	ebp
mov	ebp, esp
mov	ecx, [ebp+t1]
mov	edx, [ebp+t2]
mov	eax, [ecx]
sub	eax, [edx]
jnz	short locret_641DF859
mov	s, [t1_0+4]
sub	s, [t2_0+4]
leave
retn
align 4
public _silc_time_generalized_string
push	ebp
mov	ebp, esp
push	edi
push	esi
push	ebx
sub	esp, 4Ch
mov	ebx, [ebp+time_val]
mov	esi, [ebp+ret_string]
mov	edx, [ebp+ret_string_size]
xor	eax, eax
mov	edi, esi
mov	ecx, edx
rep stosb
dec	edx
mov	[ebp+var_1C], edx
mov	eax, [ebx+4]
shr	ax, 6
and	eax, 3Fh
mov	[esp+20h], eax
mov	al, [ebx+4]
and	eax, 3Fh
mov	[esp+1Ch], eax
mov	al, [ebx+3]
and	eax, 1Fh
mov	[esp+18h], eax
mov	al, [ebx+2]
shr	al, 3
movzx	eax, al
mov	[esp+14h], eax
mov	eax, [ebx]
shr	eax, 0Fh
and	eax, 0Fh
mov	[esp+10h], eax
mov	eax, [ebx]
and	eax, 7FFFh
mov	[esp+0Ch], eax
mov	dword ptr [esp+8], offset a04u02u02u02u02 
mov	[esp+4], edx	
mov	[esp], esi	
call	_silc_snprintf
mov	ret_string_0, eax
test	eax, eax
js	loc_641DF9AC
mov	ret, [time_val_0+4]
test	eax, 3FF000h
jnz	loc_641DF980
mov	ax, [time_val_0+6]
test	eax, 7C0h
jz	short loc_641DF94C
mov	cl, [time_val_0+8]
shr	ax, 6
mov	dl, cl
and	edx, 40h
cmp	dl, 1
sbb	edx, edx
and	edx, 2
add	edx, 2Bh
and	ecx, 3Fh
mov	[esp+14h], ecx
and	eax, 1Fh
mov	[esp+10h], eax
mov	[esp+0Ch], edx
mov	dword ptr [esp+8], offset aC02u02u 
mov	edx, [ebp+var_1C]
sub	edx, ret
mov	[esp+4], edx	
lea	ret, [ret_string_0+ret]
mov	[esp], edi	
call	_silc_snprintf
not	eax
shr	eax, 1Fh
add	esp, 4Ch
pop	time_val_0
pop	ret_string_0
pop	edi
leave
retn
align 4
mov	cl, [time_val_0+8]
test	cl, 3Fh
jnz	short loc_641DF8FA
mov	dword ptr [esp+8], offset aZ 
mov	edx, [ebp+var_1C]
sub	edx, ret
mov	[esp+4], edx	
lea	ret, [ret_string_0+ret]
mov	[esp], edi	
call	_silc_snprintf
not	eax
shr	eax, 1Fh
add	esp, 4Ch
pop	time_val_0
pop	ret_string_0
pop	edi
leave
retn
align 10h
shr	eax, 0Ch
and	eax, 3FFh
mov	[esp+0Ch], eax
mov	dword ptr [esp+8], offset a_Lu 
mov	eax, [ebp+var_1C]
sub	eax, ret
mov	[esp+4], eax	
lea	eax, [ret_string_0+ret]
mov	[esp], eax	
call	_silc_snprintf
test	eax, eax
jns	short loc_641DF9B8
xor	ret, ret
add	esp, 4Ch
pop	time_val_0
pop	ret_string_0
pop	ret
leave
retn
align 4
lea	edi, [ret+edi]
jmp	loc_641DF8EC
public _silc_time_universal_string
push	ebp
mov	ebp, esp
push	edi
push	esi
push	ebx
sub	esp, 3Ch
mov	ebx, [ebp+time_val]
mov	esi, [ebp+ret_string_size]
xor	eax, eax
mov	edi, [ebp+ret_string]
mov	ecx, esi
rep stosb
dec	esi
mov	eax, [ebx+4]
shr	ax, 6
and	eax, 3Fh
mov	[esp+20h], eax
mov	al, [ebx+4]
and	eax, 3Fh
mov	[esp+1Ch], eax
mov	al, [ebx+3]
and	eax, 1Fh
mov	[esp+18h], eax
mov	al, [ebx+2]
shr	al, 3
movzx	eax, al
mov	[esp+14h], eax
mov	eax, [ebx]
shr	eax, 0Fh
and	eax, 0Fh
mov	[esp+10h], eax
mov	eax, [ebx]
and	eax, 7FFFh
mov	cl, 64h
cdq
idiv	ecx
mov	[esp+0Ch], edx
mov	dword ptr [esp+8], offset a02u02u02u02u02 
mov	[esp+4], esi	
mov	eax, [ebp+ret_string]
mov	[esp], eax	
call	_silc_snprintf
test	eax, eax
js	loc_641DFAD4
mov	dx, [time_val_0+6]
test	edx, 7C0h
jz	short loc_641DFAA4
mov	cl, [time_val_0+8]
mov	time_val_0, edx
shr	bx, 6
mov	dl, cl
and	edx, 40h
cmp	dl, 1
sbb	edx, edx
and	edx, 2
add	edx, 2Bh
and	ecx, 3Fh
mov	[esp+14h], ecx
mov	ecx, ebx
and	ecx, 1Fh
mov	[esp+10h], ecx
mov	[esp+0Ch], edx
mov	dword ptr [esp+8], offset aC02u02u 
sub	esi, ret
mov	[esp+4], esi	
add	ret, [ebp+ret_string]
mov	[esp], eax	
call	_silc_snprintf
not	eax
shr	eax, 1Fh
add	esp, 3Ch
pop	ebx
pop	esi
pop	edi
leave
retn
align 4
mov	cl, [time_val_0+8]
test	cl, 3Fh
jnz	short loc_641DFA52
mov	dword ptr [esp+8], offset aZ 
sub	esi, ret
mov	[esp+4], esi	
add	ret, [ebp+ret_string]
mov	[esp], eax	
call	_silc_snprintf
not	eax
shr	eax, 1Fh
add	esp, 3Ch
pop	time_val_0
pop	esi
pop	edi
leave
retn
align 4
xor	ret, ret
add	esp, 3Ch
pop	time_val_0
pop	esi
pop	edi
leave
retn
align 10h
public _silc_time_universal
push	ebp
mov	ebp, esp
push	edi
push	esi
push	ebx
sub	esp, 7Ch
mov	ebx, [ebp+ret_time]
test	ebx, ebx
jz	loc_641DFD0D
mov	[ebp+z], 0
mov	[ebp+second], 0
mov	[ebp+minute], 0
mov	[ebp+hour], 0
mov	ecx, 0Ch
xor	eax, eax
mov	edi, ret_time_0
rep stosb
lea	eax, [ebp+z]
mov	[esp+20h], eax
lea	eax, [ebp+second]
mov	[esp+1Ch], eax
lea	ret_time_0, [ebp+minute]
mov	[esp+18h], edi
lea	esi, [ebp+hour]
mov	[esp+14h], esi
lea	eax, [ebp+day]
mov	[esp+10h], eax
lea	eax, [ebp+month]
mov	[esp+0Ch], eax
lea	eax, [ebp+year]
mov	[esp+8], eax
mov	dword ptr [esp+4], offset a02u02u02u02u_0 
mov	eax, [ebp+universal_time]
mov	[esp], eax	
call	_sscanf
cmp	eax, 2
jle	short loc_641DFB90
mov	ecx, [ebp+second]
mov	[ebp+var_48], ecx
mov	ret, [ebp+minute]
mov	[ebp+var_44], eax
mov	ecx, [ebp+hour]
mov	[ebp+var_40], ecx
mov	eax, [ebp+day]
mov	[ebp+var_4C], eax
mov	edx, [ebp+month]
mov	eax, [ebp+year]
cmp	eax, 8000h
ja	short loc_641DFB90
lea	ecx, [edx-1]
cmp	ecx, 0Bh
jbe	short loc_641DFB9C
xchg	ax, ax
			
xor	ret, ret
			
add	esp, 7Ch
pop	ret_time_0
pop	esi
pop	edi
leave
retn
align 4
mov	ecx, [ebp+var_4C]
dec	ecx
cmp	ecx, 1Eh
ja	short loc_641DFB90
cmp	[ebp+var_40], 17h
ja	short loc_641DFB90
cmp	[ebp+var_44], 3Ch
ja	short loc_641DFB90
cmp	[ebp+var_48], 3Dh
ja	short loc_641DFB90
and	eax, 7FFFh
mov	ecx, [ebx]
and	ecx, 0FFFF8000h
mov	word ptr [ebp+var_3C], cx
or	word ptr [ebp+var_3C], ax
mov	ecx, [ebp+var_3C]
mov	[ret_time_0], cx
mov	ecx, edx
and	ecx, 0Fh
shl	ecx, 0Fh
mov	edx, [ret_time_0]
and	edx, 0FFF87FFFh
or	edx, ecx
mov	[ret_time_0], edx
mov	cl, byte ptr [ebp+var_4C]
shl	ecx, 3
mov	dl, [ret_time_0+2]
and	edx, 7
or	edx, ecx
mov	[ret_time_0+2],	dl
mov	cl, byte ptr [ebp+var_40]
and	ecx, 1Fh
mov	dl, [ret_time_0+3]
and	edx, 0FFFFFFE0h
or	edx, ecx
mov	[ret_time_0+3],	dl
mov	cl, byte ptr [ebp+var_44]
and	ecx, 3Fh
mov	dl, [ret_time_0+4]
and	edx, 0FFFFFFC0h
or	edx, ecx
mov	[ret_time_0+4],	dl
mov	ecx, [ebp+var_48]
and	ecx, 3Fh
shl	ecx, 6
mov	edx, [ret_time_0+4]
and	edx, 0FFFFF03Fh
or	edx, ecx
mov	[ret_time_0+4],	dx
and	dword ptr [ret_time_0+4], 0FFC00FFFh
mov	dl, [ebp+z]
cmp	dl, 2Dh
jz	short loc_641DFC90
cmp	dl, 2Bh
jz	short loc_641DFC90
cmp	dl, 5Ah
jnz	loc_641DFB90
mov	edx, [ret_time_0]
add	eax, 76Ch
and	eax, 7FFFh
and	edx, 0FFFF8000h
or	edx, eax
mov	[ret_time_0], dx
movzx	ecx, ax
cmp	ecx, 79Dh
jg	loc_641DFD0D
add	eax, 64h
and	eax, 7FFFh
and	edx, 0FFFF8000h
or	edx, eax
mov	[ret_time_0], dx
mov	al, 1
jmp	loc_641DFB92
align 10h
			
mov	[esp+0Ch], edi
mov	[esp+8], esi
mov	dword ptr [esp+4], offset a02u02u 
mov	eax, [ebp+universal_time]
add	eax, 3
mov	[esp], eax	
call	_sscanf
cmp	eax, 2
jnz	loc_641DFB90
mov	ret, [ebp+hour]
cmp	eax, 17h
ja	loc_641DFB90
mov	ecx, [ebp+minute]
cmp	ecx, 3Ch
ja	loc_641DFB90
and	eax, 1Fh
shl	eax, 6
mov	dx, [ret_time_0+6]
and	edx, 0FFFFF83Fh
or	edx, eax
mov	[ret_time_0+6],	dx
and	ecx, 3Fh
mov	al, [ret_time_0+8]
and	eax, 0FFFFFF80h
cmp	[ebp+z], 2Dh
setnz	dl
shl	edx, 6
or	eax, ecx
or	eax, edx
mov	[ret_time_0+8],	al
mov	edx, [ret_time_0]
mov	eax, edx
and	eax, 7FFFh
jmp	loc_641DFC50
			
mov	al, 1
jmp	loc_641DFB92
public _silc_time_generalized
push	ebp
mov	ebp, esp
push	edi
push	esi
push	ebx
sub	esp, 7Ch
mov	eax, [ebp+ret_time]
test	eax, eax
jz	loc_641DFF1C
mov	[ebp+z], 0
mov	[ebp+msecond], 0
mov	[ebp+second], 0
mov	[ebp+minute], 0
mov	[ebp+hour], 0
mov	ecx, 0Ch
xor	eax, eax
mov	edi, [ebp+ret_time]
rep stosb
lea	eax, [ebp+second]
mov	[esp+1Ch], eax
lea	ebx, [ebp+minute]
mov	[esp+18h], ebx
lea	esi, [ebp+hour]
mov	[esp+14h], esi
lea	eax, [ebp+day]
mov	[esp+10h], eax
lea	eax, [ebp+month]
mov	[esp+0Ch], eax
lea	eax, [ebp+year]
mov	[esp+8], eax
mov	dword ptr [esp+4], offset a04u02u02u02u02 
mov	eax, [ebp+generalized_time]
mov	[esp], eax	
call	_sscanf
cmp	eax, 2
jle	short loc_641DFDC0
mov	edx, [ebp+second]
mov	[ebp+var_54], edx
mov	ecx, [ebp+minute]
mov	[ebp+var_50], ecx
mov	ret_time_0, [ebp+hour]
mov	[ebp+var_5C], edi
mov	ecx, [ebp+day]
mov	edx, [ebp+month]
mov	ret, [ebp+year]
cmp	eax, 8000h
ja	short loc_641DFDC0
lea	edi, [edx-1]
cmp	edi, 0Bh
jbe	short loc_641DFDCC
			
xor	ret, ret
add	esp, 7Ch
pop	ebx
pop	esi
pop	edi
leave
retn
align 4
lea	edi, [ecx-1]
cmp	edi, 1Eh
ja	short loc_641DFDC0
cmp	[ebp+var_5C], 17h
ja	short loc_641DFDC0
cmp	[ebp+var_50], 3Ch
ja	short loc_641DFDC0
cmp	[ebp+var_54], 3Dh
ja	short loc_641DFDC0
and	eax, 7FFFh
mov	word ptr [ebp+var_4C], ax
mov	edi, [ebp+ret_time]
mov	eax, [edi]
and	eax, 0FFFF8000h
or	eax, [ebp+var_4C]
mov	[edi], ax
and	edx, 0Fh
shl	edx, 0Fh
mov	eax, [edi]
and	eax, 0FFF87FFFh
or	eax, edx
mov	[edi], eax
shl	ecx, 3
mov	al, [edi+2]
and	eax, 7
or	eax, ecx
mov	[edi+2], al
mov	al, byte ptr [ebp+var_5C]
and	eax, 1Fh
mov	edi, eax
mov	edx, [ebp+ret_time]
mov	al, [edx+3]
and	eax, 0FFFFFFE0h
or	eax, edi
mov	[edx+3], al
mov	dl, byte ptr [ebp+var_50]
and	edx, 3Fh
mov	ecx, [ebp+ret_time]
mov	al, [ecx+4]
and	eax, 0FFFFFFC0h
or	eax, edx
mov	[ecx+4], al
mov	edx, [ebp+var_54]
and	edx, 3Fh
shl	edx, 6
mov	eax, [ecx+4]
and	eax, 0FFFFF03Fh
or	eax, edx
mov	[ecx+4], ax
and	dword ptr [ecx+4], 0FFC00FFFh
lea	edi, [ebp+z]
mov	[esp+8], edi
mov	dword ptr [esp+4], offset aC 
mov	eax, [ebp+generalized_time]
add	eax, 4
mov	[esp], eax	
call	_sscanf
dec	eax
jnz	loc_641DFDC0
mov	al, [ebp+z]
cmp	al, 2Eh
jz	loc_641DFF26
mov	edx, 4
			
cmp	al, 2Dh
jz	short loc_641DFEA2
cmp	al, 2Bh
jnz	short loc_641DFF1C
mov	[esp+0Ch], ebx
mov	[esp+8], esi
mov	dword ptr [esp+4], offset a02u02u 
mov	ecx, [ebp+generalized_time]
lea	ret, [ecx+i+1]
mov	[esp], ret	
call	_sscanf
cmp	ret, 2
jnz	loc_641DFDC0
mov	ret, [ebp+hour]
cmp	eax, 17h
ja	loc_641DFDC0
mov	ecx, [ebp+minute]
cmp	ecx, 3Ch
ja	loc_641DFDC0
and	eax, 1Fh
shl	eax, 6
mov	ebx, [ebp+ret_time]
mov	dx, [ebx+6]
and	edx, 0FFFFF83Fh
or	edx, eax
mov	[ebx+6], dx
and	ecx, 3Fh
mov	al, [ebx+8]
and	eax, 0FFFFFF80h
cmp	[ebp+z], 2Dh
setnz	dl
shl	edx, 6
or	eax, ecx
or	eax, edx
mov	[ebx+8], al
mov	al, 1
jmp	loc_641DFDC2
			
mov	al, 1
add	esp, 7Ch
pop	ebx
pop	esi
pop	edi
leave
retn
lea	eax, [ebp+l]
mov	[esp+0Ch], eax
lea	eax, [ebp+msecond]
mov	[esp+8], eax
mov	dword ptr [esp+4], offset aUN 
mov	eax, [ebp+generalized_time]
add	eax, 5
mov	[esp], eax	
call	_sscanf
dec	eax
jnz	loc_641DFDC0
mov	ecx, [ebp+l]
cmp	ecx, 4
jle	short loc_641DFFD8
mov	edx, [ebp+msecond]
mov	edi, 0CCCCCCCDh
lea	esi, [esi+0]
mov	ret, edx
mul	edi
shr	edx, 3
dec	ecx
cmp	ecx, 4
jnz	short loc_641DFF64
mov	[ebp+msecond], edx
mov	[ebp+l], ecx
and	edx, 3FFh
shl	edx, 0Ch
mov	edi, [ebp+ret_time]
mov	ret, [edi+4]
and	ret, 0FFC00FFFh
or	ret, edx
mov	[edi+4], ret
lea	edx, [ecx+5]
xor	ret, ret
mov	ecx, 0FFFFFFFFh
mov	edi, [ebp+generalized_time]
repne scasb
not	ecx
dec	ecx
cmp	ecx, i
jb	short loc_641DFFAE
mov	al, [ebp+z]
jmp	loc_641DFE9A
lea	ret, [ebp+z]
mov	[esp+8], ret
mov	dword ptr [esp+4], offset aC 
mov	ret, [ebp+generalized_time]
add	ret, i
mov	[esp], ret	
mov	[ebp+var_58], i
call	_sscanf
mov	al, [ebp+z]
mov	edx, [ebp+var_58]
jmp	loc_641DFE9A
mov	edx, [ebp+msecond]
jmp	short loc_641DFF77
align 10h
public _silc_time_usec
push	ebp
mov	ebp, esp
push	ebx
sub	esp, 24h
lea	eax, [ebp+curtime]
mov	[esp], eax	
call	_silc_gettimeofday
mov	eax, 0F4240h
imul	[ebp+curtime.tv_sec]
mov	ecx, [ebp+curtime.tv_usec]
mov	ebx, ecx
sar	ebx, 1Fh
add	eax, ecx
adc	edx, ebx
add	esp, 24h
pop	ebx
leave
retn
public _silc_time_msec
push	ebp
mov	ebp, esp
push	esi
push	ebx
sub	esp, 30h
lea	eax, [ebp+curtime]
mov	[esp], eax	
call	_silc_gettimeofday
mov	dword ptr [esp+8], 3E8h	
mov	dword ptr [esp+0Ch], 0
mov	eax, [ebp+curtime.tv_usec]
mov	[esp], eax	
cdq
mov	[esp+4], edx
call	___udivdi3
mov	ebx, eax
mov	esi, edx
mov	ecx, 3E8h
mov	eax, [ebp+curtime.tv_sec]
imul	ecx
add	ebx, eax
adc	esi, edx
mov	eax, ebx
mov	edx, esi
add	esp, 30h
pop	ebx
pop	esi
leave
retn
public _silc_time
			
push	ebp
mov	ebp, esp
sub	esp, 18h
mov	dword ptr [esp], 0 
call	_time
cdq
leave
retn
align 4
public _silc_time_string
			
push	ebp
mov	ebp, esp
push	edi
sub	esp, 24h
mov	eax, dword ptr [ebp+time_val]
mov	edx, dword ptr [ebp+time_val+4]
or	edx, eax
jz	short loc_641E00B4
mov	[ebp+curtime], eax
lea	eax, [ebp+curtime]
mov	[esp], eax	
call	_ctime
mov	edx, eax
test	eax, eax
jz	short loc_641E00AB
xor	return_time, return_time
mov	ecx, 0FFFFFFFFh
mov	edi, return_time
repne scasb
not	ecx
mov	byte ptr [edx+ecx-2], 0
mov	eax, return_time
add	esp, 24h
pop	edi
leave
retn
align 4
mov	dword ptr [esp], 0 
call	_time
mov	[ebp+curtime], eax
jmp	short loc_641E0088
align 4
public _silc_time_value
			
push	ebp
mov	ebp, esp
push	edi
push	esi
push	ebx
sub	esp, 5Ch
mov	ebx, dword ptr [ebp+time_val]
mov	esi, dword ptr [ebp+time_val+4]
mov	ecx, [ebp+ret_time]
test	ecx, ecx
jz	loc_641E039B
mov	eax, esi
or	eax, ebx
jz	loc_641E0308
mov	dword ptr [esp+8], 3E8h	
mov	dword ptr [esp+0Ch], 0
mov	[esp], ebx	
mov	[esp+4], esi
call	___udivdi3
mov	[ebp+timeval], eax
lea	eax, [ebp+timeval]
mov	[esp], eax	
call	_localtime
mov	[ebp+t], eax
test	eax, eax
jz	short loc_641E015A
mov	ecx, 0Ch
xor	eax, eax
mov	edi, [ebp+ret_time]
rep stosb
mov	ecx, [ebp+t]
mov	ecx, [ecx]
mov	[ebp+var_3C], ecx
mov	eax, [ebp+t]
mov	eax, [eax+4]
mov	[ebp+var_38], eax
mov	edx, [ebp+t]
mov	ecx, [edx+8]
mov	ret_time_0, [edx+0Ch]
mov	eax, [edx+10h]
mov	edx, [edx+14h]
add	edx, 76Ch
mov	[ebp+var_34], edx
cmp	edx, 8000h
jbe	short loc_641E0164
			
xor	eax, eax
add	esp, 5Ch
pop	ebx
pop	esi
pop	edi
leave
retn
lea	edx, [eax+1]
mov	[ebp+var_40], edx
cmp	eax, 0Bh
ja	short loc_641E015A
lea	eax, [edi-1]
cmp	eax, 1Eh
ja	short loc_641E015A
cmp	ecx, 17h
ja	short loc_641E015A
cmp	[ebp+var_38], 3Ch
ja	short loc_641E015A
cmp	[ebp+var_3C], 3Dh
ja	short loc_641E015A
mov	dword ptr [esp+8], 3E8h	
mov	dword ptr [esp+0Ch], 0
mov	[esp], ebx	
mov	[esp+4], esi
mov	[ebp+var_44], ecx
call	___umoddi3
mov	edx, eax
cmp	eax, 3E8h
mov	ecx, [ebp+var_44]
ja	short loc_641E015A
mov	ebx, [ebp+var_34]
and	ebx, 7FFFh
mov	esi, [ebp+ret_time]
mov	eax, [esi]
and	eax, 0FFFF8000h
or	eax, ebx
mov	[esi], ax
mov	ebx, [ebp+var_40]
and	ebx, 0Fh
shl	ebx, 0Fh
mov	eax, [esi]
and	eax, 0FFF87FFFh
or	eax, ebx
mov	[esi], eax
shl	edi, 3
mov	al, [esi+2]
and	eax, 7
or	eax, edi
mov	[esi+2], al
and	ecx, 1Fh
mov	al, [esi+3]
and	eax, 0FFFFFFE0h
or	eax, ecx
mov	[esi+3], al
mov	cl, byte ptr [ebp+var_38]
and	ecx, 3Fh
mov	al, [esi+4]
and	eax, 0FFFFFFC0h
or	eax, ecx
mov	[esi+4], al
mov	ecx, [ebp+var_3C]
and	ecx, 3Fh
shl	ecx, 6
mov	eax, [esi+4]
and	eax, 0FFFFF03Fh
or	eax, ecx
mov	[esi+4], ax
and	edx, 3FFh
shl	edx, 0Ch
mov	eax, [esi+4]
and	eax, 0FFC00FFFh
or	eax, edx
mov	[esi+4], eax
mov	eax, [ebp+t]
mov	edx, [eax+20h]
test	edx, edx
setnz	al
shl	eax, 7
mov	cl, [esi+8]
and	ecx, 7Fh
or	ecx, eax
mov	[esi+8], cl
mov	eax, ds:__imp___timezone
mov	esi, [eax]
mov	eax, esi
shr	eax, 1Fh
shl	eax, 6
and	ecx, 0FFFFFFBFh
or	ecx, eax
mov	edx, [ebp+ret_time]
mov	[edx+8], cl
test	cl, 40h
jz	loc_641E0348
mov	ebx, 91A2B3C5h
mov	eax, esi
imul	ebx
mov	[ebp+t], eax
mov	[ebp+var_2C], edx
lea	eax, [esi+edx]
sar	eax, 0Bh
mov	ebx, esi
sar	ebx, 1Fh
sub	ebx, eax
and	ebx, 1Fh
shl	ebx, 6
mov	edx, [ebp+ret_time]
mov	ax, [edx+6]
and	eax, 0FFFFF83Fh
or	eax, ebx
mov	[edx+6], ax
mov	eax, esi
neg	eax
mov	edx, 0E10h
mov	ebx, edx
cdq
idiv	ebx
and	edx, 3Fh
mov	al, dl
and	eax, 3Fh
and	ecx, 0FFFFFFC0h
or	ecx, eax
mov	ebx, [ebp+ret_time]
mov	[ebx+8], cl
test	cl, 3Fh
jz	loc_641E039B
movzx	ebx, dl
mov	esi, 88888889h
mov	eax, ebx
imul	esi
mov	[ebp+t], eax
mov	[ebp+var_2C], edx
mov	esi, [ebp+var_2C]
lea	edx, [ebx+esi]
sar	edx, 5
and	edx, 3Fh
and	ecx, 0FFFFFFC0h
or	ecx, edx
mov	eax, [ebp+ret_time]
mov	[eax+8], cl
mov	al, 1
add	esp, 5Ch
pop	ebx
pop	esi
pop	edi
leave
retn
align 4
lea	eax, [ebp+tv]
mov	[esp], eax	
call	_silc_gettimeofday
mov	dword ptr [esp+8], 3E8h	
mov	dword ptr [esp+0Ch], 0
mov	eax, [ebp+tv.tv_usec]
mov	[esp], eax	
cdq
mov	[esp+4], edx
call	___udivdi3
mov	ebx, eax
mov	esi, edx
mov	eax, 3E8h
imul	[ebp+tv.tv_sec]
add	ebx, eax
adc	esi, edx
jmp	loc_641E00EC
mov	ebx, 91A2B3C5h
mov	eax, esi
imul	ebx
mov	[ebp+t], eax
mov	[ebp+var_2C], edx
lea	eax, [esi+edx]
sar	eax, 0Bh
mov	ebx, esi
sar	ebx, 1Fh
sub	eax, ebx
mov	edi, eax
and	edi, 1Fh
shl	edi, 6
mov	edx, [ebp+ret_time]
mov	bx, [edx+6]
and	ebx, 0FFFFF83Fh
or	ebx, edi
mov	[edx+6], bx
lea	eax, [eax+eax*2]
lea	ebx, [eax+eax*4]
mov	eax, ebx
shl	eax, 4
sub	eax, ebx
shl	eax, 4
mov	edx, esi
sub	dl, al
and	edx, 3Fh
jmp	loc_641E02BA
			
mov	al, 1
jmp	loc_641E015C
align 4
public _silc_timezone
push	ebp
mov	ebp, esp
push	esi
push	ebx
sub	esp, 30h
mov	esi, [ebp+timezone]
mov	ebx, [ebp+timezone_size]
cmp	ebx, 5
ja	short loc_641E03C0
xor	eax, eax
add	esp, 30h
pop	timezone_size_0
pop	timezone_0
leave
retn
lea	eax, [ebp+curtime]
mov	[esp+8], eax	
mov	dword ptr [esp], 0 
mov	dword ptr [esp+4], 0
call	_silc_time_value
test	al, al
jz	short loc_641E03B7
mov	dx, word ptr [ebp+curtime._bf4+2]
test	edx, 7C0h
jnz	short loc_641E0430
mov	al, byte ptr [ebp+curtime._bf8]
test	al, 3Fh
jnz	loc_641E047C
shr	dx, 6
and	eax, 40h
cmp	al, 1
sbb	eax, eax
and	eax, 2
add	eax, 2Bh
and	edx, 1Fh
mov	[esp+10h], edx
mov	[esp+0Ch], eax
mov	dword ptr [esp+8], offset aC02d	
mov	[esp+4], timezone_size_0 
mov	[esp], timezone_0 
call	_silc_snprintf
mov	al, 1
add	esp, 30h
pop	timezone_size_0
pop	timezone_0
leave
retn
align 10h
mov	al, byte ptr [ebp+curtime._bf8]
mov	cl, al
and	ecx, 3Fh
jz	short loc_641E03F6
shr	dx, 6
and	eax, 40h
cmp	al, 1
sbb	eax, eax
and	eax, 2
add	eax, 2Bh
movzx	ecx, cl
mov	[esp+14h], ecx
and	edx, 1Fh
mov	[esp+10h], edx
mov	[esp+0Ch], eax
mov	dword ptr [esp+8], offset aC02d02d 
mov	[esp+4], timezone_size_0 
mov	[esp], timezone_0 
call	_silc_snprintf
mov	al, 1
add	esp, 30h
pop	timezone_size_0
pop	timezone_0
leave
retn
align 4
mov	dword ptr [esp+8], offset aZ 
mov	[esp+4], timezone_size_0 
mov	[esp], timezone_0 
call	_silc_snprintf
mov	al, 1
jmp	loc_641E03B9
align 4
public _silc_utf8_strncasecmp
push	ebp
mov	ebp, esp
push	edi
push	esi
push	ebx
sub	esp, 4Ch
mov	eax, [ebp+s1]
mov	esi, [ebp+s2]
mov	ebx, [ebp+n]
cmp	eax, esi
jz	loc_641E056C
mov	dword ptr [esp+1Ch], 7 
lea	edx, [ebp+s1u_len]
mov	[esp+18h], edx	
lea	edx, [ebp+s1u]
mov	[esp+14h], edx	
mov	dword ptr [esp+10h], 0 
mov	dword ptr [esp+0Ch], offset profile_name 
mov	dword ptr [esp+8], 7 
mov	[esp+4], n_0	
mov	[esp], s1_0	
call	_silc_stringprep
test	eax, eax
jz	short loc_641E04FC
xor	status,	status
add	esp, 4Ch
pop	n_0
pop	s2_0
pop	edi
leave
retn
align 4
mov	dword ptr [esp+1Ch], 7 
lea	status,	[ebp+s2u_len]
mov	[esp+18h], eax	
lea	eax, [ebp+s2u]
mov	[esp+14h], eax	
mov	dword ptr [esp+10h], 0 
mov	dword ptr [esp+0Ch], offset profile_name 
mov	dword ptr [esp+8], 7 
mov	[esp+4], n_0	
mov	[esp], s2_0	
call	_silc_stringprep
test	eax, eax
jnz	short loc_641E04F0
mov	edx, [ebp+s1u]
cmp	n_0, n_0
mov	edi, [ebp+s2u]
mov	s2_0, edx
mov	ecx, n_0
repe cmpsb
setz	al
mov	[esp], edx	
mov	[ebp+var_2C], al
call	_silc_free
mov	edx, [ebp+s2u]
mov	[esp], edx	
call	_silc_free
mov	al, [ebp+var_2C]
add	esp, 4Ch
pop	ebx
pop	esi
pop	edi
leave
retn
mov	al, 1
add	esp, 4Ch
pop	n_0
pop	s2_0
pop	edi
leave
retn
align 4
public _silc_utf8_strcasecmp
push	ebp
mov	ebp, esp
push	edi
push	esi
push	ebx
sub	esp, 2Ch
mov	esi, [ebp+s1]
mov	ebx, [ebp+s2]
cmp	esi, ebx
jz	short loc_641E05D4
mov	edx, 0FFFFFFFFh
xor	eax, eax
mov	ecx, edx
mov	edi, s1_0
repne scasb
not	ecx
dec	ecx
mov	[ebp+n], ecx
mov	ecx, edx
mov	edi, s2_0
repne scasb
mov	edx, ecx
not	edx
dec	edx
cmp	[ebp+n], edx
jz	short loc_641E05B8
add	esp, 2Ch
pop	ebx
pop	esi
pop	edi
leave
retn
align 4
mov	eax, [ebp+n]
mov	[esp+8], eax	
mov	[esp+4], ebx	
mov	[esp], esi	
call	_silc_utf8_strncasecmp
add	esp, 2Ch
pop	s2_0
pop	s1_0
pop	edi
leave
retn
align 4
mov	al, 1
add	esp, 2Ch
pop	s2_0
pop	s1_0
pop	edi
leave
retn
align 10h
public _silc_utf8_decode
			
push	ebp
mov	ebp, esp
push	edi
push	esi
push	ebx
sub	esp, 6Ch
mov	esi, [ebp+utf8]
mov	edx, [ebp+bin]
test	esi, esi
jz	loc_641E069C	
mov	eax, [ebp+utf8_len]
test	eax, eax
jz	short loc_641E0668
cmp	[ebp+bin_encoding], 7
jz	short loc_641E0640
cmp	[ebp+bin_encoding], 6
jz	loc_641E0AD0
xor	edi, edi
xor	ebx, ebx
mov	eax, [ebp+utf8_len]
dec	eax
mov	[ebp+var_50], eax
mov	al, [utf8_0+i]
test	al, al
js	loc_641E0781
and	eax, 7Fh
mov	[ebp+bytes], 1
			
cmp	[ebp+bin_encoding], 0Ch	
ja	short loc_641E069C 
mov	cv, [ebp+bin_encoding]
jmp	ds:off_64265520[ecx*4] 
align 10h
mov	eax, [ebp+utf8_len]
mov	[esp+4], eax	
mov	[esp], utf8_0	
mov	[ebp+var_5C], bin_0
call	_silc_utf8_valid
test	al, al
mov	edx, [ebp+var_5C]
jz	short loc_641E069C 
mov	ecx, [ebp+bin_size]
cmp	[ebp+utf8_len],	ecx
ja	short loc_641E069C 
mov	edi, edx
mov	ecx, [ebp+utf8_len]
rep movsb
			
mov	charval, [ebp+utf8_len]
add	esp, 6Ch
pop	ebx
pop	utf8_0
pop	edi
leave
retn
align 4
cmp	byte ptr [ebp+k], 9Fh
jbe	loc_641E0B93
cmp	byte ptr [ebp+k], 0BFh
ja	loc_641E0B93
cmp	byte ptr [ebp+var_1C], 0
jns	loc_641E0B93
cmp	byte ptr [ebp+var_1C], 0BFh
ja	loc_641E0B93
			
mov	[ebp+utf8_len],	0
mov	charval, [ebp+utf8_len]
add	esp, 6Ch
pop	enclen
pop	enclen
pop	i
leave
retn
align 10h
			
test	bin_0, bin_0	
jz	loc_641E0A74
lea	ecx, [enclen+4]
mov	[ebp+var_4C], ecx
cmp	[ebp+bin_size],	ecx
jb	short loc_641E069C 
mov	[bin_0+enclen],	charval
jmp	loc_641E0760
align 4
			
test	bin_0, bin_0	
jz	loc_641E0A74
lea	ecx, [enclen+4]
mov	[ebp+var_4C], ecx
cmp	[ebp+bin_size],	ecx
jb	short loc_641E069C 
mov	ecx, charval
shr	ecx, 18h
mov	[bin_0+enclen],	cl
mov	ecx, charval
shr	ecx, 10h
mov	[bin_0+enclen+1], cl
mov	ecx, charval
shr	ecx, 8
mov	[bin_0+enclen+2], cl
mov	[bin_0+enclen+3], al
jmp	short loc_641E0760
align 10h
			
test	bin_0, bin_0	
jz	loc_641E0A68
lea	ecx, [enclen+2]
mov	[ebp+var_4C], ecx
cmp	[ebp+bin_size],	ecx
jb	short loc_641E069C 
mov	[bin_0+enclen],	ax
jmp	short loc_641E0760
align 4
			
test	bin_0, bin_0	
jz	loc_641E0A68
lea	ecx, [enclen+2]
mov	[ebp+var_4C], ecx
cmp	[ebp+bin_size],	ecx
jb	loc_641E069C	
mov	ecx, charval
shr	ecx, 8
mov	[bin_0+enclen],	cl
mov	[bin_0+enclen+1], al
jmp	short loc_641E0760
align 4
			
test	bin_0, bin_0	
jz	loc_641E0BD4
lea	ecx, [enclen+1]
mov	[ebp+var_4C], ecx
cmp	[ebp+bin_size],	ecx
jb	loc_641E069C	
mov	[bin_0+enclen],	al
xchg	ax, ax
			
inc	i
mov	[ebp+var_1C], edi
mov	i, [ebp+utf8_len]
cmp	[ebp+var_1C], edi
jnb	loc_641E0CD8
mov	edi, [ebp+var_1C]
mov	enclen,	[ebp+var_4C]
mov	al, [utf8_0+i]
test	al, al
jns	loc_641E0624
movzx	cv, al
mov	[ebp+var_54], ecx
and	ecx, 0E0h
cmp	ecx, 0C0h
jz	loc_641E0B04
mov	ecx, [ebp+var_54]
and	ecx, 0F0h
cmp	ecx, 0E0h
jz	loc_641E0B48
mov	ecx, [ebp+var_54]
and	ecx, 0F8h
cmp	ecx, 0F0h
jz	loc_641E09D0
mov	ecx, [ebp+var_54]
and	ecx, 0FCh
cmp	ecx, 0F8h
jz	loc_641E0BFC
mov	ecx, [ebp+var_54]
and	ecx, 0FEh
cmp	ecx, 0FCh
jnz	loc_641E069C	
lea	ecx, [i+5]
mov	[ebp+bytes], ecx
cmp	[ebp+utf8_len],	ecx
jbe	loc_641E069C	
lea	ecx, [i+1]
mov	[ebp+var_1C], ecx
mov	cl, [utf8_0+ecx]
mov	byte ptr [ebp+k], cl
and	ecx, 0C0h
add	ecx, 0FFFFFF80h
jnz	loc_641E069C	
movzx	ecx, byte ptr [utf8_0+i+2]
and	ecx, 0C0h
add	ecx, 0FFFFFF80h
jnz	loc_641E069C	
movzx	ecx, byte ptr [utf8_0+i+3]
and	ecx, 0C0h
add	ecx, 0FFFFFF80h
jnz	loc_641E069C	
movzx	ecx, byte ptr [utf8_0+i+4]
and	ecx, 0C0h
add	ecx, 0FFFFFF80h
jnz	loc_641E069C	
mov	i, [ebp+bytes]
movzx	ecx, byte ptr [utf8_0+edi]
and	ecx, 0C0h
add	ecx, 0FFFFFF80h
jnz	loc_641E069C	
mov	ecx, eax
and	charval, 1
shl	charval, 1Eh
mov	edi, [ebp+var_1C]
add	i, 4
mov	al, byte ptr [ebp+k]
and	eax, 3Fh
shl	charval, 18h
or	charval, ecx
mov	ecx, [ebp+var_1C]
movzx	ecx, byte ptr [utf8_0+ecx+1]
and	ecx, 3Fh
shl	ecx, 12h
or	charval, ecx
mov	ecx, [ebp+var_1C]
movzx	ecx, byte ptr [utf8_0+ecx+2]
and	ecx, 3Fh
shl	ecx, 0Ch
or	charval, ecx
movzx	ecx, byte ptr [utf8_0+i]
and	ecx, 3Fh
or	charval, ecx
mov	ecx, [ebp+var_1C]
movzx	ecx, byte ptr [utf8_0+ecx+3]
and	ecx, 3Fh
shl	ecx, 6
or	charval, ecx
cmp	charval, 3FFFFFFh
jbe	loc_641E069C	
mov	[ebp+bytes], 6
jmp	loc_641E062E
align 4
			
lea	charval, [i+1]	
mov	[ebp+var_1C], eax
mov	ecx, eax
sub	ecx, [ebp+bytes]
xor	eax, eax
mov	[ebp+k], 0
lea	ecx, [utf8_0+ecx]
mov	[ebp+var_4C], ecx
mov	[ebp+var_54], utf8_0
mov	esi, [ebp+var_4C]
mov	cl, [esi+eax]
test	enclen,	enclen
jnz	short loc_641E090D
cmp	cl, 23h
jz	loc_641E0AB4
cmp	cl, 20h
jz	loc_641E0AB4
cmp	[ebp+var_50], i
jz	loc_641E0ADC
lea	eax, [cv-2Bh]
cmp	al, 1
jbe	loc_641E0A80
cmp	cl, 22h
jz	loc_641E0A80
cmp	cl, 5Ch
jz	loc_641E0A80
cmp	cl, 3Ch
jz	loc_641E0A80
cmp	cl, 3Eh
jz	loc_641E0A80
cmp	cl, 3Bh
jz	loc_641E0A80
movzx	eax, cl
mov	[ebp+var_58], eax
mov	esi, ds:__imp____mb_cur_max
cmp	dword ptr [esi], 1
jz	loc_641E0BE0
mov	dword ptr [esp+4], 157h	
mov	eax, [ebp+var_58]
mov	[esp], eax	
mov	[ebp+var_5C], bin_0
mov	[ebp+var_60], cl
call	__isctype
mov	cl, [ebp+var_60]
mov	edx, [ebp+var_5C]
test	eax, eax
jnz	loc_641E0CC0
test	edx, edx
jz	loc_641E0CEE
lea	esi, [enclen+3]
cmp	[ebp+bin_size],	enclen
jb	loc_641E069C	
mov	byte ptr [bin_0+ebx], 5Ch
mov	cv, [ebp+var_58]
mov	[esp+0Ch], ecx
mov	dword ptr [esp+8], offset a02x_0 
mov	dword ptr [esp+4], 3 
lea	eax, [bin_0+ebx+1]
mov	[esp], eax	
mov	[ebp+var_5C], bin_0
call	_silc_snprintf
mov	edx, [ebp+var_5C]
jmp	loc_641E0A9C
lea	ecx, [i+3]
cmp	[ebp+utf8_len],	i
jbe	loc_641E069C	
movzx	eax, byte ptr [utf8_0+edi+1]
mov	[ebp+bytes], eax
and	eax, 0C0h
add	eax, 0FFFFFF80h
jnz	loc_641E069C	
movzx	eax, byte ptr [utf8_0+i+2]
and	eax, 0C0h
add	eax, 0FFFFFF80h
jnz	loc_641E069C	
movzx	eax, byte ptr [utf8_0+ecx]
mov	[ebp+k], eax
and	eax, 0C0h
add	eax, 0FFFFFF80h
jnz	loc_641E069C	
mov	eax, [ebp+var_54]
and	eax, 7
shl	eax, 12h
mov	[ebp+var_54], eax
add	edi, 2
mov	[ebp+var_4C], edi
mov	edi, i
mov	eax, [ebp+bytes]
and	charval, 3Fh
shl	charval, 0Ch
mov	i, [ebp+k]
and	ecx, 3Fh
or	charval, ecx
or	charval, [ebp+var_54]
mov	ecx, [ebp+var_4C]
movzx	ecx, byte ptr [utf8_0+ecx]
and	ecx, 3Fh
shl	ecx, 6
or	charval, ecx
cmp	charval, 0FFFFh
jbe	loc_641E069C	
mov	[ebp+bytes], 4
jmp	loc_641E062E
			
add	enclen,	2
mov	[ebp+var_4C], ebx
jmp	loc_641E0760
align 4
			
add	enclen,	4
mov	[ebp+var_4C], ebx
jmp	loc_641E0760
align 10h
			
test	bin_0, bin_0
jz	loc_641E0BCC
lea	esi, [enclen+2]
cmp	[ebp+bin_size],	enclen
jb	loc_641E069C	
mov	byte ptr [bin_0+ebx], 5Ch
mov	[bin_0+ebx+1], cl
			
inc	[ebp+k]
mov	eax, [ebp+k]
cmp	[ebp+bytes], eax
jbe	loc_641E0CE3
mov	ebx, enclen
jmp	loc_641E08F1
align 4
			
test	bin_0, bin_0
jz	short loc_641E0AC8
cmp	[ebp+bin_size],	1
jbe	loc_641E069C	
mov	byte ptr [bin_0], 5Ch
mov	[bin_0+1], cl
mov	esi, 2
jmp	short loc_641E0A9C
align 10h
mov	[ebp+bin_encoding], 0
jmp	loc_641E060E
cmp	cl, 20h
jnz	loc_641E0916
test	bin_0, bin_0
jz	loc_641E0BCC
lea	esi, [enclen+2]
cmp	[ebp+bin_size],	enclen
jb	loc_641E069C	
mov	byte ptr [bin_0+ebx], 5Ch
mov	byte ptr [bin_0+ebx+1],	20h
jmp	short loc_641E0A9C
inc	i
cmp	[ebp+utf8_len],	i
jbe	loc_641E069C	
movzx	ecx, byte ptr [utf8_0+i]
mov	eax, ecx
and	eax, 0C0h
add	eax, 0FFFFFF80h
jnz	loc_641E069C	
mov	eax, [ebp+var_54]
and	charval, 1Fh
shl	charval, 6
and	ecx, 3Fh
or	charval, ecx
cmp	charval, 7Fh
jbe	loc_641E069C	
mov	[ebp+bytes], 2
jmp	loc_641E062E
align 4
lea	ecx, [i+2]
mov	[ebp+var_1C], ecx
cmp	[ebp+utf8_len],	ecx
jbe	loc_641E069C	
inc	i
mov	cl, [utf8_0+edi]
mov	byte ptr [ebp+k], cl
movzx	ecx, cl
mov	[ebp+bytes], ecx
and	ecx, 0C0h
add	ecx, 0FFFFFF80h
jnz	loc_641E069C	
mov	ecx, [ebp+var_1C]
mov	cl, [utf8_0+ecx]
mov	byte ptr [ebp+var_1C], cl
and	ecx, 0C0h
add	ecx, 0FFFFFF80h
jnz	loc_641E069C	
cmp	al, 0EDh
jz	loc_641E0674
			
mov	ecx, [ebp+var_54]
shl	ecx, 0Ch
and	ecx, 0FFFFh
inc	edi
movzx	eax, byte ptr [utf8_0+i]
and	charval, 3Fh
or	charval, ecx
mov	ecx, [ebp+bytes]
and	ecx, 3Fh
shl	ecx, 6
or	charval, ecx
cmp	charval, 7FFh
jbe	loc_641E069C	
mov	[ebp+bytes], 3
jmp	loc_641E062E
align 4
			
lea	esi, [enclen+2]
jmp	loc_641E0A9C
inc	enclen
mov	[ebp+var_4C], ebx
jmp	loc_641E0760
align 10h
mov	esi, ds:__imp___pctype
mov	eax, [esi]
mov	esi, [ebp+var_58]
movzx	eax, word ptr [eax+esi*2]
and	eax, 157h
jmp	loc_641E0982
align 4
lea	ecx, [i+4]
mov	[ebp+k], ecx
cmp	[ebp+utf8_len],	ecx
jbe	loc_641E069C	
lea	ecx, [i+1]
mov	[ebp+var_1C], ecx
mov	cl, [utf8_0+ecx]
mov	byte ptr [ebp+bytes], cl
and	ecx, 0C0h
add	ecx, 0FFFFFF80h
jnz	loc_641E069C	
movzx	ecx, byte ptr [utf8_0+i+2]
and	ecx, 0C0h
add	ecx, 0FFFFFF80h
jnz	loc_641E069C	
movzx	ecx, byte ptr [utf8_0+i+3]
and	ecx, 0C0h
add	ecx, 0FFFFFF80h
jnz	loc_641E069C	
mov	i, [ebp+k]
movzx	ecx, byte ptr [utf8_0+edi]
and	ecx, 0C0h
add	ecx, 0FFFFFF80h
jnz	loc_641E069C	
mov	ecx, eax
and	charval, 3
shl	charval, 18h
mov	edi, [ebp+var_1C]
add	i, 3
mov	al, byte ptr [ebp+bytes]
and	eax, 3Fh
shl	charval, 12h
or	charval, ecx
mov	ecx, [ebp+var_1C]
movzx	ecx, byte ptr [utf8_0+ecx+1]
and	ecx, 3Fh
shl	ecx, 0Ch
or	charval, ecx
movzx	ecx, byte ptr [utf8_0+i]
and	ecx, 3Fh
or	charval, ecx
mov	ecx, [ebp+var_1C]
movzx	ecx, byte ptr [utf8_0+ecx+2]
and	ecx, 3Fh
shl	ecx, 6
or	charval, ecx
cmp	charval, 1FFFFFh
jbe	loc_641E069C	
mov	[ebp+bytes], 5
jmp	loc_641E062E
align 10h
test	edx, edx
jz	short loc_641E0CF6
lea	esi, [enclen+1]
cmp	[ebp+bin_size],	enclen
jb	loc_641E069C	
mov	[bin_0+ebx], cl
jmp	loc_641E0A9C
mov	bin_0, [ebp+var_4C]
mov	[ebp+utf8_len],	enclen
jmp	loc_641E0668
mov	[ebp+var_4C], enclen
mov	enclen,	[ebp+var_54]
jmp	loc_641E0764
lea	esi, [enclen+3]
jmp	loc_641E0A9C
lea	esi, [enclen+1]
jmp	loc_641E0A9C
align 10h
public _silc_utf8_valid
			
push	ebp
mov	ebp, esp
sub	esp, 28h
mov	dword ptr [esp+10h], 0 
mov	dword ptr [esp+0Ch], 0 
mov	dword ptr [esp+8], 0 
mov	eax, [ebp+utf8_len]
mov	[esp+4], eax	
mov	eax, [ebp+utf8]
mov	[esp], eax	
call	_silc_utf8_decode
test	eax, eax
setnz	al
leave
retn
align 4
public _silc_utf8_decoded_len
			
push	ebp
mov	ebp, esp
sub	esp, 28h
mov	dword ptr [esp+10h], 0 
mov	dword ptr [esp+0Ch], 0 
mov	eax, [ebp+bin_encoding]
mov	[esp+8], eax	
mov	eax, [ebp+bin_len]
mov	[esp+4], eax	
mov	eax, [ebp+bin]
mov	[esp], eax	
call	_silc_utf8_decode
leave
retn
align 4
public _silc_utf8_encode
			
push	ebp
mov	ebp, esp
push	edi
push	esi
push	ebx
sub	esp, 5Ch
mov	esi, [ebp+bin]
mov	ebx, [ebp+utf8]
test	esi, esi
jz	short loc_641E0DD8 
mov	edx, [ebp+bin_len]
test	edx, edx
jz	loc_641E0FA0
cmp	[ebp+bin_encoding], 7
jz	short loc_641E0DC0
cmp	[ebp+bin_encoding], 0Ch
jz	loc_641E109C
cmp	[ebp+bin_encoding], 6
jz	loc_641E1170
xor	edi, edi
xor	edx, edx
mov	[ebp+var_30], bin_0
mov	bin_0, enclen
lea	enclen,	[enclen+0]
cmp	[ebp+bin_encoding], 0Bh	
ja	short loc_641E0DD8 
mov	charval, [ebp+bin_encoding]
jmp	ds:off_64265554[eax*4] 
mov	eax, [ebp+bin_len]
mov	[esp+4], eax	
mov	[esp], bin_0	
call	_silc_utf8_valid
test	al, al
jnz	loc_641E1204
nop
			
xor	i, i		
			
mov	charval, bin_len_0
add	esp, 5Ch
pop	utf8_0
pop	enclen
pop	bin_len_0
leave
retn
			
mov	eax, [ebp+var_30]
add	eax, i
mov	[ebp+var_4C], eax
movzx	edx, byte ptr [eax]
mov	[ebp+var_2C], edx
mov	ecx, ds:__imp____mb_cur_max
cmp	dword ptr [ecx], 1
jz	loc_641E1010
mov	dword ptr [esp+4], 157h	
mov	edx, [ebp+var_2C]
mov	[esp], edx	
call	__isctype
test	eax, eax
jz	short loc_641E0DD8 
mov	ecx, [ebp+var_4C]
movzx	eax, byte ptr [ecx]
mov	edx, i
cmp	charval, 7Fh
jbe	short loc_641E0E7D
lea	enclen,	[enclen+0]
cmp	charval, 7FFh
ja	loc_641E0F50
test	utf8_0,	utf8_0
jz	loc_641E117C
lea	ecx, [enclen+2]
mov	[ebp+var_2C], ecx
cmp	[ebp+utf8_size], ecx
jb	short loc_641E0DD8 
mov	edi, charval
shr	edi, 6
and	edi, 1Fh
or	edi, 0FFFFFFC0h
mov	ecx, edi
mov	[utf8_0+enclen], cl
and	charval, 3Fh
or	eax, 0FFFFFF80h
mov	[utf8_0+enclen+1], al
jmp	short loc_641E0E91
align 4
			
lea	edx, [i+3]	
cmp	[ebp+bin_len], i
jbe	loc_641E0DD8	
mov	ecx, [ebp+var_30]
mov	eax, [ecx+edi]
xchg	ax, ax
			
cmp	charval, 7Fh
ja	short loc_641E0E28
test	utf8_0,	utf8_0
jz	short loc_641E0E8D
cmp	[ebp+utf8_size], enclen
jb	loc_641E0DD8	
mov	[utf8_0+enclen], al
inc	enclen
mov	[ebp+var_2C], esi
			
lea	edi, [i+1]
cmp	[ebp+bin_len], i
jbe	loc_641E124C
mov	enclen,	[ebp+var_2C]
jmp	loc_641E0DB0
align 4
			
lea	edx, [i+3]	
cmp	[ebp+bin_len], i
jbe	loc_641E0DD8	
mov	ecx, [ebp+var_30]
movzx	eax, byte ptr [ecx+i]
movzx	ecx, byte ptr [ecx+edi]
shl	ecx, 18h
or	charval, ecx
mov	ecx, [ebp+var_30]
movzx	ecx, byte ptr [ecx+edi+1]
shl	ecx, 10h
or	charval, ecx
mov	ecx, [ebp+var_30]
movzx	edi, byte ptr [ecx+edi+2]
shl	edi, 8
or	charval, edi
jmp	short loc_641E0E78
			
lea	edx, [i+1]
cmp	[ebp+bin_len], i
jbe	loc_641E0DD8	
mov	ecx, [ebp+var_30]
movzx	eax, word ptr [ecx+edi]
jmp	short loc_641E0E78
align 4
			
lea	edx, [i+1]	
cmp	[ebp+bin_len], i
jbe	loc_641E0DD8	
mov	ecx, [ebp+var_30]
movzx	eax, byte ptr [ecx+i]
movzx	edi, byte ptr [ecx+edi]
shl	edi, 8
or	charval, edi
jmp	loc_641E0E78
align 4
			
mov	edx, [ebp+var_30] 
movzx	eax, byte ptr [edx+i]
mov	edx, i
jmp	loc_641E0E78
align 4
			
mov	edx, [ebp+var_30] 
mov	al, [edx+i]
cmp	al, 20h
jz	short loc_641E0F45
movzx	edx, al
sub	edx, 30h
cmp	edx, 9
ja	loc_641E0DD8	
movzx	eax, al
mov	edx, i
jmp	loc_641E0E78
align 10h
cmp	charval, 0FFFFh
ja	short loc_641E0FB0
test	utf8_0,	utf8_0
jz	loc_641E1228
lea	ecx, [enclen+3]
mov	[ebp+var_2C], ecx
cmp	[ebp+utf8_size], ecx
jb	loc_641E0DD8	
mov	edi, charval
shr	edi, 0Ch
and	edi, 0Fh
or	edi, 0FFFFFFE0h
mov	ecx, edi
mov	[utf8_0+enclen], cl
mov	edi, charval
shr	edi, 6
and	edi, 3Fh
or	edi, 0FFFFFF80h
mov	ecx, edi
mov	[utf8_0+enclen+1], cl
and	charval, 3Fh
or	eax, 0FFFFFF80h
mov	[utf8_0+enclen+2], al
jmp	loc_641E0E91
align 10h
			
mov	edi, [ebp+bin_len]
mov	eax, edi
add	esp, 5Ch
pop	utf8_0
pop	bin_0
pop	edi
leave
retn
align 10h
cmp	charval, 1FFFFFh
ja	short loc_641E1028
test	utf8_0,	utf8_0
jz	loc_641E1256
lea	ecx, [enclen+4]
mov	[ebp+var_2C], ecx
cmp	[ebp+utf8_size], ecx
jb	loc_641E0DD8	
mov	edi, charval
shr	edi, 12h
and	edi, 7
or	edi, 0FFFFFFF0h
mov	ecx, edi
mov	[utf8_0+enclen], cl
mov	edi, charval
shr	edi, 0Ch
and	edi, 3Fh
or	edi, 0FFFFFF80h
mov	ecx, edi
mov	[utf8_0+enclen+1], cl
mov	edi, charval
shr	edi, 6
and	edi, 3Fh
or	edi, 0FFFFFF80h
mov	ecx, edi
mov	[utf8_0+enclen+2], cl
and	charval, 3Fh
or	eax, 0FFFFFF80h
mov	[utf8_0+enclen+3], al
jmp	loc_641E0E91
align 10h
mov	eax, ds:__imp___pctype
mov	eax, [eax]
mov	[ebp+var_40], eax
movzx	eax, word ptr [eax+edx*2]
and	eax, 157h
jmp	loc_641E0E14
cmp	charval, 3FFFFFFh
ja	loc_641E1188
test	utf8_0,	utf8_0
jz	loc_641E1233
lea	ecx, [enclen+5]
mov	[ebp+var_2C], ecx
cmp	[ebp+utf8_size], ecx
jb	loc_641E0DD8	
mov	edi, charval
shr	edi, 18h
and	edi, 3
or	edi, 0FFFFFFF8h
mov	ecx, edi
mov	[utf8_0+enclen], cl
mov	edi, charval
shr	edi, 12h
and	edi, 3Fh
or	edi, 0FFFFFF80h
mov	ecx, edi
mov	[utf8_0+enclen+1], cl
mov	edi, charval
shr	edi, 0Ch
and	edi, 3Fh
or	edi, 0FFFFFF80h
mov	ecx, edi
mov	[utf8_0+enclen+2], cl
mov	edi, charval
shr	edi, 6
and	edi, 3Fh
or	edi, 0FFFFFF80h
mov	ecx, edi
mov	[utf8_0+enclen+3], cl
and	charval, 3Fh
or	eax, 0FFFFFF80h
mov	[utf8_0+enclen+4], al
jmp	loc_641E0E91
mov	edi, 1
xor	eax, eax
jmp	short loc_641E10CF
align 4
mov	edx, i
			
test	utf8_0,	utf8_0
jz	short loc_641E10BE
cmp	[ebp+utf8_size], bin_len_0
jb	loc_641E0DD8	
mov	al, [bin_0+i]
mov	[utf8_0+bin_len_0-1], al
			
lea	eax, [i+1]
lea	edx, [bin_len_0+1]
cmp	[ebp+bin_len], i
jbe	loc_641E0DDA
mov	edi, edx
cmp	byte ptr [bin_0+i], 5Ch
jnz	short loc_641E10A8
lea	edx, [i+1]
cmp	[ebp+bin_len], i
jbe	loc_641E0DD8	
lea	ecx, [bin_0+i]
mov	[ebp+var_2C], ecx
mov	cl, [ecx]
mov	[ebp+cv], cl
sub	ecx, 2Bh
cmp	cl, 1
jbe	short loc_641E10AA
cmp	[ebp+cv], 22h
jz	short loc_641E10AA
cmp	[ebp+cv], 5Ch
jz	short loc_641E10AA
cmp	[ebp+cv], 3Ch
jz	short loc_641E10AA
cmp	[ebp+cv], 3Eh
jz	short loc_641E10AA
cmp	[ebp+cv], 3Bh
jz	short loc_641E10AA
cmp	[ebp+cv], 20h
jz	short loc_641E10AA
cmp	[ebp+cv], 23h
jz	short loc_641E10AA
lea	i, [eax+2]
cmp	[ebp+bin_len], i
jbe	loc_641E0DD8	
lea	eax, [ebp+hexval]
mov	[esp+8], eax
mov	dword ptr [esp+4], offset a02x_0 
mov	ecx, [ebp+var_2C]
mov	[esp], ecx	
mov	[ebp+var_34], i
call	_sscanf
dec	eax
mov	edx, [ebp+var_34]
jnz	loc_641E0DD8	
test	utf8_0,	utf8_0
jz	loc_641E10BE
cmp	[ebp+utf8_size], edi
jb	loc_641E0DD8	
mov	eax, [ebp+hexval]
mov	[utf8_0+bin_len_0-1], al
jmp	loc_641E10BE
align 10h
mov	[ebp+bin_encoding], 0
jmp	loc_641E0DA4
add	enclen,	2
mov	[ebp+var_2C], esi
jmp	loc_641E0E91
align 4
test	utf8_0,	utf8_0
jz	loc_641E123E
lea	ecx, [enclen+6]
mov	[ebp+var_2C], ecx
cmp	[ebp+utf8_size], ecx
jb	loc_641E0DD8	
mov	edi, charval
shr	edi, 1Eh
and	edi, 1
or	edi, 0FFFFFFFCh
mov	ecx, edi
mov	[utf8_0+enclen], cl
mov	edi, charval
shr	edi, 18h
and	edi, 3Fh
or	edi, 0FFFFFF80h
mov	ecx, edi
mov	[utf8_0+enclen+1], cl
mov	edi, charval
shr	edi, 12h
and	edi, 3Fh
or	edi, 0FFFFFF80h
mov	ecx, edi
mov	[utf8_0+enclen+2], cl
mov	edi, charval
shr	edi, 0Ch
and	edi, 3Fh
or	edi, 0FFFFFF80h
mov	ecx, edi
mov	[utf8_0+enclen+3], cl
mov	edi, charval
shr	edi, 6
and	edi, 3Fh
or	edi, 0FFFFFF80h
mov	ecx, edi
mov	[utf8_0+enclen+4], cl
and	charval, 3Fh
or	eax, 0FFFFFF80h
mov	[utf8_0+enclen+5], al
jmp	loc_641E0E91
align 4
test	utf8_0,	utf8_0
jz	loc_641E0FA0
mov	edx, [ebp+utf8_size]
cmp	[ebp+bin_len], edx
ja	loc_641E0DD8	
mov	edi, utf8_0
mov	ecx, [ebp+bin_len]
rep movsb
mov	utf8_0,	[ebp+bin_len]
jmp	loc_641E0DDA
align 4
add	enclen,	3
mov	[ebp+var_2C], esi
jmp	loc_641E0E91
add	enclen,	5
mov	[ebp+var_2C], esi
jmp	loc_641E0E91
add	enclen,	6
mov	[ebp+var_2C], esi
jmp	loc_641E0E91
align 4
mov	ecx, [ebp+var_2C]
mov	i, enclen
jmp	loc_641E0DDA
add	enclen,	4
mov	[ebp+var_2C], esi
jmp	loc_641E0E91
align 4
public _silc_utf8_encoded_len
			
push	ebp
mov	ebp, esp
sub	esp, 28h
mov	dword ptr [esp+10h], 0 
mov	dword ptr [esp+0Ch], 0 
mov	eax, [ebp+bin_encoding]
mov	[esp+8], eax	
mov	eax, [ebp+bin_len]
mov	[esp+4], eax	
mov	eax, [ebp+bin]
mov	[esp], eax	
call	_silc_utf8_encode
leave
retn
align 4
public _silc_utf8_w2c
push	ebp
mov	ebp, esp
push	edi
push	esi
push	ebx
sub	esp, 3Ch
mov	ebx, [ebp+wide_str]
mov	esi, [ebp+wide_str_len]
lea	eax, [esi+esi]
mov	[ebp+size], eax
mov	eax, [ebp+utf8_size]
cmp	[ebp+size], eax
jbe	short loc_641E12C0
xor	tmp, tmp
add	esp, 3Ch
pop	wide_str_0
pop	wide_str_len_0
pop	tmp
leave
retn
align 10h
xor	eax, eax
mov	edi, [ebp+utf8]
mov	ecx, [ebp+utf8_size]
rep stosb
mov	eax, [ebp+size]
mov	[esp], eax	
call	_silc_malloc
mov	utf8_0,	eax
test	eax, eax
jz	short loc_641E12B5
test	wide_str_len_0,	wide_str_len_0
jz	short loc_641E12FD
xor	edx, edx
xor	tmp, tmp
nop
movzx	ecx, byte ptr [wide_str_0+i+1]
mov	[tmp+edx], cl
mov	cx, [wide_str_0+i]
mov	[tmp+edx+1], cl
add	i, 2
mov	edx, i
cmp	wide_str_len_0,	i
ja	short loc_641E12E4
mov	i, [ebp+utf8_size]
mov	[esp+10h], eax	
mov	eax, [ebp+utf8]
mov	[esp+0Ch], eax	
mov	dword ptr [esp+8], 2 
mov	eax, [ebp+size]
mov	[esp+4], eax	
mov	[esp], tmp	
call	_silc_utf8_encode
mov	[esp], tmp	
mov	[ebp+var_20], eax
call	_silc_free
mov	eax, [ebp+var_20]
add	esp, 3Ch
pop	wide_str_0
pop	wide_str_len_0
pop	tmp
leave
retn
public _silc_utf8_c2w
push	ebp
mov	ebp, esp
push	edi
push	esi
push	ebx
sub	esp, 3Ch
mov	esi, [ebp+utf8_wide_size]
mov	dword ptr [esp+10h], 0 
mov	dword ptr [esp+0Ch], 0 
mov	dword ptr [esp+8], 2 
mov	eax, [ebp+utf8_len]
mov	[esp+4], eax	
mov	eax, [ebp+utf8]
mov	[esp], eax	
call	_silc_utf8_decode
mov	ebx, eax
test	eax, eax
jz	short loc_641E137A
shr	tmp_len, 1
cmp	eax, utf8_wide_size_0
jbe	short loc_641E1384
			
xor	tmp, tmp
add	esp, 3Ch
pop	tmp_len
pop	tmp
pop	edi
leave
retn
lea	ecx, [utf8_wide_size_0+utf8_wide_size_0]
xor	eax, eax
mov	edi, [ebp+utf8_wide]
rep stosb
mov	[esp], tmp_len	
call	_silc_malloc
mov	utf8_wide_size_0, eax
test	eax, eax
jz	short loc_641E137A
mov	[esp+10h], tmp_len 
mov	[esp+0Ch], tmp	
mov	dword ptr [esp+8], 2 
mov	tmp, [ebp+utf8_len]
mov	[esp+4], eax	
mov	eax, [ebp+utf8]
mov	[esp], eax	
call	_silc_utf8_decode
xor	eax, eax
xor	utf8_wide_0, utf8_wide_0
xor	edx, edx
mov	[ebp+var_1C], tmp_len
mov	tmp_len, [ebp+utf8_wide]
xchg	ax, ax
movzx	ecx, byte ptr [tmp+eax+1]
movzx	eax, byte ptr [tmp+eax]
shl	eax, 8
or	ecx, eax
mov	[utf8_wide_0+i], cx
add	i, 2
inc	k
mov	eax, i
cmp	[ebp+var_1C], i
ja	short loc_641E13CC
mov	[esp], tmp	
call	_silc_free
lea	eax, [k+1]
add	esp, 3Ch
pop	utf8_wide_0
pop	tmp
pop	k
leave
retn
public _silc_hash_utf8_string
push	ebp
mov	ebp, esp
mov	s, [ebp+key]
mov	cl, [s]
test	cl, cl
jz	short loc_641E142F
xor	eax, eax
xchg	ax, ax
shl	h, 4
movzx	ecx, cl
lea	eax, [ecx+eax]
mov	ecx, h
and	g, 0F0000000h
jz	short loc_641E1426
xor	h, g
shr	g, 18h
xor	h, ecx
inc	s
mov	cl, [s]
test	cl, cl
jnz	short loc_641E140C
leave
retn
xor	eax, eax
leave
retn
align 4
public _silc_hash_uint
			
push	ebp
mov	ebp, esp
mov	eax, [ebp+key]
leave
retn
public _silc_hash_ptr
			
push	ebp
mov	ebp, esp
mov	eax, [ebp+key]
leave
retn
public _silc_hash_id
push	ebp
mov	ebp, esp
push	esi
push	ebx
mov	ecx, [ebp+key]
mov	eax, [ebp+user_context]
cmp	ax, 2
jz	short loc_641E14B8
cmp	ax, 3
jz	short loc_641E1490
dec	ax
jz	short loc_641E1468
xor	eax, eax
			
pop	ebx
pop	esi
leave
retn
align 4
movzx	eax, word ptr [key_0+14h]
movzx	edx, word ptr [key_0+12h]
imul	h, edx
movzx	esi, byte ptr [key_0+10h]
test	esi, esi
jz	short loc_641E1461
xor	edx, edx
lea	esi, [esi+0]
movzx	ebx, byte ptr [key_0+i]
xor	h, ebx
inc	i
cmp	i, esi
jl	short loc_641E1480
pop	ebx
pop	esi
leave
retn
align 10h
movzx	user_context_0,	word ptr [key_0+14h]
movzx	edx, word ptr [key_0+12h]
imul	h, edx
movzx	esi, byte ptr [key_0+10h]
test	esi, esi
jz	short loc_641E1461
xor	edx, edx
lea	esi, [esi+0]
movzx	ebx, byte ptr [key_0+i]
xor	h, ebx
inc	i
cmp	i, esi
jl	short loc_641E14A8
pop	ebx
pop	esi
leave
retn
align 4
xor	edx, edx
xor	user_context_0,	user_context_0
shl	h, 4
movzx	ebx, byte ptr [key_0+edx+12h]
add	eax, ebx
mov	ebx, h
and	ebx, 0F0000000h
jz	short loc_641E14D7
xor	h, ebx
shr	ebx, 18h
xor	h, ebx
inc	edx
cmp	edx, 0Bh
jnz	short loc_641E14BC
pop	ebx
pop	esi
leave
retn
align 4
public _silc_hash_client_id_hash
push	ebp
mov	ebp, esp
push	ebx
mov	ebx, [ebp+key]
xor	i, i
xor	eax, eax
nop
shl	h, 4
movzx	g, byte	ptr [key_0+i]
add	eax, ecx
mov	ecx, h
and	g, 0F0000000h
jz	short loc_641E150A
xor	h, g
shr	g, 18h
xor	h, ecx
inc	i
cmp	i, 0Bh
jnz	short loc_641E14F0
pop	key_0
leave
retn
align 4
public _silc_hash_data
push	ebp
mov	ebp, esp
push	esi
push	ebx
mov	esi, [ebp+key]
mov	ebx, [ebp+user_context]
movzx	eax, byte ptr [esi+ebx-1]
movzx	i, byte	ptr [esi]
imul	eax, i
inc	eax
imul	h, ebx
test	ebx, ebx
jz	short loc_641E1545
xor	ecx, ecx
xor	i, i
xchg	ax, ax
movzx	ecx, byte ptr [key_0+ecx]
xor	h, ecx
inc	i
mov	ecx, i
cmp	i, user_context_0
jnz	short loc_641E1538
pop	user_context_0
pop	key_0
leave
retn
align 4
public _silc_string_is_ascii
push	ebp
mov	ebp, esp
mov	ecx, [ebp+data]
mov	edx, [ebp+data_len]
test	edx, edx
jz	short loc_641E156F
test	byte ptr [data_0], 80h
jnz	short loc_641E1574
xor	eax, eax
jmp	short loc_641E156A
align 4
test	byte ptr [data_0+i], 80h
jnz	short loc_641E1574
inc	i
cmp	i, data_len_0
jb	short loc_641E1564
mov	al, 1
leave
retn
align 4
			
xor	i, i
leave
retn
public _silc_get_input
			
push	ebp
mov	ebp, esp
xor	eax, eax
leave
retn
align 10h
public _silc_fingerprint
push	ebp
mov	ebp, esp
push	edi
push	esi
push	ebx
sub	esp, 2Ch
mov	edi, [ebp+data]
mov	eax, [ebp+data_len]
test	edi, edi
jnz	short loc_641E15A0
			
xor	esi, esi
			
mov	eax, esi
add	esp, 2Ch
pop	i
pop	esi
pop	data_0
leave
retn
align 10h
test	data_len_0, data_len_0
jz	short loc_641E1593
mov	[ebp+var_20], data_len_0
cmp	data_len_0, 0FFh
jbe	short loc_641E15B5
mov	[ebp+var_20], 0FFh
mov	edx, [ebp+var_20]
add	edx, 13h
mov	ecx, 0CCCCCCCDh
mov	data_len_0, edx
mul	ecx
shr	edx, 4
lea	ebx, [edx+edx*4]
shl	ebx, 2
mov	eax, ebx
mul	ecx
shr	blocks,	3
lea	ebx, [blocks+ebx]
lea	eax, [ebx+blocks*2]
shl	eax, 1
mov	[ebp+var_24], eax
mov	ebx, eax
inc	len
mov	dword ptr [esp+4], 1 
mov	[esp], len	
call	_silc_calloc
test	eax, eax
jz	short loc_641E1593
mov	esi, eax
movzx	eax, byte ptr [data_0]
mov	[esp+0Ch], eax
mov	dword ptr [esp+8], offset a02x_1 
mov	[esp+4], len	
mov	[esp], esi	
call	_silc_snprintf
lea	eax, [esi+2]
mov	[ebp+cp], eax
mov	ecx, [ebp+var_24]
dec	len
mov	ebx, 1
mov	[ebp+var_24], esi
lea	esi, [esi+0]
			
mov	eax, 0CCCCCCCDh
mul	i
shr	edx, 3
lea	edx, [edx+edx*4]
shl	edx, 1
mov	eax, i
sub	eax, edx
mov	edx, eax
jz	short loc_641E167C
mov	esi, len
cmp	[ebp+var_20], i
jbe	loc_641E16CC
movzx	eax, byte ptr [data_0+i]
mov	[esp+0Ch], eax
mov	dword ptr [esp+8], offset a02x_1 
mov	[esp+4], len	
mov	eax, [ebp+cp]
mov	[esp], eax	
call	_silc_snprintf
add	[ebp+cp], 2
lea	eax, [len-2]
inc	i
test	bl, 1
jz	short loc_641E16A4
mov	ecx, len
jmp	short loc_641E1628
align 4
lea	esi, [len-1]
mov	eax, [ebp+cp]
inc	[ebp+cp]
mov	dword ptr [esp+8], offset asc_64265589 
mov	[esp+4], ecx	
mov	[esp], eax	
mov	[ebp+var_28], edx
call	_silc_snprintf
mov	edx, [ebp+var_28]
jmp	short loc_641E1641
align 4
lea	ecx, [esi-3]
mov	edx, [ebp+cp]
inc	[ebp+cp]
mov	dword ptr [esp+8], offset asc_64265589 
mov	[esp+4], eax	
mov	[esp], edx	
mov	[ebp+var_28], len
call	_silc_snprintf
mov	ecx, [ebp+var_28]
jmp	loc_641E1628
mov	len, [ebp+var_24]
test	edx, edx
jnz	short loc_641E16DC
dec	[ebp+cp]
mov	eax, [ebp+cp]
mov	byte ptr [eax],	0
and	i, 1
jnz	loc_641E1595
mov	eax, [ebp+cp]
mov	byte ptr [eax-1], 0
jmp	loc_641E1595
align 4
public _silc_hash_public_key_compare
push	ebp
mov	ebp, esp
sub	esp, 8
leave
jmp	_silc_pkcs_public_key_compare
public _silc_hash_utf8_compare
push	ebp
mov	ebp, esp
push	edi
push	esi
push	ebx
mov	esi, [ebp+key1]
mov	edx, 0FFFFFFFFh
xor	eax, eax
mov	ecx, edx
mov	edi, esi
repne scasb
not	ecx
lea	ebx, [ecx-1]
mov	ecx, edx
mov	edi, [ebp+key2]
repne scasb
mov	edx, ecx
not	edx
dec	edx
cmp	ebx, edx
jnz	short loc_641E1737
cmp	ebx, ebx
mov	edi, [ebp+key2]
mov	ecx, ebx
repe cmpsb
setz	al
pop	ebx
pop	key1_0
pop	edi
leave
retn
public _silc_hash_data_compare
push	ebp
mov	ebp, esp
push	edi
push	esi
mov	ecx, [ebp+user_context]
cmp	ecx, ecx
mov	edi, [ebp+key2]
mov	esi, [ebp+key1]
repe cmpsb
setz	al
pop	esi
pop	edi
leave
retn
align 4
public _silc_hash_client_id_compare
push	ebp
mov	ebp, esp
push	edi
push	esi
mov	ecx, 1Dh
mov	edi, [ebp+key2]
mov	esi, [ebp+key1]
repe cmpsb
setz	al
pop	esi
pop	edi
leave
retn
align 4
public _silc_hash_id_compare_full
			
push	ebp
mov	ebp, esp
push	edi
push	esi
mov	esi, [ebp+key1]
mov	edi, [ebp+key2]
mov	eax, [ebp+user_context]
cmp	ax, 1
jz	short loc_641E178E
cmp	ax, 2
jz	short loc_641E179C
mov	ecx, 16h
repe cmpsb
setz	al
pop	esi
pop	edi
leave
retn
mov	ecx, 1Dh
repe cmpsb
setz	al
pop	esi
pop	edi
leave
retn
align 4
public _silc_hash_id_compare
push	ebp
mov	ebp, esp
push	edi
push	esi
mov	esi, [ebp+key1]
mov	edi, [ebp+key2]
mov	eax, [ebp+user_context]
cmp	ax, 2
jz	short loc_641E17D0
mov	ecx, 16h
repe cmpsb
setz	al
pop	esi
pop	edi
leave
retn
align 10h
add	key1_0,	12h
add	key2_0,	12h
mov	ecx, 0Bh
repe cmpsb
setz	al
pop	esi
pop	edi
leave
retn
public _silc_hash_string_compare
			
push	ebp
mov	ebp, esp
sub	esp, 18h
mov	eax, [ebp+key2]
mov	[esp+4], eax	
mov	eax, [ebp+key1]
mov	[esp], eax	
call	_stricmp
test	eax, eax
setz	al
leave
retn
align 4
public _silc_hash_public_key
push	ebp
mov	ebp, esp
push	esi
push	ebx
sub	esp, 20h
lea	eax, [ebp+pk_len]
mov	[esp+4], eax	
mov	eax, [ebp+key]
mov	[esp], eax	
call	_silc_pkcs_public_key_encode
test	eax, eax
jz	short loc_641E185C
mov	esi, [ebp+pk_len]
movzx	ebx, byte ptr [pk+esi-1]
movzx	edx, byte ptr [pk]
imul	ebx, edx
inc	ebx
imul	hash, esi
test	esi, esi
jz	short loc_641E1849
xor	ecx, ecx
xor	edx, edx
movzx	ecx, byte ptr [pk+ecx]
xor	hash, ecx
inc	edx
mov	ecx, edx
cmp	edx, esi
jnz	short loc_641E183C
mov	[esp], pk	
call	_silc_free
mov	eax, hash
add	esp, 20h
pop	hash
pop	esi
leave
retn
align 4
xor	ebx, ebx
mov	pk, hash
add	esp, 20h
pop	hash
pop	esi
leave
retn
align 4
public _silc_hash_string
			
push	ebp
mov	ebp, esp
push	esi
push	ebx
sub	esp, 10h
mov	ebx, [ebp+key]
mov	al, [s]
test	al, al
jz	short loc_641E18AD
xor	esi, esi
nop
shl	h, 4
movsx	eax, al
mov	[esp], eax	
call	_tolower
lea	esi, [eax+esi]
mov	eax, h
and	g, 0F0000000h
jz	short loc_641E189D
xor	h, g
shr	g, 18h
xor	h, eax
inc	s
mov	al, [s]
test	al, al
jnz	short loc_641E187C
mov	eax, h
add	esp, 10h
pop	s
pop	h
leave
retn
xor	esi, esi
jmp	short loc_641E18A4
align 4
public _silc_to_lower
push	ebp
mov	ebp, esp
push	edi
push	esi
push	ebx
sub	esp, 1Ch
mov	esi, [ebp+string]
xor	eax, eax
mov	ecx, 0FFFFFFFFh
mov	edi, esi
repne scasb
not	ecx
dec	ecx
cmp	ecx, [ebp+dest_size]
ja	short loc_641E18FF
xor	ebx, ebx
jmp	short loc_641E18F9
align 4
movsx	eax, byte ptr [esi+i]
mov	[esp], eax	
call	_tolower
mov	edx, [ebp+dest]
mov	[edx+i], al
inc	i
mov	ecx, 0FFFFFFFFh
mov	edi, string_0
xor	eax, eax
repne scasb
not	ecx
dec	ecx
cmp	i, ecx
jb	short loc_641E18D8
mov	al, 1
add	esp, 1Ch
pop	i
pop	esi
pop	edi
leave
retn
align 4
public _silc_gets
push	ebp
mov	ebp, esp
push	edi
push	esi
push	ebx
mov	ebx, [ebp+dest]
mov	esi, [ebp+destlen]
mov	edx, [ebp+begin]
xor	eax, eax
mov	edi, ebx
mov	ecx, esi
rep stosb
cmp	edx, ds:_start_37618
jz	short loc_641E1933
mov	ds:_start_37618, 0
xor	begin_0, begin_0
cmp	begin_0, [ebp+srclen]
jg	short loc_641E1970
test	destlen_0, destlen_0
js	short loc_641E1990
mov	dest_0,	[ebp+src]
add	edi, begin_0
mov	al, [edi]
mov	[ebx], al
cmp	al, 0FFh
jz	short loc_641E1990
cmp	al, 0Ah
jz	short loc_641E1970
xor	eax, eax
jmp	short loc_641E196A
align 4
inc	i
cmp	destlen_0, i
jl	short loc_641E1980
mov	cl, [edi+1]
mov	[dest_0+i], cl
cmp	cl, 0FFh
jz	short loc_641E1980
inc	edi
cmp	cl, 0Ah
jz	short loc_641E1970
inc	begin_0
cmp	[ebp+srclen], begin_0
jge	short loc_641E1954
			
lea	i, [begin_0+1]
mov	ds:_start_37618, eax
pop	dest_0
pop	destlen_0
pop	dest_0
leave
retn
align 10h
			
mov	ds:_start_37618, begin_0
mov	i, 0FFFFFFFFh
pop	dest_0
pop	destlen_0
pop	edi
leave
retn
			
mov	eax, 0FFFFFFFFh
jmp	short loc_641E1978
align 4
public _silc_format
			
push	ebp
mov	ebp, esp
push	edi
push	ebx
mov	eax, 2010h	
call	__alloca
lea	ebx, [ebp+str]
mov	ecx, 2000h
xor	eax, eax
mov	edi, ebx
rep stosb
lea	eax, [ebp+args]
mov	[esp+0Ch], eax	
mov	eax, [ebp+fmt]
mov	[esp+8], eax	
mov	dword ptr [esp+4], 1FFFh 
mov	[esp], ebx	
call	_silc_vsnprintf
mov	[esp], ebx	
call	_strdup
add	esp, 2010h
pop	ebx
pop	edi
leave
retn
public _silc_check_line
push	ebp
mov	ebp, esp
push	ebx
sub	esp, 14h
mov	ebx, [ebp+buf]
mov	dword ptr [esp+4], 23h 
mov	[esp], ebx	
call	_strchr
test	eax, eax
jz	short loc_641E1A11
			
mov	eax, 0FFFFFFFFh
add	esp, 14h
pop	buf_0
leave
retn
mov	dword ptr [esp+4], 27h
mov	[esp], buf_0	
call	_strchr
test	eax, eax
jnz	short loc_641E1A06
mov	dword ptr [esp+4], 5Ch 
mov	[esp], buf_0	
call	_strchr
test	eax, eax
jnz	short loc_641E1A06
mov	dword ptr [esp+4], 0Dh 
mov	[esp], buf_0	
call	_strchr
test	eax, eax
jnz	short loc_641E1A06
mov	dword ptr [esp+4], 7 
mov	[esp], buf_0	
call	_strchr
test	eax, eax
jnz	short loc_641E1A06
mov	dword ptr [esp+4], 8 
mov	[esp], buf_0	
call	_strchr
test	eax, eax
jnz	short loc_641E1A06
mov	dword ptr [esp+4], 0Ch 
mov	[esp], buf_0	
call	_strchr
test	eax, eax
jnz	loc_641E1A06
cmp	byte ptr [buf_0], 0Ah
jnz	loc_641E1A0B
jmp	loc_641E1A06
align 4
public _silc_parse_userfqdn
push	ebp
mov	ebp, esp
push	edi
push	esi
push	ebx
sub	esp, 2Ch
mov	ebx, [ebp+string]
mov	esi, [ebp+user]
test	esi, esi
jz	loc_641E1B9C
xor	eax, eax
mov	edi, user_0
mov	ecx, [ebp+user_size]
rep stosb
mov	user_0,	[ebp+fqdn]
mov	user_size_0, [ebp+fqdn_size]
rep stosb
test	string_0, string_0
jz	loc_641E1BA8
cmp	byte ptr [string_0], 40h
jz	loc_641E1B64
mov	dword ptr [esp+4], 40h 
mov	[esp], string_0	
call	_strchr
test	eax, eax
jz	short loc_641E1B64
mov	dword ptr [esp+4], offset a@ 
mov	[esp], string_0	
call	_strcspn
mov	edx, eax
test	user_0,	user_0
jz	short loc_641E1B1C
mov	[esp+0Ch], eax	
mov	[esp+8], string_0 
mov	eax, [ebp+user_size]
mov	[esp+4], eax	
mov	[esp], user_0	
mov	[ebp+var_1C], edx
call	_silc_strncat
mov	edx, [ebp+var_1C]
mov	eax, [ebp+fqdn]
test	eax, eax
jz	short loc_641E1B56
xor	eax, eax
mov	ecx, 0FFFFFFFFh
mov	edi, string_0
repne scasb
not	ecx
mov	eax, edx
not	eax
lea	eax, [ecx+eax-1]
mov	[esp+0Ch], eax	
lea	eax, [ebx+edx+1]
mov	[esp+8], eax	
mov	eax, [ebp+fqdn_size]
mov	[esp+4], eax	
mov	eax, [ebp+fqdn]
mov	[esp], eax	
call	_silc_strncat
mov	eax, 2
add	esp, 2Ch
pop	string_0
pop	user_0
pop	edi
leave
retn
align 4
			
test	user_0,	user_0
jz	short loc_641E1BB4
xor	eax, eax
mov	ecx, 0FFFFFFFFh
mov	fqdn_0,	string_0
repne scasb
not	ecx
dec	ecx
mov	[esp+0Ch], ecx	
mov	[esp+8], ebx	
mov	eax, [ebp+user_size]
mov	[esp+4], eax	
mov	[esp], user_0	
call	_silc_strncat
mov	eax, 1
add	esp, 2Ch
pop	string_0
pop	user_0
pop	edi
leave
retn
align 4
mov	edx, [ebp+fqdn]
test	edx, edx
jnz	loc_641E1AC4
nop
xor	eax, eax
add	esp, 2Ch
pop	string_0
pop	user_0
pop	edi
leave
retn
align 4
mov	eax, 1
jmp	short loc_641E1B5B
align 4
public _silc_to_upper
push	ebp
mov	ebp, esp
push	edi
push	esi
push	ebx
sub	esp, 1Ch
mov	esi, [ebp+string]
xor	eax, eax
mov	ecx, 0FFFFFFFFh
mov	edi, esi
repne scasb
not	ecx
dec	ecx
cmp	ecx, [ebp+dest_size]
ja	short loc_641E1C07
xor	ebx, ebx
jmp	short loc_641E1C01
align 10h
movsx	eax, byte ptr [esi+i]
mov	[esp], eax	
call	_toupper
mov	edx, [ebp+dest]
mov	[edx+i], al
inc	i
mov	ecx, 0FFFFFFFFh
mov	edi, string_0
xor	eax, eax
repne scasb
not	ecx
dec	ecx
cmp	i, ecx
jb	short loc_641E1BE0
mov	al, 1
add	esp, 1Ch
pop	i
pop	esi
pop	edi
leave
retn
align 10h
public _silc_parse_command_line
push	ebp
mov	ebp, esp
push	edi
push	esi
push	ebx
sub	esp, 2Ch
mov	dword ptr [esp+4], 4 
mov	dword ptr [esp], 1 
call	_silc_calloc
mov	edx, [ebp+parsed]
mov	[edx], eax
mov	dword ptr [esp+4], 4 
mov	dword ptr [esp], 1 
call	_silc_calloc
mov	ecx, [ebp+parsed_lens]
mov	[ecx], eax
mov	dword ptr [esp+4], offset asc_64265589 
mov	eax, [ebp+buffer]
mov	[esp], eax	
call	_strcspn
mov	[ebp+var_24], eax
xor	eax, eax
mov	ecx, 0FFFFFFFFh
mov	edi, [ebp+buffer]
repne scasb
not	ecx
mov	dword ptr [esp+4], 1 
mov	[esp], ecx	
call	_silc_calloc
mov	[ebp+ptr], eax
test	eax, eax
jz	loc_641E1DBB
xor	ebx, ebx
mov	esi, 0FFFFFFFFh
jmp	short loc_641E1CAA
align 4
mov	edx, [ebp+buffer]
movsx	eax, byte ptr [edx+ebx]
mov	[esp], eax	
call	_toupper
mov	ecx, [ebp+ptr]
mov	[ecx+ebx], al
inc	ebx
mov	ecx, esi
mov	edi, [ebp+buffer]
xor	eax, eax
repne scasb
not	ecx
dec	ecx
cmp	ecx, ebx
ja	short loc_641E1C94
mov	edx, [ebp+parsed]
mov	ebx, [edx]
mov	dword ptr [esp+4], 1 
mov	eax, [ebp+var_24]
inc	eax
mov	[esp], eax	
call	_silc_calloc
mov	[ebx], eax
mov	ecx, [ebp+parsed]
mov	eax, [ecx]
mov	eax, [eax]
mov	edi, eax
mov	esi, [ebp+ptr]
mov	ecx, [ebp+var_24]
rep movsb
mov	eax, [ebp+ptr]
mov	[esp], eax	
call	_silc_free
mov	edx, [ebp+parsed_lens]
mov	eax, [edx]
mov	ecx, [ebp+var_24]
mov	[eax], ecx
mov	tmp, [ebp+buffer]
add	cp, ecx
mov	bl, [cp]
cmp	bl, 20h
jnz	short loc_641E1D10
nop
inc	cp
mov	bl, [cp]
cmp	bl, 20h
jz	short loc_641E1D08
mov	dword ptr [esp+4], 20h 
mov	[esp], cp	
call	_strchr
test	eax, eax
jz	loc_641E1E75
cmp	[ebp+max_args],	1
jbe	loc_641E1E7D
mov	eax, [ebp+max_args]
dec	eax
mov	[ebp+var_24], eax
mov	edx, 1
mov	[ebp+items], 1
mov	[ebp+ptr], edx
mov	edx, [ebp+ptr]
cmp	[ebp+var_24], edx
jz	loc_641E1E60
mov	dword ptr [esp+4], offset asc_64265589 
mov	[esp], cp	
call	_strcspn
mov	len, eax
test	len, len
jz	short loc_641E1D84
cmp	byte ptr [cp+len-1], 20h
jnz	short loc_641E1DC4
lea	eax, [cp+len]
jmp	short loc_641E1D81
align 4
mov	dl, [eax-2]
dec	eax
cmp	dl, 20h
jnz	short loc_641E1DC4
dec	len
jnz	short loc_641E1D78
mov	edx, [ebp+items]
			
mov	dword ptr [esp+4], 4 
mov	[esp], edx	
mov	[ebp+var_28], edx
call	_silc_calloc
mov	ecx, [ebp+parsed_types]
mov	[ecx], eax
xor	ecx, ecx
mov	len, [ebp+items]
mov	edx, [ebp+var_28]
mov	cp, [ebp+parsed_types]
jmp	short loc_641E1DAE
mov	eax, [parsed_types_0]
mov	[eax+i*4], i
inc	i
cmp	argc, i
jg	short loc_641E1DAC
mov	eax, [ebp+parsed_num]
mov	[eax], edx
add	esp, 2Ch
pop	argc
pop	esi
pop	edi
leave
retn
align 4
			
inc	[ebp+items]
mov	eax, [ebp+items]
mov	[ebp+ptr], eax
mov	edi, eax
shl	edi, 2
mov	[esp+4], edi	
mov	edx, [ebp+parsed]
mov	eax, [edx]
mov	[esp], eax	
call	_silc_realloc
mov	ecx, [ebp+parsed]
mov	[ecx], eax
mov	[esp+4], edi	
mov	edx, [ebp+parsed_lens]
mov	eax, [edx]
mov	[esp], eax	
call	_silc_realloc
mov	ecx, [ebp+parsed_lens]
mov	[ecx], eax
lea	edx, [edi-4]
mov	edi, edx
mov	eax, [ebp+parsed]
add	edi, [eax]
mov	dword ptr [esp+4], 1 
lea	eax, [len+1]
mov	[esp], eax	
mov	[ebp+var_28], edx
call	_silc_calloc
mov	[edi], eax
mov	ecx, [ebp+parsed]
mov	eax, [ecx]
mov	edx, [ebp+var_28]
mov	eax, [eax+edx]
mov	edi, eax
mov	ecx, len
rep movsb
mov	ecx, [ebp+parsed_lens]
mov	eax, [ecx]
mov	[eax+edx], len
mov	al, [cp]
test	al, al
jz	short loc_641E1E56
cmp	al, 20h
jnz	short loc_641E1E4A
nop
inc	cp
cmp	byte ptr [cp], 20h
jz	short loc_641E1E44
mov	edx, [ebp+items]
cmp	[ebp+max_args],	edx
ja	loc_641E1D48
mov	edx, [ebp+ptr]
jmp	loc_641E1D87
align 10h
mov	ecx, 0FFFFFFFFh
mov	edi, cp
xor	eax, eax
repne scasb
not	ecx
lea	len, [ecx-1]
jmp	loc_641E1D66
test	bl, bl
jnz	loc_641E1D28
mov	edx, 1
mov	[ebp+items], 1
jmp	loc_641E1D87
align 10h
push	ebp
mov	ebp, esp
sub	esp, 8
mov	eax, [ebp+context]
mov	edx, [ebp+status]
test	edx, edx
jz	short loc_641E1EA4
leave
retn
align 4
mov	ecx, [context_0+8]
mov	[ebp+context], ecx
mov	[ebp+status], 0
mov	context_0, [context_0+4]
leave
jmp	eax
align 4
public _silc_net_connect_st_stream
push	ebp
mov	ebp, esp
mov	eax, [ebp+fsm_context]
cmp	byte ptr [eax+0C3h], 0
js	short loc_641E1EE2
mov	edx, [fsm_context_0+4]
test	edx, edx
jz	short loc_641E1EEC
cmp	edx, 1
jz	short loc_641E1EFC
cmp	edx, 2
setnz	dl
movzx	edx, dl
lea	edx, [edx+edx*4+2]
mov	[fsm_context_0], edx
			
mov	fsm_context_0, 3
leave
retn
align 4
mov	dword ptr [fsm_context_0], 0
mov	fsm_context_0, 3
leave
retn
align 4
mov	dword ptr [fsm_context_0], 1
jmp	short loc_641E1EE2
public _silc_net_set_socket_nonblock
push	ebp
mov	ebp, esp
sub	esp, 28h
mov	[ebp+on], 1
lea	eax, [ebp+on]
mov	[esp+8], eax	
mov	dword ptr [esp+4], 8004667Eh 
mov	eax, [ebp+sock]
mov	[esp], eax	
call	_ioctlsocket@12
sub	esp, 0Ch
leave
retn
public _silc_net_addr2bin
			
push	ebp
mov	ebp, esp
push	edi
push	ebx
sub	esp, 20h
mov	ebx, [ebp+addr]
mov	[esp], ebx	
call	_silc_net_is_ip4
test	al, al
jnz	short loc_641E1F50
			
xor	c, c
add	esp, 20h
pop	addr_0
pop	c
leave
retn
xor	eax, eax
mov	ecx, 0FFFFFFFFh
mov	edi, addr_0
repne scasb
not	ecx
dec	ecx
mov	dword ptr [ebp+ret], 0
xor	edx, edx
xor	eax, eax
jmp	short loc_641E1F8B
align 4
movsx	edi, byte ptr [ebx]
sub	edi, 30h
cmp	edi, 9
ja	short loc_641E1F47
lea	d, [d+d*4]
lea	edx, [edi+edx*2]
cmp	d, 0FFh
jg	short loc_641E1F47
mov	edi, c
dec	ecx
inc	ebx
mov	eax, c
test	ecx, ecx
jle	short loc_641E1FA4
cmp	byte ptr [ebx],	2Eh
jnz	short loc_641E1F6C
lea	edi, [c+1]
cmp	c, 3
jg	short loc_641E1F47
mov	[ebp+eax+ret], dl
xor	d, d
jmp	short loc_641E1F87
cmp	c, 3
jnz	short loc_641E1F47
cmp	[ebp+bin_len], 3
jbe	short loc_641E1F47
mov	[ebp+ret+3], dl
mov	d, dword ptr [ebp+ret]
mov	c, [ebp+bin]
mov	[eax], edx
mov	al, 1
jmp	short loc_641E1F49
align 10h
public _silc_net_close_connection
			
push	ebp
mov	ebp, esp
sub	esp, 18h
mov	eax, [ebp+sock]
mov	[esp], eax	
call	_closesocket@4
push	ecx
leave
retn
push	ebp
mov	ebp, esp
push	ebx
sub	esp, 14h
mov	ebx, [ebp+fsm_context]
mov	eax, [ebx+6Ch]
mov	[esp], eax	
call	_silc_free
mov	eax, [ebx+70h]
mov	[esp], eax	
call	_silc_free
mov	[ebp+fsm], ebx
add	esp, 14h
pop	ebx
leave
jmp	_silc_free
align 4
public _silc_net_connect_st_finish
push	ebp
mov	ebp, esp
push	ebx
sub	esp, 14h
mov	ebx, [ebp+fsm_context]
cmp	byte ptr [ebx+0C3h], 0
jns	short loc_641E2024
mov	eax, 3
add	esp, 14h
pop	fsm_context_0
leave
retn
align 4
mov	eax, [fsm_context_0+0BCh]
mov	[esp+8], eax
mov	eax, [fsm_context_0+8]
mov	[esp+4], eax
mov	eax, [fsm_context_0]
mov	[esp], eax
call	dword ptr [fsm_context_0+0B8h]
mov	eax, [fsm_context_0+64h]
test	eax, eax
jz	short loc_641E2017
mov	[esp], eax	
call	_silc_async_free
mov	eax, 3
add	esp, 14h
pop	fsm_context_0
leave
retn
align 4
public _silc_net_tcp_connect
push	ebp
mov	ebp, esp
push	edi
push	esi
push	ebx
sub	esp, 3Ch
mov	ebx, [ebp+remote_ip_addr]
mov	esi, [ebp+remote_port]
mov	edi, [ebp+schedule]
test	ebx, ebx
jnz	short loc_641E207C
			
xor	eax, eax
			
add	esp, 3Ch
pop	ebx
pop	esi
pop	schedule_0
leave
retn
test	remote_port_0, remote_port_0
jle	short loc_641E2072
test	schedule_0, schedule_0
jz	short loc_641E2072
mov	edx, [ebp+callback]
test	edx, edx
jz	short loc_641E2072
mov	dword ptr [esp+4], 0C4h	
mov	dword ptr [esp], 1 
call	_silc_calloc
test	eax, eax
jz	loc_641E21AC
mov	[esp+8], conn	
mov	dword ptr [esp+4], 0 
mov	dword ptr [esp], offset	_silc_net_connect_abort	
mov	[ebp+fsm_context], conn
call	_silc_async_alloc
mov	edx, [ebp+fsm_context]
mov	[edx+64h], eax
test	eax, eax
jz	loc_641E21A4
mov	eax, [ebp+local_ip_addr]
test	eax, eax
jz	short loc_641E20EB
mov	eax, [ebp+local_ip_addr]
mov	[esp], eax	
mov	[ebp+fsm_context], conn
call	_strdup
mov	edx, [ebp+fsm_context]
mov	[edx+6Ch], eax
mov	[esp], remote_ip_addr_0
mov	[ebp+fsm_context], conn
call	_strdup
mov	edx, [ebp+fsm_context]
mov	[edx+70h], eax
test	eax, eax
jz	loc_641E2188
and	remote_port_0, 0FFFFFFh
mov	eax, [conn+0C0h]
and	eax, 0FF000000h
or	eax, esi
mov	[conn+0C0h], eax
mov	eax, [ebp+callback]
mov	[conn+0B8h], eax
mov	eax, [ebp+context]
mov	[conn+0BCh], eax
mov	al, [conn+0C3h]
and	eax, 0FFFFFF80h
or	eax, 1
mov	[conn+0C3h], al
mov	dword ptr [conn], 7
lea	remote_ip_addr_0, [conn+0Ch]
mov	[esp+10h], schedule_0 
mov	dword ptr [esp+0Ch], 0 
mov	dword ptr [esp+8], offset _silc_net_connect_destructor 
mov	[esp+4], conn	
mov	[esp], ebx	
mov	[ebp+fsm_context], conn
call	_silc_fsm_init
mov	dword ptr [esp+4], offset _silc_net_connect_st_thread 
mov	[esp], ebx	
call	_silc_fsm_start
mov	edx, [ebp+fsm_context]
mov	eax, [edx+64h]
jmp	loc_641E2074
mov	eax, [conn+64h]
mov	[esp], eax	
call	_silc_async_free
mov	edx, [ebp+fsm_context]
mov	eax, [edx+6Ch]
mov	[esp], eax	
call	_silc_free
mov	edx, [ebp+fsm_context]
mov	[esp], conn
call	_silc_free
mov	conn, [ebp+context]
mov	[esp+8], eax	
mov	dword ptr [esp+4], 0 
mov	dword ptr [esp], 6 
call	[ebp+callback]
xor	eax, eax
jmp	loc_641E2074
push	ebp
mov	ebp, esp
push	ebx
sub	esp, 14h
mov	ebx, [ebp+context]
or	byte ptr [ebx+0C3h], 80h
mov	eax, [ebx+68h]
test	eax, eax
jz	short loc_641E2203
mov	dword ptr [esp+8], 0 
mov	dword ptr [esp+4], 0 
mov	[esp], eax	
call	_silc_async_abort
mov	dword ptr [context_0+68h], 0
add	esp, 14h
pop	context_0
leave
retn
align 4
			
push	ebp
mov	ebp, esp
push	edi
push	esi
push	ebx
sub	esp, 2Ch
mov	esi, addr
mov	ebx, ip_addr
mov	[ebp+var_1C], port
mov	port, 10h
xor	addr, addr
mov	edi, addr
rep stosb
test	ip_addr, ip_addr
jz	loc_641E22B0
mov	[esp], ip_addr	
call	_silc_net_is_ip
test	al, al
jz	short loc_641E2284
mov	[esp], ip_addr	
call	_silc_net_is_ip4
test	al, al
jz	loc_641E22D4
mov	dword ptr [esp+8], 4 
lea	eax, [esi+4]
mov	[esp+4], eax	
mov	[esp], ip_addr	
call	_silc_net_addr2bin
test	al, al
jz	short loc_641E22A6
mov	word ptr [addr], 2
mov	edi, [ebp+var_1C]
test	edi, edi
jnz	short loc_641E22C3
xor	eax, eax
mov	[addr+2], ax
mov	al, 1
lea	esp, [ebp-0Ch]
pop	ip_addr
pop	addr
pop	addr
leave
retn
align 4
mov	[esp+4], ip_addr
mov	dword ptr [esp], offset	aSIsNotIpAddres	
call	_silc_format
mov	[esp+4], eax	
mov	dword ptr [esp], 3 
call	_silc_log_output
xor	eax, eax
lea	esp, [ebp-0Ch]
pop	ip_addr
pop	esi
pop	addr
leave
retn
align 10h
mov	word ptr [esi],	2
mov	dword ptr [esi+4], 0
mov	ebx, [ebp+var_1C]
test	ebx, ebx
jz	short loc_641E2278
movzx	eax, word ptr [ebp+var_1C]
mov	[esp], port	
call	_htons@4
push	ecx
jmp	short loc_641E2274
align 4
mov	dword ptr [esp], offset	aOperatingSyste	
call	_silc_format
mov	[esp+4], eax	
mov	dword ptr [esp], 3 
call	_silc_log_output
xor	eax, eax
lea	esp, [ebp-0Ch]
pop	ip_addr
pop	esi
pop	addr
leave
retn
align 4
push	ebp
mov	ebp, esp
sub	esp, 8
mov	eax, [ebp+context]
mov	dword ptr [eax+68h], 0
mov	edx, [ebp+status]
mov	[eax+4], edx
mov	edx, [ebp+stream]
mov	[eax+8], edx
mov	dl, [eax+60h]
mov	cl, dl
and	ecx, 0FFFFFFFBh
mov	[eax+60h], cl
and	edx, 4
jz	short loc_641E232C
leave
retn
align 4
add	context_0, 38h
mov	[ebp+status], eax
leave
jmp	_silc_fsm_continue
public _silc_net_connect_st_thread
push	ebp
mov	ebp, esp
push	esi
push	ebx
sub	esp, 20h
mov	ebx, [ebp+fsm]
mov	eax, [ebp+fsm_context]
lea	esi, [eax+38h]
mov	dword ptr [esp+14h], 1 
mov	dword ptr [esp+10h], 0 
mov	dword ptr [esp+0Ch], 0 
mov	[esp+8], eax	
mov	[esp+4], ebx	
mov	[esp], esi	
call	_silc_fsm_thread_init
mov	dword ptr [esp+4], offset _silc_net_connect_st_start 
mov	[esp], esi	
call	_silc_fsm_start
mov	dword ptr [esp+4], offset _silc_net_connect_st_finish 
mov	[esp], ebx	
call	_silc_fsm_next
mov	[esp+4], esi	
mov	[esp], ebx	
call	_silc_fsm_thread_wait
mov	eax, 2
add	esp, 20h
pop	ebx
pop	esi
leave
retn
align 4
public _silc_net_udp_send
			
push	ebp
mov	ebp, esp
push	esi
push	ebx
sub	esp, 40h
mov	ebx, [ebp+stream]
lea	esi, [ebp+remote]
mov	ecx, [ebp+remote_port] 
mov	edx, [ebp+remote_ip_addr] 
mov	eax, esi	
call	_silc_net_set_sockaddr
test	al, al
jnz	short loc_641E23DC
mov	ret, 0FFFFFFFEh
mov	eax, ret
lea	esp, [ebp-8]
pop	stream_0
pop	ret
leave
retn
align 4
mov	dword ptr [esp+14h], 10h 
mov	[esp+10h], esi	
mov	dword ptr [esp+0Ch], 0 
mov	eax, [ebp+data_len]
mov	[esp+8], eax	
mov	eax, [ebp+data]
mov	[esp+4], eax	
mov	eax, [stream_0+8]
mov	[esp], eax	
call	_sendto@24
sub	esp, 18h
mov	esi, eax
cmp	eax, 0FFFFFFFFh
jz	short loc_641E2454
mov	ret, [stream_0+8]
mov	[esp+4], eax	
mov	eax, [stream_0+4]
mov	[esp], eax	
call	_silc_schedule_get_fd_events
test	al, 2
jz	short loc_641E23D0
mov	dword ptr [esp+0Ch], 0 
mov	dword ptr [esp+8], 1 
mov	err, [stream_0+8]
mov	[esp+4], eax	
mov	eax, [stream_0+4]
mov	[esp], eax	
call	_silc_schedule_set_listen_fd
mov	eax, ret
lea	esp, [ebp-8]
pop	stream_0
pop	ret
leave
retn
call	_WSAGetLastError@0
cmp	eax, 2733h
jz	short loc_641E2484
mov	edx, [stream_0+8]
mov	[esp+4], edx	
mov	edx, [stream_0+4]
mov	[esp], edx	
mov	[ebp+var_1C], err
call	_silc_schedule_unset_listen_fd
mov	eax, [ebp+var_1C]
mov	[stream_0+16h],	ax
jmp	loc_641E23CB
align 4
mov	dword ptr [esp+0Ch], 0
mov	dword ptr [esp+8], 3
jmp	short loc_641E2439
align 4
public _silc_net_udp_receive
			
push	ebp
mov	ebp, esp
push	edi
push	esi
push	ebx
sub	esp, 5Ch
mov	ebx, [ebp+stream]
mov	edi, [ebp+remote_ip_addr]
mov	eax, [ebp+ret_data]
mov	edx, [ebp+data_size]
test	edi, edi
jz	loc_641E2580
mov	ecx, [ebp+remote_port]
test	ecx, ecx
jz	loc_641E2580
test	byte ptr [stream_0+24h], 1
jz	short loc_641E251C
lea	ecx, [ebp+flen]
mov	[esp+14h], ecx	
lea	ecx, [ebp+s]
mov	[esp+10h], ecx	
mov	dword ptr [esp+0Ch], 0 
mov	[esp+8], data_size_0 
mov	[esp+4], ret_data_0 
mov	ret_data_0, [stream_0+8]
mov	[esp], eax	
call	_recvfrom@24
sub	esp, 18h
mov	esi, eax
cmp	len, 0FFFFFFFFh
jz	loc_641E25A9
test	len, len
jz	short loc_641E256C
test	remote_ip_addr_0, remote_ip_addr_0
jz	short loc_641E2512
mov	eax, [ebp+remote_port]
test	eax, eax
jz	short loc_641E2512
test	byte ptr [stream_0+24h], 1
jz	short loc_641E2528
			
mov	eax, len
lea	esp, [ebp-0Ch]
pop	stream_0
pop	len
pop	remote_ip_addr_0
leave
retn
mov	[ebp+flen], 10h
jmp	short loc_641E24C6
align 4
mov	eax, dword ptr [ebp+s+4]
mov	[esp], eax	
call	_inet_ntoa@4
push	ecx
test	eax, eax
jz	short loc_641E254B
mov	[esp+8], ip_0	
mov	ip_0, [ebp+remote_ip_addr_size]
mov	[esp+4], eax	
mov	[esp], remote_ip_addr_0	
call	_silc_snprintf
movzx	ip_0, word ptr [ebp+s+2]
mov	[esp], eax	
call	_ntohs@4
push	edx
movzx	eax, ax
mov	edx, [ebp+remote_port]
mov	[edx], eax
mov	eax, len
lea	esp, [ebp-0Ch]
pop	stream_0
pop	len
pop	remote_ip_addr_0
leave
retn
align 4
mov	eax, [stream_0+8]
mov	[esp+4], eax	
mov	eax, [stream_0+4]
mov	[esp], eax	
call	_silc_schedule_unset_listen_fd
jmp	short loc_641E2501
			
mov	dword ptr [esp+0Ch], 0
mov	[esp+8], data_size_0 
mov	[esp+4], ret_data_0 
mov	ret_data_0, [stream_0+8]
mov	[esp], eax	
call	_recv@16
sub	esp, 10h
mov	esi, eax
cmp	len, 0FFFFFFFFh
jnz	loc_641E24FD
call	_WSAGetLastError@0
cmp	eax, 2733h
jz	short loc_641E25DC
mov	edx, [stream_0+8]
mov	[esp+4], edx	
mov	edx, [stream_0+4]
mov	[esp], edx	
mov	[ebp+var_3C], err
call	_silc_schedule_unset_listen_fd
mov	eax, [ebp+var_3C]
mov	[stream_0+16h],	ax
mov	len, 0FFFFFFFEh
jmp	loc_641E2512
align 4
mov	dword ptr [esp+0Ch], 0 
mov	dword ptr [esp+8], 1 
mov	eax, [stream_0+8]
mov	[esp+4], eax	
mov	eax, [stream_0+4]
mov	[esp], eax	
call	_silc_schedule_set_listen_fd
jmp	loc_641E2512
align 4
public _silc_net_udp_connect
push	ebp
mov	ebp, esp
push	edi
push	esi
push	ebx
sub	esp, 2Ch
mov	esi, [ebp+local_ip_addr]
mov	ecx, [ebp+schedule]
test	ecx, ecx
jz	err
test	local_ip_addr_0, local_ip_addr_0
jz	loc_641E2738
mov	edx, local_ip_addr_0 
lea	edi, [ebp+server]
mov	ecx, [ebp+local_port] 
mov	eax, edi	
call	_silc_net_set_sockaddr
test	al, al
jz	err
mov	dword ptr [esp+8], 0 
mov	dword ptr [esp+4], 2 
movsx	eax, word ptr [ebp+server]
mov	[esp], eax	
call	_socket@12
sub	esp, 0Ch
mov	ebx, eax
cmp	eax, 0FFFFFFFFh
jz	loc_641E2744
mov	dword ptr [esp+0Ch], 1 
mov	dword ptr [esp+8], 4 
mov	dword ptr [esp+4], 0FFFFh 
mov	[esp], sock	
call	_silc_net_set_socket_opt
inc	eax
jz	loc_641E2764
mov	dword ptr [esp+8], 10h 
mov	[esp+4], edi	
mov	[esp], sock	
call	_bind@12
sub	esp, 0Ch
inc	rval
jz	short loc_641E26F2
mov	edx, [ebp+remote_ip_addr]
test	edx, edx
jz	short loc_641E26B3
mov	rval, [ebp+remote_port]
test	rval, rval
jnz	short loc_641E2704
test	local_ip_addr_0, local_ip_addr_0
jz	short loc_641E2700
mov	[esp], local_ip_addr_0 
call	_silc_net_is_ip6
movzx	rval, al
mov	edx, [ebp+schedule]
mov	[esp+0Ch], edx	
xor	edx, edx
cmp	[ebp+remote_ip_addr], 0
setnz	dl
mov	[esp+8], edx	
mov	[esp+4], rval	
mov	[esp], sock	
call	_silc_socket_udp_stream_create
test	rval, rval
jz	short loc_641E26F2
			
lea	esp, [ebp-0Ch]
pop	sock
pop	local_ip_addr_0
pop	edi
leave
retn
align 10h
			
xor	ebx, ebx
			
mov	[esp], sock
call	_close
xor	rval, rval
jmp	short loc_641E26E6
align 10h
			
xor	rval, rval
jmp	short loc_641E26C2
mov	ecx, [ebp+remote_port] 
mov	edx, [ebp+remote_ip_addr] 
mov	rval, edi	
call	_silc_net_set_sockaddr
test	al, al
jz	short loc_641E26F2
mov	dword ptr [esp+8], 10h 
mov	[esp+4], edi	
mov	[esp], sock	
call	_connect@12
sub	esp, 0Ch
inc	rval
jz	short loc_641E26F2
test	local_ip_addr_0, local_ip_addr_0
jnz	short loc_641E26B7
jmp	short loc_641E2700
align 4
mov	edx, offset a0_0_0_0 
jmp	loc_641E2625
align 4
mov	dword ptr [esp], offset	aCannotCreateSo	
call	_silc_format
mov	[esp+4], rval	
mov	dword ptr [esp], 3 
call	_silc_log_output
xor	rval, rval
jmp	short loc_641E26E6
mov	dword ptr [esp], offset	aCannotSetSocke	
call	_silc_format
mov	[esp+4], rval	
mov	dword ptr [esp], 3 
call	_silc_log_output
jmp	loc_641E26F2
align 4
public _silc_net_close_listener
			
push	ebp
mov	ebp, esp
push	edi
push	esi
push	ebx
sub	esp, 1Ch
mov	ebx, [ebp+listener]
test	ebx, ebx
jz	short loc_641E2810
test	dword ptr [listener_0+10h], 3FFFFFFFh
jz	short loc_641E27F4
xor	esi, esi
nop
lea	edi, ds:0[i*4]
mov	eax, [listener_0+0Ch]
mov	eax, [eax+edi]
mov	[esp+4], eax	
mov	eax, [listener_0]
mov	[esp], eax	
call	_silc_schedule_task_del_by_fd
mov	dword ptr [esp+4], 2 
mov	eax, [listener_0+0Ch]
mov	eax, [eax+edi]
mov	[esp], eax	
call	_shutdown@8
sub	esp, 8
mov	eax, [listener_0+0Ch]
mov	eax, [eax+edi]
mov	[esp], eax	
call	_closesocket@4
push	edi
inc	i
mov	eax, [listener_0+10h]
and	eax, 3FFFFFFFh
cmp	eax, i
jg	short loc_641E27A4
mov	eax, [listener_0+0Ch]
mov	[esp], eax	
call	_silc_free
mov	[ebp+listener],	listener_0
lea	esp, [ebp-0Ch]
pop	listener_0
pop	i
pop	edi
leave
jmp	_silc_free
align 10h
lea	esp, [ebp-0Ch]
pop	listener_0
pop	esi
pop	edi
leave
retn
public _silc_net_tcp_create_listener
push	ebp
mov	ebp, esp
push	edi
push	esi
push	ebx
sub	esp, 4Ch
mov	esi, [ebp+callback]
mov	dl, [ebp+lookup]
movzx	edi, [ebp+require_fqdn]
mov	ecx, [ebp+port]
test	ecx, ecx
js	loc_641E2A0C
mov	eax, [ebp+schedule]
test	eax, eax
jz	loc_641E2A0C
test	callback_0, callback_0
jz	loc_641E2A0C
mov	dword ptr [esp+4], 14h 
mov	dword ptr [esp], 1 
mov	[ebp+var_30], dl
call	_silc_calloc
mov	ebx, eax
test	eax, eax
mov	dl, [ebp+var_30]
jz	loc_641E2A0E
mov	listener, [ebp+schedule]
mov	[listener], eax
mov	[listener+4], callback_0
mov	eax, [ebp+context]
mov	[listener+8], eax
and	require_fqdn_0,	1
shl	edi, 6
mov	al, [listener+13h]
and	eax, 3Fh
shl	edx, 7
or	eax, edi
or	eax, edx
mov	[listener+13h],	al
mov	callback_0, [ebp+local_ip_count]
test	esi, esi
jnz	loc_641E29EC
mov	dword ptr [esp+4], 4 
mov	dword ptr [esp], 1 
call	_silc_calloc
mov	[listener+0Ch],	eax
test	eax, eax
jz	loc_641E2A0C
mov	[ebp+local_ip_count], 1
xor	esi, esi
xor	edi, edi
jmp	loc_641E29D6
align 4
mov	eax, [ebp+local_ip_addr]
mov	edx, [eax+esi*4] 
mov	ecx, [ebp+port]
lea	eax, [ebp+server] 
call	_silc_net_set_sockaddr
test	al, al
jz	loc_641E2A49
mov	dword ptr [esp+8], 0 
mov	dword ptr [esp+4], 1 
movsx	eax, word ptr [ebp+server]
mov	[esp], eax	
call	_socket@12
sub	esp, 0Ch
mov	[ebp+sock], eax
inc	eax
jz	loc_641E2A60
mov	dword ptr [esp+0Ch], 1 
mov	dword ptr [esp+8], 4 
mov	dword ptr [esp+4], 0FFFFh 
mov	edx, [ebp+sock]
mov	[esp], edx	
call	_silc_net_set_socket_opt
inc	eax
jz	loc_641E2A88
mov	dword ptr [esp+8], 10h 
lea	edx, [ebp+server]
mov	[esp+4], edx	
mov	rval, [ebp+sock]
mov	[esp], rval	
call	_bind@12
sub	esp, 0Ch
inc	rval
jz	loc_641E2A18
mov	dword ptr [esp+4], 7FFFFFFFh 
mov	rval, [ebp+sock]
mov	[esp], rval	
call	_listen@8
sub	esp, 8
inc	rval
jz	loc_641E2ABC
mov	dword ptr [esp+18h], 0 
mov	dword ptr [esp+14h], 0 
mov	dword ptr [esp+10h], 0 
mov	[esp+0Ch], listener 
mov	dword ptr [esp+8], offset _silc_net_accept 
mov	rval, [ebp+sock]
mov	[esp+4], rval	
mov	edx, [ebp+schedule]
mov	[esp], edx	
call	_silc_schedule_task_add
mov	rval, [listener+0Ch]
mov	edx, [ebp+sock]
mov	[rval+esi*4], edx
mov	rval, [listener+10h]
lea	edx, [rval+1]
and	edx, 3FFFFFFFh
and	rval, 0C0000000h
or	rval, edx
mov	[listener+10h],	rval
inc	i
mov	esi, i
cmp	[ebp+local_ip_count], i
jbe	short loc_641E2A0E
mov	ecx, [ebp+local_ip_addr]
test	ecx, ecx
jnz	loc_641E28CC
mov	edx, offset a0_0_0_0 
jmp	loc_641E28D2
align 4
mov	dword ptr [esp+4], 4 
mov	edx, [ebp+local_ip_count]
mov	[esp], edx	
call	_silc_calloc
mov	[listener+0Ch],	rval
test	rval, rval
jnz	loc_641E28C2
xchg	ax, ax
			
xor	listener, listener
			
mov	rval, listener
lea	esp, [ebp-0Ch]
pop	listener
pop	esi
pop	i
leave
retn
call	_WSAGetLastError@0
mov	[esp+4], rval
mov	dword ptr [esp], offset	aCannotBindSock	
call	_silc_format
mov	[esp+4], rval	
mov	dword ptr [esp], 3 
call	_silc_log_output
mov	edx, [ebp+sock]
mov	[esp], edx	
call	_closesocket@4
push	rval
			
mov	[esp], listener	
call	_silc_net_close_listener
xor	listener, listener
mov	rval, listener
lea	esp, [ebp-0Ch]
pop	listener
pop	esi
pop	i
leave
retn
align 10h
call	_WSAGetLastError@0
mov	[esp+4], rval
mov	dword ptr [esp], offset	aCannotCreate_0	
call	_silc_format
mov	[esp+4], rval	
mov	dword ptr [esp], 3 
call	_silc_log_output
jmp	short loc_641E2A49
align 4
call	_WSAGetLastError@0
mov	[esp+4], rval
mov	dword ptr [esp], offset	aCannotSetSoc_0	
call	_silc_format
mov	[esp+4], rval	
mov	dword ptr [esp], 3 
call	_silc_log_output
mov	rval, [ebp+sock]
mov	[esp], rval	
call	_closesocket@4
push	edx
jmp	short loc_641E2A49
align 4
call	_WSAGetLastError@0
mov	[esp+4], rval
mov	dword ptr [esp], offset	aCannotSetSoc_1	
jmp	loc_641E2A28
align 4
public _silc_net_accept
push	ebp
mov	ebp, esp
push	esi
push	ebx
sub	esp, 20h
mov	esi, [ebp+context]
mov	eax, [ebp+fd]
mov	[esp], eax	
call	_silc_net_accept_connection
mov	ebx, eax
cmp	eax, 0FFFFFFFFh
jz	short loc_641E2B45
mov	dword ptr [esp+0Ch], 1 
mov	dword ptr [esp+8], 4 
mov	dword ptr [esp+4], 0FFFFh 
mov	[esp], sock	
call	_silc_net_set_socket_opt
mov	[esp+14h], context_0 
mov	dword ptr [esp+10h], offset _silc_net_accept_stream 
mov	eax, [ebp+schedule]
mov	[esp+0Ch], eax	
mov	al, [context_0+13h]
mov	dl, al
shr	dl, 6
and	edx, 1
mov	[esp+8], edx	
shr	al, 7
movzx	eax, al
mov	[esp+4], eax	
mov	[esp], sock	
call	_silc_socket_tcp_stream_create
add	esp, 20h
pop	sock
pop	context_0
leave
retn
public _silc_net_connect_st_start
push	ebp
mov	ebp, esp
push	edi
push	esi
push	ebx
sub	esp, 6Ch
mov	ebx, [ebp+fsm_context]
cmp	byte ptr [ebx+0C3h], 0
js	loc_641E2CD8
lea	edi, [fsm_context_0+74h]
mov	[ebp+var_49], 1
jmp	loc_641E2C01
align 4
mov	edx, [fsm_context_0+6Ch] 
test	edx, edx
jz	short loc_641E2B8D
xor	ecx, ecx	
lea	sock, [ebp+local] 
call	_silc_net_set_sockaddr
test	al, al
jnz	loc_641E2CB8
			
mov	dword ptr [esp+8], 10h 
lea	edx, [ebp+desthost]
mov	[esp+4], edx	
mov	[esp], sock	
call	_connect@12
sub	esp, 0Ch
mov	[ebp+rval], eax
call	_WSAGetLastError@0
mov	[ebp+err], eax
cmp	[ebp+rval], 0FFFFFFFFh
jnz	loc_641E2CE8
cmp	eax, 2733h
jz	loc_641E2CE8
mov	dword ptr [esp+4], 2 
mov	[esp], sock	
call	_shutdown@8
sub	esp, 8
mov	[esp], sock	
call	_closesocket@4
push	esi
cmp	[ebp+var_49], 0
jz	loc_641E2DD8
mov	[esp], edi	
call	_silc_net_is_ip6
test	al, al
jz	loc_641E2DD8
mov	[ebp+var_49], 0
mov	dword ptr [esp+0Ch], 40h 
mov	[esp+8], edi	
movzx	eax, [ebp+var_49]
mov	[esp+4], prefer_ipv6 
mov	prefer_ipv6, [fsm_context_0+70h]
mov	[esp], eax	
call	_silc_net_gethostbyname
test	al, al
jz	loc_641E2E18
mov	ecx, [fsm_context_0+0C0h]
and	ecx, 0FFFFFFh	
mov	edx, edi	
lea	eax, [ebp+desthost] 
call	_silc_net_set_sockaddr
test	al, al
jz	loc_641E2CD8
mov	dword ptr [esp+8], 0 
mov	dword ptr [esp+4], 1 
movsx	eax, word ptr [ebp+desthost]
mov	[esp], eax	
call	_socket@12
sub	esp, 0Ch
mov	sock, eax
cmp	eax, 0FFFFFFFFh
jnz	loc_641E2B74
cmp	[ebp+var_49], 0
jz	short loc_641E2C86
mov	[esp], edi	
call	_silc_net_is_ip6
test	al, al
jnz	loc_641E2BFD
call	_WSAGetLastError@0
mov	[esp+4], eax
mov	dword ptr [esp], offset	aCannotCreate_0	
call	_silc_format
mov	[esp+4], eax	
mov	dword ptr [esp], 3 
call	_silc_log_output
mov	eax, 3
lea	esp, [ebp-0Ch]
pop	fsm_context_0
pop	sock
pop	edi
leave
retn
mov	dword ptr [esp+8], 10h
lea	eax, [ebp+local]
mov	[esp+4], eax	
mov	[esp], sock	
call	_bind@12
sub	esp, 0Ch
jmp	loc_641E2B8D
align 4
			
mov	eax, 3
lea	esp, [ebp-0Ch]
pop	fsm_context_0
pop	sock
pop	edi
leave
retn
align 4
			
mov	[ebp+argp], 1
lea	eax, [ebp+argp]
mov	[esp+8], eax	
mov	dword ptr [esp+4], 8004667Eh 
mov	[esp], sock	
call	_ioctlsocket@12
sub	esp, 0Ch
mov	dword ptr [esp+0Ch], 1 
mov	dword ptr [esp+8], 1 
mov	dword ptr [esp+4], 6 
mov	[esp], sock	
call	_silc_net_set_socket_opt
mov	dword ptr [esp+0Ch], 1 
mov	dword ptr [esp+8], 8 
mov	dword ptr [esp+4], 0FFFFh 
mov	[esp], sock	
call	_silc_net_set_socket_opt
mov	[fsm_context_0+0B4h], sock
mov	dword ptr [esp+4], offset _silc_net_connect_st_stream 
mov	ecx, [ebp+fsm]
mov	[esp], ecx	
call	_silc_fsm_next
mov	edx, [ebp+fsm]
mov	al, [edx+28h]
mov	dl, al
or	edx, 4
mov	ecx, [ebp+fsm]
mov	[ecx+28h], dl
test	al, 4
jnz	loc_641E2E57
lea	eax, [fsm_context_0+0Ch]
mov	[esp], eax	
call	_silc_fsm_get_schedule
mov	[esp+14h], fsm_context_0 
mov	dword ptr [esp+10h], offset _silc_net_connect_wait_stream 
mov	[esp+0Ch], eax	
mov	dword ptr [esp+8], 0 
mov	dword ptr [esp+4], 1 
mov	eax, [fsm_context_0+0B4h]
mov	[esp], eax	
call	_silc_socket_tcp_stream_create
mov	[fsm_context_0+68h], eax
mov	eax, [ebp+fsm]
mov	dl, [eax+28h]
mov	al, dl
shr	al, 2
and	edx, 0FFFFFFFBh
mov	ecx, [ebp+fsm]
mov	[ecx+28h], dl
shl	eax, 1
and	eax, 2
lea	esp, [ebp-0Ch]
pop	fsm_context_0
pop	sock
pop	edi
leave
retn
			
cmp	[ebp+err], 274Dh
jz	loc_641E2E93
cmp	[ebp+err], 2751h
jz	loc_641E2E88
cmp	[ebp+err], 274Ch
jnz	short loc_641E2E01
mov	dword ptr [fsm_context_0], 5
			
call	_WSAGetLastError@0
mov	[esp+4], eax
mov	dword ptr [esp], offset	aCannotConnectT	
jmp	loc_641E2C96
align 4
call	_WSAGetLastError@0
mov	[esp+8], eax
mov	eax, [fsm_context_0+70h]
mov	[esp+4], eax
mov	dword ptr [esp], offset	aNetworkSUnreac	
call	_silc_format
mov	[esp+4], eax	
mov	dword ptr [esp], 3 
call	_silc_log_output
mov	dword ptr [fsm_context_0], 3
mov	eax, 3
lea	esp, [ebp-0Ch]
pop	fsm_context_0
pop	sock
pop	edi
leave
retn
mov	dword ptr [esp+8], 25Ah
mov	dword ptr [esp+4], offset aSilcwin32net_c 
mov	dword ptr [esp], offset	aSilc_verifySD 
call	_silc_format
mov	[esp+4], eax	
mov	dword ptr [esp], 3 
call	_silc_log_output
jmp	loc_641E2D7B
mov	dword ptr [fsm_context_0], 3
jmp	loc_641E2E01
mov	dword ptr [fsm_context_0], 4
jmp	loc_641E2E01
align 10h
public _silc_schedule_internal_wakeup
push	ebp
mov	ebp, esp
leave
retn
align 4
public _silc_schedule_internal_signal_register
			
push	ebp
mov	ebp, esp
leave
retn
align 10h
public _silc_schedule_internal_signal_unregister
			
			
push	ebp
mov	ebp, esp
leave
retn
align 4
public _silc_schedule_internal_signals_call
			
			
push	ebp
mov	ebp, esp
leave
retn
align 10h
public _silc_schedule_internal_signals_block
			
			
push	ebp
mov	ebp, esp
leave
retn
align 4
public _silc_schedule_internal_signals_unblock
			
			
push	ebp
mov	ebp, esp
leave
retn
align 10h
public _silc_schedule_internal_schedule_fd
			
			
push	ebp
mov	ebp, esp
push	ebx
sub	esp, 14h
mov	edx, [ebp+context]
mov	ebx, [ebp+task]
mov	ecx, [ebp+event_mask]
test	edx, edx
jz	short loc_641E2F1A
mov	eax, event_mask_0
and	events,	1
neg	events
and	events,	0Dh
and	event_mask_0, 2
jnz	short loc_641E2F24
mov	[esp+0Ch], events 
mov	dword ptr [esp+8], 401h	
mov	events,	[context_0]
mov	[esp+4], eax	
mov	eax, [task_0+14h]
mov	[esp], eax	
call	_WSAAsyncSelect@16
sub	esp, 10h
and	dword ptr [task_0+10h],	0C0007FFFh
mov	al, 1
mov	task_0,	[ebp+var_4]
leave
retn
align 4
or	events,	2
jmp	short loc_641E2EF3
align 4
public _silc_schedule_internal_uninit
			
push	ebp
mov	ebp, esp
push	esi
push	ebx
sub	esp, 30h
mov	ebx, [ebp+context]
test	ebx, ebx
jz	short loc_641E2F94
mov	eax, [ebp+schedule]
mov	[esp+0Ch], eax
mov	dword ptr [esp+8], offset aSilcscheduleP 
mov	dword ptr [esp+4], 20h 
lea	esi, [ebp+n]
mov	[esp], esi	
call	_silc_snprintf
mov	eax, [context_0]
mov	[esp], eax	
call	_DestroyWindow@4
push	edx
mov	dword ptr [esp+4], 0 
mov	[esp], esi	
call	_UnregisterClassA@8
sub	esp, 8
mov	eax, [context_0+2Ch]
mov	[esp], eax	
call	_CloseHandle@4
push	eax
call	_WSACleanup@0
mov	[esp], context_0 
call	_silc_free
lea	esp, [ebp-8]
pop	context_0
pop	esi
leave
retn
align 4
push	ebp
mov	ebp, esp
sub	esp, 1C8h
mov	[ebp+sopt], 20h
lea	eax, [ebp+wdata]
mov	[esp+4], eax	
mov	dword ptr [esp], 202h 
call	_WSAStartup@8
sub	esp, 8
test	eax, eax
jz	short loc_641E2FD0
xor	ret, ret
leave
retn
align 10h
mov	dword ptr [esp+10h], 4 
lea	ret, [ebp+sopt]
mov	[esp+0Ch], eax	
mov	dword ptr [esp+8], 7008h 
mov	dword ptr [esp+4], 0FFFFh 
mov	dword ptr [esp], 0FFFFFFFFh 
call	_setsockopt@20
sub	esp, 14h
test	eax, eax
setz	al
leave
retn
align 4
public _silc_schedule_internal_init
			
push	ebp
mov	ebp, esp
push	edi
push	esi
push	ebx
sub	esp, 5Ch
mov	esi, [ebp+schedule]
call	_silc_net_win32_init
mov	dword ptr [esp+4], 34h 
mov	dword ptr [esp], 1 
call	_silc_calloc
mov	ebx, eax
test	eax, eax
jz	loc_641E31CC
mov	eax, [schedule_0+5Ch]
and	eax, 0E0000000h
or	eax, 40h
mov	[schedule_0+5Ch], eax
mov	[esp+0Ch], schedule_0
mov	dword ptr [esp+8], offset aSilcscheduleP 
mov	dword ptr [esp+4], 20h 
lea	edi, [ebp+n]
mov	[esp], edi	
call	_silc_snprintf
mov	dword ptr [ebx+8], offset _silc_schedule_wnd_proc@16
mov	dword ptr [ebx+10h], 4
mov	[esp], edi	
call	_strdup
mov	[ebx+28h], eax
lea	eax, [ebx+4]
mov	[esp], eax	
call	_RegisterClassA@4
push	eax
mov	dword ptr [esp+2Ch], 0 
mov	dword ptr [esp+28h], 0 
mov	dword ptr [esp+24h], 0 
mov	dword ptr [esp+20h], 0 
mov	dword ptr [esp+1Ch], 0 
mov	dword ptr [esp+18h], 0 
mov	dword ptr [esp+14h], 0 
mov	dword ptr [esp+10h], 0 
mov	dword ptr [esp+0Ch], 0 
mov	dword ptr [esp+8], offset WindowName 
mov	eax, [ebx+28h]
mov	[esp+4], eax	
mov	dword ptr [esp], 0 
call	_CreateWindowExA@48
sub	esp, 30h
mov	[ebx], eax
test	eax, eax
jz	loc_641E3188
mov	[esp+8], schedule_0 
mov	dword ptr [esp+4], 0FFFFFFEBh 
mov	[esp], eax	
call	_SetWindowLongA@12
sub	esp, 0Ch
mov	dword ptr [esp+18h], 20h 
mov	dword ptr [esp+14h], 0 
mov	dword ptr [esp+10h], 0 
mov	dword ptr [esp+0Ch], 0 
mov	dword ptr [esp+8], 0 
mov	dword ptr [esp+4], 1 
mov	eax, [ebx]
mov	[esp], eax	
call	_SetWindowPos@28
sub	esp, 1Ch
mov	dword ptr [esp+0Ch], 0 
mov	dword ptr [esp+8], 64h 
mov	dword ptr [esp+4], 0 
mov	dword ptr [esp], 0 
call	_CreateSemaphoreA@16
sub	esp, 10h
mov	[ebx+2Ch], eax
test	eax, eax
jz	short loc_641E31D6
mov	eax, ebx
lea	esp, [ebp-0Ch]
pop	ebx
pop	schedule_0
pop	edi
leave
retn
align 4
mov	dword ptr [esp], offset	aCouldNotCreate	
call	_silc_format
mov	[esp+4], eax	
mov	dword ptr [esp], 3 
call	_silc_log_output
mov	eax, [ebx]
mov	[esp], eax	
call	_DestroyWindow@4
push	ecx
mov	dword ptr [esp+4], 0 
mov	[esp], edi	
call	_UnregisterClassA@8
sub	esp, 8
mov	[esp], ebx	
call	_silc_free
xchg	ax, ax
xor	eax, eax
lea	esp, [ebp-0Ch]
pop	ebx
pop	schedule_0
pop	edi
leave
retn
mov	dword ptr [esp], offset	aCouldNotCrea_0
call	_silc_format
mov	[esp+4], eax	
mov	dword ptr [esp], 3 
call	_silc_log_output
mov	[esp], ebx	
call	_silc_free
xor	eax, eax
jmp	loc_641E317D
align 4
public _silc_select
			
push	ebp
mov	ebp, esp
push	edi
push	esi
push	ebx
sub	esp, 15Ch
mov	edx, [ebp+context]
mov	al, [edx+30h]
test	al, 1
jnz	short loc_641E3251
or	eax, 1
mov	[edx+30h], al
mov	edx, [ebp+schedule]
mov	eax, [edx+24h]
and	eax, 3
mov	[edx+24h], eax
mov	word ptr [edx+20h], 0
mov	word ptr [edx+22h], 0
mov	byte ptr [edx+24h], 0
mov	dword ptr [edx+1Ch], 0
mov	dword ptr [edx+18h], 0
mov	dword ptr [edx+14h], 0
mov	eax, [ebp+context]
mov	ebx, [eax+2Ch]
mov	edx, [ebp+schedule]
test	byte ptr [edx+5Fh], 20h
jnz	loc_641E3377
mov	esi, 0FFFFFFFFh
mov	edx, [ebp+schedule]
mov	eax, [edx+50h]
mov	[ebp+handles], ebx
mov	[esp], eax	
call	_silc_mutex_unlock
lea	ebx, [ebp+msg]
			
call	_GetTickCount@0
mov	curtime, eax
mov	dword ptr [esp+10h], 0FFh 
mov	[esp+0Ch], timeo 
mov	dword ptr [esp+8], 0 
lea	eax, [ebp+handles]
mov	[esp+4], eax	
mov	dword ptr [esp], 1 
call	_MsgWaitForMultipleObjects@20
sub	esp, 14h
cmp	eax, 0FFFFFFFFh
jz	loc_641E33D6
cmp	ready, 7Fh
jbe	short loc_641E3308
cmp	ready, 80h
jz	loc_641E3414
cmp	ready, 102h
jz	loc_641E33B7
test	ready, ready
jnz	loc_641E341D
mov	edx, [ebp+schedule]
mov	ready, [edx+50h]
mov	[esp], eax	
call	_silc_mutex_lock
mov	eax, [ebp+context]
and	byte ptr [eax+30h], 0FEh
mov	edx, [ebp+schedule]
mov	eax, [edx+24h]
shr	eax, 2
inc	eax
lea	esp, [ebp-0Ch]
pop	ebx
pop	timeo
pop	curtime
leave
retn
align 4
cmp	ready, 1
jz	short loc_641E3322
jmp	short loc_641E32D8
align 10h
mov	[esp], ebx	
call	_TranslateMessage@4
push	ecx
mov	[esp], ebx	
call	_DispatchMessageA@4
push	edx
mov	dword ptr [esp+10h], 1
mov	dword ptr [esp+0Ch], 0 
mov	dword ptr [esp+8], 0 
mov	dword ptr [esp+4], 0 
mov	[esp], ebx	
call	_PeekMessageA@20
sub	esp, 14h
test	eax, eax
jnz	short loc_641E3310
cmp	timeo, 0FFFFFFFFh
jz	loc_641E3280
call	_GetTickCount@0
add	timeo, curtime
sub	timeo, eax
call	_GetTickCount@0
test	timeo, timeo
jns	loc_641E3280
xor	timeo, timeo
jmp	loc_641E3280
mov	eax, [ebp+schedule]
mov	ecx, [eax+58h]
mov	esi, 10624DD3h
mov	eax, ecx
imul	esi
mov	[ebp+var_140], eax
mov	[ebp+var_13C], edx
mov	eax, [ebp+var_13C]
sar	eax, 6
sar	ecx, 1Fh
sub	eax, ecx
mov	edx, [ebp+schedule]
mov	ecx, [edx+54h]
lea	ecx, [ecx+ecx*4]
lea	ecx, [ecx+ecx*4]
lea	ecx, [ecx+ecx*4]
lea	esi, [eax+ecx*8]
jmp	loc_641E3269
mov	edx, [ebp+schedule]
mov	ready, [edx+50h]
mov	[esp], eax	
call	_silc_mutex_lock
mov	eax, [ebp+context]
and	byte ptr [eax+30h], 0FEh
xor	eax, eax
lea	esp, [ebp-0Ch]
pop	ebx
pop	timeo
pop	curtime
leave
retn
mov	dword ptr [esp], offset	aWaitformultipl
call	_silc_format
mov	[esp+4], eax	
mov	dword ptr [esp], 2 
call	_silc_log_output
mov	edx, [ebp+schedule]
mov	eax, [edx+50h]
mov	[esp], eax	
call	_silc_mutex_lock
mov	eax, [ebp+context]
and	byte ptr [eax+30h], 0FEh
mov	eax, 0FFFFFFFFh
lea	esp, [ebp-0Ch]
pop	ebx
pop	timeo
pop	curtime
leave
retn
mov	dword ptr [esp], offset	aWaitformulti_0
jmp	short loc_641E33DD
mov	ready, [ebp+context]
and	byte ptr [eax+30h], 0FEh
or	eax, 0FFFFFFFFh
jmp	loc_641E32FF
push	ebp
mov	ebp, esp
push	edi
push	esi
push	ebx
sub	esp, 3Ch
mov	esi, [ebp+hwnd]
mov	edi, [ebp+wParam]
mov	dword ptr [esp+4], 0FFFFFFEBh 
mov	[esp], esi	
call	_GetWindowLongA@8
sub	esp, 8
mov	ebx, eax
cmp	[ebp+wMsg], 401h
jz	short loc_641E3480
mov	eax, [ebp+lParam]
mov	[esp+0Ch], eax	
mov	[esp+8], wParam_0 
mov	edx, [ebp+wMsg]
mov	[esp+4], edx	
mov	[esp], hwnd_0	
call	_DefWindowProcA@16
sub	esp, 10h
lea	esp, [ebp-0Ch]
pop	ebx
pop	hwnd_0
pop	wParam_0
leave
retn	10h
mov	eax, [eax]
mov	[ebp+internal],	eax
mov	eax, [ebx+50h]
mov	[esp], eax	
call	_silc_mutex_lock
mov	edx, [ebp+internal]
mov	al, [edx+30h]
test	al, 1
jnz	short loc_641E34CE
or	eax, 1
mov	[edx+30h], al
mov	eax, [ebx+24h]
and	eax, 3
mov	[ebx+24h], eax
mov	word ptr [ebx+20h], 0
mov	word ptr [ebx+22h], 0
mov	byte ptr [ebx+24h], 0
mov	dword ptr [ebx+1Ch], 0
mov	dword ptr [ebx+18h], 0
mov	dword ptr [ebx+14h], 0
lea	eax, [ebp+task]
mov	[esp+0Ch], eax	
mov	dword ptr [esp+8], 0 
mov	[esp+4], wParam_0 
mov	eax, [ebx+10h]
mov	[esp], eax	
call	_silc_hash_table_find
test	al, al
jz	short loc_641E3564
mov	eax, [ebp+task]
test	byte ptr [eax+0Ch], 2
jz	short loc_641E3564
test	dword ptr [eax+10h], 7FFEh
jz	short loc_641E3564
mov	edx, [eax+10h]
and	edx, 0C0007FFFh
mov	[eax+10h], edx
cmp	word ptr [ebp+lParam], 2
jz	loc_641E35B8
jbe	short loc_641E3574
cmp	word ptr [ebp+lParam], 4
jz	short loc_641E3529
cmp	word ptr [ebp+lParam], 8
jnz	short loc_641E357B
			
or	dh, 80h
mov	[eax+10h], edx
mov	hwnd_0,	[ebx+14h]
test	esi, esi
jz	loc_641E35CC
movzx	edx, word ptr [ebx+20h]
mov	ecx, [ebx+18h]
mov	[ecx+edx], eax
test	byte ptr [ebx+24h], 1
jz	short loc_641E3554
movzx	ecx, word ptr [ebx+22h]
mov	esi, [ebx+18h]
mov	[eax+ecx], esi
mov	[ebx+18h], eax
mov	dword ptr [eax+edx], 0
add	dword ptr [ebx+24h], 4
jmp	short loc_641E357B
			
mov	eax, [ebx+50h]
mov	[esp], eax	
call	_silc_mutex_unlock
jmp	loc_641E3459
cmp	word ptr [ebp+lParam], 1
jz	short loc_641E3529
			
mov	dword ptr [esp+8], 0 
mov	dword ptr [esp+4], 1 
mov	edx, [ebp+internal]
mov	eax, [edx+2Ch]
mov	[esp], eax	
call	_ReleaseSemaphore@12
sub	esp, 0Ch
mov	eax, [ebx+50h]
mov	[esp], eax	
call	_silc_mutex_unlock
mov	eax, 1
lea	esp, [ebp-0Ch]
pop	ebx
pop	esi
pop	edi
leave
retn	10h
align 4
or	edx, 10000h
mov	[eax+10h], edx
mov	wParam_0, [ebx+14h]
test	edi, edi
jnz	loc_641E353A
mov	[ebx+14h], eax
movzx	edx, word ptr [ebx+20h]
jmp	loc_641E3544
public _silc_socket_stream_io
push	ebp
mov	ebp, esp
sub	esp, 8
mov	ecx, [ebp+type]
mov	eax, [ebp+context]
mov	edx, [eax+1Ch]
test	edx, edx
jz	short locret_641E35F5
cmp	type_0,	1
jz	short loc_641E360C
cmp	type_0,	2
jz	short loc_641E35F8
leave
retn
align 4
mov	type_0,	[context_0+20h]
mov	[ebp+type], ecx
mov	[ebp+app_context], 1
mov	[ebp+schedule],	context_0
leave
jmp	edx
align 4
mov	type_0,	[context_0+20h]
mov	[ebp+type], ecx
mov	[ebp+app_context], 0
mov	[ebp+schedule],	context_0
leave
jmp	edx
align 10h
public _silc_socket_stream_notifier
			
push	ebp
mov	ebp, esp
push	ebx
sub	esp, 24h
mov	ebx, [ebp+stream]
mov	eax, [ebp+schedule]
mov	edx, [ebp+callback]
mov	[ebx+1Ch], edx
mov	ecx, [ebp+context]
mov	[ebx+20h], ecx
mov	[ebx+4], eax
test	edx, edx
jz	loc_641E36CC
test	schedule_0, schedule_0
jz	short loc_641E36C4
mov	dword ptr [esp+18h], 0 
mov	dword ptr [esp+14h], 0 
mov	dword ptr [esp+10h], 0 
mov	[esp+0Ch], stream_0 
mov	dword ptr [esp+8], offset _silc_socket_stream_io 
mov	callback_0, [stream_0+8]
mov	[esp+4], edx	
mov	[esp], schedule_0 
call	_silc_schedule_task_add
test	eax, eax
jz	short loc_641E36BC
mov	dword ptr [esp+0Ch], 0 
mov	dword ptr [esp+8], 1 
mov	eax, [stream_0+8]
mov	[esp+4], eax	
mov	eax, [stream_0+4]
mov	[esp], eax	
call	_silc_schedule_set_listen_fd
test	al, al
jz	short loc_641E36BC
mov	eax, [stream_0+4]
test	eax, eax
jz	short loc_641E36C4
mov	[esp], eax	
call	_silc_schedule_wakeup
mov	al, 1
add	esp, 24h
pop	stream_0
leave
retn
			
xor	eax, eax
add	esp, 24h
pop	stream_0
leave
retn
			
mov	al, 1
add	esp, 24h
pop	stream_0
leave
retn
test	schedule_0, schedule_0
jz	short loc_641E36C4
mov	callback_0, [stream_0+8]
mov	[esp+4], edx	
mov	[esp], schedule_0 
call	_silc_schedule_unset_listen_fd
mov	eax, [stream_0+8]
mov	[esp+4], eax	
mov	eax, [stream_0+4]
mov	[esp], eax	
call	_silc_schedule_task_del_by_fd
jmp	short loc_641E36A5
align 4
public _silc_socket_stream_close
			
push	ebp
mov	ebp, esp
push	ebx
sub	esp, 14h
mov	ebx, [ebp+stream]
mov	eax, [ebx+4]
test	eax, eax
jz	short loc_641E3726
mov	edx, [stream_0+8]
mov	[esp+4], edx	
mov	[esp], eax	
call	_silc_schedule_unset_listen_fd
mov	eax, [stream_0+8]
mov	[esp+4], eax	
mov	eax, [stream_0+4]
mov	[esp], eax	
call	_silc_schedule_task_del_by_fd
mov	eax, [stream_0+8]
mov	[esp], eax	
call	_silc_net_close_connection
mov	al, 1
add	esp, 14h
pop	stream_0
leave
retn
align 4
public _silc_socket_udp_stream_read
push	ebp
mov	ebp, esp
sub	esp, 28h
mov	eax, [ebp+buf_len]
mov	[esp+14h], eax	
mov	eax, [ebp+buf]
mov	[esp+10h], eax	
mov	dword ptr [esp+0Ch], 0 
mov	dword ptr [esp+8], 0 
mov	dword ptr [esp+4], 0 
mov	eax, [ebp+stream]
mov	[esp], eax	
call	_silc_net_udp_receive
leave
retn
align 4
public _silc_socket_stream_write
			
push	ebp
mov	ebp, esp
push	esi
push	ebx
sub	esp, 20h
mov	ebx, [ebp+stream]
mov	dword ptr [esp+0Ch], 0 
mov	eax, [ebp+data_len]
mov	[esp+8], eax	
mov	eax, [ebp+data]
mov	[esp+4], eax	
mov	eax, [ebx+8]
mov	[esp], eax	
call	_send@16
sub	esp, 10h
mov	esi, eax
cmp	eax, 0FFFFFFFFh
jz	short loc_641E37FC
mov	ret, [stream_0+8]
mov	[esp+4], eax	
mov	eax, [stream_0+4]
mov	[esp], eax	
call	_silc_schedule_get_fd_events
test	al, 2
jnz	short loc_641E37D0
mov	eax, ret
lea	esp, [ebp-8]
pop	stream_0
pop	ret
leave
retn
align 10h
mov	dword ptr [esp+0Ch], 0 
mov	dword ptr [esp+8], 1 
mov	eax, [stream_0+8]
mov	[esp+4], eax	
mov	eax, [stream_0+4]
mov	[esp], eax	
call	_silc_schedule_set_listen_fd
mov	eax, ret
lea	esp, [ebp-8]
pop	stream_0
pop	ret
leave
retn
align 4
call	_WSAGetLastError@0
cmp	eax, 2733h
jz	short loc_641E3834
mov	edx, [stream_0+8]
mov	[esp+4], edx	
mov	edx, [stream_0+4]
mov	[esp], edx	
mov	[ebp+var_C], ret
call	_silc_schedule_unset_listen_fd
mov	eax, [ebp+var_C]
mov	[stream_0+16h],	ax
mov	ret, 0FFFFFFFEh
mov	eax, ret
lea	esp, [ebp-8]
pop	stream_0
pop	ret
leave
retn
align 4
mov	dword ptr [esp+0Ch], 0
mov	dword ptr [esp+8], 3
jmp	short loc_641E37E0
align 4
public _silc_socket_udp_stream_write
push	ebp
mov	ebp, esp
push	esi
push	ebx
sub	esp, 20h
mov	eax, [ebp+stream]
mov	edx, [ebp+data]
mov	ecx, [ebp+data_len]
test	byte ptr [eax+24h], 2
jnz	short loc_641E386E
mov	ebx, [stream_0+10h]
test	ebx, ebx
jz	short loc_641E386E
mov	esi, [stream_0+14h]
test	si, si
jnz	short loc_641E3884
			
mov	[ebp+data_len],	data_len_0
mov	[ebp+data], data_0
mov	[ebp+stream], stream_0
add	esp, 20h
pop	ebx
pop	esi
leave
jmp	_silc_socket_stream_write
align 4
mov	[esp+10h], data_len_0 
mov	[esp+0Ch], data_0 
movzx	esi, si
mov	[esp+8], esi	
mov	[esp+4], ebx	
mov	[esp], stream_0	
call	_silc_net_udp_send
add	esp, 20h
pop	ebx
pop	esi
leave
retn
align 4
public _silc_socket_stream_read
push	ebp
mov	ebp, esp
push	esi
push	ebx
sub	esp, 30h
mov	esi, [ebp+stream]
mov	ebx, [esi+8]
lea	eax, [ebp+argp]
mov	[esp+8], eax	
mov	dword ptr [esp+4], 4004667Fh 
mov	[esp], fd	
call	_ioctlsocket@12
sub	esp, 0Ch
mov	eax, [ebp+argp]
test	eax, eax
jz	loc_641E3990
mov	dword ptr [esp+0Ch], 0 
mov	eax, [ebp+buf_len]
mov	[esp+8], eax	
mov	eax, [ebp+buf]
mov	[esp+4], eax	
mov	[esp], fd	
call	_recv@16
sub	esp, 10h
mov	fd, eax
cmp	eax, 0FFFFFFFFh
jz	short loc_641E3924
test	len, len
jnz	short loc_641E3919
mov	len, [stream_0+8]
mov	[esp+4], eax	
mov	eax, [stream_0+4]
mov	[esp], eax	
call	_silc_schedule_unset_listen_fd
			
mov	eax, len
lea	esp, [ebp-8]
pop	len
pop	stream_0
leave
retn
align 4
call	_WSAGetLastError@0
cmp	eax, 2733h
jz	short loc_641E3937
cmp	len, 2714h
jnz	short loc_641E396C
mov	len, [stream_0+8]
mov	[esp+4], eax	
mov	eax, [stream_0+4]
mov	[esp], eax	
call	_silc_schedule_get_fd_events
mov	dword ptr [esp+0Ch], 0 
or	eax, 1
mov	[esp+8], eax	
mov	eax, [stream_0+8]
mov	[esp+4], eax	
mov	eax, [stream_0+4]
mov	[esp], eax	
call	_silc_schedule_set_listen_fd
jmp	short loc_641E3919
mov	edx, [stream_0+8]
mov	[esp+4], edx	
mov	edx, [stream_0+4]
mov	[esp], edx	
mov	[ebp+var_1C], len
call	_silc_schedule_unset_listen_fd
mov	eax, [ebp+var_1C]
mov	[stream_0+16h],	ax
mov	len, 0FFFFFFFEh
jmp	short loc_641E3919
align 10h
mov	dword ptr [esp+4], 1 
mov	dword ptr [esp], 1 
call	_SleepEx@8
sub	esp, 8
mov	eax, [stream_0+8]
mov	[esp+4], eax	
mov	eax, [stream_0+4]
mov	[esp], eax	
call	_silc_schedule_get_fd_events
mov	dword ptr [esp+0Ch], 0 
or	eax, 1
mov	[esp+8], eax	
mov	eax, [stream_0+8]
mov	[esp+4], eax	
mov	eax, [stream_0+4]
mov	[esp], eax	
call	_silc_schedule_set_listen_fd
mov	fd, 0FFFFFFFFh
jmp	loc_641E3919
public _silc_socket_stream_destroy
			
			
push	ebp
mov	ebp, esp
push	ebx
sub	esp, 14h
mov	ebx, [ebp+stream]
mov	eax, [socket_stream+4]
test	eax, eax
jz	short loc_641E3A16
mov	edx, [socket_stream+8]
mov	[esp+4], edx	
mov	[esp], eax	
call	_silc_schedule_unset_listen_fd
mov	eax, [socket_stream+8]
mov	[esp+4], eax	
mov	eax, [socket_stream+4]
mov	[esp], eax	
call	_silc_schedule_task_del_by_fd
mov	eax, [socket_stream+8]
mov	[esp], eax	
call	_silc_net_close_connection
mov	eax, [socket_stream+10h]
mov	[esp], eax	
call	_silc_free
mov	eax, [socket_stream+0Ch]
mov	[esp], eax	
call	_silc_free
mov	eax, [socket_stream+4]
test	eax, eax
jz	short loc_641E3A5C
mov	edx, [socket_stream+8]
mov	[esp+4], edx	
mov	[esp], eax	
call	_silc_schedule_task_del_by_fd
mov	eax, [socket_stream+4]
test	eax, eax
jz	short loc_641E3A5C
mov	[esp], eax	
call	_silc_schedule_wakeup
			
mov	[ebp+stream], socket_stream
add	esp, 14h
pop	socket_stream
leave
jmp	_silc_free
align 4
public _silc_thread_create
			
push	ebp
mov	ebp, esp
sub	esp, 18h
mov	eax, [ebp+context]
mov	[esp], eax	
call	[ebp+start_func]
xor	eax, eax
leave
retn
align 10h
public _silc_thread_exit
push	ebp
mov	ebp, esp
leave
retn
align 4
public _silc_thread_self
push	ebp
mov	ebp, esp
xor	eax, eax
leave
retn
align 10h
public _silc_thread_wait
push	ebp
mov	ebp, esp
xor	eax, eax
leave
retn
align 4
public _silc_thread_yield
push	ebp
mov	ebp, esp
leave
retn
align 10h
public _silc_mutex_alloc
			
push	ebp
mov	ebp, esp
xor	eax, eax
leave
retn
align 4
public _silc_mutex_free
			
push	ebp
mov	ebp, esp
leave
retn
align 10h
public _silc_mutex_lock
			
push	ebp
mov	ebp, esp
leave
retn
align 4
public _silc_mutex_unlock
			
push	ebp
mov	ebp, esp
leave
retn
align 10h
public _silc_mutex_assert_locked
push	ebp
mov	ebp, esp
leave
retn
align 4
public _silc_rwlock_alloc
push	ebp
mov	ebp, esp
xor	eax, eax
leave
retn
align 10h
public _silc_rwlock_free
push	ebp
mov	ebp, esp
leave
retn
align 4
public _silc_rwlock_rdlock
push	ebp
mov	ebp, esp
leave
retn
align 10h
public _silc_rwlock_wrlock
push	ebp
mov	ebp, esp
leave
retn
align 4
public _silc_rwlock_unlock
push	ebp
mov	ebp, esp
leave
retn
align 10h
public _silc_cond_alloc
push	ebp
mov	ebp, esp
xor	eax, eax
leave
retn
align 4
public _silc_cond_free
			
push	ebp
mov	ebp, esp
leave
retn
align 10h
public _silc_cond_signal
push	ebp
mov	ebp, esp
leave
retn
align 4
public _silc_cond_broadcast
			
push	ebp
mov	ebp, esp
leave
retn
align 10h
public _silc_cond_wait
push	ebp
mov	ebp, esp
leave
retn
align 4
public _silc_cond_timedwait
push	ebp
mov	ebp, esp
mov	al, 1
leave
retn
align 10h
public _silc_file_set_nonblock
			
push	ebp
mov	ebp, esp
xor	eax, eax
leave
retn
align 4
public _silc_get_username
push	ebp
mov	ebp, esp
push	ebx
sub	esp, 0A4h
mov	[ebp+maxlen], 80h
lea	eax, [ebp+maxlen]
mov	[esp+4], eax	
lea	ebx, [ebp+username]
mov	[esp], ebx	
call	_GetUserNameA@8
sub	esp, 8
mov	[esp], ebx	
call	_strdup
mov	ebx, [ebp+var_4]
leave
retn
align 10h
public _silc_gettimeofday
			
push	ebp
mov	ebp, esp
push	edi
push	esi
push	ebx
sub	esp, 2Ch
mov	edi, [ebp+tv]
lea	eax, [ebp+ft]
mov	[esp], eax	
call	_GetSystemTimeAsFileTime@4
push	eax
mov	eax, [ebp+ft.dwLowDateTime]
mov	edx, [ebp+ft.dwHighDateTime]
add	eax, 2AC18000h
adc	edx, 0FE624E21h
mov	dword ptr [esp+8], 0Ah 
mov	dword ptr [esp+0Ch], 0
mov	[esp], eax	
mov	[esp+4], edx
call	___divdi3
mov	ebx, eax
mov	esi, edx
mov	dword ptr [esp+8], 0F4240h 
mov	dword ptr [esp+0Ch], 0
mov	[esp], eax	
mov	[esp+4], edx
call	___divdi3
mov	[edi], eax
mov	dword ptr [esp+8], 0F4240h 
mov	dword ptr [esp+0Ch], 0
mov	[esp], ebx	
mov	[esp+4], esi
call	___moddi3
mov	[edi+4], eax
xor	eax, eax
lea	esp, [ebp-0Ch]
pop	ebx
pop	esi
pop	edi
leave
retn
public _silc_get_real_name
push	ebp
mov	ebp, esp
push	ebx
sub	esp, 0A4h
mov	[ebp+nSize], 80h
lea	eax, [ebp+nSize]
mov	[esp+4], eax	
lea	ebx, [ebp+Buffer]
mov	[esp], ebx	
call	_GetUserNameA@8
sub	esp, 8
mov	[esp], ebx	
call	_strdup
mov	ebx, [ebp+var_4]
leave
retn
align 4
public _silc_get_status_message
push	ebp
mov	ebp, esp
mov	cl, [ebp+status]
mov	eax, ds:_silc_status_messages.message
test	eax, eax
jz	short loc_641E3C55
cmp	cl, 0Ah
jz	short locret_641E3C5A
xor	i, i
jmp	short loc_641E3C49
cmp	byte ptr ds:_silc_status_messages.status[i*8], cl
jz	short locret_641E3C5A
inc	i
mov	eax, ds:_silc_status_messages.message[i*8]
test	eax, eax
jnz	short loc_641E3C40
mov	eax, offset byte_64265840
			
leave
retn
public _silc_get_packet_name
push	ebp
mov	ebp, esp
mov	al, [ebp+type]
cmp	al, 0FFh
jz	short loc_641E3C84
cmp	al, 0C7h
ja	short loc_641E3C7C
cmp	al, 1Dh
ja	short loc_641E3C8C
movzx	type_0,	al
mov	type_0,	ds:_packet_name[type_0*4]
leave
retn
align 4
mov	type_0,	offset aPrivateRange 
leave
retn
align 4
mov	type_0,	offset aReserved 
leave
retn
align 4
mov	type_0,	offset aUnknown	
leave
retn
align 4
public _silc_get_command_name
push	ebp
mov	ebp, esp
mov	al, [ebp+command]
cmp	al, 0FFh
jz	short loc_641E3CBC
cmp	al, 0C7h
ja	short loc_641E3CB4
cmp	al, 1Ch
ja	short loc_641E3CC4
movzx	command_0, al
mov	command_0, ds:_command_name[command_0*4]
leave
retn
align 4
mov	command_0, offset aPrivateRange	
leave
retn
align 4
mov	command_0, offset aReserved 
leave
retn
align 4
mov	command_0, offset aUnknown 
leave
retn
align 4
public _silc_id_render
push	ebp
mov	ebp, esp
push	edi
push	esi
push	ebx
sub	esp, 0ACh
mov	esi, [ebp+id]
mov	edx, [ebp+id_type]
xor	ebx, ebx
mov	ecx, 100h
mov	edi, offset _rid
mov	al, bl
rep stosb
cmp	dx, 2
jz	loc_641E3E50
cmp	dx, 3
jz	loc_641E3E24
dec	dx
jz	short loc_641E3D14
mov	eax, offset _rid
lea	esp, [ebp-0Ch]
pop	ebx
pop	esi
pop	edi
leave
retn
align 4
cmp	byte ptr [id_0+10h], 4
jbe	loc_641E3F14
			
lea	ebx, [ebp+tmp]
mov	ecx, 64h
mov	edi, ebx
xor	cp, cp
rep stosb
movzx	eax, word ptr [id_0+12h]
mov	[esp], eax	
call	_ntohs@4
push	edx
movzx	eax, ax
mov	[esp+0Ch], eax
mov	dword ptr [esp+8], offset aD 
mov	dword ptr [esp+4], 63h 
mov	[esp], ebx	
call	_silc_snprintf
mov	edx, 0FFFFFFFFh
mov	ecx, edx
mov	edi, offset _rid
xor	eax, eax
repne scasb
add	ecx, 101h
mov	[ebp+var_8C], ecx
mov	ecx, edx
mov	edi, ebx
repne scasb
mov	edx, ecx
not	edx
dec	edx
cmp	[ebp+var_8C], edx
jnb	loc_641E406C
mov	eax, [ebp+var_8C]
test	eax, eax
jnz	loc_641E4088
			
mov	dx, [id_0+14h]
mov	ecx, 64h
mov	edi, ebx
xor	eax, eax
rep stosb
movzx	eax, dl
mov	[esp+10h], eax
movzx	edx, dh
mov	[esp+0Ch], edx
mov	dword ptr [esp+8], offset a02x02x 
mov	dword ptr [esp+4], 63h 
mov	[esp], ebx	
call	_silc_snprintf
mov	edx, 0FFFFFFFFh
mov	ecx, edx
mov	edi, offset _rid
xor	eax, eax
repne scasb
lea	id_0, [ecx+101h]
mov	ecx, edx
mov	edi, ebx
repne scasb
mov	edx, ecx
not	edx
dec	edx
cmp	esi, edx
jnb	loc_641E4048
test	esi, esi
jz	loc_641E3D06
mov	[esp+8], esi	
mov	[esp+4], ebx	
mov	dword ptr [esp], offset	_rid 
call	_strncat
mov	eax, offset _rid
lea	esp, [ebp-0Ch]
pop	ebx
pop	esi
pop	edi
leave
retn
align 4
cmp	byte ptr [id_0+10h], 4
ja	loc_641E3D1E
mov	dword ptr [esp+8], 4 
mov	[esp+4], id_0	
lea	eax, [ebp+ipv4_0]
mov	[esp], eax	
call	_memmove
mov	eax, dword ptr [ebp+ipv4_0.S_un]
jmp	loc_641E3F2E
align 10h
cmp	byte ptr [id_0+10h], 4
jbe	loc_641E3FBC
			
lea	ebx, [ebp+tmp]
mov	ecx, 64h
mov	edi, ebx
xor	cp, cp
rep stosb
movzx	eax, byte ptr [id_0+11h]
mov	[esp+0Ch], eax
mov	dword ptr [esp+8], offset a02x_2 
mov	dword ptr [esp+4], 63h 
mov	[esp], ebx	
call	_silc_snprintf
mov	edx, 0FFFFFFFFh
mov	ecx, edx
mov	edi, offset _rid
xor	eax, eax
repne scasb
add	ecx, 101h
mov	[ebp+var_8C], ecx
mov	ecx, edx
mov	edi, ebx
repne scasb
mov	edx, ecx
not	edx
dec	edx
cmp	[ebp+var_8C], edx
jnb	loc_641E3FA0
mov	eax, [ebp+var_8C]
test	eax, eax
jnz	loc_641E40A8
			
mov	ecx, 64h
mov	edi, ebx
xor	eax, eax
rep stosb
movzx	eax, byte ptr [id_0+15h]
mov	[esp+18h], eax
movzx	eax, byte ptr [id_0+14h]
mov	[esp+14h], eax
movzx	eax, byte ptr [id_0+13h]
mov	[esp+10h], eax
movzx	eax, byte ptr [id_0+12h]
mov	[esp+0Ch], eax
mov	dword ptr [esp+8], offset a02x02x02x02x__ 
mov	dword ptr [esp+4], 63h 
mov	[esp], ebx	
call	_silc_snprintf
jmp	loc_641E3DD1
mov	dword ptr [esp+8], 4 
mov	[esp+4], id_0	
lea	eax, [ebp+ipv4]
mov	[esp], eax	
call	_memmove
mov	eax, dword ptr [ebp+ipv4.S_un]
mov	[esp], eax	
call	_inet_ntoa@4
push	edi
mov	edx, eax
test	eax, eax
jz	loc_641E3D1E
mov	ecx, 0FFFFFFFFh
mov	edi, offset _rid
mov	al, bl
repne scasb
add	ecx, 101h
mov	[ebp+var_8C], ecx
mov	ecx, 0FFFFFFFFh
mov	edi, cp
repne scasb
not	ecx
dec	ecx
cmp	[ebp+var_8C], ecx
jnb	loc_641E40E4
mov	ecx, [ebp+var_8C]
test	ecx, ecx
jz	loc_641E3D1E
mov	ecx, [ebp+var_8C]
mov	[esp+8], ecx	
mov	[esp+4], edx	
mov	dword ptr [esp], offset	_rid 
call	_strncat
jmp	loc_641E3D1E
mov	[esp+8], edx	
mov	[esp+4], ebx	
mov	dword ptr [esp], offset	_rid 
call	_strncat
jmp	loc_641E3ECC
align 4
mov	dword ptr [esp+8], 4 
mov	[esp+4], id_0	
lea	eax, [ebp+ipv4_1]
mov	[esp], eax	
call	_memmove
mov	eax, dword ptr [ebp+ipv4_1.S_un]
mov	[esp], eax	
call	_inet_ntoa@4
push	edi
mov	edx, eax
test	eax, eax
jz	loc_641E3E5A
mov	ecx, 0FFFFFFFFh
mov	edi, offset _rid
mov	al, bl
repne scasb
add	ecx, 101h
mov	[ebp+var_8C], ecx
mov	ecx, 0FFFFFFFFh
mov	edi, cp
repne scasb
not	ecx
dec	ecx
cmp	[ebp+var_8C], ecx
jnb	loc_641E40C8
mov	ecx, [ebp+var_8C]
test	ecx, ecx
jz	loc_641E3E5A
mov	ecx, [ebp+var_8C]
mov	[esp+8], ecx	
mov	[esp+4], edx	
mov	dword ptr [esp], offset	_rid 
call	_strncat
jmp	loc_641E3E5A
mov	[esp+8], edx	
mov	[esp+4], ebx	
mov	dword ptr [esp], offset	_rid 
call	_strncat
mov	eax, offset _rid
lea	esp, [ebp-0Ch]
pop	ebx
pop	esi
pop	edi
leave
retn
align 4
mov	[esp+8], edx	
mov	[esp+4], ebx	
mov	dword ptr [esp], offset	_rid 
call	_strncat
jmp	loc_641E3D9C
align 4
mov	eax, [ebp+var_8C]
mov	[esp+8], eax	
mov	[esp+4], ebx	
mov	dword ptr [esp], offset	_rid 
call	_strncat
jmp	loc_641E3D9C
align 4
mov	eax, [ebp+var_8C]
mov	[esp+8], eax	
mov	[esp+4], ebx	
mov	dword ptr [esp], offset	_rid 
call	_strncat
jmp	loc_641E3ECC
align 4
mov	[esp+8], ecx	
mov	[esp+4], edx	
mov	dword ptr [esp], offset	_rid 
call	_strncat
jmp	loc_641E3E5A
align 4
mov	[esp+8], ecx	
mov	[esp+4], edx	
mov	dword ptr [esp], offset	_rid 
call	_strncat
jmp	loc_641E3D1E
align 10h
public _silc_client_chumode_char
push	ebp
mov	ebp, esp
push	edi
push	ebx
sub	esp, 50h
mov	ebx, [ebp+mode]
test	ebx, ebx
jnz	short loc_641E4118
xor	eax, eax
add	esp, 50h
pop	mode_0
pop	edi
leave
retn
lea	edx, [ebp+string]
xor	eax, eax
mov	ecx, 40h
mov	edi, edx
rep stosb
test	bl, 1
jnz	short loc_641E4144
test	bl, 2
jnz	short loc_641E415B
and	mode_0,	20h
jnz	short loc_641E4174
			
mov	[esp], edx	
call	_strdup
add	esp, 50h
pop	mode_0
pop	edi
leave
retn
mov	ecx, 0FFFFFFFFh
mov	edi, edx
repne scasb
not	ecx
mov	word ptr [edx+ecx-1], 2Ah
test	bl, 2
jz	short loc_641E4130
xor	eax, eax
mov	ecx, 0FFFFFFFFh
mov	edi, edx
repne scasb
not	ecx
mov	word ptr [edx+ecx-1], 40h
and	mode_0,	20h
jz	short loc_641E4135
xor	eax, eax
mov	ecx, 0FFFFFFFFh
mov	edi, edx
repne scasb
not	ecx
mov	word ptr [edx+ecx-1], 26h
jmp	short loc_641E4135
align 4
public _silc_client_chumode
push	ebp
mov	ebp, esp
push	edi
push	ebx
sub	esp, 50h
mov	ebx, [ebp+mode]
test	ebx, ebx
jnz	short loc_641E41A4
xor	eax, eax
add	esp, 50h
pop	mode_0
pop	edi
leave
retn
lea	edx, [ebp+string]
xor	eax, eax
mov	ecx, 40h
mov	edi, edx
rep stosb
test	bl, 1
jnz	short loc_641E41E4
test	bl, 2
jnz	short loc_641E41FB
test	bl, 4
jnz	short loc_641E4214
test	bl, 8
jnz	short loc_641E422D
test	bl, 10h
jnz	short loc_641E4246
and	mode_0,	20h
jnz	loc_641E4263
			
mov	[esp], edx	
call	_strdup
add	esp, 50h
pop	mode_0
pop	edi
leave
retn
align 4
mov	ecx, 0FFFFFFFFh
mov	edi, edx
repne scasb
not	ecx
mov	word ptr [edx+ecx-1], 66h
test	bl, 2
jz	short loc_641E41BC
xor	eax, eax
mov	ecx, 0FFFFFFFFh
mov	edi, edx
repne scasb
not	ecx
mov	word ptr [edx+ecx-1], 6Fh
test	bl, 4
jz	short loc_641E41C1
xor	eax, eax
mov	ecx, 0FFFFFFFFh
mov	edi, edx
repne scasb
not	ecx
mov	word ptr [edx+ecx-1], 62h
test	bl, 8
jz	short loc_641E41C6
xor	eax, eax
mov	ecx, 0FFFFFFFFh
mov	edi, edx
repne scasb
not	ecx
mov	word ptr [edx+ecx-1], 75h
test	bl, 10h
jz	short loc_641E41CB
xor	eax, eax
mov	ecx, 0FFFFFFFFh
mov	edi, edx
repne scasb
not	ecx
mov	word ptr [edx+ecx-1], 72h
and	mode_0,	20h
jz	loc_641E41D4
xor	eax, eax
mov	ecx, 0FFFFFFFFh
mov	edi, edx
repne scasb
not	ecx
mov	word ptr [edx+ecx-1], 71h
jmp	loc_641E41D4
public _silc_client_chmode
push	ebp
mov	ebp, esp
push	edi
push	esi
push	ebx
sub	esp, 9Ch
mov	edx, [ebp+mode]
test	edx, edx
jnz	short loc_641E429C
xor	eax, eax
add	esp, 9Ch
pop	ebx
pop	esi
pop	edi
leave
retn
lea	ebx, [ebp+string]
xor	eax, eax
mov	ecx, 64h
mov	edi, ebx
rep stosb
test	dl, 1
jnz	loc_641E4540
test	dl, 2
jnz	loc_641E4524
test	dl, 4
jnz	loc_641E4508
test	dl, 8
jnz	loc_641E44EC
test	dl, 10h
jnz	loc_641E44D0
test	dl, 20h
jnz	loc_641E44B4
test	dl, 40h
jnz	loc_641E4498
test	dh, 2
jnz	loc_641E447C
test	dh, 10h
jnz	loc_641E4460
test	dh, 4
jnz	loc_641E4444
test	dh, 8
jnz	loc_641E4428
mov	esi, mode_0
and	esi, 80h
jnz	loc_641E440C
and	mode_0,	100h
mov	[ebp+var_8C], mode_0
jnz	loc_641E43F0
test	esi, esi
jz	short loc_641E4380
mov	esi, 0FFFFFFFFh
xor	eax, eax
mov	ecx, esi
mov	edi, [ebp+cipher]
repne scasb
mov	mode_0,	ecx
not	edx
mov	ecx, esi
mov	edi, ebx
repne scasb
not	ecx
lea	edx, [edx+ecx-1]
cmp	edx, 63h
ja	short loc_641E4380
mov	ecx, esi
mov	edi, ebx
repne scasb
not	ecx
mov	word ptr [ebx+ecx-1], 20h
mov	ecx, esi
mov	edi, [ebp+cipher]
repne scasb
not	ecx
dec	ecx
mov	[esp+8], ecx	
mov	eax, [ebp+cipher]
mov	[esp+4], eax	
mov	[esp], ebx	
call	_strncat
			
mov	eax, [ebp+var_8C]
test	eax, eax
jz	short loc_641E43DC
mov	esi, 0FFFFFFFFh
xor	eax, eax
mov	ecx, esi
mov	edi, [ebp+hmac]
repne scasb
mov	mode_0,	ecx
not	edx
mov	ecx, esi
mov	edi, ebx
repne scasb
not	ecx
lea	edx, [edx+ecx-1]
cmp	edx, 63h
ja	short loc_641E43DC
mov	ecx, esi
mov	edi, ebx
repne scasb
not	ecx
mov	word ptr [ebx+ecx-1], 20h
mov	ecx, esi
mov	edi, [ebp+hmac]
repne scasb
not	ecx
dec	ecx
mov	[esp+8], ecx	
mov	eax, [ebp+hmac]
mov	[esp+4], eax	
mov	[esp], ebx	
call	_strncat
lea	esi, [esi+0]
			
mov	[esp], ebx	
call	_strdup
add	esp, 9Ch
pop	ebx
pop	esi
pop	edi
leave
retn
align 10h
xor	eax, eax
mov	ecx, 0FFFFFFFFh
mov	edi, ebx
repne scasb
not	ecx
mov	word ptr [ebx+ecx-1], 68h
jmp	loc_641E432D
align 4
xor	eax, eax
mov	ecx, 0FFFFFFFFh
mov	edi, ebx
repne scasb
not	ecx
mov	word ptr [ebx+ecx-1], 63h
jmp	loc_641E431B
align 4
xor	eax, eax
mov	ecx, 0FFFFFFFFh
mov	edi, ebx
repne scasb
not	ecx
mov	word ptr [ebx+ecx-1], 4Dh
jmp	loc_641E430D
align 4
xor	eax, eax
mov	ecx, 0FFFFFFFFh
mov	edi, ebx
repne scasb
not	ecx
mov	word ptr [ebx+ecx-1], 6Dh
jmp	loc_641E4304
align 10h
xor	eax, eax
mov	ecx, 0FFFFFFFFh
mov	edi, ebx
repne scasb
not	ecx
mov	word ptr [ebx+ecx-1], 43h
jmp	loc_641E42FB
align 4
xor	eax, eax
mov	ecx, 0FFFFFFFFh
mov	edi, ebx
repne scasb
not	ecx
mov	word ptr [ebx+ecx-1], 66h
jmp	loc_641E42F2
align 4
xor	eax, eax
mov	ecx, 0FFFFFFFFh
mov	edi, ebx
repne scasb
not	ecx
mov	word ptr [ebx+ecx-1], 61h
jmp	loc_641E42E9
align 4
xor	eax, eax
mov	ecx, 0FFFFFFFFh
mov	edi, ebx
repne scasb
not	ecx
mov	word ptr [ebx+ecx-1], 6Ch
jmp	loc_641E42E0
align 10h
xor	eax, eax
mov	ecx, 0FFFFFFFFh
mov	edi, ebx
repne scasb
not	ecx
mov	word ptr [ebx+ecx-1], 74h
jmp	loc_641E42D7
align 4
xor	eax, eax
mov	ecx, 0FFFFFFFFh
mov	edi, ebx
repne scasb
not	ecx
mov	word ptr [ebx+ecx-1], 69h
jmp	loc_641E42CE
align 4
xor	eax, eax
mov	ecx, 0FFFFFFFFh
mov	edi, ebx
repne scasb
not	ecx
mov	word ptr [ebx+ecx-1], 6Bh
jmp	loc_641E42C5
align 4
xor	eax, eax
mov	ecx, 0FFFFFFFFh
mov	edi, ebx
repne scasb
not	ecx
mov	word ptr [ebx+ecx-1], 73h
jmp	loc_641E42BC
align 10h
mov	ecx, 0FFFFFFFFh
mov	edi, ebx
repne scasb
not	ecx
mov	word ptr [ebx+ecx-1], 70h
jmp	loc_641E42B3
align 4
public _silc_version_to_num
push	ebp
mov	ebp, esp
push	edi
push	esi
push	ebx
sub	esp, 4Ch
mov	ebx, [ebp+version]
test	ebx, ebx
jz	short loc_641E45D4
mov	[esp], version_0 
call	_atoi
mov	esi, eax
mov	dword ptr [esp+4], 2Eh 
mov	[esp], version_0 
call	_strchr
test	eax, eax
jz	short loc_641E45D0
inc	eax
mov	[esp], eax	
call	_atoi
mov	edx, eax
lea	version_0, [ebp+buf]
mov	ecx, 20h
xor	eax, eax
mov	edi, ebx
rep stosb
mov	[esp+10h], min
mov	[esp+0Ch], maj
mov	dword ptr [esp+8], offset off_64265891 
mov	dword ptr [esp+4], 1Fh 
mov	[esp], ebx	
call	_silc_snprintf
mov	[esp], ebx	
call	_atoi
add	esp, 4Ch
pop	ebx
pop	maj
pop	edi
leave
retn
align 10h
xor	edx, edx
jmp	short loc_641E4591
xor	eax, eax
add	esp, 4Ch
pop	version_0
pop	esi
pop	edi
leave
retn
align 10h
public _silc_parse_version_string
			
push	ebp
mov	ebp, esp
push	edi
push	esi
push	ebx
sub	esp, 5Ch
mov	esi, [ebp+version]
mov	dword ptr [esp+4], offset aSilc	
mov	[esp], esi	
call	_strstr
test	eax, eax
jz	short loc_641E460D
mov	ebx, version_0
add	cp, 5
jz	short loc_641E460D
cmp	byte ptr [version_0+5],	0
jnz	short loc_641E4618
			
xor	eax, eax
			
add	esp, 5Ch
pop	ebx
pop	maj
pop	edi
leave
retn
align 4
mov	[esp], cp	
call	_atoi
mov	version_0, eax
mov	dword ptr [esp+4], 2Eh 
mov	[esp], cp	
call	_strchr
test	eax, eax
jz	short loc_641E460D
mov	edx, eax
inc	edx
mov	[ebp+var_44], edx
jz	short loc_641E460D
cmp	byte ptr [eax+1], 0
jz	short loc_641E460D
mov	[esp], edx	
call	_atoi
mov	[ebp+var_48], eax
lea	cp, [ebp+buf]
mov	ecx, 20h
xor	eax, eax
mov	edi, ebx
rep stosb
mov	eax, [ebp+var_48]
mov	[esp+10h], eax
mov	[esp+0Ch], maj
mov	dword ptr [esp+8], offset off_64265891 
mov	dword ptr [esp+4], 1Fh 
mov	[esp], ebx	
call	_silc_snprintf
mov	ecx, [ebp+protocol_version]
test	ecx, ecx
jz	short loc_641E4694
mov	[esp], ebx	
call	_atoi
mov	edx, [ebp+protocol_version]
mov	[edx], eax
mov	ecx, 20h
xor	eax, eax
mov	edi, ebx
rep stosb
mov	eax, [ebp+var_48]
mov	[esp+10h], eax
mov	[esp+0Ch], maj
mov	dword ptr [esp+8], offset aD_D 
mov	dword ptr [esp+4], 1Fh 
mov	[esp], ebx	
call	_silc_snprintf
mov	edx, [ebp+protocol_version_string]
test	edx, edx
jz	short loc_641E46D6
mov	[esp], ebx	
call	_strdup
mov	edx, [ebp+protocol_version_string]
mov	[edx], eax
mov	dword ptr [esp+4], 2Dh 
mov	eax, [ebp+var_44]
mov	[esp], eax	
call	_strchr
test	eax, eax
jz	loc_641E460D
mov	maj, eax
inc	cp
jz	loc_641E460D
cmp	byte ptr [eax+1], 0
jz	loc_641E460D
mov	[esp], cp	
call	_atoi
mov	[ebp+var_3C], eax
mov	dword ptr [esp+4], 2Eh 
mov	[esp], cp	
call	_strchr
test	eax, eax
jz	short loc_641E4732
mov	cp, eax
inc	cp
jz	short loc_641E4732
cmp	byte ptr [eax+1], 0
jnz	loc_641E481B
			
mov	[ebp+min], 0
mov	ecx, 20h
xor	eax, eax
mov	edi, ebx
rep stosb
mov	edx, [ebp+min]
mov	[esp+10h], edx
mov	eax, [ebp+var_3C]
mov	[esp+0Ch], eax
mov	dword ptr [esp+8], offset off_64265891 
mov	dword ptr [esp+4], 1Fh 
mov	[esp], ebx	
call	_silc_snprintf
mov	eax, [ebp+software_version]
test	eax, eax
jz	short loc_641E477E
mov	[esp], ebx	
call	_atoi
mov	edx, [ebp+software_version]
mov	[edx], eax
mov	ecx, 20h
xor	eax, eax
mov	edi, ebx
rep stosb
mov	eax, [ebp+min]
mov	[esp+10h], eax
mov	edx, [ebp+var_3C]
mov	[esp+0Ch], edx
mov	dword ptr [esp+8], offset aD_D 
mov	dword ptr [esp+4], 1Fh 
mov	[esp], ebx	
call	_silc_snprintf
mov	edi, [ebp+software_version_string]
test	edi, edi
jz	short loc_641E47C3
mov	[esp], ebx	
call	_strdup
mov	edx, [ebp+software_version_string]
mov	[edx], eax
mov	dword ptr [esp+4], 2Eh 
mov	[esp], cp	
call	_strchr
test	eax, eax
jz	short loc_641E47FD
mov	edx, eax
inc	cp
jz	short loc_641E4814
cmp	byte ptr [eax+1], 0
jz	short loc_641E4814
mov	ecx, [ebp+vendor_version]
test	ecx, ecx
jz	short loc_641E4814
mov	[esp], cp	
call	_strdup
mov	edx, [ebp+vendor_version]
mov	[edx], eax
mov	al, 1
jmp	loc_641E460F
mov	dword ptr [esp+4], 20h
mov	[esp], cp	
call	_strchr
test	eax, eax
jnz	short loc_641E47D7
lea	esi, [esi+0]
			
mov	al, 1
jmp	loc_641E460F
mov	[esp], cp
call	_atoi
mov	[ebp+min], eax
jmp	loc_641E4739
align 4
public _silc_get_mode_list
push	ebp
mov	ebp, esp
push	edi
push	esi
push	ebx
sub	esp, 2Ch
mov	esi, [ebp+mode_list]
mov	ebx, [esi+8]
sub	ebx, [esi+4]
shr	ebx, 2
cmp	ebx, [ebp+mode_list_count]
jz	short loc_641E4850
xor	eax, eax
add	esp, 2Ch
pop	ebx
pop	mode_list_0
pop	edi
leave
retn
mov	dword ptr [esp+4], 4
mov	[esp], ebx	
call	_silc_calloc
mov	edx, [ebp+list]
mov	[edx], eax
test	ebx, ebx
jz	short loc_641E48D4
mov	ecx, [mode_list_0+4]
mov	[ebp+var_20], ecx
mov	edx, ecx
mov	ecx, [mode_list_0+8]
mov	[ebp+var_24], ecx
xor	edi, edi
mov	[ebp+i], 0
mov	[ebp+var_28], ebx
jmp	short loc_641E4893
align 4
mov	ecx, [ebp+list]
mov	eax, [ecx]
mov	ecx, [mode_list_0+4]
mov	[ebp+var_20], ecx
movzx	ecx, byte ptr [edx+3]
movzx	ebx, byte ptr [edx]
shl	ebx, 18h
or	ecx, ebx
movzx	ebx, byte ptr [edx+1]
shl	ebx, 10h
or	ecx, ebx
movzx	edx, byte ptr [edx+2]
shl	edx, 8
or	ecx, edx
mov	[eax+edi*4], ecx
mov	edx, [ebp+var_20]
mov	eax, [ebp+var_24]
sub	eax, edx
cmp	eax, 3
jbe	short loc_641E48C7
add	edx, 4
mov	[mode_list_0+4], edx
inc	[ebp+i]
mov	edi, [ebp+i]
mov	eax, [ebp+var_28]
cmp	edi, eax
jnz	short loc_641E4888
mov	eax, [mode_list_0]
mov	[mode_list_0+4], eax
mov	al, 1
add	esp, 2Ch
pop	ebx
pop	mode_list_0
pop	edi
leave
retn
align 4
public _silc_channel_name_verify
push	ebp
mov	ebp, esp
sub	esp, 28h
mov	edx, [ebp+identifier]
mov	eax, [ebp+identifier_len]
mov	ecx, [ebp+max_allowed_length]
test	edx, edx
jz	short loc_641E4948
test	identifier_len_0, identifier_len_0
jz	short loc_641E4948
test	max_allowed_length_0, max_allowed_length_0
jz	short loc_641E4903
cmp	identifier_len_0, max_allowed_length_0
ja	short loc_641E4948
mov	dword ptr [esp+1Ch], 7 
mov	dword ptr [esp+18h], 0 
mov	dword ptr [esp+14h], 0 
mov	dword ptr [esp+10h], 0 
mov	dword ptr [esp+0Ch], offset aSilcIdentifi_3 
mov	max_allowed_length_0, [ebp+identifier_encoding]
mov	[esp+8], ecx	
mov	[esp+4], identifier_len_0 
mov	[esp], identifier_0 
call	_silc_stringprep
test	eax, eax
setz	al
leave
retn
align 4
			
xor	identifier_len_0, identifier_len_0
leave
retn
public _silc_channel_name_check
push	ebp
mov	ebp, esp
push	ebx
sub	esp, 34h
mov	eax, [ebp+identifier]
mov	edx, [ebp+identifier_len]
mov	ecx, [ebp+max_allowed_length]
mov	ebx, [ebp+out_len]
test	eax, eax
jnz	short loc_641E496C
			
xor	status,	status
add	esp, 34h
pop	out_len_0
leave
retn
align 4
test	identifier_len_0, identifier_len_0
jz	short loc_641E4963
test	max_allowed_length_0, max_allowed_length_0
jz	short loc_641E4978
cmp	identifier_len_0, max_allowed_length_0
ja	short loc_641E4963
mov	dword ptr [esp+1Ch], 7 
lea	max_allowed_length_0, [ebp+utf8s_len]
mov	[esp+18h], ecx	
lea	ecx, [ebp+utf8s]
mov	[esp+14h], ecx	
mov	dword ptr [esp+10h], 0 
mov	dword ptr [esp+0Ch], offset aSilcIdentifi_3 
mov	ecx, [ebp+identifier_encoding]
mov	[esp+8], ecx	
mov	[esp+4], identifier_len_0 
mov	[esp], identifier_0 
call	_silc_stringprep
test	eax, eax
jnz	short loc_641E4963
test	out_len_0, out_len_0
jz	short loc_641E49BE
mov	status,	[ebp+utf8s_len]
mov	[out_len_0], eax
mov	status,	[ebp+utf8s]
jmp	short loc_641E4965
align 4
public _silc_identifier_verify
push	ebp
mov	ebp, esp
sub	esp, 28h
mov	edx, [ebp+identifier]
mov	eax, [ebp+identifier_len]
mov	ecx, [ebp+max_allowed_length]
test	edx, edx
jz	short loc_641E4A28
test	identifier_len_0, identifier_len_0
jz	short loc_641E4A28
test	max_allowed_length_0, max_allowed_length_0
jz	short loc_641E49E3
cmp	identifier_len_0, max_allowed_length_0
ja	short loc_641E4A28
mov	dword ptr [esp+1Ch], 7 
mov	dword ptr [esp+18h], 0 
mov	dword ptr [esp+14h], 0 
mov	dword ptr [esp+10h], 0 
mov	dword ptr [esp+0Ch], offset aSilcIdentifi_4 
mov	max_allowed_length_0, [ebp+identifier_encoding]
mov	[esp+8], ecx	
mov	[esp+4], identifier_len_0 
mov	[esp], identifier_0 
call	_silc_stringprep
test	eax, eax
setz	al
leave
retn
align 4
			
xor	identifier_len_0, identifier_len_0
leave
retn
public _silc_identifier_check
push	ebp
mov	ebp, esp
push	ebx
sub	esp, 34h
mov	eax, [ebp+identifier]
mov	edx, [ebp+identifier_len]
mov	ecx, [ebp+max_allowed_length]
mov	ebx, [ebp+out_len]
test	eax, eax
jnz	short loc_641E4A4C
			
xor	status,	status
add	esp, 34h
pop	out_len_0
leave
retn
align 4
test	identifier_len_0, identifier_len_0
jz	short loc_641E4A43
test	max_allowed_length_0, max_allowed_length_0
jz	short loc_641E4A58
cmp	identifier_len_0, max_allowed_length_0
ja	short loc_641E4A43
mov	dword ptr [esp+1Ch], 7 
lea	max_allowed_length_0, [ebp+utf8s_len]
mov	[esp+18h], ecx	
lea	ecx, [ebp+utf8s]
mov	[esp+14h], ecx	
mov	dword ptr [esp+10h], 0 
mov	dword ptr [esp+0Ch], offset aSilcIdentifi_4 
mov	ecx, [ebp+identifier_encoding]
mov	[esp+8], ecx	
mov	[esp+4], identifier_len_0 
mov	[esp], identifier_0 
call	_silc_stringprep
test	eax, eax
jnz	short loc_641E4A43
test	out_len_0, out_len_0
jz	short loc_641E4A9E
mov	status,	[ebp+utf8s_len]
mov	[out_len_0], eax
mov	status,	[ebp+utf8s]
jmp	short loc_641E4A45
align 4
public _silc_change_private_key_passphrase
push	ebp
mov	ebp, esp
push	edi
push	esi
push	ebx
sub	esp, 4Ch
mov	eax, [ebp+old_passphrase]
test	eax, eax
jz	loc_641E4C1C
mov	[esp], old_passphrase_0	
call	_strdup
mov	ebx, eax
test	eax, eax
jz	loc_641E4C1C
			
mov	esi, 0FFFFFFFFh
mov	ecx, esi
mov	edi, pass
xor	eax, eax
repne scasb
not	ecx
dec	ecx
lea	eax, [ebp+private_key]
mov	[esp+0Ch], eax	
mov	[esp+8], ecx	
mov	[esp+4], ebx	
mov	edx, [ebp+prv_filename]
mov	[esp], edx	
call	_silc_pkcs_load_private_key
test	al, al
jz	loc_641E4BDC
mov	ecx, esi
mov	edi, pass
xor	eax, eax
repne scasb
not	ecx
dec	ecx
mov	edi, ebx
rep stosb
mov	[esp], ebx	
call	_silc_free
mov	ebx, [ebp+new_passphrase]
test	ebx, ebx
jz	loc_641E4C50
mov	edx, [ebp+new_passphrase]
mov	[esp], edx	
call	_strdup
mov	ebx, eax
test	eax, eax
jz	loc_641E4C50
mov	pass, ds:__imp___iob
mov	[ebp+var_2C], eax
			
call	_silc_rng_alloc
mov	pass2, eax
mov	[esp], eax	
call	_silc_rng_init
mov	ecx, 0FFFFFFFFh
mov	edi, pass
xor	eax, eax
repne scasb
not	ecx
dec	ecx
mov	[esp+14h], rng	
mov	dword ptr [esp+10h], 0 
mov	[esp+0Ch], ecx	
mov	[esp+8], ebx	
mov	eax, [ebp+private_key]
mov	[esp+4], eax	
mov	edx, [ebp+prv_filename]
mov	[esp], edx	
call	_silc_pkcs_save_private_key
mov	eax, [ebp+var_2C]
add	eax, 20h
mov	[esp+0Ch], eax	
mov	dword ptr [esp+8], 14h 
mov	dword ptr [esp+4], 1 
mov	dword ptr [esp], offset	aPassphraseChan	
call	_fwrite
mov	ecx, 0FFFFFFFFh
mov	edi, pass
xor	eax, eax
repne scasb
not	ecx
dec	ecx
mov	edi, ebx
rep stosb
mov	[esp], ebx	
call	_silc_free
mov	eax, [ebp+private_key]
mov	[esp], eax	
call	_silc_pkcs_private_key_free
mov	[esp], rng	
call	_silc_rng_free
mov	al, 1
add	esp, 4Ch
pop	ebx
pop	rng
pop	pass
leave
retn
align 4
mov	ecx, esi
mov	edi, pass
repne scasb
not	ecx
dec	ecx
mov	edi, ebx
rep stosb
mov	[esp], ebx	
call	_silc_free
mov	eax, [ebp+prv_filename]
mov	[esp+8], eax
mov	dword ptr [esp+4], offset aCouldNotLoadPr 
mov	eax, ds:__imp___iob
add	eax, 40h
mov	[esp], eax	
call	_fprintf
xor	eax, eax
add	esp, 4Ch
pop	ebx
pop	esi
pop	pass
leave
retn
align 4
			
mov	dword ptr [esp+4], 1 
mov	dword ptr [esp], offset	prompt 
call	_silc_get_input
mov	pass, eax
test	eax, eax
jnz	loc_641E4ACA
mov	dword ptr [esp], offset	byte_64265840 
call	_strdup
mov	pass, eax
jmp	loc_641E4ACA
align 10h
			
mov	edx, ds:__imp___iob
mov	[ebp+var_2C], edx
mov	pass, edx
add	eax, 20h
mov	[esp+4], eax	
mov	dword ptr [esp], 0Ah 
call	_fputc
mov	dword ptr [esp+4], 1 
mov	dword ptr [esp], offset	aNewPassphrase 
call	_silc_get_input
mov	ebx, eax
test	eax, eax
jz	short loc_641E4D04
mov	edi, [ebp+var_2C]
add	edi, 40h
jmp	short loc_641E4CB0
mov	[esp+0Ch], edi
mov	dword ptr [esp+8], 19h 
mov	dword ptr [esp+4], 1 
mov	dword ptr [esp], offset	aPassphrasesDoN	
call	_fwrite
mov	dword ptr [esp], 0Ah 
call	_putchar
mov	dword ptr [esp+4], 1 
mov	dword ptr [esp], offset	aRetypeNewPassp	
call	_silc_get_input
mov	pass2, eax
test	eax, eax
jz	short loc_641E4CF4
mov	[esp+4], pass2	
mov	[esp], pass	
call	_strcmp
test	eax, eax
jnz	short loc_641E4C90
mov	[esp], pass2	
call	_silc_free
jmp	loc_641E4B3B
align 4
mov	dword ptr [esp], offset	byte_64265840 
call	_strdup
mov	pass2, eax
jmp	short loc_641E4CD6
mov	dword ptr [esp], offset	byte_64265840
call	_strdup
mov	pass, eax
jmp	loc_641E4B3B
align 4
public _silc_load_key_pair
push	ebp
mov	ebp, esp
push	edi
push	esi
push	ebx
sub	esp, 2Ch
mov	eax, [ebp+passphrase]
mov	esi, [ebp+return_public_key]
test	eax, eax
jz	loc_641E4DC8
mov	[esp], passphrase_0 
call	_strdup
mov	ebx, eax
mov	[esp+4], return_public_key_0
mov	eax, [ebp+pub_filename]
mov	[esp], eax	
call	_silc_pkcs_load_public_key
test	al, al
jnz	short loc_641E4D74
test	pass, pass
jz	short loc_641E4D60
mov	ecx, 0FFFFFFFFh
mov	edi, pass
repne scasb
not	ecx
dec	ecx
mov	edi, ebx
rep stosb
mov	[esp], ebx
call	_silc_free
xor	eax, eax
add	esp, 2Ch
pop	ebx
pop	return_public_key_0
pop	pass
leave
retn
align 4
test	pass, pass
jz	short loc_641E4DEC
			
mov	ecx, 0FFFFFFFFh
mov	edi, pass
xor	eax, eax
repne scasb
not	ecx
dec	ecx
mov	eax, [ebp+return_private_key]
mov	[esp+0Ch], eax	
mov	[esp+8], ecx	
mov	[esp+4], ebx	
mov	eax, [ebp+prv_filename]
mov	[esp], eax	
call	_silc_pkcs_load_private_key
test	al, al
jz	short loc_641E4DD0
mov	ecx, 0FFFFFFFFh
mov	edi, pass
xor	eax, eax
repne scasb
not	ecx
dec	ecx
mov	edi, ebx
rep stosb
mov	[esp], ebx	
call	_silc_free
mov	al, 1
add	esp, 2Ch
pop	ebx
pop	return_public_key_0
pop	pass
leave
retn
xor	ebx, ebx
jmp	loc_641E4D39
align 10h
mov	edx, [return_public_key_0]
mov	[esp], edx	
mov	[ebp+var_1C], al
call	_silc_pkcs_public_key_free
mov	dword ptr [return_public_key_0], 0
mov	al, [ebp+var_1C]
jmp	loc_641E4D50
align 4
mov	dword ptr [esp+4], 1 
mov	dword ptr [esp], offset	aPrivateKeyPass	
call	_silc_get_input
mov	pass, eax
test	eax, eax
jnz	loc_641E4D78
mov	dword ptr [esp], offset	byte_64265840 
call	_strdup
mov	pass, eax
jmp	loc_641E4D78
align 10h
public _silc_show_public_key
push	ebp
mov	ebp, esp
push	edi
push	esi
push	ebx
sub	esp, 3Ch
mov	esi, [ebp+public_key]
mov	[esp+4], esi	
mov	dword ptr [esp], 1 
call	_silc_pkcs_get_context
mov	ebx, eax
test	eax, eax
jz	loc_641E4FC0
mov	[esp], public_key_0 
call	_silc_pkcs_public_key_get_len
mov	[ebp+key_len], eax
lea	eax, [ebp+pk_len]
mov	[esp+4], eax	
mov	[esp], public_key_0 
call	_silc_pkcs_public_key_encode
mov	edi, eax
test	eax, eax
jz	loc_641E4FC0
mov	pk, [ebp+pk_len]
mov	[esp+8], eax	
mov	[esp+4], pk	
mov	dword ptr [esp], 0 
call	_silc_hash_fingerprint
mov	[ebp+fingerprint], eax
mov	eax, [ebp+pk_len]
mov	[esp+8], eax	
mov	[esp+4], pk	
mov	dword ptr [esp], 0 
call	_silc_hash_babbleprint
mov	[ebp+babbleprint], eax
mov	[esp], public_key_0 
call	_silc_pkcs_get_name
mov	[esp+4], eax
mov	dword ptr [esp], offset	aAlgorithmS 
call	_printf
mov	public_key_0, [ebp+key_len]
test	esi, esi
jnz	loc_641E4FCC
mov	eax, [silc_pubkey+18h]
test	eax, eax
jz	short loc_641E4ED8
mov	[esp+4], eax
mov	dword ptr [esp], offset	aVersionS 
call	_printf
			
mov	eax, [silc_pubkey+8]
test	eax, eax
jz	short loc_641E4EEF
mov	[esp+4], eax
mov	dword ptr [esp], offset	aRealNameS 
call	_printf
mov	eax, [silc_pubkey]
test	eax, eax
jz	short loc_641E4F05
mov	[esp+4], eax
mov	dword ptr [esp], offset	aUsernameS 
call	_printf
mov	eax, [silc_pubkey+4]
test	eax, eax
jz	short loc_641E4F1C
mov	[esp+4], eax
mov	dword ptr [esp], offset	aHostnameS 
call	_printf
mov	eax, [silc_pubkey+0Ch]
test	eax, eax
jz	short loc_641E4F33
mov	[esp+4], eax
mov	dword ptr [esp], offset	aEmailS	
call	_printf
mov	eax, [silc_pubkey+10h]
test	eax, eax
jz	short loc_641E4F4A
mov	[esp+4], eax
mov	dword ptr [esp], offset	aOrganizationS 
call	_printf
mov	eax, [silc_pubkey+14h]
test	eax, eax
jz	short loc_641E4F61
mov	[esp+4], eax
mov	dword ptr [esp], offset	aCountryS 
call	_printf
mov	eax, [ebp+fingerprint]
mov	[esp+4], eax
mov	dword ptr [esp], offset	aFingerprintSha	
call	_printf
mov	eax, [ebp+babbleprint]
mov	[esp+4], eax
mov	dword ptr [esp], offset	aBabbleprintSha	
call	_printf
mov	eax, ds:__imp___iob
add	eax, 20h
mov	[esp], eax	
call	_fflush
mov	eax, [ebp+fingerprint]
mov	[esp], eax	
call	_silc_free
mov	eax, [ebp+babbleprint]
mov	[esp], eax	
call	_silc_free
mov	[esp], pk	
call	_silc_free
mov	al, 1
add	esp, 3Ch
pop	silc_pubkey
pop	esi
pop	pk
leave
retn
align 10h
			
xor	pk, pk
add	esp, 3Ch
pop	silc_pubkey
pop	public_key_0
pop	pk
leave
retn
align 4
mov	eax, [ebp+key_len]
mov	[esp+4], eax
mov	dword ptr [esp], offset	aKeyLengthBitsD	
call	_printf
mov	eax, [silc_pubkey+18h]
test	eax, eax
jnz	loc_641E4EC8
jmp	loc_641E4ED8
align 10h
public _silc_show_public_key_file
push	ebp
mov	ebp, esp
push	ebx
sub	esp, 34h
mov	ebx, [ebp+pub_filename]
lea	eax, [ebp+public_key]
mov	[esp+4], eax	
mov	[esp], ebx	
call	_silc_pkcs_load_public_key
test	al, al
jz	short loc_641E5040
mov	[esp+4], pub_filename_0
mov	dword ptr [esp], offset	aPublicKeyFileS	
call	_printf
mov	eax, [ebp+public_key]
mov	[esp], eax	
call	_silc_show_public_key
mov	edx, [ebp+public_key]
mov	[esp], edx	
mov	[ebp+var_1C], al
call	_silc_pkcs_public_key_free
mov	al, [ebp+var_1C]
add	esp, 34h
pop	pub_filename_0
leave
retn
align 10h
mov	[esp+8], pub_filename_0
mov	dword ptr [esp+4], offset aCouldNotLoadPu 
mov	eax, ds:__imp___iob
add	eax, 40h
mov	[esp], eax	
call	_fprintf
xor	eax, eax
add	esp, 34h
pop	pub_filename_0
leave
retn
public _silc_create_key_pair
push	ebp
mov	ebp, esp
push	edi
push	esi
push	ebx
sub	esp, 26Ch
mov	ebx, [ebp+pkcs_name]
mov	edi, [ebp+pub_filename]
mov	esi, [ebp+pub_identifier]
mov	al, [ebp+interactive]
mov	[ebp+var_235], al
test	edi, edi
jz	loc_641E5364
mov	[esp], pub_filename_0 
call	_strdup
mov	[ebp+pkfile], eax
mov	ecx, [ebp+prv_filename]
test	ecx, ecx
jz	loc_641E5379
mov	edx, [ebp+prv_filename]
mov	[esp], edx	
call	_strdup
mov	[ebp+prvfile], eax
test	pkcs_name_0, pkcs_name_0
jz	short loc_641E50C2
mov	[esp], pkcs_name_0 
call	_strdup
mov	pkcs_name_0, eax
test	pub_identifier_0, pub_identifier_0
jz	loc_641E5390
mov	[esp], pub_identifier_0	
call	_strdup
mov	[ebp+identifier], eax
mov	edx, [ebp+passphrase]
test	edx, edx
jz	loc_641E5388
mov	eax, [ebp+passphrase]
mov	[esp], eax	
call	_strdup
mov	pub_identifier_0, eax
cmp	[ebp+var_235], 0
jz	short loc_641E5114
test	alg, alg
jz	short loc_641E5108
test	pub_filename_0,	pub_filename_0
jz	short loc_641E5108
mov	eax, [ebp+prv_filename]
test	eax, eax
jnz	short loc_641E511C
			
mov	dword ptr [esp], offset	aNewPairOfKeysW	
call	_puts
test	alg, alg
jz	loc_641E53EC
			
mov	dword ptr [esp+4], 0
mov	[esp], alg	
call	_silc_pkcs_find_algorithm
test	eax, eax
jz	loc_641E56B4
mov	list, [ebp+key_len_bits]
test	edi, edi
jz	loc_641E5220
			
mov	edx, [ebp+identifier]
test	edx, edx
jz	loc_641E55A4
mov	dword ptr [esp+4], offset aUn 
mov	edx, [ebp+identifier]
mov	[esp], edx	
call	_strstr
test	eax, eax
jz	loc_641E53A0
mov	dword ptr [esp+4], offset aHn 
mov	eax, [ebp+identifier]
mov	[esp], eax	
call	_strstr
test	eax, eax
jz	loc_641E53A0
call	_silc_rng_alloc
mov	[ebp+def], eax
mov	[esp], eax	
call	_silc_rng_init
mov	edx, [ebp+def]
mov	[esp], edx	
call	_silc_rng_global_init
mov	ecx, [ebp+pkfile]
test	ecx, ecx
jz	loc_641E548C
			
mov	edx, [ebp+prvfile]
test	edx, edx
jz	loc_641E54B0
			
test	pass, pass
jz	loc_641E54D4
			
cmp	[ebp+var_235], 0
jnz	loc_641E53D8
lea	eax, [ebp+private_key]
mov	[esp+14h], eax	
lea	eax, [ebp+public_key]
mov	[esp+10h], eax	
mov	edx, [ebp+def]
mov	[esp+0Ch], edx	
mov	eax, [ebp+identifier]
mov	[esp+8], eax	
mov	edx, [ebp+key_len_bits]
mov	[esp+4], edx	
mov	[esp], alg	
call	_silc_pkcs_silc_generate_key
test	al, al
jnz	short loc_641E523C
			
xor	eax, eax
			
add	esp, 26Ch
pop	alg
pop	pass
pop	pass2
leave
retn
align 10h
cmp	[ebp+var_235], 0
jnz	loc_641E5448
mov	[ebp+key_len_bits], 800h
jmp	loc_641E513F
align 4
mov	dword ptr [esp+8], 1 
mov	eax, [ebp+public_key]
mov	[esp+4], eax	
mov	eax, [ebp+pkfile]
mov	[esp], eax	
call	_silc_pkcs_save_public_key
test	al, al
jz	short loc_641E5210
xor	eax, eax
mov	ecx, 0FFFFFFFFh
mov	pass2, pass
repne scasb
not	ecx
dec	ecx
mov	edx, [ebp+def]
mov	[esp+14h], edx	
mov	dword ptr [esp+10h], 0 
mov	[esp+0Ch], ecx	
mov	[esp+8], esi	
mov	eax, [ebp+private_key]
mov	[esp+4], eax	
mov	eax, [ebp+prvfile]
mov	[esp], eax	
call	_silc_pkcs_save_private_key
test	al, al
jz	loc_641E5210
mov	eax, [ebp+return_public_key]
test	eax, eax
jz	loc_641E58C6
mov	eax, [ebp+public_key]
mov	edx, [ebp+return_public_key]
mov	[edx], eax
mov	edi, [ebp+return_private_key]
test	edi, edi
jz	loc_641E58B6
mov	eax, [ebp+private_key]
mov	edx, [ebp+return_private_key]
mov	[edx], eax
mov	eax, [ebp+pkfile]
mov	[esp+4], eax
mov	dword ptr [esp], offset	aPublicKeyHasBe	
call	_printf
mov	edx, [ebp+prvfile]
mov	[esp+4], edx
mov	dword ptr [esp], offset	aPrivateKeyHasB	
call	_printf
cmp	[ebp+var_235], 0
jnz	loc_641E561C
			
mov	eax, [ebp+def]
mov	[esp], eax	
call	_silc_rng_free
mov	[esp], alg	
call	_silc_free
mov	edx, [ebp+pkfile]
mov	[esp], edx	
call	_silc_free
mov	eax, [ebp+prvfile]
mov	[esp], eax	
call	_silc_free
mov	edx, [ebp+identifier]
mov	[esp], edx	
call	_silc_free
xor	eax, eax
mov	ecx, 0FFFFFFFFh
mov	edi, pass
repne scasb
not	ecx
dec	ecx
mov	edi, esi
rep stosb
mov	[esp], esi	
call	_silc_free
mov	al, 1
jmp	loc_641E5212
align 4
mov	[ebp+pkfile], 0
mov	ecx, [ebp+prv_filename]
test	ecx, ecx
jnz	loc_641E50A3
mov	[ebp+prvfile], 0
jmp	loc_641E50B4
xor	pub_identifier_0, pub_identifier_0
jmp	loc_641E50F0
align 10h
mov	[ebp+identifier], 0
jmp	loc_641E50D8
align 10h
			
mov	eax, ds:__imp___iob
add	eax, 40h
mov	[esp+0Ch], eax	
mov	dword ptr [esp+8], 40h 
mov	dword ptr [esp+4], 1 
mov	dword ptr [esp], offset	aInvalidPublicK	
call	_fwrite
xor	eax, eax
add	esp, 26Ch
pop	alg
pop	pass
pop	length
leave
retn
align 4
mov	dword ptr [esp], offset	aGeneratingTheK	
call	_puts
jmp	loc_641E51DB
align 4
cmp	[ebp+var_235], 0
jz	loc_641E56D8
mov	dword ptr [esp+4], 0
mov	dword ptr [esp], offset	aPkcsNameLToLis	
call	_silc_get_input
mov	alg, eax
test	eax, eax
jz	loc_641E5590
mov	al, [alg]
cmp	al, 6Ch
jz	short loc_641E5425
cmp	al, 4Ch
jnz	loc_641E511C
call	_silc_pkcs_get_supported
mov	list, eax
mov	[esp], eax	
call	_puts
mov	[esp], list	
call	_silc_free
mov	[esp], alg	
call	_silc_free
jmp	short loc_641E53F9
align 4
mov	dword ptr [esp+4], 0 
mov	dword ptr [esp], offset	aKeyLengthInKey	
call	_silc_get_input
mov	edi, eax
test	eax, eax
jz	loc_641E56EC
mov	[esp], length	
call	_atoi
mov	[ebp+key_len_bits], eax
mov	[esp], length	
call	_silc_free
mov	ecx, [ebp+key_len_bits]
test	ecx, ecx
jnz	loc_641E513F
jmp	loc_641E522D
align 4
cmp	[ebp+var_235], 0
jnz	loc_641E575C
mov	dword ptr [esp], offset	aPublic_key_pub	
call	_strdup
mov	[ebp+pkfile], eax
jmp	loc_641E51B8
cmp	[ebp+var_235], 0
jnz	loc_641E5704
mov	dword ptr [esp], offset	aPrivate_key_pr	
call	_strdup
mov	[ebp+prvfile], eax
jmp	loc_641E51C6
mov	eax, ds:__imp___iob
add	eax, 40h
mov	[ebp+var_22C], eax
jmp	short loc_641E5532
			
mov	[esp+4], pass2
mov	[esp], pass	
call	_strcmp
mov	[esp], pass2	
mov	[ebp+prompt], eax
call	_silc_free
mov	eax, [ebp+prompt]
test	eax, eax
jz	loc_641E51CE
mov	eax, [ebp+var_22C]
mov	[esp+0Ch], eax	
mov	dword ptr [esp+8], 1Bh 
mov	dword ptr [esp+4], 1 
mov	dword ptr [esp], offset	aPassphrasesD_0	
call	_fwrite
mov	dword ptr [esp+4], 1 
mov	dword ptr [esp], offset	aPrivateKeyPass	
call	_silc_get_input
mov	pass, eax
test	eax, eax
jz	loc_641E5608
mov	dword ptr [esp], 0Ah 
call	_putchar
mov	dword ptr [esp+4], 1 
mov	dword ptr [esp], offset	aRetypePrivateK	
call	_silc_get_input
mov	pass2, eax
test	eax, eax
jnz	loc_641E54E4
mov	dword ptr [esp], offset	byte_64265840 
call	_strdup
mov	pass2, eax
jmp	loc_641E54E4
align 10h
mov	dword ptr [esp], offset	aRsa 
call	_strdup
mov	alg, eax
jmp	loc_641E5417
align 4
call	_silc_get_real_name
mov	[ebp+identifier], eax
call	_silc_net_localhost
mov	length,	eax
test	eax, eax
jnz	loc_641E57E0
mov	[ebp+def], 0
cmp	[ebp+var_235], 0
jnz	short loc_641E5644
mov	edi, [ebp+def]
test	edi, edi
jz	loc_641E5896
mov	edx, [ebp+def]
mov	[esp], edx	
call	_strdup
mov	[ebp+identifier], eax
mov	identifier, [ebp+def]
mov	[esp], eax	
call	_silc_free
jmp	loc_641E514D
align 4
mov	dword ptr [esp], offset	byte_64265840 
call	_strdup
mov	pass, eax
jmp	loc_641E51CE
align 4
mov	dword ptr [esp], offset	aPressEnterToCo	
call	_puts
mov	eax, ds:__imp___iob
mov	edx, [eax+4]
dec	edx
mov	[eax+4], edx
test	edx, edx
js	loc_641E58F9
inc	dword ptr [eax]
jmp	loc_641E5301
align 4
lea	edx, [ebp+line]
mov	[ebp+var_24C], edx
mov	ecx, 100h
xor	eax, eax
mov	edi, edx
rep stosb
mov	ecx, [ebp+def]
test	ecx, ecx
jz	loc_641E58D6
mov	eax, [ebp+def]
mov	[esp+0Ch], eax
mov	dword ptr [esp+8], offset aIdentifierS 
mov	dword ptr [esp+4], 100h	
mov	[esp], edx	
call	_silc_snprintf
			
mov	dword ptr [esp+4], 0
lea	edx, [ebp+line]
mov	[esp], edx	
call	_silc_get_input
test	eax, eax
jz	loc_641E57B4
mov	[ebp+identifier], identifier
jmp	loc_641E55F3
mov	[esp+8], alg
mov	dword ptr [esp+4], offset aUnknownPkcsAlg 
mov	eax, ds:__imp___iob
add	eax, 40h
mov	[esp], eax	
call	_fprintf
xor	eax, eax
jmp	loc_641E5212
align 4
mov	dword ptr [esp], offset	aRsa 
call	_strdup
mov	alg, eax
jmp	loc_641E511C
align 4
mov	dword ptr [esp], 0 
call	_silc_free
mov	[ebp+key_len_bits], 800h
jmp	loc_641E513F
lea	edx, [ebp+line]
mov	ecx, 100h
xor	eax, eax
mov	length,	edx
rep stosb
mov	dword ptr [esp+8], offset aPrivateKeyFile 
mov	dword ptr [esp+4], 100h	
mov	[esp], edx	
mov	[ebp+prompt], edx
call	_silc_snprintf
mov	dword ptr [esp+4], 0 
mov	edx, [ebp+prompt]
mov	[esp], edx	
call	_silc_get_input
mov	[ebp+prvfile], eax
test	eax, eax
jnz	loc_641E51C6
jmp	loc_641E54BD
lea	edx, [ebp+line]
mov	ecx, 100h
xor	eax, eax
mov	length,	edx
rep stosb
mov	dword ptr [esp+8], offset aPublicKeyFilen 
mov	dword ptr [esp+4], 100h	
mov	[esp], edx	
mov	[ebp+prompt], edx
call	_silc_snprintf
mov	dword ptr [esp+4], 0 
mov	edx, [ebp+prompt]
mov	[esp], edx	
call	_silc_get_input
mov	[ebp+pkfile], eax
test	eax, eax
jnz	loc_641E51B8
jmp	loc_641E5499
mov	identifier, [ebp+def]
test	eax, eax
jz	loc_641E568B
mov	eax, [ebp+def]
mov	[esp], eax	
call	_strdup
test	eax, eax
jz	loc_641E568B
jmp	loc_641E56A9
align 10h
call	_silc_get_username
mov	[ebp+username],	eax
test	eax, eax
jz	loc_641E55BE
mov	[esp+10h], edi
mov	[esp+0Ch], eax
mov	dword ptr [esp+8], offset aS@S 
mov	dword ptr [esp+4], 100h	
lea	edx, [ebp+str]
mov	[esp], edx	
mov	[ebp+prompt], edx
call	_silc_snprintf
mov	dword ptr [esp+18h], 0 
mov	dword ptr [esp+14h], 0 
mov	dword ptr [esp+10h], 0 
mov	edx, [ebp+prompt]
mov	[esp+0Ch], edx	
mov	edx, [ebp+identifier]
mov	[esp+8], edx	
mov	[esp+4], edi	
mov	eax, [ebp+username]
mov	[esp], eax	
call	_silc_pkcs_silc_encode_identifier
mov	[ebp+def], eax
mov	eax, [ebp+identifier]
test	eax, eax
jz	short loc_641E587B
mov	edx, [ebp+identifier]
mov	[esp], edx	
call	_silc_free
mov	[esp], edi	
call	_silc_free
mov	eax, [ebp+username]
mov	[esp], eax	
call	_silc_free
jmp	loc_641E55C8
call	__errno
mov	eax, [eax]
mov	[esp], eax	
call	_strerror
mov	[esp+8], eax
mov	dword ptr [esp+4], offset aCouldNotCrea_1 
jmp	loc_641E56C0
mov	eax, [ebp+private_key]
mov	[esp], eax	
call	_silc_pkcs_private_key_free
jmp	loc_641E52C8
mov	eax, [ebp+public_key]
mov	[esp], eax	
call	_silc_pkcs_public_key_free
jmp	loc_641E52B5
mov	dword ptr [esp+8], offset aIdentifierEg_U 
mov	dword ptr [esp+4], 100h	
lea	eax, [ebp+line]
mov	[esp], eax	
call	_silc_snprintf
jmp	loc_641E568B
mov	[esp], eax	
call	__filbuf
jmp	loc_641E5301
align 4
			
push	ebp
mov	ebp, esp
push	esi
push	ebx
mov	edx, [ebp+context]
mov	eax, [ebp+user_context]
test	edx, edx
jz	short loc_641E593B
mov	ecx, [user_context_0]
test	ecx, ecx
jz	short loc_641E594C
movzx	ecx, word ptr [user_context_0+0Ch]
mov	ebx, [user_context_0+4]
mov	[ebx+ecx], context_0
test	byte ptr [user_context_0+10h], 1
jnz	short loc_641E5940
mov	[user_context_0+4], context_0
mov	dword ptr [context_0+ecx], 0
add	dword ptr [user_context_0+10h],	4
pop	ebx
pop	esi
leave
retn
align 10h
movzx	ebx, word ptr [user_context_0+0Eh]
mov	esi, [user_context_0+4]
mov	[context_0+ebx], esi
jmp	short loc_641E592D
mov	[user_context_0], context_0
movzx	ecx, word ptr [user_context_0+0Ch]
jmp	short loc_641E5927
public _silc_idcache_find_by_name_one
push	ebp
mov	ebp, esp
sub	esp, 18h
mov	eax, [ebp+cache]
test	eax, eax
jz	short locret_641E5982
mov	edx, [ebp+ret]
mov	[esp+0Ch], edx	
mov	dword ptr [esp+8], 0 
mov	edx, [ebp+name]
mov	[esp+4], edx	
mov	cache_0, [cache_0+4]
mov	[esp], eax	
call	_silc_hash_table_find
leave
retn
public _silc_idcache_find_by_context
push	ebp
mov	ebp, esp
sub	esp, 18h
mov	eax, [ebp+cache]
test	eax, eax
jz	short locret_641E59B2
mov	edx, [ebp+ret]
mov	[esp+0Ch], edx	
mov	dword ptr [esp+8], 0 
mov	edx, [ebp+context]
mov	[esp+4], edx	
mov	cache_0, [cache_0+8]
mov	[esp], eax	
call	_silc_hash_table_find
leave
retn
public _silc_idcache_find_by_name
push	ebp
mov	ebp, esp
push	esi
push	ebx
sub	esp, 10h
mov	esi, [ebp+cache]
mov	ebx, [ebp+ret_list]
test	esi, esi
jz	short loc_641E59D9
test	ret_list_0, ret_list_0
jz	short loc_641E59D9
mov	eax, [cache_0+4]
mov	[esp], eax	
call	_silc_hash_table_count
test	eax, eax
jnz	short loc_641E59E4
			
xor	eax, eax
add	esp, 10h
pop	ret_list_0
pop	cache_0
leave
retn
align 4
mov	eax, [ret_list_0+10h]
and	eax, 3
mov	[ret_list_0+10h], eax
mov	word ptr [ret_list_0+0Ch], 0
mov	word ptr [ret_list_0+0Eh], 0
mov	byte ptr [ret_list_0+10h], 0
mov	dword ptr [ret_list_0+8], 0
mov	dword ptr [ret_list_0+4], 0
mov	dword ptr [ret_list_0],	0
mov	[esp+0Ch], ret_list_0 
mov	dword ptr [esp+8], offset _silc_idcache_get_all_foreach	
mov	eax, [ebp+name]
mov	[esp+4], eax	
mov	eax, [cache_0+4]
mov	[esp], eax	
call	_silc_hash_table_find_foreach
test	dword ptr [ret_list_0+10h], 0FFFFFFFCh
setnz	al
add	esp, 10h
pop	ret_list_0
pop	cache_0
leave
retn
public _silc_idcache_find_by_id
push	ebp
mov	ebp, esp
push	esi
push	ebx
sub	esp, 10h
mov	esi, [ebp+cache]
mov	ebx, [ebp+ret_list]
test	esi, esi
jz	short loc_641E5A64
test	ret_list_0, ret_list_0
jz	short loc_641E5A64
mov	eax, [cache_0]
mov	[esp], eax	
call	_silc_hash_table_count
test	eax, eax
jnz	short loc_641E5A70
			
xor	eax, eax
add	esp, 10h
pop	ret_list_0
pop	cache_0
leave
retn
align 10h
mov	eax, [ret_list_0+10h]
and	eax, 3
mov	[ret_list_0+10h], eax
mov	word ptr [ret_list_0+0Ch], 0
mov	word ptr [ret_list_0+0Eh], 0
mov	byte ptr [ret_list_0+10h], 0
mov	dword ptr [ret_list_0+8], 0
mov	dword ptr [ret_list_0+4], 0
mov	dword ptr [ret_list_0],	0
mov	[esp+0Ch], ret_list_0 
mov	dword ptr [esp+8], offset _silc_idcache_get_all_foreach	
mov	eax, [ebp+id]
mov	[esp+4], eax	
mov	eax, [cache_0]
mov	[esp], eax	
call	_silc_hash_table_find_foreach
test	dword ptr [ret_list_0+10h], 0FFFFFFFCh
setnz	al
add	esp, 10h
pop	ret_list_0
pop	cache_0
leave
retn
align 4
public _silc_idcache_find_by_id_one
push	ebp
mov	ebp, esp
sub	esp, 28h
mov	eax, [ebp+cache]
test	eax, eax
jz	short locret_641E5B19
movzx	edx, word ptr [cache_0+14h]
mov	[esp+1Ch], edx	
mov	dword ptr [esp+18h], offset _silc_hash_id_compare_full 
mov	dword ptr [esp+14h], 0 
mov	dword ptr [esp+10h], 0 
mov	edx, [ebp+ret]
mov	[esp+0Ch], edx	
mov	dword ptr [esp+8], 0 
mov	edx, [ebp+id]
mov	[esp+4], edx	
mov	cache_0, [cache_0]
mov	[esp], eax	
call	_silc_hash_table_find_ext
leave
retn
align 4
public _silc_idcache_get_all
push	ebp
mov	ebp, esp
push	esi
push	ebx
sub	esp, 10h
mov	esi, [ebp+cache]
mov	ebx, [ebp+ret_list]
test	esi, esi
jz	short loc_641E5B40
test	ret_list_0, ret_list_0
jz	short loc_641E5B40
mov	eax, [cache_0]
mov	[esp], eax	
call	_silc_hash_table_count
test	eax, eax
jnz	short loc_641E5B4C
			
xor	eax, eax
add	esp, 10h
pop	ret_list_0
pop	cache_0
leave
retn
align 4
mov	eax, [ret_list_0+10h]
and	eax, 3
mov	[ret_list_0+10h], eax
mov	word ptr [ret_list_0+0Ch], 0
mov	word ptr [ret_list_0+0Eh], 0
mov	byte ptr [ret_list_0+10h], 0
mov	dword ptr [ret_list_0+8], 0
mov	dword ptr [ret_list_0+4], 0
mov	dword ptr [ret_list_0],	0
mov	[esp+8], ret_list_0 
mov	dword ptr [esp+4], offset _silc_idcache_get_all_foreach	
mov	eax, [cache_0]
mov	[esp], eax	
call	_silc_hash_table_foreach
test	dword ptr [ret_list_0+10h], 0FFFFFFFCh
setnz	al
add	esp, 10h
pop	ret_list_0
pop	cache_0
leave
retn
public _silc_idcache_move
push	ebp
mov	ebp, esp
push	edi
push	esi
push	ebx
sub	esp, 2Ch
mov	esi, [ebp+from_cache]
mov	edi, [ebp+to_cache]
mov	ebx, [ebp+entry]
test	esi, esi
jz	short loc_641E5BF9
test	to_cache_0, to_cache_0
jz	short loc_641E5BF9
test	entry_0, entry_0
jz	short loc_641E5BF9
mov	eax, [from_cache_0+14h]
cmp	ax, [to_cache_0+14h]
jnz	short loc_641E5C04
mov	eax, [entry_0+0Ch]
test	eax, eax
jz	loc_641E5D04
lea	edx, [ebp+c]
mov	[esp+0Ch], edx	
mov	dword ptr [esp+8], 0 
mov	[esp+4], eax	
mov	eax, [from_cache_0+8]
mov	[esp], eax	
call	_silc_hash_table_find
test	al, al
jz	short loc_641E5BF9
			
cmp	entry_0, [ebp+c]
jz	short loc_641E5C2C
			
xor	eax, eax
			
add	esp, 2Ch
pop	entry_0
pop	from_cache_0
pop	to_cache_0
leave
retn
align 4
mov	dword ptr [esp], offset	aIncompatibleId	
call	_silc_format
mov	[esp+4], eax	
mov	dword ptr [esp], 3 
call	_silc_log_output
xor	eax, eax
add	esp, 2Ch
pop	entry_0
pop	from_cache_0
pop	to_cache_0
leave
retn
align 4
mov	eax, [entry_0+4]
test	eax, eax
jz	short loc_641E5C52
mov	dword ptr [esp+8], 0 
mov	[esp+4], eax	
mov	[esp], to_cache_0 
call	_silc_idcache_find_by_id_one
test	al, al
jnz	loc_641E5D6D
mov	entry_0, [ebp+c]
mov	eax, [entry_0+8]
test	eax, eax
jz	short loc_641E5C6F
mov	[esp+8], entry_0 
mov	[esp+4], eax	
mov	eax, [from_cache_0+4]
mov	[esp], eax	
call	_silc_hash_table_del_by_context
mov	entry_0, [ebp+c]
mov	eax, [entry_0+0Ch]
test	eax, eax
jz	short loc_641E5C8C
mov	[esp+8], entry_0 
mov	[esp+4], eax	
mov	eax, [from_cache_0+8]
mov	[esp], eax	
call	_silc_hash_table_del_by_context
mov	entry_0, [ebp+c]
mov	eax, [entry_0+4]
test	eax, eax
jz	short loc_641E5CC4
mov	[esp+8], entry_0 
mov	[esp+4], eax	
mov	eax, [from_cache_0]
mov	[esp], eax	
call	_silc_hash_table_del_by_context
mov	entry_0, [ebp+c]
mov	eax, [entry_0+4]
test	eax, eax
jz	short loc_641E5CC4
mov	[esp+8], entry_0 
mov	[esp+4], eax	
mov	eax, [to_cache_0]
mov	[esp], eax	
call	_silc_hash_table_add
mov	entry_0, [ebp+c]
			
mov	eax, [entry_0+8]
test	eax, eax
jz	short loc_641E5CE1
mov	[esp+8], entry_0 
mov	[esp+4], eax	
mov	eax, [to_cache_0+4]
mov	[esp], eax	
call	_silc_hash_table_add
mov	entry_0, [ebp+c]
mov	eax, [entry_0+0Ch]
test	eax, eax
jz	short loc_641E5CFB
mov	[esp+8], entry_0 
mov	[esp+4], eax	
mov	eax, [to_cache_0+8]
mov	[esp], eax	
call	_silc_hash_table_add
mov	al, 1
jmp	loc_641E5BFB
align 4
mov	eax, [entry_0+8]
test	eax, eax
jz	short loc_641E5D38
lea	edx, [ebp+c]
mov	[esp+0Ch], edx	
mov	dword ptr [esp+8], 0 
mov	[esp+4], eax	
mov	eax, [from_cache_0+4]
mov	[esp], eax	
call	_silc_hash_table_find
test	al, al
jnz	loc_641E5BF4
jmp	loc_641E5BF9
align 4
mov	eax, [entry_0+4]
test	eax, eax
jz	loc_641E5BF9
lea	edx, [ebp+c]
mov	[esp+0Ch], edx	
mov	dword ptr [esp+8], 0 
mov	[esp+4], eax	
mov	eax, [from_cache_0]
mov	[esp], eax	
call	_silc_hash_table_find
test	al, al
jnz	loc_641E5BF4
jmp	loc_641E5BF9
movzx	eax, word ptr [to_cache_0+14h]
mov	[esp+4], eax	
mov	eax, [ebp+c]
mov	eax, [eax+4]
mov	[esp], eax	
call	_silc_id_render
mov	[esp+4], eax
mov	dword ptr [esp], offset	aAttemptedToAdd	
call	_silc_format
mov	[esp+4], eax	
mov	dword ptr [esp], 3 
call	_silc_log_output
xor	eax, eax
jmp	loc_641E5BFB
align 4
public _silc_idcache_update
push	ebp
mov	ebp, esp
push	edi
push	esi
push	ebx
sub	esp, 2Ch
mov	ebx, [ebp+cache]
mov	edx, [ebp+entry]
mov	al, [ebp+free_old_name]
mov	[ebp+var_19], al
test	ebx, ebx
jz	loc_641E5EA0
mov	edi, [ebp+new_id]
test	edi, edi
jz	short loc_641E5E41
mov	eax, [entry_0+4]
test	eax, eax
jz	loc_641E5EAC
mov	[esp+8], entry_0 
mov	[esp+4], eax	
mov	eax, [cache_0]
mov	[esp], eax	
mov	[ebp+context], entry_0
call	_silc_hash_table_del_by_context
test	al, al
mov	edx, [ebp+context]
jz	loc_641E5EA0
mov	eax, [cache_0+14h]
cmp	ax, 2
jz	loc_641E5EB8
cmp	ax, 1
jz	loc_641E5EE4
cmp	ax, 3
jz	loc_641E5ED0
mov	eax, [edx+4]
mov	[ebp+new_id], eax
mov	[esp+8], entry_0
mov	eax, [ebp+new_id]
mov	[esp+4], eax	
mov	eax, [cache_0]
mov	[esp], eax	
mov	[ebp+context], entry_0
call	_silc_hash_table_add
test	al, al
mov	edx, [ebp+context]
jz	short loc_641E5EA0
mov	esi, [ebp+new_name]
test	esi, esi
jz	loc_641E5F14
mov	eax, [edx+8]
test	eax, eax
jz	short loc_641E5E70
mov	[esp+8], entry_0 
mov	[esp+4], eax	
mov	eax, [cache_0+4]
mov	[esp], eax	
mov	[ebp+context], entry_0
call	_silc_hash_table_del_by_context
test	al, al
mov	edx, [ebp+context]
jz	short loc_641E5EA0
cmp	[ebp+var_19], 0
jnz	loc_641E5EFC
mov	eax, [ebp+new_name]
mov	[edx+8], eax
mov	[esp+8], edx	
mov	[esp+4], eax	
mov	eax, [cache_0+4]
mov	[esp], eax	
call	_silc_hash_table_add
test	al, al
setnz	al
add	esp, 2Ch
pop	cache_0
pop	esi
pop	edi
leave
retn
			
xor	eax, eax
add	esp, 2Ch
pop	cache_0
pop	esi
pop	edi
leave
retn
align 4
mov	eax, [ebp+new_id]
mov	[entry_0+4], eax
jmp	loc_641E5E22
align 4
mov	eax, [edx+4]
mov	ecx, 1Dh
mov	edi, eax
mov	esi, [ebp+new_id]
rep movsb
mov	eax, [cache_0+14h]
jmp	loc_641E5E08
align 10h
mov	eax, [edx+4]
mov	ecx, 16h
mov	edi, eax
mov	new_id_0, [ebp+new_id]
rep movsb
jmp	loc_641E5E1C
mov	eax, [edx+4]
mov	ecx, 16h
mov	edi, eax
mov	esi, [ebp+new_id]
rep movsb
mov	eax, [cache_0+14h]
jmp	loc_641E5E12
align 4
mov	eax, [edx+8]
mov	[esp], eax	
mov	[ebp+context], edx
call	_silc_free
mov	edx, [ebp+context]
jmp	loc_641E5E7A
align 4
mov	al, 1
jmp	short loc_641E5EA2
public _silc_idcache_update_by_context
push	ebp
mov	ebp, esp
push	esi
push	ebx
sub	esp, 30h
mov	ebx, [ebp+cache]
movzx	esi, [ebp+free_old_name]
test	ebx, ebx
jz	short loc_641E5F50
lea	eax, [ebp+c]
mov	[esp+0Ch], eax	
mov	dword ptr [esp+8], 0 
mov	eax, [ebp+context]
mov	[esp+4], eax	
mov	eax, [cache_0+8]
mov	[esp], eax	
call	_silc_hash_table_find
test	al, al
jnz	short loc_641E5F5C
xor	eax, eax
add	esp, 30h
pop	cache_0
pop	free_old_name_0
leave
retn
align 4
and	free_old_name_0, 0FFh
mov	[esp+10h], free_old_name_0 
mov	eax, [ebp+new_name]
mov	[esp+0Ch], eax	
mov	eax, [ebp+new_id]
mov	[esp+8], eax	
mov	eax, [ebp+c]
mov	[esp+4], eax	
mov	[esp], cache_0	
call	_silc_idcache_update
add	esp, 30h
pop	cache_0
pop	free_old_name_0
leave
retn
align 4
public _silc_idcache_del
			
push	ebp
mov	ebp, esp
push	edi
push	esi
push	ebx
sub	esp, 1Ch
mov	edi, [ebp+cache]
mov	esi, [ebp+entry]
test	edi, edi
jz	loc_641E6040
mov	eax, [entry_0+8]
test	eax, eax
jz	loc_641E603C
mov	[esp+8], entry_0 
mov	[esp+4], eax	
mov	eax, [cache_0+4]
mov	[esp], eax	
call	_silc_hash_table_del_by_context
mov	bl, al
mov	eax, [entry_0+0Ch]
test	eax, eax
jz	short loc_641E5FDF
mov	[esp+8], entry_0 
mov	[esp+4], eax	
mov	eax, [cache_0+8]
mov	[esp], eax	
call	_silc_hash_table_del_by_context
mov	bl, al
mov	eax, [entry_0+4]
test	eax, eax
jz	short loc_641E5FFA
mov	[esp+8], entry_0 
mov	[esp+4], eax	
mov	eax, [cache_0]
mov	[esp], eax	
call	_silc_hash_table_del_by_context
mov	bl, al
test	bl, bl
jz	short loc_641E602F
mov	eax, [cache_0+0Ch]
test	eax, eax
jz	short loc_641E601C
mov	edx, [ebp+app_context]
mov	[esp+0Ch], edx
mov	edx, [cache_0+10h]
mov	[esp+8], edx
mov	[esp+4], entry_0
mov	[esp], cache_0
call	eax
mov	ecx, 10h
mov	al, 46h
mov	cache_0, entry_0
rep stosb
mov	[esp], esi	
call	_silc_free
mov	al, bl
add	esp, 1Ch
pop	ret
pop	entry_0
pop	edi
leave
retn
align 4
xor	ebx, ebx
jmp	short loc_641E5FC3
xor	ebx, ebx
mov	al, bl
add	esp, 1Ch
pop	ret
pop	entry_0
pop	cache_0
leave
retn
public _silc_idcache_del_by_context
push	ebp
mov	ebp, esp
push	ebx
sub	esp, 24h
mov	ebx, [ebp+cache]
test	ebx, ebx
jz	short loc_641E607F
lea	eax, [ebp+c]
mov	[esp+0Ch], eax	
mov	dword ptr [esp+8], 0 
mov	eax, [ebp+context]
mov	[esp+4], eax	
mov	eax, [cache_0+8]
mov	[esp], eax	
call	_silc_hash_table_find
test	al, al
jnz	short loc_641E6088
xor	eax, eax
add	esp, 24h
pop	cache_0
leave
retn
align 4
mov	eax, [ebp+app_context]
mov	[esp+8], eax	
mov	eax, [ebp+c]
mov	[esp+4], eax	
mov	[esp], cache_0	
call	_silc_idcache_del
add	esp, 24h
pop	cache_0
leave
retn
public _silc_idcache_del_by_id
push	ebp
mov	ebp, esp
push	ebx
sub	esp, 24h
mov	ebx, [ebp+cache]
test	ebx, ebx
jz	short loc_641E60D6
lea	eax, [ebp+c]
mov	[esp+0Ch], eax	
mov	dword ptr [esp+8], 0 
mov	eax, [ebp+id]
mov	[esp+4], eax	
mov	eax, [cache_0]
mov	[esp], eax	
call	_silc_hash_table_find
test	al, al
jnz	short loc_641E60E0
xor	eax, eax
add	esp, 24h
pop	cache_0
leave
retn
align 10h
mov	eax, [ebp+app_context]
mov	[esp+8], eax	
mov	eax, [ebp+c]
mov	[esp+4], eax	
mov	[esp], cache_0	
call	_silc_idcache_del
add	esp, 24h
pop	cache_0
leave
retn
public _silc_idcache_free
push	ebp
mov	ebp, esp
push	ebx
sub	esp, 14h
mov	ebx, [ebp+cache]
mov	eax, [ebx]
mov	[esp], eax	
call	_silc_hash_table_free
mov	eax, [ebx+4]
mov	[esp], eax	
call	_silc_hash_table_free
mov	eax, [ebx+8]
mov	[esp], eax	
call	_silc_hash_table_free
mov	[ebp+cache], ebx
add	esp, 14h
pop	ebx
leave
jmp	_silc_free
align 4
public _silc_idcache_alloc
push	ebp
mov	ebp, esp
push	edi
push	esi
push	ebx
sub	esp, 3Ch
mov	esi, [ebp+count]
mov	edi, [ebp+id_type]
mov	[ebp+var_1A], di
mov	dword ptr [esp+4], 18h 
mov	dword ptr [esp], 1 
call	_silc_calloc
mov	ebx, eax
test	eax, eax
jz	loc_641E624A
movzx	cache, [ebp+var_1A]
mov	dword ptr [esp+1Ch], 1 
mov	dword ptr [esp+18h], 0 
mov	dword ptr [esp+14h], 0 
mov	[esp+10h], eax	
mov	dword ptr [esp+0Ch], offset _silc_hash_id_compare 
mov	[esp+8], eax	
mov	dword ptr [esp+4], offset _silc_hash_id	
mov	[esp], count_0	
call	_silc_hash_table_alloc
mov	[cache], eax
mov	dword ptr [esp+1Ch], 1 
mov	dword ptr [esp+18h], 0 
mov	dword ptr [esp+14h], 0 
mov	dword ptr [esp+10h], 0 
mov	dword ptr [esp+0Ch], offset _silc_hash_utf8_compare 
mov	dword ptr [esp+8], 0 
mov	dword ptr [esp+4], offset _silc_hash_utf8_string 
mov	[esp], count_0	
call	_silc_hash_table_alloc
mov	[cache+4], eax
mov	dword ptr [esp+1Ch], 1 
mov	dword ptr [esp+18h], 0 
mov	dword ptr [esp+14h], 0 
mov	dword ptr [esp+10h], 0 
mov	dword ptr [esp+0Ch], 0 
mov	dword ptr [esp+8], 0 
mov	dword ptr [esp+4], offset _silc_hash_ptr 
mov	[esp], count_0	
call	_silc_hash_table_alloc
mov	[cache+8], eax
mov	edx, [ebp+destructor]
mov	[cache+0Ch], edx
mov	edx, [ebp+destructor_context]
mov	[cache+10h], edx
mov	[cache+14h], di
mov	edx, [cache]
test	edx, edx
jz	short loc_641E625C
mov	ecx, [cache+4]
test	ecx, ecx
jz	short loc_641E6254
test	eax, eax
jz	short loc_641E6254
			
mov	eax, cache
add	esp, 3Ch
pop	cache
pop	count_0
pop	id_type_0
leave
retn
			
mov	[esp], edx
call	_silc_hash_table_free
mov	eax, [cache+4]
test	eax, eax
jz	short loc_641E626B
mov	[esp], eax	
call	_silc_hash_table_free
mov	eax, [cache+8]
test	eax, eax
jz	short loc_641E627A
mov	[esp], eax	
call	_silc_hash_table_free
mov	[esp], cache	
call	_silc_free
xor	cache, cache
jmp	short loc_641E624A
align 4
public _silc_idcache_add
push	ebp
mov	ebp, esp
push	edi
push	esi
push	ebx
sub	esp, 2Ch
mov	esi, [ebp+cache]
mov	edi, [ebp+id]
test	esi, esi
jz	loc_641E63F3
mov	ecx, [ebp+name]
test	ecx, ecx
jnz	short loc_641E62AE
test	id_0, id_0
jz	loc_641E63E8
			
mov	dword ptr [esp+4], 10h 
mov	dword ptr [esp], 1 
call	_silc_calloc
mov	ebx, eax
test	eax, eax
jz	loc_641E6379
mov	[c+4], id_0
mov	c, [ebp+name]
mov	[c+8], eax
mov	eax, [ebp+context]
mov	[c+0Ch], eax
test	id_0, id_0
jz	short loc_641E6337
movzx	eax, word ptr [cache_0+14h]
mov	[esp+1Ch], eax	
mov	dword ptr [esp+18h], offset _silc_hash_id_compare_full 
mov	dword ptr [esp+14h], 0 
mov	dword ptr [esp+10h], 0 
mov	dword ptr [esp+0Ch], 0 
mov	dword ptr [esp+8], 0 
mov	[esp+4], id_0	
mov	eax, [cache_0]
mov	[esp], eax	
call	_silc_hash_table_find_ext
test	al, al
jnz	short err
mov	[esp+8], c	
mov	[esp+4], id_0	
mov	eax, [cache_0]
mov	[esp], eax	
call	_silc_hash_table_add
test	al, al
jz	short err
mov	eax, [ebp+name]
test	eax, eax
jz	short loc_641E6358
mov	[esp+8], c	
mov	eax, [ebp+name]
mov	[esp+4], eax	
mov	eax, [cache_0+4]
mov	[esp], eax	
call	_silc_hash_table_add
test	al, al
jz	short err
mov	id_0, [ebp+context]
test	edi, edi
jz	short loc_641E6379
mov	[esp+8], c	
mov	eax, [ebp+context]
mov	[esp+4], eax	
mov	eax, [cache_0+8]
mov	[esp], eax	
call	_silc_hash_table_add
test	al, al
jz	short err
			
mov	eax, c
add	esp, 2Ch
pop	c
pop	cache_0
pop	edi
leave
retn
align 4
			
mov	eax, [c+8]
test	eax, eax
jz	short loc_641E639E
mov	[esp+8], c	
mov	[esp+4], eax	
mov	eax, [cache_0+4]
mov	[esp], eax	
call	_silc_hash_table_del_by_context
mov	eax, [c+0Ch]
test	eax, eax
jz	short loc_641E63B8
mov	[esp+8], c	
mov	[esp+4], eax	
mov	eax, [cache_0+8]
mov	[esp], eax	
call	_silc_hash_table_del_by_context
mov	eax, [c+4]
test	eax, eax
jz	short loc_641E63D1
mov	[esp+8], c	
mov	[esp+4], eax	
mov	eax, [cache_0]
mov	[esp], eax	
call	_silc_hash_table_del_by_context
mov	[esp], c	
call	_silc_free
xor	c, c
mov	eax, c
add	esp, 2Ch
pop	c
pop	cache_0
pop	edi
leave
retn
align 4
mov	edx, [ebp+context]
test	edx, edx
jnz	loc_641E62AE
xor	ebx, ebx
mov	eax, c
add	esp, 2Ch
pop	c
pop	cache_0
pop	id_0
leave
retn
align 10h
public _silc_aes_cbc_set_iv
retn
align 4
public _silc_aes_cbc_context_len
mov	eax, 104h
retn
align 4
public _silc_aes_ctr_set_iv
mov	eax, [esp+context]
mov	byte ptr [eax+0F2h], 0
retn
public _silc_aes_ctr_context_len
mov	eax, 104h
retn
align 10h
public _aes_encrypt_key128
			
push	ebp
push	edi
push	esi
push	ebx
mov	edx, [esp+10h+key]
mov	eax, [esp+10h+cx_0]
movzx	esi, byte ptr [edx+3]
shl	esi, 18h
movzx	ecx, byte ptr [edx+2]
shl	ecx, 10h
or	esi, ecx
movzx	ecx, byte ptr [edx]
or	esi, ecx
movzx	ecx, byte ptr [edx+1]
shl	ecx, 8
or	esi, ecx
mov	[eax], esi
movzx	ebx, byte ptr [edx+7]
shl	ebx, 18h
movzx	ecx, byte ptr [edx+6]
shl	ecx, 10h
or	ebx, ecx
movzx	ecx, byte ptr [edx+4]
or	ebx, ecx
movzx	ecx, byte ptr [edx+5]
shl	ecx, 8
or	ebx, ecx
mov	[eax+4], ebx
movzx	edi, byte ptr [edx+0Bh]
shl	edi, 18h
movzx	ecx, byte ptr [edx+0Ah]
shl	ecx, 10h
or	ecx, edi
movzx	edi, byte ptr [edx+8]
or	ecx, edi
movzx	edi, byte ptr [edx+9]
shl	edi, 8
or	ecx, edi
mov	[eax+8], ecx
movzx	ebp, byte ptr [edx+0Fh]
shl	ebp, 18h
movzx	edi, byte ptr [edx+0Eh]
shl	edi, 10h
or	ebp, edi
movzx	edi, byte ptr [edx+0Ch]
or	ebp, edi
movzx	edi, byte ptr [edx+0Dh]
shl	edi, 8
mov	edx, ebp
or	edx, edi
mov	[eax+0Ch], edx
xor	esi, 1
movzx	edi, dl
xor	esi, ds:(_t_fl+0C00h)[edi*4]
movzx	edi, dh
xor	esi, ds:_t_fl[edi*4]
mov	edi, edx
shr	edi, 10h
and	edi, 0FFh
xor	esi, ds:(_t_fl+400h)[edi*4]
mov	edi, edx
shr	edi, 18h
xor	esi, ds:(_t_fl+800h)[edi*4]
mov	[eax+10h], esi
xor	ebx, esi
mov	[eax+14h], ebx
xor	ecx, ebx
mov	[eax+18h], ecx
xor	edx, ecx
mov	[eax+1Ch], edx
xor	esi, 2
movzx	edi, dl
xor	esi, ds:(_t_fl+0C00h)[edi*4]
movzx	edi, dh
xor	esi, ds:_t_fl[edi*4]
mov	edi, edx
shr	edi, 10h
and	edi, 0FFh
xor	esi, ds:(_t_fl+400h)[edi*4]
mov	edi, edx
shr	edi, 18h
xor	esi, ds:(_t_fl+800h)[edi*4]
mov	[eax+20h], esi
xor	ebx, esi
mov	[eax+24h], ebx
xor	ecx, ebx
mov	[eax+28h], ecx
xor	edx, ecx
mov	[eax+2Ch], edx
xor	esi, 4
movzx	edi, dl
xor	esi, ds:(_t_fl+0C00h)[edi*4]
movzx	edi, dh
xor	esi, ds:_t_fl[edi*4]
mov	edi, edx
shr	edi, 10h
and	edi, 0FFh
xor	esi, ds:(_t_fl+400h)[edi*4]
mov	edi, edx
shr	edi, 18h
xor	esi, ds:(_t_fl+800h)[edi*4]
mov	[eax+30h], esi
xor	ebx, esi
mov	[eax+34h], ebx
xor	ecx, ebx
mov	[eax+38h], ecx
xor	edx, ecx
mov	[eax+3Ch], edx
xor	esi, 8
movzx	edi, dl
xor	esi, ds:(_t_fl+0C00h)[edi*4]
movzx	edi, dh
xor	esi, ds:_t_fl[edi*4]
mov	edi, edx
shr	edi, 10h
and	edi, 0FFh
xor	esi, ds:(_t_fl+400h)[edi*4]
mov	edi, edx
shr	edi, 18h
xor	esi, ds:(_t_fl+800h)[edi*4]
mov	[eax+40h], esi
xor	ebx, esi
mov	[eax+44h], ebx
xor	ecx, ebx
mov	[eax+48h], ecx
xor	edx, ecx
mov	[eax+4Ch], edx
xor	esi, 10h
movzx	edi, dl
xor	esi, ds:(_t_fl+0C00h)[edi*4]
movzx	edi, dh
xor	esi, ds:_t_fl[edi*4]
mov	edi, edx
shr	edi, 10h
and	edi, 0FFh
xor	esi, ds:(_t_fl+400h)[edi*4]
mov	edi, edx
shr	edi, 18h
xor	esi, ds:(_t_fl+800h)[edi*4]
mov	[eax+50h], esi
xor	ebx, esi
mov	[eax+54h], ebx
xor	ecx, ebx
mov	[eax+58h], ecx
xor	edx, ecx
mov	[eax+5Ch], edx
xor	esi, 20h
movzx	edi, dl
xor	esi, ds:(_t_fl+0C00h)[edi*4]
movzx	edi, dh
xor	esi, ds:_t_fl[edi*4]
mov	edi, edx
shr	edi, 10h
and	edi, 0FFh
xor	esi, ds:(_t_fl+400h)[edi*4]
mov	edi, edx
shr	edi, 18h
xor	esi, ds:(_t_fl+800h)[edi*4]
mov	[eax+60h], esi
xor	ebx, esi
mov	[eax+64h], ebx
xor	ecx, ebx
mov	[eax+68h], ecx
xor	edx, ecx
mov	[eax+6Ch], edx
xor	esi, 40h
movzx	edi, dl
xor	esi, ds:(_t_fl+0C00h)[edi*4]
movzx	edi, dh
xor	esi, ds:_t_fl[edi*4]
mov	edi, edx
shr	edi, 10h
and	edi, 0FFh
xor	esi, ds:(_t_fl+400h)[edi*4]
mov	edi, edx
shr	edi, 18h
xor	esi, ds:(_t_fl+800h)[edi*4]
mov	[eax+70h], esi
xor	ebx, esi
mov	[eax+74h], ebx
xor	ecx, ebx
mov	[eax+78h], ecx
xor	edx, ecx
mov	[eax+7Ch], edx
xor	esi, 80h
movzx	edi, dl
xor	esi, ds:(_t_fl+0C00h)[edi*4]
movzx	edi, dh
xor	esi, ds:_t_fl[edi*4]
mov	edi, edx
shr	edi, 10h
and	edi, 0FFh
xor	esi, ds:(_t_fl+400h)[edi*4]
mov	edi, edx
shr	edi, 18h
xor	esi, ds:(_t_fl+800h)[edi*4]
mov	[eax+80h], esi
xor	ebx, esi
mov	[eax+84h], ebx
xor	ecx, ebx
mov	[eax+88h], ecx
xor	edx, ecx
mov	[eax+8Ch], edx
xor	esi, 1Bh
movzx	edi, dl
xor	esi, ds:(_t_fl+0C00h)[edi*4]
movzx	edi, dh
xor	esi, ds:_t_fl[edi*4]
mov	edi, edx
shr	edi, 10h
and	edi, 0FFh
xor	esi, ds:(_t_fl+400h)[edi*4]
mov	edi, edx
shr	edi, 18h
xor	esi, ds:(_t_fl+800h)[edi*4]
mov	[eax+90h], esi
xor	ebx, esi
mov	[eax+94h], ebx
xor	ecx, ebx
mov	[eax+98h], ecx
xor	edx, ecx
mov	[eax+9Ch], edx
xor	esi, 36h
movzx	edi, dl
xor	esi, ds:(_t_fl+0C00h)[edi*4]
movzx	edi, dh
xor	esi, ds:_t_fl[edi*4]
mov	edi, edx
shr	edi, 10h
and	edi, 0FFh
xor	esi, ds:(_t_fl+400h)[edi*4]
mov	edi, edx
shr	edi, 18h
xor	esi, ds:(_t_fl+800h)[edi*4]
mov	[eax+0A0h], esi
xor	ebx, esi
mov	[eax+0A4h], ebx
xor	ecx, ebx
mov	[eax+0A8h], ecx
xor	ecx, edx
mov	[eax+0ACh], ecx
mov	dword ptr [eax+0F0h], 0
mov	byte ptr [eax+0F0h], 0A0h
pop	ebx
pop	esi
pop	edi
pop	ebp
retn
align 4
public _aes_encrypt_key192
			
push	ebp
push	edi
push	esi
push	ebx
sub	esp, 8
mov	edx, [esp+18h+key]
mov	eax, [esp+18h+cx_0]
movzx	ebp, byte ptr [edx+3]
shl	ebp, 18h
movzx	ecx, byte ptr [edx+2]
shl	ecx, 10h
or	ebp, ecx
movzx	ecx, byte ptr [edx]
or	ebp, ecx
movzx	ecx, byte ptr [edx+1]
shl	ecx, 8
or	ebp, ecx
mov	[eax], ebp
movzx	esi, byte ptr [edx+7]
shl	esi, 18h
movzx	ecx, byte ptr [edx+6]
shl	ecx, 10h
or	esi, ecx
movzx	ecx, byte ptr [edx+4]
or	esi, ecx
movzx	ecx, byte ptr [edx+5]
shl	ecx, 8
or	esi, ecx
mov	[eax+4], esi
movzx	ebx, byte ptr [edx+0Bh]
shl	ebx, 18h
movzx	ecx, byte ptr [edx+0Ah]
shl	ecx, 10h
or	ebx, ecx
movzx	ecx, byte ptr [edx+8]
or	ebx, ecx
movzx	ecx, byte ptr [edx+9]
shl	ecx, 8
or	ebx, ecx
mov	[eax+8], ebx
movzx	edi, byte ptr [edx+0Fh]
shl	edi, 18h
movzx	ecx, byte ptr [edx+0Eh]
shl	ecx, 10h
or	ecx, edi
movzx	edi, byte ptr [edx+0Ch]
or	ecx, edi
movzx	edi, byte ptr [edx+0Dh]
shl	edi, 8
or	ecx, edi
mov	[esp+18h+var_14], ecx
mov	[eax+0Ch], ecx
movzx	edi, byte ptr [edx+13h]
shl	edi, 18h
movzx	ecx, byte ptr [edx+12h]
shl	ecx, 10h
or	edi, ecx
movzx	ecx, byte ptr [edx+10h]
or	edi, ecx
movzx	ecx, byte ptr [edx+11h]
shl	ecx, 8
or	edi, ecx
mov	[eax+10h], edi
movzx	ecx, byte ptr [edx+17h]
shl	ecx, 18h
mov	[esp+18h+var_18], ecx
movzx	ecx, byte ptr [edx+16h]
shl	ecx, 10h
or	ecx, [esp+18h+var_18]
mov	[esp+18h+var_18], ecx
movzx	ecx, byte ptr [edx+14h]
or	ecx, [esp+18h+var_18]
movzx	edx, byte ptr [edx+15h]
shl	edx, 8
or	edx, ecx
mov	[eax+14h], edx
xor	ebp, 1
movzx	ecx, dl
xor	ebp, ds:(_t_fl+0C00h)[ecx*4]
movzx	ecx, dh
xor	ebp, ds:_t_fl[ecx*4]
mov	ecx, edx
shr	ecx, 10h
movzx	ecx, cl
xor	ebp, ds:(_t_fl+400h)[ecx*4]
mov	ecx, edx
shr	ecx, 18h
xor	ebp, ds:(_t_fl+800h)[ecx*4]
mov	[eax+18h], ebp
xor	esi, ebp
mov	[eax+1Ch], esi
xor	ebx, esi
mov	[eax+20h], ebx
mov	ecx, [esp+18h+var_14]
xor	ecx, ebx
mov	[eax+24h], ecx
xor	edi, ecx
mov	[esp+18h+var_18], edi
mov	[eax+28h], edi
xor	edx, edi
mov	[eax+2Ch], edx
xor	ebp, 2
movzx	edi, dl
xor	ebp, ds:(_t_fl+0C00h)[edi*4]
movzx	edi, dh
xor	ebp, ds:_t_fl[edi*4]
mov	edi, edx
shr	edi, 10h
and	edi, 0FFh
xor	ebp, ds:(_t_fl+400h)[edi*4]
mov	edi, edx
shr	edi, 18h
xor	ebp, ds:(_t_fl+800h)[edi*4]
mov	[eax+30h], ebp
xor	esi, ebp
mov	[eax+34h], esi
xor	ebx, esi
mov	[eax+38h], ebx
xor	ecx, ebx
mov	[eax+3Ch], ecx
mov	edi, [esp+18h+var_18]
xor	edi, ecx
mov	[esp+18h+var_18], edi
mov	[eax+40h], edi
xor	edx, edi
mov	[eax+44h], edx
xor	ebp, 4
movzx	edi, dl
xor	ebp, ds:(_t_fl+0C00h)[edi*4]
movzx	edi, dh
xor	ebp, ds:_t_fl[edi*4]
mov	edi, edx
shr	edi, 10h
and	edi, 0FFh
xor	ebp, ds:(_t_fl+400h)[edi*4]
mov	edi, edx
shr	edi, 18h
xor	ebp, ds:(_t_fl+800h)[edi*4]
mov	[eax+48h], ebp
xor	esi, ebp
mov	[eax+4Ch], esi
xor	ebx, esi
mov	[eax+50h], ebx
xor	ecx, ebx
mov	[eax+54h], ecx
mov	edi, [esp+18h+var_18]
xor	edi, ecx
mov	[esp+18h+var_18], edi
mov	[eax+58h], edi
xor	edx, edi
mov	[eax+5Ch], edx
xor	ebp, 8
movzx	edi, dl
xor	ebp, ds:(_t_fl+0C00h)[edi*4]
movzx	edi, dh
xor	ebp, ds:_t_fl[edi*4]
mov	edi, edx
shr	edi, 10h
and	edi, 0FFh
xor	ebp, ds:(_t_fl+400h)[edi*4]
mov	edi, edx
shr	edi, 18h
xor	ebp, ds:(_t_fl+800h)[edi*4]
mov	[eax+60h], ebp
xor	esi, ebp
mov	[eax+64h], esi
xor	ebx, esi
mov	[eax+68h], ebx
xor	ecx, ebx
mov	[eax+6Ch], ecx
mov	edi, [esp+18h+var_18]
xor	edi, ecx
mov	[esp+18h+var_18], edi
mov	[eax+70h], edi
xor	edx, edi
mov	[eax+74h], edx
xor	ebp, 10h
movzx	edi, dl
xor	ebp, ds:(_t_fl+0C00h)[edi*4]
movzx	edi, dh
xor	ebp, ds:_t_fl[edi*4]
mov	edi, edx
shr	edi, 10h
and	edi, 0FFh
xor	ebp, ds:(_t_fl+400h)[edi*4]
mov	edi, edx
shr	edi, 18h
xor	ebp, ds:(_t_fl+800h)[edi*4]
mov	[eax+78h], ebp
xor	esi, ebp
mov	[eax+7Ch], esi
xor	ebx, esi
mov	[eax+80h], ebx
xor	ecx, ebx
mov	[eax+84h], ecx
mov	edi, [esp+18h+var_18]
xor	edi, ecx
mov	[esp+18h+var_18], edi
mov	[eax+88h], edi
xor	edx, edi
mov	[eax+8Ch], edx
xor	ebp, 20h
movzx	edi, dl
xor	ebp, ds:(_t_fl+0C00h)[edi*4]
movzx	edi, dh
xor	ebp, ds:_t_fl[edi*4]
mov	edi, edx
shr	edi, 10h
and	edi, 0FFh
xor	ebp, ds:(_t_fl+400h)[edi*4]
mov	edi, edx
shr	edi, 18h
xor	ebp, ds:(_t_fl+800h)[edi*4]
mov	[eax+90h], ebp
xor	esi, ebp
mov	[eax+94h], esi
xor	ebx, esi
mov	[eax+98h], ebx
xor	ecx, ebx
mov	[eax+9Ch], ecx
mov	edi, [esp+18h+var_18]
xor	edi, ecx
mov	[esp+18h+var_18], edi
mov	[eax+0A0h], edi
xor	edx, edi
mov	[eax+0A4h], edx
xor	ebp, 40h
movzx	edi, dl
xor	ebp, ds:(_t_fl+0C00h)[edi*4]
movzx	edi, dh
xor	ebp, ds:_t_fl[edi*4]
mov	edi, edx
shr	edi, 10h
and	edi, 0FFh
xor	ebp, ds:(_t_fl+400h)[edi*4]
mov	edi, edx
shr	edi, 18h
xor	ebp, ds:(_t_fl+800h)[edi*4]
mov	[eax+0A8h], ebp
xor	esi, ebp
mov	[eax+0ACh], esi
xor	ebx, esi
mov	[eax+0B0h], ebx
xor	ecx, ebx
mov	[eax+0B4h], ecx
mov	edi, [esp+18h+var_18]
xor	edi, ecx
mov	[eax+0B8h], edi
xor	edx, edi
mov	[eax+0BCh], edx
xor	ebp, 80h
movzx	edi, dl
xor	ebp, ds:(_t_fl+0C00h)[edi*4]
movzx	edi, dh
xor	ebp, ds:_t_fl[edi*4]
mov	edi, edx
shr	edi, 10h
and	edi, 0FFh
xor	ebp, ds:(_t_fl+400h)[edi*4]
shr	edx, 18h
xor	ebp, ds:(_t_fl+800h)[edx*4]
mov	[eax+0C0h], ebp
xor	esi, ebp
mov	[eax+0C4h], esi
xor	ebx, esi
mov	[eax+0C8h], ebx
xor	ebx, ecx
mov	[eax+0CCh], ebx
mov	dword ptr [eax+0F0h], 0
mov	byte ptr [eax+0F0h], 0C0h
add	esp, 8
pop	ebx
pop	esi
pop	edi
pop	ebp
retn
align 4
public _aes_encrypt_key256
			
push	ebp
push	edi
push	esi
push	ebx
sub	esp, 14h
mov	ebp, [esp+24h+key]
mov	eax, [esp+24h+cx_0]
movzx	esi, byte ptr [ebp+3]
shl	esi, 18h
movzx	edx, byte ptr [ebp+2]
shl	edx, 10h
or	esi, edx
movzx	edx, byte ptr [ebp+0]
or	esi, edx
movzx	edx, byte ptr [ebp+1]
shl	edx, 8
or	esi, edx
mov	[eax], esi
movzx	ebx, byte ptr [ebp+7]
shl	ebx, 18h
movzx	edx, byte ptr [ebp+6]
shl	edx, 10h
or	ebx, edx
movzx	edx, byte ptr [ebp+4]
or	ebx, edx
movzx	edx, byte ptr [ebp+5]
shl	edx, 8
or	ebx, edx
mov	[eax+4], ebx
movzx	ecx, byte ptr [ebp+0Bh]
shl	ecx, 18h
movzx	edx, byte ptr [ebp+0Ah]
shl	edx, 10h
or	ecx, edx
movzx	edx, byte ptr [ebp+8]
or	ecx, edx
movzx	edx, byte ptr [ebp+9]
shl	edx, 8
or	ecx, edx
mov	[esp+24h+var_20], ecx
mov	[eax+8], ecx
movzx	ecx, byte ptr [ebp+0Fh]
shl	ecx, 18h
movzx	edx, byte ptr [ebp+0Eh]
shl	edx, 10h
or	edx, ecx
movzx	ecx, byte ptr [ebp+0Ch]
or	edx, ecx
movzx	ecx, byte ptr [ebp+0Dh]
shl	ecx, 8
or	edx, ecx
mov	[esp+24h+var_14], edx
mov	[eax+0Ch], edx
movzx	edi, byte ptr [ebp+13h]
shl	edi, 18h
movzx	edx, byte ptr [ebp+12h]
shl	edx, 10h
or	edi, edx
movzx	edx, byte ptr [ebp+10h]
or	edi, edx
movzx	edx, byte ptr [ebp+11h]
shl	edx, 8
or	edi, edx
mov	[eax+10h], edi
movzx	ecx, byte ptr [ebp+17h]
shl	ecx, 18h
movzx	edx, byte ptr [ebp+16h]
shl	edx, 10h
or	ecx, edx
movzx	edx, byte ptr [ebp+14h]
or	ecx, edx
movzx	edx, byte ptr [ebp+15h]
shl	edx, 8
or	ecx, edx
mov	[esp+24h+var_18], ecx
mov	[eax+14h], ecx
movzx	ecx, byte ptr [ebp+1Bh]
shl	ecx, 18h
movzx	edx, byte ptr [ebp+1Ah]
shl	edx, 10h
or	ecx, edx
movzx	edx, byte ptr [ebp+18h]
or	ecx, edx
movzx	edx, byte ptr [ebp+19h]
shl	edx, 8
or	ecx, edx
mov	[esp+24h+var_1C], ecx
mov	[eax+18h], ecx
movzx	ecx, byte ptr [ebp+1Fh]
shl	ecx, 18h
movzx	edx, byte ptr [ebp+1Eh]
shl	edx, 10h
or	ecx, edx
movzx	edx, byte ptr [ebp+1Ch]
or	ecx, edx
movzx	edx, byte ptr [ebp+1Dh]
shl	edx, 8
or	ecx, edx
mov	[eax+1Ch], ecx
xor	esi, 1
movzx	edx, cl
xor	esi, ds:(_t_fl+0C00h)[edx*4]
movzx	edx, ch
xor	esi, ds:_t_fl[edx*4]
mov	edx, ecx
shr	edx, 10h
movzx	edx, dl
xor	esi, ds:(_t_fl+400h)[edx*4]
mov	edx, ecx
shr	edx, 18h
xor	esi, ds:(_t_fl+800h)[edx*4]
mov	[eax+20h], esi
xor	ebx, esi
mov	[esp+24h+var_24], ebx
mov	[eax+24h], ebx
mov	edx, [esp+24h+var_20]
xor	edx, ebx
mov	[esp+24h+var_20], edx
mov	[eax+28h], edx
xor	edx, [esp+24h+var_14]
mov	[eax+2Ch], edx
movzx	ebp, dl
xor	edi, ds:_t_fl[ebp*4]
movzx	ebp, dh
xor	edi, ds:(_t_fl+400h)[ebp*4]
mov	ebp, edx
shr	ebp, 10h
mov	ebx, ebp
movzx	ebp, bl
xor	edi, ds:(_t_fl+800h)[ebp*4]
mov	ebp, edx
shr	ebp, 18h
xor	edi, ds:(_t_fl+0C00h)[ebp*4]
mov	[eax+30h], edi
mov	ebp, [esp+24h+var_18]
xor	ebp, edi
mov	[esp+24h+var_18], ebp
mov	[eax+34h], ebp
xor	ebp, [esp+24h+var_1C]
mov	[esp+24h+var_1C], ebp
mov	[eax+38h], ebp
xor	ecx, ebp
mov	[eax+3Ch], ecx
xor	esi, 2
movzx	ebp, cl
xor	esi, ds:(_t_fl+0C00h)[ebp*4]
movzx	ebp, ch
xor	esi, ds:_t_fl[ebp*4]
mov	ebp, ecx
shr	ebp, 10h
mov	ebx, ebp
movzx	ebp, bl
xor	esi, ds:(_t_fl+400h)[ebp*4]
mov	ebp, ecx
shr	ebp, 18h
xor	esi, ds:(_t_fl+800h)[ebp*4]
mov	[eax+40h], esi
mov	ebp, [esp+24h+var_24]
xor	ebp, esi
mov	[esp+24h+var_14], ebp
mov	[eax+44h], ebp
mov	ebx, [esp+24h+var_20]
xor	ebx, ebp
mov	[esp+24h+var_20], ebx
mov	[eax+48h], ebx
xor	edx, ebx
mov	[eax+4Ch], edx
movzx	ebp, dl
xor	edi, ds:_t_fl[ebp*4]
movzx	ebp, dh
xor	edi, ds:(_t_fl+400h)[ebp*4]
mov	ebp, edx
shr	ebp, 10h
mov	ebx, ebp
movzx	ebp, bl
xor	edi, ds:(_t_fl+800h)[ebp*4]
mov	ebp, edx
shr	ebp, 18h
xor	edi, ds:(_t_fl+0C00h)[ebp*4]
mov	[eax+50h], edi
mov	ebp, [esp+24h+var_18]
xor	ebp, edi
mov	[esp+24h+var_18], ebp
mov	[eax+54h], ebp
xor	ebp, [esp+24h+var_1C]
mov	[esp+24h+var_1C], ebp
mov	[eax+58h], ebp
xor	ecx, ebp
mov	[eax+5Ch], ecx
xor	esi, 4
movzx	ebp, cl
xor	esi, ds:(_t_fl+0C00h)[ebp*4]
movzx	ebp, ch
xor	esi, ds:_t_fl[ebp*4]
mov	ebp, ecx
shr	ebp, 10h
mov	ebx, ebp
movzx	ebp, bl
xor	esi, ds:(_t_fl+400h)[ebp*4]
mov	ebp, ecx
shr	ebp, 18h
xor	esi, ds:(_t_fl+800h)[ebp*4]
mov	[eax+60h], esi
mov	ebp, [esp+24h+var_14]
xor	ebp, esi
mov	[esp+24h+var_14], ebp
mov	[eax+64h], ebp
mov	ebx, [esp+24h+var_20]
xor	ebx, ebp
mov	[esp+24h+var_20], ebx
mov	[eax+68h], ebx
xor	edx, ebx
mov	[eax+6Ch], edx
movzx	ebp, dl
xor	edi, ds:_t_fl[ebp*4]
movzx	ebp, dh
xor	edi, ds:(_t_fl+400h)[ebp*4]
mov	ebp, edx
shr	ebp, 10h
mov	ebx, ebp
movzx	ebp, bl
xor	edi, ds:(_t_fl+800h)[ebp*4]
mov	ebp, edx
shr	ebp, 18h
xor	edi, ds:(_t_fl+0C00h)[ebp*4]
mov	[eax+70h], edi
mov	ebp, [esp+24h+var_18]
xor	ebp, edi
mov	[esp+24h+var_18], ebp
mov	[eax+74h], ebp
xor	ebp, [esp+24h+var_1C]
mov	[esp+24h+var_1C], ebp
mov	[eax+78h], ebp
xor	ecx, ebp
mov	[eax+7Ch], ecx
xor	esi, 8
movzx	ebp, cl
xor	esi, ds:(_t_fl+0C00h)[ebp*4]
movzx	ebp, ch
xor	esi, ds:_t_fl[ebp*4]
mov	ebp, ecx
shr	ebp, 10h
mov	ebx, ebp
movzx	ebp, bl
xor	esi, ds:(_t_fl+400h)[ebp*4]
mov	ebp, ecx
shr	ebp, 18h
xor	esi, ds:(_t_fl+800h)[ebp*4]
mov	[eax+80h], esi
mov	ebp, [esp+24h+var_14]
xor	ebp, esi
mov	[esp+24h+var_14], ebp
mov	[eax+84h], ebp
mov	ebx, [esp+24h+var_20]
xor	ebx, ebp
mov	[esp+24h+var_20], ebx
mov	[eax+88h], ebx
xor	edx, ebx
mov	[eax+8Ch], edx
movzx	ebp, dl
xor	edi, ds:_t_fl[ebp*4]
movzx	ebp, dh
xor	edi, ds:(_t_fl+400h)[ebp*4]
mov	ebp, edx
shr	ebp, 10h
mov	ebx, ebp
movzx	ebp, bl
xor	edi, ds:(_t_fl+800h)[ebp*4]
mov	ebp, edx
shr	ebp, 18h
xor	edi, ds:(_t_fl+0C00h)[ebp*4]
mov	[eax+90h], edi
mov	ebp, [esp+24h+var_18]
xor	ebp, edi
mov	[esp+24h+var_18], ebp
mov	[eax+94h], ebp
xor	ebp, [esp+24h+var_1C]
mov	[esp+24h+var_1C], ebp
mov	[eax+98h], ebp
xor	ecx, ebp
mov	[eax+9Ch], ecx
xor	esi, 10h
movzx	ebp, cl
xor	esi, ds:(_t_fl+0C00h)[ebp*4]
movzx	ebp, ch
xor	esi, ds:_t_fl[ebp*4]
mov	ebp, ecx
shr	ebp, 10h
mov	ebx, ebp
movzx	ebp, bl
xor	esi, ds:(_t_fl+400h)[ebp*4]
mov	ebp, ecx
shr	ebp, 18h
xor	esi, ds:(_t_fl+800h)[ebp*4]
mov	[eax+0A0h], esi
mov	ebp, [esp+24h+var_14]
xor	ebp, esi
mov	[esp+24h+var_14], ebp
mov	[eax+0A4h], ebp
mov	ebx, [esp+24h+var_20]
xor	ebx, ebp
mov	[esp+24h+var_20], ebx
mov	[eax+0A8h], ebx
xor	edx, ebx
mov	[eax+0ACh], edx
movzx	ebp, dl
xor	edi, ds:_t_fl[ebp*4]
movzx	ebp, dh
xor	edi, ds:(_t_fl+400h)[ebp*4]
mov	ebp, edx
shr	ebp, 10h
mov	ebx, ebp
movzx	ebp, bl
xor	edi, ds:(_t_fl+800h)[ebp*4]
mov	ebp, edx
shr	ebp, 18h
xor	edi, ds:(_t_fl+0C00h)[ebp*4]
mov	[eax+0B0h], edi
mov	ebp, [esp+24h+var_18]
xor	ebp, edi
mov	[esp+24h+var_18], ebp
mov	[eax+0B4h], ebp
xor	ebp, [esp+24h+var_1C]
mov	[esp+24h+var_1C], ebp
mov	[eax+0B8h], ebp
xor	ecx, ebp
mov	[eax+0BCh], ecx
xor	esi, 20h
movzx	ebp, cl
xor	esi, ds:(_t_fl+0C00h)[ebp*4]
movzx	ebp, ch
xor	esi, ds:_t_fl[ebp*4]
mov	ebp, ecx
shr	ebp, 10h
mov	ebx, ebp
movzx	ebp, bl
xor	esi, ds:(_t_fl+400h)[ebp*4]
mov	ebp, ecx
shr	ebp, 18h
xor	esi, ds:(_t_fl+800h)[ebp*4]
mov	[eax+0C0h], esi
mov	ebp, [esp+24h+var_14]
xor	ebp, esi
mov	[esp+24h+var_14], ebp
mov	[eax+0C4h], ebp
mov	ebx, [esp+24h+var_20]
xor	ebx, ebp
mov	[esp+24h+var_20], ebx
mov	[eax+0C8h], ebx
xor	edx, ebx
mov	[eax+0CCh], edx
movzx	ebp, dl
xor	edi, ds:_t_fl[ebp*4]
movzx	ebp, dh
xor	edi, ds:(_t_fl+400h)[ebp*4]
mov	ebp, edx
shr	ebp, 10h
mov	ebx, ebp
movzx	ebp, bl
xor	edi, ds:(_t_fl+800h)[ebp*4]
mov	ebp, edx
shr	ebp, 18h
xor	edi, ds:(_t_fl+0C00h)[ebp*4]
mov	[eax+0D0h], edi
xor	edi, [esp+24h+var_18]
mov	[eax+0D4h], edi
xor	edi, [esp+24h+var_1C]
mov	[eax+0D8h], edi
xor	ecx, edi
mov	[eax+0DCh], ecx
xor	esi, 40h
movzx	edi, cl
xor	esi, ds:(_t_fl+0C00h)[edi*4]
movzx	edi, ch
xor	esi, ds:_t_fl[edi*4]
mov	edi, ecx
shr	edi, 10h
and	edi, 0FFh
xor	esi, ds:(_t_fl+400h)[edi*4]
shr	ecx, 18h
xor	esi, ds:(_t_fl+800h)[ecx*4]
mov	[eax+0E0h], esi
mov	ebx, [esp+24h+var_14]
xor	ebx, esi
mov	[eax+0E4h], ebx
xor	ebx, [esp+24h+var_20]
mov	[eax+0E8h], ebx
xor	edx, ebx
mov	[eax+0ECh], edx
mov	dword ptr [eax+0F0h], 0
mov	byte ptr [eax+0F0h], 0E0h
add	esp, 14h
pop	ebx
pop	esi
pop	edi
pop	ebp
retn
public _aes_encrypt_key
mov	edx, [esp+key]
mov	eax, [esp+key_len]
mov	ecx, [esp+arg_8]
cmp	eax, 20h
jz	short loc_641E7198
jle	short loc_641E7180
cmp	key_len_0, 0C0h
jz	short loc_641E718A
cmp	key_len_0, 100h
jz	short loc_641E7198
add	key_len_0, 0FFFFFF80h
jz	short loc_641E71A8
retn
align 10h
cmp	key_len_0, 10h
jz	short loc_641E71A8
cmp	key_len_0, 18h
jnz	short locret_641E717E
mov	[esp+key_len], cx_0
mov	[esp+key], key_0
jmp	_aes_encrypt_key192
align 4
			
mov	[esp+key_len], cx_0
mov	[esp+key], key_0
jmp	_aes_encrypt_key256
align 4
			
mov	[esp+key_len], cx_0
mov	[esp+key], key_0
jmp	_aes_encrypt_key128
align 4
public _aes_decrypt_key128
			
push	ebp
push	edi
push	esi
push	ebx
sub	esp, 18h
mov	esi, [esp+28h+key]
mov	eax, [esp+28h+cx_0]
movzx	edi, byte ptr [esi+3]
shl	edi, 18h
movzx	edx, byte ptr [esi+2]
shl	edx, 10h
or	edi, edx
movzx	edx, byte ptr [esi]
or	edi, edx
movzx	edx, byte ptr [esi+1]
shl	edx, 8
or	edi, edx
mov	[eax+0A0h], edi
movzx	ebx, byte ptr [esi+7]
shl	ebx, 18h
movzx	edx, byte ptr [esi+6]
shl	edx, 10h
or	ebx, edx
movzx	edx, byte ptr [esi+4]
or	ebx, edx
movzx	edx, byte ptr [esi+5]
shl	edx, 8
or	ebx, edx
mov	[eax+0A4h], ebx
movzx	ebp, byte ptr [esi+0Bh]
shl	ebp, 18h
movzx	edx, byte ptr [esi+0Ah]
shl	edx, 10h
or	ebp, edx
movzx	edx, byte ptr [esi+8]
or	ebp, edx
movzx	edx, byte ptr [esi+9]
shl	edx, 8
or	ebp, edx
mov	[esp+28h+var_24], ebp
mov	[eax+0A8h], ebp
movzx	ecx, byte ptr [esi+0Fh]
shl	ecx, 18h
movzx	edx, byte ptr [esi+0Eh]
shl	edx, 10h
or	edx, ecx
movzx	ecx, byte ptr [esi+0Ch]
or	edx, ecx
movzx	ecx, byte ptr [esi+0Dh]
shl	ecx, 8
or	edx, ecx
mov	[eax+0ACh], edx
movzx	ecx, dl
mov	ecx, ds:(_t_fl+0C00h)[ecx*4]
xor	ecx, 1
movzx	esi, dh
xor	ecx, ds:_t_fl[esi*4]
mov	esi, edx
shr	esi, 10h
and	esi, 0FFh
xor	ecx, ds:(_t_fl+400h)[esi*4]
mov	esi, edx
shr	esi, 18h
xor	ecx, ds:(_t_fl+800h)[esi*4]
mov	esi, ebx
xor	esi, edi
xor	esi, ebp
xor	esi, edx
xor	esi, ecx
mov	[esp+28h+var_14], esi
xor	ecx, edi
movzx	esi, ch
mov	edi, ecx
shr	edi, 10h
and	edi, 0FFh
mov	esi, ds:(_t_im+400h)[esi*4]
xor	esi, ds:(_t_im+800h)[edi*4]
movzx	edi, cl
xor	esi, ds:_t_im[edi*4]
mov	edi, ecx
shr	edi, 18h
xor	esi, ds:(_t_im+0C00h)[edi*4]
mov	[eax+90h], esi
xor	ecx, ebx
movzx	ebp, ch
mov	edi, ecx
shr	edi, 10h
and	edi, 0FFh
mov	ebp, ds:(_t_im+400h)[ebp*4]
xor	ebp, ds:(_t_im+800h)[edi*4]
movzx	edi, cl
xor	ebp, ds:_t_im[edi*4]
mov	edi, ecx
shr	edi, 18h
xor	ebp, ds:(_t_im+0C00h)[edi*4]
mov	[esp+28h+var_1C], ebp
mov	[eax+94h], ebp
xor	ecx, [esp+28h+var_24]
movzx	ebp, ch
mov	edi, ecx
shr	edi, 10h
and	edi, 0FFh
mov	ebp, ds:(_t_im+400h)[ebp*4]
xor	ebp, ds:(_t_im+800h)[edi*4]
movzx	edi, cl
xor	ebp, ds:_t_im[edi*4]
mov	edi, ecx
shr	edi, 18h
xor	ebp, ds:(_t_im+0C00h)[edi*4]
mov	[esp+28h+var_20], ebp
mov	[eax+98h], ebp
xor	ecx, edx
movzx	ebp, ch
mov	edi, ecx
shr	edi, 10h
and	edi, 0FFh
mov	ebp, ds:(_t_im+400h)[ebp*4]
xor	ebp, ds:(_t_im+800h)[edi*4]
movzx	edi, cl
xor	ebp, ds:_t_im[edi*4]
shr	ecx, 18h
xor	ebp, ds:(_t_im+0C00h)[ecx*4]
mov	[esp+28h+var_28], ebp
mov	[eax+9Ch], ebp
movzx	edi, byte ptr [esp+28h+var_14]
mov	ebp, ds:(_t_fl+0C00h)[edi*4]
xor	ebp, 2
mov	ecx, [esp+28h+var_14]
movzx	edi, ch
xor	ebp, ds:_t_fl[edi*4]
mov	edi, ecx
shr	edi, 10h
and	edi, 0FFh
xor	ebp, ds:(_t_fl+400h)[edi*4]
mov	edi, ecx
shr	edi, 18h
xor	ebp, ds:(_t_fl+800h)[edi*4]
xor	ebx, edx
xor	ebx, ebp
mov	[esp+28h+var_18], ebx
mov	ecx, ebp
movzx	ebx, cl
xor	esi, ds:_t_im[ebx*4]
mov	ecx, ebp
movzx	ebx, ch
mov	edi, ds:(_t_im+400h)[ebx*4]
xor	edi, esi
mov	ebx, ebp
shr	ebx, 10h
movzx	ebx, bl
xor	edi, ds:(_t_im+800h)[ebx*4]
shr	ebp, 18h
xor	edi, ds:(_t_im+0C00h)[ebp*4]
mov	[eax+80h], edi
mov	esi, [esp+28h+var_1C]
xor	esi, edi
mov	[eax+84h], esi
mov	ebx, [esp+28h+var_20]
xor	ebx, esi
mov	[esp+28h+var_1C], ebx
mov	[eax+88h], ebx
mov	ecx, [esp+28h+var_28]
xor	ecx, ebx
mov	[esp+28h+var_20], ecx
mov	[eax+8Ch], ecx
movzx	ecx, byte ptr [esp+28h+var_18]
mov	ecx, ds:(_t_fl+0C00h)[ecx*4]
mov	ebx, ecx
xor	ebx, 4
mov	ecx, [esp+28h+var_18]
movzx	ebp, ch
xor	ebx, ds:_t_fl[ebp*4]
mov	ebp, ecx
shr	ebp, 10h
mov	ecx, ebp
movzx	ebp, cl
mov	ecx, ds:(_t_fl+400h)[ebp*4]
xor	ecx, ebx
mov	ebp, [esp+28h+var_18]
shr	ebp, 18h
xor	ecx, ds:(_t_fl+800h)[ebp*4]
mov	ebp, [esp+28h+var_24]
xor	ebp, edx
xor	ebp, ecx
mov	[esp+28h+var_24], ebp
movzx	ebp, cl
xor	edi, ds:_t_im[ebp*4]
movzx	ebp, ch
xor	edi, ds:(_t_im+400h)[ebp*4]
mov	ebp, ecx
shr	ebp, 10h
mov	ebx, ebp
movzx	ebp, bl
xor	edi, ds:(_t_im+800h)[ebp*4]
shr	ecx, 18h
xor	edi, ds:(_t_im+0C00h)[ecx*4]
mov	[eax+70h], edi
xor	esi, edi
mov	[eax+74h], esi
mov	ebx, [esp+28h+var_1C]
xor	ebx, esi
mov	[eax+78h], ebx
mov	ecx, [esp+28h+var_20]
xor	ecx, ebx
mov	[esp+28h+var_20], ecx
mov	[eax+7Ch], ecx
movzx	ecx, byte ptr [esp+28h+var_24]
mov	ebp, ds:(_t_fl+0C00h)[ecx*4]
xor	ebp, 8
mov	ecx, [esp+28h+var_24]
movzx	ecx, ch
xor	ebp, ds:_t_fl[ecx*4]
mov	ecx, [esp+28h+var_24]
shr	ecx, 10h
movzx	ecx, cl
xor	ebp, ds:(_t_fl+400h)[ecx*4]
mov	ecx, [esp+28h+var_24]
shr	ecx, 18h
xor	ebp, ds:(_t_fl+800h)[ecx*4]
mov	ecx, ebp
xor	edx, ebp
mov	[esp+28h+var_1C], edx
movzx	edx, cl
xor	edi, ds:_t_im[edx*4]
movzx	edx, ch
xor	edi, ds:(_t_im+400h)[edx*4]
mov	edx, ebp
shr	edx, 10h
movzx	edx, dl
xor	edi, ds:(_t_im+800h)[edx*4]
shr	ecx, 18h
xor	edi, ds:(_t_im+0C00h)[ecx*4]
mov	[eax+60h], edi
xor	esi, edi
mov	[eax+64h], esi
xor	ebx, esi
mov	[eax+68h], ebx
mov	edx, [esp+28h+var_20]
xor	edx, ebx
mov	[esp+28h+var_20], edx
mov	[eax+6Ch], edx
movzx	edx, byte ptr [esp+28h+var_1C]
mov	edx, ds:(_t_fl+0C00h)[edx*4]
mov	ecx, edx
xor	ecx, 10h
mov	edx, [esp+28h+var_1C]
movzx	ebp, dh
mov	edx, ds:_t_fl[ebp*4]
xor	edx, ecx
mov	ebp, [esp+28h+var_1C]
shr	ebp, 10h
mov	ecx, ebp
movzx	ebp, cl
xor	edx, ds:(_t_fl+400h)[ebp*4]
mov	ebp, [esp+28h+var_1C]
shr	ebp, 18h
xor	edx, ds:(_t_fl+800h)[ebp*4]
mov	ecx, [esp+28h+var_14]
xor	ecx, edx
mov	[esp+28h+var_14], ecx
movzx	ebp, dl
xor	edi, ds:_t_im[ebp*4]
movzx	ebp, dh
xor	edi, ds:(_t_im+400h)[ebp*4]
mov	ebp, edx
shr	ebp, 10h
mov	ecx, ebp
movzx	ebp, cl
xor	edi, ds:(_t_im+800h)[ebp*4]
shr	edx, 18h
xor	edi, ds:(_t_im+0C00h)[edx*4]
mov	[eax+50h], edi
xor	esi, edi
mov	[eax+54h], esi
xor	ebx, esi
mov	[eax+58h], ebx
mov	edx, [esp+28h+var_20]
xor	edx, ebx
mov	[esp+28h+var_20], edx
mov	[eax+5Ch], edx
movzx	edx, byte ptr [esp+28h+var_14]
mov	edx, ds:(_t_fl+0C00h)[edx*4]
mov	ecx, edx
xor	ecx, 20h
mov	edx, [esp+28h+var_14]
movzx	ebp, dh
mov	edx, ds:_t_fl[ebp*4]
xor	edx, ecx
mov	ebp, [esp+28h+var_14]
shr	ebp, 10h
mov	ecx, ebp
movzx	ebp, cl
xor	edx, ds:(_t_fl+400h)[ebp*4]
mov	ebp, [esp+28h+var_14]
shr	ebp, 18h
xor	edx, ds:(_t_fl+800h)[ebp*4]
mov	ecx, [esp+28h+var_18]
xor	ecx, edx
mov	[esp+28h+var_18], ecx
movzx	ebp, dl
xor	edi, ds:_t_im[ebp*4]
movzx	ebp, dh
xor	edi, ds:(_t_im+400h)[ebp*4]
mov	ebp, edx
shr	ebp, 10h
mov	ecx, ebp
movzx	ebp, cl
xor	edi, ds:(_t_im+800h)[ebp*4]
shr	edx, 18h
xor	edi, ds:(_t_im+0C00h)[edx*4]
mov	[eax+40h], edi
xor	esi, edi
mov	[eax+44h], esi
xor	ebx, esi
mov	[eax+48h], ebx
mov	edx, [esp+28h+var_20]
xor	edx, ebx
mov	[esp+28h+var_20], edx
mov	[eax+4Ch], edx
movzx	edx, byte ptr [esp+28h+var_18]
mov	edx, ds:(_t_fl+0C00h)[edx*4]
mov	ecx, edx
xor	ecx, 40h
mov	edx, [esp+28h+var_18]
movzx	ebp, dh
mov	edx, ds:_t_fl[ebp*4]
xor	edx, ecx
mov	ebp, [esp+28h+var_18]
shr	ebp, 10h
mov	ecx, ebp
movzx	ebp, cl
xor	edx, ds:(_t_fl+400h)[ebp*4]
mov	ebp, [esp+28h+var_18]
shr	ebp, 18h
xor	edx, ds:(_t_fl+800h)[ebp*4]
mov	ecx, [esp+28h+var_24]
xor	ecx, edx
mov	[esp+28h+var_24], ecx
movzx	ebp, dl
xor	edi, ds:_t_im[ebp*4]
movzx	ebp, dh
xor	edi, ds:(_t_im+400h)[ebp*4]
mov	ebp, edx
shr	ebp, 10h
mov	ecx, ebp
movzx	ebp, cl
xor	edi, ds:(_t_im+800h)[ebp*4]
shr	edx, 18h
xor	edi, ds:(_t_im+0C00h)[edx*4]
mov	[eax+30h], edi
xor	esi, edi
mov	[eax+34h], esi
xor	ebx, esi
mov	[esp+28h+var_28], ebx
mov	[eax+38h], ebx
mov	edx, [esp+28h+var_20]
xor	edx, ebx
mov	[esp+28h+var_20], edx
mov	[eax+3Ch], edx
movzx	edx, byte ptr [esp+28h+var_24]
mov	ecx, ds:(_t_fl+0C00h)[edx*4]
mov	ebx, ecx
xor	bl, 80h
mov	ecx, [esp+28h+var_24]
movzx	edx, ch
mov	ecx, ds:_t_fl[edx*4]
xor	ecx, ebx
mov	edx, [esp+28h+var_24]
shr	edx, 10h
movzx	edx, dl
xor	ecx, ds:(_t_fl+400h)[edx*4]
mov	edx, [esp+28h+var_24]
shr	edx, 18h
xor	ecx, ds:(_t_fl+800h)[edx*4]
mov	edx, [esp+28h+var_1C]
xor	edx, ecx
movzx	ebp, cl
xor	edi, ds:_t_im[ebp*4]
movzx	ebp, ch
xor	edi, ds:(_t_im+400h)[ebp*4]
mov	ebp, ecx
shr	ebp, 10h
mov	ebx, ebp
movzx	ebp, bl
xor	edi, ds:(_t_im+800h)[ebp*4]
shr	ecx, 18h
xor	edi, ds:(_t_im+0C00h)[ecx*4]
mov	[eax+20h], edi
xor	esi, edi
mov	[eax+24h], esi
mov	ecx, [esp+28h+var_28]
xor	ecx, esi
mov	[esp+28h+var_1C], ecx
mov	[eax+28h], ecx
xor	ecx, [esp+28h+var_20]
mov	[esp+28h+var_20], ecx
mov	[eax+2Ch], ecx
movzx	ecx, dl
mov	ebx, ds:(_t_fl+0C00h)[ecx*4]
xor	ebx, 1Bh
movzx	ecx, dh
xor	ebx, ds:_t_fl[ecx*4]
mov	ecx, edx
shr	ecx, 10h
movzx	ecx, cl
xor	ebx, ds:(_t_fl+400h)[ecx*4]
mov	ecx, edx
shr	ecx, 18h
xor	ebx, ds:(_t_fl+800h)[ecx*4]
mov	ecx, [esp+28h+var_14]
xor	ecx, ebx
mov	[esp+28h+var_14], ecx
movzx	ebp, bl
xor	edi, ds:_t_im[ebp*4]
movzx	ebp, bh
xor	edi, ds:(_t_im+400h)[ebp*4]
mov	ebp, ebx
shr	ebp, 10h
mov	ecx, ebp
movzx	ebp, cl
xor	edi, ds:(_t_im+800h)[ebp*4]
shr	ebx, 18h
xor	edi, ds:(_t_im+0C00h)[ebx*4]
mov	[eax+10h], edi
xor	edi, esi
mov	[eax+14h], edi
xor	edi, [esp+28h+var_1C]
mov	[eax+18h], edi
xor	edi, [esp+28h+var_20]
mov	[eax+1Ch], edi
mov	ebx, [esp+28h+var_18]
xor	ebx, 36h
movzx	esi, byte ptr [esp+28h+var_14]
xor	ebx, ds:(_t_fl+0C00h)[esi*4]
mov	ecx, [esp+28h+var_14]
movzx	esi, ch
xor	ebx, ds:_t_fl[esi*4]
mov	esi, ecx
shr	esi, 10h
and	esi, 0FFh
xor	ebx, ds:(_t_fl+400h)[esi*4]
mov	esi, ecx
shr	esi, 18h
xor	ebx, ds:(_t_fl+800h)[esi*4]
xor	ecx, ebx
mov	ebp, [esp+28h+var_24]
xor	ebp, edx
xor	ebp, ecx
mov	[eax], ebp
xor	edx, ebx
mov	[eax+4], edx
mov	[eax+8], ecx
mov	[eax+0Ch], ebx
mov	dword ptr [eax+0F0h], 0
mov	byte ptr [eax+0F0h], 0A0h
add	esp, 18h
pop	ebx
pop	esi
pop	edi
pop	ebp
retn
align 4
public _aes_decrypt_key192
			
push	ebp
push	edi
push	esi
push	ebx
sub	esp, 30h
mov	edi, [esp+40h+key]
mov	eax, [esp+40h+cx_0]
movzx	ebx, byte ptr [edi+3]
shl	ebx, 18h
movzx	edx, byte ptr [edi+2]
shl	edx, 10h
or	ebx, edx
movzx	edx, byte ptr [edi]
or	ebx, edx
movzx	edx, byte ptr [edi+1]
shl	edx, 8
or	ebx, edx
mov	[esp+40h+var_34], ebx
mov	[eax+0C0h], ebx
movzx	ecx, byte ptr [edi+7]
shl	ecx, 18h
movzx	edx, byte ptr [edi+6]
shl	edx, 10h
or	ecx, edx
movzx	edx, byte ptr [edi+4]
or	ecx, edx
movzx	edx, byte ptr [edi+5]
shl	edx, 8
or	ecx, edx
mov	[esp+40h+var_28], ecx
mov	[eax+0C4h], ecx
movzx	ecx, byte ptr [edi+0Bh]
shl	ecx, 18h
movzx	edx, byte ptr [edi+0Ah]
shl	edx, 10h
or	ecx, edx
movzx	edx, byte ptr [edi+8]
or	ecx, edx
movzx	edx, byte ptr [edi+9]
shl	edx, 8
or	ecx, edx
mov	[esp+40h+var_2C], ecx
mov	[eax+0C8h], ecx
movzx	ecx, byte ptr [edi+0Fh]
shl	ecx, 18h
movzx	edx, byte ptr [edi+0Eh]
shl	edx, 10h
or	ecx, edx
movzx	edx, byte ptr [edi+0Ch]
or	ecx, edx
movzx	edx, byte ptr [edi+0Dh]
shl	edx, 8
or	ecx, edx
mov	[esp+40h+var_30], ecx
mov	[eax+0CCh], ecx
movzx	ecx, byte ptr [edi+13h]
shl	ecx, 18h
movzx	edx, byte ptr [edi+12h]
shl	edx, 10h
or	edx, ecx
movzx	ecx, byte ptr [edi+10h]
or	edx, ecx
movzx	ecx, byte ptr [edi+11h]
shl	ecx, 8
or	edx, ecx
mov	[esp+40h+var_24], edx
movzx	ebx, dh
mov	ecx, edx
shr	ecx, 10h
movzx	ecx, cl
mov	ebx, ds:(_t_im+400h)[ebx*4]
xor	ebx, ds:(_t_im+800h)[ecx*4]
movzx	ecx, dl
xor	ebx, ds:_t_im[ecx*4]
mov	ecx, edx
shr	ecx, 18h
xor	ebx, ds:(_t_im+0C00h)[ecx*4]
mov	[eax+0B0h], ebx
movzx	esi, byte ptr [edi+17h]
shl	esi, 18h
movzx	ecx, byte ptr [edi+16h]
shl	ecx, 10h
or	esi, ecx
movzx	ecx, byte ptr [edi+14h]
or	esi, ecx
movzx	ecx, byte ptr [edi+15h]
shl	ecx, 8
or	esi, ecx
mov	edx, esi
movzx	ebx, dl
mov	ecx, esi
movzx	ebp, ch
mov	edi, esi
shr	edi, 10h
and	edi, 0FFh
mov	edx, esi
shr	edx, 18h
mov	ecx, ds:(_t_im+400h)[ebp*4]
xor	ecx, ds:(_t_im+800h)[edi*4]
xor	ecx, ds:_t_im[ebx*4]
xor	ecx, ds:(_t_im+0C00h)[edx*4]
mov	[eax+0B4h], ecx
mov	ecx, [esp+40h+var_34]
xor	ecx, 1
mov	ebx, ds:(_t_fl+0C00h)[ebx*4]
xor	ebx, ecx
xor	ebx, ds:_t_fl[ebp*4]
xor	ebx, ds:(_t_fl+400h)[edi*4]
xor	ebx, ds:(_t_fl+800h)[edx*4]
movzx	edi, bh
mov	ecx, ebx
shr	ecx, 10h
movzx	ecx, cl
mov	edi, ds:(_t_im+400h)[edi*4]
xor	edi, ds:(_t_im+800h)[ecx*4]
movzx	ecx, bl
xor	edi, ds:_t_im[ecx*4]
mov	ecx, ebx
shr	ecx, 18h
xor	edi, ds:(_t_im+0C00h)[ecx*4]
mov	[esp+40h+var_1C], edi
mov	[eax+0B8h], edi
mov	edi, [esp+40h+var_28]
xor	edi, ebx
mov	[esp+40h+var_40], edi
mov	edx, edi
movzx	ebp, dh
shr	edi, 10h
and	edi, 0FFh
mov	ebp, ds:(_t_im+400h)[ebp*4]
xor	ebp, ds:(_t_im+800h)[edi*4]
movzx	edi, dl
xor	ebp, ds:_t_im[edi*4]
mov	edi, edx
shr	edi, 18h
xor	ebp, ds:(_t_im+0C00h)[edi*4]
mov	[esp+40h+var_14], ebp
mov	[eax+0BCh], ebp
mov	ecx, [esp+40h+var_2C]
xor	ecx, edx
mov	[esp+40h+var_2C], ecx
movzx	edi, ch
mov	ebp, ecx
shr	ebp, 10h
mov	edx, ebp
movzx	ebp, dl
mov	edi, ds:(_t_im+400h)[edi*4]
xor	edi, ds:(_t_im+800h)[ebp*4]
movzx	ebp, cl
xor	edi, ds:_t_im[ebp*4]
mov	ebp, ecx
shr	ebp, 18h
xor	edi, ds:(_t_im+0C00h)[ebp*4]
mov	[esp+40h+var_18], edi
mov	[eax+0A0h], edi
xor	ecx, [esp+40h+var_30]
mov	[esp+40h+var_30], ecx
movzx	ebp, ch
mov	edi, ecx
shr	edi, 10h
and	edi, 0FFh
mov	ebp, ds:(_t_im+400h)[ebp*4]
xor	ebp, ds:(_t_im+800h)[edi*4]
movzx	edi, cl
xor	ebp, ds:_t_im[edi*4]
mov	edi, ecx
shr	edi, 18h
xor	ebp, ds:(_t_im+0C00h)[edi*4]
mov	[esp+40h+var_38], ebp
mov	[eax+0A4h], ebp
mov	edx, [esp+40h+var_24]
xor	edx, ecx
movzx	ebp, dh
mov	edi, edx
shr	edi, 10h
and	edi, 0FFh
mov	ebp, ds:(_t_im+400h)[ebp*4]
xor	ebp, ds:(_t_im+800h)[edi*4]
movzx	edi, dl
xor	ebp, ds:_t_im[edi*4]
mov	edi, edx
shr	edi, 18h
xor	ebp, ds:(_t_im+0C00h)[edi*4]
mov	[esp+40h+var_28], ebp
mov	[eax+0A8h], ebp
xor	esi, edx
mov	ecx, esi
movzx	ecx, cl
mov	[esp+40h+var_3C], ecx
mov	ecx, esi
movzx	edi, ch
mov	ebp, esi
shr	ebp, 10h
mov	ecx, ebp
movzx	ebp, cl
mov	[esp+40h+var_20], ebp
mov	ebp, esi
shr	ebp, 18h
mov	[esp+40h+var_24], ebp
mov	ebp, ds:(_t_im+400h)[edi*4]
mov	ecx, [esp+40h+var_20]
xor	ebp, ds:(_t_im+800h)[ecx*4]
mov	ecx, [esp+40h+var_3C]
xor	ebp, ds:_t_im[ecx*4]
mov	ecx, [esp+40h+var_24]
xor	ebp, ds:(_t_im+0C00h)[ecx*4]
mov	[esp+40h+var_34], ebp
mov	[eax+0ACh], ebp
mov	ecx, [esp+40h+var_3C]
mov	ebp, ds:(_t_fl+0C00h)[ecx*4]
xor	ebp, 2
xor	ebp, ds:_t_fl[edi*4]
mov	edi, ebp
mov	ebp, [esp+40h+var_20]
xor	edi, ds:(_t_fl+400h)[ebp*4]
mov	ecx, [esp+40h+var_24]
xor	edi, ds:(_t_fl+800h)[ecx*4]
xor	ebx, edi
mov	[esp+40h+var_24], ebx
mov	ecx, edi
movzx	ebx, cl
mov	ebx, ds:_t_im[ebx*4]
xor	ebx, [esp+40h+var_1C]
mov	ecx, edi
movzx	ebp, ch
xor	ebx, ds:(_t_im+400h)[ebp*4]
mov	ebp, edi
shr	ebp, 10h
mov	ecx, ebp
movzx	ebp, cl
xor	ebx, ds:(_t_im+800h)[ebp*4]
shr	edi, 18h
xor	ebx, ds:(_t_im+0C00h)[edi*4]
mov	[eax+90h], ebx
mov	edi, [esp+40h+var_40]
xor	edi, [esp+40h+var_24]
mov	[esp+40h+var_1C], edi
mov	ebp, [esp+40h+var_14]
xor	ebp, ebx
mov	[esp+40h+var_14], ebp
mov	[eax+94h], ebp
xor	edi, [esp+40h+var_2C]
mov	[esp+40h+var_2C], edi
mov	edi, [esp+40h+var_18]
xor	edi, ebp
mov	[eax+98h], edi
mov	ecx, [esp+40h+var_2C]
xor	ecx, [esp+40h+var_30]
mov	[esp+40h+var_30], ecx
mov	ebp, [esp+40h+var_38]
xor	ebp, edi
mov	[esp+40h+var_38], ebp
mov	[eax+9Ch], ebp
xor	edx, ecx
mov	[esp+40h+var_20], edx
xor	ebp, [esp+40h+var_28]
mov	[esp+40h+var_28], ebp
mov	[eax+80h], ebp
xor	edx, esi
xor	ebp, [esp+40h+var_34]
mov	[esp+40h+var_34], ebp
mov	[eax+84h], ebp
movzx	esi, dl
mov	esi, ds:(_t_fl+0C00h)[esi*4]
xor	esi, 4
movzx	ebp, dh
xor	esi, ds:_t_fl[ebp*4]
mov	ebp, edx
shr	ebp, 10h
mov	ecx, ebp
movzx	ebp, cl
xor	esi, ds:(_t_fl+400h)[ebp*4]
mov	ebp, edx
shr	ebp, 18h
xor	esi, ds:(_t_fl+800h)[ebp*4]
mov	ebp, [esp+40h+var_24]
xor	ebp, esi
mov	[esp+40h+var_24], ebp
mov	ecx, esi
movzx	ebp, cl
xor	ebx, ds:_t_im[ebp*4]
mov	ecx, esi
movzx	ebp, ch
xor	ebx, ds:(_t_im+400h)[ebp*4]
mov	ebp, esi
shr	ebp, 10h
mov	ecx, ebp
movzx	ebp, cl
xor	ebx, ds:(_t_im+800h)[ebp*4]
shr	esi, 18h
xor	ebx, ds:(_t_im+0C00h)[esi*4]
mov	[eax+88h], ebx
mov	esi, [esp+40h+var_24]
xor	esi, [esp+40h+var_1C]
mov	[esp+40h+var_1C], esi
mov	ebp, [esp+40h+var_14]
xor	ebp, ebx
mov	[esp+40h+var_18], ebp
mov	[eax+8Ch], ebp
xor	esi, [esp+40h+var_2C]
mov	[esp+40h+var_2C], esi
mov	esi, ebp
xor	esi, edi
mov	[eax+70h], esi
mov	ecx, [esp+40h+var_2C]
xor	ecx, [esp+40h+var_30]
mov	[esp+40h+var_30], ecx
mov	edi, [esp+40h+var_38]
xor	edi, esi
mov	[esp+40h+var_38], edi
mov	[eax+74h], edi
xor	ecx, [esp+40h+var_20]
mov	[esp+40h+var_20], ecx
xor	edi, [esp+40h+var_28]
mov	[esp+40h+var_28], edi
mov	[eax+78h], edi
xor	edx, ecx
xor	edi, [esp+40h+var_34]
mov	[esp+40h+var_34], edi
mov	[eax+7Ch], edi
movzx	edi, dl
mov	edi, ds:(_t_fl+0C00h)[edi*4]
xor	edi, 8
movzx	ebp, dh
xor	edi, ds:_t_fl[ebp*4]
mov	ebp, edx
shr	ebp, 10h
mov	ecx, ebp
movzx	ebp, cl
xor	edi, ds:(_t_fl+400h)[ebp*4]
mov	ebp, edx
shr	ebp, 18h
xor	edi, ds:(_t_fl+800h)[ebp*4]
mov	ebp, [esp+40h+var_24]
xor	ebp, edi
mov	[esp+40h+var_24], ebp
mov	ecx, edi
movzx	ebp, cl
xor	ebx, ds:_t_im[ebp*4]
mov	ecx, edi
movzx	ebp, ch
xor	ebx, ds:(_t_im+400h)[ebp*4]
mov	ebp, edi
shr	ebp, 10h
mov	ecx, ebp
movzx	ebp, cl
xor	ebx, ds:(_t_im+800h)[ebp*4]
shr	edi, 18h
xor	ebx, ds:(_t_im+0C00h)[edi*4]
mov	[eax+60h], ebx
mov	edi, [esp+40h+var_24]
xor	edi, [esp+40h+var_1C]
mov	[esp+40h+var_1C], edi
mov	ebp, [esp+40h+var_18]
xor	ebp, ebx
mov	[esp+40h+var_18], ebp
mov	[eax+64h], ebp
xor	edi, [esp+40h+var_2C]
mov	[esp+40h+var_2C], edi
xor	esi, ebp
mov	[eax+68h], esi
xor	edi, [esp+40h+var_30]
mov	[esp+40h+var_30], edi
mov	ecx, [esp+40h+var_38]
xor	ecx, esi
mov	[esp+40h+var_38], ecx
mov	[eax+6Ch], ecx
xor	edi, [esp+40h+var_20]
mov	[esp+40h+var_20], edi
xor	ecx, [esp+40h+var_28]
mov	[esp+40h+var_28], ecx
mov	[eax+50h], ecx
xor	edx, edi
xor	ecx, [esp+40h+var_34]
mov	[esp+40h+var_34], ecx
mov	[eax+54h], ecx
movzx	edi, dl
mov	ebp, ds:(_t_fl+0C00h)[edi*4]
xor	ebp, 10h
movzx	edi, dh
xor	ebp, ds:_t_fl[edi*4]
mov	edi, edx
shr	edi, 10h
and	edi, 0FFh
xor	ebp, ds:(_t_fl+400h)[edi*4]
mov	edi, edx
shr	edi, 18h
xor	ebp, ds:(_t_fl+800h)[edi*4]
mov	edi, [esp+40h+var_24]
xor	edi, ebp
mov	[esp+40h+var_24], edi
mov	ecx, ebp
movzx	edi, cl
xor	ebx, ds:_t_im[edi*4]
mov	edi, ebx
mov	ecx, ebp
movzx	ebx, ch
xor	edi, ds:(_t_im+400h)[ebx*4]
mov	ebx, ebp
shr	ebx, 10h
movzx	ebx, bl
xor	edi, ds:(_t_im+800h)[ebx*4]
shr	ebp, 18h
xor	edi, ds:(_t_im+0C00h)[ebp*4]
mov	[eax+58h], edi
mov	ebx, [esp+40h+var_24]
xor	ebx, [esp+40h+var_1C]
mov	[esp+40h+var_1C], ebx
mov	ebp, [esp+40h+var_18]
xor	ebp, edi
mov	[esp+40h+var_18], ebp
mov	[eax+5Ch], ebp
xor	ebx, [esp+40h+var_2C]
mov	[esp+40h+var_2C], ebx
xor	esi, ebp
mov	[eax+40h], esi
xor	ebx, [esp+40h+var_30]
mov	[esp+40h+var_30], ebx
mov	ecx, [esp+40h+var_38]
xor	ecx, esi
mov	[esp+40h+var_38], ecx
mov	[eax+44h], ecx
xor	ebx, [esp+40h+var_20]
mov	[esp+40h+var_20], ebx
xor	ecx, [esp+40h+var_28]
mov	[esp+40h+var_28], ecx
mov	[eax+48h], ecx
xor	edx, ebx
xor	ecx, [esp+40h+var_34]
mov	[esp+40h+var_34], ecx
mov	[eax+4Ch], ecx
movzx	ebx, dl
mov	ebx, ds:(_t_fl+0C00h)[ebx*4]
xor	ebx, 20h
movzx	ebp, dh
mov	ecx, ds:_t_fl[ebp*4]
xor	ecx, ebx
mov	ebp, edx
shr	ebp, 10h
mov	ebx, ebp
movzx	ebp, bl
mov	ebx, ds:(_t_fl+400h)[ebp*4]
xor	ebx, ecx
mov	ebp, edx
shr	ebp, 18h
xor	ebx, ds:(_t_fl+800h)[ebp*4]
mov	ebp, [esp+40h+var_24]
xor	ebp, ebx
mov	[esp+40h+var_24], ebp
movzx	ebp, bl
xor	edi, ds:_t_im[ebp*4]
movzx	ebp, bh
xor	edi, ds:(_t_im+400h)[ebp*4]
mov	ebp, ebx
shr	ebp, 10h
mov	ecx, ebp
movzx	ebp, cl
xor	edi, ds:(_t_im+800h)[ebp*4]
shr	ebx, 18h
xor	edi, ds:(_t_im+0C00h)[ebx*4]
mov	[eax+30h], edi
mov	ebx, [esp+40h+var_24]
xor	ebx, [esp+40h+var_1C]
mov	[esp+40h+var_1C], ebx
mov	ebp, [esp+40h+var_18]
xor	ebp, edi
mov	[esp+40h+var_18], ebp
mov	[eax+34h], ebp
xor	ebx, [esp+40h+var_2C]
mov	[esp+40h+var_2C], ebx
xor	esi, ebp
mov	[eax+38h], esi
xor	ebx, [esp+40h+var_30]
mov	[esp+40h+var_30], ebx
mov	ecx, [esp+40h+var_38]
xor	ecx, esi
mov	[esp+40h+var_38], ecx
mov	[eax+3Ch], ecx
xor	ebx, [esp+40h+var_20]
mov	[esp+40h+var_20], ebx
xor	ecx, [esp+40h+var_28]
mov	[esp+40h+var_28], ecx
mov	[eax+20h], ecx
xor	edx, ebx
mov	ebx, [esp+40h+var_34]
xor	ebx, ecx
mov	[esp+40h+var_34], ebx
mov	[eax+24h], ebx
movzx	ecx, dl
mov	ecx, ds:(_t_fl+0C00h)[ecx*4]
xor	ecx, 40h
movzx	ebp, dh
mov	ebx, ds:_t_fl[ebp*4]
xor	ebx, ecx
mov	ebp, edx
shr	ebp, 10h
mov	ecx, ebp
movzx	ebp, cl
mov	ecx, ds:(_t_fl+400h)[ebp*4]
xor	ecx, ebx
mov	ebp, edx
shr	ebp, 18h
xor	ecx, ds:(_t_fl+800h)[ebp*4]
mov	ebx, [esp+40h+var_24]
xor	ebx, ecx
mov	[esp+40h+var_24], ebx
movzx	ebp, cl
xor	edi, ds:_t_im[ebp*4]
movzx	ebp, ch
xor	edi, ds:(_t_im+400h)[ebp*4]
mov	ebp, ecx
shr	ebp, 10h
mov	ebx, ebp
movzx	ebp, bl
xor	edi, ds:(_t_im+800h)[ebp*4]
mov	ebp, edi
shr	ecx, 18h
xor	ebp, ds:(_t_im+0C00h)[ecx*4]
mov	[eax+28h], ebp
mov	ecx, [esp+40h+var_24]
xor	ecx, [esp+40h+var_1C]
xor	ebp, [esp+40h+var_18]
mov	[eax+2Ch], ebp
mov	edi, [esp+40h+var_2C]
xor	edi, ecx
xor	esi, ebp
mov	[eax+10h], esi
mov	ebp, [esp+40h+var_30]
xor	ebp, edi
xor	esi, [esp+40h+var_38]
mov	[eax+14h], esi
xor	esi, [esp+40h+var_28]
mov	[eax+18h], esi
xor	edx, [esp+40h+var_20]
xor	edx, ebp
xor	esi, [esp+40h+var_34]
mov	[eax+1Ch], esi
mov	esi, [esp+40h+var_24]
xor	esi, 80h
movzx	ebx, dl
xor	esi, ds:(_t_fl+0C00h)[ebx*4]
movzx	ebx, dh
xor	esi, ds:_t_fl[ebx*4]
mov	ebx, edx
shr	ebx, 10h
movzx	ebx, bl
xor	esi, ds:(_t_fl+400h)[ebx*4]
mov	ebx, edx
shr	ebx, 18h
mov	edx, ds:(_t_fl+800h)[ebx*4]
xor	edx, esi
mov	[eax], edx
xor	ecx, edx
mov	[eax+4], ecx
xor	edi, ecx
mov	[eax+8], edi
xor	edi, ebp
mov	[eax+0Ch], edi
mov	dword ptr [eax+0F0h], 0
mov	byte ptr [eax+0F0h], 0C0h
add	esp, 30h
pop	ebx
pop	esi
pop	edi
pop	ebp
retn
public _aes_decrypt_key256
			
push	ebp
push	edi
push	esi
push	ebx
sub	esp, 40h
mov	edi, [esp+50h+key]
mov	eax, [esp+50h+cx_0]
movzx	ebx, byte ptr [edi+3]
shl	ebx, 18h
movzx	edx, byte ptr [edi+2]
shl	edx, 10h
or	ebx, edx
movzx	edx, byte ptr [edi]
or	ebx, edx
movzx	edx, byte ptr [edi+1]
shl	edx, 8
or	ebx, edx
mov	[esp+50h+var_3C], ebx
mov	[eax+0E0h], ebx
movzx	ecx, byte ptr [edi+7]
shl	ecx, 18h
movzx	edx, byte ptr [edi+6]
shl	edx, 10h
or	ecx, edx
movzx	edx, byte ptr [edi+4]
or	ecx, edx
movzx	edx, byte ptr [edi+5]
shl	edx, 8
or	ecx, edx
mov	[esp+50h+var_48], ecx
mov	[eax+0E4h], ecx
movzx	ecx, byte ptr [edi+0Bh]
shl	ecx, 18h
movzx	edx, byte ptr [edi+0Ah]
shl	edx, 10h
or	ecx, edx
movzx	edx, byte ptr [edi+8]
or	ecx, edx
movzx	edx, byte ptr [edi+9]
shl	edx, 8
or	ecx, edx
mov	[esp+50h+var_38], ecx
mov	[eax+0E8h], ecx
movzx	esi, byte ptr [edi+0Fh]
shl	esi, 18h
movzx	edx, byte ptr [edi+0Eh]
shl	edx, 10h
or	esi, edx
movzx	edx, byte ptr [edi+0Ch]
or	esi, edx
movzx	ecx, byte ptr [edi+0Dh]
shl	ecx, 8
or	esi, ecx
mov	[esp+50h+var_34], esi
mov	[eax+0ECh], esi
movzx	ecx, byte ptr [edi+13h]
shl	ecx, 18h
movzx	edx, byte ptr [edi+12h]
shl	edx, 10h
or	ecx, edx
movzx	edx, byte ptr [edi+10h]
or	ecx, edx
movzx	edx, byte ptr [edi+11h]
shl	edx, 8
or	ecx, edx
movzx	ebx, ch
mov	edx, ecx
shr	edx, 10h
movzx	edx, dl
mov	ebx, ds:(_t_im+400h)[ebx*4]
xor	ebx, ds:(_t_im+800h)[edx*4]
movzx	edx, cl
xor	ebx, ds:_t_im[edx*4]
mov	edx, ecx
shr	edx, 18h
xor	ebx, ds:(_t_im+0C00h)[edx*4]
mov	[eax+0D0h], ebx
movzx	ebx, byte ptr [edi+17h]
shl	ebx, 18h
movzx	edx, byte ptr [edi+16h]
shl	edx, 10h
or	edx, ebx
movzx	ebx, byte ptr [edi+14h]
or	edx, ebx
movzx	ebx, byte ptr [edi+15h]
shl	ebx, 8
or	edx, ebx
mov	[esp+50h+var_40], edx
movzx	ebx, dh
shr	edx, 10h
movzx	edx, dl
mov	ebx, ds:(_t_im+400h)[ebx*4]
xor	ebx, ds:(_t_im+800h)[edx*4]
movzx	edx, byte ptr [esp+50h+var_40]
xor	ebx, ds:_t_im[edx*4]
mov	edx, [esp+50h+var_40]
shr	edx, 18h
xor	ebx, ds:(_t_im+0C00h)[edx*4]
mov	[eax+0D4h], ebx
movzx	ebx, byte ptr [edi+1Bh]
shl	ebx, 18h
movzx	edx, byte ptr [edi+1Ah]
shl	edx, 10h
or	ebx, edx
movzx	edx, byte ptr [edi+18h]
or	ebx, edx
movzx	edx, byte ptr [edi+19h]
shl	edx, 8
or	ebx, edx
mov	[esp+50h+var_44], ebx
movzx	ebx, bh
mov	edx, [esp+50h+var_44]
shr	edx, 10h
movzx	edx, dl
mov	ebx, ds:(_t_im+400h)[ebx*4]
xor	ebx, ds:(_t_im+800h)[edx*4]
movzx	edx, byte ptr [esp+50h+var_44]
xor	ebx, ds:_t_im[edx*4]
mov	edx, [esp+50h+var_44]
shr	edx, 18h
xor	ebx, ds:(_t_im+0C00h)[edx*4]
mov	[eax+0D8h], ebx
movzx	ebx, byte ptr [edi+1Fh]
shl	ebx, 18h
movzx	edx, byte ptr [edi+1Eh]
shl	edx, 10h
or	ebx, edx
movzx	edx, byte ptr [edi+1Ch]
or	edx, ebx
movzx	ebx, byte ptr [edi+1Dh]
shl	ebx, 8
or	edx, ebx
mov	[esp+50h+var_18], edx
movzx	ebp, dl
movzx	edi, dh
mov	esi, edx
shr	esi, 10h
and	esi, 0FFh
shr	edx, 18h
mov	ebx, ds:(_t_im+400h)[edi*4]
xor	ebx, ds:(_t_im+800h)[esi*4]
xor	ebx, ds:_t_im[ebp*4]
xor	ebx, ds:(_t_im+0C00h)[edx*4]
mov	[eax+0DCh], ebx
mov	ebx, [esp+50h+var_3C]
xor	ebx, 1
xor	ebx, ds:(_t_fl+0C00h)[ebp*4]
xor	ebx, ds:_t_fl[edi*4]
xor	ebx, ds:(_t_fl+400h)[esi*4]
xor	ebx, ds:(_t_fl+800h)[edx*4]
movzx	esi, bh
mov	edx, ebx
shr	edx, 10h
movzx	edx, dl
mov	edi, ds:(_t_im+400h)[esi*4]
xor	edi, ds:(_t_im+800h)[edx*4]
movzx	edx, bl
xor	edi, ds:_t_im[edx*4]
mov	edx, ebx
shr	edx, 18h
xor	edi, ds:(_t_im+0C00h)[edx*4]
mov	[esp+50h+var_1C], edi
mov	[eax+0C0h], edi
mov	edx, [esp+50h+var_48]
xor	edx, ebx
mov	[esp+50h+var_48], edx
movzx	esi, dh
shr	edx, 10h
movzx	edx, dl
mov	esi, ds:(_t_im+400h)[esi*4]
xor	esi, ds:(_t_im+800h)[edx*4]
movzx	edx, byte ptr [esp+50h+var_48]
xor	esi, ds:_t_im[edx*4]
mov	edx, [esp+50h+var_48]
shr	edx, 18h
xor	esi, ds:(_t_im+0C00h)[edx*4]
mov	[esp+50h+var_28], esi
mov	[eax+0C4h], esi
mov	edx, [esp+50h+var_48]
xor	edx, [esp+50h+var_38]
mov	[esp+50h+var_38], edx
movzx	esi, dh
shr	edx, 10h
movzx	edx, dl
mov	edi, ds:(_t_im+400h)[esi*4]
xor	edi, ds:(_t_im+800h)[edx*4]
movzx	edx, byte ptr [esp+50h+var_38]
xor	edi, ds:_t_im[edx*4]
mov	edx, [esp+50h+var_38]
shr	edx, 18h
xor	edi, ds:(_t_im+0C00h)[edx*4]
mov	[esp+50h+var_2C], edi
mov	[eax+0C8h], edi
mov	edx, [esp+50h+var_38]
xor	edx, [esp+50h+var_34]
mov	[esp+50h+var_34], edx
movzx	ebp, dl
movzx	edi, dh
mov	esi, edx
shr	esi, 10h
and	esi, 0FFh
shr	edx, 18h
mov	[esp+50h+var_3C], edx
add	edi, 100h
add	esi, 200h
mov	[esp+50h+var_30], esi
mov	edx, ds:_t_im[edi*4]
xor	edx, ds:_t_im[esi*4]
xor	edx, ds:_t_im[ebp*4]
mov	[esp+50h+var_20], edx
mov	edx, [esp+50h+var_3C]
add	edx, 300h
mov	esi, [esp+50h+var_20]
xor	esi, ds:_t_im[edx*4]
mov	[esp+50h+var_20], esi
mov	[eax+0CCh], esi
xor	ecx, ds:_t_fl[ebp*4]
xor	ecx, ds:_t_fl[edi*4]
mov	ebp, [esp+50h+var_30]
xor	ecx, ds:_t_fl[ebp*4]
xor	ecx, ds:_t_fl[edx*4]
movzx	esi, ch
mov	edx, ecx
shr	edx, 10h
movzx	edx, dl
mov	esi, ds:(_t_im+400h)[esi*4]
xor	esi, ds:(_t_im+800h)[edx*4]
movzx	edx, cl
xor	esi, ds:_t_im[edx*4]
mov	edx, ecx
shr	edx, 18h
xor	esi, ds:(_t_im+0C00h)[edx*4]
mov	[esp+50h+var_14], esi
mov	[eax+0B0h], esi
mov	edx, [esp+50h+var_40]
xor	edx, ecx
mov	[esp+50h+var_50], edx
movzx	edi, dh
mov	esi, edx
shr	esi, 10h
and	esi, 0FFh
mov	edi, ds:(_t_im+400h)[edi*4]
xor	edi, ds:(_t_im+800h)[esi*4]
movzx	esi, dl
xor	edi, ds:_t_im[esi*4]
mov	esi, edx
shr	esi, 18h
xor	edi, ds:(_t_im+0C00h)[esi*4]
mov	[esp+50h+var_30], edi
mov	[eax+0B4h], edi
mov	edx, [esp+50h+var_44]
xor	edx, [esp+50h+var_50]
mov	[esp+50h+var_44], edx
movzx	edi, dh
mov	esi, edx
shr	esi, 10h
and	esi, 0FFh
mov	edi, ds:(_t_im+400h)[edi*4]
xor	edi, ds:(_t_im+800h)[esi*4]
movzx	esi, dl
xor	edi, ds:_t_im[esi*4]
mov	esi, edx
shr	esi, 18h
xor	edi, ds:(_t_im+0C00h)[esi*4]
mov	[esp+50h+var_3C], edi
mov	[eax+0B8h], edi
xor	edx, [esp+50h+var_18]
mov	[esp+50h+var_18], edx
movzx	ebp, dl
movzx	edi, dh
mov	esi, edx
shr	esi, 10h
mov	edx, esi
movzx	esi, dl
mov	[esp+50h+var_4C], esi
mov	esi, [esp+50h+var_18]
shr	esi, 18h
mov	[esp+50h+var_24], esi
mov	esi, ds:(_t_im+400h)[edi*4]
mov	edx, [esp+50h+var_4C]
xor	esi, ds:(_t_im+800h)[edx*4]
xor	esi, ds:_t_im[ebp*4]
mov	edx, [esp+50h+var_24]
xor	esi, ds:(_t_im+0C00h)[edx*4]
mov	[esp+50h+var_40], esi
mov	[eax+0BCh], esi
mov	ebp, ds:(_t_fl+0C00h)[ebp*4]
xor	ebp, 2
xor	ebp, ds:_t_fl[edi*4]
mov	esi, [esp+50h+var_4C]
xor	ebp, ds:(_t_fl+400h)[esi*4]
xor	ebp, ds:(_t_fl+800h)[edx*4]
xor	ebx, ebp
mov	[esp+50h+var_24], ebx
mov	edx, ebp
movzx	ebx, dl
mov	edi, [esp+50h+var_1C]
xor	edi, ds:_t_im[ebx*4]
mov	edx, ebp
movzx	ebx, dh
xor	edi, ds:(_t_im+400h)[ebx*4]
mov	ebx, ebp
shr	ebx, 10h
movzx	ebx, bl
xor	edi, ds:(_t_im+800h)[ebx*4]
shr	ebp, 18h
xor	edi, ds:(_t_im+0C00h)[ebp*4]
mov	[eax+0A0h], edi
mov	ebx, [esp+50h+var_24]
xor	ebx, [esp+50h+var_48]
mov	[esp+50h+var_48], ebx
mov	esi, [esp+50h+var_28]
xor	esi, edi
mov	[esp+50h+var_28], esi
mov	[eax+0A4h], esi
xor	ebx, [esp+50h+var_38]
mov	[esp+50h+var_38], ebx
xor	esi, [esp+50h+var_2C]
mov	[esp+50h+var_2C], esi
mov	[eax+0A8h], esi
mov	esi, [esp+50h+var_34]
xor	esi, ebx
mov	ebp, [esp+50h+var_2C]
xor	ebp, [esp+50h+var_20]
mov	[esp+50h+var_20], ebp
mov	[eax+0ACh], ebp
mov	edx, esi
movzx	ebx, dh
mov	ebp, esi
shr	ebp, 10h
mov	edx, ebp
movzx	ebp, dl
mov	ebx, ds:(_t_fl+400h)[ebx*4]
xor	ebx, ds:(_t_fl+800h)[ebp*4]
mov	edx, esi
movzx	ebp, dl
xor	ebx, ds:_t_fl[ebp*4]
mov	ebp, esi
shr	ebp, 18h
xor	ebx, ds:(_t_fl+0C00h)[ebp*4]
xor	ecx, ebx
mov	[esp+50h+var_1C], ecx
movzx	ecx, bl
mov	ecx, ds:_t_im[ecx*4]
xor	ecx, [esp+50h+var_14]
movzx	ebp, bh
xor	ecx, ds:(_t_im+400h)[ebp*4]
mov	ebp, ebx
shr	ebp, 10h
mov	edx, ebp
movzx	ebp, dl
xor	ecx, ds:(_t_im+800h)[ebp*4]
shr	ebx, 18h
xor	ecx, ds:(_t_im+0C00h)[ebx*4]
mov	[eax+90h], ecx
mov	ebx, [esp+50h+var_50]
xor	ebx, [esp+50h+var_1C]
mov	[esp+50h+var_34], ebx
mov	ebp, [esp+50h+var_30]
xor	ebp, ecx
mov	[esp+50h+var_30], ebp
mov	[eax+94h], ebp
xor	ebx, [esp+50h+var_44]
mov	[esp+50h+var_44], ebx
xor	ebp, [esp+50h+var_3C]
mov	[esp+50h+var_3C], ebp
mov	[eax+98h], ebp
xor	ebx, [esp+50h+var_18]
mov	[esp+50h+var_14], ebx
xor	ebp, [esp+50h+var_40]
mov	[esp+50h+var_40], ebp
mov	[eax+9Ch], ebp
movzx	edx, bl
mov	edx, ds:(_t_fl+0C00h)[edx*4]
xor	edx, 4
movzx	ebp, bh
mov	ebx, ds:_t_fl[ebp*4]
xor	ebx, edx
mov	ebp, [esp+50h+var_14]
shr	ebp, 10h
mov	edx, ebp
movzx	ebp, dl
mov	edx, ds:(_t_fl+400h)[ebp*4]
xor	edx, ebx
mov	ebp, [esp+50h+var_14]
shr	ebp, 18h
xor	edx, ds:(_t_fl+800h)[ebp*4]
mov	ebx, [esp+50h+var_24]
xor	ebx, edx
mov	[esp+50h+var_24], ebx
movzx	ebp, dl
xor	edi, ds:_t_im[ebp*4]
movzx	ebp, dh
xor	edi, ds:(_t_im+400h)[ebp*4]
mov	ebp, edx
shr	ebp, 10h
mov	ebx, ebp
movzx	ebp, bl
xor	edi, ds:(_t_im+800h)[ebp*4]
shr	edx, 18h
xor	edi, ds:(_t_im+0C00h)[edx*4]
mov	[eax+80h], edi
mov	ebp, [esp+50h+var_24]
xor	ebp, [esp+50h+var_48]
mov	[esp+50h+var_48], ebp
mov	edx, [esp+50h+var_28]
xor	edx, edi
mov	[esp+50h+var_28], edx
mov	[eax+84h], edx
xor	ebp, [esp+50h+var_38]
mov	[esp+50h+var_38], ebp
xor	edx, [esp+50h+var_2C]
mov	[esp+50h+var_2C], edx
mov	[eax+88h], edx
xor	ebp, esi
mov	[esp+50h+var_18], ebp
xor	edx, [esp+50h+var_20]
mov	[esp+50h+var_20], edx
mov	[eax+8Ch], edx
mov	ebx, ebp
movzx	ebp, bh
mov	esi, ebx
shr	esi, 10h
and	esi, 0FFh
mov	ebp, ds:(_t_fl+400h)[ebp*4]
xor	ebp, ds:(_t_fl+800h)[esi*4]
movzx	esi, bl
xor	ebp, ds:_t_fl[esi*4]
mov	esi, ebx
shr	esi, 18h
xor	ebp, ds:(_t_fl+0C00h)[esi*4]
mov	esi, [esp+50h+var_1C]
xor	esi, ebp
mov	[esp+50h+var_1C], esi
mov	edx, ebp
movzx	esi, dl
xor	ecx, ds:_t_im[esi*4]
mov	esi, ecx
mov	ebx, ebp
movzx	ecx, bh
xor	esi, ds:(_t_im+400h)[ecx*4]
mov	ecx, ebp
shr	ecx, 10h
movzx	ecx, cl
xor	esi, ds:(_t_im+800h)[ecx*4]
shr	ebp, 18h
xor	esi, ds:(_t_im+0C00h)[ebp*4]
mov	[eax+70h], esi
mov	ebp, [esp+50h+var_1C]
xor	ebp, [esp+50h+var_34]
mov	[esp+50h+var_34], ebp
mov	edx, [esp+50h+var_30]
xor	edx, esi
mov	[esp+50h+var_30], edx
mov	[eax+74h], edx
xor	ebp, [esp+50h+var_44]
mov	[esp+50h+var_44], ebp
xor	edx, [esp+50h+var_3C]
mov	[esp+50h+var_3C], edx
mov	[eax+78h], edx
mov	ebx, [esp+50h+var_14]
xor	ebx, ebp
xor	edx, [esp+50h+var_40]
mov	[esp+50h+var_40], edx
mov	[eax+7Ch], edx
movzx	ecx, bl
mov	ecx, ds:(_t_fl+0C00h)[ecx*4]
xor	ecx, 8
movzx	ebp, bh
mov	edx, ds:_t_fl[ebp*4]
xor	edx, ecx
mov	ebp, ebx
shr	ebp, 10h
mov	ecx, ebp
movzx	ebp, cl
mov	ecx, ds:(_t_fl+400h)[ebp*4]
xor	ecx, edx
mov	ebp, ebx
shr	ebp, 18h
xor	ecx, ds:(_t_fl+800h)[ebp*4]
mov	ebp, [esp+50h+var_24]
xor	ebp, ecx
mov	[esp+50h+var_24], ebp
movzx	ebp, cl
xor	edi, ds:_t_im[ebp*4]
movzx	ebp, ch
xor	edi, ds:(_t_im+400h)[ebp*4]
mov	ebp, ecx
shr	ebp, 10h
mov	edx, ebp
movzx	ebp, dl
xor	edi, ds:(_t_im+800h)[ebp*4]
shr	ecx, 18h
xor	edi, ds:(_t_im+0C00h)[ecx*4]
mov	[eax+60h], edi
mov	ecx, [esp+50h+var_24]
xor	ecx, [esp+50h+var_48]
mov	[esp+50h+var_48], ecx
mov	ebp, [esp+50h+var_28]
xor	ebp, edi
mov	[esp+50h+var_28], ebp
mov	[eax+64h], ebp
xor	ecx, [esp+50h+var_38]
mov	[esp+50h+var_38], ecx
xor	ebp, [esp+50h+var_2C]
mov	[esp+50h+var_2C], ebp
mov	[eax+68h], ebp
mov	edx, [esp+50h+var_18]
xor	edx, ecx
mov	[esp+50h+var_18], edx
xor	ebp, [esp+50h+var_20]
mov	[esp+50h+var_20], ebp
mov	[eax+6Ch], ebp
mov	ecx, edx
movzx	edx, dh
mov	ebp, ecx
shr	ebp, 10h
mov	ecx, ebp
movzx	ebp, cl
mov	ecx, ds:(_t_fl+400h)[edx*4]
xor	ecx, ds:(_t_fl+800h)[ebp*4]
movzx	ebp, byte ptr [esp+50h+var_18]
xor	ecx, ds:_t_fl[ebp*4]
mov	ebp, [esp+50h+var_18]
shr	ebp, 18h
xor	ecx, ds:(_t_fl+0C00h)[ebp*4]
mov	ebp, [esp+50h+var_1C]
xor	ebp, ecx
mov	[esp+50h+var_1C], ebp
movzx	ebp, cl
xor	esi, ds:_t_im[ebp*4]
movzx	ebp, ch
xor	esi, ds:(_t_im+400h)[ebp*4]
mov	ebp, ecx
shr	ebp, 10h
mov	edx, ebp
movzx	ebp, dl
xor	esi, ds:(_t_im+800h)[ebp*4]
shr	ecx, 18h
xor	esi, ds:(_t_im+0C00h)[ecx*4]
mov	[eax+50h], esi
mov	ecx, [esp+50h+var_1C]
xor	ecx, [esp+50h+var_34]
mov	[esp+50h+var_34], ecx
mov	ebp, [esp+50h+var_30]
xor	ebp, esi
mov	[esp+50h+var_30], ebp
mov	[eax+54h], ebp
xor	ecx, [esp+50h+var_44]
mov	[esp+50h+var_44], ecx
xor	ebp, [esp+50h+var_3C]
mov	[esp+50h+var_3C], ebp
mov	[eax+58h], ebp
xor	ebx, ecx
xor	ebp, [esp+50h+var_40]
mov	[esp+50h+var_40], ebp
mov	[eax+5Ch], ebp
movzx	ecx, bl
mov	ecx, ds:(_t_fl+0C00h)[ecx*4]
xor	ecx, 10h
movzx	ebp, bh
xor	ecx, ds:_t_fl[ebp*4]
mov	ebp, ebx
shr	ebp, 10h
mov	edx, ebp
movzx	ebp, dl
xor	ecx, ds:(_t_fl+400h)[ebp*4]
mov	ebp, ebx
shr	ebp, 18h
xor	ecx, ds:(_t_fl+800h)[ebp*4]
mov	ebp, [esp+50h+var_24]
xor	ebp, ecx
mov	[esp+50h+var_24], ebp
movzx	ebp, cl
xor	edi, ds:_t_im[ebp*4]
movzx	ebp, ch
xor	edi, ds:(_t_im+400h)[ebp*4]
mov	ebp, ecx
shr	ebp, 10h
mov	edx, ebp
movzx	ebp, dl
xor	edi, ds:(_t_im+800h)[ebp*4]
shr	ecx, 18h
xor	edi, ds:(_t_im+0C00h)[ecx*4]
mov	[eax+40h], edi
mov	ecx, [esp+50h+var_24]
xor	ecx, [esp+50h+var_48]
mov	[esp+50h+var_48], ecx
mov	ebp, [esp+50h+var_28]
xor	ebp, edi
mov	[esp+50h+var_28], ebp
mov	[eax+44h], ebp
xor	ecx, [esp+50h+var_38]
mov	[esp+50h+var_38], ecx
xor	ebp, [esp+50h+var_2C]
mov	[esp+50h+var_2C], ebp
mov	[eax+48h], ebp
mov	edx, [esp+50h+var_18]
xor	edx, ecx
mov	[esp+50h+var_18], edx
xor	ebp, [esp+50h+var_20]
mov	[esp+50h+var_20], ebp
mov	[eax+4Ch], ebp
mov	ecx, edx
movzx	edx, dh
mov	ebp, ecx
shr	ebp, 10h
mov	ecx, ebp
movzx	ebp, cl
mov	ecx, ds:(_t_fl+400h)[edx*4]
xor	ecx, ds:(_t_fl+800h)[ebp*4]
movzx	ebp, byte ptr [esp+50h+var_18]
xor	ecx, ds:_t_fl[ebp*4]
mov	ebp, [esp+50h+var_18]
shr	ebp, 18h
xor	ecx, ds:(_t_fl+0C00h)[ebp*4]
mov	ebp, [esp+50h+var_1C]
xor	ebp, ecx
mov	[esp+50h+var_1C], ebp
movzx	ebp, cl
xor	esi, ds:_t_im[ebp*4]
movzx	ebp, ch
xor	esi, ds:(_t_im+400h)[ebp*4]
mov	ebp, ecx
shr	ebp, 10h
mov	edx, ebp
movzx	ebp, dl
xor	esi, ds:(_t_im+800h)[ebp*4]
shr	ecx, 18h
xor	esi, ds:(_t_im+0C00h)[ecx*4]
mov	[eax+30h], esi
mov	ecx, [esp+50h+var_1C]
xor	ecx, [esp+50h+var_34]
mov	[esp+50h+var_34], ecx
mov	ebp, [esp+50h+var_30]
xor	ebp, esi
mov	[esp+50h+var_30], ebp
mov	[eax+34h], ebp
xor	ecx, [esp+50h+var_44]
mov	[esp+50h+var_44], ecx
xor	ebp, [esp+50h+var_3C]
mov	[esp+50h+var_3C], ebp
mov	[eax+38h], ebp
xor	ebx, ecx
xor	ebp, [esp+50h+var_40]
mov	[esp+50h+var_40], ebp
mov	[eax+3Ch], ebp
movzx	ecx, bl
mov	ecx, ds:(_t_fl+0C00h)[ecx*4]
xor	ecx, 20h
movzx	ebp, bh
xor	ecx, ds:_t_fl[ebp*4]
mov	ebp, ebx
shr	ebp, 10h
mov	edx, ebp
movzx	ebp, dl
xor	ecx, ds:(_t_fl+400h)[ebp*4]
mov	ebp, ebx
shr	ebp, 18h
xor	ecx, ds:(_t_fl+800h)[ebp*4]
mov	ebp, [esp+50h+var_24]
xor	ebp, ecx
mov	[esp+50h+var_24], ebp
movzx	ebp, cl
xor	edi, ds:_t_im[ebp*4]
movzx	ebp, ch
xor	edi, ds:(_t_im+400h)[ebp*4]
mov	ebp, ecx
shr	ebp, 10h
mov	edx, ebp
movzx	ebp, dl
xor	edi, ds:(_t_im+800h)[ebp*4]
shr	ecx, 18h
xor	edi, ds:(_t_im+0C00h)[ecx*4]
mov	[eax+20h], edi
mov	ecx, [esp+50h+var_24]
xor	ecx, [esp+50h+var_48]
mov	[esp+50h+var_48], ecx
xor	edi, [esp+50h+var_28]
mov	[eax+24h], edi
mov	ebp, [esp+50h+var_38]
xor	ebp, ecx
xor	edi, [esp+50h+var_2C]
mov	[eax+28h], edi
mov	edx, [esp+50h+var_18]
xor	edx, ebp
xor	edi, [esp+50h+var_20]
mov	[eax+2Ch], edi
movzx	ecx, dh
mov	edi, edx
shr	edi, 10h
and	edi, 0FFh
mov	ecx, ds:(_t_fl+400h)[ecx*4]
xor	ecx, ds:(_t_fl+800h)[edi*4]
movzx	edi, dl
xor	ecx, ds:_t_fl[edi*4]
mov	edi, edx
shr	edi, 18h
xor	ecx, ds:(_t_fl+0C00h)[edi*4]
movzx	edi, cl
xor	esi, ds:_t_im[edi*4]
movzx	edi, ch
xor	esi, ds:(_t_im+400h)[edi*4]
mov	edi, ecx
shr	edi, 10h
and	edi, 0FFh
xor	esi, ds:(_t_im+800h)[edi*4]
mov	edi, ecx
shr	edi, 18h
xor	esi, ds:(_t_im+0C00h)[edi*4]
mov	[eax+10h], esi
xor	esi, [esp+50h+var_30]
mov	[eax+14h], esi
xor	esi, [esp+50h+var_3C]
mov	[eax+18h], esi
mov	edi, [esp+50h+var_34]
xor	edi, [esp+50h+var_1C]
xor	edi, [esp+50h+var_44]
xor	ebx, edi
xor	ebx, ecx
xor	esi, [esp+50h+var_40]
mov	[eax+1Ch], esi
mov	ecx, [esp+50h+var_24]
xor	ecx, 40h
movzx	esi, bl
xor	ecx, ds:(_t_fl+0C00h)[esi*4]
movzx	esi, bh
xor	ecx, ds:_t_fl[esi*4]
mov	esi, ebx
shr	esi, 10h
and	esi, 0FFh
xor	ecx, ds:(_t_fl+400h)[esi*4]
shr	ebx, 18h
xor	ecx, ds:(_t_fl+800h)[ebx*4]
mov	[eax], ecx
xor	ecx, [esp+50h+var_48]
mov	[eax+4], ecx
xor	ebp, ecx
mov	[eax+8], ebp
xor	edx, ebp
mov	[eax+0Ch], edx
mov	dword ptr [eax+0F0h], 0
mov	byte ptr [eax+0F0h], 0E0h
add	esp, 40h
pop	ebx
pop	esi
pop	edi
pop	ebp
retn
align 10h
public _aes_decrypt_key
mov	edx, [esp+key]
mov	eax, [esp+key_len]
mov	ecx, [esp+arg_8]
cmp	eax, 20h
jz	short loc_641E8D20
jle	short loc_641E8D08
cmp	key_len_0, 0C0h
jz	short loc_641E8D12
cmp	key_len_0, 100h
jz	short loc_641E8D20
add	key_len_0, 0FFFFFF80h
jz	short loc_641E8D30
retn
align 4
cmp	key_len_0, 10h
jz	short loc_641E8D30
cmp	key_len_0, 18h
jnz	short locret_641E8D06
mov	[esp+key_len], cx_0
mov	[esp+key], key_0
jmp	_aes_decrypt_key192
align 10h
			
mov	[esp+key_len], cx_0
mov	[esp+key], key_0
jmp	_aes_decrypt_key256
align 10h
			
mov	[esp+key_len], cx_0
mov	[esp+key], key_0
jmp	_aes_decrypt_key128
align 10h
public _aes_encrypt
			
push	ebp
push	edi
push	esi
push	ebx
sub	esp, 10h
mov	edi, [esp+20h+in]
mov	ebp, [esp+20h+cx_0]
mov	eax, ebp
movzx	esi, byte ptr [edi+3]
shl	esi, 18h
movzx	edx, byte ptr [edi+2]
shl	edx, 10h
or	esi, edx
movzx	edx, byte ptr [edi]
or	esi, edx
movzx	edx, byte ptr [edi+1]
shl	edx, 8
or	esi, edx
xor	esi, [ebp+0]
movzx	ebx, byte ptr [edi+7]
shl	ebx, 18h
movzx	edx, byte ptr [edi+6]
shl	edx, 10h
or	ebx, edx
movzx	edx, byte ptr [edi+4]
or	ebx, edx
movzx	edx, byte ptr [edi+5]
shl	edx, 8
or	ebx, edx
xor	ebx, [ebp+4]
mov	[esp+20h+var_20], ebx
movzx	ecx, byte ptr [edi+0Bh]
shl	ecx, 18h
movzx	edx, byte ptr [edi+0Ah]
shl	edx, 10h
or	ecx, edx
movzx	edx, byte ptr [edi+8]
or	ecx, edx
movzx	edx, byte ptr [edi+9]
shl	edx, 8
or	ecx, edx
xor	ecx, [ebp+8]
movzx	edx, byte ptr [edi+0Fh]
mov	ebx, edx
shl	ebx, 18h
movzx	edx, byte ptr [edi+0Eh]
shl	edx, 10h
or	ebx, edx
movzx	edx, byte ptr [edi+0Ch]
or	edx, ebx
movzx	edi, byte ptr [edi+0Dh]
shl	edi, 8
or	edx, edi
xor	edx, [ebp+0Ch]
mov	bl, [ebp+0F0h]
mov	byte ptr [esp+20h+var_1C], bl
cmp	bl, 0C0h
jz	loc_641E8E8C
cmp	bl, 0E0h
jz	loc_641E99A4
cmp	bl, 0A0h
jz	loc_641E905C
mov	ebx, esi
mov	eax, [esp+20h+out]
mov	[eax], bl
mov	eax, esi
shr	eax, 8
mov	ebx, [esp+20h+out]
mov	[ebx+1], al
mov	eax, esi
shr	eax, 10h
mov	[ebx+2], al
mov	eax, esi
shr	eax, 18h
mov	[ebx+3], al
mov	al, byte ptr [esp+20h+var_20]
mov	[ebx+4], al
mov	eax, [esp+20h+var_20]
shr	eax, 8
mov	[ebx+5], al
mov	eax, [esp+20h+var_20]
shr	eax, 10h
mov	[ebx+6], al
mov	ebx, [esp+20h+var_20]
shr	ebx, 18h
mov	eax, [esp+20h+out]
mov	[eax+7], bl
mov	[eax+8], cl
mov	eax, ecx
shr	eax, 8
mov	ebx, [esp+20h+out]
mov	[ebx+9], al
mov	eax, ecx
shr	eax, 10h
mov	[ebx+0Ah], al
shr	ecx, 18h
mov	[ebx+0Bh], cl
mov	[ebx+0Ch], dl
mov	eax, edx
shr	eax, 8
mov	[ebx+0Dh], al
mov	eax, edx
shr	eax, 10h
mov	[ebx+0Eh], al
shr	edx, 18h
mov	[ebx+0Fh], dl
add	esp, 10h
pop	ebx
pop	esi
pop	edi
pop	kp
retn
align 4
mov	edi, kp
mov	ebx, esi
movzx	eax, bl
mov	cx_0_0,	ds:_t_fn[eax*4]
xor	ebp, [kp+10h]
mov	ebx, [esp+20h+var_20]
movzx	eax, bh
xor	ebp, ds:(_t_fn+400h)[eax*4]
mov	eax, ecx
shr	eax, 10h
movzx	eax, al
xor	ebp, ds:(_t_fn+800h)[eax*4]
mov	eax, edx
shr	eax, 18h
mov	eax, ds:(_t_fn+0C00h)[eax*4]
xor	eax, ebp
mov	[esp+20h+var_14], eax
movzx	eax, bl
mov	ebp, ds:_t_fn[eax*4]
xor	ebp, [kp+14h]
movzx	eax, ch
xor	ebp, ds:(_t_fn+400h)[eax*4]
mov	eax, edx
shr	eax, 10h
movzx	eax, al
xor	ebp, ds:(_t_fn+800h)[eax*4]
mov	eax, esi
shr	eax, 18h
mov	eax, ds:(_t_fn+0C00h)[eax*4]
xor	eax, ebp
mov	[esp+20h+var_18], eax
movzx	eax, cl
mov	ebp, ds:_t_fn[eax*4]
xor	ebp, [kp+18h]
movzx	eax, dh
xor	ebp, ds:(_t_fn+400h)[eax*4]
mov	eax, esi
shr	eax, 10h
movzx	eax, al
xor	ebp, ds:(_t_fn+800h)[eax*4]
mov	eax, ebx
shr	eax, 18h
xor	ebp, ds:(_t_fn+0C00h)[eax*4]
movzx	edx, dl
mov	edx, ds:_t_fn[edx*4]
xor	edx, [kp+1Ch]
mov	eax, esi
movzx	esi, ah
xor	edx, ds:(_t_fn+400h)[esi*4]
shr	ebx, 10h
movzx	ebx, bl
xor	edx, ds:(_t_fn+800h)[ebx*4]
shr	ecx, 18h
xor	edx, ds:(_t_fn+0C00h)[ecx*4]
lea	eax, [kp+20h]
movzx	ecx, byte ptr [esp+20h+var_14]
mov	esi, ds:_t_fn[ecx*4]
xor	esi, [edi+20h]
mov	ebx, [esp+20h+var_18]
movzx	ecx, bh
xor	esi, ds:(_t_fn+400h)[ecx*4]
mov	ecx, ebp
shr	ecx, 10h
movzx	ecx, cl
xor	esi, ds:(_t_fn+800h)[ecx*4]
mov	ecx, edx
shr	ecx, 18h
xor	esi, ds:(_t_fn+0C00h)[ecx*4]
movzx	ecx, bl
mov	ebx, ds:_t_fn[ecx*4]
xor	ebx, [edi+24h]
mov	[esp+20h+var_1C], ebx
mov	ebx, ebp
movzx	ecx, bh
mov	ebx, [esp+20h+var_1C]
xor	ebx, ds:(_t_fn+400h)[ecx*4]
mov	ecx, edx
shr	ecx, 10h
movzx	ecx, cl
xor	ebx, ds:(_t_fn+800h)[ecx*4]
mov	ecx, [esp+20h+var_14]
shr	ecx, 18h
xor	ebx, ds:(_t_fn+0C00h)[ecx*4]
mov	[esp+20h+var_20], ebx
mov	ebx, ebp
movzx	ecx, bl
mov	ecx, ds:_t_fn[ecx*4]
xor	ecx, [edi+28h]
mov	[esp+20h+var_1C], ecx
movzx	ecx, dh
mov	ebx, [esp+20h+var_1C]
xor	ebx, ds:(_t_fn+400h)[ecx*4]
mov	ecx, [esp+20h+var_14]
shr	ecx, 10h
movzx	ecx, cl
xor	ebx, ds:(_t_fn+800h)[ecx*4]
mov	ecx, [esp+20h+var_18]
shr	ecx, 18h
mov	ecx, ds:(_t_fn+0C00h)[ecx*4]
xor	ecx, ebx
movzx	edx, dl
mov	edx, ds:_t_fn[edx*4]
xor	edx, [edi+2Ch]
mov	ebx, [esp+20h+var_14]
movzx	edi, bh
xor	edx, ds:(_t_fn+400h)[edi*4]
mov	edi, [esp+20h+var_18]
shr	edi, 10h
and	edi, 0FFh
xor	edx, ds:(_t_fn+800h)[edi*4]
shr	ebp, 18h
xor	edx, ds:(_t_fn+0C00h)[ebp*4]
mov	ebx, esi
movzx	edi, bl
mov	ebp, ds:_t_fn[edi*4]
xor	ebp, [kp+10h]
mov	ebx, [esp+20h+var_20]
movzx	edi, bh
xor	ebp, ds:(_t_fn+400h)[edi*4]
mov	edi, ecx
shr	edi, 10h
and	edi, 0FFh
xor	ebp, ds:(_t_fn+800h)[edi*4]
mov	edi, edx
shr	edi, 18h
mov	edi, ds:(_t_fn+0C00h)[edi*4]
xor	edi, ebp
mov	[esp+20h+var_18], edi
movzx	edi, bl
mov	edi, ds:_t_fn[edi*4]
xor	edi, [kp+14h]
movzx	ebp, ch
xor	edi, ds:(_t_fn+400h)[ebp*4]
mov	ebp, edx
shr	ebp, 10h
mov	ebx, ebp
movzx	ebp, bl
xor	edi, ds:(_t_fn+800h)[ebp*4]
mov	ebp, esi
shr	ebp, 18h
xor	edi, ds:(_t_fn+0C00h)[ebp*4]
movzx	ebp, cl
mov	ebp, ds:_t_fn[ebp*4]
xor	ebp, [kp+18h]
mov	[esp+20h+var_1C], ebp
movzx	ebp, dh
mov	ebx, [esp+20h+var_1C]
xor	ebx, ds:(_t_fn+400h)[ebp*4]
mov	[esp+20h+var_1C], ebx
mov	ebp, esi
shr	ebp, 10h
mov	ebx, ebp
movzx	ebp, bl
mov	ebx, [esp+20h+var_1C]
xor	ebx, ds:(_t_fn+800h)[ebp*4]
mov	ebp, [esp+20h+var_20]
shr	ebp, 18h
mov	ebp, ds:(_t_fn+0C00h)[ebp*4]
xor	ebp, ebx
movzx	edx, dl
mov	edx, ds:_t_fn[edx*4]
xor	edx, [kp+1Ch]
mov	ebx, esi
movzx	esi, bh
xor	edx, ds:(_t_fn+400h)[esi*4]
mov	ebx, [esp+20h+var_20]
shr	ebx, 10h
movzx	ebx, bl
xor	edx, ds:(_t_fn+800h)[ebx*4]
shr	ecx, 18h
xor	edx, ds:(_t_fn+0C00h)[ecx*4]
movzx	ecx, byte ptr [esp+20h+var_18]
mov	ebx, ds:_t_fn[ecx*4]
xor	ebx, [kp+20h]
mov	ecx, edi
movzx	esi, ch
xor	ebx, ds:(_t_fn+400h)[esi*4]
mov	ecx, ebp
shr	ecx, 10h
movzx	ecx, cl
xor	ebx, ds:(_t_fn+800h)[ecx*4]
mov	ecx, edx
shr	ecx, 18h
xor	ebx, ds:(_t_fn+0C00h)[ecx*4]
mov	[esp+20h+var_14], ebx
mov	ebx, edi
movzx	ecx, bl
mov	esi, ds:_t_fn[ecx*4]
xor	esi, [kp+24h]
mov	ebx, ebp
movzx	ecx, bh
xor	esi, ds:(_t_fn+400h)[ecx*4]
mov	ecx, edx
shr	ecx, 10h
movzx	ecx, cl
xor	esi, ds:(_t_fn+800h)[ecx*4]
mov	ecx, [esp+20h+var_18]
shr	ecx, 18h
xor	esi, ds:(_t_fn+0C00h)[ecx*4]
movzx	ecx, bl
mov	ebx, ds:_t_fn[ecx*4]
xor	ebx, [kp+28h]
movzx	ecx, dh
xor	ebx, ds:(_t_fn+400h)[ecx*4]
mov	ecx, [esp+20h+var_18]
shr	ecx, 10h
movzx	ecx, cl
xor	ebx, ds:(_t_fn+800h)[ecx*4]
mov	ecx, edi
shr	ecx, 18h
xor	ebx, ds:(_t_fn+0C00h)[ecx*4]
mov	[esp+20h+var_1C], ebx
movzx	edx, dl
mov	edx, ds:_t_fn[edx*4]
xor	edx, [kp+2Ch]
mov	ebx, [esp+20h+var_18]
movzx	ecx, bh
xor	edx, ds:(_t_fn+400h)[ecx*4]
shr	edi, 10h
and	edi, 0FFh
xor	edx, ds:(_t_fn+800h)[edi*4]
shr	ebp, 18h
mov	edi, ds:(_t_fn+0C00h)[ebp*4]
xor	edi, edx
movzx	edx, byte ptr [esp+20h+var_14]
mov	ebx, ds:_t_fn[edx*4]
xor	ebx, [kp+30h]
mov	ecx, esi
movzx	edx, ch
xor	ebx, ds:(_t_fn+400h)[edx*4]
mov	edx, [esp+20h+var_1C]
shr	edx, 10h
movzx	edx, dl
xor	ebx, ds:(_t_fn+800h)[edx*4]
mov	edx, edi
shr	edx, 18h
xor	ebx, ds:(_t_fn+0C00h)[edx*4]
mov	[esp+20h+var_20], ebx
movzx	edx, cl
mov	ecx, ds:_t_fn[edx*4]
mov	ebx, [kp+34h]
xor	ebx, ecx
mov	ecx, [esp+20h+var_1C]
movzx	edx, ch
mov	ecx, ds:(_t_fn+400h)[edx*4]
xor	ecx, ebx
mov	edx, edi
shr	edx, 10h
movzx	edx, dl
xor	ecx, ds:(_t_fn+800h)[edx*4]
mov	edx, [esp+20h+var_14]
shr	edx, 18h
xor	ecx, ds:(_t_fn+0C00h)[edx*4]
movzx	edx, byte ptr [esp+20h+var_1C]
mov	edx, ds:_t_fn[edx*4]
mov	ebx, [kp+38h]
xor	ebx, edx
mov	edx, edi
movzx	ebp, dh
xor	ebx, ds:(_t_fn+400h)[ebp*4]
mov	ebp, [esp+20h+var_14]
shr	ebp, 10h
mov	edx, ebp
movzx	ebp, dl
mov	edx, ds:(_t_fn+800h)[ebp*4]
xor	edx, ebx
mov	ebp, esi
shr	ebp, 18h
xor	edx, ds:(_t_fn+0C00h)[ebp*4]
and	edi, 0FFh
mov	ebp, ds:_t_fn[edi*4]
xor	ebp, [kp+3Ch]
mov	ebx, [esp+20h+var_14]
movzx	edi, bh
xor	ebp, ds:(_t_fn+400h)[edi*4]
shr	esi, 10h
and	esi, 0FFh
xor	ebp, ds:(_t_fn+800h)[esi*4]
mov	esi, [esp+20h+var_1C]
shr	esi, 18h
xor	ebp, ds:(_t_fn+0C00h)[esi*4]
movzx	esi, byte ptr [esp+20h+var_20]
mov	edi, ds:_t_fn[esi*4]
xor	edi, [kp+40h]
movzx	esi, ch
xor	edi, ds:(_t_fn+400h)[esi*4]
mov	esi, edx
shr	esi, 10h
and	esi, 0FFh
xor	edi, ds:(_t_fn+800h)[esi*4]
mov	esi, ebp
shr	esi, 18h
mov	esi, ds:(_t_fn+0C00h)[esi*4]
xor	esi, edi
mov	[esp+20h+var_18], esi
movzx	esi, cl
mov	edi, ds:_t_fn[esi*4]
xor	edi, [kp+44h]
movzx	esi, dh
xor	edi, ds:(_t_fn+400h)[esi*4]
mov	esi, ebp
shr	esi, 10h
and	esi, 0FFh
xor	edi, ds:(_t_fn+800h)[esi*4]
mov	esi, [esp+20h+var_20]
shr	esi, 18h
mov	esi, ds:(_t_fn+0C00h)[esi*4]
xor	esi, edi
mov	[esp+20h+var_1C], esi
movzx	esi, dl
mov	esi, ds:_t_fn[esi*4]
xor	esi, [kp+48h]
mov	ebx, ebp
movzx	edi, bh
xor	esi, ds:(_t_fn+400h)[edi*4]
mov	edi, [esp+20h+var_20]
shr	edi, 10h
and	edi, 0FFh
xor	esi, ds:(_t_fn+800h)[edi*4]
mov	edi, ecx
shr	edi, 18h
xor	esi, ds:(_t_fn+0C00h)[edi*4]
movzx	ebp, bl
mov	edi, ds:_t_fn[ebp*4]
xor	edi, [kp+4Ch]
mov	ebx, [esp+20h+var_20]
movzx	ebp, bh
xor	edi, ds:(_t_fn+400h)[ebp*4]
shr	ecx, 10h
movzx	ecx, cl
xor	edi, ds:(_t_fn+800h)[ecx*4]
shr	edx, 18h
xor	edi, ds:(_t_fn+0C00h)[edx*4]
mov	edx, edi
movzx	ecx, byte ptr [esp+20h+var_18]
mov	edi, ds:_t_fn[ecx*4]
xor	edi, [kp+50h]
mov	ebx, [esp+20h+var_1C]
movzx	ecx, bh
xor	edi, ds:(_t_fn+400h)[ecx*4]
mov	ecx, esi
shr	ecx, 10h
movzx	ecx, cl
xor	edi, ds:(_t_fn+800h)[ecx*4]
mov	ecx, edx
shr	ecx, 18h
xor	edi, ds:(_t_fn+0C00h)[ecx*4]
movzx	ecx, bl
mov	ebx, ds:_t_fn[ecx*4]
mov	ebp, [kp+54h]
xor	ebp, ebx
mov	ebx, esi
movzx	ecx, bh
mov	ebx, ds:(_t_fn+400h)[ecx*4]
xor	ebx, ebp
mov	ecx, edx
shr	ecx, 10h
movzx	ecx, cl
xor	ebx, ds:(_t_fn+800h)[ecx*4]
mov	ecx, [esp+20h+var_18]
shr	ecx, 18h
xor	ebx, ds:(_t_fn+0C00h)[ecx*4]
mov	[esp+20h+var_14], ebx
mov	ecx, esi
movzx	ebx, cl
mov	ecx, ds:_t_fn[ebx*4]
xor	ecx, [kp+58h]
movzx	ebp, dh
mov	ebx, ds:(_t_fn+400h)[ebp*4]
xor	ebx, ecx
mov	ebp, [esp+20h+var_18]
shr	ebp, 10h
mov	ecx, ebp
movzx	ebp, cl
mov	ecx, ds:(_t_fn+800h)[ebp*4]
xor	ecx, ebx
mov	ebp, [esp+20h+var_1C]
shr	ebp, 18h
xor	ecx, ds:(_t_fn+0C00h)[ebp*4]
movzx	edx, dl
mov	ebp, ds:_t_fn[edx*4]
xor	ebp, [kp+5Ch]
mov	edx, [esp+20h+var_18]
movzx	ebx, dh
xor	ebp, ds:(_t_fn+400h)[ebx*4]
mov	edx, [esp+20h+var_1C]
shr	edx, 10h
movzx	edx, dl
xor	ebp, ds:(_t_fn+800h)[edx*4]
shr	esi, 18h
xor	ebp, ds:(_t_fn+0C00h)[esi*4]
mov	edx, edi
movzx	ebx, dl
mov	esi, ds:_t_fn[ebx*4]
xor	esi, [kp+60h]
mov	ebx, [esp+20h+var_14]
movzx	edx, bh
xor	esi, ds:(_t_fn+400h)[edx*4]
mov	edx, ecx
shr	edx, 10h
movzx	edx, dl
xor	esi, ds:(_t_fn+800h)[edx*4]
mov	edx, ebp
shr	edx, 18h
mov	edx, ds:(_t_fn+0C00h)[edx*4]
xor	edx, esi
mov	[esp+20h+var_18], edx
movzx	edx, bl
mov	esi, ds:_t_fn[edx*4]
xor	esi, [kp+64h]
movzx	edx, ch
xor	esi, ds:(_t_fn+400h)[edx*4]
mov	edx, ebp
shr	edx, 10h
movzx	edx, dl
xor	esi, ds:(_t_fn+800h)[edx*4]
mov	edx, edi
shr	edx, 18h
mov	edx, ds:(_t_fn+0C00h)[edx*4]
xor	edx, esi
mov	[esp+20h+var_1C], edx
movzx	edx, cl
mov	edx, ds:_t_fn[edx*4]
mov	ebx, [kp+68h]
xor	ebx, edx
mov	edx, ebp
movzx	esi, dh
mov	edx, ds:(_t_fn+400h)[esi*4]
xor	edx, ebx
mov	esi, edi
shr	esi, 10h
and	esi, 0FFh
xor	edx, ds:(_t_fn+800h)[esi*4]
mov	esi, [esp+20h+var_14]
shr	esi, 18h
xor	edx, ds:(_t_fn+0C00h)[esi*4]
mov	ebx, ebp
movzx	ebp, bl
mov	esi, ds:_t_fn[ebp*4]
xor	esi, [kp+6Ch]
mov	ebx, edi
movzx	edi, bh
xor	esi, ds:(_t_fn+400h)[edi*4]
mov	ebx, [esp+20h+var_14]
shr	ebx, 10h
movzx	ebx, bl
xor	esi, ds:(_t_fn+800h)[ebx*4]
shr	ecx, 18h
mov	edi, ds:(_t_fn+0C00h)[ecx*4]
xor	edi, esi
movzx	ecx, byte ptr [esp+20h+var_18]
mov	esi, ds:_t_fn[ecx*4]
xor	esi, [kp+70h]
mov	ebx, [esp+20h+var_1C]
movzx	ecx, bh
xor	esi, ds:(_t_fn+400h)[ecx*4]
mov	ecx, edx
shr	ecx, 10h
movzx	ecx, cl
xor	esi, ds:(_t_fn+800h)[ecx*4]
mov	ecx, edi
shr	ecx, 18h
xor	esi, ds:(_t_fn+0C00h)[ecx*4]
movzx	ecx, bl
mov	ebx, ds:_t_fn[ecx*4]
xor	ebx, [kp+74h]
movzx	ecx, dh
xor	ebx, ds:(_t_fn+400h)[ecx*4]
mov	ecx, edi
shr	ecx, 10h
movzx	ecx, cl
xor	ebx, ds:(_t_fn+800h)[ecx*4]
mov	ecx, [esp+20h+var_18]
shr	ecx, 18h
xor	ebx, ds:(_t_fn+0C00h)[ecx*4]
mov	[esp+20h+var_20], ebx
movzx	ecx, dl
mov	ecx, ds:_t_fn[ecx*4]
mov	ebx, [kp+78h]
xor	ebx, ecx
mov	ecx, edi
movzx	ebp, ch
xor	ebx, ds:(_t_fn+400h)[ebp*4]
mov	ebp, [esp+20h+var_18]
shr	ebp, 10h
mov	ecx, ebp
movzx	ebp, cl
mov	ecx, ds:(_t_fn+800h)[ebp*4]
xor	ecx, ebx
mov	ebp, [esp+20h+var_1C]
shr	ebp, 18h
xor	ecx, ds:(_t_fn+0C00h)[ebp*4]
and	edi, 0FFh
mov	edi, ds:_t_fn[edi*4]
xor	edi, [kp+7Ch]
mov	ebx, [esp+20h+var_18]
movzx	ebp, bh
xor	edi, ds:(_t_fn+400h)[ebp*4]
mov	ebp, [esp+20h+var_1C]
shr	ebp, 10h
mov	ebx, ebp
movzx	ebp, bl
xor	edi, ds:(_t_fn+800h)[ebp*4]
shr	edx, 18h
xor	edi, ds:(_t_fn+0C00h)[edx*4]
mov	ebx, esi
movzx	edx, bl
mov	ebp, ds:_t_fn[edx*4]
xor	ebp, [kp+80h]
mov	ebx, [esp+20h+var_20]
movzx	edx, bh
xor	ebp, ds:(_t_fn+400h)[edx*4]
mov	edx, ecx
shr	edx, 10h
movzx	edx, dl
xor	ebp, ds:(_t_fn+800h)[edx*4]
mov	edx, edi
shr	edx, 18h
mov	edx, ds:(_t_fn+0C00h)[edx*4]
xor	edx, ebp
mov	[esp+20h+var_14], edx
movzx	edx, bl
mov	edx, ds:_t_fn[edx*4]
xor	edx, [kp+84h]
movzx	ebp, ch
xor	edx, ds:(_t_fn+400h)[ebp*4]
mov	ebp, edi
shr	ebp, 10h
mov	ebx, ebp
movzx	ebp, bl
xor	edx, ds:(_t_fn+800h)[ebp*4]
mov	ebp, esi
shr	ebp, 18h
xor	edx, ds:(_t_fn+0C00h)[ebp*4]
movzx	ebp, cl
mov	ebp, ds:_t_fn[ebp*4]
xor	ebp, [kp+88h]
mov	[esp+20h+var_1C], ebp
mov	ebx, edi
movzx	ebp, bh
mov	ebx, [esp+20h+var_1C]
xor	ebx, ds:(_t_fn+400h)[ebp*4]
mov	[esp+20h+var_1C], ebx
mov	ebp, esi
shr	ebp, 10h
mov	ebx, ebp
movzx	ebp, bl
mov	ebx, [esp+20h+var_1C]
xor	ebx, ds:(_t_fn+800h)[ebp*4]
mov	ebp, [esp+20h+var_20]
shr	ebp, 18h
mov	ebp, ds:(_t_fn+0C00h)[ebp*4]
xor	ebp, ebx
and	edi, 0FFh
mov	edi, ds:_t_fn[edi*4]
xor	edi, [kp+8Ch]
mov	ebx, esi
movzx	esi, bh
xor	edi, ds:(_t_fn+400h)[esi*4]
mov	ebx, [esp+20h+var_20]
shr	ebx, 10h
movzx	ebx, bl
xor	edi, ds:(_t_fn+800h)[ebx*4]
shr	ecx, 18h
xor	edi, ds:(_t_fn+0C00h)[ecx*4]
mov	ecx, edi
movzx	ebx, byte ptr [esp+20h+var_14]
mov	edi, ds:_t_fn[ebx*4]
xor	edi, [kp+90h]
movzx	ebx, dh
xor	edi, ds:(_t_fn+400h)[ebx*4]
mov	ebx, ebp
shr	ebx, 10h
movzx	ebx, bl
xor	edi, ds:(_t_fn+800h)[ebx*4]
mov	ebx, ecx
shr	ebx, 18h
xor	edi, ds:(_t_fn+0C00h)[ebx*4]
movzx	ebx, dl
mov	esi, ds:_t_fn[ebx*4]
xor	esi, [kp+94h]
mov	ebx, ebp
movzx	ebx, bh
xor	esi, ds:(_t_fn+400h)[ebx*4]
mov	ebx, ecx
shr	ebx, 10h
movzx	ebx, bl
xor	esi, ds:(_t_fn+800h)[ebx*4]
mov	ebx, [esp+20h+var_14]
shr	ebx, 18h
mov	ebx, ds:(_t_fn+0C00h)[ebx*4]
xor	ebx, esi
mov	[esp+20h+var_18], ebx
mov	ebx, ebp
movzx	esi, bl
mov	esi, ds:_t_fn[esi*4]
xor	esi, [kp+98h]
movzx	ebx, ch
xor	esi, ds:(_t_fn+400h)[ebx*4]
mov	ebx, [esp+20h+var_14]
shr	ebx, 10h
movzx	ebx, bl
xor	esi, ds:(_t_fn+800h)[ebx*4]
mov	ebx, edx
shr	ebx, 18h
mov	ebx, ds:(_t_fn+0C00h)[ebx*4]
xor	ebx, esi
mov	[esp+20h+var_1C], ebx
movzx	ecx, cl
mov	ebx, ds:_t_fn[ecx*4]
mov	esi, [kp+9Ch]
xor	esi, ebx
mov	ebx, [esp+20h+var_14]
movzx	ecx, bh
mov	ebx, ds:(_t_fn+400h)[ecx*4]
xor	ebx, esi
shr	edx, 10h
movzx	edx, dl
xor	ebx, ds:(_t_fn+800h)[edx*4]
shr	ebp, 18h
mov	edx, ds:(_t_fn+0C00h)[ebp*4]
xor	edx, ebx
mov	ebx, edi
movzx	ecx, bl
mov	esi, ds:_t_fl[ecx*4]
xor	esi, [kp+0A0h]
mov	ebx, [esp+20h+var_18]
movzx	ecx, bh
xor	esi, ds:(_t_fl+400h)[ecx*4]
mov	ecx, [esp+20h+var_1C]
shr	ecx, 10h
movzx	ecx, cl
xor	esi, ds:(_t_fl+800h)[ecx*4]
mov	ecx, edx
shr	ecx, 18h
xor	esi, ds:(_t_fl+0C00h)[ecx*4]
movzx	ecx, bl
mov	ebx, ds:_t_fl[ecx*4]
mov	ebp, [kp+0A4h]
xor	ebp, ebx
mov	ebx, [esp+20h+var_1C]
movzx	ecx, bh
mov	ebx, ds:(_t_fl+400h)[ecx*4]
xor	ebx, ebp
mov	ecx, edx
shr	ecx, 10h
movzx	ecx, cl
xor	ebx, ds:(_t_fl+800h)[ecx*4]
mov	ecx, edi
shr	ecx, 18h
xor	ebx, ds:(_t_fl+0C00h)[ecx*4]
mov	[esp+20h+var_20], ebx
movzx	ecx, byte ptr [esp+20h+var_1C]
mov	ecx, ds:_t_fl[ecx*4]
xor	ecx, [kp+0A8h]
movzx	ebp, dh
xor	ecx, ds:(_t_fl+400h)[ebp*4]
mov	ebp, edi
shr	ebp, 10h
mov	ebx, ebp
movzx	ebp, bl
xor	ecx, ds:(_t_fl+800h)[ebp*4]
mov	ebp, [esp+20h+var_18]
shr	ebp, 18h
xor	ecx, ds:(_t_fl+0C00h)[ebp*4]
movzx	edx, dl
mov	edx, ds:_t_fl[edx*4]
xor	edx, [kp+0ACh]
mov	kp, edi
movzx	edi, ah
xor	edx, ds:(_t_fl+400h)[edi*4]
mov	eax, [esp+20h+var_18]
shr	eax, 10h
movzx	eax, al
xor	edx, ds:(_t_fl+800h)[eax*4]
mov	eax, [esp+20h+var_1C]
shr	eax, 18h
xor	edx, ds:(_t_fl+0C00h)[eax*4]
jmp	loc_641E8E02
align 4
mov	ebx, esi
movzx	eax, bl
mov	edi, ds:_t_fn[eax*4]
xor	edi, [kp+10h]
mov	ebx, [esp+20h+var_20]
movzx	eax, bh
xor	edi, ds:(_t_fn+400h)[eax*4]
mov	eax, ecx
shr	eax, 10h
movzx	eax, al
xor	edi, ds:(_t_fn+800h)[eax*4]
mov	eax, edx
shr	eax, 18h
mov	eax, ds:(_t_fn+0C00h)[eax*4]
xor	eax, edi
mov	[esp+20h+var_14], eax
movzx	eax, bl
mov	edi, ds:_t_fn[eax*4]
xor	edi, [kp+14h]
movzx	eax, ch
xor	edi, ds:(_t_fn+400h)[eax*4]
mov	eax, edx
shr	eax, 10h
movzx	eax, al
xor	edi, ds:(_t_fn+800h)[eax*4]
mov	eax, esi
shr	eax, 18h
mov	eax, ds:(_t_fn+0C00h)[eax*4]
xor	eax, edi
mov	[esp+20h+var_18], eax
movzx	eax, cl
mov	edi, ds:_t_fn[eax*4]
xor	edi, [kp+18h]
movzx	eax, dh
xor	edi, ds:(_t_fn+400h)[eax*4]
mov	eax, esi
shr	eax, 10h
movzx	eax, al
xor	edi, ds:(_t_fn+800h)[eax*4]
mov	eax, ebx
shr	eax, 18h
mov	eax, ds:(_t_fn+0C00h)[eax*4]
xor	eax, edi
mov	[esp+20h+var_1C], eax
movzx	edx, dl
mov	eax, ds:_t_fn[edx*4]
xor	eax, [kp+1Ch]
mov	edx, esi
movzx	esi, dh
xor	eax, ds:(_t_fn+400h)[esi*4]
shr	ebx, 10h
movzx	ebx, bl
xor	eax, ds:(_t_fn+800h)[ebx*4]
shr	ecx, 18h
xor	eax, ds:(_t_fn+0C00h)[ecx*4]
lea	edi, [kp+20h]
movzx	edx, byte ptr [esp+20h+var_14]
mov	esi, ds:_t_fn[edx*4]
xor	esi, [cx_0_0+20h]
mov	ecx, [esp+20h+var_18]
movzx	edx, ch
xor	esi, ds:(_t_fn+400h)[edx*4]
mov	edx, [esp+20h+var_1C]
shr	edx, 10h
movzx	edx, dl
xor	esi, ds:(_t_fn+800h)[edx*4]
mov	edx, eax
shr	edx, 18h
xor	esi, ds:(_t_fn+0C00h)[edx*4]
movzx	edx, cl
mov	ebx, ds:_t_fn[edx*4]
xor	ebx, [cx_0_0+24h]
mov	ecx, [esp+20h+var_1C]
movzx	edx, ch
xor	ebx, ds:(_t_fn+400h)[edx*4]
mov	edx, eax
shr	edx, 10h
movzx	edx, dl
xor	ebx, ds:(_t_fn+800h)[edx*4]
mov	edx, [esp+20h+var_14]
shr	edx, 18h
xor	ebx, ds:(_t_fn+0C00h)[edx*4]
mov	[esp+20h+var_20], ebx
movzx	edx, cl
mov	ecx, ds:_t_fn[edx*4]
xor	ecx, [cx_0_0+28h]
movzx	edx, ah
xor	ecx, ds:(_t_fn+400h)[edx*4]
mov	edx, [esp+20h+var_14]
shr	edx, 10h
movzx	edx, dl
xor	ecx, ds:(_t_fn+800h)[edx*4]
mov	edx, [esp+20h+var_18]
shr	edx, 18h
xor	ecx, ds:(_t_fn+0C00h)[edx*4]
movzx	eax, al
mov	edx, ds:_t_fn[eax*4]
xor	edx, [cx_0_0+2Ch]
mov	ebx, [esp+20h+var_14]
movzx	eax, bh
xor	edx, ds:(_t_fn+400h)[eax*4]
mov	eax, [esp+20h+var_18]
shr	eax, 10h
movzx	eax, al
xor	edx, ds:(_t_fn+800h)[eax*4]
mov	eax, [esp+20h+var_1C]
shr	eax, 18h
xor	edx, ds:(_t_fn+0C00h)[eax*4]
jmp	loc_641E8E8E
align 10h
public _silc_aes_ctr_encrypt
push	ebp
push	edi
push	esi
push	ebx
sub	esp, 28h
mov	edi, [esp+38h+context]
mov	ebp, [esp+38h+src]
mov	ecx, [esp+38h+dst]
mov	esi, [esp+38h+iv]
movzx	eax, byte ptr [edi+0F2h]
test	i, i
jnz	short loc_641E9B94
mov	al, 10h
mov	edx, [esp+38h+len]
test	edx, edx
jz	loc_641E9CDC
lea	edx, [context_0+0F4h]
mov	[esp+38h+var_14], edx
xor	ebx, ebx
lea	edx, [iv_0+0Fh]
mov	[esp+38h+var_28], edx
lea	edx, [iv_0+0Eh]
mov	[esp+38h+var_24], edx
lea	edx, [iv_0+0Dh]
mov	[esp+38h+var_20], edx
lea	edx, [iv_0+0Ch]
mov	[esp+38h+var_1C], edx
lea	edx, [iv_0+0Bh]
mov	[esp+38h+var_18], edx
jmp	short loc_641E9BF0
align 4
mov	edx, i
inc	i
mov	dl, [context_0+edx+0F4h]
xor	dl, [src_0+ebx+0]
mov	[ecx+ebx], dl
inc	ebx
cmp	ebx, [esp+38h+len]
jz	loc_641E9CDC
cmp	i, 10h
jnz	short loc_641E9BD4
mov	edx, [esp+38h+var_28]
mov	al, [edx]
inc	eax
mov	[edx], al
test	al, al
jnz	loc_641E9CB2
mov	edx, [esp+38h+var_24]
mov	al, [edx]
inc	eax
mov	[edx], al
test	al, al
jnz	loc_641E9CB2
mov	edx, [esp+38h+var_20]
mov	al, [edx]
inc	eax
mov	[edx], al
test	al, al
jnz	loc_641E9CB2
mov	edx, [esp+38h+var_1C]
mov	al, [edx]
inc	eax
mov	[edx], al
test	al, al
jnz	short loc_641E9CB2
mov	edx, [esp+38h+var_18]
mov	al, [edx]
inc	eax
mov	[edx], al
test	al, al
jnz	short loc_641E9CB2
mov	al, [iv_0+0Ah]
inc	eax
mov	[iv_0+0Ah], al
test	al, al
jnz	short loc_641E9CB2
mov	al, [iv_0+9]
inc	eax
mov	[iv_0+9], al
test	al, al
jnz	short loc_641E9CB2
mov	al, [iv_0+8]
inc	eax
mov	[iv_0+8], al
test	al, al
jnz	short loc_641E9CB2
mov	al, [iv_0+7]
inc	eax
mov	[iv_0+7], al
test	al, al
jnz	short loc_641E9CB2
mov	al, [iv_0+6]
inc	eax
mov	[iv_0+6], al
test	al, al
jnz	short loc_641E9CB2
mov	al, [iv_0+5]
inc	eax
mov	[iv_0+5], al
test	al, al
jnz	short loc_641E9CB2
mov	al, [iv_0+4]
inc	eax
mov	[iv_0+4], al
test	al, al
jnz	short loc_641E9CB2
mov	al, [iv_0+3]
inc	eax
mov	[iv_0+3], al
test	al, al
jnz	short loc_641E9CB2
mov	al, [iv_0+2]
inc	eax
mov	[iv_0+2], al
test	al, al
jnz	short loc_641E9CB2
mov	al, [iv_0+1]
inc	eax
mov	[iv_0+1], al
test	al, al
jnz	short loc_641E9CB2
inc	byte ptr [iv_0]
			
mov	[esp+38h+cx_0],	context_0 
mov	eax, [esp+38h+var_14]
mov	[esp+38h+out], eax 
mov	[esp+38h+in], iv_0 
mov	[esp+38h+var_2C], dst_0
call	_aes_encrypt
mov	eax, 1
xor	edx, edx
mov	ecx, [esp+38h+var_2C]
jmp	loc_641E9BD7
align 4
			
mov	[context_0+0F2h], al
mov	al, 1
add	esp, 28h
pop	ebx
pop	iv_0
pop	context_0
pop	src_0
retn
public _aes_decrypt
push	ebp
push	edi
push	esi
push	ebx
sub	esp, 14h
mov	eax, [esp+24h+in]
movzx	esi, byte ptr [eax+3]
shl	esi, 18h
movzx	edx, byte ptr [eax+2]
shl	edx, 10h
or	esi, edx
movzx	edx, byte ptr [eax]
or	esi, edx
movzx	edx, byte ptr [eax+1]
shl	edx, 8
or	esi, edx
mov	edx, [esp+24h+cx_0]
xor	esi, [edx]
movzx	ebx, byte ptr [eax+7]
shl	ebx, 18h
movzx	edx, byte ptr [eax+6]
shl	edx, 10h
or	ebx, edx
movzx	edx, byte ptr [eax+4]
or	ebx, edx
movzx	edx, byte ptr [eax+5]
shl	edx, 8
or	ebx, edx
mov	ecx, [esp+24h+cx_0]
xor	ebx, [ecx+4]
mov	[esp+24h+var_24], ebx
movzx	ecx, byte ptr [eax+0Bh]
shl	ecx, 18h
movzx	edx, byte ptr [eax+0Ah]
shl	edx, 10h
or	ecx, edx
movzx	edx, byte ptr [eax+8]
or	ecx, edx
movzx	edx, byte ptr [eax+9]
shl	edx, 8
or	ecx, edx
mov	ebx, [esp+24h+cx_0]
xor	ecx, [ebx+8]
movzx	edi, byte ptr [eax+0Fh]
shl	edi, 18h
movzx	edx, byte ptr [eax+0Eh]
shl	edx, 10h
or	edx, edi
movzx	edi, byte ptr [eax+0Ch]
or	edi, edx
movzx	edx, byte ptr [eax+0Dh]
shl	edx, 8
or	edx, edi
xor	edx, [ebx+0Ch]
mov	edi, ebx
mov	bl, [ebx+0F0h]
mov	al, bl
shr	al, 2
movzx	eax, al
mov	[esp+24h+var_14], eax
lea	eax, [edi+eax*4]
cmp	bl, 0C0h
jz	loc_641EA023
cmp	bl, 0E0h
jz	loc_641E9E3C
cmp	bl, 0A0h
jz	loc_641EA20B
mov	ebx, esi
mov	edi, [esp+24h+out]
mov	[edi], bl
mov	kp, esi
shr	eax, 8
mov	[edi+1], al
mov	eax, esi
shr	eax, 10h
mov	[edi+2], al
mov	eax, esi
shr	eax, 18h
mov	[edi+3], al
mov	al, byte ptr [esp+24h+var_24]
mov	[edi+4], al
mov	eax, [esp+24h+var_24]
shr	eax, 8
mov	[edi+5], al
mov	eax, [esp+24h+var_24]
shr	eax, 10h
mov	[edi+6], al
mov	ebx, [esp+24h+var_24]
shr	ebx, 18h
mov	[edi+7], bl
mov	[edi+8], cl
mov	eax, ecx
shr	eax, 8
mov	[edi+9], al
mov	eax, ecx
shr	eax, 10h
mov	[edi+0Ah], al
shr	ecx, 18h
mov	[edi+0Bh], cl
mov	[edi+0Ch], dl
mov	eax, edx
shr	eax, 8
mov	[edi+0Dh], al
mov	eax, edx
shr	eax, 10h
mov	[edi+0Eh], al
shr	edx, 18h
mov	[edi+0Fh], dl
add	esp, 14h
pop	ebx
pop	esi
pop	edi
pop	ebp
retn
align 4
mov	ebx, esi
movzx	edi, bl
mov	ebp, ds:_t_in[edi*4]
xor	ebp, [kp-0D0h]
movzx	edi, dh
xor	ebp, ds:(_t_in+400h)[edi*4]
mov	edi, ecx
shr	edi, 10h
and	edi, 0FFh
xor	ebp, ds:(_t_in+800h)[edi*4]
mov	edi, [esp+24h+var_24]
shr	edi, 18h
mov	edi, ds:(_t_in+0C00h)[edi*4]
xor	edi, ebp
mov	[esp+24h+var_1C], edi
movzx	edi, byte ptr [esp+24h+var_24]
mov	ebp, ds:_t_in[edi*4]
xor	ebp, [kp-0CCh]
mov	ebx, esi
movzx	edi, bh
xor	ebp, ds:(_t_in+400h)[edi*4]
mov	edi, edx
shr	edi, 10h
and	edi, 0FFh
xor	ebp, ds:(_t_in+800h)[edi*4]
mov	edi, ecx
shr	edi, 18h
mov	edi, ds:(_t_in+0C00h)[edi*4]
xor	edi, ebp
mov	[esp+24h+var_20], edi
movzx	edi, cl
mov	edi, ds:_t_in[edi*4]
xor	edi, [kp-0C8h]
mov	ebx, [esp+24h+var_24]
movzx	ebp, bh
xor	edi, ds:(_t_in+400h)[ebp*4]
mov	ebp, esi
shr	ebp, 10h
mov	ebx, ebp
movzx	ebp, bl
xor	edi, ds:(_t_in+800h)[ebp*4]
mov	ebp, edx
shr	ebp, 18h
xor	edi, ds:(_t_in+0C00h)[ebp*4]
movzx	edx, dl
mov	edx, ds:_t_in[edx*4]
xor	edx, [kp-0C4h]
movzx	ecx, ch
xor	edx, ds:(_t_in+400h)[ecx*4]
mov	ebx, [esp+24h+var_24]
shr	ebx, 10h
movzx	ebx, bl
xor	edx, ds:(_t_in+800h)[ebx*4]
shr	esi, 18h
xor	edx, ds:(_t_in+0C00h)[esi*4]
movzx	ecx, byte ptr [esp+24h+var_1C]
mov	esi, ds:_t_in[ecx*4]
xor	esi, [kp-0C0h]
movzx	ecx, dh
xor	esi, ds:(_t_in+400h)[ecx*4]
mov	ecx, edi
shr	ecx, 10h
movzx	ecx, cl
xor	esi, ds:(_t_in+800h)[ecx*4]
mov	ecx, [esp+24h+var_20]
shr	ecx, 18h
xor	esi, ds:(_t_in+0C00h)[ecx*4]
movzx	ecx, byte ptr [esp+24h+var_20]
mov	ebx, ds:_t_in[ecx*4]
mov	ebp, [kp-0BCh]
xor	ebp, ebx
mov	ebx, [esp+24h+var_1C]
movzx	ecx, bh
mov	ebx, ds:(_t_in+400h)[ecx*4]
xor	ebx, ebp
mov	ecx, edx
shr	ecx, 10h
movzx	ecx, cl
xor	ebx, ds:(_t_in+800h)[ecx*4]
mov	ecx, edi
shr	ecx, 18h
xor	ebx, ds:(_t_in+0C00h)[ecx*4]
mov	[esp+24h+var_24], ebx
mov	ebx, edi
movzx	ecx, bl
mov	ecx, ds:_t_in[ecx*4]
xor	ecx, [kp-0B8h]
mov	ebx, [esp+24h+var_20]
movzx	ebp, bh
xor	ecx, ds:(_t_in+400h)[ebp*4]
mov	ebp, [esp+24h+var_1C]
shr	ebp, 10h
mov	ebx, ebp
movzx	ebp, bl
xor	ecx, ds:(_t_in+800h)[ebp*4]
mov	ebp, edx
shr	ebp, 18h
xor	ecx, ds:(_t_in+0C00h)[ebp*4]
movzx	edx, dl
mov	edx, ds:_t_in[edx*4]
xor	edx, [kp-0B4h]
mov	ebx, edi
movzx	edi, bh
xor	edx, ds:(_t_in+400h)[edi*4]
mov	ebp, [esp+24h+var_20]
shr	ebp, 10h
mov	ebx, ebp
movzx	ebp, bl
xor	edx, ds:(_t_in+800h)[ebp*4]
mov	ebp, [esp+24h+var_1C]
shr	ebp, 18h
xor	edx, ds:(_t_in+0C00h)[ebp*4]
mov	ebx, esi
movzx	edi, bl
mov	ebp, ds:_t_in[edi*4]
xor	ebp, [kp-0B0h]
movzx	edi, dh
xor	ebp, ds:(_t_in+400h)[edi*4]
mov	edi, ecx
shr	edi, 10h
and	edi, 0FFh
xor	ebp, ds:(_t_in+800h)[edi*4]
mov	edi, [esp+24h+var_24]
shr	edi, 18h
mov	edi, ds:(_t_in+0C00h)[edi*4]
xor	edi, ebp
mov	[esp+24h+var_1C], edi
movzx	edi, byte ptr [esp+24h+var_24]
mov	ebp, ds:_t_in[edi*4]
xor	ebp, [kp-0ACh]
mov	ebx, esi
movzx	edi, bh
xor	ebp, ds:(_t_in+400h)[edi*4]
mov	edi, edx
shr	edi, 10h
and	edi, 0FFh
xor	ebp, ds:(_t_in+800h)[edi*4]
mov	edi, ecx
shr	edi, 18h
mov	edi, ds:(_t_in+0C00h)[edi*4]
xor	edi, ebp
mov	[esp+24h+var_20], edi
movzx	edi, cl
mov	edi, ds:_t_in[edi*4]
xor	edi, [kp-0A8h]
mov	ebx, [esp+24h+var_24]
movzx	ebp, bh
xor	edi, ds:(_t_in+400h)[ebp*4]
mov	ebp, esi
shr	ebp, 10h
mov	ebx, ebp
movzx	ebp, bl
xor	edi, ds:(_t_in+800h)[ebp*4]
mov	ebp, edx
shr	ebp, 18h
xor	edi, ds:(_t_in+0C00h)[ebp*4]
movzx	edx, dl
mov	edx, ds:_t_in[edx*4]
xor	edx, [kp-0A4h]
movzx	ecx, ch
xor	edx, ds:(_t_in+400h)[ecx*4]
mov	ebx, [esp+24h+var_24]
shr	ebx, 10h
movzx	ebx, bl
xor	edx, ds:(_t_in+800h)[ebx*4]
shr	esi, 18h
xor	edx, ds:(_t_in+0C00h)[esi*4]
movzx	ecx, byte ptr [esp+24h+var_1C]
mov	esi, ds:_t_in[ecx*4]
xor	esi, [kp-0A0h]
movzx	ecx, dh
xor	esi, ds:(_t_in+400h)[ecx*4]
mov	ecx, edi
shr	ecx, 10h
movzx	ecx, cl
xor	esi, ds:(_t_in+800h)[ecx*4]
mov	ecx, [esp+24h+var_20]
shr	ecx, 18h
xor	esi, ds:(_t_in+0C00h)[ecx*4]
movzx	ecx, byte ptr [esp+24h+var_20]
mov	ebx, ds:_t_in[ecx*4]
mov	ebp, [kp-9Ch]
xor	ebp, ebx
mov	ebx, [esp+24h+var_1C]
movzx	ecx, bh
mov	ebx, ds:(_t_in+400h)[ecx*4]
xor	ebx, ebp
mov	ecx, edx
shr	ecx, 10h
movzx	ecx, cl
xor	ebx, ds:(_t_in+800h)[ecx*4]
mov	ecx, edi
shr	ecx, 18h
xor	ebx, ds:(_t_in+0C00h)[ecx*4]
mov	[esp+24h+var_24], ebx
mov	ebx, edi
movzx	ecx, bl
mov	ecx, ds:_t_in[ecx*4]
xor	ecx, [kp-98h]
mov	ebx, [esp+24h+var_20]
movzx	ebp, bh
xor	ecx, ds:(_t_in+400h)[ebp*4]
mov	ebp, [esp+24h+var_1C]
shr	ebp, 10h
mov	ebx, ebp
movzx	ebp, bl
xor	ecx, ds:(_t_in+800h)[ebp*4]
mov	ebp, edx
shr	ebp, 18h
xor	ecx, ds:(_t_in+0C00h)[ebp*4]
movzx	edx, dl
mov	edx, ds:_t_in[edx*4]
xor	edx, [kp-94h]
mov	ebx, edi
movzx	edi, bh
xor	edx, ds:(_t_in+400h)[edi*4]
mov	edi, [esp+24h+var_20]
shr	edi, 10h
and	edi, 0FFh
xor	edx, ds:(_t_in+800h)[edi*4]
mov	ebp, [esp+24h+var_1C]
shr	ebp, 18h
xor	edx, ds:(_t_in+0C00h)[ebp*4]
mov	ebx, esi
movzx	edi, bl
mov	ebp, ds:_t_in[edi*4]
xor	ebp, [kp-90h]
movzx	edi, dh
xor	ebp, ds:(_t_in+400h)[edi*4]
mov	edi, ecx
shr	edi, 10h
and	edi, 0FFh
xor	ebp, ds:(_t_in+800h)[edi*4]
mov	edi, [esp+24h+var_24]
shr	edi, 18h
mov	edi, ds:(_t_in+0C00h)[edi*4]
xor	edi, ebp
mov	[esp+24h+var_18], edi
movzx	edi, byte ptr [esp+24h+var_24]
mov	ebp, ds:_t_in[edi*4]
xor	ebp, [kp-8Ch]
mov	ebx, esi
movzx	edi, bh
xor	ebp, ds:(_t_in+400h)[edi*4]
mov	edi, edx
shr	edi, 10h
and	edi, 0FFh
xor	ebp, ds:(_t_in+800h)[edi*4]
mov	edi, ecx
shr	edi, 18h
mov	edi, ds:(_t_in+0C00h)[edi*4]
xor	edi, ebp
mov	[esp+24h+var_20], edi
movzx	edi, cl
mov	ebp, ds:_t_in[edi*4]
xor	ebp, [kp-88h]
mov	ebx, [esp+24h+var_24]
movzx	edi, bh
xor	ebp, ds:(_t_in+400h)[edi*4]
mov	edi, esi
shr	edi, 10h
and	edi, 0FFh
xor	ebp, ds:(_t_in+800h)[edi*4]
mov	edi, edx
shr	edi, 18h
xor	ebp, ds:(_t_in+0C00h)[edi*4]
movzx	edx, dl
mov	edx, ds:_t_in[edx*4]
xor	edx, [kp-84h]
movzx	ecx, ch
xor	edx, ds:(_t_in+400h)[ecx*4]
shr	ebx, 10h
movzx	ebx, bl
xor	edx, ds:(_t_in+800h)[ebx*4]
shr	esi, 18h
xor	edx, ds:(_t_in+0C00h)[esi*4]
movzx	ecx, byte ptr [esp+24h+var_18]
mov	ebx, ds:_t_in[ecx*4]
xor	ebx, [kp-80h]
movzx	ecx, dh
xor	ebx, ds:(_t_in+400h)[ecx*4]
mov	ecx, ebp
shr	ecx, 10h
movzx	ecx, cl
xor	ebx, ds:(_t_in+800h)[ecx*4]
mov	ecx, [esp+24h+var_20]
shr	ecx, 18h
xor	ebx, ds:(_t_in+0C00h)[ecx*4]
mov	[esp+24h+var_1C], ebx
movzx	ecx, byte ptr [esp+24h+var_20]
mov	ebx, ds:_t_in[ecx*4]
mov	esi, [kp-7Ch]
xor	esi, ebx
mov	ebx, [esp+24h+var_18]
movzx	ecx, bh
mov	ebx, ds:(_t_in+400h)[ecx*4]
xor	ebx, esi
mov	ecx, edx
shr	ecx, 10h
movzx	ecx, cl
xor	ebx, ds:(_t_in+800h)[ecx*4]
mov	ecx, ebp
shr	ecx, 18h
xor	ebx, ds:(_t_in+0C00h)[ecx*4]
mov	ecx, ebp
movzx	esi, cl
mov	esi, ds:_t_in[esi*4]
xor	esi, [kp-78h]
mov	ecx, [esp+24h+var_20]
movzx	edi, ch
xor	esi, ds:(_t_in+400h)[edi*4]
mov	ecx, [esp+24h+var_18]
shr	ecx, 10h
movzx	ecx, cl
xor	esi, ds:(_t_in+800h)[ecx*4]
mov	ecx, edx
shr	ecx, 18h
xor	esi, ds:(_t_in+0C00h)[ecx*4]
movzx	edx, dl
mov	edi, ds:_t_in[edx*4]
xor	edi, [kp-74h]
mov	edx, ebp
movzx	ebp, dh
xor	edi, ds:(_t_in+400h)[ebp*4]
mov	edx, [esp+24h+var_20]
shr	edx, 10h
movzx	edx, dl
xor	edi, ds:(_t_in+800h)[edx*4]
mov	edx, [esp+24h+var_18]
shr	edx, 18h
xor	edi, ds:(_t_in+0C00h)[edx*4]
movzx	edx, byte ptr [esp+24h+var_1C]
mov	edx, ds:_t_in[edx*4]
mov	ebp, [kp-70h]
xor	ebp, edx
mov	edx, edi
movzx	ecx, dh
mov	edx, ds:(_t_in+400h)[ecx*4]
xor	edx, ebp
mov	ecx, esi
shr	ecx, 10h
movzx	ecx, cl
xor	edx, ds:(_t_in+800h)[ecx*4]
mov	ecx, ebx
shr	ecx, 18h
xor	edx, ds:(_t_in+0C00h)[ecx*4]
mov	[esp+24h+var_18], edx
movzx	ecx, bl
mov	ecx, ds:_t_in[ecx*4]
mov	edx, [kp-6Ch]
xor	edx, ecx
mov	ecx, [esp+24h+var_1C]
movzx	ebp, ch
xor	edx, ds:(_t_in+400h)[ebp*4]
mov	ebp, edi
shr	ebp, 10h
mov	ecx, ebp
movzx	ebp, cl
mov	ecx, ds:(_t_in+800h)[ebp*4]
xor	ecx, edx
mov	ebp, esi
shr	ebp, 18h
xor	ecx, ds:(_t_in+0C00h)[ebp*4]
mov	edx, esi
movzx	ebp, dl
mov	ebp, ds:_t_in[ebp*4]
xor	ebp, [kp-68h]
mov	[esp+24h+var_20], ebp
movzx	ebp, bh
mov	edx, [esp+24h+var_20]
xor	edx, ds:(_t_in+400h)[ebp*4]
mov	[esp+24h+var_20], edx
mov	ebp, [esp+24h+var_1C]
shr	ebp, 10h
mov	edx, ebp
movzx	ebp, dl
mov	edx, [esp+24h+var_20]
xor	edx, ds:(_t_in+800h)[ebp*4]
mov	ebp, edi
shr	ebp, 18h
mov	ebp, ds:(_t_in+0C00h)[ebp*4]
xor	ebp, edx
and	edi, 0FFh
mov	edi, ds:_t_in[edi*4]
xor	edi, [kp-64h]
mov	edx, esi
movzx	esi, dh
xor	edi, ds:(_t_in+400h)[esi*4]
shr	ebx, 10h
movzx	ebx, bl
xor	edi, ds:(_t_in+800h)[ebx*4]
mov	ebx, [esp+24h+var_1C]
shr	ebx, 18h
xor	edi, ds:(_t_in+0C00h)[ebx*4]
mov	ebx, edi
movzx	esi, byte ptr [esp+24h+var_18]
mov	edi, ds:_t_in[esi*4]
xor	edi, [kp-60h]
movzx	esi, bh
xor	edi, ds:(_t_in+400h)[esi*4]
mov	esi, ebp
shr	esi, 10h
and	esi, 0FFh
xor	edi, ds:(_t_in+800h)[esi*4]
mov	esi, ecx
shr	esi, 18h
mov	esi, ds:(_t_in+0C00h)[esi*4]
xor	esi, edi
mov	[esp+24h+var_1C], esi
movzx	esi, cl
mov	edi, ds:_t_in[esi*4]
xor	edi, [kp-5Ch]
mov	edx, [esp+24h+var_18]
movzx	esi, dh
xor	edi, ds:(_t_in+400h)[esi*4]
mov	esi, ebx
shr	esi, 10h
and	esi, 0FFh
xor	edi, ds:(_t_in+800h)[esi*4]
mov	esi, ebp
shr	esi, 18h
mov	esi, ds:(_t_in+0C00h)[esi*4]
xor	esi, edi
mov	[esp+24h+var_20], esi
mov	edx, ebp
movzx	esi, dl
mov	esi, ds:_t_in[esi*4]
xor	esi, [kp-58h]
movzx	edi, ch
xor	esi, ds:(_t_in+400h)[edi*4]
mov	edi, [esp+24h+var_18]
shr	edi, 10h
and	edi, 0FFh
xor	esi, ds:(_t_in+800h)[edi*4]
mov	edi, ebx
shr	edi, 18h
xor	esi, ds:(_t_in+0C00h)[edi*4]
movzx	ebx, bl
mov	ebx, ds:_t_in[ebx*4]
xor	ebx, [kp-54h]
mov	edx, ebp
movzx	ebp, dh
xor	ebx, ds:(_t_in+400h)[ebp*4]
shr	ecx, 10h
movzx	ecx, cl
xor	ebx, ds:(_t_in+800h)[ecx*4]
mov	edx, [esp+24h+var_18]
shr	edx, 18h
xor	ebx, ds:(_t_in+0C00h)[edx*4]
mov	edx, ebx
movzx	ecx, byte ptr [esp+24h+var_1C]
mov	ecx, ds:_t_in[ecx*4]
xor	ecx, [kp-50h]
movzx	ebx, bh
xor	ecx, ds:(_t_in+400h)[ebx*4]
mov	ebx, esi
shr	ebx, 10h
movzx	ebx, bl
xor	ecx, ds:(_t_in+800h)[ebx*4]
mov	ebx, [esp+24h+var_20]
shr	ebx, 18h
xor	ecx, ds:(_t_in+0C00h)[ebx*4]
mov	[esp+24h+var_18], ecx
movzx	ebx, byte ptr [esp+24h+var_20]
mov	ebx, ds:_t_in[ebx*4]
mov	ecx, [kp-4Ch]
xor	ecx, ebx
mov	ebx, [esp+24h+var_1C]
movzx	edi, bh
mov	ebx, ds:(_t_in+400h)[edi*4]
xor	ebx, ecx
mov	edi, edx
shr	edi, 10h
and	edi, 0FFh
xor	ebx, ds:(_t_in+800h)[edi*4]
mov	edi, esi
shr	edi, 18h
xor	ebx, ds:(_t_in+0C00h)[edi*4]
mov	ecx, esi
movzx	edi, cl
mov	edi, ds:_t_in[edi*4]
xor	edi, [kp-48h]
mov	ecx, [esp+24h+var_20]
movzx	ebp, ch
xor	edi, ds:(_t_in+400h)[ebp*4]
mov	ebp, [esp+24h+var_1C]
shr	ebp, 10h
mov	ecx, ebp
movzx	ebp, cl
xor	edi, ds:(_t_in+800h)[ebp*4]
mov	ebp, edx
shr	ebp, 18h
xor	edi, ds:(_t_in+0C00h)[ebp*4]
movzx	edx, dl
mov	edx, ds:_t_in[edx*4]
xor	edx, [kp-44h]
mov	ecx, esi
movzx	esi, ch
xor	edx, ds:(_t_in+400h)[esi*4]
mov	esi, [esp+24h+var_20]
shr	esi, 10h
and	esi, 0FFh
xor	edx, ds:(_t_in+800h)[esi*4]
mov	esi, [esp+24h+var_1C]
shr	esi, 18h
xor	edx, ds:(_t_in+0C00h)[esi*4]
mov	esi, edx
movzx	edx, byte ptr [esp+24h+var_18]
mov	ebp, ds:_t_in[edx*4]
xor	ebp, [kp-40h]
mov	ecx, esi
movzx	edx, ch
xor	ebp, ds:(_t_in+400h)[edx*4]
mov	edx, edi
shr	edx, 10h
movzx	edx, dl
xor	ebp, ds:(_t_in+800h)[edx*4]
mov	edx, ebx
shr	edx, 18h
mov	edx, ds:(_t_in+0C00h)[edx*4]
xor	edx, ebp
mov	[esp+24h+var_1C], edx
movzx	edx, bl
mov	ebp, ds:_t_in[edx*4]
xor	ebp, [kp-3Ch]
mov	ecx, [esp+24h+var_18]
movzx	edx, ch
xor	ebp, ds:(_t_in+400h)[edx*4]
mov	edx, esi
shr	edx, 10h
movzx	edx, dl
xor	ebp, ds:(_t_in+800h)[edx*4]
mov	edx, edi
shr	edx, 18h
mov	edx, ds:(_t_in+0C00h)[edx*4]
xor	edx, ebp
mov	[esp+24h+var_20], edx
mov	ecx, edi
movzx	edx, cl
mov	edx, ds:_t_in[edx*4]
xor	edx, [kp-38h]
movzx	ebp, bh
xor	edx, ds:(_t_in+400h)[ebp*4]
mov	ebp, [esp+24h+var_18]
shr	ebp, 10h
mov	ecx, ebp
movzx	ebp, cl
xor	edx, ds:(_t_in+800h)[ebp*4]
mov	ebp, esi
shr	ebp, 18h
xor	edx, ds:(_t_in+0C00h)[ebp*4]
and	esi, 0FFh
mov	esi, ds:_t_in[esi*4]
xor	esi, [kp-34h]
mov	ecx, edi
movzx	edi, ch
xor	esi, ds:(_t_in+400h)[edi*4]
shr	ebx, 10h
movzx	ebx, bl
xor	esi, ds:(_t_in+800h)[ebx*4]
mov	ecx, [esp+24h+var_18]
shr	ecx, 18h
mov	edi, ds:(_t_in+0C00h)[ecx*4]
xor	edi, esi
movzx	ecx, byte ptr [esp+24h+var_1C]
mov	ecx, ds:_t_in[ecx*4]
mov	esi, [kp-30h]
xor	esi, ecx
mov	ecx, edi
movzx	ebx, ch
mov	ecx, ds:(_t_in+400h)[ebx*4]
xor	ecx, esi
mov	ebx, edx
shr	ebx, 10h
movzx	ebx, bl
xor	ecx, ds:(_t_in+800h)[ebx*4]
mov	ebx, [esp+24h+var_20]
shr	ebx, 18h
xor	ecx, ds:(_t_in+0C00h)[ebx*4]
mov	[esp+24h+var_24], ecx
movzx	ebx, byte ptr [esp+24h+var_20]
mov	ebx, ds:_t_in[ebx*4]
mov	ecx, [kp-2Ch]
xor	ecx, ebx
mov	ebx, [esp+24h+var_1C]
movzx	esi, bh
mov	ebx, ds:(_t_in+400h)[esi*4]
xor	ebx, ecx
mov	esi, edi
shr	esi, 10h
and	esi, 0FFh
xor	ebx, ds:(_t_in+800h)[esi*4]
mov	esi, edx
shr	esi, 18h
xor	ebx, ds:(_t_in+0C00h)[esi*4]
movzx	esi, dl
mov	esi, ds:_t_in[esi*4]
xor	esi, [kp-28h]
mov	ecx, [esp+24h+var_20]
movzx	ebp, ch
xor	esi, ds:(_t_in+400h)[ebp*4]
mov	ebp, [esp+24h+var_1C]
shr	ebp, 10h
mov	ecx, ebp
movzx	ebp, cl
xor	esi, ds:(_t_in+800h)[ebp*4]
mov	ebp, edi
shr	ebp, 18h
xor	esi, ds:(_t_in+0C00h)[ebp*4]
and	edi, 0FFh
mov	edi, ds:_t_in[edi*4]
xor	edi, [kp-24h]
movzx	edx, dh
xor	edi, ds:(_t_in+400h)[edx*4]
mov	edx, [esp+24h+var_20]
shr	edx, 10h
movzx	edx, dl
xor	edi, ds:(_t_in+800h)[edx*4]
mov	edx, [esp+24h+var_1C]
shr	edx, 18h
xor	edi, ds:(_t_in+0C00h)[edx*4]
movzx	edx, byte ptr [esp+24h+var_24]
mov	ebp, ds:_t_in[edx*4]
xor	ebp, [kp-20h]
mov	ecx, edi
movzx	edx, ch
xor	ebp, ds:(_t_in+400h)[edx*4]
mov	edx, esi
shr	edx, 10h
movzx	edx, dl
xor	ebp, ds:(_t_in+800h)[edx*4]
mov	edx, ebx
shr	edx, 18h
mov	edx, ds:(_t_in+0C00h)[edx*4]
xor	edx, ebp
mov	[esp+24h+var_18], edx
movzx	edx, bl
mov	edx, ds:_t_in[edx*4]
xor	edx, [kp-1Ch]
mov	ecx, [esp+24h+var_24]
movzx	ebp, ch
xor	edx, ds:(_t_in+400h)[ebp*4]
mov	ebp, edi
shr	ebp, 10h
mov	ecx, ebp
movzx	ebp, cl
xor	edx, ds:(_t_in+800h)[ebp*4]
mov	ebp, esi
shr	ebp, 18h
xor	edx, ds:(_t_in+0C00h)[ebp*4]
mov	ecx, esi
movzx	ebp, cl
mov	ebp, ds:_t_in[ebp*4]
xor	ebp, [kp-18h]
mov	[esp+24h+var_20], ebp
movzx	ebp, bh
mov	ecx, [esp+24h+var_20]
xor	ecx, ds:(_t_in+400h)[ebp*4]
mov	[esp+24h+var_20], ecx
mov	ebp, [esp+24h+var_24]
shr	ebp, 10h
mov	ecx, ebp
movzx	ebp, cl
mov	ecx, [esp+24h+var_20]
xor	ecx, ds:(_t_in+800h)[ebp*4]
mov	ebp, edi
shr	ebp, 18h
mov	ebp, ds:(_t_in+0C00h)[ebp*4]
xor	ebp, ecx
and	edi, 0FFh
mov	edi, ds:_t_in[edi*4]
xor	edi, [kp-14h]
mov	ecx, esi
movzx	esi, ch
xor	edi, ds:(_t_in+400h)[esi*4]
shr	ebx, 10h
movzx	ebx, bl
xor	edi, ds:(_t_in+800h)[ebx*4]
mov	ecx, [esp+24h+var_24]
shr	ecx, 18h
xor	edi, ds:(_t_in+0C00h)[ecx*4]
mov	ecx, edi
movzx	ebx, byte ptr [esp+24h+var_18]
mov	esi, ds:_t_in[ebx*4]
xor	esi, [kp-10h]
movzx	ebx, ch
xor	esi, ds:(_t_in+400h)[ebx*4]
mov	ebx, ebp
shr	ebx, 10h
movzx	ebx, bl
xor	esi, ds:(_t_in+800h)[ebx*4]
mov	ebx, edx
shr	ebx, 18h
mov	ebx, ds:(_t_in+0C00h)[ebx*4]
xor	ebx, esi
mov	[esp+24h+var_1C], ebx
movzx	ebx, dl
mov	esi, ds:_t_in[ebx*4]
xor	esi, [kp-0Ch]
mov	ebx, [esp+24h+var_18]
movzx	edi, bh
xor	esi, ds:(_t_in+400h)[edi*4]
mov	ebx, ecx
shr	ebx, 10h
movzx	ebx, bl
xor	esi, ds:(_t_in+800h)[ebx*4]
mov	ebx, ebp
shr	ebx, 18h
mov	ebx, ds:(_t_in+0C00h)[ebx*4]
xor	ebx, esi
mov	[esp+24h+var_20], ebx
mov	ebx, ebp
movzx	esi, bl
mov	edi, ds:_t_in[esi*4]
xor	edi, [kp-8]
movzx	ebx, dh
xor	edi, ds:(_t_in+400h)[ebx*4]
mov	ebx, [esp+24h+var_18]
shr	ebx, 10h
movzx	ebx, bl
xor	edi, ds:(_t_in+800h)[ebx*4]
mov	ebx, ecx
shr	ebx, 18h
xor	edi, ds:(_t_in+0C00h)[ebx*4]
movzx	ecx, cl
mov	ecx, ds:_t_in[ecx*4]
xor	ecx, [kp-4]
mov	ebx, ebp
movzx	ebp, bh
xor	ecx, ds:(_t_in+400h)[ebp*4]
shr	edx, 10h
movzx	edx, dl
xor	ecx, ds:(_t_in+800h)[edx*4]
mov	edx, [esp+24h+var_18]
shr	edx, 18h
xor	ecx, ds:(_t_in+0C00h)[edx*4]
mov	edx, ecx
movzx	ecx, byte ptr [esp+24h+var_1C]
mov	esi, ds:_t_il[ecx*4]
mov	ebp, [esp+24h+var_14]
mov	ecx, [esp+24h+cx_0]
xor	esi, [ecx+ebp*4]
movzx	ecx, dh
xor	esi, ds:(_t_il+400h)[ecx*4]
mov	ecx, edi
shr	ecx, 10h
movzx	ecx, cl
xor	esi, ds:(_t_il+800h)[ecx*4]
mov	ecx, [esp+24h+var_20]
shr	ecx, 18h
xor	esi, ds:(_t_il+0C00h)[ecx*4]
movzx	ecx, byte ptr [esp+24h+var_20]
mov	ebx, ds:_t_il[ecx*4]
mov	ebp, [kp+4]
xor	ebp, ebx
mov	ebx, [esp+24h+var_1C]
movzx	ecx, bh
mov	ebx, ds:(_t_il+400h)[ecx*4]
xor	ebx, ebp
mov	ecx, edx
shr	ecx, 10h
movzx	ecx, cl
xor	ebx, ds:(_t_il+800h)[ecx*4]
mov	ecx, edi
shr	ecx, 18h
xor	ebx, ds:(_t_il+0C00h)[ecx*4]
mov	[esp+24h+var_24], ebx
mov	ebx, edi
movzx	ecx, bl
mov	ecx, ds:_t_il[ecx*4]
xor	ecx, [kp+8]
mov	ebx, [esp+24h+var_20]
movzx	ebp, bh
xor	ecx, ds:(_t_il+400h)[ebp*4]
mov	ebp, [esp+24h+var_1C]
shr	ebp, 10h
mov	ebx, ebp
movzx	ebp, bl
xor	ecx, ds:(_t_il+800h)[ebp*4]
mov	ebp, edx
shr	ebp, 18h
xor	ecx, ds:(_t_il+0C00h)[ebp*4]
movzx	edx, dl
mov	edx, ds:_t_il[edx*4]
xor	edx, [kp+0Ch]
mov	kp, edi
movzx	edi, ah
xor	edx, ds:(_t_il+400h)[edi*4]
mov	eax, [esp+24h+var_20]
shr	eax, 10h
movzx	eax, al
xor	edx, ds:(_t_il+800h)[eax*4]
mov	eax, [esp+24h+var_1C]
shr	eax, 18h
xor	edx, ds:(_t_il+0C00h)[eax*4]
jmp	loc_641E9DBE
public _silc_aes_cbc_decrypt
push	ebp
push	edi
push	esi
push	ebx
sub	esp, 6Ch
mov	edx, [esp+7Ch+src]
mov	ebx, [esp+7Ch+dst]
mov	eax, [esp+7Ch+len]
mov	ebp, [esp+7Ch+iv]
test	al, 0Fh
jnz	loc_641EAE10
shr	len_0, 4
mov	[esp+7Ch+var_68], len_0
jz	loc_641EAE05
lea	len_0, [iv_0+1]
mov	[esp+7Ch+var_3C], eax
lea	ecx, [iv_0+2]
mov	[esp+7Ch+var_38], ecx
lea	esi, [iv_0+3]
mov	[esp+7Ch+var_34], esi
lea	edi, [iv_0+4]
mov	[esp+7Ch+var_40], edi
lea	eax, [iv_0+5]
mov	[esp+7Ch+var_30], eax
lea	ecx, [iv_0+6]
mov	[esp+7Ch+var_44], ecx
lea	esi, [iv_0+7]
mov	[esp+7Ch+var_54], esi
lea	edi, [iv_0+8]
mov	[esp+7Ch+var_50], edi
lea	eax, [iv_0+9]
mov	[esp+7Ch+var_4C], eax
lea	ecx, [iv_0+0Ah]
mov	[esp+7Ch+var_48], ecx
lea	esi, [iv_0+0Bh]
mov	[esp+7Ch+var_2C], esi
lea	edi, [iv_0+0Ch]
mov	[esp+7Ch+var_28], edi
lea	eax, [iv_0+0Dh]
mov	[esp+7Ch+var_24], eax
lea	ecx, [iv_0+0Eh]
mov	[esp+7Ch+var_58], ecx
lea	esi, [iv_0+0Fh]
mov	[esp+7Ch+var_5C], esi
lea	edi, [esp+7Ch+tmp]
mov	[esp+7Ch+var_6C], edi
mov	[esp+7Ch+var_64], iv_0
mov	iv_0, src_0
nop
mov	edi, [esp+7Ch+var_6C]
mov	esi, src_0
mov	ecx, 4
rep movsd
mov	eax, [esp+7Ch+context]
mov	[esp+7Ch+cx_0],	eax 
mov	[esp+7Ch+out], dst_0 
mov	[esp+7Ch+in], ebp 
call	_aes_decrypt
mov	edx, [esp+7Ch+var_34]
movzx	ecx, byte ptr [edx]
mov	src_0, [esp+7Ch+var_64]
movzx	eax, byte ptr [esi]
shl	eax, 18h
or	eax, ecx
mov	edi, [esp+7Ch+var_3C]
movzx	edx, byte ptr [edi]
shl	edx, 10h
or	eax, edx
mov	ecx, [esp+7Ch+var_38]
movzx	edx, byte ptr [ecx]
shl	edx, 8
or	eax, edx
movzx	ecx, byte ptr [dst_0]
shl	ecx, 18h
movzx	edx, byte ptr [dst_0+1]
shl	edx, 10h
or	ecx, edx
movzx	esi, byte ptr [dst_0+3]
or	ecx, esi
movzx	edx, byte ptr [dst_0+2]
shl	edx, 8
or	ecx, edx
xor	ecx, eax
mov	[esp+7Ch+var_70], ecx
mov	esi, [esp+7Ch+var_40]
movzx	edx, byte ptr [esi]
shl	edx, 18h
mov	edi, [esp+7Ch+var_30]
movzx	eax, byte ptr [edi]
shl	eax, 10h
or	eax, edx
mov	edx, [esp+7Ch+var_54]
movzx	esi, byte ptr [edx]
or	eax, esi
mov	ecx, [esp+7Ch+var_44]
movzx	esi, byte ptr [ecx]
shl	esi, 8
or	eax, esi
movzx	esi, byte ptr [dst_0+4]
shl	esi, 18h
movzx	edx, byte ptr [dst_0+5]
shl	edx, 10h
or	edx, esi
movzx	edi, byte ptr [dst_0+7]
or	edx, edi
movzx	esi, byte ptr [dst_0+6]
shl	esi, 8
or	edx, esi
xor	edx, eax
mov	edi, [esp+7Ch+var_50]
movzx	esi, byte ptr [edi]
shl	esi, 18h
mov	ecx, [esp+7Ch+var_4C]
movzx	eax, byte ptr [ecx]
shl	eax, 10h
or	esi, eax
mov	eax, [esp+7Ch+var_2C]
movzx	edi, byte ptr [eax]
or	esi, edi
mov	ecx, [esp+7Ch+var_48]
movzx	edi, byte ptr [ecx]
shl	edi, 8
or	esi, edi
movzx	edi, byte ptr [dst_0+8]
shl	edi, 18h
movzx	eax, byte ptr [dst_0+9]
shl	eax, 10h
or	eax, edi
movzx	edi, byte ptr [dst_0+0Bh]
or	eax, edi
movzx	edi, byte ptr [dst_0+0Ah]
shl	edi, 8
or	eax, edi
xor	eax, esi
mov	esi, [esp+7Ch+var_28]
movzx	edi, byte ptr [esi]
mov	ecx, edi
shl	ecx, 18h
mov	edi, [esp+7Ch+var_24]
movzx	esi, byte ptr [edi]
shl	esi, 10h
or	ecx, esi
mov	edi, [esp+7Ch+var_5C]
movzx	esi, byte ptr [edi]
or	ecx, esi
mov	edi, [esp+7Ch+var_58]
movzx	esi, byte ptr [edi]
shl	esi, 8
or	ecx, esi
movzx	edi, byte ptr [dst_0+0Ch]
shl	edi, 18h
movzx	esi, byte ptr [dst_0+0Dh]
shl	esi, 10h
or	edi, esi
movzx	esi, byte ptr [dst_0+0Fh]
or	edi, esi
movzx	esi, byte ptr [dst_0+0Eh]
shl	esi, 8
or	esi, edi
xor	esi, ecx
mov	edi, [esp+7Ch+var_70]
shr	edi, 18h
mov	ecx, edi
mov	[dst_0], cl
mov	edi, [esp+7Ch+var_70]
shr	edi, 10h
mov	ecx, edi
mov	[dst_0+1], cl
mov	edi, [esp+7Ch+var_70]
shr	edi, 8
mov	ecx, edi
mov	[dst_0+2], cl
mov	cl, byte ptr [esp+7Ch+var_70]
mov	[dst_0+3], cl
mov	ecx, edx
shr	ecx, 18h
mov	[dst_0+4], cl
mov	ecx, edx
shr	ecx, 10h
mov	[dst_0+5], cl
mov	ecx, edx
shr	ecx, 8
mov	[dst_0+6], cl
mov	[dst_0+7], dl
mov	edx, eax
shr	edx, 18h
mov	[dst_0+8], dl
mov	edx, eax
shr	edx, 10h
mov	[dst_0+9], dl
mov	edx, eax
shr	edx, 8
mov	[dst_0+0Ah], dl
mov	[dst_0+0Bh], al
mov	eax, esi
shr	eax, 18h
mov	[dst_0+0Ch], al
mov	eax, esi
shr	eax, 10h
mov	[dst_0+0Dh], al
mov	eax, esi
shr	eax, 8
mov	[dst_0+0Eh], al
mov	eax, esi
mov	[dst_0+0Fh], al
mov	edi, [esp+7Ch+var_64]
mov	esi, [esp+7Ch+var_6C]
mov	ecx, 4
rep movsd
add	src_0, 10h
add	dst_0, 10h
dec	[esp+7Ch+var_68]
jnz	loc_641EAC10
mov	al, 1
add	esp, 6Ch
pop	dst_0
pop	esi
pop	edi
pop	iv_0
retn
align 10h
xor	len_0, len_0
add	esp, 6Ch
pop	dst_0
pop	esi
pop	edi
pop	iv_0
retn
align 4
public _silc_aes_cbc_encrypt
push	ebp
push	edi
push	esi
push	ebx
sub	esp, 54h
mov	ebx, [esp+64h+src]
mov	eax, [esp+64h+len]
mov	ebp, [esp+64h+iv]
test	al, 0Fh
jnz	loc_641EB0D0
shr	len_0, 4
mov	[esp+64h+var_54], len_0
jz	loc_641EB0C4
lea	len_0, [iv_0+1]
mov	[esp+64h+var_18], eax
lea	edx, [iv_0+2]
mov	[esp+64h+var_1C], edx
lea	ecx, [iv_0+3]
mov	[esp+64h+var_20], ecx
lea	esi, [iv_0+4]
mov	[esp+64h+var_24], esi
lea	edi, [iv_0+5]
mov	[esp+64h+var_28], edi
lea	eax, [iv_0+6]
mov	[esp+64h+var_2C], eax
lea	edx, [iv_0+7]
mov	[esp+64h+var_30], edx
lea	ecx, [iv_0+8]
mov	[esp+64h+var_34], ecx
lea	esi, [iv_0+9]
mov	[esp+64h+var_38], esi
lea	edi, [iv_0+0Ah]
mov	[esp+64h+var_3C], edi
lea	eax, [iv_0+0Bh]
mov	[esp+64h+var_40], eax
lea	edx, [iv_0+0Ch]
mov	[esp+64h+var_44], edx
lea	ecx, [iv_0+0Dh]
mov	[esp+64h+var_48], ecx
lea	esi, [iv_0+0Eh]
mov	[esp+64h+var_4C], esi
lea	edi, [iv_0+0Fh]
mov	[esp+64h+var_50], edi
lea	esi, [esi+0]
mov	eax, [esp+64h+var_20]
movzx	ecx, byte ptr [eax]
movzx	eax, byte ptr [iv_0+0]
shl	eax, 18h
or	eax, ecx
mov	ecx, [esp+64h+var_18]
movzx	edx, byte ptr [ecx]
shl	edx, 10h
or	eax, edx
mov	esi, [esp+64h+var_1C]
movzx	edx, byte ptr [esi]
shl	edx, 8
or	eax, edx
movzx	ecx, byte ptr [src_0]
shl	ecx, 18h
movzx	edx, byte ptr [src_0+1]
shl	edx, 10h
or	ecx, edx
movzx	esi, byte ptr [src_0+3]
or	ecx, esi
movzx	edx, byte ptr [src_0+2]
shl	edx, 8
or	ecx, edx
xor	ecx, eax
mov	[esp+64h+var_58], ecx
mov	edi, [esp+64h+var_24]
movzx	edx, byte ptr [edi]
shl	edx, 18h
mov	ecx, [esp+64h+var_28]
movzx	eax, byte ptr [ecx]
shl	eax, 10h
or	eax, edx
mov	edi, [esp+64h+var_30]
movzx	esi, byte ptr [edi]
or	eax, esi
mov	edx, [esp+64h+var_2C]
movzx	esi, byte ptr [edx]
shl	esi, 8
or	eax, esi
movzx	esi, byte ptr [src_0+4]
shl	esi, 18h
movzx	edx, byte ptr [src_0+5]
shl	edx, 10h
or	edx, esi
movzx	edi, byte ptr [src_0+7]
or	edx, edi
movzx	esi, byte ptr [src_0+6]
shl	esi, 8
or	edx, esi
xor	edx, eax
mov	ecx, [esp+64h+var_34]
movzx	esi, byte ptr [ecx]
shl	esi, 18h
mov	edi, [esp+64h+var_38]
movzx	eax, byte ptr [edi]
shl	eax, 10h
or	esi, eax
mov	eax, [esp+64h+var_40]
movzx	edi, byte ptr [eax]
or	esi, edi
mov	ecx, [esp+64h+var_3C]
movzx	edi, byte ptr [ecx]
shl	edi, 8
or	esi, edi
movzx	edi, byte ptr [src_0+8]
shl	edi, 18h
movzx	eax, byte ptr [src_0+9]
shl	eax, 10h
or	eax, edi
movzx	edi, byte ptr [src_0+0Bh]
or	eax, edi
movzx	edi, byte ptr [src_0+0Ah]
shl	edi, 8
or	eax, edi
xor	eax, esi
mov	esi, [esp+64h+var_44]
movzx	edi, byte ptr [esi]
mov	ecx, edi
shl	ecx, 18h
mov	edi, [esp+64h+var_48]
movzx	esi, byte ptr [edi]
shl	esi, 10h
or	ecx, esi
mov	edi, [esp+64h+var_50]
movzx	esi, byte ptr [edi]
or	ecx, esi
mov	edi, [esp+64h+var_4C]
movzx	esi, byte ptr [edi]
shl	esi, 8
or	ecx, esi
movzx	edi, byte ptr [src_0+0Ch]
shl	edi, 18h
movzx	esi, byte ptr [src_0+0Dh]
shl	esi, 10h
or	edi, esi
movzx	esi, byte ptr [src_0+0Fh]
or	edi, esi
movzx	esi, byte ptr [src_0+0Eh]
shl	esi, 8
or	esi, edi
xor	esi, ecx
mov	edi, [esp+64h+var_58]
shr	edi, 18h
mov	ecx, edi
mov	[iv_0+0], cl
mov	edi, [esp+64h+var_58]
shr	edi, 10h
mov	[esp+64h+var_14], edi
mov	cl, byte ptr [esp+64h+var_14]
mov	edi, [esp+64h+var_18]
mov	[edi], cl
mov	ecx, [esp+64h+var_58]
shr	ecx, 8
mov	edi, [esp+64h+var_1C]
mov	[edi], cl
mov	cl, byte ptr [esp+64h+var_58]
mov	edi, [esp+64h+var_20]
mov	[edi], cl
mov	ecx, edx
shr	ecx, 18h
mov	edi, [esp+64h+var_24]
mov	[edi], cl
mov	ecx, edx
shr	ecx, 10h
mov	edi, [esp+64h+var_28]
mov	[edi], cl
mov	ecx, edx
shr	ecx, 8
mov	edi, [esp+64h+var_2C]
mov	[edi], cl
mov	ecx, [esp+64h+var_30]
mov	[ecx], dl
mov	edx, eax
shr	edx, 18h
mov	edi, [esp+64h+var_34]
mov	[edi], dl
mov	edx, eax
shr	edx, 10h
mov	ecx, [esp+64h+var_38]
mov	[ecx], dl
mov	edx, eax
shr	edx, 8
mov	edi, [esp+64h+var_3C]
mov	[edi], dl
mov	edx, [esp+64h+var_40]
mov	[edx], al
mov	eax, esi
shr	eax, 18h
mov	ecx, [esp+64h+var_44]
mov	[ecx], al
mov	eax, esi
shr	eax, 10h
mov	edi, [esp+64h+var_48]
mov	[edi], al
mov	eax, esi
shr	eax, 8
mov	edx, [esp+64h+var_4C]
mov	[edx], al
mov	ecx, esi
mov	edi, [esp+64h+var_50]
mov	[edi], cl
mov	eax, [esp+64h+context]
mov	[esp+64h+cx_0],	eax 
mov	[esp+64h+out], iv_0 
mov	[esp+64h+in], iv_0 
call	_aes_encrypt
mov	edi, [esp+64h+dst]
mov	esi, iv_0
mov	ecx, 4
rep movsd
add	src_0, 10h
add	[esp+64h+dst], 10h
dec	[esp+64h+var_54]
jnz	loc_641EAEB0
mov	al, 1
add	esp, 54h
pop	src_0
pop	esi
pop	edi
pop	iv_0
retn
align 10h
xor	len_0, len_0
add	esp, 54h
pop	src_0
pop	esi
pop	edi
pop	iv_0
retn
align 4
public _silc_aes_ctr_decrypt
push	ebp
push	edi
push	esi
push	ebx
sub	esp, 28h
mov	edi, [esp+38h+context]
mov	ebp, [esp+38h+src]
mov	ecx, [esp+38h+dst]
mov	esi, [esp+38h+iv]
movzx	eax, byte ptr [edi+0F2h]
test	eax, eax
jnz	short loc_641EB100
mov	al, 10h
mov	ebx, [esp+38h+len]
test	ebx, ebx
jz	loc_641EB248
lea	edx, [context_0+0F4h]
mov	[esp+38h+var_14], edx
xor	ebx, ebx
lea	edx, [iv_0+0Fh]
mov	[esp+38h+var_28], edx
lea	edx, [iv_0+0Eh]
mov	[esp+38h+var_24], edx
lea	edx, [iv_0+0Dh]
mov	[esp+38h+var_20], edx
lea	edx, [iv_0+0Ch]
mov	[esp+38h+var_1C], edx
lea	edx, [iv_0+0Bh]
mov	[esp+38h+var_18], edx
jmp	short loc_641EB15C
align 10h
mov	edx, eax
inc	eax
mov	dl, [context_0+edx+0F4h]
xor	dl, [src_0+ebx+0]
mov	[ecx+ebx], dl
inc	ebx
cmp	[esp+38h+len], ebx
jz	loc_641EB248
cmp	eax, 10h
jnz	short loc_641EB140
mov	edx, [esp+38h+var_28]
mov	al, [edx]
inc	eax
mov	[edx], al
test	al, al
jnz	loc_641EB21E
mov	edx, [esp+38h+var_24]
mov	al, [edx]
inc	eax
mov	[edx], al
test	al, al
jnz	loc_641EB21E
mov	edx, [esp+38h+var_20]
mov	al, [edx]
inc	eax
mov	[edx], al
test	al, al
jnz	loc_641EB21E
mov	edx, [esp+38h+var_1C]
mov	al, [edx]
inc	eax
mov	[edx], al
test	al, al
jnz	short loc_641EB21E
mov	edx, [esp+38h+var_18]
mov	al, [edx]
inc	eax
mov	[edx], al
test	al, al
jnz	short loc_641EB21E
mov	al, [iv_0+0Ah]
inc	eax
mov	[iv_0+0Ah], al
test	al, al
jnz	short loc_641EB21E
mov	al, [iv_0+9]
inc	eax
mov	[iv_0+9], al
test	al, al
jnz	short loc_641EB21E
mov	al, [iv_0+8]
inc	eax
mov	[iv_0+8], al
test	al, al
jnz	short loc_641EB21E
mov	al, [iv_0+7]
inc	eax
mov	[iv_0+7], al
test	al, al
jnz	short loc_641EB21E
mov	al, [iv_0+6]
inc	eax
mov	[iv_0+6], al
test	al, al
jnz	short loc_641EB21E
mov	al, [iv_0+5]
inc	eax
mov	[iv_0+5], al
test	al, al
jnz	short loc_641EB21E
mov	al, [iv_0+4]
inc	eax
mov	[iv_0+4], al
test	al, al
jnz	short loc_641EB21E
mov	al, [iv_0+3]
inc	eax
mov	[iv_0+3], al
test	al, al
jnz	short loc_641EB21E
mov	al, [iv_0+2]
inc	eax
mov	[iv_0+2], al
test	al, al
jnz	short loc_641EB21E
mov	al, [iv_0+1]
inc	eax
mov	[iv_0+1], al
test	al, al
jnz	short loc_641EB21E
inc	byte ptr [iv_0]
			
mov	[esp+38h+cx_0],	context_0 
mov	eax, [esp+38h+var_14]
mov	[esp+38h+out], eax 
mov	[esp+38h+in], iv_0 
mov	[esp+38h+var_2C], dst_0
call	_aes_encrypt
mov	eax, 1
xor	edx, edx
mov	ecx, [esp+38h+var_2C]
jmp	loc_641EB143
align 4
			
mov	[context_0+0F2h], al
mov	al, 1
add	esp, 28h
pop	ebx
pop	iv_0
pop	context_0
pop	src_0
retn
public _silc_aes_ctr_set_key
push	edi
push	esi
push	ebx
sub	esp, 8
mov	edx, [esp+14h+context]
mov	esi, [esp+14h+key]
mov	ebx, [esp+14h+keylen]
mov	ecx, 104h
xor	eax, eax
mov	edi, edx
rep stosb
cmp	ebx, 20h
jz	short loc_641EB2BC
jle	short loc_641EB29C
cmp	keylen_0, 0C0h
jz	short loc_641EB2A6
cmp	keylen_0, 100h
jz	short loc_641EB2BC
add	keylen_0, 0FFFFFF80h
jz	short loc_641EB2D4
mov	al, 1
add	esp, 8
pop	keylen_0
pop	key_0
pop	edi
retn
align 4
cmp	keylen_0, 10h
jz	short loc_641EB2D4
cmp	keylen_0, 18h
jnz	short loc_641EB291
mov	[esp+14h+cx_0],	context_0 
mov	[esp+14h+var_14], key_0	
call	_aes_encrypt_key192
mov	al, 1
add	esp, 8
pop	keylen_0
pop	key_0
pop	edi
retn
align 4
			
mov	[esp+14h+cx_0],	context_0 
mov	[esp+14h+var_14], key_0	
call	_aes_encrypt_key256
mov	al, 1
add	esp, 8
pop	keylen_0
pop	key_0
pop	edi
retn
align 4
			
mov	[esp+14h+cx_0],	context_0 
mov	[esp+14h+var_14], key_0	
call	_aes_encrypt_key128
mov	al, 1
add	esp, 8
pop	keylen_0
pop	key_0
pop	edi
retn
align 4
public _silc_aes_cbc_set_key
sub	esp, 8
mov	ecx, [esp+8+context]
mov	edx, [esp+8+key]
mov	eax, [esp+8+keylen]
cmp	[esp+8+encryption], 0
jnz	short loc_641EB328
cmp	keylen_0, 20h
jz	short loc_641EB378
jg	short loc_641EB350
cmp	keylen_0, 10h
jz	short loc_641EB363
cmp	keylen_0, 18h
jnz	short loc_641EB384
mov	[esp+8+cx_0], context_0	
mov	[esp+8+var_8], key_0 
call	_aes_decrypt_key192
mov	al, 1
add	esp, 8
retn
align 4
cmp	keylen_0, 20h
jz	short loc_641EB3A4
jle	short loc_641EB38C
cmp	keylen_0, 0C0h
jz	short loc_641EB396
cmp	keylen_0, 100h
jz	short loc_641EB3A4
add	keylen_0, 0FFFFFF80h
jnz	short loc_641EB384
mov	[esp+8+cx_0], context_0
mov	[esp+8+var_8], key_0 
call	_aes_encrypt_key128
jmp	short loc_641EB384
cmp	keylen_0, 0C0h
jz	short loc_641EB313
cmp	keylen_0, 100h
jz	short loc_641EB378
add	keylen_0, 0FFFFFF80h
jnz	short loc_641EB384
mov	[esp+8+cx_0], context_0
mov	[esp+8+var_8], key_0 
call	_aes_decrypt_key128
mov	al, 1
add	esp, 8
retn
align 4
			
mov	[esp+8+cx_0], context_0	
mov	[esp+8+var_8], key_0 
call	_aes_decrypt_key256
			
mov	al, 1
add	esp, 8
retn
align 4
cmp	keylen_0, 10h
jz	short loc_641EB342
cmp	keylen_0, 18h
jnz	short loc_641EB384
mov	[esp+8+cx_0], context_0	
mov	[esp+8+var_8], key_0 
call	_aes_encrypt_key192
jmp	short loc_641EB384
			
mov	[esp+8+cx_0], context_0
mov	[esp+8+var_8], key_0 
call	_aes_encrypt_key256
jmp	short loc_641EB384
align 4
public _silc_blowfish_cbc_set_iv
retn
align 4
public _silc_blowfish_cbc_context_len
mov	eax, 1048h
retn
align 10h
public _blowfish_encrypt
			
push	ebp
push	edi
push	esi
push	ebx
sub	esp, 48h
mov	eax, [esp+58h+ctx]
mov	esi, [esp+58h+in_blk]
mov	edx, [esp+58h+size]
cmp	edx, 7
jle	loc_641EB7FE
lea	ecx, [ctx_0+4]
mov	[esp+58h+var_14], ecx
lea	edi, [ctx_0+8]
mov	[esp+58h+var_1C], edi
lea	ecx, [ctx_0+0Ch]
mov	[esp+58h+var_20], ecx
lea	edi, [ctx_0+10h]
mov	[esp+58h+var_24], edi
lea	ecx, [ctx_0+14h]
mov	[esp+58h+var_28], ecx
lea	edi, [ctx_0+18h]
mov	[esp+58h+var_2C], edi
lea	ecx, [ctx_0+1Ch]
mov	[esp+58h+var_30], ecx
lea	edi, [ctx_0+20h]
mov	[esp+58h+var_34], edi
lea	ecx, [ctx_0+24h]
mov	[esp+58h+var_38], ecx
lea	edi, [ctx_0+28h]
mov	[esp+58h+var_3C], edi
lea	ecx, [ctx_0+2Ch]
mov	[esp+58h+var_40], ecx
lea	edi, [ctx_0+30h]
mov	[esp+58h+var_44], edi
lea	ecx, [ctx_0+34h]
mov	[esp+58h+var_48], ecx
lea	edi, [ctx_0+38h]
mov	[esp+58h+var_4C], edi
lea	ecx, [ctx_0+3Ch]
mov	[esp+58h+var_50], ecx
lea	edi, [ctx_0+40h]
mov	[esp+58h+var_54], edi
lea	ecx, [ctx_0+44h]
mov	[esp+58h+var_58], ecx
sub	size_0,	8
shr	edx, 3
lea	edx, ds:8[edx*8]
mov	[esp+58h+var_18], edx
xor	edx, edx
lea	in_blk_0, [in_blk_0+0]
mov	ebx, [in_blk_0+edx]
mov	edi, [in_blk_0+edx+4]
xor	yl, [ctx_0]
mov	ecx, [esp+58h+var_14]
xor	yr, [ecx]
mov	ecx, yl
shr	ecx, 10h
and	ecx, 0FFh
mov	ebp, yl
shr	ebp, 18h
mov	ecx, [ctx_0+ecx*4+448h]
add	ecx, [ctx_0+ebp*4+48h]
movzx	ebp, bh
xor	ecx, [ctx_0+ebp*4+848h]
movzx	ebp, bl
add	ecx, [ctx_0+ebp*4+0C48h]
xor	ecx, yr
mov	edi, [esp+58h+var_1C]
xor	yl, [edi]
mov	ebp, yr
shr	ebp, 10h
and	ebp, 0FFh
mov	edi, yr
shr	edi, 18h
mov	ebp, [ctx_0+ebp*4+448h]
add	ebp, [ctx_0+edi*4+48h]
movzx	edi, ch
xor	ebp, [ctx_0+edi*4+848h]
movzx	edi, cl
add	ebp, [ctx_0+edi*4+0C48h]
xor	yl, ebp
mov	edi, [esp+58h+var_20]
xor	yr, [edi]
mov	ebp, yl
shr	ebp, 10h
and	ebp, 0FFh
mov	edi, yl
shr	edi, 18h
mov	ebp, [ctx_0+ebp*4+448h]
add	ebp, [ctx_0+edi*4+48h]
movzx	edi, bh
xor	ebp, [ctx_0+edi*4+848h]
movzx	edi, bl
add	ebp, [ctx_0+edi*4+0C48h]
xor	yr, ebp
mov	edi, [esp+58h+var_24]
xor	yl, [edi]
mov	ebp, yr
shr	ebp, 10h
and	ebp, 0FFh
mov	edi, yr
shr	edi, 18h
mov	ebp, [ctx_0+ebp*4+448h]
add	ebp, [ctx_0+edi*4+48h]
movzx	edi, ch
xor	ebp, [ctx_0+edi*4+848h]
movzx	edi, cl
add	ebp, [ctx_0+edi*4+0C48h]
xor	yl, ebp
mov	edi, [esp+58h+var_28]
xor	yr, [edi]
mov	ebp, yl
shr	ebp, 10h
and	ebp, 0FFh
mov	edi, yl
shr	edi, 18h
mov	ebp, [ctx_0+ebp*4+448h]
add	ebp, [ctx_0+edi*4+48h]
movzx	edi, bh
xor	ebp, [ctx_0+edi*4+848h]
movzx	edi, bl
add	ebp, [ctx_0+edi*4+0C48h]
xor	yr, ebp
mov	edi, [esp+58h+var_2C]
xor	yl, [edi]
mov	ebp, yr
shr	ebp, 10h
and	ebp, 0FFh
mov	edi, yr
shr	edi, 18h
mov	ebp, [ctx_0+ebp*4+448h]
add	ebp, [ctx_0+edi*4+48h]
movzx	edi, ch
xor	ebp, [ctx_0+edi*4+848h]
movzx	edi, cl
add	ebp, [ctx_0+edi*4+0C48h]
xor	yl, ebp
mov	edi, [esp+58h+var_30]
xor	yr, [edi]
mov	ebp, yl
shr	ebp, 10h
and	ebp, 0FFh
mov	edi, yl
shr	edi, 18h
mov	ebp, [ctx_0+ebp*4+448h]
add	ebp, [ctx_0+edi*4+48h]
movzx	edi, bh
xor	ebp, [ctx_0+edi*4+848h]
movzx	edi, bl
add	ebp, [ctx_0+edi*4+0C48h]
xor	yr, ebp
mov	edi, [esp+58h+var_34]
xor	yl, [edi]
mov	ebp, yr
shr	ebp, 10h
and	ebp, 0FFh
mov	edi, yr
shr	edi, 18h
mov	ebp, [ctx_0+ebp*4+448h]
add	ebp, [ctx_0+edi*4+48h]
movzx	edi, ch
xor	ebp, [ctx_0+edi*4+848h]
movzx	edi, cl
add	ebp, [ctx_0+edi*4+0C48h]
xor	yl, ebp
mov	edi, [esp+58h+var_38]
xor	yr, [edi]
mov	ebp, yl
shr	ebp, 10h
and	ebp, 0FFh
mov	edi, yl
shr	edi, 18h
mov	ebp, [ctx_0+ebp*4+448h]
add	ebp, [ctx_0+edi*4+48h]
movzx	edi, bh
xor	ebp, [ctx_0+edi*4+848h]
movzx	edi, bl
add	ebp, [ctx_0+edi*4+0C48h]
xor	yr, ebp
mov	edi, [esp+58h+var_3C]
xor	yl, [edi]
mov	ebp, yr
shr	ebp, 10h
and	ebp, 0FFh
mov	edi, yr
shr	edi, 18h
mov	ebp, [ctx_0+ebp*4+448h]
add	ebp, [ctx_0+edi*4+48h]
movzx	edi, ch
xor	ebp, [ctx_0+edi*4+848h]
movzx	edi, cl
add	ebp, [ctx_0+edi*4+0C48h]
xor	yl, ebp
mov	edi, [esp+58h+var_40]
xor	yr, [edi]
mov	ebp, yl
shr	ebp, 10h
and	ebp, 0FFh
mov	edi, yl
shr	edi, 18h
mov	ebp, [ctx_0+ebp*4+448h]
add	ebp, [ctx_0+edi*4+48h]
movzx	edi, bh
xor	ebp, [ctx_0+edi*4+848h]
movzx	edi, bl
add	ebp, [ctx_0+edi*4+0C48h]
xor	yr, ebp
mov	edi, [esp+58h+var_44]
xor	yl, [edi]
mov	ebp, yr
shr	ebp, 10h
and	ebp, 0FFh
mov	edi, yr
shr	edi, 18h
mov	ebp, [ctx_0+ebp*4+448h]
add	ebp, [ctx_0+edi*4+48h]
movzx	edi, ch
xor	ebp, [ctx_0+edi*4+848h]
movzx	edi, cl
add	ebp, [ctx_0+edi*4+0C48h]
xor	yl, ebp
mov	edi, [esp+58h+var_48]
xor	yr, [edi]
mov	ebp, yl
shr	ebp, 10h
and	ebp, 0FFh
mov	edi, yl
shr	edi, 18h
mov	ebp, [ctx_0+ebp*4+448h]
add	ebp, [ctx_0+edi*4+48h]
movzx	edi, bh
xor	ebp, [ctx_0+edi*4+848h]
movzx	edi, bl
add	ebp, [ctx_0+edi*4+0C48h]
xor	yr, ebp
mov	edi, [esp+58h+var_4C]
xor	yl, [edi]
mov	ebp, yr
shr	ebp, 10h
and	ebp, 0FFh
mov	edi, yr
shr	edi, 18h
mov	ebp, [ctx_0+ebp*4+448h]
add	ebp, [ctx_0+edi*4+48h]
movzx	edi, ch
xor	ebp, [ctx_0+edi*4+848h]
movzx	edi, cl
add	ebp, [ctx_0+edi*4+0C48h]
xor	yl, ebp
mov	edi, [esp+58h+var_50]
xor	yr, [edi]
mov	ebp, yl
shr	ebp, 10h
and	ebp, 0FFh
mov	edi, yl
shr	edi, 18h
mov	ebp, [ctx_0+ebp*4+448h]
add	ebp, [ctx_0+edi*4+48h]
movzx	edi, bh
xor	ebp, [ctx_0+edi*4+848h]
movzx	edi, bl
add	ebp, [ctx_0+edi*4+0C48h]
xor	yr, ebp
mov	edi, [esp+58h+var_54]
xor	yl, [edi]
mov	ebp, yr
shr	ebp, 10h
and	ebp, 0FFh
mov	edi, yr
shr	edi, 18h
mov	ebp, [ctx_0+ebp*4+448h]
add	ebp, [ctx_0+edi*4+48h]
movzx	edi, ch
xor	ebp, [ctx_0+edi*4+848h]
movzx	edi, cl
add	ebp, [ctx_0+edi*4+0C48h]
xor	yl, ebp
mov	edi, [esp+58h+var_58]
xor	yr, [edi]
mov	edi, [esp+58h+out_blk]
mov	[edi+edx], ecx
mov	[edi+edx+4], yl
add	edx, 8
cmp	edx, [esp+58h+var_18]
jnz	loc_641EB468
xor	ctx_0, ctx_0
add	esp, 48h
pop	yl
pop	in_blk_0
pop	edi
pop	ebp
retn
public _silc_blowfish_cbc_encrypt
push	ebp
push	edi
push	esi
push	ebx
sub	esp, 20h
mov	esi, [esp+38h]
mov	edi, [esp+3Ch]
mov	eax, [esp+44h]
mov	edx, [eax]
mov	ecx, eax
mov	eax, [eax+4]
mov	ebx, ecx
mov	ecx, [ecx+8]
mov	ebx, [ebx+0Ch]
xor	edx, [esi]
mov	[esp+10h], edx
xor	eax, [esi+4]
mov	[esp+14h], eax
xor	ecx, [esi+8]
mov	[esp+18h], ecx
xor	ebx, [esi+0Ch]
mov	[esp+1Ch], ebx
mov	dword ptr [esp+0Ch], 10h 
lea	ebp, [esp+10h]
mov	[esp+8], ebp	
mov	[esp+4], ebp	
mov	eax, [esp+34h]
mov	[esp], eax	
call	_blowfish_encrypt
mov	edx, [esp+10h]
mov	[edi], edx
mov	eax, [esp+14h]
mov	[edi+4], eax
mov	ecx, [esp+18h]
mov	[edi+8], ecx
mov	ebx, [esp+1Ch]
mov	[edi+0Ch], ebx
cmp	dword ptr [esp+40h], 10h
jbe	short loc_641EB8FF
mov	ebx, 10h
mov	eax, [src_0+i]
xor	[esp+10h], eax
mov	eax, [src_0+i+4]
xor	[esp+14h], eax
mov	eax, [src_0+i+8]
xor	[esp+18h], eax
mov	eax, [src_0+i+0Ch]
xor	[esp+1Ch], eax
mov	dword ptr [esp+0Ch], 10h 
mov	[esp+8], ebp	
mov	[esp+4], ebp	
mov	edx, [esp+34h]
mov	[esp], edx	
call	_blowfish_encrypt
mov	eax, [esp+10h]
mov	[dst_0+i], eax
mov	eax, [esp+14h]
mov	[dst_0+i+4], eax
mov	eax, [esp+18h]
mov	[dst_0+i+8], eax
mov	eax, [esp+1Ch]
mov	[dst_0+i+0Ch], eax
add	i, 10h
cmp	[esp+40h], i
ja	short loc_641EB88C
mov	edx, [esp+10h]
mov	eax, [esp+14h]
mov	ecx, [esp+18h]
mov	i, [esp+1Ch]
mov	src_0, [esp+44h]
mov	[esi], edx
mov	[esi+4], eax
mov	[esi+8], ecx
mov	[esi+0Ch], ebx
mov	al, 1
add	esp, 20h
pop	ebx
pop	esi
pop	dst_0
pop	ebp
retn
public _blowfish_decrypt
push	ebp
push	edi
push	esi
push	ebx
sub	esp, 48h
mov	eax, [esp+58h+ctx]
mov	esi, [esp+58h+in_blk]
mov	edx, [esp+58h+size]
cmp	edx, 7
jle	loc_641EBD56
lea	ecx, [ctx_0+44h]
mov	[esp+58h+var_14], ecx
lea	edi, [ctx_0+40h]
mov	[esp+58h+var_1C], edi
lea	ecx, [ctx_0+3Ch]
mov	[esp+58h+var_20], ecx
lea	edi, [ctx_0+38h]
mov	[esp+58h+var_24], edi
lea	ecx, [ctx_0+34h]
mov	[esp+58h+var_28], ecx
lea	edi, [ctx_0+30h]
mov	[esp+58h+var_2C], edi
lea	ecx, [ctx_0+2Ch]
mov	[esp+58h+var_30], ecx
lea	edi, [ctx_0+28h]
mov	[esp+58h+var_34], edi
lea	ecx, [ctx_0+24h]
mov	[esp+58h+var_38], ecx
lea	edi, [ctx_0+20h]
mov	[esp+58h+var_3C], edi
lea	ecx, [ctx_0+1Ch]
mov	[esp+58h+var_40], ecx
lea	edi, [ctx_0+18h]
mov	[esp+58h+var_44], edi
lea	ecx, [ctx_0+14h]
mov	[esp+58h+var_48], ecx
lea	edi, [ctx_0+10h]
mov	[esp+58h+var_4C], edi
lea	ecx, [ctx_0+0Ch]
mov	[esp+58h+var_50], ecx
lea	edi, [ctx_0+8]
mov	[esp+58h+var_54], edi
lea	ecx, [ctx_0+4]
mov	[esp+58h+var_58], ecx
sub	size_0,	8
shr	edx, 3
lea	edx, ds:8[edx*8]
mov	[esp+58h+var_18], edx
xor	edx, edx
lea	in_blk_0, [in_blk_0+0]
mov	ebx, [in_blk_0+edx]
mov	edi, [in_blk_0+edx+4]
mov	ecx, [esp+58h+var_14]
xor	yl, [ecx]
mov	ecx, [esp+58h+var_1C]
xor	yr, [ecx]
mov	ecx, yl
shr	ecx, 10h
and	ecx, 0FFh
mov	ebp, yl
shr	ebp, 18h
mov	ecx, [ctx_0+ecx*4+448h]
add	ecx, [ctx_0+ebp*4+48h]
movzx	ebp, bh
xor	ecx, [ctx_0+ebp*4+848h]
movzx	ebp, bl
add	ecx, [ctx_0+ebp*4+0C48h]
xor	ecx, yr
mov	edi, [esp+58h+var_20]
xor	yl, [edi]
mov	ebp, yr
shr	ebp, 10h
and	ebp, 0FFh
mov	edi, yr
shr	edi, 18h
mov	ebp, [ctx_0+ebp*4+448h]
add	ebp, [ctx_0+edi*4+48h]
movzx	edi, ch
xor	ebp, [ctx_0+edi*4+848h]
movzx	edi, cl
add	ebp, [ctx_0+edi*4+0C48h]
xor	yl, ebp
mov	edi, [esp+58h+var_24]
xor	yr, [edi]
mov	ebp, yl
shr	ebp, 10h
and	ebp, 0FFh
mov	edi, yl
shr	edi, 18h
mov	ebp, [ctx_0+ebp*4+448h]
add	ebp, [ctx_0+edi*4+48h]
movzx	edi, bh
xor	ebp, [ctx_0+edi*4+848h]
movzx	edi, bl
add	ebp, [ctx_0+edi*4+0C48h]
xor	yr, ebp
mov	edi, [esp+58h+var_28]
xor	yl, [edi]
mov	ebp, yr
shr	ebp, 10h
and	ebp, 0FFh
mov	edi, yr
shr	edi, 18h
mov	ebp, [ctx_0+ebp*4+448h]
add	ebp, [ctx_0+edi*4+48h]
movzx	edi, ch
xor	ebp, [ctx_0+edi*4+848h]
movzx	edi, cl
add	ebp, [ctx_0+edi*4+0C48h]
xor	yl, ebp
mov	edi, [esp+58h+var_2C]
xor	yr, [edi]
mov	ebp, yl
shr	ebp, 10h
and	ebp, 0FFh
mov	edi, yl
shr	edi, 18h
mov	ebp, [ctx_0+ebp*4+448h]
add	ebp, [ctx_0+edi*4+48h]
movzx	edi, bh
xor	ebp, [ctx_0+edi*4+848h]
movzx	edi, bl
add	ebp, [ctx_0+edi*4+0C48h]
xor	yr, ebp
mov	edi, [esp+58h+var_30]
xor	yl, [edi]
mov	ebp, yr
shr	ebp, 10h
and	ebp, 0FFh
mov	edi, yr
shr	edi, 18h
mov	ebp, [ctx_0+ebp*4+448h]
add	ebp, [ctx_0+edi*4+48h]
movzx	edi, ch
xor	ebp, [ctx_0+edi*4+848h]
movzx	edi, cl
add	ebp, [ctx_0+edi*4+0C48h]
xor	yl, ebp
mov	edi, [esp+58h+var_34]
xor	yr, [edi]
mov	ebp, yl
shr	ebp, 10h
and	ebp, 0FFh
mov	edi, yl
shr	edi, 18h
mov	ebp, [ctx_0+ebp*4+448h]
add	ebp, [ctx_0+edi*4+48h]
movzx	edi, bh
xor	ebp, [ctx_0+edi*4+848h]
movzx	edi, bl
add	ebp, [ctx_0+edi*4+0C48h]
xor	yr, ebp
mov	edi, [esp+58h+var_38]
xor	yl, [edi]
mov	ebp, yr
shr	ebp, 10h
and	ebp, 0FFh
mov	edi, yr
shr	edi, 18h
mov	ebp, [ctx_0+ebp*4+448h]
add	ebp, [ctx_0+edi*4+48h]
movzx	edi, ch
xor	ebp, [ctx_0+edi*4+848h]
movzx	edi, cl
add	ebp, [ctx_0+edi*4+0C48h]
xor	yl, ebp
mov	edi, [esp+58h+var_3C]
xor	yr, [edi]
mov	ebp, yl
shr	ebp, 10h
and	ebp, 0FFh
mov	edi, yl
shr	edi, 18h
mov	ebp, [ctx_0+ebp*4+448h]
add	ebp, [ctx_0+edi*4+48h]
movzx	edi, bh
xor	ebp, [ctx_0+edi*4+848h]
movzx	edi, bl
add	ebp, [ctx_0+edi*4+0C48h]
xor	yr, ebp
mov	edi, [esp+58h+var_40]
xor	yl, [edi]
mov	ebp, yr
shr	ebp, 10h
and	ebp, 0FFh
mov	edi, yr
shr	edi, 18h
mov	ebp, [ctx_0+ebp*4+448h]
add	ebp, [ctx_0+edi*4+48h]
movzx	edi, ch
xor	ebp, [ctx_0+edi*4+848h]
movzx	edi, cl
add	ebp, [ctx_0+edi*4+0C48h]
xor	yl, ebp
mov	edi, [esp+58h+var_44]
xor	yr, [edi]
mov	ebp, yl
shr	ebp, 10h
and	ebp, 0FFh
mov	edi, yl
shr	edi, 18h
mov	ebp, [ctx_0+ebp*4+448h]
add	ebp, [ctx_0+edi*4+48h]
movzx	edi, bh
xor	ebp, [ctx_0+edi*4+848h]
movzx	edi, bl
add	ebp, [ctx_0+edi*4+0C48h]
xor	yr, ebp
mov	edi, [esp+58h+var_48]
xor	yl, [edi]
mov	ebp, yr
shr	ebp, 10h
and	ebp, 0FFh
mov	edi, yr
shr	edi, 18h
mov	ebp, [ctx_0+ebp*4+448h]
add	ebp, [ctx_0+edi*4+48h]
movzx	edi, ch
xor	ebp, [ctx_0+edi*4+848h]
movzx	edi, cl
add	ebp, [ctx_0+edi*4+0C48h]
xor	yl, ebp
mov	edi, [esp+58h+var_4C]
xor	yr, [edi]
mov	ebp, yl
shr	ebp, 10h
and	ebp, 0FFh
mov	edi, yl
shr	edi, 18h
mov	ebp, [ctx_0+ebp*4+448h]
add	ebp, [ctx_0+edi*4+48h]
movzx	edi, bh
xor	ebp, [ctx_0+edi*4+848h]
movzx	edi, bl
add	ebp, [ctx_0+edi*4+0C48h]
xor	yr, ebp
mov	edi, [esp+58h+var_50]
xor	yl, [edi]
mov	ebp, yr
shr	ebp, 10h
and	ebp, 0FFh
mov	edi, yr
shr	edi, 18h
mov	ebp, [ctx_0+ebp*4+448h]
add	ebp, [ctx_0+edi*4+48h]
movzx	edi, ch
xor	ebp, [ctx_0+edi*4+848h]
movzx	edi, cl
add	ebp, [ctx_0+edi*4+0C48h]
xor	yl, ebp
mov	edi, [esp+58h+var_54]
xor	yr, [edi]
mov	ebp, yl
shr	ebp, 10h
and	ebp, 0FFh
mov	edi, yl
shr	edi, 18h
mov	ebp, [ctx_0+ebp*4+448h]
add	ebp, [ctx_0+edi*4+48h]
movzx	edi, bh
xor	ebp, [ctx_0+edi*4+848h]
movzx	edi, bl
add	ebp, [ctx_0+edi*4+0C48h]
xor	yr, ebp
mov	edi, [esp+58h+var_58]
xor	yl, [edi]
mov	ebp, yr
shr	ebp, 10h
and	ebp, 0FFh
mov	edi, yr
shr	edi, 18h
mov	ebp, [ctx_0+ebp*4+448h]
add	ebp, [ctx_0+edi*4+48h]
movzx	edi, ch
xor	ebp, [ctx_0+edi*4+848h]
movzx	edi, cl
add	ebp, [ctx_0+edi*4+0C48h]
xor	yl, ebp
xor	yr, [ctx_0]
mov	edi, [esp+58h+out_blk]
mov	[edi+edx], ecx
mov	[edi+edx+4], yl
add	edx, 8
cmp	edx, [esp+58h+var_18]
jnz	loc_641EB9C0
xor	ctx_0, ctx_0
add	esp, 48h
pop	yl
pop	in_blk_0
pop	edi
pop	ebp
retn
public _blowfish_set_key
push	ebp
push	edi
push	esi
push	ebx
sub	esp, 24h
mov	ebx, [esp+34h+ctx]
mov	esi, [esp+34h+key]
mov	ebp, [esp+34h+keybytes]
xor	eax, eax
lea	key_0, [key_0+0]
mov	edx, ds:_bf_sbox[eax]
mov	[ctx_0+eax+48h], edx
mov	edx, ds:(_bf_sbox+4)[eax]
mov	[ctx_0+eax+4Ch], edx
mov	edx, ds:(_bf_sbox+8)[eax]
mov	[ctx_0+eax+50h], edx
mov	edx, ds:(_bf_sbox+0Ch)[eax]
mov	[ctx_0+eax+54h], edx
add	eax, 10h
cmp	eax, 1000h
jnz	short loc_641EBD78
xor	ax, ax
lea	key_0, [key_0+0]
mov	edx, ds:_bf_pbox[eax]
mov	[ctx_0+eax], edx
add	eax, 4
cmp	eax, 48h
jnz	short loc_641EBDB0
xor	edi, edi
xor	edx, edx
lea	key_0, [key_0+0]
movsx	ecx, dx
lea	eax, [ecx+3]
cdq
idiv	keybytes_0
movzx	edx, byte ptr [key_0+edx]
movzx	eax, byte ptr [key_0+ecx]
shl	eax, 18h
or	edx, eax
mov	[esp+34h+var_24], edx
lea	eax, [ecx+1]
cdq
idiv	keybytes_0
movzx	eax, byte ptr [key_0+edx]
shl	eax, 10h
or	eax, [esp+34h+var_24]
mov	[esp+34h+var_24], eax
lea	eax, [ecx+2]
cdq
idiv	keybytes_0
movzx	eax, byte ptr [key_0+edx]
shl	eax, 8
or	eax, [esp+34h+var_24]
xor	[ctx_0+edi], eax
lea	eax, [ecx+4]
cdq
idiv	keybytes_0
add	edi, 4
cmp	edi, 48h
jnz	short loc_641EBDC8
mov	[esp+34h+data],	0
mov	[esp+34h+data+4], 0
mov	[esp+34h+size],	8 
lea	edi, [esp+34h+data]
mov	[esp+34h+out_blk], edi 
mov	[esp+34h+in_blk], edi 
mov	[esp+34h+var_34], ctx_0	
call	_blowfish_encrypt
mov	eax, [esp+34h+data]
mov	[ctx_0], eax
mov	eax, [esp+34h+data+4]
mov	[ctx_0+4], eax
mov	[esp+34h+size],	8 
mov	[esp+34h+out_blk], edi 
mov	[esp+34h+in_blk], edi 
mov	[esp+34h+var_34], ctx_0	
call	_blowfish_encrypt
mov	eax, [esp+34h+data]
mov	[ctx_0+8], eax
mov	eax, [esp+34h+data+4]
mov	[ctx_0+0Ch], eax
mov	[esp+34h+size],	8 
mov	[esp+34h+out_blk], edi 
mov	[esp+34h+in_blk], edi 
mov	[esp+34h+var_34], ctx_0	
call	_blowfish_encrypt
mov	eax, [esp+34h+data]
mov	[ctx_0+10h], eax
mov	eax, [esp+34h+data+4]
mov	[ctx_0+14h], eax
mov	[esp+34h+size],	8 
mov	[esp+34h+out_blk], edi 
mov	[esp+34h+in_blk], edi 
mov	[esp+34h+var_34], ctx_0	
call	_blowfish_encrypt
mov	eax, [esp+34h+data]
mov	[ctx_0+18h], eax
mov	eax, [esp+34h+data+4]
mov	[ctx_0+1Ch], eax
mov	[esp+34h+size],	8 
mov	[esp+34h+out_blk], edi 
mov	[esp+34h+in_blk], edi 
mov	[esp+34h+var_34], ctx_0	
call	_blowfish_encrypt
mov	eax, [esp+34h+data]
mov	[ctx_0+20h], eax
mov	eax, [esp+34h+data+4]
mov	[ctx_0+24h], eax
mov	[esp+34h+size],	8 
mov	[esp+34h+out_blk], edi 
mov	[esp+34h+in_blk], edi 
mov	[esp+34h+var_34], ctx_0	
call	_blowfish_encrypt
mov	eax, [esp+34h+data]
mov	[ctx_0+28h], eax
mov	eax, [esp+34h+data+4]
mov	[ctx_0+2Ch], eax
mov	[esp+34h+size],	8 
mov	[esp+34h+out_blk], edi 
mov	[esp+34h+in_blk], edi 
mov	[esp+34h+var_34], ctx_0	
call	_blowfish_encrypt
mov	eax, [esp+34h+data]
mov	[ctx_0+30h], eax
mov	eax, [esp+34h+data+4]
mov	[ctx_0+34h], eax
mov	[esp+34h+size],	8 
mov	[esp+34h+out_blk], edi 
mov	[esp+34h+in_blk], edi 
mov	[esp+34h+var_34], ctx_0	
call	_blowfish_encrypt
mov	eax, [esp+34h+data]
mov	[ctx_0+38h], eax
mov	eax, [esp+34h+data+4]
mov	[ctx_0+3Ch], eax
mov	[esp+34h+size],	8 
mov	[esp+34h+out_blk], edi 
mov	[esp+34h+in_blk], edi 
mov	[esp+34h+var_34], ctx_0	
call	_blowfish_encrypt
mov	eax, [esp+34h+data]
mov	[ctx_0+40h], eax
mov	eax, [esp+34h+data+4]
mov	[ctx_0+44h], eax
mov	keybytes_0, 100h
lea	count, [ebp-100h]
lea	count, [count+0]
mov	[esp+34h+size],	8 
mov	[esp+34h+out_blk], edi 
mov	[esp+34h+in_blk], edi 
mov	[esp+34h+var_34], ctx_0	
call	_blowfish_encrypt
movsx	eax, si
mov	edx, [esp+34h+data]
mov	[ctx_0+eax*4+48h], edx
mov	edx, [esp+34h+data+4]
mov	[ctx_0+eax*4+4Ch], edx
add	count, 2
cmp	bp, si
jnz	short loc_641EBF90
add	ebp, 100h
cmp	bp, 500h
jnz	short loc_641EBF87
xor	eax, eax
add	esp, 24h
pop	ctx_0
pop	count
pop	edi
pop	ebp
retn
align 4
public _silc_blowfish_cbc_set_key
sub	esp, 0Ch
mov	eax, [esp+0Ch+keylen]
mov	[esp+0Ch+keybytes], eax	
mov	eax, [esp+0Ch+key]
mov	[esp+0Ch+var_8], eax 
mov	eax, [esp+0Ch+context]
mov	[esp+0Ch+ctx], eax 
call	_blowfish_set_key
mov	al, 1
add	esp, 0Ch
retn
align 4
			
push	ebp
push	edi
push	esi
push	ebx
sub	esp, 4
mov	esi, [in_blk]
mov	ebx, [in_blk+4]
xor	yl, [ctx+44h]
xor	yr, [ctx+40h]
mov	[esp+14h+var_14], yr
mov	edi, yl
shr	edi, 10h
and	edi, 0FFh
mov	ebp, yl
shr	ebp, 18h
mov	edi, [ctx+edi*4+448h]
add	edi, [ctx+ebp*4+48h]
mov	yr, yl
movzx	ebp, bh
xor	edi, [ctx+ebp*4+848h]
mov	ebp, yl
and	ebp, 0FFh
add	edi, [ctx+ebp*4+0C48h]
mov	ebx, [esp+14h+var_14]
xor	yr, edi
xor	yl, [ctx+3Ch]
mov	edi, yr
shr	edi, 10h
and	edi, 0FFh
mov	ebp, yr
shr	ebp, 18h
mov	edi, [ctx+edi*4+448h]
add	edi, [ctx+ebp*4+48h]
movzx	ebp, bh
xor	edi, [ctx+ebp*4+848h]
movzx	ebp, bl
add	edi, [ctx+ebp*4+0C48h]
xor	yl, edi
xor	yr, [ctx+38h]
mov	[esp+14h+var_14], yr
mov	edi, yl
shr	edi, 10h
and	edi, 0FFh
mov	ebp, yl
shr	ebp, 18h
mov	edi, [ctx+edi*4+448h]
add	edi, [ctx+ebp*4+48h]
mov	yr, yl
movzx	ebp, bh
xor	edi, [ctx+ebp*4+848h]
mov	ebp, yl
and	ebp, 0FFh
add	edi, [ctx+ebp*4+0C48h]
mov	ebx, [esp+14h+var_14]
xor	yr, edi
xor	yl, [ctx+34h]
mov	edi, yr
shr	edi, 10h
and	edi, 0FFh
mov	ebp, yr
shr	ebp, 18h
mov	edi, [ctx+edi*4+448h]
add	edi, [ctx+ebp*4+48h]
movzx	ebp, bh
xor	edi, [ctx+ebp*4+848h]
movzx	ebp, bl
add	edi, [ctx+ebp*4+0C48h]
xor	yl, edi
xor	yr, [ctx+30h]
mov	[esp+14h+var_14], yr
mov	edi, yl
shr	edi, 10h
and	edi, 0FFh
mov	ebp, yl
shr	ebp, 18h
mov	edi, [ctx+edi*4+448h]
add	edi, [ctx+ebp*4+48h]
mov	yr, yl
movzx	ebp, bh
xor	edi, [ctx+ebp*4+848h]
mov	ebp, yl
and	ebp, 0FFh
add	edi, [ctx+ebp*4+0C48h]
mov	ebx, [esp+14h+var_14]
xor	yr, edi
xor	yl, [ctx+2Ch]
mov	edi, yr
shr	edi, 10h
and	edi, 0FFh
mov	ebp, yr
shr	ebp, 18h
mov	edi, [ctx+edi*4+448h]
add	edi, [ctx+ebp*4+48h]
movzx	ebp, bh
xor	edi, [ctx+ebp*4+848h]
movzx	ebp, bl
add	edi, [ctx+ebp*4+0C48h]
xor	yl, edi
xor	yr, [ctx+28h]
mov	[esp+14h+var_14], yr
mov	edi, yl
shr	edi, 10h
and	edi, 0FFh
mov	ebp, yl
shr	ebp, 18h
mov	edi, [ctx+edi*4+448h]
add	edi, [ctx+ebp*4+48h]
mov	yr, yl
movzx	ebp, bh
xor	edi, [ctx+ebp*4+848h]
mov	ebp, yl
and	ebp, 0FFh
add	edi, [ctx+ebp*4+0C48h]
mov	ebx, [esp+14h+var_14]
xor	yr, edi
xor	yl, [ctx+24h]
mov	edi, yr
shr	edi, 10h
and	edi, 0FFh
mov	ebp, yr
shr	ebp, 18h
mov	edi, [ctx+edi*4+448h]
add	edi, [ctx+ebp*4+48h]
movzx	ebp, bh
xor	edi, [ctx+ebp*4+848h]
movzx	ebp, bl
add	edi, [ctx+ebp*4+0C48h]
xor	yl, edi
xor	yr, [ctx+20h]
mov	[esp+14h+var_14], yr
mov	edi, yl
shr	edi, 10h
and	edi, 0FFh
mov	ebp, yl
shr	ebp, 18h
mov	edi, [ctx+edi*4+448h]
add	edi, [ctx+ebp*4+48h]
mov	yr, yl
movzx	ebp, bh
xor	edi, [ctx+ebp*4+848h]
mov	ebp, yl
and	ebp, 0FFh
add	edi, [ctx+ebp*4+0C48h]
mov	ebx, [esp+14h+var_14]
xor	yr, edi
xor	yl, [ctx+1Ch]
mov	edi, yr
shr	edi, 10h
and	edi, 0FFh
mov	ebp, yr
shr	ebp, 18h
mov	edi, [ctx+edi*4+448h]
add	edi, [ctx+ebp*4+48h]
movzx	ebp, bh
xor	edi, [ctx+ebp*4+848h]
movzx	ebp, bl
add	edi, [ctx+ebp*4+0C48h]
xor	yl, edi
xor	yr, [ctx+18h]
mov	[esp+14h+var_14], yr
mov	edi, yl
shr	edi, 10h
and	edi, 0FFh
mov	ebp, yl
shr	ebp, 18h
mov	edi, [ctx+edi*4+448h]
add	edi, [ctx+ebp*4+48h]
mov	yr, yl
movzx	ebp, bh
xor	edi, [ctx+ebp*4+848h]
mov	ebp, yl
and	ebp, 0FFh
add	edi, [ctx+ebp*4+0C48h]
mov	ebx, [esp+14h+var_14]
xor	yr, edi
xor	yl, [ctx+14h]
mov	edi, yr
shr	edi, 10h
and	edi, 0FFh
mov	ebp, yr
shr	ebp, 18h
mov	edi, [ctx+edi*4+448h]
add	edi, [ctx+ebp*4+48h]
movzx	ebp, bh
xor	edi, [ctx+ebp*4+848h]
movzx	ebp, bl
add	edi, [ctx+ebp*4+0C48h]
xor	yl, edi
xor	yr, [ctx+10h]
mov	[esp+14h+var_14], yr
mov	edi, yl
shr	edi, 10h
and	edi, 0FFh
mov	ebp, yl
shr	ebp, 18h
mov	edi, [ctx+edi*4+448h]
add	edi, [ctx+ebp*4+48h]
mov	yr, yl
movzx	ebp, bh
xor	edi, [ctx+ebp*4+848h]
mov	ebp, yl
and	ebp, 0FFh
add	edi, [ctx+ebp*4+0C48h]
mov	ebx, [esp+14h+var_14]
xor	yr, edi
xor	yl, [ctx+0Ch]
mov	edi, yr
shr	edi, 10h
and	edi, 0FFh
mov	ebp, yr
shr	ebp, 18h
mov	edi, [ctx+edi*4+448h]
add	edi, [ctx+ebp*4+48h]
movzx	ebp, bh
xor	edi, [ctx+ebp*4+848h]
movzx	ebp, bl
add	edi, [ctx+ebp*4+0C48h]
xor	yl, edi
xor	yr, [ctx+8]
mov	[esp+14h+var_14], yr
mov	edi, yl
shr	edi, 10h
and	edi, 0FFh
mov	ebp, yl
shr	ebp, 18h
mov	edi, [ctx+edi*4+448h]
add	edi, [ctx+ebp*4+48h]
mov	yr, yl
movzx	ebp, bh
xor	edi, [ctx+ebp*4+848h]
mov	ebp, yl
and	ebp, 0FFh
add	edi, [ctx+ebp*4+0C48h]
mov	ebx, [esp+14h+var_14]
xor	yr, edi
xor	yl, [ctx+4]
mov	edi, yr
shr	edi, 10h
and	edi, 0FFh
mov	ebp, yr
shr	ebp, 18h
mov	edi, [ctx+edi*4+448h]
add	edi, [ctx+ebp*4+48h]
movzx	ebp, bh
xor	edi, [ctx+ebp*4+848h]
movzx	ebp, bl
add	edi, [ctx+ebp*4+0C48h]
xor	yl, edi
xor	yr, [ctx]
mov	[out_blk], ebx
mov	[out_blk+4], yl
mov	ebx, [in_blk+8]
mov	in_blk,	[in_blk+0Ch]
xor	yl, [ctx+44h]
xor	yr, [ctx+40h]
mov	esi, yl
shr	esi, 10h
and	esi, 0FFh
mov	edi, yl
shr	edi, 18h
mov	esi, [ctx+esi*4+448h]
add	esi, [ctx+edi*4+48h]
movzx	edi, bh
xor	esi, [ctx+edi*4+848h]
movzx	edi, bl
add	esi, [ctx+edi*4+0C48h]
xor	yr, esi
xor	yl, [ctx+3Ch]
mov	esi, yr
shr	esi, 10h
and	esi, 0FFh
mov	edi, yr
shr	edi, 18h
mov	esi, [ctx+esi*4+448h]
add	esi, [ctx+edi*4+48h]
movzx	edi, dh
xor	esi, [ctx+edi*4+848h]
movzx	edi, dl
add	esi, [ctx+edi*4+0C48h]
xor	yl, esi
xor	yr, [ctx+38h]
mov	esi, yl
shr	esi, 10h
and	esi, 0FFh
mov	edi, yl
shr	edi, 18h
mov	esi, [ctx+esi*4+448h]
add	esi, [ctx+edi*4+48h]
movzx	edi, bh
xor	esi, [ctx+edi*4+848h]
movzx	edi, bl
add	esi, [ctx+edi*4+0C48h]
xor	yr, esi
xor	yl, [ctx+34h]
mov	esi, yr
shr	esi, 10h
and	esi, 0FFh
mov	edi, yr
shr	edi, 18h
mov	esi, [ctx+esi*4+448h]
add	esi, [ctx+edi*4+48h]
movzx	edi, dh
xor	esi, [ctx+edi*4+848h]
movzx	edi, dl
add	esi, [ctx+edi*4+0C48h]
xor	yl, esi
xor	yr, [ctx+30h]
mov	esi, yl
shr	esi, 10h
and	esi, 0FFh
mov	edi, yl
shr	edi, 18h
mov	esi, [ctx+esi*4+448h]
add	esi, [ctx+edi*4+48h]
movzx	edi, bh
xor	esi, [ctx+edi*4+848h]
movzx	edi, bl
add	esi, [ctx+edi*4+0C48h]
xor	yr, esi
xor	yl, [ctx+2Ch]
mov	esi, yr
shr	esi, 10h
and	esi, 0FFh
mov	edi, yr
shr	edi, 18h
mov	esi, [ctx+esi*4+448h]
add	esi, [ctx+edi*4+48h]
movzx	edi, dh
xor	esi, [ctx+edi*4+848h]
movzx	edi, dl
add	esi, [ctx+edi*4+0C48h]
xor	yl, esi
xor	yr, [ctx+28h]
mov	esi, yl
shr	esi, 10h
and	esi, 0FFh
mov	edi, yl
shr	edi, 18h
mov	esi, [ctx+esi*4+448h]
add	esi, [ctx+edi*4+48h]
movzx	edi, bh
xor	esi, [ctx+edi*4+848h]
movzx	edi, bl
add	esi, [ctx+edi*4+0C48h]
xor	yr, esi
xor	yl, [ctx+24h]
mov	esi, yr
shr	esi, 10h
and	esi, 0FFh
mov	edi, yr
shr	edi, 18h
mov	esi, [ctx+esi*4+448h]
add	esi, [ctx+edi*4+48h]
movzx	edi, dh
xor	esi, [ctx+edi*4+848h]
movzx	edi, dl
add	esi, [ctx+edi*4+0C48h]
xor	yl, esi
xor	yr, [ctx+20h]
mov	esi, yl
shr	esi, 10h
and	esi, 0FFh
mov	edi, yl
shr	edi, 18h
mov	esi, [ctx+esi*4+448h]
add	esi, [ctx+edi*4+48h]
movzx	edi, bh
xor	esi, [ctx+edi*4+848h]
movzx	edi, bl
add	esi, [ctx+edi*4+0C48h]
xor	yr, esi
xor	yl, [ctx+1Ch]
mov	esi, yr
shr	esi, 10h
and	esi, 0FFh
mov	edi, yr
shr	edi, 18h
mov	esi, [ctx+esi*4+448h]
add	esi, [ctx+edi*4+48h]
movzx	edi, dh
xor	esi, [ctx+edi*4+848h]
movzx	edi, dl
add	esi, [ctx+edi*4+0C48h]
xor	yl, esi
xor	yr, [ctx+18h]
mov	esi, yl
shr	esi, 10h
and	esi, 0FFh
mov	edi, yl
shr	edi, 18h
mov	esi, [ctx+esi*4+448h]
add	esi, [ctx+edi*4+48h]
movzx	edi, bh
xor	esi, [ctx+edi*4+848h]
movzx	edi, bl
add	esi, [ctx+edi*4+0C48h]
xor	yr, esi
xor	yl, [ctx+14h]
mov	esi, yr
shr	esi, 10h
and	esi, 0FFh
mov	edi, yr
shr	edi, 18h
mov	esi, [ctx+esi*4+448h]
add	esi, [ctx+edi*4+48h]
movzx	edi, dh
xor	esi, [ctx+edi*4+848h]
movzx	edi, dl
add	esi, [ctx+edi*4+0C48h]
xor	yl, esi
xor	yr, [ctx+10h]
mov	esi, yl
shr	esi, 10h
and	esi, 0FFh
mov	edi, yl
shr	edi, 18h
mov	esi, [ctx+esi*4+448h]
add	esi, [ctx+edi*4+48h]
movzx	edi, bh
xor	esi, [ctx+edi*4+848h]
movzx	edi, bl
add	esi, [ctx+edi*4+0C48h]
xor	yr, esi
xor	yl, [ctx+0Ch]
mov	esi, yr
shr	esi, 10h
and	esi, 0FFh
mov	edi, yr
shr	edi, 18h
mov	esi, [ctx+esi*4+448h]
add	esi, [ctx+edi*4+48h]
movzx	edi, dh
xor	esi, [ctx+edi*4+848h]
movzx	edi, dl
add	esi, [ctx+edi*4+0C48h]
xor	yl, esi
xor	yr, [ctx+8]
mov	esi, yl
shr	esi, 10h
and	esi, 0FFh
mov	edi, yl
shr	edi, 18h
mov	esi, [ctx+esi*4+448h]
add	esi, [ctx+edi*4+48h]
movzx	edi, bh
xor	esi, [ctx+edi*4+848h]
movzx	edi, bl
add	esi, [ctx+edi*4+0C48h]
xor	yr, esi
xor	yl, [ctx+4]
mov	esi, yr
shr	esi, 10h
and	esi, 0FFh
mov	edi, yr
shr	edi, 18h
mov	esi, [ctx+esi*4+448h]
add	esi, [ctx+edi*4+48h]
movzx	edi, dh
xor	esi, [ctx+edi*4+848h]
movzx	edi, dl
add	esi, [ctx+edi*4+0C48h]
xor	yl, esi
xor	yr, [ctx]
mov	[out_blk+8], edx
mov	[out_blk+0Ch], yl
xor	ctx, ctx
pop	edx
pop	yl
pop	esi
pop	edi
pop	ebp
retn
align 4
public _silc_blowfish_cbc_decrypt
push	ebp
push	edi
push	esi
push	ebx
sub	esp, 2Ch
mov	esi, [esp+3Ch+src]
mov	edi, [esp+3Ch+dst]
mov	eax, [esp+3Ch+iv]
mov	ebx, [eax]
mov	ebp, [eax+4]
mov	edx, [eax+8]
mov	[esp+3Ch+var_38], edx
mov	eax, [eax+0Ch]
mov	[esp+3Ch+size],	eax 
mov	eax, [esi]
mov	[esp+3Ch+tmp], eax
mov	eax, [esi+4]
mov	[esp+3Ch+tmp+4], eax
mov	eax, [esi+8]
mov	[esp+3Ch+tmp+8], eax
mov	eax, [esi+0Ch]
mov	[esp+3Ch+tmp+0Ch], eax
lea	ecx, [esp+3Ch+tmp2] 
lea	edx, [esp+3Ch+tmp] 
mov	eax, [esp+3Ch+context] 
call	_T_103
mov	eax, [esp+3Ch+tmp2]
xor	eax, ebx
mov	[esp+3Ch+tmp2],	eax
xor	[esp+3Ch+tmp2+4], ebp
mov	edx, [esp+3Ch+var_38]
xor	[esp+3Ch+tmp2+8], edx
mov	edx, [esp+3Ch+size]
xor	[esp+3Ch+tmp2+0Ch], edx
mov	[edi], eax
mov	eax, [esp+3Ch+tmp2+4]
mov	[edi+4], eax
mov	eax, [esp+3Ch+tmp2+8]
mov	[edi+8], eax
mov	eax, [esp+3Ch+tmp2+0Ch]
mov	[edi+0Ch], eax
mov	ebp, [esp+3Ch+tmp]
mov	eax, [esp+3Ch+tmp+4]
mov	[esp+3Ch+size],	eax 
mov	edx, [esp+3Ch+tmp+8]
mov	[esp+3Ch+var_38], edx
mov	eax, [esp+3Ch+tmp+0Ch]
mov	[esp+3Ch+var_34], eax
cmp	[esp+3Ch+len], 10h
jbe	loc_641EC85E
mov	ebx, 10h
mov	eax, [src_0+i]
mov	[esp+3Ch+tmp], eax
mov	eax, [src_0+i+4]
mov	[esp+3Ch+tmp+4], eax
mov	eax, [src_0+i+8]
mov	[esp+3Ch+tmp+8], eax
mov	eax, [src_0+i+0Ch]
mov	[esp+3Ch+tmp+0Ch], eax
lea	ecx, [esp+3Ch+tmp2] 
lea	edx, [esp+3Ch+tmp] 
mov	eax, [esp+3Ch+context] 
call	_T_103
xor	ebp, [esp+3Ch+tmp2]
mov	[esp+3Ch+tmp2],	ebp
mov	edx, [esp+3Ch+size]
xor	[esp+3Ch+tmp2+4], edx
mov	eax, [esp+3Ch+var_38]
xor	[esp+3Ch+tmp2+8], eax
mov	edx, [esp+3Ch+var_34]
xor	[esp+3Ch+tmp2+0Ch], edx
mov	[dst_0+i], ebp
mov	eax, [esp+3Ch+tmp2+4]
mov	[dst_0+i+4], eax
mov	eax, [esp+3Ch+tmp2+8]
mov	[dst_0+i+8], eax
mov	eax, [esp+3Ch+tmp2+0Ch]
mov	[dst_0+i+0Ch], eax
mov	ebp, [esp+3Ch+tmp]
mov	eax, [esp+3Ch+tmp+4]
mov	[esp+3Ch+size],	eax
mov	edx, [esp+3Ch+tmp+8]
mov	[esp+3Ch+var_38], edx
mov	eax, [esp+3Ch+tmp+0Ch]
mov	[esp+3Ch+var_34], eax
add	i, 10h
cmp	[esp+3Ch+len], i
ja	loc_641EC7CC
mov	edx, [esp+3Ch+iv]
mov	[edx], ebp
mov	eax, [esp+3Ch+size]
mov	[edx+4], eax
mov	eax, [esp+3Ch+var_38]
mov	[edx+8], eax
mov	eax, [esp+3Ch+var_34]
mov	[edx+0Ch], eax
mov	al, 1
add	esp, 2Ch
pop	i
pop	src_0
pop	dst_0
pop	ebp
retn
align 4
public _silc_md5_init
mov	eax, [esp+context]
mov	dword ptr [eax], 67452301h
mov	dword ptr [eax+4], 0EFCDAB89h
mov	dword ptr [eax+8], 98BADCFEh
mov	dword ptr [eax+0Ch], 10325476h
mov	dword ptr [eax+10h], 0
mov	dword ptr [eax+14h], 0
retn
align 4
public _silc_md5_context_len
mov	eax, 58h
retn
align 4
public _MD5Init
mov	eax, [esp+ctx]
mov	dword ptr [eax], 67452301h
mov	dword ptr [eax+4], 0EFCDAB89h
mov	dword ptr [eax+8], 98BADCFEh
mov	dword ptr [eax+0Ch], 10325476h
mov	dword ptr [eax+10h], 0
mov	dword ptr [eax+14h], 0
retn
align 4
public _MD5Transform
			
push	ebp
push	edi
push	esi
push	ebx
sub	esp, 84h
mov	eax, [esp+94h+buf]
mov	edx, [esp+94h+kbuf]
mov	ebx, [edx]
mov	ecx, [edx+4]
mov	[esp+94h+var_8C], ecx
mov	esi, [edx+8]
mov	[esp+94h+var_88], esi
mov	edi, [edx+0Ch]
mov	[esp+94h+var_84], edi
mov	ebp, [edx+10h]
mov	[esp+94h+var_80], ebp
mov	ecx, [edx+14h]
mov	[esp+94h+var_7C], ecx
mov	esi, [edx+18h]
mov	[esp+94h+var_78], esi
mov	edi, [edx+1Ch]
mov	[esp+94h+var_74], edi
mov	ebp, [edx+20h]
mov	[esp+94h+var_70], ebp
mov	ecx, [edx+24h]
mov	[esp+94h+var_6C], ecx
mov	esi, [edx+28h]
mov	[esp+94h+var_68], esi
mov	edi, [edx+2Ch]
mov	[esp+94h+var_64], edi
mov	ebp, [edx+30h]
mov	[esp+94h+var_60], ebp
mov	ecx, [edx+34h]
mov	[esp+94h+var_5C], ecx
mov	esi, [edx+38h]
mov	[esp+94h+var_58], esi
mov	edx, [edx+3Ch]
mov	[esp+94h+var_90], edx
mov	edi, [eax+4]
mov	esi, [eax+8]
mov	ecx, [eax+0Ch]
mov	edx, [eax]
lea	ebp, [edx+ebx-28955B88h]
mov	edx, d
xor	edx, c
and	edx, b
xor	edx, d
lea	edx, [ebp+edx+0]
ror	a, 19h
add	a, b
mov	ebp, [esp+94h+var_8C]
lea	d, [d+ebp-173848AAh]
mov	[esp+94h+var_54], ecx
mov	ecx, c
xor	ecx, b
and	ecx, a
xor	ecx, c
add	ecx, [esp+94h+var_54]
ror	d, 14h
add	d, a
mov	ebp, [esp+94h+var_88]
lea	c, [c+ebp+242070DBh]
mov	[esp+94h+var_54], esi
mov	esi, a
xor	esi, b
and	esi, d
xor	esi, b
add	esi, [esp+94h+var_54]
ror	c, 0Fh
add	c, d
mov	ebp, [esp+94h+var_84]
lea	b, [b+ebp-3E423112h]
mov	[esp+94h+var_54], edi
mov	edi, d
xor	edi, a
and	edi, c
xor	edi, a
add	edi, [esp+94h+var_54]
ror	b, 0Ah
add	b, c
mov	ebp, [esp+94h+var_80]
lea	a, [a+ebp-0A83F051h]
mov	[esp+94h+var_54], edx
mov	edx, c
xor	edx, d
and	edx, b
xor	edx, d
add	edx, [esp+94h+var_54]
ror	a, 19h
add	a, b
mov	ebp, [esp+94h+var_7C]
lea	d, [d+ebp+4787C62Ah]
mov	[esp+94h+var_54], ecx
mov	ecx, b
xor	ecx, c
and	ecx, a
xor	ecx, c
add	ecx, [esp+94h+var_54]
ror	d, 14h
add	d, a
mov	ebp, [esp+94h+var_78]
lea	c, [c+ebp-57CFB9EDh]
mov	[esp+94h+var_54], esi
mov	esi, a
xor	esi, b
and	esi, d
xor	esi, b
add	esi, [esp+94h+var_54]
ror	c, 0Fh
add	c, d
mov	ebp, [esp+94h+var_74]
lea	b, [b+ebp-2B96AFFh]
mov	[esp+94h+var_54], edi
mov	edi, d
xor	edi, a
and	edi, c
xor	edi, a
add	edi, [esp+94h+var_54]
ror	b, 0Ah
add	b, c
mov	ebp, [esp+94h+var_70]
lea	a, [a+ebp+698098D8h]
mov	[esp+94h+var_54], edx
mov	edx, c
xor	edx, d
and	edx, b
xor	edx, d
add	edx, [esp+94h+var_54]
ror	a, 19h
add	a, b
mov	ebp, [esp+94h+var_6C]
lea	d, [d+ebp-74BB0851h]
mov	[esp+94h+var_54], ecx
mov	ecx, b
xor	ecx, c
and	ecx, a
xor	ecx, c
add	ecx, [esp+94h+var_54]
ror	d, 14h
add	d, a
mov	ebp, [esp+94h+var_68]
lea	c, [c+ebp-0A44Fh]
mov	[esp+94h+var_54], esi
mov	esi, a
xor	esi, b
and	esi, d
xor	esi, b
add	esi, [esp+94h+var_54]
ror	c, 0Fh
add	c, d
mov	ebp, [esp+94h+var_64]
lea	b, [b+ebp-76A32842h]
mov	[esp+94h+var_54], edi
mov	edi, d
xor	edi, a
and	edi, c
xor	edi, a
add	edi, [esp+94h+var_54]
ror	b, 0Ah
add	b, c
mov	ebp, [esp+94h+var_60]
lea	a, [a+ebp+6B901122h]
mov	[esp+94h+var_54], edx
mov	edx, c
xor	edx, d
and	edx, b
xor	edx, d
add	edx, [esp+94h+var_54]
ror	a, 19h
add	a, b
mov	ebp, [esp+94h+var_5C]
lea	d, [d+ebp-2678E6Dh]
mov	[esp+94h+var_54], ecx
mov	ecx, b
xor	ecx, c
and	ecx, a
xor	ecx, c
add	ecx, [esp+94h+var_54]
ror	d, 14h
add	d, a
mov	ebp, [esp+94h+var_58]
lea	c, [c+ebp-5986BC72h]
mov	[esp+94h+var_54], esi
mov	esi, a
xor	esi, b
and	esi, d
xor	esi, b
add	esi, [esp+94h+var_54]
ror	c, 0Fh
add	c, d
mov	ebp, [esp+94h+var_90]
lea	b, [b+ebp+49B40821h]
mov	[esp+94h+var_54], edi
mov	edi, d
xor	edi, a
and	edi, c
xor	edi, a
add	edi, [esp+94h+var_54]
ror	b, 0Ah
add	b, c
mov	ebp, [esp+94h+var_8C]
lea	a, [a+ebp-9E1DA9Eh]
mov	[esp+94h+var_54], edx
mov	edx, b
xor	edx, c
and	edx, d
xor	edx, c
add	edx, [esp+94h+var_54]
ror	a, 1Bh
add	a, b
mov	ebp, [esp+94h+var_78]
lea	d, [d+ebp-3FBF4CC0h]
mov	[esp+94h+var_54], ecx
mov	ecx, a
xor	ecx, b
and	ecx, c
xor	ecx, b
add	ecx, [esp+94h+var_54]
ror	d, 17h
add	d, a
mov	ebp, [esp+94h+var_64]
lea	c, [c+ebp+265E5A51h]
mov	[esp+94h+var_54], esi
mov	esi, d
xor	esi, a
and	esi, b
xor	esi, a
add	esi, [esp+94h+var_54]
ror	c, 12h
add	c, d
lea	ebp, [b+ebx-16493856h]
mov	b, c
xor	edi, d
and	edi, a
xor	edi, d
lea	edi, [ebp+edi+0]
ror	b, 0Ch
add	b, c
mov	ebp, [esp+94h+var_7C]
lea	a, [a+ebp-29D0EFA3h]
mov	[esp+94h+var_54], edx
mov	edx, b
xor	edx, c
and	edx, d
xor	edx, c
add	edx, [esp+94h+var_54]
ror	a, 1Bh
add	a, b
mov	ebp, [esp+94h+var_68]
lea	d, [d+ebp+2441453h]
mov	[esp+94h+var_54], ecx
mov	ecx, a
xor	ecx, b
and	ecx, c
xor	ecx, b
add	ecx, [esp+94h+var_54]
ror	d, 17h
add	d, a
mov	ebp, [esp+94h+var_90]
lea	c, [c+ebp-275E197Fh]
mov	[esp+94h+var_54], esi
mov	esi, d
xor	esi, a
and	esi, b
xor	esi, a
add	esi, [esp+94h+var_54]
ror	c, 12h
add	c, d
mov	ebp, [esp+94h+var_80]
lea	b, [b+ebp-182C0438h]
mov	[esp+94h+var_54], edi
mov	edi, c
xor	edi, d
and	edi, a
xor	edi, d
add	edi, [esp+94h+var_54]
ror	b, 0Ch
add	b, c
mov	ebp, [esp+94h+var_6C]
lea	a, [a+ebp+21E1CDE6h]
mov	[esp+94h+var_54], edx
mov	edx, b
xor	edx, c
and	edx, d
xor	edx, c
add	edx, [esp+94h+var_54]
ror	a, 1Bh
add	a, b
mov	ebp, [esp+94h+var_58]
lea	d, [d+ebp-3CC8F82Ah]
mov	[esp+94h+var_54], ecx
mov	ecx, a
xor	ecx, b
and	ecx, c
xor	ecx, b
add	ecx, [esp+94h+var_54]
ror	d, 17h
add	d, a
mov	ebp, [esp+94h+var_84]
lea	c, [c+ebp-0B2AF279h]
mov	[esp+94h+var_54], esi
mov	esi, d
xor	esi, a
and	esi, b
xor	esi, a
add	esi, [esp+94h+var_54]
ror	c, 12h
add	c, d
mov	ebp, [esp+94h+var_70]
lea	b, [b+ebp+455A14EDh]
mov	[esp+94h+var_54], edi
mov	edi, c
xor	edi, d
and	edi, a
xor	edi, d
mov	ebp, [esp+94h+var_54]
add	b, edi
ror	b, 0Ch
add	b, c
mov	edi, [esp+94h+var_5C]
lea	a, [a+edi-561C16FBh]
mov	[esp+94h+var_54], edx
mov	edx, b
xor	edx, c
and	edx, d
xor	edx, c
add	edx, [esp+94h+var_54]
ror	a, 1Bh
add	a, b
mov	edi, [esp+94h+var_88]
lea	d, [d+edi-3105C08h]
mov	[esp+94h+var_54], ecx
mov	ecx, a
xor	ecx, b
and	ecx, c
xor	ecx, b
add	ecx, [esp+94h+var_54]
ror	d, 17h
add	d, a
mov	edi, [esp+94h+var_74]
lea	c, [c+edi+676F02D9h]
mov	[esp+94h+var_54], esi
mov	esi, d
xor	esi, a
and	esi, b
xor	esi, a
add	esi, [esp+94h+var_54]
ror	c, 12h
add	c, d
mov	edi, c
xor	edi, d
mov	[esp+94h+var_94], edi
mov	edi, [esp+94h+var_60]
lea	b, [b+edi-72D5B376h]
mov	edi, [esp+94h+var_94]
and	edi, a
xor	edi, d
add	ebp, edi
ror	b, 0Ch
add	b, c
mov	edi, [esp+94h+var_7C]
lea	a, [a+edi-5C6BEh]
mov	edi, [esp+94h+var_94]
xor	edi, b
lea	edi, [edx+edi]
ror	a, 1Ch
add	a, b
mov	edx, [esp+94h+var_70]
lea	d, [d+edx-788E097Fh]
mov	edx, b
xor	edx, c
xor	edx, a
add	ecx, edx
ror	d, 15h
add	d, a
mov	edx, [esp+94h+var_64]
lea	c, [c+edx+6D9D6122h]
mov	edx, a
xor	edx, b
xor	edx, d
lea	edx, [esi+edx]
ror	c, 10h
add	c, d
mov	esi, [esp+94h+var_58]
lea	b, [b+esi-21AC7F4h]
mov	esi, d
xor	esi, a
xor	esi, c
lea	esi, [ebp+esi+0]
ror	b, 9
add	b, c
mov	ebp, [esp+94h+var_8C]
lea	a, [a+ebp-5B4115BCh]
mov	[esp+94h+var_54], edi
mov	edi, c
xor	edi, d
xor	edi, b
add	edi, [esp+94h+var_54]
ror	a, 1Ch
add	a, b
mov	ebp, [esp+94h+var_80]
lea	d, [d+ebp+4BDECFA9h]
mov	[esp+94h+var_54], ecx
mov	ecx, b
xor	ecx, c
xor	ecx, a
add	ecx, [esp+94h+var_54]
ror	d, 15h
add	d, a
mov	ebp, [esp+94h+var_74]
lea	c, [c+ebp-944B4A0h]
mov	[esp+94h+var_54], edx
mov	edx, a
xor	edx, b
xor	edx, d
mov	ebp, [esp+94h+var_54]
add	c, edx
ror	c, 10h
add	c, d
mov	edx, [esp+94h+var_68]
lea	b, [b+edx-41404390h]
mov	edx, d
xor	edx, a
xor	edx, c
add	esi, edx
ror	b, 9
add	b, c
mov	edx, [esp+94h+var_5C]
lea	a, [a+edx+289B7EC6h]
mov	edx, c
xor	edx, d
xor	edx, b
lea	edx, [edi+edx]
ror	a, 1Ch
add	a, b
lea	edi, [d+ebx-155ED806h]
mov	d, b
xor	ecx, c
xor	ecx, a
add	edi, ecx
ror	d, 15h
add	d, a
mov	ecx, [esp+94h+var_84]
lea	c, [c+ecx-2B10CF7Bh]
mov	ecx, a
xor	ecx, b
xor	ecx, d
add	ebp, ecx
ror	c, 10h
add	c, d
mov	ecx, [esp+94h+var_78]
lea	b, [b+ecx+4881D05h]
mov	ecx, d
xor	ecx, a
xor	ecx, c
lea	ecx, [esi+ecx]
ror	b, 9
add	b, c
mov	esi, [esp+94h+var_6C]
lea	a, [a+esi-262B2FC7h]
mov	[esp+94h+var_54], edx
mov	edx, c
xor	edx, d
xor	edx, b
mov	esi, [esp+94h+var_54]
add	a, edx
ror	a, 1Ch
add	a, b
mov	edx, [esp+94h+var_60]
lea	d, [d+edx-1924661Bh]
mov	edx, b
xor	edx, c
xor	edx, a
add	edi, edx
ror	d, 15h
add	d, a
mov	edx, [esp+94h+var_90]
lea	c, [c+edx+1FA27CF8h]
mov	edx, a
xor	edx, b
xor	edx, d
lea	edx, [ebp+edx+0]
ror	c, 10h
add	c, d
mov	ebp, [esp+94h+var_88]
lea	b, [b+ebp-3B53A99Bh]
mov	[esp+94h+var_54], ecx
mov	ecx, d
xor	ecx, a
xor	ecx, c
add	ecx, [esp+94h+var_54]
ror	b, 9
add	b, c
lea	a, [a+ebx-0BD6DDBCh]
mov	ebx, d
not	ebx
or	ebx, b
xor	ebx, c
lea	ebx, [esi+ebx]
ror	a, 1Ah
add	a, b
mov	esi, [esp+94h+var_74]
lea	d, [d+esi+432AFF97h]
mov	esi, c
not	esi
or	esi, a
xor	esi, b
lea	esi, [edi+esi]
ror	d, 16h
add	d, a
mov	ebp, [esp+94h+var_58]
lea	edi, [c+ebp-546BDC59h]
mov	c, b
not	edx
or	edx, d
xor	edx, a
lea	edx, [edi+edx]
ror	c, 11h
add	c, d
mov	ebp, [esp+94h+var_7C]
lea	edi, [b+ebp-36C5FC7h]
mov	b, a
not	ecx
or	ecx, c
xor	ecx, d
lea	ecx, [edi+ecx]
ror	b, 0Bh
add	b, c
mov	ebp, [esp+94h+var_60]
lea	edi, [a+ebp+655B59C3h]
mov	a, d
not	ebx
or	ebx, b
xor	ebx, c
lea	ebx, [edi+ebx]
ror	a, 1Ah
add	a, b
mov	ebp, [esp+94h+var_84]
lea	edi, [d+ebp-70F3336Eh]
mov	d, c
not	esi
or	esi, a
xor	esi, b
lea	esi, [edi+esi]
ror	d, 16h
add	d, a
mov	ebp, [esp+94h+var_68]
lea	edi, [c+ebp-100B83h]
mov	c, b
not	edx
or	edx, d
xor	edx, a
lea	edx, [edi+edx]
ror	c, 11h
add	c, d
mov	ebp, [esp+94h+var_8C]
lea	edi, [b+ebp-7A7BA22Fh]
mov	b, a
not	ecx
or	ecx, c
xor	ecx, d
lea	ecx, [edi+ecx]
ror	b, 0Bh
add	b, c
mov	ebp, [esp+94h+var_70]
lea	edi, [a+ebp+6FA87E4Fh]
mov	a, d
not	ebx
or	ebx, b
xor	ebx, c
lea	ebx, [edi+ebx]
ror	a, 1Ah
add	a, b
mov	ebp, [esp+94h+var_90]
lea	edi, [d+ebp-1D31920h]
mov	d, c
not	esi
or	esi, a
xor	esi, b
lea	esi, [edi+esi]
ror	d, 16h
add	d, a
mov	ebp, [esp+94h+var_78]
lea	edi, [c+ebp-5CFEBCECh]
mov	c, b
not	edx
or	edx, d
xor	edx, a
lea	edx, [edi+edx]
ror	c, 11h
add	c, d
mov	ebp, [esp+94h+var_5C]
lea	edi, [b+ebp+4E0811A1h]
mov	b, a
not	ecx
or	ecx, c
xor	ecx, d
lea	ecx, [edi+ecx]
ror	b, 0Bh
add	b, c
mov	ebp, [esp+94h+var_80]
lea	edi, [a+ebp-8AC817Eh]
mov	a, d
not	ebx
or	ebx, b
xor	ebx, c
lea	ebx, [edi+ebx]
ror	a, 1Ah
add	a, b
mov	ebp, [esp+94h+var_64]
lea	edi, [d+ebp-42C50DCBh]
mov	d, c
not	esi
or	esi, a
xor	esi, b
lea	esi, [edi+esi]
ror	d, 16h
add	d, a
mov	ebp, [esp+94h+var_88]
lea	edi, [c+ebp+2AD7D2BBh]
mov	c, b
not	edx
or	edx, d
xor	edx, a
lea	edx, [edi+edx]
ror	c, 11h
add	c, d
mov	ebp, [esp+94h+var_6C]
lea	edi, [b+ebp-14792C6Fh]
mov	b, a
not	ecx
or	ecx, c
xor	ecx, d
lea	ecx, [edi+ecx]
add	a, [eax]
mov	[eax], ebx
mov	ebx, [eax+4]
add	ebx, c
ror	b, 0Bh
lea	ecx, [ebx+ecx]
mov	[eax+4], ecx
add	[eax+8], c
add	[eax+0Ch], d
add	esp, 84h
pop	ebx
pop	d
pop	edi
pop	ebp
retn
align 4
public _silc_md5_transform
jmp	_MD5Transform
align 4
public _MD5Final
push	ebp
push	edi
push	esi
push	ebx
sub	esp, 0Ch
mov	ebp, [esp+1Ch+digest]
mov	ebx, [esp+1Ch+ctx]
mov	eax, [ebx+10h]
shr	eax, 3
and	eax, 3Fh
mov	byte ptr [ebx+count+18h], 80h
lea	edx, [ebx+count+19h]
mov	ecx, 3Fh
sub	ecx, count
cmp	count, 7
jbe	short loc_641ED15C
sub	count, 8
xor	eax, eax
mov	edi, p
rep stosb
lea	esi, [ctx_0+18h]
mov	eax, [ctx_0+10h]
mov	[esi+38h], eax
mov	eax, [ctx_0+14h]
mov	[esi+3Ch], eax
mov	[esp+1Ch+kbuf],	esi 
mov	[esp+1Ch+buf], ctx_0 
call	_MD5Transform
mov	eax, [ctx_0]
mov	[digest_0+0], eax
mov	eax, [ctx_0+4]
mov	[digest_0+4], eax
mov	eax, [ctx_0+8]
mov	[digest_0+8], eax
mov	eax, [ctx_0+0Ch]
mov	[digest_0+0Ch],	eax
mov	dword ptr [ctx_0], 0
add	esp, 0Ch
pop	ctx_0
pop	esi
pop	p
pop	digest_0
retn
align 4
xor	eax, eax
mov	edi, p
rep stosb
lea	esi, [ctx_0+18h]
mov	[esp+1Ch+kbuf],	esi 
mov	[esp+1Ch+buf], ctx_0 
mov	[esp+1Ch+var_14], al
call	_MD5Transform
mov	ecx, 38h
mov	al, [esp+1Ch+var_14]
mov	p, esi
rep stosb
jmp	short loc_641ED11D
public _silc_md5_final
mov	eax, [esp+digest]
mov	edx, [esp+context]
mov	[esp+digest], edx
mov	[esp+context], eax
jmp	_MD5Final
align 4
public _MD5Update
push	ebp
push	edi
push	esi
push	ebx
sub	esp, 10h
mov	ebp, [esp+20h+len]
mov	eax, [esp+20h+ctx]
mov	ebx, [eax+10h]
lea	eax, [t+ebp*8]
mov	edx, [esp+20h+ctx]
mov	[edx+10h], eax
cmp	t, eax
ja	loc_641ED294
mov	eax, [edx+14h]
mov	edx, len_0
shr	edx, 1Dh
add	eax, edx
mov	edx, [esp+20h+ctx]
mov	[edx+14h], eax
shr	t, 3
and	ebx, 3Fh
jnz	short loc_641ED250
mov	eax, edx
add	eax, 18h
mov	[esp+20h+var_14], eax
cmp	len_0, 3Fh
jbe	short loc_641ED23C
xor	t, t
mov	[esp+20h+var_18], len_0
mov	len_0, [esp+20h+var_14]
lea	esi, [esi+0]
mov	esi, [esp+20h+buf]
add	esi, ebx
mov	p, ebp
mov	ecx, 10h
rep movsd
mov	[esp+20h+kbuf],	ebp 
mov	eax, [esp+20h+ctx]
mov	[esp+20h+var_20], eax 
call	_MD5Transform
add	ebx, 40h
mov	eax, [esp+20h+var_18]
sub	eax, ebx
cmp	eax, 3Fh
ja	short loc_641ED1F4
mov	ebp, [esp+20h+var_18]
sub	len_0, 40h
mov	eax, ebp
and	eax, 0FFFFFFC0h
mov	edx, [esp+20h+buf]
lea	edx, [edx+eax+40h]
mov	[esp+20h+buf], edx
and	ebp, 3Fh
mov	p, [esp+20h+var_14]
mov	esi, [esp+20h+buf]
mov	ecx, len_0
rep movsb
add	esp, 10h
pop	t
pop	buf_0
pop	edi
pop	ebp
retn
lea	eax, [edx+t+18h]
mov	edx, 40h
sub	edx, t
mov	t, edx
cmp	len_0, edx
jb	short loc_641ED2A0
mov	edi, p
mov	esi, [esp+20h+buf]
mov	ecx, t
rep movsb
mov	eax, [esp+20h+ctx]
add	eax, 18h
mov	[esp+20h+var_14], eax
mov	[esp+20h+kbuf],	eax 
mov	edx, [esp+20h+ctx]
mov	[esp+20h+var_20], edx 
call	_MD5Transform
mov	[esp+20h+buf], buf_0
sub	len_0, ebx
jmp	loc_641ED1E2
align 4
mov	eax, [edx+14h]
inc	eax
mov	[edx+14h], eax
jmp	loc_641ED1C3
mov	edi, p
mov	esi, [esp+20h+buf]
mov	ecx, len_0
rep movsb
add	esp, 10h
pop	ebx
pop	buf_0
pop	p
pop	ebp
retn
align 4
public _silc_md5_update
jmp	_MD5Update
align 4
public _silc_none_set_key
mov	al, 1
retn
align 10h
public _silc_none_set_iv
retn
align 4
public _silc_none_context_len
mov	eax, 1
retn
align 4
public _silc_none_decrypt
sub	esp, 1Ch
mov	eax, [esp+1Ch+len]
mov	[esp+1Ch+var_14], eax 
mov	eax, [esp+1Ch+src]
mov	[esp+1Ch+var_18], eax 
mov	eax, [esp+1Ch+dst]
mov	[esp+1Ch+var_1C], eax 
call	_memmove
mov	al, 1
add	esp, 1Ch
retn
align 4
public _silc_none_encrypt
sub	esp, 1Ch
mov	eax, [esp+1Ch+len]
mov	[esp+1Ch+var_14], eax 
mov	eax, [esp+1Ch+src]
mov	[esp+1Ch+var_18], eax 
mov	eax, [esp+1Ch+dst]
mov	[esp+1Ch+var_1C], eax 
call	_memmove
mov	al, 1
add	esp, 1Ch
retn
align 4
public _silc_rsa_public_operation
			
sub	esp, 1Ch
mov	eax, [esp+1Ch+key]
lea	edx, [eax+4]
mov	[esp+1Ch+mod], edx 
add	eax, 14h
mov	[esp+1Ch+exp], eax 
mov	eax, [esp+1Ch+src]
mov	[esp+1Ch+mp1], eax 
mov	eax, [esp+1Ch+dst]
mov	[esp+1Ch+var_1C], eax 
call	_silc_mp_pow_mod
mov	al, 1
add	esp, 1Ch
retn
align 4
public _silc_rsa_private_operation
			
push	ebp
push	edi
push	esi
push	ebx
sub	esp, 3Ch
mov	edi, [esp+4Ch+key]
mov	ebx, [esp+4Ch+dst]
lea	esi, [esp+4Ch+tmp]
mov	[esp+4Ch+mp], esi 
call	_silc_mp_init
lea	eax, [edi+34h]
mov	[esp+4Ch+mod], eax 
lea	edx, [edi+54h]
mov	[esp+4Ch+exp], edx 
mov	edx, [esp+4Ch+src]
mov	[esp+4Ch+mp1], edx 
mov	[esp+4Ch+mp], ebx 
mov	[esp+4Ch+mp2], eax
call	_silc_mp_pow_mod
lea	ebp, [edi+44h]
mov	[esp+4Ch+mod], ebp 
lea	edx, [edi+64h]
mov	[esp+4Ch+exp], edx 
mov	edx, [esp+4Ch+src]
mov	[esp+4Ch+mp1], edx 
mov	[esp+4Ch+mp], esi 
call	_silc_mp_pow_mod
mov	[esp+4Ch+exp], esi 
mov	[esp+4Ch+mp1], ebx 
mov	[esp+4Ch+mp], ebx 
call	_silc_mp_sub
add	edi, 74h
mov	[esp+4Ch+exp], edi 
mov	[esp+4Ch+mp1], ebx 
mov	[esp+4Ch+mp], ebx 
call	_silc_mp_mul
mov	eax, [esp+4Ch+mp2]
mov	[esp+4Ch+exp], eax 
mov	[esp+4Ch+mp1], ebx 
mov	[esp+4Ch+mp], ebx 
call	_silc_mp_mod
mov	[esp+4Ch+exp], ebp 
mov	[esp+4Ch+mp1], ebx 
mov	[esp+4Ch+mp], ebx 
call	_silc_mp_mul
mov	[esp+4Ch+exp], esi 
mov	[esp+4Ch+mp1], ebx 
mov	[esp+4Ch+mp], ebx 
call	_silc_mp_add
mov	[esp+4Ch+mp], esi 
call	_silc_mp_uninit
mov	al, 1
add	esp, 3Ch
pop	ebx
pop	esi
pop	edi
pop	ebp
retn
public _silc_rsa_generate_keys
push	ebp
push	edi
push	esi
push	ebx
sub	esp, 9Ch
mov	[esp+0ACh+size], 24h 
mov	[esp+0ACh+items], 1 
call	_silc_calloc
mov	[esp+0ACh+var_94], eax
mov	eax, [esp+0ACh+ret_public_key]
mov	edx, [esp+0ACh+var_94]
mov	[eax], edx
test	edx, edx
jz	loc_641ED740
mov	[esp+0ACh+size], 84h 
mov	[esp+0ACh+items], 1 
call	_silc_calloc
mov	ebp, eax
mov	eax, [esp+0ACh+ret_private_key]
mov	[eax], privkey
test	privkey, privkey
jz	loc_641ED740
lea	ret_private_key_0, [privkey+4]
mov	[esp+0ACh+dst],	eax
mov	[esp+0ACh+items], eax 
call	_silc_mp_init
lea	ebx, [privkey+14h]
mov	[esp+0ACh+items], ebx 
call	_silc_mp_init
lea	edx, [privkey+24h]
mov	[esp+0ACh+inv],	edx
mov	[esp+0ACh+items], edx 
call	_silc_mp_init
lea	eax, [privkey+54h]
mov	[esp+0ACh+var_80], eax
mov	[esp+0ACh+items], eax 
call	_silc_mp_init
lea	edx, [privkey+64h]
mov	[esp+0ACh+var_84], edx
mov	[esp+0ACh+items], edx 
call	_silc_mp_init
lea	eax, [privkey+74h]
mov	[esp+0ACh+var_88], eax
mov	[esp+0ACh+items], eax 
call	_silc_mp_init
lea	edi, [esp+0ACh+phi]
mov	[esp+0ACh+items], edi 
call	_silc_mp_init
lea	esi, [esp+0ACh+hlp]
mov	[esp+0ACh+items], esi 
call	_silc_mp_init
lea	edx, [esp+0ACh+div]
mov	[esp+0ACh+items], edx 
call	_silc_mp_init
lea	eax, [esp+0ACh+lcm]
mov	[esp+0ACh+items], eax 
call	_silc_mp_init
lea	edx, [esp+0ACh+pm1]
mov	[esp+0ACh+items], edx 
call	_silc_mp_init
lea	eax, [esp+0ACh+qm1]
mov	[esp+0ACh+items], eax 
call	_silc_mp_init
mov	eax, [esp+0ACh+bits]
mov	[privkey+0], eax
mov	edx, [esp+0ACh+q]
mov	[esp+0ACh+mp2],	edx 
mov	eax, [esp+0ACh+p]
mov	[esp+0ACh+size], eax 
mov	edx, [esp+0ACh+dst]
mov	[esp+0ACh+items], edx 
call	_silc_mp_mul
mov	[esp+0ACh+mp2],	1 
mov	eax, [esp+0ACh+p]
mov	[esp+0ACh+size], eax 
lea	edx, [esp+0ACh+pm1]
mov	[esp+0ACh+items], edx 
call	_silc_mp_sub_ui
mov	[esp+0ACh+mp2],	1 
mov	eax, [esp+0ACh+q]
mov	[esp+0ACh+size], eax 
lea	edx, [esp+0ACh+qm1]
mov	[esp+0ACh+items], edx 
call	_silc_mp_sub_ui
lea	eax, [esp+0ACh+qm1]
mov	[esp+0ACh+mp2],	eax 
lea	edx, [esp+0ACh+pm1]
mov	[esp+0ACh+size], edx 
mov	[esp+0ACh+items], edi 
call	_silc_mp_mul
mov	[esp+0ACh+size], 0FFFDh	
mov	[esp+0ACh+items], ebx 
call	_silc_mp_set_ui
jmp	short retry_e
align 4
mov	[esp+0ACh+mp2],	2 
mov	[esp+0ACh+size], ebx 
mov	[esp+0ACh+items], ebx 
call	_silc_mp_add_ui
mov	[esp+0ACh+mp2],	edi 
mov	[esp+0ACh+size], ebx 
mov	[esp+0ACh+items], esi 
call	_silc_mp_gcd
mov	[esp+0ACh+size], 1 
mov	[esp+0ACh+items], esi 
call	_silc_mp_cmp_ui
test	eax, eax
jg	short loc_641ED5A4
lea	eax, [esp+0ACh+qm1]
mov	[esp+0ACh+mp2],	eax 
lea	edx, [esp+0ACh+pm1]
mov	[esp+0ACh+size], edx 
lea	eax, [esp+0ACh+div]
mov	[esp+0ACh+items], eax 
call	_silc_mp_gcd
lea	edx, [esp+0ACh+div]
mov	[esp+0ACh+mp2],	edx 
mov	[esp+0ACh+size], edi 
lea	eax, [esp+0ACh+lcm]
mov	[esp+0ACh+items], eax 
call	_silc_mp_div
lea	edx, [esp+0ACh+lcm]
mov	[esp+0ACh+mp2],	edx 
mov	[esp+0ACh+size], ebx 
mov	eax, [esp+0ACh+inv]
mov	[esp+0ACh+items], eax 
call	_silc_mp_modinv
lea	edx, [esp+0ACh+pm1]
mov	[esp+0ACh+mp2],	edx 
mov	eax, [esp+0ACh+inv]
mov	[esp+0ACh+size], eax 
mov	edx, [esp+0ACh+var_80]
mov	[esp+0ACh+items], edx 
call	_silc_mp_mod
lea	eax, [esp+0ACh+qm1]
mov	[esp+0ACh+mp2],	eax 
mov	edx, [esp+0ACh+inv]
mov	[esp+0ACh+size], edx 
mov	eax, [esp+0ACh+var_84]
mov	[esp+0ACh+items], eax 
call	_silc_mp_mod
mov	edx, [esp+0ACh+p]
mov	[esp+0ACh+mp2],	edx 
mov	eax, [esp+0ACh+q]
mov	[esp+0ACh+size], eax 
mov	edx, [esp+0ACh+var_88]
mov	[esp+0ACh+items], edx 
call	_silc_mp_modinv
mov	eax, [esp+0ACh+p]
mov	[esp+0ACh+size], eax 
lea	eax, [privkey+34h]
mov	[esp+0ACh+items], eax 
call	_silc_mp_set
mov	edx, [esp+0ACh+q]
mov	[esp+0ACh+size], edx 
lea	eax, [privkey+44h]
mov	[esp+0ACh+items], eax 
call	_silc_mp_set
mov	[esp+0ACh+items], edi 
call	_silc_mp_uninit
mov	[esp+0ACh+items], esi 
call	_silc_mp_uninit
lea	eax, [esp+0ACh+div]
mov	[esp+0ACh+items], eax 
call	_silc_mp_uninit
lea	edx, [esp+0ACh+lcm]
mov	[esp+0ACh+items], edx 
call	_silc_mp_uninit
lea	eax, [esp+0ACh+pm1]
mov	[esp+0ACh+items], eax 
call	_silc_mp_uninit
lea	edx, [esp+0ACh+qm1]
mov	[esp+0ACh+items], edx 
call	_silc_mp_uninit
mov	edi, [esp+0ACh+var_94]
add	edi, 4
mov	[esp+0ACh+items], edi 
call	_silc_mp_init
mov	esi, [esp+0ACh+var_94]
add	esi, 14h
mov	[esp+0ACh+items], esi 
call	_silc_mp_init
mov	eax, [privkey+0]
mov	edx, [esp+0ACh+var_94]
mov	[edx], eax
mov	eax, [esp+0ACh+dst]
mov	[esp+0ACh+size], eax 
mov	[esp+0ACh+items], edi 
call	_silc_mp_set
mov	[esp+0ACh+size], ebx 
mov	[esp+0ACh+items], esi 
call	_silc_mp_set
mov	al, 1
add	esp, 9Ch
pop	ebx
pop	esi
pop	edi
pop	privkey
retn
align 10h
			
xor	eax, eax
add	esp, 9Ch
pop	ebx
pop	esi
pop	edi
pop	privkey
retn
align 10h
public _silc_sha1_init
mov	eax, [esp+context]
mov	dword ptr [eax], 67452301h
mov	dword ptr [eax+4], 0EFCDAB89h
mov	dword ptr [eax+8], 98BADCFEh
mov	dword ptr [eax+0Ch], 10325476h
mov	dword ptr [eax+10h], 0C3D2E1F0h
mov	dword ptr [eax+18h], 0
mov	dword ptr [eax+14h], 0
retn
align 4
public _silc_sha1_context_len
mov	eax, 5Ch
retn
align 10h
public _SHA1Init
mov	eax, [esp+context]
mov	dword ptr [eax], 67452301h
mov	dword ptr [eax+4], 0EFCDAB89h
mov	dword ptr [eax+8], 98BADCFEh
mov	dword ptr [eax+0Ch], 10325476h
mov	dword ptr [eax+10h], 0C3D2E1F0h
mov	dword ptr [eax+18h], 0
mov	dword ptr [eax+14h], 0
retn
align 4
public _SHA1Transform
			
push	ebp
push	edi
push	esi
push	ebx
sub	esp, 8Ch
mov	eax, [esp+9Ch+data]
mov	edx, [esp+9Ch+state]
mov	edx, [edx]
mov	[esp+9Ch+var_98], edx
mov	ecx, [esp+9Ch+state]
mov	edx, [ecx+4]
mov	ebx, ecx
mov	ecx, [ecx+8]
mov	ebx, [ebx+0Ch]
movzx	esi, byte ptr [eax+3]
movzx	edi, byte ptr [eax]
shl	edi, 18h
or	edi, esi
movzx	ebp, byte ptr [eax+1]
shl	ebp, 10h
or	edi, ebp
movzx	esi, byte ptr [eax+2]
shl	esi, 8
or	edi, esi
mov	[esp+9Ch+var_60], edi
mov	edi, [esp+9Ch+var_98]
ror	edi, 1Bh
mov	ebp, [esp+9Ch+state]
add	edi, [ebp+10h]
mov	esi, d
xor	esi, c
and	esi, b
xor	esi, d
lea	esi, [edi+esi+5A827999h]
add	esi, [esp+9Ch+var_60]
mov	[esp+9Ch+var_94], esi
ror	b, 2
lea	esi, [eax+4]
movzx	edi, byte ptr [data_0+3]
movzx	ebp, byte ptr [eax+4]
shl	ebp, 18h
or	edi, ebp
movzx	ebp, byte ptr [data_0+1]
shl	ebp, 10h
or	ebp, edi
movzx	edi, byte ptr [data_0+2]
shl	edi, 8
or	ebp, edi
mov	[esp+9Ch+var_64], ebp
mov	data_0,	b
xor	esi, c
and	esi, [esp+9Ch+var_98]
xor	esi, c
lea	esi, [d+esi+5A827999h]
add	esi, ebp
mov	d, [esp+9Ch+var_94]
ror	ebx, 1Bh
lea	ebx, [esi+ebx]
mov	[esp+9Ch+var_8C], ebx
mov	ebx, [esp+9Ch+var_98]
ror	a, 2
lea	esi, [data_0+8]
movzx	edi, byte ptr [data_0+3]
movzx	ebp, byte ptr [eax+8]
shl	ebp, 18h
or	ebp, edi
movzx	edi, byte ptr [data_0+1]
shl	edi, 10h
or	edi, ebp
movzx	ebp, byte ptr [data_0+2]
shl	ebp, 8
or	edi, ebp
mov	[esp+9Ch+var_68], edi
lea	c, [edi+c+5A827999h]
mov	data_0,	b
xor	esi, a
and	esi, [esp+9Ch+var_94]
xor	esi, b
lea	esi, [ecx+esi]
mov	ecx, [esp+9Ch+var_8C]
ror	ecx, 1Bh
lea	ecx, [esi+ecx]
mov	[esp+9Ch+var_90], ecx
mov	ecx, [esp+9Ch+var_94]
ror	e, 2
lea	esi, [data_0+0Ch]
movzx	edi, byte ptr [data_0+3]
movzx	ebp, byte ptr [eax+0Ch]
shl	ebp, 18h
or	ebp, edi
movzx	edi, byte ptr [data_0+1]
shl	edi, 10h
or	edi, ebp
movzx	ebp, byte ptr [data_0+2]
shl	ebp, 8
or	edi, ebp
mov	[esp+9Ch+var_6C], edi
lea	b, [edi+b+5A827999h]
mov	data_0,	e
xor	esi, a
and	esi, [esp+9Ch+var_8C]
xor	esi, a
lea	esi, [edx+esi]
mov	edx, [esp+9Ch+var_90]
ror	edx, 1Bh
lea	edx, [esi+edx]
mov	[esp+9Ch+var_94], edx
mov	edx, [esp+9Ch+var_8C]
ror	d, 2
lea	esi, [data_0+10h]
movzx	edi, byte ptr [data_0+3]
movzx	ebp, byte ptr [eax+10h]
shl	ebp, 18h
or	ebp, edi
movzx	edi, byte ptr [data_0+1]
shl	edi, 10h
or	edi, ebp
movzx	ebp, byte ptr [data_0+2]
shl	ebp, 8
or	edi, ebp
mov	[esp+9Ch+var_70], edi
lea	data_0,	[edi+a+5A827999h]
mov	a, d
xor	ebx, e
and	ebx, [esp+9Ch+var_90]
xor	ebx, e
lea	ebx, [esi+ebx]
mov	esi, [esp+9Ch+var_94]
ror	esi, 1Bh
lea	esi, [ebx+esi]
mov	[esp+9Ch+var_8C], esi
mov	edi, [esp+9Ch+var_90]
ror	c, 2
lea	ebx, [data_0+14h]
movzx	esi, byte ptr [data_0+3]
movzx	ebp, byte ptr [eax+14h]
shl	ebp, 18h
or	ebp, esi
movzx	esi, byte ptr [data_0+1]
shl	esi, 10h
or	esi, ebp
movzx	ebp, byte ptr [data_0+2]
shl	ebp, 8
or	esi, ebp
mov	[esp+9Ch+var_74], esi
lea	data_0,	[esi+e+5A827999h]
mov	e, c
xor	ecx, d
and	ecx, [esp+9Ch+var_94]
xor	ecx, d
lea	ecx, [ebx+ecx]
mov	ebx, [esp+9Ch+var_8C]
ror	ebx, 1Bh
lea	ebx, [ecx+ebx]
mov	[esp+9Ch+var_90], ebx
mov	esi, [esp+9Ch+var_94]
ror	b, 2
lea	ecx, [data_0+18h]
movzx	ebx, byte ptr [data_0+3]
movzx	ebp, byte ptr [eax+18h]
shl	ebp, 18h
or	ebp, ebx
movzx	ebx, byte ptr [data_0+1]
shl	ebx, 10h
or	ebx, ebp
movzx	ebp, byte ptr [data_0+2]
shl	ebp, 8
or	ebx, ebp
mov	[esp+9Ch+var_78], ebx
lea	data_0,	[ebx+d+5A827999h]
mov	d, b
xor	edx, c
and	edx, [esp+9Ch+var_8C]
xor	edx, c
lea	edx, [ecx+edx]
mov	ecx, [esp+9Ch+var_90]
ror	ecx, 1Bh
lea	ecx, [edx+ecx]
mov	[esp+9Ch+var_94], ecx
mov	ebx, [esp+9Ch+var_8C]
ror	a, 2
lea	edx, [data_0+1Ch]
movzx	ecx, byte ptr [data_0+3]
movzx	ebp, byte ptr [eax+1Ch]
shl	ebp, 18h
or	ebp, ecx
movzx	ecx, byte ptr [data_0+1]
shl	ecx, 10h
or	ecx, ebp
movzx	ebp, byte ptr [data_0+2]
shl	ebp, 8
or	ecx, ebp
mov	[esp+9Ch+var_54], ecx
lea	data_0,	[ecx+c+5A827999h]
mov	ecx, a
xor	ecx, b
and	ecx, [esp+9Ch+var_90]
xor	ecx, b
lea	ecx, [edx+ecx]
mov	edx, [esp+9Ch+var_94]
ror	edx, 1Bh
lea	edx, [ecx+edx]
mov	[esp+9Ch+var_8C], edx
mov	ecx, [esp+9Ch+var_90]
ror	e, 2
lea	edx, [data_0+20h]
movzx	c, byte	ptr [data_0+3]
movzx	ebp, byte ptr [eax+20h]
shl	ebp, 18h
or	ebp, edi
movzx	edi, byte ptr [data_0+1]
shl	edi, 10h
or	edi, ebp
movzx	ebp, byte ptr [data_0+2]
shl	ebp, 8
or	edi, ebp
mov	[esp+9Ch+var_80], edi
lea	data_0,	[edi+b+5A827999h]
mov	b, e
xor	esi, a
and	esi, [esp+9Ch+var_94]
xor	esi, a
lea	esi, [edx+esi]
mov	edx, [esp+9Ch+var_8C]
ror	edx, 1Bh
lea	edx, [esi+edx]
mov	[esp+9Ch+var_90], edx
mov	edx, [esp+9Ch+var_94]
ror	d, 2
lea	esi, [data_0+24h]
movzx	edi, byte ptr [data_0+3]
movzx	ebp, byte ptr [eax+24h]
shl	ebp, 18h
or	ebp, edi
movzx	edi, byte ptr [data_0+1]
shl	edi, 10h
or	edi, ebp
movzx	ebp, byte ptr [data_0+2]
shl	ebp, 8
or	edi, ebp
mov	[esp+9Ch+var_58], edi
lea	a, [edi+a+5A827999h]
mov	data_0,	d
xor	esi, e
and	esi, [esp+9Ch+var_8C]
xor	esi, e
lea	esi, [ebx+esi]
mov	ebx, [esp+9Ch+var_90]
ror	ebx, 1Bh
lea	ebx, [esi+ebx]
mov	[esp+9Ch+var_94], ebx
mov	ebx, [esp+9Ch+var_8C]
ror	c, 2
lea	esi, [data_0+28h]
movzx	edi, byte ptr [data_0+3]
movzx	ebp, byte ptr [eax+28h]
shl	ebp, 18h
or	ebp, edi
movzx	edi, byte ptr [data_0+1]
shl	edi, 10h
or	edi, ebp
movzx	ebp, byte ptr [data_0+2]
shl	ebp, 8
or	edi, ebp
mov	[esp+9Ch+var_84], edi
lea	e, [edi+e+5A827999h]
mov	data_0,	c
xor	esi, d
and	esi, [esp+9Ch+var_90]
xor	esi, d
lea	esi, [ecx+esi]
mov	ecx, [esp+9Ch+var_94]
ror	ecx, 1Bh
lea	ecx, [esi+ecx]
mov	[esp+9Ch+var_8C], ecx
mov	ecx, [esp+9Ch+var_90]
ror	b, 2
lea	esi, [data_0+2Ch]
movzx	edi, byte ptr [data_0+3]
movzx	ebp, byte ptr [eax+2Ch]
shl	ebp, 18h
or	ebp, edi
movzx	edi, byte ptr [data_0+1]
shl	edi, 10h
or	edi, ebp
movzx	ebp, byte ptr [data_0+2]
shl	ebp, 8
or	edi, ebp
mov	[esp+9Ch+var_88], edi
lea	d, [edi+d+5A827999h]
mov	data_0,	b
xor	esi, c
and	esi, [esp+9Ch+var_94]
xor	esi, c
lea	esi, [edx+esi]
mov	edx, [esp+9Ch+var_8C]
ror	edx, 1Bh
lea	edx, [esi+edx]
mov	[esp+9Ch+var_90], edx
mov	edx, [esp+9Ch+var_94]
ror	a, 2
lea	esi, [data_0+30h]
movzx	edi, byte ptr [data_0+3]
movzx	ebp, byte ptr [eax+30h]
shl	ebp, 18h
or	ebp, edi
movzx	edi, byte ptr [data_0+1]
shl	edi, 10h
or	edi, ebp
movzx	ebp, byte ptr [data_0+2]
shl	ebp, 8
or	edi, ebp
mov	[esp+9Ch+var_5C], edi
lea	c, [edi+c+5A827999h]
mov	data_0,	a
xor	esi, b
and	esi, [esp+9Ch+var_8C]
xor	esi, b
lea	esi, [ebx+esi]
mov	ebx, [esp+9Ch+var_90]
ror	ebx, 1Bh
lea	ebx, [esi+ebx]
mov	[esp+9Ch+var_94], ebx
mov	ebx, [esp+9Ch+var_8C]
ror	e, 2
lea	esi, [data_0+34h]
movzx	edi, byte ptr [data_0+3]
movzx	ebp, byte ptr [eax+34h]
shl	ebp, 18h
or	ebp, edi
movzx	edi, byte ptr [data_0+1]
shl	edi, 10h
or	edi, ebp
movzx	ebp, byte ptr [data_0+2]
shl	ebp, 8
or	edi, ebp
mov	[esp+9Ch+var_8C], edi
lea	b, [edi+b+5A827999h]
mov	data_0,	e
xor	esi, a
and	esi, [esp+9Ch+var_90]
xor	esi, a
lea	esi, [ecx+esi]
mov	ecx, [esp+9Ch+var_94]
ror	ecx, 1Bh
lea	ecx, [esi+ecx]
mov	[esp+9Ch+var_7C], ecx
mov	ecx, [esp+9Ch+var_90]
ror	d, 2
lea	esi, [data_0+38h]
movzx	edi, byte ptr [data_0+3]
movzx	ebp, byte ptr [eax+38h]
shl	ebp, 18h
or	ebp, edi
movzx	edi, byte ptr [data_0+1]
shl	edi, 10h
or	edi, ebp
movzx	ebp, byte ptr [data_0+2]
shl	ebp, 8
or	edi, ebp
mov	[esp+9Ch+var_90], edi
lea	a, [edi+a+5A827999h]
mov	data_0,	d
xor	esi, e
and	esi, [esp+9Ch+var_94]
xor	esi, e
lea	esi, [edx+esi]
mov	edx, [esp+9Ch+var_7C]
ror	edx, 1Bh
add	esi, edx
mov	edx, [esp+9Ch+var_94]
ror	c, 2
lea	edi, [data_0+3Ch]
movzx	ebp, byte ptr [data_0+3]
movzx	eax, byte ptr [eax+3Ch]
shl	eax, 18h
or	ebp, eax
movzx	eax, byte ptr [data_0+1]
shl	eax, 10h
or	eax, ebp
movzx	ebp, byte ptr [data_0+2]
shl	ebp, 8
or	eax, ebp
mov	[esp+9Ch+var_94], eax
lea	e, [eax+e+5A827999h]
mov	eax, c
xor	eax, d
and	eax, [esp+9Ch+var_7C]
xor	eax, d
lea	eax, [ebx+eax]
mov	ebx, a
ror	ebx, 1Bh
add	eax, ebx
mov	ebx, [esp+9Ch+var_7C]
ror	b, 2
mov	data_0,	[esp+9Ch+var_68]
xor	edi, [esp+9Ch+var_60]
xor	edi, [esp+9Ch+var_80]
xor	edi, [esp+9Ch+var_8C]
ror	edi, 1Fh
mov	[esp+9Ch+var_60], edi
lea	edi, [d+edi+5A827999h]
mov	d, b
xor	ecx, c
and	ecx, a
xor	ecx, c
lea	ecx, [edi+ecx]
mov	edi, e
ror	edi, 1Bh
add	ecx, edi
ror	a, 2
mov	edi, [esp+9Ch+var_6C]
xor	edi, [esp+9Ch+var_64]
xor	edi, [esp+9Ch+var_58]
xor	edi, [esp+9Ch+var_90]
ror	edi, 1Fh
mov	[esp+9Ch+var_64], edi
lea	edi, [c+edi+5A827999h]
mov	c, a
xor	edx, b
and	edx, e
xor	edx, b
lea	edx, [edi+edx]
mov	edi, d
ror	edi, 1Bh
add	edx, edi
ror	e, 2
mov	edi, [esp+9Ch+var_70]
xor	edi, [esp+9Ch+var_68]
xor	edi, [esp+9Ch+var_84]
xor	edi, [esp+9Ch+var_94]
ror	edi, 1Fh
mov	[esp+9Ch+var_68], edi
lea	edi, [b+edi+5A827999h]
mov	b, e
xor	ebx, a
and	ebx, d
xor	ebx, a
lea	ebx, [edi+ebx]
mov	edi, c
ror	edi, 1Bh
add	ebx, edi
ror	d, 2
mov	ebp, [esp+9Ch+var_74]
xor	ebp, [esp+9Ch+var_6C]
xor	ebp, [esp+9Ch+var_88]
xor	ebp, [esp+9Ch+var_60]
ror	ebp, 1Fh
mov	[esp+9Ch+var_6C], ebp
lea	edi, [a+ebp+5A827999h]
mov	a, d
xor	esi, e
and	esi, c
xor	esi, e
lea	esi, [edi+esi]
mov	edi, b
ror	edi, 1Bh
add	esi, edi
ror	c, 2
mov	edi, [esp+9Ch+var_78]
xor	edi, [esp+9Ch+var_70]
xor	edi, [esp+9Ch+var_5C]
xor	edi, [esp+9Ch+var_64]
ror	edi, 1Fh
mov	[esp+9Ch+var_70], edi
lea	edi, [e+edi+6ED9EBA1h]
mov	e, c
xor	eax, d
xor	eax, b
lea	eax, [edi+eax]
mov	edi, a
ror	edi, 1Bh
add	eax, edi
ror	b, 2
mov	ebp, [esp+9Ch+var_54]
xor	ebp, [esp+9Ch+var_74]
xor	ebp, [esp+9Ch+var_8C]
xor	ebp, [esp+9Ch+var_68]
ror	ebp, 1Fh
mov	[esp+9Ch+var_74], ebp
lea	edi, [d+ebp+6ED9EBA1h]
mov	d, b
xor	ecx, c
xor	ecx, a
lea	ecx, [edi+ecx]
mov	edi, e
ror	edi, 1Bh
add	ecx, edi
ror	a, 2
mov	ebp, [esp+9Ch+var_80]
xor	ebp, [esp+9Ch+var_78]
xor	ebp, [esp+9Ch+var_90]
xor	ebp, [esp+9Ch+var_6C]
ror	ebp, 1Fh
mov	[esp+9Ch+var_78], ebp
lea	edi, [c+ebp+6ED9EBA1h]
mov	c, a
xor	edx, b
xor	edx, e
lea	edx, [edi+edx]
mov	edi, d
ror	edi, 1Bh
add	edx, edi
ror	e, 2
mov	ebp, [esp+9Ch+var_58]
xor	ebp, [esp+9Ch+var_54]
xor	ebp, [esp+9Ch+var_94]
xor	ebp, [esp+9Ch+var_70]
ror	ebp, 1Fh
mov	[esp+9Ch+var_7C], ebp
lea	b, [b+ebp+6ED9EBA1h]
mov	edi, e
xor	edi, a
xor	edi, d
lea	edi, [ebx+edi]
mov	ebx, c
ror	ebx, 1Bh
add	edi, ebx
ror	d, 2
mov	ebp, [esp+9Ch+var_84]
xor	ebp, [esp+9Ch+var_80]
xor	ebp, [esp+9Ch+var_60]
xor	ebp, [esp+9Ch+var_74]
ror	ebp, 1Fh
mov	[esp+9Ch+var_80], ebp
lea	a, [a+ebp+6ED9EBA1h]
mov	ebx, d
xor	ebx, e
xor	ebx, c
lea	ebx, [esi+ebx]
mov	esi, b
ror	esi, 1Bh
add	ebx, esi
mov	esi, c
ror	esi, 2
mov	ebp, [esp+9Ch+var_88]
xor	ebp, [esp+9Ch+var_58]
xor	ebp, [esp+9Ch+var_64]
xor	ebp, [esp+9Ch+var_78]
ror	ebp, 1Fh
mov	[esp+9Ch+var_58], ebp
lea	e, [e+ebp+6ED9EBA1h]
mov	edx, c
xor	edx, d
xor	edx, b
lea	edx, [eax+edx]
mov	eax, a
ror	eax, 1Bh
add	edx, eax
mov	eax, b
ror	eax, 2
mov	edi, [esp+9Ch+var_5C]
xor	edi, [esp+9Ch+var_84]
xor	edi, [esp+9Ch+var_68]
xor	edi, [esp+9Ch+var_7C]
ror	edi, 1Fh
mov	[esp+9Ch+var_84], edi
lea	edi, [d+edi+6ED9EBA1h]
mov	d, b
xor	ecx, c
xor	ecx, a
lea	ecx, [edi+ecx]
mov	edi, e
ror	edi, 1Bh
add	ecx, edi
ror	a, 2
mov	edi, [esp+9Ch+var_8C]
xor	edi, [esp+9Ch+var_88]
xor	edi, [esp+9Ch+var_6C]
xor	edi, [esp+9Ch+var_80]
ror	edi, 1Fh
mov	[esp+9Ch+var_88], edi
lea	edi, [c+edi+6ED9EBA1h]
mov	c, a
xor	esi, b
xor	esi, e
lea	esi, [edi+esi]
mov	edi, d
ror	edi, 1Bh
add	esi, edi
ror	e, 2
mov	edi, [esp+9Ch+var_90]
xor	edi, [esp+9Ch+var_5C]
xor	edi, [esp+9Ch+var_70]
xor	edi, ebp
ror	edi, 1Fh
mov	[esp+9Ch+var_5C], edi
lea	edi, [b+edi+6ED9EBA1h]
mov	b, e
xor	eax, a
xor	eax, d
lea	eax, [edi+eax]
mov	edi, c
ror	edi, 1Bh
add	eax, edi
mov	edi, d
ror	edi, 2
mov	ebp, [esp+9Ch+var_94]
xor	ebp, [esp+9Ch+var_8C]
xor	ebp, [esp+9Ch+var_74]
xor	ebp, [esp+9Ch+var_84]
ror	ebp, 1Fh
mov	[esp+9Ch+var_8C], ebp
lea	ecx, [a+ebp+6ED9EBA1h]
mov	a, d
xor	ebx, e
xor	ebx, c
lea	ebx, [ecx+ebx]
mov	ecx, b
ror	ecx, 1Bh
add	ebx, ecx
ror	c, 2
mov	ebp, [esp+9Ch+var_60]
xor	ebp, [esp+9Ch+var_90]
xor	ebp, [esp+9Ch+var_78]
xor	ebp, [esp+9Ch+var_88]
ror	ebp, 1Fh
mov	[esp+9Ch+var_90], ebp
lea	e, [e+ebp+6ED9EBA1h]
mov	ecx, c
xor	ecx, d
xor	ecx, b
lea	ecx, [edx+ecx]
mov	edx, a
ror	edx, 1Bh
add	ecx, edx
mov	ebp, b
ror	ebp, 2
mov	eax, [esp+9Ch+var_64]
xor	eax, [esp+9Ch+var_94]
xor	eax, [esp+9Ch+var_7C]
xor	eax, [esp+9Ch+var_5C]
ror	eax, 1Fh
mov	[esp+9Ch+var_94], eax
lea	eax, [d+eax+6ED9EBA1h]
mov	edx, b
xor	edx, c
xor	edx, a
lea	edx, [eax+edx]
mov	eax, e
ror	eax, 1Bh
add	edx, eax
ror	a, 2
mov	eax, [esp+9Ch+var_68]
xor	eax, [esp+9Ch+var_60]
xor	eax, [esp+9Ch+var_80]
xor	eax, [esp+9Ch+var_8C]
ror	eax, 1Fh
mov	[esp+9Ch+var_60], eax
lea	c, [eax+c+6ED9EBA1h]
mov	eax, a
xor	eax, b
xor	eax, e
lea	eax, [esi+eax]
mov	esi, d
ror	esi, 1Bh
add	eax, esi
mov	esi, e
ror	esi, 2
mov	ecx, [esp+9Ch+var_6C]
xor	ecx, [esp+9Ch+var_64]
xor	ecx, [esp+9Ch+var_58]
xor	ecx, [esp+9Ch+var_90]
ror	ecx, 1Fh
mov	[esp+9Ch+var_64], ecx
lea	edi, [ecx+b+6ED9EBA1h]
mov	ecx, e
xor	ecx, a
xor	ecx, d
lea	ecx, [edi+ecx]
mov	edi, c
ror	edi, 1Bh
add	ecx, edi
ror	d, 2
mov	edi, [esp+9Ch+var_70]
xor	edi, [esp+9Ch+var_68]
xor	edi, [esp+9Ch+var_84]
xor	edi, [esp+9Ch+var_94]
ror	edi, 1Fh
mov	[esp+9Ch+var_68], edi
lea	edi, [edi+a+6ED9EBA1h]
mov	a, d
xor	ebx, e
xor	ebx, c
lea	ebx, [edi+ebx]
mov	edi, b
ror	edi, 1Bh
add	ebx, edi
mov	edi, c
ror	edi, 2
mov	ebp, [esp+9Ch+var_74]
xor	ebp, [esp+9Ch+var_6C]
xor	ebp, [esp+9Ch+var_88]
xor	ebp, [esp+9Ch+var_60]
ror	ebp, 1Fh
mov	[esp+9Ch+var_6C], ebp
lea	e, [ebp+e+6ED9EBA1h]
mov	eax, c
xor	eax, d
xor	eax, b
lea	eax, [esi+eax]
mov	esi, a
ror	esi, 1Bh
add	eax, esi
ror	b, 2
mov	ebp, [esp+9Ch+var_78]
xor	ebp, [esp+9Ch+var_70]
xor	ebp, [esp+9Ch+var_5C]
xor	ebp, [esp+9Ch+var_64]
ror	ebp, 1Fh
mov	[esp+9Ch+var_70], ebp
lea	esi, [ebp+d+6ED9EBA1h]
mov	d, b
xor	edx, c
xor	edx, a
lea	edx, [esi+edx]
mov	esi, e
ror	esi, 1Bh
add	edx, esi
mov	ebp, a
ror	ebp, 2
mov	ebx, [esp+9Ch+var_7C]
xor	ebx, [esp+9Ch+var_74]
xor	ebx, [esp+9Ch+var_8C]
xor	ebx, [esp+9Ch+var_68]
ror	ebx, 1Fh
mov	[esp+9Ch+var_74], ebx
lea	ebx, [ebx+c+6ED9EBA1h]
mov	esi, a
xor	esi, b
xor	esi, e
lea	esi, [ebx+esi]
mov	ebx, d
ror	ebx, 1Bh
add	esi, ebx
ror	e, 2
mov	ebx, [esp+9Ch+var_80]
xor	ebx, [esp+9Ch+var_78]
xor	ebx, [esp+9Ch+var_90]
xor	ebx, [esp+9Ch+var_6C]
ror	ebx, 1Fh
mov	[esp+9Ch+var_78], ebx
lea	b, [ebx+b+6ED9EBA1h]
mov	ebx, e
xor	ebx, a
xor	ebx, d
lea	ebx, [ecx+ebx]
mov	ecx, c
ror	ecx, 1Bh
add	ebx, ecx
mov	edi, d
ror	edi, 2
mov	edx, [esp+9Ch+var_58]
xor	edx, [esp+9Ch+var_7C]
xor	edx, [esp+9Ch+var_94]
xor	edx, [esp+9Ch+var_70]
ror	edx, 1Fh
mov	[esp+9Ch+var_7C], edx
lea	edx, [edx+a+6ED9EBA1h]
mov	ecx, d
xor	ecx, e
xor	ecx, c
lea	ecx, [edx+ecx]
mov	edx, b
ror	edx, 1Bh
add	ecx, edx
ror	c, 2
mov	ebp, [esp+9Ch+var_84]
xor	ebp, [esp+9Ch+var_80]
xor	ebp, [esp+9Ch+var_60]
xor	ebp, [esp+9Ch+var_74]
ror	ebp, 1Fh
mov	[esp+9Ch+var_80], ebp
lea	e, [ebp+e-70E44324h]
mov	ebp, b
or	ebp, c
and	ebp, d
mov	edx, b
and	edx, c
or	edx, ebp
lea	edx, [eax+edx]
mov	ebp, a
ror	ebp, 1Bh
add	edx, ebp
ror	b, 2
mov	ebp, [esp+9Ch+var_88]
xor	ebp, [esp+9Ch+var_58]
xor	ebp, [esp+9Ch+var_64]
xor	ebp, [esp+9Ch+var_78]
ror	ebp, 1Fh
mov	[esp+9Ch+var_58], ebp
lea	d, [ebp+d-70E44324h]
mov	ebp, a
or	ebp, b
and	ebp, c
mov	eax, a
and	eax, b
or	eax, ebp
lea	eax, [edi+eax]
mov	ebp, e
ror	ebp, 1Bh
add	eax, ebp
ror	a, 2
mov	edi, [esp+9Ch+var_5C]
xor	edi, [esp+9Ch+var_84]
xor	edi, [esp+9Ch+var_68]
xor	edi, [esp+9Ch+var_7C]
ror	edi, 1Fh
mov	[esp+9Ch+var_84], edi
lea	edi, [edi+c-70E44324h]
mov	ebp, e
or	ebp, a
and	ebp, b
mov	c, e
and	esi, a
or	esi, ebp
lea	esi, [edi+esi]
mov	ebp, d
ror	ebp, 1Bh
add	esi, ebp
ror	e, 2
mov	ebp, [esp+9Ch+var_8C]
xor	ebp, [esp+9Ch+var_88]
xor	ebp, [esp+9Ch+var_6C]
xor	ebp, [esp+9Ch+var_80]
ror	ebp, 1Fh
mov	[esp+9Ch+var_88], ebp
lea	edi, [ebp+b-70E44324h]
mov	ebp, d
or	ebp, e
and	ebp, a
mov	b, d
and	ebx, e
or	ebx, ebp
lea	ebx, [edi+ebx]
mov	ebp, c
ror	ebp, 1Bh
add	ebx, ebp
ror	d, 2
mov	ebp, [esp+9Ch+var_90]
xor	ebp, [esp+9Ch+var_5C]
xor	ebp, [esp+9Ch+var_70]
xor	ebp, [esp+9Ch+var_58]
ror	ebp, 1Fh
mov	[esp+9Ch+var_5C], ebp
lea	edi, [ebp+a-70E44324h]
mov	ebp, c
or	ebp, d
and	ebp, e
mov	a, c
and	ecx, d
or	ecx, ebp
lea	ecx, [edi+ecx]
mov	ebp, b
ror	ebp, 1Bh
add	ecx, ebp
ror	c, 2
mov	ebp, [esp+9Ch+var_94]
xor	ebp, [esp+9Ch+var_8C]
xor	ebp, [esp+9Ch+var_74]
xor	ebp, [esp+9Ch+var_84]
ror	ebp, 1Fh
mov	[esp+9Ch+var_8C], ebp
lea	edi, [ebp+e-70E44324h]
mov	ebp, b
or	ebp, c
and	ebp, d
mov	e, b
and	edx, c
or	edx, ebp
lea	edx, [edi+edx]
mov	ebp, a
ror	ebp, 1Bh
add	edx, ebp
ror	b, 2
mov	ebp, [esp+9Ch+var_60]
xor	ebp, [esp+9Ch+var_90]
xor	ebp, [esp+9Ch+var_78]
xor	ebp, [esp+9Ch+var_88]
ror	ebp, 1Fh
mov	[esp+9Ch+var_90], ebp
lea	edi, [ebp+d-70E44324h]
mov	ebp, a
or	ebp, b
and	ebp, c
mov	d, a
and	eax, b
or	eax, ebp
lea	eax, [edi+eax]
mov	ebp, e
ror	ebp, 1Bh
add	eax, ebp
ror	a, 2
mov	ebp, [esp+9Ch+var_64]
xor	ebp, [esp+9Ch+var_94]
xor	ebp, [esp+9Ch+var_7C]
xor	ebp, [esp+9Ch+var_5C]
ror	ebp, 1Fh
mov	[esp+9Ch+var_94], ebp
lea	edi, [ebp+c-70E44324h]
mov	ebp, e
or	ebp, a
and	ebp, b
mov	c, e
and	esi, a
or	esi, ebp
lea	esi, [edi+esi]
mov	ebp, d
ror	ebp, 1Bh
add	esi, ebp
ror	e, 2
mov	ebp, [esp+9Ch+var_68]
xor	ebp, [esp+9Ch+var_60]
xor	ebp, [esp+9Ch+var_80]
xor	ebp, [esp+9Ch+var_8C]
ror	ebp, 1Fh
mov	[esp+9Ch+var_60], ebp
lea	edi, [ebp+b-70E44324h]
mov	ebp, d
or	ebp, e
and	ebp, a
mov	b, d
and	ebx, e
or	ebx, ebp
lea	ebx, [edi+ebx]
mov	ebp, c
ror	ebp, 1Bh
add	ebx, ebp
ror	d, 2
mov	ebp, [esp+9Ch+var_6C]
xor	ebp, [esp+9Ch+var_64]
xor	ebp, [esp+9Ch+var_58]
xor	ebp, [esp+9Ch+var_90]
ror	ebp, 1Fh
mov	[esp+9Ch+var_64], ebp
lea	edi, [ebp+a-70E44324h]
mov	ebp, c
or	ebp, d
and	ebp, e
mov	a, c
and	ecx, d
or	ecx, ebp
lea	ecx, [edi+ecx]
mov	ebp, b
ror	ebp, 1Bh
add	ecx, ebp
ror	c, 2
mov	ebp, [esp+9Ch+var_70]
xor	ebp, [esp+9Ch+var_68]
xor	ebp, [esp+9Ch+var_84]
xor	ebp, [esp+9Ch+var_94]
ror	ebp, 1Fh
mov	[esp+9Ch+var_68], ebp
lea	edi, [ebp+e-70E44324h]
mov	ebp, b
or	ebp, c
and	ebp, d
mov	e, b
and	edx, c
or	edx, ebp
lea	edx, [edi+edx]
mov	ebp, a
ror	ebp, 1Bh
add	edx, ebp
ror	b, 2
mov	ebp, [esp+9Ch+var_74]
xor	ebp, [esp+9Ch+var_6C]
xor	ebp, [esp+9Ch+var_88]
xor	ebp, [esp+9Ch+var_60]
ror	ebp, 1Fh
mov	[esp+9Ch+var_6C], ebp
lea	edi, [ebp+d-70E44324h]
mov	ebp, a
or	ebp, b
and	ebp, c
mov	d, a
and	eax, b
or	eax, ebp
lea	eax, [edi+eax]
mov	ebp, e
ror	ebp, 1Bh
add	eax, ebp
ror	a, 2
mov	ebp, [esp+9Ch+var_78]
xor	ebp, [esp+9Ch+var_70]
xor	ebp, [esp+9Ch+var_5C]
xor	ebp, [esp+9Ch+var_64]
ror	ebp, 1Fh
mov	[esp+9Ch+var_70], ebp
lea	edi, [ebp+c-70E44324h]
mov	ebp, e
or	ebp, a
and	ebp, b
mov	c, e
and	esi, a
or	esi, ebp
lea	esi, [edi+esi]
mov	ebp, d
ror	ebp, 1Bh
add	esi, ebp
ror	e, 2
mov	ebp, [esp+9Ch+var_7C]
xor	ebp, [esp+9Ch+var_74]
xor	ebp, [esp+9Ch+var_8C]
xor	ebp, [esp+9Ch+var_68]
ror	ebp, 1Fh
mov	[esp+9Ch+var_74], ebp
lea	edi, [ebp+b-70E44324h]
mov	ebp, d
or	ebp, e
and	ebp, a
mov	b, d
and	ebx, e
or	ebx, ebp
lea	ebx, [edi+ebx]
mov	ebp, c
ror	ebp, 1Bh
add	ebx, ebp
ror	d, 2
mov	ebp, [esp+9Ch+var_80]
xor	ebp, [esp+9Ch+var_78]
xor	ebp, [esp+9Ch+var_90]
xor	ebp, [esp+9Ch+var_6C]
ror	ebp, 1Fh
mov	[esp+9Ch+var_78], ebp
lea	edi, [ebp+a-70E44324h]
mov	ebp, c
or	ebp, d
and	ebp, e
mov	a, c
and	ecx, d
or	ecx, ebp
lea	ecx, [edi+ecx]
mov	ebp, b
ror	ebp, 1Bh
add	ecx, ebp
ror	c, 2
mov	ebp, [esp+9Ch+var_58]
xor	ebp, [esp+9Ch+var_7C]
xor	ebp, [esp+9Ch+var_94]
xor	ebp, [esp+9Ch+var_70]
ror	ebp, 1Fh
mov	[esp+9Ch+var_7C], ebp
lea	edi, [ebp+e-70E44324h]
mov	ebp, b
or	ebp, c
and	ebp, d
mov	e, b
and	edx, c
or	edx, ebp
lea	edx, [edi+edx]
mov	ebp, a
ror	ebp, 1Bh
add	edx, ebp
ror	b, 2
mov	ebp, [esp+9Ch+var_84]
xor	ebp, [esp+9Ch+var_80]
xor	ebp, [esp+9Ch+var_60]
xor	ebp, [esp+9Ch+var_74]
ror	ebp, 1Fh
mov	[esp+9Ch+var_80], ebp
lea	edi, [ebp+d-70E44324h]
mov	ebp, a
or	ebp, b
and	ebp, c
mov	d, a
and	eax, b
or	eax, ebp
lea	eax, [edi+eax]
mov	ebp, e
ror	ebp, 1Bh
add	eax, ebp
ror	a, 2
mov	edi, [esp+9Ch+var_88]
xor	edi, [esp+9Ch+var_58]
xor	edi, [esp+9Ch+var_64]
xor	edi, [esp+9Ch+var_78]
ror	edi, 1Fh
mov	[esp+9Ch+var_58], edi
lea	edi, [edi+c-70E44324h]
mov	ebp, e
or	ebp, a
and	ebp, b
mov	c, e
and	esi, a
or	esi, ebp
lea	esi, [edi+esi]
mov	ebp, d
ror	ebp, 1Bh
add	esi, ebp
ror	e, 2
mov	ebp, [esp+9Ch+var_5C]
xor	ebp, [esp+9Ch+var_84]
xor	ebp, [esp+9Ch+var_68]
xor	ebp, [esp+9Ch+var_7C]
ror	ebp, 1Fh
mov	[esp+9Ch+var_84], ebp
lea	b, [ebp+b-70E44324h]
mov	ebp, d
or	ebp, e
and	ebp, a
mov	edi, d
and	edi, e
or	edi, ebp
lea	edi, [ebx+edi]
mov	ebp, c
ror	ebp, 1Bh
add	edi, ebp
ror	d, 2
mov	ebp, [esp+9Ch+var_8C]
xor	ebp, [esp+9Ch+var_88]
xor	ebp, [esp+9Ch+var_6C]
xor	ebp, [esp+9Ch+var_80]
ror	ebp, 1Fh
mov	[esp+9Ch+var_88], ebp
lea	ebx, [ebp+a-70E44324h]
mov	ebp, c
or	ebp, d
and	ebp, e
mov	a, c
and	ecx, d
or	ecx, ebp
lea	ecx, [ebx+ecx]
mov	ebp, b
ror	ebp, 1Bh
add	ecx, ebp
ror	c, 2
mov	ebp, [esp+9Ch+var_90]
xor	ebp, [esp+9Ch+var_5C]
xor	ebp, [esp+9Ch+var_70]
xor	ebp, [esp+9Ch+var_58]
ror	ebp, 1Fh
mov	[esp+9Ch+var_5C], ebp
lea	e, [ebp+e-359D3E2Ah]
mov	ebx, c
xor	ebx, d
xor	ebx, b
lea	ebx, [edx+ebx]
mov	edx, a
ror	edx, 1Bh
add	ebx, edx
mov	edx, b
ror	edx, 2
mov	ebp, [esp+9Ch+var_94]
xor	ebp, [esp+9Ch+var_8C]
xor	ebp, [esp+9Ch+var_74]
xor	ebp, [esp+9Ch+var_84]
ror	ebp, 1Fh
mov	[esp+9Ch+var_8C], ebp
lea	d, [ebp+d-359D3E2Ah]
mov	edi, b
xor	edi, c
xor	edi, a
lea	edi, [eax+edi]
mov	eax, e
ror	eax, 1Bh
add	edi, eax
mov	ebp, a
ror	ebp, 2
mov	eax, [esp+9Ch+var_60]
xor	eax, [esp+9Ch+var_90]
xor	eax, [esp+9Ch+var_78]
xor	eax, [esp+9Ch+var_88]
ror	eax, 1Fh
mov	[esp+9Ch+var_90], eax
lea	eax, [eax+c-359D3E2Ah]
mov	ecx, a
xor	ecx, b
xor	ecx, e
lea	ecx, [eax+ecx]
mov	eax, d
ror	eax, 1Bh
add	ecx, eax
mov	eax, e
ror	eax, 2
mov	ebx, [esp+9Ch+var_64]
xor	ebx, [esp+9Ch+var_94]
xor	ebx, [esp+9Ch+var_7C]
xor	ebx, [esp+9Ch+var_5C]
ror	ebx, 1Fh
mov	[esp+9Ch+var_94], ebx
lea	b, [ebx+b-359D3E2Ah]
mov	ebx, e
xor	ebx, a
xor	ebx, d
lea	ebx, [edx+ebx]
mov	edx, c
ror	edx, 1Bh
add	ebx, edx
ror	d, 2
mov	edx, [esp+9Ch+var_68]
xor	edx, [esp+9Ch+var_60]
xor	edx, [esp+9Ch+var_80]
xor	edx, [esp+9Ch+var_8C]
ror	edx, 1Fh
mov	[esp+9Ch+var_60], edx
lea	esi, [edx+a-359D3E2Ah]
mov	edx, d
xor	edx, e
xor	edx, c
lea	edx, [esi+edx]
mov	esi, b
ror	esi, 1Bh
add	edx, esi
ror	c, 2
mov	ebp, [esp+9Ch+var_6C]
xor	ebp, [esp+9Ch+var_64]
xor	ebp, [esp+9Ch+var_58]
xor	ebp, [esp+9Ch+var_90]
ror	ebp, 1Fh
mov	[esp+9Ch+var_64], ebp
lea	e, [ebp+e-359D3E2Ah]
mov	esi, c
xor	esi, d
xor	esi, b
lea	esi, [eax+esi]
mov	eax, a
ror	eax, 1Bh
add	esi, eax
ror	b, 2
mov	ebp, [esp+9Ch+var_70]
xor	ebp, [esp+9Ch+var_68]
xor	ebp, [esp+9Ch+var_84]
xor	ebp, [esp+9Ch+var_94]
ror	ebp, 1Fh
mov	[esp+9Ch+var_68], ebp
lea	d, [ebp+d-359D3E2Ah]
mov	eax, b
xor	eax, c
xor	eax, a
lea	eax, [edi+eax]
mov	edi, e
ror	edi, 1Bh
add	eax, edi
ror	a, 2
mov	ebp, [esp+9Ch+var_74]
xor	ebp, [esp+9Ch+var_6C]
xor	ebp, [esp+9Ch+var_88]
xor	ebp, [esp+9Ch+var_60]
ror	ebp, 1Fh
mov	[esp+9Ch+var_6C], ebp
lea	c, [ebp+c-359D3E2Ah]
mov	edi, a
xor	edi, b
xor	edi, e
lea	edi, [ecx+edi]
mov	ecx, d
ror	ecx, 1Bh
add	edi, ecx
ror	e, 2
mov	ebp, [esp+9Ch+var_78]
xor	ebp, [esp+9Ch+var_70]
xor	ebp, [esp+9Ch+var_5C]
xor	ebp, [esp+9Ch+var_64]
ror	ebp, 1Fh
mov	[esp+9Ch+var_70], ebp
lea	b, [ebp+b-359D3E2Ah]
mov	ecx, e
xor	ecx, a
xor	ecx, d
lea	ecx, [ebx+ecx]
mov	ebx, c
ror	ebx, 1Bh
add	ecx, ebx
ror	d, 2
mov	ebp, [esp+9Ch+var_7C]
xor	ebp, [esp+9Ch+var_74]
xor	ebp, [esp+9Ch+var_8C]
xor	ebp, [esp+9Ch+var_68]
ror	ebp, 1Fh
mov	[esp+9Ch+var_74], ebp
lea	a, [ebp+a-359D3E2Ah]
mov	ebx, d
xor	ebx, e
xor	ebx, c
lea	ebx, [edx+ebx]
mov	edx, b
ror	edx, 1Bh
add	ebx, edx
ror	c, 2
mov	ebp, [esp+9Ch+var_80]
xor	ebp, [esp+9Ch+var_78]
xor	ebp, [esp+9Ch+var_90]
xor	ebp, [esp+9Ch+var_6C]
ror	ebp, 1Fh
mov	[esp+9Ch+var_78], ebp
lea	e, [ebp+e-359D3E2Ah]
mov	edx, c
xor	edx, d
xor	edx, b
lea	edx, [esi+edx]
mov	esi, a
ror	esi, 1Bh
add	edx, esi
ror	b, 2
mov	ebp, [esp+9Ch+var_58]
xor	ebp, [esp+9Ch+var_7C]
xor	ebp, [esp+9Ch+var_94]
xor	ebp, [esp+9Ch+var_70]
ror	ebp, 1Fh
mov	[esp+9Ch+var_7C], ebp
lea	d, [ebp+d-359D3E2Ah]
mov	esi, b
xor	esi, c
xor	esi, a
lea	esi, [eax+esi]
mov	eax, e
ror	eax, 1Bh
add	esi, eax
ror	a, 2
mov	ebp, [esp+9Ch+var_84]
xor	ebp, [esp+9Ch+var_80]
xor	ebp, [esp+9Ch+var_60]
xor	ebp, [esp+9Ch+var_74]
ror	ebp, 1Fh
mov	[esp+9Ch+var_80], ebp
lea	c, [ebp+c-359D3E2Ah]
mov	eax, a
xor	eax, b
xor	eax, e
lea	eax, [edi+eax]
mov	edi, d
ror	edi, 1Bh
add	eax, edi
ror	e, 2
mov	edi, [esp+9Ch+var_88]
xor	edi, [esp+9Ch+var_58]
xor	edi, [esp+9Ch+var_64]
xor	edi, [esp+9Ch+var_78]
ror	edi, 1Fh
lea	ebp, [edi+b-359D3E2Ah]
mov	b, e
xor	ecx, a
xor	ecx, d
lea	ecx, [ebp+ecx+0]
mov	ebp, c
ror	ebp, 1Bh
add	ecx, ebp
ror	d, 2
mov	ebp, [esp+9Ch+var_5C]
xor	ebp, [esp+9Ch+var_84]
xor	ebp, [esp+9Ch+var_68]
xor	ebp, [esp+9Ch+var_7C]
ror	ebp, 1Fh
mov	[esp+9Ch+var_84], ebp
lea	a, [ebp+a-359D3E2Ah]
mov	[esp+9Ch+var_68], ebx
mov	ebx, d
xor	ebx, e
xor	ebx, c
add	ebx, [esp+9Ch+var_68]
mov	ebp, b
ror	ebp, 1Bh
add	ebx, ebp
ror	c, 2
mov	ebp, [esp+9Ch+var_8C]
xor	ebp, [esp+9Ch+var_88]
xor	ebp, [esp+9Ch+var_6C]
xor	ebp, [esp+9Ch+var_80]
ror	ebp, 1Fh
mov	[esp+9Ch+var_88], ebp
lea	e, [ebp+e-359D3E2Ah]
mov	[esp+9Ch+var_80], edx
mov	edx, c
xor	edx, d
xor	edx, b
add	edx, [esp+9Ch+var_80]
mov	ebp, a
ror	ebp, 1Bh
add	edx, ebp
ror	b, 2
mov	ebp, [esp+9Ch+var_90]
xor	ebp, [esp+9Ch+var_5C]
xor	ebp, [esp+9Ch+var_70]
xor	edi, ebp
ror	edi, 1Fh
lea	ebp, [edi+d-359D3E2Ah]
mov	d, b
xor	esi, c
xor	esi, a
lea	esi, [ebp+esi+0]
mov	ebp, e
ror	ebp, 1Bh
add	esi, ebp
ror	a, 2
mov	ebp, [esp+9Ch+var_94]
xor	ebp, [esp+9Ch+var_8C]
xor	ebp, [esp+9Ch+var_74]
xor	ebp, [esp+9Ch+var_84]
ror	ebp, 1Fh
lea	ebp, [ebp+c-359D3E2Ah]
mov	c, a
xor	eax, b
xor	eax, e
lea	eax, [ebp+eax+0]
mov	ebp, d
ror	ebp, 1Bh
add	eax, ebp
ror	e, 2
mov	ebp, [esp+9Ch+var_60]
xor	ebp, [esp+9Ch+var_90]
xor	ebp, [esp+9Ch+var_78]
xor	ebp, [esp+9Ch+var_88]
ror	ebp, 1Fh
lea	ebp, [ebp+b-359D3E2Ah]
mov	b, e
xor	ecx, a
xor	ecx, d
lea	ecx, [ebp+ecx+0]
mov	ebp, c
ror	ebp, 1Bh
add	ecx, ebp
ror	d, 2
mov	ebp, [esp+9Ch+var_64]
xor	ebp, [esp+9Ch+var_94]
xor	ebp, [esp+9Ch+var_7C]
xor	edi, ebp
ror	edi, 1Fh
mov	ebp, [esp+9Ch+state]
mov	ebp, [ebp+0]
lea	edi, [edi+ebp-359D3E2Ah]
lea	a, [edi+a]
mov	edi, d
xor	edi, e
xor	edi, c
add	ebx, edi
mov	edi, b
ror	edi, 1Bh
add	ebx, edi
mov	edi, [esp+9Ch+state]
mov	[edi], ebx
add	[edi+4], b
ror	c, 2
add	[edi+8], eax
add	[edi+0Ch], d
add	[edi+10h], e
add	esp, 8Ch
pop	ebx
pop	d
pop	edi
pop	ebp
retn
align 10h
public _silc_sha1_transform
jmp	_SHA1Transform
align 4
public _SHA1Update
			
push	ebp
push	edi
push	esi
push	ebx
sub	esp, 0Ch
mov	ebx, [esp+1Ch+context]
mov	edx, [ebx+14h]
mov	eax, edx
shr	eax, 3
and	eax, 3Fh
mov	ecx, [esp+1Ch+len]
shl	ecx, 3
lea	edx, [ecx+edx]
mov	[ebx+14h], edx
cmp	ecx, edx
ja	short loc_641EEA3C
mov	edx, [context_0+18h]
mov	ecx, [esp+1Ch+len]
shr	ecx, 1Dh
add	edx, ecx
mov	[context_0+18h], edx
mov	edx, [esp+1Ch+len]
add	edx, j
cmp	edx, 3Fh
ja	short loc_641EEA48
xor	ebp, ebp
add	context_0, 1Ch
mov	[esp+1Ch+var_14], ebx
mov	esi, [esp+1Ch+data]
add	j, [esp+1Ch+var_14]
mov	ecx, [esp+1Ch+len]
sub	ecx, i
mov	edi, eax
rep movsb
add	esp, 0Ch
pop	ebx
pop	esi
pop	edi
pop	i
retn
mov	edx, [context_0+18h]
inc	edx
mov	[context_0+18h], edx
jmp	short loc_641EEA02
align 4
mov	ebp, 40h
sub	ebp, j
lea	edx, [context_0+1Ch]
mov	[esp+1Ch+var_14], edx
add	j, edx
mov	edi, eax
mov	esi, [esp+1Ch+data]
mov	ecx, i
rep movsb
mov	[esp+1Ch+var_18], edx 
mov	[esp+1Ch+state], context_0 
call	_SHA1Transform
lea	eax, [ebp+3Fh]
cmp	[esp+1Ch+len], eax
jbe	short loc_641EEA9C
mov	edi, [esp+1Ch+len]
nop
mov	[esp+1Ch+var_18], data_0 
mov	[esp+1Ch+state], context_0 
call	_SHA1Transform
add	i, 40h
add	esi, 40h
lea	eax, [i+3Fh]
cmp	len_0, eax
ja	short loc_641EEA7C
mov	eax, [esp+1Ch+data]
lea	esi, [eax+i]
xor	eax, eax
jmp	short loc_641EEA26
public _SHA1Final
push	edi
push	esi
push	ebx
sub	esp, 1Ch
mov	esi, [esp+28h+digest]
mov	ebx, [esp+28h+context]
mov	eax, [ebx+18h]
mov	edx, eax
shr	edx, 18h
mov	[esp+28h+finalcount], dl
mov	edx, eax
shr	edx, 10h
mov	[esp+28h+finalcount+1],	dl
mov	edx, eax
shr	edx, 8
mov	[esp+28h+finalcount+2],	dl
mov	[esp+28h+finalcount+3],	al
mov	eax, [ebx+14h]
mov	edx, eax
shr	edx, 18h
mov	[esp+28h+finalcount+4],	dl
mov	edx, eax
shr	edx, 10h
mov	[esp+28h+finalcount+5],	dl
mov	edx, eax
shr	edx, 8
mov	[esp+28h+finalcount+6],	dl
mov	[esp+28h+finalcount+7],	al
mov	[esp+28h+len], 1
mov	[esp+28h+data],	offset byte_6426C860
jmp	short loc_641EEB14
mov	[esp+28h+len], 1
mov	[esp+28h+data],	offset data 
mov	[esp+28h+var_28], context_0 
call	_SHA1Update
mov	eax, [context_0+14h]
and	eax, 1F8h
cmp	eax, 1C0h
jnz	short loc_641EEB04
mov	[esp+28h+len], 8 
lea	eax, [esp+28h+finalcount]
mov	[esp+28h+data],	eax 
mov	[esp+28h+var_28], context_0 
call	_SHA1Update
xor	edx, edx
lea	digest_0, [digest_0+0]
mov	edi, i
shr	edi, 2
mov	ecx, i
not	ecx
and	ecx, 3
shl	ecx, 3
mov	eax, [context_0+edi*4]
shr	eax, cl
mov	[digest_0+i], al
inc	i
cmp	i, 14h
jnz	short loc_641EEB48
lea	digest_0, [context_0+1Ch]
xor	eax, eax
mov	ecx, 40h
mov	edi, esi
rep stosb
mov	edi, context_0
mov	ecx, i
rep stosb
mov	dword ptr [context_0+14h], 0
mov	dword ptr [context_0+18h], 0
mov	dword ptr [esp+28h+finalcount],	0
mov	dword ptr [esp+28h+finalcount+4], 0
mov	[esp+28h+data],	esi 
mov	[esp+28h+var_28], context_0 
call	_SHA1Transform
add	esp, 1Ch
pop	context_0
pop	esi
pop	edi
retn
align 4
public _silc_sha1_final
mov	eax, [esp+digest]
mov	edx, [esp+context]
mov	[esp+digest], edx
mov	[esp+context], eax
jmp	_SHA1Final
align 4
public _silc_sha1_update
jmp	_SHA1Update
align 4
public _silc_sha256_init
mov	eax, [esp+context]
mov	dword ptr [eax], 0
mov	dword ptr [eax+4], 0
mov	dword ptr [eax+28h], 0
mov	dword ptr [eax+8], 6A09E667h
mov	dword ptr [eax+0Ch], 0BB67AE85h
mov	dword ptr [eax+10h], 3C6EF372h
mov	dword ptr [eax+14h], 0A54FF53Ah
mov	dword ptr [eax+18h], 510E527Fh
mov	dword ptr [eax+1Ch], 9B05688Ch
mov	dword ptr [eax+20h], 1F83D9ABh
mov	dword ptr [eax+24h], 5BE0CD19h
retn
align 10h
public _silc_sha256_context_len
mov	eax, 70h
retn
align 4
public _sha256_compress
			
push	ebp
push	edi
push	esi
push	ebx
sub	esp, 170h
mov	eax, [esp+180h+buf]
mov	edx, [esp+180h+state]
mov	edx, [edx]
mov	[esp+180h+var_148], edx
mov	[esp+180h+S], edx
mov	ecx, [esp+180h+state]
add	ecx, 4
mov	[esp+180h+var_14C], ecx
mov	ebx, [esp+180h+state]
mov	edx, [ebx+4]
mov	[esp+180h+S+4],	edx
add	ebx, 8
mov	[esp+180h+var_150], ebx
mov	esi, [esp+180h+state]
mov	edx, [esi+8]
mov	[esp+180h+S+8],	edx
add	esi, 0Ch
mov	[esp+180h+var_154], esi
mov	ebp, [esp+180h+state]
mov	edx, [ebp+0Ch]
mov	[esp+180h+S+0Ch], edx
add	ebp, 10h
mov	[esp+180h+var_158], ebp
mov	ecx, [esp+180h+state]
mov	edx, [ecx+10h]
mov	[esp+180h+S+10h], edx
add	ecx, 14h
mov	[esp+180h+var_15C], ecx
mov	ebx, [esp+180h+state]
mov	edx, [ebx+14h]
mov	[esp+180h+S+14h], edx
add	ebx, 18h
mov	[esp+180h+var_160], ebx
mov	esi, [esp+180h+state]
mov	edx, [esi+18h]
mov	[esp+180h+S+18h], edx
add	esi, 1Ch
mov	[esp+180h+var_144], esi
mov	ebp, [esp+180h+state]
mov	ebp, [ebp+1Ch]
mov	[esp+180h+var_174], ebp
mov	[esp+180h+S+1Ch], ebp
movzx	ecx, byte ptr [eax]
shl	ecx, 18h
movzx	edx, byte ptr [eax+1]
shl	edx, 10h
or	ecx, edx
movzx	edx, byte ptr [eax+3]
or	ecx, edx
movzx	edx, byte ptr [eax+2]
shl	edx, 8
or	edx, ecx
mov	[esp+180h+W], edx
movzx	ecx, byte ptr [eax+4]
shl	ecx, 18h
movzx	edx, byte ptr [eax+5]
shl	edx, 10h
or	ecx, edx
movzx	edx, byte ptr [eax+7]
or	ecx, edx
movzx	edx, byte ptr [eax+6]
shl	edx, 8
or	edx, ecx
mov	[esp+180h+W+4],	edx
movzx	ecx, byte ptr [eax+0Bh]
movzx	edx, byte ptr [eax+8]
shl	edx, 18h
or	ecx, edx
movzx	edx, byte ptr [eax+9]
shl	edx, 10h
or	ecx, edx
movzx	edx, byte ptr [eax+0Ah]
shl	edx, 8
or	edx, ecx
mov	[esp+180h+W+8],	edx
movzx	ecx, byte ptr [eax+0Fh]
movzx	edx, byte ptr [eax+0Ch]
shl	edx, 18h
or	ecx, edx
movzx	edx, byte ptr [eax+0Dh]
shl	edx, 10h
or	ecx, edx
movzx	edx, byte ptr [eax+0Eh]
shl	edx, 8
or	edx, ecx
mov	[esp+180h+W+0Ch], edx
movzx	ecx, byte ptr [eax+13h]
movzx	edx, byte ptr [eax+10h]
shl	edx, 18h
or	ecx, edx
movzx	edx, byte ptr [eax+11h]
shl	edx, 10h
or	ecx, edx
movzx	edx, byte ptr [eax+12h]
shl	edx, 8
or	edx, ecx
mov	[esp+180h+W+10h], edx
movzx	ecx, byte ptr [eax+17h]
movzx	edx, byte ptr [eax+14h]
shl	edx, 18h
or	ecx, edx
movzx	edx, byte ptr [eax+15h]
shl	edx, 10h
or	ecx, edx
movzx	edx, byte ptr [eax+16h]
shl	edx, 8
or	edx, ecx
mov	[esp+180h+W+14h], edx
movzx	ecx, byte ptr [eax+1Bh]
movzx	edx, byte ptr [eax+18h]
shl	edx, 18h
or	ecx, edx
movzx	edx, byte ptr [eax+19h]
shl	edx, 10h
or	ecx, edx
movzx	edx, byte ptr [eax+1Ah]
shl	edx, 8
or	edx, ecx
mov	[esp+180h+W+18h], edx
movzx	ecx, byte ptr [eax+1Fh]
movzx	edx, byte ptr [eax+1Ch]
shl	edx, 18h
or	ecx, edx
movzx	edx, byte ptr [eax+1Dh]
shl	edx, 10h
or	ecx, edx
movzx	edx, byte ptr [eax+1Eh]
shl	edx, 8
or	edx, ecx
mov	[esp+180h+W+1Ch], edx
movzx	ecx, byte ptr [eax+23h]
movzx	edx, byte ptr [eax+20h]
shl	edx, 18h
or	ecx, edx
movzx	edx, byte ptr [eax+21h]
shl	edx, 10h
or	ecx, edx
movzx	edx, byte ptr [eax+22h]
shl	edx, 8
or	edx, ecx
mov	[esp+180h+W+20h], edx
movzx	ecx, byte ptr [eax+27h]
movzx	edx, byte ptr [eax+24h]
shl	edx, 18h
or	ecx, edx
movzx	edx, byte ptr [eax+25h]
shl	edx, 10h
or	ecx, edx
movzx	edx, byte ptr [eax+26h]
shl	edx, 8
or	edx, ecx
mov	[esp+180h+W+24h], edx
movzx	ecx, byte ptr [eax+2Bh]
movzx	edx, byte ptr [eax+28h]
shl	edx, 18h
or	ecx, edx
movzx	edx, byte ptr [eax+29h]
shl	edx, 10h
or	ecx, edx
movzx	edx, byte ptr [eax+2Ah]
shl	edx, 8
or	edx, ecx
mov	[esp+180h+W+28h], edx
movzx	ecx, byte ptr [eax+2Fh]
movzx	edx, byte ptr [eax+2Ch]
shl	edx, 18h
or	ecx, edx
movzx	edx, byte ptr [eax+2Dh]
shl	edx, 10h
or	ecx, edx
movzx	edx, byte ptr [eax+2Eh]
shl	edx, 8
or	edx, ecx
mov	[esp+180h+W+2Ch], edx
movzx	ecx, byte ptr [eax+33h]
movzx	edx, byte ptr [eax+30h]
shl	edx, 18h
or	ecx, edx
movzx	edx, byte ptr [eax+31h]
shl	edx, 10h
or	ecx, edx
movzx	edx, byte ptr [eax+32h]
shl	edx, 8
or	edx, ecx
mov	[esp+180h+W+30h], edx
movzx	ecx, byte ptr [eax+37h]
movzx	edx, byte ptr [eax+34h]
shl	edx, 18h
or	ecx, edx
movzx	edx, byte ptr [eax+35h]
shl	edx, 10h
or	ecx, edx
movzx	edx, byte ptr [eax+36h]
shl	edx, 8
or	edx, ecx
mov	[esp+180h+W+34h], edx
movzx	ebp, byte ptr [eax+3Bh]
movzx	edx, byte ptr [eax+38h]
shl	edx, 18h
or	ebp, edx
movzx	edx, byte ptr [eax+39h]
shl	edx, 10h
or	ebp, edx
movzx	edx, byte ptr [eax+3Ah]
shl	edx, 8
or	ebp, edx
mov	[esp+180h+W+38h], ebp
movzx	ecx, byte ptr [eax+3Fh]
movzx	edx, byte ptr [eax+3Ch]
shl	edx, 18h
or	ecx, edx
movzx	edx, byte ptr [eax+3Dh]
shl	edx, 10h
or	edx, ecx
movzx	eax, byte ptr [eax+3Eh]
shl	eax, 8
or	edx, eax
mov	[esp+180h+W+3Ch], edx
lea	eax, [esp+180h+W+4]
lea	ecx, [esp+180h+W+0BCh]
mov	[esp+180h+var_180], ecx
mov	esi, edx
nop
mov	edx, ebp
mov	ecx, 11h
ror	edx, cl
mov	ebx, ebp
mov	cl, 13h
ror	ebx, cl
xor	edx, ebx
shr	ebp, 0Ah
xor	edx, ebp
mov	[esp+180h+var_178], edx
mov	edi, 7
mov	ebx, [eax]
mov	ecx, edi
ror	ebx, cl
mov	edx, [eax]
mov	cl, 12h
ror	edx, cl
mov	ecx, [eax-4]
add	ecx, [eax+20h]
xor	edx, ebx
mov	ebp, [eax]
shr	ebp, 3
xor	edx, ebp
lea	ebp, [ecx+edx]
add	ebp, [esp+180h+var_178]
mov	[eax+3Ch], ebp
mov	ebx, esi
mov	ecx, 11h
ror	ebx, cl
mov	edx, esi
mov	cl, 13h
ror	edx, cl
xor	edx, ebx
shr	esi, 0Ah
xor	edx, esi
mov	[esp+180h+var_178], edx
mov	esi, [eax+4]
mov	ebx, esi
mov	ecx, edi
ror	ebx, cl
mov	edx, esi
mov	cl, 12h
ror	edx, cl
mov	ecx, [eax]
add	ecx, [eax+24h]
xor	edx, ebx
shr	esi, 3
xor	edx, esi
lea	esi, [ecx+edx]
add	esi, [esp+180h+var_178]
mov	[eax+40h], esi
add	eax, 8
cmp	eax, [esp+180h+var_180]
jnz	loc_641EEF4C
mov	eax, [esp+180h+W+0F0h]
mov	ecx, 11h
ror	eax, cl
mov	edx, [esp+180h+W+0F0h]
mov	cl, 13h
ror	edx, cl
mov	ebp, [esp+180h+W+0BCh]
mov	ebx, ebp
mov	ecx, edi
ror	ebx, cl
mov	esi, ebp
mov	cl, 12h
ror	esi, cl
mov	ecx, [esp+180h+W+0B8h]
add	ecx, [esp+180h+W+0DCh]
xor	edx, eax
mov	eax, [esp+180h+W+0F0h]
shr	eax, 0Ah
xor	eax, edx
lea	eax, [ecx+eax]
mov	[esp+180h+var_140], eax
xor	ebx, esi
mov	eax, ebp
shr	eax, 3
xor	ebx, eax
mov	[esp+180h+var_13C], ebx
mov	eax, [esp+180h+W+0F4h]
mov	ecx, 11h
ror	eax, cl
mov	edx, [esp+180h+W+0F4h]
mov	cl, 13h
ror	edx, cl
mov	ebx, [esp+180h+W+0C0h]
mov	ecx, edi
ror	ebx, cl
mov	esi, [esp+180h+W+0C0h]
mov	cl, 12h
ror	esi, cl
add	ebp, [esp+180h+W+0E0h]
xor	eax, edx
mov	edx, [esp+180h+W+0F4h]
shr	edx, 0Ah
xor	eax, edx
lea	eax, [ebp+eax+0]
mov	[esp+180h+var_138], eax
xor	ebx, esi
mov	esi, [esp+180h+W+0C0h]
shr	esi, 3
xor	ebx, esi
mov	[esp+180h+var_134], ebx
mov	ebx, [esp+180h+S+10h]
mov	esi, ebx
mov	cl, 6
ror	esi, cl
mov	edi, ebx
mov	cl, 0Bh
ror	edi, cl
mov	edx, ebx
mov	cl, 19h
ror	edx, cl
mov	eax, [esp+180h+S+18h]
mov	ebp, [esp+180h+var_174]
add	ebp, [esp+180h+W]
mov	ecx, [esp+180h+S+14h]
xor	ecx, eax
and	ecx, ebx
xor	ecx, eax
lea	ecx, [ebp+ecx+428A2F98h]
xor	esi, edi
xor	esi, edx
lea	ebp, [ecx+esi]
mov	esi, [esp+180h+S]
mov	ecx, 2
ror	esi, cl
mov	edi, [esp+180h+S]
mov	cl, 0Dh
ror	edi, cl
mov	edx, [esp+180h+S]
mov	cl, 16h
ror	edx, cl
mov	ecx, [esp+180h+S+0Ch]
add	ecx, t0
mov	[esp+180h+var_170], ecx
xor	esi, edi
xor	edx, esi
mov	esi, [esp+180h+S+4]
or	esi, [esp+180h+S]
and	esi, [esp+180h+S+8]
mov	ecx, [esp+180h+S+4]
and	ecx, [esp+180h+S]
or	ecx, esi
add	edx, ecx
add	edx, t0
mov	[esp+180h+var_174], edx
mov	esi, [esp+180h+var_170]
mov	ecx, 6
ror	esi, cl
mov	edi, [esp+180h+var_170]
mov	cl, 0Bh
ror	edi, cl
mov	edx, [esp+180h+var_170]
mov	cl, 19h
ror	edx, cl
add	eax, [esp+180h+W+4]
xor	esi, edi
xor	esi, edx
lea	eax, [eax+esi+71374491h]
mov	t0, [esp+180h+S+14h]
xor	ebp, ebx
and	ebp, [esp+180h+var_170]
xor	ebp, [esp+180h+S+14h]
lea	ebp, [eax+ebp]
mov	esi, [esp+180h+var_174]
mov	cl, 2
ror	esi, cl
mov	edi, [esp+180h+var_174]
mov	cl, 0Dh
ror	edi, cl
mov	eax, [esp+180h+var_174]
mov	cl, 16h
ror	eax, cl
mov	edx, [esp+180h+S+8]
add	edx, t0
mov	[esp+180h+var_164], edx
mov	edx, [esp+180h+var_174]
or	edx, [esp+180h+S]
and	edx, [esp+180h+S+4]
mov	ecx, [esp+180h+var_174]
and	ecx, [esp+180h+S]
or	edx, ecx
add	t0, edx
xor	esi, edi
xor	esi, eax
lea	edx, [t1+esi+0]
mov	esi, [esp+180h+var_164]
mov	ecx, 6
ror	esi, cl
mov	edi, [esp+180h+var_164]
mov	cl, 0Bh
ror	edi, cl
mov	eax, [esp+180h+var_164]
mov	cl, 19h
ror	eax, cl
mov	ecx, [esp+180h+S+14h]
add	ecx, [esp+180h+W+8]
xor	esi, edi
xor	esi, eax
lea	eax, [ecx+esi-4A3F0431h]
mov	t1, [esp+180h+var_170]
xor	ebp, ebx
and	ebp, [esp+180h+var_164]
xor	ebp, ebx
lea	ebp, [eax+ebp]
mov	esi, edx
mov	ecx, 2
ror	esi, cl
mov	edi, edx
mov	cl, 0Dh
ror	edi, cl
mov	eax, edx
mov	cl, 16h
ror	eax, cl
mov	ecx, [esp+180h+var_174]
or	ecx, edx
and	ecx, [esp+180h+S]
mov	[esp+180h+var_17C], ecx
mov	ecx, [esp+180h+var_174]
and	ecx, edx
mov	[esp+180h+var_16C], ecx
mov	ecx, [esp+180h+var_17C]
or	ecx, [esp+180h+var_16C]
mov	[esp+180h+var_17C], ecx
mov	ecx, [esp+180h+S+4]
add	ecx, t0
mov	[esp+180h+var_168], ecx
xor	esi, edi
xor	esi, eax
lea	esi, [t0+esi+0]
add	esi, [esp+180h+var_17C]
mov	[esp+180h+var_178], esi
mov	esi, ecx
mov	ecx, 6
ror	esi, cl
mov	edi, [esp+180h+var_168]
mov	cl, 0Bh
ror	edi, cl
mov	eax, [esp+180h+var_168]
mov	cl, 19h
ror	eax, cl
add	ebx, [esp+180h+W+0Ch]
xor	esi, edi
xor	esi, eax
lea	eax, [ebx+esi-164A245Bh]
mov	t0, [esp+180h+var_164]
xor	ebp, [esp+180h+var_170]
and	ebp, [esp+180h+var_168]
xor	ebp, [esp+180h+var_170]
lea	ebp, [eax+ebp]
mov	esi, [esp+180h+var_178]
mov	cl, 2
ror	esi, cl
mov	edi, [esp+180h+var_178]
mov	cl, 0Dh
ror	edi, cl
mov	eax, [esp+180h+var_178]
mov	cl, 16h
ror	eax, cl
mov	ecx, [esp+180h+var_178]
or	ecx, edx
and	ecx, [esp+180h+var_174]
mov	ebx, [esp+180h+var_178]
and	ebx, edx
or	ecx, ebx
mov	[esp+180h+var_17C], ecx
mov	ecx, [esp+180h+S]
lea	ebx, [t0+ecx+0]
xor	esi, edi
xor	esi, eax
lea	esi, [t0+esi+0]
add	esi, [esp+180h+var_17C]
mov	[esp+180h+var_17C], esi
mov	esi, ebx
mov	ecx, 6
ror	esi, cl
mov	edi, ebx
mov	cl, 0Bh
ror	edi, cl
mov	eax, ebx
mov	cl, 19h
ror	eax, cl
xor	esi, edi
xor	esi, eax
mov	eax, [esp+180h+var_170]
add	eax, [esp+180h+W+10h]
lea	eax, [eax+esi+3956C25Bh]
mov	t0, [esp+180h+var_168]
xor	ebp, [esp+180h+var_164]
and	ebp, ebx
xor	ebp, [esp+180h+var_164]
lea	ebp, [eax+ebp]
mov	esi, [esp+180h+var_17C]
mov	cl, 2
ror	esi, cl
mov	edi, [esp+180h+var_17C]
mov	cl, 0Dh
ror	edi, cl
mov	eax, [esp+180h+var_17C]
mov	cl, 16h
ror	eax, cl
mov	ecx, [esp+180h+var_17C]
or	ecx, [esp+180h+var_178]
and	ecx, edx
mov	[esp+180h+var_16C], ecx
mov	ecx, [esp+180h+var_17C]
and	ecx, [esp+180h+var_178]
mov	[esp+180h+var_170], ecx
mov	ecx, [esp+180h+var_16C]
or	ecx, [esp+180h+var_170]
mov	[esp+180h+var_170], ecx
mov	ecx, [esp+180h+var_174]
add	ecx, t0
mov	[esp+180h+var_16C], ecx
xor	esi, edi
xor	esi, eax
lea	esi, [t0+esi+0]
add	esi, [esp+180h+var_170]
mov	[esp+180h+var_170], esi
mov	esi, ecx
mov	ecx, 6
ror	esi, cl
mov	edi, [esp+180h+var_16C]
mov	cl, 0Bh
ror	edi, cl
mov	eax, [esp+180h+var_16C]
mov	cl, 19h
ror	eax, cl
xor	esi, edi
xor	esi, eax
mov	eax, [esp+180h+var_164]
add	eax, [esp+180h+W+14h]
lea	eax, [eax+esi+59F111F1h]
mov	t0, [esp+180h+var_168]
xor	ebp, ebx
and	ebp, [esp+180h+var_16C]
xor	ebp, [esp+180h+var_168]
lea	ebp, [eax+ebp]
mov	esi, [esp+180h+var_170]
mov	cl, 2
ror	esi, cl
mov	edi, [esp+180h+var_170]
mov	cl, 0Dh
ror	edi, cl
mov	eax, [esp+180h+var_170]
mov	cl, 16h
ror	eax, cl
mov	ecx, [esp+180h+var_170]
or	ecx, [esp+180h+var_17C]
and	ecx, [esp+180h+var_178]
mov	[esp+180h+var_164], ecx
mov	ecx, [esp+180h+var_170]
and	ecx, [esp+180h+var_17C]
mov	[esp+180h+var_174], ecx
mov	ecx, [esp+180h+var_164]
or	ecx, [esp+180h+var_174]
lea	edx, [t0+edx+0]
xor	esi, edi
xor	esi, eax
lea	esi, [t0+esi+0]
add	esi, ecx
mov	[esp+180h+var_174], esi
mov	esi, edx
mov	ecx, 6
ror	esi, cl
mov	edi, edx
mov	cl, 0Bh
ror	edi, cl
mov	eax, edx
mov	cl, 19h
ror	eax, cl
xor	esi, edi
xor	esi, eax
mov	eax, [esp+180h+var_168]
add	eax, [esp+180h+W+18h]
lea	ecx, [eax+esi-6DC07D5Ch]
mov	eax, [esp+180h+var_16C]
xor	eax, ebx
and	eax, edx
xor	eax, ebx
lea	eax, [ecx+eax]
mov	[esp+180h+var_168], eax
mov	esi, [esp+180h+var_174]
mov	ecx, 2
ror	esi, cl
mov	edi, [esp+180h+var_174]
mov	cl, 0Dh
ror	edi, cl
mov	t0, [esp+180h+var_174]
mov	cl, 16h
ror	ebp, cl
mov	eax, [esp+180h+var_174]
or	eax, [esp+180h+var_170]
and	eax, [esp+180h+var_17C]
mov	ecx, [esp+180h+var_174]
and	ecx, [esp+180h+var_170]
or	ecx, eax
mov	eax, [esp+180h+var_168]
add	eax, [esp+180h+var_178]
xor	esi, edi
xor	esi, ebp
add	esi, [esp+180h+var_168]
add	esi, ecx
mov	[esp+180h+var_178], esi
mov	esi, eax
mov	ecx, 6
ror	esi, cl
mov	edi, eax
mov	cl, 0Bh
ror	edi, cl
mov	ebp, eax
mov	cl, 19h
ror	ebp, cl
xor	esi, edi
xor	esi, ebp
add	ebx, [esp+180h+W+1Ch]
lea	ecx, [ebx+esi-54E3A12Bh]
mov	ebp, [esp+180h+var_16C]
xor	ebp, edx
and	ebp, eax
xor	ebp, [esp+180h+var_16C]
lea	ebp, [ecx+ebp]
mov	esi, [esp+180h+var_178]
mov	ecx, 2
ror	esi, cl
mov	edi, [esp+180h+var_178]
mov	cl, 0Dh
ror	edi, cl
mov	ebx, [esp+180h+var_178]
mov	cl, 16h
ror	ebx, cl
mov	ecx, [esp+180h+var_178]
or	ecx, [esp+180h+var_174]
and	ecx, [esp+180h+var_170]
mov	[esp+180h+var_164], ecx
mov	ecx, [esp+180h+var_178]
and	ecx, [esp+180h+var_174]
mov	[esp+180h+var_168], ecx
mov	ecx, [esp+180h+var_164]
or	ecx, [esp+180h+var_168]
mov	[esp+180h+var_164], ecx
mov	ecx, [esp+180h+var_17C]
add	ecx, t0
mov	[esp+180h+var_168], ecx
xor	esi, edi
xor	esi, ebx
lea	esi, [t0+esi+0]
add	esi, [esp+180h+var_164]
mov	[esp+180h+var_17C], esi
mov	esi, ecx
mov	ecx, 6
ror	esi, cl
mov	edi, [esp+180h+var_168]
mov	cl, 0Bh
ror	edi, cl
mov	ebx, [esp+180h+var_168]
mov	cl, 19h
ror	ebx, cl
xor	esi, edi
xor	esi, ebx
mov	ecx, [esp+180h+var_16C]
add	ecx, [esp+180h+W+20h]
lea	ecx, [ecx+esi-27F85568h]
mov	t0, eax
xor	ebp, edx
and	ebp, [esp+180h+var_168]
xor	ebp, edx
lea	ebp, [ecx+ebp]
mov	esi, [esp+180h+var_17C]
mov	ecx, 2
ror	esi, cl
mov	edi, [esp+180h+var_17C]
mov	cl, 0Dh
ror	edi, cl
mov	ebx, [esp+180h+var_17C]
mov	cl, 16h
ror	ebx, cl
mov	ecx, [esp+180h+var_17C]
or	ecx, [esp+180h+var_178]
and	ecx, [esp+180h+var_174]
mov	[esp+180h+var_164], ecx
mov	ecx, [esp+180h+var_17C]
and	ecx, [esp+180h+var_178]
mov	[esp+180h+var_16C], ecx
mov	ecx, [esp+180h+var_164]
or	ecx, [esp+180h+var_16C]
mov	[esp+180h+var_164], ecx
mov	ecx, [esp+180h+var_170]
add	ecx, t0
mov	[esp+180h+var_16C], ecx
xor	esi, edi
xor	esi, ebx
lea	esi, [t0+esi+0]
add	esi, [esp+180h+var_164]
mov	[esp+180h+var_170], esi
mov	esi, ecx
mov	ecx, 6
ror	esi, cl
mov	edi, [esp+180h+var_16C]
mov	cl, 0Bh
ror	edi, cl
mov	ebx, [esp+180h+var_16C]
mov	cl, 19h
ror	ebx, cl
xor	esi, edi
xor	esi, ebx
add	edx, [esp+180h+W+24h]
lea	edx, [edx+esi+12835B01h]
mov	edi, [esp+180h+var_168]
xor	edi, eax
and	edi, [esp+180h+var_16C]
xor	edi, eax
lea	edi, [edx+edi]
mov	ebx, [esp+180h+var_170]
mov	cl, 2
ror	ebx, cl
mov	esi, [esp+180h+var_170]
mov	cl, 0Dh
ror	esi, cl
mov	edx, [esp+180h+var_170]
mov	cl, 16h
ror	edx, cl
mov	ecx, [esp+180h+var_170]
or	ecx, [esp+180h+var_17C]
and	ecx, [esp+180h+var_178]
mov	ebp, [esp+180h+var_170]
and	ebp, [esp+180h+var_17C]
or	ecx, ebp
mov	[esp+180h+var_164], ecx
mov	ecx, [esp+180h+var_174]
lea	ebp, [t0+ecx]
xor	ebx, esi
xor	ebx, edx
lea	ebx, [t0+ebx]
add	ebx, [esp+180h+var_164]
mov	[esp+180h+var_174], ebx
mov	ebx, ebp
mov	ecx, 6
ror	ebx, cl
mov	esi, ebp
mov	cl, 0Bh
ror	esi, cl
mov	edx, ebp
mov	cl, 19h
ror	edx, cl
xor	ebx, esi
xor	ebx, edx
add	eax, [esp+180h+W+28h]
lea	eax, [eax+ebx+243185BEh]
mov	t0, [esp+180h+var_16C]
xor	edi, [esp+180h+var_168]
and	edi, ebp
xor	edi, [esp+180h+var_168]
lea	edi, [eax+edi]
mov	ebx, [esp+180h+var_174]
mov	cl, 2
ror	ebx, cl
mov	esi, [esp+180h+var_174]
mov	cl, 0Dh
ror	esi, cl
mov	eax, [esp+180h+var_174]
mov	cl, 16h
ror	eax, cl
mov	edx, [esp+180h+var_174]
or	edx, [esp+180h+var_170]
and	edx, [esp+180h+var_17C]
mov	ecx, [esp+180h+var_174]
and	ecx, [esp+180h+var_170]
or	ecx, edx
mov	[esp+180h+var_164], ecx
mov	ecx, [esp+180h+var_178]
lea	edx, [t0+ecx]
xor	ebx, esi
xor	ebx, eax
lea	ebx, [t0+ebx]
add	ebx, [esp+180h+var_164]
mov	[esp+180h+var_178], ebx
mov	ebx, edx
mov	ecx, 6
ror	ebx, cl
mov	esi, edx
mov	cl, 0Bh
ror	esi, cl
mov	eax, edx
mov	cl, 19h
ror	eax, cl
xor	ebx, esi
xor	ebx, eax
mov	eax, [esp+180h+var_168]
add	eax, [esp+180h+W+2Ch]
lea	eax, [eax+ebx+550C7DC3h]
mov	t0, [esp+180h+var_16C]
xor	edi, ebp
and	edi, edx
xor	edi, [esp+180h+var_16C]
lea	edi, [eax+edi]
mov	ebx, [esp+180h+var_178]
mov	cl, 2
ror	ebx, cl
mov	esi, [esp+180h+var_178]
mov	cl, 0Dh
ror	esi, cl
mov	eax, [esp+180h+var_178]
mov	cl, 16h
ror	eax, cl
mov	ecx, [esp+180h+var_178]
or	ecx, [esp+180h+var_174]
and	ecx, [esp+180h+var_170]
mov	[esp+180h+var_164], ecx
mov	ecx, [esp+180h+var_178]
and	ecx, [esp+180h+var_174]
mov	[esp+180h+var_168], ecx
mov	ecx, [esp+180h+var_164]
or	ecx, [esp+180h+var_168]
mov	[esp+180h+var_168], ecx
mov	ecx, [esp+180h+var_17C]
add	ecx, t0
mov	[esp+180h+var_164], ecx
xor	ebx, esi
xor	ebx, eax
lea	ebx, [t0+ebx]
add	ebx, [esp+180h+var_168]
mov	[esp+180h+var_17C], ebx
mov	ebx, ecx
mov	ecx, 6
ror	ebx, cl
mov	esi, [esp+180h+var_164]
mov	cl, 0Bh
ror	esi, cl
mov	eax, [esp+180h+var_164]
mov	cl, 19h
ror	eax, cl
xor	ebx, esi
xor	ebx, eax
mov	eax, [esp+180h+var_16C]
add	eax, [esp+180h+W+30h]
lea	ecx, [eax+ebx+72BE5D74h]
mov	eax, edx
xor	eax, ebp
and	eax, [esp+180h+var_164]
xor	eax, ebp
lea	eax, [ecx+eax]
mov	[esp+180h+var_16C], eax
mov	esi, [esp+180h+var_17C]
mov	ecx, 2
ror	esi, cl
mov	t0, [esp+180h+var_17C]
mov	cl, 0Dh
ror	edi, cl
mov	ebx, [esp+180h+var_17C]
mov	cl, 16h
ror	ebx, cl
mov	eax, [esp+180h+var_17C]
or	eax, [esp+180h+var_178]
and	eax, [esp+180h+var_174]
mov	ecx, [esp+180h+var_17C]
and	ecx, [esp+180h+var_178]
or	ecx, eax
mov	eax, [esp+180h+var_16C]
add	eax, [esp+180h+var_170]
xor	esi, edi
xor	esi, ebx
add	esi, [esp+180h+var_16C]
add	esi, ecx
mov	[esp+180h+var_170], esi
mov	esi, eax
mov	ecx, 6
ror	esi, cl
mov	edi, eax
mov	cl, 0Bh
ror	edi, cl
mov	ebx, eax
mov	cl, 19h
ror	ebx, cl
xor	esi, edi
xor	esi, ebx
add	ebp, [esp+180h+W+34h]
lea	ecx, [ebp+esi-7F214E02h]
mov	ebp, [esp+180h+var_164]
xor	ebp, edx
and	ebp, eax
xor	ebp, edx
lea	ebp, [ecx+ebp]
mov	esi, [esp+180h+var_170]
mov	ecx, 2
ror	esi, cl
mov	edi, [esp+180h+var_170]
mov	cl, 0Dh
ror	edi, cl
mov	ebx, [esp+180h+var_170]
mov	cl, 16h
ror	ebx, cl
mov	ecx, [esp+180h+var_170]
or	ecx, [esp+180h+var_17C]
and	ecx, [esp+180h+var_178]
mov	[esp+180h+var_168], ecx
mov	ecx, [esp+180h+var_170]
and	ecx, [esp+180h+var_17C]
mov	[esp+180h+var_16C], ecx
mov	ecx, [esp+180h+var_168]
or	ecx, [esp+180h+var_16C]
mov	[esp+180h+var_16C], ecx
mov	ecx, [esp+180h+var_174]
add	ecx, t0
mov	[esp+180h+var_168], ecx
xor	esi, edi
xor	esi, ebx
lea	esi, [t0+esi+0]
add	esi, [esp+180h+var_16C]
mov	[esp+180h+var_174], esi
mov	esi, ecx
mov	ecx, 6
ror	esi, cl
mov	edi, [esp+180h+var_168]
mov	cl, 0Bh
ror	edi, cl
mov	ebx, [esp+180h+var_168]
mov	cl, 19h
ror	ebx, cl
xor	esi, edi
xor	esi, ebx
add	edx, [esp+180h+W+38h]
lea	edx, [edx+esi-6423F959h]
mov	edi, [esp+180h+var_164]
xor	edi, eax
and	edi, [esp+180h+var_168]
xor	edi, [esp+180h+var_164]
lea	edi, [edx+edi]
mov	ebx, [esp+180h+var_174]
mov	cl, 2
ror	ebx, cl
mov	esi, [esp+180h+var_174]
mov	cl, 0Dh
ror	esi, cl
mov	edx, [esp+180h+var_174]
mov	cl, 16h
ror	edx, cl
mov	ecx, [esp+180h+var_174]
or	ecx, [esp+180h+var_170]
and	ecx, [esp+180h+var_17C]
mov	ebp, [esp+180h+var_174]
and	ebp, [esp+180h+var_170]
or	ecx, ebp
mov	ebp, [esp+180h+var_178]
add	ebp, t0
mov	[esp+180h+var_16C], ebp
xor	ebx, esi
xor	ebx, edx
lea	ebx, [t0+ebx]
add	ebx, ecx
mov	[esp+180h+var_178], ebx
mov	ebx, ebp
mov	ecx, 6
ror	ebx, cl
mov	esi, ebp
mov	cl, 0Bh
ror	esi, cl
mov	edx, ebp
mov	cl, 19h
ror	edx, cl
xor	ebx, esi
xor	ebx, edx
mov	edx, [esp+180h+var_164]
add	edx, [esp+180h+W+3Ch]
lea	edx, [edx+ebx-3E640E8Ch]
mov	ebp, [esp+180h+var_168]
xor	ebp, eax
and	ebp, [esp+180h+var_16C]
xor	ebp, eax
lea	ebp, [edx+ebp]
mov	esi, [esp+180h+var_178]
mov	cl, 2
ror	esi, cl
mov	edi, [esp+180h+var_178]
mov	cl, 0Dh
ror	edi, cl
mov	ebx, [esp+180h+var_178]
mov	cl, 16h
ror	ebx, cl
mov	edx, [esp+180h+var_178]
or	edx, [esp+180h+var_174]
and	edx, [esp+180h+var_170]
mov	ecx, [esp+180h+var_178]
and	ecx, [esp+180h+var_174]
or	ecx, edx
mov	[esp+180h+var_164], ecx
mov	ecx, [esp+180h+var_17C]
lea	edx, [t0+ecx+0]
xor	esi, edi
xor	esi, ebx
lea	esi, [t0+esi+0]
add	esi, [esp+180h+var_164]
mov	[esp+180h+var_17C], esi
mov	esi, edx
mov	ecx, 6
ror	esi, cl
mov	edi, edx
mov	cl, 0Bh
ror	edi, cl
mov	ebx, edx
mov	cl, 19h
ror	ebx, cl
xor	esi, edi
xor	esi, ebx
add	eax, [esp+180h+W+40h]
lea	eax, [eax+esi-1B64963Fh]
mov	t0, [esp+180h+var_16C]
xor	ebp, [esp+180h+var_168]
and	ebp, edx
xor	ebp, [esp+180h+var_168]
lea	ebp, [eax+ebp]
mov	esi, [esp+180h+var_17C]
mov	cl, 2
ror	esi, cl
mov	edi, [esp+180h+var_17C]
mov	cl, 0Dh
ror	edi, cl
mov	ebx, [esp+180h+var_17C]
mov	cl, 16h
ror	ebx, cl
mov	eax, [esp+180h+var_17C]
or	eax, [esp+180h+var_178]
and	eax, [esp+180h+var_174]
mov	ecx, [esp+180h+var_17C]
and	ecx, [esp+180h+var_178]
or	ecx, eax
mov	[esp+180h+var_164], ecx
mov	ecx, [esp+180h+var_170]
lea	eax, [t0+ecx+0]
xor	esi, edi
xor	esi, ebx
lea	esi, [t0+esi+0]
add	esi, [esp+180h+var_164]
mov	[esp+180h+var_170], esi
mov	esi, eax
mov	ecx, 6
ror	esi, cl
mov	edi, eax
mov	cl, 0Bh
ror	edi, cl
mov	ebx, eax
mov	cl, 19h
ror	ebx, cl
xor	esi, edi
xor	esi, ebx
mov	ecx, [esp+180h+var_168]
add	ecx, [esp+180h+W+44h]
lea	ecx, [ecx+esi-1041B87Ah]
mov	t0, [esp+180h+var_16C]
xor	ebp, edx
and	ebp, eax
xor	ebp, [esp+180h+var_16C]
lea	ebp, [ecx+ebp]
mov	esi, [esp+180h+var_170]
mov	ecx, 2
ror	esi, cl
mov	edi, [esp+180h+var_170]
mov	cl, 0Dh
ror	edi, cl
mov	ebx, [esp+180h+var_170]
mov	cl, 16h
ror	ebx, cl
mov	ecx, [esp+180h+var_170]
or	ecx, [esp+180h+var_17C]
and	ecx, [esp+180h+var_178]
mov	[esp+180h+var_164], ecx
mov	ecx, [esp+180h+var_170]
and	ecx, [esp+180h+var_17C]
mov	[esp+180h+var_168], ecx
mov	ecx, [esp+180h+var_164]
or	ecx, [esp+180h+var_168]
mov	[esp+180h+var_164], ecx
mov	ecx, [esp+180h+var_174]
add	ecx, t0
mov	[esp+180h+var_168], ecx
xor	esi, edi
xor	esi, ebx
lea	esi, [t0+esi+0]
add	esi, [esp+180h+var_164]
mov	[esp+180h+var_174], esi
mov	esi, ecx
mov	ecx, 6
ror	esi, cl
mov	edi, [esp+180h+var_168]
mov	cl, 0Bh
ror	edi, cl
mov	ebx, [esp+180h+var_168]
mov	cl, 19h
ror	ebx, cl
xor	esi, edi
xor	esi, ebx
mov	ecx, [esp+180h+var_16C]
add	ecx, [esp+180h+W+48h]
lea	ecx, [ecx+esi+0FC19DC6h]
mov	t0, eax
xor	ebp, edx
and	ebp, [esp+180h+var_168]
xor	ebp, edx
lea	ebp, [ecx+ebp]
mov	esi, [esp+180h+var_174]
mov	ecx, 2
ror	esi, cl
mov	edi, [esp+180h+var_174]
mov	cl, 0Dh
ror	edi, cl
mov	ebx, [esp+180h+var_174]
mov	cl, 16h
ror	ebx, cl
mov	ecx, [esp+180h+var_174]
or	ecx, [esp+180h+var_170]
and	ecx, [esp+180h+var_17C]
mov	[esp+180h+var_164], ecx
mov	ecx, [esp+180h+var_174]
and	ecx, [esp+180h+var_170]
mov	[esp+180h+var_16C], ecx
mov	ecx, [esp+180h+var_164]
or	ecx, [esp+180h+var_16C]
mov	[esp+180h+var_164], ecx
mov	ecx, [esp+180h+var_178]
add	ecx, t0
mov	[esp+180h+var_16C], ecx
xor	esi, edi
xor	esi, ebx
lea	esi, [t0+esi+0]
add	esi, [esp+180h+var_164]
mov	[esp+180h+var_178], esi
mov	esi, ecx
mov	ecx, 6
ror	esi, cl
mov	edi, [esp+180h+var_16C]
mov	cl, 0Bh
ror	edi, cl
mov	ebx, [esp+180h+var_16C]
mov	cl, 19h
ror	ebx, cl
xor	esi, edi
xor	esi, ebx
add	edx, [esp+180h+W+4Ch]
lea	edx, [edx+esi+240CA1CCh]
mov	t0, [esp+180h+var_168]
xor	ebp, eax
and	ebp, [esp+180h+var_16C]
xor	ebp, eax
lea	ebp, [edx+ebp]
mov	esi, [esp+180h+var_178]
mov	cl, 2
ror	esi, cl
mov	edi, [esp+180h+var_178]
mov	cl, 0Dh
ror	edi, cl
mov	ebx, [esp+180h+var_178]
mov	cl, 16h
ror	ebx, cl
mov	edx, [esp+180h+var_178]
or	edx, [esp+180h+var_174]
and	edx, [esp+180h+var_170]
mov	ecx, [esp+180h+var_178]
and	ecx, [esp+180h+var_174]
or	ecx, edx
mov	[esp+180h+var_164], ecx
mov	ecx, [esp+180h+var_17C]
lea	edx, [t0+ecx+0]
xor	esi, edi
xor	esi, ebx
lea	esi, [t0+esi+0]
add	esi, [esp+180h+var_164]
mov	[esp+180h+var_17C], esi
mov	esi, edx
mov	ecx, 6
ror	esi, cl
mov	edi, edx
mov	cl, 0Bh
ror	edi, cl
mov	ebx, edx
mov	cl, 19h
ror	ebx, cl
xor	esi, edi
xor	esi, ebx
add	eax, [esp+180h+W+50h]
lea	eax, [eax+esi+2DE92C6Fh]
mov	edi, [esp+180h+var_16C]
xor	edi, [esp+180h+var_168]
and	edi, edx
xor	edi, [esp+180h+var_168]
lea	edi, [eax+edi]
mov	ebx, [esp+180h+var_17C]
mov	cl, 2
ror	ebx, cl
mov	esi, [esp+180h+var_17C]
mov	cl, 0Dh
ror	esi, cl
mov	eax, [esp+180h+var_17C]
mov	cl, 16h
ror	eax, cl
mov	ecx, [esp+180h+var_17C]
or	ecx, [esp+180h+var_178]
and	ecx, [esp+180h+var_174]
mov	ebp, [esp+180h+var_17C]
and	ebp, [esp+180h+var_178]
or	ecx, ebp
mov	ebp, [esp+180h+var_170]
add	ebp, t0
mov	[esp+180h+var_164], ebp
xor	ebx, esi
xor	ebx, eax
lea	ebx, [t0+ebx]
add	ebx, ecx
mov	[esp+180h+var_170], ebx
mov	ebx, ebp
mov	ecx, 6
ror	ebx, cl
mov	esi, ebp
mov	cl, 0Bh
ror	esi, cl
mov	eax, ebp
mov	cl, 19h
ror	eax, cl
xor	ebx, esi
xor	ebx, eax
mov	eax, [esp+180h+var_168]
add	eax, [esp+180h+W+54h]
lea	eax, [eax+ebx+4A7484AAh]
mov	ebp, [esp+180h+var_16C]
xor	ebp, edx
and	ebp, [esp+180h+var_164]
xor	ebp, [esp+180h+var_16C]
lea	ebp, [eax+ebp]
mov	esi, [esp+180h+var_170]
mov	cl, 2
ror	esi, cl
mov	edi, [esp+180h+var_170]
mov	cl, 0Dh
ror	edi, cl
mov	ebx, [esp+180h+var_170]
mov	cl, 16h
ror	ebx, cl
mov	eax, [esp+180h+var_170]
or	eax, [esp+180h+var_17C]
and	eax, [esp+180h+var_178]
mov	ecx, [esp+180h+var_170]
and	ecx, [esp+180h+var_17C]
or	ecx, eax
mov	eax, [esp+180h+var_174]
add	eax, t0
xor	esi, edi
xor	esi, ebx
lea	esi, [t0+esi+0]
add	esi, ecx
mov	[esp+180h+var_174], esi
mov	esi, eax
mov	ecx, 6
ror	esi, cl
mov	edi, eax
mov	cl, 0Bh
ror	edi, cl
mov	ebx, eax
mov	cl, 19h
ror	ebx, cl
xor	esi, edi
xor	esi, ebx
mov	ecx, [esp+180h+var_16C]
add	ecx, [esp+180h+W+58h]
lea	ecx, [ecx+esi+5CB0A9DCh]
mov	t0, [esp+180h+var_164]
xor	ebp, edx
and	ebp, eax
xor	ebp, edx
lea	ebp, [ecx+ebp]
mov	esi, [esp+180h+var_174]
mov	ecx, 2
ror	esi, cl
mov	edi, [esp+180h+var_174]
mov	cl, 0Dh
ror	edi, cl
mov	ebx, [esp+180h+var_174]
mov	cl, 16h
ror	ebx, cl
mov	ecx, [esp+180h+var_174]
or	ecx, [esp+180h+var_170]
and	ecx, [esp+180h+var_17C]
mov	[esp+180h+var_168], ecx
mov	ecx, [esp+180h+var_174]
and	ecx, [esp+180h+var_170]
mov	[esp+180h+var_16C], ecx
mov	ecx, [esp+180h+var_168]
or	ecx, [esp+180h+var_16C]
mov	[esp+180h+var_16C], ecx
mov	ecx, [esp+180h+var_178]
add	ecx, t0
mov	[esp+180h+var_168], ecx
xor	esi, edi
xor	esi, ebx
lea	esi, [t0+esi+0]
add	esi, [esp+180h+var_16C]
mov	[esp+180h+var_178], esi
mov	esi, ecx
mov	ecx, 6
ror	esi, cl
mov	edi, [esp+180h+var_168]
mov	cl, 0Bh
ror	edi, cl
mov	ebx, [esp+180h+var_168]
mov	cl, 19h
ror	ebx, cl
xor	esi, edi
xor	esi, ebx
add	edx, [esp+180h+W+5Ch]
lea	edx, [edx+esi+76F988DAh]
mov	edi, [esp+180h+var_164]
xor	edi, eax
and	edi, [esp+180h+var_168]
xor	edi, [esp+180h+var_164]
lea	edi, [edx+edi]
mov	ebx, [esp+180h+var_178]
mov	cl, 2
ror	ebx, cl
mov	esi, [esp+180h+var_178]
mov	cl, 0Dh
ror	esi, cl
mov	edx, [esp+180h+var_178]
mov	cl, 16h
ror	edx, cl
mov	ecx, [esp+180h+var_178]
or	ecx, [esp+180h+var_174]
and	ecx, [esp+180h+var_170]
mov	ebp, [esp+180h+var_178]
and	ebp, [esp+180h+var_174]
or	ecx, ebp
mov	ebp, [esp+180h+var_17C]
add	ebp, t0
mov	[esp+180h+var_16C], ebp
xor	ebx, esi
xor	ebx, edx
lea	ebx, [t0+ebx]
add	ebx, ecx
mov	[esp+180h+var_17C], ebx
mov	ebx, ebp
mov	ecx, 6
ror	ebx, cl
mov	esi, ebp
mov	cl, 0Bh
ror	esi, cl
mov	edx, ebp
mov	cl, 19h
ror	edx, cl
xor	ebx, esi
xor	ebx, edx
mov	edx, [esp+180h+var_164]
add	edx, [esp+180h+W+60h]
lea	edx, [edx+ebx-67C1AEAEh]
mov	ebp, [esp+180h+var_168]
xor	ebp, eax
and	ebp, [esp+180h+var_16C]
xor	ebp, eax
lea	ebp, [edx+ebp]
mov	esi, [esp+180h+var_17C]
mov	cl, 2
ror	esi, cl
mov	edi, [esp+180h+var_17C]
mov	cl, 0Dh
ror	edi, cl
mov	ebx, [esp+180h+var_17C]
mov	cl, 16h
ror	ebx, cl
mov	edx, [esp+180h+var_17C]
or	edx, [esp+180h+var_178]
and	edx, [esp+180h+var_174]
mov	ecx, [esp+180h+var_17C]
and	ecx, [esp+180h+var_178]
or	ecx, edx
mov	edx, [esp+180h+var_170]
add	edx, t0
xor	esi, edi
xor	esi, ebx
lea	esi, [t0+esi+0]
add	esi, ecx
mov	[esp+180h+var_170], esi
mov	esi, edx
mov	ecx, 6
ror	esi, cl
mov	edi, edx
mov	cl, 0Bh
ror	edi, cl
mov	ebx, edx
mov	cl, 19h
ror	ebx, cl
xor	esi, edi
xor	esi, ebx
add	eax, [esp+180h+W+64h]
lea	eax, [eax+esi-57CE3993h]
mov	t0, [esp+180h+var_16C]
xor	ebp, [esp+180h+var_168]
and	ebp, edx
xor	ebp, [esp+180h+var_168]
lea	ebp, [eax+ebp]
mov	esi, [esp+180h+var_170]
mov	cl, 2
ror	esi, cl
mov	edi, [esp+180h+var_170]
mov	cl, 0Dh
ror	edi, cl
mov	ebx, [esp+180h+var_170]
mov	cl, 16h
ror	ebx, cl
mov	eax, [esp+180h+var_170]
or	eax, [esp+180h+var_17C]
and	eax, [esp+180h+var_178]
mov	ecx, [esp+180h+var_170]
and	ecx, [esp+180h+var_17C]
or	ecx, eax
mov	eax, [esp+180h+var_174]
add	eax, t0
xor	esi, edi
xor	esi, ebx
lea	esi, [t0+esi+0]
add	esi, ecx
mov	[esp+180h+var_174], esi
mov	esi, eax
mov	ecx, 6
ror	esi, cl
mov	edi, eax
mov	cl, 0Bh
ror	edi, cl
mov	ebx, eax
mov	cl, 19h
ror	ebx, cl
xor	esi, edi
xor	esi, ebx
mov	ecx, [esp+180h+var_168]
add	ecx, [esp+180h+W+68h]
lea	ecx, [ecx+esi-4FFCD838h]
mov	t0, [esp+180h+var_16C]
xor	ebp, edx
and	ebp, eax
xor	ebp, [esp+180h+var_16C]
lea	ebp, [ecx+ebp]
mov	esi, [esp+180h+var_174]
mov	ecx, 2
ror	esi, cl
mov	edi, [esp+180h+var_174]
mov	cl, 0Dh
ror	edi, cl
mov	ebx, [esp+180h+var_174]
mov	cl, 16h
ror	ebx, cl
mov	ecx, [esp+180h+var_174]
or	ecx, [esp+180h+var_170]
and	ecx, [esp+180h+var_17C]
mov	[esp+180h+var_164], ecx
mov	ecx, [esp+180h+var_174]
and	ecx, [esp+180h+var_170]
mov	[esp+180h+var_168], ecx
mov	ecx, [esp+180h+var_164]
or	ecx, [esp+180h+var_168]
mov	[esp+180h+var_164], ecx
mov	ecx, [esp+180h+var_178]
add	ecx, t0
mov	[esp+180h+var_168], ecx
xor	esi, edi
xor	esi, ebx
lea	esi, [t0+esi+0]
add	esi, [esp+180h+var_164]
mov	[esp+180h+var_178], esi
mov	esi, ecx
mov	ecx, 6
ror	esi, cl
mov	edi, [esp+180h+var_168]
mov	cl, 0Bh
ror	edi, cl
mov	ebx, [esp+180h+var_168]
mov	cl, 19h
ror	ebx, cl
xor	esi, edi
xor	esi, ebx
mov	ecx, [esp+180h+var_16C]
add	ecx, [esp+180h+W+6Ch]
lea	ecx, [ecx+esi-40A68039h]
mov	t0, eax
xor	ebp, edx
and	ebp, [esp+180h+var_168]
xor	ebp, edx
lea	ebp, [ecx+ebp]
mov	esi, [esp+180h+var_178]
mov	ecx, 2
ror	esi, cl
mov	edi, [esp+180h+var_178]
mov	cl, 0Dh
ror	edi, cl
mov	ebx, [esp+180h+var_178]
mov	cl, 16h
ror	ebx, cl
mov	ecx, [esp+180h+var_178]
or	ecx, [esp+180h+var_174]
and	ecx, [esp+180h+var_170]
mov	[esp+180h+var_164], ecx
mov	ecx, [esp+180h+var_178]
and	ecx, [esp+180h+var_174]
mov	[esp+180h+var_16C], ecx
mov	ecx, [esp+180h+var_164]
or	ecx, [esp+180h+var_16C]
mov	[esp+180h+var_164], ecx
mov	ecx, [esp+180h+var_17C]
add	ecx, t0
mov	[esp+180h+var_16C], ecx
xor	esi, edi
xor	esi, ebx
lea	esi, [t0+esi+0]
add	esi, [esp+180h+var_164]
mov	[esp+180h+var_17C], esi
mov	esi, ecx
mov	ecx, 6
ror	esi, cl
mov	edi, [esp+180h+var_16C]
mov	cl, 0Bh
ror	edi, cl
mov	ebx, [esp+180h+var_16C]
mov	cl, 19h
ror	ebx, cl
xor	esi, edi
xor	esi, ebx
add	edx, [esp+180h+W+70h]
lea	edx, [edx+esi-391FF40Dh]
mov	t0, [esp+180h+var_168]
xor	ebp, eax
and	ebp, [esp+180h+var_16C]
xor	ebp, eax
lea	ebp, [edx+ebp]
mov	esi, [esp+180h+var_17C]
mov	cl, 2
ror	esi, cl
mov	edi, [esp+180h+var_17C]
mov	cl, 0Dh
ror	edi, cl
mov	ebx, [esp+180h+var_17C]
mov	cl, 16h
ror	ebx, cl
mov	edx, [esp+180h+var_17C]
or	edx, [esp+180h+var_178]
and	edx, [esp+180h+var_174]
mov	ecx, [esp+180h+var_17C]
and	ecx, [esp+180h+var_178]
or	ecx, edx
mov	edx, [esp+180h+var_170]
add	edx, t0
xor	esi, edi
xor	esi, ebx
lea	esi, [t0+esi+0]
add	esi, ecx
mov	[esp+180h+var_170], esi
mov	esi, edx
mov	ecx, 6
ror	esi, cl
mov	edi, edx
mov	cl, 0Bh
ror	edi, cl
mov	ebx, edx
mov	cl, 19h
ror	ebx, cl
xor	esi, edi
xor	esi, ebx
add	eax, [esp+180h+W+74h]
lea	eax, [eax+esi-2A586EB9h]
mov	edi, [esp+180h+var_16C]
xor	edi, [esp+180h+var_168]
and	edi, edx
xor	edi, [esp+180h+var_168]
lea	edi, [eax+edi]
mov	ebx, [esp+180h+var_170]
mov	cl, 2
ror	ebx, cl
mov	esi, [esp+180h+var_170]
mov	cl, 0Dh
ror	esi, cl
mov	eax, [esp+180h+var_170]
mov	cl, 16h
ror	eax, cl
mov	ecx, [esp+180h+var_170]
or	ecx, [esp+180h+var_17C]
and	ecx, [esp+180h+var_178]
mov	ebp, [esp+180h+var_170]
and	ebp, [esp+180h+var_17C]
or	ecx, ebp
mov	ebp, [esp+180h+var_174]
add	ebp, t0
mov	[esp+180h+var_164], ebp
xor	ebx, esi
xor	ebx, eax
lea	ebx, [t0+ebx]
add	ebx, ecx
mov	[esp+180h+var_174], ebx
mov	ebx, ebp
mov	ecx, 6
ror	ebx, cl
mov	esi, ebp
mov	cl, 0Bh
ror	esi, cl
mov	eax, ebp
mov	cl, 19h
ror	eax, cl
xor	ebx, esi
xor	ebx, eax
mov	eax, [esp+180h+var_168]
add	eax, [esp+180h+W+78h]
lea	eax, [eax+ebx+6CA6351h]
mov	ebp, [esp+180h+var_16C]
xor	ebp, edx
and	ebp, [esp+180h+var_164]
xor	ebp, [esp+180h+var_16C]
lea	ebp, [eax+ebp]
mov	esi, [esp+180h+var_174]
mov	cl, 2
ror	esi, cl
mov	edi, [esp+180h+var_174]
mov	cl, 0Dh
ror	edi, cl
mov	ebx, [esp+180h+var_174]
mov	cl, 16h
ror	ebx, cl
mov	eax, [esp+180h+var_174]
or	eax, [esp+180h+var_170]
and	eax, [esp+180h+var_17C]
mov	ecx, [esp+180h+var_174]
and	ecx, [esp+180h+var_170]
or	ecx, eax
mov	eax, [esp+180h+var_178]
add	eax, t0
xor	esi, edi
xor	esi, ebx
lea	esi, [t0+esi+0]
add	esi, ecx
mov	[esp+180h+var_178], esi
mov	esi, eax
mov	ecx, 6
ror	esi, cl
mov	edi, eax
mov	cl, 0Bh
ror	edi, cl
mov	ebx, eax
mov	cl, 19h
ror	ebx, cl
xor	esi, edi
xor	esi, ebx
mov	ecx, [esp+180h+var_16C]
add	ecx, [esp+180h+W+7Ch]
lea	ecx, [ecx+esi+14292967h]
mov	t0, [esp+180h+var_164]
xor	ebp, edx
and	ebp, eax
xor	ebp, edx
lea	ebp, [ecx+ebp]
mov	esi, [esp+180h+var_178]
mov	ecx, 2
ror	esi, cl
mov	edi, [esp+180h+var_178]
mov	cl, 0Dh
ror	edi, cl
mov	ebx, [esp+180h+var_178]
mov	cl, 16h
ror	ebx, cl
mov	ecx, [esp+180h+var_178]
or	ecx, [esp+180h+var_174]
and	ecx, [esp+180h+var_170]
mov	[esp+180h+var_168], ecx
mov	ecx, [esp+180h+var_178]
and	ecx, [esp+180h+var_174]
mov	[esp+180h+var_16C], ecx
mov	ecx, [esp+180h+var_168]
or	ecx, [esp+180h+var_16C]
mov	[esp+180h+var_16C], ecx
mov	ecx, [esp+180h+var_17C]
add	ecx, t0
mov	[esp+180h+var_168], ecx
xor	esi, edi
xor	esi, ebx
lea	esi, [t0+esi+0]
add	esi, [esp+180h+var_16C]
mov	[esp+180h+var_17C], esi
mov	esi, ecx
mov	ecx, 6
ror	esi, cl
mov	edi, [esp+180h+var_168]
mov	cl, 0Bh
ror	edi, cl
mov	ebx, [esp+180h+var_168]
mov	cl, 19h
ror	ebx, cl
xor	esi, edi
xor	esi, ebx
add	edx, [esp+180h+W+80h]
lea	edx, [edx+esi+27B70A85h]
mov	edi, [esp+180h+var_164]
xor	edi, eax
and	edi, [esp+180h+var_168]
xor	edi, [esp+180h+var_164]
lea	edi, [edx+edi]
mov	ebx, [esp+180h+var_17C]
mov	cl, 2
ror	ebx, cl
mov	esi, [esp+180h+var_17C]
mov	cl, 0Dh
ror	esi, cl
mov	edx, [esp+180h+var_17C]
mov	cl, 16h
ror	edx, cl
mov	ecx, [esp+180h+var_17C]
or	ecx, [esp+180h+var_178]
and	ecx, [esp+180h+var_174]
mov	ebp, [esp+180h+var_17C]
and	ebp, [esp+180h+var_178]
or	ecx, ebp
mov	ebp, [esp+180h+var_170]
add	ebp, t0
mov	[esp+180h+var_16C], ebp
xor	ebx, esi
xor	ebx, edx
lea	ebx, [t0+ebx]
add	ebx, ecx
mov	[esp+180h+var_170], ebx
mov	ebx, ebp
mov	ecx, 6
ror	ebx, cl
mov	esi, ebp
mov	cl, 0Bh
ror	esi, cl
mov	edx, ebp
mov	cl, 19h
ror	edx, cl
xor	ebx, esi
xor	ebx, edx
mov	edx, [esp+180h+var_164]
add	edx, [esp+180h+W+84h]
lea	edx, [edx+ebx+2E1B2138h]
mov	ebp, [esp+180h+var_168]
xor	ebp, eax
and	ebp, [esp+180h+var_16C]
xor	ebp, eax
lea	ebp, [edx+ebp]
mov	esi, [esp+180h+var_170]
mov	cl, 2
ror	esi, cl
mov	edi, [esp+180h+var_170]
mov	cl, 0Dh
ror	edi, cl
mov	ebx, [esp+180h+var_170]
mov	cl, 16h
ror	ebx, cl
mov	edx, [esp+180h+var_170]
or	edx, [esp+180h+var_17C]
and	edx, [esp+180h+var_178]
mov	ecx, [esp+180h+var_170]
and	ecx, [esp+180h+var_17C]
or	ecx, edx
mov	edx, [esp+180h+var_174]
add	edx, t0
xor	esi, edi
xor	esi, ebx
lea	esi, [t0+esi+0]
add	esi, ecx
mov	[esp+180h+var_174], esi
mov	esi, edx
mov	ecx, 6
ror	esi, cl
mov	edi, edx
mov	cl, 0Bh
ror	edi, cl
mov	ebx, edx
mov	cl, 19h
ror	ebx, cl
xor	esi, edi
xor	esi, ebx
add	eax, [esp+180h+W+88h]
lea	eax, [eax+esi+4D2C6DFCh]
mov	t0, [esp+180h+var_16C]
xor	ebp, [esp+180h+var_168]
and	ebp, edx
xor	ebp, [esp+180h+var_168]
lea	ebp, [eax+ebp]
mov	esi, [esp+180h+var_174]
mov	cl, 2
ror	esi, cl
mov	edi, [esp+180h+var_174]
mov	cl, 0Dh
ror	edi, cl
mov	ebx, [esp+180h+var_174]
mov	cl, 16h
ror	ebx, cl
mov	eax, [esp+180h+var_174]
or	eax, [esp+180h+var_170]
and	eax, [esp+180h+var_17C]
mov	ecx, [esp+180h+var_174]
and	ecx, [esp+180h+var_170]
or	ecx, eax
mov	eax, [esp+180h+var_178]
add	eax, t0
xor	esi, edi
xor	esi, ebx
lea	esi, [t0+esi+0]
add	esi, ecx
mov	[esp+180h+var_178], esi
mov	esi, eax
mov	ecx, 6
ror	esi, cl
mov	edi, eax
mov	cl, 0Bh
ror	edi, cl
mov	ebx, eax
mov	cl, 19h
ror	ebx, cl
xor	esi, edi
xor	esi, ebx
mov	ecx, [esp+180h+var_168]
add	ecx, [esp+180h+W+8Ch]
lea	ecx, [ecx+esi+53380D13h]
mov	t0, [esp+180h+var_16C]
xor	ebp, edx
and	ebp, eax
xor	ebp, [esp+180h+var_16C]
lea	ebp, [ecx+ebp]
mov	esi, [esp+180h+var_178]
mov	ecx, 2
ror	esi, cl
mov	edi, [esp+180h+var_178]
mov	cl, 0Dh
ror	edi, cl
mov	ebx, [esp+180h+var_178]
mov	cl, 16h
ror	ebx, cl
mov	ecx, [esp+180h+var_178]
or	ecx, [esp+180h+var_174]
and	ecx, [esp+180h+var_170]
mov	[esp+180h+var_164], ecx
mov	ecx, [esp+180h+var_178]
and	ecx, [esp+180h+var_174]
mov	[esp+180h+var_168], ecx
mov	ecx, [esp+180h+var_164]
or	ecx, [esp+180h+var_168]
mov	[esp+180h+var_164], ecx
mov	ecx, [esp+180h+var_17C]
add	ecx, t0
mov	[esp+180h+var_168], ecx
xor	esi, edi
xor	esi, ebx
lea	esi, [t0+esi+0]
add	esi, [esp+180h+var_164]
mov	[esp+180h+var_17C], esi
mov	esi, ecx
mov	ecx, 6
ror	esi, cl
mov	edi, [esp+180h+var_168]
mov	cl, 0Bh
ror	edi, cl
mov	ebx, [esp+180h+var_168]
mov	cl, 19h
ror	ebx, cl
xor	esi, edi
xor	esi, ebx
mov	ecx, [esp+180h+var_16C]
add	ecx, [esp+180h+W+90h]
lea	ecx, [ecx+esi+650A7354h]
mov	t0, eax
xor	ebp, edx
and	ebp, [esp+180h+var_168]
xor	ebp, edx
lea	ebp, [ecx+ebp]
mov	esi, [esp+180h+var_17C]
mov	ecx, 2
ror	esi, cl
mov	edi, [esp+180h+var_17C]
mov	cl, 0Dh
ror	edi, cl
mov	ebx, [esp+180h+var_17C]
mov	cl, 16h
ror	ebx, cl
mov	ecx, [esp+180h+var_17C]
or	ecx, [esp+180h+var_178]
and	ecx, [esp+180h+var_174]
mov	[esp+180h+var_164], ecx
mov	ecx, [esp+180h+var_17C]
and	ecx, [esp+180h+var_178]
mov	[esp+180h+var_16C], ecx
mov	ecx, [esp+180h+var_164]
or	ecx, [esp+180h+var_16C]
mov	[esp+180h+var_164], ecx
mov	ecx, [esp+180h+var_170]
add	ecx, t0
mov	[esp+180h+var_16C], ecx
xor	esi, edi
xor	esi, ebx
lea	esi, [t0+esi+0]
add	esi, [esp+180h+var_164]
mov	[esp+180h+var_170], esi
mov	esi, ecx
mov	ecx, 6
ror	esi, cl
mov	edi, [esp+180h+var_16C]
mov	cl, 0Bh
ror	edi, cl
mov	ebx, [esp+180h+var_16C]
mov	cl, 19h
ror	ebx, cl
xor	esi, edi
xor	esi, ebx
add	edx, [esp+180h+W+94h]
lea	edx, [edx+esi+766A0ABBh]
mov	t0, [esp+180h+var_168]
xor	ebp, eax
and	ebp, [esp+180h+var_16C]
xor	ebp, eax
lea	ebp, [edx+ebp]
mov	esi, [esp+180h+var_170]
mov	cl, 2
ror	esi, cl
mov	edi, [esp+180h+var_170]
mov	cl, 0Dh
ror	edi, cl
mov	ebx, [esp+180h+var_170]
mov	cl, 16h
ror	ebx, cl
mov	edx, [esp+180h+var_170]
or	edx, [esp+180h+var_17C]
and	edx, [esp+180h+var_178]
mov	ecx, [esp+180h+var_170]
and	ecx, [esp+180h+var_17C]
or	ecx, edx
mov	edx, [esp+180h+var_174]
add	edx, t0
xor	esi, edi
xor	esi, ebx
lea	esi, [t0+esi+0]
add	esi, ecx
mov	[esp+180h+var_174], esi
mov	esi, edx
mov	ecx, 6
ror	esi, cl
mov	edi, edx
mov	cl, 0Bh
ror	edi, cl
mov	ebx, edx
mov	cl, 19h
ror	ebx, cl
xor	esi, edi
xor	esi, ebx
add	eax, [esp+180h+W+98h]
lea	eax, [eax+esi-7E3D36D2h]
mov	edi, [esp+180h+var_16C]
xor	edi, [esp+180h+var_168]
and	edi, edx
xor	edi, [esp+180h+var_168]
lea	edi, [eax+edi]
mov	ebx, [esp+180h+var_174]
mov	cl, 2
ror	ebx, cl
mov	esi, [esp+180h+var_174]
mov	cl, 0Dh
ror	esi, cl
mov	eax, [esp+180h+var_174]
mov	cl, 16h
ror	eax, cl
mov	ecx, [esp+180h+var_174]
or	ecx, [esp+180h+var_170]
and	ecx, [esp+180h+var_17C]
mov	ebp, [esp+180h+var_174]
and	ebp, [esp+180h+var_170]
or	ecx, ebp
mov	ebp, [esp+180h+var_178]
add	ebp, t0
mov	[esp+180h+var_164], ebp
xor	ebx, esi
xor	ebx, eax
lea	ebx, [t0+ebx]
add	ebx, ecx
mov	[esp+180h+var_178], ebx
mov	ebx, ebp
mov	ecx, 6
ror	ebx, cl
mov	esi, ebp
mov	cl, 0Bh
ror	esi, cl
mov	eax, ebp
mov	cl, 19h
ror	eax, cl
xor	ebx, esi
xor	ebx, eax
mov	eax, [esp+180h+var_168]
add	eax, [esp+180h+W+9Ch]
lea	eax, [eax+ebx-6D8DD37Bh]
mov	ebp, [esp+180h+var_16C]
xor	ebp, edx
and	ebp, [esp+180h+var_164]
xor	ebp, [esp+180h+var_16C]
lea	ebp, [eax+ebp]
mov	esi, [esp+180h+var_178]
mov	cl, 2
ror	esi, cl
mov	edi, [esp+180h+var_178]
mov	cl, 0Dh
ror	edi, cl
mov	ebx, [esp+180h+var_178]
mov	cl, 16h
ror	ebx, cl
mov	eax, [esp+180h+var_178]
or	eax, [esp+180h+var_174]
and	eax, [esp+180h+var_170]
mov	ecx, [esp+180h+var_178]
and	ecx, [esp+180h+var_174]
or	ecx, eax
mov	eax, [esp+180h+var_17C]
add	eax, t0
xor	esi, edi
xor	esi, ebx
lea	esi, [t0+esi+0]
add	esi, ecx
mov	[esp+180h+var_17C], esi
mov	esi, eax
mov	ecx, 6
ror	esi, cl
mov	edi, eax
mov	cl, 0Bh
ror	edi, cl
mov	ebx, eax
mov	cl, 19h
ror	ebx, cl
xor	esi, edi
xor	esi, ebx
mov	ecx, [esp+180h+var_16C]
add	ecx, [esp+180h+W+0A0h]
lea	ecx, [ecx+esi-5D40175Fh]
mov	t0, [esp+180h+var_164]
xor	ebp, edx
and	ebp, eax
xor	ebp, edx
lea	ebp, [ecx+ebp]
mov	esi, [esp+180h+var_17C]
mov	ecx, 2
ror	esi, cl
mov	edi, [esp+180h+var_17C]
mov	cl, 0Dh
ror	edi, cl
mov	ebx, [esp+180h+var_17C]
mov	cl, 16h
ror	ebx, cl
mov	ecx, [esp+180h+var_17C]
or	ecx, [esp+180h+var_178]
and	ecx, [esp+180h+var_174]
mov	[esp+180h+var_168], ecx
mov	ecx, [esp+180h+var_17C]
and	ecx, [esp+180h+var_178]
mov	[esp+180h+var_16C], ecx
mov	ecx, [esp+180h+var_168]
or	ecx, [esp+180h+var_16C]
mov	[esp+180h+var_16C], ecx
mov	ecx, [esp+180h+var_170]
add	ecx, t0
mov	[esp+180h+var_168], ecx
xor	esi, edi
xor	esi, ebx
lea	esi, [t0+esi+0]
add	esi, [esp+180h+var_16C]
mov	[esp+180h+var_170], esi
mov	esi, ecx
mov	ecx, 6
ror	esi, cl
mov	edi, [esp+180h+var_168]
mov	cl, 0Bh
ror	edi, cl
mov	ebx, [esp+180h+var_168]
mov	cl, 19h
ror	ebx, cl
xor	esi, edi
xor	esi, ebx
add	edx, [esp+180h+W+0A4h]
lea	edx, [edx+esi-57E599B5h]
mov	edi, [esp+180h+var_164]
xor	edi, eax
and	edi, [esp+180h+var_168]
xor	edi, [esp+180h+var_164]
lea	edi, [edx+edi]
mov	ebx, [esp+180h+var_170]
mov	cl, 2
ror	ebx, cl
mov	esi, [esp+180h+var_170]
mov	cl, 0Dh
ror	esi, cl
mov	edx, [esp+180h+var_170]
mov	cl, 16h
ror	edx, cl
mov	ecx, [esp+180h+var_170]
or	ecx, [esp+180h+var_17C]
and	ecx, [esp+180h+var_178]
mov	ebp, [esp+180h+var_170]
and	ebp, [esp+180h+var_17C]
or	ecx, ebp
mov	ebp, [esp+180h+var_174]
add	ebp, t0
mov	[esp+180h+var_16C], ebp
xor	ebx, esi
xor	ebx, edx
lea	ebx, [t0+ebx]
add	ebx, ecx
mov	[esp+180h+var_174], ebx
mov	ebx, ebp
mov	ecx, 6
ror	ebx, cl
mov	esi, ebp
mov	cl, 0Bh
ror	esi, cl
mov	edx, ebp
mov	cl, 19h
ror	edx, cl
xor	ebx, esi
xor	ebx, edx
mov	edx, [esp+180h+var_164]
add	edx, [esp+180h+W+0A8h]
lea	edx, [edx+ebx-3DB47490h]
mov	ebp, [esp+180h+var_168]
xor	ebp, eax
and	ebp, [esp+180h+var_16C]
xor	ebp, eax
lea	ebp, [edx+ebp]
mov	esi, [esp+180h+var_174]
mov	cl, 2
ror	esi, cl
mov	edi, [esp+180h+var_174]
mov	cl, 0Dh
ror	edi, cl
mov	ebx, [esp+180h+var_174]
mov	cl, 16h
ror	ebx, cl
mov	edx, [esp+180h+var_174]
or	edx, [esp+180h+var_170]
and	edx, [esp+180h+var_17C]
mov	ecx, [esp+180h+var_174]
and	ecx, [esp+180h+var_170]
or	ecx, edx
mov	edx, [esp+180h+var_178]
add	edx, t0
xor	esi, edi
xor	esi, ebx
lea	esi, [t0+esi+0]
add	esi, ecx
mov	[esp+180h+var_178], esi
mov	esi, edx
mov	ecx, 6
ror	esi, cl
mov	edi, edx
mov	cl, 0Bh
ror	edi, cl
mov	ebx, edx
mov	cl, 19h
ror	ebx, cl
xor	esi, edi
xor	esi, ebx
add	eax, [esp+180h+W+0ACh]
lea	eax, [eax+esi-3893AE5Dh]
mov	t0, [esp+180h+var_16C]
xor	ebp, [esp+180h+var_168]
and	ebp, edx
xor	ebp, [esp+180h+var_168]
lea	ebp, [eax+ebp]
mov	esi, [esp+180h+var_178]
mov	cl, 2
ror	esi, cl
mov	edi, [esp+180h+var_178]
mov	cl, 0Dh
ror	edi, cl
mov	ebx, [esp+180h+var_178]
mov	cl, 16h
ror	ebx, cl
mov	eax, [esp+180h+var_178]
or	eax, [esp+180h+var_174]
and	eax, [esp+180h+var_170]
mov	ecx, [esp+180h+var_178]
and	ecx, [esp+180h+var_174]
or	ecx, eax
mov	eax, [esp+180h+var_17C]
add	eax, t0
xor	esi, edi
xor	esi, ebx
lea	esi, [t0+esi+0]
add	esi, ecx
mov	[esp+180h+var_17C], esi
mov	esi, eax
mov	ecx, 6
ror	esi, cl
mov	edi, eax
mov	cl, 0Bh
ror	edi, cl
mov	ebx, eax
mov	cl, 19h
ror	ebx, cl
xor	esi, edi
xor	esi, ebx
mov	ecx, [esp+180h+var_168]
add	ecx, [esp+180h+W+0B0h]
lea	ecx, [ecx+esi-2E6D17E7h]
mov	t0, [esp+180h+var_16C]
xor	ebp, edx
and	ebp, eax
xor	ebp, [esp+180h+var_16C]
lea	ebp, [ecx+ebp]
mov	esi, [esp+180h+var_17C]
mov	ecx, 2
ror	esi, cl
mov	edi, [esp+180h+var_17C]
mov	cl, 0Dh
ror	edi, cl
mov	ebx, [esp+180h+var_17C]
mov	cl, 16h
ror	ebx, cl
mov	ecx, [esp+180h+var_17C]
or	ecx, [esp+180h+var_178]
and	ecx, [esp+180h+var_174]
mov	[esp+180h+var_164], ecx
mov	ecx, [esp+180h+var_17C]
and	ecx, [esp+180h+var_178]
mov	[esp+180h+var_168], ecx
mov	ecx, [esp+180h+var_164]
or	ecx, [esp+180h+var_168]
mov	[esp+180h+var_164], ecx
mov	ecx, [esp+180h+var_170]
add	ecx, t0
mov	[esp+180h+var_168], ecx
xor	esi, edi
xor	esi, ebx
lea	esi, [t0+esi+0]
add	esi, [esp+180h+var_164]
mov	[esp+180h+var_170], esi
mov	esi, ecx
mov	ecx, 6
ror	esi, cl
mov	edi, [esp+180h+var_168]
mov	cl, 0Bh
ror	edi, cl
mov	ebx, [esp+180h+var_168]
mov	cl, 19h
ror	ebx, cl
xor	esi, edi
xor	esi, ebx
mov	ecx, [esp+180h+var_16C]
add	ecx, [esp+180h+W+0B4h]
lea	ecx, [ecx+esi-2966F9DCh]
mov	t0, eax
xor	ebp, edx
and	ebp, [esp+180h+var_168]
xor	ebp, edx
lea	ebp, [ecx+ebp]
mov	esi, [esp+180h+var_170]
mov	ecx, 2
ror	esi, cl
mov	edi, [esp+180h+var_170]
mov	cl, 0Dh
ror	edi, cl
mov	ebx, [esp+180h+var_170]
mov	cl, 16h
ror	ebx, cl
mov	ecx, [esp+180h+var_170]
or	ecx, [esp+180h+var_17C]
and	ecx, [esp+180h+var_178]
mov	[esp+180h+var_164], ecx
mov	ecx, [esp+180h+var_170]
and	ecx, [esp+180h+var_17C]
mov	[esp+180h+var_16C], ecx
mov	ecx, [esp+180h+var_164]
or	ecx, [esp+180h+var_16C]
mov	[esp+180h+var_164], ecx
mov	ecx, [esp+180h+var_174]
add	ecx, t0
mov	[esp+180h+var_16C], ecx
xor	esi, edi
xor	esi, ebx
lea	esi, [t0+esi+0]
add	esi, [esp+180h+var_164]
mov	[esp+180h+var_174], esi
mov	esi, ecx
mov	ecx, 6
ror	esi, cl
mov	edi, [esp+180h+var_16C]
mov	cl, 0Bh
ror	edi, cl
mov	ebx, [esp+180h+var_16C]
mov	cl, 19h
ror	ebx, cl
xor	esi, edi
xor	esi, ebx
add	edx, [esp+180h+W+0B8h]
lea	edx, [edx+esi-0BF1CA7Bh]
mov	t0, [esp+180h+var_168]
xor	ebp, eax
and	ebp, [esp+180h+var_16C]
xor	ebp, eax
lea	ebp, [edx+ebp]
mov	esi, [esp+180h+var_174]
mov	cl, 2
ror	esi, cl
mov	edi, [esp+180h+var_174]
mov	cl, 0Dh
ror	edi, cl
mov	ebx, [esp+180h+var_174]
mov	cl, 16h
ror	ebx, cl
mov	edx, [esp+180h+var_174]
or	edx, [esp+180h+var_170]
and	edx, [esp+180h+var_17C]
mov	ecx, [esp+180h+var_174]
and	ecx, [esp+180h+var_170]
or	ecx, edx
mov	edx, [esp+180h+var_178]
add	edx, t0
xor	esi, edi
xor	esi, ebx
lea	esi, [t0+esi+0]
add	esi, ecx
mov	[esp+180h+var_178], esi
mov	esi, edx
mov	ecx, 6
ror	esi, cl
mov	edi, edx
mov	cl, 0Bh
ror	edi, cl
mov	ebx, edx
mov	cl, 19h
ror	ebx, cl
xor	esi, edi
xor	esi, ebx
add	eax, [esp+180h+W+0BCh]
lea	eax, [eax+esi+106AA070h]
mov	edi, [esp+180h+var_16C]
xor	edi, [esp+180h+var_168]
and	edi, edx
xor	edi, [esp+180h+var_168]
lea	edi, [eax+edi]
mov	ebx, [esp+180h+var_178]
mov	cl, 2
ror	ebx, cl
mov	esi, [esp+180h+var_178]
mov	cl, 0Dh
ror	esi, cl
mov	eax, [esp+180h+var_178]
mov	cl, 16h
ror	eax, cl
mov	ecx, [esp+180h+var_178]
or	ecx, [esp+180h+var_174]
and	ecx, [esp+180h+var_170]
mov	ebp, [esp+180h+var_178]
and	ebp, [esp+180h+var_174]
or	ecx, ebp
mov	ebp, [esp+180h+var_17C]
add	ebp, t0
mov	[esp+180h+var_164], ebp
xor	ebx, esi
xor	ebx, eax
lea	ebx, [t0+ebx]
add	ebx, ecx
mov	[esp+180h+var_17C], ebx
mov	ebx, ebp
mov	ecx, 6
ror	ebx, cl
mov	esi, ebp
mov	cl, 0Bh
ror	esi, cl
mov	eax, ebp
mov	cl, 19h
ror	eax, cl
xor	ebx, esi
xor	ebx, eax
mov	eax, [esp+180h+var_168]
add	eax, [esp+180h+W+0C0h]
lea	eax, [eax+ebx+19A4C116h]
mov	ebp, [esp+180h+var_16C]
xor	ebp, edx
and	ebp, [esp+180h+var_164]
xor	ebp, [esp+180h+var_16C]
lea	ebp, [eax+ebp]
mov	esi, [esp+180h+var_17C]
mov	cl, 2
ror	esi, cl
mov	edi, [esp+180h+var_17C]
mov	cl, 0Dh
ror	edi, cl
mov	ebx, [esp+180h+var_17C]
mov	cl, 16h
ror	ebx, cl
mov	eax, [esp+180h+var_17C]
or	eax, [esp+180h+var_178]
and	eax, [esp+180h+var_174]
mov	ecx, [esp+180h+var_17C]
and	ecx, [esp+180h+var_178]
or	ecx, eax
mov	eax, [esp+180h+var_170]
add	eax, t0
xor	esi, edi
xor	esi, ebx
lea	esi, [t0+esi+0]
add	esi, ecx
mov	[esp+180h+var_170], esi
mov	esi, eax
mov	ecx, 6
ror	esi, cl
mov	edi, eax
mov	cl, 0Bh
ror	edi, cl
mov	ebx, eax
mov	cl, 19h
ror	ebx, cl
xor	esi, edi
xor	esi, ebx
mov	ecx, [esp+180h+var_16C]
add	ecx, [esp+180h+W+0C4h]
lea	ecx, [ecx+esi+1E376C08h]
mov	t0, [esp+180h+var_164]
xor	ebp, edx
and	ebp, eax
xor	ebp, edx
lea	ebp, [ecx+ebp]
mov	esi, [esp+180h+var_170]
mov	ecx, 2
ror	esi, cl
mov	edi, [esp+180h+var_170]
mov	cl, 0Dh
ror	edi, cl
mov	ebx, [esp+180h+var_170]
mov	cl, 16h
ror	ebx, cl
mov	ecx, [esp+180h+var_170]
or	ecx, [esp+180h+var_17C]
and	ecx, [esp+180h+var_178]
mov	[esp+180h+var_168], ecx
mov	ecx, [esp+180h+var_170]
and	ecx, [esp+180h+var_17C]
mov	[esp+180h+var_16C], ecx
mov	ecx, [esp+180h+var_168]
or	ecx, [esp+180h+var_16C]
mov	[esp+180h+var_16C], ecx
mov	ecx, [esp+180h+var_174]
add	ecx, t0
mov	[esp+180h+var_168], ecx
xor	esi, edi
xor	esi, ebx
lea	esi, [t0+esi+0]
add	esi, [esp+180h+var_16C]
mov	[esp+180h+var_174], esi
mov	esi, ecx
mov	ecx, 6
ror	esi, cl
mov	edi, [esp+180h+var_168]
mov	cl, 0Bh
ror	edi, cl
mov	ebx, [esp+180h+var_168]
mov	cl, 19h
ror	ebx, cl
xor	esi, edi
xor	esi, ebx
add	edx, [esp+180h+W+0C8h]
lea	edx, [edx+esi+2748774Ch]
mov	edi, [esp+180h+var_164]
xor	edi, eax
and	edi, [esp+180h+var_168]
xor	edi, [esp+180h+var_164]
lea	edi, [edx+edi]
mov	ebx, [esp+180h+var_174]
mov	cl, 2
ror	ebx, cl
mov	esi, [esp+180h+var_174]
mov	cl, 0Dh
ror	esi, cl
mov	edx, [esp+180h+var_174]
mov	cl, 16h
ror	edx, cl
mov	ecx, [esp+180h+var_174]
or	ecx, [esp+180h+var_170]
and	ecx, [esp+180h+var_17C]
mov	ebp, [esp+180h+var_174]
and	ebp, [esp+180h+var_170]
or	ecx, ebp
mov	ebp, [esp+180h+var_178]
add	ebp, t0
mov	[esp+180h+var_16C], ebp
xor	ebx, esi
xor	ebx, edx
lea	ebx, [t0+ebx]
add	ebx, ecx
mov	[esp+180h+var_178], ebx
mov	ebx, ebp
mov	ecx, 6
ror	ebx, cl
mov	esi, ebp
mov	cl, 0Bh
ror	esi, cl
mov	edx, ebp
mov	cl, 19h
ror	edx, cl
xor	ebx, esi
xor	ebx, edx
mov	edx, [esp+180h+var_164]
add	edx, [esp+180h+W+0CCh]
lea	edx, [edx+ebx+34B0BCB5h]
mov	ebp, [esp+180h+var_168]
xor	ebp, eax
and	ebp, [esp+180h+var_16C]
xor	ebp, eax
lea	ebp, [edx+ebp]
mov	esi, [esp+180h+var_178]
mov	cl, 2
ror	esi, cl
mov	edi, [esp+180h+var_178]
mov	cl, 0Dh
ror	edi, cl
mov	ebx, [esp+180h+var_178]
mov	cl, 16h
ror	ebx, cl
mov	edx, [esp+180h+var_178]
or	edx, [esp+180h+var_174]
and	edx, [esp+180h+var_170]
mov	ecx, [esp+180h+var_178]
and	ecx, [esp+180h+var_174]
or	ecx, edx
mov	edx, [esp+180h+var_17C]
add	edx, t0
xor	esi, edi
xor	esi, ebx
lea	esi, [t0+esi+0]
add	esi, ecx
mov	[esp+180h+var_17C], esi
mov	esi, edx
mov	ecx, 6
ror	esi, cl
mov	edi, edx
mov	cl, 0Bh
ror	edi, cl
mov	ebx, edx
mov	cl, 19h
ror	ebx, cl
xor	esi, edi
xor	esi, ebx
add	eax, [esp+180h+W+0D0h]
lea	eax, [eax+esi+391C0CB3h]
mov	t0, [esp+180h+var_16C]
xor	ebp, [esp+180h+var_168]
and	ebp, edx
xor	ebp, [esp+180h+var_168]
lea	ebp, [eax+ebp]
mov	esi, [esp+180h+var_17C]
mov	cl, 2
ror	esi, cl
mov	edi, [esp+180h+var_17C]
mov	cl, 0Dh
ror	edi, cl
mov	ebx, [esp+180h+var_17C]
mov	cl, 16h
ror	ebx, cl
mov	eax, [esp+180h+var_17C]
or	eax, [esp+180h+var_178]
and	eax, [esp+180h+var_174]
mov	ecx, [esp+180h+var_17C]
and	ecx, [esp+180h+var_178]
or	ecx, eax
mov	eax, [esp+180h+var_170]
add	eax, t0
xor	esi, edi
xor	esi, ebx
lea	esi, [t0+esi+0]
add	esi, ecx
mov	[esp+180h+var_170], esi
mov	esi, eax
mov	ecx, 6
ror	esi, cl
mov	edi, eax
mov	cl, 0Bh
ror	edi, cl
mov	ebx, eax
mov	cl, 19h
ror	ebx, cl
xor	esi, edi
xor	esi, ebx
mov	ecx, [esp+180h+var_168]
add	ecx, [esp+180h+W+0D4h]
lea	ecx, [ecx+esi+4ED8AA4Ah]
mov	t0, [esp+180h+var_16C]
xor	ebp, edx
and	ebp, eax
xor	ebp, [esp+180h+var_16C]
lea	ebp, [ecx+ebp]
mov	esi, [esp+180h+var_170]
mov	ecx, 2
ror	esi, cl
mov	edi, [esp+180h+var_170]
mov	cl, 0Dh
ror	edi, cl
mov	ebx, [esp+180h+var_170]
mov	cl, 16h
ror	ebx, cl
mov	ecx, [esp+180h+var_170]
or	ecx, [esp+180h+var_17C]
and	ecx, [esp+180h+var_178]
mov	[esp+180h+var_164], ecx
mov	ecx, [esp+180h+var_170]
and	ecx, [esp+180h+var_17C]
mov	[esp+180h+var_168], ecx
mov	ecx, [esp+180h+var_164]
or	ecx, [esp+180h+var_168]
mov	[esp+180h+var_164], ecx
mov	ecx, [esp+180h+var_174]
add	ecx, t0
mov	[esp+180h+var_168], ecx
xor	esi, edi
xor	esi, ebx
lea	esi, [t0+esi+0]
add	esi, [esp+180h+var_164]
mov	[esp+180h+var_174], esi
mov	esi, ecx
mov	ecx, 6
ror	esi, cl
mov	edi, [esp+180h+var_168]
mov	cl, 0Bh
ror	edi, cl
mov	ebx, [esp+180h+var_168]
mov	cl, 19h
ror	ebx, cl
xor	esi, edi
xor	esi, ebx
mov	ecx, [esp+180h+var_16C]
add	ecx, [esp+180h+W+0D8h]
lea	ecx, [ecx+esi+5B9CCA4Fh]
mov	t0, eax
xor	ebp, edx
and	ebp, [esp+180h+var_168]
xor	ebp, edx
lea	ebp, [ecx+ebp]
mov	esi, [esp+180h+var_174]
mov	ecx, 2
ror	esi, cl
mov	edi, [esp+180h+var_174]
mov	cl, 0Dh
ror	edi, cl
mov	ebx, [esp+180h+var_174]
mov	cl, 16h
ror	ebx, cl
mov	ecx, [esp+180h+var_174]
or	ecx, [esp+180h+var_170]
and	ecx, [esp+180h+var_17C]
mov	[esp+180h+var_164], ecx
mov	ecx, [esp+180h+var_174]
and	ecx, [esp+180h+var_170]
mov	[esp+180h+var_16C], ecx
mov	ecx, [esp+180h+var_164]
or	ecx, [esp+180h+var_16C]
mov	[esp+180h+var_164], ecx
mov	ecx, [esp+180h+var_178]
add	ecx, t0
mov	[esp+180h+var_16C], ecx
xor	esi, edi
xor	esi, ebx
lea	esi, [t0+esi+0]
add	esi, [esp+180h+var_164]
mov	[esp+180h+var_178], esi
mov	esi, ecx
mov	ecx, 6
ror	esi, cl
mov	edi, [esp+180h+var_16C]
mov	cl, 0Bh
ror	edi, cl
mov	ebx, [esp+180h+var_16C]
mov	cl, 19h
ror	ebx, cl
xor	esi, edi
xor	esi, ebx
add	edx, [esp+180h+W+0DCh]
lea	edx, [edx+esi+682E6FF3h]
mov	t0, [esp+180h+var_168]
xor	ebp, eax
and	ebp, [esp+180h+var_16C]
xor	ebp, eax
lea	ebp, [edx+ebp]
mov	esi, [esp+180h+var_178]
mov	cl, 2
ror	esi, cl
mov	edi, [esp+180h+var_178]
mov	cl, 0Dh
ror	edi, cl
mov	ebx, [esp+180h+var_178]
mov	cl, 16h
ror	ebx, cl
mov	edx, [esp+180h+var_178]
or	edx, [esp+180h+var_174]
and	edx, [esp+180h+var_170]
mov	ecx, [esp+180h+var_178]
and	ecx, [esp+180h+var_174]
or	ecx, edx
mov	edx, [esp+180h+var_17C]
add	edx, t0
xor	esi, edi
xor	esi, ebx
lea	esi, [t0+esi+0]
add	esi, ecx
mov	[esp+180h+var_17C], esi
mov	esi, edx
mov	ecx, 6
ror	esi, cl
mov	edi, edx
mov	cl, 0Bh
ror	edi, cl
mov	ebx, edx
mov	cl, 19h
ror	ebx, cl
xor	esi, edi
xor	esi, ebx
add	eax, [esp+180h+W+0E0h]
lea	eax, [eax+esi+748F82EEh]
mov	edi, [esp+180h+var_16C]
xor	edi, [esp+180h+var_168]
and	edi, edx
xor	edi, [esp+180h+var_168]
lea	edi, [eax+edi]
mov	ebx, [esp+180h+var_17C]
mov	cl, 2
ror	ebx, cl
mov	esi, [esp+180h+var_17C]
mov	cl, 0Dh
ror	esi, cl
mov	eax, [esp+180h+var_17C]
mov	cl, 16h
ror	eax, cl
mov	ecx, [esp+180h+var_17C]
or	ecx, [esp+180h+var_178]
and	ecx, [esp+180h+var_174]
mov	ebp, [esp+180h+var_17C]
and	ebp, [esp+180h+var_178]
or	ecx, ebp
mov	ebp, [esp+180h+var_170]
add	ebp, t0
mov	[esp+180h+var_164], ebp
xor	ebx, esi
xor	ebx, eax
lea	ebx, [t0+ebx]
add	ebx, ecx
mov	[esp+180h+var_170], ebx
mov	ebx, ebp
mov	ecx, 6
ror	ebx, cl
mov	esi, ebp
mov	cl, 0Bh
ror	esi, cl
mov	eax, ebp
mov	cl, 19h
ror	eax, cl
xor	ebx, esi
xor	ebx, eax
mov	eax, [esp+180h+var_168]
add	eax, [esp+180h+W+0E4h]
lea	eax, [eax+ebx+78A5636Fh]
mov	ebp, [esp+180h+var_16C]
xor	ebp, edx
and	ebp, [esp+180h+var_164]
xor	ebp, [esp+180h+var_16C]
lea	ebp, [eax+ebp]
mov	esi, [esp+180h+var_170]
mov	cl, 2
ror	esi, cl
mov	edi, [esp+180h+var_170]
mov	cl, 0Dh
ror	edi, cl
mov	eax, [esp+180h+var_170]
mov	cl, 16h
ror	eax, cl
mov	ecx, [esp+180h+var_170]
or	ecx, [esp+180h+var_17C]
and	ecx, [esp+180h+var_178]
mov	ebx, [esp+180h+var_170]
and	ebx, [esp+180h+var_17C]
or	ecx, ebx
mov	ebx, [esp+180h+var_174]
add	ebx, t0
xor	esi, edi
xor	esi, eax
lea	esi, [t0+esi+0]
add	esi, ecx
mov	[esp+180h+var_174], esi
mov	esi, ebx
mov	ecx, 6
ror	esi, cl
mov	edi, ebx
mov	cl, 0Bh
ror	edi, cl
mov	eax, ebx
mov	cl, 19h
ror	eax, cl
xor	esi, edi
xor	esi, eax
mov	eax, [esp+180h+var_16C]
add	eax, [esp+180h+W+0E8h]
lea	eax, [eax+esi-7B3787ECh]
mov	t0, [esp+180h+var_164]
xor	ebp, edx
and	ebp, ebx
xor	ebp, edx
lea	ebp, [eax+ebp]
mov	esi, [esp+180h+var_174]
mov	cl, 2
ror	esi, cl
mov	edi, [esp+180h+var_174]
mov	cl, 0Dh
ror	edi, cl
mov	eax, [esp+180h+var_174]
mov	cl, 16h
ror	eax, cl
mov	ecx, [esp+180h+var_174]
or	ecx, [esp+180h+var_170]
and	ecx, [esp+180h+var_17C]
mov	[esp+180h+var_168], ecx
mov	ecx, [esp+180h+var_174]
and	ecx, [esp+180h+var_170]
mov	[esp+180h+var_16C], ecx
mov	ecx, [esp+180h+var_168]
or	ecx, [esp+180h+var_16C]
mov	[esp+180h+var_16C], ecx
mov	ecx, [esp+180h+var_178]
add	ecx, t0
mov	[esp+180h+var_168], ecx
xor	esi, edi
xor	esi, eax
lea	esi, [t0+esi+0]
add	esi, [esp+180h+var_16C]
mov	[esp+180h+var_178], esi
mov	esi, ecx
mov	ecx, 6
ror	esi, cl
mov	edi, [esp+180h+var_168]
mov	cl, 0Bh
ror	edi, cl
mov	eax, [esp+180h+var_168]
mov	cl, 19h
ror	eax, cl
xor	esi, edi
xor	esi, eax
add	edx, [esp+180h+W+0ECh]
lea	eax, [edx+esi-7338FDF8h]
mov	edi, [esp+180h+var_164]
xor	edi, ebx
and	edi, [esp+180h+var_168]
xor	edi, [esp+180h+var_164]
lea	edi, [eax+edi]
mov	edx, [esp+180h+var_178]
mov	cl, 2
ror	edx, cl
mov	esi, [esp+180h+var_178]
mov	cl, 0Dh
ror	esi, cl
mov	eax, [esp+180h+var_178]
mov	cl, 16h
ror	eax, cl
mov	ecx, [esp+180h+var_178]
or	ecx, [esp+180h+var_174]
and	ecx, [esp+180h+var_170]
mov	ebp, [esp+180h+var_178]
and	ebp, [esp+180h+var_174]
or	ecx, ebp
mov	ebp, [esp+180h+var_17C]
add	ebp, t0
mov	[esp+180h+var_16C], ebp
xor	edx, esi
xor	edx, eax
lea	edx, [t0+edx]
add	edx, ecx
mov	[esp+180h+var_17C], edx
mov	edx, ebp
mov	ecx, 6
ror	edx, cl
mov	esi, ebp
mov	cl, 0Bh
ror	esi, cl
mov	eax, ebp
mov	cl, 19h
ror	eax, cl
xor	edx, esi
xor	edx, eax
mov	eax, [esp+180h+var_164]
add	eax, [esp+180h+W+0F0h]
lea	eax, [eax+edx-6F410006h]
mov	ebp, [esp+180h+var_168]
xor	ebp, ebx
and	ebp, [esp+180h+var_16C]
xor	ebp, ebx
lea	ebp, [eax+ebp]
mov	esi, [esp+180h+var_17C]
mov	cl, 2
ror	esi, cl
mov	edi, [esp+180h+var_17C]
mov	cl, 0Dh
ror	edi, cl
mov	edx, [esp+180h+var_17C]
mov	cl, 16h
ror	edx, cl
mov	eax, [esp+180h+var_17C]
or	eax, [esp+180h+var_178]
and	eax, [esp+180h+var_174]
mov	ecx, [esp+180h+var_17C]
and	ecx, [esp+180h+var_178]
or	eax, ecx
mov	ecx, [esp+180h+var_170]
add	ecx, t0
mov	[esp+180h+var_170], ecx
xor	esi, edi
xor	esi, edx
lea	esi, [t0+esi+0]
lea	eax, [esi+eax]
mov	esi, ecx
mov	ecx, 6
ror	esi, cl
mov	edi, [esp+180h+var_170]
mov	cl, 0Bh
ror	edi, cl
mov	edx, [esp+180h+var_170]
mov	cl, 19h
ror	edx, cl
xor	esi, edi
xor	esi, edx
add	ebx, [esp+180h+W+0F4h]
lea	edx, [ebx+esi-5BAF9315h]
mov	t0, [esp+180h+var_16C]
xor	ebp, [esp+180h+var_168]
and	ebp, [esp+180h+var_170]
xor	ebp, [esp+180h+var_168]
lea	ebp, [edx+ebp]
mov	esi, eax
mov	cl, 2
ror	esi, cl
mov	edi, eax
mov	cl, 0Dh
ror	edi, cl
mov	ebx, eax
mov	cl, 16h
ror	ebx, cl
mov	edx, [esp+180h+var_17C]
or	edx, eax
and	edx, [esp+180h+var_178]
mov	ecx, [esp+180h+var_17C]
and	ecx, eax
or	edx, ecx
mov	ecx, [esp+180h+var_174]
add	ecx, t0
mov	[esp+180h+var_174], ecx
xor	esi, edi
xor	esi, ebx
lea	esi, [t0+esi+0]
lea	edx, [esi+edx]
mov	esi, ecx
mov	ecx, 6
ror	esi, cl
mov	edi, [esp+180h+var_174]
mov	cl, 0Bh
ror	edi, cl
mov	ebx, [esp+180h+var_174]
mov	cl, 19h
ror	ebx, cl
mov	ecx, [esp+180h+var_140]
mov	t0, [esp+180h+var_13C]
lea	ebp, [ecx+ebp-41065C09h]
xor	esi, edi
xor	esi, ebx
mov	ecx, ebp
add	ecx, esi
add	ecx, [esp+180h+var_168]
mov	ebp, [esp+180h+var_170]
xor	ebp, [esp+180h+var_16C]
and	ebp, [esp+180h+var_174]
xor	ebp, [esp+180h+var_16C]
lea	ebp, [ecx+ebp]
mov	esi, edx
mov	ecx, 2
ror	esi, cl
mov	edi, edx
mov	cl, 0Dh
ror	edi, cl
mov	ebx, edx
mov	cl, 16h
ror	ebx, cl
mov	ecx, edx
or	ecx, eax
and	ecx, [esp+180h+var_17C]
mov	[esp+180h+var_164], ecx
mov	ecx, edx
and	ecx, eax
mov	[esp+180h+var_168], ecx
mov	ecx, [esp+180h+var_164]
or	ecx, [esp+180h+var_168]
mov	[esp+180h+var_168], ecx
mov	ecx, [esp+180h+var_178]
add	ecx, t0
mov	[esp+180h+var_178], ecx
xor	esi, edi
xor	esi, ebx
add	t0, esi
add	ebp, [esp+180h+var_168]
mov	ebx, ecx
mov	ecx, 6
ror	ebx, cl
mov	[esp+180h+var_168], ebx
mov	edi, [esp+180h+var_178]
mov	cl, 0Bh
ror	edi, cl
mov	ebx, [esp+180h+var_178]
mov	cl, 19h
ror	ebx, cl
mov	ecx, [esp+180h+var_138]
mov	esi, [esp+180h+var_134]
lea	esi, [ecx+esi-398E870Eh]
mov	[esp+180h+var_164], esi
mov	esi, [esp+180h+var_168]
xor	esi, edi
xor	esi, ebx
mov	ecx, [esp+180h+var_164]
add	ecx, esi
add	ecx, [esp+180h+var_16C]
mov	ebx, [esp+180h+var_174]
xor	ebx, [esp+180h+var_170]
and	ebx, [esp+180h+var_178]
xor	ebx, [esp+180h+var_170]
lea	ebx, [ecx+ebx]
mov	[esp+180h+var_168], ebx
mov	esi, ebp
mov	ecx, 2
ror	esi, cl
mov	edi, ebp
mov	cl, 0Dh
ror	edi, cl
mov	ebx, ebp
mov	cl, 16h
ror	ebx, cl
mov	ecx, ebp
or	ecx, edx
and	ecx, eax
mov	[esp+180h+var_164], ecx
mov	ecx, ebp
and	ecx, edx
mov	[esp+180h+var_16C], ecx
mov	ecx, [esp+180h+var_164]
or	ecx, [esp+180h+var_16C]
mov	[esp+180h+var_16C], ecx
mov	ecx, [esp+180h+var_17C]
add	ecx, [esp+180h+var_168]
xor	esi, edi
xor	esi, ebx
mov	ebx, [esp+180h+var_168]
add	ebx, esi
add	ebx, [esp+180h+var_16C]
add	ebx, [esp+180h+var_148]
mov	esi, [esp+180h+state]
mov	[esi], ebx
mov	ebx, [esp+180h+var_14C]
add	[ebx], ebp
mov	esi, [esp+180h+var_150]
add	[esi], edx
mov	ebp, [esp+180h+var_154]
add	[ebp+0], eax
mov	eax, [esp+180h+var_158]
add	[eax], ecx
mov	ecx, [esp+180h+var_178]
mov	edx, [esp+180h+var_15C]
add	[edx], ecx
mov	esi, [esp+180h+var_174]
mov	ebx, [esp+180h+var_160]
add	[ebx], esi
mov	eax, [esp+180h+var_170]
mov	ebp, [esp+180h+var_144]
add	[ebp+0], eax
mov	eax, 1
add	esp, 170h
pop	ebx
pop	esi
pop	edi
pop	ebp
retn
public _silc_sha256_transform
jmp	_sha256_compress
align 4
public _sha256_init
mov	eax, [esp+md]
mov	dword ptr [eax], 0
mov	dword ptr [eax+4], 0
mov	dword ptr [eax+28h], 0
mov	dword ptr [eax+8], 6A09E667h
mov	dword ptr [eax+0Ch], 0BB67AE85h
mov	dword ptr [eax+10h], 3C6EF372h
mov	dword ptr [eax+14h], 0A54FF53Ah
mov	dword ptr [eax+18h], 510E527Fh
mov	dword ptr [eax+1Ch], 9B05688Ch
mov	dword ptr [eax+20h], 1F83D9ABh
mov	dword ptr [eax+24h], 5BE0CD19h
mov	eax, 1
retn
align 4
public _sha256_done
push	ebp
push	edi
push	esi
push	ebx
sub	esp, 10h
mov	ebx, [esp+20h+md]
mov	esi, [esp+20h+out]
mov	edi, [ebx+28h]
cmp	edi, 3Fh
ja	loc_641F1594
lea	edx, ds:0[edi*8]
xor	ecx, ecx
add	edx, [md_0]
adc	ecx, [md_0+4]
mov	[md_0],	edx
mov	[md_0+4], ecx
mov	byte ptr [md_0+edi+2Ch], 80h
lea	eax, [edi+1]
mov	[md_0+28h], eax
cmp	eax, 38h
ja	loc_641F14DC
jz	loc_641F15A9
lea	ebp, [md_0+2Ch]
lea	edi, [md_0+8]
lea	edx, [md_0+eax+2Ch]
xchg	ax, ax
mov	byte ptr [edx],	0
inc	eax
inc	edx
cmp	eax, 37h
jbe	short loc_641F1390
mov	[md_0+28h], eax
mov	ecx, [md_0+4]
mov	eax, ecx
shr	eax, 18h
mov	[md_0+64h], al
mov	eax, [md_0+4]
mov	edx, eax
shr	edx, 10h
mov	[md_0+65h], dl
mov	edx, eax
shr	edx, 8
mov	[md_0+66h], dl
mov	[md_0+67h], al
mov	eax, [md_0]
mov	edx, eax
shr	edx, 18h
mov	[md_0+68h], dl
mov	edx, eax
shr	edx, 10h
mov	[md_0+69h], dl
mov	edx, eax
shr	edx, 8
mov	[md_0+6Ah], dl
mov	[md_0+6Bh], al
mov	[esp+20h+buf], ebp 
mov	[esp+20h+state], edi 
call	_sha256_compress
movzx	eax, byte ptr [md_0+0Bh]
mov	[out_0], al
movzx	eax, word ptr [md_0+0Ah]
mov	[out_0+1], al
mov	eax, [md_0+8]
shr	eax, 8
mov	[out_0+2], al
mov	eax, [md_0+8]
mov	[out_0+3], al
movzx	eax, byte ptr [md_0+0Fh]
mov	[out_0+4], al
movzx	eax, word ptr [md_0+0Eh]
mov	[out_0+5], al
mov	eax, [md_0+0Ch]
shr	eax, 8
mov	[out_0+6], al
mov	eax, [md_0+0Ch]
mov	[out_0+7], al
movzx	eax, byte ptr [md_0+13h]
mov	[out_0+8], al
movzx	eax, word ptr [md_0+12h]
mov	[out_0+9], al
mov	eax, [md_0+10h]
shr	eax, 8
mov	[out_0+0Ah], al
mov	eax, [md_0+10h]
mov	[out_0+0Bh], al
movzx	eax, byte ptr [md_0+17h]
mov	[out_0+0Ch], al
movzx	eax, word ptr [md_0+16h]
mov	[out_0+0Dh], al
mov	eax, [md_0+14h]
shr	eax, 8
mov	[out_0+0Eh], al
mov	eax, [md_0+14h]
mov	[out_0+0Fh], al
movzx	eax, byte ptr [md_0+1Bh]
mov	[out_0+10h], al
movzx	eax, word ptr [md_0+1Ah]
mov	[out_0+11h], al
mov	eax, [md_0+18h]
shr	eax, 8
mov	[out_0+12h], al
mov	eax, [md_0+18h]
mov	[out_0+13h], al
movzx	eax, byte ptr [md_0+1Fh]
mov	[out_0+14h], al
movzx	eax, word ptr [md_0+1Eh]
mov	[out_0+15h], al
mov	eax, [md_0+1Ch]
shr	eax, 8
mov	[out_0+16h], al
mov	eax, [md_0+1Ch]
mov	[out_0+17h], al
movzx	eax, byte ptr [md_0+23h]
mov	[out_0+18h], al
movzx	eax, word ptr [md_0+22h]
mov	[out_0+19h], al
mov	eax, [md_0+20h]
shr	eax, 8
mov	[out_0+1Ah], al
mov	eax, [md_0+20h]
mov	[out_0+1Bh], al
movzx	eax, byte ptr [md_0+27h]
mov	[out_0+1Ch], al
movzx	eax, word ptr [md_0+26h]
mov	[out_0+1Dh], al
mov	eax, [md_0+24h]
shr	eax, 8
mov	[out_0+1Eh], al
mov	eax, [md_0+24h]
mov	[out_0+1Fh], al
mov	eax, 1
add	esp, 10h
pop	md_0
pop	out_0
pop	edi
pop	ebp
retn
align 4
cmp	eax, 3Fh
ja	loc_641F1571
mov	edx, 3Fh
sub	edx, edi
mov	[esp+20h+var_18], edx
lea	edx, [edi+2Dh]
mov	[esp+20h+var_14], edx
lea	ebp, [md_0+edx]
neg	ebp
and	ebp, 3
cmp	ebp, [esp+20h+var_18]
ja	loc_641F15A0
test	ebp, ebp
jz	short loc_641F1524
lea	ecx, [md_0+eax+2Ch]
xor	edx, edx
nop
mov	byte ptr [ecx],	0
inc	eax
inc	edx
inc	ecx
cmp	ebp, edx
ja	short loc_641F1514
cmp	[esp+20h+var_18], ebp
jz	short loc_641F156A
neg	edi
add	edi, 3Fh
sub	edi, ebp
mov	edx, edi
shr	edx, 2
mov	ecx, edx
shl	ecx, 2
mov	[esp+20h+var_18], ecx
jz	short loc_641F155B
add	ebp, [esp+20h+var_14]
lea	ebp, [md_0+ebp]
xor	ecx, ecx
mov	dword ptr [ebp+ecx*4+0], 0
inc	ecx
cmp	edx, ecx
ja	short loc_641F1544
add	eax, [esp+20h+var_18]
cmp	edi, [esp+20h+var_18]
jz	short loc_641F156A
lea	edx, [md_0+eax+2Ch]
nop
mov	byte ptr [edx],	0
inc	eax
inc	edx
cmp	eax, 3Fh
jbe	short loc_641F1560
			
mov	dword ptr [md_0+28h], 40h
lea	ebp, [md_0+2Ch]
mov	[esp+20h+buf], ebp 
lea	edi, [md_0+8]
mov	[esp+20h+state], edi 
call	_sha256_compress
mov	dword ptr [md_0+28h], 0
xor	eax, eax
jmp	loc_641F138A
align 4
xor	eax, eax
add	esp, 10h
pop	md_0
pop	out_0
pop	edi
pop	ebp
retn
align 10h
mov	ebp, [esp+20h+var_18]
jmp	loc_641F1509
lea	ebp, [md_0+2Ch]
lea	edi, [md_0+8]
jmp	loc_641F13A0
public _silc_sha256_final
jmp	_sha256_done
align 4
public _sha256_process
push	ebp
push	edi
push	esi
push	ebx
sub	esp, 10h
mov	ebx, [esp+20h+md]
mov	esi, [esp+20h+in]
mov	ebp, [esp+20h+inlen]
mov	eax, [ebx+28h]
cmp	eax, 40h
ja	loc_641F168C
test	inlen_0, inlen_0
jz	short loc_641F1650
lea	edx, [md_0+8]
mov	[esp+20h+var_14], edx
lea	edx, [md_0+2Ch]
mov	[esp+20h+var_18], edx
jmp	short loc_641F161D
align 10h
			
mov	n, 40h
sub	n, eax
cmp	n, inlen_0
jbe	short loc_641F15FD
mov	n, inlen_0
add	eax, [esp+20h+var_18]
mov	edi, eax
mov	ecx, n
rep movsb
mov	eax, [md_0+28h]
add	eax, edx
mov	[md_0+28h], eax
sub	inlen_0, edx
cmp	eax, 40h
jz	short loc_641F1660
test	inlen_0, inlen_0
jz	short loc_641F1650
mov	err, [md_0+28h]
test	eax, eax
jnz	short loc_641F15F0
cmp	inlen_0, 3Fh
jbe	short loc_641F15F0
mov	[esp+20h+buf], in_0 
mov	eax, [esp+20h+var_14]
mov	[esp+20h+state], eax 
call	_sha256_compress
cmp	eax, 1
jnz	short loc_641F1655
add	dword ptr [md_0], 200h
adc	dword ptr [md_0+4], 0
add	in_0, 40h
sub	inlen_0, 40h
test	inlen_0, inlen_0
jnz	short loc_641F161A
nop
			
mov	err, 1
			
add	esp, 10h
pop	md_0
pop	in_0
pop	edi
pop	inlen_0
retn
align 10h
mov	n, [esp+20h+var_18]
mov	[esp+20h+buf], edx 
mov	eax, [esp+20h+var_14]
mov	[esp+20h+state], eax 
call	_sha256_compress
cmp	eax, 1
jnz	short loc_641F1655
add	dword ptr [md_0], 200h
adc	dword ptr [md_0+4], 0
mov	dword ptr [md_0+28h], 0
jmp	short loc_641F1616
xor	eax, eax
add	esp, 10h
pop	md_0
pop	in_0
pop	edi
pop	inlen_0
retn
align 4
public _silc_sha256_update
push	ebp
push	edi
push	esi
push	ebx
sub	esp, 10h
mov	ebx, [esp+20h+context]
mov	esi, [esp+20h+data]
mov	ebp, [esp+20h+len]
mov	eax, [ebx+28h]
cmp	eax, 40h
ja	short loc_641F1728
test	len_0, len_0
jz	short loc_641F1728
lea	edx, [context_0+8]
mov	[esp+20h+var_14], edx
lea	edx, [context_0+2Ch]
mov	[esp+20h+var_18], edx
jmp	short loc_641F16F5
align 4
			
mov	edx, 40h
sub	edx, eax
cmp	edx, len_0
jbe	short loc_641F16D5
mov	edx, len_0
add	eax, [esp+20h+var_18]
mov	edi, eax
mov	ecx, edx
rep movsb
mov	eax, [context_0+28h]
add	eax, edx
mov	[context_0+28h], eax
sub	len_0, edx
cmp	eax, 40h
jz	short loc_641F1730
test	len_0, len_0
jz	short loc_641F1728
mov	eax, [context_0+28h]
test	eax, eax
jnz	short loc_641F16C8
cmp	len_0, 3Fh
jbe	short loc_641F16C8
mov	[esp+20h+buf], data_0 
mov	eax, [esp+20h+var_14]
mov	[esp+20h+state], eax 
call	_sha256_compress
dec	eax
jnz	short loc_641F1728
add	dword ptr [context_0], 200h
adc	dword ptr [context_0+4], 0
add	data_0,	40h
sub	len_0, 40h
test	len_0, len_0
jnz	short loc_641F16F2
lea	data_0,	[data_0+0]
			
add	esp, 10h
pop	context_0
pop	data_0
pop	edi
pop	len_0
retn
mov	edx, [esp+20h+var_18]
mov	[esp+20h+buf], edx 
mov	eax, [esp+20h+var_14]
mov	[esp+20h+state], eax 
call	_sha256_compress
dec	eax
jnz	short loc_641F1728
add	dword ptr [context_0], 200h
adc	dword ptr [context_0+4], 0
mov	dword ptr [context_0+28h], 0
jmp	short loc_641F16EE
align 4
public _silc_cipher_encrypt
			
push	edi
push	esi
push	ebx
mov	eax, [esp+0Ch+cipher]
mov	ebx, [esp+0Ch+src]
mov	esi, [esp+0Ch+dst]
mov	edi, [esp+0Ch+len]
mov	edx, [esp+0Ch+iv]
mov	ecx, [eax]
mov	ecx, [ecx+0Ch]
test	edx, edx
jz	short loc_641F1798
mov	[esp+0Ch+iv], iv_0
mov	[esp+0Ch+len], len_0
mov	[esp+0Ch+dst], dst_0
mov	[esp+0Ch+src], src_0
mov	cipher_0, [cipher_0+4]
mov	[esp+0Ch+cipher], eax
pop	src_0
pop	dst_0
pop	len_0
jmp	ecx
lea	iv_0, [cipher_0+8]
jmp	short loc_641F177C
align 10h
public _silc_cipher_decrypt
			
push	edi
push	esi
push	ebx
mov	eax, [esp+0Ch+cipher]
mov	ebx, [esp+0Ch+src]
mov	esi, [esp+0Ch+dst]
mov	edi, [esp+0Ch+len]
mov	edx, [esp+0Ch+iv]
mov	ecx, [eax]
mov	ecx, [ecx+10h]
test	edx, edx
jz	short loc_641F17DC
mov	[esp+0Ch+iv], iv_0
mov	[esp+0Ch+len], len_0
mov	[esp+0Ch+dst], dst_0
mov	[esp+0Ch+src], src_0
mov	cipher_0, [cipher_0+4]
mov	[esp+0Ch+cipher], eax
pop	src_0
pop	dst_0
pop	len_0
jmp	ecx
lea	iv_0, [cipher_0+8]
jmp	short loc_641F17C0
align 4
public _silc_cipher_set_key
			
sub	esp, 0Ch
mov	eax, [esp+0Ch+cipher]
mov	edx, [eax]
movzx	ecx, byte ptr [esp+0Ch+encryption]
mov	[esp+0Ch+encryption], encryption_0
mov	eax, [eax+4]
mov	[esp+0Ch+cipher], eax
mov	eax, [edx+4]
add	esp, 0Ch
jmp	eax
align 4
public _silc_cipher_get_iv
			
mov	eax, [esp+cipher]
add	eax, 8
retn
public _silc_cipher_get_key_len
			
mov	eax, [esp+cipher]
mov	eax, [eax]
mov	eax, [eax+18h]
and	eax, 3FFh
retn
align 10h
public _silc_cipher_get_block_len
			
mov	eax, [esp+cipher]
mov	eax, [eax]
mov	eax, [eax+18h]
shr	eax, 0Ah
movzx	eax, al
retn
public _silc_cipher_get_iv_len
mov	eax, [esp+cipher]
mov	eax, [eax]
mov	ax, [eax+1Ah]
shr	ax, 2
movzx	eax, al
retn
align 4
public _silc_cipher_get_name
			
mov	eax, [esp+cipher]
mov	eax, [eax]
mov	eax, [eax]
retn
align 10h
public _silc_cipher_get_mode
			
mov	eax, [esp+cipher]
mov	eax, [eax]
mov	al, [eax+1Bh]
shr	al, 2
movzx	eax, al
retn
public _silc_cipher_set_iv
			
push	esi
push	ebx
sub	esp, 14h
mov	ebx, [esp+1Ch+cipher]
mov	esi, [esp+1Ch+iv]
test	esi, esi
jz	short loc_641F1891
mov	eax, [cipher_0]
mov	ax, [eax+1Ah]
shr	ax, 2
movzx	eax, al
mov	[esp+1Ch+var_14], eax 
mov	[esp+1Ch+var_18], iv_0 
lea	eax, [cipher_0+8]
mov	[esp+1Ch+var_1C], eax 
call	_memmove
mov	eax, [cipher_0]
mov	[esp+1Ch+iv], iv_0
mov	edx, [cipher_0+4]
mov	[esp+1Ch+cipher], edx
mov	eax, [eax+8]
add	esp, 14h
pop	cipher_0
pop	iv_0
jmp	eax
public _silc_cipher_get_supported
push	ebp
push	edi
push	esi
push	ebx
sub	esp, 2Ch
mov	eax, ds:_silc_cipher_list
test	eax, eax
jz	loc_641F1980
mov	edx, [eax]
mov	[eax+8], edx
and	byte ptr [eax+10h], 0FDh
mov	dword ptr [eax+18h], 0
mov	dword ptr [eax+14h], 0
xor	ecx, ecx
xor	ebp, ebp
xor	edx, edx
mov	[esp+3Ch+var_20], len
jmp	short loc_641F1948
align 10h
movzx	entry, word ptr	[eax+0Eh]
mov	ebx, [ecx+ebx]
mov	[eax+8], ebx
mov	[eax+14h], ecx
mov	ebx, [ecx]
test	entry, entry
jz	loc_641F1994
mov	edi, [entry]
mov	ecx, 0FFFFFFFFh
xor	eax, eax
repne scasb
not	ecx
mov	eax, [esp+3Ch+var_20]
lea	len, [eax+ecx-1]
lea	eax, [ebp+1]
mov	[esp+3Ch+var_20], eax
mov	[esp+3Ch+size],	eax 
mov	[esp+3Ch+ptr], list 
call	_silc_realloc
mov	edx, eax
mov	esi, [entry]
mov	ecx, 0FFFFFFFFh
mov	edi, esi
xor	eax, eax
repne scasb
not	ecx
dec	ecx
mov	eax, ebp
sub	eax, ecx
lea	eax, [list+eax]
mov	edi, eax
rep movsb
mov	byte ptr [list+ebp], 2Ch
mov	eax, ds:_silc_cipher_list
mov	ecx, [eax+14h]
mov	[eax+18h], ecx
mov	ecx, [eax+8]
test	ecx, ecx
jz	short loc_641F1964
test	byte ptr [eax+10h], 2
jnz	short loc_641F18E0
movzx	entry, word ptr	[eax+0Ch]
mov	ebx, [ecx+ebx]
jmp	short loc_641F18E7
align 4
mov	len, [esp+3Ch+var_20]
mov	dword ptr [eax+14h], 0
lea	eax, [list+len-1]
mov	byte ptr [eax],	0
mov	eax, list
add	esp, 2Ch
pop	entry
pop	esi
pop	edi
pop	len
retn
mov	eax, 0FFFFFFFFh
xor	edx, edx
mov	byte ptr [eax],	0
mov	eax, list
add	esp, 2Ch
pop	ebx
pop	esi
pop	edi
pop	ebp
retn
mov	len, [esp+3Ch+var_20]
lea	eax, [list+len-1]
jmp	short loc_641F1973
align 10h
public _silc_cipher_is_supported
push	edi
push	esi
push	ebx
sub	esp, 10h
mov	edi, [esp+1Ch+name]
mov	ebx, ds:_silc_cipher_list
test	ebx, ebx
jz	short loc_641F1A29
mov	eax, [ebx]
mov	[ebx+8], eax
and	byte ptr [ebx+10h], 0FDh
mov	dword ptr [ebx+18h], 0
mov	dword ptr [ebx+14h], 0
xor	esi, esi
jmp	short loc_641F19F5
align 10h
movzx	eax, word ptr [ebx+0Eh]
mov	eax, [esi+eax]
mov	[ebx+8], eax
mov	[ebx+14h], esi
mov	eax, [esi]
test	entry, entry
jz	short loc_641F1A29
mov	entry, [entry]
mov	[esp+1Ch+var_18], name_0 
mov	[esp+1Ch+var_1C], eax 
call	_strcmp
test	eax, eax
jz	short loc_641F1A20
mov	[ebx+18h], esi
mov	esi, [ebx+8]
test	esi, esi
jz	short loc_641F1A10
test	byte ptr [ebx+10h], 2
jnz	short loc_641F19D0
movzx	eax, word ptr [ebx+0Ch]
mov	eax, [esi+eax]
jmp	short loc_641F19D7
align 10h
mov	dword ptr [ebx+14h], 0
xor	eax, eax
add	esp, 10h
pop	ebx
pop	esi
pop	name_0
retn
mov	al, 1
add	esp, 10h
pop	ebx
pop	esi
pop	name_0
retn
			
xor	entry, entry
jmp	short loc_641F1A19
align 10h
public _silc_cipher_free
			
push	ebx
sub	esp, 18h
mov	ebx, [esp+1Ch+cipher]
test	ebx, ebx
jz	short loc_641F1A54
mov	eax, [cipher_0+4]
mov	[esp+1Ch+ptr], eax 
call	_silc_free
mov	[esp+1Ch+cipher], cipher_0
add	esp, 18h
pop	cipher_0
jmp	_silc_free
add	esp, 18h
pop	cipher_0
retn
align 4
public _silc_cipher_unregister
push	ebp
push	edi
push	esi
push	ebx
sub	esp, 3Ch
mov	edi, [esp+4Ch+cipher]
mov	eax, ds:_silc_cipher_list
test	eax, eax
jz	loc_641F1CC3
mov	ecx, [eax]
mov	[eax+8], ecx
mov	bl, [eax+10h]
and	ebx, 0FFFFFFFDh
mov	[eax+10h], bl
mov	dword ptr [eax+18h], 0
mov	dword ptr [eax+14h], 0
cmp	cipher_0, 1
jz	short loc_641F1AD2
xor	edx, edx
jmp	short loc_641F1AB7
align 4
movzx	entry, word ptr	[eax+0Ch]
mov	esi, [edx+esi]
mov	[eax+8], esi
mov	[eax+14h], edx
mov	esi, [edx]
test	entry, entry
jz	loc_641F1CC3
cmp	entry, cipher_0
jz	short loc_641F1AF4
mov	[eax+18h], edx
mov	edx, [eax+8]
test	edx, edx
jnz	short loc_641F1A9C
mov	dword ptr [eax+14h], 0
xor	eax, eax
add	esp, 3Ch
pop	ebx
pop	entry
pop	cipher_0
pop	ebp
retn
mov	dword ptr [eax+18h], 0
test	ecx, ecx
jz	short loc_641F1AC1
movzx	edx, word ptr [eax+0Ch]
mov	edx, [ecx+edx]
mov	[eax+8], edx
mov	[eax+14h], ecx
mov	esi, [ecx]
test	entry, entry
jz	loc_641F1CC3
mov	edx, ecx
mov	[eax+8], ecx
and	ebx, 0FFFFFFFDh
mov	[eax+10h], bl
test	edx, edx
jz	short loc_641F1B1B
movzx	ebx, word ptr [eax+0Ch]
mov	ebx, [edx+ebx]
mov	[eax+8], ebx
cmp	entry, [edx]
jz	loc_641F1BB7
mov	edx, ebx
test	edx, edx
jnz	short loc_641F1B03
			
mov	eax, [entry]
mov	[esp+4Ch+ptr], eax 
call	_silc_free
mov	[esp+4Ch+ptr], entry 
call	_silc_free
mov	cipher_0, ds:_silc_cipher_list
mov	eax, [edi+10h]
shr	eax, 2
jnz	short loc_641F1BAD
mov	ebx, [edi]
mov	[edi+8], ebx
and	byte ptr [edi+10h], 0FDh
test	ebx, ebx
jz	short loc_641F1B9B
test	byte ptr [edi+10h], 2
jz	loc_641F1C44
movzx	eax, word ptr [edi+0Eh]
mov	eax, [ebx+eax]
mov	[edi+8], eax
mov	edx, [edi]
test	edx, edx
jz	short loc_641F1B83
cmp	ebx, edx
jz	loc_641F1C07
movzx	entry, word ptr	[edi+0Ch]
jmp	short loc_641F1B7A
cmp	ebx, eax
jz	loc_641F1C10
mov	edx, eax
lea	ecx, [edx+esi]
mov	eax, [ecx]
test	eax, eax
jnz	short loc_641F1B70
cmp	ebx, [edi+4]
jz	loc_641F1C3B
			
mov	[esp+4Ch+ptr], ebx 
call	_silc_free
mov	ebx, [edi+8]
test	ebx, ebx
jnz	short loc_641F1B48
mov	[esp+4Ch+ptr], edi 
call	_silc_free
mov	ds:_silc_cipher_list, 0
mov	al, 1
add	esp, 3Ch
pop	ebx
pop	entry
pop	edi
pop	ebp
retn
test	ecx, ecx
jz	short loc_641F1BDF
cmp	edx, ecx
jz	loc_641F1CB5
movzx	ebp, word ptr [eax+0Ch]
jmp	short loc_641F1BD6
align 4
cmp	edx, edi
jz	loc_641F1C57
mov	ecx, edi
lea	ebx, [ecx+ebp]
mov	edi, [ebx]
test	edi, edi
jnz	short loc_641F1BCC
cmp	edx, [eax+4]
jz	loc_641F1C8A
			
cmp	edx, [eax+14h]
jz	loc_641F1C9E
cmp	edx, [eax+18h]
jz	loc_641F1C92
mov	[esp+4Ch+ptr], edx 
call	_silc_free
jmp	loc_641F1B1B
movzx	entry, word ptr	[edi+0Ch]
mov	ecx, edi
xor	edx, edx
nop
mov	eax, [ebx+esi]
mov	[ecx], eax
test	eax, eax
jz	short loc_641F1C29
test	byte ptr [edi+10h], 1
jz	short loc_641F1C29
movzx	esi, word ptr [edi+0Eh]
mov	ebp, [ebx+esi]
mov	[eax+esi], ebp
			
cmp	ebx, [edi+8]
jz	short loc_641F1C50
sub	dword ptr [edi+10h], 4
cmp	ebx, [edi+4]
jnz	loc_641F1B8C
mov	[edi+4], edx
jmp	loc_641F1B8C
align 4
movzx	eax, word ptr [edi+0Ch]
mov	eax, [ebx+eax]
jmp	loc_641F1B59
mov	eax, [ecx]
mov	[edi+8], eax
jmp	short loc_641F1C2E
mov	[esp+4Ch+var_30], ebx
mov	edi, [edx+ebp]
mov	[ebx], edi
test	edi, edi
jz	short loc_641F1C6A
test	byte ptr [eax+10h], 1
jnz	short loc_641F1C7E
			
cmp	edx, [eax+8]
jz	short loc_641F1CAA
sub	dword ptr [eax+10h], 4
cmp	edx, [eax+4]
jnz	loc_641F1BE8
jmp	short loc_641F1C8A
movzx	ebp, word ptr [eax+0Eh]
mov	ebx, [edx+ebp]
mov	[edi+ebp], ebx
jmp	short loc_641F1C6A
			
mov	[eax+4], ecx
jmp	loc_641F1BE8
mov	dword ptr [eax+18h], 0
jmp	loc_641F1BFA
mov	dword ptr [eax+14h], 0
jmp	loc_641F1BF1
mov	edi, [esp+4Ch+var_30]
mov	ebx, [edi]
mov	[eax+8], ebx
jmp	short loc_641F1C6F
mov	[esp+4Ch+var_30], eax
movzx	ebp, word ptr [eax+0Ch]
xor	ecx, ecx
mov	ebx, eax
jmp	short loc_641F1C5B
			
xor	eax, eax
jmp	loc_641F1ACA
align 4
public _silc_cipher_unregister_all
sub	esp, 1Ch
mov	eax, ds:_silc_cipher_list
test	eax, eax
jz	short loc_641F1D36
mov	edx, [eax]
mov	[eax+8], edx
and	byte ptr [eax+10h], 0FDh
mov	dword ptr [eax+18h], 0
mov	dword ptr [eax+14h], 0
xor	edx, edx
jmp	short loc_641F1D1B
align 4
movzx	ecx, word ptr [eax+0Eh]
mov	ecx, [edx+ecx]
mov	[eax+8], ecx
mov	[eax+14h], edx
mov	eax, [edx]
test	entry, entry
jz	short loc_641F1D34
mov	[esp+1Ch+cipher], entry	
call	_silc_cipher_unregister
mov	eax, ds:_silc_cipher_list
test	eax, eax
jz	short loc_641F1D34
mov	edx, [eax+14h]
mov	[eax+18h], edx
mov	edx, [eax+8]
test	edx, edx
jz	short loc_641F1D3C
test	byte ptr [eax+10h], 2
jnz	short loc_641F1CF4
movzx	ecx, word ptr [eax+0Ch]
mov	ecx, [edx+ecx]
jmp	short loc_641F1CFB
			
mov	al, 1
add	esp, 1Ch
retn
align 4
mov	dword ptr [eax+14h], 0
mov	al, 1
add	esp, 1Ch
retn
align 4
public _silc_cipher_alloc
			
push	ebp
push	edi
push	esi
push	ebx
sub	esp, 1Ch
mov	ebp, [esp+2Ch+name]
mov	ebx, ds:_silc_cipher_list
test	ebx, ebx
jz	loc_641F1E34
mov	eax, [ebx]
mov	[ebx+8], eax
and	byte ptr [ebx+10h], 0FDh
mov	dword ptr [ebx+18h], 0
mov	dword ptr [ebx+14h], 0
xor	esi, esi
jmp	short loc_641F1DA9
movzx	eax, word ptr [ebx+0Eh]
mov	eax, [esi+eax]
mov	[ebx+8], eax
mov	[ebx+14h], esi
mov	entry, [esi]
test	entry, entry
jz	loc_641F1E34
mov	eax, [entry]
mov	[esp+2Ch+size],	name_0 
mov	[esp+2Ch+items], eax 
call	_strcmp
test	eax, eax
jz	short loc_641F1DD8
mov	[ebx+18h], esi
mov	esi, [ebx+8]
test	esi, esi
jz	short loc_641F1DC4
test	byte ptr [ebx+10h], 2
jnz	short loc_641F1D80
movzx	eax, word ptr [ebx+0Ch]
mov	eax, [esi+eax]
jmp	short loc_641F1D87
align 4
mov	dword ptr [ebx+14h], 0
xor	eax, eax
			
add	esp, 1Ch
pop	ebx
pop	esi
pop	entry
pop	name_0
retn
align 4
mov	[esp+2Ch+size],	18h 
mov	[esp+2Ch+items], 1 
call	_silc_calloc
mov	ebx, eax
mov	eax, [esp+2Ch+new_cipher]
mov	[eax], ebx
test	ebx, ebx
jz	short loc_641F1E34
mov	[ebx], entry
call	dword ptr [entry+14h]
mov	[esp+2Ch+size],	eax 
mov	[esp+2Ch+items], 1 
call	_silc_calloc
mov	[ebx+4], eax
mov	edx, [esp+2Ch+new_cipher]
mov	eax, [edx]
mov	edx, [eax+4]
test	edx, edx
jz	short loc_641F1E28
mov	al, 1
add	esp, 1Ch
pop	ebx
pop	esi
pop	entry
pop	name_0
retn
align 4
mov	[esp+2Ch+items], eax 
call	_silc_free
xor	eax, eax
jmp	short loc_641F1DCD
			
xor	eax, eax
jmp	short loc_641F1DCD
public _silc_cipher_register
push	edi
push	esi
push	ebx
sub	esp, 10h
mov	edi, [esp+1Ch+cipher]
mov	ebx, ds:_silc_cipher_list
test	ebx, ebx
jz	short loc_641F1EB3
mov	eax, [ebx]
mov	[ebx+8], eax
and	byte ptr [ebx+10h], 0FDh
mov	dword ptr [ebx+18h], 0
mov	dword ptr [ebx+14h], 0
xor	esi, esi
jmp	short loc_641F1E93
align 4
movzx	eax, word ptr [ebx+0Eh]
mov	eax, [esi+eax]
mov	[ebx+8], eax
mov	[ebx+14h], esi
mov	eax, [esi]
test	entry, entry
jz	short loc_641F1EB3
mov	entry, [entry]
mov	edx, [cipher_0]
mov	[esp+1Ch+size],	edx 
mov	[esp+1Ch+items], eax 
call	_strcmp
test	eax, eax
jz	loc_641F1FB0
mov	[ebx+18h], esi
mov	esi, [ebx+8]
test	esi, esi
jz	short loc_641F1EAC
test	byte ptr [ebx+10h], 2
jnz	short loc_641F1E68
movzx	eax, word ptr [ebx+0Ch]
mov	eax, [esi+eax]
jmp	short loc_641F1E6F
mov	dword ptr [ebx+14h], 0
			
mov	[esp+1Ch+size],	1Ch
mov	[esp+1Ch+items], 1 
call	_silc_calloc
mov	ebx, eax
test	eax, eax
jz	loc_641F1FB0
mov	new, [cipher_0]
mov	[esp+1Ch+items], eax 
call	_strdup
mov	[new], eax
test	eax, eax
jz	loc_641F2019
mov	edx, [cipher_0+18h]
and	edx, 3FFh
mov	eax, [new+18h]
and	eax, 0FFFFFC00h
or	eax, edx
mov	[new+18h], ax
mov	edx, [cipher_0+18h]
and	edx, 3FC00h
mov	eax, [new+18h]
and	eax, 0FFFC03FFh
or	eax, edx
mov	[new+18h], eax
mov	dx, [cipher_0+1Ah]
and	edx, 3FCh
mov	ax, [new+1Ah]
and	eax, 0FFFFFC03h
or	eax, edx
mov	[new+1Ah], ax
mov	eax, [cipher_0+4]
mov	[new+4], eax
mov	eax, [cipher_0+8]
mov	[new+8], eax
mov	eax, [cipher_0+0Ch]
mov	[new+0Ch], eax
mov	eax, [cipher_0+10h]
mov	[new+10h], eax
mov	eax, [cipher_0+14h]
mov	[new+14h], eax
mov	dl, [cipher_0+1Bh]
and	edx, 0FFFFFFFCh
mov	al, [new+1Bh]
and	eax, 3
or	eax, edx
mov	[new+1Bh], al
mov	esi, ds:_silc_cipher_list
test	esi, esi
jz	short loc_641F1FC1
mov	[esp+1Ch+items], 0Ch 
call	_silc_malloc
test	eax, eax
jz	short loc_641F1FA4
mov	[eax], new
mov	ecx, [esi]
test	ecx, ecx
jz	short loc_641F1FB9
movzx	edx, word ptr [esi+0Ch]
mov	ecx, [esi+4]
mov	[ecx+edx], eax
test	byte ptr [esi+10h], 1
jz	short loc_641F1F96
movzx	ecx, word ptr [esi+0Eh]
mov	new, [esi+4]
mov	[eax+ecx], ebx
mov	[esi+4], eax
mov	dword ptr [eax+edx], 0
add	dword ptr [esi+10h], 4
mov	al, 1
add	esp, 10h
pop	new
pop	esi
pop	cipher_0
retn
align 10h
			
xor	new, new
add	esp, 10h
pop	new
pop	esi
pop	cipher_0
retn
mov	[esi], eax
movzx	edx, word ptr [esi+0Ch]
jmp	short loc_641F1F86
mov	[esp+1Ch+items], 1Ch 
call	_silc_malloc
mov	esi, eax
test	eax, eax
jz	short loc_641F200E
mov	dword ptr [eax+18h], 0
mov	dword ptr [eax+14h], 0
mov	eax, [eax+10h]
and	eax, 3
mov	[esi+10h], eax
mov	word ptr [esi+0Ch], 4
mov	word ptr [esi+0Eh], 8
mov	byte ptr [esi+10h], 1
mov	dword ptr [esi+8], 0
mov	dword ptr [esi+4], 0
mov	dword ptr [esi], 0
mov	ds:_silc_cipher_list, esi
jmp	loc_641F1F64
mov	[esp+1Ch+items], new 
call	_silc_free
xor	eax, eax
jmp	short loc_641F1FB2
align 4
public _silc_cipher_register_default
push	ebx
sub	esp, 18h
mov	ebx, ds:_silc_default_ciphers.name
test	ebx, ebx
jz	short loc_641F204E
mov	ebx, offset _silc_default_ciphers
nop
mov	[esp+1Ch+cipher], ebx 
call	_silc_cipher_register
mov	eax, [ebx+1Ch]
add	ebx, 1Ch
test	eax, eax
jnz	short loc_641F203C
mov	al, 1
add	esp, 18h
pop	ebx
retn
align 4
public _silc_hash_len
			
mov	eax, [esp+hash]
mov	eax, [eax]
movzx	eax, word ptr [eax+8]
retn
align 4
public _silc_hash_block_len
			
mov	eax, [esp+hash]
mov	eax, [eax]
movzx	eax, word ptr [eax+0Ah]
retn
align 10h
public _silc_hash_get_name
			
mov	eax, [esp+hash]
mov	eax, [eax]
mov	eax, [eax]
retn
align 4
public _silc_hash_get_oid
			
mov	eax, [esp+hash]
mov	eax, [eax]
mov	eax, [eax+4]
retn
align 4
public _silc_hash_init
			
sub	esp, 0Ch
mov	eax, [esp+0Ch+hash]
mov	edx, [eax]
mov	eax, [eax+4]
mov	[esp+0Ch+hash],	eax
mov	eax, [edx+0Ch]
add	esp, 0Ch
jmp	eax
public _silc_hash_update
			
sub	esp, 0Ch
mov	eax, [esp+0Ch+hash]
mov	edx, [eax]
mov	eax, [eax+4]
mov	[esp+0Ch+hash],	eax
mov	eax, [edx+10h]
add	esp, 0Ch
jmp	eax
public _silc_hash_final
			
sub	esp, 0Ch
mov	eax, [esp+0Ch+hash]
mov	edx, [eax]
mov	eax, [eax+4]
mov	[esp+0Ch+hash],	eax
mov	eax, [edx+14h]
add	esp, 0Ch
jmp	eax
public _silc_hash_transform
			
sub	esp, 0Ch
mov	edx, [esp+0Ch+state]
mov	eax, [esp+0Ch+hash]
mov	eax, [eax]
mov	ecx, [esp+0Ch+data]
mov	[esp+0Ch+state], ecx
mov	[esp+0Ch+hash],	edx
mov	eax, [eax+18h]
add	esp, 0Ch
jmp	eax
align 4
public _silc_hash_get_supported
push	ebp
push	edi
push	esi
push	ebx
sub	esp, 2Ch
mov	eax, ds:_silc_hash_list
test	eax, eax
jz	loc_641F21CC
mov	edx, [eax]
mov	[eax+8], edx
and	byte ptr [eax+10h], 0FDh
mov	dword ptr [eax+18h], 0
mov	dword ptr [eax+14h], 0
xor	ecx, ecx
xor	ebp, ebp
xor	edx, edx
mov	[esp+3Ch+var_20], len
jmp	short loc_641F2194
align 4
movzx	entry, word ptr	[eax+0Eh]
mov	ebx, [ecx+ebx]
mov	[eax+8], ebx
mov	[eax+14h], ecx
mov	ebx, [ecx]
test	entry, entry
jz	loc_641F21E0
mov	edi, [entry]
mov	ecx, 0FFFFFFFFh
xor	eax, eax
repne scasb
not	ecx
mov	eax, [esp+3Ch+var_20]
lea	len, [eax+ecx-1]
lea	eax, [ebp+1]
mov	[esp+3Ch+var_20], eax
mov	[esp+3Ch+size],	eax 
mov	[esp+3Ch+ptr], list 
call	_silc_realloc
mov	edx, eax
mov	esi, [entry]
mov	ecx, 0FFFFFFFFh
mov	edi, esi
xor	eax, eax
repne scasb
not	ecx
dec	ecx
mov	eax, ebp
sub	eax, ecx
lea	eax, [list+eax]
mov	edi, eax
rep movsb
mov	byte ptr [list+ebp], 2Ch
mov	eax, ds:_silc_hash_list
mov	ecx, [eax+14h]
mov	[eax+18h], ecx
mov	ecx, [eax+8]
test	ecx, ecx
jz	short loc_641F21B0
test	byte ptr [eax+10h], 2
jnz	short loc_641F212C
movzx	entry, word ptr	[eax+0Ch]
mov	ebx, [ecx+ebx]
jmp	short loc_641F2133
align 10h
mov	len, [esp+3Ch+var_20]
mov	dword ptr [eax+14h], 0
lea	eax, [list+len-1]
mov	byte ptr [eax],	0
mov	eax, list
add	esp, 2Ch
pop	entry
pop	esi
pop	edi
pop	len
retn
mov	eax, 0FFFFFFFFh
xor	edx, edx
mov	byte ptr [eax],	0
mov	eax, list
add	esp, 2Ch
pop	ebx
pop	esi
pop	edi
pop	ebp
retn
mov	len, [esp+3Ch+var_20]
lea	eax, [list+len-1]
jmp	short loc_641F21BF
align 4
public _silc_hash_is_supported
push	edi
push	esi
push	ebx
sub	esp, 10h
mov	edi, [esp+1Ch+name]
mov	ebx, ds:_silc_hash_list
test	ebx, ebx
jz	short loc_641F2275
mov	eax, [ebx]
mov	[ebx+8], eax
and	byte ptr [ebx+10h], 0FDh
mov	dword ptr [ebx+18h], 0
mov	dword ptr [ebx+14h], 0
xor	esi, esi
jmp	short loc_641F2241
align 4
movzx	eax, word ptr [ebx+0Eh]
mov	eax, [esi+eax]
mov	[ebx+8], eax
mov	[ebx+14h], esi
mov	eax, [esi]
test	entry, entry
jz	short loc_641F2275
mov	entry, [entry]
mov	[esp+1Ch+var_18], name_0 
mov	[esp+1Ch+var_1C], eax 
call	_strcmp
test	eax, eax
jz	short loc_641F226C
mov	[ebx+18h], esi
mov	esi, [ebx+8]
test	esi, esi
jz	short loc_641F225C
test	byte ptr [ebx+10h], 2
jnz	short loc_641F221C
movzx	eax, word ptr [ebx+0Ch]
mov	eax, [esi+eax]
jmp	short loc_641F2223
align 4
mov	dword ptr [ebx+14h], 0
xor	eax, eax
add	esp, 10h
pop	ebx
pop	esi
pop	name_0
retn
mov	al, 1
add	esp, 10h
pop	ebx
pop	esi
pop	name_0
retn
			
xor	entry, entry
jmp	short loc_641F2265
align 4
public _silc_hash_free
			
push	ebx
sub	esp, 18h
mov	ebx, [esp+1Ch+hash]
test	ebx, ebx
jz	short loc_641F22A0
mov	eax, [hash_0+4]
mov	[esp+1Ch+ptr], eax 
call	_silc_free
mov	[esp+1Ch+hash],	hash_0
add	esp, 18h
pop	hash_0
jmp	_silc_free
add	esp, 18h
pop	hash_0
retn
align 4
public _silc_hash_alloc_by_oid
push	ebp
push	edi
push	esi
push	ebx
sub	esp, 1Ch
mov	ebp, [esp+2Ch+oid]
mov	ebx, ds:_silc_hash_list
test	ebx, ebx
jz	loc_641F2390
mov	eax, [ebx]
mov	[ebx+8], eax
and	byte ptr [ebx+10h], 0FDh
mov	dword ptr [ebx+18h], 0
mov	dword ptr [ebx+14h], 0
xor	esi, esi
jmp	short loc_641F2306
movzx	eax, word ptr [ebx+0Eh]
mov	eax, [esi+eax]
mov	[ebx+8], eax
mov	[ebx+14h], esi
mov	entry, [esi]
test	entry, entry
jz	loc_641F2390
mov	eax, [entry+4]
mov	[esp+2Ch+size],	oid_0 
mov	[esp+2Ch+items], eax 
call	_strcmp
test	eax, eax
jz	short loc_641F2334
mov	[ebx+18h], esi
mov	esi, [ebx+8]
test	esi, esi
jz	short loc_641F2320
test	byte ptr [ebx+10h], 2
jnz	short loc_641F22DC
movzx	eax, word ptr [ebx+0Ch]
mov	eax, [esi+eax]
jmp	short loc_641F22E3
align 10h
mov	dword ptr [ebx+14h], 0
xor	eax, eax
			
add	esp, 1Ch
pop	ebx
pop	esi
pop	entry
pop	oid_0
retn
align 4
mov	[esp+2Ch+size],	8 
mov	[esp+2Ch+items], 1 
call	_silc_calloc
mov	ebx, eax
mov	eax, [esp+2Ch+new_hash]
mov	[eax], ebx
test	ebx, ebx
jz	short loc_641F2390
mov	[ebx], entry
call	dword ptr [entry+1Ch]
mov	[esp+2Ch+size],	eax 
mov	[esp+2Ch+items], 1 
call	_silc_calloc
mov	[ebx+4], eax
mov	edx, [esp+2Ch+new_hash]
mov	eax, [edx]
mov	edx, [eax+4]
test	edx, edx
jz	short loc_641F2384
mov	al, 1
add	esp, 1Ch
pop	ebx
pop	esi
pop	entry
pop	oid_0
retn
align 4
mov	[esp+2Ch+items], eax 
call	_silc_free
xor	eax, eax
jmp	short loc_641F2329
			
xor	eax, eax
jmp	short loc_641F2329
public _silc_hash_alloc
			
push	ebp
push	edi
push	esi
push	ebx
sub	esp, 1Ch
mov	ebp, [esp+2Ch+name]
mov	ebx, ds:_silc_hash_list
test	ebx, ebx
jz	loc_641F247C
mov	eax, [ebx]
mov	[ebx+8], eax
and	byte ptr [ebx+10h], 0FDh
mov	dword ptr [ebx+18h], 0
mov	dword ptr [ebx+14h], 0
xor	esi, esi
jmp	short loc_641F23F1
movzx	eax, word ptr [ebx+0Eh]
mov	eax, [esi+eax]
mov	[ebx+8], eax
mov	[ebx+14h], esi
mov	entry, [esi]
test	entry, entry
jz	loc_641F247C
mov	eax, [entry]
mov	[esp+2Ch+size],	name_0 
mov	[esp+2Ch+items], eax 
call	_strcmp
test	eax, eax
jz	short loc_641F2420
mov	[ebx+18h], esi
mov	esi, [ebx+8]
test	esi, esi
jz	short loc_641F240C
test	byte ptr [ebx+10h], 2
jnz	short loc_641F23C8
movzx	eax, word ptr [ebx+0Ch]
mov	eax, [esi+eax]
jmp	short loc_641F23CF
align 4
mov	dword ptr [ebx+14h], 0
xor	eax, eax
			
add	esp, 1Ch
pop	ebx
pop	esi
pop	entry
pop	name_0
retn
align 10h
mov	[esp+2Ch+size],	8 
mov	[esp+2Ch+items], 1 
call	_silc_calloc
mov	ebx, eax
mov	eax, [esp+2Ch+new_hash]
mov	[eax], ebx
test	ebx, ebx
jz	short loc_641F247C
mov	[ebx], entry
call	dword ptr [entry+1Ch]
mov	[esp+2Ch+size],	eax 
mov	[esp+2Ch+items], 1 
call	_silc_calloc
mov	[ebx+4], eax
mov	edx, [esp+2Ch+new_hash]
mov	eax, [edx]
mov	ecx, [eax+4]
test	ecx, ecx
jz	short loc_641F2470
mov	al, 1
add	esp, 1Ch
pop	ebx
pop	esi
pop	entry
pop	name_0
retn
align 10h
mov	[esp+2Ch+items], eax 
call	_silc_free
xor	eax, eax
jmp	short loc_641F2415
			
xor	eax, eax
jmp	short loc_641F2415
public _silc_hash_unregister
push	ebp
push	edi
push	esi
push	ebx
sub	esp, 3Ch
mov	edi, [esp+4Ch+hash]
mov	eax, ds:_silc_hash_list
test	eax, eax
jz	loc_641F26F3
mov	ecx, [eax]
mov	[eax+8], ecx
mov	bl, [eax+10h]
and	ebx, 0FFFFFFFDh
mov	[eax+10h], bl
mov	dword ptr [eax+18h], 0
mov	dword ptr [eax+14h], 0
cmp	hash_0,	1
jz	short loc_641F24F6
xor	edx, edx
jmp	short loc_641F24DB
align 10h
movzx	entry, word ptr	[eax+0Ch]
mov	esi, [edx+esi]
mov	[eax+8], esi
mov	[eax+14h], edx
mov	esi, [edx]
test	entry, entry
jz	loc_641F26F3
cmp	entry, hash_0
jz	short loc_641F2518
mov	[eax+18h], edx
mov	edx, [eax+8]
test	edx, edx
jnz	short loc_641F24C0
mov	dword ptr [eax+14h], 0
xor	eax, eax
add	esp, 3Ch
pop	ebx
pop	entry
pop	hash_0
pop	ebp
retn
mov	dword ptr [eax+18h], 0
test	ecx, ecx
jz	short loc_641F24E5
movzx	edx, word ptr [eax+0Ch]
mov	edx, [ecx+edx]
mov	[eax+8], edx
mov	[eax+14h], ecx
mov	esi, [ecx]
test	entry, entry
jz	loc_641F26F3
mov	edx, ecx
mov	[eax+8], ecx
and	ebx, 0FFFFFFFDh
mov	[eax+10h], bl
test	edx, edx
jz	short loc_641F253F
movzx	ebx, word ptr [eax+0Ch]
mov	ebx, [edx+ebx]
mov	[eax+8], ebx
cmp	entry, [edx]
jz	loc_641F25E7
mov	edx, ebx
test	edx, edx
jnz	short loc_641F2527
			
mov	eax, [entry]
mov	[esp+4Ch+ptr], eax 
call	_silc_free
mov	eax, [entry+4]
mov	[esp+4Ch+ptr], eax 
call	_silc_free
mov	[esp+4Ch+ptr], entry 
call	_silc_free
mov	hash_0,	ds:_silc_hash_list
mov	eax, [edi+10h]
shr	eax, 2
jnz	short loc_641F25DD
mov	ebx, [edi]
mov	[edi+8], ebx
and	byte ptr [edi+10h], 0FDh
test	ebx, ebx
jz	short loc_641F25CB
nop
test	byte ptr [edi+10h], 2
jz	loc_641F2674
movzx	eax, word ptr [edi+0Eh]
mov	eax, [ebx+eax]
mov	[edi+8], eax
mov	edx, [edi]
test	edx, edx
jz	short loc_641F25B3
cmp	ebx, edx
jz	loc_641F2637
movzx	entry, word ptr	[edi+0Ch]
jmp	short loc_641F25AA
cmp	ebx, eax
jz	loc_641F2640
mov	edx, eax
lea	ecx, [edx+esi]
mov	eax, [ecx]
test	eax, eax
jnz	short loc_641F25A0
cmp	ebx, [edi+4]
jz	loc_641F266B
			
mov	[esp+4Ch+ptr], ebx 
call	_silc_free
mov	ebx, [edi+8]
test	ebx, ebx
jnz	short loc_641F2578
mov	[esp+4Ch+ptr], edi 
call	_silc_free
mov	ds:_silc_hash_list, 0
mov	al, 1
add	esp, 3Ch
pop	ebx
pop	entry
pop	edi
pop	ebp
retn
test	ecx, ecx
jz	short loc_641F260F
cmp	edx, ecx
jz	loc_641F26E5
movzx	ebp, word ptr [eax+0Ch]
jmp	short loc_641F2606
align 4
cmp	edx, edi
jz	loc_641F2687
mov	ecx, edi
lea	ebx, [ecx+ebp]
mov	edi, [ebx]
test	edi, edi
jnz	short loc_641F25FC
cmp	edx, [eax+4]
jz	loc_641F26BA
			
cmp	edx, [eax+14h]
jz	loc_641F26CE
cmp	edx, [eax+18h]
jz	loc_641F26C2
mov	[esp+4Ch+ptr], edx 
call	_silc_free
jmp	loc_641F253F
movzx	entry, word ptr	[edi+0Ch]
mov	ecx, edi
xor	edx, edx
nop
mov	eax, [ebx+esi]
mov	[ecx], eax
test	eax, eax
jz	short loc_641F2659
test	byte ptr [edi+10h], 1
jz	short loc_641F2659
movzx	esi, word ptr [edi+0Eh]
mov	ebp, [ebx+esi]
mov	[eax+esi], ebp
			
cmp	ebx, [edi+8]
jz	short loc_641F2680
sub	dword ptr [edi+10h], 4
cmp	ebx, [edi+4]
jnz	loc_641F25BC
mov	[edi+4], edx
jmp	loc_641F25BC
align 4
movzx	eax, word ptr [edi+0Ch]
mov	eax, [ebx+eax]
jmp	loc_641F2589
mov	eax, [ecx]
mov	[edi+8], eax
jmp	short loc_641F265E
mov	[esp+4Ch+var_30], ebx
mov	edi, [edx+ebp]
mov	[ebx], edi
test	edi, edi
jz	short loc_641F269A
test	byte ptr [eax+10h], 1
jnz	short loc_641F26AE
			
cmp	edx, [eax+8]
jz	short loc_641F26DA
sub	dword ptr [eax+10h], 4
cmp	edx, [eax+4]
jnz	loc_641F2618
jmp	short loc_641F26BA
movzx	ebp, word ptr [eax+0Eh]
mov	ebx, [edx+ebp]
mov	[edi+ebp], ebx
jmp	short loc_641F269A
			
mov	[eax+4], ecx
jmp	loc_641F2618
mov	dword ptr [eax+18h], 0
jmp	loc_641F262A
mov	dword ptr [eax+14h], 0
jmp	loc_641F2621
mov	edi, [esp+4Ch+var_30]
mov	ebx, [edi]
mov	[eax+8], ebx
jmp	short loc_641F269F
mov	[esp+4Ch+var_30], eax
movzx	ebp, word ptr [eax+0Ch]
xor	ecx, ecx
mov	ebx, eax
jmp	short loc_641F268B
			
xor	eax, eax
jmp	loc_641F24EE
align 4
public _silc_hash_unregister_all
sub	esp, 1Ch
mov	eax, ds:_silc_hash_list
test	eax, eax
jz	short loc_641F2766
mov	edx, [eax]
mov	[eax+8], edx
and	byte ptr [eax+10h], 0FDh
mov	dword ptr [eax+18h], 0
mov	dword ptr [eax+14h], 0
xor	edx, edx
jmp	short loc_641F274B
align 4
movzx	ecx, word ptr [eax+0Eh]
mov	ecx, [edx+ecx]
mov	[eax+8], ecx
mov	[eax+14h], edx
mov	eax, [edx]
test	entry, entry
jz	short loc_641F2764
mov	[esp+1Ch+hash],	entry 
call	_silc_hash_unregister
mov	eax, ds:_silc_hash_list
test	eax, eax
jz	short loc_641F2764
mov	edx, [eax+14h]
mov	[eax+18h], edx
mov	edx, [eax+8]
test	edx, edx
jz	short loc_641F276C
test	byte ptr [eax+10h], 2
jnz	short loc_641F2724
movzx	ecx, word ptr [eax+0Ch]
mov	ecx, [edx+ecx]
jmp	short loc_641F272B
			
mov	al, 1
add	esp, 1Ch
retn
align 4
mov	dword ptr [eax+14h], 0
mov	al, 1
add	esp, 1Ch
retn
align 4
public _silc_hash_register
push	edi
push	esi
push	ebx
sub	esp, 10h
mov	edi, [esp+1Ch+hash]
mov	ebx, ds:_silc_hash_list
test	ebx, ebx
jz	short loc_641F27F7
mov	eax, [ebx]
mov	[ebx+8], eax
and	byte ptr [ebx+10h], 0FDh
mov	dword ptr [ebx+18h], 0
mov	dword ptr [ebx+14h], 0
xor	esi, esi
jmp	short loc_641F27D7
align 4
movzx	eax, word ptr [ebx+0Eh]
mov	eax, [esi+eax]
mov	[ebx+8], eax
mov	[ebx+14h], esi
mov	eax, [esi]
test	entry, entry
jz	short loc_641F27F7
mov	entry, [entry]
mov	edx, [hash_0]
mov	[esp+1Ch+size],	edx 
mov	[esp+1Ch+items], eax 
call	_strcmp
test	eax, eax
jz	loc_641F28C0
mov	[ebx+18h], esi
mov	esi, [ebx+8]
test	esi, esi
jz	short loc_641F27F0
test	byte ptr [ebx+10h], 2
jnz	short loc_641F27AC
movzx	eax, word ptr [ebx+0Ch]
mov	eax, [esi+eax]
jmp	short loc_641F27B3
mov	dword ptr [ebx+14h], 0
			
mov	[esp+1Ch+size],	20h
mov	[esp+1Ch+items], 1 
call	_silc_calloc
mov	ebx, eax
test	eax, eax
jz	loc_641F28C0
mov	new, [hash_0]
mov	[esp+1Ch+items], eax 
call	_strdup
mov	[new], eax
test	eax, eax
jz	loc_641F2929
mov	eax, [hash_0+4]
mov	[esp+1Ch+items], eax 
call	_strdup
mov	[new+4], eax
test	eax, eax
jz	loc_641F2929
mov	eax, [hash_0+8]
mov	[new+8], ax
mov	ax, [hash_0+0Ah]
mov	[new+0Ah], ax
mov	eax, [hash_0+0Ch]
mov	[new+0Ch], eax
mov	eax, [hash_0+10h]
mov	[new+10h], eax
mov	eax, [hash_0+14h]
mov	[new+14h], eax
mov	eax, [hash_0+18h]
mov	[new+18h], eax
mov	eax, [hash_0+1Ch]
mov	[new+1Ch], eax
mov	esi, ds:_silc_hash_list
test	esi, esi
jz	short loc_641F28D1
mov	[esp+1Ch+items], 0Ch 
call	_silc_malloc
test	eax, eax
jz	short loc_641F28B6
mov	[eax], new
mov	new, [esi]
test	ebx, ebx
jz	short loc_641F28C9
movzx	edx, word ptr [esi+0Ch]
mov	ecx, [esi+4]
mov	[ecx+edx], eax
test	byte ptr [esi+10h], 1
jz	short loc_641F28A8
movzx	ecx, word ptr [esi+0Eh]
mov	ebx, [esi+4]
mov	[eax+ecx], ebx
mov	[esi+4], eax
mov	dword ptr [eax+edx], 0
add	dword ptr [esi+10h], 4
mov	al, 1
add	esp, 10h
pop	new
pop	esi
pop	hash_0
retn
align 10h
			
xor	new, new
add	esp, 10h
pop	new
pop	esi
pop	hash_0
retn
mov	[esi], eax
movzx	edx, word ptr [esi+0Ch]
jmp	short loc_641F2898
mov	[esp+1Ch+items], 1Ch
call	_silc_malloc
mov	esi, eax
test	eax, eax
jz	short loc_641F291E
mov	dword ptr [eax+18h], 0
mov	dword ptr [eax+14h], 0
mov	eax, [eax+10h]
and	eax, 3
mov	[esi+10h], eax
mov	word ptr [esi+0Ch], 4
mov	word ptr [esi+0Eh], 8
mov	byte ptr [esi+10h], 1
mov	dword ptr [esi+8], 0
mov	dword ptr [esi+4], 0
mov	dword ptr [esi], 0
mov	ds:_silc_hash_list, esi
jmp	loc_641F2876
			
mov	[esp+1Ch+items], new 
call	_silc_free
xor	eax, eax
jmp	short loc_641F28C2
align 4
public _silc_hash_register_default
push	ebx
sub	esp, 18h
mov	eax, ds:_silc_default_hash.name
test	eax, eax
jz	short loc_641F295C
mov	ebx, offset _silc_default_hash
mov	[esp+1Ch+hash],	ebx 
call	_silc_hash_register
mov	eax, [ebx+20h]
add	ebx, 20h
test	eax, eax
jnz	short loc_641F294A
mov	al, 1
add	esp, 18h
pop	ebx
retn
align 4
public _silc_hash_make
			
push	ebp
push	edi
push	esi
push	ebx
sub	esp, 1Ch
mov	ebx, [esp+2Ch+hash]
mov	edi, [esp+2Ch+data]
mov	ebp, [esp+2Ch+len]
mov	esi, [esp+2Ch+return_hash]
mov	eax, [ebx]
mov	edx, [ebx+4]
mov	[esp+2Ch+var_2C], edx
call	dword ptr [eax+0Ch]
mov	eax, [ebx]
mov	[esp+2Ch+var_24], ebp
mov	[esp+2Ch+var_28], edi
mov	edx, [ebx+4]
mov	[esp+2Ch+var_2C], edx
call	dword ptr [eax+10h]
mov	eax, [ebx]
mov	[esp+2Ch+data],	esi
mov	edx, [ebx+4]
mov	[esp+2Ch+hash],	edx
mov	eax, [eax+14h]
add	esp, 1Ch
pop	ebx
pop	esi
pop	edi
pop	ebp
jmp	eax
align 4
public _silc_hash_babbleprint
push	ebp
push	edi
push	esi
push	ebx
sub	esp, 7Ch
mov	[esp+8Ch+new_hash], 0
mov	edx, [esp+8Ch+hash]
test	edx, edx
jz	loc_641F2C94
mov	edx, [esp+8Ch+hash]
mov	eax, [edx]
mov	edx, [edx+4]
mov	[esp+8Ch+items], edx
call	dword ptr [eax+0Ch]
mov	esi, [esp+8Ch+hash]
mov	eax, [esi]
mov	edx, [esp+8Ch+data_len]
mov	[esp+8Ch+var_84], edx
mov	edx, [esp+8Ch+data]
mov	[esp+8Ch+size],	edx
mov	edx, [esi+4]
mov	[esp+8Ch+items], edx
call	dword ptr [eax+10h]
mov	eax, [esi]
lea	edx, [esp+8Ch+hval]
mov	[esp+8Ch+size],	edx
mov	edx, [esi+4]
mov	[esp+8Ch+items], edx
call	dword ptr [eax+14h]
mov	[esp+8Ch+size],	1 
mov	eax, [esi]
movzx	eax, word ptr [eax+8]
inc	eax
sar	eax, 1
lea	eax, [eax+eax*2+3]
shl	eax, 1
mov	[esp+8Ch+items], eax 
call	_silc_calloc
mov	ebx, eax
test	eax, eax
jz	loc_641F2CBC
mov	byte ptr [babbleprint],	78h
mov	ecx, [esp+8Ch+hash]
mov	babbleprint, [ecx]
movzx	esi, word ptr [eax+8]
cmp	esi, 1
jle	loc_641F2C60
mov	ecx, 1
mov	[esp+8Ch+var_6C], 0
mov	edi, 1
nop
mov	eax, [esp+8Ch+var_6C]
mov	al, [esp+eax+8Ch+hval]
mov	byte ptr [esp+8Ch+var_58], al
shr	al, 6
movzx	eax, al
lea	eax, [check+eax]
mov	esi, 6
xor	edx, edx
div	esi
mov	[esp+8Ch+var_50], edx
mov	eax, 0AAAAAAABh
mul	check
shr	edx, 2
movzx	ebp, byte ptr [esp+8Ch+var_58]
mov	eax, ebp
and	eax, 3
lea	eax, [edx+eax]
mov	[esp+8Ch+var_70], eax
mov	eax, 0AAAAAAABh
mul	[esp+8Ch+var_70]
mov	esi, edx
shr	c, 2
lea	c, [c+c*2]
shl	esi, 1
mov	edx, [esp+8Ch+var_70]
sub	edx, esi
mov	esi, edx
mov	eax, [esp+8Ch+var_6C]
mov	al, [esp+eax+8Ch+hval+1]
mov	byte ptr [esp+8Ch+var_54], al
movzx	edx, al
mov	[esp+8Ch+var_70], edx
lea	eax, ds:0[ebp*8]
sub	eax, ebp
lea	ebp, [eax+edx]
lea	eax, [check+check*4]
lea	eax, [ebp+eax+0]
mov	check, 24h
xor	edx, edx
div	edi
mov	edi, edx
mov	edx, [esp+8Ch+var_50]
mov	al, byte ptr ds:_vo[edx] 
mov	[babbleprint+k], al
mov	al, byte ptr [esp+8Ch+var_58]
shr	al, 2
and	eax, 0Fh
mov	al, byte ptr ds:_co[eax] 
mov	[babbleprint+k+1], al
mov	al, byte ptr ds:_vo[c] 
mov	[babbleprint+k+2], al
mov	al, byte ptr [esp+8Ch+var_54]
shr	al, 4
movzx	eax, al
mov	al, byte ptr ds:_co[eax] 
mov	[babbleprint+k+3], al
mov	byte ptr [babbleprint+k+4], 2Dh
mov	eax, [esp+8Ch+var_70]
and	eax, 0Fh
mov	al, byte ptr ds:_co[eax] 
mov	[babbleprint+k+5], al
add	[esp+8Ch+var_6C], 2
add	k, 6
mov	c, [esp+8Ch+hash]
mov	eax, [esi]
movzx	esi, word ptr [eax+8]
lea	eax, [esi-1]
cmp	eax, [esp+8Ch+var_6C]
jg	loc_641F2A74
mov	edx, 0AAAAAAABh
mov	eax, check
mul	edx
shr	edx, 2
mov	[esp+8Ch+var_54], edx
lea	ebp, [k+1]
lea	edx, [ecx+2]
mov	[esp+8Ch+var_70], edx
lea	eax, [ecx+3]
mov	[esp+8Ch+var_58], eax
and	esi, 1
jnz	short loc_641F2BF4
mov	edx, 6
mov	eax, check
mov	esi, edx
xor	edx, edx
div	esi
mov	al, byte ptr ds:_vo[edx] 
mov	[babbleprint+ecx], al
mov	byte ptr [babbleprint+ebp], 78h
mov	edx, [esp+8Ch+var_54]
mov	al, byte ptr ds:_vo[edx] 
mov	ecx, [esp+8Ch+var_70]
mov	[babbleprint+ecx], al
mov	esi, [esp+8Ch+var_58]
mov	byte ptr [babbleprint+esi], 78h
mov	esi, [esp+8Ch+new_hash]
test	esi, esi
jz	short loc_641F2BE8
mov	eax, [esi+4]
mov	[esp+8Ch+items], eax 
call	_silc_free
mov	[esp+8Ch+items], esi 
call	_silc_free
			
mov	eax, babbleprint
add	esp, 7Ch
pop	babbleprint
pop	esi
pop	check
pop	ebp
retn
align 4
mov	edx, [esp+8Ch+var_6C]
mov	dl, [esp+edx+8Ch+hval]
mov	byte ptr [esp+8Ch+var_6C], dl
mov	al, dl
shr	al, 6
movzx	eax, al
lea	check, [eax+check]
mov	edx, 0AAAAAAABh
mov	eax, edi
mul	edx
shr	edx, 2
lea	eax, [edx+edx*2]
shl	eax, 1
sub	edi, eax
mov	al, byte ptr ds:_vo[edi] 
mov	[babbleprint+ecx], al
mov	al, byte ptr [esp+8Ch+var_6C]
shr	al, 2
and	eax, 0Fh
mov	al, byte ptr ds:_co[eax] 
mov	[babbleprint+ebp], al
mov	al, byte ptr [esp+8Ch+var_6C]
and	eax, 3
add	eax, [esp+8Ch+var_54]
mov	ecx, 6
xor	edx, edx
div	ecx
mov	al, byte ptr ds:_vo[edx] 
mov	edx, [esp+8Ch+var_70]
mov	[babbleprint+edx], al
jmp	loc_641F2BC5
mov	[esp+8Ch+var_58], 4
mov	[esp+8Ch+var_70], 3
mov	ebp, 2
mov	ecx, 1
mov	[esp+8Ch+var_54], 0
mov	[esp+8Ch+var_6C], 0
mov	edi, 1
jmp	loc_641F2B95
lea	eax, [esp+8Ch+new_hash]
mov	[esp+8Ch+size],	eax 
mov	[esp+8Ch+items], offset	name 
call	_silc_hash_alloc
test	al, al
jz	short loc_641F2CCD
mov	eax, [esp+8Ch+new_hash]
mov	[esp+8Ch+hash],	eax
jmp	loc_641F29D2
mov	babbleprint, [esp+8Ch+new_hash]
mov	[esp+8Ch+items], eax 
call	_silc_hash_free
jmp	loc_641F2BE8
xor	ebx, ebx
jmp	loc_641F2BE8
public _silc_hash_fingerprint
push	esi
push	ebx
sub	esp, 54h
mov	ebx, [esp+5Ch+hash]
mov	[esp+5Ch+new_hash], 0
test	ebx, ebx
jz	short loc_641F2D60
mov	eax, [hash_0]
mov	edx, [hash_0+4]
mov	[esp+5Ch+name],	edx
call	dword ptr [eax+0Ch]
mov	eax, [hash_0]
mov	edx, [esp+5Ch+data_len]
mov	[esp+5Ch+var_54], edx
mov	edx, [esp+5Ch+data]
mov	[esp+5Ch+var_58], edx
mov	edx, [hash_0+4]
mov	[esp+5Ch+name],	edx
call	dword ptr [eax+10h]
mov	eax, [hash_0]
lea	esi, [esp+5Ch+h]
mov	[esp+5Ch+var_58], esi
mov	edx, [hash_0+4]
mov	[esp+5Ch+name],	edx
call	dword ptr [eax+14h]
mov	eax, [hash_0]
movzx	eax, word ptr [eax+8]
mov	[esp+5Ch+var_58], eax 
mov	[esp+5Ch+name],	esi 
call	_silc_fingerprint
mov	hash_0,	[esp+5Ch+new_hash]
test	ebx, ebx
jz	short loc_641F2D57
mov	edx, [ebx+4]
mov	[esp+5Ch+name],	edx 
mov	[esp+5Ch+var_40], eax
call	_silc_free
mov	[esp+5Ch+name],	ebx 
call	_silc_free
mov	eax, [esp+5Ch+var_40]
			
add	esp, 54h
pop	ebx
pop	esi
retn
align 10h
lea	eax, [esp+5Ch+new_hash]
mov	[esp+5Ch+var_58], eax 
mov	[esp+5Ch+name],	offset name 
call	_silc_hash_alloc
test	al, al
jz	short loc_641F2D81
mov	hash_0,	[esp+5Ch+new_hash]
jmp	loc_641F2CE9
xor	eax, eax
jmp	short loc_641F2D57
align 4
public _silc_hmac_len
			
mov	eax, [esp+hmac]
mov	eax, [eax]
mov	eax, [eax+4]
retn
align 4
public _silc_hmac_get_hash
mov	eax, [esp+hmac]
mov	eax, [eax+4]
retn
public _silc_hmac_get_name
			
mov	eax, [esp+hmac]
mov	eax, [eax]
mov	eax, [eax]
retn
align 4
public _silc_hmac_get_key
mov	eax, [esp+hmac]
mov	edx, [esp+key_len]
test	edx, edx
jz	short loc_641F2DC2
mov	ecx, [hmac_0+8Ch]
and	ecx, 7FFFFFFFh
mov	[key_len_0], ecx
mov	hmac_0,	[hmac_0+88h]
retn
align 4
public _silc_hmac_update
			
sub	esp, 0Ch
mov	eax, [esp+0Ch+hmac]
mov	eax, [eax+4]
mov	[esp+0Ch+hmac],	eax
add	esp, 0Ch
jmp	_silc_hash_update
align 4
public _silc_hmac_final
			
push	ebp
push	edi
push	esi
push	ebx
sub	esp, 5Ch
mov	ebp, [esp+6Ch+hmac]
mov	esi, [ebp+4]
lea	ebx, [esp+6Ch+mac]
mov	[esp+6Ch+data],	ebx 
mov	[esp+6Ch+var_6C], hash 
call	_silc_hash_final
mov	[esp+6Ch+var_6C], hash 
call	_silc_hash_init
mov	[esp+6Ch+var_6C], hash 
call	_silc_hash_block_len
mov	[esp+6Ch+data_len], eax	
lea	eax, [ebp+48h]
mov	[esp+6Ch+data],	eax 
mov	[esp+6Ch+var_6C], hash 
call	_silc_hash_update
mov	[esp+6Ch+var_6C], hash 
call	_silc_hash_len
mov	[esp+6Ch+data_len], eax	
mov	[esp+6Ch+data],	ebx 
mov	[esp+6Ch+var_6C], hash 
call	_silc_hash_update
mov	[esp+6Ch+data],	ebx 
mov	[esp+6Ch+var_6C], hash 
call	_silc_hash_final
mov	eax, [ebp+0]
mov	ecx, [eax+4]
mov	edi, [esp+6Ch+return_hash]
mov	hash, ebx
rep movsb
mov	cl, 40h
xor	eax, eax
mov	return_hash_0, ebx
rep stosb
mov	eax, [esp+6Ch+return_len]
test	eax, eax
jz	short loc_641F2E73
mov	eax, [hmac_0+0]
mov	eax, [eax+4]
mov	edx, [esp+6Ch+return_len]
mov	[edx], eax
add	esp, 5Ch
pop	ebx
pop	esi
pop	edi
pop	hmac_0
retn
align 4
			
push	ebp
push	edi
push	esi
push	ebx
sub	esp, 6Ch
mov	ebx, hmac
mov	[esp+7Ch+var_68], key_len
mov	esi, [hmac+4]
lea	hmac, [hmac+8]
mov	[esp+7Ch+var_60], eax
xor	eax, eax
mov	key_len, 40h
mov	edi, [esp+7Ch+var_60]
rep stosb
lea	ecx, [hmac+48h]
mov	[esp+7Ch+var_64], ecx
mov	ecx, 40h
mov	edi, [esp+7Ch+var_64]
rep stosb
mov	[esp+7Ch+var_7C], hash 
mov	[esp+7Ch+var_6C], key
call	_silc_hash_block_len
mov	ebp, eax
cmp	eax, [esp+7Ch+var_68]
mov	edx, [esp+7Ch+var_6C]
jb	short loc_641F2F39
mov	edi, [esp+7Ch+var_60]
mov	hash, key
mov	ecx, [esp+7Ch+var_68]
rep movsb
mov	edi, [esp+7Ch+var_64]
mov	key, edx
mov	key_len, [esp+7Ch+var_68]
rep movsb
test	block_len, block_len
jz	short loc_641F2F31
mov	key_len, block_len
shr	ecx, 2
lea	edx, ds:0[ecx*4]
cmp	block_len, 3
jbe	short loc_641F2EFB
test	edx, edx
jnz	short loc_641F2F00
xor	edx, edx
jmp	short loc_641F2F1D
align 10h
xor	eax, eax
xchg	ax, ax
xor	dword ptr [hmac+eax*4+8], 36363636h
xor	dword ptr [hmac+eax*4+48h], 5C5C5C5Ch
inc	eax
cmp	eax, ecx
jb	short loc_641F2F04
cmp	edx, block_len
jz	short loc_641F2F31
lea	eax, [hmac+i+8]
lea	key, [key+0]
xor	byte ptr [eax],	36h
xor	byte ptr [eax+40h], 5Ch
inc	i
inc	eax
cmp	block_len, i
ja	short loc_641F2F24
			
add	esp, 6Ch
pop	hmac
pop	key
pop	edi
pop	block_len
retn
lea	edi, [esp+7Ch+hvalue]
mov	[esp+7Ch+return_hash], edi 
mov	block_len, [esp+7Ch+var_68]
mov	[esp+7Ch+len], eax 
mov	[esp+7Ch+data],	edx 
mov	[esp+7Ch+var_7C], hash 
call	_silc_hash_make
mov	[esp+7Ch+var_7C], hash 
call	_silc_hash_len
mov	[esp+7Ch+var_68], eax
mov	edx, edi
jmp	loc_641F2ECA
public _silc_hmac_init_with_key
			
push	esi
push	ebx
sub	esp, 14h
mov	esi, [esp+1Ch+hmac]
mov	ebx, [esi+4]
mov	ecx, [esp+1Ch+key_len] 
mov	edx, [esp+1Ch+key] 
mov	eax, esi	
call	_silc_hmac_init_internal
mov	[esp+1Ch+var_1C], hash 
call	_silc_hash_init
mov	[esp+1Ch+var_1C], hash 
call	_silc_hash_block_len
mov	[esp+1Ch+key_len], eax
add	esi, 8
mov	[esp+1Ch+key], esi
mov	[esp+1Ch+hmac],	hash
add	esp, 14h
pop	hash
pop	esi
jmp	_silc_hash_update
public _silc_hmac_unregister
push	ebp
push	edi
push	esi
push	ebx
sub	esp, 3Ch
mov	edi, [esp+4Ch+hmac]
mov	eax, ds:_silc_hmac_list
test	eax, eax
jz	loc_641F3213
mov	ecx, [eax]
mov	[eax+8], ecx
mov	bl, [eax+10h]
and	ebx, 0FFFFFFFDh
mov	[eax+10h], bl
mov	dword ptr [eax+18h], 0
mov	dword ptr [eax+14h], 0
cmp	hmac_0,	1
jz	short loc_641F3022
xor	edx, edx
jmp	short loc_641F3007
align 4
movzx	entry, word ptr	[eax+0Ch]
mov	esi, [edx+esi]
mov	[eax+8], esi
mov	[eax+14h], edx
mov	esi, [edx]
test	entry, entry
jz	loc_641F3213
cmp	entry, hmac_0
jz	short loc_641F3044
mov	[eax+18h], edx
mov	edx, [eax+8]
test	edx, edx
jnz	short loc_641F2FEC
mov	dword ptr [eax+14h], 0
xor	eax, eax
add	esp, 3Ch
pop	ebx
pop	entry
pop	hmac_0
pop	ebp
retn
mov	dword ptr [eax+18h], 0
test	ecx, ecx
jz	short loc_641F3011
movzx	edx, word ptr [eax+0Ch]
mov	edx, [ecx+edx]
mov	[eax+8], edx
mov	[eax+14h], ecx
mov	esi, [ecx]
test	entry, entry
jz	loc_641F3213
mov	edx, ecx
mov	[eax+8], ecx
and	ebx, 0FFFFFFFDh
mov	[eax+10h], bl
test	edx, edx
jz	short loc_641F306B
movzx	ebx, word ptr [eax+0Ch]
mov	ebx, [edx+ebx]
mov	[eax+8], ebx
cmp	entry, [edx]
jz	loc_641F3107
mov	edx, ebx
test	edx, edx
jnz	short loc_641F3053
			
mov	eax, [entry]
mov	[esp+4Ch+ptr], eax 
call	_silc_free
mov	[esp+4Ch+ptr], entry 
call	_silc_free
mov	hmac_0,	ds:_silc_hmac_list
mov	eax, [edi+10h]
shr	eax, 2
jnz	short loc_641F30FD
mov	ebx, [edi]
mov	[edi+8], ebx
and	byte ptr [edi+10h], 0FDh
test	ebx, ebx
jz	short loc_641F30EB
test	byte ptr [edi+10h], 2
jz	loc_641F3194
movzx	eax, word ptr [edi+0Eh]
mov	eax, [ebx+eax]
mov	[edi+8], eax
mov	edx, [edi]
test	edx, edx
jz	short loc_641F30D3
cmp	ebx, edx
jz	loc_641F3157
movzx	entry, word ptr	[edi+0Ch]
jmp	short loc_641F30CA
cmp	ebx, eax
jz	loc_641F3160
mov	edx, eax
lea	ecx, [edx+esi]
mov	eax, [ecx]
test	eax, eax
jnz	short loc_641F30C0
cmp	ebx, [edi+4]
jz	loc_641F318B
			
mov	[esp+4Ch+ptr], ebx 
call	_silc_free
mov	ebx, [edi+8]
test	ebx, ebx
jnz	short loc_641F3098
mov	[esp+4Ch+ptr], edi 
call	_silc_free
mov	ds:_silc_hmac_list, 0
mov	al, 1
add	esp, 3Ch
pop	ebx
pop	entry
pop	edi
pop	ebp
retn
test	ecx, ecx
jz	short loc_641F312F
cmp	edx, ecx
jz	loc_641F3205
movzx	ebp, word ptr [eax+0Ch]
jmp	short loc_641F3126
align 4
cmp	edx, edi
jz	loc_641F31A7
mov	ecx, edi
lea	ebx, [ecx+ebp]
mov	edi, [ebx]
test	edi, edi
jnz	short loc_641F311C
cmp	edx, [eax+4]
jz	loc_641F31DA
			
cmp	edx, [eax+14h]
jz	loc_641F31EE
cmp	edx, [eax+18h]
jz	loc_641F31E2
mov	[esp+4Ch+ptr], edx 
call	_silc_free
jmp	loc_641F306B
movzx	entry, word ptr	[edi+0Ch]
mov	ecx, edi
xor	edx, edx
nop
mov	eax, [ebx+esi]
mov	[ecx], eax
test	eax, eax
jz	short loc_641F3179
test	byte ptr [edi+10h], 1
jz	short loc_641F3179
movzx	esi, word ptr [edi+0Eh]
mov	ebp, [ebx+esi]
mov	[eax+esi], ebp
			
cmp	ebx, [edi+8]
jz	short loc_641F31A0
sub	dword ptr [edi+10h], 4
cmp	ebx, [edi+4]
jnz	loc_641F30DC
mov	[edi+4], edx
jmp	loc_641F30DC
align 4
movzx	eax, word ptr [edi+0Ch]
mov	eax, [ebx+eax]
jmp	loc_641F30A9
mov	eax, [ecx]
mov	[edi+8], eax
jmp	short loc_641F317E
mov	[esp+4Ch+var_30], ebx
mov	edi, [edx+ebp]
mov	[ebx], edi
test	edi, edi
jz	short loc_641F31BA
test	byte ptr [eax+10h], 1
jnz	short loc_641F31CE
			
cmp	edx, [eax+8]
jz	short loc_641F31FA
sub	dword ptr [eax+10h], 4
cmp	edx, [eax+4]
jnz	loc_641F3138
jmp	short loc_641F31DA
movzx	ebp, word ptr [eax+0Eh]
mov	ebx, [edx+ebp]
mov	[edi+ebp], ebx
jmp	short loc_641F31BA
			
mov	[eax+4], ecx
jmp	loc_641F3138
mov	dword ptr [eax+18h], 0
jmp	loc_641F314A
mov	dword ptr [eax+14h], 0
jmp	loc_641F3141
mov	edi, [esp+4Ch+var_30]
mov	ebx, [edi]
mov	[eax+8], ebx
jmp	short loc_641F31BF
mov	[esp+4Ch+var_30], eax
movzx	ebp, word ptr [eax+0Ch]
xor	ecx, ecx
mov	ebx, eax
jmp	short loc_641F31AB
			
xor	eax, eax
jmp	loc_641F301A
align 4
public _silc_hmac_unregister_all
sub	esp, 1Ch
mov	eax, ds:_silc_hmac_list
test	eax, eax
jz	short loc_641F3286
mov	edx, [eax]
mov	[eax+8], edx
and	byte ptr [eax+10h], 0FDh
mov	dword ptr [eax+18h], 0
mov	dword ptr [eax+14h], 0
xor	edx, edx
jmp	short loc_641F326B
align 4
movzx	ecx, word ptr [eax+0Eh]
mov	ecx, [edx+ecx]
mov	[eax+8], ecx
mov	[eax+14h], edx
mov	eax, [edx]
test	entry, entry
jz	short loc_641F3284
mov	[esp+1Ch+hmac],	entry 
call	_silc_hmac_unregister
mov	eax, ds:_silc_hmac_list
test	eax, eax
jz	short loc_641F3284
mov	edx, [eax+14h]
mov	[eax+18h], edx
mov	edx, [eax+8]
test	edx, edx
jz	short loc_641F328C
test	byte ptr [eax+10h], 2
jnz	short loc_641F3244
movzx	ecx, word ptr [eax+0Ch]
mov	ecx, [edx+ecx]
jmp	short loc_641F324B
			
mov	al, 1
add	esp, 1Ch
retn
align 4
mov	dword ptr [eax+14h], 0
mov	al, 1
add	esp, 1Ch
retn
align 4
public _silc_hmac_set_key
			
push	ebp
push	edi
push	esi
push	ebx
sub	esp, 1Ch
mov	ebx, [esp+2Ch+hmac]
mov	esi, [esp+2Ch+key]
mov	ebp, [esp+2Ch+key_len]
mov	edx, [ebx+88h]
test	edx, edx
jz	short loc_641F32D9
mov	ecx, [hmac_0+8Ch]
and	ecx, 7FFFFFFFh
xor	eax, eax
mov	edi, edx
rep stosb
mov	eax, [hmac_0+88h]
mov	[esp+2Ch+ptr], eax 
call	_silc_free
mov	[esp+2Ch+ptr], key_len_0 
call	_silc_malloc
mov	[hmac_0+88h], eax
test	eax, eax
jz	short loc_641F330D
mov	ecx, key_len_0
and	ecx, 7FFFFFFFh
mov	edx, [hmac_0+8Ch]
and	edx, 80000000h
or	edx, ecx
mov	[hmac_0+8Ch], edx
mov	edi, eax
mov	ecx, key_len_0
rep movsb
add	esp, 1Ch
pop	hmac_0
pop	key_0
pop	edi
pop	ebp
retn
align 4
public _silc_hmac_get_supported
push	ebp
push	edi
push	esi
push	ebx
sub	esp, 2Ch
mov	eax, ds:_silc_hmac_list
test	eax, eax
jz	loc_641F33F0
mov	edx, [eax]
mov	[eax+8], edx
and	byte ptr [eax+10h], 0FDh
mov	dword ptr [eax+18h], 0
mov	dword ptr [eax+14h], 0
xor	ecx, ecx
xor	ebp, ebp
xor	edx, edx
mov	[esp+3Ch+var_20], len
jmp	short loc_641F33B8
align 10h
movzx	entry, word ptr	[eax+0Eh]
mov	ebx, [ecx+ebx]
mov	[eax+8], ebx
mov	[eax+14h], ecx
mov	ebx, [ecx]
test	entry, entry
jz	loc_641F3404
mov	edi, [entry]
mov	ecx, 0FFFFFFFFh
xor	eax, eax
repne scasb
not	ecx
mov	eax, [esp+3Ch+var_20]
lea	len, [eax+ecx-1]
lea	eax, [ebp+1]
mov	[esp+3Ch+var_20], eax
mov	[esp+3Ch+size],	eax 
mov	[esp+3Ch+ptr], list 
call	_silc_realloc
mov	edx, eax
mov	esi, [entry]
mov	ecx, 0FFFFFFFFh
mov	edi, esi
xor	eax, eax
repne scasb
not	ecx
dec	ecx
mov	eax, ebp
sub	eax, ecx
lea	eax, [list+eax]
mov	edi, eax
rep movsb
mov	byte ptr [list+ebp], 2Ch
mov	eax, ds:_silc_hmac_list
mov	ecx, [eax+14h]
mov	[eax+18h], ecx
mov	ecx, [eax+8]
test	ecx, ecx
jz	short loc_641F33D4
test	byte ptr [eax+10h], 2
jnz	short loc_641F3350
movzx	entry, word ptr	[eax+0Ch]
mov	ebx, [ecx+ebx]
jmp	short loc_641F3357
align 4
mov	len, [esp+3Ch+var_20]
mov	dword ptr [eax+14h], 0
lea	eax, [list+len-1]
mov	byte ptr [eax],	0
mov	eax, list
add	esp, 2Ch
pop	entry
pop	esi
pop	edi
pop	len
retn
mov	eax, 0FFFFFFFFh
xor	edx, edx
mov	byte ptr [eax],	0
mov	eax, list
add	esp, 2Ch
pop	ebx
pop	esi
pop	edi
pop	ebp
retn
mov	len, [esp+3Ch+var_20]
lea	eax, [list+len-1]
jmp	short loc_641F33E3
align 10h
public _silc_hmac_is_supported
push	edi
push	esi
push	ebx
sub	esp, 10h
mov	edi, [esp+1Ch+name]
test	edi, edi
jz	short loc_641F349D
mov	ebx, ds:_silc_hmac_list
test	ebx, ebx
jz	short loc_641F349D
mov	eax, [ebx]
mov	[ebx+8], eax
and	byte ptr [ebx+10h], 0FDh
mov	dword ptr [ebx+18h], 0
mov	dword ptr [ebx+14h], 0
xor	esi, esi
jmp	short loc_641F3469
align 4
movzx	eax, word ptr [ebx+0Eh]
mov	eax, [esi+eax]
mov	[ebx+8], eax
mov	[ebx+14h], esi
mov	eax, [esi]
test	entry, entry
jz	short loc_641F349D
mov	entry, [entry]
mov	[esp+1Ch+var_18], name_0 
mov	[esp+1Ch+var_1C], eax 
call	_strcmp
test	eax, eax
jz	short loc_641F3494
mov	[ebx+18h], esi
mov	esi, [ebx+8]
test	esi, esi
jz	short loc_641F3484
test	byte ptr [ebx+10h], 2
jnz	short loc_641F3444
movzx	eax, word ptr [ebx+0Ch]
mov	eax, [esi+eax]
jmp	short loc_641F344B
align 4
mov	dword ptr [ebx+14h], 0
xor	eax, eax
add	esp, 10h
pop	ebx
pop	esi
pop	name_0
retn
mov	al, 1
add	esp, 10h
pop	ebx
pop	esi
pop	name_0
retn
			
xor	entry, entry
jmp	short loc_641F348D
align 4
public _silc_hmac_free
			
push	edi
push	ebx
sub	esp, 14h
mov	ebx, [esp+1Ch+hmac]
test	ebx, ebx
jz	short loc_641F3504
cmp	byte ptr [hmac_0+8Fh], 0
js	short loc_641F34F4
mov	edx, [hmac_0+88h]
test	edx, edx
jz	short loc_641F34E4
mov	ecx, [hmac_0+8Ch]
and	ecx, 7FFFFFFFh
xor	eax, eax
mov	edi, edx
rep stosb
mov	eax, [hmac_0+88h]
mov	[esp+1Ch+ptr], eax 
call	_silc_free
mov	[esp+1Ch+hmac],	hmac_0
add	esp, 14h
pop	hmac_0
pop	edi
jmp	_silc_free
align 4
mov	eax, [hmac_0+4]
mov	[esp+1Ch+ptr], eax 
call	_silc_hash_free
jmp	short loc_641F34BA
align 4
add	esp, 14h
pop	hmac_0
pop	edi
retn
align 4
public _silc_hmac_alloc
			
push	ebp
push	edi
push	esi
push	ebx
sub	esp, 1Ch
mov	ebp, [esp+2Ch+name]
mov	[esp+2Ch+size],	90h 
mov	[esp+2Ch+items], 1 
call	_silc_calloc
mov	edx, [esp+2Ch+new_hmac]
mov	[edx], eax
test	eax, eax
jz	loc_641F35D1
mov	edx, [esp+2Ch+hash]
test	edx, edx
jz	loc_641F35F0
mov	[eax+4], edx
mov	tmp, ds:_silc_hmac_list
test	ebx, ebx
jz	short loc_641F35B7
mov	eax, [ebx]
mov	[ebx+8], eax
and	byte ptr [ebx+10h], 0FDh
mov	dword ptr [ebx+18h], 0
mov	dword ptr [ebx+14h], 0
xor	hname, hname
jmp	short loc_641F3595
align 10h
movzx	eax, word ptr [ebx+0Eh]
mov	eax, [esi+eax]
mov	[ebx+8], eax
mov	[ebx+14h], esi
mov	entry, [esi]
test	entry, entry
jz	short loc_641F35B7
mov	eax, [entry]
mov	[esp+2Ch+size],	name_0 
mov	[esp+2Ch+items], eax 
call	_strcmp
test	eax, eax
jz	short loc_641F35DC
mov	[ebx+18h], esi
mov	esi, [ebx+8]
test	esi, esi
jz	short loc_641F35B0
test	byte ptr [ebx+10h], 2
jnz	short loc_641F3570
movzx	eax, word ptr [ebx+0Ch]
mov	eax, [esi+eax]
jmp	short loc_641F3577
align 10h
mov	dword ptr [ebx+14h], 0
			
mov	edx, [esp+2Ch+new_hmac]
mov	eax, [edx]
mov	[esp+2Ch+items], eax 
call	_silc_free
mov	eax, [esp+2Ch+new_hmac]
mov	dword ptr [eax], 0
xor	eax, eax
add	esp, 1Ch
pop	tmp
pop	hname
pop	entry
pop	name_0
retn
align 4
mov	edx, [esp+2Ch+new_hmac]
mov	eax, [edx]
mov	[eax], entry
mov	al, 1
add	esp, 1Ch
pop	ebx
pop	esi
pop	entry
pop	name_0
retn
align 10h
mov	[esp+2Ch+items], name_0	
call	_strdup
mov	ebx, eax
mov	[esp+2Ch+size],	2Dh 
mov	[esp+2Ch+items], eax 
call	_strchr
test	eax, eax
jz	short loc_641F366D
lea	esi, [eax+1]
mov	[esp+2Ch+size],	2Dh 
mov	[esp+2Ch+items], hname 
call	_strchr
test	eax, eax
jz	short loc_641F3628
mov	byte ptr [eax],	0
			
lea	eax, [esp+2Ch+hash]
mov	[esp+2Ch+size],	eax 
mov	[esp+2Ch+items], hname 
call	_silc_hash_alloc
test	al, al
jz	short loc_641F3660
mov	edx, [esp+2Ch+new_hmac]
mov	eax, [edx]
or	byte ptr [eax+8Fh], 80h
mov	[esp+2Ch+items], tmp 
call	_silc_free
mov	edx, [esp+2Ch+new_hmac]
mov	eax, [edx]
mov	edx, [esp+2Ch+hash]
jmp	loc_641F3545
mov	[esp+2Ch+items], tmp 
call	_silc_free
jmp	loc_641F35B7
mov	esi, tmp
jmp	short loc_641F3628
align 4
public _silc_hmac_register
push	edi
push	esi
push	ebx
sub	esp, 10h
mov	edi, [esp+1Ch+hmac]
mov	ebx, ds:_silc_hmac_list
test	ebx, ebx
jz	short loc_641F36EF
mov	eax, [ebx]
mov	[ebx+8], eax
and	byte ptr [ebx+10h], 0FDh
mov	dword ptr [ebx+18h], 0
mov	dword ptr [ebx+14h], 0
xor	esi, esi
jmp	short loc_641F36CF
align 4
movzx	eax, word ptr [ebx+0Eh]
mov	eax, [esi+eax]
mov	[ebx+8], eax
mov	[ebx+14h], esi
mov	eax, [esi]
test	entry, entry
jz	short loc_641F36EF
mov	entry, [entry]
mov	edx, [hmac_0]
mov	[esp+1Ch+size],	edx 
mov	[esp+1Ch+items], eax 
call	_strcmp
test	eax, eax
jz	loc_641F3770
mov	[ebx+18h], esi
mov	esi, [ebx+8]
test	esi, esi
jz	short loc_641F36E8
test	byte ptr [ebx+10h], 2
jnz	short loc_641F36A4
movzx	eax, word ptr [ebx+0Ch]
mov	eax, [esi+eax]
jmp	short loc_641F36AB
mov	dword ptr [ebx+14h], 0
			
mov	[esp+1Ch+size],	8
mov	[esp+1Ch+items], 1 
call	_silc_calloc
mov	esi, eax
test	eax, eax
jz	short loc_641F3770
mov	new, [hmac_0]
mov	[esp+1Ch+items], eax 
call	_strdup
mov	[new], eax
mov	eax, [hmac_0+4]
mov	[new+4], eax
mov	ebx, ds:_silc_hmac_list
test	ebx, ebx
jz	short loc_641F3781
mov	[esp+1Ch+items], 0Ch 
call	_silc_malloc
test	eax, eax
jz	short loc_641F3765
mov	[eax], new
mov	edx, [ebx]
test	edx, edx
jz	short loc_641F3779
movzx	edx, word ptr [ebx+0Ch]
mov	ecx, [ebx+4]
mov	[ecx+edx], eax
test	byte ptr [ebx+10h], 1
jz	short loc_641F3757
movzx	ecx, word ptr [ebx+0Eh]
mov	new, [ebx+4]
mov	[eax+ecx], esi
mov	[ebx+4], eax
mov	dword ptr [eax+edx], 0
add	dword ptr [ebx+10h], 4
mov	al, 1
add	esp, 10h
pop	ebx
pop	new
pop	hmac_0
retn
align 10h
			
xor	new, new
add	esp, 10h
pop	ebx
pop	new
pop	hmac_0
retn
mov	[ebx], eax
movzx	edx, word ptr [ebx+0Ch]
jmp	short loc_641F3747
mov	[esp+1Ch+items], 1Ch 
call	_silc_malloc
mov	ebx, eax
test	eax, eax
jz	short loc_641F37CE
mov	dword ptr [eax+18h], 0
mov	dword ptr [eax+14h], 0
mov	eax, [eax+10h]
and	eax, 3
mov	[ebx+10h], eax
mov	word ptr [ebx+0Ch], 4
mov	word ptr [ebx+0Eh], 8
mov	byte ptr [ebx+10h], 1
mov	dword ptr [ebx+8], 0
mov	dword ptr [ebx+4], 0
mov	dword ptr [ebx], 0
mov	ds:_silc_hmac_list, ebx
jmp	loc_641F3725
align 4
public _silc_hmac_register_default
push	ebx
sub	esp, 18h
mov	ecx, ds:_silc_default_hmacs.name
test	ecx, ecx
jz	short loc_641F3802
mov	ebx, offset _silc_default_hmacs
nop
mov	[esp+1Ch+hmac],	ebx 
call	_silc_hmac_register
mov	eax, [ebx+8]
add	ebx, 8
test	eax, eax
jnz	short loc_641F37F0
mov	al, 1
add	esp, 18h
pop	ebx
retn
align 4
public _silc_hmac_init
			
push	esi
push	ebx
sub	esp, 14h
mov	ebx, [esp+1Ch+hmac]
mov	esi, [ebx+4]
mov	ecx, [ebx+8Ch]
and	ecx, 7FFFFFFFh	
mov	edx, [ebx+88h]	
mov	eax, ebx	
call	_silc_hmac_init_internal
mov	[esp+1Ch+hash],	esi 
call	_silc_hash_init
mov	[esp+1Ch+hash],	esi 
call	_silc_hash_block_len
mov	[esp+1Ch+data_len], eax	
add	ebx, 8
mov	[esp+1Ch+data],	ebx 
mov	[esp+1Ch+hash],	esi 
call	_silc_hash_update
add	esp, 14h
pop	ebx
pop	esi
retn
align 4
public _silc_hmac_make_with_key
push	ebp
push	edi
push	esi
push	ebx
sub	esp, 2Ch
mov	ebx, [esp+3Ch+hmac]
mov	ebp, [esp+3Ch+data]
mov	edi, [esp+3Ch+data_len]
mov	eax, [esp+3Ch+return_hash]
mov	[esp+3Ch+var_24], eax
mov	eax, [esp+3Ch+return_len]
mov	[esp+3Ch+var_20], eax
mov	esi, [ebx+4]
mov	ecx, [esp+3Ch+key_len] 
mov	edx, [esp+3Ch+key] 
mov	eax, ebx	
call	_silc_hmac_init_internal
mov	[esp+3Ch+hash],	esi 
call	_silc_hash_init
mov	[esp+3Ch+hash],	esi 
call	_silc_hash_block_len
mov	[esp+3Ch+var_34], eax 
lea	eax, [ebx+8]
mov	[esp+3Ch+var_38], eax 
mov	[esp+3Ch+hash],	esi 
call	_silc_hash_update
mov	[esp+3Ch+var_34], edi 
mov	[esp+3Ch+var_38], ebp 
mov	eax, [ebx+4]
mov	[esp+3Ch+hash],	eax 
call	_silc_hash_update
mov	eax, [esp+3Ch+var_20]
mov	[esp+3Ch+data_len], eax
mov	eax, [esp+3Ch+var_24]
mov	[esp+3Ch+data],	eax
mov	[esp+3Ch+hmac],	ebx
add	esp, 2Ch
pop	ebx
pop	esi
pop	edi
pop	ebp
jmp	_silc_hmac_final
align 4
public _silc_hmac_make
push	ebp
push	edi
push	esi
push	ebx
sub	esp, 2Ch
mov	ebx, [esp+3Ch+hmac]
mov	ebp, [esp+3Ch+data]
mov	edi, [esp+3Ch+data_len]
mov	eax, [esp+3Ch+return_hash]
mov	[esp+3Ch+var_24], eax
mov	eax, [esp+3Ch+return_len]
mov	[esp+3Ch+var_20], eax
mov	esi, [ebx+4]
mov	ecx, [ebx+8Ch]
and	ecx, 7FFFFFFFh	
mov	edx, [ebx+88h]	
mov	eax, ebx	
call	_silc_hmac_init_internal
mov	[esp+3Ch+hash],	esi 
call	_silc_hash_init
mov	[esp+3Ch+hash],	esi 
call	_silc_hash_block_len
mov	[esp+3Ch+var_34], eax 
lea	eax, [ebx+8]
mov	[esp+3Ch+var_38], eax 
mov	[esp+3Ch+hash],	esi 
call	_silc_hash_update
mov	[esp+3Ch+var_34], edi 
mov	[esp+3Ch+var_38], ebp 
mov	eax, [ebx+4]
mov	[esp+3Ch+hash],	eax 
call	_silc_hash_update
mov	eax, [esp+3Ch+var_20]
mov	[esp+3Ch+data_len], eax
mov	eax, [esp+3Ch+var_24]
mov	[esp+3Ch+data],	eax
mov	[esp+3Ch+hmac],	ebx
add	esp, 2Ch
pop	ebx
pop	esi
pop	edi
pop	ebp
jmp	_silc_hmac_final
align 10h
public _silc_hmac_make_truncated
push	ebp
push	edi
push	esi
push	ebx
sub	esp, 5Ch
mov	ebx, [esp+6Ch+hmac]
mov	ebp, [esp+6Ch+return_hash]
mov	esi, [ebx+4]
mov	ecx, [ebx+8Ch]
and	ecx, 7FFFFFFFh	
mov	edx, [ebx+88h]	
mov	eax, ebx	
call	_silc_hmac_init_internal
mov	[esp+6Ch+hash],	esi 
call	_silc_hash_init
mov	[esp+6Ch+hash],	esi 
call	_silc_hash_block_len
mov	[esp+6Ch+var_64], eax 
lea	eax, [ebx+8]
mov	[esp+6Ch+var_68], eax 
mov	[esp+6Ch+hash],	esi 
call	_silc_hash_update
mov	eax, [esp+6Ch+data_len]
mov	[esp+6Ch+var_64], eax 
mov	eax, [esp+6Ch+data]
mov	[esp+6Ch+var_68], eax 
mov	eax, [ebx+4]
mov	[esp+6Ch+hash],	eax 
call	_silc_hash_update
mov	[esp+6Ch+var_64], 0 
mov	[esp+6Ch+var_68], ebp 
mov	[esp+6Ch+hash],	ebx 
call	_silc_hmac_final
lea	esi, [esp+6Ch+hvalue]
mov	edi, ebp
mov	ecx, [esp+6Ch+truncated_len]
rep movsb
add	esp, 5Ch
pop	ebx
pop	esi
pop	return_hash_0
pop	ebp
retn
public _silc_pkcs_silc_get_algorithm
mov	eax, [esp+public_key]
mov	eax, [eax+1Ch]
retn
public _silc_pkcs_silc_public_key_bitlen
sub	esp, 0Ch
mov	eax, [esp+0Ch+public_key]
mov	edx, [eax+1Ch]
mov	eax, [eax+20h]
mov	[esp+0Ch+public_key], eax
mov	eax, [edx+18h]
add	esp, 0Ch
jmp	eax
align 4
public _silc_pkcs_silc_private_key_bitlen
sub	esp, 0Ch
mov	eax, [esp+0Ch+private_key]
mov	edx, [eax]
mov	eax, [eax+4]
mov	[esp+0Ch+private_key], eax
mov	eax, [edx+30h]
add	esp, 0Ch
jmp	eax
public _silc_pkcs_silc_encrypt
push	ebp
push	edi
push	esi
push	ebx
sub	esp, 1Ch
mov	edx, [esp+2Ch+public_key]
mov	eax, [esp+2Ch+src]
mov	[esp+2Ch+var_20], eax
mov	ecx, [esp+2Ch+src_len]
mov	ebx, [esp+2Ch+dst]
mov	esi, [esp+2Ch+dst_size]
mov	edi, [esp+2Ch+ret_dst_len]
mov	ebp, [esp+2Ch+rng]
mov	eax, [edx+1Ch]
mov	eax, [eax+38h]
test	eax, eax
jz	short loc_641F3AB0
mov	[esp+2Ch+rng], rng_0
mov	[esp+2Ch+ret_dst_len], ret_dst_len_0
mov	[esp+2Ch+dst_size], dst_size_0
mov	[esp+2Ch+dst], dst_0
mov	[esp+2Ch+src_len], src_len_0
mov	src_len_0, [esp+2Ch+var_20]
mov	[esp+2Ch+src], ecx
mov	public_key_0, [public_key_0+20h]
mov	[esp+2Ch+public_key], edx
add	esp, 1Ch
pop	dst_0
pop	dst_size_0
pop	ret_dst_len_0
pop	rng_0
jmp	eax
align 10h
add	esp, 1Ch
pop	dst_0
pop	dst_size_0
pop	ret_dst_len_0
pop	rng_0
retn
public _silc_pkcs_silc_decrypt
push	ebp
push	edi
push	esi
push	ebx
sub	esp, 0Ch
mov	edx, [esp+1Ch+private_key]
mov	ecx, [esp+1Ch+src]
mov	ebx, [esp+1Ch+src_len]
mov	esi, [esp+1Ch+dst]
mov	edi, [esp+1Ch+dst_size]
mov	ebp, [esp+1Ch+ret_dst_len]
mov	eax, [edx]
mov	eax, [eax+3Ch]
test	eax, eax
jz	short loc_641F3B04
mov	[esp+1Ch+ret_dst_len], ret_dst_len_0
mov	[esp+1Ch+dst_size], dst_size_0
mov	[esp+1Ch+dst], dst_0
mov	[esp+1Ch+src_len], src_len_0
mov	[esp+1Ch+src], src_0
mov	private_key_0, [private_key_0+4]
mov	[esp+1Ch+private_key], edx
add	esp, 0Ch
pop	src_len_0
pop	dst_0
pop	dst_size_0
pop	ret_dst_len_0
jmp	eax
add	esp, 0Ch
pop	src_len_0
pop	dst_0
pop	dst_size_0
pop	ret_dst_len_0
retn
public _silc_pkcs_silc_sign
push	ebp
push	edi
push	esi
push	ebx
sub	esp, 1Ch
mov	edx, [esp+2Ch+private_key]
mov	eax, [esp+2Ch+src]
mov	[esp+2Ch+var_24], eax
mov	ecx, [esp+2Ch+src_len]
mov	ebx, [esp+2Ch+signature]
mov	esi, [esp+2Ch+signature_size]
mov	edi, [esp+2Ch+ret_signature_len]
mov	ebp, [esp+2Ch+hash]
mov	al, byte ptr [esp+2Ch+compute_hash]
mov	[esp+2Ch+var_1D], al
mov	eax, [edx]
mov	eax, [eax+40h]
test	eax, eax
jz	short loc_641F3B7C
mov	[esp+2Ch+hash],	hash_0
movzx	hash_0,	[esp+2Ch+var_1D]
mov	[esp+2Ch+compute_hash],	compute_hash_0
mov	[esp+2Ch+ret_signature_len], ret_signature_len_0
mov	[esp+2Ch+signature_size], signature_size_0
mov	[esp+2Ch+signature], signature_0
mov	[esp+2Ch+src_len], src_len_0
mov	src_len_0, [esp+2Ch+var_24]
mov	[esp+2Ch+src], ecx
mov	private_key_0, [private_key_0+4]
mov	[esp+2Ch+private_key], edx
add	esp, 1Ch
pop	signature_0
pop	signature_size_0
pop	ret_signature_len_0
pop	compute_hash_0
jmp	eax
align 4
add	esp, 1Ch
pop	signature_0
pop	signature_size_0
pop	ret_signature_len_0
pop	hash_0
retn
public _silc_pkcs_silc_verify
push	ebp
push	edi
push	esi
push	ebx
sub	esp, 0Ch
mov	edx, [esp+1Ch+public_key]
mov	ecx, [esp+1Ch+signature]
mov	ebx, [esp+1Ch+signature_len]
mov	esi, [esp+1Ch+data]
mov	edi, [esp+1Ch+data_len]
mov	ebp, [esp+1Ch+hash]
mov	eax, [edx+1Ch]
mov	eax, [eax+44h]
test	eax, eax
jz	short loc_641F3BD4
mov	[esp+1Ch+hash],	hash_0
mov	[esp+1Ch+data_len], data_len_0
mov	[esp+1Ch+data],	data_0
mov	[esp+1Ch+signature_len], signature_len_0
mov	[esp+1Ch+signature], signature_0
mov	public_key_0, [public_key_0+20h]
mov	[esp+1Ch+public_key], edx
add	esp, 0Ch
pop	signature_len_0
pop	data_0
pop	data_len_0
pop	hash_0
jmp	eax
align 4
add	esp, 0Ch
pop	signature_len_0
pop	data_0
pop	data_len_0
pop	hash_0
retn
public _silc_pkcs_silc_private_key_free
push	ebx
sub	esp, 18h
mov	ebx, [esp+1Ch+private_key]
mov	eax, [ebx]
mov	edx, [ebx+4]
mov	[esp+1Ch+var_1C], edx
call	dword ptr [eax+34h]
mov	[esp+1Ch+private_key], ebx
add	esp, 18h
pop	ebx
jmp	_silc_free
			
push	ebx
sub	esp, 18h
mov	ebx, sb
test	sb, sb
jz	short loc_641F3C18
mov	sb, [sb]
mov	[esp+1Ch+ptr], eax 
call	_silc_free
mov	[esp+1Ch+ptr], sb 
call	_silc_free
add	esp, 18h
pop	sb
retn
align 10h
public _silc_pkcs_silc_public_key_free
push	ebx
sub	esp, 18h
mov	ebx, [esp+1Ch+public_key]
mov	eax, [ebx+1Ch]
mov	edx, [ebx+20h]
mov	[esp+1Ch+ptr], edx
call	dword ptr [eax+24h]
mov	eax, [ebx]
mov	[esp+1Ch+ptr], eax 
call	_silc_free
mov	eax, [ebx+4]
mov	[esp+1Ch+ptr], eax 
call	_silc_free
mov	eax, [ebx+8]
mov	[esp+1Ch+ptr], eax 
call	_silc_free
mov	eax, [ebx+0Ch]
mov	[esp+1Ch+ptr], eax 
call	_silc_free
mov	eax, [ebx+10h]
mov	[esp+1Ch+ptr], eax 
call	_silc_free
mov	eax, [ebx+14h]
mov	[esp+1Ch+ptr], eax 
call	_silc_free
mov	eax, [ebx+18h]
mov	[esp+1Ch+ptr], eax 
call	_silc_free
mov	[esp+1Ch+public_key], ebx
add	esp, 18h
pop	ebx
jmp	_silc_free
align 10h
public _silc_pkcs_silc_public_key_compare
push	edi
push	esi
push	ebx
sub	esp, 10h
mov	ebx, [esp+1Ch+key1]
mov	esi, [esp+1Ch+key2]
mov	edi, [ebx+1Ch]
mov	eax, [esi+1Ch]
mov	eax, [eax]
mov	[esp+1Ch+var_18], eax 
mov	eax, [edi]
mov	[esp+1Ch+var_1C], eax 
call	_strcmp
test	eax, eax
jnz	loc_641F3DF0
mov	eax, [key1_0]
test	eax, eax
jz	loc_641F3DE4
mov	edx, [key2_0]
test	edx, edx
jz	loc_641F3DF0
mov	[esp+1Ch+var_18], edx 
mov	[esp+1Ch+var_1C], eax 
call	_strcmp
test	eax, eax
jnz	loc_641F3DF0
mov	eax, [key1_0+4]
test	eax, eax
jz	loc_641F3E08
mov	edx, [key2_0+4]
test	edx, edx
jz	loc_641F3DF0
mov	[esp+1Ch+var_18], edx 
mov	[esp+1Ch+var_1C], eax 
call	_strcmp
test	eax, eax
jnz	loc_641F3DF0
mov	eax, [key1_0+8]
test	eax, eax
jz	loc_641F3DFC
mov	edx, [key2_0+8]
test	edx, edx
jz	loc_641F3DF0
mov	[esp+1Ch+var_18], edx 
mov	[esp+1Ch+var_1C], eax 
call	_strcmp
test	eax, eax
jnz	loc_641F3DF0
mov	eax, [key1_0+0Ch]
test	eax, eax
jz	loc_641F3E14
mov	edx, [key2_0+0Ch]
test	edx, edx
jz	loc_641F3DF0
mov	[esp+1Ch+var_18], edx 
mov	[esp+1Ch+var_1C], eax 
call	_strcmp
test	eax, eax
jnz	loc_641F3DF0
mov	eax, [key1_0+10h]
test	eax, eax
jz	loc_641F3E20
mov	edx, [key2_0+10h]
test	edx, edx
jz	short loc_641F3DF0
mov	[esp+1Ch+var_18], edx 
mov	[esp+1Ch+var_1C], eax 
call	_strcmp
test	eax, eax
jnz	short loc_641F3DF0
mov	eax, [key1_0+14h]
test	eax, eax
jz	loc_641F3E2C
mov	edx, [key2_0+14h]
test	edx, edx
jz	short loc_641F3DF0
mov	[esp+1Ch+var_18], edx 
mov	[esp+1Ch+var_1C], eax 
call	_strcmp
test	eax, eax
jnz	short loc_641F3DF0
mov	eax, [key1_0+18h]
test	eax, eax
jz	loc_641F3E38
mov	edx, [key2_0+18h]
test	edx, edx
jz	short loc_641F3DF0
mov	[esp+1Ch+var_18], edx 
mov	[esp+1Ch+var_1C], eax 
call	_strcmp
test	eax, eax
jnz	short loc_641F3DF0
mov	eax, [key2_0+20h]
mov	[esp+1Ch+key2],	eax
mov	eax, [key1_0+20h]
mov	[esp+1Ch+key1],	eax
mov	eax, [edi+20h]
add	esp, 10h
pop	key1_0
pop	key2_0
pop	edi
jmp	eax
align 4
mov	eax, [key2_0]
test	eax, eax
jz	loc_641F3CE4
xchg	ax, ax
			
xor	eax, eax
add	esp, 10h
pop	key1_0
pop	key2_0
pop	edi
retn
align 4
mov	edx, [key2_0+8]
test	edx, edx
jnz	short loc_641F3DF0
jmp	loc_641F3D38
mov	ecx, [key2_0+4]
test	ecx, ecx
jnz	short loc_641F3DF0
jmp	loc_641F3D0E
mov	eax, [key2_0+0Ch]
test	eax, eax
jnz	short loc_641F3DF0
jmp	loc_641F3D62
mov	ecx, [key2_0+10h]
test	ecx, ecx
jnz	short loc_641F3DF0
jmp	loc_641F3D84
mov	edx, [key2_0+14h]
test	edx, edx
jnz	short loc_641F3DF0
jmp	loc_641F3DA6
mov	eax, [key2_0+18h]
test	eax, eax
jnz	short loc_641F3DF0
jmp	short loc_641F3DC8
align 4
public _silc_pkcs_silc_encode_identifier
			
push	ebp
push	edi
push	esi
push	ebx
sub	esp, 4Ch
mov	edx, [esp+5Ch+username]
mov	ebx, [esp+5Ch+host]
mov	ebp, [esp+5Ch+version]
test	edx, edx
jnz	short loc_641F3E68
			
xor	eax, eax
			
add	esp, 4Ch
pop	ebx
pop	esi
pop	edi
pop	version_0
retn
align 4
test	host_0,	host_0
jz	short loc_641F3E5B
cmp	byte ptr [username_0], 0
jz	short loc_641F3E5B
cmp	byte ptr [host_0], 0
jz	short loc_641F3E5B
lea	esi, [esp+5Ch+buf]
mov	ecx, 10h
xor	eax, eax
mov	edi, esi
rep stosb
mov	[esp+5Ch+var_44], 1Dh
mov	[esp+5Ch+var_48], username_0
mov	[esp+5Ch+var_4C], 0Ah
mov	[esp+5Ch+var_50], offset aUn_0 
mov	[esp+5Ch+var_54], 0Ah
mov	[esp+5Ch+var_58], 19h
mov	[esp+5Ch+dst], esi 
call	_silc_buffer_format
mov	[esp+5Ch+var_3C], 1Dh
mov	[esp+5Ch+var_40], host_0
mov	[esp+5Ch+var_44], 0Ah
mov	[esp+5Ch+var_48], offset aHn_0 
mov	[esp+5Ch+var_4C], 0Ah
mov	[esp+5Ch+var_50], offset asc_6426CBC8 
mov	[esp+5Ch+var_54], 0Ah
mov	[esp+5Ch+var_58], 19h
mov	[esp+5Ch+dst], esi 
call	_silc_buffer_format
mov	edi, [esp+5Ch+realname]
test	edi, edi
jz	short loc_641F3F4D
mov	[esp+5Ch+var_3C], 1Dh
mov	eax, [esp+5Ch+realname]
mov	[esp+5Ch+var_40], eax
mov	[esp+5Ch+var_44], 0Ah
mov	[esp+5Ch+var_48], offset aRn 
mov	[esp+5Ch+var_4C], 0Ah
mov	[esp+5Ch+var_50], offset asc_6426CBC8 
mov	[esp+5Ch+var_54], 0Ah
mov	[esp+5Ch+var_58], 19h
mov	[esp+5Ch+dst], esi 
call	_silc_buffer_format
mov	host_0,	[esp+5Ch+email]
test	ebx, ebx
jz	short loc_641F3F9D
mov	[esp+5Ch+var_3C], 1Dh
mov	eax, [esp+5Ch+email]
mov	[esp+5Ch+var_40], eax
mov	[esp+5Ch+var_44], 0Ah
mov	[esp+5Ch+var_48], offset aE 
mov	[esp+5Ch+var_4C], 0Ah
mov	[esp+5Ch+var_50], offset asc_6426CBC8 
mov	[esp+5Ch+var_54], 0Ah
mov	[esp+5Ch+var_58], 19h
mov	[esp+5Ch+dst], esi 
call	_silc_buffer_format
mov	ecx, [esp+5Ch+org]
test	ecx, ecx
jz	short loc_641F3FED
mov	[esp+5Ch+var_3C], 1Dh
mov	eax, [esp+5Ch+org]
mov	[esp+5Ch+var_40], eax
mov	[esp+5Ch+var_44], 0Ah
mov	[esp+5Ch+var_48], offset aO 
mov	[esp+5Ch+var_4C], 0Ah
mov	[esp+5Ch+var_50], offset asc_6426CBC8 
mov	[esp+5Ch+var_54], 0Ah
mov	[esp+5Ch+var_58], 19h
mov	[esp+5Ch+dst], esi 
call	_silc_buffer_format
mov	edx, [esp+5Ch+country]
test	edx, edx
jz	short loc_641F403D
mov	[esp+5Ch+var_3C], 1Dh
mov	eax, [esp+5Ch+country]
mov	[esp+5Ch+var_40], eax
mov	[esp+5Ch+var_44], 0Ah
mov	[esp+5Ch+var_48], offset aC_0 
mov	[esp+5Ch+var_4C], 0Ah
mov	[esp+5Ch+var_50], offset asc_6426CBC8 
mov	[esp+5Ch+var_54], 0Ah
mov	[esp+5Ch+var_58], 19h
mov	[esp+5Ch+dst], esi 
call	_silc_buffer_format
test	version_0, version_0
jz	short loc_641F40A6
xor	eax, eax
mov	ecx, 0FFFFFFFFh
mov	edi, version_0
repne scasb
not	ecx
lea	eax, [ecx-1]
cmp	eax, 1
ja	short loc_641F40CF
movsx	eax, byte ptr [ebp+0]
sub	eax, 30h
cmp	eax, 9
ja	short loc_641F40CF
mov	[esp+5Ch+var_3C], 1Dh
mov	[esp+5Ch+var_40], version_0
mov	[esp+5Ch+var_44], 0Ah
mov	[esp+5Ch+var_48], offset aV 
mov	[esp+5Ch+var_4C], 0Ah
mov	[esp+5Ch+var_50], offset asc_6426CBC8 
mov	[esp+5Ch+var_54], 0Ah
mov	[esp+5Ch+var_58], 19h
mov	[esp+5Ch+dst], esi 
call	_silc_buffer_format
mov	[esp+5Ch+var_50], 1Dh
mov	[esp+5Ch+var_54], 0
mov	[esp+5Ch+var_58], 1
mov	[esp+5Ch+dst], esi 
call	_silc_buffer_format
mov	eax, [esp+5Ch+buf.head]
jmp	loc_641F3E5D
			
mov	eax, [esp+5Ch+buf.head]
mov	[esp+5Ch+buf.end], 0
mov	[esp+5Ch+buf.tail], 0
mov	[esp+5Ch+buf.data], 0
mov	[esp+5Ch+buf.head], 0
mov	[esp+5Ch+dst], eax 
call	_silc_free
xor	eax, eax
jmp	loc_641F3E5D
align 4
public _silc_pkcs_silc_import_private_key
			
			
push	ebp
push	edi
push	esi
push	ebx
sub	esp, 14Ch
mov	eax, [esp+15Ch+key]
mov	ebx, [esp+15Ch+ret_private_key]
test	ebx, ebx
jz	loc_641F41D6
mov	[esp+15Ch+buf.head], key_0
mov	[esp+15Ch+buf.data], key_0
add	key_0, [esp+15Ch+key_len]
mov	[esp+15Ch+buf.end], eax
mov	[esp+15Ch+buf.tail], eax
mov	[esp+15Ch+pkcs_name], 0
mov	[esp+15Ch+var_14C], 1Dh
lea	eax, [esp+15Ch+pkcs_len]
mov	[esp+15Ch+var_150], eax
lea	eax, [esp+15Ch+pkcs_name]
mov	[esp+15Ch+var_154], eax
mov	[esp+15Ch+string], 14h
lea	esi, [esp+15Ch+buf]
mov	[esp+15Ch+src],	esi 
call	_silc_buffer_unformat
inc	eax
jz	short err
mov	bp, [esp+15Ch+pkcs_len]
test	bp, bp
jnz	short loc_641F41E4
			
mov	[esp+15Ch+ptr],	0
			
mov	ret, [esp+15Ch+pkcs_name]
mov	[esp+15Ch+src],	ret 
call	_silc_free
mov	edx, [esp+15Ch+ptr]
mov	[esp+15Ch+src],	edx 
call	_silc_free
mov	[esp+15Ch+src],	offset aMalformedSilcP 
call	_silc_format
mov	[esp+15Ch+string], ret 
mov	[esp+15Ch+src],	3 
call	_silc_log_output
xor	ret, ret
add	esp, 14Ch
pop	ret_private_key_0
pop	esi
pop	edi
pop	ebp
retn
align 4
movzx	ebp, bp
mov	ret, [esp+15Ch+buf.end]
sub	ret, [esp+15Ch+buf.head]
cmp	ebp, ret
ja	short err
lea	edx, [ebp+2]
mov	ecx, [esp+15Ch+buf.data]
mov	ret, [esp+15Ch+buf.tail]
mov	ebp, ret
sub	ebp, ecx
cmp	edx, ebp
ja	short loc_641F4220
lea	ebp, [ecx+edx]
mov	[esp+15Ch+buf.data], ebp
sub	ret, ebp
mov	ebp, ret
mov	[esp+15Ch+var_14C], 1Dh
mov	[esp+15Ch+var_150], ebp
lea	ret, [esp+15Ch+key_data]
mov	[esp+15Ch+var_154], ret
mov	[esp+15Ch+string], 1Bh
mov	[esp+15Ch+src],	esi 
call	_silc_buffer_unformat
inc	ret
jz	err
mov	[esp+15Ch+string], 8 
mov	[esp+15Ch+src],	1 
call	_silc_calloc
mov	[esp+15Ch+ptr],	ret
test	ret, ret
jz	loc_641F419F
call	_silc_asn1_alloc
mov	[esp+15Ch+asn1], ret
test	ret, ret
jz	loc_641F419F
mov	ret, [esp+15Ch+pkcs_name]
mov	edi, offset aRsa_0 
mov	ecx, 4
mov	esi, ret
repe cmpsb
jnz	loc_641F4AAC
cmp	ebp, 3
jbe	loc_641F4AAC
mov	ret, [esp+15Ch+key_data]
mov	[esp+15Ch+k.head], ret
mov	[esp+15Ch+k.data], ret
add	ret, ebp
mov	[esp+15Ch+k.end], ret
mov	[esp+15Ch+k.tail], ret
mov	[esp+15Ch+var_150], 1Dh
lea	ret, [esp+15Ch+ver]
mov	[esp+15Ch+var_154], ret
mov	[esp+15Ch+string], 5
lea	esi, [esp+15Ch+k]
mov	[esp+15Ch+src],	esi 
call	_silc_buffer_unformat
test	ret, ret
js	loc_641F4AA4
mov	ret, [esp+15Ch+k.data]
mov	edx, [esp+15Ch+k.tail]
sub	edx, ret
cmp	edx, 3
jbe	short loc_641F4319
add	ret, 4
mov	[esp+15Ch+k.data], ret
mov	ret, [esp+15Ch+ver]
cmp	len_0, 82171273h
jz	loc_641F4AD1
cmp	len_0, 0F911A3D1h
jz	loc_641F4AD1
mov	[esp+15Ch+len],	len_0
mov	[esp+15Ch+ver],	0
			
mov	[esp+15Ch+string], offset scheme 
mov	len_0, [esp+15Ch+pkcs_name]
mov	[esp+15Ch+src],	ret 
call	_silc_pkcs_find_algorithm
mov	[esp+15Ch+var_F4], ret
mov	ebp, [esp+15Ch+var_F4]
test	ebp, ebp
jz	loc_641F4AA4
mov	edx, [esp+15Ch+var_F4]
mov	ret, [esp+15Ch+ptr]
mov	[ret], edx
mov	[esp+15Ch+var_14C], 1Dh
mov	ret, [esp+15Ch+len]
mov	[esp+15Ch+var_150], ret
lea	edi, [esp+15Ch+tmp]
mov	[esp+15Ch+var_154], edi
mov	[esp+15Ch+string], 0Ch
mov	[esp+15Ch+src],	esi 
call	_silc_buffer_unformat
test	ret, ret
js	loc_641F4AA4
lea	ret, [esp+15Ch+e]
mov	[esp+15Ch+src],	ret 
call	_silc_mp_init
lea	edx, [esp+15Ch+e]
mov	[esp+15Ch+var_154], edx	
mov	ret, [esp+15Ch+len]
mov	[esp+15Ch+string], ret 
mov	ret, [esp+15Ch+tmp]
mov	[esp+15Ch+src],	ret 
call	_silc_mp_bin2mp
mov	edx, [esp+15Ch+len]
mov	ret, [esp+15Ch+k.data]
mov	ecx, [esp+15Ch+k.tail]
sub	ecx, ret
cmp	edx, ecx
ja	short loc_641F4407
add	ret, edx
mov	[esp+15Ch+k.data], ret
mov	[esp+15Ch+var_150], 1Dh
lea	ebp, [esp+15Ch+len]
mov	[esp+15Ch+var_154], ebp
mov	[esp+15Ch+string], 5
mov	[esp+15Ch+src],	esi 
call	_silc_buffer_unformat
test	ret, ret
js	loc_641F4AA4
mov	ret, [esp+15Ch+k.data]
mov	edx, [esp+15Ch+k.tail]
sub	edx, ret
cmp	edx, 3
jbe	short loc_641F4451
add	ret, 4
mov	[esp+15Ch+k.data], ret
mov	[esp+15Ch+var_14C], 1Dh
mov	ret, [esp+15Ch+len]
mov	[esp+15Ch+var_150], ret
mov	[esp+15Ch+var_154], edi
mov	[esp+15Ch+string], 0Ch
mov	[esp+15Ch+src],	esi 
call	_silc_buffer_unformat
test	ret, ret
js	loc_641F4AA4
lea	ret, [esp+15Ch+n]
mov	[esp+15Ch+src],	ret 
call	_silc_mp_init
lea	edx, [esp+15Ch+n]
mov	[esp+15Ch+var_154], edx	
mov	ret, [esp+15Ch+len]
mov	[esp+15Ch+string], ret 
mov	ret, [esp+15Ch+tmp]
mov	[esp+15Ch+src],	ret 
call	_silc_mp_bin2mp
mov	edx, [esp+15Ch+len]
mov	ret, [esp+15Ch+k.data]
mov	ecx, [esp+15Ch+k.tail]
sub	ecx, ret
cmp	edx, ecx
ja	short loc_641F44D8
add	ret, edx
mov	[esp+15Ch+k.data], ret
mov	[esp+15Ch+var_150], 1Dh
mov	[esp+15Ch+var_154], ebp
mov	[esp+15Ch+string], 5
mov	[esp+15Ch+src],	esi 
call	_silc_buffer_unformat
test	ret, ret
js	loc_641F4AA4
mov	ret, [esp+15Ch+k.data]
mov	edx, [esp+15Ch+k.tail]
sub	edx, ret
cmp	edx, 3
jbe	short loc_641F451B
add	ret, 4
mov	[esp+15Ch+k.data], ret
mov	[esp+15Ch+var_14C], 1Dh
mov	ret, [esp+15Ch+len]
mov	[esp+15Ch+var_150], ret
mov	[esp+15Ch+var_154], edi
mov	[esp+15Ch+string], 0Ch
mov	[esp+15Ch+src],	esi 
call	_silc_buffer_unformat
test	ret, ret
js	loc_641F4AA4
lea	ret, [esp+15Ch+d]
mov	[esp+15Ch+src],	ret 
call	_silc_mp_init
lea	edx, [esp+15Ch+d]
mov	[esp+15Ch+var_154], edx	
mov	ret, [esp+15Ch+len]
mov	[esp+15Ch+string], ret 
mov	ret, [esp+15Ch+tmp]
mov	[esp+15Ch+src],	ret 
call	_silc_mp_bin2mp
mov	edx, [esp+15Ch+len]
mov	ret, [esp+15Ch+k.data]
mov	ecx, [esp+15Ch+k.tail]
sub	ecx, ret
cmp	edx, ecx
ja	short loc_641F45A2
add	ret, edx
mov	[esp+15Ch+k.data], ret
mov	[esp+15Ch+var_150], 1Dh
mov	[esp+15Ch+var_154], ebp
mov	[esp+15Ch+string], 5
mov	[esp+15Ch+src],	esi 
call	_silc_buffer_unformat
test	ret, ret
js	loc_641F4AA4
mov	ret, [esp+15Ch+k.data]
mov	edx, [esp+15Ch+k.tail]
sub	edx, ret
cmp	edx, 3
jbe	short loc_641F45E5
add	ret, 4
mov	[esp+15Ch+k.data], ret
mov	[esp+15Ch+var_14C], 1Dh
mov	ret, [esp+15Ch+len]
mov	[esp+15Ch+var_150], ret
mov	[esp+15Ch+var_154], edi
mov	[esp+15Ch+string], 0Ch
mov	[esp+15Ch+src],	esi 
call	_silc_buffer_unformat
test	ret, ret
js	loc_641F4AA4
lea	ret, [esp+15Ch+dp]
mov	[esp+15Ch+src],	ret 
call	_silc_mp_init
lea	edx, [esp+15Ch+dp]
mov	[esp+15Ch+var_154], edx	
mov	ret, [esp+15Ch+len]
mov	[esp+15Ch+string], ret 
mov	ret, [esp+15Ch+tmp]
mov	[esp+15Ch+src],	ret 
call	_silc_mp_bin2mp
mov	edx, [esp+15Ch+len]
mov	ret, [esp+15Ch+k.data]
mov	ecx, [esp+15Ch+k.tail]
sub	ecx, ret
cmp	edx, ecx
ja	short loc_641F466C
add	ret, edx
mov	[esp+15Ch+k.data], ret
mov	[esp+15Ch+var_150], 1Dh
mov	[esp+15Ch+var_154], ebp
mov	[esp+15Ch+string], 5
mov	[esp+15Ch+src],	esi 
call	_silc_buffer_unformat
test	ret, ret
js	loc_641F4AA4
mov	ret, [esp+15Ch+k.data]
mov	edx, [esp+15Ch+k.tail]
sub	edx, ret
cmp	edx, 3
jbe	short loc_641F46AF
add	ret, 4
mov	[esp+15Ch+k.data], ret
mov	[esp+15Ch+var_14C], 1Dh
mov	ret, [esp+15Ch+len]
mov	[esp+15Ch+var_150], ret
mov	[esp+15Ch+var_154], edi
mov	[esp+15Ch+string], 0Ch
mov	[esp+15Ch+src],	esi 
call	_silc_buffer_unformat
test	ret, ret
js	loc_641F4AA4
lea	ret, [esp+15Ch+dq]
mov	[esp+15Ch+src],	ret 
call	_silc_mp_init
lea	edx, [esp+15Ch+dq]
mov	[esp+15Ch+var_154], edx	
mov	ret, [esp+15Ch+len]
mov	[esp+15Ch+string], ret 
mov	ret, [esp+15Ch+tmp]
mov	[esp+15Ch+src],	ret 
call	_silc_mp_bin2mp
mov	edx, [esp+15Ch+len]
mov	ret, [esp+15Ch+k.data]
mov	ecx, [esp+15Ch+k.tail]
sub	ecx, ret
cmp	edx, ecx
ja	short loc_641F4736
add	ret, edx
mov	[esp+15Ch+k.data], ret
cmp	[esp+15Ch+ver],	0
jnz	loc_641F4B51
mov	[esp+15Ch+var_150], 1Dh
mov	[esp+15Ch+var_154], ebp
mov	[esp+15Ch+string], 5
mov	[esp+15Ch+src],	esi 
call	_silc_buffer_unformat
test	ret, ret
js	loc_641F4AA4
mov	ret, [esp+15Ch+k.data]
mov	edx, [esp+15Ch+k.tail]
mov	ecx, edx
sub	ecx, ret
cmp	ecx, 3
jbe	short loc_641F478D
add	ret, 4
mov	[esp+15Ch+k.data], ret
mov	ecx, edx
sub	ecx, ret
mov	edx, [esp+15Ch+len]
cmp	edx, ecx
ja	loc_641F4AA4
add	ret, edx
mov	[esp+15Ch+k.data], ret
mov	[esp+15Ch+var_150], 1Dh
mov	[esp+15Ch+var_154], ebp
mov	[esp+15Ch+string], 5
mov	[esp+15Ch+src],	esi 
call	_silc_buffer_unformat
test	ret, ret
js	loc_641F4AA4
mov	ret, [esp+15Ch+k.data]
mov	edx, [esp+15Ch+k.tail]
mov	ecx, edx
sub	ecx, ret
cmp	ecx, 3
jbe	short loc_641F47EE
add	ret, 4
mov	[esp+15Ch+k.data], ret
mov	ecx, edx
sub	ecx, ret
mov	edx, [esp+15Ch+len]
cmp	edx, ecx
ja	loc_641F4AA4
add	ret, edx
mov	[esp+15Ch+k.data], ret
mov	[esp+15Ch+var_150], 1Dh
mov	[esp+15Ch+var_154], ebp
mov	[esp+15Ch+string], 5
mov	[esp+15Ch+src],	esi 
call	_silc_buffer_unformat
test	ret, ret
js	loc_641F4AA4
mov	ret, [esp+15Ch+k.data]
mov	edx, [esp+15Ch+k.tail]
sub	edx, ret
cmp	edx, 3
jbe	short loc_641F4849
add	ret, 4
mov	[esp+15Ch+k.data], ret
mov	[esp+15Ch+var_14C], 1Dh
mov	ret, [esp+15Ch+len]
mov	[esp+15Ch+var_150], ret
mov	[esp+15Ch+var_154], edi
mov	[esp+15Ch+string], 0Ch
mov	[esp+15Ch+src],	esi 
call	_silc_buffer_unformat
test	ret, ret
js	loc_641F4AA4
lea	ret, [esp+15Ch+p]
mov	[esp+15Ch+src],	ret 
call	_silc_mp_init
lea	edx, [esp+15Ch+p]
mov	[esp+15Ch+var_154], edx	
mov	ret, [esp+15Ch+len]
mov	[esp+15Ch+string], ret 
mov	ret, [esp+15Ch+tmp]
mov	[esp+15Ch+src],	ret 
call	_silc_mp_bin2mp
mov	edx, [esp+15Ch+len]
mov	ret, [esp+15Ch+k.data]
mov	ecx, [esp+15Ch+k.tail]
sub	ecx, ret
cmp	edx, ecx
ja	short loc_641F48D0
add	ret, edx
mov	[esp+15Ch+k.data], ret
mov	[esp+15Ch+var_150], 1Dh
mov	[esp+15Ch+var_154], ebp
mov	[esp+15Ch+string], 5
mov	[esp+15Ch+src],	esi 
call	_silc_buffer_unformat
test	ret, ret
js	loc_641F4AA4
mov	ret, [esp+15Ch+k.data]
mov	edx, [esp+15Ch+k.tail]
sub	edx, ret
cmp	edx, 3
jbe	short loc_641F4913
add	ret, 4
mov	[esp+15Ch+k.data], ret
mov	[esp+15Ch+var_14C], 1Dh
mov	ret, [esp+15Ch+len]
mov	[esp+15Ch+var_150], ret
mov	[esp+15Ch+var_154], edi
mov	[esp+15Ch+string], 0Ch
mov	[esp+15Ch+src],	esi 
call	_silc_buffer_unformat
test	ret, ret
js	loc_641F4AA4
lea	esi, [esp+15Ch+q]
mov	[esp+15Ch+src],	esi 
call	_silc_mp_init
mov	[esp+15Ch+var_154], esi	
mov	ret, [esp+15Ch+len]
mov	[esp+15Ch+string], ret 
mov	ret, [esp+15Ch+tmp]
mov	[esp+15Ch+src],	ret 
call	_silc_mp_bin2mp
mov	edx, [esp+15Ch+len]
mov	ret, [esp+15Ch+k.data]
mov	ecx, [esp+15Ch+k.tail]
sub	ecx, ret
cmp	edx, ecx
ja	short loc_641F4990
add	ret, edx
mov	[esp+15Ch+k.data], ret
lea	edi, [esp+15Ch+qp]
mov	[esp+15Ch+mp], edi
cmp	[esp+15Ch+ver],	0
jnz	short loc_641F49C4
mov	[esp+15Ch+src],	edi 
call	_silc_mp_init
lea	ret, [esp+15Ch+p]
mov	[esp+15Ch+var_154], ret	
mov	[esp+15Ch+string], esi 
mov	[esp+15Ch+src],	edi 
call	_silc_mp_modinv
lea	edx, [esp+15Ch+alg_key]
mov	ecx, 4
xor	ret, ret
mov	edi, edx
rep stosd
mov	[esp+15Ch+var_104], 0
mov	[esp+15Ch+var_108], 0
mov	ret, [esp+15Ch+mp]
mov	[esp+15Ch+var_10C], ret
mov	[esp+15Ch+var_110], 8002h
lea	edi, [esp+15Ch+dq]
mov	[esp+15Ch+var_114], edi
mov	[esp+15Ch+var_118], 8002h
lea	ret, [esp+15Ch+dp]
mov	[esp+15Ch+var_11C], ret
mov	[esp+15Ch+var_120], 8002h
mov	[esp+15Ch+var_124], esi
mov	[esp+15Ch+var_128], 8002h
lea	edi, [esp+15Ch+p]
mov	[esp+15Ch+var_12C], edi
mov	[esp+15Ch+var_130], 8002h
lea	ret, [esp+15Ch+d]
mov	[esp+15Ch+var_134], ret
mov	[esp+15Ch+var_138], 8002h
lea	edi, [esp+15Ch+e]
mov	[esp+15Ch+var_13C], edi
mov	[esp+15Ch+var_140], 8002h
lea	ret, [esp+15Ch+n]
mov	[esp+15Ch+var_144], ret
mov	[esp+15Ch+var_148], 8002h
mov	[esp+15Ch+var_14C], 0
mov	[esp+15Ch+var_150], 0F006h
mov	[esp+15Ch+var_154], 8010h
mov	[esp+15Ch+string], edx 
mov	edx, [esp+15Ch+asn1]
mov	[esp+15Ch+src],	edx 
call	_silc_asn1_encode
test	al, al
jnz	loc_641F4C1C
			
mov	ret, [esp+15Ch+pkcs_name]
nop
			
mov	[esp+15Ch+src],	ret 
call	_silc_free
mov	edi, [esp+15Ch+ptr]
mov	[esp+15Ch+src],	edi 
call	_silc_free
mov	ret, [esp+15Ch+asn1]
mov	[esp+15Ch+src],	ret 
call	_silc_asn1_free
jmp	loc_641F41BA
			
mov	[esp+15Ch+var_150], 1Dh
lea	len_0, [esp+15Ch+len]
mov	[esp+15Ch+var_154], ret
mov	[esp+15Ch+string], 5
mov	[esp+15Ch+src],	esi 
call	_silc_buffer_unformat
test	ret, ret
js	short loc_641F4AA4
mov	ret, [esp+15Ch+k.data]
mov	edx, [esp+15Ch+k.tail]
sub	edx, ret
cmp	edx, 3
jbe	short loc_641F4B17
add	ret, 4
mov	[esp+15Ch+k.data], ret
mov	ret, [esp+15Ch+ver]
test	len_0, len_0
jz	loc_641F4348
cmp	len_0, 82171273h
jz	loc_641F4348
mov	[esp+15Ch+string], offset aPkcs1 
mov	len_0, [esp+15Ch+pkcs_name]
mov	[esp+15Ch+src],	ret 
call	_silc_pkcs_find_algorithm
mov	[esp+15Ch+var_F4], ret
jmp	loc_641F4363
mov	[esp+15Ch+var_150], 1Dh
mov	[esp+15Ch+var_154], ebp
mov	[esp+15Ch+string], 5
mov	[esp+15Ch+src],	esi 
call	_silc_buffer_unformat
test	ret, ret
js	loc_641F4AA4
mov	ret, [esp+15Ch+k.data]
mov	edx, [esp+15Ch+k.tail]
sub	edx, ret
cmp	edx, 3
jbe	short loc_641F4B94
add	ret, 4
mov	[esp+15Ch+k.data], ret
mov	[esp+15Ch+var_14C], 1Dh
mov	ret, [esp+15Ch+len]
mov	[esp+15Ch+var_150], ret
mov	[esp+15Ch+var_154], edi
mov	[esp+15Ch+string], 0Ch
mov	[esp+15Ch+src],	esi 
call	_silc_buffer_unformat
test	ret, ret
js	loc_641F4AA4
lea	ret, [esp+15Ch+qp]
mov	[esp+15Ch+mp], ret
mov	[esp+15Ch+src],	ret 
call	_silc_mp_init
mov	edx, [esp+15Ch+mp]
mov	[esp+15Ch+var_154], edx	
mov	ret, [esp+15Ch+len]
mov	[esp+15Ch+string], ret 
mov	ret, [esp+15Ch+tmp]
mov	[esp+15Ch+src],	ret 
call	_silc_mp_bin2mp
mov	edx, [esp+15Ch+len]
mov	ret, [esp+15Ch+k.data]
mov	ecx, [esp+15Ch+k.tail]
sub	ecx, ret
cmp	edx, ecx
jbe	loc_641F47FD
jmp	loc_641F4806
lea	edi, [esp+15Ch+n]
mov	[esp+15Ch+src],	edi 
call	_silc_mp_uninit
lea	ret, [esp+15Ch+e]
mov	[esp+15Ch+src],	ret 
call	_silc_mp_uninit
lea	edx, [esp+15Ch+e]
mov	[esp+15Ch+src],	edx 
call	_silc_mp_uninit
lea	edi, [esp+15Ch+d]
mov	[esp+15Ch+src],	edi 
call	_silc_mp_uninit
lea	ret, [esp+15Ch+p]
mov	[esp+15Ch+src],	ret 
call	_silc_mp_uninit
mov	[esp+15Ch+src],	esi 
call	_silc_mp_uninit
lea	edx, [esp+15Ch+dp]
mov	[esp+15Ch+src],	edx 
call	_silc_mp_uninit
lea	edi, [esp+15Ch+dq]
mov	[esp+15Ch+src],	edi 
call	_silc_mp_uninit
mov	ret, [esp+15Ch+mp]
mov	[esp+15Ch+src],	ret 
call	_silc_mp_uninit
mov	ret, [esp+15Ch+alg_key.data]
mov	edx, [esp+15Ch+ptr]
add	edx, 4
mov	[esp+15Ch+var_154], edx
mov	edx, [esp+15Ch+alg_key.tail]
sub	edx, ret
mov	[esp+15Ch+string], edx
mov	[esp+15Ch+src],	ret
mov	edx, [esp+15Ch+var_F4]
call	dword ptr [edx+28h]
test	ret, ret
jz	loc_641F4AA4
mov	ret, [esp+15Ch+pkcs_name]
mov	[esp+15Ch+src],	ret 
call	_silc_free
mov	edi, [esp+15Ch+asn1]
mov	[esp+15Ch+src],	edi 
call	_silc_asn1_free
mov	ret, [esp+15Ch+ptr]
mov	[ret_private_key_0], ret
mov	ret, [esp+15Ch+key_len]
jmp	loc_641F41D8
align 4
public _silc_pkcs_silc_import_private_key_file
push	ebp
push	edi
push	esi
push	ebx
sub	esp, 0CCh
mov	edi, [esp+0DCh+filedata]
mov	ebp, [esp+0DCh+filedata_len]
mov	esi, [esp+0DCh+passphrase_len]
mov	[esp+0DCh+len],	21h
cmp	ebp, 40h
jbe	loc_641F4DC8
cmp	byte ptr [filedata_0], 2Dh
jnz	loc_641F4DC8
lea	ebx, [filedata_0+1]
mov	blocklen, offset aBeginSilcPriva 
add	edi, 21h
nop
movzx	ecx, byte ptr [filedata_0]
movsx	edx, byte ptr [blocklen]
cmp	ecx, edx
jnz	short loc_641F4DC8
inc	filedata_0
inc	blocklen
cmp	filedata_0, edi
jnz	short loc_641F4D40
lea	blocklen, [filedata_len_0-41h]
mov	[esp+0DCh+len],	blocklen
cmp	[esp+0DCh+encoding], 1
jz	loc_641F4DF4
mov	[esp+0DCh+ptr],	0
lea	blocklen, [esp+0DCh+tmp]
mov	[esp+0DCh+var_B0], blocklen
xor	blocklen, blocklen
mov	edi, [esp+0DCh+var_B0]
mov	ecx, 20h
rep stosb
mov	[esp+0DCh+var_9C], ecx
lea	filedata_len_0,	[esp+0DCh+keymat]
mov	cl, 40h
mov	edi, ebp
rep stosb
movzx	edx, byte ptr [filedata_0+3]
movzx	blocklen, byte ptr [filedata_0]
shl	blocklen, 18h
or	edx, blocklen
movzx	blocklen, byte ptr [filedata_0+1]
shl	blocklen, 10h
or	edx, blocklen
movzx	blocklen, byte ptr [filedata_0+2]
shl	blocklen, 8
or	blocklen, edx
cmp	blocklen, 738DF531h
jz	short loc_641F4E1A
xor	blocklen, blocklen
add	esp, 0CCh
pop	filedata_0
pop	passphrase_len_0
pop	edi
pop	ebp
retn
			
mov	[esp+0DCh+fmt],	offset aMalformedSil_0
call	_silc_format
mov	[esp+0DCh+string], blocklen 
mov	[esp+0DCh+fmt],	3 
call	_silc_log_output
xor	blocklen, blocklen
			
add	esp, 0CCh
pop	ret
pop	esi
pop	filedata_0
pop	ebp
retn
align 4
lea	blocklen, [esp+0DCh+len]
mov	[esp+0DCh+ret_len], blocklen 
mov	[esp+0DCh+string], filedata_len_0 
mov	[esp+0DCh+fmt],	filedata_0 
call	_silc_base64_decode
mov	[esp+0DCh+ptr],	blocklen
test	blocklen, blocklen
jz	short loc_641F4DBB
mov	filedata_0, blocklen
jmp	loc_641F4D70
lea	blocklen, [esp+0DCh+aes]
mov	[esp+0DCh+string], blocklen 
mov	[esp+0DCh+fmt],	offset aAes256Cbc 
call	_silc_cipher_alloc
test	al, al
jz	loc_641F50EB
mov	blocklen, [esp+0DCh+aes]
mov	[esp+0DCh+fmt],	blocklen 
call	_silc_cipher_get_block_len
shl	blocklen, 1
cmp	blocklen, 20h
ja	loc_641F5122
lea	blocklen, [esp+0DCh+sha1]
mov	[esp+0DCh+string], blocklen 
mov	[esp+0DCh+fmt],	offset aSha1_0 
call	_silc_hash_alloc
test	al, al
jz	loc_641F5138
lea	blocklen, [esp+0DCh+sha1hmac]
mov	[esp+0DCh+ret_len], blocklen 
mov	[esp+0DCh+string], 0 
mov	[esp+0DCh+fmt],	offset aHmacSha196 
call	_silc_hmac_alloc
test	al, al
jz	loc_641F50F7
mov	blocklen, [esp+0DCh+sha1]
mov	[esp+0DCh+fmt],	blocklen 
call	_silc_hash_init
mov	[esp+0DCh+ret_len], passphrase_len_0 
mov	edi, [esp+0DCh+passphrase]
mov	[esp+0DCh+string], edi 
mov	blocklen, [esp+0DCh+sha1]
mov	[esp+0DCh+fmt],	blocklen 
call	_silc_hash_update
mov	[esp+0DCh+string], ebp 
mov	blocklen, [esp+0DCh+sha1]
mov	[esp+0DCh+fmt],	blocklen 
call	_silc_hash_final
mov	blocklen, [esp+0DCh+sha1]
mov	[esp+0DCh+fmt],	blocklen 
call	_silc_hash_init
mov	[esp+0DCh+ret_len], passphrase_len_0 
mov	[esp+0DCh+string], edi 
mov	blocklen, [esp+0DCh+sha1]
mov	[esp+0DCh+fmt],	blocklen 
call	_silc_hash_update
mov	[esp+0DCh+ret_len], 10h	
mov	[esp+0DCh+string], ebp 
mov	blocklen, [esp+0DCh+sha1]
mov	[esp+0DCh+fmt],	blocklen 
call	_silc_hash_update
lea	blocklen, [esp+0DCh+keymat+10h]
mov	[esp+0DCh+string], blocklen 
mov	blocklen, [esp+0DCh+sha1]
mov	[esp+0DCh+fmt],	blocklen 
call	_silc_hash_final
mov	dword ptr [esp+0DCh+encryption], 0 
mov	[esp+0DCh+ret_len], 100h 
mov	[esp+0DCh+string], ebp 
mov	blocklen, [esp+0DCh+aes]
mov	[esp+0DCh+fmt],	blocklen 
call	_silc_cipher_set_key
mov	blocklen, [esp+0DCh+sha1hmac]
mov	[esp+0DCh+fmt],	blocklen 
call	_silc_hmac_len
mov	[esp+0DCh+var_98], blocklen
mov	[esp+0DCh+ret_len], 10h	
mov	[esp+0DCh+string], ebp 
mov	blocklen, [esp+0DCh+sha1hmac]
mov	[esp+0DCh+fmt],	blocklen 
call	_silc_hmac_init_with_key
mov	blocklen, [esp+0DCh+len]
sub	blocklen, [esp+0DCh+var_98]
mov	[esp+0DCh+ret_len], blocklen 
mov	[esp+0DCh+string], filedata_0 
mov	blocklen, [esp+0DCh+sha1hmac]
mov	[esp+0DCh+fmt],	blocklen 
call	_silc_hmac_update
mov	[esp+0DCh+ret_len], 0 
lea	blocklen, [esp+0DCh+tmp]
mov	[esp+0DCh+string], blocklen 
mov	blocklen, [esp+0DCh+sha1hmac]
mov	[esp+0DCh+fmt],	blocklen 
call	_silc_hmac_final
mov	ecx, [esp+0DCh+len]
mov	[esp+0DCh+var_90], ecx
mov	edx, ecx
sub	edx, [esp+0DCh+var_98]
lea	edx, [filedata_0+edx]
mov	passphrase_len_0, [esp+0DCh+var_98]
cmp	esi, esi
mov	esi, [esp+0DCh+var_B0]
mov	edi, edx
mov	ecx, [esp+0DCh+var_98]
repe cmpsb
setnbe	dl
setb	al
sub	dl, al
movsx	edx, dl
test	edx, edx
jnz	loc_641F516A
lea	edi, [filedata_0+4]
mov	blocklen, [esp+0DCh+var_90]
sub	len_0, 4
mov	[esp+0DCh+len],	len_0
mov	[esp+0DCh+iv], 0 
sub	len_0, [esp+0DCh+var_98]
mov	dword ptr [esp+0DCh+encryption], blocklen 
mov	[esp+0DCh+ret_len], filedata_0 
mov	[esp+0DCh+string], filedata_0 
mov	blocklen, [esp+0DCh+aes]
mov	[esp+0DCh+fmt],	blocklen 
mov	[esp+0DCh+var_A0], edx
call	_silc_cipher_decrypt
movzx	ecx, byte ptr [filedata_0+3]
movzx	blocklen, byte ptr [ebx+4]
shl	blocklen, 18h
or	ecx, blocklen
movzx	blocklen, byte ptr [filedata_0+1]
shl	blocklen, 10h
or	blocklen, ecx
movzx	ecx, byte ptr [filedata_0+2]
shl	ecx, 8
or	blocklen, ecx
cmp	i, [esp+0DCh+len]
mov	edx, [esp+0DCh+var_A0]
ja	loc_641F5190
mov	[esp+0DCh+len],	i
mov	ecx, 10h
mov	filedata_0, ebp
mov	i, edx
rep stosd
mov	cl, 8
mov	edi, [esp+0DCh+var_B0]
rep stosd
mov	blocklen, [esp+0DCh+sha1hmac]
mov	[esp+0DCh+fmt],	blocklen 
call	_silc_hmac_free
mov	blocklen, [esp+0DCh+sha1]
mov	[esp+0DCh+fmt],	blocklen 
call	_silc_hash_free
mov	blocklen, [esp+0DCh+aes]
mov	[esp+0DCh+fmt],	blocklen 
call	_silc_cipher_free
mov	blocklen, [esp+0DCh+ret_private_key]
mov	[esp+0DCh+ret_len], blocklen 
mov	blocklen, [esp+0DCh+len]
mov	[esp+0DCh+string], blocklen 
add	filedata_0, 8
mov	[esp+0DCh+fmt],	ebx 
call	_silc_pkcs_silc_import_private_key
mov	ebx, blocklen
mov	blocklen, [esp+0DCh+ptr]
mov	[esp+0DCh+fmt],	blocklen 
call	_silc_free
test	ret, ret
setnz	al
jmp	loc_641F4DE6
mov	[esp+0DCh+fmt],	offset aCouldNotAlloca
jmp	loc_641F4DCF
mov	[esp+0DCh+fmt],	offset aCouldNotAllo_0 
call	_silc_format
mov	[esp+0DCh+string], blocklen 
mov	[esp+0DCh+fmt],	3 
call	_silc_log_output
mov	blocklen, [esp+0DCh+sha1]
mov	[esp+0DCh+fmt],	blocklen 
call	_silc_hash_free
mov	blocklen, [esp+0DCh+aes]
mov	[esp+0DCh+fmt],	blocklen 
call	_silc_cipher_free
xor	blocklen, blocklen
jmp	loc_641F4DE6
mov	[esp+0DCh+fmt],	offset aCouldNotAllo_1
call	_silc_format
mov	[esp+0DCh+string], blocklen 
mov	[esp+0DCh+fmt],	3 
call	_silc_log_output
mov	blocklen, [esp+0DCh+aes]
mov	[esp+0DCh+fmt],	blocklen 
call	_silc_cipher_free
xor	blocklen, blocklen
jmp	loc_641F4DE6
mov	ecx, 10h
mov	edi, ebp
mov	blocklen, [esp+0DCh+var_9C]
rep stosd
mov	cl, 8
mov	edi, [esp+0DCh+var_B0]
rep stosd
mov	blocklen, [esp+0DCh+sha1hmac]
mov	[esp+0DCh+fmt],	blocklen 
call	_silc_hmac_free
jmp	short loc_641F5113
mov	ecx, 10h
mov	filedata_0, ebp
mov	i, edx
jmp	short loc_641F5175
align 4
public _silc_pkcs_silc_public_key_copy
push	edi
push	esi
push	ebx
sub	esp, 10h
mov	ebx, [esp+1Ch+public_key]
mov	[esp+1Ch+size],	24h 
mov	[esp+1Ch+items], 1 
call	_silc_calloc
mov	esi, eax
test	eax, eax
jz	loc_641F52EC
mov	new_pubkey, [public_key_0+1Ch]
mov	[new_pubkey+1Ch], eax
mov	eax, [public_key_0+1Ch]
mov	edx, [public_key_0+20h]
mov	[esp+1Ch+items], edx
call	dword ptr [eax+1Ch]
mov	[new_pubkey+20h], eax
test	eax, eax
jz	loc_641F52E4
mov	edx, [public_key_0]
test	edx, edx
jz	short loc_641F5203
xor	eax, eax
mov	ecx, 0FFFFFFFFh
mov	edi, edx
repne scasb
not	ecx
dec	ecx
mov	[esp+1Ch+size],	ecx 
mov	[esp+1Ch+items], edx 
call	_silc_memdup
mov	[new_pubkey], eax
mov	edx, [public_key_0+4]
test	edx, edx
jz	short loc_641F5227
xor	eax, eax
mov	ecx, 0FFFFFFFFh
mov	edi, edx
repne scasb
not	ecx
dec	ecx
mov	[esp+1Ch+size],	ecx 
mov	[esp+1Ch+items], edx 
call	_silc_memdup
mov	[new_pubkey+4],	eax
mov	edx, [public_key_0+8]
test	edx, edx
jz	short loc_641F524B
xor	eax, eax
mov	ecx, 0FFFFFFFFh
mov	edi, edx
repne scasb
not	ecx
dec	ecx
mov	[esp+1Ch+size],	ecx 
mov	[esp+1Ch+items], edx 
call	_silc_memdup
mov	[new_pubkey+8],	eax
mov	edx, [public_key_0+0Ch]
test	edx, edx
jz	short loc_641F526F
xor	eax, eax
mov	ecx, 0FFFFFFFFh
mov	edi, edx
repne scasb
not	ecx
dec	ecx
mov	[esp+1Ch+size],	ecx 
mov	[esp+1Ch+items], edx 
call	_silc_memdup
mov	[new_pubkey+0Ch], eax
mov	edx, [public_key_0+10h]
test	edx, edx
jz	short loc_641F5293
xor	eax, eax
mov	ecx, 0FFFFFFFFh
mov	edi, edx
repne scasb
not	ecx
dec	ecx
mov	[esp+1Ch+size],	ecx 
mov	[esp+1Ch+items], edx 
call	_silc_memdup
mov	[new_pubkey+10h], eax
mov	edx, [public_key_0+14h]
test	edx, edx
jz	short loc_641F52B7
xor	eax, eax
mov	ecx, 0FFFFFFFFh
mov	edi, edx
repne scasb
not	ecx
dec	ecx
mov	[esp+1Ch+size],	ecx 
mov	[esp+1Ch+items], edx 
call	_silc_memdup
mov	[new_pubkey+14h], eax
mov	edx, [public_key_0+18h]
test	edx, edx
jz	short loc_641F52DB
xor	eax, eax
mov	ecx, 0FFFFFFFFh
mov	edi, edx
repne scasb
not	ecx
dec	ecx
mov	[esp+1Ch+size],	ecx 
mov	[esp+1Ch+items], edx 
call	_silc_memdup
mov	[new_pubkey+18h], eax
mov	eax, new_pubkey
add	esp, 10h
pop	public_key_0
pop	new_pubkey
pop	edi
retn
mov	[esp+1Ch+items], new_pubkey
call	_silc_free
xor	eax, eax
add	esp, 10h
pop	public_key_0
pop	new_pubkey
pop	edi
retn
align 4
public _silc_pkcs_silc_public_key_version
push	ebx
sub	esp, 18h
mov	ebx, [esp+1Ch+public_key]
mov	[esp+1Ch+key], ebx 
call	_silc_pkcs_get_type
dec	eax
jz	short loc_641F5318
mov	eax, 0FFFFFFFFh
add	esp, 18h
pop	public_key_0
retn
align 4
mov	eax, [public_key_0+4]
mov	eax, [eax+18h]
test	eax, eax
jz	short loc_641F5330
mov	[esp+1Ch+public_key], eax 
add	esp, 18h
pop	public_key_0
jmp	_atoi
align 10h
mov	al, 1
jmp	short loc_641F5310
public _silc_pkcs_silc_decode_identifier
			
			
push	ebp
push	edi
push	esi
push	ebx
sub	esp, 2Ch
mov	ebx, [esp+3Ch+identifier]
mov	[esp+3Ch+size],	offset aUn_0 
mov	[esp+3Ch+items], ebx 
call	_strstr
test	eax, eax
jz	loc_641F564C
mov	[esp+3Ch+size],	offset aHn_0 
mov	[esp+3Ch+items], identifier_0 
call	_strstr
test	eax, eax
jz	loc_641F564C
test	identifier_0, identifier_0
jz	loc_641F543A
nop
mov	[esp+3Ch+size],	offset asc_6426CD1A 
mov	[esp+3Ch+items], cp 
call	_strcspn
mov	len, eax
test	eax, eax
jle	loc_641F543A
cmp	byte ptr [cp+len-1], 5Ch
jz	loc_641F54A0
test	cp, cp
jz	loc_641F543A
mov	[esp+3Ch+size],	1 
lea	eax, [len+1]
mov	[esp+3Ch+items], eax 
call	_silc_calloc
mov	[esp+3Ch+var_20], eax
test	eax, eax
jz	loc_641F564C
xor	eax, eax
mov	ecx, 0FFFFFFFFh
mov	item, cp
repne scasb
not	ecx
dec	ecx
cmp	len, ecx
ja	short loc_641F543A
mov	edi, [esp+3Ch+var_20]
mov	esi, ebx
mov	ecx, len
rep movsb
mov	[esp+3Ch+size],	offset aUn_0 
mov	edx, [esp+3Ch+var_20]
mov	[esp+3Ch+items], edx 
call	_strstr
test	eax, eax
jz	short loc_641F5458
mov	[esp+3Ch+size],	offset asc_6426CD1C 
mov	[esp+3Ch+items], ebx 
call	_strcspn
mov	edx, [esp+3Ch+var_20]
lea	eax, [edx+eax+1]
mov	[esp+3Ch+items], eax 
call	_strdup
mov	edx, [esp+3Ch+ident]
mov	[edx], eax
			
add	ebx, len
cmp	byte ptr [cp], 0
jz	short loc_641F5440
inc	cp
mov	eax, [esp+3Ch+var_20]
mov	[esp+3Ch+items], eax 
call	_silc_free
test	cp, cp
jnz	loc_641F5378
			
mov	al, 1
jmp	short loc_641F544E
align 10h
mov	edx, [esp+3Ch+var_20]
mov	[esp+3Ch+items], edx 
call	_silc_free
mov	al, 1
			
add	esp, 2Ch
pop	cp
pop	esi
pop	item
pop	len
retn
align 4
mov	[esp+3Ch+size],	offset aHn_0 
mov	eax, [esp+3Ch+var_20]
mov	[esp+3Ch+items], eax 
call	_strstr
test	eax, eax
jz	loc_641F54F4
mov	[esp+3Ch+size],	offset asc_6426CD1C 
mov	[esp+3Ch+items], ebx 
call	_strcspn
mov	edx, [esp+3Ch+var_20]
lea	eax, [edx+eax+1]
mov	[esp+3Ch+items], eax 
call	_strdup
mov	edx, [esp+3Ch+ident]
mov	[edx+4], eax
jmp	short loc_641F541E
align 10h
test	cp, cp
jz	short loc_641F543A
xor	esi, esi
jmp	short loc_641F54D9
add	identifier_0, eax
mov	[esp+3Ch+size],	offset asc_6426CD1A 
mov	[esp+3Ch+items], cp 
call	_strcspn
add	eax, len
mov	len, eax
test	eax, eax
jle	loc_641F543A
cmp	byte ptr [cp+len-1], 5Ch
jnz	loc_641F539D
test	cp, cp
jz	loc_641F543A
mov	ecx, 0FFFFFFFFh
mov	item, cp
mov	eax, esi
repne scasb
not	ecx
dec	ecx
lea	eax, [len+1]
cmp	eax, ecx
jbe	short loc_641F54A8
jmp	loc_641F543A
align 4
mov	[esp+3Ch+size],	offset aRn 
mov	eax, [esp+3Ch+var_20]
mov	[esp+3Ch+items], eax 
call	_strstr
test	eax, eax
jz	short loc_641F5538
mov	[esp+3Ch+size],	offset asc_6426CD1C 
mov	[esp+3Ch+items], ebx 
call	_strcspn
mov	edx, [esp+3Ch+var_20]
lea	eax, [edx+eax+1]
mov	[esp+3Ch+items], eax 
call	_strdup
mov	edx, [esp+3Ch+ident]
mov	[edx+8], eax
jmp	loc_641F541E
mov	[esp+3Ch+size],	offset aE 
mov	eax, [esp+3Ch+var_20]
mov	[esp+3Ch+items], eax 
call	_strstr
test	eax, eax
jz	short loc_641F557C
mov	[esp+3Ch+size],	offset asc_6426CD1C 
mov	[esp+3Ch+items], ebx 
call	_strcspn
mov	edx, [esp+3Ch+var_20]
lea	eax, [edx+eax+1]
mov	[esp+3Ch+items], eax 
call	_strdup
mov	edx, [esp+3Ch+ident]
mov	[edx+0Ch], eax
jmp	loc_641F541E
mov	[esp+3Ch+size],	offset aO 
mov	eax, [esp+3Ch+var_20]
mov	[esp+3Ch+items], eax 
call	_strstr
test	eax, eax
jz	short loc_641F55C0
mov	[esp+3Ch+size],	offset asc_6426CD1C 
mov	[esp+3Ch+items], ebx 
call	_strcspn
mov	edx, [esp+3Ch+var_20]
lea	eax, [edx+eax+1]
mov	[esp+3Ch+items], eax 
call	_strdup
mov	edx, [esp+3Ch+ident]
mov	[edx+10h], eax
jmp	loc_641F541E
mov	[esp+3Ch+size],	offset aC_0 
mov	eax, [esp+3Ch+var_20]
mov	[esp+3Ch+items], eax 
call	_strstr
test	eax, eax
jz	short loc_641F5604
mov	[esp+3Ch+size],	offset asc_6426CD1C 
mov	[esp+3Ch+items], ebx 
call	_strcspn
mov	edx, [esp+3Ch+var_20]
lea	eax, [edx+eax+1]
mov	[esp+3Ch+items], eax 
call	_strdup
mov	edx, [esp+3Ch+ident]
mov	[edx+14h], eax
jmp	loc_641F541E
mov	[esp+3Ch+size],	offset aV 
mov	eax, [esp+3Ch+var_20]
mov	[esp+3Ch+items], eax 
call	_strstr
test	eax, eax
jz	loc_641F541E
mov	[esp+3Ch+size],	offset asc_6426CD1C 
mov	[esp+3Ch+items], ebx 
call	_strcspn
mov	edx, [esp+3Ch+var_20]
lea	eax, [edx+eax+1]
mov	[esp+3Ch+items], eax 
call	_strdup
mov	edx, [esp+3Ch+ident]
mov	[edx+18h], eax
jmp	loc_641F541E
			
xor	eax, eax
jmp	loc_641F544E
align 4
public _silc_pkcs_silc_import_public_key
			
			
push	ebp
push	edi
push	esi
push	ebx
sub	esp, 0CCh
mov	eax, [esp+0DCh+key]
mov	edi, [esp+0DCh+key_len]
mov	ebx, [esp+0DCh+ret_public_key]
test	ebx, ebx
jz	loc_641F5729
mov	[esp+0DCh+buf.head], key_0
mov	[esp+0DCh+buf.data], key_0
add	key_0, key_len_0
mov	[esp+0DCh+buf.end], eax
mov	[esp+0DCh+buf.tail], eax
mov	[esp+0DCh+key_data], 0
mov	[esp+0DCh+ident], 0
mov	[esp+0DCh+pkcs_name], 0
mov	[esp+0DCh+var_CC], 1Dh
lea	eax, [esp+0DCh+totlen]
mov	[esp+0DCh+var_D0], eax
mov	[esp+0DCh+var_D4], 5
mov	[esp+0DCh+size], 19h
lea	ebp, [esp+0DCh+buf]
mov	[esp+0DCh+src],	ebp 
call	_silc_buffer_unformat
inc	eax
jz	short err
mov	esi, [esp+0DCh+totlen]
cmp	esi, key_len_0
jz	short loc_641F5738
add	esi, 4
cmp	esi, key_len_0
jz	short loc_641F5749
			
xor	ebp, ebp
			
mov	ret, [esp+0DCh+pkcs_name]
mov	[esp+0DCh+src],	ret 
call	_silc_free
mov	ret, [esp+0DCh+ident]
mov	[esp+0DCh+src],	ret 
call	_silc_free
mov	[esp+0DCh+src],	silc_pubkey 
call	_silc_free
xor	ret, ret
			
add	esp, 0CCh
pop	ret_public_key_0
pop	esi
pop	keydata_len
pop	silc_pubkey
retn
align 4
sub	esi, 4
mov	[esp+0DCh+totlen], esi
add	esi, 4
cmp	esi, key_len_0
jnz	short err
mov	[esp+0DCh+var_BC], 1Dh
lea	ret, [esp+0DCh+identifier_len]
mov	[esp+0DCh+var_C0], ret
lea	ret, [esp+0DCh+ident]
mov	[esp+0DCh+var_C4], ret
mov	[esp+0DCh+var_C8], 14h
lea	ret, [esp+0DCh+identifier_len+2]
mov	[esp+0DCh+var_CC], ret
lea	ret, [esp+0DCh+pkcs_name]
mov	[esp+0DCh+var_D0], ret
mov	[esp+0DCh+var_D4], 14h
mov	[esp+0DCh+size], 19h
mov	[esp+0DCh+src],	ebp 
call	_silc_buffer_unformat
inc	ret
jz	err
mov	ax, word ptr [esp+0DCh+identifier_len+2]
test	ax, ax
jz	err
mov	edx, [esp+0DCh+identifier_len]
cmp	dx, 2
jbe	err
movzx	edx, dx
movzx	ret, ax
lea	ret, [edx+ret]
cmp	ret, [esp+0DCh+totlen]
ja	err
mov	key_len_0, [esp+0DCh+buf.tail]
sub	edi, [esp+0DCh+buf.data]
mov	[esp+0DCh+var_CC], 1Dh
mov	[esp+0DCh+var_D0], keydata_len
lea	ret, [esp+0DCh+key_data]
mov	[esp+0DCh+var_D4], ret
mov	[esp+0DCh+size], 0Ch
mov	[esp+0DCh+src],	ebp 
call	_silc_buffer_unformat
inc	ret
jz	err
mov	[esp+0DCh+size], 24h 
mov	[esp+0DCh+src],	1 
call	_silc_calloc
mov	ebp, ret
test	ret, ret
jz	loc_641F5703
mov	[esp+0DCh+size], ret 
mov	ret, [esp+0DCh+ident]
mov	[esp+0DCh+src],	ret 
call	_silc_pkcs_silc_decode_identifier
test	al, al
jz	loc_641F5703
call	_silc_asn1_alloc
mov	[esp+0DCh+asn1], ret
test	ret, ret
jz	loc_641F5703
mov	edx, [esp+0DCh+pkcs_name]
mov	[esp+0DCh+size], offset	aRsa_0 
mov	[esp+0DCh+src],	edx 
mov	[esp+0DCh+ptr],	edx
mov	[esp+0DCh+algorithm], edx
call	_strcmp
test	ret, ret
mov	edx, [esp+0DCh+ptr]
mov	ecx, [esp+0DCh+algorithm]
jnz	short loc_641F590A
mov	ret, [silc_pubkey+18h]
test	ret, ret
jz	loc_641F5943
mov	[esp+0DCh+src],	ret 
call	_atoi
dec	ret
jle	loc_641F593C
mov	[esp+0DCh+size], offset	aPkcs1 
mov	ret, [esp+0DCh+pkcs_name]
mov	[esp+0DCh+src],	ret 
call	_silc_pkcs_find_algorithm
mov	[esp+0DCh+var_88], ret
cmp	[esp+0DCh+var_88], 0
jz	short loc_641F5903
mov	ret, [esp+0DCh+var_88]
mov	[silc_pubkey+1Ch], ret
cmp	keydata_len, 3
jbe	short loc_641F5903
mov	edx, [esp+0DCh+key_data]
movzx	ecx, byte ptr [edx+3]
movzx	ret, byte ptr [edx]
shl	ret, 18h
or	ecx, ret
movzx	ret, byte ptr [edx+1]
shl	ret, 10h
or	ecx, ret
movzx	ret, byte ptr [edx+2]
shl	ret, 8
or	ret, ecx
jz	short loc_641F5903
lea	edx, [e_len+4]
cmp	edx, keydata_len
jbe	short loc_641F595C
			
mov	edx, [esp+0DCh+pkcs_name]
			
mov	[esp+0DCh+src],	edx 
call	_silc_free
mov	ret, [esp+0DCh+ident]
mov	[esp+0DCh+src],	ret 
call	_silc_free
mov	[esp+0DCh+src],	silc_pubkey 
call	_silc_free
mov	ret, [esp+0DCh+asn1]
mov	[esp+0DCh+src],	ret 
call	_silc_asn1_free
xor	ret, ret
jmp	loc_641F572B
mov	ecx, [esp+0DCh+pkcs_name]
mov	[esp+0DCh+size], offset	scheme 
mov	[esp+0DCh+src],	ecx 
call	_silc_pkcs_find_algorithm
mov	[esp+0DCh+var_88], ret
jmp	loc_641F58C2
lea	edx, [esp+0DCh+e]
mov	[esp+0DCh+src],	edx 
mov	[esp+0DCh+algorithm], e_len
mov	[esp+0DCh+ptr],	edx
call	_silc_mp_init
mov	edx, [esp+0DCh+ptr]
mov	[esp+0DCh+var_D4], edx 
mov	ret, [esp+0DCh+algorithm]
mov	[esp+0DCh+size], ret 
mov	ecx, [esp+0DCh+key_data]
add	ecx, 4
mov	[esp+0DCh+src],	ecx 
call	_silc_mp_bin2mp
mov	ret, [esp+0DCh+algorithm]
lea	ecx, [ret+8]
mov	[esp+0DCh+var_84], ecx
cmp	ecx, keydata_len
mov	edx, [esp+0DCh+ptr]
ja	short loc_641F5A06
mov	ecx, [esp+0DCh+key_data]
movzx	ecx, byte ptr [ecx+e_len+4]
shl	ecx, 18h
mov	[esp+0DCh+var_80], ecx
mov	ecx, [esp+0DCh+key_data]
movzx	ecx, byte ptr [ecx+e_len+5]
mov	[esp+0DCh+var_A4], ecx
shl	ecx, 10h
or	ecx, [esp+0DCh+var_80]
mov	[esp+0DCh+var_80], ecx
mov	ecx, [esp+0DCh+key_data]
movzx	ecx, byte ptr [ecx+e_len+7]
or	ecx, [esp+0DCh+var_80]
mov	[esp+0DCh+var_80], ecx
mov	ecx, [esp+0DCh+key_data]
movzx	e_len, byte ptr	[ecx+e_len+6]
shl	ret, 8
or	ret, [esp+0DCh+var_80]
jz	short loc_641F5A06
mov	ecx, [esp+0DCh+var_84]
add	ecx, n_len
cmp	ecx, keydata_len
jbe	short loc_641F5A1A
			
mov	[esp+0DCh+src],	edx 
call	_silc_mp_uninit
mov	edx, [esp+0DCh+pkcs_name]
jmp	loc_641F590A
lea	keydata_len, [esp+0DCh+n]
mov	[esp+0DCh+src],	edi 
mov	[esp+0DCh+algorithm], n_len
mov	[esp+0DCh+ptr],	edx
call	_silc_mp_init
lea	ecx, [esp+0DCh+n]
mov	[esp+0DCh+var_D4], ecx 
mov	ret, [esp+0DCh+algorithm]
mov	[esp+0DCh+size], ret 
mov	n_len, [esp+0DCh+var_84]
add	ret, [esp+0DCh+key_data]
mov	[esp+0DCh+src],	ret 
call	_silc_mp_bin2mp
lea	edi, [esp+0DCh+alg_key]
mov	[esp+0DCh+var_A0], edi
mov	ecx, 4
xor	ret, ret
rep stosd
mov	[esp+0DCh+var_BC], 0
mov	[esp+0DCh+var_C0], 0
mov	edx, [esp+0DCh+ptr]
mov	[esp+0DCh+var_C4], edx
mov	[esp+0DCh+var_C8], 8002h
lea	ret, [esp+0DCh+n]
mov	[esp+0DCh+var_CC], ret
mov	[esp+0DCh+var_D0], 8002h
mov	[esp+0DCh+var_D4], 8010h
lea	ecx, [esp+0DCh+alg_key]
mov	[esp+0DCh+size], ecx 
mov	edi, [esp+0DCh+asn1]
mov	[esp+0DCh+src],	edi 
call	_silc_asn1_encode
test	al, al
mov	edx, [esp+0DCh+ptr]
jnz	short loc_641F5AD5
mov	[esp+0DCh+src],	edx 
call	_silc_mp_uninit
lea	ret, [esp+0DCh+n]
mov	[esp+0DCh+src],	ret 
call	_silc_mp_uninit
jmp	loc_641F5903
mov	[esp+0DCh+src],	edx 
call	_silc_mp_uninit
lea	edx, [esp+0DCh+n]
mov	[esp+0DCh+src],	edx 
call	_silc_mp_uninit
mov	ret, [esp+0DCh+alg_key.data]
lea	edx, [silc_pubkey+20h]
mov	[esp+0DCh+var_D4], edx
mov	edx, [esp+0DCh+alg_key.tail]
sub	edx, ret
mov	[esp+0DCh+size], edx
mov	[esp+0DCh+src],	ret
mov	ecx, [esp+0DCh+var_88]
call	dword ptr [ecx+10h]
test	ret, ret
jz	loc_641F5903
mov	ret, [esp+0DCh+pkcs_name]
mov	[esp+0DCh+src],	ret 
call	_silc_free
mov	ret, [esp+0DCh+ident]
mov	[esp+0DCh+src],	ret 
call	_silc_free
mov	edi, [esp+0DCh+asn1]
mov	[esp+0DCh+src],	edi 
call	_silc_asn1_free
mov	[ret_public_key_0], silc_pubkey
mov	ret, esi
jmp	loc_641F572B
align 4
public _silc_pkcs_silc_import_public_key_file
push	edi
push	esi
push	ebx
sub	esp, 10h
mov	edx, [esp+1Ch+filedata]
mov	ebx, [esp+1Ch+ret_public_key]
test	ebx, ebx
jz	loc_641F5C04
mov	edi, [esp+1Ch+filedata_len]
cmp	edi, 3Eh
jbe	short loc_641F5B87
mov	eax, offset aBeginSilcPubli 
jmp	short loc_641F5B7D
align 4
inc	filedata_0
inc	eax
cmp	eax, (offset aBeginSilcPubli+20h) 
jz	short loc_641F5BAC
movzx	esi, byte ptr [filedata_0]
movsx	ecx, byte ptr [eax]
cmp	esi, ecx
jz	short loc_641F5B74
mov	[esp+1Ch+fmt], offset aMalformedSil_1 
call	_silc_format
mov	[esp+1Ch+string], eax 
mov	[esp+1Ch+fmt], 3 
call	_silc_log_output
xor	eax, eax
add	esp, 10h
pop	ret_public_key_0
pop	esi
pop	edi
retn
sub	edi, 3Fh
mov	[esp+1Ch+filedata_len],	edi
cmp	[esp+1Ch+encoding], 1
jz	short loc_641F5BE2
xor	esi, esi
mov	[esp+1Ch+ret_len], ret_public_key_0
mov	[esp+1Ch+string], edi 
mov	[esp+1Ch+fmt], filedata_0 
call	_silc_pkcs_silc_import_public_key
mov	ret_public_key_0, eax
mov	[esp+1Ch+fmt], data 
call	_silc_free
test	ret, ret
setnz	al
add	esp, 10h
pop	ret
pop	data
pop	edi
retn
lea	eax, [esp+1Ch+filedata_len]
mov	[esp+1Ch+ret_len], eax 
mov	[esp+1Ch+string], edi 
mov	[esp+1Ch+fmt], filedata_0 
call	_silc_base64_decode
mov	esi, eax
test	eax, eax
jz	short loc_641F5C04
mov	edi, [esp+1Ch+filedata_len]
mov	edx, data
jmp	short loc_641F5BBC
			
xor	data, data
add	esp, 10h
pop	ret_public_key_0
pop	data
pop	edi
retn
align 10h
public _silc_pkcs_silc_generate_key
push	ebp
push	edi
push	esi
push	ebx
sub	esp, 2Ch
mov	esi, [esp+3Ch+rng]
test	esi, esi
jz	loc_641F5D4C
mov	[esp+3Ch+type],	1 
call	_silc_pkcs_find_pkcs
mov	edi, eax
test	eax, eax
jz	loc_641F5D4C
mov	[esp+3Ch+size],	24h 
mov	[esp+3Ch+type],	1 
call	_silc_calloc
mov	ebx, eax
test	eax, eax
jz	loc_641F5D4C
mov	[esp+3Ch+size],	pubkey 
mov	pubkey,	[esp+3Ch+identifier]
mov	[esp+3Ch+type],	eax 
call	_silc_pkcs_silc_decode_identifier
test	al, al
jz	loc_641F5D4C
mov	eax, [pubkey+18h]
test	eax, eax
jz	loc_641F5D58
mov	[esp+3Ch+type],	eax 
call	_atoi
dec	eax
jle	loc_641F5D58
mov	eax, offset aPkcs1 
mov	[esp+3Ch+size],	eax 
mov	eax, [esp+3Ch+algorithm]
mov	[esp+3Ch+type],	eax 
call	_silc_pkcs_find_algorithm
mov	ebp, eax
test	eax, eax
jz	loc_641F5D98
mov	[pubkey+1Ch], alg
mov	[esp+3Ch+size],	8 
mov	[esp+3Ch+type],	1 
call	_silc_calloc
mov	[esp+3Ch+ptr], eax
test	eax, eax
jz	loc_641F5D98
mov	[eax], alg
mov	[esp+3Ch+size],	8 
mov	[esp+3Ch+type],	1 
call	_silc_calloc
mov	edx, [esp+3Ch+ret_public_key]
mov	[edx], eax
test	eax, eax
jz	loc_641F5DA4
mov	[eax], pkcs
mov	[eax+4], pubkey
mov	[esp+3Ch+size],	8 
mov	[esp+3Ch+type],	1 
call	_silc_calloc
mov	edx, [esp+3Ch+ret_private_key]
mov	[edx], eax
test	eax, eax
jz	loc_641F5DBC
mov	[eax], pkcs
mov	edx, [esp+3Ch+ptr]
mov	[eax+4], edx
mov	eax, edx
add	eax, 4
mov	[esp+3Ch+var_30], eax
lea	eax, [pubkey+20h]
mov	[esp+3Ch+var_34], eax
mov	[esp+3Ch+size],	rng_0
mov	eax, [esp+3Ch+bits_key_len]
mov	[esp+3Ch+type],	eax
call	dword ptr [alg+0Ch]
test	al, al
jz	short loc_641F5D64
mov	al, 1
add	esp, 2Ch
pop	pubkey
pop	rng_0
pop	pkcs
pop	alg
retn
align 4
			
xor	eax, eax
			
add	esp, 2Ch
pop	pubkey
pop	rng_0
pop	pkcs
pop	alg
retn
align 4
			
mov	eax, offset scheme 
jmp	loc_641F5C8E
align 4
mov	[esp+3Ch+type],	pubkey 
call	_silc_free
mov	eax, [esp+3Ch+ptr]
mov	[esp+3Ch+type],	eax 
call	_silc_free
mov	edx, [esp+3Ch+ret_public_key]
mov	eax, [edx]
mov	[esp+3Ch+type],	eax 
call	_silc_free
mov	edx, [esp+3Ch+ret_private_key]
mov	eax, [edx]
mov	[esp+3Ch+type],	eax 
call	_silc_free
xor	eax, eax
jmp	short loc_641F5D4E
			
mov	[esp+3Ch+type],	pubkey 
call	_silc_free
xor	eax, eax
jmp	short loc_641F5D4E
mov	[esp+3Ch+type],	pubkey 
call	_silc_free
mov	eax, [esp+3Ch+ptr]
mov	[esp+3Ch+type],	eax 
call	_silc_free
xor	eax, eax
jmp	short loc_641F5D4E
mov	[esp+3Ch+type],	pubkey 
call	_silc_free
mov	eax, [esp+3Ch+ptr]
mov	[esp+3Ch+type],	eax 
call	_silc_free
mov	edx, [esp+3Ch+ret_public_key]
mov	eax, [edx]
mov	[esp+3Ch+type],	eax 
call	_silc_free
xor	eax, eax
jmp	loc_641F5D4E
align 4
public _silc_pkcs_silc_export_public_key
			
			
push	ebp
push	edi
push	esi
push	ebx
sub	esp, 0ACh
mov	ebx, [esp+0BCh+public_key]
mov	eax, [ebx+1Ch]
mov	[esp+0BCh+var_6C], eax
mov	eax, [eax+14h]
test	eax, eax
jz	loc_641F62F0
lea	edx, [esp+0BCh+pk_len]
mov	[esp+0BCh+host], edx
mov	edx, [public_key_0+20h]
mov	[esp+0BCh+username], edx
call	eax
mov	[esp+0BCh+var_74], eax
test	eax, eax
jz	loc_641F62F0
mov	ecx, eax
mov	[esp+0BCh+alg_key.head], eax
mov	[esp+0BCh+alg_key.data], eax
mov	eax, [esp+0BCh+pk_len]
add	eax, ecx
mov	[esp+0BCh+alg_key.end],	eax
mov	[esp+0BCh+alg_key.tail], eax
mov	eax, [public_key_0+18h]
mov	[esp+0BCh+version], eax	
mov	eax, [public_key_0+14h]
mov	[esp+0BCh+country], eax	
mov	eax, [public_key_0+10h]
mov	[esp+0BCh+org],	eax 
mov	eax, [public_key_0+0Ch]
mov	[esp+0BCh+email], eax 
mov	eax, [public_key_0+8]
mov	[esp+0BCh+realname], eax 
mov	eax, [public_key_0+4]
mov	[esp+0BCh+host], eax 
mov	eax, [public_key_0]
mov	[esp+0BCh+username], eax 
call	_silc_pkcs_silc_encode_identifier
mov	[esp+0BCh+var_70], eax
test	eax, eax
jz	loc_641F6314
call	_silc_asn1_alloc
mov	[esp+0BCh+asn1], eax
test	eax, eax
jz	err
mov	edx, [esp+0BCh+var_6C]
mov	eax, [edx]
mov	edi, offset aRsa_0 
mov	ecx, 4
mov	esi, eax
repe cmpsb
jnz	loc_641F6240
lea	esi, [esp+0BCh+n]
mov	ecx, 10h
mov	edi, esi
xor	eax, eax
rep stosb
lea	public_key_0, [esp+0BCh+e]
mov	cl, 10h
mov	edi, ebx
rep stosb
mov	[esp+0BCh+var_9C], 0
mov	[esp+0BCh+var_A0], 0
mov	[esp+0BCh+version], ebx
mov	[esp+0BCh+country], 8002h
mov	[esp+0BCh+org],	esi
mov	[esp+0BCh+email], 8002h
mov	[esp+0BCh+realname], 8010h
lea	eax, [esp+0BCh+alg_key]
mov	[esp+0BCh+host], eax 
mov	edx, [esp+0BCh+asn1]
mov	[esp+0BCh+username], edx 
call	_silc_asn1_decode
test	al, al
jz	err
lea	eax, [esp+0BCh+e_len]
mov	[esp+0BCh+realname], eax 
mov	[esp+0BCh+host], 0 
mov	[esp+0BCh+username], ebx 
call	_silc_mp_mp2bin
mov	[esp+0BCh+ptr],	eax
test	eax, eax
jz	err
lea	eax, [esp+0BCh+n_len]
mov	[esp+0BCh+realname], eax 
mov	[esp+0BCh+host], 0 
mov	[esp+0BCh+username], esi 
call	_silc_mp_mp2bin
mov	ebx, eax
test	eax, eax
jz	err
mov	nb, [esp+0BCh+e_len]
add	eax, [esp+0BCh+n_len]
add	eax, 8
mov	[esp+0BCh+var_64], eax
mov	[esp+0BCh+host], 1 
mov	[esp+0BCh+username], eax 
call	_silc_calloc
mov	ebp, eax
test	eax, eax
jz	loc_641F6276
movzx	key, byte ptr [esp+0BCh+e_len+3]
mov	[key+0], al
movzx	eax, word ptr [esp+0BCh+e_len+2]
mov	[key+1], al
mov	eax, [esp+0BCh+e_len]
shr	eax, 8
mov	[key+2], al
mov	eax, [esp+0BCh+e_len]
mov	[key+3], al
lea	eax, [key+4]
mov	ecx, [esp+0BCh+e_len]
mov	edi, eax
mov	esi, [esp+0BCh+ptr]
rep movsb
movzx	edx, byte ptr [esp+0BCh+n_len+3]
mov	eax, [esp+0BCh+e_len]
mov	[key+eax+4], dl
movzx	edx, word ptr [esp+0BCh+n_len+2]
mov	eax, [esp+0BCh+e_len]
mov	[key+eax+5], dl
mov	edx, [esp+0BCh+n_len]
shr	edx, 8
mov	eax, [esp+0BCh+e_len]
mov	[key+eax+6], dl
mov	edx, [esp+0BCh+n_len]
mov	eax, [esp+0BCh+e_len]
mov	[key+eax+7], dl
mov	eax, [esp+0BCh+e_len]
lea	eax, [key+eax+8]
mov	e_len_0, [esp+0BCh+n_len]
mov	edi, eax
mov	eb, nb
rep movsb
mov	[esp+0BCh+username], ebx 
call	_silc_free
mov	ecx, [esp+0BCh+ptr]
mov	[esp+0BCh+username], ecx 
call	_silc_free
mov	eax, [esp+0BCh+var_6C]
mov	edi, [eax]
mov	edx, 0FFFFFFFFh
mov	ecx, edx
xor	eax, eax
repne scasb
not	ecx
dec	ecx
mov	[esp+0BCh+ptr],	ecx
mov	ecx, edx
mov	edi, [esp+0BCh+var_70]
repne scasb
mov	edx, ecx
not	edx
lea	nb, [edx-1]
mov	[esp+0BCh+host], 10h 
mov	[esp+0BCh+username], 1 
call	_silc_calloc
mov	nb, eax
test	eax, eax
jz	loc_641F6276
mov	ecx, [esp+0BCh+var_64]
mov	edx, [esp+0BCh+ptr]
lea	buf, [ecx+edx+4]
add	eax, esi
mov	[esp+0BCh+ptr],	eax
mov	esi, eax
add	esi, 4
jz	loc_641F633F
mov	[esp+0BCh+host], 1 
mov	[esp+0BCh+username], esi 
call	_silc_calloc
mov	[buf], eax
test	eax, eax
jz	loc_641F6276
mov	[buf+4], eax
mov	[buf+8], eax
lea	edx, [eax+esi]
mov	[buf+0Ch], edx
mov	ecx, edx
sub	ecx, eax
cmp	esi, ecx
ja	short loc_641F60EA
mov	[buf+8], edx
mov	esi, 0FFFFFFFFh
xor	eax, eax
mov	ecx, esi
mov	edi, [esp+0BCh+var_70]
repne scasb
not	ecx
dec	ecx
mov	[esp+0BCh+var_60], ecx
mov	ecx, [esp+0BCh+var_6C]
mov	edx, [ecx]
mov	ecx, esi
mov	edi, edx
repne scasb
mov	esi, ecx
not	esi
dec	esi
mov	[esp+0BCh+var_84], 1Dh
mov	eax, [esp+0BCh+var_64]
mov	[esp+0BCh+var_88], eax
mov	[esp+0BCh+var_8C], key
mov	[esp+0BCh+var_90], 1Bh
mov	ecx, [esp+0BCh+var_70]
mov	[esp+0BCh+var_94], ecx
mov	[esp+0BCh+var_98], 0Ah
mov	eax, [esp+0BCh+var_60]
mov	[esp+0BCh+var_9C], eax
mov	[esp+0BCh+var_A0], 3
mov	[esp+0BCh+version], edx
mov	[esp+0BCh+country], 0Ah
mov	[esp+0BCh+org],	esi
mov	[esp+0BCh+email], 3
mov	edx, [esp+0BCh+ptr]
mov	[esp+0BCh+realname], edx
mov	[esp+0BCh+host], 5
mov	[esp+0BCh+username], buf 
call	_silc_buffer_format
test	eax, eax
js	loc_641F62AC
mov	eax, [buf]
mov	edx, [esp+0BCh+ret_len]
test	edx, edx
jz	short loc_641F61A0
mov	edx, [buf+0Ch]
sub	edx, ret
mov	ecx, [esp+0BCh+ret_len]
mov	[ecx], edx
mov	dword ptr [buf+0Ch], 0
mov	dword ptr [buf+8], 0
mov	dword ptr [buf+4], 0
mov	dword ptr [buf], 0
mov	[esp+0BCh+username], 0 
mov	[esp+0BCh+var_7C], ret
call	_silc_free
mov	[esp+0BCh+username], buf 
call	_silc_free
mov	[esp+0BCh+username], key 
call	_silc_free
mov	edx, [esp+0BCh+var_70]
mov	[esp+0BCh+username], edx 
call	_silc_free
mov	edx, [esp+0BCh+alg_key.head]
mov	[esp+0BCh+alg_key.end],	0
mov	[esp+0BCh+alg_key.tail], 0
mov	[esp+0BCh+alg_key.data], 0
mov	[esp+0BCh+alg_key.head], 0
mov	[esp+0BCh+username], edx 
call	_silc_free
mov	ecx, [esp+0BCh+asn1]
mov	[esp+0BCh+username], ecx 
call	_silc_asn1_free
mov	eax, [esp+0BCh+var_7C]
add	esp, 0ACh
pop	buf
pop	esi
pop	edi
pop	key
retn
align 10h
mov	edi, offset aDsa 
mov	ecx, 4
mov	esi, eax
repe cmpsb
jnz	short loc_641F6254
			
xor	ebp, ebp
jmp	short loc_641F6276
mov	[esp+0BCh+host], eax
mov	[esp+0BCh+username], offset aUnsupportedPkc 
call	_silc_format
mov	[esp+0BCh+host], eax 
mov	[esp+0BCh+username], 3 
call	_silc_log_output
xor	ebp, ebp
			
mov	eax, [esp+0BCh+var_70]
mov	[esp+0BCh+username], eax 
call	_silc_free
mov	edx, [esp+0BCh+var_74]
mov	[esp+0BCh+username], edx 
call	_silc_free
mov	[esp+0BCh+username], key 
call	_silc_free
mov	eax, [esp+0BCh+asn1]
test	eax, eax
jnz	short loc_641F62DE
xor	eax, eax
add	esp, 0ACh
pop	nb
pop	esi
pop	edi
pop	key
retn
align 4
mov	ecx, [esp+0BCh+var_70]
mov	[esp+0BCh+username], ecx 
call	_silc_free
mov	eax, [esp+0BCh+var_74]
mov	[esp+0BCh+username], eax 
call	_silc_free
mov	[esp+0BCh+username], key 
call	_silc_free
mov	eax, [buf]
mov	[esp+0BCh+username], eax 
call	_silc_free
mov	[esp+0BCh+username], buf 
call	_silc_free
mov	ecx, [esp+0BCh+asn1]
mov	[esp+0BCh+username], ecx 
call	_silc_asn1_free
xor	eax, eax
jmp	short loc_641F62A0
align 10h
			
mov	[esp+0BCh+username], offset aErrorExporting 
call	_silc_format
mov	[esp+0BCh+host], eax 
mov	[esp+0BCh+username], 3 
call	_silc_log_output
xor	eax, eax
jmp	loc_641F6232
align 4
mov	[esp+0BCh+username], offset aErrorEncodingS 
call	_silc_format
mov	[esp+0BCh+host], eax 
mov	[esp+0BCh+username], 3 
call	_silc_log_output
xor	ebp, ebp
mov	[esp+0BCh+asn1], 0
jmp	loc_641F6276
mov	edx, [buf+8]
jmp	loc_641F60E7
align 4
public _silc_pkcs_silc_export_public_key_file
push	ebp
push	edi
push	esi
push	ebx
sub	esp, 4Ch
mov	ebx, [esp+5Ch+ret_len]
lea	eax, [esp+5Ch+key_len]
mov	[esp+5Ch+size],	eax 
mov	eax, [esp+5Ch+public_key]
mov	[esp+5Ch+items], eax 
call	_silc_pkcs_silc_export_public_key
mov	edi, eax
test	eax, eax
jz	loc_641F6468
cmp	[esp+5Ch+encoding], 1
jz	loc_641F6474
mov	ebp, [esp+5Ch+key_len]
mov	[esp+5Ch+size],	10h
mov	[esp+5Ch+items], 1 
call	_silc_calloc
mov	esi, eax
test	eax, eax
jz	loc_641F64C3
add	ebp, 3Fh
jz	loc_641F64D0
mov	[esp+5Ch+size],	1 
mov	[esp+5Ch+items], ebp 
call	_silc_calloc
mov	[buf], eax
test	eax, eax
jz	loc_641F64C3
mov	[buf+4], eax
mov	[buf+8], eax
lea	edx, [eax+ebp]
mov	[buf+0Ch], edx
mov	ecx, edx
sub	ecx, eax
cmp	ebp, ecx
ja	short loc_641F63D8
mov	[buf+8], edx
mov	[esp+5Ch+var_3C], 1Dh
mov	[esp+5Ch+var_40], offset aEndSilcPublicK 
mov	[esp+5Ch+var_44], 0Ah
mov	eax, [esp+5Ch+key_len]
mov	[esp+5Ch+var_48], eax
mov	[esp+5Ch+var_4C], key
mov	[esp+5Ch+var_50], 1Bh
mov	[esp+5Ch+var_54], offset aBeginSilcPubli 
mov	[esp+5Ch+size],	0Ah
mov	[esp+5Ch+items], buf 
call	_silc_buffer_format
test	eax, eax
js	loc_641F64B0
mov	[esp+5Ch+items], key 
call	_silc_free
mov	key, [buf]
test	ret_len_0, ret_len_0
jz	short loc_641F6439
mov	eax, [buf+0Ch]
sub	eax, key
mov	[ret_len_0], eax
mov	dword ptr [buf+0Ch], 0
mov	dword ptr [buf+8], 0
mov	dword ptr [buf+4], 0
mov	dword ptr [buf], 0
mov	[esp+5Ch+items], 0 
call	_silc_free
mov	[esp+5Ch+items], buf 
call	_silc_free
			
mov	eax, key
add	esp, 4Ch
pop	ret_len_0
pop	buf
pop	key
pop	ebp
retn
align 4
mov	key, [esp+5Ch+key_len]
mov	[esp+5Ch+size],	eax 
mov	[esp+5Ch+items], key 
call	_silc_base64_encode_file
mov	esi, eax
test	eax, eax
jz	short loc_641F64CC
mov	[esp+5Ch+items], key 
call	_silc_free
xor	eax, eax
mov	ecx, 0FFFFFFFFh
mov	key, esi
repne scasb
not	ecx
lea	ebp, [ecx-1]
mov	[esp+5Ch+key_len], ebp
mov	edi, esi
jmp	loc_641F6380
align 10h
mov	eax, buf	
call	_silc_buffer_free_2
mov	[esp+5Ch+items], key 
call	_silc_free
xor	key, key
jmp	short loc_641F6468
			
mov	[esp+5Ch+items], key 
call	_silc_free
nop
xor	key, key
jmp	short loc_641F6468
mov	edx, [buf+8]
jmp	loc_641F63D5
public _silc_pkcs_silc_export_private_key
			
			
push	ebp
push	edi
push	esi
push	ebx
sub	esp, 1BCh
mov	edx, [esp+1CCh+private_key]
mov	ebp, [edx]
mov	eax, [pkcs+2Ch]
test	eax, eax
jz	loc_641F6C14
lea	ecx, [esp+1CCh+prv_len]
mov	[esp+1CCh+src],	ecx
mov	private_key_0, [private_key_0+4]
mov	[esp+1CCh+asn1], edx
call	eax
mov	[esp+1CCh+var_114], eax
test	eax, eax
jz	loc_641F6C14
mov	[esp+1CCh+alg_key.head], eax
mov	[esp+1CCh+alg_key.data], eax
add	eax, [esp+1CCh+prv_len]
mov	[esp+1CCh+alg_key.end],	eax
mov	[esp+1CCh+alg_key.tail], eax
call	_silc_asn1_alloc
mov	[esp+1CCh+var_110], eax
test	eax, eax
jz	err
mov	esi, [pkcs+0]
mov	edi, offset aRsa_0 
mov	ecx, 4
repe cmpsb
jnz	err
mov	[esp+1CCh+var_174], 0
mov	[esp+1CCh+var_178], 0
lea	eax, [esp+1CCh+qp]
mov	[esp+1CCh+var_17C], eax
mov	[esp+1CCh+var_180], 8002h
lea	edx, [esp+1CCh+dq]
mov	[esp+1CCh+var_184], edx
mov	[esp+1CCh+var_188], 8002h
lea	ebx, [esp+1CCh+dp]
mov	[esp+1CCh+var_18C], ebx
mov	[esp+1CCh+var_190], 8002h
lea	ecx, [esp+1CCh+q]
mov	[esp+1CCh+var_194], ecx
mov	[esp+1CCh+var_198], 8002h
lea	eax, [esp+1CCh+p]
mov	[esp+1CCh+var_19C], eax
mov	[esp+1CCh+var_1A0], 8002h
lea	esi, [esp+1CCh+d]
mov	[esp+1CCh+var_1A4], esi
mov	[esp+1CCh+var_1A8], 8002h
lea	edx, [esp+1CCh+e]
mov	[esp+1CCh+var_1AC], edx
mov	[esp+1CCh+var_1B0], 8002h
lea	edi, [esp+1CCh+n]
mov	[esp+1CCh+var_1B4], edi
mov	[esp+1CCh+var_1B8], 8002h
mov	[esp+1CCh+var_1BC], 0
mov	[esp+1CCh+var_1C0], 8002h
mov	[esp+1CCh+var_1C4], 8010h
lea	eax, [esp+1CCh+alg_key]
mov	[esp+1CCh+src],	eax 
mov	ecx, [esp+1CCh+var_110]
mov	[esp+1CCh+asn1], ecx 
mov	[esp+1CCh+val],	edx
call	_silc_asn1_decode
test	al, al
mov	edx, [esp+1CCh+val]
jz	err
lea	eax, [esp+1CCh+e_len]
mov	[esp+1CCh+var_1C4], eax	
mov	[esp+1CCh+src],	0 
mov	[esp+1CCh+asn1], edx 
call	_silc_mp_mp2bin
mov	[esp+1CCh+var_EC], eax
lea	eax, [esp+1CCh+n_len]
mov	[esp+1CCh+var_1C4], eax	
mov	[esp+1CCh+src],	0 
mov	[esp+1CCh+asn1], edi 
call	_silc_mp_mp2bin
mov	[esp+1CCh+ptr],	eax
lea	eax, [esp+1CCh+d_len]
mov	[esp+1CCh+var_1C4], eax	
mov	[esp+1CCh+src],	0 
mov	[esp+1CCh+asn1], esi 
call	_silc_mp_mp2bin
mov	[esp+1CCh+var_F0], eax
lea	eax, [esp+1CCh+dp_len]
mov	[esp+1CCh+var_1C4], eax	
mov	[esp+1CCh+src],	0 
mov	[esp+1CCh+asn1], ebx 
call	_silc_mp_mp2bin
mov	[esp+1CCh+var_F4], eax
lea	eax, [esp+1CCh+dq_len]
mov	[esp+1CCh+var_1C4], eax	
mov	[esp+1CCh+src],	0 
lea	eax, [esp+1CCh+dq]
mov	[esp+1CCh+asn1], eax 
call	_silc_mp_mp2bin
mov	[esp+1CCh+var_F8], eax
lea	eax, [esp+1CCh+qp_len]
mov	[esp+1CCh+var_1C4], eax	
mov	[esp+1CCh+src],	0 
lea	edx, [esp+1CCh+qp]
mov	[esp+1CCh+asn1], edx 
call	_silc_mp_mp2bin
mov	[esp+1CCh+var_FC], eax
lea	eax, [esp+1CCh+p_len]
mov	[esp+1CCh+var_1C4], eax	
mov	[esp+1CCh+src],	0 
lea	ecx, [esp+1CCh+p]
mov	[esp+1CCh+asn1], ecx 
call	_silc_mp_mp2bin
mov	[esp+1CCh+var_100], eax
lea	eax, [esp+1CCh+q_len]
mov	[esp+1CCh+var_1C4], eax	
mov	[esp+1CCh+src],	0 
lea	eax, [esp+1CCh+q]
mov	[esp+1CCh+asn1], eax 
call	_silc_mp_mp2bin
mov	[esp+1CCh+var_104], eax
mov	edi, [esp+1CCh+e_len]
mov	edx, [esp+1CCh+n_len]
mov	esi, [esp+1CCh+d_len]
mov	ecx, [esp+1CCh+dp_len]
mov	[esp+1CCh+var_E0], ecx
mov	eax, [esp+1CCh+dq_len]
mov	[esp+1CCh+var_E4], eax
mov	ecx, [esp+1CCh+qp_len]
mov	[esp+1CCh+var_108], ecx
mov	eax, [esp+1CCh+p_len]
mov	[esp+1CCh+var_10C], eax
mov	ecx, [esp+1CCh+q_len]
mov	[esp+1CCh+var_118], ecx
mov	[esp+1CCh+src],	10h 
mov	[esp+1CCh+asn1], 1 
mov	[esp+1CCh+val],	edx
call	_silc_calloc
mov	ebx, eax
test	eax, eax
mov	edx, [esp+1CCh+val]
jz	err
lea	buf, [edx+edi+24h]
lea	esi, [eax+esi]
add	esi, [esp+1CCh+var_E0]
add	esi, [esp+1CCh+var_E4]
add	esi, [esp+1CCh+var_108]
add	esi, [esp+1CCh+var_10C]
add	esi, [esp+1CCh+var_118]
jz	loc_641F6C6D
mov	[esp+1CCh+src],	1 
mov	[esp+1CCh+asn1], len 
call	_silc_calloc
mov	[buf], eax
test	eax, eax
jz	err
mov	[buf+4], eax
mov	[buf+8], eax
lea	edx, [eax+len]
mov	[buf+0Ch], edx
mov	ecx, edx
sub	ecx, eax
cmp	len, ecx
ja	short loc_641F6868
mov	[buf+8], edx
mov	edi, [esp+1CCh+q_len]
mov	len, [esp+1CCh+p_len]
mov	ecx, [esp+1CCh+qp_len]
mov	edx, [esp+1CCh+dq_len]
mov	[esp+1CCh+var_120], 1Dh
mov	[esp+1CCh+var_124], edi
mov	eax, [esp+1CCh+var_104]
mov	[esp+1CCh+var_128], eax
mov	[esp+1CCh+var_12C], 1Bh
mov	[esp+1CCh+var_130], edi
mov	[esp+1CCh+var_134], 5
mov	[esp+1CCh+var_138], esi
mov	eax, [esp+1CCh+var_100]
mov	[esp+1CCh+var_13C], eax
mov	[esp+1CCh+var_140], 1Bh
mov	[esp+1CCh+var_144], esi
mov	[esp+1CCh+var_148], 5
mov	[esp+1CCh+var_14C], ecx
mov	eax, [esp+1CCh+var_FC]
mov	[esp+1CCh+var_150], eax
mov	[esp+1CCh+var_154], 1Bh
mov	[esp+1CCh+var_158], ecx
mov	[esp+1CCh+var_15C], 5
mov	[esp+1CCh+var_160], edx
mov	ecx, [esp+1CCh+var_F8]
mov	[esp+1CCh+var_164], ecx
mov	[esp+1CCh+var_168], 1Bh
mov	[esp+1CCh+var_16C], edx
mov	[esp+1CCh+var_170], 5
mov	eax, [esp+1CCh+dp_len]
mov	[esp+1CCh+var_174], eax
mov	edx, [esp+1CCh+var_F4]
mov	[esp+1CCh+var_178], edx
mov	[esp+1CCh+var_17C], 1Bh
mov	[esp+1CCh+var_180], eax
mov	[esp+1CCh+var_184], 5
mov	ecx, [esp+1CCh+d_len]
mov	[esp+1CCh+var_188], ecx
mov	eax, [esp+1CCh+var_F0]
mov	[esp+1CCh+var_18C], eax
mov	[esp+1CCh+var_190], 1Bh
mov	[esp+1CCh+var_194], ecx
mov	[esp+1CCh+var_198], 5
mov	edx, [esp+1CCh+n_len]
mov	[esp+1CCh+var_19C], edx
mov	ecx, [esp+1CCh+ptr]
mov	[esp+1CCh+var_1A0], ecx
mov	[esp+1CCh+var_1A4], 1Bh
mov	[esp+1CCh+var_1A8], edx
mov	[esp+1CCh+var_1AC], 5
mov	eax, [esp+1CCh+e_len]
mov	[esp+1CCh+var_1B0], eax
mov	edx, [esp+1CCh+var_EC]
mov	[esp+1CCh+var_1B4], edx
mov	[esp+1CCh+var_1B8], 1Bh
mov	[esp+1CCh+var_1BC], eax
mov	[esp+1CCh+var_1C0], 5
mov	[esp+1CCh+var_1C4], 82171273h
mov	[esp+1CCh+src],	5
mov	[esp+1CCh+asn1], buf 
call	_silc_buffer_format
test	eax, eax
js	loc_641F6C24
mov	esi, [buf]
mov	eax, [buf+0Ch]
mov	[esp+1CCh+var_118], eax
mov	dword ptr [buf+0Ch], 0
mov	dword ptr [buf+8], 0
mov	dword ptr [buf+4], 0
mov	dword ptr [buf], 0
mov	[esp+1CCh+asn1], 0 
call	_silc_free
mov	[esp+1CCh+asn1], buf 
call	_silc_free
mov	edx, [esp+1CCh+ptr]
mov	[esp+1CCh+asn1], edx 
call	_silc_free
mov	ecx, [esp+1CCh+var_EC]
mov	[esp+1CCh+asn1], ecx 
call	_silc_free
mov	eax, [esp+1CCh+var_F0]
mov	[esp+1CCh+asn1], eax 
call	_silc_free
mov	edx, [esp+1CCh+var_F4]
mov	[esp+1CCh+asn1], edx 
call	_silc_free
mov	ecx, [esp+1CCh+var_F8]
mov	[esp+1CCh+asn1], ecx 
call	_silc_free
mov	eax, [esp+1CCh+var_FC]
mov	[esp+1CCh+asn1], eax 
call	_silc_free
mov	edx, [esp+1CCh+var_100]
mov	[esp+1CCh+asn1], edx 
call	_silc_free
mov	ecx, [esp+1CCh+var_104]
mov	[esp+1CCh+asn1], ecx 
call	_silc_free
mov	edi, [pkcs+0]
xor	eax, eax
mov	ecx, 0FFFFFFFFh
repne scasb
not	ecx
lea	edi, [ecx-1]
mov	[esp+1CCh+src],	10h 
mov	[esp+1CCh+asn1], 1 
call	_silc_calloc
mov	buf, eax
test	eax, eax
jz	loc_641F6C4A
mov	buf, [esp+1CCh+var_118]
sub	eax, key
mov	[esp+1CCh+var_118], eax
lea	edi, [eax+edi+2]
test	totlen,	totlen
jz	loc_641F6C65
mov	[esp+1CCh+src],	1 
mov	[esp+1CCh+asn1], totlen	
call	_silc_calloc
mov	[buf], eax
test	eax, eax
jz	loc_641F6C4A
mov	[buf+4], eax
mov	[buf+8], eax
lea	edx, [eax+totlen]
mov	[buf+0Ch], edx
mov	ecx, edx
sub	ecx, eax
cmp	totlen,	ecx
ja	short loc_641F6B33
mov	[buf+8], edx
mov	edx, [pkcs+0]
xor	eax, eax
mov	ecx, 0FFFFFFFFh
mov	totlen,	edx
repne scasb
not	ecx
dec	ecx
mov	[esp+1CCh+var_1AC], 1Dh
mov	eax, [esp+1CCh+var_118]
mov	[esp+1CCh+var_1B0], eax
mov	[esp+1CCh+var_1B4], key
mov	[esp+1CCh+var_1B8], 1Bh
mov	[esp+1CCh+var_1BC], edx
mov	[esp+1CCh+var_1C0], 0Ah
mov	[esp+1CCh+var_1C4], ecx
mov	[esp+1CCh+src],	3
mov	[esp+1CCh+asn1], buf 
call	_silc_buffer_format
test	eax, eax
js	loc_641F6C26
mov	eax, [buf]
mov	ecx, [esp+1CCh+ret_len]
test	ecx, ecx
jz	short loc_641F6BA6
mov	edx, [buf+0Ch]
sub	edx, ret
mov	ecx, [esp+1CCh+ret_len]
mov	[ecx], edx
mov	dword ptr [buf+0Ch], 0
mov	dword ptr [buf+8], 0
mov	dword ptr [buf+4], 0
mov	dword ptr [buf], 0
mov	[esp+1CCh+asn1], 0 
mov	[esp+1CCh+val],	ret
call	_silc_free
mov	[esp+1CCh+asn1], buf 
call	_silc_free
mov	edx, [esp+1CCh+var_114]
mov	[esp+1CCh+asn1], edx 
call	_silc_free
mov	[esp+1CCh+asn1], key 
call	_silc_free
mov	ecx, [esp+1CCh+var_110]
mov	[esp+1CCh+asn1], ecx 
call	_silc_asn1_free
mov	eax, [esp+1CCh+val]
add	esp, 1BCh
pop	buf
pop	key
pop	edi
pop	pkcs
retn
			
xor	eax, eax
			
add	esp, 1BCh
pop	buf
pop	key
pop	totlen
pop	pkcs
retn
align 4
xor	esi, esi
mov	edx, [esp+1CCh+var_114]
mov	[esp+1CCh+asn1], edx 
call	_silc_free
mov	[esp+1CCh+asn1], key 
call	_silc_free
mov	eax, buf	
call	_silc_buffer_free_2
xor	eax, eax
jmp	short loc_641F6C16
			
xor	len, len
			
mov	eax, [esp+1CCh+var_114]
mov	[esp+1CCh+asn1], eax 
call	_silc_free
mov	[esp+1CCh+asn1], key 
call	_silc_free
xor	eax, eax
jmp	short loc_641F6C16
mov	edx, [buf+8]
jmp	loc_641F6B30
mov	edx, [buf+8]
jmp	loc_641F6865
align 4
public _silc_pkcs_silc_export_private_key_file
push	ebp
push	edi
push	esi
push	ebx
sub	esp, 0DCh
mov	ebx, [esp+0ECh+passphrase_len]
mov	ebp, [esp+0ECh+rng]
lea	eax, [esp+0ECh+key_len]
mov	[esp+0ECh+new_cipher], eax 
mov	eax, [esp+0ECh+private_key]
mov	[esp+0ECh+name], eax 
call	_silc_pkcs_silc_export_private_key
mov	[esp+0ECh+ptr],	eax
test	eax, eax
jz	loc_641F7249
lea	esi, [esp+0ECh+tmp]
xor	eax, eax
mov	ecx, 20h
mov	edi, esi
rep stosb
lea	edx, [esp+0ECh+keymat]
mov	[esp+0ECh+var_B0], edx
mov	cl, 40h
mov	edi, edx
rep stosb
lea	eax, [esp+0ECh+aes]
mov	[esp+0ECh+new_cipher], eax 
mov	[esp+0ECh+name], offset	aAes256Cbc 
call	_silc_cipher_alloc
test	al, al
jz	loc_641F7258
mov	eax, [esp+0ECh+aes]
mov	[esp+0ECh+name], eax 
call	_silc_cipher_get_block_len
mov	edi, eax
lea	eax, [eax+eax]
cmp	eax, 20h
ja	loc_641F7284
lea	eax, [esp+0ECh+sha1]
mov	[esp+0ECh+new_cipher], eax 
mov	[esp+0ECh+name], offset	aSha1_0	
call	_silc_hash_alloc
test	al, al
jz	loc_641F72A6
lea	eax, [esp+0ECh+sha1hmac]
mov	[esp+0ECh+new_hmac], eax 
mov	[esp+0ECh+new_cipher], 0 
mov	[esp+0ECh+name], offset	aHmacSha196 
call	_silc_hmac_alloc
test	al, al
jz	loc_641F720F
mov	eax, [esp+0ECh+sha1]
mov	[esp+0ECh+name], eax 
call	_silc_hash_init
mov	[esp+0ECh+new_hmac], passphrase_len_0 
mov	edx, [esp+0ECh+passphrase]
mov	[esp+0ECh+new_cipher], edx 
mov	eax, [esp+0ECh+sha1]
mov	[esp+0ECh+name], eax 
call	_silc_hash_update
lea	ecx, [esp+0ECh+keymat]
mov	[esp+0ECh+new_cipher], ecx 
mov	eax, [esp+0ECh+sha1]
mov	[esp+0ECh+name], eax 
call	_silc_hash_final
mov	eax, [esp+0ECh+sha1]
mov	[esp+0ECh+name], eax 
call	_silc_hash_init
mov	[esp+0ECh+new_hmac], passphrase_len_0 
mov	eax, [esp+0ECh+passphrase]
mov	[esp+0ECh+new_cipher], eax 
mov	eax, [esp+0ECh+sha1]
mov	[esp+0ECh+name], eax 
call	_silc_hash_update
mov	[esp+0ECh+new_hmac], 10h 
lea	edx, [esp+0ECh+keymat]
mov	[esp+0ECh+new_cipher], edx 
mov	eax, [esp+0ECh+sha1]
mov	[esp+0ECh+name], eax 
call	_silc_hash_update
lea	eax, [esp+0ECh+keymat+10h]
mov	[esp+0ECh+new_cipher], eax 
mov	eax, [esp+0ECh+sha1]
mov	[esp+0ECh+name], eax 
call	_silc_hash_final
mov	dword ptr [esp+0ECh+encryption], 1 
mov	[esp+0ECh+new_hmac], 100h 
lea	ecx, [esp+0ECh+keymat]
mov	[esp+0ECh+new_cipher], ecx 
mov	eax, [esp+0ECh+aes]
mov	[esp+0ECh+name], eax 
call	_silc_cipher_set_key
mov	eax, [esp+0ECh+sha1hmac]
mov	[esp+0ECh+name], eax 
call	_silc_hmac_len
mov	[esp+0ECh+var_9C], eax
mov	ecx, [esp+0ECh+key_len]
mov	[esp+0ECh+new_cipher], 10h 
mov	[esp+0ECh+name], 1 
mov	[esp+0ECh+var_A0], ecx
call	_silc_calloc
mov	passphrase_len_0, eax
test	eax, eax
mov	ecx, [esp+0ECh+var_A0]
jz	loc_641F72F9
lea	enc, [ecx+4]
xor	edx, edx
div	blocklen
mov	eax, 20h
sub	eax, edx
mov	[esp+0ECh+var_94], eax
lea	blocklen, [eax+ecx+8]
add	edi, [esp+0ECh+var_9C]
jz	loc_641F7323
mov	[esp+0ECh+new_cipher], 1 
mov	[esp+0ECh+name], edi 
call	_silc_calloc
mov	[enc], eax
test	eax, eax
jz	loc_641F72F9
mov	[enc+4], eax
mov	[enc+8], eax
lea	edx, [eax+edi]
mov	[enc+0Ch], edx
mov	ecx, edx
sub	ecx, eax
cmp	edi, ecx
ja	short loc_641F6EB7
mov	[enc+8], edx
mov	edi, [esp+0ECh+var_94]
test	edi, edi
jz	short loc_641F6EE0
xor	edi, edi
mov	[esp+0ECh+var_90], enc
mov	enc, rng_0
mov	rng_0, [esp+0ECh+var_94]
nop
mov	[esp+0ECh+name], rng_0 
call	_silc_rng_get_byte_fast
mov	[esi+i], al
inc	i
cmp	padlen,	i
ja	short loc_641F6ECC
mov	rng_0, [esp+0ECh+var_90]
mov	eax, [enc+4]
mov	byte ptr [eax],	73h
mov	eax, [enc+4]
mov	byte ptr [eax+1], 8Dh
mov	eax, [enc+4]
mov	byte ptr [eax+2], 0F5h
mov	eax, [enc+4]
mov	byte ptr [eax+3], 31h
mov	eax, [enc+4]
mov	edx, [enc+8]
sub	edx, eax
cmp	edx, 3
jbe	short loc_641F6F0E
add	eax, 4
mov	[enc+4], eax
mov	eax, [esp+0ECh+key_len]
mov	[esp+0ECh+var_C8], 1Dh
mov	edx, [esp+0ECh+var_94]
mov	[esp+0ECh+var_CC], edx
mov	[esp+0ECh+var_D0], esi
mov	[esp+0ECh+var_D4], 1Bh
mov	[esp+0ECh+var_D8], eax
mov	ecx, [esp+0ECh+ptr]
mov	[esp+0ECh+iv], ecx
mov	dword ptr [esp+0ECh+encryption], 1Bh
mov	[esp+0ECh+new_hmac], eax
mov	[esp+0ECh+new_cipher], 5
mov	[esp+0ECh+name], enc 
call	_silc_buffer_format
mov	eax, [esp+0ECh+ptr]
mov	[esp+0ECh+name], eax 
call	_silc_free
mov	eax, [esp+0ECh+aes]
mov	[esp+0ECh+name], eax 
call	_silc_cipher_get_iv
mov	edx, [enc+4]
mov	[esp+0ECh+iv], eax 
mov	eax, [enc+8]
sub	eax, edx
sub	eax, [esp+0ECh+var_9C]
mov	dword ptr [esp+0ECh+encryption], eax 
mov	[esp+0ECh+new_hmac], edx 
mov	[esp+0ECh+new_cipher], edx 
mov	eax, [esp+0ECh+aes]
mov	[esp+0ECh+name], eax 
call	_silc_cipher_encrypt
mov	eax, [enc+4]
lea	edx, [eax-4]
cmp	edx, [enc]
jb	short loc_641F6FAE
mov	[enc+4], edx
mov	eax, edx
mov	edx, [enc+8]
sub	edx, eax
mov	eax, edx
sub	eax, [esp+0ECh+var_9C]
mov	[esp+0ECh+key_len], eax
mov	[esp+0ECh+new_hmac], 10h 
lea	edx, [esp+0ECh+keymat]
mov	[esp+0ECh+new_cipher], edx 
mov	eax, [esp+0ECh+sha1hmac]
mov	[esp+0ECh+name], eax 
call	_silc_hmac_init_with_key
mov	eax, [esp+0ECh+key_len]
mov	[esp+0ECh+new_hmac], eax 
mov	eax, [enc+4]
mov	[esp+0ECh+new_cipher], eax 
mov	eax, [esp+0ECh+sha1hmac]
mov	[esp+0ECh+name], eax 
call	_silc_hmac_update
mov	edx, [esp+0ECh+key_len]
mov	eax, [enc+4]
mov	ecx, [enc+8]
sub	ecx, eax
cmp	edx, ecx
ja	short loc_641F7018
add	eax, edx
mov	[enc+4], eax
mov	[esp+0ECh+new_hmac], 0 
mov	[esp+0ECh+new_cipher], eax 
mov	eax, [esp+0ECh+sha1hmac]
mov	[esp+0ECh+name], eax 
call	_silc_hmac_final
mov	eax, [enc+4]
sub	eax, [esp+0ECh+key_len]
cmp	eax, [enc]
jb	short loc_641F7044
mov	[enc+4], eax
xor	padlen,	padlen
mov	ecx, 40h
mov	i, [esp+0ECh+var_B0]
mov	eax, ebp
rep stosb
mov	cl, 20h
mov	edi, esi
rep stosb
mov	eax, [esp+0ECh+sha1hmac]
mov	[esp+0ECh+name], eax 
call	_silc_hmac_free
mov	eax, [esp+0ECh+sha1]
mov	[esp+0ECh+name], eax 
call	_silc_hash_free
mov	eax, [esp+0ECh+aes]
mov	[esp+0ECh+name], eax 
call	_silc_cipher_free
cmp	[esp+0ECh+encoding], 1
jz	loc_641F71AB
mov	esi, [enc+4]
mov	ebp, [enc+8]
sub	ebp, data
mov	[esp+0ECh+key_len], ebp
mov	[esp+0ECh+new_cipher], 10h 
mov	[esp+0ECh+name], 1 
call	_silc_calloc
mov	edi, eax
test	eax, eax
jz	loc_641F730D
add	ebp, 41h
jz	loc_641F731B
mov	[esp+0ECh+new_cipher], 1 
mov	[esp+0ECh+name], len 
call	_silc_calloc
mov	[buf], eax
test	eax, eax
jz	loc_641F730D
mov	[buf+4], eax
mov	[buf+8], eax
lea	edx, [eax+len]
mov	[buf+0Ch], edx
mov	ecx, edx
sub	ecx, eax
cmp	len, ecx
ja	short loc_641F70FB
mov	[buf+8], edx
mov	[esp+0ECh+var_CC], 1Dh
mov	[esp+0ECh+var_D0], offset aEndSilcPrivate 
mov	[esp+0ECh+var_D4], 0Ah
mov	eax, [esp+0ECh+key_len]
mov	[esp+0ECh+var_D8], eax
mov	[esp+0ECh+iv], data
mov	dword ptr [esp+0ECh+encryption], 1Bh
mov	[esp+0ECh+new_hmac], offset byte_6426CCF8
mov	[esp+0ECh+new_cipher], 0Ah
mov	[esp+0ECh+name], buf 
call	_silc_buffer_format
mov	eax, [enc]
mov	[esp+0ECh+name], eax 
call	_silc_free
mov	[esp+0ECh+name], enc 
call	_silc_free
mov	data, [buf]
mov	enc, [esp+0ECh+ret_len]
test	ebx, ebx
jz	short loc_641F716F
mov	eax, [buf+0Ch]
sub	eax, data
mov	edx, [esp+0ECh+ret_len]
mov	[edx], eax
mov	dword ptr [buf+0Ch], 0
mov	dword ptr [buf+8], 0
mov	dword ptr [buf+4], 0
mov	dword ptr [buf], 0
mov	[esp+0ECh+name], 0 
call	_silc_free
mov	[esp+0ECh+name], buf 
call	_silc_free
			
mov	eax, data
add	esp, 0DCh
pop	enc
pop	data
pop	blocklen
pop	len
retn
mov	eax, [enc+4]
mov	edx, [enc+8]
sub	edx, eax
mov	[esp+0ECh+new_cipher], edx 
mov	[esp+0ECh+name], eax 
call	_silc_base64_encode_file
mov	esi, eax
test	eax, eax
jz	loc_641F72D8
mov	data, [enc]
mov	dword ptr [enc+0Ch], 0
mov	dword ptr [enc+8], 0
mov	dword ptr [enc+4], 0
mov	dword ptr [enc], 0
mov	[esp+0ECh+name], eax 
call	_silc_free
mov	ecx, 0FFFFFFFFh
mov	edi, data
mov	eax, ebp
repne scasb
not	ecx
mov	[enc], data
mov	[enc+4], data
lea	ebp, [data+ecx-1]
mov	[enc+0Ch], ebp
mov	[enc+8], ebp
jmp	loc_641F709A
mov	[esp+0ECh+name], offset	aCouldNotAllo_0
call	_silc_format
mov	[esp+0ECh+new_cipher], eax 
mov	[esp+0ECh+name], 3 
call	_silc_log_output
mov	eax, [esp+0ECh+sha1]
mov	[esp+0ECh+name], eax 
call	_silc_hash_free
mov	eax, [esp+0ECh+aes]
mov	[esp+0ECh+name], eax 
call	_silc_cipher_free
xor	esi, esi
mov	eax, data
add	esp, 0DCh
pop	enc
pop	data
pop	blocklen
pop	rng_0
retn
mov	[esp+0ECh+name], offset	aCouldNotAlloca
call	_silc_format
mov	[esp+0ECh+new_cipher], eax 
mov	[esp+0ECh+name], 3 
call	_silc_log_output
mov	ecx, [esp+0ECh+ptr]
mov	[esp+0ECh+name], ecx 
call	_silc_free
xor	esi, esi
jmp	short loc_641F724B
mov	eax, [esp+0ECh+aes]
mov	[esp+0ECh+name], eax 
call	_silc_cipher_free
mov	eax, [esp+0ECh+ptr]
mov	[esp+0ECh+name], eax 
call	_silc_free
xor	esi, esi
jmp	loc_641F719E
mov	[esp+0ECh+name], offset	aCouldNotAllo_1	
call	_silc_format
mov	[esp+0ECh+new_cipher], eax 
mov	[esp+0ECh+name], 3 
call	_silc_log_output
mov	eax, [esp+0ECh+aes]
mov	[esp+0ECh+name], eax 
call	_silc_cipher_free
xor	esi, esi
jmp	loc_641F719E
mov	edx, [enc]
mov	ecx, [enc+0Ch]
sub	ecx, edx
mov	edi, edx
mov	data, ebp
rep stosb
mov	eax, [enc]
mov	[enc+8], eax
mov	[enc+4], eax
mov	eax, enc	
call	_silc_buffer_free_2
jmp	loc_641F719E
			
mov	eax, [esp+0ECh+sha1hmac]
mov	[esp+0ECh+name], eax 
call	_silc_hmac_free
jmp	loc_641F722B
			
mov	eax, enc
call	_silc_buffer_free_2
xor	data, data
jmp	loc_641F719E
mov	edx, [buf+8]
jmp	loc_641F70F8
mov	edx, [enc+8]
jmp	loc_641F6EB4
align 4
public _silc_pkcs_find_pkcs
push	ebx
mov	ebx, [esp+4+type]
mov	edx, ds:_silc_pkcs_list
test	edx, edx
jnz	short loc_641F7340
xor	eax, eax
			
pop	type_0
retn
align 10h
mov	eax, [edx]
mov	[edx+8], eax
and	byte ptr [edx+10h], 0FDh
mov	dword ptr [edx+18h], 0
mov	dword ptr [edx+14h], 0
xor	ecx, ecx
jmp	short loc_641F7373
align 4
movzx	entry, word ptr	[edx+0Ch]
mov	eax, [ecx+eax]
mov	[edx+8], eax
mov	[edx+14h], ecx
mov	eax, [ecx]
test	entry, entry
jz	short loc_641F733D
cmp	[entry], type_0
jz	short loc_641F733D
mov	[edx+18h], ecx
mov	ecx, [edx+8]
test	ecx, ecx
jnz	short loc_641F735C
mov	dword ptr [edx+14h], 0
xor	entry, entry
jmp	short loc_641F733D
public _silc_pkcs_get_pkcs
mov	eax, [esp+key]
mov	eax, [eax]
retn
align 10h
public _silc_pkcs_get_algorithm
sub	esp, 0Ch
mov	eax, [esp+0Ch+key]
mov	edx, [eax]
mov	eax, [eax+4]
mov	[esp+0Ch+key], eax
mov	eax, [edx+4]
add	esp, 0Ch
jmp	eax
public _silc_pkcs_get_type
			
mov	eax, [esp+key]
mov	eax, [eax]
mov	eax, [eax]
retn
align 4
public _silc_pkcs_public_key_encode
			
sub	esp, 0Ch
mov	eax, [esp+0Ch+public_key]
mov	edx, [eax]
mov	eax, [eax+4]
mov	[esp+0Ch+public_key], eax
mov	eax, [edx+14h]
add	esp, 0Ch
jmp	eax
public _silc_pkcs_public_key_get_len
			
sub	esp, 0Ch
mov	eax, [esp+0Ch+public_key]
mov	edx, [eax]
mov	eax, [eax+4]
mov	[esp+0Ch+public_key], eax
mov	eax, [edx+18h]
add	esp, 0Ch
jmp	eax
public _silc_pkcs_get_context
			
mov	eax, [esp+public_key]
mov	ecx, [eax]
mov	edx, [esp+type]
cmp	[ecx], edx
jz	short loc_641F73F8
xor	public_key_0, public_key_0
retn
align 4
mov	public_key_0, [public_key_0+4]
retn
public _silc_pkcs_private_key_get_len
			
sub	esp, 0Ch
mov	eax, [esp+0Ch+private_key]
mov	edx, [eax]
mov	eax, [eax+4]
mov	[esp+0Ch+private_key], eax
mov	eax, [edx+38h]
add	esp, 0Ch
jmp	eax
public _silc_pkcs_encrypt
sub	esp, 0Ch
mov	eax, [esp+0Ch+public_key]
mov	edx, [eax]
mov	eax, [eax+4]
mov	[esp+0Ch+public_key], eax
mov	eax, [edx+40h]
add	esp, 0Ch
jmp	eax
public _silc_pkcs_decrypt
sub	esp, 0Ch
mov	eax, [esp+0Ch+private_key]
mov	edx, [eax]
mov	eax, [eax+4]
mov	[esp+0Ch+private_key], eax
mov	eax, [edx+44h]
add	esp, 0Ch
jmp	eax
public _silc_pkcs_sign
			
sub	esp, 0Ch
mov	eax, [esp+0Ch+private_key]
mov	edx, [eax]
movzx	ecx, byte ptr [esp+0Ch+compute_hash]
mov	[esp+0Ch+compute_hash],	compute_hash_0
mov	eax, [eax+4]
mov	[esp+0Ch+private_key], eax
mov	eax, [edx+48h]
add	esp, 0Ch
jmp	eax
align 4
public _silc_pkcs_verify
			
sub	esp, 0Ch
mov	eax, [esp+0Ch+public_key]
mov	edx, [eax]
mov	eax, [eax+4]
mov	[esp+0Ch+public_key], eax
mov	eax, [edx+4Ch]
add	esp, 0Ch
jmp	eax
public _silc_pkcs_public_key_compare
push	esi
push	ebx
sub	esp, 4
mov	edx, [esp+0Ch+key1]
mov	ecx, [esp+0Ch+key2]
mov	eax, [edx]
mov	ebx, [ecx]
mov	esi, [eax]
cmp	esi, [ebx]
jz	short loc_641F74A0
xor	eax, eax
pop	key2_0
pop	ebx
pop	esi
retn
align 10h
mov	key2_0,	[key2_0+4]
mov	[esp+0Ch+key2],	ecx
mov	key1_0,	[key1_0+4]
mov	[esp+0Ch+key1],	edx
mov	eax, [eax+20h]
pop	edx
pop	ebx
pop	esi
jmp	eax
align 4
public _silc_pkcs_save_private_key
			
push	ebx
sub	esp, 38h
mov	eax, [esp+3Ch+private_key]
mov	edx, [eax]
lea	ecx, [esp+3Ch+data_len]
mov	[esp+3Ch+var_28], ecx
mov	ecx, [esp+3Ch+rng]
mov	[esp+3Ch+var_2C], ecx
mov	ecx, [esp+3Ch+encoding]
mov	[esp+3Ch+var_30], ecx
mov	ecx, [esp+3Ch+passphrase_len]
mov	[esp+3Ch+len], ecx
mov	ecx, [esp+3Ch+passphrase]
mov	[esp+3Ch+buffer], ecx
mov	eax, [eax+4]
mov	[esp+3Ch+var_3C], eax
call	dword ptr [edx+30h]
mov	ebx, eax
test	eax, eax
jz	short loc_641F752C
mov	data, [esp+3Ch+data_len]
mov	[esp+3Ch+len], eax 
mov	[esp+3Ch+buffer], data 
mov	eax, [esp+3Ch+filename]
mov	[esp+3Ch+var_3C], eax 
call	_silc_file_writefile
test	eax, eax
jnz	short loc_641F7524
mov	[esp+3Ch+var_3C], data 
call	_silc_free
mov	al, 1
add	esp, 38h
pop	data
retn
mov	[esp+3Ch+var_3C], data
call	_silc_free
xor	eax, eax
add	esp, 38h
pop	data
retn
align 4
public _silc_pkcs_save_public_key
push	ebx
sub	esp, 28h
mov	eax, [esp+2Ch+public_key]
mov	edx, [eax]
lea	ecx, [esp+2Ch+data_len]
mov	[esp+2Ch+len], ecx
mov	ecx, [esp+2Ch+encoding]
mov	[esp+2Ch+buffer], ecx
mov	eax, [eax+4]
mov	[esp+2Ch+var_2C], eax
call	dword ptr [edx+10h]
mov	ebx, eax
test	eax, eax
jz	short loc_641F7590
mov	data, [esp+2Ch+data_len]
mov	[esp+2Ch+len], eax 
mov	[esp+2Ch+buffer], data 
mov	eax, [esp+2Ch+filename]
mov	[esp+2Ch+var_2C], eax 
call	_silc_file_writefile
test	eax, eax
jnz	short loc_641F7588
mov	[esp+2Ch+var_2C], data 
call	_silc_free
mov	al, 1
add	esp, 28h
pop	data
retn
mov	[esp+2Ch+var_2C], data
call	_silc_free
xor	eax, eax
add	esp, 28h
pop	data
retn
align 4
public _silc_pkcs_private_key_free
			
push	ebx
sub	esp, 18h
mov	ebx, [esp+1Ch+private_key]
mov	eax, [ebx]
mov	edx, [ebx+4]
mov	[esp+1Ch+var_1C], edx
call	dword ptr [eax+3Ch]
mov	[esp+1Ch+private_key], ebx
add	esp, 18h
pop	ebx
jmp	_silc_free
public _silc_pkcs_public_key_free
			
push	ebx
sub	esp, 18h
mov	ebx, [esp+1Ch+public_key]
mov	eax, [ebx]
mov	edx, [ebx+4]
mov	[esp+1Ch+var_1C], edx
call	dword ptr [eax+24h]
mov	[esp+1Ch+public_key], ebx
add	esp, 18h
pop	ebx
jmp	_silc_free
public _silc_pkcs_unregister
push	ebp
push	edi
push	esi
push	ebx
sub	esp, 3Ch
mov	edi, [esp+4Ch+pkcs]
mov	eax, ds:_silc_pkcs_list
test	eax, eax
jz	loc_641F784A
mov	ecx, [eax]
mov	[eax+8], ecx
mov	bl, [eax+10h]
and	ebx, 0FFFFFFFDh
mov	[eax+10h], bl
mov	dword ptr [eax+18h], 0
mov	dword ptr [eax+14h], 0
cmp	pkcs_0,	1
jz	short loc_641F764E
xor	edx, edx
jmp	short loc_641F7633
align 4
movzx	entry, word ptr	[eax+0Ch]
mov	esi, [edx+esi]
mov	[eax+8], esi
mov	[eax+14h], edx
mov	esi, [edx]
test	entry, entry
jz	loc_641F784A
cmp	entry, pkcs_0
jz	short loc_641F7670
mov	[eax+18h], edx
mov	edx, [eax+8]
test	edx, edx
jnz	short loc_641F7618
mov	dword ptr [eax+14h], 0
xor	eax, eax
add	esp, 3Ch
pop	ebx
pop	entry
pop	pkcs_0
pop	ebp
retn
mov	dword ptr [eax+18h], 0
test	ecx, ecx
jz	short loc_641F763D
movzx	edx, word ptr [eax+0Ch]
mov	edx, [ecx+edx]
mov	[eax+8], edx
mov	[eax+14h], ecx
mov	esi, [ecx]
test	entry, entry
jz	loc_641F784A
mov	edx, ecx
mov	[eax+8], ecx
and	ebx, 0FFFFFFFDh
mov	[eax+10h], bl
test	edx, edx
jz	short loc_641F7693
movzx	ebx, word ptr [eax+0Ch]
mov	ebx, [edx+ebx]
mov	[eax+8], ebx
cmp	entry, [edx]
jz	short loc_641F76B8
mov	edx, ebx
test	edx, edx
jnz	short loc_641F767F
			
mov	[esp+4Ch+ptr], entry 
call	_silc_free
mov	pkcs_0,	ds:_silc_pkcs_list
mov	eax, [edi+10h]
shr	eax, 2
jz	loc_641F7730
mov	al, 1
add	esp, 3Ch
pop	ebx
pop	entry
pop	edi
pop	ebp
retn
align 4
test	ecx, ecx
jz	short loc_641F76DB
cmp	edx, ecx
jz	loc_641F7839
movzx	ebp, word ptr [eax+0Ch]
jmp	short loc_641F76D2
align 4
cmp	edx, edi
jz	short loc_641F7700
mov	ecx, edi
lea	ebx, [ecx+ebp]
mov	edi, [ebx]
test	edi, edi
jnz	short loc_641F76CC
cmp	edx, [eax+4]
jz	loc_641F77C7
			
cmp	edx, [eax+14h]
jz	loc_641F77CF
cmp	edx, [eax+18h]
jz	loc_641F77A4
mov	[esp+4Ch+ptr], edx 
call	_silc_free
jmp	short loc_641F7693
mov	[esp+4Ch+var_30], ebx
mov	edi, [edx+ebp]
mov	[ebx], edi
test	edi, edi
jz	short loc_641F7717
test	byte ptr [eax+10h], 1
jnz	loc_641F77B8
			
cmp	edx, [eax+8]
jz	loc_641F782B
sub	dword ptr [eax+10h], 4
cmp	edx, [eax+4]
jnz	short loc_641F76E4
jmp	loc_641F77C7
align 10h
mov	ebx, [edi]
mov	[edi+8], ebx
and	byte ptr [edi+10h], 0FDh
test	ebx, ebx
jz	short loc_641F778B
lea	entry, [entry+0]
test	byte ptr [edi+10h], 2
jz	loc_641F7818
movzx	eax, word ptr [edi+0Eh]
mov	eax, [ebx+eax]
mov	[edi+8], eax
mov	edx, [edi]
test	edx, edx
jz	short loc_641F7773
cmp	ebx, edx
jz	short loc_641F77DB
movzx	entry, word ptr	[edi+0Ch]
jmp	short loc_641F776A
cmp	ebx, eax
jz	short loc_641F77E4
mov	edx, eax
lea	ecx, [edx+esi]
mov	eax, [ecx]
test	eax, eax
jnz	short loc_641F7764
cmp	ebx, [edi+4]
jz	loc_641F780F
			
mov	[esp+4Ch+ptr], ebx 
call	_silc_free
mov	ebx, [edi+8]
test	ebx, ebx
jnz	short loc_641F7740
mov	[esp+4Ch+ptr], edi 
call	_silc_free
mov	ds:_silc_pkcs_list, 0
mov	al, 1
jmp	loc_641F76AF
mov	dword ptr [eax+18h], 0
mov	[esp+4Ch+ptr], edx 
call	_silc_free
jmp	loc_641F7693
movzx	ebp, word ptr [eax+0Eh]
mov	ebx, [edx+ebp]
mov	[edi+ebp], ebx
jmp	loc_641F7717
			
mov	[eax+4], ecx
jmp	loc_641F76E4
mov	dword ptr [eax+14h], 0
jmp	loc_641F76ED
movzx	entry, word ptr	[edi+0Ch]
mov	ecx, edi
xor	edx, edx
nop
mov	eax, [ebx+esi]
mov	[ecx], eax
test	eax, eax
jz	short loc_641F77FD
test	byte ptr [edi+10h], 1
jz	short loc_641F77FD
movzx	esi, word ptr [edi+0Eh]
mov	ebp, [ebx+esi]
mov	[eax+esi], ebp
			
cmp	ebx, [edi+8]
jz	short loc_641F7824
sub	dword ptr [edi+10h], 4
cmp	ebx, [edi+4]
jnz	loc_641F777C
mov	[edi+4], edx
jmp	loc_641F777C
align 4
movzx	eax, word ptr [edi+0Ch]
mov	eax, [ebx+eax]
jmp	loc_641F7751
mov	eax, [ecx]
mov	[edi+8], eax
jmp	short loc_641F7802
mov	edi, [esp+4Ch+var_30]
mov	ebx, [edi]
mov	[eax+8], ebx
jmp	loc_641F7720
mov	[esp+4Ch+var_30], eax
movzx	ebp, word ptr [eax+0Ch]
xor	ecx, ecx
mov	ebx, eax
jmp	loc_641F7704
			
xor	eax, eax
jmp	loc_641F7646
align 4
public _silc_pkcs_public_key_copy
push	esi
push	ebx
sub	esp, 14h
mov	esi, [esp+1Ch+public_key]
mov	[esp+1Ch+size],	8 
mov	[esp+1Ch+items], 1 
call	_silc_calloc
mov	ebx, eax
test	eax, eax
jz	short loc_641F788D
mov	key, [public_key_0]
mov	[key], eax
mov	eax, [public_key_0]
mov	edx, [public_key_0+4]
mov	[esp+1Ch+items], edx
call	dword ptr [eax+1Ch]
mov	[key+4], eax
test	eax, eax
jz	short loc_641F7895
			
mov	eax, key
add	esp, 14h
pop	key
pop	public_key_0
retn
mov	[esp+1Ch+items], key
call	_silc_free
xor	key, key
jmp	short loc_641F788D
align 4
public _silc_pkcs_find_algorithm
			
push	ebp
push	edi
push	esi
push	ebx
sub	esp, 1Ch
mov	ebp, [esp+2Ch+algorithm]
mov	ebx, ds:_silc_pkcs_alg_list
test	ebx, ebx
jnz	short loc_641F78C8
xor	entry, entry
			
mov	eax, entry
add	esp, 1Ch
pop	ebx
pop	esi
pop	entry
pop	algorithm_0
retn
align 4
mov	eax, [ebx]
mov	[ebx+8], eax
and	byte ptr [ebx+10h], 0FDh
mov	dword ptr [ebx+18h], 0
mov	dword ptr [ebx+14h], 0
mov	esi, [esp+2Ch+scheme]
test	esi, esi
jz	short loc_641F795C
xor	esi, esi
jmp	short loc_641F7911
align 4
movzx	eax, word ptr [ebx+0Ch]
mov	eax, [esi+eax]
mov	[ebx+8], eax
mov	[ebx+14h], esi
mov	entry, [esi]
test	entry, entry
jz	short loc_641F78BB
mov	eax, [entry]
mov	[esp+2Ch+var_28], algorithm_0 
mov	[esp+2Ch+var_2C], eax 
call	_strcmp
test	eax, eax
jz	short loc_641F7938
			
mov	[ebx+18h], esi
mov	esi, [ebx+8]
test	esi, esi
jz	short loc_641F792C
test	byte ptr [ebx+10h], 2
jz	short loc_641F78EC
movzx	eax, word ptr [ebx+0Eh]
mov	eax, [esi+eax]
jmp	short loc_641F78F3
align 4
			
mov	dword ptr [ebx+14h], 0
jmp	short loc_641F78B9
align 4
mov	eax, [entry+4]
test	eax, eax
jz	loc_641F78BB
mov	edx, [esp+2Ch+scheme]
mov	[esp+2Ch+var_28], edx 
mov	[esp+2Ch+var_2C], eax 
call	_strcmp
test	eax, eax
jnz	short loc_641F7911
jmp	loc_641F78BB
xor	esi, esi
jmp	short loc_641F798D
movzx	eax, word ptr [ebx+0Eh]
mov	eax, [esi+eax]
mov	[ebx+8], eax
mov	[ebx+14h], esi
mov	entry, [esi]
test	entry, entry
jz	loc_641F78BB
mov	eax, [entry]
mov	[esp+2Ch+var_28], algorithm_0 
mov	[esp+2Ch+var_2C], eax 
call	_strcmp
test	eax, eax
jz	loc_641F78BB
mov	[ebx+18h], esi
mov	esi, [ebx+8]
test	esi, esi
jz	short loc_641F792C
test	byte ptr [ebx+10h], 2
jnz	short loc_641F7960
movzx	eax, word ptr [ebx+0Ch]
mov	eax, [esi+eax]
jmp	short loc_641F7967
align 4
public _silc_pkcs_get_supported
			
push	ebp
push	edi
push	esi
push	ebx
sub	esp, 2Ch
mov	eax, ds:_silc_pkcs_alg_list
test	eax, eax
jz	loc_641F7A84
mov	edx, [eax]
mov	[eax+8], edx
and	byte ptr [eax+10h], 0FDh
mov	dword ptr [eax+18h], 0
mov	dword ptr [eax+14h], 0
xor	ecx, ecx
xor	ebp, ebp
xor	edx, edx
mov	[esp+3Ch+var_20], len
jmp	short loc_641F7A4C
align 10h
movzx	entry, word ptr	[eax+0Eh]
mov	ebx, [ecx+ebx]
mov	[eax+8], ebx
mov	[eax+14h], ecx
mov	ebx, [ecx]
test	entry, entry
jz	loc_641F7A8D
mov	edi, [entry]
mov	ecx, 0FFFFFFFFh
xor	eax, eax
repne scasb
not	ecx
mov	eax, [esp+3Ch+var_20]
lea	len, [eax+ecx-1]
lea	eax, [ebp+1]
mov	[esp+3Ch+var_20], eax
mov	[esp+3Ch+size],	eax 
mov	[esp+3Ch+ptr], list 
call	_silc_realloc
mov	edx, eax
test	eax, eax
jz	short loc_641F7A7A
mov	esi, [entry]
mov	ecx, 0FFFFFFFFh
mov	edi, esi
xor	list, list
repne scasb
not	ecx
dec	ecx
mov	eax, ebp
sub	eax, ecx
lea	eax, [list+eax]
mov	edi, eax
rep movsb
mov	byte ptr [list+ebp], 2Ch
mov	eax, ds:_silc_pkcs_alg_list
mov	ecx, [eax+14h]
mov	[eax+18h], ecx
mov	ecx, [eax+8]
test	ecx, ecx
jz	short loc_641F7A68
test	byte ptr [eax+10h], 2
jnz	short loc_641F79E0
movzx	entry, word ptr	[eax+0Ch]
mov	ebx, [ecx+ebx]
jmp	short loc_641F79E7
align 4
mov	len, [esp+3Ch+var_20]
mov	dword ptr [eax+14h], 0
lea	eax, [list+len-1]
			
mov	byte ptr [eax],	0
mov	eax, list
add	esp, 2Ch
pop	entry
pop	esi
pop	edi
pop	len
retn
mov	eax, 0FFFFFFFFh
xor	edx, edx
jmp	short loc_641F7A77
mov	len, [esp+3Ch+var_20]
lea	eax, [list+len-1]
jmp	short loc_641F7A77
align 4
			
sub	esp, 1Ch
mov	[esp+1Ch+size],	1Ch 
call	_silc_malloc
test	eax, eax
jz	short loc_641F7AE6
mov	dword ptr [list+18h], 0
mov	dword ptr [list+14h], 0
mov	edx, [list+10h]
and	edx, 3
mov	[list+10h], edx
mov	word ptr [list+0Ch], 4
mov	word ptr [list+0Eh], 8
mov	byte ptr [list+10h], 1
mov	dword ptr [list+8], 0
mov	dword ptr [list+4], 0
mov	dword ptr [list], 0
add	esp, 1Ch
retn
align 4
public _silc_pkcs_get_name
sub	esp, 1Ch
mov	pkcs, [esp+1Ch+key]
mov	edx, [pkcs]
mov	pkcs, [pkcs+4]
mov	[esp+1Ch+var_1C], pkcs
call	dword ptr [edx+4]
mov	pkcs, [pkcs]
add	esp, 1Ch
retn
public _silc_pkcs_load_private_key
			
push	ebp
push	edi
push	esi
push	ebx
sub	esp, 4Ch
mov	edi, [esp+5Ch+ret_private_key]
test	edi, edi
jz	loc_641F7C50
lea	eax, [esp+5Ch+data_len]
mov	[esp+5Ch+return_len], eax 
mov	eax, [esp+5Ch+filename]
mov	[esp+5Ch+items], eax 
call	_silc_file_readfile
mov	ebp, eax
test	eax, eax
jz	loc_641F7C50
mov	[esp+5Ch+return_len], 8	
mov	[esp+5Ch+items], 1 
call	_silc_calloc
mov	edi, eax
mov	eax, [esp+5Ch+ret_private_key]
mov	[eax], private_key
test	private_key, private_key
jz	loc_641F7C80
lea	edx, [private_key+4]
mov	[esp+5Ch+var_30], edx
xor	esi, esi
mov	ebx, 1
jmp	short loc_641F7B7D
align 4
			
mov	dword ptr [private_key], 0
inc	type
inc	esi
cmp	esi, 5
jz	loc_641F7C5C
mov	eax, ds:_silc_pkcs_list
test	eax, eax
jz	short loc_641F7B6C
mov	edx, [eax]
mov	[eax+8], edx
and	byte ptr [eax+10h], 0FDh
mov	dword ptr [eax+18h], 0
mov	dword ptr [eax+14h], 0
xor	edx, edx
jmp	short loc_641F7BBB
align 4
movzx	ecx, word ptr [eax+0Ch]
mov	ecx, [edx+ecx]
mov	[eax+8], ecx
mov	[eax+14h], edx
mov	ecx, [edx]
test	ecx, ecx
jz	short loc_641F7B6C
cmp	type, [ecx]
jz	short loc_641F7BD0
mov	[eax+18h], edx
mov	edx, [eax+8]
test	edx, edx
jnz	short loc_641F7BA4
mov	dword ptr [eax+14h], 0
jmp	short loc_641F7B6C
align 10h
mov	[private_key], ecx
mov	edx, [esp+5Ch+var_30]
mov	[esp+5Ch+var_48], edx
mov	[esp+5Ch+var_4C], 0
mov	eax, [esp+5Ch+passphrase_len]
mov	[esp+5Ch+var_50], eax
mov	edx, [esp+5Ch+passphrase]
mov	[esp+5Ch+var_54], edx
mov	eax, [esp+5Ch+data_len]
mov	[esp+5Ch+return_len], eax
mov	[esp+5Ch+items], data
call	dword ptr [ecx+28h]
test	al, al
jnz	short loc_641F7C3C
mov	eax, [private_key]
mov	edx, [esp+5Ch+var_30]
mov	[esp+5Ch+var_48], edx
mov	[esp+5Ch+var_4C], 1
mov	edx, [esp+5Ch+passphrase_len]
mov	[esp+5Ch+var_50], edx
mov	edx, [esp+5Ch+passphrase]
mov	[esp+5Ch+var_54], edx
mov	edx, [esp+5Ch+data_len]
mov	[esp+5Ch+return_len], edx
mov	[esp+5Ch+items], data
call	dword ptr [eax+28h]
test	al, al
jz	loc_641F7B72
mov	[esp+5Ch+items], data 
call	_silc_free
mov	al, 1
add	esp, 4Ch
pop	type
pop	esi
pop	private_key
pop	data
retn
align 10h
			
xor	data, data
add	esp, 4Ch
pop	ebx
pop	esi
pop	edi
pop	data
retn
align 4
mov	[esp+5Ch+items], data 
call	_silc_free
mov	[esp+5Ch+items], private_key 
call	_silc_free
mov	eax, [esp+5Ch+ret_private_key]
mov	dword ptr [eax], 0
xor	eax, eax
add	esp, 4Ch
pop	type
pop	esi
pop	private_key
pop	data
retn
mov	[esp+5Ch+items], data
call	_silc_free
xor	eax, eax
jmp	short loc_641F7C46
public _silc_pkcs_load_public_key
			
push	ebp
push	edi
push	esi
push	ebx
sub	esp, 3Ch
mov	ebp, [esp+4Ch+ret_public_key]
test	ebp, ebp
jz	loc_641F7DB8
lea	eax, [esp+4Ch+data_len]
mov	[esp+4Ch+return_len], eax 
mov	eax, [esp+4Ch+filename]
mov	[esp+4Ch+items], eax 
call	_silc_file_readfile
mov	ebp, eax
test	eax, eax
jz	loc_641F7DB8
mov	[esp+4Ch+return_len], 8	
mov	[esp+4Ch+items], 1 
call	_silc_calloc
mov	edi, eax
mov	eax, [esp+4Ch+ret_public_key]
mov	[eax], public_key
test	public_key, public_key
jz	loc_641F7DE8
lea	edx, [public_key+4]
mov	[esp+4Ch+var_30], edx
xor	esi, esi
mov	ebx, 1
jmp	short loc_641F7D05
align 4
			
mov	dword ptr [public_key],	0
inc	type
inc	esi
cmp	esi, 5
jz	loc_641F7DC4
mov	eax, ds:_silc_pkcs_list
test	eax, eax
jz	short loc_641F7CF4
mov	edx, [eax]
mov	[eax+8], edx
and	byte ptr [eax+10h], 0FDh
mov	dword ptr [eax+18h], 0
mov	dword ptr [eax+14h], 0
xor	edx, edx
jmp	short loc_641F7D43
align 4
movzx	ecx, word ptr [eax+0Ch]
mov	ecx, [edx+ecx]
mov	[eax+8], ecx
mov	[eax+14h], edx
mov	ecx, [edx]
test	ecx, ecx
jz	short loc_641F7CF4
cmp	type, [ecx]
jz	short loc_641F7D58
mov	[eax+18h], edx
mov	edx, [eax+8]
test	edx, edx
jnz	short loc_641F7D2C
mov	dword ptr [eax+14h], 0
jmp	short loc_641F7CF4
align 4
mov	[public_key], ecx
mov	edx, [esp+4Ch+var_30]
mov	[esp+4Ch+var_40], edx
mov	[esp+4Ch+var_44], 1
mov	eax, [esp+4Ch+data_len]
mov	[esp+4Ch+return_len], eax
mov	[esp+4Ch+items], data
call	dword ptr [ecx+8]
test	al, al
jnz	short loc_641F7DA4
mov	eax, [public_key]
mov	edx, [esp+4Ch+var_30]
mov	[esp+4Ch+var_40], edx
mov	[esp+4Ch+var_44], 0
mov	edx, [esp+4Ch+data_len]
mov	[esp+4Ch+return_len], edx
mov	[esp+4Ch+items], data
call	dword ptr [eax+8]
test	al, al
jz	loc_641F7CFA
mov	[esp+4Ch+items], data 
call	_silc_free
mov	al, 1
add	esp, 3Ch
pop	type
pop	esi
pop	public_key
pop	data
retn
align 4
			
xor	data, data
add	esp, 3Ch
pop	ebx
pop	esi
pop	edi
pop	data
retn
align 4
mov	[esp+4Ch+items], data 
call	_silc_free
mov	[esp+4Ch+items], public_key 
call	_silc_free
mov	eax, [esp+4Ch+ret_public_key]
mov	dword ptr [eax], 0
xor	eax, eax
add	esp, 3Ch
pop	type
pop	esi
pop	public_key
pop	data
retn
mov	[esp+4Ch+items], data
call	_silc_free
xor	eax, eax
jmp	short loc_641F7DAE
public _silc_pkcs_private_key_alloc
push	edi
push	esi
push	ebx
sub	esp, 10h
mov	edi, [esp+1Ch+type]
mov	esi, [esp+1Ch+ret_private_key]
test	esi, esi
jz	loc_641F7ED0
mov	[esp+1Ch+size],	8 
mov	[esp+1Ch+items], 1 
call	_silc_calloc
mov	ebx, eax
test	eax, eax
jz	loc_641F7ED0
mov	private_key, ds:_silc_pkcs_list
test	eax, eax
jnz	short loc_641F7E48
			
mov	dword ptr [private_key], 0
mov	[esp+1Ch+items], private_key 
call	_silc_free
xor	eax, eax
add	esp, 10h
pop	private_key
pop	ret_private_key_0
pop	type_0
retn
mov	edx, [eax]
mov	[eax+8], edx
and	byte ptr [eax+10h], 0FDh
mov	dword ptr [eax+18h], 0
mov	dword ptr [eax+14h], 0
xor	edx, edx
jmp	short loc_641F7E7B
align 4
movzx	pkcs, word ptr [eax+0Ch]
mov	ecx, [edx+ecx]
mov	[eax+8], ecx
mov	[eax+14h], edx
mov	ecx, [edx]
test	pkcs, pkcs
jz	short loc_641F7E31
cmp	type_0,	[pkcs]
jz	short loc_641F7E90
mov	[eax+18h], edx
mov	edx, [eax+8]
test	edx, edx
jnz	short loc_641F7E64
mov	dword ptr [eax+14h], 0
jmp	short loc_641F7E31
align 10h
mov	[private_key], pkcs
lea	eax, [private_key+4]
mov	[esp+1Ch+var_14], eax
mov	eax, [esp+1Ch+key_len]
mov	[esp+1Ch+size],	eax
mov	eax, [esp+1Ch+key]
mov	[esp+1Ch+items], eax
call	dword ptr [pkcs+2Ch]
test	eax, eax
jz	short loc_641F7EBC
mov	[ret_private_key_0], private_key
mov	al, 1
add	esp, 10h
pop	private_key
pop	ret_private_key_0
pop	type_0
retn
align 4
mov	[esp+1Ch+items], private_key 
call	_silc_free
xor	eax, eax
add	esp, 10h
pop	private_key
pop	ret_private_key_0
pop	type_0
retn
align 10h
			
xor	private_key, private_key
jmp	loc_641F7E41
align 4
public _silc_pkcs_public_key_alloc
			
push	edi
push	esi
push	ebx
sub	esp, 10h
mov	edi, [esp+1Ch+type]
mov	esi, [esp+1Ch+ret_public_key]
test	esi, esi
jz	loc_641F7FB4
mov	[esp+1Ch+size],	8 
mov	[esp+1Ch+items], 1 
call	_silc_calloc
mov	ebx, eax
test	eax, eax
jz	loc_641F7FB4
mov	public_key, ds:_silc_pkcs_list
test	eax, eax
jnz	short loc_641F7F2C
			
mov	dword ptr [public_key],	0
mov	[esp+1Ch+items], public_key 
call	_silc_free
xor	eax, eax
add	esp, 10h
pop	public_key
pop	ret_public_key_0
pop	type_0
retn
mov	edx, [eax]
mov	[eax+8], edx
and	byte ptr [eax+10h], 0FDh
mov	dword ptr [eax+18h], 0
mov	dword ptr [eax+14h], 0
xor	edx, edx
jmp	short loc_641F7F5F
align 4
movzx	pkcs, word ptr [eax+0Ch]
mov	ecx, [edx+ecx]
mov	[eax+8], ecx
mov	[eax+14h], edx
mov	ecx, [edx]
test	pkcs, pkcs
jz	short loc_641F7F15
cmp	type_0,	[pkcs]
jz	short loc_641F7F74
mov	[eax+18h], edx
mov	edx, [eax+8]
test	edx, edx
jnz	short loc_641F7F48
mov	dword ptr [eax+14h], 0
jmp	short loc_641F7F15
align 4
mov	[public_key], pkcs
lea	eax, [public_key+4]
mov	[esp+1Ch+var_14], eax
mov	eax, [esp+1Ch+key_len]
mov	[esp+1Ch+size],	eax
mov	eax, [esp+1Ch+key]
mov	[esp+1Ch+items], eax
call	dword ptr [pkcs+0Ch]
test	eax, eax
jz	short loc_641F7FA0
mov	[ret_public_key_0], public_key
mov	al, 1
add	esp, 10h
pop	public_key
pop	ret_public_key_0
pop	type_0
retn
align 10h
mov	[esp+1Ch+items], public_key 
call	_silc_free
xor	eax, eax
add	esp, 10h
pop	public_key
pop	ret_public_key_0
pop	type_0
retn
align 4
			
xor	public_key, public_key
jmp	loc_641F7F25
align 4
public _silc_pkcs_algorithm_register
push	ebp
push	edi
push	esi
push	ebx
sub	esp, 1Ch
mov	ebx, [esp+2Ch+pkcs]
mov	esi, ds:_silc_pkcs_alg_list
test	esi, esi
jz	short loc_641F803B
mov	eax, [esi]
mov	[esi+8], eax
and	byte ptr [esi+10h], 0FDh
mov	dword ptr [esi+18h], 0
mov	dword ptr [esi+14h], 0
xor	edi, edi
jmp	short loc_641F8018
movzx	eax, word ptr [esi+0Eh]
mov	eax, [edi+eax]
mov	[esi+8], eax
mov	[esi+14h], edi
mov	entry, [edi]
test	entry, entry
jz	short loc_641F803B
mov	eax, [entry+0]
mov	edx, [pkcs_0]
mov	[esp+2Ch+size],	edx 
mov	[esp+2Ch+items], eax 
call	_strcmp
test	eax, eax
jz	loc_641F8104
			
mov	[esi+18h], edi
mov	edi, [esi+8]
test	edi, edi
jz	short loc_641F8034
test	byte ptr [esi+10h], 2
jnz	short loc_641F7FEC
movzx	eax, word ptr [esi+0Ch]
mov	eax, [edi+eax]
jmp	short loc_641F7FF3
align 4
mov	dword ptr [esi+14h], 0
			
mov	[esp+2Ch+size],	48h 
mov	[esp+2Ch+items], 1 
call	_silc_calloc
mov	entry, eax
test	eax, eax
jz	loc_641F8130
mov	ecx, 12h
mov	edi, newalg
mov	esi, pkcs_0
rep movsd
mov	eax, [ebx]
mov	[esp+2Ch+items], eax 
call	_strdup
mov	[ebp+0], eax
test	eax, eax
jz	loc_641F8130
mov	eax, [pkcs_0+4]
test	eax, eax
jz	short loc_641F8093
mov	[esp+2Ch+items], eax 
call	_strdup
mov	[newalg+4], eax
test	eax, eax
jz	loc_641F8130
mov	eax, [pkcs_0+8]
mov	[esp+2Ch+items], eax 
call	_strdup
mov	[newalg+8], eax
test	eax, eax
jz	loc_641F8130
mov	pkcs_0,	ds:_silc_pkcs_alg_list
test	ebx, ebx
jz	loc_641F8142
mov	[esp+2Ch+items], 0Ch 
call	_silc_malloc
test	eax, eax
jz	short loc_641F80F7
mov	[eax], newalg
mov	edx, [ebx]
test	edx, edx
jz	short loc_641F813A
movzx	edx, word ptr [ebx+0Ch]
mov	ecx, [ebx+4]
mov	[ecx+edx], eax
test	byte ptr [ebx+10h], 1
jz	short loc_641F80E9
movzx	ecx, word ptr [ebx+0Eh]
mov	pkcs_0,	[ebx+4]
mov	[eax+ecx], esi
mov	[ebx+4], eax
mov	dword ptr [eax+edx], 0
add	dword ptr [ebx+10h], 4
mov	al, 1
add	esp, 1Ch
pop	ebx
pop	pkcs_0
pop	edi
pop	newalg
retn
align 4
mov	eax, [entry+4]
test	eax, eax
jz	loc_641F8018
mov	edx, [pkcs_0+4]
test	edx, edx
jz	loc_641F8018
mov	[esp+2Ch+size],	edx 
mov	[esp+2Ch+items], eax 
call	_strcmp
test	eax, eax
jnz	loc_641F8018
xchg	ax, ax
			
xor	eax, eax
add	esp, 1Ch
pop	pkcs_0
pop	pkcs_0
pop	edi
pop	entry
retn
mov	[ebx], eax
movzx	edx, word ptr [ebx+0Ch]
jmp	short loc_641F80D9
call	_silc_dlist_init_0
mov	ebx, eax
mov	ds:_silc_pkcs_alg_list,	eax
jmp	loc_641F80B7
align 4
public _silc_pkcs_register_default
push	ebp
push	edi
push	esi
push	ebx
sub	esp, 1Ch
mov	ebx, offset _silc_default_pkcs
mov	eax, ds:_silc_pkcs_list
test	eax, eax
jz	short loc_641F81B2
mov	edx, [eax]
mov	[eax+8], edx
and	byte ptr [eax+10h], 0FDh
mov	dword ptr [eax+18h], 0
mov	dword ptr [eax+14h], 0
xor	edx, edx
jmp	short loc_641F81A1
movzx	ecx, word ptr [eax+0Ch]
mov	ecx, [edx+ecx]
mov	[eax+8], ecx
mov	[eax+14h], edx
mov	ecx, [edx]
test	ecx, ecx
jz	short loc_641F81B2
mov	ecx, [ecx]
cmp	ecx, [ebx]
jz	loc_641F8225
mov	[eax+18h], edx
mov	edx, [eax+8]
test	edx, edx
jnz	short loc_641F8184
mov	dword ptr [eax+14h], 0
			
mov	[esp+2Ch+size],	50h 
mov	[esp+2Ch+items], 1 
call	_silc_calloc
mov	ebp, eax
test	eax, eax
jz	short loc_641F8225
mov	edi, eax
mov	esi, ebx
mov	ecx, 14h
rep movsd
mov	esi, ds:_silc_pkcs_list
test	esi, esi
jz	loc_641F8268
mov	[esp+2Ch+items], 0Ch 
call	_silc_malloc
test	eax, eax
jz	short loc_641F8225
mov	[eax], ebp
mov	edi, [esi]
test	edi, edi
jz	short loc_641F8260
movzx	edx, word ptr [esi+0Ch]
mov	ecx, [esi+4]
mov	[ecx+edx], eax
test	byte ptr [esi+10h], 1
jz	short loc_641F8217
movzx	ecx, word ptr [esi+0Eh]
mov	edi, [esi+4]
mov	[eax+ecx], edi
mov	[esi+4], eax
mov	dword ptr [eax+edx], 0
add	dword ptr [esi+10h], 4
			
mov	eax, [ebx+50h]
add	ebx, 50h
test	eax, eax
jnz	loc_641F8160
mov	ecx, ds:_silc_default_pkcs_alg.name
test	ecx, ecx
jz	short loc_641F8254
mov	ebx, offset _silc_default_pkcs_alg
mov	[esp+2Ch+items], ebx 
call	_silc_pkcs_algorithm_register
mov	eax, [ebx+48h]
add	ebx, 48h
test	eax, eax
jnz	short loc_641F8242
mov	al, 1
add	esp, 1Ch
pop	ebx
pop	esi
pop	edi
pop	ebp
retn
align 10h
mov	[esi], eax
movzx	edx, word ptr [esi+0Ch]
jmp	short loc_641F8207
call	_silc_dlist_init_0
mov	esi, eax
mov	ds:_silc_pkcs_list, eax
jmp	loc_641F81E5
align 4
public _silc_pkcs_register
push	edi
push	esi
push	ebx
sub	esp, 10h
mov	esi, [esp+1Ch+pkcs]
mov	eax, ds:_silc_pkcs_list
test	eax, eax
jz	short loc_641F82DA
mov	edx, [eax]
mov	[eax+8], edx
and	byte ptr [eax+10h], 0FDh
mov	dword ptr [eax+18h], 0
mov	dword ptr [eax+14h], 0
xor	edx, edx
jmp	short loc_641F82C9
align 4
movzx	ecx, word ptr [eax+0Ch]
mov	ecx, [edx+ecx]
mov	[eax+8], ecx
mov	[eax+14h], edx
mov	ecx, [edx]
test	entry, entry
jz	short loc_641F82DA
mov	entry, [entry]
cmp	ecx, [pkcs_0]
jz	loc_641F8350
mov	[eax+18h], edx
mov	edx, [eax+8]
test	edx, edx
jnz	short loc_641F82AC
mov	dword ptr [eax+14h], 0
			
mov	[esp+1Ch+size],	50h
mov	[esp+1Ch+items], 1 
call	_silc_calloc
mov	ebx, eax
test	eax, eax
jz	short loc_641F8350
mov	ecx, 14h
mov	edi, newpkcs
rep movsd
mov	pkcs_0,	ds:_silc_pkcs_list
test	esi, esi
jz	short loc_641F8364
mov	[esp+1Ch+items], 0Ch 
call	_silc_malloc
test	eax, eax
jz	short loc_641F8347
mov	[eax], ebx
mov	edx, [esi]
test	edx, edx
jz	short loc_641F835C
movzx	edx, word ptr [esi+0Ch]
mov	ecx, [esi+4]
mov	[ecx+edx], eax
test	byte ptr [esi+10h], 1
jz	short loc_641F8339
movzx	ecx, word ptr [esi+0Eh]
mov	newpkcs, [esi+4]
mov	[eax+ecx], ebx
mov	[esi+4], eax
mov	dword ptr [eax+edx], 0
add	dword ptr [esi+10h], 4
mov	al, 1
add	esp, 10h
pop	ebx
pop	esi
pop	newpkcs
retn
			
xor	newpkcs, newpkcs
add	esp, 10h
pop	newpkcs
pop	pkcs_0
pop	edi
retn
align 4
mov	[esi], eax
movzx	edx, word ptr [esi+0Ch]
jmp	short loc_641F8329
call	_silc_dlist_init_0
mov	esi, eax
mov	ds:_silc_pkcs_list, eax
jmp	short loc_641F8307
align 4
public _silc_pkcs_algorithm_unregister
push	ebp
push	edi
push	esi
push	ebx
sub	esp, 3Ch
mov	edi, [esp+4Ch+pkcs]
mov	eax, ds:_silc_pkcs_alg_list
test	eax, eax
jz	loc_641F860A
mov	ecx, [eax]
mov	[eax+8], ecx
mov	bl, [eax+10h]
and	ebx, 0FFFFFFFDh
mov	[eax+10h], bl
mov	dword ptr [eax+18h], 0
mov	dword ptr [eax+14h], 0
cmp	pkcs_0,	1
jz	short loc_641F83EA
xor	edx, edx
jmp	short loc_641F83CF
align 4
movzx	entry, word ptr	[eax+0Ch]
mov	esi, [edx+esi]
mov	[eax+8], esi
mov	[eax+14h], edx
mov	esi, [edx]
test	entry, entry
jz	loc_641F860A
cmp	entry, pkcs_0
jz	short loc_641F840C
mov	[eax+18h], edx
mov	edx, [eax+8]
test	edx, edx
jnz	short loc_641F83B4
mov	dword ptr [eax+14h], 0
xor	eax, eax
add	esp, 3Ch
pop	ebx
pop	entry
pop	pkcs_0
pop	ebp
retn
mov	dword ptr [eax+18h], 0
test	ecx, ecx
jz	short loc_641F83D9
movzx	edx, word ptr [eax+0Ch]
mov	edx, [ecx+edx]
mov	[eax+8], edx
mov	[eax+14h], ecx
mov	esi, [ecx]
test	entry, entry
jz	loc_641F860A
mov	edx, ecx
mov	[eax+8], ecx
and	ebx, 0FFFFFFFDh
mov	[eax+10h], bl
test	edx, edx
jz	short loc_641F842F
movzx	ebx, word ptr [eax+0Ch]
mov	ebx, [edx+ebx]
mov	[eax+8], ebx
cmp	entry, [edx]
jz	short loc_641F8474
mov	edx, ebx
test	edx, edx
jnz	short loc_641F841B
			
mov	eax, [entry]
mov	[esp+4Ch+ptr], eax 
call	_silc_free
mov	eax, [entry+4]
mov	[esp+4Ch+ptr], eax 
call	_silc_free
mov	eax, [entry+8]
mov	[esp+4Ch+ptr], eax 
call	_silc_free
mov	[esp+4Ch+ptr], entry 
call	_silc_free
mov	pkcs_0,	ds:_silc_pkcs_alg_list
mov	eax, [edi+10h]
shr	eax, 2
jz	loc_641F84F0
mov	al, 1
add	esp, 3Ch
pop	ebx
pop	entry
pop	edi
pop	ebp
retn
align 4
test	ecx, ecx
jz	short loc_641F8497
cmp	edx, ecx
jz	loc_641F85F9
movzx	ebp, word ptr [eax+0Ch]
jmp	short loc_641F848E
align 4
cmp	edx, edi
jz	short loc_641F84C0
mov	ecx, edi
lea	ebx, [ecx+ebp]
mov	edi, [ebx]
test	edi, edi
jnz	short loc_641F8488
cmp	edx, [eax+4]
jz	loc_641F8587
			
cmp	edx, [eax+14h]
jz	loc_641F858F
cmp	edx, [eax+18h]
jz	loc_641F8564
mov	[esp+4Ch+ptr], edx 
call	_silc_free
jmp	loc_641F842F
align 10h
mov	[esp+4Ch+var_30], ebx
mov	edi, [edx+ebp]
mov	[ebx], edi
test	edi, edi
jz	short loc_641F84D7
test	byte ptr [eax+10h], 1
jnz	loc_641F8578
			
cmp	edx, [eax+8]
jz	loc_641F85EB
sub	dword ptr [eax+10h], 4
cmp	edx, [eax+4]
jnz	short loc_641F84A0
jmp	loc_641F8587
align 10h
mov	ebx, [edi]
mov	[edi+8], ebx
and	byte ptr [edi+10h], 0FDh
test	ebx, ebx
jz	short loc_641F854B
lea	entry, [entry+0]
test	byte ptr [edi+10h], 2
jz	loc_641F85D8
movzx	eax, word ptr [edi+0Eh]
mov	eax, [ebx+eax]
mov	[edi+8], eax
mov	edx, [edi]
test	edx, edx
jz	short loc_641F8533
cmp	ebx, edx
jz	short loc_641F859B
movzx	entry, word ptr	[edi+0Ch]
jmp	short loc_641F852A
cmp	ebx, eax
jz	short loc_641F85A4
mov	edx, eax
lea	ecx, [edx+esi]
mov	eax, [ecx]
test	eax, eax
jnz	short loc_641F8524
cmp	ebx, [edi+4]
jz	loc_641F85CF
			
mov	[esp+4Ch+ptr], ebx 
call	_silc_free
mov	ebx, [edi+8]
test	ebx, ebx
jnz	short loc_641F8500
mov	[esp+4Ch+ptr], edi 
call	_silc_free
mov	ds:_silc_pkcs_alg_list,	0
mov	al, 1
jmp	loc_641F846B
mov	dword ptr [eax+18h], 0
mov	[esp+4Ch+ptr], edx 
call	_silc_free
jmp	loc_641F842F
movzx	ebp, word ptr [eax+0Eh]
mov	ebx, [edx+ebp]
mov	[edi+ebp], ebx
jmp	loc_641F84D7
			
mov	[eax+4], ecx
jmp	loc_641F84A0
mov	dword ptr [eax+14h], 0
jmp	loc_641F84A9
movzx	entry, word ptr	[edi+0Ch]
mov	ecx, edi
xor	edx, edx
nop
mov	eax, [ebx+esi]
mov	[ecx], eax
test	eax, eax
jz	short loc_641F85BD
test	byte ptr [edi+10h], 1
jz	short loc_641F85BD
movzx	esi, word ptr [edi+0Eh]
mov	ebp, [ebx+esi]
mov	[eax+esi], ebp
			
cmp	ebx, [edi+8]
jz	short loc_641F85E4
sub	dword ptr [edi+10h], 4
cmp	ebx, [edi+4]
jnz	loc_641F853C
mov	[edi+4], edx
jmp	loc_641F853C
align 4
movzx	eax, word ptr [edi+0Ch]
mov	eax, [ebx+eax]
jmp	loc_641F8511
mov	eax, [ecx]
mov	[edi+8], eax
jmp	short loc_641F85C2
mov	edi, [esp+4Ch+var_30]
mov	ebx, [edi]
mov	[eax+8], ebx
jmp	loc_641F84E0
mov	[esp+4Ch+var_30], eax
movzx	ebp, word ptr [eax+0Ch]
xor	ecx, ecx
mov	ebx, eax
jmp	loc_641F84C4
			
xor	eax, eax
jmp	loc_641F83E2
align 4
public _silc_pkcs_unregister_all
push	ebp
push	edi
push	esi
push	ebx
sub	esp, 3Ch
mov	ebx, ds:_silc_pkcs_list
test	ebx, ebx
jz	loc_641F86D9
mov	eax, [ebx]
mov	[ebx+8], eax
and	byte ptr [ebx+10h], 0FDh
mov	dword ptr [ebx+18h], 0
mov	dword ptr [ebx+14h], 0
xor	edx, edx
			
mov	[ebx+18h], edx
test	eax, eax
jz	loc_641F86D2
mov	cl, [ebx+10h]
test	cl, 2
jz	loc_641F87FC
movzx	edx, word ptr [ebx+0Eh]
mov	edx, [eax+edx]
mov	[ebx+8], edx
mov	[ebx+14h], eax
mov	entry, [eax]
test	entry, entry
jz	short loc_641F86D9
mov	edx, [ebx]
mov	[ebx+8], edx
and	ecx, 0FFFFFFFDh
mov	[ebx+10h], cl
mov	dword ptr [ebx+18h], 0
mov	dword ptr [ebx+14h], 0
cmp	entry, 1
jz	loc_641F8750
xor	eax, eax
jmp	short loc_641F86B3
align 4
movzx	esi, word ptr [ebx+0Ch]
mov	esi, [eax+esi]
mov	[ebx+8], esi
mov	[ebx+14h], eax
mov	esi, [eax]
test	esi, esi
jz	loc_641F87B3
cmp	entry, esi
jz	loc_641F8776
mov	[ebx+18h], eax
mov	eax, [ebx+8]
test	eax, eax
jnz	short loc_641F8694
mov	dword ptr [ebx+14h], 0
mov	edx, [ebx+14h]
mov	[ebx+18h], edx
test	eax, eax
jnz	loc_641F864D
mov	dword ptr [ebx+14h], 0
			
mov	eax, ds:_silc_pkcs_alg_list
test	eax, eax
jz	loc_641F885B
mov	edx, [eax]
mov	[eax+8], edx
and	byte ptr [eax+10h], 0FDh
mov	dword ptr [eax+18h], 0
mov	dword ptr [eax+14h], 0
xor	edx, edx
jmp	short loc_641F8733
align 4
movzx	ecx, word ptr [eax+0Eh]
mov	ecx, [edx+ecx]
mov	[eax+8], ecx
mov	[eax+14h], edx
mov	eax, [edx]
test	alg, alg
jz	loc_641F885B
mov	[esp+4Ch+pkcs],	alg 
call	_silc_pkcs_algorithm_unregister
mov	eax, ds:_silc_pkcs_alg_list
test	eax, eax
jz	loc_641F885B
mov	edx, [eax+14h]
mov	[eax+18h], edx
mov	edx, [eax+8]
test	edx, edx
jz	loc_641F8854
test	byte ptr [eax+10h], 2
jnz	short loc_641F8704
movzx	ecx, word ptr [eax+0Ch]
mov	ecx, [edx+ecx]
jmp	short loc_641F870B
mov	dword ptr [ebx+18h], 0
test	edx, edx
jz	loc_641F893E
movzx	eax, word ptr [ebx+0Ch]
mov	eax, [edx+eax]
mov	[ebx+8], eax
mov	[ebx+14h], edx
mov	esi, [edx]
test	esi, esi
jz	loc_641F8642
mov	eax, edx
mov	[ebx+8], edx
and	ecx, 0FFFFFFFDh
mov	[ebx+10h], cl
test	eax, eax
jz	short loc_641F8799
movzx	ecx, word ptr [ebx+0Ch]
mov	ecx, [eax+ecx]
mov	[ebx+8], ecx
cmp	esi, [eax]
jz	short loc_641F87C0
mov	eax, ecx
test	eax, eax
jnz	short loc_641F8785
			
mov	[esp+4Ch+pkcs],	esi 
call	_silc_free
mov	ebx, ds:_silc_pkcs_list
mov	eax, [ebx+10h]
shr	eax, 2
jz	loc_641F8868
mov	eax, [ebx+8]
mov	edx, [ebx+14h]
jmp	loc_641F8642
align 10h
test	edx, edx
jz	short loc_641F87E3
cmp	eax, edx
jz	loc_641F892D
movzx	ebp, word ptr [ebx+0Ch]
jmp	short loc_641F87DA
align 4
cmp	eax, edi
jz	short loc_641F8808
mov	edx, edi
lea	ecx, [edx+ebp]
mov	entry, [ecx]
test	edi, edi
jnz	short loc_641F87D4
cmp	eax, [ebx+4]
jz	short loc_641F8837
cmp	eax, [ebx+14h]
jz	short loc_641F883F
cmp	eax, [ebx+18h]
jz	short loc_641F884B
			
mov	[esp+4Ch+pkcs],	eax 
call	_silc_free
jmp	short loc_641F8799
movzx	edx, word ptr [ebx+0Ch]
mov	edx, [eax+edx]
jmp	loc_641F8660
mov	[esp+4Ch+var_30], ecx
mov	entry, [eax+ebp]
mov	[ecx], edi
test	edi, edi
jz	short loc_641F8825
test	byte ptr [ebx+10h], 1
jz	short loc_641F8825
movzx	ebp, word ptr [ebx+0Eh]
mov	ecx, [eax+ebp]
mov	[edi+ebp], ecx
			
cmp	eax, [ebx+8]
jz	loc_641F891F
sub	dword ptr [ebx+10h], 4
cmp	eax, [ebx+4]
jnz	short loc_641F87E8
mov	[ebx+4], edx
cmp	eax, [ebx+14h]
jnz	short loc_641F87ED
mov	dword ptr [ebx+14h], 0
cmp	eax, [ebx+18h]
jnz	short loc_641F87F2
mov	dword ptr [ebx+18h], 0
jmp	short loc_641F87F2
mov	dword ptr [eax+14h], 0
			
mov	al, 1
add	esp, 3Ch
pop	ebx
pop	esi
pop	entry
pop	ebp
retn
align 4
mov	esi, [ebx]
mov	[ebx+8], esi
and	byte ptr [ebx+10h], 0FDh
test	esi, esi
jz	short loc_641F88BF
lea	esi, [esi+0]
test	byte ptr [ebx+10h], 2
jz	loc_641F890C
movzx	eax, word ptr [ebx+0Eh]
mov	eax, [esi+eax]
mov	[ebx+8], eax
mov	edx, [ebx]
test	edx, edx
jz	short loc_641F88AB
cmp	esi, edx
jz	short loc_641F88D6
movzx	entry, word ptr	[ebx+0Ch]
jmp	short loc_641F88A2
cmp	esi, eax
jz	short loc_641F88E0
mov	edx, eax
lea	ecx, [edx+edi]
mov	eax, [ecx]
test	eax, eax
jnz	short loc_641F889C
cmp	esi, [ebx+4]
jz	short loc_641F8907
			
mov	[esp+4Ch+pkcs],	esi 
call	_silc_free
mov	esi, [ebx+8]
test	esi, esi
jnz	short loc_641F8878
mov	[esp+4Ch+pkcs],	ebx 
call	_silc_free
mov	ds:_silc_pkcs_list, 0
jmp	loc_641F86D9
movzx	entry, word ptr	[ebx+0Ch]
mov	ecx, ebx
xor	edx, edx
xchg	ax, ax
mov	eax, [esi+edi]
mov	[ecx], eax
test	eax, eax
jz	short loc_641F88F9
test	byte ptr [ebx+10h], 1
jz	short loc_641F88F9
movzx	edi, word ptr [ebx+0Eh]
mov	ebp, [esi+edi]
mov	[eax+edi], ebp
			
cmp	esi, [ebx+8]
jz	short loc_641F8918
sub	dword ptr [ebx+10h], 4
cmp	esi, [ebx+4]
jnz	short loc_641F88B0
mov	[ebx+4], edx
jmp	short loc_641F88B0
movzx	eax, word ptr [ebx+0Ch]
mov	eax, [esi+eax]
jmp	loc_641F8889
mov	eax, [ecx]
mov	[ebx+8], eax
jmp	short loc_641F88FE
mov	edi, [esp+4Ch+var_30]
mov	ecx, [edi]
mov	[ebx+8], ecx
jmp	loc_641F882E
mov	[esp+4Ch+var_30], ebx
movzx	ebp, word ptr [ebx+0Ch]
xor	edx, edx
mov	ecx, ebx
jmp	loc_641F880C
xor	eax, eax
jmp	loc_641F86BD
align 4
public _silc_pkcs1_public_key_bitlen
mov	eax, [esp+public_key]
mov	eax, [eax]
retn
align 10h
public _silc_pkcs1_private_key_bitlen
mov	eax, [esp+private_key]
mov	eax, [eax]
retn
align 4
public _silc_pkcs1_private_key_free
push	ebx
sub	esp, 18h
mov	ebx, [esp+1Ch+private_key]
lea	eax, [ebx+4]
mov	[esp+1Ch+mp], eax 
call	_silc_mp_uninit
lea	eax, [ebx+14h]
mov	[esp+1Ch+mp], eax 
call	_silc_mp_uninit
lea	eax, [ebx+24h]
mov	[esp+1Ch+mp], eax 
call	_silc_mp_uninit
lea	eax, [ebx+54h]
mov	[esp+1Ch+mp], eax 
call	_silc_mp_uninit
lea	eax, [ebx+64h]
mov	[esp+1Ch+mp], eax 
call	_silc_mp_uninit
lea	eax, [ebx+74h]
mov	[esp+1Ch+mp], eax 
call	_silc_mp_uninit
lea	eax, [ebx+34h]
mov	[esp+1Ch+mp], eax 
call	_silc_mp_uninit
lea	eax, [ebx+44h]
mov	[esp+1Ch+mp], eax 
call	_silc_mp_uninit
mov	[esp+1Ch+private_key], ebx
add	esp, 18h
pop	ebx
jmp	_silc_free
align 4
public _silc_pkcs1_public_key_free
push	ebx
sub	esp, 18h
mov	ebx, [esp+1Ch+public_key]
lea	eax, [ebx+4]
mov	[esp+1Ch+mp], eax 
call	_silc_mp_uninit
lea	eax, [ebx+14h]
mov	[esp+1Ch+mp], eax 
call	_silc_mp_uninit
mov	[esp+1Ch+public_key], ebx
add	esp, 18h
pop	ebx
jmp	_silc_free
align 4
public _silc_pkcs1_export_private_key
push	ebp
push	edi
push	esi
push	ebx
sub	esp, 9Ch
mov	ebx, [esp+0ACh+private_key]
mov	ebp, [esp+0ACh+ret_len]
call	_silc_asn1_alloc
mov	esi, eax
test	eax, eax
jz	loc_641F8B54
lea	edx, [esp+0ACh+alg_key]
mov	ecx, 10h
xor	asn1, asn1
mov	edi, edx
rep stosb
mov	[esp+0ACh+var_4C], 0
mov	[esp+0ACh+var_50], 0
lea	eax, [private_key_0+74h]
mov	[esp+0ACh+var_54], eax
mov	[esp+0ACh+var_58], 8002h
lea	eax, [private_key_0+64h]
mov	[esp+0ACh+var_5C], eax
mov	[esp+0ACh+var_60], 8002h
lea	eax, [private_key_0+54h]
mov	[esp+0ACh+var_64], eax
mov	[esp+0ACh+var_68], 8002h
lea	eax, [private_key_0+44h]
mov	[esp+0ACh+var_6C], eax
mov	[esp+0ACh+var_70], 8002h
lea	eax, [private_key_0+34h]
mov	[esp+0ACh+var_74], eax
mov	[esp+0ACh+var_78], 8002h
lea	eax, [private_key_0+24h]
mov	[esp+0ACh+var_7C], eax
mov	[esp+0ACh+var_80], 8002h
lea	eax, [private_key_0+14h]
mov	[esp+0ACh+var_84], eax
mov	[esp+0ACh+var_88], 8002h
add	private_key_0, 4
mov	[esp+0ACh+var_8C], ebx
mov	[esp+0ACh+var_90], 8002h
mov	[esp+0ACh+var_94], 0
mov	[esp+0ACh+var_98], 0F006h
mov	[esp+0ACh+var_9C], 8010h
mov	[esp+0ACh+var_A0], 400h
mov	[esp+0ACh+var_A4], 7002h
mov	[esp+0ACh+dest], edx 
mov	[esp+0ACh+var_AC], asn1	
call	_silc_asn1_encode
test	al, al
jz	short err
mov	eax, [esp+0ACh+alg_key.head]
test	ret_len_0, ret_len_0
jz	short loc_641F8B04
mov	edx, [esp+0ACh+alg_key.end]
sub	edx, ret
mov	[ret_len_0+0], edx
mov	[esp+0ACh+alg_key.end],	0
mov	[esp+0ACh+alg_key.tail], 0
mov	[esp+0ACh+alg_key.data], 0
mov	[esp+0ACh+alg_key.head], 0
mov	[esp+0ACh+var_AC], asn1	
mov	[esp+0ACh+var_30], ret
call	_silc_asn1_free
mov	eax, [esp+0ACh+var_30]
add	esp, 9Ch
pop	ebx
pop	asn1
pop	edi
pop	ret_len_0
retn
align 4
mov	[esp+0ACh+var_AC], asn1	
call	_silc_asn1_free
xor	eax, eax
add	esp, 9Ch
pop	ebx
pop	asn1
pop	edi
pop	ret_len_0
retn
align 4
public _silc_pkcs1_export_public_key
push	ebp
push	edi
push	esi
push	ebx
sub	esp, 4Ch
mov	ebp, [esp+5Ch+public_key]
mov	esi, [esp+5Ch+ret_len]
call	_silc_asn1_alloc
mov	ebx, eax
test	eax, eax
jz	loc_641F8C34
lea	edx, [esp+5Ch+alg_key]
mov	ecx, 10h
xor	asn1, asn1
mov	edi, edx
rep stosb
mov	[esp+5Ch+var_34], 0
mov	[esp+5Ch+var_38], 0
lea	eax, [public_key_0+14h]
mov	[esp+5Ch+var_3C], eax
mov	[esp+5Ch+var_40], 8002h
add	public_key_0, 4
mov	[esp+5Ch+var_44], ebp
mov	[esp+5Ch+var_48], 8002h
mov	[esp+5Ch+var_4C], 8010h
mov	[esp+5Ch+var_50], 400h
mov	[esp+5Ch+var_54], 7002h
mov	[esp+5Ch+dest],	edx 
mov	[esp+5Ch+var_5C], asn1 
call	_silc_asn1_encode
test	al, al
jz	short loc_641F8C2C
mov	edi, [esp+5Ch+alg_key.head]
test	ret_len_0, ret_len_0
jz	short loc_641F8BF7
mov	eax, [esp+5Ch+alg_key.end]
sub	eax, ret
mov	[ret_len_0], eax
mov	[esp+5Ch+alg_key.end], 0
mov	[esp+5Ch+alg_key.tail],	0
mov	[esp+5Ch+alg_key.data],	0
mov	[esp+5Ch+alg_key.head],	0
mov	[esp+5Ch+var_5C], asn1 
call	_silc_asn1_free
mov	eax, ret
add	esp, 4Ch
pop	asn1
pop	ret_len_0
pop	ret
pop	ebp
retn
align 4
mov	[esp+5Ch+var_5C], asn1 
call	_silc_asn1_free
xor	edi, edi
mov	eax, ret
add	esp, 4Ch
pop	asn1
pop	ret_len_0
pop	ret
pop	ebp
retn
public _silc_pkcs1_decode
push	ebp
push	edi
push	esi
push	ebx
mov	esi, [esp+10h+bt]
mov	ecx, [esp+10h+data]
mov	edx, [esp+10h+data_len]
mov	eax, [esp+10h+dest_data]
mov	edi, [esp+10h+dest_data_size]
mov	ebp, [esp+10h+dest_len]
test	ecx, ecx
jz	short loc_641F8C78
test	dest_data_0, dest_data_0
jz	short loc_641F8C78
cmp	dest_data_size_0, 2
jbe	short loc_641F8C78
cmp	byte ptr [data_0], 0
jnz	short loc_641F8C78
mov	ebx, bt_0
cmp	[data_0+1], bl
jz	short loc_641F8C80
lea	i, [i+0]
			
xor	dest_data_0, dest_data_0
pop	ebx
pop	i
pop	edi
pop	dest_len_0
retn
align 10h
cmp	esi, 1
jz	short loc_641F8CAC
cmp	bt_0, 2
jnz	short loc_641F8C78
cmp	data_len_0, 2
jbe	short loc_641F8C78
cmp	byte ptr [data_0+2], 0
jz	short loc_641F8C78
mov	bt_0, 2
jmp	short loc_641F8CA2
cmp	byte ptr [data_0+i], 0
jz	short loc_641F8CD0
inc	i
cmp	data_len_0, i
ja	short loc_641F8C9C
jmp	short loc_641F8C78
align 4
cmp	data_len_0, 2
jbe	short loc_641F8C78
cmp	byte ptr [data_0+2], 0FFh
jnz	short loc_641F8C78
mov	bt_0, 2
jmp	short loc_641F8CC6
align 10h
cmp	byte ptr [data_0+i], 0FFh
jnz	short loc_641F8CD0
inc	i
cmp	data_len_0, i
ja	short loc_641F8CC0
jmp	short loc_641F8C78
align 10h
			
cmp	i, 7
jbe	short loc_641F8C78
cmp	byte ptr [data_0+i], 0
jnz	short loc_641F8C78
inc	i
cmp	data_len_0, i
jbe	short loc_641F8C78
sub	data_len_0, i
cmp	dest_data_size_0, edx
jb	short loc_641F8C78
lea	i, [data_0+i]
mov	dest_data_size_0, dest_data_0
mov	data_0,	edx
rep movsb
test	dest_len_0, dest_len_0
jz	short loc_641F8CF6
mov	[dest_len_0+0],	edx
mov	al, 1
jmp	short loc_641F8C7A
align 4
public _silc_pkcs1_import_private_key
push	ebp
push	edi
push	esi
push	ebx
sub	esp, 9Ch
mov	ebp, [esp+0ACh+key]
mov	edi, [esp+0ACh+ret_private_key]
test	edi, edi
jz	loc_641F8E84
call	_silc_asn1_alloc
mov	esi, eax
test	eax, eax
jz	loc_641F8E84
mov	[esp+0ACh+size], 84h 
mov	[esp+0ACh+items], 1 
call	_silc_calloc
mov	ebx, eax
mov	[ret_private_key_0], eax
test	eax, eax
jz	err
mov	[esp+0ACh+alg_key.head], key_0
mov	[esp+0ACh+alg_key.data], key_0
add	key_0, [esp+0ACh+key_len]
mov	[esp+0ACh+alg_key.end],	ebp
mov	[esp+0ACh+alg_key.tail], ebp
lea	ret_private_key_0, [eax+4]
mov	[esp+0ACh+var_4C], 0
mov	[esp+0ACh+var_50], 0
lea	eax, [eax+74h]
mov	[esp+0ACh+var_54], eax
mov	[esp+0ACh+var_58], 8002h
lea	eax, [ebx+64h]
mov	[esp+0ACh+var_5C], eax
mov	[esp+0ACh+var_60], 8002h
lea	eax, [ebx+54h]
mov	[esp+0ACh+var_64], eax
mov	[esp+0ACh+var_68], 8002h
lea	eax, [ebx+44h]
mov	[esp+0ACh+var_6C], eax
mov	[esp+0ACh+var_70], 8002h
lea	eax, [ebx+34h]
mov	[esp+0ACh+var_74], eax
mov	[esp+0ACh+var_78], 8002h
lea	eax, [ebx+24h]
mov	[esp+0ACh+var_7C], eax
mov	[esp+0ACh+var_80], 8002h
lea	eax, [ebx+14h]
mov	[esp+0ACh+var_84], eax
mov	[esp+0ACh+var_88], 8002h
mov	[esp+0ACh+var_8C], edi
mov	[esp+0ACh+var_90], 8002h
lea	eax, [esp+0ACh+ver]
mov	[esp+0ACh+var_94], eax
mov	[esp+0ACh+var_98], 0F006h
mov	[esp+0ACh+var_9C], 8010h
mov	[esp+0ACh+var_A0], 400h
mov	[esp+0ACh+var_A4], 7002h
lea	eax, [esp+0ACh+alg_key]
mov	[esp+0ACh+size], eax 
mov	[esp+0ACh+items], asn1 
call	_silc_asn1_decode
test	al, al
jnz	short loc_641F8E50
			
mov	[esp+0ACh+items], ebx 
call	_silc_free
mov	[esp+0ACh+items], asn1 
call	_silc_asn1_free
xor	eax, eax
add	esp, 9Ch
pop	ebx
pop	asn1
pop	edi
pop	ebp
retn
align 10h
mov	eax, [esp+0ACh+ver]
test	eax, eax
jnz	short err
mov	[esp+0ACh+size], 2 
mov	[esp+0ACh+items], edi 
call	_silc_mp_sizeinbase
add	eax, 7
and	eax, 0FFFFFFF8h
mov	[ebx], eax
mov	[esp+0ACh+items], asn1 
call	_silc_asn1_free
mov	eax, [esp+0ACh+key_len]
jmp	short loc_641F8E44
			
xor	asn1, asn1
add	esp, 9Ch
pop	ebx
pop	asn1
pop	ret_private_key_0
pop	key_0
retn
align 4
public _silc_pkcs1_import_public_key
push	ebp
push	edi
push	esi
push	ebx
sub	esp, 4Ch
mov	ebp, [esp+5Ch+key]
mov	edi, [esp+5Ch+ret_public_key]
test	edi, edi
jz	loc_641F8F60
call	_silc_asn1_alloc
mov	esi, eax
test	eax, eax
jz	loc_641F8F60
mov	[esp+5Ch+size],	24h 
mov	[esp+5Ch+items], 1 
call	_silc_calloc
mov	ebx, eax
mov	[ret_public_key_0], eax
test	eax, eax
jz	short err
mov	[esp+5Ch+alg_key.head],	key_0
mov	[esp+5Ch+alg_key.data],	key_0
add	key_0, [esp+5Ch+key_len]
mov	[esp+5Ch+alg_key.end], ebp
mov	[esp+5Ch+alg_key.tail],	ebp
lea	ret_public_key_0, [eax+4]
mov	[esp+5Ch+var_34], 0
mov	[esp+5Ch+var_38], 0
lea	eax, [eax+14h]
mov	[esp+5Ch+var_3C], eax
mov	[esp+5Ch+var_40], 8002h
mov	[esp+5Ch+var_44], edi
mov	[esp+5Ch+var_48], 8002h
mov	[esp+5Ch+var_4C], 8010h
mov	[esp+5Ch+var_50], 400h
mov	[esp+5Ch+var_54], 7002h
lea	eax, [esp+5Ch+alg_key]
mov	[esp+5Ch+size],	eax 
mov	[esp+5Ch+items], asn1 
call	_silc_asn1_decode
test	al, al
jnz	short loc_641F8F6C
mov	[esp+5Ch+items], ebx 
call	_silc_free
mov	[esp+5Ch+items], asn1 
call	_silc_asn1_free
xor	eax, eax
add	esp, 4Ch
pop	ebx
pop	asn1
pop	edi
pop	ebp
retn
align 10h
			
xor	asn1, asn1
add	esp, 4Ch
pop	ebx
pop	asn1
pop	ret_public_key_0
pop	key_0
retn
align 4
mov	[esp+5Ch+size],	2 
mov	[esp+5Ch+items], edi 
call	_silc_mp_sizeinbase
add	eax, 7
and	eax, 0FFFFFFF8h
mov	[ebx], eax
mov	[esp+5Ch+items], asn1 
call	_silc_asn1_free
mov	eax, [esp+5Ch+key_len]
add	esp, 4Ch
pop	ebx
pop	asn1
pop	edi
pop	ebp
retn
public _silc_pkcs1_public_key_compare
push	esi
push	ebx
sub	esp, 14h
mov	ebx, [esp+1Ch+key1]
mov	esi, [esp+1Ch+key2]
mov	eax, [ebx]
cmp	eax, [esi]
jz	short loc_641F8FB4
xor	eax, eax
add	esp, 14h
pop	ebx
pop	esi
retn
align 4
lea	eax, [key2_0+14h]
mov	[esp+1Ch+mp2], eax 
lea	eax, [key1_0+14h]
mov	[esp+1Ch+mp1], eax 
call	_silc_mp_cmp
test	eax, eax
jnz	short loc_641F8FAB
add	key2_0,	4
mov	[esp+1Ch+mp2], esi 
add	key1_0,	4
mov	[esp+1Ch+mp1], ebx 
call	_silc_mp_cmp
test	eax, eax
setz	al
jmp	short loc_641F8FAD
align 4
public _silc_pkcs1_public_key_copy
push	ebp
push	edi
push	esi
push	ebx
sub	esp, 1Ch
mov	ebx, [esp+2Ch+public_key]
mov	[esp+2Ch+size],	24h 
mov	[esp+2Ch+items], 1 
call	_silc_calloc
mov	esi, eax
test	eax, eax
jz	short loc_641F904C
lea	ebp, [eax+4]
mov	[esp+2Ch+items], ebp 
call	_silc_mp_init
lea	edi, [esi+14h]
mov	[esp+2Ch+items], edi 
call	_silc_mp_init
lea	eax, [public_key_0+4]
mov	[esp+2Ch+size],	eax 
mov	[esp+2Ch+items], ebp 
call	_silc_mp_set
lea	eax, [public_key_0+14h]
mov	[esp+2Ch+size],	eax 
mov	[esp+2Ch+items], edi 
call	_silc_mp_set
mov	eax, [public_key_0]
mov	[esi], eax
mov	eax, esi
add	esp, 1Ch
pop	public_key_0
pop	esi
pop	edi
pop	ebp
retn
align 4
xor	eax, eax
add	esp, 1Ch
pop	public_key_0
pop	esi
pop	edi
pop	ebp
retn
align 4
public _silc_pkcs1_generate_key
push	ebp
push	edi
push	esi
push	ebx
sub	esp, 5Ch
mov	ebp, [esp+6Ch+rng]
mov	edi, [esp+6Ch+keylen]
shr	prime_bits, 1
mov	eax, [esp+6Ch+keylen]
sub	eax, 300h
cmp	eax, 3D00h
jbe	short loc_641F9084
xor	eax, eax
add	esp, 5Ch
pop	ebx
pop	esi
pop	prime_bits
pop	rng_0
retn
align 4
lea	ebx, [esp+6Ch+p]
mov	[esp+6Ch+mp], ebx 
call	_silc_mp_init
lea	esi, [esp+6Ch+q]
mov	[esp+6Ch+mp], esi 
call	_silc_mp_init
mov	[esp+6Ch+var_60], rng_0	
mov	dword ptr [esp+6Ch+verbose], 0 
mov	[esp+6Ch+bits],	prime_bits 
mov	[esp+6Ch+mp], ebx 
call	_silc_math_gen_prime
mov	[esp+6Ch+var_60], rng_0	
mov	dword ptr [esp+6Ch+verbose], 0 
mov	[esp+6Ch+bits],	prime_bits 
mov	[esp+6Ch+mp], esi 
call	_silc_math_gen_prime
mov	[esp+6Ch+bits],	esi 
mov	[esp+6Ch+mp], ebx 
call	_silc_mp_cmp
test	eax, eax
jz	short loc_641F909C
mov	[esp+6Ch+bits],	esi 
mov	[esp+6Ch+mp], ebx 
call	_silc_mp_cmp
test	eax, eax
jle	short loc_641F9124
lea	prime_bits, [esp+6Ch+hlp]
mov	[esp+6Ch+mp], edi 
call	_silc_mp_init
mov	[esp+6Ch+bits],	ebx 
mov	[esp+6Ch+mp], edi 
call	_silc_mp_set
mov	[esp+6Ch+bits],	esi 
mov	[esp+6Ch+mp], ebx 
call	_silc_mp_set
mov	[esp+6Ch+bits],	edi 
mov	[esp+6Ch+mp], esi 
call	_silc_mp_set
mov	[esp+6Ch+mp], edi 
call	_silc_mp_uninit
mov	eax, [esp+6Ch+ret_private_key]
mov	[esp+6Ch+var_5C], eax 
mov	eax, [esp+6Ch+ret_public_key]
mov	[esp+6Ch+var_60], eax 
mov	dword ptr [esp+6Ch+verbose], esi 
mov	[esp+6Ch+bits],	ebx 
mov	eax, [esp+6Ch+keylen]
mov	[esp+6Ch+mp], eax 
call	_silc_rsa_generate_keys
test	al, al
jz	loc_641F9079
mov	[esp+6Ch+mp], ebx 
call	_silc_mp_uninit
mov	[esp+6Ch+mp], esi 
call	_silc_mp_uninit
mov	al, 1
add	esp, 5Ch
pop	ebx
pop	esi
pop	prime_bits
pop	rng_0
retn
align 4
public _silc_pkcs1_encode
			
push	ebp
push	edi
push	esi
push	ebx
sub	esp, 1Ch
mov	edx, [esp+2Ch+bt]
mov	ebp, [esp+2Ch+data]
mov	esi, [esp+2Ch+dest_data]
mov	eax, [esp+2Ch+dest_data_size]
test	ebp, ebp
jz	short loc_641F91BC
test	dest_data_0, dest_data_0
jz	short loc_641F91BC
cmp	dest_data_size_0, 0Ah
jbe	short loc_641F91BC
cmp	dest_data_size_0, [esp+2Ch+data_len]
jb	short loc_641F91BC
mov	byte ptr [dest_data_0],	0
mov	[dest_data_0+1], dl
sub	dest_data_size_0, [esp+2Ch+data_len]
lea	ebx, [eax-3]
cmp	padlen,	7
jle	short loc_641F91BC
cmp	bt_0, 1
ja	short loc_641F91C8
jz	short loc_641F9214
xor	eax, eax
lea	bt_0, [dest_data_0+2]
mov	edi, edx
mov	ecx, padlen
rep stosb
jmp	short loc_641F91CD
			
xor	eax, eax
add	esp, 1Ch
pop	padlen
pop	dest_data_0
pop	edi
pop	data_0
retn
align 4
cmp	bt_0, 2
jz	short loc_641F91EC
			
mov	byte ptr [dest_data_0+padlen+2], 0
lea	eax, [dest_data_0+padlen+3]
mov	i, eax
mov	dest_data_0, data_0
mov	ecx, [esp+2Ch+data_len]
rep movsb
mov	al, 1
add	esp, 1Ch
pop	padlen
pop	data_0
pop	edi
pop	ebp
retn
align 4
mov	bt_0, [esp+2Ch+rng]
test	edx, edx
jz	short loc_641F921B
mov	edi, 2
lea	dest_data_0, [dest_data_0+0]
mov	eax, [esp+2Ch+rng]
mov	[esp+2Ch+var_2C], eax 
call	_silc_rng_get_byte_fast
mov	[dest_data_0+i], al
inc	i
cmp	padlen,	i
jg	short loc_641F91FC
jmp	short loc_641F91CD
align 4
mov	eax, 0FFh
jmp	short loc_641F91B1
mov	[esp+2Ch+var_2C], offset aCannotEncryptR 
call	_silc_format
mov	[esp+2Ch+string], eax 
mov	[esp+2Ch+var_2C], 3 
call	_silc_log_output
xor	eax, eax
jmp	short loc_641F91BE
align 4
public _silc_pkcs1_sign_no_oid
push	ebp
push	edi
push	esi
push	ebx
sub	esp, 89Ch
mov	edx, [esp+8ACh+src]
mov	eax, [esp+8ACh+src_len]
mov	ebp, [esp+8ACh+hash]
mov	bl, [esp+8ACh+compute_hash]
mov	esi, [esp+8ACh+private_key]
mov	ecx, [esi]
mov	edi, ecx
add	edi, 7
js	short loc_641F92C8
sar	edi, 3
cmp	edi, 801h
ja	short loc_641F92BA
cmp	edi, [esp+8ACh+signature_size]
ja	short loc_641F92BA
test	bl, bl
jnz	loc_641F9374
mov	[esp+8ACh+rng],	0 
mov	[esp+8ACh+dest_data_size], edi 
lea	esi, [esp+8ACh+padded]
mov	[esp+8ACh+dest_data], esi 
mov	[esp+8ACh+data_len], eax 
mov	[esp+8ACh+data], src_0 
mov	[esp+8ACh+bt], 1 
call	_silc_pkcs1_encode
test	al, al
jnz	short loc_641F92D0
			
xor	eax, eax
add	esp, 89Ch
pop	compute_hash_0
pop	esi
pop	edi
pop	hash_0
retn
align 4
lea	edi, [ecx+0Eh]
jmp	short loc_641F9272
align 10h
lea	hash_0,	[esp+8ACh+mp_tmp]
mov	[esp+8ACh+bt], ebp 
call	_silc_mp_init
lea	eax, [esp+8ACh+mp_dst]
mov	[esp+8ACh+bt], eax 
call	_silc_mp_init
mov	[esp+8ACh+data_len], ebp 
mov	[esp+8ACh+data], edi 
mov	[esp+8ACh+bt], esi 
call	_silc_mp_bin2mp
lea	eax, [esp+8ACh+mp_dst]
mov	[esp+8ACh+data_len], eax 
mov	[esp+8ACh+data], ebp 
mov	eax, [esp+8ACh+private_key]
mov	[esp+8ACh+bt], eax 
call	_silc_rsa_private_operation
mov	[esp+8ACh+data_len], edi 
mov	eax, [esp+8ACh+signature]
mov	[esp+8ACh+data], eax 
lea	eax, [esp+8ACh+mp_dst]
mov	[esp+8ACh+bt], eax 
call	_silc_mp_mp2bin_noalloc
mov	eax, [esp+8ACh+ret_signature_len]
mov	[eax], edi
mov	ecx, 801h
xor	eax, eax
mov	edi, esi
rep stosb
mov	[esp+8ACh+bt], ebp 
call	_silc_mp_uninit
lea	esi, [esp+8ACh+mp_dst]
mov	[esp+8ACh+bt], esi 
call	_silc_mp_uninit
mov	al, 1
add	esp, 89Ch
pop	compute_hash_0
pop	esi
pop	edi
pop	ebp
retn
align 4
lea	esi, [esp+8ACh+hashr]
mov	[esp+8ACh+dest_data], esi 
mov	[esp+8ACh+data_len], src_len_0 
mov	[esp+8ACh+data], src_0 
mov	[esp+8ACh+bt], hash_0 
call	_silc_hash_make
mov	[esp+8ACh+bt], hash_0 
call	_silc_hash_len
mov	edx, esi
jmp	loc_641F928E
align 10h
public _silc_pkcs1_sign
push	ebp
push	edi
push	esi
push	ebx
sub	esp, 8ECh
mov	esi, [esp+8FCh+private_key]
mov	edi, [esp+8FCh+hash]
mov	al, [esp+8FCh+compute_hash]
mov	[esp+8FCh+var_89D], al
mov	eax, [esi]
mov	ebx, eax
add	ebx, 7
js	loc_641F95AC
sar	ebx, 3
cmp	ebx, 801h
ja	short loc_641F93E4
cmp	ebx, [esp+8FCh+signature_size]
jbe	short loc_641F93F4
			
xor	asn1, asn1
add	esp, 8ECh
pop	ebx
pop	private_key_0
pop	edi
pop	asn1
retn
align 4
mov	[esp+8FCh+var_8FC], hash_0 
call	_silc_hash_get_oid
test	eax, eax
jz	short loc_641F93E4
mov	[esp+8FCh+var_8A8], oid
call	_silc_asn1_alloc
mov	ebp, eax
test	eax, eax
mov	edx, [esp+8FCh+var_8A8]
jz	short loc_641F93E4
cmp	[esp+8FCh+var_89D], 0
jnz	loc_641F95E0
lea	eax, [esp+8FCh+di_0]
mov	[esp+8FCh+var_8B0], eax
mov	ecx, 10h
mov	hash_0,	eax
xor	eax, eax
rep stosb
mov	[esp+8FCh+var_8CC], 0
mov	[esp+8FCh+var_8D0], 0
mov	eax, [esp+8FCh+src_len]
mov	[esp+8FCh+var_8D4], eax
mov	eax, [esp+8FCh+src]
mov	[esp+8FCh+var_8D8], eax
mov	[esp+8FCh+var_8DC], 8004h
mov	[esp+8FCh+var_8E0], 0
mov	[esp+8FCh+var_8E4], 8005h
mov	[esp+8FCh+rng],	edx
mov	[esp+8FCh+dest_data_size], 8006h
mov	[esp+8FCh+dest_data], 8010h
mov	[esp+8FCh+data_len], 8010h
lea	oid, [esp+8FCh+di_0]
mov	[esp+8FCh+dest], edx 
mov	[esp+8FCh+var_8FC], asn1 
call	_silc_asn1_encode
test	al, al
jz	loc_641F95B4
mov	eax, [esp+8FCh+di_0.data]
mov	[esp+8FCh+rng],	0 
mov	[esp+8FCh+dest_data_size], ebx 
lea	edx, [esp+8FCh+padded]
mov	[esp+8FCh+var_8B4], edx
mov	[esp+8FCh+dest_data], edx 
mov	edx, [esp+8FCh+di_0.tail]
sub	edx, eax
mov	[esp+8FCh+data_len], edx 
mov	[esp+8FCh+dest], eax 
mov	[esp+8FCh+var_8FC], 1 
call	_silc_pkcs1_encode
test	al, al
jz	loc_641F95B4
lea	eax, [esp+8FCh+mp_tmp]
mov	[esp+8FCh+var_8FC], eax	
call	_silc_mp_init
lea	edx, [esp+8FCh+mp_dst]
mov	[esp+8FCh+var_8FC], edx	
call	_silc_mp_init
lea	eax, [esp+8FCh+mp_tmp]
mov	[esp+8FCh+data_len], eax 
mov	[esp+8FCh+dest], ebx 
lea	edx, [esp+8FCh+padded]
mov	[esp+8FCh+var_8FC], edx	
call	_silc_mp_bin2mp
lea	eax, [esp+8FCh+mp_dst]
mov	[esp+8FCh+data_len], eax 
lea	edx, [esp+8FCh+mp_tmp]
mov	[esp+8FCh+dest], edx 
mov	[esp+8FCh+var_8FC], private_key_0 
call	_silc_rsa_private_operation
mov	[esp+8FCh+data_len], ebx 
mov	eax, [esp+8FCh+signature]
mov	[esp+8FCh+dest], eax 
lea	eax, [esp+8FCh+mp_dst]
mov	[esp+8FCh+var_8FC], eax	
call	_silc_mp_mp2bin_noalloc
mov	eax, [esp+8FCh+ret_signature_len]
mov	[eax], ebx
mov	ecx, 801h
mov	edi, [esp+8FCh+var_8B4]
xor	eax, eax
rep stosb
lea	edx, [esp+8FCh+mp_tmp]
mov	[esp+8FCh+var_8FC], edx	
call	_silc_mp_uninit
lea	eax, [esp+8FCh+mp_dst]
mov	[esp+8FCh+var_8FC], eax	
call	_silc_mp_uninit
cmp	[esp+8FCh+var_89D], 0
jnz	short loc_641F95CC
mov	[esp+8FCh+var_8FC], asn1 
call	_silc_asn1_free
mov	al, 1
jmp	loc_641F93E6
lea	ebx, [eax+0Eh]
jmp	loc_641F93D0
			
mov	[esp+8FCh+var_8FC], asn1
call	_silc_asn1_free
xor	eax, eax
add	esp, 8ECh
pop	ebx
pop	private_key_0
pop	edi
pop	asn1
retn
align 4
lea	edx, [esp+8FCh+hashr]
mov	ecx, 40h
mov	edi, edx
xor	eax, eax
rep stosb
jmp	short loc_641F959D
lea	ecx, [esp+8FCh+hashr]
mov	[esp+8FCh+dest_data], ecx 
mov	asn1, [esp+8FCh+src_len]
mov	[esp+8FCh+data_len], eax 
mov	eax, [esp+8FCh+src]
mov	[esp+8FCh+dest], eax 
mov	[esp+8FCh+var_8FC], hash_0 
mov	[esp+8FCh+var_8A4], ecx
call	_silc_hash_make
mov	[esp+8FCh+var_8FC], hash_0 
call	_silc_hash_len
mov	[esp+8FCh+src_len], eax
mov	ecx, [esp+8FCh+var_8A4]
mov	[esp+8FCh+src],	ecx
mov	edx, [esp+8FCh+var_8A8]
jmp	loc_641F941E
public _silc_pkcs1_encrypt
push	ebp
push	edi
push	esi
push	ebx
sub	esp, 86Ch
mov	edx, [esp+87Ch+public_key]
mov	eax, [edx]
mov	edi, eax
add	edi, 7
js	loc_641F9738
sar	edi, 3
cmp	edi, 801h
ja	short loc_641F9662
cmp	edi, [esp+87Ch+dst_size]
jbe	short loc_641F9670
			
xor	eax, eax
add	esp, 86Ch
pop	ebx
pop	esi
pop	edi
pop	ebp
retn
align 10h
mov	eax, [esp+87Ch+rng]
mov	[esp+87Ch+var_868], eax	
mov	[esp+87Ch+dest_data_size], edi 
lea	ebx, [esp+87Ch+padded]
mov	[esp+87Ch+dest_data], ebx 
mov	eax, [esp+87Ch+src_len]
mov	[esp+87Ch+data_len], eax 
mov	eax, [esp+87Ch+src]
mov	[esp+87Ch+data], eax 
mov	[esp+87Ch+bt], 2 
mov	[esp+87Ch+key],	public_key_0
call	_silc_pkcs1_encode
test	al, al
jz	short loc_641F9662
lea	esi, [esp+87Ch+mp_tmp]
mov	[esp+87Ch+bt], esi 
call	_silc_mp_init
lea	ebp, [esp+87Ch+mp_dst]
mov	[esp+87Ch+bt], ebp 
call	_silc_mp_init
mov	[esp+87Ch+data_len], esi 
mov	[esp+87Ch+data], edi 
mov	[esp+87Ch+bt], ebx 
call	_silc_mp_bin2mp
mov	[esp+87Ch+data_len], ebp 
mov	[esp+87Ch+data], esi 
mov	edx, [esp+87Ch+key]
mov	[esp+87Ch+bt], edx 
call	_silc_rsa_public_operation
mov	[esp+87Ch+data_len], edi 
mov	eax, [esp+87Ch+dst]
mov	[esp+87Ch+data], eax 
mov	[esp+87Ch+bt], ebp 
call	_silc_mp_mp2bin_noalloc
mov	eax, [esp+87Ch+ret_dst_len]
mov	[eax], edi
mov	ecx, 801h
xor	eax, eax
mov	edi, ebx
rep stosb
mov	[esp+87Ch+bt], esi 
call	_silc_mp_uninit
mov	[esp+87Ch+bt], ebp 
call	_silc_mp_uninit
mov	al, 1
jmp	loc_641F9664
align 4
lea	edi, [eax+0Eh]
jmp	loc_641F964E
public _silc_pkcs1_decrypt
push	ebp
push	edi
push	esi
push	ebx
sub	esp, 86Ch
mov	esi, [esp+87Ch+private_key]
mov	eax, [esi]
mov	edx, eax
add	edx, 7
js	loc_641F982C
sar	edx, 3
cmp	edx, [esp+87Ch+dst_size]
ja	loc_641F981C
lea	ebx, [esp+87Ch+mp_tmp]
mov	[esp+87Ch+mp], ebx 
call	_silc_mp_init
lea	ebp, [esp+87Ch+mp_dst]
mov	[esp+87Ch+mp], ebp 
call	_silc_mp_init
mov	[esp+87Ch+ret],	ebx 
mov	eax, [esp+87Ch+src_len]
mov	[esp+87Ch+len],	eax 
mov	eax, [esp+87Ch+src]
mov	[esp+87Ch+mp], eax 
call	_silc_mp_bin2mp
mov	[esp+87Ch+ret],	ebp 
mov	[esp+87Ch+len],	ebx 
mov	[esp+87Ch+mp], private_key_0 
call	_silc_rsa_private_operation
lea	eax, [esp+87Ch+padded_len]
mov	[esp+87Ch+ret],	eax 
mov	eax, [private_key_0]
mov	edx, eax
add	edx, 7
js	short loc_641F9834
sar	edx, 3
mov	[esp+87Ch+len],	edx 
mov	[esp+87Ch+mp], ebp 
call	_silc_mp_mp2bin
mov	edx, eax
mov	eax, [esp+87Ch+padded_len]
mov	[esp+87Ch+var_850], eax
test	padded,	padded
jz	short loc_641F97F9
cmp	byte ptr [padded], 0
jnz	short loc_641F97F9
cmp	byte ptr [padded+1], 2
jz	short loc_641F983C
			
xor	eax, eax
mov	edi, padded
mov	ecx, [esp+87Ch+var_850]
rep stosb
mov	[esp+87Ch+mp], edx 
call	_silc_free
mov	[esp+87Ch+mp], ebx 
call	_silc_mp_uninit
mov	[esp+87Ch+mp], ebp 
call	_silc_mp_uninit
nop
xor	eax, eax
add	esp, 86Ch
pop	ebx
pop	esi
pop	padded
pop	ebp
retn
align 4
lea	edx, [eax+0Eh]
jmp	loc_641F975E
lea	edx, [eax+0Eh]
jmp	short loc_641F97CE
align 4
cmp	eax, 2
jbe	short loc_641F97F9
cmp	byte ptr [padded+2], 0
jz	short loc_641F97F9
mov	private_key_0, 2
mov	eax, [esp+87Ch+var_850]
jmp	short loc_641F985A
align 4
cmp	byte ptr [padded+esi], 0
jz	short loc_641F9864
inc	esi
cmp	eax, esi
ja	short loc_641F9854
jmp	short loc_641F97F9
align 4
cmp	esi, 7
jbe	short loc_641F97F9
inc	esi
cmp	[esp+87Ch+var_850], esi
jbe	short loc_641F97F9
mov	eax, [esp+87Ch+var_850]
sub	eax, esi
cmp	eax, 801h
ja	loc_641F97F9
lea	ecx, [esp+87Ch+unpadded]
mov	[esp+87Ch+var_860], ecx
lea	esi, [padded+esi]
mov	edi, ecx
mov	ecx, eax
rep movsb
mov	ecx, [esp+87Ch+ret_dst_len]
test	ecx, ecx
jz	short loc_641F98E8
mov	ecx, [esp+87Ch+ret_dst_len]
mov	[ecx], eax
mov	edi, [esp+87Ch+dst]
mov	esi, [esp+87Ch+var_860]
mov	ecx, eax
rep movsb
xor	eax, eax
mov	dst_0, padded
mov	ecx, [esp+87Ch+var_850]
rep stosb
mov	cx, 801h
mov	padded,	[esp+87Ch+var_860]
rep stosb
mov	[esp+87Ch+mp], edx 
call	_silc_free
mov	[esp+87Ch+mp], ebx 
call	_silc_mp_uninit
mov	[esp+87Ch+mp], ebp 
call	_silc_mp_uninit
mov	al, 1
jmp	loc_641F981E
mov	ecx, [esp+87Ch+ret_dst_len]
mov	eax, [ecx]
jmp	short loc_641F98A6
align 4
public _silc_pkcs1_verify_no_oid
push	ebp
push	edi
push	esi
push	ebx
sub	esp, 8ACh
mov	esi, [esp+8BCh+public_key]
mov	eax, [esi]
mov	ebx, eax
add	ebx, 7
js	loc_641F99F8
sar	ebx, 3
lea	ebp, [esp+8BCh+mp_tmp2]
mov	[esp+8BCh+mp], ebp 
call	_silc_mp_init
lea	eax, [esp+8BCh+mp_dst]
mov	[esp+8BCh+mp], eax 
call	_silc_mp_init
mov	[esp+8BCh+ret],	ebp 
mov	eax, [esp+8BCh+signature_len]
mov	[esp+8BCh+len],	eax 
mov	eax, [esp+8BCh+signature]
mov	[esp+8BCh+mp], eax 
call	_silc_mp_bin2mp
lea	eax, [esp+8BCh+mp_dst]
mov	[esp+8BCh+ret],	eax 
mov	[esp+8BCh+len],	ebp 
mov	[esp+8BCh+mp], public_key_0 
call	_silc_rsa_public_operation
lea	eax, [esp+8BCh+verify_len]
mov	[esp+8BCh+ret],	eax 
mov	[esp+8BCh+len],	ebx 
lea	eax, [esp+8BCh+mp_dst]
mov	[esp+8BCh+mp], eax 
call	_silc_mp_mp2bin
mov	ebx, eax
mov	edx, [esp+8BCh+verify_len]
test	eax, eax
jz	short loc_641F999E
cmp	byte ptr [verify], 0
jnz	short loc_641F999E
cmp	byte ptr [verify+1], 1
jz	short loc_641F99D4
			
xor	eax, eax
mov	edi, verify
mov	ecx, edx
rep stosb
mov	[esp+8BCh+mp], ebx 
call	_silc_free
mov	[esp+8BCh+mp], ebp 
call	_silc_mp_uninit
lea	eax, [esp+8BCh+mp_dst]
mov	[esp+8BCh+mp], eax 
call	_silc_mp_uninit
xor	esi, esi
mov	eax, ret
add	esp, 8ACh
pop	ebx
pop	ret
pop	verify
pop	ebp
retn
cmp	edx, 2
jbe	short loc_641F999E
cmp	byte ptr [verify+2], 0FFh
jnz	short loc_641F999E
mov	public_key_0, 2
jmp	short loc_641F99EF
align 4
mov	al, [ebx+esi]
cmp	al, 0FFh
jnz	short loc_641F9A00
inc	esi
cmp	edx, esi
ja	short loc_641F99E8
jmp	short loc_641F999E
align 4
lea	ebx, [eax+0Eh]
jmp	loc_641F9912
cmp	esi, 7
jbe	short loc_641F999E
test	al, al
jnz	short loc_641F999E
inc	esi
cmp	edx, esi
jbe	short loc_641F999E
mov	eax, edx
sub	eax, esi
mov	[esp+8BCh+var_890], eax
cmp	eax, 801h
ja	short loc_641F999E
mov	ecx, eax
lea	eax, [esp+8BCh+unpadded]
mov	[esp+8BCh+var_8A0], eax
lea	esi, [verify+esi]
mov	edi, eax
rep movsb
mov	esi, [esp+8BCh+hash]
test	esi, esi
jz	short loc_641F9A8D
lea	esi, [esp+8BCh+hashr]
mov	[esp+8BCh+return_hash],	esi 
mov	eax, [esp+8BCh+data_len]
mov	[esp+8BCh+ret],	eax 
mov	eax, [esp+8BCh+data]
mov	[esp+8BCh+len],	eax 
mov	eax, [esp+8BCh+hash]
mov	[esp+8BCh+mp], eax 
call	_silc_hash_make
mov	eax, [esp+8BCh+hash]
mov	[esp+8BCh+mp], eax 
call	_silc_hash_len
mov	[esp+8BCh+data_len], eax
mov	[esp+8BCh+data], esi
mov	edx, [esp+8BCh+verify_len]
mov	eax, [esp+8BCh+var_890]
cmp	[esp+8BCh+data_len], eax
jz	short loc_641F9ADC
xor	esi, esi
xor	eax, eax
mov	edi, verify
mov	ecx, edx
rep stosb
mov	cx, 801h
mov	verify,	[esp+8BCh+var_8A0]
rep stosb
mov	[esp+8BCh+mp], ebx 
call	_silc_free
mov	[esp+8BCh+mp], ebp 
call	_silc_mp_uninit
lea	eax, [esp+8BCh+mp_dst]
mov	[esp+8BCh+mp], eax 
call	_silc_mp_uninit
mov	eax, ret
add	esp, 8ACh
pop	verify
pop	ret
pop	edi
pop	ebp
retn
align 4
mov	eax, [esp+8BCh+data_len]
cmp	eax, eax
mov	esi, [esp+8BCh+data]
mov	edi, [esp+8BCh+var_8A0]
mov	ecx, eax
repe cmpsb
setz	al
mov	esi, eax
jmp	short loc_641F9A9C
align 4
public _silc_pkcs1_verify
push	ebp
push	edi
push	esi
push	ebx
sub	esp, 8FCh
mov	ebx, [esp+90Ch+public_key]
mov	esi, [ebx]
mov	[esp+90Ch+ihash], 0
call	_silc_asn1_alloc
mov	[esp+90Ch+asn1], eax
test	eax, eax
jz	loc_641F9C06
lea	ebp, [esp+90Ch+mp_tmp2]
mov	[esp+90Ch+mp], ebp 
call	_silc_mp_init
lea	eax, [esp+90Ch+mp_dst]
mov	[esp+90Ch+mp], eax 
call	_silc_mp_init
mov	[esp+90Ch+ret],	ebp 
mov	eax, [esp+90Ch+signature_len]
mov	[esp+90Ch+len],	eax 
mov	eax, [esp+90Ch+signature]
mov	[esp+90Ch+mp], eax 
call	_silc_mp_bin2mp
lea	edx, [esp+90Ch+mp_dst]
mov	[esp+90Ch+ret],	edx 
mov	[esp+90Ch+len],	ebp 
mov	[esp+90Ch+mp], public_key_0 
call	_silc_rsa_public_operation
lea	eax, [esp+90Ch+verify_len]
mov	[esp+90Ch+ret],	eax 
mov	eax, esi
add	eax, 7
js	loc_641F9C3C
sar	eax, 3
mov	[esp+90Ch+len],	eax 
lea	eax, [esp+90Ch+mp_dst]
mov	[esp+90Ch+mp], eax 
call	_silc_mp_mp2bin
mov	public_key_0, eax
mov	ecx, [esp+90Ch+verify_len]
test	eax, eax
jz	short err
cmp	byte ptr [verify], 0
jnz	short err
cmp	byte ptr [verify+1], 1
jz	short loc_641F9C18
			
xor	eax, eax
mov	edi, verify
rep stosb
mov	[esp+90Ch+mp], ebx 
call	_silc_free
mov	[esp+90Ch+mp], ebp 
call	_silc_mp_uninit
lea	edx, [esp+90Ch+mp_dst]
mov	[esp+90Ch+mp], edx 
call	_silc_mp_uninit
mov	eax, [esp+90Ch+ihash]
test	eax, eax
jz	short loc_641F9BFA
mov	[esp+90Ch+mp], eax 
call	_silc_hash_free
mov	eax, [esp+90Ch+asn1]
mov	[esp+90Ch+mp], eax 
call	_silc_asn1_free
xor	esi, esi
mov	eax, ret
add	esp, 8FCh
pop	verify
pop	ret
pop	verify
pop	ebp
retn
align 4
cmp	ecx, 2
jbe	short err
cmp	byte ptr [verify+2], 0FFh
jnz	short err
mov	esi, 2
jmp	short loc_641F9C33
align 4
mov	al, [ebx+esi]
cmp	al, 0FFh
jnz	short loc_641F9C44
inc	esi
cmp	ecx, esi
ja	short loc_641F9C2C
jmp	short err
align 4
lea	eax, [esi+0Eh]
jmp	loc_641F9B94
cmp	esi, 7
jbe	err
test	al, al
jnz	err
inc	esi
cmp	ecx, esi
jbe	err
mov	eax, ecx
sub	eax, esi
cmp	eax, 801h
ja	err
lea	edx, [esp+90Ch+unpadded]
mov	[esp+90Ch+var_8C0], edx
lea	esi, [verify+esi]
mov	edi, edx
mov	ecx, eax
rep movsb
mov	[esp+90Ch+di_0.head], edx
mov	[esp+90Ch+di_0.data], edx
mov	[esp+90Ch+di_0.end], edi
mov	[esp+90Ch+di_0.tail], edi
mov	eax, [esp+90Ch+hash]
test	eax, eax
jz	loc_641F9E50
lea	eax, [esp+90Ch+hashr]
mov	[esp+90Ch+var_8C4], eax
mov	[esp+90Ch+return_hash],	eax 
mov	eax, [esp+90Ch+data_len]
mov	[esp+90Ch+ret],	eax 
mov	eax, [esp+90Ch+data]
mov	[esp+90Ch+len],	eax 
mov	edx, [esp+90Ch+hash]
mov	[esp+90Ch+mp], edx 
call	_silc_hash_make
mov	eax, [esp+90Ch+hash]
mov	[esp+90Ch+mp], eax 
call	_silc_hash_len
mov	[esp+90Ch+var_8B0], eax
mov	edx, [esp+90Ch+hash]
mov	[esp+90Ch+mp], edx 
call	_silc_hash_get_oid
mov	edx, eax
mov	[esp+90Ch+oid],	eax
lea	esi, [esp+90Ch+ldi]
mov	ecx, 10h
xor	eax, eax
mov	edi, esi
rep stosb
mov	[esp+90Ch+var_8D4], 0
mov	[esp+90Ch+var_8D8], 0
mov	eax, [esp+90Ch+var_8B0]
mov	[esp+90Ch+var_8DC], eax
lea	eax, [esp+90Ch+hashr]
mov	[esp+90Ch+var_8E0], eax
mov	[esp+90Ch+var_8E4], 8004h
mov	[esp+90Ch+var_8E8], 0
mov	[esp+90Ch+var_8EC], 8005h
mov	[esp+90Ch+var_8F0], oid_0
mov	[esp+90Ch+var_8F4], 8006h
mov	[esp+90Ch+var_8F8], 8010h
mov	[esp+90Ch+var_8FC], 8010h
mov	[esp+90Ch+return_hash],	800h
mov	[esp+90Ch+ret],	7002h
mov	[esp+90Ch+len],	esi 
mov	oid_0, [esp+90Ch+asn1]
mov	[esp+90Ch+mp], edx 
call	_silc_asn1_encode
test	al, al
jz	loc_641F9E44
mov	esi, [esp+90Ch+di_0.data]
mov	ecx, [esp+90Ch+di_0.tail]
sub	ecx, esi
mov	edi, [esp+90Ch+ldi.data]
mov	eax, [esp+90Ch+ldi.tail]
sub	eax, edi
cmp	ecx, eax
jz	loc_641F9EEC
xor	esi, esi
mov	ecx, [esp+90Ch+verify_len]
xor	eax, eax
mov	edi, verify
rep stosb
mov	cx, 801h
mov	verify,	[esp+90Ch+var_8C0]
rep stosb
mov	[esp+90Ch+mp], ebx 
mov	[esp+90Ch+var_8B8], al
call	_silc_free
mov	[esp+90Ch+mp], ebp 
call	_silc_mp_uninit
lea	edx, [esp+90Ch+mp_dst]
mov	[esp+90Ch+mp], edx 
call	_silc_mp_uninit
mov	edi, [esp+90Ch+hash]
test	edi, edi
mov	al, [esp+90Ch+var_8B8]
jz	short loc_641F9E17
mov	ecx, 40h
mov	edi, [esp+90Ch+var_8C4]
rep stosb
mov	eax, [esp+90Ch+ihash]
test	eax, eax
jz	short loc_641F9E2A
mov	[esp+90Ch+mp], eax 
call	_silc_hash_free
mov	eax, [esp+90Ch+asn1]
mov	[esp+90Ch+mp], eax 
call	_silc_asn1_free
mov	eax, ret
add	esp, 8FCh
pop	verify
pop	ret
pop	edi
pop	ebp
retn
align 4
			
mov	ecx, [esp+90Ch+verify_len]
jmp	err
mov	[esp+90Ch+var_8E4], 0
mov	[esp+90Ch+var_8E8], 0
mov	[esp+90Ch+var_8EC], 0
lea	eax, [esp+90Ch+oid]
mov	[esp+90Ch+var_8F0], eax
mov	[esp+90Ch+var_8F4], 8006h
mov	[esp+90Ch+var_8F8], 8010h
mov	[esp+90Ch+var_8FC], 8010h
mov	[esp+90Ch+return_hash],	800h
mov	[esp+90Ch+ret],	7002h
lea	eax, [esp+90Ch+di_0]
mov	[esp+90Ch+len],	eax 
mov	eax, [esp+90Ch+asn1]
mov	[esp+90Ch+mp], eax 
call	_silc_asn1_decode
test	al, al
jz	short loc_641F9E44
lea	eax, [esp+90Ch+ihash]
mov	[esp+90Ch+len],	eax 
mov	eax, [esp+90Ch+oid]
mov	[esp+90Ch+mp], eax 
call	_silc_hash_alloc_by_oid
test	al, al
jz	loc_641F9E44
mov	edx, [esp+90Ch+ihash]
mov	[esp+90Ch+hash], edx
jmp	loc_641F9CA9
align 4
cmp	ecx, ecx
repe cmpsb
setz	al
mov	esi, eax
jmp	loc_641F9DC3
align 4
			
push	ebp
push	edi
push	esi
push	ebx
sub	esp, 4Ch
mov	ebp, rng
movzx	edx, byte ptr [rng+10h]
shl	edx, 18h
movzx	rng, byte ptr [rng+11h]
shl	eax, 10h
or	eax, edx
movzx	edx, byte ptr [rng+13h]
or	eax, edx
movzx	edx, byte ptr [rng+12h]
shl	edx, 8
or	eax, edx
mov	[esp+5Ch+iv], eax
movzx	edx, byte ptr [rng+14h]
shl	edx, 18h
movzx	eax, byte ptr [rng+15h]
shl	eax, 10h
or	eax, edx
movzx	edx, byte ptr [rng+17h]
or	eax, edx
movzx	edx, byte ptr [rng+16h]
shl	edx, 8
or	eax, edx
mov	[esp+5Ch+iv+4],	eax
movzx	edx, byte ptr [rng+18h]
shl	edx, 18h
movzx	eax, byte ptr [rng+19h]
shl	eax, 10h
or	eax, edx
movzx	edx, byte ptr [rng+1Bh]
or	eax, edx
movzx	edx, byte ptr [rng+1Ah]
shl	edx, 8
or	eax, edx
mov	[esp+5Ch+iv+8],	eax
movzx	edx, byte ptr [rng+1Ch]
shl	edx, 18h
movzx	eax, byte ptr [rng+1Dh]
shl	eax, 10h
or	eax, edx
movzx	edx, byte ptr [rng+1Fh]
or	eax, edx
movzx	edx, byte ptr [rng+1Eh]
shl	edx, 8
or	eax, edx
mov	[esp+5Ch+iv+0Ch], eax
movzx	edx, byte ptr [rng+20h]
shl	edx, 18h
movzx	eax, byte ptr [rng+21h]
shl	eax, 10h
or	eax, edx
movzx	edx, byte ptr [rng+23h]
or	eax, edx
movzx	edx, byte ptr [rng+22h]
shl	edx, 8
or	eax, edx
mov	[esp+5Ch+iv+10h], eax
lea	eax, [rng+3C0h]
mov	[esp+5Ch+var_40], eax
mov	ebx, rng
mov	esi, rng
mov	edi, eax
mov	[esp+5Ch+data],	edi 
lea	eax, [esp+5Ch+iv]
mov	[esp+5Ch+state], eax 
mov	eax, [rng+404h]
mov	[esp+5Ch+hash],	eax 
call	_silc_hash_transform
movzx	edx, byte ptr [esi]
shl	edx, 18h
movzx	eax, byte ptr [esi+1]
shl	eax, 10h
or	eax, edx
movzx	edx, byte ptr [esi+3]
or	eax, edx
movzx	edx, byte ptr [esi+2]
shl	edx, 8
or	eax, edx
xor	eax, [esp+5Ch+iv]
mov	[esp+5Ch+iv], eax
mov	edx, eax
shr	edx, 18h
mov	[esi], dl
mov	edx, eax
shr	edx, 10h
mov	[esi+1], dl
mov	edx, eax
shr	edx, 8
mov	[esi+2], dl
mov	[esi+3], al
movzx	edx, byte ptr [esi+4]
shl	edx, 18h
movzx	eax, byte ptr [esi+5]
shl	eax, 10h
or	eax, edx
movzx	edx, byte ptr [esi+7]
or	eax, edx
movzx	edx, byte ptr [esi+6]
shl	edx, 8
or	eax, edx
xor	eax, [esp+5Ch+iv+4]
mov	[esp+5Ch+iv+4],	eax
mov	edx, eax
shr	edx, 18h
mov	[esi+4], dl
mov	edx, eax
shr	edx, 10h
mov	[esi+5], dl
mov	edx, eax
shr	edx, 8
mov	[esi+6], dl
mov	[esi+7], al
movzx	edx, byte ptr [esi+8]
shl	edx, 18h
movzx	eax, byte ptr [esi+9]
shl	eax, 10h
or	eax, edx
movzx	edx, byte ptr [esi+0Bh]
or	eax, edx
movzx	edx, byte ptr [esi+0Ah]
shl	edx, 8
or	eax, edx
xor	eax, [esp+5Ch+iv+8]
mov	[esp+5Ch+iv+8],	eax
mov	edx, eax
shr	edx, 18h
mov	[esi+8], dl
mov	edx, eax
shr	edx, 10h
mov	[esi+9], dl
mov	edx, eax
shr	edx, 8
mov	[esi+0Ah], dl
mov	[esi+0Bh], al
movzx	edx, byte ptr [esi+0Ch]
shl	edx, 18h
movzx	eax, byte ptr [esi+0Dh]
shl	eax, 10h
or	eax, edx
movzx	edx, byte ptr [esi+0Fh]
or	eax, edx
movzx	edx, byte ptr [esi+0Eh]
shl	edx, 8
or	eax, edx
xor	eax, [esp+5Ch+iv+0Ch]
mov	[esp+5Ch+iv+0Ch], eax
mov	edx, eax
shr	edx, 18h
mov	[esi+0Ch], dl
mov	edx, eax
shr	edx, 10h
mov	[esi+0Dh], dl
mov	edx, eax
shr	edx, 8
mov	[esi+0Eh], dl
mov	[esi+0Fh], al
movzx	edx, byte ptr [esi+10h]
shl	edx, 18h
movzx	eax, byte ptr [esi+11h]
shl	eax, 10h
or	eax, edx
movzx	edx, byte ptr [esi+13h]
or	eax, edx
movzx	edx, byte ptr [esi+12h]
shl	edx, 8
or	eax, edx
xor	eax, [esp+5Ch+iv+10h]
mov	[esp+5Ch+iv+10h], eax
mov	edx, eax
shr	edx, 18h
mov	[esi+10h], dl
mov	edx, eax
shr	edx, 10h
mov	[esi+11h], dl
mov	edx, eax
shr	edx, 8
mov	[esi+12h], dl
mov	[esi+13h], al
add	esi, 14h
cmp	esi, edi
jnz	loc_641F9FC4
mov	eax, [rng+400h]
mov	edx, [eax+8]
mov	esi, [eax+4]
lea	ecx, [esi+1]
mov	[eax+4], ecx
mov	ecx, [edx]
test	ecx, ecx
jz	loc_641FA2EC
cmp	esi, ecx
jb	loc_641FA2EC
mov	ecx, [eax]
mov	[eax+4], ecx
			
mov	[rng+400h], edx
lea	esi, [rng+esi+0]
mov	ecx, 10h
mov	edi, [esp+5Ch+var_40]
rep movsd
mov	esi, [esp+5Ch+var_40]
nop
mov	[esp+5Ch+data],	esi 
lea	eax, [esp+5Ch+iv]
mov	[esp+5Ch+state], eax 
mov	eax, [rng+404h]
mov	[esp+5Ch+hash],	eax 
call	_silc_hash_transform
movzx	edx, byte ptr [ebx]
shl	edx, 18h
movzx	eax, byte ptr [ebx+1]
shl	eax, 10h
or	eax, edx
movzx	edx, byte ptr [ebx+3]
or	eax, edx
movzx	edx, byte ptr [ebx+2]
shl	edx, 8
or	eax, edx
xor	eax, [esp+5Ch+iv]
mov	[esp+5Ch+iv], eax
mov	edx, eax
shr	edx, 18h
mov	[ebx], dl
mov	edx, eax
shr	edx, 10h
mov	[ebx+1], dl
mov	edx, eax
shr	edx, 8
mov	[ebx+2], dl
mov	[ebx+3], al
movzx	edx, byte ptr [ebx+4]
shl	edx, 18h
movzx	eax, byte ptr [ebx+5]
shl	eax, 10h
or	eax, edx
movzx	edx, byte ptr [ebx+7]
or	eax, edx
movzx	edx, byte ptr [ebx+6]
shl	edx, 8
or	eax, edx
xor	eax, [esp+5Ch+iv+4]
mov	[esp+5Ch+iv+4],	eax
mov	edx, eax
shr	edx, 18h
mov	[ebx+4], dl
mov	edx, eax
shr	edx, 10h
mov	[ebx+5], dl
mov	edx, eax
shr	edx, 8
mov	[ebx+6], dl
mov	[ebx+7], al
movzx	edx, byte ptr [ebx+8]
shl	edx, 18h
movzx	eax, byte ptr [ebx+9]
shl	eax, 10h
or	eax, edx
movzx	edx, byte ptr [ebx+0Bh]
or	eax, edx
movzx	edx, byte ptr [ebx+0Ah]
shl	edx, 8
or	eax, edx
xor	eax, [esp+5Ch+iv+8]
mov	[esp+5Ch+iv+8],	eax
mov	edx, eax
shr	edx, 18h
mov	[ebx+8], dl
mov	edx, eax
shr	edx, 10h
mov	[ebx+9], dl
mov	edx, eax
shr	edx, 8
mov	[ebx+0Ah], dl
mov	[ebx+0Bh], al
movzx	edx, byte ptr [ebx+0Ch]
shl	edx, 18h
movzx	eax, byte ptr [ebx+0Dh]
shl	eax, 10h
or	eax, edx
movzx	edx, byte ptr [ebx+0Fh]
or	eax, edx
movzx	edx, byte ptr [ebx+0Eh]
shl	edx, 8
or	eax, edx
xor	eax, [esp+5Ch+iv+0Ch]
mov	[esp+5Ch+iv+0Ch], eax
mov	edx, eax
shr	edx, 18h
mov	[ebx+0Ch], dl
mov	edx, eax
shr	edx, 10h
mov	[ebx+0Dh], dl
mov	edx, eax
shr	edx, 8
mov	[ebx+0Eh], dl
mov	[ebx+0Fh], al
movzx	edx, byte ptr [ebx+10h]
shl	edx, 18h
movzx	eax, byte ptr [ebx+11h]
shl	eax, 10h
or	eax, edx
movzx	edx, byte ptr [ebx+13h]
or	eax, edx
movzx	edx, byte ptr [ebx+12h]
shl	edx, 8
or	eax, edx
xor	eax, [esp+5Ch+iv+10h]
mov	[esp+5Ch+iv+10h], eax
mov	edx, eax
shr	edx, 18h
mov	[ebx+10h], dl
mov	edx, eax
shr	edx, 10h
mov	[ebx+11h], dl
mov	edx, eax
shr	edx, 8
mov	[ebx+12h], dl
mov	[ebx+13h], al
add	ebx, 14h
cmp	ebx, esi
jnz	loc_641FA174
add	esp, 4Ch
pop	ebx
pop	esi
pop	edi
pop	rng
retn
align 4
			
cmp	esi, 3BFh
jbe	loc_641FA15A
mov	ecx, [eax]
mov	[eax+4], ecx
jmp	loc_641FA15A
align 4
			
push	ebp
push	edi
push	esi
push	ebx
sub	esp, 2Ch
mov	ebx, rng
mov	rng, [rng+400h]
mov	edx, [eax+8]
mov	esi, [eax+4]
lea	edi, [pos+1]
mov	[eax+4], edi
mov	ecx, [edx]
test	ecx, ecx
jz	loc_641FA3E8
cmp	pos, ecx
jb	loc_641FA3E8
mov	ecx, [eax]
mov	[eax+4], ecx
mov	[rng+400h], edx
call	_clock
movzx	ecx, byte ptr [rng]
shl	ecx, 18h
movzx	edx, byte ptr [rng+1]
shl	edx, 10h
or	edx, ecx
movzx	ecx, byte ptr [rng+3]
or	edx, ecx
movzx	ecx, byte ptr [rng+2]
shl	ecx, 8
or	edx, ecx
lea	edx, [eax+edx]
xor	eax, edx
mov	edx, eax
shr	edx, 18h
mov	[rng], dl
mov	edx, eax
shr	edx, 10h
mov	[rng+1], dl
mov	edx, eax
shr	edx, 8
mov	[rng+2], dl
mov	[rng+3], al
call	_clock
shl	eax, 4
lea	edx, [pos+2]
lea	ecx, [pos+3]
mov	[esp+3Ch+var_30], ecx
movzx	ecx, byte ptr [rng+ecx]
movzx	ebp, byte ptr [rng+pos]
shl	ebp, 18h
or	ebp, ecx
movzx	ecx, byte ptr [rng+edi]
shl	ecx, 10h
or	ebp, ecx
movzx	ecx, byte ptr [rng+edx]
shl	ecx, 8
or	ecx, ebp
add	ecx, eax
xor	ecx, eax
mov	ebp, ecx
shr	ebp, 18h
mov	eax, ebp
mov	[rng+pos], al
mov	pos, ecx
shr	esi, 10h
mov	eax, esi
mov	[rng+edi], al
mov	esi, ecx
shr	esi, 8
mov	eax, esi
mov	[rng+edx], al
mov	ebp, [esp+3Ch+var_30]
mov	[rng+ebp], cl
mov	eax, rng
add	esp, 2Ch
pop	rng
pop	esi
pop	edi
pop	ebp
jmp	_silc_rng_stir_pool
align 4
			
cmp	pos, 3BFh
ja	loc_641FA331
jmp	loc_641FA336
align 4
public _silc_rng_get_byte
push	esi
push	ebx
sub	esp, 4
mov	ebx, [esp+0Ch+rng]
mov	al, [ebx+408h]
inc	eax
mov	[ebx+408h], al
cmp	al, 7
ja	short loc_641FA460
			
mov	eax, [rng_0+400h]
jmp	short loc_641FA432
align 10h
cmp	edx, esi
jb	short loc_641FA444
mov	esi, [eax]
mov	[eax+4], esi
mov	al, [rng_0+edx]
test	al, al
jnz	short loc_641FA453
mov	byte, ecx
mov	ecx, [eax+8]
mov	edx, [eax+4]
lea	esi, [edx+1]
mov	[eax+4], esi
mov	esi, [ecx]
test	esi, esi
jnz	short loc_641FA420
cmp	edx, 3BFh
ja	short loc_641FA424
mov	al, [rng_0+edx]
test	al, al
jz	short loc_641FA430
mov	[rng_0+400h], ecx
pop	edx
pop	rng_0
pop	esi
retn
align 10h
mov	eax, rng_0	
call	_silc_rng_get_soft_noise
cmp	byte ptr [rng_0+408h], 13h
jbe	short loc_641FA416
mov	byte ptr [rng_0+408h], 0
jmp	short loc_641FA416
align 4
public _silc_rng_add_noise
push	ebp
push	edi
push	esi
push	ebx
sub	esp, 0Ch
mov	eax, [esp+1Ch+rng]
mov	ebp, [esp+1Ch+buffer]
mov	edi, [esp+1Ch+len]
mov	edx, [eax+400h]
mov	ecx, [edx+8]
mov	esi, [edx+4]
lea	ebx, [pos+1]
mov	[edx+4], ebx
mov	ebx, [ecx]
test	ebx, ebx
jz	short loc_641FA4F0
cmp	pos, ebx
jb	short loc_641FA4F0
mov	ebx, [edx]
mov	[edx+4], ebx
			
mov	[rng_0+400h], ecx
test	len_0, len_0
jz	short loc_641FA4E3
cmp	pos, 3BFh
ja	short loc_641FA4E3
lea	ecx, [rng_0+pos]
xor	edx, edx
jmp	short loc_641FA4D8
align 4
inc	ecx
lea	ebx, [i+pos]
cmp	ebx, 3BFh
ja	short loc_641FA4E3
mov	bl, [buffer_0+i+0]
xor	[ecx], bl
inc	i
cmp	len_0, i
ja	short loc_641FA4CC
			
add	esp, 0Ch
pop	ebx
pop	pos
pop	len_0
pop	buffer_0
jmp	_silc_rng_stir_pool
align 10h
			
cmp	pos, 3BFh
jbe	short loc_641FA4B0
mov	ebx, [edx]
mov	[edx+4], ebx
jmp	short loc_641FA4B0
align 10h
public _silc_rng_init
			
push	edi
push	esi
push	ebx
sub	esp, 10h
mov	ebx, [esp+1Ch+rng]
test	ebx, ebx
jz	loc_641FA619
mov	[esp+1Ch+size],	0Ch 
mov	[esp+1Ch+items], 1 
call	_silc_calloc
mov	[rng_0+400h], eax
mov	dword ptr [eax], 0
mov	dword ptr [eax+4], 8
mov	dword ptr [eax+8], 0
mov	esi, [rng_0+400h]
mov	[esp+1Ch+size],	0Ch 
mov	[esp+1Ch+items], 1 
call	_silc_calloc
mov	dword ptr [eax], 2D0h
mov	dword ptr [eax+4], 2D8h
mov	edx, [rng_0+400h]
mov	[eax+8], edx
mov	[rng_0+400h], eax
mov	[esp+1Ch+size],	0Ch 
mov	[esp+1Ch+items], 1 
call	_silc_calloc
mov	dword ptr [eax], 1E0h
mov	dword ptr [eax+4], 1E8h
mov	edx, [rng_0+400h]
mov	[eax+8], edx
mov	[rng_0+400h], eax
mov	[esp+1Ch+size],	0Ch 
mov	[esp+1Ch+items], 1 
call	_silc_calloc
mov	dword ptr [eax], 0F0h
mov	dword ptr [eax+4], 0F8h
mov	edx, [rng_0+400h]
mov	[eax+8], edx
mov	[first+8], eax
mov	[rng_0+400h], first
mov	ecx, 3C0h
xor	eax, eax
mov	edi, rng_0
rep stosb
mov	eax, rng_0	
call	_silc_rng_get_soft_noise
mov	eax, rng_0	
call	_silc_rng_get_soft_noise
mov	eax, [rng_0+40Ch]
mov	[esp+1Ch+items], eax 
call	_silc_free
mov	[esp+1Ch+items], offset	aDevUrandom 
call	_strdup
mov	[rng_0+40Ch], eax
add	esp, 10h
pop	rng_0
pop	first
pop	edi
retn
mov	[esp+1Ch+var_14], 0BFh
mov	[esp+1Ch+size],	offset aSilcrng_c 
mov	[esp+1Ch+items], offset	aRngNull 
call	__assert
align 4
public _silc_rng_free
			
push	edi
push	ebx
sub	esp, 14h
mov	ebx, [esp+1Ch+rng]
test	ebx, ebx
jz	short loc_641FA6C4
xor	eax, eax
mov	ecx, 3C0h
mov	edi, rng_0
rep stosb
mov	cl, 40h
rep stosb
mov	eax, [rng_0+404h]
mov	[esp+1Ch+hash],	eax 
call	_silc_hash_free
mov	eax, [rng_0+40Ch]
mov	[esp+1Ch+hash],	eax 
call	_silc_free
mov	eax, [rng_0+410h]
cmp	eax, 0FFFFFFFFh
jz	short loc_641FA683
mov	[esp+1Ch+hash],	eax 
call	_close
mov	edx, [rng_0+400h]
mov	eax, [edx+8]
cmp	edx, t
jnz	short loc_641FA696
jmp	short loc_641FA6AB
align 4
mov	t, n
mov	n, [t+8]
mov	[esp+1Ch+hash],	t 
call	_silc_free
mov	eax, [rng_0+400h]
cmp	t, n
jnz	short loc_641FA694
mov	[esp+1Ch+hash],	t 
call	_silc_free
mov	[esp+1Ch+rng], rng_0
add	esp, 14h
pop	rng_0
pop	n
jmp	_silc_free
align 4
add	esp, 14h
pop	rng_0
pop	edi
retn
align 4
public _silc_rng_global_uninit
sub	esp, 1Ch
mov	eax, ds:_global_rng
test	eax, eax
jz	short loc_641FA6EA
mov	[esp+1Ch+rng], eax 
call	_silc_rng_free
mov	ds:_global_rng,	0
mov	al, 1
add	esp, 1Ch
retn
public _silc_rng_alloc
			
push	edi
push	ebx
sub	esp, 14h
mov	[esp+1Ch+size],	414h 
mov	[esp+1Ch+items], 1 
call	_silc_calloc
mov	ebx, eax
mov	dword ptr [eax+410h], 0FFFFFFFFh
xor	eax, eax
mov	ecx, 3C0h
mov	edi, new
rep stosb
mov	cl, 40h
rep stosb
mov	dword ptr [new+400h], 0
lea	eax, [new+404h]
mov	[esp+1Ch+size],	eax 
mov	[esp+1Ch+items], offset	aSha1_1	
call	_silc_hash_alloc
test	al, al
jz	short loc_641FA764
mov	[esp+1Ch+items], offset	aDevRandom 
call	_strdup
mov	[new+40Ch], eax
mov	eax, new
add	esp, 14h
pop	new
pop	edi
retn
align 4
mov	[esp+1Ch+items], new 
call	_silc_free
mov	[esp+1Ch+items], offset	aCouldNotAllo_2	
call	_silc_format
mov	[esp+1Ch+size],	eax 
mov	[esp+1Ch+items], 3 
call	_silc_log_output
xor	new, new
mov	eax, new
add	esp, 14h
pop	new
pop	edi
retn
align 4
public _silc_rng_global_init
sub	esp, 1Ch
mov	eax, [esp+1Ch+rng]
test	eax, eax
jz	short loc_641FA7AC
mov	ds:_global_rng,	rng_0
mov	al, 1
add	esp, 1Ch
retn
align 4
call	_silc_rng_alloc
mov	ds:_global_rng,	eax
mov	[esp+1Ch+var_1C], eax 
call	_silc_rng_init
mov	al, 1
add	esp, 1Ch
retn
public _silc_rng_global_add_noise
push	ebp
push	edi
push	esi
push	ebx
sub	esp, 0Ch
mov	ebp, [esp+1Ch+buffer]
mov	edi, [esp+1Ch+len]
mov	eax, ds:_global_rng
test	eax, eax
jz	short loc_641FA84C
mov	edx, [eax+400h]
mov	ecx, [edx+8]
mov	esi, [edx+4]
lea	ebx, [esi+1]
mov	[edx+4], ebx
mov	ebx, [ecx]
test	ebx, ebx
jz	short loc_641FA83C
cmp	esi, ebx
jb	short loc_641FA83C
mov	ebx, [edx]
mov	[edx+4], ebx
			
mov	[eax+400h], ecx
test	len_0, len_0
jz	short loc_641FA82F
cmp	esi, 3BFh
ja	short loc_641FA82F
lea	ecx, [eax+esi]
xor	edx, edx
jmp	short loc_641FA824
align 4
inc	ecx
lea	ebx, [edx+esi]
cmp	ebx, 3BFh
ja	short loc_641FA82F
mov	bl, [buffer_0+edx+0]
xor	[ecx], bl
inc	edx
cmp	len_0, edx
ja	short loc_641FA818
			
add	esp, 0Ch
pop	ebx
pop	esi
pop	len_0
pop	buffer_0
jmp	_silc_rng_stir_pool
align 4
			
cmp	esi, 3BFh
jbe	short loc_641FA7FD
mov	ebx, [edx]
mov	[edx+4], ebx
jmp	short loc_641FA7FD
align 4
add	esp, 0Ch
pop	ebx
pop	esi
pop	len_0
pop	buffer_0
retn
public _silc_rng_get_rn_data
			
push	ebp
push	edi
push	esi
push	ebx
sub	esp, 2Ch
mov	ebx, [esp+3Ch+rng]
mov	[esp+3Ch+size],	1 
mov	eax, [esp+3Ch+len]
inc	eax
mov	[esp+3Ch+items], eax 
call	_silc_calloc
mov	[esp+3Ch+var_20], eax
mov	ecx, [esp+3Ch+len]
test	ecx, ecx
jz	short loc_641FA8F4
xor	edi, edi
xor	esi, esi
mov	al, [rng_0+408h]
inc	eax
mov	[rng_0+408h], al
cmp	al, 7
ja	short loc_641FA900
			
mov	edx, [rng_0+400h]
jmp	short loc_641FA8BE
align 10h
cmp	eax, edx
jb	short loc_641FA8D0
mov	edx, [rng_0+400h]
mov	ebp, [edx]
mov	[edx+4], ebp
mov	[rng_0+400h], ecx
mov	al, [rng_0+eax]
test	al, al
jnz	short loc_641FA8E4
mov	edx, ecx
mov	ecx, [edx+8]
mov	eax, [edx+4]
lea	ebp, [eax+1]
mov	[edx+4], ebp
mov	edx, [ecx]
test	edx, edx
jnz	short loc_641FA8A0
cmp	eax, 3BFh
ja	short loc_641FA8A4
mov	[rng_0+400h], ecx
mov	al, [rng_0+eax]
test	al, al
jz	short loc_641FA8BC
mov	edx, [esp+3Ch+var_20]
mov	[edx+edi], al
inc	i
mov	edi, i
cmp	[esp+3Ch+len], i
ja	short loc_641FA884
mov	eax, [esp+3Ch+var_20]
add	esp, 2Ch
pop	rng_0
pop	i
pop	edi
pop	ebp
retn
mov	eax, rng_0
call	_silc_rng_get_soft_noise
cmp	byte ptr [rng_0+408h], 13h
jbe	short loc_641FA895
mov	byte ptr [rng_0+408h], 0
jmp	loc_641FA895
public _silc_rng_get_rn_string
push	ebp
push	edi
push	esi
push	ebx
sub	esp, 2Ch
mov	ebx, [esp+3Ch+rng]
mov	[esp+3Ch+size],	1 
mov	edx, [esp+3Ch+len]
lea	eax, [edx+edx+1]
mov	[esp+3Ch+items], eax 
call	_silc_calloc
mov	[esp+3Ch+var_20], eax
mov	esi, [esp+3Ch+len]
test	esi, esi
jz	loc_641FA9DD
mov	edi, eax
xor	esi, esi
nop
mov	al, [rng_0+408h]
inc	eax
mov	[rng_0+408h], al
cmp	al, 7
ja	loc_641FA9EC
			
mov	edx, [rng_0+400h]
jmp	short loc_641FA992
align 4
cmp	eax, edx
jb	short loc_641FA9A4
mov	edx, [rng_0+400h]
mov	ebp, [edx]
mov	[edx+4], ebp
mov	[rng_0+400h], ecx
mov	al, [rng_0+eax]
test	al, al
jnz	short loc_641FA9B8
mov	edx, ecx
mov	ecx, [edx+8]
mov	eax, [edx+4]
lea	ebp, [eax+1]
mov	[edx+4], ebp
mov	edx, [ecx]
test	edx, edx
jnz	short loc_641FA974
cmp	eax, 3BFh
ja	short loc_641FA978
mov	[rng_0+400h], ecx
mov	al, [rng_0+eax]
test	al, al
jz	short loc_641FA990
movzx	eax, al
mov	[esp+3Ch+var_34], eax
mov	[esp+3Ch+size],	offset a02x_3 
mov	[esp+3Ch+items], edi 
call	_sprintf
inc	i
add	edi, 2
cmp	[esp+3Ch+len], i
ja	loc_641FA954
mov	eax, [esp+3Ch+var_20]
add	esp, 2Ch
pop	rng_0
pop	i
pop	edi
pop	ebp
retn
align 4
mov	eax, rng_0	
call	_silc_rng_get_soft_noise
cmp	byte ptr [rng_0+408h], 13h
jbe	loc_641FA969
mov	byte ptr [rng_0+408h], 0
jmp	loc_641FA969
public _silc_rng_get_rn32
push	ebp
push	edi
push	esi
push	ebx
sub	esp, 1Ch
mov	ebx, [esp+2Ch+rng]
mov	al, [ebx+408h]
inc	eax
mov	[ebx+408h], al
cmp	al, 7
ja	loc_641FABA0
			
mov	eax, [rng_0+400h]
jmp	short loc_641FAA46
cmp	edx, esi
jb	short loc_641FAA58
mov	esi, [eax]
mov	[eax+4], esi
mov	dl, [rng_0+edx]
test	dl, dl
jnz	short loc_641FAA67
mov	eax, ecx
mov	ecx, [eax+8]
mov	edx, [eax+4]
lea	esi, [edx+1]
mov	[eax+4], esi
mov	esi, [ecx]
test	esi, esi
jnz	short loc_641FAA34
cmp	edx, 3BFh
ja	short loc_641FAA38
mov	dl, [rng_0+edx]
test	dl, dl
jz	short loc_641FAA44
mov	[rng_0+400h], ecx
mov	al, [rng_0+408h]
inc	eax
mov	[rng_0+408h], al
cmp	al, 7
ja	loc_641FAC20
			
mov	eax, [rng_0+400h]
jmp	short loc_641FAA9E
align 4
cmp	ecx, edi
jb	short loc_641FAAB0
mov	edi, [eax]
mov	[eax+4], edi
mov	cl, [rng_0+ecx]
test	cl, cl
jnz	short loc_641FAABF
mov	eax, esi
mov	esi, [eax+8]
mov	ecx, [eax+4]
lea	edi, [ecx+1]
mov	[eax+4], edi
mov	edi, [esi]
test	edi, edi
jnz	short loc_641FAA8C
cmp	ecx, 3BFh
ja	short loc_641FAA90
mov	cl, [rng_0+ecx]
test	cl, cl
jz	short loc_641FAA9C
mov	[rng_0+400h], esi
mov	al, [rng_0+408h]
inc	eax
mov	[rng_0+408h], al
cmp	al, 7
ja	loc_641FABF0
			
mov	eax, [rng_0+400h]
jmp	short loc_641FAAF6
align 4
cmp	esi, ebp
jb	short loc_641FAB08
mov	ebp, [eax]
mov	[eax+4], ebp
mov	al, [rng_0+esi]
test	al, al
jnz	short loc_641FAB17
mov	eax, edi
mov	edi, [eax+8]
mov	esi, [eax+4]
lea	ebp, [esi+1]
mov	[eax+4], ebp
mov	ebp, [edi]
test	ebp, ebp
jnz	short loc_641FAAE4
cmp	esi, 3BFh
ja	short loc_641FAAE8
mov	al, [rng_0+esi]
test	al, al
jz	short loc_641FAAF4
mov	[esp+2Ch+var_1D], al
mov	[rng_0+400h], edi
mov	al, [rng_0+408h]
inc	eax
mov	[rng_0+408h], al
cmp	al, 7
ja	loc_641FABC0
			
mov	eax, [rng_0+400h]
jmp	short loc_641FAB52
align 10h
cmp	esi, ebp
jb	short loc_641FAB64
mov	ebp, [eax]
mov	[eax+4], ebp
mov	al, [rng_0+esi]
test	al, al
jnz	short loc_641FAB73
mov	eax, edi
mov	edi, [eax+8]
mov	esi, [eax+4]
lea	ebp, [esi+1]
mov	[eax+4], ebp
mov	ebp, [edi]
test	ebp, ebp
jnz	short loc_641FAB40
cmp	esi, 3BFh
ja	short loc_641FAB44
mov	al, [rng_0+esi]
test	al, al
jz	short loc_641FAB50
mov	[rng_0+400h], edi
movzx	ecx, cl
shl	ecx, 10h
shl	edx, 18h
or	edx, ecx
movzx	rng_0, [esp+2Ch+var_1D]
shl	ebx, 8
or	edx, ebx
movzx	ebx, al
mov	eax, edx
or	eax, ebx
add	esp, 1Ch
pop	ebx
pop	esi
pop	edi
pop	ebp
retn
align 10h
mov	eax, rng_0	
call	_silc_rng_get_soft_noise
cmp	byte ptr [rng_0+408h], 13h
jbe	loc_641FAA2C
mov	byte ptr [rng_0+408h], 0
jmp	loc_641FAA2C
mov	eax, rng_0	
mov	[esp+2Ch+var_28], dl
mov	[esp+2Ch+var_24], cl
call	_silc_rng_get_soft_noise
cmp	byte ptr [rng_0+408h], 13h
mov	dl, [esp+2Ch+var_28]
mov	cl, [esp+2Ch+var_24]
jbe	loc_641FAB36
mov	byte ptr [rng_0+408h], 0
jmp	loc_641FAB36
mov	eax, rng_0	
mov	[esp+2Ch+var_28], dl
mov	[esp+2Ch+var_24], cl
call	_silc_rng_get_soft_noise
cmp	byte ptr [rng_0+408h], 13h
mov	dl, [esp+2Ch+var_28]
mov	cl, [esp+2Ch+var_24]
jbe	loc_641FAADA
mov	byte ptr [rng_0+408h], 0
jmp	loc_641FAADA
mov	eax, rng_0	
mov	[esp+2Ch+var_28], dl
call	_silc_rng_get_soft_noise
cmp	byte ptr [rng_0+408h], 13h
mov	dl, [esp+2Ch+var_28]
jbe	loc_641FAA82
mov	byte ptr [rng_0+408h], 0
jmp	loc_641FAA82
public _silc_rng_get_rn16
			
push	edi
push	esi
push	ebx
sub	esp, 10h
mov	ebx, [esp+1Ch+rng]
mov	al, [ebx+408h]
inc	eax
mov	[ebx+408h], al
cmp	al, 7
ja	loc_641FAD0C
			
mov	eax, [rng_0+400h]
jmp	short loc_641FAC82
align 10h
cmp	edx, esi
jb	short loc_641FAC94
mov	esi, [eax]
mov	[eax+4], esi
mov	dl, [rng_0+edx]
test	dl, dl
jnz	short loc_641FACA3
mov	eax, ecx
mov	ecx, [eax+8]
mov	edx, [eax+4]
lea	esi, [edx+1]
mov	[eax+4], esi
mov	esi, [ecx]
test	esi, esi
jnz	short loc_641FAC70
cmp	edx, 3BFh
ja	short loc_641FAC74
mov	dl, [rng_0+edx]
test	dl, dl
jz	short loc_641FAC80
mov	[rng_0+400h], ecx
mov	al, [rng_0+408h]
inc	eax
mov	[rng_0+408h], al
cmp	al, 7
ja	short loc_641FAD2C
			
mov	eax, [rng_0+400h]
jmp	short loc_641FACD6
align 4
cmp	ecx, edi
jb	short loc_641FACE8
mov	edi, [eax]
mov	[eax+4], edi
mov	al, [rng_0+ecx]
test	al, al
jnz	short loc_641FACF7
mov	eax, esi
mov	esi, [eax+8]
mov	ecx, [eax+4]
lea	edi, [ecx+1]
mov	[eax+4], edi
mov	edi, [esi]
test	edi, edi
jnz	short loc_641FACC4
cmp	ecx, 3BFh
ja	short loc_641FACC8
mov	al, [rng_0+ecx]
test	al, al
jz	short loc_641FACD4
mov	[rng_0+400h], esi
movzx	eax, al
shl	edx, 8
or	eax, edx
add	esp, 10h
pop	rng_0
pop	esi
pop	edi
retn
mov	eax, rng_0
call	_silc_rng_get_soft_noise
cmp	byte ptr [rng_0+408h], 13h
jbe	loc_641FAC67
mov	byte ptr [rng_0+408h], 0
jmp	loc_641FAC67
mov	eax, rng_0	
mov	[esp+1Ch+var_10], dl
call	_silc_rng_get_soft_noise
cmp	byte ptr [rng_0+408h], 13h
mov	dl, [esp+1Ch+var_10]
jbe	loc_641FACBA
mov	byte ptr [rng_0+408h], 0
jmp	loc_641FACBA
public _silc_rng_get_byte_fast
			
push	esi
push	ebx
sub	esp, 4
mov	ebx, [esp+0Ch+rng]
mov	al, [ebx+408h]
inc	eax
mov	[ebx+408h], al
cmp	al, 7
ja	short loc_641FADB8
			
mov	eax, [rng_0+400h]
jmp	short loc_641FAD8A
align 4
cmp	edx, esi
jb	short loc_641FAD9C
mov	esi, [eax]
mov	[eax+4], esi
mov	al, [rng_0+edx]
test	al, al
jnz	short loc_641FADAB
mov	eax, ecx
mov	ecx, [eax+8]
mov	edx, [eax+4]
lea	esi, [edx+1]
mov	[eax+4], esi
mov	esi, [ecx]
test	esi, esi
jnz	short loc_641FAD78
cmp	edx, 3BFh
ja	short loc_641FAD7C
mov	al, [rng_0+edx]
test	al, al
jz	short loc_641FAD88
mov	[rng_0+400h], ecx
pop	edx
pop	rng_0
pop	esi
retn
align 4
mov	eax, rng_0	
call	_silc_rng_get_soft_noise
cmp	byte ptr [rng_0+408h], 13h
jbe	short loc_641FAD6E
mov	byte ptr [rng_0+408h], 0
jmp	short loc_641FAD6E
align 4
public _silc_rng_global_get_byte_fast
			
			
push	esi
push	ebx
sub	esp, 4
mov	ebx, ds:_global_rng
test	ebx, ebx
jz	short loc_641FAE58
mov	al, [ebx+408h]
inc	eax
mov	[ebx+408h], al
cmp	al, 7
ja	short loc_641FAE3C
			
mov	eax, [ebx+400h]
jmp	short loc_641FAE0E
cmp	edx, esi
jb	short loc_641FAE20
mov	esi, [eax]
mov	[eax+4], esi
mov	al, [ebx+edx]
test	al, al
jnz	short loc_641FAE2F
mov	eax, ecx
mov	ecx, [eax+8]
mov	edx, [eax+4]
lea	esi, [edx+1]
mov	[eax+4], esi
mov	esi, [ecx]
test	esi, esi
jnz	short loc_641FADFC
cmp	edx, 3BFh
ja	short loc_641FAE00
mov	al, [ebx+edx]
test	al, al
jz	short loc_641FAE0C
mov	[ebx+400h], ecx
pop	ecx
pop	ebx
pop	esi
retn
align 4
mov	eax, ebx	
call	_silc_rng_get_soft_noise
cmp	byte ptr [ebx+408h], 13h
jbe	short loc_641FADF4
mov	byte ptr [ebx+408h], 0
jmp	short loc_641FADF4
align 4
xor	eax, eax
pop	ecx
pop	ebx
pop	esi
retn
align 10h
public _silc_rng_global_get_byte
push	esi
push	ebx
sub	esp, 4
mov	ebx, ds:_global_rng
test	ebx, ebx
jz	short loc_641FAEE4
mov	al, [ebx+408h]
inc	eax
mov	[ebx+408h], al
cmp	al, 7
ja	short loc_641FAEC8
			
mov	eax, [ebx+400h]
jmp	short loc_641FAE9A
cmp	edx, esi
jb	short loc_641FAEAC
mov	esi, [eax]
mov	[eax+4], esi
mov	al, [ebx+edx]
test	al, al
jnz	short loc_641FAEBB
mov	eax, ecx
mov	ecx, [eax+8]
mov	edx, [eax+4]
lea	esi, [edx+1]
mov	[eax+4], esi
mov	esi, [ecx]
test	esi, esi
jnz	short loc_641FAE88
cmp	edx, 3BFh
ja	short loc_641FAE8C
mov	al, [ebx+edx]
test	al, al
jz	short loc_641FAE98
mov	[ebx+400h], ecx
pop	ebx
pop	ebx
pop	esi
retn
align 4
mov	eax, ebx	
call	_silc_rng_get_soft_noise
cmp	byte ptr [ebx+408h], 13h
jbe	short loc_641FAE80
mov	byte ptr [ebx+408h], 0
jmp	short loc_641FAE80
align 4
xor	eax, eax
pop	ebx
pop	ebx
pop	esi
retn
align 4
public _silc_rng_global_get_rn_data
			
push	ebp
push	edi
push	esi
push	ebx
sub	esp, 2Ch
mov	ebx, ds:_global_rng
test	ebx, ebx
jz	loc_641FAFC0
mov	[esp+3Ch+size],	1 
mov	eax, [esp+3Ch+len]
inc	eax
mov	[esp+3Ch+items], eax 
call	_silc_calloc
mov	[esp+3Ch+var_20], eax
mov	esi, [esp+3Ch+len]
test	esi, esi
jz	short loc_641FAF98
xor	edi, edi
xor	esi, esi
xchg	ax, ax
mov	al, [ebx+408h]
inc	eax
mov	[ebx+408h], al
cmp	al, 7
ja	short loc_641FAFA4
			
mov	edx, [ebx+400h]
jmp	short loc_641FAF62
align 4
cmp	eax, edx
jb	short loc_641FAF74
mov	edx, [ebx+400h]
mov	ebp, [edx]
mov	[edx+4], ebp
mov	[ebx+400h], ecx
mov	al, [ebx+eax]
test	al, al
jnz	short loc_641FAF88
mov	edx, ecx
mov	ecx, [edx+8]
mov	eax, [edx+4]
lea	ebp, [eax+1]
mov	[edx+4], ebp
mov	edx, [ecx]
test	edx, edx
jnz	short loc_641FAF44
cmp	eax, 3BFh
ja	short loc_641FAF48
mov	[ebx+400h], ecx
mov	al, [ebx+eax]
test	al, al
jz	short loc_641FAF60
mov	edx, [esp+3Ch+var_20]
mov	[edx+edi], al
inc	esi
mov	edi, esi
cmp	[esp+3Ch+len], esi
ja	short loc_641FAF28
mov	eax, [esp+3Ch+var_20]
add	esp, 2Ch
pop	ebx
pop	esi
pop	edi
pop	ebp
retn
mov	eax, ebx	
call	_silc_rng_get_soft_noise
cmp	byte ptr [ebx+408h], 13h
jbe	short loc_641FAF39
mov	byte ptr [ebx+408h], 0
jmp	loc_641FAF39
mov	[esp+3Ch+var_20], 0
mov	eax, [esp+3Ch+var_20]
add	esp, 2Ch
pop	ebx
pop	esi
pop	edi
pop	ebp
retn
public _silc_rng_global_get_rn_string
push	ebp
push	edi
push	esi
push	ebx
sub	esp, 2Ch
mov	ebx, ds:_global_rng
test	ebx, ebx
jz	loc_641FB0D0
mov	[esp+3Ch+size],	1 
mov	edx, [esp+3Ch+len]
lea	eax, [edx+edx+1]
mov	[esp+3Ch+items], eax 
call	_silc_calloc
mov	[esp+3Ch+var_20], eax
mov	edi, [esp+3Ch+len]
test	edi, edi
jz	loc_641FB0A1
mov	edi, eax
xor	esi, esi
lea	esi, [esi+0]
mov	al, [ebx+408h]
inc	eax
mov	[ebx+408h], al
cmp	al, 7
ja	loc_641FB0B0
			
mov	edx, [ebx+400h]
jmp	short loc_641FB056
align 4
cmp	eax, edx
jb	short loc_641FB068
mov	edx, [ebx+400h]
mov	ebp, [edx]
mov	[edx+4], ebp
mov	[ebx+400h], ecx
mov	al, [ebx+eax]
test	al, al
jnz	short loc_641FB07C
mov	edx, ecx
mov	ecx, [edx+8]
mov	eax, [edx+4]
lea	ebp, [eax+1]
mov	[edx+4], ebp
mov	edx, [ecx]
test	edx, edx
jnz	short loc_641FB038
cmp	eax, 3BFh
ja	short loc_641FB03C
mov	[ebx+400h], ecx
mov	al, [ebx+eax]
test	al, al
jz	short loc_641FB054
movzx	eax, al
mov	[esp+3Ch+var_34], eax
mov	[esp+3Ch+size],	offset a02x_3 
mov	[esp+3Ch+items], edi 
call	_sprintf
inc	esi
add	edi, 2
cmp	[esp+3Ch+len], esi
ja	loc_641FB018
mov	eax, [esp+3Ch+var_20]
add	esp, 2Ch
pop	ebx
pop	esi
pop	edi
pop	ebp
retn
align 10h
mov	eax, ebx	
call	_silc_rng_get_soft_noise
cmp	byte ptr [ebx+408h], 13h
jbe	loc_641FB02D
mov	byte ptr [ebx+408h], 0
jmp	loc_641FB02D
mov	[esp+3Ch+var_20], 0
mov	eax, [esp+3Ch+var_20]
add	esp, 2Ch
pop	ebx
pop	esi
pop	edi
pop	ebp
retn
public _silc_rng_global_get_rn16
push	edi
push	esi
push	ebx
sub	esp, 10h
mov	ebx, ds:_global_rng
test	ebx, ebx
jz	loc_641FB1FC
mov	al, [ebx+408h]
inc	eax
mov	[ebx+408h], al
cmp	al, 7
ja	loc_641FB1B4
			
mov	eax, [ebx+400h]
jmp	short loc_641FB12A
align 4
cmp	edx, esi
jb	short loc_641FB13C
mov	esi, [eax]
mov	[eax+4], esi
mov	dl, [ebx+edx]
test	dl, dl
jnz	short loc_641FB14B
mov	eax, ecx
mov	ecx, [eax+8]
mov	edx, [eax+4]
lea	esi, [edx+1]
mov	[eax+4], esi
mov	esi, [ecx]
test	esi, esi
jnz	short loc_641FB118
cmp	edx, 3BFh
ja	short loc_641FB11C
mov	dl, [ebx+edx]
test	dl, dl
jz	short loc_641FB128
mov	[ebx+400h], ecx
mov	al, [ebx+408h]
inc	eax
mov	[ebx+408h], al
cmp	al, 7
ja	short loc_641FB1D4
			
mov	eax, [ebx+400h]
jmp	short loc_641FB17E
align 4
cmp	ecx, edi
jb	short loc_641FB190
mov	edi, [eax]
mov	[eax+4], edi
mov	al, [ebx+ecx]
test	al, al
jnz	short loc_641FB19F
mov	eax, esi
mov	esi, [eax+8]
mov	ecx, [eax+4]
lea	edi, [ecx+1]
mov	[eax+4], edi
mov	edi, [esi]
test	edi, edi
jnz	short loc_641FB16C
cmp	ecx, 3BFh
ja	short loc_641FB170
mov	al, [ebx+ecx]
test	al, al
jz	short loc_641FB17C
mov	[ebx+400h], esi
movzx	eax, al
shl	edx, 8
or	eax, edx
add	esp, 10h
pop	ebx
pop	esi
pop	edi
retn
mov	eax, ebx	
call	_silc_rng_get_soft_noise
cmp	byte ptr [ebx+408h], 13h
jbe	loc_641FB10D
mov	byte ptr [ebx+408h], 0
jmp	loc_641FB10D
mov	eax, ebx	
mov	[esp+1Ch+var_10], dl
call	_silc_rng_get_soft_noise
cmp	byte ptr [ebx+408h], 13h
mov	dl, [esp+1Ch+var_10]
jbe	loc_641FB162
mov	byte ptr [ebx+408h], 0
jmp	loc_641FB162
xor	eax, eax
add	esp, 10h
pop	ebx
pop	esi
pop	edi
retn
align 4
public _silc_rng_global_get_rn32
push	ebp
push	edi
push	esi
push	ebx
sub	esp, 1Ch
mov	ebx, ds:_global_rng
test	ebx, ebx
jz	loc_641FB450
mov	al, [ebx+408h]
inc	eax
mov	[ebx+408h], al
cmp	al, 7
ja	loc_641FB3A8
			
mov	eax, [ebx+400h]
jmp	short loc_641FB24E
align 4
cmp	edx, esi
jb	short loc_641FB260
mov	esi, [eax]
mov	[eax+4], esi
mov	dl, [ebx+edx]
test	dl, dl
jnz	short loc_641FB26F
mov	eax, ecx
mov	ecx, [eax+8]
mov	edx, [eax+4]
lea	esi, [edx+1]
mov	[eax+4], esi
mov	esi, [ecx]
test	esi, esi
jnz	short loc_641FB23C
cmp	edx, 3BFh
ja	short loc_641FB240
mov	dl, [ebx+edx]
test	dl, dl
jz	short loc_641FB24C
mov	[ebx+400h], ecx
mov	al, [ebx+408h]
inc	eax
mov	[ebx+408h], al
cmp	al, 7
ja	loc_641FB428
			
mov	eax, [ebx+400h]
jmp	short loc_641FB2A6
align 4
cmp	ecx, edi
jb	short loc_641FB2B8
mov	edi, [eax]
mov	[eax+4], edi
mov	cl, [ebx+ecx]
test	cl, cl
jnz	short loc_641FB2C7
mov	eax, esi
mov	esi, [eax+8]
mov	ecx, [eax+4]
lea	edi, [ecx+1]
mov	[eax+4], edi
mov	edi, [esi]
test	edi, edi
jnz	short loc_641FB294
cmp	ecx, 3BFh
ja	short loc_641FB298
mov	cl, [ebx+ecx]
test	cl, cl
jz	short loc_641FB2A4
mov	[ebx+400h], esi
mov	al, [ebx+408h]
inc	eax
mov	[ebx+408h], al
cmp	al, 7
ja	loc_641FB3F8
			
mov	eax, [ebx+400h]
jmp	short loc_641FB2FE
align 4
cmp	esi, ebp
jb	short loc_641FB310
mov	ebp, [eax]
mov	[eax+4], ebp
mov	al, [ebx+esi]
test	al, al
jnz	short loc_641FB31F
mov	eax, edi
mov	edi, [eax+8]
mov	esi, [eax+4]
lea	ebp, [esi+1]
mov	[eax+4], ebp
mov	ebp, [edi]
test	ebp, ebp
jnz	short loc_641FB2EC
cmp	esi, 3BFh
ja	short loc_641FB2F0
mov	al, [ebx+esi]
test	al, al
jz	short loc_641FB2FC
mov	[esp+2Ch+var_1D], al
mov	[ebx+400h], edi
mov	al, [ebx+408h]
inc	eax
mov	[ebx+408h], al
cmp	al, 7
ja	loc_641FB3C8
			
mov	eax, [ebx+400h]
jmp	short loc_641FB35A
align 4
cmp	esi, ebp
jb	short loc_641FB36C
mov	ebp, [eax]
mov	[eax+4], ebp
mov	al, [ebx+esi]
test	al, al
jnz	short loc_641FB37B
mov	eax, edi
mov	edi, [eax+8]
mov	esi, [eax+4]
lea	ebp, [esi+1]
mov	[eax+4], ebp
mov	ebp, [edi]
test	ebp, ebp
jnz	short loc_641FB348
cmp	esi, 3BFh
ja	short loc_641FB34C
mov	al, [ebx+esi]
test	al, al
jz	short loc_641FB358
mov	[ebx+400h], edi
movzx	ecx, cl
shl	ecx, 10h
shl	edx, 18h
or	edx, ecx
movzx	ebx, [esp+2Ch+var_1D]
shl	ebx, 8
or	edx, ebx
movzx	ebx, al
mov	eax, edx
or	eax, ebx
add	esp, 1Ch
pop	ebx
pop	esi
pop	edi
pop	ebp
retn
align 4
mov	eax, ebx	
call	_silc_rng_get_soft_noise
cmp	byte ptr [ebx+408h], 13h
jbe	loc_641FB232
mov	byte ptr [ebx+408h], 0
jmp	loc_641FB232
mov	eax, ebx	
mov	[esp+2Ch+var_28], dl
mov	[esp+2Ch+var_24], cl
call	_silc_rng_get_soft_noise
cmp	byte ptr [ebx+408h], 13h
mov	dl, [esp+2Ch+var_28]
mov	cl, [esp+2Ch+var_24]
jbe	loc_641FB33E
mov	byte ptr [ebx+408h], 0
jmp	loc_641FB33E
mov	eax, ebx	
mov	[esp+2Ch+var_28], dl
mov	[esp+2Ch+var_24], cl
call	_silc_rng_get_soft_noise
cmp	byte ptr [ebx+408h], 13h
mov	dl, [esp+2Ch+var_28]
mov	cl, [esp+2Ch+var_24]
jbe	loc_641FB2E2
mov	byte ptr [ebx+408h], 0
jmp	loc_641FB2E2
mov	eax, ebx	
mov	[esp+2Ch+var_28], dl
call	_silc_rng_get_soft_noise
cmp	byte ptr [ebx+408h], 13h
mov	dl, [esp+2Ch+var_28]
jbe	loc_641FB28A
mov	byte ptr [ebx+408h], 0
jmp	loc_641FB28A
xor	eax, eax
add	esp, 1Ch
pop	ebx
pop	esi
pop	edi
pop	ebp
retn
align 4
public _silc_twofish_cbc_set_iv
retn
align 10h
public _silc_twofish_cbc_context_len
mov	eax, 0B4h
retn
align 4
public _qp
push	esi
push	ebx
mov	al, [esp+8+x]
mov	bl, al
shr	bl, 4
and	eax, 0Fh
mov	cl, al
xor	ecx, a0
movzx	ecx, cl
mov	edx, [esp+8+n]
shl	edx, 4
mov	cl, _qt0[ecx+edx]
movzx	a0, bl
movzx	esi, al
mov	al, _ashx[a0]
xor	al, _ror4[b0]
movzx	eax, al
mov	bl, _qt1[edx+eax]
movzx	eax, bl
movzx	b0, cl
mov	al, _ror4[b2]
xor	al, _ashx[a2]
movzx	eax, al
movzx	eax, _qt3[edx+eax]
shl	eax, 4
xor	ecx, ebx
movzx	ecx, cl
or	al, _qt2[edx+ecx]
pop	b2
pop	a2
retn
align 4
public _h_fun
			
push	ebp
push	edi
push	esi
push	ebx
sub	esp, 2Ch
mov	ebx, [esp+3Ch+x]
mov	esi, [esp+3Ch+key]
movzx	ecx, bl
movzx	edx, bh
mov	eax, ebx
shr	eax, 10h
and	eax, 0FFh
shr	ebx, 18h
mov	[esp+3Ch+var_38], x_0
mov	x_0, [esp+3Ch+ctx]
mov	ebx, [ebx]
cmp	ebx, 3
jz	loc_641FBA1A
cmp	ebx, 4
jz	loc_641FB7F4
cmp	ebx, 2
jz	loc_641FBC38
mov	bl, cl
shr	bl, 4
mov	esi, ebx
and	ecx, 0Fh
mov	bl, cl
xor	ebx, esi
movzx	ebx, bl
mov	bl, (_qt0+10h)[ebx]
and	esi, 0FFh
movzx	edi, cl
mov	cl, _ashx[esi]
xor	cl, _ror4[edi]
movzx	ecx, cl
movzx	ebp, (_qt1+10h)[ecx]
mov	ecx, ebp
movzx	esi, cl
movzx	edi, bl
movzx	esi, _ror4[esi]
mov	cl, _ashx[edi]
xor	esi, ecx
and	esi, 0FFh
movzx	esi, (_qt3+10h)[esi]
shl	esi, 4
xor	ebx, ebp
movzx	ebx, bl
mov	cl, (_qt2+10h)[ebx]
or	ecx, esi
movzx	esi, cl
mov	bl, dl
shr	bl, 4
and	edx, 0Fh
mov	cl, dl
xor	ecx, ebx
movzx	ecx, cl
mov	cl, _qt0[ecx]
movzx	ebx, bl
movzx	edi, dl
mov	dl, _ashx[ebx]
xor	dl, _ror4[edi]
movzx	edx, dl
mov	bl, _qt1[edx]
movzx	edx, bl
movzx	edi, cl
mov	dl, _ror4[edx]
xor	dl, _ashx[edi]
movzx	edx, dl
movzx	edx, _qt3[edx]
shl	edx, 4
xor	ecx, ebx
movzx	ecx, cl
or	dl, _qt2[ecx]
movzx	edx, dl
mov	cl, al
shr	cl, 4
and	eax, 0Fh
mov	bl, al
xor	ebx, ecx
movzx	ebx, bl
mov	bl, (_qt0+10h)[ebx]
movzx	ecx, cl
movzx	edi, al
mov	al, _ashx[ecx]
xor	al, _ror4[edi]
movzx	eax, al
mov	al, (_qt1+10h)[eax]
movzx	ecx, al
movzx	edi, bl
mov	cl, _ror4[ecx]
xor	cl, _ashx[edi]
movzx	ecx, cl
movzx	ecx, (_qt3+10h)[ecx]
shl	ecx, 4
xor	ebx, eax
movzx	ebx, bl
or	cl, (_qt2+10h)[ebx]
movzx	ecx, cl
mov	bl, byte ptr [esp+3Ch+var_38]
mov	al, bl
shr	al, 4
and	ebx, 0Fh
mov	edi, ebx
xor	ebx, eax
movzx	ebx, bl
mov	bl, _qt0[ebx]
movzx	eax, al
and	edi, 0FFh
mov	al, _ashx[eax]
xor	al, _ror4[edi]
movzx	eax, al
mov	al, _qt1[eax]
mov	byte ptr [esp+3Ch+var_38], al
movzx	edi, al
movzx	ebp, bl
movzx	edi, _ror4[edi]
mov	al, ss:_ashx[ebp]
xor	edi, eax
and	edi, 0FFh
movzx	edi, _qt3[edi]
shl	edi, 4
xor	ebx, [esp+3Ch+var_38]
movzx	ebx, bl
mov	al, _qt2[ebx]
or	eax, edi
movzx	eax, al
mov	ebx, b0
shr	ebx, 2
mov	[esp+3Ch+var_14], ebx
mov	ebx, b0
and	ebx, 3
mov	edi, b1
shr	edi, 2
mov	[esp+3Ch+var_18], edi
mov	ebp, b1
and	ebp, 3
mov	[esp+3Ch+var_1C], ebp
mov	edi, b2
shr	edi, 2
mov	[esp+3Ch+var_20], edi
mov	edi, b2
and	edi, 3
mov	ebp, b3
shr	ebp, 2
mov	[esp+3Ch+var_24], ebp
mov	ebp, b3
and	ebp, 3
mov	[esp+3Ch+var_28], ebp
mov	ebp, [esp+3Ch+var_24]
xor	ebp, b3
mov	[esp+3Ch+var_2C], ebp
mov	ebp, [esp+3Ch+var_28]
movzx	ebp, ss:_tab_5b[ebp]
xor	ebp, [esp+3Ch+var_2C]
mov	[esp+3Ch+var_2C], ebp
mov	ebp, b0
shr	ebp, 1
xor	ebp, [esp+3Ch+var_14]
xor	ebp, b0
mov	[esp+3Ch+var_34], ebp
movzx	ebp, _tab_ef[ebx]
xor	ebp, [esp+3Ch+var_34]
mov	[esp+3Ch+var_34], ebp
mov	ebp, b1
shr	ebp, 1
xor	ebp, [esp+3Ch+var_18]
xor	ebp, b1
mov	[esp+3Ch+var_38], ebp
mov	ebp, [esp+3Ch+var_1C]
movzx	ebp, ss:_tab_ef[ebp]
xor	ebp, [esp+3Ch+var_38]
mov	[esp+3Ch+var_38], ebp
mov	ebp, b2
shr	ebp, 1
xor	ebp, [esp+3Ch+var_20]
xor	ebp, b2
mov	[esp+3Ch+var_30], ebp
movzx	ebp, _tab_ef[edi]
xor	ebp, [esp+3Ch+var_30]
mov	[esp+3Ch+var_3C], ebp
mov	ebp, b2
xor	ebp, b0
xor	ebp, [esp+3Ch+var_20]
movzx	edi, _tab_5b[edi]
xor	edi, ebp
xor	edi, [esp+3Ch+var_2C]
xor	b0, b3
xor	esi, [esp+3Ch+var_14]
movzx	ebx, _tab_5b[ebx]
xor	esi, ebx
xor	esi, [esp+3Ch+var_38]
xor	b2, b1
xor	ecx, b3
xor	ecx, [esp+3Ch+var_18]
xor	ecx, [esp+3Ch+var_24]
shr	b3, 1
xor	eax, ecx
mov	ebx, [esp+3Ch+var_1C]
movzx	ecx, _tab_5b[ebx]
xor	eax, ecx
mov	ebp, [esp+3Ch+var_28]
movzx	ecx, ss:_tab_ef[ebp]
xor	ecx, eax
mov	eax, [esp+3Ch+var_2C]
xor	eax, [esp+3Ch+var_34]
xor	b1, eax
xor	esi, [esp+3Ch+var_3C]
shl	esi, 8
xor	edi, [esp+3Ch+var_38]
mov	eax, esi
or	eax, edi
xor	edx, [esp+3Ch+var_3C]
shl	edx, 18h
or	eax, edx
xor	ecx, [esp+3Ch+var_34]
shl	ecx, 10h
or	eax, ecx
add	esp, 2Ch
pop	ebx
pop	esi
pop	edi
pop	ebp
retn
align 4
mov	bl, cl
shr	bl, 4
mov	edi, ebx
and	ecx, 0Fh
mov	bl, cl
xor	ebx, edi
movzx	ebx, bl
mov	bl, (_qt0+10h)[ebx]
and	edi, 0FFh
movzx	ebp, cl
mov	cl, _ashx[edi]
xor	cl, ss:_ror4[ebp]
movzx	ecx, cl
mov	cl, (_qt1+10h)[ecx]
mov	byte ptr [esp+3Ch+var_34], cl
movzx	ebp, cl
movzx	edi, bl
movzx	ebp, ss:_ror4[ebp]
mov	cl, _ashx[edi]
xor	ebp, ecx
and	ebp, 0FFh
movzx	edi, ss:(_qt3+10h)[ebp]
shl	edi, 4
xor	ebx, [esp+3Ch+var_34]
movzx	ebx, bl
mov	cl, (_qt2+10h)[ebx]
or	edi, ecx
mov	bl, [key_0+0Ch]
xor	edi, ebx
mov	ebx, edi
movzx	ecx, bl
mov	bl, dl
shr	bl, 4
mov	edi, ebx
and	edx, 0Fh
mov	bl, dl
xor	ebx, edi
movzx	ebx, bl
mov	bl, _qt0[ebx]
mov	byte ptr [esp+3Ch+var_34], bl
and	edi, 0FFh
movzx	edx, dl
movzx	edi, _ashx[edi]
mov	bl, _ror4[edx]
xor	edi, ebx
and	edi, 0FFh
mov	dl, _qt1[edi]
movzx	ebp, dl
movzx	edi, byte ptr [esp+3Ch+var_34]
movzx	ebp, ss:_ror4[ebp]
mov	bl, _ashx[edi]
xor	ebp, ebx
and	ebp, 0FFh
movzx	edi, ss:_qt3[ebp]
shl	edi, 4
mov	bl, byte ptr [esp+3Ch+var_34]
xor	ebx, edx
movzx	ebx, bl
mov	dl, _qt2[ebx]
or	edx, edi
movzx	edi, dl
mov	edx, [key_0+0Ch]
movzx	ebx, dh
mov	edx, edi
xor	b1, ebx
mov	bl, al
shr	bl, 4
mov	edi, ebx
and	eax, 0Fh
mov	bl, al
xor	ebx, edi
movzx	ebx, bl
mov	bl, _qt0[ebx]
mov	byte ptr [esp+3Ch+var_34], bl
and	edi, 0FFh
movzx	eax, al
movzx	edi, _ashx[edi]
mov	bl, _ror4[eax]
xor	edi, ebx
and	edi, 0FFh
mov	al, _qt1[edi]
movzx	ebp, al
movzx	edi, byte ptr [esp+3Ch+var_34]
movzx	ebp, ss:_ror4[ebp]
mov	bl, _ashx[edi]
xor	ebp, ebx
and	ebp, 0FFh
movzx	edi, ss:_qt3[ebp]
shl	edi, 4
mov	bl, byte ptr [esp+3Ch+var_34]
xor	ebx, eax
movzx	ebx, bl
mov	al, _qt2[ebx]
or	edi, eax
mov	ebx, [key_0+0Ch]
shr	ebx, 10h
xor	edi, ebx
mov	ebx, edi
movzx	eax, bl
movzx	edi, byte ptr [esp+3Ch+var_38]
mov	ebx, edi
shr	bl, 4
mov	ebp, ebx
mov	ebx, edi
and	ebx, 0Fh
mov	byte ptr [esp+3Ch+var_34], bl
xor	ebx, ebp
mov	edi, ebx
and	edi, 0FFh
mov	bl, (_qt0+10h)[edi]
mov	byte ptr [esp+3Ch+var_38], bl
and	ebp, 0FFh
movzx	edi, byte ptr [esp+3Ch+var_34]
mov	[esp+3Ch+var_34], edi
movzx	edi, ss:_ashx[ebp]
mov	ebx, [esp+3Ch+var_34]
mov	bl, _ror4[ebx]
xor	edi, ebx
and	edi, 0FFh
mov	bl, (_qt1+10h)[edi]
mov	byte ptr [esp+3Ch+var_34], bl
movzx	ebp, bl
movzx	edi, byte ptr [esp+3Ch+var_38]
movzx	ebp, ss:_ror4[ebp]
mov	bl, _ashx[edi]
xor	ebp, ebx
and	ebp, 0FFh
movzx	edi, ss:(_qt3+10h)[ebp]
shl	edi, 4
mov	bl, byte ptr [esp+3Ch+var_34]
xor	ebx, [esp+3Ch+var_38]
movzx	ebp, bl
mov	bl, ss:(_qt2+10h)[ebp]
or	edi, ebx
and	edi, 0FFh
mov	ebx, [key_0+0Ch]
shr	ebx, 18h
xor	edi, ebx
mov	[esp+3Ch+var_38], edi
mov	bl, cl
shr	bl, 4
mov	edi, ebx
and	ecx, 0Fh
mov	bl, cl
xor	ebx, edi
movzx	ebx, bl
mov	bl, (_qt0+10h)[ebx]
and	edi, 0FFh
movzx	ebp, cl
mov	cl, _ashx[edi]
xor	cl, ss:_ror4[ebp]
movzx	ecx, cl
mov	cl, (_qt1+10h)[ecx]
mov	byte ptr [esp+3Ch+var_34], cl
movzx	ebp, cl
movzx	edi, bl
movzx	ebp, ss:_ror4[ebp]
mov	cl, _ashx[edi]
xor	ebp, ecx
and	ebp, 0FFh
movzx	edi, ss:(_qt3+10h)[ebp]
shl	edi, 4
xor	ebx, [esp+3Ch+var_34]
movzx	ebx, bl
mov	cl, (_qt2+10h)[ebx]
or	edi, ecx
mov	bl, [key_0+8]
xor	edi, ebx
mov	ebx, edi
movzx	ecx, bl
mov	bl, dl
shr	bl, 4
mov	edi, ebx
and	edx, 0Fh
mov	bl, dl
xor	ebx, edi
movzx	ebx, bl
mov	bl, (_qt0+10h)[ebx]
mov	byte ptr [esp+3Ch+var_34], bl
and	edi, 0FFh
movzx	edx, dl
movzx	edi, _ashx[edi]
mov	bl, _ror4[edx]
xor	edi, ebx
and	edi, 0FFh
mov	dl, (_qt1+10h)[edi]
movzx	ebp, dl
movzx	edi, byte ptr [esp+3Ch+var_34]
movzx	ebp, ss:_ror4[ebp]
mov	bl, _ashx[edi]
xor	ebp, ebx
and	ebp, 0FFh
movzx	edi, ss:(_qt3+10h)[ebp]
shl	edi, 4
mov	bl, byte ptr [esp+3Ch+var_34]
xor	ebx, edx
movzx	ebx, bl
mov	dl, (_qt2+10h)[ebx]
or	edx, edi
movzx	edi, dl
mov	edx, [key_0+8]
movzx	ebx, dh
mov	edx, edi
xor	b1, ebx
mov	bl, al
shr	bl, 4
mov	edi, ebx
and	eax, 0Fh
mov	bl, al
xor	ebx, edi
movzx	ebx, bl
mov	bl, _qt0[ebx]
mov	byte ptr [esp+3Ch+var_34], bl
and	edi, 0FFh
movzx	eax, al
movzx	edi, _ashx[edi]
mov	bl, _ror4[eax]
xor	edi, ebx
and	edi, 0FFh
mov	al, _qt1[edi]
movzx	ebp, al
movzx	edi, byte ptr [esp+3Ch+var_34]
movzx	ebp, ss:_ror4[ebp]
mov	bl, _ashx[edi]
xor	ebp, ebx
and	ebp, 0FFh
movzx	edi, ss:_qt3[ebp]
shl	edi, 4
mov	bl, byte ptr [esp+3Ch+var_34]
xor	ebx, eax
movzx	ebx, bl
mov	al, _qt2[ebx]
or	edi, eax
mov	ebx, [key_0+8]
shr	ebx, 10h
xor	edi, ebx
mov	ebx, edi
movzx	eax, bl
movzx	ebp, byte ptr [esp+3Ch+var_38]
mov	ebx, ebp
shr	bl, 4
mov	edi, ebx
mov	ebx, ebp
and	ebx, 0Fh
mov	byte ptr [esp+3Ch+var_34], bl
xor	ebx, edi
mov	ebp, ebx
and	ebp, 0FFh
mov	bl, ss:_qt0[ebp]
mov	byte ptr [esp+3Ch+var_38], bl
and	edi, 0FFh
movzx	ebp, byte ptr [esp+3Ch+var_34]
movzx	edi, _ashx[edi]
mov	bl, ss:_ror4[ebp]
xor	edi, ebx
and	edi, 0FFh
mov	bl, _qt1[edi]
mov	byte ptr [esp+3Ch+var_34], bl
movzx	ebp, bl
movzx	edi, byte ptr [esp+3Ch+var_38]
movzx	ebp, ss:_ror4[ebp]
mov	bl, _ashx[edi]
xor	ebp, ebx
and	ebp, 0FFh
movzx	edi, ss:_qt3[ebp]
shl	edi, 4
mov	bl, byte ptr [esp+3Ch+var_34]
xor	ebx, [esp+3Ch+var_38]
movzx	ebp, bl
mov	bl, ss:_qt2[ebp]
or	edi, ebx
and	edi, 0FFh
mov	ebx, [key_0+8]
shr	ebx, 18h
xor	edi, ebx
mov	[esp+3Ch+var_38], edi
mov	bl, cl
shr	bl, 4
mov	edi, ebx
and	ecx, 0Fh
mov	bl, cl
xor	ebx, edi
movzx	ebx, bl
mov	bl, _qt0[ebx]
and	edi, 0FFh
movzx	ebp, cl
mov	cl, _ashx[edi]
xor	cl, ss:_ror4[ebp]
movzx	ecx, cl
mov	cl, _qt1[ecx]
mov	byte ptr [esp+3Ch+var_30], cl
mov	edi, [key_0+4]
mov	[esp+3Ch+var_34], edi
movzx	ebp, cl
movzx	edi, bl
movzx	ebp, ss:_ror4[ebp]
mov	cl, _ashx[edi]
xor	ebp, ecx
and	ebp, 0FFh
movzx	edi, ss:_qt3[ebp]
shl	edi, 4
xor	ebx, [esp+3Ch+var_30]
movzx	ebx, bl
mov	bl, _qt2[ebx]
or	ebx, edi
xor	ebx, [esp+3Ch+var_34]
mov	cl, bl
shr	cl, 4
mov	edi, ecx
and	ebx, 0Fh
mov	cl, bl
xor	ecx, edi
movzx	ecx, cl
mov	cl, _qt0[ecx]
mov	byte ptr [esp+3Ch+var_30], cl
and	edi, 0FFh
movzx	ebx, bl
movzx	edi, _ashx[edi]
mov	cl, _ror4[ebx]
xor	edi, ecx
and	edi, 0FFh
movzx	edi, _qt1[edi]
mov	ebx, [key_0]
mov	[esp+3Ch+var_28], ebx
mov	ecx, edi
movzx	ebp, cl
movzx	key_0, byte ptr	[esp+3Ch+var_30]
movzx	ebp, ss:_ror4[ebp]
mov	bl, _ashx[esi]
xor	ebp, ebx
and	ebp, 0FFh
movzx	esi, ss:_qt3[ebp]
shl	esi, 4
mov	cl, byte ptr [esp+3Ch+var_30]
xor	ecx, edi
movzx	ebx, cl
mov	cl, _qt2[ebx]
or	esi, ecx
mov	bl, byte ptr [esp+3Ch+var_28]
xor	esi, ebx
mov	ebx, esi
movzx	ecx, bl
mov	bl, dl
shr	bl, 4
mov	edi, ebx
and	edx, 0Fh
mov	esi, edx
xor	edx, edi
movzx	edx, dl
mov	dl, (_qt0+10h)[edx]
and	edi, 0FFh
and	esi, 0FFh
movzx	edi, _ashx[edi]
mov	bl, _ror4[esi]
xor	edi, ebx
and	edi, 0FFh
movzx	esi, (_qt1+10h)[edi]
mov	ebx, esi
movzx	ebp, bl
movzx	edi, dl
movzx	ebp, ss:_ror4[ebp]
mov	bl, _ashx[edi]
xor	ebp, ebx
and	ebp, 0FFh
movzx	edi, ss:(_qt3+10h)[ebp]
shl	edi, 4
xor	edx, esi
movzx	edx, dl
mov	dl, (_qt2+10h)[edx]
or	edx, edi
mov	esi, edx
mov	edx, [esp+3Ch+var_34]
shr	edx, 8
xor	esi, edx
mov	edx, esi
shr	dl, 4
mov	edi, edx
and	esi, 0Fh
mov	edx, esi
xor	edx, edi
movzx	edx, dl
mov	dl, _qt0[edx]
and	edi, 0FFh
and	esi, 0FFh
movzx	edi, _ashx[edi]
mov	bl, _ror4[esi]
xor	edi, ebx
and	edi, 0FFh
movzx	esi, _qt1[edi]
mov	ebx, esi
movzx	ebp, bl
movzx	edi, dl
movzx	ebp, ss:_ror4[ebp]
mov	bl, _ashx[edi]
xor	ebp, ebx
and	ebp, 0FFh
movzx	edi, ss:_qt3[ebp]
shl	edi, 4
xor	edx, esi
movzx	edx, dl
mov	dl, _qt2[edx]
or	edx, edi
movzx	edx, dl
mov	ebx, [esp+3Ch+var_28]
movzx	esi, bh
xor	edx, esi
mov	bl, al
shr	bl, 4
mov	edi, ebx
and	eax, 0Fh
mov	esi, eax
xor	eax, edi
movzx	eax, al
mov	al, _qt0[eax]
and	edi, 0FFh
and	esi, 0FFh
movzx	edi, _ashx[edi]
mov	bl, _ror4[esi]
xor	edi, ebx
and	edi, 0FFh
movzx	esi, _qt1[edi]
mov	ebx, esi
movzx	ebp, bl
movzx	edi, al
movzx	ebp, ss:_ror4[ebp]
mov	bl, _ashx[edi]
xor	ebp, ebx
and	ebp, 0FFh
movzx	edi, ss:_qt3[ebp]
shl	edi, 4
xor	eax, esi
movzx	eax, al
mov	al, _qt2[eax]
or	eax, edi
mov	esi, eax
mov	eax, [esp+3Ch+var_34]
shr	eax, 10h
xor	esi, eax
mov	eax, esi
shr	al, 4
mov	edi, eax
and	esi, 0Fh
mov	eax, esi
xor	eax, edi
movzx	eax, al
mov	al, (_qt0+10h)[eax]
and	edi, 0FFh
and	esi, 0FFh
movzx	edi, _ashx[edi]
mov	bl, _ror4[esi]
xor	edi, ebx
and	edi, 0FFh
movzx	esi, (_qt1+10h)[edi]
mov	ebx, esi
movzx	ebp, bl
movzx	edi, al
movzx	ebp, ss:_ror4[ebp]
mov	bl, _ashx[edi]
xor	ebp, ebx
and	ebp, 0FFh
movzx	edi, ss:(_qt3+10h)[ebp]
shl	edi, 4
xor	eax, esi
movzx	eax, al
mov	bl, (_qt2+10h)[eax]
or	edi, ebx
mov	esi, [esp+3Ch+var_28]
shr	esi, 10h
xor	edi, esi
mov	ebx, edi
movzx	eax, bl
movzx	esi, byte ptr [esp+3Ch+var_38]
mov	ebx, esi
shr	bl, 4
mov	edi, ebx
and	esi, 0Fh
mov	ebx, esi
xor	ebx, edi
mov	ebp, ebx
and	ebp, 0FFh
mov	bl, ss:(_qt0+10h)[ebp]
mov	byte ptr [esp+3Ch+var_38], bl
and	edi, 0FFh
and	esi, 0FFh
movzx	edi, _ashx[edi]
mov	bl, _ror4[esi]
xor	edi, ebx
and	edi, 0FFh
movzx	ebp, (_qt1+10h)[edi]
mov	ebx, ebp
movzx	edi, bl
movzx	esi, byte ptr [esp+3Ch+var_38]
movzx	edi, _ror4[edi]
mov	bl, _ashx[esi]
xor	ebx, edi
mov	esi, ebx
and	esi, 0FFh
movzx	esi, (_qt3+10h)[esi]
shl	esi, 4
mov	bl, byte ptr [esp+3Ch+var_38]
xor	ebx, ebp
mov	edi, ebx
and	edi, 0FFh
mov	bl, (_qt2+10h)[edi]
or	esi, ebx
mov	edi, [esp+3Ch+var_34]
shr	edi, 18h
xor	esi, edi
mov	ebx, esi
shr	bl, 4
mov	edi, ebx
and	esi, 0Fh
mov	ebx, esi
xor	ebx, edi
mov	ebp, ebx
and	ebp, 0FFh
mov	bl, ss:(_qt0+10h)[ebp]
mov	byte ptr [esp+3Ch+var_38], bl
and	edi, 0FFh
mov	ebx, esi
movzx	ebp, bl
movzx	esi, _ashx[edi]
mov	bl, ss:_ror4[ebp]
xor	esi, ebx
and	esi, 0FFh
movzx	esi, (_qt1+10h)[esi]
mov	ebx, esi
movzx	ebp, bl
movzx	edi, byte ptr [esp+3Ch+var_38]
movzx	ebp, ss:_ror4[ebp]
mov	bl, _ashx[edi]
xor	ebx, ebp
mov	edi, ebx
and	edi, 0FFh
movzx	edi, (_qt3+10h)[edi]
shl	edi, 4
mov	bl, byte ptr [esp+3Ch+var_38]
xor	esi, ebx
and	esi, 0FFh
mov	bl, (_qt2+10h)[esi]
or	ebx, edi
mov	esi, ebx
and	esi, 0FFh
mov	ebx, [esp+3Ch+var_28]
shr	ebx, 18h
xor	esi, ebx
mov	[esp+3Ch+var_38], esi
jmp	loc_641FB51F
align 10h
public _mds_rem
push	ebp
push	edi
push	esi
push	ebx
mov	eax, [esp+10h+p0]
mov	ecx, [esp+10h+p1]
mov	edx, ecx
shr	t, 18h
mov	ebx, eax
shl	ebx, 8
lea	esi, [t+t]
mov	edi, u
xor	edi, 14Dh
test	dl, dl
js	short loc_641FC097
mov	u, esi
mov	esi, t
shr	esi, 1
xor	esi, u
mov	ebp, u
xor	ebp, 0A6h
test	dl, 1
jz	short loc_641FC0AC
mov	esi, u
shl	p1_0, 8
shr	eax, 18h
or	eax, ecx
xor	t, eax
shl	edi, 10h
xor	edx, edi
mov	eax, esi
shl	eax, 8
shl	esi, 18h
or	esi, eax
xor	p1_0, esi
mov	eax, p1_0
shr	t, 18h
mov	ecx, p0_0
shl	ecx, 8
lea	esi, [t+t]
mov	edi, u
xor	edi, 14Dh
test	al, al
js	short loc_641FC0E2
mov	u, esi
mov	esi, t
shr	esi, 1
xor	esi, u
mov	ebp, u
xor	ebp, 0A6h
test	al, 1
jz	short loc_641FC0F6
mov	esi, u
shl	p1_0, 8
shr	ebx, 18h
or	ebx, edx
xor	t, ebx
shl	edi, 10h
xor	eax, edi
mov	edx, esi
shl	edx, 8
shl	esi, 18h
or	esi, edx
xor	p1_0, esi
mov	edx, p1_0
shr	t, 18h
mov	ebx, p0_0
shl	ebx, 8
lea	esi, [t+t]
mov	edi, u
xor	edi, 14Dh
test	dl, dl
js	short loc_641FC12C
mov	u, esi
mov	esi, t
shr	esi, 1
xor	esi, u
mov	ebp, u
xor	ebp, 0A6h
test	dl, 1
jz	short loc_641FC141
mov	esi, u
shl	p1_0, 8
shr	ecx, 18h
or	ecx, eax
xor	t, ecx
shl	edi, 10h
xor	edx, edi
mov	eax, esi
shl	eax, 8
shl	esi, 18h
or	esi, eax
xor	p1_0, esi
mov	eax, p1_0
shr	t, 18h
lea	ecx, [t+t]
mov	esi, u
xor	esi, 14Dh
test	al, al
js	short loc_641FC172
mov	u, ecx
mov	ecx, t
shr	ecx, 1
xor	ecx, u
mov	edi, u
xor	edi, 0A6h
test	al, 1
jz	short loc_641FC186
mov	ecx, u
shl	p1_0, 8
shr	p0_0, 18h
or	edx, ebx
xor	edx, t
shl	esi, 10h
xor	edx, esi
mov	t, ecx
shl	eax, 8
shl	ecx, 18h
or	ecx, eax
xor	p1_0, ecx
mov	eax, p1_0
shr	t, 18h
lea	ecx, [t+t]
mov	esi, u
xor	esi, 14Dh
test	al, al
js	short loc_641FC1B7
mov	u, ecx
mov	ebx, t
shr	ebx, 1
xor	ebx, u
mov	ecx, u
xor	cl, 0A6h
test	al, 1
jz	short loc_641FC1C8
mov	ebx, u
mov	u, p1_0
shl	ecx, 8
xor	ecx, t
shl	esi, 10h
xor	ecx, esi
mov	t, u
shl	eax, 8
shl	u, 18h
or	ebx, eax
xor	p1_0, ebx
mov	eax, p1_0
shr	t, 18h
lea	edx, [t+t]
mov	esi, u
xor	esi, 14Dh
test	al, al
js	short loc_641FC1F6
mov	u, edx
mov	ebx, t
shr	ebx, 1
xor	ebx, u
mov	edx, u
xor	dl, 0A6h
test	al, 1
jz	short loc_641FC207
mov	ebx, u
mov	u, p1_0
shl	edx, 8
xor	edx, t
shl	esi, 10h
xor	edx, esi
mov	t, u
shl	eax, 8
shl	u, 18h
or	ebx, eax
xor	p1_0, ebx
mov	eax, p1_0
shr	t, 18h
lea	ecx, [t+t]
mov	ebx, u
xor	ebx, 14Dh
test	al, al
js	short loc_641FC235
mov	u, ecx
mov	ecx, t
shr	ecx, 1
xor	ecx, u
mov	esi, u
xor	esi, 0A6h
test	al, 1
jz	short loc_641FC249
mov	ecx, u
shl	p1_0, 8
xor	t, edx
shl	ebx, 10h
xor	eax, ebx
mov	edx, ecx
shl	edx, 8
shl	ecx, 18h
or	ecx, edx
xor	p1_0, ecx
mov	edx, p1_0
shr	t, 18h
lea	ecx, [t+t]
mov	ebx, u
xor	ebx, 14Dh
test	dl, dl
js	short loc_641FC275
mov	u, ecx
mov	ecx, t
shr	ecx, 1
xor	ecx, u
mov	esi, u
xor	esi, 0A6h
test	dl, 1
jz	short loc_641FC28A
mov	ecx, u
shl	p1_0, 8
xor	eax, t
shl	ebx, 10h
xor	eax, ebx
mov	t, ecx
shl	edx, 8
shl	ecx, 18h
or	ecx, edx
xor	p1_0, ecx
pop	ebx
pop	u
pop	edi
pop	ebp
retn
align 4
public _twofish_encrypt
			
push	ebp
push	edi
push	esi
push	ebx
sub	esp, 24h
mov	esi, [esp+34h+ctx]
mov	ebp, [esp+34h+in_blk]
lea	ebx, [esi+4]
lea	edi, [esi+0A4h]
mov	eax, [ebp+0]
xor	eax, [esi+4]
mov	[esp+34h+var_1C], eax
mov	edx, [ebp+4]
xor	edx, [l_key+4]
mov	[esp+34h+var_20], edx
mov	[esp+34h+key], s_key 
mov	eax, edx
ror	eax, 18h
mov	[esp+34h+x], eax 
mov	[esp+34h+var_34], esi 
call	_h_fun
mov	edx, eax
mov	[esp+34h+key], s_key 
mov	eax, [esp+34h+var_1C]
mov	[esp+34h+x], eax 
mov	[esp+34h+var_34], esi 
mov	[esp+34h+var_24], t1
call	_h_fun
mov	ecx, [ebp+8]
xor	ecx, [l_key+8]
mov	[esp+34h+var_18], ecx
mov	edx, [esp+34h+var_24]
lea	ecx, [edx+eax]
add	ecx, [l_key+20h]
xor	ecx, [esp+34h+var_18]
ror	ecx, 1
mov	[esp+34h+var_18], ecx
add	t0, [l_key+24h]
lea	eax, [eax+t1*2]
mov	t1, [ebp+0Ch]
xor	edx, [l_key+0Ch]
ror	edx, 1Fh
xor	eax, edx
mov	[esp+34h+var_14], eax
mov	[esp+34h+key], s_key 
ror	eax, 18h
mov	[esp+34h+x], eax 
mov	[esp+34h+var_34], esi 
call	_h_fun
mov	ebp, eax
mov	[esp+34h+key], s_key 
mov	edx, [esp+34h+var_18]
mov	[esp+34h+x], edx 
mov	[esp+34h+var_34], esi 
call	_h_fun
lea	edx, [t1+eax+0]
add	edx, [l_key+28h]
xor	edx, [esp+34h+var_1C]
ror	edx, 1
mov	[esp+34h+var_1C], edx
add	t0, [l_key+2Ch]
lea	eax, [eax+t1*2]
mov	edx, [esp+34h+var_20]
ror	edx, 1Fh
xor	eax, edx
mov	[esp+34h+var_20], eax
mov	[esp+34h+key], s_key 
ror	eax, 18h
mov	[esp+34h+x], eax 
mov	[esp+34h+var_34], esi 
call	_h_fun
mov	t1, eax
mov	[esp+34h+key], s_key 
mov	eax, [esp+34h+var_1C]
mov	[esp+34h+x], eax 
mov	[esp+34h+var_34], esi 
call	_h_fun
lea	ecx, [t1+eax+0]
add	ecx, [l_key+30h]
xor	ecx, [esp+34h+var_18]
ror	ecx, 1
mov	[esp+34h+var_18], ecx
mov	edx, [esp+34h+var_14]
ror	edx, 1Fh
add	t0, [l_key+34h]
lea	eax, [eax+t1*2]
xor	edx, eax
mov	[esp+34h+var_14], edx
mov	[esp+34h+key], s_key 
mov	eax, edx
ror	eax, 18h
mov	[esp+34h+x], eax 
mov	[esp+34h+var_34], esi 
call	_h_fun
mov	t1, eax
mov	[esp+34h+key], s_key 
mov	edx, [esp+34h+var_18]
mov	[esp+34h+x], edx 
mov	[esp+34h+var_34], esi 
call	_h_fun
lea	edx, [t1+eax+0]
add	edx, [l_key+38h]
xor	edx, [esp+34h+var_1C]
ror	edx, 1
mov	[esp+34h+var_1C], edx
mov	edx, [esp+34h+var_20]
ror	edx, 1Fh
add	t0, [l_key+3Ch]
lea	eax, [eax+t1*2]
xor	edx, eax
mov	[esp+34h+var_20], edx
mov	[esp+34h+key], s_key 
mov	eax, edx
ror	eax, 18h
mov	[esp+34h+x], eax 
mov	[esp+34h+var_34], esi 
call	_h_fun
mov	t1, eax
mov	[esp+34h+key], s_key 
mov	eax, [esp+34h+var_1C]
mov	[esp+34h+x], eax 
mov	[esp+34h+var_34], esi 
call	_h_fun
lea	ecx, [t1+eax+0]
add	ecx, [l_key+40h]
xor	ecx, [esp+34h+var_18]
ror	ecx, 1
mov	[esp+34h+var_18], ecx
mov	edx, [esp+34h+var_14]
ror	edx, 1Fh
add	t0, [l_key+44h]
lea	eax, [eax+t1*2]
xor	edx, eax
mov	[esp+34h+var_14], edx
mov	[esp+34h+key], s_key 
mov	eax, edx
ror	eax, 18h
mov	[esp+34h+x], eax 
mov	[esp+34h+var_34], esi 
call	_h_fun
mov	t1, eax
mov	[esp+34h+key], s_key 
mov	edx, [esp+34h+var_18]
mov	[esp+34h+x], edx 
mov	[esp+34h+var_34], esi 
call	_h_fun
lea	edx, [t1+eax+0]
add	edx, [l_key+48h]
xor	edx, [esp+34h+var_1C]
ror	edx, 1
mov	[esp+34h+var_1C], edx
mov	edx, [esp+34h+var_20]
ror	edx, 1Fh
add	t0, [l_key+4Ch]
lea	eax, [eax+t1*2]
xor	edx, eax
mov	[esp+34h+var_20], edx
mov	[esp+34h+key], s_key 
mov	eax, edx
ror	eax, 18h
mov	[esp+34h+x], eax 
mov	[esp+34h+var_34], esi 
call	_h_fun
mov	t1, eax
mov	[esp+34h+key], s_key 
mov	eax, [esp+34h+var_1C]
mov	[esp+34h+x], eax 
mov	[esp+34h+var_34], esi 
call	_h_fun
lea	ecx, [t1+eax+0]
add	ecx, [l_key+50h]
xor	ecx, [esp+34h+var_18]
ror	ecx, 1
mov	[esp+34h+var_18], ecx
mov	edx, [esp+34h+var_14]
ror	edx, 1Fh
add	t0, [l_key+54h]
lea	eax, [eax+t1*2]
xor	edx, eax
mov	[esp+34h+var_14], edx
mov	[esp+34h+key], s_key 
mov	eax, edx
ror	eax, 18h
mov	[esp+34h+x], eax 
mov	[esp+34h+var_34], esi 
call	_h_fun
mov	t1, eax
mov	[esp+34h+key], s_key 
mov	edx, [esp+34h+var_18]
mov	[esp+34h+x], edx 
mov	[esp+34h+var_34], esi 
call	_h_fun
lea	edx, [t1+eax+0]
add	edx, [l_key+58h]
xor	edx, [esp+34h+var_1C]
ror	edx, 1
mov	[esp+34h+var_1C], edx
mov	edx, [esp+34h+var_20]
ror	edx, 1Fh
add	t0, [l_key+5Ch]
lea	eax, [eax+t1*2]
xor	edx, eax
mov	[esp+34h+var_20], edx
mov	[esp+34h+key], s_key 
mov	eax, edx
ror	eax, 18h
mov	[esp+34h+x], eax 
mov	[esp+34h+var_34], esi 
call	_h_fun
mov	t1, eax
mov	[esp+34h+key], s_key 
mov	eax, [esp+34h+var_1C]
mov	[esp+34h+x], eax 
mov	[esp+34h+var_34], esi 
call	_h_fun
lea	ecx, [t1+eax+0]
add	ecx, [l_key+60h]
xor	ecx, [esp+34h+var_18]
ror	ecx, 1
mov	[esp+34h+var_18], ecx
mov	edx, [esp+34h+var_14]
ror	edx, 1Fh
add	t0, [l_key+64h]
lea	ecx, [eax+t1*2]
xor	edx, ecx
mov	[esp+34h+var_14], edx
mov	[esp+34h+key], s_key 
mov	eax, edx
ror	eax, 18h
mov	[esp+34h+x], eax 
mov	[esp+34h+var_34], esi 
call	_h_fun
mov	t1, eax
mov	[esp+34h+key], s_key 
mov	edx, [esp+34h+var_18]
mov	[esp+34h+x], edx 
mov	[esp+34h+var_34], esi 
call	_h_fun
lea	edx, [t1+eax+0]
add	edx, [l_key+68h]
xor	edx, [esp+34h+var_1C]
ror	edx, 1
mov	[esp+34h+var_1C], edx
mov	edx, [esp+34h+var_20]
ror	edx, 1Fh
add	t0, [l_key+6Ch]
lea	eax, [eax+t1*2]
xor	edx, eax
mov	[esp+34h+var_20], edx
mov	[esp+34h+key], s_key 
mov	eax, edx
ror	eax, 18h
mov	[esp+34h+x], eax 
mov	[esp+34h+var_34], esi 
call	_h_fun
mov	t1, eax
mov	[esp+34h+key], s_key 
mov	eax, [esp+34h+var_1C]
mov	[esp+34h+x], eax 
mov	[esp+34h+var_34], esi 
call	_h_fun
lea	ecx, [t1+eax+0]
add	ecx, [l_key+70h]
xor	ecx, [esp+34h+var_18]
ror	ecx, 1
mov	[esp+34h+var_18], ecx
mov	edx, [esp+34h+var_14]
ror	edx, 1Fh
add	t0, [l_key+74h]
lea	ecx, [eax+t1*2]
xor	edx, ecx
mov	[esp+34h+var_14], edx
mov	[esp+34h+key], s_key 
mov	eax, edx
ror	eax, 18h
mov	[esp+34h+x], eax 
mov	[esp+34h+var_34], esi 
call	_h_fun
mov	t1, eax
mov	[esp+34h+key], s_key 
mov	edx, [esp+34h+var_18]
mov	[esp+34h+x], edx 
mov	[esp+34h+var_34], esi 
call	_h_fun
lea	edx, [t1+eax+0]
add	edx, [l_key+78h]
xor	edx, [esp+34h+var_1C]
ror	edx, 1
mov	[esp+34h+var_1C], edx
mov	edx, [esp+34h+var_20]
ror	edx, 1Fh
add	t0, [l_key+7Ch]
lea	eax, [eax+t1*2]
xor	edx, eax
mov	[esp+34h+var_20], edx
mov	[esp+34h+key], s_key 
mov	eax, edx
ror	eax, 18h
mov	[esp+34h+x], eax 
mov	[esp+34h+var_34], esi 
call	_h_fun
mov	t1, eax
mov	[esp+34h+key], s_key 
mov	eax, [esp+34h+var_1C]
mov	[esp+34h+x], eax 
mov	[esp+34h+var_34], esi 
call	_h_fun
lea	ecx, [t1+eax+0]
add	ecx, [l_key+80h]
xor	ecx, [esp+34h+var_18]
ror	ecx, 1
mov	[esp+34h+var_18], ecx
mov	edx, [esp+34h+var_14]
ror	edx, 1Fh
add	t0, [l_key+84h]
lea	ecx, [eax+t1*2]
xor	ecx, edx
mov	[esp+34h+key], s_key 
mov	eax, ecx
ror	eax, 18h
mov	[esp+34h+x], eax 
mov	[esp+34h+var_34], esi 
mov	[esp+34h+var_28], ecx
call	_h_fun
mov	t1, eax
mov	[esp+34h+key], s_key 
mov	edx, [esp+34h+var_18]
mov	[esp+34h+x], edx 
mov	[esp+34h+var_34], esi 
call	_h_fun
lea	edx, [t1+eax+0]
add	edx, [l_key+88h]
xor	edx, [esp+34h+var_1C]
ror	edx, 1
mov	[esp+34h+var_1C], edx
mov	edx, [esp+34h+var_20]
ror	edx, 1Fh
add	t0, [l_key+8Ch]
lea	eax, [eax+t1*2]
xor	edx, eax
mov	[esp+34h+var_20], edx
mov	[esp+34h+key], s_key 
mov	eax, edx
ror	eax, 18h
mov	[esp+34h+x], eax 
mov	[esp+34h+var_34], esi 
call	_h_fun
mov	edx, eax
mov	[esp+34h+key], s_key 
mov	eax, [esp+34h+var_1C]
mov	[esp+34h+x], eax 
mov	[esp+34h+var_34], esi 
mov	[esp+34h+var_24], t1
call	_h_fun
mov	edx, [esp+34h+var_24]
lea	ebp, [edx+eax]
add	ebp, [l_key+90h]
xor	ebp, [esp+34h+var_18]
ror	ebp, 1
mov	ecx, [esp+34h+var_28]
ror	ecx, 1Fh
add	t0, [l_key+94h]
lea	eax, [eax+t1*2]
xor	ecx, eax
mov	[esp+34h+key], s_key 
mov	eax, ecx
ror	eax, 18h
mov	[esp+34h+x], eax 
mov	[esp+34h+var_34], esi 
mov	[esp+34h+var_28], ecx
call	_h_fun
mov	[esp+34h+key], s_key 
mov	[esp+34h+x], ebp 
mov	[esp+34h+var_34], esi 
mov	[esp+34h+var_24], eax
call	_h_fun
mov	edx, [esp+34h+var_24]
lea	esi, [edx+eax]
add	esi, [l_key+98h]
xor	esi, [esp+34h+var_1C]
ror	esi, 1
add	t0, [l_key+9Ch]
lea	eax, [eax+t1*2]
xor	ebp, [l_key+10h]
mov	t1, [esp+34h+out_blk]
mov	[edx], ebp
mov	ecx, [esp+34h+var_28]
xor	ecx, [l_key+14h]
mov	[edx+4], ecx
xor	esi, [l_key+18h]
mov	[edx+8], esi
xor	eax, [l_key+1Ch]
mov	edx, [esp+34h+var_20]
ror	edx, 1Fh
xor	edx, eax
mov	eax, [esp+34h+out_blk]
mov	[eax+0Ch], edx
add	esp, 24h
pop	l_key
pop	esi
pop	s_key
pop	ebp
retn
align 4
public _silc_twofish_cbc_encrypt
push	ebp
push	edi
push	esi
push	ebx
sub	esp, 20h
mov	ebx, [esp+30h+src]
mov	esi, [esp+30h+dst]
test	byte ptr [esp+30h+len],	0Fh
jz	short loc_641FC834
xor	eax, eax
add	esp, 20h
pop	src_0
pop	dst_0
pop	edi
pop	ebp
retn
mov	eax, [esp+30h+iv]
mov	edx, [eax]
mov	ecx, eax
mov	eax, [eax+4]
mov	ebp, [ecx+8]
mov	edi, [ecx+0Ch]
xor	edx, [src_0]
mov	[esp+30h+tiv], edx
xor	eax, [src_0+4]
mov	[esp+30h+tiv+4], eax
mov	ecx, [src_0+8]
xor	ecx, ebp
mov	[esp+30h+tiv+8], ecx
xor	edi, [src_0+0Ch]
mov	[esp+30h+tiv+0Ch], edi
lea	edi, [esp+30h+tiv]
mov	[esp+30h+out_blk], edi 
mov	[esp+30h+in_blk], edi 
mov	ebp, [esp+30h+context]
mov	[esp+30h+ctx], ebp 
call	_twofish_encrypt
mov	edx, [esp+30h+tiv]
mov	[dst_0], edx
mov	eax, [esp+30h+tiv+4]
mov	[dst_0+4], eax
mov	ecx, [esp+30h+tiv+8]
mov	[dst_0+8], ecx
mov	ebp, [esp+30h+tiv+0Ch]
mov	[esp+30h+var_24], ebp
mov	[dst_0+0Ch], ebp
cmp	[esp+30h+len], 10h
jbe	loc_641FC92A
mov	eax, 10h
mov	edx, [esp+30h+context]
mov	[esp+30h+var_24], edx
mov	ebp, dst_0
mov	dst_0, src_0
mov	src_0, i
nop
mov	eax, [src_0+i]
xor	[esp+30h+tiv], eax
mov	eax, [src_0+i+4]
xor	[esp+30h+tiv+4], eax
mov	eax, [src_0+i+8]
xor	[esp+30h+tiv+8], eax
mov	eax, [src_0+i+0Ch]
xor	[esp+30h+tiv+0Ch], eax
mov	[esp+30h+out_blk], edi 
mov	[esp+30h+in_blk], edi 
mov	ecx, [esp+30h+var_24]
mov	[esp+30h+ctx], ecx 
call	_twofish_encrypt
mov	eax, [esp+30h+tiv]
mov	[dst_0+i+0], eax
mov	eax, [esp+30h+tiv+4]
mov	[dst_0+i+4], eax
mov	eax, [esp+30h+tiv+8]
mov	[dst_0+i+8], eax
mov	eax, [esp+30h+tiv+0Ch]
mov	[dst_0+i+0Ch], eax
add	i, 10h
cmp	[esp+30h+len], i
ja	short loc_641FC8B8
mov	edx, [esp+30h+tiv]
mov	eax, [esp+30h+tiv+4]
mov	ecx, [esp+30h+tiv+8]
mov	i, [esp+30h+tiv+0Ch]
mov	[esp+30h+var_24], ebx
mov	dst_0, ebx
mov	edi, [esp+30h+iv]
mov	[edi], edx
mov	[edi+4], eax
mov	[edi+8], ecx
mov	[edi+0Ch], ebp
mov	al, 1
add	esp, 20h
pop	ebx
pop	esi
pop	edi
pop	ebp
retn
align 4
public _twofish_decrypt
			
push	ebp
push	edi
push	esi
push	ebx
sub	esp, 28h
mov	esi, [esp+38h+ctx]
mov	ebp, [esp+38h+in_blk]
lea	ebx, [esi+4]
lea	edi, [esi+0A4h]
mov	eax, [ebp+0]
xor	eax, [l_key+10h]
mov	[esp+38h+var_24], eax
mov	eax, [ebp+4]
xor	eax, [l_key+14h]
mov	[esp+38h+var_18], eax
mov	[esp+38h+key], s_key 
ror	eax, 18h
mov	[esp+38h+x], eax 
mov	[esp+38h+var_38], esi 
call	_h_fun
mov	edx, eax
mov	[esp+38h+key], s_key 
mov	eax, [esp+38h+var_24]
mov	[esp+38h+x], eax 
mov	[esp+38h+var_38], esi 
mov	[esp+38h+var_2C], t1
call	_h_fun
mov	edx, [esp+38h+var_2C]
lea	ecx, [edx+eax]
add	ecx, [l_key+98h]
mov	[esp+38h+var_20], ecx
mov	ecx, [ebp+8]
xor	ecx, [l_key+18h]
ror	ecx, 1Fh
xor	ecx, [esp+38h+var_20]
mov	[esp+38h+var_20], ecx
mov	ecx, [ebp+0Ch]
xor	ecx, [l_key+1Ch]
add	t0, [l_key+9Ch]
lea	eax, [eax+t1*2]
xor	eax, ecx
ror	eax, 1
mov	[esp+38h+var_1C], eax
mov	[esp+38h+key], s_key 
ror	eax, 18h
mov	[esp+38h+x], eax 
mov	[esp+38h+var_38], esi 
call	_h_fun
mov	ebp, eax
mov	[esp+38h+key], s_key 
mov	edx, [esp+38h+var_20]
mov	[esp+38h+x], edx 
mov	[esp+38h+var_38], esi 
call	_h_fun
lea	edx, [t1+eax+0]
add	edx, [l_key+90h]
mov	ecx, [esp+38h+var_24]
ror	ecx, 1Fh
xor	edx, ecx
mov	[esp+38h+var_24], edx
add	t0, [l_key+94h]
lea	eax, [eax+t1*2]
xor	eax, [esp+38h+var_18]
ror	eax, 1
mov	[esp+38h+var_14], eax
mov	[esp+38h+key], s_key 
ror	eax, 18h
mov	[esp+38h+x], eax 
mov	[esp+38h+var_38], esi 
call	_h_fun
mov	t1, eax
mov	[esp+38h+key], s_key 
mov	ecx, [esp+38h+var_24]
mov	[esp+38h+x], ecx 
mov	[esp+38h+var_38], esi 
call	_h_fun
mov	edx, [esp+38h+var_20]
ror	edx, 1Fh
lea	ecx, [t1+eax+0]
add	ecx, [l_key+88h]
xor	edx, ecx
mov	[esp+38h+var_18], edx
add	t0, [l_key+8Ch]
lea	eax, [eax+t1*2]
xor	eax, [esp+38h+var_1C]
ror	eax, 1
mov	[esp+38h+var_1C], eax
mov	[esp+38h+key], s_key 
ror	eax, 18h
mov	[esp+38h+x], eax 
mov	[esp+38h+var_38], esi 
call	_h_fun
mov	t1, eax
mov	[esp+38h+key], s_key 
mov	eax, [esp+38h+var_18]
mov	[esp+38h+x], eax 
mov	[esp+38h+var_38], esi 
call	_h_fun
mov	ecx, [esp+38h+var_24]
ror	ecx, 1Fh
lea	edx, [t1+eax+0]
add	edx, [l_key+80h]
xor	ecx, edx
mov	[esp+38h+var_24], ecx
add	t0, [l_key+84h]
lea	eax, [eax+t1*2]
xor	eax, [esp+38h+var_14]
ror	eax, 1
mov	[esp+38h+var_20], eax
mov	[esp+38h+key], s_key 
ror	eax, 18h
mov	[esp+38h+x], eax 
mov	[esp+38h+var_38], esi 
call	_h_fun
mov	t1, eax
mov	[esp+38h+key], s_key 
mov	edx, [esp+38h+var_24]
mov	[esp+38h+x], edx 
mov	[esp+38h+var_38], esi 
call	_h_fun
mov	ecx, [esp+38h+var_18]
ror	ecx, 1Fh
lea	edx, [t1+eax+0]
add	edx, [l_key+78h]
xor	ecx, edx
mov	[esp+38h+var_18], ecx
add	t0, [l_key+7Ch]
lea	eax, [eax+t1*2]
xor	eax, [esp+38h+var_1C]
ror	eax, 1
mov	[esp+38h+var_1C], eax
mov	[esp+38h+key], s_key 
ror	eax, 18h
mov	[esp+38h+x], eax 
mov	[esp+38h+var_38], esi 
call	_h_fun
mov	t1, eax
mov	[esp+38h+key], s_key 
mov	ecx, [esp+38h+var_18]
mov	[esp+38h+x], ecx 
mov	[esp+38h+var_38], esi 
call	_h_fun
mov	ecx, [esp+38h+var_24]
ror	ecx, 1Fh
lea	edx, [t1+eax+0]
add	edx, [l_key+70h]
xor	ecx, edx
mov	[esp+38h+var_24], ecx
add	t0, [l_key+74h]
lea	eax, [eax+t1*2]
xor	eax, [esp+38h+var_20]
ror	eax, 1
mov	[esp+38h+var_20], eax
mov	[esp+38h+key], s_key 
ror	eax, 18h
mov	[esp+38h+x], eax 
mov	[esp+38h+var_38], esi 
call	_h_fun
mov	edx, eax
mov	[esp+38h+key], s_key 
mov	eax, [esp+38h+var_24]
mov	[esp+38h+x], eax 
mov	[esp+38h+var_38], esi 
mov	[esp+38h+var_2C], t1
call	_h_fun
mov	ecx, [esp+38h+var_18]
ror	ecx, 1Fh
mov	edx, [esp+38h+var_2C]
lea	ebp, [edx+eax]
add	ebp, [l_key+68h]
xor	ebp, ecx
add	t0, [l_key+6Ch]
lea	eax, [eax+t1*2]
xor	eax, [esp+38h+var_1C]
ror	eax, 1
mov	[esp+38h+var_1C], eax
mov	[esp+38h+key], s_key 
ror	eax, 18h
mov	[esp+38h+x], eax 
mov	[esp+38h+var_38], esi 
call	_h_fun
mov	[esp+38h+key], s_key 
mov	[esp+38h+x], ebp 
mov	[esp+38h+var_38], esi 
mov	[esp+38h+var_2C], eax
call	_h_fun
mov	ecx, [esp+38h+var_24]
ror	ecx, 1Fh
mov	[esp+38h+var_24], ecx
mov	edx, [esp+38h+var_2C]
lea	ecx, [edx+eax]
add	ecx, [l_key+60h]
xor	ecx, [esp+38h+var_24]
mov	[esp+38h+var_24], ecx
add	t0, [l_key+64h]
lea	eax, [eax+t1*2]
xor	eax, [esp+38h+var_20]
ror	eax, 1
mov	[esp+38h+var_18], eax
mov	[esp+38h+key], s_key 
ror	eax, 18h
mov	[esp+38h+x], eax 
mov	[esp+38h+var_38], esi 
call	_h_fun
mov	edx, eax
mov	[esp+38h+key], s_key 
mov	eax, [esp+38h+var_24]
mov	[esp+38h+x], eax 
mov	[esp+38h+var_38], esi 
mov	[esp+38h+var_2C], t1
call	_h_fun
mov	ecx, ebp
ror	ecx, 1Fh
mov	edx, [esp+38h+var_2C]
lea	ebp, [edx+eax]
add	ebp, [l_key+58h]
xor	ecx, ebp
mov	[esp+38h+var_20], ecx
add	t0, [l_key+5Ch]
lea	eax, [eax+t1*2]
xor	eax, [esp+38h+var_1C]
ror	eax, 1
mov	[esp+38h+var_1C], eax
mov	[esp+38h+key], s_key 
ror	eax, 18h
mov	[esp+38h+x], eax 
mov	[esp+38h+var_38], esi 
call	_h_fun
mov	[esp+38h+key], s_key 
mov	ecx, [esp+38h+var_20]
mov	[esp+38h+x], ecx 
mov	[esp+38h+var_38], esi 
mov	[esp+38h+var_2C], eax
call	_h_fun
mov	ecx, [esp+38h+var_24]
ror	ecx, 1Fh
mov	edx, [esp+38h+var_2C]
lea	ebp, [edx+eax]
add	ebp, [l_key+50h]
xor	ebp, ecx
add	t0, [l_key+54h]
lea	eax, [eax+t1*2]
xor	eax, [esp+38h+var_18]
ror	eax, 1
mov	[esp+38h+var_24], eax
mov	[esp+38h+key], s_key 
ror	eax, 18h
mov	[esp+38h+x], eax 
mov	[esp+38h+var_38], esi 
call	_h_fun
mov	[esp+38h+key], s_key 
mov	[esp+38h+x], ebp 
mov	[esp+38h+var_38], esi 
mov	[esp+38h+var_2C], eax
call	_h_fun
mov	ecx, [esp+38h+var_20]
ror	ecx, 1Fh
mov	[esp+38h+var_20], ecx
mov	edx, [esp+38h+var_2C]
lea	ecx, [edx+eax]
add	ecx, [l_key+48h]
xor	ecx, [esp+38h+var_20]
mov	[esp+38h+var_20], ecx
add	t0, [l_key+4Ch]
lea	eax, [eax+t1*2]
xor	eax, [esp+38h+var_1C]
ror	eax, 1
mov	[esp+38h+var_1C], eax
mov	[esp+38h+key], s_key 
ror	eax, 18h
mov	[esp+38h+x], eax 
mov	[esp+38h+var_38], esi 
call	_h_fun
mov	edx, eax
mov	[esp+38h+key], s_key 
mov	eax, [esp+38h+var_20]
mov	[esp+38h+x], eax 
mov	[esp+38h+var_38], esi 
mov	[esp+38h+var_2C], t1
call	_h_fun
mov	ecx, ebp
ror	ecx, 1Fh
mov	edx, [esp+38h+var_2C]
lea	ebp, [edx+eax]
add	ebp, [l_key+40h]
xor	ebp, ecx
add	t0, [l_key+44h]
lea	eax, [eax+t1*2]
xor	eax, [esp+38h+var_24]
ror	eax, 1
mov	[esp+38h+var_24], eax
mov	[esp+38h+key], s_key 
ror	eax, 18h
mov	[esp+38h+x], eax 
mov	[esp+38h+var_38], esi 
call	_h_fun
mov	[esp+38h+key], s_key 
mov	[esp+38h+x], ebp 
mov	[esp+38h+var_38], esi 
mov	[esp+38h+var_2C], eax
call	_h_fun
mov	ecx, [esp+38h+var_20]
ror	ecx, 1Fh
mov	[esp+38h+var_20], ecx
mov	edx, [esp+38h+var_2C]
lea	ecx, [edx+eax]
add	ecx, [l_key+38h]
xor	ecx, [esp+38h+var_20]
mov	[esp+38h+var_20], ecx
add	t0, [l_key+3Ch]
lea	eax, [eax+t1*2]
xor	eax, [esp+38h+var_1C]
ror	eax, 1
mov	[esp+38h+var_18], eax
mov	[esp+38h+key], s_key 
ror	eax, 18h
mov	[esp+38h+x], eax 
mov	[esp+38h+var_38], esi 
call	_h_fun
mov	edx, eax
mov	[esp+38h+key], s_key 
mov	eax, [esp+38h+var_20]
mov	[esp+38h+x], eax 
mov	[esp+38h+var_38], esi 
mov	[esp+38h+var_2C], t1
call	_h_fun
mov	ecx, ebp
ror	ecx, 1Fh
mov	edx, [esp+38h+var_2C]
lea	ebp, [edx+eax]
add	ebp, [l_key+30h]
xor	ecx, ebp
mov	[esp+38h+var_1C], ecx
add	t0, [l_key+34h]
lea	eax, [eax+t1*2]
xor	eax, [esp+38h+var_24]
ror	eax, 1
mov	[esp+38h+var_24], eax
mov	[esp+38h+key], s_key 
ror	eax, 18h
mov	[esp+38h+x], eax 
mov	[esp+38h+var_38], esi 
call	_h_fun
mov	[esp+38h+key], s_key 
mov	ecx, [esp+38h+var_1C]
mov	[esp+38h+x], ecx 
mov	[esp+38h+var_38], esi 
mov	[esp+38h+var_2C], eax
call	_h_fun
mov	ebp, [esp+38h+var_20]
ror	ebp, 1Fh
mov	edx, [esp+38h+var_2C]
lea	ecx, [edx+eax]
add	ecx, [l_key+28h]
xor	ebp, ecx
add	t0, [l_key+2Ch]
lea	ecx, [eax+t1*2]
xor	ecx, [esp+38h+var_18]
ror	ecx, 1
mov	[esp+38h+key], s_key 
mov	eax, ecx
ror	eax, 18h
mov	[esp+38h+x], eax 
mov	[esp+38h+var_38], esi 
mov	[esp+38h+var_28], ecx
call	_h_fun
mov	[esp+38h+key], s_key 
mov	[esp+38h+x], ebp 
mov	[esp+38h+var_38], esi 
mov	[esp+38h+var_2C], eax
call	_h_fun
mov	edx, [esp+38h+var_2C]
lea	s_key, [edx+eax]
add	edi, [l_key+20h]
add	t0, [l_key+24h]
lea	eax, [eax+t1*2]
xor	eax, [esp+38h+var_24]
ror	eax, 1
xor	ebp, [esi+4]
mov	t1, [esp+38h+out_blk]
mov	[edx], ebp
mov	ecx, [esp+38h+var_28]
xor	ecx, [l_key+4]
mov	[edx+4], ecx
xor	edi, [l_key+8]
mov	ebp, [esp+38h+var_1C]
ror	ebp, 1Fh
xor	edi, ebp
mov	[edx+8], edi
xor	eax, [l_key+0Ch]
mov	[edx+0Ch], eax
add	esp, 28h
pop	l_key
pop	esi
pop	edi
pop	ebp
retn
align 4
public _silc_twofish_cbc_decrypt
push	ebp
push	edi
push	esi
push	ebx
sub	esp, 40h
mov	esi, [esp+50h+src]
mov	edi, [esp+50h+dst]
test	byte ptr [esp+50h+len],	0Fh
jz	short loc_641FCED4
xor	eax, eax
add	esp, 40h
pop	ebx
pop	src_0
pop	dst_0
pop	ebp
retn
mov	eax, [esp+50h+iv]
mov	ebx, [eax]
mov	ebp, [eax+4]
mov	edx, [eax+8]
mov	ecx, [eax+0Ch]
mov	eax, [src_0]
mov	[esp+50h+tmp], eax
mov	eax, [src_0+4]
mov	[esp+50h+tmp+4], eax
mov	eax, [src_0+8]
mov	[esp+50h+tmp+8], eax
mov	eax, [src_0+0Ch]
mov	[esp+50h+tmp+0Ch], eax
lea	eax, [esp+50h+tmp2]
mov	[esp+50h+out_blk], eax 
lea	eax, [esp+50h+tmp]
mov	[esp+50h+in_blk], eax 
mov	eax, [esp+50h+context]
mov	[esp+50h+ctx], eax 
mov	[esp+50h+var_3C], edx
mov	[esp+50h+var_38], ecx
call	_twofish_decrypt
mov	eax, [esp+50h+tmp2]
xor	eax, ebx
mov	[esp+50h+tmp2],	eax
xor	[esp+50h+tmp2+4], ebp
mov	edx, [esp+50h+var_3C]
xor	[esp+50h+tmp2+8], edx
mov	ecx, [esp+50h+var_38]
xor	[esp+50h+tmp2+0Ch], ecx
mov	[dst_0], eax
mov	eax, [esp+50h+tmp2+4]
mov	[dst_0+4], eax
mov	eax, [esp+50h+tmp2+8]
mov	[dst_0+8], eax
mov	eax, [esp+50h+tmp2+0Ch]
mov	[dst_0+0Ch], eax
mov	ecx, [esp+50h+tmp]
mov	edx, [esp+50h+tmp+4]
mov	eax, [esp+50h+tmp+8]
mov	ebp, [esp+50h+tmp+0Ch]
cmp	[esp+50h+len], 10h
jbe	loc_641FD02D
mov	ebx, 10h
mov	[esp+50h+var_44], eax
mov	eax, ebp
mov	ebp, ecx
mov	ecx, eax
lea	src_0, [src_0+0]
mov	eax, [src_0+i]
mov	[esp+50h+tmp], eax
mov	eax, [src_0+i+4]
mov	[esp+50h+tmp+4], eax
mov	eax, [src_0+i+8]
mov	[esp+50h+tmp+8], eax
mov	eax, [src_0+i+0Ch]
mov	[esp+50h+tmp+0Ch], eax
lea	eax, [esp+50h+tmp2]
mov	[esp+50h+out_blk], eax 
lea	eax, [esp+50h+tmp]
mov	[esp+50h+in_blk], eax 
mov	eax, [esp+50h+context]
mov	[esp+50h+ctx], eax 
mov	[esp+50h+var_3C], edx
mov	[esp+50h+var_38], ecx
call	_twofish_decrypt
xor	ebp, [esp+50h+tmp2]
mov	[esp+50h+tmp2],	ebp
mov	edx, [esp+50h+var_3C]
xor	[esp+50h+tmp2+4], edx
mov	edx, [esp+50h+var_44]
xor	[esp+50h+tmp2+8], edx
mov	ecx, [esp+50h+var_38]
xor	[esp+50h+tmp2+0Ch], ecx
mov	[dst_0+i], ebp
mov	eax, [esp+50h+tmp2+4]
mov	[dst_0+i+4], eax
mov	eax, [esp+50h+tmp2+8]
mov	[dst_0+i+8], eax
mov	eax, [esp+50h+tmp2+0Ch]
mov	[dst_0+i+0Ch], eax
mov	ebp, [esp+50h+tmp]
mov	edx, [esp+50h+tmp+4]
mov	ecx, [esp+50h+tmp+8]
mov	[esp+50h+var_44], ecx
mov	ecx, [esp+50h+tmp+0Ch]
add	i, 10h
cmp	[esp+50h+len], i
ja	loc_641FCF84
mov	eax, [esp+50h+var_44]
mov	i, ecx
mov	ecx, ebp
mov	ebp, ebx
mov	ebx, [esp+50h+iv]
mov	[ebx], ecx
mov	[ebx+4], edx
mov	[ebx+8], eax
mov	[ebx+0Ch], ebp
mov	al, 1
add	esp, 40h
pop	ebx
pop	src_0
pop	dst_0
pop	ebp
retn
align 4
public _twofish_set_key
push	ebp
push	edi
push	esi
push	ebx
sub	esp, 48h
mov	ebp, [esp+58h+ctx]
mov	eax, [esp+58h+key_len]
shr	eax, 6
mov	[esp+58h+var_38], key_len_0
mov	[ebp+0], key_len_0
test	key_len_0, key_len_0
jz	loc_641FD374
lea	key_len_0, [ctx_0+key_len_0*4+0A0h]
mov	[esp+58h+var_40], eax
xor	eax, eax
lea	edx, [esp+58h+me_key]
mov	[esp+58h+var_48], edx
lea	edx, [esp+58h+mo_key]
mov	[esp+58h+var_44], edx
mov	[esp+58h+var_34], ctx_0
xchg	ax, ax
mov	ebp, [esp+58h+in_key]
mov	ebx, [ebp+i*8+0]
mov	edx, [esp+58h+var_48]
mov	[edx+i*4], a
mov	ecx, [ebp+i*8+4]
mov	ebp, [esp+58h+var_44]
mov	[ebp+i*4+0], b
mov	edx, b
shr	edx, 18h
mov	esi, a
shl	esi, 8
lea	edi, [edx+edx]
mov	ebp, edi
xor	ebp, 14Dh
test	dl, dl
jns	short loc_641FD0C2
mov	edi, ebp
mov	ebp, edx
shr	ebp, 1
xor	ebp, edi
mov	[esp+58h+var_4C], ebp
xor	ebp, 0A6h
mov	[esp+58h+var_3C], ebp
test	dl, 1
jnz	short loc_641FD0DF
mov	ebp, [esp+58h+var_4C]
shr	ebx, 18h
shl	b, 8
or	ebx, ecx
xor	ebx, edx
mov	edx, edi
shl	edx, 10h
xor	ebx, edx
mov	edx, ebp
shl	edx, 8
shl	ebp, 18h
or	edx, ebp
xor	edx, ebx
mov	ecx, b
shr	ecx, 18h
mov	ebx, a
shl	ebx, 8
lea	edi, [ecx+ecx]
mov	ebp, edi
xor	ebp, 14Dh
test	cl, cl
jns	short loc_641FD117
mov	edi, ebp
mov	ebp, ecx
shr	ebp, 1
xor	ebp, edi
mov	[esp+58h+var_4C], ebp
xor	ebp, 0A6h
mov	[esp+58h+var_3C], ebp
test	cl, 1
jnz	short loc_641FD134
mov	ebp, [esp+58h+var_4C]
shl	b, 8
shr	esi, 18h
or	edx, esi
xor	edx, ecx
mov	ecx, edi
shl	ecx, 10h
xor	edx, ecx
mov	ecx, ebp
shl	ecx, 8
shl	ebp, 18h
or	ecx, ebp
xor	ecx, edx
mov	edx, b
shr	edx, 18h
lea	esi, [edx+edx]
mov	edi, esi
xor	edi, 14Dh
test	dl, dl
js	short loc_641FD167
mov	edi, esi
mov	esi, edx
shr	esi, 1
xor	esi, edi
mov	ebp, esi
xor	ebp, 0A6h
test	dl, 1
jz	short loc_641FD17C
mov	esi, ebp
shl	b, 8
mov	ebp, a
shr	ebp, 18h
or	ecx, ebp
xor	ecx, edx
mov	edx, edi
shl	edx, 10h
xor	edx, ecx
mov	ecx, esi
shl	ecx, 8
shl	esi, 18h
or	ecx, esi
xor	ecx, edx
mov	edx, b
shr	edx, 18h
lea	esi, [edx+edx]
mov	edi, esi
xor	edi, 14Dh
test	dl, dl
jns	short loc_641FD1B1
mov	esi, edi
mov	edi, edx
shr	edi, 1
xor	edi, esi
mov	ebp, edi
xor	ebp, 0A6h
test	dl, 1
jz	short loc_641FD1C6
mov	edi, ebp
shl	b, 8
shl	a, 8
shr	ebx, 18h
or	ecx, ebx
xor	ecx, edx
mov	edx, esi
shl	edx, 10h
xor	ecx, edx
mov	edx, edi
shl	edx, 8
shl	edi, 18h
or	edx, edi
xor	edx, ecx
mov	ecx, b
shr	ecx, 18h
lea	ebx, [ecx+ecx]
mov	esi, ebx
xor	esi, 14Dh
test	cl, cl
jns	short loc_641FD1FC
mov	ebx, esi
mov	esi, ecx
shr	esi, 1
xor	esi, ebx
mov	edi, esi
xor	edi, 0A6h
test	cl, 1
jz	short loc_641FD211
mov	esi, edi
shl	b, 8
xor	edx, ecx
mov	ecx, ebx
shl	ecx, 10h
xor	edx, ecx
mov	ecx, esi
shl	ecx, 8
shl	esi, 18h
or	ecx, esi
xor	ecx, edx
mov	edx, b
shr	edx, 18h
lea	ebx, [edx+edx]
mov	esi, ebx
xor	esi, 14Dh
test	dl, dl
js	short loc_641FD23F
mov	esi, ebx
mov	ebx, edx
shr	ebx, 1
xor	ebx, esi
mov	edi, ebx
xor	edi, 0A6h
test	dl, 1
jnz	short loc_641FD254
mov	edi, ebx
shl	b, 8
xor	ecx, edx
mov	ebx, esi
shl	ebx, 10h
xor	ecx, ebx
mov	edx, edi
shl	edx, 8
mov	ebx, edi
shl	ebx, 18h
or	ebx, edx
xor	ebx, ecx
mov	edx, b
shr	edx, 18h
lea	ecx, [edx+edx]
mov	esi, ecx
xor	esi, 14Dh
test	dl, dl
js	short loc_641FD284
mov	esi, ecx
mov	ecx, edx
shr	ecx, 1
xor	ecx, esi
mov	edi, ecx
xor	edi, 0A6h
test	dl, 1
jnz	short loc_641FD299
mov	edi, ecx
shl	b, 8
xor	ebx, edx
mov	ecx, esi
shl	ecx, 10h
xor	ebx, ecx
mov	edx, edi
shl	edx, 8
mov	ecx, edi
shl	ecx, 18h
or	ecx, edx
xor	ecx, ebx
mov	edx, b
shr	edx, 18h
lea	ebx, [edx+edx]
mov	esi, ebx
xor	esi, 14Dh
test	dl, dl
jns	short loc_641FD2C9
mov	ebx, esi
mov	esi, edx
shr	esi, 1
xor	esi, ebx
mov	edi, esi
xor	edi, 0A6h
test	dl, 1
jz	short loc_641FD2DE
mov	esi, edi
shl	b, 8
xor	ecx, edx
shl	ebx, 10h
xor	ecx, ebx
mov	edx, esi
shl	edx, 8
shl	esi, 18h
or	esi, edx
xor	esi, ecx
mov	edx, [esp+58h+var_40]
mov	[edx], esi
inc	i
sub	edx, 4
mov	[esp+58h+var_40], edx
cmp	i, [esp+58h+var_38]
jnz	loc_641FD08C
mov	ebp, [esp+58h+var_34]
mov	esi, ctx_0
xor	ebx, ebx
mov	i, [esp+58h+var_48]
mov	[esp+58h+key], eax 
mov	[esp+58h+x], ebx 
mov	[esp+58h+var_58], ctx_0	
call	_h_fun
mov	edi, eax
mov	edx, [esp+58h+var_44]
mov	[esp+58h+key], edx 
lea	eax, [ebx+1010101h]
mov	[esp+58h+x], eax 
mov	[esp+58h+var_58], ctx_0	
call	_h_fun
rol	eax, 8
lea	edx, [b+a]
mov	[esi+4], edx
lea	b, [a+b*2]
ror	eax, 17h
mov	[esi+8], eax
add	ebx, 2020202h
add	esi, 8
cmp	ebx, 28282828h
jnz	short loc_641FD314
lea	eax, [ctx_0+4]
add	esp, 48h
pop	ebx
pop	esi
pop	a
pop	ctx_0
retn
align 4
lea	key_len_0, [esp+58h+me_key]
mov	[esp+58h+var_48], eax
lea	edx, [esp+58h+mo_key]
mov	[esp+58h+var_44], edx
jmp	short loc_641FD310
align 4
public _silc_twofish_cbc_set_key
push	edi
push	esi
push	ebx
sub	esp, 2Ch
mov	esi, [esp+38h+key]
mov	edi, [esp+38h+keylen]
mov	ebx, edi
shr	ebx, 5
jz	short loc_641FD3CC
xor	eax, eax
lea	ecx, [esp+38h+k]
nop
mov	edx, [key_0+_i*4]
mov	[ecx+_i*4], edx
inc	_i
cmp	_i, ebx
jnz	short loc_641FD3A4
mov	[esp+38h+key_len], keylen_0 
mov	[esp+38h+in_key], ecx 
mov	_i, [esp+38h+context]
mov	[esp+38h+ctx], eax 
call	_twofish_set_key
mov	al, 1
add	esp, 2Ch
pop	ebx
pop	key_0
pop	keylen_0
retn
lea	ecx, [esp+38h+k]
jmp	short loc_641FD3AF
align 4
public _silc_skr_ref_public_key
push	ebp
mov	ebp, esp
push	esi
push	ebx
sub	esp, 10h
mov	ebx, [ebp+skr]
mov	esi, [ebp+key]
mov	eax, [ebx+4]
mov	[esp], eax	
call	_silc_mutex_lock
inc	dword ptr [esi+0Ch]
mov	eax, [ebx+4]
mov	[ebp+skr], eax
add	esp, 10h
pop	ebx
pop	esi
leave
jmp	_silc_mutex_unlock
align 4
push	ebp
mov	ebp, esp
push	esi
push	ebx
sub	esp, 10h
mov	ebx, [ebp+context]
mov	edx, [ebp+user_context]
test	ebx, ebx
jz	short loc_641FD422
mov	eax, [user_context_0+4]
test	eax, eax
jz	short loc_641FD42C
cmp	eax, [context_0+8]
jz	short loc_641FD42C
			
add	esp, 10h
pop	context_0
pop	esi
leave
retn
align 4
			
mov	eax, [user_context_0+8]
test	eax, eax
jz	short loc_641FD439
mov	ecx, [context_0]
test	ecx, ecx
jnz	short loc_641FD484
			
mov	esi, [user_context_0]
mov	dword ptr [esp], 0Ch 
call	_silc_malloc
test	eax, eax
jz	short loc_641FD422
mov	[eax], context_0
mov	edx, [esi]
test	edx, edx
jz	short loc_641FD48C
movzx	edx, word ptr [esi+0Ch]
mov	ecx, [esi+4]
mov	[ecx+edx], eax
test	byte ptr [esi+10h], 1
jz	short loc_641FD46D
movzx	ecx, word ptr [esi+0Eh]
mov	context_0, [esi+4]
mov	[eax+ecx], ebx
mov	[esi+4], eax
mov	dword ptr [eax+edx], 0
add	dword ptr [esi+10h], 4
add	esp, 10h
pop	ebx
pop	esi
leave
retn
align 4
test	ecx, eax
jnz	short loc_641FD439
jmp	short loc_641FD422
align 4
mov	[esi], eax
movzx	edx, word ptr [esi+0Ch]
jmp	short loc_641FD45D
public _silc_skr_find_set_usage
			
push	ebp
mov	ebp, esp
sub	esp, 18h
mov	eax, [ebp+usage]
test	eax, eax
jnz	short loc_641FD4A8
mov	al, 1
leave
retn
align 4
mov	[esp+8], usage_0 
mov	dword ptr [esp+4], 9 
mov	usage_0, [ebp+find]
mov	eax, [eax]
mov	[esp], eax	
call	_silc_hash_table_add
leave
retn
align 4
public _silc_skr_find_set_context
push	ebp
mov	ebp, esp
sub	esp, 18h
mov	eax, [ebp+context]
test	eax, eax
jz	short loc_641FD4EC
mov	[esp+8], context_0 
mov	dword ptr [esp+4], 8 
mov	context_0, [ebp+find]
mov	eax, [eax]
mov	[esp], eax	
call	_silc_hash_table_add
leave
retn
mov	al, 1
leave
retn
public _silc_skr_find_set_pkcs_type
			
push	ebp
mov	ebp, esp
sub	esp, 18h
mov	eax, [ebp+type]
mov	[esp+8], eax	
mov	dword ptr [esp+4], 0 
mov	eax, [ebp+find]
mov	eax, [eax]
mov	[esp], eax	
call	_silc_hash_table_add
leave
retn
public _silc_skr_find_set_public_key
			
push	ebp
mov	ebp, esp
sub	esp, 18h
mov	eax, [ebp+public_key]
mov	[esp], eax	
call	_silc_pkcs_public_key_copy
test	eax, eax
jz	short locret_641FD542
mov	[esp+8], pk	
mov	dword ptr [esp+4], 7 
mov	pk, [ebp+find]
mov	eax, [eax]
mov	[esp], eax	
call	_silc_hash_table_add
leave
retn
public _silc_skr_find_set_country
push	ebp
mov	ebp, esp
push	edi
sub	esp, 14h
mov	edx, [ebp+country]
xor	eax, eax
mov	ecx, 0FFFFFFFFh
mov	edi, edx
repne scasb
not	ecx
dec	ecx
mov	[esp+4], ecx	
mov	[esp], edx	
call	_silc_memdup
test	eax, eax
jz	short loc_641FD585
mov	[esp+8], c	
mov	dword ptr [esp+4], 6 
mov	c, [ebp+find]
mov	eax, [eax]
mov	[esp], eax	
call	_silc_hash_table_add
add	esp, 14h
pop	edi
leave
retn
align 4
public _silc_skr_find_set_org
push	ebp
mov	ebp, esp
push	edi
sub	esp, 14h
mov	edx, [ebp+org]
xor	eax, eax
mov	ecx, 0FFFFFFFFh
mov	edi, edx
repne scasb
not	ecx
dec	ecx
mov	[esp+4], ecx	
mov	[esp], edx	
call	_silc_memdup
test	eax, eax
jz	short loc_641FD5CD
mov	[esp+8], c	
mov	dword ptr [esp+4], 5 
mov	c, [ebp+find]
mov	eax, [eax]
mov	[esp], eax	
call	_silc_hash_table_add
add	esp, 14h
pop	edi
leave
retn
align 4
public _silc_skr_find_set_email
push	ebp
mov	ebp, esp
push	edi
sub	esp, 14h
mov	edx, [ebp+email]
xor	eax, eax
mov	ecx, 0FFFFFFFFh
mov	edi, edx
repne scasb
not	ecx
dec	ecx
mov	[esp+4], ecx	
mov	[esp], edx	
call	_silc_memdup
test	eax, eax
jz	short loc_641FD615
mov	[esp+8], c	
mov	dword ptr [esp+4], 4 
mov	c, [ebp+find]
mov	eax, [eax]
mov	[esp], eax	
call	_silc_hash_table_add
add	esp, 14h
pop	edi
leave
retn
align 4
public _silc_skr_find_set_realname
push	ebp
mov	ebp, esp
push	edi
sub	esp, 14h
mov	edx, [ebp+realname]
xor	eax, eax
mov	ecx, 0FFFFFFFFh
mov	edi, edx
repne scasb
not	ecx
dec	ecx
mov	[esp+4], ecx	
mov	[esp], edx	
call	_silc_memdup
test	eax, eax
jz	short loc_641FD65D
mov	[esp+8], c	
mov	dword ptr [esp+4], 3 
mov	c, [ebp+find]
mov	eax, [eax]
mov	[esp], eax	
call	_silc_hash_table_add
add	esp, 14h
pop	edi
leave
retn
align 4
public _silc_skr_find_set_host
push	ebp
mov	ebp, esp
push	edi
sub	esp, 14h
mov	edx, [ebp+host]
xor	eax, eax
mov	ecx, 0FFFFFFFFh
mov	edi, edx
repne scasb
not	ecx
dec	ecx
mov	[esp+4], ecx	
mov	[esp], edx	
call	_silc_memdup
test	eax, eax
jz	short loc_641FD6A5
mov	[esp+8], c	
mov	dword ptr [esp+4], 2 
mov	c, [ebp+find]
mov	eax, [eax]
mov	[esp], eax	
call	_silc_hash_table_add
add	esp, 14h
pop	edi
leave
retn
align 4
public _silc_skr_find_set_username
push	ebp
mov	ebp, esp
push	edi
sub	esp, 14h
mov	edx, [ebp+username]
xor	eax, eax
mov	ecx, 0FFFFFFFFh
mov	edi, edx
repne scasb
not	ecx
dec	ecx
mov	[esp+4], ecx	
mov	[esp], edx	
call	_silc_memdup
test	eax, eax
jz	short loc_641FD6ED
mov	[esp+8], c	
mov	dword ptr [esp+4], 1 
mov	c, [ebp+find]
mov	eax, [eax]
mov	[esp], eax	
call	_silc_hash_table_add
add	esp, 14h
pop	edi
leave
retn
align 4
public _silc_skr_find_free
			
push	ebp
mov	ebp, esp
push	ebx
sub	esp, 14h
mov	ebx, [ebp+find]
mov	eax, [ebx]
test	eax, eax
jz	short loc_641FD70C
mov	[esp], eax	
call	_silc_hash_table_free
mov	[ebp+find], find_0
add	esp, 14h
pop	find_0
leave
jmp	_silc_free
align 4
			
push	ebp
mov	ebp, esp
push	edi
push	esi
push	ebx
sub	esp, 1Ch
mov	ebx, skr
mov	esi, type
mov	edi, type_data
mov	dword ptr [esp+4], 8 
mov	dword ptr [esp], 1 
call	_silc_calloc
test	eax, eax
jz	short loc_641FD75E
mov	[eax], type
mov	[eax+4], type_data
mov	edx, [ebp+key]
mov	[esp+8], edx	
mov	[esp+4], eax	
mov	eax, [skr+8]
mov	[esp], eax	
call	_silc_hash_table_add
add	esp, 1Ch
pop	skr
pop	type
pop	type_data
leave
retn
align 4
public _silc_skr_find_alloc
			
push	ebp
mov	ebp, esp
push	ebx
sub	esp, 24h
mov	dword ptr [esp+4], 4 
mov	dword ptr [esp], 1 
call	_silc_calloc
mov	ebx, eax
test	eax, eax
jz	short loc_641FD7D3
mov	dword ptr [esp+1Ch], 1 
mov	dword ptr [esp+18h], 0 
mov	dword ptr [esp+14h], offset _silc_skr_find_destructor 
mov	dword ptr [esp+10h], 0 
mov	dword ptr [esp+0Ch], 0 
mov	dword ptr [esp+8], 0 
mov	dword ptr [esp+4], offset _silc_hash_uint 
mov	dword ptr [esp], 0 
call	_silc_hash_table_alloc
mov	[find],	eax
test	eax, eax
jz	short loc_641FD7DB
			
mov	eax, find
add	esp, 24h
pop	find
leave
retn
mov	[esp], find
call	_silc_skr_find_free
xor	find, find
jmp	short loc_641FD7D3
align 4
push	ebp
mov	ebp, esp
sub	esp, 8
mov	eax, [ebp+key]
mov	edx, [ebp+context]
mov	ecx, [ebp+user_context]
cmp	eax, 7
jz	short loc_641FD818
ja	short loc_641FD810
test	key_0, key_0
jz	short locret_641FD815
dec	user_context_0
jz	short locret_641FD815
mov	[ebp+key], context_0
leave
jmp	_silc_free
align 10h
cmp	key_0, 9
ja	short loc_641FD802
			
leave
retn
align 4
mov	[ebp+key], context_0
leave
jmp	_silc_pkcs_public_key_free
align 4
public _silc_skr_unref_public_key
push	ebp
mov	ebp, esp
push	esi
push	ebx
sub	esp, 10h
mov	esi, [ebp+skr]
mov	ebx, [ebp+key]
mov	eax, [esi+4]
mov	[esp], eax	
call	_silc_mutex_lock
mov	eax, [ebx+0Ch]
dec	eax
mov	[ebx+0Ch], eax
test	eax, eax
jnz	short loc_641FD85B
mov	eax, [key_0+4]
mov	[esp], eax	
call	_silc_pkcs_public_key_free
mov	[esp], key_0	
call	_silc_free
mov	eax, [skr_0+4]
mov	[ebp+skr], eax
add	esp, 10h
pop	key_0
pop	skr_0
leave
jmp	_silc_mutex_unlock
public _silc_skr_uninit
push	ebp
mov	ebp, esp
push	ebx
sub	esp, 14h
mov	ebx, [ebp+skr]
mov	eax, [ebx+8]
test	eax, eax
jz	short loc_641FD885
mov	[esp], eax	
call	_silc_hash_table_free
mov	eax, [skr_0+4]
mov	[ebp+skr], eax
add	esp, 14h
pop	skr_0
leave
jmp	_silc_mutex_free
align 4
public _silc_skr_init
push	ebp
mov	ebp, esp
push	ebx
sub	esp, 24h
mov	ebx, [ebp+skr]
lea	eax, [ebx+4]
mov	[esp], eax	
call	_silc_mutex_alloc
mov	dword ptr [esp+1Ch], 1 
mov	dword ptr [esp+18h], 0 
mov	dword ptr [esp+14h], offset _silc_skr_destructor 
mov	dword ptr [esp+10h], 0 
mov	dword ptr [esp+0Ch], offset _silc_skr_compare 
mov	dword ptr [esp+8], 0 
mov	dword ptr [esp+4], offset _silc_skr_hash 
mov	dword ptr [esp], 0 
call	_silc_hash_table_alloc
mov	[ebx+8], eax
test	eax, eax
setnz	al
add	esp, 24h
pop	ebx
leave
retn
align 10h
			
push	ebp
mov	ebp, esp
push	ebx
sub	esp, 4
mov	edx, [ebp+key1]
mov	ecx, [ebp+key2]
mov	ebx, [ebp+user_context]
mov	eax, [edx]
cmp	eax, [ecx]
jz	short loc_641FD91C
xor	eax, eax
pop	key2_0
pop	user_context_0
leave
retn
cmp	eax, 7
jz	short loc_641FD938
cmp	eax, 8
jz	short loc_641FD92A
test	eax, eax
jnz	short loc_641FD950
mov	eax, [key1_0+4]
cmp	eax, [key2_0+4]
setz	al
pop	key2_0
pop	user_context_0
leave
retn
align 4
mov	[ebp+user_context], user_context_0
mov	eax, [key2_0+4]
mov	[ebp+key2], eax
mov	eax, [key1_0+4]
mov	[ebp+key1], eax
pop	eax
pop	user_context_0
leave
jmp	_silc_hash_public_key_compare
align 10h
mov	eax, [key2_0+4]
mov	[ebp+key2], eax
mov	eax, [key1_0+4]
mov	[ebp+key1], eax
pop	user_context_0
pop	ebx
leave
jmp	_silc_utf8_strcasecmp
			
push	ebp
mov	ebp, esp
push	ebx
sub	esp, 14h
mov	eax, [ebp+key]
mov	edx, [ebp+user_context]
mov	ebx, [eax]
cmp	ebx, 7
jz	short loc_641FD9A8
cmp	ebx, 8
jz	short loc_641FD998
test	ebx, ebx
jz	short loc_641FD998
mov	[esp+4], user_context_0	
mov	key_0, [key_0+4]
mov	[esp], eax	
call	_silc_hash_string
add	eax, ebx
add	esp, 14h
pop	ebx
leave
retn
			
mov	key_0, [key_0+4]
xor	eax, ebx
add	eax, ebx
add	esp, 14h
pop	ebx
leave
retn
align 4
mov	[esp+4], user_context_0	
mov	key_0, [key_0+4]
mov	[esp], eax	
call	_silc_hash_public_key
add	eax, 7
add	esp, 14h
pop	ebx
leave
retn
public _silc_skr_free
push	ebp
mov	ebp, esp
push	ebx
sub	esp, 14h
mov	ebx, [ebp+skr]
mov	eax, [ebx+8]
test	eax, eax
jz	short loc_641FD9D9
mov	[esp], eax	
call	_silc_hash_table_free
mov	eax, [skr_0+4]
mov	[esp], eax	
call	_silc_mutex_free
mov	[ebp+skr], skr_0
add	esp, 14h
pop	skr_0
leave
jmp	_silc_free
align 4
public _silc_skr_alloc
push	ebp
mov	ebp, esp
push	ebx
sub	esp, 24h
mov	dword ptr [esp+4], 0Ch 
mov	dword ptr [esp], 1 
call	_silc_calloc
mov	ebx, eax
test	eax, eax
jz	short loc_641FDA6B
lea	skr, [skr+4]
mov	[esp], eax	
call	_silc_mutex_alloc
mov	dword ptr [esp+1Ch], 1 
mov	dword ptr [esp+18h], 0 
mov	dword ptr [esp+14h], offset _silc_skr_destructor 
mov	dword ptr [esp+10h], 0 
mov	dword ptr [esp+0Ch], offset _silc_skr_compare 
mov	dword ptr [esp+8], 0 
mov	dword ptr [esp+4], offset _silc_skr_hash 
mov	dword ptr [esp], 0 
call	_silc_hash_table_alloc
mov	[skr+8], eax
test	eax, eax
jz	short loc_641FDA74
			
mov	eax, skr
add	esp, 24h
pop	skr
leave
retn
align 4
mov	[esp], skr	
call	_silc_skr_free
xor	skr, skr
jmp	short loc_641FDA6B
			
push	ebp
mov	ebp, esp
push	esi
push	ebx
sub	esp, 10h
mov	esi, [ebp+key]
mov	ebx, [ebp+context]
mov	pkcs_type, [ebx+4]
mov	[esp], pkcs_type 
call	_silc_pkcs_get_type
mov	edx, [esi]
cmp	edx, 7
jz	short loc_641FDAB4
mov	ecx, [key_0+4]
ja	short loc_641FDAD0
test	edx, edx
jz	short loc_641FDAB4
dec	pkcs_type
jz	short loc_641FDAB4
mov	[esp], ecx	
call	_silc_free
			
mov	[esp], key_0	
call	_silc_free
mov	pkcs_type, [context_0+0Ch]
dec	pkcs_type
mov	[context_0+0Ch], pkcs_type
test	pkcs_type, pkcs_type
jle	short loc_641FDAD8
add	esp, 10h
pop	context_0
pop	key_0
leave
retn
align 10h
cmp	edx, 9
jbe	short loc_641FDAB4
jmp	short loc_641FDAA9
align 4
mov	pkcs_type, [context_0+4]
mov	[esp], pkcs_type 
call	_silc_pkcs_public_key_free
mov	[ebp+key], context_0
add	esp, 10h
pop	context_0
pop	key_0
leave
jmp	_silc_free
align 4
			
push	ebp
mov	ebp, esp
push	edi
push	esi
push	ebx
sub	esp, 6Ch
mov	ebx, skr
mov	esi, status
mov	edi, [ebp+results]
mov	dword ptr [esp], 1Ch 
mov	[ebp+var_3C], type
call	_silc_malloc
test	eax, eax
mov	ecx, [ebp+var_3C]
jz	loc_641FDC68
mov	dword ptr [eax+18h], 0
mov	dword ptr [eax+14h], 0
mov	edx, [eax+10h]
and	edx, 3
mov	[eax+10h], edx
mov	word ptr [eax+0Ch], 4
mov	word ptr [eax+0Eh], 8
mov	byte ptr [eax+10h], 1
mov	dword ptr [eax+8], 0
mov	dword ptr [eax+4], 0
mov	dword ptr [eax], 0
mov	[ebp+f.list], eax
mov	eax, [ebp+key_context]
mov	[ebp+f.key_context], eax
mov	eax, [ebp+usage]
mov	[ebp+f.usage], eax
mov	[ebp+find.type], ecx
mov	eax, [ebp+type_data]
mov	[ebp+find.data], eax
lea	eax, [ebp+f]
mov	[esp+0Ch], eax	
mov	dword ptr [esp+8], offset _silc_skr_find_foreach 
lea	eax, [ebp+find]
mov	[esp+4], eax	
mov	eax, [skr+8]
mov	[esp], eax	
call	_silc_hash_table_find_foreach
mov	skr, [ebp+f.list]
mov	eax, [ebx+10h]
shr	eax, 2
jz	short loc_641FDBB4
test	results_0, results_0
jz	loc_641FDC80
mov	[results_0], ebx
mov	al, 1
add	esp, 6Ch
pop	ebx
pop	status
pop	results_0
leave
retn
align 4
or	dword ptr [status], 8
mov	ecx, [ebx]
mov	[ebx+8], ecx
and	byte ptr [ebx+10h], 0FDh
test	ecx, ecx
jz	short loc_641FDC0B
test	byte ptr [ebx+10h], 2
jz	short loc_641FDC20
movzx	eax, word ptr [ebx+0Eh]
mov	eax, [ecx+eax]
mov	[ebx+8], eax
mov	eax, [ebx]
test	eax, eax
jz	short loc_641FDBF7
cmp	ecx, eax
jz	loc_641FDC75
movzx	results_0, word	ptr [ebx+0Ch]
jmp	short loc_641FDBEE
cmp	ecx, esi
jz	short loc_641FDC2C
mov	eax, esi
lea	edx, [eax+edi]
mov	status,	[edx]
test	esi, esi
jnz	short loc_641FDBE8
cmp	ecx, [ebx+4]
jz	short loc_641FDC59
			
mov	[esp], ecx	
call	_silc_free
mov	ecx, [ebx+8]
test	ecx, ecx
jnz	short loc_641FDBC4
mov	[esp], ebx	
call	_silc_free
xor	eax, eax
add	esp, 6Ch
pop	ebx
pop	status
pop	edi
leave
retn
align 10h
movzx	eax, word ptr [ebx+0Ch]
mov	eax, [ecx+eax]
jmp	short loc_641FDBD1
align 4
mov	[ebp+var_5C], edx
mov	status,	[ecx+edi]
mov	edx, [ebp+var_5C]
mov	[edx], esi
test	esi, esi
jz	short loc_641FDC4B
test	byte ptr [ebx+10h], 1
jz	short loc_641FDC4B
movzx	edi, word ptr [ebx+0Eh]
mov	edx, [ecx+edi]
mov	[esi+edi], edx
			
cmp	ecx, [ebx+8]
jz	short loc_641FDC5E
sub	dword ptr [ebx+10h], 4
cmp	ecx, [ebx+4]
jnz	short loc_641FDBFC
mov	[ebx+4], eax
jmp	short loc_641FDBFC
mov	esi, [ebp+var_5C]
mov	edx, [esi]
mov	[ebx+8], edx
jmp	short loc_641FDC50
or	dword ptr [status], 10h
xor	eax, eax
add	esp, 6Ch
pop	skr
pop	status
pop	results_0
leave
retn
movzx	results_0, word	ptr [ebx+0Ch]
mov	[ebp+var_5C], ebx
xor	eax, eax
jmp	short loc_641FDC2F
mov	ecx, [ebx]
mov	[ebx+8], ecx
and	byte ptr [ebx+10h], 0FDh
lea	status,	[status+0]
test	ecx, ecx
jz	short loc_641FDD0F
test	byte ptr [ebx+10h], 2
jz	short loc_641FDCD4
movzx	eax, word ptr [ebx+0Eh]
mov	eax, [ecx+eax]
mov	[ebx+8], eax
mov	eax, [ebx]
test	eax, eax
jz	short loc_641FDCBF
cmp	ecx, eax
jz	short loc_641FDD28
movzx	results_0, word	ptr [ebx+0Ch]
jmp	short loc_641FDCB6
cmp	ecx, esi
jz	short loc_641FDCE0
mov	eax, esi
lea	edx, [eax+edi]
mov	status,	[edx]
test	esi, esi
jnz	short loc_641FDCB0
			
cmp	ecx, [ebx+4]
jz	short loc_641FDD0A
mov	[esp], ecx	
call	_silc_free
mov	ecx, [ebx+8]
jmp	short loc_641FDC8C
align 4
movzx	eax, word ptr [ebx+0Ch]
mov	eax, [ecx+eax]
jmp	short loc_641FDC9D
align 10h
mov	[ebp+var_5C], edx
mov	status,	[ecx+edi]
mov	edi, [ebp+var_5C]
mov	[edi], esi
test	esi, esi
jz	short loc_641FDCFF
test	byte ptr [ebx+10h], 1
jz	short loc_641FDCFF
movzx	edx, word ptr [ebx+0Eh]
mov	edi, [ecx+edx]
mov	[esi+edx], edi
			
cmp	ecx, [ebx+8]
jz	short loc_641FDD1E
sub	dword ptr [ebx+10h], 4
jmp	short loc_641FDCBF
mov	[ebx+4], eax
jmp	short loc_641FDCC4
mov	[esp], ebx	
call	_silc_free
mov	al, 1
jmp	loc_641FDBA9
mov	esi, [ebp+var_5C]
mov	edx, [esi]
mov	[ebx+8], edx
jmp	short loc_641FDD04
movzx	results_0, word	ptr [ebx+0Ch]
mov	[ebp+var_5C], ebx
xor	eax, eax
jmp	short loc_641FDCE3
align 4
public _silc_skr_add_public_key_simple
push	ebp
mov	ebp, esp
push	edi
push	esi
push	ebx
sub	esp, 3Ch
mov	esi, [ebp+skr]
mov	ebx, [ebp+public_key]
mov	edi, [ebp+key_context]
test	ebx, ebx
jz	short loc_641FDD55
mov	[esp], public_key_0 
call	_silc_pkcs_get_type
dec	type
jz	short loc_641FDD64
mov	type, 2
			
add	esp, 3Ch
pop	public_key_0
pop	skr_0
pop	key_context_0
leave
retn
align 4
mov	[ebp+status], 2
mov	type, [skr_0+4]
mov	[esp], type	
call	_silc_mutex_lock
lea	edx, [ebp+status] 
mov	dword ptr [esp+0Ch], 0 
mov	[esp+8], key_context_0 
mov	dword ptr [esp+4], 0 
mov	[esp], public_key_0 
mov	ecx, 7		
mov	type, skr_0	
call	_silc_skr_find_entry
test	al, al
jnz	loc_641FDE88
mov	dword ptr [esp+4], 10h 
mov	dword ptr [esp], 1 
call	_silc_calloc
mov	edx, type
test	type, type
jz	loc_641FDEBC
mov	type, [ebp+usage]
mov	[edx], type
mov	[edx+4], public_key_0
mov	[edx+8], key_context_0
mov	dword ptr [esp+4], 8 
mov	dword ptr [esp], 1 
mov	[ebp+context], edx
call	_silc_calloc
test	type, type
mov	edx, [ebp+context]
jz	loc_641FDEA4
mov	dword ptr [type], 7
mov	[type+4], public_key_0
mov	[esp+8], edx	
mov	[esp+4], type	
mov	type, [skr_0+8]
mov	[esp], type	
call	_silc_hash_table_add
test	al, al
mov	edx, [ebp+context]
jz	loc_641FDEA4
inc	dword ptr [edx+0Ch]
test	key_context_0, key_context_0
jz	short loc_641FDE5E
mov	dword ptr [esp+4], 8 
mov	dword ptr [esp], 1 
call	_silc_calloc
test	type, type
mov	edx, [ebp+context]
jz	short loc_641FDEA4
mov	dword ptr [type], 8
mov	[type+4], key_context_0
mov	[esp+8], edx	
mov	[esp+4], type	
mov	type, [skr_0+8]
mov	[esp], type	
call	_silc_hash_table_add
test	al, al
mov	edx, [ebp+context]
jz	short loc_641FDEA4
inc	dword ptr [edx+0Ch]
mov	type, [skr_0+4]
mov	[esp], type	
mov	[ebp+context], edx
call	_silc_mutex_unlock
mov	edx, [ebp+return_key]
test	edx, edx
mov	edx, [ebp+context]
jz	short loc_641FDE7B
mov	type, [ebp+return_key]
mov	[type],	edx
mov	type, 1
jmp	loc_641FDD5A
align 4
mov	type, [skr_0+4]
mov	[esp], type	
call	_silc_mutex_unlock
mov	type, [ebp+status]
or	type, 4
add	esp, 3Ch
pop	public_key_0
pop	skr_0
pop	key_context_0
leave
retn
align 4
			
mov	type, [skr_0+4]
mov	[esp], type	
call	_silc_mutex_unlock
mov	type, [ebp+status]
add	esp, 3Ch
pop	public_key_0
pop	skr_0
pop	key_context_0
leave
retn
align 4
mov	type, [skr_0+4]
mov	[esp], type	
call	_silc_mutex_unlock
mov	type, [ebp+status]
or	type, 10h
jmp	loc_641FDD5A
align 4
public _silc_skr_add_public_key
push	ebp
mov	ebp, esp
push	edi
push	esi
push	ebx
sub	esp, 3Ch
mov	esi, [ebp+skr]
mov	ebx, [ebp+public_key]
test	ebx, ebx
jz	short loc_641FDEF2
mov	[esp], public_key_0 
call	_silc_pkcs_get_type
dec	type
jz	short loc_641FDF00
mov	type, 2
			
add	esp, 3Ch
pop	ebx
pop	skr_0
pop	edi
leave
retn
align 10h
mov	[ebp+status], 2
mov	[esp+4], public_key_0 
mov	dword ptr [esp], 1 
call	_silc_pkcs_get_context
mov	[ebp+var_2C], type
mov	type, [skr_0+4]
mov	[esp], type	
call	_silc_mutex_lock
lea	edx, [ebp+status] 
mov	dword ptr [esp+0Ch], 0 
mov	type, [ebp+key_context]
mov	[esp+8], type	
mov	dword ptr [esp+4], 0 
mov	[esp], public_key_0 
mov	ecx, 7		
mov	type, skr_0	
call	_silc_skr_find_entry
test	al, al
jnz	loc_641FE120
mov	dword ptr [esp+4], 10h 
mov	dword ptr [esp], 1 
call	_silc_calloc
mov	edi, type
test	type, type
jz	loc_641FE154
mov	type, [ebp+usage]
mov	[edi], type
mov	[edi+4], public_key_0
mov	type, [ebp+key_context]
mov	[edi+8], type
mov	dword ptr [esp+4], 8 
mov	dword ptr [esp], 1 
call	_silc_calloc
test	type, type
jz	loc_641FE13C
mov	dword ptr [type], 7
mov	[type+4], public_key_0
mov	[esp+8], edi	
mov	[esp+4], type	
mov	type, [skr_0+8]
mov	[esp], type	
call	_silc_hash_table_add
test	al, al
jz	loc_641FE13C
inc	dword ptr [edi+0Ch]
mov	dword ptr [esp+4], 8 
mov	dword ptr [esp], 1 
call	_silc_calloc
test	type, type
jz	loc_641FE13C
mov	dword ptr [type], 0
mov	dword ptr [type+4], 1
mov	[esp+8], edi	
mov	[esp+4], type	
mov	type, [skr_0+8]
mov	[esp], type	
call	_silc_hash_table_add
test	al, al
jz	loc_641FE13C
inc	dword ptr [edi+0Ch]
mov	type, [ebp+var_2C]
mov	ecx, [type]	
test	ecx, ecx
jz	short loc_641FE02F
mov	[esp], edi	
mov	edx, 1		
mov	type, skr_0	
call	_silc_skr_add_entry
test	al, al
jz	loc_641FE13C
inc	dword ptr [edi+0Ch]
mov	type, [ebp+var_2C]
mov	ecx, [type+4]	
test	ecx, ecx
jz	short loc_641FE053
mov	[esp], edi	
mov	edx, 2		
mov	type, skr_0	
call	_silc_skr_add_entry
test	al, al
jz	loc_641FE13C
inc	dword ptr [edi+0Ch]
mov	type, [ebp+var_2C]
mov	ecx, [type+8]	
test	ecx, ecx
jz	short loc_641FE077
mov	[esp], edi	
mov	edx, 3		
mov	type, skr_0	
call	_silc_skr_add_entry
test	al, al
jz	loc_641FE13C
inc	dword ptr [edi+0Ch]
mov	type, [ebp+var_2C]
mov	ecx, [type+0Ch]	
test	ecx, ecx
jz	short loc_641FE09B
mov	[esp], edi	
mov	edx, 4		
mov	type, skr_0	
call	_silc_skr_add_entry
test	al, al
jz	loc_641FE13C
inc	dword ptr [edi+0Ch]
mov	type, [ebp+var_2C]
mov	ecx, [type+10h]	
test	ecx, ecx
jz	short loc_641FE0BF
mov	[esp], edi	
mov	edx, 5		
mov	type, skr_0	
call	_silc_skr_add_entry
test	al, al
jz	loc_641FE13C
inc	dword ptr [edi+0Ch]
mov	type, [ebp+var_2C]
mov	ecx, [type+14h]	
test	ecx, ecx
jz	short loc_641FE0DF
mov	[esp], edi	
mov	edx, 6		
mov	type, skr_0	
call	_silc_skr_add_entry
test	al, al
jz	short loc_641FE13C
inc	dword ptr [edi+0Ch]
mov	public_key_0, [ebp+key_context]
test	ebx, ebx
jz	short loc_641FE0FF
mov	[esp], edi	
mov	ecx, [ebp+key_context] 
mov	edx, 8		
mov	type, skr_0	
call	_silc_skr_add_entry
test	al, al
jz	short loc_641FE13C
inc	dword ptr [edi+0Ch]
mov	type, [skr_0+4]
mov	[esp], type	
call	_silc_mutex_unlock
mov	ecx, [ebp+return_key]
test	ecx, ecx
jz	short loc_641FE116
mov	type, [ebp+return_key]
mov	[type],	edi
mov	type, 1
jmp	loc_641FDEF7
mov	type, [skr_0+4]
mov	[esp], type	
call	_silc_mutex_unlock
mov	type, [ebp+status]
or	type, 4
add	esp, 3Ch
pop	public_key_0
pop	skr_0
pop	edi
leave
retn
align 4
			
mov	type, [skr_0+4]
mov	[esp], type	
call	_silc_mutex_unlock
mov	type, [ebp+status]
add	esp, 3Ch
pop	ebx
pop	skr_0
pop	edi
leave
retn
align 4
mov	type, [skr_0+4]
mov	[esp], type	
call	_silc_mutex_unlock
mov	type, [ebp+status]
or	type, 10h
jmp	loc_641FDEF7
align 4
public _silc_skr_del_public_key
push	ebp
mov	ebp, esp
push	edi
push	esi
push	ebx
sub	esp, 5Ch
mov	edi, [ebp+public_key]
test	edi, edi
jz	short loc_641FE18A
mov	type, [ebp+public_key]
mov	[esp], type	
call	_silc_pkcs_get_type
dec	type
jz	short loc_641FE197
mov	type, 2
add	esp, 5Ch
pop	ebx
pop	esi
pop	edi
leave
retn
mov	[ebp+status], 2
mov	edx, [ebp+public_key]
mov	[esp+4], edx	
mov	dword ptr [esp], 1 
call	_silc_pkcs_get_context
mov	[ebp+var_30], type
mov	ecx, [ebp+skr]
mov	type, [ecx+4]
mov	[esp], type	
call	_silc_mutex_lock
lea	edx, [ebp+status] 
mov	dword ptr [esp+0Ch], 0 
mov	esi, [ebp+key_context]
mov	[esp+8], esi	
lea	type, [ebp+results]
mov	[esp+4], type	
mov	type, [ebp+public_key]
mov	[esp], type	
mov	ecx, 7		
mov	type, [ebp+skr]	
call	_silc_skr_find_entry
test	al, al
jz	loc_641FE49A
mov	edi, [ebp+results]
mov	ebx, [edi]
mov	[edi+8], ebx
mov	dl, [edi+10h]
and	edx, 0FFFFFFFDh
mov	[edi+10h], dl
mov	dword ptr [edi+14h], 0
mov	dword ptr [edi+18h], 0
test	ebx, ebx
jz	loc_641FE4B3
movzx	type, word ptr [edi+0Ch]
mov	type, [ebx+type]
mov	[edi+8], type
mov	[edi+14h], ebx
mov	ecx, [ebx]
mov	[ebp+context], ecx
test	edi, edi
jz	short loc_641FE29B
mov	[edi+8], ebx
and	edx, 0FFFFFFFDh
mov	[edi+10h], dl
test	ebx, ebx
jz	short loc_641FE293
test	byte ptr [edi+10h], 2
jz	loc_641FE440
movzx	type, word ptr [edi+0Eh]
mov	type, [ebx+type]
mov	[edi+8], type
mov	type, [edi]
test	type, type
jz	short loc_641FE27B
cmp	ebx, type
jz	loc_641FE48F
movzx	esi, word ptr [edi+0Ch]
jmp	short loc_641FE272
cmp	ebx, ecx
jz	loc_641FE44C
mov	type, ecx
lea	edx, [type+esi]
mov	ecx, [edx]
test	ecx, ecx
jnz	short loc_641FE268
cmp	ebx, [edi+4]
jz	loc_641FE47D
			
mov	[esp], ebx	
call	_silc_free
mov	ebx, [edi+8]
test	ebx, ebx
jnz	short loc_641FE240
mov	[esp], edi	
call	_silc_free
mov	[ebp+key], 7
mov	esi, [ebp+public_key]
mov	[ebp+var_24], esi
mov	type, [ebp+context]
mov	[esp+8], type	
lea	ebx, [ebp+key]
mov	[esp+4], ebx	
mov	edx, [ebp+skr]
mov	type, [edx+8]
mov	[esp], type	
call	_silc_hash_table_del_by_context
mov	[ebp+key], 0
mov	[ebp+var_24], 1
mov	ecx, [ebp+context]
mov	[esp+8], ecx	
mov	[esp+4], ebx	
mov	esi, [ebp+skr]
mov	type, [esi+8]
mov	[esp], type	
call	_silc_hash_table_del_by_context
mov	edx, [ebp+var_30]
mov	type, [edx]
test	type, type
jz	short loc_641FE314
mov	[ebp+key], 1
mov	[ebp+var_24], type
mov	ecx, [ebp+context]
mov	[esp+8], ecx	
mov	[esp+4], ebx	
mov	type, [esi+8]
mov	[esp], type	
call	_silc_hash_table_del_by_context
mov	esi, [ebp+var_30]
mov	type, [esi+4]
test	type, type
jz	short loc_641FE341
mov	[ebp+key], 2
mov	[ebp+var_24], type
mov	type, [ebp+context]
mov	[esp+8], type	
mov	[esp+4], ebx	
mov	edx, [ebp+skr]
mov	type, [edx+8]
mov	[esp], type	
call	_silc_hash_table_del_by_context
mov	ecx, [ebp+var_30]
mov	type, [ecx+8]
test	type, type
jz	short loc_641FE36E
mov	[ebp+key], 3
mov	[ebp+var_24], type
mov	esi, [ebp+context]
mov	[esp+8], esi	
mov	[esp+4], ebx	
mov	edx, [ebp+skr]
mov	type, [edx+8]
mov	[esp], type	
call	_silc_hash_table_del_by_context
mov	ecx, [ebp+var_30]
mov	type, [ecx+0Ch]
test	type, type
jz	short loc_641FE39B
mov	[ebp+key], 4
mov	[ebp+var_24], type
mov	esi, [ebp+context]
mov	[esp+8], esi	
mov	[esp+4], ebx	
mov	edx, [ebp+skr]
mov	type, [edx+8]
mov	[esp], type	
call	_silc_hash_table_del_by_context
mov	ecx, [ebp+var_30]
mov	type, [ecx+10h]
test	type, type
jz	short loc_641FE3C8
mov	[ebp+key], 5
mov	[ebp+var_24], type
mov	esi, [ebp+context]
mov	[esp+8], esi	
mov	[esp+4], ebx	
mov	edx, [ebp+skr]
mov	type, [edx+8]
mov	[esp], type	
call	_silc_hash_table_del_by_context
mov	ecx, [ebp+var_30]
mov	type, [ecx+14h]
test	type, type
jz	short loc_641FE3F5
mov	[ebp+key], 6
mov	[ebp+var_24], type
mov	esi, [ebp+context]
mov	[esp+8], esi	
mov	[esp+4], ebx	
mov	edx, [ebp+skr]
mov	type, [edx+8]
mov	[esp], type	
call	_silc_hash_table_del_by_context
mov	esi, [ebp+key_context]
test	esi, esi
jz	short loc_641FE422
mov	[ebp+key], 8
mov	ecx, [ebp+key_context]
mov	[ebp+var_24], ecx
mov	esi, [ebp+context]
mov	[esp+8], esi	
mov	[esp+4], ebx	
mov	edx, [ebp+skr]
mov	type, [edx+8]
mov	[esp], type	
call	_silc_hash_table_del_by_context
mov	ecx, [ebp+skr]
mov	type, [ecx+4]
mov	[esp], type	
call	_silc_mutex_unlock
mov	type, 1
add	esp, 5Ch
pop	ebx
pop	esi
pop	edi
leave
retn
align 10h
movzx	type, word ptr [edi+0Ch]
mov	type, [ebx+type]
jmp	loc_641FE251
mov	[ebp+var_4C], edx
mov	ecx, [ebx+esi]
mov	esi, [ebp+var_4C]
mov	[esi], ecx
test	ecx, ecx
jz	short loc_641FE46B
test	byte ptr [edi+10h], 1
jz	short loc_641FE46B
movzx	edx, word ptr [edi+0Eh]
mov	esi, [ebx+edx]
mov	[ecx+edx], esi
			
cmp	ebx, [edi+8]
jz	short loc_641FE485
sub	dword ptr [edi+10h], 4
cmp	ebx, [edi+4]
jnz	loc_641FE284
mov	[edi+4], type
jmp	loc_641FE284
mov	ecx, [ebp+var_4C]
mov	edx, [ecx]
mov	[edi+8], edx
jmp	short loc_641FE470
movzx	esi, word ptr [edi+0Ch]
mov	[ebp+var_4C], edi
xor	type, type
jmp	short loc_641FE44F
mov	edx, [ebp+skr]
mov	type, [edx+4]
mov	[esp], type	
call	_silc_mutex_unlock
mov	type, [ebp+status]
or	type, 8
jmp	loc_641FE18F
mov	dword ptr [edi+14h], 0
mov	[ebp+context], 0
jmp	loc_641FE22F
align 4
public _silc_skr_find
			
push	ebp
mov	ebp, esp
push	edi
push	esi
push	ebx
sub	esp, 7Ch
mov	[ebp+status], 2
mov	[ebp+usage], 0
mov	esi, [ebp+find]
test	esi, esi
jz	loc_641FEA1E
mov	ebx, [ebp+callback]
test	ebx, ebx
jz	loc_641FEA1E
mov	edx, [ebp+skr]
mov	eax, [edx+4]
mov	[esp], eax	
call	_silc_mutex_lock
lea	eax, [ebp+usage]
mov	[esp+0Ch], eax	
mov	dword ptr [esp+8], 0 
mov	dword ptr [esp+4], 9 
mov	ecx, [ebp+find]
mov	eax, [ecx]
mov	[esp], eax	
call	_silc_hash_table_find
lea	esi, [ebp+htl]
mov	[esp+4], esi	
mov	edi, [ebp+find]
mov	eax, [edi]
mov	[esp], eax	
call	_silc_hash_table_list
xor	ebx, ebx
mov	[ebp+ptr], results
			
lea	results, [ebp+ctx]
mov	[esp+8], esi	
lea	edi, [ebp+type]
mov	[esp+4], edi	
lea	eax, [ebp+htl]
mov	[esp], eax	
call	_silc_hash_table_get
test	al, al
jz	loc_641FE9C0
mov	ecx, [ebp+type]	
cmp	ecx, 9
jz	short loc_641FE540
mov	eax, [ebp+usage]
mov	[esp+0Ch], eax	
mov	dword ptr [esp+8], 0 
lea	eax, [ebp+list]
mov	[esp+4], eax	
mov	eax, [ebp+ctx]
mov	[esp], eax	
lea	edx, [ebp+status] 
mov	eax, [ebp+skr]	
call	_silc_skr_find_entry
test	al, al
jz	loc_641FEA92
mov	results, [ebp+list]
mov	ecx, [ebp+ptr]
test	ecx, ecx
jz	loc_641FE870
mov	ecx, [ebp+ptr]
mov	eax, [ecx+10h]
shr	eax, 2
jz	loc_641FE8C4
mov	esi, [ebp+ptr]
mov	eax, [esi]
mov	[esi+8], eax
and	byte ptr [esi+10h], 0FDh
mov	dword ptr [esi+18h], 0
mov	dword ptr [esi+14h], 0
xor	eax, eax
mov	esi, [ebp+ptr]
mov	[results+18h], eax
mov	eax, [results+8]
test	eax, eax
jz	loc_641FE69D
test	byte ptr [results+10h],	2
jz	loc_641FE72C
movzx	edx, word ptr [results+0Eh]
mov	edx, [eax+edx]
mov	[results+8], edx
mov	[results+14h], eax
mov	edx, [eax]
test	edx, edx
jz	loc_641FE6A7
mov	eax, [ebx]
mov	[ebx+8], eax
and	byte ptr [ebx+10h], 0FDh
mov	dword ptr [ebx+18h], 0
mov	dword ptr [ebx+14h], 0
xor	eax, eax
xor	edi, edi
jmp	short loc_641FE637
movzx	ecx, word ptr [ebx+0Eh]
mov	ecx, [eax+ecx]
mov	[ebx+8], ecx
mov	[ebx+14h], eax
mov	ecx, [eax]
test	ecx, ecx
jz	short loc_641FE657
cmp	ecx, edx
jz	short loc_641FE68C
mov	[ebx+18h], eax
mov	eax, [ebx+8]
test	eax, eax
jz	short loc_641FE650
mov	ecx, edi
test	cl, cl
jnz	short loc_641FE620
movzx	ecx, word ptr [ebx+0Ch]
mov	ecx, [eax+ecx]
jmp	short loc_641FE627
mov	dword ptr [ebx+14h], 0
mov	ecx, [results]
mov	eax, ecx
mov	[results+8], ecx
and	byte ptr [results+10h],	0FDh
mov	[ebp+var_40], ecx
test	eax, eax
jz	short loc_641FE68C
xor	ecx, ecx
test	cl, cl
jz	loc_641FE738
movzx	edi, word ptr [results+0Eh]
mov	edi, [eax+edi]
mov	[results+8], edi
cmp	edx, [eax]
jz	loc_641FE74A
mov	eax, edi
test	eax, eax
jnz	short loc_641FE669
nop
			
mov	eax, [results+14h]
mov	[results+18h], eax
mov	eax, [results+8]
test	eax, eax
jnz	loc_641FE5E2
mov	edi, [ebp+ptr]
mov	dword ptr [edi+14h], 0
mov	results, [ebp+ptr]
mov	eax, [esi+10h]
shr	eax, 2
jnz	loc_641FE7BB
mov	ebx, esi
or	[ebp+status], 8
mov	esi, [esi]
mov	[results+8], esi
and	byte ptr [results+10h],	0FDh
test	esi, esi
jz	short loc_641FE71F
test	byte ptr [results+10h],	2
jz	loc_641FEA28
movzx	eax, word ptr [results+0Eh]
mov	eax, [esi+eax]
mov	[results+8], eax
mov	eax, [results]
test	eax, eax
jz	short loc_641FE707
cmp	esi, eax
jz	loc_641FECBD
movzx	edi, word ptr [results+0Ch]
jmp	short loc_641FE6FE
align 4
cmp	esi, ecx
jz	loc_641FEA34
mov	eax, ecx
lea	edx, [eax+edi]
mov	ecx, [edx]
test	ecx, ecx
jnz	short loc_641FE6F4
			
cmp	esi, [results+4]
jz	loc_641FEB25
mov	[esp], esi	
call	_silc_free
mov	esi, [results+8]
test	esi, esi
jnz	short loc_641FE6C9
mov	[esp], results	
call	_silc_free
jmp	loc_641FEB31
movzx	edx, word ptr [results+0Ch]
mov	edx, [eax+edx]
jmp	loc_641FE5F3
movzx	edi, word ptr [results+0Ch]
mov	edi, [eax+edi]
mov	[results+8], edi
cmp	edx, [eax]
jnz	loc_641FE685
mov	ecx, [ebp+var_40]
mov	[ebp+var_5C], ecx
test	ecx, ecx
jz	short loc_641FE789
cmp	eax, ecx
jz	loc_641FEC84
movzx	edx, word ptr [results+0Ch]
mov	[ebp+var_40], edx
mov	[ebp+var_44], results
mov	ecx, [ebp+var_5C]
mov	results, edx
jmp	short loc_641FE77A
align 10h
cmp	eax, edx
jz	loc_641FE971
mov	ecx, edx
lea	edi, [ecx+esi]
mov	edx, [edi]
test	edx, edx
jnz	short loc_641FE770
mov	esi, [ebp+var_44]
mov	[ebp+var_5C], ecx
cmp	eax, [results+4]
jz	loc_641FE9B5
			
cmp	eax, [results+14h]
jz	loc_641FEA5E
cmp	eax, [results+18h]
jz	loc_641FEA6A
mov	[esp], eax	
call	_silc_free
mov	eax, [results+14h]
jmp	loc_641FE5D4
mov	dword ptr [ebx+14h], 0
			
mov	edi, [ebp+list]
test	edi, edi
jz	loc_641FE540
mov	ebx, [edi]
mov	[edi+8], ebx
and	byte ptr [edi+10h], 0FDh
test	ebx, ebx
jz	short loc_641FE81B
nop
test	byte ptr [edi+10h], 2
jz	short loc_641FE828
movzx	eax, word ptr [edi+0Eh]
mov	eax, [ebx+eax]
mov	[edi+8], eax
mov	eax, [edi]
test	eax, eax
jz	short loc_641FE807
cmp	ebx, eax
jz	loc_641FE963
movzx	results, word ptr [edi+0Ch]
jmp	short loc_641FE7FE
cmp	ebx, ecx
jz	short loc_641FE834
mov	eax, ecx
lea	edx, [eax+esi]
mov	ecx, [edx]
test	ecx, ecx
jnz	short loc_641FE7F8
cmp	ebx, [edi+4]
jz	short loc_641FE861
			
mov	[esp], ebx	
call	_silc_free
mov	ebx, [edi+8]
test	ebx, ebx
jnz	short loc_641FE7D4
mov	[esp], edi	
call	_silc_free
jmp	loc_641FE540
movzx	eax, word ptr [edi+0Ch]
mov	eax, [ebx+eax]
jmp	short loc_641FE7E1
align 4
mov	[ebp+var_44], edx
mov	ecx, [ebx+esi]
mov	esi, [ebp+var_44]
mov	[esi], ecx
test	ecx, ecx
jz	short loc_641FE853
test	byte ptr [edi+10h], 1
jz	short loc_641FE853
movzx	edx, word ptr [edi+0Eh]
mov	esi, [ebx+edx]
mov	[ecx+edx], esi
			
cmp	ebx, [edi+8]
jz	short loc_641FE866
sub	dword ptr [edi+10h], 4
cmp	ebx, [edi+4]
jnz	short loc_641FE80C
mov	[edi+4], eax
jmp	short loc_641FE80C
mov	ecx, [ebp+var_44]
mov	edx, [ecx]
mov	[edi+8], edx
jmp	short loc_641FE858
mov	dword ptr [esp], 1Ch 
call	_silc_malloc
mov	[ebp+ptr], eax
test	eax, eax
jz	loc_641FEB2D
mov	dword ptr [eax+18h], 0
mov	dword ptr [eax+14h], 0
mov	edx, eax
mov	eax, [eax+10h]
and	eax, 3
mov	[edx+10h], eax
mov	word ptr [edx+0Ch], 4
mov	word ptr [edx+0Eh], 8
mov	byte ptr [edx+10h], 1
mov	dword ptr [edx+8], 0
mov	dword ptr [edx+4], 0
mov	dword ptr [edx], 0
mov	eax, [ebx]
mov	[ebx+8], eax
and	byte ptr [ebx+10h], 0FDh
mov	dword ptr [ebx+18h], 0
mov	dword ptr [ebx+14h], 0
xor	eax, eax
mov	esi, [ebp+ptr]
jmp	short loc_641FE93E
align 4
movzx	edx, word ptr [ebx+0Eh]
mov	edx, [eax+edx]
mov	[ebx+8], edx
mov	[ebx+14h], eax
mov	edi, [eax]
test	edi, edi
jz	loc_641FE7BB
mov	dword ptr [esp], 0Ch 
call	_silc_malloc
test	eax, eax
jz	short loc_641FE93B
mov	[eax], edi
mov	edx, [results]
test	edx, edx
jz	short loc_641FE95B
movzx	edx, word ptr [results+0Ch]
mov	ecx, [results+4]
mov	[ecx+edx], eax
test	byte ptr [results+10h],	1
jz	short loc_641FE92D
movzx	ecx, word ptr [results+0Eh]
mov	edi, [results+4]
mov	[eax+ecx], edi
mov	[results+4], eax
mov	dword ptr [eax+edx], 0
add	dword ptr [results+10h], 4
mov	eax, [ebx+14h]
mov	[ebx+18h], eax
mov	eax, [ebx+8]
test	eax, eax
jz	loc_641FE7B4
test	byte ptr [ebx+10h], 2
jnz	short loc_641FE8E4
movzx	edx, word ptr [ebx+0Ch]
mov	edx, [eax+edx]
jmp	short loc_641FE8EB
mov	[results], eax
movzx	edx, word ptr [results+0Ch]
jmp	short loc_641FE91D
movzx	results, word ptr [edi+0Ch]
mov	[ebp+var_44], edi
xor	eax, eax
jmp	loc_641FE837
mov	esi, [ebp+var_44]
mov	[ebp+var_5C], ecx
mov	[ebp+var_44], edi
mov	edx, [ebp+var_40]
mov	edx, [eax+edx]
mov	[ebp+var_4C], edx
mov	ecx, [ebp+var_44]
mov	[ecx], edx
test	edx, edx
jz	short loc_641FE99F
test	byte ptr [results+10h],	1
jz	short loc_641FE99F
movzx	edi, word ptr [results+0Eh]
mov	edx, [eax+edi]
mov	ecx, [ebp+var_4C]
mov	[ecx+edi], edx
			
cmp	eax, [results+8]
jz	loc_641FEA85
sub	dword ptr [results+10h], 4
cmp	eax, [results+4]
jnz	loc_641FE792
mov	ecx, [ebp+var_5C]
mov	[results+4], ecx
jmp	loc_641FE792
mov	results, [ebp+ptr]
lea	edx, [ebp+htl]
mov	[esp], edx	
call	_silc_hash_table_list_reset
mov	ecx, [ebp+skr]
mov	eax, [ecx+4]
mov	[esp], eax	
call	_silc_mutex_unlock
test	results, results
jz	loc_641FEBB8
mov	eax, [results]
mov	[results+8], eax
and	byte ptr [results+10h],	0FDh
mov	dword ptr [results+18h], 0
mov	dword ptr [results+14h], 0
mov	edx, [ebp+callback_context]
mov	[esp+10h], edx	
mov	[esp+0Ch], results 
mov	dword ptr [esp+8], 1 
mov	ecx, [ebp+find]
mov	[esp+4], ecx	
mov	esi, [ebp+skr]
mov	[esp], esi	
call	[ebp+callback]
			
xor	eax, eax
add	esp, 7Ch
pop	results
pop	esi
pop	edi
leave
retn
movzx	eax, word ptr [results+0Ch]
mov	eax, [esi+eax]
jmp	loc_641FE6DA
mov	[ebp+var_44], edx
mov	edi, [esi+edi]
mov	[ebp+ptr], edi
mov	edx, [ebp+var_44]
mov	[edx], edi
test	edi, edi
jz	short loc_641FEA4C
test	byte ptr [results+10h],	1
jnz	short loc_641FEA76
			
cmp	esi, [results+8]
jz	loc_641FECCB
sub	dword ptr [results+10h], 4
jmp	loc_641FE707
mov	dword ptr [results+14h], 0
jmp	loc_641FE79B
mov	dword ptr [results+18h], 0
jmp	loc_641FE7A4
movzx	ecx, word ptr [results+0Eh]
mov	edi, [esi+ecx]
mov	edx, [ebp+ptr]
mov	[edx+ecx], edi
jmp	short loc_641FEA4C
mov	edi, [ebp+var_44]
mov	edx, [edi]
mov	[results+8], edx
jmp	loc_641FE9A8
mov	results, [ebp+ptr]
test	results, results
jz	loc_641FE9C3
mov	esi, [results]
mov	[results+8], esi
and	byte ptr [results+10h],	0FDh
test	esi, esi
jz	short loc_641FEAFF
test	byte ptr [results+10h],	2
jz	loc_641FEC2F
movzx	eax, word ptr [results+0Eh]
mov	eax, [esi+eax]
mov	[results+8], eax
mov	eax, [results]
test	eax, eax
jz	short loc_641FEAE7
cmp	esi, eax
jz	loc_641FEC9A
movzx	edi, word ptr [results+0Ch]
jmp	short loc_641FEADE
align 4
cmp	esi, ecx
jz	loc_641FEC3B
mov	eax, ecx
lea	edx, [eax+edi]
mov	ecx, [edx]
test	ecx, ecx
jnz	short loc_641FEAD4
cmp	esi, [results+4]
jz	loc_641FEC72
			
mov	[esp], esi	
call	_silc_free
mov	esi, [results+8]
test	esi, esi
jnz	short loc_641FEAAA
mov	[esp], results	
call	_silc_free
lea	esi, [ebp+htl]
mov	[esp], esi	
call	_silc_hash_table_list_reset
mov	edi, [ebp+skr]
mov	eax, [edi+4]
mov	[esp], eax	
call	_silc_mutex_unlock
jmp	loc_641FEBB8
mov	[results+4], eax
jmp	loc_641FE710
or	[ebp+status], 10h
mov	edi, [ebp+list]
test	edi, edi
jz	short loc_641FEB9F
mov	results, [edi]
mov	[edi+8], ebx
and	byte ptr [edi+10h], 0FDh
test	ebx, ebx
jz	short loc_641FEB97
test	byte ptr [edi+10h], 2
jz	loc_641FEBE4
movzx	eax, word ptr [edi+0Eh]
mov	eax, [ebx+eax]
mov	[edi+8], eax
mov	eax, [edi]
test	eax, eax
jz	short loc_641FEB7F
cmp	ebx, eax
jz	loc_641FECA5
movzx	esi, word ptr [edi+0Ch]
jmp	short loc_641FEB76
align 10h
cmp	ebx, ecx
jz	short loc_641FEBF0
mov	eax, ecx
lea	edx, [eax+esi]
mov	ecx, [edx]
test	ecx, ecx
jnz	short loc_641FEB70
cmp	ebx, [edi+4]
jz	loc_641FEC27
			
mov	[esp], ebx	
call	_silc_free
mov	ebx, [edi+8]
test	ebx, ebx
jnz	short loc_641FEB45
mov	[esp], edi	
call	_silc_free
lea	eax, [ebp+htl]
mov	[esp], eax	
call	_silc_hash_table_list_reset
mov	edx, [ebp+skr]
mov	eax, [edx+4]
mov	[esp], eax	
call	_silc_mutex_unlock
			
mov	esi, [ebp+callback_context]
mov	[esp+10h], esi	
mov	dword ptr [esp+0Ch], 0 
mov	eax, [ebp+status]
mov	[esp+8], eax	
mov	edi, [ebp+find]
mov	[esp+4], edi	
mov	eax, [ebp+skr]
mov	[esp], eax	
call	[ebp+callback]
jmp	loc_641FEA1E
align 4
movzx	eax, word ptr [edi+0Ch]
mov	eax, [ebx+eax]
jmp	loc_641FEB56
mov	[ebp+var_44], edx
mov	esi, [ebx+esi]
mov	[ebp+ptr], esi
mov	edx, [ebp+var_44]
mov	[edx], esi
test	esi, esi
jz	short loc_641FEC15
test	byte ptr [edi+10h], 1
jz	short loc_641FEC15
movzx	ecx, word ptr [edi+0Eh]
mov	esi, [ebx+ecx]
mov	edx, [ebp+ptr]
mov	[edx+ecx], esi
			
cmp	ebx, [edi+8]
jz	short loc_641FEC7A
sub	dword ptr [edi+10h], 4
cmp	ebx, [edi+4]
jnz	loc_641FEB88
mov	[edi+4], eax
jmp	loc_641FEB88
movzx	eax, word ptr [results+0Ch]
mov	eax, [esi+eax]
jmp	loc_641FEABB
mov	[ebp+var_44], edx
mov	edi, [esi+edi]
mov	[ebp+ptr], edi
mov	edx, [ebp+var_44]
mov	[edx], edi
test	edi, edi
jz	short loc_641FEC60
test	byte ptr [results+10h],	1
jz	short loc_641FEC60
movzx	ecx, word ptr [results+0Eh]
mov	edi, [esi+ecx]
mov	edx, [ebp+ptr]
mov	[edx+ecx], edi
			
cmp	esi, [results+8]
jz	short loc_641FECB3
sub	dword ptr [results+10h], 4
cmp	esi, [results+4]
jnz	loc_641FEAF0
mov	[results+4], eax
jmp	loc_641FEAF0
mov	ecx, [ebp+var_44]
mov	edx, [ecx]
mov	[edi+8], edx
jmp	short loc_641FEC1A
movzx	edi, word ptr [results+0Ch]
mov	[ebp+var_40], edi
mov	[ebp+var_44], results
mov	[ebp+var_5C], 0
jmp	loc_641FE97A
movzx	edi, word ptr [results+0Ch]
mov	[ebp+var_44], results
xor	eax, eax
jmp	short loc_641FEC3E
movzx	esi, word ptr [edi+0Ch]
mov	[ebp+var_44], edi
xor	eax, eax
jmp	loc_641FEBF3
mov	ecx, [ebp+var_44]
mov	edx, [ecx]
mov	[results+8], edx
jmp	short loc_641FEC65
movzx	edi, word ptr [results+0Ch]
mov	[ebp+var_44], results
xor	eax, eax
jmp	loc_641FEA37
mov	ecx, [ebp+var_44]
mov	edx, [ecx]
mov	[results+8], edx
jmp	loc_641FEA55
public _silc_mp_modinv
			
push	ebp
push	edi
push	esi
push	ebx
sub	esp, 0ACh
lea	ebp, [esp+90h]
mov	[esp], ebp	
call	_silc_mp_init
lea	ebx, [esp+80h]
mov	[esp], ebx	
call	_silc_mp_init
lea	ebx, [esp+20h]
mov	[esp], ebx	
call	_silc_mp_init
lea	ecx, [esp+30h]
mov	[esp], ecx	
call	_silc_mp_init
mov	dword ptr [esp+4], 0 
mov	[esp], ebx	
call	_silc_mp_set_ui
mov	dword ptr [esp+4], 1 
lea	eax, [esp+30h]
mov	[esp], eax	
call	_silc_mp_set_ui
lea	esi, [esp+40h]
mov	[esp], esi	
call	_silc_mp_init
lea	esi, [esp+50h]
mov	[esp], esi	
call	_silc_mp_init
lea	edx, [esp+60h]
mov	[esp], edx	
call	_silc_mp_init
mov	edi, [esp+0C8h]
mov	[esp+4], edi	
mov	[esp], esi	
call	_silc_mp_set
mov	ecx, [esp+0C4h]
mov	[esp+4], ecx	
lea	eax, [esp+60h]
mov	[esp], eax	
call	_silc_mp_set
lea	edx, [esp+70h]
mov	[esp], edx	
call	_silc_mp_init
mov	edi, 1
nop
			
mov	edx, i
shl	edx, 4
mov	[esp+1Ch], edx
add	edx, esi
mov	[esp+14h], edx
mov	dword ptr [esp+4], 0 
mov	[esp], edx	
call	_silc_mp_cmp_ui
test	eax, eax
jz	loc_641FEF30
test	i, i
jz	loc_641FEE60
lea	ecx, [i-1]
shl	ecx, 4
mov	[esp+18h], ecx
lea	eax, [esi+ecx]
mov	edx, [esp+14h]
mov	[esp+8], edx	
mov	[esp+4], eax	
mov	[esp], ebp	
mov	[esp+10h], eax
call	_silc_mp_div
cmp	i, 2
mov	eax, [esp+10h]
jnz	loc_641FEEEC
mov	i, [esp+14h]
mov	[esp+8], edi	
mov	[esp+4], eax	
mov	[esp], esi	
call	_silc_mp_mod
lea	ecx, [esp+40h]
mov	[esp+8], ecx	
mov	[esp+4], ebp	
lea	edx, [esp+80h]
mov	[esp], edx	
call	_silc_mp_mul
mov	eax, [esp+18h]
lea	edi, [ebx+eax]
mov	[esp+4], edi	
mov	[esp], ebx	
call	_silc_mp_set
lea	ecx, [esp+80h]
mov	[esp+8], ecx	
mov	[esp+4], ebx	
mov	[esp], ebx	
call	_silc_mp_sub
xor	edi, edi
jmp	loc_641FED9C
align 10h
mov	edx, [esp+14h]
mov	[esp+8], edx	
lea	eax, [esp+70h]
mov	[esp+4], eax	
mov	[esp], ebp	
call	_silc_mp_div
mov	i, [esp+14h]
mov	[esp+8], edi	
lea	ecx, [esp+70h]
mov	[esp+4], ecx	
lea	edx, [esp+60h]
mov	[esp], edx	
call	_silc_mp_mod
mov	[esp+8], ebx	
mov	[esp+4], ebp	
lea	eax, [esp+80h]
mov	[esp], eax	
call	_silc_mp_mul
mov	edi, 1
lea	edx, [esp+40h]
mov	eax, i
shl	eax, 4
lea	ecx, [ebx+eax]
mov	[esp+4], edx	
mov	[esp], ecx	
mov	[esp+10h], ecx
call	_silc_mp_set
lea	edx, [esp+80h]
mov	[esp+8], edx	
mov	eax, [esp+10h]
mov	[esp+4], eax	
mov	[esp], eax	
call	_silc_mp_sub
jmp	loc_641FED9C
inc	i
mov	edx, [esp+14h]
mov	[esp+8], edx	
mov	[esp+4], eax	
mov	ecx, i
shl	ecx, 4
lea	edx, [esi+ecx]
mov	[esp], edx	
call	_silc_mp_mod
mov	eax, [esp+1Ch]
lea	ecx, [ebx+eax]
mov	[esp+8], ecx	
mov	[esp+4], ebp	
lea	edx, [esp+80h]
mov	[esp], edx	
call	_silc_mp_mul
mov	eax, [esp+18h]
lea	edx, [ebx+eax]
jmp	short loc_641FEEB4
test	i, i
jnz	loc_641FEFEC
mov	di, 2
shl	edi, 4
lea	eax, [ebx+edi]
mov	[esp+4], eax	
mov	ecx, [esp+0C0h]
mov	[esp], ecx	
call	_silc_mp_set
mov	dword ptr [esp+4], 0 
mov	edi, [esp+0C0h]
mov	[esp], edi	
call	_silc_mp_cmp_ui
test	eax, eax
js	loc_641FEFF4
xor	eax, eax
mov	edx, 30h
mov	edi, esi
mov	ecx, edx
rep stosb
mov	edi, ebx
mov	ecx, edx
rep stosb
mov	[esp], ebp	
call	_silc_mp_uninit
lea	edx, [esp+80h]
mov	[esp], edx	
call	_silc_mp_uninit
mov	[esp], esi	
call	_silc_mp_uninit
lea	eax, [esp+60h]
mov	[esp], eax	
call	_silc_mp_uninit
lea	ecx, [esp+70h]
mov	[esp], ecx	
call	_silc_mp_uninit
mov	[esp], ebx	
call	_silc_mp_uninit
lea	esi, [esp+30h]
mov	[esp], esi	
call	_silc_mp_uninit
lea	ebp, [esp+40h]
mov	[esp], ebp	
call	_silc_mp_uninit
add	esp, 0ACh
pop	ebx
pop	esi
pop	edi
pop	ebp
retn
align 4
dec	i
jmp	loc_641FEF3C
align 4
mov	edi, [esp+0C8h]
mov	[esp+8], edi	
mov	edx, [esp+0C0h]
mov	[esp+4], edx	
mov	[esp], edx	
call	_silc_mp_add
jmp	loc_641FEF74
align 4
public _silc_mp_bin2mp
			
push	ebp
push	edi
push	esi
push	ebx
sub	esp, 2Ch
mov	edi, [esp+3Ch+data]
mov	ebx, [esp+3Ch+ret]
mov	[esp+3Ch+ui], 0	
mov	[esp+3Ch+dst], ebx 
call	_silc_mp_set_ui
mov	eax, [esp+3Ch+len]
test	eax, eax
jz	loc_641FF1EB
mov	ecx, [esp+3Ch+len]
dec	ecx
and	ecx, 3
mov	[esp+3Ch+exp], 8 
mov	[esp+3Ch+ui], ret_0 
mov	[esp+3Ch+dst], ret_0 
mov	[esp+3Ch+var_20], ecx
call	_silc_mp_mul_2exp
movzx	edx, byte ptr [data_0]
mov	[esp+3Ch+exp], edx 
mov	[esp+3Ch+ui], ret_0 
mov	[esp+3Ch+dst], ret_0 
call	_silc_mp_add_ui
mov	esi, 1
mov	ebp, 1
cmp	[esp+3Ch+len], 1
mov	eax, [esp+3Ch+var_20]
jbe	loc_641FF1EB
test	eax, eax
jz	loc_641FF133
cmp	eax, 1
jz	short loc_641FF0FE
cmp	eax, 2
jz	short loc_641FF0D3
mov	[esp+3Ch+exp], 8 
mov	[esp+3Ch+ui], ret_0 
mov	[esp+3Ch+dst], ret_0 
call	_silc_mp_mul_2exp
movzx	i, byte	ptr [data_0+1]
mov	[esp+3Ch+exp], esi 
mov	[esp+3Ch+ui], ret_0 
mov	[esp+3Ch+dst], ret_0 
call	_silc_mp_add_ui
mov	esi, 2
mov	ebp, 2
mov	[esp+3Ch+exp], 8 
mov	[esp+3Ch+ui], ret_0 
mov	[esp+3Ch+dst], ret_0 
call	_silc_mp_mul_2exp
movzx	edx, byte ptr [data_0+ebp]
mov	[esp+3Ch+exp], edx 
mov	[esp+3Ch+ui], ret_0 
mov	[esp+3Ch+dst], ret_0 
call	_silc_mp_add_ui
inc	i
mov	ebp, i
mov	[esp+3Ch+exp], 8 
mov	[esp+3Ch+ui], ret_0 
mov	[esp+3Ch+dst], ret_0 
call	_silc_mp_mul_2exp
movzx	ecx, byte ptr [data_0+ebp]
mov	[esp+3Ch+exp], ecx 
mov	[esp+3Ch+ui], ret_0 
mov	[esp+3Ch+dst], ret_0 
call	_silc_mp_add_ui
inc	i
mov	ebp, i
cmp	[esp+3Ch+len], i
jbe	loc_641FF1EB
			
mov	[esp+3Ch+exp], 8 
mov	[esp+3Ch+ui], ret_0 
mov	[esp+3Ch+dst], ret_0 
call	_silc_mp_mul_2exp
movzx	eax, byte ptr [data_0+ebp]
mov	[esp+3Ch+exp], eax 
mov	[esp+3Ch+ui], ret_0 
mov	[esp+3Ch+dst], ret_0 
call	_silc_mp_add_ui
lea	ebp, [i+1]
mov	[esp+3Ch+exp], 8 
mov	[esp+3Ch+ui], ret_0 
mov	[esp+3Ch+dst], ret_0 
call	_silc_mp_mul_2exp
movzx	ecx, byte ptr [data_0+ebp]
mov	[esp+3Ch+exp], ecx 
mov	[esp+3Ch+ui], ret_0 
mov	[esp+3Ch+dst], ret_0 
call	_silc_mp_add_ui
lea	ebp, [i+2]
mov	[esp+3Ch+exp], 8 
mov	[esp+3Ch+ui], ret_0 
mov	[esp+3Ch+dst], ret_0 
call	_silc_mp_mul_2exp
movzx	edx, byte ptr [data_0+i]
mov	[esp+3Ch+exp], edx 
mov	[esp+3Ch+ui], ret_0 
mov	[esp+3Ch+dst], ret_0 
call	_silc_mp_add_ui
lea	i, [esi+3]
mov	[esp+3Ch+exp], 8 
mov	[esp+3Ch+ui], ret_0 
mov	[esp+3Ch+dst], ret_0 
call	_silc_mp_mul_2exp
movzx	eax, byte ptr [data_0+i]
mov	[esp+3Ch+exp], eax 
mov	[esp+3Ch+ui], ret_0 
mov	[esp+3Ch+dst], ret_0 
call	_silc_mp_add_ui
add	esi, 4
mov	ebp, i
cmp	[esp+3Ch+len], i
ja	loc_641FF133
			
add	esp, 2Ch
pop	ret_0
pop	i
pop	data_0
pop	ebp
retn
align 4
public _silc_mp_mp2bin_noalloc
			
push	ebp
push	edi
push	esi
push	ebx
sub	esp, 3Ch
mov	ebp, [esp+4Ch+dst_len]
lea	ebx, [esp+4Ch+tmp]
mov	[esp+4Ch+mp], ebx 
call	_silc_mp_init
mov	eax, [esp+4Ch+val]
mov	[esp+4Ch+src], eax 
mov	[esp+4Ch+mp], ebx 
call	_silc_mp_set
test	ebp, ebp
jle	loc_641FF389
mov	esi, [esp+4Ch+dst]
add	esi, dst_len_0
mov	[esp+4Ch+var_34], esi
lea	edi, [dst_len_0-1]
mov	ecx, edi
and	ecx, 3
mov	[esp+4Ch+var_30], ecx
mov	[esp+4Ch+mp], ebx 
call	_silc_mp_get_ui
mov	edx, [esp+4Ch+var_34]
mov	[edx-1], al
mov	[esp+4Ch+exp], 8 
mov	[esp+4Ch+src], ebx 
mov	[esp+4Ch+mp], ebx 
call	_silc_mp_div_2exp
mov	esi, [esp+4Ch+var_34]
dec	esi
test	edi, edi
jle	loc_641FF389
mov	eax, [esp+4Ch+var_30]
test	eax, eax
jz	loc_641FF2F6
cmp	[esp+4Ch+var_30], 1
jz	short loc_641FF2CD
cmp	[esp+4Ch+var_30], 2
jz	short loc_641FF2AC
mov	[esp+4Ch+mp], ebx 
call	_silc_mp_get_ui
mov	[esi-1], al
mov	[esp+4Ch+exp], 8 
mov	[esp+4Ch+src], ebx 
mov	[esp+4Ch+mp], ebx 
call	_silc_mp_div_2exp
lea	i, [dst_len_0-2]
mov	esi, [esp+4Ch+var_34]
sub	esi, 2
mov	[esp+4Ch+mp], ebx 
call	_silc_mp_get_ui
mov	[esi-1], al
mov	[esp+4Ch+exp], 8 
mov	[esp+4Ch+src], ebx 
mov	[esp+4Ch+mp], ebx 
call	_silc_mp_div_2exp
dec	i
dec	esi
mov	[esp+4Ch+mp], ebx 
call	_silc_mp_get_ui
mov	[esi-1], al
mov	[esp+4Ch+exp], 8 
mov	[esp+4Ch+src], ebx 
mov	[esp+4Ch+mp], ebx 
call	_silc_mp_div_2exp
dec	i
dec	esi
test	i, i
jle	loc_641FF389
			
mov	[esp+4Ch+mp], ebx 
call	_silc_mp_get_ui
mov	[esi-1], al
mov	[esp+4Ch+exp], 8 
mov	[esp+4Ch+src], ebx 
mov	[esp+4Ch+mp], ebx 
call	_silc_mp_div_2exp
lea	dst_len_0, [esi-1]
mov	[esp+4Ch+mp], ebx 
call	_silc_mp_get_ui
mov	[ebp-1], al
mov	[esp+4Ch+exp], 8 
mov	[esp+4Ch+src], ebx 
mov	[esp+4Ch+mp], ebx 
call	_silc_mp_div_2exp
lea	ebp, [esi-2]
mov	[esp+4Ch+mp], ebx 
call	_silc_mp_get_ui
mov	[ebp-1], al
mov	[esp+4Ch+exp], 8 
mov	[esp+4Ch+src], ebx 
mov	[esp+4Ch+mp], ebx 
call	_silc_mp_div_2exp
lea	ebp, [esi-3]
mov	[esp+4Ch+mp], ebx 
call	_silc_mp_get_ui
mov	[ebp-1], al
mov	[esp+4Ch+exp], 8 
mov	[esp+4Ch+src], ebx 
mov	[esp+4Ch+mp], ebx 
call	_silc_mp_div_2exp
sub	i, 4
sub	esi, 4
test	i, i
jg	loc_641FF2F6
			
mov	[esp+4Ch+mp], ebx 
call	_silc_mp_uninit
add	esp, 3Ch
pop	ebx
pop	esi
pop	i
pop	ebp
retn
align 4
public _silc_mp_mp2bin
			
push	edi
push	esi
push	ebx
sub	esp, 20h
mov	edi, [esp+2Ch+val]
mov	ebx, [esp+2Ch+len]
mov	esi, [esp+2Ch+ret_len]
test	ebx, ebx
jz	short loc_641FF3EC
mov	[esp+2Ch+var_28], 1
mov	[esp+2Ch+items], size 
call	_silc_calloc
test	eax, eax
jz	short loc_641FF3E4
mov	[esp+2Ch+dst_len], size	
mov	[esp+2Ch+var_28], ret 
mov	[esp+2Ch+items], val_0 
mov	[esp+2Ch+var_10], ret
call	_silc_mp_mp2bin_noalloc
test	ret_len_0, ret_len_0
mov	eax, [esp+2Ch+var_10]
jz	short loc_641FF3E4
mov	[ret_len_0], size
			
add	esp, 20h
pop	size
pop	ret_len_0
pop	val_0
retn
align 4
mov	[esp+2Ch+var_28], 2 
mov	[esp+2Ch+items], val_0 
call	_silc_mp_sizeinbase
lea	len_0, [eax+7]
shr	size, 3
jmp	short loc_641FF3B2
public _silc_mp_xor
sub	esp, 0Ch
mov	eax, [esp+0Ch+mp1]
mov	edx, [esp+0Ch+mp2]
mov	ecx, [esp+0Ch+dst]
mov	[esp+0Ch+mp2], ecx 
mov	[esp+0Ch+mp1], edx 
mov	[esp+0Ch+dst], eax 
add	esp, 0Ch
jmp	_tma_mp_xor
align 4
public _silc_mp_or
			
sub	esp, 0Ch
mov	eax, [esp+0Ch+mp1]
mov	edx, [esp+0Ch+mp2]
mov	ecx, [esp+0Ch+dst]
mov	[esp+0Ch+mp2], ecx 
mov	[esp+0Ch+mp1], edx 
mov	[esp+0Ch+dst], eax 
add	esp, 0Ch
jmp	_tma_mp_or
align 4
public _silc_mp_and
sub	esp, 0Ch
mov	eax, [esp+0Ch+mp1]
mov	edx, [esp+0Ch+mp2]
mov	ecx, [esp+0Ch+dst]
mov	[esp+0Ch+mp2], ecx 
mov	[esp+0Ch+mp1], edx 
mov	[esp+0Ch+dst], eax 
add	esp, 0Ch
jmp	_tma_mp_and
align 10h
public _silc_mp_neg
sub	esp, 0Ch
mov	eax, [esp+0Ch+src]
mov	edx, [esp+0Ch+dst]
mov	[esp+0Ch+src], edx 
mov	[esp+0Ch+dst], eax 
add	esp, 0Ch
jmp	_tma_mp_neg
align 4
public _silc_mp_abs
sub	esp, 0Ch
mov	eax, [esp+0Ch+src]
mov	edx, [esp+0Ch+dst]
mov	[esp+0Ch+src], edx 
mov	[esp+0Ch+dst], eax 
add	esp, 0Ch
jmp	_tma_mp_abs
align 4
public _silc_mp_cmp_ui
			
sub	esp, 0Ch
add	esp, 0Ch
jmp	_tma_mp_cmp_d
align 4
public _silc_mp_cmp_si
sub	esp, 0Ch
add	esp, 0Ch
jmp	_tma_mp_cmp_d
align 10h
public _silc_mp_cmp
			
sub	esp, 0Ch
add	esp, 0Ch
jmp	_tma_mp_cmp
align 4
public _silc_mp_gcdext
sub	esp, 0Ch
mov	eax, [esp+0Ch+mp1]
mov	edx, [esp+0Ch+mp2]
mov	ecx, [esp+0Ch+g]
mov	[esp+0Ch+mp2], ecx 
mov	ecx, [esp+0Ch+t]
mov	[esp+0Ch+mp1], ecx 
mov	ecx, [esp+0Ch+s]
mov	[esp+0Ch+t], ecx 
mov	[esp+0Ch+s], edx 
mov	[esp+0Ch+g], eax 
add	esp, 0Ch
jmp	_tma_mp_exteuclid
align 10h
public _silc_mp_gcd
			
sub	esp, 0Ch
mov	eax, [esp+0Ch+mp1]
mov	edx, [esp+0Ch+mp2]
mov	ecx, [esp+0Ch+dst]
mov	[esp+0Ch+mp2], ecx 
mov	[esp+0Ch+mp1], edx 
mov	[esp+0Ch+dst], eax 
add	esp, 0Ch
jmp	_tma_mp_gcd
align 4
public _silc_mp_pow_mod
			
push	ebx
sub	esp, 8
mov	eax, [esp+0Ch+mp1]
mov	edx, [esp+0Ch+exp]
mov	ecx, [esp+0Ch+mod]
mov	ebx, [esp+0Ch+dst]
mov	[esp+0Ch+mod], ebx 
mov	[esp+0Ch+exp], ecx 
mov	[esp+0Ch+mp1], edx 
mov	[esp+0Ch+dst], eax 
add	esp, 8
pop	ebx
jmp	_tma_mp_exptmod
align 4
public _silc_mp_pow_ui
sub	esp, 0Ch
mov	eax, [esp+0Ch+mp1]
mov	edx, [esp+0Ch+exp]
mov	ecx, [esp+0Ch+dst]
mov	[esp+0Ch+exp], ecx 
mov	[esp+0Ch+mp1], edx 
mov	[esp+0Ch+dst], eax 
add	esp, 0Ch
jmp	_tma_mp_expt_d
align 4
public _silc_mp_pow
sub	esp, 1Ch
mov	[esp+1Ch+var_14], 0AEh 
mov	[esp+1Ch+var_18], offset aMp_tma_c 
mov	[esp+1Ch+var_1C], offset aFalse_0 
call	__assert
align 4
public _silc_mp_mod_2exp
			
sub	esp, 0Ch
mov	eax, [esp+0Ch+mp1]
mov	edx, [esp+0Ch+ui]
mov	ecx, [esp+0Ch+dst]
mov	[esp+0Ch+ui], ecx 
mov	[esp+0Ch+mp1], edx 
mov	[esp+0Ch+dst], eax 
add	esp, 0Ch
jmp	_tma_mp_mod_2d
align 4
public _silc_mp_mod
			
sub	esp, 0Ch
mov	eax, [esp+0Ch+mp1]
mov	edx, [esp+0Ch+mp2]
mov	ecx, [esp+0Ch+dst]
mov	[esp+0Ch+mp2], ecx 
mov	[esp+0Ch+mp1], edx 
mov	[esp+0Ch+dst], eax 
add	esp, 0Ch
jmp	_tma_mp_mod
align 10h
public _silc_mp_div_2exp_qr
sub	esp, 0Ch
mov	eax, [esp+0Ch+mp1]
mov	edx, [esp+0Ch+exp]
mov	ecx, [esp+0Ch+r]
mov	[esp+0Ch+exp], ecx 
mov	ecx, [esp+0Ch+q]
mov	[esp+0Ch+mp1], ecx 
mov	[esp+0Ch+r], edx 
mov	[esp+0Ch+q], eax 
add	esp, 0Ch
jmp	_tma_mp_div_2d
align 4
public _silc_mp_div_2exp
			
sub	esp, 1Ch
mov	[esp+1Ch+d], 0	
mov	ecx, [esp+1Ch+dst]
mov	[esp+1Ch+c], ecx 
mov	edx, [esp+1Ch+exp]
mov	[esp+1Ch+b], edx 
mov	eax, [esp+1Ch+mp1]
mov	[esp+1Ch+a], eax 
call	_tma_mp_div_2d
add	esp, 1Ch
retn
align 4
public _silc_mp_div_qr
sub	esp, 0Ch
mov	eax, [esp+0Ch+mp1]
mov	edx, [esp+0Ch+mp2]
mov	ecx, [esp+0Ch+r]
mov	[esp+0Ch+mp2], ecx 
mov	ecx, [esp+0Ch+q]
mov	[esp+0Ch+mp1], ecx 
mov	[esp+0Ch+r], edx 
mov	[esp+0Ch+q], eax 
add	esp, 0Ch
jmp	_tma_mp_div
align 4
public _silc_mp_div
			
sub	esp, 1Ch
mov	[esp+1Ch+d], 0	
mov	ecx, [esp+1Ch+dst]
mov	[esp+1Ch+c], ecx 
mov	edx, [esp+1Ch+mp2]
mov	[esp+1Ch+b], edx 
mov	eax, [esp+1Ch+mp1]
mov	[esp+1Ch+a], eax 
call	_tma_mp_div
add	esp, 1Ch
retn
align 10h
public _silc_mp_div_ui
sub	esp, 1Ch
mov	[esp+1Ch+d], 0	
mov	ecx, [esp+1Ch+dst]
mov	[esp+1Ch+c], ecx 
mov	edx, [esp+1Ch+ui]
mov	[esp+1Ch+b], edx 
mov	eax, [esp+1Ch+mp1]
mov	[esp+1Ch+a], eax 
call	_tma_mp_div_d
add	esp, 1Ch
retn
align 4
public _silc_mp_sqrt
sub	esp, 0Ch
mov	eax, [esp+0Ch+src]
mov	edx, [esp+0Ch+dst]
mov	[esp+0Ch+src], edx 
mov	[esp+0Ch+dst], eax 
add	esp, 0Ch
jmp	_tma_mp_sqrt
align 4
public _silc_mp_mul_2exp
			
sub	esp, 0Ch
mov	eax, [esp+0Ch+mp1]
mov	edx, [esp+0Ch+exp]
mov	ecx, [esp+0Ch+dst]
mov	[esp+0Ch+exp], ecx 
mov	[esp+0Ch+mp1], edx 
mov	[esp+0Ch+dst], eax 
add	esp, 0Ch
jmp	_tma_mp_mul_2d
align 4
public _silc_mp_mul_ui
sub	esp, 0Ch
mov	eax, [esp+0Ch+mp1]
mov	edx, [esp+0Ch+ui]
mov	ecx, [esp+0Ch+dst]
mov	[esp+0Ch+ui], ecx 
mov	[esp+0Ch+mp1], edx 
mov	[esp+0Ch+dst], eax 
add	esp, 0Ch
jmp	_tma_mp_mul_d
align 10h
public _silc_mp_mul
			
sub	esp, 0Ch
mov	eax, [esp+0Ch+mp1]
mov	edx, [esp+0Ch+mp2]
mov	ecx, [esp+0Ch+dst]
mov	[esp+0Ch+mp2], ecx 
mov	[esp+0Ch+mp1], edx 
mov	[esp+0Ch+dst], eax 
add	esp, 0Ch
jmp	_tma_mp_mul
align 4
public _silc_mp_sub_ui
			
sub	esp, 0Ch
mov	eax, [esp+0Ch+mp1]
mov	edx, [esp+0Ch+ui]
mov	ecx, [esp+0Ch+dst]
mov	[esp+0Ch+ui], ecx 
mov	[esp+0Ch+mp1], edx 
mov	[esp+0Ch+dst], eax 
add	esp, 0Ch
jmp	_tma_mp_sub_d
align 4
public _silc_mp_sub
			
sub	esp, 0Ch
mov	eax, [esp+0Ch+mp1]
mov	edx, [esp+0Ch+mp2]
mov	ecx, [esp+0Ch+dst]
mov	[esp+0Ch+mp2], ecx 
mov	[esp+0Ch+mp1], edx 
mov	[esp+0Ch+dst], eax 
add	esp, 0Ch
jmp	_tma_mp_sub
align 4
public _silc_mp_add_ui
			
sub	esp, 0Ch
mov	eax, [esp+0Ch+mp1]
mov	edx, [esp+0Ch+ui]
mov	ecx, [esp+0Ch+dst]
mov	[esp+0Ch+ui], ecx 
mov	[esp+0Ch+mp1], edx 
mov	[esp+0Ch+dst], eax 
add	esp, 0Ch
jmp	_tma_mp_add_d
align 10h
public _silc_mp_add
			
sub	esp, 0Ch
mov	eax, [esp+0Ch+mp1]
mov	edx, [esp+0Ch+mp2]
mov	ecx, [esp+0Ch+dst]
mov	[esp+0Ch+mp2], ecx 
mov	[esp+0Ch+mp1], edx 
mov	[esp+0Ch+dst], eax 
add	esp, 0Ch
jmp	_tma_mp_add
align 4
public _silc_mp_get_str
push	ebx
sub	esp, 18h
mov	ebx, [esp+1Ch+str]
mov	edx, [esp+1Ch+base]
mov	[esp+1Ch+radix], edx 
mov	[esp+1Ch+var_18], ebx 
mov	eax, [esp+1Ch+mp]
mov	[esp+1Ch+a], eax 
call	_tma_mp_toradix
test	eax, eax
jz	short loc_641FF7FA
xor	str_0, str_0
mov	eax, str_0
add	esp, 18h
pop	str_0
retn
align 4
public _silc_mp_get_ui
			
sub	esp, 0Ch
add	esp, 0Ch
jmp	_tma_mp_get_int
align 10h
public _silc_mp_set_str
			
sub	esp, 0Ch
add	esp, 0Ch
jmp	_tma_mp_read_radix
align 4
public _silc_mp_set_si
sub	esp, 0Ch
add	esp, 0Ch
jmp	_tma_mp_set_int
align 4
public _silc_mp_set_ui
			
sub	esp, 0Ch
add	esp, 0Ch
jmp	_tma_mp_set_int
align 4
public _silc_mp_set
			
sub	esp, 0Ch
mov	eax, [esp+0Ch+src]
mov	edx, [esp+0Ch+dst]
mov	[esp+0Ch+src], edx 
mov	[esp+0Ch+dst], eax 
add	esp, 0Ch
jmp	_tma_mp_copy
align 10h
public _silc_mp_sizeinbase
			
sub	esp, 2Ch
mov	[esp+2Ch+size],	0
lea	ecx, [esp+2Ch+size]
mov	[esp+2Ch+var_24], ecx 
mov	edx, [esp+2Ch+base]
mov	[esp+2Ch+radix], edx 
mov	eax, [esp+2Ch+mp]
mov	[esp+2Ch+a], eax 
call	_tma_mp_radix_size
mov	eax, [esp+2Ch+size]
cmp	eax, 1
jle	short loc_641FF881
dec	eax
add	esp, 2Ch
retn
align 4
public _silc_mp_size
sub	esp, 0Ch
add	esp, 0Ch
jmp	_tma_mp_unsigned_bin_size
align 4
public _silc_mp_uninit
			
sub	esp, 0Ch
add	esp, 0Ch
jmp	_tma_mp_clear
align 10h
public _silc_mp_sinit
			
sub	esp, 1Ch
mov	eax, [esp+1Ch+mp]
mov	[esp+1Ch+a], eax 
call	_tma_mp_init
mov	al, 1
add	esp, 1Ch
retn
align 4
public _silc_mp_init
			
sub	esp, 0Ch
add	esp, 0Ch
jmp	_tma_mp_init
align 4
public _silc_mp_mod_ui
			
sub	esp, 2Ch
lea	edx, [esp+2Ch+d]
mov	[esp+2Ch+c], edx 
mov	eax, [esp+2Ch+ui]
mov	[esp+2Ch+b], eax 
mov	ecx, [esp+2Ch+mp1]
mov	[esp+2Ch+a], ecx 
call	_tma_mp_mod_d
mov	edx, [esp+2Ch+d]
mov	[esp+2Ch+b], edx 
mov	eax, [esp+2Ch+dst]
mov	[esp+2Ch+a], eax 
call	_tma_mp_set_int
add	esp, 2Ch
retn
align 4
public _silc_mp_pow_mod_ui
push	ebx
sub	esp, 28h
lea	ebx, [esp+2Ch+tmp]
mov	[esp+2Ch+a], ebx 
call	_tma_mp_init
mov	eax, [esp+2Ch+exp]
mov	[esp+2Ch+b], eax 
mov	[esp+2Ch+a], ebx 
call	_tma_mp_set_int
mov	ecx, [esp+2Ch+dst]
mov	[esp+2Ch+Y], ecx 
mov	edx, [esp+2Ch+mod]
mov	[esp+2Ch+P], edx 
mov	[esp+2Ch+b], ebx 
mov	eax, [esp+2Ch+mp1]
mov	[esp+2Ch+a], eax 
call	_tma_mp_exptmod
mov	[esp+2Ch+a], ebx 
call	_tma_mp_clear
add	esp, 28h
pop	ebx
retn
align 4
public _silc_math_prime_test
push	ebp
push	edi
push	esi
push	ebx
sub	esp, 4Ch
mov	edi, [esp+5Ch+p]
lea	ecx, [esp+5Ch+r]
mov	[esp+5Ch+mp], ecx 
call	_silc_mp_init
lea	esi, [esp+5Ch+tmp]
mov	[esp+5Ch+mp], esi 
call	_silc_mp_init
lea	edx, [esp+5Ch+base]
mov	[esp+5Ch+mp], edx 
call	_silc_mp_init
mov	[esp+5Ch+ui], 2	
lea	eax, [esp+5Ch+base]
mov	[esp+5Ch+mp], eax 
call	_silc_mp_set_ui
mov	eax, 2
xor	ebp, ebp
xor	ebx, ebx
mov	[esp+5Ch+var_54], eax
mov	[esp+5Ch+ui], p_0 
mov	[esp+5Ch+mp], esi 
call	_silc_mp_mod_ui
mov	[esp+5Ch+ui], 0	
mov	[esp+5Ch+mp], esi 
call	_silc_mp_cmp_ui
test	eax, eax
jnz	short loc_641FF9C1
mov	ret, 0FFFFFFFFh
inc	i
mov	eax, ds:_primetable[i*4]
test	eax, eax
jnz	short loc_641FF998
mov	[esp+5Ch+mod], p_0 
mov	[esp+5Ch+var_54], p_0 
lea	eax, [esp+5Ch+base]
mov	[esp+5Ch+ui], eax 
lea	p_0, [esp+5Ch+r]
mov	[esp+5Ch+mp], edi 
call	_silc_mp_pow_mod
mov	[esp+5Ch+ui], 2	
lea	i, [esp+5Ch+r]
mov	[esp+5Ch+mp], ebx 
call	_silc_mp_cmp_ui
test	eax, eax
jnz	short loc_641FFA2E
lea	edx, [esp+5Ch+r]
mov	[esp+5Ch+mp], edx 
call	_silc_mp_uninit
mov	[esp+5Ch+mp], esi 
call	_silc_mp_uninit
lea	esi, [esp+5Ch+base]
mov	[esp+5Ch+mp], esi 
call	_silc_mp_uninit
test	ret, ret
setz	al
add	esp, 4Ch
pop	ebx
pop	esi
pop	edi
pop	ret
retn
lea	ecx, [esp+5Ch+r]
mov	[esp+5Ch+mp], ecx 
call	_silc_mp_uninit
mov	[esp+5Ch+mp], esi 
call	_silc_mp_uninit
lea	ret, [esp+5Ch+base]
mov	[esp+5Ch+mp], ebp 
call	_silc_mp_uninit
xor	eax, eax
add	esp, 4Ch
pop	ebx
pop	esi
pop	edi
pop	ebp
retn
public _silc_math_gen_prime
			
push	ebp
push	edi
push	esi
push	ebx
sub	esp, 8Ch
mov	al, [esp+9Ch+verbose]
mov	[esp+9Ch+var_6D], al
lea	esi, [esp+9Ch+r]
mov	[esp+9Ch+mp], esi 
call	_silc_mp_init
lea	ebx, [esp+9Ch+base]
mov	[esp+9Ch+mp], ebx 
call	_silc_mp_init
lea	ebx, [esp+9Ch+tmp]
mov	[esp+9Ch+mp], ebx 
call	_silc_mp_init
lea	esi, [esp+9Ch+tmp2]
mov	[esp+9Ch+mp], esi 
call	_silc_mp_init
lea	ebp, [esp+9Ch+oprime]
mov	[esp+9Ch+mp], ebp 
call	_silc_mp_init
mov	[esp+9Ch+ui], 2	
lea	edi, [esp+9Ch+base]
mov	[esp+9Ch+mp], edi 
call	_silc_mp_set_ui
mov	ecx, [esp+9Ch+bits]
shr	ecx, 3
mov	[esp+9Ch+len], ecx
mov	edx, ds:__imp___iob
add	edx, 20h
mov	[esp+9Ch+var_84], edx
mov	eax, [esp+9Ch+bits]
dec	eax
mov	[esp+9Ch+exp], eax
mov	edi, [esp+9Ch+rng]
test	edi, edi
jz	loc_641FFF82
mov	ecx, [esp+9Ch+len]
mov	[esp+9Ch+ui], ecx 
mov	edx, [esp+9Ch+rng]
mov	[esp+9Ch+mp], edx 
call	_silc_rng_get_rn_data
mov	ebp, eax
test	numbuf,	numbuf
jz	loc_641FFF98
mov	eax, [esp+9Ch+prime]
mov	[esp+9Ch+ret], eax 
mov	edi, [esp+9Ch+len]
mov	[esp+9Ch+ui], edi 
mov	[esp+9Ch+mp], numbuf 
call	_silc_mp_bin2mp
mov	ecx, [esp+9Ch+bits]
mov	[esp+9Ch+ret], ecx 
mov	edx, [esp+9Ch+prime]
mov	[esp+9Ch+ui], edx 
mov	[esp+9Ch+mp], edx 
call	_silc_mp_mod_2exp
mov	edi, numbuf
mov	ecx, [esp+9Ch+len]
xor	eax, eax
rep stosb
mov	[esp+9Ch+mp], ebp 
call	_silc_free
mov	[esp+9Ch+ui], 1	
mov	[esp+9Ch+mp], ebx 
call	_silc_mp_set_ui
mov	edx, [esp+9Ch+exp]
mov	[esp+9Ch+ret], edx 
mov	[esp+9Ch+ui], ebx 
mov	[esp+9Ch+mp], ebx 
call	_silc_mp_mul_2exp
mov	[esp+9Ch+ret], ebx 
mov	eax, [esp+9Ch+prime]
mov	[esp+9Ch+ui], eax 
mov	[esp+9Ch+mp], eax 
call	_silc_mp_or
mov	[esp+9Ch+ui], 1	
mov	[esp+9Ch+mp], ebx 
call	_silc_mp_set_ui
mov	[esp+9Ch+ret], ebx 
mov	ebp, [esp+9Ch+prime]
mov	[esp+9Ch+ui], ebp 
mov	[esp+9Ch+mp], ebp 
call	_silc_mp_or
mov	[esp+9Ch+ui], 4050h 
mov	[esp+9Ch+mp], 1	
call	_silc_calloc
mov	[esp+9Ch+ptr], eax
mov	eax, 2
xor	numbuf,	numbuf
jmp	loc_641FFC86
align 4
mov	[esp+9Ch+ret], eax 
mov	eax, [esp+9Ch+prime]
mov	[esp+9Ch+ui], eax 
mov	[esp+9Ch+mp], ebx 
call	_silc_mp_mod_ui
mov	[esp+9Ch+mp], ebx 
call	_silc_mp_get_ui
mov	ecx, [esp+9Ch+ptr]
mov	[ecx+ebp*4], eax
inc	i
mov	eax, ds:_primetable[i*4]
test	eax, eax
jz	loc_641FFCC1
mov	[esp+9Ch+ret], eax 
mov	ecx, [esp+9Ch+prime]
mov	[esp+9Ch+ui], ecx 
mov	[esp+9Ch+mp], ebx 
call	_silc_mp_mod_ui
mov	[esp+9Ch+mp], ebx 
call	_silc_mp_get_ui
mov	edx, [esp+9Ch+ptr]
mov	[edx+i*4], eax
lea	i, [ebp+2]
mov	eax, ds:_primetable[i*4]
test	eax, eax
jz	short loc_641FFCC1
mov	[esp+9Ch+ret], eax 
mov	eax, [esp+9Ch+prime]
mov	[esp+9Ch+ui], eax 
mov	[esp+9Ch+mp], ebx 
call	_silc_mp_mod_ui
mov	[esp+9Ch+mp], ebx 
call	_silc_mp_get_ui
mov	edx, [esp+9Ch+ptr]
mov	[edx+i*4], eax
lea	i, [ebp+3]
mov	eax, ds:_primetable[i*4]
test	eax, eax
jz	short loc_641FFCC1
mov	[esp+9Ch+ret], eax 
mov	edx, [esp+9Ch+prime]
mov	[esp+9Ch+ui], edx 
mov	[esp+9Ch+mp], ebx 
call	_silc_mp_mod_ui
mov	[esp+9Ch+mp], ebx 
call	_silc_mp_get_ui
mov	ebp, [esp+9Ch+ptr]
mov	[ebp+i*4+0], eax
lea	ebp, [i+1]
mov	i, ebp
mov	eax, ds:_primetable[ebp*4]
test	eax, eax
jnz	loc_641FFBE8
			
mov	ebp, [esp+9Ch+prime]
mov	[esp+9Ch+ui], ebp 
lea	eax, [esp+9Ch+oprime]
mov	[esp+9Ch+mp], eax 
call	_silc_mp_set
xor	ecx, ecx
mov	ebp, k
mov	[esp+9Ch+var_7C], i
mov	[esp+9Ch+ret], k
mov	ecx, [esp+9Ch+prime]
mov	[esp+9Ch+ui], ecx 
lea	edx, [esp+9Ch+oprime]
mov	[esp+9Ch+mp], edx 
call	_silc_mp_add_ui
mov	b, [esp+9Ch+var_7C]
test	edi, edi
jz	loc_641FFE98
xor	edi, edi
mov	edx, [esp+9Ch+var_7C]
dec	edx
and	edx, 1
mov	ecx, [esp+9Ch+ptr]
mov	eax, [ecx]
mov	[esp+9Ch+ui], eax 
mov	[esp+9Ch+mp], esi 
mov	[esp+9Ch+var_88], edx
call	_silc_mp_set_ui
mov	[esp+9Ch+ret], k 
mov	[esp+9Ch+ui], esi 
mov	[esp+9Ch+mp], esi 
call	_silc_mp_add_ui
mov	eax, ds:_primetable
mov	[esp+9Ch+ret], eax 
mov	[esp+9Ch+ui], esi 
mov	[esp+9Ch+mp], ebx 
call	_silc_mp_mod_ui
mov	[esp+9Ch+ui], 0	
mov	[esp+9Ch+mp], ebx 
call	_silc_mp_cmp_ui
test	eax, eax
mov	edx, [esp+9Ch+var_88]
jz	loc_641FFE88
mov	b, 1
cmp	b, [esp+9Ch+var_7C]
jnb	loc_641FFE98
test	edx, edx
jz	loc_641FFE36
mov	edx, [esp+9Ch+ptr]
mov	eax, [edx+4]
mov	[esp+9Ch+ui], eax 
mov	[esp+9Ch+mp], esi 
call	_silc_mp_set_ui
mov	[esp+9Ch+ret], k 
mov	[esp+9Ch+ui], esi 
mov	[esp+9Ch+mp], esi 
call	_silc_mp_add_ui
mov	ecx, ds:_primetable+4
mov	[esp+9Ch+ret], ecx 
mov	[esp+9Ch+ui], esi 
mov	[esp+9Ch+mp], ebx 
call	_silc_mp_mod_ui
mov	[esp+9Ch+ui], 0	
mov	[esp+9Ch+mp], ebx 
call	_silc_mp_cmp_ui
test	eax, eax
jz	loc_641FFE88
mov	di, 2
cmp	edi, [esp+9Ch+var_7C]
jb	short loc_641FFE36
jmp	loc_641FFE98
align 10h
inc	b
mov	ecx, [esp+9Ch+ptr]
mov	eax, [ecx+edi*4]
mov	[esp+9Ch+ui], eax 
mov	[esp+9Ch+mp], esi 
call	_silc_mp_set_ui
mov	[esp+9Ch+ret], k 
mov	[esp+9Ch+ui], esi 
mov	[esp+9Ch+mp], esi 
call	_silc_mp_add_ui
mov	edx, ds:_primetable[b*4]
mov	[esp+9Ch+ret], edx 
mov	[esp+9Ch+ui], esi 
mov	[esp+9Ch+mp], ebx 
call	_silc_mp_mod_ui
mov	[esp+9Ch+ui], 0	
mov	[esp+9Ch+mp], ebx 
call	_silc_mp_cmp_ui
test	eax, eax
jz	short loc_641FFE88
inc	b
cmp	b, [esp+9Ch+var_7C]
jnb	short loc_641FFE98
			
mov	ecx, [esp+9Ch+ptr]
mov	eax, [ecx+b*4]
mov	[esp+9Ch+ui], eax 
mov	[esp+9Ch+mp], esi 
call	_silc_mp_set_ui
mov	[esp+9Ch+ret], k 
mov	[esp+9Ch+ui], esi 
mov	[esp+9Ch+mp], esi 
call	_silc_mp_add_ui
mov	edx, ds:_primetable[b*4]
mov	[esp+9Ch+ret], edx 
mov	[esp+9Ch+ui], esi 
mov	[esp+9Ch+mp], ebx 
call	_silc_mp_mod_ui
mov	[esp+9Ch+ui], 0	
mov	[esp+9Ch+mp], ebx 
call	_silc_mp_cmp_ui
test	eax, eax
jnz	loc_641FFDE0
			
cmp	b, [esp+9Ch+var_7C]
jnb	short loc_641FFE98
			
add	k, 2
jmp	loc_641FFCE0
align 4
			
lea	ecx, [esp+9Ch+oprime]
mov	[esp+9Ch+mod], ecx 
mov	[esp+9Ch+ret], ecx 
lea	eax, [esp+9Ch+base]
mov	[esp+9Ch+ui], eax 
lea	edx, [esp+9Ch+r]
mov	[esp+9Ch+mp], edx 
call	_silc_mp_pow_mod
mov	[esp+9Ch+ui], 2	
lea	b, [esp+9Ch+r]
mov	[esp+9Ch+mp], edi 
call	_silc_mp_cmp_ui
test	eax, eax
jz	short loc_641FFEF4
cmp	[esp+9Ch+var_6D], 0
jz	short loc_641FFE8E
mov	[esp+9Ch+mp], 2Eh 
call	_putchar
mov	edi, [esp+9Ch+var_84]
mov	[esp+9Ch+mp], edi 
call	_fflush
jmp	short loc_641FFE8E
align 4
lea	ecx, [esp+9Ch+oprime]
mov	[esp+9Ch+ui], ecx 
mov	eax, [esp+9Ch+prime]
mov	[esp+9Ch+mp], eax 
call	_silc_mp_set
mov	edx, [esp+9Ch+exp]
mov	[esp+9Ch+ret], edx 
mov	k, [esp+9Ch+prime]
mov	[esp+9Ch+ui], ebp 
mov	[esp+9Ch+mp], ebx 
call	_silc_mp_div_2exp
mov	[esp+9Ch+mp], ebx 
call	_silc_mp_get_ui
dec	eax
jnz	loc_641FFAE4
mov	eax, [esp+9Ch+ptr]
mov	[esp+9Ch+mp], eax 
call	_silc_free
lea	edx, [esp+9Ch+r]
mov	[esp+9Ch+mp], edx 
call	_silc_mp_uninit
lea	ebp, [esp+9Ch+base]
mov	[esp+9Ch+mp], ebp 
call	_silc_mp_uninit
mov	[esp+9Ch+mp], ebx 
call	_silc_mp_uninit
mov	[esp+9Ch+mp], esi 
call	_silc_mp_uninit
lea	ebx, [esp+9Ch+oprime]
mov	[esp+9Ch+mp], ebx 
call	_silc_mp_uninit
mov	al, 1
add	esp, 8Ch
pop	ebx
pop	esi
pop	edi
pop	numbuf
retn
mov	edi, [esp+9Ch+len]
mov	[esp+9Ch+mp], edi 
call	_silc_rng_global_get_rn_data
mov	ebp, eax
test	numbuf,	numbuf
jnz	loc_641FFB14
xor	eax, eax
jmp	short loc_641FFF77
public _tma_mp_error_to_string
mov	eax, [esp+code]
test	eax, eax
jz	short loc_641FFFB9
cmp	code_0,	0FFFFFFFEh
jz	short loc_641FFFC4
cmp	code_0,	0FFFFFFFDh
jz	short loc_641FFFB4
mov	code_0,	offset aInvalidError_0 
retn
mov	code_0,	2
			
mov	x, ds:_msgs.msg[x*8]
retn
align 4
mov	code_0,	1
jmp	short loc_641FFFB9
align 4
public _tma_mp_clamp
push	ebp
push	edi
push	esi
push	ebx
mov	edi, [esp+10h+a]
mov	ebx, [edi]
test	ebx, ebx
jle	loc_64200108
mov	ecx, [a_0+0Ch]
lea	eax, [ebx-1]
mov	edx, [ecx+eax*4]
test	edx, edx
jnz	loc_64200113
lea	edx, ds:0FFFFFFF8h[ebx*4]
mov	esi, eax
and	esi, 7
jz	loc_64200092
mov	ebx, eax
test	eax, eax
jle	loc_64200106
mov	ebx, [ecx+edx]
sub	edx, 4
test	ebx, ebx
jnz	loc_64200118
dec	eax
cmp	esi, 1
jz	short loc_64200092
cmp	esi, 2
jz	short loc_64200083
cmp	esi, 3
jz	short loc_64200074
cmp	esi, 4
jz	short loc_64200065
cmp	esi, 5
jz	short loc_64200056
cmp	esi, 6
jz	short loc_64200047
mov	ebp, [ecx+edx]
sub	edx, 4
test	ebp, ebp
jnz	loc_64200118
dec	eax
mov	esi, [ecx+edx]
sub	edx, 4
test	esi, esi
jnz	loc_64200118
dec	eax
mov	ebx, [ecx+edx]
sub	edx, 4
test	ebx, ebx
jnz	loc_64200118
dec	eax
mov	ebp, [ecx+edx]
sub	edx, 4
test	ebp, ebp
jnz	loc_64200118
dec	eax
mov	esi, [ecx+edx]
sub	edx, 4
test	esi, esi
jnz	loc_64200118
dec	eax
mov	ebx, [ecx+edx]
sub	edx, 4
test	ebx, ebx
jnz	loc_64200118
dec	eax
			
mov	ebx, eax
test	eax, eax
jle	short loc_64200106
lea	esi, [edx-4]
mov	ebp, [ecx+edx]
test	ebp, ebp
jnz	short loc_64200118
lea	ebx, [eax-1]
mov	eax, ebx
lea	ebp, [edx-8]
mov	esi, [ecx+esi]
test	esi, esi
jnz	short loc_64200118
dec	eax
lea	esi, [edx-0Ch]
mov	ebp, [ecx+ebp]
test	ebp, ebp
jnz	short loc_64200118
lea	eax, [ebx-2]
lea	ebp, [edx-10h]
mov	esi, [ecx+esi]
test	esi, esi
jnz	short loc_64200118
lea	eax, [ebx-3]
lea	esi, [edx-14h]
mov	ebp, [ecx+ebp]
test	ebp, ebp
jnz	short loc_64200118
lea	eax, [ebx-4]
lea	ebp, [edx-18h]
mov	esi, [ecx+esi]
test	esi, esi
jnz	short loc_64200118
lea	eax, [ebx-5]
lea	esi, [edx-1Ch]
mov	ebp, [ecx+ebp]
test	ebp, ebp
jnz	short loc_64200118
lea	eax, [ebx-6]
sub	edx, 20h
mov	esi, [ecx+esi]
test	esi, esi
jnz	short loc_64200118
lea	eax, [ebx-7]
mov	ebx, eax
test	eax, eax
jg	short loc_64200098
			
mov	[a_0], eax
test	ebx, ebx
jnz	short loc_64200113
mov	dword ptr [a_0+8], 0
			
pop	ebx
pop	esi
pop	a_0
pop	ebp
retn
			
mov	[a_0], eax
pop	ebx
pop	esi
pop	a_0
pop	ebp
retn
align 10h
public _tma_mp_cmp_d
			
mov	eax, [esp+a]
cmp	dword ptr [eax+8], 1
jz	short loc_64200148
cmp	dword ptr [a_0], 1
jle	short loc_64200138
mov	eax, 1
retn
align 4
mov	edx, [a_0+0Ch]
mov	a_0, [esp+b]
cmp	[edx], eax
ja	short loc_6420012F
jb	short loc_64200148
xor	b_0, b_0
retn
			
mov	eax, 0FFFFFFFFh
retn
align 10h
public _tma_mp_cmp_mag
			
push	ebp
push	edi
push	esi
push	ebx
sub	esp, 8
mov	ecx, [esp+18h+a]
mov	edx, [esp+18h+b]
mov	eax, [ecx]
cmp	eax, [edx]
jle	short loc_64200174
			
mov	eax, 1
			
add	esp, 8
pop	tmpa
pop	esi
pop	n
pop	ebp
retn
align 4
jl	loc_64200378
mov	ebx, [a_0+0Ch]
mov	a_0, [b_0+0Ch]
test	eax, eax
jle	loc_64200382
lea	esi, [eax-1]
lea	edi, ds:0[esi*4]
add	ebx, edi
add	ecx, edi
mov	b_0, [tmpb]
cmp	edx, [tmpa]
jb	short loc_64200165
ja	loc_64200378
xor	edx, edx
xor	edi, edi
and	esi, 7
jz	loc_64200295
mov	n, 1
mov	ebp, [tmpb-4]
cmp	[tmpa-4], ebp
ja	short loc_64200165
mov	edx, 0FFFFFFFCh
jb	loc_64200378
cmp	esi, 1
jz	loc_64200295
cmp	esi, 2
jz	loc_64200279
cmp	esi, 3
jz	short loc_6420025D
cmp	esi, 4
jz	short loc_64200241
cmp	esi, 5
jz	short loc_64200225
cmp	esi, 6
jz	short loc_64200209
inc	n
mov	ebp, [tmpa+edx-4]
mov	esi, [tmpb+edx-4]
cmp	ebp, esi
ja	loc_64200165
sub	edx, 4
cmp	ebp, esi
jb	loc_64200378
inc	n
mov	ebp, [tmpa+edx-4]
mov	esi, [tmpb+edx-4]
cmp	ebp, esi
ja	loc_64200165
sub	edx, 4
cmp	ebp, esi
jb	loc_64200378
inc	n
mov	ebp, [tmpa+edx-4]
mov	esi, [tmpb+edx-4]
cmp	ebp, esi
ja	loc_64200165
sub	edx, 4
cmp	ebp, esi
jb	loc_64200378
inc	n
mov	ebp, [tmpa+edx-4]
mov	esi, [tmpb+edx-4]
cmp	ebp, esi
ja	loc_64200165
sub	edx, 4
cmp	ebp, esi
jb	loc_64200378
inc	n
mov	ebp, [tmpa+edx-4]
mov	esi, [tmpb+edx-4]
cmp	ebp, esi
ja	loc_64200165
sub	edx, 4
cmp	ebp, esi
jb	loc_64200378
inc	n
mov	ebp, [tmpa+edx-4]
mov	esi, [tmpb+edx-4]
cmp	ebp, esi
ja	loc_64200165
sub	edx, 4
cmp	ebp, esi
jb	loc_64200378
			
mov	[esp+18h+var_14], eax
inc	n
mov	[esp+18h+var_18], edi
cmp	[esp+18h+var_14], edi
jle	loc_64200382
mov	edi, [tmpa+edx-4]
mov	esi, [tmpb+edx-4]
cmp	edi, esi
ja	loc_64200165
lea	eax, [edx-4]
cmp	edi, esi
jb	loc_64200378
mov	edi, [tmpa+eax-4]
mov	esi, [tmpb+eax-4]
cmp	edi, esi
ja	loc_64200165
lea	ebp, [edx-8]
cmp	edi, esi
jb	loc_64200378
mov	edi, [tmpa+ebp-4]
mov	esi, [tmpb+ebp-4]
cmp	edi, esi
ja	loc_64200165
lea	ebp, [edx-0Ch]
cmp	edi, esi
jb	loc_64200378
mov	esi, [tmpa+ebp-4]
mov	edi, [tmpb+ebp-4]
cmp	esi, edi
ja	loc_64200165
sub	edx, 10h
cmp	esi, edi
jb	short loc_64200378
mov	esi, [tmpa+edx-4]
mov	edx, [tmpb+edx-4]
cmp	esi, edx
ja	loc_64200165
lea	edi, [eax-10h]
cmp	esi, edx
jb	short loc_64200378
mov	esi, [tmpa+edi-4]
mov	edx, [tmpb+edi-4]
cmp	esi, edx
ja	loc_64200165
lea	edi, [eax-14h]
cmp	esi, edx
jb	short loc_64200378
mov	esi, [tmpa+edi-4]
mov	edi, [tmpb+edi-4]
cmp	esi, edi
ja	loc_64200165
lea	edx, [eax-18h]
cmp	esi, edi
jb	short loc_64200378
mov	edi, [esp+18h+var_18]
add	n, 7
mov	ebp, [tmpa+edx-4]
mov	esi, [tmpb+edx-4]
cmp	ebp, esi
ja	loc_64200165
lea	edx, [eax-1Ch]
cmp	ebp, esi
jnb	loc_64200299
lea	esi, [esi+0]
			
mov	eax, 0FFFFFFFFh
jmp	loc_6420016A
			
xor	eax, eax
jmp	loc_6420016A
align 4
public _tma_mp_cnt_lsb
			
push	esi
push	ebx
mov	eax, [esp+8+a]
mov	esi, [eax]
cmp	esi, 0
jz	loc_6420053C
jle	loc_6420055C
mov	ecx, [a_0+0Ch]
mov	edx, [ecx]
test	q, q
jnz	loc_64200568
xor	a_0, a_0
lea	ebx, [esi-1]
and	ebx, 7
jz	short loc_6420041C
mov	x, 1
mov	q, [ecx+x*4]
test	q, q
jnz	loc_64200474
cmp	ebx, 1
jz	short loc_6420041C
cmp	ebx, 2
jz	short loc_64200414
cmp	ebx, 3
jz	short loc_6420040C
cmp	ebx, 4
jz	short loc_64200404
cmp	ebx, 5
jz	short loc_642003FC
cmp	ebx, 6
jz	short loc_642003F4
inc	x
mov	q, [ecx+x*4]
test	q, q
jnz	loc_64200474
inc	x
mov	q, [ecx+x*4]
test	q, q
jnz	short loc_64200474
inc	x
mov	q, [ecx+x*4]
test	q, q
jnz	short loc_64200474
inc	x
mov	q, [ecx+x*4]
test	q, q
jnz	short loc_64200474
inc	x
mov	q, [ecx+x*4]
test	q, q
jnz	short loc_64200474
inc	x
mov	q, [ecx+x*4]
test	q, q
jnz	short loc_64200474
			
lea	ebx, [x+1]
mov	x, ebx
cmp	esi, ebx
jle	loc_64200544
mov	q, [ecx+x*4]
test	q, q
jnz	short loc_64200474
inc	x
mov	q, [ecx+x*4]
test	q, q
jnz	short loc_64200474
lea	x, [ebx+2]
mov	q, [ecx+x*4]
test	q, q
jnz	short loc_64200474
lea	x, [ebx+3]
mov	q, [ecx+x*4]
test	q, q
jnz	short loc_64200474
lea	x, [ebx+4]
mov	q, [ecx+x*4]
test	q, q
jnz	short loc_64200474
lea	x, [ebx+5]
mov	q, [ecx+x*4]
test	q, q
jnz	short loc_64200474
lea	x, [ebx+6]
mov	q, [ecx+x*4]
test	q, q
jnz	short loc_64200474
lea	x, [ebx+7]
mov	q, [ecx+x*4]
test	q, q
jz	short loc_6420041C
			
lea	ebx, ds:0[x*4]
lea	x, ds:0[ebx*8]
sub	x, ebx
			
test	dl, 1
jnz	loc_64200538
mov	esi, q
and	qq, 0Fh
add	x, ds:_lnz[qq*4]
mov	ebx, q
shr	ebx, 4
test	qq, qq
jnz	loc_64200538
mov	ecx, q
and	qq, 0Fh
add	x, ds:_lnz[qq*4]
mov	q, edx
shr	q, 8
test	qq, qq
jnz	short loc_64200538
mov	esi, q
and	qq, 0Fh
add	x, ds:_lnz[qq*4]
mov	q, edx
shr	q, 0Ch
test	qq, qq
jnz	short loc_64200538
mov	ecx, q
and	qq, 0Fh
add	x, ds:_lnz[qq*4]
mov	q, edx
shr	q, 10h
test	qq, qq
jnz	short loc_64200538
mov	esi, q
and	qq, 0Fh
add	x, ds:_lnz[qq*4]
mov	q, edx
shr	q, 14h
test	qq, qq
jnz	short loc_64200538
mov	ecx, q
and	qq, 0Fh
add	x, ds:_lnz[qq*4]
mov	q, edx
shr	q, 18h
test	qq, qq
jnz	short loc_64200538
mov	esi, q
and	qq, 0Fh
add	x, ds:_lnz[qq*4]
shr	edx, 1Ch
test	qq, qq
jnz	short loc_64200538
mov	ebx, q
and	qq, 0Fh
add	x, ds:_lnz[qq*4]
xor	q, q
test	qq, qq
jz	loc_6420048D
			
pop	q
pop	esi
retn
align 4
xor	a_0, a_0
pop	ebx
pop	esi
retn
align 4
mov	q, [ecx+x*4]
lea	ecx, ds:0[x*4]
lea	eax, ds:0[ecx*8]
sub	x, ecx
jmp	loc_64200484
mov	a_0, [a_0+0Ch]
mov	edx, [eax]
xor	eax, eax
jmp	loc_64200484
xor	a_0, a_0
jmp	loc_64200484
align 10h
public _tma_mp_count_bits
push	ebx
mov	q, [esp+4+a]
mov	eax, [q]
test	eax, eax
jz	short loc_642005E8
lea	ecx, [eax-1]
lea	ebx, ds:0[ecx*4]
lea	eax, ds:0[ebx*8]
sub	r, ebx
mov	q, [q+0Ch]
mov	q, [q+ecx*4]
test	q, q
jz	short loc_642005E8
lea	ecx, [r+1]
mov	r, ecx
mov	ebx, q
shr	ebx, 1
jz	short loc_642005E8
inc	r
mov	ebx, q
shr	ebx, 2
jz	short loc_642005E8
lea	r, [ecx+2]
mov	ebx, q
shr	ebx, 3
jz	short loc_642005E8
lea	r, [ecx+3]
mov	ebx, q
shr	ebx, 4
jz	short loc_642005E8
lea	r, [ecx+4]
mov	ebx, q
shr	ebx, 5
jz	short loc_642005E8
lea	r, [ecx+5]
mov	ebx, q
shr	ebx, 6
jz	short loc_642005E8
lea	r, [ecx+6]
mov	ebx, q
shr	ebx, 7
jz	short loc_642005E8
lea	r, [ecx+7]
shr	q, 8
jnz	short loc_64200598
lea	esi, [esi+0]
			
pop	ebx
retn
align 4
public _tma_mp_dr_is_modulus
push	ebx
mov	eax, [esp+4+a]
mov	ebx, [eax]
cmp	ebx, 1
jle	loc_642006FC
mov	edx, [a_0+0Ch]
lea	ecx, [ebx-2]
and	ecx, 7
cmp	dword ptr [edx+4], 0FFFFFFFh
jnz	loc_642006FC
mov	a_0, 2
cmp	ebx, 2
jle	loc_642006F2
test	ecx, ecx
jz	short loc_6420069C
cmp	ecx, 1
jz	short loc_6420068E
cmp	ecx, 2
jz	short loc_64200684
cmp	ecx, 3
jz	short loc_6420067A
cmp	ecx, 4
jz	short loc_6420066C
cmp	ecx, 5
jz	short loc_6420065E
cmp	ecx, 6
jz	short loc_64200650
cmp	dword ptr [edx+ix*4], 0FFFFFFFh
jnz	loc_642006FC
inc	ix
cmp	dword ptr [edx+ix*4], 0FFFFFFFh
jnz	loc_642006FC
inc	ix
cmp	dword ptr [edx+ix*4], 0FFFFFFFh
jnz	loc_642006FC
inc	ix
cmp	dword ptr [edx+ix*4], 0FFFFFFFh
jnz	loc_642006FC
inc	ix
cmp	dword ptr [edx+ix*4], 0FFFFFFFh
jnz	short loc_642006FC
inc	ix
cmp	dword ptr [edx+ix*4], 0FFFFFFFh
jnz	short loc_642006FC
inc	ix
cmp	dword ptr [edx+ix*4], 0FFFFFFFh
jnz	short loc_642006FC
inc	ix
cmp	ebx, ix
jle	short loc_642006F2
			
cmp	dword ptr [edx+ix*4], 0FFFFFFFh
jnz	short loc_642006FC
cmp	dword ptr [edx+ix*4+4],	0FFFFFFFh
jnz	short loc_642006FC
cmp	dword ptr [edx+ix*4+8],	0FFFFFFFh
jnz	short loc_642006FC
cmp	dword ptr [edx+ix*4+0Ch], 0FFFFFFFh
jnz	short loc_642006FC
cmp	dword ptr [edx+ix*4+10h], 0FFFFFFFh
jnz	short loc_642006FC
cmp	dword ptr [edx+ix*4+14h], 0FFFFFFFh
jnz	short loc_642006FC
cmp	dword ptr [edx+ix*4+18h], 0FFFFFFFh
jnz	short loc_642006FC
cmp	dword ptr [edx+ix*4+1Ch], 0FFFFFFFh
jnz	short loc_642006FC
add	ix, 8
cmp	ebx, ix
jg	short loc_6420069C
			
mov	ix, 1
pop	ebx
retn
align 4
			
xor	ix, ix
pop	ebx
retn
public _tma_mp_dr_setup
mov	eax, [esp+a]
mov	ecx, [eax+0Ch]
mov	eax, 10000000h
sub	eax, [ecx]
mov	edx, [esp+d]
mov	[edx], eax
retn
align 4
public _tma_mp_exch
push	edi
push	esi
sub	esp, 10h
mov	eax, 4
mov	edi, esp
mov	esi, [esp+18h+a]
mov	ecx, eax
rep movsd
mov	edi, [esp+18h+a]
mov	a_0, [esp+18h+b]
mov	ecx, eax
rep movsd
mov	a_0, [esp+18h+b]
mov	b_0, esp
mov	ecx, eax
rep movsd
add	esp, 10h
pop	esi
pop	b_0
retn
public _tma_mp_get_int
push	edi
push	esi
push	ebx
mov	eax, [esp+0Ch+a]
mov	ebx, [eax]
test	ebx, ebx
jz	loc_64200840
cmp	ebx, 2
jg	loc_64200834
mov	edx, [a_0+0Ch]
mov	a_0, [edx+ebx*4-4]
mov	esi, ebx
sub	i, 2
js	loc_64200830
lea	edi, [edx+i*4]
and	i, 7
shl	res, 1Ch
or	res, [edi]
lea	ecx, [ebx-3]
lea	edx, [edi-4]
cmp	i, 0FFFFFFFFh
jz	loc_64200830
test	esi, esi
jz	short loc_642007F6
cmp	esi, 1
jz	short loc_642007E8
cmp	esi, 2
jz	short loc_642007DF
cmp	esi, 3
jz	short loc_642007D6
cmp	esi, 4
jz	short loc_642007CD
cmp	esi, 5
jz	short loc_642007C4
cmp	esi, 6
jz	short loc_642007BB
shl	res, 1Ch
or	res, [edx]
lea	i, [ebx-4]
lea	edx, [edi-8]
shl	res, 1Ch
or	res, [edx]
dec	i
sub	edx, 4
shl	res, 1Ch
or	res, [edx]
dec	i
sub	edx, 4
shl	res, 1Ch
or	res, [edx]
dec	i
sub	edx, 4
shl	res, 1Ch
or	res, [edx]
dec	i
sub	edx, 4
shl	res, 1Ch
or	res, [edx]
dec	i
sub	edx, 4
shl	res, 1Ch
or	res, [edx]
dec	i
sub	edx, 4
cmp	i, 0FFFFFFFFh
jz	short loc_64200830
			
shl	res, 1Ch
or	res, [edx]
shl	res, 1Ch
or	res, [edx-4]
shl	res, 1Ch
or	res, [edx-8]
shl	res, 1Ch
or	res, [edx-0Ch]
shl	res, 1Ch
or	res, [edx-10h]
shl	res, 1Ch
or	res, [edx-14h]
shl	res, 1Ch
or	res, [edx-18h]
shl	res, 1Ch
or	res, [edx-1Ch]
sub	i, 8
sub	edx, 20h
cmp	i, 0FFFFFFFFh
jnz	short loc_642007F6
			
pop	ebx
pop	esi
pop	edi
retn
mov	ebx, 2
jmp	loc_64200762
align 10h
xor	a_0, a_0
pop	ebx
pop	esi
pop	edi
retn
align 4
public _tma_mp_montgomery_setup
push	esi
push	ebx
mov	edx, [esp+8+n]
mov	eax, [edx+0Ch]
mov	eax, [eax]
test	al, 1
jz	short loc_6420089C
lea	ebx, [b+2]
and	ebx, 4
lea	n_0, [b+ebx*2]
mov	ecx, x
imul	ecx, b
mov	ebx, 2
mov	esi, ebx
sub	esi, ecx
mov	ecx, esi
imul	x, edx
mov	edx, x
imul	edx, b
mov	esi, ebx
sub	esi, edx
mov	edx, esi
imul	x, ecx
imul	b, x
sub	eax, ebx
imul	eax, x
and	eax, 0FFFFFFFh
mov	ecx, [esp+8+rho]
mov	[ecx], eax
xor	eax, eax
pop	ebx
pop	esi
retn
align 4
mov	b, 0FFFFFFFDh
pop	ebx
pop	esi
retn
public _tma_mp_prime_rabin_miller_trials
mov	eax, [esp+size]
mov	edx, ds:_sizes.k
cmp	edx, eax
jz	loc_6420095C
cmp	size_0,	edx
jl	loc_64200968
mov	edx, ds:_sizes.k+8
cmp	edx, size_0
jz	loc_64200970
cmp	size_0,	edx
jl	loc_64200978
mov	edx, ds:_sizes.k+10h
cmp	edx, size_0
jz	loc_64200988
cmp	size_0,	edx
jl	loc_64200990
mov	edx, ds:_sizes.k+18h
cmp	edx, size_0
jz	loc_64200998
cmp	size_0,	edx
jl	loc_642009A0
mov	edx, ds:_sizes.k+20h
cmp	edx, size_0
jz	loc_642009A8
cmp	size_0,	edx
jl	loc_642009B0
mov	edx, ds:_sizes.k+28h
cmp	edx, size_0
jz	loc_642009B8
cmp	size_0,	edx
jl	loc_642009C0
mov	edx, ds:_sizes.k+30h
cmp	edx, size_0
jz	loc_642009C8
cmp	size_0,	edx
jl	loc_642009D0
cmp	ds:_sizes.k+38h, size_0
jz	loc_642009D8
jg	loc_642009E0
mov	size_0,	ds:_sizes.t+38h
inc	eax
retn
align 4
xor	size_0,	size_0
xchg	ax, ax
			
mov	x, ds:_sizes.t[x*8]
retn
mov	size_0,	1Ch
retn
align 10h
mov	size_0,	1
jmp	short loc_64200960
align 4
mov	size_0,	1
lea	esi, [esi+0]
			
mov	x, ds:(_ltm_prime_tab+3FCh)[x*8]
retn
mov	size_0,	2
jmp	short loc_64200960
align 10h
mov	size_0,	2
jmp	short loc_64200980
align 4
mov	size_0,	3
jmp	short loc_64200960
align 10h
mov	size_0,	3
jmp	short loc_64200980
align 4
mov	size_0,	4
jmp	short loc_64200960
align 10h
mov	size_0,	4
jmp	short loc_64200980
align 4
mov	size_0,	5
jmp	short loc_64200960
align 10h
mov	size_0,	5
jmp	short loc_64200980
align 4
mov	size_0,	6
jmp	short loc_64200960
align 10h
mov	size_0,	6
jmp	short loc_64200980
align 4
mov	size_0,	7
jmp	short loc_64200960
align 10h
mov	size_0,	7
jmp	short loc_64200980
align 4
public _tma_mp_reduce_is_2k
push	edi
push	esi
push	ebx
mov	edx, [esp+0Ch+a]
mov	eax, [edx]
test	eax, eax
jz	loc_64200C08
cmp	eax, 1
jz	loc_64200C1C
jle	loc_64200C1C
dec	eax
lea	ecx, ds:0[eax*4]
lea	esi, ds:0[ecx*8]
sub	iy, ecx
mov	ecx, [a_0+0Ch]
mov	eax, [ecx+eax*4]
test	eax, eax
jz	loc_64200C10
lea	edx, [iy+1]
mov	iy, edx
mov	ebx, eax
shr	ebx, 1
jz	short loc_64200A74
inc	iy
mov	edi, eax
shr	edi, 2
jz	short loc_64200A74
lea	iy, [edx+2]
mov	ebx, eax
shr	ebx, 3
jz	short loc_64200A74
lea	iy, [edx+3]
mov	edi, eax
shr	edi, 4
jz	short loc_64200A74
lea	iy, [edx+4]
mov	ebx, eax
shr	ebx, 5
jz	short loc_64200A74
lea	iy, [edx+5]
mov	edi, eax
shr	edi, 6
jz	short loc_64200A74
lea	iy, [edx+6]
mov	ebx, eax
shr	ebx, 7
jz	short loc_64200A74
lea	iy, [edx+7]
shr	eax, 8
jnz	short loc_64200A27
			
test	byte ptr [ecx+4], 1
jz	loc_64200C08
mov	ebx, 1Ch
mov	eax, 2
mov	edx, 1
lea	edi, [iy-1Dh]
and	edi, 7
jz	loc_64200B63
mov	ix, 1Dh
cmp	ix, iy
jge	loc_64200C1C
test	[ecx+4], iz
jz	loc_64200C08
mov	iz, 4
cmp	edi, 1
jz	loc_64200B63
cmp	edi, 2
jz	loc_64200B4A
cmp	edi, 3
jz	short loc_64200B31
cmp	edi, 4
jz	short loc_64200B18
cmp	edi, 5
jz	short loc_64200AFF
cmp	edi, 6
jz	short loc_64200AE6
inc	ix
test	[ecx+iw*4], iz
jz	loc_64200C08
shl	iz, 1
inc	ix
test	[ecx+iw*4], iz
jz	loc_64200C08
shl	iz, 1
cmp	iz, 0FFFFFFFh
jbe	short loc_64200AFF
inc	iw
mov	iz, 1
			
inc	ix
test	[ecx+iw*4], iz
jz	loc_64200C08
shl	iz, 1
cmp	iz, 0FFFFFFFh
jbe	short loc_64200B18
inc	iw
mov	iz, 1
			
inc	ix
test	[ecx+iw*4], iz
jz	loc_64200C08
shl	iz, 1
cmp	iz, 0FFFFFFFh
jbe	short loc_64200B31
inc	iw
mov	iz, 1
			
inc	ix
test	[ecx+iw*4], iz
jz	loc_64200C08
shl	iz, 1
cmp	iz, 0FFFFFFFh
jbe	short loc_64200B4A
inc	iw
mov	iz, 1
			
inc	ix
test	[ecx+iw*4], iz
jz	loc_64200C08
shl	iz, 1
cmp	iz, 0FFFFFFFh
jbe	short loc_64200B63
inc	iw
mov	iz, 1
			
inc	ix
cmp	ebx, iy
jge	loc_64200C1C
test	[ecx+iw*4], iz
jz	loc_64200C08
shl	iz, 1
cmp	iz, 0FFFFFFFh
jbe	short loc_64200B84
inc	iw
mov	iz, 1
test	[ecx+iw*4], iz
jz	short loc_64200C08
shl	iz, 1
cmp	iz, 0FFFFFFFh
jbe	short loc_64200B98
inc	iw
mov	iz, 1
test	[ecx+iw*4], iz
jz	short loc_64200C08
shl	iz, 1
cmp	iz, 0FFFFFFFh
jbe	short loc_64200BAC
inc	iw
mov	iz, 1
test	[ecx+iw*4], iz
jz	short loc_64200C08
shl	iz, 1
cmp	iz, 0FFFFFFFh
jbe	short loc_64200BC0
inc	iw
mov	iz, 1
test	[ecx+iw*4], iz
jz	short loc_64200C08
shl	iz, 1
cmp	iz, 0FFFFFFFh
jbe	short loc_64200BD4
inc	iw
mov	iz, 1
test	[ecx+iw*4], iz
jz	short loc_64200C08
shl	iz, 1
cmp	iz, 0FFFFFFFh
jbe	short loc_64200BE8
inc	iw
mov	iz, 1
test	[ecx+iw*4], iz
jz	short loc_64200C08
shl	iz, 1
cmp	iz, 0FFFFFFFh
jbe	short loc_64200BFC
inc	iw
mov	iz, 1
add	ebx, 7
test	[ecx+iw*4], iz
jnz	loc_64200B54
			
xor	iz, iz
pop	ix
pop	iy
pop	edi
retn
align 10h
cmp	iy, 1Ch
jnz	loc_64200A74
lea	iy, [iy+0]
			
mov	iz, 1
pop	ix
pop	iy
pop	edi
retn
align 4
public _tma_mp_reduce_is_2k_l
push	esi
push	ebx
mov	eax, [esp+8+a]
mov	ecx, [eax]
test	ecx, ecx
jz	loc_64200DAC
cmp	ecx, 1
jz	loc_64200DB4
jle	loc_64200DAC
mov	edx, [a_0+0Ch]
xor	ebx, ebx
lea	esi, [ecx-1]
and	esi, 7
cmp	dword ptr [edx], 0FFFFFFFh
jz	loc_64200DEC
mov	a_0, 1
cmp	ix, ecx
jz	loc_64200CF7
test	esi, esi
jz	loc_64200D52
cmp	esi, 1
jz	short loc_64200CE5
cmp	esi, 2
jz	short loc_64200CD7
cmp	esi, 3
jz	short loc_64200CC9
cmp	esi, 4
jz	short loc_64200CBB
cmp	esi, 5
jz	short loc_64200CAD
cmp	esi, 6
jz	short loc_64200C9F
cmp	dword ptr [edx+ix*4], 0FFFFFFFh
jz	loc_64200DE4
inc	ix
cmp	dword ptr [edx+ix*4], 0FFFFFFFh
jz	loc_64200DDC
inc	ix
cmp	dword ptr [edx+ix*4], 0FFFFFFFh
jz	loc_64200DD4
inc	ix
cmp	dword ptr [edx+ix*4], 0FFFFFFFh
jz	loc_64200DCC
inc	ix
cmp	dword ptr [edx+ix*4], 0FFFFFFFh
jz	loc_64200DC4
inc	ix
cmp	dword ptr [edx+ix*4], 0FFFFFFFh
jz	loc_64200DBC
inc	ix
cmp	dword ptr [edx+ix*4], 0FFFFFFFh
jz	loc_64200DF8
inc	ix
cmp	ix, ecx
jnz	short loc_64200D52
			
sar	ix, 1
cmp	eax, iy
setle	al
movzx	eax, al
pop	iy
pop	esi
retn
inc	iy
inc	ix
cmp	dword ptr [edx+eax*4], 0FFFFFFFh
jz	short loc_64200D65
cmp	dword ptr [edx+eax*4+4], 0FFFFFFFh
jz	short loc_64200D70
cmp	dword ptr [edx+eax*4+8], 0FFFFFFFh
jz	short loc_64200D7B
cmp	dword ptr [edx+eax*4+0Ch], 0FFFFFFFh
jz	short loc_64200D86
cmp	dword ptr [edx+eax*4+10h], 0FFFFFFFh
jz	short loc_64200D91
cmp	dword ptr [edx+eax*4+14h], 0FFFFFFFh
jz	short loc_64200D9C
cmp	dword ptr [edx+eax*4+18h], 0FFFFFFFh
jz	short loc_64200DA7
			
add	eax, 7
cmp	ix, ecx
jz	short loc_64200CF7
			
cmp	dword ptr [edx+ix*4], 0FFFFFFFh
jz	short loc_64200D04
inc	ix
cmp	dword ptr [edx+eax*4], 0FFFFFFFh
jnz	short loc_64200D0F
inc	iy
cmp	dword ptr [edx+eax*4+4], 0FFFFFFFh
jnz	short loc_64200D19
inc	iy
cmp	dword ptr [edx+eax*4+8], 0FFFFFFFh
jnz	short loc_64200D23
inc	iy
cmp	dword ptr [edx+eax*4+0Ch], 0FFFFFFFh
jnz	short loc_64200D2D
inc	iy
cmp	dword ptr [edx+eax*4+10h], 0FFFFFFFh
jnz	short loc_64200D37
inc	iy
cmp	dword ptr [edx+eax*4+14h], 0FFFFFFFh
jnz	short loc_64200D41
inc	iy
cmp	dword ptr [edx+eax*4+18h], 0FFFFFFFh
jnz	short loc_64200D4B
inc	iy
jmp	short loc_64200D4B
align 4
			
xor	a_0, a_0
pop	ebx
pop	esi
retn
align 4
mov	a_0, 1
pop	ebx
pop	esi
retn
inc	iy
jmp	loc_64200CE4
align 4
inc	iy
jmp	loc_64200CD6
align 4
inc	iy
jmp	loc_64200CC8
align 4
inc	iy
jmp	loc_64200CBA
align 4
inc	iy
jmp	loc_64200CAC
align 4
inc	iy
jmp	loc_64200C9E
align 4
mov	iy, 1
jmp	loc_64200C5E
align 4
inc	iy
jmp	loc_64200CF2
align 10h
public _tma_mp_rshd
			
push	ebp
push	edi
push	esi
push	ebx
sub	esp, 4
mov	esi, [esp+14h+a]
mov	eax, [esp+14h+b]
test	eax, eax
jle	loc_64200F00
mov	edi, [a_0]
cmp	b_0, edi
jl	loc_64200F08
mov	dword ptr [a_0+8], 0
mov	dword ptr [a_0], 0
mov	edx, [a_0+0Ch]
mov	ebx, [a_0+4]
test	ebx, ebx
jle	loc_64200F00
lea	ecx, [ebx-1]
and	ecx, 7
mov	dword ptr [edx], 0
mov	b_0, 1
cmp	eax, ebx
jz	loc_64200F00
test	ecx, ecx
jz	short loc_64200EB7
cmp	ecx, 1
jz	short loc_64200EAB
cmp	ecx, 2
jz	short loc_64200EA3
cmp	ecx, 3
jz	short loc_64200E9B
cmp	ecx, 4
jz	short loc_64200E93
cmp	ecx, 5
jz	short loc_64200E8B
cmp	ecx, 6
jz	short loc_64200E83
mov	dword ptr [edx+eax*4], 0
mov	eax, 2
mov	dword ptr [edx+eax*4], 0
inc	eax
mov	dword ptr [edx+eax*4], 0
inc	eax
mov	dword ptr [edx+eax*4], 0
inc	eax
mov	dword ptr [edx+eax*4], 0
inc	eax
mov	dword ptr [edx+eax*4], 0
inc	eax
mov	dword ptr [edx+eax*4], 0
inc	eax
cmp	eax, ebx
jz	short loc_64200F00
			
mov	dword ptr [edx+eax*4], 0
mov	dword ptr [edx+eax*4+4], 0
mov	dword ptr [edx+eax*4+8], 0
mov	dword ptr [edx+eax*4+0Ch], 0
mov	dword ptr [edx+eax*4+10h], 0
mov	dword ptr [edx+eax*4+14h], 0
mov	dword ptr [edx+eax*4+18h], 0
mov	dword ptr [edx+eax*4+1Ch], 0
add	eax, 8
cmp	eax, ebx
jnz	short loc_64200EB7
lea	a_0, [a_0+0]
			
pop	eax
pop	ebx
pop	a_0
pop	edi
pop	ebp
retn
align 4
mov	ecx, [a_0+0Ch]
mov	ebp, edi
sub	x, b_0
test	x, x
jle	loc_642010CC
lea	edx, [bottom+b_0*4]
lea	ebx, [x-1]
and	ebx, 7
mov	b_0, [top]
mov	[bottom], eax
mov	eax, 1
cmp	x, ebp
jz	loc_64200FDE
test	ebx, ebx
jz	short loc_64200F8C
cmp	ebx, 1
jz	short loc_64200F81
cmp	ebx, 2
jz	short loc_64200F7A
cmp	ebx, 3
jz	short loc_64200F73
cmp	ebx, 4
jz	short loc_64200F6C
cmp	ebx, 5
jz	short loc_64200F65
cmp	ebx, 6
jz	short loc_64200F5E
mov	ebx, [top+4]
mov	[bottom+eax*4],	ebx
mov	eax, 2
mov	ebx, [top+x*4]
mov	[bottom+x*4], ebx
inc	x
mov	ebx, [top+x*4]
mov	[bottom+x*4], ebx
inc	x
mov	ebx, [top+x*4]
mov	[bottom+x*4], ebx
inc	x
mov	ebx, [top+x*4]
mov	[bottom+x*4], ebx
inc	x
mov	ebx, [top+x*4]
mov	[bottom+x*4], ebx
inc	x
mov	ebx, [top+x*4]
mov	[bottom+x*4], ebx
inc	x
cmp	x, ebp
jz	short loc_64200FDE
mov	[esp+14h+var_14], edi
mov	ebx, [top+eax*4]
mov	[bottom+eax*4],	ebx
lea	ebx, [eax+1]
mov	edi, [top+ebx*4]
mov	[bottom+ebx*4],	edi
lea	ebx, [eax+2]
mov	edi, [top+x*4]
mov	[bottom+x*4], edi
lea	x, [eax+3]
mov	edi, [top+x*4]
mov	[bottom+x*4], edi
lea	x, [eax+4]
mov	edi, [top+x*4]
mov	[bottom+x*4], edi
lea	x, [eax+5]
mov	edi, [top+x*4]
mov	[bottom+x*4], edi
lea	x, [eax+6]
mov	edi, [top+x*4]
mov	[bottom+x*4], edi
lea	x, [eax+7]
mov	edi, [top+x*4]
mov	[bottom+x*4], edi
add	eax, 8
cmp	x, ebp
jnz	short loc_64200F8F
mov	edi, [esp+14h+var_14]
			
lea	bottom,	[bottom+eax*4]
cmp	edi, x
jle	loc_642010C1
mov	top, x
not	edx
add	edx, edi
mov	[esp+14h+var_14], edx
and	[esp+14h+var_14], 7
mov	dword ptr [bottom], 0
lea	edx, [bottom+4]
lea	ebx, [x+1]
cmp	edi, x
jle	loc_642010C1
cmp	[esp+14h+var_14], 0
jz	short loc_64201080
cmp	[esp+14h+var_14], 1
jz	short loc_64201072
cmp	[esp+14h+var_14], 2
jz	short loc_64201068
cmp	[esp+14h+var_14], 3
jz	short loc_6420105E
cmp	[esp+14h+var_14], 4
jz	short loc_64201054
cmp	[esp+14h+var_14], 5
jz	short loc_6420104A
cmp	[esp+14h+var_14], 6
jz	short loc_64201040
mov	dword ptr [bottom], 0
lea	bottom,	[ecx+8]
lea	x, [eax+2]
mov	dword ptr [bottom], 0
add	bottom,	4
inc	x
mov	dword ptr [bottom], 0
add	bottom,	4
inc	x
mov	dword ptr [bottom], 0
add	bottom,	4
inc	x
mov	dword ptr [bottom], 0
add	bottom,	4
inc	x
mov	dword ptr [bottom], 0
add	bottom,	4
inc	x
mov	dword ptr [bottom], 0
add	bottom,	4
inc	x
cmp	edi, x
jle	short loc_642010C1
			
mov	dword ptr [bottom], 0
mov	dword ptr [bottom+4], 0
mov	dword ptr [bottom+8], 0
mov	dword ptr [bottom+0Ch],	0
mov	dword ptr [bottom+10h],	0
mov	dword ptr [bottom+14h],	0
mov	dword ptr [bottom+18h],	0
mov	dword ptr [bottom+1Ch],	0
add	bottom,	20h
add	x, 8
cmp	edi, x
jg	short loc_64201080
			
mov	[a_0], ebp
pop	eax
pop	x
pop	a_0
pop	edi
pop	x
retn
align 4
xor	b_0, b_0
jmp	loc_64200FE1
align 4
public _tma_mp_set
push	esi
push	ebx
mov	ebx, [esp+8+a]
mov	dword ptr [ebx+8], 0
mov	dword ptr [ebx], 0
mov	edx, [ebx+0Ch]
mov	esi, [ebx+4]
test	esi, esi
jle	loc_642011B6
lea	ecx, [esi-1]
and	ecx, 7
mov	dword ptr [edx], 0
mov	eax, 1
cmp	eax, esi
jz	loc_642011B6
test	ecx, ecx
jz	short loc_64201170
cmp	ecx, 1
jz	short loc_64201164
cmp	ecx, 2
jz	short loc_6420115C
cmp	ecx, 3
jz	short loc_64201154
cmp	ecx, 4
jz	short loc_6420114C
cmp	ecx, 5
jz	short loc_64201144
cmp	ecx, 6
jz	short loc_6420113C
mov	dword ptr [edx+eax*4], 0
mov	eax, 2
mov	dword ptr [edx+eax*4], 0
inc	eax
mov	dword ptr [edx+eax*4], 0
inc	eax
mov	dword ptr [edx+eax*4], 0
inc	eax
mov	dword ptr [edx+eax*4], 0
inc	eax
mov	dword ptr [edx+eax*4], 0
inc	eax
mov	dword ptr [edx+eax*4], 0
inc	eax
cmp	eax, esi
jz	short loc_642011B6
			
mov	dword ptr [edx+eax*4], 0
mov	dword ptr [edx+eax*4+4], 0
mov	dword ptr [edx+eax*4+8], 0
mov	dword ptr [edx+eax*4+0Ch], 0
mov	dword ptr [edx+eax*4+10h], 0
mov	dword ptr [edx+eax*4+14h], 0
mov	dword ptr [edx+eax*4+18h], 0
mov	dword ptr [edx+eax*4+1Ch], 0
add	eax, 8
cmp	eax, esi
jnz	short loc_64201170
			
mov	ecx, [esp+8+b]
and	ecx, 0FFFFFFFh
mov	[edx], ecx
test	ecx, ecx
setnz	dl
movzx	eax, dl
mov	[a_0], eax
pop	a_0
pop	esi
retn
align 10h
public _tma_mp_unsigned_bin_size
push	ebx
mov	eax, [esp+4+a]
mov	edx, [eax]
test	edx, edx
jz	loc_64201260
lea	ebx, [edx-1]
lea	edx, ds:0[ebx*4]
lea	ecx, ds:0[edx*8]
sub	ecx, edx
mov	edx, ecx
mov	a_0, [a_0+0Ch]
mov	eax, [eax+ebx*4]
test	eax, eax
jz	short loc_64201270
lea	ecx, [size+1]
mov	size, ecx
mov	ebx, eax
shr	ebx, 1
jz	short loc_6420124C
inc	size
mov	ebx, eax
shr	ebx, 2
jz	short loc_6420124C
lea	size, [ecx+2]
mov	ebx, eax
shr	ebx, 3
jz	short loc_6420124C
lea	size, [ecx+3]
mov	ebx, eax
shr	ebx, 4
jz	short loc_6420124C
lea	size, [ecx+4]
mov	ebx, eax
shr	ebx, 5
jz	short loc_6420124C
lea	size, [ecx+5]
mov	ebx, eax
shr	ebx, 6
jz	short loc_6420124C
lea	size, [ecx+6]
mov	ebx, eax
shr	ebx, 7
jz	short loc_6420124C
lea	size, [ecx+7]
shr	eax, 8
jnz	short loc_642011FE
nop
			
xor	eax, eax
test	dl, 7
setnz	al
test	size, size
js	short loc_64201264
sar	size, 3
add	eax, edx
pop	ebx
retn
align 10h
xor	a_0, a_0
pop	ebx
retn
add	size, 7
sar	size, 3
add	eax, edx
jmp	short loc_6420125D
align 10h
xor	eax, eax
test	cl, 4
setnz	al
test	ecx, ecx
js	short loc_64201284
sar	size, 3
add	eax, ecx
pop	ebx
retn
align 4
add	size, 7
jmp	short loc_6420127C
align 4
public _tma_mp_zero
push	ebx
mov	n, [esp+4+a]
mov	dword ptr [n+8], 0
mov	dword ptr [n], 0
mov	tmp, [n+0Ch]
mov	ebx, [n+4]
test	ebx, ebx
jle	loc_6420136D
lea	ecx, [ebx-1]
and	ecx, 7
mov	dword ptr [tmp], 0
mov	n, 1
cmp	n, ebx
jz	loc_6420136D
test	ecx, ecx
jz	short loc_64201327
cmp	ecx, 1
jz	short loc_6420131B
cmp	ecx, 2
jz	short loc_64201313
cmp	ecx, 3
jz	short loc_6420130B
cmp	ecx, 4
jz	short loc_64201303
cmp	ecx, 5
jz	short loc_642012FB
cmp	ecx, 6
jz	short loc_642012F3
mov	dword ptr [tmp+n*4], 0
mov	n, 2
mov	dword ptr [tmp+n*4], 0
inc	n
mov	dword ptr [tmp+n*4], 0
inc	n
mov	dword ptr [tmp+n*4], 0
inc	n
mov	dword ptr [tmp+n*4], 0
inc	n
mov	dword ptr [tmp+n*4], 0
inc	n
mov	dword ptr [tmp+n*4], 0
inc	n
cmp	n, ebx
jz	short loc_6420136D
			
mov	dword ptr [tmp+n*4], 0
mov	dword ptr [tmp+n*4+4], 0
mov	dword ptr [tmp+n*4+8], 0
mov	dword ptr [tmp+n*4+0Ch], 0
mov	dword ptr [tmp+n*4+10h], 0
mov	dword ptr [tmp+n*4+14h], 0
mov	dword ptr [tmp+n*4+18h], 0
mov	dword ptr [tmp+n*4+1Ch], 0
add	n, 8
cmp	n, ebx
jnz	short loc_64201327
			
pop	ebx
retn
align 10h
public _bn_reverse
push	ebp
push	edi
push	esi
push	ebx
sub	esp, 4
mov	eax, [esp+14h+s]
mov	ecx, [esp+14h+len]
lea	ebx, [ecx-1]
test	iy, iy
jle	loc_6420149C
lea	len_0, [s_0+len_0]
xor	edx, edx
mov	[esp+14h+var_14], iy
movzx	esi, byte ptr [s_0+ix]
mov	bl, [ecx-1]
mov	[s_0+ix], bl
mov	ebx, t
mov	[ecx-1], bl
lea	t, [ix+1]
mov	ebp, [esp+14h+var_14]
dec	ebp
lea	edi, [ecx-1]
cmp	esi, ebp
jge	loc_6420149C
movzx	ebp, byte ptr [s_0+esi]
mov	bl, [edi-1]
mov	[s_0+esi], bl
mov	ebx, t
mov	[edi-1], bl
lea	esi, [ix+2]
mov	t, [esp+14h+var_14]
sub	iy, 2
lea	edi, [ecx-2]
cmp	ix, iy
jge	loc_6420149C
movzx	iy, byte ptr [s_0+ix]
mov	bl, [edi-1]
mov	[s_0+ix], bl
mov	ebx, t
mov	[edi-1], bl
lea	ix, [edx+3]
mov	t, [esp+14h+var_14]
sub	iy, 3
lea	edi, [ecx-3]
cmp	ix, iy
jge	loc_6420149C
movzx	iy, byte ptr [s_0+ix]
mov	bl, [edi-1]
mov	[s_0+ix], bl
mov	ebx, t
mov	[edi-1], bl
lea	ix, [edx+4]
mov	t, [esp+14h+var_14]
sub	iy, 4
lea	edi, [ecx-4]
cmp	ix, iy
jge	loc_6420149C
movzx	iy, byte ptr [s_0+ix]
mov	bl, [edi-1]
mov	[s_0+ix], bl
mov	ebx, t
mov	[edi-1], bl
lea	ix, [edx+5]
mov	t, [esp+14h+var_14]
sub	iy, 5
lea	edi, [ecx-5]
cmp	ix, iy
jge	short loc_6420149C
movzx	iy, byte ptr [s_0+ix]
mov	bl, [edi-1]
mov	[s_0+ix], bl
mov	ebx, t
mov	[edi-1], bl
lea	ix, [edx+6]
mov	t, [esp+14h+var_14]
sub	iy, 6
lea	edi, [ecx-6]
cmp	ix, iy
jge	short loc_6420149C
movzx	iy, byte ptr [s_0+ix]
mov	bl, [edi-1]
mov	[s_0+ix], bl
mov	ebx, t
mov	[edi-1], bl
lea	ix, [edx+7]
mov	t, [esp+14h+var_14]
sub	iy, 7
lea	edi, [ecx-7]
cmp	ix, iy
jge	short loc_6420149C
movzx	iy, byte ptr [s_0+ix]
mov	bl, [edi-1]
mov	[s_0+ix], bl
mov	ebx, t
mov	[edi-1], bl
add	edx, 8
sub	[esp+14h+var_14], 8
sub	ecx, 8
cmp	ix, [esp+14h+var_14]
jl	loc_64201392
nop
			
pop	ix
pop	ebx
pop	ix
pop	edi
pop	t
retn
align 4
public _tma_mp_shrink
push	ebx
sub	esp, 18h
mov	ebx, [esp+1Ch+a]
mov	eax, [ebx]
cmp	[ebx+4], eax
jz	short loc_642014B7
test	eax, eax
jg	short loc_642014C0
xor	eax, eax
			
add	esp, 18h
pop	a_0
retn
align 10h
shl	eax, 2
mov	[esp+1Ch+var_18], eax 
mov	eax, [a_0+0Ch]
mov	[esp+1Ch+var_1C], eax 
call	_realloc
test	eax, eax
jz	short loc_642014E2
mov	[a_0+0Ch], eax
mov	edx, [a_0]
mov	[a_0+4], edx
xor	eax, eax
jmp	short loc_642014B9
mov	eax, 0FFFFFFFEh
jmp	short loc_642014B9
align 4
public _tma_mp_grow
			
push	esi
push	ebx
sub	esp, 14h
mov	ebx, [esp+1Ch+a]
mov	esi, [esp+1Ch+size]
cmp	[ebx+4], esi
jl	short loc_64201508
			
xor	eax, eax
add	esp, 14h
pop	a_0
pop	size_0
retn
align 4
mov	eax, size_0
and	eax, 8000001Fh
js	loc_64201615
add	size_0,	40h
sub	size_0,	eax
lea	edx, ds:0[size_0*4]
mov	[esp+1Ch+var_18], edx 
mov	eax, [a_0+0Ch]
mov	[esp+1Ch+var_1C], eax 
call	_realloc
test	eax, eax
jz	loc_6420161F
mov	[a_0+0Ch], eax
mov	edx, [a_0+4]
mov	[a_0+4], size_0
cmp	size_0,	i
jle	short loc_642014FE
lea	eax, [eax+i*4]
mov	ecx, i
not	ecx
add	ecx, size_0
and	ecx, 7
mov	dword ptr [eax], 0
inc	i
add	eax, 4
cmp	size_0,	i
jle	short loc_642014FE
test	ecx, ecx
jz	short loc_642015CF
cmp	ecx, 1
jz	short loc_642015BD
cmp	ecx, 2
jz	short loc_642015B3
cmp	ecx, 3
jz	short loc_642015A9
cmp	ecx, 4
jz	short loc_6420159F
cmp	ecx, 5
jz	short loc_64201595
cmp	ecx, 6
jz	short loc_6420158B
mov	dword ptr [eax], 0
inc	i
add	eax, 4
mov	dword ptr [eax], 0
inc	i
add	eax, 4
mov	dword ptr [eax], 0
inc	i
add	eax, 4
mov	dword ptr [eax], 0
inc	i
add	eax, 4
mov	dword ptr [eax], 0
inc	i
add	eax, 4
mov	dword ptr [eax], 0
inc	i
add	eax, 4
mov	dword ptr [eax], 0
inc	i
add	eax, 4
cmp	size_0,	i
jle	loc_642014FE
			
mov	dword ptr [eax], 0
mov	dword ptr [eax+4], 0
mov	dword ptr [eax+8], 0
mov	dword ptr [eax+0Ch], 0
mov	dword ptr [eax+10h], 0
mov	dword ptr [eax+14h], 0
mov	dword ptr [eax+18h], 0
mov	dword ptr [eax+1Ch], 0
add	i, 8
add	eax, 20h
cmp	size_0,	i
jg	short loc_642015CF
jmp	loc_642014FE
dec	eax
or	eax, 0FFFFFFE0h
inc	eax
jmp	loc_64201515
mov	eax, 0FFFFFFFEh
jmp	loc_64201500
align 4
public _tma_mp_init_size
			
push	esi
push	ebx
sub	esp, 14h
mov	ebx, [esp+1Ch+a]
mov	esi, [esp+1Ch+size]
mov	eax, esi
and	eax, 8000001Fh
js	loc_6420175C
add	size_0,	40h
sub	size_0,	eax
lea	eax, ds:0[size_0*4]
mov	[esp+1Ch+var_1C], eax 
call	_malloc
mov	[a_0+0Ch], eax
test	eax, eax
jz	loc_64201768
mov	dword ptr [a_0], 0
mov	[a_0+4], size_0
mov	dword ptr [a_0+8], 0
test	size_0,	size_0
jle	loc_64201754
xor	edx, edx
lea	ecx, [size_0-1]
and	ecx, 7
jz	loc_64201744
mov	dword ptr [eax+x*4], 0
mov	x, 1
cmp	ecx, 1
jz	loc_64201744
cmp	ecx, 2
jz	short loc_642016EE
cmp	ecx, 3
jz	short loc_642016E3
cmp	ecx, 4
jz	short loc_642016D8
cmp	ecx, 5
jz	short loc_642016CD
cmp	ecx, 6
jz	short loc_642016C2
mov	dword ptr [eax+x*4], 0
mov	dl, 2
mov	dword ptr [eax+x*4], 0
inc	x
mov	eax, [a_0+0Ch]
mov	dword ptr [eax+x*4], 0
inc	x
mov	eax, [a_0+0Ch]
mov	dword ptr [eax+x*4], 0
inc	x
mov	eax, [a_0+0Ch]
mov	dword ptr [eax+x*4], 0
inc	x
mov	eax, [a_0+0Ch]
mov	dword ptr [eax+x*4], 0
inc	x
mov	eax, [a_0+0Ch]
mov	dword ptr [eax+x*4], 0
lea	ecx, [x+1]
cmp	ecx, size_0
jz	short loc_64201754
mov	eax, [a_0+0Ch]
mov	dword ptr [eax+ecx*4], 0
mov	dword ptr [eax+x*4+8], 0
mov	dword ptr [eax+x*4+0Ch], 0
mov	dword ptr [eax+x*4+10h], 0
mov	dword ptr [eax+x*4+14h], 0
mov	dword ptr [eax+x*4+18h], 0
mov	dword ptr [eax+x*4+1Ch], 0
add	x, 8
			
mov	dword ptr [eax+x*4], 0
lea	ecx, [x+1]
cmp	ecx, size_0
jnz	short loc_64201707
xchg	ax, ax
			
xor	eax, eax
add	esp, 14h
pop	a_0
pop	size_0
retn
dec	eax
or	eax, 0FFFFFFE0h
inc	eax
jmp	loc_64201646
align 4
mov	eax, 0FFFFFFFEh
add	esp, 14h
pop	a_0
pop	size_0
retn
align 4
public _tma_mp_init
			
push	ebx
sub	esp, 18h
mov	ebx, [esp+1Ch+a]
mov	[esp+1Ch+var_1C], 80h 
call	_malloc
mov	[ebx+0Ch], eax
test	eax, eax
jz	loc_6420181C
mov	dword ptr [eax], 0
mov	edx, 4
jmp	short loc_642017ED
mov	eax, [a_0+0Ch]
mov	dword ptr [eax+ecx], 0
mov	dword ptr [eax+edx+8], 0
mov	dword ptr [eax+edx+0Ch], 0
mov	dword ptr [eax+edx+10h], 0
mov	dword ptr [eax+edx+14h], 0
mov	dword ptr [eax+edx+18h], 0
mov	dword ptr [eax+edx+1Ch], 0
mov	dword ptr [eax+edx+20h], 0
mov	dword ptr [eax+edx+24h], 0
add	edx, 28h
mov	dword ptr [eax+edx], 0
lea	ecx, [edx+4]
cmp	ecx, 80h
jnz	short loc_642017A0
mov	dword ptr [a_0], 0
mov	dword ptr [a_0+4], 20h
mov	dword ptr [a_0+8], 0
xor	eax, eax
add	esp, 18h
pop	a_0
retn
align 4
mov	eax, 0FFFFFFFEh
add	esp, 18h
pop	a_0
retn
align 4
public _tma_mp_clear
			
push	esi
push	ebx
sub	esp, 14h
mov	ebx, [esp+1Ch+a]
mov	edx, [ebx+0Ch]
test	edx, edx
jz	loc_6420192A
mov	esi, [a_0]
test	esi, esi
jle	loc_64201907
lea	ecx, [esi-1]
and	ecx, 7
mov	dword ptr [edx], 0
mov	eax, 1
cmp	i, esi
jz	loc_64201907
test	ecx, ecx
jz	short loc_642018C1
cmp	ecx, 1
jz	short loc_642018B5
cmp	ecx, 2
jz	short loc_642018AD
cmp	ecx, 3
jz	short loc_642018A5
cmp	ecx, 4
jz	short loc_6420189D
cmp	ecx, 5
jz	short loc_64201895
cmp	ecx, 6
jz	short loc_6420188D
mov	dword ptr [edx+i*4], 0
mov	i, 2
mov	dword ptr [edx+i*4], 0
inc	i
mov	dword ptr [edx+i*4], 0
inc	i
mov	dword ptr [edx+i*4], 0
inc	i
mov	dword ptr [edx+i*4], 0
inc	i
mov	dword ptr [edx+i*4], 0
inc	i
mov	dword ptr [edx+i*4], 0
inc	i
cmp	i, esi
jz	short loc_64201907
			
mov	dword ptr [edx+i*4], 0
mov	dword ptr [edx+i*4+4], 0
mov	dword ptr [edx+i*4+8], 0
mov	dword ptr [edx+i*4+0Ch], 0
mov	dword ptr [edx+i*4+10h], 0
mov	dword ptr [edx+i*4+14h], 0
mov	dword ptr [edx+i*4+18h], 0
mov	dword ptr [edx+i*4+1Ch], 0
add	i, 8
cmp	i, esi
jnz	short loc_642018C1
			
mov	[esp+1Ch+var_1C], edx 
call	_free
mov	dword ptr [a_0+0Ch], 0
mov	dword ptr [a_0], 0
mov	dword ptr [a_0+4], 0
mov	dword ptr [a_0+8], 0
add	esp, 14h
pop	a_0
pop	esi
retn
public _tma_mp_clear_multi
			
push	ebx
sub	esp, 18h
mov	eax, [esp+1Ch+mp]
lea	ebx, [esp+1Ch+arg_4]
test	eax, eax
jz	short loc_642019BC
mov	[esp+1Ch+a], next_mp
call	_tma_mp_clear
mov	eax, [args]
test	next_mp, next_mp
jz	short loc_642019BC
mov	[esp+1Ch+a], next_mp 
call	_tma_mp_clear
mov	eax, [args+4]
test	next_mp, next_mp
jz	short loc_642019BC
mov	[esp+1Ch+a], next_mp 
call	_tma_mp_clear
mov	eax, [args+8]
test	next_mp, next_mp
jz	short loc_642019BC
mov	[esp+1Ch+a], next_mp 
call	_tma_mp_clear
mov	eax, [args+0Ch]
test	next_mp, next_mp
jz	short loc_642019BC
mov	[esp+1Ch+a], next_mp 
call	_tma_mp_clear
mov	eax, [args+10h]
test	next_mp, next_mp
jz	short loc_642019BC
mov	[esp+1Ch+a], next_mp 
call	_tma_mp_clear
mov	eax, [args+14h]
test	next_mp, next_mp
jz	short loc_642019BC
mov	[esp+1Ch+a], next_mp 
call	_tma_mp_clear
mov	eax, [args+18h]
test	next_mp, next_mp
jz	short loc_642019BC
mov	[esp+1Ch+a], next_mp 
call	_tma_mp_clear
add	args, 20h
mov	eax, [args-4]
test	next_mp, next_mp
jnz	short loc_64201940
xchg	ax, ax
			
add	esp, 18h
pop	args
retn
align 4
public _tma_mp_signed_bin_size
push	ebx
mov	edx, [esp+4+a]
mov	eax, [edx]
test	eax, eax
jz	loc_64201A60
lea	ebx, [eax-1]
lea	eax, ds:0[ebx*4]
lea	ecx, ds:0[eax*8]
sub	ecx, eax
mov	eax, ecx
mov	a_0, [a_0+0Ch]
mov	edx, [edx+ebx*4]
test	edx, edx
jz	loc_64201A78
lea	ecx, [eax+1]
mov	eax, ecx
mov	ebx, edx
shr	ebx, 1
jz	short loc_64201A44
inc	eax
mov	ebx, edx
shr	ebx, 2
jz	short loc_64201A44
lea	eax, [ecx+2]
mov	ebx, edx
shr	ebx, 3
jz	short loc_64201A44
lea	eax, [ecx+3]
mov	ebx, edx
shr	ebx, 4
jz	short loc_64201A44
lea	eax, [ecx+4]
mov	ebx, edx
shr	ebx, 5
jz	short loc_64201A44
lea	eax, [ecx+5]
mov	ebx, edx
shr	ebx, 6
jz	short loc_64201A44
lea	eax, [ecx+6]
mov	ebx, edx
shr	ebx, 7
jz	short loc_64201A44
lea	eax, [ecx+7]
shr	edx, 8
jnz	short loc_642019F6
nop
			
mov	edx, eax
and	edx, 7
test	eax, eax
js	short loc_64201A64
sar	eax, 3
test	edx, edx
setnz	dl
movzx	ecx, dl
lea	eax, [eax+ecx+1]
pop	ebx
retn
align 10h
mov	al, 1
pop	ebx
retn
add	eax, 7
sar	eax, 3
test	edx, edx
setnz	dl
movzx	ecx, dl
lea	eax, [eax+ecx+1]
jmp	short loc_64201A5C
and	eax, 7
test	ecx, ecx
js	short loc_64201A90
sar	ecx, 3
test	eax, eax
setnz	bl
movzx	edx, bl
lea	eax, [ecx+edx+1]
pop	ebx
retn
add	ecx, 7
jmp	short loc_64201A7F
align 4
public _tma_mp_cmp
			
push	ebp
push	edi
push	esi
push	ebx
sub	esp, 8
mov	ecx, [esp+18h+a]
mov	edx, [esp+18h+b]
mov	eax, [ecx+8]
cmp	eax, [edx+8]
jnz	loc_64201CEC
dec	eax
jz	short loc_64201AD0
mov	eax, [a_0]
cmp	eax, [b_0]
jle	loc_64201CFC
			
mov	eax, 1
			
add	esp, 8
pop	ebx
pop	esi
pop	edi
pop	ebp
retn
align 10h
mov	eax, [b_0]
cmp	eax, [a_0]
jg	short loc_64201AC0
jl	loc_64201CE0
mov	ebx, [b_0+0Ch]
mov	a_0, [a_0+0Ch]
test	eax, eax
jle	loc_64201F18
lea	esi, [eax-1]
lea	ebp, ds:0[esi*4]
add	ebx, ebp
add	ecx, ebp
mov	edi, [ecx]
cmp	edi, [ebx]
jb	short loc_64201AC0
ja	loc_64201CE0
xor	b_0, b_0
xor	edi, edi
and	esi, 7
jz	loc_64201BF7
mov	edi, 1
mov	ebp, [ecx-4]
cmp	[ebx-4], ebp
ja	short loc_64201AC0
mov	edx, 0FFFFFFFCh
jb	loc_64201CE0
cmp	esi, 1
jz	loc_64201BF7
cmp	esi, 2
jz	loc_64201BDB
cmp	esi, 3
jz	short loc_64201BBF
cmp	esi, 4
jz	short loc_64201BA3
cmp	esi, 5
jz	short loc_64201B87
cmp	esi, 6
jz	short loc_64201B6B
inc	edi
mov	ebp, [ebx+edx-4]
mov	esi, [ecx+edx-4]
cmp	ebp, esi
ja	loc_64201AC0
sub	edx, 4
cmp	ebp, esi
jb	loc_64201CE0
inc	edi
mov	ebp, [ebx+edx-4]
mov	esi, [ecx+edx-4]
cmp	ebp, esi
ja	loc_64201AC0
sub	edx, 4
cmp	ebp, esi
jb	loc_64201CE0
inc	edi
mov	ebp, [ebx+edx-4]
mov	esi, [ecx+edx-4]
cmp	ebp, esi
ja	loc_64201AC0
sub	edx, 4
cmp	ebp, esi
jb	loc_64201CE0
inc	edi
mov	ebp, [ebx+edx-4]
mov	esi, [ecx+edx-4]
cmp	ebp, esi
ja	loc_64201AC0
sub	edx, 4
cmp	ebp, esi
jb	loc_64201CE0
inc	edi
mov	ebp, [ebx+edx-4]
mov	esi, [ecx+edx-4]
cmp	ebp, esi
ja	loc_64201AC0
sub	edx, 4
cmp	ebp, esi
jb	loc_64201CE0
inc	edi
mov	ebp, [ebx+edx-4]
mov	esi, [ecx+edx-4]
cmp	ebp, esi
ja	loc_64201AC0
sub	edx, 4
cmp	ebp, esi
jb	loc_64201CE0
			
inc	edi
mov	[esp+18h+var_14], edi
cmp	eax, edi
jle	loc_64201F18
mov	ebp, [ebx+edx-4]
mov	edi, [ecx+edx-4]
cmp	ebp, edi
ja	loc_64201AC0
lea	esi, [edx-4]
cmp	ebp, edi
jb	loc_64201CE0
mov	ebp, [ebx+esi-4]
mov	edi, [ecx+esi-4]
mov	[esp+18h+var_18], edi
cmp	ebp, edi
ja	loc_64201AC0
lea	edi, [edx-8]
cmp	ebp, [esp+18h+var_18]
jb	loc_64201CE0
mov	ebp, [ebx+edi-4]
mov	edi, [ecx+edi-4]
mov	[esp+18h+var_18], edi
cmp	ebp, edi
ja	loc_64201AC0
lea	edi, [edx-0Ch]
cmp	ebp, [esp+18h+var_18]
jb	loc_64201CE0
mov	ebp, [ebx+edi-4]
mov	edi, [ecx+edi-4]
cmp	ebp, edi
ja	loc_64201AC0
sub	edx, 10h
cmp	ebp, edi
jb	short loc_64201CE0
mov	edi, [ebx+edx-4]
mov	ebp, [ecx+edx-4]
cmp	edi, ebp
ja	loc_64201AC0
lea	edx, [esi-10h]
cmp	edi, ebp
jb	short loc_64201CE0
mov	ebp, [ebx+edx-4]
mov	edi, [ecx+edx-4]
cmp	ebp, edi
ja	loc_64201AC0
lea	edx, [esi-14h]
cmp	ebp, edi
jb	short loc_64201CE0
mov	ebp, [ebx+edx-4]
mov	edi, [ecx+edx-4]
cmp	ebp, edi
ja	loc_64201AC0
lea	edx, [esi-18h]
cmp	ebp, edi
jb	short loc_64201CE0
mov	edi, [esp+18h+var_14]
add	edi, 7
mov	ebp, [ebx+edx-4]
mov	edx, [ecx+edx-4]
mov	[esp+18h+var_18], edx
cmp	ebp, edx
ja	loc_64201AC0
lea	edx, [esi-1Ch]
cmp	ebp, [esp+18h+var_18]
jnb	loc_64201BF7
nop
			
mov	eax, 0FFFFFFFFh
jmp	loc_64201AC5
align 4
dec	eax
setnz	dl
movzx	eax, dl
lea	eax, [eax+eax-1]
jmp	loc_64201AC5
jl	short loc_64201CE0
mov	ebx, [a_0+0Ch]
mov	a_0, [b_0+0Ch]
test	eax, eax
jle	loc_64201F18
lea	esi, [eax-1]
lea	edi, ds:0[esi*4]
add	ebx, edi
add	ecx, edi
mov	b_0, [ecx]
cmp	[ebx], edx
ja	loc_64201AC0
jb	short loc_64201CE0
xor	edx, edx
xor	edi, edi
and	esi, 7
jz	loc_64201E19
mov	edi, 1
mov	ebp, [ecx-4]
cmp	[ebx-4], ebp
ja	loc_64201AC0
mov	edx, 0FFFFFFFCh
jb	short loc_64201CE0
cmp	esi, 1
jz	loc_64201E19
cmp	esi, 2
jz	loc_64201DFD
cmp	esi, 3
jz	short loc_64201DE1
cmp	esi, 4
jz	short loc_64201DC5
cmp	esi, 5
jz	short loc_64201DA9
cmp	esi, 6
jz	short loc_64201D8D
inc	edi
mov	ebp, [ebx+edx-4]
mov	esi, [ecx+edx-4]
cmp	ebp, esi
ja	loc_64201AC0
sub	edx, 4
cmp	ebp, esi
jb	loc_64201CE0
inc	edi
mov	ebp, [ebx+edx-4]
mov	esi, [ecx+edx-4]
cmp	ebp, esi
ja	loc_64201AC0
sub	edx, 4
cmp	ebp, esi
jb	loc_64201CE0
inc	edi
mov	ebp, [ebx+edx-4]
mov	esi, [ecx+edx-4]
cmp	ebp, esi
ja	loc_64201AC0
sub	edx, 4
cmp	ebp, esi
jb	loc_64201CE0
inc	edi
mov	ebp, [ebx+edx-4]
mov	esi, [ecx+edx-4]
cmp	ebp, esi
ja	loc_64201AC0
sub	edx, 4
cmp	ebp, esi
jb	loc_64201CE0
inc	edi
mov	ebp, [ebx+edx-4]
mov	esi, [ecx+edx-4]
cmp	ebp, esi
ja	loc_64201AC0
sub	edx, 4
cmp	ebp, esi
jb	loc_64201CE0
inc	edi
mov	ebp, [ebx+edx-4]
mov	esi, [ecx+edx-4]
cmp	ebp, esi
ja	loc_64201AC0
sub	edx, 4
cmp	ebp, esi
jb	loc_64201CE0
			
inc	edi
mov	[esp+18h+var_18], edi
cmp	eax, edi
jle	loc_64201F18
mov	ebp, [ebx+edx-4]
mov	edi, [ecx+edx-4]
cmp	ebp, edi
ja	loc_64201AC0
lea	esi, [edx-4]
cmp	ebp, edi
jb	loc_64201CE0
mov	edi, [ebx+esi-4]
mov	ebp, [ecx+esi-4]
mov	[esp+18h+var_14], ebp
cmp	edi, ebp
ja	loc_64201AC0
lea	ebp, [edx-8]
cmp	edi, [esp+18h+var_14]
jb	loc_64201CE0
mov	edi, [ebx+ebp-4]
mov	ebp, [ecx+ebp-4]
mov	[esp+18h+var_14], ebp
cmp	edi, ebp
ja	loc_64201AC0
lea	ebp, [edx-0Ch]
cmp	edi, [esp+18h+var_14]
jb	loc_64201CE0
mov	edi, [ebx+ebp-4]
mov	ebp, [ecx+ebp-4]
cmp	edi, ebp
ja	loc_64201AC0
sub	edx, 10h
cmp	edi, ebp
jb	loc_64201CE0
mov	edi, [ebx+edx-4]
mov	edx, [ecx+edx-4]
cmp	edi, edx
ja	loc_64201AC0
lea	ebp, [esi-10h]
cmp	edi, edx
jb	loc_64201CE0
mov	edi, [ebx+ebp-4]
mov	edx, [ecx+ebp-4]
cmp	edi, edx
ja	loc_64201AC0
lea	ebp, [esi-14h]
cmp	edi, edx
jb	loc_64201CE0
mov	edi, [ebx+ebp-4]
mov	ebp, [ecx+ebp-4]
cmp	edi, ebp
ja	loc_64201AC0
lea	edx, [esi-18h]
cmp	edi, ebp
jb	loc_64201CE0
mov	edi, [esp+18h+var_18]
add	edi, 7
mov	ebp, [ebx+edx-4]
mov	edx, [ecx+edx-4]
mov	[esp+18h+var_18], edx
cmp	ebp, edx
ja	loc_64201AC0
lea	edx, [esi-1Ch]
cmp	ebp, [esp+18h+var_18]
jnb	loc_64201E19
jmp	loc_64201CE0
			
xor	eax, eax
jmp	loc_64201AC5
align 10h
public _tma_mp_init_multi
			
push	ebp
push	edi
push	esi
push	ebx
sub	esp, 1Ch
mov	ebp, [esp+2Ch+mp]
lea	edi, [esp+2Ch+arg_4]
test	ebp, ebp
jz	loc_64202130
mov	ebx, mp_0
xor	esi, esi
nop
mov	[esp+2Ch+var_2C], 80h 
call	_malloc
mov	[cur_arg+0Ch], eax
test	eax, eax
jz	loc_6420200C
mov	dword ptr [eax], 0
mov	dword ptr [eax+4], 0
mov	dword ptr [eax+8], 0
mov	edx, 0Ch
mov	dword ptr [eax+edx], 0
add	edx, 4
mov	dword ptr [eax+edx], 0
add	edx, 4
mov	dword ptr [eax+edx], 0
add	edx, 4
mov	dword ptr [eax+edx], 0
add	edx, 4
jmp	short loc_64201FD5
align 4
mov	eax, [cur_arg+0Ch]
mov	dword ptr [eax+ecx], 0
mov	dword ptr [eax+edx+8], 0
mov	dword ptr [eax+edx+0Ch], 0
mov	dword ptr [eax+edx+10h], 0
mov	dword ptr [eax+edx+14h], 0
mov	dword ptr [eax+edx+18h], 0
mov	dword ptr [eax+edx+1Ch], 0
add	edx, 20h
mov	dword ptr [eax+edx], 0
lea	ecx, [edx+4]
cmp	ecx, 80h
jnz	short loc_64201F98
mov	dword ptr [cur_arg], 0
mov	dword ptr [cur_arg+4], 20h
mov	dword ptr [cur_arg+8], 0
mov	cur_arg, [edi+n*4]
test	cur_arg, cur_arg
jz	loc_64202130
inc	n
jmp	loc_64201F3C
test	n, n
jz	loc_64202120
dec	n
mov	cur_arg, esi
and	ebx, 7
mov	[esp+2Ch+var_2C], mp_0 
call	_tma_mp_clear
add	edi, 4
mov	eax, [clean_args-4]
test	esi, esi
jz	loc_64202120
test	ebx, ebx
jz	loc_642020C1
cmp	ebx, 1
jz	short loc_642020B0
cmp	ebx, 2
jz	short loc_642020A1
cmp	ebx, 3
jz	short loc_64202092
cmp	ebx, 4
jz	short loc_64202083
cmp	ebx, 5
jz	short loc_64202074
cmp	ebx, 6
jz	short loc_64202065
mov	[esp+2Ch+var_2C], cur_arg 
call	_tma_mp_clear
add	clean_args, 4
mov	eax, [clean_args-4]
dec	esi
mov	[esp+2Ch+var_2C], cur_arg 
call	_tma_mp_clear
add	clean_args, 4
mov	eax, [clean_args-4]
dec	esi
mov	[esp+2Ch+var_2C], cur_arg 
call	_tma_mp_clear
add	clean_args, 4
mov	eax, [clean_args-4]
dec	esi
mov	[esp+2Ch+var_2C], cur_arg 
call	_tma_mp_clear
add	clean_args, 4
mov	eax, [clean_args-4]
dec	esi
mov	[esp+2Ch+var_2C], cur_arg 
call	_tma_mp_clear
add	clean_args, 4
mov	eax, [clean_args-4]
dec	esi
mov	[esp+2Ch+var_2C], cur_arg 
call	_tma_mp_clear
add	clean_args, 4
mov	eax, [clean_args-4]
dec	esi
mov	[esp+2Ch+var_2C], cur_arg 
call	_tma_mp_clear
add	clean_args, 4
mov	eax, [clean_args-4]
dec	esi
jz	short loc_64202120
			
mov	[esp+2Ch+var_2C], cur_arg 
call	_tma_mp_clear
mov	edx, [clean_args]
mov	[esp+2Ch+var_2C], cur_arg 
call	_tma_mp_clear
mov	eax, [clean_args+4]
mov	[esp+2Ch+var_2C], cur_arg 
call	_tma_mp_clear
mov	mp_0, [clean_args+8]
mov	[esp+2Ch+var_2C], cur_arg 
call	_tma_mp_clear
mov	ebx, [clean_args+0Ch]
mov	[esp+2Ch+var_2C], cur_arg 
call	_tma_mp_clear
mov	ecx, [clean_args+10h]
mov	[esp+2Ch+var_2C], cur_arg 
call	_tma_mp_clear
mov	edx, [clean_args+14h]
mov	[esp+2Ch+var_2C], cur_arg 
call	_tma_mp_clear
mov	eax, [clean_args+18h]
mov	[esp+2Ch+var_2C], cur_arg 
call	_tma_mp_clear
add	clean_args, 20h
mov	eax, [clean_args-4]
sub	esi, 8
jnz	short loc_642020C1
			
mov	cur_arg, 0FFFFFFFEh
add	esp, 1Ch
pop	cur_arg
pop	n
pop	clean_args
pop	ebp
retn
align 10h
			
xor	eax, eax
add	esp, 1Ch
pop	cur_arg
pop	n
pop	edi
pop	mp_0
retn
align 4
public _tma_mp_init_set
push	ebx
sub	esp, 18h
mov	ebx, [esp+1Ch+a]
mov	[esp+1Ch+var_1C], 80h 
call	_malloc
mov	[ebx+0Ch], eax
test	eax, eax
jz	loc_64202244
mov	dword ptr [eax], 0
mov	edx, 4
mov	ecx, eax
jmp	short loc_642021B8
align 4
mov	dword ptr [eax+ecx], 0
mov	dword ptr [eax+edx+8], 0
mov	dword ptr [eax+edx+0Ch], 0
mov	dword ptr [eax+edx+10h], 0
mov	dword ptr [eax+edx+14h], 0
mov	dword ptr [eax+edx+18h], 0
mov	dword ptr [eax+edx+1Ch], 0
mov	dword ptr [eax+edx+20h], 0
mov	dword ptr [eax+edx+24h], 0
add	edx, 28h
mov	ecx, eax
mov	dword ptr [ecx+edx], 0
lea	ecx, [edx+4]
cmp	ecx, 80h
jnz	short loc_6420216C
mov	dword ptr [a_0+4], 20h
mov	dword ptr [a_0+8], 0
mov	dword ptr [a_0], 0
xor	edx, edx
mov	dword ptr [eax+edx*4], 0
mov	dword ptr [eax+edx*4+4], 0
mov	dword ptr [eax+edx*4+8], 0
mov	dword ptr [eax+edx*4+0Ch], 0
mov	dword ptr [eax+edx*4+10h], 0
mov	dword ptr [eax+edx*4+14h], 0
mov	dword ptr [eax+edx*4+18h], 0
mov	dword ptr [eax+edx*4+1Ch], 0
add	edx, 8
cmp	edx, 20h
jl	short loc_642021E0
mov	edx, [esp+1Ch+b]
and	edx, 0FFFFFFFh
mov	[eax], edx
xor	eax, eax
test	edx, edx
setnz	al
mov	[a_0], eax
xor	eax, eax
add	esp, 18h
pop	a_0
retn
align 4
mov	eax, 0FFFFFFFEh
add	esp, 18h
pop	a_0
retn
align 10h
public _tma_mp_div_3
			
push	ebp
push	edi
push	esi
push	ebx
sub	esp, 6Ch
mov	esi, [esp+7Ch+a]
mov	eax, [esi]
lea	edi, [eax+40h]
and	eax, 8000001Fh
js	loc_642026BC
sub	edi, eax
lea	eax, ds:0[edi*4]
mov	[esp+7Ch+var_7C], eax 
call	_malloc
mov	ebp, eax
test	eax, eax
jz	loc_642026CF
mov	[esp+7Ch+q.dp],	eax
mov	[esp+7Ch+q.used], 0
mov	[esp+7Ch+q.alloc], edi
mov	[esp+7Ch+q.sign], 0
test	edi, edi
jle	loc_64202372
lea	edx, [edi-1]
and	edx, 7
mov	dword ptr [eax], 0
mov	eax, 1
cmp	eax, edi
jz	loc_64202372
test	edx, edx
jz	short loc_6420232B
cmp	edx, 1
jz	short loc_6420231E
cmp	edx, 2
jz	short loc_64202315
cmp	edx, 3
jz	short loc_6420230C
cmp	edx, 4
jz	short loc_64202303
cmp	edx, 5
jz	short loc_642022FA
cmp	edx, 6
jz	short loc_642022F1
mov	dword ptr [ebp+eax*4+0], 0
mov	eax, 2
mov	dword ptr [ebp+eax*4+0], 0
inc	eax
mov	dword ptr [ebp+eax*4+0], 0
inc	eax
mov	dword ptr [ebp+eax*4+0], 0
inc	eax
mov	dword ptr [ebp+eax*4+0], 0
inc	eax
mov	dword ptr [ebp+eax*4+0], 0
inc	eax
mov	dword ptr [ebp+eax*4+0], 0
inc	eax
cmp	eax, edi
jz	short loc_64202372
			
mov	dword ptr [ebp+eax*4+0], 0
mov	dword ptr [ebp+eax*4+4], 0
mov	dword ptr [ebp+eax*4+8], 0
mov	dword ptr [ebp+eax*4+0Ch], 0
mov	dword ptr [ebp+eax*4+10h], 0
mov	dword ptr [ebp+eax*4+14h], 0
mov	dword ptr [ebp+eax*4+18h], 0
mov	dword ptr [ebp+eax*4+1Ch], 0
add	eax, 8
cmp	eax, edi
jnz	short loc_6420232B
			
mov	eax, [a_0]
mov	[esp+7Ch+var_48], eax
mov	[esp+7Ch+q.used], eax
mov	edx, [a_0+8]
mov	[esp+7Ch+q.sign], edx
mov	ebx, [esp+7Ch+var_48]
dec	ebx
mov	[esp+7Ch+var_44], ebx
js	loc_642026E2
mov	edx, [esp+7Ch+var_44]
shl	edx, 2
mov	ecx, [a_0+0Ch]
add	ecx, edx
lea	ebx, [ebp+edx+0]
mov	[esp+7Ch+var_50], ebx
mov	[esp+7Ch+var_4C], 0
xor	edi, edi
xor	a_0, a_0
mov	[esp+7Ch+var_40], ebp
mov	ebp, ecx
mov	[esp+7Ch+var_64], edi
mov	[esp+7Ch+var_60], esi
jmp	short loc_642023ED
align 4
cmp	eax, 2
ja	short loc_6420240E
xor	esi, esi
			
mov	eax, [esp+7Ch+var_50]
mov	[eax], esi
inc	[esp+7Ch+var_4C]
sub	ebp, 4
sub	eax, 4
mov	[esp+7Ch+var_50], eax
mov	esi, [esp+7Ch+var_48]
cmp	[esp+7Ch+var_4C], esi
jz	loc_642024B0
mov	ecx, [esp+7Ch+var_64]
mov	ebx, [esp+7Ch+var_60]
shld	ebx, ecx, 1Ch
shl	ecx, 1Ch
mov	eax, [ebp+0]
or	eax, ecx
mov	[esp+7Ch+var_64], eax
mov	[esp+7Ch+var_60], ebx
cmp	ebx, 0
jbe	short loc_642023C4
imul	ebx, [esp+7Ch+var_60], 5555555h
mov	eax, 5555555h
mul	[esp+7Ch+var_64]
mov	esi, eax
lea	edi, [ebx+edx]
shrd	esi, edi, 1Ch
shr	edi, 1Ch
mov	ecx, esi
mov	ebx, edi
neg	ecx
adc	ebx, 0
neg	ebx
mov	eax, ecx
mov	edx, ebx
sub	eax, esi
sbb	edx, edi
add	[esp+7Ch+var_64], eax
adc	[esp+7Ch+var_60], edx
add	[esp+7Ch+var_64], ecx
adc	[esp+7Ch+var_60], ebx
cmp	[esp+7Ch+var_60], 0
ja	short loc_64202460
cmp	[esp+7Ch+var_64], 2
jbe	loc_642023CB
mov	eax, [esp+7Ch+var_64]
mov	edx, [esp+7Ch+var_60]
add	eax, 0FFFFFFFDh
adc	edx, 0FFFFFFFFh
xchg	ax, ax
			
add	esi, 1
adc	edi, 0
mov	[esp+7Ch+var_5C], eax
mov	[esp+7Ch+var_58], edx
add	eax, 0FFFFFFFDh
adc	edx, 0FFFFFFFFh
mov	ecx, eax
mov	ebx, edx
add	ecx, 3
adc	ebx, 0
cmp	ebx, 0
ja	short loc_64202470
cmp	ecx, 2
ja	short loc_64202470
mov	edx, [esp+7Ch+var_5C]
mov	ecx, [esp+7Ch+var_58]
mov	[esp+7Ch+var_64], edx
mov	[esp+7Ch+var_60], ecx
jmp	loc_642023CB
align 10h
mov	ebp, [esp+7Ch+var_40]
mov	eax, [esp+7Ch+var_64]
mov	edi, [esp+7Ch+d]
test	edi, edi
jz	short loc_642024CC
mov	ebx, [esp+7Ch+d]
mov	[ebx], eax
mov	ecx, [esp+7Ch+c]
test	ecx, ecx
jz	loc_642026DC
mov	edx, [esp+7Ch+var_48]
test	edx, edx
jle	loc_6420265D
mov	eax, [esp+7Ch+var_44]
mov	esi, [ebp+eax*4+0]
test	esi, esi
jnz	loc_6420266D
mov	ebp, [esp+7Ch+var_48]
lea	eax, ds:0FFFFFFF8h[ebp*4]
add	eax, [esp+7Ch+q.dp]
mov	edx, [esp+7Ch+var_44]
and	edx, 7
jz	loc_642026C6
mov	ebp, [esp+7Ch+var_44]
mov	[esp+7Ch+var_48], ebp
test	ebp, ebp
jle	loc_64202655
mov	esi, [eax]
sub	eax, 4
test	esi, esi
jnz	loc_642026B2
mov	ecx, [esp+7Ch+var_44]
dec	ecx
mov	[esp+7Ch+var_44], ecx
cmp	edx, 1
jz	loc_642026C6
cmp	edx, 2
jz	loc_642025CB
cmp	edx, 3
jz	short loc_642025B5
cmp	edx, 4
jz	short loc_6420259F
cmp	edx, 5
jz	short loc_64202589
cmp	edx, 6
jz	short loc_64202573
mov	edi, [eax]
sub	eax, 4
test	edi, edi
jnz	loc_642026B2
mov	ebx, ecx
dec	ebx
mov	[esp+7Ch+var_44], ebx
mov	ecx, [eax]
sub	eax, 4
test	ecx, ecx
jnz	loc_642026B2
mov	edx, [esp+7Ch+var_44]
dec	edx
mov	[esp+7Ch+var_44], edx
mov	ebp, [eax]
sub	eax, 4
test	ebp, ebp
jnz	loc_642026B2
mov	esi, [esp+7Ch+var_44]
dec	esi
mov	[esp+7Ch+var_44], esi
mov	edi, [eax]
sub	eax, 4
test	edi, edi
jnz	loc_642026B2
mov	ebx, [esp+7Ch+var_44]
dec	ebx
mov	[esp+7Ch+var_44], ebx
mov	ecx, [eax]
sub	eax, 4
test	ecx, ecx
jnz	loc_642026B2
mov	edx, [esp+7Ch+var_44]
dec	edx
mov	[esp+7Ch+var_44], edx
mov	ebp, [eax]
sub	eax, 4
test	ebp, ebp
jnz	loc_642026B2
mov	esi, [esp+7Ch+var_44]
dec	esi
mov	edx, esi
test	edx, edx
jle	short loc_6420264D
mov	ebx, [eax]
test	ebx, ebx
jnz	loc_642026AE
lea	ecx, [edx-1]
mov	edx, ecx
mov	esi, [eax-4]
test	esi, esi
jnz	loc_642026AE
dec	edx
mov	edi, [eax-8]
test	edi, edi
jnz	loc_642026AE
lea	edx, [ecx-2]
mov	ebx, [eax-0Ch]
test	ebx, ebx
jnz	loc_642026AE
lea	edx, [ecx-3]
mov	ebp, [eax-10h]
test	ebp, ebp
jnz	loc_642026AE
lea	edx, [ecx-4]
mov	esi, [eax-14h]
test	esi, esi
jnz	short loc_642026AE
lea	edx, [ecx-5]
mov	edi, [eax-18h]
test	edi, edi
jnz	short loc_642026AE
lea	edx, [ecx-6]
mov	ebx, [eax-1Ch]
sub	eax, 20h
test	ebx, ebx
jnz	short loc_642026AE
lea	edx, [ecx-7]
test	edx, edx
jg	short loc_642025E3
mov	[esp+7Ch+var_48], edx
mov	[esp+7Ch+var_44], edx
mov	edi, [esp+7Ch+var_44]
mov	[esp+7Ch+q.used], edi
mov	edx, [esp+7Ch+var_48]
test	edx, edx
jnz	short loc_6420266D
mov	[esp+7Ch+q.sign], 0
			
lea	ebp, [esp+7Ch+var_3C]
lea	edx, [esp+7Ch+q]
mov	eax, 4
mov	edi, ebp
mov	esi, edx
mov	ecx, eax
rep movsd
mov	edi, edx
mov	esi, [esp+7Ch+c]
mov	ecx, eax
rep movsd
mov	edi, [esp+7Ch+c]
mov	c_0, ebp
mov	ecx, eax
rep movsd
mov	[esp+7Ch+var_7C], edx 
call	_tma_mp_clear
xor	eax, eax
add	esp, 6Ch
pop	ebx
pop	esi
pop	c_0
pop	ebp
retn
			
mov	[esp+7Ch+var_44], edx
			
mov	ecx, [esp+7Ch+var_44]
mov	[esp+7Ch+q.used], ecx
jmp	short loc_6420266D
dec	eax
or	eax, 0FFFFFFE0h
inc	eax
jmp	loc_6420226E
			
mov	edx, [esp+7Ch+var_44]
jmp	loc_642025DF
mov	eax, 0FFFFFFFEh
add	esp, 6Ch
pop	ebx
pop	a_0
pop	edi
pop	ebp
retn
lea	edx, [esp+7Ch+q]
jmp	short loc_6420269C
xor	eax, eax
jmp	loc_642024B8
align 4
public _s_tma_mp_sqr
push	ebp
push	edi
push	esi
push	ebx
sub	esp, 8Ch
mov	esi, [esp+9Ch+a]
mov	eax, [esi]
mov	[esp+9Ch+var_54], eax
shl	eax, 1
mov	[esp+9Ch+var_40], eax
inc	eax
mov	[esp+9Ch+var_44], eax
mov	ebx, [esp+9Ch+var_40]
add	ebx, 41h
and	eax, 8000001Fh
js	loc_64202E64
sub	ebx, eax
lea	eax, ds:0[ebx*4]
mov	[esp+9Ch+var_9C], eax 
call	_malloc
mov	[esp+9Ch+var_48], eax
test	eax, eax
jz	loc_64202E6E
test	ebx, ebx
jle	loc_6420282C
lea	edx, [ebx-1]
and	edx, 7
mov	ecx, [esp+9Ch+var_48]
mov	dword ptr [ecx], 0
mov	eax, 1
cmp	eax, ebx
jz	loc_6420282C
test	edx, edx
jz	short loc_642027E2
cmp	edx, 1
jz	short loc_642027D2
cmp	edx, 2
jz	short loc_642027C6
cmp	edx, 3
jz	short loc_642027B9
cmp	edx, 4
jz	short loc_642027AD
cmp	edx, 5
jz	short loc_642027A1
cmp	edx, 6
jz	short loc_64202795
mov	ebp, [esp+9Ch+var_48]
mov	dword ptr [ebp+eax*4+0], 0
mov	eax, 2
mov	edx, [esp+9Ch+var_48]
mov	dword ptr [edx+eax*4], 0
inc	eax
mov	ecx, [esp+9Ch+var_48]
mov	dword ptr [ecx+eax*4], 0
inc	eax
mov	edi, [esp+9Ch+var_48]
mov	dword ptr [edi+eax*4], 0
inc	eax
mov	ebp, [esp+9Ch+var_48]
mov	dword ptr [ebp+eax*4+0], 0
inc	eax
mov	edx, [esp+9Ch+var_48]
mov	dword ptr [edx+eax*4], 0
inc	eax
mov	ecx, [esp+9Ch+var_48]
mov	dword ptr [ecx+eax*4], 0
inc	eax
cmp	eax, ebx
jz	short loc_6420282C
mov	edx, [esp+9Ch+var_48]
mov	dword ptr [edx+eax*4], 0
mov	dword ptr [edx+eax*4+4], 0
mov	dword ptr [edx+eax*4+8], 0
mov	dword ptr [edx+eax*4+0Ch], 0
mov	dword ptr [edx+eax*4+10h], 0
mov	dword ptr [edx+eax*4+14h], 0
mov	dword ptr [edx+eax*4+18h], 0
mov	dword ptr [edx+eax*4+1Ch], 0
add	eax, 8
cmp	eax, ebx
jnz	short loc_642027E6
			
mov	edi, [esp+9Ch+var_48]
mov	[esp+9Ch+t.dp],	edi
mov	[esp+9Ch+t.alloc], ebx
mov	[esp+9Ch+t.sign], 0
mov	edx, [esp+9Ch+var_44]
mov	[esp+9Ch+t.used], edx
mov	ebx, [esp+9Ch+var_54]
test	ebx, ebx
jle	loc_64202CAA
mov	ebp, [a_0+0Ch]
mov	a_0, [esp+9Ch+var_54]
lea	ecx, [edi+esi*4]
mov	[esp+9Ch+var_4C], ecx
add	edi, 4
mov	[esp+9Ch+var_58], edi
xor	eax, eax
mov	[esp+9Ch+var_88], ix
nop
mov	u, [esp+9Ch+var_88]
mov	ebx, [ebp+edx*4+0]
mov	ix, ebx
mul	ebx
mov	[esp+9Ch+var_74], eax
mov	[esp+9Ch+var_70], edx
mov	eax, [esp+9Ch+var_58]
mov	ecx, [eax-4]
xor	edi, edi
add	[esp+9Ch+var_74], ecx
adc	[esp+9Ch+var_70], edi
mov	u, [esp+9Ch+var_74]
and	esi, 0FFFFFFFh
mov	[eax-4], esi
mov	edx, [esp+9Ch+var_74]
mov	ecx, [esp+9Ch+var_70]
shrd	edx, ecx, 1Ch
shr	ecx, 1Ch
mov	esi, edx
mov	ebx, [esp+9Ch+var_88]
mov	edx, [ebp+ebx*4+0]
mov	[esp+9Ch+var_64], edx
mov	edi, [esp+9Ch+var_58]
mov	[esp+9Ch+var_80], edi
mov	eax, [esp+9Ch+var_88]
inc	eax
mov	[esp+9Ch+var_50], eax
cmp	[esp+9Ch+var_54], eax
jle	loc_64202B60
mov	ebx, eax
shl	ebx, 2
mov	ecx, ebp
mov	[esp+9Ch+var_6C], eax
mov	edi, eax
not	edi
add	edi, [esp+9Ch+var_54]
and	edi, 3
mov	[esp+9Ch+var_84], edi
jz	loc_64202E40
mov	eax, [esp+9Ch+var_64]
mul	dword ptr [ebp+ebx+0]
mov	[esp+9Ch+var_6C], eax
mov	[esp+9Ch+var_68], edx
mov	edx, u
xor	ecx, ecx
mov	eax, [esp+9Ch+var_58]
mov	u, [eax]
xor	edi, edi
add	edx, esi
adc	ecx, edi
add	edx, [esp+9Ch+var_6C]
adc	ecx, [esp+9Ch+var_68]
add	edx, [esp+9Ch+var_6C]
adc	ecx, [esp+9Ch+var_68]
mov	eax, edx
and	eax, 0FFFFFFFh
mov	esi, [esp+9Ch+var_58]
mov	[esi], eax
add	esi, 4
mov	[esp+9Ch+var_80], esi
shrd	edx, ecx, 1Ch
shr	ecx, 1Ch
mov	esi, edx
mov	edx, [esp+9Ch+var_88]
add	edx, 2
mov	[esp+9Ch+var_6C], edx
add	ebx, 4
mov	ecx, ebp
cmp	[esp+9Ch+var_84], 1
jz	loc_64202E40
cmp	[esp+9Ch+var_84], 2
jz	short loc_642029C8
mov	eax, [esp+9Ch+var_64]
mul	dword ptr [ebp+ebx+0]
mov	[esp+9Ch+var_6C], eax
mov	[esp+9Ch+var_68], edx
mov	edx, u
xor	ecx, ecx
mov	eax, [esp+9Ch+var_80]
mov	u, [eax]
xor	edi, edi
add	edx, esi
adc	ecx, edi
add	edx, [esp+9Ch+var_6C]
adc	ecx, [esp+9Ch+var_68]
add	edx, [esp+9Ch+var_6C]
adc	ecx, [esp+9Ch+var_68]
mov	eax, edx
and	eax, 0FFFFFFFh
mov	esi, [esp+9Ch+var_80]
mov	[esi], eax
mov	edi, [esp+9Ch+var_58]
add	edi, 8
mov	[esp+9Ch+var_80], edi
shrd	edx, ecx, 1Ch
shr	ecx, 1Ch
mov	esi, edx
mov	ecx, [esp+9Ch+var_88]
add	ecx, 3
mov	[esp+9Ch+var_6C], ecx
add	ebx, 4
mov	eax, [esp+9Ch+var_64]
mul	dword ptr [ebp+ebx+0]
mov	[esp+9Ch+var_74], eax
mov	[esp+9Ch+var_70], edx
mov	edx, u
xor	ecx, ecx
mov	eax, [esp+9Ch+var_80]
mov	u, [eax]
xor	edi, edi
add	edx, esi
adc	ecx, edi
add	edx, [esp+9Ch+var_74]
adc	ecx, [esp+9Ch+var_70]
add	edx, [esp+9Ch+var_74]
adc	ecx, [esp+9Ch+var_70]
mov	edi, edx
and	edi, 0FFFFFFFh
mov	[eax], edi
add	eax, 4
mov	[esp+9Ch+var_80], eax
shrd	edx, ecx, 1Ch
shr	ecx, 1Ch
mov	esi, edx
inc	[esp+9Ch+var_6C]
add	ebx, 4
mov	ecx, ebp
mov	edi, ebx
jmp	loc_64202B04
align 4
mov	eax, [esp+9Ch+var_64]
mul	dword ptr [ebp+ebx+0]
mov	[esp+9Ch+var_74], eax
mov	[esp+9Ch+var_70], edx
mov	edx, u
xor	ecx, ecx
mov	eax, [esp+9Ch+var_80]
mov	ebx, [eax+4]
xor	u, u
add	edx, ebx
adc	ecx, esi
add	edx, [esp+9Ch+var_74]
adc	ecx, [esp+9Ch+var_70]
add	edx, [esp+9Ch+var_74]
adc	ecx, [esp+9Ch+var_70]
mov	esi, edx
and	esi, 0FFFFFFFh
mov	[eax+4], esi
shrd	edx, ecx, 1Ch
shr	ecx, 1Ch
mov	ecx, edx
mov	eax, [esp+9Ch+var_64]
mul	dword ptr [ebp+edi+8]
mov	[esp+9Ch+var_74], eax
mov	[esp+9Ch+var_70], edx
mov	edx, u
xor	u, u
mov	eax, [esp+9Ch+var_80]
mov	ebx, [eax+8]
xor	esi, esi
add	edx, ebx
adc	ecx, esi
add	edx, [esp+9Ch+var_74]
adc	ecx, [esp+9Ch+var_70]
add	edx, [esp+9Ch+var_74]
adc	ecx, [esp+9Ch+var_70]
mov	esi, edx
and	esi, 0FFFFFFFh
mov	[eax+8], esi
shrd	edx, ecx, 1Ch
shr	ecx, 1Ch
mov	ecx, edx
mov	eax, [esp+9Ch+var_64]
mul	dword ptr [ebp+edi+0Ch]
mov	[esp+9Ch+var_74], eax
mov	[esp+9Ch+var_70], edx
mov	edx, u
xor	u, u
mov	eax, [esp+9Ch+var_80]
mov	ebx, [eax+0Ch]
xor	esi, esi
add	edx, ebx
adc	ecx, esi
add	edx, [esp+9Ch+var_74]
adc	ecx, [esp+9Ch+var_70]
add	edx, [esp+9Ch+var_74]
adc	ecx, [esp+9Ch+var_70]
mov	esi, edx
and	esi, 0FFFFFFFh
mov	[eax+0Ch], esi
add	eax, 10h
mov	[esp+9Ch+var_80], eax
shrd	edx, ecx, 1Ch
shr	ecx, 1Ch
mov	esi, edx
add	[esp+9Ch+var_6C], 4
add	edi, 10h
mov	ecx, ebp
			
mov	eax, [esp+9Ch+var_64]
mul	dword ptr [ecx+edi]
mov	[esp+9Ch+var_74], eax
mov	[esp+9Ch+var_70], edx
mov	edx, u
xor	ecx, ecx
mov	eax, [esp+9Ch+var_80]
mov	ebx, [eax]
xor	u, u
add	edx, ebx
adc	ecx, esi
add	edx, [esp+9Ch+var_74]
adc	ecx, [esp+9Ch+var_70]
add	edx, [esp+9Ch+var_74]
adc	ecx, [esp+9Ch+var_70]
mov	esi, edx
and	esi, 0FFFFFFFh
mov	[eax], esi
shrd	edx, ecx, 1Ch
shr	ecx, 1Ch
mov	esi, edx
mov	eax, [esp+9Ch+var_6C]
inc	eax
lea	ebx, [edi+4]
cmp	eax, [esp+9Ch+var_54]
jnz	loc_64202A24
mov	edx, [esp+9Ch+var_4C]
mov	[esp+9Ch+var_80], edx
test	u, u
jz	loc_64202C8C
mov	eax, [esp+9Ch+var_80]
mov	edx, u
xor	ecx, ecx
mov	ebx, [tmpt]
xor	esi, esi
add	u, ebx
adc	ecx, esi
mov	edi, edx
and	edi, 0FFFFFFFh
mov	[tmpt],	edi
shrd	edx, ecx, 1Ch
shr	ecx, 1Ch
test	edx, edx
jz	loc_64202C8C
xor	ecx, ecx
mov	ebx, [tmpt+4]
xor	edi, edi
add	u, ebx
adc	ecx, edi
mov	esi, edx
and	esi, 0FFFFFFFh
mov	[tmpt+4], esi
shrd	edx, ecx, 1Ch
shr	ecx, 1Ch
test	edx, edx
jz	loc_64202C8C
xor	ecx, ecx
mov	ebx, [tmpt+8]
xor	edi, edi
add	u, ebx
adc	ecx, edi
mov	esi, edx
and	esi, 0FFFFFFFh
mov	[tmpt+8], esi
shrd	edx, ecx, 1Ch
shr	ecx, 1Ch
test	edx, edx
jz	loc_64202C8C
xor	ecx, ecx
mov	ebx, [tmpt+0Ch]
xor	edi, edi
add	u, ebx
adc	ecx, edi
mov	esi, edx
and	esi, 0FFFFFFFh
mov	[tmpt+0Ch], esi
shrd	edx, ecx, 1Ch
shr	ecx, 1Ch
test	edx, edx
jz	loc_64202C8C
xor	ecx, ecx
mov	ebx, [tmpt+10h]
xor	edi, edi
add	u, ebx
adc	ecx, edi
mov	esi, edx
and	esi, 0FFFFFFFh
mov	[tmpt+10h], esi
shrd	edx, ecx, 1Ch
shr	ecx, 1Ch
test	edx, edx
jz	short loc_64202C8C
xor	ecx, ecx
mov	ebx, [tmpt+14h]
xor	edi, edi
add	u, ebx
adc	ecx, edi
mov	esi, edx
and	esi, 0FFFFFFFh
mov	[tmpt+14h], esi
shrd	edx, ecx, 1Ch
shr	ecx, 1Ch
test	edx, edx
jz	short loc_64202C8C
xor	ecx, ecx
mov	ebx, [tmpt+18h]
xor	edi, edi
add	u, ebx
adc	ecx, edi
mov	esi, edx
and	esi, 0FFFFFFFh
mov	[tmpt+18h], esi
shrd	edx, ecx, 1Ch
shr	ecx, 1Ch
test	edx, edx
jz	short loc_64202C8C
xor	ecx, ecx
mov	ebx, [tmpt+1Ch]
xor	edi, edi
add	u, ebx
adc	ecx, edi
mov	esi, edx
and	esi, 0FFFFFFFh
mov	[tmpt+1Ch], esi
add	tmpt, 20h
shrd	edx, ecx, 1Ch
shr	ecx, 1Ch
test	edx, edx
jnz	loc_64202B6E
nop
			
add	[esp+9Ch+var_4C], 4
add	[esp+9Ch+var_58], 8
mov	ecx, [esp+9Ch+var_50]
mov	[esp+9Ch+var_88], ecx
mov	tmpt, [esp+9Ch+var_54]
cmp	ecx, eax
jnz	loc_64202870
mov	ebp, [esp+9Ch+var_44]
test	ebp, ebp
jle	loc_64202E4F
mov	edi, [esp+9Ch+var_44]
mov	esi, [esp+9Ch+var_48]
mov	u, [esi+edi*4-4]
test	edx, edx
jnz	loc_64202DFC
mov	eax, [esp+9Ch+var_40]
lea	ebx, [eax-1]
lea	edx, ds:0[ebx*4]
add	edx, [esp+9Ch+t.dp]
mov	ecx, eax
and	ecx, 7
jz	loc_64202D84
mov	[esp+9Ch+var_44], eax
test	eax, eax
jle	loc_64202E4B
mov	ebp, [edx]
mov	eax, ebx
sub	edx, 4
test	ebp, ebp
jnz	loc_64202DF4
cmp	ecx, 1
jz	short loc_64202D84
cmp	ecx, 2
jz	short loc_64202D76
cmp	ecx, 3
jz	short loc_64202D68
cmp	ecx, 4
jz	short loc_64202D56
cmp	ecx, 5
jz	short loc_64202D44
cmp	ecx, 6
jz	short loc_64202D32
mov	[esp+9Ch+var_44], ebx
mov	edi, [edx]
dec	eax
sub	edx, 4
test	edi, edi
jnz	loc_64202DF4
mov	[esp+9Ch+var_44], eax
mov	ebx, [edx]
dec	eax
sub	edx, 4
test	ebx, ebx
jnz	loc_64202DF4
mov	[esp+9Ch+var_44], eax
mov	ecx, [edx]
dec	eax
sub	edx, 4
test	ecx, ecx
jnz	loc_64202DF4
mov	[esp+9Ch+var_44], eax
mov	esi, [edx]
dec	eax
sub	edx, 4
test	esi, esi
jnz	loc_64202DF4
mov	[esp+9Ch+var_44], eax
mov	ebp, [edx]
dec	eax
sub	edx, 4
test	ebp, ebp
jnz	short loc_64202DF4
mov	[esp+9Ch+var_44], eax
mov	edi, [edx]
dec	eax
sub	edx, 4
test	edi, edi
jnz	short loc_64202DF4
			
mov	ecx, eax
test	eax, eax
jle	loc_64202E47
lea	ebx, [eax-1]
mov	ebp, [edx]
test	ebp, ebp
jnz	short loc_64202DF0
mov	ecx, ebx
lea	ebx, [eax-2]
mov	esi, [edx-4]
test	esi, esi
jnz	short loc_64202DF0
mov	ecx, ebx
lea	ebx, [eax-3]
mov	ebp, [edx-8]
test	ebp, ebp
jnz	short loc_64202DF0
mov	ecx, ebx
lea	ebx, [eax-4]
mov	edi, [edx-0Ch]
test	edi, edi
jnz	short loc_64202DF0
mov	ecx, ebx
lea	ebx, [eax-5]
mov	esi, [edx-10h]
test	esi, esi
jnz	short loc_64202DF0
mov	ecx, ebx
lea	ebx, [eax-6]
mov	ebp, [edx-14h]
test	ebp, ebp
jnz	short loc_64202DF0
mov	ecx, ebx
lea	ebx, [eax-7]
mov	edi, [edx-18h]
test	edi, edi
jnz	short loc_64202DF0
mov	ecx, ebx
mov	ebx, [edx-1Ch]
sub	eax, 8
sub	edx, 20h
test	ebx, ebx
jz	short loc_64202D84
xchg	ax, ax
			
mov	[esp+9Ch+var_44], ecx
			
mov	ebx, [esp+9Ch+var_44]
mov	[esp+9Ch+t.used], ebx
			
lea	ebp, [esp+9Ch+var_3C]
lea	u, [esp+9Ch+t]
mov	eax, 4
mov	edi, ebp
mov	u, edx
mov	ecx, eax
rep movsd
mov	edi, edx
mov	esi, [esp+9Ch+b]
mov	ecx, eax
rep movsd
mov	edi, [esp+9Ch+b]
mov	b_0, ebp
mov	ecx, eax
rep movsd
mov	[esp+9Ch+var_9C], edx 
call	_tma_mp_clear
xor	eax, eax
add	esp, 8Ch
pop	ebx
pop	esi
pop	b_0
pop	ebp
retn
			
mov	edi, ebx
jmp	loc_64202B04
mov	[esp+9Ch+var_44], eax
mov	[esp+9Ch+t.used], eax
mov	ecx, [esp+9Ch+var_44]
test	ecx, ecx
jnz	short loc_64202DFC
mov	[esp+9Ch+t.sign], 0
jmp	short loc_64202DFC
align 4
dec	eax
or	eax, 0FFFFFFE0h
inc	eax
jmp	loc_64202720
mov	eax, 0FFFFFFFEh
add	esp, 8Ch
pop	ebx
pop	a_0
pop	edi
pop	ebp
retn
align 10h
public _tma_mp_2expt
push	ebp
push	edi
push	esi
push	ebx
sub	esp, 2Ch
mov	edi, [esp+3Ch+a]
mov	ebp, [esp+3Ch+b]
mov	dword ptr [edi+8], 0
mov	dword ptr [edi], 0
mov	ebx, [edi+0Ch]
mov	ecx, [edi+4]
test	ecx, ecx
jle	loc_64202F6B
lea	edx, [ecx-1]
and	edx, 7
mov	dword ptr [ebx], 0
mov	eax, 1
cmp	eax, ecx
jz	loc_64202F6B
test	edx, edx
jz	short loc_64202F25
cmp	edx, 1
jz	short loc_64202F19
cmp	edx, 2
jz	short loc_64202F11
cmp	edx, 3
jz	short loc_64202F09
cmp	edx, 4
jz	short loc_64202F01
cmp	edx, 5
jz	short loc_64202EF9
cmp	edx, 6
jz	short loc_64202EF1
mov	dword ptr [ebx+eax*4], 0
mov	eax, 2
mov	dword ptr [ebx+eax*4], 0
inc	eax
mov	dword ptr [ebx+eax*4], 0
inc	eax
mov	dword ptr [ebx+eax*4], 0
inc	eax
mov	dword ptr [ebx+eax*4], 0
inc	eax
mov	dword ptr [ebx+eax*4], 0
inc	eax
mov	dword ptr [ebx+eax*4], 0
inc	eax
cmp	eax, ecx
jz	short loc_64202F6B
			
mov	dword ptr [ebx+eax*4], 0
mov	dword ptr [ebx+eax*4+4], 0
mov	dword ptr [ebx+eax*4+8], 0
mov	dword ptr [ebx+eax*4+0Ch], 0
mov	dword ptr [ebx+eax*4+10h], 0
mov	dword ptr [ebx+eax*4+14h], 0
mov	dword ptr [ebx+eax*4+18h], 0
mov	dword ptr [ebx+eax*4+1Ch], 0
add	eax, 8
cmp	eax, ecx
jnz	short loc_64202F25
			
mov	eax, 92492493h
imul	b_0
lea	esi, [b_0+edx+0]
sar	esi, 4
mov	eax, b_0
sar	eax, 1Fh
sub	esi, eax
lea	edx, [esi+1]
cmp	edx, ecx
jg	short loc_64202FAC
			
mov	[a_0], edx
mov	a_0, 1Ch
mov	eax, b_0
cdq
idiv	edi
mov	edi, 1
mov	cl, dl
shl	edi, cl
mov	[ebx+esi*4], edi
xor	eax, eax
add	esp, 2Ch
pop	ebx
pop	esi
pop	edi
pop	b_0
retn
align 4
lea	ecx, [esi+41h]
mov	eax, edx
and	eax, 8000001Fh
js	loc_642030D3
sub	ecx, eax
mov	[esp+3Ch+var_20], ecx
mov	eax, ecx
shl	eax, 2
mov	[esp+3Ch+var_38], eax 
mov	[esp+3Ch+var_3C], ebx 
mov	[esp+3Ch+var_24], edx
call	_realloc
test	eax, eax
mov	edx, [esp+3Ch+var_24]
jz	loc_642030DD
mov	[a_0+0Ch], eax
mov	ecx, [a_0+4]
mov	ebx, [esp+3Ch+var_20]
mov	[a_0+4], ebx
cmp	ebx, ecx
jle	loc_642030E7
lea	eax, [eax+ecx*4]
mov	ebx, ecx
not	ebx
add	ebx, [esp+3Ch+var_20]
and	ebx, 7
mov	dword ptr [eax], 0
inc	ecx
add	eax, 4
cmp	[esp+3Ch+var_20], ecx
jle	loc_642030CB
test	ebx, ebx
jz	short loc_64203088
cmp	ebx, 1
jz	short loc_64203078
cmp	ebx, 2
jz	short loc_6420306E
cmp	ebx, 3
jz	short loc_64203064
cmp	ebx, 4
jz	short loc_6420305A
cmp	ebx, 5
jz	short loc_64203050
cmp	ebx, 6
jz	short loc_64203046
mov	dword ptr [eax], 0
inc	ecx
add	eax, 4
mov	dword ptr [eax], 0
inc	ecx
add	eax, 4
mov	dword ptr [eax], 0
inc	ecx
add	eax, 4
mov	dword ptr [eax], 0
inc	ecx
add	eax, 4
mov	dword ptr [eax], 0
inc	ecx
add	eax, 4
mov	dword ptr [eax], 0
inc	ecx
add	eax, 4
mov	dword ptr [eax], 0
inc	ecx
add	eax, 4
cmp	[esp+3Ch+var_20], ecx
jle	short loc_642030CB
			
mov	dword ptr [eax], 0
mov	dword ptr [eax+4], 0
mov	dword ptr [eax+8], 0
mov	dword ptr [eax+0Ch], 0
mov	dword ptr [eax+10h], 0
mov	dword ptr [eax+14h], 0
mov	dword ptr [eax+18h], 0
mov	dword ptr [eax+1Ch], 0
add	ecx, 8
add	eax, 20h
cmp	[esp+3Ch+var_20], ecx
jg	short loc_64203088
			
mov	ebx, [a_0+0Ch]
jmp	loc_64202F87
dec	eax
or	eax, 0FFFFFFE0h
inc	eax
jmp	loc_64202FBC
mov	eax, 0FFFFFFFEh
jmp	loc_64202FA1
mov	ebx, eax
jmp	loc_64202F87
align 10h
public _tma_mp_neg
			
push	ebp
push	edi
push	esi
push	ebx
sub	esp, 2Ch
mov	esi, [esp+3Ch+a]
mov	ebx, [esp+3Ch+b]
cmp	esi, ebx
jz	loc_64203314
mov	ebp, [a_0]
cmp	[b_0+4], ebp
jl	loc_64203318
mov	edx, [a_0+0Ch]
mov	ecx, [b_0+0Ch]
test	ebp, ebp
jle	loc_64203330
lea	edi, [ebp-1]
and	edi, 7
mov	res, [edx]
mov	[ecx], eax
mov	eax, 1
cmp	eax, ebp
jz	loc_642031E6
test	edi, edi
jz	short loc_64203192
cmp	edi, 1
jz	short loc_64203187
cmp	edi, 2
jz	short loc_64203180
cmp	edi, 3
jz	short loc_64203179
cmp	edi, 4
jz	short loc_64203172
cmp	edi, 5
jz	short loc_6420316B
cmp	edi, 6
jz	short loc_64203164
mov	edi, [edx+4]
mov	[ecx+eax*4], edi
mov	eax, 2
mov	edi, [edx+eax*4]
mov	[ecx+eax*4], edi
inc	eax
mov	edi, [edx+eax*4]
mov	[ecx+eax*4], edi
inc	eax
mov	edi, [edx+eax*4]
mov	[ecx+eax*4], edi
inc	eax
mov	edi, [edx+eax*4]
mov	[ecx+eax*4], edi
inc	eax
mov	edi, [edx+eax*4]
mov	[ecx+eax*4], edi
inc	eax
mov	edi, [edx+eax*4]
mov	[ecx+eax*4], edi
inc	eax
cmp	eax, ebp
jz	short loc_642031E6
mov	[esp+3Ch+var_24], a_0
mov	a_0, [edx+eax*4]
mov	[ecx+eax*4], esi
lea	esi, [eax+1]
mov	edi, [edx+esi*4]
mov	[ecx+esi*4], edi
lea	esi, [eax+2]
mov	edi, [edx+esi*4]
mov	[ecx+esi*4], edi
lea	esi, [eax+3]
mov	edi, [edx+esi*4]
mov	[ecx+esi*4], edi
lea	esi, [eax+4]
mov	edi, [edx+esi*4]
mov	[ecx+esi*4], edi
lea	esi, [eax+5]
mov	edi, [edx+esi*4]
mov	[ecx+esi*4], edi
lea	esi, [eax+6]
mov	edi, [edx+esi*4]
mov	[ecx+esi*4], edi
lea	esi, [eax+7]
mov	edi, [edx+esi*4]
mov	[ecx+esi*4], edi
add	eax, 8
cmp	eax, ebp
jnz	short loc_64203196
mov	esi, [esp+3Ch+var_24]
			
lea	ecx, [ecx+eax*4]
mov	edx, [b_0]
mov	[esp+3Ch+var_20], edx
cmp	eax, edx
jge	loc_642032DE
mov	edi, eax
not	edi
add	edi, [esp+3Ch+var_20]
and	edi, 7
mov	[esp+3Ch+var_24], edi
mov	dword ptr [ecx], 0
lea	edx, [ecx+4]
lea	edi, [eax+1]
cmp	edi, [esp+3Ch+var_20]
jge	loc_642032DE
cmp	[esp+3Ch+var_24], 0
jz	short loc_6420329B
cmp	[esp+3Ch+var_24], 1
jz	short loc_6420328B
cmp	[esp+3Ch+var_24], 2
jz	short loc_64203281
cmp	[esp+3Ch+var_24], 3
jz	short loc_64203277
cmp	[esp+3Ch+var_24], 4
jz	short loc_6420326D
cmp	[esp+3Ch+var_24], 5
jz	short loc_64203263
cmp	[esp+3Ch+var_24], 6
jz	short loc_64203259
mov	dword ptr [edx], 0
lea	edx, [ecx+8]
lea	edi, [eax+2]
mov	dword ptr [edx], 0
add	edx, 4
inc	edi
mov	dword ptr [edx], 0
add	edx, 4
inc	edi
mov	dword ptr [edx], 0
add	edx, 4
inc	edi
mov	dword ptr [edx], 0
add	edx, 4
inc	edi
mov	dword ptr [edx], 0
add	edx, 4
inc	edi
mov	dword ptr [edx], 0
add	edx, 4
inc	edi
cmp	edi, [esp+3Ch+var_20]
jge	short loc_642032DE
			
mov	dword ptr [edx], 0
mov	dword ptr [edx+4], 0
mov	dword ptr [edx+8], 0
mov	dword ptr [edx+0Ch], 0
mov	dword ptr [edx+10h], 0
mov	dword ptr [edx+14h], 0
mov	dword ptr [edx+18h], 0
mov	dword ptr [edx+1Ch], 0
add	edx, 20h
add	edi, 8
cmp	edi, [esp+3Ch+var_20]
jl	short loc_6420329B
			
mov	[b_0], ebp
mov	ecx, [a_0+8]
mov	[b_0+8], ecx
test	ebp, ebp
jnz	short loc_642032FC
mov	dword ptr [b_0+8], 0
xor	eax, eax
add	esp, 2Ch
pop	b_0
pop	a_0
pop	edi
pop	ebp
retn
align 4
xor	eax, eax
cmp	dword ptr [a_0+8], 0
setz	al
mov	[b_0+8], eax
xor	eax, eax
add	esp, 2Ch
pop	b_0
pop	a_0
pop	edi
pop	ebp
retn
align 4
mov	ebp, [a_0]
jmp	short loc_642032E6
mov	[esp+3Ch+size],	ebp 
mov	[esp+3Ch+var_3C], b_0 
call	_tma_mp_grow
test	eax, eax
jnz	short loc_642032F3
mov	ebp, [a_0]
jmp	loc_64203112
align 10h
xor	res, res
jmp	loc_642031E9
align 4
public _tma_mp_abs
			
push	ebp
push	edi
push	esi
push	ebx
sub	esp, 2Ch
mov	esi, [esp+3Ch+a]
mov	ebx, [esp+3Ch+b]
cmp	esi, ebx
jz	loc_6420352E
mov	ebp, [a_0]
cmp	[b_0+4], ebp
jl	loc_64203540
mov	edx, [a_0+0Ch]
mov	ecx, [b_0+0Ch]
test	ebp, ebp
jle	loc_64203558
lea	edi, [ebp-1]
and	edi, 7
mov	res, [edx]
mov	[ecx], eax
mov	eax, 1
cmp	eax, ebp
jz	loc_6420342E
test	edi, edi
jz	short loc_642033DA
cmp	edi, 1
jz	short loc_642033CF
cmp	edi, 2
jz	short loc_642033C8
cmp	edi, 3
jz	short loc_642033C1
cmp	edi, 4
jz	short loc_642033BA
cmp	edi, 5
jz	short loc_642033B3
cmp	edi, 6
jz	short loc_642033AC
mov	edi, [edx+4]
mov	[ecx+eax*4], edi
mov	eax, 2
mov	edi, [edx+eax*4]
mov	[ecx+eax*4], edi
inc	eax
mov	edi, [edx+eax*4]
mov	[ecx+eax*4], edi
inc	eax
mov	edi, [edx+eax*4]
mov	[ecx+eax*4], edi
inc	eax
mov	edi, [edx+eax*4]
mov	[ecx+eax*4], edi
inc	eax
mov	edi, [edx+eax*4]
mov	[ecx+eax*4], edi
inc	eax
mov	edi, [edx+eax*4]
mov	[ecx+eax*4], edi
inc	eax
cmp	eax, ebp
jz	short loc_6420342E
mov	[esp+3Ch+var_24], a_0
mov	a_0, [edx+eax*4]
mov	[ecx+eax*4], esi
lea	esi, [eax+1]
mov	edi, [edx+esi*4]
mov	[ecx+esi*4], edi
lea	esi, [eax+2]
mov	edi, [edx+esi*4]
mov	[ecx+esi*4], edi
lea	esi, [eax+3]
mov	edi, [edx+esi*4]
mov	[ecx+esi*4], edi
lea	esi, [eax+4]
mov	edi, [edx+esi*4]
mov	[ecx+esi*4], edi
lea	esi, [eax+5]
mov	edi, [edx+esi*4]
mov	[ecx+esi*4], edi
lea	esi, [eax+6]
mov	edi, [edx+esi*4]
mov	[ecx+esi*4], edi
lea	esi, [eax+7]
mov	edi, [edx+esi*4]
mov	[ecx+esi*4], edi
add	eax, 8
cmp	eax, ebp
jnz	short loc_642033DE
mov	esi, [esp+3Ch+var_24]
			
lea	ecx, [ecx+eax*4]
mov	edx, [b_0]
mov	[esp+3Ch+var_20], edx
cmp	eax, edx
jge	loc_64203526
mov	edi, eax
not	edi
add	edi, [esp+3Ch+var_20]
and	edi, 7
mov	[esp+3Ch+var_24], edi
mov	dword ptr [ecx], 0
lea	edx, [ecx+4]
lea	edi, [eax+1]
cmp	edi, [esp+3Ch+var_20]
jge	loc_64203526
cmp	[esp+3Ch+var_24], 0
jz	short loc_642034E3
cmp	[esp+3Ch+var_24], 1
jz	short loc_642034D3
cmp	[esp+3Ch+var_24], 2
jz	short loc_642034C9
cmp	[esp+3Ch+var_24], 3
jz	short loc_642034BF
cmp	[esp+3Ch+var_24], 4
jz	short loc_642034B5
cmp	[esp+3Ch+var_24], 5
jz	short loc_642034AB
cmp	[esp+3Ch+var_24], 6
jz	short loc_642034A1
mov	dword ptr [edx], 0
lea	edx, [ecx+8]
lea	edi, [eax+2]
mov	dword ptr [edx], 0
add	edx, 4
inc	edi
mov	dword ptr [edx], 0
add	edx, 4
inc	edi
mov	dword ptr [edx], 0
add	edx, 4
inc	edi
mov	dword ptr [edx], 0
add	edx, 4
inc	edi
mov	dword ptr [edx], 0
add	edx, 4
inc	edi
mov	dword ptr [edx], 0
add	edx, 4
inc	edi
cmp	edi, [esp+3Ch+var_20]
jge	short loc_64203526
			
mov	dword ptr [edx], 0
mov	dword ptr [edx+4], 0
mov	dword ptr [edx+8], 0
mov	dword ptr [edx+0Ch], 0
mov	dword ptr [edx+10h], 0
mov	dword ptr [edx+14h], 0
mov	dword ptr [edx+18h], 0
mov	dword ptr [edx+1Ch], 0
add	edx, 20h
add	edi, 8
cmp	edi, [esp+3Ch+var_20]
jl	short loc_642034E3
			
mov	[b_0], ebp
mov	ecx, [a_0+8]
mov	[b_0+8], ecx
mov	dword ptr [b_0+8], 0
xor	eax, eax
add	esp, 2Ch
pop	b_0
pop	a_0
pop	edi
pop	ebp
retn
align 10h
mov	[esp+3Ch+size],	ebp 
mov	[esp+3Ch+var_3C], b_0 
call	_tma_mp_grow
test	eax, eax
jnz	short loc_64203537
mov	ebp, [a_0]
jmp	loc_6420335A
align 4
xor	res, res
jmp	loc_64203431
align 10h
public _tma_mp_init_copy
			
push	ebp
push	edi
push	esi
push	ebx
sub	esp, 2Ch
mov	ebx, [esp+3Ch+a]
mov	esi, [esp+3Ch+b]
mov	[esp+3Ch+var_3C], 80h 
call	_malloc
mov	[ebx+0Ch], eax
test	eax, eax
jz	loc_6420380C
mov	dword ptr [eax], 0
mov	edx, 4
jmp	short loc_642035E1
align 4
mov	eax, [a_0+0Ch]
mov	dword ptr [eax+ecx], 0
mov	dword ptr [eax+edx+8], 0
mov	dword ptr [eax+edx+0Ch], 0
mov	dword ptr [eax+edx+10h], 0
mov	dword ptr [eax+edx+14h], 0
mov	dword ptr [eax+edx+18h], 0
mov	dword ptr [eax+edx+1Ch], 0
mov	dword ptr [eax+edx+20h], 0
mov	dword ptr [eax+edx+24h], 0
add	edx, 28h
mov	dword ptr [eax+edx], 0
lea	ecx, [edx+4]
cmp	ecx, 80h
jnz	short loc_64203594
mov	dword ptr [a_0], 0
mov	dword ptr [a_0+4], 20h
mov	dword ptr [a_0+8], 0
cmp	a_0, b_0
jz	loc_642037E8
mov	ebp, [b_0]
cmp	ebp, 20h
jg	loc_642037F4
mov	ecx, [b_0+0Ch]
mov	res, [a_0+0Ch]
test	ebp, ebp
jle	loc_64203819
lea	edi, [ebp-1]
and	edi, 7
mov	edx, [ecx]
mov	[eax], edx
add	eax, 4
mov	edx, 1
cmp	edx, ebp
jge	loc_642036EB
test	edi, edi
jz	short loc_642036AB
cmp	edi, 1
jz	short loc_6420369E
cmp	edi, 2
jz	short loc_64203695
cmp	edi, 3
jz	short loc_6420368C
cmp	edi, 4
jz	short loc_64203683
cmp	edi, 5
jz	short loc_6420367A
cmp	edi, 6
jz	short loc_64203671
mov	edx, [ecx+4]
mov	[eax], edx
add	eax, 4
mov	edx, 2
mov	edi, [ecx+edx*4]
mov	[eax], edi
add	eax, 4
inc	edx
mov	edi, [ecx+edx*4]
mov	[eax], edi
add	eax, 4
inc	edx
mov	edi, [ecx+edx*4]
mov	[eax], edi
add	eax, 4
inc	edx
mov	edi, [ecx+edx*4]
mov	[eax], edi
add	eax, 4
inc	edx
mov	edi, [ecx+edx*4]
mov	[eax], edi
add	eax, 4
inc	edx
mov	edi, [ecx+edx*4]
mov	[eax], edi
add	eax, 4
inc	edx
cmp	edx, ebp
jge	short loc_642036EB
			
mov	edi, [ecx+edx*4]
mov	[eax], edi
mov	edi, [ecx+edx*4+4]
mov	[eax+4], edi
mov	edi, [ecx+edx*4+8]
mov	[eax+8], edi
mov	edi, [ecx+edx*4+0Ch]
mov	[eax+0Ch], edi
mov	edi, [ecx+edx*4+10h]
mov	[eax+10h], edi
mov	edi, [ecx+edx*4+14h]
mov	[eax+14h], edi
mov	edi, [ecx+edx*4+18h]
mov	[eax+18h], edi
mov	edi, [ecx+edx*4+1Ch]
mov	[eax+1Ch], edi
add	eax, 20h
add	edx, 8
cmp	edx, ebp
jl	short loc_642036AB
			
mov	ecx, [a_0]
mov	[esp+3Ch+var_20], ecx
cmp	edx, ecx
jge	loc_642037E0
mov	edi, edx
not	edi
add	edi, [esp+3Ch+var_20]
and	edi, 7
mov	[esp+3Ch+var_24], edi
mov	dword ptr [eax], 0
lea	ecx, [eax+4]
lea	edi, [edx+1]
cmp	edi, [esp+3Ch+var_20]
jge	loc_642037E0
cmp	[esp+3Ch+var_24], 0
jz	short loc_6420379D
cmp	[esp+3Ch+var_24], 1
jz	short loc_6420378D
cmp	[esp+3Ch+var_24], 2
jz	short loc_64203783
cmp	[esp+3Ch+var_24], 3
jz	short loc_64203779
cmp	[esp+3Ch+var_24], 4
jz	short loc_6420376F
cmp	[esp+3Ch+var_24], 5
jz	short loc_64203765
cmp	[esp+3Ch+var_24], 6
jz	short loc_6420375B
mov	dword ptr [ecx], 0
lea	ecx, [eax+8]
lea	edi, [edx+2]
mov	dword ptr [ecx], 0
add	ecx, 4
inc	edi
mov	dword ptr [ecx], 0
add	ecx, 4
inc	edi
mov	dword ptr [ecx], 0
add	ecx, 4
inc	edi
mov	dword ptr [ecx], 0
add	ecx, 4
inc	edi
mov	dword ptr [ecx], 0
add	ecx, 4
inc	edi
mov	dword ptr [ecx], 0
add	ecx, 4
inc	edi
cmp	edi, [esp+3Ch+var_20]
jge	short loc_642037E0
			
mov	dword ptr [ecx], 0
mov	dword ptr [ecx+4], 0
mov	dword ptr [ecx+8], 0
mov	dword ptr [ecx+0Ch], 0
mov	dword ptr [ecx+10h], 0
mov	dword ptr [ecx+14h], 0
mov	dword ptr [ecx+18h], 0
mov	dword ptr [ecx+1Ch], 0
add	ecx, 20h
add	edi, 8
cmp	edi, [esp+3Ch+var_20]
jl	short loc_6420379D
			
mov	[a_0], ebp
mov	eax, [b_0+8]
mov	[a_0+8], eax
xor	eax, eax
add	esp, 2Ch
pop	a_0
pop	b_0
pop	edi
pop	ebp
retn
align 4
mov	[esp+3Ch+size],	ebp 
mov	[esp+3Ch+var_3C], a_0 
call	_tma_mp_grow
test	eax, eax
jnz	short loc_642037EA
mov	ebp, [b_0]
jmp	loc_6420361A
align 4
mov	eax, 0FFFFFFFEh
add	esp, 2Ch
pop	a_0
pop	b_0
pop	edi
pop	ebp
retn
xor	edx, edx
jmp	loc_642036EB
public _fast_s_tma_mp_sqr
push	ebp
push	edi
push	esi
push	ebx
sub	esp, 86Ch
mov	esi, [esp+87Ch+a]
mov	eax, [esi]
mov	[esp+87Ch+var_830], eax
shl	eax, 1
mov	[esp+87Ch+var_834], eax
mov	edx, [esp+87Ch+b]
cmp	eax, [edx+4]
jg	loc_64203EF4
cmp	[esp+87Ch+var_834], 0
jle	loc_64203EC6
mov	ebx, [a_0+0Ch]
mov	[esp+87Ch+var_838], ebx
mov	edx, [esp+87Ch+var_830]
dec	edx
mov	[esp+87Ch+var_82C], edx
lea	eax, [ebx+edx*4]
mov	[esp+87Ch+var_828], eax
mov	ecx, [esp+87Ch+var_830]
shl	ecx, 1
mov	[esp+87Ch+var_820], ecx
dec	ecx
mov	[esp+87Ch+var_850], ecx
mov	[esp+87Ch+var_84C], 1
mov	ebp, [esp+87Ch+var_830]
sub	[esp+87Ch+var_84C], ebp
imul	edi, edx, -4
add	edi, [esp+87Ch+var_838]
mov	[esp+87Ch+var_848], edi
mov	[esp+87Ch+var_844], 0
mov	[esp+87Ch+var_840], 0
mov	[esp+87Ch+var_854], 0
mov	a_0, [esp+87Ch+var_830]
mov	[esp+87Ch+var_824], esi
mov	esi, [esp+87Ch+var_830]
cmp	[esp+87Ch+var_854], esi
jl	loc_64203B17
nop
mov	edx, [esp+87Ch+var_84C]
mov	esi, [esp+87Ch+var_848]
mov	eax, [esp+87Ch+var_850]
cmp	[esp+87Ch+var_82C], iy
jl	loc_64203EE7
mov	ecx, [esp+87Ch+var_824]
mov	ebp, [esp+87Ch+var_828]
sub	iy, tx
sar	iy, 1
mov	[esp+87Ch+var_858], iy
cmp	iy, eax
jle	short loc_642038F6
mov	[esp+87Ch+var_858], iy
mov	edi, [esp+87Ch+var_858]
test	edi, edi
jle	loc_64203B30
mov	edi, [esp+87Ch+var_858]
dec	edi
and	edi, 7
mov	tx, [tmpx]
mov	iy, edx
mul	dword ptr [tmpy+0]
mov	[esp+87Ch+var_864], eax
mov	[esp+87Ch+var_860], edx
lea	ebx, [tmpy-4]
mov	iy, 1
cmp	iz, [esp+87Ch+var_858]
jz	loc_64203A98
test	edi, edi
jz	loc_642039F4
cmp	edi, 1
jz	loc_642039D5
cmp	edi, 2
jz	short loc_642039C0
cmp	edi, 3
jz	short loc_642039AB
cmp	edi, 4
jz	short loc_64203996
cmp	edi, 5
jz	short loc_64203981
cmp	edi, 6
jz	short loc_6420396E
mov	edi, [tmpx+4]
mov	eax, [tmpy]
mul	edi
mov	iz, eax
add	[esp+87Ch+var_864], ecx
adc	[esp+87Ch+var_860], edx
lea	tmpy, [ebp-8]
mov	ecx, 2
mov	ebp, [tmpx+iz*4]
mov	eax, [tmpy]
mul	ebp
add	[esp+87Ch+var_864], eax
adc	[esp+87Ch+var_860], edx
sub	tmpy, 4
inc	iz
mov	ebp, [tmpx+iz*4]
mov	eax, [tmpy]
mul	ebp
mov	edi, eax
add	[esp+87Ch+var_864], edi
adc	[esp+87Ch+var_860], edx
sub	tmpy, 4
inc	iz
mov	ebp, [tmpx+iz*4]
mov	eax, [tmpy]
mul	ebp
mov	edi, eax
add	[esp+87Ch+var_864], edi
adc	[esp+87Ch+var_860], edx
sub	tmpy, 4
inc	iz
mov	ebp, [tmpx+iz*4]
mov	eax, [tmpy]
mul	ebp
mov	edi, eax
add	[esp+87Ch+var_864], edi
adc	[esp+87Ch+var_860], edx
sub	tmpy, 4
inc	iz
mov	ebp, [tmpx+iz*4]
mov	eax, [tmpy]
mul	ebp
mov	edi, eax
add	[esp+87Ch+var_864], edi
adc	[esp+87Ch+var_860], edx
sub	tmpy, 4
inc	iz
mov	ebp, [tmpx+iz*4]
mov	eax, [tmpy]
mul	ebp
mov	edi, eax
add	[esp+87Ch+var_864], edi
adc	[esp+87Ch+var_860], edx
sub	tmpy, 4
inc	iz
cmp	iz, [esp+87Ch+var_858]
jz	loc_64203A98
			
mov	ebp, [tmpx+iz*4]
mov	eax, [tmpy]
mul	ebp
mov	edi, eax
add	[esp+87Ch+var_864], edi
adc	[esp+87Ch+var_860], edx
mov	ebp, [tmpx+iz*4+4]
mov	eax, [tmpy-4]
mul	ebp
mov	edi, eax
add	[esp+87Ch+var_864], edi
adc	[esp+87Ch+var_860], edx
mov	ebp, [tmpx+iz*4+8]
mov	eax, [tmpy-8]
mul	ebp
mov	edi, eax
add	[esp+87Ch+var_864], edi
adc	[esp+87Ch+var_860], edx
mov	ebp, [tmpx+iz*4+0Ch]
mov	eax, [tmpy-0Ch]
mul	ebp
mov	edi, eax
add	[esp+87Ch+var_864], edi
adc	[esp+87Ch+var_860], edx
mov	ebp, [tmpx+iz*4+10h]
mov	eax, [tmpy-10h]
mul	ebp
mov	edi, eax
add	[esp+87Ch+var_864], edi
adc	[esp+87Ch+var_860], edx
mov	ebp, [tmpx+iz*4+14h]
mov	eax, [tmpy-14h]
mul	ebp
mov	edi, eax
add	[esp+87Ch+var_864], edi
adc	[esp+87Ch+var_860], edx
mov	ebp, [tmpx+iz*4+18h]
mov	eax, [tmpy-18h]
mul	ebp
mov	edi, eax
add	[esp+87Ch+var_864], edi
adc	[esp+87Ch+var_860], edx
mov	ebp, [tmpx+iz*4+1Ch]
mov	eax, [tmpy-1Ch]
mul	ebp
add	[esp+87Ch+var_864], eax
adc	[esp+87Ch+var_860], edx
sub	tmpy, 20h
add	iz, 8
cmp	iz, [esp+87Ch+var_858]
jnz	loc_642039F4
			
mov	eax, [esp+87Ch+var_864]
mov	edx, [esp+87Ch+var_860]
add	eax, eax
adc	edx, edx
mov	edi, [esp+87Ch+var_844]
mov	ebp, [esp+87Ch+var_840]
add	edi, eax
adc	ebp, edx
test	byte ptr [esp+87Ch+var_854], 1
jnz	short loc_64203ACC
mov	eax, [esp+87Ch+var_854]
sar	eax, 1
mov	edx, [esp+87Ch+var_838]
mov	tmpx, [edx+eax*4]
mov	eax, esi
mul	esi
add	edi, eax
adc	ebp, edx
mov	tmpx, edi
and	esi, 0FFFFFFFh
mov	tmpy, [esp+87Ch+var_854]
mov	[esp+ebx*4+87Ch+W], esi
inc	ebx
mov	[esp+87Ch+var_854], ebx
dec	[esp+87Ch+var_850]
inc	[esp+87Ch+var_84C]
add	[esp+87Ch+var_848], 4
mov	iy, [esp+87Ch+var_834]
cmp	ebx, ecx
jz	short loc_64203B39
mov	ebx, edi
mov	esi, ebp
shrd	ebx, esi, 1Ch
shr	esi, 1Ch
mov	[esp+87Ch+var_844], ebx
mov	[esp+87Ch+var_840], esi
mov	esi, [esp+87Ch+var_830]
cmp	[esp+87Ch+var_854], esi
jge	loc_642038C8
mov	ecx, [esp+87Ch+var_854]
mov	esi, [esp+87Ch+var_838]
lea	ebp, [esi+ecx*4]
mov	eax, ecx
xor	edx, edx
inc	ty
mov	ecx, iy
jmp	loc_642038E6
align 10h
xor	iy, iy
xor	tx, tx
jmp	loc_64203AA4
mov	ebx, [esp+87Ch+b]
mov	ebp, [ebx]
mov	eax, [esp+87Ch+var_820]
mov	[ebx], eax
mov	edx, [ebx+0Ch]
mov	ecx, [esp+87Ch+var_834]
dec	ecx
and	ecx, 7
mov	edi, [esp+87Ch+W]
and	edi, 0FFFFFFFh
mov	[edx], edi
mov	eax, 1
cmp	ix, [esp+87Ch+var_834]
jz	loc_64203C90
test	ecx, ecx
jz	loc_64203C04
cmp	ecx, 1
jz	short loc_64203BEC
cmp	ecx, 2
jz	short loc_64203BDE
cmp	ecx, 3
jz	short loc_64203BD0
cmp	ecx, 4
jz	short loc_64203BC2
cmp	ecx, 5
jz	short loc_64203BB4
cmp	ecx, 6
jz	short loc_64203BA6
mov	ecx, [esp+87Ch+W+4]
and	ecx, 0FFFFFFFh
mov	[edx+ix*4], ecx
mov	ix, 2
mov	edi, [esp+ix*4+87Ch+W]
and	edi, 0FFFFFFFh
mov	[edx+ix*4], edi
inc	ix
mov	ebx, [esp+ix*4+87Ch+W]
and	ebx, 0FFFFFFFh
mov	[edx+ix*4], ebx
inc	ix
mov	esi, [esp+ix*4+87Ch+W]
and	esi, 0FFFFFFFh
mov	[edx+ix*4], esi
inc	ix
mov	ecx, [esp+ix*4+87Ch+W]
and	ecx, 0FFFFFFFh
mov	[edx+ix*4], ecx
inc	ix
mov	edi, [esp+ix*4+87Ch+W]
and	edi, 0FFFFFFFh
mov	[edx+ix*4], edi
inc	ix
mov	ebx, [esp+ix*4+87Ch+W]
and	ebx, 0FFFFFFFh
mov	[edx+ix*4], ebx
inc	ix
cmp	ix, [esp+87Ch+var_834]
jz	loc_64203C90
mov	ebx, [esp+87Ch+var_834]
mov	ecx, [esp+ix*4+87Ch+W]
and	ecx, 0FFFFFFFh
mov	[edx+ix*4], ecx
lea	esi, [ix+1]
mov	edi, [esp+esi*4+87Ch+W]
and	edi, 0FFFFFFFh
mov	[edx+esi*4], edi
lea	ecx, [ix+2]
mov	edi, [esp+ix*4+87Ch+W]
and	edi, 0FFFFFFFh
mov	[edx+ix*4], edi
lea	esi, [eax+3]
mov	ecx, [esp+ix*4+87Ch+W]
and	ecx, 0FFFFFFFh
mov	[edx+ix*4], ecx
lea	edi, [eax+4]
mov	ecx, [esp+ix*4+87Ch+W]
and	ecx, 0FFFFFFFh
mov	[edx+ix*4], ecx
lea	esi, [eax+5]
mov	edi, [esp+ix*4+87Ch+W]
and	edi, 0FFFFFFFh
mov	[edx+ix*4], edi
lea	ecx, [eax+6]
mov	edi, [esp+ix*4+87Ch+W]
and	edi, 0FFFFFFFh
mov	[edx+ix*4], edi
lea	esi, [eax+7]
mov	ecx, [esp+ix*4+87Ch+W]
and	ecx, 0FFFFFFFh
mov	[edx+ix*4], ecx
add	eax, 8
cmp	ix, pa
jnz	loc_64203C08
			
lea	edi, [edx+ix*4]
cmp	ix, olduse
jge	loc_64203D67
mov	esi, ix
not	esi
add	esi, olduse
and	esi, 7
mov	dword ptr [tmpb], 0
lea	ecx, [tmpb+4]
lea	pa, [ix+1]
cmp	ix, olduse
jge	loc_64203D67
test	esi, esi
jz	short loc_64203D26
cmp	esi, 1
jz	short loc_64203D18
cmp	esi, 2
jz	short loc_64203D0E
cmp	esi, 3
jz	short loc_64203D04
cmp	esi, 4
jz	short loc_64203CFA
cmp	esi, 5
jz	short loc_64203CF0
cmp	esi, 6
jz	short loc_64203CE6
mov	dword ptr [tmpb], 0
lea	tmpb, [edi+8]
lea	ix, [eax+2]
mov	dword ptr [tmpb], 0
add	tmpb, 4
inc	ix
mov	dword ptr [tmpb], 0
add	tmpb, 4
inc	ix
mov	dword ptr [tmpb], 0
add	tmpb, 4
inc	ix
mov	dword ptr [tmpb], 0
add	tmpb, 4
inc	ix
mov	dword ptr [tmpb], 0
add	tmpb, 4
inc	ix
mov	dword ptr [tmpb], 0
add	tmpb, 4
inc	ix
cmp	ix, olduse
jge	short loc_64203D67
			
mov	dword ptr [tmpb], 0
mov	dword ptr [tmpb+4], 0
mov	dword ptr [tmpb+8], 0
mov	dword ptr [tmpb+0Ch], 0
mov	dword ptr [tmpb+10h], 0
mov	dword ptr [tmpb+14h], 0
mov	dword ptr [tmpb+18h], 0
mov	dword ptr [tmpb+1Ch], 0
add	tmpb, 20h
add	ix, 8
cmp	ix, olduse
jl	short loc_64203D26
			
cmp	[esp+87Ch+var_820], 0
jle	loc_64203E93
mov	eax, [esp+87Ch+var_820]
dec	eax
cmp	dword ptr [edx+eax*4], 0
jnz	loc_64203EC2
mov	olduse,	[esp+87Ch+var_820]
lea	tmpb, ds:0FFFFFFF8h[ebp*4]
mov	ix, eax
and	ebx, 7
jz	loc_64203E2C
mov	[esp+87Ch+var_820], eax
test	eax, eax
jle	loc_64203E8A
mov	ebp, [edx+ecx]
sub	ecx, 4
test	ebp, ebp
jnz	loc_64203EB5
lea	eax, [eax-1]
cmp	ebx, 1
jz	short loc_64203E2C
cmp	ebx, 2
jz	short loc_64203E1D
cmp	ebx, 3
jz	short loc_64203E0E
cmp	ebx, 4
jz	short loc_64203DFF
cmp	ebx, 5
jz	short loc_64203DF0
cmp	ebx, 6
jz	short loc_64203DE1
mov	ebx, [edx+ecx]
sub	ecx, 4
test	ebx, ebx
jnz	loc_64203EB5
dec	eax
mov	esi, [edx+ecx]
sub	ecx, 4
test	esi, esi
jnz	loc_64203EB5
dec	eax
mov	ebp, [edx+ecx]
sub	ecx, 4
test	ebp, ebp
jnz	loc_64203EB5
dec	eax
mov	tmpb, [edx+ecx]
sub	ecx, 4
test	edi, edi
jnz	loc_64203EB5
dec	eax
mov	ebx, [edx+ecx]
sub	ecx, 4
test	ebx, ebx
jnz	loc_64203EB5
dec	eax
mov	esi, [edx+ecx]
sub	ecx, 4
test	esi, esi
jnz	loc_64203EB5
dec	eax
			
mov	[esp+87Ch+var_820], eax
test	eax, eax
jle	short loc_64203E8A
mov	ebx, [edx+ecx]
test	ebx, ebx
jnz	short loc_64203EB5
lea	ebx, [eax-1]
mov	eax, ebx
cmp	dword ptr [edx+ecx-4], 0
jnz	short loc_64203EB5
dec	eax
cmp	dword ptr [edx+ecx-8], 0
jnz	short loc_64203EB5
lea	eax, [ebx-2]
cmp	dword ptr [edx+ecx-0Ch], 0
jnz	short loc_64203EB5
lea	eax, [ebx-3]
cmp	dword ptr [edx+ecx-10h], 0
jnz	short loc_64203EB5
lea	eax, [ebx-4]
cmp	dword ptr [edx+ecx-14h], 0
jnz	short loc_64203EB5
lea	eax, [ebx-5]
cmp	dword ptr [edx+ecx-18h], 0
jnz	short loc_64203EB5
lea	eax, [ebx-6]
mov	ebp, [edx+ecx-1Ch]
sub	ecx, 20h
test	ebp, ebp
jnz	short loc_64203EB5
lea	eax, [ebx-7]
jmp	short loc_64203E2C
			
mov	edx, [esp+87Ch+b]
mov	[edx], eax
cmp	[esp+87Ch+var_820], 0
jnz	short loc_64203EC2
mov	eax, [esp+87Ch+b]
mov	dword ptr [eax+8], 0
xor	eax, eax
			
add	esp, 86Ch
pop	ix
pop	esi
pop	tmpb
pop	olduse
retn
			
mov	tmpb, [esp+87Ch+b]
mov	[edi], eax
xor	eax, eax
jmp	short loc_64203EAA
			
xor	eax, eax
jmp	short loc_64203EAA
mov	a_0, [esp+87Ch+b]
mov	ebp, [esi]
mov	edx, [esp+87Ch+var_830]
shl	edx, 1
mov	[esp+87Ch+var_820], edx
mov	[esi], edx
mov	edx, [esi+0Ch]
mov	edi, edx
xor	eax, eax
jmp	loc_64203C93
mov	ebp, [esp+87Ch+var_828]
mov	iy, [esp+87Ch+var_82C]
jmp	loc_64203B26
mov	ebx, eax
add	ebx, 40h
mov	ecx, 20h
cdq
idiv	ecx
sub	ebx, edx
lea	edi, ds:0[ebx*4]
mov	[esp+87Ch+var_878], edi	
mov	ecx, [esp+87Ch+b]
mov	eax, [ecx+0Ch]
mov	[esp+87Ch+var_87C], eax	
call	_realloc
mov	ecx, eax
mov	eax, 0FFFFFFFEh
test	ecx, ecx
jz	loc_64203EAA
mov	res, [esp+87Ch+b]
mov	[eax+0Ch], ecx
mov	edx, [eax+4]
mov	[eax+4], ebx
lea	eax, [ecx+edx*4]
cmp	ebx, edx
jle	short loc_64203F52
mov	dword ptr [eax], 0
inc	edx
add	eax, 4
jmp	short loc_64203F42
mov	ebx, [a_0]
mov	[esp+87Ch+var_830], ebx
jmp	loc_6420384D
align 10h
public _fast_s_tma_mp_mul_high_digs
push	ebp
push	edi
push	esi
push	ebx
sub	esp, 85Ch
mov	esi, [esp+86Ch+a]
mov	edi, [esp+86Ch+b]
mov	eax, [esi]
mov	[esp+86Ch+var_830], eax
mov	edx, [edi]
mov	[esp+86Ch+var_834], edx
add	edx, eax
mov	[esp+86Ch+var_838], edx
mov	ecx, [esp+86Ch+c]
cmp	edx, [ecx+4]
jg	loc_642045F4
mov	eax, [esp+86Ch+var_838]
cmp	[esp+86Ch+digs], eax
jge	loc_64204652
mov	ecx, [a_0+0Ch]
mov	[esp+86Ch+var_828], ecx
mov	a_0, [b_0+0Ch]
mov	[esp+86Ch+var_82C], esi
mov	eax, [esp+86Ch+digs]
lea	edx, [esp+eax*4+86Ch+W]
mov	[esp+86Ch+var_844], edx
mov	ebx, [esp+86Ch+digs]
inc	ebx
mov	[esp+86Ch+var_820], ebx
sub	ebx, [esp+86Ch+var_834]
mov	[esp+86Ch+var_840], ebx
shl	ebx, 2
mov	[esp+86Ch+var_83C], ebx
mov	ebp, [esp+86Ch+digs]
mov	[esp+86Ch+var_848], ebp
xor	b_0, b_0
xor	esi, esi
mov	ecx, [esp+86Ch+var_834]
dec	ecx
mov	[esp+86Ch+var_824], ecx
mov	[esp+86Ch+var_854], edi
mov	[esp+86Ch+var_850], esi
mov	edi, [esp+86Ch+var_834]
cmp	[esp+86Ch+var_848], edi
jge	loc_64204238
lea	esi, [esi+0]
mov	ecx, [esp+86Ch+var_848]
xor	esi, esi
xor	tmpy, tmpy
mov	ebp, [esp+86Ch+var_830]
sub	ebp, ebx
mov	[esp+86Ch+var_84C], ebp
cmp	ty, ebp
jge	short loc_64204031
lea	ebx, [ty+1]
mov	[esp+86Ch+var_84C], ebx
mov	edx, [esp+86Ch+var_84C]
test	edx, edx
jle	loc_642041E5
add	esi, [esp+86Ch+var_828]
mov	edi, [esp+86Ch+var_82C]
lea	ebp, [edi+ty*4]
mov	edi, [esp+86Ch+var_84C]
dec	edi
and	edi, 7
mov	ebx, [tmpx]
mov	eax, [tmpy+0]
mul	ebx
mov	ty, eax
add	[esp+86Ch+var_854], ecx
adc	[esp+86Ch+var_850], edx
lea	ebx, [tmpy-4]
mov	ecx, 1
cmp	iz, [esp+86Ch+var_84C]
jz	loc_642041E5
test	edi, edi
jz	loc_64204141
cmp	edi, 1
jz	loc_64204122
cmp	edi, 2
jz	loc_6420410D
cmp	edi, 3
jz	short loc_642040F8
cmp	edi, 4
jz	short loc_642040E3
cmp	edi, 5
jz	short loc_642040CE
cmp	edi, 6
jz	short loc_642040BB
mov	iz, [tmpx+4]
mov	eax, [ebp-4]
mul	ecx
mov	edi, eax
add	[esp+86Ch+var_854], edi
adc	[esp+86Ch+var_850], edx
lea	tmpy, [ebp-8]
mov	ecx, 2
mov	ebp, [tmpx+iz*4]
mov	eax, [tmpy]
mul	ebp
add	[esp+86Ch+var_854], eax
adc	[esp+86Ch+var_850], edx
sub	tmpy, 4
inc	iz
mov	ebp, [tmpx+iz*4]
mov	eax, [tmpy]
mul	ebp
mov	edi, eax
add	[esp+86Ch+var_854], edi
adc	[esp+86Ch+var_850], edx
sub	tmpy, 4
inc	iz
mov	ebp, [tmpx+iz*4]
mov	eax, [tmpy]
mul	ebp
mov	edi, eax
add	[esp+86Ch+var_854], edi
adc	[esp+86Ch+var_850], edx
sub	tmpy, 4
inc	iz
mov	ebp, [tmpx+iz*4]
mov	eax, [tmpy]
mul	ebp
mov	edi, eax
add	[esp+86Ch+var_854], edi
adc	[esp+86Ch+var_850], edx
sub	tmpy, 4
inc	iz
mov	ebp, [tmpx+iz*4]
mov	eax, [tmpy]
mul	ebp
mov	edi, eax
add	[esp+86Ch+var_854], edi
adc	[esp+86Ch+var_850], edx
sub	tmpy, 4
inc	iz
mov	ebp, [tmpx+iz*4]
mov	eax, [tmpy]
mul	ebp
mov	edi, eax
add	[esp+86Ch+var_854], edi
adc	[esp+86Ch+var_850], edx
sub	tmpy, 4
inc	iz
cmp	iz, [esp+86Ch+var_84C]
jz	loc_642041E5
			
mov	ebp, [tmpx+iz*4]
mov	eax, [tmpy]
mul	ebp
mov	edi, eax
add	[esp+86Ch+var_854], edi
adc	[esp+86Ch+var_850], edx
mov	ebp, [tmpx+iz*4+4]
mov	eax, [tmpy-4]
mul	ebp
mov	edi, eax
add	[esp+86Ch+var_854], edi
adc	[esp+86Ch+var_850], edx
mov	ebp, [tmpx+iz*4+8]
mov	eax, [tmpy-8]
mul	ebp
mov	edi, eax
add	[esp+86Ch+var_854], edi
adc	[esp+86Ch+var_850], edx
mov	ebp, [tmpx+iz*4+0Ch]
mov	eax, [tmpy-0Ch]
mul	ebp
mov	edi, eax
add	[esp+86Ch+var_854], edi
adc	[esp+86Ch+var_850], edx
mov	ebp, [tmpx+iz*4+10h]
mov	eax, [tmpy-10h]
mul	ebp
mov	edi, eax
add	[esp+86Ch+var_854], edi
adc	[esp+86Ch+var_850], edx
mov	ebp, [tmpx+iz*4+14h]
mov	eax, [tmpy-14h]
mul	ebp
mov	edi, eax
add	[esp+86Ch+var_854], edi
adc	[esp+86Ch+var_850], edx
mov	ebp, [tmpx+iz*4+18h]
mov	eax, [tmpy-18h]
mul	ebp
mov	edi, eax
add	[esp+86Ch+var_854], edi
adc	[esp+86Ch+var_850], edx
mov	ebp, [tmpx+iz*4+1Ch]
mov	eax, [tmpy-1Ch]
mul	ebp
add	[esp+86Ch+var_854], eax
adc	[esp+86Ch+var_850], edx
sub	tmpy, 20h
add	iz, 8
cmp	iz, [esp+86Ch+var_84C]
jnz	loc_64204141
			
mov	ty, [esp+86Ch+var_854]
and	ecx, 0FFFFFFFh
mov	edx, [esp+86Ch+var_844]
mov	[edx], ecx
inc	[esp+86Ch+var_848]
add	edx, 4
mov	[esp+86Ch+var_844], edx
inc	[esp+86Ch+var_840]
add	[esp+86Ch+var_83C], 4
mov	tmpx, [esp+86Ch+var_838]
cmp	[esp+86Ch+var_848], esi
jz	short loc_64204249
mov	eax, [esp+86Ch+var_854]
mov	edx, [esp+86Ch+var_850]
shrd	eax, edx, 1Ch
shr	edx, 1Ch
mov	[esp+86Ch+var_854], eax
mov	[esp+86Ch+var_850], edx
mov	edi, [esp+86Ch+var_834]
cmp	[esp+86Ch+var_848], edi
jl	loc_64204014
mov	ecx, [esp+86Ch+var_824]
mov	tmpy, [esp+86Ch+var_840]
mov	esi, [esp+86Ch+var_83C]
jmp	loc_6420401C
mov	edi, [esp+86Ch+c]
mov	ebp, [edi]
mov	ecx, [esp+86Ch+var_838]
mov	[edi], ecx
mov	esi, [edi+0Ch]
mov	tmpy, [esp+86Ch+digs]
lea	edx, [esi+ebx*4]
mov	edi, ecx
sub	edi, ebx
lea	ecx, [edi-1]
and	ecx, 7
mov	eax, [esp+ebx*4+86Ch+W]
mov	[tmpc],	eax
mov	eax, 1
cmp	eax, edi
jz	loc_642043A4
test	ecx, ecx
jz	loc_64204329
cmp	ecx, 1
jz	loc_64204314
cmp	ecx, 2
jz	short loc_64204303
cmp	ecx, 3
jz	short loc_642042F2
cmp	ecx, 4
jz	short loc_642042E1
cmp	ecx, 5
jz	short loc_642042D0
cmp	ecx, 6
jz	short loc_642042BF
mov	ebx, [esp+86Ch+digs]
mov	ecx, [esp+ebx*4+86Ch+W+4]
mov	[tmpc+eax*4], ecx
mov	eax, 2
mov	ebx, [esp+86Ch+digs]
add	ebx, eax
mov	ecx, [esp+ebx*4+86Ch+W]
mov	[tmpc+eax*4], ecx
inc	eax
mov	ebx, [esp+86Ch+digs]
add	ebx, eax
mov	ecx, [esp+ebx*4+86Ch+W]
mov	[tmpc+eax*4], ecx
inc	eax
mov	ebx, [esp+86Ch+digs]
add	ebx, eax
mov	ecx, [esp+ebx*4+86Ch+W]
mov	[tmpc+eax*4], ecx
inc	eax
mov	ebx, [esp+86Ch+digs]
add	ebx, eax
mov	ecx, [esp+ebx*4+86Ch+W]
mov	[tmpc+eax*4], ecx
inc	eax
mov	ebx, [esp+86Ch+digs]
add	ebx, eax
mov	ecx, [esp+ebx*4+86Ch+W]
mov	[tmpc+eax*4], ecx
inc	eax
mov	ebx, [esp+86Ch+digs]
add	ebx, eax
mov	ecx, [esp+ebx*4+86Ch+W]
mov	[tmpc+eax*4], ecx
inc	eax
cmp	eax, edi
jz	short loc_642043A4
mov	[esp+86Ch+var_84C], olduse
mov	ecx, [esp+86Ch+digs]
lea	olduse,	[digs_0+eax]
mov	ebx, [esp+ebp*4+86Ch+W]
mov	[tmpc+eax*4], ebx
lea	ebx, [eax+1]
lea	ebp, [digs_0+ebx]
mov	ebp, [esp+ebp*4+86Ch+W]
mov	[tmpc+ebx*4], ebp
lea	ebx, [eax+2]
lea	ebp, [digs_0+ebx]
mov	ebp, [esp+ebp*4+86Ch+W]
mov	[tmpc+ebx*4], ebp
lea	ebx, [eax+3]
lea	ebp, [digs_0+ebx]
mov	ebp, [esp+ebp*4+86Ch+W]
mov	[tmpc+ebx*4], ebp
lea	ebx, [eax+4]
lea	ebp, [digs_0+ebx]
mov	ebp, [esp+ebp*4+86Ch+W]
mov	[tmpc+ebx*4], ebp
lea	ebx, [eax+5]
lea	ebp, [digs_0+ebx]
mov	ebp, [esp+ebp*4+86Ch+W]
mov	[tmpc+ebx*4], ebp
lea	ebx, [eax+6]
lea	ebp, [digs_0+ebx]
mov	ebp, [esp+ebp*4+86Ch+W]
mov	[tmpc+ebx*4], ebp
lea	ebx, [eax+7]
lea	ebp, [digs_0+ebx]
mov	ebp, [esp+ebp*4+86Ch+W]
mov	[tmpc+ebx*4], ebp
add	eax, 8
cmp	eax, edi
jnz	short loc_64204334
mov	ebp, [esp+86Ch+var_84C]
			
mov	eax, [esp+86Ch+digs]
not	eax
mov	edi, [esp+86Ch+var_838]
lea	ecx, [eax+edi+1]
lea	ecx, [tmpc+ecx*4]
add	eax, edi
mov	edx, [esp+86Ch+var_820]
lea	edi, [eax+edx]
cmp	ix, olduse
jge	loc_64204495
mov	ebx, ix
not	ebx
add	ebx, olduse
and	ebx, 7
mov	dword ptr [tmpc], 0
lea	eax, [tmpc+4]
lea	edx, [ix+1]
cmp	ix, olduse
jge	loc_64204495
test	ebx, ebx
jz	short loc_64204454
cmp	ebx, 1
jz	short loc_64204446
cmp	ebx, 2
jz	short loc_6420443C
cmp	ebx, 3
jz	short loc_64204432
cmp	ebx, 4
jz	short loc_64204428
cmp	ebx, 5
jz	short loc_6420441E
cmp	ebx, 6
jz	short loc_64204414
mov	dword ptr [tmpc], 0
lea	tmpc, [ecx+8]
lea	ix, [edi+2]
mov	dword ptr [tmpc], 0
add	tmpc, 4
inc	ix
mov	dword ptr [tmpc], 0
add	tmpc, 4
inc	ix
mov	dword ptr [tmpc], 0
add	tmpc, 4
inc	ix
mov	dword ptr [tmpc], 0
add	tmpc, 4
inc	ix
mov	dword ptr [tmpc], 0
add	tmpc, 4
inc	ix
mov	dword ptr [tmpc], 0
add	tmpc, 4
inc	ix
cmp	ix, olduse
jge	short loc_64204495
			
mov	dword ptr [tmpc], 0
mov	dword ptr [tmpc+4], 0
mov	dword ptr [tmpc+8], 0
mov	dword ptr [tmpc+0Ch], 0
mov	dword ptr [tmpc+10h], 0
mov	dword ptr [tmpc+14h], 0
mov	dword ptr [tmpc+18h], 0
mov	dword ptr [tmpc+1Ch], 0
add	tmpc, 20h
add	ix, 8
cmp	ix, olduse
jl	short loc_64204454
			
cmp	[esp+86Ch+var_838], 0
jle	loc_642045C1
mov	tmpc, [esp+86Ch+var_838]
dec	pa
cmp	dword ptr [esi+pa*4], 0
jnz	loc_64204675
mov	ebx, [esp+86Ch+var_838]
lea	ix, ds:0FFFFFFF8h[ebx*4]
mov	tmpc, pa
and	ecx, 7
jz	loc_6420455A
mov	[esp+86Ch+var_838], pa
test	pa, pa
jle	loc_642045B8
mov	olduse,	[esi+edx]
sub	edx, 4
test	ebp, ebp
jnz	loc_642045E7
lea	eax, [eax-1]
cmp	ecx, 1
jz	short loc_6420455A
cmp	ecx, 2
jz	short loc_6420454B
cmp	ecx, 3
jz	short loc_6420453C
cmp	ecx, 4
jz	short loc_6420452D
cmp	ecx, 5
jz	short loc_6420451E
cmp	ecx, 6
jz	short loc_6420450F
mov	ix, [esi+edx]
sub	edx, 4
test	edi, edi
jnz	loc_642045E7
dec	pa
mov	ecx, [esi+edx]
sub	edx, 4
test	ecx, ecx
jnz	loc_642045E7
dec	pa
mov	ebp, [esi+edx]
sub	edx, 4
test	ebp, ebp
jnz	loc_642045E7
dec	pa
mov	ebx, [esi+edx]
sub	edx, 4
test	ebx, ebx
jnz	loc_642045E7
dec	pa
mov	ix, [esi+edx]
sub	edx, 4
test	edi, edi
jnz	loc_642045E7
dec	pa
mov	ecx, [esi+edx]
sub	edx, 4
test	ecx, ecx
jnz	loc_642045E7
dec	pa
			
mov	[esp+86Ch+var_838], pa
test	pa, pa
jle	short loc_642045B8
mov	olduse,	[esi+edx]
test	ebp, ebp
jnz	short loc_642045E7
lea	ecx, [pa-1]
mov	pa, ecx
cmp	dword ptr [esi+edx-4], 0
jnz	short loc_642045E7
dec	pa
cmp	dword ptr [esi+edx-8], 0
jnz	short loc_642045E7
lea	pa, [ecx-2]
cmp	dword ptr [esi+edx-0Ch], 0
jnz	short loc_642045E7
lea	pa, [ecx-3]
cmp	dword ptr [esi+edx-10h], 0
jnz	short loc_642045E7
lea	pa, [ecx-4]
cmp	dword ptr [esi+edx-14h], 0
jnz	short loc_642045E7
lea	pa, [ecx-5]
cmp	dword ptr [esi+edx-18h], 0
jnz	short loc_642045E7
lea	pa, [ecx-6]
mov	ebp, [esi+edx-1Ch]
sub	edx, 20h
test	ebp, ebp
jnz	short loc_642045E7
lea	pa, [ecx-7]
jmp	short loc_6420455A
			
mov	esi, [esp+86Ch+c]
mov	[esi], pa
cmp	[esp+86Ch+var_838], 0
jnz	loc_64204675
mov	tmpc, [esp+86Ch+c]
mov	dword ptr [eax+8], 0
xor	eax, eax
			
add	esp, 85Ch
pop	ebx
pop	esi
pop	ix
pop	olduse
retn
			
mov	edx, [esp+86Ch+c]
mov	[edx], pa
xor	pa, pa
jmp	short loc_642045DC
mov	ebx, edx
add	ebx, 40h
mov	ecx, 20h
mov	eax, [esp+86Ch+var_838]
cdq
idiv	ecx
sub	ebx, edx
lea	ecx, ds:0[ebx*4]
mov	[esp+86Ch+var_868], ecx	
mov	edx, [esp+86Ch+c]
mov	ebp, [edx+0Ch]
mov	[esp+86Ch+var_86C], ebp	
call	_realloc
mov	edx, eax
mov	eax, 0FFFFFFFEh
test	edx, edx
jz	short loc_642045DC
mov	ebp, [esp+86Ch+c]
mov	[ebp+0Ch], edx
mov	res, [ebp+4]
mov	[ebp+4], ebx
lea	edx, [edx+eax*4]
cmp	ebx, eax
jle	short loc_6420467C
mov	dword ptr [edx], 0
inc	eax
add	edx, 4
jmp	short loc_64204642
mov	b_0, [esp+86Ch+c]
mov	ebp, [edi]
mov	ecx, [esp+86Ch+var_838]
mov	[edi], ecx
mov	a_0, [edi+0Ch]
mov	ebx, [esp+86Ch+digs]
lea	ecx, [esi+ebx*4]
mov	edi, ebx
jmp	loc_642043C1
			
xor	pa, pa
jmp	loc_642045DC
mov	ebx, [a_0]
mov	[esp+86Ch+var_830], ebx
mov	edx, [b_0]
mov	[esp+86Ch+var_834], edx
add	ebx, edx
mov	[esp+86Ch+var_838], ebx
jmp	loc_64203F9A
align 4
public _s_tma_mp_mul_high_digs
push	ebp
push	edi
push	esi
push	ebx
sub	esp, 8Ch
mov	ebx, [esp+9Ch+a]
mov	esi, [esp+9Ch+b]
mov	edx, [ebx]
mov	ecx, [esi]
lea	eax, [ecx+edx]
cmp	eax, 1FEh
jg	short loc_642046CE
cmp	ecx, edx
jg	loc_64204D00
cmp	ecx, 0FFh
jle	loc_64204D38
			
lea	edx, [eax+1]
lea	edi, [eax+41h]
and	edx, 8000001Fh
js	loc_64204D68
sub	edi, edx
lea	ecx, ds:0[edi*4]
mov	[esp+9Ch+var_9C], ecx 
call	_malloc
mov	[esp+9Ch+var_54], eax
test	eax, eax
jz	loc_64204D72
mov	ecx, [esp+9Ch+var_54]
mov	[esp+9Ch+t.dp],	ecx
mov	[esp+9Ch+t.used], 0
mov	[esp+9Ch+t.alloc], edi
mov	[esp+9Ch+t.sign], 0
test	edi, edi
jle	loc_64204804
lea	edx, [edi-1]
and	edx, 7
mov	dword ptr [ecx], 0
mov	eax, 1
cmp	eax, edi
jz	loc_64204804
test	edx, edx
jz	short loc_642047BA
cmp	edx, 1
jz	short loc_642047AA
cmp	edx, 2
jz	short loc_6420479D
cmp	edx, 3
jz	short loc_64204791
cmp	edx, 4
jz	short loc_64204785
cmp	edx, 5
jz	short loc_64204778
cmp	edx, 6
jz	short loc_6420476C
mov	edx, [esp+9Ch+var_54]
mov	dword ptr [edx+eax*4], 0
mov	eax, 2
mov	ecx, [esp+9Ch+var_54]
mov	dword ptr [ecx+eax*4], 0
inc	eax
mov	ebp, [esp+9Ch+var_54]
mov	dword ptr [ebp+eax*4+0], 0
inc	eax
mov	edx, [esp+9Ch+var_54]
mov	dword ptr [edx+eax*4], 0
inc	eax
mov	ecx, [esp+9Ch+var_54]
mov	dword ptr [ecx+eax*4], 0
inc	eax
mov	ebp, [esp+9Ch+var_54]
mov	dword ptr [ebp+eax*4+0], 0
inc	eax
mov	edx, [esp+9Ch+var_54]
mov	dword ptr [edx+eax*4], 0
inc	eax
cmp	eax, edi
jz	short loc_64204804
mov	edx, [esp+9Ch+var_54]
mov	dword ptr [edx+eax*4], 0
mov	dword ptr [edx+eax*4+4], 0
mov	dword ptr [edx+eax*4+8], 0
mov	dword ptr [edx+eax*4+0Ch], 0
mov	dword ptr [edx+eax*4+10h], 0
mov	dword ptr [edx+eax*4+14h], 0
mov	dword ptr [edx+eax*4+18h], 0
mov	dword ptr [edx+eax*4+1Ch], 0
add	eax, 8
cmp	eax, edi
jnz	short loc_642047BE
			
mov	edx, [a_0]
mov	[esp+9Ch+var_50], edx
mov	eax, [b_0]
mov	[esp+9Ch+var_60], eax
add	eax, edx
mov	[esp+9Ch+var_40], eax
inc	eax
mov	[esp+9Ch+var_4C], eax
mov	[esp+9Ch+t.used], eax
test	edx, edx
jle	loc_64204B6C
mov	ecx, [esp+9Ch+digs]
shl	ecx, 2
mov	ebp, [esp+9Ch+var_54]
add	tmpt, ecx
mov	edi, [a_0+0Ch]
mov	[esp+9Ch+var_48], edi
add	ecx, [b_0+0Ch]
mov	[esp+9Ch+var_6C], ecx
mov	[esp+9Ch+var_5C], 0
mov	a_0, [esp+9Ch+var_60]
sub	ebx, [esp+9Ch+digs]
mov	[esp+9Ch+var_44], ebx
mov	[esp+9Ch+var_80], tmpt
mov	edi, [esp+9Ch+var_5C]
mov	tmpt, [esp+9Ch+var_48]
mov	ebx, [ebp+edi*4+0]
mov	[esp+9Ch+var_64], ebx
mov	esi, [esp+9Ch+digs]
sub	esi, [esp+9Ch+var_5C]
mov	[esp+9Ch+var_58], esi
cmp	[esp+9Ch+var_60], esi
jle	loc_64204D10
mov	esi, [esp+9Ch+var_58]
not	esi
add	esi, [esp+9Ch+var_60]
and	esi, 3
mov	eax, [esp+9Ch+var_64]
mov	u, [esp+9Ch+var_6C]
mul	dword ptr [ecx]
mov	ecx, eax
mov	ebx, edx
mov	eax, [esp+9Ch+var_80]
mov	edx, [eax]
xor	ebp, ebp
add	ecx, edx
adc	ebx, ebp
mov	eax, ecx
and	eax, 0FFFFFFFh
mov	edi, [esp+9Ch+var_80]
mov	[edi], eax
shrd	ecx, ebx, 1Ch
shr	ebx, 1Ch
mov	edx, [esp+9Ch+var_58]
inc	edx
mov	[esp+9Ch+var_68], edx
mov	edi, 4
cmp	[esp+9Ch+var_60], edx
jle	loc_64204B44
test	esi, esi
jz	loc_642049FB
cmp	esi, 1
jz	loc_6420499C
cmp	esi, 2
jz	short loc_6420494B
mov	eax, [esp+9Ch+var_64]
mov	edi, [esp+9Ch+var_6C]
mul	dword ptr [edi+4]
mov	[esp+9Ch+var_74], eax
mov	[esp+9Ch+var_70], edx
mov	edi, [esp+9Ch+var_80]
mov	ebx, [edi+4]
xor	ebp, ebp
add	[esp+9Ch+var_74], ebx
adc	[esp+9Ch+var_70], ebp
xor	esi, esi
add	[esp+9Ch+var_74], ecx
adc	[esp+9Ch+var_70], esi
mov	eax, [esp+9Ch+var_74]
and	eax, 0FFFFFFFh
mov	[edi+4], eax
mov	ecx, [esp+9Ch+var_74]
mov	ebx, [esp+9Ch+var_70]
shrd	ecx, ebx, 1Ch
shr	ebx, 1Ch
mov	edx, [esp+9Ch+var_58]
add	edx, 2
mov	[esp+9Ch+var_68], edx
mov	edi, 8
mov	eax, [esp+9Ch+var_64]
mov	ebx, [esp+9Ch+var_6C]
mul	dword ptr [ebx+edi]
mov	[esp+9Ch+var_74], eax
mov	[esp+9Ch+var_70], edx
mov	edx, [esp+9Ch+var_80]
mov	ebp, [edx+edi]
xor	esi, esi
add	[esp+9Ch+var_74], ebp
adc	[esp+9Ch+var_70], esi
xor	eax, eax
add	[esp+9Ch+var_74], ecx
adc	[esp+9Ch+var_70], eax
mov	ecx, [esp+9Ch+var_74]
and	ecx, 0FFFFFFFh
mov	[edx+edi], ecx
mov	ecx, [esp+9Ch+var_74]
mov	ebx, [esp+9Ch+var_70]
shrd	ecx, ebx, 1Ch
shr	ebx, 1Ch
inc	[esp+9Ch+var_68]
add	edi, 4
mov	eax, [esp+9Ch+var_64]
mov	esi, [esp+9Ch+var_6C]
mul	dword ptr [esi+edi]
mov	[esp+9Ch+var_74], eax
mov	[esp+9Ch+var_70], edx
mov	eax, [esp+9Ch+var_80]
mov	ebx, [eax+edi]
xor	ebp, ebp
add	[esp+9Ch+var_74], ebx
adc	[esp+9Ch+var_70], ebp
xor	esi, esi
add	[esp+9Ch+var_74], ecx
adc	[esp+9Ch+var_70], esi
mov	ecx, [esp+9Ch+var_74]
and	ecx, 0FFFFFFFh
mov	[eax+edi], ecx
mov	ecx, [esp+9Ch+var_74]
mov	ebx, [esp+9Ch+var_70]
shrd	ecx, ebx, 1Ch
shr	ebx, 1Ch
inc	[esp+9Ch+var_68]
add	edi, 4
mov	edx, [esp+9Ch+var_68]
cmp	[esp+9Ch+var_60], edx
jle	loc_64204B44
mov	[esp+9Ch+var_58], edi
mov	eax, [esp+9Ch+var_64]
mov	edi, [esp+9Ch+var_6C]
mov	ebx, [esp+9Ch+var_58]
mul	dword ptr [edi+ebx]
mov	edi, eax
mov	ebp, edx
mov	eax, [esp+9Ch+var_80]
mov	ebx, [eax+ebx]
xor	edx, edx
add	edi, ebx
adc	ebp, edx
xor	esi, esi
add	edi, ecx
adc	ebp, esi
mov	ecx, edi
and	ecx, 0FFFFFFFh
mov	edx, [esp+9Ch+var_58]
mov	[eax+edx], ecx
shrd	edi, ebp, 1Ch
shr	ebp, 1Ch
mov	ecx, edx
add	ecx, 4
mov	eax, [esp+9Ch+var_64]
mov	ebx, [esp+9Ch+var_6C]
mul	dword ptr [ebx+ecx]
mov	[esp+9Ch+var_74], eax
mov	[esp+9Ch+var_70], edx
mov	edx, [esp+9Ch+var_80]
mov	esi, [edx+ecx]
xor	eax, eax
add	[esp+9Ch+var_74], esi
adc	[esp+9Ch+var_70], eax
xor	ebp, ebp
add	[esp+9Ch+var_74], edi
adc	[esp+9Ch+var_70], ebp
mov	edi, [esp+9Ch+var_74]
and	edi, 0FFFFFFFh
mov	[edx+ecx], edi
mov	edi, [esp+9Ch+var_74]
mov	ebp, [esp+9Ch+var_70]
shrd	edi, ebp, 1Ch
shr	ebp, 1Ch
mov	ecx, [esp+9Ch+var_58]
add	ecx, 8
mov	eax, [esp+9Ch+var_64]
mov	ebx, [esp+9Ch+var_6C]
mul	dword ptr [ebx+ecx]
mov	[esp+9Ch+var_74], eax
mov	[esp+9Ch+var_70], edx
mov	edx, [esp+9Ch+var_80]
mov	esi, [edx+ecx]
xor	eax, eax
add	[esp+9Ch+var_74], esi
adc	[esp+9Ch+var_70], eax
xor	ebp, ebp
add	[esp+9Ch+var_74], edi
adc	[esp+9Ch+var_70], ebp
mov	edi, [esp+9Ch+var_74]
and	edi, 0FFFFFFFh
mov	[edx+ecx], edi
mov	edi, [esp+9Ch+var_74]
mov	ebp, [esp+9Ch+var_70]
shrd	edi, ebp, 1Ch
shr	ebp, 1Ch
mov	ecx, [esp+9Ch+var_58]
add	ecx, 0Ch
mov	eax, [esp+9Ch+var_64]
mov	ebx, [esp+9Ch+var_6C]
mul	dword ptr [ebx+ecx]
mov	[esp+9Ch+var_74], eax
mov	[esp+9Ch+var_70], edx
mov	edx, [esp+9Ch+var_80]
mov	esi, [edx+ecx]
xor	eax, eax
add	[esp+9Ch+var_74], esi
adc	[esp+9Ch+var_70], eax
xor	ebp, ebp
add	[esp+9Ch+var_74], edi
adc	[esp+9Ch+var_70], ebp
mov	ebx, [esp+9Ch+var_74]
and	ebx, 0FFFFFFFh
mov	[edx+ecx], ebx
mov	ecx, [esp+9Ch+var_74]
mov	ebx, [esp+9Ch+var_70]
shrd	ecx, ebx, 1Ch
shr	ebx, 1Ch
add	[esp+9Ch+var_68], 4
add	[esp+9Ch+var_58], 10h
mov	esi, [esp+9Ch+var_68]
cmp	[esp+9Ch+var_60], esi
jg	loc_642049FF
			
mov	ebp, [esp+9Ch+var_5C]
add	ebp, [esp+9Ch+var_44]
mov	esi, [esp+9Ch+var_80]
lea	eax, [esi+ebp*4]
mov	[tmpt],	ecx
inc	[esp+9Ch+var_5C]
sub	[esp+9Ch+var_6C], 4
mov	tmpt, [esp+9Ch+var_50]
cmp	[esp+9Ch+var_5C], eax
jnz	loc_64204860
mov	u, [esp+9Ch+var_4C]
test	ecx, ecx
jle	loc_64204D23
mov	ebx, [esp+9Ch+var_4C]
mov	u, [esp+9Ch+var_54]
mov	edx, [edi+ebx*4-4]
test	edx, edx
jnz	loc_64204CBC
mov	eax, [esp+9Ch+var_40]
lea	ebx, [eax-1]
lea	edx, ds:0[ebx*4]
add	edx, [esp+9Ch+t.dp]
mov	ecx, eax
and	ecx, 7
jz	loc_64204C46
mov	[esp+9Ch+var_4C], eax
test	eax, eax
jle	loc_64204D1F
mov	esi, [edx]
mov	eax, ebx
sub	edx, 4
test	esi, esi
jnz	loc_64204CB4
cmp	ecx, 1
jz	short loc_64204C46
cmp	ecx, 2
jz	short loc_64204C38
cmp	ecx, 3
jz	short loc_64204C2A
cmp	ecx, 4
jz	short loc_64204C18
cmp	ecx, 5
jz	short loc_64204C06
cmp	ecx, 6
jz	short loc_64204BF4
mov	[esp+9Ch+var_4C], ebx
mov	ebp, [edx]
dec	eax
sub	edx, 4
test	ebp, ebp
jnz	loc_64204CB4
mov	[esp+9Ch+var_4C], eax
mov	ebx, [edx]
dec	eax
sub	edx, 4
test	ebx, ebx
jnz	loc_64204CB4
mov	[esp+9Ch+var_4C], eax
mov	ecx, [edx]
dec	eax
sub	edx, 4
test	ecx, ecx
jnz	loc_64204CB4
mov	[esp+9Ch+var_4C], eax
mov	edi, [edx]
dec	eax
sub	edx, 4
test	edi, edi
jnz	loc_64204CB4
mov	[esp+9Ch+var_4C], eax
mov	esi, [edx]
dec	eax
sub	edx, 4
test	esi, esi
jnz	short loc_64204CB4
mov	[esp+9Ch+var_4C], eax
mov	ebp, [edx]
dec	eax
sub	edx, 4
test	ebp, ebp
jnz	short loc_64204CB4
			
mov	ecx, eax
test	eax, eax
jle	loc_64204D1B
lea	ebx, [eax-1]
mov	ebp, [edx]
test	ebp, ebp
jnz	short loc_64204CB0
mov	ecx, ebx
lea	ebx, [eax-2]
mov	edi, [edx-4]
test	edi, edi
jnz	short loc_64204CB0
mov	ecx, ebx
lea	ebx, [eax-3]
mov	esi, [edx-8]
test	esi, esi
jnz	short loc_64204CB0
mov	ecx, ebx
lea	ebx, [eax-4]
mov	ebp, [edx-0Ch]
test	ebp, ebp
jnz	short loc_64204CB0
mov	ecx, ebx
lea	ebx, [eax-5]
mov	edi, [edx-10h]
test	edi, edi
jnz	short loc_64204CB0
mov	ecx, ebx
lea	ebx, [eax-6]
mov	esi, [edx-14h]
test	esi, esi
jnz	short loc_64204CB0
mov	ecx, ebx
lea	ebx, [eax-7]
mov	ebp, [edx-18h]
test	ebp, ebp
jnz	short loc_64204CB0
mov	ecx, ebx
mov	ebx, [edx-1Ch]
sub	eax, 8
sub	edx, 20h
test	ebx, ebx
jz	short loc_64204C46
			
mov	[esp+9Ch+var_4C], ecx
			
mov	esi, [esp+9Ch+var_4C]
mov	[esp+9Ch+t.used], esi
			
lea	ebx, [esp+9Ch+var_3C]
lea	edx, [esp+9Ch+t]
mov	ebp, 4
mov	u, ebx
mov	esi, edx
mov	ecx, ebp
rep movsd
mov	edi, edx
mov	esi, [esp+9Ch+c]
mov	ecx, ebp
rep movsd
mov	edi, [esp+9Ch+c]
mov	c_0, ebx
mov	ecx, ebp
rep movsd
mov	[esp+9Ch+var_9C], edx 
call	_tma_mp_clear
xor	eax, eax
add	esp, 8Ch
pop	ebx
pop	esi
pop	c_0
pop	ebp
retn
mov	ecx, edx
cmp	ecx, 0FFh
jg	loc_642046CE
jmp	short loc_64204D38
mov	eax, [esp+9Ch+var_80]
xor	u, u
jmp	loc_64204B53
mov	[esp+9Ch+var_4C], eax
mov	[esp+9Ch+t.used], eax
mov	eax, [esp+9Ch+var_4C]
test	eax, eax
jnz	short loc_64204CBC
mov	[esp+9Ch+t.sign], 0
jmp	short loc_64204CBC
align 4
			
mov	eax, [esp+9Ch+digs]
mov	[esp+9Ch+var_90], eax 
mov	edx, [esp+9Ch+c]
mov	[esp+9Ch+var_94], edx 
mov	[esp+9Ch+var_98], b_0 
mov	[esp+9Ch+var_9C], a_0 
call	_fast_s_tma_mp_mul_high_digs
add	esp, 8Ch
pop	a_0
pop	b_0
pop	edi
pop	ebp
retn
align 4
dec	edx
or	edx, 0FFFFFFE0h
inc	edx
jmp	loc_642046E0
mov	eax, 0FFFFFFFEh
jmp	loc_64204CF5
public _fast_s_tma_mp_mul_digs
			
push	ebp
push	edi
push	esi
push	ebx
sub	esp, 85Ch
mov	edi, [esp+86Ch+a]
mov	ebp, [esp+86Ch+b]
mov	ebx, [esp+86Ch+digs]
mov	eax, [esp+86Ch+c]
cmp	[eax+4], ebx
jl	loc_64205393
mov	esi, [a_0]
mov	[esp+86Ch+var_82C], esi
mov	eax, [b_0+0]
mov	[esp+86Ch+var_830], eax
add	eax, esi
mov	[esp+86Ch+var_838], digs_0
cmp	digs_0,	eax
jle	short loc_64204DC6
mov	[esp+86Ch+var_838], eax
cmp	[esp+86Ch+var_838], 0
jle	loc_642053F3
mov	a_0, [a_0+0Ch]
mov	[esp+86Ch+var_824], edi
mov	esi, [b_0+0Ch]
mov	[esp+86Ch+var_828], esi
mov	[esp+86Ch+var_840], 1
mov	ecx, [esp+86Ch+var_830]
sub	[esp+86Ch+var_840], ecx
mov	edx, [esp+86Ch+var_840]
shl	edx, 2
mov	[esp+86Ch+var_83C], edx
mov	[esp+86Ch+var_844], 0
xor	b_0, b_0
xor	edi, edi
lea	eax, [esp+86Ch+W]
mov	[esp+86Ch+var_834], eax
mov	digs_0,	[esp+86Ch+var_830]
dec	ebx
mov	[esp+86Ch+var_820], ebx
mov	[esp+86Ch+var_854], ebp
mov	[esp+86Ch+var_850], edi
mov	edi, [esp+86Ch+var_844]
cmp	[esp+86Ch+var_830], edi
jle	loc_64205047
lea	esi, [esi+0]
mov	ecx, edi
xor	esi, esi
xor	ebx, ebx
mov	ebp, [esp+86Ch+var_82C]
sub	ebp, ebx
mov	[esp+86Ch+var_848], ebp
cmp	ty, ebp
jge	short loc_64204E4B
lea	ebx, [ty+1]
mov	[esp+86Ch+var_848], ebx
mov	eax, [esp+86Ch+var_848]
test	eax, eax
jle	loc_64204FF7
add	esi, [esp+86Ch+var_824]
mov	edx, [esp+86Ch+var_828]
lea	ebp, [edx+ty*4]
mov	edi, [esp+86Ch+var_848]
dec	edi
and	edi, 7
mov	ebx, [tmpx]
mov	eax, [tmpy+0]
mul	ebx
add	[esp+86Ch+var_854], eax
adc	[esp+86Ch+var_850], edx
lea	ebx, [tmpy-4]
mov	ty, 1
cmp	iz, [esp+86Ch+var_848]
jz	loc_64204FF7
test	edi, edi
jz	loc_64204F53
cmp	edi, 1
jz	loc_64204F34
cmp	edi, 2
jz	short loc_64204F1F
cmp	edi, 3
jz	short loc_64204F0A
cmp	edi, 4
jz	short loc_64204EF5
cmp	edi, 5
jz	short loc_64204EE0
cmp	edi, 6
jz	short loc_64204ECD
mov	edi, [tmpx+4]
mov	eax, [ebp-4]
mul	edi
add	[esp+86Ch+var_854], eax
adc	[esp+86Ch+var_850], edx
lea	tmpy, [ebp-8]
mov	iz, 2
mov	ebp, [tmpx+iz*4]
mov	eax, [tmpy]
mul	ebp
add	[esp+86Ch+var_854], eax
adc	[esp+86Ch+var_850], edx
sub	tmpy, 4
inc	iz
mov	ebp, [tmpx+iz*4]
mov	eax, [tmpy]
mul	ebp
mov	edi, eax
add	[esp+86Ch+var_854], edi
adc	[esp+86Ch+var_850], edx
sub	tmpy, 4
inc	iz
mov	ebp, [tmpx+iz*4]
mov	eax, [tmpy]
mul	ebp
mov	edi, eax
add	[esp+86Ch+var_854], edi
adc	[esp+86Ch+var_850], edx
sub	tmpy, 4
inc	iz
mov	ebp, [tmpx+iz*4]
mov	eax, [tmpy]
mul	ebp
mov	edi, eax
add	[esp+86Ch+var_854], edi
adc	[esp+86Ch+var_850], edx
sub	tmpy, 4
inc	iz
mov	ebp, [tmpx+iz*4]
mov	eax, [tmpy]
mul	ebp
mov	edi, eax
add	[esp+86Ch+var_854], edi
adc	[esp+86Ch+var_850], edx
sub	tmpy, 4
inc	iz
mov	ebp, [tmpx+iz*4]
mov	eax, [tmpy]
mul	ebp
mov	edi, eax
add	[esp+86Ch+var_854], edi
adc	[esp+86Ch+var_850], edx
sub	tmpy, 4
inc	iz
cmp	iz, [esp+86Ch+var_848]
jz	loc_64204FF7
			
mov	ebp, [tmpx+iz*4]
mov	eax, [tmpy]
mul	ebp
mov	edi, eax
add	[esp+86Ch+var_854], edi
adc	[esp+86Ch+var_850], edx
mov	ebp, [tmpx+iz*4+4]
mov	eax, [tmpy-4]
mul	ebp
mov	edi, eax
add	[esp+86Ch+var_854], edi
adc	[esp+86Ch+var_850], edx
mov	ebp, [tmpx+iz*4+8]
mov	eax, [tmpy-8]
mul	ebp
mov	edi, eax
add	[esp+86Ch+var_854], edi
adc	[esp+86Ch+var_850], edx
mov	ebp, [tmpx+iz*4+0Ch]
mov	eax, [tmpy-0Ch]
mul	ebp
mov	edi, eax
add	[esp+86Ch+var_854], edi
adc	[esp+86Ch+var_850], edx
mov	ebp, [tmpx+iz*4+10h]
mov	eax, [tmpy-10h]
mul	ebp
mov	edi, eax
add	[esp+86Ch+var_854], edi
adc	[esp+86Ch+var_850], edx
mov	ebp, [tmpx+iz*4+14h]
mov	eax, [tmpy-14h]
mul	ebp
mov	edi, eax
add	[esp+86Ch+var_854], edi
adc	[esp+86Ch+var_850], edx
mov	ebp, [tmpx+iz*4+18h]
mov	eax, [tmpy-18h]
mul	ebp
mov	edi, eax
add	[esp+86Ch+var_854], edi
adc	[esp+86Ch+var_850], edx
mov	ebp, [tmpx+iz*4+1Ch]
mov	eax, [tmpy-1Ch]
mul	ebp
add	[esp+86Ch+var_854], eax
adc	[esp+86Ch+var_850], edx
sub	tmpy, 20h
add	iz, 8
cmp	iz, [esp+86Ch+var_848]
jnz	loc_64204F53
			
mov	ty, [esp+86Ch+var_854]
and	ecx, 0FFFFFFFh
mov	edx, [esp+86Ch+var_844]
mov	tmpy, [esp+86Ch+var_834]
mov	[ebx+edx*4], ecx
inc	edx
mov	[esp+86Ch+var_844], edx
inc	[esp+86Ch+var_840]
add	[esp+86Ch+var_83C], 4
mov	tmpx, [esp+86Ch+var_838]
cmp	edx, esi
jz	short loc_64205058
mov	eax, [esp+86Ch+var_854]
mov	edx, [esp+86Ch+var_850]
shrd	eax, edx, 1Ch
shr	edx, 1Ch
mov	[esp+86Ch+var_854], eax
mov	[esp+86Ch+var_850], edx
mov	edi, [esp+86Ch+var_844]
cmp	[esp+86Ch+var_830], edi
jg	loc_64204E30
mov	ecx, [esp+86Ch+var_820]
mov	ebx, [esp+86Ch+var_840]
mov	esi, [esp+86Ch+var_83C]
jmp	loc_64204E36
mov	edx, [esp+86Ch+c]
mov	ebp, [edx]
mov	esi, [esp+86Ch+var_838]
mov	[edx], esi
mov	ebx, [edx+0Ch]
mov	ecx, [esp+86Ch+var_838]
and	ecx, 7
mov	eax, [esp+86Ch+var_834]
mov	edi, [eax]
mov	[ebx], edi
lea	edx, [ebx+4]
mov	eax, 1
cmp	[esp+86Ch+var_838], 1
jl	loc_64205160
test	ecx, ecx
jz	loc_64205117
cmp	ecx, 1
jz	short loc_64205104
cmp	ecx, 2
jz	short loc_642050F7
cmp	ecx, 3
jz	short loc_642050EA
cmp	ecx, 4
jz	short loc_642050DD
cmp	ecx, 5
jz	short loc_642050D0
cmp	ecx, 6
jz	short loc_642050C3
mov	esi, [esp+86Ch+var_834]
mov	ix, [esi+4]
mov	[tmpc],	eax
lea	tmpc, [ebx+8]
mov	eax, 2
mov	edi, [esp+86Ch+var_834]
mov	ecx, [edi+ix*4]
mov	[tmpc],	ecx
add	tmpc, 4
inc	ix
mov	ecx, [esp+86Ch+var_834]
mov	esi, [ecx+ix*4]
mov	[tmpc],	esi
add	tmpc, 4
inc	ix
mov	esi, [esp+86Ch+var_834]
mov	edi, [esi+ix*4]
mov	[tmpc],	edi
add	tmpc, 4
inc	ix
mov	edi, [esp+86Ch+var_834]
mov	ecx, [edi+ix*4]
mov	[tmpc],	ecx
add	tmpc, 4
inc	ix
mov	esi, [esp+86Ch+var_834]
mov	ecx, [esi+ix*4]
mov	[tmpc],	ecx
add	tmpc, 4
inc	ix
mov	edi, [esp+86Ch+var_834]
mov	ecx, [edi+ix*4]
mov	[tmpc],	ecx
add	tmpc, 4
inc	ix
cmp	[esp+86Ch+var_838], ix
jl	short loc_64205160
mov	edi, [esp+86Ch+var_838]
mov	ecx, [esp+86Ch+var_834]
nop
mov	esi, [ecx+ix*4]
mov	[tmpc],	esi
mov	esi, [ecx+ix*4+4]
mov	[tmpc+4], esi
mov	esi, [ecx+ix*4+8]
mov	[tmpc+8], esi
mov	esi, [ecx+ix*4+0Ch]
mov	[tmpc+0Ch], esi
mov	esi, [ecx+ix*4+10h]
mov	[tmpc+10h], esi
mov	esi, [ecx+ix*4+14h]
mov	[tmpc+14h], esi
mov	esi, [ecx+ix*4+18h]
mov	[tmpc+18h], esi
mov	esi, [ecx+ix*4+1Ch]
mov	[tmpc+1Ch], esi
add	tmpc, 20h
add	ix, 8
cmp	pa, ix
jge	short loc_64205120
			
cmp	ix, olduse
jge	loc_64205234
mov	pa, ix
not	edi
add	edi, olduse
and	edi, 7
mov	dword ptr [tmpc], 0
lea	ecx, [tmpc+4]
lea	esi, [ix+1]
cmp	ix, olduse
jge	loc_64205234
test	edi, edi
jz	short loc_642051F3
cmp	edi, 1
jz	short loc_642051E5
cmp	edi, 2
jz	short loc_642051DB
cmp	edi, 3
jz	short loc_642051D1
cmp	edi, 4
jz	short loc_642051C7
cmp	edi, 5
jz	short loc_642051BD
cmp	edi, 6
jz	short loc_642051B3
mov	dword ptr [tmpc], 0
lea	tmpc, [edx+8]
lea	ix, [eax+2]
mov	dword ptr [tmpc], 0
add	tmpc, 4
inc	ix
mov	dword ptr [tmpc], 0
add	tmpc, 4
inc	ix
mov	dword ptr [tmpc], 0
add	tmpc, 4
inc	ix
mov	dword ptr [tmpc], 0
add	tmpc, 4
inc	ix
mov	dword ptr [tmpc], 0
add	tmpc, 4
inc	ix
mov	dword ptr [tmpc], 0
add	tmpc, 4
inc	ix
cmp	ix, olduse
jge	short loc_64205234
			
mov	dword ptr [tmpc], 0
mov	dword ptr [tmpc+4], 0
mov	dword ptr [tmpc+8], 0
mov	dword ptr [tmpc+0Ch], 0
mov	dword ptr [tmpc+10h], 0
mov	dword ptr [tmpc+14h], 0
mov	dword ptr [tmpc+18h], 0
mov	dword ptr [tmpc+1Ch], 0
add	tmpc, 20h
add	ix, 8
cmp	ix, olduse
jl	short loc_642051F3
			
cmp	[esp+86Ch+var_838], 0
jle	loc_64205360
mov	eax, [esp+86Ch+var_838]
dec	pa
cmp	dword ptr [ebx+pa*4], 0
jnz	loc_64205410
mov	olduse,	[esp+86Ch+var_838]
lea	edx, ds:0FFFFFFF8h[ebp*4]
mov	tmpc, pa
and	ecx, 7
jz	loc_642052F9
mov	[esp+86Ch+var_838], pa
test	pa, pa
jle	loc_64205357
mov	ebp, [ebx+edx]
sub	edx, 4
test	ebp, ebp
jnz	loc_64205386
lea	eax, [eax-1]
cmp	ecx, 1
jz	short loc_642052F9
cmp	ecx, 2
jz	short loc_642052EA
cmp	ecx, 3
jz	short loc_642052DB
cmp	ecx, 4
jz	short loc_642052CC
cmp	ecx, 5
jz	short loc_642052BD
cmp	ecx, 6
jz	short loc_642052AE
mov	ecx, [ebx+edx]
sub	edx, 4
test	ecx, ecx
jnz	loc_64205386
dec	pa
mov	edi, [ebx+edx]
sub	edx, 4
test	edi, edi
jnz	loc_64205386
dec	pa
mov	ebp, [ebx+edx]
sub	edx, 4
test	ebp, ebp
jnz	loc_64205386
dec	pa
mov	ix, [ebx+edx]
sub	edx, 4
test	esi, esi
jnz	loc_64205386
dec	pa
mov	ecx, [ebx+edx]
sub	edx, 4
test	ecx, ecx
jnz	loc_64205386
dec	pa
mov	edi, [ebx+edx]
sub	edx, 4
test	edi, edi
jnz	loc_64205386
dec	pa
			
mov	[esp+86Ch+var_838], pa
test	pa, pa
jle	short loc_64205357
mov	edi, [ebx+edx]
test	edi, edi
jnz	short loc_64205386
lea	ecx, [pa-1]
mov	pa, ecx
cmp	dword ptr [ebx+edx-4], 0
jnz	short loc_64205386
dec	pa
cmp	dword ptr [ebx+edx-8], 0
jnz	short loc_64205386
lea	pa, [ecx-2]
cmp	dword ptr [ebx+edx-0Ch], 0
jnz	short loc_64205386
lea	pa, [ecx-3]
cmp	dword ptr [ebx+edx-10h], 0
jnz	short loc_64205386
lea	pa, [ecx-4]
cmp	dword ptr [ebx+edx-14h], 0
jnz	short loc_64205386
lea	pa, [ecx-5]
cmp	dword ptr [ebx+edx-18h], 0
jnz	short loc_64205386
lea	pa, [ecx-6]
mov	ebp, [ebx+edx-1Ch]
sub	edx, 20h
test	ebp, ebp
jnz	short loc_64205386
lea	pa, [ecx-7]
jmp	short loc_642052F9
			
mov	ecx, [esp+86Ch+c]
mov	[ecx], pa
cmp	[esp+86Ch+var_838], 0
jnz	loc_64205410
mov	eax, [esp+86Ch+c]
mov	dword ptr [eax+8], 0
xor	eax, eax
			
add	esp, 85Ch
pop	ebx
pop	ix
pop	pa
pop	olduse
retn
			
mov	ebx, [esp+86Ch+c]
mov	[ebx], pa
xor	pa, pa
jmp	short loc_6420537B
lea	esi, [digs_0+40h]
mov	edx, 20h
mov	eax, digs_0
mov	ecx, edx
cdq
idiv	ecx
sub	esi, edx
lea	eax, ds:0[esi*4]
mov	[esp+86Ch+var_868], eax	
mov	edx, [esp+86Ch+c]
mov	ecx, [edx+0Ch]
mov	[esp+86Ch+var_86C], ecx	
call	_realloc
mov	edx, eax
mov	eax, 0FFFFFFFEh
test	edx, edx
jz	short loc_6420537B
mov	ecx, [esp+86Ch+c]
mov	[ecx+0Ch], edx
mov	res, [ecx+4]
mov	[ecx+4], esi
lea	edx, [edx+eax*4]
cmp	esi, eax
jle	loc_64204DAB
mov	dword ptr [edx], 0
inc	eax
add	edx, 4
jmp	short loc_642053DF
mov	eax, [esp+86Ch+c]
mov	b_0, [eax]
mov	a_0, [esp+86Ch+var_838]
mov	[eax], edi
mov	digs_0,	[eax+0Ch]
jz	short loc_64205417
mov	edx, ebx
xor	eax, eax
jmp	loc_64205160
			
xor	pa, pa
jmp	loc_6420537B
lea	edx, [esp+86Ch+W]
mov	[esp+86Ch+var_834], edx
jmp	loc_6420506A
public _s_tma_mp_mul_digs
			
push	ebp
push	edi
push	esi
push	ebx
sub	esp, 7Ch
mov	esi, [esp+8Ch+a]
mov	ebx, [esp+8Ch+b]
cmp	[esp+8Ch+digs],	1FFh
jg	short loc_6420545D
mov	edx, [b_0]
mov	eax, [a_0]
cmp	eax, edx
jg	loc_64205A80
cmp	eax, 0FFh
jle	loc_64205AA4
			
mov	edi, [esp+8Ch+digs]
add	edi, 40h
mov	eax, [esp+8Ch+digs]
and	eax, 8000001Fh
js	loc_64205AD0
sub	edi, eax
lea	ecx, ds:0[edi*4]
mov	[esp+8Ch+var_8C], ecx 
call	_malloc
mov	[esp+8Ch+var_48], eax
test	eax, eax
jz	loc_64205ADA
test	edi, edi
jle	loc_64205586
lea	edx, [edi-1]
and	edx, 7
mov	ebp, [esp+8Ch+var_48]
mov	dword ptr [ebp+0], 0
mov	eax, 1
cmp	eax, edi
jz	loc_64205586
test	edx, edx
jz	short loc_6420553C
cmp	edx, 1
jz	short loc_6420552C
cmp	edx, 2
jz	short loc_6420551F
cmp	edx, 3
jz	short loc_64205513
cmp	edx, 4
jz	short loc_64205507
cmp	edx, 5
jz	short loc_642054FA
cmp	edx, 6
jz	short loc_642054EE
mov	ecx, [esp+8Ch+var_48]
mov	dword ptr [ecx+eax*4], 0
mov	eax, 2
mov	edx, [esp+8Ch+var_48]
mov	dword ptr [edx+eax*4], 0
inc	eax
mov	ebp, [esp+8Ch+var_48]
mov	dword ptr [ebp+eax*4+0], 0
inc	eax
mov	ecx, [esp+8Ch+var_48]
mov	dword ptr [ecx+eax*4], 0
inc	eax
mov	edx, [esp+8Ch+var_48]
mov	dword ptr [edx+eax*4], 0
inc	eax
mov	ebp, [esp+8Ch+var_48]
mov	dword ptr [ebp+eax*4+0], 0
inc	eax
mov	ecx, [esp+8Ch+var_48]
mov	dword ptr [ecx+eax*4], 0
inc	eax
cmp	eax, edi
jz	short loc_64205586
mov	edx, [esp+8Ch+var_48]
mov	dword ptr [edx+eax*4], 0
mov	dword ptr [edx+eax*4+4], 0
mov	dword ptr [edx+eax*4+8], 0
mov	dword ptr [edx+eax*4+0Ch], 0
mov	dword ptr [edx+eax*4+10h], 0
mov	dword ptr [edx+eax*4+14h], 0
mov	dword ptr [edx+eax*4+18h], 0
mov	dword ptr [edx+eax*4+1Ch], 0
add	eax, 8
cmp	eax, edi
jnz	short loc_64205540
			
mov	eax, [esp+8Ch+var_48]
mov	[esp+8Ch+t.dp],	eax
mov	[esp+8Ch+t.alloc], edi
mov	[esp+8Ch+t.sign], 0
mov	ebp, [esp+8Ch+digs]
mov	[esp+8Ch+t.used], ebp
mov	edx, [a_0]
mov	[esp+8Ch+var_44], edx
test	edx, edx
jle	loc_642058D1
mov	edi, [b_0]
mov	[esp+8Ch+var_4C], edi
mov	a_0, [a_0+0Ch]
mov	[esp+8Ch+var_40], esi
mov	ecx, [b_0+0Ch]
mov	[esp+8Ch+var_58], ecx
mov	[esp+8Ch+var_50], 0
mov	[esp+8Ch+var_70], eax
nop
mov	eax, [esp+8Ch+digs]
sub	eax, [esp+8Ch+var_50]
mov	tmpt, [esp+8Ch+var_4C]
mov	[esp+8Ch+var_54], ebx
cmp	ebx, eax
jle	short loc_642055EF
mov	[esp+8Ch+var_54], eax
mov	edx, [esp+8Ch+var_50]
mov	eax, [esp+8Ch+var_40]
mov	esi, [eax+edx*4]
mov	[esp+8Ch+var_5C], esi
mov	ebx, [esp+8Ch+var_70]
mov	iy, [esp+8Ch+var_54]
test	edi, edi
jle	loc_64205A90
mov	esi, [esp+8Ch+var_54]
dec	esi
and	esi, 3
mov	eax, [esp+8Ch+var_5C]
mov	u, [esp+8Ch+var_58]
mul	dword ptr [ecx]
mov	ecx, eax
mov	tmpt, edx
mov	edx, [esp+8Ch+var_70]
mov	ebp, [edx]
xor	eax, eax
add	ecx, ebp
adc	ebx, eax
mov	ebp, ecx
and	ebp, 0FFFFFFFh
xor	edx, edx
mov	edi, [esp+8Ch+var_70]
mov	[edi+edx*4], ebp
shrd	ecx, ebx, 1Ch
shr	ebx, 1Ch
mov	edi, 1
cmp	iy, [esp+8Ch+var_54]
jz	loc_642058A1
test	esi, esi
jz	loc_6420575B
cmp	esi, 1
jz	loc_64205706
cmp	esi, 2
jz	short loc_642056BB
mov	eax, [esp+8Ch+var_5C]
mov	iy, [esp+8Ch+var_58]
mul	dword ptr [edi+4]
mov	[esp+8Ch+var_64], eax
mov	[esp+8Ch+var_60], edx
mov	edx, [esp+8Ch+var_70]
mov	ebx, [edx+4]
xor	esi, esi
add	[esp+8Ch+var_64], ebx
adc	[esp+8Ch+var_60], esi
xor	ebp, ebp
add	[esp+8Ch+var_64], ecx
adc	[esp+8Ch+var_60], ebp
mov	eax, [esp+8Ch+var_64]
and	eax, 0FFFFFFFh
mov	[edx+4], eax
mov	ecx, [esp+8Ch+var_64]
mov	ebx, [esp+8Ch+var_60]
shrd	ecx, ebx, 1Ch
shr	ebx, 1Ch
mov	edi, 2
mov	eax, [esp+8Ch+var_5C]
mov	ebx, [esp+8Ch+var_58]
mul	dword ptr [ebx+iy*4]
mov	[esp+8Ch+var_64], eax
mov	[esp+8Ch+var_60], edx
mov	eax, [esp+8Ch+var_70]
mov	esi, [eax+iy*4]
xor	ebp, ebp
add	[esp+8Ch+var_64], esi
adc	[esp+8Ch+var_60], ebp
xor	edx, edx
add	[esp+8Ch+var_64], ecx
adc	[esp+8Ch+var_60], edx
mov	ecx, [esp+8Ch+var_64]
and	ecx, 0FFFFFFFh
mov	[eax+iy*4], ecx
mov	ecx, [esp+8Ch+var_64]
mov	ebx, [esp+8Ch+var_60]
shrd	ecx, ebx, 1Ch
shr	ebx, 1Ch
inc	iy
mov	eax, [esp+8Ch+var_5C]
mov	ebx, [esp+8Ch+var_58]
mul	dword ptr [ebx+iy*4]
mov	[esp+8Ch+var_64], eax
mov	[esp+8Ch+var_60], edx
mov	eax, [esp+8Ch+var_70]
mov	esi, [eax+iy*4]
xor	ebp, ebp
add	[esp+8Ch+var_64], esi
adc	[esp+8Ch+var_60], ebp
xor	edx, edx
add	[esp+8Ch+var_64], ecx
adc	[esp+8Ch+var_60], edx
mov	ecx, [esp+8Ch+var_64]
and	ecx, 0FFFFFFFh
mov	[eax+iy*4], ecx
mov	ecx, [esp+8Ch+var_64]
mov	ebx, [esp+8Ch+var_60]
shrd	ecx, ebx, 1Ch
shr	ebx, 1Ch
inc	iy
cmp	iy, [esp+8Ch+var_54]
jz	loc_642058A1
mov	[esp+8Ch+var_74], iy
mov	eax, [esp+8Ch+var_5C]
mov	ebx, [esp+8Ch+var_74]
mov	iy, [esp+8Ch+var_58]
mul	dword ptr [edi+ebx*4]
mov	edi, eax
mov	ebp, edx
mov	eax, [esp+8Ch+var_70]
mov	edx, [eax+ebx*4]
xor	esi, esi
add	edi, edx
adc	ebp, esi
xor	ebx, ebx
add	edi, ecx
adc	ebp, ebx
mov	ecx, edi
and	ecx, 0FFFFFFFh
mov	edx, [esp+8Ch+var_74]
mov	[eax+edx*4], ecx
shrd	edi, ebp, 1Ch
shr	ebp, 1Ch
mov	ecx, edx
inc	ecx
mov	eax, [esp+8Ch+var_5C]
mov	esi, [esp+8Ch+var_58]
mul	dword ptr [esi+ecx*4]
mov	[esp+8Ch+var_64], eax
mov	[esp+8Ch+var_60], edx
mov	eax, [esp+8Ch+var_70]
mov	ebx, [eax+ecx*4]
xor	edx, edx
add	[esp+8Ch+var_64], ebx
adc	[esp+8Ch+var_60], edx
xor	ebp, ebp
add	[esp+8Ch+var_64], edi
adc	[esp+8Ch+var_60], ebp
mov	edi, [esp+8Ch+var_64]
and	edi, 0FFFFFFFh
mov	[eax+ecx*4], edi
mov	edi, [esp+8Ch+var_64]
mov	ebp, [esp+8Ch+var_60]
shrd	edi, ebp, 1Ch
shr	ebp, 1Ch
mov	ecx, [esp+8Ch+var_74]
add	iy, 2
mov	eax, [esp+8Ch+var_5C]
mov	esi, [esp+8Ch+var_58]
mul	dword ptr [esi+iy*4]
mov	[esp+8Ch+var_64], eax
mov	[esp+8Ch+var_60], edx
mov	eax, [esp+8Ch+var_70]
mov	ebx, [eax+iy*4]
xor	edx, edx
add	[esp+8Ch+var_64], ebx
adc	[esp+8Ch+var_60], edx
xor	ebp, ebp
add	[esp+8Ch+var_64], edi
adc	[esp+8Ch+var_60], ebp
mov	edi, [esp+8Ch+var_64]
and	edi, 0FFFFFFFh
mov	[eax+iy*4], edi
mov	edi, [esp+8Ch+var_64]
mov	ebp, [esp+8Ch+var_60]
shrd	edi, ebp, 1Ch
shr	ebp, 1Ch
mov	iy, [esp+8Ch+var_74]
add	iy, 3
mov	eax, [esp+8Ch+var_5C]
mov	esi, [esp+8Ch+var_58]
mul	dword ptr [esi+iy*4]
mov	[esp+8Ch+var_64], eax
mov	[esp+8Ch+var_60], edx
mov	eax, [esp+8Ch+var_70]
mov	ebx, [eax+iy*4]
xor	edx, edx
add	[esp+8Ch+var_64], ebx
adc	[esp+8Ch+var_60], edx
xor	ebp, ebp
add	[esp+8Ch+var_64], edi
adc	[esp+8Ch+var_60], ebp
mov	esi, [esp+8Ch+var_64]
and	esi, 0FFFFFFFh
mov	[eax+iy*4], esi
mov	iy, [esp+8Ch+var_64]
mov	ebx, [esp+8Ch+var_60]
shrd	ecx, ebx, 1Ch
shr	ebx, 1Ch
add	[esp+8Ch+var_74], 4
mov	ebx, [esp+8Ch+var_54]
cmp	[esp+8Ch+var_74], ebx
jnz	loc_6420575F
mov	edi, [esp+8Ch+var_74]
			
mov	ebp, [esp+8Ch+var_70]
lea	ebx, [ebp+iy*4+0]
mov	eax, iy
add	iy, [esp+8Ch+var_50]
cmp	[esp+8Ch+digs],	eax
jle	short loc_642058BA
mov	[tmpt],	ecx
inc	[esp+8Ch+var_50]
add	[esp+8Ch+var_70], 4
mov	eax, [esp+8Ch+var_44]
cmp	[esp+8Ch+var_50], eax
jnz	loc_642055D4
mov	ecx, [esp+8Ch+digs]
test	ecx, ecx
jle	loc_64205A2A
mov	edx, [esp+8Ch+digs]
dec	edx
mov	tmpt, [esp+8Ch+var_48]
mov	esi, [ebx+digs_0*4]
test	esi, esi
jnz	loc_64205A3D
mov	iy, [esp+8Ch+digs]
lea	eax, ds:0FFFFFFF8h[edi*4]
add	eax, [esp+8Ch+t.dp]
mov	ecx, digs_0
and	ecx, 7
jz	loc_642059A5
mov	[esp+8Ch+digs],	digs_0
test	digs_0,	digs_0
jle	loc_64205A26
mov	ebp, [eax]
sub	eax, 4
test	ebp, ebp
jnz	loc_64205A9C
lea	edx, [edx-1]
cmp	ecx, 1
jz	short loc_642059A5
cmp	ecx, 2
jz	short loc_64205997
cmp	ecx, 3
jz	short loc_64205989
cmp	ecx, 4
jz	short loc_6420597B
cmp	ecx, 5
jz	short loc_6420596D
cmp	ecx, 6
jz	short loc_6420595F
mov	ecx, [eax]
sub	eax, 4
test	ecx, ecx
jnz	loc_64205A9C
dec	digs_0
mov	esi, [eax]
sub	eax, 4
test	esi, esi
jnz	loc_64205A9C
dec	digs_0
mov	edi, [eax]
sub	eax, 4
test	edi, edi
jnz	loc_64205A9C
dec	digs_0
mov	ebp, [eax]
sub	eax, 4
test	ebp, ebp
jnz	loc_64205A9C
dec	digs_0
mov	ebx, [eax]
sub	eax, 4
test	ebx, ebx
jnz	loc_64205A9C
dec	digs_0
mov	ecx, [eax]
sub	eax, 4
test	ecx, ecx
jnz	loc_64205A9C
dec	digs_0
			
test	digs_0,	digs_0
jle	short loc_64205A1F
mov	ebp, [eax]
test	ebp, ebp
jnz	loc_64205A9C
lea	ecx, [digs_0-1]
mov	digs_0,	ecx
mov	esi, [eax-4]
test	esi, esi
jnz	loc_64205A9C
dec	digs_0
mov	esi, [eax-8]
test	esi, esi
jnz	loc_64205A9C
lea	digs_0,	[ecx-2]
mov	edi, [eax-0Ch]
test	edi, edi
jnz	loc_64205A9C
lea	digs_0,	[ecx-3]
mov	ebp, [eax-10h]
test	ebp, ebp
jnz	loc_64205A9C
lea	digs_0,	[ecx-4]
mov	ebx, [eax-14h]
test	ebx, ebx
jnz	loc_64205A9C
lea	digs_0,	[ecx-5]
mov	esi, [eax-18h]
test	esi, esi
jnz	loc_64205A9C
lea	digs_0,	[ecx-6]
mov	edi, [eax-1Ch]
sub	eax, 20h
test	edi, edi
jnz	loc_64205A9C
lea	digs_0,	[ecx-7]
test	digs_0,	digs_0
jg	short loc_642059A9
mov	[esp+8Ch+digs],	digs_0
mov	[esp+8Ch+t.used], edx
mov	edx, [esp+8Ch+digs]
test	edx, edx
jnz	short loc_64205A3D
mov	[esp+8Ch+t.sign], 0
			
lea	tmpt, [esp+8Ch+var_3C]
lea	ebp, [esp+8Ch+t]
mov	eax, 4
mov	iy, ebx
mov	esi, ebp
mov	ecx, eax
rep movsd
mov	edi, ebp
mov	esi, [esp+8Ch+c]
mov	ecx, eax
rep movsd
mov	edi, [esp+8Ch+c]
mov	c_0, ebx
mov	ecx, eax
rep movsd
mov	[esp+8Ch+var_8C], ebp 
call	_tma_mp_clear
xor	eax, eax
add	esp, 7Ch
pop	ebx
pop	esi
pop	c_0
pop	ebp
retn
align 10h
mov	eax, edx
cmp	eax, 0FFh
jg	loc_6420545D
jmp	short loc_64205AA4
align 10h
xor	u, u
xor	eax, eax
jmp	loc_642058AB
align 4
			
mov	[esp+8Ch+t.used], digs_0
jmp	short loc_64205A3D
align 4
			
mov	eax, [esp+8Ch+digs]
mov	[esp+8Ch+var_80], eax 
mov	edx, [esp+8Ch+c]
mov	[esp+8Ch+var_84], edx 
mov	[esp+8Ch+var_88], b_0 
mov	[esp+8Ch+var_8C], a_0 
call	_fast_s_tma_mp_mul_digs
add	esp, 7Ch
pop	b_0
pop	a_0
pop	edi
pop	ebp
retn
align 10h
dec	eax
or	eax, 0FFFFFFE0h
inc	eax
jmp	loc_64205479
mov	eax, 0FFFFFFFEh
jmp	short loc_64205A76
align 4
public _tma_mp_div_2
			
push	ebp
push	edi
push	esi
push	ebx
sub	esp, 4Ch
mov	edx, [esp+5Ch+a]
mov	eax, [edx]
mov	ecx, [esp+5Ch+b]
cmp	[ecx+4], x
jl	loc_6420607C
mov	edi, [esp+5Ch+b]
mov	edx, [edi]
mov	[esp+5Ch+var_2C], edx
mov	esi, [esp+5Ch+b]
mov	[esi], x
mov	ebx, [esp+5Ch+a]
mov	edi, [ebx+0Ch]
lea	ecx, [x-1]
lea	edx, ds:0[x*4]
mov	[esp+5Ch+var_28], edx
mov	ebx, [esi+0Ch]
test	eax, eax
jle	loc_64205E05
add	edi, edx
lea	esi, [ebx+edx]
mov	ebp, ecx
and	ebp, 7
mov	[esp+5Ch+var_34], ebp
mov	edx, [tmpa]
mov	[esp+5Ch+var_38], edx
shr	edx, 1
mov	[tmpb],	edx
mov	[esp+5Ch+var_40], 1
mov	edx, 0FFFFFFFCh
mov	ebp, [esp+5Ch+var_38]
and	ebp, 1
mov	[esp+5Ch+var_38], ebp
cmp	x, 1
jz	loc_64205E05
mov	ebp, [esp+5Ch+var_34]
test	ebp, ebp
jz	loc_64206058
cmp	[esp+5Ch+var_34], 1
jz	loc_64205CE7
cmp	[esp+5Ch+var_34], 2
jz	loc_64205CB2
cmp	[esp+5Ch+var_34], 3
jz	loc_64205C7D
cmp	[esp+5Ch+var_34], 4
jz	loc_64205C48
cmp	[esp+5Ch+var_34], 5
jz	short loc_64205C13
cmp	[esp+5Ch+var_34], 6
jz	short loc_64205BDE
mov	edx, [tmpa-4]
mov	[esp+5Ch+var_34], edx
mov	edx, [esp+5Ch+var_38]
shl	edx, 1Bh
mov	ebp, [esp+5Ch+var_34]
shr	ebp, 1
or	edx, ebp
mov	[tmpb-4], edx
mov	[esp+5Ch+var_40], 2
mov	edx, 0FFFFFFF8h
mov	ebp, [esp+5Ch+var_34]
and	ebp, 1
mov	[esp+5Ch+var_38], ebp
mov	ebp, [tmpa+edx]
mov	[esp+5Ch+var_34], ebp
mov	ebp, [esp+5Ch+var_38]
shl	ebp, 1Bh
mov	[esp+5Ch+var_38], ebp
mov	ebp, [esp+5Ch+var_34]
shr	ebp, 1
or	[esp+5Ch+var_38], ebp
mov	ebp, [esp+5Ch+var_38]
mov	[tmpb+edx], ebp
inc	[esp+5Ch+var_40]
sub	edx, 4
mov	ebp, [esp+5Ch+var_34]
and	ebp, 1
mov	[esp+5Ch+var_38], ebp
mov	ebp, [tmpa+edx]
mov	[esp+5Ch+var_34], ebp
mov	ebp, [esp+5Ch+var_38]
shl	ebp, 1Bh
mov	[esp+5Ch+var_38], ebp
mov	ebp, [esp+5Ch+var_34]
shr	ebp, 1
or	[esp+5Ch+var_38], ebp
mov	ebp, [esp+5Ch+var_38]
mov	[tmpb+edx], ebp
inc	[esp+5Ch+var_40]
sub	edx, 4
mov	ebp, [esp+5Ch+var_34]
and	ebp, 1
mov	[esp+5Ch+var_38], ebp
mov	ebp, [tmpa+edx]
mov	[esp+5Ch+var_34], ebp
mov	ebp, [esp+5Ch+var_38]
shl	ebp, 1Bh
mov	[esp+5Ch+var_38], ebp
mov	ebp, [esp+5Ch+var_34]
shr	ebp, 1
or	[esp+5Ch+var_38], ebp
mov	ebp, [esp+5Ch+var_38]
mov	[tmpb+edx], ebp
inc	[esp+5Ch+var_40]
sub	edx, 4
mov	ebp, [esp+5Ch+var_34]
and	ebp, 1
mov	[esp+5Ch+var_38], ebp
mov	ebp, [tmpa+edx]
mov	[esp+5Ch+var_34], ebp
mov	ebp, [esp+5Ch+var_38]
shl	ebp, 1Bh
mov	[esp+5Ch+var_38], ebp
mov	ebp, [esp+5Ch+var_34]
shr	ebp, 1
or	[esp+5Ch+var_38], ebp
mov	ebp, [esp+5Ch+var_38]
mov	[tmpb+edx], ebp
inc	[esp+5Ch+var_40]
sub	edx, 4
mov	ebp, [esp+5Ch+var_34]
and	ebp, 1
mov	[esp+5Ch+var_38], ebp
mov	ebp, [tmpa+edx]
mov	[esp+5Ch+var_34], ebp
mov	ebp, [esp+5Ch+var_38]
shl	ebp, 1Bh
mov	[esp+5Ch+var_38], ebp
mov	ebp, [esp+5Ch+var_34]
shr	ebp, 1
or	[esp+5Ch+var_38], ebp
mov	ebp, [esp+5Ch+var_38]
mov	[tmpb+edx], ebp
inc	[esp+5Ch+var_40]
sub	edx, 4
mov	ebp, [esp+5Ch+var_34]
and	ebp, 1
mov	[esp+5Ch+var_38], ebp
mov	ebp, [tmpa+edx]
mov	[esp+5Ch+var_34], ebp
mov	ebp, [esp+5Ch+var_38]
shl	ebp, 1Bh
mov	[esp+5Ch+var_38], ebp
mov	ebp, [esp+5Ch+var_34]
shr	ebp, 1
or	[esp+5Ch+var_38], ebp
mov	ebp, [esp+5Ch+var_38]
mov	[tmpb+edx], ebp
inc	[esp+5Ch+var_40]
sub	edx, 4
mov	ebp, [esp+5Ch+var_34]
and	ebp, 1
mov	[esp+5Ch+var_38], ebp
cmp	x, [esp+5Ch+var_40]
jz	loc_64205E05
mov	[esp+5Ch+var_30], x
mov	[esp+5Ch+var_24], ecx
mov	[esp+5Ch+var_20], ebx
mov	ecx, [esp+5Ch+var_40]
mov	[esp+5Ch+var_34], ecx
mov	ecx, [esp+5Ch+var_38]
			
mov	x, [tmpa+edx]
shl	r, 1Bh
mov	ebx, eax
shr	ebx, 1
or	ecx, ebx
mov	[tmpb+edx], ecx
lea	ebx, [edx-4]
and	eax, 1
mov	ecx, [tmpa+ebx]
shl	eax, 1Bh
mov	ebp, ecx
shr	ebp, 1
or	eax, ebp
mov	[tmpb+ebx], eax
lea	ebx, [edx-8]
and	ecx, 1
mov	eax, [tmpa+ebx]
shl	ecx, 1Bh
mov	ebp, eax
shr	ebp, 1
or	ecx, ebp
mov	[tmpb+ebx], ecx
lea	ebx, [edx-0Ch]
and	eax, 1
mov	ecx, [tmpa+ebx]
shl	eax, 1Bh
mov	ebp, ecx
shr	ebp, 1
or	eax, ebp
mov	[tmpb+ebx], eax
lea	ebx, [edx-10h]
and	ecx, 1
mov	eax, [tmpa+ebx]
shl	ecx, 1Bh
mov	ebp, eax
shr	ebp, 1
or	ecx, ebp
mov	[tmpb+ebx], ecx
lea	ebx, [edx-14h]
and	eax, 1
mov	ecx, [tmpa+ebx]
shl	eax, 1Bh
mov	ebp, ecx
shr	ebp, 1
or	eax, ebp
mov	[tmpb+ebx], eax
lea	ebx, [edx-18h]
and	ecx, 1
mov	eax, [tmpa+ebx]
shl	ecx, 1Bh
mov	ebp, eax
shr	ebp, 1
or	ecx, ebp
mov	[tmpb+ebx], ecx
lea	ebx, [edx-1Ch]
and	eax, 1
mov	ecx, [tmpa+ebx]
shl	eax, 1Bh
mov	ebp, ecx
shr	ebp, 1
or	eax, ebp
mov	[tmpb+ebx], eax
add	[esp+5Ch+var_34], 8
sub	edx, 20h
and	ecx, 1
mov	ebx, [esp+5Ch+var_34]
cmp	[esp+5Ch+var_30], ebx
jnz	loc_64205D3E
mov	eax, [esp+5Ch+var_30]
mov	r, [esp+5Ch+var_24]
mov	ebx, [esp+5Ch+var_20]
			
cmp	eax, [esp+5Ch+var_2C]
jge	loc_64205EE7
lea	ebp, [ebx+x*4]
mov	tmpa, x
not	edi
add	edi, [esp+5Ch+var_2C]
and	edi, 7
mov	dword ptr [tmpb+0], 0
lea	edx, [tmpb+4]
lea	esi, [x+1]
cmp	[esp+5Ch+var_2C], x
jle	loc_64205EE7
test	edi, edi
jz	short loc_64205EA4
cmp	edi, 1
jz	short loc_64205E94
cmp	edi, 2
jz	short loc_64205E8A
cmp	edi, 3
jz	short loc_64205E80
cmp	edi, 4
jz	short loc_64205E76
cmp	edi, 5
jz	short loc_64205E6C
cmp	edi, 6
jz	short loc_64205E62
mov	dword ptr [tmpb], 0
lea	tmpb, [ebp+8]
lea	x, [eax+2]
mov	dword ptr [tmpb], 0
add	tmpb, 4
inc	x
mov	dword ptr [tmpb], 0
add	tmpb, 4
inc	x
mov	dword ptr [tmpb], 0
add	tmpb, 4
inc	x
mov	dword ptr [tmpb], 0
add	tmpb, 4
inc	x
mov	dword ptr [tmpb], 0
add	tmpb, 4
inc	x
mov	dword ptr [tmpb], 0
add	tmpb, 4
inc	x
cmp	[esp+5Ch+var_2C], x
jle	short loc_64205EE7
			
mov	dword ptr [tmpb], 0
mov	dword ptr [tmpb+4], 0
mov	dword ptr [tmpb+8], 0
mov	dword ptr [tmpb+0Ch], 0
mov	dword ptr [tmpb+10h], 0
mov	dword ptr [tmpb+14h], 0
mov	dword ptr [tmpb+18h], 0
mov	dword ptr [tmpb+1Ch], 0
add	tmpb, 20h
add	x, 8
cmp	[esp+5Ch+var_2C], x
jg	short loc_64205EA4
			
mov	tmpb, [esp+5Ch+a]
mov	tmpa, [edx+8]
mov	tmpb, [esp+5Ch+b]
mov	[esi+8], edi
test	x, x
jle	loc_6420602D
mov	edi, [esp+5Ch+var_28]
mov	ebp, [ebx+edi]
test	ebp, ebp
jnz	loc_64206078
lea	edx, ds:0FFFFFFF8h[x*4]
mov	esi, ecx
and	esi, 7
jz	loc_64205FAF
mov	eax, x
test	x, x
jle	loc_64206027
mov	edi, [ebx+edx]
sub	edx, 4
test	edi, edi
jnz	loc_64206048
dec	x
cmp	esi, 1
jz	short loc_64205FAF
cmp	esi, 2
jz	short loc_64205FA0
cmp	esi, 3
jz	short loc_64205F91
cmp	esi, 4
jz	short loc_64205F82
cmp	esi, 5
jz	short loc_64205F73
cmp	esi, 6
jz	short loc_64205F64
mov	eax, [ebx+edx]
sub	edx, 4
test	eax, eax
jnz	loc_64206048
dec	x
mov	ebp, [ebx+edx]
sub	edx, 4
test	ebp, ebp
jnz	loc_64206048
dec	x
mov	esi, [ebx+edx]
sub	edx, 4
test	esi, esi
jnz	loc_64206048
dec	x
mov	edi, [ebx+edx]
sub	edx, 4
test	edi, edi
jnz	loc_64206048
dec	x
mov	eax, [ebx+edx]
sub	edx, 4
test	eax, eax
jnz	loc_64206048
dec	x
mov	ebp, [ebx+edx]
sub	edx, 4
test	ebp, ebp
jnz	loc_64206048
dec	x
			
mov	eax, x
test	x, x
jle	short loc_64206027
lea	esi, [edx-4]
mov	eax, [ebx+edx]
test	eax, eax
jnz	loc_64206048
lea	eax, [x-1]
mov	x, eax
lea	edi, [edx-8]
mov	ebp, [ebx+esi]
test	ebp, ebp
jnz	short loc_64206048
dec	x
lea	esi, [edx-0Ch]
mov	edi, [ebx+edi]
test	edi, edi
jnz	short loc_64206048
lea	x, [eax-2]
lea	edi, [edx-10h]
mov	ebp, [ebx+esi]
test	ebp, ebp
jnz	short loc_64206048
lea	x, [eax-3]
lea	esi, [edx-14h]
mov	edi, [ebx+edi]
test	edi, edi
jnz	short loc_64206048
lea	x, [eax-4]
lea	edi, [edx-18h]
mov	ebp, [ebx+esi]
test	ebp, ebp
jnz	short loc_64206048
lea	x, [eax-5]
lea	esi, [edx-1Ch]
mov	edi, [ebx+edi]
test	edi, edi
jnz	short loc_64206048
lea	x, [eax-6]
sub	edx, 20h
mov	esi, [ebx+esi]
test	esi, esi
jnz	short loc_64206048
lea	x, [eax-7]
mov	eax, x
test	x, x
jg	short loc_64205FB5
			
mov	ebx, [esp+5Ch+b]
mov	[ebx], x
test	x, x
jnz	short loc_64206078
mov	ecx, [esp+5Ch+b]
mov	dword ptr [ecx+8], 0
xor	x, x
			
add	esp, 4Ch
pop	ebx
pop	esi
pop	edi
pop	ebp
retn
align 4
			
mov	esi, [esp+5Ch+b]
mov	[esi], x
xor	eax, eax
add	esp, 4Ch
pop	ebx
pop	esi
pop	edi
pop	ebp
retn
mov	[esp+5Ch+var_30], x
mov	[esp+5Ch+var_24], ecx
mov	[esp+5Ch+var_20], ebx
mov	x, [esp+5Ch+var_40]
mov	[esp+5Ch+var_34], eax
mov	x, [esp+5Ch+var_38]
jmp	loc_64205D3E
align 4
			
xor	x, x
jmp	short loc_6420603E
lea	ebx, [x+40h]
mov	ebp, 20h
cdq
idiv	ebp
sub	ebx, edx
lea	esi, ds:0[ebx*4]
mov	[esp+5Ch+var_58], esi 
mov	eax, [ecx+0Ch]
mov	[esp+5Ch+var_5C], eax 
call	_realloc
mov	ecx, eax
mov	eax, 0FFFFFFFEh
test	ecx, ecx
jz	short loc_6420603E
mov	res, [esp+5Ch+b]
mov	[eax+0Ch], ecx
mov	edx, [eax+4]
mov	[eax+4], ebx
cmp	ebx, edx
jle	loc_6420618A
lea	eax, [ecx+edx*4]
mov	ecx, edx
not	ecx
add	ecx, ebx
and	ecx, 7
mov	dword ptr [eax], 0
inc	edx
add	eax, 4
cmp	ebx, edx
jle	loc_6420618A
test	ecx, ecx
jz	short loc_64206149
cmp	ecx, 1
jz	short loc_6420613B
cmp	ecx, 2
jz	short loc_64206131
cmp	ecx, 3
jz	short loc_64206127
cmp	ecx, 4
jz	short loc_6420611D
cmp	ecx, 5
jz	short loc_64206113
cmp	ecx, 6
jz	short loc_64206109
mov	dword ptr [eax], 0
inc	edx
add	eax, 4
mov	dword ptr [eax], 0
inc	edx
add	eax, 4
mov	dword ptr [eax], 0
inc	edx
add	eax, 4
mov	dword ptr [eax], 0
inc	edx
add	eax, 4
mov	dword ptr [eax], 0
inc	edx
add	eax, 4
mov	dword ptr [eax], 0
inc	edx
add	eax, 4
mov	dword ptr [eax], 0
inc	edx
add	eax, 4
cmp	ebx, edx
jle	short loc_6420618A
			
mov	dword ptr [eax], 0
mov	dword ptr [eax+4], 0
mov	dword ptr [eax+8], 0
mov	dword ptr [eax+0Ch], 0
mov	dword ptr [eax+10h], 0
mov	dword ptr [eax+14h], 0
mov	dword ptr [eax+18h], 0
mov	dword ptr [eax+1Ch], 0
add	edx, 8
add	eax, 20h
cmp	ebx, edx
jg	short loc_64206149
			
mov	ecx, [esp+5Ch+a]
mov	eax, [ecx]
jmp	loc_64205AFE
align 4
public _s_tma_mp_sub
			
push	ebp
push	edi
push	esi
push	ebx
sub	esp, 3Ch
mov	edi, [esp+4Ch+a]
mov	esi, [esp+4Ch+b]
mov	eax, [esi]
mov	[esp+4Ch+var_2C], eax
mov	ebx, [edi]
mov	edx, [esp+4Ch+c]
cmp	max, [edx+4]
jg	loc_642068A4
			
mov	ecx, [esp+4Ch+c]
mov	eax, [ecx]
mov	[esp+4Ch+var_24], eax
mov	ebp, [esp+4Ch+c]
mov	[ebp+0], max
mov	edx, [a_0+0Ch]
mov	b_0, [b_0+0Ch]
mov	ecx, [ebp+0Ch]
mov	a_0, [esp+4Ch+var_2C]
test	edi, edi
jle	loc_6420688C
mov	ebp, [esp+4Ch+var_2C]
dec	ebp
and	ebp, 7
mov	eax, [tmpa]
sub	eax, [tmpb]
mov	edi, eax
shr	u, 1Fh
and	eax, 0FFFFFFFh
mov	[tmpc],	eax
mov	eax, 1
cmp	i, [esp+4Ch+var_2C]
jz	loc_642063C0
test	ebp, ebp
jz	loc_642062E6
cmp	ebp, 1
jz	loc_642062C5
cmp	ebp, 2
jz	loc_642062AE
cmp	ebp, 3
jz	short loc_64206297
cmp	ebp, 4
jz	short loc_64206280
cmp	ebp, 5
jz	short loc_64206269
cmp	ebp, 6
jz	short loc_64206252
mov	ebp, [tmpa+4]
sub	ebp, [tmpb+4]
sub	ebp, u
mov	u, ebp
shr	u, 1Fh
and	ebp, 0FFFFFFFh
mov	[tmpc+i*4], ebp
mov	i, 2
mov	ebp, [tmpa+i*4]
sub	ebp, [tmpb+i*4]
sub	ebp, u
mov	u, ebp
shr	u, 1Fh
and	ebp, 0FFFFFFFh
mov	[tmpc+i*4], ebp
inc	i
mov	ebp, [tmpa+i*4]
sub	ebp, [tmpb+i*4]
sub	ebp, u
mov	u, ebp
shr	u, 1Fh
and	ebp, 0FFFFFFFh
mov	[tmpc+i*4], ebp
inc	i
mov	ebp, [tmpa+i*4]
sub	ebp, [tmpb+i*4]
sub	ebp, u
mov	u, ebp
shr	u, 1Fh
and	ebp, 0FFFFFFFh
mov	[tmpc+i*4], ebp
inc	i
mov	ebp, [tmpa+i*4]
sub	ebp, [tmpb+i*4]
sub	ebp, u
mov	u, ebp
shr	u, 1Fh
and	ebp, 0FFFFFFFh
mov	[tmpc+i*4], ebp
inc	i
mov	ebp, [tmpa+i*4]
sub	ebp, [tmpb+i*4]
sub	ebp, u
mov	u, ebp
shr	u, 1Fh
and	ebp, 0FFFFFFFh
mov	[tmpc+i*4], ebp
inc	i
mov	ebp, [tmpa+i*4]
sub	ebp, [tmpb+i*4]
sub	ebp, u
mov	u, ebp
shr	u, 1Fh
and	ebp, 0FFFFFFFh
mov	[tmpc+i*4], ebp
inc	i
cmp	i, [esp+4Ch+var_2C]
jz	loc_642063C0
mov	[esp+4Ch+var_28], max
mov	max, [tmpa+i*4]
sub	ebx, [tmpb+i*4]
sub	ebx, u
mov	u, ebx
shr	u, 1Fh
and	ebx, 0FFFFFFFh
mov	[tmpc+i*4], ebx
lea	ebp, [i+1]
mov	ebx, [tmpa+ebp*4]
sub	ebx, [tmpb+ebp*4]
sub	ebx, u
mov	u, ebx
shr	u, 1Fh
and	ebx, 0FFFFFFFh
mov	[tmpc+ebp*4], ebx
lea	ebp, [i+2]
mov	ebx, [tmpa+i*4]
sub	ebx, [tmpb+i*4]
sub	ebx, u
mov	u, ebx
shr	u, 1Fh
and	ebx, 0FFFFFFFh
mov	[tmpc+i*4], ebx
lea	i, [eax+3]
mov	ebx, [tmpa+i*4]
sub	ebx, [tmpb+i*4]
sub	ebx, u
mov	u, ebx
shr	u, 1Fh
and	ebx, 0FFFFFFFh
mov	[tmpc+i*4], ebx
lea	i, [eax+4]
mov	ebx, [tmpa+i*4]
sub	ebx, [tmpb+i*4]
sub	ebx, u
mov	u, ebx
shr	u, 1Fh
and	ebx, 0FFFFFFFh
mov	[tmpc+i*4], ebx
lea	i, [eax+5]
mov	ebx, [tmpa+i*4]
sub	ebx, [tmpb+i*4]
sub	ebx, u
mov	u, ebx
shr	u, 1Fh
and	ebx, 0FFFFFFFh
mov	[tmpc+i*4], ebx
lea	i, [eax+6]
mov	ebx, [tmpa+i*4]
sub	ebx, [tmpb+i*4]
sub	ebx, u
mov	u, ebx
shr	u, 1Fh
and	ebx, 0FFFFFFFh
mov	[tmpc+i*4], ebx
lea	i, [eax+7]
mov	ebx, [tmpa+i*4]
sub	ebx, [tmpb+i*4]
sub	ebx, u
mov	u, ebx
shr	u, 1Fh
and	ebx, 0FFFFFFFh
mov	[tmpc+i*4], ebx
add	eax, 8
cmp	i, [esp+4Ch+var_2C]
jnz	loc_642062EA
mov	ebx, [esp+4Ch+var_28]
			
lea	tmpb, ds:0[i*4]
add	tmpa, esi
lea	esi, [tmpc+esi]
mov	[esp+4Ch+var_28], i
cmp	max, [esp+4Ch+var_28]
jle	loc_6420664A
mov	i, [esp+4Ch+var_28]
not	eax
lea	ebp, [eax+max]
and	ebp, 7
mov	eax, [tmpa]
sub	eax, u
mov	u, eax
shr	edi, 1Fh
mov	[esp+4Ch+var_30], edi
and	eax, 0FFFFFFFh
mov	[tmpc],	eax
mov	edi, [esp+4Ch+var_28]
inc	i
mov	eax, 4
cmp	max, i
jle	loc_64206641
test	ebp, ebp
jz	loc_64206570
cmp	ebp, 1
jz	loc_6420653D
cmp	ebp, 2
jz	loc_64206512
cmp	ebp, 3
jz	loc_642064E7
cmp	ebp, 4
jz	loc_642064BC
cmp	ebp, 5
jz	short loc_64206491
cmp	ebp, 6
jz	short loc_64206466
mov	eax, [tmpa+4]
sub	eax, [esp+4Ch+var_30]
mov	ebp, eax
shr	ebp, 1Fh
mov	[esp+4Ch+var_30], ebp
and	eax, 0FFFFFFFh
mov	[tmpc+4], eax
mov	i, [esp+4Ch+var_28]
add	i, 2
mov	eax, 8
mov	ebp, [tmpa+eax]
mov	[esp+4Ch+var_2C], ebp
mov	ebp, [esp+4Ch+var_30]
sub	[esp+4Ch+var_2C], ebp
mov	ebp, [esp+4Ch+var_2C]
shr	ebp, 1Fh
mov	[esp+4Ch+var_30], ebp
mov	ebp, [esp+4Ch+var_2C]
and	ebp, 0FFFFFFFh
mov	[tmpc+eax], ebp
inc	i
add	eax, 4
mov	ebp, [tmpa+eax]
mov	[esp+4Ch+var_2C], ebp
mov	ebp, [esp+4Ch+var_30]
sub	[esp+4Ch+var_2C], ebp
mov	ebp, [esp+4Ch+var_2C]
shr	ebp, 1Fh
mov	[esp+4Ch+var_30], ebp
mov	ebp, [esp+4Ch+var_2C]
and	ebp, 0FFFFFFFh
mov	[tmpc+eax], ebp
inc	i
add	eax, 4
mov	ebp, [tmpa+eax]
mov	[esp+4Ch+var_2C], ebp
mov	ebp, [esp+4Ch+var_30]
sub	[esp+4Ch+var_2C], ebp
mov	ebp, [esp+4Ch+var_2C]
shr	ebp, 1Fh
mov	[esp+4Ch+var_30], ebp
mov	ebp, [esp+4Ch+var_2C]
and	ebp, 0FFFFFFFh
mov	[tmpc+eax], ebp
inc	i
add	eax, 4
mov	ebp, [tmpa+eax]
mov	[esp+4Ch+var_2C], ebp
mov	ebp, [esp+4Ch+var_30]
sub	[esp+4Ch+var_2C], ebp
mov	ebp, [esp+4Ch+var_2C]
shr	ebp, 1Fh
mov	[esp+4Ch+var_30], ebp
mov	ebp, [esp+4Ch+var_2C]
and	ebp, 0FFFFFFFh
mov	[tmpc+eax], ebp
inc	i
add	eax, 4
mov	ebp, [tmpa+eax]
mov	[esp+4Ch+var_2C], ebp
mov	ebp, [esp+4Ch+var_30]
sub	[esp+4Ch+var_2C], ebp
mov	ebp, [esp+4Ch+var_2C]
shr	ebp, 1Fh
mov	[esp+4Ch+var_30], ebp
mov	ebp, [esp+4Ch+var_2C]
and	ebp, 0FFFFFFFh
mov	[tmpc+eax], ebp
inc	i
add	eax, 4
mov	ebp, [tmpa+eax]
mov	[esp+4Ch+var_2C], ebp
mov	ebp, [esp+4Ch+var_30]
sub	[esp+4Ch+var_2C], ebp
mov	ebp, [esp+4Ch+var_2C]
shr	ebp, 1Fh
mov	[esp+4Ch+var_30], ebp
mov	ebp, [esp+4Ch+var_2C]
and	ebp, 0FFFFFFFh
mov	[tmpc+eax], ebp
inc	i
add	eax, 4
cmp	max, i
jle	loc_64206641
mov	[esp+4Ch+var_20], ecx
mov	[esp+4Ch+var_2C], max
mov	max, [esp+4Ch+var_30]
mov	tmpc, [tmpa+eax]
sub	ecx, u
mov	u, ecx
shr	u, 1Fh
and	ecx, 0FFFFFFFh
mov	[tmpc+eax], ecx
lea	ebp, [eax+4]
mov	ecx, [tmpa+ebp]
sub	ecx, u
mov	u, ecx
shr	u, 1Fh
and	ecx, 0FFFFFFFh
mov	[tmpc+ebp], ecx
lea	ebp, [eax+8]
mov	ecx, [tmpa+ebp]
sub	ecx, u
mov	u, ecx
shr	u, 1Fh
and	ecx, 0FFFFFFFh
mov	[tmpc+ebp], ecx
lea	ebp, [eax+0Ch]
mov	ecx, [tmpa+ebp]
sub	ecx, u
mov	u, ecx
shr	u, 1Fh
and	ecx, 0FFFFFFFh
mov	[tmpc+ebp], ecx
lea	ebp, [eax+10h]
mov	ecx, [tmpa+ebp]
sub	ecx, u
mov	u, ecx
shr	u, 1Fh
and	ecx, 0FFFFFFFh
mov	[tmpc+ebp], ecx
lea	ebp, [eax+14h]
mov	ecx, [tmpa+ebp]
sub	ecx, u
mov	u, ecx
shr	u, 1Fh
and	ecx, 0FFFFFFFh
mov	[tmpc+ebp], ecx
lea	ebp, [eax+18h]
mov	ecx, [tmpa+ebp]
sub	ecx, u
mov	u, ecx
shr	u, 1Fh
and	ecx, 0FFFFFFFh
mov	[tmpc+ebp], ecx
lea	ebp, [eax+1Ch]
mov	ecx, [tmpa+ebp]
sub	ecx, u
mov	u, ecx
shr	u, 1Fh
and	ecx, 0FFFFFFFh
mov	[tmpc+ebp], ecx
add	i, 8
add	eax, 20h
cmp	[esp+4Ch+var_2C], i
jg	loc_6420657C
mov	ecx, [esp+4Ch+var_20]
mov	u, [esp+4Ch+var_2C]
			
mov	tmpa, max
sub	edx, [esp+4Ch+var_28]
lea	esi, [esi+edx*4]
cmp	max, [esp+4Ch+var_24]
jge	loc_64206728
mov	i, max
not	edi
add	edi, [esp+4Ch+var_24]
and	edi, 7
mov	dword ptr [tmpc], 0
lea	i, [tmpc+4]
lea	tmpa, [max+1]
cmp	[esp+4Ch+var_24], i
jle	loc_64206728
test	edi, edi
jz	short loc_642066E5
cmp	edi, 1
jz	short loc_642066D5
cmp	edi, 2
jz	short loc_642066CB
cmp	edi, 3
jz	short loc_642066C1
cmp	edi, 4
jz	short loc_642066B7
cmp	edi, 5
jz	short loc_642066AD
cmp	edi, 6
jz	short loc_642066A3
mov	dword ptr [tmpc], 0
lea	tmpc, [esi+8]
lea	i, [max+2]
mov	dword ptr [tmpc], 0
add	tmpc, 4
inc	i
mov	dword ptr [tmpc], 0
add	tmpc, 4
inc	i
mov	dword ptr [tmpc], 0
add	tmpc, 4
inc	i
mov	dword ptr [tmpc], 0
add	tmpc, 4
inc	i
mov	dword ptr [tmpc], 0
add	tmpc, 4
inc	i
mov	dword ptr [tmpc], 0
add	tmpc, 4
inc	i
cmp	[esp+4Ch+var_24], i
jle	short loc_64206728
			
mov	dword ptr [tmpc], 0
mov	dword ptr [tmpc+4], 0
mov	dword ptr [tmpc+8], 0
mov	dword ptr [tmpc+0Ch], 0
mov	dword ptr [tmpc+10h], 0
mov	dword ptr [tmpc+14h], 0
mov	dword ptr [tmpc+18h], 0
mov	dword ptr [tmpc+1Ch], 0
add	tmpc, 20h
add	i, 8
cmp	[esp+4Ch+var_24], i
jg	short loc_642066E5
			
test	max, max
jle	loc_64206861
lea	i, [max-1]
mov	esi, [ecx+max*4]
test	esi, esi
jnz	loc_642068A0
lea	eax, ds:0FFFFFFF8h[ebx*4]
mov	esi, max
and	esi, 7
jz	loc_642067E3
mov	ebx, max
test	max, max
jle	loc_6420685B
mov	i, [tmpc+eax]
sub	eax, 4
test	edi, edi
jnz	loc_6420687C
lea	max, [max-1]
cmp	esi, 1
jz	short loc_642067E3
cmp	esi, 2
jz	short loc_642067D4
cmp	esi, 3
jz	short loc_642067C5
cmp	esi, 4
jz	short loc_642067B6
cmp	esi, 5
jz	short loc_642067A7
cmp	esi, 6
jz	short loc_64206798
mov	esi, [tmpc+eax]
sub	eax, 4
test	esi, esi
jnz	loc_6420687C
dec	max
mov	ebp, [tmpc+eax]
sub	eax, 4
test	ebp, ebp
jnz	loc_6420687C
dec	max
mov	ebx, [tmpc+eax]
sub	eax, 4
test	ebx, ebx
jnz	loc_6420687C
dec	max
mov	edi, [tmpc+eax]
sub	eax, 4
test	edi, edi
jnz	loc_6420687C
dec	max
mov	esi, [tmpc+eax]
sub	eax, 4
test	esi, esi
jnz	loc_6420687C
dec	max
mov	ebp, [tmpc+eax]
sub	eax, 4
test	ebp, ebp
jnz	loc_6420687C
dec	max
			
mov	ebx, max
test	max, max
jle	short loc_6420685B
lea	esi, [eax-4]
mov	ebp, [tmpc+eax]
test	ebp, ebp
jnz	loc_6420687C
lea	ebx, [max-1]
mov	max, ebx
lea	i, [eax-8]
mov	ebp, [tmpc+esi]
test	ebp, ebp
jnz	short loc_6420687C
dec	max
lea	esi, [eax-0Ch]
mov	edi, [tmpc+edi]
test	edi, edi
jnz	short loc_6420687C
lea	max, [ebx-2]
lea	edi, [eax-10h]
mov	ebp, [tmpc+esi]
test	ebp, ebp
jnz	short loc_6420687C
lea	max, [ebx-3]
lea	esi, [eax-14h]
mov	edi, [tmpc+edi]
test	edi, edi
jnz	short loc_6420687C
lea	max, [ebx-4]
lea	edi, [eax-18h]
mov	ebp, [tmpc+esi]
test	ebp, ebp
jnz	short loc_6420687C
lea	max, [ebx-5]
lea	esi, [eax-1Ch]
mov	edi, [tmpc+edi]
test	edi, edi
jnz	short loc_6420687C
lea	max, [ebx-6]
sub	eax, 20h
mov	esi, [tmpc+esi]
test	esi, esi
jnz	short loc_6420687C
lea	max, [ebx-7]
mov	ebx, max
test	max, max
jg	short loc_642067E9
			
mov	i, [esp+4Ch+c]
mov	[edi], max
test	max, max
jnz	short loc_642068A0
mov	max, [esp+4Ch+c]
mov	dword ptr [ebx+8], 0
xor	eax, eax
			
add	esp, 3Ch
pop	ebx
pop	esi
pop	u
pop	ebp
retn
align 4
			
mov	eax, [esp+4Ch+c]
mov	[eax], max
xor	eax, eax
add	esp, 3Ch
pop	ebx
pop	esi
pop	i
pop	ebp
retn
mov	tmpb, tmpc
mov	[esp+4Ch+var_28], 0
xor	edi, edi
jmp	loc_642063D0
align 10h
			
xor	eax, eax
jmp	short loc_64206872
lea	ebp, [max+40h]
mov	edx, 20h
mov	eax, max
mov	ecx, edx
cdq
idiv	ecx
sub	ebp, edx
lea	eax, ds:0[ebp*4]
mov	[esp+4Ch+var_48], eax 
mov	edx, [esp+4Ch+c]
mov	ecx, [edx+0Ch]
mov	[esp+4Ch+var_4C], ecx 
call	_realloc
mov	edx, eax
mov	eax, 0FFFFFFFEh
test	edx, edx
jz	short loc_64206872
mov	ecx, [esp+4Ch+c]
mov	[ecx+0Ch], edx
mov	res, [ecx+4]
mov	[ecx+4], ebp
cmp	ebp, eax
jle	loc_642061BC
lea	edx, [edx+eax*4]
mov	[esp+4Ch+var_24], edx
mov	ecx, eax
not	ecx
add	ecx, ebp
and	ecx, 7
mov	dword ptr [edx], 0
lea	edx, [eax+1]
mov	eax, [esp+4Ch+var_24]
add	eax, 4
cmp	ebp, edx
jle	loc_642061BC
test	ecx, ecx
jz	short loc_64206987
cmp	ecx, 1
jz	short loc_64206975
cmp	ecx, 2
jz	short loc_6420696B
cmp	ecx, 3
jz	short loc_64206961
cmp	ecx, 4
jz	short loc_64206957
cmp	ecx, 5
jz	short loc_6420694D
cmp	ecx, 6
jz	short loc_64206943
mov	dword ptr [eax], 0
inc	edx
add	eax, 4
mov	dword ptr [eax], 0
inc	edx
add	eax, 4
mov	dword ptr [eax], 0
inc	edx
add	eax, 4
mov	dword ptr [eax], 0
inc	edx
add	eax, 4
mov	dword ptr [eax], 0
inc	edx
add	eax, 4
mov	dword ptr [eax], 0
inc	edx
add	eax, 4
mov	dword ptr [eax], 0
inc	edx
add	eax, 4
cmp	ebp, edx
jle	loc_642061BC
			
mov	dword ptr [eax], 0
mov	dword ptr [eax+4], 0
mov	dword ptr [eax+8], 0
mov	dword ptr [eax+0Ch], 0
mov	dword ptr [eax+10h], 0
mov	dword ptr [eax+14h], 0
mov	dword ptr [eax+18h], 0
mov	dword ptr [eax+1Ch], 0
add	edx, 8
add	eax, 20h
cmp	ebp, edx
jg	short loc_64206987
jmp	loc_642061BC
align 10h
public _tma_mp_sub
			
push	ebp
push	edi
push	esi
push	ebx
sub	esp, 4Ch
mov	ebx, [esp+5Ch+a]
mov	esi, [esp+5Ch+b]
mov	eax, [esp+5Ch+c]
mov	[esp+5Ch+var_2C], eax
mov	eax, [ebx+8]
mov	edx, [esi+8]
cmp	sa, sb
jz	loc_64207118
mov	sb, [esp+5Ch+var_2C]
mov	[edx+8], sa
mov	ecx, [a_0]
mov	[esp+5Ch+var_38], ecx
mov	edi, [b_0]
mov	[esp+5Ch+var_30], edi
cmp	ecx, edi
jg	loc_642070D4
mov	[esp+5Ch+var_20], b_0
mov	sa, [esp+5Ch+var_30]
mov	ecx, [esp+5Ch+var_2C]
cmp	[ecx+4], eax
jle	loc_642070F1
inc	eax
mov	[esp+5Ch+var_34], eax
mov	[esp+5Ch+var_24], eax
mov	res, [esp+5Ch+var_2C]
mov	edi, [eax]
mov	[esp+5Ch+var_28], edi
mov	edx, [esp+5Ch+var_34]
mov	ecx, [esp+5Ch+var_2C]
mov	[ecx], edx
mov	a_0, [a_0+0Ch]
mov	b_0, [b_0+0Ch]
mov	edx, [ecx+0Ch]
mov	ebp, [esp+5Ch+var_38]
test	ebp, ebp
jle	loc_64207150
mov	edi, [esp+5Ch+var_38]
dec	edi
and	edi, 7
mov	ebp, [esi]
add	ebp, [ebx]
mov	ecx, ebp
shr	ecx, 1Ch
and	ebp, 0FFFFFFFh
mov	[edx], ebp
mov	eax, 1
cmp	eax, [esp+5Ch+var_38]
jz	loc_64206C1E
test	edi, edi
jz	loc_64206B5C
cmp	edi, 1
jz	loc_64206B3B
cmp	edi, 2
jz	loc_64206B24
cmp	edi, 3
jz	short loc_64206B0D
cmp	edi, 4
jz	short loc_64206AF6
cmp	edi, 5
jz	short loc_64206ADF
cmp	edi, 6
jz	short loc_64206AC8
mov	ebp, [esi+4]
add	ebp, ecx
add	ebp, [ebx+4]
mov	ecx, ebp
shr	ecx, 1Ch
and	ebp, 0FFFFFFFh
mov	[edx+eax*4], ebp
mov	eax, 2
mov	edi, [esi+eax*4]
add	edi, ecx
add	edi, [ebx+eax*4]
mov	ecx, edi
shr	ecx, 1Ch
and	edi, 0FFFFFFFh
mov	[edx+eax*4], edi
inc	eax
mov	ebp, [esi+eax*4]
add	ebp, ecx
add	ebp, [ebx+eax*4]
mov	ecx, ebp
shr	ecx, 1Ch
and	ebp, 0FFFFFFFh
mov	[edx+eax*4], ebp
inc	eax
mov	edi, [esi+eax*4]
add	edi, ecx
add	edi, [ebx+eax*4]
mov	ecx, edi
shr	ecx, 1Ch
and	edi, 0FFFFFFFh
mov	[edx+eax*4], edi
inc	eax
mov	ebp, [esi+eax*4]
add	ebp, ecx
add	ebp, [ebx+eax*4]
mov	ecx, ebp
shr	ecx, 1Ch
and	ebp, 0FFFFFFFh
mov	[edx+eax*4], ebp
inc	eax
mov	edi, [esi+eax*4]
add	edi, ecx
add	edi, [ebx+eax*4]
mov	ecx, edi
shr	ecx, 1Ch
and	edi, 0FFFFFFFh
mov	[edx+eax*4], edi
inc	eax
mov	ebp, [esi+eax*4]
add	ebp, ecx
add	ebp, [ebx+eax*4]
mov	ecx, ebp
shr	ecx, 1Ch
and	ebp, 0FFFFFFFh
mov	[edx+eax*4], ebp
inc	eax
cmp	eax, [esp+5Ch+var_38]
jz	loc_64206C1E
			
add	ecx, [esi+eax*4]
add	ecx, [ebx+eax*4]
mov	edi, ecx
shr	edi, 1Ch
and	ecx, 0FFFFFFFh
mov	[edx+eax*4], ecx
lea	ebp, [eax+1]
add	edi, [esi+ebp*4]
add	edi, [ebx+ebp*4]
mov	ecx, edi
shr	ecx, 1Ch
and	edi, 0FFFFFFFh
mov	[edx+ebp*4], edi
lea	ebp, [eax+2]
add	ecx, [esi+ebp*4]
add	ecx, [ebx+ebp*4]
mov	edi, ecx
shr	edi, 1Ch
and	ecx, 0FFFFFFFh
mov	[edx+ebp*4], ecx
lea	ebp, [eax+3]
add	edi, [esi+ebp*4]
add	edi, [ebx+ebp*4]
mov	ecx, edi
shr	ecx, 1Ch
and	edi, 0FFFFFFFh
mov	[edx+ebp*4], edi
lea	ebp, [eax+4]
add	ecx, [esi+ebp*4]
add	ecx, [ebx+ebp*4]
mov	edi, ecx
shr	edi, 1Ch
and	ecx, 0FFFFFFFh
mov	[edx+ebp*4], ecx
lea	ebp, [eax+5]
add	edi, [esi+ebp*4]
add	edi, [ebx+ebp*4]
mov	ecx, edi
shr	ecx, 1Ch
and	edi, 0FFFFFFFh
mov	[edx+ebp*4], edi
lea	ebp, [eax+6]
add	ecx, [esi+ebp*4]
add	ecx, [ebx+ebp*4]
mov	edi, ecx
shr	edi, 1Ch
and	ecx, 0FFFFFFFh
mov	[edx+ebp*4], ecx
lea	ebp, [eax+7]
add	edi, [esi+ebp*4]
add	edi, [ebx+ebp*4]
mov	ecx, edi
shr	ecx, 1Ch
and	edi, 0FFFFFFFh
mov	[edx+ebp*4], edi
add	eax, 8
cmp	eax, [esp+5Ch+var_38]
jnz	loc_64206B5C
			
lea	ebp, [edx+eax*4]
mov	ebx, [esp+5Ch+var_38]
cmp	[esp+5Ch+var_30], ebx
jz	loc_64206E57
cmp	[esp+5Ch+var_30], eax
jle	loc_64206E57
lea	ebx, ds:0[eax*4]
mov	esi, [esp+5Ch+var_20]
add	ebx, [esi+0Ch]
mov	edi, eax
not	edi
add	edi, [esp+5Ch+var_30]
and	edi, 7
mov	[esp+5Ch+var_38], edi
mov	esi, [ebx]
add	esi, ecx
mov	ecx, esi
shr	ecx, 1Ch
and	esi, 0FFFFFFFh
mov	[ebp+0], esi
lea	esi, [ebp+4]
lea	edi, [eax+1]
mov	[esp+5Ch+var_20], edi
add	ebx, 4
cmp	[esp+5Ch+var_30], edi
jle	loc_64206E4D
mov	edi, [esp+5Ch+var_38]
test	edi, edi
jz	loc_64206DA8
cmp	[esp+5Ch+var_38], 1
jz	loc_64206D7B
cmp	[esp+5Ch+var_38], 2
jz	loc_64206D5C
cmp	[esp+5Ch+var_38], 3
jz	loc_64206D3D
cmp	[esp+5Ch+var_38], 4
jz	short loc_64206D1E
cmp	[esp+5Ch+var_38], 5
jz	short loc_64206CFF
cmp	[esp+5Ch+var_38], 6
jz	short loc_64206CE0
add	ecx, [ebx]
mov	[esp+5Ch+var_38], ecx
shr	ecx, 1Ch
mov	edi, [esp+5Ch+var_38]
and	edi, 0FFFFFFFh
mov	[esi], edi
add	esi, 4
inc	[esp+5Ch+var_20]
add	ebx, 4
add	ecx, [ebx]
mov	[esp+5Ch+var_38], ecx
shr	ecx, 1Ch
mov	edi, [esp+5Ch+var_38]
and	edi, 0FFFFFFFh
mov	[esi], edi
add	esi, 4
inc	[esp+5Ch+var_20]
add	ebx, 4
add	ecx, [ebx]
mov	[esp+5Ch+var_38], ecx
shr	ecx, 1Ch
mov	edi, [esp+5Ch+var_38]
and	edi, 0FFFFFFFh
mov	[esi], edi
add	esi, 4
inc	[esp+5Ch+var_20]
add	ebx, 4
add	ecx, [ebx]
mov	[esp+5Ch+var_38], ecx
shr	ecx, 1Ch
mov	edi, [esp+5Ch+var_38]
and	edi, 0FFFFFFFh
mov	[esi], edi
add	esi, 4
inc	[esp+5Ch+var_20]
add	ebx, 4
add	ecx, [ebx]
mov	[esp+5Ch+var_38], ecx
shr	ecx, 1Ch
mov	edi, [esp+5Ch+var_38]
and	edi, 0FFFFFFFh
mov	[esi], edi
add	esi, 4
inc	[esp+5Ch+var_20]
add	ebx, 4
add	ecx, [ebx]
mov	[esp+5Ch+var_38], ecx
shr	ecx, 1Ch
mov	edi, [esp+5Ch+var_38]
and	edi, 0FFFFFFFh
mov	[esi], edi
add	esi, 4
inc	[esp+5Ch+var_20]
add	ebx, 4
add	ecx, [ebx]
mov	[esp+5Ch+var_38], ecx
shr	ecx, 1Ch
mov	edi, [esp+5Ch+var_38]
and	edi, 0FFFFFFFh
mov	[esi], edi
add	esi, 4
inc	[esp+5Ch+var_20]
add	ebx, 4
mov	edi, [esp+5Ch+var_20]
cmp	[esp+5Ch+var_30], edi
jle	loc_64206E4D
mov	[esp+5Ch+var_38], ebp
mov	edi, [esp+5Ch+var_20]
add	ecx, [ebx]
mov	ebp, ecx
shr	ebp, 1Ch
and	ecx, 0FFFFFFFh
mov	[esi], ecx
add	ebp, [ebx+4]
mov	ecx, ebp
shr	ecx, 1Ch
and	ebp, 0FFFFFFFh
mov	[esi+4], ebp
add	ecx, [ebx+8]
mov	ebp, ecx
shr	ebp, 1Ch
and	ecx, 0FFFFFFFh
mov	[esi+8], ecx
add	ebp, [ebx+0Ch]
mov	ecx, ebp
shr	ecx, 1Ch
and	ebp, 0FFFFFFFh
mov	[esi+0Ch], ebp
add	ecx, [ebx+10h]
mov	ebp, ecx
shr	ebp, 1Ch
and	ecx, 0FFFFFFFh
mov	[esi+10h], ecx
add	ebp, [ebx+14h]
mov	ecx, ebp
shr	ecx, 1Ch
and	ebp, 0FFFFFFFh
mov	[esi+14h], ebp
add	ecx, [ebx+18h]
mov	ebp, ecx
shr	ebp, 1Ch
and	ecx, 0FFFFFFFh
mov	[esi+18h], ecx
add	ebp, [ebx+1Ch]
mov	ecx, ebp
shr	ecx, 1Ch
and	ebp, 0FFFFFFFh
mov	[esi+1Ch], ebp
add	esi, 20h
add	edi, 8
add	ebx, 20h
cmp	[esp+5Ch+var_30], edi
jg	loc_64206DB0
mov	ebp, [esp+5Ch+var_38]
			
not	eax
add	eax, [esp+5Ch+var_34]
lea	ebp, [ebp+eax*4+0]
			
mov	[ebp+0], ecx
mov	eax, [esp+5Ch+var_34]
cmp	[esp+5Ch+var_28], eax
jle	loc_64206F43
mov	ebx, eax
not	ebx
add	ebx, [esp+5Ch+var_28]
and	ebx, 7
mov	dword ptr [ebp+4], 0
lea	eax, [ebp+8]
mov	ecx, [esp+5Ch+var_34]
inc	ecx
cmp	[esp+5Ch+var_28], ecx
jle	loc_64206F43
test	ebx, ebx
jz	short loc_64206F00
cmp	ebx, 1
jz	short loc_64206EF0
cmp	ebx, 2
jz	short loc_64206EE6
cmp	ebx, 3
jz	short loc_64206EDC
cmp	ebx, 4
jz	short loc_64206ED2
cmp	ebx, 5
jz	short loc_64206EC8
cmp	ebx, 6
jz	short loc_64206EBE
mov	dword ptr [eax], 0
lea	eax, [ebp+0Ch]
mov	ecx, [esp+5Ch+var_34]
add	ecx, 2
mov	dword ptr [eax], 0
add	eax, 4
inc	ecx
mov	dword ptr [eax], 0
add	eax, 4
inc	ecx
mov	dword ptr [eax], 0
add	eax, 4
inc	ecx
mov	dword ptr [eax], 0
add	eax, 4
inc	ecx
mov	dword ptr [eax], 0
add	eax, 4
inc	ecx
mov	dword ptr [eax], 0
add	eax, 4
inc	ecx
cmp	[esp+5Ch+var_28], ecx
jle	short loc_64206F43
			
mov	dword ptr [eax], 0
mov	dword ptr [eax+4], 0
mov	dword ptr [eax+8], 0
mov	dword ptr [eax+0Ch], 0
mov	dword ptr [eax+10h], 0
mov	dword ptr [eax+14h], 0
mov	dword ptr [eax+18h], 0
mov	dword ptr [eax+1Ch], 0
add	eax, 20h
add	ecx, 8
cmp	[esp+5Ch+var_28], ecx
jg	short loc_64206F00
			
mov	eax, [esp+5Ch+var_34]
test	eax, eax
jle	loc_642070B0
mov	ecx, [esp+5Ch+var_34]
dec	ecx
mov	ebx, [edx+ecx*4]
test	ebx, ebx
jnz	loc_642074D6
mov	edi, [esp+5Ch+var_34]
lea	eax, ds:0FFFFFFF8h[edi*4]
mov	ebx, ecx
and	ebx, 7
jz	loc_6420700E
mov	[esp+5Ch+var_24], ecx
test	ecx, ecx
jle	loc_642070AA
mov	esi, [edx+eax]
sub	eax, 4
test	esi, esi
jnz	loc_64207140
mov	edi, [esp+5Ch+var_34]
lea	ecx, [edi-2]
cmp	ebx, 1
jz	short loc_6420700E
cmp	ebx, 2
jz	short loc_64206FFF
cmp	ebx, 3
jz	short loc_64206FF0
cmp	ebx, 4
jz	short loc_64206FE1
cmp	ebx, 5
jz	short loc_64206FD2
cmp	ebx, 6
jz	short loc_64206FC3
mov	ebx, [edx+eax]
sub	eax, 4
test	ebx, ebx
jnz	loc_64207140
dec	ecx
mov	ebp, [edx+eax]
sub	eax, 4
test	ebp, ebp
jnz	loc_64207140
dec	ecx
mov	esi, [edx+eax]
sub	eax, 4
test	esi, esi
jnz	loc_64207140
dec	ecx
mov	edi, [edx+eax]
sub	eax, 4
test	edi, edi
jnz	loc_64207140
dec	ecx
mov	ebx, [edx+eax]
sub	eax, 4
test	ebx, ebx
jnz	loc_64207140
dec	ecx
mov	ebp, [edx+eax]
sub	eax, 4
test	ebp, ebp
jnz	loc_64207140
dec	ecx
			
test	ecx, ecx
jle	loc_642070A6
lea	esi, [eax-4]
mov	ebp, [edx+eax]
test	ebp, ebp
jnz	loc_64207140
lea	ebx, [ecx-1]
mov	ecx, ebx
lea	edi, [eax-8]
mov	esi, [edx+esi]
test	esi, esi
jnz	loc_64207140
dec	ecx
lea	esi, [eax-0Ch]
mov	edi, [edx+edi]
test	edi, edi
jnz	loc_64207140
lea	ecx, [ebx-2]
lea	edi, [eax-10h]
mov	ebp, [edx+esi]
test	ebp, ebp
jnz	loc_64207140
lea	ecx, [ebx-3]
lea	esi, [eax-14h]
mov	edi, [edx+edi]
test	edi, edi
jnz	loc_64207140
lea	ecx, [ebx-4]
lea	edi, [eax-18h]
mov	ebp, [edx+esi]
test	ebp, ebp
jnz	loc_64207140
lea	ecx, [ebx-5]
lea	esi, [eax-1Ch]
mov	edi, [edx+edi]
test	edi, edi
jnz	loc_64207140
lea	ecx, [ebx-6]
sub	eax, 20h
mov	ebp, [edx+esi]
test	ebp, ebp
jnz	loc_64207140
lea	ecx, [ebx-7]
test	ecx, ecx
jg	loc_64207016
mov	[esp+5Ch+var_24], ecx
mov	edx, [esp+5Ch+var_2C]
mov	[edx], ecx
mov	ecx, [esp+5Ch+var_24]
test	ecx, ecx
jnz	loc_642074D6
mov	ebx, [esp+5Ch+var_2C]
mov	dword ptr [ebx+8], 0
xor	eax, eax
			
add	esp, 4Ch
pop	ebx
pop	esi
pop	edi
pop	ebp
retn
align 4
mov	[esp+5Ch+var_38], edi
mov	[esp+5Ch+var_30], ecx
mov	[esp+5Ch+var_20], a_0
mov	sa, [esp+5Ch+var_30]
mov	ecx, [esp+5Ch+var_2C]
cmp	[ecx+4], eax
jg	loc_64206A25
mov	eax, [esp+5Ch+var_30]
inc	eax
mov	[esp+5Ch+var_34], eax
mov	[esp+5Ch+var_24], eax
mov	[esp+5Ch+size],	eax 
mov	edi, [esp+5Ch+var_2C]
mov	[esp+5Ch+var_5C], edi 
call	_tma_mp_grow
test	eax, eax
jz	loc_64206A2E
jmp	short loc_642070C9
mov	ecx, [a_0]
cmp	ecx, [b_0]
jle	short loc_6420715C
			
mov	edi, [esp+5Ch+var_2C]
mov	[edi+8], sa
mov	[esp+5Ch+c], edi
mov	[esp+5Ch+b], b_0
mov	[esp+5Ch+a], a_0
add	esp, 4Ch
pop	a_0
pop	b_0
pop	edi
pop	ebp
jmp	_s_tma_mp_sub
align 10h
			
mov	eax, [esp+5Ch+var_2C]
mov	[eax], ecx
xor	eax, eax
add	esp, 4Ch
pop	ebx
pop	esi
pop	edi
pop	ebp
retn
mov	ebp, edx
xor	eax, eax
xor	ecx, ecx
jmp	loc_64206C21
align 4
jl	loc_642074B7
mov	edi, [a_0+0Ch]
mov	ebp, [b_0+0Ch]
mov	[esp+5Ch+var_30], ebp
test	ecx, ecx
jle	short loc_6420711E
lea	ebp, [ecx-1]
mov	[esp+5Ch+var_38], ebp
shl	ebp, 2
add	edi, ebp
mov	[esp+5Ch+var_34], edi
add	ebp, [esp+5Ch+var_30]
mov	[esp+5Ch+var_24], ebp
mov	ebp, [ebp+0]
mov	edi, [esp+5Ch+var_34]
cmp	ebp, [edi]
jb	short loc_6420711E
ja	loc_642074B7
xor	edi, edi
mov	[esp+5Ch+var_30], 0
mov	ebp, [esp+5Ch+var_38]
and	ebp, 7
mov	[esp+5Ch+var_38], ebp
jz	loc_64207343
mov	[esp+5Ch+var_30], 1
mov	ebp, [esp+5Ch+var_24]
mov	edi, [ebp-4]
mov	ebp, [esp+5Ch+var_34]
cmp	[ebp-4], edi
ja	loc_6420711E
mov	edi, 0FFFFFFFCh
jb	loc_642074B7
cmp	[esp+5Ch+var_38], 1
jz	loc_64207343
cmp	[esp+5Ch+var_38], 2
jz	loc_64207310
cmp	[esp+5Ch+var_38], 3
jz	loc_642072DD
cmp	[esp+5Ch+var_38], 4
jz	loc_642072AA
cmp	[esp+5Ch+var_38], 5
jz	short loc_64207277
cmp	[esp+5Ch+var_38], 6
jz	short loc_64207244
inc	[esp+5Ch+var_30]
mov	ebp, [ebp+edi-4]
mov	[esp+5Ch+var_38], ebp
mov	ebp, [esp+5Ch+var_24]
mov	ebp, [ebp+edi-4]
mov	[esp+5Ch+var_28], ebp
cmp	[esp+5Ch+var_38], ebp
ja	loc_6420711E
sub	edi, 4
cmp	[esp+5Ch+var_38], ebp
jb	loc_642074B7
inc	[esp+5Ch+var_30]
mov	ebp, [esp+5Ch+var_34]
mov	ebp, [ebp+edi-4]
mov	[esp+5Ch+var_38], ebp
mov	ebp, [esp+5Ch+var_24]
mov	ebp, [ebp+edi-4]
mov	[esp+5Ch+var_28], ebp
cmp	[esp+5Ch+var_38], ebp
ja	loc_6420711E
sub	edi, 4
cmp	[esp+5Ch+var_38], ebp
jb	loc_642074B7
inc	[esp+5Ch+var_30]
mov	ebp, [esp+5Ch+var_34]
mov	ebp, [ebp+edi-4]
mov	[esp+5Ch+var_38], ebp
mov	ebp, [esp+5Ch+var_24]
mov	ebp, [ebp+edi-4]
mov	[esp+5Ch+var_28], ebp
cmp	[esp+5Ch+var_38], ebp
ja	loc_6420711E
sub	edi, 4
cmp	[esp+5Ch+var_38], ebp
jb	loc_642074B7
inc	[esp+5Ch+var_30]
mov	ebp, [esp+5Ch+var_34]
mov	ebp, [ebp+edi-4]
mov	[esp+5Ch+var_38], ebp
mov	ebp, [esp+5Ch+var_24]
mov	ebp, [ebp+edi-4]
mov	[esp+5Ch+var_28], ebp
cmp	[esp+5Ch+var_38], ebp
ja	loc_6420711E
sub	edi, 4
cmp	[esp+5Ch+var_38], ebp
jb	loc_642074B7
inc	[esp+5Ch+var_30]
mov	ebp, [esp+5Ch+var_34]
mov	ebp, [ebp+edi-4]
mov	[esp+5Ch+var_38], ebp
mov	ebp, [esp+5Ch+var_24]
mov	ebp, [ebp+edi-4]
mov	[esp+5Ch+var_28], ebp
cmp	[esp+5Ch+var_38], ebp
ja	loc_6420711E
sub	edi, 4
cmp	[esp+5Ch+var_38], ebp
jb	loc_642074B7
inc	[esp+5Ch+var_30]
mov	ebp, [esp+5Ch+var_34]
mov	ebp, [ebp+edi-4]
mov	[esp+5Ch+var_38], ebp
mov	ebp, [esp+5Ch+var_24]
mov	ebp, [ebp+edi-4]
mov	[esp+5Ch+var_28], ebp
cmp	[esp+5Ch+var_38], ebp
ja	loc_6420711E
sub	edi, 4
cmp	[esp+5Ch+var_38], ebp
jb	loc_642074B7
			
mov	ebp, [esp+5Ch+var_24]
mov	[esp+5Ch+var_44], ecx
mov	[esp+5Ch+var_38], sb
mov	ecx, [esp+5Ch+var_30]
inc	ecx
mov	[esp+5Ch+var_24], ecx
cmp	[esp+5Ch+var_44], ecx
jle	loc_6420711E
mov	ecx, [esp+5Ch+var_34]
mov	sb, [ecx+edi-4]
mov	[esp+5Ch+var_28], edx
mov	ecx, [ebp+edi-4]
mov	[esp+5Ch+var_30], ecx
cmp	edx, ecx
ja	loc_6420711E
lea	edx, [edi-4]
mov	[esp+5Ch+var_40], edx
cmp	[esp+5Ch+var_28], ecx
jb	loc_642074B3
mov	ecx, [esp+5Ch+var_34]
mov	edx, [esp+5Ch+var_40]
mov	edx, [ecx+edx-4]
mov	[esp+5Ch+var_30], edx
mov	ecx, [esp+5Ch+var_40]
mov	edx, [ebp+ecx-4]
cmp	[esp+5Ch+var_30], edx
ja	loc_6420711E
lea	ecx, [edi-8]
mov	[esp+5Ch+var_20], ecx
cmp	[esp+5Ch+var_30], edx
jb	loc_642074B3
mov	edx, [esp+5Ch+var_34]
mov	edx, [edx+ecx-4]
mov	[esp+5Ch+var_30], edx
mov	ecx, [ebp+ecx-4]
cmp	[esp+5Ch+var_30], ecx
ja	loc_6420711E
lea	edx, [edi-0Ch]
mov	[esp+5Ch+var_20], edx
cmp	[esp+5Ch+var_30], ecx
jb	loc_642074B3
mov	ecx, [esp+5Ch+var_34]
mov	ecx, [ecx+edx-4]
mov	[esp+5Ch+var_30], ecx
mov	ecx, [ebp+edx-4]
cmp	[esp+5Ch+var_30], ecx
ja	loc_6420711E
sub	edi, 10h
cmp	[esp+5Ch+var_30], ecx
jb	loc_642074B3
mov	edx, [esp+5Ch+var_34]
mov	edx, [edx+edi-4]
mov	[esp+5Ch+var_30], edx
mov	ecx, [ebp+edi-4]
cmp	edx, ecx
ja	loc_6420711E
mov	edi, [esp+5Ch+var_40]
sub	edi, 10h
cmp	edx, ecx
jb	short loc_642074B3
mov	edx, [esp+5Ch+var_34]
mov	ecx, [edx+edi-4]
mov	[esp+5Ch+var_30], ecx
mov	ecx, [ebp+edi-4]
cmp	[esp+5Ch+var_30], ecx
ja	loc_6420711E
mov	edi, [esp+5Ch+var_40]
sub	edi, 14h
cmp	[esp+5Ch+var_30], ecx
jb	short loc_642074B3
mov	ecx, [esp+5Ch+var_34]
mov	edx, [ecx+edi-4]
mov	[esp+5Ch+var_30], edx
mov	ecx, [ebp+edi-4]
cmp	edx, ecx
ja	loc_6420711E
mov	edi, [esp+5Ch+var_40]
sub	edi, 18h
cmp	edx, ecx
jb	short loc_642074B3
mov	ecx, [esp+5Ch+var_24]
add	ecx, 7
mov	[esp+5Ch+var_30], ecx
mov	edx, [esp+5Ch+var_34]
mov	edx, [edx+edi-4]
mov	[esp+5Ch+var_28], edx
mov	ecx, [ebp+edi-4]
cmp	edx, ecx
ja	loc_6420711E
mov	edi, [esp+5Ch+var_40]
sub	edi, 1Ch
cmp	edx, ecx
jnb	loc_6420734F
			
mov	edx, [esp+5Ch+var_38]
			
xor	sa, sa
test	sb, sb
setz	al
mov	ebp, [esp+5Ch+var_2C]
mov	[ebp+8], eax
mov	[esp+5Ch+c], ebp
mov	[esp+5Ch+b], a_0
mov	[esp+5Ch+a], b_0
jmp	loc_64207131
			
xor	eax, eax
jmp	loc_642070C9
align 10h
public _s_tma_mp_add
			
push	ebp
push	edi
push	esi
push	ebx
sub	esp, 3Ch
mov	ebx, [esp+4Ch+a]
mov	esi, [esp+4Ch+b]
mov	eax, [ebx]
mov	[esp+4Ch+var_34], eax
mov	eax, [esi]
cmp	[esp+4Ch+var_34], min
jle	loc_64207B7C
mov	edx, [esp+4Ch+var_34]
mov	[esp+4Ch+var_30], edx
mov	[esp+4Ch+var_34], min
mov	[esp+4Ch+var_20], a_0
mov	ecx, [esp+4Ch+c]
mov	min, [ecx+4]
cmp	[esp+4Ch+var_30], eax
jge	loc_64207B95
mov	edi, [esp+4Ch+var_30]
inc	edi
mov	[esp+4Ch+var_38], edi
mov	[esp+4Ch+var_24], edi
			
mov	edi, [esp+4Ch+c]
mov	ebp, [edi]
mov	[esp+4Ch+var_2C], ebp
mov	ecx, [esp+4Ch+var_38]
mov	edx, [esp+4Ch+c]
mov	[edx], ecx
mov	a_0, [a_0+0Ch]
mov	b_0, [b_0+0Ch]
mov	edx, [edx+0Ch]
mov	edi, [esp+4Ch+var_34]
test	edi, edi
jle	loc_64207CE0
mov	edi, [esp+4Ch+var_34]
dec	edi
and	edi, 7
mov	eax, [tmpb]
add	eax, [tmpa]
mov	ecx, eax
shr	u, 1Ch
and	eax, 0FFFFFFFh
mov	[tmpc],	eax
mov	eax, 1
cmp	i, [esp+4Ch+var_34]
jz	loc_6420771E
test	edi, edi
jz	loc_6420765C
cmp	edi, 1
jz	loc_6420763B
cmp	edi, 2
jz	loc_64207624
cmp	edi, 3
jz	short loc_6420760D
cmp	edi, 4
jz	short loc_642075F6
cmp	edi, 5
jz	short loc_642075DF
cmp	edi, 6
jz	short loc_642075C8
mov	edi, [tmpb+4]
add	edi, u
add	edi, [tmpa+4]
mov	u, edi
shr	u, 1Ch
and	edi, 0FFFFFFFh
mov	[tmpc+i*4], edi
mov	i, 2
mov	ebp, [tmpb+i*4]
add	ebp, u
add	ebp, [tmpa+i*4]
mov	u, ebp
shr	u, 1Ch
and	ebp, 0FFFFFFFh
mov	[tmpc+i*4], ebp
inc	i
mov	edi, [tmpb+i*4]
add	edi, u
add	edi, [tmpa+i*4]
mov	u, edi
shr	u, 1Ch
and	edi, 0FFFFFFFh
mov	[tmpc+i*4], edi
inc	i
mov	ebp, [tmpb+i*4]
add	ebp, u
add	ebp, [tmpa+i*4]
mov	u, ebp
shr	u, 1Ch
and	ebp, 0FFFFFFFh
mov	[tmpc+i*4], ebp
inc	i
mov	edi, [tmpb+i*4]
add	edi, u
add	edi, [tmpa+i*4]
mov	u, edi
shr	u, 1Ch
and	edi, 0FFFFFFFh
mov	[tmpc+i*4], edi
inc	i
mov	ebp, [tmpb+i*4]
add	ebp, u
add	ebp, [tmpa+i*4]
mov	u, ebp
shr	u, 1Ch
and	ebp, 0FFFFFFFh
mov	[tmpc+i*4], ebp
inc	i
mov	edi, [tmpb+i*4]
add	edi, u
add	edi, [tmpa+i*4]
mov	u, edi
shr	u, 1Ch
and	edi, 0FFFFFFFh
mov	[tmpc+i*4], edi
inc	i
cmp	i, [esp+4Ch+var_34]
jz	loc_6420771E
			
add	u, [tmpb+i*4]
add	ecx, [tmpa+i*4]
mov	edi, ecx
shr	edi, 1Ch
and	ecx, 0FFFFFFFh
mov	[tmpc+i*4], ecx
lea	ebp, [i+1]
add	edi, [tmpb+ebp*4]
add	edi, [tmpa+ebp*4]
mov	ecx, edi
shr	ecx, 1Ch
and	edi, 0FFFFFFFh
mov	[tmpc+ebp*4], edi
lea	ebp, [i+2]
add	ecx, [tmpb+i*4]
add	ecx, [tmpa+i*4]
mov	edi, ecx
shr	edi, 1Ch
and	ecx, 0FFFFFFFh
mov	[tmpc+i*4], ecx
lea	i, [eax+3]
add	edi, [tmpb+i*4]
add	edi, [tmpa+i*4]
mov	ecx, edi
shr	ecx, 1Ch
and	edi, 0FFFFFFFh
mov	[tmpc+i*4], edi
lea	i, [eax+4]
add	ecx, [tmpb+i*4]
add	ecx, [tmpa+i*4]
mov	edi, ecx
shr	edi, 1Ch
and	ecx, 0FFFFFFFh
mov	[tmpc+i*4], ecx
lea	i, [eax+5]
add	edi, [tmpb+i*4]
add	edi, [tmpa+i*4]
mov	ecx, edi
shr	ecx, 1Ch
and	edi, 0FFFFFFFh
mov	[tmpc+i*4], edi
lea	i, [eax+6]
add	ecx, [tmpb+i*4]
add	ecx, [tmpa+i*4]
mov	edi, ecx
shr	edi, 1Ch
and	ecx, 0FFFFFFFh
mov	[tmpc+i*4], ecx
lea	i, [eax+7]
add	edi, [tmpb+i*4]
add	edi, [tmpa+i*4]
mov	ecx, edi
shr	u, 1Ch
and	edi, 0FFFFFFFh
mov	[tmpc+i*4], edi
add	eax, 8
cmp	i, [esp+4Ch+var_34]
jnz	loc_6420765C
			
mov	tmpa, [esp+4Ch+var_34]
lea	edi, [tmpc+ebx*4]
mov	[esp+4Ch+var_28], ebx
mov	tmpb, [esp+4Ch+var_30]
cmp	[esp+4Ch+var_34], esi
jz	loc_64207904
mov	i, [esp+4Ch+var_28]
cmp	esi, eax
jle	loc_64207904
shl	eax, 2
mov	ebp, [esp+4Ch+var_20]
add	eax, [ebp+0Ch]
mov	ebp, [esp+4Ch+var_28]
not	ebp
add	ebp, esi
and	ebp, 7
mov	esi, [eax]
add	esi, u
mov	u, esi
shr	u, 1Ch
and	esi, 0FFFFFFFh
mov	[tmpc],	esi
lea	tmpa, [tmpc+4]
mov	esi, [esp+4Ch+var_28]
inc	i
add	eax, 4
cmp	[esp+4Ch+var_30], i
jle	loc_642078F7
test	ebp, ebp
jz	loc_6420785E
cmp	ebp, 1
jz	loc_6420783C
cmp	ebp, 2
jz	loc_64207824
cmp	ebp, 3
jz	short loc_6420780C
cmp	ebp, 4
jz	short loc_642077F4
cmp	ebp, 5
jz	short loc_642077DC
cmp	ebp, 6
jz	short loc_642077C4
mov	ebp, [eax]
add	ebp, u
mov	u, ebp
shr	u, 1Ch
and	ebp, 0FFFFFFFh
mov	[tmpc],	ebp
add	tmpc, 4
inc	i
add	eax, 4
mov	ebp, [eax]
add	ebp, u
mov	u, ebp
shr	u, 1Ch
and	ebp, 0FFFFFFFh
mov	[tmpc],	ebp
add	tmpc, 4
inc	i
add	eax, 4
mov	ebp, [eax]
add	ebp, u
mov	u, ebp
shr	u, 1Ch
and	ebp, 0FFFFFFFh
mov	[tmpc],	ebp
add	tmpc, 4
inc	i
add	eax, 4
mov	ebp, [eax]
add	ebp, u
mov	u, ebp
shr	u, 1Ch
and	ebp, 0FFFFFFFh
mov	[tmpc],	ebp
add	tmpc, 4
inc	i
add	eax, 4
mov	ebp, [eax]
add	ebp, u
mov	u, ebp
shr	u, 1Ch
and	ebp, 0FFFFFFFh
mov	[tmpc],	ebp
add	tmpc, 4
inc	i
add	eax, 4
mov	ebp, [eax]
add	ebp, u
mov	u, ebp
shr	u, 1Ch
and	ebp, 0FFFFFFFh
mov	[tmpc],	ebp
add	tmpc, 4
inc	i
add	eax, 4
mov	ebp, [eax]
add	ebp, u
mov	u, ebp
shr	u, 1Ch
and	ebp, 0FFFFFFFh
mov	[tmpc],	ebp
add	tmpc, 4
inc	i
add	eax, 4
cmp	[esp+4Ch+var_30], i
jle	loc_642078F7
			
add	u, [eax]
mov	ebp, ecx
shr	ebp, 1Ch
and	ecx, 0FFFFFFFh
mov	[tmpc],	ecx
add	ebp, [eax+4]
mov	ecx, ebp
shr	ecx, 1Ch
and	ebp, 0FFFFFFFh
mov	[tmpc+4], ebp
add	ecx, [eax+8]
mov	ebp, ecx
shr	ebp, 1Ch
and	ecx, 0FFFFFFFh
mov	[tmpc+8], ecx
add	ebp, [eax+0Ch]
mov	ecx, ebp
shr	ecx, 1Ch
and	ebp, 0FFFFFFFh
mov	[tmpc+0Ch], ebp
add	ecx, [eax+10h]
mov	ebp, ecx
shr	ebp, 1Ch
and	ecx, 0FFFFFFFh
mov	[tmpc+10h], ecx
add	ebp, [eax+14h]
mov	ecx, ebp
shr	ecx, 1Ch
and	ebp, 0FFFFFFFh
mov	[tmpc+14h], ebp
add	ecx, [eax+18h]
mov	ebp, ecx
shr	ebp, 1Ch
and	ecx, 0FFFFFFFh
mov	[tmpc+18h], ecx
add	ebp, [eax+1Ch]
mov	ecx, ebp
shr	u, 1Ch
and	ebp, 0FFFFFFFh
mov	[tmpc+1Ch], ebp
add	tmpc, 20h
add	i, 8
add	eax, 20h
cmp	[esp+4Ch+var_30], i
jg	loc_6420785E
			
mov	eax, [esp+4Ch+var_28]
not	eax
add	eax, [esp+4Ch+var_38]
lea	edi, [edi+eax*4]
			
mov	[tmpc],	u
mov	esi, [esp+4Ch+var_38]
cmp	[esp+4Ch+var_2C], esi
jle	loc_642079ED
mov	tmpa, esi
not	ebx
add	ebx, [esp+4Ch+var_2C]
and	ebx, 7
mov	dword ptr [tmpc+4], 0
lea	i, [tmpc+8]
mov	u, esi
inc	i
cmp	[esp+4Ch+var_2C], i
jle	loc_642079ED
test	ebx, ebx
jz	short loc_642079AA
cmp	ebx, 1
jz	short loc_6420799A
cmp	ebx, 2
jz	short loc_64207990
cmp	ebx, 3
jz	short loc_64207986
cmp	ebx, 4
jz	short loc_6420797C
cmp	ebx, 5
jz	short loc_64207972
cmp	ebx, 6
jz	short loc_64207968
mov	dword ptr [tmpc], 0
lea	tmpc, [edi+0Ch]
mov	i, [esp+4Ch+var_38]
add	i, 2
mov	dword ptr [tmpc], 0
add	tmpc, 4
inc	i
mov	dword ptr [tmpc], 0
add	tmpc, 4
inc	i
mov	dword ptr [tmpc], 0
add	tmpc, 4
inc	i
mov	dword ptr [tmpc], 0
add	tmpc, 4
inc	i
mov	dword ptr [tmpc], 0
add	tmpc, 4
inc	i
mov	dword ptr [tmpc], 0
add	tmpc, 4
inc	i
cmp	[esp+4Ch+var_2C], i
jle	short loc_642079ED
			
mov	dword ptr [tmpc], 0
mov	dword ptr [tmpc+4], 0
mov	dword ptr [tmpc+8], 0
mov	dword ptr [tmpc+0Ch], 0
mov	dword ptr [tmpc+10h], 0
mov	dword ptr [tmpc+14h], 0
mov	dword ptr [tmpc+18h], 0
mov	dword ptr [tmpc+1Ch], 0
add	tmpc, 20h
add	i, 8
cmp	[esp+4Ch+var_2C], i
jg	short loc_642079AA
			
mov	edi, [esp+4Ch+var_38]
test	edi, edi
jle	loc_64207B5A
mov	i, [esp+4Ch+var_38]
dec	i
mov	tmpa, [edx+i*4]
test	ebx, ebx
jnz	loc_64207CF4
mov	esi, [esp+4Ch+var_38]
lea	eax, ds:0FFFFFFF8h[esi*4]
mov	ebx, i
and	ebx, 7
jz	loc_64207AB8
mov	[esp+4Ch+var_24], i
test	i, i
jle	loc_64207B54
mov	ebp, [tmpc+eax]
sub	eax, 4
test	ebp, ebp
jnz	loc_64207CD0
mov	esi, [esp+4Ch+var_38]
lea	ecx, [esi-2]
cmp	ebx, 1
jz	short loc_64207AB8
cmp	ebx, 2
jz	short loc_64207AA9
cmp	ebx, 3
jz	short loc_64207A9A
cmp	ebx, 4
jz	short loc_64207A8B
cmp	ebx, 5
jz	short loc_64207A7C
cmp	ebx, 6
jz	short loc_64207A6D
mov	ebx, [tmpc+eax]
sub	eax, 4
test	ebx, ebx
jnz	loc_64207CD0
dec	i
mov	edi, [tmpc+eax]
sub	eax, 4
test	edi, edi
jnz	loc_64207CD0
dec	i
mov	ebp, [tmpc+eax]
sub	eax, 4
test	ebp, ebp
jnz	loc_64207CD0
dec	i
mov	esi, [tmpc+eax]
sub	eax, 4
test	esi, esi
jnz	loc_64207CD0
dec	i
mov	ebx, [tmpc+eax]
sub	eax, 4
test	ebx, ebx
jnz	loc_64207CD0
dec	i
mov	edi, [tmpc+eax]
sub	eax, 4
test	edi, edi
jnz	loc_64207CD0
dec	i
			
test	i, i
jle	loc_64207B50
lea	esi, [eax-4]
mov	ebp, [tmpc+eax]
test	ebp, ebp
jnz	loc_64207CD0
lea	ebx, [i-1]
mov	i, ebx
lea	edi, [eax-8]
mov	esi, [tmpc+esi]
test	esi, esi
jnz	loc_64207CD0
dec	i
lea	esi, [eax-0Ch]
mov	ebp, [tmpc+edi]
test	ebp, ebp
jnz	loc_64207CD0
lea	i, [ebx-2]
lea	edi, [eax-10h]
mov	ebp, [tmpc+esi]
test	ebp, ebp
jnz	loc_64207CD0
lea	i, [ebx-3]
lea	esi, [eax-14h]
mov	edi, [tmpc+edi]
test	edi, edi
jnz	loc_64207CD0
lea	i, [ebx-4]
lea	edi, [eax-18h]
mov	ebp, [tmpc+esi]
test	ebp, ebp
jnz	loc_64207CD0
lea	i, [ebx-5]
lea	esi, [eax-1Ch]
mov	edi, [tmpc+edi]
test	edi, edi
jnz	loc_64207CD0
lea	i, [ebx-6]
sub	eax, 20h
mov	esi, [tmpc+esi]
test	esi, esi
jnz	loc_64207CD0
lea	i, [ebx-7]
test	i, i
jg	loc_64207AC0
mov	[esp+4Ch+var_24], i
mov	tmpc, [esp+4Ch+c]
mov	[edx], i
mov	i, [esp+4Ch+var_24]
test	ecx, ecx
jnz	loc_64207CF4
mov	edi, [esp+4Ch+c]
mov	dword ptr [edi+8], 0
xor	i, i
			
add	esp, 3Ch
pop	tmpa
pop	esi
pop	edi
pop	ebp
retn
align 4
mov	[esp+4Ch+var_30], min
mov	[esp+4Ch+var_20], b_0
mov	ecx, [esp+4Ch+c]
mov	min, [ecx+4]
cmp	[esp+4Ch+var_30], eax
jl	loc_64207522
mov	ebp, [esp+4Ch+var_30]
inc	ebp
mov	[esp+4Ch+var_38], ebp
mov	[esp+4Ch+var_24], ebp
cmp	eax, ebp
jge	loc_6420752F
mov	edi, [esp+4Ch+var_30]
add	edi, 41h
mov	ecx, 20h
mov	eax, [esp+4Ch+var_38]
cdq
idiv	ecx
sub	edi, edx
lea	ecx, ds:0[edi*4]
mov	[esp+4Ch+var_48], ecx 
mov	edx, [esp+4Ch+c]
mov	eax, [edx+0Ch]
mov	[esp+4Ch+var_4C], eax 
call	_realloc
mov	edx, eax
mov	eax, 0FFFFFFFEh
test	edx, edx
jz	short loc_64207B73
mov	ebp, [esp+4Ch+c]
mov	[ebp+0Ch], edx
mov	res, [ebp+4]
mov	[ebp+4], edi
cmp	edi, eax
jle	loc_6420752F
lea	ebp, [edx+eax*4]
mov	ecx, eax
not	ecx
add	ecx, edi
and	ecx, 7
mov	dword ptr [ebp+0], 0
lea	edx, [eax+1]
lea	eax, [ebp+4]
cmp	edi, edx
jle	loc_6420752F
test	ecx, ecx
jz	short loc_64207C8A
cmp	ecx, 1
jz	short loc_64207C78
cmp	ecx, 2
jz	short loc_64207C6E
cmp	ecx, 3
jz	short loc_64207C64
cmp	ecx, 4
jz	short loc_64207C5A
cmp	ecx, 5
jz	short loc_64207C50
cmp	ecx, 6
jz	short loc_64207C46
mov	dword ptr [eax], 0
inc	edx
add	eax, 4
mov	dword ptr [eax], 0
inc	edx
add	eax, 4
mov	dword ptr [eax], 0
inc	edx
add	eax, 4
mov	dword ptr [eax], 0
inc	edx
add	eax, 4
mov	dword ptr [eax], 0
inc	edx
add	eax, 4
mov	dword ptr [eax], 0
inc	edx
add	eax, 4
mov	dword ptr [eax], 0
inc	edx
add	eax, 4
cmp	edi, edx
jle	loc_6420752F
			
mov	dword ptr [eax], 0
mov	dword ptr [eax+4], 0
mov	dword ptr [eax+8], 0
mov	dword ptr [eax+0Ch], 0
mov	dword ptr [eax+10h], 0
mov	dword ptr [eax+14h], 0
mov	dword ptr [eax+18h], 0
mov	dword ptr [eax+1Ch], 0
add	edx, 8
add	eax, 20h
cmp	edi, edx
jg	short loc_64207C8A
jmp	loc_6420752F
			
mov	eax, [esp+4Ch+c]
mov	[eax], i
xor	eax, eax
add	esp, 3Ch
pop	ebx
pop	esi
pop	edi
pop	ebp
retn
mov	edi, tmpc
mov	[esp+4Ch+var_28], 0
xor	ecx, ecx
jmp	loc_64207729
align 4
			
xor	eax, eax
jmp	loc_64207B73
align 4
public _tma_mp_mul_d
			
push	ebp
push	edi
push	esi
push	ebx
sub	esp, 3Ch
mov	ebx, [esp+4Ch+a]
mov	eax, [ebx]
mov	[esp+4Ch+var_24], eax
mov	ecx, [esp+4Ch+c]
mov	edx, [ecx+4]
cmp	eax, edx
jge	loc_642081AC
			
mov	ecx, [esp+4Ch+c]
mov	eax, [ecx]
mov	[esp+4Ch+var_20], eax
mov	edi, [a_0+8]
mov	ebp, [esp+4Ch+c]
mov	[ebp+8], edi
mov	edi, [a_0+0Ch]
mov	edx, [ebp+0Ch]
mov	[esp+4Ch+var_30], edx
mov	esi, edx
mov	a_0, [esp+4Ch+var_24]
test	ebx, ebx
jle	loc_642082D4
mov	ebx, [esp+4Ch+var_24]
dec	ebx
and	ebx, 3
mov	eax, [esp+4Ch+b]
mul	dword ptr [tmpa]
mov	[esp+4Ch+var_2C], eax
mov	[esp+4Ch+var_28], edx
mov	eax, [esp+4Ch+var_2C]
and	eax, 0FFFFFFFh
mov	edx, [esp+4Ch+var_30]
mov	[edx], eax
mov	edx, [esp+4Ch+var_2C]
mov	ecx, [esp+4Ch+var_28]
shrd	edx, ecx, 1Ch
shr	ecx, 1Ch
mov	ecx, edx
mov	[esp+4Ch+var_34], 1
mov	tmpc, [esp+4Ch+var_24]
cmp	[esp+4Ch+var_34], esi
jz	loc_64207EFA
test	ebx, ebx
jz	loc_64207E42
cmp	ebx, 1
jz	short loc_64207E06
cmp	ebx, 2
jz	short loc_64207DD6
xor	ebx, ebx
mov	eax, [esp+4Ch+b]
mul	dword ptr [tmpa+4]
add	u, eax
adc	ebx, edx
mov	esi, ecx
and	esi, 0FFFFFFFh
mov	edx, [esp+4Ch+var_34]
mov	ebp, [esp+4Ch+var_30]
mov	[ebp+edx*4+0], esi
shrd	ecx, ebx, 1Ch
shr	ebx, 1Ch
mov	[esp+4Ch+var_34], 2
xor	ebx, ebx
mov	eax, [esp+4Ch+b]
mov	ebp, [esp+4Ch+var_34]
mul	dword ptr [tmpa+ebp*4]
add	u, eax
adc	ebx, edx
mov	esi, ecx
and	esi, 0FFFFFFFh
mov	edx, [esp+4Ch+var_34]
mov	eax, [esp+4Ch+var_30]
mov	[eax+edx*4], esi
shrd	ecx, ebx, 1Ch
shr	ebx, 1Ch
inc	edx
mov	[esp+4Ch+var_34], edx
xor	ebx, ebx
mov	eax, [esp+4Ch+b]
mov	ebp, [esp+4Ch+var_34]
mul	dword ptr [tmpa+ebp*4]
add	u, eax
adc	ebx, edx
mov	esi, ecx
and	esi, 0FFFFFFFh
mov	edx, [esp+4Ch+var_34]
mov	eax, [esp+4Ch+var_30]
mov	[eax+edx*4], esi
shrd	ecx, ebx, 1Ch
shr	ebx, 1Ch
inc	edx
mov	[esp+4Ch+var_34], edx
mov	ebx, [esp+4Ch+var_24]
cmp	edx, ebx
jz	loc_64207EFA
			
xor	ebx, ebx
mov	eax, [esp+4Ch+b]
mov	ebp, [esp+4Ch+var_34]
mul	dword ptr [tmpa+ebp*4]
add	u, eax
adc	ebx, edx
mov	esi, ecx
and	esi, 0FFFFFFFh
mov	edx, [esp+4Ch+var_34]
mov	eax, [esp+4Ch+var_30]
mov	[eax+edx*4], esi
shrd	ecx, ebx, 1Ch
shr	ebx, 1Ch
mov	esi, edx
inc	esi
xor	ebx, ebx
mov	eax, [esp+4Ch+b]
mul	dword ptr [tmpa+esi*4]
add	ecx, eax
adc	ebx, edx
mov	ebp, ecx
and	ebp, 0FFFFFFFh
mov	eax, [esp+4Ch+var_30]
mov	[eax+esi*4], ebp
shrd	ecx, ebx, 1Ch
shr	ebx, 1Ch
mov	esi, [esp+4Ch+var_34]
add	ix, 2
xor	ebx, ebx
mov	eax, [esp+4Ch+b]
mul	dword ptr [tmpa+ix*4]
add	ecx, eax
adc	ebx, edx
mov	edx, ecx
and	edx, 0FFFFFFFh
mov	eax, [esp+4Ch+var_30]
mov	[eax+ix*4], edx
shrd	ecx, ebx, 1Ch
shr	ebx, 1Ch
mov	ix, [esp+4Ch+var_34]
add	ix, 3
xor	ebx, ebx
mov	eax, [esp+4Ch+b]
mul	dword ptr [tmpa+ix*4]
add	ecx, eax
adc	ebx, edx
mov	ebp, ecx
and	ebp, 0FFFFFFFh
mov	edx, [esp+4Ch+var_30]
mov	[edx+ix*4], ebp
shrd	ecx, ebx, 1Ch
shr	ebx, 1Ch
add	[esp+4Ch+var_34], 4
mov	ebx, [esp+4Ch+var_24]
cmp	[esp+4Ch+var_34], ebx
jnz	loc_64207E42
			
mov	ebp, [esp+4Ch+var_24]
mov	tmpa, [esp+4Ch+var_30]
lea	ix, [edi+ebp*4]
mov	ebx, ebp
inc	ebx
mov	edx, ebx
mov	edi, ebp
add	ix, 2
mov	[tmpc],	u
cmp	[esp+4Ch+var_20], edx
jle	loc_64207FFC
mov	ebp, [esp+4Ch+var_20]
sub	ebp, ix
and	ebp, 7
mov	dword ptr [tmpc+4], 0
lea	edx, [tmpc+8]
lea	u, [ix+1]
cmp	edi, [esp+4Ch+var_20]
jge	loc_64207FFC
test	ebp, ebp
jz	short loc_64207FAE
cmp	ebp, 1
jz	short loc_64207F9B
cmp	ebp, 2
jz	short loc_64207F91
cmp	ebp, 3
jz	short loc_64207F87
cmp	ebp, 4
jz	short loc_64207F7D
cmp	ebp, 5
jz	short loc_64207F73
cmp	ebp, 6
jz	short loc_64207F69
mov	dword ptr [tmpc], 0
lea	tmpc, [esi+0Ch]
lea	ecx, [ix+2]
mov	dword ptr [tmpc], 0
add	tmpc, 4
inc	ix
mov	dword ptr [tmpc], 0
add	tmpc, 4
inc	ix
mov	dword ptr [tmpc], 0
add	tmpc, 4
inc	ix
mov	dword ptr [tmpc], 0
add	tmpc, 4
inc	ix
mov	dword ptr [tmpc], 0
add	tmpc, 4
inc	ix
mov	dword ptr [tmpc], 0
add	tmpc, 4
inc	ix
lea	eax, [ix-1]
cmp	eax, [esp+4Ch+var_20]
jge	short loc_64207FFC
mov	eax, [esp+4Ch+var_30]
mov	dword ptr [tmpc], 0
mov	dword ptr [tmpc+4], 0
mov	dword ptr [tmpc+8], 0
mov	dword ptr [tmpc+0Ch], 0
mov	dword ptr [tmpc+10h], 0
mov	dword ptr [tmpc+14h], 0
mov	dword ptr [tmpc+18h], 0
mov	dword ptr [tmpc+1Ch], 0
add	tmpc, 20h
add	ix, 8
lea	esi, [ix-1]
cmp	esi, [esp+4Ch+var_20]
jl	short loc_64207FB2
mov	[esp+4Ch+var_30], eax
			
mov	ix, [esp+4Ch+c]
mov	[ecx], ebx
test	ebx, ebx
jle	loc_6420818E
mov	ecx, [esp+4Ch+var_24]
mov	tmpc, [esp+4Ch+var_30]
mov	ebx, [edx+ecx*4]
test	ebx, ebx
jnz	loc_642082EC
mov	edx, ecx
lea	ix, [ecx-1]
lea	ecx, ds:0[edi*4]
mov	tmpc, edx
and	esi, 7
jz	loc_642080F1
mov	ebx, edx
test	edx, edx
jle	loc_64208188
mov	eax, [esp+4Ch+var_30]
mov	ebp, [eax+ecx]
mov	edx, edi
sub	ecx, 4
test	ebp, ebp
jnz	loc_64208178
cmp	esi, 1
jz	loc_642080F1
cmp	esi, 2
jz	short loc_642080DB
cmp	esi, 3
jz	short loc_642080C6
cmp	esi, 4
jz	short loc_642080B0
cmp	esi, 5
jz	short loc_6420809B
cmp	esi, 6
jz	short loc_64208085
mov	ebx, edi
mov	eax, [eax+ecx]
dec	edx
sub	ecx, 4
test	eax, eax
jnz	loc_64208178
mov	ebx, edx
mov	ebp, [esp+4Ch+var_30]
mov	esi, [ebp+ecx+0]
dec	edx
sub	ecx, 4
test	esi, esi
jnz	loc_64208178
mov	ebx, edx
mov	edi, [esp+4Ch+var_30]
mov	eax, [edi+ecx]
dec	edx
sub	ecx, 4
test	eax, eax
jnz	loc_64208178
mov	ebx, edx
mov	ebp, [esp+4Ch+var_30]
mov	esi, [ebp+ecx+0]
dec	edx
sub	ecx, 4
test	esi, esi
jnz	loc_64208178
mov	ebx, edx
mov	edi, [esp+4Ch+var_30]
mov	eax, [edi+ecx]
dec	edx
sub	ecx, 4
test	eax, eax
jnz	loc_64208178
mov	ebx, edx
mov	ebp, [esp+4Ch+var_30]
mov	esi, [ebp+ecx+0]
dec	edx
sub	ecx, 4
test	esi, esi
jnz	loc_64208178
			
mov	eax, [esp+4Ch+var_30]
mov	ebx, edx
test	edx, edx
jle	loc_64208188
lea	edi, [edx-1]
lea	esi, [ecx-4]
mov	ebp, [eax+ecx]
test	ebp, ebp
jnz	short loc_64208178
mov	ebx, edi
lea	ebp, [edx-2]
lea	edi, [ecx-8]
mov	esi, [eax+esi]
test	esi, esi
jnz	short loc_64208178
mov	ebx, ebp
lea	ebp, [edx-3]
lea	esi, [ecx-0Ch]
mov	edi, [eax+edi]
test	edi, edi
jnz	short loc_64208178
mov	ebx, ebp
lea	ebp, [edx-4]
lea	edi, [ecx-10h]
mov	esi, [eax+esi]
test	esi, esi
jnz	short loc_64208178
mov	ebx, ebp
lea	ebp, [edx-5]
lea	esi, [ecx-14h]
mov	edi, [eax+edi]
test	edi, edi
jnz	short loc_64208178
mov	ebx, ebp
lea	ebp, [edx-6]
lea	edi, [ecx-18h]
mov	esi, [eax+esi]
test	esi, esi
jnz	short loc_64208178
mov	ebx, ebp
lea	ebp, [edx-7]
lea	esi, [ecx-1Ch]
mov	edi, [eax+edi]
test	edi, edi
jnz	short loc_64208178
mov	ebx, ebp
sub	edx, 8
sub	ecx, 20h
mov	ebp, [eax+esi]
test	ebp, ebp
jz	short loc_642080F5
lea	esi, [esi+0]
			
mov	edi, [esp+4Ch+c]
mov	[edi], ebx
xor	eax, eax
			
add	esp, 3Ch
pop	ebx
pop	tmpc
pop	ix
pop	ebp
retn
			
mov	eax, [esp+4Ch+c]
mov	[eax], edx
test	ebx, ebx
jnz	loc_642082EC
mov	esi, [esp+4Ch+c]
mov	dword ptr [esi+8], 0
xor	eax, eax
add	esp, 3Ch
pop	ebx
pop	esi
pop	ix
pop	ebp
retn
align 4
inc	eax
cmp	edx, eax
jge	loc_64207D1C
mov	esi, [esp+4Ch+var_24]
add	esi, 41h
mov	edi, 20h
cdq
idiv	edi
sub	esi, edx
lea	edx, ds:0[esi*4]
mov	[esp+4Ch+var_48], edx 
mov	eax, [ecx+0Ch]
mov	[esp+4Ch+var_4C], eax 
call	_realloc
mov	ecx, eax
mov	eax, 0FFFFFFFEh
test	ecx, ecx
jz	short loc_64208180
mov	res, [esp+4Ch+c]
mov	[eax+0Ch], ecx
mov	edx, [eax+4]
mov	[eax+4], esi
cmp	esi, edx
jle	loc_642082F3
lea	eax, [ecx+edx*4]
mov	ecx, edx
not	ecx
add	ecx, esi
and	ecx, 7
mov	dword ptr [eax], 0
inc	edx
add	eax, 4
cmp	esi, edx
jle	loc_642082C7
test	ecx, ecx
jz	short loc_64208286
cmp	ecx, 1
jz	short loc_64208278
cmp	ecx, 2
jz	short loc_6420826E
cmp	ecx, 3
jz	short loc_64208264
cmp	ecx, 4
jz	short loc_6420825A
cmp	ecx, 5
jz	short loc_64208250
cmp	ecx, 6
jz	short loc_64208246
mov	dword ptr [eax], 0
inc	edx
add	eax, 4
mov	dword ptr [eax], 0
inc	edx
add	eax, 4
mov	dword ptr [eax], 0
inc	edx
add	eax, 4
mov	dword ptr [eax], 0
inc	edx
add	eax, 4
mov	dword ptr [eax], 0
inc	edx
add	eax, 4
mov	dword ptr [eax], 0
inc	edx
add	eax, 4
mov	dword ptr [eax], 0
inc	edx
add	eax, 4
cmp	esi, edx
jle	short loc_642082C7
			
mov	dword ptr [eax], 0
mov	dword ptr [eax+4], 0
mov	dword ptr [eax+8], 0
mov	dword ptr [eax+0Ch], 0
mov	dword ptr [eax+10h], 0
mov	dword ptr [eax+14h], 0
mov	dword ptr [eax+18h], 0
mov	dword ptr [eax+1Ch], 0
add	edx, 8
add	eax, 20h
cmp	esi, edx
jg	short loc_64208286
			
mov	esi, [a_0]
mov	[esp+4Ch+var_24], esi
jmp	loc_64207D1C
align 4
mov	tmpa, 2
mov	edx, 1
xor	ecx, ecx
mov	ebp, [esp+4Ch+var_24]
lea	ebx, [ebp+1]
jmp	loc_64207F0F
			
xor	eax, eax
jmp	loc_64208180
mov	ecx, [a_0]
mov	[esp+4Ch+var_24], ecx
jmp	loc_64207D1C
align 10h
public _tma_mp_mul_2
			
push	ebp
push	edi
push	esi
push	ebx
sub	esp, 3Ch
mov	ebx, [esp+4Ch+b]
mov	eax, [esp+4Ch+a]
mov	eax, [eax]
mov	[esp+4Ch+var_24], eax
mov	[esp+4Ch+var_30], eax
mov	ecx, [ebx+4]
cmp	eax, ecx
jge	loc_6420863C
mov	eax, [b_0]
mov	[esp+4Ch+var_2C], eax
mov	esi, [esp+4Ch+var_24]
mov	[b_0], esi
mov	ebp, [esp+4Ch+a]
mov	ecx, [ebp+0Ch]
mov	edx, [b_0+0Ch]
mov	eax, [ebp+0]
mov	[esp+4Ch+var_28], eax
test	eax, eax
jle	loc_6420853D
mov	ebp, eax
dec	ebp
and	ebp, 7
mov	edi, [tmpa]
mov	esi, edi
shr	rr, 1Bh
shl	edi, 1
and	edi, 0FFFFFFFh
mov	[tmpb],	edi
mov	eax, 1
mov	edi, rr
cmp	x, [esp+4Ch+var_28]
jz	loc_64208525
test	ebp, ebp
jz	loc_64208453
cmp	ebp, 1
jz	loc_64208433
cmp	ebp, 2
jz	loc_6420841B
cmp	ebp, 3
jz	short loc_64208403
cmp	ebp, 4
jz	short loc_642083EB
cmp	ebp, 5
jz	short loc_642083D3
cmp	ebp, 6
jz	short loc_642083BB
mov	ebp, [tmpa+4]
lea	rr, [ebp+ebp+0]
or	esi, r
and	esi, 0FFFFFFFh
mov	[tmpb+x*4], esi
mov	x, 2
mov	r, ebp
shr	r, 1Bh
mov	ebp, [tmpa+x*4]
lea	rr, [ebp+ebp+0]
or	esi, r
and	esi, 0FFFFFFFh
mov	[tmpb+x*4], esi
inc	x
mov	r, ebp
shr	r, 1Bh
mov	ebp, [tmpa+x*4]
lea	rr, [ebp+ebp+0]
or	esi, r
and	esi, 0FFFFFFFh
mov	[tmpb+x*4], esi
inc	x
mov	r, ebp
shr	r, 1Bh
mov	ebp, [tmpa+x*4]
lea	rr, [ebp+ebp+0]
or	esi, r
and	esi, 0FFFFFFFh
mov	[tmpb+x*4], esi
inc	x
mov	r, ebp
shr	r, 1Bh
mov	ebp, [tmpa+x*4]
lea	rr, [ebp+ebp+0]
or	esi, r
and	esi, 0FFFFFFFh
mov	[tmpb+x*4], esi
inc	x
mov	r, ebp
shr	r, 1Bh
mov	ebp, [tmpa+x*4]
lea	rr, [ebp+ebp+0]
or	esi, r
and	esi, 0FFFFFFFh
mov	[tmpb+x*4], esi
inc	x
mov	r, ebp
shr	r, 1Bh
mov	ebp, [tmpa+x*4]
mov	rr, ebp
shr	rr, 1Bh
shl	ebp, 1
or	ebp, r
and	ebp, 0FFFFFFFh
mov	[tmpb+x*4], ebp
inc	x
cmp	x, [esp+4Ch+var_28]
jz	loc_64208525
mov	[esp+4Ch+var_20], b_0
mov	r, [tmpa+x*4]
mov	b_0, edi
shr	ebx, 1Bh
shl	edi, 1
or	edi, rr
and	edi, 0FFFFFFFh
mov	[tmpb+x*4], edi
lea	edi, [x+1]
mov	ebp, [tmpa+edi*4]
mov	rr, ebp
shr	esi, 1Bh
shl	ebp, 1
or	ebx, ebp
and	ebx, 0FFFFFFFh
mov	[tmpb+edi*4], ebx
lea	edi, [x+2]
mov	ebp, [tmpa+x*4]
mov	ebx, ebp
shr	ebx, 1Bh
shl	ebp, 1
or	esi, ebp
and	esi, 0FFFFFFFh
mov	[tmpb+x*4], esi
lea	x, [eax+3]
mov	ebp, [tmpa+x*4]
mov	esi, ebp
shr	esi, 1Bh
shl	ebp, 1
or	ebx, ebp
and	ebx, 0FFFFFFFh
mov	[tmpb+x*4], ebx
lea	x, [eax+4]
mov	ebp, [tmpa+x*4]
mov	ebx, ebp
shr	ebx, 1Bh
shl	ebp, 1
or	esi, ebp
and	esi, 0FFFFFFFh
mov	[tmpb+x*4], esi
lea	x, [eax+5]
mov	ebp, [tmpa+x*4]
mov	esi, ebp
shr	esi, 1Bh
shl	ebp, 1
or	ebx, ebp
and	ebx, 0FFFFFFFh
mov	[tmpb+x*4], ebx
lea	x, [eax+6]
mov	ebp, [tmpa+x*4]
mov	ebx, ebp
shr	ebx, 1Bh
shl	ebp, 1
or	esi, ebp
and	esi, 0FFFFFFFh
mov	[tmpb+x*4], esi
lea	x, [eax+7]
mov	ebp, [tmpa+x*4]
mov	esi, ebp
shr	rr, 1Bh
shl	ebp, 1
or	ebx, ebp
and	ebx, 0FFFFFFFh
mov	[tmpb+x*4], ebx
add	eax, 8
cmp	x, [esp+4Ch+var_28]
jnz	loc_64208457
mov	ebx, [esp+4Ch+var_20]
			
lea	x, [tmpb+x*4]
test	rr, rr
jz	short loc_6420853D
mov	dword ptr [tmpb], 1
mov	tmpa, [esp+4Ch+var_24]
inc	ecx
mov	[esp+4Ch+var_30], ecx
mov	[b_0], ecx
			
mov	tmpb, [esp+4Ch+var_30]
cmp	[esp+4Ch+var_2C], eax
jle	loc_64208628
lea	rr, [tmpb+eax*4]
mov	tmpa, eax
not	ecx
add	ecx, [esp+4Ch+var_2C]
and	ecx, 7
mov	dword ptr [tmpb], 0
lea	eax, [tmpb+4]
mov	edx, [esp+4Ch+var_30]
inc	x
cmp	[esp+4Ch+var_2C], x
jle	loc_64208628
test	ecx, ecx
jz	short loc_642085E5
cmp	ecx, 1
jz	short loc_642085D5
cmp	ecx, 2
jz	short loc_642085CB
cmp	ecx, 3
jz	short loc_642085C1
cmp	ecx, 4
jz	short loc_642085B7
cmp	ecx, 5
jz	short loc_642085AD
cmp	ecx, 6
jz	short loc_642085A3
mov	dword ptr [tmpb], 0
lea	tmpb, [esi+8]
mov	x, [esp+4Ch+var_30]
add	x, 2
mov	dword ptr [tmpb], 0
add	tmpb, 4
inc	x
mov	dword ptr [tmpb], 0
add	tmpb, 4
inc	x
mov	dword ptr [tmpb], 0
add	tmpb, 4
inc	x
mov	dword ptr [tmpb], 0
add	tmpb, 4
inc	x
mov	dword ptr [tmpb], 0
add	tmpb, 4
inc	x
mov	dword ptr [tmpb], 0
add	tmpb, 4
inc	x
cmp	[esp+4Ch+var_2C], x
jle	short loc_64208628
			
mov	dword ptr [tmpb], 0
mov	dword ptr [tmpb+4], 0
mov	dword ptr [tmpb+8], 0
mov	dword ptr [tmpb+0Ch], 0
mov	dword ptr [tmpb+10h], 0
mov	dword ptr [tmpb+14h], 0
mov	dword ptr [tmpb+18h], 0
mov	dword ptr [tmpb+1Ch], 0
add	tmpb, 20h
add	x, 8
cmp	[esp+4Ch+var_2C], x
jg	short loc_642085E5
			
mov	x, [esp+4Ch+a]
mov	tmpb, [edx+8]
mov	[b_0+8], eax
xor	eax, eax
add	esp, 3Ch
pop	b_0
pop	rr
pop	r
pop	ebp
retn
inc	eax
cmp	ecx, eax
jl	short loc_6420864E
			
mov	edi, [esp+4Ch+var_24]
mov	[esp+4Ch+var_30], edi
jmp	loc_64208324
mov	esi, [esp+4Ch+var_24]
add	esi, 41h
mov	ebp, 20h
cdq
idiv	ebp
sub	esi, edx
lea	ecx, ds:0[esi*4]
mov	[esp+4Ch+var_48], ecx 
mov	edx, [b_0+0Ch]
mov	[esp+4Ch+var_4C], edx 
call	_realloc
mov	ecx, eax
mov	eax, 0FFFFFFFEh
test	ecx, ecx
jz	short loc_64208634
mov	[b_0+0Ch], ecx
mov	edx, [b_0+4]
mov	[b_0+4], esi
cmp	esi, edx
jle	loc_6420876B
lea	res, [ecx+edx*4]
mov	ecx, edx
not	ecx
add	ecx, esi
and	ecx, 7
mov	dword ptr [eax], 0
inc	edx
add	eax, 4
cmp	esi, edx
jle	loc_6420875C
test	ecx, ecx
jz	short loc_6420871B
cmp	ecx, 1
jz	short loc_6420870D
cmp	ecx, 2
jz	short loc_64208703
cmp	ecx, 3
jz	short loc_642086F9
cmp	ecx, 4
jz	short loc_642086EF
cmp	ecx, 5
jz	short loc_642086E5
cmp	ecx, 6
jz	short loc_642086DB
mov	dword ptr [eax], 0
inc	edx
add	eax, 4
mov	dword ptr [eax], 0
inc	edx
add	eax, 4
mov	dword ptr [eax], 0
inc	edx
add	eax, 4
mov	dword ptr [eax], 0
inc	edx
add	eax, 4
mov	dword ptr [eax], 0
inc	edx
add	eax, 4
mov	dword ptr [eax], 0
inc	edx
add	eax, 4
mov	dword ptr [eax], 0
inc	edx
add	eax, 4
cmp	esi, edx
jle	short loc_6420875C
			
mov	dword ptr [eax], 0
mov	dword ptr [eax+4], 0
mov	dword ptr [eax+8], 0
mov	dword ptr [eax+0Ch], 0
mov	dword ptr [eax+10h], 0
mov	dword ptr [eax+14h], 0
mov	dword ptr [eax+18h], 0
mov	dword ptr [eax+1Ch], 0
add	edx, 8
add	eax, 20h
cmp	esi, edx
jg	short loc_6420871B
			
mov	edx, [esp+4Ch+a]
mov	ecx, [edx]
mov	[esp+4Ch+var_24], ecx
jmp	loc_64208641
mov	res, [esp+4Ch+a]
mov	esi, [eax]
mov	[esp+4Ch+var_24], esi
jmp	loc_64208641
align 4
public _tma_mp_sub_d
			
push	ebp
push	edi
push	esi
push	ebx
sub	esp, 2Ch
mov	esi, [esp+3Ch+a]
mov	ebp, [esp+3Ch+b]
mov	ebx, [esp+3Ch+c]
mov	edi, [esi]
mov	edx, [ebx+4]
cmp	edi, edx
jge	loc_64208C4C
			
cmp	dword ptr [a_0+8], 1
jz	loc_64208D8C
mov	ecx, [c_0]
mov	[esp+3Ch+var_2C], ecx
mov	edi, [a_0+0Ch]
mov	res, [c_0+0Ch]
mov	ecx, [a_0]
cmp	ecx, 1
jz	loc_64208D70
test	ecx, ecx
jnz	loc_64208A48
mov	[eax], b_0
lea	edx, [eax+4]
mov	[esp+3Ch+var_28], edx
mov	dword ptr [c_0+8], 1
mov	dword ptr [c_0], 1
mov	tmpa, 2
mov	ecx, 1
mov	edx, 1
			
cmp	ix, [esp+3Ch+var_2C]
jge	loc_642088D4
mov	ebp, [esp+3Ch+var_2C]
sub	ebp, edi
and	ebp, 7
mov	ix, [esp+3Ch+var_28]
mov	dword ptr [edx], 0
add	edx, 4
lea	mu, [ix+1]
cmp	[esp+3Ch+var_2C], edi
jle	loc_642088D4
test	ebp, ebp
jz	short loc_6420888E
cmp	ebp, 1
jz	short loc_6420887B
cmp	ebp, 2
jz	short loc_64208871
cmp	ebp, 3
jz	short loc_64208867
cmp	ebp, 4
jz	short loc_6420885D
cmp	ebp, 5
jz	short loc_64208853
cmp	ebp, 6
jz	short loc_64208849
mov	dword ptr [tmpc], 0
mov	tmpc, [esp+3Ch+var_28]
add	tmpc, 8
lea	esi, [ix+2]
mov	dword ptr [tmpc], 0
add	tmpc, 4
inc	ix
mov	dword ptr [tmpc], 0
add	tmpc, 4
inc	ix
mov	dword ptr [tmpc], 0
add	tmpc, 4
inc	ix
mov	dword ptr [tmpc], 0
add	tmpc, 4
inc	ix
mov	dword ptr [tmpc], 0
add	tmpc, 4
inc	ix
mov	dword ptr [tmpc], 0
add	tmpc, 4
inc	ix
lea	ebp, [ix-1]
cmp	[esp+3Ch+var_2C], ebp
jle	short loc_642088D4
			
mov	dword ptr [tmpc], 0
mov	dword ptr [tmpc+4], 0
mov	dword ptr [tmpc+8], 0
mov	dword ptr [tmpc+0Ch], 0
mov	dword ptr [tmpc+10h], 0
mov	dword ptr [tmpc+14h], 0
mov	dword ptr [tmpc+18h], 0
mov	dword ptr [tmpc+1Ch], 0
add	tmpc, 20h
add	ix, 8
lea	edi, [ix-1]
cmp	[esp+3Ch+var_2C], edi
jg	short loc_6420888E
			
test	ecx, ecx
jle	loc_64208A2D
lea	ix, [ecx-1]
mov	tmpc, [eax+esi*4]
test	edx, edx
jnz	loc_64208F3C
lea	edx, ds:0FFFFFFF8h[ecx*4]
mov	ix, esi
and	edi, 7
jz	loc_6420898F
mov	ecx, esi
test	esi, esi
jle	loc_64208A2B
mov	ebp, [eax+edx]
sub	edx, 4
test	ebp, ebp
jnz	loc_64208C40
lea	esi, [esi-1]
cmp	edi, 1
jz	short loc_6420898F
cmp	edi, 2
jz	short loc_64208980
cmp	edi, 3
jz	short loc_64208971
cmp	edi, 4
jz	short loc_64208962
cmp	edi, 5
jz	short loc_64208953
cmp	edi, 6
jz	short loc_64208944
mov	ecx, [eax+edx]
sub	edx, 4
test	ecx, ecx
jnz	loc_64208C40
dec	esi
mov	edi, [eax+edx]
sub	edx, 4
test	edi, edi
jnz	loc_64208C40
dec	esi
mov	ebp, [eax+edx]
sub	edx, 4
test	ebp, ebp
jnz	loc_64208C40
dec	esi
mov	ecx, [eax+edx]
sub	edx, 4
test	ecx, ecx
jnz	loc_64208C40
dec	esi
mov	edi, [eax+edx]
sub	edx, 4
test	edi, edi
jnz	loc_64208C40
dec	esi
mov	ebp, [eax+edx]
sub	edx, 4
test	ebp, ebp
jnz	loc_64208C40
dec	esi
			
mov	ecx, esi
test	esi, esi
jle	loc_64208A2B
lea	edi, [edx-4]
mov	ecx, [eax+edx]
test	ecx, ecx
jnz	loc_64208C40
lea	ecx, [esi-1]
mov	esi, ecx
lea	ebp, [edx-8]
mov	edi, [eax+edi]
test	edi, edi
jnz	loc_64208C40
dec	esi
lea	edi, [edx-0Ch]
mov	ebp, [eax+ebp]
test	ebp, ebp
jnz	loc_64208C40
lea	esi, [ecx-2]
lea	ebp, [edx-10h]
mov	edi, [eax+edi]
test	edi, edi
jnz	loc_64208C40
lea	esi, [ecx-3]
lea	edi, [edx-14h]
mov	ebp, [eax+ebp]
test	ebp, ebp
jnz	loc_64208C40
lea	esi, [ecx-4]
lea	ebp, [edx-18h]
mov	edi, [eax+edi]
test	edi, edi
jnz	loc_64208C40
lea	esi, [ecx-5]
lea	edi, [edx-1Ch]
mov	ebp, [eax+ebp]
test	ebp, ebp
jnz	loc_64208C40
lea	esi, [ecx-6]
sub	edx, 20h
mov	edi, [eax+edi]
test	edi, edi
jnz	loc_64208C40
lea	esi, [ecx-7]
mov	ecx, esi
test	esi, esi
jg	loc_64208999
			
mov	[c_0], esi
test	ecx, ecx
jnz	loc_64208F3C
mov	dword ptr [c_0+8], 0
xor	eax, eax
			
add	esp, 2Ch
pop	c_0
pop	mu
pop	ix
pop	ebp
retn
align 4
mov	edx, [tmpa]
mov	dword ptr [c_0+8], 0
mov	[c_0], ecx
sub	edx, b_0
mov	b_0, edx
and	edx, 0FFFFFFFh
mov	[eax], edx
lea	edx, [eax+4]
mov	[esp+3Ch+var_28], edx
mov	a_0, [a_0]
mov	[esp+3Ch+var_24], esi
dec	esi
jle	loc_64208F50
mov	esi, ebp
shr	mu, 1Fh
mov	ebp, [esp+3Ch+var_24]
sub	ebp, 2
and	ebp, 7
mov	edx, [tmpa+4]
sub	edx, mu
mov	mu, edx
shr	mu, 1Fh
and	edx, 0FFFFFFFh
mov	[eax+4], edx
mov	edx, 2
cmp	ix, [esp+3Ch+var_24]
jz	loc_64208C2A
test	ebp, ebp
jz	loc_64208B68
cmp	ebp, 1
jz	loc_64208B4A
cmp	ebp, 2
jz	short loc_64208B36
cmp	ebp, 3
jz	short loc_64208B22
cmp	ebp, 4
jz	short loc_64208B0E
cmp	ebp, 5
jz	short loc_64208AFA
cmp	ebp, 6
jz	short loc_64208AE6
mov	ebp, [tmpa+8]
sub	ebp, mu
mov	mu, ebp
shr	mu, 1Fh
and	ebp, 0FFFFFFFh
mov	[eax+ix*4], ebp
mov	ix, 3
mov	ebp, [tmpa+ix*4]
sub	ebp, mu
mov	mu, ebp
shr	mu, 1Fh
and	ebp, 0FFFFFFFh
mov	[eax+ix*4], ebp
inc	ix
mov	ebp, [tmpa+ix*4]
sub	ebp, mu
mov	mu, ebp
shr	mu, 1Fh
and	ebp, 0FFFFFFFh
mov	[eax+ix*4], ebp
inc	ix
mov	ebp, [tmpa+ix*4]
sub	ebp, mu
mov	mu, ebp
shr	mu, 1Fh
and	ebp, 0FFFFFFFh
mov	[eax+ix*4], ebp
inc	ix
mov	ebp, [tmpa+ix*4]
sub	ebp, mu
mov	mu, ebp
shr	mu, 1Fh
and	ebp, 0FFFFFFFh
mov	[eax+ix*4], ebp
inc	ix
mov	ebp, [tmpa+ix*4]
sub	ebp, mu
mov	mu, ebp
shr	mu, 1Fh
and	ebp, 0FFFFFFFh
mov	[eax+ix*4], ebp
inc	ix
mov	ebp, [tmpa+ix*4]
sub	ebp, mu
mov	mu, ebp
shr	mu, 1Fh
and	ebp, 0FFFFFFFh
mov	[eax+ix*4], ebp
inc	ix
cmp	ix, [esp+3Ch+var_24]
jz	loc_64208C2A
mov	[esp+3Ch+var_20], ecx
mov	ecx, [tmpa+ix*4]
sub	ecx, mu
mov	mu, ecx
shr	mu, 1Fh
and	ecx, 0FFFFFFFh
mov	[eax+ix*4], ecx
lea	ebp, [ix+1]
mov	ecx, [tmpa+ebp*4]
sub	ecx, mu
mov	mu, ecx
shr	mu, 1Fh
and	ecx, 0FFFFFFFh
mov	[eax+ebp*4], ecx
lea	ebp, [ix+2]
mov	ecx, [tmpa+ix*4]
sub	ecx, mu
mov	mu, ecx
shr	mu, 1Fh
and	ecx, 0FFFFFFFh
mov	[eax+ix*4], ecx
lea	ix, [edx+3]
mov	ecx, [tmpa+ix*4]
sub	ecx, mu
mov	mu, ecx
shr	mu, 1Fh
and	ecx, 0FFFFFFFh
mov	[eax+ix*4], ecx
lea	ix, [edx+4]
mov	ecx, [tmpa+ix*4]
sub	ecx, mu
mov	mu, ecx
shr	mu, 1Fh
and	ecx, 0FFFFFFFh
mov	[eax+ix*4], ecx
lea	ix, [edx+5]
mov	ecx, [tmpa+ix*4]
sub	ecx, mu
mov	mu, ecx
shr	mu, 1Fh
and	ecx, 0FFFFFFFh
mov	[eax+ix*4], ecx
lea	ix, [edx+6]
mov	ecx, [tmpa+ix*4]
sub	ecx, mu
mov	mu, ecx
shr	mu, 1Fh
and	ecx, 0FFFFFFFh
mov	[eax+ix*4], ecx
lea	ix, [edx+7]
mov	ecx, [tmpa+ix*4]
sub	ecx, mu
mov	mu, ecx
shr	mu, 1Fh
and	ecx, 0FFFFFFFh
mov	[eax+ix*4], ecx
add	edx, 8
cmp	ix, [esp+3Ch+var_24]
jnz	loc_64208B6C
mov	ecx, [esp+3Ch+var_20]
			
mov	ebp, [esp+3Ch+var_28]
lea	tmpa, [ebp+ix*4-4]
mov	[esp+3Ch+var_28], edi
lea	edi, [ix+1]
jmp	loc_642087EA
align 10h
			
mov	[c_0], esi
xor	eax, eax
add	esp, 2Ch
pop	c_0
pop	esi
pop	edi
pop	ebp
retn
lea	eax, [edi+1]
cmp	edx, eax
jge	loc_6420879C
add	edi, 41h
mov	edx, 20h
mov	ecx, edx
cdq
idiv	ecx
sub	edi, edx
lea	edx, ds:0[edi*4]
mov	[esp+3Ch+var_38], edx 
mov	eax, [c_0+0Ch]
mov	[esp+3Ch+var_3C], eax 
call	_realloc
mov	ecx, eax
mov	eax, 0FFFFFFFEh
test	ecx, ecx
jz	loc_64208A3E
mov	[c_0+0Ch], ecx
mov	edx, [c_0+4]
mov	[c_0+4], edi
cmp	edi, edx
jle	loc_6420879C
lea	res, [ecx+edx*4]
mov	ecx, edx
not	ecx
add	ecx, edi
and	ecx, 7
mov	dword ptr [eax], 0
inc	edx
add	eax, 4
cmp	edi, edx
jle	loc_6420879C
test	ecx, ecx
jz	short loc_64208D2A
cmp	ecx, 1
jz	short loc_64208D18
cmp	ecx, 2
jz	short loc_64208D0E
cmp	ecx, 3
jz	short loc_64208D04
cmp	ecx, 4
jz	short loc_64208CFA
cmp	ecx, 5
jz	short loc_64208CF0
cmp	ecx, 6
jz	short loc_64208CE6
mov	dword ptr [eax], 0
inc	edx
add	eax, 4
mov	dword ptr [eax], 0
inc	edx
add	eax, 4
mov	dword ptr [eax], 0
inc	edx
add	eax, 4
mov	dword ptr [eax], 0
inc	edx
add	eax, 4
mov	dword ptr [eax], 0
inc	edx
add	eax, 4
mov	dword ptr [eax], 0
inc	edx
add	eax, 4
mov	dword ptr [eax], 0
inc	edx
add	eax, 4
cmp	edi, edx
jle	loc_6420879C
			
mov	dword ptr [eax], 0
mov	dword ptr [eax+4], 0
mov	dword ptr [eax+8], 0
mov	dword ptr [eax+0Ch], 0
mov	dword ptr [eax+10h], 0
mov	dword ptr [eax+14h], 0
mov	dword ptr [eax+18h], 0
mov	dword ptr [eax+1Ch], 0
add	edx, 8
add	eax, 20h
cmp	edi, edx
jg	short loc_64208D2A
jmp	loc_6420879C
mov	edx, [tmpa]
cmp	b_0, edx
jb	loc_64208A4A
sub	b_0, edx
mov	[eax], ebp
lea	a_0, [eax+4]
mov	[esp+3Ch+var_28], esi
jmp	loc_642087CE
align 4
mov	dword ptr [a_0+8], 0
mov	[esp+3Ch+var_34], c_0 
mov	[esp+3Ch+var_38], b_0 
mov	[esp+3Ch+var_3C], a_0 
call	_tma_mp_add_d
mov	dword ptr [c_0+8], 1
mov	dword ptr [a_0+8], 1
mov	edi, [c_0]
test	edi, edi
jle	loc_64208F25
mov	a_0, [c_0+0Ch]
lea	edx, [edi-1]
mov	b_0, [esi+edx*4]
test	ebp, ebp
jnz	loc_64208A3E
lea	ecx, ds:0FFFFFFF8h[edi*4]
mov	ebp, edx
and	ebp, 7
jz	loc_64208F60
mov	edi, edx
test	edx, edx
jle	loc_64208F23
mov	edi, [esi+ecx]
sub	ecx, 4
test	edi, edi
jnz	loc_64208F48
dec	edx
cmp	ebp, 1
jz	loc_64208F60
cmp	ebp, 2
jz	short loc_64208E64
cmp	ebp, 3
jz	short loc_64208E55
cmp	ebp, 4
jz	short loc_64208E46
cmp	ebp, 5
jz	short loc_64208E37
cmp	ebp, 6
jz	short loc_64208E28
mov	ebp, [esi+ecx]
sub	ecx, 4
test	ebp, ebp
jnz	loc_64208F48
dec	edx
mov	edi, [esi+ecx]
sub	ecx, 4
test	edi, edi
jnz	loc_64208F48
dec	edx
mov	ebp, [esi+ecx]
sub	ecx, 4
test	ebp, ebp
jnz	loc_64208F48
dec	edx
mov	edi, [esi+ecx]
sub	ecx, 4
test	edi, edi
jnz	loc_64208F48
dec	edx
mov	ebp, [esi+ecx]
sub	ecx, 4
test	ebp, ebp
jnz	loc_64208F48
dec	edx
mov	edi, [esi+ecx]
sub	ecx, 4
test	edi, edi
jnz	loc_64208F48
dec	edx
mov	[esp+3Ch+var_24], eax
mov	edi, edx
test	edx, edx
jle	loc_64208F1F
lea	ebp, [ecx-4]
mov	edi, [esi+ecx]
test	edi, edi
jnz	loc_64208F44
lea	edi, [edx-1]
mov	edx, edi
lea	res, [ecx-8]
mov	[esp+3Ch+var_2C], eax
mov	eax, [esi+ebp]
test	eax, eax
jnz	loc_64208F44
dec	edx
lea	ebp, [ecx-0Ch]
mov	[esp+3Ch+var_28], ebp
mov	eax, [esp+3Ch+var_2C]
mov	ebp, [esi+eax]
test	ebp, ebp
jnz	loc_64208F44
lea	edx, [edi-2]
lea	ebp, [ecx-10h]
mov	eax, [esp+3Ch+var_28]
mov	eax, [esi+eax]
test	eax, eax
jnz	short loc_64208F44
lea	edx, [edi-3]
lea	eax, [ecx-14h]
mov	[esp+3Ch+var_2C], eax
mov	eax, [esi+ebp]
test	eax, eax
jnz	short loc_64208F44
lea	edx, [edi-4]
lea	ebp, [ecx-18h]
mov	[esp+3Ch+var_28], ebp
mov	eax, [esp+3Ch+var_2C]
mov	ebp, [esi+eax]
test	ebp, ebp
jnz	short loc_64208F44
lea	edx, [edi-5]
lea	ebp, [ecx-1Ch]
mov	eax, [esp+3Ch+var_28]
mov	eax, [esi+eax]
test	eax, eax
jnz	short loc_64208F44
lea	edx, [edi-6]
sub	ecx, 20h
mov	eax, [esi+ebp]
test	eax, eax
jnz	short loc_64208F44
lea	edx, [edi-7]
mov	edi, edx
test	edx, edx
jg	loc_64208E81
mov	res, [esp+3Ch+var_24]
mov	[c_0], edx
test	edi, edi
jnz	loc_64208A3E
mov	dword ptr [c_0+8], 0
jmp	loc_64208A3E
align 4
			
xor	eax, eax
jmp	loc_64208A3E
align 4
			
mov	res, [esp+3Ch+var_24]
			
mov	[c_0], edx
jmp	loc_64208A3E
align 10h
mov	tmpa, 2
mov	edx, 1
jmp	loc_642087EA
align 10h
			
mov	[esp+3Ch+var_24], eax
jmp	loc_64208E77
align 4
public _tma_mp_add_d
			
push	ebp
push	edi
push	esi
push	ebx
sub	esp, 2Ch
mov	esi, [esp+3Ch+a]
mov	edi, [esp+3Ch+b]
mov	ebx, [esp+3Ch+c]
mov	ebp, [esi]
mov	edx, [ebx+4]
cmp	ebp, edx
jge	loc_64209430
			
cmp	dword ptr [a_0+8], 1
jz	loc_64209554
mov	ecx, [a_0+0Ch]
mov	edx, [c_0]
mov	[esp+3Ch+var_24], edx
mov	dword ptr [c_0+8], 0
mov	edx, [c_0+0Ch]
mov	ebp, [a_0+8]
test	ebp, ebp
jz	loc_64209238
mov	dword ptr [c_0], 1
cmp	dword ptr [a_0], 1
jz	loc_64209714
mov	[edx], b_0
lea	ebp, [edx+4]
mov	[esp+3Ch+var_28], ebp
mov	ebp, 2
mov	a_0, 1
mov	res, 1
			
cmp	ix, [esp+3Ch+var_24]
jge	loc_642090C5
mov	edi, [esp+3Ch+var_24]
sub	edi, ebp
and	edi, 7
mov	ix, [esp+3Ch+var_28]
mov	dword ptr [eax], 0
add	eax, 4
lea	tmpa, [ix+1]
cmp	[esp+3Ch+var_24], ebp
jle	loc_642090C5
test	edi, edi
jz	short loc_6420907F
cmp	edi, 1
jz	short loc_6420906C
cmp	edi, 2
jz	short loc_64209062
cmp	edi, 3
jz	short loc_64209058
cmp	edi, 4
jz	short loc_6420904E
cmp	edi, 5
jz	short loc_64209044
cmp	edi, 6
jz	short loc_6420903A
mov	dword ptr [tmpc], 0
mov	tmpc, [esp+3Ch+var_28]
add	tmpc, 8
lea	ecx, [ix+2]
mov	dword ptr [tmpc], 0
add	tmpc, 4
inc	ix
mov	dword ptr [tmpc], 0
add	tmpc, 4
inc	ix
mov	dword ptr [tmpc], 0
add	tmpc, 4
inc	ix
mov	dword ptr [tmpc], 0
add	tmpc, 4
inc	ix
mov	dword ptr [tmpc], 0
add	tmpc, 4
inc	ix
mov	dword ptr [tmpc], 0
add	tmpc, 4
inc	ix
lea	ebp, [ix-1]
cmp	[esp+3Ch+var_24], ebp
jle	short loc_642090C5
			
mov	dword ptr [tmpc], 0
mov	dword ptr [tmpc+4], 0
mov	dword ptr [tmpc+8], 0
mov	dword ptr [tmpc+0Ch], 0
mov	dword ptr [tmpc+10h], 0
mov	dword ptr [tmpc+14h], 0
mov	dword ptr [tmpc+18h], 0
mov	dword ptr [tmpc+1Ch], 0
add	tmpc, 20h
add	ix, 8
lea	edi, [ix-1]
cmp	[esp+3Ch+var_24], edi
jg	short loc_6420907F
			
test	esi, esi
jle	loc_6420921E
lea	tmpa, [esi-1]
mov	tmpc, [edx+ecx*4]
test	eax, eax
jnz	loc_64209740
lea	eax, ds:0FFFFFFF8h[esi*4]
mov	edi, ecx
and	edi, 7
jz	loc_64209180
mov	esi, ecx
test	ecx, ecx
jle	loc_6420921C
mov	ix, [edx+eax]
sub	eax, 4
test	ebp, ebp
jnz	loc_64209424
lea	ecx, [ecx-1]
cmp	edi, 1
jz	short loc_64209180
cmp	edi, 2
jz	short loc_64209171
cmp	edi, 3
jz	short loc_64209162
cmp	edi, 4
jz	short loc_64209153
cmp	edi, 5
jz	short loc_64209144
cmp	edi, 6
jz	short loc_64209135
mov	esi, [edx+eax]
sub	eax, 4
test	esi, esi
jnz	loc_64209424
dec	ecx
mov	edi, [edx+eax]
sub	eax, 4
test	edi, edi
jnz	loc_64209424
dec	ecx
mov	ebp, [edx+eax]
sub	eax, 4
test	ebp, ebp
jnz	loc_64209424
dec	ecx
mov	esi, [edx+eax]
sub	eax, 4
test	esi, esi
jnz	loc_64209424
dec	ecx
mov	edi, [edx+eax]
sub	eax, 4
test	edi, edi
jnz	loc_64209424
dec	ecx
mov	ebp, [edx+eax]
sub	eax, 4
test	ebp, ebp
jnz	loc_64209424
dec	ecx
			
mov	esi, ecx
test	ecx, ecx
jle	loc_6420921C
lea	edi, [eax-4]
mov	esi, [edx+eax]
test	esi, esi
jnz	loc_64209424
lea	esi, [ecx-1]
mov	ecx, esi
lea	ix, [eax-8]
mov	edi, [edx+edi]
test	edi, edi
jnz	loc_64209424
dec	ecx
lea	edi, [eax-0Ch]
mov	ebp, [edx+ebp]
test	ebp, ebp
jnz	loc_64209424
lea	ecx, [esi-2]
lea	ebp, [eax-10h]
mov	edi, [edx+edi]
test	edi, edi
jnz	loc_64209424
lea	ecx, [esi-3]
lea	edi, [eax-14h]
mov	ebp, [edx+ebp]
test	ebp, ebp
jnz	loc_64209424
lea	ecx, [esi-4]
lea	ebp, [eax-18h]
mov	edi, [edx+edi]
test	edi, edi
jnz	loc_64209424
lea	ecx, [esi-5]
lea	edi, [eax-1Ch]
mov	ebp, [edx+ebp]
test	ebp, ebp
jnz	loc_64209424
lea	ecx, [esi-6]
sub	eax, 20h
mov	edi, [edx+edi]
test	edi, edi
jnz	loc_64209424
lea	ecx, [esi-7]
mov	esi, ecx
test	ecx, ecx
jg	loc_6420918A
			
mov	[c_0], ecx
test	esi, esi
jnz	loc_64209740
mov	dword ptr [c_0+8], 0
xor	tmpc, tmpc
			
add	esp, 2Ch
pop	c_0
pop	esi
pop	edi
pop	ix
retn
align 4
add	b_0, [tmpa]
mov	ebp, edi
shr	mu, 1Ch
and	edi, 0FFFFFFFh
mov	[edx], edi
lea	edi, [edx+4]
mov	[esp+3Ch+var_20], edi
mov	a_0, [a_0]
mov	[esp+3Ch+var_28], esi
cmp	esi, 1
jle	loc_64209754
mov	esi, [esp+3Ch+var_28]
sub	esi, 2
and	esi, 7
mov	res, [tmpa+4]
add	eax, mu
mov	mu, eax
shr	mu, 1Ch
and	eax, 0FFFFFFFh
mov	[edx+4], eax
mov	eax, 2
cmp	ix, [esp+3Ch+var_28]
jz	loc_642093F6
test	esi, esi
jz	loc_6420934C
cmp	esi, 1
jz	loc_6420932E
cmp	esi, 2
jz	short loc_6420931A
cmp	esi, 3
jz	short loc_64209306
cmp	esi, 4
jz	short loc_642092F2
cmp	esi, 5
jz	short loc_642092DE
cmp	esi, 6
jz	short loc_642092CA
mov	esi, [tmpa+8]
add	esi, mu
mov	mu, esi
shr	mu, 1Ch
and	esi, 0FFFFFFFh
mov	[edx+ix*4], esi
mov	ix, 3
mov	edi, [tmpa+ix*4]
add	edi, mu
mov	mu, edi
shr	mu, 1Ch
and	edi, 0FFFFFFFh
mov	[edx+ix*4], edi
inc	ix
mov	esi, [tmpa+ix*4]
add	esi, mu
mov	mu, esi
shr	mu, 1Ch
and	esi, 0FFFFFFFh
mov	[edx+ix*4], esi
inc	ix
mov	edi, [tmpa+ix*4]
add	edi, mu
mov	mu, edi
shr	mu, 1Ch
and	edi, 0FFFFFFFh
mov	[edx+ix*4], edi
inc	ix
mov	esi, [tmpa+ix*4]
add	esi, mu
mov	mu, esi
shr	mu, 1Ch
and	esi, 0FFFFFFFh
mov	[edx+ix*4], esi
inc	ix
mov	edi, [tmpa+ix*4]
add	edi, mu
mov	mu, edi
shr	mu, 1Ch
and	edi, 0FFFFFFFh
mov	[edx+ix*4], edi
inc	ix
mov	esi, [tmpa+ix*4]
add	esi, mu
mov	mu, esi
shr	mu, 1Ch
and	esi, 0FFFFFFFh
mov	[edx+ix*4], esi
inc	ix
cmp	ix, [esp+3Ch+var_28]
jz	loc_642093F6
			
add	mu, [tmpa+ix*4]
mov	esi, ebp
shr	esi, 1Ch
and	ebp, 0FFFFFFFh
mov	[edx+ix*4], ebp
lea	ebp, [ix+1]
add	esi, [tmpa+ebp*4]
mov	edi, esi
shr	edi, 1Ch
and	esi, 0FFFFFFFh
mov	[edx+ebp*4], esi
lea	ebp, [ix+2]
add	edi, [tmpa+ix*4]
mov	esi, edi
shr	esi, 1Ch
and	edi, 0FFFFFFFh
mov	[edx+ix*4], edi
lea	ix, [eax+3]
add	esi, [tmpa+ix*4]
mov	edi, esi
shr	edi, 1Ch
and	esi, 0FFFFFFFh
mov	[edx+ix*4], esi
lea	ix, [eax+4]
add	edi, [tmpa+ix*4]
mov	esi, edi
shr	esi, 1Ch
and	edi, 0FFFFFFFh
mov	[edx+ix*4], edi
lea	ix, [eax+5]
add	esi, [tmpa+ix*4]
mov	edi, esi
shr	edi, 1Ch
and	esi, 0FFFFFFFh
mov	[edx+ix*4], esi
lea	ix, [eax+6]
add	edi, [tmpa+ix*4]
mov	esi, edi
shr	esi, 1Ch
and	edi, 0FFFFFFFh
mov	[edx+ix*4], edi
lea	edi, [eax+7]
add	esi, [tmpa+ix*4]
mov	ebp, esi
shr	mu, 1Ch
and	esi, 0FFFFFFFh
mov	[edx+ix*4], esi
add	eax, 8
cmp	ix, [esp+3Ch+var_28]
jnz	loc_6420934C
			
mov	edi, [esp+3Ch+var_20]
mov	tmpa, [esp+3Ch+var_28]
lea	ix, [edi+ecx*4-4]
mov	[esp+3Ch+var_20], eax
mov	esi, ecx
inc	esi
mov	eax, esi
mov	tmpa, [esp+3Ch+var_20]
mov	[ecx], mu
add	ecx, 4
mov	[esp+3Ch+var_28], ecx
mov	[c_0], esi
lea	mu, [ix+1]
jmp	loc_64208FDB
align 4
			
mov	[c_0], ecx
xor	eax, eax
add	esp, 2Ch
pop	c_0
pop	esi
pop	edi
pop	ix
retn
lea	eax, [ebp+1]
cmp	edx, eax
jge	loc_64208F8C
add	ebp, 41h
mov	edx, 20h
mov	ecx, edx
cdq
idiv	ecx
sub	ebp, edx
lea	edx, ds:0[ebp*4]
mov	[esp+3Ch+var_38], edx 
mov	eax, [c_0+0Ch]
mov	[esp+3Ch+var_3C], eax 
call	_realloc
mov	ecx, eax
mov	eax, 0FFFFFFFEh
test	ecx, ecx
jz	loc_6420922F
mov	[c_0+0Ch], ecx
mov	edx, [c_0+4]
mov	[c_0+4], ebp
cmp	ebp, edx
jle	loc_64208F8C
lea	res, [ecx+edx*4]
mov	ecx, edx
not	ecx
add	ecx, ebp
and	ecx, 7
mov	dword ptr [eax], 0
inc	edx
add	eax, 4
cmp	ebp, edx
jle	loc_64208F8C
test	ecx, ecx
jz	short loc_6420950E
cmp	ecx, 1
jz	short loc_642094FC
cmp	ecx, 2
jz	short loc_642094F2
cmp	ecx, 3
jz	short loc_642094E8
cmp	ecx, 4
jz	short loc_642094DE
cmp	ecx, 5
jz	short loc_642094D4
cmp	ecx, 6
jz	short loc_642094CA
mov	dword ptr [eax], 0
inc	edx
add	eax, 4
mov	dword ptr [eax], 0
inc	edx
add	eax, 4
mov	dword ptr [eax], 0
inc	edx
add	eax, 4
mov	dword ptr [eax], 0
inc	edx
add	eax, 4
mov	dword ptr [eax], 0
inc	edx
add	eax, 4
mov	dword ptr [eax], 0
inc	edx
add	eax, 4
mov	dword ptr [eax], 0
inc	edx
add	eax, 4
cmp	ebp, edx
jle	loc_64208F8C
			
mov	dword ptr [eax], 0
mov	dword ptr [eax+4], 0
mov	dword ptr [eax+8], 0
mov	dword ptr [eax+0Ch], 0
mov	dword ptr [eax+10h], 0
mov	dword ptr [eax+14h], 0
mov	dword ptr [eax+18h], 0
mov	dword ptr [eax+1Ch], 0
add	edx, 8
add	eax, 20h
cmp	ebp, edx
jg	short loc_6420950E
jmp	loc_64208F8C
cmp	dword ptr [a_0], 1
jle	loc_64209704
mov	dword ptr [a_0+8], 0
mov	[esp+3Ch+var_34], c_0 
mov	[esp+3Ch+var_38], b_0 
mov	[esp+3Ch+var_3C], a_0 
call	_tma_mp_sub_d
mov	dword ptr [c_0+8], 1
mov	dword ptr [a_0+8], 1
mov	b_0, [c_0]
test	edi, edi
jle	loc_642096EE
mov	a_0, [c_0+0Ch]
lea	edx, [edi-1]
mov	ebp, [esi+edx*4]
test	ebp, ebp
jnz	loc_6420922F
lea	ecx, ds:0FFFFFFF8h[edi*4]
mov	ebp, edx
and	ebp, 7
jz	loc_64209748
mov	edi, edx
test	edx, edx
jle	loc_642096EC
mov	edi, [esi+ecx]
sub	ecx, 4
test	edi, edi
jnz	loc_64209738
dec	edx
cmp	ebp, 1
jz	loc_64209748
cmp	ebp, 2
jz	short loc_64209635
cmp	ebp, 3
jz	short loc_64209626
cmp	ebp, 4
jz	short loc_64209617
cmp	ebp, 5
jz	short loc_64209608
cmp	ebp, 6
jz	short loc_642095F9
mov	ebp, [esi+ecx]
sub	ecx, 4
test	ebp, ebp
jnz	loc_64209738
dec	edx
mov	edi, [esi+ecx]
sub	ecx, 4
test	edi, edi
jnz	loc_64209738
dec	edx
mov	ebp, [esi+ecx]
sub	ecx, 4
test	ebp, ebp
jnz	loc_64209738
dec	edx
mov	edi, [esi+ecx]
sub	ecx, 4
test	edi, edi
jnz	loc_64209738
dec	edx
mov	ebp, [esi+ecx]
sub	ecx, 4
test	ebp, ebp
jnz	loc_64209738
dec	edx
mov	edi, [esi+ecx]
sub	ecx, 4
test	edi, edi
jnz	loc_64209738
dec	edx
mov	[esp+3Ch+var_28], eax
mov	edi, edx
test	edx, edx
jle	loc_642096E8
lea	ebp, [ecx-4]
mov	edi, [esi+ecx]
test	edi, edi
jnz	loc_64209734
lea	edi, [edx-1]
mov	edx, edi
lea	res, [ecx-8]
mov	[esp+3Ch+var_24], eax
mov	eax, [esi+ebp]
test	eax, eax
jnz	loc_64209734
dec	edx
lea	ebp, [ecx-0Ch]
mov	eax, [esp+3Ch+var_24]
mov	eax, [esi+eax]
test	eax, eax
jnz	loc_64209734
lea	edx, [edi-2]
lea	eax, [ecx-10h]
mov	[esp+3Ch+var_24], eax
mov	ebp, [esi+ebp]
test	ebp, ebp
jnz	loc_64209734
lea	edx, [edi-3]
lea	ebp, [ecx-14h]
mov	eax, [esi+eax]
test	eax, eax
jnz	loc_64209734
lea	edx, [edi-4]
lea	eax, [ecx-18h]
mov	[esp+3Ch+var_24], eax
mov	ebp, [esi+ebp]
test	ebp, ebp
jnz	short loc_64209734
lea	edx, [edi-5]
lea	ebp, [ecx-1Ch]
mov	eax, [esi+eax]
test	eax, eax
jnz	short loc_64209734
lea	edx, [edi-6]
sub	ecx, 20h
mov	eax, [esi+ebp]
test	eax, eax
jnz	short loc_64209734
lea	edx, [edi-7]
mov	edi, edx
test	edx, edx
jg	loc_64209652
mov	res, [esp+3Ch+var_28]
mov	[c_0], edx
test	edi, edi
jnz	loc_6420922F
mov	dword ptr [c_0+8], 0
jmp	loc_6420922F
align 4
mov	ecx, [a_0+0Ch]
cmp	[tmpa],	b_0
jb	loc_64208F99
jmp	loc_6420955D
sub	b_0, [tmpa]
mov	[edx], edi
lea	a_0, [edx+4]
mov	[esp+3Ch+var_28], esi
mov	ebp, 2
mov	esi, 1
mov	res, 1
jmp	loc_64208FDB
align 4
			
mov	res, [esp+3Ch+var_28]
			
mov	[c_0], edx
jmp	loc_6420922F
align 10h
			
xor	tmpc, tmpc
jmp	loc_6420922F
align 4
			
mov	[esp+3Ch+var_28], eax
jmp	loc_64209648
align 4
mov	res, 2
inc	esi
jmp	loc_6420940B
align 10h
public _tma_mp_read_radix
push	ebp
push	edi
push	esi
push	ebx
sub	esp, 4Ch
mov	eax, [esp+5Ch+a]
mov	dword ptr [eax+8], 0
mov	dword ptr [eax], 0
mov	edx, eax
mov	eax, [eax+0Ch]
mov	ecx, [edx+4]
test	ecx, ecx
jle	loc_64209849
lea	ebx, [ecx-1]
and	ebx, 7
mov	dword ptr [eax], 0
mov	edx, 1
cmp	edx, ecx
jge	loc_64209849
test	ebx, ebx
jz	short loc_64209803
cmp	ebx, 1
jz	short loc_642097F7
cmp	ebx, 2
jz	short loc_642097EF
cmp	ebx, 3
jz	short loc_642097E7
cmp	ebx, 4
jz	short loc_642097DF
cmp	ebx, 5
jz	short loc_642097D7
cmp	ebx, 6
jz	short loc_642097CF
mov	dword ptr [eax+edx*4], 0
mov	edx, 2
mov	dword ptr [eax+edx*4], 0
inc	edx
mov	dword ptr [eax+edx*4], 0
inc	edx
mov	dword ptr [eax+edx*4], 0
inc	edx
mov	dword ptr [eax+edx*4], 0
inc	edx
mov	dword ptr [eax+edx*4], 0
inc	edx
mov	dword ptr [eax+edx*4], 0
inc	edx
cmp	edx, ecx
jge	short loc_64209849
			
mov	dword ptr [eax+edx*4], 0
mov	dword ptr [eax+edx*4+4], 0
mov	dword ptr [eax+edx*4+8], 0
mov	dword ptr [eax+edx*4+0Ch], 0
mov	dword ptr [eax+edx*4+10h], 0
mov	dword ptr [eax+edx*4+14h], 0
mov	dword ptr [eax+edx*4+18h], 0
mov	dword ptr [eax+edx*4+1Ch], 0
add	edx, 8
cmp	edx, ecx
jl	short loc_64209803
			
mov	ebx, [esp+5Ch+radix]
sub	ebx, 2
cmp	ebx, 3Eh
ja	loc_64209F24
mov	esi, [esp+5Ch+str]
cmp	byte ptr [esi],	2Dh
jz	loc_64209F34
mov	[esp+5Ch+var_20], 0
mov	edi, [esp+5Ch+a]
mov	dword ptr [edi+8], 0
mov	dword ptr [edi], 0
test	ecx, ecx
jle	loc_64209F63
lea	ebx, [ecx-1]
and	ebx, 7
mov	dword ptr [eax], 0
mov	edx, 1
cmp	edx, ecx
jge	loc_64209948
test	ebx, ebx
jz	short loc_64209902
cmp	ebx, 1
jz	short loc_642098F6
cmp	ebx, 2
jz	short loc_642098EE
cmp	ebx, 3
jz	short loc_642098E6
cmp	ebx, 4
jz	short loc_642098DE
cmp	ebx, 5
jz	short loc_642098D6
cmp	ebx, 6
jz	short loc_642098CE
mov	dword ptr [eax+edx*4], 0
mov	edx, 2
mov	dword ptr [eax+edx*4], 0
inc	edx
mov	dword ptr [eax+edx*4], 0
inc	edx
mov	dword ptr [eax+edx*4], 0
inc	edx
mov	dword ptr [eax+edx*4], 0
inc	edx
mov	dword ptr [eax+edx*4], 0
inc	edx
mov	dword ptr [eax+edx*4], 0
inc	edx
cmp	edx, ecx
jge	short loc_64209948
			
mov	dword ptr [eax+edx*4], 0
mov	dword ptr [eax+edx*4+4], 0
mov	dword ptr [eax+edx*4+8], 0
mov	dword ptr [eax+edx*4+0Ch], 0
mov	dword ptr [eax+edx*4+10h], 0
mov	dword ptr [eax+edx*4+14h], 0
mov	dword ptr [eax+edx*4+18h], 0
mov	dword ptr [eax+edx*4+1Ch], 0
add	edx, 8
cmp	edx, ecx
jl	short loc_64209902
			
mov	ecx, [esp+5Ch+a]
mov	ebp, [ecx]
mov	[esp+5Ch+var_28], ebp
mov	edx, [esp+5Ch+str]
mov	al, [edx]
test	al, al
jz	loc_64209A07
cmp	[esp+5Ch+radix], 23h
jg	short loc_64209972
movsx	ch_0, al
mov	[esp+5Ch+var_5C], ch_0 
call	_toupper
mov	edx, _tma_mp_s_rmap
xor	ebx, ebx
cmp	al, [edx]
jz	loc_64209A24
mov	y, 1
cmp	al, [edx+1]
jz	loc_64209A24
inc	y
cmp	al, [edx+y]
jz	loc_64209A24
inc	y
cmp	al, [edx+y]
jz	loc_64209A24
inc	y
cmp	al, [edx+y]
jz	short loc_64209A24
inc	y
cmp	al, [edx+y]
jz	short loc_64209A24
inc	y
cmp	al, [edx+y]
jz	short loc_64209A24
inc	y
cmp	al, [edx+y]
jz	short loc_64209A24
inc	y
cmp	y, 40h
jz	short loc_64209A07
cmp	al, [edx+y]
jz	short loc_64209A24
lea	ecx, [y+1]
mov	y, ecx
cmp	al, [edx+ecx]
jz	short loc_64209A24
inc	y
cmp	al, [edx+y]
jz	short loc_64209A24
lea	y, [ecx+2]
cmp	al, [edx+y]
jz	short loc_64209A24
lea	y, [ecx+3]
cmp	al, [edx+y]
jz	short loc_64209A24
lea	y, [ecx+4]
cmp	al, [edx+y]
jz	short loc_64209A24
lea	y, [ecx+5]
cmp	al, [edx+y]
jz	short loc_64209A24
lea	y, [ecx+6]
cmp	al, [edx+y]
jz	short loc_64209A24
lea	y, [ecx+7]
cmp	y, 40h
jnz	short loc_642099C2
			
mov	ebp, [esp+5Ch+var_28]
test	ebp, ebp
jz	short loc_64209A1A
mov	y, [esp+5Ch+var_20]
mov	ch_0, [esp+5Ch+a]
mov	[eax+8], ebx
			
xor	ch_0, ch_0
			
add	esp, 4Ch
pop	y
pop	esi
pop	edi
pop	ebp
retn
			
cmp	[esp+5Ch+radix], y
jle	short loc_64209A07
mov	ecx, [esp+5Ch+a]
mov	edx, [ecx+4]
cmp	edx, [esp+5Ch+var_28]
jle	loc_64209EE0
mov	edi, [ecx+0Ch]
mov	[esp+5Ch+var_40], edi
mov	esi, [ecx]
mov	[esp+5Ch+var_2C], esi
mov	edx, [esp+5Ch+var_28]
test	edx, edx
jle	loc_64209F12
mov	ebp, [esp+5Ch+var_2C]
dec	ebp
and	ebp, 3
mov	ch_0, [esp+5Ch+radix]
mov	esi, [esp+5Ch+var_40]
mul	dword ptr [esi]
mov	[esp+5Ch+var_34], eax
add	esi, 4
mov	[esp+5Ch+var_44], esi
mov	edi, [esp+5Ch+var_34]
and	edi, 0FFFFFFFh
mov	ecx, [esp+5Ch+var_40]
mov	[ecx], edi
shrd	eax, edx, 1Ch
shr	edx, 1Ch
mov	[esp+5Ch+var_34], eax
mov	[esp+5Ch+var_30], edx
mov	edi, eax
mov	ecx, 1
mov	esi, [esp+5Ch+var_44]
mov	[esp+5Ch+var_24], esi
cmp	ecx, [esp+5Ch+var_2C]
jge	loc_64209C1C
test	ebp, ebp
jz	loc_64209B6C
cmp	ebp, 1
jz	short loc_64209B24
cmp	ebp, 2
jz	short loc_64209AF4
xor	ebp, ebp
mov	eax, [esp+5Ch+radix]
mov	esi, [esp+5Ch+var_44]
mul	dword ptr [esi]
add	edi, eax
adc	ebp, edx
mov	esi, [esp+5Ch+var_40]
add	esi, 8
mov	[esp+5Ch+var_44], esi
mov	ecx, edi
and	ecx, 0FFFFFFFh
mov	edx, [esp+5Ch+var_24]
mov	[edx], ecx
shrd	edi, ebp, 1Ch
shr	ebp, 1Ch
mov	ecx, 2
mov	[esp+5Ch+var_24], esi
xor	ebp, ebp
mov	eax, [esp+5Ch+radix]
mov	esi, [esp+5Ch+var_44]
mul	dword ptr [esi]
add	edi, eax
adc	ebp, edx
add	esi, 4
mov	[esp+5Ch+var_44], esi
mov	eax, edi
and	eax, 0FFFFFFFh
mov	edx, [esp+5Ch+var_24]
mov	[edx], eax
shrd	edi, ebp, 1Ch
shr	ebp, 1Ch
inc	ecx
mov	[esp+5Ch+var_24], esi
mov	esi, edi
xor	edi, edi
mov	eax, [esp+5Ch+radix]
mov	ebp, [esp+5Ch+var_44]
mul	dword ptr [ebp+0]
add	esi, eax
adc	edi, edx
add	ebp, 4
mov	[esp+5Ch+var_44], ebp
mov	ebp, esi
and	ebp, 0FFFFFFFh
mov	eax, [esp+5Ch+var_24]
mov	[eax], ebp
mov	eax, esi
mov	edx, edi
shrd	eax, edx, 1Ch
shr	edx, 1Ch
mov	[esp+5Ch+var_34], eax
mov	[esp+5Ch+var_30], edx
mov	edi, eax
inc	ecx
cmp	ecx, [esp+5Ch+var_2C]
jge	loc_64209C1C
mov	ebp, y
mov	ebx, edi
xor	esi, esi
mov	eax, [esp+5Ch+radix]
mov	edi, [esp+5Ch+var_44]
mul	dword ptr [edi]
add	ebx, eax
adc	esi, edx
mov	eax, ebx
and	eax, 0FFFFFFFh
mov	[edi], eax
shrd	ebx, esi, 1Ch
shr	esi, 1Ch
xor	esi, esi
mov	eax, [esp+5Ch+radix]
mul	dword ptr [edi+4]
add	ebx, eax
adc	esi, edx
mov	edx, ebx
and	edx, 0FFFFFFFh
mov	[edi+4], edx
shrd	ebx, esi, 1Ch
shr	esi, 1Ch
xor	esi, esi
mov	eax, [esp+5Ch+radix]
mul	dword ptr [edi+8]
add	ebx, eax
adc	esi, edx
add	edi, 0Ch
mov	[esp+5Ch+var_24], edi
mov	eax, ebx
and	eax, 0FFFFFFFh
mov	edx, [esp+5Ch+var_44]
mov	[edx+8], eax
shrd	ebx, esi, 1Ch
shr	esi, 1Ch
xor	esi, esi
mov	eax, [esp+5Ch+radix]
mov	edi, edx
mul	dword ptr [edx+0Ch]
add	ebx, eax
adc	esi, edx
add	edi, 10h
mov	[esp+5Ch+var_44], edi
mov	edx, ebx
and	edx, 0FFFFFFFh
mov	eax, [esp+5Ch+var_24]
mov	[eax], edx
shrd	ebx, esi, 1Ch
shr	esi, 1Ch
mov	edi, ebx
add	ecx, 4
cmp	ecx, [esp+5Ch+var_2C]
jl	loc_64209B6E
mov	[esp+5Ch+var_34], ebx
mov	[esp+5Ch+var_30], esi
mov	ebx, y
			
lea	ebp, [ecx+1]
lea	esi, [ecx+2]
mov	edi, [esp+5Ch+var_34]
mov	edx, [esp+5Ch+var_44]
mov	[edx], edi
cmp	ebp, [esp+5Ch+var_28]
jge	loc_64209D15
mov	ebp, [esp+5Ch+var_28]
sub	ebp, esi
and	ebp, 7
mov	dword ptr [edx+4], 0
mov	eax, edx
add	eax, 8
lea	edi, [ecx+3]
cmp	esi, [esp+5Ch+var_28]
jge	loc_64209D15
test	ebp, ebp
jz	short loc_64209CCF
cmp	ebp, 1
jz	short loc_64209CBC
cmp	ebp, 2
jz	short loc_64209CB2
cmp	ebp, 3
jz	short loc_64209CA8
cmp	ebp, 4
jz	short loc_64209C9E
cmp	ebp, 5
jz	short loc_64209C94
cmp	ebp, 6
jz	short loc_64209C8A
mov	dword ptr [eax], 0
mov	eax, [esp+5Ch+var_44]
add	eax, 0Ch
lea	edi, [ecx+4]
mov	dword ptr [eax], 0
add	eax, 4
inc	edi
mov	dword ptr [eax], 0
add	eax, 4
inc	edi
mov	dword ptr [eax], 0
add	eax, 4
inc	edi
mov	dword ptr [eax], 0
add	eax, 4
inc	edi
mov	dword ptr [eax], 0
add	eax, 4
inc	edi
mov	dword ptr [eax], 0
add	eax, 4
inc	edi
lea	esi, [edi-1]
cmp	esi, [esp+5Ch+var_28]
jge	short loc_64209D15
			
mov	dword ptr [eax], 0
mov	dword ptr [eax+4], 0
mov	dword ptr [eax+8], 0
mov	dword ptr [eax+0Ch], 0
mov	dword ptr [eax+10h], 0
mov	dword ptr [eax+14h], 0
mov	dword ptr [eax+18h], 0
mov	dword ptr [eax+1Ch], 0
add	eax, 20h
add	edi, 8
lea	ecx, [edi-1]
cmp	ecx, [esp+5Ch+var_28]
jl	short loc_64209CCF
			
mov	ecx, [esp+5Ch+var_2C]
inc	ecx
mov	ebp, [esp+5Ch+a]
mov	[ebp+0], ecx
test	ecx, ecx
jle	loc_64209ECE
mov	esi, [ebp+0Ch]
mov	ch_0, [esp+5Ch+var_2C]
mov	edx, [esi+eax*4]
test	edx, edx
jnz	loc_64209E86
lea	ebp, [eax-1]
lea	edx, ds:0[ebp*4]
mov	edi, eax
and	edi, 7
jz	loc_64209DF6
mov	ecx, eax
test	eax, eax
jle	loc_64209EC8
mov	eax, [esi+edx]
mov	[esp+5Ch+var_2C], eax
mov	eax, ebp
sub	edx, 4
mov	ebp, [esp+5Ch+var_2C]
test	ebp, ebp
jnz	loc_64209E80
cmp	edi, 1
jz	short loc_64209DF6
cmp	edi, 2
jz	short loc_64209DE5
cmp	edi, 3
jz	short loc_64209DD4
cmp	edi, 4
jz	short loc_64209DC3
cmp	edi, 5
jz	short loc_64209DB2
cmp	edi, 6
jz	short loc_64209DA1
mov	ecx, eax
mov	edi, [esi+edx]
dec	eax
sub	edx, 4
test	edi, edi
jnz	loc_64209E80
mov	ecx, eax
mov	ebp, [esi+edx]
dec	eax
sub	edx, 4
test	ebp, ebp
jnz	loc_64209E80
mov	ecx, eax
mov	edi, [esi+edx]
dec	eax
sub	edx, 4
test	edi, edi
jnz	loc_64209E80
mov	ecx, eax
mov	ebp, [esi+edx]
dec	eax
sub	edx, 4
test	ebp, ebp
jnz	loc_64209E80
mov	ecx, eax
mov	edi, [esi+edx]
dec	eax
sub	edx, 4
test	edi, edi
jnz	loc_64209E80
mov	ecx, eax
mov	ebp, [esi+edx]
dec	eax
sub	edx, 4
test	ebp, ebp
jnz	loc_64209E80
			
mov	[esp+5Ch+var_2C], y
mov	ecx, eax
test	eax, eax
jle	loc_64209EC4
lea	edi, [eax-1]
lea	y, [edx-4]
mov	ebp, [esi+edx]
test	ebp, ebp
jnz	short loc_64209E7C
mov	ecx, edi
lea	ebp, [eax-2]
lea	edi, [edx-8]
mov	ebx, [esi+ebx]
test	ebx, ebx
jnz	short loc_64209E7C
mov	ecx, ebp
lea	ebp, [eax-3]
lea	ebx, [edx-0Ch]
mov	edi, [esi+edi]
test	edi, edi
jnz	short loc_64209E7C
mov	ecx, ebp
lea	ebp, [eax-4]
lea	edi, [edx-10h]
mov	ebx, [esi+ebx]
test	ebx, ebx
jnz	short loc_64209E7C
mov	ecx, ebp
lea	ebp, [eax-5]
lea	ebx, [edx-14h]
mov	edi, [esi+edi]
test	edi, edi
jnz	short loc_64209E7C
mov	ecx, ebp
lea	ebp, [eax-6]
lea	edi, [edx-18h]
mov	ebx, [esi+ebx]
test	ebx, ebx
jnz	short loc_64209E7C
mov	ecx, ebp
lea	ebp, [eax-7]
lea	ebx, [edx-1Ch]
mov	edi, [esi+edi]
test	edi, edi
jnz	short loc_64209E7C
mov	ecx, ebp
sub	eax, 8
sub	edx, 20h
mov	ebp, [esi+ebx]
test	ebp, ebp
jz	short loc_64209DFA
xchg	ax, ax
			
mov	ebx, [esp+5Ch+var_2C]
			
mov	edi, [esp+5Ch+a]
mov	[edi], ecx
			
mov	ecx, [esp+5Ch+a]
mov	[esp+5Ch+c], ecx 
mov	[esp+5Ch+b], y	
mov	[esp+5Ch+var_5C], ecx 
call	_tma_mp_add_d
test	eax, eax
jnz	loc_64209A1C
inc	[esp+5Ch+str]
mov	y, [esp+5Ch+str]
mov	al, [ebx]
test	al, al
jz	loc_64209F48
mov	ecx, [esp+5Ch+a]
mov	edi, [ecx]
mov	[esp+5Ch+var_28], edi
jmp	loc_64209960
align 4
mov	y, [esp+5Ch+var_2C]
mov	esi, [esp+5Ch+a]
mov	[esi], eax
test	ecx, ecx
jnz	short loc_64209E86
mov	ch_0, [esp+5Ch+a]
mov	dword ptr [eax+8], 0
jmp	short loc_64209E86
align 10h
mov	ch_0, [esp+5Ch+var_28]
inc	eax
cmp	edx, eax
jl	loc_64209F70
mov	ecx, [esp+5Ch+a]
mov	ebp, [ecx+0Ch]
mov	[esp+5Ch+var_40], ebp
			
mov	ecx, [esp+5Ch+a]
mov	edi, [ecx]
mov	[esp+5Ch+var_2C], edi
mov	[esp+5Ch+var_28], edi
mov	edx, [esp+5Ch+var_28]
test	edx, edx
jg	loc_64209A54
mov	edx, [esp+5Ch+var_40]
mov	dword ptr [edx], 0
jmp	loc_64209D15
align 4
mov	eax, 0FFFFFFFDh
add	esp, 4Ch
pop	ebx
pop	esi
pop	edi
pop	ebp
retn
align 4
inc	[esp+5Ch+str]
mov	[esp+5Ch+var_20], 1
jmp	loc_6420986E
align 4
mov	esi, [esp+5Ch+a]
mov	edx, [esi]
mov	[esp+5Ch+var_28], edx
mov	ebp, [esp+5Ch+var_28]
test	ebp, ebp
jnz	loc_64209A0F
jmp	loc_64209A1A
mov	[esp+5Ch+var_28], 0
jmp	loc_64209952
mov	edi, [esp+5Ch+var_28]
add	edi, 41h
mov	ebp, 20h
cdq
idiv	ebp
sub	edi, edx
lea	esi, ds:0[edi*4]
mov	[esp+5Ch+b], esi 
mov	eax, [esp+5Ch+a]
mov	edx, [eax+0Ch]
mov	[esp+5Ch+var_5C], edx 
call	_realloc
mov	[esp+5Ch+var_40], eax
test	eax, eax
jz	loc_6420A0B4
mov	eax, [esp+5Ch+var_40]
mov	esi, [esp+5Ch+a]
mov	[esi+0Ch], eax
mov	ecx, [esi+4]
mov	[esi+4], edi
cmp	edi, ecx
jle	loc_64209EF8
lea	edx, ds:0[ecx*4]
mov	esi, eax
mov	ebp, ecx
not	ebp
add	ebp, edi
and	ebp, 7
jz	loc_6420A097
mov	eax, [esp+5Ch+var_40]
mov	dword ptr [eax+ecx*4], 0
inc	ecx
add	edx, 4
mov	[esp+5Ch+var_40], esi
cmp	ebp, 1
jz	loc_6420A0AE
cmp	ebp, 2
jz	short loc_6420A044
cmp	ebp, 3
jz	short loc_6420A039
cmp	ebp, 4
jz	short loc_6420A02E
cmp	ebp, 5
jz	short loc_6420A023
cmp	ebp, 6
jz	short loc_6420A018
mov	dword ptr [esi+edx], 0
inc	ecx
add	edx, 4
mov	dword ptr [esi+edx], 0
inc	ecx
add	edx, 4
mov	dword ptr [esi+edx], 0
inc	ecx
add	edx, 4
mov	dword ptr [esi+edx], 0
inc	ecx
add	edx, 4
mov	dword ptr [esi+edx], 0
inc	ecx
add	edx, 4
mov	dword ptr [esi+edx], 0
inc	ecx
add	edx, 4
mov	[esp+5Ch+var_40], esi
mov	eax, esi
jmp	short loc_6420A097
mov	dword ptr [esi+edx+4], 0
mov	dword ptr [esi+edx+8], 0
mov	dword ptr [esi+edx+0Ch], 0
mov	dword ptr [esi+edx+10h], 0
mov	dword ptr [esi+edx+14h], 0
mov	dword ptr [esi+edx+18h], 0
mov	dword ptr [esi+edx+1Ch], 0
add	ecx, 8
add	edx, 20h
mov	eax, esi
			
mov	dword ptr [eax+edx], 0
lea	eax, [ecx+1]
cmp	edi, eax
jg	short loc_6420A057
mov	[esp+5Ch+var_40], esi
jmp	loc_64209EF8
mov	eax, [esp+5Ch+var_40]
jmp	short loc_6420A097
mov	eax, 0FFFFFFFEh
jmp	loc_64209A1C
align 10h
public _tma_mp_fread
push	ebp
push	edi
push	esi
push	ebx
sub	esp, 4Ch
mov	eax, [esp+5Ch+a]
mov	dword ptr [eax+8], 0
mov	dword ptr [eax], 0
mov	edx, [eax+0Ch]
mov	ebx, [eax+4]
test	ebx, ebx
jle	loc_6420A1A7
lea	ecx, [ebx-1]
and	ecx, 7
mov	dword ptr [edx], 0
mov	eax, 1
cmp	eax, ebx
jge	loc_6420A1A7
test	ecx, ecx
jz	short loc_6420A161
cmp	ecx, 1
jz	short loc_6420A155
cmp	ecx, 2
jz	short loc_6420A14D
cmp	ecx, 3
jz	short loc_6420A145
cmp	ecx, 4
jz	short loc_6420A13D
cmp	ecx, 5
jz	short loc_6420A135
cmp	ecx, 6
jz	short loc_6420A12D
mov	dword ptr [edx+eax*4], 0
mov	eax, 2
mov	dword ptr [edx+eax*4], 0
inc	eax
mov	dword ptr [edx+eax*4], 0
inc	eax
mov	dword ptr [edx+eax*4], 0
inc	eax
mov	dword ptr [edx+eax*4], 0
inc	eax
mov	dword ptr [edx+eax*4], 0
inc	eax
mov	dword ptr [edx+eax*4], 0
inc	eax
cmp	eax, ebx
jge	short loc_6420A1A7
			
mov	dword ptr [edx+eax*4], 0
mov	dword ptr [edx+eax*4+4], 0
mov	dword ptr [edx+eax*4+8], 0
mov	dword ptr [edx+eax*4+0Ch], 0
mov	dword ptr [edx+eax*4+10h], 0
mov	dword ptr [edx+eax*4+14h], 0
mov	dword ptr [edx+eax*4+18h], 0
mov	dword ptr [edx+eax*4+1Ch], 0
add	eax, 8
cmp	eax, ebx
jl	short loc_6420A161
			
mov	edx, [esp+5Ch+stream]
mov	[esp+5Ch+var_5C], edx 
call	_fgetc
cmp	eax, 2Dh
jz	loc_6420A7EB
mov	[esp+5Ch+var_20], 0
mov	ebx, [esp+5Ch+radix]
test	ebx, ebx
jle	loc_6420A75E
mov	edx, _tma_mp_s_rmap
movsx	esi, byte ptr [edx]
cmp	esi, ch_0
jz	loc_6420A7D8
xor	ebx, ebx
mov	ecx, [esp+5Ch+radix]
dec	ecx
and	ecx, 7
jz	short loc_6420A265
mov	y, 1
cmp	[esp+5Ch+radix], 1
jle	loc_6420A760
movsx	edi, byte ptr [edx+1]
cmp	edi, ch_0
jz	loc_6420A2C8
cmp	ecx, 1
jz	short loc_6420A265
cmp	ecx, 2
jz	short loc_6420A25C
cmp	ecx, 3
jz	short loc_6420A253
cmp	ecx, 4
jz	short loc_6420A24A
cmp	ecx, 5
jz	short loc_6420A241
cmp	ecx, 6
jz	short loc_6420A234
inc	y
movsx	ecx, byte ptr [edx+y]
cmp	ecx, ch_0
jz	loc_6420A2C8
inc	y
movsx	esi, byte ptr [edx+y]
cmp	esi, ch_0
jz	loc_6420A2C8
inc	y
movsx	ebp, byte ptr [edx+y]
cmp	ebp, ch_0
jz	short loc_6420A2C8
inc	y
movsx	edi, byte ptr [edx+y]
cmp	edi, ch_0
jz	short loc_6420A2C8
inc	y
movsx	ecx, byte ptr [edx+y]
cmp	ecx, ch_0
jz	short loc_6420A2C8
inc	y
movsx	esi, byte ptr [edx+y]
cmp	esi, ch_0
jz	short loc_6420A2C8
			
lea	ecx, [y+1]
mov	y, ecx
cmp	[esp+5Ch+radix], ecx
jle	loc_6420A760
movsx	edi, byte ptr [edx+y]
cmp	edi, ch_0
jz	short loc_6420A2C8
inc	y
movsx	ebp, byte ptr [edx+y]
cmp	ebp, ch_0
jz	short loc_6420A2C8
lea	y, [ecx+2]
movsx	edi, byte ptr [edx+y]
cmp	edi, ch_0
jz	short loc_6420A2C8
lea	y, [ecx+3]
movsx	esi, byte ptr [edx+y]
cmp	esi, ch_0
jz	short loc_6420A2C8
lea	y, [ecx+4]
movsx	ebp, byte ptr [edx+y]
cmp	ebp, ch_0
jz	short loc_6420A2C8
lea	y, [ecx+5]
movsx	edi, byte ptr [edx+y]
cmp	edi, ch_0
jz	short loc_6420A2C8
lea	y, [ecx+6]
movsx	esi, byte ptr [edx+y]
cmp	esi, ch_0
jz	short loc_6420A2C8
lea	y, [ecx+7]
movsx	ecx, byte ptr [edx+y]
cmp	ecx, ch_0
jnz	short loc_6420A265
nop
			
mov	esi, [esp+5Ch+a]
mov	ecx, [esi]
mov	edx, [esi+4]
cmp	ecx, edx
jge	loc_6420A7AC
mov	ebp, [esi+0Ch]
mov	[esp+5Ch+var_40], ebp
			
test	ecx, ecx
jle	loc_6420A7C6
lea	ebp, [ecx-1]
and	ebp, 3
mov	ch_0, [esp+5Ch+radix]
mov	esi, [esp+5Ch+var_40]
mul	dword ptr [esi]
mov	[esp+5Ch+var_3C], eax
mov	[esp+5Ch+var_38], edx
add	esi, 4
mov	[esp+5Ch+var_44], esi
mov	edx, [esp+5Ch+var_3C]
and	edx, 0FFFFFFFh
mov	eax, [esp+5Ch+var_40]
mov	[eax], edx
mov	eax, [esp+5Ch+var_3C]
mov	edx, [esp+5Ch+var_38]
shrd	eax, edx, 1Ch
shr	edx, 1Ch
mov	[esp+5Ch+var_2C], eax
mov	[esp+5Ch+var_28], edx
mov	edi, eax
mov	[esp+5Ch+var_3C], 1
mov	[esp+5Ch+var_34], esi
cmp	[esp+5Ch+var_3C], ecx
jge	loc_6420A4C7
test	ebp, ebp
jz	loc_6420A415
cmp	ebp, 1
jz	short loc_6420A3CA
cmp	ebp, 2
jz	short loc_6420A397
xor	ebp, ebp
mov	eax, [esp+5Ch+radix]
mov	esi, [esp+5Ch+var_44]
mul	dword ptr [esi]
add	edi, eax
adc	ebp, edx
mov	esi, [esp+5Ch+var_40]
add	esi, 8
mov	[esp+5Ch+var_44], esi
mov	eax, edi
and	eax, 0FFFFFFFh
mov	edx, [esp+5Ch+var_34]
mov	[edx], eax
shrd	edi, ebp, 1Ch
shr	ebp, 1Ch
mov	[esp+5Ch+var_3C], 2
mov	esi, [esp+5Ch+var_44]
mov	[esp+5Ch+var_34], esi
xor	ebp, ebp
mov	eax, [esp+5Ch+radix]
mov	esi, [esp+5Ch+var_44]
mul	dword ptr [esi]
add	edi, eax
adc	ebp, edx
add	esi, 4
mov	[esp+5Ch+var_44], esi
mov	eax, edi
and	eax, 0FFFFFFFh
mov	edx, [esp+5Ch+var_34]
mov	[edx], eax
shrd	edi, ebp, 1Ch
shr	ebp, 1Ch
inc	[esp+5Ch+var_3C]
mov	[esp+5Ch+var_34], esi
mov	esi, edi
xor	edi, edi
mov	eax, [esp+5Ch+radix]
mov	ebp, [esp+5Ch+var_44]
mul	dword ptr [ebp+0]
add	esi, eax
adc	edi, edx
add	ebp, 4
mov	[esp+5Ch+var_44], ebp
mov	ebp, esi
and	ebp, 0FFFFFFFh
mov	eax, [esp+5Ch+var_34]
mov	[eax], ebp
mov	eax, esi
mov	edx, edi
shrd	eax, edx, 1Ch
shr	edx, 1Ch
mov	[esp+5Ch+var_2C], eax
mov	[esp+5Ch+var_28], edx
mov	edi, eax
inc	[esp+5Ch+var_3C]
cmp	[esp+5Ch+var_3C], ecx
jge	loc_6420A4C7
mov	ebp, y
mov	ebx, edi
xor	esi, esi
mov	eax, [esp+5Ch+radix]
mov	edi, [esp+5Ch+var_44]
mul	dword ptr [edi]
add	ebx, eax
adc	esi, edx
mov	eax, ebx
and	eax, 0FFFFFFFh
mov	[edi], eax
shrd	ebx, esi, 1Ch
shr	esi, 1Ch
xor	esi, esi
mov	eax, [esp+5Ch+radix]
mul	dword ptr [edi+4]
add	ebx, eax
adc	esi, edx
mov	edx, ebx
and	edx, 0FFFFFFFh
mov	[edi+4], edx
shrd	ebx, esi, 1Ch
shr	esi, 1Ch
xor	esi, esi
mov	eax, [esp+5Ch+radix]
mul	dword ptr [edi+8]
add	ebx, eax
adc	esi, edx
add	edi, 0Ch
mov	[esp+5Ch+var_2C], edi
mov	eax, ebx
and	eax, 0FFFFFFFh
mov	edx, [esp+5Ch+var_44]
mov	[edx+8], eax
shrd	ebx, esi, 1Ch
shr	esi, 1Ch
xor	esi, esi
mov	eax, [esp+5Ch+radix]
mov	edi, edx
mul	dword ptr [edx+0Ch]
add	ebx, eax
adc	esi, edx
add	edi, 10h
mov	[esp+5Ch+var_44], edi
mov	edi, ebx
and	edi, 0FFFFFFFh
mov	edx, [esp+5Ch+var_2C]
mov	[edx], edi
shrd	ebx, esi, 1Ch
shr	esi, 1Ch
mov	edi, ebx
add	[esp+5Ch+var_3C], 4
cmp	[esp+5Ch+var_3C], ecx
jl	loc_6420A417
mov	[esp+5Ch+var_2C], ebx
mov	[esp+5Ch+var_28], esi
mov	ebx, y
			
mov	edi, [esp+5Ch+var_3C]
inc	edi
mov	ebp, [esp+5Ch+var_3C]
add	ebp, 2
mov	esi, [esp+5Ch+var_2C]
mov	edx, [esp+5Ch+var_44]
mov	[edx], esi
cmp	edi, ecx
jge	loc_6420A5C4
mov	edi, ecx
sub	edi, ebp
and	edi, 7
mov	dword ptr [edx+4], 0
mov	eax, edx
add	eax, 8
mov	esi, [esp+5Ch+var_3C]
add	esi, 3
cmp	ebp, ecx
jge	loc_6420A5C4
test	edi, edi
jz	short loc_6420A580
cmp	edi, 1
jz	short loc_6420A56F
cmp	edi, 2
jz	short loc_6420A565
cmp	edi, 3
jz	short loc_6420A55B
cmp	edi, 4
jz	short loc_6420A551
cmp	edi, 5
jz	short loc_6420A547
cmp	edi, 6
jz	short loc_6420A53D
mov	dword ptr [eax], 0
mov	eax, [esp+5Ch+var_44]
add	eax, 0Ch
mov	esi, [esp+5Ch+var_3C]
add	esi, 4
mov	dword ptr [eax], 0
add	eax, 4
inc	esi
mov	dword ptr [eax], 0
add	eax, 4
inc	esi
mov	dword ptr [eax], 0
add	eax, 4
inc	esi
mov	dword ptr [eax], 0
add	eax, 4
inc	esi
mov	dword ptr [eax], 0
add	eax, 4
inc	esi
mov	dword ptr [eax], 0
add	eax, 4
inc	esi
lea	edx, [esi-1]
cmp	edx, ecx
jge	short loc_6420A5C4
			
mov	dword ptr [eax], 0
mov	dword ptr [eax+4], 0
mov	dword ptr [eax+8], 0
mov	dword ptr [eax+0Ch], 0
mov	dword ptr [eax+10h], 0
mov	dword ptr [eax+14h], 0
mov	dword ptr [eax+18h], 0
mov	dword ptr [eax+1Ch], 0
add	eax, 20h
add	esi, 8
lea	ebp, [esi-1]
cmp	ebp, ecx
jl	short loc_6420A580
			
lea	edx, [ecx+1]
mov	edi, [esp+5Ch+a]
mov	[edi], edx
test	edx, edx
jle	loc_6420A79A
mov	esi, [edi+0Ch]
mov	edx, [esi+ecx*4]
test	edx, edx
jnz	loc_6420A72E
lea	ebp, [ecx-1]
lea	ch_0, ds:0[ebp*4]
mov	edi, ecx
and	edi, 7
jz	loc_6420A69E
mov	edx, ecx
test	ecx, ecx
jle	loc_6420A794
mov	ecx, [esi+eax]
mov	[esp+5Ch+var_3C], ecx
mov	ecx, ebp
sub	eax, 4
mov	ebp, [esp+5Ch+var_3C]
test	ebp, ebp
jnz	loc_6420A728
cmp	edi, 1
jz	short loc_6420A69E
cmp	edi, 2
jz	short loc_6420A68D
cmp	edi, 3
jz	short loc_6420A67C
cmp	edi, 4
jz	short loc_6420A66B
cmp	edi, 5
jz	short loc_6420A65A
cmp	edi, 6
jz	short loc_6420A649
mov	edx, ecx
mov	edi, [esi+eax]
dec	ecx
sub	eax, 4
test	edi, edi
jnz	loc_6420A728
mov	edx, ecx
mov	ebp, [esi+eax]
dec	ecx
sub	eax, 4
test	ebp, ebp
jnz	loc_6420A728
mov	edx, ecx
mov	edi, [esi+eax]
dec	ecx
sub	eax, 4
test	edi, edi
jnz	loc_6420A728
mov	edx, ecx
mov	ebp, [esi+eax]
dec	ecx
sub	eax, 4
test	ebp, ebp
jnz	loc_6420A728
mov	edx, ecx
mov	edi, [esi+eax]
dec	ecx
sub	eax, 4
test	edi, edi
jnz	loc_6420A728
mov	edx, ecx
mov	ebp, [esi+eax]
dec	ecx
sub	eax, 4
test	ebp, ebp
jnz	loc_6420A728
			
mov	[esp+5Ch+var_3C], y
mov	edx, ecx
test	ecx, ecx
jle	loc_6420A790
lea	edi, [ecx-1]
lea	y, [eax-4]
mov	ebp, [esi+eax]
test	ebp, ebp
jnz	short loc_6420A724
mov	edx, edi
lea	ebp, [ecx-2]
lea	edi, [eax-8]
mov	ebx, [esi+ebx]
test	ebx, ebx
jnz	short loc_6420A724
mov	edx, ebp
lea	ebp, [ecx-3]
lea	ebx, [eax-0Ch]
mov	edi, [esi+edi]
test	edi, edi
jnz	short loc_6420A724
mov	edx, ebp
lea	ebp, [ecx-4]
lea	edi, [eax-10h]
mov	ebx, [esi+ebx]
test	ebx, ebx
jnz	short loc_6420A724
mov	edx, ebp
lea	ebp, [ecx-5]
lea	ebx, [eax-14h]
mov	edi, [esi+edi]
test	edi, edi
jnz	short loc_6420A724
mov	edx, ebp
lea	ebp, [ecx-6]
lea	edi, [eax-18h]
mov	ebx, [esi+ebx]
test	ebx, ebx
jnz	short loc_6420A724
mov	edx, ebp
lea	ebp, [ecx-7]
lea	ebx, [eax-1Ch]
mov	edi, [esi+edi]
test	edi, edi
jnz	short loc_6420A724
mov	edx, ebp
sub	ecx, 8
sub	eax, 20h
mov	ebp, [esi+ebx]
test	ebp, ebp
jz	short loc_6420A6A2
xchg	ax, ax
			
mov	ebx, [esp+5Ch+var_3C]
			
mov	eax, [esp+5Ch+a]
mov	[eax], edx
			
mov	ebp, [esp+5Ch+a]
mov	[esp+5Ch+c], ebp 
mov	[esp+5Ch+b], y	
mov	[esp+5Ch+var_5C], ebp 
call	_tma_mp_add_d
test	eax, eax
jnz	short loc_6420A786
mov	y, [esp+5Ch+stream]
mov	[esp+5Ch+var_5C], ebx 
call	_fgetc
mov	ebx, [esp+5Ch+radix]
test	ebx, ebx
jg	loc_6420A1D0
xor	ebx, ebx
			
cmp	y, [esp+5Ch+radix]
jnz	loc_6420A2C8
mov	ecx, [esp+5Ch+a]
cmp	dword ptr [ecx+8], 1
jz	short loc_6420A779
cmp	dword ptr [ecx], 1
jle	short loc_6420A7DF
			
mov	edx, [esp+5Ch+var_20]
mov	esi, [esp+5Ch+a]
mov	[esi+8], edx
xor	ch_0, ch_0
			
add	esp, 4Ch
pop	y
pop	esi
pop	edi
pop	ebp
retn
align 10h
mov	y, [esp+5Ch+var_3C]
mov	eax, [esp+5Ch+a]
mov	[eax], ecx
test	edx, edx
jnz	short loc_6420A72E
mov	ecx, [esp+5Ch+a]
mov	dword ptr [ecx+8], 0
jmp	short loc_6420A72E
align 4
lea	ch_0, [ecx+1]
cmp	edx, eax
jl	short loc_6420A804
mov	edx, [esp+5Ch+a]
mov	eax, [edx+0Ch]
mov	[esp+5Ch+var_40], eax
test	ecx, ecx
jg	loc_6420A2E8
mov	edi, [esp+5Ch+var_40]
mov	dword ptr [edi], 0
jmp	loc_6420A5C4
align 4
xor	ebx, ebx
jmp	loc_6420A2C8
mov	edi, [ecx+0Ch]
xor	ch_0, ch_0
cmp	dword ptr [edi], 0
jz	short loc_6420A786
jmp	short loc_6420A779
mov	ecx, [esp+5Ch+stream]
mov	[esp+5Ch+var_5C], ecx 
call	_fgetc
mov	[esp+5Ch+var_20], 1
jmp	loc_6420A1C4
lea	edi, [ecx+41h]
mov	ecx, 20h
cdq
idiv	ecx
sub	edi, edx
lea	ebp, ds:0[edi*4]
mov	[esp+5Ch+b], ebp 
mov	esi, [esp+5Ch+a]
mov	ecx, [esi+0Ch]
mov	[esp+5Ch+var_5C], ecx 
call	_realloc
mov	[esp+5Ch+var_40], eax
test	eax, eax
jz	loc_6420A952
mov	eax, [esp+5Ch+var_40]
mov	ebp, [esp+5Ch+a]
mov	[ebp+0Ch], eax
mov	ecx, [ebp+4]
mov	[ebp+4], edi
cmp	edi, ecx
jle	loc_6420A94A
lea	edx, ds:0[ecx*4]
mov	esi, [esp+5Ch+var_40]
mov	ebp, ecx
not	ebp
add	ebp, edi
and	ebp, 7
jz	short loc_6420A8E5
mov	eax, [esp+5Ch+var_40]
mov	dword ptr [eax+ecx*4], 0
inc	ecx
add	edx, 4
mov	[esp+5Ch+var_40], esi
cmp	ebp, 1
jz	loc_6420A944
cmp	ebp, 2
jz	short loc_6420A8D2
cmp	ebp, 3
jz	short loc_6420A8C7
cmp	ebp, 4
jz	short loc_6420A8BC
cmp	ebp, 5
jz	short loc_6420A8B1
cmp	ebp, 6
jz	short loc_6420A8A6
mov	dword ptr [esi+edx], 0
inc	ecx
add	edx, 4
mov	dword ptr [esi+edx], 0
inc	ecx
add	edx, 4
mov	dword ptr [esi+edx], 0
inc	ecx
add	edx, 4
mov	dword ptr [esi+edx], 0
inc	ecx
add	edx, 4
mov	dword ptr [esi+edx], 0
inc	ecx
add	edx, 4
mov	dword ptr [esi+edx], 0
inc	ecx
add	edx, 4
mov	[esp+5Ch+var_40], esi
mov	eax, esi
jmp	short loc_6420A8E7
			
mov	eax, esi
			
mov	dword ptr [eax+edx], 0
lea	ebp, [ecx+1]
cmp	edi, ebp
jle	short loc_6420A935
mov	dword ptr [esi+edx+4], 0
mov	dword ptr [esi+edx+8], 0
mov	dword ptr [esi+edx+0Ch], 0
mov	dword ptr [esi+edx+10h], 0
mov	dword ptr [esi+edx+14h], 0
mov	dword ptr [esi+edx+18h], 0
mov	dword ptr [esi+edx+1Ch], 0
add	ecx, 8
add	edx, 20h
jmp	short loc_6420A8E5
mov	[esp+5Ch+var_40], esi
mov	esi, [esp+5Ch+a]
mov	ecx, [esi]
jmp	loc_6420A2E0
mov	eax, [esp+5Ch+var_40]
jmp	short loc_6420A8E7
mov	ecx, [ebp+0]
jmp	loc_6420A2E0
mov	eax, 0FFFFFFFEh
jmp	loc_6420A786
public _tma_mp_mod_2d
			
push	ebp
push	edi
push	esi
push	ebx
sub	esp, 2Ch
mov	ebp, [esp+3Ch+a]
mov	edi, [esp+3Ch+c]
mov	edx, [esp+3Ch+b]
test	edx, edx
jle	loc_6420B004
mov	esi, [a_0+0]
lea	ecx, ds:0[esi*4]
lea	eax, ds:0[ecx*8]
sub	eax, ecx
cmp	[esp+3Ch+b], eax
jge	loc_6420AE1C
cmp	c_0, a_0
jz	loc_6420B148
cmp	esi, [c_0+4]
jg	loc_6420B12C
mov	edx, [a_0+0Ch]
mov	ebx, [c_0+0Ch]
mov	[esp+3Ch+var_20], ebx
test	esi, esi
jle	loc_6420B150
lea	ecx, [esi-1]
and	ecx, 7
mov	res, [edx]
mov	[ebx], eax
mov	eax, 1
cmp	eax, esi
jz	loc_6420AA7D
test	ecx, ecx
jz	short loc_6420AA29
cmp	ecx, 1
jz	short loc_6420AA1E
cmp	ecx, 2
jz	short loc_6420AA17
cmp	ecx, 3
jz	short loc_6420AA10
cmp	ecx, 4
jz	short loc_6420AA09
cmp	ecx, 5
jz	short loc_6420AA02
cmp	ecx, 6
jz	short loc_6420A9FB
mov	ecx, [edx+4]
mov	[ebx+eax*4], ecx
mov	eax, 2
mov	ecx, [edx+eax*4]
mov	[ebx+eax*4], ecx
inc	eax
mov	ecx, [edx+eax*4]
mov	[ebx+eax*4], ecx
inc	eax
mov	ecx, [edx+eax*4]
mov	[ebx+eax*4], ecx
inc	eax
mov	ecx, [edx+eax*4]
mov	[ebx+eax*4], ecx
inc	eax
mov	ecx, [edx+eax*4]
mov	[ebx+eax*4], ecx
inc	eax
mov	ecx, [edx+eax*4]
mov	[ebx+eax*4], ecx
inc	eax
cmp	eax, esi
jz	short loc_6420AA7D
mov	[esp+3Ch+var_28], a_0
mov	ecx, [edx+eax*4]
mov	[ebx+eax*4], ecx
lea	ecx, [eax+1]
mov	a_0, [edx+ecx*4]
mov	[ebx+ecx*4], ebp
lea	ecx, [eax+2]
mov	ebp, [edx+ecx*4]
mov	[ebx+ecx*4], ebp
lea	ecx, [eax+3]
mov	ebp, [edx+ecx*4]
mov	[ebx+ecx*4], ebp
lea	ecx, [eax+4]
mov	ebp, [edx+ecx*4]
mov	[ebx+ecx*4], ebp
lea	ecx, [eax+5]
mov	ebp, [edx+ecx*4]
mov	[ebx+ecx*4], ebp
lea	ecx, [eax+6]
mov	ebp, [edx+ecx*4]
mov	[ebx+ecx*4], ebp
lea	ecx, [eax+7]
mov	ebp, [edx+ecx*4]
mov	[ebx+ecx*4], ebp
add	eax, 8
cmp	eax, esi
jnz	short loc_6420AA2D
mov	ebp, [esp+3Ch+var_28]
			
lea	edx, [ebx+eax*4]
mov	[esp+3Ch+var_20], edx
mov	ecx, [c_0]
mov	[esp+3Ch+var_24], ecx
cmp	ecx, eax
jle	loc_6420AB7F
mov	edx, eax
not	edx
add	edx, ecx
and	edx, 7
mov	[esp+3Ch+var_28], edx
mov	edx, [esp+3Ch+var_20]
mov	dword ptr [edx], 0
add	edx, 4
lea	ecx, [eax+1]
cmp	[esp+3Ch+var_24], ecx
jle	loc_6420AB7F
cmp	[esp+3Ch+var_28], 0
jz	short loc_6420AB3C
cmp	[esp+3Ch+var_28], 1
jz	short loc_6420AB2C
cmp	[esp+3Ch+var_28], 2
jz	short loc_6420AB22
cmp	[esp+3Ch+var_28], 3
jz	short loc_6420AB18
cmp	[esp+3Ch+var_28], 4
jz	short loc_6420AB0E
cmp	[esp+3Ch+var_28], 5
jz	short loc_6420AB04
cmp	[esp+3Ch+var_28], 6
jz	short loc_6420AAFA
mov	dword ptr [edx], 0
mov	edx, [esp+3Ch+var_20]
add	edx, 8
lea	ecx, [eax+2]
mov	dword ptr [edx], 0
add	edx, 4
inc	ecx
mov	dword ptr [edx], 0
add	edx, 4
inc	ecx
mov	dword ptr [edx], 0
add	edx, 4
inc	ecx
mov	dword ptr [edx], 0
add	edx, 4
inc	ecx
mov	dword ptr [edx], 0
add	edx, 4
inc	ecx
mov	dword ptr [edx], 0
add	edx, 4
inc	ecx
cmp	[esp+3Ch+var_24], ecx
jle	short loc_6420AB7F
			
mov	dword ptr [edx], 0
mov	dword ptr [edx+4], 0
mov	dword ptr [edx+8], 0
mov	dword ptr [edx+0Ch], 0
mov	dword ptr [edx+10h], 0
mov	dword ptr [edx+14h], 0
mov	dword ptr [edx+18h], 0
mov	dword ptr [edx+1Ch], 0
add	edx, 20h
add	ecx, 8
cmp	[esp+3Ch+var_24], ecx
jg	short loc_6420AB3C
			
mov	[c_0], esi
mov	eax, [a_0+8]
mov	[c_0+8], eax
mov	eax, 92492493h
imul	[esp+3Ch+b]
mov	a_0, [esp+3Ch+b]
add	ebp, edx
sar	ebp, 4
mov	ecx, [esp+3Ch+b]
sar	ecx, 1Fh
sub	ebp, ecx
lea	edx, ds:0[ebp*4]
lea	eax, ds:0[edx*8]
sub	eax, edx
cmp	[esp+3Ch+b], eax
setnz	cl
movzx	eax, cl
add	eax, ebp
mov	[esp+3Ch+var_28], eax
cmp	eax, esi
jge	loc_6420ACAB
lea	edx, [ebx+eax*4]
mov	[esp+3Ch+var_24], edx
mov	ecx, eax
not	ecx
add	ecx, esi
and	ecx, 7
mov	eax, [esp+3Ch+var_24]
mov	dword ptr [eax], 0
mov	edx, [esp+3Ch+var_28]
inc	x
add	eax, 4
cmp	x, esi
jge	loc_6420ACAB
test	ecx, ecx
jz	short loc_6420AC6A
cmp	ecx, 1
jz	short loc_6420AC5C
cmp	ecx, 2
jz	short loc_6420AC52
cmp	ecx, 3
jz	short loc_6420AC48
cmp	ecx, 4
jz	short loc_6420AC3E
cmp	ecx, 5
jz	short loc_6420AC34
cmp	ecx, 6
jz	short loc_6420AC2A
mov	dword ptr [eax], 0
mov	x, [esp+3Ch+var_28]
add	x, 2
mov	eax, [esp+3Ch+var_24]
add	eax, 8
mov	dword ptr [eax], 0
inc	x
add	eax, 4
mov	dword ptr [eax], 0
inc	x
add	eax, 4
mov	dword ptr [eax], 0
inc	x
add	eax, 4
mov	dword ptr [eax], 0
inc	x
add	eax, 4
mov	dword ptr [eax], 0
inc	x
add	eax, 4
mov	dword ptr [eax], 0
inc	x
add	eax, 4
cmp	x, esi
jge	short loc_6420ACAB
			
mov	dword ptr [eax], 0
mov	dword ptr [eax+4], 0
mov	dword ptr [eax+8], 0
mov	dword ptr [eax+0Ch], 0
mov	dword ptr [eax+10h], 0
mov	dword ptr [eax+14h], 0
mov	dword ptr [eax+18h], 0
mov	dword ptr [eax+1Ch], 0
add	x, 8
add	eax, 20h
cmp	x, esi
jl	short loc_6420AC6A
			
mov	x, 1Ch
mov	eax, [esp+3Ch+b]
mov	ecx, edx
xor	edx, edx
div	ecx
mov	eax, 1
mov	cl, dl
shl	eax, cl
dec	eax
and	[ebx+ebp*4], eax
test	esi, esi
jle	loc_6420B112
lea	edx, [esi-1]
mov	ebp, [ebx+edx*4]
test	ebp, ebp
jnz	loc_6420B094
lea	eax, ds:0FFFFFFF8h[esi*4]
mov	ecx, edx
and	ecx, 7
jz	loc_6420AD82
mov	esi, edx
test	edx, edx
jle	loc_6420B110
mov	ebp, [ebx+eax]
sub	eax, 4
test	ebp, ebp
jnz	loc_6420B104
lea	edx, [edx-1]
cmp	ecx, 1
jz	short loc_6420AD82
cmp	ecx, 2
jz	short loc_6420AD73
cmp	ecx, 3
jz	short loc_6420AD64
cmp	ecx, 4
jz	short loc_6420AD55
cmp	ecx, 5
jz	short loc_6420AD46
cmp	ecx, 6
jz	short loc_6420AD37
mov	ecx, [ebx+eax]
sub	eax, 4
test	ecx, ecx
jnz	loc_6420B104
dec	edx
mov	esi, [ebx+eax]
sub	eax, 4
test	esi, esi
jnz	loc_6420B104
dec	edx
mov	ebp, [ebx+eax]
sub	eax, 4
test	ebp, ebp
jnz	loc_6420B104
dec	edx
mov	ecx, [ebx+eax]
sub	eax, 4
test	ecx, ecx
jnz	loc_6420B104
dec	edx
mov	esi, [ebx+eax]
sub	eax, 4
test	esi, esi
jnz	loc_6420B104
dec	edx
mov	ebp, [ebx+eax]
sub	eax, 4
test	ebp, ebp
jnz	loc_6420B104
dec	edx
			
mov	esi, edx
test	edx, edx
jle	loc_6420B110
lea	esi, [eax-4]
mov	ecx, [ebx+eax]
test	ecx, ecx
jnz	loc_6420B104
lea	ecx, [edx-1]
mov	edx, ecx
lea	ebp, [eax-8]
mov	esi, [ebx+esi]
test	esi, esi
jnz	loc_6420B104
dec	edx
lea	esi, [eax-0Ch]
mov	ebp, [ebx+ebp]
test	ebp, ebp
jnz	loc_6420B104
lea	edx, [ecx-2]
lea	ebp, [eax-10h]
mov	esi, [ebx+esi]
test	esi, esi
jnz	loc_6420B104
lea	edx, [ecx-3]
lea	esi, [eax-14h]
mov	ebp, [ebx+ebp]
test	ebp, ebp
jnz	loc_6420B104
lea	edx, [ecx-4]
lea	ebp, [eax-18h]
mov	esi, [ebx+esi]
test	esi, esi
jnz	loc_6420B104
lea	edx, [ecx-5]
lea	esi, [eax-1Ch]
mov	ebp, [ebx+ebp]
test	ebp, ebp
jnz	loc_6420B104
lea	edx, [ecx-6]
sub	eax, 20h
mov	esi, [ebx+esi]
test	esi, esi
jnz	loc_6420B104
lea	edx, [ecx-7]
jmp	loc_6420AD82
align 4
cmp	c_0, a_0
jz	loc_6420B094
cmp	esi, [c_0+4]
jg	loc_6420B0E8
mov	ecx, [a_0+0Ch]
mov	edx, [c_0+0Ch]
test	esi, esi
jle	loc_6420B158
lea	ebx, [esi-1]
and	ebx, 7
mov	res, [ecx]
mov	[edx], eax
mov	eax, 1
cmp	eax, esi
jz	loc_6420AF01
test	ebx, ebx
jz	short loc_6420AEAD
cmp	ebx, 1
jz	short loc_6420AEA2
cmp	ebx, 2
jz	short loc_6420AE9B
cmp	ebx, 3
jz	short loc_6420AE94
cmp	ebx, 4
jz	short loc_6420AE8D
cmp	ebx, 5
jz	short loc_6420AE86
cmp	ebx, 6
jz	short loc_6420AE7F
mov	ebx, [ecx+4]
mov	[edx+eax*4], ebx
mov	eax, 2
mov	ebx, [ecx+eax*4]
mov	[edx+eax*4], ebx
inc	eax
mov	ebx, [ecx+eax*4]
mov	[edx+eax*4], ebx
inc	eax
mov	ebx, [ecx+eax*4]
mov	[edx+eax*4], ebx
inc	eax
mov	ebx, [ecx+eax*4]
mov	[edx+eax*4], ebx
inc	eax
mov	ebx, [ecx+eax*4]
mov	[edx+eax*4], ebx
inc	eax
mov	ebx, [ecx+eax*4]
mov	[edx+eax*4], ebx
inc	eax
cmp	eax, esi
jz	short loc_6420AF01
mov	[esp+3Ch+var_2C], a_0
mov	ebx, [ecx+eax*4]
mov	[edx+eax*4], ebx
lea	ebx, [eax+1]
mov	a_0, [ecx+ebx*4]
mov	[edx+ebx*4], ebp
lea	ebx, [eax+2]
mov	ebp, [ecx+ebx*4]
mov	[edx+ebx*4], ebp
lea	ebx, [eax+3]
mov	ebp, [ecx+ebx*4]
mov	[edx+ebx*4], ebp
lea	ebx, [eax+4]
mov	ebp, [ecx+ebx*4]
mov	[edx+ebx*4], ebp
lea	ebx, [eax+5]
mov	ebp, [ecx+ebx*4]
mov	[edx+ebx*4], ebp
lea	ebx, [eax+6]
mov	ebp, [ecx+ebx*4]
mov	[edx+ebx*4], ebp
lea	ebx, [eax+7]
mov	ebp, [ecx+ebx*4]
mov	[edx+ebx*4], ebp
add	eax, 8
cmp	eax, esi
jnz	short loc_6420AEB1
mov	ebp, [esp+3Ch+var_2C]
			
lea	edx, [edx+esi*4]
mov	[esp+3Ch+var_28], esi
mov	res, [c_0]
mov	[esp+3Ch+var_2C], eax
cmp	[esp+3Ch+var_28], eax
jge	loc_6420AFF2
mov	ebx, [esp+3Ch+var_28]
not	ebx
add	ebx, eax
and	ebx, 7
mov	dword ptr [edx], 0
lea	eax, [edx+4]
mov	ecx, [esp+3Ch+var_28]
inc	ecx
cmp	ecx, [esp+3Ch+var_2C]
jge	loc_6420AFF2
test	ebx, ebx
jz	short loc_6420AFAF
cmp	ebx, 1
jz	short loc_6420AF9F
cmp	ebx, 2
jz	short loc_6420AF95
cmp	ebx, 3
jz	short loc_6420AF8B
cmp	ebx, 4
jz	short loc_6420AF81
cmp	ebx, 5
jz	short loc_6420AF77
cmp	ebx, 6
jz	short loc_6420AF6D
mov	dword ptr [eax], 0
lea	eax, [edx+8]
mov	ecx, [esp+3Ch+var_28]
add	ecx, 2
mov	dword ptr [eax], 0
add	eax, 4
inc	ecx
mov	dword ptr [eax], 0
add	eax, 4
inc	ecx
mov	dword ptr [eax], 0
add	eax, 4
inc	ecx
mov	dword ptr [eax], 0
add	eax, 4
inc	ecx
mov	dword ptr [eax], 0
add	eax, 4
inc	ecx
mov	dword ptr [eax], 0
add	eax, 4
inc	ecx
cmp	ecx, [esp+3Ch+var_2C]
jge	short loc_6420AFF2
			
mov	dword ptr [eax], 0
mov	dword ptr [eax+4], 0
mov	dword ptr [eax+8], 0
mov	dword ptr [eax+0Ch], 0
mov	dword ptr [eax+10h], 0
mov	dword ptr [eax+14h], 0
mov	dword ptr [eax+18h], 0
mov	dword ptr [eax+1Ch], 0
add	eax, 20h
add	ecx, 8
cmp	ecx, [esp+3Ch+var_2C]
jl	short loc_6420AFAF
			
mov	[c_0], esi
mov	esi, [a_0+8]
mov	[c_0+8], esi
xor	eax, eax
			
add	esp, 2Ch
pop	ebx
pop	esi
pop	c_0
pop	a_0
retn
mov	dword ptr [c_0+8], 0
mov	dword ptr [c_0], 0
mov	edx, [c_0+0Ch]
mov	ebx, [c_0+4]
test	ebx, ebx
jle	short loc_6420B094
lea	ecx, [ebx-1]
and	ecx, 7
mov	dword ptr [edx], 0
mov	eax, 1
cmp	eax, ebx
jz	short loc_6420B094
test	ecx, ecx
jz	short loc_6420B0A0
cmp	ecx, 1
jz	short loc_6420B086
cmp	ecx, 2
jz	short loc_6420B07E
cmp	ecx, 3
jz	short loc_6420B076
cmp	ecx, 4
jz	short loc_6420B06E
cmp	ecx, 5
jz	short loc_6420B066
cmp	ecx, 6
jz	short loc_6420B05E
mov	dword ptr [edx+eax*4], 0
mov	eax, 2
mov	dword ptr [edx+eax*4], 0
inc	eax
mov	dword ptr [edx+eax*4], 0
inc	eax
mov	dword ptr [edx+eax*4], 0
inc	eax
mov	dword ptr [edx+eax*4], 0
inc	eax
mov	dword ptr [edx+eax*4], 0
inc	eax
mov	dword ptr [edx+eax*4], 0
inc	eax
cmp	eax, ebx
jnz	short loc_6420B0A0
xchg	ax, ax
			
xor	eax, eax
add	esp, 2Ch
pop	ebx
pop	esi
pop	c_0
pop	ebp
retn
align 10h
			
mov	dword ptr [edx+eax*4], 0
mov	dword ptr [edx+eax*4+4], 0
mov	dword ptr [edx+eax*4+8], 0
mov	dword ptr [edx+eax*4+0Ch], 0
mov	dword ptr [edx+eax*4+10h], 0
mov	dword ptr [edx+eax*4+14h], 0
mov	dword ptr [edx+eax*4+18h], 0
mov	dword ptr [edx+eax*4+1Ch], 0
add	eax, 8
cmp	eax, ebx
jnz	short loc_6420B0A0
jmp	short loc_6420B094
mov	[esp+3Ch+size],	esi 
mov	[esp+3Ch+var_3C], c_0 
call	_tma_mp_grow
test	eax, eax
jnz	loc_6420AFFC
mov	esi, [a_0+0]
jmp	loc_6420AE2D
			
mov	[c_0], edx
xor	eax, eax
add	esp, 2Ch
pop	ebx
pop	esi
pop	c_0
pop	ebp
retn
			
mov	[c_0], edx
test	esi, esi
jnz	loc_6420B094
mov	dword ptr [c_0+8], 0
xor	eax, eax
add	esp, 2Ch
pop	ebx
pop	esi
pop	c_0
pop	ebp
retn
align 4
mov	[esp+3Ch+size],	esi 
mov	[esp+3Ch+var_3C], c_0 
call	_tma_mp_grow
test	eax, eax
jnz	loc_6420AFFC
mov	esi, [a_0+0]
jmp	loc_6420A9A5
mov	ebx, [c_0+0Ch]
jmp	loc_6420AB87
xor	res, res
jmp	loc_6420AA84
align 4
mov	[esp+3Ch+var_28], 0
jmp	loc_6420AF08
align 4
public _tma_mp_copy
			
push	ebp
push	edi
push	esi
push	ebx
sub	esp, 2Ch
mov	esi, [esp+3Ch+a]
mov	ebx, [esp+3Ch+b]
cmp	esi, ebx
jz	loc_6420B35E
mov	ebp, [a_0]
cmp	[b_0+4], n
jl	loc_6420B36F
mov	edi, [b_0+0Ch]
mov	res, [a_0+0Ch]
test	n, n
jle	loc_6420B368
lea	ecx, [n-1]
and	ecx, 7
mov	edx, [tmpa]
mov	[tmpb],	edx
mov	edx, 1
cmp	n, ebp
jz	loc_6420B25E
test	ecx, ecx
jz	short loc_6420B20A
cmp	ecx, 1
jz	short loc_6420B1FF
cmp	ecx, 2
jz	short loc_6420B1F8
cmp	ecx, 3
jz	short loc_6420B1F1
cmp	ecx, 4
jz	short loc_6420B1EA
cmp	ecx, 5
jz	short loc_6420B1E3
cmp	ecx, 6
jz	short loc_6420B1DC
mov	ecx, [tmpa+4]
mov	[tmpb+edx*4], ecx
mov	edx, 2
mov	ecx, [tmpa+n*4]
mov	[tmpb+n*4], ecx
inc	n
mov	ecx, [tmpa+n*4]
mov	[tmpb+n*4], ecx
inc	n
mov	ecx, [tmpa+n*4]
mov	[tmpb+n*4], ecx
inc	n
mov	ecx, [tmpa+n*4]
mov	[tmpb+n*4], ecx
inc	n
mov	ecx, [tmpa+n*4]
mov	[tmpb+n*4], ecx
inc	n
mov	ecx, [tmpa+n*4]
mov	[tmpb+n*4], ecx
inc	n
cmp	n, ebp
jz	short loc_6420B25E
mov	[esp+3Ch+var_24], a_0
mov	ecx, [tmpa+edx*4]
mov	[tmpb+edx*4], ecx
lea	ecx, [edx+1]
mov	a_0, [tmpa+ecx*4]
mov	[tmpb+ecx*4], esi
lea	ecx, [edx+2]
mov	esi, [tmpa+n*4]
mov	[tmpb+n*4], esi
lea	n, [edx+3]
mov	esi, [tmpa+n*4]
mov	[tmpb+n*4], esi
lea	n, [edx+4]
mov	esi, [tmpa+n*4]
mov	[tmpb+n*4], esi
lea	n, [edx+5]
mov	esi, [tmpa+n*4]
mov	[tmpb+n*4], esi
lea	n, [edx+6]
mov	esi, [tmpa+n*4]
mov	[tmpb+n*4], esi
lea	n, [edx+7]
mov	esi, [tmpa+n*4]
mov	[tmpb+n*4], esi
add	edx, 8
cmp	n, ebp
jnz	short loc_6420B20E
mov	esi, [esp+3Ch+var_24]
			
lea	tmpb, [tmpb+edx*4]
mov	tmpa, [b_0]
mov	[esp+3Ch+var_20], eax
cmp	n, eax
jge	loc_6420B356
mov	ecx, n
not	ecx
add	ecx, [esp+3Ch+var_20]
and	ecx, 7
mov	[esp+3Ch+var_24], ecx
mov	dword ptr [tmpb], 0
lea	ecx, [tmpb+4]
lea	eax, [n+1]
cmp	n, [esp+3Ch+var_20]
jge	loc_6420B356
cmp	[esp+3Ch+var_24], 0
jz	short loc_6420B313
cmp	[esp+3Ch+var_24], 1
jz	short loc_6420B303
cmp	[esp+3Ch+var_24], 2
jz	short loc_6420B2F9
cmp	[esp+3Ch+var_24], 3
jz	short loc_6420B2EF
cmp	[esp+3Ch+var_24], 4
jz	short loc_6420B2E5
cmp	[esp+3Ch+var_24], 5
jz	short loc_6420B2DB
cmp	[esp+3Ch+var_24], 6
jz	short loc_6420B2D1
mov	dword ptr [tmpb], 0
lea	tmpb, [edi+8]
lea	n, [edx+2]
mov	dword ptr [tmpb], 0
add	tmpb, 4
inc	n
mov	dword ptr [tmpb], 0
add	tmpb, 4
inc	n
mov	dword ptr [tmpb], 0
add	tmpb, 4
inc	n
mov	dword ptr [tmpb], 0
add	tmpb, 4
inc	n
mov	dword ptr [tmpb], 0
add	tmpb, 4
inc	n
mov	dword ptr [tmpb], 0
add	tmpb, 4
inc	n
cmp	n, [esp+3Ch+var_20]
jge	short loc_6420B356
			
mov	dword ptr [tmpb], 0
mov	dword ptr [tmpb+4], 0
mov	dword ptr [tmpb+8], 0
mov	dword ptr [tmpb+0Ch], 0
mov	dword ptr [tmpb+10h], 0
mov	dword ptr [tmpb+14h], 0
mov	dword ptr [tmpb+18h], 0
mov	dword ptr [tmpb+1Ch], 0
add	tmpb, 20h
add	n, 8
cmp	n, [esp+3Ch+var_20]
jl	short loc_6420B313
			
mov	[b_0], ebp
mov	ebp, [a_0+8]
mov	[b_0+8], ebp
xor	n, n
add	esp, 2Ch
pop	b_0
pop	a_0
pop	tmpb
pop	ebp
retn
xor	edx, edx
jmp	loc_6420B261
lea	ecx, [n+40h]
mov	edx, 20h
mov	eax, n
mov	edi, edx
cdq
idiv	edi
sub	ecx, edx
lea	edx, ds:0[ecx*4]
mov	[esp+3Ch+var_38], edx 
mov	eax, [b_0+0Ch]
mov	[esp+3Ch+var_3C], eax 
mov	[esp+3Ch+var_28], ecx
call	_realloc
mov	edi, eax
mov	eax, 0FFFFFFFEh
test	tmpb, tmpb
mov	ecx, [esp+3Ch+var_28]
jz	short loc_6420B360
mov	[b_0+0Ch], tmpb
mov	edx, [b_0+4]
mov	[b_0+4], ecx
cmp	ecx, edx
jle	loc_6420B485
lea	res, [tmpb+edx*4]
mov	n, edx
not	ebp
add	ebp, ecx
and	ebp, 7
mov	dword ptr [eax], 0
inc	edx
add	eax, 4
cmp	ecx, edx
jle	loc_6420B485
test	ebp, ebp
jz	short loc_6420B444
cmp	ebp, 1
jz	short loc_6420B436
cmp	ebp, 2
jz	short loc_6420B42C
cmp	ebp, 3
jz	short loc_6420B422
cmp	ebp, 4
jz	short loc_6420B418
cmp	ebp, 5
jz	short loc_6420B40E
cmp	ebp, 6
jz	short loc_6420B404
mov	dword ptr [eax], 0
inc	edx
add	eax, 4
mov	dword ptr [eax], 0
inc	edx
add	eax, 4
mov	dword ptr [eax], 0
inc	edx
add	eax, 4
mov	dword ptr [eax], 0
inc	edx
add	eax, 4
mov	dword ptr [eax], 0
inc	edx
add	eax, 4
mov	dword ptr [eax], 0
inc	edx
add	eax, 4
mov	dword ptr [eax], 0
inc	edx
add	eax, 4
cmp	ecx, edx
jle	short loc_6420B485
			
mov	dword ptr [eax], 0
mov	dword ptr [eax+4], 0
mov	dword ptr [eax+8], 0
mov	dword ptr [eax+0Ch], 0
mov	dword ptr [eax+10h], 0
mov	dword ptr [eax+14h], 0
mov	dword ptr [eax+18h], 0
mov	dword ptr [eax+1Ch], 0
add	edx, 8
add	eax, 20h
cmp	ecx, edx
jg	short loc_6420B444
			
mov	n, [a_0]
jmp	loc_6420B18D
public _tma_mp_and
push	ebp
push	edi
push	esi
push	ebx
sub	esp, 3Ch
mov	edi, [esp+4Ch+a]
mov	ebp, [esp+4Ch+b]
mov	eax, [edi]
cmp	eax, [ebp+0]
jle	loc_6420B86C
mov	[esp+4Ch+var_4C], 80h 
call	_malloc
test	eax, eax
jz	loc_6420B900
xor	edx, edx
mov	dword ptr [eax+edx*4], 0
mov	dword ptr [eax+edx*4+4], 0
mov	dword ptr [eax+edx*4+8], 0
mov	dword ptr [eax+edx*4+0Ch], 0
mov	dword ptr [eax+edx*4+10h], 0
mov	dword ptr [eax+edx*4+14h], 0
mov	dword ptr [eax+edx*4+18h], 0
mov	dword ptr [eax+edx*4+1Ch], 0
add	edx, 8
cmp	edx, 20h
jnz	short loc_6420B4BC
mov	[esp+4Ch+t.dp],	eax
mov	[esp+4Ch+t.used], 0
mov	[esp+4Ch+t.alloc], 20h
mov	[esp+4Ch+t.sign], 0
lea	ebx, [esp+4Ch+t]
mov	[esp+4Ch+var_48], ebx 
mov	[esp+4Ch+var_4C], a_0 
call	_tma_mp_copy
test	eax, eax
jnz	loc_6420B905
mov	esi, [b_0+0]
mov	a_0, b_0
test	px, px
jle	loc_6420B91C
mov	edx, [esp+4Ch+t.dp]
mov	ecx, [x+0Ch]
lea	x, [px-1]
and	edi, 7
mov	b_0, [ecx]
and	[edx], ebp
mov	res, 1
cmp	ix, px
jz	loc_6420B609
test	edi, edi
jz	short loc_6420B5BD
cmp	edi, 1
jz	short loc_6420B5B2
cmp	edi, 2
jz	short loc_6420B5AB
cmp	edi, 3
jz	short loc_6420B5A4
cmp	edi, 4
jz	short loc_6420B59D
cmp	edi, 5
jz	short loc_6420B596
cmp	edi, 6
jz	short loc_6420B58F
mov	edi, [ecx+4]
and	[edx+ix*4], edi
mov	ix, 2
mov	ebp, [ecx+ix*4]
and	[edx+ix*4], ebp
inc	ix
mov	edi, [ecx+ix*4]
and	[edx+ix*4], edi
inc	ix
mov	ebp, [ecx+ix*4]
and	[edx+ix*4], ebp
inc	ix
mov	edi, [ecx+ix*4]
and	[edx+ix*4], edi
inc	ix
mov	ebp, [ecx+ix*4]
and	[edx+ix*4], ebp
inc	ix
mov	edi, [ecx+ix*4]
and	[edx+ix*4], edi
inc	ix
cmp	ix, px
jz	short loc_6420B609
			
mov	edi, [ecx+ix*4]
and	[edx+ix*4], edi
lea	edi, [ix+1]
mov	ebp, [ecx+edi*4]
and	[edx+edi*4], ebp
lea	edi, [ix+2]
mov	ebp, [ecx+ix*4]
and	[edx+ix*4], ebp
lea	ix, [eax+3]
mov	ebp, [ecx+ix*4]
and	[edx+ix*4], ebp
lea	ix, [eax+4]
mov	ebp, [ecx+ix*4]
and	[edx+ix*4], ebp
lea	ix, [eax+5]
mov	ebp, [ecx+ix*4]
and	[edx+ix*4], ebp
lea	ix, [eax+6]
mov	ebp, [ecx+ix*4]
and	[edx+ix*4], ebp
lea	ix, [eax+7]
mov	ebp, [ecx+ix*4]
and	[edx+ix*4], ebp
add	eax, 8
cmp	ix, px
jnz	short loc_6420B5BD
			
mov	px, [esp+4Ch+t.used]
cmp	ix, esi
jge	loc_6420B6ED
lea	ebp, ds:0[ix*4]
add	ebp, [esp+4Ch+t.dp]
mov	x, ix
not	edi
add	edi, esi
and	edi, 7
mov	dword ptr [ebp+0], 0
lea	ecx, [ix+1]
lea	edx, [ebp+4]
cmp	ix, esi
jge	loc_6420B6ED
test	edi, edi
jz	short loc_6420B6AC
cmp	edi, 1
jz	short loc_6420B69E
cmp	edi, 2
jz	short loc_6420B694
cmp	edi, 3
jz	short loc_6420B68A
cmp	edi, 4
jz	short loc_6420B680
cmp	edi, 5
jz	short loc_6420B676
cmp	edi, 6
jz	short loc_6420B66C
mov	dword ptr [edx], 0
lea	ix, [eax+2]
lea	edx, [ebp+8]
mov	dword ptr [edx], 0
inc	ix
add	edx, 4
mov	dword ptr [edx], 0
inc	ix
add	edx, 4
mov	dword ptr [edx], 0
inc	ix
add	edx, 4
mov	dword ptr [edx], 0
inc	ix
add	edx, 4
mov	dword ptr [edx], 0
inc	ix
add	edx, 4
mov	dword ptr [edx], 0
inc	ix
add	edx, 4
cmp	ix, esi
jge	short loc_6420B6ED
			
mov	dword ptr [edx], 0
mov	dword ptr [edx+4], 0
mov	dword ptr [edx+8], 0
mov	dword ptr [edx+0Ch], 0
mov	dword ptr [edx+10h], 0
mov	dword ptr [edx+14h], 0
mov	dword ptr [edx+18h], 0
mov	dword ptr [edx+1Ch], 0
add	ix, 8
add	edx, 20h
cmp	ix, esi
jl	short loc_6420B6AC
			
test	esi, esi
jle	loc_6420B824
mov	edx, [esp+4Ch+t.dp]
lea	eax, [esi-1]
mov	ix, [edx+eax*4]
test	ecx, ecx
jnz	loc_6420B830
lea	edx, [edx+esi*4-8]
mov	ecx, eax
and	ecx, 7
jz	loc_6420B7A2
mov	esi, eax
test	eax, eax
jle	loc_6420B820
mov	ebp, [edx]
sub	edx, 4
test	ebp, ebp
jnz	loc_6420B910
lea	eax, [eax-1]
cmp	ecx, 1
jz	short loc_6420B7A2
cmp	ecx, 2
jz	short loc_6420B794
cmp	ecx, 3
jz	short loc_6420B786
cmp	ecx, 4
jz	short loc_6420B778
cmp	ecx, 5
jz	short loc_6420B76A
cmp	ecx, 6
jz	short loc_6420B75C
mov	ecx, [edx]
sub	edx, 4
test	ecx, ecx
jnz	loc_6420B910
dec	eax
mov	esi, [edx]
sub	edx, 4
test	esi, esi
jnz	loc_6420B910
dec	eax
mov	x, [edx]
sub	edx, 4
test	edi, edi
jnz	loc_6420B910
dec	eax
mov	ebp, [edx]
sub	edx, 4
test	ebp, ebp
jnz	loc_6420B910
dec	eax
mov	ecx, [edx]
sub	edx, 4
test	ecx, ecx
jnz	loc_6420B910
dec	eax
mov	esi, [edx]
sub	edx, 4
test	esi, esi
jnz	loc_6420B910
dec	eax
			
mov	esi, eax
test	eax, eax
jle	short loc_6420B820
mov	esi, [edx]
test	esi, esi
jnz	loc_6420B910
lea	ecx, [eax-1]
mov	eax, ecx
mov	ebp, [edx-4]
test	ebp, ebp
jnz	loc_6420B910
dec	eax
mov	x, [edx-8]
test	edi, edi
jnz	loc_6420B910
lea	eax, [ecx-2]
mov	ebp, [edx-0Ch]
test	ebp, ebp
jnz	loc_6420B910
lea	eax, [ecx-3]
mov	esi, [edx-10h]
test	esi, esi
jnz	loc_6420B910
lea	eax, [ecx-4]
mov	edi, [edx-14h]
test	edi, edi
jnz	loc_6420B910
lea	eax, [ecx-5]
mov	ebp, [edx-18h]
test	ebp, ebp
jnz	loc_6420B910
lea	eax, [ecx-6]
mov	esi, [edx-1Ch]
sub	edx, 20h
test	esi, esi
jnz	loc_6420B910
lea	eax, [ecx-7]
mov	esi, eax
test	eax, eax
jg	short loc_6420B7A8
			
mov	[esp+4Ch+t.used], eax
test	esi, esi
jnz	short loc_6420B830
mov	[esp+4Ch+t.sign], 0
			
lea	eax, [esp+4Ch+var_3C]
mov	edx, 4
mov	x, eax
mov	esi, [esp+4Ch+c]
mov	ix, edx
rep movsd
mov	edi, [esp+4Ch+c]
mov	c_0, ebx
mov	ecx, edx
rep movsd
lea	ebx, [esp+4Ch+t]
mov	c_0, ebx
mov	esi, eax
mov	ecx, edx
rep movsd
mov	[esp+4Ch+var_4C], ebx 
call	_tma_mp_clear
xor	eax, eax
add	esp, 3Ch
pop	ebx
pop	esi
pop	edi
pop	ebp
retn
align 4
mov	[esp+4Ch+var_4C], 80h 
call	_malloc
test	eax, eax
jz	loc_6420B900
xor	edx, edx
mov	dword ptr [eax+edx*4], 0
mov	dword ptr [eax+edx*4+4], 0
mov	dword ptr [eax+edx*4+8], 0
mov	dword ptr [eax+edx*4+0Ch], 0
mov	dword ptr [eax+edx*4+10h], 0
mov	dword ptr [eax+edx*4+14h], 0
mov	dword ptr [eax+edx*4+18h], 0
mov	dword ptr [eax+edx*4+1Ch], 0
add	edx, 8
cmp	edx, 20h
jnz	short loc_6420B882
mov	[esp+4Ch+t.dp],	eax
mov	[esp+4Ch+t.used], 0
mov	[esp+4Ch+t.alloc], 20h
mov	[esp+4Ch+t.sign], 0
lea	ebx, [esp+4Ch+t]
mov	[esp+4Ch+var_48], ebx 
mov	[esp+4Ch+var_4C], b_0 
call	_tma_mp_copy
test	eax, eax
jnz	short loc_6420B905
mov	esi, [a_0]
jmp	loc_6420B53C
			
mov	eax, 0FFFFFFFEh
			
add	esp, 3Ch
pop	ebx
pop	esi
pop	a_0
pop	b_0
retn
align 10h
			
mov	[esp+4Ch+t.used], eax
jmp	loc_6420B830
align 4
xor	res, res
jmp	loc_6420B609
align 4
public _tma_mp_or
push	ebp
push	edi
push	esi
push	ebx
sub	esp, 3Ch
mov	edi, [esp+4Ch+a]
mov	ebp, [esp+4Ch+b]
mov	eax, [edi]
cmp	eax, [ebp+0]
jle	loc_6420BC24
mov	[esp+4Ch+var_4C], 80h 
call	_malloc
test	eax, eax
jz	loc_6420BCB8
xor	edx, edx
mov	dword ptr [eax+edx*4], 0
mov	dword ptr [eax+edx*4+4], 0
mov	dword ptr [eax+edx*4+8], 0
mov	dword ptr [eax+edx*4+0Ch], 0
mov	dword ptr [eax+edx*4+10h], 0
mov	dword ptr [eax+edx*4+14h], 0
mov	dword ptr [eax+edx*4+18h], 0
mov	dword ptr [eax+edx*4+1Ch], 0
add	edx, 8
cmp	edx, 20h
jnz	short loc_6420B954
mov	[esp+4Ch+t.dp],	eax
mov	[esp+4Ch+t.used], 0
mov	[esp+4Ch+t.alloc], 20h
mov	[esp+4Ch+t.sign], 0
lea	ebx, [esp+4Ch+t]
mov	[esp+4Ch+var_48], ebx 
mov	[esp+4Ch+var_4C], a_0 
call	_tma_mp_copy
test	eax, eax
jnz	loc_6420BCBD
mov	esi, [b_0+0]
mov	a_0, b_0
test	px, px
jle	loc_6420BAA1
mov	edx, [esp+4Ch+t.dp]
mov	ecx, [x+0Ch]
lea	x, [px-1]
and	edi, 7
mov	b_0, [ecx]
or	[edx], ebp
mov	res, 1
cmp	ix, px
jz	loc_6420BAA1
test	edi, edi
jz	short loc_6420BA55
cmp	edi, 1
jz	short loc_6420BA4A
cmp	edi, 2
jz	short loc_6420BA43
cmp	edi, 3
jz	short loc_6420BA3C
cmp	edi, 4
jz	short loc_6420BA35
cmp	edi, 5
jz	short loc_6420BA2E
cmp	edi, 6
jz	short loc_6420BA27
mov	edi, [ecx+4]
or	[edx+ix*4], edi
mov	ix, 2
mov	ebp, [ecx+ix*4]
or	[edx+ix*4], ebp
inc	ix
mov	edi, [ecx+ix*4]
or	[edx+ix*4], edi
inc	ix
mov	ebp, [ecx+ix*4]
or	[edx+ix*4], ebp
inc	ix
mov	edi, [ecx+ix*4]
or	[edx+ix*4], edi
inc	ix
mov	ebp, [ecx+ix*4]
or	[edx+ix*4], ebp
inc	ix
mov	edi, [ecx+ix*4]
or	[edx+ix*4], edi
inc	ix
cmp	ix, px
jz	short loc_6420BAA1
			
mov	edi, [ecx+ix*4]
or	[edx+ix*4], edi
lea	edi, [ix+1]
mov	ebp, [ecx+edi*4]
or	[edx+edi*4], ebp
lea	edi, [ix+2]
mov	ebp, [ecx+ix*4]
or	[edx+ix*4], ebp
lea	ix, [eax+3]
mov	ebp, [ecx+ix*4]
or	[edx+ix*4], ebp
lea	ix, [eax+4]
mov	ebp, [ecx+ix*4]
or	[edx+ix*4], ebp
lea	ix, [eax+5]
mov	ebp, [ecx+ix*4]
or	[edx+ix*4], ebp
lea	ix, [eax+6]
mov	ebp, [ecx+ix*4]
or	[edx+ix*4], ebp
lea	ix, [eax+7]
mov	ebp, [ecx+ix*4]
or	[edx+ix*4], ebp
add	eax, 8
cmp	ix, px
jnz	short loc_6420BA55
			
mov	ecx, [esp+4Ch+t.used]
test	ecx, ecx
jle	loc_6420BBDA
mov	edx, [esp+4Ch+t.dp]
lea	ix, [ecx-1]
mov	px, [edx+eax*4]
test	esi, esi
jnz	loc_6420BBE6
lea	edx, [edx+ecx*4-8]
mov	esi, eax
and	esi, 7
jz	loc_6420BB58
mov	ecx, eax
test	eax, eax
jle	loc_6420BBD6
mov	ebp, [edx]
sub	edx, 4
test	ebp, ebp
jnz	loc_6420BCC8
dec	eax
cmp	esi, 1
jz	short loc_6420BB58
cmp	esi, 2
jz	short loc_6420BB4A
cmp	esi, 3
jz	short loc_6420BB3C
cmp	esi, 4
jz	short loc_6420BB2E
cmp	esi, 5
jz	short loc_6420BB20
cmp	esi, 6
jz	short loc_6420BB12
mov	ecx, [edx]
sub	edx, 4
test	ecx, ecx
jnz	loc_6420BCC8
dec	eax
mov	esi, [edx]
sub	edx, 4
test	esi, esi
jnz	loc_6420BCC8
dec	eax
mov	x, [edx]
sub	edx, 4
test	edi, edi
jnz	loc_6420BCC8
dec	eax
mov	ebp, [edx]
sub	edx, 4
test	ebp, ebp
jnz	loc_6420BCC8
dec	eax
mov	ecx, [edx]
sub	edx, 4
test	ecx, ecx
jnz	loc_6420BCC8
dec	eax
mov	esi, [edx]
sub	edx, 4
test	esi, esi
jnz	loc_6420BCC8
dec	eax
			
mov	ecx, eax
test	eax, eax
jle	short loc_6420BBD6
mov	ecx, [edx]
test	ecx, ecx
jnz	loc_6420BCC8
lea	ecx, [eax-1]
mov	eax, ecx
mov	ebp, [edx-4]
test	ebp, ebp
jnz	loc_6420BCC8
dec	eax
mov	x, [edx-8]
test	edi, edi
jnz	loc_6420BCC8
lea	eax, [ecx-2]
mov	ebp, [edx-0Ch]
test	ebp, ebp
jnz	loc_6420BCC8
lea	eax, [ecx-3]
mov	esi, [edx-10h]
test	esi, esi
jnz	loc_6420BCC8
lea	eax, [ecx-4]
mov	edi, [edx-14h]
test	edi, edi
jnz	loc_6420BCC8
lea	eax, [ecx-5]
mov	ebp, [edx-18h]
test	ebp, ebp
jnz	loc_6420BCC8
lea	eax, [ecx-6]
mov	esi, [edx-1Ch]
sub	edx, 20h
test	esi, esi
jnz	loc_6420BCC8
lea	eax, [ecx-7]
mov	ecx, eax
test	eax, eax
jg	short loc_6420BB5E
			
mov	[esp+4Ch+t.used], eax
test	ecx, ecx
jnz	short loc_6420BBE6
mov	[esp+4Ch+t.sign], 0
			
lea	ix, [esp+4Ch+var_3C]
mov	edx, 4
mov	x, eax
mov	px, [esp+4Ch+c]
mov	ecx, edx
rep movsd
mov	edi, [esp+4Ch+c]
mov	c_0, ebx
mov	ecx, edx
rep movsd
lea	ebx, [esp+4Ch+t]
mov	c_0, ebx
mov	esi, eax
mov	ecx, edx
rep movsd
mov	[esp+4Ch+var_4C], ebx 
call	_tma_mp_clear
xor	eax, eax
add	esp, 3Ch
pop	ebx
pop	esi
pop	edi
pop	ebp
retn
align 4
mov	[esp+4Ch+var_4C], 80h 
call	_malloc
test	eax, eax
jz	loc_6420BCB8
xor	edx, edx
mov	dword ptr [eax+edx*4], 0
mov	dword ptr [eax+edx*4+4], 0
mov	dword ptr [eax+edx*4+8], 0
mov	dword ptr [eax+edx*4+0Ch], 0
mov	dword ptr [eax+edx*4+10h], 0
mov	dword ptr [eax+edx*4+14h], 0
mov	dword ptr [eax+edx*4+18h], 0
mov	dword ptr [eax+edx*4+1Ch], 0
add	edx, 8
cmp	edx, 20h
jnz	short loc_6420BC3A
mov	[esp+4Ch+t.dp],	eax
mov	[esp+4Ch+t.used], 0
mov	[esp+4Ch+t.alloc], 20h
mov	[esp+4Ch+t.sign], 0
lea	ebx, [esp+4Ch+t]
mov	[esp+4Ch+var_48], ebx 
mov	[esp+4Ch+var_4C], b_0 
call	_tma_mp_copy
test	eax, eax
jnz	short loc_6420BCBD
mov	esi, [a_0]
jmp	loc_6420B9D4
			
mov	eax, 0FFFFFFFEh
			
add	esp, 3Ch
pop	ebx
pop	esi
pop	a_0
pop	b_0
retn
align 4
			
mov	[esp+4Ch+t.used], eax
jmp	loc_6420BBE6
align 4
public _tma_mp_xor
push	ebp
push	edi
push	esi
push	ebx
sub	esp, 3Ch
mov	edi, [esp+4Ch+a]
mov	ebp, [esp+4Ch+b]
mov	eax, [edi]
cmp	eax, [ebp+0]
jle	loc_6420BFD4
mov	[esp+4Ch+var_4C], 80h 
call	_malloc
test	eax, eax
jz	loc_6420C068
xor	edx, edx
mov	dword ptr [eax+edx*4], 0
mov	dword ptr [eax+edx*4+4], 0
mov	dword ptr [eax+edx*4+8], 0
mov	dword ptr [eax+edx*4+0Ch], 0
mov	dword ptr [eax+edx*4+10h], 0
mov	dword ptr [eax+edx*4+14h], 0
mov	dword ptr [eax+edx*4+18h], 0
mov	dword ptr [eax+edx*4+1Ch], 0
add	edx, 8
cmp	edx, 20h
jnz	short loc_6420BD04
mov	[esp+4Ch+t.dp],	eax
mov	[esp+4Ch+t.used], 0
mov	[esp+4Ch+t.alloc], 20h
mov	[esp+4Ch+t.sign], 0
lea	ebx, [esp+4Ch+t]
mov	[esp+4Ch+var_48], ebx 
mov	[esp+4Ch+var_4C], a_0 
call	_tma_mp_copy
test	eax, eax
jnz	loc_6420C06D
mov	esi, [b_0+0]
mov	a_0, b_0
test	px, px
jle	loc_6420BE51
mov	edx, [esp+4Ch+t.dp]
mov	ecx, [x+0Ch]
lea	x, [px-1]
and	edi, 7
mov	b_0, [ecx]
xor	[edx], ebp
mov	res, 1
cmp	ix, px
jz	loc_6420BE51
test	edi, edi
jz	short loc_6420BE05
cmp	edi, 1
jz	short loc_6420BDFA
cmp	edi, 2
jz	short loc_6420BDF3
cmp	edi, 3
jz	short loc_6420BDEC
cmp	edi, 4
jz	short loc_6420BDE5
cmp	edi, 5
jz	short loc_6420BDDE
cmp	edi, 6
jz	short loc_6420BDD7
mov	edi, [ecx+4]
xor	[edx+ix*4], edi
mov	ix, 2
mov	ebp, [ecx+ix*4]
xor	[edx+ix*4], ebp
inc	ix
mov	edi, [ecx+ix*4]
xor	[edx+ix*4], edi
inc	ix
mov	ebp, [ecx+ix*4]
xor	[edx+ix*4], ebp
inc	ix
mov	edi, [ecx+ix*4]
xor	[edx+ix*4], edi
inc	ix
mov	ebp, [ecx+ix*4]
xor	[edx+ix*4], ebp
inc	ix
mov	edi, [ecx+ix*4]
xor	[edx+ix*4], edi
inc	ix
cmp	ix, px
jz	short loc_6420BE51
			
mov	edi, [ecx+ix*4]
xor	[edx+ix*4], edi
lea	edi, [ix+1]
mov	ebp, [ecx+edi*4]
xor	[edx+edi*4], ebp
lea	edi, [ix+2]
mov	ebp, [ecx+ix*4]
xor	[edx+ix*4], ebp
lea	ix, [eax+3]
mov	ebp, [ecx+ix*4]
xor	[edx+ix*4], ebp
lea	ix, [eax+4]
mov	ebp, [ecx+ix*4]
xor	[edx+ix*4], ebp
lea	ix, [eax+5]
mov	ebp, [ecx+ix*4]
xor	[edx+ix*4], ebp
lea	ix, [eax+6]
mov	ebp, [ecx+ix*4]
xor	[edx+ix*4], ebp
lea	ix, [eax+7]
mov	ebp, [ecx+ix*4]
xor	[edx+ix*4], ebp
add	eax, 8
cmp	ix, px
jnz	short loc_6420BE05
			
mov	ecx, [esp+4Ch+t.used]
test	ecx, ecx
jle	loc_6420BF8A
mov	edx, [esp+4Ch+t.dp]
lea	ix, [ecx-1]
mov	px, [edx+eax*4]
test	esi, esi
jnz	loc_6420BF96
lea	edx, [edx+ecx*4-8]
mov	esi, eax
and	esi, 7
jz	loc_6420BF08
mov	ecx, eax
test	eax, eax
jle	loc_6420BF86
mov	ebp, [edx]
sub	edx, 4
test	ebp, ebp
jnz	loc_6420C078
dec	eax
cmp	esi, 1
jz	short loc_6420BF08
cmp	esi, 2
jz	short loc_6420BEFA
cmp	esi, 3
jz	short loc_6420BEEC
cmp	esi, 4
jz	short loc_6420BEDE
cmp	esi, 5
jz	short loc_6420BED0
cmp	esi, 6
jz	short loc_6420BEC2
mov	ecx, [edx]
sub	edx, 4
test	ecx, ecx
jnz	loc_6420C078
dec	eax
mov	esi, [edx]
sub	edx, 4
test	esi, esi
jnz	loc_6420C078
dec	eax
mov	x, [edx]
sub	edx, 4
test	edi, edi
jnz	loc_6420C078
dec	eax
mov	ebp, [edx]
sub	edx, 4
test	ebp, ebp
jnz	loc_6420C078
dec	eax
mov	ecx, [edx]
sub	edx, 4
test	ecx, ecx
jnz	loc_6420C078
dec	eax
mov	esi, [edx]
sub	edx, 4
test	esi, esi
jnz	loc_6420C078
dec	eax
			
mov	ecx, eax
test	eax, eax
jle	short loc_6420BF86
mov	ecx, [edx]
test	ecx, ecx
jnz	loc_6420C078
lea	ecx, [eax-1]
mov	eax, ecx
mov	ebp, [edx-4]
test	ebp, ebp
jnz	loc_6420C078
dec	eax
mov	x, [edx-8]
test	edi, edi
jnz	loc_6420C078
lea	eax, [ecx-2]
mov	ebp, [edx-0Ch]
test	ebp, ebp
jnz	loc_6420C078
lea	eax, [ecx-3]
mov	esi, [edx-10h]
test	esi, esi
jnz	loc_6420C078
lea	eax, [ecx-4]
mov	edi, [edx-14h]
test	edi, edi
jnz	loc_6420C078
lea	eax, [ecx-5]
mov	ebp, [edx-18h]
test	ebp, ebp
jnz	loc_6420C078
lea	eax, [ecx-6]
mov	esi, [edx-1Ch]
sub	edx, 20h
test	esi, esi
jnz	loc_6420C078
lea	eax, [ecx-7]
mov	ecx, eax
test	eax, eax
jg	short loc_6420BF0E
			
mov	[esp+4Ch+t.used], eax
test	ecx, ecx
jnz	short loc_6420BF96
mov	[esp+4Ch+t.sign], 0
			
lea	ix, [esp+4Ch+var_3C]
mov	edx, 4
mov	x, eax
mov	px, [esp+4Ch+c]
mov	ecx, edx
rep movsd
mov	edi, [esp+4Ch+c]
mov	c_0, ebx
mov	ecx, edx
rep movsd
lea	ebx, [esp+4Ch+t]
mov	c_0, ebx
mov	esi, eax
mov	ecx, edx
rep movsd
mov	[esp+4Ch+var_4C], ebx 
call	_tma_mp_clear
xor	eax, eax
add	esp, 3Ch
pop	ebx
pop	esi
pop	edi
pop	ebp
retn
align 4
mov	[esp+4Ch+var_4C], 80h 
call	_malloc
test	eax, eax
jz	loc_6420C068
xor	edx, edx
mov	dword ptr [eax+edx*4], 0
mov	dword ptr [eax+edx*4+4], 0
mov	dword ptr [eax+edx*4+8], 0
mov	dword ptr [eax+edx*4+0Ch], 0
mov	dword ptr [eax+edx*4+10h], 0
mov	dword ptr [eax+edx*4+14h], 0
mov	dword ptr [eax+edx*4+18h], 0
mov	dword ptr [eax+edx*4+1Ch], 0
add	edx, 8
cmp	edx, 20h
jnz	short loc_6420BFEA
mov	[esp+4Ch+t.dp],	eax
mov	[esp+4Ch+t.used], 0
mov	[esp+4Ch+t.alloc], 20h
mov	[esp+4Ch+t.sign], 0
lea	ebx, [esp+4Ch+t]
mov	[esp+4Ch+var_48], ebx 
mov	[esp+4Ch+var_4C], b_0 
call	_tma_mp_copy
test	eax, eax
jnz	short loc_6420C06D
mov	esi, [a_0]
jmp	loc_6420BD84
			
mov	eax, 0FFFFFFFEh
			
add	esp, 3Ch
pop	ebx
pop	esi
pop	a_0
pop	b_0
retn
align 4
			
mov	[esp+4Ch+t.used], eax
jmp	loc_6420BF96
align 4
public _tma_mp_div_2d
			
push	ebp
push	edi
push	esi
push	ebx
sub	esp, 6Ch
mov	esi, [esp+7Ch+a]
mov	ebx, [esp+7Ch+c]
mov	edi, [esp+7Ch+b]
test	edi, edi
jle	loc_6420C548
mov	[esp+7Ch+var_7C], 80h 
call	_malloc
test	eax, eax
jz	loc_6420CBB8
xor	edx, edx
mov	dword ptr [eax+edx*4], 0
mov	dword ptr [eax+edx*4+4], 0
mov	dword ptr [eax+edx*4+8], 0
mov	dword ptr [eax+edx*4+0Ch], 0
mov	dword ptr [eax+edx*4+10h], 0
mov	dword ptr [eax+edx*4+14h], 0
mov	dword ptr [eax+edx*4+18h], 0
mov	dword ptr [eax+edx*4+1Ch], 0
add	edx, 8
cmp	edx, 20h
jnz	short loc_6420C0BE
mov	[esp+7Ch+t.dp],	eax
mov	[esp+7Ch+t.used], 0
mov	[esp+7Ch+t.alloc], 20h
mov	[esp+7Ch+t.sign], 0
mov	ecx, [esp+7Ch+d]
test	ecx, ecx
jz	loc_6420CB90
lea	eax, [esp+7Ch+t]
mov	[esp+7Ch+var_48], eax
mov	[esp+7Ch+var_74], eax 
mov	ebp, [esp+7Ch+b]
mov	[esp+7Ch+size],	ebp 
mov	[esp+7Ch+var_7C], a_0 
call	_tma_mp_mod_2d
test	eax, eax
jnz	loc_6420CB3C
cmp	a_0, c_0
jz	loc_6420C336
mov	ebp, [a_0]
cmp	[c_0+4], ebp
jl	loc_6420CBA0
mov	ecx, [a_0+0Ch]
mov	res, [c_0+0Ch]
test	ebp, ebp
jle	loc_6420CC3D
lea	edi, [ebp-1]
and	edi, 7
mov	edx, [ecx]
mov	[eax], edx
add	eax, 4
mov	edx, 1
cmp	edx, ebp
jge	loc_6420C23B
test	edi, edi
jz	short loc_6420C1FB
cmp	edi, 1
jz	short loc_6420C1EE
cmp	edi, 2
jz	short loc_6420C1E5
cmp	edi, 3
jz	short loc_6420C1DC
cmp	edi, 4
jz	short loc_6420C1D3
cmp	edi, 5
jz	short loc_6420C1CA
cmp	edi, 6
jz	short loc_6420C1C1
mov	edx, [ecx+4]
mov	[eax], edx
add	eax, 4
mov	edx, 2
mov	edi, [ecx+edx*4]
mov	[eax], edi
add	eax, 4
inc	edx
mov	edi, [ecx+edx*4]
mov	[eax], edi
add	eax, 4
inc	edx
mov	edi, [ecx+edx*4]
mov	[eax], edi
add	eax, 4
inc	edx
mov	edi, [ecx+edx*4]
mov	[eax], edi
add	eax, 4
inc	edx
mov	edi, [ecx+edx*4]
mov	[eax], edi
add	eax, 4
inc	edx
mov	edi, [ecx+edx*4]
mov	[eax], edi
add	eax, 4
inc	edx
cmp	edx, ebp
jge	short loc_6420C23B
			
mov	edi, [ecx+edx*4]
mov	[eax], edi
mov	edi, [ecx+edx*4+4]
mov	[eax+4], edi
mov	edi, [ecx+edx*4+8]
mov	[eax+8], edi
mov	edi, [ecx+edx*4+0Ch]
mov	[eax+0Ch], edi
mov	edi, [ecx+edx*4+10h]
mov	[eax+10h], edi
mov	edi, [ecx+edx*4+14h]
mov	[eax+14h], edi
mov	edi, [ecx+edx*4+18h]
mov	[eax+18h], edi
mov	edi, [ecx+edx*4+1Ch]
mov	[eax+1Ch], edi
add	eax, 20h
add	edx, 8
cmp	edx, ebp
jl	short loc_6420C1FB
			
mov	edi, [c_0]
mov	[esp+7Ch+var_4C], edi
cmp	edx, edi
jge	loc_6420C32E
mov	ecx, edx
not	ecx
add	ecx, edi
and	ecx, 7
mov	[esp+7Ch+var_44], ecx
mov	dword ptr [eax], 0
lea	ecx, [eax+4]
lea	edi, [edx+1]
cmp	edi, [esp+7Ch+var_4C]
jge	loc_6420C32E
cmp	[esp+7Ch+var_44], 0
jz	short loc_6420C2EB
cmp	[esp+7Ch+var_44], 1
jz	short loc_6420C2DB
cmp	[esp+7Ch+var_44], 2
jz	short loc_6420C2D1
cmp	[esp+7Ch+var_44], 3
jz	short loc_6420C2C7
cmp	[esp+7Ch+var_44], 4
jz	short loc_6420C2BD
cmp	[esp+7Ch+var_44], 5
jz	short loc_6420C2B3
cmp	[esp+7Ch+var_44], 6
jz	short loc_6420C2A9
mov	dword ptr [ecx], 0
lea	ecx, [eax+8]
lea	edi, [edx+2]
mov	dword ptr [ecx], 0
add	ecx, 4
inc	edi
mov	dword ptr [ecx], 0
add	ecx, 4
inc	edi
mov	dword ptr [ecx], 0
add	ecx, 4
inc	edi
mov	dword ptr [ecx], 0
add	ecx, 4
inc	edi
mov	dword ptr [ecx], 0
add	ecx, 4
inc	edi
mov	dword ptr [ecx], 0
add	ecx, 4
inc	edi
cmp	edi, [esp+7Ch+var_4C]
jge	short loc_6420C32E
			
mov	dword ptr [ecx], 0
mov	dword ptr [ecx+4], 0
mov	dword ptr [ecx+8], 0
mov	dword ptr [ecx+0Ch], 0
mov	dword ptr [ecx+10h], 0
mov	dword ptr [ecx+14h], 0
mov	dword ptr [ecx+18h], 0
mov	dword ptr [ecx+1Ch], 0
add	ecx, 20h
add	edi, 8
cmp	edi, [esp+7Ch+var_4C]
jl	short loc_6420C2EB
			
mov	[c_0], ebp
mov	ebp, [a_0+8]
mov	[c_0+8], ebp
cmp	[esp+7Ch+b], 1Bh
jg	loc_6420CB55
mov	res, 92492493h
imul	[esp+7Ch+b]
mov	esi, [esp+7Ch+b]
add	esi, edx
sar	esi, 4
mov	eax, [esp+7Ch+b]
cdq
sub	esi, edx
lea	ebp, ds:0[esi*4]
lea	ecx, ds:0[ebp*8]
sub	ecx, ebp
mov	edi, [esp+7Ch+b]
sub	edi, ecx
mov	edx, edi
jnz	loc_6420C828
mov	ecx, [c_0]
test	ecx, ecx
jle	loc_6420C4E5
mov	esi, [c_0+0Ch]
lea	edx, [ecx-1]
mov	tmpc, [esi+edx*4]
test	eax, eax
jnz	loc_6420C4F0
lea	eax, ds:0FFFFFFF8h[ecx*4]
mov	r, edx
and	edi, 7
jz	loc_6420C447
mov	ecx, edx
test	edx, edx
jle	loc_6420C4E3
mov	mask, [esi+eax]
sub	eax, 4
test	ebp, ebp
jnz	loc_6420CB88
lea	edx, [edx-1]
cmp	edi, 1
jz	short loc_6420C447
cmp	edi, 2
jz	short loc_6420C438
cmp	edi, 3
jz	short loc_6420C429
cmp	edi, 4
jz	short loc_6420C41A
cmp	edi, 5
jz	short loc_6420C40B
cmp	edi, 6
jz	short loc_6420C3FC
mov	edi, [esi+eax]
sub	eax, 4
test	edi, edi
jnz	loc_6420CB88
dec	edx
mov	ecx, [esi+eax]
sub	eax, 4
test	ecx, ecx
jnz	loc_6420CB88
dec	edx
mov	ebp, [esi+eax]
sub	eax, 4
test	ebp, ebp
jnz	loc_6420CB88
dec	edx
mov	edi, [esi+eax]
sub	eax, 4
test	edi, edi
jnz	loc_6420CB88
dec	edx
mov	ecx, [esi+eax]
sub	eax, 4
test	ecx, ecx
jnz	loc_6420CB88
dec	edx
mov	ebp, [esi+eax]
sub	eax, 4
test	ebp, ebp
jnz	loc_6420CB88
dec	edx
			
mov	ecx, edx
test	edx, edx
jle	loc_6420C4E3
lea	edi, [eax-4]
mov	mask, [esi+eax]
test	ebp, ebp
jnz	loc_6420CB88
lea	ecx, [edx-1]
mov	edx, ecx
lea	ebp, [eax-8]
mov	edi, [esi+edi]
test	edi, edi
jnz	loc_6420CB88
dec	edx
lea	edi, [eax-0Ch]
mov	ebp, [esi+ebp]
test	ebp, ebp
jnz	loc_6420CB88
lea	edx, [ecx-2]
lea	ebp, [eax-10h]
mov	edi, [esi+edi]
test	edi, edi
jnz	loc_6420CB88
lea	edx, [ecx-3]
lea	edi, [eax-14h]
mov	ebp, [esi+ebp]
test	ebp, ebp
jnz	loc_6420CB88
lea	edx, [ecx-4]
lea	ebp, [eax-18h]
mov	edi, [esi+edi]
test	edi, edi
jnz	loc_6420CB88
lea	edx, [ecx-5]
lea	edi, [eax-1Ch]
mov	ebp, [esi+ebp]
test	ebp, ebp
jnz	loc_6420CB88
lea	edx, [ecx-6]
sub	eax, 20h
mov	edi, [esi+edi]
test	edi, edi
jnz	loc_6420CB88
lea	edx, [ecx-7]
mov	ecx, edx
test	edx, edx
jg	loc_6420C451
			
mov	[c_0], edx
			
test	ecx, ecx
jnz	short loc_6420C4F0
mov	dword ptr [c_0+8], 0
			
mov	esi, [esp+7Ch+d]
test	esi, esi
jz	short loc_6420C530
lea	edx, [esp+7Ch+var_3C]
mov	c_0, 4
mov	r, edx
mov	esi, [esp+7Ch+var_48]
mov	ecx, ebx
rep movsd
lea	tmpc, [esp+7Ch+t]
mov	[esp+7Ch+var_48], eax
mov	edi, eax
mov	esi, [esp+7Ch+d]
mov	ecx, ebx
rep movsd
mov	edi, [esp+7Ch+d]
mov	d_0, edx
mov	ecx, ebx
rep movsd
mov	mask, [esp+7Ch+var_48]
mov	[esp+7Ch+var_7C], ebp 
call	_tma_mp_clear
xor	eax, eax
			
add	esp, 6Ch
pop	ebx
pop	esi
pop	r
pop	ebp
retn
align 4
cmp	a_0, c_0
jz	loc_6420C729
mov	eax, [a_0]
cmp	[c_0+4], eax
jl	loc_6420CBC2
mov	edx, [c_0+0Ch]
mov	edi, [a_0+0Ch]
test	eax, eax
jle	loc_6420CC44
lea	ebp, [eax-1]
and	ebp, 7
mov	ecx, [edi]
mov	[edx], ecx
add	edx, 4
mov	ecx, 1
cmp	ecx, eax
jge	loc_6420C62C
test	ebp, ebp
jz	short loc_6420C5EC
cmp	ebp, 1
jz	short loc_6420C5DF
cmp	ebp, 2
jz	short loc_6420C5D6
cmp	ebp, 3
jz	short loc_6420C5CD
cmp	ebp, 4
jz	short loc_6420C5C4
cmp	ebp, 5
jz	short loc_6420C5BB
cmp	ebp, 6
jz	short loc_6420C5B2
mov	ecx, [edi+4]
mov	[edx], ecx
add	edx, 4
mov	ecx, 2
mov	ebp, [edi+ecx*4]
mov	[edx], ebp
add	edx, 4
inc	ecx
mov	ebp, [edi+ecx*4]
mov	[edx], ebp
add	edx, 4
inc	ecx
mov	ebp, [edi+ecx*4]
mov	[edx], ebp
add	edx, 4
inc	ecx
mov	ebp, [edi+ecx*4]
mov	[edx], ebp
add	edx, 4
inc	ecx
mov	ebp, [edi+ecx*4]
mov	[edx], ebp
add	edx, 4
inc	ecx
mov	ebp, [edi+ecx*4]
mov	[edx], ebp
add	edx, 4
inc	ecx
cmp	ecx, eax
jge	short loc_6420C62C
			
mov	ebp, [edi+ecx*4]
mov	[edx], ebp
mov	ebp, [edi+ecx*4+4]
mov	[edx+4], ebp
mov	ebp, [edi+ecx*4+8]
mov	[edx+8], ebp
mov	ebp, [edi+ecx*4+0Ch]
mov	[edx+0Ch], ebp
mov	ebp, [edi+ecx*4+10h]
mov	[edx+10h], ebp
mov	ebp, [edi+ecx*4+14h]
mov	[edx+14h], ebp
mov	ebp, [edi+ecx*4+18h]
mov	[edx+18h], ebp
mov	ebp, [edi+ecx*4+1Ch]
mov	[edx+1Ch], ebp
add	edx, 20h
add	ecx, 8
cmp	ecx, eax
jl	short loc_6420C5EC
			
mov	edi, [c_0]
mov	[esp+7Ch+var_48], edi
cmp	ecx, edi
jge	loc_6420C721
mov	ebp, ecx
not	ebp
add	ebp, [esp+7Ch+var_48]
and	ebp, 7
mov	[esp+7Ch+var_50], ebp
mov	dword ptr [edx], 0
lea	edi, [edx+4]
lea	ebp, [ecx+1]
cmp	ebp, [esp+7Ch+var_48]
jge	loc_6420C721
cmp	[esp+7Ch+var_50], 0
jz	short loc_6420C6DE
cmp	[esp+7Ch+var_50], 1
jz	short loc_6420C6CE
cmp	[esp+7Ch+var_50], 2
jz	short loc_6420C6C4
cmp	[esp+7Ch+var_50], 3
jz	short loc_6420C6BA
cmp	[esp+7Ch+var_50], 4
jz	short loc_6420C6B0
cmp	[esp+7Ch+var_50], 5
jz	short loc_6420C6A6
cmp	[esp+7Ch+var_50], 6
jz	short loc_6420C69C
mov	dword ptr [edi], 0
lea	edi, [edx+8]
lea	ebp, [ecx+2]
mov	dword ptr [edi], 0
add	edi, 4
inc	ebp
mov	dword ptr [edi], 0
add	edi, 4
inc	ebp
mov	dword ptr [edi], 0
add	edi, 4
inc	ebp
mov	dword ptr [edi], 0
add	edi, 4
inc	ebp
mov	dword ptr [edi], 0
add	edi, 4
inc	ebp
mov	dword ptr [edi], 0
add	edi, 4
inc	ebp
cmp	ebp, [esp+7Ch+var_48]
jge	short loc_6420C721
			
mov	dword ptr [edi], 0
mov	dword ptr [edi+4], 0
mov	dword ptr [edi+8], 0
mov	dword ptr [edi+0Ch], 0
mov	dword ptr [edi+10h], 0
mov	dword ptr [edi+14h], 0
mov	dword ptr [edi+18h], 0
mov	dword ptr [edi+1Ch], 0
add	edi, 20h
add	ebp, 8
cmp	ebp, [esp+7Ch+var_48]
jl	short loc_6420C6DE
			
mov	[c_0], eax
mov	eax, [a_0+8]
mov	[c_0+8], eax
xor	eax, eax
mov	c_0, [esp+7Ch+d]
test	ebx, ebx
jz	loc_6420C53E
mov	edx, [esp+7Ch+d]
mov	dword ptr [edx+8], 0
mov	dword ptr [edx], 0
mov	ecx, [edx+0Ch]
mov	a_0, [edx+4]
test	esi, esi
jle	loc_6420C53E
lea	ebx, [esi-1]
and	ebx, 7
mov	dword ptr [ecx], 0
mov	edx, 1
cmp	edx, esi
jge	loc_6420C53E
test	ebx, ebx
jz	short loc_6420C7DB
cmp	ebx, 1
jz	short loc_6420C7CB
cmp	ebx, 2
jz	short loc_6420C7C3
cmp	ebx, 3
jz	short loc_6420C7BB
cmp	ebx, 4
jz	short loc_6420C7B3
cmp	ebx, 5
jz	short loc_6420C7AB
cmp	ebx, 6
jz	short loc_6420C7A3
mov	dword ptr [ecx+edx*4], 0
mov	edx, 2
mov	dword ptr [ecx+edx*4], 0
inc	edx
mov	dword ptr [ecx+edx*4], 0
inc	edx
mov	dword ptr [ecx+edx*4], 0
inc	edx
mov	dword ptr [ecx+edx*4], 0
inc	edx
mov	dword ptr [ecx+edx*4], 0
inc	edx
mov	dword ptr [ecx+edx*4], 0
inc	edx
cmp	edx, esi
jge	loc_6420C53E
			
mov	dword ptr [ecx+edx*4], 0
mov	dword ptr [ecx+edx*4+4], 0
mov	dword ptr [ecx+edx*4+8], 0
mov	dword ptr [ecx+edx*4+0Ch], 0
mov	dword ptr [ecx+edx*4+10h], 0
mov	dword ptr [ecx+edx*4+14h], 0
mov	dword ptr [ecx+edx*4+18h], 0
mov	dword ptr [ecx+edx*4+1Ch], 0
add	edx, 8
cmp	edx, esi
jl	short loc_6420C7DB
jmp	loc_6420C53E
align 4
mov	edi, 1
mov	cl, dl
shl	edi, cl
dec	edi
mov	[esp+7Ch+var_40], edi
mov	eax, [c_0+0Ch]
mov	esi, [c_0]
mov	[esp+7Ch+var_44], esi
mov	ecx, esi
test	esi, esi
jle	loc_6420C4E5
lea	eax, [eax+esi*4-4]
mov	esi, 1Ch
sub	esi, edx
mov	ebp, ecx
dec	ebp
and	ebp, 7
mov	[esp+7Ch+var_4C], ebp
mov	ebp, [tmpc]
mov	edi, ebp
mov	cl, dl
shr	edi, cl
mov	[tmpc],	edi
sub	tmpc, 4
mov	edi, 1
and	ebp, [esp+7Ch+var_40]
mov	[esp+7Ch+var_50], ebp
cmp	[esp+7Ch+var_44], 1
jz	loc_6420CB31
mov	ecx, [esp+7Ch+var_4C]
test	ecx, ecx
jz	loc_6420CA39
cmp	[esp+7Ch+var_4C], 1
jz	loc_6420C9FB
cmp	[esp+7Ch+var_4C], 2
jz	loc_6420C9C7
cmp	[esp+7Ch+var_4C], 3
jz	loc_6420C993
cmp	[esp+7Ch+var_4C], 4
jz	loc_6420C95F
cmp	[esp+7Ch+var_4C], 5
jz	short loc_6420C92B
cmp	[esp+7Ch+var_4C], 6
jz	short loc_6420C8F7
mov	edi, [tmpc]
mov	[esp+7Ch+var_4C], edi
mov	edi, [esp+7Ch+var_50]
mov	ecx, esi
shl	edi, cl
mov	ebp, [esp+7Ch+var_4C]
mov	cl, dl
shr	ebp, cl
or	edi, ebp
mov	[tmpc],	edi
sub	tmpc, 4
mov	edi, 2
mov	ebp, [esp+7Ch+var_4C]
and	ebp, [esp+7Ch+var_40]
mov	[esp+7Ch+var_50], ebp
mov	ebp, [tmpc]
mov	[esp+7Ch+var_4C], ebp
mov	ebp, [esp+7Ch+var_50]
mov	ecx, esi
shl	ebp, cl
mov	[esp+7Ch+var_50], ebp
mov	ebp, [esp+7Ch+var_4C]
mov	cl, dl
shr	ebp, cl
or	[esp+7Ch+var_50], ebp
mov	ecx, [esp+7Ch+var_50]
mov	[tmpc],	ecx
sub	tmpc, 4
inc	edi
mov	ebp, [esp+7Ch+var_4C]
and	ebp, [esp+7Ch+var_40]
mov	[esp+7Ch+var_50], ebp
mov	ebp, [tmpc]
mov	[esp+7Ch+var_4C], ebp
mov	ebp, [esp+7Ch+var_50]
mov	ecx, esi
shl	ebp, cl
mov	[esp+7Ch+var_50], ebp
mov	ebp, [esp+7Ch+var_4C]
mov	cl, dl
shr	ebp, cl
or	[esp+7Ch+var_50], ebp
mov	ebp, [esp+7Ch+var_50]
mov	[tmpc],	ebp
sub	tmpc, 4
inc	edi
mov	ecx, [esp+7Ch+var_4C]
and	ecx, [esp+7Ch+var_40]
mov	[esp+7Ch+var_50], ecx
mov	ebp, [tmpc]
mov	[esp+7Ch+var_4C], ebp
mov	ebp, [esp+7Ch+var_50]
mov	ecx, esi
shl	ebp, cl
mov	[esp+7Ch+var_50], ebp
mov	ebp, [esp+7Ch+var_4C]
mov	cl, dl
shr	ebp, cl
or	[esp+7Ch+var_50], ebp
mov	ebp, [esp+7Ch+var_50]
mov	[tmpc],	ebp
sub	tmpc, 4
inc	edi
mov	ecx, [esp+7Ch+var_4C]
and	ecx, [esp+7Ch+var_40]
mov	[esp+7Ch+var_50], ecx
mov	ebp, [tmpc]
mov	[esp+7Ch+var_4C], ebp
mov	ebp, [esp+7Ch+var_50]
mov	ecx, esi
shl	ebp, cl
mov	[esp+7Ch+var_50], ebp
mov	ebp, [esp+7Ch+var_4C]
mov	cl, dl
shr	ebp, cl
or	[esp+7Ch+var_50], ebp
mov	ebp, [esp+7Ch+var_50]
mov	[tmpc],	ebp
sub	tmpc, 4
inc	edi
mov	ecx, [esp+7Ch+var_4C]
and	ecx, [esp+7Ch+var_40]
mov	[esp+7Ch+var_50], ecx
mov	ebp, [tmpc]
mov	[esp+7Ch+var_4C], ebp
mov	ebp, [esp+7Ch+var_50]
mov	ecx, esi
shl	ebp, cl
mov	[esp+7Ch+var_50], ebp
mov	ebp, [esp+7Ch+var_4C]
mov	cl, dl
shr	ebp, cl
or	[esp+7Ch+var_50], ebp
mov	ebp, [esp+7Ch+var_50]
mov	[tmpc],	ebp
sub	tmpc, 4
inc	edi
mov	ecx, [esp+7Ch+var_4C]
and	ecx, [esp+7Ch+var_40]
mov	[esp+7Ch+var_50], ecx
mov	ebp, [tmpc]
mov	[esp+7Ch+var_4C], ebp
mov	ebp, [esp+7Ch+var_50]
mov	ecx, esi
shl	ebp, cl
mov	[esp+7Ch+var_50], ebp
mov	ebp, [esp+7Ch+var_4C]
mov	cl, dl
shr	ebp, cl
or	[esp+7Ch+var_50], ebp
mov	ebp, [esp+7Ch+var_50]
mov	[tmpc],	ebp
sub	tmpc, 4
inc	edi
mov	ecx, [esp+7Ch+var_4C]
and	ecx, [esp+7Ch+var_40]
mov	[esp+7Ch+var_50], ecx
cmp	[esp+7Ch+var_44], edi
jz	loc_6420CB31
mov	ebp, [esp+7Ch+var_40]
mov	[esp+7Ch+var_40], c_0
mov	[esp+7Ch+var_4C], edi
mov	edi, [esp+7Ch+var_50]
mov	c_0, [tmpc]
mov	[esp+7Ch+var_60], ebx
mov	ecx, esi
shl	r, cl
mov	cl, dl
shr	ebx, cl
or	edi, ebx
mov	[tmpc],	edi
mov	ebx, [esp+7Ch+var_60]
and	ebx, mask
mov	edi, [tmpc-4]
mov	[esp+7Ch+var_60], edi
mov	ecx, esi
shl	ebx, cl
mov	cl, dl
shr	edi, cl
or	ebx, edi
mov	[tmpc-4], ebx
mov	edi, [esp+7Ch+var_60]
and	edi, mask
mov	ebx, [tmpc-8]
mov	[esp+7Ch+var_60], ebx
mov	ecx, esi
shl	edi, cl
mov	cl, dl
shr	ebx, cl
or	edi, ebx
mov	[tmpc-8], edi
mov	ebx, [esp+7Ch+var_60]
and	ebx, mask
mov	edi, [tmpc-0Ch]
mov	[esp+7Ch+var_60], edi
mov	ecx, esi
shl	ebx, cl
mov	cl, dl
shr	edi, cl
or	ebx, edi
mov	[tmpc-0Ch], ebx
mov	edi, [esp+7Ch+var_60]
and	edi, mask
mov	ebx, [tmpc-10h]
mov	[esp+7Ch+var_60], ebx
mov	ecx, esi
shl	edi, cl
mov	cl, dl
shr	ebx, cl
or	edi, ebx
mov	[tmpc-10h], edi
mov	ebx, [esp+7Ch+var_60]
and	ebx, mask
mov	edi, [tmpc-14h]
mov	[esp+7Ch+var_60], edi
mov	ecx, esi
shl	ebx, cl
mov	cl, dl
shr	edi, cl
or	ebx, edi
mov	[tmpc-14h], ebx
mov	edi, [esp+7Ch+var_60]
and	edi, mask
mov	ebx, [tmpc-18h]
mov	[esp+7Ch+var_60], ebx
mov	ecx, esi
shl	edi, cl
mov	cl, dl
shr	ebx, cl
or	edi, ebx
mov	[tmpc-18h], edi
mov	ebx, [esp+7Ch+var_60]
and	ebx, mask
mov	edi, [tmpc-1Ch]
mov	[esp+7Ch+var_60], edi
mov	ecx, esi
shl	ebx, cl
mov	cl, dl
shr	edi, cl
or	ebx, edi
mov	[tmpc-1Ch], ebx
sub	tmpc, 20h
add	[esp+7Ch+var_4C], 8
mov	edi, [esp+7Ch+var_60]
and	r, mask
mov	ebx, [esp+7Ch+var_4C]
cmp	[esp+7Ch+var_44], ebx
jnz	loc_6420CA49
mov	ebx, [esp+7Ch+var_40]
			
mov	ecx, [esp+7Ch+var_44]
jmp	loc_6420C389
align 4
mov	a_0, [esp+7Ch+var_48]
mov	[esp+7Ch+var_7C], esi 
mov	[esp+7Ch+var_54], res
call	_tma_mp_clear
mov	eax, [esp+7Ch+var_54]
jmp	loc_6420C53E
mov	res, 92492493h
imul	[esp+7Ch+b]
mov	a_0, [esp+7Ch+b]
add	esi, edx
sar	esi, 4
mov	eax, [esp+7Ch+b]
cdq
sub	esi, edx
mov	[esp+7Ch+size],	esi 
mov	[esp+7Ch+var_7C], c_0 
call	_tma_mp_rshd
jmp	loc_6420C344
			
mov	[c_0], edx
jmp	loc_6420C4F0
align 10h
lea	edi, [esp+7Ch+t]
mov	[esp+7Ch+var_48], edi
jmp	loc_6420C157
align 10h
mov	[esp+7Ch+size],	ebp 
mov	[esp+7Ch+var_7C], c_0 
call	_tma_mp_grow
test	eax, eax
jnz	short loc_6420CC24
mov	ebp, [a_0]
jmp	loc_6420C16A
align 4
mov	eax, 0FFFFFFFEh
jmp	loc_6420C53E
lea	edi, [eax+40h]
mov	ebp, 20h
cdq
idiv	ebp
sub	edi, edx
lea	edx, ds:0[edi*4]
mov	[esp+7Ch+size],	edx 
mov	eax, [c_0+0Ch]
mov	[esp+7Ch+var_7C], eax 
call	_realloc
mov	edx, eax
mov	eax, 0FFFFFFFEh
test	edx, edx
jz	loc_6420C72B
mov	[c_0+0Ch], edx
mov	res, [c_0+4]
mov	[c_0+4], edi
lea	ecx, ds:0[eax*4]
jmp	short loc_6420CC17
mov	dword ptr [edx+ecx], 0
inc	eax
mov	edx, [c_0+0Ch]
mov	edi, [c_0+4]
add	ecx, 4
cmp	eax, edi
jl	short loc_6420CC06
mov	eax, [a_0]
jmp	loc_6420C55E
align 4
mov	c_0, [esp+7Ch+var_48]
mov	[esp+7Ch+var_7C], ebx 
mov	[esp+7Ch+var_54], res
call	_tma_mp_clear
mov	eax, [esp+7Ch+var_54]
jmp	loc_6420C53E
xor	edx, edx
jmp	loc_6420C23B
xor	ecx, ecx
jmp	loc_6420C62C
align 4
public _tma_mp_div_d
			
push	ebp
push	edi
push	esi
push	ebx
sub	esp, 7Ch
mov	esi, [esp+8Ch+a]
mov	ebx, [esp+8Ch+b]
test	ebx, ebx
jz	loc_6420CF78
cmp	b_0, 1
jz	loc_6420CD50
mov	eax, [a_0]
test	eax, eax
jz	loc_6420CD50
lea	ebp, [b_0-1]
test	ebp, b_0
jnz	loc_6420CFAC
xor	ecx, ecx
mov	edx, 1
mov	[esp+8Ch+var_60], eax
lea	eax, [ix+1]
mov	ix, eax
cmp	eax, 1Ch
jz	loc_6420CFA7
mov	edi, edx
shl	edi, cl
cmp	b_0, edi
jz	short loc_6420CD00
inc	ecx
mov	edi, edx
shl	edi, cl
cmp	b_0, edi
jz	short loc_6420CD00
lea	ix, [eax+2]
mov	edi, edx
shl	edi, cl
cmp	b_0, edi
jz	short loc_6420CD00
lea	ix, [eax+3]
mov	edi, edx
shl	edi, cl
cmp	b_0, edi
jz	short loc_6420CD00
lea	ix, [eax+4]
mov	edi, edx
shl	edi, cl
cmp	b_0, edi
jz	short loc_6420CD00
lea	ix, [eax+5]
mov	edi, edx
shl	edi, cl
cmp	b_0, edi
jz	short loc_6420CD00
lea	ix, [eax+6]
mov	edi, edx
shl	edi, cl
cmp	b_0, edi
jz	short loc_6420CD00
lea	ix, [eax+7]
mov	edi, edx
shl	edi, cl
cmp	b_0, edi
jz	short loc_6420CD00
lea	ix, [eax+8]
mov	eax, edx
shl	eax, cl
cmp	b_0, eax
jnz	short loc_6420CC92
xchg	ax, ax
			
mov	eax, [esp+8Ch+d]
test	eax, eax
jz	short loc_6420CD19
mov	edx, [a_0+0Ch]
and	ebp, [edx]
mov	b_0, [esp+8Ch+d]
mov	[ebx], ebp
mov	ebp, [esp+8Ch+c]
test	ebp, ebp
jz	loc_6420D2DC
mov	dword ptr [esp+8Ch+var_84+4], 0	
mov	eax, [esp+8Ch+c]
mov	dword ptr [esp+8Ch+var_84], eax	
mov	dword ptr [esp+8Ch+n+4], ecx 
mov	dword ptr [esp+8Ch+n], a_0 
call	_tma_mp_div_2d
mov	[esp+8Ch+var_60], eax
jmp	loc_6420CF80
			
mov	edx, [esp+8Ch+d]
test	edx, edx
jz	short loc_6420CD68
mov	eax, [esp+8Ch+d]
mov	dword ptr [eax], 0
mov	ecx, [esp+8Ch+c]
test	ecx, ecx
jz	loc_6420D2DC
cmp	a_0, [esp+8Ch+c]
jz	loc_6420D2DC
mov	edi, [a_0]
mov	edx, [esp+8Ch+c]
cmp	[edx+4], edi
jl	loc_6420CF8C
mov	edx, [a_0+0Ch]
mov	b_0, [esp+8Ch+c]
mov	ecx, [ebx+0Ch]
test	edi, edi
jle	loc_6420D318
lea	ebx, [edi-1]
and	ebx, 7
mov	ebp, [edx]
mov	[ecx], ebp
mov	eax, 1
cmp	eax, edi
jz	loc_6420CE69
test	ebx, ebx
jz	short loc_6420CE1D
cmp	ebx, 1
jz	short loc_6420CE12
cmp	ebx, 2
jz	short loc_6420CE0B
cmp	ebx, 3
jz	short loc_6420CE04
cmp	ebx, 4
jz	short loc_6420CDFD
cmp	ebx, 5
jz	short loc_6420CDF6
cmp	ebx, 6
jz	short loc_6420CDEF
mov	ebx, [edx+4]
mov	[ecx+eax*4], ebx
mov	eax, 2
mov	ebp, [edx+eax*4]
mov	[ecx+eax*4], ebp
inc	eax
mov	ebx, [edx+eax*4]
mov	[ecx+eax*4], ebx
inc	eax
mov	ebp, [edx+eax*4]
mov	[ecx+eax*4], ebp
inc	eax
mov	ebx, [edx+eax*4]
mov	[ecx+eax*4], ebx
inc	eax
mov	ebp, [edx+eax*4]
mov	[ecx+eax*4], ebp
inc	eax
mov	ebx, [edx+eax*4]
mov	[ecx+eax*4], ebx
inc	eax
cmp	eax, edi
jz	short loc_6420CE69
			
mov	ebx, [edx+eax*4]
mov	[ecx+eax*4], ebx
lea	ebx, [eax+1]
mov	ebp, [edx+ebx*4]
mov	[ecx+ebx*4], ebp
lea	ebx, [eax+2]
mov	ebp, [edx+ebx*4]
mov	[ecx+ebx*4], ebp
lea	ebx, [eax+3]
mov	ebp, [edx+ebx*4]
mov	[ecx+ebx*4], ebp
lea	ebx, [eax+4]
mov	ebp, [edx+ebx*4]
mov	[ecx+ebx*4], ebp
lea	ebx, [eax+5]
mov	ebp, [edx+ebx*4]
mov	[ecx+ebx*4], ebp
lea	ebx, [eax+6]
mov	ebp, [edx+ebx*4]
mov	[ecx+ebx*4], ebp
lea	ebx, [eax+7]
mov	ebp, [edx+ebx*4]
mov	[ecx+ebx*4], ebp
add	eax, 8
cmp	eax, edi
jnz	short loc_6420CE1D
			
lea	ecx, [ecx+eax*4]
mov	edx, [esp+8Ch+c]
mov	edx, [edx]
mov	[esp+8Ch+var_60], edx
cmp	edx, eax
jle	loc_6420CF53
mov	ebp, eax
not	ebp
add	ebp, edx
and	ebp, 7
mov	dword ptr [ecx], 0
lea	edx, [ecx+4]
lea	ebx, [eax+1]
cmp	[esp+8Ch+var_60], ebx
jle	loc_6420CF53
test	ebp, ebp
jz	short loc_6420CF10
cmp	ebp, 1
jz	short loc_6420CF00
cmp	ebp, 2
jz	short loc_6420CEF6
cmp	ebp, 3
jz	short loc_6420CEEC
cmp	ebp, 4
jz	short loc_6420CEE2
cmp	ebp, 5
jz	short loc_6420CED8
cmp	ebp, 6
jz	short loc_6420CECE
mov	dword ptr [edx], 0
lea	edx, [ecx+8]
lea	ebx, [eax+2]
mov	dword ptr [edx], 0
add	edx, 4
inc	ebx
mov	dword ptr [edx], 0
add	edx, 4
inc	ebx
mov	dword ptr [edx], 0
add	edx, 4
inc	ebx
mov	dword ptr [edx], 0
add	edx, 4
inc	ebx
mov	dword ptr [edx], 0
add	edx, 4
inc	ebx
mov	dword ptr [edx], 0
add	edx, 4
inc	ebx
cmp	[esp+8Ch+var_60], ebx
jle	short loc_6420CF53
			
mov	dword ptr [edx], 0
mov	dword ptr [edx+4], 0
mov	dword ptr [edx+8], 0
mov	dword ptr [edx+0Ch], 0
mov	dword ptr [edx+10h], 0
mov	dword ptr [edx+14h], 0
mov	dword ptr [edx+18h], 0
mov	dword ptr [edx+1Ch], 0
add	edx, 20h
add	ebx, 8
cmp	[esp+8Ch+var_60], ebx
jg	short loc_6420CF10
			
mov	eax, [esp+8Ch+c]
mov	[eax], edi
mov	edi, [a_0+8]
mov	[eax+8], edi
mov	[esp+8Ch+var_60], 0
mov	eax, [esp+8Ch+var_60]
add	esp, 7Ch
pop	ebx
pop	a_0
pop	edi
pop	ebp
retn
align 4
mov	[esp+8Ch+var_60], 0FFFFFFFDh
			
mov	eax, [esp+8Ch+var_60]
add	esp, 7Ch
pop	ebx
pop	esi
pop	edi
pop	ebp
retn
mov	dword ptr [esp+8Ch+n+4], edi
mov	dword ptr [esp+8Ch+n], edx 
call	_tma_mp_grow
mov	[esp+8Ch+var_60], eax
test	eax, eax
jnz	short loc_6420CF80
mov	edi, [a_0]
jmp	loc_6420CD96
mov	ix, [esp+8Ch+var_60]
nop
cmp	b_0, 3
jz	loc_6420D538
mov	dword ptr [esp+8Ch+n+4], eax 
lea	edx, [esp+8Ch+q]
mov	[esp+8Ch+var_44], edx
mov	dword ptr [esp+8Ch+n], edx 
call	_tma_mp_init_size
mov	[esp+8Ch+var_60], eax
test	eax, eax
jnz	short loc_6420CF80
mov	ecx, [a_0]
mov	[esp+8Ch+var_48], ecx
mov	[esp+8Ch+q.used], ecx
mov	ebp, [a_0+8]
mov	[esp+8Ch+q.sign], ebp
mov	ebp, ecx
dec	ebp
js	loc_6420D34F
lea	edi, ds:0[ebp*4]
mov	edx, [a_0+0Ch]
add	edx, edi
mov	[esp+8Ch+var_5C], edx
add	edi, [esp+8Ch+q.dp]
mov	[esp+8Ch+var_4C], edi
mov	a_0, ebp
and	esi, 3
mov	[esp+8Ch+var_40], esi
mov	eax, [esp+8Ch+var_5C]
mov	esi, [eax]
xor	edi, edi
cmp	esi, b_0
jnb	loc_6420D2F0
xor	ecx, ecx
mov	edx, [esp+8Ch+var_4C]
mov	[edx], t
mov	[esp+8Ch+var_50], 1
mov	t, [esp+8Ch+var_5C]
sub	ecx, 4
mov	[esp+8Ch+var_5C], ecx
sub	edx, 4
mov	[esp+8Ch+var_4C], edx
mov	eax, [esp+8Ch+var_48]
cmp	[esp+8Ch+var_50], eax
jz	loc_6420D351
mov	eax, [esp+8Ch+var_40]
test	eax, eax
jz	loc_6420D170
cmp	[esp+8Ch+var_40], 1
jz	loc_6420D10E
cmp	[esp+8Ch+var_40], 2
jz	short loc_6420D0BA
mov	eax, esi
mov	edx, edi
shld	edx, eax, 1Ch
shl	eax, 1Ch
mov	esi, [ecx]
or	esi, eax
mov	edi, edx
cmp	edx, 0
jbe	loc_6420D508
mov	dword ptr [esp+8Ch+var_84], b_0	
mov	dword ptr [esp+8Ch+var_84+4], 0
mov	dword ptr [esp+8Ch+n], esi 
mov	dword ptr [esp+8Ch+n+4], edi
call	___udivdi3
mov	ecx, eax
mul	b_0
sub	esi, eax
sbb	edi, edx
mov	edx, [esp+8Ch+var_4C]
mov	[edx], t
inc	[esp+8Ch+var_50]
sub	[esp+8Ch+var_5C], 4
sub	edx, 4
mov	[esp+8Ch+var_4C], edx
mov	eax, esi
mov	edx, edi
shld	edx, eax, 1Ch
shl	eax, 1Ch
mov	t, [esp+8Ch+var_5C]
mov	esi, [ecx]
or	esi, eax
mov	edi, edx
cmp	edx, 0
jbe	loc_6420D518
mov	dword ptr [esp+8Ch+var_84], b_0	
mov	dword ptr [esp+8Ch+var_84+4], 0
mov	dword ptr [esp+8Ch+n], esi 
mov	dword ptr [esp+8Ch+n+4], edi
call	___udivdi3
mov	ecx, eax
mul	b_0
sub	esi, eax
sbb	edi, edx
mov	eax, [esp+8Ch+var_4C]
mov	[eax], t
inc	[esp+8Ch+var_50]
sub	[esp+8Ch+var_5C], 4
sub	eax, 4
mov	[esp+8Ch+var_4C], eax
mov	eax, esi
mov	edx, edi
shld	edx, eax, 1Ch
shl	eax, 1Ch
mov	edi, [esp+8Ch+var_5C]
mov	esi, [edi]
or	esi, eax
mov	edi, edx
cmp	edx, 0
jbe	loc_6420D528
mov	dword ptr [esp+8Ch+var_84], b_0	
mov	dword ptr [esp+8Ch+var_84+4], 0
mov	dword ptr [esp+8Ch+n], esi 
mov	dword ptr [esp+8Ch+n+4], edi
call	___udivdi3
mov	ecx, eax
mul	b_0
sub	esi, eax
sbb	edi, edx
mov	eax, [esp+8Ch+var_4C]
mov	[eax], t
inc	[esp+8Ch+var_50]
sub	[esp+8Ch+var_5C], 4
sub	eax, 4
mov	[esp+8Ch+var_4C], eax
mov	edx, [esp+8Ch+var_48]
cmp	[esp+8Ch+var_50], edx
jz	loc_6420D351
mov	[esp+8Ch+var_40], ebp
mov	t, [esp+8Ch+var_5C]
mov	ebp, [esp+8Ch+var_4C]
jmp	loc_6420D291
align 4
cmp	esi, b_0
jnb	loc_6420D2AB
mov	[esp+8Ch+var_4C], 0
mov	eax, [esp+8Ch+var_4C]
mov	[ebp+0], eax
mov	edx, [esp+8Ch+var_50]
inc	edx
mov	[esp+8Ch+var_50], edx
lea	eax, [ecx-4]
mov	[esp+8Ch+var_5C], eax
sub	ebp, 4
mov	eax, esi
mov	edx, edi
shld	edx, eax, 1Ch
shl	eax, 1Ch
mov	esi, [ecx-4]
or	esi, eax
mov	edi, edx
cmp	edx, 0
jbe	loc_6420D340
mov	dword ptr [esp+8Ch+var_84], b_0	
mov	dword ptr [esp+8Ch+var_84+4], 0
mov	dword ptr [esp+8Ch+n], esi 
mov	dword ptr [esp+8Ch+n+4], edi
call	___udivdi3
mov	ecx, eax
mul	b_0
sub	esi, eax
sbb	edi, edx
mov	[ebp+0], t
mov	eax, esi
mov	edx, edi
shld	edx, eax, 1Ch
shl	eax, 1Ch
mov	t, [esp+8Ch+var_5C]
mov	esi, [ecx-4]
or	esi, eax
mov	edi, edx
cmp	edx, 0
jbe	loc_6420D330
mov	dword ptr [esp+8Ch+var_84], b_0	
mov	dword ptr [esp+8Ch+var_84+4], 0
mov	dword ptr [esp+8Ch+n], esi 
mov	dword ptr [esp+8Ch+n+4], edi
call	___udivdi3
mov	ecx, eax
mul	b_0
sub	esi, eax
sbb	edi, edx
mov	[ebp-4], t
mov	eax, esi
mov	edx, edi
shld	edx, eax, 1Ch
shl	eax, 1Ch
mov	edi, [esp+8Ch+var_5C]
mov	esi, [edi-8]
or	esi, eax
mov	edi, edx
cmp	edx, 0
jbe	loc_6420D320
mov	dword ptr [esp+8Ch+var_84], b_0	
mov	dword ptr [esp+8Ch+var_84+4], 0
mov	dword ptr [esp+8Ch+n], esi 
mov	dword ptr [esp+8Ch+n+4], edi
call	___udivdi3
mov	ecx, eax
mul	b_0
sub	esi, eax
sbb	edi, edx
mov	[ebp-8], t
mov	edx, [esp+8Ch+var_50]
add	edx, 3
mov	[esp+8Ch+var_50], edx
mov	t, [esp+8Ch+var_5C]
sub	ecx, 0Ch
sub	ebp, 0Ch
mov	eax, [esp+8Ch+var_48]
cmp	edx, eax
jz	loc_6420D56C
mov	eax, esi
mov	edx, edi
shld	edx, eax, 1Ch
shl	eax, 1Ch
mov	esi, [ecx]
or	esi, eax
mov	edi, edx
cmp	edx, 0
jbe	loc_6420D184
mov	dword ptr [esp+8Ch+var_84], b_0	
mov	dword ptr [esp+8Ch+var_84+4], 0
mov	dword ptr [esp+8Ch+n], esi 
mov	dword ptr [esp+8Ch+n+4], edi
mov	[esp+8Ch+var_64], ecx
call	___udivdi3
mov	[esp+8Ch+var_4C], eax
mul	b_0
sub	esi, eax
sbb	edi, edx
mov	ecx, [esp+8Ch+var_64]
jmp	loc_6420D194
align 4
			
mov	[esp+8Ch+var_60], 0
mov	eax, [esp+8Ch+var_60]
add	esp, 7Ch
pop	ebx
pop	a_0
pop	edi
pop	ebp
retn
mov	dword ptr [esp+8Ch+var_84], b_0
mov	dword ptr [esp+8Ch+var_84+4], 0
mov	dword ptr [esp+8Ch+n], esi 
mov	dword ptr [esp+8Ch+n+4], edi
call	___udivdi3
mov	ecx, eax
mul	b_0
sub	esi, eax
sbb	edi, edx
jmp	loc_6420D01E
align 4
xor	eax, eax
jmp	loc_6420CE6C
align 10h
cmp	esi, b_0
jnb	loc_6420D24D
xor	t, t
jmp	loc_6420D26D
align 10h
cmp	esi, b_0
jnb	loc_6420D20B
xor	ecx, ecx
jmp	loc_6420D22B
align 10h
cmp	esi, b_0
jnb	loc_6420D1C9
xor	ecx, ecx
jmp	loc_6420D1E9
xor	a_0, a_0
			
mov	b_0, [esp+8Ch+d]
test	ebx, ebx
jz	short loc_6420D365
mov	t, [esp+8Ch+d]
mov	[ecx], esi
mov	esi, [esp+8Ch+c]
test	esi, esi
jz	loc_6420D4F5
mov	edi, [esp+8Ch+var_48]
test	edi, edi
jle	loc_6420D4B0
mov	eax, [esp+8Ch+q.dp]
mov	edx, [eax+ebp*4]
test	edx, edx
jnz	loc_6420D4C0
mov	ebx, [esp+8Ch+var_48]
lea	eax, [eax+ebx*4-8]
mov	edx, ebp
and	edx, 7
jz	loc_6420D42E
mov	[esp+8Ch+var_48], ebp
test	ebp, ebp
jle	loc_6420D4AC
mov	t, [eax]
sub	eax, 4
test	ecx, ecx
jnz	loc_6420D560
dec	ebp
cmp	edx, 1
jz	short loc_6420D42E
cmp	edx, 2
jz	short loc_6420D420
cmp	edx, 3
jz	short loc_6420D412
cmp	edx, 4
jz	short loc_6420D404
cmp	edx, 5
jz	short loc_6420D3F6
cmp	edx, 6
jz	short loc_6420D3E8
mov	edx, [eax]
sub	eax, 4
test	edx, edx
jnz	loc_6420D560
dec	ebp
mov	esi, [eax]
sub	eax, 4
test	esi, esi
jnz	loc_6420D560
dec	ebp
mov	edi, [eax]
sub	eax, 4
test	edi, edi
jnz	loc_6420D560
dec	ebp
mov	ebx, [eax]
sub	eax, 4
test	ebx, ebx
jnz	loc_6420D560
dec	ebp
mov	ecx, [eax]
sub	eax, 4
test	ecx, ecx
jnz	loc_6420D560
dec	ebp
mov	edx, [eax]
sub	eax, 4
test	edx, edx
jnz	loc_6420D560
dec	ebp
			
test	ebp, ebp
jle	short loc_6420D4A8
mov	t, [eax]
test	ecx, ecx
jnz	loc_6420D560
lea	edx, [ebp-1]
mov	ebp, edx
mov	esi, [eax-4]
test	esi, esi
jnz	loc_6420D560
dec	ebp
mov	esi, [eax-8]
test	esi, esi
jnz	loc_6420D560
lea	ebp, [edx-2]
mov	edi, [eax-0Ch]
test	edi, edi
jnz	loc_6420D560
lea	ebp, [edx-3]
mov	ebx, [eax-10h]
test	ebx, ebx
jnz	loc_6420D560
lea	ebp, [edx-4]
mov	ecx, [eax-14h]
test	ecx, ecx
jnz	loc_6420D560
lea	ebp, [edx-5]
mov	esi, [eax-18h]
test	esi, esi
jnz	loc_6420D560
lea	ebp, [edx-6]
mov	edi, [eax-1Ch]
sub	eax, 20h
test	edi, edi
jnz	loc_6420D560
lea	ebp, [edx-7]
test	ebp, ebp
jg	short loc_6420D432
mov	[esp+8Ch+var_48], ebp
mov	[esp+8Ch+q.used], ebp
mov	ebp, [esp+8Ch+var_48]
test	ebp, ebp
jnz	short loc_6420D4C0
mov	[esp+8Ch+q.sign], 0
			
lea	edx, [esp+8Ch+var_3C]
mov	eax, 4
mov	edi, edx
mov	esi, [esp+8Ch+var_44]
mov	t, eax
rep movsd
lea	ebx, [esp+8Ch+q]
mov	[esp+8Ch+var_44], ebx
mov	edi, ebx
mov	esi, [esp+8Ch+c]
mov	ecx, eax
rep movsd
mov	edi, [esp+8Ch+c]
mov	c_0, edx
mov	ecx, eax
rep movsd
mov	ebp, [esp+8Ch+var_44]
mov	dword ptr [esp+8Ch+n], ebp 
call	_tma_mp_clear
jmp	loc_6420CF80
align 4
cmp	esi, b_0
jnb	loc_6420D084
xor	ecx, ecx
jmp	loc_6420D0A4
align 4
cmp	esi, b_0
jnb	loc_6420D0D8
xor	ecx, ecx
jmp	loc_6420D0F8
align 4
cmp	esi, b_0
jnb	loc_6420D12C
xor	t, t
jmp	loc_6420D14C
align 4
mov	edi, [esp+8Ch+d]
mov	dword ptr [esp+8Ch+var_84], edi	
mov	ix, [esp+8Ch+c]
mov	dword ptr [esp+8Ch+n+4], ecx 
mov	dword ptr [esp+8Ch+n], a_0 
call	_tma_mp_div_3
mov	[esp+8Ch+var_60], eax
jmp	loc_6420CF80
align 10h
			
mov	[esp+8Ch+q.used], ebp
jmp	loc_6420D4C0
align 4
mov	ebp, [esp+8Ch+var_40]
jmp	loc_6420D351
align 4
public _tma_mp_toradix_n
push	ebp
push	edi
push	esi
push	ebx
sub	esp, 5Ch
mov	eax, [esp+6Ch+a]
mov	edi, [esp+6Ch+str]
mov	esi, [esp+6Ch+radix]
mov	ebx, [esp+6Ch+maxlen]
cmp	ebx, 1
jg	short loc_6420D5A4
			
mov	a_0, 0FFFFFFFDh
			
add	esp, 5Ch
pop	_s
pop	radix_0
pop	str_0
pop	ebp
retn
align 4
cmp	radix_0, 1
jle	short loc_6420D594
cmp	radix_0, 40h
jg	short loc_6420D594
mov	ebp, [a_0]
test	ebp, ebp
jnz	short loc_6420D5BF
mov	byte ptr [str_0], 30h
mov	byte ptr [str_0+1], 0
xor	a_0, a_0
jmp	short loc_6420D599
mov	[esp+6Ch+b], a_0
lea	ebp, [esp+6Ch+t]
mov	[esp+6Ch+var_6C], ebp 
call	_tma_mp_init_copy
test	eax, eax
jnz	short loc_6420D599
cmp	[esp+6Ch+t.sign], 1
jz	loc_6420D99C
mov	[esp+6Ch+var_40], str_0
mov	ecx, [esp+6Ch+t.used]
test	ecx, ecx
jz	loc_6420D96A
mov	edx, maxlen_0
dec	edx
mov	[esp+6Ch+var_4C], edx
jz	loc_6420D96A
xor	edx, edx
sub	maxlen_0, 2
mov	res, ebx
and	eax, 3
mov	[esp+6Ch+var_48], eax
jz	loc_6420D97C
lea	eax, [esp+6Ch+d]
mov	[esp+6Ch+var_60], eax 
mov	[esp+6Ch+c], ebp 
mov	[esp+6Ch+b], radix_0 
mov	[esp+6Ch+var_6C], ebp 
call	_tma_mp_div_d
test	eax, eax
jnz	loc_6420D987
mov	ecx, [esp+6Ch+d]
mov	edx, _tma_mp_s_rmap
mov	al, [edx+ecx]
mov	[str_0], al
inc	str_0
mov	ecx, [esp+6Ch+t.used]
test	ecx, ecx
jz	loc_6420D96A
mov	[esp+6Ch+var_4C], ebx
test	ebx, ebx
jle	loc_6420D96A
mov	edx, 1
cmp	[esp+6Ch+var_48], 1
jz	loc_6420D97C
cmp	[esp+6Ch+var_48], 2
jz	short loc_6420D6BA
lea	ebx, [esp+6Ch+d]
mov	[esp+6Ch+var_60], ebx 
mov	[esp+6Ch+c], ebp 
mov	[esp+6Ch+b], radix_0 
mov	[esp+6Ch+var_6C], ebp 
mov	[esp+6Ch+var_50], digs
call	_tma_mp_div_d
test	eax, eax
mov	edx, [esp+6Ch+var_50]
jnz	loc_6420D987
mov	ecx, [esp+6Ch+d]
mov	res, _tma_mp_s_rmap
mov	bl, [eax+ecx]
mov	[str_0], bl
inc	str_0
mov	eax, [esp+6Ch+t.used]
test	eax, eax
jz	loc_6420D83D
dec	[esp+6Ch+var_4C]
mov	edx, 2
lea	ebx, [esp+6Ch+d]
mov	[esp+6Ch+var_60], ebx 
mov	[esp+6Ch+c], ebp 
mov	[esp+6Ch+b], radix_0 
mov	[esp+6Ch+var_6C], ebp 
mov	[esp+6Ch+var_50], digs
call	_tma_mp_div_d
test	eax, eax
mov	edx, [esp+6Ch+var_50]
jnz	loc_6420D987
mov	ecx, [esp+6Ch+d]
mov	ebx, _tma_mp_s_rmap
mov	al, [ebx+ecx]
mov	[str_0], al
inc	str_0
lea	eax, [edx+1]
mov	ecx, [esp+6Ch+t.used]
test	ecx, ecx
jz	loc_6420D83D
dec	[esp+6Ch+var_4C]
mov	ebx, eax
mov	[esp+6Ch+var_48], radix_0
			
lea	ecx, [esp+6Ch+d]
mov	[esp+6Ch+var_60], ecx 
mov	[esp+6Ch+c], ebp 
mov	esi, [esp+6Ch+var_48]
mov	[esp+6Ch+b], esi 
mov	[esp+6Ch+var_6C], ebp 
call	_tma_mp_div_d
test	eax, eax
jnz	loc_6420D987
mov	esi, [esp+6Ch+d]
mov	edx, _tma_mp_s_rmap
mov	cl, [edx+esi]
mov	[str_0], cl
lea	esi, [str_0+1]
mov	str_0, esi
lea	res, [digs+1]
mov	[esp+6Ch+var_44], eax
mov	edx, [esp+6Ch+t.used]
test	edx, edx
jz	loc_6420D83B
mov	ecx, [esp+6Ch+var_4C]
dec	ecx
test	ecx, ecx
jle	loc_6420D83B
mov	digs, [esp+6Ch+var_44]
lea	eax, [esp+6Ch+d]
mov	[esp+6Ch+var_60], eax 
mov	[esp+6Ch+c], ebp 
mov	edx, [esp+6Ch+var_48]
mov	[esp+6Ch+b], edx 
mov	[esp+6Ch+var_6C], ebp 
call	_tma_mp_div_d
test	eax, eax
jnz	loc_6420D987
mov	edx, [esp+6Ch+d]
mov	res, _tma_mp_s_rmap
mov	cl, [eax+edx]
mov	[esi], cl
inc	str_0
mov	eax, [esp+6Ch+t.used]
test	eax, eax
jz	loc_6420D83B
inc	digs
lea	eax, [esp+6Ch+d]
mov	[esp+6Ch+var_60], eax 
mov	[esp+6Ch+c], ebp 
mov	ecx, [esp+6Ch+var_48]
mov	[esp+6Ch+b], ecx 
mov	[esp+6Ch+var_6C], ebp 
call	_tma_mp_div_d
test	eax, eax
jnz	loc_6420D987
mov	edx, [esp+6Ch+d]
mov	res, _tma_mp_s_rmap
mov	cl, [eax+edx]
mov	[str_0], cl
lea	str_0, [esi+2]
mov	edx, [esp+6Ch+t.used]
test	edx, edx
jz	short loc_6420D83B
mov	eax, [esp+6Ch+var_44]
lea	digs, [eax+2]
lea	ecx, [esp+6Ch+d]
mov	[esp+6Ch+var_60], ecx 
mov	[esp+6Ch+c], ebp 
mov	str_0, [esp+6Ch+var_48]
mov	[esp+6Ch+b], edi 
mov	[esp+6Ch+var_6C], ebp 
call	_tma_mp_div_d
test	eax, eax
jnz	loc_6420D987
mov	edi, [esp+6Ch+d]
mov	edx, _tma_mp_s_rmap
mov	cl, [edx+edi]
mov	[esi+2], cl
lea	edi, [esi+3]
mov	esi, [esp+6Ch+t.used]
test	esi, esi
jz	short loc_6420D83B
sub	[esp+6Ch+var_4C], 4
mov	res, [esp+6Ch+var_44]
lea	digs, [eax+3]
jmp	loc_6420D70B
			
mov	edx, digs
			
test	edx, edx
jz	loc_6420D96A
mov	res, [esp+6Ch+var_40]
add	eax, digs
xor	ecx, ecx
mov	[esp+6Ch+var_48], digs
mov	ebx, [esp+6Ch+var_40]
movzx	esi, byte ptr [_s+ecx]
mov	dl, [eax]
mov	[_s+ecx], dl
mov	edx, esi
mov	[eax], dl
lea	esi, [ecx+1]
mov	edx, [esp+6Ch+var_48]
sub	edx, esi
cmp	esi, edx
jge	loc_6420D96A
mov	dl, [_s+esi]
mov	byte ptr [esp+6Ch+var_4C], dl
mov	dl, [eax-1]
mov	[_s+esi], dl
mov	dl, byte ptr [esp+6Ch+var_4C]
mov	[eax-1], dl
lea	esi, [ecx+2]
mov	edx, [esp+6Ch+var_48]
sub	edx, esi
cmp	esi, edx
jge	loc_6420D96A
mov	dl, [_s+esi]
mov	byte ptr [esp+6Ch+var_4C], dl
mov	dl, [eax-2]
mov	[_s+esi], dl
mov	dl, byte ptr [esp+6Ch+var_4C]
mov	[eax-2], dl
lea	esi, [ecx+3]
mov	edx, [esp+6Ch+var_48]
sub	edx, esi
cmp	esi, edx
jge	loc_6420D96A
mov	dl, [_s+esi]
mov	byte ptr [esp+6Ch+var_4C], dl
mov	dl, [eax-3]
mov	[_s+esi], dl
mov	dl, byte ptr [esp+6Ch+var_4C]
mov	[eax-3], dl
lea	esi, [ecx+4]
mov	edx, [esp+6Ch+var_48]
sub	edx, esi
cmp	esi, edx
jge	loc_6420D96A
mov	dl, [_s+esi]
mov	byte ptr [esp+6Ch+var_4C], dl
mov	dl, [eax-4]
mov	[_s+esi], dl
mov	dl, byte ptr [esp+6Ch+var_4C]
mov	[eax-4], dl
lea	esi, [ecx+5]
mov	edx, [esp+6Ch+var_48]
sub	edx, esi
cmp	esi, edx
jge	short loc_6420D96A
mov	dl, [_s+esi]
mov	byte ptr [esp+6Ch+var_4C], dl
mov	dl, [eax-5]
mov	[_s+esi], dl
mov	dl, byte ptr [esp+6Ch+var_4C]
mov	[eax-5], dl
lea	esi, [ecx+6]
mov	edx, [esp+6Ch+var_48]
sub	edx, esi
cmp	esi, edx
jge	short loc_6420D96A
mov	dl, [_s+esi]
mov	byte ptr [esp+6Ch+var_4C], dl
mov	dl, [eax-6]
mov	[_s+esi], dl
mov	dl, byte ptr [esp+6Ch+var_4C]
mov	[eax-6], dl
lea	esi, [ecx+7]
mov	edx, [esp+6Ch+var_48]
sub	edx, esi
cmp	esi, edx
jge	short loc_6420D96A
movzx	esi, byte ptr [_s+ecx+7]
mov	dl, [eax-7]
mov	[_s+ecx+7], dl
mov	edx, esi
mov	[eax-7], dl
add	ecx, 8
sub	eax, 8
mov	esi, [esp+6Ch+var_48]
sub	esi, ecx
cmp	ecx, esi
jl	loc_6420D855
			
mov	byte ptr [str_0], 0
mov	[esp+6Ch+var_6C], ebp 
call	_tma_mp_clear
xor	eax, eax
jmp	loc_6420D599
			
mov	ebx, digs
mov	[esp+6Ch+var_48], radix_0
jmp	loc_6420D70B
			
mov	[esp+6Ch+var_6C], ebp
mov	[esp+6Ch+var_50], res
call	_tma_mp_clear
mov	eax, [esp+6Ch+var_50]
jmp	loc_6420D599
lea	res, [str_0+1]
mov	[esp+6Ch+var_40], eax
mov	byte ptr [str_0], 2Dh
mov	[esp+6Ch+t.sign], 0
dec	maxlen_0
mov	str_0, eax
jmp	loc_6420D5E2
align 4
public _tma_mp_radix_size
			
push	ebp
push	edi
push	esi
push	ebx
sub	esp, 4Ch
mov	edi, [esp+5Ch+a]
mov	esi, [esp+5Ch+radix]
mov	ebx, [esp+5Ch+size]
mov	dword ptr [ebx], 0
cmp	esi, 2
jnz	loc_6420DA68
mov	eax, [a_0]
test	eax, eax
jz	short loc_6420DA4C
lea	edx, [eax-1]
lea	radix_0, ds:0[edx*4]
lea	eax, ds:0[esi*8]
sub	eax, esi
mov	ecx, [a_0+0Ch]
mov	edx, [ecx+edx*4]
test	edx, edx
jz	short loc_6420DA4C
lea	ecx, [eax+1]
mov	eax, ecx
mov	ebp, edx
shr	ebp, 1
jz	short loc_6420DA4C
inc	eax
mov	esi, edx
shr	esi, 2
test	esi, esi
jz	short loc_6420DA4C
lea	eax, [ecx+2]
mov	ebp, edx
shr	ebp, 3
jz	short loc_6420DA4C
lea	eax, [ecx+3]
mov	esi, edx
shr	esi, 4
jz	short loc_6420DA4C
lea	eax, [ecx+4]
mov	ebp, edx
shr	ebp, 5
jz	short loc_6420DA4C
lea	eax, [ecx+5]
mov	esi, edx
shr	esi, 6
jz	short loc_6420DA4C
lea	eax, [ecx+6]
mov	ebp, edx
shr	ebp, 7
jz	short loc_6420DA4C
lea	eax, [ecx+7]
shr	edx, 8
jnz	short loc_6420D9FD
			
xor	edx, edx
cmp	dword ptr [a_0+8], 1
setz	dl
lea	eax, [eax+edx+1]
mov	[size_0], eax
xor	eax, eax
			
add	esp, 4Ch
pop	size_0
pop	radix_0
pop	edi
pop	digs
retn
align 4
lea	ecx, [radix_0-2]
cmp	ecx, 3Eh
ja	loc_6420DAF8
mov	ebp, [a_0]
test	ebp, ebp
jz	short loc_6420DAE8
mov	ebp, [a_0+8]
mov	[esp+5Ch+b], a_0 
lea	a_0, [esp+5Ch+t]
mov	[esp+5Ch+var_5C], edi 
call	_tma_mp_init_copy
test	eax, eax
jnz	short loc_6420DA5D
dec	ebp
setz	dl
movzx	ebp, dl
mov	[esp+5Ch+t.sign], 0
mov	res, [esp+5Ch+t.used]
test	eax, eax
jnz	short loc_6420DAB5
jmp	short loc_6420DB04
align 4
inc	digs
mov	res, [esp+5Ch+t.used]
test	eax, eax
jz	short loc_6420DB04
lea	ecx, [esp+5Ch+d]
mov	[esp+5Ch+var_50], ecx 
mov	[esp+5Ch+c], edi 
mov	[esp+5Ch+b], radix_0 
mov	[esp+5Ch+var_5C], edi 
call	_tma_mp_div_d
test	eax, eax
jz	short loc_6420DAAC
mov	[esp+5Ch+var_5C], edi 
mov	[esp+5Ch+var_40], res
call	_tma_mp_clear
mov	eax, [esp+5Ch+var_40]
jmp	loc_6420DA5D
align 4
mov	dword ptr [size_0], 2
xor	eax, eax
jmp	loc_6420DA5D
align 4
mov	eax, 0FFFFFFFDh
jmp	loc_6420DA5D
align 4
			
mov	[esp+5Ch+var_5C], edi 
call	_tma_mp_clear
inc	digs
mov	[size_0], ebp
xor	eax, eax
jmp	loc_6420DA5D
align 4
public _tma_mp_mod_d
sub	esp, 1Ch
mov	ecx, [esp+1Ch+c]
mov	[esp+1Ch+d], ecx 
mov	[esp+1Ch+var_14], 0 
mov	edx, [esp+1Ch+b]
mov	[esp+1Ch+var_18], edx 
mov	eax, [esp+1Ch+a]
mov	[esp+1Ch+var_1C], eax 
call	_tma_mp_div_d
add	esp, 1Ch
retn
align 4
public _tma_mp_prime_is_divisible
push	ebp
push	edi
push	esi
push	ebx
sub	esp, 2Ch
mov	esi, [esp+3Ch+a]
mov	edx, [esp+3Ch+result]
mov	dword ptr [edx], 0
lea	edi, [esp+3Ch+res]
mov	[esp+3Ch+d], edi 
mov	[esp+3Ch+c], 0	
mov	eax, ds:_ltm_prime_tab
mov	[esp+3Ch+b], eax 
mov	[esp+3Ch+var_3C], esi 
call	_tma_mp_div_d
test	eax, eax
jnz	loc_6420DC8C
mov	edx, [esp+3Ch+res]
test	edx, edx
jz	loc_6420DC94
mov	ebx, 1
mov	[esp+3Ch+d], edi
mov	[esp+3Ch+c], 0	
mov	ecx, ds:_ltm_prime_tab[ix*4]
mov	[esp+3Ch+b], ecx 
mov	[esp+3Ch+var_3C], a_0 
call	_tma_mp_div_d
test	eax, eax
jnz	loc_6420DC8C
mov	ebp, [esp+3Ch+res]
test	ebp, ebp
jz	loc_6420DC94
lea	ebp, [ix+1]
mov	[esp+3Ch+d], edi 
mov	[esp+3Ch+c], 0	
mov	err, ds:_ltm_prime_tab[ebp*4]
mov	[esp+3Ch+b], eax 
mov	[esp+3Ch+var_3C], a_0 
call	_tma_mp_div_d
test	eax, eax
jnz	loc_6420DC8C
mov	ecx, [esp+3Ch+res]
test	ecx, ecx
jz	loc_6420DC94
mov	[esp+3Ch+d], edi 
mov	[esp+3Ch+c], 0	
mov	err, ds:(_ltm_prime_tab+8)[ix*4]
mov	[esp+3Ch+b], eax 
mov	[esp+3Ch+var_3C], a_0 
call	_tma_mp_div_d
test	eax, eax
jnz	short loc_6420DC8C
mov	edx, [esp+3Ch+res]
test	edx, edx
jz	short loc_6420DC94
mov	[esp+3Ch+d], edi 
mov	[esp+3Ch+c], 0	
mov	ecx, ds:(_ltm_prime_tab+0Ch)[ix*4]
mov	[esp+3Ch+b], ecx 
mov	[esp+3Ch+var_3C], a_0 
call	_tma_mp_div_d
test	eax, eax
jnz	short loc_6420DC8C
mov	edx, [esp+3Ch+res]
test	edx, edx
jz	short loc_6420DC94
mov	[esp+3Ch+d], edi 
mov	[esp+3Ch+c], 0	
mov	err, ds:(_ltm_prime_tab+10h)[ix*4]
mov	[esp+3Ch+b], eax 
mov	[esp+3Ch+var_3C], a_0 
call	_tma_mp_div_d
test	eax, eax
jnz	short loc_6420DC8C
mov	ix, [esp+3Ch+res]
test	ebx, ebx
jz	short loc_6420DC94
lea	ebx, [ebp+4]
cmp	ix, 100h
jnz	loc_6420DB93
			
add	esp, 2Ch
pop	ix
pop	a_0
pop	edi
pop	ebp
retn
			
mov	ix, [esp+3Ch+result]
mov	dword ptr [ebx], 1
add	esp, 2Ch
pop	ebx
pop	a_0
pop	edi
pop	ebp
retn
align 4
public _tma_mp_to_unsigned_bin
			
push	ebp
push	edi
push	esi
push	ebx
sub	esp, 3Ch
mov	esi, [esp+4Ch+b]
mov	[esp+4Ch+var_4C], 80h 
call	_malloc
mov	edx, eax
test	eax, eax
jz	loc_6420DF78
xor	ecx, ecx
mov	dword ptr [eax+ecx*4], 0
mov	dword ptr [eax+ecx*4+4], 0
mov	dword ptr [eax+ecx*4+8], 0
mov	dword ptr [eax+ecx*4+0Ch], 0
mov	dword ptr [eax+ecx*4+10h], 0
mov	dword ptr [eax+ecx*4+14h], 0
mov	dword ptr [eax+ecx*4+18h], 0
mov	dword ptr [eax+ecx*4+1Ch], 0
add	ecx, 8
cmp	ecx, 20h
jnz	short loc_6420DCCB
mov	[esp+4Ch+t.dp],	eax
mov	[esp+4Ch+t.used], 0
mov	[esp+4Ch+t.alloc], 20h
mov	[esp+4Ch+t.sign], 0
lea	ebx, [esp+4Ch+t]
cmp	[esp+4Ch+a], ebx
jz	loc_6420E0E8
mov	ecx, [esp+4Ch+a]
mov	ebp, [ecx]
cmp	ebp, 20h
jg	loc_6420E0EF
mov	[esp+4Ch+var_30], 0
mov	eax, [esp+4Ch+a]
mov	ecx, [eax+0Ch]
test	ebp, ebp
jle	loc_6420E144
lea	edi, [ebp-1]
and	edi, 7
mov	eax, [ecx]
mov	[edx], eax
add	edx, 4
mov	eax, 1
cmp	eax, ebp
jge	loc_6420DE25
test	edi, edi
jz	short loc_6420DDE5
cmp	edi, 1
jz	short loc_6420DDD8
cmp	edi, 2
jz	short loc_6420DDCF
cmp	edi, 3
jz	short loc_6420DDC6
cmp	edi, 4
jz	short loc_6420DDBD
cmp	edi, 5
jz	short loc_6420DDB4
cmp	edi, 6
jz	short loc_6420DDAB
mov	eax, [ecx+4]
mov	[edx], eax
add	edx, 4
mov	eax, 2
mov	edi, [ecx+eax*4]
mov	[edx], edi
add	edx, 4
inc	eax
mov	edi, [ecx+eax*4]
mov	[edx], edi
add	edx, 4
inc	eax
mov	edi, [ecx+eax*4]
mov	[edx], edi
add	edx, 4
inc	eax
mov	edi, [ecx+eax*4]
mov	[edx], edi
add	edx, 4
inc	eax
mov	edi, [ecx+eax*4]
mov	[edx], edi
add	edx, 4
inc	eax
mov	edi, [ecx+eax*4]
mov	[edx], edi
add	edx, 4
inc	eax
cmp	eax, ebp
jge	short loc_6420DE25
			
mov	edi, [ecx+eax*4]
mov	[edx], edi
mov	edi, [ecx+eax*4+4]
mov	[edx+4], edi
mov	edi, [ecx+eax*4+8]
mov	[edx+8], edi
mov	edi, [ecx+eax*4+0Ch]
mov	[edx+0Ch], edi
mov	edi, [ecx+eax*4+10h]
mov	[edx+10h], edi
mov	edi, [ecx+eax*4+14h]
mov	[edx+14h], edi
mov	edi, [ecx+eax*4+18h]
mov	[edx+18h], edi
mov	edi, [ecx+eax*4+1Ch]
mov	[edx+1Ch], edi
add	edx, 20h
add	eax, 8
cmp	eax, ebp
jl	short loc_6420DDE5
			
cmp	[esp+4Ch+var_30], eax
jle	loc_6420DF16
mov	ecx, eax
not	ecx
add	ecx, [esp+4Ch+var_30]
and	ecx, 7
mov	[esp+4Ch+var_34], ecx
mov	dword ptr [edx], 0
lea	ecx, [edx+4]
lea	edi, [eax+1]
cmp	[esp+4Ch+var_30], edi
jle	loc_6420DF16
cmp	[esp+4Ch+var_34], 0
jz	short loc_6420DED3
cmp	[esp+4Ch+var_34], 1
jz	short loc_6420DEC3
cmp	[esp+4Ch+var_34], 2
jz	short loc_6420DEB9
cmp	[esp+4Ch+var_34], 3
jz	short loc_6420DEAF
cmp	[esp+4Ch+var_34], 4
jz	short loc_6420DEA5
cmp	[esp+4Ch+var_34], 5
jz	short loc_6420DE9B
cmp	[esp+4Ch+var_34], 6
jz	short loc_6420DE91
mov	dword ptr [ecx], 0
lea	ecx, [edx+8]
lea	edi, [eax+2]
mov	dword ptr [ecx], 0
add	ecx, 4
inc	edi
mov	dword ptr [ecx], 0
add	ecx, 4
inc	edi
mov	dword ptr [ecx], 0
add	ecx, 4
inc	edi
mov	dword ptr [ecx], 0
add	ecx, 4
inc	edi
mov	dword ptr [ecx], 0
add	ecx, 4
inc	edi
mov	dword ptr [ecx], 0
add	ecx, 4
inc	edi
cmp	[esp+4Ch+var_30], edi
jle	short loc_6420DF16
			
mov	dword ptr [ecx], 0
mov	dword ptr [ecx+4], 0
mov	dword ptr [ecx+8], 0
mov	dword ptr [ecx+0Ch], 0
mov	dword ptr [ecx+10h], 0
mov	dword ptr [ecx+14h], 0
mov	dword ptr [ecx+18h], 0
mov	dword ptr [ecx+1Ch], 0
add	ecx, 20h
add	edi, 8
cmp	[esp+4Ch+var_30], edi
jg	short loc_6420DED3
			
mov	[esp+4Ch+t.used], ebp
mov	edx, [esp+4Ch+a]
mov	eax, [edx+8]
mov	[esp+4Ch+t.sign], eax
xor	edi, edi
jmp	short loc_6420DF31
align 4
inc	x
mov	ebp, [esp+4Ch+t.used]
test	ebp, ebp
jz	short loc_6420DF88
mov	ebp, [esp+4Ch+t.dp]
mov	ecx, [ebp+0]
mov	[b_0+x], cl
mov	[esp+4Ch+d], 0	
mov	[esp+4Ch+c], ebx 
mov	[esp+4Ch+var_48], 8 
mov	[esp+4Ch+var_4C], ebx 
call	_tma_mp_div_2d
test	eax, eax
jz	short loc_6420DF2C
mov	[esp+4Ch+var_4C], ebx 
mov	[esp+4Ch+var_3C], res
call	_tma_mp_clear
mov	eax, [esp+4Ch+var_3C]
add	esp, 3Ch
pop	ebx
pop	b_0
pop	x
pop	ebp
retn
align 4
			
mov	eax, 0FFFFFFFEh
add	esp, 3Ch
pop	ebx
pop	b_0
pop	edi
pop	ebp
retn
align 4
lea	ecx, [x-1]
test	ecx, ecx
jle	loc_6420E0D4
lea	edx, [b_0+x]
xor	res, res
mov	[esp+4Ch+var_34], ecx
movzx	x, byte	ptr [b_0+eax]
mov	cl, [edx-1]
mov	[b_0+eax], cl
mov	ecx, edi
mov	[edx-1], cl
lea	edi, [eax+1]
mov	ecx, [esp+4Ch+var_34]
dec	ecx
lea	ebp, [edx-1]
cmp	edi, ecx
jge	loc_6420E0D4
mov	cl, [b_0+edi]
mov	[esp+4Ch+var_38], cl
mov	cl, [ebp-1]
mov	[b_0+edi], cl
mov	cl, [esp+4Ch+var_38]
mov	[ebp-1], cl
lea	edi, [eax+2]
mov	ecx, [esp+4Ch+var_34]
sub	ecx, 2
lea	ebp, [edx-2]
cmp	edi, ecx
jge	loc_6420E0D4
mov	cl, [b_0+edi]
mov	[esp+4Ch+var_38], cl
mov	cl, [ebp-1]
mov	[b_0+edi], cl
mov	cl, [esp+4Ch+var_38]
mov	[ebp-1], cl
lea	edi, [eax+3]
mov	ecx, [esp+4Ch+var_34]
sub	ecx, 3
lea	ebp, [edx-3]
cmp	edi, ecx
jge	loc_6420E0D4
mov	cl, [b_0+edi]
mov	[esp+4Ch+var_38], cl
mov	cl, [ebp-1]
mov	[b_0+edi], cl
mov	cl, [esp+4Ch+var_38]
mov	[ebp-1], cl
lea	edi, [eax+4]
mov	ecx, [esp+4Ch+var_34]
sub	ecx, 4
lea	ebp, [edx-4]
cmp	edi, ecx
jge	loc_6420E0D4
mov	cl, [b_0+edi]
mov	[esp+4Ch+var_38], cl
mov	cl, [ebp-1]
mov	[b_0+edi], cl
mov	cl, [esp+4Ch+var_38]
mov	[ebp-1], cl
lea	edi, [eax+5]
mov	ecx, [esp+4Ch+var_34]
sub	ecx, 5
lea	ebp, [edx-5]
cmp	edi, ecx
jge	short loc_6420E0D4
mov	cl, [b_0+edi]
mov	[esp+4Ch+var_38], cl
mov	cl, [ebp-1]
mov	[b_0+edi], cl
mov	cl, [esp+4Ch+var_38]
mov	[ebp-1], cl
lea	edi, [eax+6]
mov	ecx, [esp+4Ch+var_34]
sub	ecx, 6
lea	ebp, [edx-6]
cmp	edi, ecx
jge	short loc_6420E0D4
mov	cl, [b_0+edi]
mov	[esp+4Ch+var_38], cl
mov	cl, [ebp-1]
mov	[b_0+edi], cl
mov	cl, [esp+4Ch+var_38]
mov	[ebp-1], cl
lea	edi, [eax+7]
mov	ecx, [esp+4Ch+var_34]
sub	ecx, 7
lea	ebp, [edx-7]
cmp	edi, ecx
jge	short loc_6420E0D4
mov	cl, [b_0+edi]
mov	[esp+4Ch+var_38], cl
mov	cl, [ebp-1]
mov	[b_0+edi], cl
mov	cl, [esp+4Ch+var_38]
mov	[ebp-1], cl
add	eax, 8
sub	[esp+4Ch+var_34], 8
sub	edx, 8
cmp	eax, [esp+4Ch+var_34]
jl	loc_6420DF9C
lea	b_0, [b_0+0]
			
mov	[esp+4Ch+var_4C], ebx 
call	_tma_mp_clear
xor	eax, eax
add	esp, 3Ch
pop	ebx
pop	b_0
pop	x
pop	ebp
retn
align 4
xor	ebp, ebp
jmp	loc_6420DF25
and	ebp, 0FFFFFFE0h
lea	edi, [ebp+40h]
lea	edx, ds:0[edi*4]
mov	[esp+4Ch+var_48], edx 
mov	[esp+4Ch+var_4C], eax 
call	_realloc
mov	edx, eax
test	eax, eax
jz	loc_6420DF78
mov	[esp+4Ch+t.dp],	eax
mov	eax, [esp+4Ch+t.alloc]
mov	[esp+4Ch+t.alloc], edi
lea	ecx, [edx+eax*4]
jmp	short loc_6420E12D
mov	dword ptr [ecx], 0
inc	eax
add	ecx, 4
cmp	edi, eax
jg	short loc_6420E123
mov	edi, [esp+4Ch+a]
mov	ebp, [edi]
mov	eax, [esp+4Ch+t.used]
mov	[esp+4Ch+var_30], eax
jmp	loc_6420DD53
xor	eax, eax
jmp	loc_6420DE25
align 4
public _tma_mp_to_unsigned_bin_n
push	ebp
push	edi
push	esi
push	ebx
sub	esp, 2Ch
mov	edi, [esp+3Ch+a]
mov	eax, [esp+3Ch+b]
mov	[esp+3Ch+var_20], eax
mov	ebp, [esp+3Ch+outlen]
mov	edx, [ebp+0]
mov	[esp+3Ch+var_24], edx
mov	eax, [edi]
test	eax, eax
jz	loc_6420E27F
dec	eax
lea	ebx, ds:0[eax*4]
lea	ecx, ds:0[ebx*8]
sub	ecx, ebx
mov	[esp+3Ch+var_28], ecx
mov	esi, ecx
mov	edx, [a_0+0Ch]
mov	ebx, [edx+eax*4]
test	ebx, ebx
jz	loc_6420E2C0
mov	edx, ebx
mov	eax, [esp+3Ch+var_28]
mov	[esp+3Ch+var_30], ebx
lea	ecx, [eax+1]
mov	eax, ecx
mov	ebx, edx
shr	ebx, 1
jz	short loc_6420E1F0
inc	eax
mov	ebx, edx
shr	ebx, 2
jz	short loc_6420E1F0
lea	eax, [ecx+2]
mov	ebx, edx
shr	ebx, 3
jz	short loc_6420E1F0
lea	eax, [ecx+3]
mov	ebx, edx
shr	ebx, 4
jz	short loc_6420E1F0
lea	eax, [ecx+4]
mov	ebx, edx
shr	ebx, 5
jz	short loc_6420E1F0
lea	eax, [ecx+5]
mov	ebx, edx
shr	ebx, 6
jz	short loc_6420E1F0
lea	eax, [ecx+6]
mov	ebx, edx
shr	ebx, 7
jz	short loc_6420E1F0
lea	eax, [ecx+7]
shr	edx, 8
jnz	short loc_6420E1A3
			
mov	ebx, [esp+3Ch+var_30]
xor	edx, edx
test	al, 7
setnz	dl
test	eax, eax
js	loc_6420E2AC
sar	eax, 3
add	edx, eax
cmp	[esp+3Ch+var_24], edx
jb	loc_6420E29C
test	ebx, ebx
jz	loc_6420E2D0
lea	eax, [esi+1]
mov	esi, eax
mov	ecx, ebx
shr	ecx, 1
jz	short loc_6420E268
inc	esi
mov	ecx, ebx
shr	ecx, 2
jz	short loc_6420E268
lea	esi, [eax+2]
mov	edx, ebx
shr	edx, 3
jz	short loc_6420E268
lea	esi, [eax+3]
mov	ecx, ebx
shr	ecx, 4
jz	short loc_6420E268
lea	esi, [eax+4]
mov	edx, ebx
shr	edx, 5
jz	short loc_6420E268
lea	esi, [eax+5]
mov	ecx, ebx
shr	ecx, 6
jz	short loc_6420E268
lea	esi, [eax+6]
mov	edx, ebx
shr	edx, 7
jz	short loc_6420E268
lea	esi, [eax+7]
shr	ebx, 8
jnz	short loc_6420E21A
nop
			
mov	eax, esi
test	esi, esi
js	short loc_6420E2C8
sar	eax, 3
xor	edx, edx
test	esi, 7
setnz	dl
lea	eax, [edx+eax]
			
mov	[outlen_0+0], eax
mov	esi, [esp+3Ch+var_20]
mov	[esp+3Ch+b], esi
mov	[esp+3Ch+a], a_0
add	esp, 2Ch
pop	ebx
pop	esi
pop	a_0
pop	outlen_0
jmp	_tma_mp_to_unsigned_bin
align 4
			
mov	eax, 0FFFFFFFDh
add	esp, 2Ch
pop	ebx
pop	esi
pop	a_0
pop	outlen_0
retn
align 4
add	eax, 7
sar	eax, 3
add	edx, eax
cmp	[esp+3Ch+var_24], edx
jnb	loc_6420E212
jmp	short loc_6420E29C
mov	eax, ecx
jmp	loc_6420E1F4
align 4
lea	eax, [esi+7]
jmp	short loc_6420E26E
align 10h
xor	eax, eax
test	byte ptr [esp+3Ch+var_28], 4
setnz	al
mov	edx, [esp+3Ch+var_28]
test	edx, edx
js	short loc_6420E2E9
sar	edx, 3
add	eax, edx
jmp	short loc_6420E27F
add	edx, 7
jmp	short loc_6420E2E2
align 10h
public _tma_mp_to_signed_bin_n
push	ebp
push	edi
push	esi
push	ebx
sub	esp, 1Ch
mov	ebx, [esp+2Ch+a]
mov	eax, [esp+2Ch+outlen]
mov	esi, [eax]
mov	edx, [ebx]
test	edx, edx
jz	loc_6420E3A4
lea	edi, [edx-1]
lea	eax, ds:0[edi*4]
lea	ecx, ds:0[eax*8]
sub	ecx, eax
mov	eax, ecx
mov	ebp, [a_0+0Ch]
mov	edi, [ebp+edi*4+0]
test	edi, edi
jz	loc_6420E480
lea	ecx, [eax+1]
mov	eax, ecx
mov	ebp, edi
shr	ebp, 1
jz	short loc_6420E37C
inc	eax
mov	ebp, edi
shr	ebp, 2
jz	short loc_6420E37C
lea	eax, [ecx+2]
mov	ebp, edi
shr	ebp, 3
jz	short loc_6420E37C
lea	eax, [ecx+3]
mov	ebp, edi
shr	ebp, 4
jz	short loc_6420E37C
lea	eax, [ecx+4]
mov	ebp, edi
shr	ebp, 5
jz	short loc_6420E37C
lea	eax, [ecx+5]
mov	ebp, edi
shr	ebp, 6
jz	short loc_6420E37C
lea	eax, [ecx+6]
mov	ebp, edi
shr	ebp, 7
jz	short loc_6420E37C
lea	eax, [ecx+7]
shr	edi, 8
jnz	short loc_6420E32F
			
xor	ecx, ecx
test	al, 7
setnz	cl
test	eax, eax
js	loc_6420E470
sar	eax, 3
lea	eax, [ecx+eax+1]
cmp	esi, eax
jnb	short loc_6420E3AD
mov	eax, 0FFFFFFFDh
add	esp, 1Ch
pop	a_0
pop	esi
pop	edi
pop	ebp
retn
align 4
mov	eax, 1
cmp	esi, eax
jb	short loc_6420E396
test	edx, edx
jz	loc_6420E478
dec	edx
lea	edi, ds:0[edx*4]
lea	ecx, ds:0[edi*8]
sub	ecx, edi
mov	eax, ecx
mov	esi, [a_0+0Ch]
mov	edx, [esi+edx*4]
test	edx, edx
jz	loc_6420E4A8
lea	ecx, [eax+1]
mov	eax, ecx
mov	ebp, edx
shr	ebp, 1
jz	short loc_6420E428
inc	eax
mov	ebp, edx
shr	ebp, 2
test	ebp, ebp
jz	short loc_6420E428
lea	eax, [ecx+2]
mov	esi, edx
shr	esi, 3
jz	short loc_6420E428
lea	eax, [ecx+3]
mov	edi, edx
shr	edi, 4
jz	short loc_6420E428
lea	eax, [ecx+4]
mov	ebp, edx
shr	ebp, 5
jz	short loc_6420E428
lea	eax, [ecx+5]
mov	esi, edx
shr	esi, 6
jz	short loc_6420E428
lea	eax, [ecx+6]
mov	edi, edx
shr	edi, 7
jz	short loc_6420E428
lea	eax, [ecx+7]
shr	edx, 8
jnz	short loc_6420E3D6
lea	esi, [esi+0]
			
mov	edx, eax
test	eax, eax
js	short loc_6420E498
sar	edx, 3
test	al, 7
setnz	al
movzx	ecx, al
lea	eax, [ecx+edx+1]
			
mov	esi, [esp+2Ch+outlen]
mov	[esi], eax
mov	edx, [esp+2Ch+b]
inc	edx
mov	[esp+2Ch+var_28], edx 
mov	[esp+2Ch+var_2C], a_0 
call	_tma_mp_to_unsigned_bin
test	eax, eax
jnz	loc_6420E39B
mov	edi, [a_0+8]
test	edi, edi
mov	a_0, [esp+2Ch+b]
setnz	byte ptr [ebx]
add	esp, 1Ch
pop	ebx
pop	esi
pop	edi
pop	ebp
retn
add	eax, 7
jmp	loc_6420E38B
mov	eax, 1
jmp	short loc_6420E43D
align 10h
xor	eax, eax
test	cl, 4
setnz	al
test	ecx, ecx
js	short loc_6420E4A0
sar	ecx, 3
lea	eax, [eax+ecx+1]
jmp	loc_6420E392
lea	edx, [eax+7]
jmp	short loc_6420E42E
align 10h
add	ecx, 7
jmp	short loc_6420E48C
align 4
xor	eax, eax
test	cl, 4
setnz	al
test	ecx, ecx
js	short loc_6420E4BD
sar	ecx, 3
lea	eax, [eax+ecx+1]
jmp	short loc_6420E43D
add	ecx, 7
jmp	short loc_6420E4B4
align 4
public _tma_mp_lshd
			
push	ebp
push	edi
push	esi
push	ebx
sub	esp, 2Ch
mov	esi, [esp+3Ch+a]
mov	ebx, [esp+3Ch+b]
test	ebx, ebx
jle	loc_6420E6B8
mov	ebp, [a_0]
add	ebp, b_0
cmp	[a_0+4], ebp
jl	loc_6420E6C2
mov	[a_0], ebp
mov	ecx, [a_0+0Ch]
lea	res, [ebp-1]
cmp	b_0, x
jg	loc_6420E5F7
lea	a_0, [top+x*4]
mov	edx, b_0
not	edx
add	edx, ebp
lea	edi, [ecx+edx*4]
sub	x, b_0
and	x, 7
mov	[esp+3Ch+var_20], x
mov	x, [bottom]
mov	[top], eax
lea	eax, [ebp-2]
mov	edx, 0FFFFFFFCh
cmp	b_0, x
jg	loc_6420E5F7
cmp	[esp+3Ch+var_20], 0
jz	short loc_6420E5A0
cmp	[esp+3Ch+var_20], 1
jz	short loc_6420E592
cmp	[esp+3Ch+var_20], 2
jz	short loc_6420E588
cmp	[esp+3Ch+var_20], 3
jz	short loc_6420E57E
cmp	[esp+3Ch+var_20], 4
jz	short loc_6420E574
cmp	[esp+3Ch+var_20], 5
jz	short loc_6420E56A
cmp	[esp+3Ch+var_20], 6
jz	short loc_6420E560
mov	x, [bottom-4]
mov	[top-4], eax
lea	eax, [ebp-3]
mov	edx, 0FFFFFFF8h
mov	ebp, [bottom+edx]
mov	[top+edx], ebp
dec	x
sub	edx, 4
mov	ebp, [bottom+edx]
mov	[top+edx], ebp
dec	x
sub	edx, 4
mov	ebp, [bottom+edx]
mov	[top+edx], ebp
dec	x
sub	edx, 4
mov	ebp, [bottom+edx]
mov	[top+edx], ebp
dec	x
sub	edx, 4
mov	ebp, [bottom+edx]
mov	[top+edx], ebp
dec	x
sub	edx, 4
mov	ebp, [bottom+edx]
mov	[top+edx], ebp
dec	x
sub	edx, 4
cmp	b_0, x
jg	short loc_6420E5F7
mov	[esp+3Ch+var_20], ecx
mov	top, [bottom+edx]
mov	[top+edx], ecx
lea	ecx, [edx-4]
mov	ebp, [bottom+ecx]
mov	[top+ecx], ebp
lea	ecx, [edx-8]
mov	ebp, [bottom+ecx]
mov	[top+ecx], ebp
lea	ecx, [edx-0Ch]
mov	ebp, [bottom+ecx]
mov	[top+ecx], ebp
lea	ecx, [edx-10h]
mov	ebp, [bottom+ecx]
mov	[top+ecx], ebp
lea	ecx, [edx-14h]
mov	ebp, [bottom+ecx]
mov	[top+ecx], ebp
lea	ecx, [edx-18h]
mov	ebp, [bottom+ecx]
mov	[top+ecx], ebp
lea	ecx, [edx-1Ch]
mov	ebp, [bottom+ecx]
mov	[top+ecx], ebp
sub	x, 8
sub	edx, 20h
cmp	b_0, x
jle	short loc_6420E5A4
mov	ecx, [esp+3Ch+var_20]
			
lea	edx, [b_0-1]
and	edx, 7
mov	dword ptr [top], 0
mov	x, 1
cmp	x, b_0
jz	loc_6420E6B8
test	edx, edx
jz	short loc_6420E66F
cmp	edx, 1
jz	short loc_6420E663
cmp	edx, 2
jz	short loc_6420E65B
cmp	edx, 3
jz	short loc_6420E653
cmp	edx, 4
jz	short loc_6420E64B
cmp	edx, 5
jz	short loc_6420E643
cmp	edx, 6
jz	short loc_6420E63B
mov	dword ptr [top+x*4], 0
mov	al, 2
mov	dword ptr [top+x*4], 0
inc	x
mov	dword ptr [top+x*4], 0
inc	x
mov	dword ptr [top+x*4], 0
inc	x
mov	dword ptr [top+x*4], 0
inc	x
mov	dword ptr [top+x*4], 0
inc	x
mov	dword ptr [top+x*4], 0
inc	x
cmp	x, b_0
jz	short loc_6420E6B8
			
mov	dword ptr [top+x*4], 0
mov	dword ptr [top+x*4+4], 0
mov	dword ptr [top+x*4+8], 0
mov	dword ptr [top+x*4+0Ch], 0
mov	dword ptr [top+x*4+10h], 0
mov	dword ptr [top+x*4+14h], 0
mov	dword ptr [top+x*4+18h], 0
mov	dword ptr [top+x*4+1Ch], 0
add	x, 8
cmp	x, b_0
jnz	short loc_6420E66F
lea	a_0, [a_0+0]
			
xor	x, x
add	esp, 2Ch
pop	b_0
pop	a_0
pop	bottom
pop	ebp
retn
lea	edi, [ebp+40h]
mov	edx, 20h
mov	eax, ebp
mov	ecx, edx
cdq
idiv	ecx
sub	edi, edx
lea	edx, ds:0[edi*4]
mov	[esp+3Ch+var_38], edx 
mov	eax, [a_0+0Ch]
mov	[esp+3Ch+var_3C], eax 
call	_realloc
mov	ecx, eax
mov	eax, 0FFFFFFFEh
test	ecx, ecx
jz	short loc_6420E6BA
mov	[a_0+0Ch], ecx
mov	edx, [a_0+4]
mov	[a_0+4], edi
cmp	edi, edx
jle	loc_6420E7D0
lea	res, [ecx+edx*4]
mov	ecx, edx
not	ecx
add	ecx, edi
and	ecx, 7
mov	dword ptr [eax], 0
inc	edx
add	eax, 4
cmp	edi, edx
jle	loc_6420E7D0
test	ecx, ecx
jz	short loc_6420E78F
cmp	ecx, 1
jz	short loc_6420E781
cmp	ecx, 2
jz	short loc_6420E777
cmp	ecx, 3
jz	short loc_6420E76D
cmp	ecx, 4
jz	short loc_6420E763
cmp	ecx, 5
jz	short loc_6420E759
cmp	ecx, 6
jz	short loc_6420E74F
mov	dword ptr [eax], 0
inc	edx
add	eax, 4
mov	dword ptr [eax], 0
inc	edx
add	eax, 4
mov	dword ptr [eax], 0
inc	edx
add	eax, 4
mov	dword ptr [eax], 0
inc	edx
add	eax, 4
mov	dword ptr [eax], 0
inc	edx
add	eax, 4
mov	dword ptr [eax], 0
inc	edx
add	eax, 4
mov	dword ptr [eax], 0
inc	edx
add	eax, 4
cmp	edi, edx
jle	short loc_6420E7D0
			
mov	dword ptr [eax], 0
mov	dword ptr [eax+4], 0
mov	dword ptr [eax+8], 0
mov	dword ptr [eax+0Ch], 0
mov	dword ptr [eax+10h], 0
mov	dword ptr [eax+14h], 0
mov	dword ptr [eax+18h], 0
mov	dword ptr [eax+1Ch], 0
add	edx, 8
add	eax, 20h
cmp	edi, edx
jg	short loc_6420E78F
			
mov	ebp, [a_0]
add	ebp, b_0
jmp	loc_6420E4E8
align 4
public _tma_mp_reduce_2k_setup_l
push	ebp
push	edi
push	esi
push	ebx
sub	esp, 4Ch
mov	esi, [esp+5Ch+a]
mov	[esp+5Ch+var_5C], 80h 
call	_malloc
mov	[esp+5Ch+var_40], eax
test	eax, eax
jz	loc_6420E9D4
xor	edx, edx
mov	eax, [esp+5Ch+var_40]
mov	dword ptr [eax+edx*4], 0
mov	dword ptr [eax+edx*4+4], 0
mov	dword ptr [eax+edx*4+8], 0
mov	dword ptr [eax+edx*4+0Ch], 0
mov	dword ptr [eax+edx*4+10h], 0
mov	dword ptr [eax+edx*4+14h], 0
mov	dword ptr [eax+edx*4+18h], 0
mov	dword ptr [eax+edx*4+1Ch], 0
add	edx, 8
cmp	edx, 20h
jnz	short loc_6420E805
mov	[esp+5Ch+var_40], eax
mov	[esp+5Ch+tmp.dp], eax
mov	[esp+5Ch+tmp.used], 0
mov	[esp+5Ch+tmp.alloc], 20h
mov	[esp+5Ch+tmp.sign], 0
mov	edx, [a_0]
test	edx, edx
jz	short loc_6420E8E8
dec	edx
lea	eax, ds:0[edx*4]
lea	ecx, ds:0[eax*8]
sub	ecx, eax
mov	ebx, [a_0+0Ch]
mov	edx, [ebx+edx*4]
test	edx, edx
jz	short loc_6420E8EA
mov	eax, [esp+5Ch+var_40]
lea	ebx, [ecx+1]
mov	ecx, ebx
mov	edi, edx
shr	edi, 1
jz	short loc_6420E8E0
inc	ecx
mov	ebp, edx
shr	ebp, 2
jz	short loc_6420E8E0
lea	ecx, [ebx+2]
mov	edi, edx
shr	edi, 3
jz	short loc_6420E8E0
lea	ecx, [ebx+3]
mov	ebp, edx
shr	ebp, 4
jz	short loc_6420E8E0
lea	ecx, [ebx+4]
mov	edi, edx
shr	edi, 5
jz	short loc_6420E8E0
lea	ecx, [ebx+5]
mov	ebp, edx
shr	ebp, 6
jz	short loc_6420E8E0
lea	ecx, [ebx+6]
mov	edi, edx
shr	edi, 7
jz	short loc_6420E8E0
lea	ecx, [ebx+7]
shr	edx, 8
jnz	short loc_6420E891
xchg	ax, ax
			
mov	[esp+5Ch+var_40], eax
jmp	short loc_6420E8EA
align 4
xor	ecx, ecx
			
mov	[esp+5Ch+tmp.sign], 0
mov	[esp+5Ch+tmp.used], 0
mov	ebx, [esp+5Ch+var_40]
sub	ebx, 0FFFFFF80h
mov	edx, [esp+5Ch+var_40]
mov	eax, edx
mov	dword ptr [edx], 0
mov	dword ptr [edx+4], 0
mov	dword ptr [edx+8], 0
mov	dword ptr [edx+0Ch], 0
mov	dword ptr [edx+10h], 0
mov	dword ptr [edx+14h], 0
mov	dword ptr [edx+18h], 0
mov	dword ptr [edx+1Ch], 0
add	edx, 20h
cmp	edx, ebx
jnz	short loc_6420E907
mov	[esp+5Ch+var_40], eax
mov	ebp, 92492493h
mov	eax, ecx
imul	ebp
mov	[esp+5Ch+var_34], eax
mov	[esp+5Ch+var_30], edx
lea	ebx, [ecx+edx]
sar	ebx, 4
mov	eax, ecx
cdq
sub	ebx, edx
lea	edi, [ebx+1]
cmp	edi, 20h
jg	short loc_6420E9E1
			
mov	[esp+5Ch+tmp.used], edi
mov	eax, 92492493h
imul	ecx
lea	edi, [ecx+edx]
sar	edi, 4
mov	eax, ecx
cdq
sub	edi, edx
lea	eax, ds:0[edi*4]
lea	edx, ds:0[eax*8]
sub	edx, eax
sub	ecx, edx
mov	edi, 1
shl	edi, cl
mov	ebp, [esp+5Ch+tmp.dp]
mov	[ebp+ebx*4+0], edi
mov	ecx, [esp+5Ch+d]
mov	[esp+5Ch+c], ecx 
mov	[esp+5Ch+b], a_0 
lea	ebx, [esp+5Ch+tmp]
mov	[esp+5Ch+var_5C], ebx 
call	_s_tma_mp_sub
mov	[esp+5Ch+var_5C], ebx
mov	[esp+5Ch+var_38], res
call	_tma_mp_clear
mov	eax, [esp+5Ch+var_38]
add	esp, 4Ch
pop	ebx
pop	a_0
pop	edi
pop	ebp
retn
mov	eax, 0FFFFFFFEh
add	esp, 4Ch
pop	ebx
pop	a_0
pop	edi
pop	ebp
retn
lea	ebp, [ebx+41h]
mov	edx, edi
and	edx, 1Fh
sub	ebp, edx
lea	eax, ds:0[ebp*4]
mov	[esp+5Ch+b], eax 
mov	edx, [esp+5Ch+var_40]
mov	[esp+5Ch+var_5C], edx 
mov	[esp+5Ch+var_38], ecx
call	_realloc
test	eax, eax
mov	ecx, [esp+5Ch+var_38]
jz	loc_6420EB15
mov	[esp+5Ch+tmp.dp], eax
mov	edx, [esp+5Ch+tmp.alloc]
mov	[esp+5Ch+tmp.alloc], ebp
cmp	ebp, edx
jle	loc_6420E96D
lea	eax, [eax+edx*4]
mov	[esp+5Ch+var_40], eax
mov	eax, edx
not	eax
add	eax, ebp
and	eax, 7
mov	[esp+5Ch+var_34], eax
mov	eax, [esp+5Ch+var_40]
mov	dword ptr [eax], 0
inc	edx
add	eax, 4
cmp	ebp, edx
jle	loc_6420E96D
cmp	[esp+5Ch+var_34], 0
jz	short loc_6420EACF
cmp	[esp+5Ch+var_34], 1
jz	short loc_6420EABD
cmp	[esp+5Ch+var_34], 2
jz	short loc_6420EAB3
cmp	[esp+5Ch+var_34], 3
jz	short loc_6420EAA9
cmp	[esp+5Ch+var_34], 4
jz	short loc_6420EA9F
cmp	[esp+5Ch+var_34], 5
jz	short loc_6420EA95
cmp	[esp+5Ch+var_34], 6
jz	short loc_6420EA8B
mov	dword ptr [eax], 0
inc	edx
add	eax, 4
mov	dword ptr [eax], 0
inc	edx
add	eax, 4
mov	dword ptr [eax], 0
inc	edx
add	eax, 4
mov	dword ptr [eax], 0
inc	edx
add	eax, 4
mov	dword ptr [eax], 0
inc	edx
add	eax, 4
mov	dword ptr [eax], 0
inc	edx
add	eax, 4
mov	dword ptr [eax], 0
inc	edx
add	eax, 4
cmp	ebp, edx
jle	loc_6420E96D
			
mov	dword ptr [eax], 0
mov	dword ptr [eax+4], 0
mov	dword ptr [eax+8], 0
mov	dword ptr [eax+0Ch], 0
mov	dword ptr [eax+10h], 0
mov	dword ptr [eax+14h], 0
mov	dword ptr [eax+18h], 0
mov	dword ptr [eax+1Ch], 0
add	edx, 8
add	eax, 20h
cmp	ebp, edx
jg	short loc_6420EACF
jmp	loc_6420E96D
mov	eax, 0FFFFFFFEh
lea	ebx, [esp+5Ch+tmp]
jmp	ERR
align 4
public _tma_mp_add
			
push	ebp
push	edi
push	esi
push	ebx
sub	esp, 3Ch
mov	edi, [esp+4Ch+a]
mov	esi, [esp+4Ch+b]
mov	eax, [esp+4Ch+c]
mov	[esp+4Ch+var_34], eax
mov	eax, [edi+8]
mov	edx, [esi+8]
cmp	sa, sb
jz	loc_6420F26C
mov	ebx, [a_0]
mov	ecx, [b_0]
mov	[esp+4Ch+var_38], ecx
cmp	ebx, ecx
jle	loc_6420F290
			
mov	sb, [esp+4Ch+var_34]
mov	[edx+8], sa
mov	[esp+4Ch+var_2C], ebx
cmp	ebx, [edx+4]
jg	loc_6420F5B9
			
mov	ecx, [esp+4Ch+var_34]
mov	sa, [ecx]
mov	[esp+4Ch+var_30], eax
mov	ebp, [esp+4Ch+var_34]
mov	[ebp+0], ebx
mov	ecx, [a_0+0Ch]
mov	edx, [b_0+0Ch]
mov	b_0, [ebp+0Ch]
mov	a_0, [esp+4Ch+var_38]
test	edi, edi
jle	loc_6420F280
mov	edi, [esp+4Ch+var_38]
dec	edi
and	edi, 7
mov	eax, [ecx]
sub	eax, [edx]
mov	ebp, eax
shr	ebp, 1Fh
and	eax, 0FFFFFFFh
mov	[esi], eax
mov	eax, 1
cmp	eax, [esp+4Ch+var_38]
jz	loc_6420ED75
test	edi, edi
jz	loc_6420EC97
cmp	edi, 1
jz	loc_6420EC76
cmp	edi, 2
jz	loc_6420EC5F
cmp	edi, 3
jz	short loc_6420EC48
cmp	edi, 4
jz	short loc_6420EC31
cmp	edi, 5
jz	short loc_6420EC1A
cmp	edi, 6
jz	short loc_6420EC03
mov	edi, [ecx+4]
sub	edi, [edx+4]
sub	edi, ebp
mov	ebp, edi
shr	ebp, 1Fh
and	edi, 0FFFFFFFh
mov	[esi+eax*4], edi
mov	eax, 2
mov	edi, [ecx+eax*4]
sub	edi, [edx+eax*4]
sub	edi, ebp
mov	ebp, edi
shr	ebp, 1Fh
and	edi, 0FFFFFFFh
mov	[esi+eax*4], edi
inc	eax
mov	edi, [ecx+eax*4]
sub	edi, [edx+eax*4]
sub	edi, ebp
mov	ebp, edi
shr	ebp, 1Fh
and	edi, 0FFFFFFFh
mov	[esi+eax*4], edi
inc	eax
mov	edi, [ecx+eax*4]
sub	edi, [edx+eax*4]
sub	edi, ebp
mov	ebp, edi
shr	ebp, 1Fh
and	edi, 0FFFFFFFh
mov	[esi+eax*4], edi
inc	eax
mov	edi, [ecx+eax*4]
sub	edi, [edx+eax*4]
sub	edi, ebp
mov	ebp, edi
shr	ebp, 1Fh
and	edi, 0FFFFFFFh
mov	[esi+eax*4], edi
inc	eax
mov	edi, [ecx+eax*4]
sub	edi, [edx+eax*4]
sub	edi, ebp
mov	ebp, edi
shr	ebp, 1Fh
and	edi, 0FFFFFFFh
mov	[esi+eax*4], edi
inc	eax
mov	edi, [ecx+eax*4]
sub	edi, [edx+eax*4]
sub	edi, ebp
mov	ebp, edi
shr	ebp, 1Fh
and	edi, 0FFFFFFFh
mov	[esi+eax*4], edi
inc	eax
cmp	eax, [esp+4Ch+var_38]
jz	loc_6420ED75
mov	edi, ebp
mov	[esp+4Ch+var_3C], ebx
mov	ebx, [ecx+eax*4]
sub	ebx, [edx+eax*4]
sub	ebx, edi
mov	edi, ebx
shr	edi, 1Fh
and	ebx, 0FFFFFFFh
mov	[esi+eax*4], ebx
lea	ebp, [eax+1]
mov	ebx, [ecx+ebp*4]
sub	ebx, [edx+ebp*4]
sub	ebx, edi
mov	edi, ebx
shr	edi, 1Fh
and	ebx, 0FFFFFFFh
mov	[esi+ebp*4], ebx
lea	ebp, [eax+2]
mov	ebx, [ecx+ebp*4]
sub	ebx, [edx+ebp*4]
sub	ebx, edi
mov	edi, ebx
shr	edi, 1Fh
and	ebx, 0FFFFFFFh
mov	[esi+ebp*4], ebx
lea	ebp, [eax+3]
mov	ebx, [ecx+ebp*4]
sub	ebx, [edx+ebp*4]
sub	ebx, edi
mov	edi, ebx
shr	edi, 1Fh
and	ebx, 0FFFFFFFh
mov	[esi+ebp*4], ebx
lea	ebp, [eax+4]
mov	ebx, [ecx+ebp*4]
sub	ebx, [edx+ebp*4]
sub	ebx, edi
mov	edi, ebx
shr	edi, 1Fh
and	ebx, 0FFFFFFFh
mov	[esi+ebp*4], ebx
lea	ebp, [eax+5]
mov	ebx, [ecx+ebp*4]
sub	ebx, [edx+ebp*4]
sub	ebx, edi
mov	edi, ebx
shr	edi, 1Fh
and	ebx, 0FFFFFFFh
mov	[esi+ebp*4], ebx
lea	ebp, [eax+6]
mov	ebx, [ecx+ebp*4]
sub	ebx, [edx+ebp*4]
sub	ebx, edi
mov	edi, ebx
shr	edi, 1Fh
and	ebx, 0FFFFFFFh
mov	[esi+ebp*4], ebx
lea	ebp, [eax+7]
mov	ebx, [ecx+ebp*4]
sub	ebx, [edx+ebp*4]
sub	ebx, edi
mov	edi, ebx
shr	edi, 1Fh
and	ebx, 0FFFFFFFh
mov	[esi+ebp*4], ebx
add	eax, 8
cmp	eax, [esp+4Ch+var_38]
jnz	loc_6420EC9D
mov	ebp, edi
mov	ebx, [esp+4Ch+var_3C]
			
lea	edx, ds:0[eax*4]
add	ecx, edx
lea	edi, [esi+edx]
cmp	ebx, eax
jle	loc_6420F026
mov	edx, eax
not	edx
add	edx, ebx
and	edx, 7
mov	[esp+4Ch+var_3C], edx
mov	edx, [ecx]
sub	edx, ebp
mov	ebp, edx
shr	ebp, 1Fh
mov	[esp+4Ch+var_38], ebp
and	edx, 0FFFFFFFh
mov	[edi], edx
lea	ebp, [eax+1]
mov	[esp+4Ch+var_20], ebp
mov	edx, 4
cmp	ebx, [esp+4Ch+var_20]
jle	loc_6420F01F
mov	ebp, [esp+4Ch+var_3C]
test	ebp, ebp
jz	loc_6420EF4A
cmp	[esp+4Ch+var_3C], 1
jz	loc_6420EF12
cmp	[esp+4Ch+var_3C], 2
jz	loc_6420EEE4
cmp	[esp+4Ch+var_3C], 3
jz	loc_6420EEB6
cmp	[esp+4Ch+var_3C], 4
jz	loc_6420EE88
cmp	[esp+4Ch+var_3C], 5
jz	short loc_6420EE5A
cmp	[esp+4Ch+var_3C], 6
jz	short loc_6420EE2C
mov	edx, [ecx+4]
sub	edx, [esp+4Ch+var_38]
mov	ebp, edx
shr	ebp, 1Fh
mov	[esp+4Ch+var_38], ebp
and	edx, 0FFFFFFFh
mov	[edi+4], edx
lea	edx, [eax+2]
mov	[esp+4Ch+var_20], edx
mov	edx, 8
mov	ebp, [ecx+edx]
mov	[esp+4Ch+var_3C], ebp
mov	ebp, [esp+4Ch+var_38]
sub	[esp+4Ch+var_3C], ebp
mov	ebp, [esp+4Ch+var_3C]
shr	ebp, 1Fh
mov	[esp+4Ch+var_38], ebp
mov	ebp, [esp+4Ch+var_3C]
and	ebp, 0FFFFFFFh
mov	[edi+edx], ebp
inc	[esp+4Ch+var_20]
add	edx, 4
mov	ebp, [ecx+edx]
mov	[esp+4Ch+var_3C], ebp
mov	ebp, [esp+4Ch+var_38]
sub	[esp+4Ch+var_3C], ebp
mov	ebp, [esp+4Ch+var_3C]
shr	ebp, 1Fh
mov	[esp+4Ch+var_38], ebp
mov	ebp, [esp+4Ch+var_3C]
and	ebp, 0FFFFFFFh
mov	[edi+edx], ebp
inc	[esp+4Ch+var_20]
add	edx, 4
mov	ebp, [ecx+edx]
mov	[esp+4Ch+var_3C], ebp
mov	ebp, [esp+4Ch+var_38]
sub	[esp+4Ch+var_3C], ebp
mov	ebp, [esp+4Ch+var_3C]
shr	ebp, 1Fh
mov	[esp+4Ch+var_38], ebp
mov	ebp, [esp+4Ch+var_3C]
and	ebp, 0FFFFFFFh
mov	[edi+edx], ebp
inc	[esp+4Ch+var_20]
add	edx, 4
mov	ebp, [ecx+edx]
mov	[esp+4Ch+var_3C], ebp
mov	ebp, [esp+4Ch+var_38]
sub	[esp+4Ch+var_3C], ebp
mov	ebp, [esp+4Ch+var_3C]
shr	ebp, 1Fh
mov	[esp+4Ch+var_38], ebp
mov	ebp, [esp+4Ch+var_3C]
and	ebp, 0FFFFFFFh
mov	[edi+edx], ebp
inc	[esp+4Ch+var_20]
add	edx, 4
mov	ebp, [ecx+edx]
mov	[esp+4Ch+var_3C], ebp
mov	ebp, [esp+4Ch+var_38]
sub	[esp+4Ch+var_3C], ebp
mov	ebp, [esp+4Ch+var_3C]
shr	ebp, 1Fh
mov	[esp+4Ch+var_38], ebp
mov	ebp, [esp+4Ch+var_3C]
and	ebp, 0FFFFFFFh
mov	[edi+edx], ebp
inc	[esp+4Ch+var_20]
add	edx, 4
mov	ebp, [ecx+edx]
mov	[esp+4Ch+var_3C], ebp
mov	ebp, [esp+4Ch+var_38]
sub	[esp+4Ch+var_3C], ebp
mov	ebp, [esp+4Ch+var_3C]
shr	ebp, 1Fh
mov	[esp+4Ch+var_38], ebp
mov	ebp, [esp+4Ch+var_3C]
and	ebp, 0FFFFFFFh
mov	[edi+edx], ebp
inc	[esp+4Ch+var_20]
add	edx, 4
cmp	ebx, [esp+4Ch+var_20]
jle	loc_6420F01F
mov	[esp+4Ch+var_28], eax
mov	[esp+4Ch+var_24], esi
mov	[esp+4Ch+var_3C], ebx
mov	ebx, [esp+4Ch+var_38]
mov	ebp, [esp+4Ch+var_20]
mov	eax, [ecx+edx]
sub	eax, ebx
mov	ebx, eax
shr	ebx, 1Fh
and	eax, 0FFFFFFFh
mov	[edi+edx], eax
lea	esi, [edx+4]
mov	eax, [ecx+esi]
sub	eax, ebx
mov	ebx, eax
shr	ebx, 1Fh
and	eax, 0FFFFFFFh
mov	[edi+esi], eax
lea	esi, [edx+8]
mov	eax, [ecx+esi]
sub	eax, ebx
mov	ebx, eax
shr	ebx, 1Fh
and	eax, 0FFFFFFFh
mov	[edi+esi], eax
lea	esi, [edx+0Ch]
mov	eax, [ecx+esi]
sub	eax, ebx
mov	ebx, eax
shr	ebx, 1Fh
and	eax, 0FFFFFFFh
mov	[edi+esi], eax
lea	esi, [edx+10h]
mov	eax, [ecx+esi]
sub	eax, ebx
mov	ebx, eax
shr	ebx, 1Fh
and	eax, 0FFFFFFFh
mov	[edi+esi], eax
lea	esi, [edx+14h]
mov	eax, [ecx+esi]
sub	eax, ebx
mov	ebx, eax
shr	ebx, 1Fh
and	eax, 0FFFFFFFh
mov	[edi+esi], eax
lea	esi, [edx+18h]
mov	eax, [ecx+esi]
sub	eax, ebx
mov	ebx, eax
shr	ebx, 1Fh
and	eax, 0FFFFFFFh
mov	[edi+esi], eax
lea	esi, [edx+1Ch]
mov	eax, [ecx+esi]
sub	eax, ebx
mov	ebx, eax
shr	ebx, 1Fh
and	eax, 0FFFFFFFh
mov	[edi+esi], eax
add	ebp, 8
add	edx, 20h
cmp	[esp+4Ch+var_3C], ebp
jg	loc_6420EF5E
mov	eax, [esp+4Ch+var_28]
mov	esi, [esp+4Ch+var_24]
mov	ebx, [esp+4Ch+var_3C]
			
mov	ecx, ebx
sub	ecx, eax
lea	edi, [edi+ecx*4]
cmp	ebx, [esp+4Ch+var_30]
jge	loc_6420F104
mov	ecx, ebx
not	ecx
add	ecx, [esp+4Ch+var_30]
and	ecx, 7
mov	dword ptr [edi], 0
lea	eax, [edi+4]
lea	edx, [ebx+1]
cmp	[esp+4Ch+var_30], edx
jle	loc_6420F104
test	ecx, ecx
jz	short loc_6420F0C1
cmp	ecx, 1
jz	short loc_6420F0B1
cmp	ecx, 2
jz	short loc_6420F0A7
cmp	ecx, 3
jz	short loc_6420F09D
cmp	ecx, 4
jz	short loc_6420F093
cmp	ecx, 5
jz	short loc_6420F089
cmp	ecx, 6
jz	short loc_6420F07F
mov	dword ptr [eax], 0
lea	eax, [edi+8]
lea	edx, [ebx+2]
mov	dword ptr [eax], 0
add	eax, 4
inc	edx
mov	dword ptr [eax], 0
add	eax, 4
inc	edx
mov	dword ptr [eax], 0
add	eax, 4
inc	edx
mov	dword ptr [eax], 0
add	eax, 4
inc	edx
mov	dword ptr [eax], 0
add	eax, 4
inc	edx
mov	dword ptr [eax], 0
add	eax, 4
inc	edx
cmp	[esp+4Ch+var_30], edx
jle	short loc_6420F104
			
mov	dword ptr [eax], 0
mov	dword ptr [eax+4], 0
mov	dword ptr [eax+8], 0
mov	dword ptr [eax+0Ch], 0
mov	dword ptr [eax+10h], 0
mov	dword ptr [eax+14h], 0
mov	dword ptr [eax+18h], 0
mov	dword ptr [eax+1Ch], 0
add	eax, 20h
add	edx, 8
cmp	[esp+4Ch+var_30], edx
jg	short loc_6420F0C1
			
test	ebx, ebx
jle	loc_6420F23E
lea	edx, [ebx-1]
mov	edi, [esi+edx*4]
test	edi, edi
jnz	loc_6420F28C
lea	eax, ds:0FFFFFFF8h[ebx*4]
mov	ecx, edx
and	ecx, 7
jz	loc_6420F1C1
mov	[esp+4Ch+var_2C], edx
test	edx, edx
jle	loc_6420F238
mov	edi, [esi+eax]
sub	eax, 4
test	edi, edi
jnz	loc_6420F25C
lea	edx, [ebx-2]
cmp	ecx, 1
jz	short loc_6420F1C1
cmp	ecx, 2
jz	short loc_6420F1B2
cmp	ecx, 3
jz	short loc_6420F1A3
cmp	ecx, 4
jz	short loc_6420F194
cmp	ecx, 5
jz	short loc_6420F185
cmp	ecx, 6
jz	short loc_6420F176
mov	ebx, [esi+eax]
sub	eax, 4
test	ebx, ebx
jnz	loc_6420F25C
dec	edx
mov	ecx, [esi+eax]
sub	eax, 4
test	ecx, ecx
jnz	loc_6420F25C
dec	edx
mov	ebp, [esi+eax]
sub	eax, 4
test	ebp, ebp
jnz	loc_6420F25C
dec	edx
mov	edi, [esi+eax]
sub	eax, 4
test	edi, edi
jnz	loc_6420F25C
dec	edx
mov	ebx, [esi+eax]
sub	eax, 4
test	ebx, ebx
jnz	loc_6420F25C
dec	edx
mov	ecx, [esi+eax]
sub	eax, 4
test	ecx, ecx
jnz	loc_6420F25C
dec	edx
			
test	edx, edx
jle	short loc_6420F234
lea	ebx, [eax-4]
mov	ebp, [esi+eax]
test	ebp, ebp
jnz	loc_6420F25C
lea	ecx, [edx-1]
mov	edx, ecx
lea	edi, [eax-8]
mov	ebx, [esi+ebx]
test	ebx, ebx
jnz	short loc_6420F25C
dec	edx
lea	ebx, [eax-0Ch]
mov	ebp, [esi+edi]
test	ebp, ebp
jnz	short loc_6420F25C
lea	edx, [ecx-2]
lea	edi, [eax-10h]
mov	ebp, [esi+ebx]
test	ebp, ebp
jnz	short loc_6420F25C
lea	edx, [ecx-3]
lea	ebx, [eax-14h]
mov	edi, [esi+edi]
test	edi, edi
jnz	short loc_6420F25C
lea	edx, [ecx-4]
lea	edi, [eax-18h]
mov	ebp, [esi+ebx]
test	ebp, ebp
jnz	short loc_6420F25C
lea	edx, [ecx-5]
lea	ebx, [eax-1Ch]
mov	edi, [esi+edi]
test	edi, edi
jnz	short loc_6420F25C
lea	edx, [ecx-6]
sub	eax, 20h
mov	ebx, [esi+ebx]
test	ebx, ebx
jnz	short loc_6420F25C
lea	edx, [ecx-7]
jmp	short loc_6420F1C1
align 4
mov	[esp+4Ch+var_2C], edx
mov	esi, [esp+4Ch+var_34]
mov	[esi], edx
mov	edx, [esp+4Ch+var_2C]
test	edx, edx
jnz	short loc_6420F28C
mov	ecx, [esp+4Ch+var_34]
mov	dword ptr [ecx+8], 0
xor	eax, eax
			
add	esp, 3Ch
pop	ebx
pop	esi
pop	edi
pop	ebp
retn
align 4
			
mov	eax, [esp+4Ch+var_34]
mov	[eax], edx
xor	eax, eax
add	esp, 3Ch
pop	ebx
pop	esi
pop	edi
pop	ebp
retn
mov	sb, [esp+4Ch+var_34]
mov	[edx+8], sa
add	esp, 3Ch
pop	ebx
pop	b_0
pop	a_0
pop	ebp
jmp	_s_tma_mp_add
align 10h
mov	edi, esi
xor	eax, eax
xor	ebp, ebp
jmp	loc_6420ED81
align 4
			
xor	eax, eax
jmp	short loc_6420F253
jl	loc_6420F589
mov	ebp, [a_0+0Ch]
mov	[esp+4Ch+var_30], ebp
mov	ebp, [b_0+0Ch]
test	ebx, ebx
jle	loc_6420EB59
lea	ecx, [ebx-1]
mov	[esp+4Ch+var_2C], ecx
shl	ecx, 2
mov	[esp+4Ch+var_3C], ecx
mov	ecx, [esp+4Ch+var_30]
add	ecx, [esp+4Ch+var_3C]
mov	[esp+4Ch+var_30], ecx
add	ebp, [esp+4Ch+var_3C]
mov	[esp+4Ch+var_24], ebp
mov	ebp, [ebp+0]
mov	ecx, [esp+4Ch+var_30]
cmp	[ecx], ebp
ja	loc_6420EB59
jb	loc_6420F589
xor	ecx, ecx
mov	[esp+4Ch+var_3C], 0
mov	ebp, [esp+4Ch+var_2C]
and	ebp, 7
mov	[esp+4Ch+var_2C], ebp
jz	loc_6420F489
mov	[esp+4Ch+var_3C], 1
mov	ebp, [esp+4Ch+var_24]
mov	ecx, [ebp-4]
mov	ebp, [esp+4Ch+var_30]
cmp	[ebp-4], ecx
ja	loc_6420EB59
mov	ecx, 0FFFFFFFCh
jb	loc_6420F589
cmp	[esp+4Ch+var_2C], 1
jz	loc_6420F489
cmp	[esp+4Ch+var_2C], 2
jz	loc_6420F456
cmp	[esp+4Ch+var_2C], 3
jz	loc_6420F423
cmp	[esp+4Ch+var_2C], 4
jz	loc_6420F3F0
cmp	[esp+4Ch+var_2C], 5
jz	short loc_6420F3BD
cmp	[esp+4Ch+var_2C], 6
jz	short loc_6420F38A
inc	[esp+4Ch+var_3C]
mov	ebp, [ebp+ecx-4]
mov	[esp+4Ch+var_2C], ebp
mov	ebp, [esp+4Ch+var_24]
mov	ebp, [ebp+ecx-4]
mov	[esp+4Ch+var_28], ebp
cmp	[esp+4Ch+var_2C], ebp
ja	loc_6420EB59
sub	ecx, 4
cmp	[esp+4Ch+var_2C], ebp
jb	loc_6420F589
inc	[esp+4Ch+var_3C]
mov	ebp, [esp+4Ch+var_30]
mov	ebp, [ebp+ecx-4]
mov	[esp+4Ch+var_2C], ebp
mov	ebp, [esp+4Ch+var_24]
mov	ebp, [ebp+ecx-4]
mov	[esp+4Ch+var_28], ebp
cmp	[esp+4Ch+var_2C], ebp
ja	loc_6420EB59
sub	ecx, 4
cmp	[esp+4Ch+var_2C], ebp
jb	loc_6420F589
inc	[esp+4Ch+var_3C]
mov	ebp, [esp+4Ch+var_30]
mov	ebp, [ebp+ecx-4]
mov	[esp+4Ch+var_2C], ebp
mov	ebp, [esp+4Ch+var_24]
mov	ebp, [ebp+ecx-4]
mov	[esp+4Ch+var_28], ebp
cmp	[esp+4Ch+var_2C], ebp
ja	loc_6420EB59
sub	ecx, 4
cmp	[esp+4Ch+var_2C], ebp
jb	loc_6420F589
inc	[esp+4Ch+var_3C]
mov	ebp, [esp+4Ch+var_30]
mov	ebp, [ebp+ecx-4]
mov	[esp+4Ch+var_2C], ebp
mov	ebp, [esp+4Ch+var_24]
mov	ebp, [ebp+ecx-4]
mov	[esp+4Ch+var_28], ebp
cmp	[esp+4Ch+var_2C], ebp
ja	loc_6420EB59
sub	ecx, 4
cmp	[esp+4Ch+var_2C], ebp
jb	loc_6420F589
inc	[esp+4Ch+var_3C]
mov	ebp, [esp+4Ch+var_30]
mov	ebp, [ebp+ecx-4]
mov	[esp+4Ch+var_2C], ebp
mov	ebp, [esp+4Ch+var_24]
mov	ebp, [ebp+ecx-4]
mov	[esp+4Ch+var_28], ebp
cmp	[esp+4Ch+var_2C], ebp
ja	loc_6420EB59
sub	ecx, 4
cmp	[esp+4Ch+var_2C], ebp
jb	loc_6420F589
inc	[esp+4Ch+var_3C]
mov	ebp, [esp+4Ch+var_30]
mov	ebp, [ebp+ecx-4]
mov	[esp+4Ch+var_2C], ebp
mov	ebp, [esp+4Ch+var_24]
mov	ebp, [ebp+ecx-4]
mov	[esp+4Ch+var_28], ebp
cmp	[esp+4Ch+var_2C], ebp
ja	loc_6420EB59
sub	ecx, 4
cmp	[esp+4Ch+var_2C], ebp
jb	loc_6420F589
			
mov	ebp, [esp+4Ch+var_24]
mov	[esp+4Ch+var_24], sb
mov	[esp+4Ch+var_28], sa
mov	sa, [esp+4Ch+var_30]
mov	[esp+4Ch+var_30], a_0
mov	[esp+4Ch+var_2C], b_0
mov	esi, [esp+4Ch+var_3C]
inc	esi
mov	[esp+4Ch+var_20], esi
cmp	ebx, esi
jle	loc_6420F5A8
mov	a_0, [eax+ecx-4]
mov	esi, [ebp+ecx-4]
cmp	edi, esi
ja	loc_6420F5A8
lea	sb, [ecx-4]
cmp	edi, esi
jb	loc_6420F57D
mov	esi, [eax+edx-4]
mov	edi, [ebp+edx-4]
mov	[esp+4Ch+var_3C], edi
cmp	esi, edi
ja	loc_6420F5A8
lea	edi, [ecx-8]
cmp	esi, [esp+4Ch+var_3C]
jb	loc_6420F57D
mov	esi, [eax+edi-4]
mov	[esp+4Ch+var_3C], esi
mov	edi, [ebp+edi-4]
cmp	esi, edi
ja	loc_6420F5A8
lea	esi, [ecx-0Ch]
cmp	[esp+4Ch+var_3C], edi
jb	short loc_6420F57D
mov	edi, [eax+esi-4]
mov	esi, [ebp+esi-4]
cmp	edi, esi
ja	loc_6420F5A8
sub	ecx, 10h
cmp	edi, esi
jb	short loc_6420F57D
mov	esi, [eax+ecx-4]
mov	edi, [ebp+ecx-4]
cmp	esi, edi
ja	short loc_6420F5A8
lea	ecx, [edx-10h]
cmp	esi, edi
jb	short loc_6420F57D
mov	esi, [eax+ecx-4]
mov	edi, [ebp+ecx-4]
cmp	esi, edi
ja	short loc_6420F5A8
lea	ecx, [edx-14h]
cmp	esi, edi
jb	short loc_6420F57D
mov	esi, [eax+ecx-4]
mov	edi, [ebp+ecx-4]
cmp	esi, edi
ja	short loc_6420F5A8
lea	ecx, [edx-18h]
cmp	esi, edi
jb	short loc_6420F57D
mov	edi, [esp+4Ch+var_20]
add	edi, 7
mov	[esp+4Ch+var_3C], edi
mov	esi, [eax+ecx-4]
mov	edi, [ebp+ecx-4]
cmp	esi, edi
ja	short loc_6420F5A8
lea	ecx, [edx-1Ch]
cmp	esi, edi
jnb	loc_6420F4A1
			
mov	edx, [esp+4Ch+var_24]
mov	edi, [esp+4Ch+var_30]
mov	esi, [esp+4Ch+var_2C]
			
mov	ebp, [esp+4Ch+var_34]
mov	[ebp+8], sb
mov	[esp+4Ch+c], ebp
mov	[esp+4Ch+b], a_0
mov	[esp+4Ch+a], b_0
add	esp, 3Ch
pop	ebx
pop	b_0
pop	a_0
pop	ebp
jmp	_s_tma_mp_sub
			
mov	eax, [esp+4Ch+var_28]
mov	edi, [esp+4Ch+var_30]
mov	esi, [esp+4Ch+var_2C]
jmp	loc_6420EB59
lea	ebp, [ebx+40h]
mov	edx, 20h
mov	sa, ebx
mov	ecx, edx
cdq
idiv	ecx
sub	ebp, edx
lea	edx, ds:0[ebp*4]
mov	[esp+4Ch+var_48], edx 
mov	ecx, [esp+4Ch+var_34]
mov	eax, [ecx+0Ch]
mov	[esp+4Ch+var_4C], eax 
call	_realloc
mov	edx, eax
mov	eax, 0FFFFFFFEh
test	edx, edx
jz	loc_6420F253
mov	ecx, [esp+4Ch+var_34]
mov	[ecx+0Ch], edx
mov	res, [ecx+4]
mov	[ecx+4], ebp
cmp	ebp, eax
jle	loc_6420EB6D
lea	edx, [edx+eax*4]
mov	[esp+4Ch+var_3C], edx
mov	ecx, eax
not	ecx
add	ecx, ebp
and	ecx, 7
mov	dword ptr [edx], 0
lea	edx, [eax+1]
mov	eax, [esp+4Ch+var_3C]
add	eax, 4
cmp	ebp, edx
jle	loc_6420EB6D
test	ecx, ecx
jz	short loc_6420F6A0
cmp	ecx, 1
jz	short loc_6420F68E
cmp	ecx, 2
jz	short loc_6420F684
cmp	ecx, 3
jz	short loc_6420F67A
cmp	ecx, 4
jz	short loc_6420F670
cmp	ecx, 5
jz	short loc_6420F666
cmp	ecx, 6
jz	short loc_6420F65C
mov	dword ptr [eax], 0
inc	edx
add	eax, 4
mov	dword ptr [eax], 0
inc	edx
add	eax, 4
mov	dword ptr [eax], 0
inc	edx
add	eax, 4
mov	dword ptr [eax], 0
inc	edx
add	eax, 4
mov	dword ptr [eax], 0
inc	edx
add	eax, 4
mov	dword ptr [eax], 0
inc	edx
add	eax, 4
mov	dword ptr [eax], 0
inc	edx
add	eax, 4
cmp	ebp, edx
jle	loc_6420EB6D
			
mov	dword ptr [eax], 0
mov	dword ptr [eax+4], 0
mov	dword ptr [eax+8], 0
mov	dword ptr [eax+0Ch], 0
mov	dword ptr [eax+10h], 0
mov	dword ptr [eax+14h], 0
mov	dword ptr [eax+18h], 0
mov	dword ptr [eax+1Ch], 0
add	edx, 8
add	eax, 20h
cmp	ebp, edx
jg	short loc_6420F6A0
jmp	loc_6420EB6D
align 4
public _fast_tma_mp_montgomery_reduce
			
push	ebp
push	edi
push	esi
push	ebx
mov	eax, 106Ch	
call	__alloca
mov	ecx, [esp+10h+arg_106C]
mov	eax, [ecx]
mov	[esp+10h+arg_40], eax
mov	ebx, eax
mov	edx, [esp+10h+arg_1070]
mov	edi, [edx]
mov	ecx, [esp+10h+arg_106C]
mov	eax, [ecx+4]
cmp	edi, eax
jge	loc_64210984
mov	esi, [ecx+0Ch]
mov	[esp+10h+arg_38], esi
lea	ebp, [edi+1]
mov	[esp+10h+arg_34], ebp
			
test	olduse,	olduse
jle	loc_642109D1
lea	esi, [esp+10h+arg_4C]
mov	[esp+10h+arg_3C], esi
lea	ecx, [olduse-1]
and	ecx, 7
mov	eax, [esp+10h+arg_38]
mov	edx, [eax]
mov	[esi], edx
mov	dword ptr [esi+4], 0
lea	eax, [esp+10h+arg_54]
mov	edx, 1
cmp	ix, olduse
jz	loc_6420F8A1
test	ecx, ecx
jz	loc_6420F825
cmp	ecx, 1
jz	loc_6420F80D
cmp	ecx, 2
jz	short loc_6420F7F8
cmp	ecx, 3
jz	short loc_6420F7E4
cmp	ecx, 4
jz	short loc_6420F7D0
cmp	ecx, 5
jz	short loc_6420F7BB
cmp	ecx, 6
jz	short loc_6420F7A7
mov	ix, [esp+10h+arg_38]
mov	esi, [edx+4]
mov	[_W], esi
mov	dword ptr [_W+4], 0
lea	_W, [esp+10h+arg_5C]
mov	edx, 2
mov	ecx, [esp+10h+arg_38]
mov	ebp, [ecx+ix*4]
mov	[_W], ebp
mov	dword ptr [_W+4], 0
add	_W, 8
inc	ix
mov	ebp, [esp+10h+arg_38]
mov	esi, [ebp+ix*4+0]
mov	[_W], esi
mov	dword ptr [_W+4], 0
add	_W, 8
inc	ix
mov	esi, [esp+10h+arg_38]
mov	ecx, [esi+ix*4]
mov	[_W], ecx
mov	dword ptr [_W+4], 0
add	_W, 8
inc	ix
mov	ecx, [esp+10h+arg_38]
mov	ebp, [ecx+ix*4]
mov	[_W], ebp
mov	dword ptr [_W+4], 0
add	_W, 8
inc	ix
mov	ebp, [esp+10h+arg_38]
mov	esi, [ebp+ix*4+0]
mov	[_W], esi
mov	dword ptr [_W+4], 0
add	_W, 8
inc	ix
mov	esi, [esp+10h+arg_38]
mov	ecx, [esi+ix*4]
mov	[_W], ecx
mov	dword ptr [_W+4], 0
add	_W, 8
inc	ix
cmp	ix, olduse
jz	short loc_6420F8A1
mov	ecx, [esp+10h+arg_38]
mov	esi, [tmpx+ix*4]
mov	[_W], esi
mov	dword ptr [_W+4], 0
mov	ebp, [tmpx+ix*4+4]
mov	[_W+8],	ebp
mov	dword ptr [_W+0Ch], 0
mov	esi, [tmpx+ix*4+8]
mov	[_W+10h], esi
mov	dword ptr [_W+14h], 0
mov	ebp, [tmpx+ix*4+0Ch]
mov	[_W+18h], ebp
mov	dword ptr [_W+1Ch], 0
mov	esi, [tmpx+ix*4+10h]
mov	[_W+20h], esi
mov	dword ptr [_W+24h], 0
mov	ebp, [tmpx+ix*4+14h]
mov	[_W+28h], ebp
mov	dword ptr [_W+2Ch], 0
mov	esi, [tmpx+ix*4+18h]
mov	[_W+30h], esi
mov	dword ptr [_W+34h], 0
mov	ebp, [tmpx+ix*4+1Ch]
mov	[_W+38h], ebp
mov	dword ptr [_W+3Ch], 0
add	_W, 40h
add	ix, 8
cmp	ix, olduse
jnz	short loc_6420F829
			
mov	esi, ix
lea	edx, [edi+edi]
mov	[esp+10h+arg_44], edx
cmp	ix, edx
jg	loc_6420F9FA
mov	olduse,	edx
sub	ebx, ix
and	ebx, 7
mov	dword ptr [_W],	0
mov	dword ptr [_W+4], 0
lea	edx, [_W+8]
lea	tmpx, [ix+1]
cmp	ix, [esp+10h+arg_44]
jg	loc_6420F9FA
test	ebx, ebx
jz	loc_6420F97F
cmp	ebx, 1
jz	loc_6420F968
cmp	ebx, 2
jz	short loc_6420F957
cmp	ebx, 3
jz	short loc_6420F946
cmp	ebx, 4
jz	short loc_6420F935
cmp	ebx, 5
jz	short loc_6420F924
cmp	ebx, 6
jz	short loc_6420F913
mov	dword ptr [_W],	0
mov	dword ptr [_W+4], 0
lea	_W, [eax+10h]
lea	ix, [esi+2]
mov	dword ptr [_W],	0
mov	dword ptr [_W+4], 0
add	_W, 8
inc	ix
mov	dword ptr [_W],	0
mov	dword ptr [_W+4], 0
add	_W, 8
inc	ix
mov	dword ptr [_W],	0
mov	dword ptr [_W+4], 0
add	_W, 8
inc	ix
mov	dword ptr [_W],	0
mov	dword ptr [_W+4], 0
add	_W, 8
inc	ix
mov	dword ptr [_W],	0
mov	dword ptr [_W+4], 0
add	_W, 8
inc	ix
mov	dword ptr [_W],	0
mov	dword ptr [_W+4], 0
add	_W, 8
inc	ix
cmp	ix, [esp+10h+arg_44]
jg	short loc_6420F9FA
			
mov	dword ptr [_W],	0
mov	dword ptr [_W+4], 0
mov	dword ptr [_W+8], 0
mov	dword ptr [_W+0Ch], 0
mov	dword ptr [_W+10h], 0
mov	dword ptr [_W+14h], 0
mov	dword ptr [_W+18h], 0
mov	dword ptr [_W+1Ch], 0
mov	dword ptr [_W+20h], 0
mov	dword ptr [_W+24h], 0
mov	dword ptr [_W+28h], 0
mov	dword ptr [_W+2Ch], 0
mov	dword ptr [_W+30h], 0
mov	dword ptr [_W+34h], 0
mov	dword ptr [_W+38h], 0
mov	dword ptr [_W+3Ch], 0
add	_W, 40h
add	ix, 8
cmp	ix, [esp+10h+arg_44]
jle	short loc_6420F97F
			
test	edi, edi
jle	loc_64210B3D
mov	esi, [esp+10h+arg_4C]
mov	olduse,	[esp+10h+arg_50]
mov	[esp+10h+arg_24], esi
mov	[esp+10h+arg_28], ebx
mov	ebp, [esp+10h+arg_1070]
mov	ebx, [ebp+0Ch]
mov	tmpx, [esp+10h+arg_3C]
lea	eax, ds:0[edi*8]
mov	[esp+10h+arg_48], eax
mov	_W, ecx
add	edx, eax
mov	[esp+10h+arg_2C], edx
mov	[esp+10h+arg_18], ecx
mov	[esp+10h+arg_8], edi
nop
mov	esi, [esp+10h+arg_1074]
imul	esi, [esp+10h+arg_24]
and	esi, 0FFFFFFFh
mov	ecx, [esp+10h+arg_8]
dec	ecx
and	ecx, 7
mov	eax, esi
mul	dword ptr [ebx]
xor	edi, edi
mov	ebp, [esp+10h+arg_18]
add	[ebp+edi*8+0], eax
adc	[ebp+edi*8+4], edx
mov	[esp+10h+arg_30], 1
mov	edi, [esp+10h+arg_8]
cmp	[esp+10h+arg_30], edi
jz	loc_6420FC35
test	ecx, ecx
jz	loc_6420FB7C
cmp	ecx, 1
jz	loc_6420FB54
cmp	ecx, 2
jz	loc_6420FB38
cmp	ecx, 3
jz	short loc_6420FB1C
cmp	ecx, 4
jz	short loc_6420FB00
cmp	ecx, 5
jz	short loc_6420FAE4
cmp	ecx, 6
jz	short loc_6420FAC8
mov	eax, esi
mul	dword ptr [ebx+4]
mov	ecx, [esp+10h+arg_30]
mov	edi, [esp+10h+arg_18]
add	[edi+ecx*8], eax
adc	[edi+ecx*8+4], edx
mov	[esp+10h+arg_30], 2
mov	eax, esi
mov	ecx, [esp+10h+arg_30]
mul	dword ptr [ebx+ecx*4]
mov	edi, ecx
mov	ebp, [esp+10h+arg_18]
add	[ebp+ecx*8+0], eax
adc	[ebp+ecx*8+4], edx
inc	edi
mov	[esp+10h+arg_30], edi
mov	eax, esi
mov	ecx, [esp+10h+arg_30]
mul	dword ptr [ebx+ecx*4]
mov	edi, ecx
mov	ebp, [esp+10h+arg_18]
add	[ebp+ecx*8+0], eax
adc	[ebp+ecx*8+4], edx
inc	edi
mov	[esp+10h+arg_30], edi
mov	eax, esi
mov	ecx, [esp+10h+arg_30]
mul	dword ptr [ebx+ecx*4]
mov	edi, ecx
mov	ebp, [esp+10h+arg_18]
add	[ebp+ecx*8+0], eax
adc	[ebp+ecx*8+4], edx
inc	edi
mov	[esp+10h+arg_30], edi
mov	eax, esi
mov	ecx, [esp+10h+arg_30]
mul	dword ptr [ebx+ecx*4]
mov	edi, ecx
mov	ebp, [esp+10h+arg_18]
add	[ebp+ecx*8+0], eax
adc	[ebp+ecx*8+4], edx
inc	edi
mov	[esp+10h+arg_30], edi
mov	eax, esi
mov	ecx, [esp+10h+arg_30]
mul	dword ptr [ebx+ecx*4]
mov	edi, ecx
mov	ebp, [esp+10h+arg_18]
add	[ebp+ecx*8+0], eax
adc	[ebp+ecx*8+4], edx
inc	edi
mov	[esp+10h+arg_30], edi
mov	eax, esi
mov	ecx, [esp+10h+arg_30]
mul	dword ptr [ebx+ecx*4]
mov	edi, ecx
mov	ebp, [esp+10h+arg_18]
add	[ebp+ecx*8+0], eax
adc	[ebp+ecx*8+4], edx
inc	edi
mov	[esp+10h+arg_30], edi
mov	edx, [esp+10h+arg_8]
cmp	edi, edx
jz	loc_6420FC35
mov	edi, [esp+10h+arg_8]
mov	eax, esi
mov	ecx, [esp+10h+arg_30]
mul	dword ptr [ebx+ecx*4]
mov	ebp, ecx
mov	ecx, [esp+10h+arg_18]
add	[ecx+ebp*8], eax
adc	[ecx+ebp*8+4], edx
mov	ecx, ebp
inc	ecx
mov	eax, esi
mul	dword ptr [ebx+ecx*4]
mov	ebp, [esp+10h+arg_18]
add	[ebp+ecx*8+0], eax
adc	[ebp+ecx*8+4], edx
mov	ecx, [esp+10h+arg_30]
add	iy, 2
mov	eax, esi
mul	dword ptr [ebx+iy*4]
add	[ebp+iy*8+0], eax
adc	[ebp+iy*8+4], edx
mov	iy, [esp+10h+arg_30]
add	iy, 3
mov	eax, esi
mul	dword ptr [ebx+iy*4]
add	[ebp+iy*8+0], eax
adc	[ebp+iy*8+4], edx
mov	iy, [esp+10h+arg_30]
add	iy, 4
mov	eax, esi
mul	dword ptr [ebx+iy*4]
add	[ebp+iy*8+0], eax
adc	[ebp+iy*8+4], edx
mov	iy, [esp+10h+arg_30]
add	iy, 5
mov	eax, esi
mul	dword ptr [ebx+iy*4]
add	[ebp+iy*8+0], eax
adc	[ebp+iy*8+4], edx
mov	iy, [esp+10h+arg_30]
add	iy, 6
mov	eax, esi
mul	dword ptr [ebx+iy*4]
add	[ebp+iy*8+0], eax
adc	[ebp+iy*8+4], edx
mov	iy, [esp+10h+arg_30]
add	iy, 7
mov	eax, esi
mul	dword ptr [ebx+iy*4]
add	[ebp+iy*8+0], eax
adc	[ebp+iy*8+4], edx
add	[esp+10h+arg_30], 8
cmp	[esp+10h+arg_30], edi
jnz	loc_6420FB80
mov	[esp+10h+arg_8], edi
			
mov	edx, [esp+10h+arg_18]
mov	eax, [edx]
mov	edx, [edx+4]
shrd	eax, edx, 1Ch
shr	edx, 1Ch
mov	[esp+10h+arg_24], eax
mov	[esp+10h+arg_28], edx
mov	edi, [esp+10h+arg_18]
mov	iy, [edi+8]
mov	ebp, [edi+0Ch]
add	[esp+10h+arg_24], ecx
adc	[esp+10h+arg_28], ebp
mov	eax, [esp+10h+arg_24]
mov	esi, [esp+10h+arg_28]
mov	edi, [esp+10h+arg_18]
mov	[edi+8], eax
mov	[edi+0Ch], esi
add	edi, 8
mov	[esp+10h+arg_18], edi
mov	edx, [esp+10h+arg_2C]
cmp	edi, edx
jnz	loc_6420FA3C
mov	edi, [esp+10h+arg_8]
mov	esi, [esp+10h+arg_3C]
add	esi, [esp+10h+arg_48]
lea	ebx, [edi+1]
mov	[esp+10h+arg_2C], ebx
mov	edx, ebx
shl	edx, 3
mov	_W, [esp+10h+arg_44]
inc	eax
mov	[esp+10h+arg_30], eax
mov	tmpx, [esp+10h+arg_2C]
cmp	eax, ecx
jl	loc_6420FEB6
add	edx, [esp+10h+arg_3C]
sub	eax, ecx
and	eax, 7
mov	[esp+10h+arg_24], eax
mov	ecx, [esi]
mov	olduse,	[esi+4]
shrd	ecx, ebx, 1Ch
shr	ebx, 1Ch
add	[_W], ecx
adc	[_W+4],	ebx
mov	ebp, [esp+10h+arg_2C]
inc	ix
mov	eax, 8
cmp	ix, [esp+10h+arg_30]
jg	loc_6420FEB6
cmp	[esp+10h+arg_24], 0
jz	loc_6420FDDF
cmp	[esp+10h+arg_24], 1
jz	loc_6420FDBC
cmp	[esp+10h+arg_24], 2
jz	loc_6420FDA3
cmp	[esp+10h+arg_24], 3
jz	short loc_6420FD8A
cmp	[esp+10h+arg_24], 4
jz	short loc_6420FD71
cmp	[esp+10h+arg_24], 5
jz	short loc_6420FD58
cmp	[esp+10h+arg_24], 6
jz	short loc_6420FD3F
mov	ecx, [esi+8]
mov	ebx, [esi+0Ch]
shrd	ecx, ebx, 1Ch
shr	ebx, 1Ch
add	[_W+8],	ecx
adc	[_W+0Ch], ebx
mov	ix, [esp+10h+arg_2C]
add	ix, 2
mov	eax, 10h
mov	ecx, [esi+eax]
mov	ebx, [esi+eax+4]
shrd	ecx, ebx, 1Ch
shr	ebx, 1Ch
add	[_W+eax], ecx
adc	[_W+eax+4], ebx
inc	ix
add	eax, 8
mov	ecx, [esi+eax]
mov	ebx, [esi+eax+4]
shrd	ecx, ebx, 1Ch
shr	ebx, 1Ch
add	[_W+eax], ecx
adc	[_W+eax+4], ebx
inc	ix
add	eax, 8
mov	ecx, [esi+eax]
mov	ebx, [esi+eax+4]
shrd	ecx, ebx, 1Ch
shr	ebx, 1Ch
add	[_W+eax], ecx
adc	[_W+eax+4], ebx
inc	ix
add	eax, 8
mov	ecx, [esi+eax]
mov	ebx, [esi+eax+4]
shrd	ecx, ebx, 1Ch
shr	ebx, 1Ch
add	[_W+eax], ecx
adc	[_W+eax+4], ebx
inc	ix
add	eax, 8
mov	ecx, [esi+eax]
mov	ebx, [esi+eax+4]
shrd	ecx, ebx, 1Ch
shr	ebx, 1Ch
add	[_W+eax], ecx
adc	[_W+eax+4], ebx
inc	ix
add	eax, 8
mov	ecx, [esi+eax]
mov	ebx, [esi+eax+4]
shrd	ecx, ebx, 1Ch
shr	ebx, 1Ch
add	[_W+eax], ecx
adc	[_W+eax+4], ebx
inc	ix
add	eax, 8
cmp	ix, [esp+10h+arg_30]
jg	loc_6420FEB6
mov	[esp+10h+arg_24], edi
mov	ebx, ix
mov	edi, [esi+eax]
mov	ebp, [esi+eax+4]
shrd	edi, ebp, 1Ch
shr	ebp, 1Ch
add	[_W+eax], edi
adc	[_W+eax+4], ebp
lea	ecx, [eax+8]
mov	edi, [esi+ecx]
mov	ebp, [esi+ecx+4]
shrd	edi, ebp, 1Ch
shr	ebp, 1Ch
add	[_W+ecx], edi
adc	[_W+ecx+4], ebp
lea	ecx, [eax+10h]
mov	edi, [esi+ecx]
mov	ebp, [esi+ecx+4]
shrd	edi, ebp, 1Ch
shr	ebp, 1Ch
add	[_W+ecx], edi
adc	[_W+ecx+4], ebp
lea	ecx, [eax+18h]
mov	edi, [esi+ecx]
mov	ebp, [esi+ecx+4]
shrd	edi, ebp, 1Ch
shr	ebp, 1Ch
add	[_W+ecx], edi
adc	[_W+ecx+4], ebp
lea	ecx, [eax+20h]
mov	edi, [esi+ecx]
mov	ebp, [esi+ecx+4]
shrd	edi, ebp, 1Ch
shr	ebp, 1Ch
add	[_W+ecx], edi
adc	[_W+ecx+4], ebp
lea	ecx, [eax+28h]
mov	edi, [esi+ecx]
mov	ebp, [esi+ecx+4]
shrd	edi, ebp, 1Ch
shr	ebp, 1Ch
add	[_W+ecx], edi
adc	[_W+ecx+4], ebp
lea	ecx, [eax+30h]
mov	edi, [esi+ecx]
mov	ebp, [esi+ecx+4]
shrd	edi, ebp, 1Ch
shr	ebp, 1Ch
add	[_W+ecx], edi
adc	[_W+ecx+4], ebp
lea	ecx, [eax+38h]
mov	edi, [esi+ecx]
mov	ebp, [esi+ecx+4]
shrd	edi, ebp, 1Ch
shr	ebp, 1Ch
add	[_W+ecx], edi
adc	[_W+ecx+4], ebp
add	ix, 8
add	eax, 40h
cmp	ix, [esp+10h+arg_30]
jle	loc_6420FDE5
mov	edi, [esp+10h+arg_24]
			
xor	olduse,	olduse
test	edi, edi
js	loc_64210027
mov	ebp, [esp+10h+arg_3C]
lea	_W, [ebp+edi*8+0]
mov	ecx, edi
and	ecx, 7
mov	eax, [_W]
and	eax, 0FFFFFFFh
mov	esi, [esp+10h+arg_38]
mov	[esi], eax
mov	eax, 1
cmp	edi, 1
jl	loc_64210019
test	ecx, ecx
jz	loc_6420FF99
cmp	ecx, 1
jz	loc_6420FF7F
cmp	ecx, 2
jz	short loc_6420FF6E
cmp	ecx, 3
jz	short loc_6420FF5C
cmp	ecx, 4
jz	short loc_6420FF4B
cmp	ecx, 5
jz	short loc_6420FF39
cmp	ecx, 6
jz	short loc_6420FF28
mov	ecx, [_W+8]
and	ecx, 0FFFFFFFh
mov	ebp, [esp+10h+arg_38]
mov	[ebp+ix*4+0], ecx
mov	ix, 2
mov	esi, [_W+ix*8]
and	esi, 0FFFFFFFh
mov	ebx, [esp+10h+arg_38]
mov	[ebx+ix*4], esi
inc	ix
mov	ecx, [_W+ix*8]
and	ecx, 0FFFFFFFh
mov	ebp, [esp+10h+arg_38]
mov	[ebp+ix*4+0], ecx
inc	ix
mov	esi, [_W+ix*8]
and	esi, 0FFFFFFFh
mov	ebx, [esp+10h+arg_38]
mov	[ebx+ix*4], esi
inc	ix
mov	ecx, [_W+ix*8]
and	ecx, 0FFFFFFFh
mov	ebp, [esp+10h+arg_38]
mov	[ebp+ix*4+0], ecx
inc	ix
mov	ebx, [_W+ix*8]
and	ebx, 0FFFFFFFh
mov	esi, [esp+10h+arg_38]
mov	[esi+ix*4], ebx
inc	ix
mov	ecx, [_W+ix*8]
and	ecx, 0FFFFFFFh
mov	ebp, [esp+10h+arg_38]
mov	[ebp+ix*4+0], ecx
inc	ix
cmp	edi, ix
jl	loc_64210019
mov	ecx, [esp+10h+arg_38]
mov	ebx, [_W+ix*8]
and	ebx, 0FFFFFFFh
mov	[tmpx+ix*4], ebx
lea	esi, [ix+1]
mov	ebp, [_W+esi*8]
and	ebp, 0FFFFFFFh
mov	[tmpx+esi*4], ebp
lea	ebx, [ix+2]
mov	ebp, [_W+ix*8]
and	ebp, 0FFFFFFFh
mov	[tmpx+ix*4], ebp
lea	esi, [eax+3]
mov	ebx, [_W+ix*8]
and	ebx, 0FFFFFFFh
mov	[tmpx+ix*4], ebx
lea	ebp, [eax+4]
mov	ebx, [_W+ix*8]
and	ebx, 0FFFFFFFh
mov	[tmpx+ix*4], ebx
lea	esi, [eax+5]
mov	ebp, [_W+ix*8]
and	ebp, 0FFFFFFFh
mov	[tmpx+ix*4], ebp
lea	ebx, [eax+6]
mov	ebp, [_W+ix*8]
and	ebp, 0FFFFFFFh
mov	[tmpx+ix*4], ebp
lea	esi, [eax+7]
mov	ebx, [_W+ix*8]
and	ebx, 0FFFFFFFh
mov	[tmpx+ix*4], ebx
add	eax, 8
cmp	edi, ix
jge	short loc_6420FF9D
			
lea	ebx, [edi+1]
mov	_W, [esp+10h+arg_38]
lea	edi, [edx+ebx*4]
mov	[esp+10h+arg_38], edi
cmp	[esp+10h+arg_40], ebx
jle	loc_64210110
mov	tmpx, ix
not	ecx
add	ecx, [esp+10h+arg_40]
and	ecx, 7
mov	ebp, [esp+10h+arg_38]
mov	dword ptr [ebp+0], 0
mov	eax, ebp
add	tmpx, 4
lea	_W, [ix+1]
cmp	[esp+10h+arg_40], ix
jle	loc_64210110
test	ecx, ecx
jz	short loc_642100CD
cmp	ecx, 1
jz	short loc_642100BD
cmp	ecx, 2
jz	short loc_642100B3
cmp	ecx, 3
jz	short loc_642100A9
cmp	ecx, 4
jz	short loc_6421009F
cmp	ecx, 5
jz	short loc_64210095
cmp	ecx, 6
jz	short loc_6421008B
mov	dword ptr [tmpx], 0
mov	tmpx, [esp+10h+arg_38]
add	tmpx, 8
lea	ix, [ebx+2]
mov	dword ptr [tmpx], 0
add	tmpx, 4
inc	ix
mov	dword ptr [tmpx], 0
add	tmpx, 4
inc	ix
mov	dword ptr [tmpx], 0
add	tmpx, 4
inc	ix
mov	dword ptr [tmpx], 0
add	tmpx, 4
inc	ix
mov	dword ptr [tmpx], 0
add	tmpx, 4
inc	ix
mov	dword ptr [tmpx], 0
add	tmpx, 4
inc	ix
cmp	[esp+10h+arg_40], ix
jle	short loc_64210110
			
mov	dword ptr [tmpx], 0
mov	dword ptr [tmpx+4], 0
mov	dword ptr [tmpx+8], 0
mov	dword ptr [tmpx+0Ch], 0
mov	dword ptr [tmpx+10h], 0
mov	dword ptr [tmpx+14h], 0
mov	dword ptr [tmpx+18h], 0
mov	dword ptr [tmpx+1Ch], 0
add	tmpx, 20h
add	ix, 8
cmp	[esp+10h+arg_40], ix
jg	short loc_642100CD
			
mov	_W, [esp+10h+arg_34]
mov	tmpx, [esp+10h+arg_106C]
mov	[eax], edx
cmp	edx, 0
jle	loc_642109E2
mov	tmpx, [eax+0Ch]
mov	eax, edx
dec	eax
cmp	dword ptr [ecx+eax*4], 0
jnz	loc_642102AC
lea	edx, ds:0FFFFFFF8h[edx*4]
mov	ix, eax
and	ebx, 7
jz	loc_642101F1
mov	[esp+10h+arg_34], eax
mov	edi, [ecx+edx]
sub	edx, 4
test	edi, edi
jnz	loc_64210976
lea	eax, [eax-1]
cmp	ebx, 1
jz	loc_642101F1
cmp	ebx, 2
jz	short loc_642101DE
cmp	ebx, 3
jz	short loc_642101CB
cmp	ebx, 4
jz	short loc_642101B8
cmp	ebx, 5
jz	short loc_642101A5
cmp	ebx, 6
jz	short loc_64210192
mov	[esp+10h+arg_34], eax
mov	ebx, [ecx+edx]
sub	edx, 4
test	ebx, ebx
jnz	loc_64210976
dec	eax
mov	[esp+10h+arg_34], eax
mov	esi, [ecx+edx]
sub	edx, 4
test	esi, esi
jnz	loc_64210976
dec	eax
mov	[esp+10h+arg_34], eax
mov	edi, [ecx+edx]
sub	edx, 4
test	edi, edi
jnz	loc_64210976
dec	eax
mov	[esp+10h+arg_34], eax
mov	ebp, [ecx+edx]
sub	edx, 4
test	ebp, ebp
jnz	loc_64210976
dec	eax
mov	[esp+10h+arg_34], eax
mov	ebx, [ecx+edx]
sub	edx, 4
test	ebx, ebx
jnz	loc_64210976
dec	eax
mov	[esp+10h+arg_34], eax
mov	esi, [ecx+edx]
sub	edx, 4
test	esi, esi
jnz	loc_64210976
dec	eax
			
mov	edi, eax
mov	ebx, eax
test	eax, eax
jz	loc_6421028B
mov	ebp, [ecx+edx]
test	ebp, ebp
jnz	loc_64210972
lea	esi, [eax-1]
mov	eax, esi
lea	ebx, [edi-1]
cmp	dword ptr [ecx+edx-4], 0
jnz	loc_64210972
dec	eax
lea	ebx, [edi-2]
cmp	dword ptr [ecx+edx-8], 0
jnz	loc_64210972
lea	eax, [esi-2]
lea	ebx, [edi-3]
cmp	dword ptr [ecx+edx-0Ch], 0
jnz	loc_64210972
lea	eax, [esi-3]
lea	ebx, [edi-4]
cmp	dword ptr [ecx+edx-10h], 0
jnz	loc_64210972
lea	eax, [esi-4]
lea	ebx, [edi-5]
cmp	dword ptr [ecx+edx-14h], 0
jnz	loc_64210972
lea	eax, [esi-5]
lea	ebx, [edi-6]
cmp	dword ptr [ecx+edx-18h], 0
jnz	loc_64210972
lea	eax, [esi-6]
lea	ebx, [edi-7]
mov	edi, [ecx+edx-1Ch]
sub	edx, 20h
test	edi, edi
jnz	loc_64210972
lea	eax, [esi-7]
jmp	loc_642101F1
mov	ecx, [esp+10h+arg_106C]
mov	dword ptr [ecx], 0
mov	edi, [esp+10h+arg_106C]
mov	dword ptr [edi+8], 0
mov	eax, [edi]
mov	[esp+10h+arg_34], eax
			
mov	edx, [esp+10h+arg_1070]
mov	edi, [edx]
cmp	edi, [esp+10h+arg_34]
jge	loc_64210A5A
			
mov	esi, [esp+10h+arg_34]
mov	[esp+10h+arg_2C], esi
mov	ebp, [esp+10h+arg_106C]
cmp	[ebp+4], esi
jl	loc_64210AA5
mov	ebp, [esp+10h+arg_34]
mov	edx, [esp+10h+arg_106C]
mov	[edx], ebp
mov	edx, [edx+0Ch]
mov	eax, [esp+10h+arg_1070]
mov	ix, [eax+0Ch]
test	edi, edi
jle	loc_64210B30
lea	esi, [edi-1]
and	esi, 7
mov	eax, [edx]
sub	eax, [ebx]
mov	tmpx, eax
shr	ecx, 1Fh
and	eax, 0FFFFFFFh
mov	[edx], eax
mov	eax, 1
cmp	eax, edi
jz	loc_642104CB
test	esi, esi
jz	loc_642103F7
cmp	esi, 1
jz	loc_642103D8
cmp	esi, 2
jz	loc_642103C1
cmp	esi, 3
jz	short loc_642103AA
cmp	esi, 4
jz	short loc_64210393
cmp	esi, 5
jz	short loc_6421037C
cmp	esi, 6
jz	short loc_64210365
mov	esi, [edx+4]
sub	esi, [ebx+4]
sub	esi, ecx
mov	ecx, esi
shr	ecx, 1Fh
and	esi, 0FFFFFFFh
mov	[edx+eax*4], esi
mov	eax, 2
mov	ebp, [edx+eax*4]
sub	ebp, [ebx+eax*4]
sub	ebp, ecx
mov	ecx, ebp
shr	ecx, 1Fh
and	ebp, 0FFFFFFFh
mov	[edx+eax*4], ebp
inc	eax
mov	esi, [edx+eax*4]
sub	esi, [ebx+eax*4]
sub	esi, ecx
mov	ecx, esi
shr	ecx, 1Fh
and	esi, 0FFFFFFFh
mov	[edx+eax*4], esi
inc	eax
mov	ebp, [edx+eax*4]
sub	ebp, [ebx+eax*4]
sub	ebp, ecx
mov	ecx, ebp
shr	ecx, 1Fh
and	ebp, 0FFFFFFFh
mov	[edx+eax*4], ebp
inc	eax
mov	esi, [edx+eax*4]
sub	esi, [ebx+eax*4]
sub	esi, ecx
mov	ecx, esi
shr	ecx, 1Fh
and	esi, 0FFFFFFFh
mov	[edx+eax*4], esi
inc	eax
mov	ebp, [edx+eax*4]
sub	ebp, [ebx+eax*4]
sub	ebp, ecx
mov	ecx, ebp
shr	ecx, 1Fh
and	ebp, 0FFFFFFFh
mov	[edx+eax*4], ebp
inc	eax
mov	esi, [edx+eax*4]
sub	esi, [ebx+eax*4]
sub	esi, ecx
mov	ecx, esi
shr	ecx, 1Fh
and	esi, 0FFFFFFFh
mov	[edx+eax*4], esi
inc	eax
cmp	eax, edi
jz	loc_642104CB
mov	ebp, ecx
mov	ecx, [edx+eax*4]
sub	ecx, [ebx+eax*4]
sub	ecx, ebp
mov	ebp, ecx
shr	ebp, 1Fh
and	ecx, 0FFFFFFFh
mov	[edx+eax*4], ecx
lea	esi, [eax+1]
mov	ecx, [edx+esi*4]
sub	ecx, [ebx+esi*4]
sub	ecx, ebp
mov	ebp, ecx
shr	ebp, 1Fh
and	ecx, 0FFFFFFFh
mov	[edx+esi*4], ecx
lea	esi, [eax+2]
mov	ecx, [edx+esi*4]
sub	ecx, [ebx+esi*4]
sub	ecx, ebp
mov	ebp, ecx
shr	ebp, 1Fh
and	ecx, 0FFFFFFFh
mov	[edx+esi*4], ecx
lea	esi, [eax+3]
mov	ecx, [edx+esi*4]
sub	ecx, [ebx+esi*4]
sub	ecx, ebp
mov	ebp, ecx
shr	ebp, 1Fh
and	ecx, 0FFFFFFFh
mov	[edx+esi*4], ecx
lea	esi, [eax+4]
mov	ecx, [edx+esi*4]
sub	ecx, [ebx+esi*4]
sub	ecx, ebp
mov	ebp, ecx
shr	ebp, 1Fh
and	ecx, 0FFFFFFFh
mov	[edx+esi*4], ecx
lea	esi, [eax+5]
mov	ecx, [edx+esi*4]
sub	ecx, [ebx+esi*4]
sub	ecx, ebp
mov	ebp, ecx
shr	ebp, 1Fh
and	ecx, 0FFFFFFFh
mov	[edx+esi*4], ecx
lea	esi, [eax+6]
mov	ecx, [edx+esi*4]
sub	ecx, [ebx+esi*4]
sub	ecx, ebp
mov	ebp, ecx
shr	ebp, 1Fh
and	ecx, 0FFFFFFFh
mov	[edx+esi*4], ecx
lea	ecx, [eax+7]
mov	esi, [edx+ecx*4]
sub	esi, [ebx+ecx*4]
sub	esi, ebp
mov	ebp, esi
shr	ebp, 1Fh
and	esi, 0FFFFFFFh
mov	[edx+ecx*4], esi
add	eax, 8
cmp	eax, edi
jnz	loc_642103F9
mov	ecx, ebp
			
lea	edi, [edx+eax*4]
mov	ebx, edi
cmp	eax, [esp+10h+arg_34]
jge	loc_64210745
mov	ebp, eax
not	ebp
add	ebp, [esp+10h+arg_34]
and	ebp, 7
mov	esi, [edi]
sub	esi, ecx
mov	ecx, esi
shr	ecx, 1Fh
mov	[esp+10h+arg_30], ecx
and	esi, 0FFFFFFFh
mov	[ebx], esi
lea	esi, [eax+1]
mov	ecx, 4
cmp	esi, [esp+10h+arg_34]
jge	loc_6421073C
test	ebp, ebp
jz	loc_6421066F
cmp	ebp, 1
jz	loc_6421063A
cmp	ebp, 2
jz	loc_6421060F
cmp	ebp, 3
jz	loc_642105E4
cmp	ebp, 4
jz	loc_642105B9
cmp	ebp, 5
jz	short loc_6421058E
cmp	ebp, 6
jz	short loc_64210563
mov	ecx, [edi+4]
sub	ecx, [esp+10h+arg_30]
mov	esi, ecx
shr	esi, 1Fh
mov	[esp+10h+arg_30], esi
and	ecx, 0FFFFFFFh
mov	[ebx+4], ecx
lea	esi, [eax+2]
mov	ecx, 8
mov	ebp, [edi+ecx]
mov	[esp+10h+arg_24], ebp
mov	ebp, [esp+10h+arg_30]
sub	[esp+10h+arg_24], ebp
mov	ebp, [esp+10h+arg_24]
shr	ebp, 1Fh
mov	[esp+10h+arg_30], ebp
mov	ebp, [esp+10h+arg_24]
and	ebp, 0FFFFFFFh
mov	[ebx+ecx], ebp
inc	esi
add	ecx, 4
mov	ebp, [edi+ecx]
mov	[esp+10h+arg_24], ebp
mov	ebp, [esp+10h+arg_30]
sub	[esp+10h+arg_24], ebp
mov	ebp, [esp+10h+arg_24]
shr	ebp, 1Fh
mov	[esp+10h+arg_30], ebp
mov	ebp, [esp+10h+arg_24]
and	ebp, 0FFFFFFFh
mov	[ebx+ecx], ebp
inc	esi
add	ecx, 4
mov	ebp, [edi+ecx]
mov	[esp+10h+arg_24], ebp
mov	ebp, [esp+10h+arg_30]
sub	[esp+10h+arg_24], ebp
mov	ebp, [esp+10h+arg_24]
shr	ebp, 1Fh
mov	[esp+10h+arg_30], ebp
mov	ebp, [esp+10h+arg_24]
and	ebp, 0FFFFFFFh
mov	[ebx+ecx], ebp
inc	esi
add	ecx, 4
mov	ebp, [edi+ecx]
mov	[esp+10h+arg_24], ebp
mov	ebp, [esp+10h+arg_30]
sub	[esp+10h+arg_24], ebp
mov	ebp, [esp+10h+arg_24]
shr	ebp, 1Fh
mov	[esp+10h+arg_30], ebp
mov	ebp, [esp+10h+arg_24]
and	ebp, 0FFFFFFFh
mov	[ebx+ecx], ebp
inc	esi
add	ecx, 4
mov	ebp, [edi+ecx]
mov	[esp+10h+arg_24], ebp
mov	ebp, [esp+10h+arg_30]
sub	[esp+10h+arg_24], ebp
mov	ebp, [esp+10h+arg_24]
shr	ebp, 1Fh
mov	[esp+10h+arg_30], ebp
mov	ebp, [esp+10h+arg_24]
and	ebp, 0FFFFFFFh
mov	[ebx+ecx], ebp
inc	esi
add	ecx, 4
mov	ebp, [edi+ecx]
mov	[esp+10h+arg_24], ebp
mov	ebp, [esp+10h+arg_30]
sub	[esp+10h+arg_24], ebp
mov	ebp, [esp+10h+arg_24]
shr	ebp, 1Fh
mov	[esp+10h+arg_30], ebp
mov	ebp, [esp+10h+arg_24]
and	ebp, 0FFFFFFFh
mov	[ebx+ecx], ebp
inc	esi
add	ecx, 4
cmp	esi, [esp+10h+arg_34]
jge	loc_6421073C
mov	[esp+10h+arg_38], eax
mov	ebp, [esp+10h+arg_30]
mov	eax, [edi+ecx]
sub	eax, ebp
mov	[esp+10h+arg_24], eax
shr	eax, 1Fh
mov	ebp, [esp+10h+arg_24]
and	ebp, 0FFFFFFFh
mov	[ebx+ecx], ebp
mov	ebp, [edi+ecx+4]
sub	ebp, eax
mov	eax, ebp
shr	eax, 1Fh
and	ebp, 0FFFFFFFh
mov	[ebx+ecx+4], ebp
mov	ebp, [edi+ecx+8]
sub	ebp, eax
mov	eax, ebp
shr	eax, 1Fh
and	ebp, 0FFFFFFFh
mov	[ebx+ecx+8], ebp
mov	ebp, [edi+ecx+0Ch]
sub	ebp, eax
mov	eax, ebp
shr	eax, 1Fh
and	ebp, 0FFFFFFFh
mov	[ebx+ecx+0Ch], ebp
mov	ebp, [edi+ecx+10h]
sub	ebp, eax
mov	eax, ebp
shr	eax, 1Fh
and	ebp, 0FFFFFFFh
mov	[ebx+ecx+10h], ebp
mov	ebp, [edi+ecx+14h]
sub	ebp, eax
mov	eax, ebp
shr	eax, 1Fh
and	ebp, 0FFFFFFFh
mov	[ebx+ecx+14h], ebp
mov	ebp, [edi+ecx+18h]
sub	ebp, eax
mov	eax, ebp
shr	eax, 1Fh
and	ebp, 0FFFFFFFh
mov	[ebx+ecx+18h], ebp
mov	ebp, [edi+ecx+1Ch]
sub	ebp, eax
mov	[esp+10h+arg_24], ebp
shr	ebp, 1Fh
mov	eax, [esp+10h+arg_24]
and	eax, 0FFFFFFFh
mov	[ebx+ecx+1Ch], eax
add	esi, 8
add	ecx, 20h
cmp	esi, [esp+10h+arg_34]
jl	loc_64210677
mov	eax, [esp+10h+arg_38]
			
mov	esi, [esp+10h+arg_34]
sub	esi, eax
lea	ebx, [ebx+esi*4]
mov	esi, [esp+10h+arg_34]
cmp	[esp+10h+arg_2C], esi
jle	loc_6421082B
not	esi
add	esi, [esp+10h+arg_2C]
and	esi, 7
mov	dword ptr [ebx], 0
lea	eax, [ebx+4]
mov	ecx, [esp+10h+arg_34]
inc	ecx
cmp	[esp+10h+arg_2C], ecx
jle	loc_6421082B
test	esi, esi
jz	short loc_642107E8
cmp	esi, 1
jz	short loc_642107D8
cmp	esi, 2
jz	short loc_642107CE
cmp	esi, 3
jz	short loc_642107C4
cmp	esi, 4
jz	short loc_642107BA
cmp	esi, 5
jz	short loc_642107B0
cmp	esi, 6
jz	short loc_642107A6
mov	dword ptr [eax], 0
lea	eax, [ebx+8]
mov	ecx, [esp+10h+arg_34]
add	ecx, 2
mov	dword ptr [eax], 0
add	eax, 4
inc	ecx
mov	dword ptr [eax], 0
add	eax, 4
inc	ecx
mov	dword ptr [eax], 0
add	eax, 4
inc	ecx
mov	dword ptr [eax], 0
add	eax, 4
inc	ecx
mov	dword ptr [eax], 0
add	eax, 4
inc	ecx
mov	dword ptr [eax], 0
add	eax, 4
inc	ecx
cmp	[esp+10h+arg_2C], ecx
jle	short loc_6421082B
			
mov	dword ptr [eax], 0
mov	dword ptr [eax+4], 0
mov	dword ptr [eax+8], 0
mov	dword ptr [eax+0Ch], 0
mov	dword ptr [eax+10h], 0
mov	dword ptr [eax+14h], 0
mov	dword ptr [eax+18h], 0
mov	dword ptr [eax+1Ch], 0
add	eax, 20h
add	ecx, 8
cmp	[esp+10h+arg_2C], ecx
jg	short loc_642107E8
			
cmp	[esp+10h+arg_34], 0
jle	loc_642109AB
mov	eax, [esp+10h+arg_34]
dec	eax
cmp	dword ptr [edx+eax*4], 0
jnz	loc_64210965
mov	ebx, [esp+10h+arg_34]
lea	ecx, ds:0FFFFFFF8h[ebx*4]
mov	ebx, eax
and	ebx, 7
jz	loc_642108F0
mov	[esp+10h+arg_34], eax
test	eax, eax
jle	loc_642109A2
mov	ebp, [edx+ecx]
sub	ecx, 4
test	ebp, ebp
jnz	loc_642109C4
lea	eax, [eax-1]
cmp	ebx, 1
jz	short loc_642108F0
cmp	ebx, 2
jz	short loc_642108E1
cmp	ebx, 3
jz	short loc_642108D2
cmp	ebx, 4
jz	short loc_642108C3
cmp	ebx, 5
jz	short loc_642108B4
cmp	ebx, 6
jz	short loc_642108A5
mov	esi, [edx+ecx]
sub	ecx, 4
test	esi, esi
jnz	loc_642109C4
dec	eax
mov	ebx, [edx+ecx]
sub	ecx, 4
test	ebx, ebx
jnz	loc_642109C4
dec	eax
mov	ebp, [edx+ecx]
sub	ecx, 4
test	ebp, ebp
jnz	loc_642109C4
dec	eax
mov	edi, [edx+ecx]
sub	ecx, 4
test	edi, edi
jnz	loc_642109C4
dec	eax
mov	esi, [edx+ecx]
sub	ecx, 4
test	esi, esi
jnz	loc_642109C4
dec	eax
mov	ebx, [edx+ecx]
sub	ecx, 4
test	ebx, ebx
jnz	loc_642109C4
dec	eax
			
mov	[esp+10h+arg_34], eax
test	eax, eax
jle	loc_642109A2
cmp	dword ptr [edx+ecx], 0
jnz	loc_642109C4
lea	ebx, [eax-1]
mov	eax, ebx
cmp	dword ptr [edx+ecx-4], 0
jnz	loc_642109C4
dec	eax
cmp	dword ptr [edx+ecx-8], 0
jnz	loc_642109C4
lea	eax, [ebx-2]
cmp	dword ptr [edx+ecx-0Ch], 0
jnz	loc_642109C4
lea	eax, [ebx-3]
cmp	dword ptr [edx+ecx-10h], 0
jnz	loc_642109C4
lea	eax, [ebx-4]
cmp	dword ptr [edx+ecx-14h], 0
jnz	short loc_642109C4
lea	eax, [ebx-5]
cmp	dword ptr [edx+ecx-18h], 0
jnz	short loc_642109C4
lea	eax, [ebx-6]
mov	ebp, [edx+ecx-1Ch]
sub	ecx, 20h
test	ebp, ebp
jnz	short loc_642109C4
lea	eax, [ebx-7]
jmp	short loc_642108F0
			
xor	eax, eax
			
add	esp, 106Ch
pop	ix
pop	esi
pop	edi
pop	ebp
retn
			
mov	[esp+10h+arg_34], ebx
			
mov	ebx, [esp+10h+arg_106C]
mov	[ebx], eax
jmp	loc_642102AC
lea	edx, [edi+1]
mov	[esp+10h+arg_34], edx
cmp	eax, edx
jl	short loc_642109ED
mov	eax, [esp+10h+arg_106C]
mov	ecx, [eax+0Ch]
mov	[esp+10h+arg_38], ecx
jmp	loc_6420F72E
			
mov	edx, [esp+10h+arg_106C]
mov	[edx], eax
cmp	[esp+10h+arg_34], 0
jnz	short loc_64210965
mov	eax, [esp+10h+arg_106C]
mov	dword ptr [eax+8], 0
xor	eax, eax
jmp	short loc_64210967
			
mov	ecx, [esp+10h+arg_106C]
mov	[ecx], eax
xor	eax, eax
jmp	short loc_64210967
lea	ebp, [esp+10h+arg_4C]
mov	[esp+10h+arg_3C], ebp
mov	eax, ebp
xor	esi, esi
jmp	loc_6420F8A3
jnz	loc_642102AC
jmp	loc_64210298
add	edi, 41h
mov	ebp, 20h
mov	eax, [esp+10h+arg_34]
cdq
idiv	ebp
sub	edi, edx
lea	esi, ds:0[edi*4]
mov	[esp+10h+var_C], esi 
mov	olduse,	[esp+10h+arg_106C]
mov	ebp, [ebx+0Ch]
mov	[esp+10h+var_10], ebp 
call	_realloc
mov	[esp+10h+arg_38], eax
mov	eax, 0FFFFFFFEh
cmp	[esp+10h+arg_38], 0
jz	loc_64210967
mov	ebx, [esp+10h+arg_38]
mov	esi, [esp+10h+arg_106C]
mov	[esi+0Ch], ebx
mov	edx, [esi+4]
mov	[esi+4], edi
lea	res, [ebx+edx*4]
cmp	edi, edx
jle	loc_64210B00
mov	dword ptr [eax], 0
inc	edx
add	eax, 4
jmp	short loc_64210A46
jg	loc_64210965
mov	ebp, [esp+10h+arg_34]
lea	esi, ds:0FFFFFFFCh[ebp*4]
mov	ebp, esi
mov	tmpx, [esp+10h+arg_106C]
add	ebp, [ecx+0Ch]
add	esi, [edx+0Ch]
xor	eax, eax
xor	edx, edx
cmp	edx, [esp+10h+arg_34]
jge	loc_642102BF
mov	ix, [ebp+eax+0]
mov	ecx, [esi+eax]
cmp	ebx, ecx
ja	loc_642102BF
sub	eax, 4
cmp	ebx, ecx
jb	loc_64210965
inc	edx
jmp	short loc_64210A7E
mov	ix, esi
add	ebx, 40h
mov	edx, 20h
mov	eax, esi
mov	tmpx, edx
cdq
idiv	ecx
sub	ebx, edx
lea	eax, ds:0[ebx*4]
mov	[esp+10h+var_C], eax 
mov	edx, [ebp+0Ch]
mov	[esp+10h+var_10], edx 
call	_realloc
mov	edx, eax
mov	eax, 0FFFFFFFEh
test	edx, edx
jz	loc_64210967
mov	ebp, [esp+10h+arg_106C]
mov	[ebp+0Ch], edx
mov	res, [ebp+4]
mov	[ebp+4], ebx
lea	edx, [edx+eax*4]
cmp	ebx, eax
jle	short loc_64210B1E
mov	dword ptr [edx], 0
inc	eax
add	edx, 4
jmp	short loc_64210AF0
mov	ecx, [esp+10h+arg_1070]
mov	edi, [ecx]
lea	eax, [edi+1]
mov	[esp+10h+arg_34], eax
mov	edx, [esp+10h+arg_106C]
mov	ebx, [edx]
jmp	loc_6420F72E
mov	esi, [esp+10h+arg_106C]
mov	ebx, [esi]
mov	[esp+10h+arg_2C], ebx
jmp	loc_642102D7
mov	ebx, edx
mov	edi, edx
xor	eax, eax
xor	tmpx, tmpx
jmp	loc_642104D0
mov	_W, 8
mov	[esp+10h+arg_2C], 1
mov	esi, [esp+10h+arg_3C]
jmp	loc_6420FC9C
align 4
public _tma_mp_mul_2d
			
push	ebp
push	edi
push	esi
push	ebx
sub	esp, 4Ch
mov	edi, [esp+5Ch+a]
mov	esi, [esp+5Ch+c]
cmp	edi, esi
jz	loc_642110FC
mov	ebx, [a_0]
cmp	[c_0+4], ebx
jl	loc_64211350
mov	ecx, [a_0+0Ch]
mov	ebp, [c_0+0Ch]
mov	edx, ebp
test	ebx, ebx
jle	loc_6421136C
lea	ebp, [ebx-1]
and	ebp, 7
mov	res, [ecx]
mov	[edx], eax
mov	eax, 1
cmp	eax, ebx
jz	loc_64210C4C
test	ebp, ebp
jz	short loc_64210BF8
cmp	ebp, 1
jz	short loc_64210BED
cmp	ebp, 2
jz	short loc_64210BE6
cmp	ebp, 3
jz	short loc_64210BDF
cmp	ebp, 4
jz	short loc_64210BD8
cmp	ebp, 5
jz	short loc_64210BD1
cmp	ebp, 6
jz	short loc_64210BCA
mov	ebp, [ecx+4]
mov	[edx+eax*4], ebp
mov	eax, 2
mov	ebp, [ecx+eax*4]
mov	[edx+eax*4], ebp
inc	eax
mov	ebp, [ecx+eax*4]
mov	[edx+eax*4], ebp
inc	eax
mov	ebp, [ecx+eax*4]
mov	[edx+eax*4], ebp
inc	eax
mov	ebp, [ecx+eax*4]
mov	[edx+eax*4], ebp
inc	eax
mov	ebp, [ecx+eax*4]
mov	[edx+eax*4], ebp
inc	eax
mov	ebp, [ecx+eax*4]
mov	[edx+eax*4], ebp
inc	eax
cmp	eax, ebx
jz	short loc_64210C4C
mov	[esp+5Ch+var_2C], a_0
mov	a_0, [ecx+eax*4]
mov	[edx+eax*4], edi
lea	edi, [eax+1]
mov	ebp, [ecx+edi*4]
mov	[edx+edi*4], ebp
lea	edi, [eax+2]
mov	ebp, [ecx+edi*4]
mov	[edx+edi*4], ebp
lea	edi, [eax+3]
mov	ebp, [ecx+edi*4]
mov	[edx+edi*4], ebp
lea	edi, [eax+4]
mov	ebp, [ecx+edi*4]
mov	[edx+edi*4], ebp
lea	edi, [eax+5]
mov	ebp, [ecx+edi*4]
mov	[edx+edi*4], ebp
lea	edi, [eax+6]
mov	ebp, [ecx+edi*4]
mov	[edx+edi*4], ebp
lea	edi, [eax+7]
mov	ebp, [ecx+edi*4]
mov	[edx+edi*4], ebp
add	eax, 8
cmp	eax, ebx
jnz	short loc_64210BFC
mov	edi, [esp+5Ch+var_2C]
			
lea	ebp, [edx+eax*4]
mov	edx, [c_0]
mov	[esp+5Ch+var_28], edx
cmp	eax, edx
jge	loc_64210D45
mov	ecx, eax
not	ecx
add	ecx, [esp+5Ch+var_28]
and	ecx, 7
mov	[esp+5Ch+var_2C], ecx
mov	dword ptr [ebp+0], 0
lea	edx, [ebp+4]
lea	ecx, [eax+1]
cmp	ecx, [esp+5Ch+var_28]
jge	loc_64210D45
cmp	[esp+5Ch+var_2C], 0
jz	short loc_64210D02
cmp	[esp+5Ch+var_2C], 1
jz	short loc_64210CF2
cmp	[esp+5Ch+var_2C], 2
jz	short loc_64210CE8
cmp	[esp+5Ch+var_2C], 3
jz	short loc_64210CDE
cmp	[esp+5Ch+var_2C], 4
jz	short loc_64210CD4
cmp	[esp+5Ch+var_2C], 5
jz	short loc_64210CCA
cmp	[esp+5Ch+var_2C], 6
jz	short loc_64210CC0
mov	dword ptr [edx], 0
lea	edx, [ebp+8]
lea	ecx, [eax+2]
mov	dword ptr [edx], 0
add	edx, 4
inc	ecx
mov	dword ptr [edx], 0
add	edx, 4
inc	ecx
mov	dword ptr [edx], 0
add	edx, 4
inc	ecx
mov	dword ptr [edx], 0
add	edx, 4
inc	ecx
mov	dword ptr [edx], 0
add	edx, 4
inc	ecx
mov	dword ptr [edx], 0
add	edx, 4
inc	ecx
cmp	ecx, [esp+5Ch+var_28]
jge	short loc_64210D45
			
mov	dword ptr [edx], 0
mov	dword ptr [edx+4], 0
mov	dword ptr [edx+8], 0
mov	dword ptr [edx+0Ch], 0
mov	dword ptr [edx+10h], 0
mov	dword ptr [edx+14h], 0
mov	dword ptr [edx+18h], 0
mov	dword ptr [edx+1Ch], 0
add	edx, 20h
add	ecx, 8
cmp	ecx, [esp+5Ch+var_28]
jl	short loc_64210D02
			
mov	[c_0], ebx
mov	eax, [a_0+8]
mov	[c_0+8], eax
mov	eax, 92492493h
imul	[esp+5Ch+b]
mov	a_0, [esp+5Ch+b]
add	edi, edx
sar	edi, 4
mov	ebp, [esp+5Ch+b]
sar	ebp, 1Fh
sub	edi, ebp
lea	ecx, [ebx+edi]
mov	edx, [c_0+4]
cmp	ecx, edx
jge	loc_64211110
cmp	[esp+5Ch+b], 1Bh
jg	loc_64211128
			
mov	ebp, 1Ch
mov	eax, [esp+5Ch+b]
cdq
idiv	ebp
test	edx, edx
jnz	loc_64210F0C
test	ebx, ebx
jle	loc_64210EF1
mov	eax, [c_0+0Ch]
			
lea	ecx, [ebx-1]
mov	edx, [eax+ecx*4]
test	edx, edx
jnz	loc_642114B0
lea	edx, ds:0FFFFFFF8h[ebx*4]
mov	edi, ecx
and	edi, 7
jz	loc_64210E53
mov	ebx, ecx
test	ecx, ecx
jle	loc_64210EEF
mov	ebp, [eax+edx]
sub	edx, 4
test	ebp, ebp
jnz	loc_64211104
lea	ecx, [ecx-1]
cmp	edi, 1
jz	short loc_64210E53
cmp	edi, 2
jz	short loc_64210E44
cmp	edi, 3
jz	short loc_64210E35
cmp	edi, 4
jz	short loc_64210E26
cmp	edi, 5
jz	short loc_64210E17
cmp	edi, 6
jz	short loc_64210E08
mov	ebx, [eax+edx]
sub	edx, 4
test	ebx, ebx
jnz	loc_64211104
dec	ecx
mov	edi, [eax+edx]
sub	edx, 4
test	edi, edi
jnz	loc_64211104
dec	ecx
mov	ebp, [eax+edx]
sub	edx, 4
test	ebp, ebp
jnz	loc_64211104
dec	ecx
mov	ebx, [eax+edx]
sub	edx, 4
test	ebx, ebx
jnz	loc_64211104
dec	ecx
mov	edi, [eax+edx]
sub	edx, 4
test	edi, edi
jnz	loc_64211104
dec	ecx
mov	ebp, [eax+edx]
sub	edx, 4
test	ebp, ebp
jnz	loc_64211104
dec	ecx
			
mov	ebx, ecx
test	ecx, ecx
jle	loc_64210EEF
lea	edi, [edx-4]
mov	ebx, [eax+edx]
test	ebx, ebx
jnz	loc_64211104
lea	ebx, [ecx-1]
mov	ecx, ebx
lea	ebp, [edx-8]
mov	edi, [eax+edi]
test	edi, edi
jnz	loc_64211104
dec	ecx
lea	edi, [edx-0Ch]
mov	ebp, [eax+ebp]
test	ebp, ebp
jnz	loc_64211104
lea	ecx, [ebx-2]
lea	ebp, [edx-10h]
mov	edi, [eax+edi]
test	edi, edi
jnz	loc_64211104
lea	ecx, [ebx-3]
lea	edi, [edx-14h]
mov	ebp, [eax+ebp]
test	ebp, ebp
jnz	loc_64211104
lea	ecx, [ebx-4]
lea	ebp, [edx-18h]
mov	edi, [eax+edi]
test	edi, edi
jnz	loc_64211104
lea	ecx, [ebx-5]
lea	edi, [edx-1Ch]
mov	ebp, [eax+ebp]
test	ebp, ebp
jnz	loc_64211104
lea	ecx, [ebx-6]
sub	edx, 20h
mov	edi, [eax+edi]
test	edi, edi
jnz	loc_64211104
lea	ecx, [ebx-7]
mov	ebx, ecx
test	ecx, ecx
jg	loc_64210E5D
			
mov	[c_0], ecx
			
test	ebx, ebx
jnz	loc_642114B0
mov	dword ptr [c_0+8], 0
xor	eax, eax
			
add	esp, 4Ch
pop	ebx
pop	c_0
pop	edi
pop	ebp
retn
align 4
mov	edi, 1
mov	cl, dl
shl	edi, cl
dec	edi
mov	[esp+5Ch+var_2C], edi
mov	eax, [c_0+0Ch]
test	ebx, ebx
jle	short loc_64210EF1
sub	ebp, edx
mov	[esp+5Ch+var_20], ebp
lea	ebp, [ebx-1]
and	ebp, 3
mov	[esp+5Ch+var_24], ebp
mov	ebp, [eax]
mov	edi, ebp
mov	cl, byte ptr [esp+5Ch+var_20]
shr	edi, cl
mov	ecx, [esp+5Ch+var_2C]
and	edi, ecx
mov	[esp+5Ch+var_30], edi
mov	edi, ebp
mov	cl, dl
shl	edi, cl
and	edi, 0FFFFFFFh
mov	[eax], edi
mov	edi, 1
mov	ebp, [esp+5Ch+var_30]
mov	[esp+5Ch+var_28], ebp
cmp	x, ebx
jz	loc_642110E1
mov	ecx, [esp+5Ch+var_24]
test	ecx, ecx
jz	loc_64211374
cmp	[esp+5Ch+var_24], 1
jz	short loc_64210FE2
cmp	[esp+5Ch+var_24], 2
jz	short loc_64210FB4
mov	ebp, [eax+4]
mov	cl, byte ptr [esp+5Ch+var_20]
shr	ebp, cl
mov	[esp+5Ch+var_24], ebp
mov	ebp, [eax+4]
mov	cl, dl
shl	ebp, cl
or	ebp, [esp+5Ch+var_28]
and	ebp, 0FFFFFFFh
mov	[eax+x*4], ebp
mov	x, 2
mov	ebp, [esp+5Ch+var_24]
and	ebp, [esp+5Ch+var_2C]
mov	[esp+5Ch+var_28], ebp
mov	ebp, [eax+x*4]
mov	cl, byte ptr [esp+5Ch+var_20]
shr	ebp, cl
mov	[esp+5Ch+var_24], ebp
mov	ebp, [eax+x*4]
mov	cl, dl
shl	ebp, cl
or	ebp, [esp+5Ch+var_28]
and	ebp, 0FFFFFFFh
mov	[eax+x*4], ebp
inc	x
mov	ebp, [esp+5Ch+var_24]
and	ebp, [esp+5Ch+var_2C]
mov	[esp+5Ch+var_28], ebp
mov	ebp, [eax+x*4]
mov	cl, byte ptr [esp+5Ch+var_20]
shr	ebp, cl
mov	ecx, [esp+5Ch+var_2C]
and	ebp, ecx
mov	[esp+5Ch+var_30], ebp
mov	ebp, [eax+x*4]
mov	cl, dl
shl	ebp, cl
or	ebp, [esp+5Ch+var_28]
and	ebp, 0FFFFFFFh
mov	[eax+x*4], ebp
inc	x
cmp	x, ebx
jz	loc_642110E1
mov	ebp, [esp+5Ch+var_20]
mov	[esp+5Ch+var_28], ebp
mov	[esp+5Ch+var_24], ebx
mov	[esp+5Ch+var_20], c_0
mov	ebp, edx
			
mov	c_0, [eax+x*4]
mov	edx, esi
mov	cl, byte ptr [esp+5Ch+var_28]
shr	edx, cl
and	edx, [esp+5Ch+var_2C]
mov	ecx, ebp
shl	esi, cl
or	esi, [esp+5Ch+var_30]
and	esi, 0FFFFFFFh
mov	[eax+x*4], esi
lea	ebx, [x+1]
mov	[esp+5Ch+var_40], ebx
mov	ecx, [eax+ebx*4]
mov	[esp+5Ch+var_44], ecx
mov	ebx, ecx
mov	cl, byte ptr [esp+5Ch+var_28]
shr	ebx, cl
and	ebx, [esp+5Ch+var_2C]
mov	esi, [esp+5Ch+var_44]
mov	ecx, ebp
shl	esi, cl
or	edx, esi
and	edx, 0FFFFFFFh
mov	ecx, [esp+5Ch+var_40]
mov	[eax+ecx*4], edx
lea	esi, [x+2]
mov	[esp+5Ch+var_40], esi
mov	edx, [eax+esi*4]
mov	[esp+5Ch+var_48], edx
mov	cl, byte ptr [esp+5Ch+var_28]
shr	edx, cl
and	edx, [esp+5Ch+var_2C]
mov	esi, [esp+5Ch+var_48]
mov	ecx, ebp
shl	esi, cl
or	ebx, esi
and	ebx, 0FFFFFFFh
mov	esi, [esp+5Ch+var_40]
mov	[eax+esi*4], ebx
lea	ebx, [x+3]
mov	esi, [eax+x*4]
mov	cl, byte ptr [esp+5Ch+var_28]
shr	esi, cl
mov	ecx, [esp+5Ch+var_2C]
and	esi, ecx
mov	[esp+5Ch+var_30], esi
mov	esi, [eax+x*4]
mov	ecx, ebp
shl	esi, cl
or	edx, esi
and	edx, 0FFFFFFFh
mov	[eax+x*4], edx
add	edi, 4
cmp	x, [esp+5Ch+var_24]
jnz	loc_64211024
mov	ebx, [esp+5Ch+var_24]
mov	esi, [esp+5Ch+var_20]
			
mov	x, [esp+5Ch+var_30]
test	edi, edi
jz	loc_64210DA0
mov	ebp, [esp+5Ch+var_30]
mov	[eax+ebx*4], ebp
inc	ebx
mov	[c_0], ebx
jmp	loc_64210DA0
mov	ebx, [c_0]
jmp	loc_64210D4D
align 4
			
mov	[c_0], ecx
xor	eax, eax
add	esp, 4Ch
pop	ebx
pop	c_0
pop	edi
pop	ebp
retn
lea	eax, [ecx+1]
cmp	edx, eax
jl	loc_6421138B
			
mov	ebx, [c_0]
cmp	[esp+5Ch+b], 1Bh
jle	loc_64210D81
test	edi, edi
jle	loc_64211348
add	ebx, edi
mov	[esp+5Ch+var_2C], ebx
cmp	[c_0+4], ebx
jl	loc_642114B7
mov	eax, [esp+5Ch+var_2C]
mov	[c_0], eax
mov	edx, [c_0+0Ch]
dec	eax
cmp	edi, eax
jg	loc_64211286
lea	ebx, [edx+eax*4]
mov	ecx, edi
not	ecx
add	ecx, [esp+5Ch+var_2C]
lea	ebp, [edx+ecx*4]
mov	ecx, eax
sub	ecx, edi
and	ecx, 7
mov	eax, [ebp+0]
mov	[ebx], eax
mov	eax, [esp+5Ch+var_2C]
sub	eax, 2
mov	[esp+5Ch+var_30], eax
mov	eax, 0FFFFFFFCh
cmp	edi, [esp+5Ch+var_30]
jg	loc_64211286
test	ecx, ecx
jz	loc_6421121B
cmp	ecx, 1
jz	short loc_64211207
cmp	ecx, 2
jz	short loc_642111F9
cmp	ecx, 3
jz	short loc_642111EB
cmp	ecx, 4
jz	short loc_642111DD
cmp	ecx, 5
jz	short loc_642111CF
cmp	ecx, 6
jz	short loc_642111C1
mov	ecx, [ebp-4]
mov	[ebx-4], ecx
mov	eax, [esp+5Ch+var_2C]
sub	eax, 3
mov	[esp+5Ch+var_30], eax
mov	eax, 0FFFFFFF8h
mov	ecx, [ebp+eax+0]
mov	[ebx+eax], ecx
dec	[esp+5Ch+var_30]
sub	eax, 4
mov	ecx, [ebp+eax+0]
mov	[ebx+eax], ecx
dec	[esp+5Ch+var_30]
sub	eax, 4
mov	ecx, [ebp+eax+0]
mov	[ebx+eax], ecx
dec	[esp+5Ch+var_30]
sub	eax, 4
mov	ecx, [ebp+eax+0]
mov	[ebx+eax], ecx
dec	[esp+5Ch+var_30]
sub	eax, 4
mov	ecx, [ebp+eax+0]
mov	[ebx+eax], ecx
dec	[esp+5Ch+var_30]
sub	eax, 4
mov	ecx, [ebp+eax+0]
mov	[ebx+eax], ecx
dec	[esp+5Ch+var_30]
sub	eax, 4
cmp	edi, [esp+5Ch+var_30]
jg	short loc_64211286
mov	[esp+5Ch+var_2C], c_0
mov	[esp+5Ch+var_28], edx
mov	ecx, [esp+5Ch+var_30]
mov	edx, [ebp+eax+0]
mov	[ebx+eax], edx
lea	edx, [eax-4]
mov	c_0, [ebp+edx+0]
mov	[ebx+edx], esi
lea	edx, [eax-8]
mov	esi, [ebp+edx+0]
mov	[ebx+edx], esi
lea	edx, [eax-0Ch]
mov	esi, [ebp+edx+0]
mov	[ebx+edx], esi
lea	edx, [eax-10h]
mov	esi, [ebp+edx+0]
mov	[ebx+edx], esi
lea	edx, [eax-14h]
mov	esi, [ebp+edx+0]
mov	[ebx+edx], esi
lea	edx, [eax-18h]
mov	esi, [ebp+edx+0]
mov	[ebx+edx], esi
lea	edx, [eax-1Ch]
mov	esi, [ebp+edx+0]
mov	[ebx+edx], esi
sub	ecx, 8
sub	eax, 20h
cmp	edi, ecx
jle	short loc_64211227
mov	esi, [esp+5Ch+var_2C]
mov	edx, [esp+5Ch+var_28]
			
lea	ecx, [edi-1]
and	ecx, 7
mov	dword ptr [edx], 0
mov	eax, 1
cmp	eax, edi
jz	loc_64211348
test	ecx, ecx
jz	short loc_64211301
cmp	ecx, 1
jz	short loc_642112F5
cmp	ecx, 2
jz	short loc_642112ED
cmp	ecx, 3
jz	short loc_642112E5
cmp	ecx, 4
jz	short loc_642112DD
cmp	ecx, 5
jz	short loc_642112D5
cmp	ecx, 6
jz	short loc_642112CD
mov	dword ptr [edx+eax*4], 0
mov	eax, 2
mov	dword ptr [edx+eax*4], 0
inc	eax
mov	dword ptr [edx+eax*4], 0
inc	eax
mov	dword ptr [edx+eax*4], 0
inc	eax
mov	dword ptr [edx+eax*4], 0
inc	eax
mov	dword ptr [edx+eax*4], 0
inc	eax
mov	dword ptr [edx+eax*4], 0
inc	eax
cmp	eax, edi
jz	short loc_64211348
			
mov	dword ptr [edx+eax*4], 0
mov	dword ptr [edx+eax*4+4], 0
mov	dword ptr [edx+eax*4+8], 0
mov	dword ptr [edx+eax*4+0Ch], 0
mov	dword ptr [edx+eax*4+10h], 0
mov	dword ptr [edx+eax*4+14h], 0
mov	dword ptr [edx+eax*4+18h], 0
mov	dword ptr [edx+eax*4+1Ch], 0
add	eax, 8
cmp	eax, edi
jnz	short loc_64211301
nop
			
mov	ebx, [c_0]
jmp	loc_64210D81
align 10h
mov	[esp+5Ch+size],	ebx 
mov	[esp+5Ch+var_5C], c_0 
call	_tma_mp_grow
test	eax, eax
jnz	loc_64210F02
mov	ebx, [a_0]
jmp	loc_64210B76
align 4
xor	res, res
jmp	loc_64210C4F
align 4
mov	ecx, [esp+5Ch+var_20]
mov	[esp+5Ch+var_28], ecx
mov	[esp+5Ch+var_24], ebx
mov	[esp+5Ch+var_20], c_0
mov	ebp, edx
jmp	loc_64211024
lea	ebx, [ecx+41h]
mov	ecx, 20h
cdq
idiv	ecx
sub	ebx, edx
lea	ecx, ds:0[ebx*4]
mov	[esp+5Ch+size],	ecx 
mov	edx, [c_0+0Ch]
mov	[esp+5Ch+var_5C], edx 
call	_realloc
test	eax, eax
jz	loc_642114A0
mov	[c_0+0Ch], eax
mov	edx, [c_0+4]
mov	[c_0+4], ebx
cmp	ebx, edx
jle	loc_6421111B
lea	eax, [eax+edx*4]
mov	ecx, edx
not	ecx
add	ecx, ebx
and	ecx, 7
mov	dword ptr [eax], 0
inc	edx
add	eax, 4
cmp	ebx, edx
jle	loc_6421111B
test	ecx, ecx
jz	short loc_64211455
cmp	ecx, 1
jz	short loc_64211443
cmp	ecx, 2
jz	short loc_64211439
cmp	ecx, 3
jz	short loc_6421142F
cmp	ecx, 4
jz	short loc_64211425
cmp	ecx, 5
jz	short loc_6421141B
cmp	ecx, 6
jz	short loc_64211411
mov	dword ptr [eax], 0
inc	edx
add	eax, 4
mov	dword ptr [eax], 0
inc	edx
add	eax, 4
mov	dword ptr [eax], 0
inc	edx
add	eax, 4
mov	dword ptr [eax], 0
inc	edx
add	eax, 4
mov	dword ptr [eax], 0
inc	edx
add	eax, 4
mov	dword ptr [eax], 0
inc	edx
add	eax, 4
mov	dword ptr [eax], 0
inc	edx
add	eax, 4
cmp	ebx, edx
jle	loc_6421111B
			
mov	dword ptr [eax], 0
mov	dword ptr [eax+4], 0
mov	dword ptr [eax+8], 0
mov	dword ptr [eax+0Ch], 0
mov	dword ptr [eax+10h], 0
mov	dword ptr [eax+14h], 0
mov	dword ptr [eax+18h], 0
mov	dword ptr [eax+1Ch], 0
add	edx, 8
add	eax, 20h
cmp	ebx, edx
jg	short loc_64211455
mov	ebx, [c_0]
jmp	loc_6421111D
align 10h
			
mov	eax, 0FFFFFFFEh
add	esp, 4Ch
pop	ebx
pop	c_0
pop	edi
pop	ebp
retn
align 10h
			
xor	eax, eax
jmp	loc_64210F02
add	ebx, 40h
mov	ecx, 20h
mov	eax, [esp+5Ch+var_2C]
cdq
idiv	ecx
sub	ebx, edx
lea	edx, ds:0[ebx*4]
mov	[esp+5Ch+size],	edx 
mov	eax, [c_0+0Ch]
mov	[esp+5Ch+var_5C], eax 
call	_realloc
test	eax, eax
jz	short loc_642114A0
mov	[c_0+0Ch], eax
mov	edx, [c_0+4]
mov	[c_0+4], ebx
cmp	ebx, edx
jle	loc_642115BE
lea	eax, [eax+edx*4]
mov	ecx, edx
not	ecx
add	ecx, ebx
and	ecx, 7
mov	dword ptr [eax], 0
inc	edx
add	eax, 4
cmp	ebx, edx
jle	loc_642115BE
test	ecx, ecx
jz	short loc_6421157D
cmp	ecx, 1
jz	short loc_6421156F
cmp	ecx, 2
jz	short loc_64211565
cmp	ecx, 3
jz	short loc_6421155B
cmp	ecx, 4
jz	short loc_64211551
cmp	ecx, 5
jz	short loc_64211547
cmp	ecx, 6
jz	short loc_6421153D
mov	dword ptr [eax], 0
inc	edx
add	eax, 4
mov	dword ptr [eax], 0
inc	edx
add	eax, 4
mov	dword ptr [eax], 0
inc	edx
add	eax, 4
mov	dword ptr [eax], 0
inc	edx
add	eax, 4
mov	dword ptr [eax], 0
inc	edx
add	eax, 4
mov	dword ptr [eax], 0
inc	edx
add	eax, 4
mov	dword ptr [eax], 0
inc	edx
add	eax, 4
cmp	ebx, edx
jle	short loc_642115BE
			
mov	dword ptr [eax], 0
mov	dword ptr [eax+4], 0
mov	dword ptr [eax+8], 0
mov	dword ptr [eax+0Ch], 0
mov	dword ptr [eax+10h], 0
mov	dword ptr [eax+14h], 0
mov	dword ptr [eax+18h], 0
mov	dword ptr [eax+1Ch], 0
add	edx, 8
add	eax, 20h
cmp	ebx, edx
jg	short loc_6421157D
			
mov	ebx, [c_0]
add	ebx, edi
mov	[esp+5Ch+var_2C], ebx
jmp	loc_6421113F
align 4
public _tma_mp_set_int
			
push	ebp
push	edi
push	esi
push	ebx
sub	esp, 2Ch
mov	ebx, [esp+3Ch+a]
mov	esi, [esp+3Ch+b]
mov	dword ptr [ebx+8], 0
mov	dword ptr [ebx], 0
mov	edx, [ebx+0Ch]
mov	edi, [ebx+4]
test	edi, edi
jle	loc_642116B7
lea	ecx, [edi-1]
and	ecx, 7
mov	dword ptr [edx], 0
mov	eax, 1
cmp	eax, edi
jz	loc_642116B7
test	ecx, ecx
jz	short loc_64211671
cmp	ecx, 1
jz	short loc_64211665
cmp	ecx, 2
jz	short loc_6421165D
cmp	ecx, 3
jz	short loc_64211655
cmp	ecx, 4
jz	short loc_6421164D
cmp	ecx, 5
jz	short loc_64211645
cmp	ecx, 6
jz	short loc_6421163D
mov	dword ptr [edx+eax*4], 0
mov	eax, 2
mov	dword ptr [edx+eax*4], 0
inc	eax
mov	dword ptr [edx+eax*4], 0
inc	eax
mov	dword ptr [edx+eax*4], 0
inc	eax
mov	dword ptr [edx+eax*4], 0
inc	eax
mov	dword ptr [edx+eax*4], 0
inc	eax
mov	dword ptr [edx+eax*4], 0
inc	eax
cmp	eax, edi
jz	short loc_642116B7
			
mov	dword ptr [edx+eax*4], 0
mov	dword ptr [edx+eax*4+4], 0
mov	dword ptr [edx+eax*4+8], 0
mov	dword ptr [edx+eax*4+0Ch], 0
mov	dword ptr [edx+eax*4+10h], 0
mov	dword ptr [edx+eax*4+14h], 0
mov	dword ptr [edx+eax*4+18h], 0
mov	dword ptr [edx+eax*4+1Ch], 0
add	eax, 8
cmp	eax, edi
jnz	short loc_64211671
			
mov	[esp+3Ch+c], a_0 
mov	[esp+3Ch+var_38], 4 
mov	[esp+3Ch+var_3C], a_0 
call	_tma_mp_mul_2d
test	eax, eax
jnz	loc_64211972
mov	res, [a_0+0Ch]
mov	edx, b_0
shr	edx, 1Ch
or	[eax], edx
inc	dword ptr [a_0]
mov	edi, b_0
shl	edi, 4
mov	[esp+3Ch+c], a_0 
mov	[esp+3Ch+var_38], 4 
mov	[esp+3Ch+var_3C], a_0 
call	_tma_mp_mul_2d
test	eax, eax
jnz	loc_64211972
mov	ecx, [a_0+0Ch]
shr	b_0, 1Ch
or	[ecx], edi
inc	dword ptr [a_0]
mov	edi, esi
shl	edi, 8
mov	[esp+3Ch+c], a_0 
mov	[esp+3Ch+var_38], 4 
mov	[esp+3Ch+var_3C], a_0 
call	_tma_mp_mul_2d
test	eax, eax
jnz	loc_64211972
mov	ebp, [a_0+0Ch]
shr	b_0, 1Ch
or	[ebp+0], edi
inc	dword ptr [a_0]
mov	edi, esi
shl	edi, 0Ch
mov	[esp+3Ch+c], a_0 
mov	[esp+3Ch+var_38], 4 
mov	[esp+3Ch+var_3C], a_0 
call	_tma_mp_mul_2d
test	eax, eax
jnz	loc_64211972
mov	res, [a_0+0Ch]
shr	b_0, 1Ch
or	[eax], edi
inc	dword ptr [a_0]
mov	edi, esi
shl	edi, 10h
mov	[esp+3Ch+c], a_0 
mov	[esp+3Ch+var_38], 4 
mov	[esp+3Ch+var_3C], a_0 
call	_tma_mp_mul_2d
test	eax, eax
jnz	loc_64211972
mov	edx, [a_0+0Ch]
shr	b_0, 1Ch
or	[edx], edi
inc	dword ptr [a_0]
mov	edi, esi
shl	edi, 14h
mov	[esp+3Ch+c], a_0 
mov	[esp+3Ch+var_38], 4 
mov	[esp+3Ch+var_3C], a_0 
call	_tma_mp_mul_2d
test	eax, eax
jnz	loc_64211972
mov	ecx, [a_0+0Ch]
shr	b_0, 1Ch
or	[ecx], edi
inc	dword ptr [a_0]
mov	edi, esi
shl	edi, 18h
mov	[esp+3Ch+c], a_0 
mov	[esp+3Ch+var_38], 4 
mov	[esp+3Ch+var_3C], a_0 
call	_tma_mp_mul_2d
test	eax, eax
jnz	loc_64211972
mov	ebp, [a_0+0Ch]
shr	b_0, 1Ch
or	[ebp+0], edi
inc	dword ptr [a_0]
shl	esi, 1Ch
mov	[esp+3Ch+c], a_0 
mov	[esp+3Ch+var_38], 4 
mov	[esp+3Ch+var_3C], a_0 
call	_tma_mp_mul_2d
test	eax, eax
jnz	loc_64211972
mov	edi, [a_0+0Ch]
shr	b_0, 1Ch
or	[edi], esi
mov	edx, [a_0]
lea	esi, [edx+1]
mov	[a_0], esi
test	esi, esi
jle	loc_64211986
mov	esi, [edi+edx*4]
test	esi, esi
jnz	loc_64211972
lea	ecx, [edx-1]
mov	[esp+3Ch+var_24], ecx
shl	ecx, 2
mov	ebp, edx
and	ebp, 7
jz	loc_642118E0
mov	esi, edx
test	edx, edx
jle	loc_64211984
mov	edx, [edi+ecx]
mov	[esp+3Ch+var_20], edx
mov	edx, [esp+3Ch+var_24]
sub	ecx, 4
cmp	[esp+3Ch+var_20], 0
jnz	loc_64211970
cmp	ebp, 1
jz	short loc_642118E0
cmp	ebp, 2
jz	short loc_642118CF
cmp	ebp, 3
jz	short loc_642118BE
cmp	ebp, 4
jz	short loc_642118AD
cmp	ebp, 5
jz	short loc_6421189C
cmp	ebp, 6
jz	short loc_6421188B
mov	esi, edx
mov	ebp, [edi+ecx]
dec	edx
sub	ecx, 4
test	ebp, ebp
jnz	loc_64211970
mov	esi, edx
mov	ebp, [edi+ecx]
dec	edx
sub	ecx, 4
test	ebp, ebp
jnz	loc_64211970
mov	esi, edx
mov	ebp, [edi+ecx]
dec	edx
sub	ecx, 4
test	ebp, ebp
jnz	loc_64211970
mov	esi, edx
mov	ebp, [edi+ecx]
dec	edx
sub	ecx, 4
test	ebp, ebp
jnz	loc_64211970
mov	esi, edx
mov	ebp, [edi+ecx]
dec	edx
sub	ecx, 4
test	ebp, ebp
jnz	loc_64211970
mov	esi, edx
mov	ebp, [edi+ecx]
dec	edx
sub	ecx, 4
test	ebp, ebp
jnz	loc_64211970
			
mov	[esp+3Ch+var_24], res
mov	[esp+3Ch+var_20], a_0
mov	esi, edx
test	edx, edx
jle	loc_6421197C
lea	a_0, [edx-1]
lea	res, [ecx-4]
mov	ebp, [edi+ecx]
test	ebp, ebp
jnz	short loc_64211968
mov	esi, ebx
lea	ebp, [edx-2]
lea	ebx, [ecx-8]
mov	eax, [edi+eax]
test	eax, eax
jnz	short loc_64211968
mov	esi, ebp
lea	ebp, [edx-3]
lea	eax, [ecx-0Ch]
mov	ebx, [edi+ebx]
test	ebx, ebx
jnz	short loc_64211968
mov	esi, ebp
lea	ebp, [edx-4]
lea	ebx, [ecx-10h]
mov	eax, [edi+eax]
test	eax, eax
jnz	short loc_64211968
mov	esi, ebp
lea	ebp, [edx-5]
lea	eax, [ecx-14h]
mov	ebx, [edi+ebx]
test	ebx, ebx
jnz	short loc_64211968
mov	esi, ebp
lea	ebp, [edx-6]
lea	ebx, [ecx-18h]
mov	eax, [edi+eax]
test	eax, eax
jnz	short loc_64211968
mov	esi, ebp
lea	ebp, [edx-7]
lea	eax, [ecx-1Ch]
mov	ebx, [edi+ebx]
test	ebx, ebx
jnz	short loc_64211968
mov	esi, ebp
sub	edx, 8
sub	ecx, 20h
mov	ebp, [edi+eax]
test	ebp, ebp
jz	short loc_642118E8
			
mov	eax, [esp+3Ch+var_24]
mov	ebx, [esp+3Ch+var_20]
			
mov	[a_0], esi
			
add	esp, 2Ch
pop	a_0
pop	esi
pop	b_0
pop	ebp
retn
align 4
mov	res, [esp+3Ch+var_24]
mov	a_0, [esp+3Ch+var_20]
mov	[a_0], edx
test	esi, esi
jnz	short loc_64211972
mov	dword ptr [a_0+8], 0
add	esp, 2Ch
pop	a_0
pop	esi
pop	edi
pop	ebp
retn
align 4
public _tma_mp_read_unsigned_bin
push	ebp
push	edi
push	esi
push	ebx
sub	esp, 2Ch
mov	ebx, [esp+3Ch+a]
mov	edi, [esp+3Ch+b]
cmp	dword ptr [ebx+4], 1
jle	loc_64211D94
mov	dword ptr [a_0+8], 0
mov	dword ptr [a_0], 0
mov	res, [a_0+0Ch]
mov	esi, [a_0+4]
test	esi, esi
jle	loc_64211A91
lea	ecx, [esi-1]
and	ecx, 7
mov	dword ptr [eax], 0
mov	edx, 1
cmp	edx, esi
jge	loc_64211A91
test	ecx, ecx
jz	short loc_64211A4B
cmp	ecx, 1
jz	short loc_64211A3F
cmp	ecx, 2
jz	short loc_64211A37
cmp	ecx, 3
jz	short loc_64211A2F
cmp	ecx, 4
jz	short loc_64211A27
cmp	ecx, 5
jz	short loc_64211A1F
cmp	ecx, 6
jz	short loc_64211A17
mov	dword ptr [eax+edx*4], 0
mov	edx, 2
mov	dword ptr [eax+edx*4], 0
inc	edx
mov	dword ptr [eax+edx*4], 0
inc	edx
mov	dword ptr [eax+edx*4], 0
inc	edx
mov	dword ptr [eax+edx*4], 0
inc	edx
mov	dword ptr [eax+edx*4], 0
inc	edx
mov	dword ptr [eax+edx*4], 0
inc	edx
cmp	edx, esi
jge	short loc_64211A91
			
mov	dword ptr [eax+edx*4], 0
mov	dword ptr [eax+edx*4+4], 0
mov	dword ptr [eax+edx*4+8], 0
mov	dword ptr [eax+edx*4+0Ch], 0
mov	dword ptr [eax+edx*4+10h], 0
mov	dword ptr [eax+edx*4+14h], 0
mov	dword ptr [eax+edx*4+18h], 0
mov	dword ptr [eax+edx*4+1Ch], 0
add	edx, 8
cmp	edx, esi
jl	short loc_64211A4B
			
mov	ebp, [esp+3Ch+c]
test	ebp, ebp
jle	loc_64211DB0
mov	ebp, [esp+3Ch+c]
dec	ebp
mov	eax, ebp
and	eax, 3
mov	[esp+3Ch+var_20], eax
mov	[esp+3Ch+var_34], a_0 
mov	[esp+3Ch+size],	8 
mov	[esp+3Ch+var_3C], a_0 
call	_tma_mp_mul_2d
test	eax, eax
jnz	loc_64211D7F
mov	res, [a_0+0Ch]
movzx	ecx, byte ptr [b_0]
or	[eax], ecx
mov	edx, [a_0]
inc	edx
mov	[a_0], edx
mov	esi, 1
test	ebp, ebp
jle	loc_64211C41
mov	eax, [esp+3Ch+var_20]
test	eax, eax
jz	loc_64211B88
cmp	[esp+3Ch+var_20], 1
jz	short loc_64211B4F
cmp	[esp+3Ch+var_20], 2
jz	short loc_64211B27
mov	[esp+3Ch+var_34], a_0 
mov	[esp+3Ch+size],	8 
mov	[esp+3Ch+var_3C], a_0 
call	_tma_mp_mul_2d
test	eax, eax
jnz	loc_64211D7F
mov	ebp, [a_0+0Ch]
movzx	edx, byte ptr [b_0+esi]
or	[ebp+0], edx
inc	dword ptr [a_0]
mov	si, 2
mov	[esp+3Ch+var_34], a_0 
mov	[esp+3Ch+size],	8 
mov	[esp+3Ch+var_3C], a_0 
call	_tma_mp_mul_2d
test	eax, eax
jnz	loc_64211D7F
mov	ecx, [a_0+0Ch]
movzx	res, byte ptr [b_0+esi]
or	[ecx], eax
inc	dword ptr [a_0]
inc	esi
mov	[esp+3Ch+var_34], a_0 
mov	[esp+3Ch+size],	8 
mov	[esp+3Ch+var_3C], a_0 
call	_tma_mp_mul_2d
test	eax, eax
jnz	loc_64211D7F
mov	res, [a_0+0Ch]
movzx	edx, byte ptr [b_0+esi]
or	[eax], edx
mov	edx, [a_0]
inc	edx
mov	[a_0], edx
inc	esi
mov	ebp, [esp+3Ch+c]
sub	ebp, esi
test	ebp, ebp
jle	loc_64211C41
			
mov	[esp+3Ch+var_34], a_0 
mov	[esp+3Ch+size],	8 
mov	[esp+3Ch+var_3C], a_0 
call	_tma_mp_mul_2d
test	eax, eax
jnz	loc_64211D7F
mov	ecx, [a_0+0Ch]
movzx	edx, byte ptr [b_0+esi]
or	[ecx], edx
inc	dword ptr [a_0]
lea	ebp, [esi+1]
mov	[esp+3Ch+var_34], a_0 
mov	[esp+3Ch+size],	8 
mov	[esp+3Ch+var_3C], a_0 
call	_tma_mp_mul_2d
test	eax, eax
jnz	loc_64211D7F
mov	ecx, [a_0+0Ch]
movzx	res, byte ptr [b_0+ebp]
or	[ecx], eax
inc	dword ptr [a_0]
lea	ebp, [esi+2]
mov	[esp+3Ch+var_34], a_0 
mov	[esp+3Ch+size],	8 
mov	[esp+3Ch+var_3C], a_0 
call	_tma_mp_mul_2d
test	eax, eax
jnz	loc_64211D7F
mov	ecx, [a_0+0Ch]
movzx	edx, byte ptr [b_0+ebp]
or	[ecx], edx
inc	dword ptr [a_0]
lea	ebp, [esi+3]
mov	[esp+3Ch+var_34], a_0 
mov	[esp+3Ch+size],	8 
mov	[esp+3Ch+var_3C], a_0 
call	_tma_mp_mul_2d
test	eax, eax
jnz	loc_64211D7F
mov	res, [a_0+0Ch]
movzx	ecx, byte ptr [b_0+ebp]
or	[eax], ecx
mov	edx, [a_0]
inc	edx
mov	[a_0], edx
add	esi, 4
mov	ebp, [esp+3Ch+c]
sub	ebp, esi
test	ebp, ebp
jg	loc_64211B88
			
test	edx, edx
jle	loc_64211D72
lea	ecx, [edx-1]
mov	esi, [eax+ecx*4]
test	esi, esi
jnz	loc_64211DB7
lea	esi, ds:0FFFFFFF8h[edx*4]
mov	b_0, ecx
and	edi, 7
jz	loc_64211CFC
mov	edx, ecx
test	ecx, ecx
jle	loc_64211D70
mov	ebp, [eax+esi]
sub	esi, 4
test	ebp, ebp
jnz	loc_64211D88
lea	ecx, [ecx-1]
cmp	edi, 1
jz	short loc_64211CFC
cmp	edi, 2
jz	short loc_64211CED
cmp	edi, 3
jz	short loc_64211CDE
cmp	edi, 4
jz	short loc_64211CCF
cmp	edi, 5
jz	short loc_64211CC0
cmp	edi, 6
jz	short loc_64211CB1
mov	edx, [eax+esi]
sub	esi, 4
test	edx, edx
jnz	loc_64211D88
dec	ecx
mov	edi, [eax+esi]
sub	esi, 4
test	edi, edi
jnz	loc_64211D88
dec	ecx
mov	ebp, [eax+esi]
sub	esi, 4
test	ebp, ebp
jnz	loc_64211D88
dec	ecx
mov	edx, [eax+esi]
sub	esi, 4
test	edx, edx
jnz	loc_64211D88
dec	ecx
mov	edi, [eax+esi]
sub	esi, 4
test	edi, edi
jnz	loc_64211D88
dec	ecx
mov	ebp, [eax+esi]
sub	esi, 4
test	ebp, ebp
jnz	loc_64211D88
dec	ecx
			
mov	edx, ecx
test	ecx, ecx
jle	short loc_64211D70
lea	edi, [esi-4]
mov	ebp, [eax+esi]
test	ebp, ebp
jnz	short loc_64211D88
lea	edx, [ecx-1]
mov	ecx, edx
lea	ebp, [esi-8]
mov	edi, [eax+edi]
test	edi, edi
jnz	short loc_64211D88
dec	ecx
lea	edi, [esi-0Ch]
mov	ebp, [eax+ebp]
test	ebp, ebp
jnz	short loc_64211D88
lea	ecx, [edx-2]
lea	ebp, [esi-10h]
mov	edi, [eax+edi]
test	edi, edi
jnz	short loc_64211D88
lea	ecx, [edx-3]
lea	edi, [esi-14h]
mov	ebp, [eax+ebp]
test	ebp, ebp
jnz	short loc_64211D88
lea	ecx, [edx-4]
lea	ebp, [esi-18h]
mov	edi, [eax+edi]
test	edi, edi
jnz	short loc_64211D88
lea	ecx, [edx-5]
lea	edi, [esi-1Ch]
mov	ebp, [eax+ebp]
test	ebp, ebp
jnz	short loc_64211D88
lea	ecx, [edx-6]
sub	esi, 20h
mov	edi, [eax+edi]
test	edi, edi
jnz	short loc_64211D88
lea	ecx, [edx-7]
mov	edx, ecx
test	ecx, ecx
jg	short loc_64211D02
			
mov	[a_0], ecx
test	edx, edx
jnz	short loc_64211DB7
mov	dword ptr [a_0+8], 0
xor	eax, eax
			
add	esp, 2Ch
pop	a_0
pop	esi
pop	edi
pop	ebp
retn
align 4
			
mov	[a_0], ecx
xor	eax, eax
add	esp, 2Ch
pop	a_0
pop	esi
pop	edi
pop	ebp
retn
mov	[esp+3Ch+size],	2
mov	[esp+3Ch+var_3C], a_0 
call	_tma_mp_grow
test	eax, eax
jz	loc_642119B5
jmp	short loc_64211D7F
align 10h
mov	edx, [a_0]
jmp	loc_64211C41
			
xor	eax, eax
jmp	short loc_64211D7F
align 4
public _tma_mp_toom_sqr
push	ebp
push	edi
push	esi
push	ebx
sub	esp, 0DCh
mov	dword ptr [esp+24h], 0
lea	ebp, [esp+70h]
mov	[esp+20h], ebp
lea	edi, [esp+40h]
mov	[esp+1Ch], edi
lea	esi, [esp+50h]
mov	[esp+18h], esi
lea	ebx, [esp+60h]
mov	[esp+14h], ebx
lea	edx, [esp+80h]
mov	[esp+10h], edx
lea	eax, [esp+90h]
mov	[esp+0Ch], eax
lea	ecx, [esp+0A0h]
mov	[esp+8], ecx
lea	edx, [esp+0B0h]
mov	[esp+4], edx
lea	eax, [esp+0C0h]
mov	[esp], eax	
call	_tma_mp_init_multi
test	eax, eax
jz	short loc_64211E38
add	esp, 0DCh
pop	ebx
pop	esi
pop	edi
pop	ebp
retn
mov	edx, [esp+0F0h]
mov	ecx, [edx]
mov	res, 55555556h
imul	ecx
mov	eax, ecx
sar	eax, 1Fh
sub	edx, eax
mov	[esp+3Ch], edx
mov	eax, edx
shl	eax, 2
lea	ecx, ds:0[eax*8]
sub	ecx, eax
mov	[esp+8], ebx	
mov	[esp+4], ecx	
mov	eax, [esp+0F0h]
mov	[esp], eax	
mov	[esp+34h], ecx
call	_tma_mp_mod_2d
test	eax, eax
jz	short loc_64211EE8
			
mov	dword ptr [esp+24h], 0
mov	[esp+20h], ebp
mov	[esp+1Ch], edi
mov	[esp+18h], esi
mov	[esp+14h], ebx
lea	ecx, [esp+80h]
mov	[esp+10h], ecx
lea	ebp, [esp+90h]
mov	[esp+0Ch], ebp
lea	edi, [esp+0A0h]
mov	[esp+8], edi
lea	esi, [esp+0B0h]
mov	[esp+4], esi
lea	ebx, [esp+0C0h]
mov	[esp], ebx	
mov	[esp+34h], res
call	_tma_mp_clear_multi
mov	eax, [esp+34h]
add	esp, 0DCh
pop	ebx
pop	esi
pop	edi
pop	ebp
retn
align 4
mov	[esp+4], esi	
mov	ecx, [esp+0F0h]
mov	[esp], ecx	
call	_tma_mp_copy
test	eax, eax
jnz	short ERR
mov	ecx, [esp+3Ch]
mov	[esp+4], ecx	
mov	[esp], esi	
call	_tma_mp_rshd
mov	[esp+8], esi	
mov	edx, [esp+34h]
mov	[esp+4], edx	
mov	[esp], esi	
call	_tma_mp_mod_2d
mov	[esp+4], edi	
mov	eax, [esp+0F0h]
mov	[esp], eax	
call	_tma_mp_copy
test	eax, eax
jnz	ERR
mov	edx, [esp+3Ch]
shl	edx, 1
mov	[esp+38h], edx
mov	[esp+4], edx	
mov	[esp], edi	
call	_tma_mp_rshd
lea	eax, [esp+0C0h]
mov	[esp+4], eax	
mov	[esp], ebx	
call	_tma_mp_sqr
test	eax, eax
jnz	ERR
lea	ecx, [esp+80h]
mov	[esp+4], ecx	
mov	[esp], edi	
call	_tma_mp_sqr
test	eax, eax
jnz	ERR
mov	[esp+4], ebp	
mov	[esp], ebx	
call	_tma_mp_mul_2
test	eax, eax
jnz	ERR
mov	[esp+8], ebp	
mov	[esp+4], esi	
mov	[esp], ebp	
call	_tma_mp_add
test	eax, eax
jnz	ERR
mov	[esp+4], ebp	
mov	[esp], ebp	
call	_tma_mp_mul_2
test	eax, eax
jnz	ERR
mov	[esp+8], ebp	
mov	[esp+4], edi	
mov	[esp], ebp	
call	_tma_mp_add
test	eax, eax
jnz	ERR
lea	res, [esp+0B0h]
mov	[esp+4], eax	
mov	[esp], ebp	
call	_tma_mp_sqr
test	eax, eax
jnz	ERR
mov	[esp+4], ebp	
mov	[esp], edi	
call	_tma_mp_mul_2
test	eax, eax
jnz	ERR
mov	[esp+8], ebp	
mov	[esp+4], esi	
mov	[esp], ebp	
call	_tma_mp_add
test	eax, eax
jnz	ERR
mov	[esp+4], ebp	
mov	[esp], ebp	
call	_tma_mp_mul_2
test	eax, eax
jnz	ERR
mov	[esp+8], ebp	
mov	[esp+4], ebx	
mov	[esp], ebp	
call	_tma_mp_add
test	eax, eax
jnz	ERR
lea	edx, [esp+90h]
mov	[esp+4], edx	
mov	[esp], ebp	
call	_tma_mp_sqr
test	eax, eax
jnz	ERR
mov	[esp+8], ebp	
mov	[esp+4], esi	
mov	[esp], edi	
call	_tma_mp_add
test	eax, eax
jnz	ERR
mov	[esp+8], ebp	
mov	[esp+4], ebx	
mov	[esp], ebp	
call	_tma_mp_add
test	eax, eax
jnz	ERR
lea	ecx, [esp+0A0h]
mov	[esp+4], ecx	
mov	[esp], ebp	
call	_tma_mp_sqr
test	eax, eax
jnz	ERR
lea	res, [esp+0B0h]
mov	[esp+8], eax	
lea	edx, [esp+80h]
mov	[esp+4], edx	
mov	[esp], eax	
call	_tma_mp_sub
test	eax, eax
jnz	ERR
lea	ecx, [esp+90h]
mov	[esp+8], ecx	
lea	res, [esp+0C0h]
mov	[esp+4], eax	
mov	[esp], ecx	
call	_tma_mp_sub
test	eax, eax
jnz	ERR
lea	edx, [esp+0B0h]
mov	[esp+4], edx	
mov	[esp], edx	
call	_tma_mp_div_2
test	eax, eax
jnz	ERR
lea	ecx, [esp+90h]
mov	[esp+4], ecx	
mov	[esp], ecx	
call	_tma_mp_div_2
test	eax, eax
jnz	ERR
lea	res, [esp+0A0h]
mov	[esp+8], eax	
lea	edx, [esp+0C0h]
mov	[esp+4], edx	
mov	[esp], eax	
call	_tma_mp_sub
test	eax, eax
jnz	ERR
lea	ecx, [esp+0A0h]
mov	[esp+8], ecx	
lea	res, [esp+80h]
mov	[esp+4], eax	
mov	[esp], ecx	
call	_tma_mp_sub
test	eax, eax
jnz	ERR
lea	ecx, [esp+0B0h]
mov	[esp+8], ecx	
lea	edx, [esp+0A0h]
mov	[esp+4], edx	
mov	[esp], ecx	
call	_tma_mp_sub
test	eax, eax
jnz	ERR
lea	res, [esp+90h]
mov	[esp+8], eax	
lea	ecx, [esp+0A0h]
mov	[esp+4], ecx	
mov	[esp], eax	
call	_tma_mp_sub
test	eax, eax
jnz	ERR
mov	[esp+8], ebp	
mov	dword ptr [esp+4], 3 
lea	edx, [esp+0C0h]
mov	[esp], edx	
call	_tma_mp_mul_2d
test	eax, eax
jnz	ERR
lea	res, [esp+0B0h]
mov	[esp+8], eax	
mov	[esp+4], ebp	
mov	[esp], eax	
call	_tma_mp_sub
test	eax, eax
jnz	ERR
mov	[esp+8], ebp	
mov	dword ptr [esp+4], 3 
lea	ecx, [esp+80h]
mov	[esp], ecx	
call	_tma_mp_mul_2d
test	eax, eax
jnz	ERR
lea	edx, [esp+90h]
mov	[esp+8], edx	
mov	[esp+4], ebp	
mov	[esp], edx	
call	_tma_mp_sub
test	eax, eax
jnz	ERR
lea	res, [esp+0A0h]
mov	[esp+8], eax	
mov	dword ptr [esp+4], 3 
mov	[esp], eax	
call	_tma_mp_mul_d
test	eax, eax
jnz	ERR
lea	ecx, [esp+0A0h]
mov	[esp+8], ecx	
lea	edx, [esp+0B0h]
mov	[esp+4], edx	
mov	[esp], ecx	
call	_tma_mp_sub
test	eax, eax
jnz	ERR
lea	ecx, [esp+0A0h]
mov	[esp+8], ecx	
lea	res, [esp+90h]
mov	[esp+4], eax	
mov	[esp], ecx	
call	_tma_mp_sub
test	eax, eax
jnz	ERR
lea	edx, [esp+0B0h]
mov	[esp+8], edx	
lea	ecx, [esp+0A0h]
mov	[esp+4], ecx	
mov	[esp], edx	
call	_tma_mp_sub
test	eax, eax
jnz	ERR
lea	edx, [esp+90h]
mov	[esp+8], edx	
lea	res, [esp+0A0h]
mov	[esp+4], eax	
mov	[esp], edx	
call	_tma_mp_sub
test	eax, eax
jnz	ERR
mov	dword ptr [esp+8], 0 
lea	ecx, [esp+0B0h]
mov	[esp+4], ecx	
mov	[esp], ecx	
call	_tma_mp_div_3
test	eax, eax
jnz	ERR
mov	dword ptr [esp+8], 0 
lea	edx, [esp+90h]
mov	[esp+4], edx	
mov	[esp], edx	
call	_tma_mp_div_3
test	eax, eax
jnz	ERR
mov	ecx, [esp+3Ch]
mov	[esp+4], ecx	
lea	res, [esp+0B0h]
mov	[esp], eax	
call	_tma_mp_lshd
test	eax, eax
jnz	ERR
mov	res, [esp+38h]
mov	[esp+4], eax	
lea	edx, [esp+0A0h]
mov	[esp], edx	
call	_tma_mp_lshd
test	eax, eax
jnz	ERR
imul	edx, [esp+3Ch],	3
mov	[esp+4], edx	
lea	ecx, [esp+90h]
mov	[esp], ecx	
call	_tma_mp_lshd
test	eax, eax
jnz	ERR
mov	ecx, [esp+3Ch]
shl	ecx, 2
mov	[esp+4], ecx	
lea	res, [esp+80h]
mov	[esp], eax	
call	_tma_mp_lshd
test	eax, eax
jnz	ERR
mov	ecx, [esp+0F4h]
mov	[esp+8], ecx	
lea	res, [esp+0B0h]
mov	[esp+4], eax	
lea	edx, [esp+0C0h]
mov	[esp], edx	
call	_tma_mp_add
test	eax, eax
jnz	ERR
mov	[esp+8], ebp	
lea	res, [esp+90h]
mov	[esp+4], eax	
lea	edx, [esp+0A0h]
mov	[esp], edx	
call	_tma_mp_add
test	eax, eax
jnz	ERR
mov	[esp+8], ebp	
mov	[esp+4], ebp	
lea	ecx, [esp+80h]
mov	[esp], ecx	
call	_tma_mp_add
test	eax, eax
jnz	ERR
mov	edx, [esp+0F4h]
mov	[esp+8], edx	
mov	[esp+4], edx	
mov	[esp], ebp	
call	_tma_mp_add
jmp	ERR
public _tma_mp_sqr
			
push	ebx
sub	esp, 18h
mov	edx, [esp+1Ch+a]
mov	ebx, [esp+1Ch+b]
mov	res, [edx]
cmp	res, _TOOM_SQR_CUTOFF
jge	short loc_642124B0
cmp	res, _KARATSUBA_SQR_CUTOFF
jge	short loc_642124D8
lea	ecx, [res+res]
cmp	ecx, 1FEh
jg	short loc_64212496
cmp	res, 7Fh
jle	short loc_642124C8
mov	[esp+1Ch+var_18], b_0 
mov	[esp+1Ch+var_1C], a_0 
call	_s_tma_mp_sqr
mov	dword ptr [b_0+8], 0
add	esp, 18h
pop	b_0
retn
align 10h
mov	[esp+1Ch+var_18], b_0 
mov	[esp+1Ch+var_1C], a_0 
call	_tma_mp_toom_sqr
mov	dword ptr [b_0+8], 0
add	esp, 18h
pop	b_0
retn
mov	[esp+1Ch+var_18], b_0
mov	[esp+1Ch+var_1C], a_0 
call	_fast_s_tma_mp_sqr
jmp	short loc_642124A2
align 4
mov	[esp+1Ch+var_18], b_0 
mov	[esp+1Ch+var_1C], a_0 
call	_tma_mp_karatsuba_sqr
mov	dword ptr [b_0+8], 0
add	esp, 18h
pop	b_0
retn
public _tma_mp_karatsuba_sqr
push	ebp
push	edi
push	esi
push	ebx
sub	esp, 0ACh
mov	esi, [esp+0BCh+a]
mov	ebx, [esi]
sar	B, 1
lea	edi, [B+40h]
mov	eax, B
and	eax, 8000001Fh
js	loc_6421278C
sub	edi, eax
lea	eax, ds:0[edi*4]
mov	[esp+0BCh+var_BC], eax 
call	_malloc
test	eax, eax
jz	loc_642127A4
mov	[esp+0BCh+x0.dp], eax
mov	[esp+0BCh+x0.used], 0
mov	[esp+0BCh+x0.alloc], edi
mov	[esp+0BCh+x0.sign], 0
test	edi, edi
jle	loc_6421261B
lea	ecx, [edi-1]
and	ecx, 7
mov	dword ptr [eax], 0
mov	edx, 1
cmp	edx, edi
jz	loc_6421261B
test	ecx, ecx
jz	short loc_642125D5
cmp	ecx, 1
jz	short loc_642125C9
cmp	ecx, 2
jz	short loc_642125C1
cmp	ecx, 3
jz	short loc_642125B9
cmp	ecx, 4
jz	short loc_642125B1
cmp	ecx, 5
jz	short loc_642125A9
cmp	ecx, 6
jz	short loc_642125A1
mov	dword ptr [eax+edx*4], 0
mov	edx, 2
mov	dword ptr [eax+edx*4], 0
inc	edx
mov	dword ptr [eax+edx*4], 0
inc	edx
mov	dword ptr [eax+edx*4], 0
inc	edx
mov	dword ptr [eax+edx*4], 0
inc	edx
mov	dword ptr [eax+edx*4], 0
inc	edx
mov	dword ptr [eax+edx*4], 0
inc	edx
cmp	edx, edi
jz	short loc_6421261B
			
mov	dword ptr [eax+edx*4], 0
mov	dword ptr [eax+edx*4+4], 0
mov	dword ptr [eax+edx*4+8], 0
mov	dword ptr [eax+edx*4+0Ch], 0
mov	dword ptr [eax+edx*4+10h], 0
mov	dword ptr [eax+edx*4+14h], 0
mov	dword ptr [eax+edx*4+18h], 0
mov	dword ptr [eax+edx*4+1Ch], 0
add	edx, 8
cmp	edx, edi
jnz	short loc_642125D5
			
mov	eax, [a_0]
sub	eax, B
lea	edi, [eax+40h]
and	eax, 8000001Fh
js	loc_64212798
sub	edi, eax
lea	ebp, ds:0[edi*4]
mov	[esp+0BCh+var_BC], ebp 
call	_malloc
mov	[esp+0BCh+x1.dp], eax
test	eax, eax
jz	loc_642127B4
mov	[esp+0BCh+x1.used], 0
mov	[esp+0BCh+x1.alloc], edi
mov	[esp+0BCh+x1.sign], 0
test	edi, edi
jle	loc_64212733
lea	ecx, [edi-1]
and	ecx, 7
mov	dword ptr [eax], 0
mov	edx, 1
cmp	edx, edi
jz	loc_64212733
test	ecx, ecx
jz	short loc_642126ED
cmp	ecx, 1
jz	short loc_642126E1
cmp	ecx, 2
jz	short loc_642126D9
cmp	ecx, 3
jz	short loc_642126D1
cmp	ecx, 4
jz	short loc_642126C9
cmp	ecx, 5
jz	short loc_642126C1
cmp	ecx, 6
jz	short loc_642126B9
mov	dword ptr [eax+edx*4], 0
mov	edx, 2
mov	dword ptr [eax+edx*4], 0
inc	edx
mov	dword ptr [eax+edx*4], 0
inc	edx
mov	dword ptr [eax+edx*4], 0
inc	edx
mov	dword ptr [eax+edx*4], 0
inc	edx
mov	dword ptr [eax+edx*4], 0
inc	edx
mov	dword ptr [eax+edx*4], 0
inc	edx
cmp	edx, edi
jz	short loc_64212733
			
mov	dword ptr [eax+edx*4], 0
mov	dword ptr [eax+edx*4+4], 0
mov	dword ptr [eax+edx*4+8], 0
mov	dword ptr [eax+edx*4+0Ch], 0
mov	dword ptr [eax+edx*4+10h], 0
mov	dword ptr [eax+edx*4+14h], 0
mov	dword ptr [eax+edx*4+18h], 0
mov	dword ptr [eax+edx*4+1Ch], 0
add	edx, 8
cmp	edx, edi
jnz	short loc_642126ED
			
mov	edi, [a_0]
shl	edi, 1
mov	[esp+0BCh+size], edi 
lea	edi, [esp+0BCh+t1]
mov	[esp+0BCh+var_BC], edi 
call	_tma_mp_init_size
test	eax, eax
jz	short loc_642127C4
mov	eax, 0FFFFFFFEh
lea	a_0, [esp+0BCh+x0]
lea	ebp, [esp+0BCh+x1]
mov	[esp+0BCh+var_BC], ebp 
mov	[esp+0BCh+var_8C], err
call	_tma_mp_clear
mov	eax, [esp+0BCh+var_8C]
mov	[esp+0BCh+var_BC], esi
mov	[esp+0BCh+var_8C], err
call	_tma_mp_clear
mov	eax, [esp+0BCh+var_8C]
add	esp, 0ACh
pop	B
pop	esi
pop	edi
pop	ebp
retn
align 4
dec	eax
or	eax, 0FFFFFFE0h
inc	eax
jmp	loc_64212515
align 4
dec	eax
or	eax, 0FFFFFFE0h
inc	eax
jmp	loc_6421262D
align 4
mov	eax, 0FFFFFFFEh
add	esp, 0ACh
pop	B
pop	a_0
pop	edi
pop	ebp
retn
mov	eax, 0FFFFFFFEh
lea	a_0, [esp+0BCh+x0]
jmp	short X0
align 4
mov	ecx, [a_0]
shl	ecx, 1
mov	[esp+0BCh+size], ecx 
lea	edx, [esp+0BCh+t2]
mov	[esp+0BCh+var_BC], edx 
call	_tma_mp_init_size
test	eax, eax
jz	short loc_64212804
mov	eax, 0FFFFFFFEh
lea	a_0, [esp+0BCh+x0]
lea	ebp, [esp+0BCh+x1]
mov	[esp+0BCh+var_BC], edi 
mov	[esp+0BCh+var_8C], err
call	_tma_mp_clear
mov	eax, [esp+0BCh+var_8C]
jmp	X1
lea	eax, [B+B]
mov	[esp+0BCh+var_80], eax
mov	[esp+0BCh+size], eax 
lea	ebp, [esp+0BCh+x0x0]
mov	[esp+0BCh+var_BC], ebp 
call	_tma_mp_init_size
test	eax, eax
jz	short loc_64212848
mov	eax, 0FFFFFFFEh
lea	a_0, [esp+0BCh+x0]
lea	ebp, [esp+0BCh+x1]
lea	edx, [esp+0BCh+t2]
mov	[esp+0BCh+var_BC], edx 
mov	[esp+0BCh+var_8C], err
call	_tma_mp_clear
mov	eax, [esp+0BCh+var_8C]
jmp	short T1
mov	ecx, [a_0]
sub	ecx, B
shl	ecx, 1
mov	[esp+0BCh+size], ecx 
lea	edx, [esp+0BCh+x1x1]
mov	[esp+0BCh+var_BC], edx 
call	_tma_mp_init_size
mov	[esp+0BCh+var_88], eax
test	eax, eax
jnz	loc_64212BD7
mov	edx, [a_0+0Ch]
mov	ecx, [esp+0BCh+x0.dp]
test	B, B
jle	loc_6421295D
lea	eax, [B-1]
and	eax, 7
mov	[esp+0BCh+var_84], eax
mov	eax, [src]
mov	ebp, [esp+0BCh+var_88]
mov	[ecx+ebp*4], eax
mov	eax, 1
cmp	x, B
jz	loc_6421295A
cmp	[esp+0BCh+var_84], 0
jz	short loc_64212906
cmp	[esp+0BCh+var_84], 1
jz	short loc_642128FB
cmp	[esp+0BCh+var_84], 2
jz	short loc_642128F4
cmp	[esp+0BCh+var_84], 3
jz	short loc_642128ED
cmp	[esp+0BCh+var_84], 4
jz	short loc_642128E6
cmp	[esp+0BCh+var_84], 5
jz	short loc_642128DF
cmp	[esp+0BCh+var_84], 6
jz	short loc_642128D8
mov	ebp, [src+4]
mov	[ecx+x*4], ebp
mov	x, 2
mov	ebp, [src+x*4]
mov	[ecx+x*4], ebp
inc	x
mov	ebp, [src+x*4]
mov	[ecx+x*4], ebp
inc	x
mov	ebp, [src+x*4]
mov	[ecx+x*4], ebp
inc	x
mov	ebp, [src+x*4]
mov	[ecx+x*4], ebp
inc	x
mov	ebp, [src+x*4]
mov	[ecx+x*4], ebp
inc	x
mov	ebp, [src+x*4]
mov	[ecx+x*4], ebp
inc	x
cmp	x, B
jz	short loc_6421295A
mov	[esp+0BCh+var_88], a_0
mov	a_0, [src+x*4]
mov	[ecx+x*4], esi
lea	ebp, [x+1]
mov	esi, [src+ebp*4]
mov	[ecx+ebp*4], esi
lea	ebp, [x+2]
mov	esi, [src+x*4]
mov	[ecx+x*4], esi
lea	x, [eax+3]
mov	esi, [src+x*4]
mov	[ecx+x*4], esi
lea	x, [eax+4]
mov	esi, [src+x*4]
mov	[ecx+x*4], esi
lea	x, [eax+5]
mov	esi, [src+x*4]
mov	[ecx+x*4], esi
lea	x, [eax+6]
mov	esi, [src+x*4]
mov	[ecx+x*4], esi
lea	x, [eax+7]
mov	esi, [src+x*4]
mov	[ecx+x*4], esi
add	eax, 8
cmp	x, B
jnz	short loc_6421290A
mov	esi, [esp+0BCh+var_88]
			
lea	src, [src+B*4]
mov	x, [esp+0BCh+x1.dp]
mov	[esp+0BCh+var_90], eax
mov	a_0, [a_0]
mov	[esp+0BCh+var_84], esi
cmp	B, esi
jge	loc_64212AAD
mov	eax, B
not	eax
lea	ebp, [eax+esi]
and	ebp, 7
mov	eax, [src]
mov	esi, [esp+0BCh+var_90]
mov	[esi], eax
lea	eax, [B+1]
mov	[esp+0BCh+var_A0], eax
mov	eax, 4
mov	esi, [esp+0BCh+var_84]
cmp	[esp+0BCh+var_A0], esi
jge	loc_64212AAD
test	ebp, ebp
jz	loc_64212A52
cmp	ebp, 1
jz	loc_64212A37
cmp	ebp, 2
jz	short loc_64212A26
cmp	ebp, 3
jz	short loc_64212A15
cmp	ebp, 4
jz	short loc_64212A04
cmp	ebp, 5
jz	short loc_642129F3
cmp	ebp, 6
jz	short loc_642129E2
mov	ebp, [src+4]
mov	esi, [esp+0BCh+var_90]
mov	[esi+4], ebp
lea	eax, [B+2]
mov	[esp+0BCh+var_A0], eax
mov	eax, 8
mov	ebp, [src+eax]
mov	esi, [esp+0BCh+var_90]
mov	[esi+eax], ebp
inc	[esp+0BCh+var_A0]
add	eax, 4
mov	ebp, [src+eax]
mov	esi, [esp+0BCh+var_90]
mov	[esi+eax], ebp
inc	[esp+0BCh+var_A0]
add	eax, 4
mov	ebp, [src+eax]
mov	esi, [esp+0BCh+var_90]
mov	[esi+eax], ebp
inc	[esp+0BCh+var_A0]
add	eax, 4
mov	ebp, [src+eax]
mov	esi, [esp+0BCh+var_90]
mov	[esi+eax], ebp
inc	[esp+0BCh+var_A0]
add	eax, 4
mov	ebp, [src+eax]
mov	esi, [esp+0BCh+var_90]
mov	[esi+eax], ebp
inc	[esp+0BCh+var_A0]
add	eax, 4
mov	ebp, [src+eax]
mov	esi, [esp+0BCh+var_90]
mov	[esi+eax], ebp
inc	[esp+0BCh+var_A0]
add	eax, 4
mov	esi, [esp+0BCh+var_84]
cmp	[esp+0BCh+var_A0], esi
jge	short loc_64212AAD
mov	ebp, [esp+0BCh+var_90]
mov	[esp+0BCh+var_88], ecx
mov	esi, [esp+0BCh+var_A0]
mov	ecx, [src+eax]
mov	[dst+eax+0], ecx
mov	ecx, [src+eax+4]
mov	[dst+eax+4], ecx
mov	ecx, [src+eax+8]
mov	[dst+eax+8], ecx
mov	ecx, [src+eax+0Ch]
mov	[dst+eax+0Ch], ecx
mov	ecx, [src+eax+10h]
mov	[dst+eax+10h], ecx
mov	ecx, [src+eax+14h]
mov	[dst+eax+14h], ecx
mov	ecx, [src+eax+18h]
mov	[dst+eax+18h], ecx
mov	ecx, [src+eax+1Ch]
mov	[dst+eax+1Ch], ecx
add	x, 8
add	eax, 20h
cmp	x, [esp+0BCh+var_84]
jl	short loc_64212A5E
mov	ecx, [esp+0BCh+var_88]
			
mov	[esp+0BCh+x0.used], B
test	B, B
jle	loc_64212C54
lea	x, [B-1]
cmp	dword ptr [ecx+esi*4], 0
jnz	loc_64212C0A
lea	eax, [ecx+B*4-8]
mov	src, B
mov	ecx, esi
and	ecx, 7
jz	loc_64212BB6
mov	B, esi
test	esi, esi
jle	loc_64212BBF
mov	B, [eax]
sub	eax, 4
test	esi, esi
jnz	loc_64212C03
cmp	ecx, 1
jz	loc_64212BB6
cmp	ecx, 2
jz	short loc_64212B59
cmp	ecx, 3
jz	short loc_64212B4B
cmp	ecx, 4
jz	short loc_64212B3D
cmp	ecx, 5
jz	short loc_64212B2F
cmp	ecx, 6
jz	short loc_64212B21
dec	B
mov	ecx, [eax]
sub	eax, 4
test	ecx, ecx
jnz	loc_64212C03
dec	B
mov	dst, [eax]
sub	eax, 4
test	ebp, ebp
jnz	loc_64212C03
dec	B
mov	esi, [eax]
sub	eax, 4
test	esi, esi
jnz	loc_64212C03
dec	B
mov	ecx, [eax]
sub	eax, 4
test	ecx, ecx
jnz	loc_64212C03
dec	B
mov	dst, [eax]
sub	eax, 4
test	ebp, ebp
jnz	loc_64212C03
dec	B
mov	esi, [eax]
sub	eax, 4
test	esi, esi
jz	short loc_64212BB6
jmp	loc_64212C03
cmp	dword ptr [eax], 0
jnz	loc_64212C03
dec	edx
cmp	dword ptr [eax-4], 0
jnz	loc_64212C03
lea	B, [ecx-2]
cmp	dword ptr [eax-8], 0
jnz	short loc_64212C03
lea	B, [ecx-3]
cmp	dword ptr [eax-0Ch], 0
jnz	short loc_64212C03
lea	B, [ecx-4]
cmp	dword ptr [eax-10h], 0
jnz	short loc_64212C03
lea	B, [ecx-5]
cmp	dword ptr [eax-14h], 0
jnz	short loc_64212C03
lea	B, [ecx-6]
cmp	dword ptr [eax-18h], 0
jnz	short loc_64212C03
lea	B, [ecx-7]
mov	ecx, [eax-1Ch]
sub	eax, 20h
test	ecx, ecx
jnz	short loc_64212C03
			
lea	ecx, [B-1]
mov	B, ecx
test	ecx, ecx
jg	short loc_64212B68
mov	[esp+0BCh+x0.used], B
test	B, B
jnz	short loc_64212C0A
mov	[esp+0BCh+x0.sign], 0
jmp	short loc_64212C0A
mov	eax, 0FFFFFFFEh
lea	a_0, [esp+0BCh+x0]
lea	ebp, [esp+0BCh+x1]
lea	B, [esp+0BCh+x0x0]
mov	[esp+0BCh+var_BC], ebx 
mov	[esp+0BCh+var_8C], err
call	_tma_mp_clear
mov	eax, [esp+0BCh+var_8C]
jmp	T2
			
mov	[esp+0BCh+x0.used], B
			
mov	dst, [esp+0BCh+var_84]
sub	ebp, ebx
mov	[esp+0BCh+x1.used], ebp
lea	src, [esp+0BCh+x0x0]
mov	[esp+0BCh+size], edx 
lea	x, [esp+0BCh+x0]
mov	[esp+0BCh+var_BC], esi 
call	_tma_mp_sqr
lea	ebp, [esp+0BCh+x1]
test	eax, eax
jz	short loc_64212C5B
			
mov	err, 0FFFFFFFEh
lea	ecx, [esp+0BCh+x1x1]
mov	[esp+0BCh+var_BC], ecx 
mov	[esp+0BCh+var_8C], err
call	_tma_mp_clear
mov	eax, [esp+0BCh+var_8C]
jmp	short X0X0
mov	src, B
jmp	loc_64212BC6
lea	eax, [esp+0BCh+x1x1]
mov	[esp+0BCh+size], eax 
mov	[esp+0BCh+var_BC], ebp 
call	_tma_mp_sqr
test	eax, eax
jnz	short X1X1
mov	[esp+0BCh+c], edi 
mov	[esp+0BCh+size], esi 
mov	[esp+0BCh+var_BC], ebp 
call	_s_tma_mp_add
test	eax, eax
jnz	short X1X1
mov	[esp+0BCh+size], edi 
mov	[esp+0BCh+var_BC], edi 
call	_tma_mp_sqr
test	eax, eax
jnz	short X1X1
lea	eax, [esp+0BCh+t2]
mov	[esp+0BCh+c], eax 
lea	edx, [esp+0BCh+x1x1]
mov	[esp+0BCh+size], edx 
lea	ecx, [esp+0BCh+x0x0]
mov	[esp+0BCh+var_BC], ecx 
call	_s_tma_mp_add
test	eax, eax
jnz	short X1X1
mov	[esp+0BCh+c], edi 
lea	ecx, [esp+0BCh+t2]
mov	[esp+0BCh+size], ecx 
mov	[esp+0BCh+var_BC], edi 
call	_s_tma_mp_sub
test	eax, eax
jnz	X1X1
mov	[esp+0BCh+size], B 
mov	[esp+0BCh+var_BC], edi 
call	_tma_mp_lshd
test	eax, eax
jnz	X1X1
mov	edx, [esp+0BCh+var_80]
mov	[esp+0BCh+size], edx 
lea	B, [esp+0BCh+x1x1]
mov	[esp+0BCh+var_BC], ebx 
call	_tma_mp_lshd
test	eax, eax
jnz	X1X1
mov	[esp+0BCh+c], edi 
mov	[esp+0BCh+size], edi 
lea	eax, [esp+0BCh+x0x0]
mov	[esp+0BCh+var_BC], eax 
call	_tma_mp_add
test	eax, eax
jnz	X1X1
mov	edx, [esp+0BCh+b_0]
mov	[esp+0BCh+c], edx 
lea	ebx, [esp+0BCh+x1x1]
mov	[esp+0BCh+size], ebx 
mov	[esp+0BCh+var_BC], edi 
call	_tma_mp_add
mov	ecx, eax
xor	eax, eax
test	ecx, ecx
jz	loc_64212C3E
jmp	X1X1
align 4
public _tma_mp_toom_mul
push	ebp
push	edi
push	esi
push	ebx
sub	esp, 12Ch
mov	dword ptr [esp+34h], 0
lea	ebp, [esp+0B0h]
mov	[esp+30h], ebp
lea	ebp, [esp+0C0h]
mov	[esp+2Ch], ebp
lea	edi, [esp+50h]
mov	[esp+28h], edi
lea	esi, [esp+60h]
mov	[esp+24h], esi
lea	ebx, [esp+70h]
mov	[esp+20h], ebx
lea	edi, [esp+80h]
mov	[esp+1Ch], edi
lea	esi, [esp+90h]
mov	[esp+18h], esi
lea	ebx, [esp+0A0h]
mov	[esp+14h], ebx
lea	edx, [esp+0D0h]
mov	[esp+10h], edx
lea	eax, [esp+0E0h]
mov	[esp+0Ch], eax
lea	ecx, [esp+0F0h]
mov	[esp+8], ecx
lea	edx, [esp+100h]
mov	[esp+4], edx
lea	eax, [esp+110h]
mov	[esp], eax	
call	_tma_mp_init_multi
test	eax, eax
jz	short loc_64212DF4
add	esp, 12Ch
pop	ebx
pop	esi
pop	edi
pop	ebp
retn
align 4
mov	ecx, [esp+144h]
mov	res, [ecx]
mov	edx, [esp+140h]
mov	ecx, [edx]
cmp	ecx, eax
jg	loc_64212ED8
mov	eax, 55555556h
imul	ecx
sar	ecx, 1Fh
sub	edx, ecx
mov	[esp+4Ch], edx
mov	ecx, edx
shl	ecx, 2
lea	edx, ds:0[ecx*8]
sub	edx, ecx
mov	[esp+8], ebx	
mov	[esp+4], edx	
mov	eax, [esp+140h]
mov	[esp], eax	
mov	[esp+44h], edx
call	_tma_mp_mod_2d
test	eax, eax
jz	loc_64212EE0
			
mov	dword ptr [esp+34h], 0
lea	edx, [esp+0B0h]
mov	[esp+30h], edx
mov	[esp+2Ch], ebp
lea	ecx, [esp+50h]
mov	[esp+28h], ecx
lea	ebp, [esp+60h]
mov	[esp+24h], ebp
lea	edx, [esp+70h]
mov	[esp+20h], edx
mov	[esp+1Ch], edi
mov	[esp+18h], esi
mov	[esp+14h], ebx
lea	ecx, [esp+0D0h]
mov	[esp+10h], ecx
lea	ebp, [esp+0E0h]
mov	[esp+0Ch], ebp
lea	edi, [esp+0F0h]
mov	[esp+8], edi
lea	esi, [esp+100h]
mov	[esp+4], esi
lea	ebx, [esp+110h]
mov	[esp], ebx	
mov	[esp+44h], res
call	_tma_mp_clear_multi
mov	eax, [esp+44h]
add	esp, 12Ch
pop	ebx
pop	esi
pop	edi
pop	ebp
retn
mov	ecx, eax
jmp	loc_64212E0E
align 10h
mov	[esp+4], esi	
mov	ecx, [esp+140h]
mov	[esp], ecx	
call	_tma_mp_copy
test	eax, eax
jnz	ERR
mov	ecx, [esp+4Ch]
mov	[esp+4], ecx	
mov	[esp], esi	
call	_tma_mp_rshd
mov	[esp+8], esi	
mov	eax, [esp+44h]
mov	[esp+4], eax	
mov	[esp], esi	
call	_tma_mp_mod_2d
mov	[esp+4], edi	
mov	edx, [esp+140h]
mov	[esp], edx	
call	_tma_mp_copy
test	eax, eax
jnz	ERR
mov	edx, [esp+4Ch]
shl	edx, 1
mov	[esp+48h], edx
mov	[esp+4], edx	
mov	[esp], edi	
call	_tma_mp_rshd
lea	ecx, [esp+70h]
mov	[esp+8], ecx	
mov	eax, [esp+44h]
mov	[esp+4], eax	
mov	edx, [esp+144h]
mov	[esp], edx	
call	_tma_mp_mod_2d
test	eax, eax
jnz	ERR
lea	ecx, [esp+60h]
mov	[esp+4], ecx	
mov	res, [esp+144h]
mov	[esp], eax	
call	_tma_mp_copy
test	eax, eax
jnz	ERR
mov	ecx, [esp+4Ch]
mov	[esp+4], ecx	
lea	res, [esp+60h]
mov	[esp], eax	
call	_tma_mp_rshd
lea	ecx, [esp+60h]
mov	[esp+8], ecx	
mov	edx, [esp+44h]
mov	[esp+4], edx	
mov	[esp], ecx	
call	_tma_mp_mod_2d
lea	eax, [esp+50h]
mov	[esp+4], eax	
mov	edx, [esp+144h]
mov	[esp], edx	
call	_tma_mp_copy
test	eax, eax
jnz	ERR
mov	edx, [esp+48h]
mov	[esp+4], edx	
lea	ecx, [esp+50h]
mov	[esp], ecx	
call	_tma_mp_rshd
lea	eax, [esp+110h]
mov	[esp+8], eax	
lea	edx, [esp+70h]
mov	[esp+4], edx	
mov	[esp], ebx	
call	_tma_mp_mul
test	eax, eax
jnz	ERR
lea	ecx, [esp+0D0h]
mov	[esp+8], ecx	
lea	res, [esp+50h]
mov	[esp+4], eax	
mov	[esp], edi	
call	_tma_mp_mul
test	eax, eax
jnz	ERR
mov	[esp+4], ebp	
mov	[esp], ebx	
call	_tma_mp_mul_2
test	eax, eax
jnz	ERR
mov	[esp+8], ebp	
mov	[esp+4], esi	
mov	[esp], ebp	
call	_tma_mp_add
test	eax, eax
jnz	ERR
mov	[esp+4], ebp	
mov	[esp], ebp	
call	_tma_mp_mul_2
test	eax, eax
jnz	ERR
mov	[esp+8], ebp	
mov	[esp+4], edi	
mov	[esp], ebp	
call	_tma_mp_add
test	eax, eax
jnz	ERR
lea	res, [esp+0B0h]
mov	[esp+4], eax	
lea	edx, [esp+70h]
mov	[esp], edx	
call	_tma_mp_mul_2
test	eax, eax
jnz	ERR
lea	ecx, [esp+0B0h]
mov	[esp+8], ecx	
lea	edx, [esp+60h]
mov	[esp+4], edx	
mov	[esp], ecx	
call	_tma_mp_add
test	eax, eax
jnz	ERR
lea	res, [esp+0B0h]
mov	[esp+4], eax	
mov	[esp], eax	
call	_tma_mp_mul_2
test	eax, eax
jnz	ERR
lea	ecx, [esp+0B0h]
mov	[esp+8], ecx	
lea	edx, [esp+50h]
mov	[esp+4], edx	
mov	[esp], ecx	
call	_tma_mp_add
test	eax, eax
jnz	ERR
lea	ecx, [esp+100h]
mov	[esp+8], ecx	
lea	res, [esp+0B0h]
mov	[esp+4], eax	
mov	[esp], ebp	
call	_tma_mp_mul
test	eax, eax
jnz	ERR
mov	[esp+4], ebp	
mov	[esp], edi	
call	_tma_mp_mul_2
test	eax, eax
jnz	ERR
mov	[esp+8], ebp	
mov	[esp+4], esi	
mov	[esp], ebp	
call	_tma_mp_add
test	eax, eax
jnz	ERR
mov	[esp+4], ebp	
mov	[esp], ebp	
call	_tma_mp_mul_2
test	eax, eax
jnz	ERR
mov	[esp+8], ebp	
mov	[esp+4], ebx	
mov	[esp], ebp	
call	_tma_mp_add
test	eax, eax
jnz	ERR
lea	res, [esp+0B0h]
mov	[esp+4], eax	
lea	edx, [esp+50h]
mov	[esp], edx	
call	_tma_mp_mul_2
test	eax, eax
jnz	ERR
lea	ecx, [esp+0B0h]
mov	[esp+8], ecx	
lea	edx, [esp+60h]
mov	[esp+4], edx	
mov	[esp], ecx	
call	_tma_mp_add
test	eax, eax
jnz	ERR
lea	res, [esp+0B0h]
mov	[esp+4], eax	
mov	[esp], eax	
call	_tma_mp_mul_2
test	eax, eax
jnz	ERR
lea	ecx, [esp+0B0h]
mov	[esp+8], ecx	
lea	edx, [esp+70h]
mov	[esp+4], edx	
mov	[esp], ecx	
call	_tma_mp_add
test	eax, eax
jnz	ERR
lea	ecx, [esp+0E0h]
mov	[esp+8], ecx	
lea	res, [esp+0B0h]
mov	[esp+4], eax	
mov	[esp], ebp	
call	_tma_mp_mul
test	eax, eax
jnz	ERR
mov	[esp+8], ebp	
mov	[esp+4], esi	
mov	[esp], edi	
call	_tma_mp_add
test	eax, eax
jnz	ERR
mov	[esp+8], ebp	
mov	[esp+4], ebx	
mov	[esp], ebp	
call	_tma_mp_add
test	eax, eax
jnz	ERR
lea	ecx, [esp+0B0h]
mov	[esp+8], ecx	
lea	res, [esp+60h]
mov	[esp+4], eax	
lea	edx, [esp+50h]
mov	[esp], edx	
call	_tma_mp_add
test	eax, eax
jnz	ERR
lea	res, [esp+0B0h]
mov	[esp+8], eax	
lea	edx, [esp+70h]
mov	[esp+4], edx	
mov	[esp], eax	
call	_tma_mp_add
test	eax, eax
jnz	ERR
lea	res, [esp+0F0h]
mov	[esp+8], eax	
lea	ecx, [esp+0B0h]
mov	[esp+4], ecx	
mov	[esp], ebp	
call	_tma_mp_mul
test	eax, eax
jnz	ERR
lea	ecx, [esp+100h]
mov	[esp+8], ecx	
lea	edx, [esp+0D0h]
mov	[esp+4], edx	
mov	[esp], ecx	
call	_tma_mp_sub
test	eax, eax
jnz	ERR
lea	res, [esp+0E0h]
mov	[esp+8], eax	
lea	ecx, [esp+110h]
mov	[esp+4], ecx	
mov	[esp], eax	
call	_tma_mp_sub
test	eax, eax
jnz	ERR
lea	edx, [esp+100h]
mov	[esp+4], edx	
mov	[esp], edx	
call	_tma_mp_div_2
test	eax, eax
jnz	ERR
lea	res, [esp+0E0h]
mov	[esp+4], eax	
mov	[esp], eax	
call	_tma_mp_div_2
test	eax, eax
jnz	ERR
lea	ecx, [esp+0F0h]
mov	[esp+8], ecx	
lea	edx, [esp+110h]
mov	[esp+4], edx	
mov	[esp], ecx	
call	_tma_mp_sub
test	eax, eax
jnz	ERR
lea	res, [esp+0F0h]
mov	[esp+8], eax	
lea	ecx, [esp+0D0h]
mov	[esp+4], ecx	
mov	[esp], eax	
call	_tma_mp_sub
test	eax, eax
jnz	ERR
lea	res, [esp+100h]
mov	[esp+8], eax	
lea	edx, [esp+0F0h]
mov	[esp+4], edx	
mov	[esp], eax	
call	_tma_mp_sub
test	eax, eax
jnz	ERR
lea	ecx, [esp+0E0h]
mov	[esp+8], ecx	
lea	res, [esp+0F0h]
mov	[esp+4], eax	
mov	[esp], ecx	
call	_tma_mp_sub
test	eax, eax
jnz	ERR
mov	[esp+8], ebp	
mov	dword ptr [esp+4], 3 
lea	edx, [esp+110h]
mov	[esp], edx	
call	_tma_mp_mul_2d
test	eax, eax
jnz	ERR
lea	ecx, [esp+100h]
mov	[esp+8], ecx	
mov	[esp+4], ebp	
mov	[esp], ecx	
call	_tma_mp_sub
test	eax, eax
jnz	ERR
mov	[esp+8], ebp	
mov	dword ptr [esp+4], 3 
lea	res, [esp+0D0h]
mov	[esp], eax	
call	_tma_mp_mul_2d
test	eax, eax
jnz	ERR
lea	edx, [esp+0E0h]
mov	[esp+8], edx	
mov	[esp+4], ebp	
mov	[esp], edx	
call	_tma_mp_sub
test	eax, eax
jnz	ERR
lea	ecx, [esp+0F0h]
mov	[esp+8], ecx	
mov	dword ptr [esp+4], 3 
mov	[esp], ecx	
call	_tma_mp_mul_d
test	eax, eax
jnz	ERR
lea	edx, [esp+0F0h]
mov	[esp+8], edx	
lea	res, [esp+100h]
mov	[esp+4], eax	
mov	[esp], edx	
call	_tma_mp_sub
test	eax, eax
jnz	ERR
lea	ecx, [esp+0F0h]
mov	[esp+8], ecx	
lea	edx, [esp+0E0h]
mov	[esp+4], edx	
mov	[esp], ecx	
call	_tma_mp_sub
test	eax, eax
jnz	ERR
lea	ecx, [esp+100h]
mov	[esp+8], ecx	
lea	res, [esp+0F0h]
mov	[esp+4], eax	
mov	[esp], ecx	
call	_tma_mp_sub
test	eax, eax
jnz	ERR
lea	edx, [esp+0E0h]
mov	[esp+8], edx	
lea	ecx, [esp+0F0h]
mov	[esp+4], ecx	
mov	[esp], edx	
call	_tma_mp_sub
test	eax, eax
jnz	ERR
mov	dword ptr [esp+8], 0 
lea	res, [esp+100h]
mov	[esp+4], eax	
mov	[esp], eax	
call	_tma_mp_div_3
test	eax, eax
jnz	ERR
mov	dword ptr [esp+8], 0 
lea	edx, [esp+0E0h]
mov	[esp+4], edx	
mov	[esp], edx	
call	_tma_mp_div_3
test	eax, eax
jnz	ERR
mov	res, [esp+4Ch]
mov	[esp+4], eax	
lea	ecx, [esp+100h]
mov	[esp], ecx	
call	_tma_mp_lshd
test	eax, eax
jnz	ERR
mov	ecx, [esp+48h]
mov	[esp+4], ecx	
lea	edx, [esp+0F0h]
mov	[esp], edx	
call	_tma_mp_lshd
test	eax, eax
jnz	ERR
imul	edx, [esp+4Ch],	3
mov	[esp+4], edx	
lea	res, [esp+0E0h]
mov	[esp], eax	
call	_tma_mp_lshd
test	eax, eax
jnz	ERR
mov	res, [esp+4Ch]
shl	eax, 2
mov	[esp+4], eax	
lea	ecx, [esp+0D0h]
mov	[esp], ecx	
call	_tma_mp_lshd
test	eax, eax
jnz	ERR
mov	res, [esp+148h]
mov	[esp+8], eax	
lea	ecx, [esp+100h]
mov	[esp+4], ecx	
lea	edx, [esp+110h]
mov	[esp], edx	
call	_tma_mp_add
test	eax, eax
jnz	ERR
mov	[esp+8], ebp	
lea	ecx, [esp+0E0h]
mov	[esp+4], ecx	
lea	edx, [esp+0F0h]
mov	[esp], edx	
call	_tma_mp_add
test	eax, eax
jnz	ERR
mov	[esp+8], ebp	
mov	[esp+4], ebp	
lea	res, [esp+0D0h]
mov	[esp], eax	
call	_tma_mp_add
test	eax, eax
jnz	ERR
mov	edx, [esp+148h]
mov	[esp+8], edx	
mov	[esp+4], edx	
mov	[esp], ebp	
call	_tma_mp_add
jmp	ERR
public _tma_mp_mul
			
push	ebp
push	edi
push	esi
push	ebx
sub	esp, 2Ch
mov	res, [esp+3Ch+a]
mov	edx, [esp+3Ch+b]
mov	ebx, [esp+3Ch+c]
mov	esi, [res+8]
mov	ecx, [edx+8]
mov	[esp+3Ch+var_20], ecx
mov	ebp, [edx]
mov	edi, [res]
mov	ecx, edi
cmp	edi, ebp
jle	short loc_642136AD
mov	ecx, ebp
cmp	ecx, _TOOM_MUL_CUTOFF
jge	short loc_64213700
cmp	ecx, _KARATSUBA_MUL_CUTOFF
jge	short loc_64213724
lea	edi, [edi+ebp+1]
cmp	digs, 1FFh
jg	short loc_642136D1
cmp	ecx, 100h
jle	short loc_64213738
mov	[esp+3Ch+var_30], digs 
mov	[esp+3Ch+var_34], c_0 
mov	[esp+3Ch+var_38], b_0 
mov	[esp+3Ch+var_3C], res 
call	_s_tma_mp_mul_digs
			
mov	edx, [c_0]
test	edx, edx
jle	short loc_64213716
xor	edx, edx
cmp	esi, [esp+3Ch+var_20]
setnz	dl
mov	[c_0+8], neg
add	esp, 2Ch
pop	c_0
pop	esi
pop	digs
pop	ebp
retn
align 10h
mov	[esp+3Ch+var_34], c_0 
mov	[esp+3Ch+var_38], b_0 
mov	[esp+3Ch+var_3C], res 
call	_tma_mp_toom_mul
mov	edx, [c_0]
test	edx, edx
jg	short loc_642136EB
xor	edx, edx
mov	[c_0+8], neg
add	esp, 2Ch
pop	c_0
pop	esi
pop	digs
pop	ebp
retn
align 4
mov	[esp+3Ch+var_34], c_0 
mov	[esp+3Ch+var_38], b_0 
mov	[esp+3Ch+var_3C], res 
call	_tma_mp_karatsuba_mul
jmp	short loc_642136E5
align 4
mov	[esp+3Ch+var_30], digs 
mov	[esp+3Ch+var_34], c_0 
mov	[esp+3Ch+var_38], b_0 
mov	[esp+3Ch+var_3C], res 
call	_fast_s_tma_mp_mul_digs
jmp	short loc_642136E5
align 10h
public _tma_mp_reduce
push	ebp
push	edi
push	esi
push	ebx
sub	esp, 3Ch
mov	ebx, [esp+4Ch+x]
mov	edx, [esp+4Ch+m]
mov	eax, [edx]
mov	[esp+4Ch+var_30], eax
mov	[esp+4Ch+var_4C], 80h 
call	_malloc
mov	edx, eax
test	eax, eax
jz	loc_64213D88
xor	ecx, ecx
mov	dword ptr [eax+ecx*4], 0
mov	dword ptr [eax+ecx*4+4], 0
mov	dword ptr [eax+ecx*4+8], 0
mov	dword ptr [eax+ecx*4+0Ch], 0
mov	dword ptr [eax+ecx*4+10h], 0
mov	dword ptr [eax+ecx*4+14h], 0
mov	dword ptr [eax+ecx*4+18h], 0
mov	dword ptr [eax+ecx*4+1Ch], 0
add	ecx, 8
cmp	ecx, 20h
jnz	short loc_6421377D
mov	[esp+4Ch+q.dp],	eax
mov	[esp+4Ch+q.used], 0
mov	[esp+4Ch+q.alloc], 20h
mov	[esp+4Ch+q.sign], 0
lea	esi, [esp+4Ch+q]
cmp	x_0, esi
jz	loc_642139CB
mov	edi, [x_0]
cmp	edi, 20h
jg	loc_642140A0
mov	[esp+4Ch+var_38], 0
mov	ecx, [x_0+0Ch]
test	edi, edi
jle	loc_642140F8
lea	ebp, [edi-1]
and	ebp, 7
mov	eax, [ecx]
mov	[edx], eax
add	edx, 4
mov	eax, 1
cmp	eax, edi
jge	loc_642138CD
test	ebp, ebp
jz	short loc_6421388D
cmp	ebp, 1
jz	short loc_64213880
cmp	ebp, 2
jz	short loc_64213877
cmp	ebp, 3
jz	short loc_6421386E
cmp	ebp, 4
jz	short loc_64213865
cmp	ebp, 5
jz	short loc_6421385C
cmp	ebp, 6
jz	short loc_64213853
mov	eax, [ecx+4]
mov	[edx], eax
add	edx, 4
mov	eax, 2
mov	ebp, [ecx+eax*4]
mov	[edx], ebp
add	edx, 4
inc	eax
mov	ebp, [ecx+eax*4]
mov	[edx], ebp
add	edx, 4
inc	eax
mov	ebp, [ecx+eax*4]
mov	[edx], ebp
add	edx, 4
inc	eax
mov	ebp, [ecx+eax*4]
mov	[edx], ebp
add	edx, 4
inc	eax
mov	ebp, [ecx+eax*4]
mov	[edx], ebp
add	edx, 4
inc	eax
mov	ebp, [ecx+eax*4]
mov	[edx], ebp
add	edx, 4
inc	eax
cmp	eax, edi
jge	short loc_642138CD
			
mov	ebp, [ecx+eax*4]
mov	[edx], ebp
mov	ebp, [ecx+eax*4+4]
mov	[edx+4], ebp
mov	ebp, [ecx+eax*4+8]
mov	[edx+8], ebp
mov	ebp, [ecx+eax*4+0Ch]
mov	[edx+0Ch], ebp
mov	ebp, [ecx+eax*4+10h]
mov	[edx+10h], ebp
mov	ebp, [ecx+eax*4+14h]
mov	[edx+14h], ebp
mov	ebp, [ecx+eax*4+18h]
mov	[edx+18h], ebp
mov	ebp, [ecx+eax*4+1Ch]
mov	[edx+1Ch], ebp
add	edx, 20h
add	eax, 8
cmp	eax, edi
jl	short loc_6421388D
			
cmp	eax, [esp+4Ch+var_38]
jge	loc_642139C0
mov	ecx, eax
not	ecx
add	ecx, [esp+4Ch+var_38]
mov	[esp+4Ch+var_34], ecx
and	[esp+4Ch+var_34], 7
mov	dword ptr [edx], 0
lea	ecx, [edx+4]
lea	ebp, [eax+1]
cmp	ebp, [esp+4Ch+var_38]
jge	loc_642139C0
cmp	[esp+4Ch+var_34], 0
jz	short loc_6421397D
cmp	[esp+4Ch+var_34], 1
jz	short loc_6421396D
cmp	[esp+4Ch+var_34], 2
jz	short loc_64213963
cmp	[esp+4Ch+var_34], 3
jz	short loc_64213959
cmp	[esp+4Ch+var_34], 4
jz	short loc_6421394F
cmp	[esp+4Ch+var_34], 5
jz	short loc_64213945
cmp	[esp+4Ch+var_34], 6
jz	short loc_6421393B
mov	dword ptr [ecx], 0
lea	ecx, [edx+8]
lea	ebp, [eax+2]
mov	dword ptr [ecx], 0
add	ecx, 4
inc	ebp
mov	dword ptr [ecx], 0
add	ecx, 4
inc	ebp
mov	dword ptr [ecx], 0
add	ecx, 4
inc	ebp
mov	dword ptr [ecx], 0
add	ecx, 4
inc	ebp
mov	dword ptr [ecx], 0
add	ecx, 4
inc	ebp
mov	dword ptr [ecx], 0
add	ecx, 4
inc	ebp
cmp	ebp, [esp+4Ch+var_38]
jge	short loc_642139C0
			
mov	dword ptr [ecx], 0
mov	dword ptr [ecx+4], 0
mov	dword ptr [ecx+8], 0
mov	dword ptr [ecx+0Ch], 0
mov	dword ptr [ecx+10h], 0
mov	dword ptr [ecx+14h], 0
mov	dword ptr [ecx+18h], 0
mov	dword ptr [ecx+1Ch], 0
add	ecx, 20h
add	ebp, 8
cmp	ebp, [esp+4Ch+var_38]
jl	short loc_6421397D
			
mov	[esp+4Ch+q.used], edi
mov	edi, [x_0+8]
mov	[esp+4Ch+q.sign], edi
mov	eax, [esp+4Ch+var_30]
dec	eax
test	eax, eax
jle	loc_64213BBB
mov	ebp, [esp+4Ch+q.used]
cmp	eax, ebp
jge	loc_64213DCC
mov	ecx, [esp+4Ch+q.dp]
mov	edx, ebp
sub	edx, eax
mov	[esp+4Ch+var_34], edx
test	edx, edx
jle	loc_642140FF
lea	edx, [ecx+eax*4]
mov	edi, [esp+4Ch+var_34]
dec	edi
and	edi, 7
mov	eax, [edx]
mov	[ecx], eax
mov	eax, 1
cmp	eax, [esp+4Ch+var_34]
jz	loc_64213AC9
test	edi, edi
jz	short loc_64213A73
cmp	edi, 1
jz	short loc_64213A66
cmp	edi, 2
jz	short loc_64213A5F
cmp	edi, 3
jz	short loc_64213A58
cmp	edi, 4
jz	short loc_64213A51
cmp	edi, 5
jz	short loc_64213A4A
cmp	edi, 6
jz	short loc_64213A43
mov	edi, [edx+4]
mov	[ecx+eax*4], edi
mov	eax, 2
mov	edi, [edx+eax*4]
mov	[ecx+eax*4], edi
inc	eax
mov	edi, [edx+eax*4]
mov	[ecx+eax*4], edi
inc	eax
mov	edi, [edx+eax*4]
mov	[ecx+eax*4], edi
inc	eax
mov	edi, [edx+eax*4]
mov	[ecx+eax*4], edi
inc	eax
mov	edi, [edx+eax*4]
mov	[ecx+eax*4], edi
inc	eax
mov	edi, [edx+eax*4]
mov	[ecx+eax*4], edi
inc	eax
cmp	eax, [esp+4Ch+var_34]
jz	short loc_64213AC9
mov	[esp+4Ch+var_38], x_0
mov	x_0, [edx+eax*4]
mov	[ecx+eax*4], ebx
lea	edi, [eax+1]
mov	ebx, [edx+edi*4]
mov	[ecx+edi*4], ebx
lea	edi, [eax+2]
mov	ebx, [edx+edi*4]
mov	[ecx+edi*4], ebx
lea	edi, [eax+3]
mov	ebx, [edx+edi*4]
mov	[ecx+edi*4], ebx
lea	edi, [eax+4]
mov	ebx, [edx+edi*4]
mov	[ecx+edi*4], ebx
lea	edi, [eax+5]
mov	ebx, [edx+edi*4]
mov	[ecx+edi*4], ebx
lea	edi, [eax+6]
mov	ebx, [edx+edi*4]
mov	[ecx+edi*4], ebx
lea	edi, [eax+7]
mov	ebx, [edx+edi*4]
mov	[ecx+edi*4], ebx
add	eax, 8
cmp	eax, [esp+4Ch+var_34]
jnz	short loc_64213A77
mov	ebx, [esp+4Ch+var_38]
			
lea	ecx, [ecx+eax*4]
cmp	ebp, eax
jle	loc_64213BB3
mov	edx, eax
not	edx
add	edx, ebp
and	edx, 7
mov	[esp+4Ch+var_38], edx
mov	dword ptr [ecx], 0
lea	edx, [ecx+4]
lea	edi, [eax+1]
cmp	ebp, edi
jle	loc_64213BB3
cmp	[esp+4Ch+var_38], 0
jz	short loc_64213B72
cmp	[esp+4Ch+var_38], 1
jz	short loc_64213B64
cmp	[esp+4Ch+var_38], 2
jz	short loc_64213B5A
cmp	[esp+4Ch+var_38], 3
jz	short loc_64213B50
cmp	[esp+4Ch+var_38], 4
jz	short loc_64213B46
cmp	[esp+4Ch+var_38], 5
jz	short loc_64213B3C
cmp	[esp+4Ch+var_38], 6
jz	short loc_64213B32
mov	dword ptr [edx], 0
lea	edx, [ecx+8]
lea	edi, [eax+2]
mov	dword ptr [edx], 0
add	edx, 4
inc	edi
mov	dword ptr [edx], 0
add	edx, 4
inc	edi
mov	dword ptr [edx], 0
add	edx, 4
inc	edi
mov	dword ptr [edx], 0
add	edx, 4
inc	edi
mov	dword ptr [edx], 0
add	edx, 4
inc	edi
mov	dword ptr [edx], 0
add	edx, 4
inc	edi
cmp	ebp, edi
jle	short loc_64213BB3
			
mov	dword ptr [edx], 0
mov	dword ptr [edx+4], 0
mov	dword ptr [edx+8], 0
mov	dword ptr [edx+0Ch], 0
mov	dword ptr [edx+10h], 0
mov	dword ptr [edx+14h], 0
mov	dword ptr [edx+18h], 0
mov	dword ptr [edx+1Ch], 0
add	edx, 20h
add	edi, 8
cmp	ebp, edi
jg	short loc_64213B72
			
mov	ebp, [esp+4Ch+var_34]
mov	[esp+4Ch+q.used], ebp
			
cmp	[esp+4Ch+var_30], 8000000h
ja	loc_64213D98
mov	edi, [esp+4Ch+var_30]
mov	[esp+4Ch+digs],	edi 
mov	[esp+4Ch+c], esi 
mov	eax, [esp+4Ch+mu]
mov	[esp+4Ch+b], eax 
mov	[esp+4Ch+var_4C], esi 
call	_s_tma_mp_mul_high_digs
test	eax, eax
jnz	loc_64213DB4
mov	edi, [esp+4Ch+var_30]
inc	edi
test	edi, edi
jle	loc_64213CEC
mov	edx, [esp+4Ch+q.used]
mov	[esp+4Ch+var_34], edx
cmp	edi, edx
jl	loc_64213EB8
mov	[esp+4Ch+q.sign], 0
mov	[esp+4Ch+q.used], 0
mov	edx, [esp+4Ch+q.dp]
mov	ebp, [esp+4Ch+q.alloc]
test	ebp, ebp
jle	loc_64213CEC
lea	ecx, [ebp-1]
and	ecx, 7
mov	dword ptr [edx], 0
mov	res, 1
cmp	eax, ebp
jz	loc_64213CEC
test	ecx, ecx
jz	short loc_64213CA5
cmp	ecx, 1
jz	short loc_64213C99
cmp	ecx, 2
jz	short loc_64213C91
cmp	ecx, 3
jz	short loc_64213C89
cmp	ecx, 4
jz	short loc_64213C81
cmp	ecx, 5
jz	short loc_64213C79
cmp	ecx, 6
jz	short loc_64213C71
mov	dword ptr [edx+eax*4], 0
mov	eax, 2
mov	dword ptr [edx+eax*4], 0
inc	eax
mov	dword ptr [edx+eax*4], 0
inc	eax
mov	dword ptr [edx+eax*4], 0
inc	eax
mov	dword ptr [edx+eax*4], 0
inc	eax
mov	dword ptr [edx+eax*4], 0
inc	eax
mov	dword ptr [edx+eax*4], 0
inc	eax
cmp	eax, ebp
jz	short loc_64213CEC
			
mov	dword ptr [edx+eax*4], 0
mov	dword ptr [edx+eax*4+4], 0
mov	dword ptr [edx+eax*4+8], 0
mov	dword ptr [edx+eax*4+0Ch], 0
mov	dword ptr [edx+eax*4+10h], 0
mov	dword ptr [edx+eax*4+14h], 0
mov	dword ptr [edx+eax*4+18h], 0
mov	dword ptr [edx+eax*4+1Ch], 0
add	eax, 8
cmp	eax, ebp
jnz	short loc_64213CA5
nop
			
mov	[esp+4Ch+c], x_0 
lea	ebp, ds:0[edi*4]
lea	res, ds:0[ebp*8]
sub	eax, ebp
mov	[esp+4Ch+b], eax 
mov	[esp+4Ch+var_4C], x_0 
call	_tma_mp_mod_2d
test	eax, eax
jnz	loc_64213DB4
mov	[esp+4Ch+digs],	edi 
mov	[esp+4Ch+c], esi 
mov	edx, [esp+4Ch+m]
mov	[esp+4Ch+b], edx 
mov	[esp+4Ch+var_4C], esi 
call	_s_tma_mp_mul_digs
test	eax, eax
jnz	loc_64213DB4
mov	[esp+4Ch+c], x_0 
mov	[esp+4Ch+b], esi 
mov	[esp+4Ch+var_4C], x_0 
call	_tma_mp_sub
mov	ebp, eax
test	eax, eax
jnz	CLEANUP
cmp	dword ptr [x_0+8], 1
jz	loc_6421410D
mov	edi, [esp+4Ch+m]
mov	[esp+4Ch+b], m_0
mov	[esp+4Ch+var_4C], x_0 
call	_tma_mp_cmp
inc	eax
jz	CLEANUP
mov	[esp+4Ch+c], x_0 
mov	[esp+4Ch+b], m_0 
mov	[esp+4Ch+var_4C], x_0 
call	_s_tma_mp_sub
test	eax, eax
jz	short loc_64213D5C
jmp	short loc_64213DB4
align 4
			
mov	eax, 0FFFFFFFEh
add	esp, 3Ch
pop	x_0
pop	esi
pop	edi
pop	ebp
retn
align 4
mov	[esp+4Ch+c], esi 
mov	ecx, [esp+4Ch+mu]
mov	[esp+4Ch+b], ecx 
mov	[esp+4Ch+var_4C], esi 
call	_tma_mp_mul
test	eax, eax
jz	loc_64213BED
			
mov	[esp+4Ch+var_4C], esi 
mov	[esp+4Ch+var_3C], res
call	_tma_mp_clear
mov	eax, [esp+4Ch+var_3C]
add	esp, 3Ch
pop	x_0
pop	esi
pop	edi
pop	res
retn
mov	[esp+4Ch+q.sign], 0
mov	[esp+4Ch+q.used], 0
mov	edx, [esp+4Ch+q.dp]
mov	edi, [esp+4Ch+q.alloc]
test	edi, edi
jle	loc_64213BBB
lea	ecx, [edi-1]
and	ecx, 7
mov	dword ptr [edx], 0
mov	eax, 1
cmp	eax, edi
jz	loc_64213BBB
test	ecx, ecx
jz	short loc_64213E6B
cmp	ecx, 1
jz	short loc_64213E5B
cmp	ecx, 2
jz	short loc_64213E53
cmp	ecx, 3
jz	short loc_64213E4B
cmp	ecx, 4
jz	short loc_64213E43
cmp	ecx, 5
jz	short loc_64213E3B
cmp	ecx, 6
jz	short loc_64213E33
mov	dword ptr [edx+eax*4], 0
mov	eax, 2
mov	dword ptr [edx+eax*4], 0
inc	eax
mov	dword ptr [edx+eax*4], 0
inc	eax
mov	dword ptr [edx+eax*4], 0
inc	eax
mov	dword ptr [edx+eax*4], 0
inc	eax
mov	dword ptr [edx+eax*4], 0
inc	eax
mov	dword ptr [edx+eax*4], 0
inc	eax
cmp	eax, edi
jz	loc_64213BBB
			
mov	dword ptr [edx+eax*4], 0
mov	dword ptr [edx+eax*4+4], 0
mov	dword ptr [edx+eax*4+8], 0
mov	dword ptr [edx+eax*4+0Ch], 0
mov	dword ptr [edx+eax*4+10h], 0
mov	dword ptr [edx+eax*4+14h], 0
mov	dword ptr [edx+eax*4+18h], 0
mov	dword ptr [edx+eax*4+1Ch], 0
add	eax, 8
cmp	eax, edi
jnz	short loc_64213E6B
jmp	loc_64213BBB
align 4
mov	ecx, [esp+4Ch+q.dp]
mov	ebp, [esp+4Ch+var_34]
sub	ebp, edi
mov	[esp+4Ch+var_30], ebp
test	ebp, ebp
jle	loc_64214106
lea	edx, [ecx+edi*4]
mov	ebp, [esp+4Ch+var_30]
dec	ebp
and	ebp, 7
mov	res, [edx]
mov	[ecx], eax
mov	eax, 1
cmp	eax, [esp+4Ch+var_30]
jz	loc_64213F9F
test	ebp, ebp
jz	short loc_64213F49
cmp	ebp, 1
jz	short loc_64213F3C
cmp	ebp, 2
jz	short loc_64213F35
cmp	ebp, 3
jz	short loc_64213F2E
cmp	ebp, 4
jz	short loc_64213F27
cmp	ebp, 5
jz	short loc_64213F20
cmp	ebp, 6
jz	short loc_64213F19
mov	ebp, [edx+4]
mov	[ecx+eax*4], ebp
mov	eax, 2
mov	ebp, [edx+eax*4]
mov	[ecx+eax*4], ebp
inc	eax
mov	ebp, [edx+eax*4]
mov	[ecx+eax*4], ebp
inc	eax
mov	ebp, [edx+eax*4]
mov	[ecx+eax*4], ebp
inc	eax
mov	ebp, [edx+eax*4]
mov	[ecx+eax*4], ebp
inc	eax
mov	ebp, [edx+eax*4]
mov	[ecx+eax*4], ebp
inc	eax
mov	ebp, [edx+eax*4]
mov	[ecx+eax*4], ebp
inc	eax
cmp	eax, [esp+4Ch+var_30]
jz	short loc_64213F9F
mov	[esp+4Ch+var_38], x_0
mov	x_0, [edx+eax*4]
mov	[ecx+eax*4], ebx
lea	ebp, [eax+1]
mov	ebx, [edx+ebp*4]
mov	[ecx+ebp*4], ebx
lea	ebp, [eax+2]
mov	ebx, [edx+ebp*4]
mov	[ecx+ebp*4], ebx
lea	ebp, [eax+3]
mov	ebx, [edx+ebp*4]
mov	[ecx+ebp*4], ebx
lea	ebp, [eax+4]
mov	ebx, [edx+ebp*4]
mov	[ecx+ebp*4], ebx
lea	ebp, [eax+5]
mov	ebx, [edx+ebp*4]
mov	[ecx+ebp*4], ebx
lea	ebp, [eax+6]
mov	ebx, [edx+ebp*4]
mov	[ecx+ebp*4], ebx
lea	ebp, [eax+7]
mov	ebx, [edx+ebp*4]
mov	[ecx+ebp*4], ebx
add	eax, 8
cmp	eax, [esp+4Ch+var_30]
jnz	short loc_64213F4D
mov	ebx, [esp+4Ch+var_38]
			
lea	ecx, [ecx+eax*4]
cmp	[esp+4Ch+var_34], eax
jle	loc_64214093
mov	edx, eax
not	edx
add	edx, [esp+4Ch+var_34]
and	edx, 7
mov	[esp+4Ch+var_38], edx
mov	dword ptr [ecx], 0
lea	edx, [ecx+4]
lea	ebp, [eax+1]
cmp	[esp+4Ch+var_34], ebp
jle	loc_64214093
cmp	[esp+4Ch+var_38], 0
jz	short loc_64214050
cmp	[esp+4Ch+var_38], 1
jz	short loc_64214040
cmp	[esp+4Ch+var_38], 2
jz	short loc_64214036
cmp	[esp+4Ch+var_38], 3
jz	short loc_6421402C
cmp	[esp+4Ch+var_38], 4
jz	short loc_64214022
cmp	[esp+4Ch+var_38], 5
jz	short loc_64214018
cmp	[esp+4Ch+var_38], 6
jz	short loc_6421400E
mov	dword ptr [edx], 0
lea	edx, [ecx+8]
lea	ebp, [eax+2]
mov	dword ptr [edx], 0
add	edx, 4
inc	ebp
mov	dword ptr [edx], 0
add	edx, 4
inc	ebp
mov	dword ptr [edx], 0
add	edx, 4
inc	ebp
mov	dword ptr [edx], 0
add	edx, 4
inc	ebp
mov	dword ptr [edx], 0
add	edx, 4
inc	ebp
mov	dword ptr [edx], 0
add	edx, 4
inc	ebp
cmp	[esp+4Ch+var_34], ebp
jle	short loc_64214093
			
mov	dword ptr [edx], 0
mov	dword ptr [edx+4], 0
mov	dword ptr [edx+8], 0
mov	dword ptr [edx+0Ch], 0
mov	dword ptr [edx+10h], 0
mov	dword ptr [edx+14h], 0
mov	dword ptr [edx+18h], 0
mov	dword ptr [edx+1Ch], 0
add	edx, 20h
add	ebp, 8
cmp	[esp+4Ch+var_34], ebp
jg	short loc_64214050
			
mov	ecx, [esp+4Ch+var_30]
mov	[esp+4Ch+q.used], ecx
jmp	loc_64213CEC
and	edi, 0FFFFFFE0h
add	edi, 40h
lea	ecx, ds:0[edi*4]
mov	[esp+4Ch+b], ecx 
mov	[esp+4Ch+var_4C], eax 
call	_realloc
mov	edx, eax
test	eax, eax
jz	loc_64213D88
mov	[esp+4Ch+q.dp],	eax
mov	ecx, [esp+4Ch+q.alloc]
mov	[esp+4Ch+q.alloc], edi
lea	eax, [eax+ecx*4]
jmp	short loc_642140DE
mov	dword ptr [eax], 0
inc	ecx
add	eax, 4
cmp	edi, ecx
jg	short loc_642140D4
mov	edi, [x_0]
mov	ebp, [esp+4Ch+q.used]
mov	[esp+4Ch+var_38], ebp
jmp	loc_642137FF
			
mov	eax, res
jmp	loc_64213DB4
xor	eax, eax
jmp	loc_642138CD
xor	eax, eax
jmp	loc_64213ACC
xor	res, res
jmp	loc_64213FA2
mov	[esp+4Ch+q.sign], 0
mov	edx, [esp+4Ch+q.dp]
mov	ecx, [esp+4Ch+q.alloc]
xor	res, res
jmp	short loc_64214129
mov	dword ptr [edx+eax*4], 0
inc	eax
cmp	eax, ecx
jl	short loc_64214121
mov	dword ptr [edx], 1
mov	[esp+4Ch+q.used], 1
mov	[esp+4Ch+b], edi 
mov	[esp+4Ch+var_4C], esi 
call	_tma_mp_lshd
test	eax, eax
jnz	loc_64213DB4
mov	[esp+4Ch+c], x_0 
mov	[esp+4Ch+b], esi 
mov	[esp+4Ch+var_4C], x_0 
call	_tma_mp_add
test	eax, eax
jnz	loc_64213DB4
jmp	loc_64213D58
public _tma_mp_karatsuba_mul
push	ebp
push	edi
push	esi
push	ebx
sub	esp, 0BCh
mov	esi, [esp+0CCh+a]
mov	edi, [esp+0CCh+b_1]
mov	eax, [edi]
mov	ebx, [esi]
cmp	B, eax
jle	short loc_6421418E
mov	B, eax
sar	B, 1
lea	ebp, [B+40h]
mov	eax, B
and	eax, 8000001Fh
js	loc_64214414
sub	ebp, eax
lea	eax, ds:0[ebp*4]
mov	[esp+0CCh+var_CC], eax 
call	_malloc
test	eax, eax
jz	loc_6421442C
mov	[esp+0CCh+x0.dp], eax
mov	[esp+0CCh+x0.used], 0
mov	[esp+0CCh+x0.alloc], ebp
mov	[esp+0CCh+x0.sign], 0
test	ebp, ebp
jle	loc_642142A6
lea	ecx, [ebp-1]
and	ecx, 7
mov	dword ptr [eax], 0
mov	edx, 1
cmp	edx, ebp
jz	loc_642142A6
test	ecx, ecx
jz	short loc_64214260
cmp	ecx, 1
jz	short loc_64214254
cmp	ecx, 2
jz	short loc_6421424C
cmp	ecx, 3
jz	short loc_64214244
cmp	ecx, 4
jz	short loc_6421423C
cmp	ecx, 5
jz	short loc_64214234
cmp	ecx, 6
jz	short loc_6421422C
mov	dword ptr [eax+edx*4], 0
mov	edx, 2
mov	dword ptr [eax+edx*4], 0
inc	edx
mov	dword ptr [eax+edx*4], 0
inc	edx
mov	dword ptr [eax+edx*4], 0
inc	edx
mov	dword ptr [eax+edx*4], 0
inc	edx
mov	dword ptr [eax+edx*4], 0
inc	edx
mov	dword ptr [eax+edx*4], 0
inc	edx
cmp	edx, ebp
jz	short loc_642142A6
			
mov	dword ptr [eax+edx*4], 0
mov	dword ptr [eax+edx*4+4], 0
mov	dword ptr [eax+edx*4+8], 0
mov	dword ptr [eax+edx*4+0Ch], 0
mov	dword ptr [eax+edx*4+10h], 0
mov	dword ptr [eax+edx*4+14h], 0
mov	dword ptr [eax+edx*4+18h], 0
mov	dword ptr [eax+edx*4+1Ch], 0
add	edx, 8
cmp	edx, ebp
jnz	short loc_64214260
			
mov	eax, [a_0]
sub	eax, B
lea	ebp, [eax+40h]
and	eax, 8000001Fh
js	loc_64214420
sub	ebp, eax
lea	eax, ds:0[ebp*4]
mov	[esp+0CCh+var_CC], eax 
call	_malloc
mov	[esp+0CCh+x1.dp], eax
test	eax, eax
jz	loc_6421443C
test	ebp, ebp
jle	loc_642143A1
lea	ecx, [ebp-1]
and	ecx, 7
mov	dword ptr [eax], 0
mov	edx, 1
cmp	edx, ebp
jz	loc_642143A1
test	ecx, ecx
jz	short loc_6421435B
cmp	ecx, 1
jz	short loc_6421434F
cmp	ecx, 2
jz	short loc_64214347
cmp	ecx, 3
jz	short loc_6421433F
cmp	ecx, 4
jz	short loc_64214337
cmp	ecx, 5
jz	short loc_6421432F
cmp	ecx, 6
jz	short loc_64214327
mov	dword ptr [eax+edx*4], 0
mov	edx, 2
mov	dword ptr [eax+edx*4], 0
inc	edx
mov	dword ptr [eax+edx*4], 0
inc	edx
mov	dword ptr [eax+edx*4], 0
inc	edx
mov	dword ptr [eax+edx*4], 0
inc	edx
mov	dword ptr [eax+edx*4], 0
inc	edx
mov	dword ptr [eax+edx*4], 0
inc	edx
cmp	edx, ebp
jz	short loc_642143A1
			
mov	dword ptr [eax+edx*4], 0
mov	dword ptr [eax+edx*4+4], 0
mov	dword ptr [eax+edx*4+8], 0
mov	dword ptr [eax+edx*4+0Ch], 0
mov	dword ptr [eax+edx*4+10h], 0
mov	dword ptr [eax+edx*4+14h], 0
mov	dword ptr [eax+edx*4+18h], 0
mov	dword ptr [eax+edx*4+1Ch], 0
add	edx, 8
cmp	edx, ebp
jnz	short loc_6421435B
			
mov	[esp+0CCh+x1.used], 0
mov	[esp+0CCh+x1.alloc], ebp
mov	[esp+0CCh+x1.sign], 0
mov	[esp+0CCh+size], B 
lea	ebp, [esp+0CCh+y0]
mov	[esp+0CCh+var_CC], ebp 
call	_tma_mp_init_size
test	eax, eax
jz	short loc_6421444C
mov	eax, 0FFFFFFFEh
lea	a_0, [esp+0CCh+x0]
lea	b_0, [esp+0CCh+x1]
mov	[esp+0CCh+var_CC], edi 
mov	[esp+0CCh+var_A4], err
call	_tma_mp_clear
mov	eax, [esp+0CCh+var_A4]
mov	[esp+0CCh+var_CC], esi
mov	[esp+0CCh+var_A4], err
call	_tma_mp_clear
mov	eax, [esp+0CCh+var_A4]
add	esp, 0BCh
pop	B
pop	esi
pop	edi
pop	ebp
retn
align 4
dec	eax
or	eax, 0FFFFFFE0h
inc	eax
jmp	loc_642141A0
align 10h
dec	eax
or	eax, 0FFFFFFE0h
inc	eax
jmp	loc_642142B8
align 4
mov	eax, 0FFFFFFFEh
add	esp, 0BCh
pop	B
pop	a_0
pop	b_0
pop	ebp
retn
mov	eax, 0FFFFFFFEh
lea	a_0, [esp+0CCh+x0]
jmp	short X0
align 4
mov	ecx, [b_0]
sub	ecx, B
mov	[esp+0CCh+size], ecx 
lea	edx, [esp+0CCh+y1]
mov	[esp+0CCh+var_CC], edx 
call	_tma_mp_init_size
test	eax, eax
jz	short loc_6421448C
mov	eax, 0FFFFFFFEh
lea	a_0, [esp+0CCh+x0]
lea	b_0, [esp+0CCh+x1]
mov	[esp+0CCh+var_CC], ebp 
mov	[esp+0CCh+var_A4], err
call	_tma_mp_clear
mov	eax, [esp+0CCh+var_A4]
jmp	X1
lea	edx, [B+B]
mov	[esp+0CCh+b], edx
mov	[esp+0CCh+size], edx 
lea	eax, [esp+0CCh+t1]
mov	[esp+0CCh+var_CC], eax 
call	_tma_mp_init_size
test	eax, eax
jz	short loc_642144D0
mov	eax, 0FFFFFFFEh
lea	a_0, [esp+0CCh+x0]
lea	b_0, [esp+0CCh+x1]
lea	ecx, [esp+0CCh+y1]
mov	[esp+0CCh+var_CC], ecx 
mov	[esp+0CCh+var_A4], err
call	_tma_mp_clear
mov	eax, [esp+0CCh+var_A4]
jmp	short Y0
mov	eax, [esp+0CCh+b]
mov	[esp+0CCh+size], eax 
lea	ecx, [esp+0CCh+x0y0]
mov	[esp+0CCh+var_CC], ecx 
call	_tma_mp_init_size
test	eax, eax
jz	short loc_64214511
mov	eax, 0FFFFFFFEh
lea	a_0, [esp+0CCh+x0]
lea	b_0, [esp+0CCh+x1]
lea	B, [esp+0CCh+t1]
mov	[esp+0CCh+var_CC], ebx 
mov	[esp+0CCh+var_A4], err
call	_tma_mp_clear
mov	eax, [esp+0CCh+var_A4]
jmp	short Y1
mov	ecx, [esp+0CCh+b]
mov	[esp+0CCh+size], ecx 
lea	edx, [esp+0CCh+x1y1]
mov	[esp+0CCh+var_CC], edx 
call	_tma_mp_init_size
test	eax, eax
jnz	loc_64214616
mov	[esp+0CCh+y0.used], B
mov	[esp+0CCh+x0.used], B
mov	eax, [a_0]
mov	[esp+0CCh+var_A0], eax
mov	ecx, eax
sub	ecx, B
mov	[esp+0CCh+x1.used], ecx
mov	edx, [b_0]
mov	[esp+0CCh+var_94], edx
mov	eax, edx
sub	eax, B
mov	[esp+0CCh+y1.used], eax
mov	eax, [a_0+0Ch]
mov	edx, [b_0+0Ch]
mov	b_0, [esp+0CCh+x0.dp]
mov	a_0, [esp+0CCh+y0.dp]
mov	[esp+0CCh+var_98], esi
xor	ecx, ecx
mov	[esp+0CCh+var_90], B
jmp	short loc_6421458F
mov	B, [tmpa]
mov	[tmpx+x*4], ebx
add	tmpa, 4
mov	esi, [tmpb]
mov	ebx, [esp+0CCh+var_98]
mov	[ebx+x*4], esi
add	tmpb, 4
inc	x
cmp	x, [esp+0CCh+var_90]
jl	short loc_6421457A
mov	B, [esp+0CCh+var_90]
mov	x, [esp+0CCh+x1.dp]
mov	[esp+0CCh+var_90], ecx
mov	esi, B
xor	ecx, ecx
mov	[esp+0CCh+var_B0], B
mov	[esp+0CCh+var_B4], tmpb
jmp	short loc_642145C0
mov	tmpb, [tmpa+ecx]
mov	B, [esp+0CCh+var_90]
mov	[ebx+ecx], edx
inc	x
add	ecx, 4
cmp	x, [esp+0CCh+var_A0]
jl	short loc_642145B2
mov	B, [esp+0CCh+var_B0]
mov	tmpb, [esp+0CCh+var_B4]
mov	x, [esp+0CCh+y1.dp]
mov	ecx, B
xor	tmpa, tmpa
mov	[esp+0CCh+var_A0], B
jmp	short loc_642145E6
mov	B, [tmpb+eax]
mov	[tmpy+eax], ebx
inc	x
add	eax, 4
cmp	x, [esp+0CCh+var_94]
jl	short loc_642145DC
mov	B, [esp+0CCh+var_A0]
mov	x, B
lea	eax, ds:0FFFFFFFCh[B*4]
mov	[esp+0CCh+var_A0], eax
add	tmpx, eax
mov	tmpb, B
mov	eax, B
cmp	edx, 0
jle	short loc_64214642
mov	tmpy, [edi]
dec	edx
sub	edi, 4
test	esi, esi
jnz	short loc_64214673
mov	B, edx
jmp	short loc_64214603
mov	eax, 0FFFFFFFEh
lea	a_0, [esp+0CCh+x0]
lea	b_0, [esp+0CCh+x1]
lea	edx, [esp+0CCh+x0y0]
mov	[esp+0CCh+var_CC], edx 
mov	[esp+0CCh+var_A4], err
call	_tma_mp_clear
mov	eax, [esp+0CCh+var_A4]
jmp	T1
mov	[esp+0CCh+x0.used], B
jnz	short loc_64214656
mov	[esp+0CCh+x0.sign], 0
			
mov	edx, [esp+0CCh+var_98]
add	edx, [esp+0CCh+var_A0]
mov	B, ebx
cmp	ecx, 0
jle	short loc_642146C7
mov	edi, [edx]
dec	ecx
sub	edx, 4
test	edi, edi
jnz	short loc_6421467C
mov	B, ecx
jmp	short loc_64214660
mov	[esp+0CCh+x0.used], B
jmp	short loc_64214656
mov	[esp+0CCh+y0.used], B
			
lea	ecx, [esp+0CCh+x0y0]
mov	[esp+0CCh+var_C4], ecx 
mov	[esp+0CCh+size], ebp 
lea	tmpy, [esp+0CCh+x0]
mov	[esp+0CCh+var_CC], esi 
call	_tma_mp_mul
lea	edi, [esp+0CCh+x1]
test	eax, eax
jz	short loc_642146DD
			
mov	err, 0FFFFFFFEh
lea	ecx, [esp+0CCh+x1y1]
mov	[esp+0CCh+var_CC], ecx 
mov	[esp+0CCh+var_A4], err
call	_tma_mp_clear
mov	eax, [esp+0CCh+var_A4]
jmp	X0Y0
mov	[esp+0CCh+y0.used], B
jnz	short loc_64214683
mov	[esp+0CCh+y0.sign], 0
jmp	short loc_64214683
lea	eax, [esp+0CCh+x1y1]
mov	[esp+0CCh+var_C4], eax 
lea	edx, [esp+0CCh+y1]
mov	[esp+0CCh+size], edx 
mov	[esp+0CCh+var_CC], edi 
call	_tma_mp_mul
test	eax, eax
jnz	short X1Y1
lea	ecx, [esp+0CCh+t1]
mov	[esp+0CCh+var_C4], ecx 
mov	[esp+0CCh+size], esi 
mov	[esp+0CCh+var_CC], edi 
call	_s_tma_mp_add
test	eax, eax
jnz	short X1Y1
mov	[esp+0CCh+var_C4], esi 
mov	[esp+0CCh+size], ebp 
lea	edx, [esp+0CCh+y1]
mov	[esp+0CCh+var_CC], edx 
call	_s_tma_mp_add
test	eax, eax
jnz	short X1Y1
lea	eax, [esp+0CCh+t1]
mov	[esp+0CCh+var_C4], eax 
mov	[esp+0CCh+size], esi 
mov	[esp+0CCh+var_CC], eax 
call	_tma_mp_mul
test	eax, eax
jnz	X1Y1
mov	[esp+0CCh+var_C4], esi 
lea	edx, [esp+0CCh+x1y1]
mov	[esp+0CCh+size], edx 
lea	ecx, [esp+0CCh+x0y0]
mov	[esp+0CCh+var_CC], ecx 
call	_tma_mp_add
test	eax, eax
jnz	X1Y1
lea	eax, [esp+0CCh+t1]
mov	[esp+0CCh+var_C4], eax 
mov	[esp+0CCh+size], esi 
mov	[esp+0CCh+var_CC], eax 
call	_s_tma_mp_sub
test	eax, eax
jnz	X1Y1
mov	[esp+0CCh+size], B 
lea	B, [esp+0CCh+t1]
mov	[esp+0CCh+var_CC], ebx 
call	_tma_mp_lshd
test	eax, eax
jnz	X1Y1
mov	edx, [esp+0CCh+b]
mov	[esp+0CCh+size], edx 
lea	ecx, [esp+0CCh+x1y1]
mov	[esp+0CCh+var_CC], ecx 
call	_tma_mp_lshd
test	eax, eax
jnz	X1Y1
lea	ebx, [esp+0CCh+t1]
mov	[esp+0CCh+var_C4], ebx 
mov	[esp+0CCh+size], ebx 
lea	eax, [esp+0CCh+x0y0]
mov	[esp+0CCh+var_CC], eax 
call	_tma_mp_add
test	eax, eax
jnz	X1Y1
mov	ebx, [esp+0CCh+c]
mov	[esp+0CCh+var_C4], ebx 
lea	eax, [esp+0CCh+x1y1]
mov	[esp+0CCh+size], eax 
lea	edx, [esp+0CCh+t1]
mov	[esp+0CCh+var_CC], edx 
call	_tma_mp_add
mov	ecx, eax
xor	eax, eax
test	ecx, ecx
jz	loc_642146AE
jmp	X1Y1
align 4
public _tma_mp_expt_d
			
push	ebp
push	edi
push	esi
push	ebx
sub	esp, 3Ch
mov	ebx, [esp+4Ch+c]
mov	[esp+4Ch+var_4C], 80h 
call	_malloc
mov	edx, eax
test	eax, eax
jz	loc_64214D24
xor	ecx, ecx
mov	dword ptr [eax+ecx*4], 0
mov	dword ptr [eax+ecx*4+4], 0
mov	dword ptr [eax+ecx*4+8], 0
mov	dword ptr [eax+ecx*4+0Ch], 0
mov	dword ptr [eax+ecx*4+10h], 0
mov	dword ptr [eax+ecx*4+14h], 0
mov	dword ptr [eax+ecx*4+18h], 0
mov	dword ptr [eax+ecx*4+1Ch], 0
add	ecx, 8
cmp	ecx, 20h
jnz	short loc_6421482B
mov	[esp+4Ch+g.dp],	eax
mov	[esp+4Ch+g.used], 0
mov	[esp+4Ch+g.alloc], 20h
mov	[esp+4Ch+g.sign], 0
lea	edi, [esp+4Ch+g]
cmp	[esp+4Ch+a], edi
jz	loc_64214A85
mov	ecx, [esp+4Ch+a]
mov	ebp, [ecx]
cmp	ebp, 20h
jg	loc_64214D85
mov	[esp+4Ch+var_30], 0
mov	eax, [esp+4Ch+a]
mov	ecx, [eax+0Ch]
test	ebp, ebp
jle	loc_64214DD6
lea	esi, [ebp-1]
and	esi, 7
mov	eax, [ecx]
mov	[edx], eax
add	edx, 4
mov	eax, 1
cmp	eax, ebp
jge	loc_64214985
test	esi, esi
jz	short loc_64214945
cmp	esi, 1
jz	short loc_64214938
cmp	esi, 2
jz	short loc_6421492F
cmp	esi, 3
jz	short loc_64214926
cmp	esi, 4
jz	short loc_6421491D
cmp	esi, 5
jz	short loc_64214914
cmp	esi, 6
jz	short loc_6421490B
mov	eax, [ecx+4]
mov	[edx], eax
add	edx, 4
mov	eax, 2
mov	esi, [ecx+eax*4]
mov	[edx], esi
add	edx, 4
inc	eax
mov	esi, [ecx+eax*4]
mov	[edx], esi
add	edx, 4
inc	eax
mov	esi, [ecx+eax*4]
mov	[edx], esi
add	edx, 4
inc	eax
mov	esi, [ecx+eax*4]
mov	[edx], esi
add	edx, 4
inc	eax
mov	esi, [ecx+eax*4]
mov	[edx], esi
add	edx, 4
inc	eax
mov	esi, [ecx+eax*4]
mov	[edx], esi
add	edx, 4
inc	eax
cmp	eax, ebp
jge	short loc_64214985
			
mov	esi, [ecx+eax*4]
mov	[edx], esi
mov	esi, [ecx+eax*4+4]
mov	[edx+4], esi
mov	esi, [ecx+eax*4+8]
mov	[edx+8], esi
mov	esi, [ecx+eax*4+0Ch]
mov	[edx+0Ch], esi
mov	esi, [ecx+eax*4+10h]
mov	[edx+10h], esi
mov	esi, [ecx+eax*4+14h]
mov	[edx+14h], esi
mov	esi, [ecx+eax*4+18h]
mov	[edx+18h], esi
mov	esi, [ecx+eax*4+1Ch]
mov	[edx+1Ch], esi
add	edx, 20h
add	eax, 8
cmp	eax, ebp
jl	short loc_64214945
			
cmp	eax, [esp+4Ch+var_30]
jge	loc_64214A76
mov	ecx, eax
not	ecx
add	ecx, [esp+4Ch+var_30]
and	ecx, 7
mov	[esp+4Ch+var_34], ecx
mov	dword ptr [edx], 0
lea	ecx, [edx+4]
lea	esi, [eax+1]
cmp	esi, [esp+4Ch+var_30]
jge	loc_64214A76
cmp	[esp+4Ch+var_34], 0
jz	short loc_64214A33
cmp	[esp+4Ch+var_34], 1
jz	short loc_64214A23
cmp	[esp+4Ch+var_34], 2
jz	short loc_64214A19
cmp	[esp+4Ch+var_34], 3
jz	short loc_64214A0F
cmp	[esp+4Ch+var_34], 4
jz	short loc_64214A05
cmp	[esp+4Ch+var_34], 5
jz	short loc_642149FB
cmp	[esp+4Ch+var_34], 6
jz	short loc_642149F1
mov	dword ptr [ecx], 0
lea	ecx, [edx+8]
lea	esi, [eax+2]
mov	dword ptr [ecx], 0
add	ecx, 4
inc	esi
mov	dword ptr [ecx], 0
add	ecx, 4
inc	esi
mov	dword ptr [ecx], 0
add	ecx, 4
inc	esi
mov	dword ptr [ecx], 0
add	ecx, 4
inc	esi
mov	dword ptr [ecx], 0
add	ecx, 4
inc	esi
mov	dword ptr [ecx], 0
add	ecx, 4
inc	esi
cmp	esi, [esp+4Ch+var_30]
jge	short loc_64214A76
			
mov	dword ptr [ecx], 0
mov	dword ptr [ecx+4], 0
mov	dword ptr [ecx+8], 0
mov	dword ptr [ecx+0Ch], 0
mov	dword ptr [ecx+10h], 0
mov	dword ptr [ecx+14h], 0
mov	dword ptr [ecx+18h], 0
mov	dword ptr [ecx+1Ch], 0
add	ecx, 20h
add	esi, 8
cmp	esi, [esp+4Ch+var_30]
jl	short loc_64214A33
			
mov	[esp+4Ch+g.used], ebp
mov	edx, [esp+4Ch+a]
mov	ebp, [edx+8]
mov	[esp+4Ch+g.sign], ebp
mov	dword ptr [c_0+8], 0
mov	dword ptr [c_0], 0
mov	edx, [c_0+0Ch]
mov	esi, [c_0+4]
test	esi, esi
jle	loc_64214B62
lea	ecx, [esi-1]
and	ecx, 7
mov	dword ptr [edx], 0
mov	eax, 1
cmp	esi, 1
jle	loc_64214B62
test	ecx, ecx
jz	short loc_64214B1C
cmp	ecx, 1
jz	short loc_64214B10
cmp	ecx, 2
jz	short loc_64214B08
cmp	ecx, 3
jz	short loc_64214B00
cmp	ecx, 4
jz	short loc_64214AF8
cmp	ecx, 5
jz	short loc_64214AF0
cmp	ecx, 6
jz	short loc_64214AE8
mov	dword ptr [edx+eax*4], 0
mov	eax, 2
mov	dword ptr [edx+eax*4], 0
inc	eax
mov	dword ptr [edx+eax*4], 0
inc	eax
mov	dword ptr [edx+eax*4], 0
inc	eax
mov	dword ptr [edx+eax*4], 0
inc	eax
mov	dword ptr [edx+eax*4], 0
inc	eax
mov	dword ptr [edx+eax*4], 0
inc	eax
cmp	esi, eax
jle	short loc_64214B62
			
mov	dword ptr [edx+eax*4], 0
mov	dword ptr [edx+eax*4+4], 0
mov	dword ptr [edx+eax*4+8], 0
mov	dword ptr [edx+eax*4+0Ch], 0
mov	dword ptr [edx+eax*4+10h], 0
mov	dword ptr [edx+eax*4+14h], 0
mov	dword ptr [edx+eax*4+18h], 0
mov	dword ptr [edx+eax*4+1Ch], 0
add	eax, 8
cmp	esi, eax
jg	short loc_64214B1C
			
mov	dword ptr [edx], 1
mov	dword ptr [c_0], 1
mov	[esp+4Ch+var_48], c_0 
mov	[esp+4Ch+var_4C], c_0 
call	_tma_mp_sqr
test	eax, eax
jnz	loc_64214C78
test	[esp+4Ch+b], 8000000h
jnz	loc_64214D48
mov	esi, [esp+4Ch+b]
shl	esi, 1
mov	[esp+4Ch+var_48], c_0 
mov	[esp+4Ch+var_4C], c_0 
call	_tma_mp_sqr
test	eax, eax
jnz	loc_64214C78
test	b_0, 8000000h
jnz	loc_64214D68
mov	ebp, 2
shl	b_0, 1
mov	[esp+4Ch+var_48], c_0 
mov	[esp+4Ch+var_4C], c_0 
call	_tma_mp_sqr
test	eax, eax
jnz	loc_64214C78
test	b_0, 8000000h
jnz	loc_64214C90
inc	x
cmp	ebp, 1Ch
jz	loc_64214D34
shl	b_0, 1
mov	[esp+4Ch+var_48], c_0 
mov	[esp+4Ch+var_4C], c_0 
call	_tma_mp_sqr
test	eax, eax
jnz	short loc_64214C78
test	b_0, 8000000h
jnz	loc_64214CAC
shl	b_0, 1
mov	[esp+4Ch+var_48], c_0 
mov	[esp+4Ch+var_4C], c_0 
call	_tma_mp_sqr
test	eax, eax
jnz	short loc_64214C78
test	b_0, 8000000h
jnz	loc_64214CC8
shl	b_0, 1
mov	[esp+4Ch+var_48], c_0 
mov	[esp+4Ch+var_4C], c_0 
call	_tma_mp_sqr
test	eax, eax
jnz	short loc_64214C78
test	b_0, 8000000h
jnz	loc_64214CE4
shl	b_0, 1
mov	[esp+4Ch+var_48], c_0 
mov	[esp+4Ch+var_4C], c_0 
call	_tma_mp_sqr
test	eax, eax
jnz	short loc_64214C78
test	b_0, 8000000h
jnz	loc_64214D04
add	ebp, 4
shl	b_0, 1
mov	[esp+4Ch+var_48], c_0 
mov	[esp+4Ch+var_4C], c_0 
call	_tma_mp_sqr
test	eax, eax
jz	loc_64214BD1
			
mov	[esp+4Ch+var_4C], edi 
mov	[esp+4Ch+var_38], res
call	_tma_mp_clear
mov	eax, [esp+4Ch+var_38]
add	esp, 3Ch
pop	c_0
pop	b_0
pop	edi
pop	x
retn
mov	[esp+4Ch+var_44], c_0
mov	[esp+4Ch+var_48], edi 
mov	[esp+4Ch+var_4C], c_0 
call	_tma_mp_mul
test	eax, eax
jz	loc_64214BDD
jmp	short loc_64214C78
align 4
mov	[esp+4Ch+var_44], c_0 
mov	[esp+4Ch+var_48], edi 
mov	[esp+4Ch+var_4C], c_0 
call	_tma_mp_mul
test	eax, eax
jz	loc_64214C05
jmp	short loc_64214C78
align 4
mov	[esp+4Ch+var_44], c_0 
mov	[esp+4Ch+var_48], edi 
mov	[esp+4Ch+var_4C], c_0 
call	_tma_mp_mul
test	eax, eax
jz	loc_64214C23
jmp	short loc_64214C78
align 4
mov	[esp+4Ch+var_44], c_0 
mov	[esp+4Ch+var_48], edi 
mov	[esp+4Ch+var_4C], c_0 
call	_tma_mp_mul
test	eax, eax
jz	loc_64214C41
jmp	loc_64214C78
align 4
mov	[esp+4Ch+var_44], c_0 
mov	[esp+4Ch+var_48], edi 
mov	[esp+4Ch+var_4C], c_0 
call	_tma_mp_mul
test	eax, eax
jz	loc_64214C5F
jmp	loc_64214C78
align 4
			
mov	eax, 0FFFFFFFEh
add	esp, 3Ch
pop	c_0
pop	esi
pop	edi
pop	ebp
retn
align 4
mov	[esp+4Ch+var_4C], edi 
call	_tma_mp_clear
xor	eax, eax
add	esp, 3Ch
pop	c_0
pop	b_0
pop	edi
pop	ebp
retn
align 4
mov	[esp+4Ch+var_44], c_0 
mov	[esp+4Ch+var_48], edi 
mov	[esp+4Ch+var_4C], c_0 
call	_tma_mp_mul
test	eax, eax
jz	loc_64214B90
jmp	loc_64214C78
align 4
mov	[esp+4Ch+var_44], c_0 
mov	[esp+4Ch+var_48], edi 
mov	[esp+4Ch+var_4C], c_0 
call	_tma_mp_mul
test	eax, eax
jz	loc_64214BB6
jmp	loc_64214C78
and	ebp, 0FFFFFFE0h
lea	esi, [ebp+40h]
lea	edx, ds:0[esi*4]
mov	[esp+4Ch+var_48], edx 
mov	[esp+4Ch+var_4C], eax 
call	_realloc
mov	edx, eax
test	eax, eax
jz	short loc_64214D24
mov	[esp+4Ch+g.dp],	eax
mov	ecx, [esp+4Ch+g.alloc]
mov	[esp+4Ch+g.alloc], esi
lea	eax, [eax+ecx*4]
jmp	short loc_64214DBF
mov	dword ptr [eax], 0
inc	ecx
add	eax, 4
cmp	esi, ecx
jg	short loc_64214DB5
mov	esi, [esp+4Ch+g.used]
mov	[esp+4Ch+var_30], esi
mov	eax, [esp+4Ch+a]
mov	ebp, [eax]
jmp	loc_642148B3
xor	eax, eax
jmp	loc_64214985
align 10h
public _tma_mp_div
			
push	ebp
push	edi
push	esi
push	ebx
sub	esp, 0ACh
mov	edi, [esp+0BCh+a]
mov	esi, [esp+0BCh+b]
mov	ebx, [esp+0BCh+c]
mov	edx, [esi]
test	edx, edx
jnz	short loc_64214E18
mov	eax, 0FFFFFFFDh
			
add	esp, 0ACh
pop	ebx
pop	esi
pop	a_0
pop	ebp
retn
align 4
mov	eax, [a_0]
cmp	edx, eax
jge	loc_64215118
			
mov	[esp+0BCh+var_AC], 0
lea	ebp, [esp+0BCh+q]
mov	[esp+0BCh+var_7C], ebp
mov	[esp+0BCh+var_B0], ebp
lea	ecx, [esp+0BCh+tq]
mov	[esp+0BCh+var_B4], ecx
lea	edx, [esp+0BCh+tb]
mov	[esp+0BCh+var_B8], edx
lea	eax, [esp+0BCh+ta]
mov	[esp+0BCh+var_80], eax
mov	[esp+0BCh+mp], eax 
call	_tma_mp_init_multi
test	eax, eax
jnz	loc_64214FF8
mov	[esp+0BCh+tq.sign], 0
mov	edx, [esp+0BCh+tq.dp]
mov	ebp, [esp+0BCh+tq.alloc]
test	ebp, ebp
jle	loc_64214F3E
lea	ecx, [ebp-1]
and	ecx, 7
mov	dword ptr [edx+eax*4], 0
mov	eax, 1
cmp	eax, ebp
jz	loc_64214F3E
test	ecx, ecx
jz	short loc_64214EF8
cmp	ecx, 1
jz	short loc_64214EEC
cmp	ecx, 2
jz	short loc_64214EE4
cmp	ecx, 3
jz	short loc_64214EDC
cmp	ecx, 4
jz	short loc_64214ED4
cmp	ecx, 5
jz	short loc_64214ECC
cmp	ecx, 6
jz	short loc_64214EC4
mov	dword ptr [edx+eax*4], 0
mov	eax, 2
mov	dword ptr [edx+eax*4], 0
inc	eax
mov	dword ptr [edx+eax*4], 0
inc	eax
mov	dword ptr [edx+eax*4], 0
inc	eax
mov	dword ptr [edx+eax*4], 0
inc	eax
mov	dword ptr [edx+eax*4], 0
inc	eax
mov	dword ptr [edx+eax*4], 0
inc	eax
cmp	eax, ebp
jz	short loc_64214F3E
			
mov	dword ptr [edx+eax*4], 0
mov	dword ptr [edx+eax*4+4], 0
mov	dword ptr [edx+eax*4+8], 0
mov	dword ptr [edx+eax*4+0Ch], 0
mov	dword ptr [edx+eax*4+10h], 0
mov	dword ptr [edx+eax*4+14h], 0
mov	dword ptr [edx+eax*4+18h], 0
mov	dword ptr [edx+eax*4+1Ch], 0
add	eax, 8
cmp	eax, ebp
jnz	short loc_64214EF8
			
mov	dword ptr [edx], 1
mov	[esp+0BCh+tq.used], 1
mov	eax, [a_0]
test	eax, eax
jnz	loc_64215088
xor	ebp, ebp
			
mov	eax, [b_0]
test	eax, eax
jnz	loc_64215008
xor	edx, edx
			
cmp	a_0, [esp+0BCh+var_80]
jz	short loc_64214F86
mov	ecx, [esp+0BCh+var_80]
mov	[esp+0BCh+var_B8], ecx 
mov	[esp+0BCh+mp], a_0 
mov	[esp+0BCh+var_84], edx
call	_tma_mp_copy
test	eax, eax
mov	edx, [esp+0BCh+var_84]
jnz	short loc_64214FB4
mov	[esp+0BCh+ta.sign], 0
lea	res, [esp+0BCh+tb]
mov	[esp+0BCh+var_B8], eax 
mov	[esp+0BCh+mp], b_0 
mov	[esp+0BCh+var_84], edx
call	_tma_mp_abs
test	eax, eax
mov	edx, [esp+0BCh+var_84]
jz	loc_642154F8
			
mov	[esp+0BCh+var_AC], 0
mov	ecx, [esp+0BCh+var_7C]
mov	[esp+0BCh+var_B0], ecx
lea	ebx, [esp+0BCh+tq]
mov	[esp+0BCh+var_B4], ebx
lea	n, [esp+0BCh+tb]
mov	[esp+0BCh+var_B8], ebp
mov	edx, [esp+0BCh+var_80]
mov	[esp+0BCh+mp], edx 
mov	[esp+0BCh+var_84], res
call	_tma_mp_clear_multi
mov	eax, [esp+0BCh+var_84]
add	esp, 0ACh
pop	ebx
pop	esi
pop	edi
pop	ebp
retn
align 4
mov	eax, 1
add	esp, 0ACh
pop	c_0
pop	b_0
pop	a_0
pop	ebp
retn
lea	ecx, [eax-1]
lea	eax, ds:0[ecx*4]
lea	edx, ds:0[eax*8]
sub	edx, eax
mov	eax, [b_0+0Ch]
mov	eax, [eax+ecx*4]
test	eax, eax
jz	loc_64214F64
mov	[esp+0BCh+var_78], c_0
lea	ecx, [edx+1]
mov	edx, ecx
mov	ebx, eax
shr	ebx, 1
jz	short loc_6421507C
inc	edx
mov	ebx, eax
shr	ebx, 2
jz	short loc_6421507C
lea	edx, [ecx+2]
mov	ebx, eax
shr	ebx, 3
jz	short loc_6421507C
lea	edx, [ecx+3]
mov	ebx, eax
shr	ebx, 4
jz	short loc_6421507C
lea	edx, [ecx+4]
mov	ebx, eax
shr	ebx, 5
jz	short loc_6421507C
lea	edx, [ecx+5]
mov	ebx, eax
shr	ebx, 6
jz	short loc_6421507C
lea	edx, [ecx+6]
mov	ebx, eax
shr	ebx, 7
jz	short loc_6421507C
lea	edx, [ecx+7]
shr	eax, 8
jnz	short loc_6421502D
xchg	ax, ax
			
mov	ebx, [esp+0BCh+var_78]
jmp	loc_64214F64
align 4
lea	edx, [eax-1]
lea	ecx, ds:0[edx*4]
lea	ebp, ds:0[ecx*8]
sub	ebp, ecx
mov	eax, [a_0+0Ch]
mov	eax, [eax+edx*4]
test	eax, eax
jz	loc_64214F58
lea	edx, [ebp+1]
mov	ebp, edx
mov	ecx, eax
shr	ecx, 1
jz	loc_64214F58
inc	ebp
mov	ecx, eax
shr	ecx, 2
jz	loc_64214F58
lea	ebp, [edx+2]
mov	ecx, eax
shr	ecx, 3
jz	loc_64214F58
lea	ebp, [edx+3]
mov	ecx, eax
shr	ecx, 4
jz	loc_64214F58
lea	ebp, [edx+4]
mov	ecx, eax
shr	ecx, 5
jz	loc_64214F58
lea	ebp, [edx+5]
mov	ecx, eax
shr	ecx, 6
jz	loc_64214F58
lea	ebp, [edx+6]
mov	ecx, eax
shr	ecx, 7
jz	loc_64214F58
lea	ebp, [edx+7]
shr	eax, 8
jnz	short loc_642150A9
jmp	loc_64214F58
align 4
jg	loc_642153E8
mov	ebp, [a_0+0Ch]
mov	edx, [b_0+0Ch]
test	eax, eax
jle	loc_64214E22
lea	ecx, [eax-1]
mov	[esp+0BCh+var_7C], ecx
shl	ecx, 2
add	ebp, ecx
mov	[esp+0BCh+var_74], ebp
lea	ecx, [edx+ecx]
mov	edx, [ecx]
cmp	edx, [ebp+0]
jb	loc_64214E22
ja	loc_642153E8
xor	edx, edx
mov	[esp+0BCh+var_80], 0
mov	ebp, [esp+0BCh+var_7C]
and	ebp, 7
mov	[esp+0BCh+var_7C], ebp
jz	loc_642152DE
mov	[esp+0BCh+var_80], 1
mov	edx, [ecx-4]
mov	ebp, [esp+0BCh+var_74]
cmp	[ebp-4], edx
ja	loc_64214E22
mov	edx, 0FFFFFFFCh
jb	loc_642153E8
cmp	[esp+0BCh+var_7C], 1
jz	loc_642152DE
cmp	[esp+0BCh+var_7C], 2
jz	loc_642152AF
cmp	[esp+0BCh+var_7C], 3
jz	loc_64215280
cmp	[esp+0BCh+var_7C], 4
jz	loc_64215251
cmp	[esp+0BCh+var_7C], 5
jz	short loc_64215222
cmp	[esp+0BCh+var_7C], 6
jz	short loc_642151F3
inc	[esp+0BCh+var_80]
mov	ebp, [ebp+edx-4]
mov	[esp+0BCh+var_7C], ebp
mov	ebp, [ecx+edx-4]
mov	[esp+0BCh+var_78], ebp
cmp	[esp+0BCh+var_7C], ebp
ja	loc_64214E22
sub	edx, 4
cmp	[esp+0BCh+var_7C], ebp
jb	loc_642153E8
inc	[esp+0BCh+var_80]
mov	ebp, [esp+0BCh+var_74]
mov	ebp, [ebp+edx-4]
mov	[esp+0BCh+var_7C], ebp
mov	ebp, [ecx+edx-4]
mov	[esp+0BCh+var_78], ebp
cmp	[esp+0BCh+var_7C], ebp
ja	loc_64214E22
sub	edx, 4
cmp	[esp+0BCh+var_7C], ebp
jb	loc_642153E8
inc	[esp+0BCh+var_80]
mov	ebp, [esp+0BCh+var_74]
mov	ebp, [ebp+edx-4]
mov	[esp+0BCh+var_7C], ebp
mov	ebp, [ecx+edx-4]
mov	[esp+0BCh+var_78], ebp
cmp	[esp+0BCh+var_7C], ebp
ja	loc_64214E22
sub	edx, 4
cmp	[esp+0BCh+var_7C], ebp
jb	loc_642153E8
inc	[esp+0BCh+var_80]
mov	ebp, [esp+0BCh+var_74]
mov	ebp, [ebp+edx-4]
mov	[esp+0BCh+var_7C], ebp
mov	ebp, [ecx+edx-4]
mov	[esp+0BCh+var_78], ebp
cmp	[esp+0BCh+var_7C], ebp
ja	loc_64214E22
sub	edx, 4
cmp	[esp+0BCh+var_7C], ebp
jb	loc_642153E8
inc	[esp+0BCh+var_80]
mov	ebp, [esp+0BCh+var_74]
mov	ebp, [ebp+edx-4]
mov	[esp+0BCh+var_7C], ebp
mov	ebp, [ecx+edx-4]
mov	[esp+0BCh+var_78], ebp
cmp	[esp+0BCh+var_7C], ebp
ja	loc_64214E22
sub	edx, 4
cmp	[esp+0BCh+var_7C], ebp
jb	loc_642153E8
inc	[esp+0BCh+var_80]
mov	ebp, [esp+0BCh+var_74]
mov	ebp, [ebp+edx-4]
mov	[esp+0BCh+var_7C], ebp
mov	ebp, [ecx+edx-4]
mov	[esp+0BCh+var_78], ebp
cmp	[esp+0BCh+var_7C], ebp
ja	loc_64214E22
sub	edx, 4
cmp	[esp+0BCh+var_7C], ebp
jb	loc_642153E8
			
mov	ebp, [esp+0BCh+var_74]
mov	[esp+0BCh+var_7C], a_0
mov	[esp+0BCh+var_70], b_0
mov	[esp+0BCh+var_78], c_0
mov	ebx, [esp+0BCh+var_80]
inc	ebx
mov	[esp+0BCh+var_80], ebx
cmp	eax, ebx
jle	loc_64215790
mov	a_0, [ebp+edx-4]
mov	b_0, [ecx+edx-4]
cmp	edi, esi
ja	loc_64215790
lea	ebx, [edx-4]
cmp	edi, esi
jb	loc_642153E0
mov	edi, [ebp+ebx-4]
mov	esi, [ecx+ebx-4]
mov	[esp+0BCh+var_74], esi
cmp	edi, esi
ja	loc_64215790
lea	esi, [edx-8]
cmp	edi, [esp+0BCh+var_74]
jb	loc_642153E0
mov	edi, [ebp+esi-4]
mov	[esp+0BCh+var_74], edi
mov	edi, [ecx+esi-4]
cmp	[esp+0BCh+var_74], edi
ja	loc_64215790
lea	esi, [edx-0Ch]
cmp	[esp+0BCh+var_74], edi
jb	loc_642153E0
mov	edi, [ebp+esi-4]
mov	esi, [ecx+esi-4]
cmp	edi, esi
ja	loc_64215790
sub	edx, 10h
cmp	edi, esi
jb	short loc_642153E0
mov	esi, [ebp+edx-4]
mov	edx, [ecx+edx-4]
cmp	esi, edx
ja	loc_64215790
lea	edi, [ebx-10h]
cmp	esi, edx
jb	short loc_642153E0
mov	esi, [ebp+edi-4]
mov	edi, [ecx+edi-4]
cmp	esi, edi
ja	loc_64215790
lea	edx, [ebx-14h]
cmp	esi, edi
jb	short loc_642153E0
mov	edi, [ebp+edx-4]
mov	esi, [ecx+edx-4]
cmp	edi, esi
ja	loc_64215790
lea	edx, [ebx-18h]
cmp	edi, esi
jb	short loc_642153E0
mov	esi, [esp+0BCh+var_80]
add	esi, 7
mov	[esp+0BCh+var_80], esi
mov	edi, [ebp+edx-4]
mov	esi, [ecx+edx-4]
cmp	edi, esi
ja	loc_64215790
lea	edx, [ebx-1Ch]
cmp	edi, esi
jnb	loc_642152EE
			
mov	edi, [esp+0BCh+var_7C]
mov	ebx, [esp+0BCh+var_78]
			
mov	eax, [esp+0BCh+d]
test	eax, eax
jz	loc_64215789
mov	esi, [esp+0BCh+d]
mov	[esp+0BCh+var_B8], esi 
mov	[esp+0BCh+mp], a_0 
call	_tma_mp_copy
test	c_0, c_0
jz	loc_64214E0A
mov	dword ptr [c_0+8], 0
mov	dword ptr [c_0], 0
mov	ecx, [c_0+0Ch]
mov	esi, [c_0+4]
test	esi, esi
jle	loc_64214E0A
lea	c_0, [esi-1]
and	ebx, 7
mov	dword ptr [ecx], 0
mov	edx, 1
cmp	edx, esi
jz	loc_64214E0A
test	ebx, ebx
jz	short loc_642154AC
cmp	ebx, 1
jz	short loc_6421549C
cmp	ebx, 2
jz	short loc_64215494
cmp	ebx, 3
jz	short loc_6421548C
cmp	ebx, 4
jz	short loc_64215484
cmp	ebx, 5
jz	short loc_6421547C
cmp	ebx, 6
jz	short loc_64215474
mov	dword ptr [ecx+edx*4], 0
mov	edx, 2
mov	dword ptr [ecx+edx*4], 0
inc	edx
mov	dword ptr [ecx+edx*4], 0
inc	edx
mov	dword ptr [ecx+edx*4], 0
inc	edx
mov	dword ptr [ecx+edx*4], 0
inc	edx
mov	dword ptr [ecx+edx*4], 0
inc	edx
mov	dword ptr [ecx+edx*4], 0
inc	edx
cmp	edx, esi
jz	loc_64214E0A
			
mov	dword ptr [ecx+edx*4], 0
mov	dword ptr [ecx+edx*4+4], 0
mov	dword ptr [ecx+edx*4+8], 0
mov	dword ptr [ecx+edx*4+0Ch], 0
mov	dword ptr [ecx+edx*4+10h], 0
mov	dword ptr [ecx+edx*4+14h], 0
mov	dword ptr [ecx+edx*4+18h], 0
mov	dword ptr [ecx+edx*4+1Ch], 0
add	edx, 8
cmp	edx, esi
jnz	short loc_642154AC
jmp	loc_64214E0A
align 4
sub	ebp, edx
lea	edx, [esp+0BCh+tb]
mov	[esp+0BCh+var_B4], edx 
mov	[esp+0BCh+var_B8], n 
mov	[esp+0BCh+mp], edx 
call	_tma_mp_mul_2d
test	eax, eax
jnz	loc_64214FB4
lea	ecx, [esp+0BCh+tq]
mov	[esp+0BCh+var_B4], ecx 
mov	[esp+0BCh+var_B8], n 
mov	[esp+0BCh+mp], ecx 
call	_tma_mp_mul_2d
mov	[esp+0BCh+var_78], eax
test	eax, eax
jnz	LBL_ERR
mov	[esp+0BCh+var_70], n
test	n, 1
jnz	loc_64215606
test	n, n
js	loc_642157A1
mov	ecx, [esp+0BCh+var_80]
mov	[esp+0BCh+var_B8], ecx 
lea	edx, [esp+0BCh+tb]
mov	[esp+0BCh+mp], edx 
call	_tma_mp_cmp
dec	eax
jz	short loc_642155AE
mov	edx, [esp+0BCh+var_80]
mov	[esp+0BCh+var_B4], edx 
lea	eax, [esp+0BCh+tb]
mov	[esp+0BCh+var_B8], eax 
mov	[esp+0BCh+mp], edx 
call	_tma_mp_sub
test	eax, eax
jnz	loc_64214FB4
mov	edx, [esp+0BCh+var_7C]
mov	[esp+0BCh+var_B4], edx 
lea	ecx, [esp+0BCh+tq]
mov	[esp+0BCh+var_B8], ecx 
mov	[esp+0BCh+mp], edx 
call	_tma_mp_add
test	eax, eax
jnz	loc_64214FB4
mov	[esp+0BCh+var_B0], 0 
lea	res, [esp+0BCh+tb]
mov	[esp+0BCh+var_B4], eax 
mov	[esp+0BCh+var_B8], 1 
mov	[esp+0BCh+mp], eax 
call	_tma_mp_div_2d
test	eax, eax
jnz	loc_64214FB4
mov	[esp+0BCh+var_B0], 0 
lea	edx, [esp+0BCh+tq]
mov	[esp+0BCh+var_B4], edx 
mov	[esp+0BCh+var_B8], 1 
mov	[esp+0BCh+mp], edx 
call	_tma_mp_div_2d
dec	n
mov	[esp+0BCh+var_70], ebp
test	eax, eax
jnz	loc_64214FB4
mov	n, [esp+0BCh+var_80]
mov	edx, [esp+0BCh+var_70]
test	edx, edx
js	loc_642157A1
mov	[esp+0BCh+var_B8], ebp 
lea	res, [esp+0BCh+tb]
mov	[esp+0BCh+mp], eax 
call	_tma_mp_cmp
dec	eax
jz	short loc_6421566B
mov	[esp+0BCh+var_B4], ebp 
lea	edx, [esp+0BCh+tb]
mov	[esp+0BCh+var_B8], edx 
mov	[esp+0BCh+mp], ebp 
call	_tma_mp_sub
test	eax, eax
jnz	loc_64214FB4
mov	res, [esp+0BCh+var_7C]
mov	[esp+0BCh+var_B4], eax 
lea	ecx, [esp+0BCh+tq]
mov	[esp+0BCh+var_B8], ecx 
mov	[esp+0BCh+mp], eax 
call	_tma_mp_add
test	eax, eax
jnz	loc_64214FB4
mov	[esp+0BCh+var_B0], 0 
lea	edx, [esp+0BCh+tb]
mov	[esp+0BCh+var_B4], edx 
mov	[esp+0BCh+var_B8], 1 
mov	[esp+0BCh+mp], edx 
call	_tma_mp_div_2d
test	eax, eax
jnz	loc_64214FB4
mov	[esp+0BCh+var_B0], 0 
lea	res, [esp+0BCh+tq]
mov	[esp+0BCh+var_B4], eax 
mov	[esp+0BCh+var_B8], 1 
mov	[esp+0BCh+mp], eax 
call	_tma_mp_div_2d
mov	ecx, [esp+0BCh+var_70]
dec	ecx
mov	[esp+0BCh+var_70], ecx
test	eax, eax
jnz	loc_64214FB4
mov	[esp+0BCh+var_B8], ebp 
lea	ecx, [esp+0BCh+tb]
mov	[esp+0BCh+mp], ecx 
call	_tma_mp_cmp
dec	eax
jz	short loc_6421571C
mov	[esp+0BCh+var_B4], ebp 
lea	eax, [esp+0BCh+tb]
mov	[esp+0BCh+var_B8], eax 
mov	[esp+0BCh+mp], ebp 
call	_tma_mp_sub
test	eax, eax
jnz	loc_64214FB4
mov	edx, [esp+0BCh+var_7C]
mov	[esp+0BCh+var_B4], edx 
lea	ecx, [esp+0BCh+tq]
mov	[esp+0BCh+var_B8], ecx 
mov	[esp+0BCh+mp], edx 
call	_tma_mp_add
test	eax, eax
jnz	loc_64214FB4
mov	[esp+0BCh+var_B0], 0 
lea	res, [esp+0BCh+tb]
mov	[esp+0BCh+var_B4], eax 
mov	[esp+0BCh+var_B8], 1 
mov	[esp+0BCh+mp], eax 
call	_tma_mp_div_2d
test	eax, eax
jnz	loc_64214FB4
mov	[esp+0BCh+var_B0], 0 
lea	ecx, [esp+0BCh+tq]
mov	[esp+0BCh+var_B4], ecx 
mov	[esp+0BCh+var_B8], 1 
mov	[esp+0BCh+mp], ecx 
call	_tma_mp_div_2d
mov	edx, [esp+0BCh+var_70]
dec	edx
mov	[esp+0BCh+var_70], edx
test	eax, eax
jz	loc_6421560A
jmp	loc_64214FB4
align 10h
			
mov	n2, [esp+0BCh+var_78]
jmp	loc_64214FB4
xor	eax, eax
jmp	loc_6421540A
			
mov	edi, [esp+0BCh+var_7C]
mov	esi, [esp+0BCh+var_70]
mov	ebx, [esp+0BCh+var_78]
jmp	loc_64214E22
			
mov	n, [a_0+8]
mov	[esp+0BCh+var_70], ebp
mov	a_0, [b_0+8]
mov	[esp+0BCh+var_74], edi
test	c_0, c_0
jz	short loc_642157FB
lea	ebp, [esp+0BCh+var_6C]
mov	[esp+0BCh+var_90], ebp
mov	edx, 4
mov	edi, ebp
mov	b_0, c_0
mov	ecx, edx
rep movsd
mov	edi, c_0
mov	esi, [esp+0BCh+var_7C]
mov	ecx, edx
rep movsd
lea	res, [esp+0BCh+q]
mov	[esp+0BCh+var_7C], eax
mov	edi, eax
mov	esi, [esp+0BCh+var_90]
mov	ecx, edx
rep movsd
xor	eax, eax
cmp	dword ptr [c_0], 0
jz	short loc_642157F8
mov	edx, [esp+0BCh+var_74]
xor	n2, n2
cmp	[esp+0BCh+var_70], edx
setnz	al
mov	[c_0+8], n2
cmp	[esp+0BCh+d], 0
jz	LBL_ERR
lea	ebp, [esp+0BCh+var_6C]
mov	edx, 4
mov	edi, ebp
mov	esi, [esp+0BCh+d]
mov	ecx, edx
rep movsd
mov	edi, [esp+0BCh+d]
mov	esi, [esp+0BCh+var_80]
mov	ecx, edx
rep movsd
lea	c_0, [esp+0BCh+ta]
mov	[esp+0BCh+var_80], ebx
mov	d_0, ebx
mov	esi, ebp
mov	ecx, edx
rep movsd
mov	n2, [esp+0BCh+d]
xor	ebx, ebx
cmp	dword ptr [eax], 0
setnz	bl
neg	n
and	n, [esp+0BCh+var_70]
mov	[eax+8], n
xor	eax, eax
jmp	loc_64214FB4
public _tma_mp_reduce_setup
push	ebp
push	edi
push	esi
push	ebx
sub	esp, 3Ch
mov	ebx, [esp+4Ch+a]
mov	ebp, [esp+4Ch+b]
mov	edi, [ebp+0]
mov	dword ptr [ebx+8], 0
mov	dword ptr [ebx], 0
mov	eax, [ebx+0Ch]
mov	[esp+4Ch+var_30], eax
mov	ecx, [ebx+4]
test	ecx, ecx
jle	loc_64215976
lea	esi, [ecx-1]
and	esi, 7
mov	dword ptr [eax], 0
mov	eax, 1
cmp	eax, ecx
jz	loc_64215976
test	esi, esi
jz	short loc_64215928
cmp	esi, 1
jz	short loc_64215918
cmp	esi, 2
jz	short loc_6421590C
cmp	esi, 3
jz	short loc_64215900
cmp	esi, 4
jz	short loc_642158F4
cmp	esi, 5
jz	short loc_642158E8
cmp	esi, 6
jz	short loc_642158DC
mov	esi, [esp+4Ch+var_30]
mov	dword ptr [esi+eax*4], 0
mov	eax, 2
mov	edx, [esp+4Ch+var_30]
mov	dword ptr [edx+eax*4], 0
inc	eax
mov	esi, [esp+4Ch+var_30]
mov	dword ptr [esi+eax*4], 0
inc	eax
mov	edx, [esp+4Ch+var_30]
mov	dword ptr [edx+eax*4], 0
inc	eax
mov	esi, [esp+4Ch+var_30]
mov	dword ptr [esi+eax*4], 0
inc	eax
mov	edx, [esp+4Ch+var_30]
mov	dword ptr [edx+eax*4], 0
inc	eax
mov	esi, [esp+4Ch+var_30]
mov	dword ptr [esi+eax*4], 0
inc	eax
cmp	eax, ecx
jz	short loc_64215976
mov	edx, [esp+4Ch+var_30]
mov	dword ptr [edx+eax*4], 0
mov	dword ptr [edx+eax*4+4], 0
mov	dword ptr [edx+eax*4+8], 0
mov	dword ptr [edx+eax*4+0Ch], 0
mov	dword ptr [edx+eax*4+10h], 0
mov	dword ptr [edx+eax*4+14h], 0
mov	dword ptr [edx+eax*4+18h], 0
mov	dword ptr [edx+eax*4+1Ch], 0
add	eax, 8
cmp	eax, ecx
jnz	short loc_6421592C
mov	[esp+4Ch+var_30], edx
			
lea	eax, ds:0[edi*8]
lea	edx, ds:0[eax*8]
sub	edx, eax
mov	[esp+4Ch+var_20], edx
mov	esi, 92492493h
mov	eax, edx
imul	esi
mov	esi, [esp+4Ch+var_20]
add	esi, edx
sar	esi, 4
mov	eax, [esp+4Ch+var_20]
sar	eax, 1Fh
sub	esi, eax
lea	edi, [esi+1]
cmp	edi, ecx
jg	short loc_642159DC
mov	[a_0], edi
mov	edi, [esp+4Ch+var_30]
mov	dword ptr [edi+esi*4], 1
mov	[esp+4Ch+d], 0	
mov	[esp+4Ch+c], a_0 
mov	[esp+4Ch+var_48], b_0 
mov	[esp+4Ch+var_4C], a_0 
call	_tma_mp_div
add	esp, 3Ch
pop	a_0
pop	esi
pop	edi
pop	b_0
retn
align 4
lea	ecx, [esi+41h]
mov	eax, edi
and	eax, 8000001Fh
js	loc_64215B03
sub	ecx, eax
mov	[esp+4Ch+var_20], ecx
mov	edx, ecx
shl	edx, 2
mov	[esp+4Ch+var_48], edx 
mov	ecx, [esp+4Ch+var_30]
mov	[esp+4Ch+var_4C], ecx 
call	_realloc
test	eax, eax
jz	loc_64215B0D
mov	[a_0+0Ch], eax
mov	edx, [a_0+4]
mov	ecx, [esp+4Ch+var_20]
mov	[a_0+4], ecx
cmp	ecx, edx
jle	loc_64215AFA
lea	eax, [eax+edx*4]
mov	ecx, edx
not	ecx
add	ecx, [esp+4Ch+var_20]
and	ecx, 7
mov	dword ptr [eax], 0
inc	edx
add	eax, 4
cmp	[esp+4Ch+var_20], edx
jle	loc_64215AF7
test	ecx, ecx
jz	short loc_64215AB4
cmp	ecx, 1
jz	short loc_64215AA4
cmp	ecx, 2
jz	short loc_64215A9A
cmp	ecx, 3
jz	short loc_64215A90
cmp	ecx, 4
jz	short loc_64215A86
cmp	ecx, 5
jz	short loc_64215A7C
cmp	ecx, 6
jz	short loc_64215A72
mov	dword ptr [eax], 0
inc	edx
add	eax, 4
mov	dword ptr [eax], 0
inc	edx
add	eax, 4
mov	dword ptr [eax], 0
inc	edx
add	eax, 4
mov	dword ptr [eax], 0
inc	edx
add	eax, 4
mov	dword ptr [eax], 0
inc	edx
add	eax, 4
mov	dword ptr [eax], 0
inc	edx
add	eax, 4
mov	dword ptr [eax], 0
inc	edx
add	eax, 4
cmp	[esp+4Ch+var_20], edx
jle	short loc_64215AF7
			
mov	dword ptr [eax], 0
mov	dword ptr [eax+4], 0
mov	dword ptr [eax+8], 0
mov	dword ptr [eax+0Ch], 0
mov	dword ptr [eax+10h], 0
mov	dword ptr [eax+14h], 0
mov	dword ptr [eax+18h], 0
mov	dword ptr [eax+1Ch], 0
add	edx, 8
add	eax, 20h
cmp	[esp+4Ch+var_20], edx
jg	short loc_64215AB4
			
mov	eax, [a_0+0Ch]
mov	[esp+4Ch+var_30], eax
jmp	loc_642159AC
dec	eax
or	eax, 0FFFFFFE0h
inc	eax
jmp	loc_642159EC
mov	eax, 0FFFFFFFEh
jmp	loc_642159D1
align 4
public _tma_mp_mod
			
push	ebp
push	edi
push	esi
push	ebx
sub	esp, 4Ch
mov	esi, [esp+5Ch+b]
mov	[esp+5Ch+var_5C], 80h 
call	_malloc
test	eax, eax
jz	loc_64215C20
xor	edx, edx
mov	dword ptr [eax+edx*4], 0
mov	dword ptr [eax+edx*4+4], 0
mov	dword ptr [eax+edx*4+8], 0
mov	dword ptr [eax+edx*4+0Ch], 0
mov	dword ptr [eax+edx*4+10h], 0
mov	dword ptr [eax+edx*4+14h], 0
mov	dword ptr [eax+edx*4+18h], 0
mov	dword ptr [eax+edx*4+1Ch], 0
add	edx, 8
cmp	edx, 20h
jnz	short loc_64215B39
mov	[esp+5Ch+t.dp],	eax
mov	[esp+5Ch+t.used], 0
mov	[esp+5Ch+t.alloc], 20h
mov	[esp+5Ch+t.sign], 0
lea	ebx, [esp+5Ch+t]
mov	[esp+5Ch+d], ebx 
mov	[esp+5Ch+var_54], 0 
mov	[esp+5Ch+var_58], b_0 
mov	eax, [esp+5Ch+a]
mov	[esp+5Ch+var_5C], eax 
call	_tma_mp_div
test	eax, eax
jnz	short loc_64215BDD
mov	edx, [esp+5Ch+t.sign]
cmp	edx, [b_0+8]
jz	short loc_64215BF8
mov	ecx, [esp+5Ch+c]
mov	[esp+5Ch+var_54], ecx 
mov	[esp+5Ch+var_58], ebx 
mov	[esp+5Ch+var_5C], b_0 
call	_tma_mp_add
			
mov	[esp+5Ch+var_5C], ebx
mov	[esp+5Ch+var_40], res
call	_tma_mp_clear
mov	eax, [esp+5Ch+var_40]
add	esp, 4Ch
pop	ebx
pop	esi
pop	edi
pop	ebp
retn
align 4
lea	ebp, [esp+5Ch+var_3C]
mov	edx, 4
mov	edi, ebp
mov	b_0, ebx
mov	ecx, edx
rep movsd
mov	edi, ebx
mov	esi, [esp+5Ch+c]
mov	ecx, edx
rep movsd
mov	edi, [esp+5Ch+c]
mov	c_0, ebp
mov	ecx, edx
rep movsd
jmp	short loc_64215BDD
align 10h
mov	eax, 0FFFFFFFEh
add	esp, 4Ch
pop	ebx
pop	b_0
pop	edi
pop	ebp
retn
align 10h
public _s_tma_mp_exptmod
			
push	ebp
push	edi
push	esi
push	ebx
mov	eax, 109Ch	
call	__alloca
mov	edx, [esp+10h+arg_10A0]
mov	eax, [edx]
test	eax, eax
jz	loc_64216218
lea	esi, [eax-1]
lea	edi, ds:0[esi*4]
lea	eax, ds:0[edi*8]
sub	x, edi
mov	ebx, [esp+10h+arg_10A0]
mov	ecx, [ebx+0Ch]
mov	edx, [ecx+esi*4]
test	edx, edx
jz	short loc_64215CC0
lea	ecx, [x+1]
mov	x, ecx
mov	ebp, edx
shr	ebp, 1
jz	short loc_64215CC0
inc	x
mov	ebx, edx
shr	ebx, 2
jz	short loc_64215CC0
lea	x, [ecx+2]
mov	ebp, edx
shr	ebp, 3
jz	short loc_64215CC0
lea	x, [ecx+3]
mov	esi, edx
shr	esi, 4
jz	short loc_64215CC0
lea	x, [ecx+4]
mov	edi, edx
shr	edi, 5
jz	short loc_64215CC0
lea	x, [ecx+5]
mov	ebx, edx
shr	ebx, 6
jz	short loc_64215CC0
lea	x, [ecx+6]
mov	ebp, edx
shr	ebp, 7
jz	short loc_64215CC0
lea	x, [ecx+7]
shr	edx, 8
jnz	short loc_64215C73
			
cmp	x, 7
jle	loc_64216218
cmp	x, 24h
jg	loc_642160AC
mov	esi, 3
			
mov	[esp+10h+var_10], 80h
call	_malloc
test	eax, eax
jz	loc_64216206
xor	edx, edx
mov	dword ptr [eax+edx*4], 0
mov	dword ptr [eax+edx*4+4], 0
mov	dword ptr [eax+edx*4+8], 0
mov	dword ptr [eax+edx*4+0Ch], 0
mov	dword ptr [eax+edx*4+10h], 0
mov	dword ptr [eax+edx*4+14h], 0
mov	dword ptr [eax+edx*4+18h], 0
mov	dword ptr [eax+edx*4+1Ch], 0
add	edx, 8
cmp	edx, 20h
jnz	short loc_64215CED
mov	[esp+10h+arg_5C.dp], eax
mov	[esp+10h+arg_5C.used], 0
mov	[esp+10h+arg_5C.alloc],	20h
mov	[esp+10h+arg_5C.sign], 0
lea	ebx, [winsize-1]
mov	[esp+10h+arg_1C], ebx
mov	ebp, 1
mov	eax, ebp
mov	cl, byte ptr [esp+10h+arg_1C]
shl	eax, cl
mov	[esp+10h+arg_14], eax
mov	ecx, winsize
shl	ebp, cl
cmp	eax, ebp
jge	loc_6421627B
lea	eax, [esp+10h+arg_4C]
mov	[esp+10h+arg_28], eax
mov	edx, [esp+10h+arg_14]
shl	edx, 4
add	edx, eax
mov	[esp+10h+arg_18], edx
mov	ebx, edx
add	ebx, 0Ch
mov	edi, [esp+10h+arg_14]
xchg	ax, ax
mov	[esp+10h+var_10], 80h 
call	_malloc
mov	[ebx], eax
test	eax, eax
jz	loc_642160EC
mov	dword ptr [eax], 0
mov	dword ptr [eax+4], 0
mov	dword ptr [eax+8], 0
mov	edx, 0Ch
mov	dword ptr [eax+edx], 0
add	edx, 4
mov	dword ptr [eax+edx], 0
add	edx, 4
mov	dword ptr [eax+edx], 0
add	edx, 4
mov	dword ptr [eax+edx], 0
add	edx, 4
jmp	short loc_64215E2C
align 10h
mov	eax, [ebx]
mov	dword ptr [eax+ecx], 0
mov	dword ptr [eax+edx+8], 0
mov	dword ptr [eax+edx+0Ch], 0
mov	dword ptr [eax+edx+10h], 0
mov	dword ptr [eax+edx+14h], 0
mov	dword ptr [eax+edx+18h], 0
mov	dword ptr [eax+edx+1Ch], 0
add	edx, 20h
mov	dword ptr [eax+edx], 0
lea	ecx, [edx+4]
cmp	ecx, 80h
jnz	short loc_64215DF0
mov	dword ptr [ebx-0Ch], 0
mov	dword ptr [ebx-8], 20h
mov	dword ptr [ebx-4], 0
inc	x
add	ebx, 10h
cmp	x, ebp
jl	loc_64215D94
mov	[esp+10h+var_10], 80h 
call	_malloc
mov	[esp+10h+arg_105C.dp], eax
test	eax, eax
jz	loc_64216269
xor	edx, edx
mov	dword ptr [eax+edx*4], 0
mov	dword ptr [eax+edx*4+4], 0
mov	dword ptr [eax+edx*4+8], 0
mov	dword ptr [eax+edx*4+0Ch], 0
mov	dword ptr [eax+edx*4+10h], 0
mov	dword ptr [eax+edx*4+14h], 0
mov	dword ptr [eax+edx*4+18h], 0
mov	dword ptr [eax+edx*4+1Ch], 0
add	edx, 8
cmp	edx, 20h
jnz	short loc_64215E7C
mov	[esp+10h+arg_105C.used], 0
mov	[esp+10h+arg_105C.alloc], 20h
mov	[esp+10h+arg_105C.sign], 0
mov	eax, [esp+10h+arg_10AC]
test	eax, eax
jz	loc_6421622C
lea	ecx, [esp+10h+arg_105C]
mov	[esp+10h+arg_18], ecx
mov	[esp+10h+d], ecx 
mov	eax, [esp+10h+a]
mov	[esp+10h+var_10], eax 
call	_tma_mp_reduce_2k_setup_l
mov	ebx, eax
lea	x, [esp+10h+arg_5C]
mov	[esp+10h+b], edi
test	eax, eax
jnz	short LBL_MU
mov	[esp+10h+arg_2C], offset _tma_mp_reduce_2k_l
lea	x, [esp+10h+arg_5C]
mov	[esp+10h+b], edi
mov	[esp+10h+c], edi 
mov	ebx, [esp+10h+a]
mov	[esp+10h+d], ebx 
mov	edx, [esp+10h+arg_109C]
mov	[esp+10h+var_10], edx 
call	_tma_mp_mod
mov	ebx, eax
test	eax, eax
jz	loc_64216288
			
mov	edx, [esp+10h+arg_18]
mov	[esp+10h+var_10], edx 
call	_tma_mp_clear
mov	winsize, [esp+10h+b]
mov	[esp+10h+var_10], esi 
call	_tma_mp_clear
cmp	[esp+10h+arg_14], ebp
jge	loc_6421620B
mov	ecx, [esp+10h+arg_14]
shl	ecx, 4
add	ecx, [esp+10h+arg_28]
mov	[esp+10h+arg_20], ecx
mov	x, [esp+10h+arg_14]
not	edi
add	edi, ebp
and	edi, 7
mov	eax, [esp+10h+arg_20]
mov	[esp+10h+var_10], eax 
mov	[esp+10h+arg_10], edi
call	_tma_mp_clear
mov	edi, [esp+10h+arg_14]
inc	x
mov	esi, [esp+10h+arg_20]
add	esi, 10h
cmp	x, ebp
mov	eax, [esp+10h+arg_10]
jge	loc_6421620B
test	eax, eax
jz	loc_64216047
cmp	eax, 1
jz	short loc_64216033
cmp	eax, 2
jz	short loc_64216027
cmp	eax, 3
jz	short loc_6421601B
cmp	eax, 4
jz	short loc_6421600F
cmp	eax, 5
jz	short loc_64216003
cmp	eax, 6
jz	short loc_64215FF7
mov	[esp+10h+var_10], esi 
call	_tma_mp_clear
mov	x, [esp+10h+arg_14]
add	x, 2
mov	esi, [esp+10h+arg_20]
add	esi, 20h
mov	[esp+10h+var_10], esi 
call	_tma_mp_clear
inc	x
add	esi, 10h
mov	[esp+10h+var_10], esi 
call	_tma_mp_clear
inc	x
add	esi, 10h
mov	[esp+10h+var_10], esi 
call	_tma_mp_clear
inc	x
add	esi, 10h
mov	[esp+10h+var_10], esi 
call	_tma_mp_clear
inc	x
add	esi, 10h
mov	[esp+10h+var_10], esi 
call	_tma_mp_clear
inc	x
add	esi, 10h
mov	[esp+10h+var_10], esi 
call	_tma_mp_clear
inc	x
add	esi, 10h
cmp	x, ebp
jge	loc_6421620B
			
mov	[esp+10h+var_10], esi 
call	_tma_mp_clear
lea	edx, [esi+10h]
mov	[esp+10h+var_10], edx 
call	_tma_mp_clear
lea	ecx, [esi+20h]
mov	[esp+10h+var_10], ecx 
call	_tma_mp_clear
lea	eax, [esi+30h]
mov	[esp+10h+var_10], eax 
call	_tma_mp_clear
lea	edx, [esi+40h]
mov	[esp+10h+var_10], edx 
call	_tma_mp_clear
lea	ecx, [esi+50h]
mov	[esp+10h+var_10], ecx 
call	_tma_mp_clear
lea	eax, [esi+60h]
mov	[esp+10h+var_10], eax 
call	_tma_mp_clear
lea	edx, [esi+70h]
mov	[esp+10h+var_10], edx 
call	_tma_mp_clear
add	x, 8
sub	esi, 0FFFFFF80h
cmp	x, ebp
jl	short loc_64216047
jmp	loc_6421620B
align 4
cmp	x, 8Ch
jle	loc_64216222
mov	esi, 5
cmp	x, 1C2h
jle	loc_64215CD7
mov	si, 6
cmp	x, 517h
jle	loc_64215CD7
cmp	x, 0DCAh
setnl	dl
movzx	esi, dl
add	winsize, 7
jmp	loc_64215CD7
align 4
cmp	[esp+10h+arg_14], x
jge	loc_642161FA
mov	ebp, [esp+10h+arg_14]
not	ebp
add	ebp, x
and	ebp, 7
mov	esi, [esp+10h+arg_18]
mov	[esp+10h+var_10], esi 
call	_tma_mp_clear
mov	esi, [esp+10h+arg_14]
inc	y
mov	ebx, [esp+10h+arg_18]
add	ebx, 10h
cmp	y, x
jge	loc_642161FA
test	ebp, ebp
jz	short loc_6421619B
cmp	ebp, 1
jz	short loc_6421618B
cmp	ebp, 2
jz	short loc_6421617F
cmp	ebp, 3
jz	short loc_64216173
cmp	ebp, 4
jz	short loc_64216167
cmp	ebp, 5
jz	short loc_6421615B
cmp	ebp, 6
jz	short loc_6421614F
mov	[esp+10h+var_10], ebx 
call	_tma_mp_clear
inc	y
add	ebx, 10h
mov	[esp+10h+var_10], ebx 
call	_tma_mp_clear
inc	y
add	ebx, 10h
mov	[esp+10h+var_10], ebx 
call	_tma_mp_clear
inc	y
add	ebx, 10h
mov	[esp+10h+var_10], ebx 
call	_tma_mp_clear
inc	y
add	ebx, 10h
mov	[esp+10h+var_10], ebx 
call	_tma_mp_clear
inc	y
add	ebx, 10h
mov	[esp+10h+var_10], ebx 
call	_tma_mp_clear
inc	y
add	ebx, 10h
mov	[esp+10h+var_10], ebx 
call	_tma_mp_clear
inc	y
add	ebx, 10h
cmp	y, x
jge	short loc_642161FA
			
mov	[esp+10h+var_10], ebx 
call	_tma_mp_clear
lea	edx, [ebx+10h]
mov	[esp+10h+var_10], edx 
call	_tma_mp_clear
lea	ecx, [ebx+20h]
mov	[esp+10h+var_10], ecx 
call	_tma_mp_clear
lea	ebp, [ebx+30h]
mov	[esp+10h+var_10], ebp 
call	_tma_mp_clear
lea	eax, [ebx+40h]
mov	[esp+10h+var_10], eax 
call	_tma_mp_clear
lea	edx, [ebx+50h]
mov	[esp+10h+var_10], edx 
call	_tma_mp_clear
lea	ecx, [ebx+60h]
mov	[esp+10h+var_10], ecx 
call	_tma_mp_clear
lea	ebp, [ebx+70h]
mov	[esp+10h+var_10], ebp 
call	_tma_mp_clear
add	y, 8
sub	ebx, 0FFFFFF80h
cmp	y, x
jl	short loc_6421619B
			
lea	ebx, [esp+10h+arg_5C]
mov	[esp+10h+var_10], ebx 
call	_tma_mp_clear
mov	ebx, 0FFFFFFFEh
			
mov	eax, err
add	esp, 109Ch
pop	err
pop	winsize
pop	x
pop	ebp
retn
			
mov	esi, 2
jmp	loc_64215CD7
mov	esi, 4
jmp	loc_64215CD7
mov	ebx, [esp+10h+a]
mov	[esp+10h+d], ebx 
lea	edx, [esp+10h+arg_105C]
mov	[esp+10h+arg_18], edx
mov	[esp+10h+var_10], edx 
call	_tma_mp_reduce_setup
mov	ebx, eax
lea	ecx, [esp+10h+arg_5C]
mov	[esp+10h+b], ecx
mov	[esp+10h+arg_2C], offset _tma_mp_reduce
test	eax, eax
jz	loc_64215F27
jmp	LBL_MU
mov	ebx, 0FFFFFFFEh
lea	x, [esp+10h+arg_5C]
mov	[esp+10h+b], edi
jmp	LBL_M
lea	edi, [esp+10h+arg_4C]
mov	[esp+10h+arg_28], edi
jmp	loc_64215E5F
mov	edi, 10h
mov	cl, byte ptr [esp+10h+arg_1C]
shl	edi, cl
add	edi, [esp+10h+arg_28]
mov	[esp+10h+d], edi 
mov	err, [esp+10h+b]
mov	[esp+10h+var_10], eax 
call	_tma_mp_copy
mov	err, eax
test	eax, eax
jnz	LBL_MU
jmp	short loc_642162D8
mov	err, [esp+10h+arg_18]
mov	[esp+10h+c], eax
mov	edx, [esp+10h+a]
mov	[esp+10h+d], edx
mov	[esp+10h+var_10], edi
call	[esp+10h+arg_2C]
test	eax, eax
jnz	short loc_642162E8
inc	x
cmp	[esp+10h+arg_1C], x
jle	short loc_642162EF
mov	[esp+10h+d], edi 
mov	[esp+10h+var_10], edi 
call	_tma_mp_sqr
test	eax, eax
jz	short loc_642162B3
			
mov	x, err
jmp	LBL_MU
mov	x, [esp+10h+arg_14]
inc	x
mov	edi, x
shl	edi, 4
add	edi, [esp+10h+arg_28]
mov	ecx, [esp+10h+arg_14]
shl	ecx, 4
add	ecx, [esp+10h+arg_28]
mov	[esp+10h+arg_1C], ecx
jmp	short loc_64216351
mov	[esp+10h+c], edi 
mov	err, [esp+10h+b]
mov	[esp+10h+d], eax 
mov	edx, [esp+10h+arg_1C]
mov	[esp+10h+var_10], edx 
call	_tma_mp_mul
test	eax, eax
jnz	short loc_642162E8
mov	edx, [esp+10h+arg_18]
mov	[esp+10h+c], edx
mov	ecx, [esp+10h+a]
mov	[esp+10h+d], ecx
mov	[esp+10h+var_10], edi
call	[esp+10h+arg_2C]
add	edi, 10h
add	[esp+10h+arg_1C], 10h
test	eax, eax
jnz	short loc_642162E8
inc	x
cmp	x, ebp
jl	short loc_6421630E
lea	x, [esp+10h+arg_106C]
mov	[esp+10h+arg_1C], ebx
mov	[esp+10h+var_10], ebx 
call	_tma_mp_init
mov	ebx, eax
test	eax, eax
jnz	LBL_MU
mov	[esp+10h+arg_106C.sign], 0
mov	edx, [esp+10h+arg_106C.dp]
mov	ecx, [esp+10h+arg_106C.alloc]
xor	err, err
cmp	ecx, eax
jle	short loc_6421639B
mov	dword ptr [edx+eax*4], 0
inc	eax
jmp	short loc_6421638D
mov	dword ptr [edx], 1
mov	[esp+10h+arg_106C.used], 1
mov	edi, [esp+10h+arg_10A0]
mov	ecx, [edi]
dec	ecx
mov	[esp+10h+arg_3C], ecx
xor	eax, eax
mov	[esp+10h+arg_40], 1
xor	edi, edi
mov	[esp+10h+arg_34], 0
mov	[esp+10h+arg_44], 0
mov	[esp+10h+arg_48], err
mov	[esp+10h+arg_38], ebp
mov	ebp, mode
mov	err, [esp+10h+arg_1C]
dec	[esp+10h+arg_40]
jnz	short loc_64216413
cmp	[esp+10h+arg_3C], 0FFFFFFFFh
jz	short loc_6421642F
mov	edx, [esp+10h+arg_10A0]
mov	ecx, [edx+0Ch]
mov	edx, [esp+10h+arg_3C]
mov	y, [ecx+edx*4]
mov	[esp+10h+arg_44], eax
dec	edx
mov	[esp+10h+arg_3C], edx
mov	[esp+10h+arg_40], 1Ch
mov	y, [esp+10h+arg_44]
shr	y, 1Bh
and	y, 1
test	mode, mode
jnz	loc_64216534
test	y, y
jnz	short loc_64216492
			
shl	[esp+10h+arg_44], 1
jmp	short loc_642163E4
mov	winsize, mode
mov	ebx, [esp+10h+arg_48]
mov	mode, [esp+10h+arg_38]
cmp	mode, 2
jz	loc_64216582
			
lea	y, [esp+10h+arg_104C]
mov	[esp+10h+arg_8], eax
mov	bitcpy,	eax
mov	x, [esp+10h+arg_1C]
mov	ecx, 4
rep movsd
lea	edx, [esp+10h+arg_106C]
mov	[esp+10h+arg_1C], edx
mov	edi, edx
mov	esi, [esp+10h+arg_10A8]
mov	cl, 4
rep movsd
mov	edi, [esp+10h+arg_10A8]
mov	esi, [esp+10h+arg_8]
mov	cl, 4
rep movsd
			
mov	ecx, [esp+10h+arg_1C]
mov	[esp+10h+var_10], ecx 
call	_tma_mp_clear
jmp	LBL_MU
			
inc	bitcpy
mov	ecx, winsize
sub	ecx, bitcpy
shl	y, cl
or	[esp+10h+arg_34], eax
mov	mode, 2
cmp	bitcpy,	winsize
jnz	short loc_64216429
xor	bitcpy,	bitcpy
mov	[esp+10h+d], ebx
mov	[esp+10h+var_10], ebx 
call	_tma_mp_sqr
test	eax, eax
jnz	loc_64216577
mov	edx, [esp+10h+arg_18]
mov	[esp+10h+c], edx
mov	mode, [esp+10h+a]
mov	[esp+10h+d], ebp
mov	[esp+10h+var_10], ebx
call	[esp+10h+arg_2C]
test	eax, eax
jnz	loc_64216577
inc	x
cmp	winsize, x
jg	short loc_642164A8
mov	[esp+10h+c], ebx 
mov	x, [esp+10h+arg_34]
shl	edi, 4
add	edi, [esp+10h+arg_28]
mov	[esp+10h+d], edi 
mov	[esp+10h+var_10], ebx 
call	_tma_mp_mul
test	eax, eax
jnz	short loc_64216577
mov	ecx, [esp+10h+arg_18]
mov	[esp+10h+c], ecx
mov	err, [esp+10h+a]
mov	[esp+10h+d], eax
mov	[esp+10h+var_10], ebx
call	[esp+10h+arg_2C]
test	eax, eax
jnz	short loc_64216577
mov	ebp, 1
xor	edi, edi
mov	[esp+10h+arg_34], 0
jmp	loc_64216429
cmp	mode, 1
jnz	loc_64216492
test	y, y
jnz	loc_64216492
mov	[esp+10h+d], ebx 
mov	[esp+10h+var_10], ebx 
call	_tma_mp_sqr
test	eax, eax
jnz	short loc_64216577
mov	ecx, [esp+10h+arg_18]
mov	[esp+10h+c], ecx
mov	err, [esp+10h+a]
mov	[esp+10h+d], eax
mov	[esp+10h+var_10], ebx
call	[esp+10h+arg_2C]
test	eax, eax
jz	loc_64216429
			
mov	mode, [esp+10h+arg_38]
mov	ebx, err
jmp	LBL_RES
test	bitcpy,	bitcpy
jle	loc_64216442
xor	mode, mode
mov	[esp+10h+arg_24], err
mov	err, [esp+10h+arg_1C]
mov	[esp+10h+d], ebx 
mov	[esp+10h+var_10], ebx 
call	_tma_mp_sqr
test	eax, eax
jnz	short loc_64216610
mov	err, [esp+10h+arg_18]
mov	[esp+10h+c], eax
mov	edx, [esp+10h+a]
mov	[esp+10h+d], edx
mov	[esp+10h+var_10], ebx
call	[esp+10h+arg_2C]
test	eax, eax
jnz	short loc_64216610
shl	[esp+10h+arg_34], 1
test	[esp+10h+arg_34], ebp
jnz	short loc_642165DA
inc	x
cmp	x, bitcpy
jl	short loc_64216594
mov	ebx, [esp+10h+arg_24]
jmp	loc_64216442
mov	[esp+10h+c], ebx
mov	ecx, [esp+10h+b]
mov	[esp+10h+d], ecx 
mov	[esp+10h+var_10], ebx 
call	_tma_mp_mul
test	eax, eax
jnz	short loc_64216610
mov	err, [esp+10h+arg_18]
mov	[esp+10h+c], eax
mov	edx, [esp+10h+a]
mov	[esp+10h+d], edx
mov	[esp+10h+var_10], ebx
call	[esp+10h+arg_2C]
test	eax, eax
jz	short loc_642165CC
			
mov	ebx, err
jmp	LBL_RES
align 4
public _tma_mp_submod
push	ebx
sub	esp, 38h
mov	[esp+3Ch+var_3C], 80h 
call	_malloc
test	eax, eax
jz	loc_642166E4
xor	edx, edx
mov	dword ptr [eax+edx*4], 0
mov	dword ptr [eax+edx*4+4], 0
mov	dword ptr [eax+edx*4+8], 0
mov	dword ptr [eax+edx*4+0Ch], 0
mov	dword ptr [eax+edx*4+10h], 0
mov	dword ptr [eax+edx*4+14h], 0
mov	dword ptr [eax+edx*4+18h], 0
mov	dword ptr [eax+edx*4+1Ch], 0
add	edx, 8
cmp	edx, 20h
jnz	short loc_64216632
mov	[esp+3Ch+t.dp],	eax
mov	[esp+3Ch+t.used], 0
mov	[esp+3Ch+t.alloc], 20h
mov	[esp+3Ch+t.sign], 0
lea	ebx, [esp+3Ch+t]
mov	[esp+3Ch+var_34], ebx 
mov	edx, [esp+3Ch+b]
mov	[esp+3Ch+var_38], edx 
mov	eax, [esp+3Ch+a]
mov	[esp+3Ch+var_3C], eax 
call	_tma_mp_sub
test	eax, eax
jnz	short loc_642166CD
mov	res, [esp+3Ch+d]
mov	[esp+3Ch+var_34], eax 
mov	ecx, [esp+3Ch+c]
mov	[esp+3Ch+var_38], ecx 
mov	[esp+3Ch+var_3C], ebx 
call	_tma_mp_mod
mov	[esp+3Ch+var_3C], ebx
mov	[esp+3Ch+var_20], res
call	_tma_mp_clear
mov	eax, [esp+3Ch+var_20]
add	esp, 38h
pop	ebx
retn
align 4
mov	eax, 0FFFFFFFEh
add	esp, 38h
pop	ebx
retn
align 10h
public _tma_mp_sqrmod
push	ebx
sub	esp, 38h
mov	[esp+3Ch+var_3C], 80h 
call	_malloc
test	eax, eax
jz	loc_642167B4
xor	edx, edx
mov	dword ptr [eax+edx*4], 0
mov	dword ptr [eax+edx*4+4], 0
mov	dword ptr [eax+edx*4+8], 0
mov	dword ptr [eax+edx*4+0Ch], 0
mov	dword ptr [eax+edx*4+10h], 0
mov	dword ptr [eax+edx*4+14h], 0
mov	dword ptr [eax+edx*4+18h], 0
mov	dword ptr [eax+edx*4+1Ch], 0
add	edx, 8
cmp	edx, 20h
jnz	short loc_6421670A
mov	[esp+3Ch+t.dp],	eax
mov	[esp+3Ch+t.used], 0
mov	[esp+3Ch+t.alloc], 20h
mov	[esp+3Ch+t.sign], 0
lea	ebx, [esp+3Ch+t]
mov	[esp+3Ch+var_38], ebx 
mov	eax, [esp+3Ch+a]
mov	[esp+3Ch+var_3C], eax 
call	_tma_mp_sqr
test	eax, eax
jnz	short loc_6421679D
mov	ecx, [esp+3Ch+c]
mov	[esp+3Ch+var_34], ecx 
mov	edx, [esp+3Ch+b]
mov	[esp+3Ch+var_38], edx 
mov	[esp+3Ch+var_3C], ebx 
call	_tma_mp_mod
mov	[esp+3Ch+var_3C], ebx
mov	[esp+3Ch+var_20], res
call	_tma_mp_clear
mov	eax, [esp+3Ch+var_20]
add	esp, 38h
pop	ebx
retn
align 4
mov	eax, 0FFFFFFFEh
add	esp, 38h
pop	ebx
retn
align 10h
public _tma_mp_mulmod
push	ebx
sub	esp, 38h
mov	[esp+3Ch+var_3C], 80h 
call	_malloc
test	eax, eax
jz	loc_6421688C
xor	edx, edx
mov	dword ptr [eax+edx*4], 0
mov	dword ptr [eax+edx*4+4], 0
mov	dword ptr [eax+edx*4+8], 0
mov	dword ptr [eax+edx*4+0Ch], 0
mov	dword ptr [eax+edx*4+10h], 0
mov	dword ptr [eax+edx*4+14h], 0
mov	dword ptr [eax+edx*4+18h], 0
mov	dword ptr [eax+edx*4+1Ch], 0
add	edx, 8
cmp	edx, 20h
jnz	short loc_642167DA
mov	[esp+3Ch+t.dp],	eax
mov	[esp+3Ch+t.used], 0
mov	[esp+3Ch+t.alloc], 20h
mov	[esp+3Ch+t.sign], 0
lea	ebx, [esp+3Ch+t]
mov	[esp+3Ch+var_34], ebx 
mov	edx, [esp+3Ch+b]
mov	[esp+3Ch+var_38], edx 
mov	eax, [esp+3Ch+a]
mov	[esp+3Ch+var_3C], eax 
call	_tma_mp_mul
test	eax, eax
jnz	short loc_64216875
mov	res, [esp+3Ch+d]
mov	[esp+3Ch+var_34], eax 
mov	ecx, [esp+3Ch+c]
mov	[esp+3Ch+var_38], ecx 
mov	[esp+3Ch+var_3C], ebx 
call	_tma_mp_mod
mov	[esp+3Ch+var_3C], ebx
mov	[esp+3Ch+var_20], res
call	_tma_mp_clear
mov	eax, [esp+3Ch+var_20]
add	esp, 38h
pop	ebx
retn
align 4
mov	eax, 0FFFFFFFEh
add	esp, 38h
pop	ebx
retn
align 4
public _tma_mp_jacobi
push	ebp
push	edi
push	esi
push	ebx
sub	esp, 5Ch
mov	eax, [esp+6Ch+a]
mov	ebx, [esp+6Ch+p]
mov	esi, [esp+6Ch+c]
cmp	dword ptr [ebx+8], 1
jz	short loc_64216905
cmp	dword ptr [p_0], 1
jle	short loc_642168FC
mov	edx, [a_0]
test	edx, edx
jz	short loc_64216914
cmp	dword ptr [a_0+8], 1
jz	short loc_642168C5
dec	edx
jle	short loc_64216924
			
mov	[esp+6Ch+b], a_0 
lea	edi, [esp+6Ch+a1]
mov	[esp+6Ch+var_6C], edi 
call	_tma_mp_init_copy
test	eax, eax
jnz	short loc_6421690A
lea	ebp, [esp+6Ch+p1]
mov	[esp+6Ch+var_6C], ebp 
call	_tma_mp_init
test	eax, eax
jz	short loc_6421693C
mov	[esp+6Ch+var_6C], edi 
mov	[esp+6Ch+var_54], res
call	_tma_mp_clear
mov	eax, [esp+6Ch+var_54]
jmp	short loc_6421690A
align 4
mov	edx, [p_0+0Ch]
mov	edi, [edx]
test	edi, edi
jnz	short loc_642168B6
mov	a_0, 0FFFFFFFDh
			
add	esp, 5Ch
pop	p_0
pop	c_0
pop	edi
pop	ebp
retn
align 4
mov	dword ptr [c_0], 0
xor	a_0, a_0
add	esp, 5Ch
pop	p_0
pop	c_0
pop	edi
pop	ebp
retn
mov	ecx, [a_0+0Ch]
mov	edx, [ecx]
cmp	edx, 1
ja	short loc_642168C5
test	edx, edx
jz	short loc_642168C5
mov	dword ptr [c_0], 1
xor	a_0, a_0
jmp	short loc_6421690A
mov	[esp+6Ch+var_6C], edi 
call	_tma_mp_cnt_lsb
mov	[esp+6Ch+d], 0	
mov	[esp+6Ch+var_64], edi 
mov	[esp+6Ch+b], eax 
mov	[esp+6Ch+var_6C], edi 
mov	[esp+6Ch+var_54], k
call	_tma_mp_div_2d
test	eax, eax
mov	edx, [esp+6Ch+var_54]
jnz	short LBL_P1
and	edx, 1
jnz	short loc_642169BA
mov	k, [p_0+0Ch]
mov	ecx, [edx]
mov	edx, 1
			
and	ecx, 3
cmp	ecx, 3
jz	short loc_642169E5
			
cmp	[esp+6Ch+a1.sign], 1
jz	short loc_6421698D
cmp	[esp+6Ch+a1.used], 1
jle	short loc_64216A01
			
mov	[esp+6Ch+var_64], ebp 
mov	[esp+6Ch+b], edi 
mov	[esp+6Ch+var_6C], p_0 
mov	[esp+6Ch+var_54], s
call	_tma_mp_mod
test	eax, eax
jz	short loc_64216A18
			
mov	[esp+6Ch+var_6C], ebp 
mov	[esp+6Ch+var_54], res
call	_tma_mp_clear
mov	eax, [esp+6Ch+var_54]
jmp	LBL_A1
mov	k, [p_0+0Ch]
mov	ecx, [edx]
mov	edx, ecx
and	edx, 7
mov	[esp+6Ch+var_50], edx
cmp	edx, 1
jz	short loc_642169F7
cmp	edx, 7
jz	short loc_642169F7
cmp	edx, 3
jz	short loc_642169E0
xor	edx, edx
cmp	[esp+6Ch+var_50], 5
jnz	short loc_64216977
or	s, 0FFFFFFFFh
jmp	short loc_64216977
mov	ecx, [esp+6Ch+a1.dp]
mov	ecx, [ecx]
and	ecx, 3
cmp	ecx, 3
jnz	short loc_6421697F
neg	s
jmp	short loc_6421697F
			
mov	edx, 1
jmp	loc_64216977
mov	ecx, [esp+6Ch+a1.dp]
mov	ecx, [ecx]
cmp	ecx, 1
ja	short loc_6421698D
test	ecx, ecx
jz	loc_6421698D
mov	[c_0], s
jmp	short LBL_P1
lea	res, [esp+6Ch+r]
mov	[esp+6Ch+var_64], eax 
mov	[esp+6Ch+b], edi 
mov	[esp+6Ch+var_6C], ebp 
call	_tma_mp_jacobi
test	eax, eax
mov	edx, [esp+6Ch+var_54]
jnz	LBL_P1
imul	edx, [esp+6Ch+r]
mov	[c_0], s
jmp	LBL_P1
public _tma_mp_invmod_slow
push	ebp
push	edi
push	esi
push	ebx
sub	esp, 0ECh
mov	esi, [esp+0FCh+b]
cmp	dword ptr [esi+8], 1
jnz	short loc_64216A6C
mov	eax, 0FFFFFFFDh
			
add	esp, 0ECh
pop	ebx
pop	esi
pop	edi
pop	ebp
retn
align 4
mov	ebx, [b_0]
test	ebx, ebx
jz	short loc_64216A5B
mov	[esp+0FCh+var_DC], 0
lea	ebp, [esp+0FCh+D]
mov	[esp+0FCh+var_E0], ebp
lea	ebp, [esp+0FCh+C]
mov	[esp+0FCh+var_E4], ebp
lea	ebx, [esp+0FCh+B]
mov	[esp+0FCh+var_E8], ebx
lea	ecx, [esp+0FCh+A]
mov	[esp+0FCh+var_EC], ecx
lea	eax, [esp+0FCh+v]
mov	[esp+0FCh+var_F0], eax
lea	edx, [esp+0FCh+u]
mov	[esp+0FCh+var_F4], edx
lea	edi, [esp+0FCh+y]
mov	[esp+0FCh+var_F8], edi
lea	ebx, [esp+0FCh+x]
mov	[esp+0FCh+mp], ebx 
call	_tma_mp_init_multi
test	eax, eax
jnz	short loc_64216A60
mov	[esp+0FCh+var_F4], ebx 
mov	[esp+0FCh+var_F8], b_0 
mov	edi, [esp+0FCh+a]
mov	[esp+0FCh+mp], edi 
call	_tma_mp_mod
test	eax, eax
jz	short loc_64216B4F
			
mov	[esp+0FCh+var_DC], 0
lea	ecx, [esp+0FCh+D]
mov	[esp+0FCh+var_E0], ecx
mov	[esp+0FCh+var_E4], ebp
lea	edi, [esp+0FCh+B]
mov	[esp+0FCh+var_E8], edi
lea	esi, [esp+0FCh+A]
mov	[esp+0FCh+var_EC], esi
lea	edx, [esp+0FCh+v]
mov	[esp+0FCh+var_F0], edx
lea	ecx, [esp+0FCh+u]
mov	[esp+0FCh+var_F4], ecx
lea	ebp, [esp+0FCh+y]
mov	[esp+0FCh+var_F8], ebp
mov	[esp+0FCh+mp], ebx 
mov	[esp+0FCh+var_B4], res
call	_tma_mp_clear_multi
mov	eax, [esp+0FCh+var_B4]
jmp	loc_64216A60
lea	edx, [esp+0FCh+y]
mov	[esp+0FCh+var_F8], edx 
mov	[esp+0FCh+mp], b_0 
call	_tma_mp_copy
test	eax, eax
jnz	short loc_64216AEF
mov	res, [esp+0FCh+x.used]
test	eax, eax
jle	short loc_64216B9D
mov	ecx, [esp+0FCh+x.dp]
test	byte ptr [ecx],	1
jnz	short loc_64216B9D
cmp	[esp+0FCh+y.used], 0
jle	short loc_64216B9D
mov	a_0, [esp+0FCh+y.dp]
test	byte ptr [edi],	1
jnz	short loc_64216B9D
			
mov	eax, 0FFFFFFFDh
jmp	loc_64216AEF
			
lea	edx, [esp+0FCh+u]
mov	[esp+0FCh+var_F8], edx 
mov	[esp+0FCh+mp], ebx 
call	_tma_mp_copy
test	eax, eax
jnz	loc_64216AEF
lea	ecx, [esp+0FCh+v]
mov	[esp+0FCh+var_F8], ecx 
lea	res, [esp+0FCh+y]
mov	[esp+0FCh+mp], eax 
call	_tma_mp_copy
mov	edi, eax
test	res, res
jnz	loc_64216AEF
mov	[esp+0FCh+A.sign], 0
mov	edx, [esp+0FCh+A.dp]
mov	eax, [esp+0FCh+A.alloc]
mov	[esp+0FCh+var_B0], eax
test	eax, eax
jle	loc_64216CC9
mov	ecx, eax
dec	ecx
and	ecx, 7
mov	dword ptr [edx+res*4], 0
mov	eax, 1
cmp	eax, [esp+0FCh+var_B0]
jz	loc_64216CC9
test	ecx, ecx
jz	short loc_64216C81
cmp	ecx, 1
jz	short loc_64216C73
cmp	ecx, 2
jz	short loc_64216C6B
cmp	ecx, 3
jz	short loc_64216C63
cmp	ecx, 4
jz	short loc_64216C5B
cmp	ecx, 5
jz	short loc_64216C53
cmp	ecx, 6
jz	short loc_64216C4B
mov	dword ptr [edx+eax*4], 0
mov	eax, 2
mov	dword ptr [edx+eax*4], 0
inc	eax
mov	dword ptr [edx+eax*4], 0
inc	eax
mov	dword ptr [edx+eax*4], 0
inc	eax
mov	dword ptr [edx+eax*4], 0
inc	eax
mov	dword ptr [edx+eax*4], 0
inc	eax
mov	dword ptr [edx+eax*4], 0
inc	eax
cmp	eax, [esp+0FCh+var_B0]
jz	short loc_64216CC9
			
mov	dword ptr [edx+eax*4], 0
mov	dword ptr [edx+eax*4+4], 0
mov	dword ptr [edx+eax*4+8], 0
mov	dword ptr [edx+eax*4+0Ch], 0
mov	dword ptr [edx+eax*4+10h], 0
mov	dword ptr [edx+eax*4+14h], 0
mov	dword ptr [edx+eax*4+18h], 0
mov	dword ptr [edx+eax*4+1Ch], 0
add	eax, 8
cmp	eax, [esp+0FCh+var_B0]
jnz	short loc_64216C81
			
mov	dword ptr [edx], 1
mov	[esp+0FCh+D.sign], 0
mov	edx, [esp+0FCh+D.dp]
mov	res, [esp+0FCh+D.alloc]
test	edi, edi
jle	loc_64216DA8
lea	ecx, [edi-1]
and	ecx, 7
mov	dword ptr [edx], 0
mov	eax, 1
cmp	eax, edi
jz	loc_64216DA8
test	ecx, ecx
jz	short loc_64216D62
cmp	ecx, 1
jz	short loc_64216D56
cmp	ecx, 2
jz	short loc_64216D4E
cmp	ecx, 3
jz	short loc_64216D46
cmp	ecx, 4
jz	short loc_64216D3E
cmp	ecx, 5
jz	short loc_64216D36
cmp	ecx, 6
jz	short loc_64216D2E
mov	dword ptr [edx+eax*4], 0
mov	eax, 2
mov	dword ptr [edx+eax*4], 0
inc	eax
mov	dword ptr [edx+eax*4], 0
inc	eax
mov	dword ptr [edx+eax*4], 0
inc	eax
mov	dword ptr [edx+eax*4], 0
inc	eax
mov	dword ptr [edx+eax*4], 0
inc	eax
mov	dword ptr [edx+eax*4], 0
inc	eax
cmp	eax, edi
jz	short loc_64216DA8
			
mov	dword ptr [edx+eax*4], 0
mov	dword ptr [edx+eax*4+4], 0
mov	dword ptr [edx+eax*4+8], 0
mov	dword ptr [edx+eax*4+0Ch], 0
mov	dword ptr [edx+eax*4+10h], 0
mov	dword ptr [edx+eax*4+14h], 0
mov	dword ptr [edx+eax*4+18h], 0
mov	dword ptr [edx+eax*4+1Ch], 0
add	eax, 8
cmp	eax, edi
jnz	short loc_64216D62
			
mov	[esp+0FCh+A.used], 1
mov	dword ptr [edx], 1
mov	[esp+0FCh+D.used], 1
mov	eax, [esp+0FCh+u.used]
			
test	eax, eax
jle	loc_64216EA0
mov	ecx, [esp+0FCh+u.dp]
test	byte ptr [ecx],	1
jnz	loc_64216EA0
lea	edi, [esp+0FCh+u]
mov	[esp+0FCh+var_F8], edi 
mov	[esp+0FCh+mp], edi 
call	_tma_mp_div_2
test	eax, eax
jnz	loc_64216AEF
cmp	[esp+0FCh+A.used], 0
jle	loc_6421707D
mov	edi, [esp+0FCh+A.dp]
test	byte ptr [edi],	1
jz	loc_6421707D
lea	res, [esp+0FCh+A]
mov	[esp+0FCh+var_F4], eax 
lea	ecx, [esp+0FCh+y]
mov	[esp+0FCh+var_F8], ecx 
mov	[esp+0FCh+mp], eax 
call	_tma_mp_add
test	eax, eax
jnz	loc_64216AEF
lea	edi, [esp+0FCh+B]
mov	[esp+0FCh+var_F4], edi 
mov	[esp+0FCh+var_F8], ebx 
mov	[esp+0FCh+mp], edi 
call	_tma_mp_sub
test	eax, eax
jnz	loc_64216AEF
			
lea	edx, [esp+0FCh+A]
mov	[esp+0FCh+var_F8], edx 
mov	[esp+0FCh+mp], edx 
call	_tma_mp_div_2
test	eax, eax
jnz	loc_64216AEF
lea	res, [esp+0FCh+B]
mov	[esp+0FCh+var_F8], eax 
mov	[esp+0FCh+mp], eax 
call	_tma_mp_div_2
test	eax, eax
jnz	loc_64216AEF
mov	res, [esp+0FCh+u.used]
jmp	loc_64216DC8
			
mov	ecx, [esp+0FCh+v.used]
test	ecx, ecx
jle	loc_64216F5F
mov	edi, [esp+0FCh+v.dp]
test	byte ptr [edi],	1
jnz	loc_64216F5F
lea	edx, [esp+0FCh+v]
mov	[esp+0FCh+var_F8], edx 
mov	[esp+0FCh+mp], edx 
call	_tma_mp_div_2
test	eax, eax
jnz	loc_64216AEF
mov	edx, [esp+0FCh+C.used]
test	edx, edx
jle	loc_64217060
mov	res, [esp+0FCh+C.dp]
test	byte ptr [eax],	1
jz	loc_64217060
mov	[esp+0FCh+var_F4], ebp
lea	edi, [esp+0FCh+y]
mov	[esp+0FCh+var_F8], edi 
mov	[esp+0FCh+mp], ebp 
call	_tma_mp_add
test	eax, eax
jnz	loc_64216AEF
lea	edx, [esp+0FCh+D]
mov	[esp+0FCh+var_F4], edx 
mov	[esp+0FCh+var_F8], ebx 
mov	[esp+0FCh+mp], edx 
call	_tma_mp_sub
test	eax, eax
jnz	loc_64216AEF
			
mov	[esp+0FCh+var_F8], ebp 
mov	[esp+0FCh+mp], ebp 
call	_tma_mp_div_2
test	eax, eax
jnz	loc_64216AEF
lea	res, [esp+0FCh+D]
mov	[esp+0FCh+var_F8], eax 
mov	[esp+0FCh+mp], eax 
call	_tma_mp_div_2
test	eax, eax
jz	loc_64216EA0
jmp	loc_64216AEF
			
lea	edx, [esp+0FCh+v]
mov	[esp+0FCh+var_F8], edx 
lea	res, [esp+0FCh+u]
mov	[esp+0FCh+mp], eax 
call	_tma_mp_cmp
inc	eax
jz	loc_642170F1
lea	ecx, [esp+0FCh+u]
mov	[esp+0FCh+var_F4], ecx 
lea	eax, [esp+0FCh+v]
mov	[esp+0FCh+var_F8], eax 
mov	[esp+0FCh+mp], ecx 
call	_tma_mp_sub
test	eax, eax
jnz	loc_64216AEF
lea	edi, [esp+0FCh+A]
mov	[esp+0FCh+var_F4], edi 
mov	[esp+0FCh+var_F8], ebp 
mov	[esp+0FCh+mp], edi 
call	_tma_mp_sub
test	eax, eax
jnz	loc_64216AEF
lea	edx, [esp+0FCh+B]
mov	[esp+0FCh+var_F4], edx 
lea	ecx, [esp+0FCh+D]
mov	[esp+0FCh+var_F8], ecx 
mov	[esp+0FCh+mp], edx 
call	_tma_mp_sub
test	eax, eax
jnz	loc_64216AEF
mov	res, [esp+0FCh+u.used]
test	eax, eax
jnz	loc_64216DC8
cmp	[esp+0FCh+v.sign], 1
jz	LBL_ERR
cmp	[esp+0FCh+v.used], 1
jg	LBL_ERR
mov	edi, [esp+0FCh+v.dp]
mov	eax, [edi]
cmp	eax, 1
ja	LBL_ERR
test	eax, eax
jz	LBL_ERR
cmp	[esp+0FCh+C.sign], 1
jz	loc_642170D4
mov	[esp+0FCh+var_F8], b_0 
mov	[esp+0FCh+mp], ebp 
call	_tma_mp_cmp_mag
inc	eax
jz	short loc_642170A0
mov	[esp+0FCh+var_F4], ebp 
mov	[esp+0FCh+var_F8], b_0 
mov	[esp+0FCh+mp], ebp 
call	_tma_mp_sub
test	eax, eax
jz	short loc_64217038
jmp	loc_64216AEF
			
cmp	[esp+0FCh+D.used], 0
jle	loc_64216F2E
mov	ecx, [esp+0FCh+D.dp]
test	byte ptr [ecx],	1
jz	loc_64216F2E
jmp	loc_64216EF3
			
cmp	[esp+0FCh+B.used], 0
jle	loc_64216E5E
mov	edx, [esp+0FCh+B.dp]
test	byte ptr [edx],	1
jz	loc_64216E5E
jmp	loc_64216E19
lea	edx, [esp+0FCh+var_AC]
mov	[esp+0FCh+var_C0], edx
mov	edi, edx
mov	b_0, ebp
mov	ecx, 4
rep movsd
mov	edi, ebp
mov	esi, [esp+0FCh+c]
mov	cl, 4
rep movsd
mov	edi, [esp+0FCh+c]
mov	esi, edx
mov	cl, 4
rep movsd
xor	eax, eax
jmp	loc_64216AEF
mov	[esp+0FCh+var_F4], ebp
mov	[esp+0FCh+var_F8], b_0 
mov	[esp+0FCh+mp], ebp 
call	_tma_mp_add
test	eax, eax
jz	loc_6421702D
jmp	loc_64216AEF
lea	eax, [esp+0FCh+v]
mov	[esp+0FCh+var_F4], eax 
lea	edi, [esp+0FCh+u]
mov	[esp+0FCh+var_F8], edi 
mov	[esp+0FCh+mp], eax 
call	_tma_mp_sub
test	eax, eax
jnz	loc_64216AEF
mov	[esp+0FCh+var_F4], ebp 
lea	edx, [esp+0FCh+A]
mov	[esp+0FCh+var_F8], edx 
mov	[esp+0FCh+mp], ebp 
call	_tma_mp_sub
test	eax, eax
jnz	loc_64216AEF
lea	ecx, [esp+0FCh+D]
mov	[esp+0FCh+var_F4], ecx 
lea	res, [esp+0FCh+B]
mov	[esp+0FCh+var_F8], eax 
mov	[esp+0FCh+mp], ecx 
call	_tma_mp_sub
test	eax, eax
jz	loc_64216FE8
jmp	loc_64216AEF
align 10h
public _tma_mp_addmod
push	ebx
sub	esp, 38h
mov	[esp+3Ch+var_3C], 80h 
call	_malloc
test	eax, eax
jz	loc_6421722C
xor	edx, edx
mov	dword ptr [eax+edx*4], 0
mov	dword ptr [eax+edx*4+4], 0
mov	dword ptr [eax+edx*4+8], 0
mov	dword ptr [eax+edx*4+0Ch], 0
mov	dword ptr [eax+edx*4+10h], 0
mov	dword ptr [eax+edx*4+14h], 0
mov	dword ptr [eax+edx*4+18h], 0
mov	dword ptr [eax+edx*4+1Ch], 0
add	edx, 8
cmp	edx, 20h
jnz	short loc_6421717A
mov	[esp+3Ch+t.dp],	eax
mov	[esp+3Ch+t.used], 0
mov	[esp+3Ch+t.alloc], 20h
mov	[esp+3Ch+t.sign], 0
lea	ebx, [esp+3Ch+t]
mov	[esp+3Ch+var_34], ebx 
mov	edx, [esp+3Ch+b]
mov	[esp+3Ch+var_38], edx 
mov	eax, [esp+3Ch+a]
mov	[esp+3Ch+var_3C], eax 
call	_tma_mp_add
test	eax, eax
jnz	short loc_64217215
mov	res, [esp+3Ch+d]
mov	[esp+3Ch+var_34], eax 
mov	ecx, [esp+3Ch+c]
mov	[esp+3Ch+var_38], ecx 
mov	[esp+3Ch+var_3C], ebx 
call	_tma_mp_mod
mov	[esp+3Ch+var_3C], ebx
mov	[esp+3Ch+var_20], res
call	_tma_mp_clear
mov	eax, [esp+3Ch+var_20]
add	esp, 38h
pop	ebx
retn
align 4
mov	eax, 0FFFFFFFEh
add	esp, 38h
pop	ebx
retn
align 4
public _fast_tma_mp_invmod
push	ebp
push	edi
push	esi
push	ebx
sub	esp, 0BCh
mov	ebx, [esp+0CCh+b]
mov	eax, [ebx]
test	eax, eax
jle	short loc_64217268
mov	edx, [b_0+0Ch]
test	byte ptr [edx],	1
jnz	short loc_64217268
mov	eax, 0FFFFFFFDh
add	esp, 0BCh
pop	b_0
pop	esi
pop	edi
pop	ebp
retn
align 4
			
mov	[esp+0CCh+var_B4], 0
lea	edi, [esp+0CCh+D]
mov	[esp+0CCh+var_94], edi
mov	[esp+0CCh+var_B8], edi
lea	esi, [esp+0CCh+B]
mov	[esp+0CCh+var_BC], esi
lea	ecx, [esp+0CCh+v]
mov	[esp+0CCh+var_C0], ecx
lea	edx, [esp+0CCh+u]
mov	[esp+0CCh+var_C4], edx
lea	ebp, [esp+0CCh+y]
mov	[esp+0CCh+var_C8], ebp
lea	eax, [esp+0CCh+x]
mov	[esp+0CCh+var_A0], eax
mov	[esp+0CCh+mp], eax 
call	_tma_mp_init_multi
test	eax, eax
jnz	short loc_6421725C
cmp	b_0, [esp+0CCh+var_A0]
jz	loc_6421749B
mov	edi, [b_0]
cmp	[esp+0CCh+x.alloc], edi
jl	loc_6421751C
mov	esi, [esp+0CCh+x.dp]
mov	res, [b_0+0Ch]
test	edi, edi
jle	loc_642178F0
lea	ecx, [edi-1]
and	ecx, 7
mov	ebp, [eax]
mov	[esi], ebp
mov	edx, 1
cmp	edx, edi
jz	loc_642173A2
test	ecx, ecx
jz	short loc_64217356
cmp	ecx, 1
jz	short loc_6421734B
cmp	ecx, 2
jz	short loc_64217344
cmp	ecx, 3
jz	short loc_6421733D
cmp	ecx, 4
jz	short loc_64217336
cmp	ecx, 5
jz	short loc_6421732F
cmp	ecx, 6
jz	short loc_64217328
mov	ebp, [eax+4]
mov	[esi+edx*4], ebp
mov	edx, 2
mov	ecx, [eax+edx*4]
mov	[esi+edx*4], ecx
inc	edx
mov	ebp, [eax+edx*4]
mov	[esi+edx*4], ebp
inc	edx
mov	ecx, [eax+edx*4]
mov	[esi+edx*4], ecx
inc	edx
mov	ebp, [eax+edx*4]
mov	[esi+edx*4], ebp
inc	edx
mov	ecx, [eax+edx*4]
mov	[esi+edx*4], ecx
inc	edx
mov	ebp, [eax+edx*4]
mov	[esi+edx*4], ebp
inc	edx
cmp	edx, edi
jz	short loc_642173A2
			
mov	ecx, [eax+edx*4]
mov	[esi+edx*4], ecx
lea	ecx, [edx+1]
mov	ebp, [eax+ecx*4]
mov	[esi+ecx*4], ebp
lea	ecx, [edx+2]
mov	ebp, [eax+ecx*4]
mov	[esi+ecx*4], ebp
lea	ecx, [edx+3]
mov	ebp, [eax+ecx*4]
mov	[esi+ecx*4], ebp
lea	ecx, [edx+4]
mov	ebp, [eax+ecx*4]
mov	[esi+ecx*4], ebp
lea	ecx, [edx+5]
mov	ebp, [eax+ecx*4]
mov	[esi+ecx*4], ebp
lea	ecx, [edx+6]
mov	ebp, [eax+ecx*4]
mov	[esi+ecx*4], ebp
lea	ecx, [edx+7]
mov	ebp, [eax+ecx*4]
mov	[esi+ecx*4], ebp
add	edx, 8
cmp	edx, edi
jnz	short loc_64217356
			
lea	esi, [esi+edx*4]
mov	eax, [esp+0CCh+x.used]
mov	[esp+0CCh+var_90], eax
cmp	edx, eax
jge	loc_6421748A
mov	ebp, edx
not	ebp
add	ebp, eax
and	ebp, 7
mov	dword ptr [esi], 0
lea	ecx, [esi+4]
lea	eax, [edx+1]
cmp	eax, [esp+0CCh+var_90]
jge	loc_6421748A
test	ebp, ebp
jz	short loc_64217447
cmp	ebp, 1
jz	short loc_64217437
cmp	ebp, 2
jz	short loc_6421742D
cmp	ebp, 3
jz	short loc_64217423
cmp	ebp, 4
jz	short loc_64217419
cmp	ebp, 5
jz	short loc_6421740F
cmp	ebp, 6
jz	short loc_64217405
mov	dword ptr [ecx], 0
lea	ecx, [esi+8]
lea	eax, [edx+2]
mov	dword ptr [ecx], 0
add	ecx, 4
inc	eax
mov	dword ptr [ecx], 0
add	ecx, 4
inc	eax
mov	dword ptr [ecx], 0
add	ecx, 4
inc	eax
mov	dword ptr [ecx], 0
add	ecx, 4
inc	eax
mov	dword ptr [ecx], 0
add	ecx, 4
inc	eax
mov	dword ptr [ecx], 0
add	ecx, 4
inc	eax
cmp	eax, [esp+0CCh+var_90]
jge	short loc_6421748A
			
mov	dword ptr [ecx], 0
mov	dword ptr [ecx+4], 0
mov	dword ptr [ecx+8], 0
mov	dword ptr [ecx+0Ch], 0
mov	dword ptr [ecx+10h], 0
mov	dword ptr [ecx+14h], 0
mov	dword ptr [ecx+18h], 0
mov	dword ptr [ecx+1Ch], 0
add	ecx, 20h
add	eax, 8
cmp	eax, [esp+0CCh+var_90]
jl	short loc_64217447
			
mov	[esp+0CCh+x.used], edi
mov	esi, [b_0+8]
mov	[esp+0CCh+x.sign], esi
lea	res, [esp+0CCh+y]
mov	[esp+0CCh+var_C4], eax 
mov	[esp+0CCh+var_C8], b_0 
mov	edx, [esp+0CCh+a]
mov	[esp+0CCh+mp], edx 
call	_tma_mp_mod
test	eax, eax
jz	loc_64217643
lea	esi, [esi+0]
			
mov	[esp+0CCh+var_B4], 0
mov	edi, [esp+0CCh+var_94]
mov	[esp+0CCh+var_B8], edi
lea	esi, [esp+0CCh+B]
mov	[esp+0CCh+var_BC], esi
lea	ecx, [esp+0CCh+v]
mov	[esp+0CCh+var_C0], ecx
lea	ebx, [esp+0CCh+u]
mov	[esp+0CCh+var_C4], ebx
lea	edx, [esp+0CCh+y]
mov	[esp+0CCh+var_C8], edx
lea	ebp, [esp+0CCh+x]
mov	[esp+0CCh+mp], ebp 
mov	[esp+0CCh+var_98], res
call	_tma_mp_clear_multi
mov	eax, [esp+0CCh+var_98]
add	esp, 0BCh
pop	ebx
pop	esi
pop	edi
pop	ebp
retn
lea	ebp, [edi+40h]
mov	ecx, 20h
mov	res, edi
cdq
idiv	ecx
sub	ebp, edx
lea	esi, ds:0[ebp*4]
mov	[esp+0CCh+var_C8], esi 
mov	ecx, [esp+0CCh+x.dp]
mov	[esp+0CCh+mp], ecx 
call	_realloc
mov	esi, eax
mov	eax, 0FFFFFFFEh
test	esi, esi
jz	loc_642174C4
mov	[esp+0CCh+x.dp], esi
mov	edx, [esp+0CCh+x.alloc]
mov	[esp+0CCh+x.alloc], ebp
cmp	ebp, edx
jle	loc_6421763C
lea	res, [esi+edx*4]
mov	ecx, edx
not	ecx
add	ecx, ebp
and	ecx, 7
mov	dword ptr [eax], 0
inc	edx
add	eax, 4
cmp	ebp, edx
jle	loc_6421763C
test	ecx, ecx
jz	short loc_642175FB
cmp	ecx, 1
jz	short loc_642175ED
cmp	ecx, 2
jz	short loc_642175E3
cmp	ecx, 3
jz	short loc_642175D9
cmp	ecx, 4
jz	short loc_642175CF
cmp	ecx, 5
jz	short loc_642175C5
cmp	ecx, 6
jz	short loc_642175BB
mov	dword ptr [eax], 0
inc	edx
add	eax, 4
mov	dword ptr [eax], 0
inc	edx
add	eax, 4
mov	dword ptr [eax], 0
inc	edx
add	eax, 4
mov	dword ptr [eax], 0
inc	edx
add	eax, 4
mov	dword ptr [eax], 0
inc	edx
add	eax, 4
mov	dword ptr [eax], 0
inc	edx
add	eax, 4
mov	dword ptr [eax], 0
inc	edx
add	eax, 4
cmp	ebp, edx
jle	short loc_6421763C
			
mov	dword ptr [eax], 0
mov	dword ptr [eax+4], 0
mov	dword ptr [eax+8], 0
mov	dword ptr [eax+0Ch], 0
mov	dword ptr [eax+10h], 0
mov	dword ptr [eax+14h], 0
mov	dword ptr [eax+18h], 0
mov	dword ptr [eax+1Ch], 0
add	edx, 8
add	eax, 20h
cmp	ebp, edx
jg	short loc_642175FB
			
mov	edi, [b_0]
jmp	loc_642172D9
lea	ebp, [esp+0CCh+u]
mov	[esp+0CCh+var_C8], ebp 
lea	edi, [esp+0CCh+x]
mov	[esp+0CCh+mp], edi 
call	_tma_mp_copy
test	eax, eax
jnz	loc_642174C4
lea	esi, [esp+0CCh+v]
mov	[esp+0CCh+var_C8], esi 
lea	ecx, [esp+0CCh+y]
mov	[esp+0CCh+mp], ecx 
call	_tma_mp_copy
test	eax, eax
jnz	loc_642174C4
mov	[esp+0CCh+D.sign], 0
mov	edx, [esp+0CCh+D.dp]
mov	esi, [esp+0CCh+D.alloc]
test	esi, esi
jle	loc_6421775B
lea	ecx, [esi-1]
and	ecx, 7
mov	dword ptr [edx+res*4], 0
mov	al, 1
cmp	eax, esi
jz	loc_6421775B
test	ecx, ecx
jz	short loc_64217715
cmp	ecx, 1
jz	short loc_64217709
cmp	ecx, 2
jz	short loc_64217701
cmp	ecx, 3
jz	short loc_642176F9
cmp	ecx, 4
jz	short loc_642176F1
cmp	ecx, 5
jz	short loc_642176E9
cmp	ecx, 6
jz	short loc_642176E1
mov	dword ptr [edx+eax*4], 0
mov	eax, 2
mov	dword ptr [edx+eax*4], 0
inc	eax
mov	dword ptr [edx+eax*4], 0
inc	eax
mov	dword ptr [edx+eax*4], 0
inc	eax
mov	dword ptr [edx+eax*4], 0
inc	eax
mov	dword ptr [edx+eax*4], 0
inc	eax
mov	dword ptr [edx+eax*4], 0
inc	eax
cmp	eax, esi
jz	short loc_6421775B
			
mov	dword ptr [edx+eax*4], 0
mov	dword ptr [edx+eax*4+4], 0
mov	dword ptr [edx+eax*4+8], 0
mov	dword ptr [edx+eax*4+0Ch], 0
mov	dword ptr [edx+eax*4+10h], 0
mov	dword ptr [edx+eax*4+14h], 0
mov	dword ptr [edx+eax*4+18h], 0
mov	dword ptr [edx+eax*4+1Ch], 0
add	eax, 8
cmp	eax, esi
jnz	short loc_64217715
			
mov	dword ptr [edx], 1
mov	[esp+0CCh+D.used], 1
mov	res, [esp+0CCh+u.used]
mov	esi, [esp+0CCh+var_94]
			
test	eax, eax
jle	loc_6421785C
mov	ecx, [esp+0CCh+u.dp]
test	byte ptr [ecx],	1
jnz	loc_6421785C
lea	edx, [esp+0CCh+u]
mov	[esp+0CCh+var_C8], edx 
mov	[esp+0CCh+mp], edx 
call	_tma_mp_div_2
test	eax, eax
jnz	loc_642174C4
cmp	[esp+0CCh+B.used], 0
jle	short loc_642177DA
mov	edx, [esp+0CCh+B.dp]
test	byte ptr [edx],	1
jz	short loc_642177DA
lea	res, [esp+0CCh+B]
mov	[esp+0CCh+var_C4], eax 
lea	edi, [esp+0CCh+x]
mov	[esp+0CCh+var_C8], edi 
mov	[esp+0CCh+mp], eax 
call	_tma_mp_sub
test	eax, eax
jnz	loc_642174C4
			
lea	ebp, [esp+0CCh+B]
mov	[esp+0CCh+var_C8], ebp 
mov	[esp+0CCh+mp], ebp 
call	_tma_mp_div_2
test	eax, eax
jnz	loc_642174C4
mov	res, [esp+0CCh+u.used]
jmp	loc_64217774
align 10h
lea	res, [esp+0CCh+v]
mov	[esp+0CCh+var_C8], eax 
mov	[esp+0CCh+mp], eax 
call	_tma_mp_div_2
test	eax, eax
jnz	loc_642174C4
mov	res, [esp+0CCh+D.used]
test	eax, eax
jle	short loc_64217848
mov	edi, [esp+0CCh+D.dp]
test	byte ptr [edi],	1
jz	short loc_64217848
mov	[esp+0CCh+var_C4], esi 
lea	ebp, [esp+0CCh+x]
mov	[esp+0CCh+var_C8], ebp 
mov	[esp+0CCh+mp], esi 
call	_tma_mp_sub
test	eax, eax
jnz	loc_642174C4
			
mov	[esp+0CCh+var_C8], esi 
mov	[esp+0CCh+mp], esi 
call	_tma_mp_div_2
test	eax, eax
jnz	loc_642174C4
			
mov	ecx, [esp+0CCh+v.used]
test	ecx, ecx
jle	short loc_6421786D
mov	edx, [esp+0CCh+v.dp]
test	byte ptr [edx],	1
jz	short loc_64217800
lea	ebp, [esp+0CCh+v]
mov	[esp+0CCh+var_C8], ebp 
lea	res, [esp+0CCh+u]
mov	[esp+0CCh+mp], eax 
call	_tma_mp_cmp
inc	eax
jz	short loc_642178F7
lea	edi, [esp+0CCh+u]
mov	[esp+0CCh+var_C4], edi 
lea	ebp, [esp+0CCh+v]
mov	[esp+0CCh+var_C8], ebp 
mov	[esp+0CCh+mp], edi 
call	_tma_mp_sub
test	eax, eax
jnz	loc_642174C4
lea	ecx, [esp+0CCh+B]
mov	[esp+0CCh+var_C4], ecx 
mov	[esp+0CCh+var_C8], esi 
mov	[esp+0CCh+mp], ecx 
call	_tma_mp_sub
test	eax, eax
jnz	loc_642174C4
mov	res, [esp+0CCh+u.used]
test	eax, eax
jnz	loc_64217774
cmp	[esp+0CCh+v.sign], 1
jz	short LBL_ERR
cmp	[esp+0CCh+v.used], 1
jle	short loc_64217937
			
mov	eax, 0FFFFFFFDh
jmp	loc_642174C4
align 10h
xor	edx, edx
jmp	loc_642173A5
lea	edx, [esp+0CCh+v]
mov	[esp+0CCh+var_C4], edx 
lea	eax, [esp+0CCh+u]
mov	[esp+0CCh+var_C8], eax 
mov	[esp+0CCh+mp], edx 
call	_tma_mp_sub
test	eax, eax
jnz	loc_642174C4
mov	[esp+0CCh+var_C4], esi 
lea	edi, [esp+0CCh+B]
mov	[esp+0CCh+var_C8], edi 
mov	[esp+0CCh+mp], esi 
call	_tma_mp_sub
test	eax, eax
jz	short loc_642178C6
jmp	loc_642174C4
mov	esi, [esp+0CCh+v.dp]
mov	eax, [esi]
cmp	eax, 1
ja	short LBL_ERR
test	eax, eax
jz	short LBL_ERR
mov	ecx, [esp+0CCh+a]
mov	edx, [ecx+8]
mov	[esp+0CCh+var_90], edx
mov	esi, [esp+0CCh+var_94]
cmp	[esp+0CCh+D.sign], 1
jnz	short loc_64217978
mov	[esp+0CCh+var_C4], esi 
mov	[esp+0CCh+var_C8], b_0 
mov	[esp+0CCh+mp], esi 
call	_tma_mp_add
test	eax, eax
jz	short loc_64217958
jmp	loc_642174C4
lea	res, [esp+0CCh+var_8C]
mov	edx, 4
mov	edi, eax
mov	esi, [esp+0CCh+var_94]
mov	ecx, edx
rep movsd
lea	b_0, [esp+0CCh+D]
mov	[esp+0CCh+var_94], ebx
mov	edi, ebx
mov	esi, [esp+0CCh+c]
mov	ecx, edx
rep movsd
mov	edi, [esp+0CCh+c]
mov	esi, eax
mov	ecx, edx
rep movsd
mov	ebp, [esp+0CCh+var_90]
mov	ebx, [esp+0CCh+c]
mov	[ebx+8], ebp
xor	eax, eax
jmp	loc_642174C4
align 4
public _tma_mp_invmod
push	ebx
sub	esp, 8
mov	edx, [esp+0Ch+a]
mov	eax, [esp+0Ch+b]
mov	ecx, [esp+0Ch+c]
cmp	dword ptr [eax+8], 1
jnz	short loc_642179E4
mov	b_0, 0FFFFFFFDh
add	esp, 8
pop	ebx
retn
cmp	dword ptr [b_0], 0
jz	short loc_642179DA
jle	short loc_642179FC
mov	ebx, [b_0+0Ch]
test	byte ptr [ebx],	1
jz	short loc_642179FC
add	esp, 8
pop	ebx
jmp	_fast_tma_mp_invmod
			
mov	[esp+0Ch+c], c_0
mov	[esp+0Ch+b], b_0
mov	[esp+0Ch+a], a_0
add	esp, 8
pop	ebx
jmp	_tma_mp_invmod_slow
align 4
public _tma_mp_exteuclid
push	ebp
push	edi
push	esi
push	ebx
sub	esp, 12Ch
mov	ebx, [esp+140h]
mov	dword ptr [esp+2Ch], 0
lea	edi, [esp+70h]
mov	[esp+28h], edi
lea	esi, [esp+80h]
mov	[esp+24h], esi
lea	ecx, [esp+90h]
mov	[esp+20h], ecx
lea	eax, [esp+0A0h]
mov	[esp+1Ch], eax
lea	edx, [esp+0B0h]
mov	[esp+18h], edx
lea	ebp, [esp+0C0h]
mov	[esp+3Ch], ebp
mov	[esp+14h], ebp
lea	edi, [esp+0D0h]
mov	[esp+10h], edi
lea	esi, [esp+0E0h]
mov	[esp+0Ch], esi
lea	ecx, [esp+0F0h]
mov	[esp+4Ch], ecx
mov	[esp+8], ecx
lea	eax, [esp+100h]
mov	[esp+58h], eax
mov	[esp+4], eax
lea	edx, [esp+110h]
mov	[esp+54h], edx
mov	[esp], edx	
call	_tma_mp_init_multi
mov	[esp+50h], eax
test	eax, eax
jnz	loc_64218D71
mov	dword ptr [esp+118h], 0
mov	edx, [esp+11Ch]
mov	esi, [esp+114h]
test	esi, esi
jle	loc_64217BA3
lea	ecx, [esi-1]
and	ecx, 7
mov	dword ptr [edx+eax*4], 0
mov	al, 1
cmp	eax, esi
jz	loc_64217BA3
test	ecx, ecx
jz	short loc_64217B5D
cmp	ecx, 1
jz	short loc_64217B51
cmp	ecx, 2
jz	short loc_64217B49
cmp	ecx, 3
jz	short loc_64217B41
cmp	ecx, 4
jz	short loc_64217B39
cmp	ecx, 5
jz	short loc_64217B31
cmp	ecx, 6
jz	short loc_64217B29
mov	dword ptr [edx+eax*4], 0
mov	eax, 2
mov	dword ptr [edx+eax*4], 0
inc	eax
mov	dword ptr [edx+eax*4], 0
inc	eax
mov	dword ptr [edx+eax*4], 0
inc	eax
mov	dword ptr [edx+eax*4], 0
inc	eax
mov	dword ptr [edx+eax*4], 0
inc	eax
mov	dword ptr [edx+eax*4], 0
inc	eax
cmp	eax, esi
jz	short loc_64217BA3
			
mov	dword ptr [edx+eax*4], 0
mov	dword ptr [edx+eax*4+4], 0
mov	dword ptr [edx+eax*4+8], 0
mov	dword ptr [edx+eax*4+0Ch], 0
mov	dword ptr [edx+eax*4+10h], 0
mov	dword ptr [edx+eax*4+14h], 0
mov	dword ptr [edx+eax*4+18h], 0
mov	dword ptr [edx+eax*4+1Ch], 0
add	eax, 8
cmp	eax, esi
jnz	short loc_64217B5D
			
mov	dword ptr [edx], 1
mov	dword ptr [esp+110h], 1
cmp	a_0, [esp+4Ch]
jz	loc_64217D98
mov	edi, [a_0]
cmp	[esp+0F4h], edi
jl	loc_64218D80
mov	ecx, [a_0+0Ch]
mov	err, [esp+0FCh]
test	edi, edi
jle	loc_64218E94
lea	esi, [edi-1]
and	esi, 7
mov	edx, [ecx]
mov	[eax], edx
add	eax, 4
mov	edx, 1
cmp	edx, edi
jge	loc_64217CA2
test	esi, esi
jz	short loc_64217C62
cmp	esi, 1
jz	short loc_64217C55
cmp	esi, 2
jz	short loc_64217C4C
cmp	esi, 3
jz	short loc_64217C43
cmp	esi, 4
jz	short loc_64217C3A
cmp	esi, 5
jz	short loc_64217C31
cmp	esi, 6
jz	short loc_64217C28
mov	esi, [ecx+4]
mov	[eax], esi
add	eax, 4
mov	edx, 2
mov	ebp, [ecx+edx*4]
mov	[eax], ebp
add	eax, 4
inc	edx
mov	esi, [ecx+edx*4]
mov	[eax], esi
add	eax, 4
inc	edx
mov	ebp, [ecx+edx*4]
mov	[eax], ebp
add	eax, 4
inc	edx
mov	esi, [ecx+edx*4]
mov	[eax], esi
add	eax, 4
inc	edx
mov	ebp, [ecx+edx*4]
mov	[eax], ebp
add	eax, 4
inc	edx
mov	esi, [ecx+edx*4]
mov	[eax], esi
add	eax, 4
inc	edx
cmp	edx, edi
jge	short loc_64217CA2
			
mov	ebp, [ecx+edx*4]
mov	[eax], ebp
mov	esi, [ecx+edx*4+4]
mov	[eax+4], esi
mov	ebp, [ecx+edx*4+8]
mov	[eax+8], ebp
mov	esi, [ecx+edx*4+0Ch]
mov	[eax+0Ch], esi
mov	ebp, [ecx+edx*4+10h]
mov	[eax+10h], ebp
mov	esi, [ecx+edx*4+14h]
mov	[eax+14h], esi
mov	ebp, [ecx+edx*4+18h]
mov	[eax+18h], ebp
mov	esi, [ecx+edx*4+1Ch]
mov	[eax+1Ch], esi
add	eax, 20h
add	edx, 8
cmp	edx, edi
jl	short loc_64217C62
			
mov	ecx, [esp+0F0h]
mov	[esp+5Ch], ecx
cmp	edx, ecx
jge	loc_64217D87
mov	ebp, edx
not	ebp
add	ebp, ecx
and	ebp, 7
mov	dword ptr [eax], 0
lea	ecx, [eax+4]
lea	esi, [edx+1]
cmp	esi, [esp+5Ch]
jge	loc_64217D87
test	ebp, ebp
jz	short loc_64217D44
cmp	ebp, 1
jz	short loc_64217D34
cmp	ebp, 2
jz	short loc_64217D2A
cmp	ebp, 3
jz	short loc_64217D20
cmp	ebp, 4
jz	short loc_64217D16
cmp	ebp, 5
jz	short loc_64217D0C
cmp	ebp, 6
jz	short loc_64217D02
mov	dword ptr [ecx], 0
lea	ecx, [eax+8]
lea	esi, [edx+2]
mov	dword ptr [ecx], 0
add	ecx, 4
inc	esi
mov	dword ptr [ecx], 0
add	ecx, 4
inc	esi
mov	dword ptr [ecx], 0
add	ecx, 4
inc	esi
mov	dword ptr [ecx], 0
add	ecx, 4
inc	esi
mov	dword ptr [ecx], 0
add	ecx, 4
inc	esi
mov	dword ptr [ecx], 0
add	ecx, 4
inc	esi
cmp	esi, [esp+5Ch]
jge	short loc_64217D87
			
mov	dword ptr [ecx], 0
mov	dword ptr [ecx+4], 0
mov	dword ptr [ecx+8], 0
mov	dword ptr [ecx+0Ch], 0
mov	dword ptr [ecx+10h], 0
mov	dword ptr [ecx+14h], 0
mov	dword ptr [ecx+18h], 0
mov	dword ptr [ecx+1Ch], 0
add	ecx, 20h
add	esi, 8
cmp	esi, [esp+5Ch]
jl	short loc_64217D44
			
mov	[esp+0F0h], edi
mov	eax, [a_0+8]
mov	[esp+0F8h], eax
mov	dword ptr [esp+0D8h], 0
mov	edx, [esp+0DCh]
mov	a_0, [esp+0D4h]
test	ebx, ebx
jle	loc_64217E7A
lea	ecx, [ebx-1]
and	ecx, 7
mov	dword ptr [edx], 0
mov	eax, 1
cmp	eax, ebx
jz	loc_64217E7A
test	ecx, ecx
jz	short loc_64217E34
cmp	ecx, 1
jz	short loc_64217E28
cmp	ecx, 2
jz	short loc_64217E20
cmp	ecx, 3
jz	short loc_64217E18
cmp	ecx, 4
jz	short loc_64217E10
cmp	ecx, 5
jz	short loc_64217E08
cmp	ecx, 6
jz	short loc_64217E00
mov	dword ptr [edx+eax*4], 0
mov	eax, 2
mov	dword ptr [edx+eax*4], 0
inc	eax
mov	dword ptr [edx+eax*4], 0
inc	eax
mov	dword ptr [edx+eax*4], 0
inc	eax
mov	dword ptr [edx+eax*4], 0
inc	eax
mov	dword ptr [edx+eax*4], 0
inc	eax
mov	dword ptr [edx+eax*4], 0
inc	eax
cmp	eax, ebx
jz	short loc_64217E7A
			
mov	dword ptr [edx+eax*4], 0
mov	dword ptr [edx+eax*4+4], 0
mov	dword ptr [edx+eax*4+8], 0
mov	dword ptr [edx+eax*4+0Ch], 0
mov	dword ptr [edx+eax*4+10h], 0
mov	dword ptr [edx+eax*4+14h], 0
mov	dword ptr [edx+eax*4+18h], 0
mov	dword ptr [edx+eax*4+1Ch], 0
add	eax, 8
cmp	eax, ebx
jnz	short loc_64217E34
			
mov	dword ptr [edx], 1
mov	dword ptr [esp+0D0h], 1
mov	ebx, [esp+3Ch]
cmp	[esp+144h], ebx
jz	loc_64218E9C
mov	ecx, [esp+144h]
mov	esi, [ecx]
cmp	[esp+0C4h], esi
jl	loc_64218CD8
mov	ebp, [esp+144h]
mov	ecx, [ebp+78h+v3.dp]
mov	err, [esp+0CCh]
test	esi, esi
jle	loc_64218ED8
lea	ebx, [esi-1]
and	ebx, 7
mov	edi, [ecx]
mov	[eax], edi
add	eax, 4
mov	edx, 1
cmp	edx, esi
jge	loc_64217F8E
test	ebx, ebx
jz	short loc_64217F4E
cmp	ebx, 1
jz	short loc_64217F41
cmp	ebx, 2
jz	short loc_64217F38
cmp	ebx, 3
jz	short loc_64217F2F
cmp	ebx, 4
jz	short loc_64217F26
cmp	ebx, 5
jz	short loc_64217F1D
cmp	ebx, 6
jz	short loc_64217F14
mov	edx, [ecx+4]
mov	[eax], edx
add	eax, 4
mov	edx, 2
mov	ebp, [ecx+edx*4]
mov	[eax], ebp
add	eax, 4
inc	edx
mov	ebx, [ecx+edx*4]
mov	[eax], ebx
add	eax, 4
inc	edx
mov	edi, [ecx+edx*4]
mov	[eax], edi
add	eax, 4
inc	edx
mov	ebp, [ecx+edx*4]
mov	[eax], ebp
add	eax, 4
inc	edx
mov	ebx, [ecx+edx*4]
mov	[eax], ebx
add	eax, 4
inc	edx
mov	edi, [ecx+edx*4]
mov	[eax], edi
add	eax, 4
inc	edx
cmp	edx, esi
jge	short loc_64217F8E
			
mov	ebp, [ecx+edx*4]
mov	[eax], ebp
mov	ebx, [ecx+edx*4+4]
mov	[eax+4], ebx
mov	edi, [ecx+edx*4+8]
mov	[eax+8], edi
mov	ebp, [ecx+edx*4+0Ch]
mov	[eax+0Ch], ebp
mov	ebx, [ecx+edx*4+10h]
mov	[eax+10h], ebx
mov	edi, [ecx+edx*4+14h]
mov	[eax+14h], edi
mov	ebp, [ecx+edx*4+18h]
mov	[eax+18h], ebp
mov	ebx, [ecx+edx*4+1Ch]
mov	[eax+1Ch], ebx
add	eax, 20h
add	edx, 8
cmp	edx, esi
jl	short loc_64217F4E
			
mov	ebp, [esp+0C0h]
cmp	edx, ebp
jge	loc_64218069
mov	edi, edx
not	edi
add	edi, ebp
and	edi, 7
mov	dword ptr [eax], 0
lea	ecx, [eax+4]
lea	ebx, [edx+1]
cmp	ebx, ebp
jge	loc_64218069
test	edi, edi
jz	short loc_64218028
cmp	edi, 1
jz	short loc_6421801A
cmp	edi, 2
jz	short loc_64218010
cmp	edi, 3
jz	short loc_64218006
cmp	edi, 4
jz	short loc_64217FFC
cmp	edi, 5
jz	short loc_64217FF2
cmp	edi, 6
jz	short loc_64217FE8
mov	dword ptr [ecx], 0
lea	ecx, [eax+8]
lea	ebx, [edx+2]
mov	dword ptr [ecx], 0
add	ecx, 4
inc	ebx
mov	dword ptr [ecx], 0
add	ecx, 4
inc	ebx
mov	dword ptr [ecx], 0
add	ecx, 4
inc	ebx
mov	dword ptr [ecx], 0
add	ecx, 4
inc	ebx
mov	dword ptr [ecx], 0
add	ecx, 4
inc	ebx
mov	dword ptr [ecx], 0
add	ecx, 4
inc	ebx
cmp	ebx, ebp
jge	short loc_64218069
			
mov	dword ptr [ecx], 0
mov	dword ptr [ecx+4], 0
mov	dword ptr [ecx+8], 0
mov	dword ptr [ecx+0Ch], 0
mov	dword ptr [ecx+10h], 0
mov	dword ptr [ecx+14h], 0
mov	dword ptr [ecx+18h], 0
mov	dword ptr [ecx+1Ch], 0
add	ecx, 20h
add	ebx, 8
cmp	ebx, ebp
jl	short loc_64218028
			
mov	[esp+0C0h], esi
mov	ecx, [esp+144h]
mov	eax, [ecx+8]
mov	[esp+0C8h], eax
			
test	esi, esi
jz	loc_64218EDF
mov	dword ptr [esp+0Ch], 0 
lea	edi, [esp+80h]
mov	[esp+8], edi	
lea	edx, [esp+0C0h]
mov	[esp+4], edx	
mov	esi, [esp+4Ch]
mov	[esp], esi	
call	_tma_mp_div
test	eax, eax
jnz	loc_64218CF4
lea	err, [esp+70h]
mov	[esp+8], eax	
lea	ebp, [esp+80h]
mov	[esp+4], ebp	
lea	ebx, [esp+0E0h]
mov	[esp], ebx	
call	_tma_mp_mul
test	eax, eax
jnz	loc_64218CF4
lea	edx, [esp+0B0h]
mov	[esp+8], edx	
lea	esi, [esp+70h]
mov	[esp+4], esi	
mov	ecx, [esp+54h]
mov	[esp], ecx	
call	_tma_mp_sub
test	eax, eax
jnz	loc_64218CF4
lea	ebp, [esp+70h]
mov	[esp+8], ebp	
lea	ebx, [esp+80h]
mov	[esp+4], ebx	
lea	edi, [esp+0D0h]
mov	[esp], edi	
call	_tma_mp_mul
test	eax, eax
jnz	loc_64218CF4
lea	esi, [esp+0A0h]
mov	[esp+8], esi	
lea	ecx, [esp+70h]
mov	[esp+4], ecx	
mov	err, [esp+58h]
mov	[esp], eax	
call	_tma_mp_sub
test	eax, eax
jnz	loc_64218CF4
lea	ebx, [esp+70h]
mov	[esp+8], ebx	
lea	edi, [esp+80h]
mov	[esp+4], edi	
lea	edx, [esp+0C0h]
mov	[esp], edx	
call	_tma_mp_mul
test	eax, eax
jnz	loc_64218CF4
lea	ecx, [esp+90h]
mov	[esp+8], ecx	
lea	err, [esp+70h]
mov	[esp+4], eax	
mov	ebp, [esp+4Ch]
mov	[esp], ebp	
call	_tma_mp_sub
test	eax, eax
jnz	loc_64218CF4
mov	esi, [esp+0E0h]
cmp	[esp+114h], esi
jl	loc_64218DA0
mov	edx, [esp+0ECh]
mov	ecx, [esp+11Ch]
test	esi, esi
jle	loc_64218EA8
lea	ebx, [esi-1]
and	ebx, 7
mov	edi, [edx]
mov	[ecx], edi
mov	err, 1
cmp	eax, esi
jz	loc_64218296
test	ebx, ebx
jz	short loc_6421824A
cmp	ebx, 1
jz	short loc_6421823F
cmp	ebx, 2
jz	short loc_64218238
cmp	ebx, 3
jz	short loc_64218231
cmp	ebx, 4
jz	short loc_6421822A
cmp	ebx, 5
jz	short loc_64218223
cmp	ebx, 6
jz	short loc_6421821C
mov	eax, [edx+4]
mov	[ecx+4], eax
mov	eax, 2
mov	ebp, [edx+eax*4]
mov	[ecx+eax*4], ebp
inc	eax
mov	ebx, [edx+eax*4]
mov	[ecx+eax*4], ebx
inc	eax
mov	edi, [edx+eax*4]
mov	[ecx+eax*4], edi
inc	eax
mov	ebp, [edx+eax*4]
mov	[ecx+eax*4], ebp
inc	eax
mov	ebx, [edx+eax*4]
mov	[ecx+eax*4], ebx
inc	eax
mov	edi, [edx+eax*4]
mov	[ecx+eax*4], edi
inc	eax
cmp	eax, esi
jz	short loc_64218296
			
mov	edi, [edx+eax*4]
mov	[ecx+eax*4], edi
lea	ebp, [eax+1]
mov	ebx, [edx+ebp*4]
mov	[ecx+ebp*4], ebx
lea	ebx, [eax+2]
mov	edi, [edx+ebx*4]
mov	[ecx+ebx*4], edi
lea	ebx, [eax+3]
mov	ebp, [edx+ebx*4]
mov	[ecx+ebx*4], ebp
lea	ebp, [eax+4]
mov	edi, [edx+ebp*4]
mov	[ecx+ebp*4], edi
lea	ebp, [eax+5]
mov	ebx, [edx+ebp*4]
mov	[ecx+ebp*4], ebx
lea	ebx, [eax+6]
mov	edi, [edx+ebx*4]
mov	[ecx+ebx*4], edi
lea	ebx, [eax+7]
mov	ebp, [edx+ebx*4]
mov	[ecx+ebx*4], ebp
add	eax, 8
cmp	eax, esi
jnz	short loc_6421824A
			
lea	ecx, [ecx+eax*4]
mov	ebp, [esp+110h]
cmp	ebp, eax
jle	loc_64218374
mov	edi, eax
not	edi
add	edi, ebp
and	edi, 7
mov	dword ptr [ecx], 0
lea	edx, [ecx+4]
lea	ebx, [eax+1]
cmp	ebp, ebx
jle	loc_64218374
test	edi, edi
jz	short loc_64218333
cmp	edi, 1
jz	short loc_64218325
cmp	edi, 2
jz	short loc_6421831B
cmp	edi, 3
jz	short loc_64218311
cmp	edi, 4
jz	short loc_64218307
cmp	edi, 5
jz	short loc_642182FD
cmp	edi, 6
jz	short loc_642182F3
mov	dword ptr [edx], 0
lea	edx, [ecx+8]
lea	ebx, [eax+2]
mov	dword ptr [edx], 0
add	edx, 4
inc	ebx
mov	dword ptr [edx], 0
add	edx, 4
inc	ebx
mov	dword ptr [edx], 0
add	edx, 4
inc	ebx
mov	dword ptr [edx], 0
add	edx, 4
inc	ebx
mov	dword ptr [edx], 0
add	edx, 4
inc	ebx
mov	dword ptr [edx], 0
add	edx, 4
inc	ebx
cmp	ebp, ebx
jle	short loc_64218374
			
mov	dword ptr [edx], 0
mov	dword ptr [edx+4], 0
mov	dword ptr [edx+8], 0
mov	dword ptr [edx+0Ch], 0
mov	dword ptr [edx+10h], 0
mov	dword ptr [edx+14h], 0
mov	dword ptr [edx+18h], 0
mov	dword ptr [edx+1Ch], 0
add	edx, 20h
add	ebx, 8
cmp	ebp, ebx
jg	short loc_64218333
			
mov	[esp+110h], esi
mov	edx, [esp+0E8h]
mov	[esp+118h], edx
mov	esi, [esp+0D0h]
cmp	[esp+104h], esi
jl	loc_64218DC4
mov	edx, [esp+0DCh]
mov	ecx, [esp+10Ch]
test	esi, esi
jle	loc_64218EB0
lea	ebx, [esi-1]
and	ebx, 7
mov	ebp, [edx]
mov	[ecx], ebp
mov	err, 1
cmp	eax, esi
jz	loc_64218471
test	ebx, ebx
jz	short loc_64218425
cmp	ebx, 1
jz	short loc_6421841A
cmp	ebx, 2
jz	short loc_64218413
cmp	ebx, 3
jz	short loc_6421840C
cmp	ebx, 4
jz	short loc_64218405
cmp	ebx, 5
jz	short loc_642183FE
cmp	ebx, 6
jz	short loc_642183F7
mov	eax, [edx+4]
mov	[ecx+4], eax
mov	eax, 2
mov	ebp, [edx+eax*4]
mov	[ecx+eax*4], ebp
inc	eax
mov	ebx, [edx+eax*4]
mov	[ecx+eax*4], ebx
inc	eax
mov	edi, [edx+eax*4]
mov	[ecx+eax*4], edi
inc	eax
mov	ebp, [edx+eax*4]
mov	[ecx+eax*4], ebp
inc	eax
mov	ebx, [edx+eax*4]
mov	[ecx+eax*4], ebx
inc	eax
mov	edi, [edx+eax*4]
mov	[ecx+eax*4], edi
inc	eax
cmp	eax, esi
jz	short loc_64218471
			
mov	ebx, [edx+eax*4]
mov	[ecx+eax*4], ebx
lea	ebp, [eax+1]
mov	edi, [edx+ebp*4]
mov	[ecx+ebp*4], edi
lea	ebp, [eax+2]
mov	ebx, [edx+ebp*4]
mov	[ecx+ebp*4], ebx
lea	ebx, [eax+3]
mov	edi, [edx+ebx*4]
mov	[ecx+ebx*4], edi
lea	ebx, [eax+4]
mov	ebp, [edx+ebx*4]
mov	[ecx+ebx*4], ebp
lea	ebp, [eax+5]
mov	edi, [edx+ebp*4]
mov	[ecx+ebp*4], edi
lea	ebp, [eax+6]
mov	ebx, [edx+ebp*4]
mov	[ecx+ebp*4], ebx
lea	ebx, [eax+7]
mov	edi, [edx+ebx*4]
mov	[ecx+ebx*4], edi
add	eax, 8
cmp	eax, esi
jnz	short loc_64218425
			
lea	ecx, [ecx+eax*4]
mov	ebp, [esp+100h]
cmp	eax, ebp
jge	loc_6421854F
mov	edi, eax
not	edi
add	edi, ebp
and	edi, 7
mov	dword ptr [ecx], 0
lea	edx, [ecx+4]
lea	ebx, [eax+1]
cmp	ebx, ebp
jge	loc_6421854F
test	edi, edi
jz	short loc_6421850E
cmp	edi, 1
jz	short loc_64218500
cmp	edi, 2
jz	short loc_642184F6
cmp	edi, 3
jz	short loc_642184EC
cmp	edi, 4
jz	short loc_642184E2
cmp	edi, 5
jz	short loc_642184D8
cmp	edi, 6
jz	short loc_642184CE
mov	dword ptr [edx], 0
lea	edx, [ecx+8]
lea	ebx, [eax+2]
mov	dword ptr [edx], 0
add	edx, 4
inc	ebx
mov	dword ptr [edx], 0
add	edx, 4
inc	ebx
mov	dword ptr [edx], 0
add	edx, 4
inc	ebx
mov	dword ptr [edx], 0
add	edx, 4
inc	ebx
mov	dword ptr [edx], 0
add	edx, 4
inc	ebx
mov	dword ptr [edx], 0
add	edx, 4
inc	ebx
cmp	ebx, ebp
jge	short loc_6421854F
			
mov	dword ptr [edx], 0
mov	dword ptr [edx+4], 0
mov	dword ptr [edx+8], 0
mov	dword ptr [edx+0Ch], 0
mov	dword ptr [edx+10h], 0
mov	dword ptr [edx+14h], 0
mov	dword ptr [edx+18h], 0
mov	dword ptr [edx+1Ch], 0
add	edx, 20h
add	ebx, 8
cmp	ebx, ebp
jl	short loc_6421850E
			
mov	[esp+100h], esi
mov	ecx, [esp+0D8h]
mov	[esp+108h], ecx
mov	esi, [esp+0C0h]
cmp	[esp+0F4h], esi
jl	loc_64218DE8
mov	edx, [esp+0CCh]
mov	ecx, [esp+0FCh]
test	esi, esi
jle	loc_64218EB8
lea	ebx, [esi-1]
and	ebx, 7
mov	err, [edx]
mov	[ecx], eax
mov	eax, 1
cmp	eax, esi
jz	loc_6421864C
test	ebx, ebx
jz	short loc_64218600
cmp	ebx, 1
jz	short loc_642185F5
cmp	ebx, 2
jz	short loc_642185EE
cmp	ebx, 3
jz	short loc_642185E7
cmp	ebx, 4
jz	short loc_642185E0
cmp	ebx, 5
jz	short loc_642185D9
cmp	ebx, 6
jz	short loc_642185D2
mov	eax, [edx+4]
mov	[ecx+4], eax
mov	eax, 2
mov	ebp, [edx+eax*4]
mov	[ecx+eax*4], ebp
inc	eax
mov	ebx, [edx+eax*4]
mov	[ecx+eax*4], ebx
inc	eax
mov	edi, [edx+eax*4]
mov	[ecx+eax*4], edi
inc	eax
mov	ebp, [edx+eax*4]
mov	[ecx+eax*4], ebp
inc	eax
mov	ebx, [edx+eax*4]
mov	[ecx+eax*4], ebx
inc	eax
mov	edi, [edx+eax*4]
mov	[ecx+eax*4], edi
inc	eax
cmp	eax, esi
jz	short loc_6421864C
			
mov	ebp, [edx+eax*4]
mov	[ecx+eax*4], ebp
lea	ebx, [eax+1]
mov	edi, [edx+ebx*4]
mov	[ecx+ebx*4], edi
lea	ebx, [eax+2]
mov	ebp, [edx+ebx*4]
mov	[ecx+ebx*4], ebp
lea	ebp, [eax+3]
mov	edi, [edx+ebp*4]
mov	[ecx+ebp*4], edi
lea	ebp, [eax+4]
mov	ebx, [edx+ebp*4]
mov	[ecx+ebp*4], ebx
lea	ebx, [eax+5]
mov	edi, [edx+ebx*4]
mov	[ecx+ebx*4], edi
lea	ebx, [eax+6]
mov	ebp, [edx+ebx*4]
mov	[ecx+ebx*4], ebp
lea	ebp, [eax+7]
mov	edi, [edx+ebp*4]
mov	[ecx+ebp*4], edi
add	eax, 8
cmp	eax, esi
jnz	short loc_64218600
			
lea	ecx, [ecx+eax*4]
mov	ebp, [esp+0F0h]
cmp	eax, ebp
jge	loc_6421872A
mov	edi, eax
not	edi
add	edi, ebp
and	edi, 7
mov	dword ptr [ecx], 0
lea	edx, [ecx+4]
lea	ebx, [eax+1]
cmp	ebx, ebp
jge	loc_6421872A
test	edi, edi
jz	short loc_642186E9
cmp	edi, 1
jz	short loc_642186DB
cmp	edi, 2
jz	short loc_642186D1
cmp	edi, 3
jz	short loc_642186C7
cmp	edi, 4
jz	short loc_642186BD
cmp	edi, 5
jz	short loc_642186B3
cmp	edi, 6
jz	short loc_642186A9
mov	dword ptr [edx], 0
lea	edx, [ecx+8]
lea	ebx, [eax+2]
mov	dword ptr [edx], 0
add	edx, 4
inc	ebx
mov	dword ptr [edx], 0
add	edx, 4
inc	ebx
mov	dword ptr [edx], 0
add	edx, 4
inc	ebx
mov	dword ptr [edx], 0
add	edx, 4
inc	ebx
mov	dword ptr [edx], 0
add	edx, 4
inc	ebx
mov	dword ptr [edx], 0
add	edx, 4
inc	ebx
cmp	ebx, ebp
jge	short loc_6421872A
			
mov	dword ptr [edx], 0
mov	dword ptr [edx+4], 0
mov	dword ptr [edx+8], 0
mov	dword ptr [edx+0Ch], 0
mov	dword ptr [edx+10h], 0
mov	dword ptr [edx+14h], 0
mov	dword ptr [edx+18h], 0
mov	dword ptr [edx+1Ch], 0
add	edx, 20h
add	ebx, 8
cmp	ebx, ebp
jl	short loc_642186E9
			
mov	[esp+0F0h], esi
mov	edx, [esp+0C8h]
mov	[esp+0F8h], edx
mov	esi, [esp+0B0h]
cmp	[esp+0E4h], esi
jl	loc_64218E0C
mov	edx, [esp+0BCh]
mov	ecx, [esp+0ECh]
test	esi, esi
jle	loc_64218EC0
lea	ebx, [esi-1]
and	ebx, 7
mov	err, [edx]
mov	[ecx], eax
mov	eax, 1
cmp	eax, esi
jz	loc_64218827
test	ebx, ebx
jz	short loc_642187DB
cmp	ebx, 1
jz	short loc_642187D0
cmp	ebx, 2
jz	short loc_642187C9
cmp	ebx, 3
jz	short loc_642187C2
cmp	ebx, 4
jz	short loc_642187BB
cmp	ebx, 5
jz	short loc_642187B4
cmp	ebx, 6
jz	short loc_642187AD
mov	eax, [edx+4]
mov	[ecx+4], eax
mov	eax, 2
mov	ebp, [edx+eax*4]
mov	[ecx+eax*4], ebp
inc	eax
mov	ebx, [edx+eax*4]
mov	[ecx+eax*4], ebx
inc	eax
mov	edi, [edx+eax*4]
mov	[ecx+eax*4], edi
inc	eax
mov	ebp, [edx+eax*4]
mov	[ecx+eax*4], ebp
inc	eax
mov	ebx, [edx+eax*4]
mov	[ecx+eax*4], ebx
inc	eax
mov	edi, [edx+eax*4]
mov	[ecx+eax*4], edi
inc	eax
cmp	eax, esi
jz	short loc_64218827
			
mov	ebx, [edx+eax*4]
mov	[ecx+eax*4], ebx
lea	ebp, [eax+1]
mov	edi, [edx+ebp*4]
mov	[ecx+ebp*4], edi
lea	ebp, [eax+2]
mov	ebx, [edx+ebp*4]
mov	[ecx+ebp*4], ebx
lea	ebx, [eax+3]
mov	edi, [edx+ebx*4]
mov	[ecx+ebx*4], edi
lea	ebx, [eax+4]
mov	ebp, [edx+ebx*4]
mov	[ecx+ebx*4], ebp
lea	ebp, [eax+5]
mov	edi, [edx+ebp*4]
mov	[ecx+ebp*4], edi
lea	ebp, [eax+6]
mov	ebx, [edx+ebp*4]
mov	[ecx+ebp*4], ebx
lea	ebx, [eax+7]
mov	edi, [edx+ebx*4]
mov	[ecx+ebx*4], edi
add	eax, 8
cmp	eax, esi
jnz	short loc_642187DB
			
lea	ecx, [ecx+eax*4]
mov	ebp, [esp+0E0h]
cmp	ebp, eax
jle	loc_64218905
mov	edi, eax
not	edi
add	edi, ebp
and	edi, 7
mov	dword ptr [ecx], 0
lea	edx, [ecx+4]
lea	ebx, [eax+1]
cmp	ebx, ebp
jge	loc_64218905
test	edi, edi
jz	short loc_642188C4
cmp	edi, 1
jz	short loc_642188B6
cmp	edi, 2
jz	short loc_642188AC
cmp	edi, 3
jz	short loc_642188A2
cmp	edi, 4
jz	short loc_64218898
cmp	edi, 5
jz	short loc_6421888E
cmp	edi, 6
jz	short loc_64218884
mov	dword ptr [edx], 0
lea	edx, [ecx+8]
lea	ebx, [eax+2]
mov	dword ptr [edx], 0
add	edx, 4
inc	ebx
mov	dword ptr [edx], 0
add	edx, 4
inc	ebx
mov	dword ptr [edx], 0
add	edx, 4
inc	ebx
mov	dword ptr [edx], 0
add	edx, 4
inc	ebx
mov	dword ptr [edx], 0
add	edx, 4
inc	ebx
mov	dword ptr [edx], 0
add	edx, 4
inc	ebx
cmp	ebx, ebp
jge	short loc_64218905
			
mov	dword ptr [edx], 0
mov	dword ptr [edx+4], 0
mov	dword ptr [edx+8], 0
mov	dword ptr [edx+0Ch], 0
mov	dword ptr [edx+10h], 0
mov	dword ptr [edx+14h], 0
mov	dword ptr [edx+18h], 0
mov	dword ptr [edx+1Ch], 0
add	edx, 20h
add	ebx, 8
cmp	ebx, ebp
jl	short loc_642188C4
			
mov	[esp+0E0h], esi
mov	esi, [esp+0B8h]
mov	[esp+0E8h], esi
mov	esi, [esp+0A0h]
cmp	[esp+0D4h], esi
jl	loc_64218E34
mov	edx, [esp+0ACh]
mov	ecx, [esp+0DCh]
test	esi, esi
jle	loc_64218EC8
lea	ebx, [esi-1]
and	ebx, 7
mov	err, [edx]
mov	[ecx], eax
mov	eax, 1
cmp	eax, esi
jz	loc_64218A02
test	ebx, ebx
jz	short loc_642189B6
cmp	ebx, 1
jz	short loc_642189AB
cmp	ebx, 2
jz	short loc_642189A4
cmp	ebx, 3
jz	short loc_6421899D
cmp	ebx, 4
jz	short loc_64218996
cmp	ebx, 5
jz	short loc_6421898F
cmp	ebx, 6
jz	short loc_64218988
mov	eax, [edx+4]
mov	[ecx+4], eax
mov	eax, 2
mov	ebp, [edx+eax*4]
mov	[ecx+eax*4], ebp
inc	eax
mov	ebx, [edx+eax*4]
mov	[ecx+eax*4], ebx
inc	eax
mov	edi, [edx+eax*4]
mov	[ecx+eax*4], edi
inc	eax
mov	ebp, [edx+eax*4]
mov	[ecx+eax*4], ebp
inc	eax
mov	ebx, [edx+eax*4]
mov	[ecx+eax*4], ebx
inc	eax
mov	edi, [edx+eax*4]
mov	[ecx+eax*4], edi
inc	eax
cmp	eax, esi
jz	short loc_64218A02
			
mov	ebp, [edx+eax*4]
mov	[ecx+eax*4], ebp
lea	ebx, [eax+1]
mov	edi, [edx+ebx*4]
mov	[ecx+ebx*4], edi
lea	ebx, [eax+2]
mov	ebp, [edx+ebx*4]
mov	[ecx+ebx*4], ebp
lea	ebp, [eax+3]
mov	edi, [edx+ebp*4]
mov	[ecx+ebp*4], edi
lea	ebp, [eax+4]
mov	ebx, [edx+ebp*4]
mov	[ecx+ebp*4], ebx
lea	ebx, [eax+5]
mov	edi, [edx+ebx*4]
mov	[ecx+ebx*4], edi
lea	ebx, [eax+6]
mov	ebp, [edx+ebx*4]
mov	[ecx+ebx*4], ebp
lea	ebp, [eax+7]
mov	edi, [edx+ebp*4]
mov	[ecx+ebp*4], edi
add	eax, 8
cmp	eax, esi
jnz	short loc_642189B6
			
lea	ecx, [ecx+eax*4]
mov	ebp, [esp+0D0h]
cmp	eax, ebp
jge	loc_64218AE0
mov	edi, eax
not	edi
add	edi, ebp
and	edi, 7
mov	dword ptr [ecx], 0
lea	edx, [ecx+4]
lea	ebx, [eax+1]
cmp	ebx, ebp
jge	loc_64218AE0
test	edi, edi
jz	short loc_64218A9F
cmp	edi, 1
jz	short loc_64218A91
cmp	edi, 2
jz	short loc_64218A87
cmp	edi, 3
jz	short loc_64218A7D
cmp	edi, 4
jz	short loc_64218A73
cmp	edi, 5
jz	short loc_64218A69
cmp	edi, 6
jz	short loc_64218A5F
mov	dword ptr [edx], 0
lea	edx, [ecx+8]
lea	ebx, [eax+2]
mov	dword ptr [edx], 0
add	edx, 4
inc	ebx
mov	dword ptr [edx], 0
add	edx, 4
inc	ebx
mov	dword ptr [edx], 0
add	edx, 4
inc	ebx
mov	dword ptr [edx], 0
add	edx, 4
inc	ebx
mov	dword ptr [edx], 0
add	edx, 4
inc	ebx
mov	dword ptr [edx], 0
add	edx, 4
inc	ebx
cmp	ebx, ebp
jge	short loc_64218AE0
			
mov	dword ptr [edx], 0
mov	dword ptr [edx+4], 0
mov	dword ptr [edx+8], 0
mov	dword ptr [edx+0Ch], 0
mov	dword ptr [edx+10h], 0
mov	dword ptr [edx+14h], 0
mov	dword ptr [edx+18h], 0
mov	dword ptr [edx+1Ch], 0
add	edx, 20h
add	ebx, 8
cmp	ebx, ebp
jl	short loc_64218A9F
			
mov	[esp+0D0h], esi
mov	ecx, [esp+0A8h]
mov	[esp+0D8h], ecx
mov	esi, [esp+90h]
cmp	[esp+0C4h], esi
jl	loc_64218E5C
mov	ecx, [esp+9Ch]
mov	err, [esp+0CCh]
test	esi, esi
jle	loc_64218ED0
lea	ebx, [esi-1]
and	ebx, 7
mov	edx, [ecx]
mov	[eax], edx
add	eax, 4
mov	edx, 1
cmp	edx, esi
jge	loc_64218BE2
test	ebx, ebx
jz	short loc_64218BA2
cmp	ebx, 1
jz	short loc_64218B95
cmp	ebx, 2
jz	short loc_64218B8C
cmp	ebx, 3
jz	short loc_64218B83
cmp	ebx, 4
jz	short loc_64218B7A
cmp	ebx, 5
jz	short loc_64218B71
cmp	ebx, 6
jz	short loc_64218B68
mov	edi, [ecx+4]
mov	[eax], edi
add	eax, 4
mov	edx, 2
mov	ebp, [ecx+edx*4]
mov	[eax], ebp
add	eax, 4
inc	edx
mov	ebx, [ecx+edx*4]
mov	[eax], ebx
add	eax, 4
inc	edx
mov	edi, [ecx+edx*4]
mov	[eax], edi
add	eax, 4
inc	edx
mov	ebp, [ecx+edx*4]
mov	[eax], ebp
add	eax, 4
inc	edx
mov	ebx, [ecx+edx*4]
mov	[eax], ebx
add	eax, 4
inc	edx
mov	edi, [ecx+edx*4]
mov	[eax], edi
add	eax, 4
inc	edx
cmp	edx, esi
jge	short loc_64218BE2
			
mov	edi, [ecx+edx*4]
mov	[eax], edi
mov	ebx, [ecx+edx*4+4]
mov	[eax+4], ebx
mov	ebp, [ecx+edx*4+8]
mov	[eax+8], ebp
mov	edi, [ecx+edx*4+0Ch]
mov	[eax+0Ch], edi
mov	ebx, [ecx+edx*4+10h]
mov	[eax+10h], ebx
mov	ebp, [ecx+edx*4+14h]
mov	[eax+14h], ebp
mov	edi, [ecx+edx*4+18h]
mov	[eax+18h], edi
mov	ebx, [ecx+edx*4+1Ch]
mov	[eax+1Ch], ebx
add	eax, 20h
add	edx, 8
cmp	edx, esi
jl	short loc_64218BA2
			
mov	ebp, [esp+0C0h]
cmp	edx, ebp
jge	loc_64218CBD
mov	edi, edx
not	edi
add	edi, ebp
and	edi, 7
mov	dword ptr [eax], 0
lea	ecx, [eax+4]
lea	ebx, [edx+1]
cmp	ebx, ebp
jge	loc_64218CBD
test	edi, edi
jz	short loc_64218C7C
cmp	edi, 1
jz	short loc_64218C6E
cmp	edi, 2
jz	short loc_64218C64
cmp	edi, 3
jz	short loc_64218C5A
cmp	edi, 4
jz	short loc_64218C50
cmp	edi, 5
jz	short loc_64218C46
cmp	edi, 6
jz	short loc_64218C3C
mov	dword ptr [ecx], 0
lea	ecx, [eax+8]
lea	ebx, [edx+2]
mov	dword ptr [ecx], 0
add	ecx, 4
inc	ebx
mov	dword ptr [ecx], 0
add	ecx, 4
inc	ebx
mov	dword ptr [ecx], 0
add	ecx, 4
inc	ebx
mov	dword ptr [ecx], 0
add	ecx, 4
inc	ebx
mov	dword ptr [ecx], 0
add	ecx, 4
inc	ebx
mov	dword ptr [ecx], 0
add	ecx, 4
inc	ebx
cmp	ebx, ebp
jge	short loc_64218CBD
			
mov	dword ptr [ecx], 0
mov	dword ptr [ecx+4], 0
mov	dword ptr [ecx+8], 0
mov	dword ptr [ecx+0Ch], 0
mov	dword ptr [ecx+10h], 0
mov	dword ptr [ecx+14h], 0
mov	dword ptr [ecx+18h], 0
mov	dword ptr [ecx+1Ch], 0
add	ecx, 20h
add	ebx, 8
cmp	ebx, ebp
jl	short loc_64218C7C
			
mov	[esp+0C0h], esi
mov	eax, [esp+98h]
mov	[esp+0C8h], eax
jmp	loc_64218081
align 4
mov	[esp+4], esi	
lea	edi, [esp+0C0h]
mov	[esp], edi	
call	_tma_mp_grow
test	eax, eax
jz	loc_64218E84
nop
			
mov	[esp+50h], err
			
mov	dword ptr [esp+2Ch], 0
lea	edx, [esp+70h]
mov	[esp+28h], edx
lea	err, [esp+80h]
mov	[esp+24h], eax
lea	ebx, [esp+90h]
mov	[esp+20h], ebx
lea	ebp, [esp+0A0h]
mov	[esp+1Ch], ebp
lea	edi, [esp+0B0h]
mov	[esp+18h], edi
lea	esi, [esp+0C0h]
mov	[esp+14h], esi
lea	ecx, [esp+0D0h]
mov	[esp+10h], ecx
lea	edx, [esp+0E0h]
mov	[esp+0Ch], edx
mov	eax, [esp+4Ch]
mov	[esp+8], eax
mov	ebx, [esp+58h]
mov	[esp+4], ebx
mov	ebp, [esp+54h]
mov	[esp], ebp	
call	_tma_mp_clear_multi
mov	eax, [esp+50h]
add	esp, 12Ch
pop	ebx
pop	esi
pop	edi
pop	ebp
retn
mov	[esp+4], edi
mov	ebp, [esp+4Ch]
mov	[esp], ebp	
call	_tma_mp_grow
test	eax, eax
jnz	loc_64218CF4
mov	edi, [a_0]
jmp	loc_64217BCD
align 10h
mov	[esp+4], esi	
mov	esi, [esp+54h]
mov	[esp], esi	
call	_tma_mp_grow
test	eax, eax
jnz	loc_64218CF4
mov	esi, [esp+0E0h]
jmp	loc_642181C2
mov	[esp+4], esi	
mov	eax, [esp+58h]
mov	[esp], eax	
call	_tma_mp_grow
test	eax, eax
jnz	loc_64218CF4
mov	esi, [esp+0D0h]
jmp	loc_6421839D
mov	[esp+4], esi	
mov	esi, [esp+4Ch]
mov	[esp], esi	
call	_tma_mp_grow
test	eax, eax
jnz	loc_64218CF4
mov	esi, [esp+0C0h]
jmp	loc_64218578
mov	[esp+4], esi	
lea	ecx, [esp+0E0h]
mov	[esp], ecx	
call	_tma_mp_grow
test	eax, eax
jnz	loc_64218CF4
mov	esi, [esp+0B0h]
jmp	loc_64218753
align 4
mov	[esp+4], esi	
lea	edx, [esp+0D0h]
mov	[esp], edx	
call	_tma_mp_grow
test	eax, eax
jnz	loc_64218CF4
mov	esi, [esp+0A0h]
jmp	loc_6421892E
align 4
mov	[esp+4], esi	
lea	esi, [esp+0C0h]
mov	[esp], esi	
call	_tma_mp_grow
test	eax, eax
jnz	loc_64218CF4
mov	esi, [esp+90h]
jmp	loc_64218B09
align 4
mov	edx, [esp+144h]
mov	esi, [edx]
jmp	loc_64217EB2
align 4
xor	edx, edx
jmp	loc_64217CA2
align 4
mov	esi, [esp+0C0h]
jmp	loc_64218081
xor	err, err
jmp	loc_64218299
align 10h
xor	err, err
jmp	loc_64218474
align 4
xor	err, err
jmp	loc_6421864F
align 10h
xor	err, err
jmp	loc_6421882A
align 4
xor	err, err
jmp	loc_64218A05
align 10h
xor	edx, edx
jmp	loc_64218BE2
align 4
xor	edx, edx
jmp	loc_64217F8E
cmp	dword ptr [esp+0F8h], 1
jz	loc_64218FBF
mov	ebp, [esp+148h]
test	ebp, ebp
jz	short loc_64218F30
lea	eax, [esp+60h]
mov	ebx, 4
mov	edi, eax
mov	esi, [esp+148h]
mov	ecx, ebx
rep movsd
mov	edi, [esp+148h]
mov	U1_0, [esp+54h]
mov	ecx, ebx
rep movsd
lea	edx, [esp+110h]
mov	[esp+54h], edx
mov	U1_0, edx
mov	esi, eax
mov	ecx, ebx
rep movsd
mov	ebp, [esp+14Ch]
test	ebp, ebp
jz	short loc_64218F73
lea	eax, [esp+60h]
mov	ebx, 4
mov	edi, eax
mov	esi, [esp+14Ch]
mov	ecx, ebx
rep movsd
mov	edi, [esp+14Ch]
mov	U2_0, [esp+58h]
mov	ecx, ebx
rep movsd
lea	edx, [esp+100h]
mov	[esp+58h], edx
mov	U2_0, edx
mov	esi, eax
mov	ecx, ebx
rep movsd
mov	ebp, [esp+150h]
test	ebp, ebp
jz	_ERR
lea	eax, [esp+60h]
mov	ebx, 4
mov	edi, eax
mov	esi, [esp+150h]
mov	ecx, ebx
rep movsd
mov	edi, [esp+150h]
mov	U3_0, [esp+4Ch]
mov	ecx, ebx
rep movsd
lea	edx, [esp+0F0h]
mov	[esp+4Ch], edx
mov	U3_0, edx
mov	esi, eax
mov	ecx, ebx
rep movsd
jmp	_ERR
mov	edx, [esp+54h]
mov	[esp+4], edx	
mov	[esp], edx	
call	_tma_mp_neg
mov	esi, [esp+58h]
mov	[esp+4], esi	
mov	[esp], esi	
call	_tma_mp_neg
mov	ecx, [esp+4Ch]
mov	[esp+4], ecx	
mov	[esp], ecx	
call	_tma_mp_neg
jmp	loc_64218EED
public _tma_mp_read_signed_bin
push	ebp
push	edi
push	esi
push	ebx
sub	esp, 2Ch
mov	ebx, [esp+3Ch+a]
mov	ebp, [esp+3Ch+c]
cmp	dword ptr [ebx+4], 1
jle	loc_642193D0
mov	dword ptr [a_0+8], 0
mov	dword ptr [a_0], 0
mov	res, [a_0+0Ch]
mov	esi, [a_0+4]
test	esi, esi
jle	loc_642190E9
lea	ecx, [esi-1]
and	ecx, 7
mov	dword ptr [eax], 0
mov	edx, 1
cmp	edx, esi
jge	loc_642190E9
test	ecx, ecx
jz	short loc_642190A3
cmp	ecx, 1
jz	short loc_64219097
cmp	ecx, 2
jz	short loc_6421908F
cmp	ecx, 3
jz	short loc_64219087
cmp	ecx, 4
jz	short loc_6421907F
cmp	ecx, 5
jz	short loc_64219077
cmp	ecx, 6
jz	short loc_6421906F
mov	dword ptr [eax+edx*4], 0
mov	edx, 2
mov	dword ptr [eax+edx*4], 0
inc	edx
mov	dword ptr [eax+edx*4], 0
inc	edx
mov	dword ptr [eax+edx*4], 0
inc	edx
mov	dword ptr [eax+edx*4], 0
inc	edx
mov	dword ptr [eax+edx*4], 0
inc	edx
mov	dword ptr [eax+edx*4], 0
inc	edx
cmp	edx, esi
jge	short loc_642190E9
			
mov	dword ptr [eax+edx*4], 0
mov	dword ptr [eax+edx*4+4], 0
mov	dword ptr [eax+edx*4+8], 0
mov	dword ptr [eax+edx*4+0Ch], 0
mov	dword ptr [eax+edx*4+10h], 0
mov	dword ptr [eax+edx*4+14h], 0
mov	dword ptr [eax+edx*4+18h], 0
mov	dword ptr [eax+edx*4+1Ch], 0
add	edx, 8
cmp	edx, esi
jl	short loc_642190A3
			
lea	edx, [c_0-1]
test	edx, edx
jle	loc_64219254
mov	esi, [esp+3Ch+b]
inc	esi
lea	edi, [c_0-2]
mov	eax, edi
and	eax, 3
mov	[esp+3Ch+var_20], eax
jz	loc_642191A2
mov	[esp+3Ch+var_34], a_0 
mov	[esp+3Ch+size],	8 
mov	[esp+3Ch+var_3C], a_0 
call	_tma_mp_mul_2d
test	eax, eax
jnz	loc_642193B0
mov	res, [a_0+0Ch]
movzx	edx, byte ptr [esi]
or	[eax], edx
inc	dword ptr [a_0]
mov	esi, [esp+3Ch+b]
add	esi, 2
lea	edi, [c_0-3]
cmp	[esp+3Ch+var_20], 1
jz	short loc_642191A2
cmp	[esp+3Ch+var_20], 2
jz	short loc_64219179
mov	[esp+3Ch+var_34], a_0 
mov	[esp+3Ch+size],	8 
mov	[esp+3Ch+var_3C], a_0 
call	_tma_mp_mul_2d
test	eax, eax
jnz	loc_642193B0
mov	ecx, [a_0+0Ch]
movzx	edi, byte ptr [esi]
or	[ecx], edi
inc	dword ptr [a_0]
mov	esi, [esp+3Ch+b]
add	esi, 3
lea	edi, [c_0-4]
mov	[esp+3Ch+var_34], a_0 
mov	[esp+3Ch+size],	8 
mov	[esp+3Ch+var_3C], a_0 
call	_tma_mp_mul_2d
test	eax, eax
jnz	loc_642193B0
mov	c_0, [a_0+0Ch]
movzx	res, byte ptr [esi]
or	[ebp+0], eax
inc	dword ptr [a_0]
inc	esi
dec	edi
			
mov	[esp+3Ch+var_34], a_0
mov	[esp+3Ch+size],	8 
mov	[esp+3Ch+var_3C], a_0 
call	_tma_mp_mul_2d
test	eax, eax
jnz	loc_642193B0
mov	res, [a_0+0Ch]
movzx	ecx, byte ptr [esi]
or	[eax], ecx
mov	ecx, [a_0]
inc	ecx
mov	[a_0], ecx
test	edi, edi
jz	loc_64219256
mov	[esp+3Ch+var_34], a_0 
mov	[esp+3Ch+size],	8 
mov	[esp+3Ch+var_3C], a_0 
call	_tma_mp_mul_2d
test	eax, eax
jnz	loc_642193B0
mov	ecx, [a_0+0Ch]
movzx	edx, byte ptr [esi+1]
or	[ecx], edx
inc	dword ptr [a_0]
mov	[esp+3Ch+var_34], a_0 
mov	[esp+3Ch+size],	8 
mov	[esp+3Ch+var_3C], a_0 
call	_tma_mp_mul_2d
test	eax, eax
jnz	loc_642193B0
mov	ebp, [a_0+0Ch]
movzx	res, byte ptr [esi+2]
or	[ebp+0], eax
inc	dword ptr [a_0]
mov	[esp+3Ch+var_34], a_0 
mov	[esp+3Ch+size],	8 
mov	[esp+3Ch+var_3C], a_0 
call	_tma_mp_mul_2d
test	eax, eax
jnz	loc_642193B0
mov	ecx, [a_0+0Ch]
movzx	edx, byte ptr [esi+3]
or	[ecx], edx
inc	dword ptr [a_0]
add	esi, 4
sub	edi, 4
jmp	loc_642191A2
mov	ecx, [a_0]
test	ecx, ecx
jle	loc_64219393
lea	edx, [ecx-1]
mov	esi, [eax+edx*4]
test	esi, esi
jnz	loc_6421939E
lea	esi, ds:0FFFFFFF8h[ecx*4]
mov	edi, edx
and	edi, 7
jz	loc_64219311
mov	ecx, edx
test	edx, edx
jle	loc_64219391
mov	ebp, [eax+esi]
sub	esi, 4
test	ebp, ebp
jnz	loc_642193CC
lea	edx, [edx-1]
cmp	edi, 1
jz	short loc_64219311
cmp	edi, 2
jz	short loc_64219302
cmp	edi, 3
jz	short loc_642192F3
cmp	edi, 4
jz	short loc_642192E4
cmp	edi, 5
jz	short loc_642192D5
cmp	edi, 6
jz	short loc_642192C6
mov	ecx, [eax+esi]
sub	esi, 4
test	ecx, ecx
jnz	loc_642193CC
dec	edx
mov	edi, [eax+esi]
sub	esi, 4
test	edi, edi
jnz	loc_642193CC
dec	edx
mov	ebp, [eax+esi]
sub	esi, 4
test	ebp, ebp
jnz	loc_642193CC
dec	edx
mov	ecx, [eax+esi]
sub	esi, 4
test	ecx, ecx
jnz	loc_642193CC
dec	edx
mov	edi, [eax+esi]
sub	esi, 4
test	edi, edi
jnz	loc_642193CC
dec	edx
mov	ebp, [eax+esi]
sub	esi, 4
test	ebp, ebp
jnz	loc_642193CC
dec	edx
			
mov	ecx, edx
test	edx, edx
jle	short loc_64219391
lea	edi, [esi-4]
mov	ebp, [eax+esi]
test	ebp, ebp
jnz	loc_642193CC
lea	ecx, [edx-1]
mov	edx, ecx
lea	ebp, [esi-8]
mov	edi, [eax+edi]
test	edi, edi
jnz	loc_642193CC
dec	edx
lea	edi, [esi-0Ch]
mov	ebp, [eax+ebp]
test	ebp, ebp
jnz	loc_642193CC
lea	edx, [ecx-2]
lea	ebp, [esi-10h]
mov	edi, [eax+edi]
test	edi, edi
jnz	short loc_642193CC
lea	edx, [ecx-3]
lea	edi, [esi-14h]
mov	ebp, [eax+ebp]
test	ebp, ebp
jnz	short loc_642193CC
lea	edx, [ecx-4]
lea	ebp, [esi-18h]
mov	edi, [eax+edi]
test	edi, edi
jnz	short loc_642193CC
lea	edx, [ecx-5]
lea	edi, [esi-1Ch]
mov	ebp, [eax+ebp]
test	ebp, ebp
jnz	short loc_642193CC
lea	edx, [ecx-6]
sub	esi, 20h
mov	edi, [eax+edi]
test	edi, edi
jnz	short loc_642193CC
lea	edx, [ecx-7]
mov	ecx, edx
test	edx, edx
jg	short loc_64219317
			
mov	[a_0], edx
test	ecx, ecx
jnz	short loc_6421939E
mov	dword ptr [a_0+8], 0
			
mov	edx, [esp+3Ch+b]
cmp	byte ptr [edx],	0
jz	short loc_642193B8
mov	dword ptr [a_0+8], 1
xor	eax, eax
			
add	esp, 2Ch
pop	a_0
pop	esi
pop	edi
pop	ebp
retn
mov	dword ptr [a_0+8], 0
xor	eax, eax
add	esp, 2Ch
pop	a_0
pop	esi
pop	edi
pop	ebp
retn
align 4
			
mov	[a_0], edx
jmp	short loc_6421939E
mov	[esp+3Ch+size],	2
mov	[esp+3Ch+var_3C], a_0 
call	_tma_mp_grow
test	eax, eax
jz	loc_6421900D
jmp	short loc_642193B0
align 4
public _tma_mp_init_set_int
push	ebp
push	edi
push	esi
push	ebx
sub	esp, 2Ch
mov	ebx, [esp+3Ch+a]
mov	esi, [esp+3Ch+b]
mov	[esp+3Ch+var_3C], 80h 
call	_malloc
mov	[ebx+0Ch], eax
test	eax, eax
jz	loc_642197E0
mov	dword ptr [eax], 0
mov	edx, 4
mov	ecx, eax
jmp	short loc_64219470
align 4
mov	dword ptr [eax+ecx], 0
mov	dword ptr [eax+edx+8], 0
mov	dword ptr [eax+edx+0Ch], 0
mov	dword ptr [eax+edx+10h], 0
mov	dword ptr [eax+edx+14h], 0
mov	dword ptr [eax+edx+18h], 0
mov	dword ptr [eax+edx+1Ch], 0
mov	dword ptr [eax+edx+20h], 0
mov	dword ptr [eax+edx+24h], 0
add	edx, 28h
mov	ecx, eax
mov	dword ptr [ecx+edx], 0
lea	ecx, [edx+4]
cmp	ecx, 80h
jnz	short loc_64219424
mov	dword ptr [a_0+4], 20h
mov	dword ptr [a_0+8], 0
mov	dword ptr [a_0], 0
xor	edx, edx
mov	dword ptr [eax+edx*4], 0
mov	dword ptr [eax+edx*4+4], 0
mov	dword ptr [eax+edx*4+8], 0
mov	dword ptr [eax+edx*4+0Ch], 0
mov	dword ptr [eax+edx*4+10h], 0
mov	dword ptr [eax+edx*4+14h], 0
mov	dword ptr [eax+edx*4+18h], 0
mov	dword ptr [eax+edx*4+1Ch], 0
add	edx, 8
cmp	edx, 20h
jl	short loc_64219498
mov	[esp+3Ch+c], a_0 
mov	[esp+3Ch+var_38], 4 
mov	[esp+3Ch+var_3C], a_0 
call	_tma_mp_mul_2d
test	eax, eax
jnz	loc_642197BE
mov	err, [a_0+0Ch]
mov	edx, b_0
shr	edx, 1Ch
or	[eax], edx
inc	dword ptr [a_0]
mov	edi, b_0
shl	edi, 4
mov	[esp+3Ch+c], a_0 
mov	[esp+3Ch+var_38], 4 
mov	[esp+3Ch+var_3C], a_0 
call	_tma_mp_mul_2d
test	eax, eax
jnz	loc_642197BE
mov	ecx, [a_0+0Ch]
shr	b_0, 1Ch
or	[ecx], edi
inc	dword ptr [a_0]
mov	edi, esi
shl	edi, 8
mov	[esp+3Ch+c], a_0 
mov	[esp+3Ch+var_38], 4 
mov	[esp+3Ch+var_3C], a_0 
call	_tma_mp_mul_2d
test	eax, eax
jnz	loc_642197BE
mov	ebp, [a_0+0Ch]
shr	b_0, 1Ch
or	[ebp+0], edi
inc	dword ptr [a_0]
mov	edi, esi
shl	edi, 0Ch
mov	[esp+3Ch+c], a_0 
mov	[esp+3Ch+var_38], 4 
mov	[esp+3Ch+var_3C], a_0 
call	_tma_mp_mul_2d
test	eax, eax
jnz	loc_642197BE
mov	err, [a_0+0Ch]
shr	b_0, 1Ch
or	[eax], edi
inc	dword ptr [a_0]
mov	edi, esi
shl	edi, 10h
mov	[esp+3Ch+c], a_0 
mov	[esp+3Ch+var_38], 4 
mov	[esp+3Ch+var_3C], a_0 
call	_tma_mp_mul_2d
test	eax, eax
jnz	loc_642197BE
mov	edx, [a_0+0Ch]
shr	b_0, 1Ch
or	[edx], edi
inc	dword ptr [a_0]
mov	edi, esi
shl	edi, 14h
mov	[esp+3Ch+c], a_0 
mov	[esp+3Ch+var_38], 4 
mov	[esp+3Ch+var_3C], a_0 
call	_tma_mp_mul_2d
test	eax, eax
jnz	loc_642197BE
mov	ecx, [a_0+0Ch]
shr	b_0, 1Ch
or	[ecx], edi
inc	dword ptr [a_0]
mov	edi, esi
shl	edi, 18h
mov	[esp+3Ch+c], a_0 
mov	[esp+3Ch+var_38], 4 
mov	[esp+3Ch+var_3C], a_0 
call	_tma_mp_mul_2d
test	eax, eax
jnz	loc_642197BE
mov	ebp, [a_0+0Ch]
shr	b_0, 1Ch
or	[ebp+0], edi
inc	dword ptr [a_0]
shl	esi, 1Ch
mov	[esp+3Ch+c], a_0 
mov	[esp+3Ch+var_38], 4 
mov	[esp+3Ch+var_3C], a_0 
call	_tma_mp_mul_2d
test	eax, eax
jnz	loc_642197BE
mov	edi, [a_0+0Ch]
shr	b_0, 1Ch
or	[edi], esi
mov	edx, [a_0]
lea	esi, [edx+1]
mov	[a_0], esi
test	esi, esi
jle	loc_642197CC
mov	ecx, [edi+esi*4-4]
test	ecx, ecx
jnz	loc_642197BE
lea	ecx, [edx-1]
mov	[esp+3Ch+var_24], ecx
shl	ecx, 2
mov	ebp, edx
and	ebp, 7
jz	loc_64219709
mov	esi, edx
test	edx, edx
jle	loc_642197CA
mov	edx, [edi+ecx]
mov	[esp+3Ch+var_20], edx
mov	edx, [esp+3Ch+var_24]
sub	ecx, 4
cmp	[esp+3Ch+var_20], 0
jnz	loc_642197BC
cmp	ebp, 1
jz	short loc_64219709
cmp	ebp, 2
jz	short loc_642196F8
cmp	ebp, 3
jz	short loc_642196E7
cmp	ebp, 4
jz	short loc_642196D6
cmp	ebp, 5
jz	short loc_642196C5
cmp	ebp, 6
jz	short loc_642196B4
mov	esi, edx
mov	ebp, [edi+ecx]
dec	edx
sub	ecx, 4
test	ebp, ebp
jnz	loc_642197BC
mov	esi, edx
mov	ebp, [edi+ecx]
dec	edx
sub	ecx, 4
test	ebp, ebp
jnz	loc_642197BC
mov	esi, edx
mov	ebp, [edi+ecx]
dec	edx
sub	ecx, 4
test	ebp, ebp
jnz	loc_642197BC
mov	esi, edx
mov	ebp, [edi+ecx]
dec	edx
sub	ecx, 4
test	ebp, ebp
jnz	loc_642197BC
mov	esi, edx
mov	ebp, [edi+ecx]
dec	edx
sub	ecx, 4
test	ebp, ebp
jnz	loc_642197BC
mov	esi, edx
mov	ebp, [edi+ecx]
dec	edx
sub	ecx, 4
test	ebp, ebp
jnz	loc_642197BC
			
mov	[esp+3Ch+var_20], err
mov	esi, edx
test	edx, edx
jle	loc_642197C6
lea	ebp, [edx-1]
lea	err, [ecx-4]
cmp	dword ptr [edi+ecx], 0
jnz	loc_642197B8
mov	esi, ebp
lea	ebp, [edx-2]
mov	[esp+3Ch+var_24], ebp
lea	ebp, [ecx-8]
mov	eax, [edi+eax]
test	eax, eax
jnz	short loc_642197B8
mov	esi, [esp+3Ch+var_24]
lea	eax, [edx-3]
mov	[esp+3Ch+var_24], eax
lea	eax, [ecx-0Ch]
mov	ebp, [edi+ebp]
test	ebp, ebp
jnz	short loc_642197B8
mov	esi, [esp+3Ch+var_24]
lea	ebp, [edx-4]
mov	[esp+3Ch+var_24], ebp
lea	ebp, [ecx-10h]
mov	eax, [edi+eax]
test	eax, eax
jnz	short loc_642197B8
mov	esi, [esp+3Ch+var_24]
lea	eax, [edx-5]
mov	[esp+3Ch+var_24], eax
lea	eax, [ecx-14h]
mov	ebp, [edi+ebp]
test	ebp, ebp
jnz	short loc_642197B8
mov	esi, [esp+3Ch+var_24]
lea	ebp, [edx-6]
mov	[esp+3Ch+var_24], ebp
lea	ebp, [ecx-18h]
mov	eax, [edi+eax]
test	eax, eax
jnz	short loc_642197B8
mov	esi, [esp+3Ch+var_24]
lea	eax, [edx-7]
mov	[esp+3Ch+var_24], eax
lea	eax, [ecx-1Ch]
mov	ebp, [edi+ebp]
test	ebp, ebp
jnz	short loc_642197B8
mov	esi, [esp+3Ch+var_24]
sub	edx, 8
sub	ecx, 20h
mov	ebp, [edi+eax]
test	ebp, ebp
jz	loc_6421970D
			
mov	eax, [esp+3Ch+var_20]
			
mov	[a_0], esi
			
add	esp, 2Ch
pop	a_0
pop	b_0
pop	b_0
pop	ebp
retn
mov	err, [esp+3Ch+var_20]
mov	[a_0], edx
test	esi, esi
jnz	short loc_642197BE
mov	dword ptr [a_0+8], 0
add	esp, 2Ch
pop	a_0
pop	esi
pop	edi
pop	ebp
retn
align 10h
mov	eax, 0FFFFFFFEh
add	esp, 2Ch
pop	a_0
pop	b_0
pop	edi
pop	ebp
retn
align 10h
public _tma_mp_reduce_2k_setup
push	ebp
push	edi
push	esi
push	ebx
sub	esp, 4Ch
mov	esi, [esp+5Ch+a]
mov	[esp+5Ch+var_5C], 80h 
call	_malloc
mov	[esp+5Ch+var_40], eax
test	eax, eax
jz	loc_64219A04
xor	edx, edx
mov	eax, [esp+5Ch+var_40]
mov	dword ptr [eax+edx*4], 0
mov	dword ptr [eax+edx*4+4], 0
mov	dword ptr [eax+edx*4+8], 0
mov	dword ptr [eax+edx*4+0Ch], 0
mov	dword ptr [eax+edx*4+10h], 0
mov	dword ptr [eax+edx*4+14h], 0
mov	dword ptr [eax+edx*4+18h], 0
mov	dword ptr [eax+edx*4+1Ch], 0
add	edx, 8
cmp	edx, 20h
jnz	short loc_64219819
mov	[esp+5Ch+var_40], eax
mov	[esp+5Ch+tmp.dp], eax
mov	[esp+5Ch+tmp.used], 0
mov	[esp+5Ch+tmp.alloc], 20h
mov	[esp+5Ch+tmp.sign], 0
mov	edx, [a_0]
test	edx, edx
jz	short loc_642198FC
dec	edx
lea	eax, ds:0[edx*4]
lea	ecx, ds:0[eax*8]
sub	p, eax
mov	ebx, [a_0+0Ch]
mov	edx, [ebx+edx*4]
test	edx, edx
jz	short loc_642198FE
mov	eax, [esp+5Ch+var_40]
lea	ebx, [p+1]
mov	p, ebx
mov	edi, edx
shr	edi, 1
jz	short loc_642198F4
inc	p
mov	edi, edx
shr	edi, 2
jz	short loc_642198F4
lea	p, [ebx+2]
mov	ebp, edx
shr	ebp, 3
jz	short loc_642198F4
lea	p, [ebx+3]
mov	edi, edx
shr	edi, 4
jz	short loc_642198F4
lea	p, [ebx+4]
mov	ebp, edx
shr	ebp, 5
jz	short loc_642198F4
lea	p, [ebx+5]
mov	edi, edx
shr	edi, 6
jz	short loc_642198F4
lea	p, [ebx+6]
mov	ebp, edx
shr	ebp, 7
jz	short loc_642198F4
lea	p, [ebx+7]
shr	edx, 8
jnz	short loc_642198A5
xchg	ax, ax
			
mov	[esp+5Ch+var_40], eax
jmp	short loc_642198FE
align 4
xor	ecx, ecx
			
mov	[esp+5Ch+tmp.sign], 0
mov	[esp+5Ch+tmp.used], 0
mov	ebx, [esp+5Ch+var_40]
sub	ebx, 0FFFFFF80h
mov	edx, [esp+5Ch+var_40]
mov	eax, edx
mov	dword ptr [edx], 0
mov	dword ptr [edx+4], 0
mov	dword ptr [edx+8], 0
mov	dword ptr [edx+0Ch], 0
mov	dword ptr [edx+10h], 0
mov	dword ptr [edx+14h], 0
mov	dword ptr [edx+18h], 0
mov	dword ptr [edx+1Ch], 0
add	edx, 20h
cmp	edx, ebx
jnz	short loc_6421991B
mov	[esp+5Ch+var_40], eax
mov	ebp, 92492493h
mov	eax, p
imul	ebp
mov	[esp+5Ch+var_34], eax
mov	[esp+5Ch+var_30], edx
lea	ebx, [p+edx]
sar	ebx, 4
mov	eax, p
cdq
sub	ebx, edx
lea	edi, [ebx+1]
cmp	edi, 20h
jg	loc_64219A11
			
mov	[esp+5Ch+tmp.used], edi
mov	eax, 92492493h
imul	p
lea	edi, [p+edx]
sar	edi, 4
mov	eax, p
cdq
sub	edi, edx
lea	edx, ds:0[edi*4]
lea	ebp, ds:0[edx*8]
sub	ebp, edx
sub	p, ebp
mov	edi, 1
shl	edi, cl
mov	ecx, [esp+5Ch+tmp.dp]
mov	[ecx+ebx*4], edi
lea	ebx, [esp+5Ch+tmp]
mov	[esp+5Ch+c], ebx 
mov	[esp+5Ch+b], a_0 
mov	[esp+5Ch+var_5C], ebx 
call	_s_tma_mp_sub
test	eax, eax
jnz	short loc_642199E0
mov	ebp, [esp+5Ch+tmp.dp]
mov	ecx, [ebp+0]
mov	a_0, [esp+5Ch+d]
mov	[esi], ecx
mov	[esp+5Ch+var_5C], ebx 
mov	[esp+5Ch+var_38], res
call	_tma_mp_clear
mov	eax, [esp+5Ch+var_38]
add	esp, 4Ch
pop	ebx
pop	esi
pop	edi
pop	ebp
retn
lea	ebx, [esp+5Ch+tmp]
mov	[esp+5Ch+var_5C], ebx 
call	_tma_mp_clear
mov	eax, 0FFFFFFFEh
add	esp, 4Ch
pop	ebx
pop	a_0
pop	edi
pop	ebp
retn
lea	ebp, [ebx+41h]
mov	edx, edi
and	edx, 1Fh
sub	ebp, edx
lea	eax, ds:0[ebp*4]
mov	[esp+5Ch+b], eax 
mov	edx, [esp+5Ch+var_40]
mov	[esp+5Ch+var_5C], edx 
mov	[esp+5Ch+var_38], p
call	_realloc
test	eax, eax
mov	ecx, [esp+5Ch+var_38]
jz	short loc_642199F8
mov	[esp+5Ch+tmp.dp], eax
mov	edx, [esp+5Ch+tmp.alloc]
mov	[esp+5Ch+tmp.alloc], ebp
cmp	ebp, edx
jle	loc_64219985
lea	eax, [eax+edx*4]
mov	[esp+5Ch+var_40], eax
mov	eax, edx
not	eax
add	eax, ebp
and	eax, 7
mov	[esp+5Ch+var_34], eax
mov	eax, [esp+5Ch+var_40]
mov	dword ptr [eax], 0
inc	edx
add	eax, 4
cmp	ebp, edx
jle	loc_64219985
cmp	[esp+5Ch+var_34], 0
jz	short loc_64219AFB
cmp	[esp+5Ch+var_34], 1
jz	short loc_64219AE9
cmp	[esp+5Ch+var_34], 2
jz	short loc_64219ADF
cmp	[esp+5Ch+var_34], 3
jz	short loc_64219AD5
cmp	[esp+5Ch+var_34], 4
jz	short loc_64219ACB
cmp	[esp+5Ch+var_34], 5
jz	short loc_64219AC1
cmp	[esp+5Ch+var_34], 6
jz	short loc_64219AB7
mov	dword ptr [eax], 0
inc	edx
add	eax, 4
mov	dword ptr [eax], 0
inc	edx
add	eax, 4
mov	dword ptr [eax], 0
inc	edx
add	eax, 4
mov	dword ptr [eax], 0
inc	edx
add	eax, 4
mov	dword ptr [eax], 0
inc	edx
add	eax, 4
mov	dword ptr [eax], 0
inc	edx
add	eax, 4
mov	dword ptr [eax], 0
inc	edx
add	eax, 4
cmp	ebp, edx
jle	loc_64219985
			
mov	dword ptr [eax], 0
mov	dword ptr [eax+4], 0
mov	dword ptr [eax+8], 0
mov	dword ptr [eax+0Ch], 0
mov	dword ptr [eax+10h], 0
mov	dword ptr [eax+14h], 0
mov	dword ptr [eax+18h], 0
mov	dword ptr [eax+1Ch], 0
add	edx, 8
add	eax, 20h
cmp	ebp, edx
jg	short loc_64219AFB
jmp	loc_64219985
align 4
public _tma_mp_gcd
			
push	ebp
push	edi
push	esi
push	ebx
sub	esp, 6Ch
mov	ebx, [esp+7Ch+a]
mov	edi, [esp+7Ch+b]
mov	esi, [ebx]
test	esi, esi
jz	loc_64219E24
mov	ecx, [b_0]
test	ecx, ecx
jz	loc_64219C28
mov	[esp+7Ch+var_7C], 80h 
call	_malloc
test	eax, eax
jz	loc_64219EEC
xor	edx, edx
mov	dword ptr [eax+edx*4], 0
mov	dword ptr [eax+edx*4+4], 0
mov	dword ptr [eax+edx*4+8], 0
mov	dword ptr [eax+edx*4+0Ch], 0
mov	dword ptr [eax+edx*4+10h], 0
mov	dword ptr [eax+edx*4+14h], 0
mov	dword ptr [eax+edx*4+18h], 0
mov	dword ptr [eax+edx*4+1Ch], 0
add	edx, 8
cmp	edx, 20h
jnz	short loc_64219B83
mov	[esp+7Ch+u.dp],	eax
mov	[esp+7Ch+u.used], 0
mov	[esp+7Ch+u.alloc], 20h
mov	[esp+7Ch+u.sign], 0
lea	ebp, [esp+7Ch+u]
mov	[esp+7Ch+var_78], ebp 
mov	[esp+7Ch+var_7C], a_0 
call	_tma_mp_copy
test	eax, eax
jnz	short loc_64219C1E
lea	a_0, [esp+7Ch+v]
mov	[esp+7Ch+var_7C], ebx 
call	_tma_mp_init
test	eax, eax
jz	loc_64219E60
			
mov	[esp+7Ch+var_7C], ebx
mov	[esp+7Ch+var_54], res
call	_tma_mp_clear
mov	eax, [esp+7Ch+var_54]
			
add	esp, 6Ch
pop	ebx
pop	v_lsb
pop	u_lsb
pop	ebp
retn
align 4
cmp	a_0, [esp+7Ch+c]
jz	loc_64219E0C
mov	ecx, [esp+7Ch+c]
cmp	esi, [ecx+4]
jg	loc_64219EF6
mov	edx, [ecx+0Ch]
mov	eax, [a_0+0Ch]
test	esi, esi
jle	loc_6421A078
lea	edi, [esi-1]
and	edi, 7
mov	ecx, [eax]
mov	[edx], ecx
add	edx, 4
mov	ecx, 1
cmp	ecx, esi
jge	loc_64219D16
test	edi, edi
jz	short loc_64219CD6
cmp	edi, 1
jz	short loc_64219CC9
cmp	edi, 2
jz	short loc_64219CC0
cmp	edi, 3
jz	short loc_64219CB7
cmp	edi, 4
jz	short loc_64219CAE
cmp	edi, 5
jz	short loc_64219CA5
cmp	edi, 6
jz	short loc_64219C9C
mov	ebp, [eax+4]
mov	[edx], ebp
add	edx, 4
mov	ecx, 2
mov	edi, [eax+ecx*4]
mov	[edx], edi
add	edx, 4
inc	ecx
mov	ebp, [eax+ecx*4]
mov	[edx], ebp
add	edx, 4
inc	ecx
mov	edi, [eax+ecx*4]
mov	[edx], edi
add	edx, 4
inc	ecx
mov	ebp, [eax+ecx*4]
mov	[edx], ebp
add	edx, 4
inc	ecx
mov	edi, [eax+ecx*4]
mov	[edx], edi
add	edx, 4
inc	ecx
mov	ebp, [eax+ecx*4]
mov	[edx], ebp
add	edx, 4
inc	ecx
cmp	ecx, esi
jge	short loc_64219D16
			
mov	ebp, [eax+ecx*4]
mov	[edx], ebp
mov	edi, [eax+ecx*4+4]
mov	[edx+4], edi
mov	ebp, [eax+ecx*4+8]
mov	[edx+8], ebp
mov	edi, [eax+ecx*4+0Ch]
mov	[edx+0Ch], edi
mov	ebp, [eax+ecx*4+10h]
mov	[edx+10h], ebp
mov	edi, [eax+ecx*4+14h]
mov	[edx+14h], edi
mov	ebp, [eax+ecx*4+18h]
mov	[edx+18h], ebp
mov	edi, [eax+ecx*4+1Ch]
mov	[edx+1Ch], edi
add	edx, 20h
add	ecx, 8
cmp	ecx, esi
jl	short loc_64219CD6
			
mov	eax, [esp+7Ch+c]
mov	eax, [eax]
mov	[esp+7Ch+var_50], eax
cmp	ecx, eax
jge	loc_64219DFD
mov	ebp, ecx
not	ebp
add	ebp, eax
and	ebp, 7
mov	dword ptr [edx], 0
lea	eax, [edx+4]
lea	edi, [ecx+1]
cmp	edi, [esp+7Ch+var_50]
jge	loc_64219DFD
test	ebp, ebp
jz	short loc_64219DBA
cmp	ebp, 1
jz	short loc_64219DAA
cmp	ebp, 2
jz	short loc_64219DA0
cmp	ebp, 3
jz	short loc_64219D96
cmp	ebp, 4
jz	short loc_64219D8C
cmp	ebp, 5
jz	short loc_64219D82
cmp	ebp, 6
jz	short loc_64219D78
mov	dword ptr [eax], 0
lea	eax, [edx+8]
lea	edi, [ecx+2]
mov	dword ptr [eax], 0
add	eax, 4
inc	edi
mov	dword ptr [eax], 0
add	eax, 4
inc	edi
mov	dword ptr [eax], 0
add	eax, 4
inc	edi
mov	dword ptr [eax], 0
add	eax, 4
inc	edi
mov	dword ptr [eax], 0
add	eax, 4
inc	edi
mov	dword ptr [eax], 0
add	eax, 4
inc	edi
cmp	edi, [esp+7Ch+var_50]
jge	short loc_64219DFD
			
mov	dword ptr [eax], 0
mov	dword ptr [eax+4], 0
mov	dword ptr [eax+8], 0
mov	dword ptr [eax+0Ch], 0
mov	dword ptr [eax+10h], 0
mov	dword ptr [eax+14h], 0
mov	dword ptr [eax+18h], 0
mov	dword ptr [eax+1Ch], 0
add	eax, 20h
add	edi, 8
cmp	edi, [esp+7Ch+var_50]
jl	short loc_64219DBA
			
mov	edx, [esp+7Ch+c]
mov	[edx], esi
mov	esi, [a_0+8]
mov	[edx+8], esi
mov	a_0, [esp+7Ch+c]
mov	dword ptr [ebx+8], 0
xor	eax, eax
add	esp, 6Ch
pop	ebx
pop	esi
pop	b_0
pop	ebp
retn
cmp	b_0, [esp+7Ch+c]
jz	short loc_64219E48
mov	eax, [esp+7Ch+c]
mov	[esp+7Ch+var_78], eax 
mov	[esp+7Ch+var_7C], b_0 
call	_tma_mp_copy
test	eax, eax
jnz	loc_64219C1E
mov	edx, [esp+7Ch+c]
mov	dword ptr [edx+8], 0
xor	res, res
add	esp, 6Ch
pop	a_0
pop	esi
pop	b_0
pop	ebp
retn
mov	[esp+7Ch+var_78], ebx
mov	[esp+7Ch+var_7C], b_0 
call	_tma_mp_copy
test	eax, eax
jnz	LBL_U
mov	[esp+7Ch+v.sign], 0
mov	[esp+7Ch+u.sign], 0
mov	[esp+7Ch+var_7C], ebp 
call	_tma_mp_cnt_lsb
mov	b_0, eax
mov	[esp+7Ch+var_7C], ebx 
call	_tma_mp_cnt_lsb
mov	esi, eax
mov	[esp+7Ch+var_50], eax
cmp	eax, u_lsb
jg	loc_64219F70
mov	ecx, [esp+7Ch+var_50]
test	ecx, ecx
jle	loc_64219FA0
mov	[esp+7Ch+d], 0	
mov	[esp+7Ch+var_74], ebp 
mov	v_lsb, [esp+7Ch+var_50]
mov	[esp+7Ch+var_78], eax 
mov	[esp+7Ch+var_7C], ebp 
call	_tma_mp_div_2d
test	eax, eax
jz	loc_64219F79
			
mov	[esp+7Ch+var_7C], ebp 
mov	[esp+7Ch+var_54], res
call	_tma_mp_clear
mov	eax, [esp+7Ch+var_54]
jmp	LBL_U
align 4
mov	eax, 0FFFFFFFEh
jmp	loc_64219C1E
lea	b_0, [esi+40h]
mov	ebp, 20h
mov	eax, esi
cdq
idiv	ebp
sub	edi, edx
lea	eax, ds:0[edi*4]
mov	[esp+7Ch+var_78], eax 
mov	ebp, [esp+7Ch+c]
mov	esi, [ebp+0Ch]
mov	[esp+7Ch+var_7C], esi 
call	_realloc
mov	edx, eax
mov	eax, 0FFFFFFFEh
test	edx, edx
jz	loc_64219C1E
mov	esi, [esp+7Ch+c]
mov	[esi+0Ch], edx
mov	res, [esi+4]
mov	[esi+4], edi
lea	ecx, ds:0[eax*4]
mov	esi, [esp+7Ch+c]
jmp	short loc_64219F62
mov	dword ptr [edx+ecx], 0
inc	eax
mov	edx, [c_0+0Ch]
mov	edi, [c_0+4]
add	ecx, 4
cmp	eax, edi
jl	short loc_64219F51
mov	c_0, [a_0]
jmp	loc_64219C48
align 10h
mov	[esp+7Ch+var_50], u_lsb
jmp	loc_64219EA4
mov	[esp+7Ch+d], 0
mov	[esp+7Ch+var_74], ebx 
mov	edx, [esp+7Ch+var_50]
mov	[esp+7Ch+var_78], edx 
mov	[esp+7Ch+var_7C], ebx 
call	_tma_mp_div_2d
test	eax, eax
jnz	LBL_V
lea	v_lsb, [v_lsb+0]
cmp	u_lsb, [esp+7Ch+var_50]
jz	short loc_64219FCA
mov	[esp+7Ch+d], 0	
mov	[esp+7Ch+var_74], ebp 
sub	u_lsb, [esp+7Ch+var_50]
mov	[esp+7Ch+var_78], edi 
mov	[esp+7Ch+var_7C], ebp 
call	_tma_mp_div_2d
test	eax, eax
jnz	LBL_V
cmp	v_lsb, [esp+7Ch+var_50]
jz	short loc_64219FF4
mov	[esp+7Ch+d], 0	
mov	[esp+7Ch+var_74], ebx 
sub	v_lsb, [esp+7Ch+var_50]
mov	[esp+7Ch+var_78], esi 
mov	[esp+7Ch+var_7C], ebx 
call	_tma_mp_div_2d
test	eax, eax
jnz	LBL_V
lea	res, [esp+7Ch+var_4C]
mov	[esp+7Ch+var_60], eax
jmp	short loc_6421A040
align 10h
			
mov	[esp+7Ch+var_74], ebx 
mov	[esp+7Ch+var_78], ebp 
mov	[esp+7Ch+var_7C], ebx 
call	_s_tma_mp_sub
test	eax, eax
jnz	LBL_V
mov	[esp+7Ch+var_7C], ebx 
call	_tma_mp_cnt_lsb
mov	[esp+7Ch+d], 0	
mov	[esp+7Ch+var_74], ebx 
mov	[esp+7Ch+var_78], eax 
mov	[esp+7Ch+var_7C], ebx 
call	_tma_mp_div_2d
test	eax, eax
jnz	LBL_V
mov	edx, [esp+7Ch+v.used]
test	edx, edx
jz	short loc_6421A07F
mov	[esp+7Ch+var_78], ebx 
mov	[esp+7Ch+var_7C], ebp 
call	_tma_mp_cmp_mag
dec	eax
jnz	short loc_6421A000
mov	u_lsb, [esp+7Ch+var_60]
mov	v_lsb, ebp
mov	ecx, 4
rep movsd
mov	edi, ebp
mov	esi, ebx
mov	cl, 4
rep movsd
mov	edi, ebx
mov	esi, [esp+7Ch+var_60]
mov	cl, 4
rep movsd
jmp	short loc_6421A000
xor	ecx, ecx
jmp	loc_64219D16
mov	v_lsb, [esp+7Ch+c]
mov	[esp+7Ch+var_74], esi 
mov	ecx, [esp+7Ch+var_50]
mov	[esp+7Ch+var_78], ecx 
mov	[esp+7Ch+var_7C], ebp 
call	_tma_mp_mul_2d
test	eax, eax
jnz	LBL_V
mov	u_lsb, [esp+7Ch+c]
mov	dword ptr [edi+8], 0
jmp	LBL_V
align 4
public _tma_mp_lcm
push	ebp
push	edi
push	esi
push	ebx
sub	esp, 6Ch
mov	ebp, [esp+7Ch+a]
mov	edi, [esp+7Ch+b]
mov	[esp+7Ch+var_74], 0
lea	esi, [esp+7Ch+t2]
mov	[esp+7Ch+var_78], esi
lea	ebx, [esp+7Ch+t1]
mov	[esp+7Ch+mp], ebx 
call	_tma_mp_init_multi
test	eax, eax
jz	short loc_6421A0F8
add	esp, 6Ch
pop	ebx
pop	esi
pop	b_0
pop	a_0
retn
align 4
mov	[esp+7Ch+var_74], ebx 
mov	[esp+7Ch+var_78], b_0 
mov	[esp+7Ch+mp], a_0 
call	_tma_mp_gcd
test	eax, eax
jz	short loc_6421A130
			
mov	[esp+7Ch+var_74], 0
mov	[esp+7Ch+var_78], esi
mov	[esp+7Ch+mp], ebx 
mov	[esp+7Ch+var_58], res
call	_tma_mp_clear_multi
mov	eax, [esp+7Ch+var_58]
add	esp, 6Ch
pop	ebx
pop	esi
pop	b_0
pop	a_0
retn
mov	res, [a_0+0]
cmp	eax, [b_0]
jle	short loc_6421A17A
			
mov	[esp+7Ch+d], 0	
mov	[esp+7Ch+var_74], esi 
mov	[esp+7Ch+var_78], ebx 
mov	[esp+7Ch+mp], b_0 
call	_tma_mp_div
test	eax, eax
jnz	short LBL_T
mov	b_0, [esp+7Ch+c]
mov	[esp+7Ch+var_74], edi 
mov	[esp+7Ch+var_78], esi 
mov	[esp+7Ch+mp], a_0 
call	_tma_mp_mul
mov	ecx, [esp+7Ch+c]
mov	dword ptr [ecx+8], 0
jmp	short LBL_T
jl	loc_6421A4DA
mov	edx, [a_0+0Ch]
mov	ecx, [b_0+0Ch]
mov	[esp+7Ch+var_48], ecx
test	eax, eax
jle	short loc_6421A137
lea	ecx, [eax-1]
mov	[esp+7Ch+var_54], ecx
shl	ecx, 2
add	edx, ecx
mov	[esp+7Ch+var_50], edx
add	ecx, [esp+7Ch+var_48]
mov	[esp+7Ch+var_44], ecx
mov	ecx, [ecx]
mov	edx, [esp+7Ch+var_50]
cmp	ecx, [edx]
jb	short loc_6421A137
ja	loc_6421A4DA
xor	edx, edx
mov	[esp+7Ch+var_48], 0
mov	ecx, [esp+7Ch+var_54]
and	ecx, 7
mov	[esp+7Ch+var_54], ecx
jz	loc_6421A360
mov	[esp+7Ch+var_48], 1
mov	ecx, [esp+7Ch+var_44]
mov	edx, [ecx-4]
mov	ecx, [esp+7Ch+var_50]
cmp	[ecx-4], edx
ja	loc_6421A137
mov	edx, 0FFFFFFFCh
jb	loc_6421A4DA
cmp	[esp+7Ch+var_54], 1
jz	loc_6421A360
cmp	[esp+7Ch+var_54], 2
jz	loc_6421A32D
cmp	[esp+7Ch+var_54], 3
jz	loc_6421A2FA
cmp	[esp+7Ch+var_54], 4
jz	loc_6421A2C7
cmp	[esp+7Ch+var_54], 5
jz	short loc_6421A294
cmp	[esp+7Ch+var_54], 6
jz	short loc_6421A261
inc	[esp+7Ch+var_48]
mov	ecx, [ecx+edx-4]
mov	[esp+7Ch+var_54], ecx
mov	ecx, [esp+7Ch+var_44]
mov	ecx, [ecx+edx-4]
mov	[esp+7Ch+var_4C], ecx
cmp	[esp+7Ch+var_54], ecx
ja	loc_6421A137
sub	edx, 4
cmp	[esp+7Ch+var_54], ecx
jb	loc_6421A4DA
inc	[esp+7Ch+var_48]
mov	ecx, [esp+7Ch+var_50]
mov	ecx, [ecx+edx-4]
mov	[esp+7Ch+var_54], ecx
mov	ecx, [esp+7Ch+var_44]
mov	ecx, [ecx+edx-4]
mov	[esp+7Ch+var_4C], ecx
cmp	[esp+7Ch+var_54], ecx
ja	loc_6421A137
sub	edx, 4
cmp	[esp+7Ch+var_54], ecx
jb	loc_6421A4DA
inc	[esp+7Ch+var_48]
mov	ecx, [esp+7Ch+var_50]
mov	ecx, [ecx+edx-4]
mov	[esp+7Ch+var_54], ecx
mov	ecx, [esp+7Ch+var_44]
mov	ecx, [ecx+edx-4]
mov	[esp+7Ch+var_4C], ecx
cmp	[esp+7Ch+var_54], ecx
ja	loc_6421A137
sub	edx, 4
cmp	[esp+7Ch+var_54], ecx
jb	loc_6421A4DA
inc	[esp+7Ch+var_48]
mov	ecx, [esp+7Ch+var_50]
mov	ecx, [ecx+edx-4]
mov	[esp+7Ch+var_54], ecx
mov	ecx, [esp+7Ch+var_44]
mov	ecx, [ecx+edx-4]
mov	[esp+7Ch+var_4C], ecx
cmp	[esp+7Ch+var_54], ecx
ja	loc_6421A137
sub	edx, 4
cmp	[esp+7Ch+var_54], ecx
jb	loc_6421A4DA
inc	[esp+7Ch+var_48]
mov	ecx, [esp+7Ch+var_50]
mov	ecx, [ecx+edx-4]
mov	[esp+7Ch+var_54], ecx
mov	ecx, [esp+7Ch+var_44]
mov	ecx, [ecx+edx-4]
mov	[esp+7Ch+var_4C], ecx
cmp	[esp+7Ch+var_54], ecx
ja	loc_6421A137
sub	edx, 4
cmp	[esp+7Ch+var_54], ecx
jb	loc_6421A4DA
inc	[esp+7Ch+var_48]
mov	ecx, [esp+7Ch+var_50]
mov	ecx, [ecx+edx-4]
mov	[esp+7Ch+var_54], ecx
mov	ecx, [esp+7Ch+var_44]
mov	ecx, [ecx+edx-4]
mov	[esp+7Ch+var_4C], ecx
cmp	[esp+7Ch+var_54], ecx
ja	loc_6421A137
sub	edx, 4
cmp	[esp+7Ch+var_54], ecx
jb	loc_6421A4DA
			
mov	ecx, [esp+7Ch+var_44]
mov	[esp+7Ch+var_60], eax
mov	[esp+7Ch+var_54], a_0
mov	[esp+7Ch+var_4C], b_0
mov	b_0, [esp+7Ch+var_50]
mov	eax, [esp+7Ch+var_48]
inc	eax
mov	[esp+7Ch+var_48], eax
cmp	[esp+7Ch+var_60], eax
jle	loc_6421A516
mov	a_0, [edi+edx-4]
mov	[esp+7Ch+var_44], ebp
mov	eax, [ecx+edx-4]
mov	[esp+7Ch+var_50], eax
cmp	ebp, eax
ja	loc_6421A516
lea	ebp, [edx-4]
cmp	[esp+7Ch+var_44], eax
jb	loc_6421A4D2
mov	eax, [edi+ebp-4]
mov	[esp+7Ch+var_50], eax
mov	eax, [ecx+ebp-4]
mov	[esp+7Ch+var_44], eax
cmp	[esp+7Ch+var_50], eax
ja	loc_6421A516
lea	eax, [edx-8]
mov	[esp+7Ch+var_40], eax
mov	eax, [esp+7Ch+var_44]
cmp	[esp+7Ch+var_50], eax
jb	loc_6421A4D2
mov	eax, [esp+7Ch+var_40]
mov	eax, [edi+eax-4]
mov	[esp+7Ch+var_50], eax
mov	eax, [esp+7Ch+var_40]
mov	eax, [ecx+eax-4]
mov	[esp+7Ch+var_44], eax
cmp	[esp+7Ch+var_50], eax
ja	loc_6421A516
lea	eax, [edx-0Ch]
mov	[esp+7Ch+var_40], eax
mov	eax, [esp+7Ch+var_44]
cmp	[esp+7Ch+var_50], eax
jb	loc_6421A4D2
mov	eax, [esp+7Ch+var_40]
mov	eax, [edi+eax-4]
mov	[esp+7Ch+var_50], eax
mov	eax, [esp+7Ch+var_40]
mov	eax, [ecx+eax-4]
mov	[esp+7Ch+var_44], eax
cmp	[esp+7Ch+var_50], eax
ja	loc_6421A516
sub	edx, 10h
cmp	[esp+7Ch+var_50], eax
jb	loc_6421A4D2
mov	eax, [edi+edx-4]
mov	[esp+7Ch+var_50], eax
mov	edx, [ecx+edx-4]
mov	[esp+7Ch+var_44], edx
cmp	eax, edx
ja	loc_6421A516
lea	edx, [ebp-10h]
mov	eax, [esp+7Ch+var_44]
cmp	[esp+7Ch+var_50], eax
jb	short loc_6421A4D2
mov	eax, [edi+edx-4]
mov	[esp+7Ch+var_50], eax
mov	edx, [ecx+edx-4]
cmp	eax, edx
ja	loc_6421A516
lea	eax, [ebp-14h]
mov	[esp+7Ch+var_44], eax
cmp	[esp+7Ch+var_50], edx
jb	short loc_6421A4D2
mov	edx, [edi+eax-4]
mov	[esp+7Ch+var_50], edx
mov	eax, [ecx+eax-4]
mov	[esp+7Ch+var_44], eax
cmp	edx, eax
ja	short loc_6421A516
lea	edx, [ebp-18h]
cmp	[esp+7Ch+var_50], eax
jb	short loc_6421A4D2
mov	eax, [esp+7Ch+var_48]
add	eax, 7
mov	[esp+7Ch+var_48], eax
mov	eax, [edi+edx-4]
mov	[esp+7Ch+var_50], eax
mov	edx, [ecx+edx-4]
mov	[esp+7Ch+var_44], edx
cmp	eax, edx
ja	short loc_6421A516
lea	edx, [ebp-1Ch]
mov	ebp, [esp+7Ch+var_44]
cmp	eax, ebp
jnb	loc_6421A374
			
mov	ebp, [esp+7Ch+var_54]
mov	edi, [esp+7Ch+var_4C]
			
mov	[esp+7Ch+d], 0
mov	[esp+7Ch+var_74], esi 
mov	[esp+7Ch+var_78], ebx 
mov	[esp+7Ch+mp], a_0 
call	_tma_mp_div
test	eax, eax
jnz	LBL_T
mov	edx, [esp+7Ch+c]
mov	[esp+7Ch+var_74], edx 
mov	[esp+7Ch+var_78], esi 
mov	[esp+7Ch+mp], b_0 
call	_tma_mp_mul
jmp	loc_6421A16A
			
mov	ebp, [esp+7Ch+var_54]
mov	edi, [esp+7Ch+var_4C]
jmp	loc_6421A137
align 4
public _tma_mp_n_root
push	ebp
push	edi
push	esi
push	ebx
sub	esp, 0ACh
mov	esi, [esp+0BCh+b]
test	esi, 1
jz	loc_6421B0C4
mov	[esp+0BCh+var_BC], 80h
call	_malloc
test	eax, eax
jz	loc_6421B0B0
xor	edx, edx
mov	dword ptr [eax+edx*4], 0
mov	dword ptr [eax+edx*4+4], 0
mov	dword ptr [eax+edx*4+8], 0
mov	dword ptr [eax+edx*4+0Ch], 0
mov	dword ptr [eax+edx*4+10h], 0
mov	dword ptr [eax+edx*4+14h], 0
mov	dword ptr [eax+edx*4+18h], 0
mov	dword ptr [eax+edx*4+1Ch], 0
add	edx, 8
cmp	edx, 20h
jnz	short loc_6421A557
mov	[esp+0BCh+t1.dp], eax
mov	[esp+0BCh+t1.used], 0
mov	[esp+0BCh+t1.alloc], 20h
mov	[esp+0BCh+t1.sign], 0
mov	[esp+0BCh+var_BC], 80h 
call	_malloc
mov	[esp+0BCh+t2.dp], eax
test	eax, eax
jz	loc_6421B0F8
xor	edx, edx
mov	dword ptr [eax+edx*4], 0
mov	dword ptr [eax+edx*4+4], 0
mov	dword ptr [eax+edx*4+8], 0
mov	dword ptr [eax+edx*4+0Ch], 0
mov	dword ptr [eax+edx*4+10h], 0
mov	dword ptr [eax+edx*4+14h], 0
mov	dword ptr [eax+edx*4+18h], 0
mov	dword ptr [eax+edx*4+1Ch], 0
add	edx, 8
cmp	edx, 20h
jnz	short loc_6421A5E3
mov	[esp+0BCh+t2.used], 0
mov	[esp+0BCh+t2.alloc], 20h
mov	[esp+0BCh+t2.sign], 0
mov	[esp+0BCh+var_BC], 80h 
call	_malloc
mov	[esp+0BCh+t3.dp], eax
test	eax, eax
jz	loc_6421B1CC
xor	edx, edx
mov	dword ptr [eax+edx*4], 0
mov	dword ptr [eax+edx*4+4], 0
mov	dword ptr [eax+edx*4+8], 0
mov	dword ptr [eax+edx*4+0Ch], 0
mov	dword ptr [eax+edx*4+10h], 0
mov	dword ptr [eax+edx*4+14h], 0
mov	dword ptr [eax+edx*4+18h], 0
mov	dword ptr [eax+edx*4+1Ch], 0
add	edx, 8
cmp	edx, 20h
jnz	short loc_6421A665
mov	[esp+0BCh+t3.used], 0
mov	[esp+0BCh+t3.alloc], 20h
mov	[esp+0BCh+t3.sign], 0
mov	ebx, [esp+0BCh+a]
mov	edi, [ebx+8]
mov	[esp+0BCh+var_60], edi
mov	ebp, [esp+0BCh+a]
mov	dword ptr [ebp+8], 0
mov	[esp+0BCh+t2.sign], 0
mov	edx, [esp+0BCh+t2.dp]
mov	ebx, [esp+0BCh+t2.alloc]
test	ebx, ebx
jle	loc_6421A7C2
lea	ecx, [ebx-1]
and	ecx, 7
mov	dword ptr [edx], 0
mov	eax, 1
cmp	eax, ebx
jz	loc_6421A7C2
test	ecx, ecx
jz	short loc_6421A77C
cmp	ecx, 1
jz	short loc_6421A770
cmp	ecx, 2
jz	short loc_6421A768
cmp	ecx, 3
jz	short loc_6421A760
cmp	ecx, 4
jz	short loc_6421A758
cmp	ecx, 5
jz	short loc_6421A750
cmp	ecx, 6
jz	short loc_6421A748
mov	dword ptr [edx+eax*4], 0
mov	eax, 2
mov	dword ptr [edx+eax*4], 0
inc	eax
mov	dword ptr [edx+eax*4], 0
inc	eax
mov	dword ptr [edx+eax*4], 0
inc	eax
mov	dword ptr [edx+eax*4], 0
inc	eax
mov	dword ptr [edx+eax*4], 0
inc	eax
mov	dword ptr [edx+eax*4], 0
inc	eax
cmp	eax, ebx
jz	short loc_6421A7C2
			
mov	dword ptr [edx+eax*4], 0
mov	dword ptr [edx+eax*4+4], 0
mov	dword ptr [edx+eax*4+8], 0
mov	dword ptr [edx+eax*4+0Ch], 0
mov	dword ptr [edx+eax*4+10h], 0
mov	dword ptr [edx+eax*4+14h], 0
mov	dword ptr [edx+eax*4+18h], 0
mov	dword ptr [edx+eax*4+1Ch], 0
add	eax, 8
cmp	eax, ebx
jnz	short loc_6421A77C
			
mov	dword ptr [edx], 2
mov	[esp+0BCh+t2.used], 1
mov	edi, 1
lea	ecx, [esp+0BCh+t1]
mov	[esp+0BCh+var_78], ecx
lea	edx, [esp+0BCh+t2]
mov	[esp+0BCh+var_68], edx
lea	eax, [b_0-1]
mov	[esp+0BCh+var_64], eax
mov	[esp+0BCh+var_80], b_0
			
cmp	edi, [esp+0BCh+t1.alloc]
jg	loc_6421B3AE
mov	eax, [esp+0BCh+t1.dp]
mov	ecx, [esp+0BCh+t2.dp]
test	edi, edi
jle	loc_6421B203
lea	ebx, [edi-1]
and	ebx, 7
mov	esi, [ecx]
mov	[eax], esi
mov	edx, 1
cmp	edx, edi
jz	loc_6421A8DA
test	ebx, ebx
jz	short loc_6421A88E
cmp	ebx, 1
jz	short loc_6421A883
cmp	ebx, 2
jz	short loc_6421A87C
cmp	ebx, 3
jz	short loc_6421A875
cmp	ebx, 4
jz	short loc_6421A86E
cmp	ebx, 5
jz	short loc_6421A867
cmp	ebx, 6
jz	short loc_6421A860
mov	esi, [ecx+4]
mov	[eax+4], esi
mov	edx, 2
mov	ebp, [ecx+edx*4]
mov	[eax+edx*4], ebp
inc	edx
mov	ebx, [ecx+edx*4]
mov	[eax+edx*4], ebx
inc	edx
mov	esi, [ecx+edx*4]
mov	[eax+edx*4], esi
inc	edx
mov	ebp, [ecx+edx*4]
mov	[eax+edx*4], ebp
inc	edx
mov	ebx, [ecx+edx*4]
mov	[eax+edx*4], ebx
inc	edx
mov	esi, [ecx+edx*4]
mov	[eax+edx*4], esi
inc	edx
cmp	edx, edi
jz	short loc_6421A8DA
			
mov	esi, [ecx+edx*4]
mov	[eax+edx*4], esi
lea	ebp, [edx+1]
mov	ebx, [ecx+ebp*4]
mov	[eax+ebp*4], ebx
lea	ebx, [edx+2]
mov	esi, [ecx+ebx*4]
mov	[eax+ebx*4], esi
lea	ebx, [edx+3]
mov	ebp, [ecx+ebx*4]
mov	[eax+ebx*4], ebp
lea	ebp, [edx+4]
mov	esi, [ecx+ebp*4]
mov	[eax+ebp*4], esi
lea	ebp, [edx+5]
mov	ebx, [ecx+ebp*4]
mov	[eax+ebp*4], ebx
lea	ebx, [edx+6]
mov	esi, [ecx+ebx*4]
mov	[eax+ebx*4], esi
lea	ebx, [edx+7]
mov	ebp, [ecx+ebx*4]
mov	[eax+ebx*4], ebp
add	edx, 8
cmp	edx, edi
jnz	short loc_6421A88E
			
lea	eax, [eax+edx*4]
mov	ebp, [esp+0BCh+t1.used]
cmp	ebp, edx
jle	loc_6421A9B8
mov	esi, edx
not	esi
add	esi, ebp
and	esi, 7
mov	dword ptr [eax], 0
lea	ecx, [eax+4]
lea	ebx, [edx+1]
cmp	ebx, ebp
jge	loc_6421A9B8
test	esi, esi
jz	short loc_6421A977
cmp	esi, 1
jz	short loc_6421A969
cmp	esi, 2
jz	short loc_6421A95F
cmp	esi, 3
jz	short loc_6421A955
cmp	esi, 4
jz	short loc_6421A94B
cmp	esi, 5
jz	short loc_6421A941
cmp	esi, 6
jz	short loc_6421A937
mov	dword ptr [ecx], 0
lea	ecx, [eax+8]
lea	ebx, [edx+2]
mov	dword ptr [ecx], 0
add	ecx, 4
inc	ebx
mov	dword ptr [ecx], 0
add	ecx, 4
inc	ebx
mov	dword ptr [ecx], 0
add	ecx, 4
inc	ebx
mov	dword ptr [ecx], 0
add	ecx, 4
inc	ebx
mov	dword ptr [ecx], 0
add	ecx, 4
inc	ebx
mov	dword ptr [ecx], 0
add	ecx, 4
inc	ebx
cmp	ebx, ebp
jge	short loc_6421A9B8
			
mov	dword ptr [ecx], 0
mov	dword ptr [ecx+4], 0
mov	dword ptr [ecx+8], 0
mov	dword ptr [ecx+0Ch], 0
mov	dword ptr [ecx+10h], 0
mov	dword ptr [ecx+14h], 0
mov	dword ptr [ecx+18h], 0
mov	dword ptr [ecx+1Ch], 0
add	ecx, 20h
add	ebx, 8
cmp	ebx, ebp
jl	short loc_6421A977
			
mov	[esp+0BCh+t1.used], edi
mov	eax, [esp+0BCh+t2.sign]
mov	[esp+0BCh+t1.sign], eax
lea	edx, [esp+0BCh+t3]
mov	[esp+0BCh+var_B4], edx 
mov	ecx, [esp+0BCh+var_64]
mov	[esp+0BCh+var_B8], ecx 
mov	edi, [esp+0BCh+var_78]
mov	[esp+0BCh+var_BC], edi 
call	_tma_mp_expt_d
test	eax, eax
jnz	loc_6421B148
mov	ebp, [esp+0BCh+var_68]
mov	[esp+0BCh+var_B4], ebp 
mov	[esp+0BCh+var_B8], edi 
lea	edi, [esp+0BCh+t3]
mov	[esp+0BCh+var_BC], edi 
call	_tma_mp_mul
test	eax, eax
jnz	loc_6421B148
mov	[esp+0BCh+var_B4], ebp 
mov	ebx, [esp+0BCh+a]
mov	[esp+0BCh+var_B8], ebx 
mov	[esp+0BCh+var_BC], ebp 
call	_tma_mp_sub
test	eax, eax
jnz	loc_6421B148
mov	ecx, [esp+0BCh+t3.used]
mov	[esp+0BCh+var_7C], ecx
cmp	ecx, [esp+0BCh+t3.alloc]
jge	loc_6421B124
mov	esi, [esp+0BCh+t3.dp]
mov	edx, [esp+0BCh+var_7C]
test	edx, edx
jle	loc_6421B1F8
mov	edi, [esp+0BCh+var_7C]
dec	edi
and	edi, 3
mov	[esp+0BCh+var_74], edi
mov	res, [esp+0BCh+var_80]
mul	dword ptr [esi]
mov	edi, eax
mov	ebp, edx
lea	edx, [esi+4]
mov	[esp+0BCh+var_A4], edx
mov	ebx, edi
and	ebx, 0FFFFFFFh
mov	[esi], ebx
shrd	edi, ebp, 1Ch
shr	ebp, 1Ch
mov	ebx, edi
mov	[esp+0BCh+var_8C], 1
mov	[esp+0BCh+var_94], edx
mov	eax, [esp+0BCh+var_7C]
cmp	[esp+0BCh+var_8C], eax
jz	loc_6421AC20
mov	edx, [esp+0BCh+var_74]
test	edx, edx
jz	loc_6421AB6E
cmp	[esp+0BCh+var_74], 1
jz	short loc_6421AB2C
cmp	[esp+0BCh+var_74], 2
jz	short loc_6421AAF0
mov	ecx, edi
xor	ebx, ebx
mov	eax, [esp+0BCh+var_80]
mul	dword ptr [esi+4]
add	ecx, eax
adc	ebx, edx
lea	eax, [esi+8]
mov	[esp+0BCh+var_A4], eax
mov	edi, ecx
and	edi, 0FFFFFFFh
mov	ebp, [esp+0BCh+var_94]
mov	[ebp+0], edi
shrd	ecx, ebx, 1Ch
shr	ebx, 1Ch
mov	ebx, ecx
mov	[esp+0BCh+var_8C], 2
mov	[esp+0BCh+var_94], eax
mov	ecx, ebx
xor	ebx, ebx
mov	eax, [esp+0BCh+var_80]
mov	edi, [esp+0BCh+var_A4]
mul	dword ptr [edi]
add	ecx, eax
adc	ebx, edx
add	edi, 4
mov	[esp+0BCh+var_A4], edi
mov	edx, ecx
and	edx, 0FFFFFFFh
mov	eax, [esp+0BCh+var_94]
mov	[eax], edx
shrd	ecx, ebx, 1Ch
shr	ebx, 1Ch
mov	ebx, ecx
inc	[esp+0BCh+var_8C]
mov	ecx, [esp+0BCh+var_A4]
mov	[esp+0BCh+var_94], ecx
mov	edi, ebx
xor	ebp, ebp
mov	eax, [esp+0BCh+var_80]
mov	ecx, [esp+0BCh+var_A4]
mul	dword ptr [ecx]
add	edi, eax
adc	ebp, edx
add	ecx, 4
mov	[esp+0BCh+var_A4], ecx
mov	ecx, edi
and	ecx, 0FFFFFFFh
mov	ebx, [esp+0BCh+var_94]
mov	[ebx], ecx
shrd	edi, ebp, 1Ch
shr	ebp, 1Ch
mov	ebx, edi
inc	[esp+0BCh+var_8C]
mov	ebp, [esp+0BCh+var_7C]
cmp	[esp+0BCh+var_8C], ebp
jz	loc_6421AC20
mov	ebp, esi
mov	ecx, ebx
xor	ebx, ebx
mov	eax, [esp+0BCh+var_80]
mov	edi, [esp+0BCh+var_A4]
mul	dword ptr [edi]
add	ecx, eax
adc	ebx, edx
mov	edx, ecx
and	edx, 0FFFFFFFh
mov	edi, [esp+0BCh+var_A4]
mov	[edi], edx
shrd	ecx, ebx, 1Ch
shr	ebx, 1Ch
xor	ebx, ebx
mov	eax, [esp+0BCh+var_80]
mul	dword ptr [edi+4]
add	ecx, eax
adc	ebx, edx
mov	esi, ecx
and	esi, 0FFFFFFFh
mov	[edi+4], esi
shrd	ecx, ebx, 1Ch
shr	ebx, 1Ch
xor	ebx, ebx
mov	eax, [esp+0BCh+var_80]
mul	dword ptr [edi+8]
add	ecx, eax
adc	ebx, edx
mov	esi, edi
add	esi, 0Ch
mov	eax, ecx
and	eax, 0FFFFFFFh
mov	edx, [esp+0BCh+var_A4]
mov	[edx+8], eax
shrd	ecx, ebx, 1Ch
shr	ebx, 1Ch
xor	ebx, ebx
mov	eax, [esp+0BCh+var_80]
mov	edi, edx
mul	dword ptr [edx+0Ch]
add	ecx, eax
adc	ebx, edx
add	edi, 10h
mov	[esp+0BCh+var_A4], edi
mov	eax, ecx
and	eax, 0FFFFFFFh
mov	[esi], eax
mov	esi, ecx
mov	edi, ebx
shrd	esi, edi, 1Ch
shr	edi, 1Ch
mov	ebx, esi
add	[esp+0BCh+var_8C], 4
mov	ecx, [esp+0BCh+var_7C]
cmp	[esp+0BCh+var_8C], ecx
jnz	loc_6421AB70
mov	edi, esi
mov	esi, ebp
			
mov	ebp, [esp+0BCh+var_7C]
mov	[esi+ebp*4], edi
mov	ecx, [esp+0BCh+var_7C]
inc	ecx
mov	[esp+0BCh+t3.used], ecx
test	ecx, ecx
jle	loc_6421B0E0
mov	ecx, [esp+0BCh+var_7C]
mov	ebx, [esi+ecx*4]
test	ebx, ebx
jnz	loc_6421AD58
mov	edx, ecx
lea	edi, [ecx-1]
lea	res, [esi+edi*4]
mov	ebx, ecx
and	ebx, 7
jz	loc_6421ACE7
test	edx, edx
jle	loc_6421B0DC
mov	esi, [eax]
mov	edx, edi
sub	eax, 4
test	esi, esi
jnz	loc_6421AD54
cmp	ebx, 1
jz	short loc_6421ACE7
cmp	ebx, 2
jz	short loc_6421ACDB
cmp	ebx, 3
jz	short loc_6421ACCF
cmp	ebx, 4
jz	short loc_6421ACBF
cmp	ebx, 5
jz	short loc_6421ACAF
cmp	ebx, 6
jz	short loc_6421AC9F
mov	ecx, edi
mov	edi, [eax]
dec	edx
sub	eax, 4
test	edi, edi
jnz	loc_6421AD54
mov	ecx, edx
mov	ebx, [eax]
dec	edx
sub	eax, 4
test	ebx, ebx
jnz	loc_6421AD54
mov	ecx, edx
mov	ebp, [eax]
dec	edx
sub	eax, 4
test	ebp, ebp
jnz	loc_6421AD54
mov	ecx, edx
mov	esi, [eax]
dec	edx
sub	eax, 4
test	esi, esi
jnz	loc_6421AD54
mov	ecx, edx
mov	edi, [eax]
dec	edx
sub	eax, 4
test	edi, edi
jnz	short loc_6421AD54
mov	ecx, edx
mov	ebx, [eax]
dec	edx
sub	eax, 4
test	ebx, ebx
jnz	short loc_6421AD54
			
mov	ecx, edx
test	edx, edx
jle	loc_6421B0DC
lea	ebx, [edx-1]
mov	esi, [eax]
test	esi, esi
jnz	short loc_6421AD54
mov	ecx, ebx
lea	ebx, [edx-2]
mov	ebp, [eax-4]
test	ebp, ebp
jnz	short loc_6421AD54
mov	ecx, ebx
lea	ebx, [edx-3]
mov	esi, [eax-8]
test	esi, esi
jnz	short loc_6421AD54
mov	ecx, ebx
lea	ebx, [edx-4]
mov	edi, [eax-0Ch]
test	edi, edi
jnz	short loc_6421AD54
mov	ecx, ebx
lea	ebx, [edx-5]
mov	ebp, [eax-10h]
test	ebp, ebp
jnz	short loc_6421AD54
mov	ecx, ebx
lea	ebx, [edx-6]
mov	esi, [eax-14h]
test	esi, esi
jnz	short loc_6421AD54
mov	ecx, ebx
lea	ebx, [edx-7]
mov	edi, [eax-18h]
test	edi, edi
jnz	short loc_6421AD54
mov	ecx, ebx
mov	ebx, [eax-1Ch]
sub	edx, 8
sub	eax, 20h
test	ebx, ebx
jz	short loc_6421ACE7
lea	esi, [esi+0]
			
mov	[esp+0BCh+t3.used], ecx
			
mov	[esp+0BCh+d], 0
lea	edi, [esp+0BCh+t3]
mov	[esp+0BCh+var_B4], edi 
mov	[esp+0BCh+var_B8], edi 
mov	ebx, [esp+0BCh+var_68]
mov	[esp+0BCh+var_BC], ebx 
call	_tma_mp_div
test	eax, eax
jnz	loc_6421B148
mov	edi, [esp+0BCh+var_68]
mov	[esp+0BCh+var_B4], edi 
lea	edx, [esp+0BCh+t3]
mov	[esp+0BCh+var_B8], edx 
mov	res, [esp+0BCh+var_78]
mov	[esp+0BCh+var_BC], eax 
call	_tma_mp_sub
test	eax, eax
jnz	loc_6421B148
mov	res, [esp+0BCh+t1.sign]
cmp	eax, [esp+0BCh+t2.sign]
jnz	loc_6421B1EC
cmp	eax, 1
jz	loc_6421B164
mov	esi, [esp+0BCh+t1.used]
mov	edi, [esp+0BCh+t2.used]
cmp	esi, edi
jg	loc_6421A7F9
jl	loc_6421A7F9
mov	ecx, [esp+0BCh+t1.dp]
mov	eax, [esp+0BCh+t2.dp]
test	esi, esi
jle	loc_6421B20A
lea	ebp, [esi-1]
lea	edx, ds:0[ebp*4]
add	ecx, edx
lea	edx, [eax+edx]
mov	ebx, [edx]
cmp	ebx, [ecx]
jb	loc_6421A7F9
ja	loc_6421A7F9
xor	eax, eax
xor	ebx, ebx
and	ebp, 7
jz	loc_6421AF46
mov	ebx, 1
mov	eax, [edx-4]
cmp	[ecx-4], eax
ja	loc_6421A7F9
mov	eax, 0FFFFFFFCh
jb	loc_6421A7F9
cmp	ebp, 1
jz	loc_6421AF46
cmp	ebp, 2
jz	loc_6421AF1E
cmp	ebp, 3
jz	loc_6421AEF6
cmp	ebp, 4
jz	short loc_6421AECE
cmp	ebp, 5
jz	short loc_6421AEA6
cmp	ebp, 6
jz	short loc_6421AE7E
mov	bl, 2
mov	ebp, [edx-8]
cmp	[ecx-8], ebp
ja	loc_6421A7F9
mov	eax, 0FFFFFFF8h
jb	loc_6421A7F9
inc	ebx
mov	ebp, [ecx+eax-4]
mov	[esp+0BCh+var_94], ebp
mov	ebp, [edx+eax-4]
mov	[esp+0BCh+var_8C], ebp
cmp	[esp+0BCh+var_94], ebp
ja	loc_6421A7F9
sub	eax, 4
cmp	[esp+0BCh+var_94], ebp
jb	loc_6421A7F9
inc	ebx
mov	ebp, [ecx+eax-4]
mov	[esp+0BCh+var_94], ebp
mov	ebp, [edx+eax-4]
mov	[esp+0BCh+var_8C], ebp
cmp	[esp+0BCh+var_94], ebp
ja	loc_6421A7F9
sub	eax, 4
cmp	[esp+0BCh+var_94], ebp
jb	loc_6421A7F9
inc	ebx
mov	ebp, [ecx+eax-4]
mov	[esp+0BCh+var_94], ebp
mov	ebp, [edx+eax-4]
mov	[esp+0BCh+var_8C], ebp
cmp	[esp+0BCh+var_94], ebp
ja	loc_6421A7F9
sub	eax, 4
cmp	[esp+0BCh+var_94], ebp
jb	loc_6421A7F9
inc	ebx
mov	ebp, [ecx+eax-4]
mov	[esp+0BCh+var_94], ebp
mov	ebp, [edx+eax-4]
mov	[esp+0BCh+var_8C], ebp
cmp	[esp+0BCh+var_94], ebp
ja	loc_6421A7F9
sub	eax, 4
cmp	[esp+0BCh+var_94], ebp
jb	loc_6421A7F9
inc	ebx
mov	ebp, [ecx+eax-4]
mov	[esp+0BCh+var_94], ebp
mov	ebp, [edx+eax-4]
mov	[esp+0BCh+var_8C], ebp
cmp	[esp+0BCh+var_94], ebp
ja	loc_6421A7F9
sub	eax, 4
cmp	[esp+0BCh+var_94], ebp
jb	loc_6421A7F9
			
inc	ebx
mov	[esp+0BCh+var_94], ebx
cmp	esi, ebx
jle	loc_6421B20A
mov	ebx, [ecx+eax-4]
mov	ebp, [edx+eax-4]
mov	[esp+0BCh+var_8C], ebp
cmp	ebx, ebp
ja	loc_6421A7F9
lea	ebp, [eax-4]
cmp	ebx, [esp+0BCh+var_8C]
jb	loc_6421A7F9
mov	ebx, [ecx+ebp-4]
mov	[esp+0BCh+var_8C], ebx
mov	ebx, [edx+ebp-4]
mov	[esp+0BCh+var_74], ebx
cmp	[esp+0BCh+var_8C], ebx
ja	loc_6421A7F9
lea	ebx, [eax-8]
mov	[esp+0BCh+var_7C], ebx
mov	ebx, [esp+0BCh+var_74]
cmp	[esp+0BCh+var_8C], ebx
jb	loc_6421A7F9
mov	ebx, [esp+0BCh+var_7C]
mov	ebx, [ecx+ebx-4]
mov	[esp+0BCh+var_8C], ebx
mov	ebx, [esp+0BCh+var_7C]
mov	ebx, [edx+ebx-4]
mov	[esp+0BCh+var_74], ebx
cmp	[esp+0BCh+var_8C], ebx
ja	loc_6421A7F9
lea	ebx, [eax-0Ch]
mov	[esp+0BCh+var_7C], ebx
mov	ebx, [esp+0BCh+var_74]
cmp	[esp+0BCh+var_8C], ebx
jb	loc_6421A7F9
mov	ebx, [esp+0BCh+var_7C]
mov	ebx, [ecx+ebx-4]
mov	[esp+0BCh+var_8C], ebx
mov	ebx, [esp+0BCh+var_7C]
mov	ebx, [edx+ebx-4]
mov	[esp+0BCh+var_7C], ebx
cmp	[esp+0BCh+var_8C], ebx
ja	loc_6421A7F9
sub	eax, 10h
cmp	[esp+0BCh+var_8C], ebx
jb	loc_6421A7F9
mov	ebx, [ecx+eax-4]
mov	eax, [edx+eax-4]
mov	[esp+0BCh+var_8C], eax
cmp	ebx, eax
ja	loc_6421A7F9
lea	eax, [ebp-10h]
cmp	ebx, [esp+0BCh+var_8C]
jb	loc_6421A7F9
mov	ebx, [ecx+eax-4]
mov	eax, [edx+eax-4]
mov	[esp+0BCh+var_8C], eax
cmp	ebx, eax
ja	loc_6421A7F9
lea	eax, [ebp-14h]
cmp	ebx, [esp+0BCh+var_8C]
jb	loc_6421A7F9
mov	ebx, [ecx+eax-4]
mov	[esp+0BCh+var_74], ebx
mov	eax, [edx+eax-4]
cmp	ebx, eax
ja	loc_6421A7F9
lea	ebx, [ebp-18h]
mov	[esp+0BCh+var_7C], ebx
cmp	[esp+0BCh+var_74], eax
jb	loc_6421A7F9
mov	ebx, [esp+0BCh+var_94]
add	ebx, 7
mov	eax, [esp+0BCh+var_7C]
mov	eax, [ecx+eax-4]
mov	[esp+0BCh+var_8C], eax
mov	eax, [esp+0BCh+var_7C]
mov	eax, [edx+eax-4]
mov	[esp+0BCh+var_94], eax
cmp	[esp+0BCh+var_8C], eax
ja	loc_6421A7F9
lea	eax, [ebp-1Ch]
mov	ebp, [esp+0BCh+var_94]
cmp	[esp+0BCh+var_8C], ebp
jnb	loc_6421AF46
jmp	loc_6421A7F9
align 10h
mov	ebx, 0FFFFFFFEh
mov	eax, res
add	esp, 0ACh
pop	res
pop	b_0
pop	edi
pop	ebp
retn
align 4
mov	eax, [esp+0BCh+a]
cmp	dword ptr [eax+8], 1
jnz	loc_6421A541
mov	ebx, 0FFFFFFFDh
jmp	short loc_6421B0B5
			
mov	[esp+0BCh+t3.used], edx
test	ecx, ecx
jnz	loc_6421AD58
mov	[esp+0BCh+t3.sign], 0
jmp	loc_6421AD58
align 4
mov	ebx, 0FFFFFFFEh
lea	edx, [esp+0BCh+t1]
mov	[esp+0BCh+var_78], edx
mov	b_0, [esp+0BCh+var_78]
mov	[esp+0BCh+var_BC], esi 
call	_tma_mp_clear
mov	eax, res
add	esp, 0ACh
pop	res
pop	esi
pop	edi
pop	ebp
retn
align 4
mov	esi, ecx
inc	esi
mov	[esp+0BCh+var_B8], esi 
lea	ebp, [esp+0BCh+t3]
mov	[esp+0BCh+var_BC], ebp 
call	_tma_mp_grow
test	eax, eax
jnz	short loc_6421B148
mov	ecx, [esp+0BCh+t3.used]
mov	[esp+0BCh+var_7C], ecx
jmp	loc_6421AA42
			
mov	ebx, res
			
lea	ebp, [esp+0BCh+t3]
mov	[esp+0BCh+var_BC], ebp 
call	_tma_mp_clear
mov	ecx, [esp+0BCh+var_68]
mov	[esp+0BCh+var_BC], ecx 
call	_tma_mp_clear
jmp	short LBL_T1
mov	edi, [esp+0BCh+t2.used]
cmp	edi, [esp+0BCh+t1.used]
jg	loc_6421A7F9
jl	loc_6421A7F9
lea	esi, ds:0FFFFFFFCh[edi*4]
mov	ebp, [esp+0BCh+t2.dp]
add	ebp, esi
add	esi, [esp+0BCh+t1.dp]
xor	al, al
xor	edx, edx
jmp	short loc_6421B1B6
mov	ebx, [ebp+eax+0]
mov	ecx, [esi+eax]
cmp	ebx, ecx
ja	loc_6421A7F9
sub	eax, 4
cmp	ebx, ecx
jb	loc_6421A7F9
inc	edx
cmp	edi, edx
jg	short loc_6421B19B
mov	esi, [esp+0BCh+var_80]
mov	ebp, [esp+0BCh+a]
mov	edi, [esp+0BCh+var_78]
jmp	short loc_6421B248
align 4
mov	ebx, 0FFFFFFFEh
lea	ecx, [esp+0BCh+t1]
mov	[esp+0BCh+var_78], ecx
lea	b_0, [esp+0BCh+t2]
mov	[esp+0BCh+var_68], esi
jmp	LBL_T2
mov	edi, [esp+0BCh+t2.used]
jmp	loc_6421A7F9
mov	dword ptr [esi], 0
jmp	loc_6421AC27
xor	edx, edx
jmp	loc_6421A8DD
			
mov	ebp, [esp+0BCh+a]
mov	esi, [esp+0BCh+var_80]
mov	edi, [esp+0BCh+var_78]
jmp	short loc_6421B248
align 4
mov	edx, [esp+0BCh+t2.used]
cmp	edx, [a_0+0]
jle	loc_6421B34E
			
mov	[esp+0BCh+var_B4], edi 
mov	[esp+0BCh+var_B8], 1 
mov	[esp+0BCh+var_BC], edi 
call	_tma_mp_sub_d
test	eax, eax
jnz	loc_6421B2D4
			
mov	ecx, [esp+0BCh+var_68]
mov	[esp+0BCh+var_B4], ecx 
mov	[esp+0BCh+var_B8], b_0 
mov	[esp+0BCh+var_BC], edi 
call	_tma_mp_expt_d
test	eax, eax
jnz	short loc_6421B2D4
mov	edx, [esp+0BCh+t2.sign]
cmp	edx, [a_0+8]
jnz	short loc_6421B2DF
dec	edx
jnz	short loc_6421B21C
mov	ebx, [a_0+0]
cmp	ebx, [esp+0BCh+t2.used]
jg	short loc_6421B22C
jl	short loc_6421B2E6
lea	edx, ds:0FFFFFFFCh[ebx*4]
mov	ecx, [a_0+0Ch]
add	ecx, edx
mov	[esp+0BCh+var_78], ecx
add	edx, [esp+0BCh+t2.dp]
mov	[esp+0BCh+var_7C], edx
xor	edx, edx
xor	ecx, ecx
mov	[esp+0BCh+var_94], ebx
jmp	short loc_6421B2CC
mov	ebx, [esp+0BCh+var_78]
mov	ebx, [ebx+edx]
mov	[esp+0BCh+var_80], ebx
mov	ebx, [esp+0BCh+var_7C]
mov	ebx, [ebx+edx]
mov	[esp+0BCh+var_8C], ebx
cmp	[esp+0BCh+var_80], ebx
ja	loc_6421B22C
sub	edx, 4
cmp	[esp+0BCh+var_80], ebx
jb	short loc_6421B2E6
inc	ecx
cmp	[esp+0BCh+var_94], ecx
jg	short loc_6421B2A2
jmp	short loc_6421B2E6
			
mov	ebx, res
mov	[esp+0BCh+var_78], edi
jmp	LBL_T3
dec	edx
jnz	loc_6421B22C
			
mov	ebx, res
mov	[esp+0BCh+a], a_0
mov	[esp+0BCh+var_78], edi
mov	res, [esp+0BCh+var_60]
mov	edx, [esp+0BCh+a]
mov	[edx+8], eax
lea	edi, [esp+0BCh+var_5C]
mov	[esp+0BCh+var_A0], edi
mov	a_0, 4
mov	b_0, [esp+0BCh+var_78]
mov	ecx, ebp
rep movsd
lea	edi, [esp+0BCh+t1]
mov	[esp+0BCh+var_78], edi
mov	esi, [esp+0BCh+c]
mov	ecx, ebp
rep movsd
mov	edi, [esp+0BCh+c]
mov	esi, [esp+0BCh+var_A0]
mov	ecx, ebp
rep movsd
mov	esi, [esp+0BCh+var_60]
mov	eax, [esp+0BCh+c]
mov	[eax+8], esi
jmp	LBL_T3
jl	short loc_6421B2E6
lea	ecx, ds:0FFFFFFFCh[edx*4]
mov	ebx, [esp+0BCh+t2.dp]
add	ebx, ecx
mov	[esp+0BCh+var_78], ebx
add	ecx, [a_0+0Ch]
mov	[esp+0BCh+var_7C], ecx
xor	ecx, ecx
xor	ebx, ebx
mov	[esp+0BCh+var_94], edx
jmp	short loc_6421B3A3
mov	edx, [esp+0BCh+var_78]
mov	edx, [edx+ecx]
mov	[esp+0BCh+var_80], edx
mov	edx, [esp+0BCh+var_7C]
mov	edx, [edx+ecx]
mov	[esp+0BCh+var_8C], edx
cmp	[esp+0BCh+var_80], edx
ja	loc_6421B22C
sub	ecx, 4
cmp	[esp+0BCh+var_80], edx
jb	loc_6421B2E6
inc	ebx
cmp	[esp+0BCh+var_94], ebx
jg	short loc_6421B375
jmp	loc_6421B2E6
lea	ebx, [edi+40h]
mov	eax, edi
mov	edi, 20h
cdq
idiv	edi
sub	ebx, edx
lea	ebp, ds:0[ebx*4]
mov	[esp+0BCh+var_B8], ebp 
mov	esi, [esp+0BCh+t1.dp]
mov	[esp+0BCh+var_BC], esi 
call	_realloc
test	eax, eax
jz	short loc_6421B40F
mov	[esp+0BCh+t1.dp], eax
mov	edx, [esp+0BCh+t1.alloc]
lea	ecx, [eax+edx*4]
cmp	ebx, edx
jle	short loc_6421B3FC
mov	dword ptr [ecx], 0
inc	edx
add	ecx, 4
jmp	short loc_6421B3EC
mov	[esp+0BCh+t1.alloc], ebx
mov	edi, [esp+0BCh+t2.used]
jmp	loc_6421A80D
mov	ebx, 0FFFFFFFEh
jmp	LBL_T3
align 4
public _tma_mp_to_signed_bin
push	ebp
push	edi
push	esi
push	ebx
sub	esp, 3Ch
mov	esi, [esp+4Ch+b]
mov	[esp+4Ch+var_4C], 80h 
call	_malloc
mov	edx, eax
test	eax, eax
jz	loc_6421B6EC
xor	ecx, ecx
mov	dword ptr [eax+ecx*4], 0
mov	dword ptr [eax+ecx*4+4], 0
mov	dword ptr [eax+ecx*4+8], 0
mov	dword ptr [eax+ecx*4+0Ch], 0
mov	dword ptr [eax+ecx*4+10h], 0
mov	dword ptr [eax+ecx*4+14h], 0
mov	dword ptr [eax+ecx*4+18h], 0
mov	dword ptr [eax+ecx*4+1Ch], 0
add	ecx, 8
cmp	ecx, 20h
jnz	short loc_6421B43F
mov	[esp+4Ch+var_2C.dp], eax
mov	[esp+4Ch+var_2C.used], 0
mov	[esp+4Ch+var_2C.alloc],	20h
mov	[esp+4Ch+var_2C.sign], 0
lea	ebx, [esp+4Ch+var_2C]
cmp	[esp+4Ch+a], ebx
jz	loc_6421B83C
mov	ecx, [esp+4Ch+a]
mov	ebp, [ecx]
cmp	ebp, 20h
jg	loc_6421B843
mov	[esp+4Ch+var_30], 0
mov	eax, [esp+4Ch+a]
mov	ecx, [eax+0Ch]
test	ebp, ebp
jle	loc_6421B898
lea	edi, [ebp-1]
and	edi, 7
mov	eax, [ecx]
mov	[edx], eax
add	edx, 4
mov	eax, 1
cmp	eax, ebp
jge	loc_6421B599
test	edi, edi
jz	short loc_6421B559
cmp	edi, 1
jz	short loc_6421B54C
cmp	edi, 2
jz	short loc_6421B543
cmp	edi, 3
jz	short loc_6421B53A
cmp	edi, 4
jz	short loc_6421B531
cmp	edi, 5
jz	short loc_6421B528
cmp	edi, 6
jz	short loc_6421B51F
mov	edi, [ecx+4]
mov	[edx], edi
add	edx, 4
mov	eax, 2
mov	edi, [ecx+eax*4]
mov	[edx], edi
add	edx, 4
inc	eax
mov	edi, [ecx+eax*4]
mov	[edx], edi
add	edx, 4
inc	eax
mov	edi, [ecx+eax*4]
mov	[edx], edi
add	edx, 4
inc	eax
mov	edi, [ecx+eax*4]
mov	[edx], edi
add	edx, 4
inc	eax
mov	edi, [ecx+eax*4]
mov	[edx], edi
add	edx, 4
inc	eax
mov	edi, [ecx+eax*4]
mov	[edx], edi
add	edx, 4
inc	eax
cmp	eax, ebp
jge	short loc_6421B599
			
mov	edi, [ecx+eax*4]
mov	[edx], edi
mov	edi, [ecx+eax*4+4]
mov	[edx+4], edi
mov	edi, [ecx+eax*4+8]
mov	[edx+8], edi
mov	edi, [ecx+eax*4+0Ch]
mov	[edx+0Ch], edi
mov	edi, [ecx+eax*4+10h]
mov	[edx+10h], edi
mov	edi, [ecx+eax*4+14h]
mov	[edx+14h], edi
mov	edi, [ecx+eax*4+18h]
mov	[edx+18h], edi
mov	edi, [ecx+eax*4+1Ch]
mov	[edx+1Ch], edi
add	edx, 20h
add	eax, 8
cmp	eax, ebp
jl	short loc_6421B559
			
cmp	eax, [esp+4Ch+var_30]
jge	loc_6421B68A
mov	ecx, eax
not	ecx
add	ecx, [esp+4Ch+var_30]
and	ecx, 7
mov	[esp+4Ch+var_34], ecx
mov	dword ptr [edx], 0
lea	ecx, [edx+4]
lea	edi, [eax+1]
cmp	edi, [esp+4Ch+var_30]
jge	loc_6421B68A
cmp	[esp+4Ch+var_34], 0
jz	short loc_6421B647
cmp	[esp+4Ch+var_34], 1
jz	short loc_6421B637
cmp	[esp+4Ch+var_34], 2
jz	short loc_6421B62D
cmp	[esp+4Ch+var_34], 3
jz	short loc_6421B623
cmp	[esp+4Ch+var_34], 4
jz	short loc_6421B619
cmp	[esp+4Ch+var_34], 5
jz	short loc_6421B60F
cmp	[esp+4Ch+var_34], 6
jz	short loc_6421B605
mov	dword ptr [ecx], 0
lea	ecx, [edx+8]
lea	edi, [eax+2]
mov	dword ptr [ecx], 0
add	ecx, 4
inc	edi
mov	dword ptr [ecx], 0
add	ecx, 4
inc	edi
mov	dword ptr [ecx], 0
add	ecx, 4
inc	edi
mov	dword ptr [ecx], 0
add	ecx, 4
inc	edi
mov	dword ptr [ecx], 0
add	ecx, 4
inc	edi
mov	dword ptr [ecx], 0
add	ecx, 4
inc	edi
cmp	edi, [esp+4Ch+var_30]
jge	short loc_6421B68A
			
mov	dword ptr [ecx], 0
mov	dword ptr [ecx+4], 0
mov	dword ptr [ecx+8], 0
mov	dword ptr [ecx+0Ch], 0
mov	dword ptr [ecx+10h], 0
mov	dword ptr [ecx+14h], 0
mov	dword ptr [ecx+18h], 0
mov	dword ptr [ecx+1Ch], 0
add	ecx, 20h
add	edi, 8
cmp	edi, [esp+4Ch+var_30]
jl	short loc_6421B647
			
mov	[esp+4Ch+var_2C.used], ebp
mov	edx, [esp+4Ch+a]
mov	eax, [edx+8]
mov	[esp+4Ch+var_2C.sign], eax
xor	edi, edi
jmp	short loc_6421B6A5
align 10h
inc	edi
mov	ebp, [esp+4Ch+var_2C.used]
test	ebp, ebp
jz	short loc_6421B6FC
mov	ebp, [esp+4Ch+var_2C.dp]
mov	ecx, [ebp+0]
mov	[b_0+edi+1], cl
mov	[esp+4Ch+d], 0	
mov	[esp+4Ch+c], ebx 
mov	[esp+4Ch+var_48], 8 
mov	[esp+4Ch+var_4C], ebx 
call	_tma_mp_div_2d
test	eax, eax
jz	short loc_6421B6A0
mov	[esp+4Ch+var_4C], ebx 
mov	[esp+4Ch+var_38], res
call	_tma_mp_clear
mov	eax, [esp+4Ch+var_38]
add	esp, 3Ch
pop	ebx
pop	b_0
pop	edi
pop	ebp
retn
			
mov	eax, 0FFFFFFFEh
add	esp, 3Ch
pop	ebx
pop	b_0
pop	edi
pop	ebp
retn
align 4
lea	ecx, [edi-1]
test	ecx, ecx
jle	loc_6421B81C
lea	res, [b_0+edi]
xor	edx, edx
mov	[esp+4Ch+var_34], ecx
movzx	edi, byte ptr [b_0+edx+1]
mov	cl, [eax]
mov	[b_0+edx+1], cl
mov	ecx, edi
mov	[eax], cl
lea	edi, [edx+1]
mov	ecx, [esp+4Ch+var_34]
dec	ecx
cmp	edi, ecx
jge	loc_6421B81C
movzx	ebp, byte ptr [b_0+edi+1]
mov	cl, [eax-1]
mov	[b_0+edi+1], cl
mov	ecx, ebp
mov	[eax-1], cl
lea	edi, [edx+2]
mov	ebp, [esp+4Ch+var_34]
sub	ebp, 2
cmp	edi, ebp
jge	loc_6421B81C
movzx	ebp, byte ptr [b_0+edi+1]
mov	cl, [eax-2]
mov	[b_0+edi+1], cl
mov	ecx, ebp
mov	[eax-2], cl
lea	edi, [edx+3]
mov	ebp, [esp+4Ch+var_34]
sub	ebp, 3
cmp	edi, ebp
jge	loc_6421B81C
movzx	ebp, byte ptr [b_0+edi+1]
mov	cl, [eax-3]
mov	[b_0+edi+1], cl
mov	ecx, ebp
mov	[eax-3], cl
lea	edi, [edx+4]
mov	ebp, [esp+4Ch+var_34]
sub	ebp, 4
cmp	edi, ebp
jge	loc_6421B81C
movzx	ebp, byte ptr [b_0+edi+1]
mov	cl, [eax-4]
mov	[b_0+edi+1], cl
mov	ecx, ebp
mov	[eax-4], cl
lea	edi, [edx+5]
mov	ebp, [esp+4Ch+var_34]
sub	ebp, 5
cmp	edi, ebp
jge	short loc_6421B81C
movzx	ebp, byte ptr [b_0+edi+1]
mov	cl, [eax-5]
mov	[b_0+edi+1], cl
mov	ecx, ebp
mov	[eax-5], cl
lea	edi, [edx+6]
mov	ebp, [esp+4Ch+var_34]
sub	ebp, 6
cmp	edi, ebp
jge	short loc_6421B81C
movzx	ebp, byte ptr [b_0+edi+1]
mov	cl, [eax-6]
mov	[b_0+edi+1], cl
mov	ecx, ebp
mov	[eax-6], cl
lea	edi, [edx+7]
mov	ebp, [esp+4Ch+var_34]
sub	ebp, 7
cmp	edi, ebp
jge	short loc_6421B81C
movzx	ebp, byte ptr [b_0+edi+1]
mov	cl, [eax-7]
mov	[b_0+edi+1], cl
mov	ecx, ebp
mov	[eax-7], cl
add	edx, 8
sub	[esp+4Ch+var_34], 8
sub	eax, 8
cmp	edx, [esp+4Ch+var_34]
jl	loc_6421B710
nop
			
mov	[esp+4Ch+var_4C], ebx 
call	_tma_mp_clear
mov	eax, [esp+4Ch+a]
mov	ebx, [eax+8]
test	ebx, ebx
setnz	byte ptr [b_0]
xor	eax, eax
add	esp, 3Ch
pop	ebx
pop	b_0
pop	edi
pop	ebp
retn
align 4
xor	ebp, ebp
jmp	loc_6421B699
and	ebp, 0FFFFFFE0h
lea	edi, [ebp+40h]
lea	edx, ds:0[edi*4]
mov	[esp+4Ch+var_48], edx 
mov	[esp+4Ch+var_4C], eax 
call	_realloc
mov	edx, eax
test	eax, eax
jz	loc_6421B6EC
mov	[esp+4Ch+var_2C.dp], eax
mov	eax, [esp+4Ch+var_2C.alloc]
mov	[esp+4Ch+var_2C.alloc],	edi
lea	ecx, [edx+eax*4]
jmp	short loc_6421B881
mov	dword ptr [ecx], 0
inc	eax
add	ecx, 4
cmp	edi, eax
jg	short loc_6421B877
mov	edi, [esp+4Ch+a]
mov	ebp, [edi]
mov	eax, [esp+4Ch+var_2C.used]
mov	[esp+4Ch+var_30], eax
jmp	loc_6421B4C7
xor	eax, eax
jmp	loc_6421B599
align 10h
public _tma_mp_toradix
			
push	ebp
push	edi
push	esi
push	ebx
sub	esp, 5Ch
mov	esi, [esp+6Ch+a]
mov	ebx, [esp+6Ch+str]
mov	ebp, [esp+6Ch+radix]
lea	eax, [ebp-2]
cmp	eax, 3Eh
ja	loc_6421B9D8
mov	edi, [a_0]
test	edi, edi
jnz	short loc_6421B8D8
mov	byte ptr [str_0], 30h
mov	byte ptr [str_0+1], 0
xor	eax, eax
			
add	esp, 5Ch
pop	str_0
pop	digs
pop	edi
pop	radix_0
retn
align 4
mov	[esp+6Ch+var_6C], 80h 
call	_malloc
test	eax, eax
jz	loc_6421BBB0
xor	edx, edx
mov	dword ptr [eax+edx*4], 0
mov	dword ptr [eax+edx*4+4], 0
mov	dword ptr [eax+edx*4+8], 0
mov	dword ptr [eax+edx*4+0Ch], 0
mov	dword ptr [eax+edx*4+10h], 0
mov	dword ptr [eax+edx*4+14h], 0
mov	dword ptr [eax+edx*4+18h], 0
mov	dword ptr [eax+edx*4+1Ch], 0
add	edx, 8
cmp	edx, 20h
jnz	short loc_6421B8EE
mov	[esp+6Ch+t.dp],	eax
mov	[esp+6Ch+t.used], 0
mov	[esp+6Ch+t.alloc], 20h
mov	[esp+6Ch+t.sign], 0
lea	edi, [esp+6Ch+t]
mov	[esp+6Ch+b], edi 
mov	[esp+6Ch+var_6C], a_0 
call	_tma_mp_copy
test	eax, eax
jnz	loc_6421B8CE
cmp	[esp+6Ch+t.sign], 1
jz	loc_6421BB94
mov	[esp+6Ch+var_44], str_0
mov	ecx, [esp+6Ch+t.used]
test	ecx, ecx
jz	loc_6421BB80
xor	a_0, a_0
jmp	short loc_6421B9A5
mov	res, [esp+6Ch+d]
mov	edx, _tma_mp_s_rmap
mov	cl, [edx+eax]
mov	[str_0], cl
inc	str_0
lea	eax, [digs+1]
mov	edx, [esp+6Ch+t.used]
test	edx, edx
jz	short loc_6421B9E8
mov	esi, digs
lea	res, [esp+6Ch+d]
mov	[esp+6Ch+var_60], eax 
mov	[esp+6Ch+c], edi 
mov	[esp+6Ch+b], radix_0 
mov	[esp+6Ch+var_6C], edi 
call	_tma_mp_div_d
test	eax, eax
jz	short loc_6421B988
mov	[esp+6Ch+var_6C], edi 
mov	[esp+6Ch+var_48], res
call	_tma_mp_clear
mov	eax, [esp+6Ch+var_48]
jmp	loc_6421B8CE
align 4
mov	eax, 0FFFFFFFDh
add	esp, 5Ch
pop	str_0
pop	a_0
pop	edi
pop	radix_0
retn
align 4
test	esi, esi
jz	loc_6421BB80
mov	eax, [esp+6Ch+var_44]
add	eax, digs
xor	edx, edx
mov	ecx, [esp+6Ch+var_44]
mov	[esp+6Ch+var_40], str_0
movzx	ebp, byte ptr [_s+edx]
mov	bl, [eax]
mov	[_s+edx], bl
mov	ebx, ebp
mov	[eax], bl
lea	ebx, [edx+1]
mov	[esp+6Ch+var_44], ebx
mov	ebp, digs
sub	ebp, [esp+6Ch+var_44]
cmp	[esp+6Ch+var_44], ebp
jge	loc_6421BB7C
mov	ebp, [esp+6Ch+var_44]
mov	bl, [_s+ebp]
mov	[esp+6Ch+var_4D], bl
mov	bl, [eax-1]
mov	ebp, [esp+6Ch+var_44]
mov	[_s+ebp], bl
mov	bl, [esp+6Ch+var_4D]
mov	[eax-1], bl
lea	ebx, [edx+2]
mov	[esp+6Ch+var_44], ebx
mov	ebp, digs
sub	ebp, [esp+6Ch+var_44]
cmp	[esp+6Ch+var_44], ebp
jge	loc_6421BB7C
mov	ebp, [esp+6Ch+var_44]
mov	bl, [_s+ebp]
mov	[esp+6Ch+var_4D], bl
mov	bl, [eax-2]
mov	ebp, [esp+6Ch+var_44]
mov	[_s+ebp], bl
mov	bl, [esp+6Ch+var_4D]
mov	[eax-2], bl
lea	ebp, [edx+3]
mov	[esp+6Ch+var_44], ebp
mov	ebx, digs
sub	ebx, [esp+6Ch+var_44]
cmp	[esp+6Ch+var_44], ebx
jge	loc_6421BB7C
mov	ebp, [esp+6Ch+var_44]
mov	bl, [_s+ebp]
mov	[esp+6Ch+var_4D], bl
mov	bl, [eax-3]
mov	ebp, [esp+6Ch+var_44]
mov	[_s+ebp], bl
mov	bl, [esp+6Ch+var_4D]
mov	[eax-3], bl
lea	ebp, [edx+4]
mov	[esp+6Ch+var_44], ebp
mov	ebx, digs
sub	ebx, [esp+6Ch+var_44]
cmp	[esp+6Ch+var_44], ebx
jge	loc_6421BB7C
mov	ebp, [esp+6Ch+var_44]
mov	bl, [_s+ebp]
mov	[esp+6Ch+var_4D], bl
mov	bl, [eax-4]
mov	ebp, [esp+6Ch+var_44]
mov	[_s+ebp], bl
mov	bl, [esp+6Ch+var_4D]
mov	[eax-4], bl
lea	ebp, [edx+5]
mov	[esp+6Ch+var_44], ebp
mov	ebx, digs
sub	ebx, [esp+6Ch+var_44]
cmp	[esp+6Ch+var_44], ebx
jge	loc_6421BB7C
mov	ebp, [esp+6Ch+var_44]
mov	bl, [_s+ebp]
mov	[esp+6Ch+var_4D], bl
mov	bl, [eax-5]
mov	ebp, [esp+6Ch+var_44]
mov	[_s+ebp], bl
mov	bl, [esp+6Ch+var_4D]
mov	[eax-5], bl
lea	ebp, [edx+6]
mov	[esp+6Ch+var_44], ebp
mov	ebx, digs
sub	ebx, [esp+6Ch+var_44]
cmp	[esp+6Ch+var_44], ebx
jge	short loc_6421BB7C
mov	ebp, [esp+6Ch+var_44]
mov	bl, [_s+ebp]
mov	[esp+6Ch+var_4D], bl
mov	bl, [eax-6]
mov	ebp, [esp+6Ch+var_44]
mov	[_s+ebp], bl
mov	bl, [esp+6Ch+var_4D]
mov	[eax-6], bl
lea	ebp, [edx+7]
mov	[esp+6Ch+var_44], ebp
mov	ebx, digs
sub	ebx, [esp+6Ch+var_44]
cmp	[esp+6Ch+var_44], ebx
jge	short loc_6421BB7C
mov	ebp, [esp+6Ch+var_44]
mov	bl, [_s+ebp]
mov	[esp+6Ch+var_4D], bl
mov	bl, [eax-7]
mov	ebp, [esp+6Ch+var_44]
mov	[_s+ebp], bl
mov	bl, [esp+6Ch+var_4D]
mov	[eax-7], bl
add	edx, 8
sub	eax, 8
mov	ebx, digs
sub	ebx, edx
cmp	edx, ebx
jl	loc_6421BA00
			
mov	ebx, [esp+6Ch+var_40]
			
mov	byte ptr [str_0], 0
mov	[esp+6Ch+var_6C], edi 
call	_tma_mp_clear
xor	eax, eax
jmp	loc_6421B8CE
align 4
lea	edx, [str_0+1]
mov	[esp+6Ch+var_44], edx
mov	byte ptr [str_0], 2Dh
mov	[esp+6Ch+t.sign], 0
mov	str_0, edx
jmp	loc_6421B978
align 10h
mov	eax, 0FFFFFFFEh
jmp	loc_6421B8CE
align 4
public _tma_mp_fwrite
push	ebp
push	edi
push	esi
push	ebx
sub	esp, 3Ch
mov	esi, [esp+4Ch+a]
mov	edi, [esp+4Ch+radix]
mov	ebp, [esp+4Ch+stream]
lea	eax, [esp+4Ch+len]
mov	[esp+4Ch+size],	eax 
mov	[esp+4Ch+str], edi 
mov	[esp+4Ch+var_4C], esi 
call	_tma_mp_radix_size
mov	ebx, eax
test	eax, eax
jz	short loc_6421BBF4
			
mov	eax, err
add	esp, 3Ch
pop	err
pop	x
pop	edi
pop	ebp
retn
align 4
mov	edx, [esp+4Ch+len]
mov	[esp+4Ch+var_4C], edx 
call	_malloc
mov	[esp+4Ch+var_30], eax
test	eax, eax
jz	short loc_6421BC72
mov	[esp+4Ch+size],	radix_0	
mov	ecx, [esp+4Ch+var_30]
mov	[esp+4Ch+str], ecx 
mov	[esp+4Ch+var_4C], a_0 
call	_tma_mp_toradix
mov	err, eax
test	eax, eax
jnz	short loc_6421BC61
mov	a_0, [esp+4Ch+len]
test	esi, esi
jle	short loc_6421BC61
xor	esi, esi
jmp	short loc_6421BC37
align 10h
inc	x
cmp	[esp+4Ch+len], x
jle	short loc_6421BC61
mov	[esp+4Ch+str], stream_0	
mov	eax, [esp+4Ch+var_30]
movsx	edi, byte ptr [eax+x]
mov	[esp+4Ch+var_4C], edi 
call	_fputc
inc	eax
jnz	short loc_6421BC30
mov	err, [esp+4Ch+var_30]
mov	[esp+4Ch+var_4C], ebx 
call	_free
mov	ebx, 0FFFFFFFDh
jmp	short loc_6421BBE9
			
mov	stream_0, [esp+4Ch+var_30]
mov	[esp+4Ch+var_4C], ebp 
call	_free
jmp	loc_6421BBE9
mov	err, 0FFFFFFFEh
jmp	loc_6421BBE9
public _tma_mp_rand
push	ebp
push	edi
push	esi
push	ebx
sub	esp, 2Ch
mov	ebx, [esp+3Ch+a]
mov	dword ptr [ebx+8], 0
mov	dword ptr [ebx], 0
mov	edx, [ebx+0Ch]
mov	esi, [ebx+4]
test	esi, esi
jle	loc_6421BD63
lea	ecx, [esi-1]
and	ecx, 7
mov	dword ptr [edx], 0
mov	eax, 1
cmp	eax, esi
jz	loc_6421BD63
test	ecx, ecx
jz	short loc_6421BD1D
cmp	ecx, 1
jz	short loc_6421BD11
cmp	ecx, 2
jz	short loc_6421BD09
cmp	ecx, 3
jz	short loc_6421BD01
cmp	ecx, 4
jz	short loc_6421BCF9
cmp	ecx, 5
jz	short loc_6421BCF1
cmp	ecx, 6
jz	short loc_6421BCE9
mov	dword ptr [edx+eax*4], 0
mov	eax, 2
mov	dword ptr [edx+eax*4], 0
inc	eax
mov	dword ptr [edx+eax*4], 0
inc	eax
mov	dword ptr [edx+eax*4], 0
inc	eax
mov	dword ptr [edx+eax*4], 0
inc	eax
mov	dword ptr [edx+eax*4], 0
inc	eax
mov	dword ptr [edx+eax*4], 0
inc	eax
cmp	eax, esi
jz	short loc_6421BD63
			
mov	dword ptr [edx+eax*4], 0
mov	dword ptr [edx+eax*4+4], 0
mov	dword ptr [edx+eax*4+8], 0
mov	dword ptr [edx+eax*4+0Ch], 0
mov	dword ptr [edx+eax*4+10h], 0
mov	dword ptr [edx+eax*4+14h], 0
mov	dword ptr [edx+eax*4+18h], 0
mov	dword ptr [edx+eax*4+1Ch], 0
add	eax, 8
cmp	eax, esi
jnz	short loc_6421BD1D
			
mov	edx, [esp+3Ch+digits]
test	edx, edx
jg	short loc_6421BD77
jmp	loc_6421C02F
and	eax, 0FFFFFFFh
jnz	short loc_6421BD89
			
call	_rand
test	eax, eax
jns	short loc_6421BD70
neg	eax
and	eax, 0FFFFFFFh
jz	short loc_6421BD77
mov	[esp+3Ch+c], a_0 
mov	[esp+3Ch+b], d	
mov	[esp+3Ch+var_3C], a_0 
call	_tma_mp_add_d
mov	[esp+3Ch+var_20], eax
test	eax, eax
jnz	loc_6421C01C
dec	[esp+3Ch+digits]
mov	ecx, [esp+3Ch+digits]
test	ecx, ecx
jle	loc_6421C01C
mov	edx, [a_0+4]
mov	edi, [a_0]
cmp	edx, edi
jle	loc_6421BF00
lea	res, [edi+1]
			
mov	[a_0], eax
mov	ebp, [a_0+0Ch]
test	edi, edi
jle	loc_6421BEC9
lea	ecx, [ebp+eax*4-4]
lea	esi, [ebp+eax*4-8]
lea	edx, [edi-1]
mov	eax, edx
and	eax, 7
mov	[esp+3Ch+var_24], eax
mov	eax, [esi]
mov	[ecx], eax
mov	eax, 0FFFFFFFCh
test	edx, edx
jz	loc_6421BEC9
cmp	[esp+3Ch+var_24], 0
jz	short loc_6421BE74
cmp	[esp+3Ch+var_24], 1
jz	short loc_6421BE68
cmp	[esp+3Ch+var_24], 2
jz	short loc_6421BE5E
cmp	[esp+3Ch+var_24], 3
jz	short loc_6421BE54
cmp	[esp+3Ch+var_24], 4
jz	short loc_6421BE4A
cmp	[esp+3Ch+var_24], 5
jz	short loc_6421BE40
cmp	[esp+3Ch+var_24], 6
jz	short loc_6421BE36
mov	edx, [esi-4]
mov	[ecx-4], edx
lea	edx, [edi-2]
mov	eax, 0FFFFFFF8h
mov	edi, [esi+eax]
mov	[ecx+eax], edi
dec	edx
sub	eax, 4
mov	edi, [esi+eax]
mov	[ecx+eax], edi
dec	edx
sub	eax, 4
mov	edi, [esi+eax]
mov	[ecx+eax], edi
dec	edx
sub	eax, 4
mov	edi, [esi+eax]
mov	[ecx+eax], edi
dec	edx
sub	eax, 4
mov	edi, [esi+eax]
mov	[ecx+eax], edi
dec	edx
sub	eax, 4
mov	edi, [esi+eax]
mov	[ecx+eax], edi
sub	eax, 4
dec	edx
jz	short loc_6421BEC9
mov	[esp+3Ch+var_24], ebp
mov	edi, [esi+eax]
mov	[ecx+eax], edi
lea	edi, [eax-4]
mov	ebp, [esi+edi]
mov	[ecx+edi], ebp
lea	edi, [eax-8]
mov	ebp, [esi+edi]
mov	[ecx+edi], ebp
lea	edi, [eax-0Ch]
mov	ebp, [esi+edi]
mov	[ecx+edi], ebp
lea	edi, [eax-10h]
mov	ebp, [esi+edi]
mov	[ecx+edi], ebp
lea	edi, [eax-14h]
mov	ebp, [esi+edi]
mov	[ecx+edi], ebp
lea	edi, [eax-18h]
mov	ebp, [esi+edi]
mov	[ecx+edi], ebp
lea	edi, [eax-1Ch]
mov	ebp, [esi+edi]
mov	[ecx+edi], ebp
sub	eax, 20h
sub	edx, 8
jnz	short loc_6421BE78
mov	ebp, [esp+3Ch+var_24]
			
mov	dword ptr [ebp+0], 0
call	_rand
mov	[esp+3Ch+c], a_0 
test	eax, eax
js	loc_6421C028
mov	[esp+3Ch+b], eax 
mov	[esp+3Ch+var_3C], a_0 
call	_tma_mp_add_d
test	eax, eax
jz	loc_6421BDA5
add	esp, 2Ch
pop	a_0
pop	esi
pop	edi
pop	ebp
retn
align 10h
lea	res, [edi+1]
cmp	edx, eax
jge	loc_6421BDC5
add	edi, 41h
mov	esi, 20h
cdq
idiv	esi
sub	edi, edx
lea	ecx, ds:0[edi*4]
mov	[esp+3Ch+b], ecx 
mov	eax, [a_0+0Ch]
mov	[esp+3Ch+var_3C], eax 
call	_realloc
test	eax, eax
jz	loc_6421C039
mov	[a_0+0Ch], eax
mov	edx, [a_0+4]
mov	[a_0+4], edi
cmp	edi, edx
jle	loc_6421C043
lea	esi, [eax+edx*4]
mov	ecx, edx
not	ecx
add	ecx, edi
and	ecx, 7
mov	dword ptr [esi], 0
inc	edx
lea	eax, [esi+4]
cmp	edi, edx
jle	loc_6421C013
test	ecx, ecx
jz	short loc_6421BFD2
cmp	ecx, 1
jz	short loc_6421BFC4
cmp	ecx, 2
jz	short loc_6421BFBA
cmp	ecx, 3
jz	short loc_6421BFB0
cmp	ecx, 4
jz	short loc_6421BFA6
cmp	ecx, 5
jz	short loc_6421BF9C
cmp	ecx, 6
jz	short loc_6421BF92
mov	dword ptr [esi+4], 0
inc	edx
add	eax, 4
mov	dword ptr [eax], 0
inc	edx
add	eax, 4
mov	dword ptr [eax], 0
inc	edx
add	eax, 4
mov	dword ptr [eax], 0
inc	edx
add	eax, 4
mov	dword ptr [eax], 0
inc	edx
add	eax, 4
mov	dword ptr [eax], 0
inc	edx
add	eax, 4
mov	dword ptr [eax], 0
inc	edx
add	eax, 4
cmp	edi, edx
jle	short loc_6421C013
			
mov	dword ptr [eax], 0
mov	dword ptr [eax+4], 0
mov	dword ptr [eax+8], 0
mov	dword ptr [eax+0Ch], 0
mov	dword ptr [eax+10h], 0
mov	dword ptr [eax+14h], 0
mov	dword ptr [eax+18h], 0
mov	dword ptr [eax+1Ch], 0
add	edx, 8
add	eax, 20h
cmp	edi, edx
jg	short loc_6421BFD2
			
mov	edi, [a_0]
jmp	loc_6421BDC2
align 4
			
mov	res, [esp+3Ch+var_20]
add	esp, 2Ch
pop	a_0
pop	esi
pop	edi
pop	ebp
retn
neg	eax
jmp	loc_6421BEE1
xor	eax, eax
add	esp, 2Ch
pop	a_0
pop	esi
pop	edi
pop	ebp
retn
mov	eax, 0FFFFFFFEh
jmp	loc_6421BEF5
mov	edi, [a_0]
lea	eax, [edi+1]
jmp	loc_6421BDC5
align 10h
public _tma_mp_montgomery_reduce
push	ebp
push	edi
push	esi
push	ebx
sub	esp, 6Ch
mov	eax, [esp+7Ch+x]
mov	[esp+7Ch+var_30], eax
mov	edx, [esp+7Ch+n]
mov	[esp+7Ch+var_24], edx
mov	ecx, [esp+7Ch+rho]
mov	[esp+7Ch+var_2C], ecx
mov	eax, [edx]
lea	ebx, [eax+eax]
mov	[esp+7Ch+var_20], ebx
inc	ebx
mov	[esp+7Ch+var_34], ebx
cmp	ebx, 1FFh
jg	short loc_6421C099
cmp	eax, 0FFh
jle	loc_6421D1A0
mov	ebp, [esp+7Ch+var_34]
mov	edi, [esp+7Ch+var_30]
cmp	ebp, [edi+4]
jg	loc_6421D1EF
mov	edx, [esp+7Ch+var_34]
mov	edi, [esp+7Ch+var_30]
mov	[edi], edx
mov	ebp, [esp+7Ch+var_24]
mov	ebx, [ebp+0]
mov	[esp+7Ch+var_40], ebx
mov	[esp+7Ch+var_28], ebx
test	ebx, ebx
jle	loc_6421C3B0
mov	ebp, [esp+7Ch+var_24]
mov	ebx, [ebp+0Ch]
mov	[esp+7Ch+var_44], ebx
mov	eax, [edi+0Ch]
mov	esi, [esp+7Ch+var_40]
lea	ecx, [eax+esi*4]
mov	[esp+7Ch+var_38], ecx
mov	[esp+7Ch+var_3C], 0
mov	[esp+7Ch+var_64], eax
mov	tmpx, [esp+7Ch+var_64]
mov	ecx, [edx]
mov	edi, [esp+7Ch+var_2C]
imul	edi, ecx
and	edi, 0FFFFFFFh
mov	[esp+7Ch+var_48], edi
xor	edi, edi
mov	[esp+7Ch+var_60], 0
mov	esi, [esp+7Ch+var_40]
dec	esi
and	esi, 3
jz	loc_6421C299
xor	ebx, ebx
mov	eax, [esp+7Ch+var_48]
mov	ebp, [esp+7Ch+var_44]
mul	dword ptr [ebp+0]
add	ecx, eax
adc	ebx, edx
mov	u, ecx
mov	ebp, ebx
shrd	edi, ebp, 1Ch
shr	ebp, 1Ch
and	ecx, 0FFFFFFFh
mov	edx, [esp+7Ch+var_64]
mov	[edx], ecx
mov	[esp+7Ch+var_60], 1
mov	ecx, [edx+4]
cmp	esi, 1
jz	loc_6421C299
cmp	esi, 2
jz	short loc_6421C19C
mov	ebx, edi
xor	esi, esi
xor	u, u
add	ebx, ecx
adc	esi, edi
mov	eax, [esp+7Ch+var_48]
mov	ecx, [esp+7Ch+var_44]
mul	dword ptr [ecx+4]
add	ebx, eax
adc	esi, edx
mov	edi, ebx
mov	ebp, esi
shrd	edi, ebp, 1Ch
shr	ebp, 1Ch
and	ebx, 0FFFFFFFh
mov	eax, [esp+7Ch+var_64]
mov	[eax+4], ebx
mov	[esp+7Ch+var_60], 2
mov	ecx, [eax+8]
mov	ebx, edi
xor	esi, esi
xor	edx, edx
add	ebx, ecx
adc	esi, edx
mov	eax, [esp+7Ch+var_48]
mov	ecx, [esp+7Ch+var_60]
mov	u, [esp+7Ch+var_44]
mul	dword ptr [edi+ecx*4]
add	ebx, eax
adc	esi, edx
mov	edi, ebx
mov	ebp, esi
shrd	edi, ebp, 1Ch
shr	ebp, 1Ch
and	ebx, 0FFFFFFFh
mov	ebp, [esp+7Ch+var_64]
mov	[ebp+ecx*4+0], ebx
inc	ecx
mov	[esp+7Ch+var_60], ecx
mov	ecx, [ebp+ecx*4+0]
jmp	loc_6421C299
xor	ebx, ebx
mov	ebp, [ebp+esi*4+0]
xor	edx, edx
add	ecx, ebp
adc	ebx, edx
mov	eax, [esp+7Ch+var_48]
mov	edi, [esp+7Ch+var_44]
mul	dword ptr [edi+esi*4]
add	ecx, eax
adc	ebx, edx
mov	edi, ecx
mov	ebp, ebx
shrd	edi, ebp, 1Ch
shr	ebp, 1Ch
mov	ebp, edi
and	ecx, 0FFFFFFFh
mov	eax, [esp+7Ch+var_64]
mov	[eax+esi*4], ecx
mov	edi, [esp+7Ch+var_60]
add	iy, 2
mov	ebx, u
xor	esi, esi
mov	u, [eax+iy*4]
xor	eax, eax
add	ebx, ebp
adc	esi, eax
mov	eax, [esp+7Ch+var_48]
mov	ecx, [esp+7Ch+var_44]
mul	dword ptr [ecx+iy*4]
add	ebx, eax
adc	esi, edx
mov	eax, ebx
mov	edx, esi
shrd	eax, edx, 1Ch
shr	edx, 1Ch
mov	ecx, eax
and	ebx, 0FFFFFFFh
mov	edx, [esp+7Ch+var_64]
mov	[edx+iy*4], ebx
mov	esi, [esp+7Ch+var_60]
add	iy, 3
xor	ebx, ebx
mov	ebp, [edx+iy*4]
xor	eax, eax
add	u, ebp
adc	ebx, eax
mov	eax, [esp+7Ch+var_48]
mov	edi, [esp+7Ch+var_44]
mul	dword ptr [edi+iy*4]
add	ecx, eax
adc	ebx, edx
mov	edi, ecx
mov	ebp, ebx
shrd	edi, ebp, 1Ch
shr	ebp, 1Ch
and	ecx, 0FFFFFFFh
mov	ebp, [esp+7Ch+var_64]
mov	[ebp+iy*4+0], ecx
add	[esp+7Ch+var_60], 4
mov	edx, [esp+7Ch+var_60]
mov	ecx, [ebp+edx*4+0]
			
xor	iy, iy
xor	eax, eax
add	u, ecx
adc	esi, eax
mov	eax, [esp+7Ch+var_48]
mov	ecx, [esp+7Ch+var_60]
mov	ebx, [esp+7Ch+var_44]
mul	dword ptr [ebx+ecx*4]
add	edi, eax
adc	esi, edx
mov	ecx, edi
mov	ebx, esi
shrd	ecx, ebx, 1Ch
shr	ebx, 1Ch
and	edi, 0FFFFFFFh
mov	esi, [esp+7Ch+var_60]
mov	ebp, [esp+7Ch+var_64]
mov	[ebp+esi*4+0], edi
inc	esi
cmp	esi, [esp+7Ch+var_40]
jnz	loc_6421C1E0
mov	edx, [esp+7Ch+var_38]
test	ecx, ecx
jz	loc_6421C394
mov	eax, [esp+7Ch+var_64]
add	u, [tmpx]
mov	esi, ecx
and	esi, 0FFFFFFFh
mov	[tmpx],	esi
shr	ecx, 1Ch
jz	loc_6421C390
add	u, [tmpx+4]
mov	ebx, ecx
and	ebx, 0FFFFFFFh
mov	[tmpx+4], ebx
shr	ecx, 1Ch
jz	short loc_6421C390
add	u, [tmpx+8]
mov	edi, ecx
and	edi, 0FFFFFFFh
mov	[tmpx+8], edi
shr	ecx, 1Ch
jz	short loc_6421C390
add	u, [tmpx+0Ch]
mov	esi, ecx
and	esi, 0FFFFFFFh
mov	[tmpx+0Ch], esi
shr	ecx, 1Ch
jz	short loc_6421C390
add	u, [tmpx+10h]
mov	ebp, ecx
and	ebp, 0FFFFFFFh
mov	[tmpx+10h], ebp
shr	ecx, 1Ch
jz	short loc_6421C390
add	u, [tmpx+14h]
mov	ebx, ecx
and	ebx, 0FFFFFFFh
mov	[tmpx+14h], ebx
shr	ecx, 1Ch
jz	short loc_6421C390
add	u, [tmpx+18h]
mov	edi, ecx
and	edi, 0FFFFFFFh
mov	[tmpx+18h], edi
shr	ecx, 1Ch
jz	short loc_6421C390
add	u, [tmpx+1Ch]
mov	esi, ecx
and	esi, 0FFFFFFFh
mov	[tmpx+1Ch], esi
add	tmpx, 20h
shr	ecx, 1Ch
jnz	loc_6421C2EC
lea	esi, [esi+0]
			
mov	[esp+7Ch+var_64], eax
inc	[esp+7Ch+var_3C]
add	[esp+7Ch+var_64], 4
add	[esp+7Ch+var_38], 4
mov	u, [esp+7Ch+var_40]
cmp	[esp+7Ch+var_3C], ecx
jnz	loc_6421C0F0
mov	ebx, [esp+7Ch+var_34]
test	ebx, ebx
jle	loc_6421D168
mov	ebp, [esp+7Ch+var_30]
mov	ecx, [ebp+0Ch]
mov	tmpx, [esp+7Ch+var_34]
mov	edi, [ecx+edx*4-4]
test	edi, edi
jnz	loc_6421C534
mov	eax, [esp+7Ch+var_20]
lea	esi, [eax-1]
lea	edx, ds:0[esi*4]
mov	ebx, eax
and	ebx, 7
jz	loc_6421C49C
mov	[esp+7Ch+var_34], eax
test	eax, eax
jle	loc_6421D158
mov	edi, [ecx+edx]
mov	eax, esi
sub	edx, 4
test	edi, edi
jnz	loc_6421C520
cmp	ebx, 1
jz	loc_6421C49C
cmp	ebx, 2
jz	short loc_6421C489
cmp	ebx, 3
jz	short loc_6421C476
cmp	ebx, 4
jz	short loc_6421C463
cmp	ebx, 5
jz	short loc_6421C450
cmp	ebx, 6
jz	short loc_6421C43D
mov	[esp+7Ch+var_34], esi
mov	ebx, [ecx+edx]
dec	eax
sub	edx, 4
test	ebx, ebx
jnz	loc_6421C520
mov	[esp+7Ch+var_34], eax
mov	esi, [ecx+edx]
dec	eax
sub	edx, 4
test	esi, esi
jnz	loc_6421C520
mov	[esp+7Ch+var_34], eax
mov	ebp, [ecx+edx]
dec	eax
sub	edx, 4
test	ebp, ebp
jnz	loc_6421C520
mov	[esp+7Ch+var_34], eax
mov	edi, [ecx+edx]
dec	eax
sub	edx, 4
test	edi, edi
jnz	loc_6421C520
mov	[esp+7Ch+var_34], eax
mov	ebx, [ecx+edx]
dec	eax
sub	edx, 4
test	ebx, ebx
jnz	loc_6421C520
mov	[esp+7Ch+var_34], eax
mov	esi, [ecx+edx]
dec	eax
sub	edx, 4
test	esi, esi
jnz	loc_6421C520
			
mov	digs, eax
test	eax, eax
jle	loc_6421D154
lea	edi, [eax-1]
lea	esi, [edx-4]
mov	ebp, [ecx+edx]
test	ebp, ebp
jnz	short loc_6421C51C
mov	digs, edi
lea	ebp, [eax-2]
lea	edi, [edx-8]
mov	esi, [ecx+esi]
test	esi, esi
jnz	short loc_6421C51C
mov	digs, ebp
lea	ebp, [eax-3]
lea	esi, [edx-0Ch]
mov	edi, [ecx+edi]
test	edi, edi
jnz	short loc_6421C51C
mov	digs, ebp
lea	ebp, [eax-4]
lea	edi, [edx-10h]
mov	esi, [ecx+esi]
test	esi, esi
jnz	short loc_6421C51C
mov	digs, ebp
lea	esi, [eax-5]
lea	ebp, [edx-14h]
mov	edi, [ecx+edi]
test	edi, edi
jnz	short loc_6421C51C
mov	digs, esi
lea	edi, [eax-6]
lea	esi, [edx-18h]
mov	ebp, [ecx+ebp]
test	ebp, ebp
jnz	short loc_6421C51C
mov	digs, edi
lea	ebp, [eax-7]
lea	edi, [edx-1Ch]
mov	esi, [ecx+esi]
test	esi, esi
jnz	short loc_6421C51C
mov	digs, ebp
sub	eax, 8
sub	edx, 20h
mov	ebp, [ecx+edi]
test	ebp, ebp
jz	short loc_6421C49C
			
mov	[esp+7Ch+var_34], digs
			
mov	edx, [esp+7Ch+var_34]
mov	eax, [esp+7Ch+var_30]
mov	[eax], edx
mov	edi, [esp+7Ch+var_24]
mov	digs, [edi]
mov	[esp+7Ch+var_28], ebx
			
mov	esi, [esp+7Ch+var_28]
test	esi, esi
jle	loc_6421C641
mov	ecx, [esp+7Ch+var_28]
cmp	[esp+7Ch+var_34], ecx
jg	loc_6421CD48
mov	ebp, [esp+7Ch+var_30]
mov	dword ptr [ebp+8], 0
mov	dword ptr [ebp+0], 0
mov	tmpx, [ebp+0Ch]
mov	digs, [ebp+4]
test	ebx, ebx
jle	loc_6421D1C0
lea	ecx, [ebx-1]
and	ecx, 7
mov	dword ptr [edx], 0
mov	eax, 1
cmp	eax, ebx
jz	loc_6421C62F
test	ecx, ecx
jz	short loc_6421C5E9
cmp	ecx, 1
jz	short loc_6421C5DD
cmp	ecx, 2
jz	short loc_6421C5D5
cmp	ecx, 3
jz	short loc_6421C5CD
cmp	ecx, 4
jz	short loc_6421C5C5
cmp	ecx, 5
jz	short loc_6421C5BD
cmp	ecx, 6
jz	short loc_6421C5B5
mov	dword ptr [edx+eax*4], 0
mov	eax, 2
mov	dword ptr [edx+eax*4], 0
inc	eax
mov	dword ptr [edx+eax*4], 0
inc	eax
mov	dword ptr [edx+eax*4], 0
inc	eax
mov	dword ptr [edx+eax*4], 0
inc	eax
mov	dword ptr [edx+eax*4], 0
inc	eax
mov	dword ptr [edx+eax*4], 0
inc	eax
cmp	eax, ebx
jz	short loc_6421C62F
			
mov	dword ptr [edx+eax*4], 0
mov	dword ptr [edx+eax*4+4], 0
mov	dword ptr [edx+eax*4+8], 0
mov	dword ptr [edx+eax*4+0Ch], 0
mov	dword ptr [edx+eax*4+10h], 0
mov	dword ptr [edx+eax*4+14h], 0
mov	dword ptr [edx+eax*4+18h], 0
mov	dword ptr [edx+eax*4+1Ch], 0
add	eax, 8
cmp	eax, ebx
jnz	short loc_6421C5E9
			
mov	edx, [esp+7Ch+var_24]
mov	edi, [edx]
mov	[esp+7Ch+var_28], edi
mov	[esp+7Ch+var_34], 0
			
mov	ecx, [esp+7Ch+var_28]
cmp	[esp+7Ch+var_34], ecx
jle	loc_6421CF22
mov	esi, [esp+7Ch+var_30]
mov	ecx, [esi+0Ch]
			
mov	eax, [esp+7Ch+var_34]
mov	digs, [esp+7Ch+var_30]
cmp	eax, [ebx+4]
jg	loc_6421D249
mov	[esp+7Ch+var_44], eax
mov	ebx, [esp+7Ch+var_34]
mov	ebp, [esp+7Ch+var_30]
mov	[ebp+0], ebx
mov	edi, [esp+7Ch+var_24]
mov	ebx, [edi+0Ch]
mov	eax, [esp+7Ch+var_28]
test	eax, eax
jle	loc_6421D1AC
mov	esi, [esp+7Ch+var_28]
dec	esi
and	esi, 7
mov	eax, [ecx]
sub	eax, [ebx]
mov	tmpx, eax
shr	edx, 1Fh
and	eax, 0FFFFFFFh
mov	[ecx], eax
mov	eax, 1
cmp	eax, [esp+7Ch+var_28]
jz	loc_6421C85F
test	esi, esi
jz	loc_6421C78D
cmp	esi, 1
jz	loc_6421C76C
cmp	esi, 2
jz	loc_6421C755
cmp	esi, 3
jz	short loc_6421C73E
cmp	esi, 4
jz	short loc_6421C727
cmp	esi, 5
jz	short loc_6421C710
cmp	esi, 6
jz	short loc_6421C6F9
mov	edi, [ecx+4]
sub	edi, [ebx+4]
sub	edi, edx
mov	edx, edi
shr	edx, 1Fh
and	edi, 0FFFFFFFh
mov	[ecx+eax*4], edi
mov	eax, 2
mov	esi, [ecx+eax*4]
sub	esi, [ebx+eax*4]
sub	esi, edx
mov	edx, esi
shr	edx, 1Fh
and	esi, 0FFFFFFFh
mov	[ecx+eax*4], esi
inc	eax
mov	ebp, [ecx+eax*4]
sub	ebp, [ebx+eax*4]
sub	ebp, edx
mov	edx, ebp
shr	edx, 1Fh
and	ebp, 0FFFFFFFh
mov	[ecx+eax*4], ebp
inc	eax
mov	edi, [ecx+eax*4]
sub	edi, [ebx+eax*4]
sub	edi, edx
mov	edx, edi
shr	edx, 1Fh
and	edi, 0FFFFFFFh
mov	[ecx+eax*4], edi
inc	eax
mov	esi, [ecx+eax*4]
sub	esi, [ebx+eax*4]
sub	esi, edx
mov	edx, esi
shr	edx, 1Fh
and	esi, 0FFFFFFFh
mov	[ecx+eax*4], esi
inc	eax
mov	ebp, [ecx+eax*4]
sub	ebp, [ebx+eax*4]
sub	ebp, edx
mov	edx, ebp
shr	edx, 1Fh
and	ebp, 0FFFFFFFh
mov	[ecx+eax*4], ebp
inc	eax
mov	edi, [ecx+eax*4]
sub	edi, [ebx+eax*4]
sub	edi, edx
mov	edx, edi
shr	edx, 1Fh
and	edi, 0FFFFFFFh
mov	[ecx+eax*4], edi
inc	eax
cmp	eax, [esp+7Ch+var_28]
jz	loc_6421C85F
			
mov	edi, [ecx+eax*4]
sub	edi, [ebx+eax*4]
sub	edi, edx
mov	ebp, edi
shr	ebp, 1Fh
and	edi, 0FFFFFFFh
mov	[ecx+eax*4], edi
lea	esi, [eax+1]
mov	edx, [ecx+esi*4]
sub	edx, [ebx+esi*4]
sub	edx, ebp
mov	edi, edx
shr	edi, 1Fh
and	edx, 0FFFFFFFh
mov	[ecx+esi*4], edx
lea	ebp, [eax+2]
mov	edx, [ecx+ebp*4]
sub	edx, [ebx+ebp*4]
sub	edx, edi
mov	edi, edx
shr	edi, 1Fh
and	edx, 0FFFFFFFh
mov	[ecx+ebp*4], edx
lea	esi, [eax+3]
mov	ebp, [ecx+esi*4]
sub	ebp, [ebx+esi*4]
sub	ebp, edi
mov	edi, ebp
shr	edi, 1Fh
and	ebp, 0FFFFFFFh
mov	[ecx+esi*4], ebp
lea	edx, [eax+4]
mov	ebp, [ecx+edx*4]
sub	ebp, [ebx+edx*4]
sub	ebp, edi
mov	edi, ebp
shr	edi, 1Fh
and	ebp, 0FFFFFFFh
mov	[ecx+edx*4], ebp
lea	esi, [eax+5]
mov	edx, [ecx+esi*4]
sub	edx, [ebx+esi*4]
sub	edx, edi
mov	ebp, edx
shr	ebp, 1Fh
and	edx, 0FFFFFFFh
mov	[ecx+esi*4], edx
lea	esi, [eax+6]
mov	edx, [ecx+esi*4]
sub	edx, [ebx+esi*4]
sub	edx, ebp
mov	edi, edx
shr	edi, 1Fh
and	edx, 0FFFFFFFh
mov	[ecx+esi*4], edx
lea	ebp, [eax+7]
mov	esi, [ecx+ebp*4]
sub	esi, [ebx+ebp*4]
sub	esi, edi
mov	edx, esi
shr	edx, 1Fh
and	esi, 0FFFFFFFh
mov	[ecx+ebp*4], esi
add	eax, 8
cmp	eax, [esp+7Ch+var_28]
jnz	loc_6421C78D
			
lea	ebx, [ecx+eax*4]
mov	edi, ebx
cmp	[esp+7Ch+var_34], eax
jle	loc_6421CAD5
mov	ebp, eax
not	ebp
add	ebp, [esp+7Ch+var_34]
and	ebp, 7
mov	esi, [edi]
sub	esi, edx
mov	edx, esi
shr	edx, 1Fh
mov	[esp+7Ch+var_40], edx
and	esi, 0FFFFFFFh
mov	[ebx], esi
lea	esi, [eax+1]
mov	edx, 4
cmp	[esp+7Ch+var_34], esi
jle	loc_6421CACC
test	ebp, ebp
jz	loc_6421CA03
cmp	ebp, 1
jz	loc_6421C9CE
cmp	ebp, 2
jz	loc_6421C9A3
cmp	ebp, 3
jz	loc_6421C978
cmp	ebp, 4
jz	loc_6421C94D
cmp	ebp, 5
jz	short loc_6421C922
cmp	ebp, 6
jz	short loc_6421C8F7
mov	edx, [edi+4]
sub	edx, [esp+7Ch+var_40]
mov	esi, edx
shr	esi, 1Fh
mov	[esp+7Ch+var_40], esi
and	edx, 0FFFFFFFh
mov	[ebx+4], edx
lea	esi, [eax+2]
mov	edx, 8
mov	ebp, [edi+edx]
mov	[esp+7Ch+var_48], ebp
mov	ebp, [esp+7Ch+var_40]
sub	[esp+7Ch+var_48], ebp
mov	ebp, [esp+7Ch+var_48]
shr	ebp, 1Fh
mov	[esp+7Ch+var_40], ebp
mov	ebp, [esp+7Ch+var_48]
and	ebp, 0FFFFFFFh
mov	[ebx+edx], ebp
inc	esi
add	edx, 4
mov	ebp, [edi+edx]
mov	[esp+7Ch+var_48], ebp
mov	ebp, [esp+7Ch+var_40]
sub	[esp+7Ch+var_48], ebp
mov	ebp, [esp+7Ch+var_48]
shr	ebp, 1Fh
mov	[esp+7Ch+var_40], ebp
mov	ebp, [esp+7Ch+var_48]
and	ebp, 0FFFFFFFh
mov	[ebx+edx], ebp
inc	esi
add	edx, 4
mov	ebp, [edi+edx]
mov	[esp+7Ch+var_48], ebp
mov	ebp, [esp+7Ch+var_40]
sub	[esp+7Ch+var_48], ebp
mov	ebp, [esp+7Ch+var_48]
shr	ebp, 1Fh
mov	[esp+7Ch+var_40], ebp
mov	ebp, [esp+7Ch+var_48]
and	ebp, 0FFFFFFFh
mov	[ebx+edx], ebp
inc	esi
add	edx, 4
mov	ebp, [edi+edx]
mov	[esp+7Ch+var_48], ebp
mov	ebp, [esp+7Ch+var_40]
sub	[esp+7Ch+var_48], ebp
mov	ebp, [esp+7Ch+var_48]
shr	ebp, 1Fh
mov	[esp+7Ch+var_40], ebp
mov	ebp, [esp+7Ch+var_48]
and	ebp, 0FFFFFFFh
mov	[ebx+edx], ebp
inc	esi
add	edx, 4
mov	ebp, [edi+edx]
mov	[esp+7Ch+var_48], ebp
mov	ebp, [esp+7Ch+var_40]
sub	[esp+7Ch+var_48], ebp
mov	ebp, [esp+7Ch+var_48]
shr	ebp, 1Fh
mov	[esp+7Ch+var_40], ebp
mov	ebp, [esp+7Ch+var_48]
and	ebp, 0FFFFFFFh
mov	[ebx+edx], ebp
inc	esi
add	edx, 4
mov	ebp, [edi+edx]
mov	[esp+7Ch+var_48], ebp
mov	ebp, [esp+7Ch+var_40]
sub	[esp+7Ch+var_48], ebp
mov	ebp, [esp+7Ch+var_48]
shr	ebp, 1Fh
mov	[esp+7Ch+var_40], ebp
mov	ebp, [esp+7Ch+var_48]
and	ebp, 0FFFFFFFh
mov	[ebx+edx], ebp
inc	esi
add	edx, 4
cmp	[esp+7Ch+var_34], esi
jle	loc_6421CACC
mov	[esp+7Ch+var_48], eax
mov	[esp+7Ch+var_54], ecx
mov	ebp, [esp+7Ch+var_40]
mov	eax, [edi+edx]
sub	eax, ebp
mov	ebp, eax
shr	ebp, 1Fh
and	eax, 0FFFFFFFh
mov	[ebx+edx], eax
lea	ecx, [edx+4]
mov	eax, [edi+ecx]
sub	eax, ebp
mov	ebp, eax
shr	ebp, 1Fh
and	eax, 0FFFFFFFh
mov	[ebx+ecx], eax
lea	ecx, [edx+8]
mov	eax, [edi+ecx]
sub	eax, ebp
mov	ebp, eax
shr	ebp, 1Fh
and	eax, 0FFFFFFFh
mov	[ebx+ecx], eax
lea	ecx, [edx+0Ch]
mov	eax, [edi+ecx]
sub	eax, ebp
mov	ebp, eax
shr	ebp, 1Fh
and	eax, 0FFFFFFFh
mov	[ebx+ecx], eax
lea	ecx, [edx+10h]
mov	eax, [edi+ecx]
sub	eax, ebp
mov	ebp, eax
shr	ebp, 1Fh
and	eax, 0FFFFFFFh
mov	[ebx+ecx], eax
lea	ecx, [edx+14h]
mov	eax, [edi+ecx]
sub	eax, ebp
mov	ebp, eax
shr	ebp, 1Fh
and	eax, 0FFFFFFFh
mov	[ebx+ecx], eax
lea	ecx, [edx+18h]
mov	eax, [edi+ecx]
sub	eax, ebp
mov	ebp, eax
shr	ebp, 1Fh
and	eax, 0FFFFFFFh
mov	[ebx+ecx], eax
lea	ecx, [edx+1Ch]
mov	eax, [edi+ecx]
sub	eax, ebp
mov	ebp, eax
shr	ebp, 1Fh
and	eax, 0FFFFFFFh
mov	[ebx+ecx], eax
add	esi, 8
add	edx, 20h
cmp	[esp+7Ch+var_34], esi
jg	loc_6421CA0F
mov	eax, [esp+7Ch+var_48]
mov	ecx, [esp+7Ch+var_54]
			
mov	esi, [esp+7Ch+var_34]
sub	esi, eax
lea	ebx, [ebx+esi*4]
mov	edi, [esp+7Ch+var_34]
cmp	[esp+7Ch+var_44], edi
jle	loc_6421CBBB
mov	esi, edi
not	esi
add	esi, [esp+7Ch+var_44]
and	esi, 7
mov	dword ptr [ebx], 0
lea	eax, [ebx+4]
mov	edx, edi
inc	digs
cmp	[esp+7Ch+var_44], digs
jle	loc_6421CBBB
test	esi, esi
jz	short loc_6421CB78
cmp	esi, 1
jz	short loc_6421CB68
cmp	esi, 2
jz	short loc_6421CB5E
cmp	esi, 3
jz	short loc_6421CB54
cmp	esi, 4
jz	short loc_6421CB4A
cmp	esi, 5
jz	short loc_6421CB40
cmp	esi, 6
jz	short loc_6421CB36
mov	dword ptr [eax], 0
lea	eax, [ebx+8]
mov	digs, [esp+7Ch+var_34]
add	digs, 2
mov	dword ptr [eax], 0
add	eax, 4
inc	digs
mov	dword ptr [eax], 0
add	eax, 4
inc	digs
mov	dword ptr [eax], 0
add	eax, 4
inc	digs
mov	dword ptr [eax], 0
add	eax, 4
inc	digs
mov	dword ptr [eax], 0
add	eax, 4
inc	digs
mov	dword ptr [eax], 0
add	eax, 4
inc	digs
cmp	[esp+7Ch+var_44], digs
jle	short loc_6421CBBB
			
mov	dword ptr [eax], 0
mov	dword ptr [eax+4], 0
mov	dword ptr [eax+8], 0
mov	dword ptr [eax+0Ch], 0
mov	dword ptr [eax+10h], 0
mov	dword ptr [eax+14h], 0
mov	dword ptr [eax+18h], 0
mov	dword ptr [eax+1Ch], 0
add	eax, 20h
add	digs, 8
cmp	[esp+7Ch+var_44], digs
jg	short loc_6421CB78
			
mov	ebx, [esp+7Ch+var_34]
test	ebx, ebx
jle	loc_6421CD24
mov	eax, [esp+7Ch+var_34]
dec	digs
mov	edx, [ecx+digs*4]
test	edx, edx
jnz	loc_6421D14A
mov	ebp, [esp+7Ch+var_34]
lea	edx, ds:0FFFFFFF8h[ebp*4]
mov	ebx, digs
and	ebx, 7
jz	loc_6421CC82
mov	[esp+7Ch+var_34], digs
test	digs, digs
jle	loc_6421CD1E
mov	ebp, [ecx+edx]
sub	edx, 4
test	ebp, ebp
jnz	loc_6421D190
lea	eax, [eax-1]
cmp	ebx, 1
jz	short loc_6421CC82
cmp	ebx, 2
jz	short loc_6421CC73
cmp	ebx, 3
jz	short loc_6421CC64
cmp	ebx, 4
jz	short loc_6421CC55
cmp	ebx, 5
jz	short loc_6421CC46
cmp	ebx, 6
jz	short loc_6421CC37
mov	esi, [ecx+edx]
sub	edx, 4
test	esi, esi
jnz	loc_6421D190
dec	digs
mov	ebx, [ecx+edx]
sub	edx, 4
test	ebx, ebx
jnz	loc_6421D190
dec	digs
mov	ebp, [ecx+edx]
sub	edx, 4
test	ebp, ebp
jnz	loc_6421D190
dec	digs
mov	edi, [ecx+edx]
sub	edx, 4
test	edi, edi
jnz	loc_6421D190
dec	digs
mov	esi, [ecx+edx]
sub	edx, 4
test	esi, esi
jnz	loc_6421D190
dec	digs
mov	ebx, [ecx+edx]
sub	edx, 4
test	ebx, ebx
jnz	loc_6421D190
dec	digs
			
test	digs, digs
jle	loc_6421CD1A
lea	esi, [edx-4]
mov	edi, [ecx+edx]
test	edi, edi
jnz	loc_6421D190
lea	ebx, [digs-1]
mov	digs, ebx
lea	edi, [edx-8]
mov	esi, [ecx+esi]
test	esi, esi
jnz	loc_6421D190
dec	digs
lea	esi, [edx-0Ch]
mov	ebp, [ecx+edi]
test	ebp, ebp
jnz	loc_6421D190
lea	digs, [ebx-2]
lea	edi, [edx-10h]
mov	ebp, [ecx+esi]
test	ebp, ebp
jnz	loc_6421D190
lea	digs, [ebx-3]
lea	esi, [edx-14h]
mov	edi, [ecx+edi]
test	edi, edi
jnz	loc_6421D190
lea	digs, [ebx-4]
lea	edi, [edx-18h]
mov	esi, [ecx+esi]
test	esi, esi
jnz	loc_6421D190
lea	digs, [ebx-5]
lea	esi, [edx-1Ch]
mov	ebp, [ecx+edi]
test	ebp, ebp
jnz	loc_6421D190
lea	digs, [ebx-6]
sub	edx, 20h
mov	edi, [ecx+esi]
test	edi, edi
jnz	loc_6421D190
lea	digs, [ebx-7]
test	digs, digs
jg	loc_6421CC8A
mov	[esp+7Ch+var_34], digs
mov	ecx, [esp+7Ch+var_30]
mov	[ecx], digs
mov	eax, [esp+7Ch+var_34]
test	eax, eax
jnz	loc_6421D14A
mov	digs, [esp+7Ch+var_30]
mov	dword ptr [edx+8], 0
xor	eax, eax
add	esp, 6Ch
pop	ebx
pop	esi
pop	edi
pop	ebp
retn
align 4
mov	ecx, [esp+7Ch+var_30]
mov	esi, [ecx+0Ch]
mov	tmpx, esi
mov	ecx, [esp+7Ch+var_34]
sub	digs, [esp+7Ch+var_28]
test	digs, digs
jle	loc_6421D1B9
mov	esi, [esp+7Ch+var_28]
lea	ebx, [edx+esi*4]
lea	esi, [digs-1]
and	esi, 7
mov	ebp, [ebx]
mov	[edx], ebp
mov	eax, 1
cmp	eax, digs
jz	loc_6421CE26
test	esi, esi
jz	short loc_6421CDDA
cmp	esi, 1
jz	short loc_6421CDCF
cmp	esi, 2
jz	short loc_6421CDC8
cmp	esi, 3
jz	short loc_6421CDC1
cmp	esi, 4
jz	short loc_6421CDBA
cmp	esi, 5
jz	short loc_6421CDB3
cmp	esi, 6
jz	short loc_6421CDAC
mov	ebp, [ebx+4]
mov	[edx+eax*4], ebp
mov	eax, 2
mov	edi, [ebx+eax*4]
mov	[edx+eax*4], edi
inc	eax
mov	esi, [ebx+eax*4]
mov	[edx+eax*4], esi
inc	eax
mov	ebp, [ebx+eax*4]
mov	[edx+eax*4], ebp
inc	eax
mov	edi, [ebx+eax*4]
mov	[edx+eax*4], edi
inc	eax
mov	esi, [ebx+eax*4]
mov	[edx+eax*4], esi
inc	eax
mov	ebp, [ebx+eax*4]
mov	[edx+eax*4], ebp
inc	eax
cmp	eax, digs
jz	short loc_6421CE26
			
mov	ebp, [ebx+eax*4]
mov	[edx+eax*4], ebp
lea	esi, [eax+1]
mov	edi, [ebx+esi*4]
mov	[edx+esi*4], edi
lea	esi, [eax+2]
mov	ebp, [ebx+esi*4]
mov	[edx+esi*4], ebp
lea	ebp, [eax+3]
mov	edi, [ebx+ebp*4]
mov	[edx+ebp*4], edi
lea	ebp, [eax+4]
mov	esi, [ebx+ebp*4]
mov	[edx+ebp*4], esi
lea	esi, [eax+5]
mov	edi, [ebx+esi*4]
mov	[edx+esi*4], edi
lea	esi, [eax+6]
mov	ebp, [ebx+esi*4]
mov	[edx+esi*4], ebp
lea	ebp, [eax+7]
mov	edi, [ebx+ebp*4]
mov	[edx+ebp*4], edi
add	eax, 8
cmp	eax, digs
jnz	short loc_6421CDDA
			
lea	esi, [edx+digs*4]
cmp	digs, [esp+7Ch+var_34]
jge	loc_6421CF09
mov	edi, digs
mov	ebx, digs
not	ebx
add	ebx, [esp+7Ch+var_34]
and	ebx, 7
mov	dword ptr [esi], 0
lea	eax, [esi+4]
lea	edx, [digs+1]
cmp	digs, [esp+7Ch+var_34]
jge	loc_6421CF09
test	ebx, ebx
jz	short loc_6421CEC6
cmp	ebx, 1
jz	short loc_6421CEB6
cmp	ebx, 2
jz	short loc_6421CEAC
cmp	ebx, 3
jz	short loc_6421CEA2
cmp	ebx, 4
jz	short loc_6421CE98
cmp	ebx, 5
jz	short loc_6421CE8E
cmp	ebx, 6
jz	short loc_6421CE84
mov	dword ptr [eax], 0
lea	eax, [esi+8]
lea	digs, [edi+2]
mov	dword ptr [eax], 0
add	eax, 4
inc	digs
mov	dword ptr [eax], 0
add	eax, 4
inc	digs
mov	dword ptr [eax], 0
add	eax, 4
inc	digs
mov	dword ptr [eax], 0
add	eax, 4
inc	digs
mov	dword ptr [eax], 0
add	eax, 4
inc	digs
mov	dword ptr [eax], 0
add	eax, 4
inc	digs
cmp	digs, [esp+7Ch+var_34]
jge	short loc_6421CF09
			
mov	dword ptr [eax], 0
mov	dword ptr [eax+4], 0
mov	dword ptr [eax+8], 0
mov	dword ptr [eax+0Ch], 0
mov	dword ptr [eax+10h], 0
mov	dword ptr [eax+14h], 0
mov	dword ptr [eax+18h], 0
mov	dword ptr [eax+1Ch], 0
add	eax, 20h
add	digs, 8
cmp	digs, [esp+7Ch+var_34]
jl	short loc_6421CEC6
			
mov	digs, [esp+7Ch+var_30]
mov	[edx], digs
mov	eax, [esp+7Ch+var_24]
mov	ebx, [eax]
mov	[esp+7Ch+var_28], ebx
mov	[esp+7Ch+var_34], digs
jmp	loc_6421C641
jl	loc_6421D14A
mov	ebp, [esp+7Ch+var_30]
mov	ecx, [ebp+0Ch]
mov	edi, [esp+7Ch+var_24]
mov	eax, [edi+0Ch]
cmp	[esp+7Ch+var_34], 0
jle	loc_6421C656
mov	edi, [esp+7Ch+var_34]
dec	edi
lea	tmpx, ds:0[edi*4]
lea	digs, [ecx+edx]
lea	edx, [eax+edx]
mov	eax, [edx]
cmp	eax, [ebx]
jb	loc_6421C656
ja	loc_6421D14A
xor	eax, eax
xor	esi, esi
and	edi, 7
jz	loc_6421D05A
mov	esi, 1
mov	eax, [edx-4]
cmp	[ebx-4], eax
ja	loc_6421C656
mov	eax, 0FFFFFFFCh
jb	loc_6421D14A
cmp	edi, 1
jz	loc_6421D05A
cmp	edi, 2
jz	loc_6421D03E
cmp	edi, 3
jz	short loc_6421D022
cmp	edi, 4
jz	short loc_6421D006
cmp	edi, 5
jz	short loc_6421CFEA
cmp	edi, 6
jz	short loc_6421CFCE
inc	esi
mov	edi, [ebx+eax-4]
mov	ebp, [edx+eax-4]
cmp	edi, ebp
ja	loc_6421C656
sub	eax, 4
cmp	edi, ebp
jb	loc_6421D14A
inc	esi
mov	edi, [ebx+eax-4]
mov	ebp, [edx+eax-4]
cmp	edi, ebp
ja	loc_6421C656
sub	eax, 4
cmp	edi, ebp
jb	loc_6421D14A
inc	esi
mov	edi, [ebx+eax-4]
mov	ebp, [edx+eax-4]
cmp	edi, ebp
ja	loc_6421C656
sub	eax, 4
cmp	edi, ebp
jb	loc_6421D14A
inc	esi
mov	edi, [ebx+eax-4]
mov	ebp, [edx+eax-4]
cmp	edi, ebp
ja	loc_6421C656
sub	eax, 4
cmp	edi, ebp
jb	loc_6421D14A
inc	esi
mov	edi, [ebx+eax-4]
mov	ebp, [edx+eax-4]
cmp	edi, ebp
ja	loc_6421C656
sub	eax, 4
cmp	edi, ebp
jb	loc_6421D14A
inc	esi
mov	edi, [ebx+eax-4]
mov	ebp, [edx+eax-4]
cmp	edi, ebp
ja	loc_6421C656
sub	eax, 4
cmp	edi, ebp
jb	loc_6421D14A
			
inc	esi
mov	[esp+7Ch+var_48], esi
cmp	[esp+7Ch+var_34], esi
jle	loc_6421C656
mov	ebp, [ebx+eax-4]
mov	esi, [edx+eax-4]
cmp	ebp, esi
ja	loc_6421C656
lea	edi, [eax-4]
cmp	ebp, esi
jb	loc_6421D14A
mov	ebp, [ebx+edi-4]
mov	esi, [edx+edi-4]
mov	[esp+7Ch+var_44], esi
cmp	ebp, esi
ja	loc_6421C656
lea	esi, [eax-8]
cmp	ebp, [esp+7Ch+var_44]
jb	loc_6421D14A
mov	ebp, [ebx+esi-4]
mov	esi, [edx+esi-4]
mov	[esp+7Ch+var_44], esi
cmp	ebp, esi
ja	loc_6421C656
lea	esi, [eax-0Ch]
cmp	ebp, [esp+7Ch+var_44]
jb	loc_6421D14A
mov	ebp, [ebx+esi-4]
mov	esi, [edx+esi-4]
cmp	ebp, esi
ja	loc_6421C656
sub	eax, 10h
cmp	ebp, esi
jb	short loc_6421D14A
mov	esi, [ebx+eax-4]
mov	ebp, [edx+eax-4]
cmp	esi, ebp
ja	loc_6421C656
lea	eax, [edi-10h]
cmp	esi, ebp
jb	short loc_6421D14A
mov	ebp, [ebx+eax-4]
mov	esi, [edx+eax-4]
cmp	ebp, esi
ja	loc_6421C656
lea	eax, [edi-14h]
cmp	ebp, esi
jb	short loc_6421D14A
mov	ebp, [ebx+eax-4]
mov	esi, [edx+eax-4]
cmp	ebp, esi
ja	loc_6421C656
lea	eax, [edi-18h]
cmp	ebp, esi
jb	short loc_6421D14A
mov	esi, [esp+7Ch+var_48]
add	esi, 7
mov	ebp, [ebx+eax-4]
mov	eax, [edx+eax-4]
mov	[esp+7Ch+var_48], eax
cmp	ebp, eax
ja	loc_6421C656
lea	eax, [edi-1Ch]
cmp	ebp, [esp+7Ch+var_48]
jnb	loc_6421D05A
			
xor	eax, eax
			
add	esp, 6Ch
pop	digs
pop	esi
pop	edi
pop	ebp
retn
mov	[esp+7Ch+var_34], eax
mov	ecx, [esp+7Ch+var_30]
mov	[ecx], digs
mov	esi, [esp+7Ch+var_24]
mov	eax, [esi]
mov	[esp+7Ch+var_40], eax
mov	esi, [esp+7Ch+var_34]
test	esi, esi
jnz	short loc_6421D1D7
mov	edi, [esp+7Ch+var_30]
mov	dword ptr [edi+8], 0
mov	tmpx, [esp+7Ch+var_40]
mov	[esp+7Ch+var_28], edx
mov	eax, [edi]
mov	[esp+7Ch+var_34], eax
jmp	loc_6421C534
align 10h
			
mov	ebx, [esp+7Ch+var_30]
mov	[ebx], digs
xor	digs, digs
add	esp, 6Ch
pop	ebx
pop	esi
pop	edi
pop	ebp
retn
add	esp, 6Ch
pop	ebx
pop	esi
pop	edi
pop	ebp
jmp	_fast_tma_mp_montgomery_reduce
mov	ebx, ecx
mov	edi, ecx
xor	eax, eax
xor	tmpx, tmpx
jmp	loc_6421C864
xor	edi, edi
jmp	loc_6421CE35
mov	eax, [esp+7Ch+var_24]
mov	ebx, [eax]
mov	[esp+7Ch+var_28], ebx
mov	[esp+7Ch+var_34], 0
jmp	loc_6421C641
mov	digs, [esp+7Ch+var_40]
mov	[esp+7Ch+var_28], ebx
mov	ebp, [esp+7Ch+var_30]
mov	ecx, [ebp+0]
mov	[esp+7Ch+var_34], ecx
jmp	loc_6421C534
mov	ebx, ebp
add	ebx, 40h
mov	esi, 20h
mov	eax, ebp
cdq
idiv	esi
sub	ebx, edx
lea	ebp, ds:0[ebx*4]
mov	[esp+7Ch+var_78], ebp 
mov	esi, [edi+0Ch]
mov	[esp+7Ch+var_7C], esi 
call	_realloc
mov	edx, eax
mov	eax, 0FFFFFFFEh
test	edx, edx
jz	loc_6421D14C
mov	edi, [esp+7Ch+var_30]
mov	[edi+0Ch], edx
mov	ecx, [edi+4]
mov	[edi+4], ebx
lea	res, [edx+ecx*4]
cmp	ebx, ecx
jle	loc_6421C0AA
mov	dword ptr [eax], 0
inc	ecx
add	eax, 4
jmp	short loc_6421D235
mov	ebx, [esp+7Ch+var_34]
add	ebx, 40h
mov	ebp, 20h
mov	eax, [esp+7Ch+var_34]
cdq
idiv	ebp
sub	ebx, edx
lea	esi, ds:0[ebx*4]
mov	[esp+7Ch+var_78], esi 
mov	[esp+7Ch+var_7C], ecx 
call	_realloc
mov	edx, eax
mov	eax, 0FFFFFFFEh
test	edx, edx
jz	loc_6421D14C
mov	ecx, [esp+7Ch+var_30]
mov	[ecx+0Ch], edx
mov	res, [ecx+4]
mov	[ecx+4], ebx
lea	edx, [edx+eax*4]
cmp	ebx, eax
jle	short loc_6421D2A0
mov	dword ptr [edx], 0
inc	eax
add	edx, 4
jmp	short loc_6421D290
mov	edx, [esp+7Ch+var_30]
mov	esi, [edx]
mov	[esp+7Ch+var_44], esi
mov	ebx, [esp+7Ch+var_30]
mov	ecx, [ebx+0Ch]
jmp	loc_6421C66B
align 4
public _tma_mp_sqrt
			
push	ebp
push	edi
push	esi
push	ebx
sub	esp, 5Ch
mov	esi, [esp+6Ch+arg]
mov	ebp, [esp+6Ch+ret]
cmp	dword ptr [esi+8], 1
jz	loc_6421D480
mov	ecx, [arg_0]
test	ecx, ecx
jnz	loc_6421D3C4
mov	dword ptr [ret_0+8], 0
mov	dword ptr [ret_0+0], 0
mov	edx, [ret_0+0Ch]
mov	ebx, [ret_0+4]
test	ebx, ebx
jle	loc_6421D3B8
lea	ecx, [ebx-1]
and	ecx, 7
mov	dword ptr [edx], 0
mov	eax, 1
cmp	eax, ebx
jge	loc_6421D3B8
test	ecx, ecx
jz	short loc_6421D372
cmp	ecx, 1
jz	short loc_6421D366
cmp	ecx, 2
jz	short loc_6421D35E
cmp	ecx, 3
jz	short loc_6421D356
cmp	ecx, 4
jz	short loc_6421D34E
cmp	ecx, 5
jz	short loc_6421D346
cmp	ecx, 6
jz	short loc_6421D33E
mov	dword ptr [edx+eax*4], 0
mov	eax, 2
mov	dword ptr [edx+eax*4], 0
inc	eax
mov	dword ptr [edx+eax*4], 0
inc	eax
mov	dword ptr [edx+eax*4], 0
inc	eax
mov	dword ptr [edx+eax*4], 0
inc	eax
mov	dword ptr [edx+eax*4], 0
inc	eax
mov	dword ptr [edx+eax*4], 0
inc	eax
cmp	eax, ebx
jge	short loc_6421D3B8
			
mov	dword ptr [edx+eax*4], 0
mov	dword ptr [edx+eax*4+4], 0
mov	dword ptr [edx+eax*4+8], 0
mov	dword ptr [edx+eax*4+0Ch], 0
mov	dword ptr [edx+eax*4+10h], 0
mov	dword ptr [edx+eax*4+14h], 0
mov	dword ptr [edx+eax*4+18h], 0
mov	dword ptr [edx+eax*4+1Ch], 0
add	eax, 8
cmp	eax, ebx
jl	short loc_6421D372
			
xor	ebx, ebx
			
mov	eax, res
add	esp, 5Ch
pop	res
pop	arg_0
pop	edi
pop	ret_0
retn
mov	[esp+6Ch+var_6C], 80h
call	_malloc
test	eax, eax
jz	loc_6421D4E4
xor	edx, edx
mov	dword ptr [eax+edx*4], 0
mov	dword ptr [eax+edx*4+4], 0
mov	dword ptr [eax+edx*4+8], 0
mov	dword ptr [eax+edx*4+0Ch], 0
mov	dword ptr [eax+edx*4+10h], 0
mov	dword ptr [eax+edx*4+14h], 0
mov	dword ptr [eax+edx*4+18h], 0
mov	dword ptr [eax+edx*4+1Ch], 0
add	edx, 8
cmp	edx, 20h
jnz	short loc_6421D3DA
mov	[esp+6Ch+t1.dp], eax
mov	[esp+6Ch+t1.used], 0
mov	[esp+6Ch+t1.alloc], 20h
mov	[esp+6Ch+t1.sign], 0
lea	eax, [esp+6Ch+t1]
mov	[esp+6Ch+var_54], eax
mov	[esp+6Ch+b], eax 
mov	[esp+6Ch+var_6C], arg_0	
call	_tma_mp_copy
mov	ebx, eax
test	eax, eax
jnz	loc_6421D3BA
lea	edi, [esp+6Ch+t2]
mov	[esp+6Ch+var_6C], edi 
call	_tma_mp_init
mov	res, eax
test	eax, eax
jz	short loc_6421D490
lea	edx, [esp+6Ch+t1]
mov	[esp+6Ch+var_6C], edx 
call	_tma_mp_clear
jmp	loc_6421D3BA
align 10h
mov	ebx, 0FFFFFFFDh
mov	eax, res
add	esp, 5Ch
pop	res
pop	arg_0
pop	edi
pop	ret_0
retn
align 10h
mov	edi, [esp+6Ch+t1.used]
mov	edx, edi
shr	edx, 1Fh
lea	res, [edx+edi]
sar	eax, 1
mov	[esp+6Ch+b], eax 
lea	ecx, [esp+6Ch+t1]
mov	[esp+6Ch+var_6C], ecx 
call	_tma_mp_rshd
mov	[esp+6Ch+d], 0	
lea	res, [esp+6Ch+t2]
mov	[esp+6Ch+c], ebx 
lea	edx, [esp+6Ch+t1]
mov	[esp+6Ch+b], edx 
mov	[esp+6Ch+var_6C], arg_0	
call	_tma_mp_div
mov	ebx, eax
test	eax, eax
jz	short loc_6421D4EE
			
lea	ret_0, [esp+6Ch+t2]
mov	[esp+6Ch+var_6C], ebp 
call	_tma_mp_clear
jmp	short E2
align 4
mov	ebx, 0FFFFFFFEh
jmp	loc_6421D3BA
lea	ebx, [esp+6Ch+t1]
mov	[esp+6Ch+c], ebx 
lea	ecx, [esp+6Ch+t2]
mov	[esp+6Ch+b], ecx 
mov	[esp+6Ch+var_6C], ebx 
call	_tma_mp_add
mov	ebx, eax
test	eax, eax
jnz	short E1
lea	res, [esp+6Ch+t1]
mov	[esp+6Ch+b], eax 
mov	[esp+6Ch+var_6C], eax 
call	_tma_mp_div_2
mov	res, eax
test	eax, eax
jnz	short E1
mov	[esp+6Ch+d], 0	
lea	edx, [esp+6Ch+t2]
mov	[esp+6Ch+c], edx 
lea	edi, [esp+6Ch+t1]
mov	[esp+6Ch+b], edi 
mov	[esp+6Ch+var_6C], arg_0	
call	_tma_mp_div
mov	res, eax
test	eax, eax
jnz	short E1
lea	ebx, [esp+6Ch+t1]
mov	[esp+6Ch+c], ebx 
lea	ecx, [esp+6Ch+t2]
mov	[esp+6Ch+b], ecx 
mov	[esp+6Ch+var_6C], ebx 
call	_tma_mp_add
mov	ebx, eax
test	eax, eax
jnz	E1
lea	res, [esp+6Ch+t1]
mov	[esp+6Ch+b], eax 
mov	[esp+6Ch+var_6C], eax 
call	_tma_mp_div_2
mov	res, eax
test	eax, eax
jnz	E1
lea	edx, [esp+6Ch+t2]
mov	[esp+6Ch+b], edx 
lea	edi, [esp+6Ch+t1]
mov	[esp+6Ch+var_6C], edi 
call	_tma_mp_cmp_mag
dec	eax
jz	short loc_6421D522
lea	eax, [esp+6Ch+var_4C]
mov	[esp+6Ch+var_50], eax
mov	edi, eax
mov	arg_0, [esp+6Ch+var_54]
mov	ecx, 4
rep movsd
mov	edi, [esp+6Ch+var_54]
mov	esi, ret_0
mov	cl, 4
rep movsd
mov	edi, ret_0
mov	esi, [esp+6Ch+var_50]
mov	cl, 4
rep movsd
jmp	E1
align 4
public _tma_mp_is_square
push	ebp
push	edi
push	esi
push	ebx
sub	esp, 4Ch
mov	esi, [esp+5Ch+arg]
mov	edi, [esp+5Ch+ret]
mov	dword ptr [edi], 0
cmp	dword ptr [esi+8], 1
jz	loc_6421D9F8
mov	ebx, [arg_0]
test	ebx, ebx
jz	loc_6421D9EC
mov	edx, [arg_0+0Ch]
mov	eax, [edx]
and	eax, 7Fh
cmp	ds:_rem_128[eax], 1
jz	loc_6421D9EC
lea	ecx, [esp+5Ch+c]
mov	[esp+5Ch+d], ecx 
mov	[esp+5Ch+var_54], 0 
mov	[esp+5Ch+b], 69h 
mov	[esp+5Ch+a], arg_0 
call	_tma_mp_div_d
mov	ebx, eax
test	eax, eax
jnz	loc_6421D9EE
mov	ebp, [esp+5Ch+c]
cmp	ss:_rem_105[ebp], 1
jz	loc_6421D9EE
lea	c_0, [esp+5Ch+t]
mov	[esp+5Ch+a], ebp 
call	_tma_mp_init
mov	res, eax
test	eax, eax
jnz	loc_6421D9EE
mov	[esp+5Ch+t.sign], 0
mov	[esp+5Ch+t.used], 0
mov	res, [esp+5Ch+t.dp]
mov	ecx, [esp+5Ch+t.alloc]
test	ecx, ecx
jle	loc_6421D73A
lea	edx, [ecx-1]
and	edx, 7
mov	dword ptr [eax+res*4], 0
mov	bl, 1
cmp	ebx, ecx
jz	loc_6421D73A
test	edx, edx
jz	short loc_6421D6F4
cmp	edx, 1
jz	short loc_6421D6E8
cmp	edx, 2
jz	short loc_6421D6E0
cmp	edx, 3
jz	short loc_6421D6D8
cmp	edx, 4
jz	short loc_6421D6D0
cmp	edx, 5
jz	short loc_6421D6C8
cmp	edx, 6
jz	short loc_6421D6C0
mov	dword ptr [eax+ebx*4], 0
mov	ebx, 2
mov	dword ptr [eax+ebx*4], 0
inc	ebx
mov	dword ptr [eax+ebx*4], 0
inc	ebx
mov	dword ptr [eax+ebx*4], 0
inc	ebx
mov	dword ptr [eax+ebx*4], 0
inc	ebx
mov	dword ptr [eax+ebx*4], 0
inc	ebx
mov	dword ptr [eax+ebx*4], 0
inc	ebx
cmp	ebx, ecx
jz	short loc_6421D73A
			
mov	dword ptr [eax+ebx*4], 0
mov	dword ptr [eax+ebx*4+4], 0
mov	dword ptr [eax+ebx*4+8], 0
mov	dword ptr [eax+ebx*4+0Ch], 0
mov	dword ptr [eax+ebx*4+10h], 0
mov	dword ptr [eax+ebx*4+14h], 0
mov	dword ptr [eax+ebx*4+18h], 0
mov	dword ptr [eax+ebx*4+1Ch], 0
add	ebx, 8
cmp	ebx, ecx
jnz	short loc_6421D6F4
			
mov	[esp+5Ch+var_54], ebp
mov	[esp+5Ch+b], 4	
mov	[esp+5Ch+a], ebp 
call	_tma_mp_mul_2d
mov	res, eax
test	eax, eax
jnz	loc_6421D9EE
mov	ebx, [esp+5Ch+t.dp]
or	dword ptr [ebx], 3
inc	[esp+5Ch+t.used]
mov	[esp+5Ch+var_54], ebp 
mov	[esp+5Ch+b], 4	
mov	[esp+5Ch+a], ebp 
call	_tma_mp_mul_2d
mov	ebx, eax
test	eax, eax
jnz	loc_6421D9EE
mov	res, [esp+5Ch+t.dp]
or	dword ptr [eax], 8
inc	[esp+5Ch+t.used]
mov	[esp+5Ch+var_54], ebp 
mov	[esp+5Ch+b], 4	
mov	[esp+5Ch+a], ebp 
call	_tma_mp_mul_2d
mov	res, eax
test	eax, eax
jnz	loc_6421D9EE
mov	edx, [esp+5Ch+t.dp]
or	dword ptr [edx], 0Eh
inc	[esp+5Ch+t.used]
mov	[esp+5Ch+var_54], ebp 
mov	[esp+5Ch+b], 4	
mov	[esp+5Ch+a], ebp 
call	_tma_mp_mul_2d
mov	res, eax
test	eax, eax
jnz	loc_6421D9EE
mov	ecx, [esp+5Ch+t.dp]
or	dword ptr [ecx], 0Ch
inc	[esp+5Ch+t.used]
mov	[esp+5Ch+var_54], ebp 
mov	[esp+5Ch+b], 4	
mov	[esp+5Ch+a], ebp 
call	_tma_mp_mul_2d
mov	res, eax
test	eax, eax
jnz	loc_6421D9EE
mov	ebx, [esp+5Ch+t.dp]
or	dword ptr [ebx], 0Eh
inc	[esp+5Ch+t.used]
mov	[esp+5Ch+var_54], ebp 
mov	[esp+5Ch+b], 4	
mov	[esp+5Ch+a], ebp 
call	_tma_mp_mul_2d
mov	ebx, eax
test	eax, eax
jnz	loc_6421D9EE
mov	res, [esp+5Ch+t.dp]
or	dword ptr [eax], 7
inc	[esp+5Ch+t.used]
mov	[esp+5Ch+var_54], ebp 
mov	[esp+5Ch+b], 4	
mov	[esp+5Ch+a], ebp 
call	_tma_mp_mul_2d
mov	res, eax
test	eax, eax
jnz	loc_6421D9EE
mov	edx, [esp+5Ch+t.dp]
or	dword ptr [edx], 0Eh
inc	[esp+5Ch+t.used]
mov	[esp+5Ch+var_54], ebp 
mov	[esp+5Ch+b], 4	
mov	[esp+5Ch+a], ebp 
call	_tma_mp_mul_2d
mov	res, eax
test	eax, eax
jnz	loc_6421D9EE
mov	edx, [esp+5Ch+t.dp]
or	dword ptr [edx], 1
mov	res, [esp+5Ch+t.used]
lea	ecx, [eax+1]
mov	[esp+5Ch+t.used], ecx
test	ecx, ecx
jle	loc_6421DA0B
mov	ecx, [edx+eax*4]
test	ecx, ecx
jnz	loc_6421D9AC
lea	res, [eax-1]
mov	[esp+5Ch+var_48], ebx
lea	edx, [edx+ebx*4]
mov	ebx, eax
and	ebx, 7
jz	loc_6421D945
mov	ecx, eax
test	eax, eax
jle	loc_6421DA07
mov	eax, [edx]
mov	[esp+5Ch+var_44], eax
mov	eax, [esp+5Ch+var_48]
sub	edx, 4
cmp	[esp+5Ch+var_44], 0
jnz	loc_6421D9A8
cmp	ebx, 1
jz	short loc_6421D945
cmp	ebx, 2
jz	short loc_6421D939
cmp	ebx, 3
jz	short loc_6421D92D
cmp	ebx, 4
jz	short loc_6421D921
cmp	ebx, 5
jz	short loc_6421D911
cmp	ebx, 6
jz	short loc_6421D901
mov	ecx, eax
mov	ebx, [edx]
dec	eax
sub	edx, 4
test	ebx, ebx
jnz	loc_6421D9A8
mov	ecx, eax
mov	ebx, [edx]
dec	eax
sub	edx, 4
test	ebx, ebx
jnz	loc_6421D9A8
mov	ecx, eax
mov	ebx, [edx]
dec	eax
sub	edx, 4
test	ebx, ebx
jnz	loc_6421D9A8
mov	ecx, eax
mov	ebx, [edx]
dec	eax
sub	edx, 4
test	ebx, ebx
jnz	short loc_6421D9A8
mov	ecx, eax
mov	ebx, [edx]
dec	eax
sub	edx, 4
test	ebx, ebx
jnz	short loc_6421D9A8
mov	ecx, eax
mov	ebx, [edx]
dec	eax
sub	edx, 4
test	ebx, ebx
jnz	short loc_6421D9A8
			
mov	ecx, eax
test	eax, eax
jle	loc_6421DA07
lea	ebx, [eax-1]
cmp	dword ptr [edx], 0
jnz	short loc_6421D9A8
mov	ecx, ebx
lea	ebx, [eax-2]
cmp	dword ptr [edx-4], 0
jnz	short loc_6421D9A8
mov	ecx, ebx
lea	ebx, [eax-3]
cmp	dword ptr [edx-8], 0
jnz	short loc_6421D9A8
mov	ecx, ebx
lea	ebx, [eax-4]
cmp	dword ptr [edx-0Ch], 0
jnz	short loc_6421D9A8
mov	ecx, ebx
lea	ebx, [eax-5]
cmp	dword ptr [edx-10h], 0
jnz	short loc_6421D9A8
mov	ecx, ebx
lea	ebx, [eax-6]
cmp	dword ptr [edx-14h], 0
jnz	short loc_6421D9A8
mov	ecx, ebx
lea	ebx, [eax-7]
cmp	dword ptr [edx-18h], 0
jnz	short loc_6421D9A8
mov	ecx, ebx
mov	ebx, [edx-1Ch]
sub	eax, 8
sub	edx, 20h
test	ebx, ebx
jz	short loc_6421D945
			
mov	[esp+5Ch+t.used], ecx
			
mov	[esp+5Ch+var_54], ebp
mov	[esp+5Ch+b], ebp 
mov	[esp+5Ch+a], arg_0 
call	_tma_mp_mod
mov	res, eax
test	eax, eax
jnz	short ERR
mov	ecx, [esp+5Ch+t.used]
test	ecx, ecx
jnz	short loc_6421DA1C
mov	[esp+5Ch+b], ebp
mov	[esp+5Ch+a], arg_0 
call	_tma_mp_sqrt
mov	res, eax
test	eax, eax
jz	loc_6421DC46
			
mov	[esp+5Ch+a], ebp 
call	_tma_mp_clear
jmp	short loc_6421D9EE
align 4
			
xor	ebx, ebx
			
mov	eax, res
add	esp, 4Ch
pop	res
pop	arg_0
pop	ret_0
pop	ebp
retn
mov	ebx, 0FFFFFFFDh
mov	eax, res
add	esp, 4Ch
pop	res
pop	arg_0
pop	ret_0
pop	ebp
retn
			
mov	[esp+5Ch+t.used], eax
test	ecx, ecx
jnz	short loc_6421D9AC
mov	[esp+5Ch+t.sign], 0
jmp	short loc_6421D9AC
align 4
cmp	ecx, 2
jle	short loc_6421DA26
mov	ecx, 2
mov	res, [esp+5Ch+t.dp]
mov	edx, [eax+ecx*4-4]
mov	[esp+5Ch+var_48], edx
mov	edx, ecx
sub	edx, 2
js	loc_6421DB58
lea	eax, [eax+edx*4]
mov	[esp+5Ch+var_40], eax
and	edx, 7
mov	[esp+5Ch+var_44], edx
shl	[esp+5Ch+var_48], 1Ch
mov	eax, [eax]
or	[esp+5Ch+var_48], eax
lea	edx, [ecx-3]
mov	eax, [esp+5Ch+var_40]
sub	eax, 4
cmp	edx, 0FFFFFFFFh
jz	loc_6421DB58
cmp	[esp+5Ch+var_44], 0
jz	loc_6421DB16
cmp	[esp+5Ch+var_44], 1
jz	loc_6421DB02
cmp	[esp+5Ch+var_44], 2
jz	short loc_6421DAF3
cmp	[esp+5Ch+var_44], 3
jz	short loc_6421DAE4
cmp	[esp+5Ch+var_44], 4
jz	short loc_6421DAD5
cmp	[esp+5Ch+var_44], 5
jz	short loc_6421DAC6
cmp	[esp+5Ch+var_44], 6
jz	short loc_6421DAB7
shl	[esp+5Ch+var_48], 1Ch
mov	edx, [eax]
or	[esp+5Ch+var_48], edx
lea	edx, [ecx-4]
mov	eax, [esp+5Ch+var_40]
sub	eax, 8
shl	[esp+5Ch+var_48], 1Ch
mov	ecx, [eax]
or	[esp+5Ch+var_48], ecx
dec	edx
sub	eax, 4
shl	[esp+5Ch+var_48], 1Ch
mov	ecx, [eax]
or	[esp+5Ch+var_48], ecx
dec	edx
sub	eax, 4
shl	[esp+5Ch+var_48], 1Ch
mov	ecx, [eax]
or	[esp+5Ch+var_48], ecx
dec	edx
sub	eax, 4
shl	[esp+5Ch+var_48], 1Ch
mov	ecx, [eax]
or	[esp+5Ch+var_48], ecx
dec	edx
sub	eax, 4
shl	[esp+5Ch+var_48], 1Ch
mov	ecx, [eax]
or	[esp+5Ch+var_48], ecx
dec	edx
sub	eax, 4
shl	[esp+5Ch+var_48], 1Ch
mov	ecx, [eax]
or	[esp+5Ch+var_48], ecx
dec	edx
sub	eax, 4
cmp	edx, 0FFFFFFFFh
jz	short loc_6421DB58
mov	ecx, [esp+5Ch+var_48]
shl	r, 1Ch
or	r, [eax]
shl	r, 1Ch
or	r, [eax-4]
shl	r, 1Ch
or	r, [eax-8]
shl	r, 1Ch
or	r, [eax-0Ch]
shl	r, 1Ch
or	r, [eax-10h]
shl	r, 1Ch
or	r, [eax-14h]
shl	r, 1Ch
or	r, [eax-18h]
shl	r, 1Ch
or	r, [eax-1Ch]
sub	edx, 8
sub	eax, 20h
cmp	edx, 0FFFFFFFFh
jnz	short loc_6421DB1A
mov	[esp+5Ch+var_48], r
			
mov	edx, 0Bh
mov	eax, [esp+5Ch+var_48]
mov	r, edx
xor	edx, edx
div	ecx
mov	eax, 5C4h
mov	cl, dl
sar	eax, cl
test	al, 1
jnz	ERR
mov	edx, 0Dh
mov	eax, [esp+5Ch+var_48]
mov	ecx, edx
xor	edx, edx
div	ecx
mov	[esp+5Ch+var_44], 9E4h
mov	cl, dl
sar	[esp+5Ch+var_44], cl
mov	edx, 11h
mov	eax, [esp+5Ch+var_48]
mov	ecx, edx
xor	edx, edx
div	ecx
mov	eax, 5CE8h
mov	cl, dl
sar	eax, cl
or	[esp+5Ch+var_44], eax
test	byte ptr [esp+5Ch+var_44], 1
jnz	ERR
mov	edx, 17h
mov	eax, [esp+5Ch+var_48]
mov	ecx, edx
xor	edx, edx
div	ecx
mov	[esp+5Ch+var_44], 7ACCA0h
mov	cl, dl
sar	[esp+5Ch+var_44], cl
mov	edx, 13h
mov	eax, [esp+5Ch+var_48]
mov	ecx, edx
xor	edx, edx
div	ecx
mov	eax, 4F50Ch
mov	cl, dl
sar	eax, cl
or	eax, [esp+5Ch+var_44]
test	al, 1
jnz	ERR
mov	edx, 1Dh
mov	eax, [esp+5Ch+var_48]
mov	ecx, edx
xor	edx, edx
div	ecx
mov	[esp+5Ch+var_44], 0C2EDD0Ch
mov	cl, dl
sar	[esp+5Ch+var_44], cl
mov	edx, 1Fh
mov	eax, [esp+5Ch+var_48]
mov	ecx, edx
xor	edx, edx
div	ecx
mov	eax, 6DE2B848h
mov	cl, dl
sar	eax, cl
or	[esp+5Ch+var_44], eax
test	byte ptr [esp+5Ch+var_44], 1
jnz	ERR
jmp	loc_6421D9CA
mov	[esp+5Ch+b], ebp
mov	[esp+5Ch+a], ebp 
call	_tma_mp_sqr
mov	res, eax
test	eax, eax
jnz	ERR
mov	[esp+5Ch+b], arg_0 
mov	[esp+5Ch+a], ebp 
call	_tma_mp_cmp_mag
test	eax, eax
setz	al
movzx	arg_0, al
mov	[ret_0], esi
jmp	ERR
align 4
public _tma_mp_dr_reduce
push	ebp
push	edi
push	esi
push	ebx
sub	esp, 4Ch
mov	eax, [esp+5Ch+n]
mov	eax, [eax]
mov	[esp+5Ch+var_30], eax
shl	eax, 1
mov	edx, [esp+5Ch+x]
cmp	[edx+4], eax
jl	loc_6421ED4F
mov	ecx, [edx+0Ch]
mov	eax, [esp+5Ch+var_30]
shl	eax, 2
mov	[esp+5Ch+var_20], eax
mov	ebx, [esp+5Ch+var_30]
inc	ebx
mov	[esp+5Ch+var_28], ebx
mov	ebp, [esp+5Ch+x]
mov	ebx, [ebp+0]
xchg	ax, ax
			
mov	esi, [esp+5Ch+var_30]
test	esi, esi
jle	loc_6421E900
mov	esi, [esp+5Ch+var_20]
add	esi, ecx
mov	[esp+5Ch+var_34], esi
mov	esi, [esp+5Ch+var_30]
dec	esi
and	esi, 3
mov	tmpx1, [esp+5Ch+k]
mov	ebp, [esp+5Ch+var_34]
mul	dword ptr [ebp+0]
mov	[esp+5Ch+var_3C], eax
mov	[esp+5Ch+var_38], edx
mov	edi, [tmpx1]
xor	edx, edx
add	[esp+5Ch+var_3C], edi
adc	[esp+5Ch+var_38], edx
mov	eax, [esp+5Ch+var_3C]
and	eax, 0FFFFFFFh
xor	ebp, ebp
mov	[tmpx1+ebp*4], eax
mov	eax, [esp+5Ch+var_3C]
mov	edx, [esp+5Ch+var_38]
shrd	eax, edx, 1Ch
shr	edx, 1Ch
mov	[esp+5Ch+var_24], eax
mov	[esp+5Ch+var_40], 1
mov	edi, [esp+5Ch+var_30]
cmp	[esp+5Ch+var_40], edi
jz	loc_6421DFB1
test	esi, esi
jz	loc_6421DE5A
cmp	esi, 1
jz	loc_6421DDF3
cmp	esi, 2
jz	short loc_6421DD98
mov	eax, [esp+5Ch+k]
mov	edi, [esp+5Ch+var_34]
mul	dword ptr [edi+4]
mov	[esp+5Ch+var_3C], eax
mov	[esp+5Ch+var_38], edx
mov	esi, [tmpx1+4]
xor	ebp, ebp
add	[esp+5Ch+var_3C], esi
adc	[esp+5Ch+var_38], ebp
mov	eax, [esp+5Ch+var_24]
xor	edi, edi
add	[esp+5Ch+var_3C], eax
adc	[esp+5Ch+var_38], edi
mov	edx, [esp+5Ch+var_3C]
and	edx, 0FFFFFFFh
mov	[tmpx1+4], edx
mov	eax, [esp+5Ch+var_3C]
mov	edx, [esp+5Ch+var_38]
shrd	eax, edx, 1Ch
shr	edx, 1Ch
mov	[esp+5Ch+var_24], eax
mov	[esp+5Ch+var_40], 2
mov	eax, [esp+5Ch+k]
mov	ebp, [esp+5Ch+var_40]
mov	esi, [esp+5Ch+var_34]
mul	dword ptr [esi+ebp*4]
mov	[esp+5Ch+var_3C], eax
mov	[esp+5Ch+var_38], edx
mov	eax, [tmpx1+ebp*4]
xor	edi, edi
add	[esp+5Ch+var_3C], eax
adc	[esp+5Ch+var_38], edi
mov	esi, [esp+5Ch+var_24]
xor	ebp, ebp
add	[esp+5Ch+var_3C], esi
adc	[esp+5Ch+var_38], ebp
mov	edx, [esp+5Ch+var_3C]
and	edx, 0FFFFFFFh
mov	eax, [esp+5Ch+var_40]
mov	[tmpx1+eax*4], edx
mov	esi, [esp+5Ch+var_3C]
mov	edi, [esp+5Ch+var_38]
shrd	esi, edi, 1Ch
shr	edi, 1Ch
mov	[esp+5Ch+var_24], esi
inc	eax
mov	[esp+5Ch+var_40], eax
mov	eax, [esp+5Ch+k]
mov	ebp, [esp+5Ch+var_40]
mov	edi, [esp+5Ch+var_34]
mul	dword ptr [edi+ebp*4]
mov	[esp+5Ch+var_3C], eax
mov	[esp+5Ch+var_38], edx
mov	eax, [tmpx1+ebp*4]
xor	edx, edx
add	[esp+5Ch+var_3C], eax
adc	[esp+5Ch+var_38], edx
mov	esi, [esp+5Ch+var_24]
xor	ebp, ebp
add	[esp+5Ch+var_3C], esi
adc	[esp+5Ch+var_38], ebp
mov	edi, [esp+5Ch+var_3C]
and	edi, 0FFFFFFFh
mov	eax, [esp+5Ch+var_40]
mov	[tmpx1+eax*4], edi
mov	esi, [esp+5Ch+var_3C]
mov	edi, [esp+5Ch+var_38]
shrd	esi, edi, 1Ch
shr	edi, 1Ch
mov	[esp+5Ch+var_24], esi
inc	eax
mov	[esp+5Ch+var_40], eax
mov	edx, [esp+5Ch+var_30]
cmp	eax, edx
jz	loc_6421DFB1
mov	[esp+5Ch+var_2C], ebx
mov	eax, [esp+5Ch+k]
mov	ebx, [esp+5Ch+var_40]
mov	edi, [esp+5Ch+var_34]
mul	dword ptr [edi+ebx*4]
mov	edi, eax
mov	ebp, edx
mov	edx, [tmpx1+ebx*4]
xor	eax, eax
add	edi, edx
adc	ebp, eax
mov	ebx, [esp+5Ch+var_24]
xor	esi, esi
add	edi, ebx
adc	ebp, esi
mov	edx, edi
and	edx, 0FFFFFFFh
mov	eax, [esp+5Ch+var_40]
mov	[tmpx1+eax*4], edx
shrd	edi, ebp, 1Ch
shr	ebp, 1Ch
inc	eax
mov	[esp+5Ch+var_24], eax
mov	eax, [esp+5Ch+k]
mov	ebp, [esp+5Ch+var_24]
mov	esi, [esp+5Ch+var_34]
mul	dword ptr [esi+ebp*4]
mov	[esp+5Ch+var_3C], eax
mov	[esp+5Ch+var_38], edx
mov	mu, [tmpx1+ebp*4]
xor	esi, esi
add	[esp+5Ch+var_3C], ebx
adc	[esp+5Ch+var_38], esi
xor	edx, edx
add	[esp+5Ch+var_3C], edi
adc	[esp+5Ch+var_38], edx
mov	eax, [esp+5Ch+var_3C]
and	eax, 0FFFFFFFh
mov	edi, [esp+5Ch+var_24]
mov	[tmpx1+edi*4], eax
mov	edi, [esp+5Ch+var_3C]
mov	ebp, [esp+5Ch+var_38]
shrd	edi, ebp, 1Ch
shr	ebp, 1Ch
mov	esi, [esp+5Ch+var_40]
add	esi, 2
mov	[esp+5Ch+var_24], esi
mov	eax, [esp+5Ch+k]
mov	ebp, [esp+5Ch+var_34]
mul	dword ptr [ebp+esi*4+0]
mov	[esp+5Ch+var_3C], eax
mov	[esp+5Ch+var_38], edx
mov	ebx, [tmpx1+esi*4]
xor	ebp, ebp
add	[esp+5Ch+var_3C], ebx
adc	[esp+5Ch+var_38], ebp
xor	edx, edx
add	[esp+5Ch+var_3C], edi
adc	[esp+5Ch+var_38], edx
mov	edi, [esp+5Ch+var_3C]
and	edi, 0FFFFFFFh
mov	eax, [esp+5Ch+var_24]
mov	[tmpx1+eax*4], edi
mov	edi, [esp+5Ch+var_3C]
mov	ebp, [esp+5Ch+var_38]
shrd	edi, ebp, 1Ch
shr	ebp, 1Ch
mov	ebp, [esp+5Ch+var_40]
add	ebp, 3
mov	[esp+5Ch+var_24], ebp
mov	eax, [esp+5Ch+k]
mov	esi, [esp+5Ch+var_34]
mul	dword ptr [esi+ebp*4]
mov	[esp+5Ch+var_3C], eax
mov	[esp+5Ch+var_38], edx
mov	ebx, [tmpx1+ebp*4]
xor	esi, esi
add	[esp+5Ch+var_3C], ebx
adc	[esp+5Ch+var_38], esi
xor	ebp, ebp
add	[esp+5Ch+var_3C], edi
adc	[esp+5Ch+var_38], ebp
mov	eax, [esp+5Ch+var_3C]
and	eax, 0FFFFFFFh
mov	edx, [esp+5Ch+var_24]
mov	[tmpx1+edx*4], eax
mov	ebx, [esp+5Ch+var_3C]
mov	esi, [esp+5Ch+var_38]
shrd	ebx, esi, 1Ch
shr	esi, 1Ch
mov	[esp+5Ch+var_24], ebx
add	[esp+5Ch+var_40], 4
mov	ebx, [esp+5Ch+var_30]
cmp	[esp+5Ch+var_40], ebx
jnz	loc_6421DE5E
mov	ebx, [esp+5Ch+var_2C]
			
mov	esi, [esp+5Ch+var_34]
mov	ebp, [esp+5Ch+var_24]
mov	[tmpx1], ebp
cmp	ebx, [esp+5Ch+var_28]
jle	loc_6421E09A
mov	mu, [esp+5Ch+var_28]
not	edi
add	edi, ebx
and	edi, 7
mov	dword ptr [tmpx1+4], 0
lea	eax, [tmpx1+8]
mov	edx, [esp+5Ch+var_28]
inc	i
cmp	i, ebx
jz	loc_6421E09A
test	edi, edi
jz	short loc_6421E059
cmp	edi, 1
jz	short loc_6421E04B
cmp	edi, 2
jz	short loc_6421E041
cmp	edi, 3
jz	short loc_6421E037
cmp	edi, 4
jz	short loc_6421E02D
cmp	edi, 5
jz	short loc_6421E023
cmp	edi, 6
jz	short loc_6421E019
mov	dword ptr [tmpx1], 0
lea	tmpx1, [esi+0Ch]
mov	i, [esp+5Ch+var_28]
add	i, 2
mov	dword ptr [tmpx1], 0
add	tmpx1, 4
inc	i
mov	dword ptr [tmpx1], 0
add	tmpx1, 4
inc	i
mov	dword ptr [tmpx1], 0
add	tmpx1, 4
inc	i
mov	dword ptr [tmpx1], 0
add	tmpx1, 4
inc	i
mov	dword ptr [tmpx1], 0
add	tmpx1, 4
inc	i
mov	dword ptr [tmpx1], 0
add	tmpx1, 4
inc	i
cmp	i, ebx
jz	short loc_6421E09A
			
mov	dword ptr [tmpx1], 0
mov	dword ptr [tmpx1+4], 0
mov	dword ptr [tmpx1+8], 0
mov	dword ptr [tmpx1+0Ch], 0
mov	dword ptr [tmpx1+10h], 0
mov	dword ptr [tmpx1+14h], 0
mov	dword ptr [tmpx1+18h], 0
mov	dword ptr [tmpx1+1Ch], 0
add	tmpx1, 20h
add	i, 8
cmp	i, ebx
jnz	short loc_6421E059
			
cmp	ebx, 0
jle	loc_6421EBF8
lea	tmpx1, [ebx-1]
mov	tmpx1, [ecx+eax*4]
test	esi, esi
jnz	loc_6421E29C
lea	i, ds:0FFFFFFF8h[ebx*4]
mov	tmpx1, eax
and	ecx, 7
jz	loc_6421E191
mov	ebx, eax
mov	ebp, [esp+5Ch+x]
mov	mu, [ebp+0Ch]
mov	esi, [edi+edx]
sub	edx, 4
test	esi, esi
jnz	loc_6421E910
lea	eax, [eax-1]
cmp	ecx, 1
jz	loc_6421E191
cmp	ecx, 2
jz	loc_6421E179
cmp	ecx, 3
jz	short loc_6421E160
cmp	ecx, 4
jz	short loc_6421E148
cmp	ecx, 5
jz	short loc_6421E130
cmp	ecx, 6
jz	short loc_6421E118
mov	ebx, eax
mov	ebp, [ebp+0Ch]
mov	ecx, [ebp+edx+0]
sub	edx, 4
test	ecx, ecx
jnz	loc_6421E910
dec	eax
mov	ebx, eax
mov	ebp, [esp+5Ch+x]
mov	ecx, [ebp+0Ch]
mov	edi, [ecx+edx]
sub	edx, 4
test	edi, edi
jnz	loc_6421E910
dec	eax
mov	ebx, eax
mov	ecx, [esp+5Ch+x]
mov	edi, [ecx+0Ch]
mov	esi, [edi+edx]
sub	edx, 4
test	esi, esi
jnz	loc_6421E910
dec	eax
mov	ebx, eax
mov	esi, [esp+5Ch+x]
mov	edi, [esi+0Ch]
mov	ebp, [edi+edx]
sub	edx, 4
test	ebp, ebp
jnz	loc_6421E910
dec	eax
mov	ebx, eax
mov	edi, [esp+5Ch+x]
mov	ebp, [edi+0Ch]
mov	ecx, [ebp+edx+0]
sub	edx, 4
test	ecx, ecx
jnz	loc_6421E910
dec	eax
mov	ebx, eax
mov	ebp, [esp+5Ch+x]
mov	ecx, [ebp+0Ch]
mov	esi, [ecx+edx]
sub	edx, 4
test	esi, esi
jnz	loc_6421E910
dec	eax
			
mov	esi, eax
mov	ebx, eax
test	eax, eax
jz	loc_6421E285
mov	mu, [esp+5Ch+x]
mov	ecx, [edi+0Ch]
lea	ebp, [edx-4]
mov	[esp+5Ch+var_34], ebp
mov	edi, [ecx+edx]
test	edi, edi
jnz	loc_6421E910
lea	edi, [eax-1]
mov	eax, edi
lea	ebx, [esi-1]
lea	ebp, [edx-8]
mov	[esp+5Ch+var_3C], ebp
mov	ebp, [esp+5Ch+var_34]
mov	ebp, [ecx+ebp]
test	ebp, ebp
jnz	loc_6421E910
dec	eax
lea	ebx, [esi-2]
lea	ebp, [edx-0Ch]
mov	[esp+5Ch+var_34], ebp
mov	ebp, [esp+5Ch+var_3C]
mov	ebp, [ecx+ebp]
test	ebp, ebp
jnz	loc_6421E910
lea	eax, [edi-2]
lea	ebx, [esi-3]
lea	ebp, [edx-10h]
mov	[esp+5Ch+var_3C], ebp
mov	ebp, [esp+5Ch+var_34]
mov	ebp, [ecx+ebp]
test	ebp, ebp
jnz	loc_6421E910
lea	eax, [edi-3]
lea	ebx, [esi-4]
lea	ebp, [edx-14h]
mov	[esp+5Ch+var_34], ebp
mov	ebp, [esp+5Ch+var_3C]
mov	ebp, [ecx+ebp]
test	ebp, ebp
jnz	loc_6421E910
lea	eax, [edi-4]
lea	ebx, [esi-5]
lea	ebp, [edx-18h]
mov	[esp+5Ch+var_3C], ebp
mov	ebp, [esp+5Ch+var_34]
mov	ebp, [ecx+ebp]
test	ebp, ebp
jnz	loc_6421E910
lea	eax, [edi-5]
lea	ebx, [esi-6]
lea	ebp, [edx-1Ch]
mov	[esp+5Ch+var_34], ebp
mov	ebp, [esp+5Ch+var_3C]
mov	ebp, [ecx+ebp]
test	ebp, ebp
jnz	loc_6421E910
lea	eax, [edi-6]
lea	ebx, [esi-7]
sub	edx, 20h
mov	ebp, [esp+5Ch+var_34]
mov	esi, [ecx+ebp]
test	esi, esi
jnz	loc_6421E910
lea	eax, [edi-7]
mov	esi, eax
mov	ebx, eax
test	eax, eax
jnz	loc_6421E19D
mov	ecx, [esp+5Ch+x]
mov	dword ptr [ecx], 0
mov	ebx, [esp+5Ch+x]
mov	dword ptr [ebx+8], 0
mov	ebx, [ebx]
			
mov	mu, [esp+5Ch+n]
mov	tmpx1, [edi]
mov	[esp+5Ch+var_34], ecx
cmp	ecx, ebx
jge	loc_6421E928
mov	ebp, [esp+5Ch+x]
mov	ecx, [ebp+0Ch]
			
mov	tmpx1, [esp+5Ch+x]
cmp	[esi+4], ebx
jl	loc_6421EC20
mov	[esp+5Ch+var_2C], ebx
mov	edi, [esp+5Ch+x]
mov	[edi], ebx
mov	esi, [esp+5Ch+n]
mov	edi, [esi+0Ch]
mov	ebp, [esp+5Ch+var_34]
test	ebp, ebp
jle	loc_6421EBE0
mov	ebp, ecx
mov	tmpx1, ecx
xor	i, i
mov	[esp+5Ch+var_3C], 0
mov	esi, [esp+5Ch+var_34]
dec	esi
and	esi, 3
jz	loc_6421EBB8
mov	edx, [ecx]
sub	edx, [edi]
lea	eax, [ecx+4]
mov	ebp, edx
shr	ebp, 1Fh
mov	[esp+5Ch+var_3C], ebp
and	edx, 0FFFFFFFh
mov	[ecx], edx
mov	edx, 1
mov	ebp, eax
cmp	esi, 1
jz	loc_6421EBB8
cmp	esi, 2
jz	short loc_6421E34D
mov	edx, [eax]
sub	edx, [edi+4]
sub	edx, [esp+5Ch+var_3C]
lea	eax, [ecx+8]
mov	esi, edx
shr	esi, 1Fh
mov	[esp+5Ch+var_3C], esi
and	edx, 0FFFFFFFh
mov	[ebp+0], edx
mov	edx, 2
mov	ebp, eax
mov	esi, [eax]
mov	[esp+5Ch+var_24], esi
mov	esi, [edi+edx*4]
sub	[esp+5Ch+var_24], esi
mov	esi, [esp+5Ch+var_3C]
sub	[esp+5Ch+var_24], esi
add	eax, 4
mov	esi, [esp+5Ch+var_24]
shr	esi, 1Fh
mov	[esp+5Ch+var_3C], esi
mov	esi, [esp+5Ch+var_24]
and	esi, 0FFFFFFFh
mov	[ebp+0], esi
inc	edx
mov	ebp, eax
mov	[esp+5Ch+var_24], ecx
jmp	short loc_6421E3DB
align 4
mov	esi, [eax+4]
sub	esi, [edi+ebp*4]
sub	esi, ecx
mov	ebp, esi
shr	ebp, 1Fh
and	esi, 0FFFFFFFh
mov	[eax+4], esi
mov	esi, [eax+8]
sub	esi, [edi+edx*4+8]
sub	esi, ebp
lea	ebp, [eax+0Ch]
mov	ecx, esi
shr	ecx, 1Fh
and	esi, 0FFFFFFFh
mov	[eax+8], esi
mov	esi, [eax+0Ch]
sub	esi, [edi+edx*4+0Ch]
sub	esi, ecx
add	eax, 10h
mov	ecx, esi
shr	ecx, 1Fh
mov	[esp+5Ch+var_3C], ecx
and	esi, 0FFFFFFFh
mov	[ebp+0], esi
add	edx, 4
mov	ebp, eax
			
mov	esi, [eax]
sub	esi, [edi+edx*4]
sub	esi, [esp+5Ch+var_3C]
mov	ecx, esi
shr	ecx, 1Fh
mov	[esp+5Ch+var_3C], ecx
and	esi, 0FFFFFFFh
mov	[ebp+0], esi
lea	ebp, [edx+1]
mov	esi, ebp
cmp	ebp, [esp+5Ch+var_34]
jnz	short loc_6421E388
mov	ecx, [esp+5Ch+var_24]
mov	eax, [esp+5Ch+var_34]
lea	edx, [ecx+eax*4]
mov	[esp+5Ch+var_34], edx
cmp	esi, ebx
jge	loc_6421E652
mov	edi, esi
mov	tmpx1, [esp+5Ch+var_34]
mov	ebp, esi
not	ebp
add	ebp, ebx
and	ebp, 7
mov	[esp+5Ch+var_24], ebp
jz	loc_6421EBD0
mov	ebp, [esp+5Ch+var_34]
mov	edi, [ebp+0]
sub	edi, [esp+5Ch+var_3C]
mov	eax, ebp
add	eax, 4
mov	ebp, edi
shr	ebp, 1Fh
mov	[esp+5Ch+var_3C], ebp
and	edi, 0FFFFFFFh
mov	[edx], edi
lea	edi, [esi+1]
mov	edx, eax
cmp	[esp+5Ch+var_24], 1
jz	loc_6421EBD0
cmp	[esp+5Ch+var_24], 2
jz	loc_6421E55E
cmp	[esp+5Ch+var_24], 3
jz	loc_6421E533
cmp	[esp+5Ch+var_24], 4
jz	loc_6421E508
cmp	[esp+5Ch+var_24], 5
jz	short loc_6421E4DD
cmp	[esp+5Ch+var_24], 6
jz	short loc_6421E4B2
mov	edi, [eax]
sub	edi, ebp
mov	eax, [esp+5Ch+var_34]
add	eax, 8
mov	ebp, edi
shr	ebp, 1Fh
mov	[esp+5Ch+var_3C], ebp
and	edi, 0FFFFFFFh
mov	[edx], edi
lea	edi, [esi+2]
mov	edx, eax
mov	ebp, [eax]
mov	[esp+5Ch+var_24], ebp
mov	ebp, [esp+5Ch+var_3C]
sub	[esp+5Ch+var_24], ebp
add	eax, 4
mov	ebp, [esp+5Ch+var_24]
shr	ebp, 1Fh
mov	[esp+5Ch+var_3C], ebp
mov	ebp, [esp+5Ch+var_24]
and	ebp, 0FFFFFFFh
mov	[edx], ebp
inc	edi
mov	edx, eax
mov	ebp, [eax]
mov	[esp+5Ch+var_24], ebp
mov	ebp, [esp+5Ch+var_3C]
sub	[esp+5Ch+var_24], ebp
add	eax, 4
mov	ebp, [esp+5Ch+var_24]
shr	ebp, 1Fh
mov	[esp+5Ch+var_3C], ebp
mov	ebp, [esp+5Ch+var_24]
and	ebp, 0FFFFFFFh
mov	[edx], ebp
inc	edi
mov	edx, eax
mov	ebp, [eax]
mov	[esp+5Ch+var_24], ebp
mov	ebp, [esp+5Ch+var_3C]
sub	[esp+5Ch+var_24], ebp
add	eax, 4
mov	ebp, [esp+5Ch+var_24]
shr	ebp, 1Fh
mov	[esp+5Ch+var_3C], ebp
mov	ebp, [esp+5Ch+var_24]
and	ebp, 0FFFFFFFh
mov	[edx], ebp
inc	edi
mov	edx, eax
mov	ebp, [eax]
mov	[esp+5Ch+var_24], ebp
mov	ebp, [esp+5Ch+var_3C]
sub	[esp+5Ch+var_24], ebp
add	eax, 4
mov	ebp, [esp+5Ch+var_24]
shr	ebp, 1Fh
mov	[esp+5Ch+var_3C], ebp
mov	ebp, [esp+5Ch+var_24]
and	ebp, 0FFFFFFFh
mov	[edx], ebp
inc	edi
mov	edx, eax
mov	ebp, [eax]
mov	[esp+5Ch+var_24], ebp
mov	ebp, [esp+5Ch+var_3C]
sub	[esp+5Ch+var_24], ebp
add	eax, 4
mov	ebp, [esp+5Ch+var_24]
shr	ebp, 1Fh
mov	[esp+5Ch+var_3C], ebp
mov	ebp, [esp+5Ch+var_24]
and	ebp, 0FFFFFFFh
mov	[edx], ebp
inc	edi
mov	edx, eax
mov	[esp+5Ch+var_24], esi
mov	ebp, [esp+5Ch+var_3C]
jmp	loc_6421E627
align 4
mov	edx, [eax+4]
sub	edx, ebp
mov	esi, edx
shr	esi, 1Fh
and	edx, 0FFFFFFFh
mov	[eax+4], edx
mov	ebp, [eax+8]
sub	ebp, esi
mov	esi, ebp
shr	esi, 1Fh
and	ebp, 0FFFFFFFh
mov	[eax+8], ebp
mov	edx, [eax+0Ch]
sub	edx, esi
mov	ebp, edx
shr	ebp, 1Fh
and	edx, 0FFFFFFFh
mov	[eax+0Ch], edx
mov	edx, [eax+10h]
sub	edx, ebp
mov	esi, edx
shr	esi, 1Fh
and	edx, 0FFFFFFFh
mov	[eax+10h], edx
mov	ebp, [eax+14h]
sub	ebp, esi
mov	esi, ebp
shr	esi, 1Fh
and	ebp, 0FFFFFFFh
mov	[eax+14h], ebp
mov	edx, [eax+18h]
sub	edx, esi
lea	esi, [eax+1Ch]
mov	ebp, edx
shr	ebp, 1Fh
and	edx, 0FFFFFFFh
mov	[eax+18h], edx
mov	edx, [eax+1Ch]
sub	edx, ebp
add	eax, 20h
mov	ebp, edx
shr	ebp, 1Fh
and	edx, 0FFFFFFFh
mov	[esi], edx
add	edi, 8
mov	edx, eax
			
mov	esi, [eax]
sub	esi, ebp
mov	ebp, esi
shr	ebp, 1Fh
and	esi, 0FFFFFFFh
mov	[edx], esi
lea	edx, [edi+1]
cmp	edx, ebx
jl	loc_6421E598
mov	esi, [esp+5Ch+var_24]
mov	ebp, ebx
sub	ebp, esi
mov	edi, [esp+5Ch+var_34]
lea	edx, [edi+ebp*4]
cmp	[esp+5Ch+var_2C], ebx
jle	loc_6421E730
mov	edi, ebx
not	edi
add	edi, [esp+5Ch+var_2C]
and	edi, 7
mov	dword ptr [edx], 0
lea	tmpx1, [edx+4]
lea	esi, [ebx+1]
cmp	[esp+5Ch+var_2C], esi
jle	loc_6421E730
test	edi, edi
jz	short loc_6421E6ED
cmp	edi, 1
jz	short loc_6421E6DD
cmp	edi, 2
jz	short loc_6421E6D3
cmp	edi, 3
jz	short loc_6421E6C9
cmp	edi, 4
jz	short loc_6421E6BF
cmp	edi, 5
jz	short loc_6421E6B5
cmp	edi, 6
jz	short loc_6421E6AB
mov	dword ptr [eax], 0
lea	eax, [edx+8]
lea	esi, [ebx+2]
mov	dword ptr [eax], 0
add	eax, 4
inc	esi
mov	dword ptr [eax], 0
add	eax, 4
inc	esi
mov	dword ptr [eax], 0
add	eax, 4
inc	esi
mov	dword ptr [eax], 0
add	eax, 4
inc	esi
mov	dword ptr [eax], 0
add	eax, 4
inc	esi
mov	dword ptr [eax], 0
add	eax, 4
inc	esi
cmp	[esp+5Ch+var_2C], esi
jle	short loc_6421E730
			
mov	dword ptr [eax], 0
mov	dword ptr [eax+4], 0
mov	dword ptr [eax+8], 0
mov	dword ptr [eax+0Ch], 0
mov	dword ptr [eax+10h], 0
mov	dword ptr [eax+14h], 0
mov	dword ptr [eax+18h], 0
mov	dword ptr [eax+1Ch], 0
add	eax, 20h
add	esi, 8
cmp	[esp+5Ch+var_2C], esi
jg	short loc_6421E6ED
			
cmp	ebx, 0
jle	loc_6421EC0C
lea	tmpx1, [ebx-1]
mov	edx, [ecx+eax*4]
test	edx, edx
jnz	loc_6421DCB8
lea	edx, ds:0FFFFFFF8h[ebx*4]
mov	esi, eax
and	esi, 7
jz	loc_6421E7F0
mov	ebx, eax
mov	edi, [ecx+edx]
sub	edx, 4
test	edi, edi
jnz	loc_6421EBC4
lea	eax, [eax-1]
cmp	esi, 1
jz	short loc_6421E7F0
cmp	esi, 2
jz	short loc_6421E7DF
cmp	esi, 3
jz	short loc_6421E7CE
cmp	esi, 4
jz	short loc_6421E7BD
cmp	esi, 5
jz	short loc_6421E7AC
cmp	esi, 6
jz	short loc_6421E79B
mov	ebx, eax
mov	ebp, [ecx+edx]
sub	edx, 4
test	ebp, ebp
jnz	loc_6421EBC4
dec	eax
mov	ebx, eax
mov	esi, [ecx+edx]
sub	edx, 4
test	esi, esi
jnz	loc_6421EBC4
dec	eax
mov	ebx, eax
mov	edi, [ecx+edx]
sub	edx, 4
test	edi, edi
jnz	loc_6421EBC4
dec	eax
mov	ebx, eax
mov	ebp, [ecx+edx]
sub	edx, 4
test	ebp, ebp
jnz	loc_6421EBC4
dec	eax
mov	ebx, eax
mov	esi, [ecx+edx]
sub	edx, 4
test	esi, esi
jnz	loc_6421EBC4
dec	eax
mov	ebx, eax
mov	edi, [ecx+edx]
sub	edx, 4
test	edi, edi
jnz	loc_6421EBC4
dec	eax
			
mov	esi, eax
mov	ebx, eax
test	eax, eax
jz	loc_6421E8DD
lea	ebp, [edx-4]
mov	[esp+5Ch+var_34], ebp
mov	edi, [ecx+edx]
test	edi, edi
jnz	loc_6421EBC4
lea	edi, [eax-1]
mov	eax, edi
lea	ebx, [esi-1]
lea	ebp, [edx-8]
mov	[esp+5Ch+var_3C], ebp
mov	ebp, [esp+5Ch+var_34]
mov	ebp, [ecx+ebp]
test	ebp, ebp
jnz	loc_6421EBC4
dec	eax
lea	ebx, [esi-2]
lea	ebp, [edx-0Ch]
mov	[esp+5Ch+var_34], ebp
mov	ebp, [esp+5Ch+var_3C]
mov	ebp, [ecx+ebp]
test	ebp, ebp
jnz	loc_6421EBC4
lea	eax, [edi-2]
lea	ebx, [esi-3]
lea	ebp, [edx-10h]
mov	[esp+5Ch+var_3C], ebp
mov	ebp, [esp+5Ch+var_34]
mov	ebp, [ecx+ebp]
test	ebp, ebp
jnz	loc_6421EBC4
lea	eax, [edi-3]
lea	ebx, [esi-4]
lea	ebp, [edx-14h]
mov	[esp+5Ch+var_34], ebp
mov	ebp, [esp+5Ch+var_3C]
mov	ebp, [ecx+ebp]
test	ebp, ebp
jnz	loc_6421EBC4
lea	eax, [edi-4]
lea	ebx, [esi-5]
lea	ebp, [edx-18h]
mov	[esp+5Ch+var_3C], ebp
mov	ebp, [esp+5Ch+var_34]
mov	ebp, [ecx+ebp]
test	ebp, ebp
jnz	loc_6421EBC4
lea	eax, [edi-5]
lea	ebx, [esi-6]
lea	ebp, [edx-1Ch]
mov	[esp+5Ch+var_34], ebp
mov	ebp, [esp+5Ch+var_3C]
mov	ebp, [ecx+ebp]
test	ebp, ebp
jnz	loc_6421EBC4
lea	eax, [edi-6]
lea	ebx, [esi-7]
sub	edx, 20h
mov	ebp, [esp+5Ch+var_34]
mov	esi, [ecx+ebp]
test	esi, esi
jnz	loc_6421EBC4
lea	eax, [edi-7]
mov	esi, eax
mov	ebx, eax
test	eax, eax
jnz	loc_6421E7FC
mov	ebx, [esp+5Ch+x]
mov	dword ptr [ebx], 0
mov	edx, [esp+5Ch+x]
mov	dword ptr [edx+8], 0
mov	ebx, [edx]
mov	esi, [esp+5Ch+var_30]
test	esi, esi
jg	loc_6421DCC4
mov	esi, ecx
mov	[esp+5Ch+var_24], 0
jmp	loc_6421DFB5
align 10h
			
mov	edx, [esp+5Ch+x]
mov	[edx], eax
mov	edi, [esp+5Ch+n]
mov	ecx, [edi]
mov	[esp+5Ch+var_34], ecx
cmp	ecx, ebx
jl	loc_6421E2AE
jg	loc_6421EBAC
mov	eax, [esp+5Ch+x]
mov	ecx, [eax+0Ch]
mov	i, [esp+5Ch+n]
mov	eax, [edx+0Ch]
test	ebx, ebx
jle	loc_6421E2B5
lea	ebp, [ebx-1]
lea	edx, ds:0[ebp*4]
lea	tmpx1, [ecx+edx]
lea	edx, [eax+edx]
mov	edi, [edx]
cmp	edi, [esi]
jb	loc_6421E2B5
ja	loc_6421EBAC
xor	eax, eax
xor	edi, edi
and	ebp, 7
jz	loc_6421EAB1
mov	edi, 1
cmp	edi, ebx
jge	loc_6421E2B5
mov	eax, [edx-4]
cmp	[esi-4], eax
ja	loc_6421E2B5
mov	eax, 0FFFFFFFCh
jb	loc_6421EBAC
cmp	ebp, 1
jz	loc_6421EAB1
cmp	ebp, 2
jz	loc_6421EA89
cmp	ebp, 3
jz	loc_6421EA61
cmp	ebp, 4
jz	loc_6421EA39
cmp	ebp, 5
jz	short loc_6421EA11
cmp	ebp, 6
jz	short loc_6421E9E9
inc	edi
mov	ebp, [esi-8]
mov	[esp+5Ch+var_2C], ebp
mov	ebp, [edx-8]
mov	[esp+5Ch+var_3C], ebp
cmp	[esp+5Ch+var_2C], ebp
ja	loc_6421E2B5
sub	eax, 4
cmp	[esp+5Ch+var_2C], ebp
jb	loc_6421EBAC
inc	edi
mov	ebp, [esi+eax-4]
mov	[esp+5Ch+var_2C], ebp
mov	ebp, [edx+eax-4]
mov	[esp+5Ch+var_3C], ebp
cmp	[esp+5Ch+var_2C], ebp
ja	loc_6421E2B5
sub	eax, 4
cmp	[esp+5Ch+var_2C], ebp
jb	loc_6421EBAC
inc	edi
mov	ebp, [esi+eax-4]
mov	[esp+5Ch+var_2C], ebp
mov	ebp, [edx+eax-4]
mov	[esp+5Ch+var_3C], ebp
cmp	[esp+5Ch+var_2C], ebp
ja	loc_6421E2B5
sub	eax, 4
cmp	[esp+5Ch+var_2C], ebp
jb	loc_6421EBAC
inc	edi
mov	ebp, [esi+eax-4]
mov	[esp+5Ch+var_2C], ebp
mov	ebp, [edx+eax-4]
mov	[esp+5Ch+var_3C], ebp
cmp	[esp+5Ch+var_2C], ebp
ja	loc_6421E2B5
sub	eax, 4
cmp	[esp+5Ch+var_2C], ebp
jb	loc_6421EBAC
inc	edi
mov	ebp, [esi+eax-4]
mov	[esp+5Ch+var_2C], ebp
mov	ebp, [edx+eax-4]
mov	[esp+5Ch+var_3C], ebp
cmp	[esp+5Ch+var_2C], ebp
ja	loc_6421E2B5
sub	eax, 4
cmp	[esp+5Ch+var_2C], ebp
jb	loc_6421EBAC
inc	edi
mov	ebp, [esi+eax-4]
mov	[esp+5Ch+var_2C], ebp
mov	ebp, [edx+eax-4]
mov	[esp+5Ch+var_3C], ebp
cmp	[esp+5Ch+var_2C], ebp
ja	loc_6421E2B5
sub	eax, 4
cmp	[esp+5Ch+var_2C], ebp
jb	loc_6421EBAC
			
mov	[esp+5Ch+var_3C], ecx
inc	edi
mov	[esp+5Ch+var_24], edi
cmp	edi, ebx
jge	loc_6421EC17
mov	ebp, [esi+eax-4]
mov	edi, [edx+eax-4]
cmp	ebp, edi
ja	loc_6421EC17
lea	ecx, [eax-4]
cmp	ebp, edi
jb	loc_6421EBAC
mov	ebp, [esi+ecx-4]
mov	edi, [edx+ecx-4]
mov	[esp+5Ch+var_2C], edi
cmp	ebp, edi
ja	loc_6421EC17
lea	edi, [eax-8]
cmp	ebp, [esp+5Ch+var_2C]
jb	loc_6421EBAC
mov	ebp, [esi+edi-4]
mov	[esp+5Ch+var_40], ebp
mov	edi, [edx+edi-4]
cmp	ebp, edi
ja	loc_6421EC17
lea	ebp, [eax-0Ch]
mov	[esp+5Ch+var_2C], ebp
cmp	[esp+5Ch+var_40], edi
jb	loc_6421EBAC
mov	edi, [esi+ebp-4]
mov	[esp+5Ch+var_40], edi
mov	ebp, [edx+ebp-4]
cmp	[esp+5Ch+var_40], ebp
ja	loc_6421EC17
sub	eax, 10h
cmp	[esp+5Ch+var_40], ebp
jb	short loc_6421EBAC
mov	edi, [esi+eax-4]
mov	ebp, [edx+eax-4]
cmp	edi, ebp
ja	loc_6421EC17
lea	eax, [ecx-10h]
cmp	edi, ebp
jb	short loc_6421EBAC
mov	edi, [esi+eax-4]
mov	ebp, [edx+eax-4]
cmp	edi, ebp
ja	loc_6421EC17
lea	eax, [ecx-14h]
cmp	edi, ebp
jb	short loc_6421EBAC
mov	edi, [esi+eax-4]
mov	ebp, [edx+eax-4]
cmp	edi, ebp
ja	loc_6421EC17
lea	eax, [ecx-18h]
cmp	edi, ebp
jb	short loc_6421EBAC
mov	edi, [esp+5Ch+var_24]
add	edi, 7
mov	ebp, [esi+eax-4]
mov	eax, [edx+eax-4]
mov	[esp+5Ch+var_2C], eax
cmp	ebp, eax
ja	short loc_6421EC17
lea	eax, [ecx-1Ch]
cmp	ebp, [esp+5Ch+var_2C]
jnb	loc_6421EAB5
nop
			
xor	eax, eax
add	esp, 4Ch
pop	ebx
pop	tmpx1
pop	edi
pop	ebp
retn
align 4
			
mov	[esp+5Ch+var_24], ecx
jmp	loc_6421E3DB
align 4
			
mov	esi, [esp+5Ch+x]
mov	[esi], eax
jmp	loc_6421DCB8
align 10h
			
mov	[esp+5Ch+var_24], esi
mov	ebp, [esp+5Ch+var_3C]
jmp	loc_6421E627
align 10h
mov	i, ecx
mov	[esp+5Ch+var_34], ecx
xor	esi, esi
mov	[esp+5Ch+var_3C], 0
jmp	loc_6421E410
align 4
jz	loc_6421E28F
mov	tmpx1, [esp+5Ch+x]
mov	ebx, [eax]
jmp	loc_6421E29C
align 4
jz	loc_6421E8E7
jmp	loc_6421DCB8
			
mov	ecx, [esp+5Ch+var_3C]
jmp	loc_6421E2B5
lea	esi, [ebx+40h]
mov	ebp, 20h
mov	tmpx1, ebx
cdq
idiv	ebp
sub	esi, edx
lea	ebp, ds:0[esi*4]
mov	[esp+5Ch+var_58], ebp 
mov	[esp+5Ch+var_5C], ecx 
call	_realloc
test	eax, eax
jz	loc_6421ED41
mov	ecx, [esp+5Ch+x]
mov	[ecx+0Ch], eax
mov	edx, [ecx+4]
mov	[ecx+4], esi
cmp	esi, edx
jle	loc_6421ED2B
lea	edi, [eax+edx*4]
mov	ecx, edx
not	ecx
add	ecx, esi
and	ecx, 7
mov	dword ptr [edi], 0
inc	edx
lea	eax, [edi+4]
cmp	esi, edx
jle	loc_6421ED2B
test	ecx, ecx
jz	short loc_6421ECEA
cmp	ecx, 1
jz	short loc_6421ECDC
cmp	ecx, 2
jz	short loc_6421ECD2
cmp	ecx, 3
jz	short loc_6421ECC8
cmp	ecx, 4
jz	short loc_6421ECBE
cmp	ecx, 5
jz	short loc_6421ECB4
cmp	ecx, 6
jz	short loc_6421ECAA
mov	dword ptr [edi+4], 0
inc	edx
add	eax, 4
mov	dword ptr [eax], 0
inc	edx
add	eax, 4
mov	dword ptr [eax], 0
inc	edx
add	eax, 4
mov	dword ptr [eax], 0
inc	edx
add	eax, 4
mov	dword ptr [eax], 0
inc	edx
add	eax, 4
mov	dword ptr [eax], 0
inc	edx
add	eax, 4
mov	dword ptr [eax], 0
inc	edx
add	eax, 4
cmp	esi, edx
jle	short loc_6421ED2B
			
mov	dword ptr [eax], 0
mov	dword ptr [eax+4], 0
mov	dword ptr [eax+8], 0
mov	dword ptr [eax+0Ch], 0
mov	dword ptr [eax+10h], 0
mov	dword ptr [eax+14h], 0
mov	dword ptr [eax+18h], 0
mov	dword ptr [eax+1Ch], 0
add	edx, 8
add	eax, 20h
cmp	esi, edx
jg	short loc_6421ECEA
			
mov	eax, [esp+5Ch+x]
mov	edx, [eax]
mov	[esp+5Ch+var_2C], edx
mov	esi, [esp+5Ch+x]
mov	ecx, [esi+0Ch]
jmp	loc_6421E2C6
mov	edx, [esp+5Ch+x]
mov	ebx, [edx]
mov	ecx, [edx+0Ch]
jmp	loc_6421DCB8
lea	ebx, [eax+40h]
mov	edi, 20h
cdq
idiv	edi
sub	ebx, edx
lea	ecx, ds:0[ebx*4]
mov	[esp+5Ch+var_58], ecx 
mov	esi, [esp+5Ch+x]
mov	edx, [esi+0Ch]
mov	[esp+5Ch+var_5C], edx 
call	_realloc
mov	ecx, eax
mov	eax, 0FFFFFFFEh
test	tmpx1, tmpx1
jz	loc_6421EBAE
mov	[esi+0Ch], tmpx1
mov	edx, [esi+4]
mov	[esi+4], ebx
lea	err, [tmpx1+edx*4]
jmp	short loc_6421ED9D
mov	dword ptr [eax], 0
inc	edx
add	eax, 4
cmp	ebx, edx
jg	short loc_6421ED93
jmp	loc_6421DC9B
align 4
public _tma_mp_reduce_2k
			
push	ebp
push	edi
push	esi
push	ebx
sub	esp, 6Ch
mov	[esp+7Ch+var_7C], 80h 
call	_malloc
test	eax, eax
jz	loc_64220360
xor	edx, edx
mov	dword ptr [eax+edx*4], 0
mov	dword ptr [eax+edx*4+4], 0
mov	dword ptr [eax+edx*4+8], 0
mov	dword ptr [eax+edx*4+0Ch], 0
mov	dword ptr [eax+edx*4+10h], 0
mov	dword ptr [eax+edx*4+14h], 0
mov	dword ptr [eax+edx*4+18h], 0
mov	dword ptr [eax+edx*4+1Ch], 0
add	edx, 8
cmp	edx, 20h
jnz	short loc_6421EDC5
mov	[esp+7Ch+q.dp],	eax
mov	[esp+7Ch+q.used], 0
mov	[esp+7Ch+q.alloc], 20h
mov	[esp+7Ch+q.sign], 0
mov	edx, [esp+7Ch+n]
mov	eax, [edx]
test	eax, eax
jnz	loc_6421FEAC
mov	[esp+7Ch+var_30], 0
lea	ecx, [esp+7Ch+q]
mov	[esp+7Ch+var_38], ecx
lea	esi, [esi+0]
			
mov	ebp, [esp+7Ch+a]
mov	[esp+7Ch+var_70], ebp 
mov	edi, [esp+7Ch+var_38]
mov	[esp+7Ch+c], edi 
mov	esi, [esp+7Ch+var_30]
mov	[esp+7Ch+b], esi 
mov	[esp+7Ch+var_7C], ebp 
call	_tma_mp_div_2d
mov	[esp+7Ch+var_3C], eax
test	eax, eax
jnz	loc_6422002B
cmp	[esp+7Ch+d], 1
jz	loc_6421FFB4
mov	ebp, [esp+7Ch+q.used]
mov	[esp+7Ch+var_5C], ebp
mov	eax, [esp+7Ch+q.alloc]
cmp	ebp, eax
jge	loc_6421FFD0
mov	eax, [esp+7Ch+q.dp]
mov	[esp+7Ch+var_58], eax
mov	ebx, ebp
inc	ebx
			
mov	edx, [esp+7Ch+q.sign]
mov	[esp+7Ch+var_48], edx
mov	ecx, [esp+7Ch+var_5C]
test	ecx, ecx
jle	loc_6421FFF9
mov	ebp, [esp+7Ch+var_5C]
dec	ebp
and	ebp, 3
mov	eax, [esp+7Ch+d]
mov	ecx, [esp+7Ch+var_58]
mul	dword ptr [ecx]
mov	esi, eax
mov	edi, edx
add	ecx, 4
mov	[esp+7Ch+var_34], ecx
mov	edx, eax
and	edx, 0FFFFFFFh
mov	ecx, [esp+7Ch+var_58]
mov	[ecx], edx
shrd	esi, edi, 1Ch
shr	edi, 1Ch
mov	ecx, esi
mov	[esp+7Ch+var_60], 1
mov	edi, [esp+7Ch+var_34]
mov	[esp+7Ch+var_54], edi
mov	eax, [esp+7Ch+var_5C]
cmp	[esp+7Ch+var_60], eax
jz	loc_6421F0A5
test	ebp, ebp
jz	loc_6421EFEF
cmp	ebp, 1
jz	loc_6421EFA9
cmp	ebp, 2
jz	short loc_6421EF6A
mov	esi, ecx
xor	edi, edi
mov	eax, [esp+7Ch+d]
mov	ecx, [esp+7Ch+var_34]
mul	dword ptr [ecx]
add	esi, eax
adc	edi, edx
mov	ebp, [esp+7Ch+var_58]
add	ebp, 8
mov	[esp+7Ch+var_34], ebp
mov	edx, esi
and	edx, 0FFFFFFFh
mov	eax, [esp+7Ch+var_54]
mov	[eax], edx
shrd	esi, edi, 1Ch
shr	edi, 1Ch
mov	ecx, esi
mov	[esp+7Ch+var_60], 2
mov	[esp+7Ch+var_54], ebp
mov	esi, ecx
xor	edi, edi
mov	eax, [esp+7Ch+d]
mov	ecx, [esp+7Ch+var_34]
mul	dword ptr [ecx]
add	esi, eax
adc	edi, edx
add	ecx, 4
mov	[esp+7Ch+var_34], ecx
mov	eax, esi
and	eax, 0FFFFFFFh
mov	ebp, [esp+7Ch+var_54]
mov	[ebp+0], eax
shrd	esi, edi, 1Ch
shr	edi, 1Ch
mov	ecx, esi
inc	[esp+7Ch+var_60]
mov	esi, [esp+7Ch+var_34]
mov	[esp+7Ch+var_54], esi
mov	esi, ecx
xor	edi, edi
mov	eax, [esp+7Ch+d]
mov	ebp, [esp+7Ch+var_34]
mul	dword ptr [ebp+0]
add	esi, eax
adc	edi, edx
add	ebp, 4
mov	[esp+7Ch+var_34], ebp
mov	edx, esi
and	edx, 0FFFFFFFh
mov	eax, [esp+7Ch+var_54]
mov	[eax], edx
shrd	esi, edi, 1Ch
shr	edi, 1Ch
mov	ecx, esi
inc	[esp+7Ch+var_60]
mov	edi, [esp+7Ch+var_5C]
cmp	[esp+7Ch+var_60], edi
jz	loc_6421F0A5
			
mov	esi, ecx
xor	edi, edi
mov	eax, [esp+7Ch+d]
mov	ebp, [esp+7Ch+var_34]
mul	dword ptr [ebp+0]
add	esi, eax
adc	edi, edx
mov	edx, esi
and	edx, 0FFFFFFFh
mov	ebp, [esp+7Ch+var_34]
mov	[ebp+0], edx
shrd	esi, edi, 1Ch
shr	edi, 1Ch
xor	edi, edi
mov	eax, [esp+7Ch+d]
mul	dword ptr [ebp+4]
add	esi, eax
adc	edi, edx
mov	ecx, esi
and	ecx, 0FFFFFFFh
mov	[ebp+4], ecx
shrd	esi, edi, 1Ch
shr	edi, 1Ch
xor	edi, edi
mov	eax, [esp+7Ch+d]
mul	dword ptr [ebp+8]
add	esi, eax
adc	edi, edx
mov	ecx, ebp
add	ecx, 0Ch
mov	eax, esi
and	eax, 0FFFFFFFh
mov	edx, [esp+7Ch+var_34]
mov	[edx+8], eax
shrd	esi, edi, 1Ch
shr	edi, 1Ch
xor	edi, edi
mov	eax, [esp+7Ch+d]
mov	ebp, edx
mul	dword ptr [edx+0Ch]
add	esi, eax
adc	edi, edx
add	ebp, 10h
mov	[esp+7Ch+var_34], ebp
mov	eax, esi
and	eax, 0FFFFFFFh
mov	[ecx], eax
shrd	esi, edi, 1Ch
shr	edi, 1Ch
mov	ecx, esi
add	[esp+7Ch+var_60], 4
mov	ebp, [esp+7Ch+var_5C]
cmp	[esp+7Ch+var_60], ebp
jnz	loc_6421EFEF
			
mov	edi, [esp+7Ch+var_60]
mov	eax, [esp+7Ch+var_58]
mov	[eax+edi*4], esi
mov	esi, [esp+7Ch+var_48]
mov	[esp+7Ch+q.sign], esi
mov	[esp+7Ch+q.used], ebx
cmp	ebx, 0
jle	loc_64220354
mov	edx, [esp+7Ch+q.dp]
lea	eax, [ebx-1]
mov	ecx, [edx+eax*4]
test	ecx, ecx
jnz	loc_6421F229
lea	edx, [edx+ebx*4-8]
mov	ecx, eax
and	ecx, 7
jz	loc_6421F176
mov	ebx, eax
mov	esi, [edx]
sub	edx, 4
test	esi, esi
jnz	loc_6421FFA8
lea	eax, [eax-1]
cmp	ecx, 1
jz	short loc_6421F176
cmp	ecx, 2
jz	short loc_6421F166
cmp	ecx, 3
jz	short loc_6421F156
cmp	ecx, 4
jz	short loc_6421F146
cmp	ecx, 5
jz	short loc_6421F136
cmp	ecx, 6
jz	short loc_6421F126
mov	ebx, eax
mov	ecx, [edx]
sub	edx, 4
test	ecx, ecx
jnz	loc_6421FFA8
dec	eax
mov	ebx, eax
mov	ebp, [edx]
sub	edx, 4
test	ebp, ebp
jnz	loc_6421FFA8
dec	eax
mov	ebx, eax
mov	edi, [edx]
sub	edx, 4
test	edi, edi
jnz	loc_6421FFA8
dec	eax
mov	ebx, eax
mov	esi, [edx]
sub	edx, 4
test	esi, esi
jnz	loc_6421FFA8
dec	eax
mov	ebx, eax
mov	ecx, [edx]
sub	edx, 4
test	ecx, ecx
jnz	loc_6421FFA8
dec	eax
mov	ebx, eax
mov	ebp, [edx]
sub	edx, 4
test	ebp, ebp
jnz	loc_6421FFA8
dec	eax
			
mov	ecx, eax
mov	ebx, eax
test	eax, eax
jz	loc_6421F215
mov	ebp, [edx]
test	ebp, ebp
jnz	loc_6421FFA8
lea	esi, [eax-1]
mov	eax, esi
lea	ebx, [ecx-1]
mov	edi, [edx-4]
test	edi, edi
jnz	loc_6421FFA8
dec	eax
lea	ebx, [ecx-2]
mov	edi, [edx-8]
test	edi, edi
jnz	loc_6421FFA8
lea	eax, [esi-2]
lea	ebx, [ecx-3]
mov	ebp, [edx-0Ch]
test	ebp, ebp
jnz	loc_6421FFA8
lea	eax, [esi-3]
lea	ebx, [ecx-4]
mov	edi, [edx-10h]
test	edi, edi
jnz	loc_6421FFA8
lea	eax, [esi-4]
lea	ebx, [ecx-5]
mov	ebp, [edx-14h]
test	ebp, ebp
jnz	loc_6421FFA8
lea	eax, [esi-5]
lea	ebx, [ecx-6]
mov	edi, [edx-18h]
test	edi, edi
jnz	loc_6421FFA8
lea	eax, [esi-6]
lea	ebx, [ecx-7]
mov	ecx, [edx-1Ch]
sub	edx, 20h
test	ecx, ecx
jnz	loc_6421FFA8
lea	eax, [esi-7]
mov	ecx, eax
mov	ebx, eax
test	eax, eax
jnz	loc_6421F182
mov	[esp+7Ch+q.used], 0
mov	[esp+7Ch+q.sign], 0
mov	ebx, [esp+7Ch+q.used]
			
mov	edx, [esp+7Ch+a]
mov	edi, [edx]
mov	[esp+7Ch+var_5C], edi
cmp	edi, ebx
jle	loc_6421FF3C
mov	[esp+7Ch+var_58], ebx
mov	ebx, edi
mov	eax, [esp+7Ch+a]
mov	[esp+7Ch+var_34], eax
mov	ecx, [esp+7Ch+a]
mov	eax, [ecx+4]
cmp	eax, ebx
jle	loc_6421FF5E
lea	edi, [ebx+1]
mov	[esp+7Ch+var_44], edi
mov	ecx, [ecx+0Ch]
			
mov	esi, [esp+7Ch+var_44]
mov	edx, [esp+7Ch+a]
mov	[edx], esi
mov	edx, ecx
mov	esi, [esp+7Ch+q.dp]
mov	edi, [esp+7Ch+var_58]
test	edi, edi
jle	loc_64220044
mov	ebp, ecx
mov	eax, ecx
xor	edx, edx
mov	[esp+7Ch+var_54], 0
mov	edi, [esp+7Ch+var_58]
dec	edi
and	edi, 3
jz	loc_64220018
mov	edx, [esi]
add	edx, [ecx]
lea	eax, [ecx+4]
mov	ebp, edx
shr	ebp, 1Ch
mov	[esp+7Ch+var_54], ebp
and	edx, 0FFFFFFFh
mov	[ecx], edx
mov	edx, 1
mov	ebp, eax
cmp	edi, 1
jz	loc_6421FFC0
cmp	edi, 2
jz	short loc_6421F2F8
mov	edx, [esp+7Ch+var_54]
add	edx, [esi+4]
add	edx, [eax]
lea	eax, [ecx+8]
mov	edi, edx
shr	edi, 1Ch
mov	[esp+7Ch+var_54], edi
and	edx, 0FFFFFFFh
mov	[ebp+0], edx
mov	edx, 2
mov	ebp, eax
mov	edi, [esp+7Ch+var_54]
add	edi, [esi+edx*4]
mov	[esp+7Ch+var_48], edi
mov	edi, [eax]
add	[esp+7Ch+var_48], edi
add	eax, 4
mov	edi, [esp+7Ch+var_48]
shr	edi, 1Ch
mov	[esp+7Ch+var_54], edi
mov	edi, [esp+7Ch+var_48]
and	edi, 0FFFFFFFh
mov	[ebp+0], edi
inc	edx
mov	ebp, eax
mov	[esp+7Ch+var_48], ebx
mov	edi, [esp+7Ch+var_54]
jmp	short loc_6421F37F
align 4
add	edi, [esi+ebx*4]
mov	ebx, [eax+4]
add	ebx, edi
mov	edi, ebx
shr	edi, 1Ch
and	ebx, 0FFFFFFFh
mov	[eax+4], ebx
add	edi, [esi+edx*4+8]
add	edi, [eax+8]
lea	ebp, [eax+0Ch]
mov	ebx, edi
shr	ebx, 1Ch
and	edi, 0FFFFFFFh
mov	[eax+8], edi
add	ebx, [esi+edx*4+0Ch]
add	ebx, [eax+0Ch]
add	eax, 10h
mov	edi, ebx
shr	edi, 1Ch
and	ebx, 0FFFFFFFh
mov	[ebp+0], ebx
add	edx, 4
mov	ebp, eax
			
mov	ebx, [esi+edx*4]
add	ebx, [eax]
add	ebx, edi
mov	edi, ebx
shr	edi, 1Ch
and	ebx, 0FFFFFFFh
mov	[ebp+0], ebx
lea	ebx, [edx+1]
cmp	ebx, [esp+7Ch+var_58]
jnz	short loc_6421F334
mov	[esp+7Ch+var_54], ebx
mov	ebx, [esp+7Ch+var_48]
mov	eax, [esp+7Ch+var_58]
lea	edx, [ecx+eax*4]
cmp	ebx, [esp+7Ch+var_58]
jz	loc_6421F5DB
cmp	ebx, [esp+7Ch+var_54]
jle	loc_6421F5DB
mov	ebp, [esp+7Ch+var_54]
shl	ebp, 2
mov	esi, [esp+7Ch+var_34]
mov	eax, [esi+0Ch]
add	ebp, eax
mov	[esp+7Ch+var_48], ebp
mov	esi, [esp+7Ch+var_54]
not	esi
lea	ebp, [esi+ebx]
and	ebp, 7
mov	eax, edi
mov	edi, [esp+7Ch+var_48]
add	eax, [edi]
mov	edi, eax
shr	edi, 1Ch
and	eax, 0FFFFFFFh
mov	[edx], eax
lea	eax, [edx+4]
mov	esi, [esp+7Ch+var_54]
inc	esi
mov	[esp+7Ch+var_34], esi
mov	esi, [esp+7Ch+var_48]
add	esi, 4
cmp	ebx, [esp+7Ch+var_34]
jle	loc_6421F5CE
test	ebp, ebp
jz	loc_6421F52B
cmp	ebp, 1
jz	loc_6421F502
cmp	ebp, 2
jz	loc_6421F4E3
cmp	ebp, 3
jz	loc_6421F4C4
cmp	ebp, 4
jz	short loc_6421F4A5
cmp	ebp, 5
jz	short loc_6421F486
cmp	ebp, 6
jz	short loc_6421F467
mov	ebp, [esp+7Ch+var_48]
add	edi, [ebp+4]
mov	[esp+7Ch+var_58], edi
shr	edi, 1Ch
mov	ebp, [esp+7Ch+var_58]
and	ebp, 0FFFFFFFh
mov	[eax], ebp
add	eax, 4
inc	[esp+7Ch+var_34]
add	esi, 4
add	edi, [esi]
mov	[esp+7Ch+var_58], edi
shr	edi, 1Ch
mov	ebp, [esp+7Ch+var_58]
and	ebp, 0FFFFFFFh
mov	[eax], ebp
add	eax, 4
inc	[esp+7Ch+var_34]
add	esi, 4
add	edi, [esi]
mov	[esp+7Ch+var_58], edi
shr	edi, 1Ch
mov	ebp, [esp+7Ch+var_58]
and	ebp, 0FFFFFFFh
mov	[eax], ebp
add	eax, 4
inc	[esp+7Ch+var_34]
add	esi, 4
add	edi, [esi]
mov	[esp+7Ch+var_58], edi
shr	edi, 1Ch
mov	ebp, [esp+7Ch+var_58]
and	ebp, 0FFFFFFFh
mov	[eax], ebp
add	eax, 4
inc	[esp+7Ch+var_34]
add	esi, 4
add	edi, [esi]
mov	[esp+7Ch+var_58], edi
shr	edi, 1Ch
mov	ebp, [esp+7Ch+var_58]
and	ebp, 0FFFFFFFh
mov	[eax], ebp
add	eax, 4
inc	[esp+7Ch+var_34]
add	esi, 4
add	edi, [esi]
mov	[esp+7Ch+var_58], edi
shr	edi, 1Ch
mov	ebp, [esp+7Ch+var_58]
and	ebp, 0FFFFFFFh
mov	[eax], ebp
add	eax, 4
inc	[esp+7Ch+var_34]
add	esi, 4
add	edi, [esi]
mov	[esp+7Ch+var_58], edi
shr	edi, 1Ch
mov	ebp, [esp+7Ch+var_58]
and	ebp, 0FFFFFFFh
mov	[eax], ebp
add	eax, 4
inc	[esp+7Ch+var_34]
add	esi, 4
cmp	ebx, [esp+7Ch+var_34]
jle	loc_6421F5CE
mov	[esp+7Ch+var_58], edx
mov	ebp, [esp+7Ch+var_34]
add	edi, [esi]
mov	edx, edi
shr	edx, 1Ch
and	edi, 0FFFFFFFh
mov	[eax], edi
add	edx, [esi+4]
mov	edi, edx
shr	edi, 1Ch
and	edx, 0FFFFFFFh
mov	[eax+4], edx
add	edi, [esi+8]
mov	edx, edi
shr	edx, 1Ch
and	edi, 0FFFFFFFh
mov	[eax+8], edi
add	edx, [esi+0Ch]
mov	edi, edx
shr	edi, 1Ch
and	edx, 0FFFFFFFh
mov	[eax+0Ch], edx
add	edi, [esi+10h]
mov	edx, edi
shr	edx, 1Ch
and	edi, 0FFFFFFFh
mov	[eax+10h], edi
add	edx, [esi+14h]
mov	edi, edx
shr	edi, 1Ch
and	edx, 0FFFFFFFh
mov	[eax+14h], edx
add	edi, [esi+18h]
mov	edx, edi
shr	edx, 1Ch
and	edi, 0FFFFFFFh
mov	[eax+18h], edi
add	edx, [esi+1Ch]
mov	edi, edx
shr	edi, 1Ch
and	edx, 0FFFFFFFh
mov	[eax+1Ch], edx
add	eax, 20h
add	ebp, 8
add	esi, 20h
cmp	ebx, ebp
jg	loc_6421F533
mov	edx, [esp+7Ch+var_58]
			
mov	ebx, [esp+7Ch+var_54]
not	ebx
add	ebx, [esp+7Ch+var_44]
lea	edx, [edx+ebx*4]
			
mov	[edx], edi
mov	ebp, [esp+7Ch+a]
mov	esi, [ebp+0]
mov	ebx, esi
cmp	esi, [esp+7Ch+var_5C]
jge	loc_6421F6CA
mov	edi, esi
not	edi
add	edi, [esp+7Ch+var_5C]
and	edi, 7
mov	dword ptr [edx+4], 0
lea	eax, [edx+8]
lea	ebx, [esi+1]
cmp	ebx, [esp+7Ch+var_5C]
jge	loc_6421F6C8
test	edi, edi
jz	short loc_6421F685
cmp	edi, 1
jz	short loc_6421F675
cmp	edi, 2
jz	short loc_6421F66B
cmp	edi, 3
jz	short loc_6421F661
cmp	edi, 4
jz	short loc_6421F657
cmp	edi, 5
jz	short loc_6421F64D
cmp	edi, 6
jz	short loc_6421F643
mov	dword ptr [eax], 0
lea	eax, [edx+0Ch]
lea	ebx, [esi+2]
mov	dword ptr [eax], 0
add	eax, 4
inc	ebx
mov	dword ptr [eax], 0
add	eax, 4
inc	ebx
mov	dword ptr [eax], 0
add	eax, 4
inc	ebx
mov	dword ptr [eax], 0
add	eax, 4
inc	ebx
mov	dword ptr [eax], 0
add	eax, 4
inc	ebx
mov	dword ptr [eax], 0
add	eax, 4
inc	ebx
cmp	ebx, [esp+7Ch+var_5C]
jge	short loc_6421F6C8
			
mov	dword ptr [eax], 0
mov	dword ptr [eax+4], 0
mov	dword ptr [eax+8], 0
mov	dword ptr [eax+0Ch], 0
mov	dword ptr [eax+10h], 0
mov	dword ptr [eax+14h], 0
mov	dword ptr [eax+18h], 0
mov	dword ptr [eax+1Ch], 0
add	eax, 20h
add	ebx, 8
cmp	ebx, [esp+7Ch+var_5C]
jl	short loc_6421F685
			
mov	ebx, esi
cmp	esi, 0
jle	loc_64220068
lea	eax, [esi-1]
mov	edi, [ecx+eax*4]
test	edi, edi
jnz	loc_6421F896
lea	edx, ds:0FFFFFFF8h[esi*4]
mov	edi, eax
and	edi, 7
jz	loc_6421F78A
mov	ebx, eax
mov	ebp, [ecx+edx]
sub	edx, 4
test	ebp, ebp
jnz	loc_6421FF88
lea	eax, [esi-2]
cmp	edi, 1
jz	short loc_6421F78A
cmp	edi, 2
jz	short loc_6421F779
cmp	edi, 3
jz	short loc_6421F768
cmp	edi, 4
jz	short loc_6421F757
cmp	edi, 5
jz	short loc_6421F746
cmp	edi, 6
jz	short loc_6421F735
mov	ebx, eax
mov	esi, [ecx+edx]
sub	edx, 4
test	esi, esi
jnz	loc_6421FF88
dec	eax
mov	ebx, eax
mov	edi, [ecx+edx]
sub	edx, 4
test	edi, edi
jnz	loc_6421FF88
dec	eax
mov	ebx, eax
mov	ebp, [ecx+edx]
sub	edx, 4
test	ebp, ebp
jnz	loc_6421FF88
dec	eax
mov	ebx, eax
mov	esi, [ecx+edx]
sub	edx, 4
test	esi, esi
jnz	loc_6421FF88
dec	eax
mov	ebx, eax
mov	edi, [ecx+edx]
sub	edx, 4
test	edi, edi
jnz	loc_6421FF88
dec	eax
mov	ebx, eax
mov	ebp, [ecx+edx]
sub	edx, 4
test	ebp, ebp
jnz	loc_6421FF88
dec	eax
			
mov	esi, eax
mov	ebx, eax
test	eax, eax
jz	loc_6421F877
lea	edi, [edx-4]
mov	[esp+7Ch+var_58], edi
mov	ebp, [ecx+edx]
test	ebp, ebp
jnz	loc_6421FF88
lea	edi, [eax-1]
mov	eax, edi
lea	ebx, [esi-1]
lea	ebp, [edx-8]
mov	[esp+7Ch+var_5C], ebp
mov	ebp, [esp+7Ch+var_58]
mov	ebp, [ecx+ebp]
test	ebp, ebp
jnz	loc_6421FF88
dec	eax
lea	ebx, [esi-2]
lea	ebp, [edx-0Ch]
mov	[esp+7Ch+var_58], ebp
mov	ebp, [esp+7Ch+var_5C]
mov	ebp, [ecx+ebp]
test	ebp, ebp
jnz	loc_6421FF88
lea	eax, [edi-2]
lea	ebx, [esi-3]
lea	ebp, [edx-10h]
mov	[esp+7Ch+var_5C], ebp
mov	ebp, [esp+7Ch+var_58]
mov	ebp, [ecx+ebp]
test	ebp, ebp
jnz	loc_6421FF88
lea	eax, [edi-3]
lea	ebx, [esi-4]
lea	ebp, [edx-14h]
mov	[esp+7Ch+var_58], ebp
mov	ebp, [esp+7Ch+var_5C]
mov	ebp, [ecx+ebp]
test	ebp, ebp
jnz	loc_6421FF88
lea	eax, [edi-4]
lea	ebx, [esi-5]
lea	ebp, [edx-18h]
mov	[esp+7Ch+var_5C], ebp
mov	ebp, [esp+7Ch+var_58]
mov	ebp, [ecx+ebp]
test	ebp, ebp
jnz	loc_6421FF88
lea	eax, [edi-5]
lea	ebx, [esi-6]
lea	ebp, [edx-1Ch]
mov	[esp+7Ch+var_58], ebp
mov	ebp, [esp+7Ch+var_5C]
mov	ebp, [ecx+ebp]
test	ebp, ebp
jnz	loc_6421FF88
lea	eax, [edi-6]
lea	ebx, [esi-7]
sub	edx, 20h
mov	esi, [esp+7Ch+var_58]
mov	ebp, [ecx+esi]
test	ebp, ebp
jnz	loc_6421FF88
lea	eax, [edi-7]
mov	esi, eax
mov	ebx, eax
test	eax, eax
jnz	loc_6421F796
mov	eax, [esp+7Ch+a]
mov	dword ptr [eax], 0
xor	esi, esi
mov	edx, [esp+7Ch+a]
mov	dword ptr [edx+8], 0
mov	ebx, esi
			
mov	edi, [esp+7Ch+n]
mov	eax, [edi]
mov	[esp+7Ch+var_58], eax
cmp	eax, ebx
jge	loc_64220074
			
mov	esi, [esp+7Ch+a]
cmp	[esi+4], ebx
jl	loc_64220374
mov	[esp+7Ch+var_54], ebx
mov	edx, [esp+7Ch+a]
mov	[edx], ebx
mov	edx, ecx
mov	eax, [esp+7Ch+n]
mov	edi, [eax+0Ch]
mov	ebp, [esp+7Ch+var_58]
test	ebp, ebp
jle	loc_64220054
mov	ebp, ecx
mov	eax, ecx
xor	edx, edx
mov	[esp+7Ch+var_5C], 0
mov	esi, [esp+7Ch+var_58]
dec	esi
and	esi, 3
jz	loc_6421FF7C
mov	edx, [ecx]
sub	edx, [edi]
lea	eax, [ecx+4]
mov	ebp, edx
shr	ebp, 1Fh
mov	[esp+7Ch+var_5C], ebp
and	edx, 0FFFFFFFh
mov	[ecx], edx
mov	edx, 1
mov	ebp, eax
cmp	esi, 1
jz	loc_6421FF7C
cmp	esi, 2
jz	short loc_6421F94E
mov	edx, [eax]
sub	edx, [edi+4]
sub	edx, [esp+7Ch+var_5C]
lea	eax, [ecx+8]
mov	esi, edx
shr	esi, 1Fh
mov	[esp+7Ch+var_5C], esi
and	edx, 0FFFFFFFh
mov	[ebp+0], edx
mov	edx, 2
mov	ebp, eax
mov	esi, [eax]
mov	[esp+7Ch+var_48], esi
mov	esi, [edi+edx*4]
sub	[esp+7Ch+var_48], esi
mov	esi, [esp+7Ch+var_5C]
sub	[esp+7Ch+var_48], esi
add	eax, 4
mov	esi, [esp+7Ch+var_48]
shr	esi, 1Fh
mov	[esp+7Ch+var_5C], esi
mov	esi, [esp+7Ch+var_48]
and	esi, 0FFFFFFFh
mov	[ebp+0], esi
inc	edx
mov	ebp, eax
mov	[esp+7Ch+var_48], ecx
jmp	short loc_6421F9DB
align 4
mov	esi, [eax+4]
sub	esi, [edi+ebp*4]
sub	esi, ecx
mov	ebp, esi
shr	ebp, 1Fh
and	esi, 0FFFFFFFh
mov	[eax+4], esi
mov	esi, [eax+8]
sub	esi, [edi+edx*4+8]
sub	esi, ebp
lea	ebp, [eax+0Ch]
mov	ecx, esi
shr	ecx, 1Fh
and	esi, 0FFFFFFFh
mov	[eax+8], esi
mov	esi, [eax+0Ch]
sub	esi, [edi+edx*4+0Ch]
sub	esi, ecx
add	eax, 10h
mov	ecx, esi
shr	ecx, 1Fh
mov	[esp+7Ch+var_5C], ecx
and	esi, 0FFFFFFFh
mov	[ebp+0], esi
add	edx, 4
mov	ebp, eax
			
mov	esi, [eax]
sub	esi, [edi+edx*4]
sub	esi, [esp+7Ch+var_5C]
mov	ecx, esi
shr	ecx, 1Fh
mov	[esp+7Ch+var_5C], ecx
and	esi, 0FFFFFFFh
mov	[ebp+0], esi
lea	ebp, [edx+1]
mov	esi, ebp
cmp	ebp, [esp+7Ch+var_58]
jnz	short loc_6421F988
mov	ecx, [esp+7Ch+var_48]
mov	edi, [esp+7Ch+var_58]
lea	edx, [ecx+edi*4]
mov	[esp+7Ch+var_48], edx
cmp	ebx, esi
jle	loc_6421FC44
mov	edi, esi
mov	eax, edx
mov	ebp, esi
not	ebp
add	ebp, ebx
and	ebp, 7
mov	[esp+7Ch+var_58], ebp
jz	loc_64220008
mov	edi, [edx]
sub	edi, [esp+7Ch+var_5C]
lea	eax, [edx+4]
mov	ebp, edi
shr	ebp, 1Fh
mov	[esp+7Ch+var_5C], ebp
and	edi, 0FFFFFFFh
mov	[edx], edi
lea	edi, [esi+1]
mov	edx, eax
cmp	[esp+7Ch+var_58], 1
jz	loc_64220008
cmp	[esp+7Ch+var_58], 2
jz	loc_6421FB51
cmp	[esp+7Ch+var_58], 3
jz	loc_6421FB26
cmp	[esp+7Ch+var_58], 4
jz	loc_6421FAFB
cmp	[esp+7Ch+var_58], 5
jz	short loc_6421FAD0
cmp	[esp+7Ch+var_58], 6
jz	short loc_6421FAA5
mov	edi, [eax]
sub	edi, ebp
lea	eax, [eax+4]
mov	ebp, edi
shr	ebp, 1Fh
mov	[esp+7Ch+var_5C], ebp
and	edi, 0FFFFFFFh
mov	[edx], edi
lea	edi, [esi+2]
mov	edx, eax
mov	ebp, [eax]
mov	[esp+7Ch+var_58], ebp
mov	ebp, [esp+7Ch+var_5C]
sub	[esp+7Ch+var_58], ebp
add	eax, 4
mov	ebp, [esp+7Ch+var_58]
shr	ebp, 1Fh
mov	[esp+7Ch+var_5C], ebp
mov	ebp, [esp+7Ch+var_58]
and	ebp, 0FFFFFFFh
mov	[edx], ebp
inc	edi
mov	edx, eax
mov	ebp, [eax]
mov	[esp+7Ch+var_58], ebp
mov	ebp, [esp+7Ch+var_5C]
sub	[esp+7Ch+var_58], ebp
add	eax, 4
mov	ebp, [esp+7Ch+var_58]
shr	ebp, 1Fh
mov	[esp+7Ch+var_5C], ebp
mov	ebp, [esp+7Ch+var_58]
and	ebp, 0FFFFFFFh
mov	[edx], ebp
inc	edi
mov	edx, eax
mov	ebp, [eax]
mov	[esp+7Ch+var_58], ebp
mov	ebp, [esp+7Ch+var_5C]
sub	[esp+7Ch+var_58], ebp
add	eax, 4
mov	ebp, [esp+7Ch+var_58]
shr	ebp, 1Fh
mov	[esp+7Ch+var_5C], ebp
mov	ebp, [esp+7Ch+var_58]
and	ebp, 0FFFFFFFh
mov	[edx], ebp
inc	edi
mov	edx, eax
mov	ebp, [eax]
mov	[esp+7Ch+var_58], ebp
mov	ebp, [esp+7Ch+var_5C]
sub	[esp+7Ch+var_58], ebp
add	eax, 4
mov	ebp, [esp+7Ch+var_58]
shr	ebp, 1Fh
mov	[esp+7Ch+var_5C], ebp
mov	ebp, [esp+7Ch+var_58]
and	ebp, 0FFFFFFFh
mov	[edx], ebp
inc	edi
mov	edx, eax
mov	ebp, [eax]
mov	[esp+7Ch+var_58], ebp
mov	ebp, [esp+7Ch+var_5C]
sub	[esp+7Ch+var_58], ebp
add	eax, 4
mov	ebp, [esp+7Ch+var_58]
shr	ebp, 1Fh
mov	[esp+7Ch+var_5C], ebp
mov	ebp, [esp+7Ch+var_58]
and	ebp, 0FFFFFFFh
mov	[edx], ebp
inc	edi
mov	edx, eax
mov	[esp+7Ch+var_58], esi
mov	ebp, [esp+7Ch+var_5C]
jmp	loc_6421FC1B
align 4
mov	edx, [eax+4]
sub	edx, ebp
mov	esi, edx
shr	esi, 1Fh
and	edx, 0FFFFFFFh
mov	[eax+4], edx
mov	ebp, [eax+8]
sub	ebp, esi
mov	esi, ebp
shr	esi, 1Fh
and	ebp, 0FFFFFFFh
mov	[eax+8], ebp
mov	edx, [eax+0Ch]
sub	edx, esi
mov	ebp, edx
shr	ebp, 1Fh
and	edx, 0FFFFFFFh
mov	[eax+0Ch], edx
mov	edx, [eax+10h]
sub	edx, ebp
mov	esi, edx
shr	esi, 1Fh
and	edx, 0FFFFFFFh
mov	[eax+10h], edx
mov	ebp, [eax+14h]
sub	ebp, esi
mov	esi, ebp
shr	esi, 1Fh
and	ebp, 0FFFFFFFh
mov	[eax+14h], ebp
mov	edx, [eax+18h]
sub	edx, esi
lea	esi, [eax+1Ch]
mov	ebp, edx
shr	ebp, 1Fh
and	edx, 0FFFFFFFh
mov	[eax+18h], edx
mov	edx, [eax+1Ch]
sub	edx, ebp
add	eax, 20h
mov	ebp, edx
shr	ebp, 1Fh
and	edx, 0FFFFFFFh
mov	[esi], edx
add	edi, 8
mov	edx, eax
			
mov	esi, [eax]
sub	esi, ebp
mov	ebp, esi
shr	ebp, 1Fh
and	esi, 0FFFFFFFh
mov	[edx], esi
lea	edx, [edi+1]
cmp	edx, ebx
jl	loc_6421FB8C
mov	edi, [esp+7Ch+var_58]
sub	ebx, edi
mov	eax, [esp+7Ch+var_48]
lea	edx, [eax+ebx*4]
mov	ebx, [esp+7Ch+a]
mov	esi, [ebx]
mov	ebx, esi
cmp	esi, [esp+7Ch+var_54]
jge	loc_6421FD2F
mov	edi, esi
not	edi
add	edi, [esp+7Ch+var_54]
and	edi, 7
mov	dword ptr [edx], 0
lea	eax, [edx+4]
lea	ebx, [esi+1]
cmp	ebx, [esp+7Ch+var_54]
jge	loc_6421FD2D
test	edi, edi
jz	short loc_6421FCEA
cmp	edi, 1
jz	short loc_6421FCDA
cmp	edi, 2
jz	short loc_6421FCD0
cmp	edi, 3
jz	short loc_6421FCC6
cmp	edi, 4
jz	short loc_6421FCBC
cmp	edi, 5
jz	short loc_6421FCB2
cmp	edi, 6
jz	short loc_6421FCA8
mov	dword ptr [eax], 0
lea	eax, [edx+8]
lea	ebx, [esi+2]
mov	dword ptr [eax], 0
add	eax, 4
inc	ebx
mov	dword ptr [eax], 0
add	eax, 4
inc	ebx
mov	dword ptr [eax], 0
add	eax, 4
inc	ebx
mov	dword ptr [eax], 0
add	eax, 4
inc	ebx
mov	dword ptr [eax], 0
add	eax, 4
inc	ebx
mov	dword ptr [eax], 0
add	eax, 4
inc	ebx
cmp	ebx, [esp+7Ch+var_54]
jge	short loc_6421FD2D
			
mov	dword ptr [eax], 0
mov	dword ptr [eax+4], 0
mov	dword ptr [eax+8], 0
mov	dword ptr [eax+0Ch], 0
mov	dword ptr [eax+10h], 0
mov	dword ptr [eax+14h], 0
mov	dword ptr [eax+18h], 0
mov	dword ptr [eax+1Ch], 0
add	eax, 20h
add	ebx, 8
cmp	ebx, [esp+7Ch+var_54]
jl	short loc_6421FCEA
			
mov	ebx, esi
test	esi, esi
jle	loc_6421FE8F
lea	edx, [esi-1]
mov	ebp, [ecx+edx*4]
test	ebp, ebp
jnz	loc_6421EE4C
lea	eax, ds:0FFFFFFF8h[esi*4]
mov	edi, edx
and	edi, 7
jz	loc_6421FDEA
mov	ebx, edx
test	edx, edx
jle	loc_6421FE86
mov	ebx, [ecx+eax]
sub	eax, 4
test	ebx, ebx
jnz	loc_6421FF98
lea	edx, [esi-2]
cmp	edi, 1
jz	short loc_6421FDEA
cmp	edi, 2
jz	short loc_6421FDDB
cmp	edi, 3
jz	short loc_6421FDCC
cmp	edi, 4
jz	short loc_6421FDBD
cmp	edi, 5
jz	short loc_6421FDAE
cmp	edi, 6
jz	short loc_6421FD9F
mov	ebp, [ecx+eax]
sub	eax, 4
test	ebp, ebp
jnz	loc_6421FF98
dec	edx
mov	esi, [ecx+eax]
sub	eax, 4
test	esi, esi
jnz	loc_6421FF98
dec	edx
mov	edi, [ecx+eax]
sub	eax, 4
test	edi, edi
jnz	loc_6421FF98
dec	edx
mov	ebx, [ecx+eax]
sub	eax, 4
test	ebx, ebx
jnz	loc_6421FF98
dec	edx
mov	ebp, [ecx+eax]
sub	eax, 4
test	ebp, ebp
jnz	loc_6421FF98
dec	edx
mov	esi, [ecx+eax]
sub	eax, 4
test	esi, esi
jnz	loc_6421FF98
dec	edx
			
mov	ebx, edx
test	edx, edx
jle	loc_6421FE86
lea	esi, [eax-4]
mov	edi, [ecx+eax]
test	edi, edi
jnz	loc_6421FF98
lea	ebx, [edx-1]
mov	edx, ebx
lea	edi, [eax-8]
mov	ebp, [ecx+esi]
test	ebp, ebp
jnz	loc_6421FF98
dec	edx
lea	esi, [eax-0Ch]
mov	edi, [ecx+edi]
test	edi, edi
jnz	loc_6421FF98
lea	edx, [ebx-2]
lea	edi, [eax-10h]
mov	ebp, [ecx+esi]
test	ebp, ebp
jnz	loc_6421FF98
lea	edx, [ebx-3]
lea	esi, [eax-14h]
mov	edi, [ecx+edi]
test	edi, edi
jnz	loc_6421FF98
lea	edx, [ebx-4]
lea	edi, [eax-18h]
mov	ebp, [ecx+esi]
test	ebp, ebp
jnz	loc_6421FF98
lea	edx, [ebx-5]
lea	esi, [eax-1Ch]
mov	edi, [ecx+edi]
test	edi, edi
jnz	loc_6421FF98
lea	edx, [ebx-6]
sub	eax, 20h
mov	esi, [ecx+esi]
test	esi, esi
jnz	loc_6421FF98
lea	edx, [ebx-7]
mov	ebx, edx
test	edx, edx
jg	loc_6421FDF4
			
mov	ecx, [esp+7Ch+a]
mov	[ecx], edx
test	ebx, ebx
jnz	loc_6421EE4C
mov	esi, [esp+7Ch+a]
mov	dword ptr [esi+8], 0
jmp	loc_6421EE4C
align 4
dec	eax
lea	ebp, ds:0[eax*4]
lea	edi, ds:0[ebp*8]
sub	edi, ebp
mov	[esp+7Ch+var_30], edi
mov	esi, [esp+7Ch+n]
mov	ebx, [esi+0Ch]
mov	eax, [ebx+eax*4]
test	eax, eax
jz	loc_642205DC
mov	edx, [esp+7Ch+var_30]
lea	ecx, [p+1]
mov	p, ecx
mov	ebx, eax
shr	ebx, 1
jz	short loc_6421FF28
inc	p
mov	ebx, eax
shr	ebx, 2
jz	short loc_6421FF28
lea	p, [ecx+2]
mov	esi, eax
shr	esi, 3
jz	short loc_6421FF28
lea	p, [ecx+3]
mov	edi, eax
shr	edi, 4
jz	short loc_6421FF28
lea	p, [ecx+4]
mov	ebp, eax
shr	ebp, 5
jz	short loc_6421FF28
lea	p, [ecx+5]
mov	ebx, eax
shr	ebx, 6
jz	short loc_6421FF28
lea	p, [ecx+6]
mov	esi, eax
shr	esi, 7
jz	short loc_6421FF28
lea	p, [ecx+7]
shr	eax, 8
jnz	short loc_6421FEDA
nop
			
mov	[esp+7Ch+var_30], p
lea	p, [esp+7Ch+q]
mov	[esp+7Ch+var_38], edx
jmp	loc_6421EE4C
align 4
mov	ecx, [esp+7Ch+var_5C]
mov	[esp+7Ch+var_58], ecx
mov	esi, [esp+7Ch+var_38]
mov	[esp+7Ch+var_34], esi
mov	ecx, [esp+7Ch+a]
mov	eax, [ecx+4]
cmp	eax, ebx
jg	loc_6421F261
lea	edx, [ebx+1]
mov	[esp+7Ch+var_44], edx
cmp	eax, edx
jl	loc_642204A1
mov	eax, [esp+7Ch+a]
mov	ecx, [eax+0Ch]
jmp	loc_6421F26B
			
mov	[esp+7Ch+var_48], ecx
jmp	loc_6421F9DB
align 4
			
mov	esi, [esp+7Ch+a]
mov	[esi], eax
jmp	loc_6421F896
align 4
			
mov	ecx, [esp+7Ch+a]
mov	[ecx], edx
jmp	loc_6421EE4C
align 4
			
mov	[esp+7Ch+q.used], eax
jmp	loc_6421F229
align 4
mov	ebx, [esp+7Ch+q.used]
jmp	loc_6421F229
align 10h
mov	[esp+7Ch+var_48], ebx
mov	edi, [esp+7Ch+var_54]
jmp	loc_6421F37F
align 10h
mov	ebx, [esp+7Ch+var_5C]
inc	ebx
cmp	eax, ebx
jl	loc_642205E9
mov	edx, [esp+7Ch+q.dp]
mov	[esp+7Ch+var_58], edx
mov	edx, [esp+7Ch+q.sign]
mov	[esp+7Ch+var_48], edx
mov	ecx, [esp+7Ch+var_5C]
test	ecx, ecx
jg	loc_6421EEBC
mov	ecx, [esp+7Ch+var_58]
mov	dword ptr [ecx], 0
jmp	loc_6421F0B0
			
mov	[esp+7Ch+var_58], esi
mov	ebp, [esp+7Ch+var_5C]
jmp	loc_6421FC1B
align 4
mov	[esp+7Ch+var_48], ebx
xor	edi, edi
jmp	loc_6421F37F
			
mov	[esp+7Ch+var_3C], 0FFFFFFFEh
			
mov	edx, [esp+7Ch+var_38]
mov	[esp+7Ch+var_7C], edx 
call	_tma_mp_clear
mov	eax, [esp+7Ch+var_3C]
add	esp, 6Ch
pop	ebx
pop	esi
pop	edi
pop	ebp
retn
align 4
mov	[esp+7Ch+var_54], 0
xor	edi, edi
jmp	loc_6421F3AC
align 4
mov	[esp+7Ch+var_48], ecx
xor	esi, esi
mov	[esp+7Ch+var_5C], 0
jmp	loc_6421FA10
align 4
jz	loc_6421F886
jmp	loc_6421F894
align 4
jg	short loc_6422002B
mov	edi, [esp+7Ch+n]
mov	eax, [edi+0Ch]
test	ebx, ebx
jle	loc_6421F8AB
lea	ebp, [ebx-1]
lea	edx, ds:0[ebp*4]
lea	esi, [ecx+edx]
lea	edx, [eax+edx]
mov	eax, [edx]
cmp	eax, [esi]
jb	loc_6421F8AB
ja	short loc_6422002B
xor	eax, eax
xor	edi, edi
and	ebp, 7
jz	loc_642201E9
mov	edi, 1
mov	eax, [edx-4]
cmp	[esi-4], eax
ja	loc_6421F8AB
mov	eax, 0FFFFFFFCh
jb	loc_6422002B
cmp	ebp, 1
jz	loc_642201E9
cmp	ebp, 2
jz	loc_642201C1
cmp	ebp, 3
jz	loc_64220199
cmp	ebp, 4
jz	loc_64220171
cmp	ebp, 5
jz	short loc_64220149
cmp	ebp, 6
jz	short loc_64220121
inc	edi
mov	ebp, [esi-8]
mov	[esp+7Ch+var_54], ebp
mov	ebp, [edx-8]
mov	[esp+7Ch+var_5C], ebp
cmp	[esp+7Ch+var_54], ebp
ja	loc_6421F8AB
sub	eax, 4
cmp	[esp+7Ch+var_54], ebp
jb	loc_6422002B
inc	edi
mov	ebp, [esi+eax-4]
mov	[esp+7Ch+var_54], ebp
mov	ebp, [edx+eax-4]
mov	[esp+7Ch+var_5C], ebp
cmp	[esp+7Ch+var_54], ebp
ja	loc_6421F8AB
sub	eax, 4
cmp	[esp+7Ch+var_54], ebp
jb	loc_6422002B
inc	edi
mov	ebp, [esi+eax-4]
mov	[esp+7Ch+var_54], ebp
mov	ebp, [edx+eax-4]
mov	[esp+7Ch+var_5C], ebp
cmp	[esp+7Ch+var_54], ebp
ja	loc_6421F8AB
sub	eax, 4
cmp	[esp+7Ch+var_54], ebp
jb	loc_6422002B
inc	edi
mov	ebp, [esi+eax-4]
mov	[esp+7Ch+var_54], ebp
mov	ebp, [edx+eax-4]
mov	[esp+7Ch+var_5C], ebp
cmp	[esp+7Ch+var_54], ebp
ja	loc_6421F8AB
sub	eax, 4
cmp	[esp+7Ch+var_54], ebp
jb	loc_6422002B
inc	edi
mov	ebp, [esi+eax-4]
mov	[esp+7Ch+var_54], ebp
mov	ebp, [edx+eax-4]
mov	[esp+7Ch+var_5C], ebp
cmp	[esp+7Ch+var_54], ebp
ja	loc_6421F8AB
sub	eax, 4
cmp	[esp+7Ch+var_54], ebp
jb	loc_6422002B
inc	edi
mov	ebp, [esi+eax-4]
mov	[esp+7Ch+var_54], ebp
mov	ebp, [edx+eax-4]
mov	[esp+7Ch+var_5C], ebp
cmp	[esp+7Ch+var_54], ebp
ja	loc_6421F8AB
sub	eax, 4
cmp	[esp+7Ch+var_54], ebp
jb	loc_6422002B
			
inc	edi
mov	[esp+7Ch+var_48], edi
cmp	edi, ebx
jge	loc_6421F8AB
mov	edi, [esi+eax-4]
mov	ebp, [edx+eax-4]
mov	[esp+7Ch+var_5C], ebp
cmp	edi, ebp
ja	loc_6421F8AB
lea	ebp, [eax-4]
cmp	edi, [esp+7Ch+var_5C]
jb	loc_6422002B
mov	edi, [esi+ebp-4]
mov	[esp+7Ch+var_5C], edi
mov	edi, [edx+ebp-4]
mov	[esp+7Ch+var_54], edi
cmp	[esp+7Ch+var_5C], edi
ja	loc_6421F8AB
lea	edi, [eax-8]
mov	[esp+7Ch+var_44], edi
mov	edi, [esp+7Ch+var_54]
cmp	[esp+7Ch+var_5C], edi
jb	loc_6422002B
mov	edi, [esp+7Ch+var_44]
mov	edi, [esi+edi-4]
mov	[esp+7Ch+var_5C], edi
mov	edi, [esp+7Ch+var_44]
mov	edi, [edx+edi-4]
mov	[esp+7Ch+var_54], edi
cmp	[esp+7Ch+var_5C], edi
ja	loc_6421F8AB
lea	edi, [eax-0Ch]
mov	[esp+7Ch+var_44], edi
mov	edi, [esp+7Ch+var_54]
cmp	[esp+7Ch+var_5C], edi
jb	loc_6422002B
mov	edi, [esp+7Ch+var_44]
mov	edi, [esi+edi-4]
mov	[esp+7Ch+var_5C], edi
mov	edi, [esp+7Ch+var_44]
mov	edi, [edx+edi-4]
mov	[esp+7Ch+var_54], edi
cmp	[esp+7Ch+var_5C], edi
ja	loc_6421F8AB
sub	eax, 10h
cmp	[esp+7Ch+var_5C], edi
jb	loc_6422002B
mov	edi, [esi+eax-4]
mov	eax, [edx+eax-4]
mov	[esp+7Ch+var_5C], eax
cmp	edi, eax
ja	loc_6421F8AB
lea	eax, [ebp-10h]
cmp	edi, [esp+7Ch+var_5C]
jb	loc_6422002B
mov	edi, [esi+eax-4]
mov	eax, [edx+eax-4]
mov	[esp+7Ch+var_5C], eax
cmp	edi, eax
ja	loc_6421F8AB
lea	eax, [ebp-14h]
cmp	edi, [esp+7Ch+var_5C]
jb	loc_6422002B
mov	edi, [esi+eax-4]
mov	[esp+7Ch+var_44], edi
mov	eax, [edx+eax-4]
cmp	edi, eax
ja	loc_6421F8AB
lea	edi, [ebp-18h]
mov	[esp+7Ch+var_54], edi
cmp	[esp+7Ch+var_44], eax
jb	loc_6422002B
mov	edi, [esp+7Ch+var_48]
add	edi, 7
mov	eax, [esp+7Ch+var_54]
mov	eax, [esi+eax-4]
mov	[esp+7Ch+var_5C], eax
mov	eax, [esp+7Ch+var_54]
mov	eax, [edx+eax-4]
mov	[esp+7Ch+var_54], eax
cmp	[esp+7Ch+var_5C], eax
ja	loc_6421F8AB
lea	eax, [ebp-1Ch]
mov	ebp, [esp+7Ch+var_54]
cmp	[esp+7Ch+var_5C], ebp
jnb	loc_642201E9
jmp	loc_6422002B
align 4
jz	loc_6421F21D
jmp	loc_6421F229
align 10h
mov	[esp+7Ch+var_3C], 0FFFFFFFEh
mov	eax, [esp+7Ch+var_3C]
add	esp, 6Ch
pop	ebx
pop	esi
pop	edi
pop	ebp
retn
lea	edi, [ebx+40h]
mov	eax, ebx
mov	ebp, 20h
cdq
idiv	ebp
sub	edi, edx
lea	eax, ds:0[edi*4]
mov	[esp+7Ch+b], eax 
mov	[esp+7Ch+var_7C], ecx 
call	_realloc
test	eax, eax
jz	loc_6421EE4C
mov	ecx, [esp+7Ch+a]
mov	[ecx+0Ch], eax
mov	esi, [ecx+4]
mov	[ecx+4], edi
mov	ecx, eax
cmp	edi, esi
jle	loc_6422048F
lea	edx, ds:0[esi*4]
mov	ebp, esi
not	ebp
add	ebp, edi
and	ebp, 7
jz	loc_64220481
mov	dword ptr [eax+esi*4], 0
inc	esi
add	edx, 4
cmp	ebp, 1
jz	loc_64220481
cmp	ebp, 2
jz	short loc_64220432
cmp	ebp, 3
jz	short loc_64220427
cmp	ebp, 4
jz	short loc_6422041C
cmp	ebp, 5
jz	short loc_64220411
cmp	ebp, 6
jz	short loc_64220406
mov	dword ptr [ecx+edx], 0
inc	esi
add	edx, 4
mov	dword ptr [ecx+edx], 0
inc	esi
add	edx, 4
mov	dword ptr [ecx+edx], 0
inc	esi
add	edx, 4
mov	dword ptr [ecx+edx], 0
inc	esi
add	edx, 4
mov	dword ptr [ecx+edx], 0
inc	esi
add	edx, 4
mov	dword ptr [ecx+edx], 0
inc	esi
add	edx, 4
mov	eax, ecx
jmp	short loc_64220481
mov	dword ptr [ecx+edx+4], 0
mov	dword ptr [ecx+edx+8], 0
mov	dword ptr [ecx+edx+0Ch], 0
mov	dword ptr [ecx+edx+10h], 0
mov	dword ptr [ecx+edx+14h], 0
mov	dword ptr [ecx+edx+18h], 0
mov	dword ptr [ecx+edx+1Ch], 0
add	esi, 8
add	edx, 20h
mov	eax, ecx
			
mov	dword ptr [eax+edx], 0
lea	eax, [esi+1]
cmp	edi, eax
jg	short loc_64220441
mov	esi, [esp+7Ch+a]
mov	edi, [esi]
mov	[esp+7Ch+var_54], edi
jmp	loc_6421F8BF
lea	edi, [ebx+41h]
mov	eax, [esp+7Ch+var_44]
mov	ecx, 20h
cdq
idiv	ecx
sub	edi, edx
lea	ebp, ds:0[edi*4]
mov	[esp+7Ch+b], ebp 
mov	esi, [esp+7Ch+a]
mov	ecx, [esi+0Ch]
mov	[esp+7Ch+var_7C], ecx 
call	_realloc
mov	esi, eax
test	eax, eax
jz	ERR
mov	ebp, [esp+7Ch+a]
mov	[ebp+0Ch], eax
mov	edx, [ebp+4]
mov	[ebp+4], edi
cmp	edi, edx
jle	loc_64220721
lea	eax, ds:0[edx*4]
mov	ecx, esi
mov	ebp, edx
not	ebp
add	ebp, edi
and	ebp, 7
jz	loc_642205BC
mov	dword ptr [esi+edx*4], 0
inc	edx
add	eax, 4
cmp	ebp, 1
jz	loc_642205BC
cmp	ebp, 2
jz	short loc_6422056D
cmp	ebp, 3
jz	short loc_64220562
cmp	ebp, 4
jz	short loc_64220557
cmp	ebp, 5
jz	short loc_6422054C
cmp	ebp, 6
jz	short loc_64220541
mov	dword ptr [ecx+eax], 0
inc	edx
add	eax, 4
mov	dword ptr [ecx+eax], 0
inc	edx
add	eax, 4
mov	dword ptr [ecx+eax], 0
inc	edx
add	eax, 4
mov	dword ptr [ecx+eax], 0
inc	edx
add	eax, 4
mov	dword ptr [ecx+eax], 0
inc	edx
add	eax, 4
mov	dword ptr [ecx+eax], 0
inc	edx
add	eax, 4
mov	esi, ecx
jmp	short loc_642205BC
mov	dword ptr [ecx+eax+4], 0
mov	dword ptr [ecx+eax+8], 0
mov	dword ptr [ecx+eax+0Ch], 0
mov	dword ptr [ecx+eax+10h], 0
mov	dword ptr [ecx+eax+14h], 0
mov	dword ptr [ecx+eax+18h], 0
mov	dword ptr [ecx+eax+1Ch], 0
add	edx, 8
add	eax, 20h
mov	esi, ecx
			
mov	dword ptr [esi+eax], 0
lea	esi, [edx+1]
cmp	edi, esi
jg	short loc_6422057C
mov	eax, [esp+7Ch+a]
mov	ebp, [eax]
mov	[esp+7Ch+var_5C], ebp
jmp	loc_6421F26B
lea	eax, [esp+7Ch+q]
mov	[esp+7Ch+var_38], eax
jmp	loc_6421EE4C
mov	esi, [esp+7Ch+var_5C]
add	esi, 41h
mov	eax, ebx
mov	ebp, 20h
cdq
idiv	ebp
sub	esi, edx
lea	ecx, ds:0[esi*4]
mov	[esp+7Ch+b], ecx 
mov	ebx, [esp+7Ch+q.dp]
mov	[esp+7Ch+var_7C], ebx 
call	_realloc
mov	[esp+7Ch+var_58], eax
test	eax, eax
jz	ERR
mov	[esp+7Ch+q.dp],	eax
mov	edx, [esp+7Ch+q.alloc]
mov	[esp+7Ch+q.alloc], esi
cmp	esi, edx
jle	loc_64220713
mov	edi, [esp+7Ch+var_58]
lea	ebx, [edi+edx*4]
mov	ecx, edx
not	ecx
add	ecx, esi
and	ecx, 7
mov	dword ptr [ebx], 0
inc	edx
lea	eax, [ebx+4]
cmp	esi, edx
jle	loc_64220703
test	ecx, ecx
jz	short loc_642206C2
cmp	ecx, 1
jz	short loc_642206B4
cmp	ecx, 2
jz	short loc_642206AA
cmp	ecx, 3
jz	short loc_642206A0
cmp	ecx, 4
jz	short loc_64220696
cmp	ecx, 5
jz	short loc_6422068C
cmp	ecx, 6
jz	short loc_64220682
mov	dword ptr [ebx+4], 0
inc	edx
add	eax, 4
mov	dword ptr [eax], 0
inc	edx
add	eax, 4
mov	dword ptr [eax], 0
inc	edx
add	eax, 4
mov	dword ptr [eax], 0
inc	edx
add	eax, 4
mov	dword ptr [eax], 0
inc	edx
add	eax, 4
mov	dword ptr [eax], 0
inc	edx
add	eax, 4
mov	dword ptr [eax], 0
inc	edx
add	eax, 4
cmp	esi, edx
jle	short loc_64220703
			
mov	dword ptr [eax], 0
mov	dword ptr [eax+4], 0
mov	dword ptr [eax+8], 0
mov	dword ptr [eax+0Ch], 0
mov	dword ptr [eax+10h], 0
mov	dword ptr [eax+14h], 0
mov	dword ptr [eax+18h], 0
mov	dword ptr [eax+1Ch], 0
add	edx, 8
add	eax, 20h
cmp	esi, edx
jg	short loc_642206C2
			
mov	esi, [esp+7Ch+q.used]
mov	[esp+7Ch+var_5C], esi
mov	ebx, esi
inc	ebx
jmp	loc_6421EEA8
mov	ebx, [esp+7Ch+q.used]
mov	[esp+7Ch+var_5C], ebx
inc	ebx
jmp	loc_6421EEA8
mov	edi, [ebp+0]
mov	[esp+7Ch+var_5C], edi
mov	ecx, eax
jmp	loc_6421F26B
align 10h
public _tma_mp_reduce_2k_l
push	ebp
push	edi
push	esi
push	ebx
sub	esp, 5Ch
mov	[esp+6Ch+var_6C], 80h 
call	_malloc
test	eax, eax
jz	loc_64221838
xor	edx, edx
mov	dword ptr [eax+edx*4], 0
mov	dword ptr [eax+edx*4+4], 0
mov	dword ptr [eax+edx*4+8], 0
mov	dword ptr [eax+edx*4+0Ch], 0
mov	dword ptr [eax+edx*4+10h], 0
mov	dword ptr [eax+edx*4+14h], 0
mov	dword ptr [eax+edx*4+18h], 0
mov	dword ptr [eax+edx*4+1Ch], 0
add	edx, 8
cmp	edx, 20h
jnz	short loc_6422074D
mov	[esp+6Ch+q.dp],	eax
mov	[esp+6Ch+q.used], 0
mov	[esp+6Ch+q.alloc], 20h
mov	[esp+6Ch+q.sign], 0
mov	edx, [esp+6Ch+n]
mov	eax, [edx]
test	eax, eax
jnz	loc_64221408
mov	[esp+6Ch+var_30], 0
lea	ecx, [esp+6Ch+q]
mov	[esp+6Ch+var_3C], ecx
xchg	ax, ax
			
mov	ebx, [esp+6Ch+a]
mov	[esp+6Ch+var_60], ebx 
mov	esi, [esp+6Ch+var_3C]
mov	[esp+6Ch+c], esi 
mov	edi, [esp+6Ch+var_30]
mov	[esp+6Ch+b], edi 
mov	[esp+6Ch+var_6C], ebx 
call	_tma_mp_div_2d
mov	[esp+6Ch+var_44], eax
test	eax, eax
jnz	ERR
mov	[esp+6Ch+c], esi 
mov	ebp, [esp+6Ch+d]
mov	[esp+6Ch+b], ebp 
mov	[esp+6Ch+var_6C], esi 
call	_tma_mp_mul
mov	[esp+6Ch+var_44], eax
test	eax, eax
jnz	ERR
mov	eax, [ebx]
mov	[esp+6Ch+var_48], eax
mov	edx, [esp+6Ch+q.used]
mov	[esp+6Ch+var_50], edx
cmp	eax, edx
jle	loc_64221494
mov	[esp+6Ch+var_4C], edx
mov	[esp+6Ch+var_50], eax
mov	[esp+6Ch+var_34], ebx
mov	esi, [esp+6Ch+a]
mov	eax, [esi+4]
cmp	eax, [esp+6Ch+var_50]
jle	loc_642214B5
mov	ebx, [esp+6Ch+var_50]
inc	ebx
mov	[esp+6Ch+var_38], ebx
mov	ecx, [esi+0Ch]
			
mov	ebx, [esp+6Ch+var_38]
mov	esi, [esp+6Ch+a]
mov	[esi], ebx
mov	edi, ecx
mov	esi, [esp+6Ch+q.dp]
mov	eax, [esp+6Ch+var_4C]
test	eax, eax
jle	loc_64221808
mov	ebp, ecx
mov	eax, ecx
xor	edx, edx
xor	edi, edi
mov	ebx, [esp+6Ch+var_4C]
dec	ebx
and	ebx, 3
jz	loc_6422093D
mov	edx, [esi]
add	edx, [ecx]
lea	eax, [ecx+4]
mov	edi, edx
shr	edi, 1Ch
and	edx, 0FFFFFFFh
mov	[ecx], edx
mov	edx, 1
mov	ebp, eax
cmp	ebx, 1
jz	loc_6422093D
cmp	ebx, 2
jz	short loc_642208D5
mov	ebx, [esi+4]
add	ebx, edi
add	ebx, [eax]
lea	eax, [ecx+8]
mov	edi, ebx
shr	edi, 1Ch
and	ebx, 0FFFFFFFh
mov	[ebp+0], ebx
mov	edx, 2
mov	ebp, eax
mov	ebx, [esi+edx*4]
add	ebx, edi
add	ebx, [eax]
add	eax, 4
mov	edi, ebx
shr	edi, 1Ch
and	ebx, 0FFFFFFFh
mov	[ebp+0], ebx
inc	edx
mov	ebp, eax
jmp	short loc_6422093D
align 4
add	ebx, [esi+edi*4]
add	ebx, [eax+4]
mov	edi, ebx
shr	edi, 1Ch
and	ebx, 0FFFFFFFh
mov	[eax+4], ebx
add	edi, [esi+edx*4+8]
add	edi, [eax+8]
lea	ebp, [eax+0Ch]
mov	ebx, edi
shr	ebx, 1Ch
and	edi, 0FFFFFFFh
mov	[eax+8], edi
add	ebx, [esi+edx*4+0Ch]
add	ebx, [eax+0Ch]
add	eax, 10h
mov	edi, ebx
shr	edi, 1Ch
and	ebx, 0FFFFFFFh
mov	[ebp+0], ebx
add	edx, 4
mov	ebp, eax
			
mov	ebx, [esi+edx*4]
add	ebx, [eax]
lea	edi, [ebx+edi]
mov	ebx, edi
shr	ebx, 1Ch
and	edi, 0FFFFFFFh
mov	[ebp+0], edi
lea	edi, [edx+1]
cmp	edi, [esp+6Ch+var_4C]
jnz	short loc_642208F4
mov	[esp+6Ch+var_40], edi
mov	edx, [esp+6Ch+var_4C]
lea	edi, [ecx+edx*4]
mov	eax, [esp+6Ch+var_4C]
cmp	[esp+6Ch+var_50], eax
jz	loc_64220B57
mov	eax, [esp+6Ch+var_40]
cmp	[esp+6Ch+var_50], eax
jle	loc_64220B57
mov	ebp, eax
shl	ebp, 2
mov	edx, [esp+6Ch+var_34]
add	ebp, [edx+0Ch]
not	eax
add	eax, [esp+6Ch+var_50]
and	eax, 7
mov	[esp+6Ch+var_4C], eax
mov	esi, [ebp+0]
add	esi, ebx
mov	ebx, esi
shr	ebx, 1Ch
and	esi, 0FFFFFFFh
mov	[edi], esi
lea	eax, [edi+4]
mov	esi, [esp+6Ch+var_40]
inc	esi
lea	edx, [ebp+4]
cmp	[esp+6Ch+var_50], esi
jle	loc_64220B4A
cmp	[esp+6Ch+var_4C], 0
jz	loc_64220AB1
cmp	[esp+6Ch+var_4C], 1
jz	loc_64220A8F
cmp	[esp+6Ch+var_4C], 2
jz	loc_64220A77
cmp	[esp+6Ch+var_4C], 3
jz	short loc_64220A5F
cmp	[esp+6Ch+var_4C], 4
jz	short loc_64220A47
cmp	[esp+6Ch+var_4C], 5
jz	short loc_64220A2F
cmp	[esp+6Ch+var_4C], 6
jz	short loc_64220A17
add	ebx, [ebp+4]
mov	ebp, ebx
shr	ebx, 1Ch
and	ebp, 0FFFFFFFh
mov	[eax], ebp
add	eax, 4
inc	esi
add	edx, 4
mov	ebp, [edx]
add	ebp, ebx
mov	ebx, ebp
shr	ebx, 1Ch
and	ebp, 0FFFFFFFh
mov	[eax], ebp
add	eax, 4
inc	esi
add	edx, 4
mov	ebp, [edx]
add	ebp, ebx
mov	ebx, ebp
shr	ebx, 1Ch
and	ebp, 0FFFFFFFh
mov	[eax], ebp
add	eax, 4
inc	esi
add	edx, 4
mov	ebp, [edx]
add	ebp, ebx
mov	ebx, ebp
shr	ebx, 1Ch
and	ebp, 0FFFFFFFh
mov	[eax], ebp
add	eax, 4
inc	esi
add	edx, 4
mov	ebp, [edx]
add	ebp, ebx
mov	ebx, ebp
shr	ebx, 1Ch
and	ebp, 0FFFFFFFh
mov	[eax], ebp
add	eax, 4
inc	esi
add	edx, 4
mov	ebp, [edx]
add	ebp, ebx
mov	ebx, ebp
shr	ebx, 1Ch
and	ebp, 0FFFFFFFh
mov	[eax], ebp
add	eax, 4
inc	esi
add	edx, 4
mov	ebp, [edx]
add	ebp, ebx
mov	ebx, ebp
shr	ebx, 1Ch
and	ebp, 0FFFFFFFh
mov	[eax], ebp
add	eax, 4
inc	esi
add	edx, 4
cmp	[esp+6Ch+var_50], esi
jle	loc_64220B4A
			
add	ebx, [edx]
mov	ebp, ebx
shr	ebp, 1Ch
and	ebx, 0FFFFFFFh
mov	[eax], ebx
add	ebp, [edx+4]
mov	ebx, ebp
shr	ebx, 1Ch
and	ebp, 0FFFFFFFh
mov	[eax+4], ebp
add	ebx, [edx+8]
mov	ebp, ebx
shr	ebp, 1Ch
and	ebx, 0FFFFFFFh
mov	[eax+8], ebx
add	ebp, [edx+0Ch]
mov	ebx, ebp
shr	ebx, 1Ch
and	ebp, 0FFFFFFFh
mov	[eax+0Ch], ebp
add	ebx, [edx+10h]
mov	ebp, ebx
shr	ebp, 1Ch
and	ebx, 0FFFFFFFh
mov	[eax+10h], ebx
add	ebp, [edx+14h]
mov	ebx, ebp
shr	ebx, 1Ch
and	ebp, 0FFFFFFFh
mov	[eax+14h], ebp
add	ebx, [edx+18h]
mov	ebp, ebx
shr	ebp, 1Ch
and	ebx, 0FFFFFFFh
mov	[eax+18h], ebx
add	ebp, [edx+1Ch]
mov	ebx, ebp
shr	ebx, 1Ch
and	ebp, 0FFFFFFFh
mov	[eax+1Ch], ebp
add	eax, 20h
add	esi, 8
add	edx, 20h
cmp	[esp+6Ch+var_50], esi
jg	loc_64220AB1
			
mov	eax, [esp+6Ch+var_40]
not	eax
add	eax, [esp+6Ch+var_38]
lea	edi, [edi+eax*4]
			
mov	[edi], ebx
mov	edx, [esp+6Ch+a]
mov	esi, [edx]
mov	ebx, esi
cmp	esi, [esp+6Ch+var_48]
jge	loc_64220C40
not	ebx
add	ebx, [esp+6Ch+var_48]
and	ebx, 7
mov	dword ptr [edi+4], 0
lea	eax, [edi+8]
lea	edx, [esi+1]
cmp	edx, [esp+6Ch+var_48]
jge	loc_64220C3E
test	ebx, ebx
jz	short loc_64220BFB
cmp	ebx, 1
jz	short loc_64220BEB
cmp	ebx, 2
jz	short loc_64220BE1
cmp	ebx, 3
jz	short loc_64220BD7
cmp	ebx, 4
jz	short loc_64220BCD
cmp	ebx, 5
jz	short loc_64220BC3
cmp	ebx, 6
jz	short loc_64220BB9
mov	dword ptr [eax], 0
lea	eax, [edi+0Ch]
lea	edx, [esi+2]
mov	dword ptr [eax], 0
add	eax, 4
inc	edx
mov	dword ptr [eax], 0
add	eax, 4
inc	edx
mov	dword ptr [eax], 0
add	eax, 4
inc	edx
mov	dword ptr [eax], 0
add	eax, 4
inc	edx
mov	dword ptr [eax], 0
add	eax, 4
inc	edx
mov	dword ptr [eax], 0
add	eax, 4
inc	edx
cmp	edx, [esp+6Ch+var_48]
jge	short loc_64220C3E
			
mov	dword ptr [eax], 0
mov	dword ptr [eax+4], 0
mov	dword ptr [eax+8], 0
mov	dword ptr [eax+0Ch], 0
mov	dword ptr [eax+10h], 0
mov	dword ptr [eax+14h], 0
mov	dword ptr [eax+18h], 0
mov	dword ptr [eax+1Ch], 0
add	eax, 20h
add	edx, 8
cmp	edx, [esp+6Ch+var_48]
jl	short loc_64220BFB
			
mov	ebx, esi
cmp	esi, 0
jle	loc_6422182C
lea	eax, [esi-1]
mov	edi, [ecx+eax*4]
test	edi, edi
jnz	loc_64220E06
lea	edx, ds:0FFFFFFF8h[esi*4]
mov	edi, eax
and	edi, 7
jz	loc_64220D00
mov	ebx, eax
mov	ebp, [ecx+edx]
sub	edx, 4
test	ebp, ebp
jnz	loc_642214E0
lea	eax, [esi-2]
cmp	edi, 1
jz	short loc_64220D00
cmp	edi, 2
jz	short loc_64220CEF
cmp	edi, 3
jz	short loc_64220CDE
cmp	edi, 4
jz	short loc_64220CCD
cmp	edi, 5
jz	short loc_64220CBC
cmp	edi, 6
jz	short loc_64220CAB
mov	ebx, eax
mov	esi, [ecx+edx]
sub	edx, 4
test	esi, esi
jnz	loc_642214E0
dec	eax
mov	ebx, eax
mov	edi, [ecx+edx]
sub	edx, 4
test	edi, edi
jnz	loc_642214E0
dec	eax
mov	ebx, eax
mov	ebp, [ecx+edx]
sub	edx, 4
test	ebp, ebp
jnz	loc_642214E0
dec	eax
mov	ebx, eax
mov	esi, [ecx+edx]
sub	edx, 4
test	esi, esi
jnz	loc_642214E0
dec	eax
mov	ebx, eax
mov	edi, [ecx+edx]
sub	edx, 4
test	edi, edi
jnz	loc_642214E0
dec	eax
mov	ebx, eax
mov	ebp, [ecx+edx]
sub	edx, 4
test	ebp, ebp
jnz	loc_642214E0
dec	eax
			
mov	esi, eax
mov	ebx, eax
test	eax, eax
jz	loc_64220DED
lea	edi, [edx-4]
mov	[esp+6Ch+var_4C], edi
mov	ebp, [ecx+edx]
test	ebp, ebp
jnz	loc_642214E0
lea	edi, [eax-1]
mov	eax, edi
lea	ebx, [esi-1]
lea	ebp, [edx-8]
mov	[esp+6Ch+var_50], ebp
mov	ebp, [esp+6Ch+var_4C]
mov	ebp, [ecx+ebp]
test	ebp, ebp
jnz	loc_642214E0
dec	eax
lea	ebx, [esi-2]
lea	ebp, [edx-0Ch]
mov	[esp+6Ch+var_4C], ebp
mov	ebp, [esp+6Ch+var_50]
mov	ebp, [ecx+ebp]
test	ebp, ebp
jnz	loc_642214E0
lea	eax, [edi-2]
lea	ebx, [esi-3]
lea	ebp, [edx-10h]
mov	[esp+6Ch+var_50], ebp
mov	ebp, [esp+6Ch+var_4C]
mov	ebp, [ecx+ebp]
test	ebp, ebp
jnz	loc_642214E0
lea	eax, [edi-3]
lea	ebx, [esi-4]
lea	ebp, [edx-14h]
mov	[esp+6Ch+var_4C], ebp
mov	ebp, [esp+6Ch+var_50]
mov	ebp, [ecx+ebp]
test	ebp, ebp
jnz	loc_642214E0
lea	eax, [edi-4]
lea	ebx, [esi-5]
lea	ebp, [edx-18h]
mov	[esp+6Ch+var_50], ebp
mov	ebp, [esp+6Ch+var_4C]
mov	ebp, [ecx+ebp]
test	ebp, ebp
jnz	loc_642214E0
lea	eax, [edi-5]
lea	ebx, [esi-6]
lea	ebp, [edx-1Ch]
mov	[esp+6Ch+var_4C], ebp
mov	ebp, [esp+6Ch+var_50]
mov	ebp, [ecx+ebp]
test	ebp, ebp
jnz	loc_642214E0
lea	eax, [edi-6]
lea	ebx, [esi-7]
sub	edx, 20h
mov	ebp, [esp+6Ch+var_4C]
mov	esi, [ecx+ebp]
test	esi, esi
jnz	loc_642214E0
lea	eax, [edi-7]
mov	esi, eax
mov	ebx, eax
test	eax, eax
jnz	loc_64220D0C
mov	esi, [esp+6Ch+a]
mov	dword ptr [esi], 0
xor	esi, esi
mov	ebx, [esp+6Ch+a]
mov	dword ptr [ebx+8], 0
mov	ebx, esi
mov	edi, [esp+6Ch+n]
mov	eax, [edi]
mov	[esp+6Ch+var_48], eax
cmp	ebx, eax
jle	loc_642214F8
			
mov	edx, [esp+6Ch+a]
cmp	ebx, [edx+4]
jg	loc_6422184C
mov	[esp+6Ch+var_4C], ebx
mov	edx, [esp+6Ch+a]
mov	[edx], ebx
mov	edx, ecx
mov	eax, [esp+6Ch+n]
mov	edi, [eax+0Ch]
mov	ebp, [esp+6Ch+var_48]
test	ebp, ebp
jle	loc_64221818
mov	ebp, ecx
mov	eax, ecx
xor	edx, edx
mov	[esp+6Ch+var_50], 0
mov	esi, [esp+6Ch+var_48]
dec	esi
and	esi, 3
jz	loc_642214D4
mov	edx, [ecx]
sub	edx, [edi]
lea	eax, [ecx+4]
mov	ebp, edx
shr	ebp, 1Fh
mov	[esp+6Ch+var_50], ebp
and	edx, 0FFFFFFFh
mov	[ecx], edx
mov	edx, 1
mov	ebp, eax
cmp	esi, 1
jz	loc_642214D4
cmp	esi, 2
jz	short loc_64220EB2
mov	edx, [eax]
sub	edx, [edi+4]
sub	edx, [esp+6Ch+var_50]
lea	eax, [ecx+8]
mov	esi, edx
shr	esi, 1Fh
mov	[esp+6Ch+var_50], esi
and	edx, 0FFFFFFFh
mov	[ebp+0], edx
mov	edx, 2
mov	ebp, eax
mov	esi, [eax]
mov	[esp+6Ch+var_44], esi
mov	esi, [edi+edx*4]
sub	[esp+6Ch+var_44], esi
mov	esi, [esp+6Ch+var_50]
sub	[esp+6Ch+var_44], esi
add	eax, 4
mov	esi, [esp+6Ch+var_44]
shr	esi, 1Fh
mov	[esp+6Ch+var_50], esi
mov	esi, [esp+6Ch+var_44]
and	esi, 0FFFFFFFh
mov	[ebp+0], esi
inc	edx
mov	ebp, eax
mov	[esp+6Ch+var_44], ecx
jmp	short loc_64220F3F
align 4
mov	esi, [eax+4]
sub	esi, [edi+ebp*4]
sub	esi, ecx
mov	ebp, esi
shr	ebp, 1Fh
and	esi, 0FFFFFFFh
mov	[eax+4], esi
mov	esi, [eax+8]
sub	esi, [edi+edx*4+8]
sub	esi, ebp
lea	ebp, [eax+0Ch]
mov	ecx, esi
shr	ecx, 1Fh
and	esi, 0FFFFFFFh
mov	[eax+8], esi
mov	esi, [eax+0Ch]
sub	esi, [edi+edx*4+0Ch]
sub	esi, ecx
add	eax, 10h
mov	ecx, esi
shr	ecx, 1Fh
mov	[esp+6Ch+var_50], ecx
and	esi, 0FFFFFFFh
mov	[ebp+0], esi
add	edx, 4
mov	ebp, eax
			
mov	esi, [eax]
sub	esi, [edi+edx*4]
sub	esi, [esp+6Ch+var_50]
mov	ecx, esi
shr	ecx, 1Fh
mov	[esp+6Ch+var_50], ecx
and	esi, 0FFFFFFFh
mov	[ebp+0], esi
lea	ebp, [edx+1]
mov	esi, ebp
cmp	ebp, [esp+6Ch+var_48]
jnz	short loc_64220EEC
mov	ecx, [esp+6Ch+var_44]
mov	edi, [esp+6Ch+var_48]
lea	edx, [ecx+edi*4]
mov	[esp+6Ch+var_44], edx
cmp	ebx, esi
jle	loc_642211A8
mov	edi, esi
mov	eax, edx
mov	ebp, esi
not	ebp
add	ebp, ebx
and	ebp, 7
mov	[esp+6Ch+var_48], ebp
jz	loc_642217F8
mov	edi, [edx]
sub	edi, [esp+6Ch+var_50]
lea	eax, [edx+4]
mov	ebp, edi
shr	ebp, 1Fh
mov	[esp+6Ch+var_50], ebp
and	edi, 0FFFFFFFh
mov	[edx], edi
lea	edi, [esi+1]
mov	edx, eax
cmp	[esp+6Ch+var_48], 1
jz	loc_642217F8
cmp	[esp+6Ch+var_48], 2
jz	loc_642210B5
cmp	[esp+6Ch+var_48], 3
jz	loc_6422108A
cmp	[esp+6Ch+var_48], 4
jz	loc_6422105F
cmp	[esp+6Ch+var_48], 5
jz	short loc_64221034
cmp	[esp+6Ch+var_48], 6
jz	short loc_64221009
mov	edi, [eax]
sub	edi, ebp
lea	eax, [eax+4]
mov	ebp, edi
shr	ebp, 1Fh
mov	[esp+6Ch+var_50], ebp
and	edi, 0FFFFFFFh
mov	[edx], edi
lea	edi, [esi+2]
mov	edx, eax
mov	ebp, [eax]
mov	[esp+6Ch+var_48], ebp
mov	ebp, [esp+6Ch+var_50]
sub	[esp+6Ch+var_48], ebp
add	eax, 4
mov	ebp, [esp+6Ch+var_48]
shr	ebp, 1Fh
mov	[esp+6Ch+var_50], ebp
mov	ebp, [esp+6Ch+var_48]
and	ebp, 0FFFFFFFh
mov	[edx], ebp
inc	edi
mov	edx, eax
mov	ebp, [eax]
mov	[esp+6Ch+var_48], ebp
mov	ebp, [esp+6Ch+var_50]
sub	[esp+6Ch+var_48], ebp
add	eax, 4
mov	ebp, [esp+6Ch+var_48]
shr	ebp, 1Fh
mov	[esp+6Ch+var_50], ebp
mov	ebp, [esp+6Ch+var_48]
and	ebp, 0FFFFFFFh
mov	[edx], ebp
inc	edi
mov	edx, eax
mov	ebp, [eax]
mov	[esp+6Ch+var_48], ebp
mov	ebp, [esp+6Ch+var_50]
sub	[esp+6Ch+var_48], ebp
add	eax, 4
mov	ebp, [esp+6Ch+var_48]
shr	ebp, 1Fh
mov	[esp+6Ch+var_50], ebp
mov	ebp, [esp+6Ch+var_48]
and	ebp, 0FFFFFFFh
mov	[edx], ebp
inc	edi
mov	edx, eax
mov	ebp, [eax]
mov	[esp+6Ch+var_48], ebp
mov	ebp, [esp+6Ch+var_50]
sub	[esp+6Ch+var_48], ebp
add	eax, 4
mov	ebp, [esp+6Ch+var_48]
shr	ebp, 1Fh
mov	[esp+6Ch+var_50], ebp
mov	ebp, [esp+6Ch+var_48]
and	ebp, 0FFFFFFFh
mov	[edx], ebp
inc	edi
mov	edx, eax
mov	ebp, [eax]
mov	[esp+6Ch+var_48], ebp
mov	ebp, [esp+6Ch+var_50]
sub	[esp+6Ch+var_48], ebp
add	eax, 4
mov	ebp, [esp+6Ch+var_48]
shr	ebp, 1Fh
mov	[esp+6Ch+var_50], ebp
mov	ebp, [esp+6Ch+var_48]
and	ebp, 0FFFFFFFh
mov	[edx], ebp
inc	edi
mov	edx, eax
mov	[esp+6Ch+var_48], esi
mov	ebp, [esp+6Ch+var_50]
jmp	loc_6422117F
align 10h
mov	edx, [eax+4]
sub	edx, ebp
mov	esi, edx
shr	esi, 1Fh
and	edx, 0FFFFFFFh
mov	[eax+4], edx
mov	ebp, [eax+8]
sub	ebp, esi
mov	esi, ebp
shr	esi, 1Fh
and	ebp, 0FFFFFFFh
mov	[eax+8], ebp
mov	edx, [eax+0Ch]
sub	edx, esi
mov	ebp, edx
shr	ebp, 1Fh
and	edx, 0FFFFFFFh
mov	[eax+0Ch], edx
mov	edx, [eax+10h]
sub	edx, ebp
mov	esi, edx
shr	esi, 1Fh
and	edx, 0FFFFFFFh
mov	[eax+10h], edx
mov	ebp, [eax+14h]
sub	ebp, esi
mov	esi, ebp
shr	esi, 1Fh
and	ebp, 0FFFFFFFh
mov	[eax+14h], ebp
mov	edx, [eax+18h]
sub	edx, esi
lea	esi, [eax+1Ch]
mov	ebp, edx
shr	ebp, 1Fh
and	edx, 0FFFFFFFh
mov	[eax+18h], edx
mov	edx, [eax+1Ch]
sub	edx, ebp
add	eax, 20h
mov	ebp, edx
shr	ebp, 1Fh
and	edx, 0FFFFFFFh
mov	[esi], edx
add	edi, 8
mov	edx, eax
			
mov	esi, [eax]
sub	esi, ebp
mov	ebp, esi
shr	ebp, 1Fh
and	esi, 0FFFFFFFh
mov	[edx], esi
lea	edx, [edi+1]
cmp	ebx, edx
jg	loc_642210F0
mov	edi, [esp+6Ch+var_48]
sub	ebx, edi
mov	eax, [esp+6Ch+var_44]
lea	edx, [eax+ebx*4]
mov	ebx, [esp+6Ch+a]
mov	esi, [ebx]
mov	ebx, esi
cmp	esi, [esp+6Ch+var_4C]
jge	loc_64221290
mov	edi, esi
not	edi
add	edi, [esp+6Ch+var_4C]
and	edi, 7
mov	dword ptr [edx], 0
lea	eax, [edx+4]
lea	ebx, [esi+1]
cmp	ebx, [esp+6Ch+var_4C]
jge	loc_6422128E
test	edi, edi
jz	short loc_6422124B
cmp	edi, 1
jz	short loc_6422123B
cmp	edi, 2
jz	short loc_64221231
cmp	edi, 3
jz	short loc_64221227
cmp	edi, 4
jz	short loc_6422121D
cmp	edi, 5
jz	short loc_64221213
cmp	edi, 6
jz	short loc_64221209
mov	dword ptr [eax], 0
lea	eax, [edx+8]
lea	ebx, [esi+2]
mov	dword ptr [eax], 0
add	eax, 4
inc	ebx
mov	dword ptr [eax], 0
add	eax, 4
inc	ebx
mov	dword ptr [eax], 0
add	eax, 4
inc	ebx
mov	dword ptr [eax], 0
add	eax, 4
inc	ebx
mov	dword ptr [eax], 0
add	eax, 4
inc	ebx
mov	dword ptr [eax], 0
add	eax, 4
inc	ebx
cmp	ebx, [esp+6Ch+var_4C]
jge	short loc_6422128E
			
mov	dword ptr [eax], 0
mov	dword ptr [eax+4], 0
mov	dword ptr [eax+8], 0
mov	dword ptr [eax+0Ch], 0
mov	dword ptr [eax+10h], 0
mov	dword ptr [eax+14h], 0
mov	dword ptr [eax+18h], 0
mov	dword ptr [eax+1Ch], 0
add	eax, 20h
add	ebx, 8
cmp	ebx, [esp+6Ch+var_4C]
jl	short loc_6422124B
			
mov	ebx, esi
test	esi, esi
jle	loc_642213ED
lea	edx, [esi-1]
mov	ebp, [ecx+edx*4]
test	ebp, ebp
jnz	loc_642207D0
lea	eax, ds:0FFFFFFF8h[esi*4]
mov	edi, edx
and	edi, 7
jz	loc_6422134B
mov	ebx, edx
test	edx, edx
jle	loc_642213E7
mov	ebx, [ecx+eax]
sub	eax, 4
test	ebx, ebx
jnz	loc_642217EC
lea	edx, [esi-2]
cmp	edi, 1
jz	short loc_6422134B
cmp	edi, 2
jz	short loc_6422133C
cmp	edi, 3
jz	short loc_6422132D
cmp	edi, 4
jz	short loc_6422131E
cmp	edi, 5
jz	short loc_6422130F
cmp	edi, 6
jz	short loc_64221300
mov	ebp, [ecx+eax]
sub	eax, 4
test	ebp, ebp
jnz	loc_642217EC
dec	edx
mov	esi, [ecx+eax]
sub	eax, 4
test	esi, esi
jnz	loc_642217EC
dec	edx
mov	edi, [ecx+eax]
sub	eax, 4
test	edi, edi
jnz	loc_642217EC
dec	edx
mov	ebx, [ecx+eax]
sub	eax, 4
test	ebx, ebx
jnz	loc_642217EC
dec	edx
mov	ebp, [ecx+eax]
sub	eax, 4
test	ebp, ebp
jnz	loc_642217EC
dec	edx
mov	esi, [ecx+eax]
sub	eax, 4
test	esi, esi
jnz	loc_642217EC
dec	edx
			
mov	ebx, edx
test	edx, edx
jle	loc_642213E7
lea	esi, [eax-4]
mov	edi, [ecx+eax]
test	edi, edi
jnz	loc_642217EC
lea	ebx, [edx-1]
mov	edx, ebx
lea	edi, [eax-8]
mov	ebp, [ecx+esi]
test	ebp, ebp
jnz	loc_642217EC
dec	edx
lea	esi, [eax-0Ch]
mov	edi, [ecx+edi]
test	edi, edi
jnz	loc_642217EC
lea	edx, [ebx-2]
lea	edi, [eax-10h]
mov	ebp, [ecx+esi]
test	ebp, ebp
jnz	loc_642217EC
lea	edx, [ebx-3]
lea	esi, [eax-14h]
mov	edi, [ecx+edi]
test	edi, edi
jnz	loc_642217EC
lea	edx, [ebx-4]
lea	edi, [eax-18h]
mov	ebp, [ecx+esi]
test	ebp, ebp
jnz	loc_642217EC
lea	edx, [ebx-5]
lea	esi, [eax-1Ch]
mov	edi, [ecx+edi]
test	edi, edi
jnz	loc_642217EC
lea	edx, [ebx-6]
sub	eax, 20h
mov	esi, [ecx+esi]
test	esi, esi
jnz	loc_642217EC
lea	edx, [ebx-7]
mov	ebx, edx
test	edx, edx
jg	loc_64221355
			
mov	ecx, [esp+6Ch+a]
mov	[ecx], edx
test	ebx, ebx
jnz	loc_642207D0
mov	esi, [esp+6Ch+a]
mov	dword ptr [esi+8], 0
jmp	loc_642207D0
align 4
dec	eax
lea	ebp, ds:0[eax*4]
lea	edi, ds:0[ebp*8]
sub	edi, ebp
mov	[esp+6Ch+var_30], edi
mov	esi, [esp+6Ch+n]
mov	ebx, [esi+0Ch]
mov	eax, [ebx+eax*4]
test	eax, eax
jz	loc_64221AA9
mov	edx, [esp+6Ch+var_30]
lea	ecx, [p+1]
mov	p, ecx
mov	ebx, eax
shr	ebx, 1
jz	short loc_64221480
inc	p
mov	edi, eax
shr	edi, 2
jz	short loc_64221480
lea	p, [ecx+2]
mov	esi, eax
shr	esi, 3
jz	short loc_64221480
lea	p, [ecx+3]
mov	ebp, eax
shr	ebp, 4
jz	short loc_64221480
lea	p, [ecx+4]
mov	ebx, eax
shr	ebx, 5
jz	short loc_64221480
lea	p, [ecx+5]
mov	edi, eax
shr	edi, 6
jz	short loc_64221480
lea	p, [ecx+6]
mov	esi, eax
shr	esi, 7
jz	short loc_64221480
lea	p, [ecx+7]
shr	eax, 8
jnz	short loc_64221433
			
mov	[esp+6Ch+var_30], p
lea	p, [esp+6Ch+q]
mov	[esp+6Ch+var_3C], edx
jmp	loc_642207D0
align 4
mov	eax, [esp+6Ch+var_48]
mov	[esp+6Ch+var_4C], eax
mov	esi, [esp+6Ch+var_3C]
mov	[esp+6Ch+var_34], esi
mov	esi, [esp+6Ch+a]
mov	eax, [esi+4]
cmp	eax, [esp+6Ch+var_50]
jg	loc_6422084F
mov	edx, [esp+6Ch+var_50]
inc	edx
mov	[esp+6Ch+var_38], edx
cmp	eax, edx
jl	loc_64221973
mov	edi, [esp+6Ch+a]
mov	ecx, [edi+0Ch]
jmp	loc_6422085B
align 4
			
mov	[esp+6Ch+var_44], ecx
jmp	loc_64220F3F
align 10h
			
mov	edx, [esp+6Ch+a]
mov	[edx], eax
mov	edi, [esp+6Ch+n]
mov	eax, [edi]
mov	[esp+6Ch+var_48], eax
cmp	ebx, eax
jg	loc_64220E18
jl	ERR
mov	esi, [esp+6Ch+n]
mov	eax, [esi+0Ch]
test	ebx, ebx
jle	loc_64220E18
lea	ebp, [ebx-1]
lea	edi, ds:0[ebp*4]
lea	esi, [ecx+edi]
lea	edx, [eax+edi]
mov	eax, [edx]
cmp	eax, [esi]
jb	loc_64220E18
ja	ERR
xor	eax, eax
xor	edi, edi
and	ebp, 7
jz	loc_6422167B
mov	edi, 1
cmp	ebx, 1
jle	loc_64220E18
mov	eax, [edx-4]
cmp	[esi-4], eax
ja	loc_64220E18
mov	eax, 0FFFFFFFCh
jb	ERR
cmp	ebp, 1
jz	loc_6422167B
cmp	ebp, 2
jz	loc_64221653
cmp	ebp, 3
jz	loc_6422162B
cmp	ebp, 4
jz	loc_64221603
cmp	ebp, 5
jz	short loc_642215DB
cmp	ebp, 6
jz	short loc_642215B3
inc	edi
mov	ebp, [esi-8]
mov	[esp+6Ch+var_4C], ebp
mov	ebp, [edx-8]
mov	[esp+6Ch+var_50], ebp
cmp	[esp+6Ch+var_4C], ebp
ja	loc_64220E18
sub	eax, 4
cmp	[esp+6Ch+var_4C], ebp
jb	ERR
inc	edi
mov	ebp, [esi+eax-4]
mov	[esp+6Ch+var_4C], ebp
mov	ebp, [edx+eax-4]
mov	[esp+6Ch+var_50], ebp
cmp	[esp+6Ch+var_4C], ebp
ja	loc_64220E18
sub	eax, 4
cmp	[esp+6Ch+var_4C], ebp
jb	ERR
inc	edi
mov	ebp, [esi+eax-4]
mov	[esp+6Ch+var_4C], ebp
mov	ebp, [edx+eax-4]
mov	[esp+6Ch+var_50], ebp
cmp	[esp+6Ch+var_4C], ebp
ja	loc_64220E18
sub	eax, 4
cmp	[esp+6Ch+var_4C], ebp
jb	ERR
inc	edi
mov	ebp, [esi+eax-4]
mov	[esp+6Ch+var_4C], ebp
mov	ebp, [edx+eax-4]
mov	[esp+6Ch+var_50], ebp
cmp	[esp+6Ch+var_4C], ebp
ja	loc_64220E18
sub	eax, 4
cmp	[esp+6Ch+var_4C], ebp
jb	ERR
inc	edi
mov	ebp, [esi+eax-4]
mov	[esp+6Ch+var_4C], ebp
mov	ebp, [edx+eax-4]
mov	[esp+6Ch+var_50], ebp
cmp	[esp+6Ch+var_4C], ebp
ja	loc_64220E18
sub	eax, 4
cmp	[esp+6Ch+var_4C], ebp
jb	ERR
inc	edi
mov	ebp, [esi+eax-4]
mov	[esp+6Ch+var_4C], ebp
mov	ebp, [edx+eax-4]
mov	[esp+6Ch+var_50], ebp
cmp	[esp+6Ch+var_4C], ebp
ja	loc_64220E18
sub	eax, 4
cmp	[esp+6Ch+var_4C], ebp
jb	ERR
			
inc	edi
mov	[esp+6Ch+var_40], edi
cmp	ebx, edi
jle	loc_64220E18
mov	edi, [esi+eax-4]
mov	ebp, [edx+eax-4]
mov	[esp+6Ch+var_50], ebp
cmp	edi, ebp
ja	loc_64220E18
lea	ebp, [eax-4]
cmp	edi, [esp+6Ch+var_50]
jb	ERR
mov	edi, [esi+ebp-4]
mov	[esp+6Ch+var_50], edi
mov	edi, [edx+ebp-4]
mov	[esp+6Ch+var_4C], edi
cmp	[esp+6Ch+var_50], edi
ja	loc_64220E18
lea	edi, [eax-8]
mov	[esp+6Ch+var_38], edi
mov	edi, [esp+6Ch+var_4C]
cmp	[esp+6Ch+var_50], edi
jb	ERR
mov	edi, [esp+6Ch+var_38]
mov	edi, [esi+edi-4]
mov	[esp+6Ch+var_50], edi
mov	edi, [esp+6Ch+var_38]
mov	edi, [edx+edi-4]
mov	[esp+6Ch+var_4C], edi
cmp	[esp+6Ch+var_50], edi
ja	loc_64220E18
lea	edi, [eax-0Ch]
mov	[esp+6Ch+var_38], edi
mov	edi, [esp+6Ch+var_4C]
cmp	[esp+6Ch+var_50], edi
jb	ERR
mov	edi, [esp+6Ch+var_38]
mov	edi, [esi+edi-4]
mov	[esp+6Ch+var_50], edi
mov	edi, [esp+6Ch+var_38]
mov	edi, [edx+edi-4]
mov	[esp+6Ch+var_4C], edi
cmp	[esp+6Ch+var_50], edi
ja	loc_64220E18
sub	eax, 10h
cmp	[esp+6Ch+var_50], edi
jb	ERR
mov	edi, [esi+eax-4]
mov	eax, [edx+eax-4]
mov	[esp+6Ch+var_50], eax
cmp	edi, eax
ja	loc_64220E18
lea	eax, [ebp-10h]
cmp	edi, [esp+6Ch+var_50]
jb	short ERR
mov	edi, [esi+eax-4]
mov	eax, [edx+eax-4]
mov	[esp+6Ch+var_50], eax
cmp	edi, eax
ja	loc_64220E18
lea	eax, [ebp-14h]
cmp	edi, [esp+6Ch+var_50]
jb	short ERR
mov	edi, [esi+eax-4]
mov	[esp+6Ch+var_38], edi
mov	eax, [edx+eax-4]
cmp	edi, eax
ja	loc_64220E18
lea	edi, [ebp-18h]
mov	[esp+6Ch+var_4C], edi
cmp	[esp+6Ch+var_38], eax
jb	short ERR
mov	edi, [esp+6Ch+var_40]
add	edi, 7
mov	eax, [esp+6Ch+var_4C]
mov	eax, [esi+eax-4]
mov	[esp+6Ch+var_50], eax
mov	eax, [esp+6Ch+var_4C]
mov	eax, [edx+eax-4]
mov	[esp+6Ch+var_4C], eax
cmp	[esp+6Ch+var_50], eax
ja	loc_64220E18
lea	eax, [ebp-1Ch]
mov	ebp, [esp+6Ch+var_4C]
cmp	[esp+6Ch+var_50], ebp
jnb	loc_6422167B
nop
			
mov	edx, [esp+6Ch+var_3C]
mov	[esp+6Ch+var_6C], edx 
call	_tma_mp_clear
mov	eax, [esp+6Ch+var_44]
add	esp, 5Ch
pop	ebx
pop	esi
pop	edi
pop	ebp
retn
			
mov	ecx, [esp+6Ch+a]
mov	[ecx], edx
jmp	loc_642207D0
align 4
			
mov	[esp+6Ch+var_48], esi
mov	ebp, [esp+6Ch+var_50]
jmp	loc_6422117F
align 4
mov	[esp+6Ch+var_40], 0
xor	ebx, ebx
jmp	loc_64220967
align 4
mov	[esp+6Ch+var_44], ecx
xor	esi, esi
mov	[esp+6Ch+var_50], 0
jmp	loc_64220F74
align 4
jz	loc_64220DF9
jmp	loc_64220E04
align 4
mov	[esp+6Ch+var_44], 0FFFFFFFEh
mov	eax, [esp+6Ch+var_44]
add	esp, 5Ch
pop	ebx
pop	esi
pop	edi
pop	ebp
retn
lea	edi, [ebx+40h]
mov	eax, ebx
mov	ebp, 20h
cdq
idiv	ebp
sub	edi, edx
lea	esi, ds:0[edi*4]
mov	[esp+6Ch+b], esi 
mov	[esp+6Ch+var_6C], ecx 
call	_realloc
test	eax, eax
jz	loc_642207D0
mov	ecx, [esp+6Ch+a]
mov	[ecx+0Ch], eax
mov	esi, [ecx+4]
mov	[ecx+4], edi
mov	ecx, eax
cmp	edi, esi
jle	loc_64221964
lea	edx, ds:0[esi*4]
mov	ebp, esi
not	ebp
add	ebp, edi
and	ebp, 7
jz	loc_64221956
mov	dword ptr [eax+esi*4], 0
inc	esi
add	edx, 4
cmp	ebp, 1
jz	loc_64221956
cmp	ebp, 2
jz	short loc_64221907
cmp	ebp, 3
jz	short loc_642218FC
cmp	ebp, 4
jz	short loc_642218F1
cmp	ebp, 5
jz	short loc_642218E6
cmp	ebp, 6
jz	short loc_642218DB
mov	dword ptr [ecx+edx], 0
inc	esi
add	edx, 4
mov	dword ptr [ecx+edx], 0
inc	esi
add	edx, 4
mov	dword ptr [ecx+edx], 0
inc	esi
add	edx, 4
mov	dword ptr [ecx+edx], 0
inc	esi
add	edx, 4
mov	dword ptr [ecx+edx], 0
inc	esi
add	edx, 4
mov	dword ptr [ecx+edx], 0
inc	esi
add	edx, 4
mov	eax, ecx
jmp	short loc_64221956
mov	dword ptr [ecx+edx+4], 0
mov	dword ptr [ecx+edx+8], 0
mov	dword ptr [ecx+edx+0Ch], 0
mov	dword ptr [ecx+edx+10h], 0
mov	dword ptr [ecx+edx+14h], 0
mov	dword ptr [ecx+edx+18h], 0
mov	dword ptr [ecx+edx+1Ch], 0
add	esi, 8
add	edx, 20h
mov	eax, ecx
			
mov	dword ptr [eax+edx], 0
lea	eax, [esi+1]
cmp	edi, eax
jg	short loc_64221916
mov	esi, [esp+6Ch+a]
mov	edi, [esi]
mov	[esp+6Ch+var_4C], edi
jmp	loc_64220E29
mov	esi, [esp+6Ch+var_50]
add	esi, 41h
mov	eax, [esp+6Ch+var_38]
mov	ebx, 20h
cdq
idiv	ebx
sub	esi, edx
lea	eax, ds:0[esi*4]
mov	[esp+6Ch+b], eax 
mov	ebp, [esp+6Ch+a]
mov	ecx, [ebp+0Ch]
mov	[esp+6Ch+var_6C], ecx 
call	_realloc
mov	ebx, eax
test	eax, eax
jz	loc_64221AB6
mov	edi, [esp+6Ch+a]
mov	[edi+0Ch], eax
mov	edx, [edi+4]
mov	[edi+4], esi
cmp	esi, edx
jle	loc_64221AC3
lea	eax, ds:0[edx*4]
mov	ecx, ebx
mov	edi, edx
not	edi
add	edi, esi
and	edi, 7
jz	loc_64221A8C
mov	dword ptr [ebx+edx*4], 0
inc	edx
add	eax, 4
cmp	edi, 1
jz	loc_64221A8C
cmp	edi, 2
jz	short loc_64221A3D
cmp	edi, 3
jz	short loc_64221A32
cmp	edi, 4
jz	short loc_64221A27
cmp	edi, 5
jz	short loc_64221A1C
cmp	edi, 6
jz	short loc_64221A11
mov	dword ptr [ecx+eax], 0
inc	edx
add	eax, 4
mov	dword ptr [ecx+eax], 0
inc	edx
add	eax, 4
mov	dword ptr [ecx+eax], 0
inc	edx
add	eax, 4
mov	dword ptr [ecx+eax], 0
inc	edx
add	eax, 4
mov	dword ptr [ecx+eax], 0
inc	edx
add	eax, 4
mov	dword ptr [ecx+eax], 0
inc	edx
add	eax, 4
mov	ebx, ecx
jmp	short loc_64221A8C
mov	dword ptr [ecx+eax+4], 0
mov	dword ptr [ecx+eax+8], 0
mov	dword ptr [ecx+eax+0Ch], 0
mov	dword ptr [ecx+eax+10h], 0
mov	dword ptr [ecx+eax+14h], 0
mov	dword ptr [ecx+eax+18h], 0
mov	dword ptr [ecx+eax+1Ch], 0
add	edx, 8
add	eax, 20h
mov	ebx, ecx
			
mov	dword ptr [ebx+eax], 0
lea	edi, [edx+1]
cmp	esi, edi
jg	short loc_64221A4C
mov	edx, [esp+6Ch+a]
mov	ebp, [edx]
mov	[esp+6Ch+var_48], ebp
jmp	loc_6422085B
lea	eax, [esp+6Ch+q]
mov	[esp+6Ch+var_3C], eax
jmp	loc_642207D0
mov	[esp+6Ch+var_44], 0FFFFFFFEh
jmp	ERR
mov	esi, [edi]
mov	[esp+6Ch+var_48], esi
mov	ecx, eax
jmp	loc_6422085B
public _tma_mp_montgomery_calc_normalization
push	ebp
push	edi
push	esi
push	ebx
sub	esp, 4Ch
mov	eax, [esp+5Ch+b]
mov	esi, [eax]
test	esi, esi
jz	loc_64222564
lea	edi, [esi-1]
lea	ebp, ds:0[edi*4]
lea	ecx, ds:0[ebp*8]
sub	ecx, ebp
mov	ebx, [esp+5Ch+b]
mov	edx, [ebx+0Ch]
mov	edx, [edx+edi*4]
test	edx, edx
jz	loc_64222972
mov	eax, ecx
lea	ebx, [eax+1]
mov	eax, ebx
mov	edi, edx
shr	edi, 1
jz	short loc_64221B5C
inc	eax
mov	ebp, edx
shr	ebp, 2
jz	short loc_64221B5C
lea	eax, [ebx+2]
mov	edi, edx
shr	edi, 3
jz	short loc_64221B5C
lea	eax, [ebx+3]
mov	ebp, edx
shr	ebp, 4
jz	short loc_64221B5C
lea	eax, [ebx+4]
mov	edi, edx
shr	edi, 5
jz	short loc_64221B5C
lea	eax, [ebx+5]
mov	ebp, edx
shr	ebp, 6
jz	short loc_64221B5C
lea	eax, [ebx+6]
mov	edi, edx
shr	edi, 7
jz	short loc_64221B5C
lea	eax, [ebx+7]
shr	edx, 8
jnz	short loc_64221B0C
lea	esi, [esi+0]
			
dec	esi
jle	loc_64222564
mov	ebx, 1Ch
cdq
idiv	ebx
mov	[esp+5Ch+var_38], edx
lea	esi, [ecx+edx-1]
mov	[esp+5Ch+var_24], esi
mov	ecx, [esp+5Ch+a]
mov	dword ptr [ecx+8], 0
mov	dword ptr [ecx], 0
mov	edi, [ecx+0Ch]
mov	esi, [ecx+4]
test	esi, esi
jle	loc_64221C63
lea	ebx, [esi-1]
and	ebx, 7
mov	dword ptr [edi], 0
mov	edx, 1
cmp	edx, esi
jz	loc_64221C63
test	ebx, ebx
jz	short loc_64221C11
cmp	ebx, 1
jz	short loc_64221C05
cmp	ebx, 2
jz	short loc_64221BFD
cmp	ebx, 3
jz	short loc_64221BF5
cmp	ebx, 4
jz	short loc_64221BED
cmp	ebx, 5
jz	short loc_64221BE5
cmp	ebx, 6
jz	short loc_64221BDD
mov	dword ptr [edi+edx*4], 0
mov	edx, 2
mov	dword ptr [edi+edx*4], 0
inc	edx
mov	dword ptr [edi+edx*4], 0
inc	edx
mov	dword ptr [edi+edx*4], 0
inc	edx
mov	dword ptr [edi+edx*4], 0
inc	edx
mov	dword ptr [edi+edx*4], 0
inc	edx
mov	dword ptr [edi+edx*4], 0
inc	edx
cmp	edx, esi
jz	short loc_64221C63
mov	ecx, [esp+5Ch+var_24]
mov	eax, esi
mov	dword ptr [edi+edx*4], 0
mov	dword ptr [edi+edx*4+4], 0
mov	dword ptr [edi+edx*4+8], 0
mov	dword ptr [edi+edx*4+0Ch], 0
mov	dword ptr [edi+edx*4+10h], 0
mov	dword ptr [edi+edx*4+14h], 0
mov	dword ptr [edi+edx*4+18h], 0
mov	dword ptr [edi+edx*4+1Ch], 0
add	edx, 8
cmp	edx, eax
jnz	short loc_64221C17
mov	[esp+5Ch+var_24], ecx
mov	esi, eax
			
mov	ebp, 92492493h
mov	eax, [esp+5Ch+var_24]
imul	ebp
mov	[esp+5Ch+var_34], eax
mov	[esp+5Ch+var_30], edx
mov	ebp, [esp+5Ch+var_24]
add	ebp, edx
sar	ebp, 4
mov	eax, [esp+5Ch+var_24]
cdq
sub	ebp, edx
lea	ebx, [ebp+1]
cmp	esi, ebx
jl	loc_64222AA6
mov	esi, [esp+5Ch+a]
mov	[esi], ebx
mov	esi, edi
mov	eax, [esp+5Ch+var_24]
mov	ecx, 1Ch
cdq
idiv	ecx
mov	[esp+5Ch+var_34], edx
mov	edx, 1
mov	cl, byte ptr [esp+5Ch+var_34]
shl	edx, cl
mov	[edi+ebp*4], edx
mov	ebp, [esp+5Ch+var_38]
dec	ebp
mov	[esp+5Ch+var_24], ebp
cmp	ebp, 1Bh
jg	loc_64222548
mov	ebp, [esp+5Ch+a]
mov	ecx, [ebp+4]
cmp	ecx, ebx
jle	loc_64222401
mov	esi, edi
			
mov	ebp, [esp+5Ch+a]
mov	[ebp+0], ebx
test	ebx, ebx
jle	loc_64221DD7
mov	edx, esi
mov	ecx, esi
xor	eax, eax
xor	ebp, ebp
lea	edi, [ebx-1]
and	edi, 3
jz	loc_64221DA7
mov	ebp, [esi]
lea	ecx, [ebp+ebp+0]
and	ecx, 0FFFFFFFh
mov	[esi], ecx
lea	edx, [esi+4]
mov	eax, 1
shr	ebp, 1Bh
mov	ecx, edx
cmp	edi, 1
jz	loc_64221DA7
cmp	edi, 2
jz	short loc_64221D41
mov	edi, [edx]
lea	eax, [edi+edi]
or	eax, ebp
and	eax, 0FFFFFFFh
mov	[edx], eax
lea	edx, [esi+8]
mov	eax, 2
mov	ebp, edi
shr	ebp, 1Bh
mov	edi, [edx]
lea	ecx, [edi+edi]
or	ecx, ebp
and	ecx, 0FFFFFFFh
mov	[edx], ecx
add	edx, 4
inc	eax
mov	ebp, edi
shr	ebp, 1Bh
mov	ecx, edx
jmp	short loc_64221DA7
align 10h
mov	ecx, [edx+4]
mov	ebp, ecx
shr	ebp, 1Bh
shl	ecx, 1
or	ecx, edi
and	ecx, 0FFFFFFFh
mov	[edx+4], ecx
mov	ecx, [edx+8]
mov	edi, ecx
shr	edi, 1Bh
shl	ecx, 1
or	ecx, ebp
and	ecx, 0FFFFFFFh
mov	[edx+8], ecx
mov	ebp, [edx+0Ch]
lea	ecx, [ebp+ebp+0]
or	ecx, edi
and	ecx, 0FFFFFFFh
mov	[edx+0Ch], ecx
add	edx, 10h
add	eax, 4
shr	ebp, 1Bh
mov	ecx, edx
			
mov	ecx, [ecx]
mov	edi, ecx
shr	edi, 1Bh
shl	ecx, 1
or	ecx, ebp
and	ecx, 0FFFFFFFh
mov	[edx], ecx
lea	ecx, [eax+1]
cmp	ecx, ebx
jnz	short loc_64221D60
lea	edx, [esi+ebx*4]
test	edi, edi
jz	short loc_64221DD7
mov	dword ptr [edx], 1
lea	ebx, [eax+2]
mov	esi, [esp+5Ch+a]
mov	[esi], ebx
			
mov	edx, [esp+5Ch+b]
mov	eax, [edx]
mov	[esp+5Ch+var_34], eax
cmp	eax, ebx
jge	loc_64222680
mov	edi, [esp+5Ch+a]
mov	ecx, [edi+0Ch]
			
mov	edi, [esp+5Ch+a]
cmp	[edi+4], ebx
jl	loc_64222989
mov	[esp+5Ch+var_28], ebx
mov	esi, [esp+5Ch+a]
mov	[esi], ebx
mov	ebp, [esp+5Ch+b]
mov	edi, [ebp+0Ch]
mov	eax, [esp+5Ch+var_34]
test	eax, eax
jle	loc_64222668
mov	ebp, ecx
mov	eax, ecx
xor	edx, edx
mov	[esp+5Ch+var_38], 0
mov	esi, [esp+5Ch+var_34]
dec	esi
and	esi, 3
jz	loc_64222524
mov	edx, [ecx]
sub	edx, [edi]
lea	eax, [ecx+4]
mov	ebp, edx
shr	ebp, 1Fh
mov	[esp+5Ch+var_38], ebp
and	edx, 0FFFFFFFh
mov	[ecx], edx
mov	edx, 1
mov	ebp, eax
cmp	esi, 1
jz	loc_64222524
cmp	esi, 2
jz	short loc_64221E88
mov	edx, [eax]
sub	edx, [edi+4]
sub	edx, [esp+5Ch+var_38]
lea	eax, [ecx+8]
mov	esi, edx
shr	esi, 1Fh
mov	[esp+5Ch+var_38], esi
and	edx, 0FFFFFFFh
mov	[ebp+0], edx
mov	edx, 2
mov	ebp, eax
mov	esi, [eax]
mov	[esp+5Ch+var_20], esi
mov	esi, [edi+edx*4]
sub	[esp+5Ch+var_20], esi
mov	esi, [esp+5Ch+var_38]
sub	[esp+5Ch+var_20], esi
add	eax, 4
mov	esi, [esp+5Ch+var_20]
shr	esi, 1Fh
mov	[esp+5Ch+var_38], esi
mov	esi, [esp+5Ch+var_20]
and	esi, 0FFFFFFFh
mov	[ebp+0], esi
inc	edx
mov	ebp, eax
mov	[esp+5Ch+var_20], ecx
jmp	short loc_64221F17
align 4
mov	esi, [eax+4]
sub	esi, [edi+ebp*4]
sub	esi, ecx
mov	ebp, esi
shr	ebp, 1Fh
and	esi, 0FFFFFFFh
mov	[eax+4], esi
mov	esi, [eax+8]
sub	esi, [edi+edx*4+8]
sub	esi, ebp
lea	ebp, [eax+0Ch]
mov	ecx, esi
shr	ecx, 1Fh
and	esi, 0FFFFFFFh
mov	[eax+8], esi
mov	esi, [eax+0Ch]
sub	esi, [edi+edx*4+0Ch]
sub	esi, ecx
add	eax, 10h
mov	ecx, esi
shr	ecx, 1Fh
mov	[esp+5Ch+var_38], ecx
and	esi, 0FFFFFFFh
mov	[ebp+0], esi
add	edx, 4
mov	ebp, eax
			
mov	esi, [eax]
sub	esi, [edi+edx*4]
sub	esi, [esp+5Ch+var_38]
mov	ecx, esi
shr	ecx, 1Fh
mov	[esp+5Ch+var_38], ecx
and	esi, 0FFFFFFFh
mov	[ebp+0], esi
lea	ebp, [edx+1]
mov	esi, ebp
cmp	ebp, [esp+5Ch+var_34]
jnz	short loc_64221EC4
mov	ecx, [esp+5Ch+var_20]
mov	edi, [esp+5Ch+var_34]
lea	edx, [ecx+edi*4]
mov	[esp+5Ch+var_34], edx
cmp	ebx, esi
jle	loc_6422218E
mov	edi, esi
mov	eax, [esp+5Ch+var_34]
mov	ebp, esi
not	ebp
add	ebp, ebx
and	ebp, 7
mov	[esp+5Ch+var_20], ebp
jz	loc_64222554
mov	ebp, [esp+5Ch+var_34]
mov	edi, [ebp+0]
sub	edi, [esp+5Ch+var_38]
mov	eax, ebp
add	eax, 4
mov	ebp, edi
shr	ebp, 1Fh
mov	[esp+5Ch+var_38], ebp
and	edi, 0FFFFFFFh
mov	[edx], edi
lea	edi, [esi+1]
mov	edx, eax
cmp	[esp+5Ch+var_20], 1
jz	loc_64222554
cmp	[esp+5Ch+var_20], 2
jz	loc_6422209A
cmp	[esp+5Ch+var_20], 3
jz	loc_6422206F
cmp	[esp+5Ch+var_20], 4
jz	loc_64222044
cmp	[esp+5Ch+var_20], 5
jz	short loc_64222019
cmp	[esp+5Ch+var_20], 6
jz	short loc_64221FEE
mov	edi, [eax]
sub	edi, ebp
mov	eax, [esp+5Ch+var_34]
add	eax, 8
mov	ebp, edi
shr	ebp, 1Fh
mov	[esp+5Ch+var_38], ebp
and	edi, 0FFFFFFFh
mov	[edx], edi
lea	edi, [esi+2]
mov	edx, eax
mov	ebp, [eax]
mov	[esp+5Ch+var_20], ebp
mov	ebp, [esp+5Ch+var_38]
sub	[esp+5Ch+var_20], ebp
add	eax, 4
mov	ebp, [esp+5Ch+var_20]
shr	ebp, 1Fh
mov	[esp+5Ch+var_38], ebp
mov	ebp, [esp+5Ch+var_20]
and	ebp, 0FFFFFFFh
mov	[edx], ebp
inc	edi
mov	edx, eax
mov	ebp, [eax]
mov	[esp+5Ch+var_20], ebp
mov	ebp, [esp+5Ch+var_38]
sub	[esp+5Ch+var_20], ebp
add	eax, 4
mov	ebp, [esp+5Ch+var_20]
shr	ebp, 1Fh
mov	[esp+5Ch+var_38], ebp
mov	ebp, [esp+5Ch+var_20]
and	ebp, 0FFFFFFFh
mov	[edx], ebp
inc	edi
mov	edx, eax
mov	ebp, [eax]
mov	[esp+5Ch+var_20], ebp
mov	ebp, [esp+5Ch+var_38]
sub	[esp+5Ch+var_20], ebp
add	eax, 4
mov	ebp, [esp+5Ch+var_20]
shr	ebp, 1Fh
mov	[esp+5Ch+var_38], ebp
mov	ebp, [esp+5Ch+var_20]
and	ebp, 0FFFFFFFh
mov	[edx], ebp
inc	edi
mov	edx, eax
mov	ebp, [eax]
mov	[esp+5Ch+var_20], ebp
mov	ebp, [esp+5Ch+var_38]
sub	[esp+5Ch+var_20], ebp
add	eax, 4
mov	ebp, [esp+5Ch+var_20]
shr	ebp, 1Fh
mov	[esp+5Ch+var_38], ebp
mov	ebp, [esp+5Ch+var_20]
and	ebp, 0FFFFFFFh
mov	[edx], ebp
inc	edi
mov	edx, eax
mov	ebp, [eax]
mov	[esp+5Ch+var_20], ebp
mov	ebp, [esp+5Ch+var_38]
sub	[esp+5Ch+var_20], ebp
add	eax, 4
mov	ebp, [esp+5Ch+var_20]
shr	ebp, 1Fh
mov	[esp+5Ch+var_38], ebp
mov	ebp, [esp+5Ch+var_20]
and	ebp, 0FFFFFFFh
mov	[edx], ebp
inc	edi
mov	edx, eax
mov	[esp+5Ch+var_20], esi
mov	ebp, [esp+5Ch+var_38]
jmp	loc_64222163
align 4
mov	edx, [eax+4]
sub	edx, ebp
mov	esi, edx
shr	esi, 1Fh
and	edx, 0FFFFFFFh
mov	[eax+4], edx
mov	ebp, [eax+8]
sub	ebp, esi
mov	esi, ebp
shr	esi, 1Fh
and	ebp, 0FFFFFFFh
mov	[eax+8], ebp
mov	edx, [eax+0Ch]
sub	edx, esi
mov	ebp, edx
shr	ebp, 1Fh
and	edx, 0FFFFFFFh
mov	[eax+0Ch], edx
mov	edx, [eax+10h]
sub	edx, ebp
mov	esi, edx
shr	esi, 1Fh
and	edx, 0FFFFFFFh
mov	[eax+10h], edx
mov	ebp, [eax+14h]
sub	ebp, esi
mov	esi, ebp
shr	esi, 1Fh
and	ebp, 0FFFFFFFh
mov	[eax+14h], ebp
mov	edx, [eax+18h]
sub	edx, esi
lea	esi, [eax+1Ch]
mov	ebp, edx
shr	ebp, 1Fh
and	edx, 0FFFFFFFh
mov	[eax+18h], edx
mov	edx, [eax+1Ch]
sub	edx, ebp
add	eax, 20h
mov	ebp, edx
shr	ebp, 1Fh
and	edx, 0FFFFFFFh
mov	[esi], edx
add	edi, 8
mov	edx, eax
			
mov	esi, [eax]
sub	esi, ebp
mov	ebp, esi
shr	ebp, 1Fh
and	esi, 0FFFFFFFh
mov	[edx], esi
lea	edx, [edi+1]
cmp	ebx, edx
jg	loc_642220D4
mov	esi, [esp+5Ch+var_20]
mov	ebp, ebx
sub	ebp, esi
mov	eax, [esp+5Ch+var_34]
lea	edx, [eax+ebp*4]
cmp	ebx, [esp+5Ch+var_28]
jge	loc_6422226C
mov	edi, ebx
not	edi
add	edi, [esp+5Ch+var_28]
and	edi, 7
mov	dword ptr [edx], 0
lea	eax, [edx+4]
lea	esi, [ebx+1]
cmp	esi, [esp+5Ch+var_28]
jge	loc_6422226C
test	edi, edi
jz	short loc_64222229
cmp	edi, 1
jz	short loc_64222219
cmp	edi, 2
jz	short loc_6422220F
cmp	edi, 3
jz	short loc_64222205
cmp	edi, 4
jz	short loc_642221FB
cmp	edi, 5
jz	short loc_642221F1
cmp	edi, 6
jz	short loc_642221E7
mov	dword ptr [eax], 0
lea	eax, [edx+8]
lea	esi, [ebx+2]
mov	dword ptr [eax], 0
add	eax, 4
inc	esi
mov	dword ptr [eax], 0
add	eax, 4
inc	esi
mov	dword ptr [eax], 0
add	eax, 4
inc	esi
mov	dword ptr [eax], 0
add	eax, 4
inc	esi
mov	dword ptr [eax], 0
add	eax, 4
inc	esi
mov	dword ptr [eax], 0
add	eax, 4
inc	esi
cmp	esi, [esp+5Ch+var_28]
jge	short loc_6422226C
			
mov	dword ptr [eax], 0
mov	dword ptr [eax+4], 0
mov	dword ptr [eax+8], 0
mov	dword ptr [eax+0Ch], 0
mov	dword ptr [eax+10h], 0
mov	dword ptr [eax+14h], 0
mov	dword ptr [eax+18h], 0
mov	dword ptr [eax+1Ch], 0
add	eax, 20h
add	esi, 8
cmp	esi, [esp+5Ch+var_28]
jl	short loc_64222229
			
test	ebx, ebx
jle	loc_642223C9
lea	edx, [ebx-1]
mov	eax, [ecx+edx*4]
test	eax, eax
jnz	loc_642223D8
lea	eax, ds:0FFFFFFF8h[ebx*4]
mov	esi, edx
and	esi, 7
jz	loc_64222327
mov	ebx, edx
test	edx, edx
jle	loc_642223C3
mov	ebp, [ecx+eax]
sub	eax, 4
test	ebp, ebp
jnz	loc_64222530
lea	edx, [edx-1]
cmp	esi, 1
jz	short loc_64222327
cmp	esi, 2
jz	short loc_64222318
cmp	esi, 3
jz	short loc_64222309
cmp	esi, 4
jz	short loc_642222FA
cmp	esi, 5
jz	short loc_642222EB
cmp	esi, 6
jz	short loc_642222DC
mov	ebx, [ecx+eax]
sub	eax, 4
test	ebx, ebx
jnz	loc_64222530
dec	edx
mov	esi, [ecx+eax]
sub	eax, 4
test	esi, esi
jnz	loc_64222530
dec	edx
mov	edi, [ecx+eax]
sub	eax, 4
test	edi, edi
jnz	loc_64222530
dec	edx
mov	ebp, [ecx+eax]
sub	eax, 4
test	ebp, ebp
jnz	loc_64222530
dec	edx
mov	ebx, [ecx+eax]
sub	eax, 4
test	ebx, ebx
jnz	loc_64222530
dec	edx
mov	esi, [ecx+eax]
sub	eax, 4
test	esi, esi
jnz	loc_64222530
dec	edx
			
mov	ebx, edx
test	edx, edx
jle	loc_642223C3
lea	esi, [eax-4]
mov	ebx, [ecx+eax]
test	ebx, ebx
jnz	loc_64222530
lea	ebx, [edx-1]
mov	edx, ebx
lea	edi, [eax-8]
mov	ebp, [ecx+esi]
test	ebp, ebp
jnz	loc_64222530
dec	edx
lea	esi, [eax-0Ch]
mov	edi, [ecx+edi]
test	edi, edi
jnz	loc_64222530
lea	edx, [ebx-2]
lea	edi, [eax-10h]
mov	ebp, [ecx+esi]
test	ebp, ebp
jnz	loc_64222530
lea	edx, [ebx-3]
lea	esi, [eax-14h]
mov	edi, [ecx+edi]
test	edi, edi
jnz	loc_64222530
lea	edx, [ebx-4]
lea	edi, [eax-18h]
mov	ebp, [ecx+esi]
test	ebp, ebp
jnz	loc_64222530
lea	edx, [ebx-5]
lea	esi, [eax-1Ch]
mov	edi, [ecx+edi]
test	edi, edi
jnz	loc_64222530
lea	edx, [ebx-6]
sub	eax, 20h
mov	esi, [ecx+esi]
test	esi, esi
jnz	loc_64222530
lea	edx, [ebx-7]
mov	ebx, edx
test	edx, edx
jg	loc_64222331
			
mov	ecx, [esp+5Ch+a]
mov	[ecx], edx
test	ebx, ebx
jnz	short loc_642223D8
mov	edx, [esp+5Ch+a]
mov	dword ptr [edx+8], 0
			
inc	[esp+5Ch+var_24]
cmp	[esp+5Ch+var_24], 1Bh
jg	loc_64222548
mov	esi, [esp+5Ch+a]
mov	ebx, [esi]
mov	edi, [esi+0Ch]
mov	esi, edi
mov	eax, [esp+5Ch+a]
mov	ecx, [eax+4]
cmp	ecx, ebx
jg	loc_64221CD8
lea	eax, [ebx+1]
cmp	ecx, eax
jge	loc_64221CDA
add	ebx, 41h
mov	ecx, 20h
cdq
idiv	ecx
sub	ebx, edx
lea	eax, ds:0[ebx*4]
mov	[esp+5Ch+var_58], eax 
mov	[esp+5Ch+var_5C], edi 
call	_realloc
mov	esi, eax
test	eax, eax
jz	loc_6422297C
mov	edi, [esp+5Ch+a]
mov	[edi+0Ch], eax
mov	edx, [edi+4]
mov	[edi+4], ebx
cmp	ebx, edx
jle	loc_64222B0E
lea	edi, [eax+edx*4]
mov	ecx, edx
not	ecx
add	ecx, ebx
and	ecx, 7
mov	dword ptr [edi], 0
inc	edx
lea	eax, [edi+4]
cmp	ebx, edx
jle	loc_64222517
test	ecx, ecx
jz	short loc_642224D6
cmp	ecx, 1
jz	short loc_642224C8
cmp	ecx, 2
jz	short loc_642224BE
cmp	ecx, 3
jz	short loc_642224B4
cmp	ecx, 4
jz	short loc_642224AA
cmp	ecx, 5
jz	short loc_642224A0
cmp	ecx, 6
jz	short loc_64222496
mov	dword ptr [edi+4], 0
inc	edx
add	eax, 4
mov	dword ptr [eax], 0
inc	edx
add	eax, 4
mov	dword ptr [eax], 0
inc	edx
add	eax, 4
mov	dword ptr [eax], 0
inc	edx
add	eax, 4
mov	dword ptr [eax], 0
inc	edx
add	eax, 4
mov	dword ptr [eax], 0
inc	edx
add	eax, 4
mov	dword ptr [eax], 0
inc	edx
add	eax, 4
cmp	ebx, edx
jle	short loc_64222517
			
mov	dword ptr [eax], 0
mov	dword ptr [eax+4], 0
mov	dword ptr [eax+8], 0
mov	dword ptr [eax+0Ch], 0
mov	dword ptr [eax+10h], 0
mov	dword ptr [eax+14h], 0
mov	dword ptr [eax+18h], 0
mov	dword ptr [eax+1Ch], 0
add	edx, 8
add	eax, 20h
cmp	ebx, edx
jg	short loc_642224D6
			
mov	edi, [esp+5Ch+a]
mov	ebx, [edi]
jmp	loc_64221CDA
align 4
			
mov	[esp+5Ch+var_20], ecx
jmp	loc_64221F17
align 10h
			
mov	edi, [esp+5Ch+a]
mov	[edi], edx
inc	[esp+5Ch+var_24]
cmp	[esp+5Ch+var_24], 1Bh
jle	loc_642223E7
lea	esi, [esi+0]
			
xor	eax, eax
add	esp, 4Ch
pop	ebx
pop	esi
pop	edi
pop	ebp
retn
align 4
			
mov	[esp+5Ch+var_20], esi
mov	ebp, [esp+5Ch+var_38]
jmp	loc_64222163
align 4
			
mov	ebx, [esp+5Ch+a]
mov	dword ptr [ebx+8], 0
mov	dword ptr [ebx], 0
mov	edi, [ebx+0Ch]
mov	ecx, [ebx+4]
test	ecx, ecx
jle	loc_64222644
lea	edx, [ecx-1]
and	edx, 7
mov	dword ptr [edi], 0
mov	eax, 1
cmp	eax, ecx
jz	loc_64222644
test	edx, edx
jz	short loc_642225FE
cmp	edx, 1
jz	short loc_642225F2
cmp	edx, 2
jz	short loc_642225EA
cmp	edx, 3
jz	short loc_642225E2
cmp	edx, 4
jz	short loc_642225DA
cmp	edx, 5
jz	short loc_642225D2
cmp	edx, 6
jz	short loc_642225CA
mov	dword ptr [edi+eax*4], 0
mov	eax, 2
mov	dword ptr [edi+eax*4], 0
inc	eax
mov	dword ptr [edi+eax*4], 0
inc	eax
mov	dword ptr [edi+eax*4], 0
inc	eax
mov	dword ptr [edi+eax*4], 0
inc	eax
mov	dword ptr [edi+eax*4], 0
inc	eax
mov	dword ptr [edi+eax*4], 0
inc	eax
cmp	eax, ecx
jz	short loc_64222644
			
mov	dword ptr [edi+eax*4], 0
mov	dword ptr [edi+eax*4+4], 0
mov	dword ptr [edi+eax*4+8], 0
mov	dword ptr [edi+eax*4+0Ch], 0
mov	dword ptr [edi+eax*4+10h], 0
mov	dword ptr [edi+eax*4+14h], 0
mov	dword ptr [edi+eax*4+18h], 0
mov	dword ptr [edi+eax*4+1Ch], 0
add	eax, 8
cmp	eax, ecx
jnz	short loc_642225FE
			
mov	dword ptr [edi], 1
mov	edx, [esp+5Ch+a]
mov	dword ptr [edx], 1
mov	esi, edi
mov	ebx, 1
mov	[esp+5Ch+var_24], 0
jmp	loc_64221CD0
mov	edx, ecx
mov	[esp+5Ch+var_34], ecx
xor	esi, esi
mov	[esp+5Ch+var_38], 0
jmp	loc_64221F4C
align 10h
jg	loc_642223D8
mov	esi, [esp+5Ch+a]
mov	ecx, [esi+0Ch]
mov	ebp, [esp+5Ch+b]
mov	eax, [ebp+0Ch]
test	ebx, ebx
jle	loc_64221DF0
lea	ebp, [ebx-1]
lea	edx, ds:0[ebp*4]
lea	esi, [ecx+edx]
lea	edx, [eax+edx]
mov	eax, [edx]
cmp	eax, [esi]
jb	loc_64221DF0
ja	loc_642223D8
xor	eax, eax
xor	edi, edi
and	ebp, 7
jz	loc_64222809
mov	edi, 1
cmp	edi, ebx
jge	loc_64221DF0
mov	eax, [edx-4]
cmp	[esi-4], eax
ja	loc_64221DF0
mov	eax, 0FFFFFFFCh
jb	loc_642223D8
cmp	ebp, 1
jz	loc_64222809
cmp	ebp, 2
jz	loc_642227E1
cmp	ebp, 3
jz	loc_642227B9
cmp	ebp, 4
jz	loc_64222791
cmp	ebp, 5
jz	short loc_64222769
cmp	ebp, 6
jz	short loc_64222741
inc	edi
mov	ebp, [esi-8]
mov	[esp+5Ch+var_28], ebp
mov	ebp, [edx-8]
mov	[esp+5Ch+var_38], ebp
cmp	[esp+5Ch+var_28], ebp
ja	loc_64221DF0
sub	eax, 4
cmp	[esp+5Ch+var_28], ebp
jb	loc_642223D8
inc	edi
mov	ebp, [esi+eax-4]
mov	[esp+5Ch+var_28], ebp
mov	ebp, [edx+eax-4]
mov	[esp+5Ch+var_38], ebp
cmp	[esp+5Ch+var_28], ebp
ja	loc_64221DF0
sub	eax, 4
cmp	[esp+5Ch+var_28], ebp
jb	loc_642223D8
inc	edi
mov	ebp, [esi+eax-4]
mov	[esp+5Ch+var_28], ebp
mov	ebp, [edx+eax-4]
mov	[esp+5Ch+var_38], ebp
cmp	[esp+5Ch+var_28], ebp
ja	loc_64221DF0
sub	eax, 4
cmp	[esp+5Ch+var_28], ebp
jb	loc_642223D8
inc	edi
mov	ebp, [esi+eax-4]
mov	[esp+5Ch+var_28], ebp
mov	ebp, [edx+eax-4]
mov	[esp+5Ch+var_38], ebp
cmp	[esp+5Ch+var_28], ebp
ja	loc_64221DF0
sub	eax, 4
cmp	[esp+5Ch+var_28], ebp
jb	loc_642223D8
inc	edi
mov	ebp, [esi+eax-4]
mov	[esp+5Ch+var_28], ebp
mov	ebp, [edx+eax-4]
mov	[esp+5Ch+var_38], ebp
cmp	[esp+5Ch+var_28], ebp
ja	loc_64221DF0
sub	eax, 4
cmp	[esp+5Ch+var_28], ebp
jb	loc_642223D8
inc	edi
mov	ebp, [esi+eax-4]
mov	[esp+5Ch+var_28], ebp
mov	ebp, [edx+eax-4]
mov	[esp+5Ch+var_38], ebp
cmp	[esp+5Ch+var_28], ebp
ja	loc_64221DF0
sub	eax, 4
cmp	[esp+5Ch+var_28], ebp
jb	loc_642223D8
			
inc	edi
mov	[esp+5Ch+var_20], edi
cmp	edi, ebx
jge	loc_64221DF0
mov	edi, [esi+eax-4]
mov	ebp, [edx+eax-4]
mov	[esp+5Ch+var_38], ebp
cmp	edi, ebp
ja	loc_64221DF0
lea	ebp, [eax-4]
cmp	edi, [esp+5Ch+var_38]
jb	loc_642223D8
mov	edi, [esi+ebp-4]
mov	[esp+5Ch+var_38], edi
mov	edi, [edx+ebp-4]
mov	[esp+5Ch+var_28], edi
cmp	[esp+5Ch+var_38], edi
ja	loc_64221DF0
lea	edi, [eax-8]
mov	[esp+5Ch+var_40], edi
mov	edi, [esp+5Ch+var_28]
cmp	[esp+5Ch+var_38], edi
jb	loc_642223D8
mov	edi, [esp+5Ch+var_40]
mov	edi, [esi+edi-4]
mov	[esp+5Ch+var_38], edi
mov	edi, [esp+5Ch+var_40]
mov	edi, [edx+edi-4]
mov	[esp+5Ch+var_28], edi
cmp	[esp+5Ch+var_38], edi
ja	loc_64221DF0
lea	edi, [eax-0Ch]
mov	[esp+5Ch+var_40], edi
mov	edi, [esp+5Ch+var_28]
cmp	[esp+5Ch+var_38], edi
jb	loc_642223D8
mov	edi, [esp+5Ch+var_40]
mov	edi, [esi+edi-4]
mov	[esp+5Ch+var_38], edi
mov	edi, [esp+5Ch+var_40]
mov	edi, [edx+edi-4]
mov	[esp+5Ch+var_28], edi
cmp	[esp+5Ch+var_38], edi
ja	loc_64221DF0
sub	eax, 10h
cmp	[esp+5Ch+var_38], edi
jb	loc_642223D8
mov	edi, [esi+eax-4]
mov	eax, [edx+eax-4]
mov	[esp+5Ch+var_38], eax
cmp	edi, eax
ja	loc_64221DF0
lea	eax, [ebp-10h]
cmp	edi, [esp+5Ch+var_38]
jb	loc_642223D8
mov	edi, [esi+eax-4]
mov	eax, [edx+eax-4]
mov	[esp+5Ch+var_38], eax
cmp	edi, eax
ja	loc_64221DF0
lea	eax, [ebp-14h]
cmp	edi, [esp+5Ch+var_38]
jb	loc_642223D8
mov	edi, [esi+eax-4]
mov	[esp+5Ch+var_40], edi
mov	eax, [edx+eax-4]
cmp	edi, eax
ja	loc_64221DF0
lea	edi, [ebp-18h]
mov	[esp+5Ch+var_28], edi
cmp	[esp+5Ch+var_40], eax
jb	loc_642223D8
mov	edi, [esp+5Ch+var_20]
add	edi, 7
mov	eax, [esp+5Ch+var_28]
mov	eax, [esi+eax-4]
mov	[esp+5Ch+var_38], eax
mov	eax, [esp+5Ch+var_28]
mov	eax, [edx+eax-4]
mov	[esp+5Ch+var_28], eax
cmp	[esp+5Ch+var_38], eax
ja	loc_64221DF0
lea	eax, [ebp-1Ch]
mov	ebp, [esp+5Ch+var_28]
cmp	[esp+5Ch+var_38], ebp
jnb	loc_64222809
jmp	loc_642223D8
mov	eax, ecx
jmp	loc_64221B5C
align 4
			
mov	eax, 0FFFFFFFEh
add	esp, 4Ch
pop	ebx
pop	esi
pop	edi
pop	ebp
retn
lea	esi, [ebx+40h]
mov	eax, ebx
mov	ebp, 20h
cdq
idiv	ebp
sub	esi, edx
lea	eax, ds:0[esi*4]
mov	[esp+5Ch+var_58], eax 
mov	[esp+5Ch+var_5C], ecx 
call	_realloc
test	eax, eax
jz	short loc_6422297C
mov	ecx, [esp+5Ch+a]
mov	[ecx+0Ch], eax
mov	edx, [ecx+4]
mov	[ecx+4], esi
cmp	esi, edx
jle	loc_64222A90
lea	edi, [eax+edx*4]
mov	ecx, edx
not	ecx
add	ecx, esi
and	ecx, 7
mov	dword ptr [edi], 0
inc	edx
lea	eax, [edi+4]
cmp	esi, edx
jle	loc_64222A90
test	ecx, ecx
jz	short loc_64222A4F
cmp	ecx, 1
jz	short loc_64222A41
cmp	ecx, 2
jz	short loc_64222A37
cmp	ecx, 3
jz	short loc_64222A2D
cmp	ecx, 4
jz	short loc_64222A23
cmp	ecx, 5
jz	short loc_64222A19
cmp	ecx, 6
jz	short loc_64222A0F
mov	dword ptr [edi+4], 0
inc	edx
add	eax, 4
mov	dword ptr [eax], 0
inc	edx
add	eax, 4
mov	dword ptr [eax], 0
inc	edx
add	eax, 4
mov	dword ptr [eax], 0
inc	edx
add	eax, 4
mov	dword ptr [eax], 0
inc	edx
add	eax, 4
mov	dword ptr [eax], 0
inc	edx
add	eax, 4
mov	dword ptr [eax], 0
inc	edx
add	eax, 4
cmp	esi, edx
jle	short loc_64222A90
			
mov	dword ptr [eax], 0
mov	dword ptr [eax+4], 0
mov	dword ptr [eax+8], 0
mov	dword ptr [eax+0Ch], 0
mov	dword ptr [eax+10h], 0
mov	dword ptr [eax+14h], 0
mov	dword ptr [eax+18h], 0
mov	dword ptr [eax+1Ch], 0
add	edx, 8
add	eax, 20h
cmp	esi, edx
jg	short loc_64222A4F
			
mov	edx, [esp+5Ch+a]
mov	edi, [edx]
mov	[esp+5Ch+var_28], edi
mov	esi, [esp+5Ch+a]
mov	ecx, [esi+0Ch]
jmp	loc_64221E01
lea	ecx, [ebp+41h]
mov	eax, ebx
mov	esi, 20h
cdq
idiv	esi
sub	ecx, edx
lea	esi, ds:0[ecx*4]
mov	[esp+5Ch+var_58], esi 
mov	[esp+5Ch+var_5C], edi 
mov	[esp+5Ch+var_3C], ecx
call	_realloc
test	eax, eax
mov	ecx, [esp+5Ch+var_3C]
jz	loc_6422297C
mov	edi, [esp+5Ch+a]
mov	[edi+0Ch], eax
mov	edx, [edi+4]
mov	[edi+4], ecx
lea	eax, [eax+edx*4]
mov	esi, ecx
mov	ecx, [esp+5Ch+var_24]
jmp	short loc_64222AFA
mov	dword ptr [eax], 0
inc	edx
add	eax, 4
cmp	esi, edx
jg	short loc_64222AF0
mov	[esp+5Ch+var_24], ecx
mov	ecx, [esp+5Ch+a]
mov	edi, [ecx+0Ch]
jmp	loc_64221C91
mov	ebx, [edi]
jmp	loc_64221CDA
align 4
public _tma_mp_exptmod_fast
push	ebp
push	edi
push	esi
push	ebx
mov	eax, 108Ch	
call	__alloca
mov	esi, [esp+10h+a]
mov	eax, [esp+10h+arg_1090]
mov	edx, [eax]
test	edx, edx
jz	loc_64223430
dec	edx
lea	edi, ds:0[edx*4]
lea	eax, ds:0[edi*8]
sub	x, edi
mov	ebx, [esp+10h+arg_1090]
mov	ecx, [ebx+0Ch]
mov	edx, [ecx+edx*4]
test	edx, edx
jz	short loc_64222BB0
lea	ecx, [x+1]
mov	x, ecx
mov	ebp, edx
shr	ebp, 1
jz	short loc_64222BB0
inc	x
mov	ebx, edx
shr	ebx, 2
jz	short loc_64222BB0
lea	x, [ecx+2]
mov	edi, edx
shr	edi, 3
jz	short loc_64222BB0
lea	x, [ecx+3]
mov	ebp, edx
shr	ebp, 4
jz	short loc_64222BB0
lea	x, [ecx+4]
mov	ebx, edx
shr	ebx, 5
jz	short loc_64222BB0
lea	x, [ecx+5]
mov	edi, edx
shr	edi, 6
jz	short loc_64222BB0
lea	x, [ecx+6]
mov	ebp, edx
shr	ebp, 7
jz	short loc_64222BB0
lea	x, [ecx+7]
shr	edx, 8
jnz	short loc_64222B60
lea	P_0, [P_0+0]
			
cmp	x, 7
jle	loc_64223430
cmp	x, 24h
jg	loc_642232C4
mov	edi, 3
			
mov	[esp+10h+var_10], 80h
call	_malloc
test	eax, eax
jz	loc_6422341E
xor	edx, edx
mov	dword ptr [eax+edx*4], 0
mov	dword ptr [eax+edx*4+4], 0
mov	dword ptr [eax+edx*4+8], 0
mov	dword ptr [eax+edx*4+0Ch], 0
mov	dword ptr [eax+edx*4+10h], 0
mov	dword ptr [eax+edx*4+14h], 0
mov	dword ptr [eax+edx*4+18h], 0
mov	dword ptr [eax+edx*4+1Ch], 0
add	edx, 8
cmp	edx, 20h
jnz	short loc_64222BDD
mov	[esp+10h+arg_58.dp], eax
mov	[esp+10h+arg_58.used], 0
mov	[esp+10h+arg_58.alloc],	20h
mov	[esp+10h+arg_58.sign], 0
lea	ebp, [winsize-1]
mov	[esp+10h+arg_28], ebp
mov	eax, 1
mov	ebx, eax
mov	cl, byte ptr [esp+10h+arg_28]
shl	ebx, cl
mov	[esp+10h+arg_20], ebx
mov	ecx, winsize
shl	eax, cl
mov	[esp+10h+arg_18], eax
cmp	ebx, eax
jge	loc_642236A5
lea	ebx, [esp+10h+arg_48]
mov	[esp+10h+arg_30], ebx
mov	eax, [esp+10h+arg_20]
shl	eax, 4
add	eax, [esp+10h+arg_30]
mov	[esp+10h+b], eax
mov	ebx, eax
add	ebx, 0Ch
mov	ebp, [esp+10h+arg_20]
mov	[esp+10h+var_10], 80h
call	_malloc
mov	[ebx], eax
test	eax, eax
jz	loc_64223304
mov	dword ptr [eax], 0
mov	dword ptr [eax+4], 0
mov	dword ptr [eax+8], 0
mov	edx, 0Ch
mov	dword ptr [eax+edx], 0
add	edx, 4
mov	dword ptr [eax+edx], 0
add	edx, 4
mov	dword ptr [eax+edx], 0
add	edx, 4
mov	dword ptr [eax+edx], 0
add	edx, 4
jmp	short loc_64222D20
align 4
mov	eax, [ebx]
mov	dword ptr [eax+ecx], 0
mov	dword ptr [eax+edx+8], 0
mov	dword ptr [eax+edx+0Ch], 0
mov	dword ptr [eax+edx+10h], 0
mov	dword ptr [eax+edx+14h], 0
mov	dword ptr [eax+edx+18h], 0
mov	dword ptr [eax+edx+1Ch], 0
add	edx, 20h
mov	dword ptr [eax+edx], 0
lea	ecx, [edx+4]
cmp	ecx, 80h
jnz	short loc_64222CE4
mov	dword ptr [ebx-0Ch], 0
mov	dword ptr [ebx-8], 20h
mov	dword ptr [ebx-4], 0
inc	x
add	ebx, 10h
cmp	x, [esp+10h+arg_18]
jl	loc_64222C88
mov	ebx, [esp+10h+arg_109C]
test	ebx, ebx
jz	loc_642235F2
cmp	[esp+10h+arg_109C], 1
jz	loc_64223444
lea	eax, [esp+10h+rho]
mov	[esp+10h+d], eax 
mov	[esp+10h+var_10], P_0 
call	_tma_mp_reduce_2k_setup
lea	ecx, [esp+10h+arg_58]
mov	[esp+10h+arg_34], ecx
mov	x, offset _tma_mp_reduce_2k
test	eax, eax
jnz	LBL_M
			
mov	[esp+10h+var_10], 80h 
call	_malloc
mov	[esp+10h+arg_1058.dp], eax
test	eax, eax
jz	loc_6422345F
xor	edx, edx
mov	dword ptr [eax+edx*4], 0
mov	dword ptr [eax+edx*4+4], 0
mov	dword ptr [eax+edx*4+8], 0
mov	dword ptr [eax+edx*4+0Ch], 0
mov	dword ptr [eax+edx*4+10h], 0
mov	dword ptr [eax+edx*4+14h], 0
mov	dword ptr [eax+edx*4+18h], 0
mov	dword ptr [eax+edx*4+1Ch], 0
add	edx, 8
cmp	edx, 20h
jnz	short loc_64222DB7
mov	[esp+10h+arg_1058.used], 0
mov	[esp+10h+arg_1058.alloc], 20h
mov	[esp+10h+arg_1058.sign], 0
mov	edx, [esp+10h+arg_109C]
test	edx, edx
jz	loc_642236B2
lea	ecx, [eax+80h]
mov	edx, eax
mov	dword ptr [edx], 0
mov	dword ptr [edx+4], 0
mov	dword ptr [edx+8], 0
mov	dword ptr [edx+0Ch], 0
mov	dword ptr [edx+10h], 0
mov	dword ptr [edx+14h], 0
mov	dword ptr [edx+18h], 0
mov	dword ptr [edx+1Ch], 0
add	edx, 20h
cmp	edx, ecx
jnz	short loc_64222E36
mov	dword ptr [eax], 1
mov	[esp+10h+arg_1058.sign], 0
mov	[esp+10h+arg_1058.used], 1
lea	eax, [esp+10h+arg_58]
mov	[esp+10h+arg_34], eax
mov	[esp+10h+c], eax 
mov	[esp+10h+d], P_0 
mov	ebx, [esp+10h+arg_108C]
mov	[esp+10h+var_10], ebx 
call	_tma_mp_mod
lea	ebx, [esp+10h+arg_1058]
test	eax, eax
jnz	LBL_RES
mov	err, 10h
mov	cl, byte ptr [esp+10h+arg_28]
shl	eax, cl
add	eax, [esp+10h+arg_30]
mov	[esp+10h+b], eax
mov	[esp+10h+d], eax 
mov	edx, [esp+10h+arg_34]
mov	[esp+10h+var_10], edx 
call	_tma_mp_copy
test	eax, eax
jnz	LBL_RES
mov	edx, [esp+10h+arg_28]
dec	edx
and	edx, 3
mov	err, [esp+10h+b]
mov	[esp+10h+d], eax 
mov	[esp+10h+var_10], eax 
mov	[esp+10h+arg_14], edx
call	_tma_mp_sqr
test	eax, eax
mov	edx, [esp+10h+arg_14]
jnz	LBL_RES
mov	err, [esp+10h+rho]
mov	[esp+10h+c], eax 
mov	[esp+10h+d], P_0 
mov	ecx, [esp+10h+b]
mov	[esp+10h+var_10], ecx 
mov	[esp+10h+arg_14], edx
call	redux 
test	eax, eax
mov	edx, [esp+10h+arg_14]
jnz	LBL_RES
mov	[esp+10h+arg_2C], 1
cmp	[esp+10h+arg_28], 1
jle	loc_64223107
test	edx, edx
jz	loc_64223028
cmp	edx, 1
jz	loc_64222FDE
cmp	edx, 2
jz	short loc_64222FA2
mov	edx, [esp+10h+b]
mov	[esp+10h+d], edx 
mov	[esp+10h+var_10], edx 
call	_tma_mp_sqr
test	eax, eax
jnz	LBL_RES
mov	err, [esp+10h+rho]
mov	[esp+10h+c], eax 
mov	[esp+10h+d], P_0 
mov	ecx, [esp+10h+b]
mov	[esp+10h+var_10], ecx 
call	redux 
test	eax, eax
jnz	LBL_RES
mov	[esp+10h+arg_2C], 2
mov	edx, [esp+10h+b]
mov	[esp+10h+d], edx 
mov	[esp+10h+var_10], edx 
call	_tma_mp_sqr
test	eax, eax
jnz	LBL_RES
mov	err, [esp+10h+rho]
mov	[esp+10h+c], eax 
mov	[esp+10h+d], P_0 
mov	ecx, [esp+10h+b]
mov	[esp+10h+var_10], ecx 
call	redux 
test	eax, eax
jnz	LBL_RES
inc	[esp+10h+arg_2C]
mov	edx, [esp+10h+b]
mov	[esp+10h+d], edx 
mov	[esp+10h+var_10], edx 
call	_tma_mp_sqr
test	eax, eax
jnz	LBL_RES
mov	err, [esp+10h+rho]
mov	[esp+10h+c], eax 
mov	[esp+10h+d], P_0 
mov	ecx, [esp+10h+b]
mov	[esp+10h+var_10], ecx 
call	redux 
test	eax, eax
jnz	LBL_RES
inc	[esp+10h+arg_2C]
mov	edx, [esp+10h+arg_2C]
cmp	[esp+10h+arg_28], edx
jle	loc_64223107
mov	[esp+10h+arg_24], ebx
mov	ebx, [esp+10h+b]
mov	[esp+10h+d], ebx 
mov	[esp+10h+var_10], ebx 
call	_tma_mp_sqr
test	eax, eax
jnz	loc_642236F5
mov	ecx, [esp+10h+rho]
mov	[esp+10h+c], ecx 
mov	[esp+10h+d], P_0 
mov	[esp+10h+var_10], ebx 
call	redux 
test	eax, eax
jnz	loc_642236F5
mov	[esp+10h+d], ebx 
mov	[esp+10h+var_10], ebx 
call	_tma_mp_sqr
test	eax, eax
jnz	loc_642236F5
mov	ecx, [esp+10h+rho]
mov	[esp+10h+c], ecx 
mov	[esp+10h+d], P_0 
mov	[esp+10h+var_10], ebx 
call	redux 
test	eax, eax
jnz	loc_642236F5
mov	[esp+10h+d], ebx 
mov	[esp+10h+var_10], ebx 
call	_tma_mp_sqr
test	eax, eax
jnz	loc_642236F5
mov	err, [esp+10h+rho]
mov	[esp+10h+c], eax 
mov	[esp+10h+d], P_0 
mov	[esp+10h+var_10], ebx 
call	redux 
test	eax, eax
jnz	loc_642236F5
mov	[esp+10h+d], ebx 
mov	[esp+10h+var_10], ebx 
call	_tma_mp_sqr
test	eax, eax
jnz	loc_642236F5
mov	edx, [esp+10h+rho]
mov	[esp+10h+c], edx 
mov	[esp+10h+d], P_0 
mov	[esp+10h+var_10], ebx 
call	redux 
test	eax, eax
jnz	loc_642236F5
add	[esp+10h+arg_2C], 4
mov	ecx, [esp+10h+arg_2C]
cmp	[esp+10h+arg_28], ecx
jg	loc_64223030
mov	ebx, [esp+10h+arg_24]
			
mov	err, [esp+10h+arg_20]
inc	eax
mov	[esp+10h+arg_28], eax
shl	eax, 4
add	eax, [esp+10h+arg_30]
mov	[esp+10h+b], eax
mov	edx, [esp+10h+arg_20]
shl	edx, 4
add	edx, [esp+10h+arg_30]
mov	[esp+10h+arg_24], edx
jmp	short loc_6422317E
mov	eax, [esp+10h+b]
mov	[esp+10h+c], eax 
mov	edx, [esp+10h+arg_34]
mov	[esp+10h+d], edx 
mov	ecx, [esp+10h+arg_24]
mov	[esp+10h+var_10], ecx 
call	_tma_mp_mul
test	eax, eax
jnz	LBL_RES
mov	edx, [esp+10h+rho]
mov	[esp+10h+c], edx 
mov	[esp+10h+d], P_0 
mov	ecx, [esp+10h+b]
mov	[esp+10h+var_10], ecx 
call	redux 
add	[esp+10h+b], 10h
add	[esp+10h+arg_24], 10h
test	eax, eax
jnz	LBL_RES
inc	[esp+10h+arg_28]
mov	err, [esp+10h+arg_18]
cmp	[esp+10h+arg_28], eax
jl	short loc_6422312C
mov	edx, [esp+10h+arg_1090]
mov	ecx, [edx]
dec	ecx
mov	[esp+10h+arg_24], ecx
xor	edx, edx
mov	[esp+10h+arg_2C], 1
mov	[esp+10h+b], 0
mov	[esp+10h+arg_28], 0
mov	[esp+10h+arg_38], 0
jmp	short loc_642231C2
test	y, y
jnz	short loc_6422320C
			
shl	[esp+10h+arg_38], 1
dec	[esp+10h+arg_2C]
jnz	short loc_642231F5
cmp	[esp+10h+arg_24], 0FFFFFFFFh
jz	loc_6422363C
mov	ecx, [esp+10h+arg_1090]
mov	y, [ecx+0Ch]
mov	ecx, [esp+10h+arg_24]
mov	eax, [eax+ecx*4]
mov	[esp+10h+arg_38], eax
dec	ecx
mov	[esp+10h+arg_24], ecx
mov	[esp+10h+arg_2C], 1Ch
mov	y, [esp+10h+arg_38]
shr	y, 1Bh
and	y, 1
test	mode, mode
jz	short loc_642231BA
cmp	mode, 1
jz	loc_642236FB
			
inc	[esp+10h+b]
mov	ecx, winsize
sub	ecx, [esp+10h+b]
shl	y, cl
or	[esp+10h+arg_28], eax
mov	mode, 2
cmp	[esp+10h+b], winsize
jnz	short loc_642231BE
mov	[esp+10h+b], 0
mov	[esp+10h+d], ebx
mov	[esp+10h+var_10], ebx 
call	_tma_mp_sqr
test	eax, eax
jnz	LBL_RES
mov	err, [esp+10h+rho]
mov	[esp+10h+c], eax 
mov	[esp+10h+d], P_0 
mov	[esp+10h+var_10], ebx 
call	redux 
test	eax, eax
jnz	LBL_RES
inc	[esp+10h+b]
cmp	winsize, [esp+10h+b]
jg	short loc_6422322F
mov	[esp+10h+c], ebx 
mov	edx, [esp+10h+arg_28]
shl	edx, 4
add	edx, [esp+10h+arg_30]
mov	[esp+10h+d], edx 
mov	[esp+10h+var_10], ebx 
call	_tma_mp_mul
test	eax, eax
jnz	LBL_RES
mov	ecx, [esp+10h+rho]
mov	[esp+10h+c], ecx 
mov	[esp+10h+d], P_0 
mov	[esp+10h+var_10], ebx 
call	redux 
test	eax, eax
jnz	LBL_RES
mov	edx, 1
mov	[esp+10h+b], 0
mov	[esp+10h+arg_28], 0
jmp	loc_642231BE
align 4
cmp	x, 8Ch
jle	loc_6422343A
mov	edi, 5
cmp	x, 1C2h
jle	loc_64222BC7
mov	di, 6
cmp	x, 517h
jle	loc_64222BC7
cmp	x, 0DCAh
setnl	dl
movzx	edi, dl
add	winsize, 7
jmp	loc_64222BC7
align 4
cmp	[esp+10h+arg_20], x
jge	loc_64223412
mov	edi, [esp+10h+arg_20]
not	edi
add	edi, x
and	edi, 7
mov	P_0, [esp+10h+b]
mov	[esp+10h+var_10], esi 
call	_tma_mp_clear
mov	esi, [esp+10h+arg_20]
inc	y
mov	ebx, [esp+10h+b]
add	ebx, 10h
cmp	y, x
jge	loc_64223412
test	edi, edi
jz	short loc_642233B3
cmp	edi, 1
jz	short loc_642233A3
cmp	edi, 2
jz	short loc_64223397
cmp	edi, 3
jz	short loc_6422338B
cmp	edi, 4
jz	short loc_6422337F
cmp	edi, 5
jz	short loc_64223373
cmp	edi, 6
jz	short loc_64223367
mov	[esp+10h+var_10], ebx 
call	_tma_mp_clear
inc	y
add	ebx, 10h
mov	[esp+10h+var_10], ebx 
call	_tma_mp_clear
inc	y
add	ebx, 10h
mov	[esp+10h+var_10], ebx 
call	_tma_mp_clear
inc	y
add	ebx, 10h
mov	[esp+10h+var_10], ebx 
call	_tma_mp_clear
inc	y
add	ebx, 10h
mov	[esp+10h+var_10], ebx 
call	_tma_mp_clear
inc	y
add	ebx, 10h
mov	[esp+10h+var_10], ebx 
call	_tma_mp_clear
inc	y
add	ebx, 10h
mov	[esp+10h+var_10], ebx 
call	_tma_mp_clear
inc	y
add	ebx, 10h
cmp	y, x
jge	short loc_64223412
			
mov	[esp+10h+var_10], ebx 
call	_tma_mp_clear
lea	edx, [ebx+10h]
mov	[esp+10h+var_10], edx 
call	_tma_mp_clear
lea	ecx, [ebx+20h]
mov	[esp+10h+var_10], ecx 
call	_tma_mp_clear
lea	edi, [ebx+30h]
mov	[esp+10h+var_10], edi 
call	_tma_mp_clear
lea	eax, [ebx+40h]
mov	[esp+10h+var_10], eax 
call	_tma_mp_clear
lea	edx, [ebx+50h]
mov	[esp+10h+var_10], edx 
call	_tma_mp_clear
lea	ecx, [ebx+60h]
mov	[esp+10h+var_10], ecx 
call	_tma_mp_clear
lea	edi, [ebx+70h]
mov	[esp+10h+var_10], edi 
call	_tma_mp_clear
add	y, 8
sub	ebx, 0FFFFFF80h
cmp	y, x
jl	short loc_642233B3
			
lea	x, [esp+10h+arg_58]
mov	[esp+10h+var_10], ebp 
call	_tma_mp_clear
mov	eax, 0FFFFFFFEh
			
add	esp, 108Ch
pop	ebx
pop	y
pop	winsize
pop	redux
retn
align 10h
			
mov	edi, 2
jmp	loc_64222BC7
mov	edi, 4
jmp	loc_64222BC7
mov	ebx, [P_0+0Ch]
mov	x, 10000000h
sub	ebp, [ebx]
mov	[esp+10h+rho], ebp
mov	ebp, offset _tma_mp_dr_reduce
jmp	loc_64222D9A
mov	eax, 0FFFFFFFEh
lea	P_0, [esp+10h+arg_58]
mov	[esp+10h+arg_34], esi
			
mov	ebx, [esp+10h+arg_34]
mov	[esp+10h+var_10], ebx 
mov	[esp+10h+arg_14], err
call	_tma_mp_clear
mov	ecx, [esp+10h+arg_18]
cmp	[esp+10h+arg_20], ecx
mov	eax, [esp+10h+arg_14]
jge	short loc_64223423
mov	redux, [esp+10h+arg_20]
shl	ebp, 4
add	ebp, [esp+10h+arg_30]
mov	winsize, [esp+10h+arg_20]
not	edi
add	edi, ecx
and	edi, 7
mov	[esp+10h+var_10], ebp 
call	_tma_mp_clear
mov	esi, [esp+10h+arg_20]
inc	x
lea	ebx, [ebp+10h]
cmp	x, [esp+10h+arg_18]
mov	eax, [esp+10h+arg_14]
jge	loc_64223423
test	edi, edi
jz	loc_64223584
cmp	edi, 1
jz	loc_64223566
cmp	edi, 2
jz	short loc_64223552
cmp	edi, 3
jz	short loc_6422353E
cmp	edi, 4
jz	short loc_6422352A
cmp	edi, 5
jz	short loc_64223516
cmp	edi, 6
jz	short loc_64223502
mov	[esp+10h+var_10], ebx 
mov	[esp+10h+arg_14], eax
call	_tma_mp_clear
mov	x, [esp+10h+arg_20]
add	x, 2
lea	ebx, [ebp+20h]
mov	eax, [esp+10h+arg_14]
mov	[esp+10h+var_10], ebx 
mov	[esp+10h+arg_14], eax
call	_tma_mp_clear
inc	x
add	ebx, 10h
mov	eax, [esp+10h+arg_14]
mov	[esp+10h+var_10], ebx 
mov	[esp+10h+arg_14], eax
call	_tma_mp_clear
inc	x
add	ebx, 10h
mov	eax, [esp+10h+arg_14]
mov	[esp+10h+var_10], ebx 
mov	[esp+10h+arg_14], eax
call	_tma_mp_clear
inc	x
add	ebx, 10h
mov	eax, [esp+10h+arg_14]
mov	[esp+10h+var_10], ebx 
mov	[esp+10h+arg_14], eax
call	_tma_mp_clear
inc	x
add	ebx, 10h
mov	eax, [esp+10h+arg_14]
mov	[esp+10h+var_10], ebx 
mov	[esp+10h+arg_14], eax
call	_tma_mp_clear
inc	x
add	ebx, 10h
mov	eax, [esp+10h+arg_14]
mov	[esp+10h+var_10], ebx 
mov	[esp+10h+arg_14], eax
call	_tma_mp_clear
inc	x
add	ebx, 10h
cmp	x, [esp+10h+arg_18]
mov	eax, [esp+10h+arg_14]
jge	loc_64223423
			
mov	[esp+10h+var_10], ebx 
mov	[esp+10h+arg_14], eax
call	_tma_mp_clear
lea	ebp, [ebx+10h]
mov	[esp+10h+var_10], ebp 
call	_tma_mp_clear
lea	eax, [ebx+20h]
mov	[esp+10h+var_10], eax 
call	_tma_mp_clear
lea	edx, [ebx+30h]
mov	[esp+10h+var_10], edx 
call	_tma_mp_clear
lea	edi, [ebx+40h]
mov	[esp+10h+var_10], edi 
call	_tma_mp_clear
lea	ecx, [ebx+50h]
mov	[esp+10h+var_10], ecx 
call	_tma_mp_clear
lea	ebp, [ebx+60h]
mov	[esp+10h+var_10], ebp 
call	_tma_mp_clear
lea	eax, [ebx+70h]
mov	[esp+10h+var_10], eax 
call	_tma_mp_clear
add	x, 8
sub	ebx, 0FFFFFF80h
cmp	x, [esp+10h+arg_18]
mov	eax, [esp+10h+arg_14]
jl	short loc_64223584
jmp	loc_64223423
lea	eax, [esp+10h+rho]
mov	[esp+10h+d], eax 
mov	[esp+10h+var_10], P_0 
call	_tma_mp_montgomery_setup
lea	ecx, [esp+10h+arg_58]
mov	[esp+10h+arg_34], ecx
test	eax, eax
jnz	LBL_M
mov	err, [P_0]
lea	edx, [eax+eax]
cmp	edx, 1FEh
jg	short loc_64223632
mov	x, offset _fast_tma_mp_montgomery_reduce
cmp	eax, 0FFh
jle	loc_64222D9A
mov	redux, offset _tma_mp_montgomery_reduce
jmp	loc_64222D9A
cmp	mode, 2
jz	loc_64223761
			
cmp	[esp+10h+arg_109C], 0
jz	loc_64223740
lea	mode, [esp+10h+arg_1048]
mov	[esp+10h+arg_8], edx
mov	redux, 4
mov	winsize, edx
mov	P_0, ebx
mov	ecx, ebp
rep movsd
lea	ebx, [esp+10h+arg_1058]
mov	edi, ebx
mov	esi, [esp+10h+arg_1098]
mov	ecx, ebp
rep movsd
mov	edi, [esp+10h+arg_1098]
mov	esi, [esp+10h+arg_8]
mov	ecx, ebp
rep movsd
xor	y, y
			
mov	[esp+10h+var_10], ebx
mov	[esp+10h+arg_14], err
call	_tma_mp_clear
mov	eax, [esp+10h+arg_14]
jmp	LBL_M
lea	edx, [esp+10h+arg_48]
mov	[esp+10h+arg_30], edx
jmp	loc_64222D55
mov	[esp+10h+d], P_0
lea	ebx, [esp+10h+arg_1058]
mov	[esp+10h+var_10], ebx 
call	_tma_mp_montgomery_calc_normalization
lea	edx, [esp+10h+arg_58]
mov	[esp+10h+arg_34], edx
test	eax, eax
jnz	short LBL_RES
mov	[esp+10h+var_4], edx 
mov	[esp+10h+c], P_0 
mov	[esp+10h+d], ebx 
mov	ecx, [esp+10h+arg_108C]
mov	[esp+10h+var_10], ecx 
call	_tma_mp_mulmod
test	eax, eax
jnz	short LBL_RES
jmp	loc_64222EBE
			
mov	ebx, [esp+10h+arg_24]
jmp	short LBL_RES
test	y, y
jnz	loc_6422320C
mov	[esp+10h+d], ebx 
mov	[esp+10h+var_10], ebx 
mov	[esp+10h+arg_14], mode
call	_tma_mp_sqr
test	eax, eax
jnz	LBL_RES
mov	edx, [esp+10h+rho]
mov	[esp+10h+c], edx 
mov	[esp+10h+d], P_0 
mov	[esp+10h+var_10], ebx 
call	redux 
test	eax, eax
mov	edx, [esp+10h+arg_14]
jnz	LBL_RES
jmp	loc_642231BE
mov	winsize, [esp+10h+rho]
mov	[esp+10h+c], edi 
mov	[esp+10h+d], P_0 
mov	[esp+10h+var_10], ebx 
call	redux 
test	eax, eax
jnz	LBL_RES
jmp	loc_64223653
cmp	[esp+10h+b], 0
jle	loc_64223645
xor	winsize, winsize
mov	[esp+10h+d], ebx
mov	[esp+10h+var_10], ebx 
call	_tma_mp_sqr
test	eax, eax
jnz	LBL_RES
mov	err, [esp+10h+rho]
mov	[esp+10h+c], eax 
mov	[esp+10h+d], P_0 
mov	[esp+10h+var_10], ebx 
call	redux 
test	eax, eax
jnz	LBL_RES
shl	[esp+10h+arg_28], 1
mov	edx, [esp+10h+arg_18]
test	[esp+10h+arg_28], edx
jnz	short loc_642237B8
inc	x
cmp	x, [esp+10h+b]
jl	short loc_6422376E
jmp	loc_64223645
mov	[esp+10h+c], ebx 
mov	ecx, [esp+10h+arg_34]
mov	[esp+10h+d], ecx 
mov	[esp+10h+var_10], ebx 
call	_tma_mp_mul
test	eax, eax
jnz	LBL_RES
mov	err, [esp+10h+rho]
mov	[esp+10h+c], eax 
mov	[esp+10h+d], P_0 
mov	[esp+10h+var_10], ebx 
call	redux 
test	eax, eax
jz	short loc_642237AC
jmp	LBL_RES
align 4
public _tma_mp_exptmod
			
push	ebp
push	edi
push	esi
push	ebx
sub	esp, 6Ch
mov	esi, [esp+7Ch+X]
mov	ebx, [esp+7Ch+P]
cmp	dword ptr [ebx+8], 1
jz	loc_64223CA4
cmp	dword ptr [X_0+8], 1
jz	loc_64223AD4
mov	ecx, [P_0]
test	ecx, ecx
jz	loc_64223BD0
cmp	ecx, 1
jz	loc_64223CBC
jle	loc_64223CF8
mov	eax, [P_0+0Ch]
xor	edi, edi
lea	ebp, [ecx-1]
and	ebp, 7
cmp	dword ptr [eax], 0FFFFFFFh
jz	loc_64223C68
mov	edx, 1
cmp	edx, ecx
jz	loc_6422395C
test	ebp, ebp
jz	loc_642238E6
cmp	ebp, 1
jz	short loc_642238D4
cmp	ebp, 2
jz	short loc_642238C6
cmp	ebp, 3
jz	short loc_642238B8
cmp	ebp, 4
jz	short loc_642238AA
cmp	ebp, 5
jz	short loc_6422389C
cmp	ebp, 6
jz	short loc_6422388E
cmp	dword ptr [eax+edx*4], 0FFFFFFFh
jz	loc_64223C84
inc	edx
cmp	dword ptr [eax+edx*4], 0FFFFFFFh
jz	loc_64223C8C
inc	edx
cmp	dword ptr [eax+edx*4], 0FFFFFFFh
jz	loc_64223C7C
inc	edx
cmp	dword ptr [eax+edx*4], 0FFFFFFFh
jz	loc_64223C9C
inc	edx
cmp	dword ptr [eax+edx*4], 0FFFFFFFh
jz	loc_64223C94
inc	edx
cmp	dword ptr [eax+edx*4], 0FFFFFFFh
jz	loc_64223C74
inc	edx
cmp	dword ptr [eax+edx*4], 0FFFFFFFh
jz	loc_64223CB4
inc	edx
cmp	edx, ecx
jz	short loc_6422395C
			
cmp	dword ptr [eax+edx*4], 0FFFFFFFh
jz	loc_64223C60
inc	edx
cmp	dword ptr [eax+edx*4], 0FFFFFFFh
jz	loc_64223C58
cmp	dword ptr [eax+edx*4+4], 0FFFFFFFh
jz	loc_64223C50
cmp	dword ptr [eax+edx*4+8], 0FFFFFFFh
jz	loc_64223C48
cmp	dword ptr [eax+edx*4+0Ch], 0FFFFFFFh
jz	loc_64223C40
cmp	dword ptr [eax+edx*4+10h], 0FFFFFFFh
jz	loc_64223C38
cmp	dword ptr [eax+edx*4+14h], 0FFFFFFFh
jz	loc_64223C30
cmp	dword ptr [eax+edx*4+18h], 0FFFFFFFh
jz	loc_64223C28
add	edx, 7
cmp	edx, ecx
jnz	short loc_642238E6
			
mov	ebp, ecx
sar	ebp, 1
cmp	edi, ebp
jge	loc_64223CBC
lea	edi, [ecx-2]
and	edi, 7
cmp	dword ptr [eax+4], 0FFFFFFFh
jnz	loc_64223D10
mov	edx, 2
cmp	edx, ecx
jge	loc_64223A8A
test	edi, edi
jz	loc_64223A14
cmp	edi, 1
jz	short loc_64223A02
cmp	edi, 2
jz	short loc_642239F4
cmp	edi, 3
jz	short loc_642239E6
cmp	edi, 4
jz	short loc_642239D8
cmp	edi, 5
jz	short loc_642239CA
cmp	edi, 6
jz	short loc_642239BC
cmp	dword ptr [eax+edx*4], 0FFFFFFFh
jnz	loc_64223D10
inc	edx
cmp	dword ptr [eax+edx*4], 0FFFFFFFh
jnz	loc_64223D10
inc	edx
cmp	dword ptr [eax+edx*4], 0FFFFFFFh
jnz	loc_64223D10
inc	edx
cmp	dword ptr [eax+edx*4], 0FFFFFFFh
jnz	loc_64223D10
inc	edx
cmp	dword ptr [eax+edx*4], 0FFFFFFFh
jnz	loc_64223D10
inc	edx
cmp	dword ptr [eax+edx*4], 0FFFFFFFh
jnz	loc_64223D10
inc	edx
cmp	dword ptr [eax+edx*4], 0FFFFFFFh
jnz	loc_64223D10
inc	edx
cmp	edx, ecx
jge	short loc_64223A8A
			
cmp	dword ptr [eax+edx*4], 0FFFFFFFh
jnz	loc_64223D10
cmp	dword ptr [eax+edx*4+4], 0FFFFFFFh
jnz	loc_64223D10
cmp	dword ptr [eax+edx*4+8], 0FFFFFFFh
jnz	loc_64223D10
cmp	dword ptr [eax+edx*4+0Ch], 0FFFFFFFh
jnz	loc_64223D10
cmp	dword ptr [eax+edx*4+10h], 0FFFFFFFh
jnz	loc_64223D10
cmp	dword ptr [eax+edx*4+14h], 0FFFFFFFh
jnz	loc_64223D10
cmp	dword ptr [eax+edx*4+18h], 0FFFFFFFh
jnz	loc_64223D10
cmp	dword ptr [eax+edx*4+1Ch], 0FFFFFFFh
jnz	loc_64223D10
add	edx, 8
cmp	edx, ecx
jl	short loc_64223A14
			
mov	eax, 1
test	ecx, ecx
jg	loc_64223BDA
nop
			
test	dr, dr
jnz	loc_64223BE6
mov	[esp+7Ch+redmode], 0 
mov	edi, [esp+7Ch+Y]
mov	[esp+7Ch+var_70], edi 
mov	[esp+7Ch+c], P_0 
mov	[esp+7Ch+b], X_0 
mov	X_0, [esp+7Ch+G]
mov	[esp+7Ch+var_7C], esi 
call	_s_tma_mp_exptmod
add	esp, 6Ch
pop	P_0
pop	esi
pop	edi
pop	ebp
retn
align 4
mov	[esp+7Ch+var_7C], 80h 
call	_malloc
test	eax, eax
jz	loc_64223D04
xor	edx, edx
mov	dword ptr [eax+edx*4], 0
mov	dword ptr [eax+edx*4+4], 0
mov	dword ptr [eax+edx*4+8], 0
mov	dword ptr [eax+edx*4+0Ch], 0
mov	dword ptr [eax+edx*4+10h], 0
mov	dword ptr [eax+edx*4+14h], 0
mov	dword ptr [eax+edx*4+18h], 0
mov	dword ptr [eax+edx*4+1Ch], 0
add	edx, 8
cmp	edx, 20h
jnz	short loc_64223AEA
mov	[esp+7Ch+tmpG.dp], eax
mov	[esp+7Ch+tmpG.used], 0
mov	[esp+7Ch+tmpG.alloc], 20h
mov	[esp+7Ch+tmpG.sign], 0
lea	edi, [esp+7Ch+tmpG]
mov	[esp+7Ch+c], edi 
mov	[esp+7Ch+b], P_0 
mov	eax, [esp+7Ch+G]
mov	[esp+7Ch+var_7C], eax 
call	_tma_mp_invmod
test	eax, eax
jnz	loc_64223C14
lea	ebp, [esp+7Ch+tmpX]
mov	[esp+7Ch+var_7C], ebp 
call	_tma_mp_init
test	eax, eax
jnz	loc_64223C14
mov	[esp+7Ch+b], ebp 
mov	[esp+7Ch+var_7C], X_0 
call	_tma_mp_abs
test	eax, eax
jnz	short loc_64223BAF
mov	edx, [esp+7Ch+Y]
mov	[esp+7Ch+var_70], edx 
mov	[esp+7Ch+c], P_0 
mov	[esp+7Ch+b], ebp 
mov	[esp+7Ch+var_7C], edi 
call	_tma_mp_exptmod
mov	[esp+7Ch+c], 0
mov	[esp+7Ch+b], ebp
mov	[esp+7Ch+var_7C], edi 
mov	[esp+7Ch+var_48], err
call	_tma_mp_clear_multi
mov	eax, [esp+7Ch+var_48]
jmp	short loc_64223C0C
align 10h
			
xor	eax, eax
test	ecx, ecx
jle	loc_64223A98
mov	ecx, [P_0+0Ch]
test	byte ptr [ecx],	1
jz	loc_64223A98
mov	[esp+7Ch+redmode], dr 
mov	edx, [esp+7Ch+Y]
mov	[esp+7Ch+var_70], edx 
mov	[esp+7Ch+c], P_0 
mov	[esp+7Ch+b], X_0 
mov	P_0, [esp+7Ch+G]
mov	[esp+7Ch+var_7C], ebx 
call	_tma_mp_exptmod_fast
			
add	esp, 6Ch
pop	ebx
pop	X_0
pop	edi
pop	ebp
retn
			
mov	[esp+7Ch+var_7C], edi
mov	[esp+7Ch+var_48], err
call	_tma_mp_clear
mov	eax, [esp+7Ch+var_48]
jmp	short loc_64223C0C
align 4
inc	edi
jmp	loc_64223955
align 10h
inc	edi
jmp	loc_64223947
align 4
inc	edi
jmp	loc_64223939
align 10h
inc	edi
jmp	loc_6422392B
align 4
inc	edi
jmp	loc_6422391D
align 10h
inc	edi
jmp	loc_6422390F
align 4
inc	edi
jmp	loc_64223901
align 10h
inc	edi
jmp	loc_642238F3
align 4
mov	edi, 1
jmp	loc_6422384D
align 4
inc	edi
jmp	loc_642238D3
align 4
inc	edi
jmp	loc_642238A9
align 4
inc	edi
jmp	loc_6422388D
align 4
inc	edi
jmp	loc_6422389B
align 4
inc	edi
jmp	loc_642238C5
align 4
inc	edi
jmp	loc_642238B7
align 4
mov	eax, 0FFFFFFFDh
add	esp, 6Ch
pop	P_0
pop	X_0
pop	edi
pop	ebp
retn
align 4
inc	edi
jmp	loc_642238E1
align 4
			
mov	[esp+7Ch+redmode], 1 
mov	edi, [esp+7Ch+Y]
mov	[esp+7Ch+var_70], edi 
mov	[esp+7Ch+c], P_0 
mov	[esp+7Ch+b], X_0 
mov	ecx, [esp+7Ch+G]
mov	[esp+7Ch+var_7C], ecx 
call	_s_tma_mp_exptmod
jmp	loc_64223C0C
cmp	[esp+7Ch+var_40], 1Ch
jnz	loc_64223D90
xchg	ax, ax
			
mov	eax, 2
jmp	loc_64223BD2
align 4
mov	eax, 0FFFFFFFEh
jmp	loc_64223C0C
align 10h
			
cmp	ecx, 1
jle	short loc_64223CF8
lea	edx, [ecx-1]
lea	edi, ds:0[edx*4]
lea	ebp, ds:0[edi*8]
sub	ebp, edi
mov	[esp+7Ch+var_40], ebp
mov	edx, [eax+edx*4]
test	edx, edx
jz	short loc_64223CEB
mov	edi, ebp
mov	[esp+7Ch+var_44], eax
lea	ebp, [edi+1]
mov	edi, ebp
mov	eax, edx
shr	eax, 1
jz	short loc_64223D88
inc	edi
mov	eax, edx
shr	eax, 2
jz	short loc_64223D88
lea	edi, [ebp+2]
mov	eax, edx
shr	eax, 3
jz	short loc_64223D88
lea	edi, [ebp+3]
mov	eax, edx
shr	eax, 4
jz	short loc_64223D88
lea	edi, [ebp+4]
mov	eax, edx
shr	eax, 5
jz	short loc_64223D88
lea	edi, [ebp+5]
mov	eax, edx
shr	eax, 6
jz	short loc_64223D88
lea	edi, [ebp+6]
mov	eax, edx
shr	eax, 7
jz	short loc_64223D88
lea	edi, [ebp+7]
shr	edx, 8
jnz	short loc_64223D39
xchg	ax, ax
			
mov	[esp+7Ch+var_40], edi
mov	eax, [esp+7Ch+var_44]
test	byte ptr [eax+4], 1
jz	loc_64223BD0
mov	[esp+7Ch+var_50], 1Ch
mov	edx, 2
mov	edi, 1
mov	ebp, [esp+7Ch+var_40]
sub	ebp, 1Dh
and	ebp, 7
mov	[esp+7Ch+var_44], ebp
jz	loc_64223FB1
mov	[esp+7Ch+var_50], 1Dh
mov	ebp, [esp+7Ch+var_40]
cmp	[esp+7Ch+var_50], ebp
jge	loc_64223CF8
test	[eax+4], edx
jz	loc_64223BD0
mov	edx, 4
cmp	[esp+7Ch+var_44], 1
jz	loc_64223FA8
cmp	[esp+7Ch+var_44], 2
jz	loc_64223E99
cmp	[esp+7Ch+var_44], 3
jz	short loc_64223E7C
cmp	[esp+7Ch+var_44], 4
jz	short loc_64223E5F
cmp	[esp+7Ch+var_44], 5
jz	short loc_64223E42
cmp	[esp+7Ch+var_44], 6
jz	short loc_64223E25
inc	[esp+7Ch+var_50]
test	[eax+edi*4], edx
jz	loc_64223BD0
shl	edx, 1
inc	[esp+7Ch+var_50]
test	[eax+edi*4], edx
jz	loc_64223BD0
shl	edx, 1
cmp	edx, 0FFFFFFFh
jbe	short loc_64223E42
inc	edi
mov	edx, 1
			
inc	[esp+7Ch+var_50]
test	[eax+edi*4], edx
jz	loc_64223BD0
shl	edx, 1
cmp	edx, 0FFFFFFFh
jbe	short loc_64223E5F
inc	edi
mov	edx, 1
			
inc	[esp+7Ch+var_50]
test	[eax+edi*4], edx
jz	loc_64223BD0
shl	edx, 1
cmp	edx, 0FFFFFFFh
jbe	short loc_64223E7C
inc	edi
mov	edx, 1
			
inc	[esp+7Ch+var_50]
test	[eax+edi*4], edx
jz	loc_64223BD0
shl	edx, 1
cmp	edx, 0FFFFFFFh
jbe	short loc_64223E99
inc	edi
mov	edx, 1
			
inc	[esp+7Ch+var_50]
test	[eax+edi*4], edx
jz	loc_64223BD0
shl	edx, 1
cmp	edx, 0FFFFFFFh
jbe	loc_64223FA8
inc	edi
mov	edx, 1
mov	ebp, [esp+7Ch+var_50]
			
inc	ebp
cmp	ebp, [esp+7Ch+var_40]
jge	loc_64223CF8
test	[eax+edi*4], edx
jz	loc_64223BD0
shl	edx, 1
cmp	edx, 0FFFFFFFh
jbe	short loc_64223EE2
inc	edi
mov	edx, 1
test	[eax+edi*4], edx
jz	loc_64223BD0
shl	edx, 1
cmp	edx, 0FFFFFFFh
jbe	short loc_64223EFB
inc	edi
mov	edx, 1
test	[eax+edi*4], edx
jz	loc_64223BD0
shl	edx, 1
cmp	edx, 0FFFFFFFh
jbe	short loc_64223F14
inc	edi
mov	edx, 1
test	[eax+edi*4], edx
jz	loc_64223BD0
shl	edx, 1
cmp	edx, 0FFFFFFFh
jbe	short loc_64223F2D
inc	edi
mov	edx, 1
test	[eax+edi*4], edx
jz	loc_64223BD0
shl	edx, 1
cmp	edx, 0FFFFFFFh
jbe	short loc_64223F46
inc	edi
mov	edx, 1
test	[eax+edi*4], edx
jz	loc_64223BD0
shl	edx, 1
cmp	edx, 0FFFFFFFh
jbe	short loc_64223F5F
inc	edi
mov	edx, 1
test	[eax+edi*4], edx
jz	loc_64223BD0
shl	edx, 1
cmp	edx, 0FFFFFFFh
jbe	short loc_64223F78
inc	edi
mov	edx, 1
add	ebp, 7
test	[eax+edi*4], edx
jz	loc_64223BD0
shl	edx, 1
cmp	edx, 0FFFFFFFh
jbe	loc_64223EBE
inc	edi
mov	edx, 1
inc	ebp
cmp	ebp, [esp+7Ch+var_40]
jl	loc_64223EC9
jmp	loc_64223CF8
			
mov	ebp, [esp+7Ch+var_50]
jmp	loc_64223EBE
mov	ebp, 1Ch
jmp	loc_64223EBE
align 4
public _tma_mp_prime_miller_rabin
			
push	ebp
push	edi
push	esi
push	ebx
sub	esp, 5Ch
mov	edi, [esp+6Ch+a]
mov	ebx, [esp+6Ch+b]
mov	esi, [esp+6Ch+result]
mov	dword ptr [esi], 0
cmp	dword ptr [ebx+8], 1
jz	loc_642240AC
cmp	dword ptr [b_0], 1
jle	loc_642240A0
mov	[esp+6Ch+var_6C], 80h 
call	_malloc
test	eax, eax
jz	loc_642240BC
xor	edx, edx
mov	dword ptr [eax+edx*4], 0
mov	dword ptr [eax+edx*4+4], 0
mov	dword ptr [eax+edx*4+8], 0
mov	dword ptr [eax+edx*4+0Ch], 0
mov	dword ptr [eax+edx*4+10h], 0
mov	dword ptr [eax+edx*4+14h], 0
mov	dword ptr [eax+edx*4+18h], 0
mov	dword ptr [eax+edx*4+1Ch], 0
add	edx, 8
cmp	edx, 20h
jnz	short loc_64223FFE
mov	[esp+6Ch+n1.dp], eax
mov	[esp+6Ch+n1.used], 0
mov	[esp+6Ch+n1.alloc], 20h
mov	[esp+6Ch+n1.sign], 0
lea	ebp, [esp+6Ch+n1]
mov	[esp+6Ch+var_68], ebp 
mov	[esp+6Ch+var_6C], a_0 
call	_tma_mp_copy
test	eax, eax
jnz	short loc_642240B1
mov	[esp+6Ch+c], ebp 
mov	[esp+6Ch+var_68], 1 
mov	[esp+6Ch+var_6C], ebp 
call	_tma_mp_sub_d
test	eax, eax
jz	short loc_642240C4
			
mov	[esp+6Ch+var_6C], ebp 
mov	[esp+6Ch+var_58], err
call	_tma_mp_clear
mov	eax, [esp+6Ch+var_58]
jmp	short loc_642240B1
align 10h
mov	eax, [b_0+0Ch]
cmp	dword ptr [eax], 1
ja	loc_64223FE8
mov	eax, 0FFFFFFFDh
			
add	esp, 5Ch
pop	b_0
pop	result_0
pop	a_0
pop	ebp
retn
align 4
mov	eax, 0FFFFFFFEh
jmp	short loc_642240B1
align 4
mov	[esp+6Ch+var_68], ebp 
lea	edx, [esp+6Ch+r]
mov	[esp+6Ch+var_6C], edx 
call	_tma_mp_init_copy
test	eax, eax
jnz	short LBL_N1
lea	edx, [esp+6Ch+r]
mov	[esp+6Ch+var_6C], edx 
call	_tma_mp_cnt_lsb
mov	[esp+6Ch+var_50], eax
mov	[esp+6Ch+d], 0	
lea	ecx, [esp+6Ch+r]
mov	[esp+6Ch+c], ecx 
mov	eax, [esp+6Ch+var_50]
mov	[esp+6Ch+var_68], eax 
mov	[esp+6Ch+var_6C], ecx 
call	_tma_mp_div_2d
test	eax, eax
jz	short loc_64224125
			
lea	j, [esp+6Ch+r]
mov	[esp+6Ch+var_6C], ebx 
mov	[esp+6Ch+var_58], err
call	_tma_mp_clear
mov	eax, [esp+6Ch+var_58]
jmp	LBL_N1
lea	ecx, [esp+6Ch+y]
mov	[esp+6Ch+var_6C], ecx 
call	_tma_mp_init
test	eax, eax
jnz	short LBL_R
lea	edx, [esp+6Ch+y]
mov	[esp+6Ch+d], edx 
mov	[esp+6Ch+c], a_0 
lea	err, [esp+6Ch+r]
mov	[esp+6Ch+var_68], eax 
mov	[esp+6Ch+var_6C], b_0 
call	_tma_mp_exptmod
mov	[esp+6Ch+var_54], eax
test	eax, eax
jnz	short LBL_Y
cmp	[esp+6Ch+y.sign], 1
jz	short loc_6422416B
cmp	[esp+6Ch+y.used], 1
jle	loc_64224202
			
mov	[esp+6Ch+var_68], ebp 
lea	ecx, [esp+6Ch+y]
mov	[esp+6Ch+var_6C], ecx 
call	_tma_mp_cmp
mov	ebx, 1
test	eax, eax
jnz	short loc_642241BF
			
mov	dword ptr [result_0], 1
xor	eax, eax
			
lea	result_0, [esp+6Ch+y]
mov	[esp+6Ch+var_6C], esi 
mov	[esp+6Ch+var_58], err
call	_tma_mp_clear
mov	eax, [esp+6Ch+var_58]
jmp	LBL_R
			
mov	[esp+6Ch+var_68], ebp
lea	a_0, [esp+6Ch+y]
mov	[esp+6Ch+var_6C], edi 
call	_tma_mp_cmp
test	eax, eax
jz	short loc_64224184
mov	eax, [esp+6Ch+var_54]
jmp	short loc_6422418C
			
cmp	j, [esp+6Ch+var_50]
jge	short loc_642241A5
mov	[esp+6Ch+var_68], ebp 
lea	ecx, [esp+6Ch+y]
mov	[esp+6Ch+var_6C], ecx 
call	_tma_mp_cmp
test	eax, eax
jz	short loc_642241A5
lea	eax, [esp+6Ch+y]
mov	[esp+6Ch+c], eax 
mov	[esp+6Ch+var_68], a_0 
mov	[esp+6Ch+var_6C], eax 
call	_tma_mp_sqrmod
test	eax, eax
jnz	short loc_6422418C
cmp	[esp+6Ch+y.sign], 1
jz	short loc_642241FF
cmp	[esp+6Ch+y.used], 1
jle	short loc_6422421E
			
inc	j
jmp	short loc_642241BF
mov	b_0, [esp+6Ch+y.dp]
mov	eax, [ebx]
cmp	eax, 1
ja	loc_6422416B
test	eax, eax
jnz	loc_64224184
jmp	loc_6422416B
mov	edx, [esp+6Ch+y.dp]
mov	edx, [edx]
cmp	edx, 1
ja	short loc_642241FF
test	edx, edx
jnz	loc_6422418C
jmp	short loc_642241FF
align 4
public _tma_mp_prime_next_prime
push	ebp
push	edi
push	esi
push	ebx
sub	esp, 45Ch
mov	eax, [esp+46Ch+t]
dec	eax
cmp	eax, 0FFh
ja	loc_642247D0
mov	eax, [esp+46Ch+a]
mov	dword ptr [eax+8], 0
mov	edi, [eax]
cmp	edi, 1
jle	loc_642247E0
			
cmp	[esp+46Ch+bbs_style], 1
jz	loc_64224ABC
test	edi, edi
jle	short loc_6422428F
mov	y, [esp+46Ch+a]
mov	edx, [ecx+0Ch]
test	byte ptr [edx],	1
jz	loc_64224A98
			
mov	esi, 2
lea	err, [esp+46Ch+res_tab+4]
mov	[esp+46Ch+d], eax 
mov	[esp+46Ch+c], 0	
mov	x, ds:_ltm_prime_tab+4
mov	[esp+46Ch+var_468], ebx	
mov	y, [esp+46Ch+a]
mov	[esp+46Ch+var_46C], ecx	
call	_tma_mp_div_d
test	eax, eax
jnz	loc_642247D5
lea	err, [esp+46Ch+res_tab+8]
mov	[esp+46Ch+d], eax 
mov	[esp+46Ch+c], 0	
mov	edi, ds:_ltm_prime_tab+8
mov	[esp+46Ch+var_468], edi	
mov	ebx, [esp+46Ch+a]
mov	[esp+46Ch+var_46C], ebx	
call	_tma_mp_div_d
test	eax, eax
jnz	loc_642247D5
lea	edx, [esp+46Ch+res_tab+0Ch]
mov	[esp+46Ch+d], edx 
mov	[esp+46Ch+c], 0	
mov	ebp, ds:_ltm_prime_tab+0Ch
mov	[esp+46Ch+var_468], ebp	
mov	ecx, [esp+46Ch+a]
mov	[esp+46Ch+var_46C], ecx	
call	_tma_mp_div_d
test	eax, eax
jnz	loc_642247D5
mov	ebx, 4
lea	edi, [esp+46Ch+res_tab+10h]
mov	ebp, [esp+46Ch+a]
mov	[esp+46Ch+d], edi
mov	[esp+46Ch+c], 0	
mov	edx, ds:_ltm_prime_tab[x*4]
mov	[esp+46Ch+var_468], edx	
mov	[esp+46Ch+var_46C], a_0	
call	_tma_mp_div_d
test	eax, eax
jnz	loc_642247D5
lea	err, [edi+4]
mov	[esp+46Ch+d], eax 
mov	[esp+46Ch+c], 0	
mov	ecx, ds:(_ltm_prime_tab+4)[x*4]
mov	[esp+46Ch+var_468], ecx	
mov	[esp+46Ch+var_46C], a_0	
call	_tma_mp_div_d
test	eax, eax
jnz	loc_642247D5
lea	ecx, [edi+8]
mov	[esp+46Ch+d], ecx 
mov	[esp+46Ch+c], 0	
mov	err, ds:(_ltm_prime_tab+8)[x*4]
mov	[esp+46Ch+var_468], eax	
mov	[esp+46Ch+var_46C], a_0	
call	_tma_mp_div_d
test	eax, eax
jnz	loc_642247D5
lea	err, [edi+0Ch]
mov	[esp+46Ch+d], eax 
mov	[esp+46Ch+c], 0	
mov	edx, ds:(_ltm_prime_tab+0Ch)[x*4]
mov	[esp+46Ch+var_468], edx	
mov	[esp+46Ch+var_46C], a_0	
call	_tma_mp_div_d
test	eax, eax
jnz	loc_642247D5
lea	edx, [edi+10h]
mov	[esp+46Ch+d], edx 
mov	[esp+46Ch+c], 0	
mov	ecx, ds:(_ltm_prime_tab+10h)[x*4]
mov	[esp+46Ch+var_468], ecx	
mov	[esp+46Ch+var_46C], a_0	
call	_tma_mp_div_d
test	eax, eax
jnz	loc_642247D5
lea	ecx, [edi+14h]
mov	[esp+46Ch+d], ecx 
mov	[esp+46Ch+c], 0	
mov	err, ds:(_ltm_prime_tab+14h)[x*4]
mov	[esp+46Ch+var_468], eax	
mov	[esp+46Ch+var_46C], a_0	
call	_tma_mp_div_d
test	eax, eax
jnz	loc_642247D5
add	x, 6
add	edi, 18h
cmp	x, 100h
jnz	loc_64224337
mov	[esp+46Ch+var_46C], 80h	
call	_malloc
test	eax, eax
jz	loc_64224B47
xor	edx, edx
mov	dword ptr [eax+edx*4], 0
mov	dword ptr [eax+edx*4+4], 0
mov	dword ptr [eax+edx*4+8], 0
mov	dword ptr [eax+edx*4+0Ch], 0
mov	dword ptr [eax+edx*4+10h], 0
mov	dword ptr [eax+edx*4+14h], 0
mov	dword ptr [eax+edx*4+18h], 0
mov	dword ptr [eax+edx*4+1Ch], 0
add	edx, 8
cmp	edx, 20h
jnz	short loc_64224458
mov	[esp+46Ch+b.dp], eax
mov	[esp+46Ch+b.used], 0
mov	[esp+46Ch+b.alloc], 20h
mov	[esp+46Ch+b.sign], 0
mov	[esp+46Ch+var_44C], 0
lea	x, [esp+46Ch+res_tab]
mov	[esp+46Ch+var_448], 10000000h
sub	[esp+46Ch+var_448], kstep
			
add	[esp+46Ch+var_44C], kstep
xor	y, y
mov	edx, 2
mov	x, [ebx+4]
add	eax, kstep
mov	ebp, 1
mov	[ebx+ebp*4], eax
mov	ecx, ds:_ltm_prime_tab+4
cmp	eax, ecx
jb	short loc_64224506
sub	eax, ecx
mov	[ebx+4], eax
test	eax, eax
jnz	short loc_6422450F
mov	y, 1
mov	eax, 2
test	edx, edx
jz	short loc_64224594
cmp	edx, 1
jz	short loc_64224565
cmp	edx, 2
jz	short loc_64224543
mov	edx, [ebx+8]
add	edx, kstep
mov	[ebx+8], edx
mov	ecx, ds:_ltm_prime_tab+8
cmp	edx, ecx
jb	short loc_64224539
sub	edx, ecx
mov	[ebx+8], edx
test	edx, edx
jnz	short loc_64224542
mov	y, 1
inc	x
mov	edx, [ebx+x*4]
add	edx, kstep
mov	[ebx+x*4], edx
mov	ecx, ds:_ltm_prime_tab[x*4]
cmp	edx, ecx
jb	short loc_6422455B
sub	edx, ecx
mov	[ebx+x*4], edx
test	edx, edx
jnz	short loc_64224564
mov	y, 1
inc	x
mov	edx, [ebx+x*4]
add	edx, kstep
mov	[ebx+x*4], edx
mov	ecx, ds:_ltm_prime_tab[x*4]
cmp	edx, ecx
jb	short loc_6422457D
sub	edx, ecx
mov	[ebx+x*4], edx
test	edx, edx
jnz	short loc_64224586
mov	y, 1
inc	x
cmp	x, 100h
jz	loc_6422462D
xchg	ax, ax
			
mov	edx, [ebx+x*4]
add	edx, kstep
mov	[ebx+x*4], edx
mov	ecx, ds:_ltm_prime_tab[x*4]
cmp	edx, ecx
jb	short loc_642245AC
sub	edx, ecx
mov	[ebx+x*4], edx
test	edx, edx
jnz	short loc_642245B5
mov	y, 1
inc	x
mov	edx, [ebx+eax*4]
add	edx, kstep
mov	[ebx+eax*4], edx
mov	ecx, ds:_ltm_prime_tab[eax*4]
cmp	edx, ecx
jb	short loc_642245CE
sub	edx, ecx
mov	[ebx+eax*4], edx
test	edx, edx
jnz	short loc_642245D7
mov	y, 1
lea	ecx, [eax+1]
mov	edx, [ebx+x*4]
add	edx, kstep
mov	[ebx+x*4], edx
mov	ebp, ds:_ltm_prime_tab[x*4]
cmp	edx, ebp
jb	short loc_642245F2
sub	edx, ebp
mov	[ebx+x*4], edx
test	edx, edx
jnz	short loc_642245FB
mov	y, 1
lea	x, [eax+2]
mov	edx, [ebx+x*4]
add	edx, kstep
mov	[ebx+x*4], edx
mov	ebp, ds:_ltm_prime_tab[x*4]
cmp	edx, ebp
jb	short loc_64224616
sub	edx, ebp
mov	[ebx+x*4], edx
test	edx, edx
jnz	short loc_6422461F
mov	y, 1
add	eax, 3
cmp	x, 100h
jnz	loc_64224594
cmp	y, 1
jz	loc_64224B18
mov	x, [esp+46Ch+a]
mov	[esp+46Ch+c], eax 
mov	ecx, [esp+46Ch+var_44C]
mov	[esp+46Ch+var_468], ecx	
mov	[esp+46Ch+var_46C], eax	
call	_tma_mp_add_d
test	eax, eax
jnz	LBL_ERR
dec	y
jz	loc_64224B34
xor	ebp, ebp
mov	edx, [esp+46Ch+t]
mov	edi, ds:_ltm_prime_tab[edx*4]
and	edi, 0FFFFFFFh
mov	[esp+46Ch+var_44C], kstep
mov	kstep, x
mov	[esp+46Ch+b.sign], 0
mov	edx, [esp+46Ch+b.dp]
mov	ebp, [esp+46Ch+b.alloc]
test	ebp, ebp
jle	loc_6422475E
lea	ecx, [ebp-1]
and	ecx, 7
xor	err, err
mov	dword ptr [edx+eax*4], 0
mov	al, 1
cmp	eax, ebp
jz	loc_6422475E
test	ecx, ecx
jz	short loc_64224718
cmp	ecx, 1
jz	short loc_6422470C
cmp	ecx, 2
jz	short loc_64224704
cmp	ecx, 3
jz	short loc_642246FC
cmp	ecx, 4
jz	short loc_642246F4
cmp	ecx, 5
jz	short loc_642246EC
cmp	ecx, 6
jz	short loc_642246E4
mov	dword ptr [edx+4], 0
mov	eax, 2
mov	dword ptr [edx+eax*4], 0
inc	eax
mov	dword ptr [edx+eax*4], 0
inc	eax
mov	dword ptr [edx+eax*4], 0
inc	eax
mov	dword ptr [edx+eax*4], 0
inc	eax
mov	dword ptr [edx+eax*4], 0
inc	eax
mov	dword ptr [edx+eax*4], 0
inc	eax
cmp	eax, ebp
jz	short loc_6422475E
			
mov	dword ptr [edx+eax*4], 0
mov	dword ptr [edx+eax*4+4], 0
mov	dword ptr [edx+eax*4+8], 0
mov	dword ptr [edx+eax*4+0Ch], 0
mov	dword ptr [edx+eax*4+10h], 0
mov	dword ptr [edx+eax*4+14h], 0
mov	dword ptr [edx+eax*4+18h], 0
mov	dword ptr [edx+eax*4+1Ch], 0
add	eax, 8
cmp	eax, ebp
jnz	short loc_64224718
			
mov	[edx], edi
xor	edx, edx
test	edi, edi
setnz	dl
mov	[esp+46Ch+b.used], edx
lea	ebp, [esp+46Ch+res]
mov	[esp+46Ch+c], ebp 
lea	ecx, [esp+46Ch+b]
mov	[esp+46Ch+var_468], ecx	
mov	err, [esp+46Ch+a]
mov	[esp+46Ch+var_46C], eax	
call	_tma_mp_prime_miller_rabin
test	eax, eax
jnz	LBL_ERR
mov	edx, [esp+46Ch+res]
test	edx, edx
jz	loc_64224B2B
inc	x
cmp	[esp+46Ch+t], x
jg	loc_6422467C
mov	x, [esp+46Ch+var_44C]
dec	edx
jz	LBL_ERR
			
mov	[esp+46Ch+var_44C], 0
jmp	loc_642244DF
mov	eax, 0FFFFFFFDh
			
add	esp, 45Ch
pop	x
pop	kstep
pop	edi
pop	ebp
retn
mov	esi, [eax+0Ch]
mov	edx, [esi]
mov	[esp+46Ch+var_444], edx
cmp	edx, 653h
ja	loc_6422426A
jz	loc_6422426A
mov	ebx, 0FEh
mov	[esp+46Ch+var_440], edi
mov	ebp, edx
xchg	ax, ax
cmp	ds:_ltm_prime_tab[x*4],	ebp
jnb	loc_64224B54
cmp	[esp+46Ch+bbs_style], 1
jnz	loc_64224BC1
lea	y, [x+1]
mov	edx, ds:(_ltm_prime_tab+4)[x*4]
and	edx, 3
cmp	edx, 3
jz	loc_64224B5C
lea	eax, ds:8[x*4]
lea	edx, _ltm_prime_tab[eax]
mov	edi, y
not	edi
and	edi, 7
mov	[esp+46Ch+var_44C], edi
jz	loc_64224917
lea	y, [x+2]
mov	eax, ds:_ltm_prime_tab[eax]
add	edx, 4
mov	edi, eax
and	edi, 3
cmp	edi, 3
jz	loc_64224990
cmp	[esp+46Ch+var_44C], 1
jz	loc_64224917
cmp	[esp+46Ch+var_44C], 2
jz	loc_64224907
cmp	[esp+46Ch+var_44C], 3
jz	short loc_642248F3
cmp	[esp+46Ch+var_44C], 4
jz	short loc_642248DF
cmp	[esp+46Ch+var_44C], 5
jz	short loc_642248CB
cmp	[esp+46Ch+var_44C], 6
jz	short loc_642248B7
inc	y
mov	eax, [edx]
add	edx, 4
mov	edi, eax
and	edi, 3
cmp	edi, 3
jz	loc_64224990
inc	y
mov	eax, [edx]
add	edx, 4
mov	edi, eax
and	edi, 3
cmp	edi, 3
jz	loc_64224990
inc	y
mov	eax, [edx]
add	edx, 4
mov	edi, eax
and	edi, 3
cmp	edi, 3
jz	loc_64224990
inc	y
mov	eax, [edx]
add	edx, 4
mov	edi, eax
and	edi, 3
cmp	edi, 3
jz	loc_64224990
inc	y
mov	eax, [edx]
add	edx, 4
mov	edi, eax
and	edi, 3
cmp	edi, 3
jz	loc_64224990
inc	y
mov	eax, [edx]
add	edx, 4
mov	edi, eax
and	edi, 3
cmp	edi, 3
jz	short loc_64224990
			
cmp	y, 0FFh
jz	loc_64224B5C
mov	eax, [edx]
mov	edi, eax
and	edi, 3
cmp	edi, 3
jz	short loc_64224990
mov	eax, [edx+4]
mov	edi, eax
and	edi, 3
cmp	edi, 3
jz	short loc_64224990
mov	eax, [edx+8]
mov	edi, eax
and	edi, 3
cmp	edi, 3
jz	short loc_64224990
mov	eax, [edx+0Ch]
mov	edi, eax
and	edi, 3
cmp	edi, 3
jz	short loc_64224990
mov	eax, [edx+10h]
mov	edi, eax
and	edi, 3
cmp	edi, 3
jz	short loc_64224990
mov	eax, [edx+14h]
mov	edi, eax
and	edi, 3
cmp	edi, 3
jz	short loc_64224990
mov	eax, [edx+18h]
mov	edi, eax
and	edi, 3
cmp	edi, 3
jz	short loc_64224990
add	y, 8
mov	eax, [edx+1Ch]
add	edx, 20h
mov	edi, eax
and	edi, 3
cmp	edi, 3
jnz	short loc_64224917
			
mov	y, [esp+46Ch+a]
mov	dword ptr [ecx+8], 0
mov	dword ptr [ecx], 0
mov	x, [ecx+4]
test	ebx, ebx
jle	loc_64224A70
lea	ecx, [ebx-1]
and	ecx, 7
mov	dword ptr [esi], 0
mov	edx, 1
cmp	edx, ebx
jge	loc_64224A70
test	ecx, ecx
jz	short loc_64224A2A
cmp	ecx, 1
jz	short loc_64224A1E
cmp	ecx, 2
jz	short loc_64224A16
cmp	ecx, 3
jz	short loc_64224A0E
cmp	ecx, 4
jz	short loc_64224A06
cmp	ecx, 5
jz	short loc_642249FE
cmp	ecx, 6
jz	short loc_642249F6
mov	dword ptr [esi+edx*4], 0
mov	edx, 2
mov	dword ptr [esi+edx*4], 0
inc	edx
mov	dword ptr [esi+edx*4], 0
inc	edx
mov	dword ptr [esi+edx*4], 0
inc	edx
mov	dword ptr [esi+edx*4], 0
inc	edx
mov	dword ptr [esi+edx*4], 0
inc	edx
mov	dword ptr [esi+edx*4], 0
inc	edx
cmp	edx, ebx
jge	short loc_64224A70
			
mov	dword ptr [esi+edx*4], 0
mov	dword ptr [esi+edx*4+4], 0
mov	dword ptr [esi+edx*4+8], 0
mov	dword ptr [esi+edx*4+0Ch], 0
mov	dword ptr [esi+edx*4+10h], 0
mov	dword ptr [esi+edx*4+14h], 0
mov	dword ptr [esi+edx*4+18h], 0
mov	dword ptr [esi+edx*4+1Ch], 0
add	edx, 8
cmp	edx, ebx
jl	short loc_64224A2A
			
and	eax, 0FFFFFFFh
mov	[esi], eax
test	eax, eax
setnz	al
movzx	ebx, al
mov	esi, [esp+46Ch+a]
mov	[esi], ebx
xor	eax, eax
add	esp, 45Ch
pop	ebx
pop	esi
pop	edi
pop	ebp
retn
align 4
mov	[esp+46Ch+c], ecx 
mov	[esp+46Ch+var_468], 1 
mov	[esp+46Ch+var_46C], ecx	
call	_tma_mp_sub_d
test	eax, eax
jz	loc_6422428F
jmp	loc_642247D5
align 4
mov	edx, [esp+46Ch+a]
mov	ebp, [edx+0Ch]
mov	eax, [ebp+0]
and	eax, 3
cmp	eax, 3
jz	short loc_64224AEA
mov	[esp+46Ch+c], edx 
inc	eax
mov	[esp+46Ch+var_468], eax	
mov	[esp+46Ch+var_46C], edx	
call	_tma_mp_sub_d
test	eax, eax
jnz	loc_642247D5
mov	esi, 4
jmp	loc_64224294
			
lea	kstep, [esp+46Ch+b]
mov	[esp+46Ch+var_46C], esi	
mov	[esp+46Ch+var_450], err
call	_tma_mp_clear
mov	eax, [esp+46Ch+var_450]
add	esp, 45Ch
pop	ebx
pop	esi
pop	y
pop	ebp
retn
align 4
mov	edx, [esp+46Ch+var_448]
cmp	[esp+46Ch+var_44C], edx
jb	loc_642244DF
jmp	loc_64224636
mov	x, [esp+46Ch+var_44C]
jmp	loc_642247C3
mov	edi, [esp+46Ch+var_448]
cmp	[esp+46Ch+var_44C], edi
jnb	loc_642247C3
jmp	loc_64224660
mov	eax, 0FFFFFFFEh
jmp	loc_642247D5
align 4
jbe	loc_64224815
xchg	ax, ax
			
dec	x
cmp	x, 0FFFFFFFFh
jnz	loc_64224808
mov	edi, [esp+46Ch+var_440]
cmp	[esp+46Ch+var_444], 1
ja	loc_6422426A
cmp	[esp+46Ch+var_444], 0
jz	loc_6422426A
mov	edi, [esp+46Ch+a]
mov	dword ptr [edi+8], 0
mov	dword ptr [edi], 0
mov	edx, [edi+4]
xor	eax, eax
jmp	short loc_64224BA3
mov	dword ptr [esi+eax*4], 0
inc	eax
cmp	eax, edx
jl	short loc_64224B9B
mov	dword ptr [esi], 2
mov	esi, [esp+46Ch+a]
mov	dword ptr [esi], 1
xor	eax, eax
jmp	loc_642247D5
mov	x, ds:(_ltm_prime_tab+4)[x*4]
mov	ebp, [esp+46Ch+a]
mov	dword ptr [ebp+8], 0
mov	dword ptr [ebp+0], 0
mov	y, [ebp+4]
test	ecx, ecx
jle	loc_64224CA9
lea	edx, [ecx-1]
and	edx, 7
mov	dword ptr [esi], 0
mov	eax, 1
cmp	eax, ecx
jge	loc_64224CA9
test	edx, edx
jz	short loc_64224C63
cmp	edx, 1
jz	short loc_64224C57
cmp	edx, 2
jz	short loc_64224C4F
cmp	edx, 3
jz	short loc_64224C47
cmp	edx, 4
jz	short loc_64224C3F
cmp	edx, 5
jz	short loc_64224C37
cmp	edx, 6
jz	short loc_64224C2F
mov	dword ptr [esi+eax*4], 0
mov	eax, 2
mov	dword ptr [esi+eax*4], 0
inc	eax
mov	dword ptr [esi+eax*4], 0
inc	eax
mov	dword ptr [esi+eax*4], 0
inc	eax
mov	dword ptr [esi+eax*4], 0
inc	eax
mov	dword ptr [esi+eax*4], 0
inc	eax
mov	dword ptr [esi+eax*4], 0
inc	eax
cmp	eax, ecx
jge	short loc_64224CA9
			
mov	dword ptr [esi+eax*4], 0
mov	dword ptr [esi+eax*4+4], 0
mov	dword ptr [esi+eax*4+8], 0
mov	dword ptr [esi+eax*4+0Ch], 0
mov	dword ptr [esi+eax*4+10h], 0
mov	dword ptr [esi+eax*4+14h], 0
mov	dword ptr [esi+eax*4+18h], 0
mov	dword ptr [esi+eax*4+1Ch], 0
add	eax, 8
cmp	eax, ecx
jl	short loc_64224C63
			
mov	eax, ebx
and	eax, 0FFFFFFFh
mov	[esi], eax
test	eax, eax
setnz	bl
movzx	ecx, bl
mov	edx, [esp+46Ch+a]
mov	[edx], ecx
xor	eax, eax
jmp	loc_642247D5
align 4
public _tma_mp_prime_is_prime
			
push	ebp
push	edi
push	esi
push	ebx
sub	esp, 4Ch
mov	ebx, [esp+5Ch+a]
mov	edi, [esp+5Ch+t]
mov	esi, [esp+5Ch+result]
mov	dword ptr [esi], 0
lea	eax, [edi-1]
cmp	eax, 0FFh
ja	loc_642250BC
mov	eax, [a_0+8]
xor	edx, edx
mov	ecx, ds:_ltm_prime_tab[ix*4]
cmp	eax, 1
jz	short loc_64224D0D
cmp	dword ptr [a_0], 1
jle	loc_64225090
			
inc	ix
mov	ecx, ds:_ltm_prime_tab[edx*4]
cmp	eax, 1
jz	short loc_64224D23
cmp	dword ptr [a_0], 1
jle	loc_642250AC
			
mov	ecx, ds:(_ltm_prime_tab+4)[edx*4]
cmp	eax, 1
jz	short loc_64224D38
cmp	dword ptr [a_0], 1
jle	loc_642250CC
			
mov	ecx, ds:(_ltm_prime_tab+8)[edx*4]
cmp	eax, 1
jz	short loc_64224D4D
cmp	dword ptr [a_0], 1
jle	loc_642250D9
			
mov	ecx, ds:(_ltm_prime_tab+0Ch)[edx*4]
cmp	eax, 1
jz	short loc_64224D62
cmp	dword ptr [a_0], 1
jle	loc_642250E6
			
mov	ebp, ds:(_ltm_prime_tab+10h)[edx*4]
cmp	eax, 1
jz	short loc_64224D77
cmp	dword ptr [a_0], 1
jle	loc_642250F3
			
mov	ebp, ds:(_ltm_prime_tab+14h)[edx*4]
cmp	eax, 1
jz	short loc_64224D8C
cmp	dword ptr [a_0], 1
jle	loc_6422510B
			
mov	ebp, ds:(_ltm_prime_tab+18h)[edx*4]
cmp	eax, 1
jz	short loc_64224DA1
cmp	dword ptr [a_0], 1
jle	loc_642250FF
			
add	edx, 7
cmp	ix, 100h
jnz	loc_64224CF8
mov	[esp+5Ch+res], 0
lea	ecx, [esp+5Ch+var_24]
mov	[esp+5Ch+d], ecx 
mov	[esp+5Ch+c], 0	
mov	ix, ds:_ltm_prime_tab
mov	[esp+5Ch+var_58], edx 
mov	[esp+5Ch+var_5C], a_0 
call	_tma_mp_div_d
test	eax, eax
jnz	loc_642250A4
mov	edx, [esp+5Ch+var_24]
test	edx, edx
jz	loc_642250A4
mov	ebp, 1
mov	[esp+5Ch+var_44], result_0
lea	err, [esp+5Ch+var_24]
mov	[esp+5Ch+d], eax 
mov	[esp+5Ch+c], 0	
mov	esi, ds:_ltm_prime_tab[ebp*4]
mov	[esp+5Ch+var_58], esi 
mov	[esp+5Ch+var_5C], a_0 
call	_tma_mp_div_d
test	eax, eax
jnz	loc_642250A4
mov	edx, [esp+5Ch+var_24]
test	edx, edx
jz	loc_642250A4
lea	esi, [ebp+1]
lea	err, [esp+5Ch+var_24]
mov	[esp+5Ch+d], eax 
mov	[esp+5Ch+c], 0	
mov	ecx, ds:_ltm_prime_tab[esi*4]
mov	[esp+5Ch+var_58], ecx 
mov	[esp+5Ch+var_5C], a_0 
call	_tma_mp_div_d
test	eax, eax
jnz	loc_642250A4
mov	ecx, [esp+5Ch+var_24]
test	ecx, ecx
jz	loc_642250A4
lea	edx, [esp+5Ch+var_24]
mov	[esp+5Ch+d], edx 
mov	[esp+5Ch+c], 0	
mov	err, ds:(_ltm_prime_tab+8)[ebp*4]
mov	[esp+5Ch+var_58], eax 
mov	[esp+5Ch+var_5C], a_0 
call	_tma_mp_div_d
test	eax, eax
jnz	loc_642250A4
mov	ecx, [esp+5Ch+var_24]
test	ecx, ecx
jz	loc_642250A4
lea	edx, [esp+5Ch+var_24]
mov	[esp+5Ch+d], edx 
mov	[esp+5Ch+c], 0	
mov	err, ds:(_ltm_prime_tab+0Ch)[ebp*4]
mov	[esp+5Ch+var_58], eax 
mov	[esp+5Ch+var_5C], a_0 
call	_tma_mp_div_d
test	eax, eax
jnz	loc_642250A4
mov	ecx, [esp+5Ch+var_24]
test	ecx, ecx
jz	loc_642250A4
lea	edx, [esp+5Ch+var_24]
mov	[esp+5Ch+d], edx 
mov	[esp+5Ch+c], 0	
mov	err, ds:(_ltm_prime_tab+10h)[ebp*4]
mov	[esp+5Ch+var_58], eax 
mov	[esp+5Ch+var_5C], a_0 
call	_tma_mp_div_d
test	eax, eax
jnz	loc_642250A4
mov	ebp, [esp+5Ch+var_24]
test	ebp, ebp
jz	loc_642250A4
lea	ebp, [esi+4]
cmp	ebp, 100h
jnz	loc_64224DF7
mov	esi, [esp+5Ch+var_44]
cmp	[esp+5Ch+res], 1
jz	loc_642250A4
lea	ebp, [esp+5Ch+b]
mov	[esp+5Ch+var_5C], ebp 
call	_tma_mp_init
test	eax, eax
jnz	loc_642250A4
mov	[esp+5Ch+var_44], t_0
mov	[esp+5Ch+var_40], result_0
mov	result_0, err
lea	ix, [ix+0]
mov	ebp, ds:_ltm_prime_tab[ix*4]
mov	[esp+5Ch+b.sign], 0
mov	edx, [esp+5Ch+b.dp]
mov	edi, [esp+5Ch+b.alloc]
test	edi, edi
jle	loc_6422502C
lea	ecx, [edi-1]
and	ecx, 7
mov	dword ptr [edx], 0
mov	err, 1
cmp	eax, edi
jz	loc_6422502C
test	ecx, ecx
jz	short loc_64224FE6
cmp	ecx, 1
jz	short loc_64224FDA
cmp	ecx, 2
jz	short loc_64224FD2
cmp	ecx, 3
jz	short loc_64224FCA
cmp	ecx, 4
jz	short loc_64224FC2
cmp	ecx, 5
jz	short loc_64224FBA
cmp	ecx, 6
jz	short loc_64224FB2
mov	dword ptr [edx+4], 0
mov	eax, 2
mov	dword ptr [edx+eax*4], 0
inc	eax
mov	dword ptr [edx+eax*4], 0
inc	eax
mov	dword ptr [edx+eax*4], 0
inc	eax
mov	dword ptr [edx+eax*4], 0
inc	eax
mov	dword ptr [edx+eax*4], 0
inc	eax
mov	dword ptr [edx+eax*4], 0
inc	eax
cmp	eax, edi
jz	short loc_6422502C
			
mov	dword ptr [edx+eax*4], 0
mov	dword ptr [edx+eax*4+4], 0
mov	dword ptr [edx+eax*4+8], 0
mov	dword ptr [edx+eax*4+0Ch], 0
mov	dword ptr [edx+eax*4+10h], 0
mov	dword ptr [edx+eax*4+14h], 0
mov	dword ptr [edx+eax*4+18h], 0
mov	dword ptr [edx+eax*4+1Ch], 0
add	eax, 8
cmp	eax, edi
jnz	short loc_64224FE6
			
and	ebp, 0FFFFFFFh
mov	[edx], ebp
xor	ecx, ecx
test	ebp, ebp
setnz	cl
mov	[esp+5Ch+b.used], ecx
lea	edx, [esp+5Ch+res]
mov	[esp+5Ch+c], edx 
lea	edi, [esp+5Ch+b]
mov	[esp+5Ch+var_58], edi 
mov	[esp+5Ch+var_5C], a_0 
call	_tma_mp_prime_miller_rabin
test	eax, eax
jnz	short LBL_B
mov	ebp, [esp+5Ch+res]
test	ebp, ebp
jz	short LBL_B
inc	ix
cmp	[esp+5Ch+var_44], ix
jg	loc_64224F4C
mov	a_0, [esp+5Ch+var_40]
mov	dword ptr [result_0], 1
			
lea	ix, [esp+5Ch+b]
mov	[esp+5Ch+var_5C], esi 
mov	[esp+5Ch+var_48], err
call	_tma_mp_clear
mov	eax, [esp+5Ch+var_48]
jmp	short loc_642250A4
align 10h
mov	ebp, [a_0+0Ch]
cmp	ecx, [ebp+0]
jnz	loc_64224D0D
			
mov	dword ptr [result_0], 1
xor	eax, eax
			
add	esp, 4Ch
pop	a_0
pop	esi
pop	edi
pop	ebp
retn
mov	ebp, [a_0+0Ch]
cmp	ecx, [ebp+0]
jz	short loc_6422509C
jmp	loc_64224D23
align 4
mov	eax, 0FFFFFFFDh
add	esp, 4Ch
pop	a_0
pop	result_0
pop	t_0
pop	ebp
retn
align 4
mov	ebp, [a_0+0Ch]
cmp	ecx, [ebp+0]
jz	short loc_6422509C
jmp	loc_64224D38
mov	ebp, [a_0+0Ch]
cmp	ecx, [ebp+0]
jz	short loc_6422509C
jmp	loc_64224D4D
mov	ebp, [a_0+0Ch]
cmp	ecx, [ebp+0]
jz	short loc_6422509C
jmp	loc_64224D62
mov	ecx, [a_0+0Ch]
cmp	ebp, [ecx]
jz	short loc_6422509C
jmp	loc_64224D77
mov	ecx, [a_0+0Ch]
cmp	ebp, [ecx]
jz	short loc_6422509C
jmp	loc_64224DA1
mov	ecx, [a_0+0Ch]
cmp	ebp, [ecx]
jz	short loc_6422509C
jmp	loc_64224D8C
align 4
public _tma_mp_prime_random_ex
push	ebp
push	edi
push	esi
push	ebx
sub	esp, 6Ch
mov	esi, [esp+7Ch+t]
mov	ebx, [esp+7Ch+size]
mov	edx, [esp+7Ch+flags]
cmp	ebx, 1
jg	short loc_64225148
mov	eax, 0FFFFFFFDh
			
add	esp, 6Ch
pop	ebx
pop	esi
pop	edi
pop	bsize
retn
align 4
test	t_0, t_0
jle	short loc_64225139
test	dl, 2
jz	short loc_64225154
or	flags_0, 1
mov	edi, size_0
and	edi, 7
mov	[esp+7Ch+var_68], edi
setnz	cl
movzx	ebp, cl
mov	eax, size_0
sar	eax, 3
add	ebp, eax
mov	[esp+7Ch+var_7C], bsize	
mov	[esp+7Ch+var_6C], flags_0
call	_malloc
mov	edi, eax
test	eax, eax
mov	edx, [esp+7Ch+var_6C]
jz	loc_64225333
mov	eax, [esp+7Ch+var_68]
test	eax, eax
jnz	loc_6422531A
mov	[esp+7Ch+var_4C], 0FFh
test	dl, 8
jnz	loc_64225300
mov	[esp+7Ch+var_5C], 0
mov	ecx, edx
and	ecx, 1
cmp	ecx, 1
sbb	eax, eax
and	maskOR_lsb, 0FFFFFFFEh
add	maskOR_lsb, 3
mov	[esp+7Ch+var_5D], al
lea	ecx, [size_0-1]
and	ecx, 7
mov	eax, 1
shl	eax, cl
mov	[esp+7Ch+var_5E], al
lea	size_0,	[edi+bsize-1]
and	edx, 2
mov	[esp+7Ch+var_30], flags_0
mov	[esp+7Ch+var_64], t_0
mov	t_0, ebx
mov	ebx, [esp+7Ch+a]
			
mov	flags_0, [esp+7Ch+dat]
mov	[esp+7Ch+c], edx 
mov	[esp+7Ch+b], bsize 
mov	[esp+7Ch+var_7C], edi 
call	[esp+7Ch+cb]
cmp	eax, bsize
jnz	loc_6422533D
mov	al, [esp+7Ch+var_4C]
and	al, [edi]
or	al, [esp+7Ch+var_5E]
mov	[edi], al
xor	ecx, ecx
cmp	[esp+7Ch+var_68], 1
setz	cl
mov	dl, [esp+7Ch+var_5C]
or	[edi+ecx], dl
mov	al, [esp+7Ch+var_5D]
or	[esi], al
mov	[esp+7Ch+c], bsize 
mov	[esp+7Ch+b], edi 
mov	[esp+7Ch+var_7C], a_0 
call	_tma_mp_read_unsigned_bin
test	eax, eax
jnz	short error
lea	edx, [esp+7Ch+res]
mov	[esp+7Ch+c], edx 
mov	ecx, [esp+7Ch+var_64]
mov	[esp+7Ch+b], ecx 
mov	[esp+7Ch+var_7C], a_0 
call	_tma_mp_prime_is_prime
test	eax, eax
jnz	short error
mov	ecx, [esp+7Ch+res]
test	ecx, ecx
jz	short loc_642251E0
mov	edx, [esp+7Ch+var_30]
test	edx, edx
jnz	short loc_64225279
			
mov	[esp+7Ch+var_7C], edi 
mov	[esp+7Ch+var_6C], err
call	_free
mov	eax, [esp+7Ch+var_6C]
jmp	loc_6422513E
mov	[esp+7Ch+c], a_0
mov	[esp+7Ch+b], 1	
mov	[esp+7Ch+var_7C], a_0 
call	_tma_mp_sub_d
test	eax, eax
jnz	short error
mov	[esp+7Ch+b], a_0 
mov	[esp+7Ch+var_7C], a_0 
call	_tma_mp_div_2
test	eax, eax
jnz	short error
lea	ecx, [esp+7Ch+res]
mov	[esp+7Ch+c], ecx 
mov	err, [esp+7Ch+var_64]
mov	[esp+7Ch+b], eax 
mov	[esp+7Ch+var_7C], a_0 
call	_tma_mp_prime_is_prime
test	eax, eax
jnz	short error
mov	edx, [esp+7Ch+res]
test	edx, edx
jz	loc_642251E0
mov	esi, [esp+7Ch+a]
mov	[esp+7Ch+b], esi 
mov	[esp+7Ch+var_7C], esi 
call	_tma_mp_mul_2
test	eax, eax
jnz	short error
mov	bsize, [esp+7Ch+a]
mov	[esp+7Ch+c], ebp 
mov	[esp+7Ch+b], 1	
mov	[esp+7Ch+var_7C], ebp 
call	_tma_mp_add_d
jmp	error
mov	ecx, 9
sub	ecx, size_0
and	ecx, 7
mov	eax, 80h
sar	eax, cl
mov	[esp+7Ch+var_5C], al
jmp	loc_642251A3
mov	ecx, 8
sub	ecx, [esp+7Ch+var_68]
mov	eax, 0FFh
sar	eax, cl
mov	[esp+7Ch+var_4C], al
jmp	loc_64225195
mov	eax, 0FFFFFFFEh
jmp	loc_6422513E
mov	eax, 0FFFFFFFDh
jmp	error
align 4
public _tma_mp_prime_fermat
push	ebp
push	edi
push	esi
push	ebx
sub	esp, 2Ch
mov	esi, [esp+3Ch+a]
mov	ebx, [esp+3Ch+b]
mov	edi, [esp+3Ch+result]
mov	dword ptr [edi], 0
cmp	dword ptr [ebx+8], 1
jz	loc_64225424
cmp	dword ptr [b_0], 1
jle	loc_64225418
mov	[esp+3Ch+var_3C], 80h 
call	_malloc
test	eax, eax
jz	loc_64225434
xor	edx, edx
mov	dword ptr [eax+edx*4], 0
mov	dword ptr [eax+edx*4+4], 0
mov	dword ptr [eax+edx*4+8], 0
mov	dword ptr [eax+edx*4+0Ch], 0
mov	dword ptr [eax+edx*4+10h], 0
mov	dword ptr [eax+edx*4+14h], 0
mov	dword ptr [eax+edx*4+18h], 0
mov	dword ptr [eax+edx*4+1Ch], 0
add	edx, 8
cmp	edx, 20h
jnz	short loc_6422538A
mov	[esp+3Ch+t.dp],	eax
mov	[esp+3Ch+t.used], 0
mov	[esp+3Ch+t.alloc], 20h
mov	[esp+3Ch+t.sign], 0
lea	ebp, [esp+3Ch+t]
mov	[esp+3Ch+Y], ebp 
mov	[esp+3Ch+P], a_0 
mov	[esp+3Ch+X], a_0 
mov	[esp+3Ch+var_3C], b_0 
call	_tma_mp_exptmod
mov	a_0, eax
test	eax, eax
jz	short loc_6422543C
			
mov	[esp+3Ch+var_3C], ebp 
call	_tma_mp_clear
jmp	short loc_64225429
align 4
mov	eax, [b_0+0Ch]
cmp	dword ptr [eax], 1
ja	loc_64225374
mov	a_0, 0FFFFFFFDh
			
mov	eax, err
add	esp, 2Ch
pop	b_0
pop	err
pop	result_0
pop	ebp
retn
align 4
mov	a_0, 0FFFFFFFEh
jmp	short loc_64225429
align 4
mov	[esp+3Ch+X], b_0 
mov	[esp+3Ch+var_3C], ebp 
call	_tma_mp_cmp
test	eax, eax
jnz	short LBL_T
mov	dword ptr [result_0], 1
jmp	short LBL_T
public _silc_asn1_uninit
push	ebp
mov	ebp, esp
push	ebx
sub	esp, 14h
mov	ebx, [ebp+asn1]
mov	eax, [ebx+4]
mov	[esp], eax	
call	_silc_stack_free
mov	eax, [ebx+8]
mov	[ebp+asn1], eax
add	esp, 14h
pop	ebx
leave
jmp	_silc_stack_free
align 4
public _silc_asn1_init
push	ebp
mov	ebp, esp
push	ebx
sub	esp, 14h
mov	ebx, [ebp+asn1]
mov	dword ptr [esp], 300h 
call	_silc_stack_alloc
mov	[ebx+4], eax
test	eax, eax
jz	short loc_642254B2
mov	dword ptr [esp], 300h 
call	_silc_stack_alloc
mov	[asn1_0+8], eax
test	eax, eax
jz	short loc_642254B8
and	byte ptr [asn1_0+0Ch], 0FEh
mov	al, 1
			
add	esp, 14h
pop	asn1_0
leave
retn
mov	eax, [asn1_0+4]
mov	[esp], eax	
call	_silc_stack_free
xor	eax, eax
jmp	short loc_642254B2
align 4
public _silc_asn1_free
			
push	ebp
mov	ebp, esp
push	ebx
sub	esp, 14h
mov	ebx, [ebp+asn1]
mov	eax, [ebx+4]
mov	[esp], eax	
call	_silc_stack_free
mov	eax, [ebx+8]
mov	[esp], eax	
call	_silc_stack_free
mov	[ebp+asn1], ebx
add	esp, 14h
pop	ebx
leave
jmp	_silc_free
align 4
public _silc_asn1_alloc
			
push	ebp
mov	ebp, esp
push	ebx
sub	esp, 14h
mov	dword ptr [esp+4], 10h 
mov	dword ptr [esp], 1 
call	_silc_calloc
mov	ebx, eax
test	eax, eax
jnz	short loc_64225524
mov	eax, asn1
add	esp, 14h
pop	asn1
leave
retn
align 4
mov	dword ptr [esp], 300h 
call	_silc_stack_alloc
mov	[asn1+4], eax
test	eax, eax
jz	short loc_64225564
mov	dword ptr [esp], 300h 
call	_silc_stack_alloc
mov	[asn1+8], eax
test	eax, eax
jz	short loc_64225556
and	byte ptr [asn1+0Ch], 0FEh
mov	eax, asn1
add	esp, 14h
pop	asn1
leave
retn
mov	eax, [asn1+4]
mov	[esp], eax	
call	_silc_stack_free
lea	esi, [esi+0]
xor	asn1, asn1
jmp	short loc_64225519
push	ebp
mov	ebp, esp
push	esi
push	ebx
sub	esp, 10h
mov	esi, len
mov	dword ptr [esp+4], 10h 
mov	dword ptr [esp], 1 
call	_silc_calloc
mov	ebx, eax
test	eax, eax
jz	short loc_642255B2
test	len, len
jz	short loc_642255B2
mov	dword ptr [esp+4], 1 
mov	[esp], len	
call	_silc_calloc
mov	[sb], eax
test	eax, eax
jz	short loc_642255BB
mov	[sb+4],	eax
mov	[sb+8],	eax
lea	len, [eax+len]
mov	[sb+0Ch], esi
			
mov	eax, sb
add	esp, 10h
pop	sb
pop	len
leave
retn
xor	sb, sb
jmp	short loc_642255B2
align 10h
			
push	ebp
mov	ebp, esp
push	edi
push	esi
push	ebx
sub	esp, 2Ch
mov	esi, stack
mov	ebx, newsize
test	stack, stack
jz	short loc_64225650
test	sb, sb
jz	loc_642256A0
mov	stack, [sb+0Ch]
mov	ecx, [sb]
mov	[ebp+ptr], ecx
mov	ecx, eax
sub	ecx, [ebp+ptr]
cmp	newsize, ecx
ja	short loc_642255FC
mov	edi, sb
			
mov	edx, sb
mov	[sb+8],	eax
			
mov	eax, sb
add	esp, 2Ch
pop	newsize
pop	stack
pop	edi
leave
retn
align 4
mov	eax, [sb+4]
mov	[ebp+var_20], eax
mov	eax, [sb+8]
mov	[ebp+var_24], eax
mov	[esp+0Ch], newsize 
mov	eax, [ebp+ptr]
mov	[esp+8], eax	
mov	[esp+4], ecx	
mov	[esp], stack	
mov	[ebp+var_28], sb
call	_silc_srealloc
test	eax, eax
mov	edx, [ebp+var_28]
jz	loc_642256F4
mov	[sb], eax
mov	stack, [ebp+var_20]
sub	esi, [ebp+ptr]
lea	esi, [eax+esi]
mov	[sb+4],	esi
mov	edi, [ebp+var_24]
sub	edi, [ebp+var_20]
add	esi, edi
mov	[sb+8],	esi
add	eax, newsize
mov	[sb+0Ch], eax
mov	edi, sb
jmp	short loc_642255EC
align 10h
test	sb, sb
jz	loc_64225718
mov	stack, [sb+0Ch]
mov	stack, [sb]
mov	ecx, eax
sub	ecx, esi
cmp	newsize, ecx
jbe	short loc_642255EA
mov	edi, [sb+4]
mov	eax, [sb+8]
mov	[ebp+ptr], eax
mov	[esp+4], newsize 
mov	[esp], esi	
mov	[ebp+var_28], sb
call	_silc_realloc
test	eax, eax
mov	edx, [ebp+var_28]
jz	loc_64225731
mov	[edx], eax
mov	ecx, edi
sub	ecx, esi
lea	esi, [eax+ecx]
mov	[sb+4],	esi
mov	ecx, [ebp+ptr]
sub	ecx, edi
mov	edi, ecx
jmp	short loc_64225641
align 10h
mov	dword ptr [esp+8], 10h 
mov	dword ptr [esp+4], 1 
mov	[esp], stack	
mov	[ebp+var_28], sb
call	_silc_scalloc
mov	edi, eax
test	eax, eax
mov	edx, [ebp+var_28]
jz	loc_642255F1
mov	[esp+4], newsize 
mov	[esp], stack	
call	_silc_smalloc
mov	[sb], eax
test	eax, eax
mov	edx, [ebp+var_28]
jz	loc_642255F1
mov	[sb+4],	eax
mov	[sb+8],	eax
lea	eax, [eax+newsize]
mov	[sb+0Ch], eax
jmp	loc_642255EC
align 4
mov	[esp+4], newsize 
mov	[esp], stack	
call	_silc_smalloc
test	eax, eax
mov	edx, [ebp+var_28]
jz	short loc_64225731
mov	stack, [edx]
mov	ecx, [sb+0Ch]
sub	ecx, esi
mov	edi, eax
rep movsb
jmp	loc_6422562D
align 4
mov	stack, ecx	
call	_silc_buffer_alloc_4
mov	edx, eax
test	eax, eax
jz	loc_642255F1
mov	sb, [sb+0Ch]
jmp	loc_642255EE
			
xor	edx, edx
jmp	loc_642255F1
			
push	ebp
mov	ebp, esp
push	edi
push	esi
push	ebx
sub	esp, 0DCh
mov	ebx, asn1
mov	[ebp+stack1], stack1
mov	stack1,	[ebp+tag]
mov	edi, [ebp+ber_class]
mov	esi, [ebp+opts]
mov	al, [ebp+primitive]
mov	[ebp+var_8D], al
mov	eax, [ebp+src]
mov	eax, [eax+4]
mov	[ebp+ptr], eax
mov	[ebp+len], 0
cmp	[ebp+depth], 1FFh
ja	loc_64225E44
mov	[ebp+found], 0
lea	eax, [ebp+z]
mov	[ebp+var_C0], eax
cmp	type, 7004h
jz	loc_64225BA1
			
mov	eax, opts_0
shr	eax, 7
and	eax, 1
mov	byte ptr [ebp+indef], al
test	ber_class_0, ber_class_0
jnz	short loc_642257C5
cmp	type, 7005h
jz	loc_64225EEC
cmp	type, tag_0
jz	loc_64225FBC
mov	ber_class_0, 2
			
cmp	type, 7006h
jz	loc_64225E1C
			
lea	eax, [ebp+len]
mov	[esp+1Ch], eax	
lea	eax, [ebp+rindef]
mov	[esp+18h], eax	
lea	eax, [ebp+rdata_len]
mov	[esp+14h], eax	
lea	eax, [ebp+rdata]
mov	[esp+10h], eax	
lea	eax, [ebp+rtag]
mov	[esp+0Ch], eax	
lea	eax, [ebp+renc]
mov	[esp+8], eax	
lea	eax, [ebp+rclass]
mov	[esp+4], eax	
mov	eax, [ebp+src]
mov	[esp], eax	
mov	[ebp+var_AC], tag_0
mov	[ebp+type], type
call	_silc_ber_decode
mov	byte ptr [ebp+ret], al
test	al, al
mov	edx, [ebp+var_AC]
mov	ecx, [ebp+type]	
jz	loc_64225A6B
mov	byte ptr [ebp+choice], 0
lea	eax, [ebp+tmpb]
mov	[ebp+var_BC], eax
cmp	type, 7003h
jz	loc_64225B30
			
cmp	type, 7000h
jz	loc_64225A7C
cmp	tag_0, [ebp+rtag]
jz	loc_64225A7C
test	opts_0,	100h
jz	loc_64225E44
cmp	byte ptr [ebp+choice], 0
jnz	loc_64225CD8
mov	eax, opts_0
and	eax, 20h
mov	[ebp+found], 0
			
test	eax, eax
jz	loc_642259CC
mov	edx, [ebp+len]
mov	[ebp+ret], edx
mov	eax, [ebp+src]
mov	ber_class_0, [eax+4]
mov	eax, [eax+8]
sub	eax, edi
cmp	[ebp+ret], eax
ja	short loc_642258BC
mov	eax, [ebp+ret]
lea	edx, [edi+eax]
mov	edi, [ebp+src]
mov	[edi+4], edx
mov	[ebp+len], 0
lea	eax, [type-10h]
cmp	eax, 1
jbe	loc_64225E00
cmp	type, 7000h
setnz	[ebp+var_8D]
movzx	eax, [ebp+var_8D]
mov	[esp+14h], eax	
mov	eax, [ebp+depth]
inc	eax
mov	[esp+10h], eax	
mov	eax, [ebp+src]
mov	[esp+0Ch], eax	
and	opts_0,	0FFFFFFDFh
mov	[esp+8], esi	
mov	dword ptr [esp+4], 0 
mov	[esp], type	
mov	edx, [ebp+stack1] 
mov	eax, asn1	
call	_silc_asn1_decoder
mov	byte ptr [ebp+ret], al
test	al, al
jz	loc_64225A3F
cmp	[ebp+var_8D], 0
jz	loc_64225A3F
mov	[ebp+var_8D], 0
			
cmp	[ebp+found], 0
jnz	loc_64225CFC
			
cmp	[ebp+var_8D], 0
jnz	loc_64225A38
mov	eax, [asn1]
lea	val, [eax+4]
mov	[asn1],	edx
mov	type, [eax]
test	type, type
jnz	loc_64225AB0
cmp	byte ptr [ebp+choice], 0
jz	loc_64225A38
cmp	[ebp+found], 0
jz	ok
mov	eax, [asn1]
lea	edx, [eax+4]
mov	[asn1],	edx
mov	type, [eax]
test	type, type
jz	loc_64225A38
cmp	type, 7002h
jz	loc_64226FD4
test	cx, cx
jns	loc_64227166
mov	edx, type
and	tag_0, 7FFFh
mov	eax, tag_0
shr	ecx, 10h
mov	s_len, ecx
and	ber_class_0, 0Fh
cmp	ber_class_0, 1
adc	ber_class_0, 0FFFFFFFFh
test	type, type
jz	short loc_64225A38
mov	prim, ecx
and	opts_0,	0FFFFFFF0h
mov	ecx, type
jmp	loc_6422578E
align 4
cmp	type, 13h
jz	loc_64226310
ja	loc_64225D44
cmp	type, 6
jz	loc_642266A4
jbe	loc_64225E50
cmp	type, 11h
jbe	loc_64225FD0
mov	eax, [asn1]
mov	opts_0,	[eax]
lea	edx, [eax+8]
mov	[asn1],	edx
mov	ber_class_0, [eax+4]
cmp	byte ptr [ebp+choice], 0
jz	loc_642261BC
cmp	[ebp+found], 0
jnz	loc_64226F8E
lea	prim, [prim+0]
			
test	prim, prim
jz	loc_64225944
mov	dword ptr [prim], 0
cmp	[ebp+var_8D], 0
jz	loc_64225951
nop
			
mov	byte ptr [ebp+ret], 1
			
mov	eax, [ebp+ptr]
test	eax, eax
jz	loc_64226D10
mov	d, [ebp+src]
mov	eax, [edi+4]
sub	eax, [ebp+ptr]
mov	[ebp+len], eax
neg	eax
mov	type, [ebp+src]
add	eax, [ecx+4]
cmp	eax, [ecx]
jb	short loc_64225A6B
mov	[ecx+4], eax
			
mov	al, byte ptr [ebp+ret]
add	esp, 0DCh
pop	asn1
pop	prim
pop	s_len
leave
retn
			
cmp	ber_class_0, [ebp+rclass]
jnz	loc_64225864
mov	eax, opts_0
and	eax, 20h
jz	loc_64225E34
mov	dl, [ebp+rindef]
test	dl, dl
jz	short loc_64225AA2
mov	edx, [ebp+renc]
test	edx, edx
jz	loc_64225E44
mov	[ebp+found], 1
jmp	loc_64225889
align 10h
cmp	type, 7002h
jz	loc_64225E10
test	cx, cx
jns	loc_64225DEC
mov	edx, type
and	tag_0, 7FFFh
mov	eax, tag_0
shr	type, 10h
mov	s_len, ecx
and	ber_class_0, 0Fh
cmp	ber_class_0, 1
adc	ber_class_0, 0FFFFFFFFh
test	tag_0, tag_0
jz	loc_64225962
mov	prim, ecx
and	opts_0,	0FFFFFFF0h
mov	ecx, tag_0
cmp	byte ptr [ebp+choice], 0
jz	loc_64225B88
cmp	[ebp+found], 0
jz	short loc_64225B17
mov	eax, [ebp+len]
test	eax, eax
jz	short loc_64225B17
mov	[ebp+len], 0
mov	[ebp+rdata_len], 0
			
or	opts_0,	100h
mov	byte ptr [ebp+choice], 1
cmp	type, 7003h
jnz	loc_6422584F
mov	eax, [asn1]
lea	tag_0, [eax+4]
mov	[asn1],	edx
mov	type, [eax]
test	type, type
jz	loc_64225D28
cmp	type, 7002h
jz	loc_64225D28
test	cx, cx
js	loc_64225EDC
lea	edx, [eax+8]
mov	[asn1],	edx
mov	edx, [eax+4]
mov	eax, type
and	tag_0, 7FFFh
shr	type, 10h
mov	ber_class_0, ecx
and	ber_class_0, 0Fh
mov	opts_0,	ecx
and	opts_0,	0FFFFFFF0h
cmp	ber_class_0, 1
adc	ber_class_0, 0FFFFFFFFh
or	opts_0,	100h
mov	ecx, tag_0
jmp	loc_64225D31
align 4
cmp	[ebp+found], 0
jz	loc_64225843
cmp	type, 7004h
jnz	loc_6422579A
mov	[ebp+identifier_len], 0
mov	eax, [asn1]
mov	tag_0, [eax]
mov	[ebp+indef], edx
mov	type, [eax+4]
mov	[ebp+var_A4], ecx
mov	dword ptr [edx], 0
mov	dword ptr [ecx], 0
lea	edx, [eax+0Ch]
mov	[asn1],	edx
mov	ber_class_0, [eax+8]
test	edi, edi
jz	loc_64227267
cmp	edi, 7003h
jz	loc_64226060
mov	dword ptr [esp+4], 8 
mov	eax, [asn1+4]
mov	[esp], eax	
call	_silc_smalloc
test	eax, eax
jz	loc_6422715D
mov	[eax], edi
mov	opts_0,	eax
mov	dword ptr [eax+4], 0
mov	edx, [asn1]
lea	eax, [edx+4]
mov	[asn1],	eax
mov	edx, [edx]
test	edx, edx
jnz	loc_6422722F
lea	edi, [ebp+identifier_len]
mov	[esp+1Ch], edi	
lea	eax, [ebp+primtmp]
mov	[esp+18h], eax	
lea	edx, [ebp+data_len]
mov	[esp+14h], edx	
lea	ecx, [ebp+valtmp]
mov	[esp+10h], ecx	
lea	edi, [ebp+var_48]
mov	[esp+0Ch], edi	
mov	dword ptr [esp+8], 0 
mov	dword ptr [esp+4], 0 
mov	eax, [ebp+src]
mov	[esp], eax	
call	_silc_ber_decode
mov	edi, eax
test	al, al
jz	short loc_64225C70
mov	eax, [ebp+var_48]
sub	eax, 10h
cmp	eax, 1
jbe	loc_64227007
lea	esi, [esi+0]
			
mov	ecx, [asn1+4]
test	ecx, ecx
jz	loc_64226D20
mov	ecx, edi
test	cl, cl
jz	ok
mov	eax, [asn1]
lea	edx, [eax+4]
mov	[asn1],	edx
mov	ecx, [eax]
test	type, type
jz	loc_64225A38
cmp	type, 7002h
jz	loc_64226FDF
test	cx, cx
jns	loc_64226E71
mov	edx, type
and	tag_0, 7FFFh
mov	eax, tag_0
shr	type, 10h
mov	edi, ecx
and	ber_class_0, 0Fh
cmp	ber_class_0, 1
adc	ber_class_0, 0FFFFFFFFh
test	tag_0, tag_0
jz	loc_64225A38
mov	esi, ecx
and	opts_0,	0FFFFFFF0h
mov	ecx, tag_0
jmp	loc_6422579A
align 4
mov	eax, opts_0
and	eax, 20h
jmp	loc_64225889
align 4
cmp	[ebp+found], 0
jz	loc_64225A1C
test	s, s
jnz	loc_64226E85
lea	prim, [prim+0]
			
mov	eax, [ebp+len]
			
add	eax, [ebp+rdata_len]
jz	loc_64225944
mov	val, [ebp+src]
mov	type, [edx+4]
mov	prim, edx
mov	edx, [edx+8]
sub	edx, ecx
cmp	eax, edx
ja	loc_64225944
lea	eax, [ecx+eax]
mov	[esi+4], eax
jmp	loc_64225944
			
mov	opts_0,	100h
xor	ber_class_0, ber_class_0
xor	edx, edx
mov	byte ptr [ebp+choice], 1
mov	[ebp+found], 0
jmp	loc_6422584F
cmp	type, 1Bh
jz	loc_64225F18
jbe	loc_64225E84
cmp	type, 1Eh
jz	loc_64226414
jbe	loc_642260E8
cmp	type, 7005h
jz	loc_642266E6
cmp	type, 7006h
jz	loc_6422644C
cmp	type, 7000h
jnz	ok
and	opts_0,	100h
jz	loc_64226C0C
cmp	byte ptr [ebp+choice], 0
jnz	loc_64226DC5
mov	eax, [asn1]
lea	edx, [eax+4]
mov	[asn1],	edx
mov	opts_0,	[eax]
cmp	[ebp+found], 0
jz	loc_64225A1C
test	node, node
jz	loc_64225CFC
mov	dword ptr [esp+8], 10h 
mov	dword ptr [esp+4], 1 
mov	eax, [asn1+4]
mov	[esp], eax	
call	_silc_scalloc
mov	edx, eax
mov	[node],	eax
test	eax, eax
jnz	loc_64226C33
jmp	loc_64225CFC
align 4
lea	edx, [eax+8]
mov	[asn1],	edx
mov	edx, [eax+4]
mov	eax, type
and	tag_0, 7FFFh
jmp	loc_64225ACF
xor	eax, eax
mov	[ebp+var_8D], 0
jmp	loc_642258E3
align 10h
xor	prim, prim
xor	s_len, s_len
xor	edx, edx
jmp	loc_64225AEC
align 4
cmp	tag_0, 7006h
jnz	loc_642257D1
mov	dx, 2
jmp	loc_642257D1
align 4
mov	dl, [ebp+rindef]
cmp	byte ptr [ebp+indef], dl
jz	loc_64225A93
nop
			
mov	byte ptr [ebp+ret], 0
jmp	loc_64225A6B
cmp	type, 3
jz	loc_6422622C
jbe	loc_64226108
cmp	type, 4
jz	loc_64226541
cmp	type, 5
jnz	ok
mov	type, [ebp+rdata_len]
test	ecx, ecx
jz	cont
jmp	loc_64225A3F
align 4
cmp	type, 17h
jz	loc_642263A4
jbe	short loc_64225F04
cmp	type, 18h
jz	loc_642262AE
cmp	type, 1Ah
jnz	ok
mov	eax, [asn1]
mov	opts_0,	[eax]
lea	edx, [eax+8]
mov	[asn1],	edx
mov	ber_class_0, [eax+4]
cmp	byte ptr [ebp+choice], 0
jz	loc_64226B9C
cmp	[ebp+found], 0
jz	loc_64225A1C
mov	edx, [ebp+len]
test	edx, edx
jnz	loc_64226BA9
xchg	ax, ax
			
xor	eax, eax
jmp	loc_64225CFF
align 4
mov	edx, type
and	tag_0, 7FFFh
mov	eax, tag_0
jmp	loc_64225B65
align 4
test	opts_0,	30h
jz	loc_642257D1
mov	di, 2
jmp	loc_642257D1
align 4
cmp	type, 14h
jz	loc_642264B0
cmp	type, 16h
jnz	ok
xchg	ax, ax
			
mov	eax, [asn1]
mov	opts_0,	[eax]
lea	edx, [eax+8]
mov	[asn1],	edx
mov	ber_class_0, [eax+4]
cmp	byte ptr [ebp+choice], 0
jnz	loc_642260C8
cmp	[ebp+found], 0
jz	loc_64225A1C
test	esi, esi
jz	loc_64225CFC
mov	dword ptr [esp+8], 0 
mov	eax, [ebp+rdata_len]
mov	[esp+4], eax	
mov	eax, [ebp+rdata]
mov	[esp], eax	
call	_silc_utf8_encoded_len
mov	[edi], eax
test	eax, eax
jz	ok
inc	eax
mov	[esp+4], eax	
mov	ecx, [ebp+stack1]
mov	[esp], ecx	
call	_silc_smalloc
mov	[esi], eax
test	eax, eax
jz	loc_64225CFC
mov	edx, [edi]
mov	[esp+10h], edx	
mov	[esp+0Ch], eax	
mov	dword ptr [esp+8], 0 
			
mov	eax, [ebp+rdata_len]
mov	[esp+4], eax	
mov	eax, [ebp+rdata]
mov	[esp], eax	
call	_silc_utf8_encode
mov	eax, [s]
mov	edx, [s_len]
mov	byte ptr [eax+edx], 0
mov	eax, [ebp+len]
jmp	loc_64225CFF
align 4
test	opts_0,	30h
jz	loc_642257C5
jmp	loc_642257C0
align 10h
cmp	type, 10h
jb	loc_64226174
mov	edx, [ebp+len]
mov	opts_0,	[ebp+src]
mov	type, [esi+4]
mov	eax, [esi+8]
sub	eax, ecx
cmp	rdata_len_0, eax
ja	short loc_64225FF1
lea	rdata_len_0, [ecx+rdata_len_0]
mov	[esi+4], edx
mov	[ebp+len], 0
mov	eax, [asn1]
lea	rdata_len_0, [eax+4]
mov	[asn1],	edx
mov	esi, [eax]
mov	[ebp+rclass], 0
mov	[ebp+rtag], 0
test	rtype, rtype
jz	loc_6422674C
cmp	rtype, 7002h
jz	loc_6422674C
test	si, si
js	loc_64226FC4
lea	edx, [eax+8]
mov	[asn1],	edx
mov	eax, [eax+4]
mov	[ebp+rtag], eax
mov	ecx, rtype
and	ecx, 7FFFh
shr	esi, 10h
mov	eax, esi
and	rclass_0, 0Fh
mov	[ebp+rclass], rclass_0
test	rclass_0, rclass_0
jz	short loc_64226052
dec	rclass_0
mov	[ebp+rclass], eax
and	esi, 0FFFFFFF0h
mov	edx, [ebp+rclass]
mov	eax, [ebp+rtag]
jmp	loc_64226754
lea	edx, [eax+10h]
mov	[asn1],	edx
mov	edi, [eax+0Ch]
test	edi, edi
jz	loc_6422724B
xor	opts_0,	opts_0
mov	[ebp+choice], esi
jmp	short loc_64226099
align 4
mov	[esi+4], eax
mov	dword ptr [eax+4], 0
mov	ecx, [asn1]
lea	edx, [ecx+4]
mov	[asn1],	edx
mov	edi, [ecx]
test	edi, edi
jz	loc_64226798
mov	esi, eax
mov	dword ptr [esp+4], 8 
mov	eax, [asn1+4]
mov	[esp], eax	
call	_silc_smalloc
test	eax, eax
jz	loc_64226D00
mov	[eax], edi
mov	ecx, [ebp+choice]
test	ecx, ecx
jnz	short loc_6422607C
mov	[ebp+choice], eax
jmp	short loc_6422607F
cmp	[ebp+found], 0
jz	loc_64225A1C
mov	type, [ebp+len]
test	ecx, ecx
jnz	loc_64225F3E
xor	eax, eax
jmp	loc_64225CFF
align 4
cmp	type, 1Ch
jz	loc_642265A5
cmp	type, 1Dh
jz	loc_64225F18
			
mov	byte ptr [ebp+ret], 0
jmp	loc_64225A3F
align 4
cmp	type, 1
jz	loc_64226636
cmp	type, 2
jnz	short ok
and	opts_0,	100h
jz	loc_642267A4
cmp	byte ptr [ebp+choice], 0
jnz	loc_64226D44
mov	eax, [asn1]
lea	edx, [eax+4]
mov	[asn1],	edx
mov	ber_class_0, [eax]
cmp	[ebp+found], 0
jz	short loc_642261A8
test	intval,	intval
jz	loc_64225CFC
mov	dword ptr [esp+8], 10h 
mov	dword ptr [esp+4], 1 
mov	eax, [asn1+4]
mov	[esp], eax	
call	_silc_scalloc
mov	[intval], eax
test	eax, eax
jnz	loc_642267C8
jmp	loc_64225CFC
align 4
cmp	type, 0Ah
jz	short loc_64226116
cmp	type, 0Ch
jnz	ok
mov	eax, [asn1]
mov	ber_class_0, [eax]
lea	edx, [eax+8]
mov	[asn1],	edx
mov	edx, [eax+4]
cmp	byte ptr [ebp+choice], 0
jz	loc_64226820
cmp	[ebp+found], 0
jnz	loc_64226FB2
			
test	d, d
jz	loc_64225944
mov	dword ptr [d], 0
jmp	loc_64225944
align 4
cmp	[ebp+found], 0
jz	loc_64225A1C
test	s, s
jz	loc_64225CFC
mov	dword ptr [esp+8], 0Bh 
mov	eax, [ebp+rdata_len]
mov	[esp+4], eax	
mov	eax, [ebp+rdata]
mov	[esp], eax	
call	_silc_utf8_encoded_len
mov	[s_len], eax
test	eax, eax
jz	ok
inc	eax
mov	[esp+4], eax	
mov	ecx, [ebp+stack1]
mov	[esp], ecx	
call	_silc_smalloc
mov	[s], eax
test	eax, eax
jz	loc_64225CFC
mov	edx, [s_len]
mov	[esp+10h], edx
mov	[esp+0Ch], eax
mov	dword ptr [esp+8], 0Bh
jmp	loc_64225F99
align 4
mov	eax, [asn1]
mov	ber_class_0, [eax]
lea	edx, [eax+8]
mov	[asn1],	edx
mov	edx, [eax+4]
cmp	byte ptr [ebp+choice], 0
jz	loc_6422680C
cmp	[ebp+found], 0
jz	loc_642261A8
mov	eax, [ebp+len]
test	eax, eax
jz	loc_64225ED4
test	d, d
jz	loc_64225CFC
mov	eax, [ebp+rdata_len]
cmp	eax, 1
jbe	loc_642271CE
dec	eax
mov	[esp+8], eax	
mov	eax, [ebp+rdata]
inc	eax
mov	[esp+4], eax	
mov	opts_0,	[ebp+stack1]
mov	[esp], esi	
mov	[ebp+var_AC], d_len
call	_silc_smemdup
mov	[d], eax
mov	eax, [ebp+rdata_len]
lea	eax, ds:0FFFFFFF8h[eax*8]
mov	edx, [ebp+var_AC]
mov	[edx], eax
mov	eax, [ebp+len]
jmp	loc_64225CFF
and	opts_0,	100h
jz	loc_64226990
cmp	byte ptr [ebp+choice], 0
jnz	loc_64226DF0
mov	eax, [asn1]
lea	edx, [eax+4]
mov	[asn1],	edx
mov	ber_class_0, [eax]
cmp	[ebp+found], 0
jz	loc_642261A8
test	t, t
jz	loc_64225CFC
mov	dword ptr [esp+8], 0Ch 
mov	dword ptr [esp+4], 1 
mov	eax, [asn1+4]
mov	[esp], eax	
call	_silc_scalloc
mov	[t], eax
test	eax, eax
jnz	loc_642269B4
jmp	loc_64225CFC
align 10h
mov	eax, [asn1]
mov	opts_0,	[eax]
lea	edx, [eax+8]
mov	[asn1],	edx
mov	ber_class_0, [eax+4]
cmp	byte ptr [ebp+choice], 0
jz	loc_64226C80
cmp	[ebp+found], 0
jz	loc_64225A1C
mov	eax, [ebp+len]
test	eax, eax
jz	loc_64225ED4
test	s, s
jz	loc_64225CFC
mov	dword ptr [esp+8], 8 
mov	eax, [ebp+rdata_len]
mov	[esp+4], eax	
mov	eax, [ebp+rdata]
mov	[esp], eax	
call	_silc_utf8_encoded_len
mov	[s_len], eax
test	eax, eax
jz	ok
inc	eax
mov	[esp+4], eax	
mov	eax, [ebp+stack1]
mov	[esp], eax	
call	_silc_smalloc
mov	[s], eax
test	eax, eax
jz	loc_64225CFC
mov	edx, [s_len]
mov	[esp+10h], edx
mov	[esp+0Ch], eax
mov	dword ptr [esp+8], 8
jmp	loc_64225F99
align 4
and	opts_0,	100h
jz	loc_64226894
cmp	byte ptr [ebp+choice], 0
jnz	loc_64226D9A
mov	eax, [asn1]
lea	edx, [eax+4]
mov	[asn1],	edx
mov	edx, [eax]
cmp	[ebp+found], 0
jz	loc_64226FF4
test	t, t
jz	loc_64225CFC
mov	dword ptr [esp+8], 0Ch 
mov	dword ptr [esp+4], 1 
mov	eax, [asn1+4]
mov	[esp], eax	
mov	[ebp+var_AC], t
call	_silc_scalloc
mov	edx, [ebp+var_AC]
mov	[edx], eax
test	eax, eax
jnz	loc_642268B8
jmp	loc_64225CFC
align 4
mov	eax, [asn1]
mov	opts_0,	[eax]
lea	edx, [eax+8]
mov	[asn1],	edx
mov	ber_class_0, [eax+4]
cmp	byte ptr [ebp+choice], 0
jz	loc_64225CE4
cmp	[ebp+found], 0
jz	loc_64225A1C
mov	edx, [ebp+len]
test	edx, edx
jnz	loc_64225CF1
xor	eax, eax
jmp	loc_64225CFF
and	opts_0,	100h
jz	loc_642268F8
cmp	byte ptr [ebp+choice], 0
jnz	loc_64226D6F
mov	eax, [asn1]
lea	edx, [eax+4]
mov	[asn1],	edx
mov	ber_class_0, [eax]
cmp	[ebp+found], 0
jz	loc_642261A8
test	intval,	intval
jz	loc_64225CFC
mov	dword ptr [esp+8], 4 
mov	dword ptr [esp+4], 1 
mov	eax, [asn1+4]
mov	[esp], eax	
call	_silc_scalloc
mov	[intval], eax
test	eax, eax
jnz	loc_6422691C
jmp	loc_64225CFC
align 10h
mov	eax, [asn1]
mov	opts_0,	[eax]
lea	edx, [eax+8]
mov	[asn1],	edx
mov	ber_class_0, [eax+4]
cmp	byte ptr [ebp+choice], 0
jz	loc_64226CEC
cmp	[ebp+found], 0
jz	loc_64225A1C
mov	type, [ebp+len]
test	ecx, ecx
jz	loc_64225ED4
test	s, s
jz	loc_64225CFC
mov	dword ptr [esp+8], 0Ah 
mov	eax, [ebp+rdata_len]
mov	[esp+4], eax	
mov	eax, [ebp+rdata]
mov	[esp], eax	
call	_silc_utf8_encoded_len
mov	[s_len], eax
test	eax, eax
jz	ok
inc	eax
mov	[esp+4], eax	
mov	edx, [ebp+stack1]
mov	[esp], edx	
call	_silc_smalloc
mov	[s], eax
test	eax, eax
jz	loc_64225CFC
mov	edx, [s_len]
mov	[esp+10h], edx
mov	[esp+0Ch], eax
mov	dword ptr [esp+8], 0Ah
jmp	loc_64225F99
mov	eax, [asn1]
mov	opts_0,	[eax]
lea	edx, [eax+8]
mov	[asn1],	edx
mov	ber_class_0, [eax+4]
cmp	byte ptr [ebp+choice], 0
jz	loc_642268E4
cmp	[ebp+found], 0
jz	loc_64225A1C
mov	type, [ebp+len]
test	ecx, ecx
jz	loc_64225ED4
test	s, s
jz	loc_64225CFC
mov	eax, [ebp+rdata_len]
mov	[esp+8], eax	
mov	eax, [ebp+rdata]
mov	[esp+4], eax	
mov	edx, [ebp+stack1]
mov	[esp], edx	
call	_silc_smemdup
mov	[s], eax
mov	eax, [ebp+rdata_len]
mov	[s_len], eax
mov	eax, [ebp+len]
jmp	loc_64225CFF
mov	eax, [asn1]
mov	opts_0,	[eax]
lea	edx, [eax+8]
mov	[asn1],	edx
mov	ber_class_0, [eax+4]
cmp	byte ptr [ebp+choice], 0
jz	loc_64226C6C
cmp	[ebp+found], 0
jz	loc_64225A1C
mov	eax, [ebp+len]
test	eax, eax
jz	loc_64225ED4
test	s, s
jz	loc_64225CFC
mov	dword ptr [esp+8], 4 
mov	eax, [ebp+rdata_len]
mov	[esp+4], eax	
mov	eax, [ebp+rdata]
mov	[esp], eax	
call	_silc_utf8_encoded_len
mov	[s_len], eax
test	eax, eax
jz	ok
inc	eax
mov	[esp+4], eax	
mov	edx, [ebp+stack1]
mov	[esp], edx	
call	_silc_smalloc
mov	[s], eax
test	eax, eax
jz	loc_64225CFC
mov	edx, [s_len]
mov	[esp+10h], edx
mov	[esp+0Ch], eax
mov	dword ptr [esp+8], 4
jmp	loc_64225F99
and	opts_0,	100h
jz	loc_64226B5C
cmp	byte ptr [ebp+choice], 0
jnz	loc_64226E1B
mov	eax, [asn1]
lea	edx, [eax+4]
mov	[asn1],	edx
mov	edx, [eax]
cmp	[ebp+found], 0
jz	loc_64226FF4
test	val, val
jz	loc_64225CFC
mov	dword ptr [esp+8], 1 
mov	dword ptr [esp+4], 1 
mov	eax, [asn1+4]
mov	[esp], eax	
mov	[ebp+var_AC], val
call	_silc_scalloc
mov	edx, [ebp+var_AC]
mov	[edx], eax
test	eax, eax
jnz	loc_64226B80
jmp	loc_64225CFC
align 4
mov	eax, [asn1]
lea	edx, [eax+4]
mov	[asn1],	edx
mov	eax, [eax]
mov	[ebp+oidstr], eax
cmp	byte ptr [ebp+choice], 0
jz	loc_642269F8
cmp	[ebp+found], 0
jnz	loc_64226FA0
mov	eax, [ebp+oidstr]
test	eax, eax
jz	loc_64225944
mov	ber_class_0, [ebp+oidstr]
jmp	loc_642261B0
and	opts_0,	100h
jz	loc_64226C94
cmp	byte ptr [ebp+choice], 0
jnz	loc_64226E46
mov	eax, [asn1]
lea	edx, [eax+4]
mov	[asn1],	edx
mov	opts_0,	[eax]
cmp	[ebp+found], 0
jz	loc_64225A1C
test	prim, prim
jz	loc_64225CFC
mov	dword ptr [esp+8], 10h 
mov	dword ptr [esp+4], 1 
mov	eax, [asn1+4]
mov	[esp], eax	
call	_silc_scalloc
mov	edx, eax
mov	[prim],	eax
test	eax, eax
jnz	loc_64226CBB
jmp	loc_64225CFC
align 4
			
mov	ecx, rtype	
xor	eax, eax
xor	edx, edx
xor	rtype, rtype
mov	dword ptr [esp+14h], 0
mov	ber_class_0, [ebp+depth]
inc	edi
mov	[esp+10h], edi	
mov	edi, [ebp+src]
mov	[esp+0Ch], edi	
mov	[esp+8], ropts	
mov	[esp+4], edx	
mov	[esp], eax	
mov	edx, [ebp+stack1] 
mov	eax, asn1	
call	_silc_asn1_decoder
mov	byte ptr [ebp+ret], al
test	al, al
jnz	cont
jmp	loc_64225A3F
align 4
mov	esi, [ebp+choice]
jmp	loc_64225C0B
align 4
mov	eax, [asn1]
lea	edx, [eax+4]
mov	[asn1],	edx
mov	eax, [eax]
mov	[ebp+var_3C], intvaltmp_1
cmp	byte ptr [ebp+choice], 0
jnz	loc_64226D50
			
test	eax, eax
jz	cont
lea	ber_class_0, [ebp+var_3C]
mov	edx, [ebp+rdata_len]
test	edx, edx
jz	loc_642269D4
mov	eax, [intval]
mov	[esp+4], eax	
mov	eax, [asn1+4]
mov	[esp], eax	
call	_silc_mp_sinit
mov	eax, [ebp+rdata]
cmp	byte ptr [eax],	0
js	loc_64226EDD
mov	edx, [intval]
mov	[esp+8], edx	
mov	edx, [ebp+rdata_len]
mov	[esp+4], edx	
mov	[esp], eax	
call	_silc_mp_bin2mp
jmp	cont
align 4
cmp	[ebp+found], 0
jnz	loc_6422625D
jmp	loc_642261A8
align 10h
cmp	[ebp+found], 0
jz	loc_642261A8
test	s, s
jz	loc_64225CFC
mov	eax, [ebp+rdata_len]
mov	[esp+4], eax	
mov	eax, [ebp+rdata]
mov	[esp], eax	
mov	[ebp+var_AC], s_len
call	_silc_utf8_valid
test	al, al
mov	edx, [ebp+var_AC]
jz	loc_642271CE
mov	eax, [ebp+rdata_len]
mov	[esp+8], eax	
mov	eax, [ebp+rdata]
mov	[esp+4], eax	
mov	eax, [ebp+stack1]
mov	[esp], eax	
mov	[ebp+var_AC], edx
call	_silc_smemdup
mov	[s], eax
mov	eax, [ebp+rdata_len]
mov	edx, [ebp+var_AC]
mov	[edx], eax
mov	eax, [ebp+len]
jmp	loc_64225CFF
align 4
mov	eax, [asn1]
lea	edx, [eax+4]
mov	[asn1],	edx
mov	eax, [eax]
mov	[ebp+ttmp], ttmp_1
cmp	byte ptr [ebp+choice], 0
jnz	loc_64226DA6
			
test	eax, eax
jz	cont
lea	edx, [ebp+ttmp]
mov	ber_class_0, [ebp+rdata_len]
test	edi, edi
jz	loc_642271BD
mov	eax, [t]
mov	[esp+4], eax	
mov	eax, [ebp+rdata]
mov	[esp], eax	
call	_silc_time_universal
test	al, al
jnz	cont
jmp	ok
align 4
cmp	[ebp+found], 0
jnz	loc_64226572
jmp	loc_64225A1C
align 4
mov	eax, [asn1]
lea	edx, [eax+4]
mov	[asn1],	edx
mov	eax, [eax]
mov	[ebp+intvaltmp], intvaltmp_0
cmp	byte ptr [ebp+choice], 0
jnz	loc_64226D7B
			
test	eax, eax
jz	cont
lea	edi, [ebp+intvaltmp]
mov	type, [ebp+rdata_len]
test	ecx, ecx
jz	loc_642269D4
mov	dword ptr [esp+4], 0 
mov	eax, [asn1+4]
mov	[esp], eax	
call	_silc_stack_push
lea	eax, [ebp+z]
mov	[esp+4], eax	
mov	eax, [asn1+4]
mov	[esp], eax	
call	_silc_mp_sinit
lea	edx, [ebp+z]
mov	[esp+8], edx	
mov	eax, [ebp+rdata_len]
mov	[esp+4], eax	
mov	eax, [ebp+rdata]
mov	[esp], eax	
call	_silc_mp_bin2mp
mov	esi, [intval]
lea	ecx, [ebp+z]
mov	[esp], ecx	
call	_silc_mp_get_ui
mov	[esi], eax
lea	esi, [ebp+z]
mov	[esp], esi	
call	_silc_mp_uninit
mov	eax, [asn1+4]
mov	[esp], eax	
call	_silc_stack_pop
jmp	cont
align 10h
mov	eax, [asn1]
lea	edx, [eax+4]
mov	[asn1],	edx
mov	eax, [eax]
mov	[ebp+ttmp], ttmp_0
cmp	byte ptr [ebp+choice], 0
jnz	loc_64226DFC
			
test	eax, eax
jz	cont
lea	ber_class_0, [ebp+ttmp]
mov	edx, [ebp+rdata_len]
test	edx, edx
jz	short loc_642269D4
mov	eax, [t]
mov	[esp+4], eax	
mov	eax, [ebp+rdata]
mov	[esp], eax	
call	_silc_time_generalized
test	al, al
jnz	cont
			
mov	eax, intval
mov	intval,	esi
mov	esi, t
test	edi, edi
jz	ok
mov	eax, [t]
mov	[esp], eax	
call	_silc_free
mov	byte ptr [ebp+ret], 0
jmp	loc_64225A3F
cmp	[ebp+found], 0
jz	loc_642266CD
mov	ber_class_0, [ebp+oidstr]
test	edi, edi
jz	loc_64225CFC
mov	type, [ebp+rdata_len]
test	ecx, ecx
jz	loc_642271F0
xor	eax, eax
mov	ecx, 10h
mov	edi, [ebp+var_BC]
rep stosb
mov	cl, 18h
mov	edi, [ebp+var_C0]
rep stosb
mov	eax, [ebp+rdata]
mov	dl, [eax]
movzx	eax, dl
lea	ecx, [eax+eax*4]
lea	eax, [eax+ecx*8]
lea	eax, [eax+eax*4]
shr	ax, 8
shr	al, 5
lea	ecx, [eax+eax*4]
shl	ecx, 3
sub	dl, cl
movzx	edx, dl
mov	[esp+10h], edx
movzx	eax, al
mov	[esp+0Ch], eax
mov	dword ptr [esp+8], offset aLu_Lu 
mov	dword ptr [esp+4], 17h 
lea	ecx, [ebp+z]
mov	[esp], ecx	
call	_silc_snprintf
mov	dword ptr [esp+0Ch], 1Dh
lea	opts_0,	[ebp+z]
mov	[esp+8], esi
lea	edi, [ebp+tmpb]
mov	[esp+4], edi	
mov	eax, [asn1+4]
mov	[esp], eax	
call	_silc_buffer_sstrformat
mov	edi, [ebp+rdata_len]
cmp	edi, 1
jbe	loc_64226B48
mov	esi, 1
mov	[ebp+var_A4], asn1
mov	oid, [ebp+rdata]
lea	ecx, [ebx+i]
xor	eax, eax
mov	dl, [ecx]
test	dl, dl
jns	short loc_64226AD7
shl	oid, 7
and	edx, 7Fh
or	oid, edx
inc	i
inc	ecx
cmp	edi, i
ja	short loc_64226AC0
mov	dl, [ebx+i]
mov	ebx, oid
shl	ebx, 7
mov	ecx, 18h
mov	edi, [ebp+var_C0]
xor	eax, eax
rep stosb
movzx	edx, dl
or	edx, oid
mov	[esp+0Ch], edx
mov	dword ptr [esp+8], offset a_Lu_0 
mov	dword ptr [esp+4], 17h 
lea	edx, [ebp+z]
mov	[esp], edx	
call	_silc_snprintf
mov	dword ptr [esp+0Ch], 1Dh
lea	ecx, [ebp+z]
mov	[esp+8], ecx
lea	edi, [ebp+tmpb]
mov	[esp+4], edi	
mov	edx, [ebp+var_A4]
mov	eax, [edx+4]
mov	[esp], eax	
call	_silc_buffer_sstrformat
inc	i
mov	edi, [ebp+rdata_len]
cmp	i, edi
jb	loc_64226AB8
mov	oid, [ebp+var_A4]
mov	eax, [ebp+tmpb.head]
mov	ecx, [ebp+oidstr]
mov	[ecx], eax
mov	eax, [ebp+len]
jmp	loc_64225CFF
align 4
mov	eax, [asn1]
lea	edx, [eax+4]
mov	[asn1],	edx
mov	eax, [eax]
mov	[ebp+valtmp], valtmp_0
cmp	byte ptr [ebp+choice], 0
jnz	loc_64226E27
			
test	eax, eax
jz	cont
lea	edx, [ebp+valtmp]
cmp	[ebp+rdata_len], 1
jnz	loc_642271BD
mov	eax, [val]
mov	val, [ebp+rdata]
cmp	byte ptr [edx],	0FFh
setz	byte ptr [eax]
jmp	cont
align 4
cmp	[ebp+found], 0
jz	loc_64225A1C
test	s, s
jz	loc_64225CFC
mov	dword ptr [esp+8], 9 
mov	eax, [ebp+rdata_len]
mov	[esp+4], eax	
mov	eax, [ebp+rdata]
mov	[esp], eax	
call	_silc_utf8_encoded_len
mov	[s_len], eax
test	eax, eax
jz	ok
inc	eax
mov	[esp+4], eax	
mov	eax, [ebp+stack1]
mov	[esp], eax	
call	_silc_smalloc
mov	[s], eax
test	eax, eax
jz	loc_64225CFC
mov	edx, [s_len]
mov	[esp+10h], edx
mov	[esp+0Ch], eax
mov	dword ptr [esp+8], 9
jmp	loc_64225F99
align 4
mov	eax, [asn1]
lea	edx, [eax+4]
mov	[asn1],	edx
mov	eax, [eax]
mov	[ebp+primtmp], nodetmp_0
cmp	byte ptr [ebp+choice], 0
jnz	loc_64226DD1
			
test	eax, eax
jz	cont
mov	edx, [ebp+primtmp] 
lea	opts_0,	[ebp+primtmp]
mov	type, [ebp+rdata_len]
add	ecx, [ebp+len]	
mov	eax, [ebp+stack1] 
call	_silc_buffer_srealloc_size
mov	[node],	eax
mov	edi, [ebp+len]
mov	ecx, [ebp+rdata_len]
add	ecx, rdata_len_0
mov	node, [ebp+rdata]
mov	edx, [eax+4]
mov	eax, [eax+8]
sub	eax, edx
cmp	ecx, eax
ja	cont
sub	esi, rdata_len_0
mov	rdata_len_0, edx
rep movsb
jmp	cont
cmp	[ebp+found], 0
jnz	loc_642265D6
jmp	loc_64225A1C
align 10h
cmp	[ebp+found], 0
jnz	loc_64226341
jmp	loc_64225A1C
align 4
mov	eax, [asn1]
lea	edx, [eax+4]
mov	[asn1],	edx
mov	eax, [eax]
mov	[ebp+primtmp], primtmp_0
cmp	byte ptr [ebp+choice], 0
jnz	loc_64226E52
			
test	eax, eax
jz	cont
mov	edx, [ebp+primtmp] 
lea	opts_0,	[ebp+primtmp]
mov	type, [ebp+rdata_len]
mov	eax, [ebp+stack1] 
call	_silc_buffer_srealloc_size
mov	[prim],	eax
mov	ecx, [ebp+rdata_len]
mov	prim, [ebp+rdata]
mov	edx, [eax+4]
mov	eax, [eax+8]
sub	eax, edx
cmp	ecx, eax
ja	cont
mov	ber_class_0, edx
rep movsb
jmp	cont
align 4
cmp	[ebp+found], 0
jnz	loc_642264E1
jmp	loc_64225A1C
align 10h
mov	esi, [ebp+choice]
xor	edi, edi
jmp	loc_64225C70
align 10h
mov	val, [ebp+src]
mov	eax, [edx+4]
sub	eax, [edx]
mov	[ebp+len], eax
jmp	loc_64225A5C
mov	[ebp+choice], asn1
jmp	short loc_64226D35
mov	asn1, [esi+4]
mov	[esp], esi	
call	_silc_free
mov	esi, ebx
test	esi, esi
jnz	short loc_64226D28
mov	asn1, [ebp+choice]
jmp	loc_64225C7B
mov	eax, [asn1]
lea	edx, [eax+4]
mov	[asn1],	edx
mov	eax, [eax]
mov	[ebp+var_3C], intvaltmp_1
cmp	[ebp+found], 0
jz	loc_642267BD
mov	type, [ebp+len]
test	ecx, ecx
jnz	loc_642267BD
xor	eax, eax
jmp	loc_64225CFF
mov	eax, [asn1]
lea	edx, [eax+4]
mov	[asn1],	edx
mov	eax, [eax]
mov	[ebp+intvaltmp], intvaltmp_0
cmp	[ebp+found], 0
jz	loc_64226911
mov	ber_class_0, [ebp+len]
test	edi, edi
jnz	loc_64226911
xor	eax, eax
jmp	loc_64225CFF
mov	eax, [asn1]
lea	edx, [eax+4]
mov	[asn1],	edx
mov	eax, [eax]
mov	[ebp+ttmp], ttmp_1
cmp	[ebp+found], 0
jz	loc_642268AD
mov	edx, [ebp+len]
test	edx, edx
jnz	loc_642268AD
xor	eax, eax
jmp	loc_64225CFF
mov	eax, [asn1]
lea	edx, [eax+4]
mov	[asn1],	edx
mov	eax, [eax]
mov	[ebp+primtmp], nodetmp_0
cmp	[ebp+found], 0
jz	loc_64226C25
mov	ber_class_0, [ebp+len]
test	edi, edi
jnz	loc_64226C25
xor	eax, eax
jmp	loc_64225CFF
mov	eax, [asn1]
lea	edx, [eax+4]
mov	[asn1],	edx
mov	eax, [eax]
mov	[ebp+ttmp], ttmp_0
cmp	[ebp+found], 0
jz	loc_642269A9
mov	type, [ebp+len]
test	ecx, ecx
jnz	loc_642269A9
xor	eax, eax
jmp	loc_64225CFF
mov	eax, [asn1]
lea	edx, [eax+4]
mov	[asn1],	edx
mov	eax, [eax]
mov	[ebp+valtmp], valtmp_0
cmp	[ebp+found], 0
jz	loc_64226B75
mov	edx, [ebp+len]
test	edx, edx
jnz	loc_64226B75
xor	eax, eax
jmp	loc_64225CFF
mov	eax, [asn1]
lea	edx, [eax+4]
mov	[asn1],	edx
mov	eax, [eax]
mov	[ebp+primtmp], primtmp_0
cmp	[ebp+found], 0
jz	loc_64226CAD
mov	opts_0,	[ebp+len]
test	esi, esi
jnz	loc_64226CAD
xor	eax, eax
jmp	loc_64225CFF
lea	edx, [eax+8]
mov	[asn1],	edx
mov	edx, [eax+4]
mov	eax, type
and	tag_0, 7FFFh
jmp	loc_64225CB5
mov	dword ptr [esp+8], 2
mov	eax, [ebp+rdata_len]
mov	[esp+4], eax	
mov	eax, [ebp+rdata]
mov	[esp], eax	
call	_silc_utf8_encoded_len
mov	[s_len], eax
test	eax, eax
jz	ok
inc	eax
mov	[esp+4], eax	
mov	eax, [ebp+stack1]
mov	[esp], eax	
call	_silc_smalloc
mov	[s], eax
test	eax, eax
jz	loc_64225CFC
mov	edx, [s_len]
mov	[esp+10h], edx
mov	[esp+0Ch], eax
mov	dword ptr [esp+8], 2
jmp	loc_64225F99
mov	eax, [ebp+rdata_len]
test	eax, eax
jz	short loc_64226F35
xor	edx, edx
xor	esi, esi
mov	[ebp+var_A4], asn1
mov	asn1, edx
mov	eax, [intval]
mov	dword ptr [esp+8], 8 
mov	[esp+4], eax	
mov	[esp], eax	
call	_silc_mp_mul_2exp
mov	eax, [intval]
mov	edx, [ebp+rdata]
movzx	edx, byte ptr [edx+ebx]
not	edx
and	edx, 0FFh
mov	[esp+8], edx	
mov	[esp+4], eax	
mov	[esp], eax	
call	_silc_mp_add_ui
inc	i
mov	ebx, i
cmp	[ebp+rdata_len], i
ja	short loc_64226EF0
mov	ebx, [ebp+var_A4]
lea	eax, [ebp+z]
mov	[esp], eax	
call	_silc_mp_init
mov	dword ptr [esp+4], 0 
lea	edx, [ebp+z]
mov	[esp], edx	
call	_silc_mp_set_ui
mov	eax, [intval]
mov	dword ptr [esp+8], 1 
mov	[esp+4], eax	
mov	[esp], eax	
call	_silc_mp_add_ui
mov	eax, [intval]
mov	[esp+8], eax	
lea	ecx, [ebp+z]
mov	[esp+4], ecx	
mov	[esp], eax	
call	_silc_mp_sub
lea	i, [ebp+z]
mov	[esp], esi	
call	_silc_mp_uninit
jmp	cont
mov	edx, [ebp+len]
test	edx, edx
jnz	loc_642261C9
xor	eax, eax
jmp	loc_64225CFF
mov	edx, [ebp+len]
test	edx, edx
jnz	loc_64226A05
xor	eax, eax
jmp	loc_64225CFF
mov	eax, [ebp+len]
test	eax, eax
jnz	loc_6422682D
xor	eax, eax
jmp	loc_64225CFF
mov	ecx, rtype
and	ecx, 7FFFh
mov	[ebp+rtag], rtype
jmp	loc_6422603F
xor	prim, prim
xor	s_len, s_len
xor	edx, edx
jmp	loc_6422579A
mov	byte ptr [ebp+indef], 0
xor	esi, esi
xor	edx, edx
mov	edi, 2
jmp	loc_642257D1
			
test	val, val
jz	loc_64225944
mov	dword ptr [val], 0
jmp	loc_64225944
mov	edx, [ebp+identifier_len]
mov	edi, [ebp+src]
mov	ecx, [edi+8]
mov	eax, [edi+4]
mov	edi, ecx
sub	edi, eax
cmp	edx, edi
ja	loc_64227218
add	eax, edx
mov	edx, [ebp+src]
mov	[edx+4], eax
mov	[ebp+ret], esi
mov	esi, [ebp+indef]
mov	edi, [ebp+var_A4]
lea	esi, [esi+0]
			
cmp	ecx, eax
jz	short loc_642270A9
lea	ecx, [ebp+identifier_len]
mov	[esp+1Ch], ecx	
lea	eax, [ebp+primtmp]
mov	[esp+18h], eax	
lea	edx, [ebp+data_len]
mov	[esp+14h], edx	
lea	ecx, [ebp+valtmp]
mov	[esp+10h], ecx	
lea	eax, [ebp+var_48]
mov	[esp+0Ch], eax	
mov	dword ptr [esp+8], 0 
mov	dword ptr [esp+4], 0 
mov	edx, [ebp+src]
mov	[esp], edx	
call	_silc_ber_decode
mov	byte ptr [ebp+choice], al
test	al, al
jz	loc_6422719E
mov	ecx, [ebp+var_48]
mov	eax, [ebp+ret]
test	eax, eax
jz	short loc_642270A9
lea	esi, [esi+0]
mov	edx, [eax+4]
cmp	[eax], ecx
jz	short loc_642270BC
mov	eax, edx
test	eax, eax
jnz	short loc_6422709C
			
mov	esi, [ebp+ret]
mov	edi, 1
jmp	loc_64225C70
align 4
mov	edx, [edi]
lea	eax, [edx+1]
shl	eax, 4
mov	[esp+0Ch], eax	
mov	eax, [esi]
mov	[esp+8], eax	
shl	edx, 4
mov	[esp+4], edx	
mov	eax, [asn1+4]
mov	[esp], eax	
call	_silc_srealloc
mov	[esi], eax
test	eax, eax
jz	loc_642271AB
mov	eax, [asn1+4]
test	eax, eax
jz	loc_6422717A
mov	ecx, [ebp+identifier_len]
sub	[ebp+valtmp], ecx
add	ecx, [ebp+data_len]
mov	[ebp+data_len],	ecx
mov	edx, [ebp+valtmp]
mov	eax, [edi]
shl	eax, 4
add	eax, [esi]
mov	[eax], edx
mov	[eax+4], edx
add	edx, ecx
mov	[eax+0Ch], edx
mov	[eax+8], edx
mov	eax, [edi]
inc	eax
mov	[edi], eax
mov	edx, [ebp+data_len]
test	edx, edx
jnz	short loc_6422713E
mov	ecx, [ebp+src]
mov	eax, [ecx+4]
mov	edx, [ecx+8]
mov	[ebp+indef], edx
			
mov	ecx, [ebp+indef]
jmp	loc_6422703C
mov	ecx, [ebp+src]
mov	eax, [ecx+4]
mov	ecx, [ecx+8]
mov	[ebp+indef], ecx
sub	ecx, eax
cmp	edx, ecx
ja	short loc_64227133
add	eax, edx
mov	edx, [ebp+src]
mov	[edx+4], eax
jmp	short loc_64227133
xor	opts_0,	opts_0
xor	edi, edi
jmp	loc_64225C70
lea	edx, [eax+8]
mov	[asn1],	edx
mov	edx, [eax+4]
mov	eax, type
and	eax, 7FFFh
jmp	loc_642259AC
mov	edx, [ebp+identifier_len]
mov	eax, [ebp+data_len]
add	eax, edx
mov	[esp+4], eax	
neg	edx
add	edx, [ebp+valtmp]
mov	[esp], edx	
call	_silc_memdup
mov	[ebp+valtmp], eax
mov	ecx, [ebp+identifier_len]
jmp	loc_642270FB
mov	esi, [ebp+ret]
mov	edi, eax
jmp	loc_64225C70
mov	esi, [ebp+ret]
movzx	edi, byte ptr [ebp+choice]
jmp	loc_64225C70
			
mov	edi, esi
mov	esi, val
test	edi, edi
jz	ok
jmp	loc_642269E2
			
and	opts_0,	100h
jz	ok
mov	eax, [d]
mov	[esp], eax	
call	_silc_free
mov	byte ptr [ebp+ret], 0
jmp	loc_64225A3F
and	opts_0,	100h
jz	ok
mov	edx, [ebp+oidstr]
mov	eax, [edx]
mov	[esp], eax	
call	_silc_free
mov	byte ptr [ebp+ret], 0
jmp	loc_64225A3F
mov	[ebp+ret], esi
mov	esi, [ebp+indef]
mov	edi, [ebp+var_A4]
jmp	loc_6422703C
mov	dword ptr [esp+8], 5Dh 
mov	dword ptr [esp+4], offset aSilcasn1_decod 
mov	dword ptr [esp], offset	aTypeSilc_asn1_	
call	__assert
mov	dword ptr [esp+8], 42h
mov	dword ptr [esp+4], offset aSilcasn1_decod 
mov	dword ptr [esp], offset	aTypeSilc_asn_0	
call	__assert
mov	dword ptr [esp+8], 3Dh 
mov	dword ptr [esp+4], offset aSilcasn1_decod 
mov	dword ptr [esp], offset	aTypeSilc_asn_0	
call	__assert
align 4
public _silc_asn1_decode
			
push	ebp
mov	ebp, esp
push	edi
push	esi
push	ebx
sub	esp, 5Ch
mov	ebx, [ebp+asn1]
test	ebx, ebx
jz	loc_64227394
lea	edx, [ebp+arg_C]
mov	[asn1_0], edx
mov	eax, [ebp+arg_8]
test	type, type
jz	loc_64227394
cmp	type, 7002h
jz	loc_642273E2
test	ax, ax
js	loc_642273A0
lea	ecx, [ebp+arg_10]
mov	[asn1_0], ecx
mov	edx, [edx]
mov	[ebp+tag], edx
mov	ecx, type
and	tag, 7FFFh
shr	type, 10h
mov	esi, eax
and	ber_class, 0Fh
cmp	ber_class, 1
adc	ber_class, 0FFFFFFFFh
test	tag, tag
jz	loc_64227394
cmp	tag, 7002h
jz	loc_642273E0
and	eax, 0FFFFFFF0h
mov	[ebp+opts], eax
test	byte ptr [asn1_0+0Ch], 1
jnz	loc_64227450
mov	[ebp+stack2], 0
xor	edi, edi
lea	eax, [ebp+frame1]
mov	[esp+4], eax	
mov	eax, [asn1_0+4]
mov	[esp], eax	
mov	[ebp+type], tag
call	_silc_stack_push
lea	eax, [ebp+frame2]
mov	[esp+4], eax	
mov	eax, [asn1_0+8]
mov	[esp], eax	
call	_silc_stack_push
mov	ecx, [ebp+type]	
mov	tag, [asn1_0+4]
mov	dword ptr [esp+14h], 0 
mov	dword ptr [esp+10h], 0 
mov	eax, [ebp+src]
mov	[esp+0Ch], eax	
mov	eax, [ebp+opts]
mov	[esp+8], eax	
mov	[esp+4], ber_class 
mov	eax, [ebp+tag]
mov	[esp], eax	
mov	eax, asn1_0	
call	_silc_asn1_decoder
mov	ber_class, eax
test	byte ptr [asn1_0+0Ch], 1
jz	short loc_642273B4
			
test	edi, edi
jz	short loc_64227396
mov	eax, stack1
mov	ecx, [ebp+stack2]
test	ecx, ecx
jz	short loc_64227396
mov	edx, [asn1_0+4]
test	edx, edx
jnz	short loc_64227396
mov	edi, [asn1_0+8]
test	edi, edi
jnz	short loc_64227396
mov	[asn1_0+4], stack1
mov	edx, [ebp+stack2]
mov	[asn1_0+8], edx
jmp	short loc_64227396
align 4
			
xor	ber_class, ber_class
			
mov	stack1,	ret
add	esp, 5Ch
pop	asn1_0
pop	ret
pop	stack1
leave
retn
mov	edx, type
and	edx, 7FFFh
mov	[ebp+tag], edx
mov	ecx, edx
jmp	loc_642272CE
align 4
mov	eax, [asn1_0+4]
mov	[esp], eax	
call	_silc_stack_pop
mov	eax, [asn1_0+8]
mov	[esp], eax	
call	_silc_stack_pop
mov	eax, [asn1_0+4]
test	stack1,	stack1
jz	short loc_6422736D
mov	edx, [asn1_0+8]
test	edx, edx
jz	short loc_6422736D
mov	[asn1_0+4], edx
mov	[asn1_0+8], stack1
jmp	short loc_64227373
mov	edx, [asn1_0]
lea	type, [edx+4]
mov	[asn1_0], eax
mov	eax, [edx]
test	ah, 4
jnz	loc_642274E0
mov	[ebp+stack2], 0
xor	edi, edi
test	ah, 8
jnz	loc_642274A0
mov	al, [asn1_0+0Ch]
			
mov	edx, [asn1_0]
lea	tag, [edx+4]
mov	[asn1_0], ecx
mov	ecx, [edx]
test	type, type
jz	short loc_6422748C
cmp	type, 7002h
jz	short loc_6422748C
test	cx, cx
js	loc_642274FC
lea	ber_class, [edx+8]
mov	[asn1_0], esi
mov	edx, [edx+4]
mov	[ebp+tag], edx
mov	edx, type
and	tag, 7FFFh
shr	type, 10h
mov	ber_class, ecx
and	ber_class, 0Fh
cmp	ber_class, 1
adc	ber_class, 0FFFFFFFFh
and	ecx, 0FFFFFFF0h
mov	[ebp+opts], ecx
mov	ecx, tag
jmp	short loc_6422747E
mov	eax, [asn1_0+4]
mov	[esp], eax	
mov	[ebp+type], tag
call	_silc_stack_pop
mov	eax, [asn1_0+8]
mov	[esp], eax	
call	_silc_stack_pop
mov	al, [asn1_0+0Ch]
and	eax, 0FFFFFFFEh
mov	[asn1_0+0Ch], al
mov	ecx, [ebp+type]
mov	[ebp+stack2], 0
xor	edi, edi
			
test	al, 1
jnz	loc_64227333
jmp	loc_64227309
align 4
			
mov	[ebp+tag], 0
xor	ber_class, ber_class
mov	[ebp+opts], 0
jmp	short loc_6422747E
align 10h
mov	al, [asn1_0+0Ch]
test	al, 1
jnz	loc_64227407
mov	dword ptr [esp+4], 0 
mov	eax, [asn1_0+4]
mov	[esp], eax	
call	_silc_stack_push
mov	dword ptr [esp+4], 0 
mov	eax, [asn1_0+8]
mov	[esp], eax	
call	_silc_stack_push
mov	al, [asn1_0+0Ch]
or	eax, 1
mov	[asn1_0+0Ch], al
jmp	loc_64227407
align 10h
mov	edi, [asn1_0+4]
mov	edx, [asn1_0+8]
mov	[ebp+stack2], edx
mov	dword ptr [asn1_0+4], 0
mov	dword ptr [asn1_0+8], 0
jmp	loc_642273FB
mov	edx, type
and	edx, 7FFFh
mov	[ebp+tag], edx
jmp	loc_64227438
			
push	ebp
mov	ebp, esp
push	edi
push	esi
mov	esi, data
mov	data, [sb+4]
mov	sb, [sb+8]
sub	eax, edx
cmp	len, eax
ja	short loc_64227529
mov	edi, edx
rep movsb
mov	eax, edx
pop	data
pop	edi
leave
retn
xor	eax, eax
jmp	short loc_64227525
align 10h
			
push	ebp
mov	ebp, esp
sub	esp, 18h
mov	edx, [sb]
mov	dword ptr [sb+0Ch], 0
mov	dword ptr [sb+8], 0
mov	dword ptr [sb+4], 0
mov	dword ptr [sb],	0
mov	[esp], edx	
call	_silc_free
leave
retn
align 10h
push	ebp
mov	ebp, esp
push	esi
push	ebx
sub	esp, 10h
mov	esi, len
mov	dword ptr [esp+4], 10h 
mov	dword ptr [esp], 1 
call	_silc_calloc
mov	ebx, eax
test	eax, eax
jz	short loc_642275AA
test	len, len
jz	short loc_642275AA
mov	dword ptr [esp+4], 1 
mov	[esp], len	
call	_silc_calloc
mov	[sb], eax
test	eax, eax
jz	short loc_642275B3
mov	[sb+4],	eax
mov	[sb+8],	eax
lea	len, [eax+len]
mov	[sb+0Ch], esi
			
mov	eax, sb
add	esp, 10h
pop	sb
pop	len
leave
retn
xor	sb, sb
jmp	short loc_642275AA
align 4
			
push	ebp
mov	ebp, esp
push	edi
push	esi
push	ebx
sub	esp, 2Ch
mov	esi, stack
mov	ebx, newsize
test	stack, stack
jz	short loc_64227648
test	sb, sb
jz	loc_64227698
mov	stack, [sb+0Ch]
mov	ecx, [sb]
mov	[ebp+ptr], ecx
mov	ecx, eax
sub	ecx, [ebp+ptr]
cmp	newsize, ecx
ja	short loc_642275F4
mov	edi, sb
			
mov	edx, sb
mov	[sb+8],	eax
			
mov	eax, sb
add	esp, 2Ch
pop	newsize
pop	stack
pop	edi
leave
retn
align 4
mov	eax, [sb+4]
mov	[ebp+var_20], eax
mov	eax, [sb+8]
mov	[ebp+var_24], eax
mov	[esp+0Ch], newsize 
mov	eax, [ebp+ptr]
mov	[esp+8], eax	
mov	[esp+4], ecx	
mov	[esp], stack	
mov	[ebp+var_28], sb
call	_silc_srealloc
test	eax, eax
mov	edx, [ebp+var_28]
jz	loc_642276EC
mov	[sb], eax
mov	stack, [ebp+var_20]
sub	esi, [ebp+ptr]
lea	esi, [eax+esi]
mov	[sb+4],	esi
mov	edi, [ebp+var_24]
sub	edi, [ebp+var_20]
add	esi, edi
mov	[sb+8],	esi
add	eax, newsize
mov	[sb+0Ch], eax
mov	edi, sb
jmp	short loc_642275E4
align 4
test	sb, sb
jz	loc_64227710
mov	stack, [sb+0Ch]
mov	stack, [sb]
mov	ecx, eax
sub	ecx, esi
cmp	newsize, ecx
jbe	short loc_642275E2
mov	edi, [sb+4]
mov	eax, [sb+8]
mov	[ebp+ptr], eax
mov	[esp+4], newsize 
mov	[esp], esi	
mov	[ebp+var_28], sb
call	_silc_realloc
test	eax, eax
mov	edx, [ebp+var_28]
jz	loc_64227729
mov	[edx], eax
mov	ecx, edi
sub	ecx, esi
lea	esi, [eax+ecx]
mov	[sb+4],	esi
mov	ecx, [ebp+ptr]
sub	ecx, edi
mov	edi, ecx
jmp	short loc_64227639
align 4
mov	dword ptr [esp+8], 10h 
mov	dword ptr [esp+4], 1 
mov	[esp], stack	
mov	[ebp+var_28], sb
call	_silc_scalloc
mov	edi, eax
test	eax, eax
mov	edx, [ebp+var_28]
jz	loc_642275E9
mov	[esp+4], newsize 
mov	[esp], stack	
call	_silc_smalloc
mov	[sb], eax
test	eax, eax
mov	edx, [ebp+var_28]
jz	loc_642275E9
mov	[sb+4],	eax
mov	[sb+8],	eax
lea	eax, [eax+newsize]
mov	[sb+0Ch], eax
jmp	loc_642275E4
align 4
mov	[esp+4], newsize 
mov	[esp], stack	
call	_silc_smalloc
test	eax, eax
mov	edx, [ebp+var_28]
jz	short loc_64227729
mov	stack, [edx]
mov	ecx, [sb+0Ch]
sub	ecx, esi
mov	edi, eax
rep movsb
jmp	loc_64227625
align 10h
mov	stack, ecx	
call	_silc_buffer_alloc_5
mov	edx, eax
test	eax, eax
jz	loc_642275E9
mov	sb, [sb+0Ch]
jmp	loc_642275E6
			
xor	edx, edx
jmp	loc_642275E9
			
push	ebp
mov	ebp, esp
push	edi
push	esi
push	ebx
sub	esp, 11Ch
mov	[ebp+asn1], asn1
mov	[ebp+stack2], stack1
mov	[ebp+stack], stack2
mov	ebx, [ebp+type]
mov	asn1, [ebp+opts]
mov	dl, [ebp+primitive]
mov	byte ptr [ebp+size], dl
mov	stack2,	[ebp+dest]
mov	ecx, [ecx+4]
mov	[ebp+ptr], ecx
cmp	[ebp+depth], 1FFh
ja	loc_64227BD0
xor	esi, esi
mov	[ebp+ropts], 0
lea	edx, [ebp+buf]
mov	[ebp+var_FC], edx
lea	ecx, [ebp+val]
mov	[ebp+var_100], ecx
			
mov	edx, opts_0
and	dh, 0FEh
mov	d, [ebp+ber_class]
test	edi, edi
jnz	short loc_642277BC
cmp	type_0,	7005h
jz	loc_64227BAC
cmp	[ebp+tag], type_0
jz	loc_64227BAC
mov	[ebp+ber_class], 2
			
test	dl, 20h
jnz	loc_64227850
mov	eax, opts_0
shr	eax, 7
and	eax, 1
mov	byte ptr [ebp+var_E4], al
cmp	type_0,	13h
jz	loc_64228360
ja	loc_64227A50
cmp	type_0,	6
jz	loc_64227CBC
ja	loc_64227BF8
cmp	type_0,	3
jz	loc_64228054
ja	loc_64228730
cmp	type_0,	1
jz	loc_642283F0
cmp	type_0,	2
jz	loc_642281A8
xchg	ax, ax
			
xor	ret, ret
xchg	ax, ax
			
mov	s_len, [ebp+ptr]
test	eax, eax
jz	loc_6422834C
mov	cp, [ebp+dest]
mov	eax, [edx+4]
mov	ecx, eax
sub	len, [ebp+ptr]
mov	edx, [edx]
sub	eax, len
cmp	eax, edx
jb	short loc_64227842
mov	prim, [ebp+dest]
mov	[ebx+4], eax
mov	eax, ret
add	esp, 11Ch
pop	prim
pop	ret
pop	d
leave
retn
align 10h
mov	ecx, 10h
xor	eax, eax
mov	edi, [ebp+var_FC]
rep stosb
lea	eax, [type_0-10h]
cmp	eax, 1
setnbe	byte ptr [ebp+i]
lea	eax, [ebp+frame]
mov	[esp+4], eax	
mov	ecx, [ebp+stack]
mov	[esp], ecx	
mov	[ebp+var_F0], opts_0
call	_silc_stack_push
movzx	eax, byte ptr [ebp+i]
mov	[esp+18h], primitive_0 
mov	primitive_0, [ebp+depth]
inc	eax
mov	[esp+14h], eax	
lea	eax, [ebp+buf]
mov	[esp+10h], eax	
mov	edx, [ebp+var_F0]
and	edx, 0FFFFFFDFh
mov	[esp+0Ch], opts_0 
mov	dword ptr [esp+8], 0 
mov	[esp+4], type_0	
mov	[esp], type_0	
mov	ecx, [ebp+stack2] 
mov	opts_0,	[ebp+stack] 
mov	eax, [ebp+asn1]	
call	_silc_asn1_encoder
mov	ret, eax
test	al, al
jz	loc_64228CAA
mov	dword ptr [esp+8], 0 
mov	eax, [ebp+buf.tail]
sub	eax, [ebp+buf.data]
mov	[esp+4], eax	
mov	ecx, [ebp+tag]
mov	[esp], ecx	
call	_silc_ber_encoded_len
mov	[ebp+ropts], eax
mov	eax, [ebp+dest]
mov	type_0,	[eax]
mov	eax, [eax+0Ch]
mov	opts_0,	eax
sub	opts_0,	ebx
mov	ecx, [ebp+ropts]
add	ecx, opts_0
mov	[ebp+size], ecx
mov	ret, [ebp+stack2]
test	esi, esi
jz	loc_64228300
cmp	[ebp+size], opts_0
ja	loc_64227DD4
			
mov	ecx, [ebp+dest]
mov	[ecx+8], eax
mov	opts_0,	[ebp+buf.data]
mov	dword ptr [esp+18h], 0 
mov	eax, [ebp+buf.tail]
sub	eax, opts_0
mov	[esp+14h], eax	
mov	[esp+10h], opts_0 
mov	ebx, [ebp+tag]
mov	[esp+0Ch], ebx	
mov	dword ptr [esp+8], 1 
mov	eax, [ebp+ber_class]
mov	[esp+4], eax	
mov	opts_0,	[ebp+dest]
mov	[esp], opts_0	
call	_silc_ber_encode
mov	esi, eax
mov	eax, [ebp+stack]
test	eax, eax
jz	loc_64228B4D
mov	ecx, [ebp+stack]
mov	[esp], ecx	
call	_silc_stack_pop
mov	ebx, ret
test	bl, bl
jz	loc_64227818
cmp	byte ptr [ebp+i], 0
jz	loc_64227818
mov	byte ptr [ebp+size], 0
			
mov	opts_0,	[ebp+ropts]
test	edx, edx
jz	short loc_642279D8
mov	timeval, [ebp+dest]
mov	edx, [eax+4]
mov	ecx, eax
mov	eax, [eax+8]
sub	eax, edx
cmp	[ebp+ropts], eax
ja	short loc_642279D8
add	edx, [ebp+ropts]
mov	[ecx+4], edx
			
cmp	byte ptr [ebp+size], 0
jnz	short ok
mov	prim, [ebp+asn1]
mov	timeval, [ebx]
lea	edx, [eax+4]
mov	[ebx], edx
mov	ebx, [eax]
test	type_0,	type_0
jnz	short loc_64227A00
			
mov	ret, 1
jmp	loc_64227818
align 10h
cmp	type_0,	7002h
jz	loc_64227BE0
test	bx, bx
js	loc_64227BBC
lea	edx, [eax+8]
mov	ecx, [ebp+asn1]
mov	[ecx], edx
mov	eax, [eax+4]
mov	[ebp+tag], eax
mov	edx, type_0
and	edx, 7FFFh
shr	ebx, 10h
mov	eax, ebx
and	eax, 0Fh
cmp	eax, 1
adc	eax, 0FFFFFFFFh
mov	[ebp+ber_class], eax
test	type_0,	type_0
jz	short ok
mov	eax, ebx
and	opts_0,	0FFFFFFF0h
mov	ebx, type_0
jmp	loc_64227794
align 10h
cmp	type_0,	1Bh
jz	short loc_64227A7C
ja	loc_64227C94
cmp	type_0,	17h
jz	loc_64227F78
ja	loc_6422864C
cmp	type_0,	14h
jz	loc_642285BC
cmp	type_0,	16h
jnz	loc_64227814
			
mov	opts_0,	[ebp+asn1]
mov	eax, [edx]
mov	edi, [eax]
lea	edx, [eax+8]
mov	ecx, [ebp+asn1]
mov	[ecx], edx
mov	eax, [eax+4]
mov	[ebp+i], eax
test	d, d
jz	cont
mov	dword ptr [esp+8], 0 
mov	[esp+4], eax	
mov	[esp], d	
call	_silc_utf8_decoded_len
mov	type_0,	eax
test	eax, eax
jz	loc_64227818
lea	s_len, [ebp+frame]
mov	[esp+4], eax	
mov	edx, [ebp+asn1]
mov	eax, [edx+8]
mov	[esp], eax	
call	_silc_stack_push
lea	eax, [s_len+1]
mov	[esp+4], eax	
mov	ecx, [ebp+stack]
mov	[esp], ecx	
call	_silc_smalloc
mov	ret, eax
test	eax, eax
jz	short loc_64227B19
mov	[esp+10h], s_len 
mov	[esp+0Ch], s	
mov	dword ptr [esp+8], 0 
			
mov	s, [ebp+i]
mov	[esp+4], eax	
mov	[esp], d	
call	_silc_utf8_decode
mov	byte ptr [s+s_len], 0
			
movzx	d, byte	ptr [ebp+var_E4]
mov	[esp+8], edi	
mov	[esp+4], s_len	
mov	edx, [ebp+tag]
mov	[esp], edx	
call	_silc_ber_encoded_len
mov	[ebp+ropts], eax
mov	ecx, [ebp+dest]
mov	eax, [ecx+0Ch]
sub	eax, [ecx]
mov	ecx, [ebp+ropts]
add	ecx, eax	
mov	edx, [ebp+dest]	
mov	eax, [ebp+stack2] 
call	_silc_buffer_srealloc_size_0
mov	[ebp+dest], eax
mov	[esp+18h], edi	
mov	[esp+14h], s_len 
mov	[esp+10h], s	
mov	s_len, [ebp+tag]
mov	[esp+0Ch], ebx	
mov	dword ptr [esp+8], 0 
mov	eax, [ebp+ber_class]
mov	[esp+4], eax	
mov	edx, [ebp+dest]
mov	[esp], edx	
call	_silc_ber_encode
mov	s, eax
mov	ecx, [ebp+asn1]
mov	eax, [ecx+8]
mov	[esp], eax	
call	_silc_stack_pop
mov	ebx, ret
test	bl, bl
jnz	cont
jmp	loc_64227818
align 4
			
test	al, 30h
jz	loc_642277BC
jmp	loc_642277B5
align 4
mov	eax, type_0
and	eax, 7FFFh
mov	[ebp+tag], eax
mov	edx, eax
jmp	loc_64227A2E
align 10h
xor	esi, esi
mov	opts_0,	ret
add	esp, 11Ch
pop	type_0
pop	ret
pop	edi
leave
retn
align 10h
xor	eax, eax
mov	[ebp+ber_class], 0
mov	[ebp+tag], 0
jmp	loc_64227794
align 4
cmp	type_0,	11h
jbe	loc_64227E48
mov	opts_0,	[ebp+asn1]
mov	eax, [edx]
mov	edi, [eax]
lea	edx, [eax+8]
mov	ecx, [ebp+asn1]
mov	[ecx], edx
mov	eax, [eax+4]
mov	[ebp+i], eax
test	d, d
jz	cont
mov	dword ptr [esp+8], 0Bh 
mov	[esp+4], eax	
mov	[esp], d	
call	_silc_utf8_decoded_len
mov	type_0,	eax
test	eax, eax
jz	loc_64227818
lea	s_len, [ebp+frame]
mov	[esp+4], eax	
mov	edx, [ebp+asn1]
mov	eax, [edx+8]
mov	[esp], eax	
call	_silc_stack_push
lea	eax, [s_len+1]
mov	[esp+4], eax	
mov	ecx, [ebp+stack]
mov	[esp], ecx	
call	_silc_smalloc
mov	ret, eax
test	eax, eax
jz	loc_64227B19
mov	[esp+10h], s_len
mov	[esp+0Ch], s
mov	dword ptr [esp+8], 0Bh
jmp	loc_64227B03
align 4
cmp	type_0,	1Eh
jz	loc_64227EE8
ja	loc_6422883C
cmp	type_0,	1Ch
jz	loc_64227EE8
cmp	type_0,	1Dh
jz	loc_64227A7C
xor	ret, ret
jmp	loc_64227818
mov	opts_0,	[ebp+asn1]
mov	eax, [edx]
lea	edx, [eax+4]
mov	ecx, [ebp+asn1]
mov	[ecx], edx
mov	type_0,	[eax]
test	oidstr,	oidstr
jz	cont
mov	dword ptr [esp+4], 2Eh 
mov	[esp], oidstr	
call	_strchr
mov	edx, eax
test	eax, eax
jz	loc_64227818
xor	edi, edi
lea	cp, [ebp+oid]
mov	[ebp+ropts], eax
mov	eax, ret
mov	byte ptr [ebp+i], al
mov	ret, cp
mov	edx, [ebp+ropts]
mov	[esp+8], edx
mov	dword ptr [esp+4], offset aU_0 
mov	[esp], oidstr	
call	_sscanf
dec	eax
jnz	loc_64228C9E
inc	c
cmp	c, 19h
jz	loc_64228C9E
mov	eax, [ebp+oid]
mov	[ebp+c*4+var_C4], eax
lea	oidstr,	[cp+1]
mov	dword ptr [esp+4], 2Eh 
mov	[esp], oidstr	
call	_strchr
mov	cp, eax
test	eax, eax
jnz	short loc_64227D08
movzx	esi, byte ptr [ebp+i]
mov	ecx, [ebp+ropts]
mov	[esp+8], ecx
mov	dword ptr [esp+4], offset aU_0 
mov	[esp], oidstr	
call	_sscanf
dec	eax
jnz	loc_64227818
lea	oidstr,	[c+1]
mov	[ebp+var_EC], ebx
cmp	ebx, 18h
ja	loc_64227818
mov	edx, [ebp+oid]
mov	[ebp+c*4+words], edx
cmp	ebx, 2
jz	loc_64228D84
dec	c
xor	ecx, ecx
mov	ebx, 1
jmp	short loc_64227DBA
align 10h
inc	len
inc	ecx
cmp	ecx, edi
jz	loc_64228B68
mov	eax, [ebp+ecx*4+words+8]
test	eax, eax
jz	short loc_64227DB0
lea	ret, [ret+0]
inc	len
shr	eax, 7
jnz	short loc_64227DC8
mov	edx, eax
jmp	short loc_64227DB1
align 4
mov	eax, [ebp+dest]
mov	eax, [eax+4]
mov	[ebp+var_E4], eax
mov	ecx, [ebp+dest]
mov	ecx, [ecx+8]
mov	[ebp+var_EC], ecx
mov	eax, [ebp+size]
mov	[esp+0Ch], eax	
mov	[esp+8], ebx	
mov	[esp+4], edx	
mov	edx, [ebp+stack2]
mov	[esp], edx	
call	_silc_srealloc
test	eax, eax
jz	loc_64228CE8
mov	ecx, [ebp+dest]
mov	[ecx], eax
mov	edx, [ebp+var_E4]
sub	edx, ebx
lea	ebx, [eax+edx]
mov	[ecx+4], ebx
mov	edx, [ebp+var_EC]
sub	edx, [ebp+var_E4]
add	ebx, edx
mov	[ecx+8], ebx
add	eax, [ebp+size]
mov	[ecx+0Ch], eax
jmp	loc_64227935
align 4
cmp	type_0,	10h
jnb	loc_64228482
cmp	type_0,	0Ah
jz	loc_642281A8
cmp	type_0,	0Ch
jnz	loc_64227814
mov	opts_0,	[ebp+asn1]
mov	eax, [edx]
mov	type_0,	[eax]
lea	edx, [eax+8]
mov	ecx, [ebp+asn1]
mov	[ecx], edx
mov	edi, [eax+4]
test	d, d
jz	cont
mov	[esp+4], d_len	
mov	[esp], d	
call	_silc_utf8_valid
test	al, al
jz	loc_64227818
movzx	ret, byte ptr [ebp+var_E4]
mov	[esp+8], esi	
mov	[esp+4], d_len	
mov	eax, [ebp+tag]
mov	[esp], eax	
call	_silc_ber_encoded_len
mov	[ebp+ropts], eax
mov	edx, [ebp+dest]	
mov	eax, [edx+0Ch]
sub	eax, [edx]
mov	ecx, [ebp+ropts]
add	ecx, eax	
mov	eax, [ebp+stack2] 
call	_silc_buffer_srealloc_size_0
mov	[ebp+dest], eax
mov	[esp+18h], esi
mov	[esp+14h], d_len
mov	[esp+10h], d
jmp	loc_64228820
align 4
			
mov	opts_0,	[ebp+asn1]
mov	eax, [edx]
mov	edi, [eax]
lea	edx, [eax+8]
mov	ecx, [ebp+asn1]
mov	[ecx], edx
mov	eax, [eax+4]
mov	[ebp+i], eax
test	d, d
jz	cont
mov	dword ptr [esp+8], 4 
mov	[esp+4], eax	
mov	[esp], d	
call	_silc_utf8_decoded_len
mov	type_0,	eax
test	eax, eax
jz	loc_64227818
lea	s_len, [ebp+frame]
mov	[esp+4], eax	
mov	edx, [ebp+asn1]
mov	eax, [edx+8]
mov	[esp], eax	
call	_silc_stack_push
lea	eax, [s_len+1]
mov	[esp+4], eax	
mov	ecx, [ebp+stack]
mov	[esp], ecx	
call	_silc_smalloc
mov	ret, eax
test	eax, eax
jz	loc_64227B19
mov	[esp+10h], s_len
mov	[esp+0Ch], s
mov	dword ptr [esp+8], 4
jmp	loc_64227B03
mov	type_0,	[ebp+asn1]
mov	eax, [ebx]
lea	opts_0,	[eax+4]
mov	[ebx], edx
mov	eax, [eax]
test	timeval, timeval
jz	cont
mov	dword ptr [esp+8], 20h 
lea	edx, [ebp+val]
mov	[esp+4], edx	
mov	[esp], timeval	
call	_silc_time_universal_string
test	al, al
jz	loc_64227818
movzx	ebx, byte ptr [ebp+var_E4]
mov	ret, 0FFFFFFFFh
mov	ecx, esi
mov	edi, [ebp+var_100]
xor	eax, eax
repne scasb
not	ecx
dec	ecx
mov	[esp+8], ebx	
mov	[esp+4], ecx	
mov	edx, [ebp+tag]
mov	[esp], edx	
call	_silc_ber_encoded_len
mov	[ebp+ropts], eax
mov	ecx, [ebp+dest]
mov	eax, [ecx+0Ch]
sub	eax, [ecx]
mov	ecx, [ebp+ropts]
add	ecx, eax	
mov	edx, [ebp+dest]	
mov	eax, [ebp+stack2] 
call	_silc_buffer_srealloc_size_0
mov	[ebp+dest], eax
mov	ecx, esi
mov	edi, [ebp+var_100]
xor	eax, eax
repne scasb
not	ecx
dec	ecx
mov	[esp+18h], ebx	
mov	[esp+14h], ecx	
lea	edx, [ebp+val]
mov	[esp+10h], edx	
mov	ecx, [ebp+tag]
mov	[esp+0Ch], ecx	
mov	dword ptr [esp+8], 0 
mov	prim, [ebp+ber_class]
mov	[esp+4], ebx	
mov	eax, [ebp+dest]
			
mov	[esp], eax
call	_silc_ber_encode
mov	d_len, eax
test	al, al
jnz	cont
jmp	loc_64227818
align 4
mov	opts_0,	[ebp+asn1]
mov	eax, [edx]
mov	ecx, [eax]
mov	[ebp+i], ecx
lea	edx, [eax+8]
mov	type_0,	[ebp+asn1]
mov	[ebx], edx
mov	ebx, [eax+4]
test	ecx, ecx
jz	cont
mov	al, bl
neg	eax
and	eax, 7
mov	[ebp+val], al
add	ebx, 7
shr	ebx, 3
mov	ecx, 10h
xor	eax, eax
mov	edi, [ebp+var_FC]
rep stosb
lea	eax, [ebp+frame]
mov	[esp+4], eax	
mov	edx, [ebp+stack]
mov	[esp], edx	
call	_silc_stack_push
mov	eax, [ebp+buf.end]
sub	eax, [ebp+buf.head]
lea	ecx, [ebx+eax+1] 
lea	edx, [ebp+buf]	
mov	eax, [ebp+stack] 
call	_silc_buffer_srealloc_size_0
mov	ecx, 1		
lea	edx, [ebp+val]	
lea	eax, [ebp+buf]	
call	_silc_buffer_put
mov	eax, [ebp+buf.data]
cmp	[ebp+buf.tail],	eax
jz	short loc_642280E2
inc	eax
mov	[ebp+buf.data],	eax
mov	ecx, ebx	
mov	edx, [ebp+i]	
lea	eax, [ebp+buf]	
call	_silc_buffer_put
mov	edx, [ebp+buf.data]
lea	eax, [edx-1]
cmp	eax, [ebp+buf.head]
jb	short loc_64228102
mov	[ebp+buf.data],	eax
mov	edx, eax
movzx	ebx, byte ptr [ebp+var_E4]
mov	[esp+8], ebx	
mov	eax, [ebp+buf.tail]
sub	eax, edx
mov	[esp+4], eax	
mov	ecx, [ebp+tag]
mov	[esp], ecx	
call	_silc_ber_encoded_len
mov	[ebp+ropts], eax
mov	edx, [ebp+dest]	
mov	eax, [edx+0Ch]
sub	eax, [edx]
mov	ecx, [ebp+ropts]
add	ecx, eax	
mov	eax, [ebp+stack2] 
call	_silc_buffer_srealloc_size_0
mov	[ebp+dest], eax
mov	eax, [ebp+buf.data]
mov	[esp+18h], ebx	
mov	edx, [ebp+buf.tail]
sub	edx, eax
mov	[esp+14h], edx	
mov	[esp+10h], eax	
mov	ecx, [ebp+tag]
mov	[esp+0Ch], ecx	
mov	dword ptr [esp+8], 0 
mov	ebx, [ebp+ber_class]
mov	[esp+4], ebx	
mov	eax, [ebp+dest]
mov	[esp], eax	
call	_silc_ber_encode
mov	ret, eax
mov	ecx, [ebp+stack]
test	ecx, ecx
jz	loc_64228D1B
mov	edx, [ebp+stack]
mov	[esp], edx	
call	_silc_stack_pop
mov	ecx, ret
test	cl, cl
jnz	cont
jmp	loc_64227818
align 4
			
mov	type_0,	[ebp+asn1]
mov	eax, [ebx]
lea	opts_0,	[eax+4]
mov	[ebx], edx
mov	ebx, [eax]
test	mpint, mpint
jz	cont
mov	ecx, 10h
xor	eax, eax
mov	edi, [ebp+var_FC]
rep stosb
mov	dword ptr [esp+4], 0 
mov	[esp], mpint	
call	_silc_mp_cmp_ui
test	eax, eax
js	short loc_64228256
mov	dword ptr [esp+4], 2 
mov	[esp], mpint	
call	_silc_mp_sizeinbase
test	al, 7
jnz	loc_64228CBD
add	eax, 7
shr	eax, 3
inc	eax
mov	[ebp+ropts], eax
lea	eax, [ebp+frame]
mov	[esp+4], eax	
mov	edx, [ebp+stack]
mov	[esp], edx	
call	_silc_stack_push
mov	eax, [ebp+buf.end]
sub	eax, [ebp+buf.head]
mov	ecx, [ebp+ropts]
add	ecx, eax	
lea	edx, [ebp+buf]	
mov	eax, [ebp+stack] 
call	_silc_buffer_srealloc_size_0
mov	eax, [ebp+buf.data]
mov	byte ptr [eax],	0
mov	edx, [ebp+buf.data]
mov	eax, [ebp+buf.tail]
sub	eax, edx
mov	[esp+8], eax	
mov	[esp+4], edx	
mov	[esp], mpint	
call	_silc_mp_mp2bin_noalloc
movzx	eax, byte ptr [ebp+var_E4]
mov	[esp+8], indef	
mov	ecx, [ebp+ropts]
mov	[esp+4], ecx	
mov	mpint, [ebp+tag]
mov	[esp], ebx	
call	_silc_ber_encoded_len
mov	[ebp+ropts], eax
mov	edx, [ebp+dest]	
mov	eax, [edx+0Ch]
sub	eax, [edx]
mov	ecx, [ebp+ropts]
add	ecx, eax	
mov	eax, [ebp+stack2] 
call	_silc_buffer_srealloc_size_0
mov	[ebp+dest], eax
mov	edx, [ebp+buf.data]
mov	dword ptr [esp+18h], 0 
mov	eax, [ebp+buf.tail]
sub	eax, edx
mov	[esp+14h], eax	
mov	[esp+10h], edx	
mov	[esp+0Ch], ebx	
mov	dword ptr [esp+8], 0 
mov	ecx, [ebp+ber_class]
mov	[esp+4], ecx	
mov	ebx, [ebp+dest]
mov	[esp], ebx	
call	_silc_ber_encode
mov	ret, eax
mov	ebx, [ebp+stack]
test	ebx, ebx
jz	loc_64228D6A
mov	eax, [ebp+stack]
mov	[esp], eax	
call	_silc_stack_pop
mov	edx, ret
test	dl, dl
jnz	cont
jmp	loc_64227818
align 10h
cmp	ecx, edx
jbe	loc_64227935
mov	eax, [ebp+dest]
mov	esi, [eax+4]
mov	edi, [eax+8]
mov	[esp+4], ecx	
mov	[esp], ebx	
call	_silc_realloc
test	eax, eax
jz	loc_64228D8B
mov	edx, [ebp+dest]
mov	[edx], eax
mov	ecx, esi
sub	ecx, ebx
lea	ebx, [eax+ecx]
mov	[edx+4], ebx
sub	edi, esi
add	ebx, edi
mov	[edx+8], ebx
add	eax, [ebp+size]
mov	[edx+0Ch], eax
jmp	loc_64227935
align 4
mov	cp, [ebp+dest]
mov	eax, [edx+4]
mov	edx, [edx]
mov	ecx, eax
sub	len, edx
jmp	loc_64227836
align 10h
mov	opts_0,	[ebp+asn1]
mov	eax, [edx]
mov	edi, [eax]
lea	edx, [eax+8]
mov	ecx, [ebp+asn1]
mov	[ecx], edx
mov	eax, [eax+4]
mov	[ebp+i], eax
test	d, d
jz	cont
mov	dword ptr [esp+8], 8 
mov	[esp+4], eax	
mov	[esp], d	
call	_silc_utf8_decoded_len
mov	type_0,	eax
test	eax, eax
jz	loc_64227818
lea	s_len, [ebp+frame]
mov	[esp+4], eax	
mov	edx, [ebp+asn1]
mov	eax, [edx+8]
mov	[esp], eax	
call	_silc_stack_push
lea	eax, [s_len+1]
mov	[esp+4], eax	
mov	ecx, [ebp+stack]
mov	[esp], ecx	
call	_silc_smalloc
mov	ret, eax
test	eax, eax
jz	loc_64227B19
mov	[esp+10h], s_len
mov	[esp+0Ch], s
mov	dword ptr [esp+8], 8
jmp	loc_64227B03
mov	ecx, [ebp+asn1]
mov	eax, [ecx]
lea	opts_0,	[eax+4]
mov	[ecx], edx
cmp	dword ptr [eax], 1
sbb	eax, eax
not	eax
mov	[ebp+val], al
cmp	byte ptr [ebp+var_E4], 0
jnz	loc_64228DB3
mov	dword ptr [esp+8], 0 
mov	dword ptr [esp+4], 1 
mov	type_0,	[ebp+tag]
mov	[esp], ebx	
call	_silc_ber_encoded_len
mov	[ebp+ropts], eax
mov	edx, [ebp+dest]	
mov	eax, [edx+0Ch]
sub	eax, [edx]
mov	ecx, [ebp+ropts]
add	ecx, eax	
mov	eax, [ebp+stack2] 
call	_silc_buffer_srealloc_size_0
mov	[ebp+dest], eax
mov	dword ptr [esp+18h], 0
mov	dword ptr [esp+14h], 1
lea	ecx, [ebp+val]
mov	[esp+10h], ecx
mov	[esp+0Ch], ebx
mov	dword ptr [esp+8], 0
mov	ebx, [ebp+ber_class]
mov	[esp+4], ebx
jmp	loc_6422803A
mov	ecx, 10h
xor	eax, eax
mov	edi, [ebp+var_FC]
rep stosb
mov	opts_0,	[ebp+asn1]
mov	eax, [edx]
lea	edx, [eax+4]
mov	ecx, [ebp+asn1]
mov	[ecx], edx
mov	type_0,	[eax]
test	rtype, rtype
jz	short loc_642284E0
cmp	rtype, 7002h
jz	short loc_642284E0
test	bx, bx
jns	loc_64228CCE
mov	edi, rtype
and	rtag, 7FFFh
mov	eax, rtag
shr	rtype, 10h
mov	ret, ebx
and	rclass,	0Fh
cmp	rclass,	1
adc	rclass,	0FFFFFFFFh
and	ebx, 0FFFFFFF0h
mov	[ebp+ropts], ebx
mov	ebx, rtag
jmp	short loc_642284EE
			
xor	ret, ret
mov	[ebp+ropts], 0
xor	edi, edi
lea	eax, [ebp+frame]
mov	[esp+4], eax	
mov	edx, [ebp+stack]
mov	[esp], edx	
call	_silc_stack_push
mov	dword ptr [esp+18h], 0 
mov	eax, [ebp+depth]
inc	eax
mov	[esp+14h], eax	
lea	ecx, [ebp+buf]
mov	[esp+10h], ecx	
mov	eax, [ebp+ropts]
mov	[esp+0Ch], eax	
mov	[esp+8], rclass	
mov	[esp+4], rtag	
mov	[esp], rtype	
mov	ecx, [ebp+stack2] 
mov	edx, [ebp+stack] 
mov	eax, [ebp+asn1]	
call	_silc_asn1_encoder
mov	rclass,	eax
test	al, al
jz	loc_64228CAA
movzx	rtype, byte ptr	[ebp+var_E4]
mov	[esp+8], ebx	
mov	eax, [ebp+buf.tail]
sub	eax, [ebp+buf.data]
mov	[esp+4], eax	
mov	ecx, [ebp+tag]
mov	[esp], ecx	
call	_silc_ber_encoded_len
mov	[ebp+ropts], eax
mov	edx, [ebp+dest]	
mov	eax, [edx+0Ch]
sub	eax, [edx]
mov	ecx, [ebp+ropts]
add	ecx, eax	
mov	eax, [ebp+stack2] 
call	_silc_buffer_srealloc_size_0
mov	[ebp+dest], eax
mov	eax, [ebp+buf.data]
mov	[esp+18h], ebx
mov	edx, [ebp+buf.tail]
sub	edx, eax
mov	[esp+14h], edx
mov	[esp+10h], eax
mov	ecx, [ebp+tag]
mov	[esp+0Ch], ecx
mov	dword ptr [esp+8], 1
jmp	loc_64228168
mov	opts_0,	[ebp+asn1]
mov	eax, [edx]
mov	edi, [eax]
lea	edx, [eax+8]
mov	ecx, [ebp+asn1]
mov	[ecx], edx
mov	eax, [eax+4]
mov	[ebp+i], eax
test	d, d
jz	cont
mov	dword ptr [esp+8], 0Ah 
mov	[esp+4], eax	
mov	[esp], d	
call	_silc_utf8_decoded_len
mov	type_0,	eax
test	eax, eax
jz	loc_64227818
lea	s_len, [ebp+frame]
mov	[esp+4], eax	
mov	edx, [ebp+asn1]
mov	eax, [edx+8]
mov	[esp], eax	
call	_silc_stack_push
lea	eax, [s_len+1]
mov	[esp+4], eax	
mov	ecx, [ebp+stack]
mov	[esp], ecx	
call	_silc_smalloc
mov	ret, eax
test	eax, eax
jz	loc_64227B19
mov	[esp+10h], s_len
mov	[esp+0Ch], s
mov	dword ptr [esp+8], 0Ah
jmp	loc_64227B03
cmp	type_0,	18h
jz	loc_642286EE
cmp	type_0,	1Ah
jnz	loc_64227814
mov	opts_0,	[ebp+asn1]
mov	eax, [edx]
mov	edi, [eax]
lea	edx, [eax+8]
mov	ecx, [ebp+asn1]
mov	[ecx], edx
mov	eax, [eax+4]
mov	[ebp+i], eax
test	d, d
jz	cont
mov	dword ptr [esp+8], 9 
mov	[esp+4], eax	
mov	[esp], d	
call	_silc_utf8_decoded_len
mov	type_0,	eax
test	eax, eax
jz	loc_64227818
lea	s_len, [ebp+frame]
mov	[esp+4], eax	
mov	edx, [ebp+asn1]
mov	eax, [edx+8]
mov	[esp], eax	
call	_silc_stack_push
lea	eax, [s_len+1]
mov	[esp+4], eax	
mov	ecx, [ebp+stack]
mov	[esp], ecx	
call	_silc_smalloc
mov	ret, eax
test	eax, eax
jz	loc_64227B19
mov	[esp+10h], s_len
mov	[esp+0Ch], s
mov	dword ptr [esp+8], 9
jmp	loc_64227B03
mov	opts_0,	[ebp+asn1]
mov	eax, [edx]
lea	edx, [eax+4]
mov	ecx, [ebp+asn1]
mov	[ecx], edx
mov	eax, [eax]
test	timeval, timeval
jz	cont
mov	dword ptr [esp+8], 20h 
lea	type_0,	[ebp+val]
mov	[esp+4], ebx	
mov	[esp], timeval	
call	_silc_time_generalized_string
test	al, al
jnz	loc_64227FAE
jmp	loc_64227818
align 10h
cmp	type_0,	4
jz	loc_642287BE
cmp	type_0,	5
jnz	loc_64227814
cmp	byte ptr [ebp+var_E4], 0
jnz	loc_64228D97
mov	dword ptr [esp+8], 0 
mov	dword ptr [esp+4], 0 
mov	type_0,	[ebp+tag]
mov	[esp], ebx	
call	_silc_ber_encoded_len
mov	[ebp+ropts], eax
mov	edx, [ebp+dest]	
mov	eax, [edx+0Ch]
sub	eax, [edx]
mov	ecx, [ebp+ropts]
add	ecx, eax	
mov	eax, [ebp+stack2] 
call	_silc_buffer_srealloc_size_0
mov	[ebp+dest], eax
mov	dword ptr [esp+18h], 0
mov	dword ptr [esp+14h], 0
mov	dword ptr [esp+10h], 0
mov	[esp+0Ch], ebx
mov	dword ptr [esp+8], 0
mov	ecx, [ebp+ber_class]
mov	[esp+4], ecx
jmp	loc_6422803A
mov	opts_0,	[ebp+asn1]
mov	eax, [edx]
mov	edi, [eax]
lea	edx, [eax+8]
mov	ecx, [ebp+asn1]
mov	[ecx], edx
mov	ret, [eax+4]
movzx	type_0,	byte ptr [ebp+var_E4]
mov	[esp+8], ebx	
mov	[esp+4], esi	
mov	eax, [ebp+tag]
mov	[esp], eax	
call	_silc_ber_encoded_len
mov	[ebp+ropts], eax
mov	edx, [ebp+dest]	
mov	eax, [edx+0Ch]
sub	eax, [edx]
mov	ecx, [ebp+ropts]
add	ecx, eax	
mov	eax, [ebp+stack2] 
call	_silc_buffer_srealloc_size_0
mov	[ebp+dest], eax
mov	[esp+18h], ebx
mov	[esp+14h], esi
mov	[esp+10h], edi
mov	ecx, [ebp+tag]
mov	[esp+0Ch], ecx
mov	dword ptr [esp+8], 0
mov	d, [ebp+ber_class]
mov	[esp+4], ebx
jmp	loc_6422803A
align 4
cmp	type_0,	7005h
jz	loc_64228AD8
cmp	type_0,	7006h
jz	loc_64228968
cmp	type_0,	7000h
jnz	loc_64227814
mov	ecx, [ebp+asn1]
mov	eax, [ecx]
lea	ecx, [eax+4]
mov	type_0,	[ebp+asn1]
mov	[ebx], ecx
mov	ebx, [eax]
test	node, node
jz	cont
and	opts_0,	10h
jnz	short loc_6422888F
cmp	[ebp+tag], 7000h
jz	loc_64228D28
mov	dword ptr [esp+1Ch], 0 
mov	dword ptr [esp+18h], 0 
lea	eax, [ebp+oid]
mov	[esp+14h], eax	
lea	eax, [ebp+data]
mov	[esp+10h], eax	
mov	dword ptr [esp+0Ch], 0 
lea	eax, [ebp+enc]
mov	[esp+8], eax	
mov	dword ptr [esp+4], 0 
mov	[esp], node	
call	_silc_ber_decode
mov	ret, eax
test	al, al
jz	loc_64227818
cmp	[ebp+enc], 1
jnz	loc_64228DCF
mov	dword ptr [esp+8], 0 
mov	eax, [ebp+oid]
mov	[esp+4], eax	
mov	edx, [ebp+tag]
mov	[esp], edx	
call	_silc_ber_encoded_len
mov	[ebp+ropts], eax
mov	ecx, [ebp+dest]
mov	eax, [ecx+0Ch]
sub	eax, [ecx]
mov	ecx, [ebp+ropts]
add	ecx, eax	
mov	edx, [ebp+dest]	
mov	eax, [ebp+stack2] 
call	_silc_buffer_srealloc_size_0
mov	[ebp+dest], eax
mov	dword ptr [esp+18h], 0 
mov	eax, [ebp+oid]
mov	[esp+14h], eax	
mov	eax, [ebp+data]
mov	[esp+10h], eax	
mov	node, [ebp+tag]
mov	[esp+0Ch], ebx	
mov	dword ptr [esp+8], 1 
mov	eax, [ebp+ber_class]
mov	[esp+4], eax	
mov	edx, [ebp+dest]
mov	[esp], edx	
call	_silc_ber_encode
mov	ret, eax
test	al, al
jnz	cont
jmp	loc_64227818
align 4
mov	ecx, [ebp+asn1]
mov	eax, [ecx]
lea	opts_0,	[eax+4]
mov	[ecx], edx
mov	type_0,	[eax]
cmp	[ebp+tag], 7006h
jz	loc_64228C92
mov	ecx, 10h
xor	eax, eax
mov	edi, [ebp+var_FC]
rep stosb
lea	eax, [ebp+frame]
mov	[esp+4], eax	
mov	edx, [ebp+stack]
mov	[esp], edx	
call	_silc_stack_push
lea	ecx, [ebp+val]
mov	[esp+4], ecx	
mov	eax, [ebp+stack]
mov	[esp], eax	
call	_silc_mp_sinit
mov	[esp+4], sint	
lea	edx, [ebp+val]
mov	[esp], edx	
call	_silc_mp_set_ui
mov	dword ptr [esp+4], 2 
lea	ecx, [ebp+val]
mov	[esp], ecx	
call	_silc_mp_sizeinbase
test	al, 7
jz	loc_64228B5A
lea	sint, [eax+7]
shr	len, 3
mov	eax, [ebp+buf.end]
sub	eax, [ebp+buf.head]
lea	ecx, [len+eax]	
lea	edx, [ebp+buf]	
mov	eax, [ebp+stack] 
call	_silc_buffer_srealloc_size_0
mov	eax, [ebp+buf.data]
mov	byte ptr [eax],	0
mov	edx, [ebp+buf.data]
mov	eax, [ebp+buf.tail]
sub	eax, edx
mov	[esp+8], eax	
mov	[esp+4], edx	
lea	eax, [ebp+val]
mov	[esp], eax	
call	_silc_mp_mp2bin_noalloc
lea	edx, [ebp+val]
mov	[esp], edx	
call	_silc_mp_uninit
movzx	eax, byte ptr [ebp+var_E4]
mov	[esp+8], indef	
mov	[esp+4], len	
mov	ecx, [ebp+tag]
mov	[esp], ecx	
call	_silc_ber_encoded_len
mov	[ebp+ropts], eax
mov	len, [ebp+dest]
mov	eax, [ebx+0Ch]
sub	eax, [ebx]
mov	ecx, [ebp+ropts]
add	ecx, eax	
mov	edx, ebx	
mov	eax, [ebp+stack2] 
call	_silc_buffer_srealloc_size_0
mov	[ebp+dest], eax
mov	edx, [ebp+buf.data]
mov	dword ptr [esp+18h], 0 
mov	eax, [ebp+buf.tail]
sub	eax, edx
mov	[esp+14h], eax	
mov	[esp+10h], edx	
mov	eax, [ebp+tag]
mov	[esp+0Ch], eax	
mov	dword ptr [esp+8], 0 
mov	edx, [ebp+ber_class]
mov	[esp+4], edx	
mov	ecx, [ebp+dest]
mov	[esp], ecx	
call	_silc_ber_encode
mov	ret, eax
mov	edi, [ebp+stack]
test	edi, edi
jz	loc_64228D77
mov	ebx, [ebp+stack]
mov	[esp], ebx	
call	_silc_stack_pop
mov	eax, ret
test	al, al
jnz	cont
jmp	loc_64227818
align 4
mov	ecx, [ebp+asn1]
mov	eax, [ecx]
lea	opts_0,	[eax+4]
mov	[ecx], edx
mov	type_0,	[eax]
test	prim, prim
jz	cont
mov	dword ptr [esp+8], 0 
mov	eax, [prim+8]
sub	eax, [prim+4]
mov	[esp+4], eax	
mov	eax, [ebp+tag]
mov	[esp], eax	
call	_silc_ber_encoded_len
mov	[ebp+ropts], eax
mov	edx, [ebp+dest]	
mov	eax, [edx+0Ch]
sub	eax, [edx]
mov	ecx, [ebp+ropts]
add	ecx, eax	
mov	eax, [ebp+stack2] 
call	_silc_buffer_srealloc_size_0
mov	[ebp+dest], eax
mov	eax, [prim+4]
mov	dword ptr [esp+18h], 0
mov	edx, [prim+8]
sub	edx, eax
mov	[esp+14h], edx
mov	[esp+10h], eax
jmp	loc_64228021
lea	eax, [ebp+buf]	
call	_silc_buffer_purge
jmp	loc_64227984
add	eax, 7
shr	eax, 3
lea	sint, [eax+1]
jmp	loc_642289ED
mov	[ebp+oid], edx
mov	ecx, 10h
xor	eax, eax
mov	c, [ebp+var_FC]
rep stosb
lea	eax, [ebp+frame]
mov	[esp+4], eax	
mov	edx, [ebp+stack]
mov	[esp], edx	
call	_silc_stack_push
mov	eax, [ebp+buf.end]
sub	eax, [ebp+buf.head]
lea	ecx, [len+eax]	
lea	edx, [ebp+buf]	
mov	eax, [ebp+stack] 
call	_silc_buffer_srealloc_size_0
mov	dl, byte ptr [ebp+words]
lea	edx, [edx+edx*4]
mov	eax, [ebp+words+4]
lea	edx, [eax+edx*8]
mov	eax, [ebp+buf.data]
mov	[eax], dl
cmp	[ebp+var_EC], 2
jz	loc_64228C78
mov	[ebp+i], 2
mov	len, 1
lea	ret, [ret+0]
mov	ecx, [ebp+i]
mov	edx, [ebp+ecx*4+words]
mov	[ebp+oid], edx
test	edx, edx
jz	short loc_64228C6C
mov	mask, len
xor	ecx, ecx
jmp	short loc_64228BFA
align 4
mov	eax, len
and	edx, 7Fh
or	edx, mask
mov	ret, [ebp+buf.data]
mov	[esi+len], dl
lea	esi, [len+1]
mov	edx, [ebp+oid]
shr	edx, 7
mov	[ebp+oid], edx
or	cl, 80h
test	edx, edx
jnz	short loc_64228BF8
cmp	ebx, eax
jnb	short loc_64228C4E
mov	[ebp+ropts], ebx
xchg	ax, ax
mov	ecx, [ebp+buf.data]
movzx	edi, byte ptr [ecx+k]
mov	[ebp+oid], edi
mov	dl, [ecx+mask]
mov	[ecx+k], dl
mov	k, [ebp+oid]
mov	ecx, [ebp+buf.data]
mov	[ecx+mask], bl
inc	[ebp+ropts]
dec	mask
mov	ebx, [ebp+ropts]
cmp	mask, len
ja	short loc_64228C24
			
inc	[ebp+i]
mov	mask, [ebp+i]
cmp	[ebp+var_EC], ecx
jle	short loc_64228C78
mov	ebx, len
jmp	loc_64228BDC
align 4
mov	mask, [ebp+buf.data]
mov	byte ptr [eax+len], 0
lea	ret, [len+1]
jmp	short loc_64228C4E
			
movzx	mask, byte ptr [ebp+var_E4]
mov	[esp+8], indef
mov	indef, [ebp+buf.tail]
sub	eax, [ebp+buf.data]
mov	[esp+4], eax
jmp	loc_6422826B
mov	[ebp+tag], 2
jmp	loc_64228984
			
movzx	cp, byte ptr [ebp+i]
jmp	loc_64227818
			
mov	edx, [ebp+stack]
mov	[esp], edx	
call	_silc_stack_pop
jmp	loc_64227818
add	eax, 7
shr	eax, 3
mov	[ebp+ropts], eax
jmp	loc_64228207
add	edx, 4
mov	ecx, [ebp+asn1]
mov	[ecx], edx
mov	edi, [eax+4]
mov	eax, rtype
and	rtag, 7FFFh
jmp	loc_642284C5
mov	ecx, [ebp+size]
mov	[esp+4], ecx	
mov	eax, [ebp+stack2]
mov	[esp], eax	
call	_silc_smalloc
test	eax, eax
jz	loc_64228D8B
mov	edx, [ebp+dest]
mov	esi, [edx]
mov	ecx, [edx+0Ch]
sub	ecx, esi
mov	edi, eax
rep movsb
jmp	loc_64227E14
lea	eax, [ebp+buf]
call	_silc_buffer_purge
jmp	loc_6422818A
mov	ecx, [node+8]
mov	eax, [node+4]
sub	ecx, eax
mov	[ebp+ropts], ecx
mov	opts_0,	[ebp+dest] 
mov	eax, [edx+0Ch]
sub	eax, [edx]
lea	ecx, [eax+ecx]	
mov	eax, [ebp+stack2] 
call	_silc_buffer_srealloc_size_0
mov	[ebp+dest], eax
test	eax, eax
jz	loc_64227818
mov	edx, [node+4]	
mov	ecx, [ebp+ropts] 
call	_silc_buffer_put
jmp	cont
lea	eax, [ebp+buf]	
call	_silc_buffer_purge
jmp	loc_642282E0
lea	eax, [ebp+buf]	
call	_silc_buffer_purge
jmp	loc_64228AB9
mov	bl, 1
jmp	loc_64228B6B
			
mov	[ebp+dest], 0
jmp	loc_6422793B
mov	dword ptr [esp+8], 1E5h
mov	dword ptr [esp+4], offset aSilcasn1_encod 
mov	dword ptr [esp], offset	aIndefFalse 
call	__assert
mov	dword ptr [esp+8], 1B6h	
mov	dword ptr [esp+4], offset aSilcasn1_encod 
mov	dword ptr [esp], offset	aIndefFalse 
call	__assert
mov	dword ptr [esp+8], 0BFh
mov	dword ptr [esp+4], offset aSilcasn1_encod 
mov	dword ptr [esp], offset	aEncSilc_ber_en	
call	__assert
align 4
public _silc_asn1_encode
			
push	ebp
mov	ebp, esp
push	edi
push	esi
push	ebx
sub	esp, 5Ch
mov	ebx, [ebp+asn1]
test	ebx, ebx
jz	loc_64228EF8
lea	edx, [ebp+arg_C]
mov	[asn1_0], edx
mov	eax, [ebp+arg_8]
test	type, type
jz	loc_64228EF8
cmp	type, 7002h
jz	loc_64228F2A
test	ax, ax
js	loc_64228F04
lea	ecx, [ebp+arg_10]
mov	[asn1_0], ecx
mov	edx, [edx]
mov	[ebp+var_40], edx
mov	edi, type
and	tag, 7FFFh
shr	type, 10h
mov	esi, eax
and	ber_class, 0Fh
cmp	ber_class, 1
adc	ber_class, 0FFFFFFFFh
test	tag, tag
jz	loc_64228EF8
cmp	tag, 7002h
jz	loc_64228F28
and	eax, 0FFFFFFF0h
mov	[ebp+opts], eax
test	byte ptr [asn1_0+0Ch], 1
jnz	loc_64228F98
mov	[ebp+stack1], 0
lea	eax, [ebp+frame1]
mov	[esp+4], eax	
mov	eax, [asn1_0+4]
mov	[esp], eax	
call	_silc_stack_push
lea	eax, [ebp+frame2]
mov	[esp+4], eax	
mov	eax, [asn1_0+8]
mov	[esp], eax	
call	_silc_stack_push
mov	ecx, [asn1_0+8]	
mov	edx, [asn1_0+4]	
mov	dword ptr [esp+18h], 0 
mov	dword ptr [esp+14h], 0 
mov	eax, [ebp+dest]
mov	[esp+10h], eax	
mov	eax, [ebp+opts]
mov	[esp+0Ch], eax	
mov	[esp+8], ber_class 
mov	eax, [ebp+var_40]
mov	[esp+4], eax	
mov	[esp], tag	
mov	eax, asn1_0	
call	_silc_asn1_encoder
mov	ber_class, eax
mov	eax, [asn1_0+8]
mov	[esp], eax	
call	_silc_stack_pop
test	byte ptr [asn1_0+0Ch], 1
jz	short loc_64228F18
mov	edx, [ebp+stack1]
test	edx, edx
jz	short loc_64228EFA
mov	eax, [asn1_0+4]
test	eax, eax
jnz	short loc_64228EFA
mov	edx, [ebp+stack1]
mov	[asn1_0+4], edx
jmp	short loc_64228EFA
align 4
			
xor	ber_class, ber_class
			
mov	eax, ret
add	esp, 5Ch
pop	asn1_0
pop	ret
pop	tag
leave
retn
mov	edx, type
and	edx, 7FFFh
mov	[ebp+var_40], edx
mov	edi, edx
jmp	loc_64228E36
align 4
mov	eax, [asn1_0+4]
mov	[esp], eax	
call	_silc_stack_pop
jmp	short loc_64228EDF
align 4
mov	edx, [asn1_0]
lea	type, [edx+4]
mov	[asn1_0], eax
mov	eax, [edx]
test	ah, 4
jnz	loc_64229000
mov	[ebp+stack1], 0
test	ah, 8
jnz	loc_64228FD4
mov	al, [asn1_0+0Ch]
			
mov	edx, [asn1_0]
lea	ecx, [edx+4]
mov	[asn1_0], ecx
mov	tag, [edx]
test	type, type
jz	short loc_64228FC0
cmp	type, 7002h
jz	short loc_64228FC0
test	di, di
js	loc_64229014
lea	ecx, [edx+8]
mov	[asn1_0], ecx
mov	edx, [edx+4]
mov	[ebp+var_40], edx
mov	edx, type
and	tag, 7FFFh
shr	type, 10h
mov	ber_class, edi
and	ber_class, 0Fh
cmp	ber_class, 1
adc	ber_class, 0FFFFFFFFh
and	edi, 0FFFFFFF0h
mov	[ebp+opts], edi
mov	edi, tag
jmp	short loc_64228FB3
align 4
mov	eax, [asn1_0+4]
mov	[esp], eax	
call	_silc_stack_pop
mov	al, [asn1_0+0Ch]
and	eax, 0FFFFFFFEh
mov	[asn1_0+0Ch], al
mov	[ebp+stack1], 0
			
test	al, 1
jnz	loc_64228E81
jmp	loc_64228E6F
			
xor	ber_class, ber_class
mov	[ebp+opts], 0
mov	[ebp+var_40], 0
jmp	short loc_64228FB3
align 4
mov	al, [asn1_0+0Ch]
test	al, 1
jnz	loc_64228F4D
mov	dword ptr [esp+4], 0 
mov	eax, [asn1_0+4]
mov	[esp], eax	
call	_silc_stack_push
mov	al, [asn1_0+0Ch]
or	eax, 1
mov	[asn1_0+0Ch], al
jmp	loc_64228F4D
mov	edx, [asn1_0+4]
mov	[ebp+stack1], edx
mov	dword ptr [asn1_0+4], 0
jmp	loc_64228F41
align 4
mov	edx, type
and	edx, 7FFFh
mov	[ebp+var_40], edx
jmp	loc_64228F7E
public _silc_ber_decode
			
push	ebp
mov	ebp, esp
push	edi
push	esi
push	ebx
sub	esp, 10h
mov	esi, [ebp+ber]
mov	ebx, [ebp+ber_class]
mov	ecx, [ebp+encoding]
mov	edi, [ebp+data_len]
test	esi, esi
jz	loc_64229128
mov	edx, [ber_0+4]
cmp	[ber_0+8], edx
jz	loc_64229128
test	ber_class_0, ber_class_0
jz	short loc_6422905B
mov	al, [edx]
shr	al, 6
movzx	eax, al
mov	[ber_class_0], eax
test	encoding_0, encoding_0
jz	short loc_64229069
mov	al, [edx]
shr	al, 5
and	eax, 1
mov	[encoding_0], eax
movzx	ber_class_0, byte ptr [edx]
and	t, 1Fh
cmp	t, 1Fh
jz	loc_64229134
mov	encoding_0, 1
mov	[ebp+var_1C], 1
mov	eax, [ber_0+8]
mov	[ebp+var_14], eax
mov	eax, [ebp+tag]
test	eax, eax
jz	short loc_64229096
mov	eax, [ebp+tag]
mov	[eax], t
mov	t, [ebp+var_14]
sub	ebx, edx
cmp	ebx, ecx
jbe	loc_64229128
mov	ebx, [ebp+data]
test	ebx, ebx
jz	loc_64229168
test	data_len_0, data_len_0
jz	loc_64229168
movzx	ecx, byte ptr [edx+ecx]
mov	[data_len_0], ecx
mov	ebx, [ebp+var_1C]
inc	i
mov	eax, [ebp+indefinite]
test	eax, eax
jz	short loc_642290CF
mov	ecx, [ebp+indefinite]
mov	byte ptr [ecx],	0
mov	ecx, [data_len_0]
test	cl, cl
js	short loc_6422910C
mov	eax, [ber_0+4]
mov	[ebp+var_18], eax
mov	ber_0, [ber_0+8]
mov	[ebp+var_14], esi
sub	[ebp+var_14], eax
			
mov	eax, [ebp+var_14]
sub	eax, i
cmp	eax, ecx
jb	short loc_64229128
mov	c, [ebp+var_18]
add	edx, i
mov	ecx, [ebp+data]
mov	[ecx], edx
mov	eax, [ebp+identifier_len]
test	eax, eax
jz	short loc_64229101
mov	eax, [ebp+identifier_len]
mov	[eax], i
mov	al, 1
add	esp, 10h
pop	i
pop	esi
pop	data_len_0
leave
retn
align 4
mov	edx, ecx
and	c, 7Fh
jz	short loc_64229184
mov	ecx, [ber_0+4]
mov	ber_0, [ber_0+8]
mov	[ebp+var_10], esi
sub	[ebp+var_10], ecx
cmp	i, [ebp+var_10]
jb	loc_642291F4
			
xor	eax, eax
add	esp, 10h
pop	t
pop	esi
pop	data_len_0
leave
retn
align 4
mov	encoding_0, [ber_0+8]
mov	[ebp+var_14], ecx
sub	ecx, edx
mov	[ebp+var_10], ecx
cmp	ecx, 1
jbe	short loc_64229128
xor	ecx, ecx
mov	eax, 1
jmp	short loc_64229158
align 10h
shl	t, 7
and	ebx, 7Fh
or	t, ebx
mov	bl, [edx+i]
test	bl, bl
jns	short loc_64229170
inc	i
cmp	i, [ebp+var_10]
jb	short loc_64229150
jmp	short loc_64229128
align 4
			
mov	ebx, [ebp+var_1C]
jmp	short loc_642290F5
align 10h
shl	t, 7
and	ebx, 7Fh
or	t, ecx
inc	i
mov	[ebp+var_1C], eax
mov	ecx, eax
jmp	loc_6422908A
align 4
mov	c, [ebp+indefinite]
test	edx, edx
jz	short loc_64229191
mov	eax, [ebp+indefinite]
mov	byte ptr [eax],	1
mov	edx, [ber_0+4]
mov	ber_0, [ber_0+8]
mov	[ebp+var_14], esi
mov	ecx, esi
sub	ecx, edx
mov	[ebp+var_10], ecx
lea	ecx, [i+1]
cmp	ecx, [ebp+var_10]
jnb	loc_64229232
mov	ecx, [ebp+var_1C]
lea	eax, [edx+ecx]
mov	ecx, i
lea	esi, [esi+0]
mov	esi, c
cmp	byte ptr [eax+1], 0
jnz	short loc_642291C6
cmp	byte ptr [eax+2], 0
jz	short loc_642291D6
add	c, 2
add	eax, 2
lea	esi, [c+1]
cmp	[ebp+var_10], esi
ja	short loc_642291B8
mov	esi, c
			
cmp	[ebp+var_10], esi
jbe	loc_64229128
sub	c, i
mov	[data_len_0], ecx
mov	[ebp+var_18], edx
mov	eax, [ebp+var_14]
sub	eax, edx
mov	[ebp+var_14], eax
jmp	loc_642290E2
align 4
mov	dword ptr [data_len_0],	0
mov	[ebp+var_18], ecx
mov	ecx, [ebp+var_10]
mov	[ebp+var_14], ecx
mov	eax, [ebp+var_1C]
add	eax, [ebp+var_18]
xor	ecx, ecx
jmp	short loc_64229218
align 10h
inc	eax
dec	c
jz	loc_642290E2
mov	esi, ecx
shl	esi, 8
mov	[data_len_0], esi
movzx	ecx, byte ptr [eax+1]
or	ecx, esi
mov	[data_len_0], ecx
inc	i
cmp	[ebp+var_10], i
ja	short loc_64229210
jmp	loc_64229128
mov	esi, i
mov	ecx, i
jmp	short loc_642291D6
public _silc_ber_encoded_len
			
push	ebp
mov	ebp, esp
push	ebx
mov	edx, [ebp+tag]
mov	eax, [ebp+data_len]
mov	bl, [ebp+indefinite]
cmp	edx, 1Eh
ja	short loc_64229274
mov	ecx, 2
test	bl, bl
jnz	short loc_64229268
cmp	data_len_0, 7Fh
jbe	short loc_64229262
mov	tag_0, data_len_0
xchg	ax, ax
inc	len
shr	tmp, 8
jnz	short loc_6422925C
lea	data_len_0, [len+data_len_0]
pop	indefinite_0
leave
retn
add	len, 2
lea	data_len_0, [len+data_len_0]
pop	indefinite_0
leave
retn
align 4
mov	ecx, 1
lea	esi, [esi+0]
inc	len
shr	tag_0, 7
jnz	short loc_6422927C
inc	len
jmp	short loc_6422924F
align 4
public _silc_ber_encode
			
push	ebp
mov	ebp, esp
push	edi
push	esi
push	ebx
sub	esp, 0Ch
mov	edx, [ebp+ber]
mov	ebx, [ebp+tag]
mov	al, [ebp+indefinite]
mov	[ebp+var_11], al
test	edx, edx
jz	loc_64229370
mov	edi, [ber_0+8]
mov	esi, [ber_0+4]
cmp	tag_0, 1Eh
ja	loc_6422937C
mov	ecx, 2
cmp	[ebp+var_11], 0
jnz	loc_64229395
cmp	[ebp+data_len],	7Fh
jbe	short loc_642292D2
mov	eax, [ebp+data_len]
inc	ecx
shr	data_len_0, 8
jnz	short loc_642292CC
			
sub	edi, esi
add	ecx, [ebp+data_len]
cmp	edi, ecx
jb	loc_64229370
mov	eax, [ebp+encoding]
shl	eax, 5
mov	ecx, [ebp+ber_class]
shl	ecx, 6
or	eax, ecx
mov	[esi], al
cmp	tag_0, 1Eh
ja	loc_642293E0
mov	eax, [ber_0+4]
or	[eax], bl
mov	ecx, 1
cmp	[ebp+var_11], 0
jnz	loc_642293A0
cmp	[ebp+data_len],	7Fh
jbe	loc_6422943C
mov	eax, [ebp+data_len]
xor	ebx, ebx
nop
inc	c
shr	tmp, 8
jnz	short loc_6422931C
mov	esi, [ber_0+4]
mov	al, bl
or	eax, 0FFFFFF80h
mov	[esi+i], al
lea	eax, [i+1]
cmp	ebx, 1
jz	short loc_6422935F
dec	c
lea	ecx, ds:0[c*8]
mov	[ebp+var_10], ecx
jmp	short loc_64229345
align 4
dec	c
mov	esi, [ber_0+4]
mov	edi, [ebp+data_len]
mov	cl, byte ptr [ebp+var_10]
shr	edi, cl
mov	ecx, edi
mov	[esi+i], cl
inc	i
sub	[ebp+var_10], 8
cmp	c, 1
jg	short loc_64229344
mov	ecx, [ber_0+4]
mov	bl, byte ptr [ebp+data_len]
mov	[ecx+i], bl
lea	ebx, [i+1]
jmp	short loc_642293AA
align 10h
			
xor	eax, eax
add	esp, 0Ch
pop	tag_0
pop	esi
pop	edi
leave
retn
align 4
mov	eax, tag_0
mov	ecx, 1
nop
inc	ecx
shr	tag_0, 7
jnz	short loc_64229384
inc	ecx
cmp	[ebp+var_11], 0
jz	loc_642292C3
add	ecx, 2
jmp	loc_642292D2
align 10h
mov	eax, [ber_0+4]
mov	byte ptr [eax+i], 80h
lea	ebx, [i+1]
			
mov	ecx, [ebp+data]
test	ecx, ecx
jz	short loc_642293C0
mov	eax, [ber_0+4]
add	eax, i
mov	edi, eax
mov	esi, [ebp+data]
mov	ecx, [ebp+data_len]
rep movsb
cmp	[ebp+var_11], 0
jz	short loc_642293D5
mov	eax, [ber_0+4]
add	i, [ebp+data_len]
mov	byte ptr [eax+ebx+1], 0
mov	byte ptr [eax+ebx], 0
mov	al, 1
add	esp, 0Ch
pop	i
pop	esi
pop	edi
leave
retn
align 10h
mov	eax, [ber_0+4]
or	byte ptr [eax],	1Fh
mov	eax, tag_0
xor	esi, esi
xchg	ax, ax
inc	c
shr	tmp, 7
jnz	short loc_642293EC
cmp	c, 1
jz	short loc_6422944D
dec	c
lea	ecx, ds:0[c*8]
sub	ecx, c
mov	tmp, 1
mov	[ebp+var_10], tag_0
jmp	short loc_6422940D
align 4
dec	c
mov	edi, [ebp+var_10]
shr	edi, cl
mov	ebx, edi
or	ebx, 0FFFFFF80h
mov	edi, [ber_0+4]
mov	[edi+i], bl
inc	i
sub	ecx, 7
cmp	c, 1
jg	short loc_6422940C
mov	ebx, [ebp+var_10]
lea	ecx, [i+1]
mov	c, [ber_0+4]
and	tag_0, 7Fh
mov	[esi+eax], bl
jmp	loc_64229302
align 4
mov	eax, [ber_0+4]
mov	bl, byte ptr [ebp+data_len]
mov	[eax+ecx], bl
lea	ebx, [ecx+1]
jmp	loc_642293AA
mov	ecx, 2
mov	tmp, 1
jmp	short loc_6422942C
align 4
public _silc_ske_group_get_number
push	ebp
mov	ebp, esp
mov	eax, [ebp+group]
mov	eax, [eax]
leave
retn
align 4
public _silc_ske_group_get_name
push	ebp
mov	ebp, esp
mov	eax, [ebp+group]
mov	eax, [eax+4]
leave
retn
align 4
public _silc_ske_get_supported_groups
push	ebp
mov	ebp, esp
push	edi
push	esi
push	ebx
sub	esp, 2Ch
mov	esi, ds:_silc_ske_groups.name
test	esi, esi
jz	short loc_642294FC
mov	[ebp+var_20], (offset _silc_ske_groups.name+14h)
mov	[ebp+var_1C], 0
xor	edx, edx
mov	ecx, 0FFFFFFFFh
mov	edi, esi
xor	eax, eax
repne scasb
not	ecx
mov	eax, [ebp+var_1C]
lea	ebx, [eax+ecx-1]
lea	eax, [ebx+1]
mov	[ebp+var_1C], eax
mov	[esp+4], eax	
mov	[esp], list	
call	_silc_realloc
mov	edx, eax
mov	ecx, 0FFFFFFFFh
mov	edi, esi
xor	eax, eax
repne scasb
not	ecx
dec	ecx
mov	eax, ebx
sub	eax, ecx
lea	eax, [list+eax]
mov	edi, eax
rep movsb
lea	ebx, [list+ebx]
mov	byte ptr [ebx],	2Ch
mov	eax, [ebp+var_20]
mov	esi, [eax]
add	eax, 14h
mov	[ebp+var_20], eax
test	esi, esi
jnz	short loc_64229497
mov	byte ptr [ebx],	0
mov	eax, list
add	esp, 2Ch
pop	ebx
pop	esi
pop	edi
leave
retn
align 4
mov	ebx, 0FFFFFFFFh
xor	edx, edx
mov	byte ptr [ebx],	0
mov	eax, list
add	esp, 2Ch
pop	ebx
pop	esi
pop	edi
leave
retn
public _silc_ske_group_free
			
push	ebp
mov	ebp, esp
push	ebx
sub	esp, 14h
mov	ebx, [ebp+group]
lea	eax, [ebx+8]
mov	[esp], eax	
call	_silc_mp_uninit
lea	eax, [ebx+18h]
mov	[esp], eax	
call	_silc_mp_uninit
lea	eax, [ebx+28h]
mov	[esp], eax	
call	_silc_mp_uninit
mov	[ebp+group], ebx
add	esp, 14h
pop	ebx
leave
jmp	_silc_free
public _silc_ske_group_get_by_name
			
push	ebp
mov	ebp, esp
push	edi
push	esi
push	ebx
sub	esp, 2Ch
mov	ebx, ds:_silc_ske_groups.name
test	ebx, ebx
jz	loc_64229650
mov	esi, (offset _silc_ske_groups.name+14h)
xor	edi, edi
jmp	short loc_64229576
inc	i
mov	ebx, [esi]
add	esi, 14h
test	ebx, ebx
jz	loc_64229650
mov	eax, [ebp+name]
mov	[esp+4], eax	
mov	[esp], ebx	
call	_strcmp
test	eax, eax
jnz	short loc_64229568
test	ebx, ebx
jz	loc_64229650
mov	eax, [ebp+ret]
test	eax, eax
jz	loc_64229643
mov	dword ptr [esp+4], 38h 
mov	dword ptr [esp], 1 
call	_silc_calloc
mov	esi, eax
lea	i, [i+i*4]
shl	edi, 2
mov	eax, dword ptr ds:_silc_ske_groups.number[edi]
mov	[esi], eax
mov	[esi+4], ebx
lea	edx, [esi+8]
mov	[esp], edx	
mov	[ebp+dst], edx
call	_silc_mp_init
lea	eax, [esi+18h]
mov	[esp], eax	
mov	[ebp+var_20], eax
call	_silc_mp_init
lea	ebx, [esi+28h]
mov	[esp], ebx	
call	_silc_mp_init
mov	dword ptr [esp+8], 10h 
mov	ecx, ds:_silc_ske_groups.group[edi]
mov	[esp+4], ecx	
mov	edx, [ebp+dst]
mov	[esp], edx	
call	_silc_mp_set_str
mov	dword ptr [esp+8], 10h 
mov	edx, ds:_silc_ske_groups.group_order[edi]
mov	[esp+4], edx	
mov	eax, [ebp+var_20]
mov	[esp], eax	
call	_silc_mp_set_str
mov	dword ptr [esp+8], 10h 
mov	eax, ds:_silc_ske_groups.generator[edi]
mov	[esp+4], eax	
mov	[esp], ebx	
call	_silc_mp_set_str
mov	eax, [ebp+ret]
mov	[eax], esi
xor	eax, eax
add	esp, 2Ch
pop	ebx
pop	esi
pop	i
leave
retn
align 10h
			
mov	eax, [ebp+name]
mov	[esp+4], eax
mov	dword ptr [esp], offset	aUnsupportedDif	
call	_silc_format
mov	[esp+4], eax	
mov	dword ptr [esp], 3 
call	_silc_log_output
mov	eax, 3
add	esp, 2Ch
pop	ebx
pop	esi
pop	i
leave
retn
public _silc_ske_group_get_by_number
			
push	ebp
mov	ebp, esp
push	edi
push	esi
push	ebx
sub	esp, 2Ch
mov	edi, [ebp+number]
mov	ebx, ds:_silc_ske_groups.name
test	ebx, ebx
jz	short loc_642296B5
cmp	number_0, 1
jz	short loc_642296E2
mov	eax, (offset _silc_ske_groups.name+14h)
xor	esi, esi
jmp	short loc_642296AE
mov	edx, [eax-4]
add	eax, 14h
cmp	edx, number_0
jz	short loc_642296E4
inc	i
mov	ebx, [eax]
test	ebx, ebx
jnz	short loc_642296A4
mov	[esp+4], number_0
mov	dword ptr [esp], offset	aUnsupportedD_0	
call	_silc_format
mov	[esp+4], eax	
mov	dword ptr [esp], 3 
call	_silc_log_output
mov	eax, 3
add	esp, 2Ch
pop	ebx
pop	i
pop	number_0
leave
retn
xor	esi, esi
mov	edx, [ebp+ret]
test	edx, edx
jz	loc_64229794
mov	dword ptr [esp+4], 38h 
mov	dword ptr [esp], 1 
call	_silc_calloc
mov	[eax], number_0
mov	[eax+4], ebx
lea	edx, [eax+8]
mov	[esp], edx	
mov	[ebp+var_1C], eax
mov	[ebp+dst], edx
call	_silc_mp_init
mov	eax, [ebp+var_1C]
lea	number_0, [eax+18h]
mov	[esp], edi	
call	_silc_mp_init
mov	eax, [ebp+var_1C]
lea	ebx, [eax+28h]
mov	[esp], ebx	
call	_silc_mp_init
mov	dword ptr [esp+8], 10h 
lea	i, [i+i*4]
shl	esi, 2
mov	ecx, ds:_silc_ske_groups.group[esi]
mov	[esp+4], ecx	
mov	edx, [ebp+dst]
mov	[esp], edx	
call	_silc_mp_set_str
mov	dword ptr [esp+8], 10h 
mov	edx, ds:_silc_ske_groups.group_order[esi]
mov	[esp+4], edx	
mov	[esp], edi	
call	_silc_mp_set_str
mov	dword ptr [esp+8], 10h 
mov	edx, ds:_silc_ske_groups.generator[esi]
mov	[esp+4], edx	
mov	[esp], ebx	
call	_silc_mp_set_str
mov	eax, [ebp+var_1C]
mov	edx, [ebp+ret]
mov	[edx], eax
xor	eax, eax
add	esp, 2Ch
pop	ebx
pop	i
pop	edi
leave
retn
align 10h
public _silc_ske_payload_start_free
			
push	ebp
mov	ebp, esp
push	ebx
sub	esp, 14h
mov	ebx, [ebp+payload]
test	ebx, ebx
jz	short loc_64229814
mov	eax, [payload_0+4]
mov	[esp], eax	
call	_silc_free
mov	eax, [payload_0+0Ch]
mov	[esp], eax	
call	_silc_free
mov	eax, [payload_0+14h]
mov	[esp], eax	
call	_silc_free
mov	eax, [payload_0+1Ch]
mov	[esp], eax	
call	_silc_free
mov	eax, [payload_0+24h]
mov	[esp], eax	
call	_silc_free
mov	eax, [payload_0+2Ch]
mov	[esp], eax	
call	_silc_free
mov	eax, [payload_0+34h]
mov	[esp], eax	
call	_silc_free
mov	eax, [payload_0+3Ch]
mov	[esp], eax	
call	_silc_free
mov	[ebp+payload], payload_0
add	esp, 14h
pop	payload_0
leave
jmp	_silc_free
align 4
add	esp, 14h
pop	payload_0
leave
retn
align 4
public _silc_ske_payload_ke_free
			
push	ebp
mov	ebp, esp
push	ebx
sub	esp, 14h
mov	ebx, [ebp+payload]
test	ebx, ebx
jz	short loc_64229858
mov	eax, [payload_0+4]
mov	[esp], eax	
call	_silc_free
lea	eax, [payload_0+0Ch]
mov	[esp], eax	
call	_silc_mp_uninit
mov	eax, [payload_0+20h]
mov	[esp], eax	
call	_silc_free
mov	[ebp+payload], payload_0
add	esp, 14h
pop	payload_0
leave
jmp	_silc_free
add	esp, 14h
pop	payload_0
leave
retn
align 10h
public _silc_ske_payload_start_decode
			
push	ebp
mov	ebp, esp
push	esi
push	ebx
sub	esp, 90h
mov	esi, [ebp+buffer]
mov	dword ptr [esp+4], 40h 
mov	dword ptr [esp], 1 
call	_silc_calloc
mov	ebx, ret
test	ret, ret
jz	loc_64229A0C
mov	word ptr [ret+8], 10h
mov	dword ptr [esp+7Ch], 1Dh
lea	ret, [ret+38h]
mov	[esp+78h], ret
lea	ret, [payload+3Ch]
mov	[esp+74h], ret
mov	dword ptr [esp+70h], 14h
lea	ret, [payload+30h]
mov	[esp+6Ch], ret
lea	ret, [payload+34h]
mov	[esp+68h], ret
mov	dword ptr [esp+64h], 14h
lea	ret, [payload+28h]
mov	[esp+60h], ret
lea	ret, [payload+2Ch]
mov	[esp+5Ch], ret
mov	dword ptr [esp+58h], 14h
lea	ret, [payload+20h]
mov	[esp+54h], ret
lea	ret, [payload+24h]
mov	[esp+50h], ret
mov	dword ptr [esp+4Ch], 14h
lea	ret, [payload+18h]
mov	[esp+48h], ret
lea	ret, [payload+1Ch]
mov	[esp+44h], ret
mov	dword ptr [esp+40h], 14h
lea	ret, [payload+12h]
mov	[esp+3Ch], ret
lea	ret, [payload+14h]
mov	[esp+38h], ret
mov	dword ptr [esp+34h], 14h
lea	ret, [payload+10h]
mov	[esp+30h], ret
lea	ret, [payload+0Ch]
mov	[esp+2Ch], ret
mov	dword ptr [esp+28h], 14h
mov	dword ptr [esp+24h], 10h
lea	ret, [payload+4]
mov	[esp+20h], ret
mov	dword ptr [esp+1Ch], 1Ch
lea	ret, [payload+2]
mov	[esp+18h], ret
mov	dword ptr [esp+14h], 3
mov	[esp+10h], payload
mov	dword ptr [esp+0Ch], 1
lea	ret, [ebp+tmp]
mov	[esp+8], ret
mov	dword ptr [esp+4], 1
mov	[esp], buffer_0	
call	_silc_buffer_unformat
inc	ret
jz	loc_64229A7C
cmp	[ebp+tmp], 0
jnz	loc_64229A20
movzx	edx, word ptr [payload+2]
mov	ret, [buffer_0+8]
sub	ret, [buffer_0+4]
cmp	edx, ret
jz	short loc_642299D8
mov	dword ptr [esp], offset	aGarbageAfterKe	
call	_silc_format
mov	[esp+4], ret	
mov	dword ptr [esp], 3 
call	_silc_log_output
mov	buffer_0, 0Eh
			
mov	[esp], payload
call	_silc_ske_payload_start_free
mov	ret, [ebp+ske]
mov	[ret+14h], status
mov	ret, status
add	esp, 90h
pop	payload
pop	status
leave
retn
align 4
mov	ret, [payload+4]
test	ret, ret
jz	short loc_642299E6
cmp	word ptr [payload+10h],	0
jnz	short loc_64229A48
			
mov	dword ptr [esp], offset	aKeStartPayload	
call	_silc_format
mov	[esp+4], ret	
mov	dword ptr [esp], 3 
call	_silc_log_output
mov	buffer_0, 2
jmp	short err
align 4
mov	buffer_0, 10h
mov	ret, status
add	esp, 90h
pop	payload
pop	status
leave
retn
align 10h
mov	dword ptr [esp], offset	aBadReservedFie	
call	_silc_format
mov	[esp+4], ret	
mov	dword ptr [esp], 3 
call	_silc_log_output
mov	buffer_0, 0Dh
jmp	err
align 4
cmp	word ptr [payload+12h],	0
jz	short loc_642299E6
cmp	word ptr [payload+18h],	0
jz	short loc_642299E6
cmp	word ptr [payload+20h],	0
jz	short loc_642299E6
cmp	word ptr [payload+28h],	0
jz	short loc_642299E6
cmp	word ptr [payload+30h],	0
jz	loc_642299E6
mov	ret, [ebp+return_payload]
mov	[ret], payload
xor	buffer_0, buffer_0
jmp	loc_642299CB
align 4
mov	dword ptr [esp], offset	aMalformedKeSta	
jmp	loc_642299ED
public _silc_ske_payload_ke_decode
			
push	ebp
mov	ebp, esp
push	edi
push	esi
push	ebx
sub	esp, 5Ch
mov	edi, [ebp+ske]
mov	esi, [ebp+buffer]
mov	[ebp+x], 0
mov	dword ptr [esp+4], 24h 
mov	dword ptr [esp], 1 
call	_silc_calloc
mov	ebx, eax
test	eax, eax
jz	loc_64229C5C
mov	payload, [buffer_0+8]
mov	[ebp+var_2C], eax
mov	eax, [buffer_0+4]
mov	[ebp+var_30], eax
mov	dword ptr [esp+14h], 1Dh
lea	eax, [payload+8]
mov	[esp+10h], eax
mov	dword ptr [esp+0Ch], 3
mov	[esp+8], payload
mov	dword ptr [esp+4], 3
mov	[esp], buffer_0	
call	_silc_buffer_unformat
inc	eax
jz	loc_64229C78
mov	ret, [ske_0+1Ch]
test	ret, ret
jz	loc_64229C84
mov	ret, [payload+8]
dec	ret
cmp	ax, 4
ja	loc_64229C04
mov	edx, [payload]
test	dx, dx
jz	loc_64229C04
mov	ecx, [buffer_0+4]
mov	ret, [buffer_0+8]
sub	ret, ecx
cmp	ret, 3
jbe	short loc_64229B31
add	ecx, 4
mov	[buffer_0+4], ecx
mov	dword ptr [esp+28h], 1Dh
lea	ret, [payload+1Ch]
mov	[esp+24h], ret
lea	ret, [payload+20h]
mov	[esp+20h], ret
mov	dword ptr [esp+1Ch], 14h
lea	ret, [ebp+x_len]
mov	[esp+18h], ret
lea	ret, [ebp+x]
mov	[esp+14h], ret
mov	dword ptr [esp+10h], 14h
movzx	ret, dx
mov	[esp+0Ch], ret
lea	ret, [payload+4]
mov	[esp+8], ret
mov	dword ptr [esp+4], 1Ch
mov	[esp], buffer_0	
mov	[ebp+var_34], edx
call	_silc_buffer_unformat
inc	ret
mov	edx, [ebp+var_34]
jz	loc_64229C98
mov	ax, [ebp+x_len]
mov	buffer_0, [payload+1Ch]
cmp	ax, 0Fh
jbe	loc_64229C6C
mov	ecx, [ske_0+1Ch]
test	ecx, ecx
jz	short loc_64229BC2
test	byte ptr [ecx],	4
jz	short loc_64229BC2
cmp	si, 2
jbe	loc_64229C8C
mov	ecx, [payload+20h]
test	ecx, ecx
jz	loc_64229C8C
			
movzx	ret, ax
movzx	esi, si
lea	ret, [ret+esi+8]
movzx	edx, dx
lea	edx, [ret+edx]
mov	ret, [ebp+var_2C]
sub	ret, [ebp+var_30]
cmp	edx, ret
jz	loc_64229CA4
mov	dword ptr [esp], offset	aGarbageAfter_0	
call	_silc_format
mov	[esp+4], ret	
mov	dword ptr [esp], 3 
call	_silc_log_output
mov	esi, 0Eh
jmp	short err
align 4
			
mov	dword ptr [esp], offset	aMalformedPubli	
			
call	_silc_format
mov	[esp+4], ret	
mov	dword ptr [esp], 3 
call	_silc_log_output
mov	esi, 2
mov	ret, [payload+4]
mov	[esp], ret	
call	_silc_free
mov	ret, [payload+20h]
mov	[esp], ret	
call	_silc_free
mov	ret, [ebp+x]
mov	[esp], ret	
call	_silc_free
mov	[esp], payload	
call	_silc_free
mov	[ske_0+14h], status
mov	ret, status
add	esp, 5Ch
pop	payload
pop	status
pop	ske_0
leave
retn
align 4
mov	buffer_0, 10h
mov	ret, status
add	esp, 5Ch
pop	payload
pop	status
pop	ske_0
leave
retn
align 4
mov	dword ptr [esp], offset	aTooShortDhValu	
jmp	short loc_64229C0B
align 4
mov	dword ptr [esp], offset	aCannotDecodePu	
jmp	short loc_64229C0B
align 4
mov	edx, [payload]
jmp	loc_64229B1E
align 4
			
mov	dword ptr [esp], offset	aTheSignatureDa	
jmp	loc_64229C0B
mov	dword ptr [esp], offset	aMalformedKePay
jmp	loc_64229C0B
lea	esi, [payload+0Ch]
mov	[esp], esi	
call	_silc_mp_init
mov	[esp+8], esi	
movzx	ret, [ebp+x_len]
mov	[esp+4], ret	
mov	ret, [ebp+x]
mov	[esp], ret	
call	_silc_mp_bin2mp
mov	ret, [ebp+x]
mov	word ptr [ret],	0
mov	ret, [ebp+x]
mov	[esp], ret	
call	_silc_free
mov	ret, [ebp+return_payload]
mov	[ret], payload
xor	esi, esi
jmp	loc_64229C51
align 4
public _silc_ske_payload_start_encode
			
push	ebp
mov	ebp, esp
push	edi
push	esi
push	ebx
sub	esp, 0CCh
mov	ebx, [ebp+payload]
test	ebx, ebx
jz	loc_64229F0A
mov	di, [payload_0+2]
mov	dword ptr [esp+4], 10h 
mov	dword ptr [esp], 1 
call	_silc_calloc
mov	esi, ret
test	ret, ret
jz	loc_64229F1A
movzx	edi, di
test	edi, edi
jz	loc_64229F2A
mov	dword ptr [esp+4], 1 
mov	[esp], edi	
call	_silc_calloc
mov	[buf], ret
test	ret, ret
jz	loc_64229F1A
mov	[buf+4], ret
mov	[buf+8], ret
lea	edx, [ret+edi]
mov	[buf+0Ch], edx
mov	ecx, edx
sub	ecx, ret
cmp	edi, ecx
ja	short loc_64229D5D
mov	[buf+8], edx
movzx	edi, word ptr [payload_0+38h]
movzx	ecx, word ptr [payload_0+30h]
movzx	edx, word ptr [payload_0+28h]
movzx	ret, word ptr [payload_0+20h]
mov	[esp+68h], ret
movzx	ret, word ptr [payload_0+18h]
mov	[esp+54h], ret
movzx	ret, word ptr [payload_0+12h]
mov	[esp+40h], ret
movzx	ret, word ptr [payload_0+10h]
mov	[esp+2Ch], ret
mov	dword ptr [esp+0B4h], 1Dh
mov	[esp+0B0h], edi
mov	ret, [payload_0+3Ch]
mov	[esp+0ACh], ret
mov	dword ptr [esp+0A8h], 1Bh
mov	[esp+0A4h], edi
mov	dword ptr [esp+0A0h], 3
mov	[esp+9Ch], ecx
mov	edi, [payload_0+34h]
mov	[esp+98h], edi
mov	dword ptr [esp+94h], 1Bh
mov	[esp+90h], ecx
mov	dword ptr [esp+8Ch], 3
mov	[esp+88h], edx
mov	ecx, [payload_0+2Ch]
mov	[esp+84h], ecx
mov	dword ptr [esp+80h], 1Bh
mov	[esp+7Ch], edx
mov	dword ptr [esp+78h], 3
mov	ecx, [esp+68h]
mov	[esp+74h], ecx
mov	edx, [payload_0+24h]
mov	[esp+70h], edx
mov	dword ptr [esp+6Ch], 1Bh
mov	dword ptr [esp+64h], 3
mov	ret, [esp+54h]
mov	[esp+60h], ret
mov	ret, [payload_0+1Ch]
mov	[esp+5Ch], ret
mov	dword ptr [esp+58h], 1Bh
mov	dword ptr [esp+50h], 3
mov	ecx, [esp+40h]
mov	[esp+4Ch], ecx
mov	ret, [payload_0+14h]
mov	[esp+48h], ret
mov	dword ptr [esp+44h], 1Bh
mov	dword ptr [esp+3Ch], 3
mov	ret, [esp+2Ch]
mov	[esp+38h], ret
mov	ret, [payload_0+0Ch]
mov	[esp+34h], ret
mov	dword ptr [esp+30h], 1Bh
mov	dword ptr [esp+28h], 3
movzx	ret, word ptr [payload_0+8]
mov	[esp+24h], ret
mov	ret, [payload_0+4]
mov	[esp+20h], ret
mov	dword ptr [esp+1Ch], 1Bh
movzx	ret, word ptr [payload_0+2]
mov	[esp+18h], ret
mov	dword ptr [esp+14h], 3
movzx	ret, byte ptr [payload_0]
mov	[esp+10h], ret
mov	dword ptr [esp+0Ch], 1
mov	dword ptr [esp+8], 0
mov	dword ptr [esp+4], 1
mov	[esp], buf	
call	_silc_buffer_format
inc	ret
jz	short loc_64229EF8
mov	ret, [ebp+return_buffer]
mov	[ret], buf
xor	ret, ret
add	esp, 0CCh
pop	payload_0
pop	buf
pop	edi
leave
retn
align 4
mov	ret, [buf]
mov	[esp], ret	
call	_silc_free
mov	[esp], buf	
call	_silc_free
mov	ret, 1
add	esp, 0CCh
pop	payload_0
pop	buf
pop	edi
leave
retn
			
mov	ret, 10h
add	esp, 0CCh
pop	payload_0
pop	buf
pop	edi
leave
retn
mov	edx, [ret+8]
jmp	loc_64229D5A
align 4
public _silc_ske_payload_ke_encode
			
push	ebp
mov	ebp, esp
push	edi
push	esi
push	ebx
sub	esp, 7Ch
mov	esi, [ebp+payload]
test	esi, esi
jz	loc_6422A0A8
mov	ret, [ebp+ske]
mov	ret, [ret+1Ch]
test	ret, ret
jz	short loc_64229F5B
test	byte ptr [ret],	4
jnz	loc_6422A09C
			
lea	ret, [ebp+x_len]
mov	[esp+8], ret	
mov	dword ptr [esp+4], 0 
lea	ret, [payload_0+0Ch]
mov	[esp], ret	
call	_silc_mp_mp2bin
mov	[ebp+ptr], ret
mov	ret, [payload_0]
mov	[ebp+var_2E], ax
mov	edx, [ebp+x_len]
mov	edi, [payload_0+1Ch]
mov	dword ptr [esp+4], 10h 
mov	dword ptr [esp], 1 
mov	[ebp+var_34], edx
call	_silc_calloc
mov	ebx, ret
test	ret, ret
mov	edx, [ebp+var_34]
jz	loc_6422A0EC
movzx	ret, [ebp+var_2E]
lea	ret, [edx+ret+8]
movzx	edi, di
add	edi, ret
jz	loc_6422A0F3
mov	dword ptr [esp+4], 1 
mov	[esp], edi	
call	_silc_calloc
mov	[buf], ret
test	ret, ret
jz	loc_6422A0EC
mov	[buf+4], ret
mov	[buf+8], ret
lea	edx, [ret+edi]
mov	[buf+0Ch], edx
mov	ecx, edx
sub	ecx, ret
cmp	edi, ecx
ja	short loc_64229FEC
mov	[buf+8], edx
movzx	ecx, word ptr [payload_0+1Ch]
mov	edx, [ebp+x_len]
movzx	ret, word ptr [payload_0]
mov	dword ptr [esp+48h], 1Dh
mov	[esp+44h], ecx
mov	edi, [payload_0+20h]
mov	[esp+40h], edi
mov	dword ptr [esp+3Ch], 1Bh
mov	[esp+38h], ecx
mov	dword ptr [esp+34h], 3
mov	[esp+30h], edx
mov	ecx, [ebp+ptr]
mov	[esp+2Ch], ecx
mov	dword ptr [esp+28h], 1Bh
mov	[esp+24h], edx
mov	dword ptr [esp+20h], 3
mov	[esp+1Ch], ret
mov	edx, [payload_0+4]
mov	[esp+18h], edx
mov	dword ptr [esp+14h], 1Bh
movzx	edx, word ptr [payload_0+8]
mov	[esp+10h], edx
mov	dword ptr [esp+0Ch], 3
mov	[esp+8], ret
mov	dword ptr [esp+4], 3
mov	[esp], buf	
call	_silc_buffer_format
inc	ret
jz	short loc_6422A0B8
mov	ret, [ebp+return_buffer]
mov	[ret], buf
mov	ecx, [ebp+x_len]
mov	al, 46h
mov	edi, [ebp+ptr]
rep stosb
mov	ecx, [ebp+ptr]
mov	[esp], ecx	
call	_silc_free
xor	ret, ret
add	esp, 7Ch
pop	buf
pop	payload_0
pop	x_str
leave
retn
align 4
mov	edx, [payload_0+20h]
test	edx, edx
jnz	loc_64229F5B
nop
mov	ret, 1
add	esp, 7Ch
pop	ebx
pop	payload_0
pop	edi
leave
retn
align 4
mov	ecx, [ebp+x_len]
mov	al, 46h
mov	edi, [ebp+ptr]
rep stosb
mov	ret, [ebp+ptr]
mov	[esp], ret	
call	_silc_free
mov	ret, [buf]
mov	[esp], ret	
call	_silc_free
mov	[esp], buf	
call	_silc_free
mov	ret, 1
add	esp, 7Ch
pop	buf
pop	payload_0
pop	x_str
leave
retn
			
mov	ret, 10h
jmp	short loc_6422A092
mov	edx, [buf+8]
jmp	loc_64229FE9
align 4
			
push	ebp
mov	ebp, esp
mov	eax, [ebp+context]
or	byte ptr [eax+44h], 1
leave
retn
public _silc_connauth_get_ske
push	ebp
mov	ebp, esp
mov	eax, [ebp+connauth]
mov	eax, [eax]
leave
retn
align 4
public _silc_connauth_responder
push	ebp
mov	ebp, esp
push	esi
push	ebx
sub	esp, 20h
mov	ebx, [ebp+connauth]
mov	eax, [ebp+get_auth_data]
mov	[ebx+2Ch], eax
mov	eax, [ebp+completion]
mov	[ebx+28h], eax
mov	eax, [ebp+context]
mov	[ebx+30h], eax
mov	dword ptr [esp+18h], 0FFFFFFFFh
mov	dword ptr [esp+14h], 3
mov	dword ptr [esp+10h], 11h
mov	dword ptr [esp+0Ch], 0F4240h 
mov	[esp+8], ebx	
mov	dword ptr [esp+4], offset _silc_connauth_stream_cbs 
mov	eax, [ebx]
mov	eax, [eax]
mov	[esp], eax	
call	_silc_packet_stream_link
lea	esi, [ebx+8]
mov	[esp+0Ch], ebx	
mov	dword ptr [esp+8], 0 
mov	dword ptr [esp+4], offset _silc_connauth_abort 
mov	[esp], esi	
call	_silc_async_init
mov	dword ptr [esp+4], offset _silc_connauth_st_responder_start 
mov	eax, [ebx+4]
mov	[esp], eax	
call	_silc_fsm_start
mov	eax, esi
add	esp, 20h
pop	ebx
pop	esi
leave
retn
public _silc_connauth_initiator
push	ebp
mov	ebp, esp
push	edi
push	esi
push	ebx
sub	esp, 2Ch
mov	ebx, [ebp+connauth]
mov	edx, [ebp+auth_data]
mov	esi, [ebp+completion]
mov	ecx, [ebp+context]
mov	eax, [ebp+auth_method]
cmp	ax, 1
jz	short loc_6422A1C8
cmp	ax, 2
jnz	short loc_6422A1D0
test	auth_data_0, auth_data_0
jz	loc_6422A25D
mov	edi, [ebp+conn_type]
mov	[connauth_0+18h], edi
mov	[connauth_0+1Ch], ax
mov	[connauth_0+20h], auth_data_0
mov	auth_method_0, [ebp+auth_data_len]
mov	[connauth_0+24h], eax
mov	[connauth_0+28h], completion_0
mov	[connauth_0+30h], context_0
mov	dword ptr [esp+18h], 0FFFFFFFFh
mov	dword ptr [esp+14h], 3
mov	dword ptr [esp+10h], 2
mov	dword ptr [esp+0Ch], 0F4240h 
mov	[esp+8], connauth_0 
mov	dword ptr [esp+4], offset _silc_connauth_stream_cbs 
mov	eax, [connauth_0]
mov	eax, [eax]
mov	[esp], eax	
call	_silc_packet_stream_link
lea	completion_0, [connauth_0+8]
mov	[esp+0Ch], connauth_0 
mov	dword ptr [esp+8], 0 
mov	dword ptr [esp+4], offset _silc_connauth_abort 
mov	[esp], esi	
call	_silc_async_init
mov	dword ptr [esp+4], offset _silc_connauth_st_initiator_start 
mov	eax, [connauth_0+4]
mov	[esp], eax	
call	_silc_fsm_start
mov	eax, esi
add	esp, 2Ch
pop	connauth_0
pop	esi
pop	edi
leave
retn
mov	[esp+8], context_0
mov	dword ptr [esp+4], 0
mov	[esp], connauth_0
call	completion_0
xor	completion_0, completion_0
jmp	short loc_6422A253
align 4
push	ebp
mov	ebp, esp
sub	esp, 18h
mov	eax, [ebp+callback_context]
mov	edx, [ebp+packet]
mov	[eax+40h], edx
mov	eax, [eax+4]
mov	[esp], eax	
call	_silc_fsm_continue
mov	al, 1
leave
retn
align 4
public _silc_connauth_st_responder_failure
			
			
push	ebp
mov	ebp, esp
push	esi
push	ebx
sub	esp, 30h
mov	esi, [ebp+fsm]
mov	ebx, [ebp+fsm_context]
mov	dword ptr [esp], offset	aAuthentication	
call	_silc_format
mov	[esp+4], eax	
mov	dword ptr [esp], 3 
call	_silc_log_output
test	byte ptr [ebx+44h], 1
jz	short loc_6422A2FC
mov	[esp+8], fsm_context_0 
mov	dword ptr [esp+4], offset _silc_connauth_stream_cbs 
mov	eax, [fsm_context_0]
mov	eax, [eax]
mov	[esp], eax	
call	_silc_packet_stream_unlink
mov	[esp], fsm_0	
call	_silc_fsm_get_schedule
mov	[esp+4], fsm_context_0 
mov	[esp], eax	
call	_silc_schedule_task_del_by_context
mov	eax, 3
add	esp, 30h
pop	fsm_context_0
pop	fsm_0
leave
retn
mov	[ebp+error], 0
mov	[ebp+error+1], 0
mov	[ebp+error+2], 0
mov	[ebp+error+3], 1
mov	dword ptr [esp+10h], 4 
lea	eax, [ebp+error]
mov	[esp+0Ch], eax	
mov	dword ptr [esp+8], 0 
mov	dword ptr [esp+4], 3 
mov	eax, [fsm_context_0]
mov	eax, [eax]
mov	[esp], eax	
call	_silc_packet_send
mov	[esp+8], fsm_context_0 
mov	dword ptr [esp+4], offset _silc_connauth_stream_cbs 
mov	eax, [fsm_context_0]
mov	eax, [eax]
mov	[esp], eax	
call	_silc_packet_stream_unlink
mov	[esp], fsm_0	
call	_silc_fsm_get_schedule
mov	[esp+4], fsm_context_0 
mov	[esp], eax	
call	_silc_schedule_task_del_by_context
mov	eax, [fsm_context_0+30h]
mov	[esp+8], eax
mov	dword ptr [esp+4], 0
mov	[esp], fsm_context_0
call	dword ptr [fsm_context_0+28h]
mov	eax, 3
add	esp, 30h
pop	fsm_context_0
pop	fsm_0
leave
retn
public _silc_connauth_st_responder_success
			
			
push	ebp
mov	ebp, esp
push	ebx
sub	esp, 34h
mov	ebx, [ebp+fsm_context]
mov	[ebp+tmp], 0
mov	[ebp+tmp+1], 0
mov	[ebp+tmp+2], 0
mov	[ebp+tmp+3], 0
mov	dword ptr [esp+10h], 4 
lea	eax, [ebp+tmp]
mov	[esp+0Ch], eax	
mov	dword ptr [esp+8], 0 
mov	dword ptr [esp+4], 2 
mov	eax, [ebx]
mov	eax, [eax]
mov	[esp], eax	
call	_silc_packet_send
mov	[esp+8], ebx	
mov	dword ptr [esp+4], offset _silc_connauth_stream_cbs 
mov	eax, [ebx]
mov	eax, [eax]
mov	[esp], eax	
call	_silc_packet_stream_unlink
mov	eax, [ebp+fsm]
mov	[esp], eax	
call	_silc_fsm_get_schedule
mov	[esp+4], ebx	
mov	[esp], eax	
call	_silc_schedule_task_del_by_context
mov	eax, [ebx+30h]
mov	[esp+8], eax
mov	dword ptr [esp+4], 1
mov	[esp], ebx
call	dword ptr [ebx+28h]
mov	eax, 3
add	esp, 34h
pop	ebx
leave
retn
public _silc_connauth_st_initiator_failure
			
			
push	ebp
mov	ebp, esp
push	esi
push	ebx
sub	esp, 30h
mov	esi, [ebp+fsm]
mov	ebx, [ebp+fsm_context]
test	byte ptr [ebx+44h], 1
jz	short loc_6422A464
mov	[esp+8], fsm_context_0 
mov	dword ptr [esp+4], offset _silc_connauth_stream_cbs 
mov	eax, [fsm_context_0]
mov	eax, [eax]
mov	[esp], eax	
call	_silc_packet_stream_unlink
mov	[esp], fsm_0	
call	_silc_fsm_get_schedule
mov	[esp+4], fsm_context_0 
mov	[esp], eax	
call	_silc_schedule_task_del_by_context
mov	eax, 3
add	esp, 30h
pop	fsm_context_0
pop	fsm_0
leave
retn
mov	[ebp+error], 0
mov	[ebp+error+1], 0
mov	[ebp+error+2], 0
mov	[ebp+error+3], 1
mov	dword ptr [esp+10h], 4 
lea	eax, [ebp+error]
mov	[esp+0Ch], eax	
mov	dword ptr [esp+8], 0 
mov	dword ptr [esp+4], 3 
mov	eax, [fsm_context_0]
mov	eax, [eax]
mov	[esp], eax	
call	_silc_packet_send
mov	[esp+8], fsm_context_0 
mov	dword ptr [esp+4], offset _silc_connauth_stream_cbs 
mov	eax, [fsm_context_0]
mov	eax, [eax]
mov	[esp], eax	
call	_silc_packet_stream_unlink
mov	[esp], fsm_0	
call	_silc_fsm_get_schedule
mov	[esp+4], fsm_context_0 
mov	[esp], eax	
call	_silc_schedule_task_del_by_context
mov	eax, [fsm_context_0+30h]
mov	[esp+8], eax
mov	dword ptr [esp+4], 0
mov	[esp], fsm_context_0
call	dword ptr [fsm_context_0+28h]
mov	eax, 3
add	esp, 30h
pop	fsm_context_0
pop	fsm_0
leave
retn
			
push	ebp
mov	ebp, esp
push	ebx
sub	esp, 14h
mov	ebx, sb
test	sb, sb
jz	short loc_6422A50B
mov	sb, [sb]
mov	[esp], eax	
call	_silc_free
mov	[esp], sb	
call	_silc_free
add	esp, 14h
pop	sb
leave
retn
align 4
public _silc_connauth_st_responder_authenticate_pk
			
push	ebp
mov	ebp, esp
push	edi
push	esi
push	ebx
sub	esp, 4Ch
mov	ebx, [ebp+fsm_context]
test	byte ptr [ebx+44h], 1
jnz	loc_6422A6B4
cmp	dword ptr [fsm_context_0+38h], 1
jnz	loc_6422A694
mov	eax, [fsm_context_0+34h]
mov	edx, [eax+14h]
mov	[eax+18h], edx
mov	edx, [eax+8]
test	edx, edx
jz	loc_6422A708
test	byte ptr [eax+10h], 2
jz	loc_6422A6D4
movzx	ecx, word ptr [eax+0Eh]
mov	ecx, [edx+ecx]
mov	[eax+8], ecx
mov	[eax+14h], edx
mov	eax, [edx]
mov	edx, [fsm_context_0+24h]
mov	[ebp+signature_len], edx
mov	edx, [fsm_context_0+20h]
mov	[ebp+signature], edx
mov	eax, [eax+4]
mov	[ebp+public_key], eax
mov	edi, [fsm_context_0]
test	eax, eax
jz	loc_6422A688
test	edx, edx
jz	loc_6422A688
mov	eax, [edi+38h]
mov	[ebp+var_24], eax
mov	eax, [edi+28h]
mov	edx, [eax+8]
mov	[ebp+var_30], edx
mov	eax, [eax+4]
mov	[ebp+var_2C], eax
mov	dword ptr [esp+4], 10h 
mov	dword ptr [esp], 1 
call	_silc_calloc
mov	esi, eax
test	eax, eax
jz	loc_6422A682
mov	ecx, [ebp+var_30]
sub	ecx, [ebp+var_2C]
add	ecx, [ebp+var_24]
jz	loc_6422A716
mov	dword ptr [esp+4], 1 
mov	[esp], ecx	
mov	[ebp+var_34], ecx
call	_silc_calloc
mov	[ebp+var_24], eax
mov	[esi], eax
test	eax, eax
mov	ecx, [ebp+var_34]
jz	loc_6422A682
mov	[esi+4], eax
mov	[esi+8], eax
mov	edx, eax
add	edx, ecx
mov	[esi+0Ch], edx
mov	eax, edx
sub	eax, [ebp+var_24]
cmp	ecx, eax
ja	short loc_6422A603
mov	[esi+8], edx
mov	eax, [edi+28h]
mov	edx, [eax+4]
mov	dword ptr [esp+1Ch], 1Dh
mov	eax, [eax+8]
sub	eax, edx
mov	[esp+18h], eax
mov	[esp+14h], edx
mov	dword ptr [esp+10h], 1Bh
mov	eax, [edi+38h]
mov	[esp+0Ch], eax
mov	eax, [edi+34h]
mov	[esp+8], eax
mov	dword ptr [esp+4], 1Bh
mov	[esp], esi	
call	_silc_buffer_format
mov	eax, [esi+4]
mov	edx, [edi+18h]
mov	edx, [edx+10h]
mov	[esp+14h], edx	
mov	edx, [esi+8]
sub	edx, eax
mov	[esp+10h], edx	
mov	[esp+0Ch], eax	
mov	eax, [ebp+signature_len]
mov	[esp+8], eax	
mov	edx, [ebp+signature]
mov	[esp+4], edx	
mov	eax, [ebp+public_key]
mov	[esp], eax	
call	_silc_pkcs_verify
test	al, al
jnz	short loc_6422A6E0
mov	eax, esi	
call	_silc_buffer_free_3
			
mov	fsm_context_0, [fsm_context_0+20h]
mov	[ebp+signature], ebx
			
mov	eax, [ebp+signature]
mov	[esp], eax	
call	_silc_free
nop
mov	dword ptr [esp+4], offset _silc_connauth_st_responder_failure 
mov	edx, [ebp+fsm]
mov	[esp], edx	
call	_silc_fsm_next
xor	eax, eax
add	esp, 4Ch
pop	ebx
pop	esi
pop	edi
leave
retn
align 4
mov	dword ptr [esp+4], offset _silc_connauth_st_responder_failure 
mov	eax, [ebp+fsm]
mov	[esp], eax	
call	_silc_fsm_next
xor	eax, eax
add	esp, 4Ch
pop	fsm_context_0
pop	esi
pop	edi
leave
retn
align 4
movzx	ecx, word ptr [eax+0Ch]
mov	ecx, [edx+ecx]
jmp	loc_6422A559
mov	eax, esi	
call	_silc_buffer_free_3
mov	eax, [fsm_context_0+20h]
mov	[esp], eax	
call	_silc_free
mov	dword ptr [esp+4], offset _silc_connauth_st_responder_success 
mov	edx, [ebp+fsm]
mov	[esp], edx	
call	_silc_fsm_next
jmp	short loc_6422A6A7
align 4
mov	dword ptr [eax+14h], 0
xor	eax, eax
jmp	loc_6422A561
mov	edx, [eax+8]
jmp	loc_6422A600
align 10h
public _silc_connauth_st_initiator_result
			
push	ebp
mov	ebp, esp
push	esi
push	ebx
sub	esp, 10h
mov	esi, [ebp+fsm]
mov	ebx, [ebp+fsm_context]
mov	al, [ebx+44h]
test	al, 1
jnz	short loc_6422A7A8
mov	edx, [fsm_context_0+40h]
cmp	byte ptr [edx+22h], 2
jz	short loc_6422A7A0
and	eax, 0FFFFFFFDh
mov	[fsm_context_0+44h], al
mov	[esp], edx	
call	_silc_packet_free
mov	[esp+8], fsm_context_0 
mov	dword ptr [esp+4], offset _silc_connauth_stream_cbs 
mov	eax, [fsm_context_0]
mov	eax, [eax]
mov	[esp], eax	
call	_silc_packet_stream_unlink
mov	[esp], fsm_0	
call	_silc_fsm_get_schedule
mov	[esp+4], fsm_context_0 
mov	[esp], eax	
call	_silc_schedule_task_del_by_context
mov	eax, [fsm_context_0+30h]
mov	[esp+8], eax
mov	al, [fsm_context_0+44h]
shr	al, 1
and	eax, 1
mov	[esp+4], eax
mov	[esp], fsm_context_0
call	dword ptr [fsm_context_0+28h]
mov	eax, 3
add	esp, 10h
pop	fsm_context_0
pop	fsm_0
leave
retn
align 10h
or	eax, 2
mov	[fsm_context_0+44h], al
jmp	short loc_6422A744
mov	dword ptr [esp+4], offset _silc_connauth_st_initiator_failure 
mov	[esp], fsm_0	
call	_silc_fsm_next
xor	eax, eax
add	esp, 10h
pop	fsm_context_0
pop	fsm_0
leave
retn
align 4
public _silc_connauth_st_responder_authenticate
			
push	ebp
mov	ebp, esp
push	edi
push	esi
push	ebx
sub	esp, 4Ch
mov	ebx, [ebp+fsm]
mov	esi, [ebp+fsm_context]
mov	[ebp+auth_data], 0
mov	[ebp+passphrase], 0
mov	[ebp+repository], 0
test	byte ptr [esi+44h], 1
jz	short loc_6422A818
mov	eax, [fsm_context_0+40h]
test	eax, eax
jz	short loc_6422A7FD
			
mov	[esp], eax	
call	_silc_packet_free
			
mov	dword ptr [esp+4], offset _silc_connauth_st_responder_failure
mov	[esp], fsm_0	
call	_silc_fsm_next
xor	eax, eax
			
add	esp, 4Ch
pop	fsm_0
pop	esi
pop	find
leave
retn
align 4
mov	eax, [fsm_context_0+40h]
cmp	byte ptr [eax+22h], 11h
jnz	short loc_6422A7F5
mov	dword ptr [esp+14h], 1Dh
lea	edx, [ebp+conn_type]
mov	[esp+10h], edx
mov	dword ptr [esp+0Ch], 3
lea	edx, [ebp+conn_type+2]
mov	[esp+8], edx
mov	dword ptr [esp+4], 3
add	eax, 8
mov	[esp], eax	
call	_silc_buffer_unformat
inc	eax
jz	loc_6422AA90
mov	cx, word ptr [ebp+conn_type+2]
mov	edx, [fsm_context_0+40h]
movzx	edi, cx
mov	ret, [edx+10h]
sub	ret, [edx+0Ch]
cmp	edi, ret
jnz	loc_6422A9D4
sub	ecx, 4
mov	word ptr [ebp+conn_type+2], cx
mov	ret, [ebp+conn_type]
lea	edi, [ret-1]
cmp	di, 2
ja	loc_6422AA78
test	cx, cx
jnz	loc_6422A9F8
mov	[esp], edx
call	_silc_packet_free
mov	ret, [fsm_context_0+30h]
mov	[esp+14h], ret
lea	ret, [ebp+repository]
mov	[esp+10h], ret
lea	ret, [ebp+passphrase_len]
mov	[esp+0Ch], ret
lea	ret, [ebp+passphrase]
mov	[esp+8], ret
movzx	ret, word ptr [ebp+conn_type]
mov	[esp+4], ret
mov	[esp], fsm_context_0
call	dword ptr [fsm_context_0+2Ch]
test	al, al
jz	loc_6422AAB4
mov	edi, [ebp+passphrase]
test	edi, edi
jz	short loc_6422A8DD
mov	ecx, [ebp+passphrase_len]
test	ecx, ecx
jnz	loc_6422AA40
mov	edx, [ebp+repository]
test	edx, edx
jz	loc_6422AA61
mov	ret, [ebp+auth_data]
test	ret, ret
jz	loc_6422A7FD
movzx	edx, word ptr [ebp+conn_type+2]
mov	[esp+4], payload_len_0 
mov	[esp], ret	
call	_silc_memdup
mov	[fsm_context_0+20h], ret
movzx	ret, word ptr [ebp+conn_type+2]
mov	[fsm_context_0+24h], ret
call	_silc_skr_find_alloc
mov	edi, ret
test	ret, ret
jz	loc_6422A7FD
mov	find, [fsm_context_0+20h]
test	ret, ret
jz	loc_6422A7FD
mov	ret, [fsm_context_0]
mov	ret, [ret+18h]
mov	ret, [ret+14h]
test	ret, ret
jz	loc_6422A7FD
mov	[esp], ret	
call	_silc_pkcs_get_type
mov	[esp+4], ret	
mov	[esp], find	
call	_silc_skr_find_set_pkcs_type
mov	ret, [fsm_context_0]
mov	ret, [ret+18h]
mov	ret, [ret+14h]
mov	[esp+4], ret	
mov	[esp], find	
call	_silc_skr_find_set_public_key
mov	dword ptr [esp+4], 5 
mov	[esp], find	
call	_silc_skr_find_set_usage
mov	dword ptr [esp+4], offset _silc_connauth_st_responder_authenticate_pk 
mov	[esp], fsm_0	
call	_silc_fsm_next
mov	al, [fsm_0+28h]
mov	dl, al
or	edx, 4
mov	[fsm_0+28h], dl
test	al, 4
jnz	loc_6422AAE7
mov	[esp], fsm_0	
call	_silc_fsm_get_schedule
mov	[esp+10h], fsm_context_0 
mov	dword ptr [esp+0Ch], offset _silc_connauth_skr_callback	
mov	[esp+8], find	
mov	[esp+4], ret	
mov	ret, [ebp+repository]
mov	[esp], ret	
call	_silc_skr_find
mov	dl, [fsm_0+28h]
mov	al, dl
shr	al, 2
and	edx, 0FFFFFFFBh
mov	[fsm_0+28h], dl
shl	ret, 1
and	ret, 2
jmp	loc_6422A80F
align 4
mov	dword ptr [esp], offset	aBadPayloadLeng	
call	_silc_format
mov	[esp+4], ret	
mov	dword ptr [esp], 3 
call	_silc_log_output
mov	ret, [fsm_context_0+40h]
jmp	loc_6422A7F5
mov	dword ptr [esp+18h], 1Dh
movzx	payload_len_0, cx
mov	[esp+14h], payload_len_0
lea	ret, [ebp+auth_data]
mov	[esp+10h], ret
mov	dword ptr [esp+0Ch], 1Bh
mov	dword ptr [esp+8], 4
mov	dword ptr [esp+4], 18h
add	edx, 8
mov	[esp], edx	
call	_silc_buffer_unformat
inc	ret
jz	loc_6422AB18
mov	edx, [fsm_context_0+40h]
jmp	loc_6422A891
mov	fsm_context_0, [ebp+auth_data]
test	esi, esi
jz	loc_6422A7FD
movzx	ret, word ptr [ebp+conn_type+2]
cmp	ecx, ret
jnz	loc_6422A7FD
cmp	ecx, ecx
repe cmpsb
jnz	loc_6422A7FD
mov	dword ptr [esp+4], offset _silc_connauth_st_responder_success 
mov	[esp], fsm_0	
call	_silc_fsm_next
xor	ret, ret
jmp	loc_6422A80F
movzx	ret, ax
mov	[esp+4], ret
mov	dword ptr [esp], offset	aBadConnectionT	
call	_silc_format
jmp	loc_6422A9E0
mov	dword ptr [esp], offset	aBadPayloadInAu	
call	_silc_format
mov	[esp+4], ret	
mov	dword ptr [esp], 3 
call	_silc_log_output
mov	ret, [fsm_context_0+40h]
jmp	loc_6422A7F5
mov	dword ptr [esp], offset	aRemoteConnecti	
call	_silc_format
mov	[esp+4], ret	
mov	dword ptr [esp], 3 
call	_silc_log_output
mov	dword ptr [esp+4], offset _silc_connauth_st_responder_failure 
mov	[esp], fsm_0	
call	_silc_fsm_next
xor	ret, ret
jmp	loc_6422A80F
mov	dword ptr [esp+8], 262h
mov	dword ptr [esp+4], offset aSilcconnauth_c 
mov	dword ptr [esp], offset	aSilc_verifyS_0	
call	_silc_format
mov	[esp+4], ret	
mov	dword ptr [esp], 3 
call	_silc_log_output
jmp	loc_6422A992
mov	ret, [fsm_context_0+40h]
mov	[esp], ret	
call	_silc_packet_free
mov	dword ptr [esp+4], offset _silc_connauth_st_responder_failure 
mov	[esp], fsm_0	
call	_silc_fsm_next
xor	ret, ret
jmp	loc_6422A80F
align 4
push	ebp
mov	ebp, esp
push	edi
push	esi
push	ebx
sub	esp, 1Ch
mov	esi, [ebp+status]
mov	edi, [ebp+results]
mov	ebx, [ebp+context]
mov	eax, [ebp+find]
mov	[esp], eax	
call	_silc_skr_find_free
mov	[ebx+34h], edi
mov	[ebx+38h], esi
mov	eax, [ebx+4]
mov	dl, [eax+28h]
mov	cl, dl
and	ecx, 0FFFFFFFBh
mov	[eax+28h], cl
and	edx, 4
jz	short loc_6422AB7C
add	esp, 1Ch
pop	context_0
pop	status_0
pop	results_0
leave
retn
align 4
mov	[ebp+skr], eax
add	esp, 1Ch
pop	context_0
pop	status_0
pop	results_0
leave
jmp	_silc_fsm_continue
align 4
public _silc_connauth_st_responder_start
push	ebp
mov	ebp, esp
push	edi
push	esi
push	ebx
sub	esp, 2Ch
mov	esi, [ebp+fsm]
mov	ebx, [ebp+fsm_context]
test	byte ptr [ebx+44h], 1
jnz	short loc_6422AC04
mov	edi, [fsm_context_0+3Ch]
test	edi, edi
jnz	short loc_6422ABC8
mov	dword ptr [esp+4], offset _silc_connauth_st_responder_authenticate 
mov	[esp], fsm_0	
call	_silc_fsm_next
mov	eax, 2
add	esp, 2Ch
pop	fsm_context_0
pop	fsm_0
pop	edi
leave
retn
align 4
mov	[esp], fsm_0	
call	_silc_fsm_get_schedule
mov	dword ptr [esp+18h], 1 
mov	dword ptr [esp+14h], 0 
mov	[esp+10h], edi	
mov	[esp+0Ch], fsm_context_0 
mov	dword ptr [esp+8], offset _silc_connauth_timeout 
mov	dword ptr [esp+4], 0 
mov	[esp], eax	
call	_silc_schedule_task_add
jmp	short loc_6422ABA8
align 4
mov	dword ptr [esp+4], offset _silc_connauth_st_responder_failure 
mov	[esp], fsm_0	
call	_silc_fsm_next
xor	eax, eax
add	esp, 2Ch
pop	fsm_context_0
pop	fsm_0
pop	edi
leave
retn
align 10h
public _silc_connauth_free
push	ebp
mov	ebp, esp
push	edi
push	esi
push	ebx
sub	esp, 4Ch
mov	eax, [ebp+connauth]
mov	[ebp+var_1C], eax
mov	edi, [eax+34h]
test	edi, edi
jz	short loc_6422AC93
mov	ebx, [edi]
mov	[edi+8], ebx
and	byte ptr [edi+10h], 0FDh
test	ebx, ebx
jz	short loc_6422AC8B
nop
test	byte ptr [edi+10h], 2
jz	short loc_6422ACB0
movzx	eax, word ptr [edi+0Eh]
mov	eax, [ebx+eax]
mov	[edi+8], eax
mov	eax, [edi]
test	eax, eax
jz	short loc_6422AC77
cmp	ebx, eax
jz	loc_6422ACF8
movzx	esi, word ptr [edi+0Ch]
jmp	short loc_6422AC6E
cmp	ebx, ecx
jz	short loc_6422ACBC
mov	eax, ecx
lea	edx, [eax+esi]
mov	ecx, [edx]
test	ecx, ecx
jnz	short loc_6422AC68
cmp	ebx, [edi+4]
jz	short loc_6422ACE9
			
mov	[esp], ebx	
call	_silc_free
mov	ebx, [edi+8]
test	ebx, ebx
jnz	short loc_6422AC44
mov	[esp], edi	
call	_silc_free
mov	esi, [ebp+var_1C]
mov	eax, [esi]
mov	[esp], eax	
call	_silc_ske_free
mov	[ebp+connauth],	esi
add	esp, 4Ch
pop	ebx
pop	esi
pop	edi
leave
jmp	_silc_free
align 10h
movzx	eax, word ptr [edi+0Ch]
mov	eax, [ebx+eax]
jmp	short loc_6422AC51
align 4
mov	[ebp+var_3C], edx
mov	ecx, [ebx+esi]
mov	edx, [ebp+var_3C]
mov	[edx], ecx
test	ecx, ecx
jz	short loc_6422ACDB
test	byte ptr [edi+10h], 1
jz	short loc_6422ACDB
movzx	esi, word ptr [edi+0Eh]
mov	edx, [ebx+esi]
mov	[ecx+esi], edx
			
cmp	ebx, [edi+8]
jz	short loc_6422ACEE
sub	dword ptr [edi+10h], 4
cmp	ebx, [edi+4]
jnz	short loc_6422AC7C
mov	[edi+4], eax
jmp	short loc_6422AC7C
mov	ecx, [ebp+var_3C]
mov	edx, [ecx]
mov	[edi+8], edx
jmp	short loc_6422ACE0
movzx	esi, word ptr [edi+0Ch]
mov	[ebp+var_3C], edi
xor	eax, eax
jmp	short loc_6422ACBF
align 4
public _silc_connauth_alloc
push	ebp
mov	ebp, esp
push	edi
push	esi
push	ebx
sub	esp, 1Ch
mov	esi, [ebp+schedule]
mov	edi, [ebp+ske]
test	esi, esi
jnz	short loc_6422AD24
xor	ebx, ebx
			
mov	eax, connauth
add	esp, 1Ch
pop	connauth
pop	schedule_0
pop	ske_0
leave
retn
align 4
test	ske_0, ske_0
jz	short loc_6422AD17
mov	dword ptr [esp+4], 48h 
mov	dword ptr [esp], 1 
call	_silc_calloc
mov	ebx, eax
test	eax, eax
jz	short loc_6422AD19
mov	[esp+0Ch], schedule_0 
mov	dword ptr [esp+8], 0 
mov	dword ptr [esp+4], offset _silc_connauth_fsm_destructor	
mov	[esp], connauth	
call	_silc_fsm_alloc
mov	[connauth+4], eax
test	eax, eax
jz	short loc_6422AD76
mov	eax, [ebp+timeout_secs]
mov	[connauth+3Ch],	eax
mov	[connauth], ske_0
inc	word ptr [ske_0+0B6h]
jmp	short loc_6422AD19
mov	[esp], connauth	
call	_silc_connauth_free
xor	connauth, connauth
jmp	short loc_6422AD19
align 4
push	ebp
mov	ebp, esp
sub	esp, 8
leave
jmp	_silc_fsm_free
public _silc_connauth_timeout
			
push	ebp
mov	ebp, esp
sub	esp, 8
mov	eax, [ebp+context]
or	byte ptr [eax+44h], 1
mov	eax, [eax+4]
mov	[ebp+schedule],	eax
leave
jmp	_silc_fsm_continue_sync
align 4
public _silc_connauth_st_initiator_start
push	ebp
mov	ebp, esp
push	edi
push	esi
push	ebx
sub	esp, 6Ch
mov	edi, [ebp+fsm_context]
mov	[ebp+auth_data_len], 0
test	byte ptr [edi+44h], 1
jnz	loc_6422B090
mov	ebx, [fsm_context_0+3Ch]
test	ebx, ebx
jnz	loc_6422B0D8
mov	eax, [fsm_context_0+1Ch]
cmp	ax, 1
jz	loc_6422B0B0
cmp	ax, 2
jz	loc_6422AF18
mov	edx, [ebp+auth_data_len]
xor	esi, esi
mov	byte ptr [ebp+var_2C], 0
			
mov	dword ptr [esp+4], 10h 
mov	dword ptr [esp], 1 
mov	[ebp+var_38], edx
call	_silc_calloc
mov	ebx, eax
test	eax, eax
mov	edx, [ebp+var_38]
jz	loc_6422B090
add	edx, 4
jz	loc_6422B124
mov	dword ptr [esp+4], 1 
mov	[esp], edx	
mov	[ebp+var_38], edx
call	_silc_calloc
mov	[ebp+private_key], eax
mov	[packet], eax
test	eax, eax
mov	edx, [ebp+var_38]
jz	loc_6422B090
mov	[packet+4], eax
mov	[packet+8], eax
mov	ecx, eax
add	ecx, edx
mov	[packet+0Ch], ecx
mov	eax, ecx
sub	eax, [ebp+private_key]
cmp	edx, eax
ja	short loc_6422AE5D
mov	[packet+8], ecx
mov	dword ptr [esp+20h], 1Dh
mov	eax, [ebp+auth_data_len]
mov	[esp+1Ch], eax
mov	[esp+18h], auth_data
mov	dword ptr [esp+14h], 1Bh
mov	eax, [fsm_context_0+18h]
mov	[esp+10h], eax
mov	dword ptr [esp+0Ch], 3
mov	[esp+8], edx
mov	dword ptr [esp+4], 3
mov	[esp], packet	
call	_silc_buffer_format
mov	edx, [packet+4]
mov	eax, [packet+8]
sub	eax, edx
mov	[esp+10h], eax	
mov	[esp+0Ch], edx	
movzx	eax, byte ptr [ebp+var_2C]
mov	[esp+8], flags	
mov	dword ptr [esp+4], 11h 
mov	flags, [fsm_context_0]
mov	eax, [eax]
mov	[esp], eax	
call	_silc_packet_send
test	al, al
jz	loc_6422B090
test	auth_data, auth_data
jz	short loc_6422AEE4
mov	ecx, [ebp+auth_data_len]
xor	eax, eax
mov	fsm_context_0, auth_data
rep stosb
mov	[esp], esi	
call	_silc_free
mov	eax, [packet]
mov	[esp], eax	
call	_silc_free
mov	[esp], packet	
call	_silc_free
mov	dword ptr [esp+4], offset _silc_connauth_st_initiator_result 
mov	eax, [ebp+fsm]
mov	[esp], eax	
call	_silc_fsm_next
mov	eax, 2
add	esp, 6Ch
pop	packet
pop	auth_data
pop	auth_data
leave
retn
align 4
mov	edx, [fsm_context_0]
mov	eax, [fsm_context_0+20h]
mov	[ebp+private_key], eax
mov	eax, [edx+38h]
mov	[ebp+var_2C], eax
mov	eax, [edx+28h]
mov	esi, [eax+8]
mov	eax, [eax+4]
mov	[ebp+var_34], eax
mov	dword ptr [esp+4], 10h 
mov	dword ptr [esp], 1 
mov	[ebp+var_38], edx
call	_silc_calloc
mov	ebx, eax
test	eax, eax
mov	edx, [ebp+var_38]
jz	loc_6422B090
sub	esi, [ebp+var_34]
add	esi, [ebp+var_2C]
jz	loc_6422B12C
mov	dword ptr [esp+4], 1 
mov	[esp], esi	
call	_silc_calloc
mov	[ebp+var_2C], eax
mov	[ebx], eax
test	eax, eax
mov	edx, [ebp+var_38]
jz	loc_6422B090
mov	[ebx+4], eax
mov	[ebx+8], eax
mov	ecx, eax
add	ecx, esi
mov	[ebx+0Ch], ecx
mov	eax, ecx
sub	eax, [ebp+var_2C]
cmp	esi, eax
ja	short loc_6422AF9B
mov	[ebx+8], ecx
mov	eax, [edx+28h]
mov	ecx, [eax+4]
mov	dword ptr [esp+1Ch], 1Dh
mov	eax, [eax+8]
sub	eax, ecx
mov	[esp+18h], eax
mov	[esp+14h], ecx
mov	dword ptr [esp+10h], 1Bh
mov	eax, [edx+38h]
mov	[esp+0Ch], eax
mov	eax, [edx+34h]
mov	[esp+8], eax
mov	dword ptr [esp+4], 1Bh
mov	[esp], ebx	
mov	[ebp+var_38], edx
call	_silc_buffer_format
mov	eax, [ebp+private_key]
mov	[esp], eax	
call	_silc_pkcs_private_key_get_len
lea	ecx, [eax+7]
shr	ecx, 3
inc	ecx
mov	dword ptr [esp+4], 1 
mov	[esp], ecx	
mov	[ebp+dst_size],	ecx
call	_silc_calloc
mov	esi, eax
test	eax, eax
mov	edx, [ebp+var_38]
mov	ecx, [ebp+dst_size]
jz	loc_6422B118
mov	auth_data, [ebx+4]
mov	edx, [edx+18h]
mov	edx, [edx+10h]
mov	[esp+1Ch], edx	
mov	dword ptr [esp+18h], 1 
lea	edx, [ebp+auth_data_len]
mov	[esp+14h], edx	
mov	[esp+10h], ecx	
mov	[esp+0Ch], auth_data 
mov	edx, [ebx+8]
sub	edx, eax
mov	[esp+8], edx	
mov	[esp+4], eax	
mov	eax, [ebp+private_key]
mov	[esp], eax	
call	_silc_pkcs_sign
test	al, al
jz	short loc_6422B074
mov	eax, [ebx]
mov	[esp], eax	
call	_silc_free
mov	[esp], ebx	
call	_silc_free
mov	edx, [ebp+auth_data_len]
mov	byte ptr [ebp+var_2C], 0
jmp	loc_6422ADF4
align 4
mov	[esp], auth_data 
call	_silc_free
mov	eax, [ebx]
mov	[esp], eax	
call	_silc_free
mov	[esp], ebx	
call	_silc_free
xchg	ax, ax
			
mov	dword ptr [esp+4], offset _silc_connauth_st_initiator_failure 
mov	eax, [ebp+fsm]
mov	[esp], eax	
call	_silc_fsm_next
xor	eax, eax
add	esp, 6Ch
pop	packet
pop	auth_data
pop	fsm_context_0
leave
retn
align 10h
mov	eax, [fsm_context_0+24h]
mov	[esp+4], eax	
mov	eax, [fsm_context_0+20h]
mov	[esp], eax	
call	_silc_memdup
mov	esi, eax
test	eax, eax
jz	short loc_6422B090
mov	edx, [fsm_context_0+24h]
mov	[ebp+auth_data_len], edx
mov	byte ptr [ebp+var_2C], 20h
jmp	loc_6422ADF4
align 4
mov	eax, [ebp+fsm]
mov	[esp], eax	
call	_silc_fsm_get_schedule
mov	dword ptr [esp+18h], 1 
mov	dword ptr [esp+14h], 0 
mov	[esp+10h], ebx	
mov	[esp+0Ch], fsm_context_0 
mov	dword ptr [esp+8], offset _silc_connauth_timeout 
mov	dword ptr [esp+4], 0 
mov	[esp], eax	
call	_silc_schedule_task_add
jmp	loc_6422ADD4
mov	auth_data, ebx
call	_silc_buffer_free_3
jmp	loc_6422B090
mov	ecx, [packet+8]
jmp	loc_6422AE5A
mov	ecx, [eax+8]
jmp	loc_6422AF98
			
push	ebp
mov	ebp, esp
mov	eax, [ebp+context]
or	byte ptr [eax+0B8h], 1
leave
retn
align 4
			
push	ebp
mov	ebp, esp
push	ebx
sub	esp, 24h
test	byte ptr [ske+0B8h], 1
jnz	short loc_6422B18E
mov	ecx, [ske+0Ch]
mov	edx, [ecx+4]
test	edx, edx
jz	short loc_6422B18E
mov	ebx, [ske+14h]
test	ebx, ebx
jnz	short loc_6422B194
mov	ecx, [ecx+8]
mov	[esp+14h], ecx
mov	ecx, [ske+5Ch]
mov	[esp+10h], ecx
mov	ecx, [ske+58h]
mov	[esp+0Ch], ecx
mov	ecx, [ske+18h]
mov	[esp+8], ecx
mov	dword ptr [esp+4], 0
mov	[esp], ske
call	edx
			
add	esp, 24h
pop	ebx
leave
retn
mov	ecx, [ecx+8]
mov	[esp+14h], ecx
mov	dword ptr [esp+10h], 0
mov	dword ptr [esp+0Ch], 0
mov	dword ptr [esp+8], 0
mov	[esp+4], ebx
mov	[esp], ske
call	edx
add	esp, 24h
pop	ebx
leave
retn
align 4
public _silc_ske_get_context
push	ebp
mov	ebp, esp
mov	eax, [ebp+ske]
mov	eax, [eax+10h]
leave
retn
align 10h
public _silc_ske_map_status
push	ebp
mov	ebp, esp
mov	ecx, [ebp+status]
mov	eax, _silc_ske_status_string
test	eax, eax
jz	short loc_6422B1F8
test	status_0, status_0
jz	short locret_6422B1FD
xor	i, i
jmp	short loc_6422B1EC
align 4
cmp	i, status_0
jz	short locret_6422B1FD
inc	i
mov	eax, _silc_ske_status_string[i*4]
test	eax, eax
jnz	short loc_6422B1E8
mov	eax, offset dword_6426EFC8
			
leave
retn
align 10h
public _silc_ske_get_security_properties
push	ebp
mov	ebp, esp
mov	eax, [ebp+ske]
mov	eax, [eax+18h]
leave
retn
align 4
public _silc_ske_get_key_material
push	ebp
mov	ebp, esp
mov	eax, [ebp+ske]
mov	eax, [eax+58h]
leave
retn
align 4
public _silc_ske_parse_version
push	ebp
mov	ebp, esp
sub	esp, 8
mov	eax, [ebp+ske]
mov	eax, [eax+40h]
mov	[ebp+ske], eax
leave
jmp	_silc_parse_version_string
align 10h
			
push	ebp
mov	ebp, esp
sub	esp, 28h
mov	edx, [ske+40h]
test	edx, edx
jz	short loc_6422B27C
mov	ske, [ske+3Ch]
test	eax, eax
jz	short loc_6422B27C
mov	dword ptr [esp+14h], 0 
mov	dword ptr [esp+10h], 0 
mov	dword ptr [esp+0Ch], 0 
mov	dword ptr [esp+8], 0 
mov	dword ptr [esp+4], 0 
mov	[esp], edx	
call	_silc_parse_version_string
test	al, al
jz	short loc_6422B27C
xor	eax, eax
leave
retn
			
mov	ske, 0Ah
leave
retn
align 4
			
push	ebp
mov	ebp, esp
push	edi
push	ebx
mov	edx, sb
mov	ebx, [sb]
mov	ecx, [sb+0Ch]
sub	ecx, ebx
xor	sb, sb
mov	edi, ebx
rep stosb
mov	eax, [sb]
mov	[sb+8],	eax
mov	[sb+4],	eax
pop	ebx
pop	edi
leave
retn
public _silc_ske_set_keys
			
push	ebp
mov	ebp, esp
push	edi
push	esi
push	ebx
sub	esp, 7Ch
mov	ebx, [ebp+prop]
mov	esi, [ebp+ret_send_key]
mov	edi, [ebx]
test	esi, esi
jz	short loc_6422B2D8
mov	eax, [prop_0+8]
mov	[esp], eax	
call	_silc_cipher_get_name
mov	[esp+4], ret_send_key_0	
mov	[esp], eax	
call	_silc_cipher_alloc
test	al, al
jz	loc_6422B4C4
mov	ecx, [ebp+ret_receive_key]
test	ecx, ecx
jz	short loc_6422B301
mov	eax, [prop_0+8]
mov	[esp], eax	
call	_silc_cipher_get_name
mov	edx, [ebp+ret_receive_key]
mov	[esp+4], edx	
mov	[esp], eax	
call	_silc_cipher_alloc
test	al, al
jz	loc_6422B4C4
mov	edx, [ebp+ret_hmac_send]
test	edx, edx
jz	short loc_6422B332
mov	eax, [prop_0+0Ch]
mov	[esp], eax	
call	_silc_hmac_get_name
mov	ecx, [ebp+ret_hmac_send]
mov	[esp+8], ecx	
mov	dword ptr [esp+4], 0 
mov	[esp], eax	
call	_silc_hmac_alloc
test	al, al
jz	loc_6422B4C4
mov	eax, [ebp+ret_hmac_receive]
test	eax, eax
jz	short loc_6422B363
mov	eax, [prop_0+0Ch]
mov	[esp], eax	
call	_silc_hmac_get_name
mov	edx, [ebp+ret_hmac_receive]
mov	[esp+8], edx	
mov	dword ptr [esp+4], 0 
mov	[esp], eax	
call	_silc_hmac_alloc
test	al, al
jz	loc_6422B4C4
mov	ecx, [ebp+ret_hash]
test	ecx, ecx
jz	short loc_6422B38C
mov	eax, [prop_0+10h]
mov	[esp], eax	
call	_silc_hash_get_name
mov	ecx, [ebp+ret_hash]
mov	[esp+4], ecx	
mov	[esp], eax	
call	_silc_hash_alloc
test	al, al
jz	loc_6422B4C4
mov	eax, edi
and	eax, 1
mov	[ebp+iv_included], al
lea	edx, [ebp+iv]
mov	[ebp+var_6C], edx
xor	edx, edx
mov	ecx, 40h
mov	edi, [ebp+var_6C]
mov	al, dl
rep stosb
mov	ecx, [ebp+ske]
mov	al, [ecx+0B8h]
and	eax, 2
mov	[ebp+var_5A], al
jz	loc_6422B4D0
test	ret_send_key_0,	ret_send_key_0
jz	short loc_6422B411
mov	dword ptr [esp+0Ch], 1 
mov	ecx, [ebp+keymat]
mov	eax, [ecx+14h]
mov	[esp+8], eax	
mov	eax, [ecx+10h]
mov	[esp+4], eax	
mov	eax, [ret_send_key_0]
mov	[esp], eax	
mov	[ebp+var_60], dl
call	_silc_cipher_set_key
mov	eax, [ret_send_key_0]
mov	[esp], eax	
call	_silc_cipher_get_mode
cmp	eax, 3
mov	dl, [ebp+var_60]
jz	loc_6422B64C
mov	ecx, [ebp+keymat]
mov	eax, [ecx+4]
mov	[esp+4], eax	
mov	eax, [ret_send_key_0]
mov	[esp], eax	
call	_silc_cipher_set_iv
			
mov	edx, [ebp+ret_receive_key]
test	edx, edx
jz	short loc_6422B46A
mov	dword ptr [esp+0Ch], 0 
mov	edx, [ebp+keymat]
mov	eax, [edx+14h]
mov	[esp+8], eax	
mov	eax, [edx+0Ch]
mov	[esp+4], eax	
mov	ecx, [ebp+ret_receive_key]
mov	eax, [ecx]
mov	[esp], eax	
call	_silc_cipher_set_key
mov	edx, [ebp+ret_receive_key]
mov	eax, [edx]
mov	[esp], eax	
call	_silc_cipher_get_mode
cmp	eax, 3
jz	loc_6422B620
mov	ecx, [ebp+keymat]
mov	eax, [ecx]
mov	[esp+4], eax	
mov	edx, [ebp+ret_receive_key]
mov	eax, [edx]
mov	[esp], eax	
call	_silc_cipher_set_iv
mov	eax, [ebp+ret_hmac_send]
test	eax, eax
jz	short loc_6422B48F
mov	ecx, [ebp+keymat]
mov	eax, [ecx+20h]
mov	[esp+8], eax	
mov	eax, [ecx+1Ch]
mov	[esp+4], eax	
mov	edx, [ebp+ret_hmac_send]
mov	eax, [edx]
mov	[esp], eax	
call	_silc_hmac_set_key
mov	edi, [ebp+ret_hmac_receive]
test	edi, edi
jz	loc_6422B680
mov	ecx, [ebp+keymat]
mov	eax, [ecx+20h]
mov	[esp+8], eax	
mov	eax, [ecx+18h]
mov	[esp+4], eax	
mov	edx, [ebp+ret_hmac_receive]
mov	eax, [edx]
mov	[esp], eax	
call	_silc_hmac_set_key
mov	al, 1
add	esp, 7Ch
pop	prop_0
pop	esi
pop	edi
leave
retn
align 4
			
xor	eax, eax
add	esp, 7Ch
pop	prop_0
pop	esi
pop	edi
leave
retn
align 10h
test	ret_send_key_0,	ret_send_key_0
jz	short loc_6422B51D
mov	dword ptr [esp+0Ch], 1 
mov	ecx, [ebp+keymat]
mov	eax, [ecx+14h]
mov	[esp+8], eax	
mov	eax, [ecx+0Ch]
mov	[esp+4], eax	
mov	eax, [ret_send_key_0]
mov	[esp], eax	
call	_silc_cipher_set_key
mov	eax, [ret_send_key_0]
mov	[esp], eax	
call	_silc_cipher_get_mode
cmp	eax, 3
jz	loc_6422B5BC
mov	ecx, [ebp+keymat]
mov	eax, [ecx]
mov	[esp+4], eax	
mov	eax, [ret_send_key_0]
mov	[esp], eax	
call	_silc_cipher_set_iv
			
mov	ret_send_key_0,	[ebp+ret_receive_key]
test	esi, esi
jz	short loc_6422B577
mov	dword ptr [esp+0Ch], 0 
mov	edx, [ebp+keymat]
mov	eax, [edx+14h]
mov	[esp+8], eax	
mov	eax, [edx+10h]
mov	[esp+4], eax	
mov	ecx, [ebp+ret_receive_key]
mov	eax, [ecx]
mov	[esp], eax	
call	_silc_cipher_set_key
mov	edx, [ebp+ret_receive_key]
mov	eax, [edx]
mov	[esp], eax	
call	_silc_cipher_get_mode
cmp	eax, 3
jz	loc_6422B5F4
mov	ecx, [ebp+keymat]
mov	eax, [ecx+4]
mov	[esp+4], eax	
mov	edx, [ebp+ret_receive_key]
mov	eax, [edx]
mov	[esp], eax	
call	_silc_cipher_set_iv
mov	ecx, [ebp+ret_hmac_send]
test	ecx, ecx
jz	short loc_6422B59C
mov	ecx, [ebp+keymat]
mov	eax, [ecx+20h]
mov	[esp+8], eax	
mov	eax, [ecx+18h]
mov	[esp+4], eax	
mov	edx, [ebp+ret_hmac_send]
mov	eax, [edx]
mov	[esp], eax	
call	_silc_hmac_set_key
mov	edx, [ebp+ret_hmac_receive]
test	edx, edx
jz	loc_6422B680
mov	ecx, [ebp+keymat]
mov	eax, [ecx+20h]
mov	[esp+8], eax
mov	eax, [ecx+1Ch]
jmp	loc_6422B4A7
align 4
mov	eax, [ebp+ske]
test	byte ptr [eax+0B8h], 4
jnz	loc_6422B714
mov	eax, [eax+34h]
mov	eax, [eax]
mov	dword ptr [ebp+iv], eax
cmp	[ebp+iv_included], 0
jz	loc_6422B794
			
lea	edx, [ebp+iv]
mov	[esp+4], edx	
mov	eax, [ret_send_key_0]
mov	[esp], eax	
call	_silc_cipher_set_iv
jmp	loc_6422B51D
mov	ecx, [ebp+ske]
test	byte ptr [ecx+0B8h], 4
jnz	loc_6422B6D0
mov	eax, [ecx+34h]
mov	eax, [eax]
mov	dword ptr [ebp+iv], eax
cmp	[ebp+iv_included], 0
jz	loc_6422B7E6
			
lea	eax, [ebp+iv]
jmp	loc_6422B566
align 10h
mov	ecx, [ebp+ske]
test	byte ptr [ecx+0B8h], 4
jnz	loc_6422B754
mov	eax, [ecx+34h]
mov	eax, [eax]
mov	dword ptr [ebp+iv], eax
cmp	[ebp+iv_included], 0
jz	loc_6422B812
			
lea	eax, [ebp+iv]
jmp	loc_6422B459
align 4
mov	eax, [ebp+ske]
test	byte ptr [eax+0B8h], 4
jnz	short loc_6422B688
mov	eax, [eax+34h]
mov	eax, [eax]
mov	dword ptr [ebp+iv], eax
cmp	[ebp+iv_included], 0
jz	loc_6422B7FC
			
lea	edx, [ebp+iv]
mov	[esp+4], edx	
mov	eax, [ret_send_key_0]
mov	[esp], eax	
call	_silc_cipher_set_iv
jmp	loc_6422B411
			
mov	al, 1
jmp	loc_6422B4C6
align 4
lea	eax, [ebp+iv]
mov	[esp+0Ch], eax	
mov	dword ptr [esp+8], 8 
mov	ecx, [ebp+keymat]
mov	eax, [ecx+4]
mov	[esp+4], eax	
mov	eax, [prop_0+10h]
mov	[esp], eax	
mov	[ebp+var_60], dl
call	_silc_hash_make
cmp	[ebp+iv_included], 0
mov	dl, [ebp+var_60]
jnz	loc_6422B7A9
mov	edx, [ebp+keymat]
mov	eax, [edx+4]
mov	edx, [eax]
mov	dword ptr [ebp+iv+4], edx
mov	eax, [eax+4]
mov	dword ptr [ebp+iv+8], eax
jmp	short loc_6422B66A
align 10h
lea	ecx, [ebp+iv]
mov	[esp+0Ch], ecx	
mov	dword ptr [esp+8], 8 
mov	edx, [ebp+keymat]
mov	eax, [edx+4]
mov	[esp+4], eax	
mov	eax, [prop_0+10h]
mov	[esp], eax	
call	_silc_hash_make
cmp	[ebp+iv_included], 0
jnz	loc_6422B7C0
mov	ecx, [ebp+keymat]
mov	eax, [ecx+4]
mov	edx, [eax]
mov	dword ptr [ebp+iv+4], edx
mov	eax, [eax+4]
mov	dword ptr [ebp+iv+8], eax
jmp	loc_6422B616
lea	eax, [ebp+iv]
mov	[esp+0Ch], eax	
mov	dword ptr [esp+8], 8 
mov	edx, [ebp+keymat]
mov	eax, [edx]
mov	[esp+4], eax	
mov	eax, [prop_0+10h]
mov	[esp], eax	
call	_silc_hash_make
cmp	[ebp+iv_included], 0
jz	short loc_6422B794
lea	edx, [ebp+iv+4]
mov	ecx, 0Ch
mov	edi, edx
mov	al, [ebp+var_5A]
rep stosb
jmp	loc_6422B5DE
align 4
lea	ecx, [ebp+iv]
mov	[esp+0Ch], ecx	
mov	dword ptr [esp+8], 8 
mov	edx, [ebp+keymat]
mov	eax, [edx]
mov	[esp+4], eax	
mov	eax, [prop_0+10h]
mov	[esp], eax	
call	_silc_hash_make
cmp	[ebp+iv_included], 0
jnz	short loc_6422B7D3
mov	ecx, [ebp+keymat]
mov	eax, [ecx]
mov	edx, [eax]
mov	dword ptr [ebp+iv+4], edx
mov	eax, [eax+4]
mov	dword ptr [ebp+iv+8], eax
jmp	loc_6422B642
align 4
			
mov	ecx, [ebp+keymat]
mov	eax, [ecx]
mov	edx, [eax]
mov	dword ptr [ebp+iv+4], edx
mov	eax, [eax+4]
mov	dword ptr [ebp+iv+8], eax
jmp	loc_6422B5DE
lea	ecx, [ebp+iv+4]
mov	[ebp+var_70], ecx
mov	ecx, 0Ch
mov	edi, [ebp+var_70]
mov	al, dl
rep stosb
jmp	loc_6422B66A
lea	edx, [ebp+iv+4]
mov	ecx, 0Ch
xor	eax, eax
mov	edi, edx
rep stosb
jmp	loc_6422B616
lea	edx, [ebp+iv+4]
mov	ecx, 0Ch
xor	eax, eax
mov	edi, edx
rep stosb
jmp	loc_6422B642
mov	edx, [ebp+keymat]
mov	eax, [edx+4]
mov	edx, [eax]
mov	dword ptr [ebp+iv+4], edx
mov	eax, [eax+4]
mov	dword ptr [ebp+iv+8], eax
jmp	loc_6422B616
mov	ecx, [ebp+keymat]
mov	eax, [ecx+4]
mov	edx, [eax]
mov	dword ptr [ebp+iv+4], edx
mov	eax, [eax+4]
mov	dword ptr [ebp+iv+8], eax
jmp	loc_6422B66A
mov	edx, [ebp+keymat]
mov	eax, [edx]
mov	edx, [eax]
mov	dword ptr [ebp+iv+4], edx
mov	eax, [eax+4]
mov	dword ptr [ebp+iv+8], eax
jmp	loc_6422B642
align 4
public _silc_ske_free_rekey_material
push	ebp
mov	ebp, esp
push	edi
push	ebx
sub	esp, 10h
mov	ebx, [ebp+rekey]
test	ebx, ebx
jz	short loc_6422B874
mov	edx, [rekey_0]
test	edx, edx
jz	short loc_6422B859
mov	ecx, [rekey_0+8]
and	ecx, 7FFFFFh
sar	ecx, 3
xor	eax, eax
mov	edi, edx
rep stosb
mov	eax, [rekey_0]
mov	[esp], eax	
call	_silc_free
mov	eax, [rekey_0+4]
mov	[esp], eax	
call	_silc_free
mov	[ebp+rekey], rekey_0
add	esp, 10h
pop	rekey_0
pop	edi
leave
jmp	_silc_free
align 4
add	esp, 10h
pop	rekey_0
pop	edi
leave
retn
align 4
public _silc_ske_free_key_material
push	ebp
mov	ebp, esp
push	edi
push	ebx
sub	esp, 10h
mov	ebx, [ebp+key]
test	ebx, ebx
jz	loc_6422B92C
mov	eax, [key_0]
test	eax, eax
jz	short loc_6422B89D
mov	[esp], eax	
call	_silc_free
mov	eax, [key_0+4]
test	eax, eax
jz	short loc_6422B8AC
mov	[esp], eax	
call	_silc_free
mov	edx, [key_0+0Ch]
test	edx, edx
jz	short loc_6422B8CA
mov	ecx, [key_0+14h]
shr	ecx, 3
xor	eax, eax
mov	edi, edx
rep stosb
mov	eax, [key_0+0Ch]
mov	[esp], eax	
call	_silc_free
mov	edx, [key_0+10h]
test	edx, edx
jz	short loc_6422B8E8
mov	ecx, [key_0+14h]
shr	ecx, 3
xor	eax, eax
mov	edi, edx
rep stosb
mov	eax, [key_0+10h]
mov	[esp], eax	
call	_silc_free
mov	edx, [key_0+18h]
test	edx, edx
jz	short loc_6422B903
mov	ecx, [key_0+20h]
xor	eax, eax
mov	edi, edx
rep stosb
mov	eax, [key_0+18h]
mov	[esp], eax	
call	_silc_free
mov	edx, [key_0+1Ch]
test	edx, edx
jz	short loc_6422B91E
mov	ecx, [key_0+20h]
xor	eax, eax
mov	edi, edx
rep stosb
mov	eax, [key_0+1Ch]
mov	[esp], eax	
call	_silc_free
mov	[ebp+key], key_0
add	esp, 10h
pop	key_0
pop	edi
leave
jmp	_silc_free
add	esp, 10h
pop	key_0
pop	edi
leave
retn
align 4
			
push	ebp
mov	ebp, esp
push	ebx
sub	esp, 14h
mov	ebx, sb
test	sb, sb
jz	short loc_6422B953
mov	sb, [sb]
mov	[esp], eax	
call	_silc_free
mov	[esp], sb	
call	_silc_free
add	esp, 14h
pop	sb
leave
retn
align 4
public _silc_ske_set_callbacks
push	ebp
mov	ebp, esp
push	ebx
sub	esp, 14h
mov	ebx, [ebp+ske]
mov	eax, [ebx+0Ch]
test	eax, eax
jz	short loc_6422B975
mov	[esp], eax	
call	_silc_free
mov	dword ptr [esp+4], 0Ch 
mov	dword ptr [esp], 1 
call	_silc_calloc
mov	[ske_0+0Ch], eax
test	eax, eax
jz	short loc_6422B9A1
mov	edx, [ebp+verify_key]
mov	[eax], edx
mov	edx, [ebp+completed]
mov	[eax+4], edx
mov	edx, [ebp+context]
mov	[eax+8], edx
add	esp, 14h
pop	ske_0
leave
retn
align 4
			
push	ebp
mov	ebp, esp
push	edi
push	esi
push	ebx
sub	esp, 2Ch
mov	esi, ske
mov	[ebp+var_1C], keymat
mov	dword ptr [esp+4], 0Ch 
mov	dword ptr [esp], 1 
call	_silc_calloc
mov	ebx, eax
test	eax, eax
jz	short loc_6422B9DD
mov	rekey, [ske+18h]
test	eax, eax
jnz	short loc_6422B9E8
cmp	byte ptr [rekey+0Bh], 0
jns	short loc_6422BA5C
			
mov	eax, rekey
add	esp, 2Ch
pop	rekey
pop	ske
pop	edi
leave
retn
align 4
mov	edx, [eax+4]
test	edx, edx
jz	short loc_6422BA10
mov	[esp], edx	
call	_silc_ske_group_get_number
movzx	eax, al
shl	eax, 7
mov	dx, [rekey+0Ah]
and	edx, 0FFFF807Fh
or	edx, eax
mov	[rekey+0Ah], dx
mov	eax, [ske+18h]
mov	eax, [eax]
shr	eax, 1
mov	dl, al
shl	edx, 7
mov	al, [rekey+0Bh]
and	eax, 7Fh
or	eax, edx
mov	[rekey+0Bh], al
mov	eax, [ske+18h]
mov	eax, [eax+10h]
mov	[esp], eax	
call	_silc_hash_get_name
mov	edx, eax
xor	eax, eax
mov	ecx, 0FFFFFFFFh
mov	edi, hash
repne scasb
not	ecx
dec	ecx
mov	[esp+4], ecx	
mov	[esp], edx	
call	_silc_memdup
mov	[rekey+4], eax
test	eax, eax
jnz	short loc_6422B9D7
xor	rekey, rekey
jmp	short loc_6422B9DD
align 4
mov	edx, [ebp+var_1C]
mov	eax, [edx+14h]
shr	eax, 3
mov	[esp+4], eax	
mov	eax, [edx+0Ch]
mov	[esp], eax	
call	_silc_memdup
mov	[rekey], eax
test	eax, eax
jz	short loc_6422BA9D
mov	eax, [ebp+var_1C]
mov	edx, [eax+14h]
and	edx, 7FFFFFh
mov	eax, [rekey+8]
and	eax, 0FF800000h
or	eax, edx
mov	[rekey+8], eax
mov	eax, rekey
add	esp, 2Ch
pop	rekey
pop	ske
pop	edi
leave
retn
mov	[esp], rekey
call	_silc_free
xor	rekey, rekey
jmp	loc_6422B9DD
			
push	ebp
mov	ebp, esp
push	edi
push	esi
push	ebx
sub	esp, 2Ch
mov	ebx, sb
mov	esi, newsize
test	sb, sb
jz	short loc_6422BB10
mov	edi, [sb]
mov	sb, [sb+0Ch]
sub	eax, edi
cmp	edx, eax
jbe	short loc_6422BB03
mov	newsize, [sb+4]
mov	eax, [sb+8]
mov	[ebp+var_1C], eax
mov	[esp+4], newsize 
mov	[esp], edi	
mov	[ebp+var_20], edx
call	_silc_realloc
test	eax, eax
mov	edx, [ebp+var_20]
jz	short loc_6422BB53
mov	[sb], eax
mov	ecx, edx
sub	ecx, edi
lea	edi, [eax+ecx]
mov	[sb+4],	edi
mov	ecx, [ebp+var_1C]
sub	ecx, edx
add	edi, ecx
mov	[sb+8],	edi
lea	newsize, [eax+newsize]
mov	[sb+0Ch], esi
			
mov	eax, sb
add	esp, 2Ch
pop	sb
pop	newsize
pop	edi
leave
retn
align 10h
mov	dword ptr [esp+4], 10h 
mov	dword ptr [esp], 1 
call	_silc_calloc
mov	edi, eax
test	eax, eax
jz	short loc_6422BB57
test	newsize, newsize
jz	short loc_6422BB57
mov	dword ptr [esp+4], 1 
mov	[esp], newsize	
call	_silc_calloc
mov	[edi], eax
test	eax, eax
jz	short loc_6422BB03
mov	[edi+4], eax
mov	[edi+8], eax
add	eax, newsize
mov	[edi+0Ch], eax
mov	sb, edi
jmp	short loc_6422BB03
xor	sb, sb
jmp	short loc_6422BB03
			
mov	sb, edi
jmp	short loc_6422BB03
align 4
public _silc_ske_rekey_responder
push	ebp
mov	ebp, esp
push	edi
push	esi
push	ebx
sub	esp, 4Ch
mov	ebx, [ebp+ske]
mov	edi, [ebp+stream]
mov	edx, [ebp+rekey]
test	ebx, ebx
jnz	short loc_6422BB80
			
xor	esi, esi
mov	eax, esi
add	esp, 4Ch
pop	ske_0
pop	esi
pop	stream_0
leave
retn
align 10h
test	stream_0, stream_0
jz	short loc_6422BB72
test	rekey_0, rekey_0
jz	short loc_6422BB72
lea	esi, [ske_0+90h]
mov	[esp+0Ch], ske_0 
mov	dword ptr [esp+8], 0 
mov	dword ptr [esp+4], offset _silc_ske_abort 
mov	[esp], esi	
mov	[ebp+var_20], rekey_0
call	_silc_async_init
test	al, al
jz	short loc_6422BB72
lea	eax, [ske_0+64h]
mov	[ebp+fsm], eax
mov	eax, [ske_0+60h]
mov	[esp+10h], eax	
mov	[esp+0Ch], ske_0 
mov	dword ptr [esp+8], offset _silc_ske_finished 
mov	[esp+4], ske_0	
mov	eax, [ebp+fsm]
mov	[esp], eax	
call	_silc_fsm_init
test	al, al
mov	edx, [ebp+var_20]
jz	short loc_6422BB72
mov	[ske_0+5Ch], edx
or	byte ptr [ske_0+0B8h], 6
mov	eax, [ebp+packet]
mov	[ske_0+50h], eax
inc	word ptr [ske_0+0B6h]
mov	[ske_0], stream_0
mov	dword ptr [esp+24h], 0FFFFFFFFh
mov	dword ptr [esp+20h], 3
mov	dword ptr [esp+1Ch], 2
mov	dword ptr [esp+18h], 0Eh
mov	dword ptr [esp+14h], 17h
mov	dword ptr [esp+10h], 16h
mov	dword ptr [esp+0Ch], 0F4240h 
mov	[esp+8], ske_0	
mov	dword ptr [esp+4], offset _silc_ske_stream_cbs 
mov	[esp], stream_0	
call	_silc_packet_stream_link
mov	dword ptr [esp+4], offset _silc_ske_st_rekey_responder_wait 
mov	eax, [ebp+fsm]
mov	[esp], eax	
call	_silc_fsm_start_sync
jmp	loc_6422BB74
align 10h
push	ebp
mov	ebp, esp
push	edi
push	esi
push	ebx
sub	esp, 1Ch
mov	esi, [ebp+packet]
mov	ebx, [ebp+callback_context]
mov	word ptr [ebx+0A2h], 1
mov	word ptr [ebx+0A4h], 0
mov	dword ptr [esp+4], offset _silc_ske_packet_send_retry 
mov	eax, [ebx+60h]
mov	[esp], eax	
call	_silc_schedule_task_del_by_callback
mov	[ebx+50h], esi
mov	al, [ebx+0B8h]
test	al, 1
jnz	short loc_6422BCC8
cmp	byte ptr [packet_0+22h], 3
jz	short loc_6422BD20
lea	edi, [callback_context_0+64h]
			
test	al, 4
jnz	short loc_6422BCF3
cmp	byte ptr [packet_0+22h], 2
jz	short loc_6422BCF3
mov	[esp], edi	
call	_silc_fsm_continue
mov	al, 1
add	esp, 1Ch
pop	callback_context_0
pop	packet_0
pop	edi
leave
retn
align 4
mov	[esp], packet_0	
call	_silc_packet_free
mov	dword ptr [callback_context_0+50h], 0
test	byte ptr [callback_context_0+0B8h], 2
jnz	short loc_6422BD08
mov	dword ptr [esp+4], offset _silc_ske_st_initiator_aborted 
lea	edi, [callback_context_0+64h]
mov	[esp], edi	
call	_silc_fsm_next
			
mov	[esp], edi	
call	_silc_fsm_continue_sync
mov	al, 1
add	esp, 1Ch
pop	callback_context_0
pop	packet_0
pop	edi
leave
retn
align 4
mov	dword ptr [esp+4], offset _silc_ske_st_responder_aborted 
lea	edi, [callback_context_0+64h]
mov	[esp], edi	
call	_silc_fsm_next
jmp	short loc_6422BCF3
align 10h
test	al, 8
jnz	short loc_6422BCA7
or	eax, 8
mov	[callback_context_0+0B8h], al
test	al, 2
jnz	short loc_6422BD50
mov	dword ptr [esp+4], offset _silc_ske_st_initiator_failure 
lea	edi, [callback_context_0+64h]
mov	[esp], edi	
call	_silc_fsm_next
mov	al, [callback_context_0+0B8h]
jmp	loc_6422BCAA
align 10h
mov	dword ptr [esp+4], offset _silc_ske_st_responder_failure 
lea	edi, [callback_context_0+64h]
mov	[esp], edi	
call	_silc_fsm_next
mov	al, [callback_context_0+0B8h]
jmp	loc_6422BCAA
align 10h
			
push	ebp
mov	ebp, esp
sub	esp, 8
mov	eax, [ebp+ske]
mov	edx, [ebp+status]
mov	[eax+14h], edx
mov	dl, [eax+8Ch]
mov	cl, dl
and	ecx, 0FFFFFFFBh
mov	[eax+8Ch], cl
and	edx, 4
jz	short loc_6422BD98
leave
retn
align 4
add	ske_0, 64h
mov	[ebp+ske], eax
leave
jmp	_silc_fsm_continue
public _silc_ske_st_rekey_responder_end
			
push	ebp
mov	ebp, esp
push	edi
push	esi
push	ebx
sub	esp, 4Ch
mov	esi, [ebp+fsm]
mov	ebx, [ebp+fsm_context]
mov	eax, [ebx+50h]
cmp	byte ptr [eax+22h], 17h
jz	short loc_6422BDD8
mov	[esp], eax	
call	_silc_packet_free
mov	dword ptr [fsm_context_0+50h], 0
mov	eax, 2
			
add	esp, 4Ch
pop	fsm_context_0
pop	fsm_0
pop	edi
leave
retn
lea	edx, [ebp+hmac_receive]
mov	[esp+10h], edx	
mov	dword ptr [esp+0Ch], 0 
lea	edi, [ebp+receive_key]
mov	[esp+8], edi	
mov	dword ptr [esp+4], 0 
mov	eax, [fsm_context_0]
mov	[esp], eax	
mov	[ebp+ret_hmac_receive],	edx
call	_silc_packet_get_keys
mov	eax, [fsm_context_0+18h]
mov	ecx, [ebp+receive_key]
mov	[eax+8], ecx
mov	ecx, [ebp+hmac_receive]
mov	[eax+0Ch], ecx
mov	dword ptr [esp+1Ch], 0 
mov	edx, [ebp+ret_hmac_receive]
mov	[esp+18h], edx	
mov	dword ptr [esp+14h], 0 
mov	[esp+10h], edi	
mov	dword ptr [esp+0Ch], 0 
mov	[esp+8], eax	
mov	eax, [fsm_context_0+58h]
mov	[esp+4], eax	
mov	[esp], fsm_context_0 
call	_silc_ske_set_keys
test	al, al
jz	loc_6422BF0C
mov	dword ptr [esp+14h], 0 
mov	eax, [ebp+hmac_receive]
mov	[esp+10h], eax	
mov	dword ptr [esp+0Ch], 0 
mov	eax, [ebp+receive_key]
mov	[esp+8], eax	
mov	dword ptr [esp+4], 0 
mov	eax, [fsm_context_0]
mov	[esp], eax	
call	_silc_packet_set_keys
test	al, al
jz	loc_6422BF3C
mov	edx, [fsm_context_0+58h] 
mov	eax, fsm_context_0 
call	_silc_ske_make_rekey_material
test	eax, eax
jz	loc_6422BF81
mov	edx, [fsm_context_0+5Ch]
mov	cl, [edx+0Bh]
and	ecx, 0FFFFFF80h
mov	dl, [rekey+0Bh]
and	edx, 7Fh
or	edx, ecx
mov	[rekey+0Bh], dl
mov	[fsm_context_0+5Ch], rekey
mov	rekey, [fsm_context_0+18h]
mov	dword ptr [eax+8], 0
mov	dword ptr [eax+0Ch], 0
mov	eax, [fsm_context_0+50h]
mov	[esp], eax	
call	_silc_packet_free
mov	dword ptr [fsm_context_0+50h], 0
mov	[esp+8], fsm_context_0 
mov	dword ptr [esp+4], offset _silc_ske_stream_cbs 
mov	eax, [fsm_context_0]
mov	[esp], eax	
call	_silc_packet_stream_unlink
mov	[esp+4], fsm_context_0 
mov	eax, [fsm_context_0+60h]
mov	[esp], eax	
call	_silc_schedule_task_del_by_context
mov	eax, fsm_context_0 
call	_silc_ske_completion
mov	eax, 3
jmp	loc_6422BDD0
align 4
mov	dword ptr [fsm_context_0+14h], 1
mov	rekey, [fsm_context_0+18h]
mov	dword ptr [eax+8], 0
mov	dword ptr [eax+0Ch], 0
mov	dword ptr [esp+4], offset _silc_ske_st_responder_error 
mov	[esp], fsm_0	
call	_silc_fsm_next
xor	eax, eax
jmp	loc_6422BDD0
align 4
mov	dword ptr [fsm_context_0+14h], 1
mov	eax, [fsm_context_0+18h]
mov	dword ptr [eax+8], 0
mov	dword ptr [eax+0Ch], 0
mov	eax, [ebp+receive_key]
mov	[esp], eax	
call	_silc_cipher_free
mov	eax, [ebp+hmac_receive]
mov	[esp], eax	
call	_silc_hmac_free
mov	dword ptr [esp+4], offset _silc_ske_st_responder_error 
mov	[esp], fsm_0	
call	_silc_fsm_next
xor	eax, eax
jmp	loc_6422BDD0
mov	dword ptr [fsm_context_0+14h], 10h
jmp	short loc_6422BF13
align 4
public _silc_ske_st_rekey_initiator_end
			
push	ebp
mov	ebp, esp
push	edi
push	esi
push	ebx
sub	esp, 4Ch
mov	esi, [ebp+fsm]
mov	ebx, [ebp+fsm_context]
mov	eax, [ebx+50h]
cmp	byte ptr [eax+22h], 17h
jz	short loc_6422BFC0
mov	[esp], eax	
call	_silc_packet_free
mov	dword ptr [fsm_context_0+50h], 0
mov	eax, 2
			
add	esp, 4Ch
pop	fsm_context_0
pop	fsm_0
pop	edi
leave
retn
lea	edx, [ebp+hmac_receive]
mov	[esp+10h], edx	
mov	dword ptr [esp+0Ch], 0 
lea	edi, [ebp+receive_key]
mov	[esp+8], edi	
mov	dword ptr [esp+4], 0 
mov	eax, [fsm_context_0]
mov	[esp], eax	
mov	[ebp+ret_hmac_receive],	edx
call	_silc_packet_get_keys
mov	eax, [fsm_context_0+18h]
mov	ecx, [ebp+receive_key]
mov	[eax+8], ecx
mov	ecx, [ebp+hmac_receive]
mov	[eax+0Ch], ecx
mov	dword ptr [esp+1Ch], 0 
mov	edx, [ebp+ret_hmac_receive]
mov	[esp+18h], edx	
mov	dword ptr [esp+14h], 0 
mov	[esp+10h], edi	
mov	dword ptr [esp+0Ch], 0 
mov	[esp+8], eax	
mov	eax, [fsm_context_0+58h]
mov	[esp+4], eax	
mov	[esp], fsm_context_0 
call	_silc_ske_set_keys
test	al, al
jz	loc_6422C0F4
mov	dword ptr [esp+14h], 0 
mov	eax, [ebp+hmac_receive]
mov	[esp+10h], eax	
mov	dword ptr [esp+0Ch], 0 
mov	eax, [ebp+receive_key]
mov	[esp+8], eax	
mov	dword ptr [esp+4], 0 
mov	eax, [fsm_context_0]
mov	[esp], eax	
call	_silc_packet_set_keys
test	al, al
jz	loc_6422C124
mov	edx, [fsm_context_0+58h] 
mov	eax, fsm_context_0 
call	_silc_ske_make_rekey_material
test	eax, eax
jz	loc_6422C158
mov	edx, [fsm_context_0+5Ch]
mov	cl, [edx+0Bh]
and	ecx, 0FFFFFF80h
mov	dl, [rekey+0Bh]
and	edx, 7Fh
or	edx, ecx
mov	[rekey+0Bh], dl
mov	[fsm_context_0+5Ch], rekey
mov	rekey, [fsm_context_0+18h]
mov	dword ptr [eax+8], 0
mov	dword ptr [eax+0Ch], 0
mov	eax, [fsm_context_0+50h]
mov	[esp], eax	
call	_silc_packet_free
mov	dword ptr [fsm_context_0+50h], 0
mov	[esp+8], fsm_context_0 
mov	dword ptr [esp+4], offset _silc_ske_stream_cbs 
mov	eax, [fsm_context_0]
mov	[esp], eax	
call	_silc_packet_stream_unlink
mov	[esp+4], fsm_context_0 
mov	eax, [fsm_context_0+60h]
mov	[esp], eax	
call	_silc_schedule_task_del_by_context
mov	eax, fsm_context_0 
call	_silc_ske_completion
mov	eax, 3
jmp	loc_6422BFB8
align 4
mov	dword ptr [fsm_context_0+14h], 1
mov	rekey, [fsm_context_0+18h]
mov	dword ptr [eax+8], 0
mov	dword ptr [eax+0Ch], 0
mov	dword ptr [esp+4], offset _silc_ske_st_initiator_error 
mov	[esp], fsm_0	
call	_silc_fsm_next
xor	eax, eax
jmp	loc_6422BFB8
align 4
mov	dword ptr [fsm_context_0+14h], 1
mov	eax, [ebp+receive_key]
mov	[esp], eax	
call	_silc_cipher_free
mov	eax, [ebp+hmac_receive]
mov	[esp], eax	
call	_silc_hmac_free
mov	dword ptr [esp+4], offset _silc_ske_st_initiator_error 
mov	[esp], fsm_0	
call	_silc_fsm_next
xor	eax, eax
jmp	loc_6422BFB8
mov	dword ptr [fsm_context_0+14h], 10h
jmp	short loc_6422C0FB
align 4
public _silc_ske_alloc
push	ebp
mov	ebp, esp
push	edi
push	esi
push	ebx
sub	esp, 1Ch
mov	ebx, [ebp+rng]
mov	esi, [ebp+schedule]
mov	edi, [ebp+public_key]
test	ebx, ebx
jnz	short loc_6422C184
xor	eax, eax
			
add	esp, 1Ch
pop	rng_0
pop	schedule_0
pop	public_key_0
leave
retn
test	schedule_0, schedule_0
jz	short loc_6422C17A
test	public_key_0, public_key_0
jz	short loc_6422C1E0
mov	dword ptr [esp+4], 0BCh	
mov	dword ptr [esp], 1 
call	_silc_calloc
test	eax, eax
jz	short loc_6422C17C
mov	dword ptr [ske+14h], 0
mov	[ske+4], rng_0
mov	edx, [ebp+repository]
mov	[ske+8], edx
mov	edx, [ebp+context]
mov	[ske+10h], edx
mov	[ske+60h], schedule_0
mov	[ske+44h], public_key_0
mov	edx, [ebp+private_key]
mov	[ske+48h], edx
mov	word ptr [ske+0A2h], 1
mov	word ptr [ske+0B6h], 1
add	esp, 1Ch
pop	rng_0
pop	schedule_0
pop	public_key_0
leave
retn
mov	dword ptr [esp], offset	aPublicKeyMustB
call	_silc_format
mov	[esp+4], eax	
mov	dword ptr [esp], 3 
call	_silc_log_output
xor	eax, eax
jmp	loc_6422C17C
align 4
public _silc_ske_st_rekey_responder_start
			
push	ebp
mov	ebp, esp
push	esi
push	ebx
sub	esp, 10h
mov	esi, [ebp+fsm]
mov	ebx, [ebp+fsm_context]
mov	eax, [ebx+50h]
cmp	byte ptr [eax+22h], 16h
jz	short loc_6422C24C
mov	dword ptr [fsm_context_0+14h], 1
mov	[esp], eax	
call	_silc_packet_free
mov	dword ptr [fsm_context_0+50h], 0
mov	dword ptr [esp+4], offset _silc_ske_st_responder_error 
mov	[esp], fsm_0	
call	_silc_fsm_next
xor	eax, eax
add	esp, 10h
pop	fsm_context_0
pop	fsm_0
leave
retn
align 4
mov	dword ptr [esp+4], 1Ch 
mov	dword ptr [esp], 1 
call	_silc_calloc
mov	[fsm_context_0+18h], eax
test	eax, eax
jz	short loc_6422C2E4
add	eax, 10h
mov	[esp+4], eax	
mov	eax, [fsm_context_0+5Ch]
mov	eax, [eax+4]
mov	[esp], eax	
call	_silc_hash_alloc
test	al, al
jz	short loc_6422C2E4
mov	eax, [fsm_context_0+5Ch]
cmp	byte ptr [eax+0Bh], 0
jns	short loc_6422C2C8
mov	edx, [fsm_context_0+18h]
add	edx, 4
mov	[esp+4], edx	
mov	ax, [eax+0Ah]
shr	ax, 7
movzx	eax, al
mov	[esp], eax	
call	_silc_ske_group_get_by_number
test	eax, eax
jnz	short loc_6422C304
mov	dword ptr [esp+4], offset _silc_ske_st_responder_phase2	
mov	[esp], fsm_0	
call	_silc_fsm_next
mov	eax, 2
add	esp, 10h
pop	fsm_context_0
pop	fsm_0
leave
retn
align 4
mov	dword ptr [esp+4], offset _silc_ske_st_rekey_responder_done 
mov	[esp], fsm_0	
call	_silc_fsm_next
xor	eax, eax
add	esp, 10h
pop	fsm_context_0
pop	fsm_0
leave
retn
align 4
			
mov	dword ptr [fsm_context_0+14h], 10h
mov	dword ptr [esp+4], offset _silc_ske_st_responder_error 
mov	[esp], fsm_0	
call	_silc_fsm_next
xor	eax, eax
add	esp, 10h
pop	fsm_context_0
pop	fsm_0
leave
retn
mov	dword ptr [esp+4], offset _silc_ske_st_responder_error
mov	[esp], fsm_0	
call	_silc_fsm_next
xor	eax, eax
jmp	loc_6422C243
align 4
public _silc_ske_st_rekey_responder_wait
push	ebp
mov	ebp, esp
push	esi
push	ebx
sub	esp, 20h
mov	esi, [ebp+fsm]
mov	ebx, [ebp+fsm_context]
test	byte ptr [ebx+0B8h], 1
jnz	short loc_6422C394
mov	dword ptr [esp+18h], 1 
mov	dword ptr [esp+14h], 0 
mov	dword ptr [esp+10h], 1Eh 
mov	[esp+0Ch], fsm_context_0 
mov	dword ptr [esp+8], offset _silc_ske_timeout 
mov	dword ptr [esp+4], 0 
mov	eax, [fsm_context_0+60h]
mov	[esp], eax	
call	_silc_schedule_task_add
mov	dword ptr [esp+4], offset _silc_ske_st_rekey_responder_start 
mov	[esp], fsm_0	
call	_silc_fsm_next
mov	eax, [fsm_context_0+50h]
test	eax, eax
jz	short loc_6422C387
cmp	byte ptr [eax+22h], 16h
jz	short loc_6422C3B0
mov	eax, 2
add	esp, 20h
pop	fsm_context_0
pop	fsm_0
leave
retn
align 4
mov	dword ptr [esp+4], offset _silc_ske_st_responder_aborted 
mov	[esp], fsm_0	
call	_silc_fsm_next
xor	eax, eax
add	esp, 20h
pop	fsm_context_0
pop	fsm_0
leave
retn
align 10h
xor	eax, eax
jmp	short loc_6422C38C
public _silc_ske_st_responder_start
push	ebp
mov	ebp, esp
push	ebx
sub	esp, 24h
mov	ebx, [ebp+fsm]
mov	eax, [ebp+fsm_context]
test	byte ptr [eax+0B8h], 1
jnz	short loc_6422C420
mov	dword ptr [esp+18h], 1 
mov	dword ptr [esp+14h], 0 
movzx	edx, word ptr [fsm_context_0+0B4h]
mov	[esp+10h], edx	
mov	[esp+0Ch], fsm_context_0 
mov	dword ptr [esp+8], offset _silc_ske_timeout 
mov	dword ptr [esp+4], 0 
mov	fsm_context_0, [fsm_context_0+60h]
mov	[esp], eax	
call	_silc_schedule_task_add
mov	dword ptr [esp+4], offset _silc_ske_st_responder_phase1	
mov	[esp], fsm_0	
call	_silc_fsm_next
mov	eax, 2
add	esp, 24h
pop	fsm_0
leave
retn
align 10h
mov	dword ptr [esp+4], offset _silc_ske_st_responder_aborted 
mov	[esp], fsm_0	
call	_silc_fsm_next
xor	eax, eax
add	esp, 24h
pop	fsm_0
leave
retn
public _silc_ske_rekey_initiator
push	ebp
mov	ebp, esp
push	edi
push	esi
push	ebx
sub	esp, 4Ch
mov	ebx, [ebp+ske]
mov	edi, [ebp+stream]
test	ebx, ebx
jz	short loc_6422C488
test	stream_0, stream_0
jz	short loc_6422C488
mov	esi, [ebp+rekey]
test	esi, esi
jz	short loc_6422C488
lea	esi, [ske_0+90h]
mov	[esp+0Ch], ske_0 
mov	dword ptr [esp+8], 0 
mov	dword ptr [esp+4], offset _silc_ske_abort 
mov	[esp], esi	
call	_silc_async_init
test	al, al
jnz	short loc_6422C4B0
xor	esi, esi
mov	eax, esi
add	esp, 4Ch
pop	ske_0
pop	esi
pop	stream_0
leave
retn
			
mov	dword ptr [esp], offset	aMissingArgum_0
call	_silc_format
mov	[esp+4], eax	
mov	dword ptr [esp], 3 
call	_silc_log_output
xor	esi, esi
mov	eax, esi
add	esp, 4Ch
pop	ske_0
pop	esi
pop	stream_0
leave
retn
lea	eax, [ske_0+64h]
mov	[ebp+fsm], eax
mov	eax, [ske_0+60h]
mov	[esp+10h], eax	
mov	[esp+0Ch], ske_0 
mov	dword ptr [esp+8], offset _silc_ske_finished 
mov	[esp+4], ske_0	
mov	eax, [ebp+fsm]
mov	[esp], eax	
call	_silc_fsm_init
test	al, al
jz	short loc_6422C47C
mov	eax, [ebp+rekey]
mov	[ske_0+5Ch], eax
mov	al, [ske_0+0B8h]
and	eax, 0FFFFFFFDh
or	eax, 4
mov	[ske_0+0B8h], al
inc	word ptr [ske_0+0B6h]
mov	[ske_0], stream_0
mov	dword ptr [esp+24h], 0FFFFFFFFh
mov	dword ptr [esp+20h], 3
mov	dword ptr [esp+1Ch], 2
mov	dword ptr [esp+18h], 0Fh
mov	dword ptr [esp+14h], 17h
mov	dword ptr [esp+10h], 16h
mov	dword ptr [esp+0Ch], 0F4240h 
mov	[esp+8], ske_0	
mov	dword ptr [esp+4], offset _silc_ske_stream_cbs 
mov	[esp], stream_0	
call	_silc_packet_stream_link
mov	dword ptr [esp+4], offset _silc_ske_st_rekey_initiator_start 
mov	eax, [ebp+fsm]
mov	[esp], eax	
call	_silc_fsm_start
jmp	loc_6422C47E
align 4
public _silc_ske_responder
push	ebp
mov	ebp, esp
push	edi
push	esi
push	ebx
sub	esp, 4Ch
mov	ebx, [ebp+ske]
mov	edi, [ebp+stream]
mov	edx, [ebp+params]
test	ebx, ebx
jnz	short loc_6422C588
			
xor	esi, esi
mov	eax, esi
add	esp, 4Ch
pop	ske_0
pop	esi
pop	stream_0
leave
retn
align 4
test	stream_0, stream_0
jz	short loc_6422C57A
test	params_0, params_0
jz	short loc_6422C57A
mov	eax, [params_0]
test	eax, eax
jz	short loc_6422C57A
lea	esi, [ske_0+90h]
mov	[esp+0Ch], ske_0 
mov	dword ptr [esp+8], 0 
mov	dword ptr [esp+4], offset _silc_ske_abort 
mov	[esp], esi	
mov	[ebp+var_20], params_0
call	_silc_async_init
test	al, al
jz	short loc_6422C57A
lea	eax, [ske_0+64h]
mov	[ebp+fsm], eax
mov	eax, [ske_0+60h]
mov	[esp+10h], eax	
mov	[esp+0Ch], ske_0 
mov	dword ptr [esp+8], offset _silc_ske_finished 
mov	[esp+4], ske_0	
mov	eax, [ebp+fsm]
mov	[esp], eax	
call	_silc_fsm_init
test	al, al
mov	edx, [ebp+var_20]
jz	short loc_6422C57A
or	byte ptr [ske_0+0B8h], 2
mov	ecx, [edx+4]
mov	[ske_0+54h], ecx
mov	ax, [edx+0Ah]
test	ax, ax
jnz	short loc_6422C606
mov	al, 1Eh
mov	[ske_0+0B4h], ax
and	cl, 1
jz	short loc_6422C61C
mov	eax, [params_0+8]
mov	[ske_0+0A0h], ax
mov	eax, [params_0]
mov	[ske_0+3Ch], eax
test	eax, eax
jz	loc_6422C57A
inc	word ptr [ske_0+0B6h]
mov	[ske_0], stream_0
mov	dword ptr [esp+20h], 0FFFFFFFFh
mov	dword ptr [esp+1Ch], 3
mov	dword ptr [esp+18h], 2
mov	dword ptr [esp+14h], 0Eh
mov	dword ptr [esp+10h], 0Dh
mov	dword ptr [esp+0Ch], 0F4240h 
mov	[esp+8], ske_0	
mov	dword ptr [esp+4], offset _silc_ske_stream_cbs 
mov	[esp], stream_0	
call	_silc_packet_stream_link
mov	dword ptr [esp+4], offset _silc_ske_st_responder_start 
mov	eax, [ebp+fsm]
mov	[esp], eax	
call	_silc_fsm_start
jmp	loc_6422C57C
align 10h
			
push	ebp
mov	ebp, esp
push	edi
push	esi
push	ebx
sub	esp, 3Ch
mov	ebx, ske
mov	edi, type
mov	esi, [ebp+data_len]
mov	[esp+10h], esi	
mov	ske, [ebp+data]
mov	[esp+0Ch], eax	
movzx	eax, cl
mov	[esp+8], flags	
movzx	flags, dl
mov	[esp+4], type	
mov	type, [ske]
mov	[esp], eax	
mov	[ebp+var_24], dl
mov	[ebp+var_20], ecx
call	_silc_packet_send
mov	[ebp+ret], al
mov	eax, [ske]
mov	[esp], eax	
call	_silc_packet_stream_is_udp
test	al, al
mov	dl, [ebp+var_24]
jz	loc_6422C7A0
cmp	dl, 3
jz	loc_6422C7A0
cmp	dl, 16h
jz	loc_6422C7A0
mov	eax, [ske+0ACh]
mov	[esp], eax	
call	_silc_free
mov	eax, edi
mov	[ske+0A8h], al
mov	ecx, [ebp+var_20]
mov	[ske+0A9h], cl
mov	[esp+4], data_len_0 
mov	eax, [ebp+data]
mov	[esp], eax	
call	_silc_memdup
mov	[ske+0ACh], eax
mov	[ske+0B0h], data_len_0
mov	eax, [ske]
mov	[esp], eax	
call	_silc_packet_stream_is_udp
test	al, al
jz	short loc_6422C7A0
mov	edx, [ske+0ACh]
test	edx, edx
jz	short loc_6422C77F
mov	dword ptr [esp+18h], 1 
mov	dword ptr [esp+14h], 0 
movzx	eax, word ptr [ske+0A2h]
mov	[esp+10h], eax	
mov	[esp+0Ch], ske	
mov	dword ptr [esp+8], offset _silc_ske_packet_send_retry 
mov	dword ptr [esp+4], 0 
mov	eax, [ske+60h]
mov	[esp], eax	
call	_silc_schedule_task_add
mov	si, [ske+0A2h]
shl	esi, 1
mov	eax, [ske+4]
mov	[esp], eax	
call	_silc_rng_get_rn16
and	eax, 1
lea	esi, [eax+esi]
mov	[ske+0A2h], si
			
mov	al, [ebp+ret]
add	esp, 3Ch
pop	ske
pop	esi
pop	edi
leave
retn
align 4
public _silc_ske_st_rekey_initiator_start
push	ebp
mov	ebp, esp
push	esi
push	ebx
sub	esp, 20h
mov	esi, [ebp+fsm]
mov	ebx, [ebp+fsm_context]
test	byte ptr [ebx+0B8h], 1
jnz	loc_6422C8B8
mov	dword ptr [esp+18h], 1 
mov	dword ptr [esp+14h], 0 
mov	dword ptr [esp+10h], 1Eh 
mov	[esp+0Ch], fsm_context_0 
mov	dword ptr [esp+8], offset _silc_ske_timeout 
mov	dword ptr [esp+4], 0 
mov	eax, [fsm_context_0+60h]
mov	[esp], eax	
call	_silc_schedule_task_add
mov	dword ptr [esp+4], 1Ch 
mov	dword ptr [esp], 1 
call	_silc_calloc
mov	[fsm_context_0+18h], eax
test	eax, eax
jz	short loc_6422C898
add	eax, 10h
mov	[esp+4], eax	
mov	eax, [fsm_context_0+5Ch]
mov	eax, [eax+4]
mov	[esp], eax	
call	_silc_hash_alloc
test	al, al
jz	short loc_6422C898
mov	dword ptr [esp+4], 0 
mov	dword ptr [esp], 0 
xor	ecx, ecx	
mov	edx, 16h	
mov	eax, fsm_context_0 
call	_silc_ske_packet_send
test	al, al
jz	loc_6422C8F0
mov	eax, [fsm_context_0+5Ch]
cmp	byte ptr [eax+0Bh], 0
jns	short loc_6422C8D4
mov	edx, [fsm_context_0+18h]
add	edx, 4
mov	[esp+4], edx	
mov	ax, [eax+0Ah]
shr	ax, 7
movzx	eax, al
mov	[esp], eax	
call	_silc_ske_group_get_by_number
test	al, al
jnz	loc_6422C90C
mov	dword ptr [esp+4], offset _silc_ske_st_initiator_phase2	
mov	[esp], fsm_0	
call	_silc_fsm_next
jmp	short loc_6422C8AF
align 4
			
mov	dword ptr [fsm_context_0+14h], 10h
mov	dword ptr [esp+4], offset _silc_ske_st_initiator_error 
mov	[esp], fsm_0	
call	_silc_fsm_next
			
xor	eax, eax
add	esp, 20h
pop	fsm_context_0
pop	fsm_0
leave
retn
mov	dword ptr [esp+4], offset _silc_ske_st_initiator_aborted
mov	[esp], fsm_0	
call	_silc_fsm_next
xor	eax, eax
add	esp, 20h
pop	fsm_context_0
pop	fsm_0
leave
retn
align 4
mov	dword ptr [esp+4], offset _silc_ske_st_rekey_initiator_done 
mov	[esp], fsm_0	
call	_silc_fsm_next
xor	eax, eax
add	esp, 20h
pop	fsm_context_0
pop	fsm_0
leave
retn
align 10h
mov	dword ptr [fsm_context_0+14h], 1
mov	dword ptr [esp+4], offset _silc_ske_st_initiator_error 
mov	[esp], fsm_0	
call	_silc_fsm_next
jmp	short loc_6422C8AF
align 4
mov	dword ptr [esp+4], offset _silc_ske_st_initiator_error 
mov	[esp], fsm_0	
call	_silc_fsm_next
jmp	short loc_6422C8AF
align 10h
			
push	ebp
mov	ebp, esp
push	edi
push	esi
push	ebx
sub	esp, 2Ch
mov	ebx, len
mov	edi, [ebp+rnd]
test	len, len
jnz	short loc_6422C940
mov	bl, 1
mov	string,	status
add	esp, 2Ch
pop	status
pop	string
pop	rnd_0
leave
retn
align 10h
lea	len, [len-1]
shr	l, 3
mov	[esp+4], l	
mov	ske, [ske+4]
mov	[esp], eax	
mov	[ebp+mp2], n
mov	[ebp+var_1C], l
call	_silc_rng_get_rn_data
mov	esi, eax
test	eax, eax
mov	edx, [ebp+mp2]
mov	ecx, [ebp+var_1C]
jz	short loc_6422C9D4
mov	[esp+8], rnd_0	
mov	[esp+4], ecx	
mov	[esp], string	
mov	[ebp+mp2], edx
mov	[ebp+var_1C], l
call	_silc_mp_bin2mp
mov	[esp+8], len	
mov	[esp+4], rnd_0	
mov	[esp], rnd_0	
call	_silc_mp_mod_2exp
mov	dword ptr [esp+4], 1 
mov	[esp], rnd_0	
call	_silc_mp_cmp_ui
mov	len, eax
mov	edx, [ebp+mp2]
mov	[esp+4], edx	
mov	[esp], rnd_0	
call	_silc_mp_cmp
test	eax, eax
mov	ecx, [ebp+var_1C]
js	short loc_6422C9E0
mov	ebx, 1
mov	al, 46h
mov	rnd_0, string
rep stosb
mov	[esp], esi	
call	_silc_free
mov	eax, status
add	esp, 2Ch
pop	status
pop	esi
pop	string
leave
retn
align 4
mov	len, 10h
jmp	loc_6422C934
align 10h
shr	ebx, 1Fh
jmp	short loc_6422C9BA
align 4
			
push	ebp
mov	ebp, esp
push	edi
push	esi
push	ebx
sub	esp, 4Ch
mov	eax, [ebp+status]
mov	[ebp+var_20], eax
mov	edi, [ebp+keys]
mov	edx, [ebp+context]
mov	[ebp+var_1C], edx
mov	eax, [ebp+find]
mov	[esp], eax	
call	_silc_skr_find_free
cmp	[ebp+var_20], 1
jz	short loc_6422CA48
mov	ecx, [ebp+var_1C]
mov	edx, [ecx+0Ch]
mov	eax, [edx]
test	eax, eax
jz	short loc_6422CA48
mov	[ebp+context], 0
mov	[ebp+keys], offset _silc_ske_pk_verified
mov	edx, [edx+8]
mov	[ebp+status], edx
mov	edx, [ecx+18h]
mov	edx, [edx+14h]
mov	[ebp+find], edx
mov	[ebp+repository], ecx
add	esp, 4Ch
pop	ebx
pop	esi
pop	keys_0
leave
jmp	eax
align 4
			
test	keys_0,	keys_0
jz	short loc_6422CAB3
mov	ebx, [keys_0]
mov	[keys_0+8], ebx
and	byte ptr [keys_0+10h], 0FDh
test	ebx, ebx
jz	short loc_6422CAAB
lea	esi, [esi+0]
test	byte ptr [keys_0+10h], 2
jz	loc_6422CAF8
movzx	eax, word ptr [keys_0+0Eh]
mov	eax, [ebx+eax]
mov	[keys_0+8], eax
mov	eax, [keys_0]
test	eax, eax
jz	short loc_6422CA93
cmp	ebx, eax
jz	loc_6422CB47
movzx	esi, word ptr [keys_0+0Ch]
jmp	short loc_6422CA8A
cmp	ebx, ecx
jz	short loc_6422CB04
mov	eax, ecx
lea	edx, [eax+esi]
mov	ecx, [edx]
test	ecx, ecx
jnz	short loc_6422CA84
cmp	ebx, [keys_0+4]
jz	loc_6422CB35
			
mov	[esp], ebx	
call	_silc_free
mov	ebx, [keys_0+8]
test	ebx, ebx
jnz	short loc_6422CA5C
mov	[esp], keys_0	
call	_silc_free
xor	eax, eax
cmp	[ebp+var_20], 1
setnz	al
shl	eax, 3
mov	esi, [ebp+var_1C]
mov	[esi+14h], eax
mov	al, [esi+8Ch]
mov	dl, al
and	edx, 0FFFFFFFBh
mov	[esi+8Ch], dl
test	al, 4
jz	short loc_6422CAE2
add	esp, 4Ch
pop	ebx
pop	esi
pop	keys_0
leave
retn
mov	eax, esi
add	eax, 64h
mov	[ebp+repository], eax
add	esp, 4Ch
pop	ebx
pop	esi
pop	keys_0
leave
jmp	_silc_fsm_continue
align 4
movzx	eax, word ptr [keys_0+0Ch]
mov	eax, [ebx+eax]
jmp	loc_6422CA6D
mov	[ebp+var_3C], edx
mov	ecx, [ebx+esi]
mov	esi, [ebp+var_3C]
mov	[esi], ecx
test	ecx, ecx
jz	short loc_6422CB23
test	byte ptr [keys_0+10h], 1
jz	short loc_6422CB23
movzx	edx, word ptr [keys_0+0Eh]
mov	esi, [ebx+edx]
mov	[ecx+edx], esi
			
cmp	ebx, [keys_0+8]
jz	short loc_6422CB3D
sub	dword ptr [keys_0+10h],	4
cmp	ebx, [keys_0+4]
jnz	loc_6422CA9C
mov	[keys_0+4], eax
jmp	loc_6422CA9C
mov	ecx, [ebp+var_3C]
mov	edx, [ecx]
mov	[keys_0+8], edx
jmp	short loc_6422CB28
movzx	esi, word ptr [keys_0+0Ch]
mov	[ebp+var_3C], keys_0
xor	eax, eax
jmp	short loc_6422CB07
align 4
public _silc_ske_st_initiator_start
push	ebp
mov	ebp, esp
push	esi
push	ebx
sub	esp, 30h
mov	esi, [ebp+fsm]
mov	ebx, [ebp+fsm_context]
test	byte ptr [ebx+0B8h], 1
jnz	loc_6422CC30
lea	eax, [ebp+payload_buf]
mov	[esp+8], eax	
mov	eax, [fsm_context_0+1Ch]
mov	[esp+4], eax	
mov	[esp], fsm_context_0 
call	_silc_ske_payload_start_encode
test	al, al
jnz	loc_6422CC10
mov	status,	[ebp+payload_buf]
mov	[fsm_context_0+28h], eax
mov	edx, [eax+4]
mov	eax, [eax+8]
sub	eax, edx
mov	[esp+4], eax	
mov	[esp], edx	
xor	ecx, ecx	
mov	edx, 0Dh	
mov	eax, fsm_context_0 
call	_silc_ske_packet_send
test	al, al
jz	loc_6422CC4C
mov	dword ptr [esp+18h], 1 
mov	dword ptr [esp+14h], 0 
movzx	eax, word ptr [fsm_context_0+0B4h]
mov	[esp+10h], eax	
mov	[esp+0Ch], fsm_context_0 
mov	dword ptr [esp+8], offset _silc_ske_timeout 
mov	dword ptr [esp+4], 0 
mov	eax, [fsm_context_0+60h]
mov	[esp], eax	
call	_silc_schedule_task_add
mov	dword ptr [esp+4], offset _silc_ske_st_initiator_phase1	
mov	[esp], fsm_0	
call	_silc_fsm_next
mov	eax, 2
add	esp, 30h
pop	fsm_context_0
pop	fsm_0
leave
retn
align 10h
movzx	status,	al
mov	[fsm_context_0+14h], status
mov	dword ptr [esp+4], offset _silc_ske_st_initiator_error 
mov	[esp], fsm_0	
call	_silc_fsm_next
xor	eax, eax
add	esp, 30h
pop	fsm_context_0
pop	fsm_0
leave
retn
align 10h
mov	dword ptr [esp+4], offset _silc_ske_st_initiator_aborted 
mov	[esp], fsm_0	
call	_silc_fsm_next
xor	eax, eax
add	esp, 30h
pop	fsm_context_0
pop	fsm_0
leave
retn
align 4
mov	dword ptr [fsm_context_0+14h], 1
mov	dword ptr [esp+4], offset _silc_ske_st_initiator_error 
mov	[esp], fsm_0	
call	_silc_fsm_next
xor	eax, eax
add	esp, 30h
pop	fsm_context_0
pop	fsm_0
leave
retn
public _silc_ske_initiator
push	ebp
mov	ebp, esp
push	edi
push	esi
push	ebx
sub	esp, 4Ch
mov	esi, [ebp+ske]
test	esi, esi
jnz	short loc_6422CC88
			
xor	ebx, ebx
mov	eax, ebx
add	esp, 4Ch
pop	ebx
pop	ske_0
pop	edi
leave
retn
mov	edi, [ebp+stream]
test	edi, edi
jz	short loc_6422CC7C
mov	ebx, [ebp+params]
test	ebx, ebx
jz	short loc_6422CC7C
mov	eax, [ebp+params]
mov	ecx, [eax]
test	ecx, ecx
jz	short loc_6422CC7C
lea	ebx, [ske_0+90h]
mov	[esp+0Ch], ske_0 
mov	dword ptr [esp+8], 0 
mov	dword ptr [esp+4], offset _silc_ske_abort 
mov	[esp], ebx	
call	_silc_async_init
test	al, al
jz	short loc_6422CC7C
lea	edx, [ske_0+64h]
mov	[ebp+fsm], edx
mov	eax, [ske_0+60h]
mov	[esp+10h], eax	
mov	[esp+0Ch], ske_0 
mov	dword ptr [esp+8], offset _silc_ske_finished 
mov	[esp+4], ske_0	
mov	[esp], edx	
call	_silc_fsm_init
test	al, al
jz	short loc_6422CC7C
mov	ecx, [ebp+params]
mov	ecx, [ecx+4]
mov	[ebp+var_1C], ecx
and	cl, 1
jz	short loc_6422CD09
mov	edi, [ebp+params]
mov	eax, [edi+8]
mov	[ske_0+0A0h], ax
cmp	[ebp+start_payload], 0
jz	loc_6422CD9E
mov	ecx, [ebp+params]
mov	ax, [ecx+0Ah]
test	ax, ax
jnz	short loc_6422CD21
mov	al, 1Eh
mov	[ske_0+0B4h], ax
mov	edi, [ebp+start_payload]
mov	[ske_0+1Ch], edi
mov	edx, [ebp+params]
mov	eax, [edx]
mov	[ske_0+3Ch], eax
inc	word ptr [ske_0+0B6h]
mov	ecx, [ebp+stream]
mov	[ske_0], ecx
mov	dword ptr [esp+20h], 0FFFFFFFFh
mov	dword ptr [esp+1Ch], 3
mov	dword ptr [esp+18h], 2
mov	dword ptr [esp+14h], 0Fh
mov	dword ptr [esp+10h], 0Dh
mov	dword ptr [esp+0Ch], 0F4240h 
mov	[esp+8], ske_0	
mov	dword ptr [esp+4], offset _silc_ske_stream_cbs 
mov	[esp], ecx	
call	_silc_packet_stream_link
mov	dword ptr [esp+4], offset _silc_ske_st_initiator_start 
mov	edi, [ebp+fsm]
mov	[esp], edi	
call	_silc_fsm_start
jmp	loc_6422CC7E
mov	eax, [ebp+params]
mov	eax, [eax]
mov	[ebp+var_20], eax
mov	dword ptr [esp+4], 40h 
mov	dword ptr [esp], 1 
call	_silc_calloc
mov	[ebp+start_payload], eax
mov	dl, byte ptr [ebp+var_1C]
mov	[eax], dl
mov	dword ptr [esp+4], 1 
mov	dword ptr [esp], 10h 
call	_silc_calloc
mov	edi, eax
mov	ecx, [ebp+start_payload]
mov	[ecx+4], eax
xor	edx, edx
mov	eax, [ske_0+4]
mov	[esp], eax	
mov	[ebp+var_28], edx
call	_silc_rng_get_byte_fast
mov	edx, [ebp+var_28]
mov	[edi+edx], al
inc	edx
cmp	edx, 10h
jz	short loc_6422CE02
mov	eax, [ebp+start_payload]
mov	edi, [eax+4]
jmp	short loc_6422CDE0
mov	edx, [ebp+start_payload]
mov	word ptr [edx+8], 10h
test	byte ptr [ebp+var_1C], 1
jz	short loc_6422CE33
mov	eax, [ske_0+0A0h]
test	ax, ax
jz	short loc_6422CE33
mov	ecx, edx
mov	edx, [edx+4]
shr	ax, 8
mov	[edx], al
mov	edx, [ecx+4]
mov	eax, [ske_0+0A0h]
mov	[edx+1], al
			
mov	edi, [ebp+var_20]
mov	[esp], edi	
call	_strdup
mov	edx, [ebp+start_payload]
mov	[edx+0Ch], eax
or	ecx, 0FFFFFFFFh
xor	eax, eax
repne scasb
not	ecx
dec	ecx
mov	[edx+10h], cx
call	_silc_ske_get_supported_groups
mov	ecx, [ebp+start_payload]
mov	[ecx+14h], eax
or	ecx, 0FFFFFFFFh
mov	edi, eax
xor	eax, eax
repne scasb
not	ecx
dec	ecx
mov	eax, [ebp+start_payload]
mov	[eax+12h], cx
call	_silc_pkcs_get_supported
mov	ecx, [ebp+start_payload]
mov	[ecx+1Ch], eax
or	ecx, 0FFFFFFFFh
mov	edi, eax
xor	eax, eax
repne scasb
not	ecx
dec	ecx
mov	eax, [ebp+start_payload]
mov	[eax+18h], cx
call	_silc_cipher_get_supported
mov	ecx, [ebp+start_payload]
mov	[ecx+24h], eax
or	ecx, 0FFFFFFFFh
mov	edi, eax
xor	eax, eax
repne scasb
not	ecx
dec	ecx
mov	eax, [ebp+start_payload]
mov	[eax+20h], cx
call	_silc_hash_get_supported
mov	ecx, [ebp+start_payload]
mov	[ecx+2Ch], eax
or	ecx, 0FFFFFFFFh
mov	edi, eax
xor	eax, eax
repne scasb
not	ecx
dec	ecx
mov	eax, [ebp+start_payload]
mov	[eax+28h], cx
call	_silc_hmac_get_supported
mov	ecx, [ebp+start_payload]
mov	[ecx+34h], eax
or	ecx, 0FFFFFFFFh
mov	edi, eax
xor	eax, eax
repne scasb
not	ecx
dec	ecx
mov	eax, [ebp+start_payload]
mov	[eax+30h], cx
mov	dword ptr [esp], offset	aNone 
call	_strdup
mov	edx, [ebp+start_payload]
mov	[edx+3Ch], eax
mov	word ptr [edx+38h], 4
mov	eax, [edx+10h]
add	ax, [edx+12h]
add	eax, 26h
add	eax, [edx+18h]
add	eax, [edx+20h]
add	eax, [edx+28h]
add	eax, [edx+30h]
mov	[edx+2], ax
jmp	loc_6422CD13
align 10h
public _silc_ske_timeout
			
push	ebp
mov	ebp, esp
push	ebx
sub	esp, 14h
mov	eax, [ebp+context]
mov	dword ptr [ske+50h], 0
mov	dword ptr [ske+14h], 11h
mov	dl, [ske+0B8h]
test	dl, 8
jnz	short loc_6422CF94
or	edx, 8
mov	[ske+0B8h], dl
and	edx, 2
jnz	short loc_6422CF74
mov	dword ptr [esp+4], offset _silc_ske_st_initiator_failure 
lea	ebx, [ske+64h]
mov	[esp], ebx	
call	_silc_fsm_next
mov	[ebp+schedule],	ebx
add	esp, 14h
pop	ebx
leave
jmp	_silc_fsm_continue_sync
align 4
mov	dword ptr [esp+4], offset _silc_ske_st_responder_failure 
lea	ebx, [ske+64h]
mov	[esp], ebx	
call	_silc_fsm_next
mov	[ebp+schedule],	ebx
add	esp, 14h
pop	ebx
leave
jmp	_silc_fsm_continue_sync
lea	ebx, [ske+64h]
mov	[ebp+schedule],	ebx
add	esp, 14h
pop	ebx
leave
jmp	_silc_fsm_continue_sync
			
push	ebp
mov	ebp, esp
push	esi
push	ebx
sub	esp, 10h
mov	esi, len
mov	dword ptr [esp+4], 10h 
mov	dword ptr [esp], 1 
call	_silc_calloc
mov	ebx, eax
test	eax, eax
jz	short loc_6422CFF9
test	len, len
jz	short loc_6422D002
mov	dword ptr [esp+4], 1 
mov	[esp], len	
call	_silc_calloc
mov	[sb], eax
test	eax, eax
jz	short loc_6422D007
mov	[sb+4],	eax
mov	[sb+8],	eax
lea	edx, [eax+len]
mov	[sb+0Ch], edx
mov	ecx, edx
sub	ecx, eax
cmp	len, ecx
ja	short loc_6422CFF9
mov	[sb+8],	edx
			
mov	eax, sb
add	esp, 10h
pop	sb
pop	len
leave
retn
mov	edx, [sb+8]
jmp	short loc_6422CFF6
xor	sb, sb
jmp	short loc_6422CFF9
align 4
public _silc_ske_process_key_material_data
			
			
push	ebp
mov	ebp, esp
push	edi
push	esi
push	ebx
sub	esp, 17Ch
mov	ebx, [ebp+req_iv_len]
test	ebx, ebx
jnz	short loc_6422D03C
			
mov	[ebp+key], 0
			
mov	dist, [ebp+key]
add	esp, 17Ch
pop	dist
pop	esi
pop	edi
leave
retn
align 4
mov	edx, [ebp+req_enc_key_len]
test	edx, edx
jz	short loc_6422D01F
mov	eax, [ebp+req_hmac_key_len]
test	eax, eax
jz	short loc_6422D01F
mov	dword ptr [esp+4], 24h 
mov	dword ptr [esp], 1 
call	_silc_calloc
mov	[ebp+key], eax
test	eax, eax
jz	short loc_6422D029
mov	eax, [ebp+data_len]
inc	eax		
call	_silc_buffer_alloc_size_0
mov	[ebp+buf], eax
test	eax, eax
jz	short loc_6422D01F
mov	eax, [ebp+req_enc_key_len]
shr	eax, 3
mov	[ebp+items], eax
mov	dword ptr [esp+18h], 1Dh
mov	edx, [ebp+data_len]
mov	[esp+14h], edx
mov	ecx, [ebp+data]
mov	[esp+10h], ecx
mov	dword ptr [esp+0Ch], 0Ch
mov	dword ptr [esp+8], 0
mov	dword ptr [esp+4], 1
mov	esi, [ebp+buf]
mov	[esp], esi	
call	_silc_buffer_format
lea	edi, [ebp+hashd]
mov	[ebp+var_15C], edi
mov	ecx, 10h
xor	eax, eax
rep stosd
mov	eax, [esi+4]
mov	byte ptr [eax],	0
mov	edx, [esi+4]
lea	ecx, [ebp+hashd]
mov	[esp+0Ch], ecx	
mov	eax, [esi+8]
sub	eax, edx
mov	[esp+8], eax	
mov	[esp+4], edx	
mov	esi, [ebp+hash]
mov	[esp], esi	
call	_silc_hash_make
mov	dword ptr [esp+4], 1 
mov	[esp], req_iv_len_0 
call	_silc_calloc
mov	edi, [ebp+key]
mov	[edi], eax
mov	edi, eax
mov	esi, [ebp+var_15C]
mov	ecx, req_iv_len_0
rep movsb
mov	cl, 10h
mov	edi, [ebp+var_15C]
xor	eax, eax
rep stosd
mov	edx, [ebp+buf]
mov	eax, [edx+4]
mov	byte ptr [eax],	1
mov	ecx, [ebp+buf]
mov	edx, [ecx+4]
lea	esi, [ebp+hashd]
mov	[esp+0Ch], esi	
mov	eax, [ecx+8]
sub	eax, edx
mov	[esp+8], eax	
mov	[esp+4], edx	
mov	edi, [ebp+hash]
mov	[esp], edi	
call	_silc_hash_make
mov	dword ptr [esp+4], 1 
mov	[esp], ebx	
call	_silc_calloc
mov	edx, [ebp+key]
mov	[edx+4], eax
mov	edi, eax
mov	esi, [ebp+var_15C]
mov	ecx, req_iv_len_0
rep movsb
mov	eax, [ebp+key]
mov	[eax+8], ebx
mov	edx, [ebp+buf]
mov	eax, [edx+4]
mov	byte ptr [eax],	2
mov	req_iv_len_0, [ebp+items]
cmp	[ebp+req_hmac_key_len],	ecx
jb	loc_6422D3A4
mov	ecx, 10h
mov	edi, [ebp+var_15C]
xor	eax, eax
rep stosd
mov	eax, [ebp+buf]
mov	edx, [eax+4]
lea	ecx, [ebp+hashd]
mov	[esp+0Ch], ecx	
mov	eax, [eax+8]
sub	eax, edx
mov	[esp+8], eax	
mov	[esp+4], edx	
mov	edi, [ebp+hash]
mov	[esp], edi	
call	_silc_hash_make
mov	dword ptr [esp+4], 1 
mov	eax, [ebp+items]
mov	[esp], eax	
call	_silc_calloc
mov	edx, [ebp+key]
mov	[edx+0Ch], eax
mov	edi, eax
mov	esi, [ebp+var_15C]
mov	ecx, [ebp+items]
rep movsb
mov	edx, [ebp+req_enc_key_len]
mov	eax, [ebp+key]
mov	[eax+14h], edx
mov	enc_key_len, [ebp+buf]
mov	eax, [ecx+4]
mov	byte ptr [eax],	3
mov	ecx, 10h
mov	edi, [ebp+var_15C]
xor	eax, eax
rep stosd
mov	eax, [ebp+buf]
mov	edx, [eax+4]
lea	ecx, [ebp+hashd]
mov	[esp+0Ch], ecx	
mov	eax, [eax+8]
sub	eax, edx
mov	[esp+8], eax	
mov	[esp+4], edx	
mov	edi, [ebp+hash]
mov	[esp], edi	
call	_silc_hash_make
mov	dword ptr [esp+4], 1 
mov	eax, [ebp+items]
mov	[esp], eax	
call	_silc_calloc
mov	edx, [ebp+key]
mov	[edx+10h], eax
mov	edi, eax
mov	esi, [ebp+var_15C]
mov	ecx, [ebp+items]
rep movsb
mov	edx, [ebp+req_enc_key_len]
mov	eax, [ebp+key]
mov	[eax+14h], edx
xor	dist, dist
mov	enc_key_len, 10h
mov	edi, [ebp+var_15C]
mov	eax, ebx
rep stosd
mov	edx, [ebp+buf]
mov	eax, [edx+4]
mov	byte ptr [eax],	4
mov	ecx, [ebp+buf]
mov	edx, [ecx+4]
lea	esi, [ebp+hashd]
mov	[esp+0Ch], esi	
mov	eax, [ecx+8]
sub	eax, edx
mov	[esp+8], eax	
mov	[esp+4], edx	
mov	edi, [ebp+hash]
mov	[esp], edi	
call	_silc_hash_make
mov	dword ptr [esp+4], 1 
mov	eax, [ebp+req_hmac_key_len]
mov	[esp], eax	
call	_silc_calloc
mov	edx, [ebp+key]
mov	[edx+18h], eax
mov	edi, eax
mov	esi, [ebp+var_15C]
mov	ecx, [ebp+req_hmac_key_len]
rep movsb
mov	cl, 10h
mov	edi, [ebp+var_15C]
mov	eax, ebx
rep stosd
mov	edx, [ebp+buf]
mov	eax, [edx+4]
mov	byte ptr [eax],	5
mov	ecx, [ebp+buf]
mov	edx, [ecx+4]
lea	esi, [ebp+hashd]
mov	[esp+0Ch], esi	
mov	eax, [ecx+8]
sub	eax, edx
mov	[esp+8], eax	
mov	[esp+4], edx	
mov	edi, [ebp+hash]
mov	[esp], edi	
call	_silc_hash_make
mov	dword ptr [esp+4], 1 
mov	eax, [ebp+req_hmac_key_len]
mov	[esp], eax	
call	_silc_calloc
mov	edx, [ebp+key]
mov	[edx+1Ch], eax
mov	edi, eax
mov	esi, [ebp+var_15C]
mov	ecx, [ebp+req_hmac_key_len]
rep movsb
mov	edx, [ebp+req_hmac_key_len]
mov	eax, [ebp+key]
mov	[eax+20h], edx
mov	cl, 10h
mov	edi, [ebp+var_15C]
mov	eax, ebx
rep stosd
mov	eax, [ebp+buf]	
call	_silc_buffer_clear_0
mov	eax, [ebp+buf]	
call	_silc_buffer_free_4
jmp	loc_6422D029
imul	esi, [ebp+req_hmac_key_len], 3
mov	[ebp+var_13C], esi
cmp	ecx, esi
ja	loc_6422D01F
lea	edi, [ebp+k3]
mov	[ebp+var_160], edi
mov	ecx, 10h
xor	eax, eax
rep stosd
mov	ecx, [ebp+buf]
mov	edx, [ecx+4]
lea	esi, [ebp+k3]
mov	[esp+0Ch], esi	
mov	eax, [ecx+8]
sub	eax, edx
mov	[esp+8], eax	
mov	[esp+4], edx	
mov	edi, [ebp+hash]
mov	[esp], edi	
call	_silc_hash_make
mov	eax, [ebp+req_hmac_key_len]
add	eax, [ebp+data_len] 
mov	[ebp+len], eax
call	_silc_buffer_alloc_size_0
mov	req_iv_len_0, eax
test	eax, eax
jz	loc_6422D01F
mov	dword ptr [esp+1Ch], 1Dh
mov	edx, [ebp+req_hmac_key_len]
mov	[esp+18h], edx
mov	[esp+14h], esi
mov	dword ptr [esp+10h], 0Ch
mov	esi, [ebp+data_len]
mov	[esp+0Ch], esi
mov	edi, [ebp+data]
mov	[esp+8], edi
mov	dword ptr [esp+4], 0Ch
mov	[esp], dist	
call	_silc_buffer_format
lea	eax, [ebp+k2]
mov	[ebp+var_164], eax
mov	ecx, 10h
mov	edi, eax
xor	eax, eax
rep stosd
mov	edx, [dist+4]
lea	eax, [ebp+k2]
mov	[esp+0Ch], eax	
mov	eax, [dist+8]
sub	eax, edx
mov	[esp+8], eax	
mov	[esp+4], edx	
mov	edx, [ebp+hash]
mov	[esp], edx	
call	_silc_hash_make
mov	ecx, [ebp+len]
add	ecx, [ebp+req_hmac_key_len]
mov	[ebp+newsize], ecx
mov	edx, ecx	
mov	eax, dist	
call	_silc_buffer_realloc_0
mov	dist, eax
mov	eax, [eax+8]
mov	edx, [dist+0Ch]
sub	edx, eax
cmp	[ebp+req_hmac_key_len],	edx
ja	short loc_6422D4B3
add	eax, [ebp+req_hmac_key_len]
mov	[dist+8], eax
mov	edx, [dist+4]
sub	eax, edx
cmp	[ebp+len], eax
ja	short loc_6422D4C9
add	edx, [ebp+len]
mov	[dist+4], edx
mov	dword ptr [esp+10h], 1Dh
mov	esi, [ebp+req_hmac_key_len]
mov	[esp+0Ch], esi
lea	edi, [ebp+k2]
mov	[esp+8], edi
mov	dword ptr [esp+4], 0Ch
mov	[esp], dist	
call	_silc_buffer_format
mov	eax, [ebp+len]
neg	eax
mov	[ebp+var_144], eax
add	eax, [dist+4]
cmp	eax, [dist]
jb	short loc_6422D50A
mov	[dist+4], eax
lea	edx, [ebp+k1_0]
mov	[ebp+var_168], edx
mov	ecx, 10h
mov	edi, edx
xor	eax, eax
rep stosd
mov	edx, [dist+4]
lea	eax, [ebp+k1_0]
mov	[esp+0Ch], eax	
mov	eax, [dist+8]
sub	eax, edx
mov	[esp+8], eax	
mov	[esp+4], edx	
mov	edx, [ebp+hash]
mov	[esp], edx	
call	_silc_hash_make
mov	dword ptr [esp+4], 1 
mov	ecx, [ebp+var_13C]
mov	[esp], ecx	
call	_silc_calloc
mov	[ebp+ptr], eax
mov	edi, eax
mov	esi, [ebp+var_160]
mov	ecx, [ebp+req_hmac_key_len]
rep movsb
mov	esi, [ebp+var_164]
mov	req_hmac_key_len_0, [ebp+req_hmac_key_len]
rep movsb
mov	edi, [ebp+req_hmac_key_len]
shl	edi, 1
mov	[ebp+var_140], edi
mov	eax, [ebp+ptr]
add	eax, edi
mov	edi, eax
mov	esi, [ebp+var_168]
mov	req_hmac_key_len_0, [ebp+req_hmac_key_len]
rep movsb
mov	dword ptr [esp+4], 1 
mov	eax, [ebp+items]
mov	[esp], eax	
call	_silc_calloc
mov	edx, [ebp+key]
mov	[edx+0Ch], eax
mov	edi, eax
mov	esi, [ebp+ptr]
mov	ecx, [ebp+items]
rep movsb
mov	edx, [ebp+req_enc_key_len]
mov	eax, [ebp+key]
mov	[eax+14h], edx
xor	eax, eax
mov	edi, [ebp+ptr]
mov	enc_key_len, [ebp+var_13C]
rep stosb
mov	cl, 10h
mov	edi, [ebp+var_160]
xor	eax, eax
rep stosd
mov	cl, 10h
mov	edi, [ebp+var_164]
rep stosd
mov	cl, 10h
mov	edi, [ebp+var_168]
rep stosd
mov	eax, [ebp+ptr]
mov	[esp], eax	
call	_silc_free
mov	eax, dist	
call	_silc_buffer_clear_0
mov	eax, dist	
call	_silc_buffer_free_4
mov	edx, [ebp+buf]
mov	eax, [edx+4]
mov	byte ptr [eax],	3
mov	ecx, 10h
mov	edi, [ebp+var_168]
xor	eax, eax
rep stosd
mov	eax, [ebp+buf]
mov	edx, [eax+4]
lea	ecx, [ebp+k1_0]
mov	[esp+0Ch], ecx	
mov	eax, [eax+8]
sub	eax, edx
mov	[esp+8], eax	
mov	[esp+4], edx	
mov	edi, [ebp+hash]
mov	[esp], edi	
call	_silc_hash_make
mov	eax, [ebp+len]	
call	_silc_buffer_alloc_size_0
mov	dist, eax
test	eax, eax
jz	loc_6422D01F
mov	dword ptr [esp+1Ch], 1Dh
mov	ecx, [ebp+req_hmac_key_len]
mov	[esp+18h], ecx
lea	esi, [ebp+k1_0]
mov	[esp+14h], esi
mov	dword ptr [esp+10h], 0Ch
mov	edi, [ebp+data_len]
mov	[esp+0Ch], edi
mov	dist, [ebp+data]
mov	[esp+8], eax
mov	dword ptr [esp+4], 0Ch
mov	[esp], dist	
call	_silc_buffer_format
mov	ecx, 10h
mov	edi, [ebp+var_164]
xor	eax, eax
rep stosd
mov	edx, [dist+4]
lea	eax, [ebp+k2]
mov	[esp+0Ch], eax	
mov	eax, [dist+8]
sub	eax, edx
mov	[esp+8], eax	
mov	[esp+4], edx	
mov	edx, [ebp+hash]
mov	[esp], edx	
call	_silc_hash_make
mov	edx, [ebp+newsize] 
mov	eax, dist	
call	_silc_buffer_realloc_0
mov	dist, eax
mov	eax, [eax+8]
mov	edx, [dist+0Ch]
sub	edx, eax
cmp	[ebp+req_hmac_key_len],	edx
ja	short loc_6422D711
add	eax, [ebp+req_hmac_key_len]
mov	[dist+8], eax
mov	edx, [dist+4]
sub	eax, edx
cmp	[ebp+len], eax
ja	short loc_6422D727
add	edx, [ebp+len]
mov	[dist+4], edx
mov	dword ptr [esp+10h], 1Dh
mov	ecx, [ebp+req_hmac_key_len]
mov	[esp+0Ch], ecx
lea	esi, [ebp+k2]
mov	[esp+8], esi
mov	dword ptr [esp+4], 0Ch
mov	[esp], dist	
call	_silc_buffer_format
mov	eax, [ebp+var_144]
add	eax, [dist+4]
cmp	eax, [dist]
jb	short loc_6422D760
mov	[dist+4], eax
mov	ecx, 10h
mov	edi, [ebp+var_160]
xor	eax, eax
rep stosd
mov	edx, [dist+4]
lea	eax, [ebp+k3]
mov	[esp+0Ch], eax	
mov	eax, [dist+8]
sub	eax, edx
mov	[esp+8], eax	
mov	[esp+4], edx	
mov	edx, [ebp+hash]
mov	[esp], edx	
call	_silc_hash_make
mov	dword ptr [esp+4], 1 
mov	ecx, [ebp+var_13C]
mov	[esp], ecx	
call	_silc_calloc
mov	[ebp+var_124], eax
mov	edi, eax
mov	esi, [ebp+var_168]
mov	ecx, [ebp+req_hmac_key_len]
rep movsb
mov	esi, [ebp+var_164]
mov	req_hmac_key_len_0, [ebp+req_hmac_key_len]
rep movsb
mov	eax, [ebp+var_124]
add	eax, [ebp+var_140]
mov	edi, eax
mov	esi, [ebp+var_160]
mov	req_hmac_key_len_0, [ebp+req_hmac_key_len]
rep movsb
mov	dword ptr [esp+4], 1 
mov	eax, [ebp+items]
mov	[esp], eax	
call	_silc_calloc
mov	edx, [ebp+key]
mov	[edx+10h], eax
mov	edi, eax
mov	esi, [ebp+var_124]
mov	ecx, [ebp+items]
rep movsb
mov	edx, [ebp+req_enc_key_len]
mov	eax, [ebp+key]
mov	[eax+14h], edx
xor	eax, eax
mov	edi, [ebp+var_124]
mov	enc_key_len, [ebp+var_13C]
rep stosb
mov	cl, 10h
mov	edi, [ebp+var_168]
xor	eax, eax
rep stosd
mov	cl, 10h
mov	edi, [ebp+var_164]
rep stosd
mov	cl, 10h
mov	edi, [ebp+var_160]
rep stosd
mov	eax, [ebp+var_124]
mov	[esp], eax	
call	_silc_free
mov	eax, dist	
call	_silc_buffer_clear_0
mov	eax, dist	
call	_silc_buffer_free_4
jmp	loc_6422D29A
align 10h
public _silc_ske_st_rekey_responder_done
			
			
push	ebp
mov	ebp, esp
push	edi
push	esi
push	ebx
sub	esp, 4Ch
mov	ebx, [ebp+fsm_context]
mov	dword ptr [esp+10h], 0 
lea	esi, [ebp+hmac_send]
mov	[esp+0Ch], esi	
mov	dword ptr [esp+8], 0 
lea	eax, [ebp+send_key]
mov	[esp+4], eax	
mov	eax, [ebx]
mov	[esp], eax	
call	_silc_packet_get_keys
mov	eax, [ebp+send_key]
mov	[esp], eax	
call	_silc_cipher_get_key_len
mov	[ebp+key_len], eax
mov	eax, [ebp+send_key]
mov	[esp], eax	
call	_silc_cipher_get_block_len
mov	[ebp+block_len], eax
mov	eax, [ebx+18h]
mov	edi, [eax+10h]
mov	[esp], hash	
call	_silc_hash_len
mov	edx, eax
mov	eax, [ebx+5Ch]
cmp	byte ptr [eax+0Bh], 0
jns	loc_6422DA08
lea	eax, [ebp+x_len]
mov	[esp+8], eax	
mov	dword ptr [esp+4], 0 
mov	eax, [fsm_context_0+30h]
mov	[esp], eax	
mov	[ebp+req_hmac_key_len],	hash_len
call	_silc_mp_mp2bin
mov	[ebp+data], eax
test	eax, eax
mov	edx, [ebp+req_hmac_key_len]
jz	short loc_6422D944
mov	[esp+14h], hash	
mov	[esp+10h], edx	
mov	hash_len, [ebp+key_len]
mov	[esp+0Ch], edx	
mov	eax, [ebp+block_len]
mov	[esp+8], eax	
mov	eax, [ebp+x_len]
mov	[esp+4], eax	
mov	edx, [ebp+data]
mov	[esp], edx	
call	_silc_ske_process_key_material_data
mov	[fsm_context_0+58h], eax
mov	ecx, [ebp+x_len]
xor	eax, eax
mov	hash, [ebp+data]
rep stosb
mov	eax, [ebp+data]
mov	[esp], eax	
call	_silc_free
mov	eax, [fsm_context_0+58h]
test	eax, eax
jz	loc_6422DA43
mov	eax, [fsm_context_0+18h]
mov	edx, [ebp+send_key]
mov	[eax+8], edx
mov	edx, [ebp+hmac_send]
mov	[eax+0Ch], edx
mov	dword ptr [esp+1Ch], 0 
mov	dword ptr [esp+18h], 0 
mov	[esp+14h], esi	
mov	dword ptr [esp+10h], 0 
lea	edx, [ebp+send_key]
mov	[esp+0Ch], edx	
mov	[esp+8], eax	
mov	eax, [fsm_context_0+58h]
mov	[esp+4], eax	
mov	[esp], fsm_context_0 
call	_silc_ske_set_keys
test	al, al
jz	loc_6422DA64
mov	eax, [fsm_context_0+18h]
mov	dword ptr [eax+8], 0
mov	dword ptr [eax+0Ch], 0
mov	dword ptr [esp+14h], 1 
mov	dword ptr [esp+10h], 0 
mov	eax, [ebp+hmac_send]
mov	[esp+0Ch], eax	
mov	dword ptr [esp+8], 0 
mov	eax, [ebp+send_key]
mov	[esp+4], eax	
mov	eax, [fsm_context_0]
mov	[esp], eax	
call	_silc_packet_set_keys
test	al, al
jz	loc_6422DA9C
mov	dword ptr [esp+4], offset _silc_ske_st_rekey_responder_end 
mov	eax, [ebp+fsm]
mov	[esp], eax	
call	_silc_fsm_next
mov	eax, 2
add	esp, 4Ch
pop	fsm_context_0
pop	esi
pop	pfsbuf
leave
retn
align 4
mov	[esp+14h], hash	
mov	[esp+10h], hash_len 
mov	hash_len, [ebp+key_len]
mov	[esp+0Ch], edx	
mov	edx, [ebp+block_len]
mov	[esp+8], edx	
mov	edx, [eax+8]
and	edx, 7FFFFFh
sar	edx, 3
mov	[esp+4], edx	
mov	eax, [eax]
mov	[esp], eax	
call	_silc_ske_process_key_material_data
mov	[fsm_context_0+58h], eax
test	eax, eax
jnz	loc_6422D94F
mov	dword ptr [esp], offset	aErrorProcessin
call	_silc_format
mov	[esp+4], eax	
mov	dword ptr [esp], 3 
call	_silc_log_output
jmp	short loc_6422DA7C
align 4
mov	dword ptr [fsm_context_0+14h], 1
mov	eax, [fsm_context_0+18h]
mov	dword ptr [eax+8], 0
mov	dword ptr [eax+0Ch], 0
mov	dword ptr [esp+4], offset _silc_ske_st_responder_error 
mov	eax, [ebp+fsm]
mov	[esp], eax	
call	_silc_fsm_next
xor	eax, eax
add	esp, 4Ch
pop	fsm_context_0
pop	esi
pop	pfsbuf
leave
retn
align 4
mov	dword ptr [fsm_context_0+14h], 1
mov	eax, [ebp+send_key]
mov	[esp], eax	
call	_silc_cipher_free
mov	eax, [ebp+hmac_send]
mov	[esp], eax	
call	_silc_hmac_free
mov	dword ptr [esp+4], offset _silc_ske_st_responder_error 
mov	edx, [ebp+fsm]
mov	[esp], edx	
call	_silc_fsm_next
xor	eax, eax
add	esp, 4Ch
pop	fsm_context_0
pop	esi
pop	pfsbuf
leave
retn
align 4
public _silc_ske_st_rekey_initiator_done
			
			
push	ebp
mov	ebp, esp
push	edi
push	esi
push	ebx
sub	esp, 4Ch
mov	ebx, [ebp+fsm_context]
mov	dword ptr [esp+10h], 0 
lea	esi, [ebp+hmac_send]
mov	[esp+0Ch], esi	
mov	dword ptr [esp+8], 0 
lea	eax, [ebp+send_key]
mov	[esp+4], eax	
mov	eax, [ebx]
mov	[esp], eax	
call	_silc_packet_get_keys
mov	eax, [ebp+send_key]
mov	[esp], eax	
call	_silc_cipher_get_key_len
mov	[ebp+key_len], eax
mov	eax, [ebp+send_key]
mov	[esp], eax	
call	_silc_cipher_get_block_len
mov	[ebp+block_len], eax
mov	eax, [ebx+18h]
mov	edi, [eax+10h]
mov	[esp], hash	
call	_silc_hash_len
mov	edx, eax
mov	eax, [ebx+5Ch]
cmp	byte ptr [eax+0Bh], 0
jns	loc_6422DC70
lea	eax, [ebp+x_len]
mov	[esp+8], eax	
mov	dword ptr [esp+4], 0 
mov	eax, [fsm_context_0+30h]
mov	[esp], eax	
mov	[ebp+req_hmac_key_len],	hash_len
call	_silc_mp_mp2bin
mov	[ebp+data], eax
test	eax, eax
mov	edx, [ebp+req_hmac_key_len]
jz	short loc_6422DBAC
mov	[esp+14h], hash	
mov	[esp+10h], edx	
mov	hash_len, [ebp+key_len]
mov	[esp+0Ch], edx	
mov	eax, [ebp+block_len]
mov	[esp+8], eax	
mov	eax, [ebp+x_len]
mov	[esp+4], eax	
mov	edx, [ebp+data]
mov	[esp], edx	
call	_silc_ske_process_key_material_data
mov	[fsm_context_0+58h], eax
mov	ecx, [ebp+x_len]
xor	eax, eax
mov	hash, [ebp+data]
rep stosb
mov	eax, [ebp+data]
mov	[esp], eax	
call	_silc_free
mov	eax, [fsm_context_0+58h]
test	eax, eax
jz	loc_6422DCAB
mov	eax, [fsm_context_0+18h]
mov	edx, [ebp+send_key]
mov	[eax+8], edx
mov	edx, [ebp+hmac_send]
mov	[eax+0Ch], edx
mov	dword ptr [esp+1Ch], 0 
mov	dword ptr [esp+18h], 0 
mov	[esp+14h], esi	
mov	dword ptr [esp+10h], 0 
lea	edx, [ebp+send_key]
mov	[esp+0Ch], edx	
mov	[esp+8], eax	
mov	eax, [fsm_context_0+58h]
mov	[esp+4], eax	
mov	[esp], fsm_context_0 
call	_silc_ske_set_keys
test	al, al
jz	loc_6422DCCC
mov	eax, [fsm_context_0+18h]
mov	dword ptr [eax+8], 0
mov	dword ptr [eax+0Ch], 0
mov	dword ptr [esp+14h], 1 
mov	dword ptr [esp+10h], 0 
mov	eax, [ebp+hmac_send]
mov	[esp+0Ch], eax	
mov	dword ptr [esp+8], 0 
mov	eax, [ebp+send_key]
mov	[esp+4], eax	
mov	eax, [fsm_context_0]
mov	[esp], eax	
call	_silc_packet_set_keys
test	al, al
jz	loc_6422DD04
mov	dword ptr [esp+4], offset _silc_ske_st_rekey_initiator_end 
mov	eax, [ebp+fsm]
mov	[esp], eax	
call	_silc_fsm_next
mov	eax, 2
add	esp, 4Ch
pop	fsm_context_0
pop	esi
pop	pfsbuf
leave
retn
align 10h
mov	[esp+14h], hash	
mov	[esp+10h], hash_len 
mov	hash_len, [ebp+key_len]
mov	[esp+0Ch], edx	
mov	edx, [ebp+block_len]
mov	[esp+8], edx	
mov	edx, [eax+8]
and	edx, 7FFFFFh
sar	edx, 3
mov	[esp+4], edx	
mov	eax, [eax]
mov	[esp], eax	
call	_silc_ske_process_key_material_data
mov	[fsm_context_0+58h], eax
test	eax, eax
jnz	loc_6422DBB7
mov	dword ptr [esp], offset	aErrorProcessin
call	_silc_format
mov	[esp+4], eax	
mov	dword ptr [esp], 3 
call	_silc_log_output
jmp	short loc_6422DCE4
align 4
mov	dword ptr [fsm_context_0+14h], 1
mov	eax, [fsm_context_0+18h]
mov	dword ptr [eax+8], 0
mov	dword ptr [eax+0Ch], 0
mov	dword ptr [esp+4], offset _silc_ske_st_initiator_error 
mov	eax, [ebp+fsm]
mov	[esp], eax	
call	_silc_fsm_next
xor	eax, eax
add	esp, 4Ch
pop	fsm_context_0
pop	esi
pop	pfsbuf
leave
retn
align 4
mov	dword ptr [fsm_context_0+14h], 1
mov	eax, [ebp+send_key]
mov	[esp], eax	
call	_silc_cipher_free
mov	eax, [ebp+hmac_send]
mov	[esp], eax	
call	_silc_hmac_free
mov	dword ptr [esp+4], offset _silc_ske_st_initiator_error 
mov	edx, [ebp+fsm]
mov	[esp], edx	
call	_silc_fsm_next
xor	eax, eax
add	esp, 4Ch
pop	fsm_context_0
pop	esi
pop	pfsbuf
leave
retn
align 10h
public _silc_ske_packet_send_retry
			
push	ebp
mov	ebp, esp
push	ebx
sub	esp, 14h
mov	ebx, [ebp+context]
mov	eax, [ebx+0A4h]
lea	edx, [eax+1]
mov	[ebx+0A4h], dx
cmp	ax, 3
ja	short loc_6422DD69
test	byte ptr [context_0+0B8h], 1
jz	short loc_6422DDD4
mov	word ptr [context_0+0A4h], 0
mov	word ptr [context_0+0A2h], 1
mov	eax, [context_0+0ACh]
mov	[esp], eax	
call	_silc_free
mov	dword ptr [context_0+0ACh], 0
mov	dword ptr [context_0+14h], 11h
mov	al, [context_0+0B8h]
test	al, 8
jnz	short loc_6422DE00
or	eax, 8
mov	[context_0+0B8h], al
test	al, 2
jnz	short loc_6422DE10
mov	dword ptr [esp+4], offset _silc_ske_st_initiator_failure 
add	context_0, 64h
mov	[esp], ebx	
call	_silc_fsm_next
mov	[ebp+schedule],	ebx
add	esp, 14h
pop	ebx
leave
jmp	_silc_fsm_continue_sync
align 4
movzx	ecx, byte ptr [context_0+0A9h]
movzx	edx, byte ptr [context_0+0A8h]
mov	eax, [context_0+0B0h]
mov	[ebp+app_context], eax
mov	eax, [context_0+0ACh]
mov	[ebp+schedule],	eax
mov	eax, context_0
add	esp, 14h
pop	context_0
leave
jmp	_silc_ske_packet_send
add	context_0, 64h
mov	[ebp+schedule],	ebx
add	esp, 14h
pop	ebx
leave
jmp	_silc_fsm_continue_sync
mov	dword ptr [esp+4], offset _silc_ske_st_responder_failure
add	context_0, 64h
mov	[esp], ebx	
call	_silc_fsm_next
mov	[ebp+schedule],	ebx
add	esp, 14h
pop	ebx
leave
jmp	_silc_fsm_continue_sync
public _silc_ske_process_key_material
			
push	ebp
mov	ebp, esp
push	edi
push	esi
push	ebx
sub	esp, 4Ch
mov	esi, [ebp+ske]
lea	eax, [ebp+klen]
mov	[esp+8], eax	
mov	dword ptr [esp+4], 0 
mov	eax, [esi+30h]
mov	[esp], eax	
call	_silc_mp_mp2bin
mov	[ebp+ptr], eax
mov	eax, [esi+38h]
mov	[ebp+key], eax
mov	edi, [ebp+klen]
mov	dword ptr [esp+4], 10h 
mov	dword ptr [esp], 1 
call	_silc_calloc
mov	ebx, eax
test	eax, eax
jz	loc_6422DF8F
add	edi, [ebp+key]
jz	loc_6422DF98
mov	dword ptr [esp+4], 1 
mov	[esp], edi	
call	_silc_calloc
mov	[buf], eax
test	eax, eax
jz	loc_6422DF8F
mov	[buf+4], eax
mov	[buf+8], eax
lea	edx, [eax+edi]
mov	[buf+0Ch], edx
mov	ecx, edx
sub	ecx, eax
cmp	edi, ecx
ja	short loc_6422DEBA
mov	[buf+8], edx
mov	dword ptr [esp+1Ch], 1Dh
mov	eax, [ske_0+38h]
mov	[esp+18h], eax
mov	eax, [ske_0+34h]
mov	[esp+14h], eax
mov	dword ptr [esp+10h], 0Ch
mov	eax, [ebp+klen]
mov	[esp+0Ch], eax
mov	ecx, [ebp+ptr]
mov	[esp+8], ecx
mov	dword ptr [esp+4], 0Ch
mov	[esp], buf	
call	_silc_buffer_format
mov	edx, [buf+4]
mov	eax, [ske_0+18h]
mov	eax, [eax+10h]
mov	[esp+14h], eax	
mov	eax, [ebp+req_hmac_key_len]
mov	[esp+10h], eax	
mov	eax, [ebp+req_enc_key_len]
mov	[esp+0Ch], eax	
mov	eax, [ebp+req_iv_len]
mov	[esp+8], eax	
mov	eax, [buf+8]
sub	eax, edx
mov	[esp+4], eax	
mov	[esp], edx	
call	_silc_ske_process_key_material_data
mov	[ebp+key], eax
mov	ecx, [ebp+klen]
xor	eax, eax
mov	edi, [ebp+ptr]
rep stosb
mov	edx, [ebp+ptr]
mov	[esp], edx	
mov	[ebp+var_34], al
call	_silc_free
mov	edx, [buf]
mov	ecx, [buf+0Ch]
sub	ecx, edx
mov	al, [ebp+var_34]
mov	tmpbuf,	edx
rep stosb
mov	eax, [buf]
mov	[buf+8], eax
mov	[buf+4], eax
mov	[esp], eax	
call	_silc_free
mov	[esp], buf	
call	_silc_free
mov	ecx, [ebp+rekey]
test	ecx, ecx
jnz	short loc_6422DF7C
			
mov	eax, [ebp+key]
add	esp, 4Ch
pop	buf
pop	ske_0
pop	edi
leave
retn
mov	edx, [ebp+key]
mov	eax, ske_0	
call	_silc_ske_make_rekey_material
mov	edx, [ebp+rekey]
mov	[edx], eax
test	eax, eax
jnz	short loc_6422DF71
			
mov	[ebp+key], 0
jmp	short loc_6422DF71
mov	edx, [buf+8]
jmp	loc_6422DEB7
			
push	ebp
mov	ebp, esp
push	edi
push	esi
push	ebx
sub	esp, 9Ch
mov	ebx, ske
mov	[ebp+return_hash], return_hash
mov	[ebp+var_40], return_hash_len
mov	esi, [ebp+initiator]
test	esi, esi
jnz	loc_6422E1AC
mov	eax, [eax+28h]
test	eax, eax
jz	loc_6422E320
mov	return_hash, [eax+4]
mov	[ebp+s_data], edx
mov	eax, [eax+8]
sub	eax, edx
mov	[ebp+var_2C], eax
lea	eax, [ebp+e_len]
mov	[esp+8], eax	
mov	dword ptr [esp+4], 0 
mov	eax, [ske+20h]
add	eax, 0Ch
mov	[esp], eax	
call	_silc_mp_mp2bin
mov	[ebp+ptr], eax
lea	eax, [ebp+f_len]
mov	[esp+8], eax	
mov	dword ptr [esp+4], 0 
mov	eax, [ske+24h]
add	eax, 0Ch
mov	[esp], eax	
call	_silc_mp_mp2bin
mov	[ebp+var_34], eax
lea	eax, [ebp+KEY_len]
mov	[esp+8], eax	
mov	dword ptr [esp+4], 0 
mov	eax, [ske+30h]
mov	[esp], eax	
call	_silc_mp_mp2bin
mov	[ebp+var_30], eax
mov	eax, [ske+24h]
mov	eax, [eax]
mov	[ebp+var_52], ax
mov	eax, [ske+20h]
mov	edi, [eax]
mov	ecx, [ebp+e_len]
mov	[ebp+var_50], ecx
mov	eax, [ebp+f_len]
mov	[ebp+var_4C], eax
mov	edx, [ebp+KEY_len]
mov	[ebp+var_48], edx
mov	dword ptr [esp+4], 10h 
mov	dword ptr [esp], 1 
call	_silc_calloc
mov	esi, eax
test	eax, eax
jz	loc_6422E342
mov	buf, [ebp+var_4C]
add	eax, [ebp+var_50]
add	eax, [ebp+var_48]
movzx	edx, [ebp+var_52]
add	eax, edx
movzx	edi, di
lea	edi, [eax+edi]
add	edi, [ebp+var_2C]
jz	loc_6422E456
mov	dword ptr [esp+4], 1 
mov	[esp], edi	
call	_silc_calloc
mov	[buf], eax
test	eax, eax
jz	loc_6422E342
mov	[buf+4], eax
mov	[buf+8], eax
lea	edx, [eax+edi]
mov	[buf+0Ch], edx
mov	ecx, edx
sub	ecx, eax
cmp	edi, ecx
ja	short loc_6422E0C2
mov	[buf+8], edx
mov	edx, [ske+20h]
mov	eax, [edx+4]
test	eax, eax
jz	loc_6422E3C8
mov	ecx, [ske+24h]
mov	dword ptr [esp+4Ch], 1Dh
mov	edi, [ebp+KEY_len]
mov	[esp+48h], edi
mov	edi, [ebp+var_30]
mov	[esp+44h], edi
mov	dword ptr [esp+40h], 0Ch
mov	edi, [ebp+f_len]
mov	[esp+3Ch], edi
mov	edi, [ebp+var_34]
mov	[esp+38h], edi
mov	dword ptr [esp+34h], 0Ch
mov	edi, [ebp+e_len]
mov	[esp+30h], edi
mov	edi, [ebp+ptr]
mov	[esp+2Ch], edi
mov	dword ptr [esp+28h], 0Ch
movzx	edx, word ptr [edx]
mov	[esp+24h], edx
mov	[esp+20h], eax
mov	dword ptr [esp+1Ch], 0Ch
movzx	eax, word ptr [ecx]
mov	[esp+18h], eax
mov	eax, [ecx+4]
mov	[esp+14h], eax
mov	dword ptr [esp+10h], 0Ch
mov	eax, [ebp+var_2C]
mov	[esp+0Ch], eax
mov	edx, [ebp+s_data]
mov	[esp+8], edx
mov	dword ptr [esp+4], 0Ch
mov	[esp], buf	
call	_silc_buffer_format
inc	eax
jz	loc_6422E354
mov	ecx, [ebp+e_len]
xor	ret, ret
mov	edi, [ebp+ptr]
rep stosb
mov	ecx, [ebp+f_len]
mov	e, [ebp+var_34]
rep stosb
mov	ecx, [ebp+KEY_len]
mov	f, [ebp+var_30]
rep stosb
mov	edx, [ebp+ptr]
mov	[esp], edx	
call	_silc_free
mov	ecx, [ebp+var_34]
mov	[esp], ecx	
call	_silc_free
mov	KEY, [ebp+var_30]
mov	[esp], edi	
call	_silc_free
jmp	loc_6422E2C8
align 4
mov	ret, [ret+28h]
test	ret, ret
jz	loc_6422E334
mov	return_hash, [ret+4]
mov	[ebp+var_30], edx
mov	edi, [ret+8]
sub	s_len, edx
lea	ret, [ebp+e_len]
mov	[esp+8], ret	
mov	dword ptr [esp+4], 0 
mov	ret, [ske+20h]
add	ret, 0Ch
mov	[esp], ret	
call	_silc_mp_mp2bin
mov	[ebp+var_2C], ret
mov	ret, [ske+20h]
mov	ret, [ret]
mov	word ptr [ebp+ptr], ax
mov	ecx, [ebp+e_len]
mov	[ebp+var_34], ecx
mov	dword ptr [esp+4], 10h 
mov	dword ptr [esp], 1 
call	_silc_calloc
mov	esi, ret
test	ret, ret
jz	loc_6422E342
movzx	edx, word ptr [ebp+ptr]
add	edx, [ebp+var_34]
add	edx, s_len
jz	loc_6422E44E
mov	dword ptr [esp+4], 1 
mov	[esp], edx	
mov	[ebp+var_58], edx
call	_silc_calloc
mov	[ebp+var_34], ret
mov	[buf], ret
test	ret, ret
mov	edx, [ebp+var_58]
jz	loc_6422E342
mov	[buf+4], ret
mov	[buf+8], ret
mov	ecx, ret
add	ecx, edx
mov	[buf+0Ch], ecx
mov	ret, ecx
sub	ret, [ebp+var_34]
cmp	edx, ret
ja	short loc_6422E25A
mov	[buf+8], ecx
mov	ret, [ske+20h]
mov	dword ptr [esp+28h], 1Dh
mov	edx, [ebp+e_len]
mov	[esp+24h], edx
mov	ecx, [ebp+var_2C]
mov	[esp+20h], ecx
mov	dword ptr [esp+1Ch], 0Ch
movzx	edx, word ptr [ret]
mov	[esp+18h], edx
mov	ret, [ret+4]
mov	[esp+14h], ret
mov	dword ptr [esp+10h], 0Ch
mov	[esp+0Ch], s_len
mov	s_len, [ebp+var_30]
mov	[esp+8], edi
mov	dword ptr [esp+4], 0Ch
mov	[esp], buf	
call	_silc_buffer_format
inc	ret
jz	loc_6422E3A0
mov	ecx, [ebp+e_len]
xor	ret, ret
mov	edi, [ebp+var_2C]
rep stosb
mov	ecx, [ebp+var_2C]
mov	[esp], ecx	
call	_silc_free
mov	edx, [buf+4]
mov	e, [ebp+return_hash]
mov	[esp+0Ch], edi	
mov	ret, [buf+8]
sub	ret, edx
mov	[esp+8], ret	
mov	[esp+4], edx	
mov	ret, [ske+18h]
mov	ret, [ret+10h]
mov	[esp], ret	
call	_silc_hash_make
mov	ret, [ske+18h]
mov	ret, [ret+10h]
mov	[esp], ret	
call	_silc_hash_len
mov	edx, [ebp+var_40]
mov	[edx], ret
mov	ret, [buf]
mov	[esp], ret	
call	_silc_free
mov	[esp], buf	
call	_silc_free
xor	ret, ret
			
add	esp, 9Ch
pop	ske
pop	buf
pop	e
leave
retn
align 10h
mov	[ebp+s_data], 0
mov	[ebp+var_2C], 0
jmp	loc_6422DFD8
align 4
mov	[ebp+var_30], 0
xor	edi, edi
jmp	loc_6422E1C2
			
mov	ret, 10h
add	esp, 9Ch
pop	ske
pop	buf
pop	s_len
leave
retn
align 4
mov	ret, buf	
call	_silc_buffer_free_4
mov	ecx, [ebp+e_len]
xor	ret, ret
mov	edi, [ebp+ptr]
rep stosb
mov	ecx, [ebp+f_len]
mov	e, [ebp+var_34]
rep stosb
mov	ecx, [ebp+KEY_len]
mov	f, [ebp+var_30]
rep stosb
mov	ecx, [ebp+ptr]
mov	[esp], ecx	
call	_silc_free
mov	KEY, [ebp+var_34]
mov	[esp], edi	
call	_silc_free
mov	ret, [ebp+var_30]
mov	[esp], ret	
call	_silc_free
mov	ret, 1
jmp	loc_6422E314
mov	ret, buf	
call	_silc_buffer_free_4
mov	ecx, [ebp+e_len]
xor	ret, ret
mov	edi, [ebp+var_2C]
rep stosb
mov	edx, [ebp+var_2C]
mov	[esp], edx	
call	_silc_free
mov	ret, 1
jmp	loc_6422E314
align 4
mov	edx, [ske+24h]
mov	dword ptr [esp+40h], 1Dh
mov	ret, [ebp+KEY_len]
mov	[esp+3Ch], ret
mov	edi, [ebp+var_30]
mov	[esp+38h], edi
mov	dword ptr [esp+34h], 0Ch
mov	ret, [ebp+f_len]
mov	[esp+30h], ret
mov	ret, [ebp+var_34]
mov	[esp+2Ch], ret
mov	dword ptr [esp+28h], 0Ch
mov	ret, [ebp+e_len]
mov	[esp+24h], ret
mov	ecx, [ebp+ptr]
mov	[esp+20h], ecx
mov	dword ptr [esp+1Ch], 0Ch
movzx	ret, word ptr [edx]
mov	[esp+18h], ret
mov	ret, [edx+4]
mov	[esp+14h], ret
mov	dword ptr [esp+10h], 0Ch
mov	edi, [ebp+var_2C]
mov	[esp+0Ch], edi
mov	ret, [ebp+s_data]
mov	[esp+8], ret
mov	dword ptr [esp+4], 0Ch
mov	[esp], buf	
call	_silc_buffer_format
jmp	loc_6422E164
mov	ecx, [ret+8]
jmp	loc_6422E257
mov	edx, [buf+8]
jmp	loc_6422E0BF
align 10h
public _silc_ske_st_responder_phase4
			
push	ebp
mov	ebp, esp
push	edi
push	esi
push	ebx
sub	esp, 9Ch
mov	ebx, [ebp+fsm_context]
test	byte ptr [ebx+0B8h], 1
jnz	loc_6422E5D8
mov	edi, [fsm_context_0+14h]
test	edi, edi
jnz	loc_6422E65C
mov	esi, [fsm_context_0+20h]
mov	eax, [fsm_context_0+1Ch]
test	eax, eax
jz	short loc_6422E49A
test	byte ptr [eax],	4
jnz	loc_6422E5F8
			
mov	dword ptr [esp+4], 10h 
mov	dword ptr [esp], 1 
call	_silc_calloc
mov	recv_payload, eax
mov	[esp], eax	
call	_silc_mp_init
mov	dword ptr [esp+4], 2 
mov	eax, [fsm_context_0+18h]
mov	eax, [eax+4]
add	eax, 18h
mov	[esp], eax	
call	_silc_mp_sizeinbase
mov	edx, [fsm_context_0+18h]
mov	edx, [edx+4]
add	edx, 18h	
mov	[esp], esi	
mov	ecx, eax	
mov	eax, fsm_context_0 
call	_silc_ske_create_rnd
test	eax, eax
jnz	loc_6422E59C
mov	dword ptr [esp+4], 24h 
mov	dword ptr [esp], 1 
call	_silc_calloc
mov	[fsm_context_0+2Ch], esi
mov	[fsm_context_0+24h], eax
lea	edi, [eax+0Ch]
mov	[esp], edi	
call	_silc_mp_init
mov	eax, [fsm_context_0+18h]
mov	eax, [eax+4]
lea	edx, [eax+8]
mov	[esp+0Ch], edx	
mov	[esp+8], esi	
add	eax, 28h
mov	[esp+4], eax	
mov	[esp], edi	
call	_silc_mp_pow_mod
mov	dword ptr [esp+4], 10h 
mov	dword ptr [esp], 1 
call	_silc_calloc
mov	esi, eax
mov	[esp], eax	
call	_silc_mp_init
mov	eax, [fsm_context_0+18h]
mov	eax, [eax+4]
add	eax, 8
mov	[esp+0Ch], eax	
mov	eax, [fsm_context_0+2Ch]
mov	[esp+8], eax	
mov	eax, [fsm_context_0+20h]
add	eax, 0Ch
mov	[esp+4], eax	
mov	[esp], esi	
call	_silc_mp_pow_mod
mov	[fsm_context_0+30h], esi
mov	dword ptr [esp+4], offset _silc_ske_st_responder_phase5	
mov	eax, [ebp+fsm]
mov	[esp], eax	
call	_silc_fsm_next
xor	eax, eax
add	esp, 9Ch
pop	fsm_context_0
pop	recv_payload
pop	edi
leave
retn
align 4
mov	[esp], esi	
mov	[ebp+var_6C], status
call	_silc_mp_uninit
mov	[esp], esi	
call	_silc_free
mov	eax, [ebp+var_6C]
mov	[fsm_context_0+14h], status
mov	dword ptr [esp+4], offset _silc_ske_st_responder_error 
mov	status,	[ebp+fsm]
mov	[esp], eax	
call	_silc_fsm_next
xor	eax, eax
add	esp, 9Ch
pop	fsm_context_0
pop	recv_payload
pop	edi
leave
retn
align 4
mov	dword ptr [esp+4], offset _silc_ske_st_responder_aborted 
mov	eax, [ebp+fsm]
mov	[esp], eax	
call	_silc_fsm_next
xor	eax, eax
add	esp, 9Ch
pop	fsm_context_0
pop	esi
pop	edi
leave
retn
lea	ecx, [ebp+hash_len]
lea	eax, [ebp+hash]
mov	[ebp+var_7C], eax
mov	dword ptr [esp], 1 
mov	edx, eax	
mov	eax, fsm_context_0 
call	_silc_ske_make_hash
test	eax, eax
jnz	short loc_6422E5B2
mov	dword ptr [esp+14h], 0 
mov	status,	[ebp+hash_len]
mov	[esp+10h], eax	
lea	eax, [ebp+hash]
mov	[esp+0Ch], eax	
movzx	eax, word ptr [recv_payload+1Ch]
mov	[esp+8], eax	
mov	eax, [recv_payload+20h]
mov	[esp+4], eax	
mov	eax, [fsm_context_0+18h]
mov	eax, [eax+14h]
mov	[esp], eax	
call	_silc_pkcs_verify
test	al, al
jz	short loc_6422E67C
mov	ecx, [ebp+hash_len]
mov	al, 46h
mov	edi, [ebp+var_7C]
rep stosb
jmp	loc_6422E49A
align 4
mov	dword ptr [esp+4], offset _silc_ske_st_initiator_error 
mov	eax, [ebp+fsm]
mov	[esp], eax	
call	_silc_fsm_next
xor	eax, eax
add	esp, 9Ch
pop	fsm_context_0
pop	esi
pop	edi
leave
retn
mov	dword ptr [esp], offset	aSignatureVerif
call	_silc_format
mov	[esp+4], eax	
mov	dword ptr [esp], 3 
call	_silc_log_output
mov	dword ptr [fsm_context_0+14h], 9
mov	dword ptr [esp+4], offset _silc_ske_st_responder_error 
mov	eax, [ebp+fsm]
mov	[esp], eax	
call	_silc_fsm_next
jmp	loc_6422E58D
align 4
public _silc_ske_st_initiator_phase4
			
push	ebp
mov	ebp, esp
push	edi
push	esi
push	ebx
sub	esp, 8Ch
mov	ebx, [ebp+fsm_context]
test	byte ptr [ebx+0B8h], 1
jnz	loc_6422E830
mov	edx, [fsm_context_0+14h]
test	edx, edx
jnz	loc_6422E810
mov	eax, [fsm_context_0+24h]
mov	[ebp+payload], eax
lea	ecx, [ebp+hash_len] 
lea	esi, [ebp+hash]
mov	dword ptr [esp], 0 
mov	edx, esi	
mov	eax, fsm_context_0 
call	_silc_ske_make_hash
mov	edx, eax
test	eax, eax
jnz	short err
mov	status,	[ebp+hash_len]
mov	[esp+4], eax	
mov	[esp], esi	
call	_silc_memdup
mov	[fsm_context_0+34h], eax
mov	edx, [ebp+hash_len]
mov	[fsm_context_0+38h], edx
mov	eax, [fsm_context_0+18h]
mov	eax, [eax+14h]
test	eax, eax
jz	loc_6422E859
mov	dword ptr [esp+14h], 0 
mov	[esp+10h], edx	
mov	[esp+0Ch], esi	
mov	ecx, [ebp+payload]
movzx	edx, word ptr [ecx+1Ch]
mov	[esp+8], edx	
mov	edx, [ecx+20h]
mov	[esp+4], edx	
mov	[esp], eax	
call	_silc_pkcs_verify
test	al, al
jnz	loc_6422E850
mov	dword ptr [esp], offset	aSignatureVerif	
call	_silc_format
mov	[esp+4], eax	
mov	dword ptr [esp], 3 
call	_silc_log_output
mov	edx, 9
			
mov	al, 46h
mov	ecx, 40h
mov	edi, esi
rep stosb
mov	ecx, [ebp+payload]
mov	[esp], ecx	
mov	[ebp+var_74], al
mov	[ebp+req_iv_len], status
call	_silc_ske_payload_ke_free
mov	dword ptr [fsm_context_0+24h], 0
mov	ecx, [fsm_context_0+30h]
mov	[esp], ecx	
call	_silc_mp_uninit
mov	ecx, [fsm_context_0+30h]
mov	[esp], ecx	
call	_silc_free
mov	dword ptr [fsm_context_0+30h], 0
mov	esi, [fsm_context_0+34h]
test	esi, esi
mov	al, [ebp+var_74]
mov	edx, [ebp+req_iv_len]
jz	short loc_6422E7E6
mov	ecx, [ebp+hash_len]
mov	edi, esi
rep stosb
mov	eax, [fsm_context_0+34h]
mov	[esp], eax	
mov	[ebp+req_iv_len], edx
call	_silc_free
mov	dword ptr [fsm_context_0+34h], 0
mov	edx, [ebp+req_iv_len]
mov	[fsm_context_0+14h], edx
mov	dword ptr [esp+4], offset _silc_ske_st_initiator_error 
mov	eax, [ebp+fsm]
mov	[esp], eax	
call	_silc_fsm_next
xor	eax, eax
add	esp, 8Ch
pop	fsm_context_0
pop	esi
pop	edi
leave
retn
mov	dword ptr [fsm_context_0+14h], 1
mov	dword ptr [esp+4], offset _silc_ske_st_initiator_error 
mov	ecx, [ebp+fsm]
mov	[esp], ecx	
call	_silc_fsm_next
xor	eax, eax
add	esp, 8Ch
pop	fsm_context_0
pop	esi
pop	edi
leave
retn
mov	dword ptr [esp+4], offset _silc_ske_st_initiator_aborted
mov	eax, [ebp+fsm]
mov	[esp], eax	
call	_silc_fsm_next
xor	eax, eax
add	esp, 8Ch
pop	fsm_context_0
pop	esi
pop	edi
leave
retn
mov	ecx, [ebp+hash_len]
mov	al, 46h
mov	edi, esi
rep stosb
mov	dword ptr [fsm_context_0+14h], 0
mov	eax, [fsm_context_0+5Ch]
test	eax, eax
jz	short loc_6422E888
mov	dword ptr [esp+4], offset _silc_ske_st_rekey_initiator_done 
mov	eax, [ebp+fsm]
mov	[esp], eax	
call	_silc_fsm_next
xor	eax, eax
add	esp, 8Ch
pop	fsm_context_0
pop	esi
pop	edi
leave
retn
align 4
mov	eax, [fsm_context_0+18h]
mov	eax, [eax+8]
mov	[esp], eax	
call	_silc_cipher_get_key_len
mov	edi, eax
mov	eax, [fsm_context_0+18h]
mov	eax, [eax+8]
mov	[esp], eax	
call	_silc_cipher_get_block_len
mov	ecx, eax
mov	eax, [fsm_context_0+18h]
mov	eax, [eax+10h]
mov	[esp], eax	
mov	[ebp+req_iv_len], ecx
call	_silc_hash_len
mov	[ebp+hash_len],	eax
lea	edx, [fsm_context_0+5Ch]
mov	[esp+10h], edx	
mov	[esp+0Ch], eax	
mov	[esp+8], edi	
mov	ecx, [ebp+req_iv_len]
mov	[esp+4], ecx	
mov	[esp], fsm_context_0 
call	_silc_ske_process_key_material
mov	[fsm_context_0+58h], eax
test	eax, eax
jz	short loc_6422E92F
mov	[ebp+hash], 0
mov	[ebp+hash+1], 0
mov	[ebp+hash+2], 0
mov	[ebp+hash+3], 0
mov	dword ptr [esp+4], 4 
mov	[esp], esi	
xor	ecx, ecx	
mov	edx, 2		
mov	eax, fsm_context_0 
call	_silc_ske_packet_send
test	al, al
jz	loc_6422E809
mov	dword ptr [esp+4], offset _silc_ske_st_initiator_end 
mov	eax, [ebp+fsm]
mov	[esp], eax	
call	_silc_fsm_next
mov	eax, 2
jmp	loc_6422E825
mov	dword ptr [esp], offset	aErrorProcessin	
call	_silc_format
mov	[esp+4], eax	
mov	dword ptr [esp], 3 
call	_silc_log_output
mov	edx, 1
jmp	err
align 4
public _silc_ske_st_responder_phase1
push	ebp
mov	ebp, esp
push	edi
push	esi
push	ebx
sub	esp, 6Ch
mov	[ebp+remote_payload], 0
mov	edx, [ebp+fsm_context]
mov	eax, [edx+50h]
add	eax, 8
mov	[ebp+packet_buf], packet_buf_0
lea	edx, [ebp+remote_payload]
mov	[esp+8], edx	
mov	[esp+4], packet_buf_0 
mov	ecx, [ebp+fsm_context]
mov	[esp], ecx	
call	_silc_ske_payload_start_decode
test	eax, eax
jnz	loc_6422EBD8
mov	edx, [ebp+fsm_context]
mov	status,	[edx+50h]
mov	dl, [eax+20h]
test	dl, 3Fh
jnz	loc_6422EB64
mov	esi, [ebp+packet_buf]
mov	edi, [esi+8]
mov	eax, [esi+4]
mov	[ebp+var_4C], eax
mov	dword ptr [esp+4], 10h 
mov	dword ptr [esp], 1 
call	_silc_calloc
mov	ebx, eax
test	eax, eax
jz	loc_6422F48D
sub	edi, [ebp+var_4C]
jz	loc_6422F485
mov	dword ptr [esp+4], 1 
mov	[esp], edi	
call	_silc_calloc
mov	[ebx], eax
test	eax, eax
jz	loc_6422F48D
mov	[ebx+4], eax
mov	[ebx+8], eax
lea	edx, [eax+edi]
mov	[ebx+0Ch], edx
mov	ecx, edx
sub	ecx, eax
cmp	edi, ecx
ja	short loc_6422EA0A
mov	[ebx+8], edx
mov	eax, edx
mov	edx, [esi+4]
mov	ecx, [esi+8]
sub	ecx, edx
mov	esi, [ebx+4]
mov	[ebp+var_4C], esi
sub	eax, esi
cmp	ecx, eax
ja	short loc_6422EA25
mov	edi, [ebp+var_4C]
mov	esi, edx
rep movsb
			
mov	edx, [ebp+fsm_context]
mov	[edx+28h], ebx
mov	eax, [edx+50h]
mov	[esp], eax	
call	_silc_packet_free
mov	ecx, [ebp+fsm_context]
mov	dword ptr [ecx+50h], 0
mov	eax, [ecx+54h]
test	al, 4
jz	short loc_6422EA50
mov	eax, [ebp+remote_payload]
or	byte ptr [eax],	4
mov	eax, [ecx+54h]
test	al, 2
jz	short loc_6422EA5A
mov	eax, [ebp+remote_payload]
or	byte ptr [eax],	2
mov	ebx, [ebp+remote_payload]
mov	al, [ebx]
test	al, 1
jnz	loc_6422EB14
cmp	word ptr [ebx+12h], 0
jz	loc_6422EB34
cmp	word ptr [ebx+18h], 0
jz	loc_6422EB34
cmp	word ptr [ebx+20h], 0
jz	loc_6422EB34
cmp	word ptr [ebx+28h], 0
jz	loc_6422EB34
cmp	word ptr [ebx+30h], 0
jz	loc_6422EB34
mov	dword ptr [esp+4], 1Ch 
mov	dword ptr [esp], 1 
call	_silc_calloc
mov	edx, [ebp+fsm_context]
mov	[edx+18h], eax
test	eax, eax
jz	loc_6422EC32
mov	dword ptr [esp+4], 40h 
mov	dword ptr [esp], 1 
call	_silc_calloc
mov	[ebp+ptr], eax
test	eax, eax
jz	loc_6422EC24
movzx	eax, word ptr [ebx+10h]
mov	[esp+4], eax	
mov	eax, [ebx+0Ch]
mov	[esp], eax	
call	_silc_memdup
mov	esi, [ebp+fsm_context]
mov	[esi+40h], eax
mov	eax, esi	
call	_silc_ske_check_version
mov	esi, eax
test	eax, eax
jz	loc_6422EC40
mov	status,	[ebp+fsm_context]
mov	[eax+14h], status
mov	ebx, [ebp+remote_payload]
jmp	short loc_6422EB39
mov	esi, [ebp+fsm_context]
test	byte ptr [esi+54h], 1
jnz	loc_6422EA67
and	eax, 0FFFFFFFEh
mov	[ebx], al
mov	ebx, [ebp+remote_payload]
cmp	word ptr [ebx+12h], 0
jnz	loc_6422EA72
			
mov	esi, 2
			
mov	[esp], ebx
call	_silc_ske_payload_start_free
mov	eax, [ebp+fsm_context]
mov	[eax+14h], status
mov	dword ptr [esp+4], offset _silc_ske_st_responder_error 
mov	edx, [ebp+fsm]
mov	[esp], edx	
call	_silc_fsm_next
xor	eax, eax
add	esp, 6Ch
pop	ebx
pop	status
pop	edi
leave
retn
and	edx, 0FFFFFFC0h
cmp	dl, 40h
jz	loc_6422EC14
mov	edx, 1Dh
lea	ebx, [ebp+id]
mov	[esp+10h], edx	
mov	[esp+0Ch], ebx	
mov	dl, [eax+20h]
shr	dl, 6
movzx	edx, dl
mov	[esp+8], edx	
mov	dl, [eax+20h]
and	edx, 3Fh
mov	[esp+4], edx	
mov	eax, [eax+18h]
mov	[esp], eax	
call	_silc_id_str2id
mov	ecx, [ebp+fsm_context]
mov	eax, [ecx+50h]
mov	[esp+10h], ebx	
mov	al, [eax+20h]
shr	al, 6
movzx	eax, al
mov	[esp+0Ch], eax	
mov	dword ptr [esp+8], 0 
mov	dword ptr [esp+4], 0 
mov	eax, [ecx]
mov	[esp], eax	
call	_silc_packet_set_ids
jmp	loc_6422E9A4
mov	esi, [ebp+fsm_context]
mov	edx, [esi+50h]
mov	[esp], edx	
mov	[ebp+var_58], status
call	_silc_packet_free
mov	dword ptr [esi+50h], 0
mov	eax, [ebp+var_58]
mov	[esi+14h], eax
mov	dword ptr [esp+4], offset _silc_ske_st_responder_error 
mov	status,	[ebp+fsm]
mov	[esp], eax	
call	_silc_fsm_next
xor	eax, eax
add	esp, 6Ch
pop	status
pop	esi
pop	edi
leave
retn
align 4
mov	edx, 16h
lea	ebx, [ebp+id]
jmp	loc_6422EB78
align 4
mov	ecx, [ebp+fsm_context]
mov	eax, [ecx+18h]
mov	[esp], eax	
call	_silc_free
mov	ebx, [ebp+remote_payload]
mov	esi, 10h
jmp	loc_6422EB39
align 10h
mov	ecx, [ebp+fsm_context]
mov	edx, [ecx+18h]
mov	al, [ebx]
mov	status,	[ebp+ptr]
mov	[esi], al
movzx	eax, al
mov	[edx], eax
mov	dword ptr [esp+4], 1 
mov	dword ptr [esp], 10h 
call	_silc_calloc
mov	[esi+4], eax
test	eax, eax
jz	loc_6422EFFC
mov	edx, [ebp+ptr]
mov	word ptr [edx+8], 10h
mov	esi, [ebx+4]
mov	ecx, 4
mov	edi, eax
rep movsd
test	byte ptr [ebx],	1
jz	short loc_6422ECCF
mov	ecx, [ebp+fsm_context]
cmp	word ptr [ecx+0A0h], 0
jz	short loc_6422ECCF
mov	ecx, [edx+4]
mov	eax, [ebp+fsm_context]
mov	esi, [eax+18h]
movzx	eax, byte ptr [ecx+1]
movzx	edx, byte ptr [ecx]
shl	edx, 8
or	eax, edx
mov	[esi+18h], ax
mov	edx, [ebp+fsm_context]
movzx	eax, byte ptr [edx+0A1h]
mov	[ecx], al
mov	ecx, [ebp+ptr]
mov	eax, [ecx+4]
mov	esi, [ebp+fsm_context]
mov	edx, [esi+0A0h]
mov	[eax+1], dl
			
mov	edx, [ebp+fsm_context]
mov	eax, [edx+3Ch]
mov	[esp], eax	
call	_strdup
mov	ecx, [ebp+ptr]
mov	[ecx+0Ch], eax
test	eax, eax
jz	loc_6422F330
mov	eax, [ebp+fsm_context]
mov	edi, [eax+3Ch]
xor	eax, eax
mov	ecx, 0FFFFFFFFh
repne scasb
not	ecx
dec	ecx
mov	edx, [ebp+ptr]
mov	[edx+10h], cx
mov	eax, [ebx+14h]
mov	esi, eax
test	eax, eax
jz	loc_6422F233
mov	dword ptr [esp+4], 2Ch 
mov	[esp], eax	
call	_strchr
test	eax, eax
jz	loc_6422F230
mov	[ebp+var_54], ebx
mov	dword ptr [esp+4], offset asc_6426F07F 
mov	[esp], esi	
call	_strcspn
mov	[ebp+var_4C], eax
mov	dword ptr [esp+4], 1 
inc	eax
mov	[esp], eax	
call	_silc_calloc
mov	ebx, eax
test	eax, eax
jz	loc_6422F208
mov	edi, eax
mov	ecx, [ebp+var_4C]
rep movsb
mov	dword ptr [esp+4], 0 
mov	[esp], eax	
call	_silc_ske_group_get_by_name
test	eax, eax
jz	loc_6422F217
cmp	byte ptr [esi],	0
jz	short loc_6422ED9C
inc	esi
mov	[esp], ebx	
call	_silc_free
test	esi, esi
jnz	short loc_6422ED2C
mov	ebx, [ebp+var_54]
mov	edx, [ebp+ptr]
mov	cx, [edx+12h]
mov	eax, [edx+14h]
jmp	short loc_6422EDB3
align 4
mov	edx, ebx
mov	ebx, [ebp+var_54]
mov	[esp], edx	
call	_silc_free
mov	eax, [ebp+ptr]
mov	cx, [eax+12h]
mov	eax, [eax+14h]
			
test	cx, cx
jz	loc_6422F1E8
mov	ecx, [ebp+ptr]
mov	eax, [ecx+14h]
			
mov	ecx, [ebp+fsm_context]
mov	edx, [ecx+18h]
add	edx, 4
mov	[esp+4], edx	
mov	[esp], eax	
call	_silc_ske_group_get_by_name
test	eax, eax
jnz	loc_6422F1F0
mov	status,	[ebx+1Ch]
mov	esi, eax
test	eax, eax
jz	loc_6422F38A
mov	dword ptr [esp+4], 2Ch 
mov	[esp], eax	
call	_strchr
test	eax, eax
jz	loc_6422F387
mov	[ebp+var_54], ebx
nop
mov	dword ptr [esp+4], offset asc_6426F07F 
mov	[esp], esi	
call	_strcspn
mov	[ebp+var_4C], eax
mov	dword ptr [esp+4], 1 
inc	eax
mov	[esp], eax	
call	_silc_calloc
mov	ebx, eax
test	eax, eax
jz	loc_6422EFFC
mov	edi, eax
mov	ecx, [ebp+var_4C]
rep movsb
mov	dword ptr [esp+4], 0 
mov	[esp], eax	
call	_silc_pkcs_find_algorithm
test	eax, eax
jnz	loc_6422F33F
cmp	byte ptr [esi],	0
jz	short loc_6422EE74
inc	esi
mov	[esp], ebx	
call	_silc_free
test	esi, esi
jnz	short loc_6422EE08
mov	ebx, [ebp+var_54]
mov	edx, [ebp+ptr]
mov	eax, [edx+18h]
jmp	short loc_6422EE87
align 4
mov	edx, ebx
mov	ebx, [ebp+var_54]
mov	[esp], edx	
call	_silc_free
mov	ecx, [ebp+ptr]
mov	eax, [ecx+18h]
			
test	ax, ax
jnz	short loc_6422EE9A
mov	ecx, [ebp+ptr]
mov	esi, [ecx+1Ch]
test	esi, esi
jz	loc_6422F507
			
mov	eax, [ebx+24h]
mov	esi, eax
test	eax, eax
jz	loc_6422F412
mov	dword ptr [esp+4], 2Ch 
mov	[esp], eax	
call	_strchr
test	eax, eax
jz	loc_6422F40F
mov	[ebp+var_4C], ebx
xchg	ax, ax
mov	dword ptr [esp+4], offset asc_6426F07F 
mov	[esp], esi	
call	_strcspn
mov	ebx, eax
mov	dword ptr [esp+4], 1 
lea	eax, [eax+1]
mov	[esp], eax	
call	_silc_calloc
test	eax, eax
jz	loc_6422EFFC
mov	edi, eax
mov	ecx, ebx
rep movsb
mov	edi, eax
mov	[esp], eax	
call	_silc_cipher_is_supported
dec	al
jz	loc_6422F3BF
cmp	byte ptr [esi],	0
jz	short loc_6422EF2C
inc	esi
mov	[esp], edi	
call	_silc_free
test	esi, esi
jnz	short loc_6422EEC4
mov	ebx, [ebp+var_4C]
mov	esi, [ebp+ptr]
mov	eax, [esi+20h]
mov	esi, [esi+24h]
jmp	short loc_6422EF40
align 4
mov	ebx, [ebp+var_4C]
mov	[esp], edi	
call	_silc_free
mov	esi, [ebp+ptr]
mov	eax, [esi+20h]
mov	esi, [esi+24h]
			
test	ax, ax
jz	loc_6422F3A7
mov	ecx, [ebp+ptr]
mov	esi, [ecx+24h]
			
mov	edx, [ebp+fsm_context]
mov	eax, [edx+18h]
add	eax, 8
mov	[esp+4], eax	
mov	[esp], esi	
call	_silc_cipher_alloc
test	al, al
jz	loc_6422F356
mov	eax, [ebx+2Ch]
mov	esi, eax
test	eax, eax
jz	loc_6422F4AF
mov	dword ptr [esp+4], 2Ch 
mov	[esp], eax	
call	_strchr
test	eax, eax
jz	loc_6422F4AC
mov	[ebp+var_4C], ebx
mov	dword ptr [esp+4], offset asc_6426F07F 
mov	[esp], esi	
call	_strcspn
mov	ebx, eax
mov	dword ptr [esp+4], 1 
lea	eax, [eax+1]
mov	[esp], eax	
call	_silc_calloc
test	eax, eax
jz	short loc_6422EFFC
mov	edi, eax
mov	ecx, ebx
rep movsb
mov	edi, eax
mov	[esp], eax	
call	_silc_hash_is_supported
dec	al
jz	loc_6422F494
cmp	byte ptr [esi],	0
jz	loc_6422F114
inc	esi
mov	[esp], edi	
call	_silc_free
test	esi, esi
jnz	short loc_6422EF94
mov	ebx, [ebp+var_4C]
mov	esi, [ebp+ptr]
mov	eax, [esi+28h]
mov	esi, [esi+2Ch]
jmp	loc_6422F128
			
mov	eax, [ebp+fsm_context]
mov	dword ptr [eax+14h], 10h
			
mov	eax, [ebp+remote_payload]
mov	[esp], eax	
call	_silc_ske_payload_start_free
lea	eax, [ebp+packet_buf]
mov	[esp+8], eax	
mov	esi, [ebp+fsm_context]
mov	eax, [esi+1Ch]
mov	[esp+4], eax	
mov	[esp], esi	
call	_silc_ske_payload_start_encode
mov	ebx, eax
test	eax, eax
jz	loc_6422F0C6
mov	esi, [ebp+fsm_context]
mov	eax, [esi+18h]
mov	edx, [eax+4]
test	edx, edx
jz	short loc_6422F04C
mov	[esp], edx	
call	_silc_ske_group_free
mov	eax, [esi+18h]
mov	edx, [eax+8]
test	edx, edx
jz	short loc_6422F061
mov	[esp], edx	
call	_silc_cipher_free
mov	edx, [ebp+fsm_context]
mov	eax, [edx+18h]
mov	edx, [eax+10h]
test	edx, edx
jz	short loc_6422F076
mov	[esp], edx	
call	_silc_hash_free
mov	ecx, [ebp+fsm_context]
mov	eax, [ecx+18h]
mov	edx, [eax+0Ch]
test	edx, edx
jz	short loc_6422F08B
mov	[esp], edx	
call	_silc_hmac_free
mov	esi, [ebp+fsm_context]
mov	eax, [esi+18h]
mov	[esp], eax	
call	_silc_free
mov	eax, [ebp+fsm_context]
mov	dword ptr [eax+18h], 0
test	status,	status
jnz	short loc_6422F0A3
mov	bl, 1
mov	edx, [ebp+fsm_context]
mov	[edx+14h], status
mov	dword ptr [esp+4], offset _silc_ske_st_responder_error 
mov	ecx, [ebp+fsm]
mov	[esp], ecx	
call	_silc_fsm_next
xor	eax, eax
add	esp, 6Ch
pop	status
pop	esi
pop	edi
leave
retn
mov	status,	[ebp+packet_buf]
mov	edx, [eax+4]
mov	eax, [eax+8]
sub	eax, edx
mov	[esp+4], eax	
mov	[esp], edx	
xor	ecx, ecx	
mov	edx, 0Dh	
mov	eax, [ebp+fsm_context] 
call	_silc_ske_packet_send
test	al, al
jz	err
mov	eax, [ebp+packet_buf] 
call	_silc_buffer_free_4
mov	dword ptr [esp+4], offset _silc_ske_st_responder_phase2	
mov	ecx, [ebp+fsm]
mov	[esp], ecx	
call	_silc_fsm_next
mov	eax, 2
jmp	loc_6422EC0B
mov	ebx, [ebp+var_4C]
mov	[esp], edi	
call	_silc_free
mov	ecx, [ebp+ptr]
mov	eax, [ecx+28h]
mov	esi, [ecx+2Ch]
			
test	ax, ax
jz	loc_6422F46D
mov	ecx, [ebp+ptr]
mov	esi, [ecx+2Ch]
			
mov	edx, [ebp+fsm_context]
mov	eax, [edx+18h]
add	eax, 10h
mov	[esp+4], eax	
mov	[esp], esi	
call	_silc_hash_alloc
test	al, al
jz	loc_6422F431
mov	eax, [ebx+34h]
mov	esi, eax
test	eax, eax
jz	loc_6422F4D1
mov	dword ptr [esp+4], 2Ch 
mov	[esp], eax	
call	_strchr
test	eax, eax
jz	loc_6422F4CE
mov	[ebp+var_54], ebx
mov	dword ptr [esp+4], offset asc_6426F07F 
mov	[esp], esi	
call	_strcspn
mov	[ebp+var_4C], eax
mov	dword ptr [esp+4], 1 
inc	eax
mov	[esp], eax	
call	_silc_calloc
mov	ebx, eax
test	eax, eax
jz	loc_6422EFFC
mov	edi, eax
mov	ecx, [ebp+var_4C]
rep movsb
mov	[esp], eax	
call	_silc_hmac_is_supported
dec	al
jz	loc_6422F4EE
cmp	byte ptr [esi],	0
jz	loc_6422F251
inc	esi
mov	[esp], ebx	
call	_silc_free
test	esi, esi
jnz	short loc_6422F17C
mov	ebx, [ebp+var_54]
mov	edx, [ebp+ptr]
mov	ecx, [edx+30h]
mov	eax, [edx+34h]
jmp	loc_6422F267
test	eax, eax
jnz	loc_6422EDC2
mov	esi, [ebp+ptr]
mov	[esp], esi	
call	_silc_free
mov	ebx, [ebp+remote_payload]
mov	esi, 3
jmp	loc_6422EB39
mov	ecx, [ebp+fsm_context]
mov	dword ptr [ecx+14h], 10h
jmp	loc_6422F006
mov	edx, ebx
mov	ebx, [ebp+var_54]
mov	ecx, [ebp+var_4C]
mov	esi, [ebp+ptr]
mov	[esi+12h], cx
mov	eax, edx
mov	[esi+14h], edx
jmp	loc_6422EDB3
mov	eax, [ebx+14h]
mov	dx, [ebx+12h]
mov	ecx, [ebp+ptr]
mov	[ecx+12h], dx
mov	[esp], eax	
call	_strdup
mov	esi, [ebp+ptr]
mov	[esi+14h], eax
jmp	loc_6422EDC2
mov	edx, ebx
mov	ebx, [ebp+var_54]
mov	[esp], edx	
call	_silc_free
mov	esi, [ebp+ptr]
mov	ecx, [esi+30h]
mov	eax, [esi+34h]
			
test	cx, cx
jz	loc_6422F52A
mov	ecx, [ebp+ptr]
mov	eax, [ecx+34h]
			
mov	ecx, [ebp+fsm_context]
mov	edx, [ecx+18h]
add	edx, 0Ch
mov	[esp+8], edx	
mov	dword ptr [esp+4], 0 
mov	[esp], eax	
call	_silc_hmac_alloc
test	al, al
jz	loc_6422F532
mov	esi, [ebx+3Ch]
test	esi, esi
jz	loc_6422F3DF
mov	dword ptr [esp+4], 2Ch 
mov	[esp], esi	
call	_strchr
test	eax, eax
jz	loc_6422F587
mov	dword ptr [esp+4], offset asc_6426F07F 
mov	[esp], esi	
call	_strcspn
mov	ebx, eax
mov	dword ptr [esp+4], 1 
lea	eax, [eax+1]
mov	[esp], eax	
call	_silc_calloc
test	eax, eax
jz	short loc_6422F330
mov	edi, eax
mov	ecx, ebx
rep movsb
mov	edx, esi
mov	esi, eax
mov	edi, offset aNone 
mov	cl, 5
repe cmpsb
setnbe	byte ptr [ebp+var_4C]
setb	cl
cmp	byte ptr [ebp+var_4C], cl
jz	loc_6422F576
cmp	byte ptr [edx],	0
jz	loc_6422F3D7
lea	esi, [edx+1]
mov	[esp], eax	
call	_silc_free
test	esi, esi
jnz	short loc_6422F2BE
mov	esi, [ebp+ptr]
mov	edx, [esi+38h]
jmp	loc_6422F3E5
align 10h
			
mov	esi, [ebp+fsm_context]
mov	dword ptr [esi+14h], 10h
jmp	loc_6422F006
mov	edx, ebx
mov	ebx, [ebp+var_54]
mov	eax, [ebp+var_4C]
mov	ecx, [ebp+ptr]
mov	[ecx+18h], ax
mov	[ecx+1Ch], edx
jmp	loc_6422EE87
mov	ecx, [ebp+ptr]
mov	eax, [ecx+14h]
mov	[esp], eax	
call	_silc_free
mov	esi, [ebp+ptr]
mov	eax, [esi+1Ch]
mov	[esp], eax	
call	_silc_free
mov	[esp], esi	
call	_silc_free
mov	ebx, [ebp+remote_payload]
mov	esi, 4
jmp	loc_6422EB39
mov	eax, [ebx+1Ch]
mov	edx, [ebx+18h]
mov	ecx, [ebp+ptr]
mov	[ecx+18h], dx
mov	[esp], eax	
call	_strdup
mov	esi, [ebp+ptr]
mov	[esi+1Ch], eax
jmp	loc_6422EE9A
test	esi, esi
jnz	loc_6422EF4F
mov	esi, [ebp+ptr]
mov	eax, [esi+14h]
mov	[esp], eax	
call	_silc_free
jmp	short loc_6422F367
mov	esi, edi
mov	edx, ebx
mov	ebx, [ebp+var_4C]
mov	eax, edx
mov	ecx, [ebp+ptr]
mov	[ecx+20h], dx
mov	[ecx+24h], edi
jmp	loc_6422EF40
mov	[esp], eax	
call	_silc_free
mov	eax, [ebp+ptr]
mov	edx, [eax+38h]
			
mov	ecx, [ebp+ptr]
mov	eax, [ecx+10h]
add	ax, [ecx+12h]
add	eax, 22h
add	eax, [ecx+18h]
add	eax, [ecx+20h]
add	eax, [ecx+28h]
add	eax, [ecx+30h]
add	eax, edx
mov	[ecx+2], ax
mov	esi, [ebp+fsm_context]
mov	[esi+1Ch], ecx
jmp	loc_6422F006
mov	eax, [ebx+24h]
mov	edx, [ebx+20h]
mov	ecx, [ebp+ptr]
mov	[ecx+20h], dx
mov	[esp], eax	
call	_strdup
mov	esi, eax
mov	eax, [ebp+ptr]
mov	[eax+24h], esi
jmp	loc_6422EF4F
mov	ecx, [ebp+ptr]
mov	eax, [ecx+14h]
mov	[esp], eax	
call	_silc_free
mov	esi, [ebp+ptr]
mov	eax, [esi+1Ch]
mov	[esp], eax	
call	_silc_free
mov	eax, [esi+24h]
mov	[esp], eax	
call	_silc_free
mov	[esp], esi	
call	_silc_free
mov	ebx, [ebp+remote_payload]
mov	esi, 6
jmp	loc_6422EB39
test	esi, esi
jnz	loc_6422F137
mov	esi, [ebp+ptr]
mov	eax, [esi+14h]
mov	[esp], eax	
call	_silc_free
jmp	short loc_6422F442
mov	edx, [eax+8]
jmp	loc_6422EA05
			
xor	ebx, ebx
jmp	loc_6422EA25
mov	esi, edi
mov	edx, ebx
mov	ebx, [ebp+var_4C]
mov	eax, edx
mov	ecx, [ebp+ptr]
mov	[ecx+28h], dx
mov	[ecx+2Ch], edi
jmp	loc_6422F128
mov	eax, [ebx+2Ch]
mov	edx, [ebx+28h]
mov	ecx, [ebp+ptr]
mov	[ecx+28h], dx
mov	[esp], eax	
call	_strdup
mov	esi, eax
mov	eax, [ebp+ptr]
mov	[eax+2Ch], esi
jmp	loc_6422F137
mov	eax, [ebx+34h]
mov	edx, [ebx+30h]
mov	ecx, [ebp+ptr]
mov	[ecx+30h], dx
mov	[esp], eax	
call	_strdup
mov	esi, [ebp+ptr]
mov	[esi+34h], eax
jmp	loc_6422F276
mov	edx, ebx
mov	ebx, [ebp+var_54]
mov	ecx, [ebp+var_4C]
mov	esi, [ebp+ptr]
mov	[esi+30h], cx
mov	eax, edx
mov	[esi+34h], edx
jmp	loc_6422F267
mov	eax, [ecx+14h]
mov	[esp], eax	
call	_silc_free
mov	esi, [ebp+ptr]
mov	[esp], esi	
call	_silc_free
mov	ebx, [ebp+remote_payload]
mov	esi, 5
jmp	loc_6422EB39
test	eax, eax
jnz	loc_6422F276
mov	esi, [ebp+ptr]
mov	eax, [esi+14h]
mov	[esp], eax	
call	_silc_free
mov	eax, [esi+1Ch]
mov	[esp], eax	
call	_silc_free
mov	eax, [esi+24h]
mov	[esp], eax	
call	_silc_free
mov	eax, [esi+2Ch]
mov	[esp], eax	
call	_silc_free
mov	[esp], esi	
call	_silc_free
mov	ebx, [ebp+remote_payload]
mov	esi, 7
jmp	loc_6422EB39
mov	edx, ebx
mov	ecx, [ebp+ptr]
mov	[ecx+38h], bx
mov	[ecx+3Ch], eax
jmp	loc_6422F3E5
mov	ecx, [ebp+ptr]
mov	edx, [ecx+38h]
jmp	loc_6422F3E5
align 4
public _silc_ske_free
			
push	ebp
mov	ebp, esp
push	edi
push	esi
push	ebx
sub	esp, 1Ch
mov	ebx, [ebp+ske]
test	ebx, ebx
jz	loc_6422F70C
mov	al, [ske_0+0B8h]
test	al, 1
jnz	loc_6422F714
			
mov	ax, [ske_0+0B6h]
dec	eax
mov	[ske_0+0B6h], ax
test	ax, ax
jnz	loc_6422F70C
mov	eax, [ske_0+1Ch]
test	eax, eax
jz	short loc_6422F5DD
mov	[esp], eax	
call	_silc_ske_payload_start_free
mov	eax, [ske_0+20h]
test	eax, eax
jz	short loc_6422F5EC
mov	[esp], eax	
call	_silc_ske_payload_ke_free
mov	eax, [ske_0+24h]
test	eax, eax
jz	short loc_6422F5FB
mov	[esp], eax	
call	_silc_ske_payload_ke_free
mov	eax, [ske_0+40h]
mov	[esp], eax	
call	_silc_free
mov	eax, [ske_0+18h]
test	eax, eax
jz	short loc_6422F66F
mov	edx, [eax+4]
test	edx, edx
jz	short loc_6422F61F
mov	[esp], edx	
call	_silc_ske_group_free
mov	eax, [ske_0+18h]
mov	edx, [eax+8]
test	edx, edx
jz	short loc_6422F631
mov	[esp], edx	
call	_silc_cipher_free
mov	eax, [ske_0+18h]
mov	edx, [eax+10h]
test	edx, edx
jz	short loc_6422F643
mov	[esp], edx	
call	_silc_hash_free
mov	eax, [ske_0+18h]
mov	edx, [eax+0Ch]
test	edx, edx
jz	short loc_6422F655
mov	[esp], edx	
call	_silc_hmac_free
mov	eax, [ske_0+18h]
mov	edx, [eax+14h]
test	edx, edx
jz	short loc_6422F667
mov	[esp], edx	
call	_silc_pkcs_public_key_free
mov	eax, [ske_0+18h]
mov	[esp], eax	
call	_silc_free
mov	eax, [ske_0+58h]
test	eax, eax
jz	short loc_6422F67E
mov	[esp], eax	
call	_silc_ske_free_key_material
mov	esi, [ske_0+28h]
test	esi, esi
jz	short loc_6422F697
mov	eax, [esi]
mov	[esp], eax	
call	_silc_free
mov	[esp], esi	
call	_silc_free
mov	eax, [ske_0+2Ch]
test	eax, eax
jz	short loc_6422F6B1
mov	[esp], eax	
call	_silc_mp_uninit
mov	eax, [ske_0+2Ch]
mov	[esp], eax	
call	_silc_free
mov	eax, [ske_0+30h]
test	eax, eax
jz	short loc_6422F6CB
mov	[esp], eax	
call	_silc_mp_uninit
mov	eax, [ske_0+30h]
mov	[esp], eax	
call	_silc_free
mov	eax, [ske_0+0ACh]
mov	[esp], eax	
call	_silc_free
mov	eax, [ske_0+34h]
mov	[esp], eax	
call	_silc_free
mov	eax, [ske_0+0Ch]
mov	[esp], eax	
call	_silc_free
mov	ecx, 0BCh
mov	al, 0DDh
mov	edi, ske_0
rep stosb
mov	[ebp+ske], ebx
add	esp, 1Ch
pop	ebx
pop	esi
pop	ske_0
leave
jmp	_silc_free
align 4
			
add	esp, 1Ch
pop	ske_0
pop	esi
pop	edi
leave
retn
mov	dword ptr [ske_0+50h], 0
mov	dword ptr [ske_0+14h], 1
test	al, 8
jnz	short loc_6422F764
or	eax, 8
mov	[ske_0+0B8h], al
test	al, 2
jnz	short loc_6422F76C
mov	dword ptr [esp+4], offset _silc_ske_st_initiator_failure 
lea	esi, [ske_0+64h]
mov	[esp], esi	
call	_silc_fsm_next
			
mov	[esp], esi	
call	_silc_fsm_is_started
test	al, al
jz	loc_6422F5B6
mov	[esp], esi	
call	_silc_fsm_continue_sync
jmp	loc_6422F5B6
align 4
lea	esi, [ske_0+64h]
jmp	short loc_6422F746
align 4
mov	dword ptr [esp+4], offset _silc_ske_st_responder_failure 
lea	esi, [ske_0+64h]
mov	[esp], esi	
call	_silc_fsm_next
jmp	short loc_6422F746
align 4
			
push	ebp
mov	ebp, esp
sub	esp, 8
mov	eax, [ebp+fsm_context]
mov	[ebp+fsm], eax
leave
jmp	_silc_ske_free
align 4
public _silc_ske_st_responder_phase2
			
push	ebp
mov	ebp, esp
push	edi
push	esi
push	ebx
sub	esp, 4Ch
mov	esi, [ebp+fsm]
mov	ebx, [ebp+fsm_context]
mov	eax, [ebx+50h]
cmp	byte ptr [eax+22h], 0Eh
jz	loc_6422F848
mov	eax, [fsm_context_0]
mov	[esp], eax	
call	_silc_packet_stream_is_udp
test	al, al
jz	short loc_6422F827
mov	ecx, [fsm_context_0+0ACh]
test	ecx, ecx
jz	short loc_6422F806
mov	dword ptr [esp+18h], 1 
mov	dword ptr [esp+14h], 0 
movzx	eax, word ptr [fsm_context_0+0A2h]
mov	[esp+10h], eax	
mov	[esp+0Ch], fsm_context_0 
mov	dword ptr [esp+8], offset _silc_ske_packet_send_retry 
mov	dword ptr [esp+4], 0 
mov	eax, [fsm_context_0+60h]
mov	[esp], eax	
call	_silc_schedule_task_add
mov	si, [fsm_context_0+0A2h]
shl	esi, 1
mov	eax, [fsm_context_0+4]
mov	[esp], eax	
call	_silc_rng_get_rn16
and	eax, 1
lea	esi, [eax+esi]
mov	[fsm_context_0+0A2h], si
mov	eax, [fsm_context_0+50h]
mov	[esp], eax	
call	_silc_packet_free
mov	dword ptr [fsm_context_0+50h], 0
mov	eax, 2
			
add	esp, 4Ch
pop	fsm_context_0
pop	esi
pop	find
leave
retn
align 4
lea	edx, [ebp+recv_payload]
mov	[esp+8], edx	
add	eax, 8
mov	[esp+4], eax	
mov	[esp], fsm_context_0 
call	_silc_ske_payload_ke_decode
test	eax, eax
jnz	short loc_6422F898
mov	status,	[ebp+recv_payload]
mov	[fsm_context_0+20h], eax
mov	eax, [fsm_context_0+50h]
mov	[esp], eax	
call	_silc_packet_free
mov	dword ptr [fsm_context_0+50h], 0
mov	edx, [fsm_context_0+5Ch]
test	edx, edx
jz	short loc_6422F8CC
mov	dword ptr [esp+4], offset _silc_ske_st_responder_phase4	
mov	[esp], fsm_0	
call	_silc_fsm_next
xor	eax, eax
jmp	short loc_6422F83E
align 4
mov	edx, [fsm_context_0+50h]
mov	[esp], edx	
mov	[ebp+var_2C], status
call	_silc_packet_free
mov	dword ptr [fsm_context_0+50h], 0
mov	eax, [ebp+var_2C]
mov	[fsm_context_0+14h], eax
mov	dword ptr [esp+4], offset _silc_ske_st_responder_error 
mov	[esp], fsm_0	
call	_silc_fsm_next
xor	eax, eax
jmp	loc_6422F83E
align 4
mov	eax, [ebp+recv_payload]
mov	edx, [eax+4]
test	edx, edx
jz	loc_6422FA4F
mov	ecx, [fsm_context_0+18h]
add	ecx, 14h
mov	[esp+0Ch], ecx	
movzx	ecx, word ptr [eax]
mov	[esp+8], ecx	
mov	[esp+4], edx	
movzx	eax, word ptr [eax+8]
mov	[esp], eax	
call	_silc_pkcs_public_key_alloc
test	al, al
jz	loc_6422F9C0
mov	dword ptr [esp+4], offset _silc_ske_st_responder_phase4	
mov	[esp], fsm_0	
call	_silc_fsm_next
mov	eax, [fsm_context_0+8]
test	eax, eax
jz	loc_6422F9FA
call	_silc_skr_find_alloc
mov	edi, eax
test	eax, eax
jz	loc_6422FAEB
mov	find, [fsm_context_0+18h]
mov	eax, [eax+14h]
mov	[esp], eax	
call	_silc_pkcs_get_type
mov	[esp+4], eax	
mov	[esp], find	
call	_silc_skr_find_set_pkcs_type
mov	eax, [fsm_context_0+18h]
mov	eax, [eax+14h]
mov	[esp+4], eax	
mov	[esp], find	
call	_silc_skr_find_set_public_key
mov	dword ptr [esp+4], 4 
mov	[esp], find	
call	_silc_skr_find_set_usage
mov	al, [fsm_0+28h]
mov	dl, al
or	edx, 4
mov	[fsm_0+28h], dl
test	al, 4
jnz	loc_6422FA89
mov	[esp], fsm_0	
call	_silc_fsm_get_schedule
mov	[esp+10h], fsm_context_0 
mov	dword ptr [esp+0Ch], offset _silc_ske_skr_callback 
mov	[esp+8], find	
mov	[esp+4], eax	
mov	eax, [fsm_context_0+8]
mov	[esp], eax	
call	_silc_skr_find
mov	al, [fsm_0+28h]
mov	dl, al
and	edx, 0FFFFFFFBh
mov	[fsm_0+28h], dl
test	al, 4
jz	loc_6422FA48
mov	eax, 2
jmp	loc_6422F83E
mov	dword ptr [esp], offset	aUnsupportedMal	
call	_silc_format
mov	[esp+4], eax	
mov	dword ptr [esp], 3 
call	_silc_log_output
mov	dword ptr [fsm_context_0+14h], 8
mov	dword ptr [esp+4], offset _silc_ske_st_responder_error 
mov	[esp], fsm_0	
call	_silc_fsm_next
xor	eax, eax
jmp	loc_6422F83E
mov	eax, [fsm_context_0+0Ch]
mov	edi, [eax]
test	edi, edi
jz	loc_6422F881
mov	al, [fsm_0+28h]
mov	dl, al
or	edx, 4
mov	[fsm_0+28h], dl
test	al, 4
jnz	loc_6422FABA
mov	eax, [fsm_context_0+0Ch]
mov	dword ptr [esp+10h], 0
mov	dword ptr [esp+0Ch], offset _silc_ske_pk_verified
mov	edx, [eax+8]
mov	[esp+8], edx
mov	edx, [fsm_context_0+18h]
mov	edx, [edx+14h]
mov	[esp+4], edx
mov	[esp], fsm_context_0
call	dword ptr [eax]
jmp	loc_6422F9A3
xor	eax, eax
jmp	loc_6422F83E
mov	dword ptr [esp], offset	aRemoteEndDidNo	
call	_silc_format
mov	[esp+4], eax	
mov	dword ptr [esp], 3 
call	_silc_log_output
mov	dword ptr [fsm_context_0+14h], 0Ch
mov	dword ptr [esp+4], offset _silc_ske_st_responder_error 
mov	[esp], fsm_0	
call	_silc_fsm_next
xor	eax, eax
jmp	loc_6422F83E
mov	dword ptr [esp+8], 834h
mov	dword ptr [esp+4], offset aSilcske_c 
mov	dword ptr [esp], offset	aSilc_verifyS_1	
call	_silc_format
mov	[esp+4], eax	
mov	dword ptr [esp], 3 
call	_silc_log_output
jmp	loc_6422F97C
mov	dword ptr [esp+8], 83Ah
mov	dword ptr [esp+4], offset aSilcske_c 
mov	dword ptr [esp], offset	aSilc_verifyS_1	
call	_silc_format
mov	[esp+4], eax	
mov	dword ptr [esp], 3 
call	_silc_log_output
jmp	loc_6422FA1A
mov	dword ptr [fsm_context_0+14h], 10h
mov	dword ptr [esp+4], offset _silc_ske_st_responder_error 
mov	[esp], fsm_0	
call	_silc_fsm_next
xor	eax, eax
jmp	loc_6422F83E
align 4
public _silc_ske_st_initiator_phase3
push	ebp
mov	ebp, esp
push	edi
push	esi
push	ebx
sub	esp, 4Ch
mov	esi, [ebp+fsm]
mov	ebx, [ebp+fsm_context]
mov	eax, [ebx+50h]
cmp	byte ptr [eax+22h], 0Fh
jz	loc_6422FBBC
mov	eax, [fsm_context_0]
mov	[esp], eax	
call	_silc_packet_stream_is_udp
test	al, al
jz	short loc_6422FB9B
mov	fsm_0, [fsm_context_0+0ACh]
test	esi, esi
jz	short loc_6422FB7A
mov	dword ptr [esp+18h], 1 
mov	dword ptr [esp+14h], 0 
movzx	eax, word ptr [fsm_context_0+0A2h]
mov	[esp+10h], eax	
mov	[esp+0Ch], fsm_context_0 
mov	dword ptr [esp+8], offset _silc_ske_packet_send_retry 
mov	dword ptr [esp+4], 0 
mov	eax, [fsm_context_0+60h]
mov	[esp], eax	
call	_silc_schedule_task_add
mov	si, [fsm_context_0+0A2h]
shl	esi, 1
mov	eax, [fsm_context_0+4]
mov	[esp], eax	
call	_silc_rng_get_rn16
and	eax, 1
lea	esi, [eax+esi]
mov	[fsm_context_0+0A2h], si
mov	eax, [fsm_context_0+50h]
mov	[esp], eax	
call	_silc_packet_free
mov	dword ptr [fsm_context_0+50h], 0
mov	eax, 2
			
add	esp, 4Ch
pop	fsm_context_0
pop	esi
pop	find
leave
retn
align 4
lea	edx, [ebp+payload]
mov	[esp+8], edx	
add	eax, 8
mov	[esp+4], eax	
mov	[esp], fsm_context_0 
call	_silc_ske_payload_ke_decode
test	eax, eax
jnz	loc_6422FDBC
mov	status,	[fsm_context_0+50h]
mov	[esp], eax	
call	_silc_packet_free
mov	dword ptr [fsm_context_0+50h], 0
mov	eax, [ebp+payload]
mov	[fsm_context_0+24h], eax
mov	ecx, [eax+4]
test	ecx, ecx
jz	loc_6422FE58
mov	dword ptr [esp+4], 10h 
mov	dword ptr [esp], 1 
call	_silc_calloc
mov	edi, eax
mov	[esp], eax	
call	_silc_mp_init
mov	eax, [fsm_context_0+18h]
mov	eax, [eax+4]
add	eax, 8
mov	[esp+0Ch], eax	
mov	eax, [fsm_context_0+2Ch]
mov	[esp+8], eax	
mov	eax, [ebp+payload]
add	eax, 0Ch
mov	[esp+4], eax	
mov	[esp], edi	
call	_silc_mp_pow_mod
mov	[fsm_context_0+30h], edi
mov	eax, [ebp+payload]
mov	edx, [eax+4]
test	edx, edx
jz	loc_6422FCE4
mov	ecx, [fsm_context_0+18h]
add	ecx, 14h
mov	[esp+0Ch], ecx	
movzx	ecx, word ptr [eax]
mov	[esp+8], ecx	
mov	[esp+4], edx	
movzx	eax, word ptr [eax+8]
mov	[esp], eax	
call	_silc_pkcs_public_key_alloc
test	al, al
jnz	short loc_6422FCE4
mov	dword ptr [esp], offset	aUnsupportedMal	
call	_silc_format
mov	[esp+4], eax	
mov	dword ptr [esp], 3 
call	_silc_log_output
mov	edi, 8
mov	find, [ebp+payload]
mov	[esp], eax	
call	_silc_ske_payload_ke_free
mov	dword ptr [fsm_context_0+24h], 0
mov	eax, [fsm_context_0+30h]
mov	[esp], eax	
call	_silc_mp_uninit
mov	eax, [fsm_context_0+30h]
mov	[esp], eax	
call	_silc_free
mov	dword ptr [fsm_context_0+30h], 0
mov	[fsm_context_0+14h], status
mov	dword ptr [esp+4], offset _silc_ske_st_initiator_error 
mov	[esp], fsm_0	
call	_silc_fsm_next
xor	eax, eax
jmp	loc_6422FBB2
align 4
			
mov	eax, [fsm_context_0+18h]
mov	ecx, [eax+14h]
test	ecx, ecx
jz	loc_6422FDFB
mov	eax, [fsm_context_0+0Ch]
mov	edx, [eax]
test	edx, edx
jz	loc_6422FDF0
mov	dword ptr [esp+4], offset _silc_ske_st_initiator_phase4	
mov	[esp], fsm_0	
call	_silc_fsm_next
mov	edi, [fsm_context_0+8]
test	edi, edi
jz	loc_6422FE14
call	_silc_skr_find_alloc
mov	edi, eax
test	eax, eax
jz	loc_6422FEA4
mov	find, [fsm_context_0+18h]
mov	eax, [eax+14h]
mov	[esp], eax	
call	_silc_pkcs_get_type
mov	[esp+4], eax	
mov	[esp], find	
call	_silc_skr_find_set_pkcs_type
mov	eax, [fsm_context_0+18h]
mov	eax, [eax+14h]
mov	[esp+4], eax	
mov	[esp], find	
call	_silc_skr_find_set_public_key
mov	dword ptr [esp+4], 4 
mov	[esp], find	
call	_silc_skr_find_set_usage
mov	al, [fsm_0+28h]
mov	dl, al
or	edx, 4
mov	[fsm_0+28h], dl
test	al, 4
jnz	loc_6422FEAE
mov	[esp], fsm_0	
call	_silc_fsm_get_schedule
mov	[esp+10h], fsm_context_0 
mov	dword ptr [esp+0Ch], offset _silc_ske_skr_callback 
mov	[esp+8], find	
mov	[esp+4], eax	
mov	eax, [fsm_context_0+8]
mov	[esp], eax	
call	_silc_skr_find
mov	al, [fsm_0+28h]
mov	dl, al
and	edx, 0FFFFFFFBh
mov	[fsm_0+28h], dl
test	al, 4
jz	loc_6422FCDA
mov	eax, 2
jmp	loc_6422FBB2
mov	edx, [fsm_context_0+50h]
mov	[esp], edx	
mov	[ebp+var_2C], status
call	_silc_packet_free
mov	dword ptr [fsm_context_0+50h], 0
mov	eax, [ebp+var_2C]
mov	[fsm_context_0+14h], eax
mov	dword ptr [esp+4], offset _silc_ske_st_initiator_error 
mov	[esp], fsm_0	
call	_silc_fsm_next
xor	eax, eax
jmp	loc_6422FBB2
align 10h
mov	eax, [fsm_context_0+8]
test	eax, eax
jnz	loc_6422FCFF
mov	dword ptr [esp+4], offset _silc_ske_st_initiator_phase4	
mov	[esp], fsm_0	
call	_silc_fsm_next
xor	eax, eax
jmp	loc_6422FBB2
align 4
mov	al, [fsm_0+28h]
mov	dl, al
or	edx, 4
mov	[fsm_0+28h], dl
test	al, 4
jnz	loc_6422FEDF
mov	eax, [fsm_context_0+0Ch]
mov	dword ptr [esp+10h], 0
mov	dword ptr [esp+0Ch], offset _silc_ske_pk_verified
mov	edx, [eax+8]
mov	[esp+8], edx
mov	edx, [fsm_context_0+18h]
mov	edx, [edx+14h]
mov	[esp+4], edx
mov	[esp], fsm_context_0
call	dword ptr [eax]
jmp	loc_6422FD9F
align 4
mov	edx, [fsm_context_0+0Ch]
mov	edx, [edx]
test	edx, edx
jz	loc_6422FF10
mov	dword ptr [fsm_context_0+14h], 0Ch
mov	[esp], eax
call	_silc_ske_payload_ke_free
mov	dword ptr [fsm_context_0+24h], 0
mov	eax, [fsm_context_0+30h]
mov	[esp], eax	
call	_silc_mp_uninit
mov	eax, [fsm_context_0+30h]
mov	[esp], eax	
call	_silc_free
mov	dword ptr [fsm_context_0+30h], 0
mov	eax, 1
jmp	loc_6422FBB2
align 4
mov	edi, 10h
jmp	loc_6422FC98
mov	dword ptr [esp+8], 62Eh
mov	dword ptr [esp+4], offset aSilcske_c 
mov	dword ptr [esp], offset	aSilc_verifyS_1	
call	_silc_format
mov	[esp+4], eax	
mov	dword ptr [esp], 3 
call	_silc_log_output
jmp	loc_6422FD78
mov	dword ptr [esp+8], 633h
mov	dword ptr [esp+4], offset aSilcske_c 
mov	dword ptr [esp], offset	aSilc_verifyS_1	
call	_silc_format
mov	[esp+4], eax	
mov	dword ptr [esp], 3 
call	_silc_log_output
jmp	loc_6422FE27
mov	edi, [fsm_context_0+8]
test	edi, edi
jnz	loc_6422FE65
jmp	loc_6422FBFD
public _silc_ske_st_initiator_phase1
push	ebp
mov	ebp, esp
push	edi
push	esi
push	ebx
sub	esp, 6Ch
mov	ebx, [ebp+fsm_context]
mov	[ebp+group], 0
mov	eax, [ebx+50h]
cmp	byte ptr [eax+22h], 0Dh
jz	loc_6422FFD4
mov	eax, [fsm_context_0]
mov	[esp], eax	
call	_silc_packet_stream_is_udp
test	al, al
jz	short loc_6422FFB3
mov	edi, [fsm_context_0+0ACh]
test	edi, edi
jz	short loc_6422FF92
mov	dword ptr [esp+18h], 1 
mov	dword ptr [esp+14h], 0 
movzx	eax, word ptr [fsm_context_0+0A2h]
mov	[esp+10h], eax	
mov	[esp+0Ch], fsm_context_0 
mov	dword ptr [esp+8], offset _silc_ske_packet_send_retry 
mov	dword ptr [esp+4], 0 
mov	eax, [fsm_context_0+60h]
mov	[esp], eax	
call	_silc_schedule_task_add
mov	si, [fsm_context_0+0A2h]
shl	esi, 1
mov	eax, [fsm_context_0+4]
mov	[esp], eax	
call	_silc_rng_get_rn16
and	eax, 1
lea	esi, [eax+esi]
mov	[fsm_context_0+0A2h], si
mov	eax, [fsm_context_0+50h]
mov	[esp], eax	
call	_silc_packet_free
mov	dword ptr [fsm_context_0+50h], 0
mov	eax, 2
			
add	esp, 6Ch
pop	fsm_context_0
pop	prop
pop	status
leave
retn
align 4
lea	edx, [ebp+payload]
mov	[esp+8], edx	
add	eax, 8
mov	[esp+4], eax	
mov	[esp], fsm_context_0 
call	_silc_ske_payload_start_decode
test	eax, eax
jnz	loc_64230230
mov	status,	[fsm_context_0+50h]
mov	dl, [eax+20h]
test	dl, 3Fh
jz	short loc_6423006C
and	edx, 0FFFFFFC0h
cmp	dl, 40h
jz	loc_642301F8
mov	edx, 1Dh
lea	esi, [ebp+id]
mov	[esp+10h], edx	
mov	[esp+0Ch], esi	
mov	dl, [eax+20h]
shr	dl, 6
movzx	edx, dl
mov	[esp+8], edx	
mov	dl, [eax+20h]
and	edx, 3Fh
mov	[esp+4], edx	
mov	eax, [eax+18h]
mov	[esp], eax	
call	_silc_id_str2id
mov	eax, [fsm_context_0+50h]
mov	[esp+10h], esi	
mov	al, [eax+20h]
shr	al, 6
movzx	eax, al
mov	[esp+0Ch], eax	
mov	dword ptr [esp+8], 0 
mov	dword ptr [esp+4], 0 
mov	eax, [fsm_context_0]
mov	[esp], eax	
call	_silc_packet_set_ids
mov	eax, [fsm_context_0+50h]
mov	[esp], eax	
call	_silc_packet_free
mov	dword ptr [fsm_context_0+50h], 0
mov	eax, [ebp+payload]
test	byte ptr [eax],	1
jz	short loc_64230091
cmp	word ptr [fsm_context_0+0A0h], 0
jnz	loc_642301B0
mov	edx, [fsm_context_0+1Ch]
mov	esi, [edx+4]
xor	edi, edi
mov	ecx, 10h
mov	[ebp+remote_port], 0
add	esi, edi
add	edi, [eax+4]
cmp	ecx, ecx
repe cmpsb
jnz	loc_64230208
movzx	edx, word ptr [eax+10h]
mov	[esp+4], edx	
mov	eax, [eax+0Ch]
mov	[esp], eax	
call	_silc_memdup
mov	[fsm_context_0+40h], eax
mov	eax, fsm_context_0 
call	_silc_ske_check_version
mov	edi, eax
test	eax, eax
jnz	loc_642301D8
mov	status,	[fsm_context_0+1Ch]
mov	[esp], eax	
call	_silc_ske_payload_start_free
mov	dword ptr [fsm_context_0+1Ch], 0
mov	dword ptr [esp+4], 1Ch 
mov	dword ptr [esp], 1 
call	_silc_calloc
mov	esi, eax
mov	[fsm_context_0+18h], eax
test	eax, eax
jz	short err
mov	prop, [ebp+payload]
movzx	edx, byte ptr [eax]
mov	[prop],	edx
lea	edx, [ebp+group]
mov	[esp+4], edx	
mov	eax, [eax+14h]
mov	[esp], eax	
call	_silc_ske_group_get_by_name
mov	status,	eax
test	eax, eax
jz	loc_64230250
			
mov	eax, [ebp+payload]
test	eax, eax
jz	short loc_6423013C
mov	[esp], eax	
call	_silc_ske_payload_start_free
mov	eax, [ebp+group]
test	eax, eax
jz	short loc_6423014B
mov	[esp], eax	
call	_silc_ske_group_free
mov	eax, [prop+8]
test	eax, eax
jz	short loc_6423015A
mov	[esp], eax	
call	_silc_cipher_free
mov	eax, [prop+10h]
test	eax, eax
jz	short loc_64230169
mov	[esp], eax	
call	_silc_hash_free
mov	eax, [prop+0Ch]
test	eax, eax
jz	short loc_64230178
mov	[esp], eax	
call	_silc_hmac_free
mov	[esp], prop	
call	_silc_free
mov	dword ptr [fsm_context_0+18h], 0
test	status,	status
jnz	short loc_6423018F
mov	di, 1
mov	[fsm_context_0+14h], status
			
mov	dword ptr [esp+4], offset _silc_ske_st_initiator_error 
mov	eax, [ebp+fsm]
mov	[esp], eax	
call	_silc_fsm_next
xor	eax, eax
add	esp, 6Ch
pop	fsm_context_0
pop	prop
pop	status
leave
retn
align 10h
mov	edx, [fsm_context_0+1Ch]
mov	esi, [edx+4]
movzx	edx, byte ptr [esi+1]
mov	[ebp+remote_port], dx
movzx	edx, byte ptr [esi]
shl	edx, 8
or	[ebp+remote_port], dx
mov	edi, 2
mov	ecx, 0Eh
jmp	loc_642300A4
align 4
mov	[fsm_context_0+14h], status
mov	dword ptr [esp+4], offset _silc_ske_st_initiator_error 
mov	edx, [ebp+fsm]
mov	[esp], edx	
call	_silc_fsm_next
xor	eax, eax
jmp	loc_6422FFCA
align 4
mov	edx, 16h
lea	esi, [ebp+id]
jmp	loc_64230011
align 4
mov	dword ptr [esp], offset	aInvalidCookieM	
call	_silc_format
mov	[esp+4], eax	
mov	dword ptr [esp], 3 
call	_silc_log_output
mov	dword ptr [fsm_context_0+14h], 0Bh
jmp	loc_64230192
mov	edx, [fsm_context_0+50h]
mov	[esp], edx	
mov	[ebp+var_50], status
call	_silc_packet_free
mov	dword ptr [fsm_context_0+50h], 0
mov	eax, [ebp+var_50]
mov	[fsm_context_0+14h], eax
jmp	loc_64230192
mov	status,	[ebp+group]
mov	[prop+4], eax
mov	ax, [ebp+remote_port]
mov	[prop+18h], ax
mov	dword ptr [esp+4], 0 
mov	eax, [ebp+payload]
mov	eax, [eax+1Ch]
mov	[esp], eax	
call	_silc_pkcs_find_algorithm
test	eax, eax
jz	short loc_6423029A
lea	eax, [prop+8]
mov	[esp+4], eax	
mov	eax, [ebp+payload]
mov	eax, [eax+24h]
mov	[esp], eax	
call	_silc_cipher_alloc
test	al, al
jnz	short loc_642302A4
mov	di, 4
jmp	err
mov	status,	5
jmp	err
lea	eax, [prop+10h]
mov	[esp+4], eax	
mov	eax, [ebp+payload]
mov	eax, [eax+2Ch]
mov	[esp], eax	
call	_silc_hash_alloc
test	al, al
jnz	short loc_642302C7
mov	status,	6
jmp	err
lea	eax, [prop+0Ch]
mov	[esp+8], eax	
mov	dword ptr [esp+4], 0 
mov	eax, [ebp+payload]
mov	eax, [eax+34h]
mov	[esp], eax	
call	_silc_hmac_alloc
mov	status,	7
test	al, al
jz	err
mov	eax, [ebp+payload]
mov	[fsm_context_0+1Ch], eax
mov	dword ptr [esp+4], offset _silc_ske_st_initiator_phase2	
mov	edx, [ebp+fsm]
mov	[esp], edx	
call	_silc_fsm_next
xor	eax, eax
jmp	loc_6422FFCA
align 4
public _silc_ske_st_responder_failure
			
push	ebp
mov	ebp, esp
push	esi
push	ebx
sub	esp, 20h
mov	ebx, [ebp+fsm_context]
mov	eax, [ebx+50h]
test	eax, eax
jz	short loc_64230337
mov	ecx, [eax+0Ch]
mov	edx, [eax+10h]
sub	edx, ecx
cmp	edx, 4
jz	loc_642303E8
mov	esi, 1
mov	[fsm_context_0+14h], error
mov	[esp+8], fsm_context_0 
mov	dword ptr [esp+4], offset _silc_ske_stream_cbs 
mov	eax, [fsm_context_0]
mov	[esp], eax	
call	_silc_packet_stream_unlink
mov	[esp+4], fsm_context_0 
mov	eax, [fsm_context_0+60h]
mov	[esp], eax	
call	_silc_schedule_task_del_by_context
test	byte ptr [fsm_context_0+0B8h], 1
jnz	short loc_642303A7
mov	edx, [fsm_context_0+0Ch]
mov	eax, [edx+4]
test	eax, eax
jz	short loc_642303A7
mov	ecx, [fsm_context_0+14h]
test	ecx, ecx
jnz	short loc_642303B4
mov	edx, [edx+8]
mov	[esp+14h], edx
mov	edx, [fsm_context_0+5Ch]
mov	[esp+10h], edx
mov	edx, [fsm_context_0+58h]
mov	[esp+0Ch], edx
mov	edx, [fsm_context_0+18h]
mov	[esp+8], edx
mov	dword ptr [esp+4], 0
mov	[esp], fsm_context_0
call	eax
			
mov	eax, 3
add	esp, 20h
pop	fsm_context_0
pop	error
leave
retn
align 4
mov	edx, [edx+8]
mov	[esp+14h], edx
mov	dword ptr [esp+10h], 0
mov	dword ptr [esp+0Ch], 0
mov	dword ptr [esp+8], 0
mov	[esp+4], ecx
mov	[esp], fsm_context_0
call	eax
mov	eax, 3
add	esp, 20h
pop	fsm_context_0
pop	error
leave
retn
movzx	esi, byte ptr [ecx+3]
movzx	edx, byte ptr [ecx]
shl	edx, 18h
or	error, edx
movzx	edx, byte ptr [ecx+1]
shl	edx, 10h
or	error, edx
movzx	edx, byte ptr [ecx+2]
shl	edx, 8
or	error, edx
mov	[esp], eax	
call	_silc_packet_free
mov	dword ptr [fsm_context_0+50h], 0
jmp	loc_6423033C
align 4
public _silc_ske_st_initiator_failure
			
push	ebp
mov	ebp, esp
push	esi
push	ebx
sub	esp, 20h
mov	ebx, [ebp+fsm_context]
mov	eax, [ebx+50h]
test	eax, eax
jz	short loc_6423043F
mov	ecx, [eax+0Ch]
mov	edx, [eax+10h]
sub	edx, ecx
cmp	edx, 4
jz	loc_642304F0
mov	esi, 1
mov	[fsm_context_0+14h], error
mov	[esp+8], fsm_context_0 
mov	dword ptr [esp+4], offset _silc_ske_stream_cbs 
mov	eax, [fsm_context_0]
mov	[esp], eax	
call	_silc_packet_stream_unlink
mov	[esp+4], fsm_context_0 
mov	eax, [fsm_context_0+60h]
mov	[esp], eax	
call	_silc_schedule_task_del_by_context
test	byte ptr [fsm_context_0+0B8h], 1
jnz	short loc_642304AF
mov	edx, [fsm_context_0+0Ch]
mov	eax, [edx+4]
test	eax, eax
jz	short loc_642304AF
mov	ecx, [fsm_context_0+14h]
test	ecx, ecx
jnz	short loc_642304BC
mov	edx, [edx+8]
mov	[esp+14h], edx
mov	edx, [fsm_context_0+5Ch]
mov	[esp+10h], edx
mov	edx, [fsm_context_0+58h]
mov	[esp+0Ch], edx
mov	edx, [fsm_context_0+18h]
mov	[esp+8], edx
mov	dword ptr [esp+4], 0
mov	[esp], fsm_context_0
call	eax
			
mov	eax, 3
add	esp, 20h
pop	fsm_context_0
pop	error
leave
retn
align 4
mov	edx, [edx+8]
mov	[esp+14h], edx
mov	dword ptr [esp+10h], 0
mov	dword ptr [esp+0Ch], 0
mov	dword ptr [esp+8], 0
mov	[esp+4], ecx
mov	[esp], fsm_context_0
call	eax
mov	eax, 3
add	esp, 20h
pop	fsm_context_0
pop	error
leave
retn
movzx	esi, byte ptr [ecx+3]
movzx	edx, byte ptr [ecx]
shl	edx, 18h
or	error, edx
movzx	edx, byte ptr [ecx+1]
shl	edx, 10h
or	error, edx
movzx	edx, byte ptr [ecx+2]
shl	edx, 8
or	error, edx
mov	[esp], eax	
call	_silc_packet_free
mov	dword ptr [fsm_context_0+50h], 0
jmp	loc_64230444
align 4
public _silc_ske_st_responder_error
			
push	ebp
mov	ebp, esp
push	ebx
sub	esp, 34h
mov	ebx, [ebp+fsm_context]
cmp	dword ptr [ebx+14h], 0Bh
jbe	short loc_6423053B
mov	dword ptr [fsm_context_0+14h], 2
mov	[ebp+tmp], 0
mov	eax, [fsm_context_0+14h]
mov	edx, eax
shr	edx, 10h
mov	[ebp+tmp+1], dl
mov	edx, eax
shr	edx, 8
mov	[ebp+tmp+2], dl
mov	[ebp+tmp+3], al
mov	dword ptr [esp+4], 4 
lea	eax, [ebp+tmp]
mov	[esp], eax	
xor	ecx, ecx	
mov	edx, 3		
mov	eax, fsm_context_0 
call	_silc_ske_packet_send
mov	[esp+8], fsm_context_0 
mov	dword ptr [esp+4], offset _silc_ske_stream_cbs 
mov	eax, [fsm_context_0]
mov	[esp], eax	
call	_silc_packet_stream_unlink
mov	[esp+4], fsm_context_0 
mov	eax, [fsm_context_0+60h]
mov	[esp], eax	
call	_silc_schedule_task_del_by_context
test	byte ptr [fsm_context_0+0B8h], 1
jnz	short loc_642305D9
mov	edx, [fsm_context_0+0Ch]
mov	eax, [edx+4]
test	eax, eax
jz	short loc_642305D9
mov	ecx, [fsm_context_0+14h]
test	ecx, ecx
jnz	short loc_642305E4
mov	edx, [edx+8]
mov	[esp+14h], edx
mov	edx, [fsm_context_0+5Ch]
mov	[esp+10h], edx
mov	edx, [fsm_context_0+58h]
mov	[esp+0Ch], edx
mov	edx, [fsm_context_0+18h]
mov	[esp+8], edx
mov	dword ptr [esp+4], 0
mov	[esp], fsm_context_0
call	eax
			
mov	eax, 3
add	esp, 34h
pop	fsm_context_0
leave
retn
mov	edx, [edx+8]
mov	[esp+14h], edx
mov	dword ptr [esp+10h], 0
mov	dword ptr [esp+0Ch], 0
mov	dword ptr [esp+8], 0
mov	[esp+4], ecx
mov	[esp], fsm_context_0
call	eax
mov	eax, 3
add	esp, 34h
pop	fsm_context_0
leave
retn
align 4
public _silc_ske_st_responder_aborted
			
push	ebp
mov	ebp, esp
push	ebx
sub	esp, 34h
mov	ebx, [ebp+fsm_context]
mov	[ebp+tmp], 0
mov	[ebp+tmp+1], 0
mov	[ebp+tmp+2], 0
mov	[ebp+tmp+3], 1
mov	dword ptr [esp+4], 4 
lea	eax, [ebp+tmp]
mov	[esp], eax	
xor	ecx, ecx	
mov	edx, 3		
mov	eax, ebx	
call	_silc_ske_packet_send
mov	[esp+8], ebx	
mov	dword ptr [esp+4], offset _silc_ske_stream_cbs 
mov	eax, [ebx]
mov	[esp], eax	
call	_silc_packet_stream_unlink
mov	[esp+4], ebx	
mov	eax, [ebx+60h]
mov	[esp], eax	
call	_silc_schedule_task_del_by_context
test	byte ptr [ebx+0B8h], 1
jnz	short loc_642306B6
mov	edx, [fsm_context_0+0Ch]
mov	eax, [edx+4]
test	eax, eax
jz	short loc_642306B6
mov	ecx, [fsm_context_0+14h]
test	ecx, ecx
jnz	short loc_642306C4
mov	edx, [edx+8]
mov	[esp+14h], edx
mov	edx, [fsm_context_0+5Ch]
mov	[esp+10h], edx
mov	edx, [fsm_context_0+58h]
mov	[esp+0Ch], edx
mov	edx, [fsm_context_0+18h]
mov	[esp+8], edx
mov	dword ptr [esp+4], 0
mov	[esp], fsm_context_0
call	eax
			
mov	eax, 3
add	esp, 34h
pop	fsm_context_0
leave
retn
align 4
mov	edx, [edx+8]
mov	[esp+14h], edx
mov	dword ptr [esp+10h], 0
mov	dword ptr [esp+0Ch], 0
mov	dword ptr [esp+8], 0
mov	[esp+4], ecx
mov	[esp], fsm_context_0
call	eax
mov	eax, 3
add	esp, 34h
pop	fsm_context_0
leave
retn
align 4
public _silc_ske_st_initiator_error
			
push	ebp
mov	ebp, esp
push	ebx
sub	esp, 34h
mov	ebx, [ebp+fsm_context]
mov	eax, [ebx+14h]
cmp	status,	0Bh
jbe	short loc_6423070C
mov	al, 1
mov	[ebp+data], 0
mov	[ebp+data+1], 0
mov	[ebp+data+2], 0
mov	[ebp+data+3], al
mov	dword ptr [esp+4], 4 
lea	eax, [ebp+data]
mov	[esp], eax	
xor	ecx, ecx	
mov	edx, 3		
mov	eax, fsm_context_0 
call	_silc_ske_packet_send
mov	[esp+8], fsm_context_0 
mov	dword ptr [esp+4], offset _silc_ske_stream_cbs 
mov	eax, [fsm_context_0]
mov	[esp], eax	
call	_silc_packet_stream_unlink
mov	[esp+4], fsm_context_0 
mov	eax, [fsm_context_0+60h]
mov	[esp], eax	
call	_silc_schedule_task_del_by_context
test	byte ptr [fsm_context_0+0B8h], 1
jnz	short loc_6423079F
mov	edx, [fsm_context_0+0Ch]
mov	eax, [edx+4]
test	eax, eax
jz	short loc_6423079F
mov	ecx, [fsm_context_0+14h]
test	ecx, ecx
jnz	short loc_642307AC
mov	edx, [edx+8]
mov	[esp+14h], edx
mov	edx, [fsm_context_0+5Ch]
mov	[esp+10h], edx
mov	edx, [fsm_context_0+58h]
mov	[esp+0Ch], edx
mov	edx, [fsm_context_0+18h]
mov	[esp+8], edx
mov	dword ptr [esp+4], 0
mov	[esp], fsm_context_0
call	eax
			
mov	eax, 3
add	esp, 34h
pop	fsm_context_0
leave
retn
align 4
mov	edx, [edx+8]
mov	[esp+14h], edx
mov	dword ptr [esp+10h], 0
mov	dword ptr [esp+0Ch], 0
mov	dword ptr [esp+8], 0
mov	[esp+4], ecx
mov	[esp], fsm_context_0
call	eax
mov	eax, 3
add	esp, 34h
pop	fsm_context_0
leave
retn
align 10h
public _silc_ske_st_initiator_aborted
			
push	ebp
mov	ebp, esp
push	ebx
sub	esp, 34h
mov	ebx, [ebp+fsm_context]
mov	[ebp+data], 0
mov	[ebp+data+1], 0
mov	[ebp+data+2], 0
mov	[ebp+data+3], 1
mov	dword ptr [esp+4], 4 
lea	eax, [ebp+data]
mov	[esp], eax	
xor	ecx, ecx	
mov	edx, 3		
mov	eax, ebx	
call	_silc_ske_packet_send
mov	[esp+8], ebx	
mov	dword ptr [esp+4], offset _silc_ske_stream_cbs 
mov	eax, [ebx]
mov	[esp], eax	
call	_silc_packet_stream_unlink
mov	[esp+4], ebx	
mov	eax, [ebx+60h]
mov	[esp], eax	
call	_silc_schedule_task_del_by_context
test	byte ptr [ebx+0B8h], 1
jnz	short loc_6423087E
mov	edx, [fsm_context_0+0Ch]
mov	eax, [edx+4]
test	eax, eax
jz	short loc_6423087E
mov	ecx, [fsm_context_0+14h]
test	ecx, ecx
jnz	short loc_6423088C
mov	edx, [edx+8]
mov	[esp+14h], edx
mov	edx, [fsm_context_0+5Ch]
mov	[esp+10h], edx
mov	edx, [fsm_context_0+58h]
mov	[esp+0Ch], edx
mov	edx, [fsm_context_0+18h]
mov	[esp+8], edx
mov	dword ptr [esp+4], 0
mov	[esp], fsm_context_0
call	eax
			
mov	eax, 3
add	esp, 34h
pop	fsm_context_0
leave
retn
align 4
mov	edx, [edx+8]
mov	[esp+14h], edx
mov	dword ptr [esp+10h], 0
mov	dword ptr [esp+0Ch], 0
mov	dword ptr [esp+8], 0
mov	[esp+4], ecx
mov	[esp], fsm_context_0
call	eax
mov	eax, 3
add	esp, 34h
pop	fsm_context_0
leave
retn
align 10h
public _silc_ske_st_responder_phase5
push	ebp
mov	ebp, esp
push	edi
push	esi
push	ebx
sub	esp, 89Ch
mov	ebx, [ebp+fsm_context]
mov	eax, [ebx+44h]
test	eax, eax
jz	short loc_64230900
mov	edx, [fsm_context_0+48h]
test	edx, edx
jz	short loc_64230900
lea	edx, [ebp+pk_len]
mov	[esp+4], edx	
mov	[esp], eax	
call	_silc_pkcs_public_key_encode
test	eax, eax
jz	loc_64230A67
mov	edx, [fsm_context_0+24h]
mov	[edx+4], pk
mov	pk, [ebp+pk_len]
mov	[edx], ax
			
lea	esi, [ebp+hash]
mov	ecx, 40h
mov	edi, esi
xor	pk_len_0, pk_len_0
rep stosb
lea	ecx, [ebp+hash_len] 
mov	dword ptr [esp], 0 
mov	edx, esi	
mov	eax, fsm_context_0 
call	_silc_ske_make_hash
test	eax, eax
jnz	loc_64230A64
mov	status,	[ebp+hash_len]
mov	[esp+4], eax	
mov	[esp], esi	
call	_silc_memdup
mov	[fsm_context_0+34h], eax
mov	edx, [ebp+hash_len]
mov	[fsm_context_0+38h], edx
mov	eax, [fsm_context_0+44h]
test	eax, eax
jz	loc_64230A88
mov	ecx, [fsm_context_0+48h]
test	ecx, ecx
jz	loc_64230A88
mov	eax, [fsm_context_0+18h]
mov	eax, [eax+10h]
mov	[esp+1Ch], eax	
mov	dword ptr [esp+18h], 0 
lea	eax, [ebp+sign_len]
mov	[esp+14h], eax	
mov	dword ptr [esp+10h], 800h 
lea	eax, [ebp+sign]
mov	[ebp+var_87C], eax
mov	[esp+0Ch], eax	
mov	[esp+8], edx	
mov	[esp+4], esi	
mov	[esp], ecx	
call	_silc_pkcs_sign
test	al, al
jz	loc_64230A67
mov	esi, [fsm_context_0+24h]
mov	eax, [ebp+sign_len]
mov	[esp+4], eax	
lea	eax, [ebp+sign]
mov	[esp], eax	
call	_silc_memdup
mov	[esi+20h], eax
mov	esi, [fsm_context_0+24h]
mov	eax, [ebp+sign_len]
mov	[esi+1Ch], ax
mov	ecx, 801h
mov	edi, [ebp+var_87C]
xor	eax, eax
rep stosb
mov	eax, [fsm_context_0+44h]
mov	[esp], eax	
call	_silc_pkcs_get_type
mov	[esi+8], ax
lea	eax, [ebp+payload_buf]
mov	[esp+8], eax	
mov	eax, [fsm_context_0+24h]
mov	[esp+4], eax	
mov	[esp], fsm_context_0 
call	_silc_ske_payload_ke_encode
test	eax, eax
jnz	short loc_64230A64
mov	status,	[ebp+payload_buf]
mov	edx, [eax+4]
mov	eax, [eax+8]
sub	eax, edx
mov	[esp+4], eax	
mov	[esp], edx	
xor	ecx, ecx	
mov	edx, 0Fh	
mov	eax, fsm_context_0 
call	_silc_ske_packet_send
test	al, al
jz	short loc_64230A90
mov	esi, [ebp+payload_buf]
test	esi, esi
jz	short loc_64230A3A
mov	eax, [esi]
mov	[esp], eax	
call	_silc_free
mov	[esp], esi	
call	_silc_free
mov	eax, [fsm_context_0+5Ch]
test	eax, eax
jz	short loc_64230A9C
mov	dword ptr [esp+4], offset _silc_ske_st_rekey_responder_done 
mov	eax, [ebp+fsm]
mov	[esp], eax	
call	_silc_fsm_next
xor	eax, eax
add	esp, 89Ch
pop	fsm_context_0
pop	esi
pop	edi
leave
retn
align 4
			
mov	[fsm_context_0+14h], status
			
mov	dword ptr [esp+4], offset _silc_ske_st_responder_error
mov	pk, [ebp+fsm]
mov	[esp], eax	
call	_silc_fsm_next
xor	eax, eax
add	esp, 89Ch
pop	fsm_context_0
pop	esi
pop	edi
leave
retn
align 4
			
mov	esi, [fsm_context_0+24h]
jmp	loc_642309D7
mov	dword ptr [fsm_context_0+14h], 1
jmp	short loc_64230A67
align 4
mov	dword ptr [esp+4], offset _silc_ske_st_responder_end 
mov	eax, [ebp+fsm]
mov	[esp], eax	
call	_silc_fsm_next
mov	eax, 2
jmp	short loc_64230A7C
align 4
public _silc_ske_st_initiator_phase2
			
push	ebp
mov	ebp, esp
push	edi
push	esi
push	ebx
sub	esp, 8ACh
mov	ebx, [ebp+fsm_context]
mov	dword ptr [esp+4], 10h 
mov	dword ptr [esp], 1 
call	_silc_calloc
mov	esi, eax
test	eax, eax
jz	loc_64230E28
mov	[esp], x	
call	_silc_mp_init
mov	dword ptr [esp+4], 2 
mov	eax, [fsm_context_0+18h]
mov	eax, [eax+4]
add	eax, 18h
mov	[esp], eax	
call	_silc_mp_sizeinbase
mov	edx, [fsm_context_0+18h]
mov	edx, [edx+4]
add	edx, 18h	
mov	[esp], x	
mov	ecx, eax	
mov	eax, fsm_context_0 
call	_silc_ske_create_rnd
test	eax, eax
jnz	loc_64230C60
mov	dword ptr [esp+4], 24h 
mov	dword ptr [esp], 1 
call	_silc_calloc
mov	[ebp+payload], eax
test	eax, eax
jz	loc_64230CC8
mov	eax, [ebp+payload]
mov	[fsm_context_0+20h], eax
add	eax, 0Ch
mov	[ebp+dst], eax
mov	[esp], eax	
call	_silc_mp_init
mov	eax, [fsm_context_0+18h]
mov	eax, [eax+4]
lea	edx, [eax+8]
mov	[esp+0Ch], edx	
mov	[esp+8], x	
add	eax, 28h
mov	[esp+4], eax	
mov	edx, [ebp+dst]
mov	[esp], edx	
call	_silc_mp_pow_mod
lea	eax, [ebp+pk_len]
mov	[esp+4], eax	
mov	eax, [fsm_context_0+44h]
mov	[esp], eax	
call	_silc_pkcs_public_key_encode
mov	ecx, [ebp+payload]
mov	[ecx+4], eax
test	eax, eax
jz	loc_64230E34
mov	eax, [ebp+pk_len]
mov	edx, [ebp+payload]
mov	[edx], ax
mov	eax, [fsm_context_0+44h]
mov	[esp], eax	
call	_silc_pkcs_get_type
mov	ecx, [ebp+payload]
mov	[ecx+8], ax
mov	ecx, [fsm_context_0+48h]
test	ecx, ecx
jz	short loc_64230BDC
mov	eax, [fsm_context_0+18h]
test	byte ptr [eax],	4
jnz	loc_64230D6C
			
lea	eax, [ebp+payload_buf]
mov	[esp+8], eax	
mov	ecx, [ebp+payload]
mov	[esp+4], ecx	
mov	[esp], fsm_context_0 
call	_silc_ske_payload_ke_encode
test	eax, eax
jnz	loc_64230D00
mov	[fsm_context_0+2Ch], x
mov	status,	[ebp+payload_buf]
mov	edx, [eax+4]
mov	eax, [eax+8]
sub	eax, edx
mov	[esp+4], eax	
mov	[esp], edx	
xor	ecx, ecx	
mov	edx, 0Eh	
mov	eax, fsm_context_0 
call	_silc_ske_packet_send
test	al, al
jz	short loc_64230CA0
mov	fsm_context_0, [ebp+payload_buf]
test	ebx, ebx
jz	short loc_64230C3D
mov	eax, [ebx]
mov	[esp], eax	
call	_silc_free
mov	[esp], ebx	
call	_silc_free
mov	dword ptr [esp+4], offset _silc_ske_st_initiator_phase3	
mov	edx, [ebp+fsm]
mov	[esp], edx	
call	_silc_fsm_next
mov	eax, 2
add	esp, 8ACh
pop	ebx
pop	x
pop	edi
leave
retn
mov	[esp], x
mov	[ebp+var_884], status
call	_silc_mp_uninit
mov	[esp], x	
call	_silc_free
mov	eax, [ebp+var_884]
mov	[fsm_context_0+14h], eax
mov	dword ptr [esp+4], offset _silc_ske_st_initiator_error
mov	edx, [ebp+fsm]
mov	[esp], edx	
call	_silc_fsm_next
xor	eax, eax
add	esp, 8ACh
pop	fsm_context_0
pop	x
pop	edi
leave
retn
align 10h
mov	dword ptr [fsm_context_0+14h], 1
mov	dword ptr [esp+4], offset _silc_ske_st_initiator_error 
mov	eax, [ebp+fsm]
mov	[esp], eax	
call	_silc_fsm_next
xor	eax, eax
add	esp, 8ACh
pop	fsm_context_0
pop	x
pop	edi
leave
retn
align 4
mov	[esp], x	
call	_silc_mp_uninit
mov	[esp], x	
call	_silc_free
mov	dword ptr [fsm_context_0+14h], 10h
			
mov	dword ptr [esp+4], offset _silc_ske_st_initiator_error
mov	ecx, [ebp+fsm]
mov	[esp], ecx	
call	_silc_fsm_next
xor	eax, eax
add	esp, 8ACh
pop	fsm_context_0
pop	x
pop	edi
leave
retn
align 10h
mov	[esp], x	
mov	[ebp+var_884], status
call	_silc_mp_uninit
mov	[esp], x	
call	_silc_free
mov	edx, [ebp+dst]
mov	[esp], edx	
call	_silc_mp_uninit
mov	ecx, [ebp+payload]
mov	edx, [ecx+4]
mov	[esp], edx	
call	_silc_free
mov	ecx, [ebp+payload]
mov	edx, [ecx+20h]
mov	[esp], edx	
call	_silc_free
mov	edx, [ebp+payload]
mov	[esp], edx	
call	_silc_free
mov	dword ptr [fsm_context_0+20h], 0
mov	eax, [ebp+var_884]
mov	[fsm_context_0+14h], eax
jmp	loc_64230CDF
align 4
lea	eax, [ebp+hash]
mov	[ebp+var_88C], eax
mov	ecx, 40h
xor	eax, eax
mov	edi, [ebp+var_88C]
rep stosb
lea	ecx, [ebp+hash_len] 
mov	dword ptr [esp], 1 
lea	edx, [ebp+hash]	
mov	eax, fsm_context_0 
call	_silc_ske_make_hash
mov	eax, [fsm_context_0+18h]
mov	eax, [eax+10h]
mov	[esp+1Ch], eax	
mov	dword ptr [esp+18h], 0 
lea	eax, [ebp+sign_len]
mov	[esp+14h], eax	
mov	dword ptr [esp+10h], 800h 
lea	edx, [ebp+sign]
mov	[ebp+var_890], edx
mov	[esp+0Ch], edx	
mov	eax, [ebp+hash_len]
mov	[esp+8], eax	
lea	eax, [ebp+hash]
mov	[esp+4], eax	
mov	eax, [fsm_context_0+48h]
mov	[esp], eax	
call	_silc_pkcs_sign
test	al, al
jz	loc_64230E74
mov	eax, [ebp+sign_len]
mov	[esp+4], eax	
lea	ecx, [ebp+sign]
mov	[esp], ecx	
call	_silc_memdup
mov	edx, [ebp+payload]
mov	[edx+20h], eax
test	eax, eax
jz	short loc_64230E13
mov	eax, [ebp+sign_len]
mov	[edx+1Ch], ax
mov	ecx, 801h
xor	eax, eax
mov	edi, [ebp+var_890]
rep stosb
jmp	loc_64230BDC
align 4
mov	dword ptr [fsm_context_0+14h], 10h
jmp	loc_64230CA7
mov	[esp], x
call	_silc_mp_uninit
mov	[esp], x	
call	_silc_free
mov	eax, [ebp+dst]
mov	[esp], eax	
call	_silc_mp_uninit
mov	edx, [ebp+payload]
mov	[esp], edx	
call	_silc_free
mov	dword ptr [fsm_context_0+20h], 0
mov	dword ptr [fsm_context_0+14h], 1
jmp	loc_64230CDF
align 4
mov	[esp], x	
call	_silc_mp_uninit
mov	[esp], x	
call	_silc_free
mov	edx, [ebp+dst]
mov	[esp], edx	
call	_silc_mp_uninit
mov	ecx, [ebp+payload]
mov	eax, [ecx+4]
mov	[esp], eax	
call	_silc_free
mov	eax, [ebp+payload]
mov	[esp], eax	
call	_silc_free
mov	dword ptr [fsm_context_0+20h], 0
mov	dword ptr [fsm_context_0+14h], 0Fh
jmp	loc_64230C7F
public _silc_ske_st_initiator_end
push	ebp
mov	ebp, esp
push	esi
push	ebx
sub	esp, 20h
mov	ebx, [ebp+fsm_context]
mov	eax, [ebx+50h]
cmp	byte ptr [eax+22h], 2
jz	loc_64230F70
mov	eax, [fsm_context_0]
mov	[esp], eax	
call	_silc_packet_stream_is_udp
test	al, al
jz	short loc_64230F4F
mov	esi, [fsm_context_0+0ACh]
test	esi, esi
jz	short loc_64230F2E
mov	dword ptr [esp+18h], 1 
mov	dword ptr [esp+14h], 0 
movzx	eax, word ptr [fsm_context_0+0A2h]
mov	[esp+10h], eax	
mov	[esp+0Ch], fsm_context_0 
mov	dword ptr [esp+8], offset _silc_ske_packet_send_retry 
mov	dword ptr [esp+4], 0 
mov	eax, [fsm_context_0+60h]
mov	[esp], eax	
call	_silc_schedule_task_add
mov	si, [fsm_context_0+0A2h]
shl	esi, 1
mov	eax, [fsm_context_0+4]
mov	[esp], eax	
call	_silc_rng_get_rn16
and	eax, 1
lea	esi, [eax+esi]
mov	[fsm_context_0+0A2h], si
mov	eax, [fsm_context_0+50h]
mov	[esp], eax	
call	_silc_packet_free
mov	dword ptr [fsm_context_0+50h], 0
mov	eax, 2
add	esp, 20h
pop	fsm_context_0
pop	esi
leave
retn
align 10h
mov	[esp], eax	
call	_silc_packet_free
mov	dword ptr [fsm_context_0+50h], 0
mov	[esp+8], fsm_context_0 
mov	dword ptr [esp+4], offset _silc_ske_stream_cbs 
mov	eax, [fsm_context_0]
mov	[esp], eax	
call	_silc_packet_stream_unlink
mov	[esp+4], fsm_context_0 
mov	eax, [fsm_context_0+60h]
mov	[esp], eax	
call	_silc_schedule_task_del_by_context
test	byte ptr [fsm_context_0+0B8h], 1
jnz	short loc_64231028
mov	edx, [fsm_context_0+0Ch]
mov	eax, [edx+4]
test	eax, eax
jz	short loc_64231028
mov	ecx, [fsm_context_0+14h]
test	ecx, ecx
jnz	short loc_64230FF4
mov	edx, [edx+8]
mov	[esp+14h], edx
mov	edx, [fsm_context_0+5Ch]
mov	[esp+10h], edx
mov	edx, [fsm_context_0+58h]
mov	[esp+0Ch], edx
mov	edx, [fsm_context_0+18h]
mov	[esp+8], edx
mov	dword ptr [esp+4], 0
mov	[esp], fsm_context_0
call	eax
mov	eax, 3
add	esp, 20h
pop	fsm_context_0
pop	esi
leave
retn
align 4
mov	edx, [edx+8]
mov	[esp+14h], edx
mov	dword ptr [esp+10h], 0
mov	dword ptr [esp+0Ch], 0
mov	dword ptr [esp+8], 0
mov	[esp+4], ecx
mov	[esp], fsm_context_0
call	eax
mov	eax, 3
jmp	loc_64230F66
align 4
			
mov	eax, 3
add	esp, 20h
pop	fsm_context_0
pop	esi
leave
retn
public _silc_ske_st_responder_end
push	ebp
mov	ebp, esp
push	edi
push	esi
push	ebx
sub	esp, 3Ch
mov	ebx, [ebp+fsm_context]
mov	eax, [ebx+50h]
cmp	byte ptr [eax+22h], 2
jz	loc_642310E0
mov	eax, [fsm_context_0]
mov	[esp], eax	
call	_silc_packet_stream_is_udp
test	al, al
jz	short loc_642310C0
mov	edi, [fsm_context_0+0ACh]
test	edi, edi
jz	short loc_6423109F
mov	dword ptr [esp+18h], 1 
mov	dword ptr [esp+14h], 0 
movzx	eax, word ptr [fsm_context_0+0A2h]
mov	[esp+10h], eax	
mov	[esp+0Ch], fsm_context_0 
mov	dword ptr [esp+8], offset _silc_ske_packet_send_retry 
mov	dword ptr [esp+4], 0 
mov	eax, [fsm_context_0+60h]
mov	[esp], eax	
call	_silc_schedule_task_add
mov	si, [fsm_context_0+0A2h]
shl	esi, 1
mov	eax, [fsm_context_0+4]
mov	[esp], eax	
call	_silc_rng_get_rn16
and	eax, 1
lea	esi, [eax+esi]
mov	[fsm_context_0+0A2h], si
mov	eax, [fsm_context_0+50h]
mov	[esp], eax	
call	_silc_packet_free
mov	dword ptr [fsm_context_0+50h], 0
mov	eax, 2
			
add	esp, 3Ch
pop	fsm_context_0
pop	block_len
pop	key_len
leave
retn
align 10h
mov	[esp], eax	
call	_silc_packet_free
mov	dword ptr [fsm_context_0+50h], 0
mov	eax, [fsm_context_0+18h]
mov	eax, [eax+8]
mov	[esp], eax	
call	_silc_cipher_get_key_len
mov	edi, eax
mov	eax, [fsm_context_0+18h]
mov	eax, [eax+8]
mov	[esp], eax	
call	_silc_cipher_get_block_len
mov	esi, eax
mov	eax, [fsm_context_0+18h]
mov	eax, [eax+10h]
mov	[esp], eax	
call	_silc_hash_len
lea	edx, [fsm_context_0+5Ch]
mov	[esp+10h], edx	
mov	[esp+0Ch], eax	
mov	[esp+8], key_len 
mov	[esp+4], block_len 
mov	[esp], fsm_context_0 
call	_silc_ske_process_key_material
mov	[fsm_context_0+58h], eax
test	eax, eax
jz	loc_64231224
mov	[ebp+tmp], 0
mov	[ebp+tmp+1], 0
mov	[ebp+tmp+2], 0
mov	[ebp+tmp+3], 0
mov	dword ptr [esp+4], 4 
lea	eax, [ebp+tmp]
mov	[esp], eax	
xor	ecx, ecx	
mov	edx, 2		
mov	eax, fsm_context_0 
call	_silc_ske_packet_send
mov	[esp+8], fsm_context_0 
mov	dword ptr [esp+4], offset _silc_ske_stream_cbs 
mov	eax, [fsm_context_0]
mov	[esp], eax	
call	_silc_packet_stream_unlink
mov	[esp+4], fsm_context_0 
mov	eax, [fsm_context_0+60h]
mov	[esp], eax	
call	_silc_schedule_task_del_by_context
test	byte ptr [fsm_context_0+0B8h], 1
jnz	short loc_642311E4
mov	edx, [fsm_context_0+0Ch]
mov	eax, [edx+4]
test	eax, eax
jz	short loc_642311E4
mov	ecx, [fsm_context_0+14h]
test	ecx, ecx
jnz	short loc_642311F0
mov	edx, [edx+8]
mov	[esp+14h], edx
mov	edx, [fsm_context_0+5Ch]
mov	[esp+10h], edx
mov	edx, [fsm_context_0+58h]
mov	[esp+0Ch], edx
mov	edx, [fsm_context_0+18h]
mov	[esp+8], edx
mov	dword ptr [esp+4], 0
mov	[esp], fsm_context_0
call	eax
mov	eax, 3
jmp	loc_642310D7
align 4
			
mov	eax, 3
jmp	loc_642310D7
align 10h
mov	edx, [edx+8]
mov	[esp+14h], edx
mov	dword ptr [esp+10h], 0
mov	dword ptr [esp+0Ch], 0
mov	dword ptr [esp+8], 0
mov	[esp+4], ecx
mov	[esp], fsm_context_0
call	eax
mov	eax, 3
jmp	loc_642310D7
align 4
mov	dword ptr [fsm_context_0+14h], 1
mov	dword ptr [esp+4], offset _silc_ske_st_responder_error 
mov	eax, [ebp+fsm]
mov	[esp], eax	
call	_silc_fsm_next
xor	eax, eax
jmp	loc_642310D7
align 4
public _silc_http_php_file
push	ebp
mov	ebp, esp
push	edi
push	esi
push	ebx
mov	eax, 203Ch	
call	__alloca
lea	ebx, [ebp+str]
mov	ecx, 2000h
xor	eax, eax
mov	edi, ebx
rep stosb
mov	eax, [ebp+arg_0]
mov	[esp+0Ch], eax
mov	dword ptr [esp+8], offset aPhpFS 
mov	dword ptr [esp+4], 1FFFh 
mov	[esp], ebx	
call	_silc_snprintf
mov	dword ptr [esp+4], offset aR 
mov	[esp], ebx	
call	__popen
mov	[ebp+var_201C],	eax
test	eax, eax
jz	loc_642313B4
xor	esi, esi
mov	eax, [ebp+var_201C]
mov	[esp+0Ch], eax	
mov	dword ptr [esp+8], 2000h 
mov	dword ptr [esp+4], 1 
mov	[esp], ebx	
call	_fread
mov	edi, eax
cmp	eax, 0
jl	loc_64231390
jz	short loc_6423130C
test	ret, ret
jz	loc_64231360
mov	dword ptr [esp+14h], 1Dh
mov	[esp+10h], edi
mov	[esp+0Ch], ebx
mov	dword ptr [esp+8], 0Ch
mov	dword ptr [esp+4], 19h
mov	[esp], ret	
call	_silc_buffer_format
jmp	short loc_642312A8
align 4
test	ret, ret
jz	short loc_64231351
mov	dword ptr [esp+14h], 1Dh
mov	dword ptr [esp+10h], 1
mov	dword ptr [esp+0Ch], 0
mov	dword ptr [esp+8], 0Ch
mov	dword ptr [esp+4], 19h
mov	[esp], ret	
call	_silc_buffer_format
mov	edx, [ret]
mov	eax, edx
sub	eax, [ret+0Ch]
add	eax, [ret+4]
cmp	edx, eax
ja	short loc_64231351
mov	[ret+4], eax
			
mov	eax, ret
add	esp, 203Ch
pop	ebx
pop	ret
pop	edi
leave
retn
align 10h
mov	dword ptr [esp+4], 10h 
mov	dword ptr [esp], 1 
call	_silc_calloc
mov	ret, eax
test	eax, eax
jnz	loc_642312DF
mov	ret, [ebp+var_201C]
mov	[esp], eax	
call	__pclose
jmp	short loc_64231351
align 10h
test	ret, ret
jz	short loc_642313A6
mov	eax, [ret]
mov	[esp], eax	
call	_silc_free
mov	[esp], ret	
call	_silc_free
mov	eax, [ebp+var_201C]
mov	[esp], eax	
call	__pclose
xor	ret, ret
mov	eax, ret
add	esp, 203Ch
pop	ebx
pop	ret
pop	edi
leave
retn
align 4
public _silc_http_php
push	ebp
mov	ebp, esp
push	edi
push	esi
push	ebx
sub	esp, 1Ch
mov	esi, [ebp+php_data]
mov	dword ptr [esp], offset	aSilchttpphpxxx	
call	__mktemp
mov	ebx, eax
test	eax, eax
jz	short loc_64231424
xor	name, name
mov	ecx, 0FFFFFFFFh
mov	edi, php_data_0
repne scasb
not	ecx
dec	ecx
mov	dword ptr [esp+0Ch], 180h 
mov	[esp+8], ecx	
mov	[esp+4], esi	
mov	[esp], name	
call	_silc_file_writefile_mode
mov	[esp], name	
call	_silc_http_php_file
mov	php_data_0, eax
mov	[esp], name	
call	__unlink
mov	eax, ret
add	esp, 1Ch
pop	name
pop	ret
pop	edi
leave
retn
xor	php_data_0, php_data_0
mov	name, ret
add	esp, 1Ch
pop	name
pop	ret
pop	edi
leave
retn
			
push	ebp
mov	ebp, esp
push	edi
push	esi
push	ebx
sub	esp, 1Ch
mov	ebx, conn
mov	conn, [conn+24h]
test	eax, eax
jz	short loc_64231451
mov	[esp], eax	
call	_silc_mime_free
mov	dword ptr [conn+24h], 0
mov	eax, [conn+20h]
test	eax, eax
jz	short loc_64231467
mov	[esp], eax	
call	_silc_mime_free
mov	dword ptr [conn+20h], 0
mov	edx, [conn+10h]
mov	esi, [edx]
mov	ecx, [edx+0Ch]
sub	ecx, esi
xor	eax, eax
mov	edi, esi
rep stosb
mov	ecx, [edx]
mov	[edx+8], ecx
mov	[edx+4], ecx
mov	edx, [conn+14h]
mov	esi, [edx]
mov	ecx, [edx+0Ch]
sub	ecx, esi
mov	edi, esi
rep stosb
mov	eax, [edx]
mov	[edx+8], eax
mov	[edx+4], eax
mov	eax, [conn+10h]
mov	edx, [eax]
mov	[eax+8], edx
mov	[eax+4], edx
mov	eax, [conn+14h]
mov	edx, [eax]
mov	[eax+8], edx
mov	[eax+4], edx
mov	dword ptr [conn+30h], 0
mov	dword ptr [conn+2Ch], 0
mov	dword ptr [conn+28h], 0
test	byte ptr [conn+34h], 1
jz	short loc_642314D0
add	esp, 1Ch
pop	conn
pop	esi
pop	edi
leave
retn
align 10h
mov	[esp+4], conn	
mov	eax, [conn+8]
mov	eax, [eax+4]
mov	[esp], eax	
call	_silc_schedule_task_del_by_context
mov	dword ptr [esp+0Ch], 0 
mov	dword ptr [esp+8], 0 
mov	eax, [conn+8]
mov	eax, [eax+4]
mov	[esp+4], eax	
mov	eax, [conn+0Ch]
mov	[esp], eax	
call	_silc_stream_set_notifier
mov	eax, [conn+0Ch]
mov	[esp], eax	
call	_silc_stream_destroy
mov	dword ptr [conn+0Ch], 0
mov	eax, [conn+8]
mov	edx, [eax+1Ch]
test	edx, edx
jz	short loc_64231558
movzx	edx, word ptr [eax+28h]
mov	ecx, [eax+20h]
mov	[ecx+edx], conn
test	byte ptr [eax+2Ch], 1
jz	short loc_6423153D
movzx	edx, word ptr [eax+2Ah]
mov	ecx, [eax+20h]
mov	[conn+edx], ecx
mov	[eax+20h], conn
movzx	edx, word ptr [eax+28h]
mov	dword ptr [conn+edx], 0
add	dword ptr [eax+2Ch], 4
add	esp, 1Ch
pop	conn
pop	esi
pop	edi
leave
retn
align 4
mov	[eax+1Ch], conn
jmp	short loc_6423152D
align 10h
public _silc_http_server_add_header
push	ebp
mov	ebp, esp
push	ebx
sub	esp, 14h
mov	ebx, [ebp+conn]
mov	eax, [ebx+24h]
test	eax, eax
jz	short loc_64231590
mov	edx, [ebp+value]
mov	[esp+8], edx	
mov	edx, [ebp+field]
mov	[esp+4], edx	
mov	[esp], eax	
call	_silc_mime_add_field
mov	al, 1
add	esp, 14h
pop	conn_0
leave
retn
align 10h
call	_silc_mime_alloc
mov	[conn_0+24h], eax
test	eax, eax
jnz	short loc_64231571
mov	eax, conn_0	
call	_silc_http_server_close_connection
xor	eax, eax
jmp	short loc_64231589
align 4
public _silc_http_server_get_header
push	ebp
mov	ebp, esp
sub	esp, 8
mov	edx, [ebp+field]
mov	eax, [ebp+conn]
mov	eax, [eax+20h]
test	eax, eax
jz	short locret_642315C8
mov	[ebp+conn], field_0
mov	[ebp+httpd], eax
leave
jmp	_silc_mime_get_field
align 4
leave
retn
align 4
push	ebp
mov	ebp, esp
push	esi
push	ebx
sub	esp, 10h
mov	esi, len
mov	dword ptr [esp+4], 10h 
mov	dword ptr [esp], 1 
call	_silc_calloc
mov	ebx, eax
test	eax, eax
jz	short loc_64231616
test	len, len
jz	short loc_64231616
mov	dword ptr [esp+4], 1 
mov	[esp], len	
call	_silc_calloc
mov	[sb], eax
test	eax, eax
jz	short loc_6423161F
mov	[sb+4],	eax
mov	[sb+8],	eax
lea	len, [eax+len]
mov	[sb+0Ch], esi
			
mov	eax, sb
add	esp, 10h
pop	sb
pop	len
leave
retn
xor	sb, sb
jmp	short loc_64231616
align 4
			
push	ebp
mov	ebp, esp
push	edi
push	esi
push	ebx
sub	esp, 4Ch
mov	edi, conn
mov	esi, data
mov	al, [ebp+headers]
mov	byte ptr [ebp+ptr], al
mov	data, [data+8]
mov	conn, [data+4]
jmp	short loc_64231676
align 10h
sub	ecx, edx
mov	[esp+8], ecx	
mov	[esp+4], edx	
mov	ret, [conn+0Ch]
mov	[esp], eax	
call	_silc_stream_write
test	eax, eax
jz	short loc_6423168C
cmp	ret, 0FFFFFFFEh
jz	short loc_6423168C
cmp	ret, 0FFFFFFFFh
jz	short loc_64231698
mov	ecx, [data+8]
mov	edx, [data+4]
mov	ebx, ecx
sub	ebx, edx
cmp	ret, ebx
ja	short loc_64231676
add	edx, ret
mov	[data+4], edx
			
cmp	ecx, edx
jnz	short loc_64231640
cmp	byte ptr [ebp+ptr], 0
jz	short loc_642316EC
mov	al, 1
add	esp, 4Ch
pop	ebx
pop	data
pop	conn
leave
retn
align 4
			
xor	ret, ret
add	esp, 4Ch
pop	ebx
pop	data
pop	conn
leave
retn
align 4
mov	ecx, [data+4]
mov	edx, [data+8]
mov	[ebp+var_24], edx
sub	edx, ecx
mov	[ebp+var_28], edx
mov	ret, edx
inc	eax
mov	ebx, [conn+14h]
mov	edx, [ebx+0Ch]
mov	[ebp+var_20], edx
mov	edx, [ebx+8]
mov	[ebp+var_3C], edx
mov	edx, [ebp+var_20]
sub	edx, [ebp+var_3C]
cmp	eax, edx
jnb	short loc_642316FD
mov	conn, [ebp+var_3C]
add	edi, eax
mov	[ebx+8], edi
mov	eax, [data+8]
sub	eax, ecx
inc	eax
mov	ebx, [ebx+4]
sub	edi, ebx
cmp	edi, eax
jb	short loc_64231680
lea	data, [ecx-1]
mov	edi, ebx
mov	ecx, eax
rep movsb
mov	al, 1
add	esp, 4Ch
pop	ebx
pop	esi
pop	edi
leave
retn
mov	ret, conn
call	_silc_http_server_close_connection
mov	al, 1
add	esp, 4Ch
pop	ebx
pop	data
pop	conn
leave
retn
mov	eax, [ebx]
mov	[ebp+ptr], eax
mov	eax, [ebp+var_20]
sub	eax, [ebp+ptr]
mov	edx, [ebp+var_28]
lea	edx, [eax+edx+1]
mov	[ebp+var_20], edx
cmp	edx, eax
jbe	short loc_6423175E
mov	ecx, [ebx+4]
mov	[esp+4], edx	
mov	eax, [ebp+ptr]
mov	[esp], eax	
mov	[ebp+var_2C], ecx
call	_silc_realloc
test	eax, eax
mov	ecx, [ebp+var_2C]
jz	short loc_64231783
mov	[ebx], eax
mov	edx, ecx
sub	edx, [ebp+ptr]
add	edx, eax
mov	[ebp+ptr], edx
mov	[ebx+4], edx
mov	edx, [ebp+var_3C]
sub	edx, ecx
add	edx, [ebp+ptr]
mov	[ebx+8], edx
add	eax, [ebp+var_20]
mov	[ebx+0Ch], eax
mov	eax, [data+8]
mov	[ebp+var_24], eax
mov	ecx, [data+4]
mov	ebx, [conn+14h]
mov	eax, [ebp+var_24]
sub	eax, ecx
inc	eax
mov	edx, [ebx+8]
mov	[ebp+var_3C], edx
mov	conn, edx
mov	edx, [ebx+0Ch]
mov	[ebp+ptr], edx
sub	[ebp+ptr], edi
cmp	eax, [ebp+ptr]
jbe	loc_642316C2
jmp	loc_642316D0
and	byte ptr [conn+34h], 0FEh
mov	eax, conn	
call	_silc_http_server_close_connection
xor	eax, eax
jmp	loc_6423168E
align 4
public _silc_http_server_send_error
push	ebp
mov	ebp, esp
push	edi
push	esi
push	ebx
sub	esp, 3Ch
mov	esi, [ebp+conn]
lea	ebx, [ebp+data]
mov	ecx, 10h
xor	eax, eax
mov	edi, ebx
rep stosb
mov	dword ptr [esp+14h], 1Dh
mov	eax, [ebp+error_message]
mov	[esp+10h], eax
mov	dword ptr [esp+0Ch], offset asc_6426F30C 
mov	eax, [ebp+error]
mov	[esp+8], eax
mov	dword ptr [esp+4], offset aHttp1_1 
mov	[esp], ebx	
call	_silc_buffer_strformat
mov	dword ptr [esp], 0 
mov	ecx, ebx	
mov	edx, esi	
mov	eax, [ebp+httpd] 
call	_silc_http_server_send_internal
mov	bl, al
mov	eax, [ebp+data.head]
mov	[ebp+data.end],	0
mov	[ebp+data.tail], 0
mov	[ebp+data.data], 0
mov	[ebp+data.head], 0
mov	[esp], eax	
call	_silc_free
and	byte ptr [esi+34h], 0FEh
mov	eax, esi	
call	_silc_http_server_close_connection
mov	al, bl
add	esp, 3Ch
pop	ret
pop	esi
pop	edi
leave
retn
align 4
public _silc_http_server_send
push	ebp
mov	ebp, esp
push	edi
push	esi
push	ebx
sub	esp, 4Ch
mov	ebx, [ebp+conn]
mov	edi, [ebp+data]
call	_silc_time
mov	[ebx+18h], eax
mov	[ebx+1Ch], edx
mov	[ebp+h.head], offset aHttp1_1200OkSe 
mov	[ebp+h.data], offset aHttp1_1200OkSe 
mov	[ebp+h.end], (offset aHttp1_1200OkSe+27h) 
mov	[ebp+h.tail], (offset aHttp1_1200OkSe+27h) 
mov	dword ptr [esp], 1 
lea	ecx, [ebp+h]	
mov	edx, ebx	
mov	eax, [ebp+httpd] 
call	_silc_http_server_send_internal
test	al, al
jz	loc_64231974
mov	ecx, [conn_0+24h]
test	ecx, ecx
jz	loc_64231964
mov	ret, [conn_0+18h]
mov	edx, [conn_0+1Ch]
mov	[esp], eax	
mov	[esp+4], edx
call	_silc_time_string
mov	[esp+8], eax	
mov	dword ptr [esp+4], offset aLastModified	
mov	eax, [conn_0+24h]
mov	[esp], eax	
call	_silc_mime_add_field
lea	esi, [ebp+tmp]
mov	eax, [data_0+8]
sub	eax, [data_0+4]
mov	[esp+0Ch], eax
mov	dword ptr [esp+8], offset aD_0 
mov	dword ptr [esp+4], 10h 
mov	[esp], esi	
call	_silc_snprintf
mov	[esp+8], esi	
mov	dword ptr [esp+4], offset aContentLength 
mov	eax, [conn_0+24h]
mov	[esp], eax	
call	_silc_mime_add_field
test	byte ptr [conn_0+34h], 1
jnz	loc_6423198C
lea	eax, [ebp+headers_len]
mov	[esp+4], eax	
mov	eax, [conn_0+24h]
mov	[esp], eax	
call	_silc_mime_encode
mov	esi, eax
test	eax, eax
jz	short loc_64231949
mov	[ebp+h.head], headers
mov	[ebp+h.data], headers
mov	headers, [ebp+headers_len]
add	eax, headers
mov	[ebp+h.end], eax
mov	[ebp+h.tail], eax
mov	dword ptr [esp], 1 
lea	ecx, [ebp+h]	
mov	edx, conn_0	
mov	eax, [ebp+httpd] 
call	_silc_http_server_send_internal
test	al, al
jz	short loc_64231974
mov	[esp], headers	
call	_silc_free
mov	dword ptr [esp], 0 
mov	ecx, data_0	
mov	edx, conn_0	
mov	eax, [ebp+httpd] 
call	_silc_http_server_send_internal
add	esp, 4Ch
pop	conn_0
pop	headers
pop	data_0
leave
retn
call	_silc_mime_alloc
mov	[conn_0+24h], eax
test	eax, eax
jnz	loc_64231891
			
and	byte ptr [conn_0+34h], 0FEh
mov	ret, conn_0	
call	_silc_http_server_close_connection
xor	eax, eax
add	esp, 4Ch
pop	conn_0
pop	headers
pop	data_0
leave
retn
align 4
mov	dword ptr [esp+8], offset aKeepAlive 
mov	dword ptr [esp+4], offset aConnection 
mov	eax, [conn_0+24h]
mov	[esp], eax	
call	_silc_mime_add_field
mov	dword ptr [esp+0Ch], 78h
mov	dword ptr [esp+8], offset aD_0 
mov	dword ptr [esp+4], 10h 
mov	[esp], esi	
call	_silc_snprintf
mov	[esp+8], esi	
mov	dword ptr [esp+4], offset aKeepAlive_0 
mov	eax, [conn_0+24h]
mov	[esp], eax	
call	_silc_mime_add_field
jmp	loc_64231900
align 4
public _silc_http_server_connection_timeout
			
			
push	ebp
mov	ebp, esp
push	ebx
sub	esp, 24h
mov	ebx, [ebp+context]
call	_silc_time
sub	eax, [conn+18h]
sbb	edx, [conn+1Ch]
cmp	edx, 0
jl	short loc_64231A15
jle	short loc_64231A10
and	byte ptr [conn+34h], 0FEh
mov	eax, conn
add	esp, 24h
pop	conn
leave
jmp	_silc_http_server_close_connection
cmp	eax, 78h
ja	short loc_64231A00
mov	dword ptr [esp+18h], 1 
mov	dword ptr [esp+14h], 0 
mov	dword ptr [esp+10h], 78h 
mov	[esp+0Ch], conn	
mov	dword ptr [esp+8], offset _silc_http_server_connection_timeout 
mov	dword ptr [esp+4], 0 
mov	eax, [conn+8]
mov	eax, [eax+4]
mov	[esp], eax	
call	_silc_schedule_task_add
add	esp, 24h
pop	conn
leave
retn
align 4
public _silc_http_server_free
push	ebp
mov	ebp, esp
push	edi
push	esi
push	ebx
sub	esp, 1Ch
mov	esi, [ebp+httpd]
mov	ebx, [esi+8]
mov	[esi+10h], ebx
and	byte ptr [esi+18h], 0FDh
jmp	short loc_64231AD0
movzx	eax, word ptr [httpd_0+16h]
mov	eax, [ebx+eax]
mov	[httpd_0+10h], eax
and	byte ptr [ebx+34h], 0FEh
mov	edi, [ebx+8]
test	edi, edi
jz	short loc_64231A93
mov	eax, [ebx+0Ch]
test	eax, eax
jz	short loc_64231A93
mov	eax, ebx	
call	_silc_http_server_close_connection
			
mov	edi, [ebx+10h]
test	edi, edi
jz	short loc_64231AAC
mov	eax, [edi]
mov	[esp], eax	
call	_silc_free
mov	[esp], edi	
call	_silc_free
mov	edi, [ebx+14h]
test	edi, edi
jz	short loc_64231AC5
mov	eax, [edi]
mov	[esp], eax	
call	_silc_free
mov	[esp], edi	
call	_silc_free
mov	[esp], ebx	
call	_silc_free
mov	ebx, [httpd_0+10h]
test	ebx, ebx
jz	short loc_64231AE4
test	byte ptr [httpd_0+18h],	2
jnz	short loc_64231A70
movzx	eax, word ptr [httpd_0+14h]
mov	eax, [ebx+eax]
jmp	short loc_64231A77
align 4
mov	eax, [httpd_0]
test	eax, eax
jz	short loc_64231AF2
mov	[esp], eax	
call	_silc_net_close_listener
mov	[ebp+httpd], httpd_0
add	esp, 1Ch
pop	ebx
pop	httpd_0
pop	edi
leave
jmp	_silc_free
align 4
			
			
push	ebp
mov	ebp, esp
push	esi
push	ebx
sub	esp, 10h
mov	dword ptr [esp+4], 38h 
mov	dword ptr [esp], 1 
call	_silc_calloc
mov	esi, eax
test	eax, eax
jz	loc_64231BC4
mov	dword ptr [esp+4], 10h 
mov	dword ptr [esp], 1 
call	_silc_calloc
mov	ebx, eax
test	eax, eax
jz	loc_64231BCD
mov	dword ptr [esp+4], 1 
mov	dword ptr [esp], 400h 
call	_silc_calloc
mov	[ebx], eax
test	eax, eax
jz	short loc_64231BCD
mov	[ebx+4], eax
mov	[ebx+8], eax
add	eax, 400h
mov	[ebx+0Ch], eax
mov	[conn+10h], ebx
mov	dword ptr [esp+4], 10h 
mov	dword ptr [esp], 1 
call	_silc_calloc
mov	ebx, eax
test	eax, eax
jz	short loc_64231BE0
mov	dword ptr [esp+4], 1 
mov	dword ptr [esp], 400h 
call	_silc_calloc
mov	[ebx], eax
test	eax, eax
jz	short loc_64231BE0
lea	edx, [eax+400h]
mov	[ebx+0Ch], edx
mov	[conn+14h], ebx
mov	edx, [conn+10h]
mov	ecx, [edx]
mov	[edx+8], ecx
mov	[edx+4], ecx
mov	[ebx+8], eax
mov	[ebx+4], eax
			
mov	eax, conn
add	esp, 10h
pop	ebx
pop	conn
leave
retn
			
mov	dword ptr [conn+10h], 0
mov	[esp], conn	
call	_silc_free
xor	conn, conn
jmp	short loc_64231BC4
			
mov	dword ptr [conn+14h], 0
mov	ebx, [conn+10h]
test	ebx, ebx
jz	short loc_64231C00
mov	eax, [ebx]
mov	[esp], eax	
call	_silc_free
mov	[esp], ebx	
call	_silc_free
mov	[esp], conn	
call	_silc_free
xor	conn, conn
jmp	short loc_64231BC4
public _silc_http_server_alloc
push	ebp
mov	ebp, esp
push	edi
push	esi
push	ebx
sub	esp, 3Ch
mov	esi, [ebp+schedule]
mov	edi, [ebp+callback]
mov	edx, [ebp+port]
mov	ebx, [ebp+ip_0]
test	ebx, ebx
jnz	short loc_64231C34
			
xor	ebx, ebx
			
mov	conn, httpd
add	esp, 3Ch
pop	httpd
pop	i
pop	edi
leave
retn
align 4
test	schedule_0, schedule_0
jz	short loc_64231C25
test	callback_0, callback_0
jz	short loc_64231C25
mov	dword ptr [esp+4], 38h 
mov	dword ptr [esp], 1 
mov	[ebp+var_1C], port_0
call	_silc_calloc
mov	ebx, eax
test	eax, eax
mov	edx, [ebp+var_1C]
jz	short loc_64231C27
movzx	edx, dx
mov	[esp+1Ch], httpd 
mov	dword ptr [esp+18h], offset _silc_http_server_new_connection 
mov	[esp+14h], schedule_0 
mov	dword ptr [esp+10h], 0 
mov	dword ptr [esp+0Ch], 1 
mov	[esp+8], edx	
mov	dword ptr [esp+4], 1 
lea	httpd, [ebp+ip_0]
mov	[esp], eax	
mov	[ebp+var_1C], edx
call	_silc_net_tcp_create_listener
mov	[httpd], eax
test	eax, eax
mov	edx, [ebp+var_1C]
jz	loc_64231D9C
mov	[httpd+4], schedule_0
mov	[httpd+30h], callback_0
mov	eax, [ebp+context]
mov	[httpd+34h], eax
mov	eax, [httpd+2Ch]
and	eax, 3
mov	[httpd+2Ch], eax
mov	word ptr [httpd+28h], 0
mov	word ptr [httpd+2Ah], 0
mov	byte ptr [httpd+2Ch], 0
mov	dword ptr [httpd+24h], 0
mov	dword ptr [httpd+20h], 0
mov	dword ptr [httpd+1Ch], 0
mov	eax, [httpd+18h]
and	eax, 3
mov	[httpd+18h], eax
mov	word ptr [httpd+14h], 4
mov	word ptr [httpd+16h], 0
mov	byte ptr [httpd+18h], 0
mov	dword ptr [httpd+10h], 0
mov	dword ptr [httpd+0Ch], 0
mov	dword ptr [httpd+8], 0
xor	schedule_0, schedule_0
call	_silc_http_server_alloc_connection
test	eax, eax
jz	loc_64231C27
mov	ecx, [httpd+1Ch]
test	ecx, ecx
jz	short loc_64231D93
movzx	edx, word ptr [httpd+28h]
mov	ecx, [httpd+20h]
mov	[ecx+edx], conn
test	byte ptr [httpd+2Ch], 1
jz	short loc_64231D3E
movzx	ecx, word ptr [httpd+2Ah]
mov	callback_0, [httpd+20h]
mov	[conn+ecx], edi
mov	[httpd+20h], conn
mov	dword ptr [conn+edx], 0
add	dword ptr [httpd+2Ch], 4
mov	edx, [httpd+8]
test	edx, edx
jz	short loc_64231D8A
movzx	edx, word ptr [httpd+14h]
mov	ecx, [httpd+0Ch]
mov	[ecx+edx], conn
test	byte ptr [httpd+18h], 1
jz	short loc_64231D6D
movzx	ecx, word ptr [httpd+16h]
mov	edi, [httpd+0Ch]
mov	[conn+ecx], edi
mov	[httpd+0Ch], conn
mov	dword ptr [conn+edx], 0
add	dword ptr [httpd+18h], 4
mov	[conn+8], httpd
inc	i
cmp	i, 2
jz	loc_64231C27
jmp	short loc_64231D10
mov	[httpd+8], conn
movzx	edx, word ptr [httpd+14h]
jmp	short loc_64231D5D
mov	[httpd+1Ch], conn
movzx	edx, word ptr [httpd+28h]
jmp	short loc_64231D2E
mov	[esp+8], edx
mov	eax, [ebp+ip_0]
mov	[esp+4], eax
mov	dword ptr [esp], offset	aCouldNotBindHt	
call	_silc_format
mov	[esp+4], eax	
mov	dword ptr [esp], 3 
call	_silc_log_output
mov	[esp], httpd	
call	_silc_http_server_free
xor	httpd, httpd
jmp	loc_64231C27
align 4
push	ebp
mov	ebp, esp
push	edi
push	esi
push	ebx
sub	esp, 5Ch
mov	esi, [ebp+context]
mov	[ebp+hostname],	0
mov	[ebp+ip_0], 0
mov	edx, [esi+1Ch]
mov	[esi+24h], prev
and	byte ptr [esi+2Ch], 0FDh
test	prev, prev
jz	loc_64231F34
movzx	eax, word ptr [context_0+28h]
mov	eax, [prev+eax]
mov	[context_0+24h], eax
mov	ebx, prev
test	prev, prev
jz	short loc_64231E33
cmp	conn, prev
jz	loc_64231F76
movzx	edi, word ptr [context_0+28h]
jmp	short loc_64231E2A
align 10h
cmp	conn, prev
jz	loc_64231EF0
mov	edx, prev
lea	p, [prev+edi]
mov	eax, [p]
test	prev, prev
jnz	short loc_64231E20
cmp	[context_0+20h], conn
jz	loc_64231F21
			
mov	[conn+8], context_0
mov	edi, [ebp+stream]
mov	[conn+0Ch], edi
mov	dword ptr [esp+10h], 0 
lea	eax, [ebp+ip_0]
mov	[esp+0Ch], eax	
lea	eax, [ebp+hostname]
mov	[esp+8], eax	
mov	dword ptr [esp+4], 0 
mov	[esp], edi	
call	_silc_socket_stream_get_info
mov	eax, [ebp+ip_0]
mov	[esp+8], eax
mov	eax, [ebp+hostname]
mov	[esp+4], eax
mov	dword ptr [esp], offset	aHttpdNewConnec	
call	_silc_format
mov	[esp+4], eax	
mov	dword ptr [esp], 1 
call	_silc_log_output
mov	[esp+0Ch], conn	
mov	dword ptr [esp+8], offset _silc_http_server_io 
mov	eax, [context_0+4]
mov	[esp+4], eax	
mov	[esp], edi	
call	_silc_stream_set_notifier
mov	dword ptr [esp+18h], 1 
mov	dword ptr [esp+14h], 0 
mov	dword ptr [esp+10h], 78h 
mov	[esp+0Ch], conn	
mov	dword ptr [esp+8], offset _silc_http_server_connection_timeout 
mov	dword ptr [esp+4], 0 
mov	eax, [context_0+4]
mov	[esp], eax	
call	_silc_schedule_task_add
add	esp, 5Ch
pop	conn
pop	context_0
pop	edi
leave
retn
align 10h
mov	[ebp+var_3C], p
mov	prev, [conn+edi]
mov	edi, [ebp+var_3C]
mov	[edi], eax
test	eax, eax
jz	short loc_64231F0F
test	byte ptr [context_0+2Ch], 1
jz	short loc_64231F0F
movzx	p, word	ptr [context_0+2Ah]
mov	edi, [conn+ecx]
mov	[eax+ecx], edi
			
cmp	[context_0+24h], conn
jz	short loc_64231F29
sub	dword ptr [context_0+2Ch], 4
cmp	[context_0+20h], conn
jnz	loc_64231E3C
mov	[context_0+20h], prev
jmp	loc_64231E3C
mov	p, [ebp+var_3C]
mov	eax, [ecx]
mov	[context_0+24h], eax
jmp	short loc_64231F14
align 4
call	_silc_http_server_alloc_connection
mov	ebx, eax
test	eax, eax
jz	short loc_64231F90
mov	edi, [context_0+8]
test	edi, edi
jz	short loc_64231F87
movzx	conn, word ptr [context_0+14h]
mov	edx, [context_0+0Ch]
mov	[edx+eax], conn
test	byte ptr [context_0+18h], 1
jz	short loc_64231F60
movzx	edx, word ptr [context_0+16h]
mov	ecx, [context_0+0Ch]
mov	[conn+edx], ecx
mov	[context_0+0Ch], conn
mov	dword ptr [conn+eax], 0
add	dword ptr [context_0+18h], 4
mov	edx, [context_0+1Ch]
jmp	loc_64231E0C
lea	ecx, [context_0+1Ch]
mov	[ebp+var_3C], ecx
movzx	edi, word ptr [context_0+28h]
xor	prev, prev
jmp	loc_64231EF3
mov	[context_0+8], conn
movzx	conn, word ptr [context_0+14h]
jmp	short loc_64231F50
mov	conn, [ebp+stream]
mov	[esp], eax	
call	_silc_stream_destroy
jmp	loc_64231EE7
push	ebp
mov	ebp, esp
push	edi
push	esi
push	ebx
sub	esp, 6Ch
mov	eax, [ebp+status]
mov	ebx, [ebp+context]
mov	edx, [ebx+8]
mov	[ebp+httpd], edx
test	eax, eax
jnz	loc_6423217C
call	_silc_time
mov	[context_0+18h], eax
mov	[context_0+1Ch], edx
mov	esi, [context_0+10h]
mov	eax, [esi+0Ch]
mov	edi, [esi+8]
mov	edx, eax
sub	edx, edi
cmp	edx, 3FFh
ja	short loc_64232033
mov	edx, [esi]
mov	[ebp+var_4C], edx
sub	eax, edx
lea	ecx, [eax+800h]
cmp	ecx, eax
jbe	short loc_6423202B
mov	eax, [esi+4]
mov	[ebp+var_40], eax
mov	[esp+4], ecx	
mov	[esp], edx	
mov	[ebp+var_44], ecx
call	_silc_realloc
test	eax, eax
mov	ecx, [ebp+var_44]
jz	loc_6423217F
mov	[esi], eax
mov	edx, [ebp+var_40]
sub	edx, [ebp+var_4C]
add	edx, eax
mov	[esi+4], edx
sub	edi, [ebp+var_40]
add	edi, edx
mov	[esi+8], edi
add	eax, ecx
mov	[esi+0Ch], eax
mov	esi, [context_0+10h]
mov	edi, [esi+8]
mov	edx, [esi+0Ch]
sub	edx, edi
mov	[esp+8], edx	
mov	[esp+4], edi	
mov	eax, [context_0+0Ch]
mov	[esp], eax	
call	_silc_stream_read
test	eax, eax
jz	loc_6423217F
cmp	ret, 0FFFFFFFEh
jz	loc_6423217F
cmp	ret, 0FFFFFFFFh
jz	loc_642321F8
mov	edx, [context_0+10h]
mov	esi, [edx+8]
mov	ecx, [edx+0Ch]
sub	ecx, esi
cmp	ret, ecx
ja	short loc_64232074
add	esi, ret
mov	[edx+8], esi
mov	edi, [edx+4]
sub	esi, edi
mov	[ebp+data_len],	esi
test	esi, esi
jz	loc_6423218A
xor	edx, edx
xor	ret, ret
jmp	short loc_64232093
align 4
			
inc	eax
mov	edx, eax
cmp	esi, eax
jbe	short loc_642320B8
mov	ecx, esi
sub	ecx, edx
cmp	ecx, 3
jbe	short loc_6423208C
cmp	byte ptr [edi+edx], 0Dh
jnz	short loc_6423208C
cmp	byte ptr [edi+edx+1], 0Ah
jnz	short loc_6423208C
cmp	byte ptr [edi+edx+2], 0Dh
jnz	short loc_6423208C
cmp	byte ptr [edi+edx+3], 0Ah
jnz	short loc_6423208C
nop
cmp	edx, esi
jz	loc_6423218A
mov	edx, [context_0+2Ch]
test	edx, edx
jz	loc_642322A0
mov	eax, [context_0+28h]
sub	edi, eax
lea	esi, [edi+esi]
mov	[esp+8], esi	
mov	[esp+4], eax	
mov	dword ptr [esp], 0 
call	_silc_mime_decode
mov	[context_0+20h], eax
test	eax, eax
jz	loc_642322D5
mov	dword ptr [esp+4], offset aConnection 
mov	[esp], eax	
call	_silc_mime_get_field
test	eax, eax
jz	short loc_6423211E
mov	dword ptr [esp+4], offset aClose 
mov	[esp], eax	
call	_stricmp
test	eax, eax
jz	loc_64232203
			
mov	dword ptr [esp+4], offset aGet 
mov	eax, [context_0+2Ch]
mov	[esp], eax	
call	_stricmp
test	eax, eax
jz	short loc_64232150
mov	dword ptr [esp+4], offset aHead	
mov	eax, [context_0+2Ch]
mov	[esp], eax	
call	_stricmp
test	eax, eax
jnz	loc_6423220C
mov	edx, [ebp+httpd]
mov	eax, [edx+34h]
mov	[esp+14h], eax
mov	dword ptr [esp+10h], 0
mov	eax, [context_0+2Ch]
mov	[esp+0Ch], eax
mov	eax, [context_0+30h]
mov	[esp+8], eax
mov	[esp+4], context_0
mov	[esp], edx
call	dword ptr [edx+30h]
jmp	short loc_6423218A
dec	status_0
jz	short loc_64232194
			
and	byte ptr [context_0+34h], 0FEh
mov	ret, context_0	
call	_silc_http_server_close_connection
			
add	esp, 6Ch
pop	context_0
pop	esi
pop	edi
leave
retn
align 4
call	_silc_time
mov	[context_0+18h], eax
mov	[context_0+1Ch], edx
mov	eax, [context_0+14h]
mov	ecx, [eax+8]
mov	edx, [eax+4]
jmp	short loc_642321E5
align 4
sub	ecx, edx
mov	[esp+8], ecx	
mov	[esp+4], edx	
mov	ret, [context_0+0Ch]
mov	[esp], eax	
call	_silc_stream_write
test	eax, eax
jz	short loc_6423217F
cmp	ret, 0FFFFFFFEh
jz	short loc_6423217F
cmp	ret, 0FFFFFFFFh
jz	short loc_6423218A
mov	esi, [context_0+14h]
mov	ecx, [esi+8]
mov	edx, [esi+4]
mov	edi, ecx
sub	edi, edx
cmp	ret, edi
ja	short loc_642321E5
add	edx, ret
mov	[esi+4], edx
			
cmp	edx, ecx
jnz	short loc_642321AC
mov	ret, context_0	
call	_silc_http_server_close_connection
add	esp, 6Ch
pop	context_0
pop	esi
pop	edi
leave
retn
mov	ret, [context_0+10h]
mov	edx, [eax+8]
mov	[eax+4], edx
jmp	short loc_6423218A
and	byte ptr [context_0+34h], 0FEh
jmp	loc_6423211E
mov	dword ptr [esp+4], offset aPost	
mov	eax, [context_0+2Ch]
mov	[esp], eax	
call	_stricmp
test	eax, eax
jnz	loc_642322DE
lea	eax, [ebp+data_len]
mov	[esp+4], eax	
mov	eax, [context_0+20h]
mov	[esp], eax	
call	_silc_mime_get_data
mov	esi, eax
test	eax, eax
jz	loc_642322D5
mov	dword ptr [esp+4], offset aContentLength 
mov	eax, [context_0+20h]
mov	[esp], eax	
call	_silc_mime_get_field
test	eax, eax
jz	short loc_64232278
lea	edx, [ebp+var_20]
mov	[esp+8], edx
mov	dword ptr [esp+4], offset aU 
mov	[esp], eax	
call	_sscanf
dec	eax
jz	loc_64232302
mov	eax, [ebp+data_len]
mov	[ebp+var_30], esi
mov	[ebp+var_2C], esi
lea	eax, [esi+eax]
mov	[ebp+var_24], eax
mov	[ebp+var_28], eax
mov	edx, [ebp+httpd]
mov	eax, [edx+34h]
mov	[esp+14h], eax
lea	eax, [ebp+var_30]
mov	[esp+10h], eax
jmp	loc_64232162
mov	eax, [context_0+30h]
test	eax, eax
jnz	loc_642320CB
mov	[esp+8], esi	
mov	dword ptr [esp+4], 0Ah 
mov	[esp], edi	
call	_memchr
test	eax, eax
jz	short loc_642322C9
cmp	byte ptr [eax-1], 0Dh
jz	short loc_64232325
			
cmp	esi, 3FFh
jbe	loc_6423218A
			
and	byte ptr [context_0+34h], 0FEh
jmp	loc_642321E9
mov	dword ptr [esp+0Ch], offset error_message 
mov	dword ptr [esp+8], offset error	
mov	[esp+4], context_0 
mov	eax, [ebp+httpd]
mov	[esp], eax	
call	_silc_http_server_send_error
jmp	loc_6423218A
mov	eax, [ebp+data_len]
cmp	eax, [ebp+var_20]
jnb	loc_6423227B
mov	eax, [context_0+20h]
mov	[esp], eax	
call	_silc_mime_free
mov	dword ptr [context_0+20h], 0
jmp	loc_6423218A
mov	byte ptr [eax],	0
mov	dword ptr [esp+4], 20h 
mov	[esp], edi	
call	_strchr
test	eax, eax
jz	short loc_6423233F
mov	byte ptr [eax],	0
mov	[context_0+2Ch], edi
mov	esi, [ebp+data_len]
mov	[esp+8], esi	
mov	dword ptr [esp+4], 0 
mov	[esp], edi	
call	_memchr
test	eax, eax
jz	loc_642322C9
lea	edx, [eax+1]
mov	dword ptr [esp+4], 20h 
mov	[esp], edx	
mov	[ebp+var_44], edx
call	_strchr
test	eax, eax
mov	edx, [ebp+var_44]
jz	short loc_64232384
mov	byte ptr [eax],	0
mov	esi, [ebp+data_len]
mov	[context_0+30h], edx
mov	eax, edi
sub	eax, edx
lea	eax, [esi+eax]
mov	[esp+8], eax	
mov	dword ptr [esp+4], 0 
mov	[esp], edx	
call	_memchr
inc	eax
mov	[ebp+var_40], eax
mov	dword ptr [esp+4], offset aHttp1_0 
mov	[esp], eax	
call	_strstr
test	eax, eax
jz	short loc_642323BE
and	byte ptr [context_0+34h], 0FEh
mov	dword ptr [esp+4], offset aHttp1_1_0 
mov	eax, [ebp+var_40]
mov	[esp], eax	
call	_strstr
test	eax, eax
jz	short loc_642323D9
or	byte ptr [context_0+34h], 1
mov	dword ptr [esp+4], offset aHttp1_2 
mov	edx, [ebp+var_40]
mov	[esp], edx	
call	_strstr
test	eax, eax
jz	short loc_642323F4
or	byte ptr [context_0+34h], 1
mov	eax, edi
sub	eax, [ebp+var_40]
add	eax, esi
mov	[esp+8], eax	
mov	dword ptr [esp+4], 0 
mov	eax, [ebp+var_40]
mov	[esp], eax	
call	_memchr
test	eax, eax
jz	loc_642322C9
mov	edx, edi
sub	edx, eax
add	edx, esi
cmp	edx, 1
jbe	loc_642322C9
inc	eax
mov	[context_0+28h], eax
jmp	loc_642320CE
align 4
			
push	ebp
mov	ebp, esp
push	edi
push	esi
push	ebx
sub	esp, 1Ch
mov	ebx, [ebp+sftp]
lea	eax, [ebp+vp]
mov	[esp+0Ch], eax	
mov	eax, [ebp+len]
mov	[esp+8], eax	
mov	eax, [ebx+28h]
mov	[esp+4], eax	
mov	eax, [ebp+type]
mov	[esp], eax	
call	_silc_sftp_packet_encode_vp
mov	ecx, eax
test	eax, eax
jz	short loc_642324B8
mov	[sftp_0+28h], tmp
mov	esi, [tmp+8]
mov	edx, [tmp+4]
jmp	short loc_642324AC
align 4
sub	esi, edx
mov	[esp+8], esi	
mov	[esp+4], edx	
mov	ret, [sftp_0]
mov	[esp], eax	
call	_silc_stream_write
cmp	eax, 0FFFFFFFEh
jz	short loc_642324C0
test	ret, ret
jz	short loc_6423250C
cmp	ret, 0FFFFFFFFh
jz	short loc_642324B8
mov	ecx, [sftp_0+28h]
mov	esi, [tmp+8]
mov	edx, [tmp+4]
mov	edi, esi
sub	edi, edx
cmp	ret, edi
ja	short loc_642324AC
add	edx, ret
mov	[tmp+4], edx
			
cmp	esi, edx
jnz	short loc_64232474
mov	ret, [tmp]
mov	[tmp+8], eax
mov	[tmp+4], eax
			
add	esp, 1Ch
pop	sftp_0
pop	esi
pop	edi
leave
retn
mov	ret, [ebp+type]
mov	[esp+4], eax
mov	dword ptr [esp], offset	aErrorSendingSf	
call	_silc_format
mov	[esp+4], eax	
mov	dword ptr [esp], 3 
call	_silc_log_output
mov	eax, [sftp_0+10h]
mov	[esp+8], eax
mov	dword ptr [esp+4], 6
mov	[esp], sftp_0
call	dword ptr [sftp_0+0Ch]
mov	eax, [sftp_0+28h]
mov	edx, [eax]
mov	[eax+8], edx
mov	[eax+4], edx
add	esp, 1Ch
pop	sftp_0
pop	esi
pop	edi
leave
retn
align 4
mov	ret, [sftp_0+10h]
mov	[esp+8], eax
mov	dword ptr [esp+4], 1
jmp	short loc_642324F2
align 10h
public _silc_sftp_extended
push	ebp
mov	ebp, esp
push	edi
push	esi
push	ebx
sub	esp, 4Ch
mov	ebx, [ebp+sftp]
mov	esi, [ebp+request]
mov	dword ptr [esp+4], 28h 
mov	dword ptr [esp], 1 
call	_silc_calloc
mov	edx, eax
test	eax, eax
jz	loc_64232604
mov	req, [sftp_0+2Ch]
mov	[req+20h], eax
inc	eax
mov	[sftp_0+2Ch], eax
mov	dword ptr [req+24h], 6
mov	eax, [ebp+callback]
mov	[req+18h], eax
mov	eax, [ebp+context]
mov	[req+1Ch], eax
mov	eax, [sftp_0+14h]
test	eax, eax
jz	loc_6423261C
movzx	eax, word ptr [sftp_0+20h]
mov	ecx, [sftp_0+18h]
mov	[ecx+eax], req
test	byte ptr [sftp_0+24h], 1
jnz	loc_6423260C
mov	[sftp_0+18h], req
mov	dword ptr [req+eax], 0
add	dword ptr [sftp_0+24h],	4
xor	eax, eax
mov	ecx, 0FFFFFFFFh
mov	edi, request_0
repne scasb
not	ecx
dec	ecx
mov	dword ptr [esp+30h], 1Dh
mov	eax, [ebp+data_len]
mov	[esp+2Ch], eax
mov	eax, [ebp+data]
mov	[esp+28h], eax
mov	dword ptr [esp+24h], 1Bh
mov	[esp+20h], esi
mov	dword ptr [esp+1Ch], 0Ah
mov	[esp+18h], ecx
mov	dword ptr [esp+14h], 5
mov	eax, [req+20h]
mov	[esp+10h], eax
mov	dword ptr [esp+0Ch], 5
mov	request_0, [ebp+data_len]
lea	eax, [ecx+esi+8]
mov	[esp+8], eax	
mov	eax, [req+24h]
mov	[esp+4], eax	
mov	[esp], sftp_0	
call	_silc_sftp_send_packet
add	esp, 4Ch
pop	sftp_0
pop	request_0
pop	edi
leave
retn
movzx	ecx, word ptr [sftp_0+22h]
mov	edi, [sftp_0+18h]
mov	[req+ecx], edi
jmp	loc_64232589
align 4
mov	[sftp_0+14h], req
movzx	eax, word ptr [sftp_0+20h]
jmp	loc_6423257F
public _silc_sftp_realpath
push	ebp
mov	ebp, esp
push	edi
push	esi
push	ebx
sub	esp, 3Ch
mov	ebx, [ebp+sftp]
mov	esi, [ebp+path]
mov	dword ptr [esp+4], 28h 
mov	dword ptr [esp], 1 
call	_silc_calloc
mov	edx, eax
test	eax, eax
jz	loc_642326F0
mov	req, [sftp_0+2Ch]
mov	[req+20h], eax
inc	eax
mov	[sftp_0+2Ch], eax
mov	dword ptr [req+24h], 10h
mov	eax, [ebp+callback]
mov	[req+10h], eax
mov	eax, [ebp+context]
mov	[req+1Ch], eax
mov	ecx, [sftp_0+14h]
test	ecx, ecx
jz	loc_64232704
movzx	context_0, word	ptr [sftp_0+20h]
mov	ecx, [sftp_0+18h]
mov	[ecx+eax], req
test	byte ptr [sftp_0+24h], 1
jnz	short loc_642326F8
mov	[sftp_0+18h], req
mov	dword ptr [req+eax], 0
add	dword ptr [sftp_0+24h],	4
xor	eax, eax
mov	ecx, 0FFFFFFFFh
mov	edi, path_0
repne scasb
not	ecx
lea	eax, [ecx-1]
mov	dword ptr [esp+24h], 1Dh
mov	[esp+20h], esi
mov	dword ptr [esp+1Ch], 0Ah
mov	[esp+18h], eax
mov	dword ptr [esp+14h], 5
mov	eax, [req+20h]
mov	[esp+10h], eax
mov	dword ptr [esp+0Ch], 5
add	ecx, 7
mov	[esp+8], ecx	
mov	eax, [req+24h]
mov	[esp+4], eax	
mov	[esp], sftp_0	
call	_silc_sftp_send_packet
add	esp, 3Ch
pop	sftp_0
pop	path_0
pop	edi
leave
retn
movzx	ecx, word ptr [sftp_0+22h]
mov	edi, [sftp_0+18h]
mov	[req+ecx], edi
jmp	short loc_6423268D
mov	[sftp_0+14h], req
movzx	context_0, word	ptr [sftp_0+20h]
jmp	loc_64232687
public _silc_sftp_symlink
push	ebp
mov	ebp, esp
push	edi
push	esi
push	ebx
sub	esp, 5Ch
mov	ebx, [ebp+sftp]
mov	dword ptr [esp+4], 28h 
mov	dword ptr [esp], 1 
call	_silc_calloc
mov	edx, eax
test	eax, eax
jz	loc_6423280E
mov	req, [sftp_0+2Ch]
mov	[req+20h], eax
inc	eax
mov	[sftp_0+2Ch], eax
mov	dword ptr [req+24h], 14h
mov	eax, [ebp+callback]
mov	[req+4], eax
mov	eax, [ebp+context]
mov	[req+1Ch], eax
mov	esi, [sftp_0+14h]
test	esi, esi
jz	loc_64232828
movzx	context_0, word	ptr [sftp_0+20h]
mov	ecx, [sftp_0+18h]
mov	[ecx+eax], req
test	byte ptr [sftp_0+24h], 1
jnz	loc_64232818
mov	[sftp_0+18h], req
mov	dword ptr [req+eax], 0
add	dword ptr [sftp_0+24h],	4
mov	esi, 0FFFFFFFFh
xor	eax, eax
mov	ecx, esi
mov	edi, [ebp+linkpath]
repne scasb
not	ecx
dec	ecx
mov	[ebp+var_1C], ecx
mov	ecx, esi
mov	edi, [ebp+targetpath]
repne scasb
mov	esi, ecx
not	esi
dec	esi
mov	dword ptr [esp+34h], 1Dh
mov	eax, [ebp+targetpath]
mov	[esp+30h], eax
mov	dword ptr [esp+2Ch], 0Ah
mov	[esp+28h], esi
mov	dword ptr [esp+24h], 5
mov	ecx, [ebp+linkpath]
mov	[esp+20h], ecx
mov	dword ptr [esp+1Ch], 0Ah
mov	eax, [ebp+var_1C]
mov	[esp+18h], eax
mov	dword ptr [esp+14h], 5
mov	eax, [req+20h]
mov	[esp+10h], eax
mov	dword ptr [esp+0Ch], 5
mov	ecx, [ebp+var_1C]
lea	eax, [esi+ecx+0Ch]
mov	[esp+8], eax	
mov	eax, [req+24h]
mov	[esp+4], eax	
mov	[esp], sftp_0	
call	_silc_sftp_send_packet
add	esp, 5Ch
pop	sftp_0
pop	esi
pop	edi
leave
retn
align 4
movzx	ecx, word ptr [sftp_0+22h]
mov	esi, [sftp_0+18h]
mov	[req+ecx], esi
jmp	loc_64232776
align 4
mov	[sftp_0+14h], req
movzx	context_0, word	ptr [sftp_0+20h]
jmp	loc_6423276C
public _silc_sftp_readlink
push	ebp
mov	ebp, esp
push	edi
push	esi
push	ebx
sub	esp, 3Ch
mov	ebx, [ebp+sftp]
mov	esi, [ebp+path]
mov	dword ptr [esp+4], 28h 
mov	dword ptr [esp], 1 
call	_silc_calloc
mov	edx, eax
test	eax, eax
jz	loc_642328FC
mov	req, [sftp_0+2Ch]
mov	[req+20h], eax
inc	eax
mov	[sftp_0+2Ch], eax
mov	dword ptr [req+24h], 13h
mov	eax, [ebp+callback]
mov	[req+10h], eax
mov	eax, [ebp+context]
mov	[req+1Ch], eax
mov	edi, [sftp_0+14h]
test	edi, edi
jz	loc_64232910
movzx	context_0, word	ptr [sftp_0+20h]
mov	ecx, [sftp_0+18h]
mov	[ecx+eax], req
test	byte ptr [sftp_0+24h], 1
jnz	short loc_64232904
mov	[sftp_0+18h], req
mov	dword ptr [req+eax], 0
add	dword ptr [sftp_0+24h],	4
xor	eax, eax
mov	ecx, 0FFFFFFFFh
mov	edi, path_0
repne scasb
not	ecx
lea	eax, [ecx-1]
mov	dword ptr [esp+24h], 1Dh
mov	[esp+20h], esi
mov	dword ptr [esp+1Ch], 0Ah
mov	[esp+18h], eax
mov	dword ptr [esp+14h], 5
mov	eax, [req+20h]
mov	[esp+10h], eax
mov	dword ptr [esp+0Ch], 5
add	ecx, 7
mov	[esp+8], ecx	
mov	eax, [req+24h]
mov	[esp+4], eax	
mov	[esp], sftp_0	
call	_silc_sftp_send_packet
add	esp, 3Ch
pop	sftp_0
pop	path_0
pop	edi
leave
retn
movzx	ecx, word ptr [sftp_0+22h]
mov	edi, [sftp_0+18h]
mov	[req+ecx], edi
jmp	short loc_64232899
mov	[sftp_0+14h], req
movzx	context_0, word	ptr [sftp_0+20h]
jmp	loc_64232893
public _silc_sftp_fstat
push	ebp
mov	ebp, esp
push	edi
push	esi
push	ebx
sub	esp, 3Ch
mov	ebx, [ebp+sftp]
mov	esi, [ebp+handle]
mov	dword ptr [esp+4], 28h 
mov	dword ptr [esp], 1 
call	_silc_calloc
test	eax, eax
jz	loc_642329DB
mov	edx, [sftp_0+2Ch]
mov	[req+20h], edx
inc	edx
mov	[sftp_0+2Ch], edx
mov	dword ptr [req+24h], 8
mov	edx, [ebp+callback]
mov	[req+14h], edx
mov	edx, [ebp+context]
mov	[req+1Ch], edx
mov	edx, [sftp_0+14h]
test	edx, edx
jz	loc_642329F0
movzx	edx, word ptr [sftp_0+20h]
mov	ecx, [sftp_0+18h]
mov	[ecx+edx], req
test	byte ptr [sftp_0+24h], 1
jnz	short loc_642329E4
mov	[sftp_0+18h], req
mov	dword ptr [req+edx], 0
add	dword ptr [sftp_0+24h],	4
mov	edx, [handle_0+4]
mov	dword ptr [esp+28h], 1Dh
mov	[esp+24h], edx
mov	ecx, [handle_0]
mov	[esp+20h], ecx
mov	dword ptr [esp+1Ch], 1Bh
mov	[esp+18h], edx
mov	dword ptr [esp+14h], 5
mov	ecx, [req+20h]
mov	[esp+10h], ecx
mov	dword ptr [esp+0Ch], 5
add	edx, 8
mov	[esp+8], edx	
mov	req, [req+24h]
mov	[esp+4], eax	
mov	[esp], sftp_0	
call	_silc_sftp_send_packet
add	esp, 3Ch
pop	sftp_0
pop	handle_0
pop	edi
leave
retn
align 4
movzx	ecx, word ptr [sftp_0+22h]
mov	edi, [sftp_0+18h]
mov	[req+ecx], edi
jmp	short loc_6423297F
mov	[sftp_0+14h], req
movzx	edx, word ptr [sftp_0+20h]
jmp	short loc_64232979
align 4
public _silc_sftp_lstat
push	ebp
mov	ebp, esp
push	edi
push	esi
push	ebx
sub	esp, 3Ch
mov	ebx, [ebp+sftp]
mov	esi, [ebp+path]
mov	dword ptr [esp+4], 28h 
mov	dword ptr [esp], 1 
call	_silc_calloc
mov	edx, eax
test	eax, eax
jz	loc_64232AC4
mov	req, [sftp_0+2Ch]
mov	[req+20h], eax
inc	eax
mov	[sftp_0+2Ch], eax
mov	dword ptr [req+24h], 7
mov	eax, [ebp+callback]
mov	[req+14h], eax
mov	eax, [ebp+context]
mov	[req+1Ch], eax
mov	ecx, [sftp_0+14h]
test	ecx, ecx
jz	loc_64232AD8
movzx	context_0, word	ptr [sftp_0+20h]
mov	ecx, [sftp_0+18h]
mov	[ecx+eax], req
test	byte ptr [sftp_0+24h], 1
jnz	short loc_64232ACC
mov	[sftp_0+18h], req
mov	dword ptr [req+eax], 0
add	dword ptr [sftp_0+24h],	4
xor	eax, eax
mov	ecx, 0FFFFFFFFh
mov	edi, path_0
repne scasb
not	ecx
lea	eax, [ecx-1]
mov	dword ptr [esp+24h], 1Dh
mov	[esp+20h], esi
mov	dword ptr [esp+1Ch], 0Ah
mov	[esp+18h], eax
mov	dword ptr [esp+14h], 5
mov	eax, [req+20h]
mov	[esp+10h], eax
mov	dword ptr [esp+0Ch], 5
add	ecx, 7
mov	[esp+8], ecx	
mov	eax, [req+24h]
mov	[esp+4], eax	
mov	[esp], sftp_0	
call	_silc_sftp_send_packet
add	esp, 3Ch
pop	sftp_0
pop	path_0
pop	edi
leave
retn
movzx	ecx, word ptr [sftp_0+22h]
mov	edi, [sftp_0+18h]
mov	[req+ecx], edi
jmp	short loc_64232A61
mov	[sftp_0+14h], req
movzx	context_0, word	ptr [sftp_0+20h]
jmp	loc_64232A5B
public _silc_sftp_stat
push	ebp
mov	ebp, esp
push	edi
push	esi
push	ebx
sub	esp, 3Ch
mov	ebx, [ebp+sftp]
mov	esi, [ebp+path]
mov	dword ptr [esp+4], 28h 
mov	dword ptr [esp], 1 
call	_silc_calloc
mov	edx, eax
test	eax, eax
jz	loc_64232BAC
mov	req, [sftp_0+2Ch]
mov	[req+20h], eax
inc	eax
mov	[sftp_0+2Ch], eax
mov	dword ptr [req+24h], 11h
mov	eax, [ebp+callback]
mov	[req+14h], eax
mov	eax, [ebp+context]
mov	[req+1Ch], eax
mov	edi, [sftp_0+14h]
test	edi, edi
jz	loc_64232BC0
movzx	context_0, word	ptr [sftp_0+20h]
mov	ecx, [sftp_0+18h]
mov	[ecx+eax], req
test	byte ptr [sftp_0+24h], 1
jnz	short loc_64232BB4
mov	[sftp_0+18h], req
mov	dword ptr [req+eax], 0
add	dword ptr [sftp_0+24h],	4
xor	eax, eax
mov	ecx, 0FFFFFFFFh
mov	edi, path_0
repne scasb
not	ecx
lea	eax, [ecx-1]
mov	dword ptr [esp+24h], 1Dh
mov	[esp+20h], esi
mov	dword ptr [esp+1Ch], 0Ah
mov	[esp+18h], eax
mov	dword ptr [esp+14h], 5
mov	eax, [req+20h]
mov	[esp+10h], eax
mov	dword ptr [esp+0Ch], 5
add	ecx, 7
mov	[esp+8], ecx	
mov	eax, [req+24h]
mov	[esp+4], eax	
mov	[esp], sftp_0	
call	_silc_sftp_send_packet
add	esp, 3Ch
pop	sftp_0
pop	path_0
pop	edi
leave
retn
movzx	ecx, word ptr [sftp_0+22h]
mov	edi, [sftp_0+18h]
mov	[req+ecx], edi
jmp	short loc_64232B49
mov	[sftp_0+14h], req
movzx	context_0, word	ptr [sftp_0+20h]
jmp	loc_64232B43
public _silc_sftp_readdir
push	ebp
mov	ebp, esp
push	edi
push	esi
push	ebx
sub	esp, 3Ch
mov	ebx, [ebp+sftp]
mov	esi, [ebp+handle]
mov	dword ptr [esp+4], 28h 
mov	dword ptr [esp], 1 
call	_silc_calloc
test	eax, eax
jz	loc_64232C8B
mov	edx, [sftp_0+2Ch]
mov	[req+20h], edx
inc	edx
mov	[sftp_0+2Ch], edx
mov	dword ptr [req+24h], 0Ch
mov	edx, [ebp+callback]
mov	[req+10h], edx
mov	edx, [ebp+context]
mov	[req+1Ch], edx
mov	edx, [sftp_0+14h]
test	edx, edx
jz	loc_64232CA0
movzx	edx, word ptr [sftp_0+20h]
mov	ecx, [sftp_0+18h]
mov	[ecx+edx], req
test	byte ptr [sftp_0+24h], 1
jnz	short loc_64232C94
mov	[sftp_0+18h], req
mov	dword ptr [req+edx], 0
add	dword ptr [sftp_0+24h],	4
mov	edx, [handle_0+4]
mov	dword ptr [esp+28h], 1Dh
mov	[esp+24h], edx
mov	ecx, [handle_0]
mov	[esp+20h], ecx
mov	dword ptr [esp+1Ch], 1Bh
mov	[esp+18h], edx
mov	dword ptr [esp+14h], 5
mov	ecx, [req+20h]
mov	[esp+10h], ecx
mov	dword ptr [esp+0Ch], 5
add	edx, 8
mov	[esp+8], edx	
mov	req, [req+24h]
mov	[esp+4], eax	
mov	[esp], sftp_0	
call	_silc_sftp_send_packet
add	esp, 3Ch
pop	sftp_0
pop	handle_0
pop	edi
leave
retn
align 4
movzx	ecx, word ptr [sftp_0+22h]
mov	edi, [sftp_0+18h]
mov	[req+ecx], edi
jmp	short loc_64232C2F
mov	[sftp_0+14h], req
movzx	edx, word ptr [sftp_0+20h]
jmp	short loc_64232C29
align 4
public _silc_sftp_opendir
push	ebp
mov	ebp, esp
push	edi
push	esi
push	ebx
sub	esp, 3Ch
mov	ebx, [ebp+sftp]
mov	esi, [ebp+path]
mov	dword ptr [esp+4], 28h 
mov	dword ptr [esp], 1 
call	_silc_calloc
mov	edx, eax
test	eax, eax
jz	loc_64232D74
mov	req, [sftp_0+2Ch]
mov	[req+20h], eax
inc	eax
mov	[sftp_0+2Ch], eax
mov	dword ptr [req+24h], 0Bh
mov	eax, [ebp+callback]
mov	[req+8], eax
mov	eax, [ebp+context]
mov	[req+1Ch], eax
mov	ecx, [sftp_0+14h]
test	ecx, ecx
jz	loc_64232D88
movzx	context_0, word	ptr [sftp_0+20h]
mov	ecx, [sftp_0+18h]
mov	[ecx+eax], req
test	byte ptr [sftp_0+24h], 1
jnz	short loc_64232D7C
mov	[sftp_0+18h], req
mov	dword ptr [req+eax], 0
add	dword ptr [sftp_0+24h],	4
xor	eax, eax
mov	ecx, 0FFFFFFFFh
mov	edi, path_0
repne scasb
not	ecx
lea	eax, [ecx-1]
mov	dword ptr [esp+24h], 1Dh
mov	[esp+20h], esi
mov	dword ptr [esp+1Ch], 0Ah
mov	[esp+18h], eax
mov	dword ptr [esp+14h], 5
mov	eax, [req+20h]
mov	[esp+10h], eax
mov	dword ptr [esp+0Ch], 5
add	ecx, 7
mov	[esp+8], ecx	
mov	eax, [req+24h]
mov	[esp+4], eax	
mov	[esp], sftp_0	
call	_silc_sftp_send_packet
add	esp, 3Ch
pop	sftp_0
pop	path_0
pop	edi
leave
retn
movzx	ecx, word ptr [sftp_0+22h]
mov	edi, [sftp_0+18h]
mov	[req+ecx], edi
jmp	short loc_64232D11
mov	[sftp_0+14h], req
movzx	context_0, word	ptr [sftp_0+20h]
jmp	loc_64232D0B
public _silc_sftp_rmdir
push	ebp
mov	ebp, esp
push	edi
push	esi
push	ebx
sub	esp, 3Ch
mov	ebx, [ebp+sftp]
mov	esi, [ebp+path]
mov	dword ptr [esp+4], 28h 
mov	dword ptr [esp], 1 
call	_silc_calloc
mov	edx, eax
test	eax, eax
jz	loc_64232E5C
mov	req, [sftp_0+2Ch]
mov	[req+20h], eax
inc	eax
mov	[sftp_0+2Ch], eax
mov	dword ptr [req+24h], 0Fh
mov	eax, [ebp+callback]
mov	[req+4], eax
mov	eax, [ebp+context]
mov	[req+1Ch], eax
mov	edi, [sftp_0+14h]
test	edi, edi
jz	loc_64232E70
movzx	context_0, word	ptr [sftp_0+20h]
mov	ecx, [sftp_0+18h]
mov	[ecx+eax], req
test	byte ptr [sftp_0+24h], 1
jnz	short loc_64232E64
mov	[sftp_0+18h], req
mov	dword ptr [req+eax], 0
add	dword ptr [sftp_0+24h],	4
xor	eax, eax
mov	ecx, 0FFFFFFFFh
mov	edi, path_0
repne scasb
not	ecx
lea	eax, [ecx-1]
mov	dword ptr [esp+24h], 1Dh
mov	[esp+20h], esi
mov	dword ptr [esp+1Ch], 0Ah
mov	[esp+18h], eax
mov	dword ptr [esp+14h], 5
mov	eax, [req+20h]
mov	[esp+10h], eax
mov	dword ptr [esp+0Ch], 5
add	ecx, 7
mov	[esp+8], ecx	
mov	eax, [req+24h]
mov	[esp+4], eax	
mov	[esp], sftp_0	
call	_silc_sftp_send_packet
add	esp, 3Ch
pop	sftp_0
pop	path_0
pop	edi
leave
retn
movzx	ecx, word ptr [sftp_0+22h]
mov	edi, [sftp_0+18h]
mov	[req+ecx], edi
jmp	short loc_64232DF9
mov	[sftp_0+14h], req
movzx	context_0, word	ptr [sftp_0+20h]
jmp	loc_64232DF3
public _silc_sftp_rename
push	ebp
mov	ebp, esp
push	edi
push	esi
push	ebx
sub	esp, 5Ch
mov	ebx, [ebp+sftp]
mov	dword ptr [esp+4], 28h 
mov	dword ptr [esp], 1 
call	_silc_calloc
mov	edx, eax
test	eax, eax
jz	loc_64232F7A
mov	req, [sftp_0+2Ch]
mov	[req+20h], eax
inc	eax
mov	[sftp_0+2Ch], eax
mov	dword ptr [req+24h], 12h
mov	eax, [ebp+callback]
mov	[req+4], eax
mov	eax, [ebp+context]
mov	[req+1Ch], eax
mov	eax, [sftp_0+14h]
test	eax, eax
jz	loc_64232F94
movzx	eax, word ptr [sftp_0+20h]
mov	ecx, [sftp_0+18h]
mov	[ecx+eax], req
test	byte ptr [sftp_0+24h], 1
jnz	loc_64232F84
mov	[sftp_0+18h], req
mov	dword ptr [req+eax], 0
add	dword ptr [sftp_0+24h],	4
mov	esi, 0FFFFFFFFh
xor	eax, eax
mov	ecx, esi
mov	edi, [ebp+oldname]
repne scasb
not	ecx
dec	ecx
mov	[ebp+var_1C], ecx
mov	ecx, esi
mov	edi, [ebp+newname]
repne scasb
mov	esi, ecx
not	esi
dec	esi
mov	dword ptr [esp+34h], 1Dh
mov	eax, [ebp+newname]
mov	[esp+30h], eax
mov	dword ptr [esp+2Ch], 0Ah
mov	[esp+28h], esi
mov	dword ptr [esp+24h], 5
mov	ecx, [ebp+oldname]
mov	[esp+20h], ecx
mov	dword ptr [esp+1Ch], 0Ah
mov	eax, [ebp+var_1C]
mov	[esp+18h], eax
mov	dword ptr [esp+14h], 5
mov	eax, [req+20h]
mov	[esp+10h], eax
mov	dword ptr [esp+0Ch], 5
mov	ecx, [ebp+var_1C]
lea	eax, [esi+ecx+0Ch]
mov	[esp+8], eax	
mov	eax, [req+24h]
mov	[esp+4], eax	
mov	[esp], sftp_0	
call	_silc_sftp_send_packet
add	esp, 5Ch
pop	sftp_0
pop	esi
pop	edi
leave
retn
align 4
movzx	ecx, word ptr [sftp_0+22h]
mov	esi, [sftp_0+18h]
mov	[req+ecx], esi
jmp	loc_64232EE2
align 4
mov	[sftp_0+14h], req
movzx	eax, word ptr [sftp_0+20h]
jmp	loc_64232ED8
public _silc_sftp_remove
push	ebp
mov	ebp, esp
push	edi
push	esi
push	ebx
sub	esp, 3Ch
mov	ebx, [ebp+sftp]
mov	esi, [ebp+filename]
mov	dword ptr [esp+4], 28h 
mov	dword ptr [esp], 1 
call	_silc_calloc
mov	edx, eax
test	eax, eax
jz	loc_64233068
mov	req, [sftp_0+2Ch]
mov	[req+20h], eax
inc	eax
mov	[sftp_0+2Ch], eax
mov	dword ptr [req+24h], 0Dh
mov	eax, [ebp+callback]
mov	[req+4], eax
mov	eax, [ebp+context]
mov	[req+1Ch], eax
mov	ecx, [sftp_0+14h]
test	ecx, ecx
jz	loc_6423307C
movzx	context_0, word	ptr [sftp_0+20h]
mov	ecx, [sftp_0+18h]
mov	[ecx+eax], req
test	byte ptr [sftp_0+24h], 1
jnz	short loc_64233070
mov	[sftp_0+18h], req
mov	dword ptr [req+eax], 0
add	dword ptr [sftp_0+24h],	4
xor	eax, eax
mov	ecx, 0FFFFFFFFh
mov	edi, filename_0
repne scasb
not	ecx
lea	eax, [ecx-1]
mov	dword ptr [esp+24h], 1Dh
mov	[esp+20h], esi
mov	dword ptr [esp+1Ch], 0Ah
mov	[esp+18h], eax
mov	dword ptr [esp+14h], 5
mov	eax, [req+20h]
mov	[esp+10h], eax
mov	dword ptr [esp+0Ch], 5
add	ecx, 7
mov	[esp+8], ecx	
mov	eax, [req+24h]
mov	[esp+4], eax	
mov	[esp], sftp_0	
call	_silc_sftp_send_packet
add	esp, 3Ch
pop	sftp_0
pop	filename_0
pop	edi
leave
retn
movzx	ecx, word ptr [sftp_0+22h]
mov	edi, [sftp_0+18h]
mov	[req+ecx], edi
jmp	short loc_64233005
mov	[sftp_0+14h], req
movzx	context_0, word	ptr [sftp_0+20h]
jmp	loc_64232FFF
public _silc_sftp_write
push	ebp
mov	ebp, esp
push	edi
push	esi
push	ebx
sub	esp, 8Ch
mov	ebx, [ebp+sftp]
mov	edi, [ebp+handle]
mov	eax, dword ptr [ebp+offset]
mov	edx, dword ptr [ebp+offset+4]
mov	[ebp+var_20], eax
mov	[ebp+var_1C], edx
mov	esi, [ebp+data_len]
mov	dword ptr [esp+4], 28h 
mov	dword ptr [esp], 1 
call	_silc_calloc
test	eax, eax
jz	loc_642331A5
mov	edx, [sftp_0+2Ch]
mov	[req+20h], edx
inc	edx
mov	[sftp_0+2Ch], edx
mov	dword ptr [req+24h], 6
mov	edx, [ebp+callback]
mov	[req+4], edx
mov	edx, [ebp+context]
mov	[req+1Ch], edx
mov	edx, [sftp_0+14h]
test	edx, edx
jz	loc_642331C0
movzx	ecx, word ptr [sftp_0+20h]
mov	[ebp+var_3C], ecx
mov	ecx, [sftp_0+18h]
mov	edx, [ebp+var_3C]
mov	[ecx+edx], req
test	byte ptr [sftp_0+24h], 1
jnz	loc_642331B0
mov	[sftp_0+18h], req
mov	ecx, [ebp+var_3C]
mov	dword ptr [req+ecx], 0
add	dword ptr [sftp_0+24h],	4
mov	edx, [handle_0+4]
mov	[ebp+var_2C], edx
mov	dword ptr [esp+48h], 1Dh
mov	[esp+44h], data_len_0
mov	ecx, [ebp+data]
mov	[esp+40h], ecx
mov	dword ptr [esp+3Ch], 1Bh
mov	[esp+38h], data_len_0
mov	dword ptr [esp+34h], 5
mov	edx, [ebp+var_20]
mov	ecx, [ebp+var_1C]
mov	[esp+2Ch], edx
mov	[esp+30h], ecx
mov	dword ptr [esp+28h], 7
mov	ecx, [ebp+var_2C]
mov	[esp+24h], ecx
mov	ecx, [handle_0]
mov	[esp+20h], ecx
mov	dword ptr [esp+1Ch], 1Bh
mov	edx, [ebp+var_2C]
mov	[esp+18h], edx
mov	dword ptr [esp+14h], 5
mov	ecx, [req+20h]
mov	[esp+10h], ecx
mov	dword ptr [esp+0Ch], 5
lea	edx, [edx+data_len_0+14h]
mov	[esp+8], edx	
mov	req, [req+24h]
mov	[esp+4], eax	
mov	[esp], sftp_0	
call	_silc_sftp_send_packet
add	esp, 8Ch
pop	sftp_0
pop	data_len_0
pop	handle_0
leave
retn
movzx	ecx, word ptr [sftp_0+22h]
mov	edx, [sftp_0+18h]
mov	[req+ecx], edx
jmp	loc_64233107
align 10h
mov	[sftp_0+14h], req
movzx	edx, word ptr [sftp_0+20h]
mov	[ebp+var_3C], edx
jmp	loc_642330FD
align 10h
public _silc_sftp_read
push	ebp
mov	ebp, esp
push	edi
push	esi
push	ebx
sub	esp, 5Ch
mov	ebx, [ebp+sftp]
mov	eax, dword ptr [ebp+offset]
mov	edx, dword ptr [ebp+offset+4]
mov	[ebp+var_20], eax
mov	[ebp+var_1C], edx
mov	dword ptr [esp+4], 28h 
mov	dword ptr [esp], 1 
call	_silc_calloc
test	eax, eax
jz	loc_642332C7
mov	edx, [sftp_0+2Ch]
mov	[req+20h], edx
inc	edx
mov	[sftp_0+2Ch], edx
mov	dword ptr [req+24h], 5
mov	edx, [ebp+callback]
mov	[req+0Ch], edx
mov	edx, [ebp+context]
mov	[req+1Ch], edx
mov	ecx, [sftp_0+14h]
test	ecx, ecx
jz	loc_642332E0
movzx	context_0, word	ptr [sftp_0+20h]
mov	ecx, [sftp_0+18h]
mov	[ecx+edx], req
test	byte ptr [sftp_0+24h], 1
jnz	loc_642332D0
mov	[sftp_0+18h], req
mov	dword ptr [req+edx], 0
add	dword ptr [sftp_0+24h],	4
mov	ecx, [ebp+handle]
mov	edx, [ecx+4]
mov	dword ptr [esp+3Ch], 1Dh
mov	ecx, [ebp+len]
mov	[esp+38h], ecx
mov	dword ptr [esp+34h], 5
mov	esi, [ebp+var_20]
mov	edi, [ebp+var_1C]
mov	[esp+2Ch], esi
mov	[esp+30h], edi
mov	dword ptr [esp+28h], 7
mov	[esp+24h], edx
mov	edi, [ebp+handle]
mov	ecx, [edi]
mov	[esp+20h], ecx
mov	dword ptr [esp+1Ch], 1Bh
mov	[esp+18h], edx
mov	dword ptr [esp+14h], 5
mov	ecx, [req+20h]
mov	[esp+10h], ecx
mov	dword ptr [esp+0Ch], 5
add	edx, 14h
mov	[esp+8], edx	
mov	req, [req+24h]
mov	[esp+4], eax	
mov	[esp], sftp_0	
call	_silc_sftp_send_packet
add	esp, 5Ch
pop	sftp_0
pop	esi
pop	edi
leave
retn
align 10h
movzx	ecx, word ptr [sftp_0+22h]
mov	edi, [sftp_0+18h]
mov	[req+ecx], edi
jmp	loc_64233240
align 10h
mov	[sftp_0+14h], req
movzx	context_0, word	ptr [sftp_0+20h]
jmp	loc_64233236
public _silc_sftp_open
push	ebp
mov	ebp, esp
push	edi
push	esi
push	ebx
sub	esp, 6Ch
mov	ebx, [ebp+sftp]
mov	eax, [ebp+filename]
mov	[ebp+var_1C], eax
mov	edi, [ebp+pflags]
mov	[ebp+var_28], edi
mov	eax, [ebp+attrs]
mov	[ebp+attr], eax
mov	edi, [ebp+callback]
mov	[ebp+var_24], edi
mov	edi, [ebp+context]
mov	dword ptr [esp+4], 28h 
mov	dword ptr [esp], 1 
call	_silc_calloc
mov	esi, eax
test	eax, eax
jz	loc_64233440
mov	req, [sftp_0+2Ch]
mov	[req+20h], eax
inc	eax
mov	[sftp_0+2Ch], eax
mov	dword ptr [req+24h], 3
mov	eax, [ebp+var_24]
mov	[req+8], eax
mov	[req+1Ch], context_0
mov	context_0, [sftp_0+14h]
test	edi, edi
jz	loc_64233448
movzx	eax, word ptr [sftp_0+20h]
mov	edx, [sftp_0+18h]
mov	[edx+eax], req
test	byte ptr [sftp_0+24h], 1
jnz	loc_64233430
mov	[sftp_0+18h], req
mov	dword ptr [req+eax], 0
add	dword ptr [sftp_0+24h],	4
mov	edi, [ebp+attr]
mov	[esp], edi	
call	_silc_sftp_attr_encode
mov	edx, eax
test	eax, eax
jz	loc_64233440
xor	attrs_buf, attrs_buf
mov	ecx, 0FFFFFFFFh
mov	edi, [ebp+var_1C]
repne scasb
not	ecx
dec	ecx
mov	edi, [attrs_buf+4]
mov	eax, [attrs_buf+8]
sub	eax, edi
mov	dword ptr [esp+38h], 1Dh
mov	[esp+34h], eax
mov	[esp+30h], edi
mov	dword ptr [esp+2Ch], 1Bh
mov	edi, [ebp+var_28]
mov	[esp+28h], edi
mov	dword ptr [esp+24h], 5
mov	edi, [ebp+var_1C]
mov	[esp+20h], edi
mov	dword ptr [esp+1Ch], 0Ah
mov	[esp+18h], ecx
mov	dword ptr [esp+14h], 5
mov	edi, [req+20h]
mov	[esp+10h], edi
mov	dword ptr [esp+0Ch], 5
lea	eax, [eax+ecx+0Ch]
mov	[esp+8], eax	
mov	eax, [req+24h]
mov	[esp+4], eax	
mov	[esp], sftp_0	
mov	[ebp+var_2C], attrs_buf
call	_silc_sftp_send_packet
mov	edx, [ebp+var_2C]
mov	eax, [edx]
mov	[esp], eax	
call	_silc_free
mov	edx, [ebp+var_2C]
mov	[ebp+sftp], edx
add	esp, 6Ch
pop	sftp_0
pop	req
pop	edi
leave
jmp	_silc_free
align 10h
movzx	edx, word ptr [sftp_0+22h]
mov	ecx, [sftp_0+18h]
mov	[req+edx], ecx
jmp	loc_6423336A
align 10h
			
add	esp, 6Ch
pop	sftp_0
pop	req
pop	edi
leave
retn
mov	[sftp_0+14h], req
movzx	eax, word ptr [sftp_0+20h]
jmp	loc_64233360
public _silc_sftp_close
push	ebp
mov	ebp, esp
push	edi
push	esi
push	ebx
sub	esp, 4Ch
mov	ebx, [ebp+sftp]
mov	esi, [ebp+handle]
mov	eax, [ebp+callback]
mov	[ebp+var_1C], eax
mov	edi, [ebp+context]
mov	dword ptr [esp+4], 28h 
mov	dword ptr [esp], 1 
call	_silc_calloc
test	eax, eax
jz	loc_64233548
mov	edx, [sftp_0+2Ch]
mov	[req+20h], edx
inc	edx
mov	[sftp_0+2Ch], edx
mov	dword ptr [req+24h], 4
mov	edx, [ebp+var_1C]
mov	[req+4], edx
mov	[req+1Ch], context_0
mov	edx, [sftp_0+14h]
test	edx, edx
jz	loc_6423353C
movzx	edx, word ptr [sftp_0+20h]
mov	ecx, [sftp_0+18h]
mov	[ecx+edx], req
test	byte ptr [sftp_0+24h], 1
jz	short loc_642334C7
movzx	ecx, word ptr [sftp_0+22h]
mov	context_0, [sftp_0+18h]
mov	[req+ecx], edi
mov	[sftp_0+18h], req
mov	dword ptr [req+edx], 0
add	dword ptr [sftp_0+24h],	4
mov	edx, [handle_0+4]
mov	dword ptr [esp+28h], 1Dh
mov	[esp+24h], edx
mov	ecx, [handle_0]
mov	[esp+20h], ecx
mov	dword ptr [esp+1Ch], 1Bh
mov	[esp+18h], edx
mov	dword ptr [esp+14h], 5
mov	ecx, [req+20h]
mov	[esp+10h], ecx
mov	dword ptr [esp+0Ch], 5
add	edx, 8
mov	[esp+8], edx	
mov	req, [req+24h]
mov	[esp+4], eax	
mov	[esp], sftp_0	
call	_silc_sftp_send_packet
mov	eax, [handle_0]
mov	[esp], eax	
call	_silc_free
mov	[ebp+sftp], handle_0
add	esp, 4Ch
pop	sftp_0
pop	handle_0
pop	edi
leave
jmp	_silc_free
mov	[sftp_0+14h], req
movzx	edx, word ptr [sftp_0+20h]
jmp	loc_642334B7
add	esp, 4Ch
pop	sftp_0
pop	handle_0
pop	context_0
leave
retn
public _silc_sftp_client_start
push	ebp
mov	ebp, esp
push	edi
push	esi
push	ebx
sub	esp, 2Ch
mov	esi, [ebp+stream]
mov	edi, [ebp+schedule]
test	esi, esi
jnz	short loc_64233570
xor	eax, eax
add	esp, 2Ch
pop	ebx
pop	stream_0
pop	schedule_0
leave
retn
align 10h
mov	dword ptr [esp+4], 30h 
mov	dword ptr [esp], 1 
call	_silc_calloc
mov	ebx, eax
test	eax, eax
jz	short loc_64233563
mov	[eax], stream_0
mov	eax, [ebp+version_cb]
mov	[ebx+8], eax
mov	eax, [ebp+error_cb]
mov	[ebx+0Ch], eax
mov	eax, [ebp+context]
mov	[ebx+10h], eax
mov	[ebx+4], schedule_0
mov	eax, [ebx+24h]
and	eax, 3
mov	[ebx+24h], eax
mov	word ptr [ebx+20h], 0
mov	word ptr [ebx+22h], 0
mov	byte ptr [ebx+24h], 0
mov	dword ptr [ebx+1Ch], 0
mov	dword ptr [ebx+18h], 0
mov	dword ptr [ebx+14h], 0
mov	[esp+0Ch], ebx	
mov	dword ptr [esp+8], offset _silc_sftp_client_io 
mov	[esp+4], schedule_0 
mov	[esp], stream_0	
call	_silc_stream_set_notifier
mov	dword ptr [esp+14h], 1Dh
mov	dword ptr [esp+10h], 3
mov	dword ptr [esp+0Ch], 5
mov	dword ptr [esp+8], 4 
mov	dword ptr [esp+4], 1 
mov	[esp], ebx	
call	_silc_sftp_send_packet
mov	eax, ebx
add	esp, 2Ch
pop	ebx
pop	stream_0
pop	schedule_0
leave
retn
align 4
			
push	ebp
mov	ebp, esp
push	edi
push	esi
push	ebx
sub	esp, 3Ch
mov	ebx, [ebp+req]
mov	eax, [ebp+status]
lea	edx, [ebp+arg_10]
mov	ecx, [ebx+24h]
cmp	ecx, 0Bh
jz	loc_64233848
jbe	short loc_642336A4
cmp	ecx, 11h
jz	short loc_642336BC
jbe	loc_64233734
cmp	ecx, 13h
jz	loc_6423373E
jb	loc_642337B8
cmp	ecx, 14h
jz	loc_642337B8
cmp	ecx, 0C8h
jnz	short loc_642336E8
test	status_0, status_0
jz	loc_642338F5
mov	edx, [req_0+18h]
test	edx, edx
jz	short loc_642336E8
mov	ecx, [req_0+1Ch]
mov	[esp+10h], ecx
mov	dword ptr [esp+0Ch], 0
mov	dword ptr [esp+8], 0
mov	[esp+4], status_0
mov	edi, [ebp+sftp]
mov	[esp], edi
call	edx
jmp	short loc_642336E8
align 4
cmp	ecx, 6
jz	loc_642337B8
jbe	loc_64233770
cmp	ecx, 8
ja	loc_642337B8
test	status_0, status_0
jz	loc_64233867
mov	edx, [req_0+14h]
test	edx, edx
jz	short loc_642336E8
mov	ecx, [req_0+1Ch]
mov	[esp+0Ch], ecx
mov	dword ptr [esp+8], 0
mov	[esp+4], status_0
mov	edi, [ebp+sftp]
mov	[esp], edi
call	edx
xchg	ax, ax
			
mov	message, [ebp+sftp]
mov	eax, [ecx+14h]
test	prev, prev
jz	short loc_64233717
cmp	req_0, prev
jz	loc_642337E8
mov	ecx, [ebp+sftp]
movzx	hdata, word ptr	[ecx+20h]
jmp	short loc_6423370E
align 4
cmp	req_0, prev
jz	loc_642337F4
mov	eax, prev
lea	data_len, [prev+esi]
mov	ecx, [p]
test	prev, prev
jnz	short loc_64233704
mov	hdata, [ebp+sftp]
cmp	[esi+18h], req_0
jz	loc_6423382B
mov	[esp], req_0	
call	_silc_free
add	esp, 3Ch
pop	req_0
pop	esi
pop	edi
leave
retn
align 4
cmp	ecx, 0Fh
ja	short loc_6423373E
cmp	ecx, 0Dh
jnb	short loc_642337B8
			
test	status_0, status_0
jz	loc_64233894
mov	edx, [req_0+10h]
test	edx, edx
jz	short loc_642336E8
mov	ecx, [req_0+1Ch]
mov	[esp+0Ch], ecx
mov	dword ptr [esp+8], 0
mov	[esp+4], status_0
mov	ecx, [ebp+sftp]
mov	[esp], ecx
call	edx
jmp	loc_642336E8
align 10h
cmp	ecx, 4
jz	short loc_642337B8
jbe	loc_6423383E
test	status_0, status_0
jz	loc_642338C1
mov	edx, [req_0+0Ch]
test	edx, edx
jz	loc_642336E8
mov	ecx, [req_0+1Ch]
mov	[esp+10h], ecx
mov	dword ptr [esp+0Ch], 0
mov	dword ptr [esp+8], 0
mov	[esp+4], status_0
mov	status_0, [ebp+sftp]
mov	[esp], eax
call	edx
jmp	loc_642336E8
align 4
			
mov	ecx, [edx]
mov	esi, [edx+4]
mov	edx, [req_0+4]
test	edx, edx
jz	loc_642336E8
mov	edi, [req_0+1Ch]
mov	[esp+10h], edi
mov	[esp+0Ch], language_tag
mov	[esp+8], message
mov	[esp+4], status_0
mov	language_tag, [ebp+sftp]
mov	[esp], esi
call	edx
jmp	loc_642336E8
mov	data_len, ecx
add	p, 14h
movzx	hdata, word ptr	[ecx+20h]
xor	prev, prev
nop
mov	prev, [req_0+esi]
mov	[p], ecx
test	ecx, ecx
jz	short loc_64233810
mov	esi, [ebp+sftp]
test	byte ptr [esi+24h], 1
jz	short loc_64233810
movzx	esi, word ptr [esi+22h]
mov	edi, [req_0+esi]
mov	[ecx+esi], edi
			
mov	edi, [ebp+sftp]
cmp	[edi+1Ch], req_0
jz	short loc_64233860
mov	p, [ebp+sftp]
sub	dword ptr [edx+24h], 4
mov	esi, [ebp+sftp]
cmp	[esi+18h], req_0
jnz	loc_64233723
mov	[esi+18h], prev
mov	[esp], req_0	
call	_silc_free
add	esp, 3Ch
pop	req_0
pop	esi
pop	edi
leave
retn
cmp	ecx, 3
jnz	loc_642336E8
nop
test	status_0, status_0
jz	loc_64233906
mov	edx, [req_0+8]
test	edx, edx
jnz	loc_6423374D
jmp	loc_642336E8
mov	p, [p]
mov	[edi+1Ch], edx
jmp	short loc_64233818
mov	edx, [edx]
mov	status_0, [req_0+14h]
test	eax, eax
jz	loc_642336E8
mov	ecx, [req_0+1Ch]
mov	[esp+0Ch], ecx
mov	[esp+8], attr
mov	dword ptr [esp+4], 0
mov	attr, [ebp+sftp]
mov	[esp], edx
call	eax
jmp	loc_642336E8
mov	edx, [edx]
mov	status_0, [req_0+10h]
test	eax, eax
jz	loc_642336E8
mov	ecx, [req_0+1Ch]
mov	[esp+0Ch], ecx
mov	[esp+8], name
mov	dword ptr [esp+4], 0
mov	esi, [ebp+sftp]
mov	[esp], esi
call	eax
jmp	loc_642336E8
mov	ecx, [edx]
mov	edx, [edx+4]
mov	status_0, [req_0+0Ch]
test	eax, eax
jz	loc_642336E8
mov	esi, [req_0+1Ch]
mov	[esp+10h], esi
mov	[esp+0Ch], data_len
mov	[esp+8], data
mov	dword ptr [esp+4], 0
mov	data_len, [ebp+sftp]
mov	[esp], edx
call	eax
jmp	loc_642336E8
mov	ecx, [edx]
mov	edx, [edx+4]
mov	status_0, [req_0+18h]
test	eax, eax
jnz	short loc_642338D1
jmp	loc_642336E8
mov	esi, [edx]
mov	edx, [edx+4]
mov	[ebp+items], edx
mov	dword ptr [esp+4], 8 
mov	dword ptr [esp], 1 
call	_silc_calloc
mov	[ebp+var_1C], eax
test	eax, eax
jz	short loc_64233983
mov	dword ptr [esp+4], 1 
mov	edi, [ebp+items]
mov	[esp], edi	
call	_silc_calloc
mov	edx, [ebp+var_1C]
mov	[edx], eax
test	eax, eax
jz	short loc_64233983
mov	edi, eax
mov	ecx, [ebp+items]
rep movsb
mov	hdata, [ebp+items]
mov	hdata_len, [ebp+var_1C]
mov	[ecx+4], esi
mov	eax, [req_0+8]
test	eax, eax
jz	loc_642336E8
mov	edx, [req_0+1Ch]
mov	[esp+0Ch], edx
mov	edx, [ebp+var_1C]
mov	[esp+8], edx
mov	dword ptr [esp+4], 0
mov	ecx, [ebp+sftp]
mov	[esp], ecx
call	eax
jmp	loc_642336E8
			
mov	eax, [req_0+8]
test	eax, eax
jz	loc_642336E8
mov	edx, [req_0+1Ch]
mov	[esp+0Ch], edx
mov	dword ptr [esp+8], 0
mov	dword ptr [esp+4], 0
mov	edi, [ebp+sftp]
mov	[esp], edi
call	eax
jmp	loc_642336E8
align 4
push	ebp
mov	ebp, esp
push	edi
push	esi
push	ebx
mov	eax, 1009Ch	
call	__alloca
mov	esi, [ebp+stream]
mov	eax, [ebp+arg_4]
mov	ebx, [ebp+sftp]
test	eax, eax
jnz	short loc_64233A10
mov	dword ptr [esp+8], 10000h 
lea	edi, [ebp+buf]
mov	[esp+4], edi	
mov	[esp], stream_0	
call	_silc_stream_read
cmp	eax, 0
jg	loc_64233A80
jz	loc_64233BC8
cmp	ret, 0FFFFFFFEh
jz	loc_64233C45
nop
			
add	esp, 1009Ch
pop	context_0
pop	esi
pop	edi
leave
retn
align 10h
dec	status_0
jnz	short loc_64233A04
mov	edx, [context_0+28h]
mov	eax, [edx+4]
mov	ecx, [edx]
cmp	eax, ecx
jz	short loc_64233A04
mov	eax, ecx
mov	[edx+4], ecx
mov	ecx, [edx+8]
mov	[ebp+var_1007C], context_0
jmp	short loc_64233A78
align 10h
sub	ecx, eax
mov	[esp+8], ecx	
mov	[esp+4], eax	
mov	[esp], stream_0	
call	_silc_stream_write
test	eax, eax
jz	loc_64233B7C
cmp	ret, 0FFFFFFFEh
jz	loc_64233BB0
cmp	ret, 0FFFFFFFFh
jz	short loc_64233A04
mov	ecx, [ebp+var_1007C]
mov	edx, [ecx+28h]
mov	ecx, [edx+8]
mov	edi, [edx+4]
mov	context_0, ecx
sub	ebx, edi
cmp	ret, ebx
ja	short loc_64233A75
lea	ret, [edi+ret]
mov	[edx+4], eax
mov	ret, [edx+4]
cmp	ecx, eax
jnz	short loc_64233A30
jmp	short loc_64233A04
align 10h
mov	[ebp+packet.head], edi
mov	[ebp+packet.data], edi
lea	ret, [edi+ret]
mov	[ebp+packet.end], eax
mov	[ebp+packet.tail], eax
mov	[ebp+payload], 0
lea	eax, [ebp+payload_len]
mov	[esp+8], eax	
lea	eax, [ebp+payload]
mov	[esp+4], eax	
lea	eax, [ebp+packet]
mov	[esp], eax	
call	_silc_sftp_packet_decode
test	eax, eax
jz	loc_64233A04
mov	edx, [ebp+payload]
mov	[ebp+src.head],	edx
mov	[ebp+src.data],	edx
mov	ecx, [ebp+payload_len]
add	ecx, edx
mov	[ebp+src.end], ecx
mov	[ebp+src.tail],	ecx
cmp	eax, 67h
jz	loc_64233D6A
jbe	loc_64233BE2
cmp	eax, 69h
jz	loc_64233CE6
jb	loc_64233C6B
cmp	eax, 0C9h
jnz	loc_64233A04
mov	[ebp+var_34], 0
mov	dword ptr [esp+18h], 1Dh
sub	ecx, edx
lea	eax, [ecx-4]
mov	[esp+14h], eax
lea	eax, [ebp+var_34]
mov	[esp+10h], eax
mov	dword ptr [esp+0Ch], 0Ch
lea	eax, [ebp+var_24]
mov	[esp+8], eax
mov	dword ptr [esp+4], 5
lea	eax, [ebp+src]
mov	[esp], eax	
call	_silc_buffer_unformat
test	eax, eax
js	loc_64233A04
mov	stream_0, [ebp+var_24]
mov	eax, [context_0+14h]
mov	[context_0+1Ch], eax
and	byte ptr [context_0+24h], 0FDh
xor	ecx, ecx
test	eax, eax
jz	loc_64233A04
test	cl, cl
jz	loc_64233C5F
movzx	edx, word ptr [context_0+22h]
mov	edx, [eax+edx]
mov	[context_0+1Ch], edx
cmp	esi, [eax+20h]
jz	loc_64233FED
mov	eax, edx
test	eax, eax
jnz	short loc_64233B54
jmp	loc_64233A04
align 4
mov	context_0, [ebp+var_1007C]
mov	ret, [context_0+10h]
mov	[esp+8], eax
mov	dword ptr [esp+4], 1
mov	[esp], context_0
call	dword ptr [context_0+0Ch]
mov	eax, [context_0+28h]
mov	edx, [eax]
mov	[eax+8], edx
mov	[eax+4], edx
add	esp, 1009Ch
pop	context_0
pop	stream_0
pop	edi
leave
retn
align 10h
mov	context_0, [ebp+var_1007C]
mov	ret, [context_0+10h]
mov	[esp+8], eax
mov	dword ptr [esp+4], 6
jmp	short loc_64233B91
align 4
mov	ret, [context_0+10h]
mov	[esp+8], eax
mov	dword ptr [esp+4], 1
mov	[esp], context_0
call	dword ptr [context_0+0Ch]
jmp	loc_64233A04
cmp	eax, 65h
jz	loc_64233E83
ja	loc_64233DFA
cmp	eax, 2
jnz	loc_64233A04
mov	dword ptr [esp+0Ch], 1Dh
lea	eax, [ebp+count]
mov	[esp+8], eax
mov	dword ptr [esp+4], 5
lea	eax, [ebp+src]
mov	[esp], eax	
call	_silc_buffer_unformat
test	eax, eax
js	loc_642340FF
mov	eax, [context_0+10h]
mov	[esp+0Ch], eax
mov	eax, [ebp+count]
mov	[esp+8], eax
mov	dword ptr [esp+4], 0
mov	[esp], context_0
call	dword ptr [context_0+8]
jmp	loc_64233A04
mov	ret, [context_0+10h]
mov	[esp+8], eax
mov	dword ptr [esp+4], 6
mov	[esp], context_0
call	dword ptr [context_0+0Ch]
jmp	loc_64233A04
movzx	edx, word ptr [context_0+20h]
mov	edx, [eax+edx]
jmp	loc_64233B63
mov	dword ptr [esp+14h], 1Dh
lea	eax, [ebp+count]
mov	[esp+10h], eax
mov	dword ptr [esp+0Ch], 5
lea	eax, [ebp+var_24]
mov	[esp+8], eax
mov	dword ptr [esp+4], 5
lea	edi, [ebp+src]
mov	[esp], edi	
call	_silc_buffer_unformat
test	eax, eax
js	loc_64233A04
mov	ecx, [ebp+var_24]
mov	stream_0, [context_0+14h]
mov	[context_0+1Ch], esi
and	byte ptr [context_0+24h], 0FDh
xor	edx, edx
test	esi, esi
jz	loc_64233A04
test	dl, dl
jz	short loc_64233CDD
movzx	eax, word ptr [context_0+22h]
mov	eax, [esi+eax]
mov	[context_0+1Ch], eax
cmp	ecx, [esi+20h]
jz	loc_64233F7C
mov	esi, eax
test	esi, esi
jnz	short loc_64233CBB
jmp	loc_64233A04
movzx	eax, word ptr [context_0+20h]
mov	eax, [esi+eax]
jmp	short loc_64233CC6
mov	dword ptr [esp+18h], 1Dh
sub	ecx, edx
lea	eax, [ecx-4]
mov	[esp+14h], eax
lea	eax, [ebp+var_34]
mov	[esp+10h], eax
mov	dword ptr [esp+0Ch], 0Ch
lea	eax, [ebp+var_24]
mov	[esp+8], eax
mov	dword ptr [esp+4], 5
lea	eax, [ebp+src]
mov	[esp], eax	
call	_silc_buffer_unformat
test	eax, eax
js	loc_64233A04
mov	ecx, [ebp+var_24]
mov	stream_0, [context_0+14h]
mov	[context_0+1Ch], esi
and	byte ptr [context_0+24h], 0FDh
xor	edx, edx
test	esi, esi
jz	loc_64233A04
test	dl, dl
jz	short loc_64233D61
movzx	eax, word ptr [context_0+22h]
mov	eax, [esi+eax]
mov	[context_0+1Ch], eax
cmp	ecx, [esi+20h]
jz	loc_64234080
mov	esi, eax
test	esi, esi
jnz	short loc_64233D3F
jmp	loc_64233A04
movzx	eax, word ptr [context_0+20h]
mov	eax, [esi+eax]
jmp	short loc_64233D4A
mov	[ebp+var_34], 0
mov	[ebp+count], 0
mov	dword ptr [esp+18h], 1Dh
lea	eax, [ebp+count]
mov	[esp+14h], eax
lea	eax, [ebp+var_34]
mov	[esp+10h], eax
mov	dword ptr [esp+0Ch], 0Fh
lea	eax, [ebp+var_24]
mov	[esp+8], eax
mov	dword ptr [esp+4], 5
lea	eax, [ebp+src]
mov	[esp], eax	
call	_silc_buffer_unformat
test	eax, eax
js	loc_64233A04
mov	stream_0, [ebp+var_24]
mov	eax, [context_0+14h]
mov	[context_0+1Ch], eax
and	byte ptr [context_0+24h], 0FDh
xor	ecx, ecx
test	eax, eax
jz	loc_64233A04
test	cl, cl
jz	short loc_64233DF1
movzx	edx, word ptr [context_0+22h]
mov	edx, [eax+edx]
mov	[context_0+1Ch], edx
cmp	esi, [eax+20h]
jz	loc_64234051
mov	eax, edx
test	eax, eax
jnz	short loc_64233DCF
jmp	loc_64233A04
movzx	edx, word ptr [context_0+20h]
mov	edx, [eax+edx]
jmp	short loc_64233DDA
mov	[ebp+var_34], 0
mov	dword ptr [esp+18h], 1Dh
lea	eax, [ebp+count]
mov	[esp+14h], eax
lea	eax, [ebp+var_34]
mov	[esp+10h], eax
mov	dword ptr [esp+0Ch], 0Fh
lea	eax, [ebp+var_24]
mov	[esp+8], eax
mov	dword ptr [esp+4], 5
lea	eax, [ebp+src]
mov	[esp], eax	
call	_silc_buffer_unformat
test	eax, eax
js	loc_64233A04
mov	stream_0, [ebp+var_24]
mov	eax, [context_0+14h]
mov	[context_0+1Ch], eax
and	byte ptr [context_0+24h], 0FDh
xor	ecx, ecx
test	eax, eax
jz	loc_64233A04
test	cl, cl
jz	short loc_64233E7A
movzx	edx, word ptr [context_0+22h]
mov	edx, [eax+edx]
mov	[context_0+1Ch], edx
cmp	esi, [eax+20h]
jz	loc_64234022
mov	eax, edx
test	eax, eax
jnz	short loc_64233E58
jmp	loc_64233A04
movzx	edx, word ptr [context_0+20h]
mov	edx, [eax+edx]
jmp	short loc_64233E63
mov	[ebp+ptr], 0
mov	[ebp+var_2C], 0
mov	dword ptr [esp+14h], 1Dh
lea	eax, [ebp+count]
mov	[esp+10h], eax
mov	dword ptr [esp+0Ch], 5
lea	eax, [ebp+var_24]
mov	[esp+8], eax
mov	dword ptr [esp+4], 5
lea	edi, [ebp+src]
mov	[esp], edi	
call	_silc_buffer_unformat
test	eax, eax
js	loc_64233A04
mov	ecx, [ebp+count]
test	ecx, ecx
jz	short loc_64233F28
mov	edx, [ebp+src.data]
mov	eax, [ebp+src.tail]
sub	eax, edx
cmp	eax, 7
jbe	short loc_64233EE4
add	edx, 8
mov	[ebp+src.data],	edx
mov	dword ptr [esp+14h], 1Dh
lea	eax, [ebp+var_2C]
mov	[esp+10h], eax
mov	dword ptr [esp+0Ch], 12h
lea	eax, [ebp+ptr]
mov	[esp+8], eax
mov	dword ptr [esp+4], 12h
mov	[esp], edi	
call	_silc_buffer_unformat
test	eax, eax
js	loc_64233A04
mov	eax, [ebp+src.data]
sub	eax, 8
cmp	eax, [ebp+src.head]
jb	short loc_64233F28
mov	[ebp+src.data],	eax
			
mov	stream_0, [ebp+var_24]
mov	eax, [context_0+14h]
mov	[context_0+1Ch], eax
and	byte ptr [context_0+24h], 0FDh
xor	ecx, ecx
test	eax, eax
jz	short loc_64233F58
test	cl, cl
jz	short loc_64233F73
movzx	edx, word ptr [context_0+22h]
mov	edx, [eax+edx]
mov	[context_0+1Ch], edx
cmp	esi, [eax+20h]
jz	loc_642340D1
mov	eax, edx
test	eax, eax
jnz	short loc_64233F3B
			
mov	eax, [ebp+ptr]
mov	[esp], eax	
call	_silc_free
mov	eax, [ebp+var_2C]
mov	[esp], eax	
call	_silc_free
jmp	loc_64233A04
movzx	edx, word ptr [context_0+20h]
mov	edx, [eax+edx]
jmp	short loc_64233F46
mov	eax, [ebp+src.data]
mov	edx, [ebp+src.tail]
sub	edx, eax
cmp	edx, 7
jbe	short loc_64233F8F
add	eax, 8
mov	[ebp+src.data],	eax
mov	[esp+4], edi	
mov	eax, [ebp+count]
mov	[esp], eax	
call	_silc_sftp_name_decode
test	eax, eax
jz	loc_64233A04
mov	edx, [ebp+src.data]
sub	edx, 8
cmp	edx, [ebp+src.head]
jb	short loc_64233FB4
mov	[ebp+src.data],	edx
mov	[esp+10h], eax
mov	dword ptr [esp+0Ch], 0 
mov	dword ptr [esp+8], 68h 
mov	[esp+4], esi	
mov	[esp], context_0 
mov	[ebp+name], eax
call	_silc_sftp_call_request
mov	eax, [ebp+name]
mov	[esp], eax	
call	_silc_sftp_name_free
jmp	loc_64233A04
mov	edx, [ebp+src.tail]
sub	edx, [ebp+src.data]
sub	edx, 4
mov	[esp+14h], edx
mov	edx, [ebp+var_34]
mov	[esp+10h], edx
mov	dword ptr [esp+0Ch], 0 
mov	dword ptr [esp+8], 0C9h	
mov	[esp+4], eax	
mov	[esp], context_0 
call	_silc_sftp_call_request
jmp	loc_64233A04
mov	edx, [ebp+count]
mov	[esp+14h], edx
mov	edx, [ebp+var_34]
mov	[esp+10h], edx
mov	dword ptr [esp+0Ch], 0 
mov	dword ptr [esp+8], 66h 
mov	[esp+4], eax	
mov	[esp], context_0 
call	_silc_sftp_call_request
jmp	loc_64233A04
mov	edx, [ebp+count]
mov	[esp+14h], edx
mov	edx, [ebp+var_34]
mov	[esp+10h], edx
mov	dword ptr [esp+0Ch], 0 
mov	dword ptr [esp+8], 67h 
mov	[esp+4], eax	
mov	[esp], context_0 
call	_silc_sftp_call_request
jmp	loc_64233A04
mov	eax, [ebp+src.tail]
sub	eax, [ebp+src.data]
mov	edx, [ebp+var_34]
mov	[ebp+buffer.head], edx
mov	[ebp+buffer.data], edx
lea	eax, [edx+eax-4]
mov	[ebp+buffer.end], eax
mov	[ebp+buffer.tail], eax
lea	eax, [ebp+buffer]
mov	[esp], eax	
call	_silc_sftp_attr_decode
test	eax, eax
jz	loc_64233A04
mov	[esp+10h], eax
mov	dword ptr [esp+0Ch], 0 
mov	dword ptr [esp+8], 69h 
mov	[esp+4], esi	
mov	[esp], context_0 
call	_silc_sftp_call_request
jmp	loc_64233A04
mov	edx, [ebp+var_2C]
mov	[esp+14h], edx
mov	edx, [ebp+ptr]
mov	[esp+10h], edx
mov	edx, [ebp+count]
mov	[esp+0Ch], edx	
mov	dword ptr [esp+8], 65h 
mov	[esp+4], eax	
mov	[esp], context_0 
call	_silc_sftp_call_request
jmp	loc_64233F58
mov	eax, [context_0+10h]
mov	[esp+0Ch], eax
mov	dword ptr [esp+8], 0
mov	dword ptr [esp+4], 4
mov	[esp], context_0
call	dword ptr [context_0+8]
jmp	loc_64233A04
align 4
public _silc_sftp_client_shutdown
push	ebp
mov	ebp, esp
push	esi
push	ebx
sub	esp, 10h
mov	ebx, [ebp+context]
mov	dword ptr [esp+0Ch], 0 
mov	dword ptr [esp+8], 0 
mov	eax, [sftp+4]
mov	[esp+4], eax	
mov	eax, [sftp]
mov	[esp], eax	
call	_silc_stream_set_notifier
mov	esi, [sftp+28h]
test	esi, esi
jz	short loc_64234169
mov	eax, [esi]
mov	[esp], eax	
call	_silc_free
mov	[esp], esi	
call	_silc_free
mov	[ebp+context], sftp
add	esp, 10h
pop	sftp
pop	esi
leave
jmp	_silc_free
align 4
public _silc_sftp_fsetstat
push	ebp
mov	ebp, esp
push	edi
push	esi
push	ebx
sub	esp, 5Ch
mov	ebx, [ebp+sftp]
mov	edi, [ebp+handle]
mov	eax, [ebp+attrs]
mov	[ebp+attr], eax
mov	ecx, [ebp+callback]
mov	[ebp+var_1C], ecx
mov	eax, [ebp+context]
mov	[ebp+var_24], eax
mov	dword ptr [esp+4], 28h 
mov	dword ptr [esp], 1 
call	_silc_calloc
mov	esi, eax
test	eax, eax
jz	loc_642342B4
mov	req, [sftp_0+2Ch]
mov	[req+20h], eax
inc	eax
mov	[sftp_0+2Ch], eax
mov	dword ptr [req+24h], 0Ah
mov	ecx, [ebp+var_1C]
mov	[req+4], ecx
mov	eax, [ebp+var_24]
mov	[req+1Ch], eax
mov	eax, [sftp_0+14h]
test	eax, eax
jz	loc_642342BC
movzx	eax, word ptr [sftp_0+20h]
mov	edx, [sftp_0+18h]
mov	[edx+eax], req
test	byte ptr [sftp_0+24h], 1
jnz	loc_642342A4
mov	[sftp_0+18h], req
mov	dword ptr [req+eax], 0
add	dword ptr [sftp_0+24h],	4
mov	ecx, [handle_0]
mov	[ebp+var_1C], ecx
mov	handle_0, [handle_0+4]
mov	eax, [ebp+attr]
mov	[esp], eax	
call	_silc_sftp_attr_encode
test	eax, eax
jz	loc_642342B4
mov	ecx, [attrs_buf+4]
mov	edx, [attrs_buf+8]
sub	edx, ecx
mov	dword ptr [esp+34h], 1Dh
mov	[esp+30h], edx
mov	[esp+2Ch], ecx
mov	dword ptr [esp+28h], 1Bh
mov	[esp+24h], edi
mov	ecx, [ebp+var_1C]
mov	[esp+20h], ecx
mov	dword ptr [esp+1Ch], 1Bh
mov	[esp+18h], edi
mov	dword ptr [esp+14h], 5
mov	ecx, [req+20h]
mov	[esp+10h], ecx
mov	dword ptr [esp+0Ch], 5
lea	edx, [edx+edi+8]
mov	[esp+8], edx	
mov	edx, [req+24h]
mov	[esp+4], edx	
mov	[esp], sftp_0	
mov	[ebp+var_28], attrs_buf
call	_silc_sftp_send_packet
mov	eax, [ebp+var_28]
mov	edx, [eax]
mov	[esp], edx	
call	_silc_free
mov	eax, [ebp+var_28]
mov	[ebp+sftp], eax
add	esp, 5Ch
pop	sftp_0
pop	req
pop	edi
leave
jmp	_silc_free
align 4
movzx	edx, word ptr [sftp_0+22h]
mov	ecx, [sftp_0+18h]
mov	[req+edx], ecx
jmp	loc_642341F3
align 4
			
add	esp, 5Ch
pop	sftp_0
pop	req
pop	edi
leave
retn
mov	[sftp_0+14h], req
movzx	eax, word ptr [sftp_0+20h]
jmp	loc_642341E9
public _silc_sftp_setstat
push	ebp
mov	ebp, esp
push	edi
push	esi
push	ebx
sub	esp, 5Ch
mov	ebx, [ebp+sftp]
mov	eax, [ebp+path]
mov	[ebp+var_1C], eax
mov	edi, [ebp+attrs]
mov	[ebp+attr], edi
mov	eax, [ebp+callback]
mov	[ebp+var_24], eax
mov	edi, [ebp+context]
mov	dword ptr [esp+4], 28h 
mov	dword ptr [esp], 1 
call	_silc_calloc
mov	esi, eax
test	eax, eax
jz	loc_64234408
mov	req, [sftp_0+2Ch]
mov	[req+20h], eax
inc	eax
mov	[sftp_0+2Ch], eax
mov	dword ptr [req+24h], 9
mov	eax, [ebp+var_24]
mov	[req+4], eax
mov	[req+1Ch], context_0
mov	edx, [sftp_0+14h]
test	edx, edx
jz	loc_64234410
movzx	eax, word ptr [sftp_0+20h]
mov	edx, [sftp_0+18h]
mov	[edx+eax], req
test	byte ptr [sftp_0+24h], 1
jnz	loc_642343F8
mov	[sftp_0+18h], req
mov	dword ptr [req+eax], 0
add	dword ptr [sftp_0+24h],	4
mov	context_0, [ebp+attr]
mov	[esp], edi	
call	_silc_sftp_attr_encode
mov	edx, eax
test	eax, eax
jz	loc_64234408
xor	attrs_buf, attrs_buf
mov	ecx, 0FFFFFFFFh
mov	edi, [ebp+var_1C]
repne scasb
not	ecx
dec	ecx
mov	edi, [attrs_buf+4]
mov	eax, [attrs_buf+8]
sub	eax, edi
mov	dword ptr [esp+30h], 1Dh
mov	[esp+2Ch], eax
mov	[esp+28h], edi
mov	dword ptr [esp+24h], 1Bh
mov	edi, [ebp+var_1C]
mov	[esp+20h], edi
mov	dword ptr [esp+1Ch], 0Ah
mov	[esp+18h], ecx
mov	dword ptr [esp+14h], 5
mov	edi, [req+20h]
mov	[esp+10h], edi
mov	dword ptr [esp+0Ch], 5
lea	eax, [eax+ecx+8]
mov	[esp+8], eax	
mov	eax, [req+24h]
mov	[esp+4], eax	
mov	[esp], sftp_0	
mov	[ebp+var_28], attrs_buf
call	_silc_sftp_send_packet
mov	edx, [ebp+var_28]
mov	eax, [edx]
mov	[esp], eax	
call	_silc_free
mov	edx, [ebp+var_28]
mov	[ebp+sftp], edx
add	esp, 5Ch
pop	sftp_0
pop	req
pop	edi
leave
jmp	_silc_free
align 4
movzx	edx, word ptr [sftp_0+22h]
mov	ecx, [sftp_0+18h]
mov	[req+edx], ecx
jmp	loc_64234340
align 4
			
add	esp, 5Ch
pop	sftp_0
pop	req
pop	edi
leave
retn
mov	[sftp_0+14h], req
movzx	eax, word ptr [sftp_0+20h]
jmp	loc_64234336
public _silc_sftp_mkdir
push	ebp
mov	ebp, esp
push	edi
push	esi
push	ebx
sub	esp, 5Ch
mov	ebx, [ebp+sftp]
mov	eax, [ebp+path]
mov	[ebp+var_1C], eax
mov	edi, [ebp+attrs]
mov	[ebp+attr], edi
mov	eax, [ebp+callback]
mov	[ebp+var_24], eax
mov	edi, [ebp+context]
mov	dword ptr [esp+4], 28h 
mov	dword ptr [esp], 1 
call	_silc_calloc
mov	esi, eax
test	eax, eax
jz	loc_6423455C
mov	req, [sftp_0+2Ch]
mov	[req+20h], eax
inc	eax
mov	[sftp_0+2Ch], eax
mov	dword ptr [req+24h], 0Eh
mov	eax, [ebp+var_24]
mov	[req+4], eax
mov	[req+1Ch], context_0
mov	ecx, [sftp_0+14h]
test	ecx, ecx
jz	loc_64234564
movzx	eax, word ptr [sftp_0+20h]
mov	edx, [sftp_0+18h]
mov	[edx+eax], req
test	byte ptr [sftp_0+24h], 1
jnz	loc_6423454C
mov	[sftp_0+18h], req
mov	dword ptr [req+eax], 0
add	dword ptr [sftp_0+24h],	4
mov	context_0, [ebp+attr]
mov	[esp], edi	
call	_silc_sftp_attr_encode
mov	edx, eax
test	eax, eax
jz	loc_6423455C
xor	attrs_buf, attrs_buf
mov	ecx, 0FFFFFFFFh
mov	edi, [ebp+var_1C]
repne scasb
not	ecx
dec	ecx
mov	edi, [attrs_buf+4]
mov	eax, [attrs_buf+8]
sub	eax, edi
mov	dword ptr [esp+30h], 1Dh
mov	[esp+2Ch], eax
mov	[esp+28h], edi
mov	dword ptr [esp+24h], 1Bh
mov	edi, [ebp+var_1C]
mov	[esp+20h], edi
mov	dword ptr [esp+1Ch], 0Ah
mov	[esp+18h], ecx
mov	dword ptr [esp+14h], 5
mov	edi, [req+20h]
mov	[esp+10h], edi
mov	dword ptr [esp+0Ch], 5
lea	eax, [eax+ecx+8]
mov	[esp+8], eax	
mov	eax, [req+24h]
mov	[esp+4], eax	
mov	[esp], sftp_0	
mov	[ebp+var_28], attrs_buf
call	_silc_sftp_send_packet
mov	edx, [ebp+var_28]
mov	eax, [edx]
mov	[esp], eax	
call	_silc_free
mov	edx, [ebp+var_28]
mov	[ebp+sftp], edx
add	esp, 5Ch
pop	sftp_0
pop	req
pop	edi
leave
jmp	_silc_free
align 4
movzx	edx, word ptr [sftp_0+22h]
mov	ecx, [sftp_0+18h]
mov	[req+edx], ecx
jmp	loc_64234494
align 4
			
add	esp, 5Ch
pop	sftp_0
pop	req
pop	edi
leave
retn
mov	[sftp_0+14h], req
movzx	eax, word ptr [sftp_0+20h]
jmp	loc_6423448A
public _memfs_get_handle
push	ebp
mov	ebp, esp
push	ebx
mov	ebx, [ebp+context]
mov	eax, [ebp+data]
cmp	[ebp+data_len],	3
jbe	short loc_642345A3
movzx	handle,	byte ptr [data_0+3]
movzx	ecx, byte ptr [data_0]
shl	ecx, 18h
or	handle,	ecx
movzx	ecx, byte ptr [data_0+1]
shl	ecx, 10h
or	handle,	ecx
movzx	data_0,	byte ptr [data_0+2]
shl	eax, 8
or	handle,	eax
cmp	handle,	[context_0+0Ch]
jbe	short loc_642345A8
			
xor	eax, eax
pop	context_0
leave
retn
mov	eax, [context_0+8]
mov	eax, [eax+handle*4]
test	eax, eax
jz	short loc_642345A3
cmp	handle,	[eax]
jnz	short loc_642345A3
jmp	short loc_642345A5
public _memfs_remove
push	ebp
mov	ebp, esp
sub	esp, 8
mov	edx, [ebp+sftp]
mov	eax, [ebp+callback]
mov	[ebp+callback],	0
mov	[ebp+filename],	0
mov	[ebp+sftp], 8
mov	[ebp+context], edx
leave
jmp	eax
align 10h
public _memfs_rename
push	ebp
mov	ebp, esp
sub	esp, 8
mov	edx, [ebp+sftp]
mov	eax, [ebp+callback]
mov	ecx, [ebp+callback_context]
mov	[ebp+callback],	ecx
mov	[ebp+newname], 0
mov	[ebp+oldname], 0
mov	[ebp+sftp], 8
mov	[ebp+context], edx
leave
jmp	eax
align 10h
public _memfs_mkdir
push	ebp
mov	ebp, esp
sub	esp, 8
mov	edx, [ebp+sftp]
mov	eax, [ebp+callback]
mov	ecx, [ebp+callback_context]
mov	[ebp+callback],	ecx
mov	[ebp+attrs], 0
mov	[ebp+path], 0
mov	[ebp+sftp], 8
mov	[ebp+context], edx
leave
jmp	eax
align 10h
public _memfs_rmdir
push	ebp
mov	ebp, esp
sub	esp, 8
mov	edx, [ebp+sftp]
mov	eax, [ebp+callback]
mov	[ebp+callback],	0
mov	[ebp+path], 0
mov	[ebp+sftp], 8
mov	[ebp+context], edx
leave
jmp	eax
align 4
public _memfs_setstat
push	ebp
mov	ebp, esp
sub	esp, 8
mov	edx, [ebp+sftp]
mov	eax, [ebp+callback]
mov	ecx, [ebp+callback_context]
mov	[ebp+callback],	ecx
mov	[ebp+attrs], 0
mov	[ebp+path], 0
mov	[ebp+sftp], 8
mov	[ebp+context], edx
leave
jmp	eax
align 4
public _memfs_fsetstat
push	ebp
mov	ebp, esp
sub	esp, 8
mov	edx, [ebp+sftp]
mov	eax, [ebp+callback]
mov	ecx, [ebp+callback_context]
mov	[ebp+callback],	ecx
mov	[ebp+attrs], 0
mov	[ebp+handle], 0
mov	[ebp+sftp], 8
mov	[ebp+context], edx
leave
jmp	eax
align 4
public _memfs_readlink
push	ebp
mov	ebp, esp
sub	esp, 8
mov	edx, [ebp+sftp]
mov	eax, [ebp+callback]
mov	ecx, [ebp+callback_context]
mov	[ebp+callback],	ecx
mov	[ebp+path], 0
mov	[ebp+sftp], 8
mov	[ebp+context], edx
leave
jmp	eax
align 10h
public _memfs_symlink
push	ebp
mov	ebp, esp
sub	esp, 8
mov	edx, [ebp+sftp]
mov	eax, [ebp+callback]
mov	ecx, [ebp+callback_context]
mov	[ebp+callback],	ecx
mov	[ebp+targetpath], 0
mov	[ebp+linkpath],	0
mov	[ebp+sftp], 8
mov	[ebp+context], edx
leave
jmp	eax
align 10h
public _memfs_extended
push	ebp
mov	ebp, esp
sub	esp, 8
mov	eax, [ebp+sftp]
mov	edx, [ebp+callback_context]
mov	[ebp+data_len],	edx
mov	[ebp+data], 0
mov	[ebp+request], 0
mov	[ebp+sftp], 8
mov	[ebp+context], eax
mov	eax, [ebp+callback]
leave
jmp	eax
align 10h
public _memfs_encode_handle
push	ebp
mov	ebp, esp
push	ebx
sub	esp, 14h
mov	ebx, [ebp+handle]
mov	dword ptr [esp+4], 1 
mov	dword ptr [esp], 4 
call	_silc_calloc
test	eax, eax
jz	short loc_64234797
mov	edx, [handle_0]
shr	edx, 18h
mov	[data],	dl
mov	edx, [handle_0]
shr	edx, 10h
mov	[data+1], dl
mov	edx, [handle_0]
shr	edx, 8
mov	[data+2], dl
mov	edx, [handle_0]
mov	[data+3], dl
mov	edx, [ebp+handle_len]
mov	dword ptr [edx], 4
add	esp, 14h
pop	handle_0
leave
retn
align 10h
			
push	ebp
mov	ebp, esp
push	ebx
sub	esp, 14h
mov	ebx, path
mov	dword ptr [esp+4], offset a_ 
mov	[esp], path	
call	_strstr
test	eax, eax
jz	short loc_642347C8
			
xor	eax, eax
add	esp, 14h
pop	path
leave
retn
align 4
mov	dword ptr [esp+4], offset a__ 
mov	[esp], path	
call	_strstr
test	eax, eax
jnz	short loc_642347BD
mov	dword ptr [esp+4], offset a___0	
mov	[esp], path	
call	_strstr
test	eax, eax
jnz	short loc_642347BD
mov	dword ptr [esp+4], offset a__0 
mov	[esp], path	
call	_strstr
test	eax, eax
jnz	short loc_642347BD
mov	[esp], path	
call	_strdup
jmp	short loc_642347BF
align 10h
public _memfs_realpath
push	ebp
mov	ebp, esp
push	edi
push	esi
push	ebx
sub	esp, 2Ch
mov	eax, [ebp+context]
mov	ebx, [ebp+sftp]
mov	edx, [ebp+path]	
mov	ecx, [ebp+callback]
mov	[ebp+var_20], ecx
mov	esi, [ebp+callback_context]
test	edx, edx
jz	loc_64234920
cmp	byte ptr [path_0], 0
jz	loc_64234920
mov	context_0, [context_0] 
call	_memfs_expand_path
mov	[ebp+realpath],	eax
test	eax, eax
jz	fail
mov	dword ptr [esp+4], 10h 
mov	dword ptr [esp], 1 
call	_silc_calloc
mov	edi, eax
test	eax, eax
jz	fail
mov	dword ptr [esp+4], 4 
mov	dword ptr [esp], 1 
call	_silc_calloc
mov	[edi], eax
test	eax, eax
jz	fail
mov	edx, [ebp+realpath]
mov	[eax], edx
mov	dword ptr [esp+4], 4 
mov	dword ptr [esp], 1 
call	_silc_calloc
mov	[edi+4], eax
test	eax, eax
jz	fail
mov	ecx, [ebp+realpath]
mov	[eax], ecx
mov	dword ptr [esp+4], 4 
mov	dword ptr [esp], 1 
call	_silc_calloc
mov	[edi+8], eax
test	eax, eax
jz	short fail
mov	dword ptr [esp+4], 30h 
mov	dword ptr [esp], 1 
mov	[ebp+var_24], eax
call	_silc_calloc
mov	edx, [ebp+var_24]
mov	[edx], eax
mov	eax, [edi+8]
mov	eax, [eax]
test	eax, eax
jz	short fail
mov	dword ptr [edi+0Ch], 1
mov	[esp+0Ch], callback_context_0
mov	[esp+8], edi
mov	dword ptr [esp+4], 0
mov	[esp], sftp_0
call	[ebp+var_20]
mov	[ebp+context], edi
add	esp, 2Ch
pop	sftp_0
pop	callback_context_0
pop	edi
leave
jmp	_silc_sftp_name_free
align 10h
			
mov	path_0,	offset path 
mov	context_0, [context_0] 
call	_memfs_expand_path
mov	[ebp+realpath],	eax
test	eax, eax
jnz	loc_6423484E
nop
			
mov	[ebp+callback],	callback_context_0
mov	[ebp+path], 0
mov	[ebp+sftp], 4
mov	[ebp+context], sftp_0
mov	ecx, [ebp+var_20]
add	esp, 2Ch
pop	sftp_0
pop	callback_context_0
pop	edi
leave
jmp	ecx
public _memfs_fstat
push	ebp
mov	ebp, esp
push	edi
push	esi
push	ebx
sub	esp, 5Ch
mov	esi, [ebp+sftp]
mov	edx, [ebp+handle]
mov	ebx, [ebp+callback]
mov	edi, [ebp+callback_context]
mov	ret, [edx+8]
test	byte ptr [ret+18h], 1
jnz	loc_64234A10
mov	ecx, [ret+14h]
test	ecx, ecx
jz	loc_64234A10
lea	ret, [ebp+stats]
mov	[esp+4], ret	
mov	ret, [handle_0+4]
mov	[esp], ret	
call	_fstat
inc	ret
jz	loc_64234A34
mov	dword ptr [esp+4], 30h 
mov	dword ptr [esp], 1 
call	_silc_calloc
test	ret, ret
jz	short loc_64234A10
mov	dword ptr [ret], 0Bh
mov	edx, [ebp+stats.st_size]
mov	[ret+8], edx
mov	ecx, edx
sar	ecx, 1Fh
mov	[ret+0Ch], ecx
mov	dword ptr [ret+10h], 0
mov	dword ptr [ret+14h], 0
mov	edx, [ebp+stats.st_atime]
mov	[ret+1Ch], edx
mov	edx, [ebp+stats.st_mtime]
mov	[ret+20h], edx
mov	[esp+0Ch], callback_context_0
mov	[esp+8], ret
mov	dword ptr [esp+4], 0
mov	[esp], sftp_0
mov	[ebp+attr], ret
call	callback_0
mov	ret, [ebp+attr]
mov	[esp], ret	
call	_silc_sftp_attr_free
add	esp, 5Ch
pop	callback_0
pop	sftp_0
pop	callback_context_0
leave
retn
align 10h
			
mov	[esp+0Ch], callback_context_0
mov	dword ptr [esp+8], 0
mov	dword ptr [esp+4], 4
mov	[esp], sftp_0
call	callback_0
add	esp, 5Ch
pop	callback_0
pop	sftp_0
pop	callback_context_0
leave
retn
align 4
call	__errno
mov	ret, [ret]
mov	[esp], ret	
call	_silc_sftp_map_errno
mov	[esp+0Ch], callback_context_0
mov	dword ptr [esp+8], 0
mov	[esp+4], ret
mov	[esp], sftp_0
call	callback_0
add	esp, 5Ch
pop	callback_0
pop	sftp_0
pop	callback_context_0
leave
retn
public _silc_sftp_fs_memory_free
push	ebp
mov	ebp, esp
push	ebx
sub	esp, 14h
mov	eax, [ebp+fs_0]
mov	ebx, [eax+4]
mov	eax, [memfs]
mov	[esp], eax	
call	_silc_free
mov	[ebp+fs_0], memfs
add	esp, 14h
pop	memfs
leave
jmp	_silc_free
public _silc_sftp_fs_memory_alloc
push	ebp
mov	ebp, esp
push	esi
push	ebx
sub	esp, 20h
mov	esi, [ebp+perm]
mov	dword ptr [esp+4], 10h 
mov	dword ptr [esp], 1 
call	_silc_calloc
mov	ebx, eax
test	eax, eax
jz	short loc_64234B24
mov	dword ptr [esp+4], 1Ch 
mov	dword ptr [esp], 1 
call	_silc_calloc
mov	[fs_0],	eax
test	eax, eax
jz	short loc_64234B1C
lea	ecx, [perm_0+perm_0]
mov	dl, [eax+18h]
and	edx, 1
or	edx, ecx
mov	[eax+18h], dl
mov	[fs_0+4], perm_0
mov	eax, [fs_0]
or	byte ptr [eax+18h], 1
mov	perm_0,	[fs_0]
mov	dword ptr [esp], offset	path 
call	_strdup
mov	[esi+10h], eax
mov	eax, [fs_0]
mov	esi, [eax+10h]
test	esi, esi
jz	short loc_64234B30
mov	dword ptr [esp+4], 8 
mov	dword ptr [esp], 1 
call	_silc_calloc
test	eax, eax
jz	short loc_64234B42
mov	dword ptr [filesystem],	offset _silc_sftp_fs_memory
mov	[filesystem+4],	fs_0
add	esp, 20h
pop	fs_0
pop	esi
leave
retn
mov	[esp], fs_0
call	_silc_free
xor	eax, eax
add	esp, 20h
pop	fs_0
pop	perm_0
leave
retn
align 10h
mov	[esp], eax	
call	_silc_free
mov	[esp], fs_0	
call	_silc_free
jmp	short loc_64234AF4
mov	edx, [fs_0]
mov	edx, [edx+10h]
mov	[esp], edx	
mov	[ebp+var_C], filesystem
call	_silc_free
mov	edx, [fs_0]
mov	[esp], edx	
call	_silc_free
mov	[esp], fs_0	
call	_silc_free
mov	eax, [ebp+var_C]
jmp	short loc_64234B15
align 4
public _memfs_readdir
push	ebp
mov	ebp, esp
push	edi
push	esi
push	ebx
sub	esp, 1ACh
mov	edx, [ebp+handle]
mov	eax, [edx+8]
test	byte ptr [eax+18h], 1
jz	loc_64234F5C
mov	eax, [ebp+handle]
cmp	dword ptr [eax+4], 0FFFFFFFFh
jz	loc_64234EA0
mov	dword ptr [esp+4], 10h 
mov	dword ptr [esp], 1 
call	_silc_calloc
mov	[ebp+name], eax
test	eax, eax
jz	loc_64234F87
mov	ecx, [ebp+handle]
mov	edx, [ecx+4]
mov	[ebp+i], edx
mov	eax, [ecx+8]
cmp	[eax+4], edx
jbe	loc_64234F2C
lea	ecx, [ebp+long_name]
mov	[ebp+var_17C], ecx
lea	ebx, [ebp+stats]
mov	[ebp+var_180], ebx
jmp	loc_64234D84
align 4
mov	[ebp+var_15C], 1Ch
mov	ebx, 1Ch
xor	esi, esi
mov	edx, [ebp+entry]
mov	edx, [edx+10h]
mov	[ebp+var_168], edx
mov	ecx, [ebp+entry]
mov	ecx, [ecx+4]
mov	[ebp+var_164], ecx
shr	al, 1
movzx	eax, al
mov	edx, eax
and	edx, 4
mov	[ebp+var_15D], 1
mov	[ebp+var_154], offset path 
cmp	edx, 1
sbb	edx, edx
and	edx, 0FFFFFFB5h
add	edx, 78h
mov	[ebp+var_184], edx
mov	edx, eax
and	edx, 2
cmp	edx, 1
sbb	edx, edx
and	edx, 0FFFFFFB6h
add	edx, 77h
and	eax, 1
cmp	eax, 1
sbb	edi, edi
and	edi, 0FFFFFFBBh
add	edi, 72h
cmp	[ebp+var_15D], 1
sbb	eax, eax
and	eax, 0FFFFFFC9h
add	eax, 64h
mov	ecx, [ebp+var_154]
mov	[esp+2Ch], ecx
mov	ecx, [ebp+var_168]
mov	[esp+28h], ecx
mov	ecx, [ebp+date]
mov	[esp+24h], ecx
mov	ecx, [ebp+var_15C]
mov	[esp+20h], ecx
mov	ecx, [ebp+var_164]
mov	[esp+1Ch], ecx
mov	ecx, [ebp+var_184]
mov	[esp+18h], ecx
mov	[esp+14h], edx
mov	[esp+10h], edi
mov	[esp+0Ch], eax
mov	dword ptr [esp+8], offset aCCCC3d8llu12sS 
mov	dword ptr [esp+4], 0FFh	
lea	eax, [ebp+long_name]
mov	[esp], eax	
call	_silc_snprintf
mov	dword ptr [esp+4], 30h 
mov	dword ptr [esp], 1 
call	_silc_calloc
test	eax, eax
jz	loc_64234EA0
mov	dword ptr [attrs], 3
mov	[attrs+8], ebx
mov	[attrs+0Ch], esi
mov	dword ptr [attrs+10h], 0
mov	dword ptr [attrs+14h], 0
mov	ebx, [ebp+entry]
test	byte ptr [ebx+18h], 1
jnz	short loc_64234D2E
mov	dword ptr [attrs], 0Bh
mov	edx, [ebp+stats.st_atime]
mov	[attrs+1Ch], edx
mov	edx, [ebp+stats.st_mtime]
mov	[attrs+20h], edx
mov	[esp+0Ch], attrs 
lea	attrs, [ebp+long_name]
mov	[esp+8], eax	
mov	edx, [ebp+entry]
mov	eax, [edx+10h]
mov	[esp+4], eax	
mov	ecx, [ebp+name]
mov	[esp], ecx	
call	_silc_sftp_name_add
mov	ebx, [ebp+handle]
mov	eax, [ebx+8]
mov	edx, [ebx+4]
inc	[ebp+i]
lea	ecx, [edx+63h]
cmp	ecx, [ebp+i]
jl	loc_64234ECC
mov	ebx, [ebp+i]
cmp	[eax+4], ebx
jbe	loc_64234F2C
mov	ecx, [eax]
mov	ebx, [ebp+i]
mov	ecx, [ecx+ebx*4]
mov	[ebp+entry], ecx
test	ecx, ecx
jz	short loc_64234D60
mov	ecx, 100h
xor	eax, eax
mov	edi, [ebp+var_17C]
rep stosb
mov	eax, [ebp+entry]
mov	eax, [eax+0Ch]
mov	[esp], eax	
mov	dword ptr [esp+4], 0
call	_silc_time_string
mov	[ebp+date], eax
mov	dword ptr [esp+4], 3Ah 
mov	[esp], eax	
call	_strrchr
test	eax, eax
jz	short loc_64234DDE
mov	byte ptr [eax],	0
mov	edx, [ebp+entry]
mov	al, [edx+18h]
mov	cl, al
and	ecx, 1
mov	byte ptr [ebp+var_154],	cl
jnz	loc_64234BEC
mov	ebx, [ebp+entry]
mov	eax, [ebx+14h]
add	eax, 7
mov	[esp], eax	
call	_silc_file_size
mov	ebx, eax
mov	esi, edx
mov	ecx, 24h
mov	edi, [ebp+var_180]
mov	al, byte ptr [ebp+var_154]
rep stosb
lea	edx, [ebp+stats]
mov	[esp+4], edx	
mov	ecx, [ebp+entry]
mov	eax, [ecx+14h]
add	eax, 7
mov	[esp], eax	
call	_stat
mov	edx, [ebp+entry]
mov	al, [edx+18h]
mov	cl, al
and	ecx, 1
mov	[ebp+var_15D], cl
jnz	loc_64234FAC
shr	al, 1
movzx	eax, al
mov	edx, eax
and	edx, 4
jz	short loc_64234E94
mov	[ebp+var_154], offset asc_6426F470 
mov	ecx, [ebp+entry]
mov	ecx, [ecx+10h]
mov	[ebp+var_168], ecx
mov	[ebp+var_15C], ebx
mov	[ebp+var_164], 1
jmp	loc_64234C36
align 4
mov	[ebp+var_154], offset word_6426F472
jmp	short loc_64234E6E
			
mov	edx, [ebp+callback_context]
mov	[esp+0Ch], edx	
mov	dword ptr [esp+8], 0 
mov	dword ptr [esp+4], 1 
mov	ecx, [ebp+sftp]
mov	[esp], ecx	
call	[ebp+callback]
add	esp, 1ACh
pop	ebx
pop	esi
pop	edi
leave
retn
align 4
mov	edx, [ebp+i]
cmp	edx, [eax+4]
jnb	short loc_64234F2C
mov	eax, [ebp+i]
mov	ebx, [ebp+handle]
mov	[ebx+4], eax
mov	edx, [ebp+name]
mov	edi, [edx+0Ch]
test	edi, edi
jz	short loc_64234F43
mov	edx, [ebp+callback_context]
mov	[esp+0Ch], edx	
mov	ecx, [ebp+name]
mov	[esp+8], ecx	
mov	dword ptr [esp+4], 0 
mov	ebx, [ebp+sftp]
mov	[esp], ebx	
call	[ebp+callback]
mov	eax, [ebp+name]
mov	[esp], eax	
call	_silc_sftp_name_free
add	esp, 1ACh
pop	ebx
pop	esi
pop	edi
leave
retn
align 4
			
mov	ecx, [ebp+handle]
mov	dword ptr [ecx+4], 0FFFFFFFFh
mov	edx, [ebp+name]
mov	edi, [edx+0Ch]
test	edi, edi
jnz	short loc_64234EF0
mov	ecx, [ebp+callback_context]
mov	[esp+0Ch], ecx
mov	dword ptr [esp+8], 0
mov	dword ptr [esp+4], 1
jmp	short loc_64234F09
mov	ecx, [ebp+callback_context]
mov	[esp+0Ch], ecx	
mov	dword ptr [esp+8], 0 
mov	dword ptr [esp+4], 4 
mov	ebx, [ebp+sftp]
mov	[esp], ebx	
call	[ebp+callback]
add	esp, 1ACh
pop	ebx
pop	esi
pop	edi
leave
retn
mov	ebx, [ebp+callback_context]
mov	[esp+0Ch], ebx	
mov	dword ptr [esp+8], 0 
mov	dword ptr [esp+4], 1 
mov	eax, [ebp+sftp]
mov	[esp], eax	
call	[ebp+callback]
jmp	loc_64234EC0
mov	[ebp+var_15C], ebx
jmp	loc_64234BFD
align 4
			
push	ebp
mov	ebp, esp
push	edi
push	esi
push	ebx
sub	esp, 2Ch
mov	[ebp+var_24], fs_0
mov	esi, fd
mov	edi, entry
mov	dword ptr [esp+4], 0Ch 
mov	dword ptr [esp], 1 
call	_silc_calloc
mov	ebx, eax
test	eax, eax
jz	short loc_64235039
mov	[handle+4], fd
mov	[handle+8], entry
mov	handle,	[ebp+var_24]
mov	eax, [eax+8]
mov	[ebp+ptr], eax
test	eax, eax
jz	loc_642350A4
mov	edx, [ebp+var_24]
mov	edx, [edx+0Ch]
mov	[ebp+var_1C], edx
test	edx, edx
jz	short loc_64235044
mov	edx, [ebp+ptr]
mov	eax, [edx]
test	eax, eax
jz	loc_6423509C
mov	eax, [ebp+ptr]
add	eax, 4
xor	edx, edx
nop
inc	i
mov	ecx, i
cmp	[ebp+var_1C], i
jbe	short loc_64235044
mov	entry, eax
mov	fd, [eax]
add	eax, 4
test	esi, esi
jnz	short loc_6423501C
mov	[ebp+ptr], edi
mov	eax, [ebp+ptr]
mov	[eax], handle
mov	[handle], ecx
			
mov	eax, handle
add	esp, 2Ch
pop	handle
pop	fd
pop	entry
leave
retn
align 4
			
mov	edx, [ebp+var_1C]
lea	eax, ds:14h[edx*4]
mov	[esp+4], eax	
mov	eax, [ebp+ptr]
mov	[esp], eax	
call	_silc_realloc
mov	edx, [ebp+var_24]
mov	[edx+8], eax
test	eax, eax
jz	short loc_642350A0
mov	entry, [edx+0Ch]
lea	ecx, [edi+1]
lea	fd, [edi+5]
cmp	esi, ecx
jbe	short loc_64235086
mov	edx, ecx
xchg	ax, ax
mov	dword ptr [eax+ecx*4], 0
inc	i
mov	ecx, i
cmp	esi, i
ja	short loc_64235078
mov	[eax+edi*4], handle
mov	[handle], edi
mov	eax, [ebp+var_24]
mov	[eax+0Ch], esi
mov	eax, handle
add	esp, 2Ch
pop	handle
pop	esi
pop	edi
leave
retn
align 4
xor	ecx, ecx
jmp	short loc_64235032
			
xor	handle,	handle
jmp	short loc_64235039
mov	dword ptr [esp+4], 4 
mov	dword ptr [esp], 5 
call	_silc_calloc
mov	edx, [ebp+var_24]
mov	[edx+8], eax
test	eax, eax
jz	short loc_642350A0
mov	[eax], handle
mov	dword ptr [edx+0Ch], 5
mov	dword ptr [handle], 0
jmp	loc_64235039
align 4
public _memfs_write
push	ebp
mov	ebp, esp
push	edi
push	esi
push	ebx
sub	esp, 2Ch
mov	eax, [ebp+sftp]
mov	[ebp+var_1C], eax
mov	ebx, [ebp+handle]
mov	esi, [ebp+data]
mov	edi, [ebp+data_len]
mov	edx, [ebp+callback]
mov	[ebp+var_20], edx
mov	ecx, [ebp+callback_context]
mov	[ebp+var_24], ecx
mov	dword ptr [esp+8], 0 
mov	eax, dword ptr [ebp+offset]
mov	[esp+4], eax	
mov	eax, [ebx+4]
mov	[esp], eax	
call	_lseek
mov	[esp+8], edi	
mov	[esp+4], esi	
mov	eax, [ebx+4]
mov	[esp], eax	
call	_silc_file_write
test	eax, eax
jle	short loc_6423515C
mov	ret, [ebp+var_24]
mov	dword ptr [ebp+offset+4], eax
mov	dword ptr [ebp+offset],	0
mov	[ebp+handle], 0
mov	[ebp+sftp], 0
mov	edx, [ebp+var_1C]
mov	[ebp+context], edx
mov	ecx, [ebp+var_20]
add	esp, 2Ch
pop	handle_0
pop	data_0
pop	data_len_0
leave
jmp	ecx
align 4
call	__errno
mov	eax, [eax]
mov	[esp], eax	
call	_silc_sftp_map_errno
mov	edx, [ebp+var_24]
mov	dword ptr [ebp+offset+4], edx
mov	dword ptr [ebp+offset],	0
mov	[ebp+handle], 0
mov	[ebp+sftp], eax
mov	ecx, [ebp+var_1C]
mov	[ebp+context], ecx
mov	ecx, [ebp+var_20]
add	esp, 2Ch
pop	handle_0
pop	data_0
pop	data_len_0
leave
jmp	ecx
public _memfs_read
push	ebp
mov	ebp, esp
push	edi
push	esi
push	ebx
mov	eax, 0F83Ch	
call	__alloca
mov	esi, [ebp+arg_4]
mov	ebx, [ebp+arg_8]
mov	edi, [ebp+arg_1C]
mov	dword ptr [esp+8], 0 
mov	eax, [ebp+arg_C]
mov	[esp+4], eax	
mov	eax, [ebx+4]
mov	[esp], eax	
call	_lseek
test	eax, eax
js	loc_64235260
mov	ret, [ebp+buf_len]
cmp	eax, 0F800h
ja	short loc_64235228
mov	[esp+8], len_0
lea	edx, [ebp+buf]
mov	[esp+4], edx	
mov	len_0, [handle_0+4]
mov	[esp], eax	
mov	[ebp+var_F81C],	edx
call	_silc_file_read
cmp	eax, 0
mov	edx, [ebp+var_F81C]
jle	short loc_64235230
mov	[esp+10h], callback_context_0
mov	[esp+0Ch], ret
mov	[esp+8], edx
mov	dword ptr [esp+4], 0
mov	[esp], sftp_0
call	[ebp+arg_18]
add	esp, 0F83Ch
pop	handle_0
pop	sftp_0
pop	callback_context_0
leave
retn
mov	len_0, 0F800h
jmp	short loc_642351D9
align 10h
jnz	short loc_64235260
mov	[esp+10h], callback_context_0
mov	dword ptr [esp+0Ch], 0
mov	dword ptr [esp+8], 0
mov	dword ptr [esp+4], 1
mov	[esp], sftp_0
call	[ebp+arg_18]
add	esp, 0F83Ch
pop	handle_0
pop	sftp_0
pop	callback_context_0
leave
retn
align 10h
			
call	__errno
mov	eax, [eax]
mov	[esp], eax	
call	_silc_sftp_map_errno
mov	[esp+10h], callback_context_0
mov	dword ptr [esp+0Ch], 0
mov	dword ptr [esp+8], 0
mov	[esp+4], eax
mov	[esp], sftp_0
call	[ebp+arg_18]
add	esp, 0F83Ch
pop	handle_0
pop	sftp_0
pop	callback_context_0
leave
retn
public _memfs_close
push	ebp
mov	ebp, esp
push	edi
push	esi
push	ebx
sub	esp, 2Ch
mov	esi, [ebp+context]
mov	edi, [ebp+sftp]
mov	ebx, [ebp+handle]
mov	ret, [ebp+callback]
mov	[ebp+var_1C], ret
mov	edx, [ebp+callback_context]
mov	ret, [ebx+4]
cmp	ret, 0FFFFFFFFh
jz	short loc_642352CC
mov	[esp], ret	
mov	[ebp+var_20], callback_context_0
call	_silc_file_close
inc	ret
mov	edx, [ebp+var_20]
jz	short loc_64235338
mov	ret, [handle_0]
cmp	ret, [context_0+0Ch]
jbe	short loc_642352FC
			
mov	[ebp+callback_context],	edx
mov	[ebp+callback],	0
mov	[ebp+handle], 0
mov	[ebp+sftp], 0
mov	[ebp+context], sftp_0
mov	ecx, [ebp+var_1C]
add	esp, 2Ch
pop	handle_0
pop	context_0
pop	sftp_0
leave
jmp	ecx
align 4
shl	ret, 2
add	ret, [context_0+8]
mov	ecx, [ret]
test	ecx, ecx
jz	short loc_642352D3
cmp	handle_0, ecx
jnz	short loc_642352D3
mov	dword ptr [ret], 0
mov	ret, [handle_0+4]
cmp	ret, 0FFFFFFFFh
jz	short loc_64235328
mov	[esp], ret	
mov	[ebp+var_20], edx
call	_silc_file_close
mov	edx, [ebp+var_20]
mov	[esp], handle_0	
mov	[ebp+var_20], edx
call	_silc_free
mov	edx, [ebp+var_20]
jmp	short loc_642352D3
call	__errno
mov	ret, [ret]
mov	[esp], ret	
call	_silc_sftp_map_errno
mov	edx, [ebp+var_20]
mov	[ebp+callback_context],	edx
mov	[ebp+callback],	0
mov	[ebp+handle], 0
mov	[ebp+sftp], ret
jmp	short loc_642352EB
			
push	ebp
mov	ebp, esp
push	edi
push	esi
push	ebx
sub	esp, 1Ch
mov	esi, entry
mov	entry, [entry+10h]
mov	[esp], eax	
call	_silc_free
mov	eax, [entry+14h]
mov	[esp], eax	
call	_silc_free
mov	edx, [entry+4]
test	edx, edx
jz	short loc_642353FC
mov	edx, [entry]
xor	eax, eax
xor	ebx, ebx
xchg	ax, ax
mov	eax, [edx+eax*4]
test	eax, eax
jz	short loc_642353A2
call	_T_135
test	al, al
jz	short loc_642353EA
mov	edx, [entry]
inc	i
mov	eax, i
cmp	[entry+4], i
ja	short loc_64235390
mov	[esp], edx	
call	_silc_free
mov	eax, [entry+8]
test	eax, eax
jz	short loc_642353E0
mov	edi, [eax+4]
test	edi, edi
jz	short loc_642353E0
mov	i, [eax]
cmp	entry, [ebx]
jz	short loc_642353F4
lea	eax, [ebx+4]
xor	edx, edx
jmp	short loc_642353DB
align 10h
mov	ebx, eax
mov	ecx, [eax]
add	eax, 4
cmp	entry, ecx
jz	short loc_642353F4
inc	i
cmp	edi, i
ja	short loc_642353D0
mov	[esp], entry	
call	_silc_free
mov	al, 1
add	esp, 1Ch
pop	i
pop	entry
pop	edi
leave
retn
align 4
mov	dword ptr [ebx], 0
jmp	short loc_642353E0
mov	edx, [entry]
jmp	short loc_642353AA
public _silc_sftp_fs_memory_del_file
push	ebp
mov	ebp, esp
push	edi
push	esi
push	ebx
sub	esp, 2Ch
mov	edx, [ebp+dir]
mov	eax, [ebp+filename]
mov	[ebp+var_1C], eax
mov	eax, [ebp+fs_0]
mov	ebx, [eax+4]
mov	ecx, [ebp+var_1C]
test	ecx, ecx
jz	short loc_64235484
xor	fs_0_0,	fs_0_0
mov	ecx, 0FFFFFFFFh
mov	edi, [ebp+var_1C]
repne scasb
not	ecx
dec	ecx
mov	[ebp+var_24], ecx
test	dir_0, dir_0
jz	short loc_64235490
mov	eax, [edx+4]
mov	[ebp+var_20], eax
test	eax, eax
jz	short loc_64235484
mov	edi, [edx]
xor	eax, eax
xor	ebx, ebx
jmp	short loc_64235450
align 4
			
inc	ebx
mov	eax, ebx
cmp	ebx, [ebp+var_20]
jnb	short loc_64235484
mov	esi, [edi+eax*4]
test	esi, esi
jz	short loc_64235448
mov	eax, [ebp+var_24]
mov	[esp+8], eax	
mov	eax, [esi+10h]
mov	[esp+4], eax	
mov	eax, [ebp+var_1C]
mov	[esp], eax	
call	_strncmp
test	eax, eax
jnz	short loc_64235448
mov	eax, esi
add	esp, 2Ch
pop	ebx
pop	esi
pop	edi
leave
jmp	_T_135
align 4
			
xor	eax, eax
add	esp, 2Ch
pop	ebx
pop	esi
pop	edi
leave
retn
align 10h
mov	dir_0, [ebx]
jmp	short loc_64235435
public _silc_sftp_fs_memory_del_dir
push	ebp
mov	ebp, esp
push	edi
push	esi
push	ebx
sub	esp, 1Ch
mov	eax, [ebp+dir]
mov	edx, [ebp+fs_0]
mov	ebx, [edx+4]
test	eax, eax
jz	short loc_642354B8
add	esp, 1Ch
pop	ebx
pop	esi
pop	edi
leave
jmp	_T_135
align 4
mov	dir_0, [ebx]
call	_T_135
mov	esi, eax
mov	dword ptr [esp+4], 1Ch 
mov	dword ptr [esp], 1 
call	_silc_calloc
mov	[ebx], eax
test	eax, eax
jz	short loc_64235526
mov	ecx, [ebx+4]
shl	ecx, 1
mov	dl, [eax+18h]
and	edx, 1
or	edx, ecx
mov	[eax+18h], dl
mov	eax, [ebx]
or	byte ptr [eax+18h], 1
mov	edi, [ebx]
mov	dword ptr [esp], offset	path 
call	_strdup
mov	[edi+10h], eax
mov	eax, [ebx]
mov	edi, [eax+10h]
test	edi, edi
jz	short loc_64235518
mov	eax, ret
add	esp, 1Ch
pop	ebx
pop	ret
pop	edi
leave
retn
align 4
mov	[esp], eax	
call	_silc_free
mov	dword ptr [ebx], 0
xor	ret, ret
jmp	short loc_6423550B
align 4
			
push	ebp
mov	ebp, esp
push	edi
push	esi
push	ebx
sub	esp, 2Ch
mov	[ebp+var_1C], dir
mov	[ebp+var_20], entry
mov	edi, [dir]
test	edi, edi
jz	loc_642355F1
mov	ebx, [dir+4]
test	ebx, ebx
jz	short loc_64235570
mov	dir, [edi]
test	eax, eax
jz	loc_642355EA
lea	eax, [edi+4]
xor	entry, entry
jmp	short loc_6423556B
align 10h
mov	esi, eax
mov	ecx, [eax]
add	eax, 4
test	ecx, ecx
jz	short loc_642355E8
inc	i
cmp	ebx, i
ja	short loc_64235560
lea	dir, ds:0Ch[ebx*4]
mov	[esp+4], eax	
mov	[esp], edi	
call	_silc_realloc
mov	edx, [ebp+var_1C]
mov	[edx], eax
test	eax, eax
jz	short loc_642355DB
mov	edi, [edx+4]
lea	ecx, [edi+1]
lea	ebx, [edi+3]
cmp	ebx, ecx
jbe	short loc_642355B2
mov	edx, ecx
mov	esi, eax
jmp	short loc_642355A2
align 10h
mov	eax, esi
mov	dword ptr [eax+ecx*4], 0
inc	i
mov	ecx, i
cmp	ebx, i
ja	short loc_642355A0
mov	eax, esi
mov	i, [ebp+var_20]
mov	[eax+edi*4], edx
mov	eax, [ebp+var_1C]
add	dword ptr [eax+4], 3
mov	dword ptr [esp], 0
call	_time
mov	edx, [ebp+var_20]
mov	[edx+0Ch], eax
mov	al, 1
add	esp, 2Ch
pop	ebx
pop	esi
pop	edi
leave
retn
xor	eax, eax
add	esp, 2Ch
pop	ebx
pop	esi
pop	edi
leave
retn
align 4
mov	edi, esi
mov	eax, [ebp+var_20]
mov	[edi], eax
jmp	short loc_642355BF
mov	dword ptr [esp+4], 1Ch
mov	dword ptr [esp], 3 
call	_silc_calloc
mov	edx, [ebp+var_1C]
mov	[edx], eax
test	eax, eax
jz	short loc_642355DB
mov	edx, [ebp+var_20]
mov	[eax], edx
mov	eax, [ebp+var_1C]
mov	dword ptr [eax+4], 3
jmp	short loc_642355BF
align 10h
public _silc_sftp_fs_memory_add_dir
push	ebp
mov	ebp, esp
push	edi
push	esi
push	ebx
sub	esp, 1Ch
mov	esi, [ebp+dir]
mov	eax, [ebp+fs_0]
mov	edi, [eax+4]
mov	dword ptr [esp+4], 1Ch 
mov	dword ptr [esp], 1 
call	_silc_calloc
mov	ebx, eax
test	eax, eax
jz	short loc_642356A0
mov	entry, [ebp+perm]
shl	eax, 1
or	eax, 1
mov	[entry+18h], al
test	dir_0, dir_0
jz	short loc_64235690
mov	eax, dir_0
mov	[entry+8], eax
mov	eax, [ebp+name]
mov	[esp], eax	
call	_strdup
mov	[entry+10h], eax
test	eax, eax
jz	short loc_64235698
test	dir_0, dir_0
jz	short loc_64235694
mov	eax, dir_0
mov	edx, entry
call	_T_136
test	al, al
jz	short loc_642356AC
mov	eax, entry
add	esp, 1Ch
pop	entry
pop	dir_0
pop	edi
leave
retn
align 10h
mov	eax, [edi]
jmp	short loc_6423565D
mov	eax, [edi]
jmp	short loc_64235678
mov	[esp], entry	
call	_silc_free
xor	eax, eax
add	esp, 1Ch
pop	entry
pop	dir_0
pop	edi
leave
retn
align 4
mov	eax, [entry+10h]
mov	[esp], eax	
call	_silc_free
mov	[esp], entry	
call	_silc_free
xor	eax, eax
jmp	short loc_64235685
align 4
public _silc_sftp_fs_memory_add_file
push	ebp
mov	ebp, esp
push	edi
push	esi
push	ebx
sub	esp, 2Ch
mov	esi, [ebp+dir]
mov	eax, [ebp+perm]
mov	[ebp+var_1C], eax
mov	edx, [ebp+filename]
mov	[ebp+var_20], edx
mov	edi, [ebp+realpath]
mov	eax, [ebp+fs_0]
mov	eax, [eax+4]
mov	[ebp+var_24], eax
mov	dword ptr [esp+4], 1Ch 
mov	dword ptr [esp], 1 
call	_silc_calloc
mov	ebx, eax
test	eax, eax
jz	short loc_6423575F
mov	al, byte ptr [ebp+var_1C]
shl	eax, 1
mov	[entry+18h], al
mov	eax, [ebp+var_20]
mov	[esp], eax	
call	_strdup
mov	[entry+10h], eax
mov	[esp], realpath_0 
call	_strdup
mov	[entry+14h], eax
mov	edx, [entry+10h]
test	edx, edx
jz	short loc_64235744
test	eax, eax
jz	short loc_64235744
test	dir_0, dir_0
jz	short loc_6423576C
mov	eax, dir_0
mov	edx, entry
add	esp, 2Ch
pop	entry
pop	dir_0
pop	realpath_0
leave
jmp	_T_136
align 4
			
mov	[esp], edx	
call	_silc_free
mov	eax, [entry+14h]
mov	[esp], eax	
call	_silc_free
mov	[esp], entry	
call	_silc_free
xor	eax, eax
add	esp, 2Ch
pop	entry
pop	dir_0
pop	realpath_0
leave
retn
align 4
mov	edx, [ebp+var_24]
mov	eax, [edx]
mov	edx, entry
add	esp, 2Ch
pop	entry
pop	dir_0
pop	realpath_0
leave
jmp	_T_136
align 10h
			
push	ebp
mov	ebp, esp
push	edi
push	esi
push	ebx
sub	esp, 2Ch
mov	ebx, dir
call	_memfs_expand_path
mov	[ebp+var_28], eax
xor	eax, eax
mov	ecx, 0FFFFFFFFh
mov	edi, [ebp+var_28]
repne scasb
cmp	ecx, 0FFFFFFFDh
jz	loc_6423587F
mov	eax, [ebp+var_28]
cmp	byte ptr [eax],	2Fh
jz	loc_64235877
mov	edi, [ebp+var_28]
mov	dword ptr [esp+4], offset path
mov	[esp], cp	
call	_strcspn
test	cp, cp
jz	loc_6423588D
mov	[ebp+len], eax
test	eax, eax
jz	loc_6423588D
xchg	ax, ax
mov	eax, [dir+4]
mov	[ebp+var_24], eax
test	eax, eax
jz	short loc_64235863
mov	edx, [dir]
xor	eax, eax
xor	dir, dir
mov	[ebp+var_20], cp
mov	cp, edx
jmp	short loc_642357FC
align 4
			
inc	ebx
mov	eax, ebx
cmp	[ebp+var_24], ebx
jbe	short loc_64235860
mov	entry, [edi+eax*4]
test	entry, entry
jz	short loc_642357F4
mov	eax, [ebp+len]
mov	[esp+8], eax	
mov	eax, [entry+10h]
mov	[esp+4], eax	
mov	eax, [ebp+var_20]
mov	[esp], eax	
call	_strncmp
test	eax, eax
jnz	short loc_642357F4
mov	edi, [ebp+var_20]
add	cp, [ebp+len]
cmp	byte ptr [cp], 0
jz	short loc_64235849
inc	cp
mov	dword ptr [esp+4], offset path 
mov	[esp], cp	
call	_strcspn
test	cp, cp
jz	short loc_64235849
mov	[ebp+len], eax
mov	ebx, entry
test	eax, eax
jnz	short loc_642357DC
			
mov	eax, [ebp+var_28]
mov	[esp], eax	
call	_silc_free
mov	dir, entry
mov	eax, dir
add	esp, 2Ch
pop	dir
pop	entry
pop	cp
leave
retn
mov	edi, [ebp+var_20]
mov	[esp], cp
call	_silc_free
xor	dir, dir
mov	eax, dir
add	esp, 2Ch
pop	dir
pop	entry
pop	cp
leave
retn
mov	edi, eax
inc	cp
jmp	loc_642357B7
mov	eax, [ebp+var_28]
cmp	byte ptr [eax],	2Fh
jnz	loc_642357B4
jmp	short loc_64235856
			
xor	esi, esi
jmp	short loc_64235849
align 4
public _memfs_lstat
push	ebp
mov	ebp, esp
push	edi
push	esi
push	ebx
sub	esp, 5Ch
mov	ebx, [ebp+sftp]
mov	edx, [ebp+path]	
mov	edi, [ebp+callback]
mov	esi, [ebp+callback_context]
test	edx, edx
jz	loc_6423596C
cmp	byte ptr [path_0], 0
jz	loc_6423596C
mov	ret, [ebp+context]
mov	ret, [ret]	
call	_memfs_find_entry_path
test	ret, ret
jz	loc_642359C8
test	byte ptr [ret+18h], 1
jnz	loc_64235978
mov	ret, [ret+14h]
test	ret, ret
jz	loc_64235978
lea	edx, [ebp+stats]
mov	[esp+4], edx	
add	ret, 7
mov	[esp], ret	
call	_stat
inc	ret
jz	loc_6423599C
mov	dword ptr [esp+4], 30h 
mov	dword ptr [esp], 1 
call	_silc_calloc
test	ret, ret
jz	short loc_64235978
mov	dword ptr [ret], 0Bh
mov	edx, [ebp+stats.st_size]
mov	[ret+8], edx
mov	ecx, edx
sar	ecx, 1Fh
mov	[ret+0Ch], ecx
mov	dword ptr [ret+10h], 0
mov	dword ptr [ret+14h], 0
mov	edx, [ebp+stats.st_atime]
mov	[ret+1Ch], edx
mov	edx, [ebp+stats.st_mtime]
mov	[ret+20h], edx
mov	[esp+0Ch], callback_context_0
mov	[esp+8], ret
mov	dword ptr [esp+4], 0
mov	[esp], sftp_0
mov	[ebp+attr], ret
call	callback_0
mov	ret, [ebp+attr]
mov	[esp], ret	
call	_silc_sftp_attr_free
add	esp, 5Ch
pop	sftp_0
pop	callback_context_0
pop	callback_0
leave
retn
align 4
			
mov	path_0,	offset path 
jmp	loc_642358BA
align 4
			
mov	[esp+0Ch], callback_context_0
mov	dword ptr [esp+8], 0
mov	dword ptr [esp+4], 4
mov	[esp], sftp_0
call	callback_0
add	esp, 5Ch
pop	sftp_0
pop	callback_context_0
pop	callback_0
leave
retn
align 4
call	__errno
mov	ret, [ret]
mov	[esp], ret	
call	_silc_sftp_map_errno
mov	[esp+0Ch], callback_context_0
mov	dword ptr [esp+8], 0
mov	[esp+4], ret
mov	[esp], sftp_0
call	callback_0
add	esp, 5Ch
pop	sftp_0
pop	callback_context_0
pop	callback_0
leave
retn
mov	[esp+0Ch], callback_context_0
mov	dword ptr [esp+8], 0
mov	dword ptr [esp+4], 2
mov	[esp], sftp_0
call	callback_0
jmp	short loc_64235963
align 4
public _memfs_stat
push	ebp
mov	ebp, esp
push	edi
push	esi
push	ebx
sub	esp, 5Ch
mov	ebx, [ebp+sftp]
mov	edx, [ebp+path]	
mov	edi, [ebp+callback]
mov	esi, [ebp+callback_context]
test	edx, edx
jz	loc_64235ABC
cmp	byte ptr [path_0], 0
jz	loc_64235ABC
mov	ret, [ebp+context]
mov	ret, [ret]	
call	_memfs_find_entry_path
test	ret, ret
jz	loc_64235B18
test	byte ptr [ret+18h], 1
jnz	loc_64235AC8
mov	ret, [ret+14h]
test	ret, ret
jz	loc_64235AC8
lea	edx, [ebp+stats]
mov	[esp+4], edx	
add	ret, 7
mov	[esp], ret	
call	_stat
inc	ret
jz	loc_64235AEC
mov	dword ptr [esp+4], 30h 
mov	dword ptr [esp], 1 
call	_silc_calloc
test	ret, ret
jz	short loc_64235AC8
mov	dword ptr [ret], 0Bh
mov	edx, [ebp+stats.st_size]
mov	[ret+8], edx
mov	ecx, edx
sar	ecx, 1Fh
mov	[ret+0Ch], ecx
mov	dword ptr [ret+10h], 0
mov	dword ptr [ret+14h], 0
mov	edx, [ebp+stats.st_atime]
mov	[ret+1Ch], edx
mov	edx, [ebp+stats.st_mtime]
mov	[ret+20h], edx
mov	[esp+0Ch], callback_context_0
mov	[esp+8], ret
mov	dword ptr [esp+4], 0
mov	[esp], sftp_0
mov	[ebp+attr], ret
call	callback_0
mov	ret, [ebp+attr]
mov	[esp], ret	
call	_silc_sftp_attr_free
add	esp, 5Ch
pop	sftp_0
pop	callback_context_0
pop	callback_0
leave
retn
align 4
			
mov	path_0,	offset path 
jmp	loc_64235A0A
align 4
			
mov	[esp+0Ch], callback_context_0
mov	dword ptr [esp+8], 0
mov	dword ptr [esp+4], 4
mov	[esp], sftp_0
call	callback_0
add	esp, 5Ch
pop	sftp_0
pop	callback_context_0
pop	callback_0
leave
retn
align 4
call	__errno
mov	ret, [ret]
mov	[esp], ret	
call	_silc_sftp_map_errno
mov	[esp+0Ch], callback_context_0
mov	dword ptr [esp+8], 0
mov	[esp+4], ret
mov	[esp], sftp_0
call	callback_0
add	esp, 5Ch
pop	sftp_0
pop	callback_context_0
pop	callback_0
leave
retn
mov	[esp+0Ch], callback_context_0
mov	dword ptr [esp+8], 0
mov	dword ptr [esp+4], 2
mov	[esp], sftp_0
call	callback_0
jmp	short loc_64235AB3
align 4
public _memfs_opendir
push	ebp
mov	ebp, esp
push	edi
push	esi
push	ebx
sub	esp, 1Ch
mov	ebx, [ebp+context]
mov	edi, [ebp+sftp]
mov	edx, [ebp+path]	
mov	eax, [ebp+callback]
mov	[ebp+var_1C], eax
mov	esi, [ebp+callback_context]
test	edx, edx
jz	short loc_64235BA0
cmp	byte ptr [path_0], 0
jz	short loc_64235BA0
mov	eax, [context_0] 
call	_memfs_find_entry_path
test	eax, eax
jz	loc_64235BE8
mov	dl, [entry+18h]
test	dl, 1
jz	short loc_64235BC8
and	edx, 2
jz	short loc_64235BA8
mov	ecx, entry	
xor	edx, edx	
mov	entry, context_0 
call	_memfs_create_handle
test	eax, eax
jz	short loc_64235BA8
mov	[ebp+callback],	callback_context_0
mov	[ebp+path], handle
mov	[ebp+sftp], 0
mov	[ebp+context], sftp_0
mov	ecx, [ebp+var_1C]
add	esp, 1Ch
pop	context_0
pop	callback_context_0
pop	sftp_0
leave
jmp	ecx
align 10h
			
mov	path_0,	offset path 
jmp	short loc_64235B58
align 4
			
mov	[ebp+callback],	callback_context_0
mov	[ebp+path], 0
mov	[ebp+sftp], 3
mov	[ebp+context], sftp_0
mov	ecx, [ebp+var_1C]
add	esp, 1Ch
pop	context_0
pop	callback_context_0
pop	sftp_0
leave
jmp	ecx
mov	[ebp+callback],	callback_context_0
mov	[ebp+path], 0
mov	[ebp+sftp], 4
mov	[ebp+context], sftp_0
mov	ecx, [ebp+var_1C]
add	esp, 1Ch
pop	context_0
pop	callback_context_0
pop	sftp_0
leave
jmp	ecx
mov	[ebp+callback],	callback_context_0
mov	[ebp+path], 0
mov	[ebp+sftp], 2
jmp	short loc_64235B90
align 4
public _memfs_open
push	ebp
mov	ebp, esp
push	edi
push	esi
push	ebx
sub	esp, 4Ch
mov	eax, [ebp+context]
mov	[ebp+fs_0], eax
mov	edi, [ebp+sftp]
mov	edx, [ebp+filename] 
mov	esi, [ebp+pflags]
mov	ecx, [ebp+attrs]
mov	[ebp+mode], ecx
mov	eax, [ebp+callback]
mov	[ebp+var_1C], eax
mov	ebx, [ebp+callback_context]
test	esi, 18h
jnz	loc_64235D08
mov	ecx, [ebp+fs_0]
mov	eax, [ecx]	
call	_memfs_find_entry_path
mov	ecx, eax
test	eax, eax
jz	loc_64235DC0
mov	al, [entry+18h]
mov	[ebp+var_39], al
test	al, 1
jnz	loc_64235D58
mov	edx, [entry+14h]
test	edx, edx
jz	loc_64235D58
mov	eax, pflags_0
and	eax, 1
mov	[ebp+var_28], eax
jz	short loc_64235C70
test	[ebp+var_39], 2
jz	loc_64235D35
test	pflags_0, 6
jnz	loc_64235D28
mov	eax, pflags_0
and	eax, 3
cmp	eax, 3
jz	loc_64235D90
mov	eax, [ebp+var_28]
test	eax, eax
jnz	loc_64235D78
mov	eax, pflags_0
shr	flags, 1
and	flags, 1
			
and	pflags_0, 4
jz	short loc_64235CA4
or	flags, 8
mov	pflags_0, [ebp+mode]
test	byte ptr [esi],	4
jnz	loc_64235D80
mov	[ebp+mode], 180h
mov	esi, [ebp+mode]
mov	[esp+8], esi	
mov	[esp+4], flags	
add	edx, 7
mov	[esp], edx	
mov	[ebp+entry], entry
call	_silc_file_open_mode
cmp	eax, 0FFFFFFFFh
mov	ecx, [ebp+entry] 
jz	loc_64235D98
mov	edx, fd		
mov	fd, [ebp+fs_0]	
call	_memfs_create_handle
test	eax, eax
jz	short loc_64235D35
mov	[ebp+pflags], callback_context_0
mov	[ebp+filename],	handle
mov	[ebp+sftp], 0
mov	[ebp+context], sftp_0
mov	ecx, [ebp+var_1C]
add	esp, 4Ch
pop	callback_context_0
pop	esi
pop	sftp_0
leave
jmp	ecx
align 4
mov	[ebp+pflags], callback_context_0
mov	[ebp+filename],	0
mov	[ebp+sftp], 8
mov	[ebp+context], sftp_0
mov	ecx, eax
			
add	esp, 4Ch
pop	callback_context_0
pop	pflags_0
pop	sftp_0
leave
jmp	ecx
align 4
mov	al, [ebp+var_39]
shr	al, 1
test	al, 2
jnz	loc_64235C7C
			
mov	[ebp+pflags], callback_context_0
mov	[ebp+filename],	0
mov	[ebp+sftp], 3
mov	[ebp+context], sftp_0
mov	entry, [ebp+var_1C]
add	esp, 4Ch
pop	callback_context_0
pop	pflags_0
pop	sftp_0
leave
jmp	ecx
align 4
			
mov	[ebp+pflags], callback_context_0
mov	[ebp+filename],	0
mov	[ebp+sftp], 4
mov	[ebp+context], sftp_0
mov	entry, [ebp+var_1C]
add	esp, 4Ch
pop	callback_context_0
pop	pflags_0
pop	sftp_0
leave
jmp	ecx
xor	eax, eax
jmp	loc_64235C9C
align 10h
mov	esi, [ebp+mode]
mov	esi, [esi+18h]
mov	[ebp+mode], esi
jmp	loc_64235CB7
align 10h
mov	al, 2
jmp	loc_64235C9C
align 4
call	__errno
mov	eax, [eax]
mov	[esp], eax	
call	_silc_sftp_map_errno
mov	[ebp+pflags], callback_context_0
mov	[ebp+filename],	0
mov	[ebp+sftp], eax
mov	[ebp+context], sftp_0
mov	ecx, [ebp+var_1C]
jmp	loc_64235D1E
align 10h
mov	[ebp+pflags], callback_context_0
mov	[ebp+filename],	0
mov	[ebp+sftp], 2
mov	[ebp+context], sftp_0
mov	ecx, [ebp+var_1C]
jmp	loc_64235D1E
public _silc_sftp_server_set_monitor
push	ebp
mov	ebp, esp
mov	eax, [ebp+sftp]
mov	edx, [ebp+monitors]
mov	[eax+8], edx
mov	edx, [ebp+monitor]
mov	[eax+0Ch], edx
mov	edx, [ebp+context]
mov	[eax+10h], edx
leave
retn
align 4
public _silc_sftp_server_start
push	ebp
mov	ebp, esp
push	edi
push	esi
push	ebx
sub	esp, 1Ch
mov	esi, [ebp+stream]
mov	edi, [ebp+schedule]
mov	dword ptr [esp+4], 24h 
mov	dword ptr [esp], 1 
call	_silc_calloc
mov	ebx, eax
test	eax, eax
jz	short loc_64235E5C
mov	[eax], stream_0
mov	[eax+4], schedule_0
mov	eax, [ebp+error_cb]
mov	[ebx+1Ch], eax
mov	eax, [ebp+context]
mov	[ebx+20h], eax
mov	eax, [ebp+fs_0]
mov	[ebx+14h], eax
mov	[esp+0Ch], ebx	
mov	dword ptr [esp+8], offset _silc_sftp_server_io 
mov	[esp+4], schedule_0 
mov	[esp], stream_0	
call	_silc_stream_set_notifier
mov	eax, ebx
add	esp, 1Ch
pop	ebx
pop	stream_0
pop	schedule_0
leave
retn
align 4
xor	eax, eax
add	esp, 1Ch
pop	ebx
pop	stream_0
pop	schedule_0
leave
retn
align 4
			
push	ebp
mov	ebp, esp
push	edi
push	esi
push	ebx
sub	esp, 1Ch
mov	ebx, [ebp+sftp]
lea	eax, [ebp+vp]
mov	[esp+0Ch], eax	
mov	eax, [ebp+len]
mov	[esp+8], eax	
mov	eax, [ebx+18h]
mov	[esp+4], eax	
mov	eax, [ebp+type]
mov	[esp], eax	
call	_silc_sftp_packet_encode_vp
mov	ecx, eax
test	eax, eax
jz	short loc_64235EEC
mov	[sftp_0+18h], tmp
mov	esi, [tmp+8]
mov	edx, [tmp+4]
jmp	short loc_64235EE0
align 4
sub	esi, edx
mov	[esp+8], esi	
mov	[esp+4], edx	
mov	ret, [sftp_0]
mov	[esp], eax	
call	_silc_stream_write
cmp	eax, 0FFFFFFFEh
jz	short loc_64235EF4
test	ret, ret
jz	short loc_64235F40
cmp	ret, 0FFFFFFFFh
jz	short loc_64235EEC
mov	ecx, [sftp_0+18h]
mov	esi, [tmp+8]
mov	edx, [tmp+4]
mov	edi, esi
sub	edi, edx
cmp	ret, edi
ja	short loc_64235EE0
add	edx, ret
mov	[tmp+4], edx
			
cmp	esi, edx
jnz	short loc_64235EA8
mov	ret, [tmp]
mov	[tmp+8], eax
mov	[tmp+4], eax
			
add	esp, 1Ch
pop	sftp_0
pop	esi
pop	edi
leave
retn
mov	ret, [ebp+type]
mov	[esp+4], eax
mov	dword ptr [esp], offset	aErrorSending_0	
call	_silc_format
mov	[esp+4], eax	
mov	dword ptr [esp], 3 
call	_silc_log_output
mov	eax, [sftp_0+20h]
mov	[esp+8], eax
mov	dword ptr [esp+4], 6
mov	[esp], sftp_0
call	dword ptr [sftp_0+1Ch]
mov	eax, [sftp_0+18h]
mov	edx, [eax]
mov	[eax+8], edx
mov	[eax+4], edx
add	esp, 1Ch
pop	sftp_0
pop	esi
pop	edi
leave
retn
align 10h
mov	ret, [sftp_0+20h]
mov	[esp+8], eax
mov	dword ptr [esp+4], 1
jmp	short loc_64235F26
align 4
push	ebp
mov	ebp, esp
push	ebx
sub	esp, 34h
mov	ecx, [ebp+sftp]
mov	eax, [ebp+status]
mov	edx, [ebp+data_len]
mov	ebx, [ebp+context]
test	eax, eax
jnz	short loc_64235FB0
mov	dword ptr [esp+20h], 1Dh
mov	[esp+1Ch], data_len_0
mov	status_0, [ebp+data]
mov	[esp+18h], eax
mov	dword ptr [esp+14h], 1Bh
mov	[esp+10h], context_0
mov	dword ptr [esp+0Ch], 5
add	data_len_0, 4
mov	[esp+8], edx	
mov	dword ptr [esp+4], 0C8h	
mov	[esp], sftp_0	
call	_silc_sftp_send_packet_0
add	esp, 34h
pop	context_0
leave
retn
align 10h
mov	dword ptr [esp+2Ch], 1Dh
mov	dword ptr [esp+28h], 0
mov	dword ptr [esp+24h], 5
mov	dword ptr [esp+20h], 0
mov	dword ptr [esp+1Ch], 5
mov	[esp+18h], status_0
mov	dword ptr [esp+14h], 5
mov	[esp+10h], context_0
mov	dword ptr [esp+0Ch], 5
mov	dword ptr [esp+8], 10h 
mov	dword ptr [esp+4], 65h 
mov	[esp], sftp_0	
call	_silc_sftp_send_packet_0
add	esp, 34h
pop	context_0
leave
retn
align 10h
			
push	ebp
mov	ebp, esp
push	edi
push	esi
push	ebx
sub	esp, 3Ch
mov	ebx, [ebp+sftp]
mov	eax, [ebp+status]
mov	edx, [ebp+attrs]
mov	esi, [ebp+context]
test	eax, eax
jnz	short loc_64236098
mov	[esp], attrs_0	
call	_silc_sftp_attr_encode
mov	edi, eax
test	eax, eax
jz	loc_642360F8
mov	edx, [attr_buf+4]
mov	attr_buf, [attr_buf+8]
sub	eax, edx
mov	dword ptr [esp+20h], 1Dh
mov	[esp+1Ch], eax
mov	[esp+18h], edx
mov	dword ptr [esp+14h], 0Ch
mov	[esp+10h], context_0
mov	dword ptr [esp+0Ch], 5
add	eax, 4
mov	[esp+8], eax	
mov	dword ptr [esp+4], 69h 
mov	[esp], sftp_0	
call	_silc_sftp_send_packet_0
mov	eax, [attr_buf]
mov	[esp], eax	
call	_silc_free
mov	[ebp+sftp], attr_buf
add	esp, 3Ch
pop	sftp_0
pop	context_0
pop	attr_buf
leave
jmp	_silc_free
align 4
mov	dword ptr [esp+2Ch], 1Dh
mov	dword ptr [esp+28h], 0
mov	dword ptr [esp+24h], 5
mov	dword ptr [esp+20h], 0
mov	dword ptr [esp+1Ch], 5
mov	[esp+18h], status_0
mov	dword ptr [esp+14h], 5
mov	[esp+10h], context_0
mov	dword ptr [esp+0Ch], 5
mov	dword ptr [esp+8], 10h 
mov	dword ptr [esp+4], 65h 
mov	[esp], sftp_0	
call	_silc_sftp_send_packet_0
add	esp, 3Ch
pop	sftp_0
pop	context_0
pop	attr_buf
leave
retn
mov	dword ptr [esp+2Ch], 1Dh
mov	dword ptr [esp+28h], 0
mov	dword ptr [esp+24h], 5
mov	dword ptr [esp+20h], 0
mov	dword ptr [esp+1Ch], 5
mov	dword ptr [esp+18h], 4
jmp	short loc_642360C4
align 4
			
push	ebp
mov	ebp, esp
push	esi
push	ebx
sub	esp, 30h
mov	ebx, [ebp+sftp]
mov	eax, [ebp+status]
mov	esi, [ebp+context]
test	eax, eax
jnz	short loc_642361A0
mov	status_0, [ebp+name]
mov	[esp], eax	
call	_silc_sftp_name_encode
test	eax, eax
jz	loc_64236200
mov	edx, [namebuf+4]
mov	namebuf, [namebuf+8]
sub	eax, edx
mov	dword ptr [esp+20h], 1Dh
mov	[esp+1Ch], eax
mov	[esp+18h], edx
mov	dword ptr [esp+14h], 0Ch
mov	[esp+10h], context_0
mov	dword ptr [esp+0Ch], 5
add	eax, 4
mov	[esp+8], eax	
mov	dword ptr [esp+4], 68h 
mov	[esp], sftp_0	
call	_silc_sftp_send_packet_0
add	esp, 30h
pop	sftp_0
pop	context_0
leave
retn
align 10h
mov	dword ptr [esp+2Ch], 1Dh
mov	dword ptr [esp+28h], 0
mov	dword ptr [esp+24h], 5
mov	dword ptr [esp+20h], 0
mov	dword ptr [esp+1Ch], 5
mov	[esp+18h], status_0
mov	dword ptr [esp+14h], 5
mov	[esp+10h], context_0
mov	dword ptr [esp+0Ch], 5
mov	dword ptr [esp+8], 10h 
mov	dword ptr [esp+4], 65h 
mov	[esp], sftp_0	
call	_silc_sftp_send_packet_0
add	esp, 30h
pop	sftp_0
pop	context_0
leave
retn
align 10h
mov	dword ptr [esp+2Ch], 1Dh
mov	dword ptr [esp+28h], 0
mov	dword ptr [esp+24h], 5
mov	dword ptr [esp+20h], 0
mov	dword ptr [esp+1Ch], 5
mov	dword ptr [esp+18h], 4
jmp	short loc_642361CC
align 4
			
push	ebp
mov	ebp, esp
push	esi
push	ebx
sub	esp, 40h
mov	ebx, [ebp+sftp]
mov	eax, [ebp+status]
mov	esi, [ebp+context]
test	eax, eax
jnz	short loc_642362C4
mov	status_0, [sftp_0+14h]
mov	edx, [eax]
lea	ecx, [ebp+hdata_len]
mov	[esp+0Ch], ecx
mov	ecx, [ebp+handle]
mov	[esp+8], ecx
mov	[esp+4], sftp_0
mov	eax, [eax+4]
mov	[esp], eax
call	dword ptr [edx+4]
test	eax, eax
jz	loc_64236324
mov	edx, [ebp+hdata_len]
mov	dword ptr [esp+28h], 1Dh
mov	[esp+24h], edx
mov	[esp+20h], hdata
mov	dword ptr [esp+1Ch], 1Bh
mov	[esp+18h], edx
mov	dword ptr [esp+14h], 5
mov	[esp+10h], context_0
mov	dword ptr [esp+0Ch], 5
add	edx, 8
mov	[esp+8], edx	
mov	dword ptr [esp+4], 66h 
mov	[esp], sftp_0	
call	_silc_sftp_send_packet_0
add	esp, 40h
pop	sftp_0
pop	context_0
leave
retn
align 4
mov	dword ptr [esp+2Ch], 1Dh
mov	dword ptr [esp+28h], 0
mov	dword ptr [esp+24h], 5
mov	dword ptr [esp+20h], 0
mov	dword ptr [esp+1Ch], 5
mov	[esp+18h], status_0
mov	dword ptr [esp+14h], 5
mov	[esp+10h], context_0
mov	dword ptr [esp+0Ch], 5
mov	dword ptr [esp+8], 10h 
mov	dword ptr [esp+4], 65h 
mov	[esp], sftp_0	
call	_silc_sftp_send_packet_0
add	esp, 40h
pop	sftp_0
pop	context_0
leave
retn
align 4
mov	dword ptr [esp+2Ch], 1Dh
mov	dword ptr [esp+28h], 0
mov	dword ptr [esp+24h], 5
mov	dword ptr [esp+20h], 0
mov	dword ptr [esp+1Ch], 5
mov	dword ptr [esp+18h], 4
jmp	short loc_642362F0
align 4
			
push	ebp
mov	ebp, esp
push	edi
push	esi
push	ebx
sub	esp, 4Ch
mov	edx, [ebp+message]
mov	esi, [ebp+language_tag]
test	edx, edx
jz	loc_6423641C
xor	eax, eax
mov	ecx, 0FFFFFFFFh
mov	edi, message_0
repne scasb
not	ecx
lea	ebx, [ecx-1]
test	language_tag_0,	language_tag_0
jz	loc_64236410
xor	eax, eax
mov	ecx, 0FFFFFFFFh
mov	edi, language_tag_0
repne scasb
not	ecx
dec	ecx
mov	dword ptr [esp+3Ch], 1Dh
mov	[esp+38h], language_tag_0
mov	dword ptr [esp+34h], 0Ah
mov	[esp+30h], ecx
mov	dword ptr [esp+2Ch], 5
mov	[esp+28h], message_0
mov	dword ptr [esp+24h], 0Ah
mov	[esp+20h], ebx
mov	dword ptr [esp+1Ch], 5
mov	eax, [ebp+status]
mov	[esp+18h], eax
mov	dword ptr [esp+14h], 5
mov	eax, [ebp+context]
mov	[esp+10h], eax
mov	dword ptr [esp+0Ch], 5
lea	eax, [ecx+ebx+10h]
mov	[esp+8], eax	
mov	dword ptr [esp+4], 65h 
mov	eax, [ebp+sftp]
mov	[esp], eax	
call	_silc_sftp_send_packet_0
add	esp, 4Ch
pop	ebx
pop	language_tag_0
pop	edi
leave
retn
align 10h
xor	ecx, ecx
mov	language_tag_0,	offset word_6426F522
jmp	loc_64236395
xor	ebx, ebx
mov	message_0, offset word_6426F522
jmp	loc_6423637F
push	ebp
mov	ebp, esp
push	ebx
sub	esp, 34h
mov	ecx, [ebp+sftp]
mov	edx, [ebp+status]
mov	eax, [ebp+data_len]
mov	ebx, [ebp+context]
test	edx, edx
jnz	short loc_64236490
mov	dword ptr [esp+28h], 1Dh
mov	[esp+24h], data_len_0
mov	status_0, [ebp+data]
mov	[esp+20h], edx
mov	dword ptr [esp+1Ch], 1Bh
mov	[esp+18h], data_len_0
mov	dword ptr [esp+14h], 5
mov	[esp+10h], context_0
mov	dword ptr [esp+0Ch], 5
add	data_len_0, 8
mov	[esp+8], eax	
mov	dword ptr [esp+4], 67h 
mov	[esp], sftp_0	
call	_silc_sftp_send_packet_0
add	esp, 34h
pop	context_0
leave
retn
align 10h
mov	dword ptr [esp+2Ch], 1Dh
mov	dword ptr [esp+28h], 0
mov	dword ptr [esp+24h], 5
mov	dword ptr [esp+20h], 0
mov	dword ptr [esp+1Ch], 5
mov	[esp+18h], status_0
mov	dword ptr [esp+14h], 5
mov	[esp+10h], context_0
mov	dword ptr [esp+0Ch], 5
mov	dword ptr [esp+8], 10h 
mov	dword ptr [esp+4], 65h 
mov	[esp], sftp_0	
call	_silc_sftp_send_packet_0
add	esp, 34h
pop	context_0
leave
retn
align 10h
push	ebp
mov	ebp, esp
push	edi
push	esi
push	ebx
mov	eax, 84ECh	
call	__alloca
mov	esi, [ebp+stream]
mov	eax, [ebp+arg_4]
mov	ebx, [ebp+sftp]
test	eax, eax
jnz	short loc_6423654C
mov	dword ptr [esp+8], 8400h 
lea	edi, [ebp+buf]
mov	[esp+4], edi	
mov	[esp], stream_0	
call	_silc_stream_read
cmp	eax, 0
jg	loc_642365C0
jz	loc_6423668C
cmp	ret, 0FFFFFFFEh
jz	loc_642366A6
nop
			
add	esp, 84ECh	
pop	ebx
pop	esi
pop	edi
leave
retn
align 4
dec	status_0
jnz	short loc_64236540 
mov	edi, [context_0+18h]
mov	edx, [edi+4]
mov	eax, [edi]
cmp	edx, eax
jz	short loc_64236540 
mov	edx, eax
mov	[edi+4], eax
jmp	short loc_642365AE
align 4
sub	ecx, edx
mov	[esp+8], ecx	
mov	[esp+4], edx	
mov	[esp], stream_0	
call	_silc_stream_write
test	eax, eax
jz	loc_64236640
cmp	ret, 0FFFFFFFEh
jz	loc_64236674
cmp	ret, 0FFFFFFFFh
jz	short loc_64236540 
mov	context_0, [ebp+var_84BC]
mov	edi, [ebx+18h]
mov	ecx, [edi+8]
mov	edx, [edi+4]
mov	ebx, ecx
sub	ebx, edx
cmp	ret, ebx
ja	short loc_642365B7
mov	ebx, [ebp+var_84BC]
add	edx, ret
mov	[edi+4], edx
mov	ecx, [edi+8]
mov	[ebp+var_84BC],	context_0
cmp	ecx, edx
jnz	short loc_64236564
jmp	short loc_64236540 
align 10h
mov	[ebp+packet.head], edi
mov	[ebp+packet.data], edi
lea	ret, [edi+ret]
mov	[ebp+packet.end], eax
mov	[ebp+packet.tail], eax
mov	[ebp+var_1C], 0
mov	[ebp+var_20], 0
mov	[ebp+payload], 0
lea	eax, [ebp+payload_len]
mov	[esp+8], eax	
lea	eax, [ebp+payload]
mov	[esp+4], eax	
lea	eax, [ebp+packet]
mov	[esp], eax	
call	_silc_sftp_packet_decode
mov	edx, eax
test	eax, eax
jz	loc_64236540	
mov	eax, [ebp+payload]
mov	[ebp+src.head],	eax
mov	[ebp+src.data],	eax
add	eax, [ebp+payload_len]
mov	[ebp+src.end], eax
mov	[ebp+src.tail],	eax
lea	stream_0, [ebp+var_A0]
mov	ecx, 20h
xor	eax, eax
mov	edi, esi
rep stosb
cmp	edx, 0C8h	
ja	loc_64236540	
jmp	ds:off_6426F524[edx*4] 
align 10h
mov	context_0, [ebp+var_84BC]
mov	ret, [context_0+20h]
mov	[esp+8], eax
mov	dword ptr [esp+4], 1
mov	[esp], context_0
call	dword ptr [context_0+1Ch]
mov	eax, [context_0+18h]
mov	edx, [eax]
mov	[eax+8], edx
mov	[eax+4], edx
add	esp, 84ECh
pop	context_0
pop	stream_0
pop	edi
leave
retn
align 4
mov	context_0, [ebp+var_84BC]
mov	ret, [context_0+20h]
mov	[esp+8], eax
mov	dword ptr [esp+4], 6
jmp	short loc_64236655
align 4
mov	ret, [context_0+20h]
mov	[esp+8], eax
mov	dword ptr [esp+4], 1
mov	[esp], context_0
call	dword ptr [context_0+1Ch]
jmp	loc_64236540	
mov	ret, [context_0+20h]
mov	[esp+8], eax
mov	dword ptr [esp+4], 6
mov	[esp], context_0
call	dword ptr [context_0+1Ch]
jmp	loc_64236540	
			
mov	[ebp+ptr], 0	
mov	dword ptr [esp+14h], 1Dh
lea	eax, [ebp+ptr]
mov	[esp+10h], eax
mov	dword ptr [esp+0Ch], 12h
lea	eax, [ebp+var_2C]
mov	[esp+8], eax
mov	dword ptr [esp+4], 5
lea	edx, [ebp+src]
mov	[esp], edx	
mov	[ebp+var_84B0],	edx
call	_silc_buffer_unformat
test	eax, eax
mov	edx, [ebp+var_84B0]
js	loc_64237707
xor	eax, eax
or	ecx, 0FFFFFFFFh
mov	edi, [ebp+ptr]
repne scasb
not	ecx
add	ecx, 7
mov	[ebp+var_84AC],	ecx
mov	edi, [ebp+src.data]
mov	ecx, [ebp+src.tail]
mov	[ebp+var_84BC],	ecx
mov	eax, ecx
sub	eax, edi
cmp	[ebp+var_84AC],	eax
ja	short loc_6423674F
mov	ecx, [ebp+var_84AC]
lea	eax, [edi+ecx]
mov	[ebp+src.data],	eax
mov	ecx, [ebp+var_84BC]
sub	ecx, eax
mov	eax, ecx
mov	dword ptr [esp+10h], 1Dh
mov	[esp+0Ch], eax
lea	eax, [ebp+var_44]
mov	[esp+8], eax
mov	dword ptr [esp+4], 0Ch
mov	[esp], edx	
call	_silc_buffer_unformat
test	eax, eax
js	loc_64237707
mov	eax, [ebp+src.tail]
mov	[ebp+var_84AC],	eax
mov	edi, [ebp+src.data]
test	byte ptr [context_0+0Ah], 8
jz	short loc_642367AB
mov	eax, [context_0+0Ch]
test	eax, eax
jz	short loc_642367AB
mov	edx, [context_0+10h]
mov	[esp+0Ch], edx
mov	[esp+8], esi
mov	dword ptr [esp+4], 80000h
mov	[esp], context_0
call	eax
			
mov	eax, [context_0+14h]
mov	edx, [eax]
mov	ecx, [ebp+var_2C]
mov	[esp+18h], ecx
mov	dword ptr [esp+14h], offset _silc_sftp_server_extended
mov	ecx, [ebp+var_84AC]
sub	ecx, edi
mov	[esp+10h], ecx
mov	ecx, [ebp+var_44]
mov	[esp+0Ch], ecx
mov	ecx, [ebp+ptr]
mov	[esp+8], ecx
mov	[esp+4], context_0
mov	eax, [eax+4]
mov	[esp], eax
call	dword ptr [edx+50h]
mov	eax, [ebp+ptr]
mov	[esp], eax	
call	_silc_free
jmp	loc_64236540	
			
mov	[ebp+ptr], 0	
mov	dword ptr [esp+1Ch], 1Dh
lea	eax, [ebp+ptr]
mov	[esp+18h], eax
mov	dword ptr [esp+14h], 12h
lea	eax, [ebp+var_20]
mov	[esp+10h], eax
mov	dword ptr [esp+0Ch], 12h
lea	eax, [ebp+var_2C]
mov	[esp+8], eax
mov	dword ptr [esp+4], 5
lea	eax, [ebp+src]
mov	[esp], eax	
call	_silc_buffer_unformat
test	eax, eax
js	loc_64237707
test	byte ptr [context_0+0Ah], 2
jz	short loc_6423687C
cmp	dword ptr [context_0+0Ch], 0
jz	short loc_6423687C
mov	eax, [ebp+var_20]
mov	[ebp+var_9C], eax
mov	eax, [ebp+ptr]
mov	[ebp+var_98], eax
mov	eax, [context_0+10h]
mov	[esp+0Ch], eax
mov	[esp+8], esi
mov	dword ptr [esp+4], 20000h
mov	[esp], context_0
call	dword ptr [context_0+0Ch]
			
mov	eax, [context_0+14h]
mov	edx, [eax]
mov	ecx, [ebp+var_2C]
mov	[esp+14h], ecx
mov	dword ptr [esp+10h], offset _silc_sftp_server_status
mov	ecx, [ebp+ptr]
mov	[esp+0Ch], ecx
mov	ecx, [ebp+var_20]
mov	[esp+8], ecx
mov	[esp+4], context_0
mov	eax, [eax+4]
mov	[esp], eax
call	dword ptr [edx+48h]
mov	eax, [ebp+var_20]
mov	[esp], eax	
call	_silc_free
mov	eax, [ebp+ptr]
mov	[esp], eax	
call	_silc_free
jmp	loc_64236540	
			
mov	dword ptr [esp+14h], 1Dh 
lea	eax, [ebp+var_20]
mov	[esp+10h], eax
mov	dword ptr [esp+0Ch], 12h
lea	eax, [ebp+var_2C]
mov	[esp+8], eax
mov	dword ptr [esp+4], 5
lea	eax, [ebp+src]
mov	[esp], eax	
call	_silc_buffer_unformat
test	eax, eax
js	loc_64237707
test	byte ptr [context_0+0Ah], 1
jz	short loc_6423692D
cmp	dword ptr [context_0+0Ch], 0
jz	short loc_6423692D
mov	eax, [ebp+var_20]
mov	[ebp+var_9C], eax
mov	eax, [context_0+10h]
mov	[esp+0Ch], eax
mov	[esp+8], esi
mov	dword ptr [esp+4], 10000h
mov	[esp], context_0
call	dword ptr [context_0+0Ch]
			
mov	eax, [context_0+14h]
mov	edx, [eax]
mov	ecx, [ebp+var_2C]
mov	[esp+10h], ecx
mov	dword ptr [esp+0Ch], offset _silc_sftp_server_name
mov	ecx, [ebp+var_20]
mov	[esp+8], ecx
mov	[esp+4], context_0
mov	eax, [eax+4]
mov	[esp], eax
call	dword ptr [edx+44h]
mov	eax, [ebp+var_20]
mov	[esp], eax	
call	_silc_free
jmp	loc_64236540	
			
mov	[ebp+ptr], 0	
mov	dword ptr [esp+1Ch], 1Dh
lea	eax, [ebp+ptr]
mov	[esp+18h], eax
mov	dword ptr [esp+14h], 12h
lea	eax, [ebp+var_1C]
mov	[esp+10h], eax
mov	dword ptr [esp+0Ch], 12h
lea	eax, [ebp+var_2C]
mov	[esp+8], eax
mov	dword ptr [esp+4], 5
lea	eax, [ebp+src]
mov	[esp], eax	
call	_silc_buffer_unformat
test	eax, eax
js	loc_64237707
test	byte ptr [context_0+8],	40h
jz	short loc_642369EB
cmp	dword ptr [context_0+0Ch], 0
jz	short loc_642369EB
mov	eax, [ebp+var_1C]
mov	[ebp+var_9C], eax
mov	eax, [ebp+ptr]
mov	[ebp+var_98], eax
mov	eax, [context_0+10h]
mov	[esp+0Ch], eax
mov	[esp+8], esi
mov	dword ptr [esp+4], 40h
mov	[esp], context_0
call	dword ptr [context_0+0Ch]
			
mov	eax, [context_0+14h]
mov	edx, [eax]
mov	ecx, [ebp+var_2C]
mov	[esp+14h], ecx
mov	dword ptr [esp+10h], offset _silc_sftp_server_status
mov	ecx, [ebp+ptr]
mov	[esp+0Ch], ecx
mov	ecx, [ebp+var_1C]
mov	[esp+8], ecx
mov	[esp+4], context_0
mov	eax, [eax+4]
mov	[esp], eax
call	dword ptr [edx+1Ch]
mov	eax, [ebp+var_1C]
jmp	loc_642368AE
			
mov	dword ptr [esp+14h], 1Dh 
lea	eax, [ebp+var_20]
mov	[esp+10h], eax
mov	dword ptr [esp+0Ch], 12h
lea	eax, [ebp+var_2C]
mov	[esp+8], eax
mov	dword ptr [esp+4], 5
lea	eax, [ebp+src]
mov	[esp], eax	
call	_silc_buffer_unformat
test	eax, eax
js	loc_64237707
test	byte ptr [context_0+9],	8
jz	short loc_64236A89
cmp	dword ptr [context_0+0Ch], 0
jz	short loc_64236A89
mov	eax, [ebp+var_20]
mov	[ebp+var_9C], eax
mov	eax, [context_0+10h]
mov	[esp+0Ch], eax
mov	[esp+8], esi
mov	dword ptr [esp+4], 800h
mov	[esp], context_0
call	dword ptr [context_0+0Ch]
			
mov	eax, [context_0+14h]
mov	edx, [eax]
mov	ecx, [ebp+var_2C]
mov	[esp+10h], ecx
mov	dword ptr [esp+0Ch], offset _silc_sftp_server_attr
mov	ecx, [ebp+var_20]
mov	[esp+8], ecx
mov	[esp+4], context_0
mov	eax, [eax+4]
mov	[esp], eax
call	dword ptr [edx+30h]
mov	eax, [ebp+var_20]
mov	[esp], eax	
call	_silc_free
jmp	loc_64236540	
			
mov	dword ptr [esp+14h], 1Dh 
lea	eax, [ebp+var_20]
mov	[esp+10h], eax
mov	dword ptr [esp+0Ch], 12h
lea	eax, [ebp+var_2C]
mov	[esp+8], eax
mov	dword ptr [esp+4], 5
lea	eax, [ebp+src]
mov	[esp], eax	
call	_silc_buffer_unformat
test	eax, eax
js	loc_64237707
test	byte ptr [context_0+0Ah], 4
jz	short loc_64236B28
cmp	dword ptr [context_0+0Ch], 0
jz	short loc_64236B28
mov	eax, [ebp+var_20]
mov	[ebp+var_9C], eax
mov	eax, [context_0+10h]
mov	[esp+0Ch], eax
mov	[esp+8], esi
mov	dword ptr [esp+4], 40000h
mov	[esp], context_0
call	dword ptr [context_0+0Ch]
			
mov	eax, [context_0+14h]
mov	edx, [eax]
mov	ecx, [ebp+var_2C]
mov	[esp+10h], ecx
mov	dword ptr [esp+0Ch], offset _silc_sftp_server_name
mov	ecx, [ebp+var_20]
mov	[esp+8], ecx
mov	[esp+4], context_0
mov	eax, [eax+4]
mov	[esp], eax
call	dword ptr [edx+4Ch]
mov	eax, [ebp+var_20]
mov	[esp], eax	
call	_silc_free
jmp	loc_64236540	
			
mov	dword ptr [esp+14h], 1Dh 
lea	eax, [ebp+var_20]
mov	[esp+10h], eax
mov	dword ptr [esp+0Ch], 12h
lea	eax, [ebp+var_2C]
mov	[esp+8], eax
mov	dword ptr [esp+4], 5
lea	eax, [ebp+src]
mov	[esp], eax	
call	_silc_buffer_unformat
test	eax, eax
js	loc_64237707
test	byte ptr [context_0+9],	1
jz	short loc_64236BC7
cmp	dword ptr [context_0+0Ch], 0
jz	short loc_64236BC7
mov	eax, [ebp+var_20]
mov	[ebp+var_9C], eax
mov	eax, [context_0+10h]
mov	[esp+0Ch], eax
mov	[esp+8], esi
mov	dword ptr [esp+4], 100h
mov	[esp], context_0
call	dword ptr [context_0+0Ch]
			
mov	eax, [context_0+14h]
mov	edx, [eax]
mov	ecx, [ebp+var_2C]
mov	[esp+10h], ecx
mov	dword ptr [esp+0Ch], offset _silc_sftp_server_status
mov	ecx, [ebp+var_20]
mov	[esp+8], ecx
mov	[esp+4], context_0
mov	eax, [eax+4]
mov	[esp], eax
call	dword ptr [edx+24h]
mov	eax, [ebp+var_20]
mov	[esp], eax	
call	_silc_free
jmp	loc_64236540	
			
mov	[ebp+var_38], 0	
mov	dword ptr [esp+20h], 1Dh
lea	eax, [ebp+var_38]
mov	[esp+1Ch], eax
lea	eax, [ebp+var_34]
mov	[esp+18h], eax
mov	dword ptr [esp+14h], 0Fh
lea	eax, [ebp+var_20]
mov	[esp+10h], eax
mov	dword ptr [esp+0Ch], 12h
lea	eax, [ebp+var_2C]
mov	[esp+8], eax
mov	dword ptr [esp+4], 5
lea	eax, [ebp+src]
mov	[esp], eax	
call	_silc_buffer_unformat
test	eax, eax
js	loc_64237707
mov	edx, [ebp+var_38]
test	edx, edx
jz	loc_6423776B
mov	eax, [ebp+var_34]
mov	[ebp+buffer.head], eax
mov	[ebp+buffer.data], eax
add	eax, edx
mov	[ebp+buffer.end], eax
mov	[ebp+buffer.tail], eax
lea	eax, [ebp+buffer]
mov	[esp], eax	
call	_silc_sftp_attr_decode
mov	edi, eax
test	eax, eax
jz	loc_64237707
cmp	byte ptr [context_0+8],	0
jns	short loc_64236CB4
cmp	dword ptr [context_0+0Ch], 0
jz	short loc_64236CB4
mov	eax, [ebp+var_20]
mov	[ebp+var_9C], eax
mov	eax, [context_0+10h]
mov	[esp+0Ch], eax
mov	[esp+8], esi
mov	dword ptr [esp+4], 80h
mov	[esp], context_0
call	dword ptr [context_0+0Ch]
			
mov	eax, [context_0+14h]
mov	edx, [eax]
mov	ecx, [ebp+var_2C]
mov	[esp+14h], ecx
mov	dword ptr [esp+10h], offset _silc_sftp_server_status
mov	[esp+0Ch], edi
mov	ecx, [ebp+var_20]
mov	[esp+8], ecx
mov	[esp+4], context_0
mov	eax, [eax+4]
mov	[esp], eax
call	dword ptr [edx+20h]
mov	[esp], edi	
call	_silc_sftp_attr_free
mov	eax, [ebp+var_20]
mov	[esp], eax	
call	_silc_free
jmp	loc_64236540	
			
mov	dword ptr [esp+14h], 1Dh 
lea	eax, [ebp+var_1C]
mov	[esp+10h], eax
mov	dword ptr [esp+0Ch], 12h
lea	eax, [ebp+var_2C]
mov	[esp+8], eax
mov	dword ptr [esp+4], 5
lea	eax, [ebp+src]
mov	[esp], eax	
call	_silc_buffer_unformat
test	eax, eax
js	loc_64237707
test	byte ptr [context_0+8],	20h
jz	short loc_64236D5F
cmp	dword ptr [context_0+0Ch], 0
jz	short loc_64236D5F
mov	eax, [ebp+var_1C]
mov	[ebp+var_9C], eax
mov	eax, [context_0+10h]
mov	[esp+0Ch], eax
mov	[esp+8], esi
mov	dword ptr [esp+4], 20h
mov	[esp], context_0
call	dword ptr [context_0+0Ch]
			
mov	eax, [context_0+14h]
mov	edx, [eax]
mov	ecx, [ebp+var_2C]
mov	[esp+10h], ecx
mov	dword ptr [esp+0Ch], offset _silc_sftp_server_status
mov	ecx, [ebp+var_1C]
mov	[esp+8], ecx
mov	[esp+4], context_0
mov	eax, [eax+4]
mov	[esp], eax
call	dword ptr [edx+18h]
mov	eax, [ebp+var_1C]
mov	[esp], eax	
call	_silc_free
jmp	loc_64236540	
			
mov	dword ptr [esp+18h], 1Dh 
lea	eax, [ebp+var_38]
mov	[esp+14h], eax
lea	eax, [ebp+var_34]
mov	[esp+10h], eax
mov	dword ptr [esp+0Ch], 0Fh
lea	eax, [ebp+var_2C]
mov	[esp+8], eax
mov	dword ptr [esp+4], 5
lea	eax, [ebp+src]
mov	[esp], eax	
call	_silc_buffer_unformat
test	eax, eax
js	loc_64237707
mov	eax, [context_0+14h]
mov	edx, [eax]
mov	ecx, [ebp+var_38]
mov	[esp+0Ch], ecx
mov	ecx, [ebp+var_34]
mov	[esp+8], ecx
mov	[esp+4], context_0
mov	eax, [eax+4]
mov	[esp], eax
call	dword ptr [edx]
mov	edi, eax
test	eax, eax
jz	loc_642377D4
test	byte ptr [context_0+9],	4
jz	short loc_64236E25
mov	eax, [context_0+0Ch]
test	eax, eax
jz	short loc_64236E25
mov	edx, [context_0+10h]
mov	[esp+0Ch], edx
mov	[esp+8], esi
mov	dword ptr [esp+4], 400h
mov	[esp], context_0
call	eax
			
mov	edx, [context_0+14h]
mov	eax, [edx]
mov	ecx, [ebp+var_2C]
mov	[esp+10h], ecx
mov	dword ptr [esp+0Ch], offset _silc_sftp_server_name
mov	[esp+8], edi
mov	[esp+4], context_0
mov	edx, [edx+4]
mov	[esp], edx
call	dword ptr [eax+2Ch]
jmp	loc_64236540	
			
mov	dword ptr [esp+14h], 1Dh 
lea	eax, [ebp+var_20]
mov	[esp+10h], eax
mov	dword ptr [esp+0Ch], 12h
lea	eax, [ebp+var_2C]
mov	[esp+8], eax
mov	dword ptr [esp+4], 5
lea	eax, [ebp+src]
mov	[esp], eax	
call	_silc_buffer_unformat
test	eax, eax
js	loc_64237707
test	byte ptr [context_0+9],	2
jz	short loc_64236EB6
cmp	dword ptr [context_0+0Ch], 0
jz	short loc_64236EB6
mov	eax, [ebp+var_20]
mov	[ebp+var_9C], eax
mov	eax, [context_0+10h]
mov	[esp+0Ch], eax
mov	[esp+8], esi
mov	dword ptr [esp+4], 200h
mov	[esp], context_0
call	dword ptr [context_0+0Ch]
			
mov	eax, [context_0+14h]
mov	edx, [eax]
mov	ecx, [ebp+var_2C]
mov	[esp+10h], ecx
mov	dword ptr [esp+0Ch], offset _silc_sftp_server_handle
mov	ecx, [ebp+var_20]
mov	[esp+8], ecx
mov	[esp+4], context_0
mov	eax, [eax+4]
mov	[esp], eax
call	dword ptr [edx+28h]
mov	eax, [ebp+var_20]
mov	[esp], eax	
call	_silc_free
jmp	loc_64236540	
			
mov	[ebp+var_3C], 0	
mov	dword ptr [esp+24h], 1Dh
lea	eax, [ebp+var_3C]
mov	[esp+20h], eax
lea	eax, [ebp+var_44]
mov	[esp+1Ch], eax
mov	dword ptr [esp+18h], 0Fh
lea	eax, [ebp+var_38]
mov	[esp+14h], eax
lea	eax, [ebp+var_34]
mov	[esp+10h], eax
mov	dword ptr [esp+0Ch], 0Fh
lea	eax, [ebp+var_2C]
mov	[esp+8], eax
mov	dword ptr [esp+4], 5
lea	eax, [ebp+src]
mov	[esp], eax	
call	_silc_buffer_unformat
test	eax, eax
js	loc_64237707
mov	edx, [ebp+var_3C]
test	edx, edx
jz	loc_642377B1
mov	eax, [ebp+var_44]
mov	[ebp+buffer.head], eax
mov	[ebp+buffer.data], eax
add	eax, edx
mov	[ebp+buffer.end], eax
mov	[ebp+buffer.tail], eax
lea	eax, [ebp+buffer]
mov	[esp], eax	
call	_silc_sftp_attr_decode
mov	edi, eax
test	eax, eax
jz	loc_64237707
mov	eax, [context_0+14h]
mov	edx, [eax]
mov	ecx, [ebp+var_38]
mov	[esp+0Ch], ecx
mov	ecx, [ebp+var_34]
mov	[esp+8], ecx
mov	[esp+4], context_0
mov	eax, [eax+4]
mov	[esp], eax
call	dword ptr [edx]
test	eax, eax
jz	loc_642377D4
cmp	word ptr [context_0+8],	0
jns	short loc_64236FD5
mov	edx, [context_0+0Ch]
test	edx, edx
jz	short loc_64236FD5
mov	ecx, [context_0+10h]
mov	[esp+0Ch], ecx
mov	[esp+8], esi
mov	dword ptr [esp+4], 8000h
mov	[esp], context_0
mov	[ebp+var_84B0],	eax
call	edx
mov	eax, [ebp+var_84B0]
			
mov	edx, [context_0+14h]
mov	ecx, [edx]
mov	esi, [ebp+var_2C]
mov	[esp+14h], esi
mov	dword ptr [esp+10h], offset _silc_sftp_server_status
mov	[esp+0Ch], edi
mov	[esp+8], eax
mov	[esp+4], context_0
mov	eax, [edx+4]
mov	[esp], eax
call	dword ptr [ecx+40h]
mov	[esp], edi	
call	_silc_sftp_attr_free
jmp	loc_64236540	
			
mov	[ebp+var_38], 0	
mov	dword ptr [esp+20h], 1Dh
lea	eax, [ebp+var_38]
mov	[esp+1Ch], eax
lea	eax, [ebp+var_34]
mov	[esp+18h], eax
mov	dword ptr [esp+14h], 0Fh
lea	eax, [ebp+var_20]
mov	[esp+10h], eax
mov	dword ptr [esp+0Ch], 12h
lea	eax, [ebp+var_2C]
mov	[esp+8], eax
mov	dword ptr [esp+4], 5
lea	eax, [ebp+src]
mov	[esp], eax	
call	_silc_buffer_unformat
test	eax, eax
js	loc_64237707
mov	edx, [ebp+var_38]
test	edx, edx
jz	loc_6423778E
mov	eax, [ebp+var_34]
mov	[ebp+buffer.head], eax
mov	[ebp+buffer.data], eax
add	eax, edx
mov	[ebp+buffer.end], eax
mov	[ebp+buffer.tail], eax
lea	eax, [ebp+buffer]
mov	[esp], eax	
call	_silc_sftp_attr_decode
mov	edi, eax
test	eax, eax
jz	loc_64237707
test	byte ptr [context_0+9],	40h
jz	short loc_642370C0
cmp	dword ptr [context_0+0Ch], 0
jz	short loc_642370C0
mov	eax, [ebp+var_20]
mov	[ebp+var_9C], eax
mov	eax, [context_0+10h]
mov	[esp+0Ch], eax
mov	[esp+8], esi
mov	dword ptr [esp+4], 4000h
mov	[esp], context_0
call	dword ptr [context_0+0Ch]
			
mov	eax, [context_0+14h]
mov	edx, [eax]
mov	ecx, [ebp+var_2C]
mov	[esp+14h], ecx
mov	dword ptr [esp+10h], offset _silc_sftp_server_status
mov	[esp+0Ch], edi
mov	ecx, [ebp+var_20]
mov	[esp+8], ecx
mov	[esp+4], context_0
mov	eax, [eax+4]
mov	[esp], eax
call	dword ptr [edx+3Ch]
jmp	loc_64236CE0
			
mov	dword ptr [esp+18h], 1Dh 
lea	eax, [ebp+var_38]
mov	[esp+14h], eax
lea	eax, [ebp+var_34]
mov	[esp+10h], eax
mov	dword ptr [esp+0Ch], 0Fh
lea	eax, [ebp+var_2C]
mov	[esp+8], eax
mov	dword ptr [esp+4], 5
lea	eax, [ebp+src]
mov	[esp], eax	
call	_silc_buffer_unformat
test	eax, eax
js	loc_64237707
mov	eax, [context_0+14h]
mov	edx, [eax]
mov	ecx, [ebp+var_38]
mov	[esp+0Ch], ecx
mov	ecx, [ebp+var_34]
mov	[esp+8], ecx
mov	[esp+4], context_0
mov	eax, [eax+4]
mov	[esp], eax
call	dword ptr [edx]
mov	edi, eax
test	eax, eax
jz	loc_642377D4
test	byte ptr [context_0+9],	20h
jz	short loc_6423717F
mov	eax, [context_0+0Ch]
test	eax, eax
jz	short loc_6423717F
mov	edx, [context_0+10h]
mov	[esp+0Ch], edx
mov	[esp+8], esi
mov	dword ptr [esp+4], 2000h
mov	[esp], context_0
call	eax
			
mov	edx, [context_0+14h]
mov	eax, [edx]
mov	ecx, [ebp+var_2C]
mov	[esp+10h], ecx
mov	dword ptr [esp+0Ch], offset _silc_sftp_server_attr
mov	[esp+8], edi
mov	[esp+4], context_0
mov	edx, [edx+4]
mov	[esp], edx
call	dword ptr [eax+38h]
jmp	loc_64236540	
			
mov	dword ptr [esp+14h], 1Dh 
lea	eax, [ebp+var_20]
mov	[esp+10h], eax
mov	dword ptr [esp+0Ch], 12h
lea	eax, [ebp+var_2C]
mov	[esp+8], eax
mov	dword ptr [esp+4], 5
lea	eax, [ebp+src]
mov	[esp], eax	
call	_silc_buffer_unformat
test	eax, eax
js	loc_64237707
test	byte ptr [context_0+9],	10h
jz	short loc_64237210
cmp	dword ptr [context_0+0Ch], 0
jz	short loc_64237210
mov	eax, [ebp+var_20]
mov	[ebp+var_9C], eax
mov	eax, [context_0+10h]
mov	[esp+0Ch], eax
mov	[esp+8], esi
mov	dword ptr [esp+4], 1000h
mov	[esp], context_0
call	dword ptr [context_0+0Ch]
			
mov	eax, [context_0+14h]
mov	edx, [eax]
mov	ecx, [ebp+var_2C]
mov	[esp+10h], ecx
mov	dword ptr [esp+0Ch], offset _silc_sftp_server_attr
mov	ecx, [ebp+var_20]
mov	[esp+8], ecx
mov	[esp+4], context_0
mov	eax, [eax+4]
mov	[esp], eax
call	dword ptr [edx+34h]
mov	eax, [ebp+var_20]
mov	[esp], eax	
call	_silc_free
jmp	loc_64236540	
			
mov	dword ptr [esp+2Ch], 1Dh 
lea	eax, [ebp+var_38]
mov	[esp+28h], eax
lea	eax, [ebp+var_34]
mov	[esp+24h], eax
mov	dword ptr [esp+20h], 0Fh
lea	eax, [ebp+var_50]
mov	[esp+1Ch], eax
mov	dword ptr [esp+18h], 7
lea	eax, [ebp+var_3C]
mov	[esp+14h], eax
lea	eax, [ebp+var_44]
mov	[esp+10h], eax
mov	dword ptr [esp+0Ch], 0Fh
lea	eax, [ebp+var_2C]
mov	[esp+8], eax
mov	dword ptr [esp+4], 5
lea	eax, [ebp+src]
mov	[esp], eax	
call	_silc_buffer_unformat
test	eax, eax
js	loc_64237707
mov	eax, [context_0+14h]
mov	edx, [eax]
mov	ecx, [ebp+var_3C]
mov	[esp+0Ch], ecx
mov	ecx, [ebp+var_44]
mov	[esp+8], ecx
mov	[esp+4], context_0
mov	eax, [eax+4]
mov	[esp], eax
call	dword ptr [edx]
test	eax, eax
jz	loc_642377D4
mov	edx, [context_0+14h]
mov	edx, [edx]
mov	[ebp+var_84AC],	edx
mov	edi, [ebp+var_2C]
mov	[esp+20h], edi
mov	dword ptr [esp+1Ch], offset _silc_sftp_server_status
mov	edi, [ebp+var_38]
mov	[esp+18h], edi
mov	edi, [ebp+var_34]
mov	[esp+14h], edi
mov	edx, [ebp+var_50]
mov	ecx, [ebp+var_4C]
mov	[esp+0Ch], edx
mov	[esp+10h], ecx
mov	[esp+8], eax
mov	[esp+4], context_0
mov	ecx, [context_0+14h]
mov	eax, [ecx+4]
mov	[esp], eax
mov	eax, [ebp+var_84AC]
call	dword ptr [eax+14h]
test	byte ptr [context_0+8],	10h
jz	loc_64236540	
cmp	dword ptr [context_0+0Ch], 0
jz	loc_64236540	
mov	eax, [ebp+var_50]
mov	edx, [ebp+var_4C]
mov	[ebp+var_90], eax
mov	[ebp+var_8C], edx
mov	eax, [ebp+var_38]
mov	[ebp+var_88], eax
mov	eax, [context_0+10h]
mov	[esp+0Ch], eax
mov	[esp+8], esi
mov	dword ptr [esp+4], 10h
mov	[esp], context_0
call	dword ptr [context_0+0Ch]
jmp	loc_64236540	
			
mov	dword ptr [esp+28h], 1Dh 
lea	eax, [ebp+var_3C]
mov	[esp+24h], eax
mov	dword ptr [esp+20h], 5
lea	eax, [ebp+var_50]
mov	[esp+1Ch], eax
mov	dword ptr [esp+18h], 7
lea	eax, [ebp+var_38]
mov	[esp+14h], eax
lea	eax, [ebp+var_44]
mov	[esp+10h], eax
mov	dword ptr [esp+0Ch], 0Fh
lea	eax, [ebp+var_2C]
mov	[esp+8], eax
mov	dword ptr [esp+4], 5
lea	eax, [ebp+src]
mov	[esp], eax	
call	_silc_buffer_unformat
test	eax, eax
js	loc_64237707
mov	eax, [context_0+14h]
mov	edx, [eax]
mov	ecx, [ebp+var_38]
mov	[esp+0Ch], ecx
mov	ecx, [ebp+var_44]
mov	[esp+8], ecx
mov	[esp+4], context_0
mov	eax, [eax+4]
mov	[esp], eax
call	dword ptr [edx]
test	eax, eax
jz	loc_642377D4
mov	edx, [context_0+14h]
mov	edx, [edx]
mov	[ebp+var_84AC],	edx
mov	edi, [ebp+var_2C]
mov	[esp+1Ch], edi
mov	dword ptr [esp+18h], offset _silc_sftp_server_data
mov	edi, [ebp+var_3C]
mov	[esp+14h], edi
mov	edx, [ebp+var_50]
mov	ecx, [ebp+var_4C]
mov	[esp+0Ch], edx
mov	[esp+10h], ecx
mov	[esp+8], eax
mov	[esp+4], context_0
mov	ecx, [context_0+14h]
mov	eax, [ecx+4]
mov	[esp], eax
mov	eax, [ebp+var_84AC]
call	dword ptr [eax+10h]
test	byte ptr [context_0+8],	8
jz	loc_64236540	
cmp	dword ptr [context_0+0Ch], 0
jz	loc_64236540	
mov	eax, [ebp+var_50]
mov	edx, [ebp+var_4C]
mov	[ebp+var_90], eax
mov	[ebp+var_8C], edx
mov	eax, [ebp+var_3C]
mov	[ebp+var_88], eax
mov	eax, [context_0+10h]
mov	[esp+0Ch], eax
mov	[esp+8], esi
mov	dword ptr [esp+4], 8
mov	[esp], context_0
call	dword ptr [context_0+0Ch]
jmp	loc_64236540	
			
mov	dword ptr [esp+18h], 1Dh 
lea	eax, [ebp+var_38]
mov	[esp+14h], eax
lea	eax, [ebp+var_34]
mov	[esp+10h], eax
mov	dword ptr [esp+0Ch], 0Fh
lea	eax, [ebp+var_2C]
mov	[esp+8], eax
mov	dword ptr [esp+4], 5
lea	eax, [ebp+src]
mov	[esp], eax	
call	_silc_buffer_unformat
test	eax, eax
js	loc_64237707
mov	eax, [context_0+14h]
mov	edx, [eax]
mov	ecx, [ebp+var_38]
mov	[esp+0Ch], ecx
mov	ecx, [ebp+var_34]
mov	[esp+8], ecx
mov	[esp+4], context_0
mov	eax, [eax+4]
mov	[esp], eax
call	dword ptr [edx]
mov	edi, eax
test	eax, eax
jz	loc_642377D4
test	byte ptr [context_0+8],	4
jz	short loc_6423751A
mov	eax, [context_0+0Ch]
test	eax, eax
jz	short loc_6423751A
mov	edx, [context_0+10h]
mov	[esp+0Ch], edx
mov	[esp+8], esi
mov	dword ptr [esp+4], 4
mov	[esp], context_0
call	eax
			
mov	edx, [context_0+14h]
mov	eax, [edx]
mov	ecx, [ebp+var_2C]
mov	[esp+10h], ecx
mov	dword ptr [esp+0Ch], offset _silc_sftp_server_status
mov	[esp+8], edi
mov	[esp+4], context_0
mov	edx, [edx+4]
mov	[esp], edx
call	dword ptr [eax+0Ch]
jmp	loc_64236540	
			
mov	[ebp+var_38], 0	
mov	dword ptr [esp+28h], 1Dh
lea	eax, [ebp+var_38]
mov	[esp+24h], eax
lea	eax, [ebp+var_34]
mov	[esp+20h], eax
mov	dword ptr [esp+1Ch], 0Fh
lea	eax, [ebp+var_30]
mov	[esp+18h], eax
mov	dword ptr [esp+14h], 5
lea	eax, [ebp+var_1C]
mov	[esp+10h], eax
mov	dword ptr [esp+0Ch], 12h
lea	eax, [ebp+var_2C]
mov	[esp+8], eax
mov	dword ptr [esp+4], 5
lea	eax, [ebp+src]
mov	[esp], eax	
call	_silc_buffer_unformat
test	eax, eax
js	loc_64237707
mov	edx, [ebp+var_38]
test	edx, edx
jz	loc_642376E9
mov	eax, [ebp+var_34]
mov	[ebp+buffer.head], eax
mov	[ebp+buffer.data], eax
add	eax, edx
mov	[ebp+buffer.end], eax
mov	[ebp+buffer.tail], eax
lea	eax, [ebp+buffer]
mov	[esp], eax	
call	_silc_sftp_attr_decode
mov	edi, eax
test	eax, eax
jz	loc_64237707
test	byte ptr [context_0+8],	2
jz	short loc_64237611
cmp	dword ptr [context_0+0Ch], 0
jz	short loc_64237611
mov	eax, [ebp+var_1C]
mov	[ebp+var_9C], eax
mov	eax, [ebp+var_30]
mov	[ebp+var_94], eax
mov	eax, [context_0+10h]
mov	[esp+0Ch], eax
mov	[esp+8], esi
mov	dword ptr [esp+4], 2
mov	[esp], context_0
call	dword ptr [context_0+0Ch]
			
mov	eax, [context_0+14h]
mov	edx, [eax]
mov	ecx, [ebp+var_2C]
mov	[esp+18h], ecx
mov	dword ptr [esp+14h], offset _silc_sftp_server_handle
mov	[esp+10h], edi
mov	ecx, [ebp+var_30]
mov	[esp+0Ch], ecx
mov	ecx, [ebp+var_1C]
mov	[esp+8], ecx
mov	[esp+4], context_0
mov	eax, [eax+4]
mov	[esp], eax
call	dword ptr [edx+8]
mov	eax, [ebp+var_1C]
mov	[esp], eax	
call	_silc_free
mov	[esp], edi	
call	_silc_sftp_attr_free
jmp	loc_64236540	
			
mov	dword ptr [esp+0Ch], 1Dh 
lea	eax, [ebp+var_38]
mov	[esp+8], eax
mov	dword ptr [esp+4], 5
lea	eax, [ebp+src]
mov	[esp], eax	
call	_silc_buffer_unformat
test	eax, eax
js	loc_64236540	
test	byte ptr [context_0+8],	1
jz	short loc_642376B4
cmp	dword ptr [context_0+0Ch], 0
jz	short loc_642376B4
mov	eax, [ebp+var_38]
mov	[ebp+var_A0], eax
mov	eax, [context_0+10h]
mov	[esp+0Ch], eax
mov	[esp+8], esi
mov	dword ptr [esp+4], 1
mov	[esp], context_0
call	dword ptr [context_0+0Ch]
			
mov	dword ptr [esp+14h], 1Dh
mov	dword ptr [esp+10h], 3
mov	dword ptr [esp+0Ch], 5
mov	dword ptr [esp+8], 4 
mov	dword ptr [esp+4], 2 
mov	[esp], context_0 
call	_silc_sftp_send_packet_0
jmp	loc_64236540	
mov	dword ptr [esp+4], 30h 
mov	dword ptr [esp], 1 
call	_silc_calloc
mov	edi, eax
test	eax, eax
jnz	loc_642375DA
			
mov	dword ptr [esp+2Ch], 1Dh
mov	dword ptr [esp+28h], 0
mov	dword ptr [esp+24h], 5
mov	dword ptr [esp+20h], 0
mov	dword ptr [esp+1Ch], 5
mov	dword ptr [esp+18h], 4
mov	dword ptr [esp+14h], 5
mov	eax, [ebp+var_2C]
mov	[esp+10h], eax
mov	dword ptr [esp+0Ch], 5
mov	dword ptr [esp+8], 10h 
mov	dword ptr [esp+4], 65h 
mov	[esp], context_0 
call	_silc_sftp_send_packet_0
jmp	loc_64236540	
mov	dword ptr [esp+4], 30h 
mov	dword ptr [esp], 1 
call	_silc_calloc
mov	edi, eax
test	eax, eax
jnz	loc_64236C86
jmp	loc_64237707
mov	dword ptr [esp+4], 30h 
mov	dword ptr [esp], 1 
call	_silc_calloc
mov	edi, eax
test	eax, eax
jnz	loc_64237092
jmp	loc_64237707
mov	dword ptr [esp+4], 30h 
mov	dword ptr [esp], 1 
call	_silc_calloc
mov	edi, eax
test	eax, eax
jnz	loc_64236F7C
jmp	loc_64237707
			
mov	dword ptr [esp+2Ch], 1Dh
mov	dword ptr [esp+28h], 0
mov	dword ptr [esp+24h], 5
mov	dword ptr [esp+20h], 0
mov	dword ptr [esp+1Ch], 5
mov	dword ptr [esp+18h], 2
jmp	loc_64237737
align 4
public _silc_sftp_server_shutdown
push	ebp
mov	ebp, esp
push	esi
push	ebx
sub	esp, 10h
mov	ebx, [ebp+sftp]
mov	dword ptr [esp+0Ch], 0 
mov	dword ptr [esp+8], 0 
mov	eax, [server+4]
mov	[esp+4], eax	
mov	eax, [server]
mov	[esp], eax	
call	_silc_stream_set_notifier
mov	esi, [server+18h]
test	esi, esi
jz	short loc_64237851
mov	eax, [esi]
mov	[esp], eax	
call	_silc_free
mov	[esp], esi	
call	_silc_free
mov	[ebp+sftp], server
add	esp, 10h
pop	server
pop	esi
leave
jmp	_silc_free
align 10h
public _silc_sftp_map_errno
			
push	ebp
mov	ebp, esp
mov	eax, [ebp+err]
cmp	eax, 26h
ja	short loc_64237874
mov	err_0, ds:_CSWTCH_119[err_0*4]
leave
retn
mov	err_0, 4
leave
retn
align 4
push	ebp
mov	ebp, esp
push	esi
push	ebx
sub	esp, 10h
mov	esi, len
mov	dword ptr [esp+4], 10h 
mov	dword ptr [esp], 1 
call	_silc_calloc
mov	ebx, eax
test	eax, eax
jz	short loc_642378C6
test	len, len
jz	short loc_642378C6
mov	dword ptr [esp+4], 1 
mov	[esp], len	
call	_silc_calloc
mov	[sb], eax
test	eax, eax
jz	short loc_642378CF
mov	[sb+4],	eax
mov	[sb+8],	eax
lea	len, [eax+len]
mov	[sb+0Ch], esi
			
mov	eax, sb
add	esp, 10h
pop	sb
pop	len
leave
retn
xor	sb, sb
jmp	short loc_642378C6
align 4
public _silc_sftp_packet_decode
			
push	ebp
mov	ebp, esp
push	esi
push	ebx
sub	esp, 30h
mov	ebx, [ebp+packet]
mov	dword ptr [esp+14h], 1Dh
lea	eax, [ebp+type]
mov	[esp+10h], eax
mov	dword ptr [esp+0Ch], 1
lea	eax, [ebp+len]
mov	[esp+8], eax
mov	dword ptr [esp+4], 5
mov	[esp], ebx	
call	_silc_buffer_unformat
test	eax, eax
js	short loc_64237980
mov	al, [ebp+type]
dec	eax
cmp	al, 0C8h
ja	short loc_64237980
mov	ecx, [packet_0+4]
mov	eax, [packet_0+8]
sub	eax, ecx
mov	edx, [ebp+len]
lea	esi, [eax-5]
cmp	esi, edx
jb	short loc_6423798C
cmp	eax, 4
jbe	short loc_64237936
add	ecx, 5
mov	[packet_0+4], ecx
mov	dword ptr [esp+10h], 1Dh
mov	[esp+0Ch], edx
mov	eax, [ebp+payload]
mov	[esp+8], eax
mov	dword ptr [esp+4], 1Bh
mov	[esp], packet_0	
call	_silc_buffer_unformat
test	eax, eax
js	short loc_64237980
mov	ret, [packet_0+4]
sub	eax, 5
cmp	eax, [packet_0]
jb	short loc_6423796A
mov	[packet_0+4], eax
mov	edx, [ebp+len]
mov	eax, [ebp+payload_len]
mov	[eax], edx
movzx	eax, [ebp+type]
add	esp, 30h
pop	packet_0
pop	esi
leave
retn
align 10h
			
xor	ret, ret
add	esp, 30h
pop	packet_0
pop	esi
leave
retn
align 4
mov	eax, 0FFFFFFFFh
add	esp, 30h
pop	packet_0
pop	esi
leave
retn
public _silc_sftp_name_add
push	ebp
mov	ebp, esp
push	esi
push	ebx
sub	esp, 10h
mov	ebx, [ebp+name]
mov	eax, [ebx+0Ch]
lea	eax, ds:4[eax*4]
mov	[esp+4], eax	
mov	eax, [ebx]
mov	[esp], eax	
call	_silc_realloc
mov	[ebx], eax
mov	eax, [ebx+0Ch]
lea	eax, ds:4[eax*4]
mov	[esp+4], eax	
mov	eax, [ebx+4]
mov	[esp], eax	
call	_silc_realloc
mov	[ebx+4], eax
mov	eax, [ebx+0Ch]
lea	eax, ds:4[eax*4]
mov	[esp+4], eax	
mov	eax, [ebx+8]
mov	[esp], eax	
call	_silc_realloc
mov	[ebx+8], eax
mov	edx, [ebx]
test	edx, edx
jz	short loc_64237A3E
mov	ecx, [name_0+4]
test	ecx, ecx
jz	short loc_64237A3E
test	eax, eax
jz	short loc_64237A3E
mov	eax, [name_0+0Ch]
lea	esi, [edx+eax*4]
mov	eax, [ebp+short_name]
mov	[esp], eax	
call	_strdup
mov	[esi], eax
mov	esi, [name_0+0Ch]
shl	esi, 2
add	esi, [name_0+4]
mov	eax, [ebp+long_name]
mov	[esp], eax	
call	_strdup
mov	[esi], eax
mov	edx, [name_0+0Ch]
mov	eax, [name_0+8]
mov	ecx, [ebp+attrs]
mov	[eax+edx*4], ecx
inc	dword ptr [name_0+0Ch]
			
add	esp, 10h
pop	name_0
pop	esi
leave
retn
align 4
public _silc_sftp_packet_encode_vp
			
push	ebp
mov	ebp, esp
push	edi
push	esi
push	ebx
sub	esp, 4Ch
mov	ebx, [ebp+packet_buf]
mov	edi, [ebp+len]
test	ebx, ebx
jz	loc_64237B58
mov	eax, [packet_buf_0+0Ch]
mov	edx, [packet_buf_0]
mov	[ebp+ptr], edx
lea	esi, [len_0+5]
mov	ecx, eax
sub	ecx, edx
cmp	esi, ecx
ja	short loc_64237AF0
mov	edx, [packet_buf_0+8]
mov	byte ptr [ebp+dyn], 0
			
sub	eax, edx
cmp	eax, esi
jb	short loc_64237A85
lea	esi, [edx+esi]
mov	[buffer+8], esi
mov	dword ptr [esp+14h], 1Dh
mov	eax, [ebp+packet]
mov	[esp+10h], eax
mov	dword ptr [esp+0Ch], 1
mov	[esp+8], len_0
mov	dword ptr [esp+4], 5
mov	[esp], buffer	
call	_silc_buffer_format
mov	edx, [buffer+4]
mov	eax, [buffer+8]
sub	eax, edx
cmp	eax, 4
jbe	short loc_64237AC3
add	edx, 5
mov	[buffer+4], edx
mov	eax, [ebp+vp]
mov	[esp+4], eax	
mov	[esp], buffer	
call	_silc_buffer_format_vp
test	eax, eax
js	short loc_64237B3C
mov	ret, [buffer+4]
sub	eax, 5
cmp	eax, [buffer]
jb	short loc_64237AE3
mov	[buffer+4], eax
			
mov	ret, buffer
add	esp, 4Ch
pop	buffer
pop	esi
pop	len_0
leave
retn
align 10h
mov	ecx, [packet_buf_0+4]
mov	[ebp+var_2C], ecx
mov	eax, [packet_buf_0+8]
mov	[ebp+dyn], eax
mov	[esp+4], esi	
mov	edx, [ebp+ptr]
mov	[esp], edx	
call	_silc_realloc
test	eax, eax
jz	short loc_64237B38
mov	[packet_buf_0],	eax
mov	ecx, [ebp+var_2C]
sub	ecx, [ebp+ptr]
lea	edx, [eax+ecx]
mov	[packet_buf_0+4], edx
mov	ecx, [ebp+dyn]
sub	ecx, [ebp+var_2C]
add	edx, ecx
mov	[packet_buf_0+8], edx
add	eax, esi
mov	[packet_buf_0+0Ch], eax
mov	byte ptr [ebp+dyn], 0
jmp	loc_64237A79
align 4
			
xor	buffer,	buffer
jmp	short loc_64237AE3
cmp	byte ptr [ebp+dyn], 0
jz	short loc_64237B38
mov	ret, [buffer]
mov	[esp], eax	
call	_silc_free
mov	[esp], buffer	
call	_silc_free
xor	buffer,	buffer
jmp	short loc_64237AE3
lea	esi, [len_0+5]
mov	eax, esi	
call	_silc_buffer_alloc_7
mov	packet_buf_0, eax
test	eax, eax
jz	loc_64237AE3
mov	buffer,	[buffer+0Ch]
mov	edx, [buffer+8]
mov	byte ptr [ebp+dyn], 1
jmp	loc_64237A79
align 4
public _silc_sftp_packet_encode
push	ebp
mov	ebp, esp
sub	esp, 18h
lea	buffer,	[ebp+vp]
mov	[esp+0Ch], buffer 
mov	buffer,	[ebp+len]
mov	[esp+8], buffer	
mov	buffer,	[ebp+packet_buf]
mov	[esp+4], buffer	
mov	buffer,	[ebp+packet]
mov	[esp], buffer	
call	_silc_sftp_packet_encode_vp
leave
retn
public _silc_sftp_attr_free
			
push	ebp
mov	ebp, esp
push	edi
push	esi
push	ebx
sub	esp, 2Ch
mov	edi, [ebp+attr]
mov	ebx, [edi+24h]
test	ebx, ebx
jz	short loc_64237C05
xor	eax, eax
xor	ebx, ebx
nop
shl	eax, 2
mov	edx, [attr_0+28h]
mov	esi, [edx+eax]
test	esi, esi
jz	short loc_64237BE1
mov	edx, [esi]
mov	[esp], edx	
mov	[ebp+var_1C], eax
call	_silc_free
mov	[esp], esi	
call	_silc_free
mov	eax, [ebp+var_1C]
mov	edx, [attr_0+2Ch]
mov	esi, [edx+eax]
test	esi, esi
jz	short loc_64237BFD
mov	eax, [esi]
mov	[esp], eax	
call	_silc_free
mov	[esp], esi	
call	_silc_free
inc	i
mov	eax, i
cmp	[attr_0+24h], i
ja	short loc_64237BBC
mov	eax, [attr_0+28h]
mov	[esp], eax	
call	_silc_free
mov	eax, [attr_0+2Ch]
mov	[esp], eax	
call	_silc_free
mov	[ebp+attr], attr_0
add	esp, 2Ch
pop	i
pop	esi
pop	attr_0
leave
jmp	_silc_free
align 4
public _silc_sftp_name_free
			
push	ebp
mov	ebp, esp
push	edi
push	esi
push	ebx
sub	esp, 1Ch
mov	ebx, [ebp+name]
mov	esi, [ebx+0Ch]
test	esi, esi
jz	short loc_64237C78
xor	edi, edi
xor	esi, esi
nop
shl	edi, 2
mov	eax, [name_0]
mov	eax, [eax+edi]
mov	[esp], eax	
call	_silc_free
mov	eax, [name_0+4]
mov	eax, [eax+edi]
mov	[esp], eax	
call	_silc_free
mov	eax, [name_0+8]
mov	eax, [eax+edi]
mov	[esp], eax	
call	_silc_sftp_attr_free
inc	i
mov	edi, i
cmp	[name_0+0Ch], i
ja	short loc_64237C44
mov	eax, [name_0]
mov	[esp], eax	
call	_silc_free
mov	eax, [name_0+4]
mov	[esp], eax	
call	_silc_free
mov	eax, [name_0+8]
mov	[esp], eax	
call	_silc_free
mov	[ebp+name], name_0
add	esp, 1Ch
pop	name_0
pop	i
pop	edi
leave
jmp	_silc_free
align 4
public _silc_sftp_attr_encode
			
push	ebp
mov	ebp, esp
push	edi
push	esi
push	ebx
sub	esp, 5Ch
mov	esi, [ebp+attr]
mov	eax, [esi]
mov	edx, eax
and	edx, 1
cmp	edx, 1
sbb	ebx, ebx
and	len, 0FFFFFFF8h
add	len, 0Ch
test	al, 2
jz	short loc_64237CCD
add	len, 8
test	al, 4
jz	short loc_64237CD4
add	len, 4
test	al, 8
jz	short loc_64237CDB
add	len, 8
test	eax, eax
js	loc_64237DA0
			
mov	dword ptr [esp+4], 10h
mov	dword ptr [esp], 1 
call	_silc_calloc
mov	edi, eax
test	eax, eax
jz	loc_64237D96
test	len, len
jz	loc_64237FE0
mov	dword ptr [esp+4], 1 
mov	[esp], len	
call	_silc_calloc
mov	[buffer], eax
test	eax, eax
jz	loc_64237FE8
mov	[buffer+4], eax
mov	[buffer+8], eax
lea	edx, [eax+len]
mov	[buffer+0Ch], edx
mov	ecx, edx
sub	ecx, eax
cmp	len, ecx
ja	short loc_64237D3A
mov	[buffer+8], edx
mov	dword ptr [esp+0Ch], 1Dh
mov	eax, [attr_0]
mov	[esp+8], eax
mov	dword ptr [esp+4], 5
mov	[esp], buffer	
call	_silc_buffer_format
mov	edx, [buffer+4]
mov	eax, [buffer+8]
sub	eax, edx
cmp	eax, 3
jbe	short loc_64237D6B
add	edx, 4
mov	[buffer+4], edx
mov	eax, [attr_0]
test	al, 1
jnz	loc_64237FA0
test	al, 2
jnz	loc_64237F58
test	al, 4
jnz	loc_64237F1C
test	al, 8
jnz	short loc_64237DF8
test	eax, eax
js	loc_64237E43
			
mov	eax, [buffer]
mov	[buffer+4], eax
			
mov	eax, buffer
add	esp, 5Ch
pop	len
pop	attr_0
pop	buffer
leave
retn
add	len, 4
mov	eax, [attr_0+24h]
mov	[ebp+var_1C], eax
test	eax, eax
jz	loc_64237CE3
mov	edi, [attr_0+28h]
mov	edx, [attr_0+2Ch]
mov	[ebp+var_20], edx
xor	ecx, ecx
xor	eax, eax
mov	[ebp+var_2C], edi
mov	[ebp+var_24], attr_0
shl	ecx, 2
mov	attr_0,	[ebp+var_2C]
mov	edx, [esi+ecx]
mov	edi, [ebp+var_20]
mov	esi, [edi+ecx]
mov	ecx, [edx+8]
sub	ecx, [edx+4]
mov	edx, [esi+8]
sub	edx, [esi+4]
lea	edx, [ecx+edx+8]
add	ebx, len
inc	i
mov	ecx, i
cmp	i, [ebp+var_1C]
jnz	short loc_64237DC4
mov	esi, [ebp+var_24]
jmp	loc_64237CE3
align 4
mov	dword ptr [esp+14h], 1Dh
mov	eax, [attr_0+20h]
mov	[esp+10h], eax
mov	dword ptr [esp+0Ch], 5
mov	eax, [attr_0+1Ch]
mov	[esp+8], eax
mov	dword ptr [esp+4], 5
mov	[esp], buffer	
call	_silc_buffer_format
mov	edx, [buffer+4]
mov	eax, [buffer+8]
sub	eax, edx
cmp	eax, 7
jbe	short loc_64237E39
add	edx, 8
mov	[buffer+4], edx
mov	eax, [attr_0]
test	eax, eax
jns	loc_64237D91
mov	dword ptr [esp+0Ch], 1Dh
mov	eax, [attr_0+24h]
mov	[esp+8], eax
mov	dword ptr [esp+4], 5
mov	[esp], buffer	
call	_silc_buffer_format
mov	edx, [buffer+4]
mov	eax, [buffer+8]
sub	eax, edx
cmp	eax, 3
jbe	short loc_64237E75
add	edx, 4
mov	[buffer+4], edx
mov	eax, [attr_0+24h]
test	eax, eax
jz	loc_64237D91
xor	eax, eax
mov	[ebp+var_1C], 0
lea	attr_0,	[attr_0+0]
shl	eax, 2
mov	edx, [attr_0+2Ch]
mov	edx, [edx+eax]
mov	len, [edx+4]
mov	edx, [edx+8]
sub	edx, ebx
mov	ecx, [attr_0+28h]
mov	eax, [ecx+eax]
mov	ecx, [eax+4]
mov	eax, [eax+8]
sub	eax, ecx
mov	dword ptr [esp+2Ch], 1Dh
mov	[esp+28h], edx
mov	[esp+24h], ebx
mov	dword ptr [esp+20h], 0Ch
mov	[esp+1Ch], edx
mov	dword ptr [esp+18h], 5
mov	[esp+14h], eax
mov	[esp+10h], ecx
mov	dword ptr [esp+0Ch], 0Ch
mov	[esp+8], eax
mov	dword ptr [esp+4], 5
mov	[esp], buffer	
call	_silc_buffer_format
mov	ecx, [buffer+4]
mov	edx, [buffer+8]
sub	edx, ecx
cmp	eax, edx
ja	short loc_64237F05
lea	ret, [ecx+ret]
mov	[buffer+4], eax
inc	[ebp+var_1C]
mov	ret, [ebp+var_1C]
cmp	[attr_0+24h], eax
ja	loc_64237E8C
jmp	loc_64237D91
align 4
mov	dword ptr [esp+0Ch], 1Dh
mov	eax, [attr_0+18h]
mov	[esp+8], eax
mov	dword ptr [esp+4], 5
mov	[esp], buffer	
call	_silc_buffer_format
mov	edx, [buffer+4]
mov	eax, [buffer+8]
sub	eax, edx
cmp	eax, 3
jbe	short loc_64237F4E
add	edx, 4
mov	[buffer+4], edx
mov	eax, [attr_0]
jmp	loc_64237D85
align 4
mov	dword ptr [esp+14h], 1Dh
mov	eax, [attr_0+14h]
mov	[esp+10h], eax
mov	dword ptr [esp+0Ch], 5
mov	eax, [attr_0+10h]
mov	[esp+8], eax
mov	dword ptr [esp+4], 5
mov	[esp], buffer	
call	_silc_buffer_format
mov	edx, [buffer+4]
mov	eax, [buffer+8]
sub	eax, edx
cmp	eax, 7
jbe	short loc_64237F99
add	edx, 8
mov	[buffer+4], edx
mov	eax, [attr_0]
jmp	loc_64237D7D
mov	dword ptr [esp+10h], 1Dh
mov	eax, [attr_0+8]
mov	edx, [attr_0+0Ch]
mov	[esp+8], eax
mov	[esp+0Ch], edx
mov	dword ptr [esp+4], 7
mov	[esp], buffer	
call	_silc_buffer_format
mov	edx, [buffer+4]
mov	eax, [buffer+8]
sub	eax, edx
cmp	eax, 7
jbe	short loc_64237FD9
add	edx, 8
mov	[buffer+4], edx
mov	eax, [attr_0]
jmp	loc_64237D75
mov	edx, [buffer+8]
jmp	loc_64237D37
xor	buffer,	buffer
jmp	loc_64237D96
align 10h
public _silc_sftp_name_encode
push	ebp
mov	ebp, esp
push	edi
push	esi
push	ebx
sub	esp, 6Ch
mov	ebx, [ebp+name]
mov	dword ptr [esp+4], 4 
mov	eax, [ebx+0Ch]
mov	[esp], eax	
call	_silc_calloc
mov	[ebp+attr_buf],	eax
test	eax, eax
jz	short loc_64238094
mov	ecx, [name_0+0Ch]
test	ecx, ecx
jz	loc_6423821D
xor	esi, esi
mov	[ebp+items], 4
xor	edx, edx
jmp	short loc_6423804B
align 10h
mov	ecx, [eax+8]
sub	ecx, [eax+4]
mov	eax, [ebp+var_20]
lea	ecx, [eax+ecx+8]
lea	edi, [ecx+edi]
add	[ebp+items], edi
inc	edx
mov	esi, i
cmp	[name_0+0Ch], i
jbe	short loc_642380A0
shl	esi, 2
mov	eax, [name_0]
mov	edi, [eax+esi]
mov	ecx, 0FFFFFFFFh
xor	eax, eax
repne scasb
not	ecx
dec	ecx
mov	[ebp+var_20], ecx
mov	eax, [name_0+4]
mov	edi, [eax+esi]
mov	ecx, 0FFFFFFFFh
xor	eax, eax
repne scasb
not	ecx
lea	edi, [ecx-1]
mov	eax, [name_0+8]
mov	eax, [eax+esi]
mov	[esp], eax	
mov	[ebp+var_38], i
call	_silc_sftp_attr_encode
mov	ecx, [ebp+attr_buf]
mov	[ecx+esi], eax
test	eax, eax
mov	edx, [ebp+var_38]
jnz	short loc_64238030
			
xor	buffer,	buffer
mov	eax, buffer
add	esp, 6Ch
pop	name_0
pop	buffer
pop	edi
leave
retn
mov	edi, [ebp+items]
mov	dword ptr [esp+4], 10h 
mov	dword ptr [esp], 1 
call	_silc_calloc
mov	esi, eax
test	eax, eax
jz	short loc_64238096
test	edi, edi
jz	loc_64238227
mov	dword ptr [esp+4], 1 
mov	[esp], edi	
call	_silc_calloc
mov	[buffer], eax
test	eax, eax
jz	short loc_64238094
mov	[buffer+4], eax
mov	[buffer+8], eax
add	eax, edi
mov	[buffer+0Ch], eax
mov	[buffer+8], eax
mov	dword ptr [esp+0Ch], 1Dh
mov	eax, [name_0+0Ch]
mov	[esp+8], eax
mov	dword ptr [esp+4], 5
mov	[esp], buffer	
call	_silc_buffer_format
mov	edx, [buffer+4]
mov	eax, [buffer+8]
sub	eax, edx
cmp	eax, 3
jbe	short loc_6423811B
add	edx, 4
mov	[buffer+4], edx
mov	edx, [name_0+0Ch]
test	edx, edx
jz	loc_64238203
xor	edx, edx
mov	[ebp+items], 0
nop
shl	edx, 2
mov	ecx, [ebp+attr_buf]
add	ecx, edx
mov	[ebp+var_28], ecx
mov	edi, [ecx]
mov	[ebp+var_30], edi
mov	eax, [edi+4]
mov	[ebp+var_2C], eax
mov	eax, [name_0+4]
mov	eax, [eax+edx]
mov	[ebp+var_20], eax
mov	ecx, 0FFFFFFFFh
mov	edi, eax
xor	eax, eax
repne scasb
not	ecx
dec	ecx
mov	[ebp+var_34], ecx
mov	eax, [name_0]
mov	edx, [eax+edx]
mov	ecx, 0FFFFFFFFh
mov	edi, edx
xor	eax, eax
repne scasb
not	ecx
dec	ecx
mov	dword ptr [esp+30h], 1Dh
mov	edi, [ebp+var_30]
mov	eax, [edi+8]
sub	eax, [ebp+var_2C]
mov	[esp+2Ch], eax
mov	eax, [ebp+var_2C]
mov	[esp+28h], eax
mov	dword ptr [esp+24h], 0Ch
mov	edi, [ebp+var_20]
mov	[esp+20h], edi
mov	dword ptr [esp+1Ch], 0Ah
mov	eax, [ebp+var_34]
mov	[esp+18h], eax
mov	dword ptr [esp+14h], 5
mov	[esp+10h], edx
mov	dword ptr [esp+0Ch], 0Ah
mov	[esp+8], ecx
mov	dword ptr [esp+4], 5
mov	[esp], buffer	
call	_silc_buffer_format
mov	ecx, [buffer+4]
mov	edx, [buffer+8]
sub	edx, ecx
cmp	eax, edx
ja	short loc_642381E7
lea	len, [ecx+len]
mov	[buffer+4], eax
mov	edx, [ebp+var_28]
mov	len, [edx]
mov	[esp], eax	
call	_silc_free
inc	[ebp+items]
mov	edx, [ebp+items]
cmp	edx, [name_0+0Ch]
jb	loc_64238130
mov	ecx, [ebp+attr_buf]
mov	[esp], ecx	
call	_silc_free
mov	eax, [buffer]
mov	[buffer+4], eax
mov	eax, buffer
add	esp, 6Ch
pop	name_0
pop	buffer
pop	edi
leave
retn
mov	edi, 4
jmp	loc_642380A3
mov	buffer,	[buffer+0Ch]
jmp	loc_642380E6
align 10h
public _silc_sftp_attr_decode
			
push	ebp
mov	ebp, esp
push	edi
push	esi
push	ebx
sub	esp, 4Ch
mov	dword ptr [esp+4], 30h 
mov	dword ptr [esp], 1 
call	_silc_calloc
mov	ebx, eax
test	eax, eax
jz	short loc_642382B2
mov	dword ptr [esp+0Ch], 1Dh
mov	[esp+8], attr
mov	dword ptr [esp+4], 5
mov	attr, [ebp+buffer]
mov	[esp], eax	
call	_silc_buffer_unformat
test	eax, eax
js	out
mov	ecx, [ebp+buffer]
mov	edx, [ecx+4]
mov	eax, [ecx+8]
sub	eax, edx
cmp	eax, 3
jbe	short loc_64238290
add	edx, 4
mov	[ecx+4], edx
mov	eax, [attr]
test	al, 1
jnz	short loc_642382BC
test	al, 2
jnz	short loc_64238302
test	al, 4
jnz	loc_6423835E
test	al, 8
jnz	loc_642383A8
test	eax, eax
js	loc_64238404
			
mov	eax, attr
add	esp, 4Ch
pop	attr
pop	esi
pop	edi
leave
retn
mov	dword ptr [esp+0Ch], 1Dh
lea	eax, [attr+8]
mov	[esp+8], eax
mov	dword ptr [esp+4], 7
mov	esi, [ebp+buffer]
mov	[esp], esi	
call	_silc_buffer_unformat
test	eax, eax
js	out
mov	edx, [esi+4]
mov	eax, [esi+8]
sub	eax, edx
cmp	eax, 7
jbe	short loc_642382FC
add	edx, 8
mov	edi, [ebp+buffer]
mov	[edi+4], edx
mov	eax, [attr]
test	al, 2
jz	short loc_6423829A
mov	dword ptr [esp+14h], 1Dh
lea	eax, [attr+14h]
mov	[esp+10h], eax
mov	dword ptr [esp+0Ch], 5
lea	eax, [attr+10h]
mov	[esp+8], eax
mov	dword ptr [esp+4], 5
mov	eax, [ebp+buffer]
mov	[esp], eax	
call	_silc_buffer_unformat
test	eax, eax
js	out
mov	ecx, [ebp+buffer]
mov	edx, [ecx+4]
mov	eax, [ecx+8]
sub	eax, edx
cmp	eax, 7
jbe	short loc_64238354
add	edx, 8
mov	esi, [ebp+buffer]
mov	[esi+4], edx
mov	eax, [attr]
test	al, 4
jz	loc_642382A2
mov	dword ptr [esp+0Ch], 1Dh
lea	eax, [attr+18h]
mov	[esp+8], eax
mov	dword ptr [esp+4], 5
mov	edi, [ebp+buffer]
mov	[esp], edi	
call	_silc_buffer_unformat
test	eax, eax
js	out
mov	edx, [edi+4]
mov	eax, [edi+8]
sub	eax, edx
cmp	eax, 3
jbe	short loc_6423839E
add	edx, 4
mov	eax, [ebp+buffer]
mov	[eax+4], edx
mov	eax, [attr]
test	al, 8
jz	loc_642382AA
mov	dword ptr [esp+14h], 1Dh
lea	eax, [attr+20h]
mov	[esp+10h], eax
mov	dword ptr [esp+0Ch], 5
lea	eax, [attr+1Ch]
mov	[esp+8], eax
mov	dword ptr [esp+4], 5
mov	edx, [ebp+buffer]
mov	[esp], edx	
call	_silc_buffer_unformat
test	eax, eax
js	out
mov	ecx, [ebp+buffer]
mov	edx, [ecx+4]
mov	eax, [ecx+8]
sub	eax, edx
cmp	eax, 7
jbe	short loc_642383FA
add	edx, 8
mov	esi, [ebp+buffer]
mov	[esi+4], edx
mov	eax, [attr]
test	eax, eax
jns	loc_642382B2
mov	dword ptr [esp+0Ch], 1Dh
lea	eax, [attr+24h]
mov	[esp+8], eax
mov	dword ptr [esp+4], 5
mov	edi, [ebp+buffer]
mov	[esp], edi	
call	_silc_buffer_unformat
test	eax, eax
js	out
mov	edx, [edi+4]
mov	eax, [edi+8]
sub	eax, edx
cmp	eax, 3
jbe	short loc_64238441
add	edx, 4
mov	[edi+4], edx
mov	dword ptr [esp+4], 4 
mov	eax, [attr+24h]
mov	[esp], eax	
call	_silc_calloc
mov	[attr+28h], eax
mov	dword ptr [esp+4], 4 
mov	eax, [attr+24h]
mov	[esp], eax	
call	_silc_calloc
mov	[attr+2Ch], eax
mov	edi, [attr+28h]
test	edi, edi
jnz	short loc_6423847C
			
xor	attr, attr
jmp	loc_642382B2
align 4
test	eax, eax
jz	short loc_64238474
mov	esi, [attr+24h]
test	esi, esi
jz	loc_642382B2
xor	esi, esi
mov	[ebp+i], 0
jmp	loc_642385D0
align 4
mov	edx, [attr+28h]
mov	[ebp+var_2C], edx
shl	esi, 2
mov	[ebp+var_30], esi
mov	edi, [ebp+tmp_len]
mov	dword ptr [esp+4], 10h 
mov	dword ptr [esp], 1 
call	_silc_calloc
mov	esi, eax
test	eax, eax
jz	short loc_642384EF
test	edi, edi
jz	short loc_642384EF
mov	dword ptr [esp+4], 1 
mov	[esp], edi	
call	_silc_calloc
mov	[esi], eax
test	eax, eax
jz	loc_64238627
mov	[esi+4], eax
mov	[esi+8], eax
lea	edi, [eax+edi]
mov	[esi+0Ch], edi
			
mov	edi, [ebp+var_2C]
mov	ecx, [ebp+var_30]
mov	[edi+ecx], esi
mov	eax, [attr+2Ch]
mov	[ebp+var_2C], eax
mov	edi, [ebp+tmp2_len]
mov	dword ptr [esp+4], 10h 
mov	dword ptr [esp], 1 
call	_silc_calloc
mov	esi, eax
test	eax, eax
jz	short loc_64238545
test	edi, edi
jz	short loc_64238545
mov	dword ptr [esp+4], 1 
mov	[esp], edi	
call	_silc_calloc
mov	[esi], eax
test	eax, eax
jz	loc_6423862E
mov	[esi+4], eax
mov	[esi+8], eax
lea	edi, [eax+edi]
mov	[esi+0Ch], edi
			
mov	ecx, [ebp+var_2C]
mov	edx, [ebp+var_30]
mov	[ecx+edx], esi
mov	eax, [attr+28h]
mov	esi, edx
mov	edx, [eax+edx]
test	edx, edx
jz	loc_64238474
mov	eax, [attr+2Ch]
mov	eax, [eax+esi]
test	eax, eax
jz	loc_64238474
mov	ecx, [ebp+tmp_len]
mov	esi, [ebp+tmp]
mov	edi, [edx+4]
mov	[ebp+var_2C], edi
mov	edx, [edx+8]
sub	edx, edi
cmp	ecx, edx
ja	short loc_6423858C
rep movsb
mov	eax, [attr+2Ch]
mov	edx, [ebp+var_30]
mov	eax, [eax+edx]
mov	ecx, [ebp+tmp2_len]
mov	esi, [ebp+tmp2]
mov	edx, [eax+4]
mov	eax, [eax+8]
sub	eax, edx
cmp	ecx, eax
ja	short loc_642385A5
mov	edi, edx
rep movsb
mov	ecx, [ebp+tmp2_len]
mov	eax, [ebp+tmp_len]
lea	edx, [ecx+eax+8]
mov	esi, [ebp+buffer]
mov	ecx, [esi+4]
mov	eax, [esi+8]
sub	eax, ecx
cmp	edx, eax
ja	short loc_642385C1
lea	edx, [ecx+edx]
mov	[esi+4], edx
inc	[ebp+i]
mov	esi, [ebp+i]
cmp	[attr+24h], esi
jbe	loc_642382B2
mov	dword ptr [esp+1Ch], 1Dh
lea	eax, [ebp+tmp2_len]
mov	[esp+18h], eax
lea	edx, [ebp+tmp2]
mov	[esp+14h], edx
mov	dword ptr [esp+10h], 0Fh
lea	ecx, [ebp+tmp_len]
mov	[esp+0Ch], ecx
lea	edi, [ebp+tmp]
mov	[esp+8], edi
mov	dword ptr [esp+4], 0Fh
mov	eax, [ebp+buffer]
mov	[esp], eax	
call	_silc_buffer_unformat
test	eax, eax
jns	loc_6423849C
nop
			
mov	[esp], attr	
call	_silc_sftp_attr_free
xor	attr, attr
jmp	loc_642382B2
xor	esi, esi
jmp	loc_642384EF
xor	esi, esi
jmp	loc_64238545
align 4
public _silc_sftp_name_decode
push	ebp
mov	ebp, esp
push	edi
push	esi
push	ebx
sub	esp, 3Ch
mov	ebx, [ebp+buffer]
mov	dword ptr [esp+4], 10h 
mov	dword ptr [esp], 1 
call	_silc_calloc
mov	esi, eax
test	eax, eax
jz	loc_6423875C
mov	dword ptr [esp+4], 4 
mov	name, [ebp+count]
mov	[esp], eax	
call	_silc_calloc
mov	[name],	eax
mov	dword ptr [esp+4], 4 
mov	edx, [ebp+count]
mov	[esp], edx	
call	_silc_calloc
mov	[name+4], eax
mov	dword ptr [esp+4], 4 
mov	eax, [ebp+count]
mov	[esp], eax	
call	_silc_calloc
mov	[name+8], eax
mov	ecx, [name]
test	ecx, ecx
jz	loc_64238752
mov	edx, [name+4]
test	edx, edx
jz	loc_64238752
test	eax, eax
jz	loc_64238752
mov	edx, [ebp+count]
mov	[name+0Ch], edx
test	edx, edx
jz	loc_6423875C
xor	edi, edi
mov	[ebp+i], 0
jmp	short loc_6423871A
align 4
mov	ecx, [buffer_0+4]
mov	edx, [buffer_0+8]
sub	edx, ecx
cmp	ret, edx
ja	short loc_642386EE
lea	ret, [ecx+ret]
mov	[buffer_0+4], eax
mov	ret, [name+8]
add	eax, edi
mov	[ebp+var_20], eax
mov	[esp], buffer_0	
call	_silc_sftp_attr_decode
mov	edx, [ebp+var_20]
mov	[edx], eax
mov	eax, [name+8]
mov	eax, [eax+edi]
test	eax, eax
jz	short loc_64238752
inc	[ebp+i]
mov	edi, [ebp+i]
mov	eax, [ebp+count]
cmp	edi, eax
jnb	short loc_6423875C
shl	edi, 2
mov	dword ptr [esp+14h], 1Dh
mov	eax, [name+4]
add	eax, edi
mov	[esp+10h], eax
mov	dword ptr [esp+0Ch], 12h
mov	eax, [name]
add	eax, edi
mov	[esp+8], eax
mov	dword ptr [esp+4], 12h
mov	[esp], buffer_0	
call	_silc_buffer_unformat
test	eax, eax
jns	short loc_642386DC
			
mov	[esp], name	
call	_silc_sftp_name_free
xor	name, name
			
mov	eax, name
add	esp, 3Ch
pop	buffer_0
pop	name
pop	edi
leave
retn
align 4
public _silc_vcard_fprintf
push	ebp
mov	ebp, esp
push	edi
push	esi
push	ebx
sub	esp, 6Ch
mov	ebx, [ebp+vcard]
mov	esi, [ebp+stream]
mov	[esp+0Ch], esi	
mov	dword ptr [esp+8], 0Ch 
mov	dword ptr [esp+4], 1 
mov	dword ptr [esp], offset	aBeginVcard 
call	_fwrite
mov	[esp+0Ch], esi	
mov	dword ptr [esp+8], 0Ch 
mov	dword ptr [esp+4], 1 
mov	dword ptr [esp], offset	aVersion3_0 
call	_fwrite
mov	eax, [ebx]
test	eax, eax
jz	short loc_642387D1
mov	[esp+8], eax
mov	dword ptr [esp+4], offset aFnS 
mov	[esp], stream_0	
call	_fprintf
mov	eax, [vcard_0+4]
test	eax, eax
jz	short loc_64238834
mov	edi, [vcard_0+14h]
test	edi, edi
jz	loc_64238B8C
mov	ecx, [vcard_0+10h]
test	ecx, ecx
jz	loc_64238B9C
mov	edx, [vcard_0+0Ch]
mov	[ebp+var_20], edx
test	edx, edx
jz	loc_64238BB0
mov	edx, [vcard_0+8]
mov	[ebp+var_1C], edx
test	edx, edx
jz	loc_64238BC8
			
mov	[esp+18h], edi
mov	[esp+14h], ecx
mov	edx, [ebp+var_20]
mov	[esp+10h], edx
mov	edx, [ebp+var_1C]
mov	[esp+0Ch], edx
mov	[esp+8], eax
mov	dword ptr [esp+4], offset aNSSSSS 
mov	[esp], stream_0	
call	_fprintf
mov	eax, [vcard_0+18h]
test	eax, eax
jz	short loc_6423884F
mov	[esp+8], eax
mov	dword ptr [esp+4], offset aNicknameS 
mov	[esp], stream_0	
call	_fprintf
mov	eax, [vcard_0+1Ch]
test	eax, eax
jz	short loc_6423886A
mov	[esp+8], eax
mov	dword ptr [esp+4], offset aBdayS 
mov	[esp], stream_0	
call	_fprintf
mov	eax, [vcard_0+20h]
test	eax, eax
jz	short loc_64238885
mov	[esp+8], eax
mov	dword ptr [esp+4], offset aTitleS 
mov	[esp], stream_0	
call	_fprintf
mov	eax, [vcard_0+24h]
test	eax, eax
jz	short loc_642388A0
mov	[esp+8], eax
mov	dword ptr [esp+4], offset aRoleS 
mov	[esp], stream_0	
call	_fprintf
mov	eax, [vcard_0+28h]
test	eax, eax
jz	short loc_642388CA
mov	edx, [vcard_0+2Ch]
test	edx, edx
jz	loc_64238BD4
mov	[esp+0Ch], edx
mov	[esp+8], eax
mov	dword ptr [esp+4], offset aOrgSS 
mov	[esp], stream_0	
call	_fprintf
mov	eax, [vcard_0+30h]
test	eax, eax
jz	short loc_642388E5
mov	[esp+8], eax
mov	dword ptr [esp+4], offset aCategoriesS 
mov	[esp], stream_0	
call	_fprintf
mov	eax, [vcard_0+34h]
test	eax, eax
jz	short loc_64238900
mov	[esp+8], eax
mov	dword ptr [esp+4], offset aClassS 
mov	[esp], stream_0	
call	_fprintf
mov	eax, [vcard_0+38h]
test	eax, eax
jz	short loc_6423891B
mov	[esp+8], eax
mov	dword ptr [esp+4], offset aUrlS	
mov	[esp], stream_0	
call	_fprintf
mov	eax, [vcard_0+3Ch]
test	eax, eax
jz	short loc_64238936
mov	[esp+8], eax
mov	dword ptr [esp+4], offset aLabelS 
mov	[esp], stream_0	
call	_fprintf
cmp	byte ptr [vcard_0+44h],	0
jz	loc_64238A95
mov	[ebp+var_28], 0
mov	[ebp+var_24], 0
mov	[ebp+var_2C], vcard_0
mov	[ebp+var_30], stream_0
jmp	loc_642389FC
align 4
mov	edx, [eax+18h]
mov	[ebp+var_3C], edx
test	edx, edx
jz	loc_64238A24
mov	vcard_0, [eax+14h]
test	ebx, ebx
jz	loc_64238A38
mov	ecx, [eax+10h]
test	ecx, ecx
jz	loc_64238A48
mov	edx, [eax+0Ch]
test	edx, edx
jz	loc_64238A58
mov	esi, [eax+8]
mov	[ebp+var_20], esi
test	esi, esi
jz	loc_64238A6C
mov	esi, [eax+4]
mov	[ebp+var_1C], esi
test	esi, esi
jz	loc_64238A84
			
mov	[esp+24h], edi
mov	esi, [ebp+var_3C]
mov	[esp+20h], esi
mov	[esp+1Ch], ebx
mov	[esp+18h], ecx
mov	[esp+14h], edx
mov	edx, [ebp+var_20]
mov	[esp+10h], edx
mov	esi, [ebp+var_1C]
mov	[esp+0Ch], esi
mov	eax, [eax]
mov	[esp+8], eax
mov	dword ptr [esp+4], offset aAdrTypeSSSSSSS 
mov	eax, [ebp+var_30]
mov	[esp], eax	
call	_fprintf
inc	[ebp+var_24]
add	[ebp+var_28], 20h
mov	edx, [ebp+var_2C]
movzx	eax, byte ptr [edx+44h]
cmp	eax, [ebp+var_24]
jle	loc_64238A90
mov	eax, [ebp+var_28]
mov	esi, [ebp+var_2C]
add	eax, [esi+40h]
mov	edi, [eax+1Ch]
test	edi, edi
jnz	loc_6423895C
mov	edi, offset byte_6426F921
mov	edx, [eax+18h]
mov	[ebp+var_3C], edx
test	edx, edx
jnz	loc_6423896A
nop
mov	[ebp+var_3C], offset byte_6426F921
mov	vcard_0, [eax+14h]
test	ebx, ebx
jnz	loc_64238975
xchg	ax, ax
mov	ebx, offset byte_6426F921
mov	ecx, [eax+10h]
test	ecx, ecx
jnz	loc_64238980
mov	ecx, offset byte_6426F921
mov	edx, [eax+0Ch]
test	edx, edx
jnz	loc_6423898B
mov	edx, offset byte_6426F921
mov	esi, [eax+8]
mov	[ebp+var_20], esi
test	esi, esi
jnz	loc_64238999
nop
mov	[ebp+var_20], offset byte_6426F921
mov	esi, [eax+4]
mov	[ebp+var_1C], esi
test	esi, esi
jnz	loc_642389A7
lea	esi, [esi+0]
mov	[ebp+var_1C], offset byte_6426F921
jmp	loc_642389A7
mov	ebx, edx
mov	esi, [ebp+var_30]
cmp	byte ptr [vcard_0+4Ch],	0
jz	short loc_64238ADC
xor	edi, edi
jmp	short loc_64238AC3
align 10h
			
mov	[esp+0Ch], edx
mov	eax, [eax]
mov	[esp+8], eax
mov	dword ptr [esp+4], offset aTelTypeSS 
mov	[esp], stream_0	
call	_fprintf
inc	i
movzx	eax, byte ptr [vcard_0+4Ch]
cmp	eax, i
jle	short loc_64238ADC
lea	eax, ds:0[i*8]
add	eax, [vcard_0+48h]
mov	edx, [eax+4]
test	edx, edx
jnz	short loc_64238AA0
mov	edx, offset byte_6426F921
jmp	short loc_64238AA0
align 4
			
cmp	byte ptr [vcard_0+54h],	0
jz	short loc_64238B24
xor	i, i
jmp	short loc_64238B0B
align 4
			
mov	[esp+0Ch], edx
mov	eax, [eax]
mov	[esp+8], eax
mov	dword ptr [esp+4], offset aEmailTypeSS 
mov	[esp], stream_0	
call	_fprintf
inc	i
movzx	eax, byte ptr [vcard_0+54h]
cmp	eax, i
jle	short loc_64238B24
lea	eax, ds:0[i*8]
add	eax, [vcard_0+50h]
mov	edx, [eax+4]
test	edx, edx
jnz	short loc_64238AE8
mov	edx, offset byte_6426F921
jmp	short loc_64238AE8
align 4
			
mov	eax, [vcard_0+58h]
test	eax, eax
jz	short loc_64238B3F
mov	[esp+8], eax
mov	dword ptr [esp+4], offset aNoteS 
mov	[esp], stream_0	
call	_fprintf
mov	eax, [vcard_0+5Ch]
test	eax, eax
jz	short loc_64238B5A
mov	[esp+8], eax
mov	dword ptr [esp+4], offset aRevS	
mov	[esp], stream_0	
call	_fprintf
mov	[esp+0Ch], stream_0 
mov	dword ptr [esp+8], 0Ah 
mov	dword ptr [esp+4], 1 
mov	dword ptr [esp], offset	aEndVcard 
call	_fwrite
mov	[ebp+vcard], stream_0
add	esp, 6Ch
pop	vcard_0
pop	stream_0
pop	i
leave
jmp	_fflush
align 4
mov	edi, offset byte_6426F921
mov	ecx, [vcard_0+10h]
test	ecx, ecx
jnz	loc_642387EE
mov	ecx, offset byte_6426F921
mov	edx, [vcard_0+0Ch]
mov	[ebp+var_20], edx
test	edx, edx
jnz	loc_642387FC
nop
mov	[ebp+var_20], offset byte_6426F921
mov	edx, [vcard_0+8]
mov	[ebp+var_1C], edx
test	edx, edx
jnz	loc_6423880A
lea	stream_0, [stream_0+0]
mov	[ebp+var_1C], offset byte_6426F921
jmp	loc_6423880A
mov	edx, offset byte_6426F921
jmp	loc_642388B2
align 10h
public _silc_vcard_free
push	ebp
mov	ebp, esp
push	edi
push	esi
push	ebx
sub	esp, 1Ch
mov	ebx, [ebp+vcard]
mov	eax, [ebx]
mov	[esp], eax	
call	_silc_free
mov	eax, [ebx+4]
mov	[esp], eax	
call	_silc_free
mov	eax, [ebx+8]
mov	[esp], eax	
call	_silc_free
mov	eax, [ebx+0Ch]
mov	[esp], eax	
call	_silc_free
mov	eax, [ebx+10h]
mov	[esp], eax	
call	_silc_free
mov	eax, [ebx+14h]
mov	[esp], eax	
call	_silc_free
mov	eax, [ebx+18h]
mov	[esp], eax	
call	_silc_free
mov	eax, [ebx+1Ch]
mov	[esp], eax	
call	_silc_free
mov	eax, [ebx+20h]
mov	[esp], eax	
call	_silc_free
mov	eax, [ebx+24h]
mov	[esp], eax	
call	_silc_free
mov	eax, [ebx+28h]
mov	[esp], eax	
call	_silc_free
mov	eax, [ebx+2Ch]
mov	[esp], eax	
call	_silc_free
mov	eax, [ebx+30h]
mov	[esp], eax	
call	_silc_free
mov	eax, [ebx+34h]
mov	[esp], eax	
call	_silc_free
mov	eax, [ebx+38h]
mov	[esp], eax	
call	_silc_free
mov	eax, [ebx+3Ch]
mov	[esp], eax	
call	_silc_free
cmp	byte ptr [ebx+44h], 0
jz	loc_64238D33
xor	edi, edi
xor	esi, esi
lea	i, [i+0]
mov	eax, [vcard_0+40h]
mov	eax, [eax+edi]
mov	[esp], eax	
call	_silc_free
mov	eax, [vcard_0+40h]
mov	eax, [eax+edi+4]
mov	[esp], eax	
call	_silc_free
mov	eax, [vcard_0+40h]
mov	eax, [eax+edi+8]
mov	[esp], eax	
call	_silc_free
mov	eax, [vcard_0+40h]
mov	eax, [eax+edi+0Ch]
mov	[esp], eax	
call	_silc_free
mov	eax, [vcard_0+40h]
mov	eax, [eax+edi+10h]
mov	[esp], eax	
call	_silc_free
mov	eax, [vcard_0+40h]
mov	eax, [eax+edi+14h]
mov	[esp], eax	
call	_silc_free
mov	eax, [vcard_0+40h]
mov	eax, [eax+edi+18h]
mov	[esp], eax	
call	_silc_free
mov	eax, [vcard_0+40h]
mov	eax, [eax+edi+1Ch]
mov	[esp], eax	
call	_silc_free
inc	i
add	edi, 20h
movzx	eax, byte ptr [vcard_0+44h]
cmp	eax, i
jg	loc_64238CAC
mov	eax, [vcard_0+40h]
mov	[esp], eax	
call	_silc_free
cmp	byte ptr [vcard_0+4Ch],	0
jz	short loc_64238D75
xor	edi, edi
xchg	ax, ax
lea	esi, ds:0[i*8]
mov	eax, [vcard_0+48h]
mov	eax, [eax+esi]
mov	[esp], eax	
call	_silc_free
mov	eax, [vcard_0+48h]
mov	eax, [eax+esi+4]
mov	[esp], eax	
call	_silc_free
inc	i
movzx	eax, byte ptr [vcard_0+4Ch]
cmp	eax, i
jg	short loc_64238D48
mov	eax, [vcard_0+48h]
mov	[esp], eax	
call	_silc_free
cmp	byte ptr [vcard_0+54h],	0
jz	short loc_64238DB5
xor	i, i
lea	esi, ds:0[i*8]
mov	eax, [vcard_0+50h]
mov	eax, [eax+esi]
mov	[esp], eax	
call	_silc_free
mov	eax, [vcard_0+50h]
mov	eax, [eax+esi+4]
mov	[esp], eax	
call	_silc_free
inc	i
movzx	eax, byte ptr [vcard_0+54h]
cmp	eax, i
jg	short loc_64238D88
mov	eax, [vcard_0+50h]
mov	[esp], eax	
call	_silc_free
mov	eax, [vcard_0+58h]
mov	[esp], eax	
call	_silc_free
mov	eax, [vcard_0+5Ch]
mov	[esp], eax	
call	_silc_free
cmp	byte ptr [vcard_0+60h],	0
jz	short loc_64238DF8
mov	ecx, 64h
xor	eax, eax
mov	i, vcard_0
rep stosb
mov	[ebp+vcard], ebx
add	esp, 1Ch
pop	ebx
pop	i
pop	vcard_0
leave
jmp	_silc_free
align 4
mov	ecx, 64h
xor	eax, eax
mov	i, vcard_0
rep stosb
add	esp, 1Ch
pop	ebx
pop	i
pop	vcard_0
leave
retn
align 4
public _silc_vcard_alloc
push	ebp
mov	ebp, esp
sub	esp, 18h
mov	dword ptr [esp+4], 64h 
mov	dword ptr [esp], 1 
call	_silc_calloc
test	eax, eax
jz	short locret_64238E2E
mov	byte ptr [vcard+60h], 1
leave
retn
public _silc_vcard_decode
push	ebp
mov	ebp, esp
push	edi
push	esi
push	ebx
sub	esp, 3Ch
mov	edx, [ebp+data_len]
mov	ecx, [ebp+data]
test	ecx, ecx
jz	short loc_64238E8E
mov	ebx, [ebp+data]
mov	[ebp+has_end], 0
mov	[ebp+has_begin], 0
xchg	ax, ax
			
mov	i, val
sub	i, [ebp+data]
cmp	edx, i
jbe	short loc_64238E7E
mov	esi, [ebp+data]
add	esi, i
mov	cl, [esi]
test	cl, cl
jz	short loc_64238EA4
cmp	cl, 0Ah
jnz	short loc_64238E79
jmp	short loc_64238EA4
align 4
mov	cl, [esi+1]
test	cl, cl
jz	short loc_64238EA4
inc	esi
cmp	cl, 0Ah
jz	short loc_64238EA4
inc	i
cmp	data_len_0, i
ja	short loc_64238E6C
			
cmp	[ebp+has_begin], 0
jz	short loc_64238E8E
cmp	[ebp+has_end], 0
jnz	loc_6423915A
			
mov	i, [ebp+vcard]
mov	[esp], eax	
call	_silc_vcard_free
xor	eax, eax
add	esp, 3Ch
pop	val
pop	esi
pop	off
leave
retn
align 4
			
mov	ecx, [ebp+data]
sub	ecx, val
add	i, ecx
mov	[ebp+len], i
jz	short loc_64238E7E
add	ecx, data_len_0
cmp	[ebp+len], ecx
ja	short loc_64238E7E
mov	off, offset aBeginVcard	
mov	ecx, 0Ch
mov	esi, val
repe cmpsb
jnz	short loc_64238EF8
mov	[ebp+has_begin], 1
			
mov	dword ptr [esp+4], 0Ah
mov	[esp], val	
mov	[ebp+var_2C], edx
call	_strchr
test	eax, eax
mov	edx, [ebp+var_2C]
jz	short loc_64238E7E
mov	val, eax
inc	val
jz	short loc_64238E7E
cmp	byte ptr [eax+1], 0
jnz	loc_64238E50
jmp	short loc_64238E7E
align 4
mov	edi, offset aEndVcard 
mov	ecx, 0Ah
mov	esi, val
repe cmpsb
jnz	short loc_64238F10
mov	[ebp+has_end], 1
jmp	short next
align 10h
mov	edi, offset aFn	
mov	ecx, 3
mov	esi, val
repe cmpsb
jnz	short loc_64238F2D
mov	i, [ebp+vcard]
mov	eax, [eax]
test	eax, eax
jz	loc_642394A4
mov	edi, offset aNickname
mov	ecx, 9
mov	esi, val
repe cmpsb
jnz	short loc_64238F4B
mov	esi, [ebp+vcard]
mov	edi, [esi+18h]
test	edi, edi
jz	loc_642394D3
mov	edi, offset aBday 
mov	ecx, 5
mov	esi, val
repe cmpsb
jnz	short loc_64238F69
mov	i, [ebp+vcard]
mov	esi, [eax+1Ch]
test	esi, esi
jz	loc_64239500
mov	edi, offset aTitle
mov	ecx, 6
mov	esi, val
repe cmpsb
jnz	short loc_64238F87
mov	esi, [ebp+vcard]
mov	ecx, [esi+20h]
test	ecx, ecx
jz	loc_64239560
mov	edi, offset aRole 
mov	ecx, 5
mov	esi, val
repe cmpsb
jnz	short loc_64238FA5
mov	i, [ebp+vcard]
mov	eax, [eax+24h]
test	eax, eax
jz	loc_64239530
mov	edi, offset aCategories
mov	ecx, 0Bh
mov	esi, val
repe cmpsb
jnz	short loc_64238FC3
mov	esi, [ebp+vcard]
mov	edi, [esi+30h]
test	edi, edi
jz	loc_6423958D
mov	edi, offset aClass 
mov	ecx, 6
mov	esi, val
repe cmpsb
jnz	short loc_64238FE1
mov	i, [ebp+vcard]
mov	esi, [eax+34h]
test	esi, esi
jz	loc_642395BA
mov	edi, offset aUrl
mov	ecx, 4
mov	esi, val
repe cmpsb
jnz	short loc_64238FFF
mov	esi, [ebp+vcard]
mov	ecx, [esi+38h]
test	ecx, ecx
jz	loc_642395EA
mov	edi, offset aLabel 
mov	ecx, 6
mov	esi, val
repe cmpsb
jnz	short loc_6423901D
mov	i, [ebp+vcard]
mov	eax, [eax+3Ch]
test	eax, eax
jz	loc_64239306
mov	edi, offset aNote
mov	ecx, 5
mov	esi, val
repe cmpsb
jnz	short loc_6423903B
mov	esi, [ebp+vcard]
mov	edi, [esi+58h]
test	edi, edi
jz	loc_642392D9
mov	edi, offset aRev 
mov	ecx, 4
mov	esi, val
repe cmpsb
jnz	short loc_64239059
mov	i, [ebp+vcard]
mov	ecx, [eax+5Ch]
test	ecx, ecx
jz	loc_64239336
mov	edi, offset aN
mov	ecx, 2
mov	esi, val
repe cmpsb
jnz	loc_64239102
mov	esi, [ebp+vcard]
mov	i, [esi+4]
test	eax, eax
jnz	loc_64238E7E
cmp	[ebp+len], 2
jz	next
jle	loc_64239674
mov	esi, 3
xor	eax, eax
mov	edi, 2
mov	ecx, off
mov	off, val
mov	[ebp+var_24], data_len_0
mov	val, [ebp+vcard]
lea	data_len_0, [esi-1]
cmp	byte ptr [val+esi-1], 3Bh
jz	short loc_642390C5
nop
			
mov	i, esi
			
inc	esi
cmp	[ebp+len], off
jle	loc_64239171
mov	eax, [vcard_0+4]
lea	off, [esi-1]
cmp	byte ptr [val+esi-1], 3Bh
jnz	short loc_642390AC
test	eax, eax
jz	loc_64239637
cmp	dword ptr [vcard_0+8], 0
jz	loc_64239617
cmp	dword ptr [vcard_0+0Ch], 0
jz	loc_64239654
cmp	dword ptr [vcard_0+10h], 0
jnz	short loc_642390AC
sub	i, off
mov	[esp+4], edx	
lea	off, [val+off]
mov	[esp], ecx	
call	_silc_memdup
mov	[vcard_0+10h], eax
mov	ecx, esi
mov	eax, [vcard_0+4]
jmp	short loc_642390AC
mov	edi, offset aOrg
mov	ecx, 4
mov	esi, val
repe cmpsb
jnz	loc_642391CC
mov	esi, [ebp+vcard]
mov	ecx, [esi+28h]
test	ecx, ecx
jnz	loc_64238E50
cmp	[ebp+len], 4
jz	next
mov	ecx, 4
xor	esi, esi
mov	i, 4
cmp	[ebp+len], ecx
jle	loc_64239B6D
lea	edi, [ecx+1]
cmp	byte ptr [val+ecx], 3Bh
jz	loc_6423981C
mov	ecx, [ebp+vcard]
mov	esi, [ecx+28h]
mov	ecx, edi
jmp	short loc_6423913A
mov	esi, [ebp+vcard]
mov	i, [esi]
test	eax, eax
jz	loc_64238E8E
mov	al, 1
add	esp, 3Ch
pop	val
pop	esi
pop	off
leave
retn
mov	vcard_0, val
mov	val, ecx
mov	off, [ebp+var_24]
test	eax, eax
jz	loc_64239679
mov	ecx, [ebp+vcard]
mov	eax, [ecx+8]
test	eax, eax
jz	loc_64239A1E
mov	eax, [ebp+vcard]
mov	esi, [eax+14h]
test	esi, esi
jnz	next
cmp	off, [ebp+len]
jge	next
mov	eax, [ebp+len]
sub	eax, off
mov	[esp+4], eax	
lea	off, [val+off]
mov	[esp], edi	
mov	[ebp+var_2C], data_len_0
call	_silc_memdup
mov	ecx, [ebp+vcard]
mov	[ecx+14h], eax
mov	edx, [ebp+var_2C]
jmp	next
align 4
mov	edi, offset aAdr 
mov	ecx, 4
mov	esi, val
repe cmpsb
jz	loc_64239366
mov	edi, offset aTel 
mov	ecx, 4
mov	esi, val
repe cmpsb
jz	loc_642396B8
mov	edi, offset aEmail 
mov	ecx, 6
mov	esi, val
repe cmpsb
jnz	next
mov	esi, [ebp+vcard]
movzx	i, byte	ptr [esi+54h]
lea	eax, ds:8[eax*8]
mov	[esp+4], eax	
mov	eax, [esi+50h]
mov	[esp], eax	
mov	[ebp+var_2C], data_len_0
call	_silc_realloc
mov	[esi+50h], eax
movzx	ecx, byte ptr [esi+54h]
lea	edi, [eax+ecx*8]
mov	esi, 8
xor	eax, eax
test	edi, 1
mov	edx, [ebp+var_2C]
jnz	loc_64239B47
test	edi, 2
jnz	loc_64239B3D
mov	ecx, esi
shr	ecx, 2
rep stosd
test	esi, 2
jz	short loc_64239265
stosw
and	esi, 1
jz	short loc_6423926B
stosb
cmp	[ebp+len], 6
jz	loc_642398DF
jle	loc_64239B51
lea	esi, [val+6]
mov	[ebp+var_24], esi
mov	[ebp+ptr], esi
mov	eax, 6
mov	edi, 7
mov	ecx, esi
cmp	byte ptr [val+6], 3Ah
jnz	short loc_642392A6
jmp	loc_642399A4
align 4
cmp	byte ptr [val+i], 3Ah
jz	loc_6423999E
inc	i
cmp	[ebp+len], i
jg	short loc_6423929C
mov	esi, [ebp+vcard]
mov	al, [esi+54h]
movzx	esi, al
shl	esi, 3
mov	ecx, [ebp+vcard]
add	esi, [ecx+50h]
mov	off, 6
			
cmp	dword ptr [esi+4], 0
jz	loc_64239ACC
			
inc	eax
mov	ecx, [ebp+vcard]
mov	[ecx+54h], al
jmp	next
cmp	[ebp+len], 5
jle	next
mov	i, [ebp+len]
sub	eax, 5
mov	[esp+4], eax	
lea	eax, [val+5]
mov	[esp], eax	
mov	[ebp+var_2C], data_len_0
call	_silc_memdup
mov	[esi+58h], eax
mov	edx, [ebp+var_2C]
jmp	next
cmp	[ebp+len], 6
jle	next
mov	eax, [ebp+len]
sub	eax, 6
mov	[esp+4], eax	
lea	eax, [val+6]
mov	[esp], eax	
mov	[ebp+var_2C], data_len_0
call	_silc_memdup
mov	ecx, [ebp+vcard]
mov	[ecx+3Ch], eax
mov	edx, [ebp+var_2C]
jmp	next
cmp	[ebp+len], 4
jle	next
mov	eax, [ebp+len]
sub	eax, 4
mov	[esp+4], eax	
lea	eax, [val+4]
mov	[esp], eax	
mov	[ebp+var_2C], data_len_0
call	_silc_memdup
mov	ecx, [ebp+vcard]
mov	[ecx+5Ch], eax
mov	edx, [ebp+var_2C]
jmp	next
mov	ecx, [ebp+vcard]
movzx	i, byte	ptr [ecx+44h]
inc	eax
shl	eax, 5
mov	[esp+4], eax	
mov	eax, [ecx+40h]
mov	[esp], eax	
mov	[ebp+var_2C], data_len_0
call	_silc_realloc
mov	esi, [ebp+vcard]
mov	[esi+40h], eax
movzx	ecx, byte ptr [esi+44h]
shl	ecx, 5
lea	edi, [eax+ecx]
mov	esi, 20h
xor	eax, eax
test	edi, 1
mov	edx, [ebp+var_2C]
jnz	loc_64239994
test	edi, 2
jnz	loc_6423998A
mov	ecx, esi
shr	ecx, 2
rep stosd
test	esi, 2
jnz	loc_6423978F
and	esi, 1
jnz	loc_64239789
cmp	[ebp+len], 4
jz	loc_642397A0
jle	loc_64239A91
mov	edi, 4
mov	esi, 4
mov	[ebp+var_24], val
mov	[ebp+ptr], edx
mov	eax, [ebp+var_24]
cmp	byte ptr [eax+i], 3Bh
jz	short loc_6423942B
inc	i
			
cmp	[ebp+len], i
jg	short loc_642393F1
mov	val, [ebp+var_24]
mov	edx, [ebp+ptr]
mov	ecx, [ebp+vcard]
mov	al, [ecx+44h]
movzx	i, al
shl	esi, 5
add	esi, [ecx+40h]
cmp	dword ptr [esi+1Ch], 0
jz	loc_64239A4C
			
inc	eax
mov	ecx, [ebp+vcard]
mov	[ecx+44h], al
jmp	next
mov	ecx, [ebp+vcard]
movzx	val, byte ptr [ecx+44h]
shl	ebx, 5
add	ebx, [ecx+40h]
mov	eax, [ebx]
test	eax, eax
jz	loc_642397B3
mov	ecx, [ebx+4]
test	ecx, ecx
jz	loc_6423996A
mov	edx, [ebx+8]
test	edx, edx
jz	loc_6423994A
mov	eax, [ebx+0Ch]
test	eax, eax
jz	loc_6423992A
mov	ecx, [ebx+10h]
test	ecx, ecx
jz	loc_6423990A
mov	edx, [ebx+14h]
test	edx, edx
jz	loc_642398EA
cmp	dword ptr [ebx+18h], 0
jnz	loc_642393FA
mov	eax, i
sub	eax, off
mov	[esp+4], eax	
add	off, [ebp+var_24]
mov	[esp], edi	
call	_silc_memdup
mov	[ebx+18h], eax
lea	edi, [i+1]
mov	i, off
jmp	loc_642393FB
align 4
cmp	[ebp+len], 3
jle	next
mov	eax, [ebp+len]
sub	eax, 3
mov	[esp+4], eax	
lea	eax, [val+3]
mov	[esp], eax	
mov	[ebp+var_2C], data_len_0
call	_silc_memdup
mov	ecx, [ebp+vcard]
mov	[ecx], eax
mov	edx, [ebp+var_2C]
jmp	next
cmp	[ebp+len], 9
jle	next
mov	i, [ebp+len]
sub	eax, 9
mov	[esp+4], eax	
lea	eax, [val+9]
mov	[esp], eax	
mov	[ebp+var_2C], data_len_0
call	_silc_memdup
mov	[esi+18h], eax
mov	edx, [ebp+var_2C]
jmp	next
cmp	[ebp+len], 5
jle	next
mov	eax, [ebp+len]
sub	eax, 5
mov	[esp+4], eax	
lea	eax, [val+5]
mov	[esp], eax	
mov	[ebp+var_2C], data_len_0
call	_silc_memdup
mov	ecx, [ebp+vcard]
mov	[ecx+1Ch], eax
mov	edx, [ebp+var_2C]
jmp	next
cmp	[ebp+len], 5
jle	next
mov	eax, [ebp+len]
sub	eax, 5
mov	[esp+4], eax	
lea	eax, [val+5]
mov	[esp], eax	
mov	[ebp+var_2C], data_len_0
call	_silc_memdup
mov	ecx, [ebp+vcard]
mov	[ecx+24h], eax
mov	edx, [ebp+var_2C]
jmp	next
cmp	[ebp+len], 6
jle	next
mov	i, [ebp+len]
sub	eax, 6
mov	[esp+4], eax	
lea	eax, [val+6]
mov	[esp], eax	
mov	[ebp+var_2C], data_len_0
call	_silc_memdup
mov	[esi+20h], eax
mov	edx, [ebp+var_2C]
jmp	next
cmp	[ebp+len], 0Bh
jle	next
mov	i, [ebp+len]
sub	eax, 0Bh
mov	[esp+4], eax	
lea	eax, [val+0Bh]
mov	[esp], eax	
mov	[ebp+var_2C], data_len_0
call	_silc_memdup
mov	[esi+30h], eax
mov	edx, [ebp+var_2C]
jmp	next
cmp	[ebp+len], 6
jle	next
mov	eax, [ebp+len]
sub	eax, 6
mov	[esp+4], eax	
lea	eax, [val+6]
mov	[esp], eax	
mov	[ebp+var_2C], data_len_0
call	_silc_memdup
mov	ecx, [ebp+vcard]
mov	[ecx+34h], eax
mov	edx, [ebp+var_2C]
jmp	next
cmp	[ebp+len], 4
jle	next
mov	i, [ebp+len]
sub	eax, 4
mov	[esp+4], eax	
lea	eax, [val+4]
mov	[esp], eax	
mov	[ebp+var_2C], data_len_0
call	_silc_memdup
mov	[esi+38h], eax
mov	edx, [ebp+var_2C]
jmp	next
sub	i, off
mov	[esp+4], edx	
lea	off, [val+off]
mov	[esp], ecx	
call	_silc_memdup
mov	[vcard_0+8], eax
mov	ecx, esi
mov	eax, [vcard_0+4]
mov	edx, esi
jmp	loc_642390AE
sub	i, off
mov	[esp+4], edx	
lea	off, [val+off]
mov	[esp], ecx	
call	_silc_memdup
mov	[vcard_0+4], eax
mov	ecx, esi
mov	edx, esi
jmp	loc_642390AE
sub	i, off
mov	[esp+4], edx	
lea	off, [val+off]
mov	[esp], ecx	
call	_silc_memdup
mov	[vcard_0+0Ch], eax
mov	ecx, esi
mov	eax, [vcard_0+4]
mov	edx, esi
jmp	loc_642390AE
mov	edi, 2
mov	esi, [ebp+vcard]
cmp	dword ptr [esi+8], 0
jnz	loc_6423918E
xor	eax, eax
cmp	[ebp+len], off
jle	short loc_642396B0
mov	eax, [ebp+len]
sub	eax, off
mov	[esp+4], eax	
lea	off, [val+off]
mov	[esp], edi	
mov	[ebp+var_2C], data_len_0
call	_silc_memdup
mov	ecx, [ebp+vcard]
mov	[ecx+4], eax
mov	eax, [ecx+8]
mov	edx, [ebp+var_2C]
mov	off, [ebp+len]
jmp	loc_64239186
mov	esi, [ebp+vcard]
movzx	i, byte	ptr [esi+4Ch]
lea	eax, ds:8[eax*8]
mov	[esp+4], eax	
mov	eax, [esi+48h]
mov	[esp], eax	
mov	[ebp+var_2C], data_len_0
call	_silc_realloc
mov	[esi+48h], eax
movzx	ecx, byte ptr [esi+4Ch]
lea	edi, [eax+ecx*8]
mov	esi, 8
xor	eax, eax
test	edi, 1
mov	edx, [ebp+var_2C]
jnz	loc_64239A87
test	edi, 2
jnz	loc_64239A7D
mov	ecx, esi
shr	ecx, 2
rep stosd
test	esi, 2
jnz	loc_64239799
and	esi, 1
jnz	short loc_64239796
cmp	[ebp+len], 4
jz	loc_642397AB
jle	loc_64239AFD
lea	esi, [val+4]
mov	[ebp+var_24], esi
mov	[ebp+ptr], esi
mov	eax, 4
mov	edi, 5
mov	ecx, esi
cmp	byte ptr [val+4], 3Ah
jnz	short loc_64239756
jmp	loc_64239865
cmp	byte ptr [val+i], 3Ah
jz	loc_6423985F
inc	i
cmp	[ebp+len], i
jg	short loc_6423974C
mov	esi, [ebp+vcard]
mov	al, [esi+4Ch]
movzx	esi, al
shl	esi, 3
mov	ecx, [ebp+vcard]
add	esi, [ecx+48h]
mov	off, 4
			
cmp	dword ptr [esi+4], 0
jz	loc_64239A9B
			
inc	eax
mov	ecx, [ebp+vcard]
mov	[ecx+4Ch], al
jmp	next
stosb
jmp	loc_642393D1
stosw
jmp	loc_642393C8
stosb
jmp	short loc_6423971C
stosw
jmp	loc_64239717
mov	ecx, [ebp+vcard]
mov	al, [ecx+44h]
jmp	loc_6423941F
mov	ecx, [ebp+vcard]
mov	al, [ecx+4Ch]
jmp	short loc_6423977D
mov	eax, [ebp+var_24]
add	eax, off
mov	dword ptr [esp+8], 5 
mov	dword ptr [esp+4], offset aType	
mov	[esp], eax	
call	_strncmp
cmp	eax, 1
sbb	edx, edx
and	edx, 5
lea	eax, [i-1]
sub	eax, off
sub	eax, edx
mov	[esp+4], eax	
add	edx, off
mov	eax, [ebp+var_24]
add	eax, edx
mov	[esp], eax	
mov	[ebp+var_2C], edx
call	_silc_memdup
mov	[ebx], eax
mov	eax, [ebp+vcard]
movzx	ebx, byte ptr [eax+44h]
shl	ebx, 5
add	ebx, [eax+40h]
mov	off, [ebx]
or	ecx, 0FFFFFFFFh
xor	eax, eax
repne scasb
not	ecx
mov	edi, i
mov	edx, [ebp+var_2C]
lea	i, [ecx+edx]
jmp	loc_64239442
test	esi, esi
jz	loc_64239B19
mov	ecx, [ebp+vcard]
cmp	dword ptr [ecx+2Ch], 0
jnz	next
cmp	[ebp+len], off
jle	next
mov	ecx, [ebp+len]
sub	ecx, off
mov	[esp+4], ecx	
lea	off, [val+off]
mov	[esp], eax	
mov	[ebp+var_2C], data_len_0
call	_silc_memdup
mov	esi, [ebp+vcard]
mov	[esi+2Ch], eax
mov	edx, [ebp+var_2C]
jmp	next
mov	[ebp+ptr], ecx
lea	off, [i+1]
mov	ecx, [ebp+vcard]
mov	al, [ecx+4Ch]
movzx	esi, al
shl	esi, 3
add	esi, [ecx+48h]
cmp	dword ptr [esi], 0
jnz	loc_6423976E
mov	dword ptr [esp+8], 5 
mov	dword ptr [esp+4], offset aType	
mov	eax, [ebp+var_24]
mov	[esp], eax	
mov	[ebp+var_2C], edx
call	_strncmp
xor	ecx, ecx
test	eax, eax
mov	edx, [ebp+var_2C]
jnz	short loc_642398AF
lea	tmpi, [val+9]
mov	[ebp+ptr], ecx
mov	ecx, 5
lea	eax, [off-5]
sub	eax, tmpi
mov	[esp+4], eax	
mov	eax, [ebp+ptr]
mov	[esp], eax	
mov	[ebp+var_2C], edx
call	_silc_memdup
mov	[esi], eax
mov	ecx, [ebp+vcard]
mov	al, [ecx+4Ch]
movzx	esi, al
shl	esi, 3
add	esi, [ecx+48h]
mov	edx, [ebp+var_2C]
jmp	loc_64239773
mov	ecx, [ebp+vcard]
mov	al, [ecx+54h]
jmp	loc_642392CD
mov	eax, i
sub	eax, off
mov	[esp+4], eax	
add	off, [ebp+var_24]
mov	[esp], edi	
call	_silc_memdup
mov	[ebx+14h], eax
lea	edi, [i+1]
mov	i, off
jmp	loc_642393FB
mov	eax, i
sub	eax, off
mov	[esp+4], eax	
add	off, [ebp+var_24]
mov	[esp], edi	
call	_silc_memdup
mov	[ebx+10h], eax
lea	edi, [i+1]
mov	i, off
jmp	loc_642393FB
mov	eax, i
sub	eax, off
mov	[esp+4], eax	
add	off, [ebp+var_24]
mov	[esp], edi	
call	_silc_memdup
mov	[ebx+0Ch], eax
lea	edi, [i+1]
mov	i, off
jmp	loc_642393FB
mov	eax, i
sub	eax, off
mov	[esp+4], eax	
add	off, [ebp+var_24]
mov	[esp], edi	
call	_silc_memdup
mov	[ebx+8], eax
lea	edi, [i+1]
mov	i, off
jmp	loc_642393FB
mov	eax, i
sub	eax, off
mov	[esp+4], eax	
add	off, [ebp+var_24]
mov	[esp], edi	
call	_silc_memdup
mov	[ebx+4], eax
lea	edi, [i+1]
mov	i, off
jmp	loc_642393FB
stosw
sub	esi, 2
jmp	loc_642393B5
stosb
mov	si, 1Fh
jmp	loc_642393A9
mov	[ebp+ptr], ecx
lea	off, [i+1]
mov	ecx, [ebp+vcard]
mov	al, [ecx+54h]
movzx	esi, al
shl	esi, 3
add	esi, [ecx+50h]
cmp	dword ptr [esi], 0
jnz	loc_642392BE
mov	dword ptr [esp+8], 5 
mov	dword ptr [esp+4], offset aType	
mov	eax, [ebp+var_24]
mov	[esp], eax	
mov	[ebp+var_2C], edx
call	_strncmp
xor	ecx, ecx
test	eax, eax
mov	edx, [ebp+var_2C]
jnz	short loc_642399EE
lea	tmpi, [val+0Bh]
mov	[ebp+ptr], ecx
mov	ecx, 5
lea	eax, [off-7]
sub	eax, tmpi
mov	[esp+4], eax	
mov	eax, [ebp+ptr]
mov	[esp], eax	
mov	[ebp+var_2C], edx
call	_silc_memdup
mov	[esi], eax
mov	ecx, [ebp+vcard]
mov	al, [ecx+54h]
movzx	esi, al
shl	esi, 3
add	esi, [ecx+50h]
mov	edx, [ebp+var_2C]
jmp	loc_642392C3
cmp	off, [ebp+len]
jge	next
mov	eax, [ebp+len]
sub	eax, off
mov	[esp+4], eax	
lea	off, [val+off]
mov	[esp], edi	
mov	[ebp+var_2C], data_len_0
call	_silc_memdup
mov	esi, [ebp+vcard]
mov	[esi+8], eax
mov	edx, [ebp+var_2C]
jmp	next
cmp	[ebp+len], off
jle	loc_6423941F
mov	eax, [ebp+len]
sub	eax, off
mov	[esp+4], eax	
lea	off, [val+off]
mov	[esp], edi	
mov	[ebp+var_2C], data_len_0
call	_silc_memdup
mov	[esi+1Ch], eax
mov	esi, [ebp+vcard]
mov	al, [esi+44h]
mov	edx, [ebp+var_2C]
jmp	loc_6423941F
stosw
sub	esi, 2
jmp	loc_64239704
stosb
mov	si, 7
jmp	loc_642396F8
mov	edi, 4
jmp	loc_64239406
cmp	off, [ebp+len]
jge	loc_6423977D
mov	eax, [ebp+len]
sub	eax, off
mov	[esp+4], eax	
lea	off, [val+off]
mov	[esp], edi	
mov	[ebp+var_2C], edx
call	_silc_memdup
mov	[esi+4], eax
mov	esi, [ebp+vcard]
mov	al, [esi+4Ch]
mov	edx, [ebp+var_2C]
jmp	loc_6423977D
cmp	off, [ebp+len]
jge	loc_642392CD
mov	eax, [ebp+len]
sub	eax, off
mov	[esp+4], eax	
lea	off, [val+off]
mov	[esp], edi	
mov	[ebp+var_2C], edx
call	_silc_memdup
mov	[esi+4], eax
mov	esi, [ebp+vcard]
mov	al, [esi+54h]
mov	edx, [ebp+var_2C]
jmp	loc_642392CD
mov	esi, [ebp+vcard]
mov	al, [esi+4Ch]
movzx	esi, al
shl	esi, 3
mov	ecx, [ebp+vcard]
add	esi, [ecx+48h]
mov	edi, 4
jmp	loc_64239773
sub	ecx, off
mov	[esp+4], ecx	
lea	off, [val+off]
mov	[esp], eax	
mov	[ebp+var_2C], data_len_0
call	_silc_memdup
mov	ecx, [ebp+vcard]
mov	[ecx+28h], eax
mov	eax, edi
mov	edx, [ebp+var_2C]
jmp	loc_64239150
stosw
sub	esi, 2
jmp	loc_64239254
stosb
mov	si, 7
jmp	loc_64239248
mov	esi, [ebp+vcard]
mov	al, [esi+54h]
movzx	esi, al
shl	esi, 3
mov	ecx, [ebp+vcard]
add	esi, [ecx+50h]
mov	edi, 6
jmp	loc_642392C3
test	esi, esi
jnz	loc_64239824
cmp	[ebp+len], off
jle	next
mov	ecx, [ebp+len]
sub	ecx, off
mov	[esp+4], ecx	
lea	off, [val+off]
mov	[esp], eax	
mov	[ebp+var_2C], data_len_0
call	_silc_memdup
mov	esi, [ebp+vcard]
mov	[esi+28h], eax
mov	edx, [ebp+var_2C]
jmp	next
align 4
public _silc_vcard_encode
push	ebp
mov	ebp, esp
push	edi
push	esi
push	ebx
sub	esp, 7Ch
mov	ebx, [ebp+vcard]
mov	ecx, [ebx]
test	ecx, ecx
jnz	short loc_64239BC0
			
xor	eax, eax
			
add	esp, 7Ch
pop	ebx
pop	esi
pop	i
leave
retn
mov	edx, [vcard_0+4]
test	edx, edx
jz	short loc_64239BB6
mov	eax, [vcard_0+8]
test	eax, eax
jz	short loc_64239BB6
lea	esi, [ebp+buffer]
mov	ecx, 10h
xor	eax, eax
mov	edi, esi
rep stosb
mov	dword ptr [esp+44h], 1Dh
mov	dword ptr [esp+40h], offset asc_6426FA5E 
mov	eax, [vcard_0+14h]
mov	[esp+3Ch], eax
mov	dword ptr [esp+38h], offset asc_6426FA60 
mov	eax, [vcard_0+10h]
mov	[esp+34h], eax
mov	dword ptr [esp+30h], offset asc_6426FA60 
mov	eax, [vcard_0+0Ch]
mov	[esp+2Ch], eax
mov	dword ptr [esp+28h], offset asc_6426FA60 
mov	eax, [vcard_0+8]
mov	[esp+24h], eax
mov	dword ptr [esp+20h], offset asc_6426FA60 
mov	eax, [vcard_0+4]
mov	[esp+1Ch], eax
mov	dword ptr [esp+18h], offset aN 
mov	dword ptr [esp+14h], offset asc_6426FA5E 
mov	eax, [vcard_0]
mov	[esp+10h], eax
mov	dword ptr [esp+0Ch], offset aFn	
mov	dword ptr [esp+8], offset aVersion3_0 
mov	dword ptr [esp+4], offset aBeginVcard 
mov	[esp], esi	
call	_silc_buffer_strformat
mov	eax, [vcard_0+18h]
test	eax, eax
jz	short loc_64239C90
mov	dword ptr [esp+10h], 1Dh
mov	dword ptr [esp+0Ch], offset asc_6426FA5E 
mov	[esp+8], eax
mov	dword ptr [esp+4], offset aNickname 
mov	[esp], esi	
call	_silc_buffer_strformat
mov	eax, [vcard_0+1Ch]
test	eax, eax
jz	short loc_64239CBB
mov	dword ptr [esp+10h], 1Dh
mov	dword ptr [esp+0Ch], offset asc_6426FA5E 
mov	[esp+8], eax
mov	dword ptr [esp+4], offset aBday	
mov	[esp], esi	
call	_silc_buffer_strformat
mov	eax, [vcard_0+20h]
test	eax, eax
jz	short loc_64239CE6
mov	dword ptr [esp+10h], 1Dh
mov	dword ptr [esp+0Ch], offset asc_6426FA5E 
mov	[esp+8], eax
mov	dword ptr [esp+4], offset aTitle 
mov	[esp], esi	
call	_silc_buffer_strformat
mov	eax, [vcard_0+24h]
test	eax, eax
jz	short loc_64239D11
mov	dword ptr [esp+10h], 1Dh
mov	dword ptr [esp+0Ch], offset asc_6426FA5E 
mov	[esp+8], eax
mov	dword ptr [esp+4], offset aRole	
mov	[esp], esi	
call	_silc_buffer_strformat
mov	eax, [vcard_0+28h]
test	eax, eax
jz	short loc_64239D4B
mov	dword ptr [esp+18h], 1Dh
mov	dword ptr [esp+14h], offset asc_6426FA5E 
mov	edx, [vcard_0+2Ch]
mov	[esp+10h], edx
mov	dword ptr [esp+0Ch], offset asc_6426FA60 
mov	[esp+8], eax
mov	dword ptr [esp+4], offset aOrg 
mov	[esp], esi	
call	_silc_buffer_strformat
mov	eax, [vcard_0+30h]
test	eax, eax
jz	short loc_64239D76
mov	dword ptr [esp+10h], 1Dh
mov	dword ptr [esp+0Ch], offset asc_6426FA5E 
mov	[esp+8], eax
mov	dword ptr [esp+4], offset aCategories 
mov	[esp], esi	
call	_silc_buffer_strformat
mov	eax, [vcard_0+34h]
test	eax, eax
jz	short loc_64239DA1
mov	dword ptr [esp+10h], 1Dh
mov	dword ptr [esp+0Ch], offset asc_6426FA5E 
mov	[esp+8], eax
mov	dword ptr [esp+4], offset aClass 
mov	[esp], esi	
call	_silc_buffer_strformat
mov	eax, [vcard_0+38h]
test	eax, eax
jz	short loc_64239DCC
mov	dword ptr [esp+10h], 1Dh
mov	dword ptr [esp+0Ch], offset asc_6426FA5E 
mov	[esp+8], eax
mov	dword ptr [esp+4], offset aUrl 
mov	[esp], esi	
call	_silc_buffer_strformat
mov	edi, [vcard_0+3Ch]
test	edi, edi
jz	short loc_64239DFA
mov	dword ptr [esp+10h], 1Dh
mov	dword ptr [esp+0Ch], offset asc_6426FA5E 
mov	eax, [vcard_0+38h]
mov	[esp+8], eax
mov	dword ptr [esp+4], offset aLabel 
mov	[esp], esi	
call	_silc_buffer_strformat
cmp	byte ptr [vcard_0+44h],	0
jz	loc_64239EB8
xor	eax, eax
xor	edi, edi
mov	edx, vcard_0
mov	vcard_0, eax
mov	eax, [vcard_0+40h]
add	eax, ebx
mov	dword ptr [esp+48h], 1Dh
mov	dword ptr [esp+44h], offset asc_6426FA5E 
mov	ecx, [eax+1Ch]
mov	[esp+40h], ecx
mov	dword ptr [esp+3Ch], offset asc_6426FA60 
mov	ecx, [eax+18h]
mov	[esp+38h], ecx
mov	dword ptr [esp+34h], offset asc_6426FA60 
mov	ecx, [eax+14h]
mov	[esp+30h], ecx
mov	dword ptr [esp+2Ch], offset asc_6426FA60 
mov	ecx, [eax+10h]
mov	[esp+28h], ecx
mov	dword ptr [esp+24h], offset asc_6426FA60 
mov	ecx, [eax+0Ch]
mov	[esp+20h], ecx
mov	dword ptr [esp+1Ch], offset asc_6426FA60 
mov	ecx, [eax+8]
mov	[esp+18h], ecx
mov	dword ptr [esp+14h], offset asc_6426FA60 
mov	ecx, [eax+4]
mov	[esp+10h], ecx
mov	dword ptr [esp+0Ch], offset asc_6426FA62 
mov	eax, [eax]
mov	[esp+8], eax
mov	dword ptr [esp+4], offset aAdrType 
mov	[esp], esi	
mov	[ebp+var_2C], vcard_0
call	_silc_buffer_strformat
inc	i
add	ebx, 20h
mov	edx, [ebp+var_2C]
movzx	eax, byte ptr [edx+44h]
cmp	eax, i
jg	loc_64239E0C
mov	ebx, vcard_0
cmp	byte ptr [vcard_0+4Ch],	0
jz	short loc_64239F08
xor	i, i
lea	eax, ds:0[i*8]
add	eax, [vcard_0+48h]
mov	dword ptr [esp+18h], 1Dh
mov	dword ptr [esp+14h], offset asc_6426FA5E 
mov	edx, [eax+4]
mov	[esp+10h], edx
mov	dword ptr [esp+0Ch], offset asc_6426FA62 
mov	eax, [eax]
mov	[esp+8], eax
mov	dword ptr [esp+4], offset aTelType 
mov	[esp], esi	
call	_silc_buffer_strformat
inc	i
movzx	eax, byte ptr [vcard_0+4Ch]
cmp	eax, i
jg	short loc_64239EC0
cmp	byte ptr [vcard_0+54h],	0
jz	short loc_64239F58
xor	i, i
lea	eax, ds:0[i*8]
add	eax, [vcard_0+50h]
mov	dword ptr [esp+18h], 1Dh
mov	dword ptr [esp+14h], offset asc_6426FA5E 
mov	edx, [eax+4]
mov	[esp+10h], edx
mov	dword ptr [esp+0Ch], offset asc_6426FA62 
mov	eax, [eax]
mov	[esp+8], eax
mov	dword ptr [esp+4], offset aEmailType 
mov	[esp], esi	
call	_silc_buffer_strformat
inc	i
movzx	eax, byte ptr [vcard_0+54h]
cmp	eax, i
jg	short loc_64239F10
mov	eax, [vcard_0+58h]
test	eax, eax
jz	short loc_64239F83
mov	dword ptr [esp+10h], 1Dh
mov	dword ptr [esp+0Ch], offset asc_6426FA5E 
mov	[esp+8], eax
mov	dword ptr [esp+4], offset aNote	
mov	[esp], esi	
call	_silc_buffer_strformat
mov	eax, [vcard_0+5Ch]
test	eax, eax
jz	short loc_64239FAE
mov	dword ptr [esp+10h], 1Dh
mov	dword ptr [esp+0Ch], offset asc_6426FA5E 
mov	[esp+8], eax
mov	dword ptr [esp+4], offset aRev 
mov	[esp], esi	
call	_silc_buffer_strformat
mov	dword ptr [esp+8], 1Dh
mov	dword ptr [esp+4], offset aEndVcard 
mov	[esp], esi	
call	_silc_buffer_strformat
mov	vcard_0, [ebp+vcard_len]
test	ebx, ebx
jz	short loc_64239FE0
mov	eax, [ebp+buffer.head]
mov	edx, [ebp+buffer.end]
sub	edx, eax
mov	ecx, [ebp+vcard_len]
mov	[ecx], edx
jmp	loc_64239BB8
align 10h
mov	eax, [ebp+buffer.head]
jmp	loc_64239BB8
align 10h
align 4
align 10h
align 4
align 10h
align 4
align 10h
align 4
align 10h
align 4
align 10h
align 4
align 10h
align 4
align 10h
align 4
align 10h
align 4
align 10h
align 4
align 10h
align 4
align 10h
align 4
align 10h
align 10h
			
push	ebp
mov	ebp, esp
sub	esp, 18h
mov	[ebp+var_8], ebx
mov	ebx, ds:__imp___iob
mov	[ebp+var_4], esi
lea	esi, [ebp+arg_4]
mov	dword ptr [esp+8], 17h 
mov	dword ptr [esp+4], 1 
add	ebx, 40h
mov	[esp+0Ch], ebx	
mov	dword ptr [esp], offset	aMingwRuntimeFa	
call	_fwrite
mov	eax, [ebp+arg_0]
mov	[esp+8], esi	
mov	[esp], ebx	
mov	[esp+4], eax	
call	_vfprintf
call	_abort
			
push	ebp
mov	ebp, esp
sub	esp, 48h
test	ecx, ecx
mov	[ebp+var_C], ebx
mov	ebx, eax
mov	[ebp+var_8], esi
mov	esi, edx
mov	[ebp+var_4], edi
mov	edi, ecx
jnz	short loc_6423A136
			
mov	ebx, [ebp+var_C]
mov	esi, [ebp+var_8]
mov	edi, [ebp+var_4]
mov	esp, ebp
pop	ebp
retn
lea	eax, [ebp+Buffer]
mov	dword ptr [esp+8], 1Ch 
mov	[esp+4], eax	
mov	[esp], ebx	
call	_VirtualQuery@12
sub	esp, 0Ch
test	eax, eax
jz	short loc_6423A1CA
mov	eax, [ebp+Buffer.Protect]
cmp	eax, 4
jz	short loc_6423A185
cmp	eax, 40h
jz	short loc_6423A185
lea	eax, [ebp+flOldProtect]
mov	[esp+0Ch], eax	
mov	eax, [ebp+Buffer.RegionSize]
mov	dword ptr [esp+8], 40h 
mov	[esp+4], eax	
mov	eax, [ebp+Buffer.BaseAddress]
mov	[esp], eax	
call	_VirtualProtect@16
sub	esp, 10h
			
mov	[esp+8], edi	
mov	[esp+4], esi	
mov	[esp], ebx	
call	_memcpy
mov	eax, [ebp+Buffer.Protect]
cmp	eax, 4
jz	short loc_6423A129
cmp	eax, 40h
jz	short loc_6423A129
lea	eax, [ebp+flOldProtect]
mov	[esp+0Ch], eax	
mov	eax, [ebp+flOldProtect]
mov	[esp+8], eax	
mov	eax, [ebp+Buffer.RegionSize]
mov	[esp+4], eax	
mov	eax, [ebp+Buffer.BaseAddress]
mov	[esp], eax	
call	_VirtualProtect@16
sub	esp, 10h
jmp	loc_6423A129
mov	[esp+8], ebx
mov	dword ptr [esp+4], 1Ch 
mov	dword ptr [esp], offset	aVirtualqueryFa	
call	___report_error
align 10h
public __pei386_runtime_relocator
push	ebp
mov	ebp, esp
sub	esp, 38h
mov	eax, ds:_was_init_31080
mov	[ebp+var_C], ebx
mov	[ebp+var_8], esi
mov	[ebp+var_4], edi
test	eax, eax
jz	short loc_6423A215
			
mov	ebx, [ebp+var_C]
mov	esi, [ebp+var_8]
mov	edi, [ebp+var_4]
mov	esp, ebp
pop	ebp
retn
mov	eax, offset __RUNTIME_PSEUDO_RELOC_LIST_END__
sub	eax, offset __RUNTIME_PSEUDO_RELOC_LIST_END__
cmp	eax, 7
mov	ds:_was_init_31080, 1
jle	short loc_6423A208
cmp	eax, 0Bh
mov	ebx, offset __RUNTIME_PSEUDO_RELOC_LIST_END__
jle	short loc_6423A260
mov	edi, ds:__RUNTIME_PSEUDO_RELOC_LIST_END__
test	edi, edi
jnz	short loc_6423A260
mov	esi, ds:dword_6426FB34
test	esi, esi
jnz	short loc_6423A260
mov	ecx, ds:dword_6426FB38
test	ecx, ecx
jnz	short loc_6423A260
mov	ebx, offset dword_6426FB3C
nop
lea	esi, [esi+0]
			
mov	edx, [ebx]
test	edx, edx
jnz	short loc_6423A2C2
mov	eax, [ebx+4]
test	eax, eax
jnz	short loc_6423A2C2
mov	eax, [ebx+8]
cmp	eax, 1
jnz	loc_6423A386
add	ebx, 0Ch
cmp	ebx, offset __RUNTIME_PSEUDO_RELOC_LIST_END__
jnb	short loc_6423A208
mov	esi, 641C0000h
mov	eax, [ebx+4]
mov	ecx, [ebx]
movzx	edx, byte ptr [ebx+8]
add	eax, esi
add	ecx, esi
cmp	edx, 10h
mov	edi, [ecx]
jz	short loc_6423A300
cmp	edx, 20h
jz	loc_6423A340
cmp	edx, 8
jz	short loc_6423A320
mov	[ebp+var_1C], 0
mov	[esp+4], edx	
mov	dword ptr [esp], offset	aUnknownPseudoR	
call	___report_error
			
cmp	ebx, offset __RUNTIME_PSEUDO_RELOC_LIST_END__
jnb	loc_6423A208
mov	esi, 641C0000h
lea	edi, [ebp+var_20]
mov	eax, [ebx+4]
mov	ecx, 4		
add	eax, esi
mov	edx, [eax]
add	edx, [ebx]
add	ebx, 8
mov	[ebp+var_20], edx
mov	edx, edi	
call	___write_memory
cmp	ebx, offset __RUNTIME_PSEUDO_RELOC_LIST_END__
jb	short loc_6423A2D6
jmp	loc_6423A208
align 10h
movzx	edx, word ptr [eax]
test	dx, dx
js	short loc_6423A377
sub	edx, ecx
lea	edi, [edx+edi]
mov	[ebp+var_1C], edi
mov	ecx, 2		
lea	edx, [ebp+var_1C] 
call	___write_memory
jmp	short loc_6423A354
align 10h
movzx	edx, byte ptr [eax]
test	dl, dl
js	short loc_6423A368
sub	edx, ecx
lea	edi, [edx+edi]
mov	[ebp+var_1C], edi
mov	ecx, 1		
lea	edx, [ebp+var_1C] 
call	___write_memory
jmp	short loc_6423A354
align 10h
add	edi, [eax]
lea	edx, [ebp+var_1C] 
sub	edi, ecx
mov	ecx, 4		
mov	[ebp+var_1C], edi
call	___write_memory
			
add	ebx, 0Ch
cmp	ebx, offset __RUNTIME_PSEUDO_RELOC_LIST_END__
jb	loc_6423A289
jmp	loc_6423A208
or	edx, 0FFFFFF00h
sub	edx, ecx
add	edx, edi
mov	[ebp+var_1C], edx
jmp	short loc_6423A32F
or	edx, 0FFFF0000h
sub	edx, ecx
add	edx, edi
mov	[ebp+var_1C], edx
jmp	short loc_6423A310
mov	[esp+4], eax	
mov	dword ptr [esp], offset	aUnknownPseud_0	
call	___report_error
align 10h
public ___do_global_dtors
push	ebp
mov	ebp, esp
sub	esp, 8
mov	eax, _p_1653
mov	eax, [eax]
test	eax, eax
jz	short locret_6423A3C8
call	eax
mov	eax, _p_1653
lea	edx, [eax+4]
mov	eax, [eax+4]
mov	_p_1653, edx
test	eax, eax
jnz	short loc_6423A3B1
leave
retn
align 10h
public ___do_global_ctors
push	ebp
mov	ebp, esp
push	esi
push	ebx
sub	esp, 10h
mov	ebx, ds:___CTOR_LIST__
cmp	ebx, 0FFFFFFFFh
jz	short loc_6423A410
test	ebx, ebx
jz	short loc_6423A3FA
lea	esi, ___CTOR_LIST__[ebx*4]
xchg	ax, ax
call	dword ptr [esi]
sub	esi, 4
sub	ebx, 1
jnz	short loc_6423A3F0
mov	dword ptr [esp], offset	___do_global_dtors 
call	_atexit
add	esp, 10h
pop	ebx
pop	esi
pop	ebp
retn
align 10h
xor	ebx, ebx
jmp	short loc_6423A416
mov	ebx, eax
lea	eax, [ebx+1]
mov	edx, ds:___CTOR_LIST__[eax*4]
test	edx, edx
jnz	short loc_6423A414
jmp	short loc_6423A3E3
align 10h
public ___main
push	ebp
mov	ebp, esp
sub	esp, 8
mov	ecx, ds:_initialized
test	ecx, ecx
jz	short loc_6423A442
leave
retn
mov	ds:_initialized, 1
leave
jmp	short ___do_global_ctors
align 10h
public _DllMain@12
			
push	ebp
mov	eax, 1
mov	ebp, esp
pop	ebp
retn	0Ch
align 10h
public ___udivdi3
			
push	ebp
mov	ebp, esp
push	edi
push	esi
push	ebx
sub	esp, 2Ch
mov	ebx, dword ptr [ebp+d]
mov	eax, dword ptr [ebp+d+4]
mov	edx, dword ptr [ebp+n]
mov	[ebp+var_1C], edx
mov	esi, dword ptr [ebp+n+4]
test	eax, eax
jnz	short loc_6423A4AC
cmp	ebx, esi
ja	short loc_6423A4D8
test	ebx, ebx
jnz	short loc_6423A48F
mov	eax, 1
xor	edx, edx
div	ebx
mov	ebx, eax
xor	edx, edx
mov	eax, esi
div	ebx
mov	esi, eax
mov	edi, [ebp+var_1C]
mov	eax, edi
div	ebx
mov	edi, eax
mov	eax, edi
mov	edx, esi
add	esp, 2Ch
pop	ebx
pop	esi
pop	edi
leave
retn
cmp	eax, esi
ja	short loc_6423A4C8
bsr	edi, eax
xor	edi, 1Fh
jnz	short loc_6423A4F0
cmp	eax, esi
jb	loc_6423A544
cmp	ebx, [ebp+var_1C]
jbe	short loc_6423A544
lea	esi, [esi+0]
xor	esi, esi
xor	edi, edi
			
mov	eax, edi
mov	edx, esi
add	esp, 2Ch
pop	ebx
pop	esi
pop	edi
leave
retn
mov	edi, edx
mov	edx, esi
mov	eax, edi
div	ebx
mov	edi, eax
xor	esi, esi
mov	eax, edi
mov	edx, esi
add	esp, 2Ch
pop	ebx
pop	esi
pop	edi
leave
retn
mov	ecx, edi
shl	eax, cl
mov	[ebp+var_20], eax
mov	edx, 20h
sub	edx, edi
mov	[ebp+var_2C], edx
mov	eax, ebx
mov	cl, byte ptr [ebp+var_2C]
shr	eax, cl
or	eax, [ebp+var_20]
mov	[ebp+var_20], eax
mov	ecx, edi
shl	ebx, cl
mov	eax, esi
mov	cl, byte ptr [ebp+var_2C]
shr	eax, cl
mov	ecx, edi
shl	esi, cl
mov	edx, [ebp+var_1C]
mov	cl, byte ptr [ebp+var_2C]
shr	edx, cl
or	esi, edx
mov	ecx, eax
mov	eax, esi
mov	edx, ecx
div	[ebp+var_20]
mov	ecx, edx
mov	esi, eax
mul	ebx
cmp	ecx, edx
jb	short loc_6423A564
jz	short loc_6423A558
mov	edi, esi
xor	esi, esi
jmp	short loc_6423A4CC
align 4
			
xor	esi, esi
mov	edi, 1
mov	eax, edi
mov	edx, esi
add	esp, 2Ch
pop	ebx
pop	esi
pop	edi
leave
retn
align 4
mov	edx, [ebp+var_1C]
mov	ecx, edi
shl	edx, cl
cmp	edx, eax
jnb	short loc_6423A53C
nop
lea	edi, [esi-1]
xor	esi, esi
jmp	loc_6423A4CC
align 10h
public ___umoddi3
			
push	ebp
mov	ebp, esp
push	edi
push	esi
push	ebx
sub	esp, 1Ch
mov	edx, dword ptr [ebp+u]
mov	esi, dword ptr [ebp+v]
mov	edi, dword ptr [ebp+v+4]
mov	eax, edx
mov	ecx, edx
mov	ebx, dword ptr [ebp+u+4]
test	edi, edi
jnz	short loc_6423A5A8
cmp	esi, ebx
jbe	loc_6423A624
mov	edx, ebx
div	esi
mov	eax, edx
xor	edx, edx
add	esp, 1Ch
pop	ebx
pop	esi
pop	edi
leave
retn
align 4
cmp	edi, ebx
ja	loc_6423A644
bsr	edx, edi
xor	edx, 1Fh
mov	[ebp+var_1C], edx
jz	loc_6423A650
mov	cl, byte ptr [ebp+var_1C]
shl	edi, cl
mov	[ebp+var_20], edi
mov	edi, 20h
sub	edi, [ebp+var_1C]
mov	edx, esi
mov	ecx, edi
shr	edx, cl
or	edx, [ebp+var_20]
mov	[ebp+var_20], edx
mov	cl, byte ptr [ebp+var_1C]
shl	esi, cl
mov	[ebp+var_24], esi
mov	edx, ebx
shl	edx, cl
mov	esi, eax
shl	esi, cl
mov	ecx, edi
shr	eax, cl
or	eax, edx
shr	ebx, cl
mov	edx, ebx
div	[ebp+var_20]
mov	ebx, edx
mul	[ebp+var_24]
cmp	ebx, edx
jb	short loc_6423A668
jz	short loc_6423A670
			
sub	esi, eax
sbb	ebx, edx
mov	cl, byte ptr [ebp+var_1C]
shr	esi, cl
mov	eax, ebx
mov	ecx, edi
shl	eax, cl
or	eax, esi
mov	edx, ebx
mov	cl, byte ptr [ebp+var_1C]
shr	edx, cl
add	esp, 1Ch
pop	ebx
pop	esi
pop	edi
leave
retn
align 4
test	esi, esi
jnz	short loc_6423A633
mov	eax, 1
xor	edx, edx
div	esi
mov	esi, eax
mov	eax, ebx
xor	edx, edx
div	esi
mov	eax, ecx
div	esi
jmp	loc_6423A599
align 4
mov	eax, edx
mov	edx, ebx
add	esp, 1Ch
pop	ebx
pop	esi
pop	edi
leave
retn
cmp	edi, ebx
jb	short loc_6423A658
cmp	esi, eax
ja	short loc_6423A65C
sub	ecx, esi
sbb	ebx, edi
mov	eax, ecx
mov	edx, ebx
add	esp, 1Ch
pop	ebx
pop	esi
pop	edi
leave
retn
			
sub	eax, [ebp+var_24]
sbb	edx, [ebp+var_20]
jmp	short loc_6423A603
cmp	esi, eax
jb	short loc_6423A668
mov	edx, ebx
jmp	short loc_6423A603
public __alloca
			
push	ecx
lea	ecx, [esp+4+arg_0]
cmp	eax, 1000h
jb	short loc_6423A699
sub	ecx, 1000h
or	dword ptr [ecx], 0
sub	eax, 1000h
cmp	eax, 1000h
ja	short loc_6423A684
sub	ecx, eax
or	dword ptr [ecx], 0
mov	eax, esp
mov	esp, ecx
mov	ecx, [eax]
mov	eax, [eax+4]
push	eax
retn
align 4
public ___divdi3
			
			
push	ebp
mov	ebp, esp
push	edi
push	esi
push	ebx
sub	esp, 2Ch
mov	edx, dword ptr [ebp+u]
mov	ecx, dword ptr [ebp+u+4]
mov	ebx, dword ptr [ebp+v]
mov	esi, dword ptr [ebp+v+4]
mov	[ebp+var_20], ebx
mov	[ebp+var_1C], esi
test	ecx, ecx
js	loc_6423A764
xor	ebx, ebx
mov	eax, [ebp+var_1C]
test	eax, eax
js	loc_6423A77B
			
mov	esi, [ebp+var_20]
mov	eax, [ebp+var_1C]
mov	[ebp+var_20], edx
mov	edi, ecx
test	eax, eax
jnz	short loc_6423A700
cmp	esi, ecx
jbe	short loc_6423A720
mov	ecx, edx
mov	edx, edi
mov	eax, ecx
div	esi
mov	ecx, eax
xor	edi, edi
jmp	short loc_6423A708
align 10h
cmp	eax, ecx
jbe	short loc_6423A744
xor	edi, edi
xor	ecx, ecx
			
mov	eax, ecx
mov	edx, edi
test	c, c
jz	short loc_6423A717
neg	eax
adc	edx, 0
neg	edx
add	esp, 2Ch
pop	c
pop	esi
pop	edi
leave
retn
align 10h
test	esi, esi
jnz	short loc_6423A72F
mov	eax, 1
xor	edx, edx
div	esi
mov	esi, eax
xor	edx, edx
mov	eax, edi
div	esi
mov	edi, eax
mov	ecx, [ebp+var_20]
mov	eax, ecx
div	esi
mov	ecx, eax
jmp	short loc_6423A708
align 4
bsr	edx, eax
xor	edx, 1Fh
mov	[ebp+var_24], edx
jnz	short loc_6423A78C
cmp	eax, ecx
jb	short loc_6423A758
cmp	esi, [ebp+var_20]
ja	short loc_6423A704
xor	edi, edi
mov	ecx, 1
jmp	short loc_6423A708
align 4
neg	edx
adc	ecx, 0
neg	ecx
mov	ebx, 0FFFFFFFFh
mov	eax, [ebp+var_1C]
test	eax, eax
jns	loc_6423A6DC
not	c
neg	[ebp+var_20]
adc	[ebp+var_1C], 0
neg	[ebp+var_1C]
jmp	loc_6423A6DC
mov	cl, byte ptr [ebp+var_24]
shl	eax, cl
mov	[ebp+var_28], eax
mov	eax, 20h
sub	eax, [ebp+var_24]
mov	[ebp+var_2C], eax
mov	edx, esi
mov	cl, byte ptr [ebp+var_2C]
shr	edx, cl
or	edx, [ebp+var_28]
mov	[ebp+var_28], edx
mov	cl, byte ptr [ebp+var_24]
shl	esi, cl
mov	edx, edi
mov	cl, byte ptr [ebp+var_2C]
shr	edx, cl
mov	cl, byte ptr [ebp+var_24]
shl	edi, cl
mov	eax, [ebp+var_20]
mov	cl, byte ptr [ebp+var_2C]
shr	eax, cl
or	edi, eax
mov	eax, edi
div	[ebp+var_28]
mov	ecx, edx
mov	edi, eax
mul	esi
cmp	ecx, edx
jb	short loc_6423A7F0
jz	short loc_6423A7E4
mov	ecx, edi
xor	edi, edi
jmp	loc_6423A708
align 4
mov	edx, [ebp+var_20]
mov	cl, byte ptr [ebp+var_24]
shl	edx, cl
cmp	edx, eax
jnb	short loc_6423A7D8
lea	ecx, [edi-1]
xor	edi, edi
jmp	loc_6423A708
align 4
public ___moddi3
			
push	ebp
mov	ebp, esp
push	edi
push	esi
push	ebx
sub	esp, 3Ch
mov	edx, dword ptr [ebp+u]
mov	ecx, dword ptr [ebp+u+4]
mov	ebx, dword ptr [ebp+v]
mov	esi, dword ptr [ebp+v+4]
mov	[ebp+var_30], ebx
mov	[ebp+var_2C], esi
test	ecx, ecx
js	loc_6423A8F0
mov	[ebp+c], 0
mov	ebx, [ebp+var_2C]
test	ebx, ebx
js	loc_6423A8E0
lea	ebx, [ebp+w]
mov	edi, [ebp+var_30]
mov	eax, [ebp+var_2C]
mov	[ebp+var_3C], edx
mov	[ebp+var_34], edx
mov	esi, ecx
test	eax, eax
jnz	short loc_6423A870
cmp	edi, ecx
jbe	short loc_6423A8C0
mov	eax, edx
mov	edx, ecx
div	edi
mov	[ebx], edx
mov	dword ptr [ebx+4], 0
mov	eax, [ebp+c]
test	eax, eax
jnz	short loc_6423A880
mov	eax, dword ptr [ebp+w]
mov	edx, dword ptr [ebp+w+4]
add	esp, 3Ch
pop	ebx
pop	esi
pop	edi
leave
retn
align 10h
cmp	eax, ecx
jbe	short loc_6423A898
mov	[ebx], edx
mov	[ebx+4], ecx
			
mov	eax, [ebp+c]
test	eax, eax
jz	short loc_6423A860
mov	eax, dword ptr [ebp+w]
mov	edx, dword ptr [ebp+w+4]
neg	eax
adc	edx, 0
neg	edx
add	esp, 3Ch
pop	ebx
pop	esi
pop	edi
leave
retn
align 4
bsr	edx, eax
xor	edx, 1Fh
mov	[ebp+var_30], edx
jnz	short loc_6423A904
cmp	eax, ecx
jb	short loc_6423A8AC
cmp	edi, [ebp+var_34]
ja	short loc_6423A8B6
mov	ecx, [ebp+var_34]
sub	ecx, edi
sbb	esi, eax
mov	[ebp+var_34], ecx
mov	eax, [ebp+var_34]
mov	[ebx], eax
mov	[ebx+4], esi
jmp	short loc_6423A879
test	edi, edi
jnz	short loc_6423A8CF
mov	eax, 1
xor	edx, edx
div	edi
mov	edi, eax
mov	eax, esi
xor	edx, edx
div	edi
mov	eax, [ebp+var_34]
div	edi
jmp	loc_6423A850
align 10h
neg	[ebp+var_30]
adc	[ebp+var_2C], 0
neg	[ebp+var_2C]
jmp	loc_6423A831
align 10h
neg	edx
adc	ecx, 0
neg	ecx
mov	[ebp+c], 0FFFFFFFFh
jmp	loc_6423A826
align 4
mov	edx, eax
mov	cl, byte ptr [ebp+var_30]
shl	edx, cl
mov	eax, 20h
sub	eax, [ebp+var_30]
mov	[ebp+var_34], eax
mov	eax, edi
mov	cl, byte ptr [ebp+var_34]
shr	eax, cl
or	eax, edx
mov	[ebp+var_44], eax
mov	cl, byte ptr [ebp+var_30]
shl	edi, cl
mov	[ebp+var_40], edi
mov	edx, esi
shl	edx, cl
mov	edi, [ebp+var_3C]
shl	edi, cl
mov	eax, [ebp+var_3C]
mov	cl, byte ptr [ebp+var_34]
shr	eax, cl
or	eax, edx
shr	esi, cl
mov	edx, esi
div	[ebp+var_44]
mov	esi, edx
mul	[ebp+var_40]
cmp	esi, edx
jb	short loc_6423A970
jz	short loc_6423A978
			
sub	edi, eax
sbb	esi, edx
mov	cl, byte ptr [ebp+var_30]
shr	edi, cl
mov	eax, esi
mov	cl, byte ptr [ebp+var_34]
shl	eax, cl
or	eax, edi
mov	cl, byte ptr [ebp+var_30]
shr	esi, cl
mov	[ebx], eax
mov	[ebx+4], esi
jmp	loc_6423A879
			
sub	eax, [ebp+var_40]
sbb	edx, [ebp+var_44]
jmp	short loc_6423A94F
cmp	edi, eax
jb	short loc_6423A970
mov	edx, esi
jmp	short loc_6423A94F
align 4
align 10h
align 4
align 10h
align 4
align 10h
align 4
align 10h
align 4
align 10h
align 4
align 10h
align 4
align 10h
align 4
align 10h
align 4
align 10h
align 4
align 10h
align 4
align 10h
align 4
align 10h
align 4
align 10h
align 4
align 10h
align 4
align 10h
align 4
align 10h
align 4
align 10h
align 4
align 10h
align 4
align 10h
align 4
align 10h
align 4
align 10h
align 4
align 10h
align 4
align 10h
align 4
align 10h
align 4
align 10h
align 4
align 10h
align 4
align 10h
align 4
align 10h
align 4
align 10h
align 4
align 10h
align 4
align 10h
align 4
align 10h
align 4
align 10h
align 4
align 10h
align 4
align 10h
align 4
align 10h
align 4
align 10h
align 4
align 10h
align 4
align 10h
align 4
align 10h
align 4
align 10h
align 4
align 10h
align 4
align 10h
align 4
align 10h
push	ebp
mov	ebp, esp
sub	esp, 18h
call	___gcc_register_frame
mov	dword ptr [esp], offset	___gcc_deregister_frame	
call	_atexit
leave
retn
align 4
public ___CTOR_LIST__
			
			
align 8
public __DTOR_LIST__
align 200h
dd 80h dup(?)
assume cs:_data

public __data_start__
			
			
align 10h
			
			
dd offset aInfo		
dd 1
			
dd 0			
db 4 dup(0)
dq 0			
dd offset aWarning	
dd SILC_LOG_WARNING_0	
dd 0			
dd 0			
			
dd 0			
db 4 dup(0)
dq 0			
dd offset aError	
dd SILC_LOG_ERROR_0	
dd 0			
dd 0			
			
dd 0			
db 4 dup(0)
dq 0			
dd offset aFatal	
dd SILC_LOG_FATAL_0	
dd 0			
dd 0			
public _tab_5b
public _tab_ef
public _ror4
			
db 7, 0Fh
public _ashx
			
db 0Eh,	7
align 20h
public _qt0
			
db 0Ah,	4, 2, 8, 0Bh, 0Dh, 0Fh,	7, 6, 0Eh, 3, 1, 9, 4
db 0, 0Ah, 0Ch,	5
public _qt1
			
db 9, 0Dh, 1, 0Eh, 2, 0Bh, 4, 0Ch, 3, 7, 6, 0Dh, 0Ah, 5
db 0Fh,	9, 0, 8
public _qt2
			
db 7, 1, 4, 0Ch, 7, 5, 1, 6, 9,	0Ah, 0,	0Eh, 0Dh, 8, 2
db 0Bh,	3, 0Fh
public _qt3
			
db 0Ah,	0Bh, 9,	5, 1, 0Ch, 3, 0Dh, 0Eh,	6, 4, 7, 0Fh, 2
db 0, 8, 0Ah
public _tma_mp_s_rmap
			
			
public _KARATSUBA_MUL_CUTOFF
public _KARATSUBA_SQR_CUTOFF
public _TOOM_MUL_CUTOFF
public _TOOM_SQR_CUTOFF
			
			
public _silc_ske_status_string
			
			
dd offset aUnsupportedGro, offset aUnsupportedCip, offset aUnsupportedP_0 
dd offset aUnsupportedHas, offset aUnsupportedHma, offset aUnsupportedPub
dd offset aIncorrectSigna, offset aBadOrUnsupport, offset aInvalidCookie
dd offset aRemoteDidNotPr, offset aBadReservedF_0, offset aBadPayloadLe_0
dd offset aErrorComputing, offset aSystemOutOfM_0, offset aKeyExchangeTim
dd 0
			
			
align 10h
			
			
public __data_end__
align 1000h
assume cs:_rdata

			
align 20h
			
			
db 2 dup(6), 2 dup(1)
			
			
dw 0Bh,	0Ch, 6 dup(1100h), 0Dh,	0Eh, 7 dup(1100h), 0Fh
dw 0Fh dup(1100h), 10h,	0CAh dup(1100h), 11h, 2	dup(1100h)
dw 12h,	0D2h dup(1100h), 13h, 129h dup(1100h)
align 10h
			
			
db 2 dup(0CAh),	4 dup(0DCh), 2 dup(0CAh), 0Bh dup(0DCh)
db 5 dup(1), 4 dup(0DCh), 8 dup(0E6h), 0F0h, 0E6h, 3 dup(0DCh)
db 3 dup(0E6h),	2 dup(0DCh), 11h dup(0), 2 dup(0EAh), 0E9h
db 0Dh dup(0E6h), 113h dup(0), 4 dup(0E6h), 10Ah dup(0)
db 0DCh, 4 dup(0E6h), 0DCh, 3 dup(0E6h), 0DEh, 0DCh, 6 dup(0E6h)
db 0, 5	dup(0DCh), 2 dup(0E6h),	0DCh, 2	dup(0E6h), 0DEh
db 0E4h, 0E6h, 0Ah, 0Bh, 0Ch, 0Dh, 0Eh,	0Fh, 10h, 11h
db 12h,	13h, 0,	14h, 15h, 16h, 0, 17h, 0, 18h, 19h, 0
db 0E6h, 86h dup(0), 1Bh, 1Ch, 1Dh, 1Eh, 1Fh, 20h, 21h
db 22h,	2 dup(0E6h), 0DCh, 1Ah dup(0), 23h, 65h	dup(0)
db 7 dup(0E6h),	2 dup(0), 4 dup(0E6h), 0DCh, 0E6h, 2 dup(0)
db 2 dup(0E6h),	0, 0DCh, 2 dup(0E6h), 0DCh, 23h	dup(0)
db 24h,	1Eh dup(0), 0E6h, 0DCh,	2 dup(0E6h), 0DCh, 2 dup(0E6h)
db 3 dup(0DCh),	0E6h, 2	dup(0DCh), 0E6h, 0DCh, 3 dup(0E6h)
db 0DCh, 0E6h, 0DCh, 0E6h, 0DCh, 0E6h, 0DCh, 2 dup(0E6h)
db 0F1h	dup(0),	7, 10h dup(0), 9, 3 dup(0), 0E6h, 0DCh
db 2 dup(0E6h),	67h dup(0), 7, 10h dup(0), 9, 6Eh dup(0)
db 7, 10h dup(0), 9, 6Eh dup(0), 7, 10h	dup(0),	9, 6Eh dup(0)
db 7, 10h dup(0), 9, 7Fh dup(0), 9, 7Fh	dup(0),	9, 7 dup(0)
db 54h,	5Bh, 76h dup(0), 9, 7Fh	dup(0),	9, 7Ch dup(0)
db 9, 6Dh dup(0), 2 dup(67h), 9, 0Dh dup(0), 4 dup(6Bh)
db 6Ch dup(0), 2 dup(76h), 0Eh dup(0), 4 dup(7Ah), 4Ch dup(0)
db 2 dup(0DCh),	1Bh dup(0), 0DCh, 0, 0DCh, 0, 0D8h, 37h	dup(0)
db 81h,	82h, 0,	84h, 5 dup(0), 4 dup(82h), 2 dup(0), 82h
db 0, 2	dup(0E6h), 9, 0, 2 dup(0E6h), 3Eh dup(0), 0DCh
db 70h dup(0), 7, 0, 9,	0DAh dup(0), 9,	1Fh dup(0), 9
db 9Dh dup(0), 9, 0D6h dup(0), 0E4h, 126h dup(0), 2 dup(0E6h)
db 2 dup(1), 4 dup(0E6h), 3 dup(1), 2 dup(0E6h), 4 dup(0)
db 0E6h, 3 dup(0), 2 dup(1), 0E6h, 0DCh, 0E6h, 1, 3Fh dup(0)
db 0DAh, 0E4h, 0E8h, 0DEh, 2 dup(0E0h),	69h dup(0), 2 dup(8)
db 83h dup(0), 1Ah, 101h dup(0), 4 dup(0E6h), 141h dup(0)
db 2 dup(0D8h),	3 dup(1), 3 dup(0), 0E2h, 5 dup(0D8h)
db 8 dup(0), 8 dup(0DCh), 2 dup(0), 5 dup(0E6h), 2 dup(0DCh)
db 1Eh dup(0), 4 dup(0E6h), 52h	dup(0)
			
			
			
decomposition <0A8h, 0FFFFh, 2>
decomposition <0AAh, 0FFFFh, 6>
decomposition <0AFh, 0FFFFh, 8>
decomposition <0B2h, 0FFFFh, 0Ch>
decomposition <0B3h, 0FFFFh, 0Eh>
decomposition <0B4h, 0FFFFh, 10h>
decomposition <0B5h, 0FFFFh, 14h>
decomposition <0B8h, 0FFFFh, 17h>
decomposition <0B9h, 0FFFFh, 1Bh>
decomposition <0BAh, 0FFFFh, 1Dh>
decomposition <0BCh, 0FFFFh, 1Fh>
decomposition <0BDh, 0FFFFh, 25h>
decomposition <0BEh, 0FFFFh, 2Bh>
decomposition <0C0h, 31h, 0FFFFh>
decomposition <0C1h, 35h, 0FFFFh>
decomposition <0C2h, 39h, 0FFFFh>
decomposition <0C3h, 3Dh, 0FFFFh>
decomposition <0C4h, 41h, 0FFFFh>
decomposition <0C5h, 45h, 0FFFFh>
decomposition <0C7h, 49h, 0FFFFh>
decomposition <0C8h, 4Dh, 0FFFFh>
decomposition <0C9h, 51h, 0FFFFh>
decomposition <0CAh, 55h, 0FFFFh>
decomposition <0CBh, 59h, 0FFFFh>
decomposition <0CCh, 5Dh, 0FFFFh>
decomposition <0CDh, 61h, 0FFFFh>
decomposition <0CEh, 65h, 0FFFFh>
decomposition <0CFh, 69h, 0FFFFh>
decomposition <0D1h, 6Dh, 0FFFFh>
decomposition <0D2h, 71h, 0FFFFh>
decomposition <0D3h, 75h, 0FFFFh>
decomposition <0D4h, 79h, 0FFFFh>
decomposition <0D5h, 7Dh, 0FFFFh>
decomposition <0D6h, 81h, 0FFFFh>
decomposition <0D9h, 85h, 0FFFFh>
decomposition <0DAh, 89h, 0FFFFh>
decomposition <0DBh, 8Dh, 0FFFFh>
decomposition <0DCh, 91h, 0FFFFh>
decomposition <0DDh, 95h, 0FFFFh>
decomposition <0E0h, 99h, 0FFFFh>
decomposition <0E1h, 9Dh, 0FFFFh>
decomposition <0E2h, 0A1h, 0FFFFh>
decomposition <0E3h, 0A5h, 0FFFFh>
decomposition <0E4h, 0A9h, 0FFFFh>
decomposition <0E5h, 0ADh, 0FFFFh>
decomposition <0E7h, 0B1h, 0FFFFh>
decomposition <0E8h, 0B5h, 0FFFFh>
decomposition <0E9h, 0B9h, 0FFFFh>
decomposition <0EAh, 0BDh, 0FFFFh>
decomposition <0EBh, 0C1h, 0FFFFh>
decomposition <0ECh, 0C5h, 0FFFFh>
decomposition <0EDh, 0C9h, 0FFFFh>
decomposition <0EEh, 0CDh, 0FFFFh>
decomposition <0EFh, 0D1h, 0FFFFh>
decomposition <0F1h, 0D5h, 0FFFFh>
decomposition <0F2h, 0D9h, 0FFFFh>
decomposition <0F3h, 0DDh, 0FFFFh>
decomposition <0F4h, 0E1h, 0FFFFh>
decomposition <0F5h, 0E5h, 0FFFFh>
decomposition <0F6h, 0E9h, 0FFFFh>
decomposition <0F9h, 0EDh, 0FFFFh>
decomposition <0FAh, 0F1h, 0FFFFh>
decomposition <0FBh, 0F5h, 0FFFFh>
decomposition <0FCh, 0F9h, 0FFFFh>
decomposition <0FDh, 0FDh, 0FFFFh>
decomposition <0FFh, 101h, 0FFFFh>
decomposition <100h, 105h, 0FFFFh>
decomposition <101h, 109h, 0FFFFh>
decomposition <102h, 10Dh, 0FFFFh>
decomposition <103h, 111h, 0FFFFh>
decomposition <104h, 115h, 0FFFFh>
decomposition <105h, 119h, 0FFFFh>
decomposition <106h, 11Dh, 0FFFFh>
decomposition <107h, 121h, 0FFFFh>
decomposition <108h, 125h, 0FFFFh>
decomposition <109h, 129h, 0FFFFh>
decomposition <10Ah, 12Dh, 0FFFFh>
decomposition <10Bh, 131h, 0FFFFh>
decomposition <10Ch, 135h, 0FFFFh>
decomposition <10Dh, 139h, 0FFFFh>
decomposition <10Eh, 13Dh, 0FFFFh>
decomposition <10Fh, 141h, 0FFFFh>
decomposition <112h, 145h, 0FFFFh>
decomposition <113h, 149h, 0FFFFh>
decomposition <114h, 14Dh, 0FFFFh>
decomposition <115h, 151h, 0FFFFh>
decomposition <116h, 155h, 0FFFFh>
decomposition <117h, 159h, 0FFFFh>
decomposition <118h, 15Dh, 0FFFFh>
decomposition <119h, 161h, 0FFFFh>
decomposition <11Ah, 165h, 0FFFFh>
decomposition <11Bh, 169h, 0FFFFh>
decomposition <11Ch, 16Dh, 0FFFFh>
decomposition <11Dh, 171h, 0FFFFh>
decomposition <11Eh, 175h, 0FFFFh>
decomposition <11Fh, 179h, 0FFFFh>
decomposition <120h, 17Dh, 0FFFFh>
decomposition <121h, 181h, 0FFFFh>
decomposition <122h, 185h, 0FFFFh>
decomposition <123h, 189h, 0FFFFh>
decomposition <124h, 18Dh, 0FFFFh>
decomposition <125h, 191h, 0FFFFh>
decomposition <128h, 195h, 0FFFFh>
decomposition <129h, 199h, 0FFFFh>
decomposition <12Ah, 19Dh, 0FFFFh>
decomposition <12Bh, 1A1h, 0FFFFh>
decomposition <12Ch, 1A5h, 0FFFFh>
decomposition <12Dh, 1A9h, 0FFFFh>
decomposition <12Eh, 1ADh, 0FFFFh>
decomposition <12Fh, 1B1h, 0FFFFh>
decomposition <130h, 1B5h, 0FFFFh>
decomposition <132h, 0FFFFh, 1B9h>
decomposition <133h, 0FFFFh, 1BCh>
decomposition <134h, 1BFh, 0FFFFh>
decomposition <135h, 1C3h, 0FFFFh>
decomposition <136h, 1C7h, 0FFFFh>
decomposition <137h, 1CBh, 0FFFFh>
decomposition <139h, 1CFh, 0FFFFh>
decomposition <13Ah, 1D3h, 0FFFFh>
decomposition <13Bh, 1D7h, 0FFFFh>
decomposition <13Ch, 1DBh, 0FFFFh>
decomposition <13Dh, 1DFh, 0FFFFh>
decomposition <13Eh, 1E3h, 0FFFFh>
decomposition <13Fh, 0FFFFh, 1E7h>
decomposition <140h, 0FFFFh, 1EBh>
decomposition <143h, 1EFh, 0FFFFh>
decomposition <144h, 1F3h, 0FFFFh>
decomposition <145h, 1F7h, 0FFFFh>
decomposition <146h, 1FBh, 0FFFFh>
decomposition <147h, 1FFh, 0FFFFh>
decomposition <148h, 203h, 0FFFFh>
decomposition <149h, 0FFFFh, 207h>
decomposition <14Ch, 20Bh, 0FFFFh>
decomposition <14Dh, 20Fh, 0FFFFh>
decomposition <14Eh, 213h, 0FFFFh>
decomposition <14Fh, 217h, 0FFFFh>
decomposition <150h, 21Bh, 0FFFFh>
decomposition <151h, 21Fh, 0FFFFh>
decomposition <154h, 223h, 0FFFFh>
decomposition <155h, 227h, 0FFFFh>
decomposition <156h, 22Bh, 0FFFFh>
decomposition <157h, 22Fh, 0FFFFh>
decomposition <158h, 233h, 0FFFFh>
decomposition <159h, 237h, 0FFFFh>
decomposition <15Ah, 23Bh, 0FFFFh>
decomposition <15Bh, 23Fh, 0FFFFh>
decomposition <15Ch, 243h, 0FFFFh>
decomposition <15Dh, 247h, 0FFFFh>
decomposition <15Eh, 24Bh, 0FFFFh>
decomposition <15Fh, 24Fh, 0FFFFh>
decomposition <160h, 253h, 0FFFFh>
decomposition <161h, 257h, 0FFFFh>
decomposition <162h, 25Bh, 0FFFFh>
decomposition <163h, 25Fh, 0FFFFh>
decomposition <164h, 263h, 0FFFFh>
decomposition <165h, 267h, 0FFFFh>
decomposition <168h, 26Bh, 0FFFFh>
decomposition <169h, 26Fh, 0FFFFh>
decomposition <16Ah, 273h, 0FFFFh>
decomposition <16Bh, 277h, 0FFFFh>
decomposition <16Ch, 27Bh, 0FFFFh>
decomposition <16Dh, 27Fh, 0FFFFh>
decomposition <16Eh, 283h, 0FFFFh>
decomposition <16Fh, 287h, 0FFFFh>
decomposition <170h, 28Bh, 0FFFFh>
decomposition <171h, 28Fh, 0FFFFh>
decomposition <172h, 293h, 0FFFFh>
decomposition <173h, 297h, 0FFFFh>
decomposition <174h, 29Bh, 0FFFFh>
decomposition <175h, 29Fh, 0FFFFh>
decomposition <176h, 2A3h, 0FFFFh>
decomposition <177h, 2A7h, 0FFFFh>
decomposition <178h, 2ABh, 0FFFFh>
decomposition <179h, 2AFh, 0FFFFh>
decomposition <17Ah, 2B3h, 0FFFFh>
decomposition <17Bh, 2B7h, 0FFFFh>
decomposition <17Ch, 2BBh, 0FFFFh>
decomposition <17Dh, 2BFh, 0FFFFh>
decomposition <17Eh, 2C3h, 0FFFFh>
decomposition <17Fh, 0FFFFh, 2C7h>
decomposition <1A0h, 2C9h, 0FFFFh>
decomposition <1A1h, 2CDh, 0FFFFh>
decomposition <1AFh, 2D1h, 0FFFFh>
decomposition <1B0h, 2D5h, 0FFFFh>
decomposition <1C4h, 0FFFFh, 2D9h>
decomposition <1C5h, 0FFFFh, 2DEh>
decomposition <1C6h, 0FFFFh, 2E3h>
decomposition <1C7h, 0FFFFh, 2E8h>
decomposition <1C8h, 0FFFFh, 2EBh>
decomposition <1C9h, 0FFFFh, 2EEh>
decomposition <1CAh, 0FFFFh, 2F1h>
decomposition <1CBh, 0FFFFh, 2F4h>
decomposition <1CCh, 0FFFFh, 2F7h>
decomposition <1CDh, 2FAh, 0FFFFh>
decomposition <1CEh, 2FEh, 0FFFFh>
decomposition <1CFh, 302h, 0FFFFh>
decomposition <1D0h, 306h, 0FFFFh>
decomposition <1D1h, 30Ah, 0FFFFh>
decomposition <1D2h, 30Eh, 0FFFFh>
decomposition <1D3h, 312h, 0FFFFh>
decomposition <1D4h, 316h, 0FFFFh>
decomposition <1D5h, 31Ah, 0FFFFh>
decomposition <1D6h, 320h, 0FFFFh>
decomposition <1D7h, 326h, 0FFFFh>
decomposition <1D8h, 32Ch, 0FFFFh>
decomposition <1D9h, 332h, 0FFFFh>
decomposition <1DAh, 338h, 0FFFFh>
decomposition <1DBh, 33Eh, 0FFFFh>
decomposition <1DCh, 344h, 0FFFFh>
decomposition <1DEh, 34Ah, 0FFFFh>
decomposition <1DFh, 350h, 0FFFFh>
decomposition <1E0h, 356h, 0FFFFh>
decomposition <1E1h, 35Ch, 0FFFFh>
decomposition <1E2h, 362h, 0FFFFh>
decomposition <1E3h, 367h, 0FFFFh>
decomposition <1E6h, 36Ch, 0FFFFh>
decomposition <1E7h, 370h, 0FFFFh>
decomposition <1E8h, 374h, 0FFFFh>
decomposition <1E9h, 378h, 0FFFFh>
decomposition <1EAh, 37Ch, 0FFFFh>
decomposition <1EBh, 380h, 0FFFFh>
decomposition <1ECh, 384h, 0FFFFh>
decomposition <1EDh, 38Ah, 0FFFFh>
decomposition <1EEh, 390h, 0FFFFh>
decomposition <1EFh, 395h, 0FFFFh>
decomposition <1F0h, 39Ah, 0FFFFh>
decomposition <1F1h, 0FFFFh, 39Eh>
decomposition <1F2h, 0FFFFh, 3A1h>
decomposition <1F3h, 0FFFFh, 3A4h>
decomposition <1F4h, 3A7h, 0FFFFh>
decomposition <1F5h, 3ABh, 0FFFFh>
decomposition <1F8h, 3AFh, 0FFFFh>
decomposition <1F9h, 3B3h, 0FFFFh>
decomposition <1FAh, 3B7h, 0FFFFh>
decomposition <1FBh, 3BDh, 0FFFFh>
decomposition <1FCh, 3C3h, 0FFFFh>
decomposition <1FDh, 3C8h, 0FFFFh>
decomposition <1FEh, 3CDh, 0FFFFh>
decomposition <1FFh, 3D2h, 0FFFFh>
decomposition <200h, 3D7h, 0FFFFh>
decomposition <201h, 3DBh, 0FFFFh>
decomposition <202h, 3DFh, 0FFFFh>
decomposition <203h, 3E3h, 0FFFFh>
decomposition <204h, 3E7h, 0FFFFh>
decomposition <205h, 3EBh, 0FFFFh>
decomposition <206h, 3EFh, 0FFFFh>
decomposition <207h, 3F3h, 0FFFFh>
decomposition <208h, 3F7h, 0FFFFh>
decomposition <209h, 3FBh, 0FFFFh>
decomposition <20Ah, 3FFh, 0FFFFh>
decomposition <20Bh, 403h, 0FFFFh>
decomposition <20Ch, 407h, 0FFFFh>
decomposition <20Dh, 40Bh, 0FFFFh>
decomposition <20Eh, 40Fh, 0FFFFh>
decomposition <20Fh, 413h, 0FFFFh>
decomposition <210h, 417h, 0FFFFh>
decomposition <211h, 41Bh, 0FFFFh>
decomposition <212h, 41Fh, 0FFFFh>
decomposition <213h, 423h, 0FFFFh>
decomposition <214h, 427h, 0FFFFh>
decomposition <215h, 42Bh, 0FFFFh>
decomposition <216h, 42Fh, 0FFFFh>
decomposition <217h, 433h, 0FFFFh>
decomposition <218h, 437h, 0FFFFh>
decomposition <219h, 43Bh, 0FFFFh>
decomposition <21Ah, 43Fh, 0FFFFh>
decomposition <21Bh, 443h, 0FFFFh>
decomposition <21Eh, 447h, 0FFFFh>
decomposition <21Fh, 44Bh, 0FFFFh>
decomposition <226h, 44Fh, 0FFFFh>
decomposition <227h, 453h, 0FFFFh>
decomposition <228h, 457h, 0FFFFh>
decomposition <229h, 45Bh, 0FFFFh>
decomposition <22Ah, 45Fh, 0FFFFh>
decomposition <22Bh, 465h, 0FFFFh>
decomposition <22Ch, 46Bh, 0FFFFh>
decomposition <22Dh, 471h, 0FFFFh>
decomposition <22Eh, 477h, 0FFFFh>
decomposition <22Fh, 47Bh, 0FFFFh>
decomposition <230h, 47Fh, 0FFFFh>
decomposition <231h, 485h, 0FFFFh>
decomposition <232h, 48Bh, 0FFFFh>
decomposition <233h, 48Fh, 0FFFFh>
decomposition <2B0h, 0FFFFh, 493h>
decomposition <2B1h, 0FFFFh, 495h>
decomposition <2B2h, 0FFFFh, 498h>
decomposition <2B3h, 0FFFFh, 49Ah>
decomposition <2B4h, 0FFFFh, 49Ch>
decomposition <2B5h, 0FFFFh, 49Fh>
decomposition <2B6h, 0FFFFh, 4A2h>
decomposition <2B7h, 0FFFFh, 4A5h>
decomposition <2B8h, 0FFFFh, 4A7h>
decomposition <2D8h, 0FFFFh, 4A9h>
decomposition <2D9h, 0FFFFh, 4ADh>
decomposition <2DAh, 0FFFFh, 4B1h>
decomposition <2DBh, 0FFFFh, 4B5h>
decomposition <2DCh, 0FFFFh, 4B9h>
decomposition <2DDh, 0FFFFh, 4BDh>
decomposition <2E0h, 0FFFFh, 4C1h>
decomposition <2E1h, 0FFFFh, 4C4h>
decomposition <2E2h, 0FFFFh, 2C7h>
decomposition <2E3h, 0FFFFh, 4C6h>
decomposition <2E4h, 0FFFFh, 4C8h>
decomposition <340h, 4CBh, 0FFFFh>
decomposition <341h, 4CEh, 0FFFFh>
decomposition <343h, 4D1h, 0FFFFh>
decomposition <344h, 4D4h, 0FFFFh>
decomposition <374h, 4D9h, 0FFFFh>
decomposition <37Ah, 0FFFFh, 4DCh>
decomposition <37Eh, 4E0h, 0FFFFh>
decomposition <384h, 0FFFFh, 10h>
decomposition <385h, 4E2h, 4E7h>
decomposition <386h, 4EDh, 0FFFFh>
decomposition <387h, 4F2h, 0FFFFh>
decomposition <388h, 4F5h, 0FFFFh>
decomposition <389h, 4FAh, 0FFFFh>
decomposition <38Ah, 4FFh, 0FFFFh>
decomposition <38Ch, 504h, 0FFFFh>
decomposition <38Eh, 509h, 0FFFFh>
decomposition <38Fh, 50Eh, 0FFFFh>
decomposition <390h, 513h, 0FFFFh>
decomposition <3AAh, 51Ah, 0FFFFh>
decomposition <3ABh, 51Fh, 0FFFFh>
decomposition <3ACh, 524h, 0FFFFh>
decomposition <3ADh, 529h, 0FFFFh>
decomposition <3AEh, 52Eh, 0FFFFh>
decomposition <3AFh, 533h, 0FFFFh>
decomposition <3B0h, 538h, 0FFFFh>
decomposition <3CAh, 53Fh, 0FFFFh>
decomposition <3CBh, 544h, 0FFFFh>
decomposition <3CCh, 549h, 0FFFFh>
decomposition <3CDh, 54Eh, 0FFFFh>
decomposition <3CEh, 553h, 0FFFFh>
decomposition <3D0h, 0FFFFh, 558h>
decomposition <3D1h, 0FFFFh, 55Bh>
decomposition <3D2h, 0FFFFh, 55Eh>
decomposition <3D3h, 561h, 509h>
decomposition <3D4h, 566h, 51Fh>
decomposition <3D5h, 0FFFFh, 56Bh>
decomposition <3D6h, 0FFFFh, 56Eh>
decomposition <3F0h, 0FFFFh, 571h>
decomposition <3F1h, 0FFFFh, 574h>
decomposition <3F2h, 0FFFFh, 577h>
decomposition <3F4h, 0FFFFh, 57Ah>
decomposition <3F5h, 0FFFFh, 57Dh>
decomposition <400h, 580h, 0FFFFh>
decomposition <401h, 585h, 0FFFFh>
decomposition <403h, 58Ah, 0FFFFh>
decomposition <407h, 58Fh, 0FFFFh>
decomposition <40Ch, 594h, 0FFFFh>
decomposition <40Dh, 599h, 0FFFFh>
decomposition <40Eh, 59Eh, 0FFFFh>
decomposition <419h, 5A3h, 0FFFFh>
decomposition <439h, 5A8h, 0FFFFh>
decomposition <450h, 5ADh, 0FFFFh>
decomposition <451h, 5B2h, 0FFFFh>
decomposition <453h, 5B7h, 0FFFFh>
decomposition <457h, 5BCh, 0FFFFh>
decomposition <45Ch, 5C1h, 0FFFFh>
decomposition <45Dh, 5C6h, 0FFFFh>
decomposition <45Eh, 5CBh, 0FFFFh>
decomposition <476h, 5D0h, 0FFFFh>
decomposition <477h, 5D5h, 0FFFFh>
decomposition <4C1h, 5DAh, 0FFFFh>
decomposition <4C2h, 5DFh, 0FFFFh>
decomposition <4D0h, 5E4h, 0FFFFh>
decomposition <4D1h, 5E9h, 0FFFFh>
decomposition <4D2h, 5EEh, 0FFFFh>
decomposition <4D3h, 5F3h, 0FFFFh>
decomposition <4D6h, 5F8h, 0FFFFh>
decomposition <4D7h, 5FDh, 0FFFFh>
decomposition <4DAh, 602h, 0FFFFh>
decomposition <4DBh, 607h, 0FFFFh>
decomposition <4DCh, 60Ch, 0FFFFh>
decomposition <4DDh, 611h, 0FFFFh>
decomposition <4DEh, 616h, 0FFFFh>
decomposition <4DFh, 61Bh, 0FFFFh>
decomposition <4E2h, 620h, 0FFFFh>
decomposition <4E3h, 625h, 0FFFFh>
decomposition <4E4h, 62Ah, 0FFFFh>
decomposition <4E5h, 62Fh, 0FFFFh>
decomposition <4E6h, 634h, 0FFFFh>
decomposition <4E7h, 639h, 0FFFFh>
decomposition <4EAh, 63Eh, 0FFFFh>
decomposition <4EBh, 643h, 0FFFFh>
decomposition <4ECh, 648h, 0FFFFh>
decomposition <4EDh, 64Dh, 0FFFFh>
decomposition <4EEh, 652h, 0FFFFh>
decomposition <4EFh, 657h, 0FFFFh>
decomposition <4F0h, 65Ch, 0FFFFh>
decomposition <4F1h, 661h, 0FFFFh>
decomposition <4F2h, 666h, 0FFFFh>
decomposition <4F3h, 66Bh, 0FFFFh>
decomposition <4F4h, 670h, 0FFFFh>
decomposition <4F5h, 675h, 0FFFFh>
decomposition <4F8h, 67Ah, 0FFFFh>
decomposition <4F9h, 67Fh, 0FFFFh>
decomposition <587h, 0FFFFh, 684h>
decomposition <622h, 689h, 0FFFFh>
decomposition <623h, 68Eh, 0FFFFh>
decomposition <624h, 693h, 0FFFFh>
decomposition <625h, 698h, 0FFFFh>
decomposition <626h, 69Dh, 0FFFFh>
decomposition <675h, 0FFFFh, 6A2h>
decomposition <676h, 0FFFFh, 6A7h>
decomposition <677h, 0FFFFh, 6ACh>
decomposition <678h, 0FFFFh, 6B1h>
decomposition <6C0h, 6B6h, 0FFFFh>
decomposition <6C2h, 6BBh, 0FFFFh>
decomposition <6D3h, 6C0h, 0FFFFh>
decomposition <929h, 6C5h, 0FFFFh>
decomposition <931h, 6CCh, 0FFFFh>
decomposition <934h, 6D3h, 0FFFFh>
decomposition <958h, 6DAh, 0FFFFh>
decomposition <959h, 6E1h, 0FFFFh>
decomposition <95Ah, 6E8h, 0FFFFh>
decomposition <95Bh, 6EFh, 0FFFFh>
decomposition <95Ch, 6F6h, 0FFFFh>
decomposition <95Dh, 6FDh, 0FFFFh>
decomposition <95Eh, 704h, 0FFFFh>
decomposition <95Fh, 70Bh, 0FFFFh>
decomposition <9CBh, 712h, 0FFFFh>
decomposition <9CCh, 719h, 0FFFFh>
decomposition <9DCh, 720h, 0FFFFh>
decomposition <9DDh, 727h, 0FFFFh>
decomposition <9DFh, 72Eh, 0FFFFh>
decomposition <0A33h, 735h, 0FFFFh>
decomposition <0A36h, 73Ch, 0FFFFh>
decomposition <0A59h, 743h, 0FFFFh>
decomposition <0A5Ah, 74Ah, 0FFFFh>
decomposition <0A5Bh, 751h, 0FFFFh>
decomposition <0A5Eh, 758h, 0FFFFh>
decomposition <0B48h, 75Fh, 0FFFFh>
decomposition <0B4Bh, 766h, 0FFFFh>
decomposition <0B4Ch, 76Dh, 0FFFFh>
decomposition <0B5Ch, 774h, 0FFFFh>
decomposition <0B5Dh, 77Bh, 0FFFFh>
decomposition <0B94h, 782h, 0FFFFh>
decomposition <0BCAh, 789h, 0FFFFh>
decomposition <0BCBh, 790h, 0FFFFh>
decomposition <0BCCh, 797h, 0FFFFh>
decomposition <0C48h, 79Eh, 0FFFFh>
decomposition <0CC0h, 7A5h, 0FFFFh>
decomposition <0CC7h, 7ACh, 0FFFFh>
decomposition <0CC8h, 7B3h, 0FFFFh>
decomposition <0CCAh, 7BAh, 0FFFFh>
decomposition <0CCBh, 7C1h, 0FFFFh>
decomposition <0D4Ah, 7CBh, 0FFFFh>
decomposition <0D4Bh, 7D2h, 0FFFFh>
decomposition <0D4Ch, 7D9h, 0FFFFh>
decomposition <0DDAh, 7E0h, 0FFFFh>
decomposition <0DDCh, 7E7h, 0FFFFh>
decomposition <0DDDh, 7EEh, 0FFFFh>
decomposition <0DDEh, 7F8h, 0FFFFh>
decomposition <0E33h, 0FFFFh, 7FFh>
decomposition <0EB3h, 0FFFFh, 806h>
decomposition <0EDCh, 0FFFFh, 80Dh>
decomposition <0EDDh, 0FFFFh, 814h>
decomposition <0F0Ch, 0FFFFh, 81Bh>
decomposition <0F43h, 81Fh, 0FFFFh>
decomposition <0F4Dh, 826h, 0FFFFh>
decomposition <0F52h, 82Dh, 0FFFFh>
decomposition <0F57h, 834h, 0FFFFh>
decomposition <0F5Ch, 83Bh, 0FFFFh>
decomposition <0F69h, 842h, 0FFFFh>
decomposition <0F73h, 849h, 0FFFFh>
decomposition <0F75h, 850h, 0FFFFh>
decomposition <0F76h, 857h, 0FFFFh>
decomposition <0F77h, 0FFFFh, 85Eh>
decomposition <0F78h, 868h, 0FFFFh>
decomposition <0F79h, 0FFFFh, 86Fh>
decomposition <0F81h, 879h, 0FFFFh>
decomposition <0F93h, 880h, 0FFFFh>
decomposition <0F9Dh, 887h, 0FFFFh>
decomposition <0FA2h, 88Eh, 0FFFFh>
decomposition <0FA7h, 895h, 0FFFFh>
decomposition <0FACh, 89Ch, 0FFFFh>
decomposition <0FB9h, 8A3h, 0FFFFh>
decomposition <1026h, 8AAh, 0FFFFh>
decomposition <1E00h, 8B1h, 0FFFFh>
decomposition <1E01h, 8B5h, 0FFFFh>
decomposition <1E02h, 8B9h, 0FFFFh>
decomposition <1E03h, 8BDh, 0FFFFh>
decomposition <1E04h, 8C1h, 0FFFFh>
decomposition <1E05h, 8C5h, 0FFFFh>
decomposition <1E06h, 8C9h, 0FFFFh>
decomposition <1E07h, 8CDh, 0FFFFh>
decomposition <1E08h, 8D1h, 0FFFFh>
decomposition <1E09h, 8D7h, 0FFFFh>
decomposition <1E0Ah, 8DDh, 0FFFFh>
decomposition <1E0Bh, 8E1h, 0FFFFh>
decomposition <1E0Ch, 8E5h, 0FFFFh>
decomposition <1E0Dh, 8E9h, 0FFFFh>
decomposition <1E0Eh, 8EDh, 0FFFFh>
decomposition <1E0Fh, 8F1h, 0FFFFh>
decomposition <1E10h, 8F5h, 0FFFFh>
decomposition <1E11h, 8F9h, 0FFFFh>
decomposition <1E12h, 8FDh, 0FFFFh>
decomposition <1E13h, 901h, 0FFFFh>
decomposition <1E14h, 905h, 0FFFFh>
decomposition <1E15h, 90Bh, 0FFFFh>
decomposition <1E16h, 911h, 0FFFFh>
decomposition <1E17h, 917h, 0FFFFh>
decomposition <1E18h, 91Dh, 0FFFFh>
decomposition <1E19h, 921h, 0FFFFh>
decomposition <1E1Ah, 925h, 0FFFFh>
decomposition <1E1Bh, 929h, 0FFFFh>
decomposition <1E1Ch, 92Dh, 0FFFFh>
decomposition <1E1Dh, 933h, 0FFFFh>
decomposition <1E1Eh, 939h, 0FFFFh>
decomposition <1E1Fh, 93Dh, 0FFFFh>
decomposition <1E20h, 941h, 0FFFFh>
decomposition <1E21h, 945h, 0FFFFh>
decomposition <1E22h, 949h, 0FFFFh>
decomposition <1E23h, 94Dh, 0FFFFh>
decomposition <1E24h, 951h, 0FFFFh>
decomposition <1E25h, 955h, 0FFFFh>
decomposition <1E26h, 959h, 0FFFFh>
decomposition <1E27h, 95Dh, 0FFFFh>
decomposition <1E28h, 961h, 0FFFFh>
decomposition <1E29h, 965h, 0FFFFh>
decomposition <1E2Ah, 969h, 0FFFFh>
decomposition <1E2Bh, 96Dh, 0FFFFh>
decomposition <1E2Ch, 971h, 0FFFFh>
decomposition <1E2Dh, 975h, 0FFFFh>
decomposition <1E2Eh, 979h, 0FFFFh>
decomposition <1E2Fh, 97Fh, 0FFFFh>
decomposition <1E30h, 985h, 0FFFFh>
decomposition <1E31h, 989h, 0FFFFh>
decomposition <1E32h, 98Dh, 0FFFFh>
decomposition <1E33h, 991h, 0FFFFh>
decomposition <1E34h, 995h, 0FFFFh>
decomposition <1E35h, 999h, 0FFFFh>
decomposition <1E36h, 99Dh, 0FFFFh>
decomposition <1E37h, 9A1h, 0FFFFh>
decomposition <1E38h, 9A5h, 0FFFFh>
decomposition <1E39h, 9ABh, 0FFFFh>
decomposition <1E3Ah, 9B1h, 0FFFFh>
decomposition <1E3Bh, 9B5h, 0FFFFh>
decomposition <1E3Ch, 9B9h, 0FFFFh>
decomposition <1E3Dh, 9BDh, 0FFFFh>
decomposition <1E3Eh, 9C1h, 0FFFFh>
decomposition <1E3Fh, 9C5h, 0FFFFh>
decomposition <1E40h, 9C9h, 0FFFFh>
decomposition <1E41h, 9CDh, 0FFFFh>
decomposition <1E42h, 9D1h, 0FFFFh>
decomposition <1E43h, 9D5h, 0FFFFh>
decomposition <1E44h, 9D9h, 0FFFFh>
decomposition <1E45h, 9DDh, 0FFFFh>
decomposition <1E46h, 9E1h, 0FFFFh>
decomposition <1E47h, 9E5h, 0FFFFh>
decomposition <1E48h, 9E9h, 0FFFFh>
decomposition <1E49h, 9EDh, 0FFFFh>
decomposition <1E4Ah, 9F1h, 0FFFFh>
decomposition <1E4Bh, 9F5h, 0FFFFh>
decomposition <1E4Ch, 9F9h, 0FFFFh>
decomposition <1E4Dh, 9FFh, 0FFFFh>
decomposition <1E4Eh, 0A05h, 0FFFFh>
decomposition <1E4Fh, 0A0Bh, 0FFFFh>
decomposition <1E50h, 0A11h, 0FFFFh>
decomposition <1E51h, 0A17h, 0FFFFh>
decomposition <1E52h, 0A1Dh, 0FFFFh>
decomposition <1E53h, 0A23h, 0FFFFh>
decomposition <1E54h, 0A29h, 0FFFFh>
decomposition <1E55h, 0A2Dh, 0FFFFh>
decomposition <1E56h, 0A31h, 0FFFFh>
decomposition <1E57h, 0A35h, 0FFFFh>
decomposition <1E58h, 0A39h, 0FFFFh>
decomposition <1E59h, 0A3Dh, 0FFFFh>
decomposition <1E5Ah, 0A41h, 0FFFFh>
decomposition <1E5Bh, 0A45h, 0FFFFh>
decomposition <1E5Ch, 0A49h, 0FFFFh>
decomposition <1E5Dh, 0A4Fh, 0FFFFh>
decomposition <1E5Eh, 0A55h, 0FFFFh>
decomposition <1E5Fh, 0A59h, 0FFFFh>
decomposition <1E60h, 0A5Dh, 0FFFFh>
decomposition <1E61h, 0A61h, 0FFFFh>
decomposition <1E62h, 0A65h, 0FFFFh>
decomposition <1E63h, 0A69h, 0FFFFh>
decomposition <1E64h, 0A6Dh, 0FFFFh>
decomposition <1E65h, 0A73h, 0FFFFh>
decomposition <1E66h, 0A79h, 0FFFFh>
decomposition <1E67h, 0A7Fh, 0FFFFh>
decomposition <1E68h, 0A85h, 0FFFFh>
decomposition <1E69h, 0A8Bh, 0FFFFh>
decomposition <1E6Ah, 0A91h, 0FFFFh>
decomposition <1E6Bh, 0A95h, 0FFFFh>
decomposition <1E6Ch, 0A99h, 0FFFFh>
decomposition <1E6Dh, 0A9Dh, 0FFFFh>
decomposition <1E6Eh, 0AA1h, 0FFFFh>
decomposition <1E6Fh, 0AA5h, 0FFFFh>
decomposition <1E70h, 0AA9h, 0FFFFh>
decomposition <1E71h, 0AADh, 0FFFFh>
decomposition <1E72h, 0AB1h, 0FFFFh>
decomposition <1E73h, 0AB5h, 0FFFFh>
decomposition <1E74h, 0AB9h, 0FFFFh>
decomposition <1E75h, 0ABDh, 0FFFFh>
decomposition <1E76h, 0AC1h, 0FFFFh>
decomposition <1E77h, 0AC5h, 0FFFFh>
decomposition <1E78h, 0AC9h, 0FFFFh>
decomposition <1E79h, 0ACFh, 0FFFFh>
decomposition <1E7Ah, 0AD5h, 0FFFFh>
decomposition <1E7Bh, 0ADBh, 0FFFFh>
decomposition <1E7Ch, 0AE1h, 0FFFFh>
decomposition <1E7Dh, 0AE5h, 0FFFFh>
decomposition <1E7Eh, 0AE9h, 0FFFFh>
decomposition <1E7Fh, 0AEDh, 0FFFFh>
decomposition <1E80h, 0AF1h, 0FFFFh>
decomposition <1E81h, 0AF5h, 0FFFFh>
decomposition <1E82h, 0AF9h, 0FFFFh>
decomposition <1E83h, 0AFDh, 0FFFFh>
decomposition <1E84h, 0B01h, 0FFFFh>
decomposition <1E85h, 0B05h, 0FFFFh>
decomposition <1E86h, 0B09h, 0FFFFh>
decomposition <1E87h, 0B0Dh, 0FFFFh>
decomposition <1E88h, 0B11h, 0FFFFh>
decomposition <1E89h, 0B15h, 0FFFFh>
decomposition <1E8Ah, 0B19h, 0FFFFh>
decomposition <1E8Bh, 0B1Dh, 0FFFFh>
decomposition <1E8Ch, 0B21h, 0FFFFh>
decomposition <1E8Dh, 0B25h, 0FFFFh>
decomposition <1E8Eh, 0B29h, 0FFFFh>
decomposition <1E8Fh, 0B2Dh, 0FFFFh>
decomposition <1E90h, 0B31h, 0FFFFh>
decomposition <1E91h, 0B35h, 0FFFFh>
decomposition <1E92h, 0B39h, 0FFFFh>
decomposition <1E93h, 0B3Dh, 0FFFFh>
decomposition <1E94h, 0B41h, 0FFFFh>
decomposition <1E95h, 0B45h, 0FFFFh>
decomposition <1E96h, 0B49h, 0FFFFh>
decomposition <1E97h, 0B4Dh, 0FFFFh>
decomposition <1E98h, 0B51h, 0FFFFh>
decomposition <1E99h, 0B55h, 0FFFFh>
decomposition <1E9Ah, 0FFFFh, 0B59h>
decomposition <1E9Bh, 0B5Dh, 0A61h>
decomposition <1EA0h, 0B62h, 0FFFFh>
decomposition <1EA1h, 0B66h, 0FFFFh>
decomposition <1EA2h, 0B6Ah, 0FFFFh>
decomposition <1EA3h, 0B6Eh, 0FFFFh>
decomposition <1EA4h, 0B72h, 0FFFFh>
decomposition <1EA5h, 0B78h, 0FFFFh>
decomposition <1EA6h, 0B7Eh, 0FFFFh>
decomposition <1EA7h, 0B84h, 0FFFFh>
decomposition <1EA8h, 0B8Ah, 0FFFFh>
decomposition <1EA9h, 0B90h, 0FFFFh>
decomposition <1EAAh, 0B96h, 0FFFFh>
decomposition <1EABh, 0B9Ch, 0FFFFh>
decomposition <1EACh, 0BA2h, 0FFFFh>
decomposition <1EADh, 0BA8h, 0FFFFh>
decomposition <1EAEh, 0BAEh, 0FFFFh>
decomposition <1EAFh, 0BB4h, 0FFFFh>
decomposition <1EB0h, 0BBAh, 0FFFFh>
decomposition <1EB1h, 0BC0h, 0FFFFh>
decomposition <1EB2h, 0BC6h, 0FFFFh>
decomposition <1EB3h, 0BCCh, 0FFFFh>
decomposition <1EB4h, 0BD2h, 0FFFFh>
decomposition <1EB5h, 0BD8h, 0FFFFh>
decomposition <1EB6h, 0BDEh, 0FFFFh>
decomposition <1EB7h, 0BE4h, 0FFFFh>
decomposition <1EB8h, 0BEAh, 0FFFFh>
decomposition <1EB9h, 0BEEh, 0FFFFh>
decomposition <1EBAh, 0BF2h, 0FFFFh>
decomposition <1EBBh, 0BF6h, 0FFFFh>
decomposition <1EBCh, 0BFAh, 0FFFFh>
decomposition <1EBDh, 0BFEh, 0FFFFh>
decomposition <1EBEh, 0C02h, 0FFFFh>
decomposition <1EBFh, 0C08h, 0FFFFh>
decomposition <1EC0h, 0C0Eh, 0FFFFh>
decomposition <1EC1h, 0C14h, 0FFFFh>
decomposition <1EC2h, 0C1Ah, 0FFFFh>
decomposition <1EC3h, 0C20h, 0FFFFh>
decomposition <1EC4h, 0C26h, 0FFFFh>
decomposition <1EC5h, 0C2Ch, 0FFFFh>
decomposition <1EC6h, 0C32h, 0FFFFh>
decomposition <1EC7h, 0C38h, 0FFFFh>
decomposition <1EC8h, 0C3Eh, 0FFFFh>
decomposition <1EC9h, 0C42h, 0FFFFh>
decomposition <1ECAh, 0C46h, 0FFFFh>
decomposition <1ECBh, 0C4Ah, 0FFFFh>
decomposition <1ECCh, 0C4Eh, 0FFFFh>
decomposition <1ECDh, 0C52h, 0FFFFh>
decomposition <1ECEh, 0C56h, 0FFFFh>
decomposition <1ECFh, 0C5Ah, 0FFFFh>
decomposition <1ED0h, 0C5Eh, 0FFFFh>
decomposition <1ED1h, 0C64h, 0FFFFh>
decomposition <1ED2h, 0C6Ah, 0FFFFh>
decomposition <1ED3h, 0C70h, 0FFFFh>
decomposition <1ED4h, 0C76h, 0FFFFh>
decomposition <1ED5h, 0C7Ch, 0FFFFh>
decomposition <1ED6h, 0C82h, 0FFFFh>
decomposition <1ED7h, 0C88h, 0FFFFh>
decomposition <1ED8h, 0C8Eh, 0FFFFh>
decomposition <1ED9h, 0C94h, 0FFFFh>
decomposition <1EDAh, 0C9Ah, 0FFFFh>
decomposition <1EDBh, 0CA0h, 0FFFFh>
decomposition <1EDCh, 0CA6h, 0FFFFh>
decomposition <1EDDh, 0CACh, 0FFFFh>
decomposition <1EDEh, 0CB2h, 0FFFFh>
decomposition <1EDFh, 0CB8h, 0FFFFh>
decomposition <1EE0h, 0CBEh, 0FFFFh>
decomposition <1EE1h, 0CC4h, 0FFFFh>
decomposition <1EE2h, 0CCAh, 0FFFFh>
decomposition <1EE3h, 0CD0h, 0FFFFh>
decomposition <1EE4h, 0CD6h, 0FFFFh>
decomposition <1EE5h, 0CDAh, 0FFFFh>
decomposition <1EE6h, 0CDEh, 0FFFFh>
decomposition <1EE7h, 0CE2h, 0FFFFh>
decomposition <1EE8h, 0CE6h, 0FFFFh>
decomposition <1EE9h, 0CECh, 0FFFFh>
decomposition <1EEAh, 0CF2h, 0FFFFh>
decomposition <1EEBh, 0CF8h, 0FFFFh>
decomposition <1EECh, 0CFEh, 0FFFFh>
decomposition <1EEDh, 0D04h, 0FFFFh>
decomposition <1EEEh, 0D0Ah, 0FFFFh>
decomposition <1EEFh, 0D10h, 0FFFFh>
decomposition <1EF0h, 0D16h, 0FFFFh>
decomposition <1EF1h, 0D1Ch, 0FFFFh>
decomposition <1EF2h, 0D22h, 0FFFFh>
decomposition <1EF3h, 0D26h, 0FFFFh>
decomposition <1EF4h, 0D2Ah, 0FFFFh>
decomposition <1EF5h, 0D2Eh, 0FFFFh>
decomposition <1EF6h, 0D32h, 0FFFFh>
decomposition <1EF7h, 0D36h, 0FFFFh>
decomposition <1EF8h, 0D3Ah, 0FFFFh>
decomposition <1EF9h, 0D3Eh, 0FFFFh>
decomposition <1F00h, 0D42h, 0FFFFh>
decomposition <1F01h, 0D47h, 0FFFFh>
decomposition <1F02h, 0D4Ch, 0FFFFh>
decomposition <1F03h, 0D53h, 0FFFFh>
decomposition <1F04h, 0D5Ah, 0FFFFh>
decomposition <1F05h, 0D61h, 0FFFFh>
decomposition <1F06h, 0D68h, 0FFFFh>
decomposition <1F07h, 0D6Fh, 0FFFFh>
decomposition <1F08h, 0D76h, 0FFFFh>
decomposition <1F09h, 0D7Bh, 0FFFFh>
decomposition <1F0Ah, 0D80h, 0FFFFh>
decomposition <1F0Bh, 0D87h, 0FFFFh>
decomposition <1F0Ch, 0D8Eh, 0FFFFh>
decomposition <1F0Dh, 0D95h, 0FFFFh>
decomposition <1F0Eh, 0D9Ch, 0FFFFh>
decomposition <1F0Fh, 0DA3h, 0FFFFh>
decomposition <1F10h, 0DAAh, 0FFFFh>
decomposition <1F11h, 0DAFh, 0FFFFh>
decomposition <1F12h, 0DB4h, 0FFFFh>
decomposition <1F13h, 0DBBh, 0FFFFh>
decomposition <1F14h, 0DC2h, 0FFFFh>
decomposition <1F15h, 0DC9h, 0FFFFh>
decomposition <1F18h, 0DD0h, 0FFFFh>
decomposition <1F19h, 0DD5h, 0FFFFh>
decomposition <1F1Ah, 0DDAh, 0FFFFh>
decomposition <1F1Bh, 0DE1h, 0FFFFh>
decomposition <1F1Ch, 0DE8h, 0FFFFh>
decomposition <1F1Dh, 0DEFh, 0FFFFh>
decomposition <1F20h, 0DF6h, 0FFFFh>
decomposition <1F21h, 0DFBh, 0FFFFh>
decomposition <1F22h, 0E00h, 0FFFFh>
decomposition <1F23h, 0E07h, 0FFFFh>
decomposition <1F24h, 0E0Eh, 0FFFFh>
decomposition <1F25h, 0E15h, 0FFFFh>
decomposition <1F26h, 0E1Ch, 0FFFFh>
decomposition <1F27h, 0E23h, 0FFFFh>
decomposition <1F28h, 0E2Ah, 0FFFFh>
decomposition <1F29h, 0E2Fh, 0FFFFh>
decomposition <1F2Ah, 0E34h, 0FFFFh>
decomposition <1F2Bh, 0E3Bh, 0FFFFh>
decomposition <1F2Ch, 0E42h, 0FFFFh>
decomposition <1F2Dh, 0E49h, 0FFFFh>
decomposition <1F2Eh, 0E50h, 0FFFFh>
decomposition <1F2Fh, 0E57h, 0FFFFh>
decomposition <1F30h, 0E5Eh, 0FFFFh>
decomposition <1F31h, 0E63h, 0FFFFh>
decomposition <1F32h, 0E68h, 0FFFFh>
decomposition <1F33h, 0E6Fh, 0FFFFh>
decomposition <1F34h, 0E76h, 0FFFFh>
decomposition <1F35h, 0E7Dh, 0FFFFh>
decomposition <1F36h, 0E84h, 0FFFFh>
decomposition <1F37h, 0E8Bh, 0FFFFh>
decomposition <1F38h, 0E92h, 0FFFFh>
decomposition <1F39h, 0E97h, 0FFFFh>
decomposition <1F3Ah, 0E9Ch, 0FFFFh>
decomposition <1F3Bh, 0EA3h, 0FFFFh>
decomposition <1F3Ch, 0EAAh, 0FFFFh>
decomposition <1F3Dh, 0EB1h, 0FFFFh>
decomposition <1F3Eh, 0EB8h, 0FFFFh>
decomposition <1F3Fh, 0EBFh, 0FFFFh>
decomposition <1F40h, 0EC6h, 0FFFFh>
decomposition <1F41h, 0ECBh, 0FFFFh>
decomposition <1F42h, 0ED0h, 0FFFFh>
decomposition <1F43h, 0ED7h, 0FFFFh>
decomposition <1F44h, 0EDEh, 0FFFFh>
decomposition <1F45h, 0EE5h, 0FFFFh>
decomposition <1F48h, 0EECh, 0FFFFh>
decomposition <1F49h, 0EF1h, 0FFFFh>
decomposition <1F4Ah, 0EF6h, 0FFFFh>
decomposition <1F4Bh, 0EFDh, 0FFFFh>
decomposition <1F4Ch, 0F04h, 0FFFFh>
decomposition <1F4Dh, 0F0Bh, 0FFFFh>
decomposition <1F50h, 0F12h, 0FFFFh>
decomposition <1F51h, 0F17h, 0FFFFh>
decomposition <1F52h, 0F1Ch, 0FFFFh>
decomposition <1F53h, 0F23h, 0FFFFh>
decomposition <1F54h, 0F2Ah, 0FFFFh>
decomposition <1F55h, 0F31h, 0FFFFh>
decomposition <1F56h, 0F38h, 0FFFFh>
decomposition <1F57h, 0F3Fh, 0FFFFh>
decomposition <1F59h, 0F46h, 0FFFFh>
decomposition <1F5Bh, 0F4Bh, 0FFFFh>
decomposition <1F5Dh, 0F52h, 0FFFFh>
decomposition <1F5Fh, 0F59h, 0FFFFh>
decomposition <1F60h, 0F60h, 0FFFFh>
decomposition <1F61h, 0F65h, 0FFFFh>
decomposition <1F62h, 0F6Ah, 0FFFFh>
decomposition <1F63h, 0F71h, 0FFFFh>
decomposition <1F64h, 0F78h, 0FFFFh>
decomposition <1F65h, 0F7Fh, 0FFFFh>
decomposition <1F66h, 0F86h, 0FFFFh>
decomposition <1F67h, 0F8Dh, 0FFFFh>
decomposition <1F68h, 0F94h, 0FFFFh>
decomposition <1F69h, 0F99h, 0FFFFh>
decomposition <1F6Ah, 0F9Eh, 0FFFFh>
decomposition <1F6Bh, 0FA5h, 0FFFFh>
decomposition <1F6Ch, 0FACh, 0FFFFh>
decomposition <1F6Dh, 0FB3h, 0FFFFh>
decomposition <1F6Eh, 0FBAh, 0FFFFh>
decomposition <1F6Fh, 0FC1h, 0FFFFh>
decomposition <1F70h, 0FC8h, 0FFFFh>
decomposition <1F71h, 524h, 0FFFFh>
decomposition <1F72h, 0FCDh, 0FFFFh>
decomposition <1F73h, 529h, 0FFFFh>
decomposition <1F74h, 0FD2h, 0FFFFh>
decomposition <1F75h, 52Eh, 0FFFFh>
decomposition <1F76h, 0FD7h, 0FFFFh>
decomposition <1F77h, 533h, 0FFFFh>
decomposition <1F78h, 0FDCh, 0FFFFh>
decomposition <1F79h, 549h, 0FFFFh>
decomposition <1F7Ah, 0FE1h, 0FFFFh>
decomposition <1F7Bh, 54Eh, 0FFFFh>
decomposition <1F7Ch, 0FE6h, 0FFFFh>
decomposition <1F7Dh, 553h, 0FFFFh>
decomposition <1F80h, 0FEBh, 0FFFFh>
decomposition <1F81h, 0FF2h, 0FFFFh>
decomposition <1F82h, 0FF9h, 0FFFFh>
decomposition <1F83h, 1002h, 0FFFFh>
decomposition <1F84h, 100Bh, 0FFFFh>
decomposition <1F85h, 1014h, 0FFFFh>
decomposition <1F86h, 101Dh, 0FFFFh>
decomposition <1F87h, 1026h, 0FFFFh>
decomposition <1F88h, 102Fh, 0FFFFh>
decomposition <1F89h, 1036h, 0FFFFh>
decomposition <1F8Ah, 103Dh, 0FFFFh>
decomposition <1F8Bh, 1046h, 0FFFFh>
decomposition <1F8Ch, 104Fh, 0FFFFh>
decomposition <1F8Dh, 1058h, 0FFFFh>
decomposition <1F8Eh, 1061h, 0FFFFh>
decomposition <1F8Fh, 106Ah, 0FFFFh>
decomposition <1F90h, 1073h, 0FFFFh>
decomposition <1F91h, 107Ah, 0FFFFh>
decomposition <1F92h, 1081h, 0FFFFh>
decomposition <1F93h, 108Ah, 0FFFFh>
decomposition <1F94h, 1093h, 0FFFFh>
decomposition <1F95h, 109Ch, 0FFFFh>
decomposition <1F96h, 10A5h, 0FFFFh>
decomposition <1F97h, 10AEh, 0FFFFh>
decomposition <1F98h, 10B7h, 0FFFFh>
decomposition <1F99h, 10BEh, 0FFFFh>
decomposition <1F9Ah, 10C5h, 0FFFFh>
decomposition <1F9Bh, 10CEh, 0FFFFh>
decomposition <1F9Ch, 10D7h, 0FFFFh>
decomposition <1F9Dh, 10E0h, 0FFFFh>
decomposition <1F9Eh, 10E9h, 0FFFFh>
decomposition <1F9Fh, 10F2h, 0FFFFh>
decomposition <1FA0h, 10FBh, 0FFFFh>
decomposition <1FA1h, 1102h, 0FFFFh>
decomposition <1FA2h, 1109h, 0FFFFh>
decomposition <1FA3h, 1112h, 0FFFFh>
decomposition <1FA4h, 111Bh, 0FFFFh>
decomposition <1FA5h, 1124h, 0FFFFh>
decomposition <1FA6h, 112Dh, 0FFFFh>
decomposition <1FA7h, 1136h, 0FFFFh>
decomposition <1FA8h, 113Fh, 0FFFFh>
decomposition <1FA9h, 1146h, 0FFFFh>
decomposition <1FAAh, 114Dh, 0FFFFh>
decomposition <1FABh, 1156h, 0FFFFh>
decomposition <1FACh, 115Fh, 0FFFFh>
decomposition <1FADh, 1168h, 0FFFFh>
decomposition <1FAEh, 1171h, 0FFFFh>
decomposition <1FAFh, 117Ah, 0FFFFh>
decomposition <1FB0h, 1183h, 0FFFFh>
decomposition <1FB1h, 1188h, 0FFFFh>
decomposition <1FB2h, 118Dh, 0FFFFh>
decomposition <1FB3h, 1194h, 0FFFFh>
decomposition <1FB4h, 1199h, 0FFFFh>
decomposition <1FB6h, 11A0h, 0FFFFh>
decomposition <1FB7h, 11A5h, 0FFFFh>
decomposition <1FB8h, 11ACh, 0FFFFh>
decomposition <1FB9h, 11B1h, 0FFFFh>
decomposition <1FBAh, 11B6h, 0FFFFh>
decomposition <1FBBh, 4EDh, 0FFFFh>
decomposition <1FBCh, 11BBh, 0FFFFh>
decomposition <1FBDh, 0FFFFh, 11C0h>
decomposition <1FBEh, 11C4h, 0FFFFh>
decomposition <1FBFh, 0FFFFh, 11C0h>
decomposition <1FC0h, 0FFFFh, 11C7h>
decomposition <1FC1h, 11CBh, 11D0h>
decomposition <1FC2h, 11D6h, 0FFFFh>
decomposition <1FC3h, 11DDh, 0FFFFh>
decomposition <1FC4h, 11E2h, 0FFFFh>
decomposition <1FC6h, 11E9h, 0FFFFh>
decomposition <1FC7h, 11EEh, 0FFFFh>
decomposition <1FC8h, 11F5h, 0FFFFh>
decomposition <1FC9h, 4F5h, 0FFFFh>
decomposition <1FCAh, 11FAh, 0FFFFh>
decomposition <1FCBh, 4FAh, 0FFFFh>
decomposition <1FCCh, 11FFh, 0FFFFh>
decomposition <1FCDh, 1204h, 120Ah>
decomposition <1FCEh, 1210h, 1216h>
decomposition <1FCFh, 121Ch, 1222h>
decomposition <1FD0h, 1228h, 0FFFFh>
decomposition <1FD1h, 122Dh, 0FFFFh>
decomposition <1FD2h, 1232h, 0FFFFh>
decomposition <1FD3h, 513h, 0FFFFh>
decomposition <1FD6h, 1239h, 0FFFFh>
decomposition <1FD7h, 123Eh, 0FFFFh>
decomposition <1FD8h, 1245h, 0FFFFh>
decomposition <1FD9h, 124Ah, 0FFFFh>
decomposition <1FDAh, 124Fh, 0FFFFh>
decomposition <1FDBh, 4FFh, 0FFFFh>
decomposition <1FDDh, 1254h, 125Ah>
decomposition <1FDEh, 1260h, 1266h>
decomposition <1FDFh, 126Ch, 1272h>
decomposition <1FE0h, 1278h, 0FFFFh>
decomposition <1FE1h, 127Dh, 0FFFFh>
decomposition <1FE2h, 1282h, 0FFFFh>
decomposition <1FE3h, 538h, 0FFFFh>
decomposition <1FE4h, 1289h, 0FFFFh>
decomposition <1FE5h, 128Eh, 0FFFFh>
decomposition <1FE6h, 1293h, 0FFFFh>
decomposition <1FE7h, 1298h, 0FFFFh>
decomposition <1FE8h, 129Fh, 0FFFFh>
decomposition <1FE9h, 12A4h, 0FFFFh>
decomposition <1FEAh, 12A9h, 0FFFFh>
decomposition <1FEBh, 509h, 0FFFFh>
decomposition <1FECh, 12AEh, 0FFFFh>
decomposition <1FEDh, 12B3h, 12B8h>
decomposition <1FEEh, 4E2h, 4E7h>
decomposition <1FEFh, 12BEh, 0FFFFh>
decomposition <1FF2h, 12C0h, 0FFFFh>
decomposition <1FF3h, 12C7h, 0FFFFh>
decomposition <1FF4h, 12CCh, 0FFFFh>
decomposition <1FF6h, 12D3h, 0FFFFh>
decomposition <1FF7h, 12D8h, 0FFFFh>
decomposition <1FF8h, 12DFh, 0FFFFh>
decomposition <1FF9h, 504h, 0FFFFh>
decomposition <1FFAh, 12E4h, 0FFFFh>
decomposition <1FFBh, 50Eh, 0FFFFh>
decomposition <1FFCh, 12E9h, 0FFFFh>
decomposition <1FFDh, 12EEh, 10h>
decomposition <1FFEh, 0FFFFh, 12F1h>
decomposition <2000h, 12F5h, 0>
decomposition <2001h, 12F9h, 0>
decomposition <2002h, 0FFFFh, 0>
decomposition <2003h, 0FFFFh, 0>
decomposition <2004h, 0FFFFh, 0>
decomposition <2005h, 0FFFFh, 0>
decomposition <2006h, 0FFFFh, 0>
decomposition <2007h, 0FFFFh, 0>
decomposition <2008h, 0FFFFh, 0>
decomposition <2009h, 0FFFFh, 0>
decomposition <200Ah, 0FFFFh, 0>
decomposition <2011h, 0FFFFh, 12FDh>
decomposition <2017h, 0FFFFh, 1301h>
decomposition <2024h, 0FFFFh, 1305h>
decomposition <2025h, 0FFFFh, 1307h>
decomposition <2026h, 0FFFFh, 130Ah>
decomposition <202Fh, 0FFFFh, 0>
decomposition <2033h, 0FFFFh, 130Eh>
decomposition <2034h, 0FFFFh, 1315h>
decomposition <2036h, 0FFFFh, 131Fh>
decomposition <2037h, 0FFFFh, 1326h>
decomposition <203Ch, 0FFFFh, 1330h>
decomposition <203Eh, 0FFFFh, 1333h>
decomposition <2047h, 0FFFFh, 1337h>
decomposition <2048h, 0FFFFh, 133Ah>
decomposition <2049h, 0FFFFh, 133Dh>
decomposition <2057h, 0FFFFh, 1340h>
decomposition <205Fh, 0FFFFh, 0>
decomposition <2070h, 0FFFFh, 134Dh>
decomposition <2071h, 0FFFFh, 134Fh>
decomposition <2074h, 0FFFFh, 1351h>
decomposition <2075h, 0FFFFh, 1353h>
decomposition <2076h, 0FFFFh, 1355h>
decomposition <2077h, 0FFFFh, 1357h>
decomposition <2078h, 0FFFFh, 1359h>
decomposition <2079h, 0FFFFh, 135Bh>
decomposition <207Ah, 0FFFFh, 135Dh>
decomposition <207Bh, 0FFFFh, 135Fh>
decomposition <207Ch, 0FFFFh, 1363h>
decomposition <207Dh, 0FFFFh, 1365h>
decomposition <207Eh, 0FFFFh, 1367h>
decomposition <207Fh, 0FFFFh, 1369h>
decomposition <2080h, 0FFFFh, 134Dh>
decomposition <2081h, 0FFFFh, 1Bh>
decomposition <2082h, 0FFFFh, 0Ch>
decomposition <2083h, 0FFFFh, 0Eh>
decomposition <2084h, 0FFFFh, 1351h>
decomposition <2085h, 0FFFFh, 1353h>
decomposition <2086h, 0FFFFh, 1355h>
decomposition <2087h, 0FFFFh, 1357h>
decomposition <2088h, 0FFFFh, 1359h>
decomposition <2089h, 0FFFFh, 135Bh>
decomposition <208Ah, 0FFFFh, 135Dh>
decomposition <208Bh, 0FFFFh, 135Fh>
decomposition <208Ch, 0FFFFh, 1363h>
decomposition <208Dh, 0FFFFh, 1365h>
decomposition <208Eh, 0FFFFh, 1367h>
decomposition <20A8h, 0FFFFh, 136Bh>
decomposition <2100h, 0FFFFh, 136Eh>
decomposition <2101h, 0FFFFh, 1372h>
decomposition <2102h, 0FFFFh, 1376h>
decomposition <2103h, 0FFFFh, 1378h>
decomposition <2105h, 0FFFFh, 137Ch>
decomposition <2106h, 0FFFFh, 1380h>
decomposition <2107h, 0FFFFh, 1384h>
decomposition <2109h, 0FFFFh, 1387h>
decomposition <210Ah, 0FFFFh, 138Bh>
decomposition <210Bh, 0FFFFh, 138Dh>
decomposition <210Ch, 0FFFFh, 138Dh>
decomposition <210Dh, 0FFFFh, 138Dh>
decomposition <210Eh, 0FFFFh, 493h>
decomposition <210Fh, 0FFFFh, 138Fh>
decomposition <2110h, 0FFFFh, 1392h>
decomposition <2111h, 0FFFFh, 1392h>
decomposition <2112h, 0FFFFh, 1394h>
decomposition <2113h, 0FFFFh, 4C4h>
decomposition <2115h, 0FFFFh, 1396h>
decomposition <2116h, 0FFFFh, 1398h>
decomposition <2119h, 0FFFFh, 139Bh>
decomposition <211Ah, 0FFFFh, 139Dh>
decomposition <211Bh, 0FFFFh, 139Fh>
decomposition <211Ch, 0FFFFh, 139Fh>
decomposition <211Dh, 0FFFFh, 139Fh>
decomposition <2120h, 0FFFFh, 13A1h>
decomposition <2121h, 0FFFFh, 13A4h>
decomposition <2122h, 0FFFFh, 13A8h>
decomposition <2124h, 0FFFFh, 13ABh>
decomposition <2126h, 13ADh, 0FFFFh>
decomposition <2128h, 0FFFFh, 13ABh>
decomposition <212Ah, 13B0h, 0FFFFh>
decomposition <212Bh, 45h, 0FFFFh>
decomposition <212Ch, 0FFFFh, 13B2h>
decomposition <212Dh, 0FFFFh, 1376h>
decomposition <212Fh, 0FFFFh, 13B4h>
decomposition <2130h, 0FFFFh, 13B6h>
decomposition <2131h, 0FFFFh, 13B8h>
decomposition <2133h, 0FFFFh, 13BAh>
decomposition <2134h, 0FFFFh, 1Dh>
decomposition <2135h, 0FFFFh, 13BCh>
decomposition <2136h, 0FFFFh, 13BFh>
decomposition <2137h, 0FFFFh, 13C2h>
decomposition <2138h, 0FFFFh, 13C5h>
decomposition <2139h, 0FFFFh, 134Fh>
decomposition <213Dh, 0FFFFh, 13C8h>
decomposition <213Eh, 0FFFFh, 13CBh>
decomposition <213Fh, 0FFFFh, 13CEh>
decomposition <2140h, 0FFFFh, 13D1h>
decomposition <2145h, 0FFFFh, 13D5h>
decomposition <2146h, 0FFFFh, 13D7h>
decomposition <2147h, 0FFFFh, 13B4h>
decomposition <2148h, 0FFFFh, 134Fh>
decomposition <2149h, 0FFFFh, 498h>
decomposition <2153h, 0FFFFh, 13D9h>
decomposition <2154h, 0FFFFh, 13DFh>
decomposition <2155h, 0FFFFh, 13E5h>
decomposition <2156h, 0FFFFh, 13EBh>
decomposition <2157h, 0FFFFh, 13F1h>
decomposition <2158h, 0FFFFh, 13F7h>
decomposition <2159h, 0FFFFh, 13FDh>
decomposition <215Ah, 0FFFFh, 1403h>
decomposition <215Bh, 0FFFFh, 1409h>
decomposition <215Ch, 0FFFFh, 140Fh>
decomposition <215Dh, 0FFFFh, 1415h>
decomposition <215Eh, 0FFFFh, 141Bh>
decomposition <215Fh, 0FFFFh, 1421h>
decomposition <2160h, 0FFFFh, 1392h>
decomposition <2161h, 0FFFFh, 1426h>
decomposition <2162h, 0FFFFh, 1429h>
decomposition <2163h, 0FFFFh, 142Dh>
decomposition <2164h, 0FFFFh, 1430h>
decomposition <2165h, 0FFFFh, 1432h>
decomposition <2166h, 0FFFFh, 1435h>
decomposition <2167h, 0FFFFh, 1439h>
decomposition <2168h, 0FFFFh, 143Eh>
decomposition <2169h, 0FFFFh, 1441h>
decomposition <216Ah, 0FFFFh, 1443h>
decomposition <216Bh, 0FFFFh, 1446h>
decomposition <216Ch, 0FFFFh, 1394h>
decomposition <216Dh, 0FFFFh, 1376h>
decomposition <216Eh, 0FFFFh, 13D5h>
decomposition <216Fh, 0FFFFh, 13BAh>
decomposition <2170h, 0FFFFh, 134Fh>
decomposition <2171h, 0FFFFh, 144Ah>
decomposition <2172h, 0FFFFh, 144Dh>
decomposition <2173h, 0FFFFh, 1451h>
decomposition <2174h, 0FFFFh, 1454h>
decomposition <2175h, 0FFFFh, 1456h>
decomposition <2176h, 0FFFFh, 1459h>
decomposition <2177h, 0FFFFh, 145Dh>
decomposition <2178h, 0FFFFh, 1462h>
decomposition <2179h, 0FFFFh, 4C6h>
decomposition <217Ah, 0FFFFh, 1465h>
decomposition <217Bh, 0FFFFh, 1468h>
decomposition <217Ch, 0FFFFh, 4C4h>
decomposition <217Dh, 0FFFFh, 146Ch>
decomposition <217Eh, 0FFFFh, 13D7h>
decomposition <217Fh, 0FFFFh, 146Eh>
decomposition <219Ah, 1470h, 0FFFFh>
decomposition <219Bh, 1476h, 0FFFFh>
decomposition <21AEh, 147Ch, 0FFFFh>
decomposition <21CDh, 1482h, 0FFFFh>
decomposition <21CEh, 1488h, 0FFFFh>
decomposition <21CFh, 148Eh, 0FFFFh>
decomposition <2204h, 1494h, 0FFFFh>
decomposition <2209h, 149Ah, 0FFFFh>
decomposition <220Ch, 14A0h, 0FFFFh>
decomposition <2224h, 14A6h, 0FFFFh>
decomposition <2226h, 14ACh, 0FFFFh>
decomposition <222Ch, 0FFFFh, 14B2h>
decomposition <222Dh, 0FFFFh, 14B9h>
decomposition <222Fh, 0FFFFh, 14C3h>
decomposition <2230h, 0FFFFh, 14CAh>
decomposition <2241h, 14D4h, 0FFFFh>
decomposition <2244h, 14DAh, 0FFFFh>
decomposition <2247h, 14E0h, 0FFFFh>
decomposition <2249h, 14E6h, 0FFFFh>
decomposition <2260h, 14ECh, 0FFFFh>
decomposition <2262h, 14F0h, 0FFFFh>
decomposition <226Dh, 14F6h, 0FFFFh>
decomposition <226Eh, 14FCh, 0FFFFh>
decomposition <226Fh, 1500h, 0FFFFh>
decomposition <2270h, 1504h, 0FFFFh>
decomposition <2271h, 150Ah, 0FFFFh>
decomposition <2274h, 1510h, 0FFFFh>
decomposition <2275h, 1516h, 0FFFFh>
decomposition <2278h, 151Ch, 0FFFFh>
decomposition <2279h, 1522h, 0FFFFh>
decomposition <2280h, 1528h, 0FFFFh>
decomposition <2281h, 152Eh, 0FFFFh>
decomposition <2284h, 1534h, 0FFFFh>
decomposition <2285h, 153Ah, 0FFFFh>
decomposition <2288h, 1540h, 0FFFFh>
decomposition <2289h, 1546h, 0FFFFh>
decomposition <22ACh, 154Ch, 0FFFFh>
decomposition <22ADh, 1552h, 0FFFFh>
decomposition <22AEh, 1558h, 0FFFFh>
decomposition <22AFh, 155Eh, 0FFFFh>
decomposition <22E0h, 1564h, 0FFFFh>
decomposition <22E1h, 156Ah, 0FFFFh>
decomposition <22E2h, 1570h, 0FFFFh>
decomposition <22E3h, 1576h, 0FFFFh>
decomposition <22EAh, 157Ch, 0FFFFh>
decomposition <22EBh, 1582h, 0FFFFh>
decomposition <22ECh, 1588h, 0FFFFh>
decomposition <22EDh, 158Eh, 0FFFFh>
decomposition <2329h, 1594h, 0FFFFh>
decomposition <232Ah, 1598h, 0FFFFh>
decomposition <2460h, 0FFFFh, 1Bh>
decomposition <2461h, 0FFFFh, 0Ch>
decomposition <2462h, 0FFFFh, 0Eh>
decomposition <2463h, 0FFFFh, 1351h>
decomposition <2464h, 0FFFFh, 1353h>
decomposition <2465h, 0FFFFh, 1355h>
decomposition <2466h, 0FFFFh, 1357h>
decomposition <2467h, 0FFFFh, 1359h>
decomposition <2468h, 0FFFFh, 135Bh>
decomposition <2469h, 0FFFFh, 159Ch>
decomposition <246Ah, 0FFFFh, 159Fh>
decomposition <246Bh, 0FFFFh, 15A2h>
decomposition <246Ch, 0FFFFh, 15A5h>
decomposition <246Dh, 0FFFFh, 15A8h>
decomposition <246Eh, 0FFFFh, 15ABh>
decomposition <246Fh, 0FFFFh, 15AEh>
decomposition <2470h, 0FFFFh, 15B1h>
decomposition <2471h, 0FFFFh, 15B4h>
decomposition <2472h, 0FFFFh, 15B7h>
decomposition <2473h, 0FFFFh, 15BAh>
decomposition <2474h, 0FFFFh, 15BDh>
decomposition <2475h, 0FFFFh, 15C1h>
decomposition <2476h, 0FFFFh, 15C5h>
decomposition <2477h, 0FFFFh, 15C9h>
decomposition <2478h, 0FFFFh, 15CDh>
decomposition <2479h, 0FFFFh, 15D1h>
decomposition <247Ah, 0FFFFh, 15D5h>
decomposition <247Bh, 0FFFFh, 15D9h>
decomposition <247Ch, 0FFFFh, 15DDh>
decomposition <247Dh, 0FFFFh, 15E1h>
decomposition <247Eh, 0FFFFh, 15E6h>
decomposition <247Fh, 0FFFFh, 15EBh>
decomposition <2480h, 0FFFFh, 15F0h>
decomposition <2481h, 0FFFFh, 15F5h>
decomposition <2482h, 0FFFFh, 15FAh>
decomposition <2483h, 0FFFFh, 15FFh>
decomposition <2484h, 0FFFFh, 1604h>
decomposition <2485h, 0FFFFh, 1609h>
decomposition <2486h, 0FFFFh, 160Eh>
decomposition <2487h, 0FFFFh, 1613h>
decomposition <2488h, 0FFFFh, 1618h>
decomposition <2489h, 0FFFFh, 161Bh>
decomposition <248Ah, 0FFFFh, 161Eh>
decomposition <248Bh, 0FFFFh, 1621h>
decomposition <248Ch, 0FFFFh, 1624h>
decomposition <248Dh, 0FFFFh, 1627h>
decomposition <248Eh, 0FFFFh, 162Ah>
decomposition <248Fh, 0FFFFh, 162Dh>
decomposition <2490h, 0FFFFh, 1630h>
decomposition <2491h, 0FFFFh, 1633h>
decomposition <2492h, 0FFFFh, 1637h>
decomposition <2493h, 0FFFFh, 163Bh>
decomposition <2494h, 0FFFFh, 163Fh>
decomposition <2495h, 0FFFFh, 1643h>
decomposition <2496h, 0FFFFh, 1647h>
decomposition <2497h, 0FFFFh, 164Bh>
decomposition <2498h, 0FFFFh, 164Fh>
decomposition <2499h, 0FFFFh, 1653h>
decomposition <249Ah, 0FFFFh, 1657h>
decomposition <249Bh, 0FFFFh, 165Bh>
decomposition <249Ch, 0FFFFh, 165Fh>
decomposition <249Dh, 0FFFFh, 1663h>
decomposition <249Eh, 0FFFFh, 1667h>
decomposition <249Fh, 0FFFFh, 166Bh>
decomposition <24A0h, 0FFFFh, 166Fh>
decomposition <24A1h, 0FFFFh, 1673h>
decomposition <24A2h, 0FFFFh, 1677h>
decomposition <24A3h, 0FFFFh, 167Bh>
decomposition <24A4h, 0FFFFh, 167Fh>
decomposition <24A5h, 0FFFFh, 1683h>
decomposition <24A6h, 0FFFFh, 1687h>
decomposition <24A7h, 0FFFFh, 168Bh>
decomposition <24A8h, 0FFFFh, 168Fh>
decomposition <24A9h, 0FFFFh, 1693h>
decomposition <24AAh, 0FFFFh, 1697h>
decomposition <24ABh, 0FFFFh, 169Bh>
decomposition <24ACh, 0FFFFh, 169Fh>
decomposition <24ADh, 0FFFFh, 16A3h>
decomposition <24AEh, 0FFFFh, 16A7h>
decomposition <24AFh, 0FFFFh, 16ABh>
decomposition <24B0h, 0FFFFh, 16AFh>
decomposition <24B1h, 0FFFFh, 16B3h>
decomposition <24B2h, 0FFFFh, 16B7h>
decomposition <24B3h, 0FFFFh, 16BBh>
decomposition <24B4h, 0FFFFh, 16BFh>
decomposition <24B5h, 0FFFFh, 16C3h>
decomposition <24B6h, 0FFFFh, 16C7h>
decomposition <24B7h, 0FFFFh, 13B2h>
decomposition <24B8h, 0FFFFh, 1376h>
decomposition <24B9h, 0FFFFh, 13D5h>
decomposition <24BAh, 0FFFFh, 13B6h>
decomposition <24BBh, 0FFFFh, 13B8h>
decomposition <24BCh, 0FFFFh, 16C9h>
decomposition <24BDh, 0FFFFh, 138Dh>
decomposition <24BEh, 0FFFFh, 1392h>
decomposition <24BFh, 0FFFFh, 16CBh>
decomposition <24C0h, 0FFFFh, 13B0h>
decomposition <24C1h, 0FFFFh, 1394h>
decomposition <24C2h, 0FFFFh, 13BAh>
decomposition <24C3h, 0FFFFh, 1396h>
decomposition <24C4h, 0FFFFh, 16CDh>
decomposition <24C5h, 0FFFFh, 139Bh>
decomposition <24C6h, 0FFFFh, 139Dh>
decomposition <24C7h, 0FFFFh, 139Fh>
decomposition <24C8h, 0FFFFh, 16CFh>
decomposition <24C9h, 0FFFFh, 16D1h>
decomposition <24CAh, 0FFFFh, 16D3h>
decomposition <24CBh, 0FFFFh, 1430h>
decomposition <24CCh, 0FFFFh, 16D5h>
decomposition <24CDh, 0FFFFh, 1441h>
decomposition <24CEh, 0FFFFh, 16D7h>
decomposition <24CFh, 0FFFFh, 13ABh>
decomposition <24D0h, 0FFFFh, 6>
decomposition <24D1h, 0FFFFh, 16D9h>
decomposition <24D2h, 0FFFFh, 146Ch>
decomposition <24D3h, 0FFFFh, 13D7h>
decomposition <24D4h, 0FFFFh, 13B4h>
decomposition <24D5h, 0FFFFh, 16DBh>
decomposition <24D6h, 0FFFFh, 138Bh>
decomposition <24D7h, 0FFFFh, 493h>
decomposition <24D8h, 0FFFFh, 134Fh>
decomposition <24D9h, 0FFFFh, 498h>
decomposition <24DAh, 0FFFFh, 16DDh>
decomposition <24DBh, 0FFFFh, 4C4h>
decomposition <24DCh, 0FFFFh, 146Eh>
decomposition <24DDh, 0FFFFh, 1369h>
decomposition <24DEh, 0FFFFh, 1Dh>
decomposition <24DFh, 0FFFFh, 16DFh>
decomposition <24E0h, 0FFFFh, 16E1h>
decomposition <24E1h, 0FFFFh, 49Ah>
decomposition <24E2h, 0FFFFh, 2C7h>
decomposition <24E3h, 0FFFFh, 16E3h>
decomposition <24E4h, 0FFFFh, 16E5h>
decomposition <24E5h, 0FFFFh, 1454h>
decomposition <24E6h, 0FFFFh, 4A5h>
decomposition <24E7h, 0FFFFh, 4C6h>
decomposition <24E8h, 0FFFFh, 4A7h>
decomposition <24E9h, 0FFFFh, 16E7h>
decomposition <24EAh, 0FFFFh, 134Dh>
decomposition <2A0Ch, 0FFFFh, 16E9h>
decomposition <2A74h, 0FFFFh, 16F6h>
decomposition <2A75h, 0FFFFh, 16FAh>
decomposition <2A76h, 0FFFFh, 16FDh>
decomposition <2ADCh, 1701h, 0FFFFh>
decomposition <2E9Fh, 0FFFFh, 1707h>
decomposition <2EF3h, 0FFFFh, 170Bh>
decomposition <2F00h, 0FFFFh, 170Fh>
decomposition <2F01h, 0FFFFh, 1713h>
decomposition <2F02h, 0FFFFh, 1717h>
decomposition <2F03h, 0FFFFh, 171Bh>
decomposition <2F04h, 0FFFFh, 171Fh>
decomposition <2F05h, 0FFFFh, 1723h>
decomposition <2F06h, 0FFFFh, 1727h>
decomposition <2F07h, 0FFFFh, 172Bh>
decomposition <2F08h, 0FFFFh, 172Fh>
decomposition <2F09h, 0FFFFh, 1733h>
decomposition <2F0Ah, 0FFFFh, 1737h>
decomposition <2F0Bh, 0FFFFh, 173Bh>
decomposition <2F0Ch, 0FFFFh, 173Fh>
decomposition <2F0Dh, 0FFFFh, 1743h>
decomposition <2F0Eh, 0FFFFh, 1747h>
decomposition <2F0Fh, 0FFFFh, 174Bh>
decomposition <2F10h, 0FFFFh, 174Fh>
decomposition <2F11h, 0FFFFh, 1753h>
decomposition <2F12h, 0FFFFh, 1757h>
decomposition <2F13h, 0FFFFh, 175Bh>
decomposition <2F14h, 0FFFFh, 175Fh>
decomposition <2F15h, 0FFFFh, 1763h>
decomposition <2F16h, 0FFFFh, 1767h>
decomposition <2F17h, 0FFFFh, 176Bh>
decomposition <2F18h, 0FFFFh, 176Fh>
decomposition <2F19h, 0FFFFh, 1773h>
decomposition <2F1Ah, 0FFFFh, 1777h>
decomposition <2F1Bh, 0FFFFh, 177Bh>
decomposition <2F1Ch, 0FFFFh, 177Fh>
decomposition <2F1Dh, 0FFFFh, 1783h>
decomposition <2F1Eh, 0FFFFh, 1787h>
decomposition <2F1Fh, 0FFFFh, 178Bh>
decomposition <2F20h, 0FFFFh, 178Fh>
decomposition <2F21h, 0FFFFh, 1793h>
decomposition <2F22h, 0FFFFh, 1797h>
decomposition <2F23h, 0FFFFh, 179Bh>
decomposition <2F24h, 0FFFFh, 179Fh>
decomposition <2F25h, 0FFFFh, 17A3h>
decomposition <2F26h, 0FFFFh, 17A7h>
decomposition <2F27h, 0FFFFh, 17ABh>
decomposition <2F28h, 0FFFFh, 17AFh>
decomposition <2F29h, 0FFFFh, 17B3h>
decomposition <2F2Ah, 0FFFFh, 17B7h>
decomposition <2F2Bh, 0FFFFh, 17BBh>
decomposition <2F2Ch, 0FFFFh, 17BFh>
decomposition <2F2Dh, 0FFFFh, 17C3h>
decomposition <2F2Eh, 0FFFFh, 17C7h>
decomposition <2F2Fh, 0FFFFh, 17CBh>
decomposition <2F30h, 0FFFFh, 17CFh>
decomposition <2F31h, 0FFFFh, 17D3h>
decomposition <2F32h, 0FFFFh, 17D7h>
decomposition <2F33h, 0FFFFh, 17DBh>
decomposition <2F34h, 0FFFFh, 17DFh>
decomposition <2F35h, 0FFFFh, 17E3h>
decomposition <2F36h, 0FFFFh, 17E7h>
decomposition <2F37h, 0FFFFh, 17EBh>
decomposition <2F38h, 0FFFFh, 17EFh>
decomposition <2F39h, 0FFFFh, 17F3h>
decomposition <2F3Ah, 0FFFFh, 17F7h>
decomposition <2F3Bh, 0FFFFh, 17FBh>
decomposition <2F3Ch, 0FFFFh, 17FFh>
decomposition <2F3Dh, 0FFFFh, 1803h>
decomposition <2F3Eh, 0FFFFh, 1807h>
decomposition <2F3Fh, 0FFFFh, 180Bh>
decomposition <2F40h, 0FFFFh, 180Fh>
decomposition <2F41h, 0FFFFh, 1813h>
decomposition <2F42h, 0FFFFh, 1817h>
decomposition <2F43h, 0FFFFh, 181Bh>
decomposition <2F44h, 0FFFFh, 181Fh>
decomposition <2F45h, 0FFFFh, 1823h>
decomposition <2F46h, 0FFFFh, 1827h>
decomposition <2F47h, 0FFFFh, 182Bh>
decomposition <2F48h, 0FFFFh, 182Fh>
decomposition <2F49h, 0FFFFh, 1833h>
decomposition <2F4Ah, 0FFFFh, 1837h>
decomposition <2F4Bh, 0FFFFh, 183Bh>
decomposition <2F4Ch, 0FFFFh, 183Fh>
decomposition <2F4Dh, 0FFFFh, 1843h>
decomposition <2F4Eh, 0FFFFh, 1847h>
decomposition <2F4Fh, 0FFFFh, 184Bh>
decomposition <2F50h, 0FFFFh, 184Fh>
decomposition <2F51h, 0FFFFh, 1853h>
decomposition <2F52h, 0FFFFh, 1857h>
decomposition <2F53h, 0FFFFh, 185Bh>
decomposition <2F54h, 0FFFFh, 185Fh>
decomposition <2F55h, 0FFFFh, 1863h>
decomposition <2F56h, 0FFFFh, 1867h>
decomposition <2F57h, 0FFFFh, 186Bh>
decomposition <2F58h, 0FFFFh, 186Fh>
decomposition <2F59h, 0FFFFh, 1873h>
decomposition <2F5Ah, 0FFFFh, 1877h>
decomposition <2F5Bh, 0FFFFh, 187Bh>
decomposition <2F5Ch, 0FFFFh, 187Fh>
decomposition <2F5Dh, 0FFFFh, 1883h>
decomposition <2F5Eh, 0FFFFh, 1887h>
decomposition <2F5Fh, 0FFFFh, 188Bh>
decomposition <2F60h, 0FFFFh, 188Fh>
decomposition <2F61h, 0FFFFh, 1893h>
decomposition <2F62h, 0FFFFh, 1897h>
decomposition <2F63h, 0FFFFh, 189Bh>
decomposition <2F64h, 0FFFFh, 189Fh>
decomposition <2F65h, 0FFFFh, 18A3h>
decomposition <2F66h, 0FFFFh, 18A7h>
decomposition <2F67h, 0FFFFh, 18ABh>
decomposition <2F68h, 0FFFFh, 18AFh>
decomposition <2F69h, 0FFFFh, 18B3h>
decomposition <2F6Ah, 0FFFFh, 18B7h>
decomposition <2F6Bh, 0FFFFh, 18BBh>
decomposition <2F6Ch, 0FFFFh, 18BFh>
decomposition <2F6Dh, 0FFFFh, 18C3h>
decomposition <2F6Eh, 0FFFFh, 18C7h>
decomposition <2F6Fh, 0FFFFh, 18CBh>
decomposition <2F70h, 0FFFFh, 18CFh>
decomposition <2F71h, 0FFFFh, 18D3h>
decomposition <2F72h, 0FFFFh, 18D7h>
decomposition <2F73h, 0FFFFh, 18DBh>
decomposition <2F74h, 0FFFFh, 18DFh>
decomposition <2F75h, 0FFFFh, 18E3h>
decomposition <2F76h, 0FFFFh, 18E7h>
decomposition <2F77h, 0FFFFh, 18EBh>
decomposition <2F78h, 0FFFFh, 18EFh>
decomposition <2F79h, 0FFFFh, 18F3h>
decomposition <2F7Ah, 0FFFFh, 18F7h>
decomposition <2F7Bh, 0FFFFh, 18FBh>
decomposition <2F7Ch, 0FFFFh, 18FFh>
decomposition <2F7Dh, 0FFFFh, 1903h>
decomposition <2F7Eh, 0FFFFh, 1907h>
decomposition <2F7Fh, 0FFFFh, 190Bh>
decomposition <2F80h, 0FFFFh, 190Fh>
decomposition <2F81h, 0FFFFh, 1913h>
decomposition <2F82h, 0FFFFh, 1917h>
decomposition <2F83h, 0FFFFh, 191Bh>
decomposition <2F84h, 0FFFFh, 191Fh>
decomposition <2F85h, 0FFFFh, 1923h>
decomposition <2F86h, 0FFFFh, 1927h>
decomposition <2F87h, 0FFFFh, 192Bh>
decomposition <2F88h, 0FFFFh, 192Fh>
decomposition <2F89h, 0FFFFh, 1933h>
decomposition <2F8Ah, 0FFFFh, 1937h>
decomposition <2F8Bh, 0FFFFh, 193Bh>
decomposition <2F8Ch, 0FFFFh, 193Fh>
decomposition <2F8Dh, 0FFFFh, 1943h>
decomposition <2F8Eh, 0FFFFh, 1947h>
decomposition <2F8Fh, 0FFFFh, 194Bh>
decomposition <2F90h, 0FFFFh, 194Fh>
decomposition <2F91h, 0FFFFh, 1953h>
decomposition <2F92h, 0FFFFh, 1957h>
decomposition <2F93h, 0FFFFh, 195Bh>
decomposition <2F94h, 0FFFFh, 195Fh>
decomposition <2F95h, 0FFFFh, 1963h>
decomposition <2F96h, 0FFFFh, 1967h>
decomposition <2F97h, 0FFFFh, 196Bh>
decomposition <2F98h, 0FFFFh, 196Fh>
decomposition <2F99h, 0FFFFh, 1973h>
decomposition <2F9Ah, 0FFFFh, 1977h>
decomposition <2F9Bh, 0FFFFh, 197Bh>
decomposition <2F9Ch, 0FFFFh, 197Fh>
decomposition <2F9Dh, 0FFFFh, 1983h>
decomposition <2F9Eh, 0FFFFh, 1987h>
decomposition <2F9Fh, 0FFFFh, 198Bh>
decomposition <2FA0h, 0FFFFh, 198Fh>
decomposition <2FA1h, 0FFFFh, 1993h>
decomposition <2FA2h, 0FFFFh, 1997h>
decomposition <2FA3h, 0FFFFh, 199Bh>
decomposition <2FA4h, 0FFFFh, 199Fh>
decomposition <2FA5h, 0FFFFh, 19A3h>
decomposition <2FA6h, 0FFFFh, 19A7h>
decomposition <2FA7h, 0FFFFh, 19ABh>
decomposition <2FA8h, 0FFFFh, 19AFh>
decomposition <2FA9h, 0FFFFh, 19B3h>
decomposition <2FAAh, 0FFFFh, 19B7h>
decomposition <2FABh, 0FFFFh, 19BBh>
decomposition <2FACh, 0FFFFh, 19BFh>
decomposition <2FADh, 0FFFFh, 19C3h>
decomposition <2FAEh, 0FFFFh, 19C7h>
decomposition <2FAFh, 0FFFFh, 19CBh>
decomposition <2FB0h, 0FFFFh, 19CFh>
decomposition <2FB1h, 0FFFFh, 19D3h>
decomposition <2FB2h, 0FFFFh, 19D7h>
decomposition <2FB3h, 0FFFFh, 19DBh>
decomposition <2FB4h, 0FFFFh, 19DFh>
decomposition <2FB5h, 0FFFFh, 19E3h>
decomposition <2FB6h, 0FFFFh, 19E7h>
decomposition <2FB7h, 0FFFFh, 19EBh>
decomposition <2FB8h, 0FFFFh, 19EFh>
decomposition <2FB9h, 0FFFFh, 19F3h>
decomposition <2FBAh, 0FFFFh, 19F7h>
decomposition <2FBBh, 0FFFFh, 19FBh>
decomposition <2FBCh, 0FFFFh, 19FFh>
decomposition <2FBDh, 0FFFFh, 1A03h>
decomposition <2FBEh, 0FFFFh, 1A07h>
decomposition <2FBFh, 0FFFFh, 1A0Bh>
decomposition <2FC0h, 0FFFFh, 1A0Fh>
decomposition <2FC1h, 0FFFFh, 1A13h>
decomposition <2FC2h, 0FFFFh, 1A17h>
decomposition <2FC3h, 0FFFFh, 1A1Bh>
decomposition <2FC4h, 0FFFFh, 1A1Fh>
decomposition <2FC5h, 0FFFFh, 1A23h>
decomposition <2FC6h, 0FFFFh, 1A27h>
decomposition <2FC7h, 0FFFFh, 1A2Bh>
decomposition <2FC8h, 0FFFFh, 1A2Fh>
decomposition <2FC9h, 0FFFFh, 1A33h>
decomposition <2FCAh, 0FFFFh, 1A37h>
decomposition <2FCBh, 0FFFFh, 1A3Bh>
decomposition <2FCCh, 0FFFFh, 1A3Fh>
decomposition <2FCDh, 0FFFFh, 1A43h>
decomposition <2FCEh, 0FFFFh, 1A47h>
decomposition <2FCFh, 0FFFFh, 1A4Bh>
decomposition <2FD0h, 0FFFFh, 1A4Fh>
decomposition <2FD1h, 0FFFFh, 1A53h>
decomposition <2FD2h, 0FFFFh, 1A57h>
decomposition <2FD3h, 0FFFFh, 1A5Bh>
decomposition <2FD4h, 0FFFFh, 1A5Fh>
decomposition <2FD5h, 0FFFFh, 1A63h>
decomposition <3000h, 0FFFFh, 0>
decomposition <3036h, 0FFFFh, 1A67h>
decomposition <3038h, 0FFFFh, 176Bh>
decomposition <3039h, 0FFFFh, 1A6Bh>
decomposition <303Ah, 0FFFFh, 1A6Fh>
decomposition <304Ch, 1A73h, 0FFFFh>
decomposition <304Eh, 1A7Ah, 0FFFFh>
decomposition <3050h, 1A81h, 0FFFFh>
decomposition <3052h, 1A88h, 0FFFFh>
decomposition <3054h, 1A8Fh, 0FFFFh>
decomposition <3056h, 1A96h, 0FFFFh>
decomposition <3058h, 1A9Dh, 0FFFFh>
decomposition <305Ah, 1AA4h, 0FFFFh>
decomposition <305Ch, 1AABh, 0FFFFh>
decomposition <305Eh, 1AB2h, 0FFFFh>
decomposition <3060h, 1AB9h, 0FFFFh>
decomposition <3062h, 1AC0h, 0FFFFh>
decomposition <3065h, 1AC7h, 0FFFFh>
decomposition <3067h, 1ACEh, 0FFFFh>
decomposition <3069h, 1AD5h, 0FFFFh>
decomposition <3070h, 1ADCh, 0FFFFh>
decomposition <3071h, 1AE3h, 0FFFFh>
decomposition <3073h, 1AEAh, 0FFFFh>
decomposition <3074h, 1AF1h, 0FFFFh>
decomposition <3076h, 1AF8h, 0FFFFh>
decomposition <3077h, 1AFFh, 0FFFFh>
decomposition <3079h, 1B06h, 0FFFFh>
decomposition <307Ah, 1B0Dh, 0FFFFh>
decomposition <307Ch, 1B14h, 0FFFFh>
decomposition <307Dh, 1B1Bh, 0FFFFh>
decomposition <3094h, 1B22h, 0FFFFh>
decomposition <309Bh, 0FFFFh, 1B29h>
decomposition <309Ch, 0FFFFh, 1B2Eh>
decomposition <309Eh, 1B33h, 0FFFFh>
decomposition <309Fh, 0FFFFh, 1B3Ah>
decomposition <30ACh, 1B41h, 0FFFFh>
decomposition <30AEh, 1B48h, 0FFFFh>
decomposition <30B0h, 1B4Fh, 0FFFFh>
decomposition <30B2h, 1B56h, 0FFFFh>
decomposition <30B4h, 1B5Dh, 0FFFFh>
decomposition <30B6h, 1B64h, 0FFFFh>
decomposition <30B8h, 1B6Bh, 0FFFFh>
decomposition <30BAh, 1B72h, 0FFFFh>
decomposition <30BCh, 1B79h, 0FFFFh>
decomposition <30BEh, 1B80h, 0FFFFh>
decomposition <30C0h, 1B87h, 0FFFFh>
decomposition <30C2h, 1B8Eh, 0FFFFh>
decomposition <30C5h, 1B95h, 0FFFFh>
decomposition <30C7h, 1B9Ch, 0FFFFh>
decomposition <30C9h, 1BA3h, 0FFFFh>
decomposition <30D0h, 1BAAh, 0FFFFh>
decomposition <30D1h, 1BB1h, 0FFFFh>
decomposition <30D3h, 1BB8h, 0FFFFh>
decomposition <30D4h, 1BBFh, 0FFFFh>
decomposition <30D6h, 1BC6h, 0FFFFh>
decomposition <30D7h, 1BCDh, 0FFFFh>
decomposition <30D9h, 1BD4h, 0FFFFh>
decomposition <30DAh, 1BDBh, 0FFFFh>
decomposition <30DCh, 1BE2h, 0FFFFh>
decomposition <30DDh, 1BE9h, 0FFFFh>
decomposition <30F4h, 1BF0h, 0FFFFh>
decomposition <30F7h, 1BF7h, 0FFFFh>
decomposition <30F8h, 1BFEh, 0FFFFh>
decomposition <30F9h, 1C05h, 0FFFFh>
decomposition <30FAh, 1C0Ch, 0FFFFh>
decomposition <30FEh, 1C13h, 0FFFFh>
decomposition <30FFh, 0FFFFh, 1C1Ah>
decomposition <3131h, 0FFFFh, 1C21h>
decomposition <3132h, 0FFFFh, 1C25h>
decomposition <3133h, 0FFFFh, 1C29h>
decomposition <3134h, 0FFFFh, 1C2Dh>
decomposition <3135h, 0FFFFh, 1C31h>
decomposition <3136h, 0FFFFh, 1C35h>
decomposition <3137h, 0FFFFh, 1C39h>
decomposition <3138h, 0FFFFh, 1C3Dh>
decomposition <3139h, 0FFFFh, 1C41h>
decomposition <313Ah, 0FFFFh, 1C45h>
decomposition <313Bh, 0FFFFh, 1C49h>
decomposition <313Ch, 0FFFFh, 1C4Dh>
decomposition <313Dh, 0FFFFh, 1C51h>
decomposition <313Eh, 0FFFFh, 1C55h>
decomposition <313Fh, 0FFFFh, 1C59h>
decomposition <3140h, 0FFFFh, 1C5Dh>
decomposition <3141h, 0FFFFh, 1C61h>
decomposition <3142h, 0FFFFh, 1C65h>
decomposition <3143h, 0FFFFh, 1C69h>
decomposition <3144h, 0FFFFh, 1C6Dh>
decomposition <3145h, 0FFFFh, 1C71h>
decomposition <3146h, 0FFFFh, 1C75h>
decomposition <3147h, 0FFFFh, 1C79h>
decomposition <3148h, 0FFFFh, 1C7Dh>
decomposition <3149h, 0FFFFh, 1C81h>
decomposition <314Ah, 0FFFFh, 1C85h>
decomposition <314Bh, 0FFFFh, 1C89h>
decomposition <314Ch, 0FFFFh, 1C8Dh>
decomposition <314Dh, 0FFFFh, 1C91h>
decomposition <314Eh, 0FFFFh, 1C95h>
decomposition <314Fh, 0FFFFh, 1C99h>
decomposition <3150h, 0FFFFh, 1C9Dh>
decomposition <3151h, 0FFFFh, 1CA1h>
decomposition <3152h, 0FFFFh, 1CA5h>
decomposition <3153h, 0FFFFh, 1CA9h>
decomposition <3154h, 0FFFFh, 1CADh>
decomposition <3155h, 0FFFFh, 1CB1h>
decomposition <3156h, 0FFFFh, 1CB5h>
decomposition <3157h, 0FFFFh, 1CB9h>
decomposition <3158h, 0FFFFh, 1CBDh>
decomposition <3159h, 0FFFFh, 1CC1h>
decomposition <315Ah, 0FFFFh, 1CC5h>
decomposition <315Bh, 0FFFFh, 1CC9h>
decomposition <315Ch, 0FFFFh, 1CCDh>
decomposition <315Dh, 0FFFFh, 1CD1h>
decomposition <315Eh, 0FFFFh, 1CD5h>
decomposition <315Fh, 0FFFFh, 1CD9h>
decomposition <3160h, 0FFFFh, 1CDDh>
decomposition <3161h, 0FFFFh, 1CE1h>
decomposition <3162h, 0FFFFh, 1CE5h>
decomposition <3163h, 0FFFFh, 1CE9h>
decomposition <3164h, 0FFFFh, 1CEDh>
decomposition <3165h, 0FFFFh, 1CF1h>
decomposition <3166h, 0FFFFh, 1CF5h>
decomposition <3167h, 0FFFFh, 1CF9h>
decomposition <3168h, 0FFFFh, 1CFDh>
decomposition <3169h, 0FFFFh, 1D01h>
decomposition <316Ah, 0FFFFh, 1D05h>
decomposition <316Bh, 0FFFFh, 1D09h>
decomposition <316Ch, 0FFFFh, 1D0Dh>
decomposition <316Dh, 0FFFFh, 1D11h>
decomposition <316Eh, 0FFFFh, 1D15h>
decomposition <316Fh, 0FFFFh, 1D19h>
decomposition <3170h, 0FFFFh, 1D1Dh>
decomposition <3171h, 0FFFFh, 1D21h>
decomposition <3172h, 0FFFFh, 1D25h>
decomposition <3173h, 0FFFFh, 1D29h>
decomposition <3174h, 0FFFFh, 1D2Dh>
decomposition <3175h, 0FFFFh, 1D31h>
decomposition <3176h, 0FFFFh, 1D35h>
decomposition <3177h, 0FFFFh, 1D39h>
decomposition <3178h, 0FFFFh, 1D3Dh>
decomposition <3179h, 0FFFFh, 1D41h>
decomposition <317Ah, 0FFFFh, 1D45h>
decomposition <317Bh, 0FFFFh, 1D49h>
decomposition <317Ch, 0FFFFh, 1D4Dh>
decomposition <317Dh, 0FFFFh, 1D51h>
decomposition <317Eh, 0FFFFh, 1D55h>
decomposition <317Fh, 0FFFFh, 1D59h>
decomposition <3180h, 0FFFFh, 1D5Dh>
decomposition <3181h, 0FFFFh, 1D61h>
decomposition <3182h, 0FFFFh, 1D65h>
decomposition <3183h, 0FFFFh, 1D69h>
decomposition <3184h, 0FFFFh, 1D6Dh>
decomposition <3185h, 0FFFFh, 1D71h>
decomposition <3186h, 0FFFFh, 1D75h>
decomposition <3187h, 0FFFFh, 1D79h>
decomposition <3188h, 0FFFFh, 1D7Dh>
decomposition <3189h, 0FFFFh, 1D81h>
decomposition <318Ah, 0FFFFh, 1D85h>
decomposition <318Bh, 0FFFFh, 1D89h>
decomposition <318Ch, 0FFFFh, 1D8Dh>
decomposition <318Dh, 0FFFFh, 1D91h>
decomposition <318Eh, 0FFFFh, 1D95h>
decomposition <3192h, 0FFFFh, 170Fh>
decomposition <3193h, 0FFFFh, 1727h>
decomposition <3194h, 0FFFFh, 1D99h>
decomposition <3195h, 0FFFFh, 1D9Dh>
decomposition <3196h, 0FFFFh, 1DA1h>
decomposition <3197h, 0FFFFh, 1DA5h>
decomposition <3198h, 0FFFFh, 1DA9h>
decomposition <3199h, 0FFFFh, 1DADh>
decomposition <319Ah, 0FFFFh, 171Fh>
decomposition <319Bh, 0FFFFh, 1DB1h>
decomposition <319Ch, 0FFFFh, 1DB5h>
decomposition <319Dh, 0FFFFh, 1DB9h>
decomposition <319Eh, 0FFFFh, 1DBDh>
decomposition <319Fh, 0FFFFh, 172Fh>
decomposition <3200h, 0FFFFh, 1DC1h>
decomposition <3201h, 0FFFFh, 1DC7h>
decomposition <3202h, 0FFFFh, 1DCDh>
decomposition <3203h, 0FFFFh, 1DD3h>
decomposition <3204h, 0FFFFh, 1DD9h>
decomposition <3205h, 0FFFFh, 1DDFh>
decomposition <3206h, 0FFFFh, 1DE5h>
decomposition <3207h, 0FFFFh, 1DEBh>
decomposition <3208h, 0FFFFh, 1DF1h>
decomposition <3209h, 0FFFFh, 1DF7h>
decomposition <320Ah, 0FFFFh, 1DFDh>
decomposition <320Bh, 0FFFFh, 1E03h>
decomposition <320Ch, 0FFFFh, 1E09h>
decomposition <320Dh, 0FFFFh, 1E0Fh>
decomposition <320Eh, 0FFFFh, 1E15h>
decomposition <320Fh, 0FFFFh, 1E1Eh>
decomposition <3210h, 0FFFFh, 1E27h>
decomposition <3211h, 0FFFFh, 1E30h>
decomposition <3212h, 0FFFFh, 1E39h>
decomposition <3213h, 0FFFFh, 1E42h>
decomposition <3214h, 0FFFFh, 1E4Bh>
decomposition <3215h, 0FFFFh, 1E54h>
decomposition <3216h, 0FFFFh, 1E5Dh>
decomposition <3217h, 0FFFFh, 1E66h>
decomposition <3218h, 0FFFFh, 1E6Fh>
decomposition <3219h, 0FFFFh, 1E78h>
decomposition <321Ah, 0FFFFh, 1E81h>
decomposition <321Bh, 0FFFFh, 1E8Ah>
decomposition <321Ch, 0FFFFh, 1E93h>
decomposition <3220h, 0FFFFh, 1E9Ch>
decomposition <3221h, 0FFFFh, 1EA2h>
decomposition <3222h, 0FFFFh, 1EA8h>
decomposition <3223h, 0FFFFh, 1EAEh>
decomposition <3224h, 0FFFFh, 1EB4h>
decomposition <3225h, 0FFFFh, 1EBAh>
decomposition <3226h, 0FFFFh, 1EC0h>
decomposition <3227h, 0FFFFh, 1EC6h>
decomposition <3228h, 0FFFFh, 1ECCh>
decomposition <3229h, 0FFFFh, 1ED2h>
decomposition <322Ah, 0FFFFh, 1ED8h>
decomposition <322Bh, 0FFFFh, 1EDEh>
decomposition <322Ch, 0FFFFh, 1EE4h>
decomposition <322Dh, 0FFFFh, 1EEAh>
decomposition <322Eh, 0FFFFh, 1EF0h>
decomposition <322Fh, 0FFFFh, 1EF6h>
decomposition <3230h, 0FFFFh, 1EFCh>
decomposition <3231h, 0FFFFh, 1F02h>
decomposition <3232h, 0FFFFh, 1F08h>
decomposition <3233h, 0FFFFh, 1F0Eh>
decomposition <3234h, 0FFFFh, 1F14h>
decomposition <3235h, 0FFFFh, 1F1Ah>
decomposition <3236h, 0FFFFh, 1F20h>
decomposition <3237h, 0FFFFh, 1F26h>
decomposition <3238h, 0FFFFh, 1F2Ch>
decomposition <3239h, 0FFFFh, 1F32h>
decomposition <323Ah, 0FFFFh, 1F38h>
decomposition <323Bh, 0FFFFh, 1F3Eh>
decomposition <323Ch, 0FFFFh, 1F44h>
decomposition <323Dh, 0FFFFh, 1F4Ah>
decomposition <323Eh, 0FFFFh, 1F50h>
decomposition <323Fh, 0FFFFh, 1F56h>
decomposition <3240h, 0FFFFh, 1F5Ch>
decomposition <3241h, 0FFFFh, 1F62h>
decomposition <3242h, 0FFFFh, 1F68h>
decomposition <3243h, 0FFFFh, 1F6Eh>
decomposition <3251h, 0FFFFh, 1F74h>
decomposition <3252h, 0FFFFh, 1F77h>
decomposition <3253h, 0FFFFh, 1F7Ah>
decomposition <3254h, 0FFFFh, 1F7Dh>
decomposition <3255h, 0FFFFh, 1F80h>
decomposition <3256h, 0FFFFh, 1F83h>
decomposition <3257h, 0FFFFh, 1F86h>
decomposition <3258h, 0FFFFh, 1F89h>
decomposition <3259h, 0FFFFh, 1F8Ch>
decomposition <325Ah, 0FFFFh, 1F8Fh>
decomposition <325Bh, 0FFFFh, 1F92h>
decomposition <325Ch, 0FFFFh, 1F95h>
decomposition <325Dh, 0FFFFh, 1F98h>
decomposition <325Eh, 0FFFFh, 1F9Bh>
decomposition <325Fh, 0FFFFh, 1F9Eh>
decomposition <3260h, 0FFFFh, 1C21h>
decomposition <3261h, 0FFFFh, 1C2Dh>
decomposition <3262h, 0FFFFh, 1C39h>
decomposition <3263h, 0FFFFh, 1C41h>
decomposition <3264h, 0FFFFh, 1C61h>
decomposition <3265h, 0FFFFh, 1C65h>
decomposition <3266h, 0FFFFh, 1C71h>
decomposition <3267h, 0FFFFh, 1C79h>
decomposition <3268h, 0FFFFh, 1C7Dh>
decomposition <3269h, 0FFFFh, 1C85h>
decomposition <326Ah, 0FFFFh, 1C89h>
decomposition <326Bh, 0FFFFh, 1C8Dh>
decomposition <326Ch, 0FFFFh, 1C91h>
decomposition <326Dh, 0FFFFh, 1C95h>
decomposition <326Eh, 0FFFFh, 1FA1h>
decomposition <326Fh, 0FFFFh, 1FA8h>
decomposition <3270h, 0FFFFh, 1FAFh>
decomposition <3271h, 0FFFFh, 1FB6h>
decomposition <3272h, 0FFFFh, 1FBDh>
decomposition <3273h, 0FFFFh, 1FC4h>
decomposition <3274h, 0FFFFh, 1FCBh>
decomposition <3275h, 0FFFFh, 1FD2h>
decomposition <3276h, 0FFFFh, 1FD9h>
decomposition <3277h, 0FFFFh, 1FE0h>
decomposition <3278h, 0FFFFh, 1FE7h>
decomposition <3279h, 0FFFFh, 1FEEh>
decomposition <327Ah, 0FFFFh, 1FF5h>
decomposition <327Bh, 0FFFFh, 1FFCh>
decomposition <3280h, 0FFFFh, 170Fh>
decomposition <3281h, 0FFFFh, 1727h>
decomposition <3282h, 0FFFFh, 1D99h>
decomposition <3283h, 0FFFFh, 1D9Dh>
decomposition <3284h, 0FFFFh, 2003h>
decomposition <3285h, 0FFFFh, 2007h>
decomposition <3286h, 0FFFFh, 200Bh>
decomposition <3287h, 0FFFFh, 173Bh>
decomposition <3288h, 0FFFFh, 200Fh>
decomposition <3289h, 0FFFFh, 176Bh>
decomposition <328Ah, 0FFFFh, 1833h>
decomposition <328Bh, 0FFFFh, 1863h>
decomposition <328Ch, 0FFFFh, 185Fh>
decomposition <328Dh, 0FFFFh, 1837h>
decomposition <328Eh, 0FFFFh, 19A7h>
decomposition <328Fh, 0FFFFh, 178Bh>
decomposition <3290h, 0FFFFh, 182Bh>
decomposition <3291h, 0FFFFh, 2013h>
decomposition <3292h, 0FFFFh, 2017h>
decomposition <3293h, 0FFFFh, 201Bh>
decomposition <3294h, 0FFFFh, 201Fh>
decomposition <3295h, 0FFFFh, 2023h>
decomposition <3296h, 0FFFFh, 2027h>
decomposition <3297h, 0FFFFh, 202Bh>
decomposition <3298h, 0FFFFh, 202Fh>
decomposition <3299h, 0FFFFh, 2033h>
decomposition <329Ah, 0FFFFh, 2037h>
decomposition <329Bh, 0FFFFh, 17A3h>
decomposition <329Ch, 0FFFFh, 203Bh>
decomposition <329Dh, 0FFFFh, 203Fh>
decomposition <329Eh, 0FFFFh, 2043h>
decomposition <329Fh, 0FFFFh, 2047h>
decomposition <32A0h, 0FFFFh, 204Bh>
decomposition <32A1h, 0FFFFh, 204Fh>
decomposition <32A2h, 0FFFFh, 2053h>
decomposition <32A3h, 0FFFFh, 2057h>
decomposition <32A4h, 0FFFFh, 1DA1h>
decomposition <32A5h, 0FFFFh, 1DA5h>
decomposition <32A6h, 0FFFFh, 1DA9h>
decomposition <32A7h, 0FFFFh, 205Bh>
decomposition <32A8h, 0FFFFh, 205Fh>
decomposition <32A9h, 0FFFFh, 2063h>
decomposition <32AAh, 0FFFFh, 2067h>
decomposition <32ABh, 0FFFFh, 206Bh>
decomposition <32ACh, 0FFFFh, 206Fh>
decomposition <32ADh, 0FFFFh, 2073h>
decomposition <32AEh, 0FFFFh, 2077h>
decomposition <32AFh, 0FFFFh, 207Bh>
decomposition <32B0h, 0FFFFh, 207Fh>
decomposition <32B1h, 0FFFFh, 2083h>
decomposition <32B2h, 0FFFFh, 2086h>
decomposition <32B3h, 0FFFFh, 2089h>
decomposition <32B4h, 0FFFFh, 208Ch>
decomposition <32B5h, 0FFFFh, 208Fh>
decomposition <32B6h, 0FFFFh, 2092h>
decomposition <32B7h, 0FFFFh, 2095h>
decomposition <32B8h, 0FFFFh, 2098h>
decomposition <32B9h, 0FFFFh, 209Bh>
decomposition <32BAh, 0FFFFh, 209Eh>
decomposition <32BBh, 0FFFFh, 20A1h>
decomposition <32BCh, 0FFFFh, 20A4h>
decomposition <32BDh, 0FFFFh, 20A7h>
decomposition <32BEh, 0FFFFh, 20AAh>
decomposition <32BFh, 0FFFFh, 20ADh>
decomposition <32C0h, 0FFFFh, 20B0h>
decomposition <32C1h, 0FFFFh, 20B5h>
decomposition <32C2h, 0FFFFh, 20BAh>
decomposition <32C3h, 0FFFFh, 20BFh>
decomposition <32C4h, 0FFFFh, 20C4h>
decomposition <32C5h, 0FFFFh, 20C9h>
decomposition <32C6h, 0FFFFh, 20CEh>
decomposition <32C7h, 0FFFFh, 20D3h>
decomposition <32C8h, 0FFFFh, 20D8h>
decomposition <32C9h, 0FFFFh, 20DDh>
decomposition <32CAh, 0FFFFh, 20E3h>
decomposition <32CBh, 0FFFFh, 20E9h>
decomposition <32D0h, 0FFFFh, 20EFh>
decomposition <32D1h, 0FFFFh, 20F3h>
decomposition <32D2h, 0FFFFh, 20F7h>
decomposition <32D3h, 0FFFFh, 20FBh>
decomposition <32D4h, 0FFFFh, 20FFh>
decomposition <32D5h, 0FFFFh, 2103h>
decomposition <32D6h, 0FFFFh, 2107h>
decomposition <32D7h, 0FFFFh, 210Bh>
decomposition <32D8h, 0FFFFh, 210Fh>
decomposition <32D9h, 0FFFFh, 2113h>
decomposition <32DAh, 0FFFFh, 2117h>
decomposition <32DBh, 0FFFFh, 211Bh>
decomposition <32DCh, 0FFFFh, 211Fh>
decomposition <32DDh, 0FFFFh, 2123h>
decomposition <32DEh, 0FFFFh, 2127h>
decomposition <32DFh, 0FFFFh, 212Bh>
decomposition <32E0h, 0FFFFh, 212Fh>
decomposition <32E1h, 0FFFFh, 2133h>
decomposition <32E2h, 0FFFFh, 2137h>
decomposition <32E3h, 0FFFFh, 213Bh>
decomposition <32E4h, 0FFFFh, 213Fh>
decomposition <32E5h, 0FFFFh, 2143h>
decomposition <32E6h, 0FFFFh, 2147h>
decomposition <32E7h, 0FFFFh, 214Bh>
decomposition <32E8h, 0FFFFh, 214Fh>
decomposition <32E9h, 0FFFFh, 2153h>
decomposition <32EAh, 0FFFFh, 2157h>
decomposition <32EBh, 0FFFFh, 215Bh>
decomposition <32ECh, 0FFFFh, 215Fh>
decomposition <32EDh, 0FFFFh, 2163h>
decomposition <32EEh, 0FFFFh, 2167h>
decomposition <32EFh, 0FFFFh, 216Bh>
decomposition <32F0h, 0FFFFh, 216Fh>
decomposition <32F1h, 0FFFFh, 2173h>
decomposition <32F2h, 0FFFFh, 2177h>
decomposition <32F3h, 0FFFFh, 217Bh>
decomposition <32F4h, 0FFFFh, 217Fh>
decomposition <32F5h, 0FFFFh, 2183h>
decomposition <32F6h, 0FFFFh, 2187h>
decomposition <32F7h, 0FFFFh, 218Bh>
decomposition <32F8h, 0FFFFh, 218Fh>
decomposition <32F9h, 0FFFFh, 2193h>
decomposition <32FAh, 0FFFFh, 2197h>
decomposition <32FBh, 0FFFFh, 219Bh>
decomposition <32FCh, 0FFFFh, 219Fh>
decomposition <32FDh, 0FFFFh, 21A3h>
decomposition <32FEh, 0FFFFh, 21A7h>
decomposition <3300h, 0FFFFh, 21ABh>
decomposition <3301h, 0FFFFh, 21BBh>
decomposition <3302h, 0FFFFh, 21C8h>
decomposition <3303h, 0FFFFh, 21D8h>
decomposition <3304h, 0FFFFh, 21E2h>
decomposition <3305h, 0FFFFh, 21F2h>
decomposition <3306h, 0FFFFh, 21FCh>
decomposition <3307h, 0FFFFh, 2206h>
decomposition <3308h, 0FFFFh, 2219h>
decomposition <3309h, 0FFFFh, 2226h>
decomposition <330Ah, 0FFFFh, 2230h>
decomposition <330Bh, 0FFFFh, 223Ah>
decomposition <330Ch, 0FFFFh, 2244h>
decomposition <330Dh, 0FFFFh, 2251h>
decomposition <330Eh, 0FFFFh, 225Eh>
decomposition <330Fh, 0FFFFh, 226Bh>
decomposition <3310h, 0FFFFh, 2278h>
decomposition <3311h, 0FFFFh, 2285h>
decomposition <3312h, 0FFFFh, 2292h>
decomposition <3313h, 0FFFFh, 229Fh>
decomposition <3314h, 0FFFFh, 22B2h>
decomposition <3315h, 0FFFFh, 22B9h>
decomposition <3316h, 0FFFFh, 22CCh>
decomposition <3317h, 0FFFFh, 22DFh>
decomposition <3318h, 0FFFFh, 22EFh>
decomposition <3319h, 0FFFFh, 22FCh>
decomposition <331Ah, 0FFFFh, 230Fh>
decomposition <331Bh, 0FFFFh, 2322h>
decomposition <331Ch, 0FFFFh, 232Fh>
decomposition <331Dh, 0FFFFh, 2339h>
decomposition <331Eh, 0FFFFh, 2343h>
decomposition <331Fh, 0FFFFh, 2350h>
decomposition <3320h, 0FFFFh, 235Dh>
decomposition <3321h, 0FFFFh, 236Dh>
decomposition <3322h, 0FFFFh, 237Dh>
decomposition <3323h, 0FFFFh, 2387h>
decomposition <3324h, 0FFFFh, 2391h>
decomposition <3325h, 0FFFFh, 239Eh>
decomposition <3326h, 0FFFFh, 23A8h>
decomposition <3327h, 0FFFFh, 23B2h>
decomposition <3328h, 0FFFFh, 23B9h>
decomposition <3329h, 0FFFFh, 23C0h>
decomposition <332Ah, 0FFFFh, 23CAh>
decomposition <332Bh, 0FFFFh, 23D4h>
decomposition <332Ch, 0FFFFh, 23E7h>
decomposition <332Dh, 0FFFFh, 23F4h>
decomposition <332Eh, 0FFFFh, 2404h>
decomposition <332Fh, 0FFFFh, 2417h>
decomposition <3330h, 0FFFFh, 2424h>
decomposition <3331h, 0FFFFh, 242Eh>
decomposition <3332h, 0FFFFh, 2438h>
decomposition <3333h, 0FFFFh, 244Bh>
decomposition <3334h, 0FFFFh, 2458h>
decomposition <3335h, 0FFFFh, 246Bh>
decomposition <3336h, 0FFFFh, 2475h>
decomposition <3337h, 0FFFFh, 2485h>
decomposition <3338h, 0FFFFh, 248Fh>
decomposition <3339h, 0FFFFh, 249Ch>
decomposition <333Ah, 0FFFFh, 24A6h>
decomposition <333Bh, 0FFFFh, 24B3h>
decomposition <333Ch, 0FFFFh, 24C3h>
decomposition <333Dh, 0FFFFh, 24D0h>
decomposition <333Eh, 0FFFFh, 24E0h>
decomposition <333Fh, 0FFFFh, 24EDh>
decomposition <3340h, 0FFFFh, 24F4h>
decomposition <3341h, 0FFFFh, 2504h>
decomposition <3342h, 0FFFFh, 250Eh>
decomposition <3343h, 0FFFFh, 2518h>
decomposition <3344h, 0FFFFh, 2525h>
decomposition <3345h, 0FFFFh, 252Fh>
decomposition <3346h, 0FFFFh, 2539h>
decomposition <3347h, 0FFFFh, 2543h>
decomposition <3348h, 0FFFFh, 2553h>
decomposition <3349h, 0FFFFh, 2560h>
decomposition <334Ah, 0FFFFh, 2567h>
decomposition <334Bh, 0FFFFh, 257Ah>
decomposition <334Ch, 0FFFFh, 2584h>
decomposition <334Dh, 0FFFFh, 2594h>
decomposition <334Eh, 0FFFFh, 25A1h>
decomposition <334Fh, 0FFFFh, 25AEh>
decomposition <3350h, 0FFFFh, 25B8h>
decomposition <3351h, 0FFFFh, 25C2h>
decomposition <3352h, 0FFFFh, 25CFh>
decomposition <3353h, 0FFFFh, 25D6h>
decomposition <3354h, 0FFFFh, 25E3h>
decomposition <3355h, 0FFFFh, 25F3h>
decomposition <3356h, 0FFFFh, 25FAh>
decomposition <3357h, 0FFFFh, 260Dh>
decomposition <3358h, 0FFFFh, 2617h>
decomposition <3359h, 0FFFFh, 261Ch>
decomposition <335Ah, 0FFFFh, 2621h>
decomposition <335Bh, 0FFFFh, 2626h>
decomposition <335Ch, 0FFFFh, 262Bh>
decomposition <335Dh, 0FFFFh, 2630h>
decomposition <335Eh, 0FFFFh, 2635h>
decomposition <335Fh, 0FFFFh, 263Ah>
decomposition <3360h, 0FFFFh, 263Fh>
decomposition <3361h, 0FFFFh, 2644h>
decomposition <3362h, 0FFFFh, 2649h>
decomposition <3363h, 0FFFFh, 264Fh>
decomposition <3364h, 0FFFFh, 2655h>
decomposition <3365h, 0FFFFh, 265Bh>
decomposition <3366h, 0FFFFh, 2661h>
decomposition <3367h, 0FFFFh, 2667h>
decomposition <3368h, 0FFFFh, 266Dh>
decomposition <3369h, 0FFFFh, 2673h>
decomposition <336Ah, 0FFFFh, 2679h>
decomposition <336Bh, 0FFFFh, 267Fh>
decomposition <336Ch, 0FFFFh, 2685h>
decomposition <336Dh, 0FFFFh, 268Bh>
decomposition <336Eh, 0FFFFh, 2691h>
decomposition <336Fh, 0FFFFh, 2697h>
decomposition <3370h, 0FFFFh, 269Dh>
decomposition <3371h, 0FFFFh, 26A3h>
decomposition <3372h, 0FFFFh, 26A7h>
decomposition <3373h, 0FFFFh, 26AAh>
decomposition <3374h, 0FFFFh, 26ADh>
decomposition <3375h, 0FFFFh, 26B1h>
decomposition <3376h, 0FFFFh, 26B4h>
decomposition <337Bh, 0FFFFh, 26B7h>
decomposition <337Ch, 0FFFFh, 26BEh>
decomposition <337Dh, 0FFFFh, 26C5h>
decomposition <337Eh, 0FFFFh, 26CCh>
decomposition <337Fh, 0FFFFh, 26D3h>
decomposition <3380h, 0FFFFh, 26E0h>
decomposition <3381h, 0FFFFh, 26E3h>
decomposition <3382h, 0FFFFh, 26E6h>
decomposition <3383h, 0FFFFh, 26EAh>
decomposition <3384h, 0FFFFh, 26EDh>
decomposition <3385h, 0FFFFh, 26F0h>
decomposition <3386h, 0FFFFh, 26F3h>
decomposition <3387h, 0FFFFh, 26F6h>
decomposition <3388h, 0FFFFh, 26F9h>
decomposition <3389h, 0FFFFh, 26FDh>
decomposition <338Ah, 0FFFFh, 2702h>
decomposition <338Bh, 0FFFFh, 2705h>
decomposition <338Ch, 0FFFFh, 2708h>
decomposition <338Dh, 0FFFFh, 270Ch>
decomposition <338Eh, 0FFFFh, 2710h>
decomposition <338Fh, 0FFFFh, 2713h>
decomposition <3390h, 0FFFFh, 2716h>
decomposition <3391h, 0FFFFh, 2719h>
decomposition <3392h, 0FFFFh, 271Dh>
decomposition <3393h, 0FFFFh, 2721h>
decomposition <3394h, 0FFFFh, 2725h>
decomposition <3395h, 0FFFFh, 2729h>
decomposition <3396h, 0FFFFh, 272Dh>
decomposition <3397h, 0FFFFh, 2730h>
decomposition <3398h, 0FFFFh, 2733h>
decomposition <3399h, 0FFFFh, 2736h>
decomposition <339Ah, 0FFFFh, 2739h>
decomposition <339Bh, 0FFFFh, 273Ch>
decomposition <339Ch, 0FFFFh, 2740h>
decomposition <339Dh, 0FFFFh, 2743h>
decomposition <339Eh, 0FFFFh, 2746h>
decomposition <339Fh, 0FFFFh, 2749h>
decomposition <33A0h, 0FFFFh, 274Dh>
decomposition <33A1h, 0FFFFh, 2751h>
decomposition <33A2h, 0FFFFh, 2754h>
decomposition <33A3h, 0FFFFh, 2758h>
decomposition <33A4h, 0FFFFh, 275Ch>
decomposition <33A5h, 0FFFFh, 2760h>
decomposition <33A6h, 0FFFFh, 2763h>
decomposition <33A7h, 0FFFFh, 2767h>
decomposition <33A8h, 0FFFFh, 276Dh>
decomposition <33A9h, 0FFFFh, 2774h>
decomposition <33AAh, 0FFFFh, 2777h>
decomposition <33ABh, 0FFFFh, 277Bh>
decomposition <33ACh, 0FFFFh, 277Fh>
decomposition <33ADh, 0FFFFh, 2783h>
decomposition <33AEh, 0FFFFh, 2787h>
decomposition <33AFh, 0FFFFh, 278Fh>
decomposition <33B0h, 0FFFFh, 2798h>
decomposition <33B1h, 0FFFFh, 279Bh>
decomposition <33B2h, 0FFFFh, 279Eh>
decomposition <33B3h, 0FFFFh, 27A2h>
decomposition <33B4h, 0FFFFh, 27A5h>
decomposition <33B5h, 0FFFFh, 27A8h>
decomposition <33B6h, 0FFFFh, 27ABh>
decomposition <33B7h, 0FFFFh, 27AFh>
decomposition <33B8h, 0FFFFh, 27B2h>
decomposition <33B9h, 0FFFFh, 27B5h>
decomposition <33BAh, 0FFFFh, 27B8h>
decomposition <33BBh, 0FFFFh, 27BBh>
decomposition <33BCh, 0FFFFh, 27BEh>
decomposition <33BDh, 0FFFFh, 27C2h>
decomposition <33BEh, 0FFFFh, 27C5h>
decomposition <33BFh, 0FFFFh, 27C8h>
decomposition <33C0h, 0FFFFh, 27CBh>
decomposition <33C1h, 0FFFFh, 27CFh>
decomposition <33C2h, 0FFFFh, 27D3h>
decomposition <33C3h, 0FFFFh, 27D8h>
decomposition <33C4h, 0FFFFh, 27DBh>
decomposition <33C5h, 0FFFFh, 27DEh>
decomposition <33C6h, 0FFFFh, 27E1h>
decomposition <33C7h, 0FFFFh, 27E8h>
decomposition <33C8h, 0FFFFh, 27ECh>
decomposition <33C9h, 0FFFFh, 27EFh>
decomposition <33CAh, 0FFFFh, 27F2h>
decomposition <33CBh, 0FFFFh, 27F5h>
decomposition <33CCh, 0FFFFh, 27F8h>
decomposition <33CDh, 0FFFFh, 27FBh>
decomposition <33CEh, 0FFFFh, 27FEh>
decomposition <33CFh, 0FFFFh, 2801h>
decomposition <33D0h, 0FFFFh, 2804h>
decomposition <33D1h, 0FFFFh, 2807h>
decomposition <33D2h, 0FFFFh, 280Ah>
decomposition <33D3h, 0FFFFh, 280Eh>
decomposition <33D4h, 0FFFFh, 2811h>
decomposition <33D5h, 0FFFFh, 2814h>
decomposition <33D6h, 0FFFFh, 2818h>
decomposition <33D7h, 0FFFFh, 281Ch>
decomposition <33D8h, 0FFFFh, 281Fh>
decomposition <33D9h, 0FFFFh, 2824h>
decomposition <33DAh, 0FFFFh, 2828h>
decomposition <33DBh, 0FFFFh, 282Bh>
decomposition <33DCh, 0FFFFh, 282Eh>
decomposition <33DDh, 0FFFFh, 2831h>
decomposition <33E0h, 0FFFFh, 2834h>
decomposition <33E1h, 0FFFFh, 2839h>
decomposition <33E2h, 0FFFFh, 283Eh>
decomposition <33E3h, 0FFFFh, 2843h>
decomposition <33E4h, 0FFFFh, 2848h>
decomposition <33E5h, 0FFFFh, 284Dh>
decomposition <33E6h, 0FFFFh, 2852h>
decomposition <33E7h, 0FFFFh, 2857h>
decomposition <33E8h, 0FFFFh, 285Ch>
decomposition <33E9h, 0FFFFh, 2861h>
decomposition <33EAh, 0FFFFh, 2867h>
decomposition <33EBh, 0FFFFh, 286Dh>
decomposition <33ECh, 0FFFFh, 2873h>
decomposition <33EDh, 0FFFFh, 2879h>
decomposition <33EEh, 0FFFFh, 287Fh>
decomposition <33EFh, 0FFFFh, 2885h>
decomposition <33F0h, 0FFFFh, 288Bh>
decomposition <33F1h, 0FFFFh, 2891h>
decomposition <33F2h, 0FFFFh, 2897h>
decomposition <33F3h, 0FFFFh, 289Dh>
decomposition <33F4h, 0FFFFh, 28A3h>
decomposition <33F5h, 0FFFFh, 28A9h>
decomposition <33F6h, 0FFFFh, 28AFh>
decomposition <33F7h, 0FFFFh, 28B5h>
decomposition <33F8h, 0FFFFh, 28BBh>
decomposition <33F9h, 0FFFFh, 28C1h>
decomposition <33FAh, 0FFFFh, 28C7h>
decomposition <33FBh, 0FFFFh, 28CDh>
decomposition <33FCh, 0FFFFh, 28D3h>
decomposition <33FDh, 0FFFFh, 28D9h>
decomposition <33FEh, 0FFFFh, 28DFh>
decomposition <0F900h, 28E5h, 0FFFFh>
decomposition <0F901h, 28E9h, 0FFFFh>
decomposition <0F902h, 1987h, 0FFFFh>
decomposition <0F903h, 28EDh, 0FFFFh>
decomposition <0F904h, 28F1h, 0FFFFh>
decomposition <0F905h, 28F5h, 0FFFFh>
decomposition <0F906h, 28F9h, 0FFFFh>
decomposition <0F907h, 1A5Fh, 0FFFFh>
decomposition <0F908h, 1A5Fh, 0FFFFh>
decomposition <0F909h, 28FDh, 0FFFFh>
decomposition <0F90Ah, 19A7h, 0FFFFh>
decomposition <0F90Bh, 2901h, 0FFFFh>
decomposition <0F90Ch, 2905h, 0FFFFh>
decomposition <0F90Dh, 2909h, 0FFFFh>
decomposition <0F90Eh, 290Dh, 0FFFFh>
decomposition <0F90Fh, 2911h, 0FFFFh>
decomposition <0F910h, 2915h, 0FFFFh>
decomposition <0F911h, 2919h, 0FFFFh>
decomposition <0F912h, 291Dh, 0FFFFh>
decomposition <0F913h, 2921h, 0FFFFh>
decomposition <0F914h, 2925h, 0FFFFh>
decomposition <0F915h, 2929h, 0FFFFh>
decomposition <0F916h, 292Dh, 0FFFFh>
decomposition <0F917h, 2931h, 0FFFFh>
decomposition <0F918h, 2935h, 0FFFFh>
decomposition <0F919h, 2939h, 0FFFFh>
decomposition <0F91Ah, 293Dh, 0FFFFh>
decomposition <0F91Bh, 2941h, 0FFFFh>
decomposition <0F91Ch, 2945h, 0FFFFh>
decomposition <0F91Dh, 2949h, 0FFFFh>
decomposition <0F91Eh, 294Dh, 0FFFFh>
decomposition <0F91Fh, 2951h, 0FFFFh>
decomposition <0F920h, 2955h, 0FFFFh>
decomposition <0F921h, 2959h, 0FFFFh>
decomposition <0F922h, 295Dh, 0FFFFh>
decomposition <0F923h, 2961h, 0FFFFh>
decomposition <0F924h, 2965h, 0FFFFh>
decomposition <0F925h, 2969h, 0FFFFh>
decomposition <0F926h, 296Dh, 0FFFFh>
decomposition <0F927h, 2971h, 0FFFFh>
decomposition <0F928h, 2975h, 0FFFFh>
decomposition <0F929h, 2979h, 0FFFFh>
decomposition <0F92Ah, 297Dh, 0FFFFh>
decomposition <0F92Bh, 2981h, 0FFFFh>
decomposition <0F92Ch, 2985h, 0FFFFh>
decomposition <0F92Dh, 2989h, 0FFFFh>
decomposition <0F92Eh, 298Dh, 0FFFFh>
decomposition <0F92Fh, 2991h, 0FFFFh>
decomposition <0F930h, 2995h, 0FFFFh>
decomposition <0F931h, 2999h, 0FFFFh>
decomposition <0F932h, 299Dh, 0FFFFh>
decomposition <0F933h, 29A1h, 0FFFFh>
decomposition <0F934h, 18FFh, 0FFFFh>
decomposition <0F935h, 29A5h, 0FFFFh>
decomposition <0F936h, 29A9h, 0FFFFh>
decomposition <0F937h, 29ADh, 0FFFFh>
decomposition <0F938h, 29B1h, 0FFFFh>
decomposition <0F939h, 29B5h, 0FFFFh>
decomposition <0F93Ah, 29B9h, 0FFFFh>
decomposition <0F93Bh, 29BDh, 0FFFFh>
decomposition <0F93Ch, 29C1h, 0FFFFh>
decomposition <0F93Dh, 29C5h, 0FFFFh>
decomposition <0F93Eh, 29C9h, 0FFFFh>
decomposition <0F93Fh, 29CDh, 0FFFFh>
decomposition <0F940h, 1A23h, 0FFFFh>
decomposition <0F941h, 29D1h, 0FFFFh>
decomposition <0F942h, 29D5h, 0FFFFh>
decomposition <0F943h, 29D9h, 0FFFFh>
decomposition <0F944h, 29DDh, 0FFFFh>
decomposition <0F945h, 29E1h, 0FFFFh>
decomposition <0F946h, 29E5h, 0FFFFh>
decomposition <0F947h, 29E9h, 0FFFFh>
decomposition <0F948h, 29EDh, 0FFFFh>
decomposition <0F949h, 29F1h, 0FFFFh>
decomposition <0F94Ah, 29F5h, 0FFFFh>
decomposition <0F94Bh, 29F9h, 0FFFFh>
decomposition <0F94Ch, 29FDh, 0FFFFh>
decomposition <0F94Dh, 2A01h, 0FFFFh>
decomposition <0F94Eh, 2A05h, 0FFFFh>
decomposition <0F94Fh, 2A09h, 0FFFFh>
decomposition <0F950h, 2A0Dh, 0FFFFh>
decomposition <0F951h, 2A11h, 0FFFFh>
decomposition <0F952h, 2A15h, 0FFFFh>
decomposition <0F953h, 2A19h, 0FFFFh>
decomposition <0F954h, 2A1Dh, 0FFFFh>
decomposition <0F955h, 2A21h, 0FFFFh>
decomposition <0F956h, 2A25h, 0FFFFh>
decomposition <0F957h, 2A29h, 0FFFFh>
decomposition <0F958h, 2A2Dh, 0FFFFh>
decomposition <0F959h, 2A31h, 0FFFFh>
decomposition <0F95Ah, 2A35h, 0FFFFh>
decomposition <0F95Bh, 2A39h, 0FFFFh>
decomposition <0F95Ch, 2925h, 0FFFFh>
decomposition <0F95Dh, 2A3Dh, 0FFFFh>
decomposition <0F95Eh, 2A41h, 0FFFFh>
decomposition <0F95Fh, 2A45h, 0FFFFh>
decomposition <0F960h, 2A49h, 0FFFFh>
decomposition <0F961h, 2A4Dh, 0FFFFh>
decomposition <0F962h, 2A51h, 0FFFFh>
decomposition <0F963h, 2A55h, 0FFFFh>
decomposition <0F964h, 2A59h, 0FFFFh>
decomposition <0F965h, 2A5Dh, 0FFFFh>
decomposition <0F966h, 2A61h, 0FFFFh>
decomposition <0F967h, 2A65h, 0FFFFh>
decomposition <0F968h, 2A69h, 0FFFFh>
decomposition <0F969h, 2A6Dh, 0FFFFh>
decomposition <0F96Ah, 2A71h, 0FFFFh>
decomposition <0F96Bh, 2A75h, 0FFFFh>
decomposition <0F96Ch, 2A79h, 0FFFFh>
decomposition <0F96Dh, 2A7Dh, 0FFFFh>
decomposition <0F96Eh, 2A81h, 0FFFFh>
decomposition <0F96Fh, 2A85h, 0FFFFh>
decomposition <0F970h, 2A89h, 0FFFFh>
decomposition <0F971h, 198Fh, 0FFFFh>
decomposition <0F972h, 2A8Dh, 0FFFFh>
decomposition <0F973h, 2A91h, 0FFFFh>
decomposition <0F974h, 2A95h, 0FFFFh>
decomposition <0F975h, 2A99h, 0FFFFh>
decomposition <0F976h, 2A9Dh, 0FFFFh>
decomposition <0F977h, 2AA1h, 0FFFFh>
decomposition <0F978h, 2AA5h, 0FFFFh>
decomposition <0F979h, 2AA9h, 0FFFFh>
decomposition <0F97Ah, 2AADh, 0FFFFh>
decomposition <0F97Bh, 2AB1h, 0FFFFh>
decomposition <0F97Ch, 2AB5h, 0FFFFh>
decomposition <0F97Dh, 2AB9h, 0FFFFh>
decomposition <0F97Eh, 2ABDh, 0FFFFh>
decomposition <0F97Fh, 2AC1h, 0FFFFh>
decomposition <0F980h, 2AC5h, 0FFFFh>
decomposition <0F981h, 17A3h, 0FFFFh>
decomposition <0F982h, 2AC9h, 0FFFFh>
decomposition <0F983h, 2ACDh, 0FFFFh>
decomposition <0F984h, 2AD1h, 0FFFFh>
decomposition <0F985h, 2AD5h, 0FFFFh>
decomposition <0F986h, 2AD9h, 0FFFFh>
decomposition <0F987h, 2ADDh, 0FFFFh>
decomposition <0F988h, 2AE1h, 0FFFFh>
decomposition <0F989h, 2AE5h, 0FFFFh>
decomposition <0F98Ah, 1757h, 0FFFFh>
decomposition <0F98Bh, 2AE9h, 0FFFFh>
decomposition <0F98Ch, 2AEDh, 0FFFFh>
decomposition <0F98Dh, 2AF1h, 0FFFFh>
decomposition <0F98Eh, 2AF5h, 0FFFFh>
decomposition <0F98Fh, 2AF9h, 0FFFFh>
decomposition <0F990h, 2AFDh, 0FFFFh>
decomposition <0F991h, 2B01h, 0FFFFh>
decomposition <0F992h, 2B05h, 0FFFFh>
decomposition <0F993h, 2B09h, 0FFFFh>
decomposition <0F994h, 2B0Dh, 0FFFFh>
decomposition <0F995h, 2B11h, 0FFFFh>
decomposition <0F996h, 2B15h, 0FFFFh>
decomposition <0F997h, 2B19h, 0FFFFh>
decomposition <0F998h, 2B1Dh, 0FFFFh>
decomposition <0F999h, 2B21h, 0FFFFh>
decomposition <0F99Ah, 2B25h, 0FFFFh>
decomposition <0F99Bh, 2B29h, 0FFFFh>
decomposition <0F99Ch, 2B2Dh, 0FFFFh>
decomposition <0F99Dh, 2B31h, 0FFFFh>
decomposition <0F99Eh, 2B35h, 0FFFFh>
decomposition <0F99Fh, 2B39h, 0FFFFh>
decomposition <0F9A0h, 2B3Dh, 0FFFFh>
decomposition <0F9A1h, 2A85h, 0FFFFh>
decomposition <0F9A2h, 2B41h, 0FFFFh>
decomposition <0F9A3h, 2B45h, 0FFFFh>
decomposition <0F9A4h, 2B49h, 0FFFFh>
decomposition <0F9A5h, 2B4Dh, 0FFFFh>
decomposition <0F9A6h, 2B51h, 0FFFFh>
decomposition <0F9A7h, 2B55h, 0FFFFh>
decomposition <0F9A8h, 2B59h, 0FFFFh>
decomposition <0F9A9h, 2B5Dh, 0FFFFh>
decomposition <0F9AAh, 2A45h, 0FFFFh>
decomposition <0F9ABh, 2B61h, 0FFFFh>
decomposition <0F9ACh, 2B65h, 0FFFFh>
decomposition <0F9ADh, 2B69h, 0FFFFh>
decomposition <0F9AEh, 2B6Dh, 0FFFFh>
decomposition <0F9AFh, 2B71h, 0FFFFh>
decomposition <0F9B0h, 2B75h, 0FFFFh>
decomposition <0F9B1h, 2B79h, 0FFFFh>
decomposition <0F9B2h, 2B7Dh, 0FFFFh>
decomposition <0F9B3h, 2B81h, 0FFFFh>
decomposition <0F9B4h, 2B85h, 0FFFFh>
decomposition <0F9B5h, 2B89h, 0FFFFh>
decomposition <0F9B6h, 2B8Dh, 0FFFFh>
decomposition <0F9B7h, 2B91h, 0FFFFh>
decomposition <0F9B8h, 2B95h, 0FFFFh>
decomposition <0F9B9h, 2B99h, 0FFFFh>
decomposition <0F9BAh, 2B9Dh, 0FFFFh>
decomposition <0F9BBh, 2BA1h, 0FFFFh>
decomposition <0F9BCh, 2BA5h, 0FFFFh>
decomposition <0F9BDh, 2BA9h, 0FFFFh>
decomposition <0F9BEh, 2BADh, 0FFFFh>
decomposition <0F9BFh, 2925h, 0FFFFh>
decomposition <0F9C0h, 2BB1h, 0FFFFh>
decomposition <0F9C1h, 2BB5h, 0FFFFh>
decomposition <0F9C2h, 2BB9h, 0FFFFh>
decomposition <0F9C3h, 2BBDh, 0FFFFh>
decomposition <0F9C4h, 1A5Bh, 0FFFFh>
decomposition <0F9C5h, 2BC1h, 0FFFFh>
decomposition <0F9C6h, 2BC5h, 0FFFFh>
decomposition <0F9C7h, 2BC9h, 0FFFFh>
decomposition <0F9C8h, 2BCDh, 0FFFFh>
decomposition <0F9C9h, 2BD1h, 0FFFFh>
decomposition <0F9CAh, 2BD5h, 0FFFFh>
decomposition <0F9CBh, 2BD9h, 0FFFFh>
decomposition <0F9CCh, 2BDDh, 0FFFFh>
decomposition <0F9CDh, 2BE1h, 0FFFFh>
decomposition <0F9CEh, 2BE5h, 0FFFFh>
decomposition <0F9CFh, 2BE9h, 0FFFFh>
decomposition <0F9D0h, 2BEDh, 0FFFFh>
decomposition <0F9D1h, 2007h, 0FFFFh>
decomposition <0F9D2h, 2BF1h, 0FFFFh>
decomposition <0F9D3h, 2BF5h, 0FFFFh>
decomposition <0F9D4h, 2BF9h, 0FFFFh>
decomposition <0F9D5h, 2BFDh, 0FFFFh>
decomposition <0F9D6h, 2C01h, 0FFFFh>
decomposition <0F9D7h, 2C05h, 0FFFFh>
decomposition <0F9D8h, 2C09h, 0FFFFh>
decomposition <0F9D9h, 2C0Dh, 0FFFFh>
decomposition <0F9DAh, 2C11h, 0FFFFh>
decomposition <0F9DBh, 2A4Dh, 0FFFFh>
decomposition <0F9DCh, 2C15h, 0FFFFh>
decomposition <0F9DDh, 2C19h, 0FFFFh>
decomposition <0F9DEh, 2C1Dh, 0FFFFh>
decomposition <0F9DFh, 2C21h, 0FFFFh>
decomposition <0F9E0h, 2C25h, 0FFFFh>
decomposition <0F9E1h, 2C29h, 0FFFFh>
decomposition <0F9E2h, 2C2Dh, 0FFFFh>
decomposition <0F9E3h, 2C31h, 0FFFFh>
decomposition <0F9E4h, 2C35h, 0FFFFh>
decomposition <0F9E5h, 2C39h, 0FFFFh>
decomposition <0F9E6h, 2C3Dh, 0FFFFh>
decomposition <0F9E7h, 2C41h, 0FFFFh>
decomposition <0F9E8h, 2C45h, 0FFFFh>
decomposition <0F9E9h, 19A3h, 0FFFFh>
decomposition <0F9EAh, 2C49h, 0FFFFh>
decomposition <0F9EBh, 2C4Dh, 0FFFFh>
decomposition <0F9ECh, 2C51h, 0FFFFh>
decomposition <0F9EDh, 2C55h, 0FFFFh>
decomposition <0F9EEh, 2C59h, 0FFFFh>
decomposition <0F9EFh, 2C5Dh, 0FFFFh>
decomposition <0F9F0h, 2C61h, 0FFFFh>
decomposition <0F9F1h, 2C65h, 0FFFFh>
decomposition <0F9F2h, 2C69h, 0FFFFh>
decomposition <0F9F3h, 2C6Dh, 0FFFFh>
decomposition <0F9F4h, 2C71h, 0FFFFh>
decomposition <0F9F5h, 2C75h, 0FFFFh>
decomposition <0F9F6h, 2C79h, 0FFFFh>
decomposition <0F9F7h, 18DFh, 0FFFFh>
decomposition <0F9F8h, 2C7Dh, 0FFFFh>
decomposition <0F9F9h, 2C81h, 0FFFFh>
decomposition <0F9FAh, 2C85h, 0FFFFh>
decomposition <0F9FBh, 2C89h, 0FFFFh>
decomposition <0F9FCh, 2C8Dh, 0FFFFh>
decomposition <0F9FDh, 2C91h, 0FFFFh>
decomposition <0F9FEh, 2C95h, 0FFFFh>
decomposition <0F9FFh, 2C99h, 0FFFFh>
decomposition <0FA00h, 2C9Dh, 0FFFFh>
decomposition <0FA01h, 2CA1h, 0FFFFh>
decomposition <0FA02h, 2CA5h, 0FFFFh>
decomposition <0FA03h, 2CA9h, 0FFFFh>
decomposition <0FA04h, 2CADh, 0FFFFh>
decomposition <0FA05h, 2CB1h, 0FFFFh>
decomposition <0FA06h, 2CB5h, 0FFFFh>
decomposition <0FA07h, 2CB9h, 0FFFFh>
decomposition <0FA08h, 194Bh, 0FFFFh>
decomposition <0FA09h, 2CBDh, 0FFFFh>
decomposition <0FA0Ah, 1957h, 0FFFFh>
decomposition <0FA0Bh, 2CC1h, 0FFFFh>
decomposition <0FA0Ch, 2CC5h, 0FFFFh>
decomposition <0FA0Dh, 2CC9h, 0FFFFh>
decomposition <0FA10h, 2CCDh, 0FFFFh>
decomposition <0FA12h, 2CD1h, 0FFFFh>
decomposition <0FA15h, 2CD5h, 0FFFFh>
decomposition <0FA16h, 2CD9h, 0FFFFh>
decomposition <0FA17h, 2CDDh, 0FFFFh>
decomposition <0FA18h, 2CE1h, 0FFFFh>
decomposition <0FA19h, 2CE5h, 0FFFFh>
decomposition <0FA1Ah, 2CE9h, 0FFFFh>
decomposition <0FA1Bh, 2CEDh, 0FFFFh>
decomposition <0FA1Ch, 2CF1h, 0FFFFh>
decomposition <0FA1Dh, 2CF5h, 0FFFFh>
decomposition <0FA1Eh, 18FBh, 0FFFFh>
decomposition <0FA20h, 2CF9h, 0FFFFh>
decomposition <0FA22h, 2CFDh, 0FFFFh>
decomposition <0FA25h, 2D01h, 0FFFFh>
decomposition <0FA26h, 2D05h, 0FFFFh>
decomposition <0FA2Ah, 2D09h, 0FFFFh>
decomposition <0FA2Bh, 2D0Dh, 0FFFFh>
decomposition <0FA2Ch, 2D11h, 0FFFFh>
decomposition <0FA2Dh, 2D15h, 0FFFFh>
decomposition <0FA30h, 2D19h, 0FFFFh>
decomposition <0FA31h, 2D1Dh, 0FFFFh>
decomposition <0FA32h, 2D21h, 0FFFFh>
decomposition <0FA33h, 2D25h, 0FFFFh>
decomposition <0FA34h, 2D29h, 0FFFFh>
decomposition <0FA35h, 2D2Dh, 0FFFFh>
decomposition <0FA36h, 2D31h, 0FFFFh>
decomposition <0FA37h, 2D35h, 0FFFFh>
decomposition <0FA38h, 2D39h, 0FFFFh>
decomposition <0FA39h, 2D3Dh, 0FFFFh>
decomposition <0FA3Ah, 2D41h, 0FFFFh>
decomposition <0FA3Bh, 2D45h, 0FFFFh>
decomposition <0FA3Ch, 17BFh, 0FFFFh>
decomposition <0FA3Dh, 2D49h, 0FFFFh>
decomposition <0FA3Eh, 2D4Dh, 0FFFFh>
decomposition <0FA3Fh, 2D51h, 0FFFFh>
decomposition <0FA40h, 2D55h, 0FFFFh>
decomposition <0FA41h, 2D59h, 0FFFFh>
decomposition <0FA42h, 2D5Dh, 0FFFFh>
decomposition <0FA43h, 2D61h, 0FFFFh>
decomposition <0FA44h, 2D65h, 0FFFFh>
decomposition <0FA45h, 2D69h, 0FFFFh>
decomposition <0FA46h, 2D6Dh, 0FFFFh>
decomposition <0FA47h, 2D71h, 0FFFFh>
decomposition <0FA48h, 2D75h, 0FFFFh>
decomposition <0FA49h, 2D79h, 0FFFFh>
decomposition <0FA4Ah, 2D7Dh, 0FFFFh>
decomposition <0FA4Bh, 2D81h, 0FFFFh>
decomposition <0FA4Ch, 201Bh, 0FFFFh>
decomposition <0FA4Dh, 2D85h, 0FFFFh>
decomposition <0FA4Eh, 2D89h, 0FFFFh>
decomposition <0FA4Fh, 2D8Dh, 0FFFFh>
decomposition <0FA50h, 2D91h, 0FFFFh>
decomposition <0FA51h, 202Bh, 0FFFFh>
decomposition <0FA52h, 2D95h, 0FFFFh>
decomposition <0FA53h, 2D99h, 0FFFFh>
decomposition <0FA54h, 2D9Dh, 0FFFFh>
decomposition <0FA55h, 2DA1h, 0FFFFh>
decomposition <0FA56h, 2DA5h, 0FFFFh>
decomposition <0FA57h, 2B15h, 0FFFFh>
decomposition <0FA58h, 2DA9h, 0FFFFh>
decomposition <0FA59h, 2DADh, 0FFFFh>
decomposition <0FA5Ah, 2DB1h, 0FFFFh>
decomposition <0FA5Bh, 2DB5h, 0FFFFh>
decomposition <0FA5Ch, 2DB9h, 0FFFFh>
decomposition <0FA5Dh, 2DBDh, 0FFFFh>
decomposition <0FA5Eh, 2DBDh, 0FFFFh>
decomposition <0FA5Fh, 2DC1h, 0FFFFh>
decomposition <0FA60h, 2DC5h, 0FFFFh>
decomposition <0FA61h, 2DC9h, 0FFFFh>
decomposition <0FA62h, 2DCDh, 0FFFFh>
decomposition <0FA63h, 2DD1h, 0FFFFh>
decomposition <0FA64h, 2DD5h, 0FFFFh>
decomposition <0FA65h, 2DD9h, 0FFFFh>
decomposition <0FA66h, 2DDDh, 0FFFFh>
decomposition <0FA67h, 2D01h, 0FFFFh>
decomposition <0FA68h, 2DE1h, 0FFFFh>
decomposition <0FA69h, 2DE5h, 0FFFFh>
decomposition <0FA6Ah, 2DE9h, 0FFFFh>
decomposition <0FB00h, 0FFFFh, 2DEDh>
decomposition <0FB01h, 0FFFFh, 2DF0h>
decomposition <0FB02h, 0FFFFh, 2DF3h>
decomposition <0FB03h, 0FFFFh, 2DF6h>
decomposition <0FB04h, 0FFFFh, 2DFAh>
decomposition <0FB05h, 0FFFFh, 2DFEh>
decomposition <0FB06h, 0FFFFh, 2DFEh>
decomposition <0FB13h, 0FFFFh, 2E01h>
decomposition <0FB14h, 0FFFFh, 2E06h>
decomposition <0FB15h, 0FFFFh, 2E0Bh>
decomposition <0FB16h, 0FFFFh, 2E10h>
decomposition <0FB17h, 0FFFFh, 2E15h>
decomposition <0FB1Dh, 2E1Ah, 0FFFFh>
decomposition <0FB1Fh, 2E1Fh, 0FFFFh>
decomposition <0FB20h, 0FFFFh, 2E24h>
decomposition <0FB21h, 0FFFFh, 13BCh>
decomposition <0FB22h, 0FFFFh, 13C5h>
decomposition <0FB23h, 0FFFFh, 2E27h>
decomposition <0FB24h, 0FFFFh, 2E2Ah>
decomposition <0FB25h, 0FFFFh, 2E2Dh>
decomposition <0FB26h, 0FFFFh, 2E30h>
decomposition <0FB27h, 0FFFFh, 2E33h>
decomposition <0FB28h, 0FFFFh, 2E36h>
decomposition <0FB29h, 0FFFFh, 135Dh>
decomposition <0FB2Ah, 2E39h, 0FFFFh>
decomposition <0FB2Bh, 2E3Eh, 0FFFFh>
decomposition <0FB2Ch, 2E43h, 0FFFFh>
decomposition <0FB2Dh, 2E4Ah, 0FFFFh>
decomposition <0FB2Eh, 2E51h, 0FFFFh>
decomposition <0FB2Fh, 2E56h, 0FFFFh>
decomposition <0FB30h, 2E5Bh, 0FFFFh>
decomposition <0FB31h, 2E60h, 0FFFFh>
decomposition <0FB32h, 2E65h, 0FFFFh>
decomposition <0FB33h, 2E6Ah, 0FFFFh>
decomposition <0FB34h, 2E6Fh, 0FFFFh>
decomposition <0FB35h, 2E74h, 0FFFFh>
decomposition <0FB36h, 2E79h, 0FFFFh>
decomposition <0FB38h, 2E7Eh, 0FFFFh>
decomposition <0FB39h, 2E83h, 0FFFFh>
decomposition <0FB3Ah, 2E88h, 0FFFFh>
decomposition <0FB3Bh, 2E8Dh, 0FFFFh>
decomposition <0FB3Ch, 2E92h, 0FFFFh>
decomposition <0FB3Eh, 2E97h, 0FFFFh>
decomposition <0FB40h, 2E9Ch, 0FFFFh>
decomposition <0FB41h, 2EA1h, 0FFFFh>
decomposition <0FB43h, 2EA6h, 0FFFFh>
decomposition <0FB44h, 2EABh, 0FFFFh>
decomposition <0FB46h, 2EB0h, 0FFFFh>
decomposition <0FB47h, 2EB5h, 0FFFFh>
decomposition <0FB48h, 2EBAh, 0FFFFh>
decomposition <0FB49h, 2EBFh, 0FFFFh>
decomposition <0FB4Ah, 2EC4h, 0FFFFh>
decomposition <0FB4Bh, 2EC9h, 0FFFFh>
decomposition <0FB4Ch, 2ECEh, 0FFFFh>
decomposition <0FB4Dh, 2ED3h, 0FFFFh>
decomposition <0FB4Eh, 2ED8h, 0FFFFh>
decomposition <0FB4Fh, 0FFFFh, 2EDDh>
decomposition <0FB50h, 0FFFFh, 2EE2h>
decomposition <0FB51h, 0FFFFh, 2EE2h>
decomposition <0FB52h, 0FFFFh, 2EE5h>
decomposition <0FB53h, 0FFFFh, 2EE5h>
decomposition <0FB54h, 0FFFFh, 2EE5h>
decomposition <0FB55h, 0FFFFh, 2EE5h>
decomposition <0FB56h, 0FFFFh, 2EE8h>
decomposition <0FB57h, 0FFFFh, 2EE8h>
decomposition <0FB58h, 0FFFFh, 2EE8h>
decomposition <0FB59h, 0FFFFh, 2EE8h>
decomposition <0FB5Ah, 0FFFFh, 2EEBh>
decomposition <0FB5Bh, 0FFFFh, 2EEBh>
decomposition <0FB5Ch, 0FFFFh, 2EEBh>
decomposition <0FB5Dh, 0FFFFh, 2EEBh>
decomposition <0FB5Eh, 0FFFFh, 2EEEh>
decomposition <0FB5Fh, 0FFFFh, 2EEEh>
decomposition <0FB60h, 0FFFFh, 2EEEh>
decomposition <0FB61h, 0FFFFh, 2EEEh>
decomposition <0FB62h, 0FFFFh, 2EF1h>
decomposition <0FB63h, 0FFFFh, 2EF1h>
decomposition <0FB64h, 0FFFFh, 2EF1h>
decomposition <0FB65h, 0FFFFh, 2EF1h>
decomposition <0FB66h, 0FFFFh, 2EF4h>
decomposition <0FB67h, 0FFFFh, 2EF4h>
decomposition <0FB68h, 0FFFFh, 2EF4h>
decomposition <0FB69h, 0FFFFh, 2EF4h>
decomposition <0FB6Ah, 0FFFFh, 2EF7h>
decomposition <0FB6Bh, 0FFFFh, 2EF7h>
decomposition <0FB6Ch, 0FFFFh, 2EF7h>
decomposition <0FB6Dh, 0FFFFh, 2EF7h>
decomposition <0FB6Eh, 0FFFFh, 2EFAh>
decomposition <0FB6Fh, 0FFFFh, 2EFAh>
decomposition <0FB70h, 0FFFFh, 2EFAh>
decomposition <0FB71h, 0FFFFh, 2EFAh>
decomposition <0FB72h, 0FFFFh, 2EFDh>
decomposition <0FB73h, 0FFFFh, 2EFDh>
decomposition <0FB74h, 0FFFFh, 2EFDh>
decomposition <0FB75h, 0FFFFh, 2EFDh>
decomposition <0FB76h, 0FFFFh, 2F00h>
decomposition <0FB77h, 0FFFFh, 2F00h>
decomposition <0FB78h, 0FFFFh, 2F00h>
decomposition <0FB79h, 0FFFFh, 2F00h>
decomposition <0FB7Ah, 0FFFFh, 2F03h>
decomposition <0FB7Bh, 0FFFFh, 2F03h>
decomposition <0FB7Ch, 0FFFFh, 2F03h>
decomposition <0FB7Dh, 0FFFFh, 2F03h>
decomposition <0FB7Eh, 0FFFFh, 2F06h>
decomposition <0FB7Fh, 0FFFFh, 2F06h>
decomposition <0FB80h, 0FFFFh, 2F06h>
decomposition <0FB81h, 0FFFFh, 2F06h>
decomposition <0FB82h, 0FFFFh, 2F09h>
decomposition <0FB83h, 0FFFFh, 2F09h>
decomposition <0FB84h, 0FFFFh, 2F0Ch>
decomposition <0FB85h, 0FFFFh, 2F0Ch>
decomposition <0FB86h, 0FFFFh, 2F0Fh>
decomposition <0FB87h, 0FFFFh, 2F0Fh>
decomposition <0FB88h, 0FFFFh, 2F12h>
decomposition <0FB89h, 0FFFFh, 2F12h>
decomposition <0FB8Ah, 0FFFFh, 2F15h>
decomposition <0FB8Bh, 0FFFFh, 2F15h>
decomposition <0FB8Ch, 0FFFFh, 2F18h>
decomposition <0FB8Dh, 0FFFFh, 2F18h>
decomposition <0FB8Eh, 0FFFFh, 2F1Bh>
decomposition <0FB8Fh, 0FFFFh, 2F1Bh>
decomposition <0FB90h, 0FFFFh, 2F1Bh>
decomposition <0FB91h, 0FFFFh, 2F1Bh>
decomposition <0FB92h, 0FFFFh, 2F1Eh>
decomposition <0FB93h, 0FFFFh, 2F1Eh>
decomposition <0FB94h, 0FFFFh, 2F1Eh>
decomposition <0FB95h, 0FFFFh, 2F1Eh>
decomposition <0FB96h, 0FFFFh, 2F21h>
decomposition <0FB97h, 0FFFFh, 2F21h>
decomposition <0FB98h, 0FFFFh, 2F21h>
decomposition <0FB99h, 0FFFFh, 2F21h>
decomposition <0FB9Ah, 0FFFFh, 2F24h>
decomposition <0FB9Bh, 0FFFFh, 2F24h>
decomposition <0FB9Ch, 0FFFFh, 2F24h>
decomposition <0FB9Dh, 0FFFFh, 2F24h>
decomposition <0FB9Eh, 0FFFFh, 2F27h>
decomposition <0FB9Fh, 0FFFFh, 2F27h>
decomposition <0FBA0h, 0FFFFh, 2F2Ah>
decomposition <0FBA1h, 0FFFFh, 2F2Ah>
decomposition <0FBA2h, 0FFFFh, 2F2Ah>
decomposition <0FBA3h, 0FFFFh, 2F2Ah>
decomposition <0FBA4h, 0FFFFh, 6B6h>
decomposition <0FBA5h, 0FFFFh, 6B6h>
decomposition <0FBA6h, 0FFFFh, 2F2Dh>
decomposition <0FBA7h, 0FFFFh, 2F2Dh>
decomposition <0FBA8h, 0FFFFh, 2F2Dh>
decomposition <0FBA9h, 0FFFFh, 2F2Dh>
decomposition <0FBAAh, 0FFFFh, 2F30h>
decomposition <0FBABh, 0FFFFh, 2F30h>
decomposition <0FBACh, 0FFFFh, 2F30h>
decomposition <0FBADh, 0FFFFh, 2F30h>
decomposition <0FBAEh, 0FFFFh, 2F33h>
decomposition <0FBAFh, 0FFFFh, 2F33h>
decomposition <0FBB0h, 0FFFFh, 6C0h>
decomposition <0FBB1h, 0FFFFh, 6C0h>
decomposition <0FBD3h, 0FFFFh, 2F36h>
decomposition <0FBD4h, 0FFFFh, 2F36h>
decomposition <0FBD5h, 0FFFFh, 2F36h>
decomposition <0FBD6h, 0FFFFh, 2F36h>
decomposition <0FBD7h, 0FFFFh, 2F39h>
decomposition <0FBD8h, 0FFFFh, 2F39h>
decomposition <0FBD9h, 0FFFFh, 2F3Ch>
decomposition <0FBDAh, 0FFFFh, 2F3Ch>
decomposition <0FBDBh, 0FFFFh, 2F3Fh>
decomposition <0FBDCh, 0FFFFh, 2F3Fh>
decomposition <0FBDDh, 0FFFFh, 6ACh>
decomposition <0FBDEh, 0FFFFh, 2F42h>
decomposition <0FBDFh, 0FFFFh, 2F42h>
decomposition <0FBE0h, 0FFFFh, 2F45h>
decomposition <0FBE1h, 0FFFFh, 2F45h>
decomposition <0FBE2h, 0FFFFh, 2F48h>
decomposition <0FBE3h, 0FFFFh, 2F48h>
decomposition <0FBE4h, 0FFFFh, 2F4Bh>
decomposition <0FBE5h, 0FFFFh, 2F4Bh>
decomposition <0FBE6h, 0FFFFh, 2F4Bh>
decomposition <0FBE7h, 0FFFFh, 2F4Bh>
decomposition <0FBE8h, 0FFFFh, 2F4Eh>
decomposition <0FBE9h, 0FFFFh, 2F4Eh>
decomposition <0FBEAh, 0FFFFh, 2F51h>
decomposition <0FBEBh, 0FFFFh, 2F51h>
decomposition <0FBECh, 0FFFFh, 2F58h>
decomposition <0FBEDh, 0FFFFh, 2F58h>
decomposition <0FBEEh, 0FFFFh, 2F5Fh>
decomposition <0FBEFh, 0FFFFh, 2F5Fh>
decomposition <0FBF0h, 0FFFFh, 2F66h>
decomposition <0FBF1h, 0FFFFh, 2F66h>
decomposition <0FBF2h, 0FFFFh, 2F6Dh>
decomposition <0FBF3h, 0FFFFh, 2F6Dh>
decomposition <0FBF4h, 0FFFFh, 2F74h>
decomposition <0FBF5h, 0FFFFh, 2F74h>
decomposition <0FBF6h, 0FFFFh, 2F7Bh>
decomposition <0FBF7h, 0FFFFh, 2F7Bh>
decomposition <0FBF8h, 0FFFFh, 2F7Bh>
decomposition <0FBF9h, 0FFFFh, 2F82h>
decomposition <0FBFAh, 0FFFFh, 2F82h>
decomposition <0FBFBh, 0FFFFh, 2F82h>
decomposition <0FBFCh, 0FFFFh, 2F89h>
decomposition <0FBFDh, 0FFFFh, 2F89h>
decomposition <0FBFEh, 0FFFFh, 2F89h>
decomposition <0FBFFh, 0FFFFh, 2F89h>
decomposition <0FC00h, 0FFFFh, 2F8Ch>
decomposition <0FC01h, 0FFFFh, 2F93h>
decomposition <0FC02h, 0FFFFh, 2F9Ah>
decomposition <0FC03h, 0FFFFh, 2F82h>
decomposition <0FC04h, 0FFFFh, 2FA1h>
decomposition <0FC05h, 0FFFFh, 2FA8h>
decomposition <0FC06h, 0FFFFh, 2FADh>
decomposition <0FC07h, 0FFFFh, 2FB2h>
decomposition <0FC08h, 0FFFFh, 2FB7h>
decomposition <0FC09h, 0FFFFh, 2FBCh>
decomposition <0FC0Ah, 0FFFFh, 2FC1h>
decomposition <0FC0Bh, 0FFFFh, 2FC6h>
decomposition <0FC0Ch, 0FFFFh, 2FCBh>
decomposition <0FC0Dh, 0FFFFh, 2FD0h>
decomposition <0FC0Eh, 0FFFFh, 2FD5h>
decomposition <0FC0Fh, 0FFFFh, 2FDAh>
decomposition <0FC10h, 0FFFFh, 2FDFh>
decomposition <0FC11h, 0FFFFh, 2FE4h>
decomposition <0FC12h, 0FFFFh, 2FE9h>
decomposition <0FC13h, 0FFFFh, 2FEEh>
decomposition <0FC14h, 0FFFFh, 2FF3h>
decomposition <0FC15h, 0FFFFh, 2FF8h>
decomposition <0FC16h, 0FFFFh, 2FFDh>
decomposition <0FC17h, 0FFFFh, 3002h>
decomposition <0FC18h, 0FFFFh, 3007h>
decomposition <0FC19h, 0FFFFh, 300Ch>
decomposition <0FC1Ah, 0FFFFh, 3011h>
decomposition <0FC1Bh, 0FFFFh, 3016h>
decomposition <0FC1Ch, 0FFFFh, 301Bh>
decomposition <0FC1Dh, 0FFFFh, 3020h>
decomposition <0FC1Eh, 0FFFFh, 3025h>
decomposition <0FC1Fh, 0FFFFh, 302Ah>
decomposition <0FC20h, 0FFFFh, 302Fh>
decomposition <0FC21h, 0FFFFh, 3034h>
decomposition <0FC22h, 0FFFFh, 3039h>
decomposition <0FC23h, 0FFFFh, 303Eh>
decomposition <0FC24h, 0FFFFh, 3043h>
decomposition <0FC25h, 0FFFFh, 3048h>
decomposition <0FC26h, 0FFFFh, 304Dh>
decomposition <0FC27h, 0FFFFh, 3052h>
decomposition <0FC28h, 0FFFFh, 3057h>
decomposition <0FC29h, 0FFFFh, 305Ch>
decomposition <0FC2Ah, 0FFFFh, 3061h>
decomposition <0FC2Bh, 0FFFFh, 3066h>
decomposition <0FC2Ch, 0FFFFh, 306Bh>
decomposition <0FC2Dh, 0FFFFh, 3070h>
decomposition <0FC2Eh, 0FFFFh, 3075h>
decomposition <0FC2Fh, 0FFFFh, 307Ah>
decomposition <0FC30h, 0FFFFh, 307Fh>
decomposition <0FC31h, 0FFFFh, 3084h>
decomposition <0FC32h, 0FFFFh, 3089h>
decomposition <0FC33h, 0FFFFh, 308Eh>
decomposition <0FC34h, 0FFFFh, 3093h>
decomposition <0FC35h, 0FFFFh, 3098h>
decomposition <0FC36h, 0FFFFh, 309Dh>
decomposition <0FC37h, 0FFFFh, 30A2h>
decomposition <0FC38h, 0FFFFh, 30A7h>
decomposition <0FC39h, 0FFFFh, 30ACh>
decomposition <0FC3Ah, 0FFFFh, 30B1h>
decomposition <0FC3Bh, 0FFFFh, 30B6h>
decomposition <0FC3Ch, 0FFFFh, 30BBh>
decomposition <0FC3Dh, 0FFFFh, 30C0h>
decomposition <0FC3Eh, 0FFFFh, 30C5h>
decomposition <0FC3Fh, 0FFFFh, 30CAh>
decomposition <0FC40h, 0FFFFh, 30CFh>
decomposition <0FC41h, 0FFFFh, 30D4h>
decomposition <0FC42h, 0FFFFh, 30D9h>
decomposition <0FC43h, 0FFFFh, 30DEh>
decomposition <0FC44h, 0FFFFh, 30E3h>
decomposition <0FC45h, 0FFFFh, 30E8h>
decomposition <0FC46h, 0FFFFh, 30EDh>
decomposition <0FC47h, 0FFFFh, 30F2h>
decomposition <0FC48h, 0FFFFh, 30F7h>
decomposition <0FC49h, 0FFFFh, 30FCh>
decomposition <0FC4Ah, 0FFFFh, 3101h>
decomposition <0FC4Bh, 0FFFFh, 3106h>
decomposition <0FC4Ch, 0FFFFh, 310Bh>
decomposition <0FC4Dh, 0FFFFh, 3110h>
decomposition <0FC4Eh, 0FFFFh, 3115h>
decomposition <0FC4Fh, 0FFFFh, 311Ah>
decomposition <0FC50h, 0FFFFh, 311Fh>
decomposition <0FC51h, 0FFFFh, 3124h>
decomposition <0FC52h, 0FFFFh, 3129h>
decomposition <0FC53h, 0FFFFh, 312Eh>
decomposition <0FC54h, 0FFFFh, 3133h>
decomposition <0FC55h, 0FFFFh, 3138h>
decomposition <0FC56h, 0FFFFh, 313Dh>
decomposition <0FC57h, 0FFFFh, 3142h>
decomposition <0FC58h, 0FFFFh, 3147h>
decomposition <0FC59h, 0FFFFh, 314Ch>
decomposition <0FC5Ah, 0FFFFh, 3151h>
decomposition <0FC5Bh, 0FFFFh, 3156h>
decomposition <0FC5Ch, 0FFFFh, 315Bh>
decomposition <0FC5Dh, 0FFFFh, 3160h>
decomposition <0FC5Eh, 0FFFFh, 3165h>
decomposition <0FC5Fh, 0FFFFh, 316Bh>
decomposition <0FC60h, 0FFFFh, 3171h>
decomposition <0FC61h, 0FFFFh, 3177h>
decomposition <0FC62h, 0FFFFh, 317Dh>
decomposition <0FC63h, 0FFFFh, 3183h>
decomposition <0FC64h, 0FFFFh, 3189h>
decomposition <0FC65h, 0FFFFh, 3190h>
decomposition <0FC66h, 0FFFFh, 2F9Ah>
decomposition <0FC67h, 0FFFFh, 3197h>
decomposition <0FC68h, 0FFFFh, 2F82h>
decomposition <0FC69h, 0FFFFh, 2FA1h>
decomposition <0FC6Ah, 0FFFFh, 319Eh>
decomposition <0FC6Bh, 0FFFFh, 31A3h>
decomposition <0FC6Ch, 0FFFFh, 2FB7h>
decomposition <0FC6Dh, 0FFFFh, 31A8h>
decomposition <0FC6Eh, 0FFFFh, 2FBCh>
decomposition <0FC6Fh, 0FFFFh, 2FC1h>
decomposition <0FC70h, 0FFFFh, 31ADh>
decomposition <0FC71h, 0FFFFh, 31B2h>
decomposition <0FC72h, 0FFFFh, 2FD5h>
decomposition <0FC73h, 0FFFFh, 31B7h>
decomposition <0FC74h, 0FFFFh, 2FDAh>
decomposition <0FC75h, 0FFFFh, 2FDFh>
decomposition <0FC76h, 0FFFFh, 31BCh>
decomposition <0FC77h, 0FFFFh, 31C1h>
decomposition <0FC78h, 0FFFFh, 2FE9h>
decomposition <0FC79h, 0FFFFh, 31C6h>
decomposition <0FC7Ah, 0FFFFh, 2FEEh>
decomposition <0FC7Bh, 0FFFFh, 2FF3h>
decomposition <0FC7Ch, 0FFFFh, 3084h>
decomposition <0FC7Dh, 0FFFFh, 3089h>
decomposition <0FC7Eh, 0FFFFh, 3098h>
decomposition <0FC7Fh, 0FFFFh, 309Dh>
decomposition <0FC80h, 0FFFFh, 30A2h>
decomposition <0FC81h, 0FFFFh, 30B6h>
decomposition <0FC82h, 0FFFFh, 30BBh>
decomposition <0FC83h, 0FFFFh, 30C0h>
decomposition <0FC84h, 0FFFFh, 30C5h>
decomposition <0FC85h, 0FFFFh, 30D9h>
decomposition <0FC86h, 0FFFFh, 30DEh>
decomposition <0FC87h, 0FFFFh, 30E3h>
decomposition <0FC88h, 0FFFFh, 31CBh>
decomposition <0FC89h, 0FFFFh, 30F7h>
decomposition <0FC8Ah, 0FFFFh, 31D0h>
decomposition <0FC8Bh, 0FFFFh, 31D5h>
decomposition <0FC8Ch, 0FFFFh, 3115h>
decomposition <0FC8Dh, 0FFFFh, 31DAh>
decomposition <0FC8Eh, 0FFFFh, 311Ah>
decomposition <0FC8Fh, 0FFFFh, 311Fh>
decomposition <0FC90h, 0FFFFh, 3160h>
decomposition <0FC91h, 0FFFFh, 31DFh>
decomposition <0FC92h, 0FFFFh, 31E4h>
decomposition <0FC93h, 0FFFFh, 3147h>
decomposition <0FC94h, 0FFFFh, 31E9h>
decomposition <0FC95h, 0FFFFh, 314Ch>
decomposition <0FC96h, 0FFFFh, 3151h>
decomposition <0FC97h, 0FFFFh, 2F8Ch>
decomposition <0FC98h, 0FFFFh, 2F93h>
decomposition <0FC99h, 0FFFFh, 31EEh>
decomposition <0FC9Ah, 0FFFFh, 2F9Ah>
decomposition <0FC9Bh, 0FFFFh, 31F5h>
decomposition <0FC9Ch, 0FFFFh, 2FA8h>
decomposition <0FC9Dh, 0FFFFh, 2FADh>
decomposition <0FC9Eh, 0FFFFh, 2FB2h>
decomposition <0FC9Fh, 0FFFFh, 2FB7h>
decomposition <0FCA0h, 0FFFFh, 31FCh>
decomposition <0FCA1h, 0FFFFh, 2FC6h>
decomposition <0FCA2h, 0FFFFh, 2FCBh>
decomposition <0FCA3h, 0FFFFh, 2FD0h>
decomposition <0FCA4h, 0FFFFh, 2FD5h>
decomposition <0FCA5h, 0FFFFh, 3201h>
decomposition <0FCA6h, 0FFFFh, 2FE9h>
decomposition <0FCA7h, 0FFFFh, 2FF8h>
decomposition <0FCA8h, 0FFFFh, 2FFDh>
decomposition <0FCA9h, 0FFFFh, 3002h>
decomposition <0FCAAh, 0FFFFh, 3007h>
decomposition <0FCABh, 0FFFFh, 300Ch>
decomposition <0FCACh, 0FFFFh, 3016h>
decomposition <0FCADh, 0FFFFh, 301Bh>
decomposition <0FCAEh, 0FFFFh, 3020h>
decomposition <0FCAFh, 0FFFFh, 3025h>
decomposition <0FCB0h, 0FFFFh, 302Ah>
decomposition <0FCB1h, 0FFFFh, 302Fh>
decomposition <0FCB2h, 0FFFFh, 3206h>
decomposition <0FCB3h, 0FFFFh, 3034h>
decomposition <0FCB4h, 0FFFFh, 3039h>
decomposition <0FCB5h, 0FFFFh, 303Eh>
decomposition <0FCB6h, 0FFFFh, 3043h>
decomposition <0FCB7h, 0FFFFh, 3048h>
decomposition <0FCB8h, 0FFFFh, 304Dh>
decomposition <0FCB9h, 0FFFFh, 3057h>
decomposition <0FCBAh, 0FFFFh, 305Ch>
decomposition <0FCBBh, 0FFFFh, 3061h>
decomposition <0FCBCh, 0FFFFh, 3066h>
decomposition <0FCBDh, 0FFFFh, 306Bh>
decomposition <0FCBEh, 0FFFFh, 3070h>
decomposition <0FCBFh, 0FFFFh, 3075h>
decomposition <0FCC0h, 0FFFFh, 307Ah>
decomposition <0FCC1h, 0FFFFh, 307Fh>
decomposition <0FCC2h, 0FFFFh, 308Eh>
decomposition <0FCC3h, 0FFFFh, 3093h>
decomposition <0FCC4h, 0FFFFh, 30A7h>
decomposition <0FCC5h, 0FFFFh, 30ACh>
decomposition <0FCC6h, 0FFFFh, 30B1h>
decomposition <0FCC7h, 0FFFFh, 30B6h>
decomposition <0FCC8h, 0FFFFh, 30BBh>
decomposition <0FCC9h, 0FFFFh, 30CAh>
decomposition <0FCCAh, 0FFFFh, 30CFh>
decomposition <0FCCBh, 0FFFFh, 30D4h>
decomposition <0FCCCh, 0FFFFh, 30D9h>
decomposition <0FCCDh, 0FFFFh, 320Bh>
decomposition <0FCCEh, 0FFFFh, 30E8h>
decomposition <0FCCFh, 0FFFFh, 30EDh>
decomposition <0FCD0h, 0FFFFh, 30F2h>
decomposition <0FCD1h, 0FFFFh, 30F7h>
decomposition <0FCD2h, 0FFFFh, 3106h>
decomposition <0FCD3h, 0FFFFh, 310Bh>
decomposition <0FCD4h, 0FFFFh, 3110h>
decomposition <0FCD5h, 0FFFFh, 3115h>
decomposition <0FCD6h, 0FFFFh, 3210h>
decomposition <0FCD7h, 0FFFFh, 3124h>
decomposition <0FCD8h, 0FFFFh, 3129h>
decomposition <0FCD9h, 0FFFFh, 3215h>
decomposition <0FCDAh, 0FFFFh, 3138h>
decomposition <0FCDBh, 0FFFFh, 313Dh>
decomposition <0FCDCh, 0FFFFh, 3142h>
decomposition <0FCDDh, 0FFFFh, 3147h>
decomposition <0FCDEh, 0FFFFh, 321Ah>
decomposition <0FCDFh, 0FFFFh, 2F9Ah>
decomposition <0FCE0h, 0FFFFh, 31F5h>
decomposition <0FCE1h, 0FFFFh, 2FB7h>
decomposition <0FCE2h, 0FFFFh, 31FCh>
decomposition <0FCE3h, 0FFFFh, 2FD5h>
decomposition <0FCE4h, 0FFFFh, 3201h>
decomposition <0FCE5h, 0FFFFh, 2FE9h>
decomposition <0FCE6h, 0FFFFh, 321Fh>
decomposition <0FCE7h, 0FFFFh, 302Ah>
decomposition <0FCE8h, 0FFFFh, 3224h>
decomposition <0FCE9h, 0FFFFh, 3229h>
decomposition <0FCEAh, 0FFFFh, 322Eh>
decomposition <0FCEBh, 0FFFFh, 30B6h>
decomposition <0FCECh, 0FFFFh, 30BBh>
decomposition <0FCEDh, 0FFFFh, 30D9h>
decomposition <0FCEEh, 0FFFFh, 3115h>
decomposition <0FCEFh, 0FFFFh, 3210h>
decomposition <0FCF0h, 0FFFFh, 3147h>
decomposition <0FCF1h, 0FFFFh, 321Ah>
decomposition <0FCF2h, 0FFFFh, 3233h>
decomposition <0FCF3h, 0FFFFh, 323Ah>
decomposition <0FCF4h, 0FFFFh, 3241h>
decomposition <0FCF5h, 0FFFFh, 3248h>
decomposition <0FCF6h, 0FFFFh, 324Dh>
decomposition <0FCF7h, 0FFFFh, 3252h>
decomposition <0FCF8h, 0FFFFh, 3257h>
decomposition <0FCF9h, 0FFFFh, 325Ch>
decomposition <0FCFAh, 0FFFFh, 3261h>
decomposition <0FCFBh, 0FFFFh, 3266h>
decomposition <0FCFCh, 0FFFFh, 326Bh>
decomposition <0FCFDh, 0FFFFh, 3270h>
decomposition <0FCFEh, 0FFFFh, 3275h>
decomposition <0FCFFh, 0FFFFh, 327Ah>
decomposition <0FD00h, 0FFFFh, 327Fh>
decomposition <0FD01h, 0FFFFh, 3284h>
decomposition <0FD02h, 0FFFFh, 3289h>
decomposition <0FD03h, 0FFFFh, 328Eh>
decomposition <0FD04h, 0FFFFh, 3293h>
decomposition <0FD05h, 0FFFFh, 3298h>
decomposition <0FD06h, 0FFFFh, 329Dh>
decomposition <0FD07h, 0FFFFh, 32A2h>
decomposition <0FD08h, 0FFFFh, 32A7h>
decomposition <0FD09h, 0FFFFh, 32ACh>
decomposition <0FD0Ah, 0FFFFh, 32B1h>
decomposition <0FD0Bh, 0FFFFh, 32B6h>
decomposition <0FD0Ch, 0FFFFh, 3229h>
decomposition <0FD0Dh, 0FFFFh, 32BBh>
decomposition <0FD0Eh, 0FFFFh, 32C0h>
decomposition <0FD0Fh, 0FFFFh, 32C5h>
decomposition <0FD10h, 0FFFFh, 32CAh>
decomposition <0FD11h, 0FFFFh, 3248h>
decomposition <0FD12h, 0FFFFh, 324Dh>
decomposition <0FD13h, 0FFFFh, 3252h>
decomposition <0FD14h, 0FFFFh, 3257h>
decomposition <0FD15h, 0FFFFh, 325Ch>
decomposition <0FD16h, 0FFFFh, 3261h>
decomposition <0FD17h, 0FFFFh, 3266h>
decomposition <0FD18h, 0FFFFh, 326Bh>
decomposition <0FD19h, 0FFFFh, 3270h>
decomposition <0FD1Ah, 0FFFFh, 3275h>
decomposition <0FD1Bh, 0FFFFh, 327Ah>
decomposition <0FD1Ch, 0FFFFh, 327Fh>
decomposition <0FD1Dh, 0FFFFh, 3284h>
decomposition <0FD1Eh, 0FFFFh, 3289h>
decomposition <0FD1Fh, 0FFFFh, 328Eh>
decomposition <0FD20h, 0FFFFh, 3293h>
decomposition <0FD21h, 0FFFFh, 3298h>
decomposition <0FD22h, 0FFFFh, 329Dh>
decomposition <0FD23h, 0FFFFh, 32A2h>
decomposition <0FD24h, 0FFFFh, 32A7h>
decomposition <0FD25h, 0FFFFh, 32ACh>
decomposition <0FD26h, 0FFFFh, 32B1h>
decomposition <0FD27h, 0FFFFh, 32B6h>
decomposition <0FD28h, 0FFFFh, 3229h>
decomposition <0FD29h, 0FFFFh, 32BBh>
decomposition <0FD2Ah, 0FFFFh, 32C0h>
decomposition <0FD2Bh, 0FFFFh, 32C5h>
decomposition <0FD2Ch, 0FFFFh, 32CAh>
decomposition <0FD2Dh, 0FFFFh, 32ACh>
decomposition <0FD2Eh, 0FFFFh, 32B1h>
decomposition <0FD2Fh, 0FFFFh, 32B6h>
decomposition <0FD30h, 0FFFFh, 3229h>
decomposition <0FD31h, 0FFFFh, 3224h>
decomposition <0FD32h, 0FFFFh, 322Eh>
decomposition <0FD33h, 0FFFFh, 3052h>
decomposition <0FD34h, 0FFFFh, 301Bh>
decomposition <0FD35h, 0FFFFh, 3020h>
decomposition <0FD36h, 0FFFFh, 3025h>
decomposition <0FD37h, 0FFFFh, 32ACh>
decomposition <0FD38h, 0FFFFh, 32B1h>
decomposition <0FD39h, 0FFFFh, 32B6h>
decomposition <0FD3Ah, 0FFFFh, 3052h>
decomposition <0FD3Bh, 0FFFFh, 3057h>
decomposition <0FD3Ch, 0FFFFh, 32CFh>
decomposition <0FD3Dh, 0FFFFh, 32CFh>
decomposition <0FD50h, 0FFFFh, 32D4h>
decomposition <0FD51h, 0FFFFh, 32DBh>
decomposition <0FD52h, 0FFFFh, 32DBh>
decomposition <0FD53h, 0FFFFh, 32E2h>
decomposition <0FD54h, 0FFFFh, 32E9h>
decomposition <0FD55h, 0FFFFh, 32F0h>
decomposition <0FD56h, 0FFFFh, 32F7h>
decomposition <0FD57h, 0FFFFh, 32FEh>
decomposition <0FD58h, 0FFFFh, 3305h>
decomposition <0FD59h, 0FFFFh, 3305h>
decomposition <0FD5Ah, 0FFFFh, 330Ch>
decomposition <0FD5Bh, 0FFFFh, 3313h>
decomposition <0FD5Ch, 0FFFFh, 331Ah>
decomposition <0FD5Dh, 0FFFFh, 3321h>
decomposition <0FD5Eh, 0FFFFh, 3328h>
decomposition <0FD5Fh, 0FFFFh, 332Fh>
decomposition <0FD60h, 0FFFFh, 332Fh>
decomposition <0FD61h, 0FFFFh, 3336h>
decomposition <0FD62h, 0FFFFh, 333Dh>
decomposition <0FD63h, 0FFFFh, 333Dh>
decomposition <0FD64h, 0FFFFh, 3344h>
decomposition <0FD65h, 0FFFFh, 3344h>
decomposition <0FD66h, 0FFFFh, 334Bh>
decomposition <0FD67h, 0FFFFh, 3352h>
decomposition <0FD68h, 0FFFFh, 3352h>
decomposition <0FD69h, 0FFFFh, 3359h>
decomposition <0FD6Ah, 0FFFFh, 3360h>
decomposition <0FD6Bh, 0FFFFh, 3360h>
decomposition <0FD6Ch, 0FFFFh, 3367h>
decomposition <0FD6Dh, 0FFFFh, 3367h>
decomposition <0FD6Eh, 0FFFFh, 336Eh>
decomposition <0FD6Fh, 0FFFFh, 3375h>
decomposition <0FD70h, 0FFFFh, 3375h>
decomposition <0FD71h, 0FFFFh, 337Ch>
decomposition <0FD72h, 0FFFFh, 337Ch>
decomposition <0FD73h, 0FFFFh, 3383h>
decomposition <0FD74h, 0FFFFh, 338Ah>
decomposition <0FD75h, 0FFFFh, 3391h>
decomposition <0FD76h, 0FFFFh, 3398h>
decomposition <0FD77h, 0FFFFh, 3398h>
decomposition <0FD78h, 0FFFFh, 339Fh>
decomposition <0FD79h, 0FFFFh, 33A6h>
decomposition <0FD7Ah, 0FFFFh, 33ADh>
decomposition <0FD7Bh, 0FFFFh, 33B4h>
decomposition <0FD7Ch, 0FFFFh, 33BBh>
decomposition <0FD7Dh, 0FFFFh, 33BBh>
decomposition <0FD7Eh, 0FFFFh, 33C2h>
decomposition <0FD7Fh, 0FFFFh, 33C9h>
decomposition <0FD80h, 0FFFFh, 33D0h>
decomposition <0FD81h, 0FFFFh, 33D7h>
decomposition <0FD82h, 0FFFFh, 33DEh>
decomposition <0FD83h, 0FFFFh, 33E5h>
decomposition <0FD84h, 0FFFFh, 33E5h>
decomposition <0FD85h, 0FFFFh, 33ECh>
decomposition <0FD86h, 0FFFFh, 33ECh>
decomposition <0FD87h, 0FFFFh, 33F3h>
decomposition <0FD88h, 0FFFFh, 33F3h>
decomposition <0FD89h, 0FFFFh, 33FAh>
decomposition <0FD8Ah, 0FFFFh, 3401h>
decomposition <0FD8Bh, 0FFFFh, 3408h>
decomposition <0FD8Ch, 0FFFFh, 340Fh>
decomposition <0FD8Dh, 0FFFFh, 3416h>
decomposition <0FD8Eh, 0FFFFh, 341Dh>
decomposition <0FD8Fh, 0FFFFh, 3424h>
decomposition <0FD92h, 0FFFFh, 342Bh>
decomposition <0FD93h, 0FFFFh, 3432h>
decomposition <0FD94h, 0FFFFh, 3439h>
decomposition <0FD95h, 0FFFFh, 3440h>
decomposition <0FD96h, 0FFFFh, 3447h>
decomposition <0FD97h, 0FFFFh, 344Eh>
decomposition <0FD98h, 0FFFFh, 344Eh>
decomposition <0FD99h, 0FFFFh, 3455h>
decomposition <0FD9Ah, 0FFFFh, 345Ch>
decomposition <0FD9Bh, 0FFFFh, 3463h>
decomposition <0FD9Ch, 0FFFFh, 346Ah>
decomposition <0FD9Dh, 0FFFFh, 346Ah>
decomposition <0FD9Eh, 0FFFFh, 3471h>
decomposition <0FD9Fh, 0FFFFh, 3478h>
decomposition <0FDA0h, 0FFFFh, 347Fh>
decomposition <0FDA1h, 0FFFFh, 3486h>
decomposition <0FDA2h, 0FFFFh, 348Dh>
decomposition <0FDA3h, 0FFFFh, 3494h>
decomposition <0FDA4h, 0FFFFh, 349Bh>
decomposition <0FDA5h, 0FFFFh, 34A2h>
decomposition <0FDA6h, 0FFFFh, 34A9h>
decomposition <0FDA7h, 0FFFFh, 34B0h>
decomposition <0FDA8h, 0FFFFh, 34B7h>
decomposition <0FDA9h, 0FFFFh, 34BEh>
decomposition <0FDAAh, 0FFFFh, 34C5h>
decomposition <0FDABh, 0FFFFh, 34CCh>
decomposition <0FDACh, 0FFFFh, 34D3h>
decomposition <0FDADh, 0FFFFh, 34DAh>
decomposition <0FDAEh, 0FFFFh, 34E1h>
decomposition <0FDAFh, 0FFFFh, 34E8h>
decomposition <0FDB0h, 0FFFFh, 34EFh>
decomposition <0FDB1h, 0FFFFh, 34F6h>
decomposition <0FDB2h, 0FFFFh, 34FDh>
decomposition <0FDB3h, 0FFFFh, 3504h>
decomposition <0FDB4h, 0FFFFh, 33C2h>
decomposition <0FDB5h, 0FFFFh, 33D0h>
decomposition <0FDB6h, 0FFFFh, 350Bh>
decomposition <0FDB7h, 0FFFFh, 3512h>
decomposition <0FDB8h, 0FFFFh, 3519h>
decomposition <0FDB9h, 0FFFFh, 3520h>
decomposition <0FDBAh, 0FFFFh, 3527h>
decomposition <0FDBBh, 0FFFFh, 352Eh>
decomposition <0FDBCh, 0FFFFh, 3527h>
decomposition <0FDBDh, 0FFFFh, 3519h>
decomposition <0FDBEh, 0FFFFh, 3535h>
decomposition <0FDBFh, 0FFFFh, 353Ch>
decomposition <0FDC0h, 0FFFFh, 3543h>
decomposition <0FDC1h, 0FFFFh, 354Ah>
decomposition <0FDC2h, 0FFFFh, 3551h>
decomposition <0FDC3h, 0FFFFh, 352Eh>
decomposition <0FDC4h, 0FFFFh, 3391h>
decomposition <0FDC5h, 0FFFFh, 334Bh>
decomposition <0FDC6h, 0FFFFh, 3558h>
decomposition <0FDC7h, 0FFFFh, 355Fh>
decomposition <0FDF0h, 0FFFFh, 3566h>
decomposition <0FDF1h, 0FFFFh, 356Dh>
decomposition <0FDF2h, 0FFFFh, 3574h>
decomposition <0FDF3h, 0FFFFh, 357Dh>
decomposition <0FDF4h, 0FFFFh, 3586h>
decomposition <0FDF5h, 0FFFFh, 358Fh>
decomposition <0FDF6h, 0FFFFh, 3598h>
decomposition <0FDF7h, 0FFFFh, 35A1h>
decomposition <0FDF8h, 0FFFFh, 35AAh>
decomposition <0FDF9h, 0FFFFh, 35B3h>
decomposition <0FDFAh, 0FFFFh, 35BAh>
decomposition <0FDFBh, 0FFFFh, 35DCh>
decomposition <0FDFCh, 0FFFFh, 35ECh>
decomposition <0FE30h, 0FFFFh, 1307h>
decomposition <0FE31h, 0FFFFh, 35F5h>
decomposition <0FE32h, 0FFFFh, 35F9h>
decomposition <0FE33h, 0FFFFh, 35FDh>
decomposition <0FE34h, 0FFFFh, 35FDh>
decomposition <0FE35h, 0FFFFh, 1365h>
decomposition <0FE36h, 0FFFFh, 1367h>
decomposition <0FE37h, 0FFFFh, 35FFh>
decomposition <0FE38h, 0FFFFh, 3601h>
decomposition <0FE39h, 0FFFFh, 3603h>
decomposition <0FE3Ah, 0FFFFh, 3607h>
decomposition <0FE3Bh, 0FFFFh, 360Bh>
decomposition <0FE3Ch, 0FFFFh, 360Fh>
decomposition <0FE3Dh, 0FFFFh, 3613h>
decomposition <0FE3Eh, 0FFFFh, 3617h>
decomposition <0FE3Fh, 0FFFFh, 1594h>
decomposition <0FE40h, 0FFFFh, 1598h>
decomposition <0FE41h, 0FFFFh, 361Bh>
decomposition <0FE42h, 0FFFFh, 361Fh>
decomposition <0FE43h, 0FFFFh, 3623h>
decomposition <0FE44h, 0FFFFh, 3627h>
decomposition <0FE49h, 0FFFFh, 1333h>
decomposition <0FE4Ah, 0FFFFh, 1333h>
decomposition <0FE4Bh, 0FFFFh, 1333h>
decomposition <0FE4Ch, 0FFFFh, 1333h>
decomposition <0FE4Dh, 0FFFFh, 35FDh>
decomposition <0FE4Eh, 0FFFFh, 35FDh>
decomposition <0FE4Fh, 0FFFFh, 35FDh>
decomposition <0FE50h, 0FFFFh, 362Bh>
decomposition <0FE51h, 0FFFFh, 362Dh>
decomposition <0FE52h, 0FFFFh, 1305h>
decomposition <0FE54h, 0FFFFh, 4E0h>
decomposition <0FE55h, 0FFFFh, 3631h>
decomposition <0FE56h, 0FFFFh, 3633h>
decomposition <0FE57h, 0FFFFh, 3635h>
decomposition <0FE58h, 0FFFFh, 35F5h>
decomposition <0FE59h, 0FFFFh, 1365h>
decomposition <0FE5Ah, 0FFFFh, 1367h>
decomposition <0FE5Bh, 0FFFFh, 35FFh>
decomposition <0FE5Ch, 0FFFFh, 3601h>
decomposition <0FE5Dh, 0FFFFh, 3603h>
decomposition <0FE5Eh, 0FFFFh, 3607h>
decomposition <0FE5Fh, 0FFFFh, 3637h>
decomposition <0FE60h, 0FFFFh, 3639h>
decomposition <0FE61h, 0FFFFh, 363Bh>
decomposition <0FE62h, 0FFFFh, 135Dh>
decomposition <0FE63h, 0FFFFh, 363Dh>
decomposition <0FE64h, 0FFFFh, 363Fh>
decomposition <0FE65h, 0FFFFh, 3641h>
decomposition <0FE66h, 0FFFFh, 1363h>
decomposition <0FE68h, 0FFFFh, 3643h>
decomposition <0FE69h, 0FFFFh, 3645h>
decomposition <0FE6Ah, 0FFFFh, 3647h>
decomposition <0FE6Bh, 0FFFFh, 3649h>
decomposition <0FE70h, 0FFFFh, 364Bh>
decomposition <0FE71h, 0FFFFh, 364Fh>
decomposition <0FE72h, 0FFFFh, 3654h>
decomposition <0FE74h, 0FFFFh, 3658h>
decomposition <0FE76h, 0FFFFh, 365Ch>
decomposition <0FE77h, 0FFFFh, 3660h>
decomposition <0FE78h, 0FFFFh, 3665h>
decomposition <0FE79h, 0FFFFh, 3669h>
decomposition <0FE7Ah, 0FFFFh, 366Eh>
decomposition <0FE7Bh, 0FFFFh, 3672h>
decomposition <0FE7Ch, 0FFFFh, 3677h>
decomposition <0FE7Dh, 0FFFFh, 367Bh>
decomposition <0FE7Eh, 0FFFFh, 3680h>
decomposition <0FE7Fh, 0FFFFh, 3684h>
decomposition <0FE80h, 0FFFFh, 3689h>
decomposition <0FE81h, 0FFFFh, 689h>
decomposition <0FE82h, 0FFFFh, 689h>
decomposition <0FE83h, 0FFFFh, 68Eh>
decomposition <0FE84h, 0FFFFh, 68Eh>
decomposition <0FE85h, 0FFFFh, 693h>
decomposition <0FE86h, 0FFFFh, 693h>
decomposition <0FE87h, 0FFFFh, 698h>
decomposition <0FE88h, 0FFFFh, 698h>
decomposition <0FE89h, 0FFFFh, 69Dh>
decomposition <0FE8Ah, 0FFFFh, 69Dh>
decomposition <0FE8Bh, 0FFFFh, 69Dh>
decomposition <0FE8Ch, 0FFFFh, 69Dh>
decomposition <0FE8Dh, 0FFFFh, 368Ch>
decomposition <0FE8Eh, 0FFFFh, 368Ch>
decomposition <0FE8Fh, 0FFFFh, 368Fh>
decomposition <0FE90h, 0FFFFh, 368Fh>
decomposition <0FE91h, 0FFFFh, 368Fh>
decomposition <0FE92h, 0FFFFh, 368Fh>
decomposition <0FE93h, 0FFFFh, 3692h>
decomposition <0FE94h, 0FFFFh, 3692h>
decomposition <0FE95h, 0FFFFh, 3695h>
decomposition <0FE96h, 0FFFFh, 3695h>
decomposition <0FE97h, 0FFFFh, 3695h>
decomposition <0FE98h, 0FFFFh, 3695h>
decomposition <0FE99h, 0FFFFh, 3698h>
decomposition <0FE9Ah, 0FFFFh, 3698h>
decomposition <0FE9Bh, 0FFFFh, 3698h>
decomposition <0FE9Ch, 0FFFFh, 3698h>
decomposition <0FE9Dh, 0FFFFh, 369Bh>
decomposition <0FE9Eh, 0FFFFh, 369Bh>
decomposition <0FE9Fh, 0FFFFh, 369Bh>
decomposition <0FEA0h, 0FFFFh, 369Bh>
decomposition <0FEA1h, 0FFFFh, 369Eh>
decomposition <0FEA2h, 0FFFFh, 369Eh>
decomposition <0FEA3h, 0FFFFh, 369Eh>
decomposition <0FEA4h, 0FFFFh, 369Eh>
decomposition <0FEA5h, 0FFFFh, 36A1h>
decomposition <0FEA6h, 0FFFFh, 36A1h>
decomposition <0FEA7h, 0FFFFh, 36A1h>
decomposition <0FEA8h, 0FFFFh, 36A1h>
decomposition <0FEA9h, 0FFFFh, 36A4h>
decomposition <0FEAAh, 0FFFFh, 36A4h>
decomposition <0FEABh, 0FFFFh, 36A7h>
decomposition <0FEACh, 0FFFFh, 36A7h>
decomposition <0FEADh, 0FFFFh, 36AAh>
decomposition <0FEAEh, 0FFFFh, 36AAh>
decomposition <0FEAFh, 0FFFFh, 36ADh>
decomposition <0FEB0h, 0FFFFh, 36ADh>
decomposition <0FEB1h, 0FFFFh, 36B0h>
decomposition <0FEB2h, 0FFFFh, 36B0h>
decomposition <0FEB3h, 0FFFFh, 36B0h>
decomposition <0FEB4h, 0FFFFh, 36B0h>
decomposition <0FEB5h, 0FFFFh, 36B3h>
decomposition <0FEB6h, 0FFFFh, 36B3h>
decomposition <0FEB7h, 0FFFFh, 36B3h>
decomposition <0FEB8h, 0FFFFh, 36B3h>
decomposition <0FEB9h, 0FFFFh, 36B6h>
decomposition <0FEBAh, 0FFFFh, 36B6h>
decomposition <0FEBBh, 0FFFFh, 36B6h>
decomposition <0FEBCh, 0FFFFh, 36B6h>
decomposition <0FEBDh, 0FFFFh, 36B9h>
decomposition <0FEBEh, 0FFFFh, 36B9h>
decomposition <0FEBFh, 0FFFFh, 36B9h>
decomposition <0FEC0h, 0FFFFh, 36B9h>
decomposition <0FEC1h, 0FFFFh, 36BCh>
decomposition <0FEC2h, 0FFFFh, 36BCh>
decomposition <0FEC3h, 0FFFFh, 36BCh>
decomposition <0FEC4h, 0FFFFh, 36BCh>
decomposition <0FEC5h, 0FFFFh, 36BFh>
decomposition <0FEC6h, 0FFFFh, 36BFh>
decomposition <0FEC7h, 0FFFFh, 36BFh>
decomposition <0FEC8h, 0FFFFh, 36BFh>
decomposition <0FEC9h, 0FFFFh, 36C2h>
decomposition <0FECAh, 0FFFFh, 36C2h>
decomposition <0FECBh, 0FFFFh, 36C2h>
decomposition <0FECCh, 0FFFFh, 36C2h>
decomposition <0FECDh, 0FFFFh, 36C5h>
decomposition <0FECEh, 0FFFFh, 36C5h>
decomposition <0FECFh, 0FFFFh, 36C5h>
decomposition <0FED0h, 0FFFFh, 36C5h>
decomposition <0FED1h, 0FFFFh, 36C8h>
decomposition <0FED2h, 0FFFFh, 36C8h>
decomposition <0FED3h, 0FFFFh, 36C8h>
decomposition <0FED4h, 0FFFFh, 36C8h>
decomposition <0FED5h, 0FFFFh, 36CBh>
decomposition <0FED6h, 0FFFFh, 36CBh>
decomposition <0FED7h, 0FFFFh, 36CBh>
decomposition <0FED8h, 0FFFFh, 36CBh>
decomposition <0FED9h, 0FFFFh, 36CEh>
decomposition <0FEDAh, 0FFFFh, 36CEh>
decomposition <0FEDBh, 0FFFFh, 36CEh>
decomposition <0FEDCh, 0FFFFh, 36CEh>
decomposition <0FEDDh, 0FFFFh, 36D1h>
decomposition <0FEDEh, 0FFFFh, 36D1h>
decomposition <0FEDFh, 0FFFFh, 36D1h>
decomposition <0FEE0h, 0FFFFh, 36D1h>
decomposition <0FEE1h, 0FFFFh, 36D4h>
decomposition <0FEE2h, 0FFFFh, 36D4h>
decomposition <0FEE3h, 0FFFFh, 36D4h>
decomposition <0FEE4h, 0FFFFh, 36D4h>
decomposition <0FEE5h, 0FFFFh, 36D7h>
decomposition <0FEE6h, 0FFFFh, 36D7h>
decomposition <0FEE7h, 0FFFFh, 36D7h>
decomposition <0FEE8h, 0FFFFh, 36D7h>
decomposition <0FEE9h, 0FFFFh, 36DAh>
decomposition <0FEEAh, 0FFFFh, 36DAh>
decomposition <0FEEBh, 0FFFFh, 36DAh>
decomposition <0FEECh, 0FFFFh, 36DAh>
decomposition <0FEEDh, 0FFFFh, 36DDh>
decomposition <0FEEEh, 0FFFFh, 36DDh>
decomposition <0FEEFh, 0FFFFh, 2F4Eh>
decomposition <0FEF0h, 0FFFFh, 2F4Eh>
decomposition <0FEF1h, 0FFFFh, 36E0h>
decomposition <0FEF2h, 0FFFFh, 36E0h>
decomposition <0FEF3h, 0FFFFh, 36E0h>
decomposition <0FEF4h, 0FFFFh, 36E0h>
decomposition <0FEF5h, 0FFFFh, 36E3h>
decomposition <0FEF6h, 0FFFFh, 36E3h>
decomposition <0FEF7h, 0FFFFh, 36EAh>
decomposition <0FEF8h, 0FFFFh, 36EAh>
decomposition <0FEF9h, 0FFFFh, 36F1h>
decomposition <0FEFAh, 0FFFFh, 36F1h>
decomposition <0FEFBh, 0FFFFh, 36F8h>
decomposition <0FEFCh, 0FFFFh, 36F8h>
decomposition <0FF01h, 0FFFFh, 3635h>
decomposition <0FF02h, 0FFFFh, 36FDh>
decomposition <0FF03h, 0FFFFh, 3637h>
decomposition <0FF04h, 0FFFFh, 3645h>
decomposition <0FF05h, 0FFFFh, 3647h>
decomposition <0FF06h, 0FFFFh, 3639h>
decomposition <0FF07h, 0FFFFh, 36FFh>
decomposition <0FF08h, 0FFFFh, 1365h>
decomposition <0FF09h, 0FFFFh, 1367h>
decomposition <0FF0Ah, 0FFFFh, 363Bh>
decomposition <0FF0Bh, 0FFFFh, 135Dh>
decomposition <0FF0Ch, 0FFFFh, 362Bh>
decomposition <0FF0Dh, 0FFFFh, 363Dh>
decomposition <0FF0Eh, 0FFFFh, 1305h>
decomposition <0FF0Fh, 0FFFFh, 3701h>
decomposition <0FF10h, 0FFFFh, 134Dh>
decomposition <0FF11h, 0FFFFh, 1Bh>
decomposition <0FF12h, 0FFFFh, 0Ch>
decomposition <0FF13h, 0FFFFh, 0Eh>
decomposition <0FF14h, 0FFFFh, 1351h>
decomposition <0FF15h, 0FFFFh, 1353h>
decomposition <0FF16h, 0FFFFh, 1355h>
decomposition <0FF17h, 0FFFFh, 1357h>
decomposition <0FF18h, 0FFFFh, 1359h>
decomposition <0FF19h, 0FFFFh, 135Bh>
decomposition <0FF1Ah, 0FFFFh, 3631h>
decomposition <0FF1Bh, 0FFFFh, 4E0h>
decomposition <0FF1Ch, 0FFFFh, 363Fh>
decomposition <0FF1Dh, 0FFFFh, 1363h>
decomposition <0FF1Eh, 0FFFFh, 3641h>
decomposition <0FF1Fh, 0FFFFh, 3633h>
decomposition <0FF20h, 0FFFFh, 3649h>
decomposition <0FF21h, 0FFFFh, 16C7h>
decomposition <0FF22h, 0FFFFh, 13B2h>
decomposition <0FF23h, 0FFFFh, 1376h>
decomposition <0FF24h, 0FFFFh, 13D5h>
decomposition <0FF25h, 0FFFFh, 13B6h>
decomposition <0FF26h, 0FFFFh, 13B8h>
decomposition <0FF27h, 0FFFFh, 16C9h>
decomposition <0FF28h, 0FFFFh, 138Dh>
decomposition <0FF29h, 0FFFFh, 1392h>
decomposition <0FF2Ah, 0FFFFh, 16CBh>
decomposition <0FF2Bh, 0FFFFh, 13B0h>
decomposition <0FF2Ch, 0FFFFh, 1394h>
decomposition <0FF2Dh, 0FFFFh, 13BAh>
decomposition <0FF2Eh, 0FFFFh, 1396h>
decomposition <0FF2Fh, 0FFFFh, 16CDh>
decomposition <0FF30h, 0FFFFh, 139Bh>
decomposition <0FF31h, 0FFFFh, 139Dh>
decomposition <0FF32h, 0FFFFh, 139Fh>
decomposition <0FF33h, 0FFFFh, 16CFh>
decomposition <0FF34h, 0FFFFh, 16D1h>
decomposition <0FF35h, 0FFFFh, 16D3h>
decomposition <0FF36h, 0FFFFh, 1430h>
decomposition <0FF37h, 0FFFFh, 16D5h>
decomposition <0FF38h, 0FFFFh, 1441h>
decomposition <0FF39h, 0FFFFh, 16D7h>
decomposition <0FF3Ah, 0FFFFh, 13ABh>
decomposition <0FF3Bh, 0FFFFh, 3703h>
decomposition <0FF3Ch, 0FFFFh, 3643h>
decomposition <0FF3Dh, 0FFFFh, 3705h>
decomposition <0FF3Eh, 0FFFFh, 3707h>
decomposition <0FF3Fh, 0FFFFh, 35FDh>
decomposition <0FF40h, 0FFFFh, 12BEh>
decomposition <0FF41h, 0FFFFh, 6>
decomposition <0FF42h, 0FFFFh, 16D9h>
decomposition <0FF43h, 0FFFFh, 146Ch>
decomposition <0FF44h, 0FFFFh, 13D7h>
decomposition <0FF45h, 0FFFFh, 13B4h>
decomposition <0FF46h, 0FFFFh, 16DBh>
decomposition <0FF47h, 0FFFFh, 138Bh>
decomposition <0FF48h, 0FFFFh, 493h>
decomposition <0FF49h, 0FFFFh, 134Fh>
decomposition <0FF4Ah, 0FFFFh, 498h>
decomposition <0FF4Bh, 0FFFFh, 16DDh>
decomposition <0FF4Ch, 0FFFFh, 4C4h>
decomposition <0FF4Dh, 0FFFFh, 146Eh>
decomposition <0FF4Eh, 0FFFFh, 1369h>
decomposition <0FF4Fh, 0FFFFh, 1Dh>
decomposition <0FF50h, 0FFFFh, 16DFh>
decomposition <0FF51h, 0FFFFh, 16E1h>
decomposition <0FF52h, 0FFFFh, 49Ah>
decomposition <0FF53h, 0FFFFh, 2C7h>
decomposition <0FF54h, 0FFFFh, 16E3h>
decomposition <0FF55h, 0FFFFh, 16E5h>
decomposition <0FF56h, 0FFFFh, 1454h>
decomposition <0FF57h, 0FFFFh, 4A5h>
decomposition <0FF58h, 0FFFFh, 4C6h>
decomposition <0FF59h, 0FFFFh, 4A7h>
decomposition <0FF5Ah, 0FFFFh, 16E7h>
decomposition <0FF5Bh, 0FFFFh, 35FFh>
decomposition <0FF5Ch, 0FFFFh, 3709h>
decomposition <0FF5Dh, 0FFFFh, 3601h>
decomposition <0FF5Eh, 0FFFFh, 370Bh>
decomposition <0FF5Fh, 0FFFFh, 370Dh>
decomposition <0FF60h, 0FFFFh, 3711h>
decomposition <0FF61h, 0FFFFh, 3715h>
decomposition <0FF62h, 0FFFFh, 361Bh>
decomposition <0FF63h, 0FFFFh, 361Fh>
decomposition <0FF64h, 0FFFFh, 362Dh>
decomposition <0FF65h, 0FFFFh, 3719h>
decomposition <0FF66h, 0FFFFh, 21A7h>
decomposition <0FF67h, 0FFFFh, 371Dh>
decomposition <0FF68h, 0FFFFh, 3721h>
decomposition <0FF69h, 0FFFFh, 3725h>
decomposition <0FF6Ah, 0FFFFh, 3729h>
decomposition <0FF6Bh, 0FFFFh, 372Dh>
decomposition <0FF6Ch, 0FFFFh, 3731h>
decomposition <0FF6Dh, 0FFFFh, 3735h>
decomposition <0FF6Eh, 0FFFFh, 3739h>
decomposition <0FF6Fh, 0FFFFh, 373Dh>
decomposition <0FF70h, 0FFFFh, 3741h>
decomposition <0FF71h, 0FFFFh, 20EFh>
decomposition <0FF72h, 0FFFFh, 20F3h>
decomposition <0FF73h, 0FFFFh, 20F7h>
decomposition <0FF74h, 0FFFFh, 20FBh>
decomposition <0FF75h, 0FFFFh, 20FFh>
decomposition <0FF76h, 0FFFFh, 2103h>
decomposition <0FF77h, 0FFFFh, 2107h>
decomposition <0FF78h, 0FFFFh, 210Bh>
decomposition <0FF79h, 0FFFFh, 210Fh>
decomposition <0FF7Ah, 0FFFFh, 2113h>
decomposition <0FF7Bh, 0FFFFh, 2117h>
decomposition <0FF7Ch, 0FFFFh, 211Bh>
decomposition <0FF7Dh, 0FFFFh, 211Fh>
decomposition <0FF7Eh, 0FFFFh, 2123h>
decomposition <0FF7Fh, 0FFFFh, 2127h>
decomposition <0FF80h, 0FFFFh, 212Bh>
decomposition <0FF81h, 0FFFFh, 212Fh>
decomposition <0FF82h, 0FFFFh, 2133h>
decomposition <0FF83h, 0FFFFh, 2137h>
decomposition <0FF84h, 0FFFFh, 213Bh>
decomposition <0FF85h, 0FFFFh, 213Fh>
decomposition <0FF86h, 0FFFFh, 2143h>
decomposition <0FF87h, 0FFFFh, 2147h>
decomposition <0FF88h, 0FFFFh, 214Bh>
decomposition <0FF89h, 0FFFFh, 214Fh>
decomposition <0FF8Ah, 0FFFFh, 2153h>
decomposition <0FF8Bh, 0FFFFh, 2157h>
decomposition <0FF8Ch, 0FFFFh, 215Bh>
decomposition <0FF8Dh, 0FFFFh, 215Fh>
decomposition <0FF8Eh, 0FFFFh, 2163h>
decomposition <0FF8Fh, 0FFFFh, 2167h>
decomposition <0FF90h, 0FFFFh, 216Bh>
decomposition <0FF91h, 0FFFFh, 216Fh>
decomposition <0FF92h, 0FFFFh, 2173h>
decomposition <0FF93h, 0FFFFh, 2177h>
decomposition <0FF94h, 0FFFFh, 217Bh>
decomposition <0FF95h, 0FFFFh, 217Fh>
decomposition <0FF96h, 0FFFFh, 2183h>
decomposition <0FF97h, 0FFFFh, 2187h>
decomposition <0FF98h, 0FFFFh, 218Bh>
decomposition <0FF99h, 0FFFFh, 218Fh>
decomposition <0FF9Ah, 0FFFFh, 2193h>
decomposition <0FF9Bh, 0FFFFh, 2197h>
decomposition <0FF9Ch, 0FFFFh, 219Bh>
decomposition <0FF9Dh, 0FFFFh, 3745h>
decomposition <0FF9Eh, 0FFFFh, 3749h>
decomposition <0FF9Fh, 0FFFFh, 374Dh>
decomposition <0FFA0h, 0FFFFh, 1CEDh>
decomposition <0FFA1h, 0FFFFh, 1C21h>
decomposition <0FFA2h, 0FFFFh, 1C25h>
decomposition <0FFA3h, 0FFFFh, 1C29h>
decomposition <0FFA4h, 0FFFFh, 1C2Dh>
decomposition <0FFA5h, 0FFFFh, 1C31h>
decomposition <0FFA6h, 0FFFFh, 1C35h>
decomposition <0FFA7h, 0FFFFh, 1C39h>
decomposition <0FFA8h, 0FFFFh, 1C3Dh>
decomposition <0FFA9h, 0FFFFh, 1C41h>
decomposition <0FFAAh, 0FFFFh, 1C45h>
decomposition <0FFABh, 0FFFFh, 1C49h>
decomposition <0FFACh, 0FFFFh, 1C4Dh>
decomposition <0FFADh, 0FFFFh, 1C51h>
decomposition <0FFAEh, 0FFFFh, 1C55h>
decomposition <0FFAFh, 0FFFFh, 1C59h>
decomposition <0FFB0h, 0FFFFh, 1C5Dh>
decomposition <0FFB1h, 0FFFFh, 1C61h>
decomposition <0FFB2h, 0FFFFh, 1C65h>
decomposition <0FFB3h, 0FFFFh, 1C69h>
decomposition <0FFB4h, 0FFFFh, 1C6Dh>
decomposition <0FFB5h, 0FFFFh, 1C71h>
decomposition <0FFB6h, 0FFFFh, 1C75h>
decomposition <0FFB7h, 0FFFFh, 1C79h>
decomposition <0FFB8h, 0FFFFh, 1C7Dh>
decomposition <0FFB9h, 0FFFFh, 1C81h>
decomposition <0FFBAh, 0FFFFh, 1C85h>
decomposition <0FFBBh, 0FFFFh, 1C89h>
decomposition <0FFBCh, 0FFFFh, 1C8Dh>
decomposition <0FFBDh, 0FFFFh, 1C91h>
decomposition <0FFBEh, 0FFFFh, 1C95h>
decomposition <0FFC2h, 0FFFFh, 1C99h>
decomposition <0FFC3h, 0FFFFh, 1C9Dh>
decomposition <0FFC4h, 0FFFFh, 1CA1h>
decomposition <0FFC5h, 0FFFFh, 1CA5h>
decomposition <0FFC6h, 0FFFFh, 1CA9h>
decomposition <0FFC7h, 0FFFFh, 1CADh>
decomposition <0FFCAh, 0FFFFh, 1CB1h>
decomposition <0FFCBh, 0FFFFh, 1CB5h>
decomposition <0FFCCh, 0FFFFh, 1CB9h>
decomposition <0FFCDh, 0FFFFh, 1CBDh>
decomposition <0FFCEh, 0FFFFh, 1CC1h>
decomposition <0FFCFh, 0FFFFh, 1CC5h>
decomposition <0FFD2h, 0FFFFh, 1CC9h>
decomposition <0FFD3h, 0FFFFh, 1CCDh>
decomposition <0FFD4h, 0FFFFh, 1CD1h>
decomposition <0FFD5h, 0FFFFh, 1CD5h>
decomposition <0FFD6h, 0FFFFh, 1CD9h>
decomposition <0FFD7h, 0FFFFh, 1CDDh>
decomposition <0FFDAh, 0FFFFh, 1CE1h>
decomposition <0FFDBh, 0FFFFh, 1CE5h>
decomposition <0FFDCh, 0FFFFh, 1CE9h>
decomposition <0FFE0h, 0FFFFh, 3751h>
decomposition <0FFE1h, 0FFFFh, 3754h>
decomposition <0FFE2h, 0FFFFh, 3757h>
decomposition <0FFE3h, 0FFFFh, 8>
decomposition <0FFE4h, 0FFFFh, 375Ah>
decomposition <0FFE5h, 0FFFFh, 375Dh>
decomposition <0FFE6h, 0FFFFh, 3760h>
decomposition <0FFE8h, 0FFFFh, 3764h>
decomposition <0FFE9h, 0FFFFh, 3768h>
decomposition <0FFEAh, 0FFFFh, 376Ch>
decomposition <0FFEBh, 0FFFFh, 3770h>
decomposition <0FFECh, 0FFFFh, 3774h>
decomposition <0FFEDh, 0FFFFh, 3778h>
decomposition <0FFEEh, 0FFFFh, 377Ch>
decomposition <1D15Eh, 3780h, 0FFFFh>
decomposition <1D15Fh, 3789h, 0FFFFh>
decomposition <1D160h, 3792h, 0FFFFh>
decomposition <1D161h, 379Fh, 0FFFFh>
decomposition <1D162h, 37ACh, 0FFFFh>
decomposition <1D163h, 37B9h, 0FFFFh>
decomposition <1D164h, 37C6h, 0FFFFh>
decomposition <1D1BBh, 37D3h, 0FFFFh>
decomposition <1D1BCh, 37DCh, 0FFFFh>
decomposition <1D1BDh, 37E5h, 0FFFFh>
decomposition <1D1BEh, 37F2h, 0FFFFh>
decomposition <1D1BFh, 37FFh, 0FFFFh>
decomposition <1D1C0h, 380Ch, 0FFFFh>
decomposition <1D400h, 0FFFFh, 16C7h>
decomposition <1D401h, 0FFFFh, 13B2h>
decomposition <1D402h, 0FFFFh, 1376h>
decomposition <1D403h, 0FFFFh, 13D5h>
decomposition <1D404h, 0FFFFh, 13B6h>
decomposition <1D405h, 0FFFFh, 13B8h>
decomposition <1D406h, 0FFFFh, 16C9h>
decomposition <1D407h, 0FFFFh, 138Dh>
decomposition <1D408h, 0FFFFh, 1392h>
decomposition <1D409h, 0FFFFh, 16CBh>
decomposition <1D40Ah, 0FFFFh, 13B0h>
decomposition <1D40Bh, 0FFFFh, 1394h>
decomposition <1D40Ch, 0FFFFh, 13BAh>
decomposition <1D40Dh, 0FFFFh, 1396h>
decomposition <1D40Eh, 0FFFFh, 16CDh>
decomposition <1D40Fh, 0FFFFh, 139Bh>
decomposition <1D410h, 0FFFFh, 139Dh>
decomposition <1D411h, 0FFFFh, 139Fh>
decomposition <1D412h, 0FFFFh, 16CFh>
decomposition <1D413h, 0FFFFh, 16D1h>
decomposition <1D414h, 0FFFFh, 16D3h>
decomposition <1D415h, 0FFFFh, 1430h>
decomposition <1D416h, 0FFFFh, 16D5h>
decomposition <1D417h, 0FFFFh, 1441h>
decomposition <1D418h, 0FFFFh, 16D7h>
decomposition <1D419h, 0FFFFh, 13ABh>
decomposition <1D41Ah, 0FFFFh, 6>
decomposition <1D41Bh, 0FFFFh, 16D9h>
decomposition <1D41Ch, 0FFFFh, 146Ch>
decomposition <1D41Dh, 0FFFFh, 13D7h>
decomposition <1D41Eh, 0FFFFh, 13B4h>
decomposition <1D41Fh, 0FFFFh, 16DBh>
decomposition <1D420h, 0FFFFh, 138Bh>
decomposition <1D421h, 0FFFFh, 493h>
decomposition <1D422h, 0FFFFh, 134Fh>
decomposition <1D423h, 0FFFFh, 498h>
decomposition <1D424h, 0FFFFh, 16DDh>
decomposition <1D425h, 0FFFFh, 4C4h>
decomposition <1D426h, 0FFFFh, 146Eh>
decomposition <1D427h, 0FFFFh, 1369h>
decomposition <1D428h, 0FFFFh, 1Dh>
decomposition <1D429h, 0FFFFh, 16DFh>
decomposition <1D42Ah, 0FFFFh, 16E1h>
decomposition <1D42Bh, 0FFFFh, 49Ah>
decomposition <1D42Ch, 0FFFFh, 2C7h>
decomposition <1D42Dh, 0FFFFh, 16E3h>
decomposition <1D42Eh, 0FFFFh, 16E5h>
decomposition <1D42Fh, 0FFFFh, 1454h>
decomposition <1D430h, 0FFFFh, 4A5h>
decomposition <1D431h, 0FFFFh, 4C6h>
decomposition <1D432h, 0FFFFh, 4A7h>
decomposition <1D433h, 0FFFFh, 16E7h>
decomposition <1D434h, 0FFFFh, 16C7h>
decomposition <1D435h, 0FFFFh, 13B2h>
decomposition <1D436h, 0FFFFh, 1376h>
decomposition <1D437h, 0FFFFh, 13D5h>
decomposition <1D438h, 0FFFFh, 13B6h>
decomposition <1D439h, 0FFFFh, 13B8h>
decomposition <1D43Ah, 0FFFFh, 16C9h>
decomposition <1D43Bh, 0FFFFh, 138Dh>
decomposition <1D43Ch, 0FFFFh, 1392h>
decomposition <1D43Dh, 0FFFFh, 16CBh>
decomposition <1D43Eh, 0FFFFh, 13B0h>
decomposition <1D43Fh, 0FFFFh, 1394h>
decomposition <1D440h, 0FFFFh, 13BAh>
decomposition <1D441h, 0FFFFh, 1396h>
decomposition <1D442h, 0FFFFh, 16CDh>
decomposition <1D443h, 0FFFFh, 139Bh>
decomposition <1D444h, 0FFFFh, 139Dh>
decomposition <1D445h, 0FFFFh, 139Fh>
decomposition <1D446h, 0FFFFh, 16CFh>
decomposition <1D447h, 0FFFFh, 16D1h>
decomposition <1D448h, 0FFFFh, 16D3h>
decomposition <1D449h, 0FFFFh, 1430h>
decomposition <1D44Ah, 0FFFFh, 16D5h>
decomposition <1D44Bh, 0FFFFh, 1441h>
decomposition <1D44Ch, 0FFFFh, 16D7h>
decomposition <1D44Dh, 0FFFFh, 13ABh>
decomposition <1D44Eh, 0FFFFh, 6>
decomposition <1D44Fh, 0FFFFh, 16D9h>
decomposition <1D450h, 0FFFFh, 146Ch>
decomposition <1D451h, 0FFFFh, 13D7h>
decomposition <1D452h, 0FFFFh, 13B4h>
decomposition <1D453h, 0FFFFh, 16DBh>
decomposition <1D454h, 0FFFFh, 138Bh>
decomposition <1D456h, 0FFFFh, 134Fh>
decomposition <1D457h, 0FFFFh, 498h>
decomposition <1D458h, 0FFFFh, 16DDh>
decomposition <1D459h, 0FFFFh, 4C4h>
decomposition <1D45Ah, 0FFFFh, 146Eh>
decomposition <1D45Bh, 0FFFFh, 1369h>
decomposition <1D45Ch, 0FFFFh, 1Dh>
decomposition <1D45Dh, 0FFFFh, 16DFh>
decomposition <1D45Eh, 0FFFFh, 16E1h>
decomposition <1D45Fh, 0FFFFh, 49Ah>
decomposition <1D460h, 0FFFFh, 2C7h>
decomposition <1D461h, 0FFFFh, 16E3h>
decomposition <1D462h, 0FFFFh, 16E5h>
decomposition <1D463h, 0FFFFh, 1454h>
decomposition <1D464h, 0FFFFh, 4A5h>
decomposition <1D465h, 0FFFFh, 4C6h>
decomposition <1D466h, 0FFFFh, 4A7h>
decomposition <1D467h, 0FFFFh, 16E7h>
decomposition <1D468h, 0FFFFh, 16C7h>
decomposition <1D469h, 0FFFFh, 13B2h>
decomposition <1D46Ah, 0FFFFh, 1376h>
decomposition <1D46Bh, 0FFFFh, 13D5h>
decomposition <1D46Ch, 0FFFFh, 13B6h>
decomposition <1D46Dh, 0FFFFh, 13B8h>
decomposition <1D46Eh, 0FFFFh, 16C9h>
decomposition <1D46Fh, 0FFFFh, 138Dh>
decomposition <1D470h, 0FFFFh, 1392h>
decomposition <1D471h, 0FFFFh, 16CBh>
decomposition <1D472h, 0FFFFh, 13B0h>
decomposition <1D473h, 0FFFFh, 1394h>
decomposition <1D474h, 0FFFFh, 13BAh>
decomposition <1D475h, 0FFFFh, 1396h>
decomposition <1D476h, 0FFFFh, 16CDh>
decomposition <1D477h, 0FFFFh, 139Bh>
decomposition <1D478h, 0FFFFh, 139Dh>
decomposition <1D479h, 0FFFFh, 139Fh>
decomposition <1D47Ah, 0FFFFh, 16CFh>
decomposition <1D47Bh, 0FFFFh, 16D1h>
decomposition <1D47Ch, 0FFFFh, 16D3h>
decomposition <1D47Dh, 0FFFFh, 1430h>
decomposition <1D47Eh, 0FFFFh, 16D5h>
decomposition <1D47Fh, 0FFFFh, 1441h>
decomposition <1D480h, 0FFFFh, 16D7h>
decomposition <1D481h, 0FFFFh, 13ABh>
decomposition <1D482h, 0FFFFh, 6>
decomposition <1D483h, 0FFFFh, 16D9h>
decomposition <1D484h, 0FFFFh, 146Ch>
decomposition <1D485h, 0FFFFh, 13D7h>
decomposition <1D486h, 0FFFFh, 13B4h>
decomposition <1D487h, 0FFFFh, 16DBh>
decomposition <1D488h, 0FFFFh, 138Bh>
decomposition <1D489h, 0FFFFh, 493h>
decomposition <1D48Ah, 0FFFFh, 134Fh>
decomposition <1D48Bh, 0FFFFh, 498h>
decomposition <1D48Ch, 0FFFFh, 16DDh>
decomposition <1D48Dh, 0FFFFh, 4C4h>
decomposition <1D48Eh, 0FFFFh, 146Eh>
decomposition <1D48Fh, 0FFFFh, 1369h>
decomposition <1D490h, 0FFFFh, 1Dh>
decomposition <1D491h, 0FFFFh, 16DFh>
decomposition <1D492h, 0FFFFh, 16E1h>
decomposition <1D493h, 0FFFFh, 49Ah>
decomposition <1D494h, 0FFFFh, 2C7h>
decomposition <1D495h, 0FFFFh, 16E3h>
decomposition <1D496h, 0FFFFh, 16E5h>
decomposition <1D497h, 0FFFFh, 1454h>
decomposition <1D498h, 0FFFFh, 4A5h>
decomposition <1D499h, 0FFFFh, 4C6h>
decomposition <1D49Ah, 0FFFFh, 4A7h>
decomposition <1D49Bh, 0FFFFh, 16E7h>
decomposition <1D49Ch, 0FFFFh, 16C7h>
decomposition <1D49Eh, 0FFFFh, 1376h>
decomposition <1D49Fh, 0FFFFh, 13D5h>
decomposition <1D4A2h, 0FFFFh, 16C9h>
decomposition <1D4A5h, 0FFFFh, 16CBh>
decomposition <1D4A6h, 0FFFFh, 13B0h>
decomposition <1D4A9h, 0FFFFh, 1396h>
decomposition <1D4AAh, 0FFFFh, 16CDh>
decomposition <1D4ABh, 0FFFFh, 139Bh>
decomposition <1D4ACh, 0FFFFh, 139Dh>
decomposition <1D4AEh, 0FFFFh, 16CFh>
decomposition <1D4AFh, 0FFFFh, 16D1h>
decomposition <1D4B0h, 0FFFFh, 16D3h>
decomposition <1D4B1h, 0FFFFh, 1430h>
decomposition <1D4B2h, 0FFFFh, 16D5h>
decomposition <1D4B3h, 0FFFFh, 1441h>
decomposition <1D4B4h, 0FFFFh, 16D7h>
decomposition <1D4B5h, 0FFFFh, 13ABh>
decomposition <1D4B6h, 0FFFFh, 6>
decomposition <1D4B7h, 0FFFFh, 16D9h>
decomposition <1D4B8h, 0FFFFh, 146Ch>
decomposition <1D4B9h, 0FFFFh, 13D7h>
decomposition <1D4BBh, 0FFFFh, 16DBh>
decomposition <1D4BDh, 0FFFFh, 493h>
decomposition <1D4BEh, 0FFFFh, 134Fh>
decomposition <1D4BFh, 0FFFFh, 498h>
decomposition <1D4C0h, 0FFFFh, 16DDh>
decomposition <1D4C2h, 0FFFFh, 146Eh>
decomposition <1D4C3h, 0FFFFh, 1369h>
decomposition <1D4C5h, 0FFFFh, 16DFh>
decomposition <1D4C6h, 0FFFFh, 16E1h>
decomposition <1D4C7h, 0FFFFh, 49Ah>
decomposition <1D4C8h, 0FFFFh, 2C7h>
decomposition <1D4C9h, 0FFFFh, 16E3h>
decomposition <1D4CAh, 0FFFFh, 16E5h>
decomposition <1D4CBh, 0FFFFh, 1454h>
decomposition <1D4CCh, 0FFFFh, 4A5h>
decomposition <1D4CDh, 0FFFFh, 4C6h>
decomposition <1D4CEh, 0FFFFh, 4A7h>
decomposition <1D4CFh, 0FFFFh, 16E7h>
decomposition <1D4D0h, 0FFFFh, 16C7h>
decomposition <1D4D1h, 0FFFFh, 13B2h>
decomposition <1D4D2h, 0FFFFh, 1376h>
decomposition <1D4D3h, 0FFFFh, 13D5h>
decomposition <1D4D4h, 0FFFFh, 13B6h>
decomposition <1D4D5h, 0FFFFh, 13B8h>
decomposition <1D4D6h, 0FFFFh, 16C9h>
decomposition <1D4D7h, 0FFFFh, 138Dh>
decomposition <1D4D8h, 0FFFFh, 1392h>
decomposition <1D4D9h, 0FFFFh, 16CBh>
decomposition <1D4DAh, 0FFFFh, 13B0h>
decomposition <1D4DBh, 0FFFFh, 1394h>
decomposition <1D4DCh, 0FFFFh, 13BAh>
decomposition <1D4DDh, 0FFFFh, 1396h>
decomposition <1D4DEh, 0FFFFh, 16CDh>
decomposition <1D4DFh, 0FFFFh, 139Bh>
decomposition <1D4E0h, 0FFFFh, 139Dh>
decomposition <1D4E1h, 0FFFFh, 139Fh>
decomposition <1D4E2h, 0FFFFh, 16CFh>
decomposition <1D4E3h, 0FFFFh, 16D1h>
decomposition <1D4E4h, 0FFFFh, 16D3h>
decomposition <1D4E5h, 0FFFFh, 1430h>
decomposition <1D4E6h, 0FFFFh, 16D5h>
decomposition <1D4E7h, 0FFFFh, 1441h>
decomposition <1D4E8h, 0FFFFh, 16D7h>
decomposition <1D4E9h, 0FFFFh, 13ABh>
decomposition <1D4EAh, 0FFFFh, 6>
decomposition <1D4EBh, 0FFFFh, 16D9h>
decomposition <1D4ECh, 0FFFFh, 146Ch>
decomposition <1D4EDh, 0FFFFh, 13D7h>
decomposition <1D4EEh, 0FFFFh, 13B4h>
decomposition <1D4EFh, 0FFFFh, 16DBh>
decomposition <1D4F0h, 0FFFFh, 138Bh>
decomposition <1D4F1h, 0FFFFh, 493h>
decomposition <1D4F2h, 0FFFFh, 134Fh>
decomposition <1D4F3h, 0FFFFh, 498h>
decomposition <1D4F4h, 0FFFFh, 16DDh>
decomposition <1D4F5h, 0FFFFh, 4C4h>
decomposition <1D4F6h, 0FFFFh, 146Eh>
decomposition <1D4F7h, 0FFFFh, 1369h>
decomposition <1D4F8h, 0FFFFh, 1Dh>
decomposition <1D4F9h, 0FFFFh, 16DFh>
decomposition <1D4FAh, 0FFFFh, 16E1h>
decomposition <1D4FBh, 0FFFFh, 49Ah>
decomposition <1D4FCh, 0FFFFh, 2C7h>
decomposition <1D4FDh, 0FFFFh, 16E3h>
decomposition <1D4FEh, 0FFFFh, 16E5h>
decomposition <1D4FFh, 0FFFFh, 1454h>
decomposition <1D500h, 0FFFFh, 4A5h>
decomposition <1D501h, 0FFFFh, 4C6h>
decomposition <1D502h, 0FFFFh, 4A7h>
decomposition <1D503h, 0FFFFh, 16E7h>
decomposition <1D504h, 0FFFFh, 16C7h>
decomposition <1D505h, 0FFFFh, 13B2h>
decomposition <1D507h, 0FFFFh, 13D5h>
decomposition <1D508h, 0FFFFh, 13B6h>
decomposition <1D509h, 0FFFFh, 13B8h>
decomposition <1D50Ah, 0FFFFh, 16C9h>
decomposition <1D50Dh, 0FFFFh, 16CBh>
decomposition <1D50Eh, 0FFFFh, 13B0h>
decomposition <1D50Fh, 0FFFFh, 1394h>
decomposition <1D510h, 0FFFFh, 13BAh>
decomposition <1D511h, 0FFFFh, 1396h>
decomposition <1D512h, 0FFFFh, 16CDh>
decomposition <1D513h, 0FFFFh, 139Bh>
decomposition <1D514h, 0FFFFh, 139Dh>
decomposition <1D516h, 0FFFFh, 16CFh>
decomposition <1D517h, 0FFFFh, 16D1h>
decomposition <1D518h, 0FFFFh, 16D3h>
decomposition <1D519h, 0FFFFh, 1430h>
decomposition <1D51Ah, 0FFFFh, 16D5h>
decomposition <1D51Bh, 0FFFFh, 1441h>
decomposition <1D51Ch, 0FFFFh, 16D7h>
decomposition <1D51Eh, 0FFFFh, 6>
decomposition <1D51Fh, 0FFFFh, 16D9h>
decomposition <1D520h, 0FFFFh, 146Ch>
decomposition <1D521h, 0FFFFh, 13D7h>
decomposition <1D522h, 0FFFFh, 13B4h>
decomposition <1D523h, 0FFFFh, 16DBh>
decomposition <1D524h, 0FFFFh, 138Bh>
decomposition <1D525h, 0FFFFh, 493h>
decomposition <1D526h, 0FFFFh, 134Fh>
decomposition <1D527h, 0FFFFh, 498h>
decomposition <1D528h, 0FFFFh, 16DDh>
decomposition <1D529h, 0FFFFh, 4C4h>
decomposition <1D52Ah, 0FFFFh, 146Eh>
decomposition <1D52Bh, 0FFFFh, 1369h>
decomposition <1D52Ch, 0FFFFh, 1Dh>
decomposition <1D52Dh, 0FFFFh, 16DFh>
decomposition <1D52Eh, 0FFFFh, 16E1h>
decomposition <1D52Fh, 0FFFFh, 49Ah>
decomposition <1D530h, 0FFFFh, 2C7h>
decomposition <1D531h, 0FFFFh, 16E3h>
decomposition <1D532h, 0FFFFh, 16E5h>
decomposition <1D533h, 0FFFFh, 1454h>
decomposition <1D534h, 0FFFFh, 4A5h>
decomposition <1D535h, 0FFFFh, 4C6h>
decomposition <1D536h, 0FFFFh, 4A7h>
decomposition <1D537h, 0FFFFh, 16E7h>
decomposition <1D538h, 0FFFFh, 16C7h>
decomposition <1D539h, 0FFFFh, 13B2h>
decomposition <1D53Bh, 0FFFFh, 13D5h>
decomposition <1D53Ch, 0FFFFh, 13B6h>
decomposition <1D53Dh, 0FFFFh, 13B8h>
decomposition <1D53Eh, 0FFFFh, 16C9h>
decomposition <1D540h, 0FFFFh, 1392h>
decomposition <1D541h, 0FFFFh, 16CBh>
decomposition <1D542h, 0FFFFh, 13B0h>
decomposition <1D543h, 0FFFFh, 1394h>
decomposition <1D544h, 0FFFFh, 13BAh>
decomposition <1D546h, 0FFFFh, 16CDh>
decomposition <1D54Ah, 0FFFFh, 16CFh>
decomposition <1D54Bh, 0FFFFh, 16D1h>
decomposition <1D54Ch, 0FFFFh, 16D3h>
decomposition <1D54Dh, 0FFFFh, 1430h>
decomposition <1D54Eh, 0FFFFh, 16D5h>
decomposition <1D54Fh, 0FFFFh, 1441h>
decomposition <1D550h, 0FFFFh, 16D7h>
decomposition <1D552h, 0FFFFh, 6>
decomposition <1D553h, 0FFFFh, 16D9h>
decomposition <1D554h, 0FFFFh, 146Ch>
decomposition <1D555h, 0FFFFh, 13D7h>
decomposition <1D556h, 0FFFFh, 13B4h>
decomposition <1D557h, 0FFFFh, 16DBh>
decomposition <1D558h, 0FFFFh, 138Bh>
decomposition <1D559h, 0FFFFh, 493h>
decomposition <1D55Ah, 0FFFFh, 134Fh>
decomposition <1D55Bh, 0FFFFh, 498h>
decomposition <1D55Ch, 0FFFFh, 16DDh>
decomposition <1D55Dh, 0FFFFh, 4C4h>
decomposition <1D55Eh, 0FFFFh, 146Eh>
decomposition <1D55Fh, 0FFFFh, 1369h>
decomposition <1D560h, 0FFFFh, 1Dh>
decomposition <1D561h, 0FFFFh, 16DFh>
decomposition <1D562h, 0FFFFh, 16E1h>
decomposition <1D563h, 0FFFFh, 49Ah>
decomposition <1D564h, 0FFFFh, 2C7h>
decomposition <1D565h, 0FFFFh, 16E3h>
decomposition <1D566h, 0FFFFh, 16E5h>
decomposition <1D567h, 0FFFFh, 1454h>
decomposition <1D568h, 0FFFFh, 4A5h>
decomposition <1D569h, 0FFFFh, 4C6h>
decomposition <1D56Ah, 0FFFFh, 4A7h>
decomposition <1D56Bh, 0FFFFh, 16E7h>
decomposition <1D56Ch, 0FFFFh, 16C7h>
decomposition <1D56Dh, 0FFFFh, 13B2h>
decomposition <1D56Eh, 0FFFFh, 1376h>
decomposition <1D56Fh, 0FFFFh, 13D5h>
decomposition <1D570h, 0FFFFh, 13B6h>
decomposition <1D571h, 0FFFFh, 13B8h>
decomposition <1D572h, 0FFFFh, 16C9h>
decomposition <1D573h, 0FFFFh, 138Dh>
decomposition <1D574h, 0FFFFh, 1392h>
decomposition <1D575h, 0FFFFh, 16CBh>
decomposition <1D576h, 0FFFFh, 13B0h>
decomposition <1D577h, 0FFFFh, 1394h>
decomposition <1D578h, 0FFFFh, 13BAh>
decomposition <1D579h, 0FFFFh, 1396h>
decomposition <1D57Ah, 0FFFFh, 16CDh>
decomposition <1D57Bh, 0FFFFh, 139Bh>
decomposition <1D57Ch, 0FFFFh, 139Dh>
decomposition <1D57Dh, 0FFFFh, 139Fh>
decomposition <1D57Eh, 0FFFFh, 16CFh>
decomposition <1D57Fh, 0FFFFh, 16D1h>
decomposition <1D580h, 0FFFFh, 16D3h>
decomposition <1D581h, 0FFFFh, 1430h>
decomposition <1D582h, 0FFFFh, 16D5h>
decomposition <1D583h, 0FFFFh, 1441h>
decomposition <1D584h, 0FFFFh, 16D7h>
decomposition <1D585h, 0FFFFh, 13ABh>
decomposition <1D586h, 0FFFFh, 6>
decomposition <1D587h, 0FFFFh, 16D9h>
decomposition <1D588h, 0FFFFh, 146Ch>
decomposition <1D589h, 0FFFFh, 13D7h>
decomposition <1D58Ah, 0FFFFh, 13B4h>
decomposition <1D58Bh, 0FFFFh, 16DBh>
decomposition <1D58Ch, 0FFFFh, 138Bh>
decomposition <1D58Dh, 0FFFFh, 493h>
decomposition <1D58Eh, 0FFFFh, 134Fh>
decomposition <1D58Fh, 0FFFFh, 498h>
decomposition <1D590h, 0FFFFh, 16DDh>
decomposition <1D591h, 0FFFFh, 4C4h>
decomposition <1D592h, 0FFFFh, 146Eh>
decomposition <1D593h, 0FFFFh, 1369h>
decomposition <1D594h, 0FFFFh, 1Dh>
decomposition <1D595h, 0FFFFh, 16DFh>
decomposition <1D596h, 0FFFFh, 16E1h>
decomposition <1D597h, 0FFFFh, 49Ah>
decomposition <1D598h, 0FFFFh, 2C7h>
decomposition <1D599h, 0FFFFh, 16E3h>
decomposition <1D59Ah, 0FFFFh, 16E5h>
decomposition <1D59Bh, 0FFFFh, 1454h>
decomposition <1D59Ch, 0FFFFh, 4A5h>
decomposition <1D59Dh, 0FFFFh, 4C6h>
decomposition <1D59Eh, 0FFFFh, 4A7h>
decomposition <1D59Fh, 0FFFFh, 16E7h>
decomposition <1D5A0h, 0FFFFh, 16C7h>
decomposition <1D5A1h, 0FFFFh, 13B2h>
decomposition <1D5A2h, 0FFFFh, 1376h>
decomposition <1D5A3h, 0FFFFh, 13D5h>
decomposition <1D5A4h, 0FFFFh, 13B6h>
decomposition <1D5A5h, 0FFFFh, 13B8h>
decomposition <1D5A6h, 0FFFFh, 16C9h>
decomposition <1D5A7h, 0FFFFh, 138Dh>
decomposition <1D5A8h, 0FFFFh, 1392h>
decomposition <1D5A9h, 0FFFFh, 16CBh>
decomposition <1D5AAh, 0FFFFh, 13B0h>
decomposition <1D5ABh, 0FFFFh, 1394h>
decomposition <1D5ACh, 0FFFFh, 13BAh>
decomposition <1D5ADh, 0FFFFh, 1396h>
decomposition <1D5AEh, 0FFFFh, 16CDh>
decomposition <1D5AFh, 0FFFFh, 139Bh>
decomposition <1D5B0h, 0FFFFh, 139Dh>
decomposition <1D5B1h, 0FFFFh, 139Fh>
decomposition <1D5B2h, 0FFFFh, 16CFh>
decomposition <1D5B3h, 0FFFFh, 16D1h>
decomposition <1D5B4h, 0FFFFh, 16D3h>
decomposition <1D5B5h, 0FFFFh, 1430h>
decomposition <1D5B6h, 0FFFFh, 16D5h>
decomposition <1D5B7h, 0FFFFh, 1441h>
decomposition <1D5B8h, 0FFFFh, 16D7h>
decomposition <1D5B9h, 0FFFFh, 13ABh>
decomposition <1D5BAh, 0FFFFh, 6>
decomposition <1D5BBh, 0FFFFh, 16D9h>
decomposition <1D5BCh, 0FFFFh, 146Ch>
decomposition <1D5BDh, 0FFFFh, 13D7h>
decomposition <1D5BEh, 0FFFFh, 13B4h>
decomposition <1D5BFh, 0FFFFh, 16DBh>
decomposition <1D5C0h, 0FFFFh, 138Bh>
decomposition <1D5C1h, 0FFFFh, 493h>
decomposition <1D5C2h, 0FFFFh, 134Fh>
decomposition <1D5C3h, 0FFFFh, 498h>
decomposition <1D5C4h, 0FFFFh, 16DDh>
decomposition <1D5C5h, 0FFFFh, 4C4h>
decomposition <1D5C6h, 0FFFFh, 146Eh>
decomposition <1D5C7h, 0FFFFh, 1369h>
decomposition <1D5C8h, 0FFFFh, 1Dh>
decomposition <1D5C9h, 0FFFFh, 16DFh>
decomposition <1D5CAh, 0FFFFh, 16E1h>
decomposition <1D5CBh, 0FFFFh, 49Ah>
decomposition <1D5CCh, 0FFFFh, 2C7h>
decomposition <1D5CDh, 0FFFFh, 16E3h>
decomposition <1D5CEh, 0FFFFh, 16E5h>
decomposition <1D5CFh, 0FFFFh, 1454h>
decomposition <1D5D0h, 0FFFFh, 4A5h>
decomposition <1D5D1h, 0FFFFh, 4C6h>
decomposition <1D5D2h, 0FFFFh, 4A7h>
decomposition <1D5D3h, 0FFFFh, 16E7h>
decomposition <1D5D4h, 0FFFFh, 16C7h>
decomposition <1D5D5h, 0FFFFh, 13B2h>
decomposition <1D5D6h, 0FFFFh, 1376h>
decomposition <1D5D7h, 0FFFFh, 13D5h>
decomposition <1D5D8h, 0FFFFh, 13B6h>
decomposition <1D5D9h, 0FFFFh, 13B8h>
decomposition <1D5DAh, 0FFFFh, 16C9h>
decomposition <1D5DBh, 0FFFFh, 138Dh>
decomposition <1D5DCh, 0FFFFh, 1392h>
decomposition <1D5DDh, 0FFFFh, 16CBh>
decomposition <1D5DEh, 0FFFFh, 13B0h>
decomposition <1D5DFh, 0FFFFh, 1394h>
decomposition <1D5E0h, 0FFFFh, 13BAh>
decomposition <1D5E1h, 0FFFFh, 1396h>
decomposition <1D5E2h, 0FFFFh, 16CDh>
decomposition <1D5E3h, 0FFFFh, 139Bh>
decomposition <1D5E4h, 0FFFFh, 139Dh>
decomposition <1D5E5h, 0FFFFh, 139Fh>
decomposition <1D5E6h, 0FFFFh, 16CFh>
decomposition <1D5E7h, 0FFFFh, 16D1h>
decomposition <1D5E8h, 0FFFFh, 16D3h>
decomposition <1D5E9h, 0FFFFh, 1430h>
decomposition <1D5EAh, 0FFFFh, 16D5h>
decomposition <1D5EBh, 0FFFFh, 1441h>
decomposition <1D5ECh, 0FFFFh, 16D7h>
decomposition <1D5EDh, 0FFFFh, 13ABh>
decomposition <1D5EEh, 0FFFFh, 6>
decomposition <1D5EFh, 0FFFFh, 16D9h>
decomposition <1D5F0h, 0FFFFh, 146Ch>
decomposition <1D5F1h, 0FFFFh, 13D7h>
decomposition <1D5F2h, 0FFFFh, 13B4h>
decomposition <1D5F3h, 0FFFFh, 16DBh>
decomposition <1D5F4h, 0FFFFh, 138Bh>
decomposition <1D5F5h, 0FFFFh, 493h>
decomposition <1D5F6h, 0FFFFh, 134Fh>
decomposition <1D5F7h, 0FFFFh, 498h>
decomposition <1D5F8h, 0FFFFh, 16DDh>
decomposition <1D5F9h, 0FFFFh, 4C4h>
decomposition <1D5FAh, 0FFFFh, 146Eh>
decomposition <1D5FBh, 0FFFFh, 1369h>
decomposition <1D5FCh, 0FFFFh, 1Dh>
decomposition <1D5FDh, 0FFFFh, 16DFh>
decomposition <1D5FEh, 0FFFFh, 16E1h>
decomposition <1D5FFh, 0FFFFh, 49Ah>
decomposition <1D600h, 0FFFFh, 2C7h>
decomposition <1D601h, 0FFFFh, 16E3h>
decomposition <1D602h, 0FFFFh, 16E5h>
decomposition <1D603h, 0FFFFh, 1454h>
decomposition <1D604h, 0FFFFh, 4A5h>
decomposition <1D605h, 0FFFFh, 4C6h>
decomposition <1D606h, 0FFFFh, 4A7h>
decomposition <1D607h, 0FFFFh, 16E7h>
decomposition <1D608h, 0FFFFh, 16C7h>
decomposition <1D609h, 0FFFFh, 13B2h>
decomposition <1D60Ah, 0FFFFh, 1376h>
decomposition <1D60Bh, 0FFFFh, 13D5h>
decomposition <1D60Ch, 0FFFFh, 13B6h>
decomposition <1D60Dh, 0FFFFh, 13B8h>
decomposition <1D60Eh, 0FFFFh, 16C9h>
decomposition <1D60Fh, 0FFFFh, 138Dh>
decomposition <1D610h, 0FFFFh, 1392h>
decomposition <1D611h, 0FFFFh, 16CBh>
decomposition <1D612h, 0FFFFh, 13B0h>
decomposition <1D613h, 0FFFFh, 1394h>
decomposition <1D614h, 0FFFFh, 13BAh>
decomposition <1D615h, 0FFFFh, 1396h>
decomposition <1D616h, 0FFFFh, 16CDh>
decomposition <1D617h, 0FFFFh, 139Bh>
decomposition <1D618h, 0FFFFh, 139Dh>
decomposition <1D619h, 0FFFFh, 139Fh>
decomposition <1D61Ah, 0FFFFh, 16CFh>
decomposition <1D61Bh, 0FFFFh, 16D1h>
decomposition <1D61Ch, 0FFFFh, 16D3h>
decomposition <1D61Dh, 0FFFFh, 1430h>
decomposition <1D61Eh, 0FFFFh, 16D5h>
decomposition <1D61Fh, 0FFFFh, 1441h>
decomposition <1D620h, 0FFFFh, 16D7h>
decomposition <1D621h, 0FFFFh, 13ABh>
decomposition <1D622h, 0FFFFh, 6>
decomposition <1D623h, 0FFFFh, 16D9h>
decomposition <1D624h, 0FFFFh, 146Ch>
decomposition <1D625h, 0FFFFh, 13D7h>
decomposition <1D626h, 0FFFFh, 13B4h>
decomposition <1D627h, 0FFFFh, 16DBh>
decomposition <1D628h, 0FFFFh, 138Bh>
decomposition <1D629h, 0FFFFh, 493h>
decomposition <1D62Ah, 0FFFFh, 134Fh>
decomposition <1D62Bh, 0FFFFh, 498h>
decomposition <1D62Ch, 0FFFFh, 16DDh>
decomposition <1D62Dh, 0FFFFh, 4C4h>
decomposition <1D62Eh, 0FFFFh, 146Eh>
decomposition <1D62Fh, 0FFFFh, 1369h>
decomposition <1D630h, 0FFFFh, 1Dh>
decomposition <1D631h, 0FFFFh, 16DFh>
decomposition <1D632h, 0FFFFh, 16E1h>
decomposition <1D633h, 0FFFFh, 49Ah>
decomposition <1D634h, 0FFFFh, 2C7h>
decomposition <1D635h, 0FFFFh, 16E3h>
decomposition <1D636h, 0FFFFh, 16E5h>
decomposition <1D637h, 0FFFFh, 1454h>
decomposition <1D638h, 0FFFFh, 4A5h>
decomposition <1D639h, 0FFFFh, 4C6h>
decomposition <1D63Ah, 0FFFFh, 4A7h>
decomposition <1D63Bh, 0FFFFh, 16E7h>
decomposition <1D63Ch, 0FFFFh, 16C7h>
decomposition <1D63Dh, 0FFFFh, 13B2h>
decomposition <1D63Eh, 0FFFFh, 1376h>
decomposition <1D63Fh, 0FFFFh, 13D5h>
decomposition <1D640h, 0FFFFh, 13B6h>
decomposition <1D641h, 0FFFFh, 13B8h>
decomposition <1D642h, 0FFFFh, 16C9h>
decomposition <1D643h, 0FFFFh, 138Dh>
decomposition <1D644h, 0FFFFh, 1392h>
decomposition <1D645h, 0FFFFh, 16CBh>
decomposition <1D646h, 0FFFFh, 13B0h>
decomposition <1D647h, 0FFFFh, 1394h>
decomposition <1D648h, 0FFFFh, 13BAh>
decomposition <1D649h, 0FFFFh, 1396h>
decomposition <1D64Ah, 0FFFFh, 16CDh>
decomposition <1D64Bh, 0FFFFh, 139Bh>
decomposition <1D64Ch, 0FFFFh, 139Dh>
decomposition <1D64Dh, 0FFFFh, 139Fh>
decomposition <1D64Eh, 0FFFFh, 16CFh>
decomposition <1D64Fh, 0FFFFh, 16D1h>
decomposition <1D650h, 0FFFFh, 16D3h>
decomposition <1D651h, 0FFFFh, 1430h>
decomposition <1D652h, 0FFFFh, 16D5h>
decomposition <1D653h, 0FFFFh, 1441h>
decomposition <1D654h, 0FFFFh, 16D7h>
decomposition <1D655h, 0FFFFh, 13ABh>
decomposition <1D656h, 0FFFFh, 6>
decomposition <1D657h, 0FFFFh, 16D9h>
decomposition <1D658h, 0FFFFh, 146Ch>
decomposition <1D659h, 0FFFFh, 13D7h>
decomposition <1D65Ah, 0FFFFh, 13B4h>
decomposition <1D65Bh, 0FFFFh, 16DBh>
decomposition <1D65Ch, 0FFFFh, 138Bh>
decomposition <1D65Dh, 0FFFFh, 493h>
decomposition <1D65Eh, 0FFFFh, 134Fh>
decomposition <1D65Fh, 0FFFFh, 498h>
decomposition <1D660h, 0FFFFh, 16DDh>
decomposition <1D661h, 0FFFFh, 4C4h>
decomposition <1D662h, 0FFFFh, 146Eh>
decomposition <1D663h, 0FFFFh, 1369h>
decomposition <1D664h, 0FFFFh, 1Dh>
decomposition <1D665h, 0FFFFh, 16DFh>
decomposition <1D666h, 0FFFFh, 16E1h>
decomposition <1D667h, 0FFFFh, 49Ah>
decomposition <1D668h, 0FFFFh, 2C7h>
decomposition <1D669h, 0FFFFh, 16E3h>
decomposition <1D66Ah, 0FFFFh, 16E5h>
decomposition <1D66Bh, 0FFFFh, 1454h>
decomposition <1D66Ch, 0FFFFh, 4A5h>
decomposition <1D66Dh, 0FFFFh, 4C6h>
decomposition <1D66Eh, 0FFFFh, 4A7h>
decomposition <1D66Fh, 0FFFFh, 16E7h>
decomposition <1D670h, 0FFFFh, 16C7h>
decomposition <1D671h, 0FFFFh, 13B2h>
decomposition <1D672h, 0FFFFh, 1376h>
decomposition <1D673h, 0FFFFh, 13D5h>
decomposition <1D674h, 0FFFFh, 13B6h>
decomposition <1D675h, 0FFFFh, 13B8h>
decomposition <1D676h, 0FFFFh, 16C9h>
decomposition <1D677h, 0FFFFh, 138Dh>
decomposition <1D678h, 0FFFFh, 1392h>
decomposition <1D679h, 0FFFFh, 16CBh>
decomposition <1D67Ah, 0FFFFh, 13B0h>
decomposition <1D67Bh, 0FFFFh, 1394h>
decomposition <1D67Ch, 0FFFFh, 13BAh>
decomposition <1D67Dh, 0FFFFh, 1396h>
decomposition <1D67Eh, 0FFFFh, 16CDh>
decomposition <1D67Fh, 0FFFFh, 139Bh>
decomposition <1D680h, 0FFFFh, 139Dh>
decomposition <1D681h, 0FFFFh, 139Fh>
decomposition <1D682h, 0FFFFh, 16CFh>
decomposition <1D683h, 0FFFFh, 16D1h>
decomposition <1D684h, 0FFFFh, 16D3h>
decomposition <1D685h, 0FFFFh, 1430h>
decomposition <1D686h, 0FFFFh, 16D5h>
decomposition <1D687h, 0FFFFh, 1441h>
decomposition <1D688h, 0FFFFh, 16D7h>
decomposition <1D689h, 0FFFFh, 13ABh>
decomposition <1D68Ah, 0FFFFh, 6>
decomposition <1D68Bh, 0FFFFh, 16D9h>
decomposition <1D68Ch, 0FFFFh, 146Ch>
decomposition <1D68Dh, 0FFFFh, 13D7h>
decomposition <1D68Eh, 0FFFFh, 13B4h>
decomposition <1D68Fh, 0FFFFh, 16DBh>
decomposition <1D690h, 0FFFFh, 138Bh>
decomposition <1D691h, 0FFFFh, 493h>
decomposition <1D692h, 0FFFFh, 134Fh>
decomposition <1D693h, 0FFFFh, 498h>
decomposition <1D694h, 0FFFFh, 16DDh>
decomposition <1D695h, 0FFFFh, 4C4h>
decomposition <1D696h, 0FFFFh, 146Eh>
decomposition <1D697h, 0FFFFh, 1369h>
decomposition <1D698h, 0FFFFh, 1Dh>
decomposition <1D699h, 0FFFFh, 16DFh>
decomposition <1D69Ah, 0FFFFh, 16E1h>
decomposition <1D69Bh, 0FFFFh, 49Ah>
decomposition <1D69Ch, 0FFFFh, 2C7h>
decomposition <1D69Dh, 0FFFFh, 16E3h>
decomposition <1D69Eh, 0FFFFh, 16E5h>
decomposition <1D69Fh, 0FFFFh, 1454h>
decomposition <1D6A0h, 0FFFFh, 4A5h>
decomposition <1D6A1h, 0FFFFh, 4C6h>
decomposition <1D6A2h, 0FFFFh, 4A7h>
decomposition <1D6A3h, 0FFFFh, 16E7h>
decomposition <1D6A8h, 0FFFFh, 3819h>
decomposition <1D6A9h, 0FFFFh, 381Ch>
decomposition <1D6AAh, 0FFFFh, 13CBh>
decomposition <1D6ABh, 0FFFFh, 381Fh>
decomposition <1D6ACh, 0FFFFh, 3822h>
decomposition <1D6ADh, 0FFFFh, 3825h>
decomposition <1D6AEh, 0FFFFh, 3828h>
decomposition <1D6AFh, 0FFFFh, 57Ah>
decomposition <1D6B0h, 0FFFFh, 382Bh>
decomposition <1D6B1h, 0FFFFh, 382Eh>
decomposition <1D6B2h, 0FFFFh, 3831h>
decomposition <1D6B3h, 0FFFFh, 3834h>
decomposition <1D6B4h, 0FFFFh, 3837h>
decomposition <1D6B5h, 0FFFFh, 383Ah>
decomposition <1D6B6h, 0FFFFh, 383Dh>
decomposition <1D6B7h, 0FFFFh, 13CEh>
decomposition <1D6B8h, 0FFFFh, 3840h>
decomposition <1D6B9h, 0FFFFh, 57Ah>
decomposition <1D6BAh, 0FFFFh, 3843h>
decomposition <1D6BBh, 0FFFFh, 3846h>
decomposition <1D6BCh, 0FFFFh, 55Eh>
decomposition <1D6BDh, 0FFFFh, 3849h>
decomposition <1D6BEh, 0FFFFh, 384Ch>
decomposition <1D6BFh, 0FFFFh, 384Fh>
decomposition <1D6C0h, 0FFFFh, 13ADh>
decomposition <1D6C1h, 0FFFFh, 3852h>
decomposition <1D6C2h, 0FFFFh, 3856h>
decomposition <1D6C3h, 0FFFFh, 558h>
decomposition <1D6C4h, 0FFFFh, 13C8h>
decomposition <1D6C5h, 0FFFFh, 3859h>
decomposition <1D6C6h, 0FFFFh, 57Dh>
decomposition <1D6C7h, 0FFFFh, 385Ch>
decomposition <1D6C8h, 0FFFFh, 385Fh>
decomposition <1D6C9h, 0FFFFh, 55Bh>
decomposition <1D6CAh, 0FFFFh, 11C4h>
decomposition <1D6CBh, 0FFFFh, 571h>
decomposition <1D6CCh, 0FFFFh, 3862h>
decomposition <1D6CDh, 0FFFFh, 14h>
decomposition <1D6CEh, 0FFFFh, 3865h>
decomposition <1D6CFh, 0FFFFh, 3868h>
decomposition <1D6D0h, 0FFFFh, 386Bh>
decomposition <1D6D1h, 0FFFFh, 56Eh>
decomposition <1D6D2h, 0FFFFh, 574h>
decomposition <1D6D3h, 0FFFFh, 577h>
decomposition <1D6D4h, 0FFFFh, 386Eh>
decomposition <1D6D5h, 0FFFFh, 3871h>
decomposition <1D6D6h, 0FFFFh, 3874h>
decomposition <1D6D7h, 0FFFFh, 56Bh>
decomposition <1D6D8h, 0FFFFh, 3877h>
decomposition <1D6D9h, 0FFFFh, 387Ah>
decomposition <1D6DAh, 0FFFFh, 387Dh>
decomposition <1D6DBh, 0FFFFh, 3880h>
decomposition <1D6DCh, 0FFFFh, 57Dh>
decomposition <1D6DDh, 0FFFFh, 55Bh>
decomposition <1D6DEh, 0FFFFh, 571h>
decomposition <1D6DFh, 0FFFFh, 56Bh>
decomposition <1D6E0h, 0FFFFh, 574h>
decomposition <1D6E1h, 0FFFFh, 56Eh>
decomposition <1D6E2h, 0FFFFh, 3819h>
decomposition <1D6E3h, 0FFFFh, 381Ch>
decomposition <1D6E4h, 0FFFFh, 13CBh>
decomposition <1D6E5h, 0FFFFh, 381Fh>
decomposition <1D6E6h, 0FFFFh, 3822h>
decomposition <1D6E7h, 0FFFFh, 3825h>
decomposition <1D6E8h, 0FFFFh, 3828h>
decomposition <1D6E9h, 0FFFFh, 57Ah>
decomposition <1D6EAh, 0FFFFh, 382Bh>
decomposition <1D6EBh, 0FFFFh, 382Eh>
decomposition <1D6ECh, 0FFFFh, 3831h>
decomposition <1D6EDh, 0FFFFh, 3834h>
decomposition <1D6EEh, 0FFFFh, 3837h>
decomposition <1D6EFh, 0FFFFh, 383Ah>
decomposition <1D6F0h, 0FFFFh, 383Dh>
decomposition <1D6F1h, 0FFFFh, 13CEh>
decomposition <1D6F2h, 0FFFFh, 3840h>
decomposition <1D6F3h, 0FFFFh, 57Ah>
decomposition <1D6F4h, 0FFFFh, 3843h>
decomposition <1D6F5h, 0FFFFh, 3846h>
decomposition <1D6F6h, 0FFFFh, 55Eh>
decomposition <1D6F7h, 0FFFFh, 3849h>
decomposition <1D6F8h, 0FFFFh, 384Ch>
decomposition <1D6F9h, 0FFFFh, 384Fh>
decomposition <1D6FAh, 0FFFFh, 13ADh>
decomposition <1D6FBh, 0FFFFh, 3852h>
decomposition <1D6FCh, 0FFFFh, 3856h>
decomposition <1D6FDh, 0FFFFh, 558h>
decomposition <1D6FEh, 0FFFFh, 13C8h>
decomposition <1D6FFh, 0FFFFh, 3859h>
decomposition <1D700h, 0FFFFh, 57Dh>
decomposition <1D701h, 0FFFFh, 385Ch>
decomposition <1D702h, 0FFFFh, 385Fh>
decomposition <1D703h, 0FFFFh, 55Bh>
decomposition <1D704h, 0FFFFh, 11C4h>
decomposition <1D705h, 0FFFFh, 571h>
decomposition <1D706h, 0FFFFh, 3862h>
decomposition <1D707h, 0FFFFh, 14h>
decomposition <1D708h, 0FFFFh, 3865h>
decomposition <1D709h, 0FFFFh, 3868h>
decomposition <1D70Ah, 0FFFFh, 386Bh>
decomposition <1D70Bh, 0FFFFh, 56Eh>
decomposition <1D70Ch, 0FFFFh, 574h>
decomposition <1D70Dh, 0FFFFh, 577h>
decomposition <1D70Eh, 0FFFFh, 386Eh>
decomposition <1D70Fh, 0FFFFh, 3871h>
decomposition <1D710h, 0FFFFh, 3874h>
decomposition <1D711h, 0FFFFh, 56Bh>
decomposition <1D712h, 0FFFFh, 3877h>
decomposition <1D713h, 0FFFFh, 387Ah>
decomposition <1D714h, 0FFFFh, 387Dh>
decomposition <1D715h, 0FFFFh, 3880h>
decomposition <1D716h, 0FFFFh, 57Dh>
decomposition <1D717h, 0FFFFh, 55Bh>
decomposition <1D718h, 0FFFFh, 571h>
decomposition <1D719h, 0FFFFh, 56Bh>
decomposition <1D71Ah, 0FFFFh, 574h>
decomposition <1D71Bh, 0FFFFh, 56Eh>
decomposition <1D71Ch, 0FFFFh, 3819h>
decomposition <1D71Dh, 0FFFFh, 381Ch>
decomposition <1D71Eh, 0FFFFh, 13CBh>
decomposition <1D71Fh, 0FFFFh, 381Fh>
decomposition <1D720h, 0FFFFh, 3822h>
decomposition <1D721h, 0FFFFh, 3825h>
decomposition <1D722h, 0FFFFh, 3828h>
decomposition <1D723h, 0FFFFh, 57Ah>
decomposition <1D724h, 0FFFFh, 382Bh>
decomposition <1D725h, 0FFFFh, 382Eh>
decomposition <1D726h, 0FFFFh, 3831h>
decomposition <1D727h, 0FFFFh, 3834h>
decomposition <1D728h, 0FFFFh, 3837h>
decomposition <1D729h, 0FFFFh, 383Ah>
decomposition <1D72Ah, 0FFFFh, 383Dh>
decomposition <1D72Bh, 0FFFFh, 13CEh>
decomposition <1D72Ch, 0FFFFh, 3840h>
decomposition <1D72Dh, 0FFFFh, 57Ah>
decomposition <1D72Eh, 0FFFFh, 3843h>
decomposition <1D72Fh, 0FFFFh, 3846h>
decomposition <1D730h, 0FFFFh, 55Eh>
decomposition <1D731h, 0FFFFh, 3849h>
decomposition <1D732h, 0FFFFh, 384Ch>
decomposition <1D733h, 0FFFFh, 384Fh>
decomposition <1D734h, 0FFFFh, 13ADh>
decomposition <1D735h, 0FFFFh, 3852h>
decomposition <1D736h, 0FFFFh, 3856h>
decomposition <1D737h, 0FFFFh, 558h>
decomposition <1D738h, 0FFFFh, 13C8h>
decomposition <1D739h, 0FFFFh, 3859h>
decomposition <1D73Ah, 0FFFFh, 57Dh>
decomposition <1D73Bh, 0FFFFh, 385Ch>
decomposition <1D73Ch, 0FFFFh, 385Fh>
decomposition <1D73Dh, 0FFFFh, 55Bh>
decomposition <1D73Eh, 0FFFFh, 11C4h>
decomposition <1D73Fh, 0FFFFh, 571h>
decomposition <1D740h, 0FFFFh, 3862h>
decomposition <1D741h, 0FFFFh, 14h>
decomposition <1D742h, 0FFFFh, 3865h>
decomposition <1D743h, 0FFFFh, 3868h>
decomposition <1D744h, 0FFFFh, 386Bh>
decomposition <1D745h, 0FFFFh, 56Eh>
decomposition <1D746h, 0FFFFh, 574h>
decomposition <1D747h, 0FFFFh, 577h>
decomposition <1D748h, 0FFFFh, 386Eh>
decomposition <1D749h, 0FFFFh, 3871h>
decomposition <1D74Ah, 0FFFFh, 3874h>
decomposition <1D74Bh, 0FFFFh, 56Bh>
decomposition <1D74Ch, 0FFFFh, 3877h>
decomposition <1D74Dh, 0FFFFh, 387Ah>
decomposition <1D74Eh, 0FFFFh, 387Dh>
decomposition <1D74Fh, 0FFFFh, 3880h>
decomposition <1D750h, 0FFFFh, 57Dh>
decomposition <1D751h, 0FFFFh, 55Bh>
decomposition <1D752h, 0FFFFh, 571h>
decomposition <1D753h, 0FFFFh, 56Bh>
decomposition <1D754h, 0FFFFh, 574h>
decomposition <1D755h, 0FFFFh, 56Eh>
decomposition <1D756h, 0FFFFh, 3819h>
decomposition <1D757h, 0FFFFh, 381Ch>
decomposition <1D758h, 0FFFFh, 13CBh>
decomposition <1D759h, 0FFFFh, 381Fh>
decomposition <1D75Ah, 0FFFFh, 3822h>
decomposition <1D75Bh, 0FFFFh, 3825h>
decomposition <1D75Ch, 0FFFFh, 3828h>
decomposition <1D75Dh, 0FFFFh, 57Ah>
decomposition <1D75Eh, 0FFFFh, 382Bh>
decomposition <1D75Fh, 0FFFFh, 382Eh>
decomposition <1D760h, 0FFFFh, 3831h>
decomposition <1D761h, 0FFFFh, 3834h>
decomposition <1D762h, 0FFFFh, 3837h>
decomposition <1D763h, 0FFFFh, 383Ah>
decomposition <1D764h, 0FFFFh, 383Dh>
decomposition <1D765h, 0FFFFh, 13CEh>
decomposition <1D766h, 0FFFFh, 3840h>
decomposition <1D767h, 0FFFFh, 57Ah>
decomposition <1D768h, 0FFFFh, 3843h>
decomposition <1D769h, 0FFFFh, 3846h>
decomposition <1D76Ah, 0FFFFh, 55Eh>
decomposition <1D76Bh, 0FFFFh, 3849h>
decomposition <1D76Ch, 0FFFFh, 384Ch>
decomposition <1D76Dh, 0FFFFh, 384Fh>
decomposition <1D76Eh, 0FFFFh, 13ADh>
decomposition <1D76Fh, 0FFFFh, 3852h>
decomposition <1D770h, 0FFFFh, 3856h>
decomposition <1D771h, 0FFFFh, 558h>
decomposition <1D772h, 0FFFFh, 13C8h>
decomposition <1D773h, 0FFFFh, 3859h>
decomposition <1D774h, 0FFFFh, 57Dh>
decomposition <1D775h, 0FFFFh, 385Ch>
decomposition <1D776h, 0FFFFh, 385Fh>
decomposition <1D777h, 0FFFFh, 55Bh>
decomposition <1D778h, 0FFFFh, 11C4h>
decomposition <1D779h, 0FFFFh, 571h>
decomposition <1D77Ah, 0FFFFh, 3862h>
decomposition <1D77Bh, 0FFFFh, 14h>
decomposition <1D77Ch, 0FFFFh, 3865h>
decomposition <1D77Dh, 0FFFFh, 3868h>
decomposition <1D77Eh, 0FFFFh, 386Bh>
decomposition <1D77Fh, 0FFFFh, 56Eh>
decomposition <1D780h, 0FFFFh, 574h>
decomposition <1D781h, 0FFFFh, 577h>
decomposition <1D782h, 0FFFFh, 386Eh>
decomposition <1D783h, 0FFFFh, 3871h>
decomposition <1D784h, 0FFFFh, 3874h>
decomposition <1D785h, 0FFFFh, 56Bh>
decomposition <1D786h, 0FFFFh, 3877h>
decomposition <1D787h, 0FFFFh, 387Ah>
decomposition <1D788h, 0FFFFh, 387Dh>
decomposition <1D789h, 0FFFFh, 3880h>
decomposition <1D78Ah, 0FFFFh, 57Dh>
decomposition <1D78Bh, 0FFFFh, 55Bh>
decomposition <1D78Ch, 0FFFFh, 571h>
decomposition <1D78Dh, 0FFFFh, 56Bh>
decomposition <1D78Eh, 0FFFFh, 574h>
decomposition <1D78Fh, 0FFFFh, 56Eh>
decomposition <1D790h, 0FFFFh, 3819h>
decomposition <1D791h, 0FFFFh, 381Ch>
decomposition <1D792h, 0FFFFh, 13CBh>
decomposition <1D793h, 0FFFFh, 381Fh>
decomposition <1D794h, 0FFFFh, 3822h>
decomposition <1D795h, 0FFFFh, 3825h>
decomposition <1D796h, 0FFFFh, 3828h>
decomposition <1D797h, 0FFFFh, 57Ah>
decomposition <1D798h, 0FFFFh, 382Bh>
decomposition <1D799h, 0FFFFh, 382Eh>
decomposition <1D79Ah, 0FFFFh, 3831h>
decomposition <1D79Bh, 0FFFFh, 3834h>
decomposition <1D79Ch, 0FFFFh, 3837h>
decomposition <1D79Dh, 0FFFFh, 383Ah>
decomposition <1D79Eh, 0FFFFh, 383Dh>
decomposition <1D79Fh, 0FFFFh, 13CEh>
decomposition <1D7A0h, 0FFFFh, 3840h>
decomposition <1D7A1h, 0FFFFh, 57Ah>
decomposition <1D7A2h, 0FFFFh, 3843h>
decomposition <1D7A3h, 0FFFFh, 3846h>
decomposition <1D7A4h, 0FFFFh, 55Eh>
decomposition <1D7A5h, 0FFFFh, 3849h>
decomposition <1D7A6h, 0FFFFh, 384Ch>
decomposition <1D7A7h, 0FFFFh, 384Fh>
decomposition <1D7A8h, 0FFFFh, 13ADh>
decomposition <1D7A9h, 0FFFFh, 3852h>
decomposition <1D7AAh, 0FFFFh, 3856h>
decomposition <1D7ABh, 0FFFFh, 558h>
decomposition <1D7ACh, 0FFFFh, 13C8h>
decomposition <1D7ADh, 0FFFFh, 3859h>
decomposition <1D7AEh, 0FFFFh, 57Dh>
decomposition <1D7AFh, 0FFFFh, 385Ch>
decomposition <1D7B0h, 0FFFFh, 385Fh>
decomposition <1D7B1h, 0FFFFh, 55Bh>
decomposition <1D7B2h, 0FFFFh, 11C4h>
decomposition <1D7B3h, 0FFFFh, 571h>
decomposition <1D7B4h, 0FFFFh, 3862h>
decomposition <1D7B5h, 0FFFFh, 14h>
decomposition <1D7B6h, 0FFFFh, 3865h>
decomposition <1D7B7h, 0FFFFh, 3868h>
decomposition <1D7B8h, 0FFFFh, 386Bh>
decomposition <1D7B9h, 0FFFFh, 56Eh>
decomposition <1D7BAh, 0FFFFh, 574h>
decomposition <1D7BBh, 0FFFFh, 577h>
decomposition <1D7BCh, 0FFFFh, 386Eh>
decomposition <1D7BDh, 0FFFFh, 3871h>
decomposition <1D7BEh, 0FFFFh, 3874h>
decomposition <1D7BFh, 0FFFFh, 56Bh>
decomposition <1D7C0h, 0FFFFh, 3877h>
decomposition <1D7C1h, 0FFFFh, 387Ah>
decomposition <1D7C2h, 0FFFFh, 387Dh>
decomposition <1D7C3h, 0FFFFh, 3880h>
decomposition <1D7C4h, 0FFFFh, 57Dh>
decomposition <1D7C5h, 0FFFFh, 55Bh>
decomposition <1D7C6h, 0FFFFh, 571h>
decomposition <1D7C7h, 0FFFFh, 56Bh>
decomposition <1D7C8h, 0FFFFh, 574h>
decomposition <1D7C9h, 0FFFFh, 56Eh>
decomposition <1D7CEh, 0FFFFh, 134Dh>
decomposition <1D7CFh, 0FFFFh, 1Bh>
decomposition <1D7D0h, 0FFFFh, 0Ch>
decomposition <1D7D1h, 0FFFFh, 0Eh>
decomposition <1D7D2h, 0FFFFh, 1351h>
decomposition <1D7D3h, 0FFFFh, 1353h>
decomposition <1D7D4h, 0FFFFh, 1355h>
decomposition <1D7D5h, 0FFFFh, 1357h>
decomposition <1D7D6h, 0FFFFh, 1359h>
decomposition <1D7D7h, 0FFFFh, 135Bh>
decomposition <1D7D8h, 0FFFFh, 134Dh>
decomposition <1D7D9h, 0FFFFh, 1Bh>
decomposition <1D7DAh, 0FFFFh, 0Ch>
decomposition <1D7DBh, 0FFFFh, 0Eh>
decomposition <1D7DCh, 0FFFFh, 1351h>
decomposition <1D7DDh, 0FFFFh, 1353h>
decomposition <1D7DEh, 0FFFFh, 1355h>
decomposition <1D7DFh, 0FFFFh, 1357h>
decomposition <1D7E0h, 0FFFFh, 1359h>
decomposition <1D7E1h, 0FFFFh, 135Bh>
decomposition <1D7E2h, 0FFFFh, 134Dh>
decomposition <1D7E3h, 0FFFFh, 1Bh>
decomposition <1D7E4h, 0FFFFh, 0Ch>
decomposition <1D7E5h, 0FFFFh, 0Eh>
decomposition <1D7E6h, 0FFFFh, 1351h>
decomposition <1D7E7h, 0FFFFh, 1353h>
decomposition <1D7E8h, 0FFFFh, 1355h>
decomposition <1D7E9h, 0FFFFh, 1357h>
decomposition <1D7EAh, 0FFFFh, 1359h>
decomposition <1D7EBh, 0FFFFh, 135Bh>
decomposition <1D7ECh, 0FFFFh, 134Dh>
decomposition <1D7EDh, 0FFFFh, 1Bh>
decomposition <1D7EEh, 0FFFFh, 0Ch>
decomposition <1D7EFh, 0FFFFh, 0Eh>
decomposition <1D7F0h, 0FFFFh, 1351h>
decomposition <1D7F1h, 0FFFFh, 1353h>
decomposition <1D7F2h, 0FFFFh, 1355h>
decomposition <1D7F3h, 0FFFFh, 1357h>
decomposition <1D7F4h, 0FFFFh, 1359h>
decomposition <1D7F5h, 0FFFFh, 135Bh>
decomposition <1D7F6h, 0FFFFh, 134Dh>
decomposition <1D7F7h, 0FFFFh, 1Bh>
decomposition <1D7F8h, 0FFFFh, 0Ch>
decomposition <1D7F9h, 0FFFFh, 0Eh>
decomposition <1D7FAh, 0FFFFh, 1351h>
decomposition <1D7FBh, 0FFFFh, 1353h>
decomposition <1D7FCh, 0FFFFh, 1355h>
decomposition <1D7FDh, 0FFFFh, 1357h>
decomposition <1D7FEh, 0FFFFh, 1359h>
decomposition <1D7FFh, 0FFFFh, 135Bh>
decomposition <2F800h, 3884h, 0FFFFh>
decomposition <2F801h, 3888h, 0FFFFh>
decomposition <2F802h, 388Ch, 0FFFFh>
decomposition <2F803h, 3890h, 0FFFFh>
decomposition <2F804h, 3895h, 0FFFFh>
decomposition <2F805h, 2D19h, 0FFFFh>
decomposition <2F806h, 3899h, 0FFFFh>
decomposition <2F807h, 389Dh, 0FFFFh>
decomposition <2F808h, 38A1h, 0FFFFh>
decomposition <2F809h, 38A5h, 0FFFFh>
decomposition <2F80Ah, 2D1Dh, 0FFFFh>
decomposition <2F80Bh, 38A9h, 0FFFFh>
decomposition <2F80Ch, 38ADh, 0FFFFh>
decomposition <2F80Dh, 38B1h, 0FFFFh>
decomposition <2F80Eh, 2D21h, 0FFFFh>
decomposition <2F80Fh, 38B6h, 0FFFFh>
decomposition <2F810h, 38BAh, 0FFFFh>
decomposition <2F811h, 38BEh, 0FFFFh>
decomposition <2F812h, 38C2h, 0FFFFh>
decomposition <2F813h, 38C7h, 0FFFFh>
decomposition <2F814h, 38CBh, 0FFFFh>
decomposition <2F815h, 38CFh, 0FFFFh>
decomposition <2F816h, 38D3h, 0FFFFh>
decomposition <2F817h, 38D8h, 0FFFFh>
decomposition <2F818h, 38DCh, 0FFFFh>
decomposition <2F819h, 38E0h, 0FFFFh>
decomposition <2F81Ah, 38E4h, 0FFFFh>
decomposition <2F81Bh, 38E8h, 0FFFFh>
decomposition <2F81Ch, 38ECh, 0FFFFh>
decomposition <2F81Dh, 174Fh, 0FFFFh>
decomposition <2F81Eh, 38F1h, 0FFFFh>
decomposition <2F81Fh, 38F5h, 0FFFFh>
decomposition <2F820h, 38F9h, 0FFFFh>
decomposition <2F821h, 38FDh, 0FFFFh>
decomposition <2F822h, 3901h, 0FFFFh>
decomposition <2F823h, 3905h, 0FFFFh>
decomposition <2F824h, 3909h, 0FFFFh>
decomposition <2F825h, 390Dh, 0FFFFh>
decomposition <2F826h, 2D25h, 0FFFFh>
decomposition <2F827h, 2D29h, 0FFFFh>
decomposition <2F828h, 3911h, 0FFFFh>
decomposition <2F829h, 3915h, 0FFFFh>
decomposition <2F82Ah, 3919h, 0FFFFh>
decomposition <2F82Bh, 2A55h, 0FFFFh>
decomposition <2F82Ch, 391Dh, 0FFFFh>
decomposition <2F82Dh, 2D2Dh, 0FFFFh>
decomposition <2F82Eh, 3921h, 0FFFFh>
decomposition <2F82Fh, 3925h, 0FFFFh>
decomposition <2F830h, 3929h, 0FFFFh>
decomposition <2F831h, 392Dh, 0FFFFh>
decomposition <2F832h, 392Dh, 0FFFFh>
decomposition <2F833h, 392Dh, 0FFFFh>
decomposition <2F834h, 3931h, 0FFFFh>
decomposition <2F835h, 3936h, 0FFFFh>
decomposition <2F836h, 393Ah, 0FFFFh>
decomposition <2F837h, 393Eh, 0FFFFh>
decomposition <2F838h, 3942h, 0FFFFh>
decomposition <2F839h, 3947h, 0FFFFh>
decomposition <2F83Ah, 394Bh, 0FFFFh>
decomposition <2F83Bh, 394Fh, 0FFFFh>
decomposition <2F83Ch, 3953h, 0FFFFh>
decomposition <2F83Dh, 3957h, 0FFFFh>
decomposition <2F83Eh, 395Bh, 0FFFFh>
decomposition <2F83Fh, 395Fh, 0FFFFh>
decomposition <2F840h, 3963h, 0FFFFh>
decomposition <2F841h, 3967h, 0FFFFh>
decomposition <2F842h, 396Bh, 0FFFFh>
decomposition <2F843h, 396Fh, 0FFFFh>
decomposition <2F844h, 3973h, 0FFFFh>
decomposition <2F845h, 3977h, 0FFFFh>
decomposition <2F846h, 3977h, 0FFFFh>
decomposition <2F847h, 397Bh, 0FFFFh>
decomposition <2F848h, 397Fh, 0FFFFh>
decomposition <2F849h, 3983h, 0FFFFh>
decomposition <2F84Ah, 3987h, 0FFFFh>
decomposition <2F84Bh, 398Bh, 0FFFFh>
decomposition <2F84Ch, 2D35h, 0FFFFh>
decomposition <2F84Dh, 398Fh, 0FFFFh>
decomposition <2F84Eh, 3993h, 0FFFFh>
decomposition <2F84Fh, 3997h, 0FFFFh>
decomposition <2F850h, 2C9Dh, 0FFFFh>
decomposition <2F851h, 399Bh, 0FFFFh>
decomposition <2F852h, 399Fh, 0FFFFh>
decomposition <2F853h, 39A3h, 0FFFFh>
decomposition <2F854h, 39A7h, 0FFFFh>
decomposition <2F855h, 39ABh, 0FFFFh>
decomposition <2F856h, 39AFh, 0FFFFh>
decomposition <2F857h, 39B3h, 0FFFFh>
decomposition <2F858h, 39B7h, 0FFFFh>
decomposition <2F859h, 39BBh, 0FFFFh>
decomposition <2F85Ah, 39C0h, 0FFFFh>
decomposition <2F85Bh, 39C4h, 0FFFFh>
decomposition <2F85Ch, 39C8h, 0FFFFh>
decomposition <2F85Dh, 39CCh, 0FFFFh>
decomposition <2F85Eh, 39D0h, 0FFFFh>
decomposition <2F85Fh, 39D4h, 0FFFFh>
decomposition <2F860h, 39D8h, 0FFFFh>
decomposition <2F861h, 39DDh, 0FFFFh>
decomposition <2F862h, 39E2h, 0FFFFh>
decomposition <2F863h, 39E6h, 0FFFFh>
decomposition <2F864h, 39EAh, 0FFFFh>
decomposition <2F865h, 39EEh, 0FFFFh>
decomposition <2F866h, 39F2h, 0FFFFh>
decomposition <2F867h, 39F6h, 0FFFFh>
decomposition <2F868h, 39FAh, 0FFFFh>
decomposition <2F869h, 39FFh, 0FFFFh>
decomposition <2F86Ah, 3A03h, 0FFFFh>
decomposition <2F86Bh, 3A03h, 0FFFFh>
decomposition <2F86Ch, 3A07h, 0FFFFh>
decomposition <2F86Dh, 3A0Ch, 0FFFFh>
decomposition <2F86Eh, 3A10h, 0FFFFh>
decomposition <2F86Fh, 2A45h, 0FFFFh>
decomposition <2F870h, 3A14h, 0FFFFh>
decomposition <2F871h, 3A18h, 0FFFFh>
decomposition <2F872h, 3A1Dh, 0FFFFh>
decomposition <2F873h, 3A21h, 0FFFFh>
decomposition <2F874h, 3A25h, 0FFFFh>
decomposition <2F875h, 17B7h, 0FFFFh>
decomposition <2F876h, 3A29h, 0FFFFh>
decomposition <2F877h, 3A2Dh, 0FFFFh>
decomposition <2F878h, 17BFh, 0FFFFh>
decomposition <2F879h, 3A31h, 0FFFFh>
decomposition <2F87Ah, 3A35h, 0FFFFh>
decomposition <2F87Bh, 3A39h, 0FFFFh>
decomposition <2F87Ch, 3A3Eh, 0FFFFh>
decomposition <2F87Dh, 3A42h, 0FFFFh>
decomposition <2F87Eh, 3A47h, 0FFFFh>
decomposition <2F87Fh, 3A4Bh, 0FFFFh>
decomposition <2F880h, 3A4Fh, 0FFFFh>
decomposition <2F881h, 3A53h, 0FFFFh>
decomposition <2F882h, 3A57h, 0FFFFh>
decomposition <2F883h, 3A5Bh, 0FFFFh>
decomposition <2F884h, 3A5Fh, 0FFFFh>
decomposition <2F885h, 3A63h, 0FFFFh>
decomposition <2F886h, 3A67h, 0FFFFh>
decomposition <2F887h, 3A6Bh, 0FFFFh>
decomposition <2F888h, 3A6Fh, 0FFFFh>
decomposition <2F889h, 3A73h, 0FFFFh>
decomposition <2F88Ah, 3A78h, 0FFFFh>
decomposition <2F88Bh, 3A7Ch, 0FFFFh>
decomposition <2F88Ch, 3A80h, 0FFFFh>
decomposition <2F88Dh, 3A84h, 0FFFFh>
decomposition <2F88Eh, 2975h, 0FFFFh>
decomposition <2F88Fh, 3A88h, 0FFFFh>
decomposition <2F890h, 17E7h, 0FFFFh>
decomposition <2F891h, 3A8Dh, 0FFFFh>
decomposition <2F892h, 3A8Dh, 0FFFFh>
decomposition <2F893h, 3A92h, 0FFFFh>
decomposition <2F894h, 3A96h, 0FFFFh>
decomposition <2F895h, 3A96h, 0FFFFh>
decomposition <2F896h, 3A9Ah, 0FFFFh>
decomposition <2F897h, 3A9Eh, 0FFFFh>
decomposition <2F898h, 3AA3h, 0FFFFh>
decomposition <2F899h, 3AA8h, 0FFFFh>
decomposition <2F89Ah, 3AACh, 0FFFFh>
decomposition <2F89Bh, 3AB0h, 0FFFFh>
decomposition <2F89Ch, 3AB4h, 0FFFFh>
decomposition <2F89Dh, 3AB8h, 0FFFFh>
decomposition <2F89Eh, 3ABCh, 0FFFFh>
decomposition <2F89Fh, 3AC0h, 0FFFFh>
decomposition <2F8A0h, 3AC4h, 0FFFFh>
decomposition <2F8A1h, 3AC8h, 0FFFFh>
decomposition <2F8A2h, 3ACCh, 0FFFFh>
decomposition <2F8A3h, 2D49h, 0FFFFh>
decomposition <2F8A4h, 3AD0h, 0FFFFh>
decomposition <2F8A5h, 3AD5h, 0FFFFh>
decomposition <2F8A6h, 3AD9h, 0FFFFh>
decomposition <2F8A7h, 3ADDh, 0FFFFh>
decomposition <2F8A8h, 3AE1h, 0FFFFh>
decomposition <2F8A9h, 3ADDh, 0FFFFh>
decomposition <2F8AAh, 3AE5h, 0FFFFh>
decomposition <2F8ABh, 2D51h, 0FFFFh>
decomposition <2F8ACh, 3AE9h, 0FFFFh>
decomposition <2F8ADh, 3AEDh, 0FFFFh>
decomposition <2F8AEh, 3AF1h, 0FFFFh>
decomposition <2F8AFh, 3AF5h, 0FFFFh>
decomposition <2F8B0h, 2D55h, 0FFFFh>
decomposition <2F8B1h, 2909h, 0FFFFh>
decomposition <2F8B2h, 3AF9h, 0FFFFh>
decomposition <2F8B3h, 3AFDh, 0FFFFh>
decomposition <2F8B4h, 3B01h, 0FFFFh>
decomposition <2F8B5h, 3B05h, 0FFFFh>
decomposition <2F8B6h, 3B09h, 0FFFFh>
decomposition <2F8B7h, 3B0Dh, 0FFFFh>
decomposition <2F8B8h, 3B11h, 0FFFFh>
decomposition <2F8B9h, 3B16h, 0FFFFh>
decomposition <2F8BAh, 3B1Ah, 0FFFFh>
decomposition <2F8BBh, 3B1Eh, 0FFFFh>
decomposition <2F8BCh, 3B22h, 0FFFFh>
decomposition <2F8BDh, 3B26h, 0FFFFh>
decomposition <2F8BEh, 3B2Ah, 0FFFFh>
decomposition <2F8BFh, 3B2Fh, 0FFFFh>
decomposition <2F8C0h, 3B33h, 0FFFFh>
decomposition <2F8C1h, 3B37h, 0FFFFh>
decomposition <2F8C2h, 3B3Bh, 0FFFFh>
decomposition <2F8C3h, 3B3Fh, 0FFFFh>
decomposition <2F8C4h, 3B43h, 0FFFFh>
decomposition <2F8C5h, 3B47h, 0FFFFh>
decomposition <2F8C6h, 3B4Bh, 0FFFFh>
decomposition <2F8C7h, 3B4Fh, 0FFFFh>
decomposition <2F8C8h, 2D59h, 0FFFFh>
decomposition <2F8C9h, 3B53h, 0FFFFh>
decomposition <2F8CAh, 3B57h, 0FFFFh>
decomposition <2F8CBh, 3B5Ch, 0FFFFh>
decomposition <2F8CCh, 3B60h, 0FFFFh>
decomposition <2F8CDh, 3B64h, 0FFFFh>
decomposition <2F8CEh, 3B68h, 0FFFFh>
decomposition <2F8CFh, 2D61h, 0FFFFh>
decomposition <2F8D0h, 3B6Ch, 0FFFFh>
decomposition <2F8D1h, 3B70h, 0FFFFh>
decomposition <2F8D2h, 3B74h, 0FFFFh>
decomposition <2F8D3h, 3B78h, 0FFFFh>
decomposition <2F8D4h, 3B7Ch, 0FFFFh>
decomposition <2F8D5h, 3B80h, 0FFFFh>
decomposition <2F8D6h, 3B84h, 0FFFFh>
decomposition <2F8D7h, 3B88h, 0FFFFh>
decomposition <2F8D8h, 2979h, 0FFFFh>
decomposition <2F8D9h, 3B8Ch, 0FFFFh>
decomposition <2F8DAh, 3B90h, 0FFFFh>
decomposition <2F8DBh, 3B94h, 0FFFFh>
decomposition <2F8DCh, 3B98h, 0FFFFh>
decomposition <2F8DDh, 3B9Ch, 0FFFFh>
decomposition <2F8DEh, 3BA1h, 0FFFFh>
decomposition <2F8DFh, 3BA5h, 0FFFFh>
decomposition <2F8E0h, 3BA9h, 0FFFFh>
decomposition <2F8E1h, 3BADh, 0FFFFh>
decomposition <2F8E2h, 2D65h, 0FFFFh>
decomposition <2F8E3h, 3BB1h, 0FFFFh>
decomposition <2F8E4h, 3BB6h, 0FFFFh>
decomposition <2F8E5h, 3BBAh, 0FFFFh>
decomposition <2F8E6h, 3BBEh, 0FFFFh>
decomposition <2F8E7h, 3BC2h, 0FFFFh>
decomposition <2F8E8h, 3BC6h, 0FFFFh>
decomposition <2F8E9h, 3BCAh, 0FFFFh>
decomposition <2F8EAh, 3BCEh, 0FFFFh>
decomposition <2F8EBh, 3BD2h, 0FFFFh>
decomposition <2F8ECh, 3BD6h, 0FFFFh>
decomposition <2F8EDh, 3BDBh, 0FFFFh>
decomposition <2F8EEh, 3BDFh, 0FFFFh>
decomposition <2F8EFh, 3BE3h, 0FFFFh>
decomposition <2F8F0h, 3BE7h, 0FFFFh>
decomposition <2F8F1h, 3BECh, 0FFFFh>
decomposition <2F8F2h, 3BF0h, 0FFFFh>
decomposition <2F8F3h, 3BF4h, 0FFFFh>
decomposition <2F8F4h, 3BF8h, 0FFFFh>
decomposition <2F8F5h, 2A89h, 0FFFFh>
decomposition <2F8F6h, 3BFCh, 0FFFFh>
decomposition <2F8F7h, 3C00h, 0FFFFh>
decomposition <2F8F8h, 3C05h, 0FFFFh>
decomposition <2F8F9h, 3C0Ah, 0FFFFh>
decomposition <2F8FAh, 3C0Fh, 0FFFFh>
decomposition <2F8FBh, 3C13h, 0FFFFh>
decomposition <2F8FCh, 3C18h, 0FFFFh>
decomposition <2F8FDh, 3C1Ch, 0FFFFh>
decomposition <2F8FEh, 3C20h, 0FFFFh>
decomposition <2F8FFh, 3C24h, 0FFFFh>
decomposition <2F900h, 3C28h, 0FFFFh>
decomposition <2F901h, 2D69h, 0FFFFh>
decomposition <2F902h, 2BD5h, 0FFFFh>
decomposition <2F903h, 3C2Ch, 0FFFFh>
decomposition <2F904h, 3C30h, 0FFFFh>
decomposition <2F905h, 3C34h, 0FFFFh>
decomposition <2F906h, 3C38h, 0FFFFh>
decomposition <2F907h, 3C3Dh, 0FFFFh>
decomposition <2F908h, 3C41h, 0FFFFh>
decomposition <2F909h, 3C45h, 0FFFFh>
decomposition <2F90Ah, 3C49h, 0FFFFh>
decomposition <2F90Bh, 3C4Dh, 0FFFFh>
decomposition <2F90Ch, 3C51h, 0FFFFh>
decomposition <2F90Dh, 3C55h, 0FFFFh>
decomposition <2F90Eh, 3C5Ah, 0FFFFh>
decomposition <2F90Fh, 3C5Eh, 0FFFFh>
decomposition <2F910h, 3C62h, 0FFFFh>
decomposition <2F911h, 3C67h, 0FFFFh>
decomposition <2F912h, 3C6Ch, 0FFFFh>
decomposition <2F913h, 3C70h, 0FFFFh>
decomposition <2F914h, 3C74h, 0FFFFh>
decomposition <2F915h, 3C78h, 0FFFFh>
decomposition <2F916h, 3C7Ch, 0FFFFh>
decomposition <2F917h, 3C80h, 0FFFFh>
decomposition <2F918h, 3C84h, 0FFFFh>
decomposition <2F919h, 3C88h, 0FFFFh>
decomposition <2F91Ah, 3C8Ch, 0FFFFh>
decomposition <2F91Bh, 3C90h, 0FFFFh>
decomposition <2F91Ch, 3C95h, 0FFFFh>
decomposition <2F91Dh, 3C99h, 0FFFFh>
decomposition <2F91Eh, 3C9Eh, 0FFFFh>
decomposition <2F91Fh, 3CA2h, 0FFFFh>
decomposition <2F920h, 3CA6h, 0FFFFh>
decomposition <2F921h, 3CAAh, 0FFFFh>
decomposition <2F922h, 3CAEh, 0FFFFh>
decomposition <2F923h, 3CB2h, 0FFFFh>
decomposition <2F924h, 3CB7h, 0FFFFh>
decomposition <2F925h, 3CBBh, 0FFFFh>
decomposition <2F926h, 3CBFh, 0FFFFh>
decomposition <2F927h, 3CC4h, 0FFFFh>
decomposition <2F928h, 3CC9h, 0FFFFh>
decomposition <2F929h, 3CCDh, 0FFFFh>
decomposition <2F92Ah, 3CD1h, 0FFFFh>
decomposition <2F92Bh, 3CD5h, 0FFFFh>
decomposition <2F92Ch, 3CD9h, 0FFFFh>
decomposition <2F92Dh, 3CD9h, 0FFFFh>
decomposition <2F92Eh, 3CDDh, 0FFFFh>
decomposition <2F92Fh, 3CE1h, 0FFFFh>
decomposition <2F930h, 3CE5h, 0FFFFh>
decomposition <2F931h, 3CE9h, 0FFFFh>
decomposition <2F932h, 3CEDh, 0FFFFh>
decomposition <2F933h, 3CF1h, 0FFFFh>
decomposition <2F934h, 3CF5h, 0FFFFh>
decomposition <2F935h, 3CF9h, 0FFFFh>
decomposition <2F936h, 3CFEh, 0FFFFh>
decomposition <2F937h, 3D02h, 0FFFFh>
decomposition <2F938h, 2A51h, 0FFFFh>
decomposition <2F939h, 3D07h, 0FFFFh>
decomposition <2F93Ah, 3D0Ch, 0FFFFh>
decomposition <2F93Bh, 3D10h, 0FFFFh>
decomposition <2F93Ch, 3D15h, 0FFFFh>
decomposition <2F93Dh, 3D1Ah, 0FFFFh>
decomposition <2F93Eh, 3D1Fh, 0FFFFh>
decomposition <2F93Fh, 3D23h, 0FFFFh>
decomposition <2F940h, 3D27h, 0FFFFh>
decomposition <2F941h, 3D2Bh, 0FFFFh>
decomposition <2F942h, 3D30h, 0FFFFh>
decomposition <2F943h, 3D35h, 0FFFFh>
decomposition <2F944h, 3D3Ah, 0FFFFh>
decomposition <2F945h, 3D3Fh, 0FFFFh>
decomposition <2F946h, 3D43h, 0FFFFh>
decomposition <2F947h, 3D43h, 0FFFFh>
decomposition <2F948h, 3D47h, 0FFFFh>
decomposition <2F949h, 3D4Bh, 0FFFFh>
decomposition <2F94Ah, 3D4Fh, 0FFFFh>
decomposition <2F94Bh, 3D53h, 0FFFFh>
decomposition <2F94Ch, 3D57h, 0FFFFh>
decomposition <2F94Dh, 3D5Bh, 0FFFFh>
decomposition <2F94Eh, 3D60h, 0FFFFh>
decomposition <2F94Fh, 29BDh, 0FFFFh>
decomposition <2F950h, 3D64h, 0FFFFh>
decomposition <2F951h, 3D68h, 0FFFFh>
decomposition <2F952h, 3D6Ch, 0FFFFh>
decomposition <2F953h, 2D91h, 0FFFFh>
decomposition <2F954h, 3D71h, 0FFFFh>
decomposition <2F955h, 3D76h, 0FFFFh>
decomposition <2F956h, 2CEDh, 0FFFFh>
decomposition <2F957h, 3D7Bh, 0FFFFh>
decomposition <2F958h, 3D7Fh, 0FFFFh>
decomposition <2F959h, 2D9Dh, 0FFFFh>
decomposition <2F95Ah, 3D83h, 0FFFFh>
decomposition <2F95Bh, 3D87h, 0FFFFh>
decomposition <2F95Ch, 3D8Bh, 0FFFFh>
decomposition <2F95Dh, 3D90h, 0FFFFh>
decomposition <2F95Eh, 3D90h, 0FFFFh>
decomposition <2F95Fh, 3D95h, 0FFFFh>
decomposition <2F960h, 3D99h, 0FFFFh>
decomposition <2F961h, 3D9Dh, 0FFFFh>
decomposition <2F962h, 3DA2h, 0FFFFh>
decomposition <2F963h, 3DA6h, 0FFFFh>
decomposition <2F964h, 3DAAh, 0FFFFh>
decomposition <2F965h, 3DAEh, 0FFFFh>
decomposition <2F966h, 3DB3h, 0FFFFh>
decomposition <2F967h, 3DB7h, 0FFFFh>
decomposition <2F968h, 3DBBh, 0FFFFh>
decomposition <2F969h, 3DBFh, 0FFFFh>
decomposition <2F96Ah, 3DC3h, 0FFFFh>
decomposition <2F96Bh, 3DC7h, 0FFFFh>
decomposition <2F96Ch, 3DCCh, 0FFFFh>
decomposition <2F96Dh, 3DD0h, 0FFFFh>
decomposition <2F96Eh, 3DD4h, 0FFFFh>
decomposition <2F96Fh, 3DD8h, 0FFFFh>
decomposition <2F970h, 3DDCh, 0FFFFh>
decomposition <2F971h, 3DE0h, 0FFFFh>
decomposition <2F972h, 3DE4h, 0FFFFh>
decomposition <2F973h, 3DE9h, 0FFFFh>
decomposition <2F974h, 3DEEh, 0FFFFh>
decomposition <2F975h, 3DF2h, 0FFFFh>
decomposition <2F976h, 3DF7h, 0FFFFh>
decomposition <2F977h, 3DFBh, 0FFFFh>
decomposition <2F978h, 3E00h, 0FFFFh>
decomposition <2F979h, 3E04h, 0FFFFh>
decomposition <2F97Ah, 2DB5h, 0FFFFh>
decomposition <2F97Bh, 3E08h, 0FFFFh>
decomposition <2F97Ch, 3E0Dh, 0FFFFh>
decomposition <2F97Dh, 3E12h, 0FFFFh>
decomposition <2F97Eh, 3E16h, 0FFFFh>
decomposition <2F97Fh, 3E1Bh, 0FFFFh>
decomposition <2F980h, 3E1Fh, 0FFFFh>
decomposition <2F981h, 3E24h, 0FFFFh>
decomposition <2F982h, 3E28h, 0FFFFh>
decomposition <2F983h, 3E2Ch, 0FFFFh>
decomposition <2F984h, 3E30h, 0FFFFh>
decomposition <2F985h, 3E34h, 0FFFFh>
decomposition <2F986h, 3E38h, 0FFFFh>
decomposition <2F987h, 3E3Ch, 0FFFFh>
decomposition <2F988h, 3E41h, 0FFFFh>
decomposition <2F989h, 3E46h, 0FFFFh>
decomposition <2F98Ah, 3E4Bh, 0FFFFh>
decomposition <2F98Bh, 3A92h, 0FFFFh>
align 10h
			
db 32h,	0, 33h,	0, 20h,	0CCh, 81h, 0, 0CEh, 0BCh, 0, 20h
db 0CCh, 0A7h, 0, 31h, 0, 6Fh, 0, 31h, 0E2h, 81h, 84h
db 34h,	0, 31h,	0E2h, 81h, 84h,	32h, 0,	33h, 0E2h, 81h
db 84h,	34h, 0,	41h, 0CCh, 80h,	0, 41h,	0CCh, 81h, 0, 41h
db 0CCh, 82h, 0, 41h, 0CCh, 83h, 0, 41h, 0CCh, 88h, 0
db 41h,	0CCh, 8Ah, 0, 43h, 0CCh, 0A7h, 0, 45h, 0CCh, 80h
db 0, 45h, 0CCh, 81h, 0, 45h, 0CCh, 82h, 0, 45h, 0CCh
db 88h,	0, 49h,	0CCh, 80h, 0, 49h, 0CCh, 81h, 0, 49h, 0CCh
db 82h,	0, 49h,	0CCh, 88h, 0, 4Eh, 0CCh, 83h, 0, 4Fh, 0CCh
db 80h,	0, 4Fh,	0CCh, 81h, 0, 4Fh, 0CCh, 82h, 0, 4Fh, 0CCh
db 83h,	0, 4Fh,	0CCh, 88h, 0, 55h, 0CCh, 80h, 0, 55h, 0CCh
db 81h,	0, 55h,	0CCh, 82h, 0, 55h, 0CCh, 88h, 0, 59h, 0CCh
db 81h,	0, 61h,	0CCh, 80h, 0, 61h, 0CCh, 81h, 0, 61h, 0CCh
db 82h,	0, 61h,	0CCh, 83h, 0, 61h, 0CCh, 88h, 0, 61h, 0CCh
db 8Ah,	0, 63h,	0CCh, 0A7h, 0, 65h, 0CCh, 80h, 0, 65h
db 0CCh, 81h, 0, 65h, 0CCh, 82h, 0, 65h, 0CCh, 88h, 0
db 69h,	0CCh, 80h, 0, 69h, 0CCh, 81h, 0, 69h, 0CCh, 82h
db 0, 69h, 0CCh, 88h, 0, 6Eh, 0CCh, 83h, 0, 6Fh, 0CCh
db 80h,	0, 6Fh,	0CCh, 81h, 0, 6Fh, 0CCh, 82h, 0, 6Fh, 0CCh
db 83h,	0, 6Fh,	0CCh, 88h, 0, 75h, 0CCh, 80h, 0, 75h, 0CCh
db 81h,	0, 75h,	0CCh, 82h, 0, 75h, 0CCh, 88h, 0, 79h, 0CCh
db 81h,	0, 79h,	0CCh, 88h, 0, 41h, 0CCh, 84h, 0, 61h, 0CCh
db 84h,	0, 41h,	0CCh, 86h, 0, 61h, 0CCh, 86h, 0, 41h, 0CCh
db 0A8h, 0, 61h, 0CCh, 0A8h, 0,	43h, 0CCh, 81h,	0, 63h
db 0CCh, 81h, 0, 43h, 0CCh, 82h, 0, 63h, 0CCh, 82h, 0
db 43h,	0CCh, 87h, 0, 63h, 0CCh, 87h, 0, 43h, 0CCh, 8Ch
db 0, 63h, 0CCh, 8Ch, 0, 44h, 0CCh, 8Ch, 0, 64h, 0CCh
db 8Ch,	0, 45h,	0CCh, 84h, 0, 65h, 0CCh, 84h, 0, 45h, 0CCh
db 86h,	0, 65h,	0CCh, 86h, 0, 45h, 0CCh, 87h, 0, 65h, 0CCh
db 87h,	0, 45h,	0CCh, 0A8h, 0, 65h, 0CCh, 0A8h,	0, 45h
db 0CCh, 8Ch, 0, 65h, 0CCh, 8Ch, 0, 47h, 0CCh, 82h, 0
db 67h,	0CCh, 82h, 0, 47h, 0CCh, 86h, 0, 67h, 0CCh, 86h
db 0, 47h, 0CCh, 87h, 0, 67h, 0CCh, 87h, 0, 47h, 0CCh
db 0A7h, 0, 67h, 0CCh, 0A7h, 0,	48h, 0CCh, 82h,	0, 68h
db 0CCh, 82h, 0, 49h, 0CCh, 83h, 0, 69h, 0CCh, 83h, 0
db 49h,	0CCh, 84h, 0, 69h, 0CCh, 84h, 0, 49h, 0CCh, 86h
db 0, 69h, 0CCh, 86h, 0, 49h, 0CCh, 0A8h, 0, 69h, 0CCh
db 0A8h, 0, 49h, 0CCh, 87h, 0, 49h, 4Ah, 0, 69h, 6Ah, 0
db 4Ah,	0CCh, 82h, 0, 6Ah, 0CCh, 82h, 0, 4Bh, 0CCh, 0A7h
db 0, 6Bh, 0CCh, 0A7h, 0, 4Ch, 0CCh, 81h, 0, 6Ch, 0CCh
db 81h,	0, 4Ch,	0CCh, 0A7h, 0, 6Ch, 0CCh, 0A7h,	0, 4Ch
db 0CCh, 8Ch, 0, 6Ch, 0CCh, 8Ch, 0, 4Ch, 0C2h, 0B7h, 0
db 6Ch,	0C2h, 0B7h, 0, 4Eh, 0CCh, 81h, 0, 6Eh, 0CCh, 81h
db 0, 4Eh, 0CCh, 0A7h, 0, 6Eh, 0CCh, 0A7h, 0, 4Eh, 0CCh
db 8Ch,	0, 6Eh,	0CCh, 8Ch, 0, 0CAh, 0BCh, 6Eh, 0, 4Fh
db 0CCh, 84h, 0, 6Fh, 0CCh, 84h, 0, 4Fh, 0CCh, 86h, 0
db 6Fh,	0CCh, 86h, 0, 4Fh, 0CCh, 8Bh, 0, 6Fh, 0CCh, 8Bh
db 0, 52h, 0CCh, 81h, 0, 72h, 0CCh, 81h, 0, 52h, 0CCh
db 0A7h, 0, 72h, 0CCh, 0A7h, 0,	52h, 0CCh, 8Ch,	0, 72h
db 0CCh, 8Ch, 0, 53h, 0CCh, 81h, 0, 73h, 0CCh, 81h, 0
db 53h,	0CCh, 82h, 0, 73h, 0CCh, 82h, 0, 53h, 0CCh, 0A7h
db 0, 73h, 0CCh, 0A7h, 0, 53h, 0CCh, 8Ch, 0, 73h, 0CCh
db 8Ch,	0, 54h,	0CCh, 0A7h, 0, 74h, 0CCh, 0A7h,	0, 54h
db 0CCh, 8Ch, 0, 74h, 0CCh, 8Ch, 0, 55h, 0CCh, 83h, 0
db 75h,	0CCh, 83h, 0, 55h, 0CCh, 84h, 0, 75h, 0CCh, 84h
db 0, 55h, 0CCh, 86h, 0, 75h, 0CCh, 86h, 0, 55h, 0CCh
db 8Ah,	0, 75h,	0CCh, 8Ah, 0, 55h, 0CCh, 8Bh, 0, 75h, 0CCh
db 8Bh,	0, 55h,	0CCh, 0A8h, 0, 75h, 0CCh, 0A8h,	0, 57h
db 0CCh, 82h, 0, 77h, 0CCh, 82h, 0, 59h, 0CCh, 82h, 0
db 79h,	0CCh, 82h, 0, 59h, 0CCh, 88h, 0, 5Ah, 0CCh, 81h
db 0, 7Ah, 0CCh, 81h, 0, 5Ah, 0CCh, 87h, 0, 7Ah, 0CCh
db 87h,	0, 5Ah,	0CCh, 8Ch, 0, 7Ah, 0CCh, 8Ch, 0, 73h, 0
db 4Fh,	0CCh, 9Bh, 0, 6Fh, 0CCh, 9Bh, 0, 55h, 0CCh, 9Bh
db 0, 75h, 0CCh, 9Bh, 0, 44h, 5Ah, 0CCh, 8Ch, 0, 44h, 7Ah
db 0CCh, 8Ch, 0, 64h, 7Ah, 0CCh, 8Ch, 0, 4Ch, 4Ah, 0, 4Ch
db 6Ah,	0, 6Ch,	6Ah, 0,	4Eh, 4Ah, 0, 4Eh, 6Ah, 0, 6Eh
db 6Ah,	0, 41h,	0CCh, 8Ch, 0, 61h, 0CCh, 8Ch, 0, 49h, 0CCh
db 8Ch,	0, 69h,	0CCh, 8Ch, 0, 4Fh, 0CCh, 8Ch, 0, 6Fh, 0CCh
db 8Ch,	0, 55h,	0CCh, 8Ch, 0, 75h, 0CCh, 8Ch, 0, 55h, 0CCh
db 88h,	0CCh, 84h, 0, 75h, 0CCh, 88h, 0CCh, 84h, 0, 55h
db 0CCh, 88h, 0CCh, 81h, 0, 75h, 0CCh, 88h, 0CCh, 81h
db 0, 55h, 0CCh, 88h, 0CCh, 8Ch, 0, 75h, 0CCh, 88h, 0CCh
db 8Ch,	0, 55h,	0CCh, 88h, 0CCh, 80h, 0, 75h, 0CCh, 88h
db 0CCh, 80h, 0, 41h, 0CCh, 88h, 0CCh, 84h, 0, 61h, 0CCh
db 88h,	0CCh, 84h, 0, 41h, 0CCh, 87h, 0CCh, 84h, 0, 61h
db 0CCh, 87h, 0CCh, 84h, 0, 0C3h, 86h, 0CCh, 84h, 0, 0C3h
db 0A6h, 0CCh, 84h, 0, 47h, 0CCh, 8Ch, 0, 67h, 0CCh, 8Ch
db 0, 4Bh, 0CCh, 8Ch, 0, 6Bh, 0CCh, 8Ch, 0, 4Fh, 0CCh
db 0A8h, 0, 6Fh, 0CCh, 0A8h, 0,	4Fh, 0CCh, 0A8h, 0CCh
db 84h,	0, 6Fh,	0CCh, 0A8h, 0CCh, 84h, 0, 0C6h,	0B7h, 0CCh
db 8Ch,	0, 0CAh, 92h, 0CCh, 8Ch, 0, 6Ah, 0CCh, 8Ch, 0
db 44h,	5Ah, 0,	44h, 7Ah, 0, 64h, 7Ah, 0, 47h, 0CCh, 81h
db 0, 67h, 0CCh, 81h, 0, 4Eh, 0CCh, 80h, 0, 6Eh, 0CCh
db 80h,	0, 41h,	0CCh, 8Ah, 0CCh, 81h, 0, 61h, 0CCh, 8Ah
db 0CCh, 81h, 0, 0C3h, 86h, 0CCh, 81h, 0, 0C3h,	0A6h, 0CCh
db 81h,	0, 0C3h, 98h, 0CCh, 81h, 0, 0C3h, 0B8h,	0CCh, 81h
db 0, 41h, 0CCh, 8Fh, 0, 61h, 0CCh, 8Fh, 0, 41h, 0CCh
db 91h,	0, 61h,	0CCh, 91h, 0, 45h, 0CCh, 8Fh, 0, 65h, 0CCh
db 8Fh,	0, 45h,	0CCh, 91h, 0, 65h, 0CCh, 91h, 0, 49h, 0CCh
db 8Fh,	0, 69h,	0CCh, 8Fh, 0, 49h, 0CCh, 91h, 0, 69h, 0CCh
db 91h,	0, 4Fh,	0CCh, 8Fh, 0, 6Fh, 0CCh, 8Fh, 0, 4Fh, 0CCh
db 91h,	0, 6Fh,	0CCh, 91h, 0, 52h, 0CCh, 8Fh, 0, 72h, 0CCh
db 8Fh,	0, 52h,	0CCh, 91h, 0, 72h, 0CCh, 91h, 0, 55h, 0CCh
db 8Fh,	0, 75h,	0CCh, 8Fh, 0, 55h, 0CCh, 91h, 0, 75h, 0CCh
db 91h,	0, 53h,	0CCh, 0A6h, 0, 73h, 0CCh, 0A6h,	0, 54h
db 0CCh, 0A6h, 0, 74h, 0CCh, 0A6h, 0, 48h, 0CCh, 8Ch, 0
db 68h,	0CCh, 8Ch, 0, 41h, 0CCh, 87h, 0, 61h, 0CCh, 87h
db 0, 45h, 0CCh, 0A7h, 0, 65h, 0CCh, 0A7h, 0, 4Fh, 0CCh
db 88h,	0CCh, 84h, 0, 6Fh, 0CCh, 88h, 0CCh, 84h, 0, 4Fh
db 0CCh, 83h, 0CCh, 84h, 0, 6Fh, 0CCh, 83h, 0CCh, 84h
db 0, 4Fh, 0CCh, 87h, 0, 6Fh, 0CCh, 87h, 0, 4Fh, 0CCh
db 87h,	0CCh, 84h, 0, 6Fh, 0CCh, 87h, 0CCh, 84h, 0, 59h
db 0CCh, 84h, 0, 79h, 0CCh, 84h, 0, 68h, 0, 0C9h, 0A6h
db 0, 6Ah, 0, 72h, 0, 0C9h, 0B9h, 0, 0C9h, 0BBh, 0, 0CAh
db 81h,	0, 77h,	0, 79h,	0, 20h,	0CCh, 86h, 0, 20h, 0CCh
db 87h,	0, 20h,	0CCh, 8Ah, 0, 20h, 0CCh, 0A8h, 0, 20h
db 0CCh, 83h, 0, 20h, 0CCh, 8Bh, 0, 0C9h, 0A3h,	0, 6Ch
db 0, 78h, 0, 0CAh, 95h, 0, 0CCh, 80h, 0, 0CCh,	81h, 0
db 0CCh, 93h, 0, 0CCh, 88h, 0CCh, 81h, 0, 0CAh,	0B9h, 0
db 20h,	0CDh, 85h, 0, 3Bh, 0, 0C2h, 0A8h, 0CCh,	81h, 0
db 20h,	0CCh, 88h, 0CCh, 81h, 0, 0CEh, 91h, 0CCh, 81h
db 0, 0C2h, 0B7h, 0, 0CEh, 95h,	0CCh, 81h, 0, 0CEh, 97h
db 0CCh, 81h, 0, 0CEh, 99h, 0CCh, 81h, 0, 0CEh,	9Fh, 0CCh
db 81h,	0, 0CEh, 0A5h, 0CCh, 81h, 0, 0CEh, 0A9h, 0CCh
db 81h,	0, 0CEh, 0B9h, 0CCh, 88h, 0CCh,	81h, 0,	0CEh, 99h
db 0CCh, 88h, 0, 0CEh, 0A5h, 0CCh, 88h,	0, 0CEh, 0B1h
db 0CCh, 81h, 0, 0CEh, 0B5h, 0CCh, 81h,	0, 0CEh, 0B7h
db 0CCh, 81h, 0, 0CEh, 0B9h, 0CCh, 81h,	0, 0CFh, 85h, 0CCh
db 88h,	0CCh, 81h, 0, 0CEh, 0B9h, 0CCh,	88h, 0,	0CFh, 85h
db 0CCh, 88h, 0, 0CEh, 0BFh, 0CCh, 81h,	0, 0CFh, 85h, 0CCh
db 81h,	0, 0CFh, 89h, 0CCh, 81h, 0, 0CEh, 0B2h,	0, 0CEh
db 0B8h, 0, 0CEh, 0A5h,	0, 0CFh, 92h, 0CCh, 81h, 0, 0CFh
db 92h,	0CCh, 88h, 0, 0CFh, 86h, 0, 0CFh, 80h, 0, 0CEh
db 0BAh, 0, 0CFh, 81h, 0, 0CFh,	82h, 0,	0CEh, 98h, 0, 0CEh
db 0B5h, 0, 0D0h, 95h, 0CCh, 80h, 0, 0D0h, 95h,	0CCh, 88h
db 0, 0D0h, 93h, 0CCh, 81h, 0, 0D0h, 86h, 0CCh,	88h, 0
db 0D0h, 9Ah, 0CCh, 81h, 0, 0D0h, 98h, 0CCh, 80h, 0, 0D0h
db 0A3h, 0CCh, 86h, 0, 0D0h, 98h, 0CCh,	86h, 0,	0D0h, 0B8h
db 0CCh, 86h, 0, 0D0h, 0B5h, 0CCh, 80h,	0, 0D0h, 0B5h
db 0CCh, 88h, 0, 0D0h, 0B3h, 0CCh, 81h,	0, 0D1h, 96h, 0CCh
db 88h,	0, 0D0h, 0BAh, 0CCh, 81h, 0, 0D0h, 0B8h, 0CCh
db 80h,	0, 0D1h, 83h, 0CCh, 86h, 0, 0D1h, 0B4h,	0CCh, 8Fh
db 0, 0D1h, 0B5h, 0CCh,	8Fh, 0,	0D0h, 96h, 0CCh, 86h, 0
db 0D0h, 0B6h, 0CCh, 86h, 0, 0D0h, 90h,	0CCh, 86h, 0, 0D0h
db 0B0h, 0CCh, 86h, 0, 0D0h, 90h, 0CCh,	88h, 0,	0D0h, 0B0h
db 0CCh, 88h, 0, 0D0h, 95h, 0CCh, 86h, 0, 0D0h,	0B5h, 0CCh
db 86h,	0, 0D3h, 98h, 0CCh, 88h, 0, 0D3h, 99h, 0CCh, 88h
db 0, 0D0h, 96h, 0CCh, 88h, 0, 0D0h, 0B6h, 0CCh, 88h, 0
db 0D0h, 97h, 0CCh, 88h, 0, 0D0h, 0B7h,	0CCh, 88h, 0, 0D0h
db 98h,	0CCh, 84h, 0, 0D0h, 0B8h, 0CCh,	84h, 0,	0D0h, 98h
db 0CCh, 88h, 0, 0D0h, 0B8h, 0CCh, 88h,	0, 0D0h, 9Eh, 0CCh
db 88h,	0, 0D0h, 0BEh, 0CCh, 88h, 0, 0D3h, 0A8h, 0CCh
db 88h,	0, 0D3h, 0A9h, 0CCh, 88h, 0, 0D0h, 0ADh, 0CCh
db 88h,	0, 0D1h, 8Dh, 0CCh, 88h, 0, 0D0h, 0A3h,	0CCh, 84h
db 0, 0D1h, 83h, 0CCh, 84h, 0, 0D0h, 0A3h, 0CCh, 88h, 0
db 0D1h, 83h, 0CCh, 88h, 0, 0D0h, 0A3h,	0CCh, 8Bh, 0, 0D1h
db 83h,	0CCh, 8Bh, 0, 0D0h, 0A7h, 0CCh,	88h, 0,	0D1h, 87h
db 0CCh, 88h, 0, 0D0h, 0ABh, 0CCh, 88h,	0, 0D1h, 8Bh, 0CCh
db 88h,	0, 0D5h, 0A5h, 0D6h, 82h, 0, 0D8h, 0A7h, 0D9h
db 93h,	0, 0D8h, 0A7h, 0D9h, 94h, 0, 0D9h, 88h,	0D9h, 94h
db 0, 0D8h, 0A7h, 0D9h,	95h, 0,	0D9h, 8Ah, 0D9h, 94h, 0
db 0D8h, 0A7h, 0D9h, 0B4h, 0, 0D9h, 88h, 0D9h, 0B4h, 0
db 0DBh, 87h, 0D9h, 0B4h, 0, 0D9h, 8Ah,	0D9h, 0B4h, 0
db 0DBh, 95h, 0D9h, 94h, 0, 0DBh, 81h, 0D9h, 94h, 0, 0DBh
db 92h,	0D9h, 94h, 0, 0E0h, 0A4h, 0A8h,	0E0h, 0A4h, 0BCh
db 0, 0E0h, 0A4h, 0B0h,	0E0h, 0A4h, 0BCh, 0, 0E0h, 0A4h
db 0B3h, 0E0h, 0A4h, 0BCh, 0, 0E0h, 0A4h, 95h, 0E0h, 0A4h
db 0BCh, 0, 0E0h, 0A4h,	96h, 0E0h, 0A4h, 0BCh, 0, 0E0h
db 0A4h, 97h, 0E0h, 0A4h, 0BCh,	0, 0E0h, 0A4h, 9Ch, 0E0h
db 0A4h, 0BCh, 0, 0E0h,	0A4h, 0A1h, 0E0h, 0A4h,	0BCh, 0
db 0E0h, 0A4h, 0A2h, 0E0h, 0A4h, 0BCh, 0, 0E0h,	0A4h, 0ABh
db 0E0h, 0A4h, 0BCh, 0,	0E0h, 0A4h, 0AFh, 0E0h,	0A4h, 0BCh
db 0, 0E0h, 0A7h, 87h, 0E0h, 0A6h, 0BEh, 0, 0E0h, 0A7h
db 87h,	0E0h, 0A7h, 97h, 0, 0E0h, 0A6h,	0A1h, 0E0h, 0A6h
db 0BCh, 0, 0E0h, 0A6h,	0A2h, 0E0h, 0A6h, 0BCh,	0, 0E0h
db 0A6h, 0AFh, 0E0h, 0A6h, 0BCh, 0, 0E0h, 0A8h,	0B2h, 0E0h
db 0A8h, 0BCh, 0, 0E0h,	0A8h, 0B8h, 0E0h, 0A8h,	0BCh, 0
db 0E0h, 0A8h, 96h, 0E0h, 0A8h,	0BCh, 0, 0E0h, 0A8h, 97h
db 0E0h, 0A8h, 0BCh, 0,	0E0h, 0A8h, 9Ch, 0E0h, 0A8h, 0BCh
db 0, 0E0h, 0A8h, 0ABh,	0E0h, 0A8h, 0BCh, 0, 0E0h, 0ADh
db 87h,	0E0h, 0ADh, 96h, 0, 0E0h, 0ADh,	87h, 0E0h, 0ACh
db 0BEh, 0, 0E0h, 0ADh,	87h, 0E0h, 0ADh, 97h, 0, 0E0h
db 0ACh, 0A1h, 0E0h, 0ACh, 0BCh, 0, 0E0h, 0ACh,	0A2h, 0E0h
db 0ACh, 0BCh, 0, 0E0h,	0AEh, 92h, 0E0h, 0AFh, 97h, 0
db 0E0h, 0AFh, 86h, 0E0h, 0AEh,	0BEh, 0, 0E0h, 0AFh, 87h
db 0E0h, 0AEh, 0BEh, 0,	0E0h, 0AFh, 86h, 0E0h, 0AFh, 97h
db 0, 0E0h, 0B1h, 86h, 0E0h, 0B1h, 96h,	0, 0E0h, 0B2h
db 0BFh, 0E0h, 0B3h, 95h, 0, 0E0h, 0B3h, 86h, 0E0h, 0B3h
db 95h,	0, 0E0h, 0B3h, 86h, 0E0h, 0B3h,	96h, 0,	0E0h, 0B3h
db 86h,	0E0h, 0B3h, 82h, 0, 0E0h, 0B3h,	86h, 0E0h, 0B3h
db 82h,	0E0h, 0B3h, 95h, 0, 0E0h, 0B5h,	86h, 0E0h, 0B4h
db 0BEh, 0, 0E0h, 0B5h,	87h, 0E0h, 0B4h, 0BEh, 0, 0E0h
db 0B5h, 86h, 0E0h, 0B5h, 97h, 0, 0E0h,	0B7h, 99h, 0E0h
db 0B7h, 8Ah, 0, 0E0h, 0B7h, 99h, 0E0h,	0B7h, 8Fh, 0, 0E0h
db 0B7h, 99h, 0E0h, 0B7h, 8Fh, 0E0h, 0B7h, 8Ah,	0, 0E0h
db 0B7h, 99h, 0E0h, 0B7h, 9Fh, 0, 0E0h,	0B9h, 8Dh, 0E0h
db 0B8h, 0B2h, 0, 0E0h,	0BBh, 8Dh, 0E0h, 0BAh, 0B2h, 0
db 0E0h, 0BAh, 0ABh, 0E0h, 0BAh, 99h, 0, 0E0h, 0BAh, 0ABh
db 0E0h, 0BAh, 0A1h, 0,	0E0h, 0BCh, 8Bh, 0, 0E0h, 0BDh
db 82h,	0E0h, 0BEh, 0B7h, 0, 0E0h, 0BDh, 8Ch, 0E0h, 0BEh
db 0B7h, 0, 0E0h, 0BDh,	91h, 0E0h, 0BEh, 0B7h, 0, 0E0h
db 0BDh, 96h, 0E0h, 0BEh, 0B7h,	0, 0E0h, 0BDh, 9Bh, 0E0h
db 0BEh, 0B7h, 0, 0E0h,	0BDh, 80h, 0E0h, 0BEh, 0B5h, 0
db 0E0h, 0BDh, 0B1h, 0E0h, 0BDh, 0B2h, 0, 0E0h,	0BDh, 0B1h
db 0E0h, 0BDh, 0B4h, 0,	0E0h, 0BEh, 0B2h, 0E0h,	0BEh, 80h
db 0, 0E0h, 0BEh, 0B2h,	0E0h, 0BDh, 0B1h, 0E0h,	0BEh, 80h
db 0, 0E0h, 0BEh, 0B3h,	0E0h, 0BEh, 80h, 0, 0E0h, 0BEh
db 0B3h, 0E0h, 0BDh, 0B1h, 0E0h, 0BEh, 80h, 0, 0E0h, 0BDh
db 0B1h, 0E0h, 0BEh, 80h, 0, 0E0h, 0BEh, 92h, 0E0h, 0BEh
db 0B7h, 0, 0E0h, 0BEh,	9Ch, 0E0h, 0BEh, 0B7h, 0, 0E0h
db 0BEh, 0A1h, 0E0h, 0BEh, 0B7h, 0, 0E0h, 0BEh,	0A6h, 0E0h
db 0BEh, 0B7h, 0, 0E0h,	0BEh, 0ABh, 0E0h, 0BEh,	0B7h, 0
db 0E0h, 0BEh, 90h, 0E0h, 0BEh,	0B5h, 0, 0E1h, 80h, 0A5h
db 0E1h, 80h, 0AEh, 0, 41h, 0CCh, 0A5h,	0, 61h,	0CCh, 0A5h
db 0, 42h, 0CCh, 87h, 0, 62h, 0CCh, 87h, 0, 42h, 0CCh
db 0A3h, 0, 62h, 0CCh, 0A3h, 0,	42h, 0CCh, 0B1h, 0, 62h
db 0CCh, 0B1h, 0, 43h, 0CCh, 0A7h, 0CCh, 81h, 0, 63h, 0CCh
db 0A7h, 0CCh, 81h, 0, 44h, 0CCh, 87h, 0, 64h, 0CCh, 87h
db 0, 44h, 0CCh, 0A3h, 0, 64h, 0CCh, 0A3h, 0, 44h, 0CCh
db 0B1h, 0, 64h, 0CCh, 0B1h, 0,	44h, 0CCh, 0A7h, 0, 64h
db 0CCh, 0A7h, 0, 44h, 0CCh, 0ADh, 0, 64h, 0CCh, 0ADh
db 0, 45h, 0CCh, 84h, 0CCh, 80h, 0, 65h, 0CCh, 84h, 0CCh
db 80h,	0, 45h,	0CCh, 84h, 0CCh, 81h, 0, 65h, 0CCh, 84h
db 0CCh, 81h, 0, 45h, 0CCh, 0ADh, 0, 65h, 0CCh,	0ADh, 0
db 45h,	0CCh, 0B0h, 0, 65h, 0CCh, 0B0h,	0, 45h,	0CCh, 0A7h
db 0CCh, 86h, 0, 65h, 0CCh, 0A7h, 0CCh,	86h, 0,	46h, 0CCh
db 87h,	0, 66h,	0CCh, 87h, 0, 47h, 0CCh, 84h, 0, 67h, 0CCh
db 84h,	0, 48h,	0CCh, 87h, 0, 68h, 0CCh, 87h, 0, 48h, 0CCh
db 0A3h, 0, 68h, 0CCh, 0A3h, 0,	48h, 0CCh, 88h,	0, 68h
db 0CCh, 88h, 0, 48h, 0CCh, 0A7h, 0, 68h, 0CCh,	0A7h, 0
db 48h,	0CCh, 0AEh, 0, 68h, 0CCh, 0AEh,	0, 49h,	0CCh, 0B0h
db 0, 69h, 0CCh, 0B0h, 0, 49h, 0CCh, 88h, 0CCh,	81h, 0
db 69h,	0CCh, 88h, 0CCh, 81h, 0, 4Bh, 0CCh, 81h, 0, 6Bh
db 0CCh, 81h, 0, 4Bh, 0CCh, 0A3h, 0, 6Bh, 0CCh,	0A3h, 0
db 4Bh,	0CCh, 0B1h, 0, 6Bh, 0CCh, 0B1h,	0, 4Ch,	0CCh, 0A3h
db 0, 6Ch, 0CCh, 0A3h, 0, 4Ch, 0CCh, 0A3h, 0CCh, 84h, 0
db 6Ch,	0CCh, 0A3h, 0CCh, 84h, 0, 4Ch, 0CCh, 0B1h, 0, 6Ch
db 0CCh, 0B1h, 0, 4Ch, 0CCh, 0ADh, 0, 6Ch, 0CCh, 0ADh
db 0, 4Dh, 0CCh, 81h, 0, 6Dh, 0CCh, 81h, 0, 4Dh, 0CCh
db 87h,	0, 6Dh,	0CCh, 87h, 0, 4Dh, 0CCh, 0A3h, 0, 6Dh
db 0CCh, 0A3h, 0, 4Eh, 0CCh, 87h, 0, 6Eh, 0CCh,	87h, 0
db 4Eh,	0CCh, 0A3h, 0, 6Eh, 0CCh, 0A3h,	0, 4Eh,	0CCh, 0B1h
db 0, 6Eh, 0CCh, 0B1h, 0, 4Eh, 0CCh, 0ADh, 0, 6Eh, 0CCh
db 0ADh, 0, 4Fh, 0CCh, 83h, 0CCh, 81h, 0, 6Fh, 0CCh, 83h
db 0CCh, 81h, 0, 4Fh, 0CCh, 83h, 0CCh, 88h, 0, 6Fh, 0CCh
db 83h,	0CCh, 88h, 0, 4Fh, 0CCh, 84h, 0CCh, 80h, 0, 6Fh
db 0CCh, 84h, 0CCh, 80h, 0, 4Fh, 0CCh, 84h, 0CCh, 81h
db 0, 6Fh, 0CCh, 84h, 0CCh, 81h, 0, 50h, 0CCh, 81h, 0
db 70h,	0CCh, 81h, 0, 50h, 0CCh, 87h, 0, 70h, 0CCh, 87h
db 0, 52h, 0CCh, 87h, 0, 72h, 0CCh, 87h, 0, 52h, 0CCh
db 0A3h, 0, 72h, 0CCh, 0A3h, 0,	52h, 0CCh, 0A3h, 0CCh
db 84h,	0, 72h,	0CCh, 0A3h, 0CCh, 84h, 0, 52h, 0CCh, 0B1h
db 0, 72h, 0CCh, 0B1h, 0, 53h, 0CCh, 87h, 0, 73h, 0CCh
db 87h,	0, 53h,	0CCh, 0A3h, 0, 73h, 0CCh, 0A3h,	0, 53h
db 0CCh, 81h, 0CCh, 87h, 0, 73h, 0CCh, 81h, 0CCh, 87h
db 0, 53h, 0CCh, 8Ch, 0CCh, 87h, 0, 73h, 0CCh, 8Ch, 0CCh
db 87h,	0, 53h,	0CCh, 0A3h, 0CCh, 87h, 0, 73h, 0CCh, 0A3h
db 0CCh, 87h, 0, 54h, 0CCh, 87h, 0, 74h, 0CCh, 87h, 0
db 54h,	0CCh, 0A3h, 0, 74h, 0CCh, 0A3h,	0, 54h,	0CCh, 0B1h
db 0, 74h, 0CCh, 0B1h, 0, 54h, 0CCh, 0ADh, 0, 74h, 0CCh
db 0ADh, 0, 55h, 0CCh, 0A4h, 0,	75h, 0CCh, 0A4h, 0, 55h
db 0CCh, 0B0h, 0, 75h, 0CCh, 0B0h, 0, 55h, 0CCh, 0ADh
db 0, 75h, 0CCh, 0ADh, 0, 55h, 0CCh, 83h, 0CCh,	81h, 0
db 75h,	0CCh, 83h, 0CCh, 81h, 0, 55h, 0CCh, 84h, 0CCh
db 88h,	0, 75h,	0CCh, 84h, 0CCh, 88h, 0, 56h, 0CCh, 83h
db 0, 76h, 0CCh, 83h, 0, 56h, 0CCh, 0A3h, 0, 76h, 0CCh
db 0A3h, 0, 57h, 0CCh, 80h, 0, 77h, 0CCh, 80h, 0, 57h
db 0CCh, 81h, 0, 77h, 0CCh, 81h, 0, 57h, 0CCh, 88h, 0
db 77h,	0CCh, 88h, 0, 57h, 0CCh, 87h, 0, 77h, 0CCh, 87h
db 0, 57h, 0CCh, 0A3h, 0, 77h, 0CCh, 0A3h, 0, 58h, 0CCh
db 87h,	0, 78h,	0CCh, 87h, 0, 58h, 0CCh, 88h, 0, 78h, 0CCh
db 88h,	0, 59h,	0CCh, 87h, 0, 79h, 0CCh, 87h, 0, 5Ah, 0CCh
db 82h,	0, 7Ah,	0CCh, 82h, 0, 5Ah, 0CCh, 0A3h, 0, 7Ah
db 0CCh, 0A3h, 0, 5Ah, 0CCh, 0B1h, 0, 7Ah, 0CCh, 0B1h
db 0, 68h, 0CCh, 0B1h, 0, 74h, 0CCh, 88h, 0, 77h, 0CCh
db 8Ah,	0, 79h,	0CCh, 8Ah, 0, 61h, 0CAh, 0BEh, 0, 0C5h
db 0BFh, 0CCh, 87h, 0, 41h, 0CCh, 0A3h,	0, 61h,	0CCh, 0A3h
db 0, 41h, 0CCh, 89h, 0, 61h, 0CCh, 89h, 0, 41h, 0CCh
db 82h,	0CCh, 81h, 0, 61h, 0CCh, 82h, 0CCh, 81h, 0, 41h
db 0CCh, 82h, 0CCh, 80h, 0, 61h, 0CCh, 82h, 0CCh, 80h
db 0, 41h, 0CCh, 82h, 0CCh, 89h, 0, 61h, 0CCh, 82h, 0CCh
db 89h,	0, 41h,	0CCh, 82h, 0CCh, 83h, 0, 61h, 0CCh, 82h
db 0CCh, 83h, 0, 41h, 0CCh, 0A3h, 0CCh,	82h, 0,	61h, 0CCh
db 0A3h, 0CCh, 82h, 0, 41h, 0CCh, 86h, 0CCh, 81h, 0, 61h
db 0CCh, 86h, 0CCh, 81h, 0, 41h, 0CCh, 86h, 0CCh, 80h
db 0, 61h, 0CCh, 86h, 0CCh, 80h, 0, 41h, 0CCh, 86h, 0CCh
db 89h,	0, 61h,	0CCh, 86h, 0CCh, 89h, 0, 41h, 0CCh, 86h
db 0CCh, 83h, 0, 61h, 0CCh, 86h, 0CCh, 83h, 0, 41h, 0CCh
db 0A3h, 0CCh, 86h, 0, 61h, 0CCh, 0A3h,	0CCh, 86h, 0, 45h
db 0CCh, 0A3h, 0, 65h, 0CCh, 0A3h, 0, 45h, 0CCh, 89h, 0
db 65h,	0CCh, 89h, 0, 45h, 0CCh, 83h, 0, 65h, 0CCh, 83h
db 0, 45h, 0CCh, 82h, 0CCh, 81h, 0, 65h, 0CCh, 82h, 0CCh
db 81h,	0, 45h,	0CCh, 82h, 0CCh, 80h, 0, 65h, 0CCh, 82h
db 0CCh, 80h, 0, 45h, 0CCh, 82h, 0CCh, 89h, 0, 65h, 0CCh
db 82h,	0CCh, 89h, 0, 45h, 0CCh, 82h, 0CCh, 83h, 0, 65h
db 0CCh, 82h, 0CCh, 83h, 0, 45h, 0CCh, 0A3h, 0CCh, 82h
db 0, 65h, 0CCh, 0A3h, 0CCh, 82h, 0, 49h, 0CCh,	89h, 0
db 69h,	0CCh, 89h, 0, 49h, 0CCh, 0A3h, 0, 69h, 0CCh, 0A3h
db 0, 4Fh, 0CCh, 0A3h, 0, 6Fh, 0CCh, 0A3h, 0, 4Fh, 0CCh
db 89h,	0, 6Fh,	0CCh, 89h, 0, 4Fh, 0CCh, 82h, 0CCh, 81h
db 0, 6Fh, 0CCh, 82h, 0CCh, 81h, 0, 4Fh, 0CCh, 82h, 0CCh
db 80h,	0, 6Fh,	0CCh, 82h, 0CCh, 80h, 0, 4Fh, 0CCh, 82h
db 0CCh, 89h, 0, 6Fh, 0CCh, 82h, 0CCh, 89h, 0, 4Fh, 0CCh
db 82h,	0CCh, 83h, 0, 6Fh, 0CCh, 82h, 0CCh, 83h, 0, 4Fh
db 0CCh, 0A3h, 0CCh, 82h, 0, 6Fh, 0CCh,	0A3h, 0CCh, 82h
db 0, 4Fh, 0CCh, 9Bh, 0CCh, 81h, 0, 6Fh, 0CCh, 9Bh, 0CCh
db 81h,	0, 4Fh,	0CCh, 9Bh, 0CCh, 80h, 0, 6Fh, 0CCh, 9Bh
db 0CCh, 80h, 0, 4Fh, 0CCh, 9Bh, 0CCh, 89h, 0, 6Fh, 0CCh
db 9Bh,	0CCh, 89h, 0, 4Fh, 0CCh, 9Bh, 0CCh, 83h, 0, 6Fh
db 0CCh, 9Bh, 0CCh, 83h, 0, 4Fh, 0CCh, 9Bh, 0CCh, 0A3h
db 0, 6Fh, 0CCh, 9Bh, 0CCh, 0A3h, 0, 55h, 0CCh,	0A3h, 0
db 75h,	0CCh, 0A3h, 0, 55h, 0CCh, 89h, 0, 75h, 0CCh, 89h
db 0, 55h, 0CCh, 9Bh, 0CCh, 81h, 0, 75h, 0CCh, 9Bh, 0CCh
db 81h,	0, 55h,	0CCh, 9Bh, 0CCh, 80h, 0, 75h, 0CCh, 9Bh
db 0CCh, 80h, 0, 55h, 0CCh, 9Bh, 0CCh, 89h, 0, 75h, 0CCh
db 9Bh,	0CCh, 89h, 0, 55h, 0CCh, 9Bh, 0CCh, 83h, 0, 75h
db 0CCh, 9Bh, 0CCh, 83h, 0, 55h, 0CCh, 9Bh, 0CCh, 0A3h
db 0, 75h, 0CCh, 9Bh, 0CCh, 0A3h, 0, 59h, 0CCh,	80h, 0
db 79h,	0CCh, 80h, 0, 59h, 0CCh, 0A3h, 0, 79h, 0CCh, 0A3h
db 0, 59h, 0CCh, 89h, 0, 79h, 0CCh, 89h, 0, 59h, 0CCh
db 83h,	0, 79h,	0CCh, 83h, 0, 0CEh, 0B1h, 0CCh,	93h, 0
db 0CEh, 0B1h, 0CCh, 94h, 0, 0CEh, 0B1h, 0CCh, 93h, 0CCh
db 80h,	0, 0CEh, 0B1h, 0CCh, 94h, 0CCh,	80h, 0,	0CEh, 0B1h
db 0CCh, 93h, 0CCh, 81h, 0, 0CEh, 0B1h,	0CCh, 94h, 0CCh
db 81h,	0, 0CEh, 0B1h, 0CCh, 93h, 0CDh,	82h, 0,	0CEh, 0B1h
db 0CCh, 94h, 0CDh, 82h, 0, 0CEh, 91h, 0CCh, 93h, 0, 0CEh
db 91h,	0CCh, 94h, 0, 0CEh, 91h, 0CCh, 93h, 0CCh, 80h
db 0, 0CEh, 91h, 0CCh, 94h, 0CCh, 80h, 0, 0CEh,	91h, 0CCh
db 93h,	0CCh, 81h, 0, 0CEh, 91h, 0CCh, 94h, 0CCh, 81h
db 0, 0CEh, 91h, 0CCh, 93h, 0CDh, 82h, 0, 0CEh,	91h, 0CCh
db 94h,	0CDh, 82h, 0, 0CEh, 0B5h, 0CCh,	93h, 0,	0CEh, 0B5h
db 0CCh, 94h, 0, 0CEh, 0B5h, 0CCh, 93h,	0CCh, 80h, 0, 0CEh
db 0B5h, 0CCh, 94h, 0CCh, 80h, 0, 0CEh,	0B5h, 0CCh, 93h
db 0CCh, 81h, 0, 0CEh, 0B5h, 0CCh, 94h,	0CCh, 81h, 0, 0CEh
db 95h,	0CCh, 93h, 0, 0CEh, 95h, 0CCh, 94h, 0, 0CEh, 95h
db 0CCh, 93h, 0CCh, 80h, 0, 0CEh, 95h, 0CCh, 94h, 0CCh
db 80h,	0, 0CEh, 95h, 0CCh, 93h, 0CCh, 81h, 0, 0CEh, 95h
db 0CCh, 94h, 0CCh, 81h, 0, 0CEh, 0B7h,	0CCh, 93h, 0, 0CEh
db 0B7h, 0CCh, 94h, 0, 0CEh, 0B7h, 0CCh, 93h, 0CCh, 80h
db 0, 0CEh, 0B7h, 0CCh,	94h, 0CCh, 80h,	0, 0CEh, 0B7h
db 0CCh, 93h, 0CCh, 81h, 0, 0CEh, 0B7h,	0CCh, 94h, 0CCh
db 81h,	0, 0CEh, 0B7h, 0CCh, 93h, 0CDh,	82h, 0,	0CEh, 0B7h
db 0CCh, 94h, 0CDh, 82h, 0, 0CEh, 97h, 0CCh, 93h, 0, 0CEh
db 97h,	0CCh, 94h, 0, 0CEh, 97h, 0CCh, 93h, 0CCh, 80h
db 0, 0CEh, 97h, 0CCh, 94h, 0CCh, 80h, 0, 0CEh,	97h, 0CCh
db 93h,	0CCh, 81h, 0, 0CEh, 97h, 0CCh, 94h, 0CCh, 81h
db 0, 0CEh, 97h, 0CCh, 93h, 0CDh, 82h, 0, 0CEh,	97h, 0CCh
db 94h,	0CDh, 82h, 0, 0CEh, 0B9h, 0CCh,	93h, 0,	0CEh, 0B9h
db 0CCh, 94h, 0, 0CEh, 0B9h, 0CCh, 93h,	0CCh, 80h, 0, 0CEh
db 0B9h, 0CCh, 94h, 0CCh, 80h, 0, 0CEh,	0B9h, 0CCh, 93h
db 0CCh, 81h, 0, 0CEh, 0B9h, 0CCh, 94h,	0CCh, 81h, 0, 0CEh
db 0B9h, 0CCh, 93h, 0CDh, 82h, 0, 0CEh,	0B9h, 0CCh, 94h
db 0CDh, 82h, 0, 0CEh, 99h, 0CCh, 93h, 0, 0CEh,	99h, 0CCh
db 94h,	0, 0CEh, 99h, 0CCh, 93h, 0CCh, 80h, 0, 0CEh, 99h
db 0CCh, 94h, 0CCh, 80h, 0, 0CEh, 99h, 0CCh, 93h, 0CCh
db 81h,	0, 0CEh, 99h, 0CCh, 94h, 0CCh, 81h, 0, 0CEh, 99h
db 0CCh, 93h, 0CDh, 82h, 0, 0CEh, 99h, 0CCh, 94h, 0CDh
db 82h,	0, 0CEh, 0BFh, 0CCh, 93h, 0, 0CEh, 0BFh, 0CCh
db 94h,	0, 0CEh, 0BFh, 0CCh, 93h, 0CCh,	80h, 0,	0CEh, 0BFh
db 0CCh, 94h, 0CCh, 80h, 0, 0CEh, 0BFh,	0CCh, 93h, 0CCh
db 81h,	0, 0CEh, 0BFh, 0CCh, 94h, 0CCh,	81h, 0,	0CEh, 9Fh
db 0CCh, 93h, 0, 0CEh, 9Fh, 0CCh, 94h, 0, 0CEh,	9Fh, 0CCh
db 93h,	0CCh, 80h, 0, 0CEh, 9Fh, 0CCh, 94h, 0CCh, 80h
db 0, 0CEh, 9Fh, 0CCh, 93h, 0CCh, 81h, 0, 0CEh,	9Fh, 0CCh
db 94h,	0CCh, 81h, 0, 0CFh, 85h, 0CCh, 93h, 0, 0CFh, 85h
db 0CCh, 94h, 0, 0CFh, 85h, 0CCh, 93h, 0CCh, 80h, 0, 0CFh
db 85h,	0CCh, 94h, 0CCh, 80h, 0, 0CFh, 85h, 0CCh, 93h
db 0CCh, 81h, 0, 0CFh, 85h, 0CCh, 94h, 0CCh, 81h, 0, 0CFh
db 85h,	0CCh, 93h, 0CDh, 82h, 0, 0CFh, 85h, 0CCh, 94h
db 0CDh, 82h, 0, 0CEh, 0A5h, 0CCh, 94h,	0, 0CEh, 0A5h
db 0CCh, 94h, 0CCh, 80h, 0, 0CEh, 0A5h,	0CCh, 94h, 0CCh
db 81h,	0, 0CEh, 0A5h, 0CCh, 94h, 0CDh,	82h, 0,	0CFh, 89h
db 0CCh, 93h, 0, 0CFh, 89h, 0CCh, 94h, 0, 0CFh,	89h, 0CCh
db 93h,	0CCh, 80h, 0, 0CFh, 89h, 0CCh, 94h, 0CCh, 80h
db 0, 0CFh, 89h, 0CCh, 93h, 0CCh, 81h, 0, 0CFh,	89h, 0CCh
db 94h,	0CCh, 81h, 0, 0CFh, 89h, 0CCh, 93h, 0CDh, 82h
db 0, 0CFh, 89h, 0CCh, 94h, 0CDh, 82h, 0, 0CEh,	0A9h, 0CCh
db 93h,	0, 0CEh, 0A9h, 0CCh, 94h, 0, 0CEh, 0A9h, 0CCh
db 93h,	0CCh, 80h, 0, 0CEh, 0A9h, 0CCh,	94h, 0CCh, 80h
db 0, 0CEh, 0A9h, 0CCh,	93h, 0CCh, 81h,	0, 0CEh, 0A9h
db 0CCh, 94h, 0CCh, 81h, 0, 0CEh, 0A9h,	0CCh, 93h, 0CDh
db 82h,	0, 0CEh, 0A9h, 0CCh, 94h, 0CDh,	82h, 0,	0CEh, 0B1h
db 0CCh, 80h, 0, 0CEh, 0B5h, 0CCh, 80h,	0, 0CEh, 0B7h
db 0CCh, 80h, 0, 0CEh, 0B9h, 0CCh, 80h,	0, 0CEh, 0BFh
db 0CCh, 80h, 0, 0CFh, 85h, 0CCh, 80h, 0, 0CFh,	89h, 0CCh
db 80h,	0, 0CEh, 0B1h, 0CCh, 93h, 0CDh,	85h, 0,	0CEh, 0B1h
db 0CCh, 94h, 0CDh, 85h, 0, 0CEh, 0B1h,	0CCh, 93h, 0CCh
db 80h,	0CDh, 85h, 0, 0CEh, 0B1h, 0CCh,	94h, 0CCh, 80h
db 0CDh, 85h, 0, 0CEh, 0B1h, 0CCh, 93h,	0CCh, 81h, 0CDh
db 85h,	0, 0CEh, 0B1h, 0CCh, 94h, 0CCh,	81h, 0CDh, 85h
db 0, 0CEh, 0B1h, 0CCh,	93h, 0CDh, 82h,	0CDh, 85h, 0, 0CEh
db 0B1h, 0CCh, 94h, 0CDh, 82h, 0CDh, 85h, 0, 0CEh, 91h
db 0CCh, 93h, 0CDh, 85h, 0, 0CEh, 91h, 0CCh, 94h, 0CDh
db 85h,	0, 0CEh, 91h, 0CCh, 93h, 0CCh, 80h, 0CDh, 85h
db 0, 0CEh, 91h, 0CCh, 94h, 0CCh, 80h, 0CDh, 85h, 0, 0CEh
db 91h,	0CCh, 93h, 0CCh, 81h, 0CDh, 85h, 0, 0CEh, 91h
db 0CCh, 94h, 0CCh, 81h, 0CDh, 85h, 0, 0CEh, 91h, 0CCh
db 93h,	0CDh, 82h, 0CDh, 85h, 0, 0CEh, 91h, 0CCh, 94h
db 0CDh, 82h, 0CDh, 85h, 0, 0CEh, 0B7h,	0CCh, 93h, 0CDh
db 85h,	0, 0CEh, 0B7h, 0CCh, 94h, 0CDh,	85h, 0,	0CEh, 0B7h
db 0CCh, 93h, 0CCh, 80h, 0CDh, 85h, 0, 0CEh, 0B7h, 0CCh
db 94h,	0CCh, 80h, 0CDh, 85h, 0, 0CEh, 0B7h, 0CCh, 93h
db 0CCh, 81h, 0CDh, 85h, 0, 0CEh, 0B7h,	0CCh, 94h, 0CCh
db 81h,	0CDh, 85h, 0, 0CEh, 0B7h, 0CCh,	93h, 0CDh, 82h
db 0CDh, 85h, 0, 0CEh, 0B7h, 0CCh, 94h,	0CDh, 82h, 0CDh
db 85h,	0, 0CEh, 97h, 0CCh, 93h, 0CDh, 85h, 0, 0CEh, 97h
db 0CCh, 94h, 0CDh, 85h, 0, 0CEh, 97h, 0CCh, 93h, 0CCh
db 80h,	0CDh, 85h, 0, 0CEh, 97h, 0CCh, 94h, 0CCh, 80h
db 0CDh, 85h, 0, 0CEh, 97h, 0CCh, 93h, 0CCh, 81h, 0CDh
db 85h,	0, 0CEh, 97h, 0CCh, 94h, 0CCh, 81h, 0CDh, 85h
db 0, 0CEh, 97h, 0CCh, 93h, 0CDh, 82h, 0CDh, 85h, 0, 0CEh
db 97h,	0CCh, 94h, 0CDh, 82h, 0CDh, 85h, 0, 0CFh, 89h
db 0CCh, 93h, 0CDh, 85h, 0, 0CFh, 89h, 0CCh, 94h, 0CDh
db 85h,	0, 0CFh, 89h, 0CCh, 93h, 0CCh, 80h, 0CDh, 85h
db 0, 0CFh, 89h, 0CCh, 94h, 0CCh, 80h, 0CDh, 85h, 0, 0CFh
db 89h,	0CCh, 93h, 0CCh, 81h, 0CDh, 85h, 0, 0CFh, 89h
db 0CCh, 94h, 0CCh, 81h, 0CDh, 85h, 0, 0CFh, 89h, 0CCh
db 93h,	0CDh, 82h, 0CDh, 85h, 0, 0CFh, 89h, 0CCh, 94h
db 0CDh, 82h, 0CDh, 85h, 0, 0CEh, 0A9h,	0CCh, 93h, 0CDh
db 85h,	0, 0CEh, 0A9h, 0CCh, 94h, 0CDh,	85h, 0,	0CEh, 0A9h
db 0CCh, 93h, 0CCh, 80h, 0CDh, 85h, 0, 0CEh, 0A9h, 0CCh
db 94h,	0CCh, 80h, 0CDh, 85h, 0, 0CEh, 0A9h, 0CCh, 93h
db 0CCh, 81h, 0CDh, 85h, 0, 0CEh, 0A9h,	0CCh, 94h, 0CCh
db 81h,	0CDh, 85h, 0, 0CEh, 0A9h, 0CCh,	93h, 0CDh, 82h
db 0CDh, 85h, 0, 0CEh, 0A9h, 0CCh, 94h,	0CDh, 82h, 0CDh
db 85h,	0, 0CEh, 0B1h, 0CCh, 86h, 0, 0CEh, 0B1h, 0CCh
db 84h,	0, 0CEh, 0B1h, 0CCh, 80h, 0CDh,	85h, 0,	0CEh, 0B1h
db 0CDh, 85h, 0, 0CEh, 0B1h, 0CCh, 81h,	0CDh, 85h, 0, 0CEh
db 0B1h, 0CDh, 82h, 0, 0CEh, 0B1h, 0CDh, 82h, 0CDh, 85h
db 0, 0CEh, 91h, 0CCh, 86h, 0, 0CEh, 91h, 0CCh,	84h, 0
db 0CEh, 91h, 0CCh, 80h, 0, 0CEh, 91h, 0CDh, 85h, 0, 20h
db 0CCh, 93h, 0, 0CEh, 0B9h, 0,	20h, 0CDh, 82h,	0, 0C2h
db 0A8h, 0CDh, 82h, 0, 20h, 0CCh, 88h, 0CDh, 82h, 0, 0CEh
db 0B7h, 0CCh, 80h, 0CDh, 85h, 0, 0CEh,	0B7h, 0CDh, 85h
db 0, 0CEh, 0B7h, 0CCh,	81h, 0CDh, 85h,	0, 0CEh, 0B7h
db 0CDh, 82h, 0, 0CEh, 0B7h, 0CDh, 82h,	0CDh, 85h, 0, 0CEh
db 95h,	0CCh, 80h, 0, 0CEh, 97h, 0CCh, 80h, 0, 0CEh, 97h
db 0CDh, 85h, 0, 0E1h, 0BEh, 0BFh, 0CCh, 80h, 0, 20h, 0CCh
db 93h,	0CCh, 80h, 0, 0E1h, 0BEh, 0BFh,	0CCh, 81h, 0, 20h
db 0CCh, 93h, 0CCh, 81h, 0, 0E1h, 0BEh,	0BFh, 0CDh, 82h
db 0, 20h, 0CCh, 93h, 0CDh, 82h, 0, 0CEh, 0B9h,	0CCh, 86h
db 0, 0CEh, 0B9h, 0CCh,	84h, 0,	0CEh, 0B9h, 0CCh, 88h
db 0CCh, 80h, 0, 0CEh, 0B9h, 0CDh, 82h,	0, 0CEh, 0B9h
db 0CCh, 88h, 0CDh, 82h, 0, 0CEh, 99h, 0CCh, 86h, 0, 0CEh
db 99h,	0CCh, 84h, 0, 0CEh, 99h, 0CCh, 80h, 0, 0E1h, 0BFh
db 0BEh, 0CCh, 80h, 0, 20h, 0CCh, 94h, 0CCh, 80h, 0, 0E1h
db 0BFh, 0BEh, 0CCh, 81h, 0, 20h, 0CCh,	94h, 0CCh, 81h
db 0, 0E1h, 0BFh, 0BEh,	0CDh, 82h, 0, 20h, 0CCh, 94h, 0CDh
db 82h,	0, 0CFh, 85h, 0CCh, 86h, 0, 0CFh, 85h, 0CCh, 84h
db 0, 0CFh, 85h, 0CCh, 88h, 0CCh, 80h, 0, 0CFh,	81h, 0CCh
db 93h,	0, 0CFh, 81h, 0CCh, 94h, 0, 0CFh, 85h, 0CDh, 82h
db 0, 0CFh, 85h, 0CCh, 88h, 0CDh, 82h, 0, 0CEh,	0A5h, 0CCh
db 86h,	0, 0CEh, 0A5h, 0CCh, 84h, 0, 0CEh, 0A5h, 0CCh
db 80h,	0, 0CEh, 0A1h, 0CCh, 94h, 0, 0C2h, 0A8h, 0CCh
db 80h,	0, 20h,	0CCh, 88h, 0CCh, 80h, 0, 60h, 0, 0CFh
db 89h,	0CCh, 80h, 0CDh, 85h, 0, 0CFh, 89h, 0CDh, 85h
db 0, 0CFh, 89h, 0CCh, 81h, 0CDh, 85h, 0, 0CFh,	89h, 0CDh
db 82h,	0, 0CFh, 89h, 0CDh, 82h, 0CDh, 85h, 0, 0CEh, 9Fh
db 0CCh, 80h, 0, 0CEh, 0A9h, 0CCh, 80h,	0, 0CEh, 0A9h
db 0CDh, 85h, 0, 0C2h, 0B4h, 0,	20h, 0CCh, 94h,	0, 0E2h
db 80h,	82h, 0,	0E2h, 80h, 83h,	0, 0E2h, 80h, 90h, 0, 20h
db 0CCh, 0B3h, 0, 2Eh, 0, 2 dup(2Eh), 0, 3 dup(2Eh), 0
db 0E2h, 80h, 0B2h, 0E2h, 80h, 0B2h, 0,	0E2h, 80h, 0B2h
db 0E2h, 80h, 0B2h, 0E2h, 80h, 0B2h, 0,	0E2h, 80h, 0B5h
db 0E2h, 80h, 0B5h, 0, 0E2h, 80h, 0B5h,	0E2h, 80h, 0B5h
db 0E2h, 80h, 0B5h, 0, 2 dup(21h), 0, 20h, 0CCh, 85h, 0
db 2 dup(3Fh), 0, 3Fh, 21h, 0, 21h, 3Fh, 0, 0E2h, 80h
db 0B2h, 0E2h, 80h, 0B2h, 0E2h,	80h, 0B2h, 0E2h, 80h, 0B2h
db 0, 30h, 0, 69h, 0, 34h, 0, 35h, 0, 36h, 0, 37h, 0, 38h
db 0, 39h, 0, 2Bh, 0, 0E2h, 88h, 92h, 0, 3Dh, 0, 28h, 0
db 29h,	0, 6Eh,	0, 52h,	73h, 0,	61h, 2Fh, 63h, 0, 61h
db 2Fh,	73h, 0,	43h, 0,	0C2h, 0B0h, 43h, 0, 63h, 2Fh, 6Fh
db 0, 63h, 2Fh,	75h, 0,	0C6h, 90h, 0, 0C2h, 0B0h, 46h
db 0, 67h, 0, 48h, 0, 0C4h, 0A7h, 0, 49h, 0, 4Ch, 0, 4Eh
db 0, 4Eh, 6Fh,	0, 50h,	0, 51h,	0, 52h,	0, 53h,	4Dh, 0
db 54h,	45h, 4Ch, 0, 54h, 4Dh, 0, 5Ah, 0, 0CEh,	0A9h, 0
db 4Bh,	0, 42h,	0, 65h,	0, 45h,	0, 46h,	0, 4Dh,	0, 0D7h
db 90h,	0, 0D7h, 91h, 0, 0D7h, 92h, 0, 0D7h, 93h, 0, 0CEh
db 0B3h, 0, 0CEh, 93h, 0, 0CEh,	0A0h, 0, 0E2h, 88h, 91h
db 0, 44h, 0, 64h, 0, 31h, 0E2h, 81h, 84h, 33h,	0, 32h
db 0E2h, 81h, 84h, 33h,	0, 31h,	0E2h, 81h, 84h,	35h, 0
db 32h,	0E2h, 81h, 84h,	35h, 0,	33h, 0E2h, 81h,	84h, 35h
db 0, 34h, 0E2h, 81h, 84h, 35h,	0, 31h,	0E2h, 81h, 84h
db 36h,	0, 35h,	0E2h, 81h, 84h,	36h, 0,	31h, 0E2h, 81h
db 84h,	38h, 0,	33h, 0E2h, 81h,	84h, 38h, 0, 35h, 0E2h
db 81h,	84h, 38h, 0, 37h, 0E2h,	81h, 84h, 38h, 0, 31h
db 0E2h, 81h, 84h, 0, 2	dup(49h), 0, 3 dup(49h), 0, 49h
db 56h,	0, 56h,	0, 56h,	49h, 0,	56h, 2 dup(49h), 0, 56h
db 3 dup(49h), 0, 49h, 58h, 0, 58h, 0, 58h, 49h, 0, 58h
db 2 dup(49h), 0, 2 dup(69h), 0, 3 dup(69h), 0,	69h, 76h
db 0, 76h, 0, 76h, 69h,	0, 76h,	2 dup(69h), 0, 76h, 3 dup(69h)
db 0, 69h, 78h,	0, 78h,	69h, 0,	78h, 2 dup(69h), 0, 63h
db 0, 6Dh, 0, 0E2h, 86h, 90h, 0CCh, 0B8h, 0, 0E2h, 86h
db 92h,	0CCh, 0B8h, 0, 0E2h, 86h, 94h, 0CCh, 0B8h, 0, 0E2h
db 87h,	90h, 0CCh, 0B8h, 0, 0E2h, 87h, 94h, 0CCh, 0B8h
db 0, 0E2h, 87h, 92h, 0CCh, 0B8h, 0, 0E2h, 88h,	83h, 0CCh
db 0B8h, 0, 0E2h, 2 dup(88h), 0CCh, 0B8h, 0, 0E2h, 88h
db 8Bh,	0CCh, 0B8h, 0, 0E2h, 88h, 0A3h,	0CCh, 0B8h, 0
db 0E2h, 88h, 0A5h, 0CCh, 0B8h,	0, 0E2h, 88h, 0ABh, 0E2h
db 88h,	0ABh, 0, 0E2h, 88h, 0ABh, 0E2h,	88h, 0ABh, 0E2h
db 88h,	0ABh, 0, 0E2h, 88h, 0AEh, 0E2h,	88h, 0AEh, 0, 0E2h
db 88h,	0AEh, 0E2h, 88h, 0AEh, 0E2h, 88h, 0AEh,	0, 0E2h
db 88h,	0BCh, 0CCh, 0B8h, 0, 0E2h, 89h,	83h, 0CCh, 0B8h
db 0, 0E2h, 89h, 85h, 0CCh, 0B8h, 0, 0E2h, 89h,	88h, 0CCh
db 0B8h, 0, 3Dh, 0CCh, 0B8h, 0,	0E2h, 89h, 0A1h, 0CCh
db 0B8h, 0, 0E2h, 89h, 8Dh, 0CCh, 0B8h,	0, 3Ch,	0CCh, 0B8h
db 0, 3Eh, 0CCh, 0B8h, 0, 0E2h,	89h, 0A4h, 0CCh, 0B8h
db 0, 0E2h, 89h, 0A5h, 0CCh, 0B8h, 0, 0E2h, 89h, 0B2h
db 0CCh, 0B8h, 0, 0E2h,	89h, 0B3h, 0CCh, 0B8h, 0, 0E2h
db 89h,	0B6h, 0CCh, 0B8h, 0, 0E2h, 89h,	0B7h, 0CCh, 0B8h
db 0, 0E2h, 89h, 0BAh, 0CCh, 0B8h, 0, 0E2h, 89h, 0BBh
db 0CCh, 0B8h, 0, 0E2h,	8Ah, 82h, 0CCh,	0B8h, 0, 0E2h
db 8Ah,	83h, 0CCh, 0B8h, 0, 0E2h, 8Ah, 86h, 0CCh, 0B8h
db 0, 0E2h, 8Ah, 87h, 0CCh, 0B8h, 0, 0E2h, 8Ah,	0A2h, 0CCh
db 0B8h, 0, 0E2h, 8Ah, 0A8h, 0CCh, 0B8h, 0, 0E2h, 8Ah
db 0A9h, 0CCh, 0B8h, 0,	0E2h, 8Ah, 0ABh, 0CCh, 0B8h, 0
db 0E2h, 89h, 0BCh, 0CCh, 0B8h,	0, 0E2h, 89h, 0BDh, 0CCh
db 0B8h, 0, 0E2h, 8Ah, 91h, 0CCh, 0B8h,	0, 0E2h, 8Ah, 92h
db 0CCh, 0B8h, 0, 0E2h,	8Ah, 0B2h, 0CCh, 0B8h, 0, 0E2h
db 8Ah,	0B3h, 0CCh, 0B8h, 0, 0E2h, 8Ah,	0B4h, 0CCh, 0B8h
db 0, 0E2h, 8Ah, 0B5h, 0CCh, 0B8h, 0, 0E3h, 80h, 88h, 0
db 0E3h, 80h, 89h, 0, 31h, 30h,	0, 2 dup(31h), 0, 31h
db 32h,	0, 31h,	33h, 0,	31h, 34h, 0, 31h, 35h, 0, 31h
db 36h,	0, 31h,	37h, 0,	31h, 38h, 0, 31h, 39h, 0, 32h
db 30h,	0, 28h,	31h, 29h, 0, 28h, 32h, 29h, 0, 28h, 33h
db 29h,	0, 28h,	34h, 29h, 0, 28h, 35h, 29h, 0, 28h, 36h
db 29h,	0, 28h,	37h, 29h, 0, 28h, 38h, 29h, 0, 28h, 39h
db 29h,	0, 28h,	31h, 30h, 29h, 0, 28h, 2 dup(31h), 29h
db 0, 28h, 31h,	32h, 29h, 0, 28h, 31h, 33h, 29h, 0, 28h
db 31h,	34h, 29h, 0, 28h, 31h, 35h, 29h, 0, 28h, 31h, 36h
db 29h,	0, 28h,	31h, 37h, 29h, 0, 28h, 31h, 38h, 29h, 0
db 28h,	31h, 39h, 29h, 0, 28h, 32h, 30h, 29h, 0, 31h, 2Eh
db 0, 32h, 2Eh,	0, 33h,	2Eh, 0,	34h, 2Eh, 0, 35h, 2Eh
db 0, 36h, 2Eh,	0, 37h,	2Eh, 0,	38h, 2Eh, 0, 39h, 2Eh
db 0, 31h, 30h,	2Eh, 0,	2 dup(31h), 2Eh, 0, 31h, 32h, 2Eh
db 0, 31h, 33h,	2Eh, 0,	31h, 34h, 2Eh, 0, 31h, 35h, 2Eh
db 0, 31h, 36h,	2Eh, 0,	31h, 37h, 2Eh, 0, 31h, 38h, 2Eh
db 0, 31h, 39h,	2Eh, 0,	32h, 30h, 2Eh, 0, 28h, 61h, 29h
db 0, 28h, 62h,	29h, 0,	28h, 63h, 29h, 0, 28h, 64h, 29h
db 0, 28h, 65h,	29h, 0,	28h, 66h, 29h, 0, 28h, 67h, 29h
db 0, 28h, 68h,	29h, 0,	28h, 69h, 29h, 0, 28h, 6Ah, 29h
db 0, 28h, 6Bh,	29h, 0,	28h, 6Ch, 29h, 0, 28h, 6Dh, 29h
db 0, 28h, 6Eh,	29h, 0,	28h, 6Fh, 29h, 0, 28h, 70h, 29h
db 0, 28h, 71h,	29h, 0,	28h, 72h, 29h, 0, 28h, 73h, 29h
db 0, 28h, 74h,	29h, 0,	28h, 75h, 29h, 0, 28h, 76h, 29h
db 0, 28h, 77h,	29h, 0,	28h, 78h, 29h, 0, 28h, 79h, 29h
db 0, 28h, 7Ah,	29h, 0,	41h, 0,	47h, 0,	4Ah, 0,	4Fh, 0
db 53h,	0, 54h,	0, 55h,	0, 57h,	0, 59h,	0, 62h,	0, 66h
db 0, 6Bh, 0, 70h, 0, 71h, 0, 74h, 0, 75h, 0, 7Ah, 0, 0E2h
db 88h,	0ABh, 0E2h, 88h, 0ABh, 0E2h, 88h, 0ABh,	0E2h, 88h
db 0ABh, 0, 2 dup(3Ah),	3Dh, 0,	2 dup(3Dh), 0, 3 dup(3Dh)
db 0, 0E2h, 0ABh, 9Dh, 0CCh, 0B8h, 0, 0E6h, 0AFh, 8Dh
db 0, 0E9h, 0BEh, 9Fh, 0, 0E4h,	0B8h, 80h, 0, 0E4h, 0B8h
db 0A8h, 0, 0E4h, 0B8h,	0B6h, 0, 0E4h, 0B8h, 0BFh, 0, 0E4h
db 0B9h, 99h, 0, 0E4h, 0BAh, 85h, 0, 0E4h, 0BAh, 8Ch, 0
db 0E4h, 0BAh, 0A0h, 0,	0E4h, 2	dup(0BAh), 0, 0E5h, 84h
db 0BFh, 0, 0E5h, 85h, 0A5h, 0,	0E5h, 85h, 0ABh, 0, 0E5h
db 86h,	82h, 0,	0E5h, 86h, 96h,	0, 0E5h, 86h, 0ABh, 0
db 0E5h, 87h, 0A0h, 0, 0E5h, 87h, 0B5h,	0, 0E5h, 88h, 80h
db 0, 0E5h, 8Ah, 9Bh, 0, 0E5h, 8Bh, 0B9h, 0, 0E5h, 8Ch
db 95h,	0, 0E5h, 8Ch, 9Ah, 0, 0E5h, 8Ch, 0B8h, 0, 0E5h
db 8Dh,	81h, 0,	0E5h, 8Dh, 9Ch,	0, 0E5h, 8Dh, 0A9h, 0
db 0E5h, 8Eh, 82h, 0, 0E5h, 8Eh, 0B6h, 0, 0E5h,	8Fh, 88h
db 0, 0E5h, 8Fh, 0A3h, 0, 0E5h,	9Bh, 97h, 0, 0E5h, 9Ch
db 9Fh,	0, 0E5h, 0A3h, 0ABh, 0,	0E5h, 0A4h, 82h, 0, 0E5h
db 0A4h, 8Ah, 0, 0E5h, 0A4h, 95h, 0, 0E5h, 0A4h, 0A7h
db 0, 0E5h, 0A5h, 0B3h,	0, 0E5h, 0ADh, 90h, 0, 0E5h, 0AEh
db 80h,	0, 0E5h, 0AFh, 0B8h, 0,	0E5h, 0B0h, 8Fh, 0, 0E5h
db 0B0h, 0A2h, 0, 0E5h,	0B0h, 0B8h, 0, 0E5h, 0B1h, 0AEh
db 0, 0E5h, 2 dup(0B1h), 0, 0E5h, 0B7h,	9Bh, 0,	0E5h, 0B7h
db 0A5h, 0, 0E5h, 0B7h,	0B1h, 0, 0E5h, 0B7h, 0BEh, 0, 0E5h
db 0B9h, 0B2h, 0, 0E5h,	0B9h, 0BAh, 0, 0E5h, 0B9h, 0BFh
db 0, 0E5h, 0BBh, 0B4h,	0, 0E5h, 0BBh, 0BEh, 0,	0E5h, 0BCh
db 8Bh,	0, 0E5h, 0BCh, 93h, 0, 0E5h, 0BDh, 90h,	0, 0E5h
db 0BDh, 0A1h, 0, 0E5h,	0BDh, 0B3h, 0, 0E5h, 0BFh, 83h
db 0, 0E6h, 2 dup(88h),	0, 0E6h, 88h, 0B6h, 0, 0E6h, 89h
db 8Bh,	0, 0E6h, 94h, 0AFh, 0, 0E6h, 94h, 0B4h,	0, 0E6h
db 96h,	87h, 0,	0E6h, 96h, 97h,	0, 0E6h, 96h, 0A4h, 0
db 0E6h, 96h, 0B9h, 0, 0E6h, 97h, 0A0h,	0, 0E6h, 97h, 0A5h
db 0, 0E6h, 9Bh, 0B0h, 0, 0E6h,	9Ch, 88h, 0, 0E6h, 9Ch
db 0A8h, 0, 0E6h, 0ACh,	0A0h, 0, 0E6h, 0ADh, 0A2h, 0, 0E6h
db 0ADh, 0B9h, 0, 0E6h,	0AEh, 0B3h, 0, 0E6h, 0AFh, 8Bh
db 0, 0E6h, 0AFh, 94h, 0, 0E6h,	0AFh, 9Bh, 0, 0E6h, 0B0h
db 8Fh,	0, 0E6h, 0B0h, 94h, 0, 0E6h, 0B0h, 0B4h, 0, 0E7h
db 81h,	0ABh, 0, 0E7h, 88h, 0AAh, 0, 0E7h, 88h,	0B6h, 0
db 0E7h, 88h, 0BBh, 0, 0E7h, 88h, 0BFh,	0, 0E7h, 89h, 87h
db 0, 0E7h, 89h, 99h, 0, 0E7h, 89h, 9Bh, 0, 0E7h, 8Ah
db 0ACh, 0, 0E7h, 8Eh, 84h, 0, 0E7h, 8Eh, 89h, 0, 0E7h
db 93h,	9Ch, 0,	0E7h, 93h, 0A6h, 0, 0E7h, 94h, 98h, 0
db 0E7h, 94h, 9Fh, 0, 0E7h, 94h, 0A8h, 0, 0E7h,	94h, 0B0h
db 0, 0E7h, 96h, 8Bh, 0, 0E7h, 96h, 92h, 0, 0E7h, 99h
db 0B6h, 0, 0E7h, 99h, 0BDh, 0,	0E7h, 9Ah, 0AEh, 0, 0E7h
db 9Ah,	0BFh, 0, 0E7h, 9Bh, 0AEh, 0, 0E7h, 9Fh,	9Bh, 0
db 0E7h, 9Fh, 0A2h, 0, 0E7h, 9Fh, 0B3h,	0, 0E7h, 0A4h
db 0BAh, 0, 0E7h, 0A6h,	0B8h, 0, 0E7h, 0A6h, 0BEh, 0, 0E7h
db 0A9h, 0B4h, 0, 0E7h,	0ABh, 8Bh, 0, 0E7h, 0ABh, 0B9h
db 0, 0E7h, 0B1h, 0B3h,	0, 0E7h, 0B3h, 0B8h, 0,	0E7h, 0BCh
db 0B6h, 0, 0E7h, 0BDh,	91h, 0,	0E7h, 0BEh, 8Ah, 0, 0E7h
db 0BEh, 0BDh, 0, 0E8h,	80h, 81h, 0, 0E8h, 80h,	8Ch, 0
db 0E8h, 80h, 92h, 0, 0E8h, 80h, 0B3h, 0, 0E8h,	81h, 0BFh
db 0, 0E8h, 82h, 89h, 0, 0E8h, 87h, 0A3h, 0, 0E8h, 87h
db 0AAh, 0, 0E8h, 87h, 0B3h, 0,	0E8h, 87h, 0BCh, 0, 0E8h
db 88h,	8Ch, 0,	0E8h, 88h, 9Bh,	0, 0E8h, 88h, 9Fh, 0, 0E8h
db 89h,	0AEh, 0, 0E8h, 89h, 0B2h, 0, 0E8h, 89h,	0B8h, 0
db 0E8h, 99h, 8Dh, 0, 0E8h, 99h, 0ABh, 0, 0E8h,	0A1h, 80h
db 0, 0E8h, 0A1h, 8Ch, 0, 0E8h,	0A1h, 0A3h, 0, 0E8h, 0A5h
db 0BEh, 0, 0E8h, 0A6h,	8Bh, 0,	0E8h, 0A7h, 92h, 0, 0E8h
db 0A8h, 80h, 0, 0E8h, 0B0h, 0B7h, 0, 0E8h, 0B1h, 86h
db 0, 0E8h, 0B1h, 95h, 0, 0E8h,	0B1h, 0B8h, 0, 0E8h, 0B2h
db 9Dh,	0, 0E8h, 0B5h, 0A4h, 0,	0E8h, 0B5h, 0B0h, 0, 0E8h
db 0B6h, 0B3h, 0, 0E8h,	0BAh, 0ABh, 0, 0E8h, 0BBh, 8Ah
db 0, 0E8h, 0BEh, 9Bh, 0, 0E8h,	0BEh, 0B0h, 0, 0E8h, 0BEh
db 0B5h, 0, 0E9h, 82h, 91h, 0, 0E9h, 85h, 89h, 0, 0E9h
db 87h,	86h, 0,	0E9h, 87h, 8Ch,	0, 0E9h, 87h, 91h, 0, 0E9h
db 95h,	0B7h, 0, 0E9h, 96h, 80h, 0, 0E9h, 98h, 9Ch, 0
db 0E9h, 9Ah, 0B6h, 0, 0E9h, 9Ah, 0B9h,	0, 0E9h, 9Bh, 0A8h
db 0, 0E9h, 9Dh, 91h, 0, 0E9h, 9Dh, 9Eh, 0, 0E9h, 9Dh
db 0A2h, 0, 0E9h, 9Dh, 0A9h, 0,	0E9h, 9Fh, 8Bh,	0, 0E9h
db 9Fh,	0ADh, 0, 0E9h, 9Fh, 0B3h, 0, 0E9h, 0A0h, 81h, 0
db 0E9h, 0A2h, 0A8h, 0,	0E9h, 0A3h, 9Bh, 0, 0E9h, 0A3h
db 9Fh,	0, 0E9h, 0A6h, 96h, 0, 0E9h, 0A6h, 99h,	0, 0E9h
db 0A6h, 0ACh, 0, 0E9h,	0AAh, 0A8h, 0, 0E9h, 0ABh, 98h
db 0, 0E9h, 0ABh, 9Fh, 0, 0E9h,	0ACh, 0A5h, 0, 0E9h, 0ACh
db 0AFh, 0, 0E9h, 0ACh,	0B2h, 0, 0E9h, 0ACh, 0BCh, 0, 0E9h
db 0ADh, 9Ah, 0, 0E9h, 0B3h, 0A5h, 0, 0E9h, 0B9h, 0B5h
db 0, 0E9h, 0B9h, 0BFh,	0, 0E9h, 0BAh, 0A5h, 0,	0E9h, 0BAh
db 0BBh, 0, 0E9h, 0BBh,	83h, 0,	0E9h, 0BBh, 8Dh, 0, 0E9h
db 0BBh, 91h, 0, 0E9h, 0BBh, 0B9h, 0, 0E9h, 0BBh, 0BDh
db 0, 0E9h, 0BCh, 8Eh, 0, 0E9h,	0BCh, 93h, 0, 0E9h, 0BCh
db 0A0h, 0, 0E9h, 0BCh,	0BBh, 0, 0E9h, 0BDh, 8Ah, 0, 0E9h
db 0BDh, 92h, 0, 0E9h, 0BEh, 8Dh, 0, 0E9h, 0BEh, 9Ch, 0
db 0E9h, 0BEh, 0A0h, 0,	0E3h, 80h, 92h,	0, 0E5h, 8Dh, 84h
db 0, 0E5h, 8Dh, 85h, 0, 0E3h, 81h, 8Bh, 0E3h, 82h, 99h
db 0, 0E3h, 81h, 8Dh, 0E3h, 82h, 99h, 0, 0E3h, 81h, 8Fh
db 0E3h, 82h, 99h, 0, 0E3h, 81h, 91h, 0E3h, 82h, 99h, 0
db 0E3h, 81h, 93h, 0E3h, 82h, 99h, 0, 0E3h, 81h, 95h, 0E3h
db 82h,	99h, 0,	0E3h, 81h, 97h,	0E3h, 82h, 99h,	0, 0E3h
db 81h,	99h, 0E3h, 82h,	99h, 0,	0E3h, 81h, 9Bh,	0E3h, 82h
db 99h,	0, 0E3h, 81h, 9Dh, 0E3h, 82h, 99h, 0, 0E3h, 81h
db 9Fh,	0E3h, 82h, 99h,	0, 0E3h, 81h, 0A1h, 0E3h, 82h
db 99h,	0, 0E3h, 81h, 0A4h, 0E3h, 82h, 99h, 0, 0E3h, 81h
db 0A6h, 0E3h, 82h, 99h, 0, 0E3h, 81h, 0A8h, 0E3h, 82h
db 99h,	0, 0E3h, 81h, 0AFh, 0E3h, 82h, 99h, 0, 0E3h, 81h
db 0AFh, 0E3h, 82h, 9Ah, 0, 0E3h, 81h, 0B2h, 0E3h, 82h
db 99h,	0, 0E3h, 81h, 0B2h, 0E3h, 82h, 9Ah, 0, 0E3h, 81h
db 0B5h, 0E3h, 82h, 99h, 0, 0E3h, 81h, 0B5h, 0E3h, 82h
db 9Ah,	0, 0E3h, 81h, 0B8h, 0E3h, 82h, 99h, 0, 0E3h, 81h
db 0B8h, 0E3h, 82h, 9Ah, 0, 0E3h, 81h, 0BBh, 0E3h, 82h
db 99h,	0, 0E3h, 81h, 0BBh, 0E3h, 82h, 9Ah, 0, 0E3h, 81h
db 86h,	0E3h, 82h, 99h,	0, 20h,	0E3h, 82h, 99h,	0, 20h
db 0E3h, 82h, 9Ah, 0, 0E3h, 82h, 9Dh, 0E3h, 82h, 99h, 0
db 0E3h, 82h, 88h, 0E3h, 82h, 8Ah, 0, 0E3h, 82h, 0ABh
db 0E3h, 82h, 99h, 0, 0E3h, 82h, 0ADh, 0E3h, 82h, 99h
db 0, 0E3h, 82h, 0AFh, 0E3h, 82h, 99h, 0, 0E3h,	82h, 0B1h
db 0E3h, 82h, 99h, 0, 0E3h, 82h, 0B3h, 0E3h, 82h, 99h
db 0, 0E3h, 82h, 0B5h, 0E3h, 82h, 99h, 0, 0E3h,	82h, 0B7h
db 0E3h, 82h, 99h, 0, 0E3h, 82h, 0B9h, 0E3h, 82h, 99h
db 0, 0E3h, 82h, 0BBh, 0E3h, 82h, 99h, 0, 0E3h,	82h, 0BDh
db 0E3h, 82h, 99h, 0, 0E3h, 82h, 0BFh, 0E3h, 82h, 99h
db 0, 0E3h, 83h, 81h, 0E3h, 82h, 99h, 0, 0E3h, 83h, 84h
db 0E3h, 82h, 99h, 0, 0E3h, 83h, 86h, 0E3h, 82h, 99h, 0
db 0E3h, 83h, 88h, 0E3h, 82h, 99h, 0, 0E3h, 83h, 8Fh, 0E3h
db 82h,	99h, 0,	0E3h, 83h, 8Fh,	0E3h, 82h, 9Ah,	0, 0E3h
db 83h,	92h, 0E3h, 82h,	99h, 0,	0E3h, 83h, 92h,	0E3h, 82h
db 9Ah,	0, 0E3h, 83h, 95h, 0E3h, 82h, 99h, 0, 0E3h, 83h
db 95h,	0E3h, 82h, 9Ah,	0, 0E3h, 83h, 98h, 0E3h, 82h, 99h
db 0, 0E3h, 83h, 98h, 0E3h, 82h, 9Ah, 0, 0E3h, 83h, 9Bh
db 0E3h, 82h, 99h, 0, 0E3h, 83h, 9Bh, 0E3h, 82h, 9Ah, 0
db 0E3h, 82h, 0A6h, 0E3h, 82h, 99h, 0, 0E3h, 83h, 0AFh
db 0E3h, 82h, 99h, 0, 0E3h, 83h, 0B0h, 0E3h, 82h, 99h
db 0, 0E3h, 83h, 0B1h, 0E3h, 82h, 99h, 0, 0E3h,	83h, 0B2h
db 0E3h, 82h, 99h, 0, 0E3h, 83h, 0BDh, 0E3h, 82h, 99h
db 0, 0E3h, 82h, 0B3h, 0E3h, 83h, 88h, 0, 0E1h,	84h, 80h
db 0, 0E1h, 84h, 81h, 0, 0E1h, 86h, 0AAh, 0, 0E1h, 84h
db 82h,	0, 0E1h, 86h, 0ACh, 0, 0E1h, 86h, 0ADh,	0, 0E1h
db 84h,	83h, 0,	0E1h, 2	dup(84h), 0, 0E1h, 84h,	85h, 0
db 0E1h, 86h, 0B0h, 0, 0E1h, 86h, 0B1h,	0, 0E1h, 86h, 0B2h
db 0, 0E1h, 86h, 0B3h, 0, 0E1h,	86h, 0B4h, 0, 0E1h, 86h
db 0B5h, 0, 0E1h, 84h, 9Ah, 0, 0E1h, 84h, 86h, 0, 0E1h
db 84h,	87h, 0,	0E1h, 84h, 88h,	0, 0E1h, 84h, 0A1h, 0
db 0E1h, 84h, 89h, 0, 0E1h, 84h, 8Ah, 0, 0E1h, 84h, 8Bh
db 0, 0E1h, 84h, 8Ch, 0, 0E1h, 84h, 8Dh, 0, 0E1h, 84h
db 8Eh,	0, 0E1h, 84h, 8Fh, 0, 0E1h, 84h, 90h, 0, 0E1h
db 84h,	91h, 0,	0E1h, 84h, 92h,	0, 0E1h, 85h, 0A1h, 0
db 0E1h, 85h, 0A2h, 0, 0E1h, 85h, 0A3h,	0, 0E1h, 85h, 0A4h
db 0, 0E1h, 85h, 0A5h, 0, 0E1h,	85h, 0A6h, 0, 0E1h, 85h
db 0A7h, 0, 0E1h, 85h, 0A8h, 0,	0E1h, 85h, 0A9h, 0, 0E1h
db 85h,	0AAh, 0, 0E1h, 85h, 0ABh, 0, 0E1h, 85h,	0ACh, 0
db 0E1h, 85h, 0ADh, 0, 0E1h, 85h, 0AEh,	0, 0E1h, 85h, 0AFh
db 0, 0E1h, 85h, 0B0h, 0, 0E1h,	85h, 0B1h, 0, 0E1h, 85h
db 0B2h, 0, 0E1h, 85h, 0B3h, 0,	0E1h, 85h, 0B4h, 0, 0E1h
db 85h,	0B5h, 0, 0E1h, 85h, 0A0h, 0, 0E1h, 84h,	94h, 0
db 0E1h, 84h, 95h, 0, 0E1h, 2 dup(87h),	0, 0E1h, 87h, 88h
db 0, 0E1h, 87h, 8Ch, 0, 0E1h, 87h, 8Eh, 0, 0E1h, 87h
db 93h,	0, 0E1h, 87h, 97h, 0, 0E1h, 87h, 99h, 0, 0E1h
db 84h,	9Ch, 0,	0E1h, 87h, 9Dh,	0, 0E1h, 87h, 9Fh, 0, 0E1h
db 84h,	9Dh, 0,	0E1h, 84h, 9Eh,	0, 0E1h, 84h, 0A0h, 0
db 0E1h, 84h, 0A2h, 0, 0E1h, 84h, 0A3h,	0, 0E1h, 84h, 0A7h
db 0, 0E1h, 84h, 0A9h, 0, 0E1h,	84h, 0ABh, 0, 0E1h, 84h
db 0ACh, 0, 0E1h, 84h, 0ADh, 0,	0E1h, 84h, 0AEh, 0, 0E1h
db 84h,	0AFh, 0, 0E1h, 84h, 0B2h, 0, 0E1h, 84h,	0B6h, 0
db 0E1h, 85h, 80h, 0, 0E1h, 85h, 87h, 0, 0E1h, 85h, 8Ch
db 0, 0E1h, 87h, 0B1h, 0, 0E1h,	87h, 0B2h, 0, 0E1h, 85h
db 97h,	0, 0E1h, 85h, 98h, 0, 0E1h, 85h, 99h, 0, 0E1h
db 86h,	84h, 0,	0E1h, 86h, 85h,	0, 0E1h, 86h, 88h, 0, 0E1h
db 86h,	91h, 0,	0E1h, 86h, 92h,	0, 0E1h, 86h, 94h, 0, 0E1h
db 86h,	9Eh, 0,	0E1h, 86h, 0A1h, 0, 0E4h, 0B8h,	89h, 0
db 0E5h, 2 dup(9Bh), 0,	0E4h, 0B8h, 8Ah, 0, 0E4h, 0B8h
db 0ADh, 0, 0E4h, 0B8h,	8Bh, 0,	0E7h, 94h, 0B2h, 0, 0E4h
db 0B8h, 99h, 0, 0E4h, 0B8h, 81h, 0, 0E5h, 0A4h, 0A9h
db 0, 0E5h, 9Ch, 0B0h, 0, 28h, 0E1h, 84h, 80h, 29h, 0
db 28h,	0E1h, 84h, 82h,	29h, 0,	28h, 0E1h, 84h,	83h, 29h
db 0, 28h, 0E1h, 84h, 85h, 29h,	0, 28h,	0E1h, 84h, 86h
db 29h,	0, 28h,	0E1h, 84h, 87h,	29h, 0,	28h, 0E1h, 84h
db 89h,	29h, 0,	28h, 0E1h, 84h,	8Bh, 29h, 0, 28h, 0E1h
db 84h,	8Ch, 29h, 0, 28h, 0E1h,	84h, 8Eh, 29h, 0, 28h
db 0E1h, 84h, 8Fh, 29h,	0, 28h,	0E1h, 84h, 90h,	29h, 0
db 28h,	0E1h, 84h, 91h,	29h, 0,	28h, 0E1h, 84h,	92h, 29h
db 0, 28h, 0E1h, 84h, 80h, 0E1h, 85h, 0A1h, 29h, 0, 28h
db 0E1h, 84h, 82h, 0E1h, 85h, 0A1h, 29h, 0, 28h, 0E1h
db 84h,	83h, 0E1h, 85h,	0A1h, 29h, 0, 28h, 0E1h, 84h, 85h
db 0E1h, 85h, 0A1h, 29h, 0, 28h, 0E1h, 84h, 86h, 0E1h
db 85h,	0A1h, 29h, 0, 28h, 0E1h, 84h, 87h, 0E1h, 85h, 0A1h
db 29h,	0, 28h,	0E1h, 84h, 89h,	0E1h, 85h, 0A1h, 29h, 0
db 28h,	0E1h, 84h, 8Bh,	0E1h, 85h, 0A1h, 29h, 0, 28h, 0E1h
db 84h,	8Ch, 0E1h, 85h,	0A1h, 29h, 0, 28h, 0E1h, 84h, 8Eh
db 0E1h, 85h, 0A1h, 29h, 0, 28h, 0E1h, 84h, 8Fh, 0E1h
db 85h,	0A1h, 29h, 0, 28h, 0E1h, 84h, 90h, 0E1h, 85h, 0A1h
db 29h,	0, 28h,	0E1h, 84h, 91h,	0E1h, 85h, 0A1h, 29h, 0
db 28h,	0E1h, 84h, 92h,	0E1h, 85h, 0A1h, 29h, 0, 28h, 0E1h
db 84h,	8Ch, 0E1h, 85h,	0AEh, 29h, 0, 28h, 0E4h, 0B8h
db 80h,	29h, 0,	28h, 0E4h, 0BAh, 8Ch, 29h, 0, 28h, 0E4h
db 0B8h, 89h, 29h, 0, 28h, 0E5h, 2 dup(9Bh), 29h, 0, 28h
db 0E4h, 0BAh, 94h, 29h, 0, 28h, 0E5h, 85h, 0ADh, 29h
db 0, 28h, 0E4h, 0B8h, 83h, 29h, 0, 28h, 0E5h, 85h, 0ABh
db 29h,	0, 28h,	0E4h, 0B9h, 9Dh, 29h, 0, 28h, 0E5h, 8Dh
db 81h,	29h, 0,	28h, 0E6h, 9Ch,	88h, 29h, 0, 28h, 0E7h
db 81h,	0ABh, 29h, 0, 28h, 0E6h, 0B0h, 0B4h, 29h, 0, 28h
db 0E6h, 9Ch, 0A8h, 29h, 0, 28h, 0E9h, 87h, 91h, 29h, 0
db 28h,	0E5h, 9Ch, 9Fh,	29h, 0,	28h, 0E6h, 97h,	0A5h, 29h
db 0, 28h, 0E6h, 0A0h, 0AAh, 29h, 0, 28h, 0E6h,	9Ch, 89h
db 29h,	0, 28h,	0E7h, 0A4h, 0BEh, 29h, 0, 28h, 0E5h, 90h
db 8Dh,	29h, 0,	28h, 0E7h, 89h,	0B9h, 29h, 0, 28h, 0E8h
db 0B2h, 0A1h, 29h, 0, 28h, 0E7h, 0A5h,	9Dh, 29h, 0, 28h
db 0E5h, 8Ah, 0B4h, 29h, 0, 28h, 0E4h, 0BBh, 0A3h, 29h
db 0, 28h, 0E5h, 91h, 0BCh, 29h, 0, 28h, 0E5h, 0ADh, 0A6h
db 29h,	0, 28h,	0E7h, 9Bh, 0A3h, 29h, 0, 28h, 0E4h, 0BCh
db 81h,	29h, 0,	28h, 0E8h, 0B3h, 87h, 29h, 0, 28h, 0E5h
db 8Dh,	94h, 29h, 0, 28h, 0E7h,	0A5h, 0ADh, 29h, 0, 28h
db 0E4h, 0BCh, 91h, 29h, 0, 28h, 0E8h, 87h, 0AAh, 29h
db 0, 28h, 0E8h, 87h, 0B3h, 29h, 0, 32h, 31h, 0, 2 dup(32h)
db 0, 32h, 33h,	0, 32h,	34h, 0,	32h, 35h, 0, 32h, 36h
db 0, 32h, 37h,	0, 32h,	38h, 0,	32h, 39h, 0, 33h, 30h
db 0, 33h, 31h,	0, 33h,	32h, 0,	2 dup(33h), 0, 33h, 34h
db 0, 33h, 35h,	0, 0E1h, 84h, 80h, 0E1h, 85h, 0A1h, 0
db 0E1h, 84h, 82h, 0E1h, 85h, 0A1h, 0, 0E1h, 84h, 83h
db 0E1h, 85h, 0A1h, 0, 0E1h, 84h, 85h, 0E1h, 85h, 0A1h
db 0, 0E1h, 84h, 86h, 0E1h, 85h, 0A1h, 0, 0E1h,	84h, 87h
db 0E1h, 85h, 0A1h, 0, 0E1h, 84h, 89h, 0E1h, 85h, 0A1h
db 0, 0E1h, 84h, 8Bh, 0E1h, 85h, 0A1h, 0, 0E1h,	84h, 8Ch
db 0E1h, 85h, 0A1h, 0, 0E1h, 84h, 8Eh, 0E1h, 85h, 0A1h
db 0, 0E1h, 84h, 8Fh, 0E1h, 85h, 0A1h, 0, 0E1h,	84h, 90h
db 0E1h, 85h, 0A1h, 0, 0E1h, 84h, 91h, 0E1h, 85h, 0A1h
db 0, 0E1h, 84h, 92h, 0E1h, 85h, 0A1h, 0, 0E4h,	0BAh, 94h
db 0, 0E5h, 85h, 0ADh, 0, 0E4h,	0B8h, 83h, 0, 0E4h, 0B9h
db 9Dh,	0, 0E6h, 0A0h, 0AAh, 0,	0E6h, 9Ch, 89h,	0, 0E7h
db 0A4h, 0BEh, 0, 0E5h,	90h, 8Dh, 0, 0E7h, 89h,	0B9h, 0
db 0E8h, 0B2h, 0A1h, 0,	0E7h, 0A5h, 9Dh, 0, 0E5h, 8Ah
db 0B4h, 0, 0E7h, 0A7h,	98h, 0,	0E7h, 94h, 0B7h, 0, 0E9h
db 81h,	0A9h, 0, 0E5h, 84h, 0AAh, 0, 0E5h, 8Dh,	0B0h, 0
db 0E6h, 0B3h, 0A8h, 0,	0E9h, 0A0h, 85h, 0, 0E4h, 0BCh
db 91h,	0, 0E5h, 86h, 99h, 0, 0E6h, 0ADh, 0A3h,	0, 0E5h
db 0B7h, 0A6h, 0, 0E5h,	8Fh, 0B3h, 0, 0E5h, 8Ch, 0BBh
db 0, 0E5h, 0AEh, 97h, 0, 0E5h,	0ADh, 0A6h, 0, 0E7h, 9Bh
db 0A3h, 0, 0E4h, 0BCh,	81h, 0,	0E8h, 0B3h, 87h, 0, 0E5h
db 8Dh,	94h, 0,	0E5h, 0A4h, 9Ch, 0, 33h, 36h, 0, 33h, 37h
db 0, 33h, 38h,	0, 33h,	39h, 0,	34h, 30h, 0, 34h, 31h
db 0, 34h, 32h,	0, 34h,	33h, 0,	2 dup(34h), 0, 34h, 35h
db 0, 34h, 36h,	0, 34h,	37h, 0,	34h, 38h, 0, 34h, 39h
db 0, 35h, 30h,	0, 31h,	0E6h, 9Ch, 88h,	0, 32h,	0E6h, 9Ch
db 88h,	0, 33h,	0E6h, 9Ch, 88h,	0, 34h,	0E6h, 9Ch, 88h
db 0, 35h, 0E6h, 9Ch, 88h, 0, 36h, 0E6h, 9Ch, 88h, 0, 37h
db 0E6h, 9Ch, 88h, 0, 38h, 0E6h, 9Ch, 88h, 0, 39h, 0E6h
db 9Ch,	88h, 0,	31h, 30h, 0E6h,	9Ch, 88h, 0, 2 dup(31h)
db 0E6h, 9Ch, 88h, 0, 31h, 32h,	0E6h, 9Ch, 88h,	0, 0E3h
db 82h,	0A2h, 0, 0E3h, 82h, 0A4h, 0, 0E3h, 82h,	0A6h, 0
db 0E3h, 82h, 0A8h, 0, 0E3h, 82h, 0AAh,	0, 0E3h, 82h, 0ABh
db 0, 0E3h, 82h, 0ADh, 0, 0E3h,	82h, 0AFh, 0, 0E3h, 82h
db 0B1h, 0, 0E3h, 82h, 0B3h, 0,	0E3h, 82h, 0B5h, 0, 0E3h
db 82h,	0B7h, 0, 0E3h, 82h, 0B9h, 0, 0E3h, 82h,	0BBh, 0
db 0E3h, 82h, 0BDh, 0, 0E3h, 82h, 0BFh,	0, 0E3h, 83h, 81h
db 0, 0E3h, 83h, 84h, 0, 0E3h, 83h, 86h, 0, 0E3h, 83h
db 88h,	0, 0E3h, 83h, 8Ah, 0, 0E3h, 83h, 8Bh, 0, 0E3h
db 83h,	8Ch, 0,	0E3h, 83h, 8Dh,	0, 0E3h, 83h, 8Eh, 0, 0E3h
db 83h,	8Fh, 0,	0E3h, 83h, 92h,	0, 0E3h, 83h, 95h, 0, 0E3h
db 83h,	98h, 0,	0E3h, 83h, 9Bh,	0, 0E3h, 83h, 9Eh, 0, 0E3h
db 83h,	9Fh, 0,	0E3h, 83h, 0A0h, 0, 0E3h, 83h, 0A1h, 0
db 0E3h, 83h, 0A2h, 0, 0E3h, 83h, 0A4h,	0, 0E3h, 83h, 0A6h
db 0, 0E3h, 83h, 0A8h, 0, 0E3h,	83h, 0A9h, 0, 0E3h, 83h
db 0AAh, 0, 0E3h, 83h, 0ABh, 0,	0E3h, 83h, 0ACh, 0, 0E3h
db 83h,	0ADh, 0, 0E3h, 83h, 0AFh, 0, 0E3h, 83h,	0B0h, 0
db 0E3h, 83h, 0B1h, 0, 0E3h, 83h, 0B2h,	0, 0E3h, 82h, 0A2h
db 0E3h, 83h, 8Fh, 0E3h, 82h, 9Ah, 0E3h, 83h, 0BCh, 0E3h
db 83h,	88h, 0,	0E3h, 82h, 0A2h, 0E3h, 83h, 0ABh, 0E3h
db 83h,	95h, 0E3h, 82h,	0A1h, 0, 0E3h, 82h, 0A2h, 0E3h
db 83h,	0B3h, 0E3h, 83h, 98h, 0E3h, 82h, 9Ah, 0E3h, 82h
db 0A2h, 0, 0E3h, 82h, 0A2h, 0E3h, 83h,	0BCh, 0E3h, 83h
db 0ABh, 0, 0E3h, 82h, 0A4h, 0E3h, 83h,	8Bh, 0E3h, 83h
db 0B3h, 0E3h, 82h, 0AFh, 0E3h,	82h, 99h, 0, 0E3h, 82h
db 0A4h, 0E3h, 83h, 0B3h, 0E3h,	83h, 81h, 0, 0E3h, 82h
db 0A6h, 0E3h, 82h, 0A9h, 0E3h,	83h, 0B3h, 0, 0E3h, 82h
db 0A8h, 0E3h, 82h, 0B9h, 0E3h,	82h, 0AFh, 0E3h, 83h, 0BCh
db 0E3h, 83h, 88h, 0E3h, 82h, 99h, 0, 0E3h, 82h, 0A8h
db 0E3h, 83h, 0BCh, 0E3h, 82h, 0ABh, 0E3h, 83h,	0BCh, 0
db 0E3h, 82h, 0AAh, 0E3h, 83h, 0B3h, 0E3h, 82h,	0B9h, 0
db 0E3h, 82h, 0AAh, 0E3h, 83h, 0BCh, 0E3h, 83h,	0A0h, 0
db 0E3h, 82h, 0ABh, 0E3h, 82h, 0A4h, 0E3h, 83h,	0AAh, 0
db 0E3h, 82h, 0ABh, 0E3h, 83h, 0A9h, 0E3h, 2 dup(83h)
db 0E3h, 83h, 88h, 0, 0E3h, 82h, 0ABh, 0E3h, 83h, 0ADh
db 0E3h, 83h, 0AAh, 0E3h, 83h, 0BCh, 0,	0E3h, 82h, 0ABh
db 0E3h, 82h, 99h, 0E3h, 83h, 0ADh, 0E3h, 83h, 0B3h, 0
db 0E3h, 82h, 0ABh, 0E3h, 82h, 99h, 0E3h, 83h, 0B3h, 0E3h
db 83h,	9Eh, 0,	0E3h, 82h, 0ADh, 0E3h, 82h, 99h, 0E3h
db 82h,	0ABh, 0E3h, 82h, 99h, 0, 0E3h, 82h, 0ADh, 0E3h
db 82h,	99h, 0E3h, 83h,	8Bh, 0E3h, 83h,	0BCh, 0, 0E3h
db 82h,	0ADh, 0E3h, 83h, 0A5h, 0E3h, 83h, 0AAh,	0E3h, 83h
db 0BCh, 0, 0E3h, 82h, 0ADh, 0E3h, 82h,	99h, 0E3h, 83h
db 0ABh, 0E3h, 82h, 0BFh, 0E3h,	82h, 99h, 0E3h,	83h, 0BCh
db 0, 0E3h, 82h, 0ADh, 0E3h, 83h, 0ADh,	0, 0E3h, 82h, 0ADh
db 0E3h, 83h, 0ADh, 0E3h, 82h, 0AFh, 0E3h, 82h,	99h, 0E3h
db 83h,	0A9h, 0E3h, 83h, 0A0h, 0, 0E3h,	82h, 0ADh, 0E3h
db 83h,	0ADh, 0E3h, 83h, 0A1h, 0E3h, 83h, 0BCh,	0E3h, 83h
db 88h,	0E3h, 83h, 0ABh, 0, 0E3h, 82h, 0ADh, 0E3h, 83h
db 0ADh, 0E3h, 83h, 0AFh, 0E3h,	2 dup(83h), 0E3h, 83h
db 88h,	0, 0E3h, 82h, 0AFh, 0E3h, 82h, 99h, 0E3h, 83h
db 0A9h, 0E3h, 83h, 0A0h, 0, 0E3h, 82h,	0AFh, 0E3h, 82h
db 99h,	0E3h, 83h, 0A9h, 0E3h, 83h, 0A0h, 0E3h,	83h, 88h
db 0E3h, 83h, 0B3h, 0, 0E3h, 82h, 0AFh,	0E3h, 83h, 0ABh
db 0E3h, 82h, 0BBh, 0E3h, 82h, 99h, 0E3h, 82h, 0A4h, 0E3h
db 83h,	0ADh, 0, 0E3h, 82h, 0AFh, 0E3h,	83h, 0ADh, 0E3h
db 83h,	0BCh, 0E3h, 83h, 8Dh, 0, 0E3h, 82h, 0B1h, 0E3h
db 83h,	0BCh, 0E3h, 82h, 0B9h, 0, 0E3h,	82h, 0B3h, 0E3h
db 83h,	0ABh, 0E3h, 83h, 8Ah, 0, 0E3h, 82h, 0B3h, 0E3h
db 83h,	0BCh, 0E3h, 83h, 9Bh, 0E3h, 82h, 9Ah, 0, 0E3h
db 82h,	0B5h, 0E3h, 82h, 0A4h, 0E3h, 82h, 0AFh,	0E3h, 83h
db 0ABh, 0, 0E3h, 82h, 0B5h, 0E3h, 83h,	0B3h, 0E3h, 83h
db 81h,	0E3h, 83h, 0BCh, 0E3h, 83h, 0A0h, 0, 0E3h, 82h
db 0B7h, 0E3h, 83h, 0AAh, 0E3h,	83h, 0B3h, 0E3h, 82h, 0AFh
db 0E3h, 82h, 99h, 0, 0E3h, 82h, 0BBh, 0E3h, 83h, 0B3h
db 0E3h, 83h, 81h, 0, 0E3h, 82h, 0BBh, 0E3h, 83h, 0B3h
db 0E3h, 83h, 88h, 0, 0E3h, 82h, 0BFh, 0E3h, 82h, 99h
db 0E3h, 83h, 0BCh, 0E3h, 82h, 0B9h, 0,	0E3h, 83h, 86h
db 0E3h, 82h, 99h, 0E3h, 82h, 0B7h, 0, 0E3h, 83h, 88h
db 0E3h, 82h, 99h, 0E3h, 83h, 0ABh, 0, 0E3h, 83h, 88h
db 0E3h, 83h, 0B3h, 0, 0E3h, 83h, 8Ah, 0E3h, 83h, 8Eh
db 0, 0E3h, 83h, 8Eh, 0E3h, 2 dup(83h),	0E3h, 83h, 88h
db 0, 0E3h, 83h, 8Fh, 0E3h, 82h, 0A4h, 0E3h, 83h, 84h
db 0, 0E3h, 83h, 8Fh, 0E3h, 82h, 9Ah, 0E3h, 83h, 0BCh
db 0E3h, 82h, 0BBh, 0E3h, 83h, 0B3h, 0E3h, 83h,	88h, 0
db 0E3h, 83h, 8Fh, 0E3h, 82h, 9Ah, 0E3h, 83h, 0BCh, 0E3h
db 83h,	84h, 0,	0E3h, 83h, 8Fh,	0E3h, 82h, 99h,	0E3h, 83h
db 0BCh, 0E3h, 83h, 0ACh, 0E3h,	83h, 0ABh, 0, 0E3h, 83h
db 92h,	0E3h, 82h, 9Ah,	0E3h, 82h, 0A2h, 0E3h, 82h, 0B9h
db 0E3h, 83h, 88h, 0E3h, 83h, 0ABh, 0, 0E3h, 83h, 92h
db 0E3h, 82h, 9Ah, 0E3h, 82h, 0AFh, 0E3h, 83h, 0ABh, 0
db 0E3h, 83h, 92h, 0E3h, 82h, 9Ah, 0E3h, 82h, 0B3h, 0
db 0E3h, 83h, 92h, 0E3h, 82h, 99h, 0E3h, 83h, 0ABh, 0
db 0E3h, 83h, 95h, 0E3h, 82h, 0A1h, 0E3h, 83h, 0A9h, 0E3h
db 2 dup(83h), 0E3h, 83h, 88h, 0E3h, 82h, 99h, 0, 0E3h
db 83h,	95h, 0E3h, 82h,	0A3h, 0E3h, 83h, 0BCh, 0E3h, 83h
db 88h,	0, 0E3h, 83h, 95h, 0E3h, 82h, 99h, 0E3h, 2 dup(83h)
db 0E3h, 82h, 0B7h, 0E3h, 82h, 0A7h, 0E3h, 83h,	0ABh, 0
db 0E3h, 83h, 95h, 0E3h, 83h, 0A9h, 0E3h, 83h, 0B3h, 0
db 0E3h, 83h, 98h, 0E3h, 82h, 0AFh, 0E3h, 82h, 0BFh, 0E3h
db 83h,	0BCh, 0E3h, 83h, 0ABh, 0, 0E3h,	83h, 98h, 0E3h
db 82h,	9Ah, 0E3h, 82h,	0BDh, 0, 0E3h, 83h, 98h, 0E3h
db 82h,	9Ah, 0E3h, 83h,	8Bh, 0E3h, 83h,	92h, 0,	0E3h, 83h
db 98h,	0E3h, 83h, 0ABh, 0E3h, 83h, 84h, 0, 0E3h, 83h
db 98h,	0E3h, 82h, 9Ah,	0E3h, 83h, 0B3h, 0E3h, 82h, 0B9h
db 0, 0E3h, 83h, 98h, 0E3h, 82h, 9Ah, 0E3h, 83h, 0BCh
db 0E3h, 82h, 0B7h, 0E3h, 82h, 99h, 0, 0E3h, 83h, 98h
db 0E3h, 82h, 99h, 0E3h, 83h, 0BCh, 0E3h, 82h, 0BFh, 0
db 0E3h, 83h, 9Bh, 0E3h, 82h, 9Ah, 0E3h, 82h, 0A4h, 0E3h
db 83h,	0B3h, 0E3h, 83h, 88h, 0, 0E3h, 83h, 9Bh, 0E3h
db 82h,	99h, 0E3h, 83h,	0ABh, 0E3h, 83h, 88h, 0, 0E3h
db 83h,	9Bh, 0E3h, 83h,	0B3h, 0, 0E3h, 83h, 9Bh, 0E3h
db 82h,	9Ah, 0E3h, 83h,	0B3h, 0E3h, 83h, 88h, 0E3h, 82h
db 99h,	0, 0E3h, 83h, 9Bh, 0E3h, 83h, 0BCh, 0E3h, 83h
db 0ABh, 0, 0E3h, 83h, 9Bh, 0E3h, 83h, 0BCh, 0E3h, 83h
db 0B3h, 0, 0E3h, 83h, 9Eh, 0E3h, 82h, 0A4h, 0E3h, 82h
db 0AFh, 0E3h, 83h, 0ADh, 0, 0E3h, 83h,	9Eh, 0E3h, 82h
db 0A4h, 0E3h, 83h, 0ABh, 0, 0E3h, 83h,	9Eh, 0E3h, 2 dup(83h)
db 0E3h, 83h, 8Fh, 0, 0E3h, 83h, 9Eh, 0E3h, 83h, 0ABh
db 0E3h, 82h, 0AFh, 0, 0E3h, 83h, 9Eh, 0E3h, 83h, 0B3h
db 0E3h, 82h, 0B7h, 0E3h, 83h, 0A7h, 0E3h, 83h,	0B3h, 0
db 0E3h, 83h, 9Fh, 0E3h, 82h, 0AFh, 0E3h, 83h, 0ADh, 0E3h
db 83h,	0B3h, 0, 0E3h, 83h, 9Fh, 0E3h, 83h, 0AAh, 0, 0E3h
db 83h,	9Fh, 0E3h, 83h,	0AAh, 0E3h, 83h, 8Fh, 0E3h, 82h
db 99h,	0E3h, 83h, 0BCh, 0E3h, 83h, 0ABh, 0, 0E3h, 83h
db 0A1h, 0E3h, 82h, 0ABh, 0E3h,	82h, 99h, 0, 0E3h, 83h
db 0A1h, 0E3h, 82h, 0ABh, 0E3h,	82h, 99h, 0E3h,	83h, 88h
db 0E3h, 83h, 0B3h, 0, 0E3h, 83h, 0A1h,	0E3h, 83h, 0BCh
db 0E3h, 83h, 88h, 0E3h, 83h, 0ABh, 0, 0E3h, 83h, 0A4h
db 0E3h, 83h, 0BCh, 0E3h, 83h, 88h, 0E3h, 82h, 99h, 0
db 0E3h, 83h, 0A4h, 0E3h, 83h, 0BCh, 0E3h, 83h,	0ABh, 0
db 0E3h, 83h, 0A6h, 0E3h, 82h, 0A2h, 0E3h, 83h,	0B3h, 0
db 0E3h, 83h, 0AAh, 0E3h, 2 dup(83h), 0E3h, 83h, 88h, 0E3h
db 83h,	0ABh, 0, 0E3h, 83h, 0AAh, 0E3h,	83h, 0A9h, 0, 0E3h
db 83h,	0ABh, 0E3h, 83h, 92h, 0E3h, 82h, 9Ah, 0E3h, 83h
db 0BCh, 0, 0E3h, 83h, 0ABh, 0E3h, 83h,	0BCh, 0E3h, 83h
db 95h,	0E3h, 82h, 99h,	0E3h, 83h, 0ABh, 0, 0E3h, 83h
db 0ACh, 0E3h, 83h, 0A0h, 0, 0E3h, 83h,	0ACh, 0E3h, 83h
db 0B3h, 0E3h, 83h, 88h, 0E3h, 82h, 0B1h, 0E3h,	82h, 99h
db 0E3h, 83h, 0B3h, 0, 0E3h, 83h, 0AFh,	0E3h, 2	dup(83h)
db 0E3h, 83h, 88h, 0, 30h, 0E7h, 82h, 0B9h, 0, 31h, 0E7h
db 82h,	0B9h, 0, 32h, 0E7h, 82h, 0B9h, 0, 33h, 0E7h, 82h
db 0B9h, 0, 34h, 0E7h, 82h, 0B9h, 0, 35h, 0E7h,	82h, 0B9h
db 0, 36h, 0E7h, 82h, 0B9h, 0, 37h, 0E7h, 82h, 0B9h, 0
db 38h,	0E7h, 82h, 0B9h, 0, 39h, 0E7h, 82h, 0B9h, 0, 31h
db 30h,	0E7h, 82h, 0B9h, 0, 2 dup(31h),	0E7h, 82h, 0B9h
db 0, 31h, 32h,	0E7h, 82h, 0B9h, 0, 31h, 33h, 0E7h, 82h
db 0B9h, 0, 31h, 34h, 0E7h, 82h, 0B9h, 0, 31h, 35h, 0E7h
db 82h,	0B9h, 0, 31h, 36h, 0E7h, 82h, 0B9h, 0, 31h, 37h
db 0E7h, 82h, 0B9h, 0, 31h, 38h, 0E7h, 82h, 0B9h, 0, 31h
db 39h,	0E7h, 82h, 0B9h, 0, 32h, 30h, 0E7h, 82h, 0B9h
db 0, 32h, 31h,	0E7h, 82h, 0B9h, 0, 2 dup(32h),	0E7h, 82h
db 0B9h, 0, 32h, 33h, 0E7h, 82h, 0B9h, 0, 32h, 34h, 0E7h
db 82h,	0B9h, 0, 68h, 50h, 61h,	0, 64h,	61h, 0,	41h, 55h
db 0, 62h, 61h,	72h, 0,	6Fh, 56h, 0, 70h, 63h, 0, 0E5h
db 0B9h, 0B3h, 0E6h, 88h, 90h, 0, 0E6h,	98h, 0ADh, 0E5h
db 92h,	8Ch, 0,	0E5h, 0A4h, 0A7h, 0E6h,	0ADh, 0A3h, 0
db 0E6h, 98h, 8Eh, 0E6h, 0B2h, 0BBh, 0,	0E6h, 0A0h, 0AAh
db 0E5h, 0BCh, 8Fh, 0E4h, 0BCh,	9Ah, 0E7h, 0A4h, 0BEh
db 0, 70h, 41h,	0, 6Eh,	41h, 0,	0CEh, 0BCh, 41h, 0, 6Dh
db 41h,	0, 6Bh,	41h, 0,	4Bh, 42h, 0, 4Dh, 42h, 0, 47h
db 42h,	0, 63h,	61h, 6Ch, 0, 6Bh, 63h, 61h, 6Ch, 0, 70h
db 46h,	0, 6Eh,	46h, 0,	0CEh, 0BCh, 46h, 0, 0CEh, 0BCh
db 67h,	0, 6Dh,	67h, 0,	6Bh, 67h, 0, 48h, 7Ah, 0, 6Bh
db 48h,	7Ah, 0,	4Dh, 48h, 7Ah, 0, 47h, 48h, 7Ah, 0, 54h
db 48h,	7Ah, 0,	0CEh, 0BCh, 6Ch, 0, 6Dh, 6Ch, 0, 64h, 6Ch
db 0, 6Bh, 6Ch,	0, 66h,	6Dh, 0,	6Eh, 6Dh, 0, 0CEh, 0BCh
db 6Dh,	0, 2 dup(6Dh), 0, 63h, 6Dh, 0, 6Bh, 6Dh, 0, 2 dup(6Dh)
db 32h,	0, 63h,	6Dh, 32h, 0, 6Dh, 32h, 0, 6Bh, 6Dh, 32h
db 0, 2	dup(6Dh), 33h, 0, 63h, 6Dh, 33h, 0, 6Dh, 33h, 0
db 6Bh,	6Dh, 33h, 0, 6Dh, 0E2h,	88h, 95h, 73h, 0, 6Dh
db 0E2h, 88h, 95h, 73h,	32h, 0,	50h, 61h, 0, 6Bh, 50h
db 61h,	0, 4Dh,	50h, 61h, 0, 47h, 50h, 61h, 0, 72h, 61h
db 64h,	0, 72h,	61h, 64h, 0E2h,	88h, 95h, 73h, 0, 72h
db 61h,	64h, 0E2h, 88h,	95h, 73h, 32h, 0, 70h, 73h, 0
db 6Eh,	73h, 0,	0CEh, 0BCh, 73h, 0, 6Dh, 73h, 0, 70h, 56h
db 0, 6Eh, 56h,	0, 0CEh, 0BCh, 56h, 0, 6Dh, 56h, 0, 6Bh
db 56h,	0, 4Dh,	56h, 0,	70h, 57h, 0, 6Eh, 57h, 0, 0CEh
db 0BCh, 57h, 0, 6Dh, 57h, 0, 6Bh, 57h,	0, 4Dh,	57h, 0
db 6Bh,	0CEh, 0A9h, 0, 4Dh, 0CEh, 0A9h,	0, 61h,	2Eh, 6Dh
db 2Eh,	0, 42h,	71h, 0,	2 dup(63h), 0, 63h, 64h, 0, 43h
db 0E2h, 88h, 95h, 6Bh,	67h, 0,	43h, 6Fh, 2Eh, 0, 64h
db 42h,	0, 47h,	79h, 0,	68h, 61h, 0, 48h, 50h, 0, 69h
db 6Eh,	0, 2 dup(4Bh), 0, 4Bh, 4Dh, 0, 6Bh, 74h, 0, 6Ch
db 6Dh,	0, 6Ch,	6Eh, 0,	6Ch, 6Fh, 67h, 0, 6Ch, 78h, 0
db 6Dh,	62h, 0,	6Dh, 69h, 6Ch, 0, 6Dh, 6Fh, 6Ch, 0, 50h
db 48h,	0, 70h,	2Eh, 6Dh, 2Eh, 0, 2 dup(50h), 4Dh, 0, 50h
db 52h,	0, 73h,	72h, 0,	53h, 76h, 0, 57h, 62h, 0, 31h
db 0E6h, 97h, 0A5h, 0, 32h, 0E6h, 97h, 0A5h, 0,	33h, 0E6h
db 97h,	0A5h, 0, 34h, 0E6h, 97h, 0A5h, 0, 35h, 0E6h, 97h
db 0A5h, 0, 36h, 0E6h, 97h, 0A5h, 0, 37h, 0E6h,	97h, 0A5h
db 0, 38h, 0E6h, 97h, 0A5h, 0, 39h, 0E6h, 97h, 0A5h, 0
db 31h,	30h, 0E6h, 97h,	0A5h, 0, 2 dup(31h), 0E6h, 97h
db 0A5h, 0, 31h, 32h, 0E6h, 97h, 0A5h, 0, 31h, 33h, 0E6h
db 97h,	0A5h, 0, 31h, 34h, 0E6h, 97h, 0A5h, 0, 31h, 35h
db 0E6h, 97h, 0A5h, 0, 31h, 36h, 0E6h, 97h, 0A5h, 0, 31h
db 37h,	0E6h, 97h, 0A5h, 0, 31h, 38h, 0E6h, 97h, 0A5h
db 0, 31h, 39h,	0E6h, 97h, 0A5h, 0, 32h, 30h, 0E6h, 97h
db 0A5h, 0, 32h, 31h, 0E6h, 97h, 0A5h, 0, 2 dup(32h), 0E6h
db 97h,	0A5h, 0, 32h, 33h, 0E6h, 97h, 0A5h, 0, 32h, 34h
db 0E6h, 97h, 0A5h, 0, 32h, 35h, 0E6h, 97h, 0A5h, 0, 32h
db 36h,	0E6h, 97h, 0A5h, 0, 32h, 37h, 0E6h, 97h, 0A5h
db 0, 32h, 38h,	0E6h, 97h, 0A5h, 0, 32h, 39h, 0E6h, 97h
db 0A5h, 0, 33h, 30h, 0E6h, 97h, 0A5h, 0, 33h, 31h, 0E6h
db 97h,	0A5h, 0, 0E8h, 0B1h, 88h, 0, 0E6h, 9Bh,	0B4h, 0
db 0E8h, 0B3h, 88h, 0, 0E6h, 0BBh, 91h,	0, 0E4h, 0B8h
db 0B2h, 0, 0E5h, 8Fh, 0A5h, 0,	0E5h, 0A5h, 91h, 0, 0E5h
db 96h,	87h, 0,	0E5h, 0A5h, 88h, 0, 0E6h, 87h, 0B6h, 0
db 0E7h, 99h, 0A9h, 0, 0E7h, 0BEh, 85h,	0, 0E8h, 98h, 0BFh
db 0, 0E8h, 9Eh, 0BAh, 0, 0E8h,	0A3h, 0B8h, 0, 0E9h, 82h
db 8Fh,	0, 0E6h, 0A8h, 82h, 0, 0E6h, 0B4h, 9Bh,	0, 0E7h
db 83h,	99h, 0,	0E7h, 8Fh, 9Eh,	0, 0E8h, 90h, 0BDh, 0
db 0E9h, 85h, 0AAh, 0, 0E9h, 0A7h, 0B1h, 0, 0E4h, 0BAh
db 82h,	0, 0E5h, 8Dh, 0B5h, 0, 0E6h, 0ACh, 84h,	0, 0E7h
db 88h,	9Bh, 0,	0E8h, 98h, 0ADh, 0, 0E9h, 0B8h,	9Eh, 0
db 0E5h, 0B5h, 90h, 0, 0E6h, 0BFh, 0ABh, 0, 0E8h, 97h
db 8Dh,	0, 0E8h, 0A5h, 0A4h, 0,	0E6h, 8Bh, 89h,	0, 0E8h
db 87h,	98h, 0,	0E8h, 0A0h, 9Fh, 0, 0E5h, 0BBh,	8Ah, 0
db 0E6h, 9Ch, 97h, 0, 0E6h, 0B5h, 0AAh,	0, 0E7h, 8Bh, 0BCh
db 0, 0E9h, 83h, 8Eh, 0, 0E4h, 0BEh, 86h, 0, 0E5h, 86h
db 0B7h, 0, 0E5h, 8Bh, 9Eh, 0, 0E6h, 93h, 84h, 0, 0E6h
db 0ABh, 93h, 0, 0E7h, 88h, 90h, 0, 0E7h, 9Bh, 0A7h, 0
db 0E8h, 98h, 86h, 0, 0E8h, 99h, 9Ch, 0, 0E8h, 0B7h, 0AFh
db 0, 0E9h, 9Ch, 0B2h, 0, 0E9h,	0ADh, 0AFh, 0, 0E9h, 0B7h
db 0BAh, 0, 0E7h, 0A2h,	8Ch, 0,	0E7h, 0A5h, 0BFh, 0, 0E7h
db 0B6h, 0A0h, 0, 0E8h,	8Fh, 89h, 0, 0E9h, 8Ch,	84h, 0
db 0E8h, 0ABh, 96h, 0, 0E5h, 0A3h, 9Fh,	0, 0E5h, 0BCh
db 84h,	0, 0E7h, 0B1h, 0A0h, 0,	0E8h, 81h, 0BEh, 0, 0E7h
db 89h,	0A2h, 0, 0E7h, 0A3h, 8Ah, 0, 0E8h, 0B3h, 82h, 0
db 0E9h, 9Bh, 0B7h, 0, 0E5h, 0A3h, 98h,	0, 0E5h, 0B1h
db 0A2h, 0, 0E6h, 0A8h,	93h, 0,	0E6h, 0B7h, 9Ah, 0, 0E6h
db 0BCh, 8Fh, 0, 0E7h, 0B4h, 0AFh, 0, 0E7h, 0B8h, 0B7h
db 0, 0E9h, 99h, 8Bh, 0, 0E5h, 8Bh, 92h, 0, 0E8h, 82h
db 8Bh,	0, 0E5h, 87h, 9Ch, 0, 0E5h, 87h, 8Ch, 0, 0E7h
db 0A8h, 9Ch, 0, 0E7h, 0B6h, 0BEh, 0, 0E8h, 8Fh, 0B1h
db 0, 0E9h, 99h, 0B5h, 0, 0E8h,	0AEh, 80h, 0, 0E6h, 8Bh
db 8Fh,	0, 0E8h, 0ABh, 0BEh, 0,	0E4h, 0B8h, 0B9h, 0, 0E5h
db 0AFh, 0A7h, 0, 0E6h,	80h, 92h, 0, 0E7h, 8Eh,	87h, 0
db 0E7h, 95h, 0B0h, 0, 0E5h, 8Ch, 97h, 0, 0E7h,	0A3h, 0BBh
db 0, 0E4h, 0BEh, 0BFh,	0, 0E5h, 0BEh, 0A9h, 0,	0E4h, 0B8h
db 8Dh,	0, 0E6h, 0B3h, 8Ch, 0, 0E6h, 95h, 0B8h,	0, 0E7h
db 0B4h, 0A2h, 0, 0E5h,	8Fh, 83h, 0, 0E5h, 0A1h, 9Eh, 0
db 0E7h, 9Ch, 81h, 0, 0E8h, 91h, 89h, 0, 0E8h, 2 dup(0AAh)
db 0, 0E6h, 0AEh, 0BAh,	0, 0E6h, 0B2h, 88h, 0, 0E6h, 8Bh
db 0BEh, 0, 0E8h, 8Bh, 0A5h, 0,	0E6h, 8Eh, 0A0h, 0, 0E7h
db 95h,	0A5h, 0, 0E4h, 0BAh, 0AEh, 0, 0E5h, 85h, 0A9h
db 0, 0E5h, 87h, 89h, 0, 0E6h, 0A2h, 81h, 0, 0E7h, 0B3h
db 0A7h, 0, 0E8h, 89h, 0AFh, 0,	0E8h, 0ABh, 92h, 0, 0E9h
db 87h,	8Fh, 0,	0E5h, 8Bh, 0B5h, 0, 0E5h, 91h, 82h, 0
db 0E5h, 0BBh, 0ACh, 0,	0E6h, 97h, 85h,	0, 0E6h, 0BFh
db 0BEh, 0, 0E7h, 0A4h,	0AAh, 0, 0E9h, 96h, 0ADh, 0, 0E9h
db 0A9h, 0AAh, 0, 0E9h,	0BAh, 97h, 0, 0E9h, 0BBh, 8Eh
db 0, 0E6h, 9Bh, 86h, 0, 0E6h, 0ADh, 0B7h, 0, 0E8h, 0BDh
db 0A2h, 0, 0E5h, 0B9h,	0B4h, 0, 0E6h, 86h, 90h, 0, 0E6h
db 88h,	80h, 0,	0E6h, 92h, 9Ah,	0, 0E6h, 0BCh, 0A3h, 0
db 0E7h, 85h, 89h, 0, 0E7h, 92h, 89h, 0, 0E7h, 0A7h, 8Ah
db 0, 0E7h, 0B7h, 0B4h,	0, 0E8h, 81h, 0AFh, 0, 0E8h, 0BCh
db 0A6h, 0, 0E8h, 93h, 0AEh, 0,	0E9h, 80h, 0A3h, 0, 0E9h
db 8Dh,	8Ah, 0,	0E5h, 88h, 97h,	0, 0E5h, 8Ah, 0A3h, 0
db 0E5h, 92h, 0BDh, 0, 0E7h, 83h, 88h, 0, 0E8h,	0A3h, 82h
db 0, 0E5h, 0BBh, 89h, 0, 0E5h,	0BFh, 0B5h, 0, 0E6h, 8Dh
db 0BBh, 0, 0E6h, 2 dup(0AEh), 0, 0E7h,	0B0h, 0BEh, 0
db 0E7h, 8Dh, 0B5h, 0, 0E4h, 0BBh, 0A4h, 0, 0E5h, 9Bh
db 0B9h, 0, 0E5h, 0B6h,	0BAh, 0, 0E6h, 80h, 9Ch, 0, 0E7h
db 8Eh,	0B2h, 0, 0E7h, 91h, 0A9h, 0, 0E7h, 0BEh, 9Ah, 0
db 0E8h, 81h, 86h, 0, 0E9h, 88h, 0B4h, 0, 0E9h,	9Bh, 0B6h
db 0, 0E9h, 9Dh, 88h, 0, 0E9h, 0A0h, 98h, 0, 0E4h, 0BEh
db 8Bh,	0, 0E7h, 0A6h, 0AEh, 0,	0E9h, 86h, 0B4h, 0, 0E9h
db 9Ah,	0B8h, 0, 0E6h, 83h, 0A1h, 0, 0E4h, 0BAh, 86h, 0
db 0E5h, 83h, 9Ah, 0, 0E5h, 0AFh, 0AEh,	0, 0E5h, 0B0h
db 0BFh, 0, 0E6h, 96h, 99h, 0, 0E7h, 87h, 8Eh, 0, 0E7h
db 99h,	82h, 0,	0E8h, 93h, 0BCh, 0, 0E9h, 81h, 0BCh, 0
db 0E6h, 9Ah, 88h, 0, 0E9h, 98h, 0AEh, 0, 0E5h,	8Ah, 89h
db 0, 0E6h, 9Dh, 0BBh, 0, 0E6h,	9Fh, 0B3h, 0, 0E6h, 0B5h
db 81h,	0, 0E6h, 0BAh, 9Ch, 0, 0E7h, 90h, 89h, 0, 0E7h
db 95h,	99h, 0,	0E7h, 0A1h, 0ABh, 0, 0E7h, 0B4h, 90h, 0
db 0E9h, 0A1h, 9Eh, 0, 0E6h, 88h, 0AEh,	0, 0E9h, 99h, 0B8h
db 0, 0E5h, 80h, 0ABh, 0, 0E5h,	0B4h, 99h, 0, 0E6h, 0B7h
db 0AAh, 0, 0E8h, 0BCh,	0AAh, 0, 0E5h, 0BEh, 8Bh, 0, 0E6h
db 85h,	84h, 0,	0E6h, 0A0h, 97h, 0, 0E9h, 9Ah, 86h, 0
db 0E5h, 88h, 0A9h, 0, 0E5h, 90h, 8Fh, 0, 0E5h,	0B1h, 0A5h
db 0, 0E6h, 98h, 93h, 0, 0E6h, 9Dh, 8Eh, 0, 0E6h, 0A2h
db 0A8h, 0, 0E6h, 0B3h,	0A5h, 0, 0E7h, 90h, 86h, 0, 0E7h
db 97h,	0A2h, 0, 0E7h, 0BDh, 0B9h, 0, 0E8h, 0A3h, 8Fh
db 0, 0E8h, 0A3h, 0A1h,	0, 0E9h, 9Bh, 0A2h, 0, 0E5h, 8Ch
db 0BFh, 0, 0E6h, 2 dup(0BAh), 0, 0E5h,	90h, 9Dh, 0, 0E7h
db 87h,	90h, 0,	0E7h, 92h, 98h,	0, 0E8h, 97h, 0BAh, 0
db 0E9h, 9Ah, 0A3h, 0, 0E9h, 0B1h, 97h,	0, 0E9h, 0BAh
db 9Fh,	0, 0E6h, 9Eh, 97h, 0, 0E6h, 0B7h, 8Bh, 0, 0E8h
db 87h,	0A8h, 0, 0E7h, 0ACh, 0A0h, 0, 0E7h, 0B2h, 92h
db 0, 0E7h, 8Bh, 80h, 0, 0E7h, 82h, 99h, 0, 0E8h, 0ADh
db 98h,	0, 0E4h, 0BBh, 80h, 0, 0E8h, 8Ch, 0B6h,	0, 0E5h
db 88h,	0BAh, 0, 0E5h, 88h, 87h, 0, 0E5h, 0BAh,	0A6h, 0
db 0E6h, 8Bh, 93h, 0, 0E7h, 0B3h, 96h, 0, 0E5h,	0AEh, 85h
db 0, 0E6h, 0B4h, 9Eh, 0, 0E6h,	9Ah, 0B4h, 0, 0E8h, 0BCh
db 0BBh, 0, 0E9h, 99h, 8Dh, 0, 0E5h, 0BBh, 93h,	0, 0E5h
db 85h,	80h, 0,	0E5h, 97h, 80h,	0, 0E5h, 0A1h, 9Ah, 0
db 0E6h, 99h, 0B4h, 0, 0E5h, 87h, 9Eh, 0, 0E7h,	8Ch, 0AAh
db 0, 0E7h, 9Bh, 8Ah, 0, 0E7h, 0A4h, 0BCh, 0, 0E7h, 0A5h
db 9Eh,	0, 0E7h, 2 dup(0A5h), 0, 0E7h, 0A6h, 8Fh, 0, 0E9h
db 9Dh,	96h, 0,	0E7h, 0B2h, 0BEh, 0, 0E8h, 98h,	92h, 0
db 0E8h, 0ABh, 0B8h, 0,	0E9h, 80h, 0B8h, 0, 0E9h, 83h
db 0BDh, 0, 0E9h, 0A3h,	0AFh, 0, 0E9h, 0A3h, 0BCh, 0, 0E9h
db 0A4h, 0A8h, 0, 0E9h,	0B6h, 0B4h, 0, 0E4h, 0BEh, 0AEh
db 0, 0E5h, 83h, 0A7h, 0, 0E5h,	85h, 8Dh, 0, 0E5h, 8Bh
db 89h,	0, 0E5h, 8Bh, 0A4h, 0, 0E5h, 8Dh, 91h, 0, 0E5h
db 96h,	9Dh, 0,	0E5h, 98h, 86h,	0, 0E5h, 99h, 0A8h, 0
db 0E5h, 0A1h, 80h, 0, 0E5h, 0A2h, 0A8h, 0, 0E5h, 0B1h
db 0A4h, 0, 0E6h, 82h, 94h, 0, 0E6h, 85h, 0A8h,	0, 0E6h
db 86h,	8Eh, 0,	0E6h, 87h, 0B2h, 0, 0E6h, 95h, 8Fh, 0
db 0E6h, 97h, 0A2h, 0, 0E6h, 9Ah, 91h, 0, 0E6h,	0A2h, 85h
db 0, 0E6h, 0B5h, 0B7h,	0, 0E6h, 0B8h, 9Ah, 0, 0E6h, 0BCh
db 0A2h, 0, 0E7h, 85h, 0AEh, 0,	0E7h, 88h, 0ABh, 0, 0E7h
db 90h,	0A2h, 0, 0E7h, 0A2h, 91h, 0, 0E7h, 0A5h, 89h, 0
db 0E7h, 0A5h, 88h, 0, 0E7h, 0A5h, 90h,	0, 0E7h, 0A5h
db 96h,	0, 0E7h, 0A6h, 8Dh, 0, 0E7h, 0A6h, 8Eh,	0, 0E7h
db 0A9h, 80h, 0, 0E7h, 0AAh, 81h, 0, 0E7h, 0AFh, 80h, 0
db 0E7h, 0B8h, 89h, 0, 0E7h, 0B9h, 81h,	0, 0E7h, 0BDh
db 0B2h, 0, 0E8h, 80h, 85h, 0, 0E8h, 87h, 0ADh,	0, 0E8h
db 89h,	0B9h, 0, 0E8h, 91h, 97h, 0, 0E8h, 0A4h,	90h, 0
db 0E8h, 0A6h, 96h, 0, 0E8h, 0ACh, 81h,	0, 0E8h, 0ACh
db 0B9h, 0, 0E8h, 0B3h,	93h, 0,	0E8h, 0B4h, 88h, 0, 0E8h
db 0BEh, 0B6h, 0, 0E9h,	9Bh, 0A3h, 0, 0E9h, 9Fh, 0BFh
db 0, 0E9h, 0A0h, 0BBh,	0, 2 dup(66h), 0, 66h, 69h, 0
db 66h,	6Ch, 0,	2 dup(66h), 69h, 0, 2 dup(66h),	6Ch, 0
db 73h,	74h, 0,	0D5h, 0B4h, 0D5h, 0B6h,	0, 0D5h, 0B4h
db 0D5h, 0A5h, 0, 0D5h,	0B4h, 0D5h, 0ABh, 0, 0D5h, 0BEh
db 0D5h, 0B6h, 0, 0D5h,	0B4h, 0D5h, 0ADh, 0, 0D7h, 99h
db 0D6h, 0B4h, 0, 0D7h,	0B2h, 0D6h, 0B7h, 0, 0D7h, 0A2h
db 0, 0D7h, 94h, 0, 0D7h, 9Bh, 0, 0D7h,	9Ch, 0,	0D7h, 9Dh
db 0, 0D7h, 0A8h, 0, 0D7h, 0AAh, 0, 0D7h, 0A9h,	0D7h, 81h
db 0, 0D7h, 0A9h, 0D7h,	82h, 0,	0D7h, 0A9h, 0D6h, 0BCh
db 0D7h, 81h, 0, 0D7h, 0A9h, 0D6h, 0BCh, 0D7h, 82h, 0
db 0D7h, 90h, 0D6h, 0B7h, 0, 0D7h, 90h,	0D6h, 0B8h, 0
db 0D7h, 90h, 0D6h, 0BCh, 0, 0D7h, 91h,	0D6h, 0BCh, 0
db 0D7h, 92h, 0D6h, 0BCh, 0, 0D7h, 93h,	0D6h, 0BCh, 0
db 0D7h, 94h, 0D6h, 0BCh, 0, 0D7h, 95h,	0D6h, 0BCh, 0
db 0D7h, 96h, 0D6h, 0BCh, 0, 0D7h, 98h,	0D6h, 0BCh, 0
db 0D7h, 99h, 0D6h, 0BCh, 0, 0D7h, 9Ah,	0D6h, 0BCh, 0
db 0D7h, 9Bh, 0D6h, 0BCh, 0, 0D7h, 9Ch,	0D6h, 0BCh, 0
db 0D7h, 9Eh, 0D6h, 0BCh, 0, 0D7h, 0A0h, 0D6h, 0BCh, 0
db 0D7h, 0A1h, 0D6h, 0BCh, 0, 0D7h, 0A3h, 0D6h,	0BCh, 0
db 0D7h, 0A4h, 0D6h, 0BCh, 0, 0D7h, 0A6h, 0D6h,	0BCh, 0
db 0D7h, 0A7h, 0D6h, 0BCh, 0, 0D7h, 0A8h, 0D6h,	0BCh, 0
db 0D7h, 0A9h, 0D6h, 0BCh, 0, 0D7h, 0AAh, 0D6h,	0BCh, 0
db 0D7h, 95h, 0D6h, 0B9h, 0, 0D7h, 91h,	0D6h, 0BFh, 0
db 0D7h, 9Bh, 0D6h, 0BFh, 0, 0D7h, 0A4h, 0D6h, 0BFh, 0
db 0D7h, 90h, 0D7h, 9Ch, 0, 0D9h, 0B1h,	0, 0D9h, 0BBh
db 0, 0D9h, 0BEh, 0, 0DAh, 80h,	0, 0D9h, 0BAh, 0, 0D9h
db 0BFh, 0, 0D9h, 0B9h,	0, 0DAh, 0A4h, 0, 0DAh,	0A6h, 0
db 0DAh, 84h, 0, 0DAh, 83h, 0, 0DAh, 86h, 0, 0DAh, 87h
db 0, 0DAh, 8Dh, 0, 0DAh, 8Ch, 0, 0DAh,	8Eh, 0,	0DAh, 88h
db 0, 0DAh, 98h, 0, 0DAh, 91h, 0, 0DAh,	0A9h, 0, 0DAh
db 0AFh, 0, 0DAh, 0B3h,	0, 0DAh, 0B1h, 0, 0DAh,	0BAh, 0
db 0DAh, 0BBh, 0, 0DBh,	81h, 0,	0DAh, 0BEh, 0, 0DBh, 92h
db 0, 0DAh, 0ADh, 0, 0DBh, 87h,	0, 0DBh, 86h, 0, 0DBh
db 88h,	0, 0DBh, 8Bh, 0, 0DBh, 85h, 0, 0DBh, 89h, 0, 0DBh
db 90h,	0, 0D9h, 89h, 0, 0D9h, 8Ah, 0D9h, 94h, 0D8h, 0A7h
db 0, 0D9h, 8Ah, 0D9h, 94h, 0DBh, 95h, 0, 0D9h,	8Ah, 0D9h
db 94h,	0D9h, 88h, 0, 0D9h, 8Ah, 0D9h, 94h, 0DBh, 87h
db 0, 0D9h, 8Ah, 0D9h, 94h, 0DBh, 86h, 0, 0D9h,	8Ah, 0D9h
db 94h,	0DBh, 88h, 0, 0D9h, 8Ah, 0D9h, 94h, 0DBh, 90h
db 0, 0D9h, 8Ah, 0D9h, 94h, 0D9h, 89h, 0, 0DBh,	8Ch, 0
db 0D9h, 8Ah, 0D9h, 94h, 0D8h, 0ACh, 0,	0D9h, 8Ah, 0D9h
db 94h,	0D8h, 0ADh, 0, 0D9h, 8Ah, 0D9h,	94h, 0D9h, 85h
db 0, 0D9h, 8Ah, 0D9h, 94h, 0D9h, 8Ah, 0, 0D8h,	0A8h, 0D8h
db 0ACh, 0, 0D8h, 0A8h,	0D8h, 0ADh, 0, 0D8h, 0A8h, 0D8h
db 0AEh, 0, 0D8h, 0A8h,	0D9h, 85h, 0, 0D8h, 0A8h, 0D9h
db 89h,	0, 0D8h, 0A8h, 0D9h, 8Ah, 0, 0D8h, 0AAh, 0D8h
db 0ACh, 0, 0D8h, 0AAh,	0D8h, 0ADh, 0, 0D8h, 0AAh, 0D8h
db 0AEh, 0, 0D8h, 0AAh,	0D9h, 85h, 0, 0D8h, 0AAh, 0D9h
db 89h,	0, 0D8h, 0AAh, 0D9h, 8Ah, 0, 0D8h, 0ABh, 0D8h
db 0ACh, 0, 0D8h, 0ABh,	0D9h, 85h, 0, 0D8h, 0ABh, 0D9h
db 89h,	0, 0D8h, 0ABh, 0D9h, 8Ah, 0, 0D8h, 0ACh, 0D8h
db 0ADh, 0, 0D8h, 0ACh,	0D9h, 85h, 0, 0D8h, 0ADh, 0D8h
db 0ACh, 0, 0D8h, 0ADh,	0D9h, 85h, 0, 0D8h, 0AEh, 0D8h
db 0ACh, 0, 0D8h, 0AEh,	0D8h, 0ADh, 0, 0D8h, 0AEh, 0D9h
db 85h,	0, 0D8h, 0B3h, 0D8h, 0ACh, 0, 0D8h, 0B3h, 0D8h
db 0ADh, 0, 0D8h, 0B3h,	0D8h, 0AEh, 0, 0D8h, 0B3h, 0D9h
db 85h,	0, 0D8h, 0B5h, 0D8h, 0ADh, 0, 0D8h, 0B5h, 0D9h
db 85h,	0, 0D8h, 0B6h, 0D8h, 0ACh, 0, 0D8h, 0B6h, 0D8h
db 0ADh, 0, 0D8h, 0B6h,	0D8h, 0AEh, 0, 0D8h, 0B6h, 0D9h
db 85h,	0, 0D8h, 0B7h, 0D8h, 0ADh, 0, 0D8h, 0B7h, 0D9h
db 85h,	0, 0D8h, 0B8h, 0D9h, 85h, 0, 0D8h, 0B9h, 0D8h
db 0ACh, 0, 0D8h, 0B9h,	0D9h, 85h, 0, 0D8h, 0BAh, 0D8h
db 0ACh, 0, 0D8h, 0BAh,	0D9h, 85h, 0, 0D9h, 81h, 0D8h
db 0ACh, 0, 0D9h, 81h, 0D8h, 0ADh, 0, 0D9h, 81h, 0D8h
db 0AEh, 0, 0D9h, 81h, 0D9h, 85h, 0, 0D9h, 81h,	0D9h, 89h
db 0, 0D9h, 81h, 0D9h, 8Ah, 0, 0D9h, 82h, 0D8h,	0ADh, 0
db 0D9h, 82h, 0D9h, 85h, 0, 0D9h, 82h, 0D9h, 89h, 0, 0D9h
db 82h,	0D9h, 8Ah, 0, 0D9h, 83h, 0D8h, 0A7h, 0,	0D9h, 83h
db 0D8h, 0ACh, 0, 0D9h,	83h, 0D8h, 0ADh, 0, 0D9h, 83h
db 0D8h, 0AEh, 0, 0D9h,	83h, 0D9h, 84h,	0, 0D9h, 83h, 0D9h
db 85h,	0, 0D9h, 83h, 0D9h, 89h, 0, 0D9h, 83h, 0D9h, 8Ah
db 0, 0D9h, 84h, 0D8h, 0ACh, 0,	0D9h, 84h, 0D8h, 0ADh
db 0, 0D9h, 84h, 0D8h, 0AEh, 0,	0D9h, 84h, 0D9h, 85h, 0
db 0D9h, 84h, 0D9h, 89h, 0, 0D9h, 84h, 0D9h, 8Ah, 0, 0D9h
db 85h,	0D8h, 0ACh, 0, 0D9h, 85h, 0D8h,	0ADh, 0, 0D9h
db 85h,	0D8h, 0AEh, 0, 0D9h, 85h, 0D9h,	85h, 0,	0D9h, 85h
db 0D9h, 89h, 0, 0D9h, 85h, 0D9h, 8Ah, 0, 0D9h,	86h, 0D8h
db 0ACh, 0, 0D9h, 86h, 0D8h, 0ADh, 0, 0D9h, 86h, 0D8h
db 0AEh, 0, 0D9h, 86h, 0D9h, 85h, 0, 0D9h, 86h,	0D9h, 89h
db 0, 0D9h, 86h, 0D9h, 8Ah, 0, 0D9h, 87h, 0D8h,	0ACh, 0
db 0D9h, 87h, 0D9h, 85h, 0, 0D9h, 87h, 0D9h, 89h, 0, 0D9h
db 87h,	0D9h, 8Ah, 0, 0D9h, 8Ah, 0D8h, 0ACh, 0,	0D9h, 8Ah
db 0D8h, 0ADh, 0, 0D9h,	8Ah, 0D8h, 0AEh, 0, 0D9h, 8Ah
db 0D9h, 85h, 0, 0D9h, 8Ah, 0D9h, 89h, 0, 0D9h,	8Ah, 0D9h
db 8Ah,	0, 0D8h, 0B0h, 0D9h, 0B0h, 0, 0D8h, 0B1h, 0D9h
db 0B0h, 0, 0D9h, 89h, 0D9h, 0B0h, 0, 20h, 0D9h, 8Ch, 0D9h
db 91h,	0, 20h,	0D9h, 8Dh, 0D9h, 91h, 0, 20h, 0D9h, 8Eh
db 0D9h, 91h, 0, 20h, 0D9h, 8Fh, 0D9h, 91h, 0, 20h, 0D9h
db 90h,	0D9h, 91h, 0, 20h, 0D9h, 91h, 0D9h, 0B0h, 0, 0D9h
db 8Ah,	0D9h, 94h, 0D8h, 0B1h, 0, 0D9h,	8Ah, 0D9h, 94h
db 0D8h, 0B2h, 0, 0D9h,	8Ah, 0D9h, 94h,	0D9h, 86h, 0, 0D8h
db 0A8h, 0D8h, 0B1h, 0,	0D8h, 0A8h, 0D8h, 0B2h,	0, 0D8h
db 0A8h, 0D9h, 86h, 0, 0D8h, 0AAh, 0D8h, 0B1h, 0, 0D8h
db 0AAh, 0D8h, 0B2h, 0,	0D8h, 0AAh, 0D9h, 86h, 0, 0D8h
db 0ABh, 0D8h, 0B1h, 0,	0D8h, 0ABh, 0D8h, 0B2h,	0, 0D8h
db 0ABh, 0D9h, 86h, 0, 0D9h, 85h, 0D8h,	0A7h, 0, 0D9h
db 86h,	0D8h, 0B1h, 0, 0D9h, 86h, 0D8h,	0B2h, 0, 0D9h
db 86h,	0D9h, 86h, 0, 0D9h, 8Ah, 0D8h, 0B1h, 0,	0D9h, 8Ah
db 0D8h, 0B2h, 0, 0D9h,	8Ah, 0D9h, 86h,	0, 0D9h, 8Ah, 0D9h
db 94h,	0D8h, 0AEh, 0, 0D9h, 8Ah, 0D9h,	94h, 0D9h, 87h
db 0, 0D8h, 0A8h, 0D9h,	87h, 0,	0D8h, 0AAh, 0D9h, 87h
db 0, 0D8h, 0B5h, 0D8h,	0AEh, 0, 0D9h, 84h, 0D9h, 87h
db 0, 0D9h, 86h, 0D9h, 87h, 0, 0D9h, 87h, 0D9h,	0B0h, 0
db 0D9h, 8Ah, 0D9h, 87h, 0, 0D8h, 0ABh,	0D9h, 87h, 0, 0D8h
db 0B3h, 0D9h, 87h, 0, 0D8h, 0B4h, 0D9h, 85h, 0, 0D8h
db 0B4h, 0D9h, 87h, 0, 0D9h, 80h, 0D9h,	8Eh, 0D9h, 91h
db 0, 0D9h, 80h, 0D9h, 8Fh, 0D9h, 91h, 0, 0D9h,	80h, 0D9h
db 90h,	0D9h, 91h, 0, 0D8h, 0B7h, 0D9h,	89h, 0,	0D8h, 0B7h
db 0D9h, 8Ah, 0, 0D8h, 0B9h, 0D9h, 89h,	0, 0D8h, 0B9h
db 0D9h, 8Ah, 0, 0D8h, 0BAh, 0D9h, 89h,	0, 0D8h, 0BAh
db 0D9h, 8Ah, 0, 0D8h, 0B3h, 0D9h, 89h,	0, 0D8h, 0B3h
db 0D9h, 8Ah, 0, 0D8h, 0B4h, 0D9h, 89h,	0, 0D8h, 0B4h
db 0D9h, 8Ah, 0, 0D8h, 0ADh, 0D9h, 89h,	0, 0D8h, 0ADh
db 0D9h, 8Ah, 0, 0D8h, 0ACh, 0D9h, 89h,	0, 0D8h, 0ACh
db 0D9h, 8Ah, 0, 0D8h, 0AEh, 0D9h, 89h,	0, 0D8h, 0AEh
db 0D9h, 8Ah, 0, 0D8h, 0B5h, 0D9h, 89h,	0, 0D8h, 0B5h
db 0D9h, 8Ah, 0, 0D8h, 0B6h, 0D9h, 89h,	0, 0D8h, 0B6h
db 0D9h, 8Ah, 0, 0D8h, 0B4h, 0D8h, 0ACh, 0, 0D8h, 0B4h
db 0D8h, 0ADh, 0, 0D8h,	0B4h, 0D8h, 0AEh, 0, 0D8h, 0B4h
db 0D8h, 0B1h, 0, 0D8h,	0B3h, 0D8h, 0B1h, 0, 0D8h, 0B5h
db 0D8h, 0B1h, 0, 0D8h,	0B6h, 0D8h, 0B1h, 0, 0D8h, 0A7h
db 0D9h, 8Bh, 0, 0D8h, 0AAh, 0D8h, 0ACh, 0D9h, 85h, 0
db 0D8h, 0AAh, 0D8h, 0ADh, 0D8h, 0ACh, 0, 0D8h,	0AAh, 0D8h
db 0ADh, 0D9h, 85h, 0, 0D8h, 0AAh, 0D8h, 0AEh, 0D9h, 85h
db 0, 0D8h, 0AAh, 0D9h,	85h, 0D8h, 0ACh, 0, 0D8h, 0AAh
db 0D9h, 85h, 0D8h, 0ADh, 0, 0D8h, 0AAh, 0D9h, 85h, 0D8h
db 0AEh, 0, 0D8h, 0ACh,	0D9h, 85h, 0D8h, 0ADh, 0, 0D8h
db 0ADh, 0D9h, 85h, 0D9h, 8Ah, 0, 0D8h,	0ADh, 0D9h, 85h
db 0D9h, 89h, 0, 0D8h, 0B3h, 0D8h, 0ADh, 0D8h, 0ACh, 0
db 0D8h, 0B3h, 0D8h, 0ACh, 0D8h, 0ADh, 0, 0D8h,	0B3h, 0D8h
db 0ACh, 0D9h, 89h, 0, 0D8h, 0B3h, 0D9h, 85h, 0D8h, 0ADh
db 0, 0D8h, 0B3h, 0D9h,	85h, 0D8h, 0ACh, 0, 0D8h, 0B3h
db 0D9h, 85h, 0D9h, 85h, 0, 0D8h, 0B5h,	0D8h, 0ADh, 0D8h
db 0ADh, 0, 0D8h, 0B5h,	0D9h, 85h, 0D9h, 85h, 0, 0D8h
db 0B4h, 0D8h, 0ADh, 0D9h, 85h,	0, 0D8h, 0B4h, 0D8h, 0ACh
db 0D9h, 8Ah, 0, 0D8h, 0B4h, 0D9h, 85h,	0D8h, 0AEh, 0
db 0D8h, 0B4h, 0D9h, 85h, 0D9h,	85h, 0,	0D8h, 0B6h, 0D8h
db 0ADh, 0D9h, 89h, 0, 0D8h, 0B6h, 0D8h, 0AEh, 0D9h, 85h
db 0, 0D8h, 0B7h, 0D9h,	85h, 0D8h, 0ADh, 0, 0D8h, 0B7h
db 0D9h, 85h, 0D9h, 85h, 0, 0D8h, 0B7h,	0D9h, 85h, 0D9h
db 8Ah,	0, 0D8h, 0B9h, 0D8h, 0ACh, 0D9h, 85h, 0, 0D8h
db 0B9h, 0D9h, 85h, 0D9h, 85h, 0, 0D8h,	0B9h, 0D9h, 85h
db 0D9h, 89h, 0, 0D8h, 0BAh, 0D9h, 85h,	0D9h, 85h, 0, 0D8h
db 0BAh, 0D9h, 85h, 0D9h, 8Ah, 0, 0D8h,	0BAh, 0D9h, 85h
db 0D9h, 89h, 0, 0D9h, 81h, 0D8h, 0AEh,	0D9h, 85h, 0, 0D9h
db 82h,	0D9h, 85h, 0D8h, 0ADh, 0, 0D9h,	82h, 0D9h, 85h
db 0D9h, 85h, 0, 0D9h, 84h, 0D8h, 0ADh,	0D9h, 85h, 0, 0D9h
db 84h,	0D8h, 0ADh, 0D9h, 8Ah, 0, 0D9h,	84h, 0D8h, 0ADh
db 0D9h, 89h, 0, 0D9h, 84h, 0D8h, 0ACh,	0D8h, 0ACh, 0
db 0D9h, 84h, 0D8h, 0AEh, 0D9h,	85h, 0,	0D9h, 84h, 0D9h
db 85h,	0D8h, 0ADh, 0, 0D9h, 85h, 0D8h,	0ADh, 0D8h, 0ACh
db 0, 0D9h, 85h, 0D8h, 0ADh, 0D9h, 85h,	0, 0D9h, 85h, 0D8h
db 0ADh, 0D9h, 8Ah, 0, 0D9h, 85h, 0D8h,	0ACh, 0D8h, 0ADh
db 0, 0D9h, 85h, 0D8h, 0ACh, 0D9h, 85h,	0, 0D9h, 85h, 0D8h
db 0AEh, 0D8h, 0ACh, 0,	0D9h, 85h, 0D8h, 0AEh, 0D9h, 85h
db 0, 0D9h, 85h, 0D8h, 0ACh, 0D8h, 0AEh, 0, 0D9h, 87h
db 0D9h, 85h, 0D8h, 0ACh, 0, 0D9h, 87h,	0D9h, 85h, 0D9h
db 85h,	0, 0D9h, 86h, 0D8h, 0ADh, 0D9h,	85h, 0,	0D9h, 86h
db 0D8h, 0ADh, 0D9h, 89h, 0, 0D9h, 86h,	0D8h, 0ACh, 0D9h
db 85h,	0, 0D9h, 86h, 0D8h, 0ACh, 0D9h,	89h, 0,	0D9h, 86h
db 0D9h, 85h, 0D9h, 8Ah, 0, 0D9h, 86h, 0D9h, 85h, 0D9h
db 89h,	0, 0D9h, 8Ah, 0D9h, 85h, 0D9h, 85h, 0, 0D8h, 0A8h
db 0D8h, 0AEh, 0D9h, 8Ah, 0, 0D8h, 0AAh, 0D8h, 0ACh, 0D9h
db 8Ah,	0, 0D8h, 0AAh, 0D8h, 0ACh, 0D9h, 89h, 0, 0D8h
db 0AAh, 0D8h, 0AEh, 0D9h, 8Ah,	0, 0D8h, 0AAh, 0D8h, 0AEh
db 0D9h, 89h, 0, 0D8h, 0AAh, 0D9h, 85h,	0D9h, 8Ah, 0, 0D8h
db 0AAh, 0D9h, 85h, 0D9h, 89h, 0, 0D8h,	0ACh, 0D9h, 85h
db 0D9h, 8Ah, 0, 0D8h, 0ACh, 0D8h, 0ADh, 0D9h, 89h, 0
db 0D8h, 0ACh, 0D9h, 85h, 0D9h,	89h, 0,	0D8h, 0B3h, 0D8h
db 0AEh, 0D9h, 89h, 0, 0D8h, 0B5h, 0D8h, 0ADh, 0D9h, 8Ah
db 0, 0D8h, 0B4h, 0D8h,	0ADh, 0D9h, 8Ah, 0, 0D8h, 0B6h
db 0D8h, 0ADh, 0D9h, 8Ah, 0, 0D9h, 84h,	0D8h, 0ACh, 0D9h
db 8Ah,	0, 0D9h, 84h, 0D9h, 85h, 0D9h, 8Ah, 0, 0D9h, 8Ah
db 0D8h, 0ADh, 0D9h, 8Ah, 0, 0D9h, 8Ah,	0D8h, 0ACh, 0D9h
db 8Ah,	0, 0D9h, 8Ah, 0D9h, 85h, 0D9h, 8Ah, 0, 0D9h, 85h
db 0D9h, 85h, 0D9h, 8Ah, 0, 0D9h, 82h, 0D9h, 85h, 0D9h
db 8Ah,	0, 0D9h, 86h, 0D8h, 0ADh, 0D9h,	8Ah, 0,	0D8h, 0B9h
db 0D9h, 85h, 0D9h, 8Ah, 0, 0D9h, 83h, 0D9h, 85h, 0D9h
db 8Ah,	0, 0D9h, 86h, 0D8h, 0ACh, 0D8h,	0ADh, 0, 0D9h
db 85h,	0D8h, 0AEh, 0D9h, 8Ah, 0, 0D9h,	84h, 0D8h, 0ACh
db 0D9h, 85h, 0, 0D9h, 83h, 0D9h, 85h, 0D9h, 85h, 0, 0D8h
db 0ACh, 0D8h, 0ADh, 0D9h, 8Ah,	0, 0D8h, 0ADh, 0D8h, 0ACh
db 0D9h, 8Ah, 0, 0D9h, 85h, 0D8h, 0ACh,	0D9h, 8Ah, 0, 0D9h
db 81h,	0D9h, 85h, 0D9h, 8Ah, 0, 0D8h, 0A8h, 0D8h, 0ADh
db 0D9h, 8Ah, 0, 0D8h, 0B3h, 0D8h, 0AEh, 0D9h, 8Ah, 0
db 0D9h, 86h, 0D8h, 0ACh, 0D9h,	8Ah, 0,	0D8h, 0B5h, 0D9h
db 84h,	0DBh, 92h, 0, 0D9h, 82h, 0D9h, 84h, 0DBh, 92h
db 0, 0D8h, 0A7h, 0D9h,	84h, 0D9h, 84h,	0D9h, 87h, 0, 0D8h
db 0A7h, 0D9h, 83h, 0D8h, 0A8h,	0D8h, 0B1h, 0, 0D9h, 85h
db 0D8h, 0ADh, 0D9h, 85h, 0D8h,	0AFh, 0, 0D8h, 0B5h, 0D9h
db 84h,	0D8h, 0B9h, 0D9h, 85h, 0, 0D8h,	0B1h, 0D8h, 0B3h
db 0D9h, 88h, 0D9h, 84h, 0, 0D8h, 0B9h,	0D9h, 84h, 0D9h
db 8Ah,	0D9h, 87h, 0, 0D9h, 88h, 0D8h, 0B3h, 0D9h, 84h
db 0D9h, 85h, 0, 0D8h, 0B5h, 0D9h, 84h,	0D9h, 89h, 0, 0D8h
db 0B5h, 0D9h, 84h, 0D9h, 89h, 20h, 0D8h, 0A7h,	0D9h, 84h
db 0D9h, 84h, 0D9h, 87h, 20h, 0D8h, 0B9h, 0D9h,	84h, 0D9h
db 8Ah,	0D9h, 87h, 20h,	0D9h, 88h, 0D8h, 0B3h, 0D9h, 84h
db 0D9h, 85h, 0, 0D8h, 0ACh, 0D9h, 84h,	20h, 0D8h, 0ACh
db 0D9h, 84h, 0D8h, 0A7h, 0D9h,	84h, 0D9h, 87h,	0, 0D8h
db 0B1h, 0DBh, 8Ch, 0D8h, 0A7h,	0D9h, 84h, 0, 0E2h, 80h
db 94h,	0, 0E2h, 80h, 93h, 0, 5Fh, 0, 7Bh, 0, 7Dh, 0, 0E3h
db 80h,	94h, 0,	0E3h, 80h, 95h,	0, 0E3h, 80h, 90h, 0, 0E3h
db 80h,	91h, 0,	0E3h, 80h, 8Ah,	0, 0E3h, 80h, 8Bh, 0, 0E3h
db 80h,	8Ch, 0,	0E3h, 80h, 8Dh,	0, 0E3h, 80h, 8Eh, 0, 0E3h
db 80h,	8Fh, 0,	2Ch, 0,	0E3h, 80h, 81h,	0, 3Ah,	0, 3Fh
db 0, 21h, 0, 23h, 0, 26h, 0, 2Ah, 0, 2Dh, 0, 3Ch, 0, 3Eh
db 0, 5Ch, 0, 24h, 0, 25h, 0, 40h, 0, 20h, 0D9h, 8Bh, 0
db 0D9h, 80h, 0D9h, 8Bh, 0, 20h, 0D9h, 8Ch, 0, 20h, 0D9h
db 8Dh,	0, 20h,	0D9h, 8Eh, 0, 0D9h, 80h, 0D9h, 8Eh, 0
db 20h,	0D9h, 8Fh, 0, 0D9h, 80h, 0D9h, 8Fh, 0, 20h, 0D9h
db 90h,	0, 0D9h, 80h, 0D9h, 90h, 0, 20h, 0D9h, 91h, 0
db 0D9h, 80h, 0D9h, 91h, 0, 20h, 0D9h, 92h, 0, 0D9h, 80h
db 0D9h, 92h, 0, 0D8h, 0A1h, 0,	0D8h, 0A7h, 0, 0D8h, 0A8h
db 0, 0D8h, 0A9h, 0, 0D8h, 0AAh, 0, 0D8h, 0ABh,	0, 0D8h
db 0ACh, 0, 0D8h, 0ADh,	0, 0D8h, 0AEh, 0, 0D8h,	0AFh, 0
db 0D8h, 0B0h, 0, 0D8h,	0B1h, 0, 0D8h, 0B2h, 0,	0D8h, 0B3h
db 0, 0D8h, 0B4h, 0, 0D8h, 0B5h, 0, 0D8h, 0B6h,	0, 0D8h
db 0B7h, 0, 0D8h, 0B8h,	0, 0D8h, 0B9h, 0, 0D8h,	0BAh, 0
db 0D9h, 81h, 0, 0D9h, 82h, 0, 0D9h, 83h, 0, 0D9h, 84h
db 0, 0D9h, 85h, 0, 0D9h, 86h, 0, 0D9h,	87h, 0,	0D9h, 88h
db 0, 0D9h, 8Ah, 0, 0D9h, 84h, 0D8h, 0A7h, 0D9h, 93h, 0
db 0D9h, 84h, 0D8h, 0A7h, 0D9h,	94h, 0,	0D9h, 84h, 0D8h
db 0A7h, 0D9h, 95h, 0, 0D9h, 84h, 0D8h,	0A7h, 0, 22h, 0
db 27h,	0, 2Fh,	0, 5Bh,	0, 5Dh,	0, 5Eh,	0, 7Ch,	0, 7Eh
db 0, 0E2h, 0A6h, 85h, 0, 0E2h,	0A6h, 86h, 0, 0E3h, 80h
db 82h,	0, 0E3h, 83h, 0BBh, 0, 0E3h, 82h, 0A1h,	0, 0E3h
db 82h,	0A3h, 0, 0E3h, 82h, 0A5h, 0, 0E3h, 82h,	0A7h, 0
db 0E3h, 82h, 0A9h, 0, 0E3h, 83h, 0A3h,	0, 0E3h, 83h, 0A5h
db 0, 0E3h, 83h, 0A7h, 0, 0E3h,	2 dup(83h), 0, 0E3h, 83h
db 0BCh, 0, 0E3h, 83h, 0B3h, 0,	0E3h, 82h, 99h,	0, 0E3h
db 82h,	9Ah, 0,	0C2h, 0A2h, 0, 0C2h, 0A3h, 0, 0C2h, 0ACh
db 0, 0C2h, 0A6h, 0, 0C2h, 0A5h, 0, 0E2h, 82h, 0A9h, 0
db 0E2h, 94h, 82h, 0, 0E2h, 86h, 90h, 0, 0E2h, 86h, 91h
db 0, 0E2h, 86h, 92h, 0, 0E2h, 86h, 93h, 0, 0E2h, 96h
db 0A0h, 0, 0E2h, 97h, 8Bh, 0, 0F0h, 9Dh, 85h, 97h, 0F0h
db 9Dh,	85h, 0A5h, 0, 0F0h, 9Dh, 85h, 98h, 0F0h, 9Dh, 85h
db 0A5h, 0, 0F0h, 9Dh, 85h, 98h, 0F0h, 9Dh, 85h, 0A5h
db 0F0h, 9Dh, 85h, 0AEh, 0, 0F0h, 9Dh, 85h, 98h, 0F0h
db 9Dh,	85h, 0A5h, 0F0h, 9Dh, 85h, 0AFh, 0, 0F0h, 9Dh
db 85h,	98h, 0F0h, 9Dh,	85h, 0A5h, 0F0h, 9Dh, 85h, 0B0h
db 0, 0F0h, 9Dh, 85h, 98h, 0F0h, 9Dh, 85h, 0A5h, 0F0h
db 9Dh,	85h, 0B1h, 0, 0F0h, 9Dh, 85h, 98h, 0F0h, 9Dh, 85h
db 0A5h, 0F0h, 9Dh, 85h, 0B2h, 0, 0F0h,	9Dh, 86h, 0B9h
db 0F0h, 9Dh, 85h, 0A5h, 0, 0F0h, 9Dh, 86h, 0BAh, 0F0h
db 9Dh,	85h, 0A5h, 0, 0F0h, 9Dh, 86h, 0B9h, 0F0h, 9Dh
db 85h,	0A5h, 0F0h, 9Dh, 85h, 0AEh, 0, 0F0h, 9Dh, 86h
db 0BAh, 0F0h, 9Dh, 85h, 0A5h, 0F0h, 9Dh, 85h, 0AEh, 0
db 0F0h, 9Dh, 86h, 0B9h, 0F0h, 9Dh, 85h, 0A5h, 0F0h, 9Dh
db 85h,	0AFh, 0, 0F0h, 9Dh, 86h, 0BAh, 0F0h, 9Dh, 85h
db 0A5h, 0F0h, 9Dh, 85h, 0AFh, 0, 0CEh,	91h, 0,	0CEh, 92h
db 0, 0CEh, 94h, 0, 0CEh, 95h, 0, 0CEh,	96h, 0,	0CEh, 97h
db 0, 0CEh, 99h, 0, 0CEh, 9Ah, 0, 0CEh,	9Bh, 0,	0CEh, 9Ch
db 0, 0CEh, 9Dh, 0, 0CEh, 9Eh, 0, 0CEh,	9Fh, 0,	0CEh, 0A1h
db 0, 0CEh, 0A3h, 0, 0CEh, 0A4h, 0, 0CEh, 0A6h,	0, 0CEh
db 0A7h, 0, 0CEh, 0A8h,	0, 0E2h, 88h, 87h, 0, 0CEh, 0B1h
db 0, 0CEh, 0B4h, 0, 0CEh, 0B6h, 0, 0CEh, 0B7h,	0, 0CEh
db 0BBh, 0, 0CEh, 0BDh,	0, 0CEh, 0BEh, 0, 0CEh,	0BFh, 0
db 0CFh, 83h, 0, 0CFh, 84h, 0, 0CFh, 85h, 0, 0CFh, 87h
db 0, 0CFh, 88h, 0, 0CFh, 89h, 0, 0E2h,	88h, 82h, 0, 0E4h
db 0B8h, 0BDh, 0, 0E4h,	2 dup(0B8h), 0,	0E4h, 0B9h, 81h
db 0, 0F0h, 0A0h, 84h, 0A2h, 0,	0E4h, 0BDh, 0A0h, 0, 0E4h
db 0BEh, 0BBh, 0, 0E5h,	80h, 82h, 0, 0E5h, 81h,	0BAh, 0
db 0E5h, 82h, 99h, 0, 0E5h, 83h, 8Fh, 0, 0E3h, 92h, 9Eh
db 0, 0F0h, 0A0h, 98h, 0BAh, 0,	0E5h, 85h, 94h,	0, 0E5h
db 85h,	0A4h, 0, 0E5h, 85h, 0B7h, 0, 0F0h, 0A0h, 94h, 9Ch
db 0, 0E3h, 92h, 0B9h, 0, 0E5h,	85h, 0A7h, 0, 0E5h, 86h
db 8Dh,	0, 0F0h, 0A0h, 95h, 8Bh, 0, 0E5h, 86h, 97h, 0
db 0E5h, 86h, 0A4h, 0, 0E4h, 0BBh, 8Ch,	0, 0E5h, 86h, 0ACh
db 0, 0E5h, 86h, 0B5h, 0, 0F0h,	0A9h, 87h, 9Fh,	0, 0E5h
db 88h,	83h, 0,	0E3h, 93h, 9Fh,	0, 0E5h, 88h, 0BBh, 0
db 0E5h, 89h, 86h, 0, 0E5h, 89h, 0B2h, 0, 0E5h,	89h, 0B7h
db 0, 0E3h, 94h, 95h, 0, 0E5h, 8Bh, 87h, 0, 0E5h, 8Bh
db 0BAh, 0, 0E5h, 8Ch, 85h, 0, 0E5h, 8Ch, 86h, 0, 0E5h
db 8Dh,	89h, 0,	0E5h, 8Dh, 9Ah,	0, 0E5h, 8Dh, 0B3h, 0
db 0E5h, 8Dh, 0BDh, 0, 0E5h, 8Dh, 0BFh,	0, 0F0h, 0A0h
db 0A8h, 0ACh, 0, 0E7h,	81h, 0B0h, 0, 0E5h, 8Fh, 8Ah, 0
db 0E5h, 8Fh, 9Fh, 0, 0F0h, 0A0h, 0ADh,	0A3h, 0, 0E5h
db 8Fh,	0ABh, 0, 0E5h, 8Fh, 0B1h, 0, 0E5h, 90h,	86h, 0
db 0E5h, 92h, 9Eh, 0, 0E5h, 90h, 0B8h, 0, 0E5h,	91h, 88h
db 0, 0E5h, 91h, 0A8h, 0, 0E5h,	92h, 0A2h, 0, 0E5h, 93h
db 0B6h, 0, 0E5h, 94h, 90h, 0, 0E5h, 95h, 93h, 0, 0E5h
db 95h,	0A3h, 0, 0E5h, 96h, 84h, 0, 0E5h, 96h, 99h, 0
db 0E5h, 96h, 0ABh, 0, 0E5h, 96h, 0B3h,	0, 0E5h, 97h, 82h
db 0, 0E5h, 9Ch, 96h, 0, 0E5h, 9Ch, 97h, 0, 0E5h, 99h
db 91h,	0, 0E5h, 99h, 0B4h, 0, 0E5h, 0A3h, 0AEh, 0, 0E5h
db 9Fh,	8Eh, 0,	0E5h, 9Fh, 0B4h, 0, 0E5h, 0A0h,	8Dh, 0
db 0E5h, 9Eh, 8Bh, 0, 0E5h, 0A0h, 0B2h,	0, 0E5h, 0A0h
db 0B1h, 0, 0E5h, 0A2h,	0ACh, 0, 0F0h, 0A1h, 93h, 0A4h
db 0, 0E5h, 0A3h, 0B2h,	0, 0E5h, 0A3h, 0B7h, 0,	0E5h, 0A4h
db 86h,	0, 0E5h, 0A4h, 9Ah, 0, 0E5h, 0A4h, 0A2h, 0, 0E5h
db 0A5h, 0A2h, 0, 0F0h,	0A1h, 9Ah, 0A8h, 0, 0F0h, 0A1h
db 9Bh,	0AAh, 0, 0E5h, 0A7h, 0ACh, 0, 0E5h, 0A8h, 9Bh
db 0, 0E5h, 0A8h, 0A7h,	0, 0E5h, 0A7h, 98h, 0, 0E5h, 0A9h
db 0A6h, 0, 0E3h, 9Bh, 0AEh, 0,	0F0h, 0A1h, 8Dh, 0AAh
db 0, 0E5h, 0ACh, 88h, 0, 0E5h,	0ACh, 0BEh, 0, 0F0h, 0A1h
db 0A7h, 88h, 0, 0E5h, 0AFh, 83h, 0, 0E5h, 0AFh, 98h, 0
db 0E5h, 0AFh, 0B3h, 0,	0F0h, 0A1h, 0ACh, 98h, 0, 0E5h
db 0AFh, 0BFh, 0, 0E5h,	0B0h, 86h, 0, 0E5h, 0BCh, 0B3h
db 0, 0E3h, 9Eh, 81h, 0, 0E5h, 0B1h, 0A0h, 0, 0E5h, 0B3h
db 80h,	0, 0E5h, 0B2h, 8Dh, 0, 0F0h, 0A1h, 0B7h, 0A4h
db 0, 0E5h, 0B5h, 83h, 0, 0F0h,	0A1h, 0B7h, 0A6h, 0, 0E5h
db 0B5h, 0AEh, 0, 0E5h,	0B5h, 0ABh, 0, 0E5h, 0B5h, 0BCh
db 0, 0E5h, 0B7h, 0A1h,	0, 0E5h, 0B7h, 0A2h, 0,	0E3h, 0A0h
db 0AFh, 0, 0E5h, 0B7h,	0BDh, 0, 0E5h, 0B8h, 0A8h, 0, 0E5h
db 0B8h, 0BDh, 0, 0E5h,	0B9h, 0A9h, 0, 0E3h, 0A1h, 0A2h
db 0, 0F0h, 0A2h, 86h, 83h, 0, 0E3h, 0A1h, 0BCh, 0, 0E5h
db 0BAh, 0B0h, 0, 0E5h,	0BAh, 0B3h, 0, 0E5h, 0BAh, 0B6h
db 0, 0F0h, 0AAh, 8Eh, 92h, 0, 0F0h, 0A2h, 8Ch,	0B1h, 0
db 0E8h, 88h, 81h, 0, 0E5h, 0BCh, 0A2h,	0, 0E3h, 0A3h
db 87h,	0, 0F0h, 0A3h, 8Ah, 0B8h, 0, 0F0h, 0A6h, 87h, 9Ah
db 0, 0E5h, 0BDh, 0A2h,	0, 0E5h, 0BDh, 0ABh, 0,	0E3h, 2	dup(0A3h)
db 0, 0E5h, 0BEh, 9Ah, 0, 0E5h,	0BFh, 8Dh, 0, 0E5h, 0BFh
db 97h,	0, 0E5h, 0BFh, 0B9h, 0,	0E6h, 82h, 81h,	0, 0E3h
db 0A4h, 0BAh, 0, 0E3h,	0A4h, 9Ch, 0, 0F0h, 0A2h, 9Bh
db 94h,	0, 0E6h, 83h, 87h, 0, 0E6h, 85h, 88h, 0, 0E6h
db 85h,	8Ch, 0,	0E6h, 85h, 8Eh,	0, 0E6h, 85h, 0BAh, 0
db 0E6h, 86h, 0B2h, 0, 0E6h, 86h, 0A4h,	0, 0E6h, 86h, 0AFh
db 0, 0E6h, 87h, 9Eh, 0, 0E6h, 88h, 90h, 0, 0E6h, 88h
db 9Bh,	0, 0E6h, 89h, 9Dh, 0, 0E6h, 8Ah, 0B1h, 0, 0E6h
db 8Bh,	94h, 0,	0E6h, 8Dh, 90h,	0, 0F0h, 0A2h, 0ACh, 8Ch
db 0, 0E6h, 8Ch, 0BDh, 0, 0E6h,	8Bh, 0BCh, 0, 0E6h, 8Dh
db 0A8h, 0, 0E6h, 8Eh, 83h, 0, 0E6h, 8Fh, 0A4h,	0, 0F0h
db 0A2h, 0AFh, 0B1h, 0,	0E6h, 90h, 0A2h, 0, 0E6h, 8Fh
db 85h,	0, 0E6h, 8Eh, 0A9h, 0, 0E3h, 0A8h, 0AEh, 0, 0E6h
db 91h,	0A9h, 0, 0E6h, 91h, 0BEh, 0, 0E6h, 92h,	9Dh, 0
db 0E6h, 91h, 0B7h, 0, 0E3h, 0A9h, 0ACh, 0, 0E6h, 95h
db 0ACh, 0, 0F0h, 0A3h,	80h, 8Ah, 0, 0E6h, 97h,	0A3h, 0
db 0E6h, 9Bh, 0B8h, 0, 0E6h, 99h, 89h, 0, 0E3h,	0ACh, 99h
db 0, 0E3h, 0ACh, 88h, 0, 0E3h,	0ABh, 0A4h, 0, 0E5h, 86h
db 92h,	0, 0E5h, 86h, 95h, 0, 0E6h, 9Ch, 80h, 0, 0E6h
db 9Ah,	9Ch, 0,	0E8h, 82h, 0ADh, 0, 0E4h, 8Fh, 99h, 0
db 0E6h, 9Ch, 9Bh, 0, 0E6h, 9Ch, 0A1h, 0, 0E6h,	9Dh, 9Eh
db 0, 0E6h, 9Dh, 93h, 0, 0F0h, 0A3h, 8Fh, 83h, 0, 0E3h
db 0ADh, 89h, 0, 0E6h, 9Fh, 0BAh, 0, 0E6h, 9Eh,	85h, 0
db 0E6h, 0A1h, 92h, 0, 0F0h, 0A3h, 91h,	0ADh, 0, 0E6h
db 0A2h, 8Eh, 0, 0E6h, 0A0h, 9Fh, 0, 0E6h, 0A4h, 94h, 0
db 0E3h, 0AEh, 9Dh, 0, 0E6h, 0A5h, 82h,	0, 0E6h, 0A6h
db 0A3h, 0, 0E6h, 0A7h,	0AAh, 0, 0E6h, 0AAh, 0A8h, 0, 0F0h
db 0A3h, 9Ah, 0A3h, 0, 0E6h, 0ABh, 9Bh,	0, 0E3h, 0B0h
db 98h,	0, 0E6h, 0ACh, 0A1h, 0,	0F0h, 0A3h, 0A2h, 0A7h
db 0, 0E6h, 0ADh, 94h, 0, 0E3h,	0B1h, 8Eh, 0, 0E6h, 0ADh
db 0B2h, 0, 0E6h, 0AEh,	9Fh, 0,	0E6h, 0AEh, 0BBh, 0, 0F0h
db 0A3h, 0AAh, 8Dh, 0, 0F0h, 0A1h, 0B4h, 8Bh, 0, 0F0h
db 0A3h, 0ABh, 0BAh, 0,	0E6h, 0B1h, 8Eh, 0, 0F0h, 0A3h
db 0B2h, 0BCh, 0, 0E6h,	0B2h, 0BFh, 0, 0E6h, 0B3h, 8Dh
db 0, 0E6h, 0B1h, 0A7h,	0, 0E6h, 0B4h, 96h, 0, 0E6h, 0B4h
db 0BEh, 0, 0E6h, 0B5h,	0A9h, 0, 0E6h, 0B5h, 0B8h, 0, 0E6h
db 0B6h, 85h, 0, 0F0h, 0A3h, 0B4h, 9Eh,	0, 0E6h, 2 dup(0B4h)
db 0, 0E6h, 0B8h, 0AFh,	0, 0E6h, 0B9h, 0AEh, 0,	0E3h, 0B4h
db 0B3h, 0, 0E6h, 0BBh,	8Bh, 0,	0E6h, 0BBh, 87h, 0, 0F0h
db 0A3h, 0BBh, 91h, 0, 0E6h, 0B7h, 0B9h, 0, 0E6h, 0BDh
db 0AEh, 0, 0F0h, 0A3h,	0BDh, 9Eh, 0, 0F0h, 0A3h, 0BEh
db 8Eh,	0, 0E6h, 0BFh, 86h, 0, 0E7h, 80h, 0B9h,	0, 0E7h
db 80h,	9Eh, 0,	0E7h, 80h, 9Bh,	0, 0E3h, 0B6h, 96h, 0
db 0E7h, 81h, 8Ah, 0, 0E7h, 81h, 0BDh, 0, 0E7h,	81h, 0B7h
db 0, 0E7h, 82h, 0ADh, 0, 0F0h,	0A0h, 94h, 0A5h, 0, 0E7h
db 2 dup(85h), 0, 0F0h,	0A4h, 89h, 0A3h, 0, 0E7h, 86h
db 9Ch,	0, 0E4h, 8Eh, 0ABh, 0, 0E7h, 88h, 0A8h,	0, 0E7h
db 88h,	0B5h, 0, 0E7h, 89h, 90h, 0, 0F0h, 0A4h,	98h, 88h
db 0, 0E7h, 8Ah, 80h, 0, 0E7h, 8Ah, 95h, 0, 0F0h, 0A4h
db 9Ch,	0B5h, 0, 0F0h, 0A4h, 0A0h, 94h,	0, 0E7h, 8Dh, 0BAh
db 0, 0E7h, 8Eh, 8Bh, 0, 0E3h, 0BAh, 0ACh, 0, 0E7h, 8Eh
db 0A5h, 0, 0E3h, 0BAh,	0B8h, 0, 0E7h, 91h, 87h, 0, 0E7h
db 91h,	9Ch, 0,	0E7h, 91h, 0B1h, 0, 0E7h, 92h, 85h, 0
db 0E7h, 93h, 8Ah, 0, 0E3h, 0BCh, 9Bh, 0, 0E7h,	94h, 0A4h
db 0, 0F0h, 0A4h, 0B0h,	0B6h, 0, 0E7h, 94h, 0BEh, 0, 0F0h
db 0A4h, 0B2h, 92h, 0, 0F0h, 0A2h, 86h,	9Fh, 0,	0E7h, 98h
db 90h,	0, 0F0h, 0A4h, 0BEh, 0A1h, 0, 0F0h, 0A4h, 0BEh
db 0B8h, 0, 0F0h, 0A5h,	81h, 84h, 0, 0E3h, 0BFh, 0BCh
db 0, 0E4h, 80h, 88h, 0, 0E7h, 9Bh, 0B4h, 0, 0F0h, 0A5h
db 83h,	0B3h, 0, 0F0h, 0A5h, 83h, 0B2h,	0, 0F0h, 0A5h
db 84h,	99h, 0,	0F0h, 0A5h, 84h, 0B3h, 0, 0E7h,	9Ch, 9Eh
db 0, 0E7h, 9Ch, 9Fh, 0, 0E7h, 9Dh, 8Ah, 0, 0E4h, 80h
db 0B9h, 0, 0E7h, 9Eh, 8Bh, 0, 0E4h, 81h, 86h, 0, 0E4h
db 82h,	96h, 0,	0F0h, 0A5h, 90h, 9Dh, 0, 0E7h, 0A1h, 8Eh
db 0, 0E7h, 0A3h, 8Ch, 0, 0E4h,	83h, 0A3h, 0, 0F0h, 0A5h
db 98h,	0A6h, 0, 0F0h, 0A5h, 2 dup(9Ah), 0, 0F0h, 0A5h
db 9Bh,	85h, 0,	0E7h, 0A7h, 0ABh, 0, 0E4h, 84h,	0AFh, 0
db 0E7h, 0A9h, 8Ah, 0, 0E7h, 0A9h, 8Fh,	0, 0F0h, 2 dup(0A5h)
db 0BCh, 0, 0F0h, 0A5h,	0AAh, 0A7h, 0, 0E7h, 0AAh, 0AEh
db 0, 0E4h, 88h, 82h, 0, 0F0h, 0A5h, 0AEh, 0ABh, 0, 0E7h
db 0AFh, 86h, 0, 0E7h, 0AFh, 89h, 0, 0E4h, 88h,	0A7h, 0
db 0F0h, 0A5h, 0B2h, 80h, 0, 0E7h, 0B3h, 92h, 0, 0E4h
db 8Ah,	0A0h, 0, 0E7h, 0B3h, 0A8h, 0, 0E7h, 0B3h, 0A3h
db 0, 0E7h, 0B4h, 80h, 0, 0F0h,	0A5h, 0BEh, 86h, 0, 0E7h
db 0B5h, 0A3h, 0, 0E4h,	8Ch, 81h, 0, 0E7h, 0B7h, 87h, 0
db 0E7h, 0B8h, 82h, 0, 0E7h, 0B9h, 85h,	0, 0E4h, 8Ch, 0B4h
db 0, 0F0h, 0A6h, 88h, 0A8h, 0,	0F0h, 0A6h, 89h, 87h, 0
db 0E4h, 8Dh, 99h, 0, 0F0h, 0A6h, 8Bh, 99h, 0, 0E7h, 0BDh
db 0BAh, 0, 0F0h, 0A6h,	8Ch, 0BEh, 0, 0E7h, 0BEh, 95h
db 0, 0E7h, 0BFh, 0BAh,	0, 0F0h, 0A6h, 93h, 9Ah, 0, 0F0h
db 0A6h, 94h, 0A3h, 0, 0E8h, 81h, 0A0h,	0, 0F0h, 0A6h
db 96h,	0A8h, 0, 0E8h, 81h, 0B0h, 0, 0F0h, 0A3h, 8Dh, 9Fh
db 0, 0E4h, 8Fh, 95h, 0, 0E8h, 82h, 0B2h, 0, 0E8h, 84h
db 83h,	0, 0E4h, 90h, 8Bh, 0, 0E8h, 84h, 0BEh, 0, 0E5h
db 0AAh, 0B5h, 0, 0F0h,	0A6h, 9Eh, 0A7h, 0, 0F0h, 0A6h
db 9Eh,	0B5h, 0, 0F0h, 0A3h, 8Eh, 93h, 0, 0F0h,	0A3h, 8Eh
db 9Ch,	0, 0E8h, 88h, 84h, 0, 0E8h, 0BEh, 9Eh, 0, 0E4h
db 91h,	0ABh, 0, 0E8h, 8Ah, 91h, 0, 0E8h, 8Ah, 8Bh, 0
db 0E8h, 8Ah, 9Dh, 0, 0E5h, 8Ah, 0B3h, 0, 0E8h,	8Ah, 0B1h
db 0, 0E8h, 8Ah, 0B3h, 0, 0E8h,	8Ah, 0BDh, 0, 0E8h, 8Bh
db 0A6h, 0, 0F0h, 0A6h,	0ACh, 0BCh, 0, 0E8h, 8Ch, 9Dh
db 0, 0E8h, 8Dh, 0A3h, 0, 0E8h,	8Eh, 0ADh, 0, 0E8h, 8Ch
db 0A3h, 0, 0E8h, 8Eh, 0BDh, 0,	0E8h, 8Fh, 0A7h, 0, 0E8h
db 8Dh,	93h, 0,	0E8h, 8Fh, 8Ah,	0, 0E8h, 8Fh, 8Ch, 0, 0E8h
db 8Fh,	9Ch, 0,	0F0h, 0A6h, 0B0h, 0B6h,	0, 0F0h, 0A6h
db 0B5h, 0ABh, 0, 0F0h,	0A6h, 0B3h, 95h, 0, 0E4h, 94h
db 0ABh, 0, 0E8h, 93h, 0B1h, 0,	0E8h, 93h, 0B3h, 0, 0E8h
db 94h,	96h, 0,	0F0h, 0A7h, 8Fh, 8Ah, 0, 0E8h, 95h, 0A4h
db 0, 0F0h, 0A6h, 0BCh,	0ACh, 0, 0E4h, 95h, 9Dh, 0, 0E4h
db 95h,	0A1h, 0, 0F0h, 0A6h, 0BEh, 0B1h, 0, 0F0h, 0A7h
db 83h,	92h, 0,	0E4h, 95h, 0ABh, 0, 0E8h, 99h, 90h, 0
db 0E8h, 99h, 0A7h, 0, 0E8h, 99h, 0A9h,	0, 0E8h, 9Ah, 0A9h
db 0, 0E8h, 9Ah, 88h, 0, 0E8h, 9Ch, 8Eh, 0, 0E8h, 9Bh
db 0A2h, 0, 0E8h, 9Dh, 0B9h, 0,	0E8h, 9Ch, 0A8h, 0, 0E8h
db 9Dh,	0ABh, 0, 0E8h, 9Eh, 86h, 0, 0E4h, 0B5h,	97h, 0
db 0E8h, 9Fh, 0A1h, 0, 0E8h, 0A0h, 81h,	0, 0E4h, 97h, 0B9h
db 0, 0E8h, 0A1h, 0A0h,	0, 0F0h, 0A7h, 99h, 0A7h, 0, 0E8h
db 0A3h, 97h, 0, 0E8h, 0A3h, 9Eh, 0, 0E4h, 98h,	0B5h, 0
db 0E8h, 0A3h, 0BAh, 0,	0E3h, 92h, 0BBh, 0, 0F0h, 0A7h
db 0A2h, 0AEh, 0, 0F0h,	0A7h, 0A5h, 0A6h, 0, 0E4h, 9Ah
db 0BEh, 0, 0E4h, 9Bh, 87h, 0, 0E8h, 0AAh, 0A0h, 0, 0E8h
db 0ABh, 0ADh, 0, 0E8h,	0AEh, 8Ah, 0, 0F0h, 0A7h, 0B2h
db 0A8h, 0, 0E8h, 0B2h,	0ABh, 0, 0E8h, 0B3h, 81h, 0, 0E8h
db 0B4h, 9Bh, 0, 0E8h, 0B5h, 0B7h, 0, 0F0h, 0A7h, 0BCh
db 0AFh, 0, 0F0h, 2 dup(0A0h), 84h, 0, 0E8h, 0B7h, 8Bh
db 0, 0E8h, 0B6h, 0BCh,	0, 0E8h, 0B7h, 0B0h, 0,	0F0h, 0A0h
db 0A3h, 9Eh, 0, 0E8h, 0BBh, 94h, 0, 0E8h, 0BCh, 0B8h
db 0, 0F0h, 0A8h, 97h, 92h, 0, 0F0h, 0A8h, 97h,	0ADh, 0
db 0E9h, 82h, 94h, 0, 0E9h, 83h, 0B1h, 0, 0E9h,	84h, 91h
db 0, 0F0h, 0A8h, 9Ch, 0AEh, 0,	0E9h, 84h, 9Bh,	0, 0E9h
db 88h,	0B8h, 0, 0E9h, 8Bh, 97h, 0, 0E9h, 8Bh, 98h, 0
db 0E9h, 89h, 0BCh, 0, 0E9h, 8Fh, 0B9h,	0, 0E9h, 90h, 95h
db 0, 0F0h, 0A8h, 0AFh,	0BAh, 0, 0E9h, 96h, 8Bh, 0, 0E4h
db 0A6h, 95h, 0, 0E9h, 96h, 0B7h, 0, 0F0h, 0A8h, 0B5h
db 0B7h, 0, 0E4h, 0A7h,	0A6h, 0, 0E9h, 9Bh, 83h, 0, 0E5h
db 0B6h, 0B2h, 0, 0E9h,	9Ch, 0A3h, 0, 0F0h, 0A9h, 2 dup(85h)
db 0, 0F0h, 0A9h, 88h, 9Ah, 0, 0E4h, 0A9h, 0AEh, 0, 0E4h
db 0A9h, 0B6h, 0, 0E9h,	9Fh, 0A0h, 0, 0F0h, 0A9h, 90h
db 8Ah,	0, 0E4h, 0AAh, 0B2h, 0,	0F0h, 0A9h, 92h, 96h, 0
db 0E9h, 0A0h, 8Bh, 0, 0E9h, 0A0h, 0A9h, 0, 0F0h, 0A9h
db 96h,	0B6h, 0, 0E9h, 0A3h, 0A2h, 0, 0E4h, 0ACh, 0B3h
db 0, 0E9h, 0A4h, 0A9h,	0, 0E9h, 0A6h, 0A7h, 0,	0E9h, 0A7h
db 82h,	0, 0E9h, 0A7h, 0BEh, 0,	0E4h, 0AFh, 8Eh, 0, 0F0h
db 0A9h, 0ACh, 0B0h, 0,	0E9h, 0ACh, 92h, 0, 0E9h, 0B1h
db 80h,	0, 0E9h, 0B3h, 0BDh, 0,	0E4h, 0B3h, 8Eh, 0, 0E4h
db 0B3h, 0ADh, 0, 0E9h,	0B5h, 0A7h, 0, 0F0h, 0AAh, 83h
db 8Eh,	0, 0E4h, 0B3h, 0B8h, 0,	0F0h, 0AAh, 84h, 85h, 0
db 0F0h, 0AAh, 88h, 8Eh, 0, 0F0h, 0AAh,	8Ah, 91h, 0, 0E4h
db 0B5h, 96h, 0, 0E9h, 0BBh, 0BEh, 0, 0E9h, 0BCh, 85h
db 0, 0E9h, 0BCh, 8Fh, 0, 0E9h,	0BCh, 96h, 0, 0F0h, 0AAh
db 98h,	80h, 2 dup(0)
align 10h
			
dw 8, 9, 2 dup(1100h), 0Ah, 0Dh	dup(1100h), 0Bh, 0Ch, 1100h
dw 0Dh,	0Eh, 0Dh dup(1100h), 0Fh
align 20h
			
dw 96h,	6, 7, 8, 97h, 9, 0Ah, 0Bh, 0Ch,	0Dh, 0Eh, 0, 0Fh
dw 10h,	11h, 12h, 13h, 14h, 15h, 16h, 17h, 6 dup(0), 18h
dw 19h,	1Ah, 1Bh, 1Ch, 98h, 1Dh, 1Eh, 1Fh, 20h,	21h, 22h
dw 23h,	24h, 25h, 26h, 0, 27h, 28h, 29h, 2Ah, 2Bh, 2Ch
dw 2Dh,	2Eh, 2Fh, 2Dh dup(0), 30h, 19h dup(0), 31h, 0
dw 99h,	9Ah, 32h, 9Bh, 2 dup(0), 33h, 4	dup(0),	9Ch, 4 dup(0)
dw 34h,	35h, 9Dh, 0, 9Eh, 3 dup(0), 36h, 5 dup(0), 37h
dw 0, 9Fh, 0A0h, 38h, 0A1h, 2 dup(0), 39h, 4 dup(0), 0A2h
dw 4 dup(0), 3Ah, 3Bh, 0A3h, 0,	0A4h, 3	dup(0),	3Ch, 5 dup(0)
dw 3Dh,	3Eh, 0Eh dup(0), 3Fh, 40h, 38h dup(0), 41h, 42h
dw 0Ch dup(0), 0A5h, 0A6h, 4 dup(0), 0A7h, 0A8h, 6 dup(0)
dw 0A9h, 0AAh, 0ABh, 0ACh, 13h dup(0), 0ADh, 20h dup(0)
dw 43h,	44h, 0Dh dup(0), 45h, 46h, 6 dup(0), 0AEh, 32h dup(0)
dw 0AFh, 0B0h, 3Ah dup(0), 0B1h, 0B2h, 0B3h, 0B4h, 4 dup(0)
dw 0B5h, 0B6h, 62h dup(0), 0B7h, 6Dh dup(0), 165h, 166h
dw 167h, 168h, 169h, 0,	16Ah, 16Bh, 16Ch, 16Dh,	16Eh, 16Fh
dw 170h, 2 dup(0), 171h, 0, 172h, 0, 173h, 174h, 6 dup(0)
dw 175h, 7 dup(0), 176h, 177h, 178h, 179h, 17Ah, 17Bh
dw 4 dup(0), 17Ch, 17Dh, 0, 17Eh, 17Fh,	10h dup(0), 180h
dw 2 dup(0), 181h, 4Bh dup(0), 47h, 3 dup(0), 48h, 0, 49h
dw 0, 4Ah, 5 dup(0), 4Bh, 0, 0B8h, 3 dup(0), 4Ch, 3 dup(0)
dw 4Dh,	2 dup(0), 0B9h,	0, 0BAh, 2 dup(0), 4Eh,	3 dup(0)
dw 4Fh,	0, 50h,	0, 51h,	5 dup(0), 52h, 0, 53h, 3 dup(0)
dw 54h,	3 dup(0), 55h, 56h, 57h, 2 dup(0), 0BBh, 3 dup(0)
dw 58h,	33h dup(0), 0BCh, 9 dup(0), 59h, 2 dup(0), 0BDh
dw 0, 5Ah, 5Bh,	0BEh, 5Ch, 0, 0BFh, 3 dup(0), 0C0h, 4 dup(0)
dw 5Dh,	3 dup(0), 0C1h,	3 dup(0), 0C2h,	0, 0C3h, 2 dup(0)
dw 5Eh,	2 dup(0), 0C4h,	0, 5Fh,	60h, 0C5h, 61h,	0, 0C6h
dw 3 dup(0), 0C7h, 4 dup(0), 62h, 3 dup(0), 0C8h, 3 dup(0)
dw 0C9h, 0, 0CAh, 8 dup(0), 0CBh, 1Dh dup(0), 0CCh, 0CDh
dw 62h dup(0), 0CEh, 0CFh, 0Eh dup(0), 0D0h, 0D1h, 3Dh dup(0)
dw 63h,	20h dup(0), 0D2h, 0, 0D3h, 8 dup(0), 184h, 185h
dw 186h, 6Bh dup(0), 0D4h, 10h dup(0), 0D5h, 2 dup(0)
dw 0D6h, 52h dup(0), 0D7h, 7 dup(0), 0D8h, 2 dup(0), 0D9h
dw 8Ah dup(0), 187h, 8 dup(0), 64h, 0Fh	dup(0),	188h, 66h dup(0)
dw 189h, 8 dup(0), 65h,	0Eh dup(0), 18Ah, 18Bh,	3Ah dup(0)
dw 0DAh, 2Bh dup(0), 18Ch, 7 dup(0), 66h, 0DBh,	0Fh dup(0)
dw 18Dh, 6Eh dup(0), 0DCh, 78h dup(0), 0DDh, 2 dup(0)
dw 18Eh, 3 dup(0), 67h,	3 dup(0), 0DEh,	0Ah dup(0), 18Fh
dw 190h, 67h dup(0), 191h, 7 dup(0), 68h, 0DFh,	0Fh dup(0)
dw 192h, 72h dup(0), 193h, 4 dup(0), 194h, 9 dup(0), 69h
dw 2 dup(0), 0E0h, 2 dup(0), 195h, 45h dup(0), 0E1h, 110h dup(0)
dw 0E2h, 0E3h, 22h dup(0), 0E4h, 0E5h, 6 dup(0), 0E6h
dw 0E7h, 3Ch dup(0), 6Ah, 6Bh, 16h dup(0), 0E8h, 0E9h
dw 12h dup(0), 0EAh, 0EBh, 32h dup(0), 6Ch, 6Dh, 0ECh
dw 0EDh, 0EEh, 0EFh, 0F0h, 0F1h, 6Eh, 6Fh, 0F2h, 0F3h
dw 0F4h, 0F5h, 0F6h, 0F7h, 70h,	71h, 6 dup(0), 72h, 73h
dw 6 dup(0), 74h, 75h, 0F8h, 0F9h, 0FAh, 0FBh, 0FCh, 0FDh
dw 76h,	77h, 0FEh, 0FFh, 100h, 101h, 102h, 103h, 78h, 79h
dw 6 dup(0), 7Ah, 7Bh, 6 dup(0), 7Ch, 7Dh, 6 dup(0), 7Eh
dw 7Fh,	6 dup(0), 80h, 81h, 7 dup(0), 82h, 6 dup(0), 83h
dw 84h,	104h, 105h, 106h, 107h,	108h, 109h, 85h, 86h, 10Ah
dw 10Bh, 10Ch, 10Dh, 10Eh, 10Fh, 110h, 3 dup(0), 111h
dw 7 dup(0), 112h, 39h dup(0), 113h, 8 dup(0), 87h, 6 dup(0)
dw 114h, 2Fh dup(0), 115h, 7 dup(0), 88h, 91h dup(0), 116h
dw 0, 117h, 0, 118h, 3Bh dup(0), 119h, 0, 11Ah,	0, 11Bh
dw 2Eh dup(0), 11Ch, 4 dup(0), 11Dh, 2 dup(0), 11Eh, 17h dup(0)
dw 11Fh, 0, 120h, 16h dup(0), 121h, 6 dup(0), 122h, 0
dw 123h, 2 dup(0), 124h, 4 dup(0), 125h, 13h dup(0), 126h
dw 2 dup(0), 127h, 128h, 0Ch dup(0), 129h, 12Ah, 2 dup(0)
dw 12Bh, 12Ch, 2 dup(0), 12Dh, 12Eh, 12Fh, 130h, 4 dup(0)
dw 131h, 132h, 2 dup(0), 133h, 134h, 9 dup(0), 135h, 136h
dw 0Fh dup(0), 137h, 5 dup(0), 138h, 139h, 0, 13Ah, 6 dup(0)
dw 13Bh, 13Ch, 13Dh, 13Eh, 90h dup(0), 13Fh, 4 dup(0)
dw 140h, 0, 141h, 0, 142h, 0, 143h, 0, 144h, 0,	145h, 0
dw 146h, 0, 147h, 0, 148h, 0, 149h, 0, 14Ah, 0,	14Bh, 2	dup(0)
dw 14Ch, 0, 14Dh, 0, 14Eh, 6 dup(0), 89h, 2 dup(0), 8Ah
dw 2 dup(0), 8Bh, 2 dup(0), 8Ch, 2 dup(0), 8Dh,	1Dh dup(0)
dw 182h, 183h, 2 dup(0), 14Fh, 8 dup(0), 150h, 4 dup(0)
dw 151h, 0, 152h, 0, 153h, 0, 154h, 0, 155h, 0,	156h, 0
dw 157h, 0, 158h, 0, 159h, 0, 15Ah, 0, 15Bh, 0,	15Ch, 2	dup(0)
dw 15Dh, 0, 15Eh, 0, 15Fh, 6 dup(0), 8Eh, 2 dup(0), 8Fh
dw 2 dup(0), 90h, 2 dup(0), 91h, 2 dup(0), 92h,	13h dup(0)
dw 160h, 161h, 162h, 163h, 0Ah dup(0), 164h, 2 dup(0)
			
dw 302h, 134h, 307h, 1E1Fh, 304h, 1DEh,	301h, 1FAh, 301h
dw 1E08h, 301h,	1E2Eh, 304h, 22Ah, 301h, 1FEh, 304h, 1DFh
dw 301h, 1FBh, 301h, 1E09h, 301h, 1E2Fh, 304h, 22Bh, 301h
dw 1FFh, 307h, 1E64h, 307h, 1E65h, 307h, 1E66h,	307h, 1E67h
dw 301h, 1E78h,	301h, 1E79h, 308h, 1E7Ah, 308h,	1E7Bh
dw 307h, 1E9Bh,	30Ch, 1EEh, 304h, 1ECh,	304h, 1EDh, 304h
dw 1E0h, 304h, 1E1h, 306h, 1E1Ch, 306h,	1E1Dh, 304h, 230h
dw 304h, 231h, 30Ch, 1EFh, 314h, 1FECh,	345h, 1FB4h, 345h
dw 1FC4h, 345h,	1FF4h, 308h, 407h, 301h, 403h, 308h, 4DEh
dw 301h, 40Ch, 308h, 4E6h, 308h, 4F4h, 308h, 4F8h, 308h
dw 4ECh, 301h, 453h, 308h, 4DFh, 301h, 45Ch, 308h, 4E7h
dw 308h, 4F5h, 308h, 4F9h, 308h, 4EDh, 308h, 457h, 30Fh
dw 476h, 30Fh, 477h, 308h, 4DAh, 308h, 4DBh, 308h, 4EAh
dw 308h, 4EBh, 654h, 624h, 654h, 626h, 654h, 6C2h, 654h
dw 6D3h, 654h, 6C0h, 93Ch, 929h, 93Ch, 931h, 93Ch, 934h
dw 0BD7h, 0B94h, 0BBEh,	0BCBh, 0C56h, 0C48h, 0CD5h, 0CC0h
dw 0CD5h, 0CCBh, 0D3Eh,	0D4Bh, 0DCAh, 0DDDh, 102Eh, 1026h
dw 304h, 1E38h,	304h, 1E39h, 304h, 1E5Ch, 304h,	1E5Dh
dw 307h, 1E68h,	307h, 1E69h, 302h, 1EC6h, 302h,	1EC7h
dw 302h, 1ED8h,	302h, 1ED9h, 345h, 1F82h, 345h,	1F83h
dw 345h, 1F84h,	345h, 1F85h, 345h, 1F86h, 345h,	1F87h
dw 345h, 1F8Ah,	345h, 1F8Bh, 345h, 1F8Ch, 345h,	1F8Dh
dw 345h, 1F8Eh,	345h, 1F8Fh, 345h, 1F92h, 345h,	1F93h
dw 345h, 1F94h,	345h, 1F95h, 345h, 1F96h, 345h,	1F97h
dw 345h, 1F9Ah,	345h, 1F9Bh, 345h, 1F9Ch, 345h,	1F9Dh
dw 345h, 1F9Eh,	345h, 1F9Fh, 345h, 1FA2h, 345h,	1FA3h
dw 345h, 1FA4h,	345h, 1FA5h, 345h, 1FA6h, 345h,	1FA7h
dw 345h, 1FAAh,	345h, 1FABh, 345h, 1FACh, 345h,	1FADh
dw 345h, 1FAEh,	345h, 1FAFh, 345h, 1FB2h, 345h,	1FC2h
dw 345h, 1FF2h,	345h, 1FB7h, 345h, 1FC7h, 345h,	1FF7h
dw 338h, 219Ah,	338h, 219Bh, 338h, 21AEh, 338h,	21CDh
dw 338h, 21CFh,	338h, 21CEh, 338h, 2204h, 338h,	2209h
dw 338h, 220Ch,	338h, 2224h, 338h, 2226h, 338h,	2241h
dw 338h, 2244h,	338h, 2247h, 338h, 2249h, 338h,	226Dh
dw 338h, 2262h,	338h, 2270h, 338h, 2271h, 338h,	2274h
dw 338h, 2275h,	338h, 2278h, 338h, 2279h, 338h,	2280h
dw 338h, 2281h,	338h, 22E0h, 338h, 22E1h, 338h,	2284h
dw 338h, 2285h,	338h, 2288h, 338h, 2289h, 338h,	22E2h
dw 338h, 22E3h,	338h, 22ACh, 338h, 22ADh, 338h,	22AEh
dw 338h, 22AFh,	338h, 22EAh, 338h, 22EBh, 338h,	22ECh
dw 338h, 22EDh,	3099h, 3094h, 3099h, 304Ch, 3099h, 304Eh
dw 3099h, 3050h, 3099h,	3052h, 3099h, 3054h, 3099h, 3056h
dw 3099h, 3058h, 3099h,	305Ah, 3099h, 305Ch, 3099h, 305Eh
dw 3099h, 3060h, 3099h,	3062h, 3099h, 3065h, 3099h, 3067h
dw 3099h, 3069h, 3099h,	309Eh, 3099h, 30F4h, 3099h, 30ACh
dw 3099h, 30AEh, 3099h,	30B0h, 3099h, 30B2h, 3099h, 30B4h
dw 3099h, 30B6h, 3099h,	30B8h, 3099h, 30BAh, 3099h, 30BCh
dw 3099h, 30BEh, 3099h,	30C0h, 3099h, 30C2h, 3099h, 30C5h
dw 3099h, 30C7h, 3099h,	30C9h, 3099h, 30F7h, 3099h, 30F8h
dw 3099h, 30F9h, 3099h,	30FAh, 3099h, 30FEh
align 20h
			
			
dw 9CCh, 0B47h,	0B4Bh, 0B47h, 0B48h, 0B47h, 0B4Ch, 0BC6h
dw 0BCAh, 0BC6h, 0BCCh,	0CC6h, 0CCAh, 0CC6h, 0CC7h, 0CC6h
dw 0CC8h, 0D46h, 0D4Ah,	0D46h, 0D4Ch, 0DD9h, 0DDAh, 0DD9h
dw 0DDCh, 0DD9h, 0DDEh
align 20h
			
dw 0C5h, 0, 1CDh, 200h,	202h, 3	dup(0),	1EA0h, 0, 1E00h
dw 2 dup(0), 104h, 0Eh dup(0), 1E02h, 0Ah dup(0), 1E04h
dw 8 dup(0), 1E06h, 5 dup(0), 106h, 108h, 3 dup(0), 10Ah
dw 4 dup(0), 10Ch, 9 dup(0), 0C7h, 0Fh dup(0), 1E0Ah, 4	dup(0)
dw 10Eh, 5 dup(0), 1E0Ch, 3 dup(0), 1E10h, 0, 1E12h, 2 dup(0)
dw 1E0Eh, 4 dup(0), 0C8h, 0C9h,	0CAh, 1EBCh, 112h, 114h
dw 116h, 0CBh, 1EBAh, 2	dup(0),	11Ah, 204h, 206h, 3 dup(0)
dw 1EB8h, 3 dup(0), 228h, 118h,	1E18h, 0, 1E1Ah, 6 dup(0)
dw 1F4h, 11Ch, 0, 1E20h, 11Eh, 120h, 4 dup(0), 1E6h, 9 dup(0)
dw 122h, 0Bh dup(0), 124h, 3 dup(0), 1E22h, 1E26h, 3 dup(0)
dw 21Eh, 5 dup(0), 1E24h, 3 dup(0), 1E28h, 2 dup(0), 1E2Ah
dw 6 dup(0), 0CCh, 0CDh, 0CEh, 128h, 12Ah, 12Ch, 130h
dw 0CFh, 1EC8h,	2 dup(0), 1CFh,	208h, 20Ah, 3 dup(0), 1ECAh
dw 4 dup(0), 12Eh, 2 dup(0), 1E2Ch, 6 dup(0), 1E30h, 9 dup(0)
dw 1E8h, 5 dup(0), 1E32h, 3 dup(0), 136h, 4 dup(0), 1E34h
dw 5 dup(0), 139h, 9 dup(0), 13Dh, 5 dup(0), 1E36h, 3 dup(0)
dw 13Bh, 0, 1E3Ch, 2 dup(0), 1E3Ah, 5 dup(0), 1E3Eh, 4 dup(0)
dw 1E40h, 0Ah dup(0), 1E42h, 0Dh dup(0), 1F8h, 143h, 0
dw 0D1h, 2 dup(0), 1E44h, 4 dup(0), 147h, 5 dup(0), 1E46h
dw 3 dup(0), 145h, 0, 1E4Ah, 2 dup(0), 1E48h, 4	dup(0)
dw 0D2h, 0D3h, 0D4h, 0D5h, 14Ch, 14Eh, 22Eh, 0D6h, 1ECEh
dw 0, 150h, 1D1h, 20Ch,	20Eh, 2	dup(0),	1A0h, 1ECCh, 4 dup(0)
dw 1EAh, 9 dup(0), 1E54h, 4 dup(0), 1E56h, 19h dup(0)
dw 154h, 4 dup(0), 1E58h, 4 dup(0), 158h, 210h,	212h, 3	dup(0)
dw 1E5Ah, 3 dup(0), 156h, 4 dup(0), 1E5Eh, 5 dup(0), 15Ah
dw 15Ch, 3 dup(0), 1E60h, 4 dup(0), 160h, 5 dup(0), 1E62h
dw 2 dup(0), 218h, 15Eh, 0Fh dup(0), 1E6Ah, 4 dup(0), 164h
dw 5 dup(0), 1E6Ch, 2 dup(0), 21Ah, 162h, 0, 1E70h, 2 dup(0)
dw 1E6Eh, 4 dup(0), 0D9h, 0DAh,	0DBh, 168h, 16Ah, 16Ch
dw 0, 0DCh, 1EE6h, 16Eh, 170h, 1D3h, 214h, 216h, 2 dup(0)
dw 1AFh, 1EE4h,	1E72h, 3 dup(0), 172h, 1E76h, 0, 1E74h
dw 8 dup(0), 1E7Ch, 0Dh	dup(0),	1E7Eh, 0Dh dup(0), 1E80h
dw 1E82h, 174h,	3 dup(0), 1E86h, 1E84h,	9 dup(0), 1E88h
dw 13h dup(0), 1E8Ah, 1E8Ch, 17h dup(0), 1EF2h,	0DDh, 176h
dw 1EF8h, 232h,	0, 1E8Eh, 178h,	1EF6h, 8 dup(0), 1EF4h
dw 0Eh dup(0), 179h, 1E90h, 3 dup(0), 17Bh, 4 dup(0), 17Dh
dw 5 dup(0), 1E92h, 8 dup(0), 1E94h, 4 dup(0), 0E0h, 0E1h
dw 0E2h, 0E3h, 101h, 103h, 227h, 0E4h, 1EA3h, 0E5h, 0
dw 1CEh, 201h, 203h, 3 dup(0), 1EA1h, 0, 1E01h,	2 dup(0)
dw 105h, 0Eh dup(0), 1E03h, 0Ah	dup(0),	1E05h, 8 dup(0)
dw 1E07h, 5 dup(0), 107h, 109h,	3 dup(0), 10Bh,	4 dup(0)
dw 10Dh, 9 dup(0), 0E7h, 0Fh dup(0), 1E0Bh, 4 dup(0), 10Fh
dw 5 dup(0), 1E0Dh, 3 dup(0), 1E11h, 0,	1E13h, 2 dup(0)
dw 1E0Fh, 4 dup(0), 0E8h, 0E9h,	0EAh, 1EBDh, 113h, 115h
dw 117h, 0EBh, 1EBBh, 2	dup(0),	11Bh, 205h, 207h, 3 dup(0)
dw 1EB9h, 3 dup(0), 229h, 119h,	1E19h, 0, 1E1Bh, 6 dup(0)
dw 1F5h, 11Dh, 0, 1E21h, 11Fh, 121h, 4 dup(0), 1E7h, 9 dup(0)
dw 123h, 0Bh dup(0), 125h, 3 dup(0), 1E23h, 1E27h, 3 dup(0)
dw 21Fh, 5 dup(0), 1E25h, 3 dup(0), 1E29h, 2 dup(0), 1E2Bh
dw 0, 1E96h, 4 dup(0), 0ECh, 0EDh, 0EEh, 129h, 12Bh, 12Dh
dw 0, 0EFh, 1EC9h, 2 dup(0), 1D0h, 209h, 20Bh, 3 dup(0)
dw 1ECBh, 4 dup(0), 12Fh, 2 dup(0), 1E2Dh, 7 dup(0), 135h
dw 8 dup(0), 1F0h, 14h dup(0), 1E31h, 9	dup(0),	1E9h, 5	dup(0)
dw 1E33h, 3 dup(0), 137h, 4 dup(0), 1E35h, 5 dup(0), 13Ah
dw 9 dup(0), 13Eh, 5 dup(0), 1E37h, 3 dup(0), 13Ch, 0
dw 1E3Dh, 2 dup(0), 1E3Bh, 5 dup(0), 1E3Fh, 4 dup(0), 1E41h
dw 0Ah dup(0), 1E43h, 0Dh dup(0), 1F9h,	144h, 0, 0F1h
dw 2 dup(0), 1E45h, 4 dup(0), 148h, 5 dup(0), 1E47h, 3 dup(0)
dw 146h, 0, 1E4Bh, 2 dup(0), 1E49h, 4 dup(0), 0F2h, 0F3h
dw 0F4h, 0F5h, 14Dh, 14Fh, 22Fh, 0F6h, 1ECFh, 0, 151h
dw 1D2h, 20Dh, 20Fh, 2 dup(0), 1A1h, 1ECDh, 4 dup(0), 1EBh
dw 9 dup(0), 1E55h, 4 dup(0), 1E57h, 19h dup(0), 155h
dw 4 dup(0), 1E59h, 4 dup(0), 159h, 211h, 213h,	3 dup(0)
dw 1E5Bh, 3 dup(0), 157h, 4 dup(0), 1E5Fh, 5 dup(0), 15Bh
dw 15Dh, 3 dup(0), 1E61h, 4 dup(0), 161h, 5 dup(0), 1E63h
dw 2 dup(0), 219h, 15Fh, 0Fh dup(0), 1E6Bh, 1E97h, 3 dup(0)
dw 165h, 5 dup(0), 1E6Dh, 2 dup(0), 21Bh, 163h,	0, 1E71h
dw 2 dup(0), 1E6Fh, 4 dup(0), 0F9h, 0FAh, 0FBh,	169h, 16Bh
dw 16Dh, 0, 0FCh, 1EE7h, 16Fh, 171h, 1D4h, 215h, 217h
dw 2 dup(0), 1B0h, 1EE5h, 1E73h, 3 dup(0), 173h, 1E77h
dw 0, 1E75h, 8 dup(0), 1E7Dh, 0Dh dup(0), 1E7Fh, 0Dh dup(0)
dw 1E81h, 1E83h, 175h, 3 dup(0), 1E87h,	1E85h, 0, 1E98h
dw 7 dup(0), 1E89h, 13h	dup(0),	1E8Bh, 1E8Dh, 17h dup(0)
dw 1EF3h, 0FDh,	177h, 1EF9h, 233h, 0, 1E8Fh, 0FFh, 1EF7h
dw 1E99h, 7 dup(0), 1EF5h, 0Eh dup(0), 17Ah, 1E91h, 3 dup(0)
dw 17Ch, 4 dup(0), 17Eh, 5 dup(0), 1E93h, 8 dup(0), 1E95h
dw 4 dup(0), 1FEDh, 385h, 19h dup(0), 1FC1h, 3 dup(0)
dw 1EA6h, 1EA4h, 0, 1EAAh, 4 dup(0), 1EA8h, 17h	dup(0)
dw 1FCh, 2 dup(0), 1E2h, 1Ah dup(0), 1EC0h, 1EBEh, 0, 1EC4h
dw 4 dup(0), 1EC2h, 16h	dup(0),	1ED2h, 1ED0h, 0, 1ED6h
dw 4 dup(0), 1ED4h, 17h	dup(0),	1E4Ch, 2 dup(0), 22Ch
dw 2 dup(0), 1E4Eh, 17h	dup(0),	1DBh, 1D7h, 2 dup(0), 1D5h
dw 6 dup(0), 1D9h, 13h dup(0), 1EA7h, 1EA5h, 0,	1EABh
dw 4 dup(0), 1EA9h, 17h	dup(0),	1FDh, 2	dup(0),	1E3h, 1Ah dup(0)
dw 1EC1h, 1EBFh, 0, 1EC5h, 4 dup(0), 1EC3h, 16h	dup(0)
dw 1ED3h, 1ED1h, 0, 1ED7h, 4 dup(0), 1ED5h, 17h	dup(0)
dw 1E4Dh, 2 dup(0), 22Dh, 2 dup(0), 1E4Fh, 17h dup(0)
dw 1DCh, 1D8h, 2 dup(0), 1D6h, 6 dup(0), 1DAh, 13h dup(0)
dw 1EB0h, 1EAEh, 0, 1EB4h, 4 dup(0), 1EB2h, 16h	dup(0)
dw 1EB1h, 1EAFh, 0, 1EB5h, 4 dup(0), 1EB3h, 16h	dup(0)
dw 1E14h, 1E16h, 1Dh dup(0), 1E15h, 1E17h, 1Dh dup(0)
dw 1E50h, 1E52h, 1Dh dup(0), 1E51h, 1E53h, 1Dh dup(0)
dw 1EDCh, 1EDAh, 0, 1EE0h, 4 dup(0), 1EDEh, 8 dup(0), 1EE2h
dw 0Dh dup(0), 1EDDh, 1EDBh, 0,	1EE1h, 4 dup(0), 1EDFh
dw 8 dup(0), 1EE3h, 0Dh	dup(0),	1EEAh, 1EE8h, 0, 1EEEh
dw 4 dup(0), 1EECh, 8 dup(0), 1EF0h, 0Dh dup(0), 1EEBh
dw 1EE9h, 0, 1EEFh, 4 dup(0), 1EEDh, 8 dup(0), 1EF1h, 0Dh dup(0)
dw 1FBAh, 386h,	2 dup(0), 1FB9h, 1FB8h,	8 dup(0), 1F08h
dw 1F09h, 0Ch dup(0), 1FBCh, 2 dup(0), 1FC8h, 388h, 0Ch	dup(0)
dw 1F18h, 1F19h, 0Fh dup(0), 1FCAh, 389h, 0Ch dup(0), 1F28h
dw 1F29h, 0Ch dup(0), 1FCCh, 2 dup(0), 1FDAh, 38Ah, 2 dup(0)
dw 1FD9h, 1FD8h, 0, 3AAh, 6 dup(0), 1F38h, 1F39h, 0Fh dup(0)
dw 1FF8h, 38Ch,	0Ch dup(0), 1F48h, 1F49h, 0Fh dup(0), 1FEAh
dw 38Eh, 2 dup(0), 1FE9h, 1FE8h, 0, 3ABh, 7 dup(0), 1F59h
dw 0Fh dup(0), 1FFAh, 38Fh, 0Ch	dup(0),	1F68h, 1F69h, 0Ch dup(0)
dw 1FFCh, 2 dup(0), 1F70h, 3ACh, 2 dup(0), 1FB1h, 1FB0h
dw 8 dup(0), 1F00h, 1F01h, 0Bh dup(0), 1FB6h, 1FB3h, 2 dup(0)
dw 1F72h, 3ADh,	0Ch dup(0), 1F10h, 1F11h, 0Fh dup(0), 1F74h
dw 3AEh, 0Ch dup(0), 1F20h, 1F21h, 0Bh dup(0), 1FC6h, 1FC3h
dw 2 dup(0), 1F76h, 3AFh, 2 dup(0), 1FD1h, 1FD0h, 0, 3CAh
dw 6 dup(0), 1F30h, 1F31h, 0Bh dup(0), 1FD6h, 3	dup(0)
dw 1F78h, 3CCh,	0Ch dup(0), 1F40h, 1F41h, 1Dh dup(0), 1FE4h
dw 1FE5h, 0Fh dup(0), 1F7Ah, 3CDh, 2 dup(0), 1FE1h, 1FE0h
dw 0, 3CBh, 6 dup(0), 1F50h, 1F51h, 0Bh	dup(0),	1FE6h
dw 3 dup(0), 1F7Ch, 3CEh, 0Ch dup(0), 1F60h, 1F61h, 0Bh	dup(0)
dw 1FF6h, 1FF3h, 2 dup(0), 1FD2h, 390h,	19h dup(0), 1FD7h
dw 3 dup(0), 1FE2h, 3B0h, 19h dup(0), 1FE7h, 4 dup(0)
dw 3D3h, 5 dup(0), 3D4h, 1Ch dup(0), 4D0h, 0, 4D2h, 17h	dup(0)
dw 400h, 4 dup(0), 4D6h, 0, 401h, 1Ch dup(0), 4C1h, 0
dw 4DCh, 17h dup(0), 40Dh, 3 dup(0), 4E2h, 419h, 0, 4E4h
dw 1Bh dup(0), 4EEh, 40Eh, 0, 4F0h, 2 dup(0), 4F2h, 19h	dup(0)
dw 4D1h, 0, 4D3h, 17h dup(0), 450h, 4 dup(0), 4D7h, 0
dw 451h, 1Ch dup(0), 4C2h, 0, 4DDh, 17h	dup(0),	45Dh, 3	dup(0)
dw 4E3h, 439h, 0, 4E5h,	1Bh dup(0), 4EFh, 45Eh,	0, 4F1h
dw 2 dup(0), 4F3h, 0EFh	dup(0),	1EACh, 2 dup(0), 1EB6h
dw 1Bh dup(0), 1EADh, 2	dup(0),	1EB7h, 19h dup(0), 1F02h
dw 1F04h, 19h dup(0), 1F06h, 1F80h, 2 dup(0), 1F03h, 1F05h
dw 19h dup(0), 1F07h, 1F81h, 2 dup(0), 1F0Ah, 1F0Ch, 19h dup(0)
dw 1F0Eh, 1F88h, 2 dup(0), 1F0Bh, 1F0Dh, 19h dup(0), 1F0Fh
dw 1F89h, 2 dup(0), 1F12h, 1F14h, 1Dh dup(0), 1F13h, 1F15h
dw 1Dh dup(0), 1F1Ah, 1F1Ch, 1Dh dup(0), 1F1Bh,	1F1Dh
dw 1Dh dup(0), 1F22h, 1F24h, 19h dup(0), 1F26h,	1F90h
dw 2 dup(0), 1F23h, 1F25h, 19h dup(0), 1F27h, 1F91h, 2 dup(0)
dw 1F2Ah, 1F2Ch, 19h dup(0), 1F2Eh, 1F98h, 2 dup(0), 1F2Bh
dw 1F2Dh, 19h dup(0), 1F2Fh, 1F99h, 2 dup(0), 1F32h, 1F34h
dw 19h dup(0), 1F36h, 3	dup(0),	1F33h, 1F35h, 19h dup(0)
dw 1F37h, 3 dup(0), 1F3Ah, 1F3Ch, 19h dup(0), 1F3Eh, 3 dup(0)
dw 1F3Bh, 1F3Dh, 19h dup(0), 1F3Fh, 3 dup(0), 1F42h, 1F44h
dw 1Dh dup(0), 1F43h, 1F45h, 1Dh dup(0), 1F4Ah,	1F4Ch
dw 1Dh dup(0), 1F4Bh, 1F4Dh, 1Dh dup(0), 1F52h,	1F54h
dw 19h dup(0), 1F56h, 3	dup(0),	1F53h, 1F55h, 19h dup(0)
dw 1F57h, 3 dup(0), 1F5Bh, 1F5Dh, 19h dup(0), 1F5Fh, 3 dup(0)
dw 1F62h, 1F64h, 19h dup(0), 1F66h, 1FA0h, 2 dup(0), 1F63h
dw 1F65h, 19h dup(0), 1F67h, 1FA1h, 2 dup(0), 1F6Ah, 1F6Ch
dw 19h dup(0), 1F6Eh, 1FA8h, 2 dup(0), 1F6Bh, 1F6Dh, 19h dup(0)
dw 1F6Fh, 1FA9h, 2 dup(0), 1FCDh, 1FCEh, 19h dup(0), 1FCFh
dw 3 dup(0), 1FDDh, 1FDEh, 19h dup(0), 1FDFh, 20h dup(0)
dw 3070h, 3071h, 1Dh dup(0), 3073h, 3074h, 1Dh dup(0)
dw 3076h, 3077h, 1Dh dup(0), 3079h, 307Ah, 1Dh dup(0)
dw 307Ch, 307Dh, 1Dh dup(0), 30D0h, 30D1h, 1Dh dup(0)
dw 30D3h, 30D4h, 1Dh dup(0), 30D6h, 30D7h, 1Dh dup(0)
dw 30D9h, 30DAh, 1Dh dup(0), 30DCh, 30DDh
align 10h
dd offset loc_641C279A	
dd offset loc_641C2789
dd offset loc_641C2845
dd offset loc_641C2838
dd offset loc_641C281A
dd offset loc_641C2814
dd offset loc_641C2814
dd offset loc_641C2741
dd offset loc_641C27ED
dd offset loc_641C27ED
dd offset loc_641C27BD
dd offset loc_641C27ED
dd offset loc_641C27ED
dd offset loc_641C279A
dd offset loc_641C279A
dd offset loc_641C279A
dd offset loc_641C279A
dd offset loc_641C279A
dd offset loc_641C279A
dd offset loc_641C279D
dd offset loc_641C276A
			
			
align 4
			
			
align 4
			
align 4
dd offset loc_641C2EF8	
dd offset loc_641C2EBC
dd offset loc_641C31B4
dd offset loc_641C3168
dd offset loc_641C320C
dd offset loc_641C3060
dd offset loc_641C313C
dd offset loc_641C3088
dd offset loc_641C2EB4
dd offset loc_641C2E44
dd offset loc_641C2DF4
dd offset loc_641C2DA4
dd offset loc_641C2DF4
dd offset loc_641C2DD8
dd offset loc_641C2C2C
dd offset loc_641C2CBC
dd offset loc_641C2C50
dd offset loc_641C2D2C
dd offset loc_641C2BC0
dd offset loc_641C2B30
dd offset loc_641C3010
dd offset loc_641C2E9F	
dd offset loc_641C2E9F
dd offset loc_641C3494
dd offset loc_641C3252
dd offset loc_641C3417
dd offset loc_641C3411
dd offset loc_641C3411
dd offset make_normal_jump
dd offset make_normal_jump
dd offset make_normal_jump
dd offset make_normal_jump
dd offset make_normal_jump
dd offset make_normal_jump
dd offset loc_641C2E9F
dd offset loc_641C2E9F
dd offset loc_641C2E9F
dd offset loc_641C2E9F
dd offset loc_641C2E9F
dd offset loc_641C2E9F
dd offset loc_641C343A	
dd offset loc_641C343A
dd offset loc_641C34C4
dd offset loc_641C3439
dd offset loc_641C343A
dd offset loc_641C3439
dd offset loc_641C3439
dd offset loc_641C3439
dd offset make_normal_jump
dd offset make_normal_jump
dd offset make_normal_jump
dd offset make_normal_jump
dd offset make_normal_jump
dd offset loc_641C343A
dd offset loc_641C343A
dd offset loc_641C343A
dd offset loc_641C343A
dd offset loc_641C343A
dd offset loc_641C343A
dd offset loc_641C3439
dd offset loc_641C3439
			
align 4
			
align 4
			
align 10h
dd offset store_opcode_and_arg 
dd offset loc_641C4200
dd offset loc_641C38AA
dd offset loc_641C41E9
dd offset loc_641C4188
dd offset loc_641C40D6
dd offset loc_641C3F8A
dd offset loc_641C3F8A
dd offset loc_641C3E99
dd offset loc_641C3E2C
dd offset loc_641C3D38
dd offset loc_641C3CCA
dd offset loc_641C3DB8
dd offset loc_641C3B9C
dd offset loc_641C3B8E
dd offset loc_641C3B87
dd offset loc_641C3B76
dd offset loc_641C3B65
dd offset loc_641C3B95
dd offset loc_641C3B5E
dd offset loc_641C3B2F
dd offset loc_641C4274
			
dd offset loc_641C439C,	offset loc_641C439C, offset loc_641C455D 
dd offset loc_641C439C,	offset loc_641C439C, offset loc_641C439C
dd offset loc_641C439C,	offset loc_641C439C, offset loc_641C439C
dd offset loc_641C439C,	offset loc_641C4556, offset loc_641C439C
dd offset loc_641C439C,	offset loc_641C439C, offset loc_641C4579
dd offset loc_641C439C,	offset loc_641C4572, offset loc_641C439C
dd offset loc_641C4580,	offset loc_641C439C, offset loc_641C44EB
dd offset loc_641C439C,	offset loc_641C439C, offset loc_641C439C
dd offset loc_641C439C,	offset loc_641C439C, offset loc_641C439C
dd offset loc_641C439C,	offset loc_641C439C, offset loc_641C456B
dd offset loc_641C4564,	offset loc_641C439C, offset loc_641C439C
dd offset loc_641C439C,	offset loc_641C455D, offset loc_641C439C
dd offset loc_641C439C,	offset loc_641C439C, offset loc_641C439C
dd offset loc_641C439C,	offset loc_641C439C, offset loc_641C439C
dd offset loc_641C4556,	offset loc_641C439C, offset loc_641C439C
dd offset loc_641C439C,	offset loc_641C4579, offset loc_641C439C
dd offset loc_641C4572,	offset loc_641C439C, offset loc_641C4580
dd offset loc_641C439C,	offset loc_641C44EB
			
align 10h
			
align 4
align 10h
public _stringprep_rfc3454_A_1
			
			
Stringprep_table_element_0 <234h, 24Fh,	0>
Stringprep_table_element_0 <2AEh, 2AFh,	0>
Stringprep_table_element_0 <2EFh, 2FFh,	0>
Stringprep_table_element_0 <350h, 35Fh,	0>
Stringprep_table_element_0 <370h, 373h,	0>
Stringprep_table_element_0 <376h, 379h,	0>
Stringprep_table_element_0 <37Bh, 37Dh,	0>
Stringprep_table_element_0 <37Fh, 383h,	0>
Stringprep_table_element_0 <38Bh, 0, 0>
Stringprep_table_element_0 <38Dh, 0, 0>
Stringprep_table_element_0 <3A2h, 0, 0>
Stringprep_table_element_0 <3CFh, 0, 0>
Stringprep_table_element_0 <3F7h, 3FFh,	0>
Stringprep_table_element_0 <487h, 0, 0>
Stringprep_table_element_0 <4CFh, 0, 0>
Stringprep_table_element_0 <4F6h, 4F7h,	0>
Stringprep_table_element_0 <4FAh, 4FFh,	0>
Stringprep_table_element_0 <510h, 530h,	0>
Stringprep_table_element_0 <557h, 558h,	0>
Stringprep_table_element_0 <560h, 0, 0>
Stringprep_table_element_0 <588h, 0, 0>
Stringprep_table_element_0 <58Bh, 590h,	0>
Stringprep_table_element_0 <5A2h, 0, 0>
Stringprep_table_element_0 <5BAh, 0, 0>
Stringprep_table_element_0 <5C5h, 5CFh,	0>
Stringprep_table_element_0 <5EBh, 5EFh,	0>
Stringprep_table_element_0 <5F5h, 60Bh,	0>
Stringprep_table_element_0 <60Dh, 61Ah,	0>
Stringprep_table_element_0 <61Ch, 61Eh,	0>
Stringprep_table_element_0 <620h, 0, 0>
Stringprep_table_element_0 <63Bh, 63Fh,	0>
Stringprep_table_element_0 <656h, 65Fh,	0>
Stringprep_table_element_0 <6EEh, 6EFh,	0>
Stringprep_table_element_0 <6FFh, 0, 0>
Stringprep_table_element_0 <70Eh, 0, 0>
Stringprep_table_element_0 <72Dh, 72Fh,	0>
Stringprep_table_element_0 <74Bh, 77Fh,	0>
Stringprep_table_element_0 <7B2h, 900h,	0>
Stringprep_table_element_0 <904h, 0, 0>
Stringprep_table_element_0 <93Ah, 93Bh,	0>
Stringprep_table_element_0 <94Eh, 94Fh,	0>
Stringprep_table_element_0 <955h, 957h,	0>
Stringprep_table_element_0 <971h, 980h,	0>
Stringprep_table_element_0 <984h, 0, 0>
Stringprep_table_element_0 <98Dh, 98Eh,	0>
Stringprep_table_element_0 <991h, 992h,	0>
Stringprep_table_element_0 <9A9h, 0, 0>
Stringprep_table_element_0 <9B1h, 0, 0>
Stringprep_table_element_0 <9B3h, 9B5h,	0>
Stringprep_table_element_0 <9BAh, 9BBh,	0>
Stringprep_table_element_0 <9BDh, 0, 0>
Stringprep_table_element_0 <9C5h, 9C6h,	0>
Stringprep_table_element_0 <9C9h, 9CAh,	0>
Stringprep_table_element_0 <9CEh, 9D6h,	0>
Stringprep_table_element_0 <9D8h, 9DBh,	0>
Stringprep_table_element_0 <9DEh, 0, 0>
Stringprep_table_element_0 <9E4h, 9E5h,	0>
Stringprep_table_element_0 <9FBh, 0A01h, 0>
Stringprep_table_element_0 <0A03h, 0A04h, 0>
Stringprep_table_element_0 <0A0Bh, 0A0Eh, 0>
Stringprep_table_element_0 <0A11h, 0A12h, 0>
Stringprep_table_element_0 <0A29h, 0, 0>
Stringprep_table_element_0 <0A31h, 0, 0>
Stringprep_table_element_0 <0A34h, 0, 0>
Stringprep_table_element_0 <0A37h, 0, 0>
Stringprep_table_element_0 <0A3Ah, 0A3Bh, 0>
Stringprep_table_element_0 <0A3Dh, 0, 0>
Stringprep_table_element_0 <0A43h, 0A46h, 0>
Stringprep_table_element_0 <0A49h, 0A4Ah, 0>
Stringprep_table_element_0 <0A4Eh, 0A58h, 0>
Stringprep_table_element_0 <0A5Dh, 0, 0>
Stringprep_table_element_0 <0A5Fh, 0A65h, 0>
Stringprep_table_element_0 <0A75h, 0A80h, 0>
Stringprep_table_element_0 <0A84h, 0, 0>
Stringprep_table_element_0 <0A8Ch, 0, 0>
Stringprep_table_element_0 <0A8Eh, 0, 0>
Stringprep_table_element_0 <0A92h, 0, 0>
Stringprep_table_element_0 <0AA9h, 0, 0>
Stringprep_table_element_0 <0AB1h, 0, 0>
Stringprep_table_element_0 <0AB4h, 0, 0>
Stringprep_table_element_0 <0ABAh, 0ABBh, 0>
Stringprep_table_element_0 <0AC6h, 0, 0>
Stringprep_table_element_0 <0ACAh, 0, 0>
Stringprep_table_element_0 <0ACEh, 0ACFh, 0>
Stringprep_table_element_0 <0AD1h, 0ADFh, 0>
Stringprep_table_element_0 <0AE1h, 0AE5h, 0>
Stringprep_table_element_0 <0AF0h, 0B00h, 0>
Stringprep_table_element_0 <0B04h, 0, 0>
Stringprep_table_element_0 <0B0Dh, 0B0Eh, 0>
Stringprep_table_element_0 <0B11h, 0B12h, 0>
Stringprep_table_element_0 <0B29h, 0, 0>
Stringprep_table_element_0 <0B31h, 0, 0>
Stringprep_table_element_0 <0B34h, 0B35h, 0>
Stringprep_table_element_0 <0B3Ah, 0B3Bh, 0>
Stringprep_table_element_0 <0B44h, 0B46h, 0>
Stringprep_table_element_0 <0B49h, 0B4Ah, 0>
Stringprep_table_element_0 <0B4Eh, 0B55h, 0>
Stringprep_table_element_0 <0B58h, 0B5Bh, 0>
Stringprep_table_element_0 <0B5Eh, 0, 0>
Stringprep_table_element_0 <0B62h, 0B65h, 0>
Stringprep_table_element_0 <0B71h, 0B81h, 0>
Stringprep_table_element_0 <0B84h, 0, 0>
Stringprep_table_element_0 <0B8Bh, 0B8Dh, 0>
Stringprep_table_element_0 <0B91h, 0, 0>
Stringprep_table_element_0 <0B96h, 0B98h, 0>
Stringprep_table_element_0 <0B9Bh, 0, 0>
Stringprep_table_element_0 <0B9Dh, 0, 0>
Stringprep_table_element_0 <0BA0h, 0BA2h, 0>
Stringprep_table_element_0 <0BA5h, 0BA7h, 0>
Stringprep_table_element_0 <0BABh, 0BADh, 0>
Stringprep_table_element_0 <0BB6h, 0, 0>
Stringprep_table_element_0 <0BBAh, 0BBDh, 0>
Stringprep_table_element_0 <0BC3h, 0BC5h, 0>
Stringprep_table_element_0 <0BC9h, 0, 0>
Stringprep_table_element_0 <0BCEh, 0BD6h, 0>
Stringprep_table_element_0 <0BD8h, 0BE6h, 0>
Stringprep_table_element_0 <0BF3h, 0C00h, 0>
Stringprep_table_element_0 <0C04h, 0, 0>
Stringprep_table_element_0 <0C0Dh, 0, 0>
Stringprep_table_element_0 <0C11h, 0, 0>
Stringprep_table_element_0 <0C29h, 0, 0>
Stringprep_table_element_0 <0C34h, 0, 0>
Stringprep_table_element_0 <0C3Ah, 0C3Dh, 0>
Stringprep_table_element_0 <0C45h, 0, 0>
Stringprep_table_element_0 <0C49h, 0, 0>
Stringprep_table_element_0 <0C4Eh, 0C54h, 0>
Stringprep_table_element_0 <0C57h, 0C5Fh, 0>
Stringprep_table_element_0 <0C62h, 0C65h, 0>
Stringprep_table_element_0 <0C70h, 0C81h, 0>
Stringprep_table_element_0 <0C84h, 0, 0>
Stringprep_table_element_0 <0C8Dh, 0, 0>
Stringprep_table_element_0 <0C91h, 0, 0>
Stringprep_table_element_0 <0CA9h, 0, 0>
Stringprep_table_element_0 <0CB4h, 0, 0>
Stringprep_table_element_0 <0CBAh, 0CBDh, 0>
Stringprep_table_element_0 <0CC5h, 0, 0>
Stringprep_table_element_0 <0CC9h, 0, 0>
Stringprep_table_element_0 <0CCEh, 0CD4h, 0>
Stringprep_table_element_0 <0CD7h, 0CDDh, 0>
Stringprep_table_element_0 <0CDFh, 0, 0>
Stringprep_table_element_0 <0CE2h, 0CE5h, 0>
Stringprep_table_element_0 <0CF0h, 0D01h, 0>
Stringprep_table_element_0 <0D04h, 0, 0>
Stringprep_table_element_0 <0D0Dh, 0, 0>
Stringprep_table_element_0 <0D11h, 0, 0>
Stringprep_table_element_0 <0D29h, 0, 0>
Stringprep_table_element_0 <0D3Ah, 0D3Dh, 0>
Stringprep_table_element_0 <0D44h, 0D45h, 0>
Stringprep_table_element_0 <0D49h, 0, 0>
Stringprep_table_element_0 <0D4Eh, 0D56h, 0>
Stringprep_table_element_0 <0D58h, 0D5Fh, 0>
Stringprep_table_element_0 <0D62h, 0D65h, 0>
Stringprep_table_element_0 <0D70h, 0D81h, 0>
Stringprep_table_element_0 <0D84h, 0, 0>
Stringprep_table_element_0 <0D97h, 0D99h, 0>
Stringprep_table_element_0 <0DB2h, 0, 0>
Stringprep_table_element_0 <0DBCh, 0, 0>
Stringprep_table_element_0 <0DBEh, 0DBFh, 0>
Stringprep_table_element_0 <0DC7h, 0DC9h, 0>
Stringprep_table_element_0 <0DCBh, 0DCEh, 0>
Stringprep_table_element_0 <0DD5h, 0, 0>
Stringprep_table_element_0 <0DD7h, 0, 0>
Stringprep_table_element_0 <0DE0h, 0DF1h, 0>
Stringprep_table_element_0 <0DF5h, 0E00h, 0>
Stringprep_table_element_0 <0E3Bh, 0E3Eh, 0>
Stringprep_table_element_0 <0E5Ch, 0E80h, 0>
Stringprep_table_element_0 <0E83h, 0, 0>
Stringprep_table_element_0 <0E85h, 0E86h, 0>
Stringprep_table_element_0 <0E89h, 0, 0>
Stringprep_table_element_0 <0E8Bh, 0E8Ch, 0>
Stringprep_table_element_0 <0E8Eh, 0E93h, 0>
Stringprep_table_element_0 <0E98h, 0, 0>
Stringprep_table_element_0 <0EA0h, 0, 0>
Stringprep_table_element_0 <0EA4h, 0, 0>
Stringprep_table_element_0 <0EA6h, 0, 0>
Stringprep_table_element_0 <0EA8h, 0EA9h, 0>
Stringprep_table_element_0 <0EACh, 0, 0>
Stringprep_table_element_0 <0EBAh, 0, 0>
Stringprep_table_element_0 <0EBEh, 0EBFh, 0>
Stringprep_table_element_0 <0EC5h, 0, 0>
Stringprep_table_element_0 <0EC7h, 0, 0>
Stringprep_table_element_0 <0ECEh, 0ECFh, 0>
Stringprep_table_element_0 <0EDAh, 0EDBh, 0>
Stringprep_table_element_0 <0EDEh, 0EFFh, 0>
Stringprep_table_element_0 <0F48h, 0, 0>
Stringprep_table_element_0 <0F6Bh, 0F70h, 0>
Stringprep_table_element_0 <0F8Ch, 0F8Fh, 0>
Stringprep_table_element_0 <0F98h, 0, 0>
Stringprep_table_element_0 <0FBDh, 0, 0>
Stringprep_table_element_0 <0FCDh, 0FCEh, 0>
Stringprep_table_element_0 <0FD0h, 0FFFh, 0>
Stringprep_table_element_0 <1022h, 0, 0>
Stringprep_table_element_0 <1028h, 0, 0>
Stringprep_table_element_0 <102Bh, 0, 0>
Stringprep_table_element_0 <1033h, 1035h, 0>
Stringprep_table_element_0 <103Ah, 103Fh, 0>
Stringprep_table_element_0 <105Ah, 109Fh, 0>
Stringprep_table_element_0 <10C6h, 10CFh, 0>
Stringprep_table_element_0 <10F9h, 10FAh, 0>
Stringprep_table_element_0 <10FCh, 10FFh, 0>
Stringprep_table_element_0 <115Ah, 115Eh, 0>
Stringprep_table_element_0 <11A3h, 11A7h, 0>
Stringprep_table_element_0 <11FAh, 11FFh, 0>
Stringprep_table_element_0 <1207h, 0, 0>
Stringprep_table_element_0 <1247h, 0, 0>
Stringprep_table_element_0 <1249h, 0, 0>
Stringprep_table_element_0 <124Eh, 124Fh, 0>
Stringprep_table_element_0 <1257h, 0, 0>
Stringprep_table_element_0 <1259h, 0, 0>
Stringprep_table_element_0 <125Eh, 125Fh, 0>
Stringprep_table_element_0 <1287h, 0, 0>
Stringprep_table_element_0 <1289h, 0, 0>
Stringprep_table_element_0 <128Eh, 128Fh, 0>
Stringprep_table_element_0 <12AFh, 0, 0>
Stringprep_table_element_0 <12B1h, 0, 0>
Stringprep_table_element_0 <12B6h, 12B7h, 0>
Stringprep_table_element_0 <12BFh, 0, 0>
Stringprep_table_element_0 <12C1h, 0, 0>
Stringprep_table_element_0 <12C6h, 12C7h, 0>
Stringprep_table_element_0 <12CFh, 0, 0>
Stringprep_table_element_0 <12D7h, 0, 0>
Stringprep_table_element_0 <12EFh, 0, 0>
Stringprep_table_element_0 <130Fh, 0, 0>
Stringprep_table_element_0 <1311h, 0, 0>
Stringprep_table_element_0 <1316h, 1317h, 0>
Stringprep_table_element_0 <131Fh, 0, 0>
Stringprep_table_element_0 <1347h, 0, 0>
Stringprep_table_element_0 <135Bh, 1360h, 0>
Stringprep_table_element_0 <137Dh, 139Fh, 0>
Stringprep_table_element_0 <13F5h, 1400h, 0>
Stringprep_table_element_0 <1677h, 167Fh, 0>
Stringprep_table_element_0 <169Dh, 169Fh, 0>
Stringprep_table_element_0 <16F1h, 16FFh, 0>
Stringprep_table_element_0 <170Dh, 0, 0>
Stringprep_table_element_0 <1715h, 171Fh, 0>
Stringprep_table_element_0 <1737h, 173Fh, 0>
Stringprep_table_element_0 <1754h, 175Fh, 0>
Stringprep_table_element_0 <176Dh, 0, 0>
Stringprep_table_element_0 <1771h, 0, 0>
Stringprep_table_element_0 <1774h, 177Fh, 0>
Stringprep_table_element_0 <17DDh, 17DFh, 0>
Stringprep_table_element_0 <17EAh, 17FFh, 0>
Stringprep_table_element_0 <180Fh, 0, 0>
Stringprep_table_element_0 <181Ah, 181Fh, 0>
Stringprep_table_element_0 <1878h, 187Fh, 0>
Stringprep_table_element_0 <18AAh, 1DFFh, 0>
Stringprep_table_element_0 <1E9Ch, 1E9Fh, 0>
Stringprep_table_element_0 <1EFAh, 1EFFh, 0>
Stringprep_table_element_0 <1F16h, 1F17h, 0>
Stringprep_table_element_0 <1F1Eh, 1F1Fh, 0>
Stringprep_table_element_0 <1F46h, 1F47h, 0>
Stringprep_table_element_0 <1F4Eh, 1F4Fh, 0>
Stringprep_table_element_0 <1F58h, 0, 0>
Stringprep_table_element_0 <1F5Ah, 0, 0>
Stringprep_table_element_0 <1F5Ch, 0, 0>
Stringprep_table_element_0 <1F5Eh, 0, 0>
Stringprep_table_element_0 <1F7Eh, 1F7Fh, 0>
Stringprep_table_element_0 <1FB5h, 0, 0>
Stringprep_table_element_0 <1FC5h, 0, 0>
Stringprep_table_element_0 <1FD4h, 1FD5h, 0>
Stringprep_table_element_0 <1FDCh, 0, 0>
Stringprep_table_element_0 <1FF0h, 1FF1h, 0>
Stringprep_table_element_0 <1FF5h, 0, 0>
Stringprep_table_element_0 <1FFFh, 0, 0>
Stringprep_table_element_0 <2053h, 2056h, 0>
Stringprep_table_element_0 <2058h, 205Eh, 0>
Stringprep_table_element_0 <2064h, 2069h, 0>
Stringprep_table_element_0 <2072h, 2073h, 0>
Stringprep_table_element_0 <208Fh, 209Fh, 0>
Stringprep_table_element_0 <20B2h, 20CFh, 0>
Stringprep_table_element_0 <20EBh, 20FFh, 0>
Stringprep_table_element_0 <213Bh, 213Ch, 0>
Stringprep_table_element_0 <214Ch, 2152h, 0>
Stringprep_table_element_0 <2184h, 218Fh, 0>
Stringprep_table_element_0 <23CFh, 23FFh, 0>
Stringprep_table_element_0 <2427h, 243Fh, 0>
Stringprep_table_element_0 <244Bh, 245Fh, 0>
Stringprep_table_element_0 <24FFh, 0, 0>
Stringprep_table_element_0 <2614h, 2615h, 0>
Stringprep_table_element_0 <2618h, 0, 0>
Stringprep_table_element_0 <267Eh, 267Fh, 0>
Stringprep_table_element_0 <268Ah, 2700h, 0>
Stringprep_table_element_0 <2705h, 0, 0>
Stringprep_table_element_0 <270Ah, 270Bh, 0>
Stringprep_table_element_0 <2728h, 0, 0>
Stringprep_table_element_0 <274Ch, 0, 0>
Stringprep_table_element_0 <274Eh, 0, 0>
Stringprep_table_element_0 <2753h, 2755h, 0>
Stringprep_table_element_0 <2757h, 0, 0>
Stringprep_table_element_0 <275Fh, 2760h, 0>
Stringprep_table_element_0 <2795h, 2797h, 0>
Stringprep_table_element_0 <27B0h, 0, 0>
Stringprep_table_element_0 <27BFh, 27CFh, 0>
Stringprep_table_element_0 <27ECh, 27EFh, 0>
Stringprep_table_element_0 <2B00h, 2E7Fh, 0>
Stringprep_table_element_0 <2E9Ah, 0, 0>
Stringprep_table_element_0 <2EF4h, 2EFFh, 0>
Stringprep_table_element_0 <2FD6h, 2FEFh, 0>
Stringprep_table_element_0 <2FFCh, 2FFFh, 0>
Stringprep_table_element_0 <3040h, 0, 0>
Stringprep_table_element_0 <3097h, 3098h, 0>
Stringprep_table_element_0 <3100h, 3104h, 0>
Stringprep_table_element_0 <312Dh, 3130h, 0>
Stringprep_table_element_0 <318Fh, 0, 0>
Stringprep_table_element_0 <31B8h, 31EFh, 0>
Stringprep_table_element_0 <321Dh, 321Fh, 0>
Stringprep_table_element_0 <3244h, 3250h, 0>
Stringprep_table_element_0 <327Ch, 327Eh, 0>
Stringprep_table_element_0 <32CCh, 32CFh, 0>
Stringprep_table_element_0 <32FFh, 0, 0>
Stringprep_table_element_0 <3377h, 337Ah, 0>
Stringprep_table_element_0 <33DEh, 33DFh, 0>
Stringprep_table_element_0 <33FFh, 0, 0>
Stringprep_table_element_0 <4DB6h, 4DFFh, 0>
Stringprep_table_element_0 <9FA6h, 9FFFh, 0>
Stringprep_table_element_0 <0A48Dh, 0A48Fh, 0>
Stringprep_table_element_0 <0A4C7h, 0ABFFh, 0>
Stringprep_table_element_0 <0D7A4h, 0D7FFh, 0>
Stringprep_table_element_0 <0FA2Eh, 0FA2Fh, 0>
Stringprep_table_element_0 <0FA6Bh, 0FAFFh, 0>
Stringprep_table_element_0 <0FB07h, 0FB12h, 0>
Stringprep_table_element_0 <0FB18h, 0FB1Ch, 0>
Stringprep_table_element_0 <0FB37h, 0, 0>
Stringprep_table_element_0 <0FB3Dh, 0, 0>
Stringprep_table_element_0 <0FB3Fh, 0, 0>
Stringprep_table_element_0 <0FB42h, 0, 0>
Stringprep_table_element_0 <0FB45h, 0, 0>
Stringprep_table_element_0 <0FBB2h, 0FBD2h, 0>
Stringprep_table_element_0 <0FD40h, 0FD4Fh, 0>
Stringprep_table_element_0 <0FD90h, 0FD91h, 0>
Stringprep_table_element_0 <0FDC8h, 0FDCFh, 0>
Stringprep_table_element_0 <0FDFDh, 0FDFFh, 0>
Stringprep_table_element_0 <0FE10h, 0FE1Fh, 0>
Stringprep_table_element_0 <0FE24h, 0FE2Fh, 0>
Stringprep_table_element_0 <0FE47h, 0FE48h, 0>
Stringprep_table_element_0 <0FE53h, 0, 0>
Stringprep_table_element_0 <0FE67h, 0, 0>
Stringprep_table_element_0 <0FE6Ch, 0FE6Fh, 0>
Stringprep_table_element_0 <0FE75h, 0, 0>
Stringprep_table_element_0 <0FEFDh, 0FEFEh, 0>
Stringprep_table_element_0 <0FF00h, 0, 0>
Stringprep_table_element_0 <0FFBFh, 0FFC1h, 0>
Stringprep_table_element_0 <0FFC8h, 0FFC9h, 0>
Stringprep_table_element_0 <0FFD0h, 0FFD1h, 0>
Stringprep_table_element_0 <0FFD8h, 0FFD9h, 0>
Stringprep_table_element_0 <0FFDDh, 0FFDFh, 0>
Stringprep_table_element_0 <0FFE7h, 0, 0>
Stringprep_table_element_0 <0FFEFh, 0FFF8h, 0>
Stringprep_table_element_0 <10000h, 102FFh, 0>
Stringprep_table_element_0 <1031Fh, 0, 0>
Stringprep_table_element_0 <10324h, 1032Fh, 0>
Stringprep_table_element_0 <1034Bh, 103FFh, 0>
Stringprep_table_element_0 <10426h, 10427h, 0>
Stringprep_table_element_0 <1044Eh, 1CFFFh, 0>
Stringprep_table_element_0 <1D0F6h, 1D0FFh, 0>
Stringprep_table_element_0 <1D127h, 1D129h, 0>
Stringprep_table_element_0 <1D1DEh, 1D3FFh, 0>
Stringprep_table_element_0 <1D455h, 0, 0>
Stringprep_table_element_0 <1D49Dh, 0, 0>
Stringprep_table_element_0 <1D4A0h, 1D4A1h, 0>
Stringprep_table_element_0 <1D4A3h, 1D4A4h, 0>
Stringprep_table_element_0 <1D4A7h, 1D4A8h, 0>
Stringprep_table_element_0 <1D4ADh, 0, 0>
Stringprep_table_element_0 <1D4BAh, 0, 0>
Stringprep_table_element_0 <1D4BCh, 0, 0>
Stringprep_table_element_0 <1D4C1h, 0, 0>
Stringprep_table_element_0 <1D4C4h, 0, 0>
Stringprep_table_element_0 <1D506h, 0, 0>
Stringprep_table_element_0 <1D50Bh, 1D50Ch, 0>
Stringprep_table_element_0 <1D515h, 0, 0>
Stringprep_table_element_0 <1D51Dh, 0, 0>
Stringprep_table_element_0 <1D53Ah, 0, 0>
Stringprep_table_element_0 <1D53Fh, 0, 0>
Stringprep_table_element_0 <1D545h, 0, 0>
Stringprep_table_element_0 <1D547h, 1D549h, 0>
Stringprep_table_element_0 <1D551h, 0, 0>
Stringprep_table_element_0 <1D6A4h, 1D6A7h, 0>
Stringprep_table_element_0 <1D7CAh, 1D7CDh, 0>
Stringprep_table_element_0 <1D800h, 1FFFDh, 0>
Stringprep_table_element_0 <2A6D7h, 2F7FFh, 0>
Stringprep_table_element_0 <2FA1Eh, 2FFFDh, 0>
Stringprep_table_element_0 <30000h, 3FFFDh, 0>
Stringprep_table_element_0 <40000h, 4FFFDh, 0>
Stringprep_table_element_0 <50000h, 5FFFDh, 0>
Stringprep_table_element_0 <60000h, 6FFFDh, 0>
Stringprep_table_element_0 <70000h, 7FFFDh, 0>
Stringprep_table_element_0 <80000h, 8FFFDh, 0>
Stringprep_table_element_0 <90000h, 9FFFDh, 0>
Stringprep_table_element_0 <0A0000h, 0AFFFDh, 0>
Stringprep_table_element_0 <0B0000h, 0BFFFDh, 0>
Stringprep_table_element_0 <0C0000h, 0CFFFDh, 0>
Stringprep_table_element_0 <0D0000h, 0DFFFDh, 0>
Stringprep_table_element_0 <0E0000h, 0,	0>
Stringprep_table_element_0 <0E0002h, 0E001Fh, 0>
Stringprep_table_element_0 <0E0080h, 0EFFFDh, 0>
Stringprep_table_element_0  <0>
align 10h
public _stringprep_rfc3454_B_1
			
			
Stringprep_table_element_0 <34Fh, 0, 0>
Stringprep_table_element_0 <1806h, 0, 0>
Stringprep_table_element_0 <180Bh, 0, 0>
Stringprep_table_element_0 <180Ch, 0, 0>
Stringprep_table_element_0 <180Dh, 0, 0>
Stringprep_table_element_0 <200Bh, 0, 0>
Stringprep_table_element_0 <200Ch, 0, 0>
Stringprep_table_element_0 <200Dh, 0, 0>
Stringprep_table_element_0 <2060h, 0, 0>
Stringprep_table_element_0 <0FE00h, 0, 0>
Stringprep_table_element_0 <0FE01h, 0, 0>
Stringprep_table_element_0 <0FE02h, 0, 0>
Stringprep_table_element_0 <0FE03h, 0, 0>
Stringprep_table_element_0 <0FE04h, 0, 0>
Stringprep_table_element_0 <0FE05h, 0, 0>
Stringprep_table_element_0 <0FE06h, 0, 0>
Stringprep_table_element_0 <0FE07h, 0, 0>
Stringprep_table_element_0 <0FE08h, 0, 0>
Stringprep_table_element_0 <0FE09h, 0, 0>
Stringprep_table_element_0 <0FE0Ah, 0, 0>
Stringprep_table_element_0 <0FE0Bh, 0, 0>
Stringprep_table_element_0 <0FE0Ch, 0, 0>
Stringprep_table_element_0 <0FE0Dh, 0, 0>
Stringprep_table_element_0 <0FE0Eh, 0, 0>
Stringprep_table_element_0 <0FE0Fh, 0, 0>
Stringprep_table_element_0 <0FEFFh, 0, 0>
Stringprep_table_element_0  <0>
public _stringprep_rfc3454_B_2
			
			
dd 0			
dd 61h,	3 dup(0)	
dd 42h			
dd 0			
dd 62h,	3 dup(0)	
dd 43h			
dd 0			
dd 63h,	3 dup(0)	
dd 44h			
dd 0			
dd 64h,	3 dup(0)	
dd 45h			
dd 0			
dd 65h,	3 dup(0)	
dd 46h			
dd 0			
dd 66h,	3 dup(0)	
dd 47h			
dd 0			
dd 67h,	3 dup(0)	
dd 48h			
dd 0			
dd 68h,	3 dup(0)	
dd 49h			
dd 0			
dd 69h,	3 dup(0)	
dd 4Ah			
dd 0			
dd 6Ah,	3 dup(0)	
dd 4Bh			
dd 0			
dd 6Bh,	3 dup(0)	
dd 4Ch			
dd 0			
dd 6Ch,	3 dup(0)	
dd 4Dh			
dd 0			
dd 6Dh,	3 dup(0)	
dd 4Eh			
dd 0			
dd 6Eh,	3 dup(0)	
dd 4Fh			
dd 0			
dd 6Fh,	3 dup(0)	
dd 50h			
dd 0			
dd 70h,	3 dup(0)	
dd 51h			
dd 0			
dd 71h,	3 dup(0)	
dd 52h			
dd 0			
dd 72h,	3 dup(0)	
dd 53h			
dd 0			
dd 73h,	3 dup(0)	
dd 54h			
dd 0			
dd 74h,	3 dup(0)	
dd 55h			
dd 0			
dd 75h,	3 dup(0)	
dd 56h			
dd 0			
dd 76h,	3 dup(0)	
dd 57h			
dd 0			
dd 77h,	3 dup(0)	
dd 58h			
dd 0			
dd 78h,	3 dup(0)	
dd 59h			
dd 0			
dd 79h,	3 dup(0)	
dd 5Ah			
dd 0			
dd 7Ah,	3 dup(0)	
dd 0B5h			
dd 0			
dd 3BCh, 3 dup(0)	
dd 0C0h			
dd 0			
dd 0E0h, 3 dup(0)	
dd 0C1h			
dd 0			
dd 0E1h, 3 dup(0)	
dd 0C2h			
dd 0			
dd 0E2h, 3 dup(0)	
dd 0C3h			
dd 0			
dd 0E3h, 3 dup(0)	
dd 0C4h			
dd 0			
dd 0E4h, 3 dup(0)	
dd 0C5h			
dd 0			
dd 0E5h, 3 dup(0)	
dd 0C6h			
dd 0			
dd 0E6h, 3 dup(0)	
dd 0C7h			
dd 0			
dd 0E7h, 3 dup(0)	
dd 0C8h			
dd 0			
dd 0E8h, 3 dup(0)	
dd 0C9h			
dd 0			
dd 0E9h, 3 dup(0)	
dd 0CAh			
dd 0			
dd 0EAh, 3 dup(0)	
dd 0CBh			
dd 0			
dd 0EBh, 3 dup(0)	
dd 0CCh			
dd 0			
dd 0ECh, 3 dup(0)	
dd 0CDh			
dd 0			
dd 0EDh, 3 dup(0)	
dd 0CEh			
dd 0			
dd 0EEh, 3 dup(0)	
dd 0CFh			
dd 0			
dd 0EFh, 3 dup(0)	
dd 0D0h			
dd 0			
dd 0F0h, 3 dup(0)	
dd 0D1h			
dd 0			
dd 0F1h, 3 dup(0)	
dd 0D2h			
dd 0			
dd 0F2h, 3 dup(0)	
dd 0D3h			
dd 0			
dd 0F3h, 3 dup(0)	
dd 0D4h			
dd 0			
dd 0F4h, 3 dup(0)	
dd 0D5h			
dd 0			
dd 0F5h, 3 dup(0)	
dd 0D6h			
dd 0			
dd 0F6h, 3 dup(0)	
dd 0D8h			
dd 0			
dd 0F8h, 3 dup(0)	
dd 0D9h			
dd 0			
dd 0F9h, 3 dup(0)	
dd 0DAh			
dd 0			
dd 0FAh, 3 dup(0)	
dd 0DBh			
dd 0			
dd 0FBh, 3 dup(0)	
dd 0DCh			
dd 0			
dd 0FCh, 3 dup(0)	
dd 0DDh			
dd 0			
dd 0FDh, 3 dup(0)	
dd 0DEh			
dd 0			
dd 0FEh, 3 dup(0)	
dd 0DFh			
dd 0			
dd 2 dup(73h), 2 dup(0)	
dd 100h			
dd 0			
dd 101h, 3 dup(0)	
dd 102h			
dd 0			
dd 103h, 3 dup(0)	
dd 104h			
dd 0			
dd 105h, 3 dup(0)	
dd 106h			
dd 0			
dd 107h, 3 dup(0)	
dd 108h			
dd 0			
dd 109h, 3 dup(0)	
dd 10Ah			
dd 0			
dd 10Bh, 3 dup(0)	
dd 10Ch			
dd 0			
dd 10Dh, 3 dup(0)	
dd 10Eh			
dd 0			
dd 10Fh, 3 dup(0)	
dd 110h			
dd 0			
dd 111h, 3 dup(0)	
dd 112h			
dd 0			
dd 113h, 3 dup(0)	
dd 114h			
dd 0			
dd 115h, 3 dup(0)	
dd 116h			
dd 0			
dd 117h, 3 dup(0)	
dd 118h			
dd 0			
dd 119h, 3 dup(0)	
dd 11Ah			
dd 0			
dd 11Bh, 3 dup(0)	
dd 11Ch			
dd 0			
dd 11Dh, 3 dup(0)	
dd 11Eh			
dd 0			
dd 11Fh, 3 dup(0)	
dd 120h			
dd 0			
dd 121h, 3 dup(0)	
dd 122h			
dd 0			
dd 123h, 3 dup(0)	
dd 124h			
dd 0			
dd 125h, 3 dup(0)	
dd 126h			
dd 0			
dd 127h, 3 dup(0)	
dd 128h			
dd 0			
dd 129h, 3 dup(0)	
dd 12Ah			
dd 0			
dd 12Bh, 3 dup(0)	
dd 12Ch			
dd 0			
dd 12Dh, 3 dup(0)	
dd 12Eh			
dd 0			
dd 12Fh, 3 dup(0)	
dd 130h			
dd 0			
dd 69h,	307h, 2	dup(0)	
dd 132h			
dd 0			
dd 133h, 3 dup(0)	
dd 134h			
dd 0			
dd 135h, 3 dup(0)	
dd 136h			
dd 0			
dd 137h, 3 dup(0)	
dd 139h			
dd 0			
dd 13Ah, 3 dup(0)	
dd 13Bh			
dd 0			
dd 13Ch, 3 dup(0)	
dd 13Dh			
dd 0			
dd 13Eh, 3 dup(0)	
dd 13Fh			
dd 0			
dd 140h, 3 dup(0)	
dd 141h			
dd 0			
dd 142h, 3 dup(0)	
dd 143h			
dd 0			
dd 144h, 3 dup(0)	
dd 145h			
dd 0			
dd 146h, 3 dup(0)	
dd 147h			
dd 0			
dd 148h, 3 dup(0)	
dd 149h			
dd 0			
dd 2BCh, 6Eh, 2	dup(0)	
dd 14Ah			
dd 0			
dd 14Bh, 3 dup(0)	
dd 14Ch			
dd 0			
dd 14Dh, 3 dup(0)	
dd 14Eh			
dd 0			
dd 14Fh, 3 dup(0)	
dd 150h			
dd 0			
dd 151h, 3 dup(0)	
dd 152h			
dd 0			
dd 153h, 3 dup(0)	
dd 154h			
dd 0			
dd 155h, 3 dup(0)	
dd 156h			
dd 0			
dd 157h, 3 dup(0)	
dd 158h			
dd 0			
dd 159h, 3 dup(0)	
dd 15Ah			
dd 0			
dd 15Bh, 3 dup(0)	
dd 15Ch			
dd 0			
dd 15Dh, 3 dup(0)	
dd 15Eh			
dd 0			
dd 15Fh, 3 dup(0)	
dd 160h			
dd 0			
dd 161h, 3 dup(0)	
dd 162h			
dd 0			
dd 163h, 3 dup(0)	
dd 164h			
dd 0			
dd 165h, 3 dup(0)	
dd 166h			
dd 0			
dd 167h, 3 dup(0)	
dd 168h			
dd 0			
dd 169h, 3 dup(0)	
dd 16Ah			
dd 0			
dd 16Bh, 3 dup(0)	
dd 16Ch			
dd 0			
dd 16Dh, 3 dup(0)	
dd 16Eh			
dd 0			
dd 16Fh, 3 dup(0)	
dd 170h			
dd 0			
dd 171h, 3 dup(0)	
dd 172h			
dd 0			
dd 173h, 3 dup(0)	
dd 174h			
dd 0			
dd 175h, 3 dup(0)	
dd 176h			
dd 0			
dd 177h, 3 dup(0)	
dd 178h			
dd 0			
dd 0FFh, 3 dup(0)	
dd 179h			
dd 0			
dd 17Ah, 3 dup(0)	
dd 17Bh			
dd 0			
dd 17Ch, 3 dup(0)	
dd 17Dh			
dd 0			
dd 17Eh, 3 dup(0)	
dd 17Fh			
dd 0			
dd 73h,	3 dup(0)	
dd 181h			
dd 0			
dd 253h, 3 dup(0)	
dd 182h			
dd 0			
dd 183h, 3 dup(0)	
dd 184h			
dd 0			
dd 185h, 3 dup(0)	
dd 186h			
dd 0			
dd 254h, 3 dup(0)	
dd 187h			
dd 0			
dd 188h, 3 dup(0)	
dd 189h			
dd 0			
dd 256h, 3 dup(0)	
dd 18Ah			
dd 0			
dd 257h, 3 dup(0)	
dd 18Bh			
dd 0			
dd 18Ch, 3 dup(0)	
dd 18Eh			
dd 0			
dd 1DDh, 3 dup(0)	
dd 18Fh			
dd 0			
dd 259h, 3 dup(0)	
dd 190h			
dd 0			
dd 25Bh, 3 dup(0)	
dd 191h			
dd 0			
dd 192h, 3 dup(0)	
dd 193h			
dd 0			
dd 260h, 3 dup(0)	
dd 194h			
dd 0			
dd 263h, 3 dup(0)	
dd 196h			
dd 0			
dd 269h, 3 dup(0)	
dd 197h			
dd 0			
dd 268h, 3 dup(0)	
dd 198h			
dd 0			
dd 199h, 3 dup(0)	
dd 19Ch			
dd 0			
dd 26Fh, 3 dup(0)	
dd 19Dh			
dd 0			
dd 272h, 3 dup(0)	
dd 19Fh			
dd 0			
dd 275h, 3 dup(0)	
dd 1A0h			
dd 0			
dd 1A1h, 3 dup(0)	
dd 1A2h			
dd 0			
dd 1A3h, 3 dup(0)	
dd 1A4h			
dd 0			
dd 1A5h, 3 dup(0)	
dd 1A6h			
dd 0			
dd 280h, 3 dup(0)	
dd 1A7h			
dd 0			
dd 1A8h, 3 dup(0)	
dd 1A9h			
dd 0			
dd 283h, 3 dup(0)	
dd 1ACh			
dd 0			
dd 1ADh, 3 dup(0)	
dd 1AEh			
dd 0			
dd 288h, 3 dup(0)	
dd 1AFh			
dd 0			
dd 1B0h, 3 dup(0)	
dd 1B1h			
dd 0			
dd 28Ah, 3 dup(0)	
dd 1B2h			
dd 0			
dd 28Bh, 3 dup(0)	
dd 1B3h			
dd 0			
dd 1B4h, 3 dup(0)	
dd 1B5h			
dd 0			
dd 1B6h, 3 dup(0)	
dd 1B7h			
dd 0			
dd 292h, 3 dup(0)	
dd 1B8h			
dd 0			
dd 1B9h, 3 dup(0)	
dd 1BCh			
dd 0			
dd 1BDh, 3 dup(0)	
dd 1C4h			
dd 0			
dd 1C6h, 3 dup(0)	
dd 1C5h			
dd 0			
dd 1C6h, 3 dup(0)	
dd 1C7h			
dd 0			
dd 1C9h, 3 dup(0)	
dd 1C8h			
dd 0			
dd 1C9h, 3 dup(0)	
dd 1CAh			
dd 0			
dd 1CCh, 3 dup(0)	
dd 1CBh			
dd 0			
dd 1CCh, 3 dup(0)	
dd 1CDh			
dd 0			
dd 1CEh, 3 dup(0)	
dd 1CFh			
dd 0			
dd 1D0h, 3 dup(0)	
dd 1D1h			
dd 0			
dd 1D2h, 3 dup(0)	
dd 1D3h			
dd 0			
dd 1D4h, 3 dup(0)	
dd 1D5h			
dd 0			
dd 1D6h, 3 dup(0)	
dd 1D7h			
dd 0			
dd 1D8h, 3 dup(0)	
dd 1D9h			
dd 0			
dd 1DAh, 3 dup(0)	
dd 1DBh			
dd 0			
dd 1DCh, 3 dup(0)	
dd 1DEh			
dd 0			
dd 1DFh, 3 dup(0)	
dd 1E0h			
dd 0			
dd 1E1h, 3 dup(0)	
dd 1E2h			
dd 0			
dd 1E3h, 3 dup(0)	
dd 1E4h			
dd 0			
dd 1E5h, 3 dup(0)	
dd 1E6h			
dd 0			
dd 1E7h, 3 dup(0)	
dd 1E8h			
dd 0			
dd 1E9h, 3 dup(0)	
dd 1EAh			
dd 0			
dd 1EBh, 3 dup(0)	
dd 1ECh			
dd 0			
dd 1EDh, 3 dup(0)	
dd 1EEh			
dd 0			
dd 1EFh, 3 dup(0)	
dd 1F0h			
dd 0			
dd 6Ah,	30Ch, 2	dup(0)	
dd 1F1h			
dd 0			
dd 1F3h, 3 dup(0)	
dd 1F2h			
dd 0			
dd 1F3h, 3 dup(0)	
dd 1F4h			
dd 0			
dd 1F5h, 3 dup(0)	
dd 1F6h			
dd 0			
dd 195h, 3 dup(0)	
dd 1F7h			
dd 0			
dd 1BFh, 3 dup(0)	
dd 1F8h			
dd 0			
dd 1F9h, 3 dup(0)	
dd 1FAh			
dd 0			
dd 1FBh, 3 dup(0)	
dd 1FCh			
dd 0			
dd 1FDh, 3 dup(0)	
dd 1FEh			
dd 0			
dd 1FFh, 3 dup(0)	
dd 200h			
dd 0			
dd 201h, 3 dup(0)	
dd 202h			
dd 0			
dd 203h, 3 dup(0)	
dd 204h			
dd 0			
dd 205h, 3 dup(0)	
dd 206h			
dd 0			
dd 207h, 3 dup(0)	
dd 208h			
dd 0			
dd 209h, 3 dup(0)	
dd 20Ah			
dd 0			
dd 20Bh, 3 dup(0)	
dd 20Ch			
dd 0			
dd 20Dh, 3 dup(0)	
dd 20Eh			
dd 0			
dd 20Fh, 3 dup(0)	
dd 210h			
dd 0			
dd 211h, 3 dup(0)	
dd 212h			
dd 0			
dd 213h, 3 dup(0)	
dd 214h			
dd 0			
dd 215h, 3 dup(0)	
dd 216h			
dd 0			
dd 217h, 3 dup(0)	
dd 218h			
dd 0			
dd 219h, 3 dup(0)	
dd 21Ah			
dd 0			
dd 21Bh, 3 dup(0)	
dd 21Ch			
dd 0			
dd 21Dh, 3 dup(0)	
dd 21Eh			
dd 0			
dd 21Fh, 3 dup(0)	
dd 220h			
dd 0			
dd 19Eh, 3 dup(0)	
dd 222h			
dd 0			
dd 223h, 3 dup(0)	
dd 224h			
dd 0			
dd 225h, 3 dup(0)	
dd 226h			
dd 0			
dd 227h, 3 dup(0)	
dd 228h			
dd 0			
dd 229h, 3 dup(0)	
dd 22Ah			
dd 0			
dd 22Bh, 3 dup(0)	
dd 22Ch			
dd 0			
dd 22Dh, 3 dup(0)	
dd 22Eh			
dd 0			
dd 22Fh, 3 dup(0)	
dd 230h			
dd 0			
dd 231h, 3 dup(0)	
dd 232h			
dd 0			
dd 233h, 3 dup(0)	
dd 345h			
dd 0			
dd 3B9h, 3 dup(0)	
dd 37Ah			
dd 0			
dd 20h,	3B9h, 2	dup(0)	
dd 386h			
dd 0			
dd 3ACh, 3 dup(0)	
dd 388h			
dd 0			
dd 3ADh, 3 dup(0)	
dd 389h			
dd 0			
dd 3AEh, 3 dup(0)	
dd 38Ah			
dd 0			
dd 3AFh, 3 dup(0)	
dd 38Ch			
dd 0			
dd 3CCh, 3 dup(0)	
dd 38Eh			
dd 0			
dd 3CDh, 3 dup(0)	
dd 38Fh			
dd 0			
dd 3CEh, 3 dup(0)	
dd 390h			
dd 0			
dd 3B9h, 308h, 301h, 0	
dd 391h			
dd 0			
dd 3B1h, 3 dup(0)	
dd 392h			
dd 0			
dd 3B2h, 3 dup(0)	
dd 393h			
dd 0			
dd 3B3h, 3 dup(0)	
dd 394h			
dd 0			
dd 3B4h, 3 dup(0)	
dd 395h			
dd 0			
dd 3B5h, 3 dup(0)	
dd 396h			
dd 0			
dd 3B6h, 3 dup(0)	
dd 397h			
dd 0			
dd 3B7h, 3 dup(0)	
dd 398h			
dd 0			
dd 3B8h, 3 dup(0)	
dd 399h			
dd 0			
dd 3B9h, 3 dup(0)	
dd 39Ah			
dd 0			
dd 3BAh, 3 dup(0)	
dd 39Bh			
dd 0			
dd 3BBh, 3 dup(0)	
dd 39Ch			
dd 0			
dd 3BCh, 3 dup(0)	
dd 39Dh			
dd 0			
dd 3BDh, 3 dup(0)	
dd 39Eh			
dd 0			
dd 3BEh, 3 dup(0)	
dd 39Fh			
dd 0			
dd 3BFh, 3 dup(0)	
dd 3A0h			
dd 0			
dd 3C0h, 3 dup(0)	
dd 3A1h			
dd 0			
dd 3C1h, 3 dup(0)	
dd 3A3h			
dd 0			
dd 3C3h, 3 dup(0)	
dd 3A4h			
dd 0			
dd 3C4h, 3 dup(0)	
dd 3A5h			
dd 0			
dd 3C5h, 3 dup(0)	
dd 3A6h			
dd 0			
dd 3C6h, 3 dup(0)	
dd 3A7h			
dd 0			
dd 3C7h, 3 dup(0)	
dd 3A8h			
dd 0			
dd 3C8h, 3 dup(0)	
dd 3A9h			
dd 0			
dd 3C9h, 3 dup(0)	
dd 3AAh			
dd 0			
dd 3CAh, 3 dup(0)	
dd 3ABh			
dd 0			
dd 3CBh, 3 dup(0)	
dd 3B0h			
dd 0			
dd 3C5h, 308h, 301h, 0	
dd 3C2h			
dd 0			
dd 3C3h, 3 dup(0)	
dd 3D0h			
dd 0			
dd 3B2h, 3 dup(0)	
dd 3D1h			
dd 0			
dd 3B8h, 3 dup(0)	
dd 3D2h			
dd 0			
dd 3C5h, 3 dup(0)	
dd 3D3h			
dd 0			
dd 3CDh, 3 dup(0)	
dd 3D4h			
dd 0			
dd 3CBh, 3 dup(0)	
dd 3D5h			
dd 0			
dd 3C6h, 3 dup(0)	
dd 3D6h			
dd 0			
dd 3C0h, 3 dup(0)	
dd 3D8h			
dd 0			
dd 3D9h, 3 dup(0)	
dd 3DAh			
dd 0			
dd 3DBh, 3 dup(0)	
dd 3DCh			
dd 0			
dd 3DDh, 3 dup(0)	
dd 3DEh			
dd 0			
dd 3DFh, 3 dup(0)	
dd 3E0h			
dd 0			
dd 3E1h, 3 dup(0)	
dd 3E2h			
dd 0			
dd 3E3h, 3 dup(0)	
dd 3E4h			
dd 0			
dd 3E5h, 3 dup(0)	
dd 3E6h			
dd 0			
dd 3E7h, 3 dup(0)	
dd 3E8h			
dd 0			
dd 3E9h, 3 dup(0)	
dd 3EAh			
dd 0			
dd 3EBh, 3 dup(0)	
dd 3ECh			
dd 0			
dd 3EDh, 3 dup(0)	
dd 3EEh			
dd 0			
dd 3EFh, 3 dup(0)	
dd 3F0h			
dd 0			
dd 3BAh, 3 dup(0)	
dd 3F1h			
dd 0			
dd 3C1h, 3 dup(0)	
dd 3F2h			
dd 0			
dd 3C3h, 3 dup(0)	
dd 3F4h			
dd 0			
dd 3B8h, 3 dup(0)	
dd 3F5h			
dd 0			
dd 3B5h, 3 dup(0)	
dd 400h			
dd 0			
dd 450h, 3 dup(0)	
dd 401h			
dd 0			
dd 451h, 3 dup(0)	
dd 402h			
dd 0			
dd 452h, 3 dup(0)	
dd 403h			
dd 0			
dd 453h, 3 dup(0)	
dd 404h			
dd 0			
dd 454h, 3 dup(0)	
dd 405h			
dd 0			
dd 455h, 3 dup(0)	
dd 406h			
dd 0			
dd 456h, 3 dup(0)	
dd 407h			
dd 0			
dd 457h, 3 dup(0)	
dd 408h			
dd 0			
dd 458h, 3 dup(0)	
dd 409h			
dd 0			
dd 459h, 3 dup(0)	
dd 40Ah			
dd 0			
dd 45Ah, 3 dup(0)	
dd 40Bh			
dd 0			
dd 45Bh, 3 dup(0)	
dd 40Ch			
dd 0			
dd 45Ch, 3 dup(0)	
dd 40Dh			
dd 0			
dd 45Dh, 3 dup(0)	
dd 40Eh			
dd 0			
dd 45Eh, 3 dup(0)	
dd 40Fh			
dd 0			
dd 45Fh, 3 dup(0)	
dd 410h			
dd 0			
dd 430h, 3 dup(0)	
dd 411h			
dd 0			
dd 431h, 3 dup(0)	
dd 412h			
dd 0			
dd 432h, 3 dup(0)	
dd 413h			
dd 0			
dd 433h, 3 dup(0)	
dd 414h			
dd 0			
dd 434h, 3 dup(0)	
dd 415h			
dd 0			
dd 435h, 3 dup(0)	
dd 416h			
dd 0			
dd 436h, 3 dup(0)	
dd 417h			
dd 0			
dd 437h, 3 dup(0)	
dd 418h			
dd 0			
dd 438h, 3 dup(0)	
dd 419h			
dd 0			
dd 439h, 3 dup(0)	
dd 41Ah			
dd 0			
dd 43Ah, 3 dup(0)	
dd 41Bh			
dd 0			
dd 43Bh, 3 dup(0)	
dd 41Ch			
dd 0			
dd 43Ch, 3 dup(0)	
dd 41Dh			
dd 0			
dd 43Dh, 3 dup(0)	
dd 41Eh			
dd 0			
dd 43Eh, 3 dup(0)	
dd 41Fh			
dd 0			
dd 43Fh, 3 dup(0)	
dd 420h			
dd 0			
dd 440h, 3 dup(0)	
dd 421h			
dd 0			
dd 441h, 3 dup(0)	
dd 422h			
dd 0			
dd 442h, 3 dup(0)	
dd 423h			
dd 0			
dd 443h, 3 dup(0)	
dd 424h			
dd 0			
dd 444h, 3 dup(0)	
dd 425h			
dd 0			
dd 445h, 3 dup(0)	
dd 426h			
dd 0			
dd 446h, 3 dup(0)	
dd 427h			
dd 0			
dd 447h, 3 dup(0)	
dd 428h			
dd 0			
dd 448h, 3 dup(0)	
dd 429h			
dd 0			
dd 449h, 3 dup(0)	
dd 42Ah			
dd 0			
dd 44Ah, 3 dup(0)	
dd 42Bh			
dd 0			
dd 44Bh, 3 dup(0)	
dd 42Ch			
dd 0			
dd 44Ch, 3 dup(0)	
dd 42Dh			
dd 0			
dd 44Dh, 3 dup(0)	
dd 42Eh			
dd 0			
dd 44Eh, 3 dup(0)	
dd 42Fh			
dd 0			
dd 44Fh, 3 dup(0)	
dd 460h			
dd 0			
dd 461h, 3 dup(0)	
dd 462h			
dd 0			
dd 463h, 3 dup(0)	
dd 464h			
dd 0			
dd 465h, 3 dup(0)	
dd 466h			
dd 0			
dd 467h, 3 dup(0)	
dd 468h			
dd 0			
dd 469h, 3 dup(0)	
dd 46Ah			
dd 0			
dd 46Bh, 3 dup(0)	
dd 46Ch			
dd 0			
dd 46Dh, 3 dup(0)	
dd 46Eh			
dd 0			
dd 46Fh, 3 dup(0)	
dd 470h			
dd 0			
dd 471h, 3 dup(0)	
dd 472h			
dd 0			
dd 473h, 3 dup(0)	
dd 474h			
dd 0			
dd 475h, 3 dup(0)	
dd 476h			
dd 0			
dd 477h, 3 dup(0)	
dd 478h			
dd 0			
dd 479h, 3 dup(0)	
dd 47Ah			
dd 0			
dd 47Bh, 3 dup(0)	
dd 47Ch			
dd 0			
dd 47Dh, 3 dup(0)	
dd 47Eh			
dd 0			
dd 47Fh, 3 dup(0)	
dd 480h			
dd 0			
dd 481h, 3 dup(0)	
dd 48Ah			
dd 0			
dd 48Bh, 3 dup(0)	
dd 48Ch			
dd 0			
dd 48Dh, 3 dup(0)	
dd 48Eh			
dd 0			
dd 48Fh, 3 dup(0)	
dd 490h			
dd 0			
dd 491h, 3 dup(0)	
dd 492h			
dd 0			
dd 493h, 3 dup(0)	
dd 494h			
dd 0			
dd 495h, 3 dup(0)	
dd 496h			
dd 0			
dd 497h, 3 dup(0)	
dd 498h			
dd 0			
dd 499h, 3 dup(0)	
dd 49Ah			
dd 0			
dd 49Bh, 3 dup(0)	
dd 49Ch			
dd 0			
dd 49Dh, 3 dup(0)	
dd 49Eh			
dd 0			
dd 49Fh, 3 dup(0)	
dd 4A0h			
dd 0			
dd 4A1h, 3 dup(0)	
dd 4A2h			
dd 0			
dd 4A3h, 3 dup(0)	
dd 4A4h			
dd 0			
dd 4A5h, 3 dup(0)	
dd 4A6h			
dd 0			
dd 4A7h, 3 dup(0)	
dd 4A8h			
dd 0			
dd 4A9h, 3 dup(0)	
dd 4AAh			
dd 0			
dd 4ABh, 3 dup(0)	
dd 4ACh			
dd 0			
dd 4ADh, 3 dup(0)	
dd 4AEh			
dd 0			
dd 4AFh, 3 dup(0)	
dd 4B0h			
dd 0			
dd 4B1h, 3 dup(0)	
dd 4B2h			
dd 0			
dd 4B3h, 3 dup(0)	
dd 4B4h			
dd 0			
dd 4B5h, 3 dup(0)	
dd 4B6h			
dd 0			
dd 4B7h, 3 dup(0)	
dd 4B8h			
dd 0			
dd 4B9h, 3 dup(0)	
dd 4BAh			
dd 0			
dd 4BBh, 3 dup(0)	
dd 4BCh			
dd 0			
dd 4BDh, 3 dup(0)	
dd 4BEh			
dd 0			
dd 4BFh, 3 dup(0)	
dd 4C1h			
dd 0			
dd 4C2h, 3 dup(0)	
dd 4C3h			
dd 0			
dd 4C4h, 3 dup(0)	
dd 4C5h			
dd 0			
dd 4C6h, 3 dup(0)	
dd 4C7h			
dd 0			
dd 4C8h, 3 dup(0)	
dd 4C9h			
dd 0			
dd 4CAh, 3 dup(0)	
dd 4CBh			
dd 0			
dd 4CCh, 3 dup(0)	
dd 4CDh			
dd 0			
dd 4CEh, 3 dup(0)	
dd 4D0h			
dd 0			
dd 4D1h, 3 dup(0)	
dd 4D2h			
dd 0			
dd 4D3h, 3 dup(0)	
dd 4D4h			
dd 0			
dd 4D5h, 3 dup(0)	
dd 4D6h			
dd 0			
dd 4D7h, 3 dup(0)	
dd 4D8h			
dd 0			
dd 4D9h, 3 dup(0)	
dd 4DAh			
dd 0			
dd 4DBh, 3 dup(0)	
dd 4DCh			
dd 0			
dd 4DDh, 3 dup(0)	
dd 4DEh			
dd 0			
dd 4DFh, 3 dup(0)	
dd 4E0h			
dd 0			
dd 4E1h, 3 dup(0)	
dd 4E2h			
dd 0			
dd 4E3h, 3 dup(0)	
dd 4E4h			
dd 0			
dd 4E5h, 3 dup(0)	
dd 4E6h			
dd 0			
dd 4E7h, 3 dup(0)	
dd 4E8h			
dd 0			
dd 4E9h, 3 dup(0)	
dd 4EAh			
dd 0			
dd 4EBh, 3 dup(0)	
dd 4ECh			
dd 0			
dd 4EDh, 3 dup(0)	
dd 4EEh			
dd 0			
dd 4EFh, 3 dup(0)	
dd 4F0h			
dd 0			
dd 4F1h, 3 dup(0)	
dd 4F2h			
dd 0			
dd 4F3h, 3 dup(0)	
dd 4F4h			
dd 0			
dd 4F5h, 3 dup(0)	
dd 4F8h			
dd 0			
dd 4F9h, 3 dup(0)	
dd 500h			
dd 0			
dd 501h, 3 dup(0)	
dd 502h			
dd 0			
dd 503h, 3 dup(0)	
dd 504h			
dd 0			
dd 505h, 3 dup(0)	
dd 506h			
dd 0			
dd 507h, 3 dup(0)	
dd 508h			
dd 0			
dd 509h, 3 dup(0)	
dd 50Ah			
dd 0			
dd 50Bh, 3 dup(0)	
dd 50Ch			
dd 0			
dd 50Dh, 3 dup(0)	
dd 50Eh			
dd 0			
dd 50Fh, 3 dup(0)	
dd 531h			
dd 0			
dd 561h, 3 dup(0)	
dd 532h			
dd 0			
dd 562h, 3 dup(0)	
dd 533h			
dd 0			
dd 563h, 3 dup(0)	
dd 534h			
dd 0			
dd 564h, 3 dup(0)	
dd 535h			
dd 0			
dd 565h, 3 dup(0)	
dd 536h			
dd 0			
dd 566h, 3 dup(0)	
dd 537h			
dd 0			
dd 567h, 3 dup(0)	
dd 538h			
dd 0			
dd 568h, 3 dup(0)	
dd 539h			
dd 0			
dd 569h, 3 dup(0)	
dd 53Ah			
dd 0			
dd 56Ah, 3 dup(0)	
dd 53Bh			
dd 0			
dd 56Bh, 3 dup(0)	
dd 53Ch			
dd 0			
dd 56Ch, 3 dup(0)	
dd 53Dh			
dd 0			
dd 56Dh, 3 dup(0)	
dd 53Eh			
dd 0			
dd 56Eh, 3 dup(0)	
dd 53Fh			
dd 0			
dd 56Fh, 3 dup(0)	
dd 540h			
dd 0			
dd 570h, 3 dup(0)	
dd 541h			
dd 0			
dd 571h, 3 dup(0)	
dd 542h			
dd 0			
dd 572h, 3 dup(0)	
dd 543h			
dd 0			
dd 573h, 3 dup(0)	
dd 544h			
dd 0			
dd 574h, 3 dup(0)	
dd 545h			
dd 0			
dd 575h, 3 dup(0)	
dd 546h			
dd 0			
dd 576h, 3 dup(0)	
dd 547h			
dd 0			
dd 577h, 3 dup(0)	
dd 548h			
dd 0			
dd 578h, 3 dup(0)	
dd 549h			
dd 0			
dd 579h, 3 dup(0)	
dd 54Ah			
dd 0			
dd 57Ah, 3 dup(0)	
dd 54Bh			
dd 0			
dd 57Bh, 3 dup(0)	
dd 54Ch			
dd 0			
dd 57Ch, 3 dup(0)	
dd 54Dh			
dd 0			
dd 57Dh, 3 dup(0)	
dd 54Eh			
dd 0			
dd 57Eh, 3 dup(0)	
dd 54Fh			
dd 0			
dd 57Fh, 3 dup(0)	
dd 550h			
dd 0			
dd 580h, 3 dup(0)	
dd 551h			
dd 0			
dd 581h, 3 dup(0)	
dd 552h			
dd 0			
dd 582h, 3 dup(0)	
dd 553h			
dd 0			
dd 583h, 3 dup(0)	
dd 554h			
dd 0			
dd 584h, 3 dup(0)	
dd 555h			
dd 0			
dd 585h, 3 dup(0)	
dd 556h			
dd 0			
dd 586h, 3 dup(0)	
dd 587h			
dd 0			
dd 565h, 582h, 2 dup(0)	
dd 1E00h		
dd 0			
dd 1E01h, 3 dup(0)	
dd 1E02h		
dd 0			
dd 1E03h, 3 dup(0)	
dd 1E04h		
dd 0			
dd 1E05h, 3 dup(0)	
dd 1E06h		
dd 0			
dd 1E07h, 3 dup(0)	
dd 1E08h		
dd 0			
dd 1E09h, 3 dup(0)	
dd 1E0Ah		
dd 0			
dd 1E0Bh, 3 dup(0)	
dd 1E0Ch		
dd 0			
dd 1E0Dh, 3 dup(0)	
dd 1E0Eh		
dd 0			
dd 1E0Fh, 3 dup(0)	
dd 1E10h		
dd 0			
dd 1E11h, 3 dup(0)	
dd 1E12h		
dd 0			
dd 1E13h, 3 dup(0)	
dd 1E14h		
dd 0			
dd 1E15h, 3 dup(0)	
dd 1E16h		
dd 0			
dd 1E17h, 3 dup(0)	
dd 1E18h		
dd 0			
dd 1E19h, 3 dup(0)	
dd 1E1Ah		
dd 0			
dd 1E1Bh, 3 dup(0)	
dd 1E1Ch		
dd 0			
dd 1E1Dh, 3 dup(0)	
dd 1E1Eh		
dd 0			
dd 1E1Fh, 3 dup(0)	
dd 1E20h		
dd 0			
dd 1E21h, 3 dup(0)	
dd 1E22h		
dd 0			
dd 1E23h, 3 dup(0)	
dd 1E24h		
dd 0			
dd 1E25h, 3 dup(0)	
dd 1E26h		
dd 0			
dd 1E27h, 3 dup(0)	
dd 1E28h		
dd 0			
dd 1E29h, 3 dup(0)	
dd 1E2Ah		
dd 0			
dd 1E2Bh, 3 dup(0)	
dd 1E2Ch		
dd 0			
dd 1E2Dh, 3 dup(0)	
dd 1E2Eh		
dd 0			
dd 1E2Fh, 3 dup(0)	
dd 1E30h		
dd 0			
dd 1E31h, 3 dup(0)	
dd 1E32h		
dd 0			
dd 1E33h, 3 dup(0)	
dd 1E34h		
dd 0			
dd 1E35h, 3 dup(0)	
dd 1E36h		
dd 0			
dd 1E37h, 3 dup(0)	
dd 1E38h		
dd 0			
dd 1E39h, 3 dup(0)	
dd 1E3Ah		
dd 0			
dd 1E3Bh, 3 dup(0)	
dd 1E3Ch		
dd 0			
dd 1E3Dh, 3 dup(0)	
dd 1E3Eh		
dd 0			
dd 1E3Fh, 3 dup(0)	
dd 1E40h		
dd 0			
dd 1E41h, 3 dup(0)	
dd 1E42h		
dd 0			
dd 1E43h, 3 dup(0)	
dd 1E44h		
dd 0			
dd 1E45h, 3 dup(0)	
dd 1E46h		
dd 0			
dd 1E47h, 3 dup(0)	
dd 1E48h		
dd 0			
dd 1E49h, 3 dup(0)	
dd 1E4Ah		
dd 0			
dd 1E4Bh, 3 dup(0)	
dd 1E4Ch		
dd 0			
dd 1E4Dh, 3 dup(0)	
dd 1E4Eh		
dd 0			
dd 1E4Fh, 3 dup(0)	
dd 1E50h		
dd 0			
dd 1E51h, 3 dup(0)	
dd 1E52h		
dd 0			
dd 1E53h, 3 dup(0)	
dd 1E54h		
dd 0			
dd 1E55h, 3 dup(0)	
dd 1E56h		
dd 0			
dd 1E57h, 3 dup(0)	
dd 1E58h		
dd 0			
dd 1E59h, 3 dup(0)	
dd 1E5Ah		
dd 0			
dd 1E5Bh, 3 dup(0)	
dd 1E5Ch		
dd 0			
dd 1E5Dh, 3 dup(0)	
dd 1E5Eh		
dd 0			
dd 1E5Fh, 3 dup(0)	
dd 1E60h		
dd 0			
dd 1E61h, 3 dup(0)	
dd 1E62h		
dd 0			
dd 1E63h, 3 dup(0)	
dd 1E64h		
dd 0			
dd 1E65h, 3 dup(0)	
dd 1E66h		
dd 0			
dd 1E67h, 3 dup(0)	
dd 1E68h		
dd 0			
dd 1E69h, 3 dup(0)	
dd 1E6Ah		
dd 0			
dd 1E6Bh, 3 dup(0)	
dd 1E6Ch		
dd 0			
dd 1E6Dh, 3 dup(0)	
dd 1E6Eh		
dd 0			
dd 1E6Fh, 3 dup(0)	
dd 1E70h		
dd 0			
dd 1E71h, 3 dup(0)	
dd 1E72h		
dd 0			
dd 1E73h, 3 dup(0)	
dd 1E74h		
dd 0			
dd 1E75h, 3 dup(0)	
dd 1E76h		
dd 0			
dd 1E77h, 3 dup(0)	
dd 1E78h		
dd 0			
dd 1E79h, 3 dup(0)	
dd 1E7Ah		
dd 0			
dd 1E7Bh, 3 dup(0)	
dd 1E7Ch		
dd 0			
dd 1E7Dh, 3 dup(0)	
dd 1E7Eh		
dd 0			
dd 1E7Fh, 3 dup(0)	
dd 1E80h		
dd 0			
dd 1E81h, 3 dup(0)	
dd 1E82h		
dd 0			
dd 1E83h, 3 dup(0)	
dd 1E84h		
dd 0			
dd 1E85h, 3 dup(0)	
dd 1E86h		
dd 0			
dd 1E87h, 3 dup(0)	
dd 1E88h		
dd 0			
dd 1E89h, 3 dup(0)	
dd 1E8Ah		
dd 0			
dd 1E8Bh, 3 dup(0)	
dd 1E8Ch		
dd 0			
dd 1E8Dh, 3 dup(0)	
dd 1E8Eh		
dd 0			
dd 1E8Fh, 3 dup(0)	
dd 1E90h		
dd 0			
dd 1E91h, 3 dup(0)	
dd 1E92h		
dd 0			
dd 1E93h, 3 dup(0)	
dd 1E94h		
dd 0			
dd 1E95h, 3 dup(0)	
dd 1E96h		
dd 0			
dd 68h,	331h, 2	dup(0)	
dd 1E97h		
dd 0			
dd 74h,	308h, 2	dup(0)	
dd 1E98h		
dd 0			
dd 77h,	30Ah, 2	dup(0)	
dd 1E99h		
dd 0			
dd 79h,	30Ah, 2	dup(0)	
dd 1E9Ah		
dd 0			
dd 61h,	2BEh, 2	dup(0)	
dd 1E9Bh		
dd 0			
dd 1E61h, 3 dup(0)	
dd 1EA0h		
dd 0			
dd 1EA1h, 3 dup(0)	
dd 1EA2h		
dd 0			
dd 1EA3h, 3 dup(0)	
dd 1EA4h		
dd 0			
dd 1EA5h, 3 dup(0)	
dd 1EA6h		
dd 0			
dd 1EA7h, 3 dup(0)	
dd 1EA8h		
dd 0			
dd 1EA9h, 3 dup(0)	
dd 1EAAh		
dd 0			
dd 1EABh, 3 dup(0)	
dd 1EACh		
dd 0			
dd 1EADh, 3 dup(0)	
dd 1EAEh		
dd 0			
dd 1EAFh, 3 dup(0)	
dd 1EB0h		
dd 0			
dd 1EB1h, 3 dup(0)	
dd 1EB2h		
dd 0			
dd 1EB3h, 3 dup(0)	
dd 1EB4h		
dd 0			
dd 1EB5h, 3 dup(0)	
dd 1EB6h		
dd 0			
dd 1EB7h, 3 dup(0)	
dd 1EB8h		
dd 0			
dd 1EB9h, 3 dup(0)	
dd 1EBAh		
dd 0			
dd 1EBBh, 3 dup(0)	
dd 1EBCh		
dd 0			
dd 1EBDh, 3 dup(0)	
dd 1EBEh		
dd 0			
dd 1EBFh, 3 dup(0)	
dd 1EC0h		
dd 0			
dd 1EC1h, 3 dup(0)	
dd 1EC2h		
dd 0			
dd 1EC3h, 3 dup(0)	
dd 1EC4h		
dd 0			
dd 1EC5h, 3 dup(0)	
dd 1EC6h		
dd 0			
dd 1EC7h, 3 dup(0)	
dd 1EC8h		
dd 0			
dd 1EC9h, 3 dup(0)	
dd 1ECAh		
dd 0			
dd 1ECBh, 3 dup(0)	
dd 1ECCh		
dd 0			
dd 1ECDh, 3 dup(0)	
dd 1ECEh		
dd 0			
dd 1ECFh, 3 dup(0)	
dd 1ED0h		
dd 0			
dd 1ED1h, 3 dup(0)	
dd 1ED2h		
dd 0			
dd 1ED3h, 3 dup(0)	
dd 1ED4h		
dd 0			
dd 1ED5h, 3 dup(0)	
dd 1ED6h		
dd 0			
dd 1ED7h, 3 dup(0)	
dd 1ED8h		
dd 0			
dd 1ED9h, 3 dup(0)	
dd 1EDAh		
dd 0			
dd 1EDBh, 3 dup(0)	
dd 1EDCh		
dd 0			
dd 1EDDh, 3 dup(0)	
dd 1EDEh		
dd 0			
dd 1EDFh, 3 dup(0)	
dd 1EE0h		
dd 0			
dd 1EE1h, 3 dup(0)	
dd 1EE2h		
dd 0			
dd 1EE3h, 3 dup(0)	
dd 1EE4h		
dd 0			
dd 1EE5h, 3 dup(0)	
dd 1EE6h		
dd 0			
dd 1EE7h, 3 dup(0)	
dd 1EE8h		
dd 0			
dd 1EE9h, 3 dup(0)	
dd 1EEAh		
dd 0			
dd 1EEBh, 3 dup(0)	
dd 1EECh		
dd 0			
dd 1EEDh, 3 dup(0)	
dd 1EEEh		
dd 0			
dd 1EEFh, 3 dup(0)	
dd 1EF0h		
dd 0			
dd 1EF1h, 3 dup(0)	
dd 1EF2h		
dd 0			
dd 1EF3h, 3 dup(0)	
dd 1EF4h		
dd 0			
dd 1EF5h, 3 dup(0)	
dd 1EF6h		
dd 0			
dd 1EF7h, 3 dup(0)	
dd 1EF8h		
dd 0			
dd 1EF9h, 3 dup(0)	
dd 1F08h		
dd 0			
dd 1F00h, 3 dup(0)	
dd 1F09h		
dd 0			
dd 1F01h, 3 dup(0)	
dd 1F0Ah		
dd 0			
dd 1F02h, 3 dup(0)	
dd 1F0Bh		
dd 0			
dd 1F03h, 3 dup(0)	
dd 1F0Ch		
dd 0			
dd 1F04h, 3 dup(0)	
dd 1F0Dh		
dd 0			
dd 1F05h, 3 dup(0)	
dd 1F0Eh		
dd 0			
dd 1F06h, 3 dup(0)	
dd 1F0Fh		
dd 0			
dd 1F07h, 3 dup(0)	
dd 1F18h		
dd 0			
dd 1F10h, 3 dup(0)	
dd 1F19h		
dd 0			
dd 1F11h, 3 dup(0)	
dd 1F1Ah		
dd 0			
dd 1F12h, 3 dup(0)	
dd 1F1Bh		
dd 0			
dd 1F13h, 3 dup(0)	
dd 1F1Ch		
dd 0			
dd 1F14h, 3 dup(0)	
dd 1F1Dh		
dd 0			
dd 1F15h, 3 dup(0)	
dd 1F28h		
dd 0			
dd 1F20h, 3 dup(0)	
dd 1F29h		
dd 0			
dd 1F21h, 3 dup(0)	
dd 1F2Ah		
dd 0			
dd 1F22h, 3 dup(0)	
dd 1F2Bh		
dd 0			
dd 1F23h, 3 dup(0)	
dd 1F2Ch		
dd 0			
dd 1F24h, 3 dup(0)	
dd 1F2Dh		
dd 0			
dd 1F25h, 3 dup(0)	
dd 1F2Eh		
dd 0			
dd 1F26h, 3 dup(0)	
dd 1F2Fh		
dd 0			
dd 1F27h, 3 dup(0)	
dd 1F38h		
dd 0			
dd 1F30h, 3 dup(0)	
dd 1F39h		
dd 0			
dd 1F31h, 3 dup(0)	
dd 1F3Ah		
dd 0			
dd 1F32h, 3 dup(0)	
dd 1F3Bh		
dd 0			
dd 1F33h, 3 dup(0)	
dd 1F3Ch		
dd 0			
dd 1F34h, 3 dup(0)	
dd 1F3Dh		
dd 0			
dd 1F35h, 3 dup(0)	
dd 1F3Eh		
dd 0			
dd 1F36h, 3 dup(0)	
dd 1F3Fh		
dd 0			
dd 1F37h, 3 dup(0)	
dd 1F48h		
dd 0			
dd 1F40h, 3 dup(0)	
dd 1F49h		
dd 0			
dd 1F41h, 3 dup(0)	
dd 1F4Ah		
dd 0			
dd 1F42h, 3 dup(0)	
dd 1F4Bh		
dd 0			
dd 1F43h, 3 dup(0)	
dd 1F4Ch		
dd 0			
dd 1F44h, 3 dup(0)	
dd 1F4Dh		
dd 0			
dd 1F45h, 3 dup(0)	
dd 1F50h		
dd 0			
dd 3C5h, 313h, 2 dup(0)	
dd 1F52h		
dd 0			
dd 3C5h, 313h, 300h, 0	
dd 1F54h		
dd 0			
dd 3C5h, 313h, 301h, 0	
dd 1F56h		
dd 0			
dd 3C5h, 313h, 342h, 0	
dd 1F59h		
dd 0			
dd 1F51h, 3 dup(0)	
dd 1F5Bh		
dd 0			
dd 1F53h, 3 dup(0)	
dd 1F5Dh		
dd 0			
dd 1F55h, 3 dup(0)	
dd 1F5Fh		
dd 0			
dd 1F57h, 3 dup(0)	
dd 1F68h		
dd 0			
dd 1F60h, 3 dup(0)	
dd 1F69h		
dd 0			
dd 1F61h, 3 dup(0)	
dd 1F6Ah		
dd 0			
dd 1F62h, 3 dup(0)	
dd 1F6Bh		
dd 0			
dd 1F63h, 3 dup(0)	
dd 1F6Ch		
dd 0			
dd 1F64h, 3 dup(0)	
dd 1F6Dh		
dd 0			
dd 1F65h, 3 dup(0)	
dd 1F6Eh		
dd 0			
dd 1F66h, 3 dup(0)	
dd 1F6Fh		
dd 0			
dd 1F67h, 3 dup(0)	
dd 1F80h		
dd 0			
dd 1F00h, 3B9h,	2 dup(0)
dd 1F81h		
dd 0			
dd 1F01h, 3B9h,	2 dup(0)
dd 1F82h		
dd 0			
dd 1F02h, 3B9h,	2 dup(0)
dd 1F83h		
dd 0			
dd 1F03h, 3B9h,	2 dup(0)
dd 1F84h		
dd 0			
dd 1F04h, 3B9h,	2 dup(0)
dd 1F85h		
dd 0			
dd 1F05h, 3B9h,	2 dup(0)
dd 1F86h		
dd 0			
dd 1F06h, 3B9h,	2 dup(0)
dd 1F87h		
dd 0			
dd 1F07h, 3B9h,	2 dup(0)
dd 1F88h		
dd 0			
dd 1F00h, 3B9h,	2 dup(0)
dd 1F89h		
dd 0			
dd 1F01h, 3B9h,	2 dup(0)
dd 1F8Ah		
dd 0			
dd 1F02h, 3B9h,	2 dup(0)
dd 1F8Bh		
dd 0			
dd 1F03h, 3B9h,	2 dup(0)
dd 1F8Ch		
dd 0			
dd 1F04h, 3B9h,	2 dup(0)
dd 1F8Dh		
dd 0			
dd 1F05h, 3B9h,	2 dup(0)
dd 1F8Eh		
dd 0			
dd 1F06h, 3B9h,	2 dup(0)
dd 1F8Fh		
dd 0			
dd 1F07h, 3B9h,	2 dup(0)
dd 1F90h		
dd 0			
dd 1F20h, 3B9h,	2 dup(0)
dd 1F91h		
dd 0			
dd 1F21h, 3B9h,	2 dup(0)
dd 1F92h		
dd 0			
dd 1F22h, 3B9h,	2 dup(0)
dd 1F93h		
dd 0			
dd 1F23h, 3B9h,	2 dup(0)
dd 1F94h		
dd 0			
dd 1F24h, 3B9h,	2 dup(0)
dd 1F95h		
dd 0			
dd 1F25h, 3B9h,	2 dup(0)
dd 1F96h		
dd 0			
dd 1F26h, 3B9h,	2 dup(0)
dd 1F97h		
dd 0			
dd 1F27h, 3B9h,	2 dup(0)
dd 1F98h		
dd 0			
dd 1F20h, 3B9h,	2 dup(0)
dd 1F99h		
dd 0			
dd 1F21h, 3B9h,	2 dup(0)
dd 1F9Ah		
dd 0			
dd 1F22h, 3B9h,	2 dup(0)
dd 1F9Bh		
dd 0			
dd 1F23h, 3B9h,	2 dup(0)
dd 1F9Ch		
dd 0			
dd 1F24h, 3B9h,	2 dup(0)
dd 1F9Dh		
dd 0			
dd 1F25h, 3B9h,	2 dup(0)
dd 1F9Eh		
dd 0			
dd 1F26h, 3B9h,	2 dup(0)
dd 1F9Fh		
dd 0			
dd 1F27h, 3B9h,	2 dup(0)
dd 1FA0h		
dd 0			
dd 1F60h, 3B9h,	2 dup(0)
dd 1FA1h		
dd 0			
dd 1F61h, 3B9h,	2 dup(0)
dd 1FA2h		
dd 0			
dd 1F62h, 3B9h,	2 dup(0)
dd 1FA3h		
dd 0			
dd 1F63h, 3B9h,	2 dup(0)
dd 1FA4h		
dd 0			
dd 1F64h, 3B9h,	2 dup(0)
dd 1FA5h		
dd 0			
dd 1F65h, 3B9h,	2 dup(0)
dd 1FA6h		
dd 0			
dd 1F66h, 3B9h,	2 dup(0)
dd 1FA7h		
dd 0			
dd 1F67h, 3B9h,	2 dup(0)
dd 1FA8h		
dd 0			
dd 1F60h, 3B9h,	2 dup(0)
dd 1FA9h		
dd 0			
dd 1F61h, 3B9h,	2 dup(0)
dd 1FAAh		
dd 0			
dd 1F62h, 3B9h,	2 dup(0)
dd 1FABh		
dd 0			
dd 1F63h, 3B9h,	2 dup(0)
dd 1FACh		
dd 0			
dd 1F64h, 3B9h,	2 dup(0)
dd 1FADh		
dd 0			
dd 1F65h, 3B9h,	2 dup(0)
dd 1FAEh		
dd 0			
dd 1F66h, 3B9h,	2 dup(0)
dd 1FAFh		
dd 0			
dd 1F67h, 3B9h,	2 dup(0)
dd 1FB2h		
dd 0			
dd 1F70h, 3B9h,	2 dup(0)
dd 1FB3h		
dd 0			
dd 3B1h, 3B9h, 2 dup(0)	
dd 1FB4h		
dd 0			
dd 3ACh, 3B9h, 2 dup(0)	
dd 1FB6h		
dd 0			
dd 3B1h, 342h, 2 dup(0)	
dd 1FB7h		
dd 0			
dd 3B1h, 342h, 3B9h, 0	
dd 1FB8h		
dd 0			
dd 1FB0h, 3 dup(0)	
dd 1FB9h		
dd 0			
dd 1FB1h, 3 dup(0)	
dd 1FBAh		
dd 0			
dd 1F70h, 3 dup(0)	
dd 1FBBh		
dd 0			
dd 1F71h, 3 dup(0)	
dd 1FBCh		
dd 0			
dd 3B1h, 3B9h, 2 dup(0)	
dd 1FBEh		
dd 0			
dd 3B9h, 3 dup(0)	
dd 1FC2h		
dd 0			
dd 1F74h, 3B9h,	2 dup(0)
dd 1FC3h		
dd 0			
dd 3B7h, 3B9h, 2 dup(0)	
dd 1FC4h		
dd 0			
dd 3AEh, 3B9h, 2 dup(0)	
dd 1FC6h		
dd 0			
dd 3B7h, 342h, 2 dup(0)	
dd 1FC7h		
dd 0			
dd 3B7h, 342h, 3B9h, 0	
dd 1FC8h		
dd 0			
dd 1F72h, 3 dup(0)	
dd 1FC9h		
dd 0			
dd 1F73h, 3 dup(0)	
dd 1FCAh		
dd 0			
dd 1F74h, 3 dup(0)	
dd 1FCBh		
dd 0			
dd 1F75h, 3 dup(0)	
dd 1FCCh		
dd 0			
dd 3B7h, 3B9h, 2 dup(0)	
dd 1FD2h		
dd 0			
dd 3B9h, 308h, 300h, 0	
dd 1FD3h		
dd 0			
dd 3B9h, 308h, 301h, 0	
dd 1FD6h		
dd 0			
dd 3B9h, 342h, 2 dup(0)	
dd 1FD7h		
dd 0			
dd 3B9h, 308h, 342h, 0	
dd 1FD8h		
dd 0			
dd 1FD0h, 3 dup(0)	
dd 1FD9h		
dd 0			
dd 1FD1h, 3 dup(0)	
dd 1FDAh		
dd 0			
dd 1F76h, 3 dup(0)	
dd 1FDBh		
dd 0			
dd 1F77h, 3 dup(0)	
dd 1FE2h		
dd 0			
dd 3C5h, 308h, 300h, 0	
dd 1FE3h		
dd 0			
dd 3C5h, 308h, 301h, 0	
dd 1FE4h		
dd 0			
dd 3C1h, 313h, 2 dup(0)	
dd 1FE6h		
dd 0			
dd 3C5h, 342h, 2 dup(0)	
dd 1FE7h		
dd 0			
dd 3C5h, 308h, 342h, 0	
dd 1FE8h		
dd 0			
dd 1FE0h, 3 dup(0)	
dd 1FE9h		
dd 0			
dd 1FE1h, 3 dup(0)	
dd 1FEAh		
dd 0			
dd 1F7Ah, 3 dup(0)	
dd 1FEBh		
dd 0			
dd 1F7Bh, 3 dup(0)	
dd 1FECh		
dd 0			
dd 1FE5h, 3 dup(0)	
dd 1FF2h		
dd 0			
dd 1F7Ch, 3B9h,	2 dup(0)
dd 1FF3h		
dd 0			
dd 3C9h, 3B9h, 2 dup(0)	
dd 1FF4h		
dd 0			
dd 3CEh, 3B9h, 2 dup(0)	
dd 1FF6h		
dd 0			
dd 3C9h, 342h, 2 dup(0)	
dd 1FF7h		
dd 0			
dd 3C9h, 342h, 3B9h, 0	
dd 1FF8h		
dd 0			
dd 1F78h, 3 dup(0)	
dd 1FF9h		
dd 0			
dd 1F79h, 3 dup(0)	
dd 1FFAh		
dd 0			
dd 1F7Ch, 3 dup(0)	
dd 1FFBh		
dd 0			
dd 1F7Dh, 3 dup(0)	
dd 1FFCh		
dd 0			
dd 3C9h, 3B9h, 2 dup(0)	
dd 20A8h		
dd 0			
dd 72h,	73h, 2 dup(0)	
dd 2102h		
dd 0			
dd 63h,	3 dup(0)	
dd 2103h		
dd 0			
dd 0B0h, 63h, 2	dup(0)	
dd 2107h		
dd 0			
dd 25Bh, 3 dup(0)	
dd 2109h		
dd 0			
dd 0B0h, 66h, 2	dup(0)	
dd 210Bh		
dd 0			
dd 68h,	3 dup(0)	
dd 210Ch		
dd 0			
dd 68h,	3 dup(0)	
dd 210Dh		
dd 0			
dd 68h,	3 dup(0)	
dd 2110h		
dd 0			
dd 69h,	3 dup(0)	
dd 2111h		
dd 0			
dd 69h,	3 dup(0)	
dd 2112h		
dd 0			
dd 6Ch,	3 dup(0)	
dd 2115h		
dd 0			
dd 6Eh,	3 dup(0)	
dd 2116h		
dd 0			
dd 6Eh,	6Fh, 2 dup(0)	
dd 2119h		
dd 0			
dd 70h,	3 dup(0)	
dd 211Ah		
dd 0			
dd 71h,	3 dup(0)	
dd 211Bh		
dd 0			
dd 72h,	3 dup(0)	
dd 211Ch		
dd 0			
dd 72h,	3 dup(0)	
dd 211Dh		
dd 0			
dd 72h,	3 dup(0)	
dd 2120h		
dd 0			
dd 73h,	6Dh, 2 dup(0)	
dd 2121h		
dd 0			
dd 74h,	65h, 6Ch, 0	
dd 2122h		
dd 0			
dd 74h,	6Dh, 2 dup(0)	
dd 2124h		
dd 0			
dd 7Ah,	3 dup(0)	
dd 2126h		
dd 0			
dd 3C9h, 3 dup(0)	
dd 2128h		
dd 0			
dd 7Ah,	3 dup(0)	
dd 212Ah		
dd 0			
dd 6Bh,	3 dup(0)	
dd 212Bh		
dd 0			
dd 0E5h, 3 dup(0)	
dd 212Ch		
dd 0			
dd 62h,	3 dup(0)	
dd 212Dh		
dd 0			
dd 63h,	3 dup(0)	
dd 2130h		
dd 0			
dd 65h,	3 dup(0)	
dd 2131h		
dd 0			
dd 66h,	3 dup(0)	
dd 2133h		
dd 0			
dd 6Dh,	3 dup(0)	
dd 213Eh		
dd 0			
dd 3B3h, 3 dup(0)	
dd 213Fh		
dd 0			
dd 3C0h, 3 dup(0)	
dd 2145h		
dd 0			
dd 64h,	3 dup(0)	
dd 2160h		
dd 0			
dd 2170h, 3 dup(0)	
dd 2161h		
dd 0			
dd 2171h, 3 dup(0)	
dd 2162h		
dd 0			
dd 2172h, 3 dup(0)	
dd 2163h		
dd 0			
dd 2173h, 3 dup(0)	
dd 2164h		
dd 0			
dd 2174h, 3 dup(0)	
dd 2165h		
dd 0			
dd 2175h, 3 dup(0)	
dd 2166h		
dd 0			
dd 2176h, 3 dup(0)	
dd 2167h		
dd 0			
dd 2177h, 3 dup(0)	
dd 2168h		
dd 0			
dd 2178h, 3 dup(0)	
dd 2169h		
dd 0			
dd 2179h, 3 dup(0)	
dd 216Ah		
dd 0			
dd 217Ah, 3 dup(0)	
dd 216Bh		
dd 0			
dd 217Bh, 3 dup(0)	
dd 216Ch		
dd 0			
dd 217Ch, 3 dup(0)	
dd 216Dh		
dd 0			
dd 217Dh, 3 dup(0)	
dd 216Eh		
dd 0			
dd 217Eh, 3 dup(0)	
dd 216Fh		
dd 0			
dd 217Fh, 3 dup(0)	
dd 24B6h		
dd 0			
dd 24D0h, 3 dup(0)	
dd 24B7h		
dd 0			
dd 24D1h, 3 dup(0)	
dd 24B8h		
dd 0			
dd 24D2h, 3 dup(0)	
dd 24B9h		
dd 0			
dd 24D3h, 3 dup(0)	
dd 24BAh		
dd 0			
dd 24D4h, 3 dup(0)	
dd 24BBh		
dd 0			
dd 24D5h, 3 dup(0)	
dd 24BCh		
dd 0			
dd 24D6h, 3 dup(0)	
dd 24BDh		
dd 0			
dd 24D7h, 3 dup(0)	
dd 24BEh		
dd 0			
dd 24D8h, 3 dup(0)	
dd 24BFh		
dd 0			
dd 24D9h, 3 dup(0)	
dd 24C0h		
dd 0			
dd 24DAh, 3 dup(0)	
dd 24C1h		
dd 0			
dd 24DBh, 3 dup(0)	
dd 24C2h		
dd 0			
dd 24DCh, 3 dup(0)	
dd 24C3h		
dd 0			
dd 24DDh, 3 dup(0)	
dd 24C4h		
dd 0			
dd 24DEh, 3 dup(0)	
dd 24C5h		
dd 0			
dd 24DFh, 3 dup(0)	
dd 24C6h		
dd 0			
dd 24E0h, 3 dup(0)	
dd 24C7h		
dd 0			
dd 24E1h, 3 dup(0)	
dd 24C8h		
dd 0			
dd 24E2h, 3 dup(0)	
dd 24C9h		
dd 0			
dd 24E3h, 3 dup(0)	
dd 24CAh		
dd 0			
dd 24E4h, 3 dup(0)	
dd 24CBh		
dd 0			
dd 24E5h, 3 dup(0)	
dd 24CCh		
dd 0			
dd 24E6h, 3 dup(0)	
dd 24CDh		
dd 0			
dd 24E7h, 3 dup(0)	
dd 24CEh		
dd 0			
dd 24E8h, 3 dup(0)	
dd 24CFh		
dd 0			
dd 24E9h, 3 dup(0)	
dd 3371h		
dd 0			
dd 68h,	70h, 61h, 0	
dd 3373h		
dd 0			
dd 61h,	75h, 2 dup(0)	
dd 3375h		
dd 0			
dd 6Fh,	76h, 2 dup(0)	
dd 3380h		
dd 0			
dd 70h,	61h, 2 dup(0)	
dd 3381h		
dd 0			
dd 6Eh,	61h, 2 dup(0)	
dd 3382h		
dd 0			
dd 3BCh, 61h, 2	dup(0)	
dd 3383h		
dd 0			
dd 6Dh,	61h, 2 dup(0)	
dd 3384h		
dd 0			
dd 6Bh,	61h, 2 dup(0)	
dd 3385h		
dd 0			
dd 6Bh,	62h, 2 dup(0)	
dd 3386h		
dd 0			
dd 6Dh,	62h, 2 dup(0)	
dd 3387h		
dd 0			
dd 67h,	62h, 2 dup(0)	
dd 338Ah		
dd 0			
dd 70h,	66h, 2 dup(0)	
dd 338Bh		
dd 0			
dd 6Eh,	66h, 2 dup(0)	
dd 338Ch		
dd 0			
dd 3BCh, 66h, 2	dup(0)	
dd 3390h		
dd 0			
dd 68h,	7Ah, 2 dup(0)	
dd 3391h		
dd 0			
dd 6Bh,	68h, 7Ah, 0	
dd 3392h		
dd 0			
dd 6Dh,	68h, 7Ah, 0	
dd 3393h		
dd 0			
dd 67h,	68h, 7Ah, 0	
dd 3394h		
dd 0			
dd 74h,	68h, 7Ah, 0	
dd 33A9h		
dd 0			
dd 70h,	61h, 2 dup(0)	
dd 33AAh		
dd 0			
dd 6Bh,	70h, 61h, 0	
dd 33ABh		
dd 0			
dd 6Dh,	70h, 61h, 0	
dd 33ACh		
dd 0			
dd 67h,	70h, 61h, 0	
dd 33B4h		
dd 0			
dd 70h,	76h, 2 dup(0)	
dd 33B5h		
dd 0			
dd 6Eh,	76h, 2 dup(0)	
dd 33B6h		
dd 0			
dd 3BCh, 76h, 2	dup(0)	
dd 33B7h		
dd 0			
dd 6Dh,	76h, 2 dup(0)	
dd 33B8h		
dd 0			
dd 6Bh,	76h, 2 dup(0)	
dd 33B9h		
dd 0			
dd 6Dh,	76h, 2 dup(0)	
dd 33BAh		
dd 0			
dd 70h,	77h, 2 dup(0)	
dd 33BBh		
dd 0			
dd 6Eh,	77h, 2 dup(0)	
dd 33BCh		
dd 0			
dd 3BCh, 77h, 2	dup(0)	
dd 33BDh		
dd 0			
dd 6Dh,	77h, 2 dup(0)	
dd 33BEh		
dd 0			
dd 6Bh,	77h, 2 dup(0)	
dd 33BFh		
dd 0			
dd 6Dh,	77h, 2 dup(0)	
dd 33C0h		
dd 0			
dd 6Bh,	3C9h, 2	dup(0)	
dd 33C1h		
dd 0			
dd 6Dh,	3C9h, 2	dup(0)	
dd 33C3h		
dd 0			
dd 62h,	71h, 2 dup(0)	
dd 33C6h		
dd 0			
dd 63h,	2215h, 6Bh, 67h	
dd 33C7h		
dd 0			
dd 63h,	6Fh, 2Eh, 0	
dd 33C8h		
dd 0			
dd 64h,	62h, 2 dup(0)	
dd 33C9h		
dd 0			
dd 67h,	79h, 2 dup(0)	
dd 33CBh		
dd 0			
dd 68h,	70h, 2 dup(0)	
dd 33CDh		
dd 0			
dd 2 dup(6Bh), 2 dup(0)	
dd 33CEh		
dd 0			
dd 6Bh,	6Dh, 2 dup(0)	
dd 33D7h		
dd 0			
dd 70h,	68h, 2 dup(0)	
dd 33D9h		
dd 0			
dd 2 dup(70h), 6Dh, 0	
dd 33DAh		
dd 0			
dd 70h,	72h, 2 dup(0)	
dd 33DCh		
dd 0			
dd 73h,	76h, 2 dup(0)	
dd 33DDh		
dd 0			
dd 77h,	62h, 2 dup(0)	
dd 0FB00h		
dd 0			
dd 2 dup(66h), 2 dup(0)	
dd 0FB01h		
dd 0			
dd 66h,	69h, 2 dup(0)	
dd 0FB02h		
dd 0			
dd 66h,	6Ch, 2 dup(0)	
dd 0FB03h		
dd 0			
dd 2 dup(66h), 69h, 0	
dd 0FB04h		
dd 0			
dd 2 dup(66h), 6Ch, 0	
dd 0FB05h		
dd 0			
dd 73h,	74h, 2 dup(0)	
dd 0FB06h		
dd 0			
dd 73h,	74h, 2 dup(0)	
dd 0FB13h		
dd 0			
dd 574h, 576h, 2 dup(0)	
dd 0FB14h		
dd 0			
dd 574h, 565h, 2 dup(0)	
dd 0FB15h		
dd 0			
dd 574h, 56Bh, 2 dup(0)	
dd 0FB16h		
dd 0			
dd 57Eh, 576h, 2 dup(0)	
dd 0FB17h		
dd 0			
dd 574h, 56Dh, 2 dup(0)	
dd 0FF21h		
dd 0			
dd 0FF41h, 3 dup(0)	
dd 0FF22h		
dd 0			
dd 0FF42h, 3 dup(0)	
dd 0FF23h		
dd 0			
dd 0FF43h, 3 dup(0)	
dd 0FF24h		
dd 0			
dd 0FF44h, 3 dup(0)	
dd 0FF25h		
dd 0			
dd 0FF45h, 3 dup(0)	
dd 0FF26h		
dd 0			
dd 0FF46h, 3 dup(0)	
dd 0FF27h		
dd 0			
dd 0FF47h, 3 dup(0)	
dd 0FF28h		
dd 0			
dd 0FF48h, 3 dup(0)	
dd 0FF29h		
dd 0			
dd 0FF49h, 3 dup(0)	
dd 0FF2Ah		
dd 0			
dd 0FF4Ah, 3 dup(0)	
dd 0FF2Bh		
dd 0			
dd 0FF4Bh, 3 dup(0)	
dd 0FF2Ch		
dd 0			
dd 0FF4Ch, 3 dup(0)	
dd 0FF2Dh		
dd 0			
dd 0FF4Dh, 3 dup(0)	
dd 0FF2Eh		
dd 0			
dd 0FF4Eh, 3 dup(0)	
dd 0FF2Fh		
dd 0			
dd 0FF4Fh, 3 dup(0)	
dd 0FF30h		
dd 0			
dd 0FF50h, 3 dup(0)	
dd 0FF31h		
dd 0			
dd 0FF51h, 3 dup(0)	
dd 0FF32h		
dd 0			
dd 0FF52h, 3 dup(0)	
dd 0FF33h		
dd 0			
dd 0FF53h, 3 dup(0)	
dd 0FF34h		
dd 0			
dd 0FF54h, 3 dup(0)	
dd 0FF35h		
dd 0			
dd 0FF55h, 3 dup(0)	
dd 0FF36h		
dd 0			
dd 0FF56h, 3 dup(0)	
dd 0FF37h		
dd 0			
dd 0FF57h, 3 dup(0)	
dd 0FF38h		
dd 0			
dd 0FF58h, 3 dup(0)	
dd 0FF39h		
dd 0			
dd 0FF59h, 3 dup(0)	
dd 0FF3Ah		
dd 0			
dd 0FF5Ah, 3 dup(0)	
dd 10400h		
dd 0			
dd 10428h, 3 dup(0)	
dd 10401h		
dd 0			
dd 10429h, 3 dup(0)	
dd 10402h		
dd 0			
dd 1042Ah, 3 dup(0)	
dd 10403h		
dd 0			
dd 1042Bh, 3 dup(0)	
dd 10404h		
dd 0			
dd 1042Ch, 3 dup(0)	
dd 10405h		
dd 0			
dd 1042Dh, 3 dup(0)	
dd 10406h		
dd 0			
dd 1042Eh, 3 dup(0)	
dd 10407h		
dd 0			
dd 1042Fh, 3 dup(0)	
dd 10408h		
dd 0			
dd 10430h, 3 dup(0)	
dd 10409h		
dd 0			
dd 10431h, 3 dup(0)	
dd 1040Ah		
dd 0			
dd 10432h, 3 dup(0)	
dd 1040Bh		
dd 0			
dd 10433h, 3 dup(0)	
dd 1040Ch		
dd 0			
dd 10434h, 3 dup(0)	
dd 1040Dh		
dd 0			
dd 10435h, 3 dup(0)	
dd 1040Eh		
dd 0			
dd 10436h, 3 dup(0)	
dd 1040Fh		
dd 0			
dd 10437h, 3 dup(0)	
dd 10410h		
dd 0			
dd 10438h, 3 dup(0)	
dd 10411h		
dd 0			
dd 10439h, 3 dup(0)	
dd 10412h		
dd 0			
dd 1043Ah, 3 dup(0)	
dd 10413h		
dd 0			
dd 1043Bh, 3 dup(0)	
dd 10414h		
dd 0			
dd 1043Ch, 3 dup(0)	
dd 10415h		
dd 0			
dd 1043Dh, 3 dup(0)	
dd 10416h		
dd 0			
dd 1043Eh, 3 dup(0)	
dd 10417h		
dd 0			
dd 1043Fh, 3 dup(0)	
dd 10418h		
dd 0			
dd 10440h, 3 dup(0)	
dd 10419h		
dd 0			
dd 10441h, 3 dup(0)	
dd 1041Ah		
dd 0			
dd 10442h, 3 dup(0)	
dd 1041Bh		
dd 0			
dd 10443h, 3 dup(0)	
dd 1041Ch		
dd 0			
dd 10444h, 3 dup(0)	
dd 1041Dh		
dd 0			
dd 10445h, 3 dup(0)	
dd 1041Eh		
dd 0			
dd 10446h, 3 dup(0)	
dd 1041Fh		
dd 0			
dd 10447h, 3 dup(0)	
dd 10420h		
dd 0			
dd 10448h, 3 dup(0)	
dd 10421h		
dd 0			
dd 10449h, 3 dup(0)	
dd 10422h		
dd 0			
dd 1044Ah, 3 dup(0)	
dd 10423h		
dd 0			
dd 1044Bh, 3 dup(0)	
dd 10424h		
dd 0			
dd 1044Ch, 3 dup(0)	
dd 10425h		
dd 0			
dd 1044Dh, 3 dup(0)	
dd 1D400h		
dd 0			
dd 61h,	3 dup(0)	
dd 1D401h		
dd 0			
dd 62h,	3 dup(0)	
dd 1D402h		
dd 0			
dd 63h,	3 dup(0)	
dd 1D403h		
dd 0			
dd 64h,	3 dup(0)	
dd 1D404h		
dd 0			
dd 65h,	3 dup(0)	
dd 1D405h		
dd 0			
dd 66h,	3 dup(0)	
dd 1D406h		
dd 0			
dd 67h,	3 dup(0)	
dd 1D407h		
dd 0			
dd 68h,	3 dup(0)	
dd 1D408h		
dd 0			
dd 69h,	3 dup(0)	
dd 1D409h		
dd 0			
dd 6Ah,	3 dup(0)	
dd 1D40Ah		
dd 0			
dd 6Bh,	3 dup(0)	
dd 1D40Bh		
dd 0			
dd 6Ch,	3 dup(0)	
dd 1D40Ch		
dd 0			
dd 6Dh,	3 dup(0)	
dd 1D40Dh		
dd 0			
dd 6Eh,	3 dup(0)	
dd 1D40Eh		
dd 0			
dd 6Fh,	3 dup(0)	
dd 1D40Fh		
dd 0			
dd 70h,	3 dup(0)	
dd 1D410h		
dd 0			
dd 71h,	3 dup(0)	
dd 1D411h		
dd 0			
dd 72h,	3 dup(0)	
dd 1D412h		
dd 0			
dd 73h,	3 dup(0)	
dd 1D413h		
dd 0			
dd 74h,	3 dup(0)	
dd 1D414h		
dd 0			
dd 75h,	3 dup(0)	
dd 1D415h		
dd 0			
dd 76h,	3 dup(0)	
dd 1D416h		
dd 0			
dd 77h,	3 dup(0)	
dd 1D417h		
dd 0			
dd 78h,	3 dup(0)	
dd 1D418h		
dd 0			
dd 79h,	3 dup(0)	
dd 1D419h		
dd 0			
dd 7Ah,	3 dup(0)	
dd 1D434h		
dd 0			
dd 61h,	3 dup(0)	
dd 1D435h		
dd 0			
dd 62h,	3 dup(0)	
dd 1D436h		
dd 0			
dd 63h,	3 dup(0)	
dd 1D437h		
dd 0			
dd 64h,	3 dup(0)	
dd 1D438h		
dd 0			
dd 65h,	3 dup(0)	
dd 1D439h		
dd 0			
dd 66h,	3 dup(0)	
dd 1D43Ah		
dd 0			
dd 67h,	3 dup(0)	
dd 1D43Bh		
dd 0			
dd 68h,	3 dup(0)	
dd 1D43Ch		
dd 0			
dd 69h,	3 dup(0)	
dd 1D43Dh		
dd 0			
dd 6Ah,	3 dup(0)	
dd 1D43Eh		
dd 0			
dd 6Bh,	3 dup(0)	
dd 1D43Fh		
dd 0			
dd 6Ch,	3 dup(0)	
dd 1D440h		
dd 0			
dd 6Dh,	3 dup(0)	
dd 1D441h		
dd 0			
dd 6Eh,	3 dup(0)	
dd 1D442h		
dd 0			
dd 6Fh,	3 dup(0)	
dd 1D443h		
dd 0			
dd 70h,	3 dup(0)	
dd 1D444h		
dd 0			
dd 71h,	3 dup(0)	
dd 1D445h		
dd 0			
dd 72h,	3 dup(0)	
dd 1D446h		
dd 0			
dd 73h,	3 dup(0)	
dd 1D447h		
dd 0			
dd 74h,	3 dup(0)	
dd 1D448h		
dd 0			
dd 75h,	3 dup(0)	
dd 1D449h		
dd 0			
dd 76h,	3 dup(0)	
dd 1D44Ah		
dd 0			
dd 77h,	3 dup(0)	
dd 1D44Bh		
dd 0			
dd 78h,	3 dup(0)	
dd 1D44Ch		
dd 0			
dd 79h,	3 dup(0)	
dd 1D44Dh		
dd 0			
dd 7Ah,	3 dup(0)	
dd 1D468h		
dd 0			
dd 61h,	3 dup(0)	
dd 1D469h		
dd 0			
dd 62h,	3 dup(0)	
dd 1D46Ah		
dd 0			
dd 63h,	3 dup(0)	
dd 1D46Bh		
dd 0			
dd 64h,	3 dup(0)	
dd 1D46Ch		
dd 0			
dd 65h,	3 dup(0)	
dd 1D46Dh		
dd 0			
dd 66h,	3 dup(0)	
dd 1D46Eh		
dd 0			
dd 67h,	3 dup(0)	
dd 1D46Fh		
dd 0			
dd 68h,	3 dup(0)	
dd 1D470h		
dd 0			
dd 69h,	3 dup(0)	
dd 1D471h		
dd 0			
dd 6Ah,	3 dup(0)	
dd 1D472h		
dd 0			
dd 6Bh,	3 dup(0)	
dd 1D473h		
dd 0			
dd 6Ch,	3 dup(0)	
dd 1D474h		
dd 0			
dd 6Dh,	3 dup(0)	
dd 1D475h		
dd 0			
dd 6Eh,	3 dup(0)	
dd 1D476h		
dd 0			
dd 6Fh,	3 dup(0)	
dd 1D477h		
dd 0			
dd 70h,	3 dup(0)	
dd 1D478h		
dd 0			
dd 71h,	3 dup(0)	
dd 1D479h		
dd 0			
dd 72h,	3 dup(0)	
dd 1D47Ah		
dd 0			
dd 73h,	3 dup(0)	
dd 1D47Bh		
dd 0			
dd 74h,	3 dup(0)	
dd 1D47Ch		
dd 0			
dd 75h,	3 dup(0)	
dd 1D47Dh		
dd 0			
dd 76h,	3 dup(0)	
dd 1D47Eh		
dd 0			
dd 77h,	3 dup(0)	
dd 1D47Fh		
dd 0			
dd 78h,	3 dup(0)	
dd 1D480h		
dd 0			
dd 79h,	3 dup(0)	
dd 1D481h		
dd 0			
dd 7Ah,	3 dup(0)	
dd 1D49Ch		
dd 0			
dd 61h,	3 dup(0)	
dd 1D49Eh		
dd 0			
dd 63h,	3 dup(0)	
dd 1D49Fh		
dd 0			
dd 64h,	3 dup(0)	
dd 1D4A2h		
dd 0			
dd 67h,	3 dup(0)	
dd 1D4A5h		
dd 0			
dd 6Ah,	3 dup(0)	
dd 1D4A6h		
dd 0			
dd 6Bh,	3 dup(0)	
dd 1D4A9h		
dd 0			
dd 6Eh,	3 dup(0)	
dd 1D4AAh		
dd 0			
dd 6Fh,	3 dup(0)	
dd 1D4ABh		
dd 0			
dd 70h,	3 dup(0)	
dd 1D4ACh		
dd 0			
dd 71h,	3 dup(0)	
dd 1D4AEh		
dd 0			
dd 73h,	3 dup(0)	
dd 1D4AFh		
dd 0			
dd 74h,	3 dup(0)	
dd 1D4B0h		
dd 0			
dd 75h,	3 dup(0)	
dd 1D4B1h		
dd 0			
dd 76h,	3 dup(0)	
dd 1D4B2h		
dd 0			
dd 77h,	3 dup(0)	
dd 1D4B3h		
dd 0			
dd 78h,	3 dup(0)	
dd 1D4B4h		
dd 0			
dd 79h,	3 dup(0)	
dd 1D4B5h		
dd 0			
dd 7Ah,	3 dup(0)	
dd 1D4D0h		
dd 0			
dd 61h,	3 dup(0)	
dd 1D4D1h		
dd 0			
dd 62h,	3 dup(0)	
dd 1D4D2h		
dd 0			
dd 63h,	3 dup(0)	
dd 1D4D3h		
dd 0			
dd 64h,	3 dup(0)	
dd 1D4D4h		
dd 0			
dd 65h,	3 dup(0)	
dd 1D4D5h		
dd 0			
dd 66h,	3 dup(0)	
dd 1D4D6h		
dd 0			
dd 67h,	3 dup(0)	
dd 1D4D7h		
dd 0			
dd 68h,	3 dup(0)	
dd 1D4D8h		
dd 0			
dd 69h,	3 dup(0)	
dd 1D4D9h		
dd 0			
dd 6Ah,	3 dup(0)	
dd 1D4DAh		
dd 0			
dd 6Bh,	3 dup(0)	
dd 1D4DBh		
dd 0			
dd 6Ch,	3 dup(0)	
dd 1D4DCh		
dd 0			
dd 6Dh,	3 dup(0)	
dd 1D4DDh		
dd 0			
dd 6Eh,	3 dup(0)	
dd 1D4DEh		
dd 0			
dd 6Fh,	3 dup(0)	
dd 1D4DFh		
dd 0			
dd 70h,	3 dup(0)	
dd 1D4E0h		
dd 0			
dd 71h,	3 dup(0)	
dd 1D4E1h		
dd 0			
dd 72h,	3 dup(0)	
dd 1D4E2h		
dd 0			
dd 73h,	3 dup(0)	
dd 1D4E3h		
dd 0			
dd 74h,	3 dup(0)	
dd 1D4E4h		
dd 0			
dd 75h,	3 dup(0)	
dd 1D4E5h		
dd 0			
dd 76h,	3 dup(0)	
dd 1D4E6h		
dd 0			
dd 77h,	3 dup(0)	
dd 1D4E7h		
dd 0			
dd 78h,	3 dup(0)	
dd 1D4E8h		
dd 0			
dd 79h,	3 dup(0)	
dd 1D4E9h		
dd 0			
dd 7Ah,	3 dup(0)	
dd 1D504h		
dd 0			
dd 61h,	3 dup(0)	
dd 1D505h		
dd 0			
dd 62h,	3 dup(0)	
dd 1D507h		
dd 0			
dd 64h,	3 dup(0)	
dd 1D508h		
dd 0			
dd 65h,	3 dup(0)	
dd 1D509h		
dd 0			
dd 66h,	3 dup(0)	
dd 1D50Ah		
dd 0			
dd 67h,	3 dup(0)	
dd 1D50Dh		
dd 0			
dd 6Ah,	3 dup(0)	
dd 1D50Eh		
dd 0			
dd 6Bh,	3 dup(0)	
dd 1D50Fh		
dd 0			
dd 6Ch,	3 dup(0)	
dd 1D510h		
dd 0			
dd 6Dh,	3 dup(0)	
dd 1D511h		
dd 0			
dd 6Eh,	3 dup(0)	
dd 1D512h		
dd 0			
dd 6Fh,	3 dup(0)	
dd 1D513h		
dd 0			
dd 70h,	3 dup(0)	
dd 1D514h		
dd 0			
dd 71h,	3 dup(0)	
dd 1D516h		
dd 0			
dd 73h,	3 dup(0)	
dd 1D517h		
dd 0			
dd 74h,	3 dup(0)	
dd 1D518h		
dd 0			
dd 75h,	3 dup(0)	
dd 1D519h		
dd 0			
dd 76h,	3 dup(0)	
dd 1D51Ah		
dd 0			
dd 77h,	3 dup(0)	
dd 1D51Bh		
dd 0			
dd 78h,	3 dup(0)	
dd 1D51Ch		
dd 0			
dd 79h,	3 dup(0)	
dd 1D538h		
dd 0			
dd 61h,	3 dup(0)	
dd 1D539h		
dd 0			
dd 62h,	3 dup(0)	
dd 1D53Bh		
dd 0			
dd 64h,	3 dup(0)	
dd 1D53Ch		
dd 0			
dd 65h,	3 dup(0)	
dd 1D53Dh		
dd 0			
dd 66h,	3 dup(0)	
dd 1D53Eh		
dd 0			
dd 67h,	3 dup(0)	
dd 1D540h		
dd 0			
dd 69h,	3 dup(0)	
dd 1D541h		
dd 0			
dd 6Ah,	3 dup(0)	
dd 1D542h		
dd 0			
dd 6Bh,	3 dup(0)	
dd 1D543h		
dd 0			
dd 6Ch,	3 dup(0)	
dd 1D544h		
dd 0			
dd 6Dh,	3 dup(0)	
dd 1D546h		
dd 0			
dd 6Fh,	3 dup(0)	
dd 1D54Ah		
dd 0			
dd 73h,	3 dup(0)	
dd 1D54Bh		
dd 0			
dd 74h,	3 dup(0)	
dd 1D54Ch		
dd 0			
dd 75h,	3 dup(0)	
dd 1D54Dh		
dd 0			
dd 76h,	3 dup(0)	
dd 1D54Eh		
dd 0			
dd 77h,	3 dup(0)	
dd 1D54Fh		
dd 0			
dd 78h,	3 dup(0)	
dd 1D550h		
dd 0			
dd 79h,	3 dup(0)	
dd 1D56Ch		
dd 0			
dd 61h,	3 dup(0)	
dd 1D56Dh		
dd 0			
dd 62h,	3 dup(0)	
dd 1D56Eh		
dd 0			
dd 63h,	3 dup(0)	
dd 1D56Fh		
dd 0			
dd 64h,	3 dup(0)	
dd 1D570h		
dd 0			
dd 65h,	3 dup(0)	
dd 1D571h		
dd 0			
dd 66h,	3 dup(0)	
dd 1D572h		
dd 0			
dd 67h,	3 dup(0)	
dd 1D573h		
dd 0			
dd 68h,	3 dup(0)	
dd 1D574h		
dd 0			
dd 69h,	3 dup(0)	
dd 1D575h		
dd 0			
dd 6Ah,	3 dup(0)	
dd 1D576h		
dd 0			
dd 6Bh,	3 dup(0)	
dd 1D577h		
dd 0			
dd 6Ch,	3 dup(0)	
dd 1D578h		
dd 0			
dd 6Dh,	3 dup(0)	
dd 1D579h		
dd 0			
dd 6Eh,	3 dup(0)	
dd 1D57Ah		
dd 0			
dd 6Fh,	3 dup(0)	
dd 1D57Bh		
dd 0			
dd 70h,	3 dup(0)	
dd 1D57Ch		
dd 0			
dd 71h,	3 dup(0)	
dd 1D57Dh		
dd 0			
dd 72h,	3 dup(0)	
dd 1D57Eh		
dd 0			
dd 73h,	3 dup(0)	
dd 1D57Fh		
dd 0			
dd 74h,	3 dup(0)	
dd 1D580h		
dd 0			
dd 75h,	3 dup(0)	
dd 1D581h		
dd 0			
dd 76h,	3 dup(0)	
dd 1D582h		
dd 0			
dd 77h,	3 dup(0)	
dd 1D583h		
dd 0			
dd 78h,	3 dup(0)	
dd 1D584h		
dd 0			
dd 79h,	3 dup(0)	
dd 1D585h		
dd 0			
dd 7Ah,	3 dup(0)	
dd 1D5A0h		
dd 0			
dd 61h,	3 dup(0)	
dd 1D5A1h		
dd 0			
dd 62h,	3 dup(0)	
dd 1D5A2h		
dd 0			
dd 63h,	3 dup(0)	
dd 1D5A3h		
dd 0			
dd 64h,	3 dup(0)	
dd 1D5A4h		
dd 0			
dd 65h,	3 dup(0)	
dd 1D5A5h		
dd 0			
dd 66h,	3 dup(0)	
dd 1D5A6h		
dd 0			
dd 67h,	3 dup(0)	
dd 1D5A7h		
dd 0			
dd 68h,	3 dup(0)	
dd 1D5A8h		
dd 0			
dd 69h,	3 dup(0)	
dd 1D5A9h		
dd 0			
dd 6Ah,	3 dup(0)	
dd 1D5AAh		
dd 0			
dd 6Bh,	3 dup(0)	
dd 1D5ABh		
dd 0			
dd 6Ch,	3 dup(0)	
dd 1D5ACh		
dd 0			
dd 6Dh,	3 dup(0)	
dd 1D5ADh		
dd 0			
dd 6Eh,	3 dup(0)	
dd 1D5AEh		
dd 0			
dd 6Fh,	3 dup(0)	
dd 1D5AFh		
dd 0			
dd 70h,	3 dup(0)	
dd 1D5B0h		
dd 0			
dd 71h,	3 dup(0)	
dd 1D5B1h		
dd 0			
dd 72h,	3 dup(0)	
dd 1D5B2h		
dd 0			
dd 73h,	3 dup(0)	
dd 1D5B3h		
dd 0			
dd 74h,	3 dup(0)	
dd 1D5B4h		
dd 0			
dd 75h,	3 dup(0)	
dd 1D5B5h		
dd 0			
dd 76h,	3 dup(0)	
dd 1D5B6h		
dd 0			
dd 77h,	3 dup(0)	
dd 1D5B7h		
dd 0			
dd 78h,	3 dup(0)	
dd 1D5B8h		
dd 0			
dd 79h,	3 dup(0)	
dd 1D5B9h		
dd 0			
dd 7Ah,	3 dup(0)	
dd 1D5D4h		
dd 0			
dd 61h,	3 dup(0)	
dd 1D5D5h		
dd 0			
dd 62h,	3 dup(0)	
dd 1D5D6h		
dd 0			
dd 63h,	3 dup(0)	
dd 1D5D7h		
dd 0			
dd 64h,	3 dup(0)	
dd 1D5D8h		
dd 0			
dd 65h,	3 dup(0)	
dd 1D5D9h		
dd 0			
dd 66h,	3 dup(0)	
dd 1D5DAh		
dd 0			
dd 67h,	3 dup(0)	
dd 1D5DBh		
dd 0			
dd 68h,	3 dup(0)	
dd 1D5DCh		
dd 0			
dd 69h,	3 dup(0)	
dd 1D5DDh		
dd 0			
dd 6Ah,	3 dup(0)	
dd 1D5DEh		
dd 0			
dd 6Bh,	3 dup(0)	
dd 1D5DFh		
dd 0			
dd 6Ch,	3 dup(0)	
dd 1D5E0h		
dd 0			
dd 6Dh,	3 dup(0)	
dd 1D5E1h		
dd 0			
dd 6Eh,	3 dup(0)	
dd 1D5E2h		
dd 0			
dd 6Fh,	3 dup(0)	
dd 1D5E3h		
dd 0			
dd 70h,	3 dup(0)	
dd 1D5E4h		
dd 0			
dd 71h,	3 dup(0)	
dd 1D5E5h		
dd 0			
dd 72h,	3 dup(0)	
dd 1D5E6h		
dd 0			
dd 73h,	3 dup(0)	
dd 1D5E7h		
dd 0			
dd 74h,	3 dup(0)	
dd 1D5E8h		
dd 0			
dd 75h,	3 dup(0)	
dd 1D5E9h		
dd 0			
dd 76h,	3 dup(0)	
dd 1D5EAh		
dd 0			
dd 77h,	3 dup(0)	
dd 1D5EBh		
dd 0			
dd 78h,	3 dup(0)	
dd 1D5ECh		
dd 0			
dd 79h,	3 dup(0)	
dd 1D5EDh		
dd 0			
dd 7Ah,	3 dup(0)	
dd 1D608h		
dd 0			
dd 61h,	3 dup(0)	
dd 1D609h		
dd 0			
dd 62h,	3 dup(0)	
dd 1D60Ah		
dd 0			
dd 63h,	3 dup(0)	
dd 1D60Bh		
dd 0			
dd 64h,	3 dup(0)	
dd 1D60Ch		
dd 0			
dd 65h,	3 dup(0)	
dd 1D60Dh		
dd 0			
dd 66h,	3 dup(0)	
dd 1D60Eh		
dd 0			
dd 67h,	3 dup(0)	
dd 1D60Fh		
dd 0			
dd 68h,	3 dup(0)	
dd 1D610h		
dd 0			
dd 69h,	3 dup(0)	
dd 1D611h		
dd 0			
dd 6Ah,	3 dup(0)	
dd 1D612h		
dd 0			
dd 6Bh,	3 dup(0)	
dd 1D613h		
dd 0			
dd 6Ch,	3 dup(0)	
dd 1D614h		
dd 0			
dd 6Dh,	3 dup(0)	
dd 1D615h		
dd 0			
dd 6Eh,	3 dup(0)	
dd 1D616h		
dd 0			
dd 6Fh,	3 dup(0)	
dd 1D617h		
dd 0			
dd 70h,	3 dup(0)	
dd 1D618h		
dd 0			
dd 71h,	3 dup(0)	
dd 1D619h		
dd 0			
dd 72h,	3 dup(0)	
dd 1D61Ah		
dd 0			
dd 73h,	3 dup(0)	
dd 1D61Bh		
dd 0			
dd 74h,	3 dup(0)	
dd 1D61Ch		
dd 0			
dd 75h,	3 dup(0)	
dd 1D61Dh		
dd 0			
dd 76h,	3 dup(0)	
dd 1D61Eh		
dd 0			
dd 77h,	3 dup(0)	
dd 1D61Fh		
dd 0			
dd 78h,	3 dup(0)	
dd 1D620h		
dd 0			
dd 79h,	3 dup(0)	
dd 1D621h		
dd 0			
dd 7Ah,	3 dup(0)	
dd 1D63Ch		
dd 0			
dd 61h,	3 dup(0)	
dd 1D63Dh		
dd 0			
dd 62h,	3 dup(0)	
dd 1D63Eh		
dd 0			
dd 63h,	3 dup(0)	
dd 1D63Fh		
dd 0			
dd 64h,	3 dup(0)	
dd 1D640h		
dd 0			
dd 65h,	3 dup(0)	
dd 1D641h		
dd 0			
dd 66h,	3 dup(0)	
dd 1D642h		
dd 0			
dd 67h,	3 dup(0)	
dd 1D643h		
dd 0			
dd 68h,	3 dup(0)	
dd 1D644h		
dd 0			
dd 69h,	3 dup(0)	
dd 1D645h		
dd 0			
dd 6Ah,	3 dup(0)	
dd 1D646h		
dd 0			
dd 6Bh,	3 dup(0)	
dd 1D647h		
dd 0			
dd 6Ch,	3 dup(0)	
dd 1D648h		
dd 0			
dd 6Dh,	3 dup(0)	
dd 1D649h		
dd 0			
dd 6Eh,	3 dup(0)	
dd 1D64Ah		
dd 0			
dd 6Fh,	3 dup(0)	
dd 1D64Bh		
dd 0			
dd 70h,	3 dup(0)	
dd 1D64Ch		
dd 0			
dd 71h,	3 dup(0)	
dd 1D64Dh		
dd 0			
dd 72h,	3 dup(0)	
dd 1D64Eh		
dd 0			
dd 73h,	3 dup(0)	
dd 1D64Fh		
dd 0			
dd 74h,	3 dup(0)	
dd 1D650h		
dd 0			
dd 75h,	3 dup(0)	
dd 1D651h		
dd 0			
dd 76h,	3 dup(0)	
dd 1D652h		
dd 0			
dd 77h,	3 dup(0)	
dd 1D653h		
dd 0			
dd 78h,	3 dup(0)	
dd 1D654h		
dd 0			
dd 79h,	3 dup(0)	
dd 1D655h		
dd 0			
dd 7Ah,	3 dup(0)	
dd 1D670h		
dd 0			
dd 61h,	3 dup(0)	
dd 1D671h		
dd 0			
dd 62h,	3 dup(0)	
dd 1D672h		
dd 0			
dd 63h,	3 dup(0)	
dd 1D673h		
dd 0			
dd 64h,	3 dup(0)	
dd 1D674h		
dd 0			
dd 65h,	3 dup(0)	
dd 1D675h		
dd 0			
dd 66h,	3 dup(0)	
dd 1D676h		
dd 0			
dd 67h,	3 dup(0)	
dd 1D677h		
dd 0			
dd 68h,	3 dup(0)	
dd 1D678h		
dd 0			
dd 69h,	3 dup(0)	
dd 1D679h		
dd 0			
dd 6Ah,	3 dup(0)	
dd 1D67Ah		
dd 0			
dd 6Bh,	3 dup(0)	
dd 1D67Bh		
dd 0			
dd 6Ch,	3 dup(0)	
dd 1D67Ch		
dd 0			
dd 6Dh,	3 dup(0)	
dd 1D67Dh		
dd 0			
dd 6Eh,	3 dup(0)	
dd 1D67Eh		
dd 0			
dd 6Fh,	3 dup(0)	
dd 1D67Fh		
dd 0			
dd 70h,	3 dup(0)	
dd 1D680h		
dd 0			
dd 71h,	3 dup(0)	
dd 1D681h		
dd 0			
dd 72h,	3 dup(0)	
dd 1D682h		
dd 0			
dd 73h,	3 dup(0)	
dd 1D683h		
dd 0			
dd 74h,	3 dup(0)	
dd 1D684h		
dd 0			
dd 75h,	3 dup(0)	
dd 1D685h		
dd 0			
dd 76h,	3 dup(0)	
dd 1D686h		
dd 0			
dd 77h,	3 dup(0)	
dd 1D687h		
dd 0			
dd 78h,	3 dup(0)	
dd 1D688h		
dd 0			
dd 79h,	3 dup(0)	
dd 1D689h		
dd 0			
dd 7Ah,	3 dup(0)	
dd 1D6A8h		
dd 0			
dd 3B1h, 3 dup(0)	
dd 1D6A9h		
dd 0			
dd 3B2h, 3 dup(0)	
dd 1D6AAh		
dd 0			
dd 3B3h, 3 dup(0)	
dd 1D6ABh		
dd 0			
dd 3B4h, 3 dup(0)	
dd 1D6ACh		
dd 0			
dd 3B5h, 3 dup(0)	
dd 1D6ADh		
dd 0			
dd 3B6h, 3 dup(0)	
dd 1D6AEh		
dd 0			
dd 3B7h, 3 dup(0)	
dd 1D6AFh		
dd 0			
dd 3B8h, 3 dup(0)	
dd 1D6B0h		
dd 0			
dd 3B9h, 3 dup(0)	
dd 1D6B1h		
dd 0			
dd 3BAh, 3 dup(0)	
dd 1D6B2h		
dd 0			
dd 3BBh, 3 dup(0)	
dd 1D6B3h		
dd 0			
dd 3BCh, 3 dup(0)	
dd 1D6B4h		
dd 0			
dd 3BDh, 3 dup(0)	
dd 1D6B5h		
dd 0			
dd 3BEh, 3 dup(0)	
dd 1D6B6h		
dd 0			
dd 3BFh, 3 dup(0)	
dd 1D6B7h		
dd 0			
dd 3C0h, 3 dup(0)	
dd 1D6B8h		
dd 0			
dd 3C1h, 3 dup(0)	
dd 1D6B9h		
dd 0			
dd 3B8h, 3 dup(0)	
dd 1D6BAh		
dd 0			
dd 3C3h, 3 dup(0)	
dd 1D6BBh		
dd 0			
dd 3C4h, 3 dup(0)	
dd 1D6BCh		
dd 0			
dd 3C5h, 3 dup(0)	
dd 1D6BDh		
dd 0			
dd 3C6h, 3 dup(0)	
dd 1D6BEh		
dd 0			
dd 3C7h, 3 dup(0)	
dd 1D6BFh		
dd 0			
dd 3C8h, 3 dup(0)	
dd 1D6C0h		
dd 0			
dd 3C9h, 3 dup(0)	
dd 1D6D3h		
dd 0			
dd 3C3h, 3 dup(0)	
dd 1D6E2h		
dd 0			
dd 3B1h, 3 dup(0)	
dd 1D6E3h		
dd 0			
dd 3B2h, 3 dup(0)	
dd 1D6E4h		
dd 0			
dd 3B3h, 3 dup(0)	
dd 1D6E5h		
dd 0			
dd 3B4h, 3 dup(0)	
dd 1D6E6h		
dd 0			
dd 3B5h, 3 dup(0)	
dd 1D6E7h		
dd 0			
dd 3B6h, 3 dup(0)	
dd 1D6E8h		
dd 0			
dd 3B7h, 3 dup(0)	
dd 1D6E9h		
dd 0			
dd 3B8h, 3 dup(0)	
dd 1D6EAh		
dd 0			
dd 3B9h, 3 dup(0)	
dd 1D6EBh		
dd 0			
dd 3BAh, 3 dup(0)	
dd 1D6ECh		
dd 0			
dd 3BBh, 3 dup(0)	
dd 1D6EDh		
dd 0			
dd 3BCh, 3 dup(0)	
dd 1D6EEh		
dd 0			
dd 3BDh, 3 dup(0)	
dd 1D6EFh		
dd 0			
dd 3BEh, 3 dup(0)	
dd 1D6F0h		
dd 0			
dd 3BFh, 3 dup(0)	
dd 1D6F1h		
dd 0			
dd 3C0h, 3 dup(0)	
dd 1D6F2h		
dd 0			
dd 3C1h, 3 dup(0)	
dd 1D6F3h		
dd 0			
dd 3B8h, 3 dup(0)	
dd 1D6F4h		
dd 0			
dd 3C3h, 3 dup(0)	
dd 1D6F5h		
dd 0			
dd 3C4h, 3 dup(0)	
dd 1D6F6h		
dd 0			
dd 3C5h, 3 dup(0)	
dd 1D6F7h		
dd 0			
dd 3C6h, 3 dup(0)	
dd 1D6F8h		
dd 0			
dd 3C7h, 3 dup(0)	
dd 1D6F9h		
dd 0			
dd 3C8h, 3 dup(0)	
dd 1D6FAh		
dd 0			
dd 3C9h, 3 dup(0)	
dd 1D70Dh		
dd 0			
dd 3C3h, 3 dup(0)	
dd 1D71Ch		
dd 0			
dd 3B1h, 3 dup(0)	
dd 1D71Dh		
dd 0			
dd 3B2h, 3 dup(0)	
dd 1D71Eh		
dd 0			
dd 3B3h, 3 dup(0)	
dd 1D71Fh		
dd 0			
dd 3B4h, 3 dup(0)	
dd 1D720h		
dd 0			
dd 3B5h, 3 dup(0)	
dd 1D721h		
dd 0			
dd 3B6h, 3 dup(0)	
dd 1D722h		
dd 0			
dd 3B7h, 3 dup(0)	
dd 1D723h		
dd 0			
dd 3B8h, 3 dup(0)	
dd 1D724h		
dd 0			
dd 3B9h, 3 dup(0)	
dd 1D725h		
dd 0			
dd 3BAh, 3 dup(0)	
dd 1D726h		
dd 0			
dd 3BBh, 3 dup(0)	
dd 1D727h		
dd 0			
dd 3BCh, 3 dup(0)	
dd 1D728h		
dd 0			
dd 3BDh, 3 dup(0)	
dd 1D729h		
dd 0			
dd 3BEh, 3 dup(0)	
dd 1D72Ah		
dd 0			
dd 3BFh, 3 dup(0)	
dd 1D72Bh		
dd 0			
dd 3C0h, 3 dup(0)	
dd 1D72Ch		
dd 0			
dd 3C1h, 3 dup(0)	
dd 1D72Dh		
dd 0			
dd 3B8h, 3 dup(0)	
dd 1D72Eh		
dd 0			
dd 3C3h, 3 dup(0)	
dd 1D72Fh		
dd 0			
dd 3C4h, 3 dup(0)	
dd 1D730h		
dd 0			
dd 3C5h, 3 dup(0)	
dd 1D731h		
dd 0			
dd 3C6h, 3 dup(0)	
dd 1D732h		
dd 0			
dd 3C7h, 3 dup(0)	
dd 1D733h		
dd 0			
dd 3C8h, 3 dup(0)	
dd 1D734h		
dd 0			
dd 3C9h, 3 dup(0)	
dd 1D747h		
dd 0			
dd 3C3h, 3 dup(0)	
dd 1D756h		
dd 0			
dd 3B1h, 3 dup(0)	
dd 1D757h		
dd 0			
dd 3B2h, 3 dup(0)	
dd 1D758h		
dd 0			
dd 3B3h, 3 dup(0)	
dd 1D759h		
dd 0			
dd 3B4h, 3 dup(0)	
dd 1D75Ah		
dd 0			
dd 3B5h, 3 dup(0)	
dd 1D75Bh		
dd 0			
dd 3B6h, 3 dup(0)	
dd 1D75Ch		
dd 0			
dd 3B7h, 3 dup(0)	
dd 1D75Dh		
dd 0			
dd 3B8h, 3 dup(0)	
dd 1D75Eh		
dd 0			
dd 3B9h, 3 dup(0)	
dd 1D75Fh		
dd 0			
dd 3BAh, 3 dup(0)	
dd 1D760h		
dd 0			
dd 3BBh, 3 dup(0)	
dd 1D761h		
dd 0			
dd 3BCh, 3 dup(0)	
dd 1D762h		
dd 0			
dd 3BDh, 3 dup(0)	
dd 1D763h		
dd 0			
dd 3BEh, 3 dup(0)	
dd 1D764h		
dd 0			
dd 3BFh, 3 dup(0)	
dd 1D765h		
dd 0			
dd 3C0h, 3 dup(0)	
dd 1D766h		
dd 0			
dd 3C1h, 3 dup(0)	
dd 1D767h		
dd 0			
dd 3B8h, 3 dup(0)	
dd 1D768h		
dd 0			
dd 3C3h, 3 dup(0)	
dd 1D769h		
dd 0			
dd 3C4h, 3 dup(0)	
dd 1D76Ah		
dd 0			
dd 3C5h, 3 dup(0)	
dd 1D76Bh		
dd 0			
dd 3C6h, 3 dup(0)	
dd 1D76Ch		
dd 0			
dd 3C7h, 3 dup(0)	
dd 1D76Dh		
dd 0			
dd 3C8h, 3 dup(0)	
dd 1D76Eh		
dd 0			
dd 3C9h, 3 dup(0)	
dd 1D781h		
dd 0			
dd 3C3h, 3 dup(0)	
dd 1D790h		
dd 0			
dd 3B1h, 3 dup(0)	
dd 1D791h		
dd 0			
dd 3B2h, 3 dup(0)	
dd 1D792h		
dd 0			
dd 3B3h, 3 dup(0)	
dd 1D793h		
dd 0			
dd 3B4h, 3 dup(0)	
dd 1D794h		
dd 0			
dd 3B5h, 3 dup(0)	
dd 1D795h		
dd 0			
dd 3B6h, 3 dup(0)	
dd 1D796h		
dd 0			
dd 3B7h, 3 dup(0)	
dd 1D797h		
dd 0			
dd 3B8h, 3 dup(0)	
dd 1D798h		
dd 0			
dd 3B9h, 3 dup(0)	
dd 1D799h		
dd 0			
dd 3BAh, 3 dup(0)	
dd 1D79Ah		
dd 0			
dd 3BBh, 3 dup(0)	
dd 1D79Bh		
dd 0			
dd 3BCh, 3 dup(0)	
dd 1D79Ch		
dd 0			
dd 3BDh, 3 dup(0)	
dd 1D79Dh		
dd 0			
dd 3BEh, 3 dup(0)	
dd 1D79Eh		
dd 0			
dd 3BFh, 3 dup(0)	
dd 1D79Fh		
dd 0			
dd 3C0h, 3 dup(0)	
dd 1D7A0h		
dd 0			
dd 3C1h, 3 dup(0)	
dd 1D7A1h		
dd 0			
dd 3B8h, 3 dup(0)	
dd 1D7A2h		
dd 0			
dd 3C3h, 3 dup(0)	
dd 1D7A3h		
dd 0			
dd 3C4h, 3 dup(0)	
dd 1D7A4h		
dd 0			
dd 3C5h, 3 dup(0)	
dd 1D7A5h		
dd 0			
dd 3C6h, 3 dup(0)	
dd 1D7A6h		
dd 0			
dd 3C7h, 3 dup(0)	
dd 1D7A7h		
dd 0			
dd 3C8h, 3 dup(0)	
dd 1D7A8h		
dd 0			
dd 3C9h, 3 dup(0)	
dd 1D7BBh		
dd 0			
dd 3C3h, 3 dup(0)	
dd 0			
dd 0			
dd 4 dup(0)		
public _stringprep_rfc3454_B_3
dd 0			
dd 61h,	3 dup(0)	
dd 42h			
dd 0			
dd 62h,	3 dup(0)	
dd 43h			
dd 0			
dd 63h,	3 dup(0)	
dd 44h			
dd 0			
dd 64h,	3 dup(0)	
dd 45h			
dd 0			
dd 65h,	3 dup(0)	
dd 46h			
dd 0			
dd 66h,	3 dup(0)	
dd 47h			
dd 0			
dd 67h,	3 dup(0)	
dd 48h			
dd 0			
dd 68h,	3 dup(0)	
dd 49h			
dd 0			
dd 69h,	3 dup(0)	
dd 4Ah			
dd 0			
dd 6Ah,	3 dup(0)	
dd 4Bh			
dd 0			
dd 6Bh,	3 dup(0)	
dd 4Ch			
dd 0			
dd 6Ch,	3 dup(0)	
dd 4Dh			
dd 0			
dd 6Dh,	3 dup(0)	
dd 4Eh			
dd 0			
dd 6Eh,	3 dup(0)	
dd 4Fh			
dd 0			
dd 6Fh,	3 dup(0)	
dd 50h			
dd 0			
dd 70h,	3 dup(0)	
dd 51h			
dd 0			
dd 71h,	3 dup(0)	
dd 52h			
dd 0			
dd 72h,	3 dup(0)	
dd 53h			
dd 0			
dd 73h,	3 dup(0)	
dd 54h			
dd 0			
dd 74h,	3 dup(0)	
dd 55h			
dd 0			
dd 75h,	3 dup(0)	
dd 56h			
dd 0			
dd 76h,	3 dup(0)	
dd 57h			
dd 0			
dd 77h,	3 dup(0)	
dd 58h			
dd 0			
dd 78h,	3 dup(0)	
dd 59h			
dd 0			
dd 79h,	3 dup(0)	
dd 5Ah			
dd 0			
dd 7Ah,	3 dup(0)	
dd 0B5h			
dd 0			
dd 3BCh, 3 dup(0)	
dd 0C0h			
dd 0			
dd 0E0h, 3 dup(0)	
dd 0C1h			
dd 0			
dd 0E1h, 3 dup(0)	
dd 0C2h			
dd 0			
dd 0E2h, 3 dup(0)	
dd 0C3h			
dd 0			
dd 0E3h, 3 dup(0)	
dd 0C4h			
dd 0			
dd 0E4h, 3 dup(0)	
dd 0C5h			
dd 0			
dd 0E5h, 3 dup(0)	
dd 0C6h			
dd 0			
dd 0E6h, 3 dup(0)	
dd 0C7h			
dd 0			
dd 0E7h, 3 dup(0)	
dd 0C8h			
dd 0			
dd 0E8h, 3 dup(0)	
dd 0C9h			
dd 0			
dd 0E9h, 3 dup(0)	
dd 0CAh			
dd 0			
dd 0EAh, 3 dup(0)	
dd 0CBh			
dd 0			
dd 0EBh, 3 dup(0)	
dd 0CCh			
dd 0			
dd 0ECh, 3 dup(0)	
dd 0CDh			
dd 0			
dd 0EDh, 3 dup(0)	
dd 0CEh			
dd 0			
dd 0EEh, 3 dup(0)	
dd 0CFh			
dd 0			
dd 0EFh, 3 dup(0)	
dd 0D0h			
dd 0			
dd 0F0h, 3 dup(0)	
dd 0D1h			
dd 0			
dd 0F1h, 3 dup(0)	
dd 0D2h			
dd 0			
dd 0F2h, 3 dup(0)	
dd 0D3h			
dd 0			
dd 0F3h, 3 dup(0)	
dd 0D4h			
dd 0			
dd 0F4h, 3 dup(0)	
dd 0D5h			
dd 0			
dd 0F5h, 3 dup(0)	
dd 0D6h			
dd 0			
dd 0F6h, 3 dup(0)	
dd 0D8h			
dd 0			
dd 0F8h, 3 dup(0)	
dd 0D9h			
dd 0			
dd 0F9h, 3 dup(0)	
dd 0DAh			
dd 0			
dd 0FAh, 3 dup(0)	
dd 0DBh			
dd 0			
dd 0FBh, 3 dup(0)	
dd 0DCh			
dd 0			
dd 0FCh, 3 dup(0)	
dd 0DDh			
dd 0			
dd 0FDh, 3 dup(0)	
dd 0DEh			
dd 0			
dd 0FEh, 3 dup(0)	
dd 0DFh			
dd 0			
dd 2 dup(73h), 2 dup(0)	
dd 100h			
dd 0			
dd 101h, 3 dup(0)	
dd 102h			
dd 0			
dd 103h, 3 dup(0)	
dd 104h			
dd 0			
dd 105h, 3 dup(0)	
dd 106h			
dd 0			
dd 107h, 3 dup(0)	
dd 108h			
dd 0			
dd 109h, 3 dup(0)	
dd 10Ah			
dd 0			
dd 10Bh, 3 dup(0)	
dd 10Ch			
dd 0			
dd 10Dh, 3 dup(0)	
dd 10Eh			
dd 0			
dd 10Fh, 3 dup(0)	
dd 110h			
dd 0			
dd 111h, 3 dup(0)	
dd 112h			
dd 0			
dd 113h, 3 dup(0)	
dd 114h			
dd 0			
dd 115h, 3 dup(0)	
dd 116h			
dd 0			
dd 117h, 3 dup(0)	
dd 118h			
dd 0			
dd 119h, 3 dup(0)	
dd 11Ah			
dd 0			
dd 11Bh, 3 dup(0)	
dd 11Ch			
dd 0			
dd 11Dh, 3 dup(0)	
dd 11Eh			
dd 0			
dd 11Fh, 3 dup(0)	
dd 120h			
dd 0			
dd 121h, 3 dup(0)	
dd 122h			
dd 0			
dd 123h, 3 dup(0)	
dd 124h			
dd 0			
dd 125h, 3 dup(0)	
dd 126h			
dd 0			
dd 127h, 3 dup(0)	
dd 128h			
dd 0			
dd 129h, 3 dup(0)	
dd 12Ah			
dd 0			
dd 12Bh, 3 dup(0)	
dd 12Ch			
dd 0			
dd 12Dh, 3 dup(0)	
dd 12Eh			
dd 0			
dd 12Fh, 3 dup(0)	
dd 130h			
dd 0			
dd 69h,	307h, 2	dup(0)	
dd 132h			
dd 0			
dd 133h, 3 dup(0)	
dd 134h			
dd 0			
dd 135h, 3 dup(0)	
dd 136h			
dd 0			
dd 137h, 3 dup(0)	
dd 139h			
dd 0			
dd 13Ah, 3 dup(0)	
dd 13Bh			
dd 0			
dd 13Ch, 3 dup(0)	
dd 13Dh			
dd 0			
dd 13Eh, 3 dup(0)	
dd 13Fh			
dd 0			
dd 140h, 3 dup(0)	
dd 141h			
dd 0			
dd 142h, 3 dup(0)	
dd 143h			
dd 0			
dd 144h, 3 dup(0)	
dd 145h			
dd 0			
dd 146h, 3 dup(0)	
dd 147h			
dd 0			
dd 148h, 3 dup(0)	
dd 149h			
dd 0			
dd 2BCh, 6Eh, 2	dup(0)	
dd 14Ah			
dd 0			
dd 14Bh, 3 dup(0)	
dd 14Ch			
dd 0			
dd 14Dh, 3 dup(0)	
dd 14Eh			
dd 0			
dd 14Fh, 3 dup(0)	
dd 150h			
dd 0			
dd 151h, 3 dup(0)	
dd 152h			
dd 0			
dd 153h, 3 dup(0)	
dd 154h			
dd 0			
dd 155h, 3 dup(0)	
dd 156h			
dd 0			
dd 157h, 3 dup(0)	
dd 158h			
dd 0			
dd 159h, 3 dup(0)	
dd 15Ah			
dd 0			
dd 15Bh, 3 dup(0)	
dd 15Ch			
dd 0			
dd 15Dh, 3 dup(0)	
dd 15Eh			
dd 0			
dd 15Fh, 3 dup(0)	
dd 160h			
dd 0			
dd 161h, 3 dup(0)	
dd 162h			
dd 0			
dd 163h, 3 dup(0)	
dd 164h			
dd 0			
dd 165h, 3 dup(0)	
dd 166h			
dd 0			
dd 167h, 3 dup(0)	
dd 168h			
dd 0			
dd 169h, 3 dup(0)	
dd 16Ah			
dd 0			
dd 16Bh, 3 dup(0)	
dd 16Ch			
dd 0			
dd 16Dh, 3 dup(0)	
dd 16Eh			
dd 0			
dd 16Fh, 3 dup(0)	
dd 170h			
dd 0			
dd 171h, 3 dup(0)	
dd 172h			
dd 0			
dd 173h, 3 dup(0)	
dd 174h			
dd 0			
dd 175h, 3 dup(0)	
dd 176h			
dd 0			
dd 177h, 3 dup(0)	
dd 178h			
dd 0			
dd 0FFh, 3 dup(0)	
dd 179h			
dd 0			
dd 17Ah, 3 dup(0)	
dd 17Bh			
dd 0			
dd 17Ch, 3 dup(0)	
dd 17Dh			
dd 0			
dd 17Eh, 3 dup(0)	
dd 17Fh			
dd 0			
dd 73h,	3 dup(0)	
dd 181h			
dd 0			
dd 253h, 3 dup(0)	
dd 182h			
dd 0			
dd 183h, 3 dup(0)	
dd 184h			
dd 0			
dd 185h, 3 dup(0)	
dd 186h			
dd 0			
dd 254h, 3 dup(0)	
dd 187h			
dd 0			
dd 188h, 3 dup(0)	
dd 189h			
dd 0			
dd 256h, 3 dup(0)	
dd 18Ah			
dd 0			
dd 257h, 3 dup(0)	
dd 18Bh			
dd 0			
dd 18Ch, 3 dup(0)	
dd 18Eh			
dd 0			
dd 1DDh, 3 dup(0)	
dd 18Fh			
dd 0			
dd 259h, 3 dup(0)	
dd 190h			
dd 0			
dd 25Bh, 3 dup(0)	
dd 191h			
dd 0			
dd 192h, 3 dup(0)	
dd 193h			
dd 0			
dd 260h, 3 dup(0)	
dd 194h			
dd 0			
dd 263h, 3 dup(0)	
dd 196h			
dd 0			
dd 269h, 3 dup(0)	
dd 197h			
dd 0			
dd 268h, 3 dup(0)	
dd 198h			
dd 0			
dd 199h, 3 dup(0)	
dd 19Ch			
dd 0			
dd 26Fh, 3 dup(0)	
dd 19Dh			
dd 0			
dd 272h, 3 dup(0)	
dd 19Fh			
dd 0			
dd 275h, 3 dup(0)	
dd 1A0h			
dd 0			
dd 1A1h, 3 dup(0)	
dd 1A2h			
dd 0			
dd 1A3h, 3 dup(0)	
dd 1A4h			
dd 0			
dd 1A5h, 3 dup(0)	
dd 1A6h			
dd 0			
dd 280h, 3 dup(0)	
dd 1A7h			
dd 0			
dd 1A8h, 3 dup(0)	
dd 1A9h			
dd 0			
dd 283h, 3 dup(0)	
dd 1ACh			
dd 0			
dd 1ADh, 3 dup(0)	
dd 1AEh			
dd 0			
dd 288h, 3 dup(0)	
dd 1AFh			
dd 0			
dd 1B0h, 3 dup(0)	
dd 1B1h			
dd 0			
dd 28Ah, 3 dup(0)	
dd 1B2h			
dd 0			
dd 28Bh, 3 dup(0)	
dd 1B3h			
dd 0			
dd 1B4h, 3 dup(0)	
dd 1B5h			
dd 0			
dd 1B6h, 3 dup(0)	
dd 1B7h			
dd 0			
dd 292h, 3 dup(0)	
dd 1B8h			
dd 0			
dd 1B9h, 3 dup(0)	
dd 1BCh			
dd 0			
dd 1BDh, 3 dup(0)	
dd 1C4h			
dd 0			
dd 1C6h, 3 dup(0)	
dd 1C5h			
dd 0			
dd 1C6h, 3 dup(0)	
dd 1C7h			
dd 0			
dd 1C9h, 3 dup(0)	
dd 1C8h			
dd 0			
dd 1C9h, 3 dup(0)	
dd 1CAh			
dd 0			
dd 1CCh, 3 dup(0)	
dd 1CBh			
dd 0			
dd 1CCh, 3 dup(0)	
dd 1CDh			
dd 0			
dd 1CEh, 3 dup(0)	
dd 1CFh			
dd 0			
dd 1D0h, 3 dup(0)	
dd 1D1h			
dd 0			
dd 1D2h, 3 dup(0)	
dd 1D3h			
dd 0			
dd 1D4h, 3 dup(0)	
dd 1D5h			
dd 0			
dd 1D6h, 3 dup(0)	
dd 1D7h			
dd 0			
dd 1D8h, 3 dup(0)	
dd 1D9h			
dd 0			
dd 1DAh, 3 dup(0)	
dd 1DBh			
dd 0			
dd 1DCh, 3 dup(0)	
dd 1DEh			
dd 0			
dd 1DFh, 3 dup(0)	
dd 1E0h			
dd 0			
dd 1E1h, 3 dup(0)	
dd 1E2h			
dd 0			
dd 1E3h, 3 dup(0)	
dd 1E4h			
dd 0			
dd 1E5h, 3 dup(0)	
dd 1E6h			
dd 0			
dd 1E7h, 3 dup(0)	
dd 1E8h			
dd 0			
dd 1E9h, 3 dup(0)	
dd 1EAh			
dd 0			
dd 1EBh, 3 dup(0)	
dd 1ECh			
dd 0			
dd 1EDh, 3 dup(0)	
dd 1EEh			
dd 0			
dd 1EFh, 3 dup(0)	
dd 1F0h			
dd 0			
dd 6Ah,	30Ch, 2	dup(0)	
dd 1F1h			
dd 0			
dd 1F3h, 3 dup(0)	
dd 1F2h			
dd 0			
dd 1F3h, 3 dup(0)	
dd 1F4h			
dd 0			
dd 1F5h, 3 dup(0)	
dd 1F6h			
dd 0			
dd 195h, 3 dup(0)	
dd 1F7h			
dd 0			
dd 1BFh, 3 dup(0)	
dd 1F8h			
dd 0			
dd 1F9h, 3 dup(0)	
dd 1FAh			
dd 0			
dd 1FBh, 3 dup(0)	
dd 1FCh			
dd 0			
dd 1FDh, 3 dup(0)	
dd 1FEh			
dd 0			
dd 1FFh, 3 dup(0)	
dd 200h			
dd 0			
dd 201h, 3 dup(0)	
dd 202h			
dd 0			
dd 203h, 3 dup(0)	
dd 204h			
dd 0			
dd 205h, 3 dup(0)	
dd 206h			
dd 0			
dd 207h, 3 dup(0)	
dd 208h			
dd 0			
dd 209h, 3 dup(0)	
dd 20Ah			
dd 0			
dd 20Bh, 3 dup(0)	
dd 20Ch			
dd 0			
dd 20Dh, 3 dup(0)	
dd 20Eh			
dd 0			
dd 20Fh, 3 dup(0)	
dd 210h			
dd 0			
dd 211h, 3 dup(0)	
dd 212h			
dd 0			
dd 213h, 3 dup(0)	
dd 214h			
dd 0			
dd 215h, 3 dup(0)	
dd 216h			
dd 0			
dd 217h, 3 dup(0)	
dd 218h			
dd 0			
dd 219h, 3 dup(0)	
dd 21Ah			
dd 0			
dd 21Bh, 3 dup(0)	
dd 21Ch			
dd 0			
dd 21Dh, 3 dup(0)	
dd 21Eh			
dd 0			
dd 21Fh, 3 dup(0)	
dd 220h			
dd 0			
dd 19Eh, 3 dup(0)	
dd 222h			
dd 0			
dd 223h, 3 dup(0)	
dd 224h			
dd 0			
dd 225h, 3 dup(0)	
dd 226h			
dd 0			
dd 227h, 3 dup(0)	
dd 228h			
dd 0			
dd 229h, 3 dup(0)	
dd 22Ah			
dd 0			
dd 22Bh, 3 dup(0)	
dd 22Ch			
dd 0			
dd 22Dh, 3 dup(0)	
dd 22Eh			
dd 0			
dd 22Fh, 3 dup(0)	
dd 230h			
dd 0			
dd 231h, 3 dup(0)	
dd 232h			
dd 0			
dd 233h, 3 dup(0)	
dd 345h			
dd 0			
dd 3B9h, 3 dup(0)	
dd 386h			
dd 0			
dd 3ACh, 3 dup(0)	
dd 388h			
dd 0			
dd 3ADh, 3 dup(0)	
dd 389h			
dd 0			
dd 3AEh, 3 dup(0)	
dd 38Ah			
dd 0			
dd 3AFh, 3 dup(0)	
dd 38Ch			
dd 0			
dd 3CCh, 3 dup(0)	
dd 38Eh			
dd 0			
dd 3CDh, 3 dup(0)	
dd 38Fh			
dd 0			
dd 3CEh, 3 dup(0)	
dd 390h			
dd 0			
dd 3B9h, 308h, 301h, 0	
dd 391h			
dd 0			
dd 3B1h, 3 dup(0)	
dd 392h			
dd 0			
dd 3B2h, 3 dup(0)	
dd 393h			
dd 0			
dd 3B3h, 3 dup(0)	
dd 394h			
dd 0			
dd 3B4h, 3 dup(0)	
dd 395h			
dd 0			
dd 3B5h, 3 dup(0)	
dd 396h			
dd 0			
dd 3B6h, 3 dup(0)	
dd 397h			
dd 0			
dd 3B7h, 3 dup(0)	
dd 398h			
dd 0			
dd 3B8h, 3 dup(0)	
dd 399h			
dd 0			
dd 3B9h, 3 dup(0)	
dd 39Ah			
dd 0			
dd 3BAh, 3 dup(0)	
dd 39Bh			
dd 0			
dd 3BBh, 3 dup(0)	
dd 39Ch			
dd 0			
dd 3BCh, 3 dup(0)	
dd 39Dh			
dd 0			
dd 3BDh, 3 dup(0)	
dd 39Eh			
dd 0			
dd 3BEh, 3 dup(0)	
dd 39Fh			
dd 0			
dd 3BFh, 3 dup(0)	
dd 3A0h			
dd 0			
dd 3C0h, 3 dup(0)	
dd 3A1h			
dd 0			
dd 3C1h, 3 dup(0)	
dd 3A3h			
dd 0			
dd 3C3h, 3 dup(0)	
dd 3A4h			
dd 0			
dd 3C4h, 3 dup(0)	
dd 3A5h			
dd 0			
dd 3C5h, 3 dup(0)	
dd 3A6h			
dd 0			
dd 3C6h, 3 dup(0)	
dd 3A7h			
dd 0			
dd 3C7h, 3 dup(0)	
dd 3A8h			
dd 0			
dd 3C8h, 3 dup(0)	
dd 3A9h			
dd 0			
dd 3C9h, 3 dup(0)	
dd 3AAh			
dd 0			
dd 3CAh, 3 dup(0)	
dd 3ABh			
dd 0			
dd 3CBh, 3 dup(0)	
dd 3B0h			
dd 0			
dd 3C5h, 308h, 301h, 0	
dd 3C2h			
dd 0			
dd 3C3h, 3 dup(0)	
dd 3D0h			
dd 0			
dd 3B2h, 3 dup(0)	
dd 3D1h			
dd 0			
dd 3B8h, 3 dup(0)	
dd 3D5h			
dd 0			
dd 3C6h, 3 dup(0)	
dd 3D6h			
dd 0			
dd 3C0h, 3 dup(0)	
dd 3D8h			
dd 0			
dd 3D9h, 3 dup(0)	
dd 3DAh			
dd 0			
dd 3DBh, 3 dup(0)	
dd 3DCh			
dd 0			
dd 3DDh, 3 dup(0)	
dd 3DEh			
dd 0			
dd 3DFh, 3 dup(0)	
dd 3E0h			
dd 0			
dd 3E1h, 3 dup(0)	
dd 3E2h			
dd 0			
dd 3E3h, 3 dup(0)	
dd 3E4h			
dd 0			
dd 3E5h, 3 dup(0)	
dd 3E6h			
dd 0			
dd 3E7h, 3 dup(0)	
dd 3E8h			
dd 0			
dd 3E9h, 3 dup(0)	
dd 3EAh			
dd 0			
dd 3EBh, 3 dup(0)	
dd 3ECh			
dd 0			
dd 3EDh, 3 dup(0)	
dd 3EEh			
dd 0			
dd 3EFh, 3 dup(0)	
dd 3F0h			
dd 0			
dd 3BAh, 3 dup(0)	
dd 3F1h			
dd 0			
dd 3C1h, 3 dup(0)	
dd 3F2h			
dd 0			
dd 3C3h, 3 dup(0)	
dd 3F4h			
dd 0			
dd 3B8h, 3 dup(0)	
dd 3F5h			
dd 0			
dd 3B5h, 3 dup(0)	
dd 400h			
dd 0			
dd 450h, 3 dup(0)	
dd 401h			
dd 0			
dd 451h, 3 dup(0)	
dd 402h			
dd 0			
dd 452h, 3 dup(0)	
dd 403h			
dd 0			
dd 453h, 3 dup(0)	
dd 404h			
dd 0			
dd 454h, 3 dup(0)	
dd 405h			
dd 0			
dd 455h, 3 dup(0)	
dd 406h			
dd 0			
dd 456h, 3 dup(0)	
dd 407h			
dd 0			
dd 457h, 3 dup(0)	
dd 408h			
dd 0			
dd 458h, 3 dup(0)	
dd 409h			
dd 0			
dd 459h, 3 dup(0)	
dd 40Ah			
dd 0			
dd 45Ah, 3 dup(0)	
dd 40Bh			
dd 0			
dd 45Bh, 3 dup(0)	
dd 40Ch			
dd 0			
dd 45Ch, 3 dup(0)	
dd 40Dh			
dd 0			
dd 45Dh, 3 dup(0)	
dd 40Eh			
dd 0			
dd 45Eh, 3 dup(0)	
dd 40Fh			
dd 0			
dd 45Fh, 3 dup(0)	
dd 410h			
dd 0			
dd 430h, 3 dup(0)	
dd 411h			
dd 0			
dd 431h, 3 dup(0)	
dd 412h			
dd 0			
dd 432h, 3 dup(0)	
dd 413h			
dd 0			
dd 433h, 3 dup(0)	
dd 414h			
dd 0			
dd 434h, 3 dup(0)	
dd 415h			
dd 0			
dd 435h, 3 dup(0)	
dd 416h			
dd 0			
dd 436h, 3 dup(0)	
dd 417h			
dd 0			
dd 437h, 3 dup(0)	
dd 418h			
dd 0			
dd 438h, 3 dup(0)	
dd 419h			
dd 0			
dd 439h, 3 dup(0)	
dd 41Ah			
dd 0			
dd 43Ah, 3 dup(0)	
dd 41Bh			
dd 0			
dd 43Bh, 3 dup(0)	
dd 41Ch			
dd 0			
dd 43Ch, 3 dup(0)	
dd 41Dh			
dd 0			
dd 43Dh, 3 dup(0)	
dd 41Eh			
dd 0			
dd 43Eh, 3 dup(0)	
dd 41Fh			
dd 0			
dd 43Fh, 3 dup(0)	
dd 420h			
dd 0			
dd 440h, 3 dup(0)	
dd 421h			
dd 0			
dd 441h, 3 dup(0)	
dd 422h			
dd 0			
dd 442h, 3 dup(0)	
dd 423h			
dd 0			
dd 443h, 3 dup(0)	
dd 424h			
dd 0			
dd 444h, 3 dup(0)	
dd 425h			
dd 0			
dd 445h, 3 dup(0)	
dd 426h			
dd 0			
dd 446h, 3 dup(0)	
dd 427h			
dd 0			
dd 447h, 3 dup(0)	
dd 428h			
dd 0			
dd 448h, 3 dup(0)	
dd 429h			
dd 0			
dd 449h, 3 dup(0)	
dd 42Ah			
dd 0			
dd 44Ah, 3 dup(0)	
dd 42Bh			
dd 0			
dd 44Bh, 3 dup(0)	
dd 42Ch			
dd 0			
dd 44Ch, 3 dup(0)	
dd 42Dh			
dd 0			
dd 44Dh, 3 dup(0)	
dd 42Eh			
dd 0			
dd 44Eh, 3 dup(0)	
dd 42Fh			
dd 0			
dd 44Fh, 3 dup(0)	
dd 460h			
dd 0			
dd 461h, 3 dup(0)	
dd 462h			
dd 0			
dd 463h, 3 dup(0)	
dd 464h			
dd 0			
dd 465h, 3 dup(0)	
dd 466h			
dd 0			
dd 467h, 3 dup(0)	
dd 468h			
dd 0			
dd 469h, 3 dup(0)	
dd 46Ah			
dd 0			
dd 46Bh, 3 dup(0)	
dd 46Ch			
dd 0			
dd 46Dh, 3 dup(0)	
dd 46Eh			
dd 0			
dd 46Fh, 3 dup(0)	
dd 470h			
dd 0			
dd 471h, 3 dup(0)	
dd 472h			
dd 0			
dd 473h, 3 dup(0)	
dd 474h			
dd 0			
dd 475h, 3 dup(0)	
dd 476h			
dd 0			
dd 477h, 3 dup(0)	
dd 478h			
dd 0			
dd 479h, 3 dup(0)	
dd 47Ah			
dd 0			
dd 47Bh, 3 dup(0)	
dd 47Ch			
dd 0			
dd 47Dh, 3 dup(0)	
dd 47Eh			
dd 0			
dd 47Fh, 3 dup(0)	
dd 480h			
dd 0			
dd 481h, 3 dup(0)	
dd 48Ah			
dd 0			
dd 48Bh, 3 dup(0)	
dd 48Ch			
dd 0			
dd 48Dh, 3 dup(0)	
dd 48Eh			
dd 0			
dd 48Fh, 3 dup(0)	
dd 490h			
dd 0			
dd 491h, 3 dup(0)	
dd 492h			
dd 0			
dd 493h, 3 dup(0)	
dd 494h			
dd 0			
dd 495h, 3 dup(0)	
dd 496h			
dd 0			
dd 497h, 3 dup(0)	
dd 498h			
dd 0			
dd 499h, 3 dup(0)	
dd 49Ah			
dd 0			
dd 49Bh, 3 dup(0)	
dd 49Ch			
dd 0			
dd 49Dh, 3 dup(0)	
dd 49Eh			
dd 0			
dd 49Fh, 3 dup(0)	
dd 4A0h			
dd 0			
dd 4A1h, 3 dup(0)	
dd 4A2h			
dd 0			
dd 4A3h, 3 dup(0)	
dd 4A4h			
dd 0			
dd 4A5h, 3 dup(0)	
dd 4A6h			
dd 0			
dd 4A7h, 3 dup(0)	
dd 4A8h			
dd 0			
dd 4A9h, 3 dup(0)	
dd 4AAh			
dd 0			
dd 4ABh, 3 dup(0)	
dd 4ACh			
dd 0			
dd 4ADh, 3 dup(0)	
dd 4AEh			
dd 0			
dd 4AFh, 3 dup(0)	
dd 4B0h			
dd 0			
dd 4B1h, 3 dup(0)	
dd 4B2h			
dd 0			
dd 4B3h, 3 dup(0)	
dd 4B4h			
dd 0			
dd 4B5h, 3 dup(0)	
dd 4B6h			
dd 0			
dd 4B7h, 3 dup(0)	
dd 4B8h			
dd 0			
dd 4B9h, 3 dup(0)	
dd 4BAh			
dd 0			
dd 4BBh, 3 dup(0)	
dd 4BCh			
dd 0			
dd 4BDh, 3 dup(0)	
dd 4BEh			
dd 0			
dd 4BFh, 3 dup(0)	
dd 4C1h			
dd 0			
dd 4C2h, 3 dup(0)	
dd 4C3h			
dd 0			
dd 4C4h, 3 dup(0)	
dd 4C5h			
dd 0			
dd 4C6h, 3 dup(0)	
dd 4C7h			
dd 0			
dd 4C8h, 3 dup(0)	
dd 4C9h			
dd 0			
dd 4CAh, 3 dup(0)	
dd 4CBh			
dd 0			
dd 4CCh, 3 dup(0)	
dd 4CDh			
dd 0			
dd 4CEh, 3 dup(0)	
dd 4D0h			
dd 0			
dd 4D1h, 3 dup(0)	
dd 4D2h			
dd 0			
dd 4D3h, 3 dup(0)	
dd 4D4h			
dd 0			
dd 4D5h, 3 dup(0)	
dd 4D6h			
dd 0			
dd 4D7h, 3 dup(0)	
dd 4D8h			
dd 0			
dd 4D9h, 3 dup(0)	
dd 4DAh			
dd 0			
dd 4DBh, 3 dup(0)	
dd 4DCh			
dd 0			
dd 4DDh, 3 dup(0)	
dd 4DEh			
dd 0			
dd 4DFh, 3 dup(0)	
dd 4E0h			
dd 0			
dd 4E1h, 3 dup(0)	
dd 4E2h			
dd 0			
dd 4E3h, 3 dup(0)	
dd 4E4h			
dd 0			
dd 4E5h, 3 dup(0)	
dd 4E6h			
dd 0			
dd 4E7h, 3 dup(0)	
dd 4E8h			
dd 0			
dd 4E9h, 3 dup(0)	
dd 4EAh			
dd 0			
dd 4EBh, 3 dup(0)	
dd 4ECh			
dd 0			
dd 4EDh, 3 dup(0)	
dd 4EEh			
dd 0			
dd 4EFh, 3 dup(0)	
dd 4F0h			
dd 0			
dd 4F1h, 3 dup(0)	
dd 4F2h			
dd 0			
dd 4F3h, 3 dup(0)	
dd 4F4h			
dd 0			
dd 4F5h, 3 dup(0)	
dd 4F8h			
dd 0			
dd 4F9h, 3 dup(0)	
dd 500h			
dd 0			
dd 501h, 3 dup(0)	
dd 502h			
dd 0			
dd 503h, 3 dup(0)	
dd 504h			
dd 0			
dd 505h, 3 dup(0)	
dd 506h			
dd 0			
dd 507h, 3 dup(0)	
dd 508h			
dd 0			
dd 509h, 3 dup(0)	
dd 50Ah			
dd 0			
dd 50Bh, 3 dup(0)	
dd 50Ch			
dd 0			
dd 50Dh, 3 dup(0)	
dd 50Eh			
dd 0			
dd 50Fh, 3 dup(0)	
dd 531h			
dd 0			
dd 561h, 3 dup(0)	
dd 532h			
dd 0			
dd 562h, 3 dup(0)	
dd 533h			
dd 0			
dd 563h, 3 dup(0)	
dd 534h			
dd 0			
dd 564h, 3 dup(0)	
dd 535h			
dd 0			
dd 565h, 3 dup(0)	
dd 536h			
dd 0			
dd 566h, 3 dup(0)	
dd 537h			
dd 0			
dd 567h, 3 dup(0)	
dd 538h			
dd 0			
dd 568h, 3 dup(0)	
dd 539h			
dd 0			
dd 569h, 3 dup(0)	
dd 53Ah			
dd 0			
dd 56Ah, 3 dup(0)	
dd 53Bh			
dd 0			
dd 56Bh, 3 dup(0)	
dd 53Ch			
dd 0			
dd 56Ch, 3 dup(0)	
dd 53Dh			
dd 0			
dd 56Dh, 3 dup(0)	
dd 53Eh			
dd 0			
dd 56Eh, 3 dup(0)	
dd 53Fh			
dd 0			
dd 56Fh, 3 dup(0)	
dd 540h			
dd 0			
dd 570h, 3 dup(0)	
dd 541h			
dd 0			
dd 571h, 3 dup(0)	
dd 542h			
dd 0			
dd 572h, 3 dup(0)	
dd 543h			
dd 0			
dd 573h, 3 dup(0)	
dd 544h			
dd 0			
dd 574h, 3 dup(0)	
dd 545h			
dd 0			
dd 575h, 3 dup(0)	
dd 546h			
dd 0			
dd 576h, 3 dup(0)	
dd 547h			
dd 0			
dd 577h, 3 dup(0)	
dd 548h			
dd 0			
dd 578h, 3 dup(0)	
dd 549h			
dd 0			
dd 579h, 3 dup(0)	
dd 54Ah			
dd 0			
dd 57Ah, 3 dup(0)	
dd 54Bh			
dd 0			
dd 57Bh, 3 dup(0)	
dd 54Ch			
dd 0			
dd 57Ch, 3 dup(0)	
dd 54Dh			
dd 0			
dd 57Dh, 3 dup(0)	
dd 54Eh			
dd 0			
dd 57Eh, 3 dup(0)	
dd 54Fh			
dd 0			
dd 57Fh, 3 dup(0)	
dd 550h			
dd 0			
dd 580h, 3 dup(0)	
dd 551h			
dd 0			
dd 581h, 3 dup(0)	
dd 552h			
dd 0			
dd 582h, 3 dup(0)	
dd 553h			
dd 0			
dd 583h, 3 dup(0)	
dd 554h			
dd 0			
dd 584h, 3 dup(0)	
dd 555h			
dd 0			
dd 585h, 3 dup(0)	
dd 556h			
dd 0			
dd 586h, 3 dup(0)	
dd 587h			
dd 0			
dd 565h, 582h, 2 dup(0)	
dd 1E00h		
dd 0			
dd 1E01h, 3 dup(0)	
dd 1E02h		
dd 0			
dd 1E03h, 3 dup(0)	
dd 1E04h		
dd 0			
dd 1E05h, 3 dup(0)	
dd 1E06h		
dd 0			
dd 1E07h, 3 dup(0)	
dd 1E08h		
dd 0			
dd 1E09h, 3 dup(0)	
dd 1E0Ah		
dd 0			
dd 1E0Bh, 3 dup(0)	
dd 1E0Ch		
dd 0			
dd 1E0Dh, 3 dup(0)	
dd 1E0Eh		
dd 0			
dd 1E0Fh, 3 dup(0)	
dd 1E10h		
dd 0			
dd 1E11h, 3 dup(0)	
dd 1E12h		
dd 0			
dd 1E13h, 3 dup(0)	
dd 1E14h		
dd 0			
dd 1E15h, 3 dup(0)	
dd 1E16h		
dd 0			
dd 1E17h, 3 dup(0)	
dd 1E18h		
dd 0			
dd 1E19h, 3 dup(0)	
dd 1E1Ah		
dd 0			
dd 1E1Bh, 3 dup(0)	
dd 1E1Ch		
dd 0			
dd 1E1Dh, 3 dup(0)	
dd 1E1Eh		
dd 0			
dd 1E1Fh, 3 dup(0)	
dd 1E20h		
dd 0			
dd 1E21h, 3 dup(0)	
dd 1E22h		
dd 0			
dd 1E23h, 3 dup(0)	
dd 1E24h		
dd 0			
dd 1E25h, 3 dup(0)	
dd 1E26h		
dd 0			
dd 1E27h, 3 dup(0)	
dd 1E28h		
dd 0			
dd 1E29h, 3 dup(0)	
dd 1E2Ah		
dd 0			
dd 1E2Bh, 3 dup(0)	
dd 1E2Ch		
dd 0			
dd 1E2Dh, 3 dup(0)	
dd 1E2Eh		
dd 0			
dd 1E2Fh, 3 dup(0)	
dd 1E30h		
dd 0			
dd 1E31h, 3 dup(0)	
dd 1E32h		
dd 0			
dd 1E33h, 3 dup(0)	
dd 1E34h		
dd 0			
dd 1E35h, 3 dup(0)	
dd 1E36h		
dd 0			
dd 1E37h, 3 dup(0)	
dd 1E38h		
dd 0			
dd 1E39h, 3 dup(0)	
dd 1E3Ah		
dd 0			
dd 1E3Bh, 3 dup(0)	
dd 1E3Ch		
dd 0			
dd 1E3Dh, 3 dup(0)	
dd 1E3Eh		
dd 0			
dd 1E3Fh, 3 dup(0)	
dd 1E40h		
dd 0			
dd 1E41h, 3 dup(0)	
dd 1E42h		
dd 0			
dd 1E43h, 3 dup(0)	
dd 1E44h		
dd 0			
dd 1E45h, 3 dup(0)	
dd 1E46h		
dd 0			
dd 1E47h, 3 dup(0)	
dd 1E48h		
dd 0			
dd 1E49h, 3 dup(0)	
dd 1E4Ah		
dd 0			
dd 1E4Bh, 3 dup(0)	
dd 1E4Ch		
dd 0			
dd 1E4Dh, 3 dup(0)	
dd 1E4Eh		
dd 0			
dd 1E4Fh, 3 dup(0)	
dd 1E50h		
dd 0			
dd 1E51h, 3 dup(0)	
dd 1E52h		
dd 0			
dd 1E53h, 3 dup(0)	
dd 1E54h		
dd 0			
dd 1E55h, 3 dup(0)	
dd 1E56h		
dd 0			
dd 1E57h, 3 dup(0)	
dd 1E58h		
dd 0			
dd 1E59h, 3 dup(0)	
dd 1E5Ah		
dd 0			
dd 1E5Bh, 3 dup(0)	
dd 1E5Ch		
dd 0			
dd 1E5Dh, 3 dup(0)	
dd 1E5Eh		
dd 0			
dd 1E5Fh, 3 dup(0)	
dd 1E60h		
dd 0			
dd 1E61h, 3 dup(0)	
dd 1E62h		
dd 0			
dd 1E63h, 3 dup(0)	
dd 1E64h		
dd 0			
dd 1E65h, 3 dup(0)	
dd 1E66h		
dd 0			
dd 1E67h, 3 dup(0)	
dd 1E68h		
dd 0			
dd 1E69h, 3 dup(0)	
dd 1E6Ah		
dd 0			
dd 1E6Bh, 3 dup(0)	
dd 1E6Ch		
dd 0			
dd 1E6Dh, 3 dup(0)	
dd 1E6Eh		
dd 0			
dd 1E6Fh, 3 dup(0)	
dd 1E70h		
dd 0			
dd 1E71h, 3 dup(0)	
dd 1E72h		
dd 0			
dd 1E73h, 3 dup(0)	
dd 1E74h		
dd 0			
dd 1E75h, 3 dup(0)	
dd 1E76h		
dd 0			
dd 1E77h, 3 dup(0)	
dd 1E78h		
dd 0			
dd 1E79h, 3 dup(0)	
dd 1E7Ah		
dd 0			
dd 1E7Bh, 3 dup(0)	
dd 1E7Ch		
dd 0			
dd 1E7Dh, 3 dup(0)	
dd 1E7Eh		
dd 0			
dd 1E7Fh, 3 dup(0)	
dd 1E80h		
dd 0			
dd 1E81h, 3 dup(0)	
dd 1E82h		
dd 0			
dd 1E83h, 3 dup(0)	
dd 1E84h		
dd 0			
dd 1E85h, 3 dup(0)	
dd 1E86h		
dd 0			
dd 1E87h, 3 dup(0)	
dd 1E88h		
dd 0			
dd 1E89h, 3 dup(0)	
dd 1E8Ah		
dd 0			
dd 1E8Bh, 3 dup(0)	
dd 1E8Ch		
dd 0			
dd 1E8Dh, 3 dup(0)	
dd 1E8Eh		
dd 0			
dd 1E8Fh, 3 dup(0)	
dd 1E90h		
dd 0			
dd 1E91h, 3 dup(0)	
dd 1E92h		
dd 0			
dd 1E93h, 3 dup(0)	
dd 1E94h		
dd 0			
dd 1E95h, 3 dup(0)	
dd 1E96h		
dd 0			
dd 68h,	331h, 2	dup(0)	
dd 1E97h		
dd 0			
dd 74h,	308h, 2	dup(0)	
dd 1E98h		
dd 0			
dd 77h,	30Ah, 2	dup(0)	
dd 1E99h		
dd 0			
dd 79h,	30Ah, 2	dup(0)	
dd 1E9Ah		
dd 0			
dd 61h,	2BEh, 2	dup(0)	
dd 1E9Bh		
dd 0			
dd 1E61h, 3 dup(0)	
dd 1EA0h		
dd 0			
dd 1EA1h, 3 dup(0)	
dd 1EA2h		
dd 0			
dd 1EA3h, 3 dup(0)	
dd 1EA4h		
dd 0			
dd 1EA5h, 3 dup(0)	
dd 1EA6h		
dd 0			
dd 1EA7h, 3 dup(0)	
dd 1EA8h		
dd 0			
dd 1EA9h, 3 dup(0)	
dd 1EAAh		
dd 0			
dd 1EABh, 3 dup(0)	
dd 1EACh		
dd 0			
dd 1EADh, 3 dup(0)	
dd 1EAEh		
dd 0			
dd 1EAFh, 3 dup(0)	
dd 1EB0h		
dd 0			
dd 1EB1h, 3 dup(0)	
dd 1EB2h		
dd 0			
dd 1EB3h, 3 dup(0)	
dd 1EB4h		
dd 0			
dd 1EB5h, 3 dup(0)	
dd 1EB6h		
dd 0			
dd 1EB7h, 3 dup(0)	
dd 1EB8h		
dd 0			
dd 1EB9h, 3 dup(0)	
dd 1EBAh		
dd 0			
dd 1EBBh, 3 dup(0)	
dd 1EBCh		
dd 0			
dd 1EBDh, 3 dup(0)	
dd 1EBEh		
dd 0			
dd 1EBFh, 3 dup(0)	
dd 1EC0h		
dd 0			
dd 1EC1h, 3 dup(0)	
dd 1EC2h		
dd 0			
dd 1EC3h, 3 dup(0)	
dd 1EC4h		
dd 0			
dd 1EC5h, 3 dup(0)	
dd 1EC6h		
dd 0			
dd 1EC7h, 3 dup(0)	
dd 1EC8h		
dd 0			
dd 1EC9h, 3 dup(0)	
dd 1ECAh		
dd 0			
dd 1ECBh, 3 dup(0)	
dd 1ECCh		
dd 0			
dd 1ECDh, 3 dup(0)	
dd 1ECEh		
dd 0			
dd 1ECFh, 3 dup(0)	
dd 1ED0h		
dd 0			
dd 1ED1h, 3 dup(0)	
dd 1ED2h		
dd 0			
dd 1ED3h, 3 dup(0)	
dd 1ED4h		
dd 0			
dd 1ED5h, 3 dup(0)	
dd 1ED6h		
dd 0			
dd 1ED7h, 3 dup(0)	
dd 1ED8h		
dd 0			
dd 1ED9h, 3 dup(0)	
dd 1EDAh		
dd 0			
dd 1EDBh, 3 dup(0)	
dd 1EDCh		
dd 0			
dd 1EDDh, 3 dup(0)	
dd 1EDEh		
dd 0			
dd 1EDFh, 3 dup(0)	
dd 1EE0h		
dd 0			
dd 1EE1h, 3 dup(0)	
dd 1EE2h		
dd 0			
dd 1EE3h, 3 dup(0)	
dd 1EE4h		
dd 0			
dd 1EE5h, 3 dup(0)	
dd 1EE6h		
dd 0			
dd 1EE7h, 3 dup(0)	
dd 1EE8h		
dd 0			
dd 1EE9h, 3 dup(0)	
dd 1EEAh		
dd 0			
dd 1EEBh, 3 dup(0)	
dd 1EECh		
dd 0			
dd 1EEDh, 3 dup(0)	
dd 1EEEh		
dd 0			
dd 1EEFh, 3 dup(0)	
dd 1EF0h		
dd 0			
dd 1EF1h, 3 dup(0)	
dd 1EF2h		
dd 0			
dd 1EF3h, 3 dup(0)	
dd 1EF4h		
dd 0			
dd 1EF5h, 3 dup(0)	
dd 1EF6h		
dd 0			
dd 1EF7h, 3 dup(0)	
dd 1EF8h		
dd 0			
dd 1EF9h, 3 dup(0)	
dd 1F08h		
dd 0			
dd 1F00h, 3 dup(0)	
dd 1F09h		
dd 0			
dd 1F01h, 3 dup(0)	
dd 1F0Ah		
dd 0			
dd 1F02h, 3 dup(0)	
dd 1F0Bh		
dd 0			
dd 1F03h, 3 dup(0)	
dd 1F0Ch		
dd 0			
dd 1F04h, 3 dup(0)	
dd 1F0Dh		
dd 0			
dd 1F05h, 3 dup(0)	
dd 1F0Eh		
dd 0			
dd 1F06h, 3 dup(0)	
dd 1F0Fh		
dd 0			
dd 1F07h, 3 dup(0)	
dd 1F18h		
dd 0			
dd 1F10h, 3 dup(0)	
dd 1F19h		
dd 0			
dd 1F11h, 3 dup(0)	
dd 1F1Ah		
dd 0			
dd 1F12h, 3 dup(0)	
dd 1F1Bh		
dd 0			
dd 1F13h, 3 dup(0)	
dd 1F1Ch		
dd 0			
dd 1F14h, 3 dup(0)	
dd 1F1Dh		
dd 0			
dd 1F15h, 3 dup(0)	
dd 1F28h		
dd 0			
dd 1F20h, 3 dup(0)	
dd 1F29h		
dd 0			
dd 1F21h, 3 dup(0)	
dd 1F2Ah		
dd 0			
dd 1F22h, 3 dup(0)	
dd 1F2Bh		
dd 0			
dd 1F23h, 3 dup(0)	
dd 1F2Ch		
dd 0			
dd 1F24h, 3 dup(0)	
dd 1F2Dh		
dd 0			
dd 1F25h, 3 dup(0)	
dd 1F2Eh		
dd 0			
dd 1F26h, 3 dup(0)	
dd 1F2Fh		
dd 0			
dd 1F27h, 3 dup(0)	
dd 1F38h		
dd 0			
dd 1F30h, 3 dup(0)	
dd 1F39h		
dd 0			
dd 1F31h, 3 dup(0)	
dd 1F3Ah		
dd 0			
dd 1F32h, 3 dup(0)	
dd 1F3Bh		
dd 0			
dd 1F33h, 3 dup(0)	
dd 1F3Ch		
dd 0			
dd 1F34h, 3 dup(0)	
dd 1F3Dh		
dd 0			
dd 1F35h, 3 dup(0)	
dd 1F3Eh		
dd 0			
dd 1F36h, 3 dup(0)	
dd 1F3Fh		
dd 0			
dd 1F37h, 3 dup(0)	
dd 1F48h		
dd 0			
dd 1F40h, 3 dup(0)	
dd 1F49h		
dd 0			
dd 1F41h, 3 dup(0)	
dd 1F4Ah		
dd 0			
dd 1F42h, 3 dup(0)	
dd 1F4Bh		
dd 0			
dd 1F43h, 3 dup(0)	
dd 1F4Ch		
dd 0			
dd 1F44h, 3 dup(0)	
dd 1F4Dh		
dd 0			
dd 1F45h, 3 dup(0)	
dd 1F50h		
dd 0			
dd 3C5h, 313h, 2 dup(0)	
dd 1F52h		
dd 0			
dd 3C5h, 313h, 300h, 0	
dd 1F54h		
dd 0			
dd 3C5h, 313h, 301h, 0	
dd 1F56h		
dd 0			
dd 3C5h, 313h, 342h, 0	
dd 1F59h		
dd 0			
dd 1F51h, 3 dup(0)	
dd 1F5Bh		
dd 0			
dd 1F53h, 3 dup(0)	
dd 1F5Dh		
dd 0			
dd 1F55h, 3 dup(0)	
dd 1F5Fh		
dd 0			
dd 1F57h, 3 dup(0)	
dd 1F68h		
dd 0			
dd 1F60h, 3 dup(0)	
dd 1F69h		
dd 0			
dd 1F61h, 3 dup(0)	
dd 1F6Ah		
dd 0			
dd 1F62h, 3 dup(0)	
dd 1F6Bh		
dd 0			
dd 1F63h, 3 dup(0)	
dd 1F6Ch		
dd 0			
dd 1F64h, 3 dup(0)	
dd 1F6Dh		
dd 0			
dd 1F65h, 3 dup(0)	
dd 1F6Eh		
dd 0			
dd 1F66h, 3 dup(0)	
dd 1F6Fh		
dd 0			
dd 1F67h, 3 dup(0)	
dd 1F80h		
dd 0			
dd 1F00h, 3B9h,	2 dup(0)
dd 1F81h		
dd 0			
dd 1F01h, 3B9h,	2 dup(0)
dd 1F82h		
dd 0			
dd 1F02h, 3B9h,	2 dup(0)
dd 1F83h		
dd 0			
dd 1F03h, 3B9h,	2 dup(0)
dd 1F84h		
dd 0			
dd 1F04h, 3B9h,	2 dup(0)
dd 1F85h		
dd 0			
dd 1F05h, 3B9h,	2 dup(0)
dd 1F86h		
dd 0			
dd 1F06h, 3B9h,	2 dup(0)
dd 1F87h		
dd 0			
dd 1F07h, 3B9h,	2 dup(0)
dd 1F88h		
dd 0			
dd 1F00h, 3B9h,	2 dup(0)
dd 1F89h		
dd 0			
dd 1F01h, 3B9h,	2 dup(0)
dd 1F8Ah		
dd 0			
dd 1F02h, 3B9h,	2 dup(0)
dd 1F8Bh		
dd 0			
dd 1F03h, 3B9h,	2 dup(0)
dd 1F8Ch		
dd 0			
dd 1F04h, 3B9h,	2 dup(0)
dd 1F8Dh		
dd 0			
dd 1F05h, 3B9h,	2 dup(0)
dd 1F8Eh		
dd 0			
dd 1F06h, 3B9h,	2 dup(0)
dd 1F8Fh		
dd 0			
dd 1F07h, 3B9h,	2 dup(0)
dd 1F90h		
dd 0			
dd 1F20h, 3B9h,	2 dup(0)
dd 1F91h		
dd 0			
dd 1F21h, 3B9h,	2 dup(0)
dd 1F92h		
dd 0			
dd 1F22h, 3B9h,	2 dup(0)
dd 1F93h		
dd 0			
dd 1F23h, 3B9h,	2 dup(0)
dd 1F94h		
dd 0			
dd 1F24h, 3B9h,	2 dup(0)
dd 1F95h		
dd 0			
dd 1F25h, 3B9h,	2 dup(0)
dd 1F96h		
dd 0			
dd 1F26h, 3B9h,	2 dup(0)
dd 1F97h		
dd 0			
dd 1F27h, 3B9h,	2 dup(0)
dd 1F98h		
dd 0			
dd 1F20h, 3B9h,	2 dup(0)
dd 1F99h		
dd 0			
dd 1F21h, 3B9h,	2 dup(0)
dd 1F9Ah		
dd 0			
dd 1F22h, 3B9h,	2 dup(0)
dd 1F9Bh		
dd 0			
dd 1F23h, 3B9h,	2 dup(0)
dd 1F9Ch		
dd 0			
dd 1F24h, 3B9h,	2 dup(0)
dd 1F9Dh		
dd 0			
dd 1F25h, 3B9h,	2 dup(0)
dd 1F9Eh		
dd 0			
dd 1F26h, 3B9h,	2 dup(0)
dd 1F9Fh		
dd 0			
dd 1F27h, 3B9h,	2 dup(0)
dd 1FA0h		
dd 0			
dd 1F60h, 3B9h,	2 dup(0)
dd 1FA1h		
dd 0			
dd 1F61h, 3B9h,	2 dup(0)
dd 1FA2h		
dd 0			
dd 1F62h, 3B9h,	2 dup(0)
dd 1FA3h		
dd 0			
dd 1F63h, 3B9h,	2 dup(0)
dd 1FA4h		
dd 0			
dd 1F64h, 3B9h,	2 dup(0)
dd 1FA5h		
dd 0			
dd 1F65h, 3B9h,	2 dup(0)
dd 1FA6h		
dd 0			
dd 1F66h, 3B9h,	2 dup(0)
dd 1FA7h		
dd 0			
dd 1F67h, 3B9h,	2 dup(0)
dd 1FA8h		
dd 0			
dd 1F60h, 3B9h,	2 dup(0)
dd 1FA9h		
dd 0			
dd 1F61h, 3B9h,	2 dup(0)
dd 1FAAh		
dd 0			
dd 1F62h, 3B9h,	2 dup(0)
dd 1FABh		
dd 0			
dd 1F63h, 3B9h,	2 dup(0)
dd 1FACh		
dd 0			
dd 1F64h, 3B9h,	2 dup(0)
dd 1FADh		
dd 0			
dd 1F65h, 3B9h,	2 dup(0)
dd 1FAEh		
dd 0			
dd 1F66h, 3B9h,	2 dup(0)
dd 1FAFh		
dd 0			
dd 1F67h, 3B9h,	2 dup(0)
dd 1FB2h		
dd 0			
dd 1F70h, 3B9h,	2 dup(0)
dd 1FB3h		
dd 0			
dd 3B1h, 3B9h, 2 dup(0)	
dd 1FB4h		
dd 0			
dd 3ACh, 3B9h, 2 dup(0)	
dd 1FB6h		
dd 0			
dd 3B1h, 342h, 2 dup(0)	
dd 1FB7h		
dd 0			
dd 3B1h, 342h, 3B9h, 0	
dd 1FB8h		
dd 0			
dd 1FB0h, 3 dup(0)	
dd 1FB9h		
dd 0			
dd 1FB1h, 3 dup(0)	
dd 1FBAh		
dd 0			
dd 1F70h, 3 dup(0)	
dd 1FBBh		
dd 0			
dd 1F71h, 3 dup(0)	
dd 1FBCh		
dd 0			
dd 3B1h, 3B9h, 2 dup(0)	
dd 1FBEh		
dd 0			
dd 3B9h, 3 dup(0)	
dd 1FC2h		
dd 0			
dd 1F74h, 3B9h,	2 dup(0)
dd 1FC3h		
dd 0			
dd 3B7h, 3B9h, 2 dup(0)	
dd 1FC4h		
dd 0			
dd 3AEh, 3B9h, 2 dup(0)	
dd 1FC6h		
dd 0			
dd 3B7h, 342h, 2 dup(0)	
dd 1FC7h		
dd 0			
dd 3B7h, 342h, 3B9h, 0	
dd 1FC8h		
dd 0			
dd 1F72h, 3 dup(0)	
dd 1FC9h		
dd 0			
dd 1F73h, 3 dup(0)	
dd 1FCAh		
dd 0			
dd 1F74h, 3 dup(0)	
dd 1FCBh		
dd 0			
dd 1F75h, 3 dup(0)	
dd 1FCCh		
dd 0			
dd 3B7h, 3B9h, 2 dup(0)	
dd 1FD2h		
dd 0			
dd 3B9h, 308h, 300h, 0	
dd 1FD3h		
dd 0			
dd 3B9h, 308h, 301h, 0	
dd 1FD6h		
dd 0			
dd 3B9h, 342h, 2 dup(0)	
dd 1FD7h		
dd 0			
dd 3B9h, 308h, 342h, 0	
dd 1FD8h		
dd 0			
dd 1FD0h, 3 dup(0)	
dd 1FD9h		
dd 0			
dd 1FD1h, 3 dup(0)	
dd 1FDAh		
dd 0			
dd 1F76h, 3 dup(0)	
dd 1FDBh		
dd 0			
dd 1F77h, 3 dup(0)	
dd 1FE2h		
dd 0			
dd 3C5h, 308h, 300h, 0	
dd 1FE3h		
dd 0			
dd 3C5h, 308h, 301h, 0	
dd 1FE4h		
dd 0			
dd 3C1h, 313h, 2 dup(0)	
dd 1FE6h		
dd 0			
dd 3C5h, 342h, 2 dup(0)	
dd 1FE7h		
dd 0			
dd 3C5h, 308h, 342h, 0	
dd 1FE8h		
dd 0			
dd 1FE0h, 3 dup(0)	
dd 1FE9h		
dd 0			
dd 1FE1h, 3 dup(0)	
dd 1FEAh		
dd 0			
dd 1F7Ah, 3 dup(0)	
dd 1FEBh		
dd 0			
dd 1F7Bh, 3 dup(0)	
dd 1FECh		
dd 0			
dd 1FE5h, 3 dup(0)	
dd 1FF2h		
dd 0			
dd 1F7Ch, 3B9h,	2 dup(0)
dd 1FF3h		
dd 0			
dd 3C9h, 3B9h, 2 dup(0)	
dd 1FF4h		
dd 0			
dd 3CEh, 3B9h, 2 dup(0)	
dd 1FF6h		
dd 0			
dd 3C9h, 342h, 2 dup(0)	
dd 1FF7h		
dd 0			
dd 3C9h, 342h, 3B9h, 0	
dd 1FF8h		
dd 0			
dd 1F78h, 3 dup(0)	
dd 1FF9h		
dd 0			
dd 1F79h, 3 dup(0)	
dd 1FFAh		
dd 0			
dd 1F7Ch, 3 dup(0)	
dd 1FFBh		
dd 0			
dd 1F7Dh, 3 dup(0)	
dd 1FFCh		
dd 0			
dd 3C9h, 3B9h, 2 dup(0)	
dd 2126h		
dd 0			
dd 3C9h, 3 dup(0)	
dd 212Ah		
dd 0			
dd 6Bh,	3 dup(0)	
dd 212Bh		
dd 0			
dd 0E5h, 3 dup(0)	
dd 2160h		
dd 0			
dd 2170h, 3 dup(0)	
dd 2161h		
dd 0			
dd 2171h, 3 dup(0)	
dd 2162h		
dd 0			
dd 2172h, 3 dup(0)	
dd 2163h		
dd 0			
dd 2173h, 3 dup(0)	
dd 2164h		
dd 0			
dd 2174h, 3 dup(0)	
dd 2165h		
dd 0			
dd 2175h, 3 dup(0)	
dd 2166h		
dd 0			
dd 2176h, 3 dup(0)	
dd 2167h		
dd 0			
dd 2177h, 3 dup(0)	
dd 2168h		
dd 0			
dd 2178h, 3 dup(0)	
dd 2169h		
dd 0			
dd 2179h, 3 dup(0)	
dd 216Ah		
dd 0			
dd 217Ah, 3 dup(0)	
dd 216Bh		
dd 0			
dd 217Bh, 3 dup(0)	
dd 216Ch		
dd 0			
dd 217Ch, 3 dup(0)	
dd 216Dh		
dd 0			
dd 217Dh, 3 dup(0)	
dd 216Eh		
dd 0			
dd 217Eh, 3 dup(0)	
dd 216Fh		
dd 0			
dd 217Fh, 3 dup(0)	
dd 24B6h		
dd 0			
dd 24D0h, 3 dup(0)	
dd 24B7h		
dd 0			
dd 24D1h, 3 dup(0)	
dd 24B8h		
dd 0			
dd 24D2h, 3 dup(0)	
dd 24B9h		
dd 0			
dd 24D3h, 3 dup(0)	
dd 24BAh		
dd 0			
dd 24D4h, 3 dup(0)	
dd 24BBh		
dd 0			
dd 24D5h, 3 dup(0)	
dd 24BCh		
dd 0			
dd 24D6h, 3 dup(0)	
dd 24BDh		
dd 0			
dd 24D7h, 3 dup(0)	
dd 24BEh		
dd 0			
dd 24D8h, 3 dup(0)	
dd 24BFh		
dd 0			
dd 24D9h, 3 dup(0)	
dd 24C0h		
dd 0			
dd 24DAh, 3 dup(0)	
dd 24C1h		
dd 0			
dd 24DBh, 3 dup(0)	
dd 24C2h		
dd 0			
dd 24DCh, 3 dup(0)	
dd 24C3h		
dd 0			
dd 24DDh, 3 dup(0)	
dd 24C4h		
dd 0			
dd 24DEh, 3 dup(0)	
dd 24C5h		
dd 0			
dd 24DFh, 3 dup(0)	
dd 24C6h		
dd 0			
dd 24E0h, 3 dup(0)	
dd 24C7h		
dd 0			
dd 24E1h, 3 dup(0)	
dd 24C8h		
dd 0			
dd 24E2h, 3 dup(0)	
dd 24C9h		
dd 0			
dd 24E3h, 3 dup(0)	
dd 24CAh		
dd 0			
dd 24E4h, 3 dup(0)	
dd 24CBh		
dd 0			
dd 24E5h, 3 dup(0)	
dd 24CCh		
dd 0			
dd 24E6h, 3 dup(0)	
dd 24CDh		
dd 0			
dd 24E7h, 3 dup(0)	
dd 24CEh		
dd 0			
dd 24E8h, 3 dup(0)	
dd 24CFh		
dd 0			
dd 24E9h, 3 dup(0)	
dd 0FB00h		
dd 0			
dd 2 dup(66h), 2 dup(0)	
dd 0FB01h		
dd 0			
dd 66h,	69h, 2 dup(0)	
dd 0FB02h		
dd 0			
dd 66h,	6Ch, 2 dup(0)	
dd 0FB03h		
dd 0			
dd 2 dup(66h), 69h, 0	
dd 0FB04h		
dd 0			
dd 2 dup(66h), 6Ch, 0	
dd 0FB05h		
dd 0			
dd 73h,	74h, 2 dup(0)	
dd 0FB06h		
dd 0			
dd 73h,	74h, 2 dup(0)	
dd 0FB13h		
dd 0			
dd 574h, 576h, 2 dup(0)	
dd 0FB14h		
dd 0			
dd 574h, 565h, 2 dup(0)	
dd 0FB15h		
dd 0			
dd 574h, 56Bh, 2 dup(0)	
dd 0FB16h		
dd 0			
dd 57Eh, 576h, 2 dup(0)	
dd 0FB17h		
dd 0			
dd 574h, 56Dh, 2 dup(0)	
dd 0FF21h		
dd 0			
dd 0FF41h, 3 dup(0)	
dd 0FF22h		
dd 0			
dd 0FF42h, 3 dup(0)	
dd 0FF23h		
dd 0			
dd 0FF43h, 3 dup(0)	
dd 0FF24h		
dd 0			
dd 0FF44h, 3 dup(0)	
dd 0FF25h		
dd 0			
dd 0FF45h, 3 dup(0)	
dd 0FF26h		
dd 0			
dd 0FF46h, 3 dup(0)	
dd 0FF27h		
dd 0			
dd 0FF47h, 3 dup(0)	
dd 0FF28h		
dd 0			
dd 0FF48h, 3 dup(0)	
dd 0FF29h		
dd 0			
dd 0FF49h, 3 dup(0)	
dd 0FF2Ah		
dd 0			
dd 0FF4Ah, 3 dup(0)	
dd 0FF2Bh		
dd 0			
dd 0FF4Bh, 3 dup(0)	
dd 0FF2Ch		
dd 0			
dd 0FF4Ch, 3 dup(0)	
dd 0FF2Dh		
dd 0			
dd 0FF4Dh, 3 dup(0)	
dd 0FF2Eh		
dd 0			
dd 0FF4Eh, 3 dup(0)	
dd 0FF2Fh		
dd 0			
dd 0FF4Fh, 3 dup(0)	
dd 0FF30h		
dd 0			
dd 0FF50h, 3 dup(0)	
dd 0FF31h		
dd 0			
dd 0FF51h, 3 dup(0)	
dd 0FF32h		
dd 0			
dd 0FF52h, 3 dup(0)	
dd 0FF33h		
dd 0			
dd 0FF53h, 3 dup(0)	
dd 0FF34h		
dd 0			
dd 0FF54h, 3 dup(0)	
dd 0FF35h		
dd 0			
dd 0FF55h, 3 dup(0)	
dd 0FF36h		
dd 0			
dd 0FF56h, 3 dup(0)	
dd 0FF37h		
dd 0			
dd 0FF57h, 3 dup(0)	
dd 0FF38h		
dd 0			
dd 0FF58h, 3 dup(0)	
dd 0FF39h		
dd 0			
dd 0FF59h, 3 dup(0)	
dd 0FF3Ah		
dd 0			
dd 0FF5Ah, 3 dup(0)	
dd 10400h		
dd 0			
dd 10428h, 3 dup(0)	
dd 10401h		
dd 0			
dd 10429h, 3 dup(0)	
dd 10402h		
dd 0			
dd 1042Ah, 3 dup(0)	
dd 10403h		
dd 0			
dd 1042Bh, 3 dup(0)	
dd 10404h		
dd 0			
dd 1042Ch, 3 dup(0)	
dd 10405h		
dd 0			
dd 1042Dh, 3 dup(0)	
dd 10406h		
dd 0			
dd 1042Eh, 3 dup(0)	
dd 10407h		
dd 0			
dd 1042Fh, 3 dup(0)	
dd 10408h		
dd 0			
dd 10430h, 3 dup(0)	
dd 10409h		
dd 0			
dd 10431h, 3 dup(0)	
dd 1040Ah		
dd 0			
dd 10432h, 3 dup(0)	
dd 1040Bh		
dd 0			
dd 10433h, 3 dup(0)	
dd 1040Ch		
dd 0			
dd 10434h, 3 dup(0)	
dd 1040Dh		
dd 0			
dd 10435h, 3 dup(0)	
dd 1040Eh		
dd 0			
dd 10436h, 3 dup(0)	
dd 1040Fh		
dd 0			
dd 10437h, 3 dup(0)	
dd 10410h		
dd 0			
dd 10438h, 3 dup(0)	
dd 10411h		
dd 0			
dd 10439h, 3 dup(0)	
dd 10412h		
dd 0			
dd 1043Ah, 3 dup(0)	
dd 10413h		
dd 0			
dd 1043Bh, 3 dup(0)	
dd 10414h		
dd 0			
dd 1043Ch, 3 dup(0)	
dd 10415h		
dd 0			
dd 1043Dh, 3 dup(0)	
dd 10416h		
dd 0			
dd 1043Eh, 3 dup(0)	
dd 10417h		
dd 0			
dd 1043Fh, 3 dup(0)	
dd 10418h		
dd 0			
dd 10440h, 3 dup(0)	
dd 10419h		
dd 0			
dd 10441h, 3 dup(0)	
dd 1041Ah		
dd 0			
dd 10442h, 3 dup(0)	
dd 1041Bh		
dd 0			
dd 10443h, 3 dup(0)	
dd 1041Ch		
dd 0			
dd 10444h, 3 dup(0)	
dd 1041Dh		
dd 0			
dd 10445h, 3 dup(0)	
dd 1041Eh		
dd 0			
dd 10446h, 3 dup(0)	
dd 1041Fh		
dd 0			
dd 10447h, 3 dup(0)	
dd 10420h		
dd 0			
dd 10448h, 3 dup(0)	
dd 10421h		
dd 0			
dd 10449h, 3 dup(0)	
dd 10422h		
dd 0			
dd 1044Ah, 3 dup(0)	
dd 10423h		
dd 0			
dd 1044Bh, 3 dup(0)	
dd 10424h		
dd 0			
dd 1044Ch, 3 dup(0)	
dd 10425h		
dd 0			
dd 1044Dh, 3 dup(0)	
dd 0			
dd 0			
dd 4 dup(0)		
align 20h
public _stringprep_rfc3454_C_1_1
			
			
Stringprep_table_element_0  <0>
align 20h
public _stringprep_rfc3454_C_1_2
			
			
Stringprep_table_element_0 <1680h, 0, 0>
Stringprep_table_element_0 <2000h, 0, 0>
Stringprep_table_element_0 <2001h, 0, 0>
Stringprep_table_element_0 <2002h, 0, 0>
Stringprep_table_element_0 <2003h, 0, 0>
Stringprep_table_element_0 <2004h, 0, 0>
Stringprep_table_element_0 <2005h, 0, 0>
Stringprep_table_element_0 <2006h, 0, 0>
Stringprep_table_element_0 <2007h, 0, 0>
Stringprep_table_element_0 <2008h, 0, 0>
Stringprep_table_element_0 <2009h, 0, 0>
Stringprep_table_element_0 <200Ah, 0, 0>
Stringprep_table_element_0 <200Bh, 0, 0>
Stringprep_table_element_0 <202Fh, 0, 0>
Stringprep_table_element_0 <205Fh, 0, 0>
Stringprep_table_element_0 <3000h, 0, 0>
Stringprep_table_element_0  <0>
align 20h
public _stringprep_rfc3454_C_2_1
			
			
Stringprep_table_element_0 <7Fh, 0, 0>
Stringprep_table_element_0  <0>
align 20h
public _stringprep_rfc3454_C_2_2
			
			
Stringprep_table_element_0 <6DDh, 0, 0>
Stringprep_table_element_0 <70Fh, 0, 0>
Stringprep_table_element_0 <180Eh, 0, 0>
Stringprep_table_element_0 <200Ch, 0, 0>
Stringprep_table_element_0 <200Dh, 0, 0>
Stringprep_table_element_0 <2028h, 0, 0>
Stringprep_table_element_0 <2029h, 0, 0>
Stringprep_table_element_0 <2060h, 0, 0>
Stringprep_table_element_0 <2061h, 0, 0>
Stringprep_table_element_0 <2062h, 0, 0>
Stringprep_table_element_0 <2063h, 0, 0>
Stringprep_table_element_0 <206Ah, 206Fh, 0>
Stringprep_table_element_0 <0FEFFh, 0, 0>
Stringprep_table_element_0 <0FFF9h, 0FFFCh, 0>
Stringprep_table_element_0 <1D173h, 1D17Ah, 0>
Stringprep_table_element_0  <0>
align 10h
public _stringprep_rfc3454_C_3
			
			
Stringprep_table_element_0 <0F0000h, 0FFFFDh, 0>
Stringprep_table_element_0 <100000h, 10FFFDh, 0>
Stringprep_table_element_0  <0>
public _stringprep_rfc3454_C_4
			
			
Stringprep_table_element_0 <0FFFEh, 0FFFFh, 0>
Stringprep_table_element_0 <1FFFEh, 1FFFFh, 0>
Stringprep_table_element_0 <2FFFEh, 2FFFFh, 0>
Stringprep_table_element_0 <3FFFEh, 3FFFFh, 0>
Stringprep_table_element_0 <4FFFEh, 4FFFFh, 0>
Stringprep_table_element_0 <5FFFEh, 5FFFFh, 0>
Stringprep_table_element_0 <6FFFEh, 6FFFFh, 0>
Stringprep_table_element_0 <7FFFEh, 7FFFFh, 0>
Stringprep_table_element_0 <8FFFEh, 8FFFFh, 0>
Stringprep_table_element_0 <9FFFEh, 9FFFFh, 0>
Stringprep_table_element_0 <0AFFFEh, 0AFFFFh, 0>
Stringprep_table_element_0 <0BFFFEh, 0BFFFFh, 0>
Stringprep_table_element_0 <0CFFFEh, 0CFFFFh, 0>
Stringprep_table_element_0 <0DFFFEh, 0DFFFFh, 0>
Stringprep_table_element_0 <0EFFFEh, 0EFFFFh, 0>
Stringprep_table_element_0 <0FFFFEh, 0FFFFFh, 0>
Stringprep_table_element_0 <10FFFEh, 10FFFFh, 0>
Stringprep_table_element_0  <0>
align 20h
public _stringprep_rfc3454_C_5
			
			
Stringprep_table_element_0  <0>
align 20h
public _stringprep_rfc3454_C_6
			
			
Stringprep_table_element_0 <0FFFAh, 0, 0>
Stringprep_table_element_0 <0FFFBh, 0, 0>
Stringprep_table_element_0 <0FFFCh, 0, 0>
Stringprep_table_element_0 <0FFFDh, 0, 0>
Stringprep_table_element_0  <0>
align 20h
public _stringprep_rfc3454_C_7
			
			
Stringprep_table_element_0  <0>
align 20h
public _stringprep_rfc3454_C_8
			
			
Stringprep_table_element_0 <341h, 0, 0>
Stringprep_table_element_0 <200Eh, 0, 0>
Stringprep_table_element_0 <200Fh, 0, 0>
Stringprep_table_element_0 <202Ah, 0, 0>
Stringprep_table_element_0 <202Bh, 0, 0>
Stringprep_table_element_0 <202Ch, 0, 0>
Stringprep_table_element_0 <202Dh, 0, 0>
Stringprep_table_element_0 <202Eh, 0, 0>
Stringprep_table_element_0 <206Ah, 0, 0>
Stringprep_table_element_0 <206Bh, 0, 0>
Stringprep_table_element_0 <206Ch, 0, 0>
Stringprep_table_element_0 <206Dh, 0, 0>
Stringprep_table_element_0 <206Eh, 0, 0>
Stringprep_table_element_0 <206Fh, 0, 0>
Stringprep_table_element_0  <0>
public _stringprep_rfc3454_C_9
			
			
Stringprep_table_element_0 <0E0020h, 0E007Fh, 0>
Stringprep_table_element_0  <0>
align 20h
public _stringprep_rfc3454_D_1
Stringprep_table_element_0 <5C0h, 0, 0>
Stringprep_table_element_0 <5C3h, 0, 0>
Stringprep_table_element_0 <5D0h, 5EAh,	0>
Stringprep_table_element_0 <5F0h, 5F4h,	0>
Stringprep_table_element_0 <61Bh, 0, 0>
Stringprep_table_element_0 <61Fh, 0, 0>
Stringprep_table_element_0 <621h, 63Ah,	0>
Stringprep_table_element_0 <640h, 64Ah,	0>
Stringprep_table_element_0 <66Dh, 66Fh,	0>
Stringprep_table_element_0 <671h, 6D5h,	0>
Stringprep_table_element_0 <6DDh, 0, 0>
Stringprep_table_element_0 <6E5h, 6E6h,	0>
Stringprep_table_element_0 <6FAh, 6FEh,	0>
Stringprep_table_element_0 <700h, 70Dh,	0>
Stringprep_table_element_0 <710h, 0, 0>
Stringprep_table_element_0 <712h, 72Ch,	0>
Stringprep_table_element_0 <780h, 7A5h,	0>
Stringprep_table_element_0 <7B1h, 0, 0>
Stringprep_table_element_0 <200Fh, 0, 0>
Stringprep_table_element_0 <0FB1Dh, 0, 0>
Stringprep_table_element_0 <0FB1Fh, 0FB28h, 0>
Stringprep_table_element_0 <0FB2Ah, 0FB36h, 0>
Stringprep_table_element_0 <0FB38h, 0FB3Ch, 0>
Stringprep_table_element_0 <0FB3Eh, 0, 0>
Stringprep_table_element_0 <0FB40h, 0FB41h, 0>
Stringprep_table_element_0 <0FB43h, 0FB44h, 0>
Stringprep_table_element_0 <0FB46h, 0FBB1h, 0>
Stringprep_table_element_0 <0FBD3h, 0FD3Dh, 0>
Stringprep_table_element_0 <0FD50h, 0FD8Fh, 0>
Stringprep_table_element_0 <0FD92h, 0FDC7h, 0>
Stringprep_table_element_0 <0FDF0h, 0FDFCh, 0>
Stringprep_table_element_0 <0FE70h, 0FE74h, 0>
Stringprep_table_element_0 <0FE76h, 0FEFCh, 0>
Stringprep_table_element_0  <0>
align 20h
public _stringprep_rfc3454_D_2
Stringprep_table_element_0 <61h, 7Ah, 0>
Stringprep_table_element_0 <0AAh, 0, 0>
Stringprep_table_element_0 <0B5h, 0, 0>
Stringprep_table_element_0 <0BAh, 0, 0>
Stringprep_table_element_0 <0C0h, 0D6h,	0>
Stringprep_table_element_0 <0D8h, 0F6h,	0>
Stringprep_table_element_0 <0F8h, 220h,	0>
Stringprep_table_element_0 <222h, 233h,	0>
Stringprep_table_element_0 <250h, 2ADh,	0>
Stringprep_table_element_0 <2B0h, 2B8h,	0>
Stringprep_table_element_0 <2BBh, 2C1h,	0>
Stringprep_table_element_0 <2D0h, 2D1h,	0>
Stringprep_table_element_0 <2E0h, 2E4h,	0>
Stringprep_table_element_0 <2EEh, 0, 0>
Stringprep_table_element_0 <37Ah, 0, 0>
Stringprep_table_element_0 <386h, 0, 0>
Stringprep_table_element_0 <388h, 38Ah,	0>
Stringprep_table_element_0 <38Ch, 0, 0>
Stringprep_table_element_0 <38Eh, 3A1h,	0>
Stringprep_table_element_0 <3A3h, 3CEh,	0>
Stringprep_table_element_0 <3D0h, 3F5h,	0>
Stringprep_table_element_0 <400h, 482h,	0>
Stringprep_table_element_0 <48Ah, 4CEh,	0>
Stringprep_table_element_0 <4D0h, 4F5h,	0>
Stringprep_table_element_0 <4F8h, 4F9h,	0>
Stringprep_table_element_0 <500h, 50Fh,	0>
Stringprep_table_element_0 <531h, 556h,	0>
Stringprep_table_element_0 <559h, 55Fh,	0>
Stringprep_table_element_0 <561h, 587h,	0>
Stringprep_table_element_0 <589h, 0, 0>
Stringprep_table_element_0 <903h, 0, 0>
Stringprep_table_element_0 <905h, 939h,	0>
Stringprep_table_element_0 <93Dh, 940h,	0>
Stringprep_table_element_0 <949h, 94Ch,	0>
Stringprep_table_element_0 <950h, 0, 0>
Stringprep_table_element_0 <958h, 961h,	0>
Stringprep_table_element_0 <964h, 970h,	0>
Stringprep_table_element_0 <982h, 983h,	0>
Stringprep_table_element_0 <985h, 98Ch,	0>
Stringprep_table_element_0 <98Fh, 990h,	0>
Stringprep_table_element_0 <993h, 9A8h,	0>
Stringprep_table_element_0 <9AAh, 9B0h,	0>
Stringprep_table_element_0 <9B2h, 0, 0>
Stringprep_table_element_0 <9B6h, 9B9h,	0>
Stringprep_table_element_0 <9BEh, 9C0h,	0>
Stringprep_table_element_0 <9C7h, 9C8h,	0>
Stringprep_table_element_0 <9CBh, 9CCh,	0>
Stringprep_table_element_0 <9D7h, 0, 0>
Stringprep_table_element_0 <9DCh, 9DDh,	0>
Stringprep_table_element_0 <9DFh, 9E1h,	0>
Stringprep_table_element_0 <9E6h, 9F1h,	0>
Stringprep_table_element_0 <9F4h, 9FAh,	0>
Stringprep_table_element_0 <0A05h, 0A0Ah, 0>
Stringprep_table_element_0 <0A0Fh, 0A10h, 0>
Stringprep_table_element_0 <0A13h, 0A28h, 0>
Stringprep_table_element_0 <0A2Ah, 0A30h, 0>
Stringprep_table_element_0 <0A32h, 0A33h, 0>
Stringprep_table_element_0 <0A35h, 0A36h, 0>
Stringprep_table_element_0 <0A38h, 0A39h, 0>
Stringprep_table_element_0 <0A3Eh, 0A40h, 0>
Stringprep_table_element_0 <0A59h, 0A5Ch, 0>
Stringprep_table_element_0 <0A5Eh, 0, 0>
Stringprep_table_element_0 <0A66h, 0A6Fh, 0>
Stringprep_table_element_0 <0A72h, 0A74h, 0>
Stringprep_table_element_0 <0A83h, 0, 0>
Stringprep_table_element_0 <0A85h, 0A8Bh, 0>
Stringprep_table_element_0 <0A8Dh, 0, 0>
Stringprep_table_element_0 <0A8Fh, 0A91h, 0>
Stringprep_table_element_0 <0A93h, 0AA8h, 0>
Stringprep_table_element_0 <0AAAh, 0AB0h, 0>
Stringprep_table_element_0 <0AB2h, 0AB3h, 0>
Stringprep_table_element_0 <0AB5h, 0AB9h, 0>
Stringprep_table_element_0 <0ABDh, 0AC0h, 0>
Stringprep_table_element_0 <0AC9h, 0, 0>
Stringprep_table_element_0 <0ACBh, 0ACCh, 0>
Stringprep_table_element_0 <0AD0h, 0, 0>
Stringprep_table_element_0 <0AE0h, 0, 0>
Stringprep_table_element_0 <0AE6h, 0AEFh, 0>
Stringprep_table_element_0 <0B02h, 0B03h, 0>
Stringprep_table_element_0 <0B05h, 0B0Ch, 0>
Stringprep_table_element_0 <0B0Fh, 0B10h, 0>
Stringprep_table_element_0 <0B13h, 0B28h, 0>
Stringprep_table_element_0 <0B2Ah, 0B30h, 0>
Stringprep_table_element_0 <0B32h, 0B33h, 0>
Stringprep_table_element_0 <0B36h, 0B39h, 0>
Stringprep_table_element_0 <0B3Dh, 0B3Eh, 0>
Stringprep_table_element_0 <0B40h, 0, 0>
Stringprep_table_element_0 <0B47h, 0B48h, 0>
Stringprep_table_element_0 <0B4Bh, 0B4Ch, 0>
Stringprep_table_element_0 <0B57h, 0, 0>
Stringprep_table_element_0 <0B5Ch, 0B5Dh, 0>
Stringprep_table_element_0 <0B5Fh, 0B61h, 0>
Stringprep_table_element_0 <0B66h, 0B70h, 0>
Stringprep_table_element_0 <0B83h, 0, 0>
Stringprep_table_element_0 <0B85h, 0B8Ah, 0>
Stringprep_table_element_0 <0B8Eh, 0B90h, 0>
Stringprep_table_element_0 <0B92h, 0B95h, 0>
Stringprep_table_element_0 <0B99h, 0B9Ah, 0>
Stringprep_table_element_0 <0B9Ch, 0, 0>
Stringprep_table_element_0 <0B9Eh, 0B9Fh, 0>
Stringprep_table_element_0 <0BA3h, 0BA4h, 0>
Stringprep_table_element_0 <0BA8h, 0BAAh, 0>
Stringprep_table_element_0 <0BAEh, 0BB5h, 0>
Stringprep_table_element_0 <0BB7h, 0BB9h, 0>
Stringprep_table_element_0 <0BBEh, 0BBFh, 0>
Stringprep_table_element_0 <0BC1h, 0BC2h, 0>
Stringprep_table_element_0 <0BC6h, 0BC8h, 0>
Stringprep_table_element_0 <0BCAh, 0BCCh, 0>
Stringprep_table_element_0 <0BD7h, 0, 0>
Stringprep_table_element_0 <0BE7h, 0BF2h, 0>
Stringprep_table_element_0 <0C01h, 0C03h, 0>
Stringprep_table_element_0 <0C05h, 0C0Ch, 0>
Stringprep_table_element_0 <0C0Eh, 0C10h, 0>
Stringprep_table_element_0 <0C12h, 0C28h, 0>
Stringprep_table_element_0 <0C2Ah, 0C33h, 0>
Stringprep_table_element_0 <0C35h, 0C39h, 0>
Stringprep_table_element_0 <0C41h, 0C44h, 0>
Stringprep_table_element_0 <0C60h, 0C61h, 0>
Stringprep_table_element_0 <0C66h, 0C6Fh, 0>
Stringprep_table_element_0 <0C82h, 0C83h, 0>
Stringprep_table_element_0 <0C85h, 0C8Ch, 0>
Stringprep_table_element_0 <0C8Eh, 0C90h, 0>
Stringprep_table_element_0 <0C92h, 0CA8h, 0>
Stringprep_table_element_0 <0CAAh, 0CB3h, 0>
Stringprep_table_element_0 <0CB5h, 0CB9h, 0>
Stringprep_table_element_0 <0CBEh, 0, 0>
Stringprep_table_element_0 <0CC0h, 0CC4h, 0>
Stringprep_table_element_0 <0CC7h, 0CC8h, 0>
Stringprep_table_element_0 <0CCAh, 0CCBh, 0>
Stringprep_table_element_0 <0CD5h, 0CD6h, 0>
Stringprep_table_element_0 <0CDEh, 0, 0>
Stringprep_table_element_0 <0CE0h, 0CE1h, 0>
Stringprep_table_element_0 <0CE6h, 0CEFh, 0>
Stringprep_table_element_0 <0D02h, 0D03h, 0>
Stringprep_table_element_0 <0D05h, 0D0Ch, 0>
Stringprep_table_element_0 <0D0Eh, 0D10h, 0>
Stringprep_table_element_0 <0D12h, 0D28h, 0>
Stringprep_table_element_0 <0D2Ah, 0D39h, 0>
Stringprep_table_element_0 <0D3Eh, 0D40h, 0>
Stringprep_table_element_0 <0D46h, 0D48h, 0>
Stringprep_table_element_0 <0D4Ah, 0D4Ch, 0>
Stringprep_table_element_0 <0D57h, 0, 0>
Stringprep_table_element_0 <0D60h, 0D61h, 0>
Stringprep_table_element_0 <0D66h, 0D6Fh, 0>
Stringprep_table_element_0 <0D82h, 0D83h, 0>
Stringprep_table_element_0 <0D85h, 0D96h, 0>
Stringprep_table_element_0 <0D9Ah, 0DB1h, 0>
Stringprep_table_element_0 <0DB3h, 0DBBh, 0>
Stringprep_table_element_0 <0DBDh, 0, 0>
Stringprep_table_element_0 <0DC0h, 0DC6h, 0>
Stringprep_table_element_0 <0DCFh, 0DD1h, 0>
Stringprep_table_element_0 <0DD8h, 0DDFh, 0>
Stringprep_table_element_0 <0DF2h, 0DF4h, 0>
Stringprep_table_element_0 <0E01h, 0E30h, 0>
Stringprep_table_element_0 <0E32h, 0E33h, 0>
Stringprep_table_element_0 <0E40h, 0E46h, 0>
Stringprep_table_element_0 <0E4Fh, 0E5Bh, 0>
Stringprep_table_element_0 <0E81h, 0E82h, 0>
Stringprep_table_element_0 <0E84h, 0, 0>
Stringprep_table_element_0 <0E87h, 0E88h, 0>
Stringprep_table_element_0 <0E8Ah, 0, 0>
Stringprep_table_element_0 <0E8Dh, 0, 0>
Stringprep_table_element_0 <0E94h, 0E97h, 0>
Stringprep_table_element_0 <0E99h, 0E9Fh, 0>
Stringprep_table_element_0 <0EA1h, 0EA3h, 0>
Stringprep_table_element_0 <0EA5h, 0, 0>
Stringprep_table_element_0 <0EA7h, 0, 0>
Stringprep_table_element_0 <0EAAh, 0EABh, 0>
Stringprep_table_element_0 <0EADh, 0EB0h, 0>
Stringprep_table_element_0 <0EB2h, 0EB3h, 0>
Stringprep_table_element_0 <0EBDh, 0, 0>
Stringprep_table_element_0 <0EC0h, 0EC4h, 0>
Stringprep_table_element_0 <0EC6h, 0, 0>
Stringprep_table_element_0 <0ED0h, 0ED9h, 0>
Stringprep_table_element_0 <0EDCh, 0EDDh, 0>
Stringprep_table_element_0 <0F00h, 0F17h, 0>
Stringprep_table_element_0 <0F1Ah, 0F34h, 0>
Stringprep_table_element_0 <0F36h, 0, 0>
Stringprep_table_element_0 <0F38h, 0, 0>
Stringprep_table_element_0 <0F3Eh, 0F47h, 0>
Stringprep_table_element_0 <0F49h, 0F6Ah, 0>
Stringprep_table_element_0 <0F7Fh, 0, 0>
Stringprep_table_element_0 <0F85h, 0, 0>
Stringprep_table_element_0 <0F88h, 0F8Bh, 0>
Stringprep_table_element_0 <0FBEh, 0FC5h, 0>
Stringprep_table_element_0 <0FC7h, 0FCCh, 0>
Stringprep_table_element_0 <0FCFh, 0, 0>
Stringprep_table_element_0 <1000h, 1021h, 0>
Stringprep_table_element_0 <1023h, 1027h, 0>
Stringprep_table_element_0 <1029h, 102Ah, 0>
Stringprep_table_element_0 <102Ch, 0, 0>
Stringprep_table_element_0 <1031h, 0, 0>
Stringprep_table_element_0 <1038h, 0, 0>
Stringprep_table_element_0 <1040h, 1057h, 0>
Stringprep_table_element_0 <10A0h, 10C5h, 0>
Stringprep_table_element_0 <10D0h, 10F8h, 0>
Stringprep_table_element_0 <10FBh, 0, 0>
Stringprep_table_element_0 <1100h, 1159h, 0>
Stringprep_table_element_0 <115Fh, 11A2h, 0>
Stringprep_table_element_0 <11A8h, 11F9h, 0>
Stringprep_table_element_0 <1200h, 1206h, 0>
Stringprep_table_element_0 <1208h, 1246h, 0>
Stringprep_table_element_0 <1248h, 0, 0>
Stringprep_table_element_0 <124Ah, 124Dh, 0>
Stringprep_table_element_0 <1250h, 1256h, 0>
Stringprep_table_element_0 <1258h, 0, 0>
Stringprep_table_element_0 <125Ah, 125Dh, 0>
Stringprep_table_element_0 <1260h, 1286h, 0>
Stringprep_table_element_0 <1288h, 0, 0>
Stringprep_table_element_0 <128Ah, 128Dh, 0>
Stringprep_table_element_0 <1290h, 12AEh, 0>
Stringprep_table_element_0 <12B0h, 0, 0>
Stringprep_table_element_0 <12B2h, 12B5h, 0>
Stringprep_table_element_0 <12B8h, 12BEh, 0>
Stringprep_table_element_0 <12C0h, 0, 0>
Stringprep_table_element_0 <12C2h, 12C5h, 0>
Stringprep_table_element_0 <12C8h, 12CEh, 0>
Stringprep_table_element_0 <12D0h, 12D6h, 0>
Stringprep_table_element_0 <12D8h, 12EEh, 0>
Stringprep_table_element_0 <12F0h, 130Eh, 0>
Stringprep_table_element_0 <1310h, 0, 0>
Stringprep_table_element_0 <1312h, 1315h, 0>
Stringprep_table_element_0 <1318h, 131Eh, 0>
Stringprep_table_element_0 <1320h, 1346h, 0>
Stringprep_table_element_0 <1348h, 135Ah, 0>
Stringprep_table_element_0 <1361h, 137Ch, 0>
Stringprep_table_element_0 <13A0h, 13F4h, 0>
Stringprep_table_element_0 <1401h, 1676h, 0>
Stringprep_table_element_0 <1681h, 169Ah, 0>
Stringprep_table_element_0 <16A0h, 16F0h, 0>
Stringprep_table_element_0 <1700h, 170Ch, 0>
Stringprep_table_element_0 <170Eh, 1711h, 0>
Stringprep_table_element_0 <1720h, 1731h, 0>
Stringprep_table_element_0 <1735h, 1736h, 0>
Stringprep_table_element_0 <1740h, 1751h, 0>
Stringprep_table_element_0 <1760h, 176Ch, 0>
Stringprep_table_element_0 <176Eh, 1770h, 0>
Stringprep_table_element_0 <1780h, 17B6h, 0>
Stringprep_table_element_0 <17BEh, 17C5h, 0>
Stringprep_table_element_0 <17C7h, 17C8h, 0>
Stringprep_table_element_0 <17D4h, 17DAh, 0>
Stringprep_table_element_0 <17DCh, 0, 0>
Stringprep_table_element_0 <17E0h, 17E9h, 0>
Stringprep_table_element_0 <1810h, 1819h, 0>
Stringprep_table_element_0 <1820h, 1877h, 0>
Stringprep_table_element_0 <1880h, 18A8h, 0>
Stringprep_table_element_0 <1E00h, 1E9Bh, 0>
Stringprep_table_element_0 <1EA0h, 1EF9h, 0>
Stringprep_table_element_0 <1F00h, 1F15h, 0>
Stringprep_table_element_0 <1F18h, 1F1Dh, 0>
Stringprep_table_element_0 <1F20h, 1F45h, 0>
Stringprep_table_element_0 <1F48h, 1F4Dh, 0>
Stringprep_table_element_0 <1F50h, 1F57h, 0>
Stringprep_table_element_0 <1F59h, 0, 0>
Stringprep_table_element_0 <1F5Bh, 0, 0>
Stringprep_table_element_0 <1F5Dh, 0, 0>
Stringprep_table_element_0 <1F5Fh, 1F7Dh, 0>
Stringprep_table_element_0 <1F80h, 1FB4h, 0>
Stringprep_table_element_0 <1FB6h, 1FBCh, 0>
Stringprep_table_element_0 <1FBEh, 0, 0>
Stringprep_table_element_0 <1FC2h, 1FC4h, 0>
Stringprep_table_element_0 <1FC6h, 1FCCh, 0>
Stringprep_table_element_0 <1FD0h, 1FD3h, 0>
Stringprep_table_element_0 <1FD6h, 1FDBh, 0>
Stringprep_table_element_0 <1FE0h, 1FECh, 0>
Stringprep_table_element_0 <1FF2h, 1FF4h, 0>
Stringprep_table_element_0 <1FF6h, 1FFCh, 0>
Stringprep_table_element_0 <200Eh, 0, 0>
Stringprep_table_element_0 <2071h, 0, 0>
Stringprep_table_element_0 <207Fh, 0, 0>
Stringprep_table_element_0 <2102h, 0, 0>
Stringprep_table_element_0 <2107h, 0, 0>
Stringprep_table_element_0 <210Ah, 2113h, 0>
Stringprep_table_element_0 <2115h, 0, 0>
Stringprep_table_element_0 <2119h, 211Dh, 0>
Stringprep_table_element_0 <2124h, 0, 0>
Stringprep_table_element_0 <2126h, 0, 0>
Stringprep_table_element_0 <2128h, 0, 0>
Stringprep_table_element_0 <212Ah, 212Dh, 0>
Stringprep_table_element_0 <212Fh, 2131h, 0>
Stringprep_table_element_0 <2133h, 2139h, 0>
Stringprep_table_element_0 <213Dh, 213Fh, 0>
Stringprep_table_element_0 <2145h, 2149h, 0>
Stringprep_table_element_0 <2160h, 2183h, 0>
Stringprep_table_element_0 <2336h, 237Ah, 0>
Stringprep_table_element_0 <2395h, 0, 0>
Stringprep_table_element_0 <249Ch, 24E9h, 0>
Stringprep_table_element_0 <3005h, 3007h, 0>
Stringprep_table_element_0 <3021h, 3029h, 0>
Stringprep_table_element_0 <3031h, 3035h, 0>
Stringprep_table_element_0 <3038h, 303Ch, 0>
Stringprep_table_element_0 <3041h, 3096h, 0>
Stringprep_table_element_0 <309Dh, 309Fh, 0>
Stringprep_table_element_0 <30A1h, 30FAh, 0>
Stringprep_table_element_0 <30FCh, 30FFh, 0>
Stringprep_table_element_0 <3105h, 312Ch, 0>
Stringprep_table_element_0 <3131h, 318Eh, 0>
Stringprep_table_element_0 <3190h, 31B7h, 0>
Stringprep_table_element_0 <31F0h, 321Ch, 0>
Stringprep_table_element_0 <3220h, 3243h, 0>
Stringprep_table_element_0 <3260h, 327Bh, 0>
Stringprep_table_element_0 <327Fh, 32B0h, 0>
Stringprep_table_element_0 <32C0h, 32CBh, 0>
Stringprep_table_element_0 <32D0h, 32FEh, 0>
Stringprep_table_element_0 <3300h, 3376h, 0>
Stringprep_table_element_0 <337Bh, 33DDh, 0>
Stringprep_table_element_0 <33E0h, 33FEh, 0>
Stringprep_table_element_0 <3400h, 4DB5h, 0>
Stringprep_table_element_0 <4E00h, 9FA5h, 0>
Stringprep_table_element_0 <0A000h, 0A48Ch, 0>
Stringprep_table_element_0 <0AC00h, 0D7A3h, 0>
Stringprep_table_element_0 <0D800h, 0FA2Dh, 0>
Stringprep_table_element_0 <0FA30h, 0FA6Ah, 0>
Stringprep_table_element_0 <0FB00h, 0FB06h, 0>
Stringprep_table_element_0 <0FB13h, 0FB17h, 0>
Stringprep_table_element_0 <0FF21h, 0FF3Ah, 0>
Stringprep_table_element_0 <0FF41h, 0FF5Ah, 0>
Stringprep_table_element_0 <0FF66h, 0FFBEh, 0>
Stringprep_table_element_0 <0FFC2h, 0FFC7h, 0>
Stringprep_table_element_0 <0FFCAh, 0FFCFh, 0>
Stringprep_table_element_0 <0FFD2h, 0FFD7h, 0>
Stringprep_table_element_0 <0FFDAh, 0FFDCh, 0>
Stringprep_table_element_0 <10300h, 1031Eh, 0>
Stringprep_table_element_0 <10320h, 10323h, 0>
Stringprep_table_element_0 <10330h, 1034Ah, 0>
Stringprep_table_element_0 <10400h, 10425h, 0>
Stringprep_table_element_0 <10428h, 1044Dh, 0>
Stringprep_table_element_0 <1D000h, 1D0F5h, 0>
Stringprep_table_element_0 <1D100h, 1D126h, 0>
Stringprep_table_element_0 <1D12Ah, 1D166h, 0>
Stringprep_table_element_0 <1D16Ah, 1D172h, 0>
Stringprep_table_element_0 <1D183h, 1D184h, 0>
Stringprep_table_element_0 <1D18Ch, 1D1A9h, 0>
Stringprep_table_element_0 <1D1AEh, 1D1DDh, 0>
Stringprep_table_element_0 <1D400h, 1D454h, 0>
Stringprep_table_element_0 <1D456h, 1D49Ch, 0>
Stringprep_table_element_0 <1D49Eh, 1D49Fh, 0>
Stringprep_table_element_0 <1D4A2h, 0, 0>
Stringprep_table_element_0 <1D4A5h, 1D4A6h, 0>
Stringprep_table_element_0 <1D4A9h, 1D4ACh, 0>
Stringprep_table_element_0 <1D4AEh, 1D4B9h, 0>
Stringprep_table_element_0 <1D4BBh, 0, 0>
Stringprep_table_element_0 <1D4BDh, 1D4C0h, 0>
Stringprep_table_element_0 <1D4C2h, 1D4C3h, 0>
Stringprep_table_element_0 <1D4C5h, 1D505h, 0>
Stringprep_table_element_0 <1D507h, 1D50Ah, 0>
Stringprep_table_element_0 <1D50Dh, 1D514h, 0>
Stringprep_table_element_0 <1D516h, 1D51Ch, 0>
Stringprep_table_element_0 <1D51Eh, 1D539h, 0>
Stringprep_table_element_0 <1D53Bh, 1D53Eh, 0>
Stringprep_table_element_0 <1D540h, 1D544h, 0>
Stringprep_table_element_0 <1D546h, 0, 0>
Stringprep_table_element_0 <1D54Ah, 1D550h, 0>
Stringprep_table_element_0 <1D552h, 1D6A3h, 0>
Stringprep_table_element_0 <1D6A8h, 1D7C9h, 0>
Stringprep_table_element_0 <20000h, 2A6D6h, 0>
Stringprep_table_element_0 <2F800h, 2FA1Dh, 0>
Stringprep_table_element_0 <0F0000h, 0FFFFDh, 0>
Stringprep_table_element_0 <100000h, 10FFFDh, 0>
Stringprep_table_element_0  <0>
align 10h
dd offset loc_641C50B0	
dd offset loc_641C51F0
dd offset loc_641C534F
dd offset loc_641C518D
dd offset loc_641C5148
dd offset loc_641C5128
dd offset loc_641C5128
dd offset loc_641C5128
public _stringprep_profiles
dd offset loc_641C5980	
dd offset loc_641C5A28
dd offset loc_641C5A18
dd offset loc_641C5A18
dd offset loc_641C5BB8	
dd offset loc_641C5BE8
dd offset loc_641C5B18
dd offset loc_641C5B84
dd offset loc_641C6578	
dd offset loc_641C65A0
dd offset loc_641C6694
dd offset loc_641C66D4
dd offset loc_641C6724
dd offset loc_641C66D4
dd offset loc_641C6694
dd offset loc_641C66D4
dd offset loc_641C6750
dd offset loc_641C67C4
dd offset loc_641C6724
dd offset loc_641C684C
dd offset loc_641C684C
dd offset loc_641C68E4
dd offset loc_641C68E4
dd offset loc_641C6724
dd offset loc_641C6520
			
			
dd offset loc_641C7184	
dd offset loc_641C71BC
dd offset loc_641C7290
dd offset loc_641C72D0
dd offset loc_641C7310
dd offset loc_641C72D0
dd offset loc_641C7290
dd offset loc_641C72D0
dd offset loc_641C7338
dd offset loc_641C748C
dd offset loc_641C7310
dd offset loc_641C7604
dd offset loc_641C7604
dd offset loc_641C7680
dd offset loc_641C7680
dd offset loc_641C7310
dd offset loc_641C70B4
			
			
			
			
			
align 4
			
			
			
			
			
align 4
			
align 4
			
align 4
			
			
align 4
			
align 4
public _silc_packet_stream_ops
			
	       offset _silc_packet_wrap_write, \
	       offset _silc_packet_wrap_close, \
	       offset _silc_packet_wrap_destroy, \
	       offset _silc_packet_wrap_notifier, \
	       offset _silc_packet_wrap_get_schedule>
			
			
			
			
align 4
			
dd offset aPacketDecrypti, offset aUnknownSid, offset aPacketIsMalfor 
dd offset aSystemOutOfM_1
align 4
dd offset loc_641D1230	
dd offset loc_641D1230
dd offset loc_641D1064
dd offset loc_641D1064
dd offset loc_641D1064
dd offset loc_641D1064
dd offset loc_641D1064
dd offset loc_641D1064
dd offset loc_641D1064
dd offset loc_641D11D4
dd offset loc_641D118C
dd offset loc_641D11D4
dd offset loc_641D118C
dd offset loc_641D1064
dd offset loc_641D118C
dd offset loc_641D10C4
dd offset loc_641D10C4
dd offset loc_641D1064
dd offset loc_641D1064
dd offset loc_641D1064
dd offset loc_641D1064
dd offset loc_641D1064
dd offset loc_641D1064
dd offset loc_641D118C
dd offset loc_641D118C
dd offset loc_641D118C
dd offset loc_641D1064
dd offset loc_641D1064
dd offset loc_641D118C
dd offset loc_641D118C
dd offset loc_641D1064
dd offset loc_641D1064
dd offset loc_641D1064
dd offset loc_641D1064
dd offset loc_641D1064
dd offset loc_641D1230
dd offset loc_641D1080
dd offset loc_641D1064
dd offset loc_641D1230
dd offset loc_641D1064
dd offset loc_641D1080
dd offset loc_641D1B70	
dd offset loc_641D1AA8
dd offset loc_641D1C5C
dd offset loc_641D1BE8
dd offset loc_641D1CF4
dd offset loc_641D1A10
dd offset loc_641D192C
dd offset loc_641D18B8
dd offset loc_641D18B8
dd offset loc_641D18B8
dd offset loc_641D17E0
dd offset loc_641D1790
dd offset loc_641D1790
dd offset loc_641D1790
dd offset loc_641D1790
dd offset loc_641D18B8
dd offset loc_641D18B8
dd offset loc_641D18B8
dd offset loc_641D1790
dd offset loc_641D1790
dd offset loc_641D1790
dd offset loc_641D1790
dd offset loc_641D17E0
dd offset loc_641D1764
dd offset loc_641D175C
dd offset loc_641D1714
dd offset loc_641D1790
dd offset loc_641D1790
dd offset ok
dd offset loc_641D24A0	
dd offset loc_641D246C
dd offset loc_641D246C
dd offset loc_641D2424
dd offset loc_641D2424
dd offset loc_641D2394
dd offset loc_641D2394
dd offset loc_641D2B58
dd offset loc_641D2B1C
dd offset loc_641D2AA0
dd offset loc_641D2A28
dd offset loc_641D24D0
dd offset loc_641D29D0
dd offset loc_641D2954
dd offset loc_641D28C4
dd offset loc_641D2858
dd offset loc_641D27D4
dd offset loc_641D2720
dd offset loc_641D269C
dd offset loc_641D2620
dd offset fail
dd offset loc_641D25A8
dd offset loc_641D2518
dd offset loc_641D2B8C
dd offset loc_641D2BB8
dd offset loc_641D2BC4
dd offset loc_641D24D0
dd offset loc_641D25A8
dd offset glb_641D2C20
align 20h
			
dd offset loc_641D39B8	
dd offset loc_641D3943
dd offset loc_641D3950
dd offset loc_641D3626
dd offset loc_641D3A3E
align 10h
			
align 20h
			
dd offset aInvalidSyntax, offset aInternalErrorP, offset aCanTOpenSpecif 
dd offset aExpectedOpenBr, offset aMissingCloseBr, offset aInvalidDataTyp
dd offset aUnknownOption, offset aInvalidText, offset aDoubleOptionSp
dd offset aExpectedDataBu, offset aExpected, offset aUnexpectedData
dd offset aMissingMandato, offset aMissing
align 20h
public _silc_fd_stream_ops
			
			
	       offset _silc_fd_stream_write, \
	       offset _silc_fd_stream_close, \
	       offset _silc_fd_stream_destroy, \
	       offset _silc_fd_stream_notifier,	\
	       offset _silc_fd_stream_get_schedule>
			
			
			
			
align 10h
align 4
			
align 20h
public _primesize
			
			
dd 209h, 337h, 407h, 4D5h, 5A7h, 805h, 955h, 0AD9h, 0CFBh
dd 1003h, 13C3h, 1867h,	1B59h, 2011h, 2AF1h, 36E9h, 401Bh
dd 4AEDh, 5261h, 61C9h,	8003h, 9C49h, 0B947h, 10001h, 1A0E1h
dd 2001Dh, 40003h, 57EE3h, 80015h, 0C5D67h, 100007h, 200011h
dd 40000Fh, 5DE4C1h, 800009h, 0D342ABh,	100002Bh, 2000023h
dd 400000Fh
align 20h
			
			
			
align 4
			
align 4
			
			
			
db 'utput is going to stderr',0Ah,0
align 4
			
			
			
align 10h
			
			
db '%s',0
db '--%s--',0Dh,0Ah,0
			
align 4
			
			
			
			
align 4
			
align 20h
align 20h
			
dd offset aDestinationUnr, offset aConnectionRefu, offset aConnectionTime 
dd offset aSystemOutOfM_2, offset aUnexpectedEr_0
			
align 10h
			
align 4
dd offset loc_641DD800	
dd offset loc_641DD7D4
dd offset loc_641DD7BC
dd offset loc_641DD788
dd offset loc_641DD764
dd offset loc_641DD814
			
dd offset loc_641DD81C,	offset loc_641DD81C, offset loc_641DD81C 
dd offset loc_641DD81C,	offset loc_641DD81C, offset loc_641DD81C
dd offset loc_641DD81C,	offset loc_641DD81C, offset loc_641DD81C
dd offset loc_641DD81C,	offset loc_641DD81C, offset loc_641DD81C
dd offset loc_641DD81C,	offset loc_641DD81C, offset loc_641DD81C
dd offset loc_641DD81C,	offset loc_641DD81C, offset loc_641DD81C
dd offset loc_641DD81C,	offset loc_641DD81C, offset loc_641DD81C
dd offset loc_641DD81C,	offset loc_641DD81C, offset loc_641DD81C
dd offset loc_641DD81C,	offset loc_641DD81C, offset loc_641DD81C
dd offset loc_641DD81C,	offset loc_641DD81C, offset loc_641DDA42
dd offset loc_641DD81C,	offset loc_641DD9AF, offset loc_641DD81C
dd offset loc_641DD81C,	offset loc_641DD81C, offset loc_641DD81C
dd offset loc_641DD81C,	offset loc_641DD81C, offset loc_641DD81C
dd offset loc_641DD81C,	offset loc_641DD81C, offset loc_641DD81C
dd offset loc_641DD81C,	offset loc_641DD81C, offset loc_641DD81C
dd offset loc_641DD81C,	offset loc_641DD81C, offset loc_641DD81C
dd offset loc_641DD9ED,	offset loc_641DD81C, offset loc_641DD81C
dd offset loc_641DD81C,	offset loc_641DD81C, offset loc_641DD81C
dd offset loc_641DD81C,	offset loc_641DD81C, offset loc_641DD81C
dd offset loc_641DD81C,	offset loc_641DD81C, offset loc_641DDAE5
dd offset loc_641DDB01,	offset loc_641DDA46, offset loc_641DDAA4
dd offset loc_641DD9B3,	offset loc_641DD81C, offset loc_641DDB01
dd offset loc_641DD81C,	offset loc_641DD81C, offset loc_641DD81C
dd offset loc_641DD81C,	offset loc_641DDA6F, offset loc_641DDB29
dd offset loc_641DDC53,	offset loc_641DD81C, offset loc_641DD81C
dd offset loc_641DDB51,	offset loc_641DD81C, offset loc_641DDC7C
dd offset loc_641DD81C,	offset loc_641DDA9C, offset loc_641DD9F1
dd offset loc_641DD80A	
dd offset loc_641DD80A
dd offset loc_641DD8EC
dd offset loc_641DD80A
dd offset loc_641DD80A
dd offset loc_641DD80A
dd offset loc_641DD80A
dd offset loc_641DD80A
dd offset loc_641DD80A
dd offset loc_641DD80A
dd offset loc_641DD92C
dd offset loc_641DD80A
dd offset loc_641DD91C
dd offset loc_641DD80A
dd offset loc_641DD80A
dd offset loc_641DD90C
			
			
align 4
public _silc_socket_stream_ops
			
			
	       offset _silc_socket_stream_write, \
	       offset _silc_socket_stream_close, \
	       offset _silc_socket_stream_destroy, \
	       offset _silc_socket_stream_notifier, \
	       offset _silc_socket_stream_get_schedule>
public _silc_socket_udp_stream_ops
			
			
	       offset _silc_socket_udp_stream_write, \
	       offset _silc_socket_stream_close, \
	       offset _silc_socket_stream_destroy, \
	       offset _silc_socket_stream_notifier, \
	       offset _silc_socket_stream_get_schedule>
			
			
			
			
align 10h
			
align 10h
align 10h
public _silc_appendix_c
			
Stringprep_table_element_0 <2Ah, 0, 0>
Stringprep_table_element_0 <2Ch, 0, 0>
Stringprep_table_element_0 <3Fh, 0, 0>
Stringprep_table_element_0 <40h, 0, 0>
Stringprep_table_element_0  <0>
align 20h
public _silc_appendix_d
			
			
Stringprep_table_element_0 <0ACh, 0, 0>
Stringprep_table_element_0 <0AEh, 0, 0>
Stringprep_table_element_0 <0AFh, 0, 0>
Stringprep_table_element_0 <0B0h, 0, 0>
Stringprep_table_element_0 <0B1h, 0, 0>
Stringprep_table_element_0 <0B4h, 0, 0>
Stringprep_table_element_0 <0B6h, 0, 0>
Stringprep_table_element_0 <0B8h, 0, 0>
Stringprep_table_element_0 <0D7h, 0, 0>
Stringprep_table_element_0 <0F7h, 0, 0>
Stringprep_table_element_0 <2C2h, 2C5h,	0>
Stringprep_table_element_0 <2D2h, 2FFh,	0>
Stringprep_table_element_0 <374h, 0, 0>
Stringprep_table_element_0 <375h, 0, 0>
Stringprep_table_element_0 <384h, 0, 0>
Stringprep_table_element_0 <385h, 0, 0>
Stringprep_table_element_0 <3F6h, 0, 0>
Stringprep_table_element_0 <482h, 0, 0>
Stringprep_table_element_0 <60Eh, 0, 0>
Stringprep_table_element_0 <60Fh, 0, 0>
Stringprep_table_element_0 <6E9h, 0, 0>
Stringprep_table_element_0 <6FDh, 0, 0>
Stringprep_table_element_0 <6FEh, 0, 0>
Stringprep_table_element_0 <9F2h, 0, 0>
Stringprep_table_element_0 <9F3h, 0, 0>
Stringprep_table_element_0 <9FAh, 0, 0>
Stringprep_table_element_0 <0AF1h, 0, 0>
Stringprep_table_element_0 <0B70h, 0, 0>
Stringprep_table_element_0 <0BF3h, 0BFAh, 0>
Stringprep_table_element_0 <0E3Fh, 0, 0>
Stringprep_table_element_0 <0F01h, 0F03h, 0>
Stringprep_table_element_0 <0F13h, 0F17h, 0>
Stringprep_table_element_0 <0F1Ah, 0F1Fh, 0>
Stringprep_table_element_0 <0F34h, 0, 0>
Stringprep_table_element_0 <0F36h, 0, 0>
Stringprep_table_element_0 <0F38h, 0, 0>
Stringprep_table_element_0 <0FBEh, 0, 0>
Stringprep_table_element_0 <0FBFh, 0, 0>
Stringprep_table_element_0 <0FC0h, 0FC5h, 0>
Stringprep_table_element_0 <0FC7h, 0FCFh, 0>
Stringprep_table_element_0 <17DBh, 0, 0>
Stringprep_table_element_0 <1940h, 0, 0>
Stringprep_table_element_0 <19E0h, 19FFh, 0>
Stringprep_table_element_0 <1FBDh, 0, 0>
Stringprep_table_element_0 <1FBFh, 1FC1h, 0>
Stringprep_table_element_0 <1FCDh, 1FCFh, 0>
Stringprep_table_element_0 <1FDDh, 1FDFh, 0>
Stringprep_table_element_0 <1FEDh, 1FEFh, 0>
Stringprep_table_element_0 <1FFDh, 0, 0>
Stringprep_table_element_0 <1FFEh, 0, 0>
Stringprep_table_element_0 <2044h, 0, 0>
Stringprep_table_element_0 <2052h, 0, 0>
Stringprep_table_element_0 <207Ah, 207Ch, 0>
Stringprep_table_element_0 <208Ah, 208Ch, 0>
Stringprep_table_element_0 <20A0h, 20B1h, 0>
Stringprep_table_element_0 <2100h, 214Fh, 0>
Stringprep_table_element_0 <2150h, 218Fh, 0>
Stringprep_table_element_0 <2190h, 21FFh, 0>
Stringprep_table_element_0 <2200h, 22FFh, 0>
Stringprep_table_element_0 <2300h, 23FFh, 0>
Stringprep_table_element_0 <2400h, 243Fh, 0>
Stringprep_table_element_0 <2440h, 245Fh, 0>
Stringprep_table_element_0 <2460h, 24FFh, 0>
Stringprep_table_element_0 <2500h, 257Fh, 0>
Stringprep_table_element_0 <2580h, 259Fh, 0>
Stringprep_table_element_0 <25A0h, 25FFh, 0>
Stringprep_table_element_0 <2600h, 26FFh, 0>
Stringprep_table_element_0 <2700h, 27BFh, 0>
Stringprep_table_element_0 <27C0h, 27EFh, 0>
Stringprep_table_element_0 <27F0h, 27FFh, 0>
Stringprep_table_element_0 <2800h, 28FFh, 0>
Stringprep_table_element_0 <2900h, 297Fh, 0>
Stringprep_table_element_0 <2980h, 29FFh, 0>
Stringprep_table_element_0 <2A00h, 2AFFh, 0>
Stringprep_table_element_0 <2B00h, 2BFFh, 0>
Stringprep_table_element_0 <2E9Ah, 0, 0>
Stringprep_table_element_0 <2EF4h, 2EFFh, 0>
Stringprep_table_element_0 <2FF0h, 2FFFh, 0>
Stringprep_table_element_0 <303Bh, 303Dh, 0>
Stringprep_table_element_0 <3040h, 0, 0>
Stringprep_table_element_0 <3095h, 3098h, 0>
Stringprep_table_element_0 <309Fh, 30A0h, 0>
Stringprep_table_element_0 <30FFh, 3104h, 0>
Stringprep_table_element_0 <312Dh, 3130h, 0>
Stringprep_table_element_0 <318Fh, 0, 0>
Stringprep_table_element_0 <31B8h, 31FFh, 0>
Stringprep_table_element_0 <321Dh, 321Fh, 0>
Stringprep_table_element_0 <3244h, 325Fh, 0>
Stringprep_table_element_0 <327Ch, 327Eh, 0>
Stringprep_table_element_0 <32B1h, 32BFh, 0>
Stringprep_table_element_0 <32CCh, 32CFh, 0>
Stringprep_table_element_0 <32FFh, 0, 0>
Stringprep_table_element_0 <3377h, 337Ah, 0>
Stringprep_table_element_0 <33DEh, 33DFh, 0>
Stringprep_table_element_0 <33FFh, 0, 0>
Stringprep_table_element_0 <4DB6h, 4DFFh, 0>
Stringprep_table_element_0 <9FA6h, 9FFFh, 0>
Stringprep_table_element_0 <0A48Dh, 0A48Fh, 0>
Stringprep_table_element_0 <0A4A2h, 0A4A3h, 0>
Stringprep_table_element_0 <0A4B4h, 0, 0>
Stringprep_table_element_0 <0A4C1h, 0, 0>
Stringprep_table_element_0 <0A4C5h, 0, 0>
Stringprep_table_element_0 <0A4C7h, 0ABFFh, 0>
Stringprep_table_element_0 <0D7A4h, 0D7FFh, 0>
Stringprep_table_element_0 <0FA2Eh, 0FAFFh, 0>
Stringprep_table_element_0 <0FFE0h, 0FFEEh, 0>
Stringprep_table_element_0 <0FFFCh, 0, 0>
Stringprep_table_element_0 <10000h, 1007Fh, 0>
Stringprep_table_element_0 <10080h, 100FFh, 0>
Stringprep_table_element_0 <10100h, 1013Fh, 0>
Stringprep_table_element_0 <1D000h, 1D0FFh, 0>
Stringprep_table_element_0 <1D100h, 1D1FFh, 0>
Stringprep_table_element_0 <1D300h, 1D35Fh, 0>
Stringprep_table_element_0 <1D400h, 1D7FFh, 0>
Stringprep_table_element_0 <0E0100h, 0E01EFh, 0>
Stringprep_table_element_0  <0>
align 10h
public _stringprep_silc_identifier_prep
			
		    offset _stringprep_rfc3454_B_1>
Stringprep_profile <STRINGPREP_MAP_TABLE, 0, \
		    offset _stringprep_rfc3454_B_2>
Stringprep_profile <STRINGPREP_NFKC, 0,	0>
Stringprep_profile <STRINGPREP_PROHIBIT_TABLE, 0, \
		    offset _stringprep_rfc3454_C_1_1>
Stringprep_profile <STRINGPREP_PROHIBIT_TABLE, 0, \
		    offset _stringprep_rfc3454_C_1_2>
Stringprep_profile <STRINGPREP_PROHIBIT_TABLE, 0, \
		    offset _stringprep_rfc3454_C_2_1>
Stringprep_profile <STRINGPREP_PROHIBIT_TABLE, 0, \
		    offset _stringprep_rfc3454_C_2_2>
Stringprep_profile <STRINGPREP_PROHIBIT_TABLE, 0, \
		    offset _stringprep_rfc3454_C_3>
Stringprep_profile <STRINGPREP_PROHIBIT_TABLE, 0, \
		    offset _stringprep_rfc3454_C_4>
Stringprep_profile <STRINGPREP_PROHIBIT_TABLE, 0, \
		    offset _stringprep_rfc3454_C_5>
Stringprep_profile <STRINGPREP_PROHIBIT_TABLE, 0, \
		    offset _stringprep_rfc3454_C_6>
Stringprep_profile <STRINGPREP_PROHIBIT_TABLE, 0, \
		    offset _stringprep_rfc3454_C_7>
Stringprep_profile <STRINGPREP_PROHIBIT_TABLE, 0, \
		    offset _stringprep_rfc3454_C_8>
Stringprep_profile 2 dup(<STRINGPREP_PROHIBIT_TABLE, 0,	\
			  offset _stringprep_rfc3454_C_9>)
Stringprep_profile <STRINGPREP_PROHIBIT_TABLE, 0, \
		    offset _silc_appendix_c>
Stringprep_profile <STRINGPREP_PROHIBIT_TABLE, 0, \
		    offset _silc_appendix_d>
Stringprep_profile <STRINGPREP_UNASSIGNED_TABLE, 0, \
		    offset _stringprep_rfc3454_A_1>
Stringprep_profile  <0>
align 20h
public _stringprep_silc_identifier_ch_prep
			
		    offset _stringprep_rfc3454_B_1>
Stringprep_profile <STRINGPREP_MAP_TABLE, 0, \
		    offset _stringprep_rfc3454_B_2>
Stringprep_profile <STRINGPREP_NFKC, 0,	0>
Stringprep_profile <STRINGPREP_PROHIBIT_TABLE, 0, \
		    offset _stringprep_rfc3454_C_1_1>
Stringprep_profile <STRINGPREP_PROHIBIT_TABLE, 0, \
		    offset _stringprep_rfc3454_C_1_2>
Stringprep_profile <STRINGPREP_PROHIBIT_TABLE, 0, \
		    offset _stringprep_rfc3454_C_2_1>
Stringprep_profile <STRINGPREP_PROHIBIT_TABLE, 0, \
		    offset _stringprep_rfc3454_C_2_2>
Stringprep_profile <STRINGPREP_PROHIBIT_TABLE, 0, \
		    offset _stringprep_rfc3454_C_3>
Stringprep_profile <STRINGPREP_PROHIBIT_TABLE, 0, \
		    offset _stringprep_rfc3454_C_4>
Stringprep_profile <STRINGPREP_PROHIBIT_TABLE, 0, \
		    offset _stringprep_rfc3454_C_5>
Stringprep_profile <STRINGPREP_PROHIBIT_TABLE, 0, \
		    offset _stringprep_rfc3454_C_6>
Stringprep_profile <STRINGPREP_PROHIBIT_TABLE, 0, \
		    offset _stringprep_rfc3454_C_7>
Stringprep_profile <STRINGPREP_PROHIBIT_TABLE, 0, \
		    offset _stringprep_rfc3454_C_8>
Stringprep_profile 2 dup(<STRINGPREP_PROHIBIT_TABLE, 0,	\
			  offset _stringprep_rfc3454_C_9>)
Stringprep_profile <STRINGPREP_PROHIBIT_TABLE, 0, \
		    offset _silc_appendix_d>
Stringprep_profile <STRINGPREP_UNASSIGNED_TABLE, 0, \
		    offset _stringprep_rfc3454_A_1>
Stringprep_profile  <0>
align 10h
public _stringprep_silc_identifierc_prep
			
		    offset _stringprep_rfc3454_B_1>
Stringprep_profile <STRINGPREP_MAP_TABLE, 0, \
		    offset _stringprep_rfc3454_B_2>
Stringprep_profile <STRINGPREP_NFKC, 0,	0>
Stringprep_profile  <0>
align 20h
public _stringprep_silc_casefold_prep
			
		    offset _stringprep_rfc3454_B_2>
Stringprep_profile <STRINGPREP_NFKC, 0,	0>
Stringprep_profile  <0>
align 20h
			
			
db 4Ch,	4Dh, 4Eh, 4Fh, 50h, 51h, 52h, 53h, 54h,	55h, 56h
db 57h,	58h, 59h, 5Ah, 61h, 62h, 63h, 64h, 65h,	66h, 67h
db 68h,	69h, 6Ah, 6Bh, 6Ch, 6Dh, 6Eh, 6Fh, 70h,	71h, 72h
db 73h,	74h, 75h, 76h, 77h, 78h, 79h, 7Ah, 30h,	31h, 32h
db 33h,	34h, 35h, 36h, 37h, 38h, 39h, 2Bh, 2Fh
			
			
			
			
			
			
align 4
			
			
align 10h
dd offset loc_641E069C	
dd offset loc_641E071C
dd offset loc_641E0700
dd offset loc_641E06CC
dd offset loc_641E06B0
dd offset loc_641E069C
dd offset loc_641E069C
dd offset loc_641E0744
dd offset loc_641E0744
dd offset loc_641E0744
dd offset loc_641E0744
dd offset loc_641E08D4
dd offset loc_641E0DD8	
dd offset loc_641E0EF8
dd offset loc_641E0EE0
dd offset loc_641E0EA8
dd offset loc_641E0E64
dd offset loc_641E0DD8
dd offset loc_641E0DD8
dd offset loc_641E0DE4
dd offset loc_641E0DE4
dd offset loc_641E0F1C
dd offset loc_641E0F2C
			
			
align 10h
align 4
			
			
			
align 4
			
			
align 4
			
			
align 4
			
align 4
			
align 4
			
align 10h
			
			
align 4
			
			
			
public _schedule_ops
			
			
		 offset	_silc_schedule_internal_uninit,	\
		 offset	_silc_select, \
		 offset	_silc_schedule_internal_schedule_fd, \
		 offset	_silc_schedule_internal_wakeup,	\
		 offset	_silc_schedule_internal_signal_register, \
		 offset	_silc_schedule_internal_signal_unregister, \
		 offset	_silc_schedule_internal_signals_call, \
		 offset	_silc_schedule_internal_signals_block, \
		 offset	_silc_schedule_internal_signals_unblock>
align 20h
public _DWLEN
align 20h
			
			
			
			
			
			
align 2
			
			
			
			
			
db 'Passphrases do not match',0
db 'Passphrase changed',0Ah,0
			
align 4
			
			
align 4
			
db 'estions.',0
align 4
			
			
			
db 'd',0
			
			
db 'ummy.com): ',0
align 4
			
			
db 0
align 4
			
align 4
			
align 4
			
db 'Passphrases do not match',0Ah
db 0Ah,0
db 'Generating the key pair...',0
			
align 4
			
			
			
align 20h
			
dd offset aNick, offset	aList, offset aTopic, offset aInvite 
dd offset aQuit, offset	aKill, offset aInfo_0, offset aStats
dd offset aPing, offset	aOper, offset aJoin, offset aMotd
dd offset aUmode, offset aCmode, offset	aCumode, offset	aKick
dd offset aBan,	offset aDetach,	offset aWatch, offset aSilcoper
dd offset aLeave, offset aUsers, offset	aGetkey, offset	aService
align 10h
			
dd offset aFailure, offset aReject, offset aNotify, offset aError_0 
dd offset aChannelMessage, offset aChannelKey, offset aPrivateMessage
dd offset aPrivateMessa_0, offset aCommand, offset aCommandReply
dd offset aKeyExchange,	offset aKeyExchange1, offset aKeyExchange2
dd offset aConnectionAuth, offset aConnectionAu_0, offset aNewId
dd offset aNewClient, offset aNewServer, offset	aNewChannel
dd offset aRekey, offset aRekey_done, offset aHeartbeat
dd offset aKeyAgreement, offset	aResumeRouter, offset aFtp
dd offset aResumeClient
align 4
			
			
			
			
			
align 4
			
			
align 4
			
align 4
			
align 10h
			
align 4
			
			
align 4
			
align 4
			
			
align 4
			
			
align 10h
			
			
db 3 dup(0)		
dd offset aThereWasNoSuch
db 0Bh			
db 3 dup(0)
dd offset aThereWasNoSu_0
db 0Ch			
db 3 dup(0)
dd offset aThereWasNoSu_1
db 0Dh			
db 3 dup(0)
dd offset aIncompleteRegi
db 0Eh			
db 3 dup(0)
dd offset aNoRecipientGiv
db 0Fh			
db 3 dup(0)
dd offset aUnknownCommand
db 10h			
db 3 dup(0)
dd offset aWilcradsNotAll
db 11h			
db 3 dup(0)
dd offset aNoClientIdGive
db 12h			
db 3 dup(0)
dd offset aNoChannelIdGiv
db 13h			
db 3 dup(0)
dd offset aNoServerIdGive
db 14h			
db 3 dup(0)
dd offset aBadClientId	
db 15h			
db 3 dup(0)
dd offset aBadChannelId	
db 16h			
db 3 dup(0)
dd offset aThereIsNoSuchC
db 17h			
db 3 dup(0)
dd offset aThereIsNoSuc_0
db 18h			
db 3 dup(0)
dd offset aNicknameAlread
db 19h			
db 3 dup(0)
dd offset aYouAreNotOnTha
db 1Ah			
db 3 dup(0)
dd offset aTheyAreNotOnTh
db 1Bh			
db 3 dup(0)
dd offset aUserAlreadyOnT
db 1Ch			
db 3 dup(0)
dd offset aYouHaveNotRegi
db 1Dh			
db 3 dup(0)
dd offset aNotEnoughParam
db 1Eh			
db 3 dup(0)
dd offset aTooManyParamet
db 1Fh			
db 3 dup(0)
dd offset aPermissionDeni
db 20h			
db 3 dup(0)
dd offset aYouAreNotAllow
db 21h			
db 3 dup(0)
dd offset aCannotJoinChan
db 22h			
db 3 dup(0)
dd offset aCannotJoinCh_0
db 23h			
db 3 dup(0)
dd offset aCannotJoinCh_1
db 24h			
db 3 dup(0)
dd offset aCannotJoinCh_2
db 25h			
db 3 dup(0)
dd offset aUnknownMode	
db 26h			
db 3 dup(0)
dd offset aCannotChangeMo
db 27h			
db 3 dup(0)
dd offset aPermissionDe_0
db 28h			
db 3 dup(0)
dd offset aPermissionDe_1
db 29h			
db 3 dup(0)
dd offset aPermissionDe_2
db 2Ah			
db 3 dup(0)
dd offset aPermissionDe_3
db 2Bh			
db 3 dup(0)
dd offset aBadNickname	
db 2Ch			
db 3 dup(0)
dd offset aBadChannelName
db 2Dh			
db 3 dup(0)
dd offset aAuthenticati_0
db 2Eh			
db 3 dup(0)
dd offset aUnsupportedAlg
db 2Fh			
db 3 dup(0)
dd offset aNoSuchServerId
db 30h			
db 3 dup(0)
dd offset aNoMoreFreeReso
db 31h			
db 3 dup(0)
dd offset aServiceDoesnTE
db 32h			
db 3 dup(0)
dd offset aYouHaveNotBeen
db 33h			
db 3 dup(0)
dd offset aServerIdIsNotV
db 34h			
db 3 dup(0)
dd offset aKeyExchangeFai
db 35h			
db 3 dup(0)
dd offset aBadVersion	
db 36h			
db 3 dup(0)
dd offset aServiceTimedOu
db 37h			
db 3 dup(0)
dd offset aUnsupportedP_1
db 38h			
db 3 dup(0)
dd offset aOperationIsNot
db 39h			
db 3 dup(0)
dd offset aBadServerName
db 3Ah			
db 3 dup(0)
dd offset aBadUserName	
db 3Bh			
db 3 dup(0)
dd offset aUnknownPublicK
db 0			
db 3 dup(0)
dd 0			
align 10h
			
align 4
			
align 10h
public _t_rc
align 20h
public _t_fn
			
			
dd 0BD6B6BD6h, 0B16F6FDEh, 54C5C591h, 50303060h, 3010102h
dd 0A96767CEh, 7D2B2B56h, 19FEFEE7h, 62D7D7B5h,	0E6ABAB4Dh
dd 9A7676ECh, 45CACA8Fh, 9D82821Fh, 40C9C989h, 877D7DFAh
dd 15FAFAEFh, 0EB5959B2h, 0C947478Eh, 0BF0F0FBh, 0ECADAD41h
dd 67D4D4B3h, 0FDA2A25Fh, 0EAAFAF45h, 0BF9C9C23h, 0F7A4A453h
dd 967272E4h, 5BC0C09Bh, 0C2B7B775h, 1CFDFDE1h,	0AE93933Dh
dd 6A26264Ch, 5A36366Ch, 413F3F7Eh, 2F7F7F5h, 4FCCCC83h
dd 5C343468h, 0F4A5A551h, 34E5E5D1h, 8F1F1F9h, 937171E2h
dd 73D8D8ABh, 53313162h, 3F15152Ah, 0C040408h, 52C7C795h
dd 65232346h, 5EC3C39Dh, 28181830h, 0A1969637h,	0F05050Ah
dd 0B59A9A2Fh, 907070Eh, 36121224h, 9B80801Bh, 3DE2E2DFh
dd 26EBEBCDh, 6927274Eh, 0CDB2B27Fh, 9F7575EAh,	1B090912h
dd 9E83831Dh, 742C2C58h, 2E1A1A34h, 2D1B1B36h, 0B26E6EDCh
dd 0EE5A5AB4h, 0FBA0A05Bh, 0F65252A4h, 4D3B3B76h, 61D6D6B7h
dd 0CEB3B37Dh, 7B292952h, 3EE3E3DDh, 712F2F5Eh,	97848413h
dd 0F55353A6h, 68D1D1B9h, 0, 2CEDEDC1h,	60202040h, 1FFCFCE3h
dd 0C8B1B179h, 0ED5B5BB6h, 0BE6A6AD4h, 46CBCB8Dh, 0D9BEBE67h
dd 4B393972h, 0DE4A4A94h, 0D44C4C98h, 0E85858B0h, 4ACFCF85h
dd 6BD0D0BBh, 2AEFEFC5h, 0E5AAAA4Fh, 16FBFBEDh,	0C5434386h
dd 0D74D4D9Ah, 55333366h, 94858511h, 0CF45458Ah, 10F9F9E9h
dd 6020204h, 817F7FFEh,	0F05050A0h, 443C3C78h, 0BA9F9F25h
dd 0E3A8A84Bh, 0F35151A2h, 0FEA3A35Dh, 0C0404080h, 8A8F8F05h
dd 0AD92923Fh, 0BC9D9D21h, 48383870h, 4F5F5F1h,	0DFBCBC63h
dd 0C1B6B677h, 75DADAAFh, 63212142h, 30101020h,	1AFFFFE5h
dd 0EF3F3FDh, 6DD2D2BFh, 4CCDCD81h, 140C0C18h, 35131326h
dd 2FECECC3h, 0E15F5FBEh, 0A2979735h, 0CC444488h, 3917172Eh
dd 57C4C493h, 0F2A7A755h, 827E7EFCh, 473D3D7Ah,	0AC6464C8h
dd 0E75D5DBAh, 2B191932h, 957373E6h, 0A06060C0h, 98818119h
dd 0D14F4F9Eh, 7FDCDCA3h, 66222244h, 7E2A2A54h,	0AB90903Bh
dd 8388880Bh, 0CA46468Ch, 29EEEEC7h, 0D3B8B86Bh, 3C141428h
dd 79DEDEA7h, 0E25E5EBCh, 1D0B0B16h, 76DBDBADh,	3BE0E0DBh
dd 56323264h, 4E3A3A74h, 1E0A0A14h, 0DB494992h,	0A06060Ch
dd 6C242448h, 0E45C5CB8h, 5DC2C29Fh, 6ED3D3BDh,	0EFACAC43h
dd 0A66262C4h, 0A8919139h, 0A4959531h, 37E4E4D3h, 8B7979F2h
dd 32E7E7D5h, 43C8C88Bh, 5937376Eh, 0B76D6DDAh,	8C8D8D01h
dd 64D5D5B1h, 0D24E4E9Ch, 0E0A9A949h, 0B46C6CD8h, 0FA5656ACh
dd 7F4F4F3h, 25EAEACFh,	0AF6565CAh, 8E7A7AF4h, 0E9AEAE47h
dd 18080810h, 0D5BABA6Fh, 887878F0h, 6F25254Ah,	722E2E5Ch
dd 241C1C38h, 0F1A6A657h, 0C7B4B473h, 51C6C697h, 23E8E8CBh
dd 7CDDDDA1h, 9C7474E8h, 211F1F3Eh, 0DD4B4B96h,	0DCBDBD61h
dd 868B8B0Dh, 858A8A0Fh, 907070E0h, 423E3E7Ch, 0C4B5B571h
dd 0AA6666CCh, 0D8484890h, 5030306h, 1F6F6F7h, 120E0E1Ch
dd 0A36161C2h, 5F35356Ah, 0F95757AEh, 0D0B9B969h, 91868617h
dd 58C1C199h, 271D1D3Ah, 0B99E9E27h, 38E1E1D9h,	13F8F8EBh
dd 0B398982Bh, 33111122h, 0BB6969D2h, 70D9D9A9h, 898E8E07h
dd 0A7949433h, 0B69B9B2Dh, 221E1E3Ch, 92878715h, 20E9E9C9h
dd 49CECE87h, 0FF5555AAh, 78282850h, 7ADFDFA5h,	8F8C8C03h
dd 0F8A1A159h, 80898909h, 170D0D1Ah, 0DABFBF65h, 31E6E6D7h
dd 0C6424284h, 0B86868D0h, 0C3414182h, 0B0999929h, 772D2D5Ah
dd 110F0F1Eh, 0CBB0B07Bh, 0FC5454A8h, 0D6BBBB6Dh, 3A16162Ch
dd 6363C6A5h, 7C7CF884h, 7777EE99h, 7B7BF68Dh, 0F2F2FF0Dh
dd 6B6BD6BDh, 6F6FDEB1h, 0C5C59154h, 30306050h,	1010203h
dd 6767CEA9h, 2B2B567Dh, 0FEFEE719h, 0D7D7B562h, 0ABAB4DE6h
dd 7676EC9Ah, 0CACA8F45h, 82821F9Dh, 0C9C98940h, 7D7DFA87h
dd 0FAFAEF15h, 5959B2EBh, 47478EC9h, 0F0F0FB0Bh, 0ADAD41ECh
dd 0D4D4B367h, 0A2A25FFDh, 0AFAF45EAh, 9C9C23BFh, 0A4A453F7h
dd 7272E496h, 0C0C09B5Bh, 0B7B775C2h, 0FDFDE11Ch, 93933DAEh
dd 26264C6Ah, 36366C5Ah, 3F3F7E41h, 0F7F7F502h,	0CCCC834Fh
dd 3434685Ch, 0A5A551F4h, 0E5E5D134h, 0F1F1F908h, 7171E293h
dd 0D8D8AB73h, 31316253h, 15152A3Fh, 404080Ch, 0C7C79552h
dd 23234665h, 0C3C39D5Eh, 18183028h, 969637A1h,	5050A0Fh
dd 9A9A2FB5h, 7070E09h,	12122436h, 80801B9Bh, 0E2E2DF3Dh
dd 0EBEBCD26h, 27274E69h, 0B2B27FCDh, 7575EA9Fh, 909121Bh
dd 83831D9Eh, 2C2C5874h, 1A1A342Eh, 1B1B362Dh, 6E6EDCB2h
dd 5A5AB4EEh, 0A0A05BFBh, 5252A4F6h, 3B3B764Dh,	0D6D6B761h
dd 0B3B37DCEh, 2929527Bh, 0E3E3DD3Eh, 2F2F5E71h, 84841397h
dd 5353A6F5h, 0D1D1B968h, 0, 0EDEDC12Ch, 20204060h, 0FCFCE31Fh
dd 0B1B179C8h, 5B5BB6EDh, 6A6AD4BEh, 0CBCB8D46h, 0BEBE67D9h
dd 3939724Bh, 4A4A94DEh, 4C4C98D4h, 5858B0E8h, 0CFCF854Ah
dd 0D0D0BB6Bh, 0EFEFC52Ah, 0AAAA4FE5h, 0FBFBED16h, 434386C5h
dd 4D4D9AD7h, 33336655h, 85851194h, 45458ACFh, 0F9F9E910h
dd 2020406h, 7F7FFE81h,	5050A0F0h, 3C3C7844h, 9F9F25BAh
dd 0A8A84BE3h, 5151A2F3h, 0A3A35DFEh, 404080C0h, 8F8F058Ah
dd 92923FADh, 9D9D21BCh, 38387048h, 0F5F5F104h,	0BCBC63DFh
dd 0B6B677C1h, 0DADAAF75h, 21214263h, 10102030h, 0FFFFE51Ah
dd 0F3F3FD0Eh, 0D2D2BF6Dh, 0CDCD814Ch, 0C0C1814h, 13132635h
dd 0ECECC32Fh, 5F5FBEE1h, 979735A2h, 444488CCh,	17172E39h
dd 0C4C49357h, 0A7A755F2h, 7E7EFC82h, 3D3D7A47h, 6464C8ACh
dd 5D5DBAE7h, 1919322Bh, 7373E695h, 6060C0A0h, 81811998h
dd 4F4F9ED1h, 0DCDCA37Fh, 22224466h, 2A2A547Eh,	90903BABh
dd 88880B83h, 46468CCAh, 0EEEEC729h, 0B8B86BD3h, 1414283Ch
dd 0DEDEA779h, 5E5EBCE2h, 0B0B161Dh, 0DBDBAD76h, 0E0E0DB3Bh
dd 32326456h, 3A3A744Eh, 0A0A141Eh, 494992DBh, 6060C0Ah
dd 2424486Ch, 5C5CB8E4h, 0C2C29F5Dh, 0D3D3BD6Eh, 0ACAC43EFh
dd 6262C4A6h, 919139A8h, 959531A4h, 0E4E4D337h,	7979F28Bh
dd 0E7E7D532h, 0C8C88B43h, 37376E59h, 6D6DDAB7h, 8D8D018Ch
dd 0D5D5B164h, 4E4E9CD2h, 0A9A949E0h, 6C6CD8B4h, 5656ACFAh
dd 0F4F4F307h, 0EAEACF25h, 6565CAAFh, 7A7AF48Eh, 0AEAE47E9h
dd 8081018h, 0BABA6FD5h, 7878F088h, 25254A6Fh, 2E2E5C72h
dd 1C1C3824h, 0A6A657F1h, 0B4B473C7h, 0C6C69751h, 0E8E8CB23h
dd 0DDDDA17Ch, 7474E89Ch, 1F1F3E21h, 4B4B96DDh,	0BDBD61DCh
dd 8B8B0D86h, 8A8A0F85h, 7070E090h, 3E3E7C42h, 0B5B571C4h
dd 6666CCAAh, 484890D8h, 3030605h, 0F6F6F701h, 0E0E1C12h
dd 6161C2A3h, 35356A5Fh, 5757AEF9h, 0B9B969D0h,	86861791h
dd 0C1C19958h, 1D1D3A27h, 9E9E27B9h, 0E1E1D938h, 0F8F8EB13h
dd 98982BB3h, 11112233h, 6969D2BBh, 0D9D9A970h,	8E8E0789h
dd 949433A7h, 9B9B2DB6h, 1E1E3C22h, 87871592h, 0E9E9C920h
dd 0CECE8749h, 5555AAFFh, 28285078h, 0DFDFA57Ah, 8C8C038Fh
dd 0A1A159F8h, 89890980h, 0D0D1A17h, 0BFBF65DAh, 0E6E6D731h
dd 424284C6h, 6868D0B8h, 414182C3h, 999929B0h, 2D2D5A77h
dd 0F0F1E11h, 0B0B07BCBh, 5454A8FCh, 0BBBB6DD6h, 16162C3Ah
dd 63C6A563h, 7CF8847Ch, 77EE9977h, 7BF68D7Bh, 0F2FF0DF2h
dd 6BD6BD6Bh, 6FDEB16Fh, 0C59154C5h, 30605030h,	1020301h
dd 67CEA967h, 2B567D2Bh, 0FEE719FEh, 0D7B562D7h, 0AB4DE6ABh
dd 76EC9A76h, 0CA8F45CAh, 821F9D82h, 0C98940C9h, 7DFA877Dh
dd 0FAEF15FAh, 59B2EB59h, 478EC947h, 0F0FB0BF0h, 0AD41ECADh
dd 0D4B367D4h, 0A25FFDA2h, 0AF45EAAFh, 9C23BF9Ch, 0A453F7A4h
dd 72E49672h, 0C09B5BC0h, 0B775C2B7h, 0FDE11CFDh, 933DAE93h
dd 264C6A26h, 366C5A36h, 3F7E413Fh, 0F7F502F7h,	0CC834FCCh
dd 34685C34h, 0A551F4A5h, 0E5D134E5h, 0F1F908F1h, 71E29371h
dd 0D8AB73D8h, 31625331h, 152A3F15h, 4080C04h, 0C79552C7h
dd 23466523h, 0C39D5EC3h, 18302818h, 9637A196h,	50A0F05h
dd 9A2FB59Ah, 70E0907h,	12243612h, 801B9B80h, 0E2DF3DE2h
dd 0EBCD26EBh, 274E6927h, 0B27FCDB2h, 75EA9F75h, 9121B09h
dd 831D9E83h, 2C58742Ch, 1A342E1Ah, 1B362D1Bh, 6EDCB26Eh
dd 5AB4EE5Ah, 0A05BFBA0h, 52A4F652h, 3B764D3Bh,	0D6B761D6h
dd 0B37DCEB3h, 29527B29h, 0E3DD3EE3h, 2F5E712Fh, 84139784h
dd 53A6F553h, 0D1B968D1h, 0, 0EDC12CEDh, 20406020h, 0FCE31FFCh
dd 0B179C8B1h, 5BB6ED5Bh, 6AD4BE6Ah, 0CB8D46CBh, 0BE67D9BEh
dd 39724B39h, 4A94DE4Ah, 4C98D44Ch, 58B0E858h, 0CF854ACFh
dd 0D0BB6BD0h, 0EFC52AEFh, 0AA4FE5AAh, 0FBED16FBh, 4386C543h
dd 4D9AD74Dh, 33665533h, 85119485h, 458ACF45h, 0F9E910F9h
dd 2040602h, 7FFE817Fh,	50A0F050h, 3C78443Ch, 9F25BA9Fh
dd 0A84BE3A8h, 51A2F351h, 0A35DFEA3h, 4080C040h, 8F058A8Fh
dd 923FAD92h, 9D21BC9Dh, 38704838h, 0F5F104F5h,	0BC63DFBCh
dd 0B677C1B6h, 0DAAF75DAh, 21426321h, 10203010h, 0FFE51AFFh
dd 0F3FD0EF3h, 0D2BF6DD2h, 0CD814CCDh, 0C18140Ch, 13263513h
dd 0ECC32FECh, 5FBEE15Fh, 9735A297h, 4488CC44h,	172E3917h
dd 0C49357C4h, 0A755F2A7h, 7EFC827Eh, 3D7A473Dh, 64C8AC64h
dd 5DBAE75Dh, 19322B19h, 73E69573h, 60C0A060h, 81199881h
dd 4F9ED14Fh, 0DCA37FDCh, 22446622h, 2A547E2Ah,	903BAB90h
dd 880B8388h, 468CCA46h, 0EEC729EEh, 0B86BD3B8h, 14283C14h
dd 0DEA779DEh, 5EBCE25Eh, 0B161D0Bh, 0DBAD76DBh, 0E0DB3BE0h
dd 32645632h, 3A744E3Ah, 0A141E0Ah, 4992DB49h, 60C0A06h
dd 24486C24h, 5CB8E45Ch, 0C29F5DC2h, 0D3BD6ED3h, 0AC43EFACh
dd 62C4A662h, 9139A891h, 9531A495h, 0E4D337E4h,	79F28B79h
dd 0E7D532E7h, 0C88B43C8h, 376E5937h, 6DDAB76Dh, 8D018C8Dh
dd 0D5B164D5h, 4E9CD24Eh, 0A949E0A9h, 6CD8B46Ch, 56ACFA56h
dd 0F4F307F4h, 0EACF25EAh, 65CAAF65h, 7AF48E7Ah, 0AE47E9AEh
dd 8101808h, 0BA6FD5BAh, 78F08878h, 254A6F25h, 2E5C722Eh
dd 1C38241Ch, 0A657F1A6h, 0B473C7B4h, 0C69751C6h, 0E8CB23E8h
dd 0DDA17CDDh, 74E89C74h, 1F3E211Fh, 4B96DD4Bh,	0BD61DCBDh
dd 8B0D868Bh, 8A0F858Ah, 70E09070h, 3E7C423Eh, 0B571C4B5h
dd 66CCAA66h, 4890D848h, 3060503h, 0F6F701F6h, 0E1C120Eh
dd 61C2A361h, 356A5F35h, 57AEF957h, 0B969D0B9h,	86179186h
dd 0C19958C1h, 1D3A271Dh, 9E27B99Eh, 0E1D938E1h, 0F8EB13F8h
dd 982BB398h, 11223311h, 69D2BB69h, 0D9A970D9h,	8E07898Eh
dd 9433A794h, 9B2DB69Bh, 1E3C221Eh, 87159287h, 0E9C920E9h
dd 0CE8749CEh, 55AAFF55h, 28507828h, 0DFA57ADFh, 8C038F8Ch
dd 0A159F8A1h, 89098089h, 0D1A170Dh, 0BF65DABFh, 0E6D731E6h
dd 4284C642h, 68D0B868h, 4182C341h, 9929B099h, 2D5A772Dh
dd 0F1E110Fh, 0B07BCBB0h, 54A8FC54h, 0BB6DD6BBh, 162C3A16h
dd 0C6A56363h, 0F8847C7Ch, 0EE997777h, 0F68D7B7Bh, 0FF0DF2F2h
dd 0D6BD6B6Bh, 0DEB16F6Fh, 9154C5C5h, 60503030h, 2030101h
dd 0CEA96767h, 567D2B2Bh, 0E719FEFEh, 0B562D7D7h, 4DE6ABABh
dd 0EC9A7676h, 8F45CACAh, 1F9D8282h, 8940C9C9h,	0FA877D7Dh
dd 0EF15FAFAh, 0B2EB5959h, 8EC94747h, 0FB0BF0F0h, 41ECADADh
dd 0B367D4D4h, 5FFDA2A2h, 45EAAFAFh, 23BF9C9Ch,	53F7A4A4h
dd 0E4967272h, 9B5BC0C0h, 75C2B7B7h, 0E11CFDFDh, 3DAE9393h
dd 4C6A2626h, 6C5A3636h, 7E413F3Fh, 0F502F7F7h,	834FCCCCh
dd 685C3434h, 51F4A5A5h, 0D134E5E5h, 0F908F1F1h, 0E2937171h
dd 0AB73D8D8h, 62533131h, 2A3F1515h, 80C0404h, 9552C7C7h
dd 46652323h, 9D5EC3C3h, 30281818h, 37A19696h, 0A0F0505h
dd 2FB59A9Ah, 0E090707h, 24361212h, 1B9B8080h, 0DF3DE2E2h
dd 0CD26EBEBh, 4E692727h, 7FCDB2B2h, 0EA9F7575h, 121B0909h
dd 1D9E8383h, 58742C2Ch, 342E1A1Ah, 362D1B1Bh, 0DCB26E6Eh
dd 0B4EE5A5Ah, 5BFBA0A0h, 0A4F65252h, 764D3B3Bh, 0B761D6D6h
dd 7DCEB3B3h, 527B2929h, 0DD3EE3E3h, 5E712F2Fh,	13978484h
dd 0A6F55353h, 0B968D1D1h, 0, 0C12CEDEDh, 40602020h, 0E31FFCFCh
dd 79C8B1B1h, 0B6ED5B5Bh, 0D4BE6A6Ah, 8D46CBCBh, 67D9BEBEh
dd 724B3939h, 94DE4A4Ah, 98D44C4Ch, 0B0E85858h,	854ACFCFh
dd 0BB6BD0D0h, 0C52AEFEFh, 4FE5AAAAh, 0ED16FBFBh, 86C54343h
dd 9AD74D4Dh, 66553333h, 11948585h, 8ACF4545h, 0E910F9F9h
dd 4060202h, 0FE817F7Fh, 0A0F05050h, 78443C3Ch,	25BA9F9Fh
dd 4BE3A8A8h, 0A2F35151h, 5DFEA3A3h, 80C04040h,	58A8F8Fh
dd 3FAD9292h, 21BC9D9Dh, 70483838h, 0F104F5F5h,	63DFBCBCh
dd 77C1B6B6h, 0AF75DADAh, 42632121h, 20301010h,	0E51AFFFFh
dd 0FD0EF3F3h, 0BF6DD2D2h, 814CCDCDh, 18140C0Ch, 26351313h
dd 0C32FECECh, 0BEE15F5Fh, 35A29797h, 88CC4444h, 2E391717h
dd 9357C4C4h, 55F2A7A7h, 0FC827E7Eh, 7A473D3Dh,	0C8AC6464h
dd 0BAE75D5Dh, 322B1919h, 0E6957373h, 0C0A06060h, 19988181h
dd 9ED14F4Fh, 0A37FDCDCh, 44662222h, 547E2A2Ah,	3BAB9090h
dd 0B838888h, 8CCA4646h, 0C729EEEEh, 6BD3B8B8h,	283C1414h
dd 0A779DEDEh, 0BCE25E5Eh, 161D0B0Bh, 0AD76DBDBh, 0DB3BE0E0h
dd 64563232h, 744E3A3Ah, 141E0A0Ah, 92DB4949h, 0C0A0606h
dd 486C2424h, 0B8E45C5Ch, 9F5DC2C2h, 0BD6ED3D3h, 43EFACACh
dd 0C4A66262h, 39A89191h, 31A49595h, 0D337E4E4h, 0F28B7979h
dd 0D532E7E7h, 8B43C8C8h, 6E593737h, 0DAB76D6Dh, 18C8D8Dh
dd 0B164D5D5h, 9CD24E4Eh, 49E0A9A9h, 0D8B46C6Ch, 0ACFA5656h
dd 0F307F4F4h, 0CF25EAEAh, 0CAAF6565h, 0F48E7A7Ah, 47E9AEAEh
dd 10180808h, 6FD5BABAh, 0F0887878h, 4A6F2525h,	5C722E2Eh
dd 38241C1Ch, 57F1A6A6h, 73C7B4B4h, 9751C6C6h, 0CB23E8E8h
dd 0A17CDDDDh, 0E89C7474h, 3E211F1Fh, 96DD4B4Bh, 61DCBDBDh
dd 0D868B8Bh, 0F858A8Ah, 0E0907070h, 7C423E3Eh,	71C4B5B5h
dd 0CCAA6666h, 90D84848h, 6050303h, 0F701F6F6h,	1C120E0Eh
dd 0C2A36161h, 6A5F3535h, 0AEF95757h, 69D0B9B9h, 17918686h
dd 9958C1C1h, 3A271D1Dh, 27B99E9Eh, 0D938E1E1h,	0EB13F8F8h
dd 2BB39898h, 22331111h, 0D2BB6969h, 0A970D9D9h, 7898E8Eh
dd 33A79494h, 2DB69B9Bh, 3C221E1Eh, 15928787h, 0C920E9E9h
dd 8749CECEh, 0AAFF5555h, 50782828h, 0A57ADFDFh, 38F8C8Ch
dd 59F8A1A1h, 9808989h,	1A170D0Dh, 65DABFBFh, 0D731E6E6h
dd 84C64242h, 0D0B86868h, 82C34141h, 29B09999h,	5A772D2Dh
dd 1E110F0Fh, 7BCBB0B0h, 0A8FC5454h, 6DD6BBBBh,	2C3A1616h
public _t_fl
			
			
dd 2Bh,	0FEh, 0D7h, 0ABh, 76h, 0CAh, 82h, 0C9h,	7Dh, 0FAh
dd 59h,	47h, 0F0h, 0ADh, 0D4h, 0A2h, 0AFh, 9Ch,	0A4h, 72h
dd 0C0h, 0B7h, 0FDh, 93h, 26h, 36h, 3Fh, 0F7h, 0CCh, 34h
dd 0A5h, 0E5h, 0F1h, 71h, 0D8h,	31h, 15h, 4, 0C7h, 23h
dd 0C3h, 18h, 96h, 5, 9Ah, 7, 12h, 80h,	0E2h, 0EBh, 27h
dd 0B2h, 75h, 9, 83h, 2Ch, 1Ah,	1Bh, 6Eh, 5Ah, 0A0h, 52h
dd 3Bh,	0D6h, 0B3h, 29h, 0E3h, 2Fh, 84h, 53h, 0D1h, 0
dd 0EDh, 20h, 0FCh, 0B1h, 5Bh, 6Ah, 0CBh, 0BEh,	39h, 4Ah
dd 4Ch,	58h, 0CFh, 0D0h, 0EFh, 0AAh, 0FBh, 43h,	4Dh, 33h
dd 85h,	45h, 0F9h, 2, 7Fh, 50h,	3Ch, 9Fh, 0A8h,	51h, 0A3h
dd 40h,	8Fh, 92h, 9Dh, 38h, 0F5h, 0BCh,	0B6h, 0DAh, 21h
dd 10h,	0FFh, 0F3h, 0D2h, 0CDh,	0Ch, 13h, 0ECh,	5Fh, 97h
dd 44h,	17h, 0C4h, 0A7h, 7Eh, 3Dh, 64h,	5Dh, 19h, 73h
dd 60h,	81h, 4Fh, 0DCh,	22h, 2Ah, 90h, 88h, 46h, 0EEh
dd 0B8h, 14h, 0DEh, 5Eh, 0Bh, 0DBh, 0E0h, 32h, 3Ah, 0Ah
dd 49h,	6, 24h,	5Ch, 0C2h, 0D3h, 0ACh, 62h, 91h, 95h, 0E4h
dd 79h,	0E7h, 0C8h, 37h, 6Dh, 8Dh, 0D5h, 4Eh, 0A9h, 6Ch
dd 56h,	0F4h, 0EAh, 65h, 7Ah, 0AEh, 8, 0BAh, 78h, 25h
dd 2Eh,	1Ch, 0A6h, 0B4h, 0C6h, 0E8h, 0DDh, 74h,	1Fh, 4Bh
dd 0BDh, 8Bh, 8Ah, 70h,	3Eh, 0B5h, 66h,	48h, 3,	0F6h, 0Eh
dd 61h,	35h, 57h, 0B9h,	86h, 0C1h, 1Dh,	9Eh, 0E1h, 0F8h
dd 98h,	11h, 69h, 0D9h,	8Eh, 94h, 9Bh, 1Eh, 87h, 0E9h
dd 0CEh, 55h, 28h, 0DFh, 8Ch, 0A1h, 89h, 0Dh, 0BFh, 0E6h
dd 42h,	68h, 41h, 99h, 2Dh, 0Fh, 0B0h, 54h, 0BBh, 16h
dd 6300h, 7C00h, 7700h,	7B00h, 0F200h, 6B00h, 6F00h, 0C500h
dd 3000h, 100h,	6700h, 2B00h, 0FE00h, 0D700h, 0AB00h, 7600h
dd 0CA00h, 8200h, 0C900h, 7D00h, 0FA00h, 5900h,	4700h
dd 0F000h, 0AD00h, 0D400h, 0A200h, 0AF00h, 9C00h, 0A400h
dd 7200h, 0C000h, 0B700h, 0FD00h, 9300h, 2600h,	3600h
dd 3F00h, 0F700h, 0CC00h, 3400h, 0A500h, 0E500h, 0F100h
dd 7100h, 0D800h, 3100h, 1500h,	400h, 0C700h, 2300h, 0C300h
dd 1800h, 9600h, 500h, 9A00h, 700h, 1200h, 8000h, 0E200h
dd 0EB00h, 2700h, 0B200h, 7500h, 900h, 8300h, 2C00h, 1A00h
dd 1B00h, 6E00h, 5A00h,	0A000h,	5200h, 3B00h, 0D600h, 0B300h
dd 2900h, 0E300h, 2F00h, 8400h,	5300h, 0D100h, 0, 0ED00h
dd 2000h, 0FC00h, 0B100h, 5B00h, 6A00h,	0CB00h,	0BE00h
dd 3900h, 4A00h, 4C00h,	5800h, 0CF00h, 0D000h, 0EF00h
dd 0AA00h, 0FB00h, 4300h, 4D00h, 3300h,	8500h, 4500h, 0F900h
dd 200h, 7F00h,	5000h, 3C00h, 9F00h, 0A800h, 5100h, 0A300h
dd 4000h, 8F00h, 9200h,	9D00h, 3800h, 0F500h, 0BC00h, 0B600h
dd 0DA00h, 2100h, 1000h, 0FF00h, 0F300h, 0D200h, 0CD00h
dd 0C00h, 1300h, 0EC00h, 5F00h,	9700h, 4400h, 1700h, 0C400h
dd 0A700h, 7E00h, 3D00h, 6400h,	5D00h, 1900h, 7300h, 6000h
dd 8100h, 4F00h, 0DC00h, 2200h,	2A00h, 9000h, 8800h, 4600h
dd 0EE00h, 0B800h, 1400h, 0DE00h, 5E00h, 0B00h,	0DB00h
dd 0E000h, 3200h, 3A00h, 0A00h,	4900h, 600h, 2400h, 5C00h
dd 0C200h, 0D300h, 0AC00h, 6200h, 9100h, 9500h,	0E400h
dd 7900h, 0E700h, 0C800h, 3700h, 6D00h,	8D00h, 0D500h
dd 4E00h, 0A900h, 6C00h, 5600h,	0F400h,	0EA00h,	6500h
dd 7A00h, 0AE00h, 800h,	0BA00h,	7800h, 2500h, 2E00h, 1C00h
dd 0A600h, 0B400h, 0C600h, 0E800h, 0DD00h, 7400h, 1F00h
dd 4B00h, 0BD00h, 8B00h, 8A00h,	7000h, 3E00h, 0B500h, 6600h
dd 4800h, 300h,	0F600h,	0E00h, 6100h, 3500h, 5700h, 0B900h
dd 8600h, 0C100h, 1D00h, 9E00h,	0E100h,	0F800h,	9800h
dd 1100h, 6900h, 0D900h, 8E00h,	9400h, 9B00h, 1E00h, 8700h
dd 0E900h, 0CE00h, 5500h, 2800h, 0DF00h, 8C00h,	0A100h
dd 8900h, 0D00h, 0BF00h, 0E600h, 4200h,	6800h, 4100h, 9900h
dd 2D00h, 0F00h, 0B000h, 5400h,	0BB00h,	1600h, 630000h
dd 7C0000h, 770000h, 7B0000h, 0F20000h,	6B0000h, 6F0000h
dd 0C50000h, 300000h, 10000h, 670000h, 2B0000h,	0FE0000h
dd 0D70000h, 0AB0000h, 760000h,	0CA0000h, 820000h, 0C90000h
dd 7D0000h, 0FA0000h, 590000h, 470000h,	0F00000h, 0AD0000h
dd 0D40000h, 0A20000h, 0AF0000h, 9C0000h, 0A40000h, 720000h
dd 0C00000h, 0B70000h, 0FD0000h, 930000h, 260000h, 360000h
dd 3F0000h, 0F70000h, 0CC0000h,	340000h, 0A50000h, 0E50000h
dd 0F10000h, 710000h, 0D80000h,	310000h, 150000h, 40000h
dd 0C70000h, 230000h, 0C30000h,	180000h, 960000h, 50000h
dd 9A0000h, 70000h, 120000h, 800000h, 0E20000h,	0EB0000h
dd 270000h, 0B20000h, 750000h, 90000h, 830000h,	2C0000h
dd 1A0000h, 1B0000h, 6E0000h, 5A0000h, 0A00000h, 520000h
dd 3B0000h, 0D60000h, 0B30000h,	290000h, 0E30000h, 2F0000h
dd 840000h, 530000h, 0D10000h, 0, 0ED0000h, 200000h, 0FC0000h
dd 0B10000h, 5B0000h, 6A0000h, 0CB0000h, 0BE0000h, 390000h
dd 4A0000h, 4C0000h, 580000h, 0CF0000h,	0D00000h, 0EF0000h
dd 0AA0000h, 0FB0000h, 430000h,	4D0000h, 330000h, 850000h
dd 450000h, 0F90000h, 20000h, 7F0000h, 500000h,	3C0000h
dd 9F0000h, 0A80000h, 510000h, 0A30000h, 400000h, 8F0000h
dd 920000h, 9D0000h, 380000h, 0F50000h,	0BC0000h, 0B60000h
dd 0DA0000h, 210000h, 100000h, 0FF0000h, 0F30000h, 0D20000h
dd 0CD0000h, 0C0000h, 130000h, 0EC0000h, 5F0000h, 970000h
dd 440000h, 170000h, 0C40000h, 0A70000h, 7E0000h, 3D0000h
dd 640000h, 5D0000h, 190000h, 730000h, 600000h,	810000h
dd 4F0000h, 0DC0000h, 220000h, 2A0000h,	900000h, 880000h
dd 460000h, 0EE0000h, 0B80000h,	140000h, 0DE0000h, 5E0000h
dd 0B0000h, 0DB0000h, 0E00000h,	320000h, 3A0000h, 0A0000h
dd 490000h, 60000h, 240000h, 5C0000h, 0C20000h,	0D30000h
dd 0AC0000h, 620000h, 910000h, 950000h,	0E40000h, 790000h
dd 0E70000h, 0C80000h, 370000h,	6D0000h, 8D0000h, 0D50000h
dd 4E0000h, 0A90000h, 6C0000h, 560000h,	0F40000h, 0EA0000h
dd 650000h, 7A0000h, 0AE0000h, 80000h, 0BA0000h, 780000h
dd 250000h, 2E0000h, 1C0000h, 0A60000h,	0B40000h, 0C60000h
dd 0E80000h, 0DD0000h, 740000h,	1F0000h, 4B0000h, 0BD0000h
dd 8B0000h, 8A0000h, 700000h, 3E0000h, 0B50000h, 660000h
dd 480000h, 30000h, 0F60000h, 0E0000h, 610000h,	350000h
dd 570000h, 0B90000h, 860000h, 0C10000h, 1D0000h, 9E0000h
dd 0E10000h, 0F80000h, 980000h,	110000h, 690000h, 0D90000h
dd 8E0000h, 940000h, 9B0000h, 1E0000h, 870000h,	0E90000h
dd 0CE0000h, 550000h, 280000h, 0DF0000h, 8C0000h, 0A10000h
dd 890000h, 0D0000h, 0BF0000h, 0E60000h, 420000h, 680000h
dd 410000h, 990000h, 2D0000h, 0F0000h, 0B00000h, 540000h
dd 0BB0000h, 160000h, 63000000h, 7C000000h, 77000000h
dd 7B000000h, 0F2000000h, 6B000000h, 6F000000h,	0C5000000h
dd 30000000h, 1000000h,	67000000h, 2B000000h, 0FE000000h
dd 0D7000000h, 0AB000000h, 76000000h, 0CA000000h, 82000000h
dd 0C9000000h, 7D000000h, 0FA000000h, 59000000h, 47000000h
dd 0F0000000h, 0AD000000h, 0D4000000h, 0A2000000h, 0AF000000h
dd 9C000000h, 0A4000000h, 72000000h, 0C0000000h, 0B7000000h
dd 0FD000000h, 93000000h, 26000000h, 36000000h,	3F000000h
dd 0F7000000h, 0CC000000h, 34000000h, 0A5000000h, 0E5000000h
dd 0F1000000h, 71000000h, 0D8000000h, 31000000h, 15000000h
dd 4000000h, 0C7000000h, 23000000h, 0C3000000h,	18000000h
dd 96000000h, 5000000h,	9A000000h, 7000000h, 12000000h
dd 80000000h, 0E2000000h, 0EB000000h, 27000000h, 0B2000000h
dd 75000000h, 9000000h,	83000000h, 2C000000h, 1A000000h
dd 1B000000h, 6E000000h, 5A000000h, 0A0000000h,	52000000h
dd 3B000000h, 0D6000000h, 0B3000000h, 29000000h, 0E3000000h
dd 2F000000h, 84000000h, 53000000h, 0D1000000h,	0, 0ED000000h
dd 20000000h, 0FC000000h, 0B1000000h, 5B000000h, 6A000000h
dd 0CB000000h, 0BE000000h, 39000000h, 4A000000h, 4C000000h
dd 58000000h, 0CF000000h, 0D0000000h, 0EF000000h, 0AA000000h
dd 0FB000000h, 43000000h, 4D000000h, 33000000h,	85000000h
dd 45000000h, 0F9000000h, 2000000h, 7F000000h, 50000000h
dd 3C000000h, 9F000000h, 0A8000000h, 51000000h,	0A3000000h
dd 40000000h, 8F000000h, 92000000h, 9D000000h, 38000000h
dd 0F5000000h, 0BC000000h, 0B6000000h, 0DA000000h, 21000000h
dd 10000000h, 0FF000000h, 0F3000000h, 0D2000000h, 0CD000000h
dd 0C000000h, 13000000h, 0EC000000h, 5F000000h,	97000000h
dd 44000000h, 17000000h, 0C4000000h, 0A7000000h, 7E000000h
dd 3D000000h, 64000000h, 5D000000h, 19000000h, 73000000h
dd 60000000h, 81000000h, 4F000000h, 0DC000000h,	22000000h
dd 2A000000h, 90000000h, 88000000h, 46000000h, 0EE000000h
dd 0B8000000h, 14000000h, 0DE000000h, 5E000000h, 0B000000h
dd 0DB000000h, 0E0000000h, 32000000h, 3A000000h, 0A000000h
dd 49000000h, 6000000h,	24000000h, 5C000000h, 0C2000000h
dd 0D3000000h, 0AC000000h, 62000000h, 91000000h, 95000000h
dd 0E4000000h, 79000000h, 0E7000000h, 0C8000000h, 37000000h
dd 6D000000h, 8D000000h, 0D5000000h, 4E000000h,	0A9000000h
dd 6C000000h, 56000000h, 0F4000000h, 0EA000000h, 65000000h
dd 7A000000h, 0AE000000h, 8000000h, 0BA000000h,	78000000h
dd 25000000h, 2E000000h, 1C000000h, 0A6000000h,	0B4000000h
dd 0C6000000h, 0E8000000h, 0DD000000h, 74000000h, 1F000000h
dd 4B000000h, 0BD000000h, 8B000000h, 8A000000h,	70000000h
dd 3E000000h, 0B5000000h, 66000000h, 48000000h,	3000000h
dd 0F6000000h, 0E000000h, 61000000h, 35000000h,	57000000h
dd 0B9000000h, 86000000h, 0C1000000h, 1D000000h, 9E000000h
dd 0E1000000h, 0F8000000h, 98000000h, 11000000h, 69000000h
dd 0D9000000h, 8E000000h, 94000000h, 9B000000h,	1E000000h
dd 87000000h, 0E9000000h, 0CE000000h, 55000000h, 28000000h
dd 0DF000000h, 8C000000h, 0A1000000h, 89000000h, 0D000000h
dd 0BF000000h, 0E6000000h, 42000000h, 68000000h, 41000000h
dd 99000000h, 2D000000h, 0F000000h, 0B0000000h,	54000000h
dd 0BB000000h, 16000000h
public _t_in
			
			
dd 0F1459D1Fh, 0AB58FAACh, 9303E34Bh, 55FA3020h, 0F66D76ADh
dd 9176CC88h, 254C02F5h, 0FCD7E54Fh, 0D7CB2AC5h, 80443526h
dd 8FA362B5h, 495AB1DEh, 671BBA25h, 980EEA45h, 0E1C0FE5Dh
dd 2752FC3h, 12F04C81h,	0A397468Dh, 0C6F9D36Bh,	0E75F8F03h
dd 959C9215h, 0EB7A6DBFh, 0DA595295h, 2D83BED4h, 0D3217458h
dd 2969E049h, 44C8C98Eh, 6A89C275h, 78798EF4h, 6B3E5899h
dd 0DD71B927h, 0B64FE1BEh, 17AD88F0h, 66AC20C9h, 0B43ACE7Dh
dd 184ADF63h, 82311AE5h, 60335197h, 457F5362h, 0E07764B1h
dd 84AE6BBBh, 1CA081FEh, 942B08F9h, 58684870h, 19FD458Fh
dd 876CDE94h, 0B7F87B52h, 23D373ABh, 0E2024B72h, 578F1FE3h
dd 2AAB5566h, 728EBB2h,	3C2B52Fh, 9A7BC586h, 0A50837D3h
dd 0F2872830h, 0B2A5BF23h, 0BA6A0302h, 5C8216EDh, 2B1CCF8Ah
dd 92B479A7h, 0F0F207F3h, 0A1E2694Eh, 0CDF4DA65h, 0D5BE0506h
dd 1F6234D1h, 8AFEA6C4h, 9D532E34h, 0A055F3A2h,	32E18A05h
dd 75EBF6A4h, 39EC830Bh, 0AAEF6040h, 69F715Eh, 51106EBDh
dd 0F98A213Eh, 3D06DD96h, 0AE053EDDh, 46BDE64Dh, 0B58D5491h
dd 55DC471h, 6FD40604h,	0FF155060h, 24FB9819h, 97E9BDD6h
dd 0CC434089h, 779ED967h, 0BD42E8B0h, 888B8907h, 385B19E7h
dd 0DBEEC879h, 470A7CA1h, 0E90F427Ch, 0C91E84F8h, 0, 83868009h
dd 48ED2B32h, 0AC70111Eh, 4E725A6Ch, 0FBFF0EFDh, 5638850Fh
dd 1ED5AE3Dh, 27392D36h, 64D90F0Ah, 21A65C68h, 0D1545B9Bh
dd 3A2E3624h, 0B1670A0Ch, 0FE75793h, 0D296EEB4h, 9E919B1Bh
dd 4FC5C080h, 0A220DC61h, 694B775Ah, 161A121Ch,	0ABA93E2h
dd 0E52AA0C0h, 43E0223Ch, 1D171B12h, 0B0D090Eh,	0ADC78BF2h
dd 0B9A8B62Dh, 0C8A91E14h, 8519F157h, 4C0775AFh, 0BBDD99EEh
dd 0FD607FA3h, 9F2601F7h, 0BCF5725Ch, 0C53B6644h, 347EFB5Bh
dd 7629438Bh, 0DCC623CBh, 68FCEDB6h, 63F1E4B8h,	0CADC31D7h
dd 10856342h, 40229713h, 2011C684h, 7D244A85h, 0F83DBBD2h
dd 1132F9AEh, 6DA129C7h, 4B2F9E1Dh, 0F330B2DCh,	0EC52860Dh
dd 0D0E3C177h, 6C16B32Bh, 99B970A9h, 0FA489411h, 2264E947h
dd 0C48CFCA8h, 1A3FF0A0h, 0D82C7D56h, 0EF903322h, 0C74E4987h
dd 0C1D138D9h, 0FEA2CA8Ch, 360BD498h, 0CF81F5A6h, 28DE7AA5h
dd 268EB7DAh, 0A4BFAD3Fh, 0E49D3A2Ch, 0D927850h, 9BCC5F6Ah
dd 62467E54h, 0C2138DF6h, 0E8B8D890h, 5EF7392Eh, 0F5AFC382h
dd 0BE805D9Fh, 7C93D069h, 0A92DD56Fh, 0B31225CFh, 3B99ACC8h
dd 0A77D1810h, 6E639CE8h, 7BBB3BDBh, 97826CDh, 0F418596Eh
dd 1B79AECh, 0A89A4F83h, 656E95E6h, 7EE6FFAAh, 8CFBC21h
dd 0E6E815EFh, 0D99BE7BAh, 0CE366F4Ah, 0D4099FEAh, 0D67CB029h
dd 0AFB2A431h, 31233F2Ah, 3094A5C6h, 0C066A235h, 37BC4E74h
dd 0A6CA82FCh, 0B0D090E0h, 15D8A733h, 4A9804F1h, 0F7DAEC41h
dd 0E50CD7Fh, 2FF69117h, 8DD64D76h, 4DB0EF43h, 544DAACCh
dd 0DF0496E4h, 0E3B5D19Eh, 1B886A4Ch, 0B81F2CC1h, 7F516546h
dd 4EA5E9Dh, 5D358C01h,	737487FAh, 2E410BFBh, 5A1D67B3h
dd 52D2DB92h, 335610E9h, 1347D66Dh, 8C61D79Ah, 7A0CA137h
dd 8E14F859h, 893C13EBh, 0EE27A9CEh, 35C961B7h,	0EDE51CE1h
dd 3CB1477Ah, 59DFD29Ch, 3F73F255h, 79CE1418h, 0BF37C773h
dd 0EACDF753h, 5BAAFD5Fh, 146F3DDFh, 86DB4478h,	81F3AFCAh
dd 3EC468B9h, 2C342438h, 5F40A3C2h, 72C31D16h, 0C25E2BCh
dd 8B493C28h, 41950DFFh, 7101A839h, 0DEB30C08h,	9CE4B4D8h
dd 90C15664h, 6184CB7Bh, 70B632D5h, 745C6C48h, 4257B8D0h
dd 0A7F45150h, 65417E53h, 0A4171AC3h, 5E273A96h, 6BAB3BCBh
dd 459D1FF1h, 58FAACABh, 3E34B93h, 0FA302055h, 6D76ADF6h
dd 76CC8891h, 4C02F525h, 0D7E54FFCh, 0CB2AC5D7h, 44352680h
dd 0A362B58Fh, 5AB1DE49h, 1BBA2567h, 0EEA4598h,	0C0FE5DE1h
dd 752FC302h, 0F04C8112h, 97468DA3h, 0F9D36BC6h, 5F8F03E7h
dd 9C921595h, 7A6DBFEBh, 595295DAh, 83BED42Dh, 217458D3h
dd 69E04929h, 0C8C98E44h, 89C2756Ah, 798EF478h,	3E58996Bh
dd 71B927DDh, 4FE1BEB6h, 0AD88F017h, 0AC20C966h, 3ACE7DB4h
dd 4ADF6318h, 311AE582h, 33519760h, 7F536245h, 7764B1E0h
dd 0AE6BBB84h, 0A081FE1Ch, 2B08F994h, 68487058h, 0FD458F19h
dd 6CDE9487h, 0F87B52B7h, 0D373AB23h, 24B72E2h,	8F1FE357h
dd 0AB55662Ah, 28EBB207h, 0C2B52F03h, 7BC5869Ah, 837D3A5h
dd 872830F2h, 0A5BF23B2h, 6A0302BAh, 8216ED5Ch,	1CCF8A2Bh
dd 0B479A792h, 0F207F3F0h, 0E2694EA1h, 0F4DA65CDh, 0BE0506D5h
dd 6234D11Fh, 0FEA6C48Ah, 532E349Dh, 55F3A2A0h,	0E18A0532h
dd 0EBF6A475h, 0EC830B39h, 0EF6040AAh, 9F715E06h, 106EBD51h
dd 8A213EF9h, 6DD963Dh,	53EDDAEh, 0BDE64D46h, 8D5491B5h
dd 5DC47105h, 0D406046Fh, 155060FFh, 0FB981924h, 0E9BDD697h
dd 434089CCh, 9ED96777h, 42E8B0BDh, 8B890788h, 5B19E738h
dd 0EEC879DBh, 0A7CA147h, 0F427CE9h, 1E84F8C9h,	0, 86800983h
dd 0ED2B3248h, 70111EACh, 725A6C4Eh, 0FF0EFDFBh, 38850F56h
dd 0D5AE3D1Eh, 392D3627h, 0D90F0A64h, 0A65C6821h, 545B9BD1h
dd 2E36243Ah, 670A0CB1h, 0E757930Fh, 96EEB4D2h,	919B1B9Eh
dd 0C5C0804Fh, 20DC61A2h, 4B775A69h, 1A121C16h,	0BA93E20Ah
dd 2AA0C0E5h, 0E0223C43h, 171B121Dh, 0D090E0Bh,	0C78BF2ADh
dd 0A8B62DB9h, 0A91E14C8h, 19F15785h, 775AF4Ch,	0DD99EEBBh
dd 607FA3FDh, 2601F79Fh, 0F5725CBCh, 3B6644C5h,	7EFB5B34h
dd 29438B76h, 0C623CBDCh, 0FCEDB668h, 0F1E4B863h, 0DC31D7CAh
dd 85634210h, 22971340h, 11C68420h, 244A857Dh, 3DBBD2F8h
dd 32F9AE11h, 0A129C76Dh, 2F9E1D4Bh, 30B2DCF3h,	52860DECh
dd 0E3C177D0h, 16B32B6Ch, 0B970A999h, 489411FAh, 64E94722h
dd 8CFCA8C4h, 3FF0A01Ah, 2C7D56D8h, 903322EFh, 4E4987C7h
dd 0D138D9C1h, 0A2CA8CFEh, 0BD49836h, 81F5A6CFh, 0DE7AA528h
dd 8EB7DA26h, 0BFAD3FA4h, 9D3A2CE4h, 9278500Dh,	0CC5F6A9Bh
dd 467E5462h, 138DF6C2h, 0B8D890E8h, 0F7392E5Eh, 0AFC382F5h
dd 805D9FBEh, 93D0697Ch, 2DD56FA9h, 1225CFB3h, 99ACC83Bh
dd 7D1810A7h, 639CE86Eh, 0BB3BDB7Bh, 7826CD09h,	18596EF4h
dd 0B79AEC01h, 9A4F83A8h, 6E95E665h, 0E6FFAA7Eh, 0CFBC2108h
dd 0E815EFE6h, 9BE7BAD9h, 366F4ACEh, 99FEAD4h, 7CB029D6h
dd 0B2A431AFh, 233F2A31h, 94A5C630h, 66A235C0h,	0BC4E7437h
dd 0CA82FCA6h, 0D090E0B0h, 0D8A73315h, 9804F14Ah, 0DAEC41F7h
dd 50CD7F0Eh, 0F691172Fh, 0D64D768Dh, 0B0EF434Dh, 4DAACC54h
dd 496E4DFh, 0B5D19EE3h, 886A4C1Bh, 1F2CC1B8h, 5165467Fh
dd 0EA5E9D04h, 358C015Dh, 7487FA73h, 410BFB2Eh,	1D67B35Ah
dd 0D2DB9252h, 5610E933h, 47D66D13h, 61D79A8Ch,	0CA1377Ah
dd 14F8598Eh, 3C13EB89h, 27A9CEEEh, 0C961B735h,	0E51CE1EDh
dd 0B1477A3Ch, 0DFD29C59h, 73F2553Fh, 0CE141879h, 37C773BFh
dd 0CDF753EAh, 0AAFD5F5Bh, 6F3DDF14h, 0DB447886h, 0F3AFCA81h
dd 0C468B93Eh, 3424382Ch, 40A3C25Fh, 0C31D1672h, 25E2BC0Ch
dd 493C288Bh, 950DFF41h, 1A83971h, 0B30C08DEh, 0E4B4D89Ch
dd 0C1566490h, 84CB7B61h, 0B632D570h, 5C6C4874h, 57B8D042h
dd 0F45150A7h, 417E5365h, 171AC3A4h, 273A965Eh,	0AB3BCB6Bh
dd 9D1FF145h, 0FAACAB58h, 0E34B9303h, 302055FAh, 76ADF66Dh
dd 0CC889176h, 2F5254Ch, 0E54FFCD7h, 2AC5D7CBh,	35268044h
dd 62B58FA3h, 0B1DE495Ah, 0BA25671Bh, 0EA45980Eh, 0FE5DE1C0h
dd 2FC30275h, 4C8112F0h, 468DA397h, 0D36BC6F9h,	8F03E75Fh
dd 9215959Ch, 6DBFEB7Ah, 5295DA59h, 0BED42D83h,	7458D321h
dd 0E0492969h, 0C98E44C8h, 0C2756A89h, 8EF47879h, 58996B3Eh
dd 0B927DD71h, 0E1BEB64Fh, 88F017ADh, 20C966ACh, 0CE7DB43Ah
dd 0DF63184Ah, 1AE58231h, 51976033h, 5362457Fh,	64B1E077h
dd 6BBB84AEh, 81FE1CA0h, 8F9942Bh, 48705868h, 458F19FDh
dd 0DE94876Ch, 7B52B7F8h, 73AB23D3h, 4B72E202h,	1FE3578Fh
dd 55662AABh, 0EBB20728h, 0B52F03C2h, 0C5869A7Bh, 37D3A508h
dd 2830F287h, 0BF23B2A5h, 302BA6Ah, 16ED5C82h, 0CF8A2B1Ch
dd 79A792B4h, 7F3F0F2h,	694EA1E2h, 0DA65CDF4h, 506D5BEh
dd 34D11F62h, 0A6C48AFEh, 2E349D53h, 0F3A2A055h, 8A0532E1h
dd 0F6A475EBh, 830B39ECh, 6040AAEFh, 715E069Fh,	6EBD5110h
dd 213EF98Ah, 0DD963D06h, 3EDDAE05h, 0E64D46BDh, 5491B58Dh
dd 0C471055Dh, 6046FD4h, 5060FF15h, 981924FBh, 0BDD697E9h
dd 4089CC43h, 0D967779Eh, 0E8B0BD42h, 8907888Bh, 19E7385Bh
dd 0C879DBEEh, 7CA1470Ah, 427CE90Fh, 84F8C91Eh,	0, 80098386h
dd 2B3248EDh, 111EAC70h, 5A6C4E72h, 0EFDFBFFh, 850F5638h
dd 0AE3D1ED5h, 2D362739h, 0F0A64D9h, 5C6821A6h,	5B9BD154h
dd 36243A2Eh, 0A0CB167h, 57930FE7h, 0EEB4D296h,	9B1B9E91h
dd 0C0804FC5h, 0DC61A220h, 775A694Bh, 121C161Ah, 93E20ABAh
dd 0A0C0E52Ah, 223C43E0h, 1B121D17h, 90E0B0Dh, 8BF2ADC7h
dd 0B62DB9A8h, 1E14C8A9h, 0F1578519h, 75AF4C07h, 99EEBBDDh
dd 7FA3FD60h, 1F79F26h,	725CBCF5h, 6644C53Bh, 0FB5B347Eh
dd 438B7629h, 23CBDCC6h, 0EDB668FCh, 0E4B863F1h, 31D7CADCh
dd 63421085h, 97134022h, 0C6842011h, 4A857D24h,	0BBD2F83Dh
dd 0F9AE1132h, 29C76DA1h, 9E1D4B2Fh, 0B2DCF330h, 860DEC52h
dd 0C177D0E3h, 0B32B6C16h, 70A999B9h, 9411FA48h, 0E9472264h
dd 0FCA8C48Ch, 0F0A01A3Fh, 7D56D82Ch, 3322EF90h, 4987C74Eh
dd 38D9C1D1h, 0CA8CFEA2h, 0D498360Bh, 0F5A6CF81h, 7AA528DEh
dd 0B7DA268Eh, 0AD3FA4BFh, 3A2CE49Dh, 78500D92h, 5F6A9BCCh
dd 7E546246h, 8DF6C213h, 0D890E8B8h, 392E5EF7h,	0C382F5AFh
dd 5D9FBE80h, 0D0697C93h, 0D56FA92Dh, 25CFB312h, 0ACC83B99h
dd 1810A77Dh, 9CE86E63h, 3BDB7BBBh, 26CD0978h, 596EF418h
dd 9AEC01B7h, 4F83A89Ah, 95E6656Eh, 0FFAA7EE6h,	0BC2108CFh
dd 15EFE6E8h, 0E7BAD99Bh, 6F4ACE36h, 9FEAD409h,	0B029D67Ch
dd 0A431AFB2h, 3F2A3123h, 0A5C63094h, 0A235C066h, 4E7437BCh
dd 82FCA6CAh, 90E0B0D0h, 0A73315D8h, 4F14A98h, 0EC41F7DAh
dd 0CD7F0E50h, 91172FF6h, 4D768DD6h, 0EF434DB0h, 0AACC544Dh
dd 96E4DF04h, 0D19EE3B5h, 6A4C1B88h, 2CC1B81Fh,	65467F51h
dd 5E9D04EAh, 8C015D35h, 87FA7374h, 0BFB2E41h, 67B35A1Dh
dd 0DB9252D2h, 10E93356h, 0D66D1347h, 0D79A8C61h, 0A1377A0Ch
dd 0F8598E14h, 13EB893Ch, 0A9CEEE27h, 61B735C9h, 1CE1EDE5h
dd 477A3CB1h, 0D29C59DFh, 0F2553F73h, 141879CEh, 0C773BF37h
dd 0F753EACDh, 0FD5F5BAAh, 3DDF146Fh, 447886DBh, 0AFCA81F3h
dd 68B93EC4h, 24382C34h, 0A3C25F40h, 1D1672C3h,	0E2BC0C25h
dd 3C288B49h, 0DFF4195h, 0A8397101h, 0C08DEB3h,	0B4D89CE4h
dd 566490C1h, 0CB7B6184h, 32D570B6h, 6C48745Ch,	0B8D04257h
dd 5150A7F4h, 7E536541h, 1AC3A417h, 3A965E27h, 3BCB6BABh
dd 1FF1459Dh, 0ACAB58FAh, 4B9303E3h, 2055FA30h,	0ADF66D76h
dd 889176CCh, 0F5254C02h, 4FFCD7E5h, 0C5D7CB2Ah, 26804435h
dd 0B58FA362h, 0DE495AB1h, 25671BBAh, 45980EEAh, 5DE1C0FEh
dd 0C302752Fh, 8112F04Ch, 8DA39746h, 6BC6F9D3h,	3E75F8Fh
dd 15959C92h, 0BFEB7A6Dh, 95DA5952h, 0D42D83BEh, 58D32174h
dd 492969E0h, 8E44C8C9h, 756A89C2h, 0F478798Eh,	996B3E58h
dd 27DD71B9h, 0BEB64FE1h, 0F017AD88h, 0C966AC20h, 7DB43ACEh
dd 63184ADFh, 0E582311Ah, 97603351h, 62457F53h,	0B1E07764h
dd 0BB84AE6Bh, 0FE1CA081h, 0F9942B08h, 70586848h, 8F19FD45h
dd 94876CDEh, 52B7F87Bh, 0AB23D373h, 72E2024Bh,	0E3578F1Fh
dd 662AAB55h, 0B20728EBh, 2F03C2B5h, 869A7BC5h,	0D3A50837h
dd 30F28728h, 23B2A5BFh, 2BA6A03h, 0ED5C8216h, 8A2B1CCFh
dd 0A792B479h, 0F3F0F207h, 4EA1E269h, 65CDF4DAh, 6D5BE05h
dd 0D11F6234h, 0C48AFEA6h, 349D532Eh, 0A2A055F3h, 532E18Ah
dd 0A475EBF6h, 0B39EC83h, 40AAEF60h, 5E069F71h,	0BD51106Eh
dd 3EF98A21h, 963D06DDh, 0DDAE053Eh, 4D46BDE6h,	91B58D54h
dd 71055DC4h, 46FD406h,	60FF1550h, 1924FB98h, 0D697E9BDh
dd 89CC4340h, 67779ED9h, 0B0BD42E8h, 7888B89h, 0E7385B19h
dd 79DBEEC8h, 0A1470A7Ch, 7CE90F42h, 0F8C91E84h, 0, 9838680h
dd 3248ED2Bh, 1EAC7011h, 6C4E725Ah, 0FDFBFF0Eh,	0F563885h
dd 3D1ED5AEh, 3627392Dh, 0A64D90Fh, 6821A65Ch, 9BD1545Bh
dd 243A2E36h, 0CB1670Ah, 930FE757h, 0B4D296EEh,	1B9E919Bh
dd 804FC5C0h, 61A220DCh, 5A694B77h, 1C161A12h, 0E20ABA93h
dd 0C0E52AA0h, 3C43E022h, 121D171Bh, 0E0B0D09h,	0F2ADC78Bh
dd 2DB9A8B6h, 14C8A91Eh, 578519F1h, 0AF4C0775h,	0EEBBDD99h
dd 0A3FD607Fh, 0F79F2601h, 5CBCF572h, 44C53B66h, 5B347EFBh
dd 8B762943h, 0CBDCC623h, 0B668FCEDh, 0B863F1E4h, 0D7CADC31h
dd 42108563h, 13402297h, 842011C6h, 857D244Ah, 0D2F83DBBh
dd 0AE1132F9h, 0C76DA129h, 1D4B2F9Eh, 0DCF330B2h, 0DEC5286h
dd 77D0E3C1h, 2B6C16B3h, 0A999B970h, 11FA4894h,	472264E9h
dd 0A8C48CFCh, 0A01A3FF0h, 56D82C7Dh, 22EF9033h, 87C74E49h
dd 0D9C1D138h, 8CFEA2CAh, 98360BD4h, 0A6CF81F5h, 0A528DE7Ah
dd 0DA268EB7h, 3FA4BFADh, 2CE49D3Ah, 500D9278h,	6A9BCC5Fh
dd 5462467Eh, 0F6C2138Dh, 90E8B8D8h, 2E5EF739h,	82F5AFC3h
dd 9FBE805Dh, 697C93D0h, 6FA92DD5h, 0CFB31225h,	0C83B99ACh
dd 10A77D18h, 0E86E639Ch, 0DB7BBB3Bh, 0CD097826h, 6EF41859h
dd 0EC01B79Ah, 83A89A4Fh, 0E6656E95h, 0AA7EE6FFh, 2108CFBCh
dd 0EFE6E815h, 0BAD99BE7h, 4ACE366Fh, 0EAD4099Fh, 29D67CB0h
dd 31AFB2A4h, 2A31233Fh, 0C63094A5h, 35C066A2h,	7437BC4Eh
dd 0FCA6CA82h, 0E0B0D090h, 3315D8A7h, 0F14A9804h, 41F7DAECh
dd 7F0E50CDh, 172FF691h, 768DD64Dh, 434DB0EFh, 0CC544DAAh
dd 0E4DF0496h, 9EE3B5D1h, 4C1B886Ah, 0C1B81F2Ch, 467F5165h
dd 9D04EA5Eh, 15D358Ch,	0FA737487h, 0FB2E410Bh,	0B35A1D67h
dd 9252D2DBh, 0E9335610h, 6D1347D6h, 9A8C61D7h,	377A0CA1h
dd 598E14F8h, 0EB893C13h, 0CEEE27A9h, 0B735C961h, 0E1EDE51Ch
dd 7A3CB147h, 9C59DFD2h, 553F73F2h, 1879CE14h, 73BF37C7h
dd 53EACDF7h, 5F5BAAFDh, 0DF146F3Dh, 7886DB44h,	0CA81F3AFh
dd 0B93EC468h, 382C3424h, 0C25F40A3h, 1672C31Dh, 0BC0C25E2h
dd 288B493Ch, 0FF41950Dh, 397101A8h, 8DEB30Ch, 0D89CE4B4h
dd 6490C156h, 7B6184CBh, 0D570B632h, 48745C6Ch,	0D04257B8h
public _t_il
			
			
dd 9Eh,	81h, 0F3h, 0D7h, 0FBh, 7Ch, 0E3h, 39h, 82h, 9Bh
dd 2Fh,	0FFh, 87h, 34h,	8Eh, 43h, 44h, 0C4h, 0DEh, 0E9h
dd 0CBh, 54h, 7Bh, 94h,	32h, 0A6h, 0C2h, 23h, 3Dh, 0EEh
dd 4Ch,	95h, 0Bh, 42h, 0FAh, 0C3h, 4Eh,	8, 2Eh,	0A1h, 66h
dd 28h,	0D9h, 24h, 0B2h, 76h, 5Bh, 0A2h, 49h, 6Dh, 8Bh
dd 0D1h, 25h, 72h, 0F8h, 0F6h, 64h, 86h, 68h, 98h, 16h
dd 0D4h, 0A4h, 5Ch, 0CCh, 5Dh, 65h, 0B6h, 92h, 6Ch, 70h
dd 48h,	50h, 0FDh, 0EDh, 0B9h, 0DAh, 5Eh, 15h, 46h, 57h
dd 0A7h, 8Dh, 9Dh, 84h,	90h, 0D8h, 0ABh, 0, 8Ch, 0BCh
dd 0D3h, 0Ah, 0F7h, 0E4h, 58h, 5, 0B8h,	0B3h, 45h, 6, 0D0h
dd 2Ch,	1Eh, 8Fh, 0CAh,	3Fh, 0Fh, 2, 0C1h, 0AFh, 0BDh
dd 3, 1, 13h, 8Ah, 6Bh,	3Ah, 91h, 11h, 41h, 4Fh, 67h, 0DCh
dd 0EAh, 97h, 0F2h, 0CFh, 0CEh,	0F0h, 0B4h, 0E6h, 73h
dd 96h,	0ACh, 74h, 22h,	0E7h, 0ADh, 35h, 85h, 0E2h, 0F9h
dd 37h,	0E8h, 1Ch, 75h,	0DFh, 6Eh, 47h,	0F1h, 1Ah, 71h
dd 1Dh,	29h, 0C5h, 89h,	6Fh, 0B7h, 62h,	0Eh, 0AAh, 18h
dd 0BEh, 1Bh, 0FCh, 56h, 3Eh, 4Bh, 0C6h, 0D2h, 79h, 20h
dd 9Ah,	0DBh, 0C0h, 0FEh, 78h, 0CDh, 5Ah, 0F4h,	1Fh, 0DDh
dd 0A8h, 33h, 88h, 7, 0C7h, 31h, 0B1h, 12h, 10h, 59h, 27h
dd 80h,	0ECh, 5Fh, 60h,	51h, 7Fh, 0A9h,	19h, 0B5h, 4Ah
dd 0Dh,	2Dh, 0E5h, 7Ah,	9Fh, 93h, 0C9h,	9Ch, 0EFh, 0A0h
dd 0E0h, 3Bh, 4Dh, 0AEh, 2Ah, 0F5h, 0B0h, 0C8h,	0EBh, 0BBh
dd 3Ch,	83h, 53h, 99h, 61h, 17h, 2Bh, 4, 7Eh, 0BAh, 77h
dd 0D6h, 26h, 0E1h, 69h, 14h, 63h, 55h,	21h, 0Ch, 7Dh
dd 5200h, 900h,	6A00h, 0D500h, 3000h, 3600h, 0A500h, 3800h
dd 0BF00h, 4000h, 0A300h, 9E00h, 8100h,	0F300h,	0D700h
dd 0FB00h, 7C00h, 0E300h, 3900h, 8200h,	9B00h, 2F00h, 0FF00h
dd 8700h, 3400h, 8E00h,	4300h, 4400h, 0C400h, 0DE00h, 0E900h
dd 0CB00h, 5400h, 7B00h, 9400h,	3200h, 0A600h, 0C200h
dd 2300h, 3D00h, 0EE00h, 4C00h,	9500h, 0B00h, 4200h, 0FA00h
dd 0C300h, 4E00h, 800h,	2E00h, 0A100h, 6600h, 2800h, 0D900h
dd 2400h, 0B200h, 7600h, 5B00h,	0A200h,	4900h, 6D00h, 8B00h
dd 0D100h, 2500h, 7200h, 0F800h, 0F600h, 6400h,	8600h
dd 6800h, 9800h, 1600h,	0D400h,	0A400h,	5C00h, 0CC00h
dd 5D00h, 6500h, 0B600h, 9200h,	6C00h, 7000h, 4800h, 5000h
dd 0FD00h, 0ED00h, 0B900h, 0DA00h, 5E00h, 1500h, 4600h
dd 5700h, 0A700h, 8D00h, 9D00h,	8400h, 9000h, 0D800h, 0AB00h
dd 0, 8C00h, 0BC00h, 0D300h, 0A00h, 0F700h, 0E400h, 5800h
dd 500h, 0B800h, 0B300h, 4500h,	600h, 0D000h, 2C00h, 1E00h
dd 8F00h, 0CA00h, 3F00h, 0F00h,	200h, 0C100h, 0AF00h, 0BD00h
dd 300h, 100h, 1300h, 8A00h, 6B00h, 3A00h, 9100h, 1100h
dd 4100h, 4F00h, 6700h,	0DC00h,	0EA00h,	9700h, 0F200h
dd 0CF00h, 0CE00h, 0F000h, 0B400h, 0E600h, 7300h, 9600h
dd 0AC00h, 7400h, 2200h, 0E700h, 0AD00h, 3500h,	8500h
dd 0E200h, 0F900h, 3700h, 0E800h, 1C00h, 7500h,	0DF00h
dd 6E00h, 4700h, 0F100h, 1A00h,	7100h, 1D00h, 2900h, 0C500h
dd 8900h, 6F00h, 0B700h, 6200h,	0E00h, 0AA00h, 1800h, 0BE00h
dd 1B00h, 0FC00h, 5600h, 3E00h,	4B00h, 0C600h, 0D200h
dd 7900h, 2000h, 9A00h,	0DB00h,	0C000h,	0FE00h,	7800h
dd 0CD00h, 5A00h, 0F400h, 1F00h, 0DD00h, 0A800h, 3300h
dd 8800h, 700h,	0C700h,	3100h, 0B100h, 1200h, 1000h, 5900h
dd 2700h, 8000h, 0EC00h, 5F00h,	6000h, 5100h, 7F00h, 0A900h
dd 1900h, 0B500h, 4A00h, 0D00h,	2D00h, 0E500h, 7A00h, 9F00h
dd 9300h, 0C900h, 9C00h, 0EF00h, 0A000h, 0E000h, 3B00h
dd 4D00h, 0AE00h, 2A00h, 0F500h, 0B000h, 0C800h, 0EB00h
dd 0BB00h, 3C00h, 8300h, 5300h,	9900h, 6100h, 1700h, 2B00h
dd 400h, 7E00h,	0BA00h,	7700h, 0D600h, 2600h, 0E100h, 6900h
dd 1400h, 6300h, 5500h,	2100h, 0C00h, 7D00h, 520000h, 90000h
dd 6A0000h, 0D50000h, 300000h, 360000h,	0A50000h, 380000h
dd 0BF0000h, 400000h, 0A30000h,	9E0000h, 810000h, 0F30000h
dd 0D70000h, 0FB0000h, 7C0000h,	0E30000h, 390000h, 820000h
dd 9B0000h, 2F0000h, 0FF0000h, 870000h,	340000h, 8E0000h
dd 430000h, 440000h, 0C40000h, 0DE0000h, 0E90000h, 0CB0000h
dd 540000h, 7B0000h, 940000h, 320000h, 0A60000h, 0C20000h
dd 230000h, 3D0000h, 0EE0000h, 4C0000h,	950000h, 0B0000h
dd 420000h, 0FA0000h, 0C30000h,	4E0000h, 80000h, 2E0000h
dd 0A10000h, 660000h, 280000h, 0D90000h, 240000h, 0B20000h
dd 760000h, 5B0000h, 0A20000h, 490000h,	6D0000h, 8B0000h
dd 0D10000h, 250000h, 720000h, 0F80000h, 0F60000h, 640000h
dd 860000h, 680000h, 980000h, 160000h, 0D40000h, 0A40000h
dd 5C0000h, 0CC0000h, 5D0000h, 650000h,	0B60000h, 920000h
dd 6C0000h, 700000h, 480000h, 500000h, 0FD0000h, 0ED0000h
dd 0B90000h, 0DA0000h, 5E0000h,	150000h, 460000h, 570000h
dd 0A70000h, 8D0000h, 9D0000h, 840000h,	900000h, 0D80000h
dd 0AB0000h, 0,	8C0000h, 0BC0000h, 0D30000h, 0A0000h, 0F70000h
dd 0E40000h, 580000h, 50000h, 0B80000h,	0B30000h, 450000h
dd 60000h, 0D00000h, 2C0000h, 1E0000h, 8F0000h,	0CA0000h
dd 3F0000h, 0F0000h, 20000h, 0C10000h, 0AF0000h, 0BD0000h
dd 30000h, 10000h, 130000h, 8A0000h, 6B0000h, 3A0000h
dd 910000h, 110000h, 410000h, 4F0000h, 670000h,	0DC0000h
dd 0EA0000h, 970000h, 0F20000h,	0CF0000h, 0CE0000h, 0F00000h
dd 0B40000h, 0E60000h, 730000h,	960000h, 0AC0000h, 740000h
dd 220000h, 0E70000h, 0AD0000h,	350000h, 850000h, 0E20000h
dd 0F90000h, 370000h, 0E80000h,	1C0000h, 750000h, 0DF0000h
dd 6E0000h, 470000h, 0F10000h, 1A0000h,	710000h, 1D0000h
dd 290000h, 0C50000h, 890000h, 6F0000h,	0B70000h, 620000h
dd 0E0000h, 0AA0000h, 180000h, 0BE0000h, 1B0000h, 0FC0000h
dd 560000h, 3E0000h, 4B0000h, 0C60000h,	0D20000h, 790000h
dd 200000h, 9A0000h, 0DB0000h, 0C00000h, 0FE0000h, 780000h
dd 0CD0000h, 5A0000h, 0F40000h,	1F0000h, 0DD0000h, 0A80000h
dd 330000h, 880000h, 70000h, 0C70000h, 310000h,	0B10000h
dd 120000h, 100000h, 590000h, 270000h, 800000h,	0EC0000h
dd 5F0000h, 600000h, 510000h, 7F0000h, 0A90000h, 190000h
dd 0B50000h, 4A0000h, 0D0000h, 2D0000h,	0E50000h, 7A0000h
dd 9F0000h, 930000h, 0C90000h, 9C0000h,	0EF0000h, 0A00000h
dd 0E00000h, 3B0000h, 4D0000h, 0AE0000h, 2A0000h, 0F50000h
dd 0B00000h, 0C80000h, 0EB0000h, 0BB0000h, 3C0000h, 830000h
dd 530000h, 990000h, 610000h, 170000h, 2B0000h,	40000h
dd 7E0000h, 0BA0000h, 770000h, 0D60000h, 260000h, 0E10000h
dd 690000h, 140000h, 630000h, 550000h, 210000h,	0C0000h
dd 7D0000h, 52000000h, 9000000h, 6A000000h, 0D5000000h
dd 30000000h, 36000000h, 0A5000000h, 38000000h,	0BF000000h
dd 40000000h, 0A3000000h, 9E000000h, 81000000h,	0F3000000h
dd 0D7000000h, 0FB000000h, 7C000000h, 0E3000000h, 39000000h
dd 82000000h, 9B000000h, 2F000000h, 0FF000000h,	87000000h
dd 34000000h, 8E000000h, 43000000h, 44000000h, 0C4000000h
dd 0DE000000h, 0E9000000h, 0CB000000h, 54000000h, 7B000000h
dd 94000000h, 32000000h, 0A6000000h, 0C2000000h, 23000000h
dd 3D000000h, 0EE000000h, 4C000000h, 95000000h,	0B000000h
dd 42000000h, 0FA000000h, 0C3000000h, 4E000000h, 8000000h
dd 2E000000h, 0A1000000h, 66000000h, 28000000h,	0D9000000h
dd 24000000h, 0B2000000h, 76000000h, 5B000000h,	0A2000000h
dd 49000000h, 6D000000h, 8B000000h, 0D1000000h,	25000000h
dd 72000000h, 0F8000000h, 0F6000000h, 64000000h, 86000000h
dd 68000000h, 98000000h, 16000000h, 0D4000000h,	0A4000000h
dd 5C000000h, 0CC000000h, 5D000000h, 65000000h,	0B6000000h
dd 92000000h, 6C000000h, 70000000h, 48000000h, 50000000h
dd 0FD000000h, 0ED000000h, 0B9000000h, 0DA000000h, 5E000000h
dd 15000000h, 46000000h, 57000000h, 0A7000000h,	8D000000h
dd 9D000000h, 84000000h, 90000000h, 0D8000000h,	0AB000000h
dd 0, 8C000000h, 0BC000000h, 0D3000000h, 0A000000h, 0F7000000h
dd 0E4000000h, 58000000h, 5000000h, 0B8000000h,	0B3000000h
dd 45000000h, 6000000h,	0D0000000h, 2C000000h, 1E000000h
dd 8F000000h, 0CA000000h, 3F000000h, 0F000000h,	2000000h
dd 0C1000000h, 0AF000000h, 0BD000000h, 3000000h, 1000000h
dd 13000000h, 8A000000h, 6B000000h, 3A000000h, 91000000h
dd 11000000h, 41000000h, 4F000000h, 67000000h, 0DC000000h
dd 0EA000000h, 97000000h, 0F2000000h, 0CF000000h, 0CE000000h
dd 0F0000000h, 0B4000000h, 0E6000000h, 73000000h, 96000000h
dd 0AC000000h, 74000000h, 22000000h, 0E7000000h, 0AD000000h
dd 35000000h, 85000000h, 0E2000000h, 0F9000000h, 37000000h
dd 0E8000000h, 1C000000h, 75000000h, 0DF000000h, 6E000000h
dd 47000000h, 0F1000000h, 1A000000h, 71000000h,	1D000000h
dd 29000000h, 0C5000000h, 89000000h, 6F000000h,	0B7000000h
dd 62000000h, 0E000000h, 0AA000000h, 18000000h,	0BE000000h
dd 1B000000h, 0FC000000h, 56000000h, 3E000000h,	4B000000h
dd 0C6000000h, 0D2000000h, 79000000h, 20000000h, 9A000000h
dd 0DB000000h, 0C0000000h, 0FE000000h, 78000000h, 0CD000000h
dd 5A000000h, 0F4000000h, 1F000000h, 0DD000000h, 0A8000000h
dd 33000000h, 88000000h, 7000000h, 0C7000000h, 31000000h
dd 0B1000000h, 12000000h, 10000000h, 59000000h,	27000000h
dd 80000000h, 0EC000000h, 5F000000h, 60000000h,	51000000h
dd 7F000000h, 0A9000000h, 19000000h, 0B5000000h, 4A000000h
dd 0D000000h, 2D000000h, 0E5000000h, 7A000000h,	9F000000h
dd 93000000h, 0C9000000h, 9C000000h, 0EF000000h, 0A0000000h
dd 0E0000000h, 3B000000h, 4D000000h, 0AE000000h, 2A000000h
dd 0F5000000h, 0B0000000h, 0C8000000h, 0EB000000h, 0BB000000h
dd 3C000000h, 83000000h, 53000000h, 99000000h, 61000000h
dd 17000000h, 2B000000h, 4000000h, 7E000000h, 0BA000000h
dd 77000000h, 0D6000000h, 26000000h, 0E1000000h, 69000000h
dd 14000000h, 63000000h, 55000000h, 21000000h, 0C000000h
dd 7D000000h
public _t_im
			
			
dd 3A2E3624h, 31233F2Ah, 58684870h, 5365417Eh, 4E725A6Ch
dd 457F5362h, 745C6C48h, 7F516546h, 62467E54h, 694B775Ah
dd 0B0D090E0h, 0BBDD99EEh, 0A6CA82FCh, 0ADC78BF2h, 9CE4B4D8h
dd 97E9BDD6h, 8AFEA6C4h, 81F3AFCAh, 0E8B8D890h,	0E3B5D19Eh
dd 0FEA2CA8Ch, 0F5AFC382h, 0C48CFCA8h, 0CF81F5A6h, 0D296EEB4h
dd 0D99BE7BAh, 7BBB3BDBh, 70B632D5h, 6DA129C7h,	66AC20C9h
dd 578F1FE3h, 5C8216EDh, 41950DFFh, 4A9804F1h, 23D373ABh
dd 28DE7AA5h, 35C961B7h, 3EC468B9h, 0FE75793h, 4EA5E9Dh
dd 19FD458Fh, 12F04C81h, 0CB6BAB3Bh, 0C066A235h, 0DD71B927h
dd 0D67CB029h, 0E75F8F03h, 0EC52860Dh, 0F1459D1Fh, 0FA489411h
dd 9303E34Bh, 980EEA45h, 8519F157h, 8E14F859h, 0BF37C773h
dd 0B43ACE7Dh, 0A92DD56Fh, 0A220DC61h, 0F66D76ADh, 0FD607FA3h
dd 0E07764B1h, 0EB7A6DBFh, 0DA595295h, 0D1545B9Bh, 0CC434089h
dd 0C74E4987h, 0AE053EDDh, 0A50837D3h, 0B81F2CC1h, 0B31225CFh
dd 82311AE5h, 893C13EBh, 942B08F9h, 9F2601F7h, 46BDE64Dh
dd 4DB0EF43h, 50A7F451h, 5BAAFD5Fh, 6A89C275h, 6184CB7Bh
dd 7C93D069h, 779ED967h, 1ED5AE3Dh, 15D8A733h, 8CFBC21h
dd 3C2B52Fh, 32E18A05h,	39EC830Bh, 24FB9819h, 2FF69117h
dd 8DD64D76h, 86DB4478h, 9BCC5F6Ah, 90C15664h, 0A1E2694Eh
dd 0AAEF6040h, 0B7F87B52h, 0BCF5725Ch, 0D5BE0506h, 0DEB30C08h
dd 0C3A4171Ah, 0C8A91E14h, 0F98A213Eh, 0F2872830h, 0EF903322h
dd 0E49D3A2Ch, 3D06DD96h, 360BD498h, 2B1CCF8Ah,	2011C684h
dd 1132F9AEh, 1A3FF0A0h, 728EBB2h, 0C25E2BCh, 656E95E6h
dd 6E639CE8h, 737487FAh, 78798EF4h, 495AB1DEh, 4257B8D0h
dd 5F40A3C2h, 544DAACCh, 0F7DAEC41h, 0FCD7E54Fh, 0E1C0FE5Dh
dd 0EACDF753h, 0DBEEC879h, 0D0E3C177h, 0CDF4DA65h, 0C6F9D36Bh
dd 0AFB2A431h, 0A4BFAD3Fh, 0B9A8B62Dh, 0B2A5BF23h, 83868009h
dd 888B8907h, 959C9215h, 9E919B1Bh, 470A7CA1h, 4C0775AFh
dd 51106EBDh, 5A1D67B3h, 6B3E5899h, 60335197h, 7D244A85h
dd 7629438Bh, 1F6234D1h, 146F3DDFh, 97826CDh, 2752FC3h
dd 335610E9h, 385B19E7h, 254C02F5h, 2E410BFBh, 8C61D79Ah
dd 876CDE94h, 9A7BC586h, 9176CC88h, 0A055F3A2h,	0AB58FAACh
dd 0B64FE1BEh, 0BD42E8B0h, 0D4099FEAh, 0DF0496E4h, 0C2138DF6h
dd 0C91E84F8h, 0F83DBBD2h, 0F330B2DCh, 0EE27A9CEh, 0E52AA0C0h
dd 3CB1477Ah, 37BC4E74h, 2AAB5566h, 21A65C68h, 10856342h
dd 1B886A4Ch, 69F715Eh,	0D927850h, 64D90F0Ah, 6FD40604h
dd 72C31D16h, 79CE1418h, 48ED2B32h, 43E0223Ch, 5EF7392Eh
dd 55FA3020h, 1B79AECh,	0ABA93E2h, 17AD88F0h, 1CA081FEh
dd 2D83BED4h, 268EB7DAh, 3B99ACC8h, 3094A5C6h, 59DFD29Ch
dd 52D2DB92h, 4FC5C080h, 44C8C98Eh, 75EBF6A4h, 7EE6FFAAh
dd 63F1E4B8h, 68FCEDB6h, 0B1670A0Ch, 0BA6A0302h, 0A77D1810h
dd 0AC70111Eh, 9D532E34h, 965E273Ah, 8B493C28h,	80443526h
dd 0E90F427Ch, 0E2024B72h, 0FF155060h, 0F418596Eh, 0C53B6644h
dd 0CE366F4Ah, 0D3217458h, 0D82C7D56h, 7A0CA137h, 7101A839h
dd 6C16B32Bh, 671BBA25h, 5638850Fh, 5D358C01h, 40229713h
dd 4B2F9E1Dh, 2264E947h, 2969E049h, 347EFB5Bh, 3F73F255h
dd 0E50CD7Fh, 55DC471h,	184ADF63h, 1347D66Dh, 0CADC31D7h
dd 0C1D138D9h, 0DCC623CBh, 0D7CB2AC5h, 0E6E815EFh, 0EDE51CE1h
dd 0F0F207F3h, 0FBFF0EFDh, 92B479A7h, 99B970A9h, 84AE6BBBh
dd 8FA362B5h, 0BE805D9Fh, 0B58D5491h, 0A89A4F83h, 0A397468Dh
dd 0, 0D090E0Bh, 1A121C16h, 171B121Dh, 3424382Ch, 392D3627h
dd 2E36243Ah, 233F2A31h, 68487058h, 65417E53h, 725A6C4Eh
dd 7F536245h, 5C6C4874h, 5165467Fh, 467E5462h, 4B775A69h
dd 0D090E0B0h, 0DD99EEBBh, 0CA82FCA6h, 0C78BF2ADh, 0E4B4D89Ch
dd 0E9BDD697h, 0FEA6C48Ah, 0F3AFCA81h, 0B8D890E8h, 0B5D19EE3h
dd 0A2CA8CFEh, 0AFC382F5h, 8CFCA8C4h, 81F5A6CFh, 96EEB4D2h
dd 9BE7BAD9h, 0BB3BDB7Bh, 0B632D570h, 0A129C76Dh, 0AC20C966h
dd 8F1FE357h, 8216ED5Ch, 950DFF41h, 9804F14Ah, 0D373AB23h
dd 0DE7AA528h, 0C961B735h, 0C468B93Eh, 0E757930Fh, 0EA5E9D04h
dd 0FD458F19h, 0F04C8112h, 6BAB3BCBh, 66A235C0h, 71B927DDh
dd 7CB029D6h, 5F8F03E7h, 52860DECh, 459D1FF1h, 489411FAh
dd 3E34B93h, 0EEA4598h,	19F15785h, 14F8598Eh, 37C773BFh
dd 3ACE7DB4h, 2DD56FA9h, 20DC61A2h, 6D76ADF6h, 607FA3FDh
dd 7764B1E0h, 7A6DBFEBh, 595295DAh, 545B9BD1h, 434089CCh
dd 4E4987C7h, 53EDDAEh,	837D3A5h, 1F2CC1B8h, 1225CFB3h
dd 311AE582h, 3C13EB89h, 2B08F994h, 2601F79Fh, 0BDE64D46h
dd 0B0EF434Dh, 0A7F45150h, 0AAFD5F5Bh, 89C2756Ah, 84CB7B61h
dd 93D0697Ch, 9ED96777h, 0D5AE3D1Eh, 0D8A73315h, 0CFBC2108h
dd 0C2B52F03h, 0E18A0532h, 0EC830B39h, 0FB981924h, 0F691172Fh
dd 0D64D768Dh, 0DB447886h, 0CC5F6A9Bh, 0C1566490h, 0E2694EA1h
dd 0EF6040AAh, 0F87B52B7h, 0F5725CBCh, 0BE0506D5h, 0B30C08DEh
dd 0A4171AC3h, 0A91E14C8h, 8A213EF9h, 872830F2h, 903322EFh
dd 9D3A2CE4h, 6DD963Dh,	0BD49836h, 1CCF8A2Bh, 11C68420h
dd 32F9AE11h, 3FF0A01Ah, 28EBB207h, 25E2BC0Ch, 6E95E665h
dd 639CE86Eh, 7487FA73h, 798EF478h, 5AB1DE49h, 57B8D042h
dd 40A3C25Fh, 4DAACC54h, 0DAEC41F7h, 0D7E54FFCh, 0C0FE5DE1h
dd 0CDF753EAh, 0EEC879DBh, 0E3C177D0h, 0F4DA65CDh, 0F9D36BC6h
dd 0B2A431AFh, 0BFAD3FA4h, 0A8B62DB9h, 0A5BF23B2h, 86800983h
dd 8B890788h, 9C921595h, 919B1B9Eh, 0A7CA147h, 775AF4Ch
dd 106EBD51h, 1D67B35Ah, 3E58996Bh, 33519760h, 244A857Dh
dd 29438B76h, 6234D11Fh, 6F3DDF14h, 7826CD09h, 752FC302h
dd 5610E933h, 5B19E738h, 4C02F525h, 410BFB2Eh, 61D79A8Ch
dd 6CDE9487h, 7BC5869Ah, 76CC8891h, 55F3A2A0h, 58FAACABh
dd 4FE1BEB6h, 42E8B0BDh, 99FEAD4h, 496E4DFh, 138DF6C2h
dd 1E84F8C9h, 3DBBD2F8h, 30B2DCF3h, 27A9CEEEh, 2AA0C0E5h
dd 0B1477A3Ch, 0BC4E7437h, 0AB55662Ah, 0A65C6821h, 85634210h
dd 886A4C1Bh, 9F715E06h, 9278500Dh, 0D90F0A64h,	0D406046Fh
dd 0C31D1672h, 0CE141879h, 0ED2B3248h, 0E0223C43h, 0F7392E5Eh
dd 0FA302055h, 0B79AEC01h, 0BA93E20Ah, 0AD88F017h, 0A081FE1Ch
dd 83BED42Dh, 8EB7DA26h, 99ACC83Bh, 94A5C630h, 0DFD29C59h
dd 0D2DB9252h, 0C5C0804Fh, 0C8C98E44h, 0EBF6A475h, 0E6FFAA7Eh
dd 0F1E4B863h, 0FCEDB668h, 670A0CB1h, 6A0302BAh, 7D1810A7h
dd 70111EACh, 532E349Dh, 5E273A96h, 493C288Bh, 44352680h
dd 0F427CE9h, 24B72E2h,	155060FFh, 18596EF4h, 3B6644C5h
dd 366F4ACEh, 217458D3h, 2C7D56D8h, 0CA1377Ah, 1A83971h
dd 16B32B6Ch, 1BBA2567h, 38850F56h, 358C015Dh, 22971340h
dd 2F9E1D4Bh, 64E94722h, 69E04929h, 7EFB5B34h, 73F2553Fh
dd 50CD7F0Eh, 5DC47105h, 4ADF6318h, 47D66D13h, 0DC31D7CAh
dd 0D138D9C1h, 0C623CBDCh, 0CB2AC5D7h, 0E815EFE6h, 0E51CE1EDh
dd 0F207F3F0h, 0FF0EFDFBh, 0B479A792h, 0B970A999h, 0AE6BBB84h
dd 0A362B58Fh, 805D9FBEh, 8D5491B5h, 9A4F83A8h,	97468DA3h
dd 0, 90E0B0Dh,	121C161Ah, 1B121D17h, 24382C34h, 2D362739h
dd 36243A2Eh, 3F2A3123h, 48705868h, 417E5365h, 5A6C4E72h
dd 5362457Fh, 6C48745Ch, 65467F51h, 7E546246h, 775A694Bh
dd 90E0B0D0h, 99EEBBDDh, 82FCA6CAh, 8BF2ADC7h, 0B4D89CE4h
dd 0BDD697E9h, 0A6C48AFEh, 0AFCA81F3h, 0D890E8B8h, 0D19EE3B5h
dd 0CA8CFEA2h, 0C382F5AFh, 0FCA8C48Ch, 0F5A6CF81h, 0EEB4D296h
dd 0E7BAD99Bh, 3BDB7BBBh, 32D570B6h, 29C76DA1h,	20C966ACh
dd 1FE3578Fh, 16ED5C82h, 0DFF4195h, 4F14A98h, 73AB23D3h
dd 7AA528DEh, 61B735C9h, 68B93EC4h, 57930FE7h, 5E9D04EAh
dd 458F19FDh, 4C8112F0h, 0AB3BCB6Bh, 0A235C066h, 0B927DD71h
dd 0B029D67Ch, 8F03E75Fh, 860DEC52h, 9D1FF145h,	9411FA48h
dd 0E34B9303h, 0EA45980Eh, 0F1578519h, 0F8598E14h, 0C773BF37h
dd 0CE7DB43Ah, 0D56FA92Dh, 0DC61A220h, 76ADF66Dh, 7FA3FD60h
dd 64B1E077h, 6DBFEB7Ah, 5295DA59h, 5B9BD154h, 4089CC43h
dd 4987C74Eh, 3EDDAE05h, 37D3A508h, 2CC1B81Fh, 25CFB312h
dd 1AE58231h, 13EB893Ch, 8F9942Bh, 1F79F26h, 0E64D46BDh
dd 0EF434DB0h, 0F45150A7h, 0FD5F5BAAh, 0C2756A89h, 0CB7B6184h
dd 0D0697C93h, 0D967779Eh, 0AE3D1ED5h, 0A73315D8h, 0BC2108CFh
dd 0B52F03C2h, 8A0532E1h, 830B39ECh, 981924FBh,	91172FF6h
dd 4D768DD6h, 447886DBh, 5F6A9BCCh, 566490C1h, 694EA1E2h
dd 6040AAEFh, 7B52B7F8h, 725CBCF5h, 506D5BEh, 0C08DEB3h
dd 171AC3A4h, 1E14C8A9h, 213EF98Ah, 2830F287h, 3322EF90h
dd 3A2CE49Dh, 0DD963D06h, 0D498360Bh, 0CF8A2B1Ch, 0C6842011h
dd 0F9AE1132h, 0F0A01A3Fh, 0EBB20728h, 0E2BC0C25h, 95E6656Eh
dd 9CE86E63h, 87FA7374h, 8EF47879h, 0B1DE495Ah,	0B8D04257h
dd 0A3C25F40h, 0AACC544Dh, 0EC41F7DAh, 0E54FFCD7h, 0FE5DE1C0h
dd 0F753EACDh, 0C879DBEEh, 0C177D0E3h, 0DA65CDF4h, 0D36BC6F9h
dd 0A431AFB2h, 0AD3FA4BFh, 0B62DB9A8h, 0BF23B2A5h, 80098386h
dd 8907888Bh, 9215959Ch, 9B1B9E91h, 7CA1470Ah, 75AF4C07h
dd 6EBD5110h, 67B35A1Dh, 58996B3Eh, 51976033h, 4A857D24h
dd 438B7629h, 34D11F62h, 3DDF146Fh, 26CD0978h, 2FC30275h
dd 10E93356h, 19E7385Bh, 2F5254Ch, 0BFB2E41h, 0D79A8C61h
dd 0DE94876Ch, 0C5869A7Bh, 0CC889176h, 0F3A2A055h, 0FAACAB58h
dd 0E1BEB64Fh, 0E8B0BD42h, 9FEAD409h, 96E4DF04h, 8DF6C213h
dd 84F8C91Eh, 0BBD2F83Dh, 0B2DCF330h, 0A9CEEE27h, 0A0C0E52Ah
dd 477A3CB1h, 4E7437BCh, 55662AABh, 5C6821A6h, 63421085h
dd 6A4C1B88h, 715E069Fh, 78500D92h, 0F0A64D9h, 6046FD4h
dd 1D1672C3h, 141879CEh, 2B3248EDh, 223C43E0h, 392E5EF7h
dd 302055FAh, 9AEC01B7h, 93E20ABAh, 88F017ADh, 81FE1CA0h
dd 0BED42D83h, 0B7DA268Eh, 0ACC83B99h, 0A5C63094h, 0D29C59DFh
dd 0DB9252D2h, 0C0804FC5h, 0C98E44C8h, 0F6A475EBh, 0FFAA7EE6h
dd 0E4B863F1h, 0EDB668FCh, 0A0CB167h, 302BA6Ah,	1810A77Dh
dd 111EAC70h, 2E349D53h, 273A965Eh, 3C288B49h, 35268044h
dd 427CE90Fh, 4B72E202h, 5060FF15h, 596EF418h, 6644C53Bh
dd 6F4ACE36h, 7458D321h, 7D56D82Ch, 0A1377A0Ch,	0A8397101h
dd 0B32B6C16h, 0BA25671Bh, 850F5638h, 8C015D35h, 97134022h
dd 9E1D4B2Fh, 0E9472264h, 0E0492969h, 0FB5B347Eh, 0F2553F73h
dd 0CD7F0E50h, 0C471055Dh, 0DF63184Ah, 0D66D1347h, 31D7CADCh
dd 38D9C1D1h, 23CBDCC6h, 2AC5D7CBh, 15EFE6E8h, 1CE1EDE5h
dd 7F3F0F2h, 0EFDFBFFh,	79A792B4h, 70A999B9h, 6BBB84AEh
dd 62B58FA3h, 5D9FBE80h, 5491B58Dh, 4F83A89Ah, 468DA397h
dd 0, 0E0B0D09h, 1C161A12h, 121D171Bh, 382C3424h, 3627392Dh
dd 243A2E36h, 2A31233Fh, 70586848h, 7E536541h, 6C4E725Ah
dd 62457F53h, 48745C6Ch, 467F5165h, 5462467Eh, 5A694B77h
dd 0E0B0D090h, 0EEBBDD99h, 0FCA6CA82h, 0F2ADC78Bh, 0D89CE4B4h
dd 0D697E9BDh, 0C48AFEA6h, 0CA81F3AFh, 90E8B8D8h, 9EE3B5D1h
dd 8CFEA2CAh, 82F5AFC3h, 0A8C48CFCh, 0A6CF81F5h, 0B4D296EEh
dd 0BAD99BE7h, 0DB7BBB3Bh, 0D570B632h, 0C76DA129h, 0C966AC20h
dd 0E3578F1Fh, 0ED5C8216h, 0FF41950Dh, 0F14A9804h, 0AB23D373h
dd 0A528DE7Ah, 0B735C961h, 0B93EC468h, 930FE757h, 9D04EA5Eh
dd 8F19FD45h, 8112F04Ch, 3BCB6BABh, 35C066A2h, 27DD71B9h
dd 29D67CB0h, 3E75F8Fh,	0DEC5286h, 1FF1459Dh, 11FA4894h
dd 4B9303E3h, 45980EEAh, 578519F1h, 598E14F8h, 73BF37C7h
dd 7DB43ACEh, 6FA92DD5h, 61A220DCh, 0ADF66D76h,	0A3FD607Fh
dd 0B1E07764h, 0BFEB7A6Dh, 95DA5952h, 9BD1545Bh, 89CC4340h
dd 87C74E49h, 0DDAE053Eh, 0D3A50837h, 0C1B81F2Ch, 0CFB31225h
dd 0E582311Ah, 0EB893C13h, 0F9942B08h, 0F79F2601h, 4D46BDE6h
dd 434DB0EFh, 5150A7F4h, 5F5BAAFDh, 756A89C2h, 7B6184CBh
dd 697C93D0h, 67779ED9h, 3D1ED5AEh, 3315D8A7h, 2108CFBCh
dd 2F03C2B5h, 532E18Ah,	0B39EC83h, 1924FB98h, 172FF691h
dd 768DD64Dh, 7886DB44h, 6A9BCC5Fh, 6490C156h, 4EA1E269h
dd 40AAEF60h, 52B7F87Bh, 5CBCF572h, 6D5BE05h, 8DEB30Ch
dd 1AC3A417h, 14C8A91Eh, 3EF98A21h, 30F28728h, 22EF9033h
dd 2CE49D3Ah, 963D06DDh, 98360BD4h, 8A2B1CCFh, 842011C6h
dd 0AE1132F9h, 0A01A3FF0h, 0B20728EBh, 0BC0C25E2h, 0E6656E95h
dd 0E86E639Ch, 0FA737487h, 0F478798Eh, 0DE495AB1h, 0D04257B8h
dd 0C25F40A3h, 0CC544DAAh, 41F7DAECh, 4FFCD7E5h, 5DE1C0FEh
dd 53EACDF7h, 79DBEEC8h, 77D0E3C1h, 65CDF4DAh, 6BC6F9D3h
dd 31AFB2A4h, 3FA4BFADh, 2DB9A8B6h, 23B2A5BFh, 9838680h
dd 7888B89h, 15959C92h,	1B9E919Bh, 0A1470A7Ch, 0AF4C0775h
dd 0BD51106Eh, 0B35A1D67h, 996B3E58h, 97603351h, 857D244Ah
dd 8B762943h, 0D11F6234h, 0DF146F3Dh, 0CD097826h, 0C302752Fh
dd 0E9335610h, 0E7385B19h, 0F5254C02h, 0FB2E410Bh, 9A8C61D7h
dd 94876CDEh, 869A7BC5h, 889176CCh, 0A2A055F3h,	0ACAB58FAh
dd 0BEB64FE1h, 0B0BD42E8h, 0EAD4099Fh, 0E4DF0496h, 0F6C2138Dh
dd 0F8C91E84h, 0D2F83DBBh, 0DCF330B2h, 0CEEE27A9h, 0C0E52AA0h
dd 7A3CB147h, 7437BC4Eh, 662AAB55h, 6821A65Ch, 42108563h
dd 4C1B886Ah, 5E069F71h, 500D9278h, 0A64D90Fh, 46FD406h
dd 1672C31Dh, 1879CE14h, 3248ED2Bh, 3C43E022h, 2E5EF739h
dd 2055FA30h, 0EC01B79Ah, 0E20ABA93h, 0F017AD88h, 0FE1CA081h
dd 0D42D83BEh, 0DA268EB7h, 0C83B99ACh, 0C63094A5h, 9C59DFD2h
dd 9252D2DBh, 804FC5C0h, 8E44C8C9h, 0A475EBF6h,	0AA7EE6FFh
dd 0B863F1E4h, 0B668FCEDh, 0CB1670Ah, 2BA6A03h,	10A77D18h
dd 1EAC7011h, 349D532Eh, 3A965E27h, 288B493Ch, 26804435h
dd 7CE90F42h, 72E2024Bh, 60FF1550h, 6EF41859h, 44C53B66h
dd 4ACE366Fh, 58D32174h, 56D82C7Dh, 377A0CA1h, 397101A8h
dd 2B6C16B3h, 25671BBAh, 0F563885h, 15D358Ch, 13402297h
dd 1D4B2F9Eh, 472264E9h, 492969E0h, 5B347EFBh, 553F73F2h
dd 7F0E50CDh, 71055DC4h, 63184ADFh, 6D1347D6h, 0D7CADC31h
dd 0D9C1D138h, 0CBDCC623h, 0C5D7CB2Ah, 0EFE6E815h, 0E1EDE51Ch
dd 0F3F0F207h, 0FDFBFF0Eh, 0A792B479h, 0A999B970h, 0BB84AE6Bh
dd 0B58FA362h, 9FBE805Dh, 91B58D54h, 83A89A4Fh,	8DA39746h
			
			
dd 6A267E96h, 0BA7C9045h, 0F12C7F99h, 24A19947h, 0B3916CF7h
dd 801F2E2h, 858EFC16h,	636920D8h, 71574E69h, 0A458FEA3h
dd 0F4933D7Eh, 0D95748Fh, 728EB658h, 718BCD58h,	82154AEEh
dd 7B54A41Dh, 0C25A59B5h, 9C30D539h, 2AF26013h,	0C5D1B023h
dd 286085F0h, 0CA417918h, 0B8DB38EFh, 8E79DCB0h, 603A180Eh
dd 6C9E0E8Bh, 0B01E8A3Eh, 0D71577C1h, 0BD314B27h, 78AF2FDAh
dd 55605C60h, 0E65525F3h, 0AA55AB94h, 57489862h, 63E81440h
dd 55CA396Ah, 2AAB10B6h, 0B4CC5C34h, 1141E8CEh,	0A15486AFh
dd 7C72E993h, 0B3EE1411h, 636FBC2Ah, 2BA9C55Dh,	741831F6h
dd 0CE5C3E16h, 9B87931Eh, 0AFD6BA33h, 6C24CF5Ch, 7A325381h
dd 28958677h, 3B8F4898h, 6B4BB9AFh, 0C4BFE81Bh,	66282193h
dd 61D809CCh, 0FB21A991h, 487CAC60h, 5DEC8032h,	0EF845D5Dh
dd 0E98575B1h, 0DC262302h, 0EB651B88h, 23893E81h, 0D396ACC5h
dd 0F6D6FF3h, 83F44239h, 2E0B4482h, 0A4842004h,	69C8F04Ah
dd 9E1F9B5Eh, 21C66842h, 0F6E96C9Ah, 670C9C61h,	0ABD388F0h
dd 6A51A0D2h, 0D8542F68h, 960FA728h, 0AB5133A3h, 6EEF0B6Ch
dd 137A3BE4h, 0BA3BF050h, 7EFB2A98h, 0A1F1651Dh, 39AF0176h
dd 66CA593Eh, 82430E88h, 8CEE8619h, 456F9FB4h, 7D84A5C3h
dd 3B8B5EBEh, 0E06F75D8h, 85C12073h, 401A449Fh,	56C16AA6h
dd 4ED3AA62h, 363F7706h, 1BFEDF72h, 429B023Dh, 37D0D724h
dd 0D00A1248h, 0DB0FEAD3h, 49F1C09Bh, 75372C9h,	80991B7Bh
dd 25D479D8h, 0F6E8DEF7h, 0E3FE501Ah, 0B6794C3Bh, 976CE0BDh
dd 4C006BAh, 0C1A94FB6h, 409F60C4h, 5E5C9EC2h, 196A2463h
dd 68FB6FAFh, 3E6C53B5h, 1339B2EBh, 3B52EC6Fh, 6DFC511Fh
dd 9B30952Ch, 0CC814544h, 0AF5EBD09h, 0BEE3D004h, 0DE334AFDh
dd 660F2807h, 192E4BB3h, 0C0CBA857h, 45C8740Fh,	0D20B5F39h
dd 0B9D3FBDBh, 5579C0BDh, 1A60320Ah, 0D6A100C6h, 402C7279h
dd 679F25FEh, 0FB1FA3CCh, 8EA5E9F8h, 0DB3222F8h, 3C7516DFh
dd 0FD616B15h, 2F501EC8h, 0AD0552ABh, 323DB5FAh, 0FD238760h
dd 53317B48h, 3E00DF82h, 9E5C57BBh, 0CA6F8CA0h,	1A87562Eh
dd 0DF1769DBh, 0D542A8F6h, 287EFFC3h, 0AC6732C6h, 8C4F5573h
dd 695B27B0h, 0BBCA58C8h, 0E1FFA35Dh, 0B8F011A0h, 10FA3D98h
dd 0FD2183B8h, 4AFCB56Ch, 2DD1D35Bh, 9A53E479h,	0B6F84565h
dd 0D28E49BCh, 4BFB9790h, 0E1DDF2DAh, 0A4CB7E33h, 62FB1341h
dd 0CEE4C6E8h, 0EF20CADAh, 36774C01h, 0D07E9EFEh, 2BF11FB4h
dd 95DBDA4Dh, 0AE909198h, 0EAAD8E71h, 6B93D5A0h, 0D08ED1D0h
dd 0AFC725E0h, 8E3C5B2Fh, 8E7594B7h, 8FF6E2FBh,	0F2122B64h
dd 8888B812h, 900DF01Ch, 4FAD5EA0h, 688FC31Ch, 0D1CFF191h
dd 0B3A8C1ADh, 2F2F2218h, 0BE0E1777h, 0EA752DFEh, 8B021FA1h
dd 0E5A0CC0Fh, 0B56F74E8h, 18ACF3D6h, 0CE89E299h, 0B4A84FE0h
dd 0FD13E0B7h, 7CC43B81h, 0D2ADA8D9h, 165FA266h, 80957705h
dd 93CC7314h, 211A1477h, 0E6AD2065h, 77B5FA86h,	0C75442F5h
dd 0FB9D35CFh, 0EBCDAF0Ch, 7B3E89A0h, 0D6411BD3h, 0AE1E7E49h
dd 250E2Dh, 2071B35Eh, 226800BBh, 57B8E0AFh, 2464369Bh
dd 0F009B91Eh, 5563911Dh, 59DFA6AAh, 78C14389h,	0D95A537Fh
dd 207D5BA2h, 2E5B9C5h,	83260376h, 6295CFA9h, 11C81968h
dd 4E734A41h, 0B3472DCAh, 7B14A94Ah, 1B510052h,	9A532915h
dd 0D60F573Fh, 0BC9BC6E4h, 2B60A476h, 81E67400h, 8BA6FB5h
dd 571BE91Fh, 0F296EC6Bh, 2A0DD915h, 0B6636521h, 0E7B9F9B6h
dd 0FF34052Eh, 0C5855664h, 53B02D5Dh, 0A99F8FA1h, 8BA4799h
dd 6E85076Ah, 4B7A70E9h, 0B5B32944h, 0DB75092Eh, 0C4192623h
dd 0AD6EA6B0h, 49A7DF7Dh, 9CEE60B8h, 8FEDB266h,	0ECAA8C71h
dd 699A17FFh, 5664526Ch, 0C2B19EE1h, 193602A5h,	75094C29h
dd 0A0591340h, 0E4183A3Eh, 3F54989Ah, 5B429D65h, 6B8FE4D6h
dd 99F73FD6h, 0A1D29C07h, 0EFE830F5h, 4D2D38E6h, 0F0255DC1h
dd 4CDD2086h, 8470EB26h, 6382E9C6h, 21ECC5Eh, 9686B3Fh
dd 3EBAEFC9h, 3C971814h, 6B6A70A1h, 687F3584h, 52A0E286h
dd 0B79C5305h, 0AA500737h, 3E07841Ch, 7FDEAE5Ch, 8E7D44ECh
dd 5716F2B8h, 0B03ADA37h, 0F0500C0Dh, 0F01C1F04h, 200B3FFh
dd 0AE0CF51Ah, 3CB574B2h, 25837A58h, 0DC0921BDh, 0D19113F9h
dd 7CA92FF6h, 94324773h, 22F54701h, 3AE5E581h, 37C2DADCh
dd 0C8B57634h, 9AF3DDA7h, 0A9446146h, 0FD0030Eh, 0ECC8C73Eh
dd 0A4751E41h, 0E238CD99h, 3BEA0E2Fh, 3280BBA1h, 183EB331h
dd 4E548B38h, 4F6DB908h, 6F420D03h, 0F60A04BFh,	2CB81290h
dd 24977C79h, 5679B072h, 0BCAF89AFh, 0DE9A771Fh, 0D9930810h
dd 0B38BAE12h, 0DCCF3F2Eh, 5512721Fh, 2E6B7124h, 501ADDE6h
dd 9F84CD87h, 7A584718h, 7408DA17h, 0BC9F9ABCh,	0E94B7D8Ch
dd 0EC7AEC3Ah, 0DB851DFAh, 63094366h, 0C464C3D2h, 0EF1C1847h
dd 3215D908h, 0DD433B37h, 24C2BA16h, 12A14D43h,	2A65C451h
dd 50940002h, 133AE4DDh, 71DFF89Eh, 10314E55h, 81AC77D6h
dd 5F11199Bh, 43556F1h,	0D7A3C76Bh, 3C11183Bh, 5924A509h
dd 0F28FE6EDh, 97F1FBFAh, 9EBABF2Ch, 1E153C6Eh,	86E34570h
dd 0EAE96FB1h, 860E5E0Ah, 5A3E2AB3h, 771FE71Ch,	4E3D06FAh
dd 2965DCB9h, 99E71D0Fh, 803E89D6h, 5266C825h, 2E4CC978h
dd 9C10B36Ah, 0C6150EBAh, 94E2EA78h, 0A5FC3C53h, 1E0A2DF4h
dd 0F2F74EA7h, 361D2B3Dh, 1939260Fh, 19C27960h,	5223A708h
dd 0F71312B6h, 0EBADFE6Eh, 0EAC31F66h, 0E3BC4595h, 0A67BC883h
dd 0B17F37D1h, 18CFF28h, 0C332DDEFh, 0BE6C5AA5h, 65582185h
dd 68AB9802h, 0EECEA50Fh, 0DB2F953Bh, 2AEF7DADh, 5B6E2F84h
dd 1521B628h, 29076170h, 0ECDD4775h, 619F1510h,	13CCA830h
dd 0EB61BD96h, 334FE1Eh, 0AA0363CFh, 0B5735C90h, 4C70A239h
dd 0D59E9E0Bh, 0CBAADE14h, 0EECC86BCh, 60622CA7h, 9CAB5CABh
dd 0B2F3846Eh, 648B1EAFh, 19BDF0CAh, 0A02369B9h, 655ABB50h
dd 40685A32h, 3C2AB4B3h, 319EE9D5h, 0C021B8F7h,	9B540B19h
dd 875FA099h, 95F7997Eh, 623D7DA8h, 0F837889Ah,	97E32D77h
dd 11ED935Fh, 16681281h, 0E358829h, 0C7E61FD6h,	96DEDFA1h
dd 7858BA99h, 57F584A5h, 1B227263h, 9B83C3FFh, 1AC24696h
dd 0CDB30AEBh, 532E3054h, 8FD948E4h, 6DBC3128h,	58EBF2EFh
dd 34C6FFEAh, 0FE28ED61h, 0EE7C3C73h, 5D4A14D9h, 0E864B7E3h
dd 42105D14h, 203E13E0h, 45EEE2B6h, 0A3AAABEAh,	0DB6C4F15h
dd 0FACB4FD0h, 0C742F442h, 0EF6ABBB5h, 654F3B1Dh, 41CD2105h
dd 0D81E799Eh, 86854DC7h, 0E44B476Ah, 3D816250h, 0CF62A1F2h
dd 5B8D2646h, 0FC8883A0h, 0C1C7B6A3h, 7F1524C3h, 69CB7492h
dd 47848A0Bh, 5692B285h, 95BBF00h, 0AD19489Dh, 1462B174h
dd 23820E00h, 58428D2Ah, 0C55F5EAh, 1DADF43Eh, 233F7061h
dd 3372F092h, 8D937E41h, 0D65FECF1h, 6C223BDBh,	7CDE3759h
dd 0CBEE7460h, 4085F2A7h, 0CE77326Eh, 0A6078084h, 19F8509Eh
dd 0E8EFD855h, 61D99735h, 0A969A7AAh, 0C50C06C2h, 5A04ABFCh
dd 800BCADCh, 9E447A2Eh, 0C3453484h, 0FDD56705h, 0E1E9EC9h
dd 0DB73DBD3h, 105588CDh, 675FDA79h, 0E3674340h, 0C5C43465h
dd 713E38D8h, 3D28F89Eh, 0F16DFF20h, 153E21E7h,	8FB03D4Ah
dd 0E6E39F2Bh, 0DB83ADF7h, 0E93D5A68h, 948140F7h, 0F64C261Ch
dd 94692934h, 411520F7h, 7602D4F7h, 0BCF46B2Eh,	0D4A20068h
dd 0D4082471h, 3320F46Ah, 43B7D4B7h, 500061AFh,	1E39F62Eh
dd 97244546h, 14214F74h, 0BF8B8840h, 4D95FC1Dh,	96B591AFh
dd 70F4DDD3h, 66A02F45h, 0BFBC09ECh, 3BD9785h, 7FAC6DD0h
dd 31CB8504h, 96EB27B3h, 55FD3941h, 0DA2547E6h,	0ABCA0A9Ah
dd 28507825h, 530429F4h, 0A2C86DAh, 0E9B66DFBh,	68DC1462h
dd 0D7486900h, 680EC0A4h, 27A18DEEh, 4F3FFEA2h,	0E887AD8Ch
dd 0B58CE006h, 7AF4D6B6h, 0AACE1E7Ch, 0D3375FECh, 0CE78A399h
dd 406B2A42h, 20FE9E35h, 0D9F385B9h, 0EE39D7ABh, 3B124E8Bh
dd 1DC9FAF7h, 4B6D1856h, 26A36631h, 0EAE397B2h,	3A6EFA74h
dd 0DD5B4332h, 6841E7F7h, 0CA7820FBh, 0FB0AF54Eh, 0D8FEB397h
dd 454056ACh, 0BA489527h, 55533A3Ah, 20838D87h,	0FE6BA9B7h
dd 0D096954Bh, 55A867BCh, 0A1159A58h, 0CCA92963h, 99E1DB33h
dd 0A62A4A56h, 3F3125F9h, 5EF47E1Ch, 9029317Ch,	0FDF8E802h
dd 4272F70h, 80BB155Ch,	5282CE3h, 95C11548h, 0E4C66D22h
dd 48C1133Fh, 0C70F86DCh, 7F9C9EEh, 41041F0Fh, 404779A4h
dd 5D886E17h, 325F51EBh, 0D59BC0D1h, 0F2BCC18Fh, 41113564h
dd 257B7834h, 602A9C60h, 0DFF8E8A3h, 1F636C1Bh,	0E12B4C2h
dd 2E1329Eh, 0AF664FD1h, 0CAD18115h, 6B2395E0h,	333E92E1h
dd 3B240B62h, 0EEBEB922h, 85B2A20Eh, 0E6BA0D99h, 0DE720C8Ch
dd 2DA2F728h, 0D0127845h, 95B794FDh, 647D0862h,	0E7CCF5F0h
dd 5449A36Fh, 877D48FAh, 0C39DFD27h, 0F33E8D1Eh, 0A476341h
dd 992EFF74h, 3A6F6EABh, 0F4F8FD37h, 0A812DC60h, 0A1EBDDF8h
dd 991BE14Ch, 0DB6E6B0Dh, 0C67B5510h, 6D672C37h, 2765D43Bh
dd 0DCD0E804h, 0F1290DC7h, 0CC00FFA3h, 0B5390F92h, 690FED0Bh
dd 667B9FFBh, 0CEDB7D9Ch, 0A091CF0Bh, 0D9155EA3h, 0BB132F88h
dd 515BAD24h, 7B9479BFh, 763BD6EBh, 37392EB3h, 0CC115979h
dd 8026E297h, 0F42E312Dh, 6842ADA7h, 0C66A2B3Bh, 12754CCCh
dd 782EF11Ch, 6A124237h, 0B79251E7h, 6A1BBE6h, 4BFB6350h
dd 1A6B1018h, 11CAEDFAh, 3D25BDD8h, 0E2E1C3C9h,	44421659h
dd 0A121386h, 0D90CEC6Eh, 0D5ABEA2Ah, 64AF674Eh, 0DA86A85Fh
dd 0BEBFE988h, 64E4C3FEh, 9DBC8057h, 0F0F7C086h, 60787BF8h
dd 6003604Dh, 0D1FD8346h, 0F6381FB0h, 7745AE04h, 0D736FCCCh
dd 83426B33h, 0F01EAB71h, 0B0804187h, 3C005E5Fh, 77A057BEh
dd 0BDE8AE24h, 55464299h, 0BF582E61h, 4E58F48Fh, 0F2DDFDA2h
dd 0F474EF38h, 8789BDC2h, 5366F9C3h, 0C8B38E74h, 0B475F255h
dd 46FCD9B9h, 7AEB2661h, 8B1DDF84h, 846A0E79h, 915F95E2h
dd 466E598Eh, 20B45770h, 8CD55591h, 0C902DE4Ch,	0B90BACE1h
dd 0BB8205D0h, 11A86248h, 7574A99Eh, 0B77F19B6h, 0E0A9DC09h
dd 662D09A1h, 0C4324633h, 0E85A1F02h, 9F0BE8Ch,	4A99A025h
dd 1D6EFE10h, 1AB93D1Dh, 0BA5A4DFh, 0A186F20Fh,	2868F169h
dd 0DCB7DA83h, 573906FEh, 0A1E2CE9Bh, 4FCD7F52h, 50115E01h
dd 0A70683FAh, 0A002B5C4h, 0DE6D027h, 9AF88C27h, 773F8641h
dd 0C3604C06h, 61A806B5h, 0F0177A28h, 0C0F586E0h, 6058AAh
dd 30DC7D62h, 11E69ED7h, 2338EA63h, 53C2DD94h, 0C2C21634h
dd 0BBCBEE56h, 90BCB6DEh, 0EBFC7DA1h, 0CE591D76h, 6F05E409h
dd 4B7C0188h, 39720A3Dh, 7C927C24h, 86E3725Fh, 724D9DB9h
dd 1AC15BB4h, 0D39EB8FCh, 0ED545578h, 8FCA5B5h,	0D83D7CD3h
dd 4DAD0FC4h, 1E50EF5Eh, 0B161E6F8h, 0A28514D9h, 6C51133Ch
dd 6FD5C7E7h, 56E14EC4h, 362ABFCEh, 0DDC6C837h,	0D79A3234h
dd 92638212h, 670EFA8Eh, 406000E0h, 3A39CE37h, 0D3FAF5CFh
dd 0ABC27737h, 5AC52D1Bh, 5CB0679Eh, 4FA33742h,	0D3822740h
dd 99BC9BBEh, 0D5118E9Dh, 0BF0F7315h, 0D62D1C7Eh, 0C700C47Bh
dd 0B78C1B6Bh, 21A19045h, 0B26EB1BEh, 6A366EB4h, 5748AB2Fh
dd 0BC946E79h, 0C6A376D2h, 6549C2C8h, 530FF8EEh, 468DDE7Dh
dd 0D5730A1Dh, 4CD04DC6h, 2939BBDBh, 0A9BA4650h, 0AC9526E8h
dd 0BE5EE304h, 0A1FAD5F0h, 6A2D519Ah, 63EF8CE2h, 9A86EE22h
dd 0C089C2B8h, 43242EF6h, 0A51E03AAh, 9CF2D0A4h, 83C061BAh
dd 9BE96A4Dh, 8FE51550h, 0BA645BD6h, 2826A2F9h,	0A73A3AE1h
dd 4BA99586h, 0EF5562E9h, 0C72FEFD3h, 0F752F7DAh, 3F046F69h
dd 77FA0A59h, 80E4A915h, 87B08601h, 9B09E6ADh, 3B3EE593h
dd 0E990FD5Ah, 9E34D797h, 2CF0B7D9h, 22B8B51h, 96D5AC3Ah
dd 17DA67Dh, 0D1CF3ED6h, 7C7D2D28h, 1F9F25CFh, 0ADF2B89Bh
dd 5AD6B472h, 5A88F54Ch, 0E029AC71h, 0E019A5E6h, 47B0ACFDh
dd 0ED93FA9Bh, 0E8D3C48Dh, 283B57CCh, 0F8D56629h, 79132E28h
dd 785F0191h, 0ED756055h, 0F7960E44h, 0E3D35E8Ch, 15056DD4h
dd 88F46DBAh, 3A16125h,	564F0BDh, 0C3EB9E15h, 3C9057A2h
dd 97271AECh, 0A93A072Ah, 1B3F6D9Bh, 1E6321F5h,	0F59C66FBh
dd 26DCF319h, 7533D928h, 0B155FDF5h, 3563482h, 8ABA3CBBh
dd 28517711h, 0C20AD9F8h, 0ABCC5167h, 0CCAD925Fh, 4DE81751h
dd 3830DC8Eh, 379D5862h, 9320F991h, 0EA7A90C2h,	0FB3E7BCEh
dd 5121CE64h, 774FBE32h, 0A8B6E37Eh, 0C3293D46h, 48DE5369h
dd 6413E680h, 0A2AE0810h, 0DD6DB224h, 69852DFDh, 9072166h
dd 0B39A460Ah, 6445C0DDh, 586CDECFh, 1C20C8AEh,	5BBEF7DDh
dd 1B588D40h, 0CCD2017Fh, 6BB4E3BBh, 0DDA26A7Eh, 3A59FF45h
dd 3E350A44h, 0BCB4CDD5h, 72EACEA8h, 0FA6484BBh, 8D6612AEh
dd 0BF3C6F47h, 0D29BE463h, 542F5D9Eh, 0AEC2771Bh, 0F64E6370h
dd 740E0D8Dh, 0E75B1357h, 0F8721671h, 0AF537D5Dh, 4040CB08h
dd 4EB4E2CCh, 34D2466Ah, 115AF84h, 0E1B00428h, 95983A1Dh
dd 6B89FB4h, 0CE6EA048h, 6F3F3B82h, 3520AB82h, 11A1D4Bh
dd 277227F8h, 611560B1h, 0E7933FDCh, 0BB3A792Bh, 344525BDh
dd 0A08839E1h, 51CE794Bh, 2F32C9B7h, 0A01FBAC9h, 0E01CC87Eh
dd 0BCC7D1F6h, 0CF0111C3h, 0A1E8AAC7h, 1A908749h, 0D44FBD9Ah
dd 0D0DADECBh, 0D50ADA38h, 339C32Ah, 0C6913667h, 8DF9317Ch
dd 0E0B12B4Fh, 0F79E59B7h, 43F5BB3Ah, 0F2D519FFh, 27D9459Ch
dd 0BF97222Ch, 15E6FC2Ah, 0F91FC71h, 9B941525h,	0FAE59361h
dd 0CEB69CEBh, 0C2A86459h, 12BAA8D1h, 0B6C1075Eh, 0E3056A0Ch
dd 10D25065h, 0CB03A442h, 0E0EC6E0Eh, 1698DB3Bh, 4C98A0BEh
dd 3278E964h, 9F1F9532h, 0E0D392DFh, 0D3A0342Bh, 8971F21Eh
dd 1B0A7441h, 4BA3348Ch, 0C5BE7120h, 0C37632D8h, 0DF359F8Dh
dd 9B992F2Eh, 0E60B6F47h, 0FE3F11Dh, 0E54CDA54h, 1EDAD891h
dd 0CE6279CFh, 0CD3E7E6Fh, 1618B166h, 0FD2C1D05h, 848FD2C5h
dd 0F6FB2299h, 0F523F357h, 0A6327623h, 93A83531h, 56CCCD02h
dd 0ACF08162h, 5A75EBB5h, 6E163697h, 88D273CCh,	0DE966292h
dd 81B949D0h, 4C50901Bh, 71C65614h, 0E6C6C7BDh,	327A140Ah
dd 45E1D006h, 0C3F27B9Ah, 0C9AA53FDh, 62A80F00h, 0BB25BFE2h
dd 35BDD2F6h, 71126905h, 0B2040222h, 0B6CBCF7Ch, 0CD769C2Bh
dd 53113EC0h, 1640E3D3h, 38ABBD60h, 2547ADF0h, 0BA38209Ch
dd 0F746CE76h, 77AFA1C5h, 20756060h, 85CBFE4Eh,	8AE88DD8h
dd 7AAAF9B0h, 4CF9AA7Eh, 1948C25Ch, 2FB8A8Ch, 1C36AE4h
dd 0D6EBE1F9h, 90D4F869h, 0A65CDEA0h, 3F09252Dh, 0C208E69Fh
dd 0B74E6132h, 0CE77E25Bh, 578FDFE3h, 3AC372E6h
			
dd 299F31D0h, 82EFA98h,	0EC4E6C89h, 452821E6h, 38D01377h
dd 0BE5466CFh, 34E90C6Ch, 0C0AC29B7h, 0C97C50DDh, 3F84D5B5h
dd 0B5470917h, 9216D5D9h, 8979FB1Bh
align 20h
align 20h
align 10h
public _silc_default_ciphers
			
			
		  offset _silc_aes_ctr_set_iv, \ 
		  offset _silc_aes_ctr_encrypt,	\
		  offset _silc_aes_ctr_decrypt,	\
		  offset _silc_aes_ctr_context_len, 4100h, 0C40h>
SilcCipherObject <offset aAes192Ctr, offset _silc_aes_ctr_set_key, \
		  offset _silc_aes_ctr_set_iv, \
		  offset _silc_aes_ctr_encrypt,	\
		  offset _silc_aes_ctr_decrypt,	\
		  offset _silc_aes_ctr_context_len, 40C0h, 0C40h>
SilcCipherObject <offset aAes128Ctr, offset _silc_aes_ctr_set_key, \
		  offset _silc_aes_ctr_set_iv, \
		  offset _silc_aes_ctr_encrypt,	\
		  offset _silc_aes_ctr_decrypt,	\
		  offset _silc_aes_ctr_context_len, 4080h, 0C40h>
SilcCipherObject <offset aAes256Cbc_0, offset _silc_aes_cbc_set_key, \
		  offset _silc_aes_cbc_set_iv, \
		  offset _silc_aes_cbc_encrypt,	\
		  offset _silc_aes_cbc_decrypt,	\
		  offset _silc_aes_cbc_context_len, 4100h, 840h>
SilcCipherObject <offset aAes192Cbc, offset _silc_aes_cbc_set_key, \
		  offset _silc_aes_cbc_set_iv, \
		  offset _silc_aes_cbc_encrypt,	\
		  offset _silc_aes_cbc_decrypt,	\
		  offset _silc_aes_cbc_context_len, 40C0h, 840h>
SilcCipherObject <offset aAes128Cbc, offset _silc_aes_cbc_set_key, \
		  offset _silc_aes_cbc_set_iv, \
		  offset _silc_aes_cbc_encrypt,	\
		  offset _silc_aes_cbc_decrypt,	\
		  offset _silc_aes_cbc_context_len, 4080h, 840h>
SilcCipherObject <offset aTwofish256Cbc, \
		  offset _silc_twofish_cbc_set_key, \
		  offset _silc_twofish_cbc_set_iv, \
		  offset _silc_twofish_cbc_encrypt, \
		  offset _silc_twofish_cbc_decrypt, \
		  offset _silc_twofish_cbc_context_len,	4100h, 840h>
SilcCipherObject <offset aTwofish192Cbc, \
		  offset _silc_twofish_cbc_set_key, \
		  offset _silc_twofish_cbc_set_iv, \
		  offset _silc_twofish_cbc_encrypt, \
		  offset _silc_twofish_cbc_decrypt, \
		  offset _silc_twofish_cbc_context_len,	40C0h, 840h>
SilcCipherObject <offset aTwofish128Cbc, \
		  offset _silc_twofish_cbc_set_key, \
		  offset _silc_twofish_cbc_set_iv, \
		  offset _silc_twofish_cbc_encrypt, \
		  offset _silc_twofish_cbc_decrypt, \
		  offset _silc_twofish_cbc_context_len,	4080h, 840h>
SilcCipherObject  <0>
align 10h
			
align 20h
public _silc_default_hash
			
			
		offset _silc_sha256_init, offset _silc_sha256_update, \	
		offset _silc_sha256_final, \
		offset _silc_sha256_transform, \
		offset _silc_sha256_context_len>
SilcHashObject <offset name, offset a1_3_14_3_2_26, 14h, 40h, \
		offset _silc_sha1_init,	offset _silc_sha1_update, \
		offset _silc_sha1_final, offset	_silc_sha1_transform, \
		offset _silc_sha1_context_len>
SilcHashObject <offset aMd5, offset a1_2_840_113549, 10h, 40h, \
		offset _silc_md5_init, offset _silc_md5_update,	\
		offset _silc_md5_final,	offset _silc_md5_transform, \
		offset _silc_md5_context_len>
SilcHashObject	<0>
			
			
align 10h
align 20h
public _silc_default_hmacs
			
			
SilcHmacObject <offset aHmacSha196_0, 0Ch> 
SilcHmacObject <offset aHmacMd596, 0Ch>
SilcHmacObject <offset aHmacSha256, 20h>
SilcHmacObject <offset aHmacSha1, 14h>
SilcHmacObject <offset aHmacMd5, 10h>
SilcHmacObject	<0>
align 10h
			
			
			
			
			
			
			
			
			
			
			
			
align 10h
			
			
align 10h
			
			
			
			
			
			
align 10h
			
			
align 4
			
			
			
align 10h
			
align 4
			
			
align 4
			
align 4
			
align 4
			
align 4
db '-----END SILC PUBLIC KEY-----',0Ah,0
db '-----END SILC PRIVATE KEY-----',0Ah,0
align 10h
public _silc_default_pkcs
			
		offset _silc_pkcs_silc_import_public_key_file, \
		offset _silc_pkcs_silc_import_public_key, \
		offset _silc_pkcs_silc_export_public_key_file, \
		offset _silc_pkcs_silc_export_public_key, \
		offset _silc_pkcs_silc_public_key_bitlen, \
		offset _silc_pkcs_silc_public_key_copy,	\
		offset _silc_pkcs_silc_public_key_compare, \
		offset _silc_pkcs_silc_public_key_free,	\
		offset _silc_pkcs_silc_import_private_key_file,	\
		offset _silc_pkcs_silc_import_private_key, \
		offset _silc_pkcs_silc_export_private_key_file,	\
		offset _silc_pkcs_silc_export_private_key, \
		offset _silc_pkcs_silc_private_key_bitlen, \
		offset _silc_pkcs_silc_private_key_free, \
		offset _silc_pkcs_silc_encrypt,	\
		offset _silc_pkcs_silc_decrypt,	\
		offset _silc_pkcs_silc_sign, \
		offset _silc_pkcs_silc_verify>
SilcPKCSObject	<0>
public _silc_default_pkcs_alg
			
			
		   offset aSha1Md5, offset _silc_pkcs1_generate_key, \ 
		   offset _silc_pkcs1_import_public_key, \
		   offset _silc_pkcs1_export_public_key, \
		   offset _silc_pkcs1_public_key_bitlen, \
		   offset _silc_pkcs1_public_key_copy, \
		   offset _silc_pkcs1_public_key_compare, \
		   offset _silc_pkcs1_public_key_free, \
		   offset _silc_pkcs1_import_private_key, \
		   offset _silc_pkcs1_export_private_key, \
		   offset _silc_pkcs1_private_key_bitlen, \
		   offset _silc_pkcs1_private_key_free,	\
		   offset _silc_pkcs1_encrypt, \
		   offset _silc_pkcs1_decrypt, \
		   offset _silc_pkcs1_sign_no_oid, \
		   offset _silc_pkcs1_verify_no_oid>
SilcPKCSAlgorithm <offset dword_6426CEC0, offset aPkcs1_0, \
		   offset aSha1Md5, offset _silc_pkcs1_generate_key, \
		   offset _silc_pkcs1_import_public_key, \
		   offset _silc_pkcs1_export_public_key, \
		   offset _silc_pkcs1_public_key_bitlen, \
		   offset _silc_pkcs1_public_key_copy, \
		   offset _silc_pkcs1_public_key_compare, \
		   offset _silc_pkcs1_public_key_free, \
		   offset _silc_pkcs1_import_private_key, \
		   offset _silc_pkcs1_export_private_key, \
		   offset _silc_pkcs1_private_key_bitlen, \
		   offset _silc_pkcs1_private_key_free,	\
		   offset _silc_pkcs1_encrypt, \
		   offset _silc_pkcs1_decrypt, \
		   offset _silc_pkcs1_sign, offset _silc_pkcs1_verify>
SilcPKCSAlgorithm  <0>
align 10h
			
align 4
			
			
align 4
align 10h
			
			
dd 29h,	2Bh, 2Fh, 35h, 3Bh, 3Dh, 43h, 47h, 49h,	4Fh, 53h
dd 59h,	61h, 65h, 67h, 6Bh, 6Dh, 71h, 7Fh, 83h,	89h, 8Bh
dd 95h,	97h, 9Dh, 0A3h,	0A7h, 0ADh, 0B3h, 0B5h,	0BFh, 0C1h
dd 0C5h, 0C7h, 0D3h, 0DFh, 0E3h, 0E5h, 0E9h, 0EFh, 0F1h
dd 0FBh, 101h, 107h, 10Dh, 10Fh, 115h, 119h, 11Bh, 125h
dd 133h, 137h, 139h, 13Dh, 14Bh, 151h, 15Bh, 15Dh, 161h
dd 167h, 16Fh, 175h, 17Bh, 17Fh, 185h, 18Dh, 191h, 199h
dd 1A3h, 1A5h, 1AFh, 1B1h, 1B7h, 1BBh, 1C1h, 1C9h, 1CDh
dd 1CFh, 1D3h, 1DFh, 1E7h, 1EBh, 1F3h, 1F7h, 1FDh, 209h
dd 20Bh, 21Dh, 223h, 22Dh, 233h, 239h, 23Bh, 241h, 24Bh
dd 251h, 257h, 259h, 25Fh, 265h, 269h, 26Bh, 277h, 281h
dd 283h, 287h, 28Dh, 293h, 295h, 2A1h, 2A5h, 2ABh, 2B3h
dd 2BDh, 2C5h, 2CFh, 2D7h, 2DDh, 2E3h, 2E7h, 2EFh, 2F5h
dd 2F9h, 301h, 305h, 313h, 31Dh, 329h, 32Bh, 335h, 337h
dd 33Bh, 33Dh, 347h, 355h, 359h, 35Bh, 35Fh, 36Dh, 371h
dd 373h, 377h, 38Bh, 38Fh, 397h, 3A1h, 3A9h, 3ADh, 3B3h
dd 3B9h, 3C7h, 3CBh, 3D1h, 3D7h, 3DFh, 3E5h, 3F1h, 3F5h
dd 3FBh, 3FDh, 407h, 409h, 40Fh, 419h, 41Bh, 425h, 427h
dd 42Dh, 43Fh, 443h, 445h, 449h, 44Fh, 455h, 45Dh, 463h
dd 469h, 47Fh, 481h, 48Bh, 493h, 49Dh, 4A3h, 4A9h, 4B1h
dd 4BDh, 4C1h, 4C7h, 4CDh, 4CFh, 4D5h, 4E1h, 4EBh, 4FDh
dd 4FFh, 503h, 509h, 50Bh, 511h, 515h, 517h, 51Bh, 527h
dd 529h, 52Fh, 551h, 557h, 55Dh, 565h, 577h, 581h, 58Fh
dd 593h, 595h, 599h, 59Fh, 5A7h, 5ABh, 5ADh, 5B3h, 5BFh
dd 5C9h, 5CBh, 5CFh, 5D1h, 5D5h, 5DBh, 5E7h, 5F3h, 5FBh
dd 607h, 60Dh, 611h, 617h, 61Fh, 623h, 62Bh, 62Fh, 63Dh
dd 641h, 647h, 649h, 64Dh, 653h, 655h, 65Bh, 665h, 679h
dd 67Fh, 683h, 685h, 69Dh, 6A1h, 6A3h, 6ADh, 6B9h, 6BBh
dd 6C5h, 6CDh, 6D3h, 6D9h, 6DFh, 6F1h, 6F7h, 6FBh, 6FDh
dd 709h, 713h, 71Fh, 727h, 737h, 745h, 74Bh, 74Fh, 751h
dd 755h, 757h, 761h, 76Dh, 773h, 779h, 78Bh, 78Dh, 79Dh
dd 79Fh, 7B5h, 7BBh, 7C3h, 7C9h, 7CDh, 7CFh, 7D3h, 7DBh
dd 7E1h, 7EBh, 7EDh, 7F7h, 805h, 80Fh, 815h, 821h, 823h
dd 827h, 829h, 833h, 83Fh, 841h, 851h, 853h, 859h, 85Dh
dd 85Fh, 869h, 871h, 883h, 89Bh, 89Fh, 8A5h, 8ADh, 8BDh
dd 8BFh, 8C3h, 8CBh, 8DBh, 8DDh, 8E1h, 8E9h, 8EFh, 8F5h
dd 8F9h, 905h, 907h, 91Dh, 923h, 925h, 92Bh, 92Fh, 935h
dd 943h, 949h, 94Dh, 94Fh, 955h, 959h, 95Fh, 96Bh, 971h
dd 977h, 985h, 989h, 98Fh, 99Bh, 9A3h, 9A9h, 9ADh, 9C7h
dd 9D9h, 9E3h, 9EBh, 9EFh, 9F5h, 9F7h, 9FDh, 0A13h, 0A1Fh
dd 0A21h, 0A31h, 0A39h,	0A3Dh, 0A49h, 0A57h, 0A61h, 0A63h
dd 0A67h, 0A6Fh, 0A75h,	0A7Bh, 0A7Fh, 0A81h, 0A85h, 0A8Bh
dd 0A93h, 0A97h, 0A99h,	0A9Fh, 0AA9h, 0AABh, 0AB5h, 0ABDh
dd 0AC1h, 0ACFh, 0AD9h,	0AE5h, 0AE7h, 0AEDh, 0AF1h, 0AF3h
dd 0B03h, 0B11h, 0B15h,	0B1Bh, 0B23h, 0B29h, 0B2Dh, 0B3Fh
dd 0B47h, 0B51h, 0B57h,	0B5Dh, 0B65h, 0B6Fh, 0B7Bh, 0B89h
dd 0B8Dh, 0B93h, 0B99h,	0B9Bh, 0BB7h, 0BB9h, 0BC3h, 0BCBh
dd 0BCFh, 0BDDh, 0BE1h,	0BE9h, 0BF5h, 0BFBh, 0C07h, 0C0Bh
dd 0C11h, 0C25h, 0C2Fh,	0C31h, 0C41h, 0C5Bh, 0C5Fh, 0C61h
dd 0C6Dh, 0C73h, 0C77h,	0C83h, 0C89h, 0C91h, 0C95h, 0C9Dh
dd 0CB3h, 0CB5h, 0CB9h,	0CBBh, 0CC7h, 0CE3h, 0CE5h, 0CEBh
dd 0CF1h, 0CF7h, 0CFBh,	0D01h, 0D03h, 0D0Fh, 0D13h, 0D1Fh
dd 0D21h, 0D2Bh, 0D2Dh,	0D3Dh, 0D3Fh, 0D4Fh, 0D55h, 0D69h
dd 0D79h, 0D81h, 0D85h,	0D87h, 0D8Bh, 0D8Dh, 0DA3h, 0DABh
dd 0DB7h, 0DBDh, 0DC7h,	0DC9h, 0DCDh, 0DD3h, 0DD5h, 0DDBh
dd 0DE5h, 0DE7h, 0DF3h,	0DFDh, 0DFFh, 0E09h, 0E17h, 0E1Dh
dd 0E21h, 0E27h, 0E2Fh,	0E35h, 0E3Bh, 0E4Bh, 0E57h, 0E59h
dd 0E5Dh, 0E6Bh, 0E71h,	0E75h, 0E7Dh, 0E87h, 0E8Fh, 0E95h
dd 0E9Bh, 0EB1h, 0EB7h,	0EB9h, 0EC3h, 0ED1h, 0ED5h, 0EDBh
dd 0EEDh, 0EEFh, 0EF9h,	0F07h, 0F0Bh, 0F0Dh, 0F17h, 0F25h
dd 0F29h, 0F31h, 0F43h,	0F47h, 0F4Dh, 0F4Fh, 0F53h, 0F59h
dd 0F5Bh, 0F67h, 0F6Bh,	0F7Fh, 0F95h, 0FA1h, 0FA3h, 0FA7h
dd 0FADh, 0FB3h, 0FB5h,	0FBBh, 0FD1h, 0FD3h, 0FD9h, 0FE9h
dd 0FEFh, 0FFBh, 0FFDh,	1003h, 100Fh, 101Fh, 1021h, 1025h
dd 102Bh, 1039h, 103Dh,	103Fh, 1051h, 1069h, 1073h, 1079h
dd 107Bh, 1085h, 1087h,	1091h, 1093h, 109Dh, 10A3h, 10A5h
dd 10AFh, 10B1h, 10BBh,	10C1h, 10C9h, 10E7h, 10F1h, 10F3h
dd 10FDh, 1105h, 110Bh,	1115h, 1127h, 112Dh, 1139h, 1145h
dd 1147h, 1159h, 115Fh,	1163h, 1169h, 116Fh, 1181h, 1183h
dd 118Dh, 119Bh, 11A1h,	11A5h, 11A7h, 11ABh, 11C3h, 11C5h
dd 11D1h, 11D7h, 11E7h,	11EFh, 11F5h, 11FBh, 120Dh, 121Dh
dd 121Fh, 1223h, 1229h,	122Bh, 1231h, 1237h, 1241h, 1247h
dd 1253h, 125Fh, 1271h,	1273h, 1279h, 127Dh, 128Fh, 1297h
dd 12AFh, 12B3h, 12B5h,	12B9h, 12BFh, 12C1h, 12CDh, 12D1h
dd 12DFh, 12FDh, 1307h,	130Dh, 1319h, 1327h, 132Dh, 1337h
dd 1343h, 1345h, 1349h,	134Fh, 1357h, 135Dh, 1367h, 1369h
dd 136Dh, 137Bh, 1381h,	1387h, 138Bh, 1391h, 1393h, 139Dh
dd 139Fh, 13AFh, 13BBh,	13C3h, 13D5h, 13D9h, 13DFh, 13EBh
dd 13EDh, 13F3h, 13F9h,	13FFh, 141Bh, 1421h, 142Fh, 1433h
dd 143Bh, 1445h, 144Dh,	1459h, 146Bh, 146Fh, 1471h, 1475h
dd 148Dh, 1499h, 149Fh,	14A1h, 14B1h, 14B7h, 14BDh, 14CBh
dd 14D5h, 14E3h, 14E7h,	1505h, 150Bh, 1511h, 1517h, 151Fh
dd 1525h, 1529h, 152Bh,	1537h, 153Dh, 1541h, 1543h, 1549h
dd 155Fh, 1565h, 1567h,	156Bh, 157Dh, 157Fh, 1583h, 158Fh
dd 1591h, 1597h, 159Bh,	15B5h, 15BBh, 15C1h, 15C5h, 15CDh
dd 15D7h, 15F7h, 1607h,	1609h, 160Fh, 1613h, 1615h, 1619h
dd 161Bh, 1625h, 1633h,	1639h, 163Dh, 1645h, 164Fh, 1655h
dd 1669h, 166Dh, 166Fh,	1675h, 1693h, 1697h, 169Fh, 16A9h
dd 16AFh, 16B5h, 16BDh,	16C3h, 16CFh, 16D3h, 16D9h, 16DBh
dd 16E1h, 16E5h, 16EBh,	16EDh, 16F7h, 16F9h, 1709h, 170Fh
dd 1723h, 1727h, 1733h,	1741h, 175Dh, 1763h, 1777h, 177Bh
dd 178Dh, 1795h, 179Bh,	179Fh, 17A5h, 17B3h, 17B9h, 17BFh
dd 17C9h, 17CBh, 17D5h,	17E1h, 17E9h, 17F3h, 17F5h, 17FFh
dd 1807h, 1813h, 181Dh,	1835h, 1837h, 183Bh, 1843h, 1849h
dd 184Dh, 1855h, 1867h,	1871h, 1877h, 187Dh, 187Fh, 1885h
dd 188Fh, 189Bh, 189Dh,	18A7h, 18ADh, 18B3h, 18B9h, 18C1h
dd 18C7h, 18D1h, 18D7h,	18D9h, 18DFh, 18E5h, 18EBh, 18F5h
dd 18FDh, 1915h, 191Bh,	1931h, 1933h, 1945h, 1949h, 1951h
dd 195Bh, 1979h, 1981h,	1993h, 1997h, 1999h, 19A3h, 19A9h
dd 19ABh, 19B1h, 19B5h,	19C7h, 19CFh, 19DBh, 19EDh, 19FDh
dd 1A03h, 1A05h, 1A11h,	1A17h, 1A21h, 1A23h, 1A2Dh, 1A2Fh
dd 1A35h, 1A3Fh, 1A4Dh,	1A51h, 1A69h, 1A6Bh, 1A7Bh, 1A7Dh
dd 1A87h, 1A89h, 1A93h,	1AA7h, 1AABh, 1AADh, 1AB1h, 1AB9h
dd 1AC9h, 1ACFh, 1AD5h,	1AD7h, 1AE3h, 1AF3h, 1AFBh, 1AFFh
dd 1B05h, 1B23h, 1B25h,	1B2Fh, 1B31h, 1B37h, 1B3Bh, 1B41h
dd 1B47h, 1B4Fh, 1B55h,	1B59h, 1B65h, 1B6Bh, 1B73h, 1B7Fh
dd 1B83h, 1B91h, 1B9Dh,	1BA7h, 1BBFh, 1BC5h, 1BD1h, 1BD7h
dd 1BD9h, 1BEFh, 1BF7h,	1C09h, 1C13h, 1C19h, 1C27h, 1C2Bh
dd 1C2Dh, 1C33h, 1C3Dh,	1C45h, 1C4Bh, 1C4Fh, 1C55h, 1C73h
dd 1C81h, 1C8Bh, 1C8Dh,	1C99h, 1CA3h, 1CA5h, 1CB5h, 1CB7h
dd 1CC9h, 1CE1h, 1CF3h,	1CF9h, 1D09h, 1D1Bh, 1D21h, 1D23h
dd 1D35h, 1D39h, 1D3Fh,	1D41h, 1D4Bh, 1D53h, 1D5Dh, 1D63h
dd 1D69h, 1D71h, 1D75h,	1D7Bh, 1D7Dh, 1D87h, 1D89h, 1D95h
dd 1D99h, 1D9Fh, 1DA5h,	1DA7h, 1DB3h, 1DB7h, 1DC5h, 1DD7h
dd 1DDBh, 1DE1h, 1DF5h,	1DF9h, 1E01h, 1E07h, 1E0Bh, 1E13h
dd 1E17h, 1E25h, 1E2Bh,	1E2Fh, 1E3Dh, 1E49h, 1E4Dh, 1E4Fh
dd 1E6Dh, 1E71h, 1E89h,	1E8Fh, 1E95h, 1EA1h, 1EADh, 1EBBh
dd 1EC1h, 1EC5h, 1EC7h,	1ECBh, 1EDDh, 1EE3h, 1EEFh, 1EF7h
dd 1EFDh, 1F01h, 1F0Dh,	1F0Fh, 1F1Bh, 1F39h, 1F49h, 1F4Bh
dd 1F51h, 1F67h, 1F75h,	1F7Bh, 1F85h, 1F91h, 1F97h, 1F99h
dd 1F9Dh, 1FA5h, 1FAFh,	1FB5h, 1FBBh, 1FD3h, 1FE1h, 1FE7h
dd 1FEBh, 1FF3h, 1FFFh,	0
align 10h
align 4
			
align 10h
public _ltm_prime_tab
			
			
dd 29h,	2Bh, 2Fh, 35h, 3Bh, 3Dh, 43h, 47h, 49h,	4Fh, 53h
dd 59h,	61h, 65h, 67h, 6Bh, 6Dh, 71h, 7Fh, 83h,	89h, 8Bh
dd 95h,	97h, 9Dh, 0A3h,	0A7h, 0ADh, 0B3h, 0B5h,	0BFh, 0C1h
dd 0C5h, 0C7h, 0D3h, 0DFh, 0E3h, 0E5h, 0E9h, 0EFh, 0F1h
dd 0FBh, 101h, 107h, 10Dh, 10Fh, 115h, 119h, 11Bh, 125h
dd 133h, 137h, 139h, 13Dh, 14Bh, 151h, 15Bh, 15Dh, 161h
dd 167h, 16Fh, 175h, 17Bh, 17Fh, 185h, 18Dh, 191h, 199h
dd 1A3h, 1A5h, 1AFh, 1B1h, 1B7h, 1BBh, 1C1h, 1C9h, 1CDh
dd 1CFh, 1D3h, 1DFh, 1E7h, 1EBh, 1F3h, 1F7h, 1FDh, 209h
dd 20Bh, 21Dh, 223h, 22Dh, 233h, 239h, 23Bh, 241h, 24Bh
dd 251h, 257h, 259h, 25Fh, 265h, 269h, 26Bh, 277h, 281h
dd 283h, 287h, 28Dh, 293h, 295h, 2A1h, 2A5h, 2ABh, 2B3h
dd 2BDh, 2C5h, 2CFh, 2D7h, 2DDh, 2E3h, 2E7h, 2EFh, 2F5h
dd 2F9h, 301h, 305h, 313h, 31Dh, 329h, 32Bh, 335h, 337h
dd 33Bh, 33Dh, 347h, 355h, 359h, 35Bh, 35Fh, 36Dh, 371h
dd 373h, 377h, 38Bh, 38Fh, 397h, 3A1h, 3A9h, 3ADh, 3B3h
dd 3B9h, 3C7h, 3CBh, 3D1h, 3D7h, 3DFh, 3E5h, 3F1h, 3F5h
dd 3FBh, 3FDh, 407h, 409h, 40Fh, 419h, 41Bh, 425h, 427h
dd 42Dh, 43Fh, 443h, 445h, 449h, 44Fh, 455h, 45Dh, 463h
dd 469h, 47Fh, 481h, 48Bh, 493h, 49Dh, 4A3h, 4A9h, 4B1h
dd 4BDh, 4C1h, 4C7h, 4CDh, 4CFh, 4D5h, 4E1h, 4EBh, 4FDh
dd 4FFh, 503h, 509h, 50Bh, 511h, 515h, 517h, 51Bh, 527h
dd 529h, 52Fh, 551h, 557h, 55Dh, 565h, 577h, 581h, 58Fh
dd 593h, 595h, 599h, 59Fh, 5A7h, 5ABh, 5ADh, 5B3h, 5BFh
dd 5C9h, 5CBh, 5CFh, 5D1h, 5D5h, 5DBh, 5E7h, 5F3h, 5FBh
dd 607h, 60Dh, 611h, 617h, 61Fh, 623h, 62Bh, 62Fh, 63Dh
dd 641h, 647h, 649h, 64Dh, 653h
			
			
$1FA144FB45AB58A47DAA9CABC8012F36 <100h, 10h>
$1FA144FB45AB58A47DAA9CABC8012F36 <180h, 0Ah>
$1FA144FB45AB58A47DAA9CABC8012F36 <200h, 7>
$1FA144FB45AB58A47DAA9CABC8012F36 <280h, 6>
$1FA144FB45AB58A47DAA9CABC8012F36 <300h, 5>
$1FA144FB45AB58A47DAA9CABC8012F36 <380h, 4>
$1FA144FB45AB58A47DAA9CABC8012F36 <400h, 4>
			
db 7 dup(1), 0,	7 dup(1), 0, 2 dup(1), 0, 4 dup(1), 0
db 7 dup(1), 0,	7 dup(1), 0, 6 dup(1), 2 dup(0), 2 dup(1)
db 0, 4	dup(1),	0, 7 dup(1), 0,	7 dup(1), 0, 7 dup(1)
db 0, 2	dup(1),	0, 4 dup(1), 0,	7 dup(1), 0, 7 dup(1)
db 0, 6	dup(1)
			
db 4 dup(1), 0,	3 dup(1), 0, 4 dup(1), 0, 5 dup(1), 0
db 2 dup(1), 0,	6 dup(1), 0, 2 dup(1), 0, 1, 0,	8 dup(1)
db 0, 3	dup(1),	0, 5 dup(1), 0,	8 dup(1), 0, 1,	0, 2 dup(1)
db 2 dup(0), 5 dup(1), 0, 7 dup(1), 2 dup(0), 4	dup(1)
align 20h
			
			
align 4
			
$DF5B66B521779BD5EE36F98C0C23824F <0FFFFFFFEh, offset aOutOfHeap> 
$DF5B66B521779BD5EE36F98C0C23824F <0FFFFFFFDh, offset aValueOutOfRang>
align 20h
			
			
align 4
			
align 10h
			
			
align 10h
			
align 4
			
align 4
			
db '20BBEA63B139B22514A08798E3404DDEF9519B3CD3A431B302B0A6DF25F14374F'
db 'E1356D6D51C245E485B576625E7EC6F44C42E9A637ED6B0BFF5CB6F406B7EDEE3'
db '86BFB5A899FA5AE9F24117C4B1FE649286651ECE65381FFFFFFFFFFFFFFFF',0
align 10h
			
db '105DF531D89CD9128A5043CC71A026EF7CA8CD9E69D218D98158536F92F8A1BA7'
db 'F09AB6B6A8E122F242DABB312F3F637A262174D31BF6B585FFAE5B7A035BF6F71'
db 'C35FDAD44CFD2D74F9208BE258FF324943328F67329C0FFFFFFFFFFFFFFFF',0
align 4
			
db '20BBEA63B139B22514A08798E3404DDEF9519B3CD3A431B302B0A6DF25F14374F'
db 'E1356D6D51C245E485B576625E7EC6F44C42E9A637ED6B0BFF5CB6F406B7EDEE3'
db '86BFB5A899FA5AE9F24117C4B1FE649286651ECE45B3DC2007CB8A163BF0598DA'
db '48361C55D39A69163FA8FD24CF5F83655D23DCA3AD961C62F356208552BB9ED52'
db '9077096966D670C354E4ABC9804F1746C08CA237327FFFFFFFFFFFFFFFF',0
align 10h
			
db '105DF531D89CD9128A5043CC71A026EF7CA8CD9E69D218D98158536F92F8A1BA7'
db 'F09AB6B6A8E122F242DABB312F3F637A262174D31BF6B585FFAE5B7A035BF6F71'
db 'C35FDAD44CFD2D74F9208BE258FF324943328F6722D9EE1003E5C50B1DF82CC6D'
db '241B0E2AE9CD348B1FD47E9267AFC1B2AE91EE51D6CB0E3179AB1042A95DCF6A9'
db '483B84B4B36B3861AA7255E4C0278BA36046511B993FFFFFFFFFFFFFFFF',0
align 10h
public _silc_ske_groups
			
			
				    offset aFfffffffffffff, \ 
				    offset a7fffffffffffff, offset a2>
SilcSKEDiffieHellmanGroupDefStruct <2, offset aDiffieHellma_0, \
				    offset aFfffffffffff_0, \
				    offset a7fffffffffff_0, offset a2>
SilcSKEDiffieHellmanGroupDefStruct  <0>
align 10h
			
align 4
			
align 4
			
align 4
			
align 4
			
align 10h
			
			
			
align 4
			
db 'uthentication',0
			
			
align 4
			
align 4
			
			
align 4
			
			
align 4
			
align 4
			
			
			
			
align 4
			
			
			
align 4
			
db 'ugh we require it',0
align 4
			
			
			
			
align 10h
			
			
			
align 4
			
			
			
align 4
db 0Dh,0Ah,0
align 4
			
db 'Server: SILCHTTP/1.0',0Dh,0Ah,0
			
			
			
align 4
			
			
			
align 4
			
align 10h
			
align 10h
public _silc_sftp_fs_memory
			
			     offset _memfs_encode_handle, \
			     offset _memfs_open, offset	_memfs_close, \
			     offset _memfs_read, offset	_memfs_write, \
			     offset _memfs_remove, \
			     offset _memfs_rename, \
			     offset _memfs_mkdir, offset _memfs_rmdir,\
			     offset _memfs_opendir, \
			     offset _memfs_readdir, \
			     offset _memfs_stat, offset	_memfs_lstat, \
			     offset _memfs_fstat, \
			     offset _memfs_setstat, \
			     offset _memfs_fsetstat, \
			     offset _memfs_readlink, \
			     offset _memfs_symlink, \
			     offset _memfs_realpath, \
			     offset _memfs_extended>
align 10h
			
			
			
dd offset loc_64237544,	offset loc_6423748C, offset loc_64237371 
dd offset loc_64237248,	offset loc_642371A9, offset loc_642370F1
dd offset loc_6423700B,	offset loc_64236EEE, offset loc_64236E4F
dd offset loc_64236D97,	offset loc_64236CF8, offset loc_64236BFF
dd offset loc_64236B60,	offset loc_64236AC1, offset loc_64236A22
dd offset loc_64236965,	offset loc_642368C6, offset loc_642367F6
dd offset loc_64236540,	offset loc_64236540, offset loc_64236540
dd offset loc_64236540,	offset loc_64236540, offset loc_64236540
dd offset loc_64236540,	offset loc_64236540, offset loc_64236540
dd offset loc_64236540,	offset loc_64236540, offset loc_64236540
dd offset loc_64236540,	offset loc_64236540, offset loc_64236540
dd offset loc_64236540,	offset loc_64236540, offset loc_64236540
dd offset loc_64236540,	offset loc_64236540, offset loc_64236540
dd offset loc_64236540,	offset loc_64236540, offset loc_64236540
dd offset loc_64236540,	offset loc_64236540, offset loc_64236540
dd offset loc_64236540,	offset loc_64236540, offset loc_64236540
dd offset loc_64236540,	offset loc_64236540, offset loc_64236540
dd offset loc_64236540,	offset loc_64236540, offset loc_64236540
dd offset loc_64236540,	offset loc_64236540, offset loc_64236540
dd offset loc_64236540,	offset loc_64236540, offset loc_64236540
dd offset loc_64236540,	offset loc_64236540, offset loc_64236540
dd offset loc_64236540,	offset loc_64236540, offset loc_64236540
dd offset loc_64236540,	offset loc_64236540, offset loc_64236540
dd offset loc_64236540,	offset loc_64236540, offset loc_64236540
dd offset loc_64236540,	offset loc_64236540, offset loc_64236540
dd offset loc_64236540,	offset loc_64236540, offset loc_64236540
dd offset loc_64236540,	offset loc_64236540, offset loc_64236540
dd offset loc_64236540,	offset loc_64236540, offset loc_64236540
dd offset loc_64236540,	offset loc_64236540, offset loc_64236540
dd offset loc_64236540,	offset loc_64236540, offset loc_64236540
dd offset loc_64236540,	offset loc_64236540, offset loc_64236540
dd offset loc_64236540,	offset loc_64236540, offset loc_64236540
dd offset loc_64236540,	offset loc_64236540, offset loc_64236540
dd offset loc_64236540,	offset loc_64236540, offset loc_64236540
dd offset loc_64236540,	offset loc_64236540, offset loc_64236540
dd offset loc_64236540,	offset loc_64236540, offset loc_64236540
dd offset loc_64236540,	offset loc_64236540, offset loc_64236540
dd offset loc_64236540,	offset loc_64236540, offset loc_64236540
dd offset loc_64236540,	offset loc_64236540, offset loc_64236540
dd offset loc_64236540,	offset loc_64236540, offset loc_64236540
dd offset loc_64236540,	offset loc_64236540, offset loc_64236540
dd offset loc_64236540,	offset loc_64236540, offset loc_64236540
dd offset loc_64236540,	offset loc_64236540, offset loc_64236540
dd offset loc_64236540,	offset loc_64236540, offset loc_64236540
dd offset loc_64236540,	offset loc_64236540, offset loc_64236540
dd offset loc_64236540,	offset loc_64236540, offset loc_64236540
dd offset loc_64236540,	offset loc_64236540, offset loc_64236540
dd offset loc_64236540,	offset loc_64236540, offset loc_64236540
dd offset loc_64236540,	offset loc_64236540, offset loc_64236540
dd offset loc_64236540,	offset loc_64236540, offset loc_64236540
dd offset loc_64236540,	offset loc_64236540, offset loc_64236540
dd offset loc_64236540,	offset loc_64236540, offset loc_64236540
dd offset loc_64236540,	offset loc_64236540, offset loc_64236540
dd offset loc_64236540,	offset loc_64236540, offset loc_64236540
dd offset loc_64236540,	offset loc_64236540, offset loc_64236540
dd offset loc_64236540,	offset loc_64236540, offset loc_64236540
dd offset loc_64236540,	offset loc_64236540, offset loc_64236540
dd offset loc_64236540,	offset loc_64236540, offset loc_64236540
dd offset loc_64236540,	offset loc_64236540, offset loc_64236540
dd offset loc_64236540,	offset loc_64236540, offset loc_64236540
dd offset loc_64236540,	offset loc_64236540, offset loc_64236540
dd offset loc_64236540,	offset loc_64236540, offset loc_64236540
dd offset loc_64236540,	offset loc_64236540, offset loc_64236540
dd offset loc_64236540,	offset loc_64236540, offset loc_64236540
dd offset loc_64236540,	offset loc_64236540, offset loc_64236540
dd offset loc_64236540,	offset loc_64236540, offset loc_642366C0
align 20h
dd 3, 2, 6 dup(4), 2, 3	dup(4),	2 dup(3), 5 dup(4), 2
dd 4, 5, 0Fh dup(4), 5,	0
			
			
			
align 4
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
align 10h
			
align 4
			
align 10h
public __RUNTIME_PSEUDO_RELOC_LIST_END__
			
align 800h
assume cs:_eh_frame

			
dd 7C010001h, 4040C08h,	10811h,	20h, 18h
dd offset ___udivdi3
dd 10Eh, 11080E41h, 0D420205h, 3114605h, 4061105h, 30711h
dd 10h,	0
dd 7C010001h, 4040C08h,	10811h,	20h, 18h
dd offset ___umoddi3
dd 108h, 11080E41h, 0D420205h, 3114605h, 4061105h, 30711h
dd 10h,	0
dd 7C010001h, 4040C08h,	10811h,	20h, 18h
dd offset ___divdi3
dd 14Eh, 11080E41h, 0D420205h, 3114605h, 4061105h, 30711h
dd 10h,	0
dd 7C010001h, 4040C08h,	10811h,	20h, 18h
dd offset ___moddi3
dd 184h, 11080E41h, 0D420205h, 3114605h, 4061105h, 30711h
align 1000h
assume cs:_bss

assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
public __bss_start__
align 10h
align 10h
			
align 10h
			
align 10h
			
align 10h
			
			
			
align 10h
			
align 10h
			
align 10h
			
align 10h
			
align 4
dd 3Fh dup(?)
			
align 4
dd 3Fh dup(?)
			
align 10h
			
public _silc_cipher_list
			
public _silc_hash_list
			
public _silc_hmac_list
			
public _silc_pkcs_list
			
public _silc_pkcs_alg_list
			
public _global_rng
			
			
dd 3 dup(?)
			
dd 4 dup(?)
public __bss_end__
extrn __head_libadvapi32_a
extrn __imp__GetUserNameA@8:dword 
extrn __imp__CloseHandle@4:dword 
extrn __imp__CreateSemaphoreA@16:dword 
extrn __imp__GetModuleHandleA@4:dword 
extrn __imp__GetProcAddress@8:dword 
extrn __imp__GetSystemTimeAsFileTime@4:dword
			
extrn __imp__GetTickCount@0:dword 
extrn __imp__ReleaseSemaphore@12:dword 
extrn __imp__SleepEx@8:dword 
extrn __imp__VirtualProtect@16:dword 
extrn __imp__VirtualQuery@12:dword 
extrn __imp__chmod:dword 
extrn __imp__close:dword 
extrn __imp__fstat:dword 
extrn __imp__lseek:dword 
extrn __imp__open:dword	
extrn __imp__read:dword	
extrn __imp__stat:dword	
extrn __imp__strdup:dword 
extrn __imp__stricmp:dword 
extrn __imp__unlink:dword 
extrn __imp__write:dword 
extrn __imp____dllonexit:dword 
extrn __imp____mb_cur_max:dword	
			
extrn __imp___assert:dword 
extrn __imp___errno:dword 
extrn __imp___filbuf:dword 
extrn __imp___iob:dword	
			
extrn __imp___isctype:dword 
extrn __imp___mktemp:dword 
extrn __imp___pclose:dword 
extrn __imp___pctype:dword 
			
extrn __imp___popen:dword 
extrn __imp___timezone:dword 
extrn __imp___unlink:dword 
extrn __imp__abort:dword 
extrn __imp__atoi:dword	
extrn __imp__calloc:dword 
extrn __imp__clock:dword 
extrn __imp__ctime:dword 
extrn __imp__exit:dword	
extrn __imp__fclose:dword 
extrn __imp__fflush:dword 
extrn __imp__fgetc:dword 
extrn __imp__fopen:dword 
extrn __imp__fprintf:dword 
extrn __imp__fputc:dword 
extrn __imp__fread:dword 
extrn __imp__free:dword	
extrn __imp__fwrite:dword 
extrn __imp__localtime:dword 
extrn __imp__malloc:dword 
extrn __imp__memchr:dword 
extrn __imp__memcmp:dword 
extrn __imp__memcpy:dword 
extrn __imp__memmove:dword 
extrn __imp__printf:dword 
extrn __imp__putchar:dword 
extrn __imp__puts:dword	
extrn __imp__rand:dword	
extrn __imp__realloc:dword 
extrn __imp__rename:dword 
extrn __imp__sprintf:dword 
extrn __imp__srand:dword 
extrn __imp__sscanf:dword 
extrn __imp__strchr:dword 
extrn __imp__strcmp:dword 
extrn __imp__strcpy:dword 
extrn __imp__strcspn:dword 
extrn __imp__strerror:dword 
extrn __imp__strncat:dword 
extrn __imp__strncmp:dword 
extrn __imp__strncpy:dword 
extrn __imp__strrchr:dword 
extrn __imp__strstr:dword 
extrn __imp__strtol:dword 
extrn __imp__time:dword	
extrn __imp__tolower:dword 
extrn __imp__toupper:dword 
extrn __imp__vfprintf:dword 
extrn __imp__CreateWindowExA@48:dword 
extrn __imp__DefWindowProcA@16:dword 
extrn __imp__DestroyWindow@4:dword 
extrn __imp__DispatchMessageA@4:dword 
extrn __imp__GetWindowLongA@8:dword 
extrn __imp__MsgWaitForMultipleObjects@20:dword
			
extrn __imp__PeekMessageA@20:dword 
extrn __imp__RegisterClassA@4:dword 
extrn __imp__SetWindowLongA@12:dword 
extrn __imp__SetWindowPos@28:dword 
extrn __imp__TranslateMessage@4:dword 
extrn __imp__UnregisterClassA@8:dword 
extrn __imp__WSAAsyncSelect@16:dword 
extrn __imp__WSACleanup@0:dword	
extrn __imp__WSAGetLastError@0:dword 
extrn __imp__WSAStartup@8:dword	
extrn __imp__accept@12:dword 
extrn __imp__bind@12:dword 
extrn __imp__closesocket@4:dword 
extrn __imp__connect@12:dword 
extrn __imp__gethostbyaddr@12:dword 
extrn __imp__gethostbyname@4:dword 
extrn __imp__gethostname@8:dword 
extrn __imp__getpeername@12:dword 
extrn __imp__getsockname@12:dword 
extrn __imp__getsockopt@20:dword 
extrn __imp__htons@4:dword 
extrn __imp__inet_ntoa@4:dword 
extrn __imp__ioctlsocket@12:dword 
extrn __imp__listen@8:dword 
extrn __imp__ntohs@4:dword 
extrn __imp__recv@16:dword 
extrn __imp__recvfrom@24:dword 
extrn __imp__send@16:dword 
extrn __imp__sendto@24:dword 
extrn __imp__setsockopt@20:dword 
extrn __imp__shutdown@8:dword 
extrn __imp__socket@12:dword 
end _DllMainCRTStartup@12
