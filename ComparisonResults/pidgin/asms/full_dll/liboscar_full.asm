;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2015 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-3677-7074-51			    |
; |		Michalis Polychronakis,	Stony Brook University		    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	CD5A815F61B7325DD6EC0516A60D1892
; Input	CRC32 :	9BD81D9F

; File Name   :	C:\compspace\compare\pidgin\dlls\full\liboscar_full.dll
; Format      :	Portable executable for	80386 (PE)
; Imagebase   :	68880000
; Section 1. (virtual address 00001000)
; Virtual size			: 0002BF30 ( 180016.)
; Section size in file		: 0002C000 ( 180224.)
; Offset to raw	data for section: 00000400
; Flags	60500060: Text Data Executable Readable
; Alignment	: 16 bytes

		include	uni.inc	; see unicode subdir of	ida for	info on	unicode

		.686p
		.mmx
		.model flat

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 68881000h
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


sub_68881000	proc near		; CODE XREF: DllEntryPoint+49p

Memory		= dword	ptr -1Ch

		push	ebx
		sub	esp, 18h
		mov	edx, ds:Memory
		test	edx, edx
		jz	short loc_68881042
		mov	ebx, ds:dword_688C1004

loc_68881014:				; CODE XREF: sub_68881000+1Fj
		sub	ebx, 4
		cmp	edx, ebx
		ja	short loc_68881030

loc_6888101B:				; CODE XREF: sub_68881000+2Ej
		mov	eax, [ebx]
		test	eax, eax
		jz	short loc_68881014
		call	eax
		mov	edx, ds:Memory
		sub	ebx, 4
		cmp	edx, ebx
		jbe	short loc_6888101B

loc_68881030:				; CODE XREF: sub_68881000+19j
		mov	[esp+1Ch+Memory], edx ;	Memory
		call	free
		mov	ds:Memory, 0

loc_68881042:				; CODE XREF: sub_68881000+Cj
		mov	[esp+1Ch+Memory], 0 ; File
		call	fflush
		add	esp, 18h
		pop	ebx
		retn
sub_68881000	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; BOOL __stdcall DllEntryPoint(HINSTANCE hinstDLL, DWORD fdwReason, LPVOID lpReserved)
		public DllEntryPoint
DllEntryPoint	proc near

Size		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
hinstDLL	= dword	ptr  4
fdwReason	= dword	ptr  8
lpReserved	= dword	ptr  0Ch

		sub	esp, 2Ch
		mov	[esp+2Ch+var_C], ebx
		mov	ebx, [esp+2Ch+fdwReason]
		mov	[esp+2Ch+var_8], esi
		mov	esi, [esp+2Ch+hinstDLL]
		mov	[esp+2Ch+var_4], edi
		mov	edi, [esp+2Ch+lpReserved]
		cmp	ebx, 1
		jz	short loc_688810C4
		mov	[esp+2Ch+var_24], edi
		mov	[esp+2Ch+var_28], ebx
		mov	[esp+2Ch+Size],	esi
		call	sub_688AC7A0
		sub	esp, 0Ch
		test	ebx, ebx
		jnz	short loc_688810B2
		mov	edx, ds:Memory
		test	edx, edx
		jz	loc_68881130

loc_688810A5:				; CODE XREF: DllEntryPoint+C4j
		mov	[esp+2Ch+var_10], eax
		call	sub_68881000
		mov	eax, [esp+2Ch+var_10]

loc_688810B2:				; CODE XREF: DllEntryPoint+35j
					; DllEntryPoint+CAj ...
		mov	ebx, [esp+2Ch+var_C]
		mov	esi, [esp+2Ch+var_8]
		mov	edi, [esp+2Ch+var_4]
		add	esp, 2Ch
		retn	0Ch
; ---------------------------------------------------------------------------

loc_688810C4:				; CODE XREF: DllEntryPoint+1Ej
		mov	[esp+2Ch+Size],	80h ; Size
		call	malloc
		test	eax, eax
		mov	ds:Memory, eax
		jz	short loc_68881137
		mov	dword ptr [eax], 0
		mov	ds:dword_688C1004, eax
		mov	eax, ds:off_688B63D4
		test	eax, eax
		jz	short loc_68881101
		mov	[esp+2Ch+var_24], edi
		mov	[esp+2Ch+var_28], 2
		mov	[esp+2Ch+Size],	esi
		call	eax ; TlsCallback_0
		sub	esp, 0Ch

loc_68881101:				; CODE XREF: DllEntryPoint+8Bj
		call	sub_688AC920
		call	sub_688ACB80
		mov	[esp+2Ch+var_24], edi
		mov	[esp+2Ch+var_28], 1
		mov	[esp+2Ch+Size],	esi
		call	sub_688AC7A0
		sub	esp, 0Ch
		test	eax, eax
		jz	loc_688810A5
		jmp	short loc_688810B2
; ---------------------------------------------------------------------------
		align 10h

loc_68881130:				; CODE XREF: DllEntryPoint+3Fj
		xor	eax, eax
		jmp	loc_688810B2
; ---------------------------------------------------------------------------

loc_68881137:				; CODE XREF: DllEntryPoint+77j
		mov	esi, esi
		lea	edi, [edi+0]
		call	_errno
		mov	dword ptr [eax], 0Ch
		xor	eax, eax
		jmp	loc_688810B2
DllEntryPoint	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_68881160	proc near		; CODE XREF: sub_688ACB80-27p
					; sub_688ACF00+12p

var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
arg_0		= dword	ptr  4

		sub	esp, 1Ch
		mov	eax, [esp+1Ch+arg_0]
		mov	[esp+1Ch+var_14], offset dword_688C1004
		mov	[esp+1Ch+var_18], offset Memory
		mov	[esp+1Ch+var_1C], eax
		call	__dllonexit
		cmp	eax, 1
		sbb	eax, eax
		add	esp, 1Ch
		retn
sub_68881160	endp

; ---------------------------------------------------------------------------
		align 10h
		sub	esp, 1Ch
		mov	eax, [esp+20h]
		mov	dword ptr [esp+8], offset dword_688C1004
		mov	dword ptr [esp+4], offset Memory
		mov	[esp], eax
		call	__dllonexit
		add	esp, 1Ch
		retn
; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_688811C0	proc near		; CODE XREF: sub_688ACF00+6p

lpModuleName	= dword	ptr -18h
lpProcName	= dword	ptr -14h

		push	ebp
		mov	ebp, esp
		sub	esp, 18h
		mov	[esp+18h+lpModuleName],	offset ModuleName ; "libgcc_s_dw2-1.dll"
		call	GetModuleHandleA
		push	edx
		test	eax, eax
		jz	short loc_6888123C
		mov	[esp+18h+lpProcName], offset ProcName ;	"__register_frame_info"
		mov	[esp+18h+lpModuleName],	eax ; hModule
		call	GetProcAddress
		sub	esp, 8

loc_688811EA:				; CODE XREF: sub_688811C0+81j
		test	eax, eax
		jz	short loc_688811FF
		mov	[esp+18h+lpProcName], offset dword_688C1008
		mov	[esp+18h+lpModuleName],	offset dword_688BA0A4
		call	eax

loc_688811FF:				; CODE XREF: sub_688811C0+2Cj
		mov	ecx, dword_688AD208
		test	ecx, ecx
		jz	short locret_6888123A
		mov	[esp+18h+lpModuleName],	offset aLibgcj13_dll ; "libgcj-13.dll"
		call	GetModuleHandleA
		push	edx
		test	eax, eax
		jz	short loc_68881244
		mov	[esp+18h+lpProcName], offset a_jv_registercl ; "_Jv_RegisterClasses"
		mov	[esp+18h+lpModuleName],	eax ; hModule
		call	GetProcAddress
		sub	esp, 8

loc_6888122D:				; CODE XREF: sub_688811C0+89j
		test	eax, eax
		jz	short locret_6888123A
		mov	[esp+18h+lpModuleName],	offset dword_688AD208
		call	eax

locret_6888123A:			; CODE XREF: sub_688811C0+47j
					; sub_688811C0+6Fj
		leave
		retn
; ---------------------------------------------------------------------------

loc_6888123C:				; CODE XREF: sub_688811C0+15j
		mov	eax, 0
		jmp	short loc_688811EA
; ---------------------------------------------------------------------------
		align 4

loc_68881244:				; CODE XREF: sub_688811C0+58j
		mov	eax, 0
		jmp	short loc_6888122D
sub_688811C0	endp

; ---------------------------------------------------------------------------
		align 4

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_6888124C	proc near		; DATA XREF: sub_688ACF00+Bo

lpModuleName	= dword	ptr -18h
lpProcName	= dword	ptr -14h

		push	ebp
		mov	ebp, esp
		sub	esp, 18h
		mov	[esp+18h+lpModuleName],	offset ModuleName ; "libgcc_s_dw2-1.dll"
		call	GetModuleHandleA
		push	ecx
		test	eax, eax
		jz	short loc_68881288
		mov	[esp+18h+lpProcName], offset a__deregister_f ; "__deregister_frame_info"
		mov	[esp+18h+lpModuleName],	eax ; hModule
		call	GetProcAddress
		sub	esp, 8

loc_68881276:				; CODE XREF: sub_6888124C+41j
		test	eax, eax
		jz	short locret_68881283
		mov	[esp+18h+lpModuleName],	offset dword_688BA0A4
		call	eax

locret_68881283:			; CODE XREF: sub_6888124C+2Cj
		leave
		retn
; ---------------------------------------------------------------------------
		align 4

loc_68881288:				; CODE XREF: sub_6888124C+15j
		mov	eax, 0
		jmp	short loc_68881276
sub_6888124C	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_68881290	proc near		; DATA XREF: oscar_auth_recvrequest+5Eo

var_7C		= dword	ptr -7Ch
var_78		= dword	ptr -78h
var_74		= dword	ptr -74h
var_70		= dword	ptr -70h
var_6C		= dword	ptr -6Ch
var_68		= dword	ptr -68h
var_64		= dword	ptr -64h
var_60		= dword	ptr -60h
var_5C		= dword	ptr -5Ch
var_58		= dword	ptr -58h
var_54		= dword	ptr -54h
var_50		= dword	ptr -50h
var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_20		= dword	ptr -20h
arg_0		= dword	ptr  4

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 6Ch
		mov	ebx, [esp+7Ch+arg_0]
		mov	eax, ds:__stack_chk_guard
		mov	[esp+7Ch+var_20], eax
		xor	eax, eax
		mov	ecx, [ebx+4]
		mov	eax, [ebx]
		mov	[esp+7Ch+var_7C], eax
		mov	[esp+7Ch+var_34], ecx
		call	purple_connection_get_account
		mov	[esp+7Ch+var_78], offset a_cancel_0 ; "_Cancel"
		mov	[esp+7Ch+var_7C], offset aPidgin ; "pidgin"
		mov	[esp+7Ch+var_30], eax
		call	libintl_dgettext
		mov	ebp, eax
		mov	[esp+7Ch+var_78], offset a_ok_0	; "_OK"
		mov	[esp+7Ch+var_7C], offset aPidgin ; "pidgin"
		call	libintl_dgettext
		mov	edi, eax
		mov	[esp+7Ch+var_78], offset aNoReasonGive_0 ; "No reason given."
		mov	[esp+7Ch+var_7C], offset aPidgin ; "pidgin"
		call	libintl_dgettext
		mov	esi, eax
		mov	[esp+7Ch+var_78], offset aAuthorizatio_1 ; "Authorization Denied Message:"
		mov	[esp+7Ch+var_7C], offset aPidgin ; "pidgin"
		call	libintl_dgettext
		mov	[esp+7Ch+var_40], ebx
		mov	[esp+7Ch+var_44], 0
		mov	ecx, [esp+7Ch+var_34]
		mov	[esp+7Ch+var_48], ecx
		mov	edx, [esp+7Ch+var_30]
		mov	[esp+7Ch+var_4C], edx
		mov	[esp+7Ch+var_50], offset oscar_free_name_data
		mov	[esp+7Ch+var_54], ebp
		mov	[esp+7Ch+var_58], offset loc_6888139C
		mov	[esp+7Ch+var_5C], edi
		mov	[esp+7Ch+var_60], 0
		mov	[esp+7Ch+var_64], 0
		mov	[esp+7Ch+var_68], 1
		mov	[esp+7Ch+var_6C], esi
		mov	[esp+7Ch+var_70], 0
		mov	[esp+7Ch+var_74], eax
		mov	[esp+7Ch+var_78], 0
		mov	eax, [ebx]
		mov	[esp+7Ch+var_7C], eax
		call	purple_request_input
		mov	eax, [esp+7Ch+var_20]
		xor	eax, ds:__stack_chk_guard
		jnz	short loc_68881396
		add	esp, 6Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_68881396:				; CODE XREF: sub_68881290+FCj
		call	__stack_chk_fail
sub_68881290	endp

; ---------------------------------------------------------------------------
		align 4

loc_6888139C:				; DATA XREF: sub_68881290+ACo
		push	edi
		push	esi
		push	ebx
		sub	esp, 20h
		mov	ebx, [esp+30h]
		mov	esi, [esp+34h]
		mov	eax, ds:__stack_chk_guard
		mov	[esp+1Ch], eax
		xor	eax, eax
		mov	eax, [ebx]
		mov	[esp], eax
		call	purple_connection_get_protocol_data
		mov	edi, eax
		test	esi, esi
		jz	short loc_688813FC

loc_688813C5:				; CODE XREF: .text:68881412j
		mov	[esp+0Ch], esi
		mov	dword ptr [esp+8], 0
		mov	eax, [ebx+4]
		mov	[esp+4], eax
		mov	[esp], edi
		call	aim_ssi_sendauthreply
		mov	eax, [esp+1Ch]
		xor	eax, ds:__stack_chk_guard
		jnz	short loc_68881414
		mov	[esp+30h], ebx
		add	esp, 20h
		pop	ebx
		pop	esi
		pop	edi
		jmp	oscar_free_name_data
; ---------------------------------------------------------------------------
		align 4

loc_688813FC:				; CODE XREF: .text:688813C3j
		mov	dword ptr [esp+4], offset aNoReasonGive_0 ; "No	reason given."
		mov	dword ptr [esp], offset	aPidgin	; "pidgin"
		call	libintl_dgettext
		mov	esi, eax
		jmp	short loc_688813C5
; ---------------------------------------------------------------------------

loc_68881414:				; CODE XREF: .text:688813EAj
		call	__stack_chk_fail
; ---------------------------------------------------------------------------
		align 4

; =============== S U B	R O U T	I N E =======================================


sub_6888141C	proc near		; DATA XREF: oscar_auth_recvrequest+66o

var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_10		= dword	ptr -10h
arg_0		= dword	ptr  4

		push	ebx
		sub	esp, 28h
		mov	ebx, [esp+2Ch+arg_0]
		mov	eax, ds:__stack_chk_guard
		mov	[esp+2Ch+var_10], eax
		xor	eax, eax
		mov	eax, [ebx]
		mov	[esp+2Ch+var_2C], eax
		call	purple_connection_get_protocol_data
		mov	[esp+2Ch+var_20], 0
		mov	[esp+2Ch+var_24], 1
		mov	edx, [ebx+4]
		mov	[esp+2Ch+var_28], edx
		mov	[esp+2Ch+var_2C], eax
		call	aim_ssi_sendauthreply
		mov	eax, [esp+2Ch+var_10]
		xor	eax, ds:__stack_chk_guard
		jnz	short loc_68881471
		mov	[esp+2Ch+arg_0], ebx
		add	esp, 28h
		pop	ebx
		jmp	oscar_free_name_data
; ---------------------------------------------------------------------------

loc_68881471:				; CODE XREF: sub_6888141C+46j
		call	__stack_chk_fail
sub_6888141C	endp

; ---------------------------------------------------------------------------
		align 4
; Exported entry 216. oscar_auth_sendrequest

; =============== S U B	R O U T	I N E =======================================


		public oscar_auth_sendrequest
oscar_auth_sendrequest proc near	; CODE XREF: oscar_auth_sendrequest_menu+79p
					; sub_6889B308+36Cp ...

var_5C		= dword	ptr -5Ch
var_58		= dword	ptr -58h
var_54		= dword	ptr -54h
var_50		= dword	ptr -50h
var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_20		= dword	ptr -20h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 4Ch
		mov	esi, [esp+5Ch+arg_0]
		mov	ebx, [esp+5Ch+arg_4]
		mov	ebp, [esp+5Ch+arg_8]
		mov	eax, ds:__stack_chk_guard
		mov	[esp+5Ch+var_20], eax
		xor	eax, eax
		mov	[esp+5Ch+var_5C], esi
		call	purple_connection_get_protocol_data
		mov	edi, eax
		mov	[esp+5Ch+var_5C], esi
		call	purple_connection_get_account
		mov	[esp+5Ch+var_30], eax
		mov	[esp+5Ch+var_58], ebx
		mov	[esp+5Ch+var_5C], eax
		call	purple_find_buddy
		mov	esi, eax
		test	eax, eax
		jz	short loc_68881530
		mov	[esp+5Ch+var_5C], eax
		call	purple_buddy_get_group
		test	eax, eax
		jz	short loc_68881530
		mov	[esp+5Ch+var_5C], eax
		call	purple_group_get_name
		mov	[esp+5Ch+var_34], eax
		mov	[esp+5Ch+var_50], eax
		mov	[esp+5Ch+var_54], ebx
		mov	[esp+5Ch+var_58], offset aSsiAddingBuddy ; "ssi: adding	buddy %s to group %s\n"
		mov	[esp+5Ch+var_5C], offset aOscar	; "oscar"
		call	purple_debug_info
		test	ebp, ebp
		jz	loc_688815E4

loc_688814FA:				; CODE XREF: oscar_auth_sendrequest+182j
		mov	[esp+5Ch+var_54], ebp
		mov	[esp+5Ch+var_58], ebx
		mov	[esp+5Ch+var_5C], edi
		call	aim_ssi_sendauthrequest
		mov	[esp+5Ch+var_50], 0
		mov	[esp+5Ch+var_54], ebx
		mov	eax, [esp+5Ch+var_34]
		mov	[esp+5Ch+var_58], eax
		mov	eax, [edi+0D8h]
		mov	[esp+5Ch+var_5C], eax
		call	aim_ssi_itemlist_finditem
		test	eax, eax
		jz	short loc_68881548

loc_68881530:				; CODE XREF: oscar_auth_sendrequest+44j
					; oscar_auth_sendrequest+50j ...
		mov	eax, [esp+5Ch+var_20]
		xor	eax, ds:__stack_chk_guard
		jnz	loc_688815FF
		add	esp, 4Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_68881548:				; CODE XREF: oscar_auth_sendrequest+B6j
		mov	[esp+5Ch+var_5C], esi
		call	purple_buddy_get_alias_only
		mov	[esp+5Ch+var_40], 1
		mov	[esp+5Ch+var_44], 0
		mov	[esp+5Ch+var_48], 0
		mov	[esp+5Ch+var_4C], eax
		mov	[esp+5Ch+var_50], 0
		mov	eax, [esp+5Ch+var_34]
		mov	[esp+5Ch+var_54], eax
		mov	[esp+5Ch+var_58], ebx
		mov	[esp+5Ch+var_5C], edi
		call	aim_ssi_addbuddy
		cmp	byte ptr [ebx],	2Bh
		jnz	short loc_68881530
		mov	[esp+5Ch+var_5C], esi
		call	purple_buddy_get_name
		mov	[esp+5Ch+var_50], 0
		mov	[esp+5Ch+var_54], offset aAvailable ; "available"
		mov	[esp+5Ch+var_58], eax
		mov	eax, [esp+5Ch+var_30]
		mov	[esp+5Ch+var_5C], eax
		call	purple_prpl_got_user_status
		mov	[esp+5Ch+var_5C], esi
		call	purple_buddy_get_name
		mov	[esp+5Ch+var_50], 0
		mov	[esp+5Ch+var_54], offset aMobile ; "mobile"
		mov	[esp+5Ch+var_58], eax
		mov	eax, [esp+5Ch+var_30]
		mov	[esp+5Ch+var_5C], eax
		call	purple_prpl_got_user_status
		jmp	loc_68881530
; ---------------------------------------------------------------------------
		align 4

loc_688815E4:				; CODE XREF: oscar_auth_sendrequest+7Cj
		mov	[esp+5Ch+var_58], offset aPleaseAuthoriz ; "Please authorize me	so I can add you to"...
		mov	[esp+5Ch+var_5C], offset aPidgin ; "pidgin"
		call	libintl_dgettext
		mov	ebp, eax
		jmp	loc_688814FA
; ---------------------------------------------------------------------------

loc_688815FF:				; CODE XREF: oscar_auth_sendrequest+C2j
		call	__stack_chk_fail
oscar_auth_sendrequest endp

; Exported entry 217. oscar_auth_sendrequest_menu

; =============== S U B	R O U T	I N E =======================================


		public oscar_auth_sendrequest_menu
oscar_auth_sendrequest_menu proc near	; DATA XREF: oscar_blist_node_menu+194o

var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_10		= dword	ptr -10h
arg_0		= dword	ptr  4

		push	esi
		push	ebx
		sub	esp, 24h
		mov	ebx, [esp+2Ch+arg_0]
		mov	eax, ds:__stack_chk_guard
		mov	[esp+2Ch+var_10], eax
		xor	eax, eax
		mov	[esp+2Ch+var_2C], ebx
		call	purple_blist_node_get_type
		cmp	eax, 2
		jz	short loc_68881654
		mov	[esp+2Ch+var_24], offset aPurple_blist_n ; "PURPLE_BLIST_NODE_IS_BUDDY(node)"
		mov	[esp+2Ch+var_28], offset aOscar_auth_sen ; "oscar_auth_sendrequest_menu"
		mov	[esp+2Ch+var_2C], 0
		call	g_return_if_fail_warning

loc_68881641:				; CODE XREF: oscar_auth_sendrequest_menu+7Ej
		mov	eax, [esp+2Ch+var_10]
		xor	eax, ds:__stack_chk_guard
		jnz	short loc_68881684
		add	esp, 24h
		pop	ebx
		pop	esi
		retn
; ---------------------------------------------------------------------------
		align 4

loc_68881654:				; CODE XREF: oscar_auth_sendrequest_menu+1Fj
		mov	[esp+2Ch+var_2C], ebx
		call	purple_buddy_get_account
		mov	[esp+2Ch+var_2C], eax
		call	purple_account_get_connection
		mov	esi, eax
		mov	[esp+2Ch+var_2C], ebx
		call	purple_buddy_get_name
		mov	[esp+2Ch+var_24], 0
		mov	[esp+2Ch+var_28], eax
		mov	[esp+2Ch+var_2C], esi
		call	oscar_auth_sendrequest
		jmp	short loc_68881641
; ---------------------------------------------------------------------------

loc_68881684:				; CODE XREF: oscar_auth_sendrequest_menu+47j
		call	__stack_chk_fail
oscar_auth_sendrequest_menu endp

; ---------------------------------------------------------------------------
		align 4
; Exported entry 215. oscar_auth_recvrequest

; =============== S U B	R O U T	I N E =======================================


		public oscar_auth_recvrequest
oscar_auth_recvrequest proc near	; CODE XREF: sub_6888F450+3B2p
					; sub_6888F450+10F5p

var_6C		= dword	ptr -6Ch
var_68		= dword	ptr -68h
var_64		= dword	ptr -64h
var_60		= dword	ptr -60h
var_5C		= dword	ptr -5Ch
var_58		= dword	ptr -58h
var_54		= dword	ptr -54h
var_50		= dword	ptr -50h
var_4C		= dword	ptr -4Ch
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_20		= dword	ptr -20h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 5Ch
		mov	ebp, [esp+6Ch+arg_0]
		mov	edi, [esp+6Ch+arg_4]
		mov	ecx, [esp+6Ch+arg_8]
		mov	edx, [esp+6Ch+arg_C]
		mov	eax, ds:__stack_chk_guard
		mov	[esp+6Ch+var_20], eax
		xor	eax, eax
		mov	[esp+6Ch+var_6C], ebp
		mov	[esp+6Ch+var_34], edx
		mov	[esp+6Ch+var_30], ecx
		call	purple_connection_get_account
		mov	esi, eax
		mov	[esp+6Ch+var_6C], 0Ch
		call	g_malloc
		mov	ebx, eax
		mov	[eax], ebp
		mov	[eax+4], edi
		mov	ecx, [esp+6Ch+var_30]
		mov	[eax+8], ecx
		mov	[esp+6Ch+var_68], edi
		mov	[esp+6Ch+var_6C], esi
		call	purple_find_buddy
		mov	[esp+6Ch+var_4C], ebx
		mov	[esp+6Ch+var_50], offset sub_68881290
		mov	[esp+6Ch+var_54], offset sub_6888141C
		test	eax, eax
		setnz	al
		movzx	eax, al
		mov	[esp+6Ch+var_58], eax
		mov	edx, [esp+6Ch+var_34]
		mov	[esp+6Ch+var_5C], edx
		mov	eax, [ebx+8]
		mov	[esp+6Ch+var_60], eax
		mov	[esp+6Ch+var_64], 0
		mov	eax, [ebx+4]
		mov	[esp+6Ch+var_68], eax
		mov	[esp+6Ch+var_6C], esi
		call	purple_account_request_authorization
		mov	eax, [esp+6Ch+var_20]
		xor	eax, ds:__stack_chk_guard
		jnz	short loc_68881740
		add	esp, 5Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_68881740:				; CODE XREF: oscar_auth_recvrequest+AAj
		call	__stack_chk_fail
oscar_auth_recvrequest endp

; ---------------------------------------------------------------------------
		align 4
; Exported entry 163. byte_stream_new

; =============== S U B	R O U T	I N E =======================================


		public sub_68881748
sub_68881748	proc near		; CODE XREF: sub_68882318+6Ep
					; aim_admin_getinfo+2Ep ...

var_2C		= dword	ptr -2Ch
var_10		= dword	ptr -10h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	esi
		push	ebx
		sub	esp, 24h
		mov	ebx, [esp+2Ch+arg_0]
		mov	esi, [esp+2Ch+arg_4]
		mov	eax, ds:__stack_chk_guard
		mov	[esp+2Ch+var_10], eax
		xor	eax, eax
		test	ebx, ebx
		jz	short loc_6888178C
		mov	[esp+2Ch+var_2C], esi
		call	g_malloc
		mov	[ebx], eax
		mov	[ebx+4], esi
		mov	dword ptr [ebx+8], 0
		xor	eax, eax

loc_6888177A:				; CODE XREF: sub_68881748+49j
		mov	edx, [esp+2Ch+var_10]
		xor	edx, ds:__stack_chk_guard
		jnz	short loc_68881793
		add	esp, 24h
		pop	ebx
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_6888178C:				; CODE XREF: sub_68881748+1Aj
		mov	eax, 0FFFFFFFFh
		jmp	short loc_6888177A
; ---------------------------------------------------------------------------

loc_68881793:				; CODE XREF: sub_68881748+3Cj
		call	__stack_chk_fail
sub_68881748	endp

; Exported entry 162. byte_stream_init

; =============== S U B	R O U T	I N E =======================================


		public sub_68881798
sub_68881798	proc near		; CODE XREF: sub_68886554+278p
					; sub_68886554+2CBp ...

var_10		= dword	ptr -10h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	ebx
		sub	esp, 18h
		mov	eax, [esp+1Ch+arg_0]
		mov	ecx, [esp+1Ch+arg_4]
		mov	edx, [esp+1Ch+arg_8]
		mov	ebx, ds:__stack_chk_guard
		mov	[esp+1Ch+var_10], ebx
		xor	ebx, ebx
		test	eax, eax
		jz	short loc_688817D7
		mov	[eax], ecx
		mov	[eax+4], edx
		mov	dword ptr [eax+8], 0
		xor	eax, eax

loc_688817C6:				; CODE XREF: sub_68881798+44j
		mov	edx, [esp+1Ch+var_10]
		xor	edx, ds:__stack_chk_guard
		jnz	short loc_688817DE
		add	esp, 18h
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_688817D7:				; CODE XREF: sub_68881798+1Ej
		mov	eax, 0FFFFFFFFh
		jmp	short loc_688817C6
; ---------------------------------------------------------------------------

loc_688817DE:				; CODE XREF: sub_68881798+38j
		call	__stack_chk_fail
sub_68881798	endp

; ---------------------------------------------------------------------------
		align 4
; Exported entry 152. byte_stream_destroy

; =============== S U B	R O U T	I N E =======================================


		public sub_688817E4
sub_688817E4	proc near		; CODE XREF: sub_68882318+BBp
					; aim_admin_getinfo+A6p ...

var_10		= dword	ptr -10h
arg_0		= dword	ptr  4

		sub	esp, 1Ch
		mov	eax, [esp+1Ch+arg_0]
		mov	edx, ds:__stack_chk_guard
		mov	[esp+1Ch+var_10], edx
		xor	edx, edx
		mov	edx, [esp+1Ch+var_10]
		xor	edx, ds:__stack_chk_guard
		jnz	short loc_68881811
		mov	eax, [eax]
		mov	[esp+1Ch+arg_0], eax
		add	esp, 1Ch
		jmp	g_free
; ---------------------------------------------------------------------------

loc_68881811:				; CODE XREF: sub_688817E4+1Dj
		call	__stack_chk_fail
sub_688817E4	endp

; ---------------------------------------------------------------------------
		align 4
; Exported entry 150. byte_stream_bytes_left

; =============== S U B	R O U T	I N E =======================================


		public sub_68881818
sub_68881818	proc near		; CODE XREF: sub_68883F44+E7p
					; sub_68886554+1C6p ...

var_10		= dword	ptr -10h
arg_0		= dword	ptr  4

		sub	esp, 1Ch
		mov	edx, [esp+1Ch+arg_0]
		mov	eax, ds:__stack_chk_guard
		mov	[esp+1Ch+var_10], eax
		xor	eax, eax
		mov	eax, [edx+4]
		sub	eax, [edx+8]
		mov	edx, [esp+1Ch+var_10]
		xor	edx, ds:__stack_chk_guard
		jnz	short loc_68881840
		add	esp, 1Ch
		retn
; ---------------------------------------------------------------------------

loc_68881840:				; CODE XREF: sub_68881818+22j
		call	__stack_chk_fail
sub_68881818	endp

; ---------------------------------------------------------------------------
		align 4
; Exported entry 151. byte_stream_curpos

; =============== S U B	R O U T	I N E =======================================


		public sub_68881848
sub_68881848	proc near		; CODE XREF: sub_6888B528+A25p
					; sub_6888B528+155Fp ...

var_10		= dword	ptr -10h
arg_0		= dword	ptr  4

		sub	esp, 1Ch
		mov	eax, ds:__stack_chk_guard
		mov	[esp+1Ch+var_10], eax
		xor	eax, eax
		mov	eax, [esp+1Ch+arg_0]
		mov	eax, [eax+8]
		mov	edx, [esp+1Ch+var_10]
		xor	edx, ds:__stack_chk_guard
		jnz	short loc_6888186D
		add	esp, 1Ch
		retn
; ---------------------------------------------------------------------------

loc_6888186D:				; CODE XREF: sub_68881848+1Fj
		call	__stack_chk_fail
sub_68881848	endp

; ---------------------------------------------------------------------------
		align 4
; Exported entry 178. byte_stream_setpos

; =============== S U B	R O U T	I N E =======================================


		public sub_68881874
sub_68881874	proc near		; CODE XREF: sub_688818CC+1Dp
					; sub_6888B528+9E7p ...

var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_10		= dword	ptr -10h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		sub	esp, 2Ch
		mov	edx, [esp+2Ch+arg_0]
		mov	eax, [esp+2Ch+arg_4]
		mov	ecx, ds:__stack_chk_guard
		mov	[esp+2Ch+var_10], ecx
		xor	ecx, ecx
		cmp	[edx+4], eax
		jb	short loc_688818A4
		mov	[edx+8], eax

loc_68881893:				; CODE XREF: sub_68881874+51j
		mov	edx, [esp+2Ch+var_10]
		xor	edx, ds:__stack_chk_guard
		jnz	short loc_688818C7
		add	esp, 2Ch
		retn
; ---------------------------------------------------------------------------
		align 4

loc_688818A4:				; CODE XREF: sub_68881874+1Aj
		mov	[esp+2Ch+var_24], offset aOffBsLen ; "off <= bs->len"
		mov	[esp+2Ch+var_28], offset aByte_stream_se ; "byte_stream_setpos"
		mov	[esp+2Ch+var_2C], 0
		call	g_return_if_fail_warning
		mov	eax, 0FFFFFFFFh
		jmp	short loc_68881893
; ---------------------------------------------------------------------------

loc_688818C7:				; CODE XREF: sub_68881874+29j
		call	__stack_chk_fail
sub_68881874	endp

; Exported entry 177. byte_stream_rewind

; =============== S U B	R O U T	I N E =======================================


		public sub_688818CC
sub_688818CC	proc near		; CODE XREF: sub_6888225C+8Bp
					; sub_688921A8+1D0p ...

var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_10		= dword	ptr -10h
arg_0		= dword	ptr  4

		sub	esp, 2Ch
		mov	eax, ds:__stack_chk_guard
		mov	[esp+2Ch+var_10], eax
		xor	eax, eax
		mov	[esp+2Ch+var_28], 0
		mov	eax, [esp+2Ch+arg_0]
		mov	[esp+2Ch+var_2C], eax
		call	sub_68881874
		mov	eax, [esp+2Ch+var_10]
		xor	eax, ds:__stack_chk_guard
		jnz	short loc_688818FE
		add	esp, 2Ch
		retn
; ---------------------------------------------------------------------------

loc_688818FE:				; CODE XREF: sub_688818CC+2Cj
		call	__stack_chk_fail
sub_688818CC	endp

; ---------------------------------------------------------------------------
		align 4
; Exported entry 149. byte_stream_advance

; =============== S U B	R O U T	I N E =======================================


		public sub_68881904
sub_68881904	proc near		; CODE XREF: sub_68888E10+842p
					; sub_68888E10+875p ...

var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_10		= dword	ptr -10h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	esi
		push	ebx
		sub	esp, 24h
		mov	ecx, [esp+2Ch+arg_0]
		mov	eax, [esp+2Ch+arg_4]
		mov	edx, ds:__stack_chk_guard
		mov	[esp+2Ch+var_10], edx
		xor	edx, edx
		mov	edx, [ecx+8]
		mov	esi, eax
		add	esi, edx
		js	short loc_68881968
		mov	ebx, [ecx+4]
		sub	ebx, edx
		cmp	eax, ebx
		jbe	short loc_68881960
		mov	[esp+2Ch+var_24], offset aGsizeNByte_str ; "(gsize)n <=	byte_stream_bytes_left(bs)"
		mov	[esp+2Ch+var_28], offset aByte_stream_ad ; "byte_stream_advance"
		mov	[esp+2Ch+var_2C], 0
		call	g_return_if_fail_warning
		xor	eax, eax

loc_6888194D:				; CODE XREF: sub_68881904+5Fj
					; sub_68881904+82j
		mov	edx, [esp+2Ch+var_10]
		xor	edx, ds:__stack_chk_guard
		jnz	short loc_68881988
		add	esp, 24h
		pop	ebx
		pop	esi
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_68881960:				; CODE XREF: sub_68881904+29j
		mov	[ecx+8], esi
		jmp	short loc_6888194D
; ---------------------------------------------------------------------------
		align 4

loc_68881968:				; CODE XREF: sub_68881904+20j
		mov	[esp+2Ch+var_24], offset aByte_stream_cu ; "byte_stream_curpos(bs) + n >= 0"
		mov	[esp+2Ch+var_28], offset aByte_stream_ad ; "byte_stream_advance"
		mov	[esp+2Ch+var_2C], 0
		call	g_return_if_fail_warning
		xor	eax, eax
		jmp	short loc_6888194D
; ---------------------------------------------------------------------------

loc_68881988:				; CODE XREF: sub_68881904+53j
		call	__stack_chk_fail
sub_68881904	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 155. byte_stream_get8

; =============== S U B	R O U T	I N E =======================================


		public sub_68881990
sub_68881990	proc near		; CODE XREF: sub_68885A74+6Bp
					; sub_68885A74+8Ep ...

var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_10		= dword	ptr -10h
arg_0		= dword	ptr  4

		sub	esp, 2Ch
		mov	eax, [esp+2Ch+arg_0]
		mov	edx, ds:__stack_chk_guard
		mov	[esp+2Ch+var_10], edx
		xor	edx, edx
		mov	edx, [eax+8]
		cmp	[eax+4], edx
		jz	short loc_688819C8
		lea	ecx, [edx+1]
		mov	[eax+8], ecx
		mov	eax, [eax]
		mov	al, [eax+edx]

loc_688819B6:				; CODE XREF: sub_68881990+56j
		mov	edx, [esp+2Ch+var_10]
		xor	edx, ds:__stack_chk_guard
		jnz	short loc_688819E8
		add	esp, 2Ch
		retn
; ---------------------------------------------------------------------------
		align 4

loc_688819C8:				; CODE XREF: sub_68881990+19j
		mov	[esp+2Ch+var_24], offset aByte_stream_by ; "byte_stream_bytes_left(bs) >= 1"
		mov	[esp+2Ch+var_28], offset aByte_stream_ge ; "byte_stream_get8"
		mov	[esp+2Ch+var_2C], 0
		call	g_return_if_fail_warning
		xor	eax, eax
		jmp	short loc_688819B6
; ---------------------------------------------------------------------------

loc_688819E8:				; CODE XREF: sub_68881990+30j
		call	__stack_chk_fail
sub_68881990	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 153. byte_stream_get16

; =============== S U B	R O U T	I N E =======================================


		public sub_688819F0
sub_688819F0	proc near		; CODE XREF: sub_68883F44+7Fp
					; sub_68883F44+8Cp ...

var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_10		= dword	ptr -10h
arg_0		= dword	ptr  4

		sub	esp, 2Ch
		mov	eax, [esp+2Ch+arg_0]
		mov	edx, ds:__stack_chk_guard
		mov	[esp+2Ch+var_10], edx
		xor	edx, edx
		mov	edx, [eax+8]
		mov	ecx, [eax+4]
		sub	ecx, edx
		cmp	ecx, 1
		jbe	short loc_68881A38
		lea	ecx, [edx+2]
		mov	[eax+8], ecx
		mov	ecx, [eax]
		movzx	eax, byte ptr [ecx+edx]
		shl	eax, 8
		movzx	edx, byte ptr [ecx+edx+1]
		add	eax, edx

loc_68881A26:				; CODE XREF: sub_688819F0+66j
		mov	edx, [esp+2Ch+var_10]
		xor	edx, ds:__stack_chk_guard
		jnz	short loc_68881A58
		add	esp, 2Ch
		retn
; ---------------------------------------------------------------------------
		align 4

loc_68881A38:				; CODE XREF: sub_688819F0+1Ej
		mov	[esp+2Ch+var_24], offset aByte_stream__0 ; "byte_stream_bytes_left(bs) >= 2"
		mov	[esp+2Ch+var_28], offset aByte_stream__1 ; "byte_stream_get16"
		mov	[esp+2Ch+var_2C], 0
		call	g_return_if_fail_warning
		xor	eax, eax
		jmp	short loc_68881A26
; ---------------------------------------------------------------------------

loc_68881A58:				; CODE XREF: sub_688819F0+40j
		call	__stack_chk_fail
sub_688819F0	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 154. byte_stream_get32

; =============== S U B	R O U T	I N E =======================================


		public sub_68881A60
sub_68881A60	proc near		; CODE XREF: sub_68888E10+324p
					; sub_6888B528+1EBp ...

var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_10		= dword	ptr -10h
arg_0		= dword	ptr  4

		push	ebx
		sub	esp, 28h
		mov	eax, [esp+2Ch+arg_0]
		mov	edx, ds:__stack_chk_guard
		mov	[esp+2Ch+var_10], edx
		xor	edx, edx
		mov	edx, [eax+8]
		mov	ecx, [eax+4]
		sub	ecx, edx
		cmp	ecx, 3
		jbe	short loc_68881ABC
		lea	ecx, [edx+4]
		mov	[eax+8], ecx
		mov	ecx, [eax]
		movzx	eax, byte ptr [ecx+edx]
		shl	eax, 18h
		movzx	ebx, byte ptr [ecx+edx+3]
		add	ebx, eax
		movzx	eax, byte ptr [ecx+edx+1]
		shl	eax, 10h
		add	eax, ebx
		movzx	edx, byte ptr [ecx+edx+2]
		shl	edx, 8
		add	eax, edx

loc_68881AAB:				; CODE XREF: sub_68881A60+7Aj
		mov	edx, [esp+2Ch+var_10]
		xor	edx, ds:__stack_chk_guard
		jnz	short loc_68881ADC
		add	esp, 28h
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_68881ABC:				; CODE XREF: sub_68881A60+1Fj
		mov	[esp+2Ch+var_24], offset aByte_stream__2 ; "byte_stream_bytes_left(bs) >= 4"
		mov	[esp+2Ch+var_28], offset aByte_stream__3 ; "byte_stream_get32"
		mov	[esp+2Ch+var_2C], 0
		call	g_return_if_fail_warning
		xor	eax, eax
		jmp	short loc_68881AAB
; ---------------------------------------------------------------------------

loc_68881ADC:				; CODE XREF: sub_68881A60+55j
		call	__stack_chk_fail
sub_68881A60	endp

; ---------------------------------------------------------------------------
		align 4
; Exported entry 158. byte_stream_getle8

; =============== S U B	R O U T	I N E =======================================


		public sub_68881AE4
sub_68881AE4	proc near		; CODE XREF: sub_6888B528+6E3p
					; sub_6888B528+6EFp ...

var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_10		= dword	ptr -10h
arg_0		= dword	ptr  4

		sub	esp, 2Ch
		mov	eax, [esp+2Ch+arg_0]
		mov	edx, ds:__stack_chk_guard
		mov	[esp+2Ch+var_10], edx
		xor	edx, edx
		mov	edx, [eax+8]
		cmp	[eax+4], edx
		jz	short loc_68881B1C
		lea	ecx, [edx+1]
		mov	[eax+8], ecx
		mov	eax, [eax]
		mov	al, [eax+edx]

loc_68881B0A:				; CODE XREF: sub_68881AE4+56j
		mov	edx, [esp+2Ch+var_10]
		xor	edx, ds:__stack_chk_guard
		jnz	short loc_68881B3C
		add	esp, 2Ch
		retn
; ---------------------------------------------------------------------------
		align 4

loc_68881B1C:				; CODE XREF: sub_68881AE4+19j
		mov	[esp+2Ch+var_24], offset aByte_stream_by ; "byte_stream_bytes_left(bs) >= 1"
		mov	[esp+2Ch+var_28], offset aByte_stream__4 ; "byte_stream_getle8"
		mov	[esp+2Ch+var_2C], 0
		call	g_return_if_fail_warning
		xor	eax, eax
		jmp	short loc_68881B0A
; ---------------------------------------------------------------------------

loc_68881B3C:				; CODE XREF: sub_68881AE4+30j
		call	__stack_chk_fail
sub_68881AE4	endp

; ---------------------------------------------------------------------------
		align 4
; Exported entry 156. byte_stream_getle16

; =============== S U B	R O U T	I N E =======================================


		public sub_68881B44
sub_68881B44	proc near		; CODE XREF: sub_6888B528+79Cp
					; sub_6888B528+7B3p ...

var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_10		= dword	ptr -10h
arg_0		= dword	ptr  4

		sub	esp, 2Ch
		mov	eax, [esp+2Ch+arg_0]
		mov	edx, ds:__stack_chk_guard
		mov	[esp+2Ch+var_10], edx
		xor	edx, edx
		mov	edx, [eax+8]
		mov	ecx, [eax+4]
		sub	ecx, edx
		cmp	ecx, 1
		jbe	short loc_68881B8C
		lea	ecx, [edx+2]
		mov	[eax+8], ecx
		mov	ecx, [eax]
		movzx	eax, byte ptr [ecx+edx+1]
		shl	eax, 8
		movzx	edx, byte ptr [ecx+edx]
		add	eax, edx

loc_68881B7A:				; CODE XREF: sub_68881B44+66j
		mov	edx, [esp+2Ch+var_10]
		xor	edx, ds:__stack_chk_guard
		jnz	short loc_68881BAC
		add	esp, 2Ch
		retn
; ---------------------------------------------------------------------------
		align 4

loc_68881B8C:				; CODE XREF: sub_68881B44+1Ej
		mov	[esp+2Ch+var_24], offset aByte_stream__0 ; "byte_stream_bytes_left(bs) >= 2"
		mov	[esp+2Ch+var_28], offset aByte_stream__5 ; "byte_stream_getle16"
		mov	[esp+2Ch+var_2C], 0
		call	g_return_if_fail_warning
		xor	eax, eax
		jmp	short loc_68881B7A
; ---------------------------------------------------------------------------

loc_68881BAC:				; CODE XREF: sub_68881B44+40j
		call	__stack_chk_fail
sub_68881B44	endp

; ---------------------------------------------------------------------------
		align 4
; Exported entry 157. byte_stream_getle32

; =============== S U B	R O U T	I N E =======================================


		public sub_68881BB4
sub_68881BB4	proc near		; CODE XREF: sub_6888B528+6D7p
					; sub_6888F450+B9p ...

var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_10		= dword	ptr -10h
arg_0		= dword	ptr  4

		push	esi
		push	ebx
		sub	esp, 24h
		mov	eax, [esp+2Ch+arg_0]
		mov	edx, ds:__stack_chk_guard
		mov	[esp+2Ch+var_10], edx
		xor	edx, edx
		mov	edx, [eax+8]
		mov	ecx, [eax+4]
		sub	ecx, edx
		cmp	ecx, 3
		jbe	short loc_68881C14
		lea	ecx, [edx+4]
		mov	[eax+8], ecx
		mov	ecx, [eax]
		movzx	ebx, byte ptr [ecx+edx+1]
		shl	ebx, 8
		movzx	eax, byte ptr [ecx+edx+2]
		shl	eax, 10h
		add	eax, ebx
		movzx	esi, byte ptr [ecx+edx]
		add	eax, esi
		movzx	edx, byte ptr [ecx+edx+3]
		shl	edx, 18h
		add	eax, edx

loc_68881C00:				; CODE XREF: sub_68881BB4+7Ej
		mov	edx, [esp+2Ch+var_10]
		xor	edx, ds:__stack_chk_guard
		jnz	short loc_68881C34
		add	esp, 24h
		pop	ebx
		pop	esi
		retn
; ---------------------------------------------------------------------------
		align 4

loc_68881C14:				; CODE XREF: sub_68881BB4+20j
		mov	[esp+2Ch+var_24], offset aByte_stream__2 ; "byte_stream_bytes_left(bs) >= 4"
		mov	[esp+2Ch+var_28], offset aByte_stream__6 ; "byte_stream_getle32"
		mov	[esp+2Ch+var_2C], 0
		call	g_return_if_fail_warning
		xor	eax, eax
		jmp	short loc_68881C00
; ---------------------------------------------------------------------------

loc_68881C34:				; CODE XREF: sub_68881BB4+56j
		call	__stack_chk_fail
sub_68881BB4	endp

; ---------------------------------------------------------------------------
		align 4
; Exported entry 160. byte_stream_getrawbuf

; =============== S U B	R O U T	I N E =======================================


		public sub_68881C3C
sub_68881C3C	proc near		; CODE XREF: aim_info_extract+29Bp
					; peer_odc_recv_frame+6Ep ...

var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_10		= dword	ptr -10h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	edi
		push	esi
		push	ebx
		sub	esp, 20h
		mov	edx, [esp+2Ch+arg_0]
		mov	ebx, [esp+2Ch+arg_4]
		mov	eax, [esp+2Ch+arg_8]
		mov	ecx, ds:__stack_chk_guard
		mov	[esp+2Ch+var_10], ecx
		xor	ecx, ecx
		mov	esi, [edx+8]
		mov	ecx, [edx+4]
		sub	ecx, esi
		cmp	eax, ecx
		ja	short loc_68881C84
		add	esi, [edx]
		mov	edi, ebx
		mov	ecx, eax
		rep movsb
		add	[edx+8], eax

loc_68881C71:				; CODE XREF: sub_68881C3C+66j
		mov	edx, [esp+2Ch+var_10]
		xor	edx, ds:__stack_chk_guard
		jnz	short loc_68881CA4
		add	esp, 20h
		pop	ebx
		pop	esi
		pop	edi
		retn
; ---------------------------------------------------------------------------

loc_68881C84:				; CODE XREF: sub_68881C3C+28j
		mov	[esp+2Ch+var_24], offset aByte_stream__7 ; "byte_stream_bytes_left(bs) >= len"
		mov	[esp+2Ch+var_28], offset aByte_stream__8 ; "byte_stream_getrawbuf"
		mov	[esp+2Ch+var_2C], 0
		call	g_return_if_fail_warning
		xor	eax, eax
		jmp	short loc_68881C71
; ---------------------------------------------------------------------------

loc_68881CA4:				; CODE XREF: sub_68881C3C+3Fj
		call	__stack_chk_fail
sub_68881C3C	endp

; ---------------------------------------------------------------------------
		align 4
; Exported entry 159. byte_stream_getraw

; =============== S U B	R O U T	I N E =======================================


		public sub_68881CAC
sub_68881CAC	proc near		; CODE XREF: sub_688846FC+67p
					; sub_688846FC+7Bp ...

var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_20		= dword	ptr -20h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 2Ch
		mov	ebx, [esp+3Ch+arg_0]
		mov	ebp, [esp+3Ch+arg_4]
		mov	eax, ds:__stack_chk_guard
		mov	[esp+3Ch+var_20], eax
		xor	eax, eax
		mov	eax, [ebx+4]
		sub	eax, [ebx+8]
		cmp	ebp, eax
		ja	short loc_68881CFC
		mov	[esp+3Ch+var_3C], ebp
		call	g_malloc
		mov	esi, [ebx]
		add	esi, [ebx+8]
		mov	edi, eax
		mov	ecx, ebp
		rep movsb
		add	[ebx+8], ebp

loc_68881CE6:				; CODE XREF: sub_68881CAC+6Ej
		mov	edx, [esp+3Ch+var_20]
		xor	edx, ds:__stack_chk_guard
		jnz	short loc_68881D1C
		add	esp, 2Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 4

loc_68881CFC:				; CODE XREF: sub_68881CAC+22j
		mov	[esp+3Ch+var_34], offset aByte_stream__7 ; "byte_stream_bytes_left(bs) >= len"
		mov	[esp+3Ch+var_38], offset aByte_stream__9 ; "byte_stream_getraw"
		mov	[esp+3Ch+var_3C], 0
		call	g_return_if_fail_warning
		xor	eax, eax
		jmp	short loc_68881CE6
; ---------------------------------------------------------------------------

loc_68881D1C:				; CODE XREF: sub_68881CAC+44j
		call	__stack_chk_fail
sub_68881CAC	endp

; ---------------------------------------------------------------------------
		align 4
; Exported entry 161. byte_stream_getstr

; =============== S U B	R O U T	I N E =======================================


		public sub_68881D24
sub_68881D24	proc near		; CODE XREF: sub_68883F44+D6p
					; sub_68883F44+20Ap ...

var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_20		= dword	ptr -20h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 2Ch
		mov	ebx, [esp+3Ch+arg_0]
		mov	ebp, [esp+3Ch+arg_4]
		mov	eax, ds:__stack_chk_guard
		mov	[esp+3Ch+var_20], eax
		xor	eax, eax
		mov	eax, [ebx+4]
		sub	eax, [ebx+8]
		cmp	ebp, eax
		ja	short loc_68881D7C
		lea	eax, [ebp+1]
		mov	[esp+3Ch+var_3C], eax
		call	g_malloc
		mov	esi, [ebx]
		add	esi, [ebx+8]
		mov	edi, eax
		mov	ecx, ebp
		rep movsb
		add	[ebx+8], ebp
		mov	byte ptr [eax+ebp], 0

loc_68881D65:				; CODE XREF: sub_68881D24+76j
		mov	edx, [esp+3Ch+var_20]
		xor	edx, ds:__stack_chk_guard
		jnz	short loc_68881D9C
		add	esp, 2Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 4

loc_68881D7C:				; CODE XREF: sub_68881D24+22j
		mov	[esp+3Ch+var_34], offset aByte_stream__7 ; "byte_stream_bytes_left(bs) >= len"
		mov	[esp+3Ch+var_38], offset aByte_stream_10 ; "byte_stream_getstr"
		mov	[esp+3Ch+var_3C], 0
		call	g_return_if_fail_warning
		xor	eax, eax
		jmp	short loc_68881D65
; ---------------------------------------------------------------------------

loc_68881D9C:				; CODE XREF: sub_68881D24+4Bj
		call	__stack_chk_fail
sub_68881D24	endp

; ---------------------------------------------------------------------------
		align 4
; Exported entry 166. byte_stream_put8

; =============== S U B	R O U T	I N E =======================================


		public sub_68881DA4
sub_68881DA4	proc near		; CODE XREF: sub_6888225C+40p
					; sub_6888225C+62j ...

var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_10		= dword	ptr -10h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	ebx
		sub	esp, 28h
		mov	eax, [esp+2Ch+arg_0]
		mov	ecx, [esp+2Ch+arg_4]
		mov	edx, ds:__stack_chk_guard
		mov	[esp+2Ch+var_10], edx
		xor	edx, edx
		mov	edx, [eax+8]
		cmp	[eax+4], edx
		jz	short loc_68881DE4
		mov	ebx, [eax]
		mov	[ebx+edx], cl
		inc	dword ptr [eax+8]
		mov	eax, 1

loc_68881DD1:				; CODE XREF: sub_68881DA4+5Ej
		mov	ebx, [esp+2Ch+var_10]
		xor	ebx, ds:__stack_chk_guard
		jnz	short loc_68881E04
		add	esp, 28h
		pop	ebx
		retn
; ---------------------------------------------------------------------------
		align 4

loc_68881DE4:				; CODE XREF: sub_68881DA4+1Ej
		mov	[esp+2Ch+var_24], offset aByte_stream_by ; "byte_stream_bytes_left(bs) >= 1"
		mov	[esp+2Ch+var_28], offset aByte_stream_pu ; "byte_stream_put8"
		mov	[esp+2Ch+var_2C], 0
		call	g_return_if_fail_warning
		xor	eax, eax
		jmp	short loc_68881DD1
; ---------------------------------------------------------------------------

loc_68881E04:				; CODE XREF: sub_68881DA4+37j
		call	__stack_chk_fail
sub_68881DA4	endp

; ---------------------------------------------------------------------------
		align 4
; Exported entry 164. byte_stream_put16

; =============== S U B	R O U T	I N E =======================================


		public sub_68881E0C
sub_68881E0C	proc near		; CODE XREF: sub_6888225C+25p
					; sub_68882318+80p ...

var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_10		= dword	ptr -10h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	esi
		push	ebx
		sub	esp, 24h
		mov	eax, [esp+2Ch+arg_0]
		mov	ebx, [esp+2Ch+arg_4]
		mov	edx, ds:__stack_chk_guard
		mov	[esp+2Ch+var_10], edx
		xor	edx, edx
		mov	ecx, [eax+8]
		mov	edx, [eax+4]
		sub	edx, ecx
		cmp	edx, 1
		jbe	short loc_68881E64
		mov	esi, [eax]
		mov	edx, ebx
		shr	dx, 8
		mov	[esi+ecx], dl
		mov	ecx, [eax]
		mov	edx, [eax+8]
		mov	[ecx+edx+1], bl
		add	dword ptr [eax+8], 2
		mov	eax, 2

loc_68881E4F:				; CODE XREF: sub_68881E0C+76j
		mov	edx, [esp+2Ch+var_10]
		xor	edx, ds:__stack_chk_guard
		jnz	short loc_68881E84
		add	esp, 24h
		pop	ebx
		pop	esi
		retn
; ---------------------------------------------------------------------------
		align 4

loc_68881E64:				; CODE XREF: sub_68881E0C+24j
		mov	[esp+2Ch+var_24], offset aByte_stream__0 ; "byte_stream_bytes_left(bs) >= 2"
		mov	[esp+2Ch+var_28], offset aByte_stream_11 ; "byte_stream_put16"
		mov	[esp+2Ch+var_2C], 0
		call	g_return_if_fail_warning
		xor	eax, eax
		jmp	short loc_68881E4F
; ---------------------------------------------------------------------------

loc_68881E84:				; CODE XREF: sub_68881E0C+4Dj
		call	__stack_chk_fail
sub_68881E0C	endp

; ---------------------------------------------------------------------------
		align 4
; Exported entry 165. byte_stream_put32

; =============== S U B	R O U T	I N E =======================================


		public sub_68881E8C
sub_68881E8C	proc near		; CODE XREF: aim_email_activate+66p
					; aim_email_activate+76p ...

var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_10		= dword	ptr -10h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	esi
		push	ebx
		sub	esp, 24h
		mov	eax, [esp+2Ch+arg_0]
		mov	ecx, [esp+2Ch+arg_4]
		mov	edx, ds:__stack_chk_guard
		mov	[esp+2Ch+var_10], edx
		xor	edx, edx
		mov	ebx, [eax+8]
		mov	edx, [eax+4]
		sub	edx, ebx
		cmp	edx, 3
		jbe	short loc_68881EFC
		mov	esi, [eax]
		mov	edx, ecx
		shr	edx, 18h
		mov	[esi+ebx], dl
		mov	ebx, [eax]
		mov	esi, [eax+8]
		mov	edx, ecx
		shr	edx, 10h
		mov	[ebx+esi+1], dl
		mov	ebx, [eax]
		mov	esi, [eax+8]
		mov	edx, ecx
		shr	edx, 8
		mov	[ebx+esi+2], dl
		mov	ebx, [eax]
		mov	edx, [eax+8]
		mov	[ebx+edx+3], cl
		add	dword ptr [eax+8], 4
		mov	eax, 1

loc_68881EEA:				; CODE XREF: sub_68881E8C+8Ej
		mov	edx, [esp+2Ch+var_10]
		xor	edx, ds:__stack_chk_guard
		jnz	short loc_68881F1C
		add	esp, 24h
		pop	ebx
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_68881EFC:				; CODE XREF: sub_68881E8C+24j
		mov	[esp+2Ch+var_24], offset aByte_stream__2 ; "byte_stream_bytes_left(bs) >= 4"
		mov	[esp+2Ch+var_28], offset aByte_stream_12 ; "byte_stream_put32"
		mov	[esp+2Ch+var_2C], 0
		call	g_return_if_fail_warning
		xor	eax, eax
		jmp	short loc_68881EEA
; ---------------------------------------------------------------------------

loc_68881F1C:				; CODE XREF: sub_68881E8C+68j
		call	__stack_chk_fail
sub_68881E8C	endp

; ---------------------------------------------------------------------------
		align 4
; Exported entry 173. byte_stream_putle8

; =============== S U B	R O U T	I N E =======================================


		public sub_68881F24
sub_68881F24	proc near		; CODE XREF: aim_icq_setsecurity+125p
					; aim_icq_setsecurity+135p ...

var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_10		= dword	ptr -10h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	ebx
		sub	esp, 28h
		mov	eax, [esp+2Ch+arg_0]
		mov	ecx, [esp+2Ch+arg_4]
		mov	edx, ds:__stack_chk_guard
		mov	[esp+2Ch+var_10], edx
		xor	edx, edx
		mov	edx, [eax+8]
		cmp	[eax+4], edx
		jz	short loc_68881F64
		mov	ebx, [eax]
		mov	[ebx+edx], cl
		inc	dword ptr [eax+8]
		mov	eax, 1

loc_68881F51:				; CODE XREF: sub_68881F24+5Ej
		mov	ebx, [esp+2Ch+var_10]
		xor	ebx, ds:__stack_chk_guard
		jnz	short loc_68881F84
		add	esp, 28h
		pop	ebx
		retn
; ---------------------------------------------------------------------------
		align 4

loc_68881F64:				; CODE XREF: sub_68881F24+1Ej
		mov	[esp+2Ch+var_24], offset aByte_stream_by ; "byte_stream_bytes_left(bs) >= 1"
		mov	[esp+2Ch+var_28], offset aByte_stream_13 ; "byte_stream_putle8"
		mov	[esp+2Ch+var_2C], 0
		call	g_return_if_fail_warning
		xor	eax, eax
		jmp	short loc_68881F51
; ---------------------------------------------------------------------------

loc_68881F84:				; CODE XREF: sub_68881F24+37j
		call	__stack_chk_fail
sub_68881F24	endp

; ---------------------------------------------------------------------------
		align 4
; Exported entry 171. byte_stream_putle16

; =============== S U B	R O U T	I N E =======================================


		public sub_68881F8C
sub_68881F8C	proc near		; CODE XREF: aim_im_send_icq_confirmation+8Fp
					; aim_im_send_icq_confirmation+F9p ...

var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_10		= dword	ptr -10h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	ebx
		sub	esp, 28h
		mov	eax, [esp+2Ch+arg_0]
		mov	ebx, [esp+2Ch+arg_4]
		mov	edx, ds:__stack_chk_guard
		mov	[esp+2Ch+var_10], edx
		xor	edx, edx
		mov	ecx, [eax+8]
		mov	edx, [eax+4]
		sub	edx, ecx
		cmp	edx, 1
		jbe	short loc_68881FE0
		mov	edx, [eax]
		mov	[edx+ecx], bl
		mov	ecx, [eax]
		mov	edx, [eax+8]
		shr	bx, 8
		mov	[ecx+edx+1], bl
		add	dword ptr [eax+8], 2
		mov	eax, 2

loc_68881FCC:				; CODE XREF: sub_68881F8C+72j
		mov	edx, [esp+2Ch+var_10]
		xor	edx, ds:__stack_chk_guard
		jnz	short loc_68882000
		add	esp, 28h
		pop	ebx
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_68881FE0:				; CODE XREF: sub_68881F8C+23j
		mov	[esp+2Ch+var_24], offset aByte_stream__0 ; "byte_stream_bytes_left(bs) >= 2"
		mov	[esp+2Ch+var_28], offset aByte_stream_14 ; "byte_stream_putle16"
		mov	[esp+2Ch+var_2C], 0
		call	g_return_if_fail_warning
		xor	eax, eax
		jmp	short loc_68881FCC
; ---------------------------------------------------------------------------

loc_68882000:				; CODE XREF: sub_68881F8C+4Aj
		call	__stack_chk_fail
sub_68881F8C	endp

; ---------------------------------------------------------------------------
		align 4
; Exported entry 172. byte_stream_putle32

; =============== S U B	R O U T	I N E =======================================


		public sub_68882008
sub_68882008	proc near		; CODE XREF: sub_68882208+4Aj
					; sub_6888F450+D02p ...

var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_10		= dword	ptr -10h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	esi
		push	ebx
		sub	esp, 24h
		mov	eax, [esp+2Ch+arg_0]
		mov	ecx, [esp+2Ch+arg_4]
		mov	edx, ds:__stack_chk_guard
		mov	[esp+2Ch+var_10], edx
		xor	edx, edx
		mov	ebx, [eax+8]
		mov	edx, [eax+4]
		sub	edx, ebx
		cmp	edx, 3
		jbe	short loc_68882078
		mov	edx, [eax]
		mov	[edx+ebx], cl
		mov	ebx, [eax]
		mov	esi, [eax+8]
		mov	edx, ecx
		shr	edx, 8
		mov	[ebx+esi+1], dl
		mov	ebx, [eax]
		mov	esi, [eax+8]
		mov	edx, ecx
		shr	edx, 10h
		mov	[ebx+esi+2], dl
		mov	ebx, [eax]
		mov	edx, [eax+8]
		shr	ecx, 18h
		mov	[ebx+edx+3], cl
		add	dword ptr [eax+8], 4
		mov	eax, 1

loc_68882064:				; CODE XREF: sub_68882008+8Ej
		mov	edx, [esp+2Ch+var_10]
		xor	edx, ds:__stack_chk_guard
		jnz	short loc_68882098
		add	esp, 24h
		pop	ebx
		pop	esi
		retn
; ---------------------------------------------------------------------------
		align 4

loc_68882078:				; CODE XREF: sub_68882008+24j
		mov	[esp+2Ch+var_24], offset aByte_stream__2 ; "byte_stream_bytes_left(bs) >= 4"
		mov	[esp+2Ch+var_28], offset aByte_stream_15 ; "byte_stream_putle32"
		mov	[esp+2Ch+var_2C], 0
		call	g_return_if_fail_warning
		xor	eax, eax
		jmp	short loc_68882064
; ---------------------------------------------------------------------------

loc_68882098:				; CODE XREF: sub_68882008+66j
		call	__stack_chk_fail
sub_68882008	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 174. byte_stream_putraw

; =============== S U B	R O U T	I N E =======================================


		public sub_688820A0
sub_688820A0	proc near		; CODE XREF: sub_68882114+2Ep
					; aim_bart_upload+90p ...

var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_10		= dword	ptr -10h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	edi
		push	esi
		push	ebx
		sub	esp, 20h
		mov	eax, [esp+2Ch+arg_0]
		mov	esi, [esp+2Ch+arg_4]
		mov	ebx, [esp+2Ch+arg_8]
		mov	edx, ds:__stack_chk_guard
		mov	[esp+2Ch+var_10], edx
		xor	edx, edx
		mov	edx, [eax+8]
		mov	ecx, [eax+4]
		sub	ecx, edx
		cmp	ebx, ecx
		ja	short loc_688820EC
		add	edx, [eax]
		mov	edi, edx
		mov	ecx, ebx
		rep movsb
		add	[eax+8], ebx
		mov	eax, ebx

loc_688820D7:				; CODE XREF: sub_688820A0+6Aj
		mov	edx, [esp+2Ch+var_10]
		xor	edx, ds:__stack_chk_guard
		jnz	short loc_6888210C
		add	esp, 20h
		pop	ebx
		pop	esi
		pop	edi
		retn
; ---------------------------------------------------------------------------
		align 4

loc_688820EC:				; CODE XREF: sub_688820A0+28j
		mov	[esp+2Ch+var_24], offset aByte_stream__7 ; "byte_stream_bytes_left(bs) >= len"
		mov	[esp+2Ch+var_28], offset aByte_stream_16 ; "byte_stream_putraw"
		mov	[esp+2Ch+var_2C], 0
		call	g_return_if_fail_warning
		xor	eax, eax
		jmp	short loc_688820D7
; ---------------------------------------------------------------------------

loc_6888210C:				; CODE XREF: sub_688820A0+41j
		call	__stack_chk_fail
sub_688820A0	endp

; ---------------------------------------------------------------------------
		align 4
; Exported entry 175. byte_stream_putstr

; =============== S U B	R O U T	I N E =======================================


		public sub_68882114
sub_68882114	proc near		; CODE XREF: sub_68882318+8Cp
					; aim_auth_securid_send+DCp ...

var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_10		= dword	ptr -10h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	edi
		sub	esp, 28h
		mov	edx, [esp+2Ch+arg_4]
		mov	eax, ds:__stack_chk_guard
		mov	[esp+2Ch+var_10], eax
		xor	eax, eax
		mov	ecx, 0FFFFFFFFh
		mov	edi, edx
		repne scasb
		not	ecx
		dec	ecx
		mov	[esp+2Ch+var_24], ecx
		mov	[esp+2Ch+var_28], edx
		mov	eax, [esp+2Ch+arg_0]
		mov	[esp+2Ch+var_2C], eax
		call	sub_688820A0
		mov	edx, [esp+2Ch+var_10]
		xor	edx, ds:__stack_chk_guard
		jnz	short loc_68882158
		add	esp, 28h
		pop	edi
		retn
; ---------------------------------------------------------------------------

loc_68882158:				; CODE XREF: sub_68882114+3Dj
		call	__stack_chk_fail
sub_68882114	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 169. byte_stream_putbs

; =============== S U B	R O U T	I N E =======================================


		public sub_68882160
sub_68882160	proc near		; CODE XREF: sub_6888225C+B0j
					; flap_connection_send+9Fp ...

var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_20		= dword	ptr -20h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 2Ch
		mov	edx, [esp+3Ch+arg_0]
		mov	eax, [esp+3Ch+arg_4]
		mov	ebx, [esp+3Ch+arg_8]
		mov	ecx, ds:__stack_chk_guard
		mov	[esp+3Ch+var_20], ecx
		xor	ecx, ecx
		mov	esi, [eax+8]
		mov	ecx, [eax+4]
		sub	ecx, esi
		cmp	ebx, ecx
		ja	short loc_688821AC
		mov	ebp, [edx+8]
		mov	ecx, [edx+4]
		sub	ecx, ebp
		cmp	ebx, ecx
		ja	short loc_688821E0
		add	ebp, [edx]
		add	esi, [eax]
		mov	edi, ebp
		mov	ecx, ebx
		rep movsb
		add	[edx+8], ebx
		add	[eax+8], ebx
		mov	eax, ebx
		jmp	short loc_688821CA
; ---------------------------------------------------------------------------
		align 4

loc_688821AC:				; CODE XREF: sub_68882160+29j
		mov	[esp+3Ch+var_34], offset aByte_stream_17 ; "byte_stream_bytes_left(srcbs) >= len"
		mov	[esp+3Ch+var_38], offset aByte_stream_18 ; "byte_stream_putbs"
		mov	[esp+3Ch+var_3C], 0
		call	g_return_if_fail_warning
		xor	eax, eax

loc_688821CA:				; CODE XREF: sub_68882160+49j
					; sub_68882160+9Ej
		mov	edx, [esp+3Ch+var_20]
		xor	edx, ds:__stack_chk_guard
		jnz	short loc_68882200
		add	esp, 2Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_688821E0:				; CODE XREF: sub_68882160+35j
		mov	[esp+3Ch+var_34], offset aByte_stream__7 ; "byte_stream_bytes_left(bs) >= len"
		mov	[esp+3Ch+var_38], offset aByte_stream_18 ; "byte_stream_putbs"
		mov	[esp+3Ch+var_3C], 0
		call	g_return_if_fail_warning
		xor	eax, eax
		jmp	short loc_688821CA
; ---------------------------------------------------------------------------

loc_68882200:				; CODE XREF: sub_68882160+74j
		call	__stack_chk_fail
sub_68882160	endp

; ---------------------------------------------------------------------------
		align 4
; Exported entry 176. byte_stream_putuid

; =============== S U B	R O U T	I N E =======================================


		public sub_68882208
sub_68882208	proc near		; CODE XREF: aim_icq_setsecurity+C3p
					; aim_icq_changepasswd+EEp ...

Str		= dword	ptr -2Ch
var_10		= dword	ptr -10h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	ebx
		sub	esp, 28h
		mov	ebx, [esp+2Ch+arg_0]
		mov	eax, ds:__stack_chk_guard
		mov	[esp+2Ch+var_10], eax
		xor	eax, eax
		mov	eax, [esp+2Ch+arg_4]
		mov	eax, [eax+68h]
		mov	[esp+2Ch+Str], eax
		call	purple_connection_get_account
		mov	[esp+2Ch+Str], eax
		call	purple_account_get_username
		mov	[esp+2Ch+Str], eax ; Str
		call	atoi
		mov	edx, [esp+2Ch+var_10]
		xor	edx, ds:__stack_chk_guard
		jnz	short loc_68882257
		mov	[esp+2Ch+arg_4], eax
		mov	[esp+2Ch+arg_0], ebx
		add	esp, 28h
		pop	ebx
		jmp	sub_68882008
; ---------------------------------------------------------------------------

loc_68882257:				; CODE XREF: sub_68882208+3Cj
		call	__stack_chk_fail
sub_68882208	endp

; Exported entry 167. byte_stream_put_bart_asset

; =============== S U B	R O U T	I N E =======================================


		public sub_6888225C
sub_6888225C	proc near		; CODE XREF: sub_68882318+42p
					; sub_68882318+B3p

var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_10		= dword	ptr -10h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	esi
		push	ebx
		sub	esp, 24h
		mov	ebx, [esp+2Ch+arg_0]
		mov	esi, [esp+2Ch+arg_8]
		movzx	eax, word ptr [esp+2Ch+arg_4]
		mov	edx, ds:__stack_chk_guard
		mov	[esp+2Ch+var_10], edx
		xor	edx, edx
		mov	[esp+2Ch+var_28], eax
		mov	[esp+2Ch+var_2C], ebx
		call	sub_68881E0C
		test	esi, esi
		jz	short loc_68882291
		mov	eax, [esi+4]
		test	eax, eax
		jnz	short loc_688822C4

loc_68882291:				; CODE XREF: sub_6888225C+2Cj
		mov	[esp+2Ch+var_28], 0
		mov	[esp+2Ch+var_2C], ebx
		call	sub_68881DA4
		mov	edx, [esp+2Ch+var_10]
		xor	edx, ds:__stack_chk_guard
		jnz	short loc_68882311
		mov	[esp+2Ch+arg_4], 0
		mov	[esp+2Ch+arg_0], ebx
		add	esp, 24h
		pop	ebx
		pop	esi
		jmp	sub_68881DA4
; ---------------------------------------------------------------------------
		align 4

loc_688822C4:				; CODE XREF: sub_6888225C+33j
		mov	[esp+2Ch+var_28], 4
		mov	[esp+2Ch+var_2C], ebx
		call	sub_68881DA4
		movzx	eax, byte ptr [esi+4]
		mov	[esp+2Ch+var_28], eax
		mov	[esp+2Ch+var_2C], ebx
		call	sub_68881DA4
		mov	[esp+2Ch+var_2C], esi
		call	sub_688818CC
		mov	eax, [esp+2Ch+var_10]
		xor	eax, ds:__stack_chk_guard
		jnz	short loc_68882311
		mov	eax, [esi+4]
		mov	[esp+2Ch+arg_8], eax
		mov	[esp+2Ch+arg_4], esi
		mov	[esp+2Ch+arg_0], ebx
		add	esp, 24h
		pop	ebx
		pop	esi
		jmp	sub_68882160
; ---------------------------------------------------------------------------

loc_68882311:				; CODE XREF: sub_6888225C+4Fj
					; sub_6888225C+9Aj
		call	__stack_chk_fail
sub_6888225C	endp

; ---------------------------------------------------------------------------
		align 4
; Exported entry 168. byte_stream_put_bart_asset_str

; =============== S U B	R O U T	I N E =======================================


		public sub_68882318
sub_68882318	proc near		; CODE XREF: aim_srv_setextrainfo+D9p
					; aim_srv_setextrainfo+F1p

var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_30		= dword	ptr -30h
var_2C		= byte ptr -2Ch
var_20		= dword	ptr -20h
arg_0		= dword	ptr  4
arg_4		= word ptr  8
arg_8		= dword	ptr  0Ch

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 3Ch
		mov	ebp, [esp+4Ch+arg_0]
		mov	ebx, [esp+4Ch+arg_8]
		movzx	edx, [esp+4Ch+arg_4]
		mov	eax, ds:__stack_chk_guard
		mov	[esp+4Ch+var_20], eax
		xor	eax, eax
		test	ebx, ebx
		jz	short loc_6888234B
		mov	ecx, 0FFFFFFFFh
		mov	edi, ebx
		repne scasb
		not	ecx
		mov	edi, ecx
		dec	edi
		jnz	short loc_68882374

loc_6888234B:				; CODE XREF: sub_68882318+21j
		mov	[esp+4Ch+var_44], 0
		mov	[esp+4Ch+var_48], edx
		mov	[esp+4Ch+var_4C], ebp
		call	sub_6888225C

loc_6888235F:				; CODE XREF: sub_68882318+C0j
		mov	eax, [esp+4Ch+var_20]
		xor	eax, ds:__stack_chk_guard
		jnz	short loc_688823DA
		add	esp, 3Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 4

loc_68882374:				; CODE XREF: sub_68882318+31j
		add	ecx, 3
		mov	[esp+4Ch+var_48], ecx
		lea	esi, [esp+4Ch+var_2C]
		mov	[esp+4Ch+var_4C], esi
		mov	[esp+4Ch+var_30], edx
		call	sub_68881748
		and	edi, 0FFFFh
		mov	[esp+4Ch+var_48], edi
		mov	[esp+4Ch+var_4C], esi
		call	sub_68881E0C
		mov	[esp+4Ch+var_48], ebx
		mov	[esp+4Ch+var_4C], esi
		call	sub_68882114
		mov	[esp+4Ch+var_48], 0
		mov	[esp+4Ch+var_4C], esi
		call	sub_68881E0C
		mov	[esp+4Ch+var_44], esi
		mov	edx, [esp+4Ch+var_30]
		movzx	edx, dx
		mov	[esp+4Ch+var_48], edx
		mov	[esp+4Ch+var_4C], ebp
		call	sub_6888225C
		mov	[esp+4Ch+var_4C], esi
		call	sub_688817E4
		jmp	short loc_6888235F
; ---------------------------------------------------------------------------

loc_688823DA:				; CODE XREF: sub_68882318+51j
		call	__stack_chk_fail
sub_68882318	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_688823E0	proc near		; CODE XREF: sub_68882584+2FDp
					; sub_68882584+386p ...

var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_30		= dword	ptr -30h
var_20		= dword	ptr -20h

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 3Ch
		mov	ebx, eax
		mov	ebp, edx
		mov	eax, ds:__stack_chk_guard
		mov	[esp+4Ch+var_20], eax
		xor	eax, eax
		mov	[esp+4Ch+var_48], offset aStatuscode ; "statusCode"
		mov	[esp+4Ch+var_4C], ebx
		call	xmlnode_get_child
		test	eax, eax
		jz	short loc_6888246C
		mov	[esp+4Ch+var_4C], eax
		call	xmlnode_get_data_unescaped
		test	eax, eax
		jz	short loc_6888246C
		mov	edi, offset a200 ; "200"
		mov	ecx, 4
		mov	esi, eax
		repe cmpsb
		jnz	short loc_6888246C

loc_68882426:				; CODE XREF: sub_688823E0+8Ej
					; sub_688823E0+A2j
		xor	ebx, ebx

loc_68882428:				; CODE XREF: sub_688823E0+B0j
					; sub_688823E0+B5j
		mov	[esp+4Ch+var_48], offset aReceivedUnexpe ; "Received unexpected	response from %s"
		mov	[esp+4Ch+var_4C], offset aPidgin_0 ; "pidgin"
		call	libintl_dgettext
		mov	[esp+4Ch+var_48], ebp
		mov	[esp+4Ch+var_4C], eax
		call	g_strdup_printf

loc_68882448:				; CODE XREF: sub_688823E0+DBj
		mov	[esp+4Ch+var_4C], ebx
		mov	[esp+4Ch+var_30], eax
		call	g_free
		mov	eax, [esp+4Ch+var_30]
		mov	edx, [esp+4Ch+var_20]
		xor	edx, ds:__stack_chk_guard
		jnz	short loc_688824BD
		add	esp, 3Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_6888246C:				; CODE XREF: sub_688823E0+28j
					; sub_688823E0+34j ...
		test	ebx, ebx
		jz	short loc_68882426
		mov	[esp+4Ch+var_48], offset aStatustext ; "statusText"
		mov	[esp+4Ch+var_4C], ebx
		call	xmlnode_get_child
		test	eax, eax
		jz	short loc_68882426
		mov	[esp+4Ch+var_4C], eax
		call	xmlnode_get_data
		mov	ebx, eax
		test	eax, eax
		jz	short loc_68882428
		cmp	byte ptr [eax],	0
		jz	short loc_68882428
		mov	[esp+4Ch+var_48], offset aReceivedUnex_0 ; "Received unexpected	response from %s: %"...
		mov	[esp+4Ch+var_4C], offset aPidgin_0 ; "pidgin"
		call	libintl_dgettext
		mov	[esp+4Ch+var_44], ebx
		mov	[esp+4Ch+var_48], ebp
		mov	[esp+4Ch+var_4C], eax
		call	g_strdup_printf
		jmp	short loc_68882448
; ---------------------------------------------------------------------------

loc_688824BD:				; CODE XREF: sub_688823E0+82j
		call	__stack_chk_fail
sub_688823E0	endp

; ---------------------------------------------------------------------------
		align 4

; =============== S U B	R O U T	I N E =======================================


sub_688824C4	proc near		; CODE XREF: sub_68882C1C+5AEp
					; sub_68882C1C+6D1p

var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_30		= byte ptr -30h
var_10		= dword	ptr -10h

		push	edi
		push	esi
		push	ebx
		sub	esp, 40h
		mov	edi, eax
		mov	esi, edx
		mov	eax, ds:__stack_chk_guard
		mov	[esp+4Ch+var_10], eax
		xor	eax, eax
		mov	[esp+4Ch+var_48], 0
		mov	[esp+4Ch+var_4C], offset aHmac ; "hmac"
		call	purple_cipher_context_new_by_name
		mov	ebx, eax
		mov	[esp+4Ch+var_44], offset aSha256 ; "sha256"
		mov	[esp+4Ch+var_48], offset aHash ; "hash"
		mov	[esp+4Ch+var_4C], eax
		call	purple_cipher_context_set_option
		mov	[esp+4Ch+var_48], edi
		mov	[esp+4Ch+var_4C], ebx
		call	purple_cipher_context_set_key
		xor	eax, eax
		mov	ecx, 0FFFFFFFFh
		mov	edi, esi
		repne scasb
		not	ecx
		dec	ecx
		mov	[esp+4Ch+var_44], ecx
		mov	[esp+4Ch+var_48], esi
		mov	[esp+4Ch+var_4C], ebx
		call	purple_cipher_context_append
		mov	[esp+4Ch+var_40], 0
		lea	esi, [esp+4Ch+var_30]
		mov	[esp+4Ch+var_44], esi
		mov	[esp+4Ch+var_48], 20h
		mov	[esp+4Ch+var_4C], ebx
		call	purple_cipher_context_digest
		mov	[esp+4Ch+var_4C], ebx
		call	purple_cipher_context_destroy
		mov	[esp+4Ch+var_48], 20h
		mov	[esp+4Ch+var_4C], esi
		call	purple_base64_encode
		mov	edx, [esp+4Ch+var_10]
		xor	edx, ds:__stack_chk_guard
		jnz	short loc_6888257C
		add	esp, 40h
		pop	ebx
		pop	esi
		pop	edi
		retn
; ---------------------------------------------------------------------------

loc_6888257C:				; CODE XREF: sub_688824C4+AFj
		call	__stack_chk_fail
sub_688824C4	endp

; ---------------------------------------------------------------------------
		align 4

; =============== S U B	R O U T	I N E =======================================


sub_68882584	proc near		; DATA XREF: sub_68882C1C+71Fo

Str		= dword	ptr -7Ch
Str2		= dword	ptr -78h
var_74		= dword	ptr -74h
var_70		= dword	ptr -70h
var_6C		= dword	ptr -6Ch
var_68		= dword	ptr -68h
var_64		= dword	ptr -64h
var_50		= dword	ptr -50h
var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_3C		= dword	ptr -3Ch
Str1		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 6Ch
		mov	ebx, [esp+7Ch+arg_4]
		mov	edx, [esp+7Ch+arg_8]
		mov	edi, [esp+7Ch+arg_C]
		mov	esi, [esp+7Ch+arg_10]
		mov	eax, ds:__stack_chk_guard
		mov	[esp+7Ch+var_20], eax
		xor	eax, eax
		mov	[esp+7Ch+var_24], 0
		mov	ebp, [ebx+68h]
		mov	dword ptr [ebx], 0
		test	esi, esi
		jz	short loc_68882634

loc_688825C7:				; CODE XREF: sub_68882584+CAj
		xor	eax, eax
		mov	edx, [ebx+44h]
		test	edx, edx
		setnz	al
		mov	ebx, ds:off_688AEB0C[eax*4]
		mov	[esp+7Ch+Str2],	offset aErrorRequestin ; "Error	requesting %s: %s"
		mov	[esp+7Ch+Str], offset aPidgin_0	; "pidgin"
		call	libintl_dgettext
		mov	[esp+7Ch+var_74], esi
		mov	[esp+7Ch+Str2],	ebx
		mov	[esp+7Ch+Str], eax
		call	g_strdup_printf

loc_688825FC:				; CODE XREF: sub_68882584+544j
		mov	ebx, eax
		mov	[esp+7Ch+var_74], eax
		mov	[esp+7Ch+Str2],	0
		mov	[esp+7Ch+Str], ebp
		call	purple_connection_error_reason
		mov	[esp+7Ch+Str], ebx
		call	g_free

loc_6888261A:				; CODE XREF: sub_68882584+2A7j
					; sub_68882584+32Cj ...
		mov	eax, [esp+7Ch+var_20]
		xor	eax, ds:__stack_chk_guard
		jnz	loc_68882BC5
		add	esp, 6Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 4

loc_68882634:				; CODE XREF: sub_68882584+41j
		test	edi, edi
		jnz	short loc_68882654
		mov	[esp+7Ch+Str2],	offset aTheServerRetur ; "The server returned an empty response"
		mov	[esp+7Ch+Str], offset aPidgin_0	; "pidgin"
		call	libintl_dgettext
		mov	esi, eax
		jmp	loc_688825C7
; ---------------------------------------------------------------------------
		align 4

loc_68882654:				; CODE XREF: sub_68882584+B2j
		mov	[esp+7Ch+Str], ebp
		mov	[esp+7Ch+var_50], edx
		call	purple_connection_get_protocol_data
		mov	[esp+7Ch+var_40], eax
		mov	[esp+7Ch+Str], ebp
		call	purple_connection_get_account
		mov	[esp+7Ch+var_74], offset Str2 ;	"opportunistic_encryption"
		mov	[esp+7Ch+Str2],	offset aEncryption ; "encryption"
		mov	[esp+7Ch+Str], eax
		call	purple_account_get_string
		mov	[esp+7Ch+Str1],	eax
		mov	[esp+7Ch+Str2],	edi
		mov	edx, [esp+7Ch+var_50]
		mov	[esp+7Ch+Str], edx
		call	xmlnode_from_str
		mov	[esp+7Ch+var_48], eax
		test	eax, eax
		mov	edx, [esp+7Ch+var_50]
		jz	loc_68882A93
		mov	[esp+7Ch+Str2],	offset aStatuscode ; "statusCode"
		mov	eax, [esp+7Ch+var_48]
		mov	[esp+7Ch+Str], eax
		mov	[esp+7Ch+var_50], edx
		call	xmlnode_get_child
		mov	esi, eax
		mov	[esp+7Ch+Str2],	offset aData ; "data"
		mov	eax, [esp+7Ch+var_48]
		mov	[esp+7Ch+Str], eax
		call	xmlnode_get_child
		mov	[esp+7Ch+var_44], eax
		test	eax, eax
		mov	edx, [esp+7Ch+var_50]
		jz	loc_68882830
		mov	[esp+7Ch+Str2],	offset aHost ; "host"
		mov	[esp+7Ch+Str], eax
		call	xmlnode_get_child
		mov	[esp+7Ch+var_3C], eax
		mov	[esp+7Ch+Str2],	offset aPort ; "port"
		mov	eax, [esp+7Ch+var_44]
		mov	[esp+7Ch+Str], eax
		call	xmlnode_get_child
		mov	[esp+7Ch+var_34], eax
		mov	[esp+7Ch+Str2],	offset aCookie ; "cookie"
		mov	eax, [esp+7Ch+var_44]
		mov	[esp+7Ch+Str], eax
		call	xmlnode_get_child
		mov	[esp+7Ch+var_30], eax
		mov	edx, [esp+7Ch+var_50]

loc_6888272E:				; CODE XREF: sub_68882584+2C4j
		test	esi, esi
		jz	loc_68882850
		mov	[esp+7Ch+Str], esi
		mov	[esp+7Ch+var_50], edx
		call	xmlnode_get_data_unescaped
		mov	esi, eax
		test	eax, eax
		mov	edx, [esp+7Ch+var_50]
		jz	loc_68882850
		mov	[esp+7Ch+Str], eax ; Str
		call	atoi
		mov	edi, eax
		cmp	eax, 0C8h
		mov	edx, [esp+7Ch+var_50]
		jz	loc_68882932
		mov	[esp+7Ch+Str2],	offset aStatusdetailco ; "statusDetailCode"
		mov	eax, [esp+7Ch+var_48]
		mov	[esp+7Ch+Str], eax
		call	xmlnode_get_child
		test	eax, eax
		mov	edx, [esp+7Ch+var_50]
		jz	loc_688828B8
		mov	[esp+7Ch+Str], eax
		call	xmlnode_get_data
		mov	ebx, eax
		test	eax, eax
		mov	edx, [esp+7Ch+var_50]
		jz	loc_688828B8
		mov	[esp+7Ch+Str], eax ; Str
		call	atoi
		mov	[esp+7Ch+Str], ebx
		mov	[esp+7Ch+var_4C], eax
		call	g_free
		mov	edx, [esp+7Ch+var_50]
		mov	[esp+7Ch+var_70], edx
		mov	[esp+7Ch+var_74], esi
		mov	[esp+7Ch+Str2],	offset aStartoscarsess ; "startOSCARSession response statusCode	w"...
		mov	[esp+7Ch+Str], offset aOscar_0 ; "oscar"
		call	purple_debug_error
		cmp	edi, 191h
		mov	eax, [esp+7Ch+var_4C]
		jz	loc_688828E5

loc_688827E3:				; CODE XREF: sub_68882584+356j
		cmp	edi, 25Fh
		jnz	loc_688828F0

loc_688827EF:				; CODE XREF: sub_68882584+35Cj
					; sub_68882584+366j
		mov	[esp+7Ch+Str2],	offset aYouHaveBeenCon ; "You have been	connecting and disconnect"...
		mov	[esp+7Ch+Str], offset aPidgin_0	; "pidgin"
		call	libintl_dgettext
		mov	[esp+7Ch+var_74], eax
		mov	[esp+7Ch+Str2],	10h
		mov	[esp+7Ch+Str], ebp
		call	purple_connection_error_reason

loc_68882817:				; CODE XREF: sub_68882584+3A9j
		mov	[esp+7Ch+Str], esi
		call	g_free
		mov	eax, [esp+7Ch+var_48]
		mov	[esp+7Ch+Str], eax
		call	xmlnode_free
		jmp	loc_6888261A
; ---------------------------------------------------------------------------

loc_68882830:				; CODE XREF: sub_68882584+15Cj
		mov	[esp+7Ch+var_30], 0
		mov	[esp+7Ch+var_34], 0
		mov	[esp+7Ch+var_3C], 0
		jmp	loc_6888272E
; ---------------------------------------------------------------------------
		align 10h

loc_68882850:				; CODE XREF: sub_68882584+1ACj
					; sub_68882584+1C6j
		mov	[esp+7Ch+var_74], edx
		mov	[esp+7Ch+Str2],	offset aStartoscarse_0 ; "startOSCARSession response was missing "...

loc_6888285C:				; CODE XREF: sub_68882584+562j
		mov	[esp+7Ch+Str], offset aOscar_0 ; "oscar"
		call	purple_debug_error
		mov	eax, [esp+7Ch+var_40]
		mov	edx, [eax+44h]
		xor	eax, eax
		test	edx, edx
		setnz	al
		mov	edx, ds:off_688AEB0C[eax*4]
		mov	eax, [esp+7Ch+var_48]
		call	sub_688823E0
		mov	ebx, eax
		mov	[esp+7Ch+var_74], eax
		mov	[esp+7Ch+Str2],	0
		mov	[esp+7Ch+Str], ebp
		call	purple_connection_error_reason
		mov	[esp+7Ch+Str], ebx
		call	g_free
		mov	eax, [esp+7Ch+var_48]
		mov	[esp+7Ch+Str], eax
		call	xmlnode_free
		jmp	loc_6888261A
; ---------------------------------------------------------------------------
		align 4

loc_688828B8:				; CODE XREF: sub_68882584+1FFj
					; sub_68882584+215j
		mov	[esp+7Ch+var_70], edx
		mov	[esp+7Ch+var_74], esi
		mov	[esp+7Ch+Str2],	offset aStartoscarsess ; "startOSCARSession response statusCode	w"...
		mov	[esp+7Ch+Str], offset aOscar_0 ; "oscar"
		call	purple_debug_error
		cmp	edi, 191h
		jnz	loc_688827E3
		jmp	loc_688827EF
; ---------------------------------------------------------------------------

loc_688828E5:				; CODE XREF: sub_68882584+259j
		cmp	eax, 3F6h
		jnz	loc_688827EF

loc_688828F0:				; CODE XREF: sub_68882584+265j
		mov	eax, [esp+7Ch+var_40]
		mov	eax, [eax+44h]
		test	eax, eax
		setnz	al
		movzx	eax, al
		mov	edx, ds:off_688AEB0C[eax*4]
		mov	eax, [esp+7Ch+var_48]
		call	sub_688823E0
		mov	ebx, eax
		mov	[esp+7Ch+var_74], eax
		mov	[esp+7Ch+Str2],	10h
		mov	[esp+7Ch+Str], ebp
		call	purple_connection_error_reason
		mov	[esp+7Ch+Str], ebx
		call	g_free
		jmp	loc_68882817
; ---------------------------------------------------------------------------

loc_68882932:				; CODE XREF: sub_68882584+1DFj
		mov	[esp+7Ch+Str], esi
		mov	[esp+7Ch+var_50], edx
		call	g_free
		mov	eax, [esp+7Ch+var_44]
		test	eax, eax
		mov	edx, [esp+7Ch+var_50]
		jz	loc_68882ADA
		mov	edi, [esp+7Ch+var_3C]
		test	edi, edi
		jz	loc_68882ADA
		mov	esi, [esp+7Ch+var_34]
		test	esi, esi
		jz	loc_68882ADA
		mov	ecx, [esp+7Ch+var_30]
		test	ecx, ecx
		jz	loc_68882ADA
		mov	edi, offset aNo_encryption ; "no_encryption"
		mov	ecx, 0Eh
		mov	esi, [esp+7Ch+Str1]
		repe cmpsb
		jz	loc_68882ACD
		mov	[esp+7Ch+Str2],	offset aTlscertname ; "tlsCertName"
		mov	eax, [esp+7Ch+var_44]
		mov	[esp+7Ch+Str], eax
		mov	[esp+7Ch+var_50], edx
		call	xmlnode_get_child
		test	eax, eax
		mov	edx, [esp+7Ch+var_50]
		jz	loc_68882AEB
		mov	[esp+7Ch+Str], eax
		call	xmlnode_get_data_unescaped
		mov	[esp+7Ch+var_44], eax
		mov	edx, [esp+7Ch+var_50]

loc_688829BC:				; CODE XREF: sub_68882584+551j
					; sub_68882584+5ABj
		mov	eax, [esp+7Ch+var_3C]
		mov	[esp+7Ch+Str], eax
		mov	[esp+7Ch+var_50], edx
		call	xmlnode_get_data_unescaped
		mov	esi, eax
		mov	eax, [esp+7Ch+var_34]
		mov	[esp+7Ch+Str], eax
		call	xmlnode_get_data_unescaped
		mov	edi, eax
		mov	eax, [esp+7Ch+var_30]
		mov	[esp+7Ch+Str], eax
		call	xmlnode_get_data_unescaped
		mov	ecx, eax
		test	esi, esi
		mov	edx, [esp+7Ch+var_50]
		jz	short loc_68882A0D
		cmp	byte ptr [esi],	0
		jz	short loc_68882A0D
		test	edi, edi
		jz	short loc_68882A0D
		cmp	byte ptr [edi],	0
		jz	short loc_68882A0D
		test	eax, eax
		jz	short loc_68882A0D
		cmp	byte ptr [eax],	0
		jnz	loc_68882B34

loc_68882A0D:				; CODE XREF: sub_68882584+46Cj
					; sub_68882584+471j ...
		mov	[esp+7Ch+var_74], edx
		mov	[esp+7Ch+Str2],	offset aStartoscarse_1 ; "startOSCARSession response was missing "...
		mov	[esp+7Ch+Str], offset aOscar_0 ; "oscar"
		mov	[esp+7Ch+var_4C], ecx
		call	purple_debug_error
		mov	eax, [esp+7Ch+var_40]
		mov	eax, [eax+44h]
		test	eax, eax
		setnz	al
		movzx	eax, al
		mov	edx, ds:off_688AEB0C[eax*4]
		mov	eax, [esp+7Ch+var_48]
		call	sub_688823E0
		mov	ebx, eax
		mov	[esp+7Ch+var_74], eax
		mov	[esp+7Ch+Str2],	0
		mov	[esp+7Ch+Str], ebp
		call	purple_connection_error_reason
		mov	[esp+7Ch+Str], ebx
		call	g_free
		mov	[esp+7Ch+Str], esi
		call	g_free
		mov	[esp+7Ch+Str], edi
		call	g_free
		mov	ecx, [esp+7Ch+var_4C]
		mov	[esp+7Ch+Str], ecx
		call	g_free
		mov	eax, [esp+7Ch+var_48]
		mov	[esp+7Ch+Str], eax
		call	xmlnode_free
		jmp	loc_6888261A
; ---------------------------------------------------------------------------

loc_68882A93:				; CODE XREF: sub_68882584+11Ej
		mov	[esp+7Ch+var_74], edx
		mov	[esp+7Ch+Str2],	offset aStartoscarse_2 ; "startOSCARSession could not parse respo"...
		mov	[esp+7Ch+Str], offset aOscar_0 ; "oscar"
		call	purple_debug_error
		mov	eax, [esp+7Ch+var_40]
		mov	eax, [eax+44h]
		test	eax, eax
		setnz	al
		movzx	eax, al
		mov	edx, ds:off_688AEB0C[eax*4]
		xor	eax, eax
		call	sub_688823E0
		jmp	loc_688825FC
; ---------------------------------------------------------------------------

loc_68882ACD:				; CODE XREF: sub_68882584+3FEj
		mov	[esp+7Ch+var_44], 0
		jmp	loc_688829BC
; ---------------------------------------------------------------------------

loc_68882ADA:				; CODE XREF: sub_68882584+3C4j
					; sub_68882584+3D0j ...
		mov	[esp+7Ch+var_74], edx
		mov	[esp+7Ch+Str2],	offset aStartoscarse_1 ; "startOSCARSession response was missing "...
		jmp	loc_6888285C
; ---------------------------------------------------------------------------

loc_68882AEB:				; CODE XREF: sub_68882584+422j
		mov	[esp+7Ch+Str2],	offset Str2 ; "opportunistic_encryption"
		mov	eax, [esp+7Ch+Str1]
		mov	[esp+7Ch+Str], eax ; Str1
		mov	[esp+7Ch+var_50], edx
		call	strcmp
		test	eax, eax
		mov	edx, [esp+7Ch+var_50]
		jnz	loc_68882BCA
		mov	[esp+7Ch+Str2],	offset aWeHavenTReceiv ; "We haven't received a tlsCertName to us"...
		mov	[esp+7Ch+Str], offset aOscar_0 ; "oscar"
		call	purple_debug_warning
		mov	[esp+7Ch+var_44], 0
		mov	edx, [esp+7Ch+var_50]
		jmp	loc_688829BC
; ---------------------------------------------------------------------------

loc_68882B34:				; CODE XREF: sub_68882584+483j
		mov	[esp+7Ch+Str], edi ; Str
		mov	[esp+7Ch+var_4C], eax
		call	atoi
		mov	[esp+7Ch+var_48], eax
		mov	[esp+7Ch+Str], edi
		call	g_free
		lea	eax, [esp+7Ch+var_24]
		mov	[esp+7Ch+Str2],	eax
		mov	ecx, [esp+7Ch+var_4C]
		mov	[esp+7Ch+Str], ecx
		call	purple_base64_decode
		mov	edx, eax
		mov	eax, [esp+7Ch+var_44]
		mov	[esp+7Ch+var_64], eax
		movzx	eax, word ptr [esp+7Ch+var_24]
		mov	[esp+7Ch+var_68], eax
		mov	[esp+7Ch+var_6C], edx
		movzx	eax, word ptr [esp+7Ch+var_48]
		mov	[esp+7Ch+var_70], eax
		mov	[esp+7Ch+var_74], esi
		mov	[esp+7Ch+Str2],	ebx
		mov	[esp+7Ch+Str], ebp
		mov	[esp+7Ch+var_50], edx
		call	oscar_connect_to_bos
		mov	edx, [esp+7Ch+var_50]
		mov	[esp+7Ch+Str], edx
		call	g_free
		mov	[esp+7Ch+Str], esi
		call	g_free
		mov	ecx, [esp+7Ch+var_4C]
		mov	[esp+7Ch+Str], ecx
		call	g_free
		mov	eax, [esp+7Ch+var_44]
		mov	[esp+7Ch+Str], eax
		call	g_free
		jmp	loc_6888261A
; ---------------------------------------------------------------------------

loc_68882BC5:				; CODE XREF: sub_68882584+A0j
		call	__stack_chk_fail
; ---------------------------------------------------------------------------

loc_68882BCA:				; CODE XREF: sub_68882584+585j
		mov	[esp+7Ch+var_74], edx
		mov	[esp+7Ch+Str2],	offset aStartoscarse_3 ; "startOSCARSession was	missing	tlsCertNa"...
		mov	[esp+7Ch+Str], offset aOscar_0 ; "oscar"
		call	purple_debug_error
		mov	[esp+7Ch+Str2],	offset aYouRequiredEnc ; "You required encryption in your account"...
		mov	[esp+7Ch+Str], offset aPidgin_0	; "pidgin"
		call	libintl_dgettext
		mov	[esp+7Ch+var_74], eax
		mov	[esp+7Ch+Str2],	4
		mov	[esp+7Ch+Str], ebp
		call	purple_connection_error_reason
		mov	eax, [esp+7Ch+var_48]
		mov	[esp+7Ch+Str], eax
		call	xmlnode_free
		jmp	loc_6888261A
sub_68882584	endp

; ---------------------------------------------------------------------------
		align 4

; =============== S U B	R O U T	I N E =======================================


sub_68882C1C	proc near		; DATA XREF: send_client_login+16Ao

Str		= dword	ptr -8Ch
EndPtr		= dword	ptr -88h
Radix		= dword	ptr -84h
var_80		= dword	ptr -80h
var_7C		= dword	ptr -7Ch
var_78		= dword	ptr -78h
var_74		= dword	ptr -74h
var_70		= dword	ptr -70h
var_6C		= dword	ptr -6Ch
var_68		= dword	ptr -68h
var_50		= dword	ptr -50h
var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_20		= dword	ptr -20h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 7Ch
		mov	ebx, [esp+8Ch+arg_4]
		mov	edx, [esp+8Ch+arg_8]
		mov	edi, [esp+8Ch+arg_C]
		mov	esi, [esp+8Ch+arg_10]
		mov	eax, ds:__stack_chk_guard
		mov	[esp+8Ch+var_20], eax
		xor	eax, eax
		mov	ebp, [ebx+68h]
		mov	dword ptr [ebx], 0
		test	esi, esi
		jz	short loc_68882CC8

loc_68882C57:				; CODE XREF: sub_68882C1C+C6j
		xor	eax, eax
		mov	ebx, [ebx+44h]
		test	ebx, ebx
		setnz	al
		mov	ebx, ds:off_688AEAA8[eax*4]
		mov	[esp+8Ch+EndPtr], offset aErrorRequestin ; "Error requesting %s: %s"
		mov	[esp+8Ch+Str], offset aPidgin_0	; "pidgin"
		call	libintl_dgettext
		mov	[esp+8Ch+Radix], esi
		mov	[esp+8Ch+EndPtr], ebx
		mov	[esp+8Ch+Str], eax
		call	g_strdup_printf

loc_68882C8C:				; CODE XREF: sub_68882C1C+530j
		mov	ebx, eax
		mov	[esp+8Ch+Radix], eax
		mov	[esp+8Ch+EndPtr], 0
		mov	[esp+8Ch+Str], ebp
		call	purple_connection_error_reason
		mov	edx, [esp+8Ch+var_20]
		xor	edx, ds:__stack_chk_guard
		jnz	loc_68883018
		mov	[esp+8Ch+arg_0], ebx

loc_68882CB9:				; CODE XREF: sub_68882C1C+798j
		add	esp, 7Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		jmp	g_free
; ---------------------------------------------------------------------------
		align 4

loc_68882CC8:				; CODE XREF: sub_68882C1C+39j
		test	edi, edi
		jnz	short loc_68882CE8
		mov	[esp+8Ch+EndPtr], offset aTheServerRetur ; "The	server returned	an empty response"
		mov	[esp+8Ch+Str], offset aPidgin_0	; "pidgin"
		call	libintl_dgettext
		mov	esi, eax
		jmp	loc_68882C57
; ---------------------------------------------------------------------------
		align 4

loc_68882CE8:				; CODE XREF: sub_68882C1C+AEj
		mov	[esp+8Ch+Str], ebp
		mov	[esp+8Ch+var_50], edx
		call	purple_connection_get_protocol_data
		mov	[esp+8Ch+var_3C], eax
		mov	[esp+8Ch+EndPtr], edi
		mov	edx, [esp+8Ch+var_50]
		mov	[esp+8Ch+Str], edx
		call	xmlnode_from_str
		mov	[esp+8Ch+var_4C], eax
		test	eax, eax
		mov	edx, [esp+8Ch+var_50]
		jz	loc_68883118
		mov	[esp+8Ch+EndPtr], offset aStatuscode ; "statusCode"
		mov	eax, [esp+8Ch+var_4C]
		mov	[esp+8Ch+Str], eax
		mov	[esp+8Ch+var_50], edx
		call	xmlnode_get_child
		mov	esi, eax
		mov	[esp+8Ch+EndPtr], offset aData ; "data"
		mov	eax, [esp+8Ch+var_4C]
		mov	[esp+8Ch+Str], eax
		call	xmlnode_get_child
		mov	[esp+8Ch+var_48], eax
		test	eax, eax
		mov	edx, [esp+8Ch+var_50]
		jz	loc_68883020
		mov	[esp+8Ch+EndPtr], offset aSessionsecret	; "sessionSecret"
		mov	[esp+8Ch+Str], eax
		call	xmlnode_get_child
		mov	[esp+8Ch+var_38], eax
		mov	[esp+8Ch+EndPtr], offset aHosttime ; "hostTime"
		mov	eax, [esp+8Ch+var_48]
		mov	[esp+8Ch+Str], eax
		call	xmlnode_get_child
		mov	[esp+8Ch+var_30], eax
		mov	[esp+8Ch+EndPtr], offset aToken	; "token"
		mov	eax, [esp+8Ch+var_48]
		mov	[esp+8Ch+Str], eax
		call	xmlnode_get_child
		mov	[esp+8Ch+var_40], eax
		test	eax, eax
		mov	edx, [esp+8Ch+var_50]
		jz	loc_68883045
		mov	[esp+8Ch+EndPtr], offset aA ; "a"
		mov	[esp+8Ch+Str], eax
		call	xmlnode_get_child
		mov	[esp+8Ch+var_34], eax
		mov	edx, [esp+8Ch+var_50]

loc_68882DBE:				; CODE XREF: sub_68882C1C+424j
					; sub_68882C1C+431j
		test	esi, esi
		jz	loc_6888307B
		mov	[esp+8Ch+Str], esi
		mov	[esp+8Ch+var_50], edx
		call	xmlnode_get_data_unescaped
		mov	[esp+8Ch+var_44], eax
		test	eax, eax
		mov	edx, [esp+8Ch+var_50]
		jz	loc_6888307B
		mov	edi, offset a200 ; "200"
		mov	ecx, 4
		mov	esi, eax
		repe cmpsb
		mov	eax, [esp+8Ch+var_44]
		mov	[esp+8Ch+Str], eax ; Str
		jz	loc_68882F00
		call	atoi
		mov	ebx, eax
		mov	eax, [esp+8Ch+var_44]
		mov	[esp+8Ch+Str], eax
		call	g_free
		mov	[esp+8Ch+EndPtr], offset aStatusdetailco ; "statusDetailCode"
		mov	eax, [esp+8Ch+var_4C]
		mov	[esp+8Ch+Str], eax
		call	xmlnode_get_child
		test	eax, eax
		mov	edx, [esp+8Ch+var_50]
		jz	loc_68883052
		mov	[esp+8Ch+Str], eax
		call	xmlnode_get_data_unescaped
		mov	esi, eax
		test	eax, eax
		mov	edx, [esp+8Ch+var_50]
		jz	loc_68883052
		mov	[esp+8Ch+Str], eax ; Str
		call	atoi
		mov	edi, eax
		mov	[esp+8Ch+Str], esi
		call	g_free
		mov	edx, [esp+8Ch+var_50]
		mov	[esp+8Ch+var_7C], edx
		mov	[esp+8Ch+var_80], edi
		mov	[esp+8Ch+Radix], ebx
		mov	[esp+8Ch+EndPtr], offset aClientloginRes ; "clientLogin	response statusCode was	%d "...
		mov	[esp+8Ch+Str], offset aOscar_0 ; "oscar"
		call	purple_debug_error
		cmp	ebx, 14Ah
		jz	loc_688830D3
		cmp	ebx, 191h
		jnz	short loc_68882E9C
		cmp	edi, 0BCBh
		jz	loc_688833CD

loc_68882E9C:				; CODE XREF: sub_68882C1C+272j
					; sub_68882C1C+45Aj ...
		mov	eax, [esp+8Ch+var_3C]
		mov	edx, [eax+44h]
		xor	eax, eax
		test	edx, edx
		setnz	al
		mov	edx, ds:off_688AEAA8[eax*4]
		mov	eax, [esp+8Ch+var_4C]
		call	sub_688823E0
		mov	ebx, eax
		mov	[esp+8Ch+Radix], eax
		mov	[esp+8Ch+EndPtr], 10h

loc_68882EC8:				; CODE XREF: sub_68882C1C+4A4j
		mov	[esp+8Ch+Str], ebp
		call	purple_connection_error_reason
		mov	[esp+8Ch+Str], ebx
		call	g_free

loc_68882ED8:				; CODE XREF: sub_68882C1C+4F7j
					; sub_68882C1C+7D9j
		mov	edx, [esp+8Ch+var_20]
		xor	edx, ds:__stack_chk_guard
		jnz	loc_68883018

loc_68882EE8:				; CODE XREF: sub_68882C1C+3F6j
		mov	eax, [esp+8Ch+var_4C]
		mov	[esp+8Ch+arg_0], eax
		add	esp, 7Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		jmp	xmlnode_free
; ---------------------------------------------------------------------------
		align 10h

loc_68882F00:				; CODE XREF: sub_68882C1C+1DBj
		mov	[esp+8Ch+var_50], edx
		call	g_free
		mov	eax, [esp+8Ch+var_48]
		test	eax, eax
		mov	edx, [esp+8Ch+var_50]
		jz	loc_688830C5
		mov	eax, [esp+8Ch+var_38]
		test	eax, eax
		jz	loc_688830C5
		mov	eax, [esp+8Ch+var_40]
		test	eax, eax
		jz	loc_688830C5
		mov	eax, [esp+8Ch+var_34]
		test	eax, eax
		jz	loc_688830C5
		mov	eax, [esp+8Ch+var_34]
		mov	[esp+8Ch+Str], eax
		mov	[esp+8Ch+var_50], edx
		call	xmlnode_get_data_unescaped
		mov	[esp+8Ch+var_48], eax
		mov	eax, [esp+8Ch+var_38]
		mov	[esp+8Ch+Str], eax
		call	xmlnode_get_data_unescaped
		mov	esi, eax
		mov	eax, [esp+8Ch+var_30]
		mov	[esp+8Ch+Str], eax
		call	xmlnode_get_data_unescaped
		mov	edi, eax
		mov	eax, [esp+8Ch+var_48]
		test	eax, eax
		mov	edx, [esp+8Ch+var_50]
		jz	short loc_68882F98
		mov	eax, [esp+8Ch+var_48]
		cmp	byte ptr [eax],	0
		jz	short loc_68882F98
		test	esi, esi
		jz	short loc_68882F98
		cmp	byte ptr [esi],	0
		jz	short loc_68882F98
		test	edi, edi
		jz	short loc_68882F98
		cmp	byte ptr [edi],	0
		jnz	loc_68883151

loc_68882F98:				; CODE XREF: sub_68882C1C+35Bj
					; sub_68882C1C+364j ...
		mov	[esp+8Ch+Radix], edx
		mov	[esp+8Ch+EndPtr], offset aClientloginR_0 ; "clientLogin	response was missing someth"...
		mov	[esp+8Ch+Str], offset aOscar_0 ; "oscar"
		call	purple_debug_error
		mov	eax, [esp+8Ch+var_3C]
		mov	ecx, [eax+44h]
		xor	eax, eax
		test	ecx, ecx
		setnz	al
		mov	edx, ds:off_688AEAA8[eax*4]
		mov	eax, [esp+8Ch+var_4C]
		call	sub_688823E0
		mov	ebx, eax
		mov	[esp+8Ch+Radix], eax
		mov	[esp+8Ch+EndPtr], 0
		mov	[esp+8Ch+Str], ebp
		call	purple_connection_error_reason
		mov	[esp+8Ch+Str], ebx
		call	g_free
		mov	eax, [esp+8Ch+var_48]
		mov	[esp+8Ch+Str], eax
		call	g_free
		mov	[esp+8Ch+Str], esi
		call	g_free
		mov	[esp+8Ch+Str], edi
		call	g_free
		mov	edx, [esp+8Ch+var_20]
		xor	edx, ds:__stack_chk_guard
		jz	loc_68882EE8

loc_68883018:				; CODE XREF: sub_68882C1C+90j
					; sub_68882C1C+2C6j ...
		call	__stack_chk_fail
; ---------------------------------------------------------------------------
		align 10h

loc_68883020:				; CODE XREF: sub_68882C1C+134j
		mov	[esp+8Ch+var_34], 0
		mov	[esp+8Ch+var_40], 0
		mov	[esp+8Ch+var_30], 0
		mov	[esp+8Ch+var_38], 0
		jmp	loc_68882DBE
; ---------------------------------------------------------------------------

loc_68883045:				; CODE XREF: sub_68882C1C+184j
		mov	[esp+8Ch+var_34], 0
		jmp	loc_68882DBE
; ---------------------------------------------------------------------------

loc_68883052:				; CODE XREF: sub_68882C1C+20Ej
					; sub_68882C1C+224j
		mov	[esp+8Ch+var_7C], edx
		mov	[esp+8Ch+var_80], 0
		mov	[esp+8Ch+Radix], ebx
		mov	[esp+8Ch+EndPtr], offset aClientloginRes ; "clientLogin	response statusCode was	%d "...
		mov	[esp+8Ch+Str], offset aOscar_0 ; "oscar"
		call	purple_debug_error
		jmp	loc_68882E9C
; ---------------------------------------------------------------------------

loc_6888307B:				; CODE XREF: sub_68882C1C+1A4j
					; sub_68882C1C+1C0j
		mov	[esp+8Ch+Radix], edx
		mov	[esp+8Ch+EndPtr], offset aClientloginR_1 ; "clientLogin	response was missing status"...

loc_68883087:				; CODE XREF: sub_68882C1C+4B5j
		mov	[esp+8Ch+Str], offset aOscar_0 ; "oscar"
		call	purple_debug_error
		mov	eax, [esp+8Ch+var_3C]
		mov	eax, [eax+44h]
		test	eax, eax
		setnz	al
		movzx	eax, al
		mov	edx, ds:off_688AEAA8[eax*4]
		mov	eax, [esp+8Ch+var_4C]
		call	sub_688823E0
		mov	ebx, eax
		mov	[esp+8Ch+Radix], eax
		mov	[esp+8Ch+EndPtr], 0
		jmp	loc_68882EC8
; ---------------------------------------------------------------------------

loc_688830C5:				; CODE XREF: sub_68882C1C+2F7j
					; sub_68882C1C+303j ...
		mov	[esp+8Ch+Radix], edx
		mov	[esp+8Ch+EndPtr], offset aClientloginR_0 ; "clientLogin	response was missing someth"...
		jmp	short loc_68883087
; ---------------------------------------------------------------------------

loc_688830D3:				; CODE XREF: sub_68882C1C+266j
		cmp	edi, 0BC3h
		jz	loc_688833FA
		cmp	edi, 0BC7h
		jnz	loc_68882E9C
		mov	[esp+8Ch+EndPtr], offset aServerRequeste ; "Server requested that you fill out a CA"...

loc_688830F3:				; CODE XREF: sub_68882C1C+80Cj
		mov	[esp+8Ch+Str], offset aPidgin_0	; "pidgin"
		call	libintl_dgettext
		mov	[esp+8Ch+Radix], eax
		mov	[esp+8Ch+EndPtr], 2
		mov	[esp+8Ch+Str], ebp
		call	purple_connection_error_reason
		jmp	loc_68882ED8
; ---------------------------------------------------------------------------

loc_68883118:				; CODE XREF: sub_68882C1C+F6j
		mov	[esp+8Ch+Radix], edx
		mov	[esp+8Ch+EndPtr], offset aClientloginCou ; "clientLogin	could not parse	response as"...
		mov	[esp+8Ch+Str], offset aOscar_0 ; "oscar"
		call	purple_debug_error
		mov	eax, [esp+8Ch+var_3C]
		mov	ecx, [eax+44h]
		xor	eax, eax
		test	ecx, ecx
		setnz	al
		mov	edx, ds:off_688AEAA8[eax*4]
		xor	eax, eax
		call	sub_688823E0
		jmp	loc_68882C8C
; ---------------------------------------------------------------------------

loc_68883151:				; CODE XREF: sub_68882C1C+376j
		mov	[esp+8Ch+Radix], 0Ah ; Radix
		mov	[esp+8Ch+EndPtr], 0 ; EndPtr
		mov	[esp+8Ch+Str], edi ; Str
		call	strtol
		mov	[esp+8Ch+var_40], eax
		mov	[esp+8Ch+Str], edi
		call	g_free
		mov	eax, [esp+8Ch+var_4C]
		mov	[esp+8Ch+Str], eax
		call	xmlnode_free
		mov	[esp+8Ch+Str], ebp
		call	purple_connection_get_password
		mov	edi, eax
		xor	eax, eax
		mov	ecx, 0FFFFFFFFh
		repne scasb
		not	ecx
		lea	edi, [ecx-1]
		mov	[esp+8Ch+Str], ebp
		call	purple_connection_get_password
		mov	edx, [ebx+44h]
		test	edx, edx
		jz	short loc_688831B2
		cmp	edi, 8
		jle	short loc_688831B2
		mov	edi, 8

loc_688831B2:				; CODE XREF: sub_68882C1C+58Aj
					; sub_68882C1C+58Fj
		mov	[esp+8Ch+Radix], eax
		mov	[esp+8Ch+EndPtr], edi
		mov	[esp+8Ch+Str], offset a_S ; "%.*s"
		call	g_strdup_printf
		mov	edi, eax
		mov	edx, esi
		call	sub_688824C4
		mov	[esp+8Ch+var_4C], eax
		mov	[esp+8Ch+Str], edi
		call	g_free
		mov	[esp+8Ch+Str], esi
		call	g_free
		mov	eax, [ebx+68h]
		mov	[esp+8Ch+Str], eax
		call	purple_connection_get_account
		mov	[esp+8Ch+var_44], eax
		mov	[esp+8Ch+Radix], offset	Str2 ; "opportunistic_encryption"
		mov	[esp+8Ch+EndPtr], offset aEncryption ; "encryption"
		mov	[esp+8Ch+Str], eax
		call	purple_account_get_string
		mov	edi, offset aNo_encryption ; "no_encryption"
		mov	ecx, 0Eh
		mov	esi, eax
		repe cmpsb
		setnz	dl
		movzx	edx, dl
		mov	esi, edx
		mov	eax, [ebx+44h]
		test	eax, eax
		jnz	loc_688833B9
		mov	eax, offset aPrplAimClientk ; "prpl-aim-clientkey"

loc_68883230:				; CODE XREF: sub_68882C1C+7A2j
		mov	[esp+8Ch+EndPtr], offset aMa15d7jtxbmvgR ; "ma15d7JTxbmVG-RP"
		mov	[esp+8Ch+Str], eax
		call	oscar_get_ui_info_string
		mov	ebp, eax
		mov	eax, [ebx+44h]
		test	eax, eax
		jnz	loc_688833C3
		mov	eax, offset aPrplAimDisti_0 ; "prpl-aim-distid"

loc_68883252:				; CODE XREF: sub_68882C1C+7ACj
		mov	[esp+8Ch+EndPtr], 611h
		mov	[esp+8Ch+Str], eax
		call	oscar_get_ui_info_int
		mov	edi, eax
		mov	eax, [esp+8Ch+var_48]
		mov	[esp+8Ch+Str], eax
		call	purple_url_encode
		mov	[esp+8Ch+var_78], esi
		mov	edx, [esp+8Ch+var_40]
		mov	[esp+8Ch+var_7C], edx
		mov	[esp+8Ch+var_80], ebp
		mov	[esp+8Ch+Radix], edi
		mov	[esp+8Ch+EndPtr], eax
		mov	[esp+8Ch+Str], offset aASDistidDFXmlK ;	"a=%s&distId=%d&f=xml&k=%s&ts=%lu&useTLS"...
		call	g_strdup_printf
		mov	esi, eax
		xor	eax, eax
		mov	ecx, [ebx+44h]
		test	ecx, ecx
		setnz	al
		mov	eax, ds:off_688AEB0C[eax*4]
		mov	[esp+8Ch+Str], eax
		call	purple_url_encode
		mov	[esp+8Ch+Str], eax
		call	g_strdup
		mov	ebp, eax
		mov	[esp+8Ch+Str], esi
		call	purple_url_encode
		mov	[esp+8Ch+var_80], eax
		mov	[esp+8Ch+Radix], ebp
		mov	[esp+8Ch+EndPtr], offset aGet ;	"GET"
		mov	[esp+8Ch+Str], offset aSSS_0 ; "%s&%s&%s"
		call	g_strdup_printf
		mov	edi, eax
		mov	[esp+8Ch+Str], ebp
		call	g_free
		mov	edx, edi
		mov	eax, [esp+8Ch+var_4C]
		call	sub_688824C4
		mov	ebp, eax
		mov	[esp+8Ch+Str], edi
		call	g_free
		mov	[esp+8Ch+var_80], ebp
		mov	[esp+8Ch+Radix], esi
		xor	eax, eax
		mov	edi, [ebx+44h]
		test	edi, edi
		setnz	al
		mov	eax, ds:off_688AEB0C[eax*4]
		mov	[esp+8Ch+EndPtr], eax
		mov	[esp+8Ch+Str], offset aS?SSig_sha256S ;	"%s?%s&sig_sha256=%s"
		call	g_strdup_printf
		mov	edi, eax
		mov	[esp+8Ch+Str], esi
		call	g_free
		mov	[esp+8Ch+Str], ebp
		call	g_free
		mov	[esp+8Ch+var_68], ebx
		mov	[esp+8Ch+var_6C], offset sub_68882584
		mov	[esp+8Ch+var_70], 0FFFFFFFFh
		mov	[esp+8Ch+var_74], 0
		mov	[esp+8Ch+var_78], 0
		mov	[esp+8Ch+var_7C], 0
		mov	[esp+8Ch+var_80], 0
		mov	[esp+8Ch+Radix], 1
		mov	[esp+8Ch+EndPtr], edi
		mov	eax, [esp+8Ch+var_44]
		mov	[esp+8Ch+Str], eax
		call	purple_util_fetch_url_request_len_with_account
		mov	[ebx], eax
		mov	[esp+8Ch+Str], edi
		call	g_free
		mov	eax, [esp+8Ch+var_48]
		mov	[esp+8Ch+Str], eax
		call	g_free
		mov	edx, [esp+8Ch+var_20]
		xor	edx, ds:__stack_chk_guard
		jnz	loc_68883018
		mov	eax, [esp+8Ch+var_4C]
		mov	[esp+8Ch+arg_0], eax
		jmp	loc_68882CB9
; ---------------------------------------------------------------------------

loc_688833B9:				; CODE XREF: sub_68882C1C+609j
		mov	eax, offset aPrplIcqClientk ; "prpl-icq-clientkey"
		jmp	loc_68883230
; ---------------------------------------------------------------------------

loc_688833C3:				; CODE XREF: sub_68882C1C+62Bj
		mov	eax, offset aPrplIcqDisti_0 ; "prpl-icq-distid"
		jmp	loc_68883252
; ---------------------------------------------------------------------------

loc_688833CD:				; CODE XREF: sub_68882C1C+27Aj
		mov	[esp+8Ch+EndPtr], offset aAolDoesNotAllo ; "AOL	does not allow your screen name	to "...
		mov	[esp+8Ch+Str], offset aPidgin_0	; "pidgin"
		call	libintl_dgettext
		mov	[esp+8Ch+Radix], eax
		mov	[esp+8Ch+EndPtr], 10h
		mov	[esp+8Ch+Str], ebp
		call	purple_connection_error_reason
		jmp	loc_68882ED8
; ---------------------------------------------------------------------------

loc_688833FA:				; CODE XREF: sub_68882C1C+4BDj
		mov	[esp+8Ch+Str], ebp
		call	purple_connection_get_account
		mov	ebx, eax
		mov	[esp+8Ch+Str], eax
		call	purple_account_get_remember_password
		test	eax, eax
		jnz	short loc_68883420
		mov	[esp+8Ch+EndPtr], 0
		mov	[esp+8Ch+Str], ebx
		call	purple_account_set_password

loc_68883420:				; CODE XREF: sub_68882C1C+7F2j
		mov	[esp+8Ch+EndPtr], offset aIncorrectPassw ; "Incorrect password"
		jmp	loc_688830F3
sub_68882C1C	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 316. send_client_login

; =============== S U B	R O U T	I N E =======================================


		public send_client_login
send_client_login proc near		; CODE XREF: oscar_login+9D3p

var_6C		= dword	ptr -6Ch
var_68		= dword	ptr -68h
var_64		= dword	ptr -64h
var_60		= dword	ptr -60h
var_5C		= dword	ptr -5Ch
var_58		= dword	ptr -58h
var_54		= dword	ptr -54h
var_50		= dword	ptr -50h
var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_20		= dword	ptr -20h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 5Ch
		mov	esi, [esp+6Ch+arg_0]
		mov	eax, [esp+6Ch+arg_4]
		mov	[esp+6Ch+var_30], eax
		mov	eax, ds:__stack_chk_guard
		mov	[esp+6Ch+var_20], eax
		xor	eax, eax
		mov	ebp, [esi+68h]
		mov	[esp+6Ch+var_6C], ebp
		call	purple_connection_get_password
		mov	edx, eax
		xor	eax, eax
		mov	ecx, 0FFFFFFFFh
		mov	edi, edx
		repne scasb
		not	ecx
		dec	ecx
		mov	eax, [esi+44h]
		test	eax, eax
		jz	short loc_68883479
		cmp	ecx, 8
		jg	loc_68883608

loc_68883479:				; CODE XREF: send_client_login+3Ej
					; send_client_login+1DDj
		mov	[esp+6Ch+var_68], ecx
		mov	[esp+6Ch+var_6C], edx
		call	g_strndup
		mov	edi, eax
		mov	[esp+6Ch+var_6C], offset byte_688AE990
		call	g_string_new
		mov	ebx, eax
		mov	eax, [esi+44h]
		test	eax, eax
		jnz	loc_68883614
		mov	eax, offset aPrplAimClientk ; "prpl-aim-clientkey"

loc_688834A5:				; CODE XREF: send_client_login+1E9j
		mov	[esp+6Ch+var_68], offset aMa15d7jtxbmvgR ; "ma15d7JTxbmVG-RP"
		mov	[esp+6Ch+var_6C], eax
		call	oscar_get_ui_info_string
		mov	[esp+6Ch+var_64], eax
		mov	[esp+6Ch+var_68], offset aDevidS ; "devId=%s"
		mov	[esp+6Ch+var_6C], ebx
		call	g_string_append_printf
		mov	[esp+6Ch+var_68], offset aFXml ; "&f=xml"
		mov	[esp+6Ch+var_6C], ebx
		call	g_string_append_printf
		mov	[esp+6Ch+var_6C], edi
		call	purple_url_encode
		mov	[esp+6Ch+var_64], eax
		mov	[esp+6Ch+var_68], offset aPwdS ; "&pwd=%s"
		mov	[esp+6Ch+var_6C], ebx
		call	g_string_append_printf
		mov	eax, [esp+6Ch+var_30]
		mov	[esp+6Ch+var_6C], eax
		call	purple_url_encode
		mov	[esp+6Ch+var_64], eax
		mov	[esp+6Ch+var_68], offset aSS ; "&s=%s"
		mov	[esp+6Ch+var_6C], ebx
		call	g_string_append_printf
		mov	[esp+6Ch+var_6C], edi
		call	g_free
		mov	[esp+6Ch+var_6C], offset aPostAuthClient ; "POST /auth/clientLogin HTTP/1.0\r\nConn"...
		call	g_string_new
		mov	edi, eax
		mov	[esp+6Ch+var_68], offset aContentTypeApp ; "Content-Type: application/x-www-form-ur"...
		mov	[esp+6Ch+var_6C], eax
		call	g_string_append_printf
		mov	eax, [ebx+4]
		mov	[esp+6Ch+var_64], eax
		mov	[esp+6Ch+var_68], offset aContentLengthU ; "Content-Length: %u\r\n\r\n"
		mov	[esp+6Ch+var_6C], edi
		call	g_string_append_printf
		mov	eax, [ebx+4]
		mov	[esp+6Ch+var_64], eax
		mov	eax, [ebx]
		mov	[esp+6Ch+var_68], eax
		mov	[esp+6Ch+var_6C], edi
		call	g_string_append_len
		mov	[esp+6Ch+var_68], 1
		mov	[esp+6Ch+var_6C], ebx
		call	g_string_free
		mov	edx, [edi]
		xor	eax, eax
		mov	ecx, [esi+44h]
		test	ecx, ecx
		setnz	al
		mov	ebx, ds:off_688AEAA8[eax*4]
		mov	[esp+6Ch+var_6C], ebp
		mov	[esp+6Ch+var_34], edx
		call	purple_connection_get_account
		mov	[esp+6Ch+var_48], esi
		mov	[esp+6Ch+var_4C], offset sub_68882C1C
		mov	[esp+6Ch+var_50], 0FFFFFFFFh
		mov	[esp+6Ch+var_54], 0
		mov	edx, [esp+6Ch+var_34]
		mov	[esp+6Ch+var_58], edx
		mov	[esp+6Ch+var_5C], 0
		mov	[esp+6Ch+var_60], 0
		mov	[esp+6Ch+var_64], 1
		mov	[esp+6Ch+var_68], ebx
		mov	[esp+6Ch+var_6C], eax
		call	purple_util_fetch_url_request_len_with_account
		mov	[esi], eax
		mov	eax, [esp+6Ch+var_20]
		xor	eax, ds:__stack_chk_guard
		jnz	loc_6888361E
		mov	[esp+6Ch+arg_4], 1
		mov	[esp+6Ch+arg_0], edi
		add	esp, 5Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		jmp	g_string_free
; ---------------------------------------------------------------------------

loc_68883608:				; CODE XREF: send_client_login+43j
		mov	ecx, 8
		jmp	loc_68883479
; ---------------------------------------------------------------------------
		align 4

loc_68883614:				; CODE XREF: send_client_login+6Aj
		mov	eax, offset aPrplIcqClientk ; "prpl-icq-clientkey"
		jmp	loc_688834A5
; ---------------------------------------------------------------------------

loc_6888361E:				; CODE XREF: send_client_login+1BAj
		call	__stack_chk_fail
send_client_login endp

; ---------------------------------------------------------------------------
		align 4

; =============== S U B	R O U T	I N E =======================================


; int __usercall sub_68883624@<eax>(char *Str@<ecx>, int, int)
sub_68883624	proc near		; CODE XREF: sub_688837C4+5Ap
					; oscar_encoding_to_utf8+150p ...

Str		= dword	ptr -5Ch
Val		= dword	ptr -58h
var_54		= dword	ptr -54h
var_50		= dword	ptr -50h
var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_20		= dword	ptr -20h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 4Ch
		mov	[esp+5Ch+var_3C], eax
		mov	[esp+5Ch+var_38], edx
		mov	edx, [esp+5Ch+arg_0]
		mov	[esp+5Ch+var_30], edx
		mov	edx, [esp+5Ch+arg_4]
		mov	[esp+5Ch+var_34], edx
		mov	eax, ds:__stack_chk_guard
		mov	[esp+5Ch+var_20], eax
		xor	eax, eax
		test	ecx, ecx
		jz	loc_68883720
		mov	esi, ecx
		xor	edi, edi
		jmp	loc_688836FF
; ---------------------------------------------------------------------------
		align 10h

loc_68883660:				; CODE XREF: sub_68883624+EFj
		sub	eax, esi
		mov	[esp+5Ch+Val], eax
		mov	[esp+5Ch+Str], esi
		call	g_strndup
		mov	edi, eax
		test	eax, eax
		jz	loc_68883758
		mov	ebp, eax

loc_6888367A:				; CODE XREF: sub_68883624+F7j
		mov	[esp+5Ch+Val], offset aUtf8 ; "utf-8"
		mov	[esp+5Ch+Str], ebp
		call	g_ascii_strcasecmp
		test	eax, eax
		jnz	short loc_688836B2
		mov	[esp+5Ch+var_54], 0
		mov	edx, [esp+5Ch+var_38]
		mov	[esp+5Ch+Val], edx
		mov	eax, [esp+5Ch+var_3C]
		mov	[esp+5Ch+Str], eax
		call	g_utf8_validate
		test	eax, eax
		jnz	loc_6888376C

loc_688836B2:				; CODE XREF: sub_68883624+68j
		mov	[esp+5Ch+var_44], 0
		mov	[esp+5Ch+var_48], 0
		mov	[esp+5Ch+var_4C], 0
		mov	[esp+5Ch+var_50], ebp
		mov	[esp+5Ch+var_54], offset aUtf8_0 ; "UTF-8"
		mov	edx, [esp+5Ch+var_38]
		mov	[esp+5Ch+Val], edx
		mov	eax, [esp+5Ch+var_3C]
		mov	[esp+5Ch+Str], eax
		call	g_convert
		mov	ebp, eax
		test	ebx, ebx
		jz	short loc_68883750
		mov	[esp+5Ch+Str], edi
		call	g_free
		test	ebp, ebp
		jnz	short loc_68883738
		lea	esi, [ebx+1]

loc_688836FF:				; CODE XREF: sub_68883624+36j
		mov	[esp+5Ch+Val], 2Ch ; Val
		mov	[esp+5Ch+Str], esi ; Str
		call	strchr
		mov	ebx, eax
		test	eax, eax
		jnz	loc_68883660
		mov	ebp, esi
		jmp	loc_6888367A
; ---------------------------------------------------------------------------

loc_68883720:				; CODE XREF: sub_68883624+2Cj
		mov	[esp+5Ch+Val], offset aEncodingsIsNul ;	"encodings is NULL"
		mov	[esp+5Ch+Str], offset aOscar_1 ; "oscar"
		call	purple_debug_error
		xor	ebp, ebp
		xchg	ax, ax

loc_68883738:				; CODE XREF: sub_68883624+D6j
					; sub_68883624+12Ej ...
		mov	eax, ebp
		mov	edx, [esp+5Ch+var_20]
		xor	edx, ds:__stack_chk_guard
		jnz	short loc_688837BF
		add	esp, 4Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_68883750:				; CODE XREF: sub_68883624+CAj
		test	eax, eax
		jnz	short loc_68883738
		jmp	short loc_6888376C
; ---------------------------------------------------------------------------
		align 4

loc_68883758:				; CODE XREF: sub_68883624+4Ej
		mov	[esp+5Ch+Val], offset aErrorAllocatin ;	"Error allocating memory for encoding"
		mov	[esp+5Ch+Str], offset aOscar_1 ; "oscar"
		call	purple_debug_error

loc_6888376C:				; CODE XREF: sub_68883624+88j
					; sub_68883624+130j
		mov	eax, [esp+5Ch+var_34]
		test	eax, eax
		jnz	short loc_68883778
		xor	ebp, ebp
		jmp	short loc_68883738
; ---------------------------------------------------------------------------

loc_68883778:				; CODE XREF: sub_68883624+14Ej
		mov	edx, [esp+5Ch+var_30]
		mov	[esp+5Ch+var_40], edx
		mov	[esp+5Ch+var_44], 0
		mov	[esp+5Ch+var_48], 0
		mov	[esp+5Ch+var_4C], offset a? ; "?"
		mov	[esp+5Ch+var_50], esi
		mov	[esp+5Ch+var_54], offset aUtf8_0 ; "UTF-8"
		mov	edx, [esp+5Ch+var_38]
		mov	[esp+5Ch+Val], edx
		mov	eax, [esp+5Ch+var_3C]
		mov	[esp+5Ch+Str], eax
		call	g_convert_with_fallback
		mov	ebp, eax
		jmp	loc_68883738
; ---------------------------------------------------------------------------

loc_688837BF:				; CODE XREF: sub_68883624+120j
		call	__stack_chk_fail
sub_68883624	endp


; =============== S U B	R O U T	I N E =======================================


; int __usercall sub_688837C4@<eax>(char *Str@<ecx>, int)
sub_688837C4	proc near		; CODE XREF: oscar_decode_im+C4p
					; oscar_decode_im+1B3p	...

var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_30		= dword	ptr -30h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
arg_0		= dword	ptr  4

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 3Ch
		mov	esi, eax
		mov	ebx, ecx
		mov	ebp, [esp+4Ch+arg_0]
		mov	eax, ds:__stack_chk_guard
		mov	[esp+4Ch+var_20], eax
		xor	eax, eax
		mov	[esp+4Ch+var_24], 0
		test	ecx, ecx
		jz	loc_6888389C
		cmp	byte ptr [ecx],	0
		jz	loc_6888389C
		mov	edi, edx
		mov	[esp+4Ch+var_48], ecx
		mov	[esp+4Ch+var_4C], offset aUtf8_0 ; "UTF-8"
		call	g_ascii_strcasecmp
		test	eax, eax
		jz	short loc_68883874
		mov	[esp+4Ch+var_48], ebp ;	int
		lea	eax, [esp+4Ch+var_24]
		mov	[esp+4Ch+var_4C], eax ;	int
		mov	ecx, ebx	; Str
		mov	edx, edi
		mov	eax, esi
		call	sub_68883624
		mov	edx, [esp+4Ch+var_24]
		test	edx, edx
		jz	short loc_6888385E
		mov	edx, [edx+8]
		mov	[esp+4Ch+var_40], edx
		mov	[esp+4Ch+var_44], ebx
		mov	[esp+4Ch+var_48], offset aConversionFrom ; "Conversion from %s failed: %s.\n"
		mov	[esp+4Ch+var_4C], offset aOscar_1 ; "oscar"
		mov	[esp+4Ch+var_30], eax
		call	purple_debug_warning
		mov	edx, [esp+4Ch+var_24]
		mov	[esp+4Ch+var_4C], edx
		call	g_error_free
		mov	eax, [esp+4Ch+var_30]

loc_6888385E:				; CODE XREF: sub_688837C4+65j
					; sub_688837C4+D4j ...
		mov	edx, [esp+4Ch+var_20]
		xor	edx, ds:__stack_chk_guard
		jnz	short loc_688838B8
		add	esp, 3Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 4

loc_68883874:				; CODE XREF: sub_688837C4+47j
		mov	[esp+4Ch+var_44], 0
		mov	[esp+4Ch+var_48], edi
		mov	[esp+4Ch+var_4C], esi
		call	g_utf8_validate
		test	eax, eax
		jz	short loc_688838A0
		mov	[esp+4Ch+var_48], edi
		mov	[esp+4Ch+var_4C], esi
		call	g_strndup
		jmp	short loc_6888385E
; ---------------------------------------------------------------------------
		align 4

loc_6888389C:				; CODE XREF: sub_688837C4+24j
					; sub_688837C4+2Dj
		xor	eax, eax
		jmp	short loc_6888385E
; ---------------------------------------------------------------------------

loc_688838A0:				; CODE XREF: sub_688837C4+C6j
		mov	[esp+4Ch+var_48], offset aStringIsNotVal ; "String is not valid	UTF-8.\n"
		mov	[esp+4Ch+var_4C], offset aOscar_1 ; "oscar"
		call	purple_debug_warning
		xor	eax, eax
		jmp	short loc_6888385E
; ---------------------------------------------------------------------------

loc_688838B8:				; CODE XREF: sub_688837C4+A4j
		call	__stack_chk_fail
sub_688837C4	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 234. oscar_encoding_to_utf8

; =============== S U B	R O U T	I N E =======================================


; int __cdecl oscar_encoding_to_utf8(char *, int, int)
		public oscar_encoding_to_utf8
oscar_encoding_to_utf8 proc near	; CODE XREF: sub_6889D300+45p
					; sub_6889D79C+296p ...

Str		= dword	ptr -4Ch
Val		= dword	ptr -48h
var_44		= dword	ptr -44h
var_30		= dword	ptr -30h
var_20		= dword	ptr -20h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 3Ch
		mov	ebx, [esp+4Ch+arg_0]
		mov	edi, [esp+4Ch+arg_4]
		mov	esi, [esp+4Ch+arg_8]
		mov	eax, ds:__stack_chk_guard
		mov	[esp+4Ch+var_20], eax
		xor	eax, eax
		test	ebx, ebx
		jz	loc_68883A80
		mov	[esp+4Ch+Val], offset aTextAolrtfChar ;	"text/aolrtf; charset="
		mov	[esp+4Ch+Str], ebx
		call	g_str_has_prefix
		test	eax, eax
		jz	loc_688839AC

loc_688838FE:				; CODE XREF: oscar_encoding_to_utf8+FEj
					; oscar_encoding_to_utf8+116j
		mov	[esp+4Ch+Val], 22h ; Val
		mov	[esp+4Ch+Str], ebx ; Str
		call	strchr
		mov	ebp, eax
		mov	[esp+4Ch+Val], 22h ; Ch
		mov	[esp+4Ch+Str], ebx ; Str
		call	strrchr
		test	ebp, ebp
		jz	short loc_6888392C
		test	eax, eax
		jz	short loc_6888392C
		cmp	ebp, eax
		jb	short loc_68883998

loc_6888392C:				; CODE XREF: oscar_encoding_to_utf8+62j
					; oscar_encoding_to_utf8+66j ...
		mov	[esp+4Ch+Str], ebx
		call	g_strdup
		mov	ebx, eax

loc_68883936:				; CODE XREF: oscar_encoding_to_utf8+EAj
		test	ebx, ebx
		jz	short loc_68883943
		cmp	byte ptr [ebx],	0
		jnz	loc_688839E4

loc_68883943:				; CODE XREF: oscar_encoding_to_utf8+78j
					; oscar_encoding_to_utf8+1C2j
		mov	[esp+4Ch+Val], offset aEmptyEncodingA ;	"Empty encoding, assuming UTF-8\n"
		mov	[esp+4Ch+Str], offset aOscar_1 ; "oscar"
		call	purple_debug_info

loc_68883957:				; CODE XREF: oscar_encoding_to_utf8+15Dj
					; oscar_encoding_to_utf8+20Cj
		test	esi, esi
		jz	short loc_68883964
		cmp	byte ptr [edi],	0
		jnz	loc_68883A40

loc_68883964:				; CODE XREF: oscar_encoding_to_utf8+99j
					; oscar_encoding_to_utf8+196j
		mov	[esp+4Ch+Val], esi
		mov	[esp+4Ch+Str], edi
		call	g_strndup

loc_68883970:				; CODE XREF: oscar_encoding_to_utf8+157j
					; oscar_encoding_to_utf8+1B8j
		mov	[esp+4Ch+Str], ebx
		mov	[esp+4Ch+var_30], eax
		call	g_free
		mov	eax, [esp+4Ch+var_30]
		mov	edx, [esp+4Ch+var_20]
		xor	edx, ds:__stack_chk_guard
		jnz	loc_68883AD9
		add	esp, 3Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_68883998:				; CODE XREF: oscar_encoding_to_utf8+6Aj
		dec	eax
		sub	eax, ebp
		mov	[esp+4Ch+Val], eax
		inc	ebp
		mov	[esp+4Ch+Str], ebp
		call	g_strndup
		mov	ebx, eax
		jmp	short loc_68883936
; ---------------------------------------------------------------------------

loc_688839AC:				; CODE XREF: oscar_encoding_to_utf8+38j
		mov	[esp+4Ch+Val], offset aTextXAolrtfCha ;	"text/x-aolrtf;	charset="
		mov	[esp+4Ch+Str], ebx
		call	g_str_has_prefix
		test	eax, eax
		jnz	loc_688838FE
		mov	[esp+4Ch+Val], offset aTextPlainChars ;	"text/plain; charset="
		mov	[esp+4Ch+Str], ebx
		call	g_str_has_prefix
		test	eax, eax
		jnz	loc_688838FE
		jmp	loc_6888392C
; ---------------------------------------------------------------------------
		align 4

loc_688839E4:				; CODE XREF: oscar_encoding_to_utf8+7Dj
		mov	[esp+4Ch+Val], offset Str ; "iso-8859-1"
		mov	[esp+4Ch+Str], ebx
		call	g_ascii_strcasecmp
		test	eax, eax
		jnz	short loc_68883A24
		mov	ecx, offset Str	; "iso-8859-1"

loc_688839FD:				; CODE XREF: oscar_encoding_to_utf8+17Dj
					; oscar_encoding_to_utf8+1F5j ...
		mov	[esp+4Ch+Val], 0 ; int
		mov	[esp+4Ch+Str], 0 ; int
		mov	edx, esi
		mov	eax, edi
		call	sub_68883624
		test	eax, eax
		jnz	loc_68883970
		jmp	loc_68883957
; ---------------------------------------------------------------------------
		align 4

loc_68883A24:				; CODE XREF: oscar_encoding_to_utf8+136j
		mov	[esp+4Ch+Val], offset aIso88591Window ;	"ISO-8859-1-Windows-3.1-Latin-1"
		mov	[esp+4Ch+Str], ebx
		call	g_ascii_strcasecmp
		test	eax, eax
		jnz	short loc_68883A88

loc_68883A38:				; CODE XREF: oscar_encoding_to_utf8+1DAj
		mov	ecx, offset aWindows1252 ; "Windows-1252"
		jmp	short loc_688839FD
; ---------------------------------------------------------------------------
		align 10h

loc_68883A40:				; CODE XREF: oscar_encoding_to_utf8+9Ej
		mov	[esp+4Ch+var_44], 0
		mov	[esp+4Ch+Val], esi
		mov	[esp+4Ch+Str], edi
		call	g_utf8_validate
		test	eax, eax
		jnz	loc_68883964
		mov	[esp+4Ch+Val], offset aThereWasAnErro ;	"(There	was an error receiving this mess"...
		mov	[esp+4Ch+Str], offset aPidgin_1	; "pidgin"
		call	libintl_dgettext
		mov	[esp+4Ch+Str], eax
		call	g_strdup
		jmp	loc_68883970
; ---------------------------------------------------------------------------
		align 10h

loc_68883A80:				; CODE XREF: oscar_encoding_to_utf8+20j
		xor	ebx, ebx
		jmp	loc_68883943
; ---------------------------------------------------------------------------
		align 4

loc_68883A88:				; CODE XREF: oscar_encoding_to_utf8+176j
		mov	[esp+4Ch+Val], offset aUsAscii ; "us-ascii"
		mov	[esp+4Ch+Str], ebx
		call	g_ascii_strcasecmp
		test	eax, eax
		jz	short loc_68883A38
		mov	[esp+4Ch+Val], offset aUnicode20 ; "unicode-2-0"
		mov	[esp+4Ch+Str], ebx
		call	g_ascii_strcasecmp
		test	eax, eax
		jnz	short loc_68883ABA
		mov	ecx, offset aUtf16be ; "UTF-16BE"
		jmp	loc_688839FD
; ---------------------------------------------------------------------------

loc_68883ABA:				; CODE XREF: oscar_encoding_to_utf8+1EEj
		mov	[esp+4Ch+Val], offset aUtf8 ; "utf-8"
		mov	[esp+4Ch+Str], ebx
		call	g_ascii_strcasecmp
		test	eax, eax
		jz	loc_68883957
		mov	ecx, ebx
		jmp	loc_688839FD
; ---------------------------------------------------------------------------

loc_68883AD9:				; CODE XREF: oscar_encoding_to_utf8+CAj
		call	__stack_chk_fail
oscar_encoding_to_utf8 endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 280. oscar_utf8_try_convert

; =============== S U B	R O U T	I N E =======================================


		public oscar_utf8_try_convert
oscar_utf8_try_convert proc near	; CODE XREF: sub_6888F450+32Cp
					; sub_6889A038+E1p ...

var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_10		= dword	ptr -10h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	edi
		push	esi
		push	ebx
		sub	esp, 20h
		mov	edi, [esp+2Ch+arg_0]
		mov	esi, [esp+2Ch+arg_4]
		mov	ebx, [esp+2Ch+arg_8]
		mov	eax, ds:__stack_chk_guard
		mov	[esp+2Ch+var_10], eax
		xor	eax, eax
		test	ebx, ebx
		jz	loc_68883BBC
		mov	[esp+2Ch+var_24], 0
		mov	[esp+2Ch+var_28], 0FFFFFFFFh
		mov	[esp+2Ch+var_2C], ebx
		call	g_utf8_validate
		test	eax, eax
		jnz	short loc_68883BA0
		mov	edx, [esi+44h]
		test	edx, edx
		jnz	short loc_68883B48

loc_68883B28:				; CODE XREF: oscar_utf8_try_convert+82j
					; oscar_utf8_try_convert+87j ...
		mov	eax, [esp+2Ch+var_10]
		xor	eax, ds:__stack_chk_guard
		jnz	loc_68883BC0
		mov	[esp+2Ch+arg_0], ebx
		add	esp, 20h
		pop	ebx
		pop	esi
		pop	edi
		jmp	purple_utf8_try_convert
; ---------------------------------------------------------------------------
		align 4

loc_68883B48:				; CODE XREF: oscar_utf8_try_convert+46j
		mov	[esp+2Ch+var_24], 0
		mov	[esp+2Ch+var_28], offset aEncoding ; "encoding"
		mov	[esp+2Ch+var_2C], edi
		call	purple_account_get_string
		test	eax, eax
		jz	short loc_68883B28
		cmp	byte ptr [eax],	0
		jz	short loc_68883B28
		mov	[esp+2Ch+var_28], 0 ; int
		mov	[esp+2Ch+var_2C], 0 ; int
		mov	ecx, eax	; Str
		mov	edx, 0FFFFFFFFh
		mov	eax, ebx
		call	sub_68883624
		test	eax, eax
		jz	short loc_68883B28

loc_68883B8A:				; CODE XREF: oscar_utf8_try_convert+DEj
		mov	edx, [esp+2Ch+var_10]
		xor	edx, ds:__stack_chk_guard
		jnz	short loc_68883BC0
		add	esp, 20h
		pop	ebx
		pop	esi
		pop	edi
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_68883BA0:				; CODE XREF: oscar_utf8_try_convert+3Fj
		mov	edx, [esp+2Ch+var_10]
		xor	edx, ds:__stack_chk_guard
		jnz	short loc_68883BC0
		mov	[esp+2Ch+arg_0], ebx
		add	esp, 20h
		pop	ebx
		pop	esi
		pop	edi
		jmp	g_strdup
; ---------------------------------------------------------------------------
		align 4

loc_68883BBC:				; CODE XREF: oscar_utf8_try_convert+1Fj
		xor	eax, eax
		jmp	short loc_68883B8A
; ---------------------------------------------------------------------------

loc_68883BC0:				; CODE XREF: oscar_utf8_try_convert+52j
					; oscar_utf8_try_convert+B4j ...
		call	__stack_chk_fail
oscar_utf8_try_convert endp

; ---------------------------------------------------------------------------
		align 4
; Exported entry 232. oscar_decode_im

; =============== S U B	R O U T	I N E =======================================


; int __cdecl oscar_decode_im(int, int,	int, char *, size_t)
		public oscar_decode_im
oscar_decode_im	proc near		; CODE XREF: sub_6888B528+B1Dp
					; sub_68896FB0+38Cp ...

Dest		= dword	ptr -5Ch
Source		= dword	ptr -58h
Count		= dword	ptr -54h
var_50		= dword	ptr -50h
var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
Str		= dword	ptr -34h
var_30		= dword	ptr -30h
var_20		= dword	ptr -20h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 4Ch
		mov	ebp, [esp+5Ch+arg_0]
		mov	eax, [esp+5Ch+arg_4]
		mov	[esp+5Ch+var_30], eax
		mov	esi, [esp+5Ch+arg_C]
		mov	ebx, [esp+5Ch+arg_10]
		mov	edi, [esp+5Ch+arg_8]
		mov	edx, ds:__stack_chk_guard
		mov	[esp+5Ch+var_20], edx
		xor	edx, edx
		test	ebx, ebx
		jz	loc_68883D10
		test	esi, esi
		jz	loc_68883D10
		cmp	di, 2
		jz	loc_68883CB4
		cmp	di, 3
		jz	loc_68883CC0
		test	di, di
		jz	loc_68883CE8
		cmp	di, 0Dh
		jz	loc_68883D14
		call	oscar_get_locale_charset
		mov	[esp+5Ch+Count], eax
		mov	[esp+5Ch+Source], offset aEncoding ; "encoding"
		mov	[esp+5Ch+Dest],	ebp
		call	purple_account_get_string
		mov	ebp, eax
		mov	ecx, offset aUtf8_0 ; "UTF-8"

loc_68883C4A:				; CODE XREF: oscar_decode_im+F6j
					; oscar_decode_im+11Aj	...
		mov	[esp+5Ch+var_44], offset word_688AED6E
		mov	[esp+5Ch+var_48], ebp
		mov	[esp+5Ch+var_4C], ecx
		mov	[esp+5Ch+var_50], ebx
		movzx	edx, di
		mov	[esp+5Ch+Count], edx
		mov	[esp+5Ch+Source], offset aParsingImChars ; "Parsing IM,	charset=0x%04hx, datalen=%u"...
		mov	[esp+5Ch+Dest],	offset aOscar_1	; "oscar"
		mov	[esp+5Ch+Str], ecx
		call	purple_debug_info
		mov	[esp+5Ch+Dest],	0 ; int
		mov	ecx, [esp+5Ch+Str] ; Str

loc_68883C88:				; CODE XREF: oscar_decode_im+1CCj
		mov	edx, ebx
		mov	eax, esi
		call	sub_688837C4
		test	eax, eax
		jz	loc_68883DC4

loc_68883C99:				; CODE XREF: oscar_decode_im+14Aj
					; oscar_decode_im+1BAj	...
		mov	edx, [esp+5Ch+var_20]
		xor	edx, ds:__stack_chk_guard
		jnz	loc_68883E6D
		add	esp, 4Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 4

loc_68883CB4:				; CODE XREF: oscar_decode_im+3Fj
		mov	ebp, offset aUtf8_0 ; "UTF-8"
		mov	ecx, offset aUtf16be ; "UTF-16BE"
		jmp	short loc_68883C4A
; ---------------------------------------------------------------------------

loc_68883CC0:				; CODE XREF: oscar_decode_im+49j
		test	eax, eax
		jz	short loc_68883CD8
		mov	eax, [esp+5Ch+var_30]
		mov	[esp+5Ch+Dest],	eax
		call	oscar_util_valid_name_icq
		test	eax, eax
		jnz	loc_68883D9C

loc_68883CD8:				; CODE XREF: oscar_decode_im+FAj
		mov	ebp, offset aUtf8_0 ; "UTF-8"
		mov	ecx, offset aIso88591_0	; "ISO-8859-1"
		jmp	loc_68883C4A
; ---------------------------------------------------------------------------
		align 4

loc_68883CE8:				; CODE XREF: oscar_decode_im+52j
		call	oscar_get_locale_charset
		mov	[esp+5Ch+Count], eax
		mov	[esp+5Ch+Source], offset aEncoding ; "encoding"
		mov	[esp+5Ch+Dest],	ebp
		call	purple_account_get_string
		mov	ebp, eax
		mov	ecx, offset aAscii ; "ASCII"
		jmp	loc_68883C4A
; ---------------------------------------------------------------------------
		align 10h

loc_68883D10:				; CODE XREF: oscar_decode_im+2Dj
					; oscar_decode_im+35j
		xor	eax, eax
		jmp	short loc_68883C99
; ---------------------------------------------------------------------------

loc_68883D14:				; CODE XREF: oscar_decode_im+5Cj
		call	oscar_get_locale_charset
		mov	[esp+5Ch+Count], eax
		mov	[esp+5Ch+Source], offset aEncoding ; "encoding"
		mov	[esp+5Ch+Dest],	ebp
		call	purple_account_get_string
		mov	ebp, eax
		test	eax, eax
		jz	loc_68883E72
		mov	[esp+5Ch+var_44], eax
		mov	[esp+5Ch+var_48], offset aIso88591_0 ; "ISO-8859-1"
		mov	[esp+5Ch+var_4C], offset aUtf8_0 ; "UTF-8"
		mov	[esp+5Ch+var_50], ebx
		mov	[esp+5Ch+Count], 0Dh
		mov	[esp+5Ch+Source], offset aParsingImChars ; "Parsing IM,	charset=0x%04hx, datalen=%u"...
		mov	[esp+5Ch+Dest],	offset aOscar_1	; "oscar"
		call	purple_debug_info
		mov	[esp+5Ch+Dest],	0 ; int
		mov	ecx, offset aUtf8_0 ; "UTF-8"
		mov	edx, ebx
		mov	eax, esi
		call	sub_688837C4
		test	eax, eax
		jnz	loc_68883C99
		mov	[esp+5Ch+Dest],	0
		mov	ecx, offset aIso88591_0	; "ISO-8859-1"
		jmp	loc_68883C88
; ---------------------------------------------------------------------------
		align 4

loc_68883D9C:				; CODE XREF: oscar_decode_im+10Aj
		call	oscar_get_locale_charset
		mov	[esp+5Ch+Count], eax
		mov	[esp+5Ch+Source], offset aEncoding ; "encoding"
		mov	[esp+5Ch+Dest],	ebp
		call	purple_account_get_string
		mov	ecx, eax
		mov	ebp, offset aUtf8_0 ; "UTF-8"
		jmp	loc_68883C4A
; ---------------------------------------------------------------------------
		align 4

loc_68883DC4:				; CODE XREF: oscar_decode_im+CBj
		mov	[esp+5Ch+Dest],	1 ; int
		mov	ecx, ebp	; Str
		mov	edx, ebx
		mov	eax, esi
		call	sub_688837C4
		test	eax, eax
		jnz	loc_68883C99
		lea	eax, [ebx+1]
		mov	[esp+5Ch+Dest],	eax
		call	g_malloc
		mov	ebp, eax
		mov	[esp+5Ch+Count], ebx ; Count
		mov	[esp+5Ch+Source], esi ;	Source
		mov	[esp+5Ch+Dest],	eax ; Dest
		call	strncpy
		mov	byte ptr [ebp+ebx+0], 0
		mov	[esp+5Ch+Dest],	ebp
		call	purple_utf8_salvage
		mov	ebx, eax
		mov	[esp+5Ch+Source], offset aThereWasAnEr_0 ; "(There was an error	receiving this mess"...
		mov	[esp+5Ch+Dest],	offset aPidgin_1 ; "pidgin"
		call	libintl_dgettext
		mov	edx, [esp+5Ch+var_30]
		mov	[esp+5Ch+Count], edx
		mov	[esp+5Ch+Source], edx
		mov	[esp+5Ch+Dest],	eax
		call	g_strdup_printf
		mov	esi, eax
		mov	[esp+5Ch+Count], eax
		mov	[esp+5Ch+Source], ebx
		mov	[esp+5Ch+Dest],	offset aSS_0 ; "%s %s"
		call	g_strdup_printf
		mov	[esp+5Ch+Dest],	esi
		mov	[esp+5Ch+Str], eax
		call	g_free
		mov	[esp+5Ch+Dest],	ebp
		call	g_free
		mov	[esp+5Ch+Dest],	ebx
		call	g_free
		mov	eax, [esp+5Ch+Str]
		jmp	loc_68883C99
; ---------------------------------------------------------------------------

loc_68883E6D:				; CODE XREF: oscar_decode_im+DBj
		call	__stack_chk_fail
; ---------------------------------------------------------------------------

loc_68883E72:				; CODE XREF: oscar_decode_im+169j
		mov	ebp, offset aIso88591_0	; "ISO-8859-1"
		mov	ecx, offset aUtf8_0 ; "UTF-8"
		jmp	loc_68883C4A
oscar_decode_im	endp

; ---------------------------------------------------------------------------
		align 4
; Exported entry 233. oscar_encode_im

; =============== S U B	R O U T	I N E =======================================


		public oscar_encode_im
oscar_encode_im	proc near		; CODE XREF: sub_6889A35C+B3p
					; sub_6889A35C+237p ...

var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_10		= dword	ptr -10h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		push	esi
		push	ebx
		sub	esp, 34h
		mov	edx, [esp+3Ch+arg_0]
		mov	esi, [esp+3Ch+arg_4]
		mov	ebx, [esp+3Ch+arg_8]
		mov	ecx, [esp+3Ch+arg_C]
		mov	eax, ds:__stack_chk_guard
		mov	[esp+3Ch+var_10], eax
		xor	eax, eax
		cmp	byte ptr [edx],	0
		jz	short loc_68883EBC
		jl	loc_68883F30
		mov	eax, edx
		jmp	short loc_68883EB6
; ---------------------------------------------------------------------------
		align 4

loc_68883EB4:				; CODE XREF: oscar_encode_im+36j
		jl	short loc_68883F30

loc_68883EB6:				; CODE XREF: oscar_encode_im+2Dj
		inc	eax
		cmp	byte ptr [eax],	0
		jnz	short loc_68883EB4

loc_68883EBC:				; CODE XREF: oscar_encode_im+23j
		xor	eax, eax

loc_68883EBE:				; CODE XREF: oscar_encode_im+B1j
		test	ebx, ebx
		jz	short loc_68883EC5
		mov	[ebx], ax

loc_68883EC5:				; CODE XREF: oscar_encode_im+3Cj
		test	ecx, ecx
		jz	short loc_68883ED5
		test	ax, ax
		jnz	short loc_68883F24
		mov	ebx, offset aUsAscii ; "us-ascii"
		mov	[ecx], ebx

loc_68883ED5:				; CODE XREF: oscar_encode_im+43j
					; oscar_encode_im+A7j
		test	ax, ax
		jz	short loc_68883F38
		mov	eax, offset aUtf16be ; "UTF-16BE"

loc_68883EDF:				; CODE XREF: oscar_encode_im+B9j
		mov	[esp+3Ch+var_24], 0
		mov	[esp+3Ch+var_28], esi
		mov	[esp+3Ch+var_2C], 0
		mov	[esp+3Ch+var_30], offset aUtf8_0 ; "UTF-8"
		mov	[esp+3Ch+var_34], eax
		mov	[esp+3Ch+var_38], 0FFFFFFFFh
		mov	[esp+3Ch+var_3C], edx
		call	g_convert
		mov	edx, [esp+3Ch+var_10]
		xor	edx, ds:__stack_chk_guard
		jnz	short loc_68883F3F
		add	esp, 34h
		pop	ebx
		pop	esi
		retn
; ---------------------------------------------------------------------------
		align 4

loc_68883F24:				; CODE XREF: oscar_encode_im+48j
		mov	ebx, offset aUnicode20 ; "unicode-2-0"
		mov	[ecx], ebx
		jmp	short loc_68883ED5
; ---------------------------------------------------------------------------
		align 10h

loc_68883F30:				; CODE XREF: oscar_encode_im+25j
					; oscar_encode_im:loc_68883EB4j
		mov	eax, 2
		jmp	short loc_68883EBE
; ---------------------------------------------------------------------------
		align 4

loc_68883F38:				; CODE XREF: oscar_encode_im+54j
		mov	eax, offset aAscii ; "ASCII"
		jmp	short loc_68883EDF
; ---------------------------------------------------------------------------

loc_68883F3F:				; CODE XREF: oscar_encode_im+95j
		call	__stack_chk_fail
oscar_encode_im	endp


; =============== S U B	R O U T	I N E =======================================


sub_68883F44	proc near		; DATA XREF: admin_modfirst+4Bo

var_7C		= dword	ptr -7Ch
var_78		= dword	ptr -78h
var_74		= dword	ptr -74h
var_70		= dword	ptr -70h
var_6C		= dword	ptr -6Ch
var_68		= dword	ptr -68h
var_64		= dword	ptr -64h
var_60		= dword	ptr -60h
var_5C		= dword	ptr -5Ch
var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= word ptr -30h
var_2E		= word ptr -2Eh
var_20		= dword	ptr -20h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 6Ch
		mov	edx, [esp+7Ch+arg_0]
		mov	[esp+7Ch+var_3C], edx
		mov	edx, [esp+7Ch+arg_4]
		mov	[esp+7Ch+var_38], edx
		mov	edx, [esp+7Ch+arg_C]
		mov	[esp+7Ch+var_34], edx
		mov	edx, [esp+7Ch+arg_10]
		mov	[esp+7Ch+var_4C], edx
		mov	ebx, [esp+7Ch+arg_14]
		mov	eax, ds:__stack_chk_guard
		mov	[esp+7Ch+var_20], eax
		xor	eax, eax
		mov	ax, [edx+2]
		cmp	ax, 3
		jz	short loc_68883FC0
		cmp	ax, 5
		jz	short loc_68883FC0
		cmp	ax, 7
		jz	loc_68884188

loc_68883FA3:				; CODE XREF: sub_68883F44+270j
		xor	eax, eax

loc_68883FA5:				; CODE XREF: sub_68883F44+1EEj
		mov	edx, [esp+7Ch+var_20]
		xor	edx, ds:__stack_chk_guard
		jnz	loc_688841F7
		add	esp, 6Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_68883FC0:				; CODE XREF: sub_68883F44+4Dj
					; sub_68883F44+53j
		mov	[esp+7Ch+var_7C], ebx
		call	sub_688819F0
		mov	[esp+7Ch+var_2E], ax
		mov	[esp+7Ch+var_7C], ebx
		call	sub_688819F0
		mov	esi, eax
		mov	[esp+7Ch+var_30], 0
		mov	[esp+7Ch+var_48], 0
		mov	[esp+7Ch+var_44], 0
		mov	[esp+7Ch+var_40], 0
		test	ax, ax
		jnz	short loc_68884028
		jmp	loc_68884090
; ---------------------------------------------------------------------------

loc_68884000:				; CODE XREF: sub_68883F44+10Ej
		dec	bp
		jnz	short loc_68884024
		mov	eax, [esp+7Ch+var_40]
		mov	[esp+7Ch+var_7C], eax
		call	g_free
		movzx	eax, di
		mov	[esp+7Ch+var_78], eax
		mov	[esp+7Ch+var_7C], ebx
		call	sub_68881D24
		mov	[esp+7Ch+var_40], eax
		nop

loc_68884024:				; CODE XREF: sub_68883F44+BEj
					; sub_68883F44+11Ej ...
		dec	si
		jz	short loc_68884090

loc_68884028:				; CODE XREF: sub_68883F44+B5j
					; sub_68883F44+147j
		mov	[esp+7Ch+var_7C], ebx
		call	sub_68881818
		test	eax, eax
		jz	short loc_68884090
		mov	[esp+7Ch+var_7C], ebx
		call	sub_688819F0
		mov	ebp, eax
		mov	[esp+7Ch+var_7C], ebx
		call	sub_688819F0
		mov	edi, eax
		cmp	bp, 4
		jz	loc_68884138
		jbe	short loc_68884000
		cmp	bp, 8
		jz	loc_6888415C
		cmp	bp, 11h
		jnz	short loc_68884024
		mov	eax, [esp+7Ch+var_48]
		mov	[esp+7Ch+var_7C], eax
		call	g_free
		test	di, di
		jnz	loc_68884170
		mov	[esp+7Ch+var_7C], offset aSuppressed ; "*suppressed"
		call	g_strdup
		mov	[esp+7Ch+var_48], eax
		dec	si
		jnz	short loc_68884028
		lea	esi, [esi+0]

loc_68884090:				; CODE XREF: sub_68883F44+B7j
					; sub_68883F44+E2j ...
		mov	edx, [esp+7Ch+var_4C]
		movzx	eax, word ptr [edx+2]
		mov	[esp+7Ch+var_74], eax
		movzx	eax, word ptr [edx]
		mov	[esp+7Ch+var_78], eax
		mov	edx, [esp+7Ch+var_3C]
		mov	[esp+7Ch+var_7C], edx
		call	aim_callhandler
		test	eax, eax
		jz	short loc_68884109
		mov	edx, [esp+7Ch+var_48]
		mov	[esp+7Ch+var_5C], edx
		mov	edx, [esp+7Ch+var_40]
		mov	[esp+7Ch+var_60], edx
		mov	edx, [esp+7Ch+var_44]
		mov	[esp+7Ch+var_64], edx
		movzx	ebp, [esp+7Ch+var_30]
		mov	[esp+7Ch+var_68], ebp
		movzx	edx, [esp+7Ch+var_2E]
		mov	[esp+7Ch+var_6C], edx
		mov	edx, [esp+7Ch+var_4C]
		cmp	word ptr [edx+2], 5
		setz	dl
		movzx	edx, dl
		mov	[esp+7Ch+var_70], edx
		mov	edx, [esp+7Ch+var_34]
		mov	[esp+7Ch+var_74], edx
		mov	edx, [esp+7Ch+var_38]
		mov	[esp+7Ch+var_78], edx
		mov	edx, [esp+7Ch+var_3C]
		mov	[esp+7Ch+var_7C], edx
		call	eax

loc_68884109:				; CODE XREF: sub_68883F44+16Dj
		mov	eax, [esp+7Ch+var_40]
		mov	[esp+7Ch+var_7C], eax
		call	g_free
		mov	eax, [esp+7Ch+var_44]
		mov	[esp+7Ch+var_7C], eax
		call	g_free
		mov	eax, [esp+7Ch+var_48]
		mov	[esp+7Ch+var_7C], eax
		call	g_free
		mov	eax, 1
		jmp	loc_68883FA5
; ---------------------------------------------------------------------------
		align 4

loc_68884138:				; CODE XREF: sub_68883F44+108j
		mov	eax, [esp+7Ch+var_44]
		mov	[esp+7Ch+var_7C], eax
		call	g_free
		movzx	eax, di
		mov	[esp+7Ch+var_78], eax
		mov	[esp+7Ch+var_7C], ebx
		call	sub_68881D24
		mov	[esp+7Ch+var_44], eax
		jmp	loc_68884024
; ---------------------------------------------------------------------------

loc_6888415C:				; CODE XREF: sub_68883F44+114j
		mov	[esp+7Ch+var_7C], ebx
		call	sub_688819F0
		mov	[esp+7Ch+var_30], ax
		jmp	loc_68884024
; ---------------------------------------------------------------------------
		align 10h

loc_68884170:				; CODE XREF: sub_68883F44+12Fj
		movzx	eax, di
		mov	[esp+7Ch+var_78], eax
		mov	[esp+7Ch+var_7C], ebx
		call	sub_68881D24
		mov	[esp+7Ch+var_48], eax
		jmp	loc_68884024
; ---------------------------------------------------------------------------

loc_68884188:				; CODE XREF: sub_68883F44+59j
		mov	[esp+7Ch+var_7C], ebx
		call	sub_688819F0
		movzx	ebx, ax
		mov	edx, [esp+7Ch+var_4C]
		movzx	eax, word ptr [edx+2]
		mov	[esp+7Ch+var_74], eax
		movzx	eax, word ptr [edx]
		mov	[esp+7Ch+var_78], eax
		mov	edx, [esp+7Ch+var_3C]
		mov	[esp+7Ch+var_7C], edx
		call	aim_callhandler
		test	eax, eax
		jz	loc_68883FA3
		mov	edx, [esp+7Ch+var_20]
		xor	edx, ds:__stack_chk_guard
		jnz	short loc_688841F7
		mov	[esp+7Ch+arg_C], ebx
		mov	edx, [esp+7Ch+var_34]
		mov	[esp+7Ch+arg_8], edx
		mov	edx, [esp+7Ch+var_38]
		mov	[esp+7Ch+arg_4], edx
		mov	edx, [esp+7Ch+var_3C]
		mov	[esp+7Ch+arg_0], edx
		add	esp, 6Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		jmp	eax
; ---------------------------------------------------------------------------

loc_688841F7:				; CODE XREF: sub_68883F44+6Bj
					; sub_68883F44+280j
		call	__stack_chk_fail
sub_68883F44	endp

; Exported entry   8. aim_admin_getinfo

; =============== S U B	R O U T	I N E =======================================


		public aim_admin_getinfo
aim_admin_getinfo proc near		; CODE XREF: sub_688994EC+43p
					; .text:6889ED77p

var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_2C		= byte ptr -2Ch
var_20		= dword	ptr -20h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= word ptr  0Ch

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 3Ch
		mov	esi, [esp+4Ch+arg_0]
		mov	ebp, [esp+4Ch+arg_4]
		movzx	edi, [esp+4Ch+arg_8]
		mov	eax, ds:__stack_chk_guard
		mov	[esp+4Ch+var_20], eax
		xor	eax, eax
		mov	[esp+4Ch+var_48], 4
		lea	ebx, [esp+4Ch+var_2C]
		mov	[esp+4Ch+var_4C], ebx
		call	sub_68881748
		mov	[esp+4Ch+var_48], edi
		mov	[esp+4Ch+var_4C], ebx
		call	sub_68881E0C
		mov	[esp+4Ch+var_48], 0
		mov	[esp+4Ch+var_4C], ebx
		call	sub_68881E0C
		mov	[esp+4Ch+var_38], 0
		mov	[esp+4Ch+var_3C], 0
		mov	[esp+4Ch+var_40], 0
		mov	[esp+4Ch+var_44], 2
		mov	[esp+4Ch+var_48], 7
		mov	[esp+4Ch+var_4C], esi
		call	aim_cachesnac
		mov	[esp+4Ch+var_38], ebx
		mov	[esp+4Ch+var_3C], eax
		mov	[esp+4Ch+var_40], 2
		mov	[esp+4Ch+var_44], 7
		mov	[esp+4Ch+var_48], ebp
		mov	[esp+4Ch+var_4C], esi
		call	flap_connection_send_snac
		mov	[esp+4Ch+var_4C], ebx
		call	sub_688817E4
		mov	eax, [esp+4Ch+var_20]
		xor	eax, ds:__stack_chk_guard
		jnz	short loc_688842BB
		add	esp, 3Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_688842BB:				; CODE XREF: aim_admin_getinfo+B5j
		call	__stack_chk_fail
aim_admin_getinfo endp

; Exported entry  11. aim_admin_setnick

; =============== S U B	R O U T	I N E =======================================


		public aim_admin_setnick
aim_admin_setnick proc near		; CODE XREF: sub_6889DECC+358p
					; .text:6889EDD6p

var_6C		= dword	ptr -6Ch
var_68		= dword	ptr -68h
var_64		= dword	ptr -64h
var_60		= dword	ptr -60h
var_5C		= dword	ptr -5Ch
var_58		= dword	ptr -58h
var_40		= dword	ptr -40h
var_30		= dword	ptr -30h
var_2C		= byte ptr -2Ch
var_20		= dword	ptr -20h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 5Ch
		mov	esi, [esp+6Ch+arg_0]
		mov	edx, [esp+6Ch+arg_4]
		mov	ebp, [esp+6Ch+arg_8]
		mov	eax, ds:__stack_chk_guard
		mov	[esp+6Ch+var_20], eax
		xor	eax, eax
		mov	[esp+6Ch+var_30], 0
		mov	ecx, 0FFFFFFFFh
		mov	edi, ebp
		repne scasb
		not	ecx
		add	ecx, 3
		mov	[esp+6Ch+var_68], ecx
		lea	ebx, [esp+6Ch+var_2C]
		mov	[esp+6Ch+var_6C], ebx
		mov	[esp+6Ch+var_40], edx
		call	sub_68881748
		mov	[esp+6Ch+var_64], ebp
		mov	[esp+6Ch+var_68], 1
		lea	ebp, [esp+6Ch+var_30]
		mov	[esp+6Ch+var_6C], ebp
		call	aim_tlvlist_add_str
		mov	[esp+6Ch+var_68], ebp
		mov	[esp+6Ch+var_6C], ebx
		call	aim_tlvlist_write
		mov	eax, [esp+6Ch+var_30]
		mov	[esp+6Ch+var_6C], eax
		call	aim_tlvlist_free
		mov	[esp+6Ch+var_58], 0
		mov	[esp+6Ch+var_5C], 0
		mov	[esp+6Ch+var_60], 0
		mov	[esp+6Ch+var_64], 4
		mov	[esp+6Ch+var_68], 7
		mov	[esp+6Ch+var_6C], esi
		call	aim_cachesnac
		mov	[esp+6Ch+var_58], ebx
		mov	[esp+6Ch+var_5C], eax
		mov	[esp+6Ch+var_60], 4
		mov	[esp+6Ch+var_64], 7
		mov	edx, [esp+6Ch+var_40]
		mov	[esp+6Ch+var_68], edx
		mov	[esp+6Ch+var_6C], esi
		call	flap_connection_send_snac
		mov	[esp+6Ch+var_6C], ebx
		call	sub_688817E4
		mov	eax, [esp+6Ch+var_20]
		xor	eax, ds:__stack_chk_guard
		jnz	short loc_688843AC
		add	esp, 5Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_688843AC:				; CODE XREF: aim_admin_setnick+E2j
		call	__stack_chk_fail
aim_admin_setnick endp

; ---------------------------------------------------------------------------
		align 4
; Exported entry   7. aim_admin_changepasswd

; =============== S U B	R O U T	I N E =======================================


		public aim_admin_changepasswd
aim_admin_changepasswd proc near	; CODE XREF: .text:6889EE25p
					; oscar_change_passwd+51p

var_6C		= dword	ptr -6Ch
var_68		= dword	ptr -68h
var_64		= dword	ptr -64h
var_60		= dword	ptr -60h
var_5C		= dword	ptr -5Ch
var_58		= dword	ptr -58h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_30		= dword	ptr -30h
var_2C		= byte ptr -2Ch
var_20		= dword	ptr -20h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 5Ch
		mov	ebx, [esp+6Ch+arg_0]
		mov	eax, [esp+6Ch+arg_4]
		mov	[esp+6Ch+var_40], eax
		mov	esi, [esp+6Ch+arg_8]
		mov	ecx, [esp+6Ch+arg_C]
		mov	[esp+6Ch+var_44], ecx
		mov	eax, ds:__stack_chk_guard
		mov	[esp+6Ch+var_20], eax
		xor	eax, eax
		mov	[esp+6Ch+var_30], 0
		mov	ebp, 0FFFFFFFFh
		mov	ecx, ebp
		mov	edi, [esp+6Ch+var_44]
		repne scasb
		mov	edx, ecx
		not	edx
		mov	ecx, ebp
		mov	edi, esi
		repne scasb
		not	ecx
		lea	eax, [edx+ecx+6]
		mov	[esp+6Ch+var_68], eax
		lea	ebp, [esp+6Ch+var_2C]
		mov	[esp+6Ch+var_6C], ebp
		call	sub_68881748
		mov	[esp+6Ch+var_64], esi
		mov	[esp+6Ch+var_68], 2
		lea	esi, [esp+6Ch+var_30]
		mov	[esp+6Ch+var_6C], esi
		call	aim_tlvlist_add_str
		mov	eax, [esp+6Ch+var_44]
		mov	[esp+6Ch+var_64], eax
		mov	[esp+6Ch+var_68], 12h
		mov	[esp+6Ch+var_6C], esi
		call	aim_tlvlist_add_str
		mov	[esp+6Ch+var_68], esi
		mov	[esp+6Ch+var_6C], ebp
		call	aim_tlvlist_write
		mov	eax, [esp+6Ch+var_30]
		mov	[esp+6Ch+var_6C], eax
		call	aim_tlvlist_free
		mov	[esp+6Ch+var_58], 0
		mov	[esp+6Ch+var_5C], 0
		mov	[esp+6Ch+var_60], 0
		mov	[esp+6Ch+var_64], 4
		mov	[esp+6Ch+var_68], 7
		mov	[esp+6Ch+var_6C], ebx
		call	aim_cachesnac
		mov	[esp+6Ch+var_58], ebp
		mov	[esp+6Ch+var_5C], eax
		mov	[esp+6Ch+var_60], 4
		mov	[esp+6Ch+var_64], 7
		mov	ecx, [esp+6Ch+var_40]
		mov	[esp+6Ch+var_68], ecx
		mov	[esp+6Ch+var_6C], ebx
		call	flap_connection_send_snac
		mov	[esp+6Ch+var_6C], ebp
		call	sub_688817E4
		mov	eax, [esp+6Ch+var_20]
		xor	eax, ds:__stack_chk_guard
		jnz	short loc_688844CF
		add	esp, 5Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_688844CF:				; CODE XREF: aim_admin_changepasswd+111j
		call	__stack_chk_fail
aim_admin_changepasswd endp

; Exported entry  10. aim_admin_setemail

; =============== S U B	R O U T	I N E =======================================


		public aim_admin_setemail
aim_admin_setemail proc	near		; CODE XREF: .text:68899499p
					; .text:6889EC9Dp

var_6C		= dword	ptr -6Ch
var_68		= dword	ptr -68h
var_64		= dword	ptr -64h
var_60		= dword	ptr -60h
var_5C		= dword	ptr -5Ch
var_58		= dword	ptr -58h
var_40		= dword	ptr -40h
var_30		= dword	ptr -30h
var_2C		= byte ptr -2Ch
var_20		= dword	ptr -20h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 5Ch
		mov	esi, [esp+6Ch+arg_0]
		mov	edx, [esp+6Ch+arg_4]
		mov	ebp, [esp+6Ch+arg_8]
		mov	eax, ds:__stack_chk_guard
		mov	[esp+6Ch+var_20], eax
		xor	eax, eax
		mov	[esp+6Ch+var_30], 0
		mov	ecx, 0FFFFFFFFh
		mov	edi, ebp
		repne scasb
		not	ecx
		add	ecx, 3
		mov	[esp+6Ch+var_68], ecx
		lea	ebx, [esp+6Ch+var_2C]
		mov	[esp+6Ch+var_6C], ebx
		mov	[esp+6Ch+var_40], edx
		call	sub_68881748
		mov	[esp+6Ch+var_64], ebp
		mov	[esp+6Ch+var_68], 11h
		lea	ebp, [esp+6Ch+var_30]
		mov	[esp+6Ch+var_6C], ebp
		call	aim_tlvlist_add_str
		mov	[esp+6Ch+var_68], ebp
		mov	[esp+6Ch+var_6C], ebx
		call	aim_tlvlist_write
		mov	eax, [esp+6Ch+var_30]
		mov	[esp+6Ch+var_6C], eax
		call	aim_tlvlist_free
		mov	[esp+6Ch+var_58], 0
		mov	[esp+6Ch+var_5C], 0
		mov	[esp+6Ch+var_60], 0
		mov	[esp+6Ch+var_64], 4
		mov	[esp+6Ch+var_68], 7
		mov	[esp+6Ch+var_6C], esi
		call	aim_cachesnac
		mov	[esp+6Ch+var_58], ebx
		mov	[esp+6Ch+var_5C], eax
		mov	[esp+6Ch+var_60], 4
		mov	[esp+6Ch+var_64], 7
		mov	edx, [esp+6Ch+var_40]
		mov	[esp+6Ch+var_68], edx
		mov	[esp+6Ch+var_6C], esi
		call	flap_connection_send_snac
		mov	[esp+6Ch+var_6C], ebx
		call	sub_688817E4
		mov	eax, [esp+6Ch+var_20]
		xor	eax, ds:__stack_chk_guard
		jnz	short loc_688845C0
		add	esp, 5Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_688845C0:				; CODE XREF: aim_admin_setemail+E2j
		call	__stack_chk_fail
aim_admin_setemail endp

; ---------------------------------------------------------------------------
		align 4
; Exported entry   9. aim_admin_reqconfirm

; =============== S U B	R O U T	I N E =======================================


		public aim_admin_reqconfirm
aim_admin_reqconfirm proc near		; CODE XREF: sub_68899568+3Bp
					; .text:6889EDA3p

var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_10		= dword	ptr -10h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		sub	esp, 2Ch
		mov	eax, ds:__stack_chk_guard
		mov	[esp+2Ch+var_10], eax
		xor	eax, eax
		mov	[esp+2Ch+var_20], 6
		mov	[esp+2Ch+var_24], 7
		mov	eax, [esp+2Ch+arg_4]
		mov	[esp+2Ch+var_28], eax
		mov	eax, [esp+2Ch+arg_0]
		mov	[esp+2Ch+var_2C], eax
		call	aim_genericreq_n
		mov	eax, [esp+2Ch+var_10]
		xor	eax, ds:__stack_chk_guard
		jnz	short loc_6888460A
		add	esp, 2Ch
		retn
; ---------------------------------------------------------------------------

loc_6888460A:				; CODE XREF: aim_admin_reqconfirm+3Cj
		call	__stack_chk_fail
aim_admin_reqconfirm endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry   2. admin_modfirst

; =============== S U B	R O U T	I N E =======================================


		public admin_modfirst
admin_modfirst	proc near		; DATA XREF: oscar_data_new+D2o

Dest		= dword	ptr -2Ch
Source		= dword	ptr -28h
Count		= dword	ptr -24h
var_10		= dword	ptr -10h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	ebx
		sub	esp, 28h
		mov	ebx, [esp+2Ch+arg_4]
		mov	eax, ds:__stack_chk_guard
		mov	[esp+2Ch+var_10], eax
		xor	eax, eax
		mov	word ptr [ebx],	7
		mov	word ptr [ebx+2], 1
		mov	word ptr [ebx+4], 10h
		mov	word ptr [ebx+6], 629h
		mov	word ptr [ebx+8], 0
		mov	[esp+2Ch+Count], 11h ; Count
		mov	[esp+2Ch+Source], offset Source	; "admin"
		lea	eax, [ebx+0Ah]
		mov	[esp+2Ch+Dest],	eax ; Dest
		call	strncpy
		mov	dword ptr [ebx+1Ch], offset sub_68883F44
		xor	eax, eax
		mov	edx, [esp+2Ch+var_10]
		xor	edx, ds:__stack_chk_guard
		jnz	short loc_68884675
		add	esp, 28h
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_68884675:				; CODE XREF: admin_modfirst+5Ej
		call	__stack_chk_fail
; ---------------------------------------------------------------------------
		align 4

loc_6888467C:				; DATA XREF: email_modfirst+52o
		push	esi
		push	ebx
		sub	esp, 24h
		mov	esi, [esp+2Ch+arg_0]
		mov	eax, ds:__stack_chk_guard
		mov	[esp+2Ch+var_10], eax
		xor	eax, eax
		mov	ebx, [esi+0C0h]
		test	ebx, ebx
		jz	short loc_688846E2
		xchg	ax, ax

loc_6888469C:				; CODE XREF: admin_modfirst+D0j
		mov	eax, [ebx+18h]
		mov	[esi+0C0h], eax
		mov	eax, [ebx]
		mov	[esp+2Ch+Dest],	eax
		call	g_free
		mov	eax, [ebx+4]
		mov	[esp+2Ch+Dest],	eax
		call	g_free
		mov	eax, [ebx+8]
		mov	[esp+2Ch+Dest],	eax
		call	g_free
		mov	eax, [ebx+10h]
		mov	[esp+2Ch+Dest],	eax
		call	g_free
		mov	[esp+2Ch+Dest],	ebx
		call	g_free
		mov	ebx, [esi+0C0h]
		test	ebx, ebx
		jnz	short loc_6888469C

loc_688846E2:				; CODE XREF: admin_modfirst+88j
		mov	eax, [esp+2Ch+var_10]
		xor	eax, ds:__stack_chk_guard
		jnz	short loc_688846F4
		add	esp, 24h
		pop	ebx
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_688846F4:				; CODE XREF: admin_modfirst+DCj
		call	__stack_chk_fail
admin_modfirst	endp

; ---------------------------------------------------------------------------
		align 4

; =============== S U B	R O U T	I N E =======================================


sub_688846FC	proc near		; DATA XREF: email_modfirst+4Bo

Buf1		= dword	ptr -6Ch
Buf2		= dword	ptr -68h
Size		= dword	ptr -64h
var_60		= dword	ptr -60h
var_5C		= dword	ptr -5Ch
var_58		= dword	ptr -58h
var_54		= dword	ptr -54h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_20		= dword	ptr -20h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 5Ch
		mov	edx, [esp+6Ch+arg_0]
		mov	[esp+6Ch+var_40], edx
		mov	edx, [esp+6Ch+arg_4]
		mov	[esp+6Ch+var_3C], edx
		mov	edx, [esp+6Ch+arg_C]
		mov	[esp+6Ch+var_38], edx
		mov	ebx, [esp+6Ch+arg_10]
		mov	ebp, [esp+6Ch+arg_14]
		mov	eax, ds:__stack_chk_guard
		mov	[esp+6Ch+var_20], eax
		xor	eax, eax
		cmp	word ptr [ebx+2], 7
		jz	short loc_68884758
		xor	eax, eax

loc_6888473D:				; CODE XREF: sub_688846FC+278j
		mov	edx, [esp+6Ch+var_20]
		xor	edx, ds:__stack_chk_guard
		jnz	loc_688849C3
		add	esp, 5Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 4

loc_68884758:				; CODE XREF: sub_688846FC+3Dj
		mov	[esp+6Ch+Buf2],	8
		mov	[esp+6Ch+Buf1],	ebp
		call	sub_68881CAC
		mov	[esp+6Ch+var_34], eax
		mov	[esp+6Ch+Buf2],	10h
		mov	[esp+6Ch+Buf1],	ebp
		call	sub_68881CAC
		mov	esi, eax
		mov	edx, [esp+6Ch+var_40]
		mov	edi, [edx+0C0h]
		test	edi, edi
		jnz	short loc_6888479F
		jmp	loc_6888497C
; ---------------------------------------------------------------------------
		align 4

loc_68884794:				; CODE XREF: sub_688846FC+BBj
		mov	edi, [edi+18h]
		test	edi, edi
		jz	loc_6888497C

loc_6888479F:				; CODE XREF: sub_688846FC+8Ej
		mov	[esp+6Ch+Size],	10h ; Size
		mov	eax, [edi]
		mov	[esp+6Ch+Buf2],	eax ; Buf2
		mov	[esp+6Ch+Buf1],	esi ; Buf1
		call	memcmp
		test	eax, eax
		jnz	short loc_68884794
		mov	eax, [edi+4]
		mov	[esp+6Ch+Buf1],	eax
		call	g_free
		mov	eax, [edi]
		mov	[esp+6Ch+Buf1],	eax
		call	g_free
		mov	eax, [edi+8]
		mov	[esp+6Ch+Buf1],	eax
		call	g_free
		mov	eax, [edi+10h]
		mov	[esp+6Ch+Buf1],	eax
		call	g_free

loc_688847E4:				; CODE XREF: sub_688846FC+2A1j
		mov	eax, [esp+6Ch+var_34]
		mov	[edi+4], eax
		mov	[edi], esi
		mov	[esp+6Ch+Buf1],	ebp
		call	sub_688819F0
		movzx	eax, ax
		mov	[esp+6Ch+Buf2],	eax
		mov	[esp+6Ch+Buf1],	ebp
		call	aim_tlvlist_readnum
		mov	esi, eax
		mov	[esp+6Ch+Size],	1
		mov	[esp+6Ch+Buf2],	80h
		mov	[esp+6Ch+Buf1],	eax
		call	aim_tlv_get16
		movzx	ecx, ax
		test	ecx, ecx
		jz	loc_688849A4
		movzx	ebp, word ptr [edi+0Ch]
		xor	edx, edx
		cmp	ecx, ebp
		setnle	dl
		mov	[esp+6Ch+var_30], edx
		mov	[edi+0Ch], ax

loc_6888483C:				; CODE XREF: sub_688846FC+2B4j
		mov	[esp+6Ch+Size],	1
		mov	[esp+6Ch+Buf2],	7
		mov	[esp+6Ch+Buf1],	esi
		call	aim_tlv_getstr
		mov	[edi+8], eax
		mov	[esp+6Ch+Size],	1
		mov	[esp+6Ch+Buf2],	81h
		mov	[esp+6Ch+Buf1],	esi
		call	aim_tlv_get8
		mov	[edi+0Eh], al
		test	al, al
		jnz	short loc_68884884
		mov	word ptr [edi+0Ch], 0
		mov	[esp+6Ch+var_30], 0

loc_68884884:				; CODE XREF: sub_688846FC+178j
		mov	[esp+6Ch+Size],	1
		mov	[esp+6Ch+Buf2],	82h
		mov	[esp+6Ch+Buf1],	esi
		call	aim_tlv_getstr
		mov	[edi+10h], eax
		mov	[esp+6Ch+Size],	1
		mov	[esp+6Ch+Buf2],	84h
		mov	[esp+6Ch+Buf1],	esi
		call	aim_tlv_get16
		mov	[edi+14h], ax
		mov	[esp+6Ch+Size],	1
		mov	[esp+6Ch+Buf2],	5
		mov	[esp+6Ch+Buf1],	esi
		call	aim_tlv_getstr
		mov	[esp+6Ch+var_34], eax
		mov	[esp+6Ch+Size],	1
		mov	[esp+6Ch+Buf2],	0Dh
		mov	[esp+6Ch+Buf1],	esi
		call	aim_tlv_getstr
		mov	ebp, eax
		movzx	eax, word ptr [ebx+2]
		mov	[esp+6Ch+Size],	eax
		movzx	eax, word ptr [ebx]
		mov	[esp+6Ch+Buf2],	eax
		mov	edx, [esp+6Ch+var_40]
		mov	[esp+6Ch+Buf1],	edx
		call	aim_callhandler
		test	eax, eax
		jz	loc_688849BF
		test	ebp, ebp
		jz	loc_688849B8
		lea	ecx, [ebp+2]

loc_6888491F:				; CODE XREF: sub_688846FC+2BEj
		mov	[esp+6Ch+var_54], ecx
		mov	edx, [esp+6Ch+var_34]
		mov	[esp+6Ch+var_58], edx
		mov	edx, [esp+6Ch+var_30]
		mov	[esp+6Ch+var_5C], edx
		mov	[esp+6Ch+var_60], edi
		mov	edx, [esp+6Ch+var_38]
		mov	[esp+6Ch+Size],	edx
		mov	edx, [esp+6Ch+var_3C]
		mov	[esp+6Ch+Buf2],	edx
		mov	edx, [esp+6Ch+var_40]
		mov	[esp+6Ch+Buf1],	edx
		call	eax

loc_68884950:				; CODE XREF: sub_688846FC+2C5j
		mov	[esp+6Ch+Buf1],	esi
		mov	[esp+6Ch+var_44], eax
		call	aim_tlvlist_free
		mov	edx, [esp+6Ch+var_34]
		mov	[esp+6Ch+Buf1],	edx
		call	g_free
		mov	[esp+6Ch+Buf1],	ebp
		call	g_free
		mov	eax, [esp+6Ch+var_44]
		jmp	loc_6888473D
; ---------------------------------------------------------------------------
		align 4

loc_6888497C:				; CODE XREF: sub_688846FC+90j
					; sub_688846FC+9Dj
		mov	[esp+6Ch+Buf1],	1Ch
		call	g_malloc0
		mov	edi, eax
		mov	edx, [esp+6Ch+var_40]
		mov	eax, [edx+0C0h]
		mov	[edi+18h], eax
		mov	[edx+0C0h], edi
		jmp	loc_688847E4
; ---------------------------------------------------------------------------
		align 4

loc_688849A4:				; CODE XREF: sub_688846FC+127j
		inc	word ptr [edi+0Ch]
		mov	[esp+6Ch+var_30], 1
		jmp	loc_6888483C
; ---------------------------------------------------------------------------
		align 4

loc_688849B8:				; CODE XREF: sub_688846FC+21Aj
		xor	ecx, ecx
		jmp	loc_6888491F
; ---------------------------------------------------------------------------

loc_688849BF:				; CODE XREF: sub_688846FC+212j
		xor	eax, eax
		jmp	short loc_68884950
; ---------------------------------------------------------------------------

loc_688849C3:				; CODE XREF: sub_688846FC+4Bj
		call	__stack_chk_fail
sub_688846FC	endp

; Exported entry  29. aim_email_sendcookies

; =============== S U B	R O U T	I N E =======================================


		public aim_email_sendcookies
aim_email_sendcookies proc near		; CODE XREF: .text:6889ED33p

var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_1C		= byte ptr -1Ch
var_10		= dword	ptr -10h
arg_0		= dword	ptr  4

		push	edi
		push	esi
		push	ebx
		sub	esp, 30h
		mov	esi, [esp+3Ch+arg_0]
		mov	eax, ds:__stack_chk_guard
		mov	[esp+3Ch+var_10], eax
		xor	eax, eax
		test	esi, esi
		jz	loc_68884B94
		mov	[esp+3Ch+var_38], 18h
		mov	[esp+3Ch+var_3C], esi
		call	flap_connection_findbygroup
		mov	edi, eax
		test	eax, eax
		jz	loc_68884B94
		mov	[esp+3Ch+var_38], 22h
		lea	ebx, [esp+3Ch+var_1C]
		mov	[esp+3Ch+var_3C], ebx
		call	sub_68881748
		mov	[esp+3Ch+var_38], 2
		mov	[esp+3Ch+var_3C], ebx
		call	sub_68881E0C
		mov	[esp+3Ch+var_38], 5D5Eh
		mov	[esp+3Ch+var_3C], ebx
		call	sub_68881E0C
		mov	[esp+3Ch+var_38], 1708h
		mov	[esp+3Ch+var_3C], ebx
		call	sub_68881E0C
		mov	[esp+3Ch+var_38], 55AAh
		mov	[esp+3Ch+var_3C], ebx
		call	sub_68881E0C
		mov	[esp+3Ch+var_38], 11D3h
		mov	[esp+3Ch+var_3C], ebx
		call	sub_68881E0C
		mov	[esp+3Ch+var_38], 0B143h
		mov	[esp+3Ch+var_3C], ebx
		call	sub_68881E0C
		mov	[esp+3Ch+var_38], 60h
		mov	[esp+3Ch+var_3C], ebx
		call	sub_68881E0C
		mov	[esp+3Ch+var_38], 0B0FBh
		mov	[esp+3Ch+var_3C], ebx
		call	sub_68881E0C
		mov	[esp+3Ch+var_38], 1ECBh
		mov	[esp+3Ch+var_3C], ebx
		call	sub_68881E0C
		mov	[esp+3Ch+var_38], 0B380h
		mov	[esp+3Ch+var_3C], ebx
		call	sub_68881E0C
		mov	[esp+3Ch+var_38], 9AD8h
		mov	[esp+3Ch+var_3C], ebx
		call	sub_68881E0C
		mov	[esp+3Ch+var_38], 0DBAh
		mov	[esp+3Ch+var_3C], ebx
		call	sub_68881E0C
		mov	[esp+3Ch+var_38], 11D5h
		mov	[esp+3Ch+var_3C], ebx
		call	sub_68881E0C
		mov	[esp+3Ch+var_38], 9F8Ah
		mov	[esp+3Ch+var_3C], ebx
		call	sub_68881E0C
		mov	[esp+3Ch+var_38], 60h
		mov	[esp+3Ch+var_3C], ebx
		call	sub_68881E0C
		mov	[esp+3Ch+var_38], 0B0EEh
		mov	[esp+3Ch+var_3C], ebx
		call	sub_68881E0C
		mov	[esp+3Ch+var_38], 631h
		mov	[esp+3Ch+var_3C], ebx
		call	sub_68881E0C
		mov	[esp+3Ch+var_28], 0
		mov	[esp+3Ch+var_2C], 0
		mov	[esp+3Ch+var_30], 0
		mov	[esp+3Ch+var_34], 6
		mov	[esp+3Ch+var_38], 18h
		mov	[esp+3Ch+var_3C], esi
		call	aim_cachesnac
		mov	[esp+3Ch+var_28], ebx
		mov	[esp+3Ch+var_2C], eax
		mov	[esp+3Ch+var_30], 6
		mov	[esp+3Ch+var_34], 18h
		mov	[esp+3Ch+var_38], edi
		mov	[esp+3Ch+var_3C], esi
		call	flap_connection_send_snac
		mov	[esp+3Ch+var_3C], ebx
		call	sub_688817E4
		xor	eax, eax

loc_68884B81:				; CODE XREF: aim_email_sendcookies+1D1j
		mov	edx, [esp+3Ch+var_10]
		xor	edx, ds:__stack_chk_guard
		jnz	short loc_68884B9B
		add	esp, 30h
		pop	ebx
		pop	esi
		pop	edi
		retn
; ---------------------------------------------------------------------------

loc_68884B94:				; CODE XREF: aim_email_sendcookies+17j
					; aim_email_sendcookies+31j
		mov	eax, 0FFFFFFEAh
		jmp	short loc_68884B81
; ---------------------------------------------------------------------------

loc_68884B9B:				; CODE XREF: aim_email_sendcookies+1C3j
		call	__stack_chk_fail
aim_email_sendcookies endp

; Exported entry  28. aim_email_activate

; =============== S U B	R O U T	I N E =======================================


		public aim_email_activate
aim_email_activate proc	near		; CODE XREF: .text:6889ED3Bp

var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_1C		= byte ptr -1Ch
var_10		= dword	ptr -10h
arg_0		= dword	ptr  4

		push	edi
		push	esi
		push	ebx
		sub	esp, 30h
		mov	esi, [esp+3Ch+arg_0]
		mov	eax, ds:__stack_chk_guard
		mov	[esp+3Ch+var_10], eax
		xor	eax, eax
		test	esi, esi
		jz	loc_68884CAC
		mov	[esp+3Ch+var_38], 18h
		mov	[esp+3Ch+var_3C], esi
		call	flap_connection_findbygroup
		mov	edi, eax
		test	eax, eax
		jz	loc_68884CAC
		mov	[esp+3Ch+var_38], 11h
		lea	ebx, [esp+3Ch+var_1C]
		mov	[esp+3Ch+var_3C], ebx
		call	sub_68881748
		mov	[esp+3Ch+var_38], 2
		mov	[esp+3Ch+var_3C], ebx
		call	sub_68881DA4
		mov	[esp+3Ch+var_38], 4000000h
		mov	[esp+3Ch+var_3C], ebx
		call	sub_68881E8C
		mov	[esp+3Ch+var_38], 4000000h
		mov	[esp+3Ch+var_3C], ebx
		call	sub_68881E8C
		mov	[esp+3Ch+var_38], 4000000h
		mov	[esp+3Ch+var_3C], ebx
		call	sub_68881E8C
		mov	[esp+3Ch+var_38], 0
		mov	[esp+3Ch+var_3C], ebx
		call	sub_68881E8C
		mov	[esp+3Ch+var_28], 0
		mov	[esp+3Ch+var_2C], 0
		mov	[esp+3Ch+var_30], 0
		mov	[esp+3Ch+var_34], 16h
		mov	[esp+3Ch+var_38], 18h
		mov	[esp+3Ch+var_3C], esi
		call	aim_cachesnac
		mov	[esp+3Ch+var_28], ebx
		mov	[esp+3Ch+var_2C], eax
		mov	[esp+3Ch+var_30], 6
		mov	[esp+3Ch+var_34], 18h
		mov	[esp+3Ch+var_38], edi
		mov	[esp+3Ch+var_3C], esi
		call	flap_connection_send_snac
		mov	[esp+3Ch+var_3C], ebx
		call	sub_688817E4
		xor	eax, eax

loc_68884C99:				; CODE XREF: aim_email_activate+111j
		mov	edx, [esp+3Ch+var_10]
		xor	edx, ds:__stack_chk_guard
		jnz	short loc_68884CB3
		add	esp, 30h
		pop	ebx
		pop	esi
		pop	edi
		retn
; ---------------------------------------------------------------------------

loc_68884CAC:				; CODE XREF: aim_email_activate+17j
					; aim_email_activate+31j
		mov	eax, 0FFFFFFEAh
		jmp	short loc_68884C99
; ---------------------------------------------------------------------------

loc_68884CB3:				; CODE XREF: aim_email_activate+103j
		call	__stack_chk_fail
aim_email_activate endp

; Exported entry 182. email_modfirst

; =============== S U B	R O U T	I N E =======================================


		public email_modfirst
email_modfirst	proc near		; DATA XREF: oscar_data_new+182o

Dest		= dword	ptr -2Ch
Source		= dword	ptr -28h
Count		= dword	ptr -24h
var_10		= dword	ptr -10h
arg_4		= dword	ptr  8

		push	ebx
		sub	esp, 28h
		mov	ebx, [esp+2Ch+arg_4]
		mov	eax, ds:__stack_chk_guard
		mov	[esp+2Ch+var_10], eax
		xor	eax, eax
		mov	word ptr [ebx],	18h
		mov	word ptr [ebx+2], 1
		mov	word ptr [ebx+4], 10h
		mov	word ptr [ebx+6], 629h
		mov	word ptr [ebx+8], 0
		mov	[esp+2Ch+Count], 11h ; Count
		mov	[esp+2Ch+Source], offset aAlert	; "alert"
		lea	eax, [ebx+0Ah]
		mov	[esp+2Ch+Dest],	eax ; Dest
		call	strncpy
		mov	dword ptr [ebx+1Ch], offset sub_688846FC
		mov	dword ptr [ebx+20h], offset loc_6888467C
		xor	eax, eax
		mov	edx, [esp+2Ch+var_10]
		xor	edx, ds:__stack_chk_guard
		jnz	short loc_68884D24
		add	esp, 28h
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_68884D24:				; CODE XREF: email_modfirst+65j
		call	__stack_chk_fail
email_modfirst	endp

; ---------------------------------------------------------------------------
		align 4

; =============== S U B	R O U T	I N E =======================================


sub_68884D2C	proc near		; DATA XREF: auth_modfirst+46o

var_2C		= dword	ptr -2Ch
var_10		= dword	ptr -10h
arg_0		= dword	ptr  4

		push	ebx
		sub	esp, 28h
		mov	ebx, [esp+2Ch+arg_0]
		mov	eax, ds:__stack_chk_guard
		mov	[esp+2Ch+var_10], eax
		xor	eax, eax
		mov	eax, [ebx+0BCh]
		test	eax, eax
		jz	loc_68884E20
		mov	eax, [eax]
		mov	[esp+2Ch+var_2C], eax
		call	g_free
		mov	eax, [ebx+0BCh]
		mov	eax, [eax+14h]
		mov	[esp+2Ch+var_2C], eax
		call	g_free
		mov	eax, [ebx+0BCh]
		mov	eax, [eax+8]
		mov	[esp+2Ch+var_2C], eax
		call	g_free
		mov	eax, [ebx+0BCh]
		mov	eax, [eax+10h]
		mov	[esp+2Ch+var_2C], eax
		call	g_free
		mov	eax, [ebx+0BCh]
		mov	eax, [eax+20h]
		mov	[esp+2Ch+var_2C], eax
		call	g_free
		mov	eax, [ebx+0BCh]
		mov	eax, [eax+24h]
		mov	[esp+2Ch+var_2C], eax
		call	g_free
		mov	eax, [ebx+0BCh]
		mov	eax, [eax+2Ch]
		mov	[esp+2Ch+var_2C], eax
		call	g_free
		mov	eax, [ebx+0BCh]
		mov	eax, [eax+30h]
		mov	[esp+2Ch+var_2C], eax
		call	g_free
		mov	eax, [ebx+0BCh]
		mov	eax, [eax+34h]
		mov	[esp+2Ch+var_2C], eax
		call	g_free
		mov	eax, [ebx+0BCh]
		mov	eax, [eax+3Ch]
		mov	[esp+2Ch+var_2C], eax
		call	g_free
		mov	eax, [ebx+0BCh]
		mov	eax, [eax+40h]
		mov	[esp+2Ch+var_2C], eax
		call	g_free
		mov	eax, [esp+2Ch+var_10]
		xor	eax, ds:__stack_chk_guard
		jnz	short loc_68884E31
		mov	eax, [ebx+0BCh]
		mov	[esp+2Ch+arg_0], eax
		add	esp, 28h
		pop	ebx
		jmp	g_free
; ---------------------------------------------------------------------------

loc_68884E20:				; CODE XREF: sub_68884D2C+1Bj
		mov	eax, [esp+2Ch+var_10]
		xor	eax, ds:__stack_chk_guard
		jnz	short loc_68884E31
		add	esp, 28h
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_68884E31:				; CODE XREF: sub_68884D2C+DFj
					; sub_68884D2C+FEj
		call	__stack_chk_fail
sub_68884D2C	endp

; ---------------------------------------------------------------------------
		align 4

; =============== S U B	R O U T	I N E =======================================


sub_68884E38	proc near		; DATA XREF: auth_modfirst+3Fo

var_5C		= dword	ptr -5Ch
var_58		= dword	ptr -58h
var_54		= dword	ptr -54h
var_50		= dword	ptr -50h
var_4C		= dword	ptr -4Ch
var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_20		= dword	ptr -20h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 4Ch
		mov	edi, [esp+5Ch+arg_0]
		mov	edx, [esp+5Ch+arg_4]
		mov	[esp+5Ch+var_38], edx
		mov	edx, [esp+5Ch+arg_C]
		mov	[esp+5Ch+var_34], edx
		mov	esi, [esp+5Ch+arg_10]
		mov	ebx, [esp+5Ch+arg_14]
		mov	eax, ds:__stack_chk_guard
		mov	[esp+5Ch+var_20], eax
		xor	eax, eax
		mov	ax, [esi+2]
		cmp	ax, 3
		jz	short loc_68884EE4
		cmp	ax, 7
		jz	loc_688852E0
		cmp	ax, 0Ah
		jz	short loc_68884E9C

loc_68884E80:				; CODE XREF: sub_68884E38+7Dj
		xor	eax, eax

loc_68884E82:				; CODE XREF: sub_68884E38+4A2j
					; sub_68884E38+542j
		mov	edx, [esp+5Ch+var_20]
		xor	edx, ds:__stack_chk_guard
		jnz	loc_6888538E
		add	esp, 4Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 4

loc_68884E9C:				; CODE XREF: sub_68884E38+46j
		mov	[esp+5Ch+var_54], 0Ah
		movzx	eax, word ptr [esi]
		mov	[esp+5Ch+var_58], eax
		mov	[esp+5Ch+var_5C], edi
		call	aim_callhandler
		test	eax, eax
		jz	short loc_68884E80
		mov	edx, [esp+5Ch+var_20]
		xor	edx, ds:__stack_chk_guard
		jnz	loc_6888538E
		mov	edx, [esp+5Ch+var_34]
		mov	[esp+5Ch+arg_8], edx
		mov	edx, [esp+5Ch+var_38]
		mov	[esp+5Ch+arg_4], edx
		mov	[esp+5Ch+arg_0], edi
		add	esp, 4Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		jmp	eax
; ---------------------------------------------------------------------------

loc_68884EE4:				; CODE XREF: sub_68884E38+36j
		mov	[esp+5Ch+var_5C], 44h
		call	g_malloc0
		mov	ebp, eax
		mov	[esp+5Ch+var_5C], ebx
		call	aim_tlvlist_read
		mov	ebx, eax
		mov	[esp+5Ch+var_54], 1
		mov	[esp+5Ch+var_58], 1
		mov	[esp+5Ch+var_5C], eax
		call	aim_tlv_gettlv
		test	eax, eax
		jz	short loc_68884F42
		mov	[esp+5Ch+var_54], 1
		mov	[esp+5Ch+var_58], 1
		mov	[esp+5Ch+var_5C], ebx
		call	aim_tlv_getstr
		mov	[ebp+0], eax
		mov	[esp+5Ch+var_58], eax
		mov	eax, [edi+68h]
		mov	[esp+5Ch+var_5C], eax
		call	purple_connection_set_display_name

loc_68884F42:				; CODE XREF: sub_68884E38+DEj
		mov	[esp+5Ch+var_54], 1
		mov	[esp+5Ch+var_58], 8
		mov	[esp+5Ch+var_5C], ebx
		call	aim_tlv_gettlv
		test	eax, eax
		jz	short loc_68884F7A
		mov	[esp+5Ch+var_54], 1
		mov	[esp+5Ch+var_58], 8
		mov	[esp+5Ch+var_5C], ebx
		call	aim_tlv_get16
		mov	[ebp+4], ax

loc_68884F7A:				; CODE XREF: sub_68884E38+124j
		mov	[esp+5Ch+var_54], 1
		mov	[esp+5Ch+var_58], 4
		mov	[esp+5Ch+var_5C], ebx
		call	aim_tlv_gettlv
		test	eax, eax
		jz	short loc_68884FB1
		mov	[esp+5Ch+var_54], 1
		mov	[esp+5Ch+var_58], 4
		mov	[esp+5Ch+var_5C], ebx
		call	aim_tlv_getstr
		mov	[ebp+8], eax

loc_68884FB1:				; CODE XREF: sub_68884E38+15Cj
		mov	[esp+5Ch+var_54], 1
		mov	[esp+5Ch+var_58], 5
		mov	[esp+5Ch+var_5C], ebx
		call	aim_tlv_gettlv
		test	eax, eax
		jz	short loc_68884FE8
		mov	[esp+5Ch+var_54], 1
		mov	[esp+5Ch+var_58], 5
		mov	[esp+5Ch+var_5C], ebx
		call	aim_tlv_getstr
		mov	[ebp+14h], eax

loc_68884FE8:				; CODE XREF: sub_68884E38+193j
		mov	[esp+5Ch+var_54], 1
		mov	[esp+5Ch+var_58], 6
		mov	[esp+5Ch+var_5C], ebx
		call	aim_tlv_gettlv
		test	eax, eax
		jz	short loc_6888502E
		mov	[esp+5Ch+var_54], 1
		mov	[esp+5Ch+var_58], 6
		mov	[esp+5Ch+var_5C], ebx
		call	aim_tlv_gettlv
		test	eax, eax
		jz	short loc_6888502E
		mov	dx, [eax+2]
		mov	[ebp+18h], dx
		mov	eax, [eax+4]
		mov	[ebp+1Ch], eax

loc_6888502E:				; CODE XREF: sub_68884E38+1CAj
					; sub_68884E38+1E6j
		mov	[esp+5Ch+var_54], 1
		mov	[esp+5Ch+var_58], 11h
		mov	[esp+5Ch+var_5C], ebx
		call	aim_tlv_gettlv
		test	eax, eax
		jz	short loc_68885065
		mov	[esp+5Ch+var_54], 1
		mov	[esp+5Ch+var_58], 11h
		mov	[esp+5Ch+var_5C], ebx
		call	aim_tlv_getstr
		mov	[ebp+10h], eax

loc_68885065:				; CODE XREF: sub_68884E38+210j
		mov	[esp+5Ch+var_54], 1
		mov	[esp+5Ch+var_58], 13h
		mov	[esp+5Ch+var_5C], ebx
		call	aim_tlv_gettlv
		test	eax, eax
		jz	short loc_6888509D
		mov	[esp+5Ch+var_54], 1
		mov	[esp+5Ch+var_58], 13h
		mov	[esp+5Ch+var_5C], ebx
		call	aim_tlv_get16
		mov	[ebp+0Ch], ax

loc_6888509D:				; CODE XREF: sub_68884E38+247j
		mov	[esp+5Ch+var_54], 1
		mov	[esp+5Ch+var_58], 40h
		mov	[esp+5Ch+var_5C], ebx
		call	aim_tlv_gettlv
		test	eax, eax
		jz	short loc_688850D4
		mov	[esp+5Ch+var_54], 1
		mov	[esp+5Ch+var_58], 40h
		mov	[esp+5Ch+var_5C], ebx
		call	aim_tlv_get32
		mov	[ebp+38h], eax

loc_688850D4:				; CODE XREF: sub_68884E38+27Fj
		mov	[esp+5Ch+var_54], 1
		mov	[esp+5Ch+var_58], 41h
		mov	[esp+5Ch+var_5C], ebx
		call	aim_tlv_gettlv
		test	eax, eax
		jz	short loc_6888510B
		mov	[esp+5Ch+var_54], 1
		mov	[esp+5Ch+var_58], 41h
		mov	[esp+5Ch+var_5C], ebx
		call	aim_tlv_getstr
		mov	[ebp+3Ch], eax

loc_6888510B:				; CODE XREF: sub_68884E38+2B6j
		mov	[esp+5Ch+var_54], 1
		mov	[esp+5Ch+var_58], 42h
		mov	[esp+5Ch+var_5C], ebx
		call	aim_tlv_gettlv
		test	eax, eax
		jz	short loc_68885142
		mov	[esp+5Ch+var_54], 1
		mov	[esp+5Ch+var_58], 42h
		mov	[esp+5Ch+var_5C], ebx
		call	aim_tlv_getstr
		mov	[ebp+40h], eax

loc_68885142:				; CODE XREF: sub_68884E38+2EDj
		mov	[esp+5Ch+var_54], 1
		mov	[esp+5Ch+var_58], 43h
		mov	[esp+5Ch+var_5C], ebx
		call	aim_tlv_gettlv
		test	eax, eax
		jz	short loc_68885179
		mov	[esp+5Ch+var_54], 1
		mov	[esp+5Ch+var_58], 43h
		mov	[esp+5Ch+var_5C], ebx
		call	aim_tlv_getstr
		mov	[ebp+34h], eax

loc_68885179:				; CODE XREF: sub_68884E38+324j
		mov	[esp+5Ch+var_54], 1
		mov	[esp+5Ch+var_58], 44h
		mov	[esp+5Ch+var_5C], ebx
		call	aim_tlv_gettlv
		test	eax, eax
		jz	short loc_688851B0
		mov	[esp+5Ch+var_54], 1
		mov	[esp+5Ch+var_58], 44h
		mov	[esp+5Ch+var_5C], ebx
		call	aim_tlv_get32
		mov	[ebp+28h], eax

loc_688851B0:				; CODE XREF: sub_68884E38+35Bj
		mov	[esp+5Ch+var_54], 1
		mov	[esp+5Ch+var_58], 45h
		mov	[esp+5Ch+var_5C], ebx
		call	aim_tlv_gettlv
		test	eax, eax
		jz	short loc_688851E7
		mov	[esp+5Ch+var_54], 1
		mov	[esp+5Ch+var_58], 45h
		mov	[esp+5Ch+var_5C], ebx
		call	aim_tlv_getstr
		mov	[ebp+2Ch], eax

loc_688851E7:				; CODE XREF: sub_68884E38+392j
		mov	[esp+5Ch+var_54], 1
		mov	[esp+5Ch+var_58], 46h
		mov	[esp+5Ch+var_5C], ebx
		call	aim_tlv_gettlv
		test	eax, eax
		jz	short loc_6888521E
		mov	[esp+5Ch+var_54], 1
		mov	[esp+5Ch+var_58], 46h
		mov	[esp+5Ch+var_5C], ebx
		call	aim_tlv_getstr
		mov	[ebp+30h], eax

loc_6888521E:				; CODE XREF: sub_68884E38+3C9j
		mov	[esp+5Ch+var_54], 1
		mov	[esp+5Ch+var_58], 47h
		mov	[esp+5Ch+var_5C], ebx
		call	aim_tlv_gettlv
		test	eax, eax
		jz	short loc_68885255
		mov	[esp+5Ch+var_54], 1
		mov	[esp+5Ch+var_58], 47h
		mov	[esp+5Ch+var_5C], ebx
		call	aim_tlv_getstr
		mov	[ebp+24h], eax

loc_68885255:				; CODE XREF: sub_68884E38+400j
		mov	[esp+5Ch+var_54], 1
		mov	[esp+5Ch+var_58], 54h
		mov	[esp+5Ch+var_5C], ebx
		call	aim_tlv_gettlv
		test	eax, eax
		jz	short loc_6888528C
		mov	[esp+5Ch+var_54], 1
		mov	[esp+5Ch+var_58], 54h
		mov	[esp+5Ch+var_5C], ebx
		call	aim_tlv_getstr
		mov	[ebp+20h], eax

loc_6888528C:				; CODE XREF: sub_68884E38+437j
		mov	[edi+0BCh], ebp
		movzx	eax, word ptr [esi+2]
		mov	[esp+5Ch+var_54], eax
		movzx	eax, word ptr [esi]
		mov	[esp+5Ch+var_58], eax
		mov	[esp+5Ch+var_5C], edi
		call	aim_callhandler
		test	eax, eax
		jz	loc_68885380
		mov	[esp+5Ch+var_50], ebp
		mov	edx, [esp+5Ch+var_34]
		mov	[esp+5Ch+var_54], edx
		mov	edx, [esp+5Ch+var_38]
		mov	[esp+5Ch+var_58], edx
		mov	[esp+5Ch+var_5C], edi
		call	eax

loc_688852CA:				; CODE XREF: sub_68884E38+54Aj
		mov	[esp+5Ch+var_5C], ebx
		mov	[esp+5Ch+var_3C], eax
		call	aim_tlvlist_free
		mov	eax, [esp+5Ch+var_3C]
		jmp	loc_68884E82
; ---------------------------------------------------------------------------
		align 10h

loc_688852E0:				; CODE XREF: sub_68884E38+3Cj
		mov	[esp+5Ch+var_5C], ebx
		call	sub_688819F0
		movzx	eax, ax
		mov	[esp+5Ch+var_58], eax
		mov	[esp+5Ch+var_5C], ebx
		call	sub_68881D24
		mov	ebp, eax
		mov	[esp+5Ch+var_5C], ebx
		call	aim_tlvlist_read
		mov	ebx, eax
		mov	[esp+5Ch+var_54], 1
		mov	[esp+5Ch+var_58], 26h
		mov	[esp+5Ch+var_5C], eax
		call	aim_tlv_gettlv
		xor	edx, edx
		test	eax, eax
		setnz	dl
		mov	[esp+5Ch+var_30], edx
		movzx	eax, word ptr [esi+2]
		mov	[esp+5Ch+var_54], eax
		movzx	eax, word ptr [esi]
		mov	[esp+5Ch+var_58], eax
		mov	[esp+5Ch+var_5C], edi
		call	aim_callhandler
		test	eax, eax
		jz	short loc_68885387
		mov	edx, [esp+5Ch+var_30]
		mov	[esp+5Ch+var_4C], edx
		mov	[esp+5Ch+var_50], ebp
		mov	edx, [esp+5Ch+var_34]
		mov	[esp+5Ch+var_54], edx
		mov	edx, [esp+5Ch+var_38]
		mov	[esp+5Ch+var_58], edx
		mov	[esp+5Ch+var_5C], edi
		call	eax

loc_68885362:				; CODE XREF: sub_68884E38+554j
		mov	[esp+5Ch+var_5C], ebp
		mov	[esp+5Ch+var_3C], eax
		call	g_free
		mov	[esp+5Ch+var_5C], ebx
		call	aim_tlvlist_free
		mov	eax, [esp+5Ch+var_3C]
		jmp	loc_68884E82
; ---------------------------------------------------------------------------
		align 10h

loc_68885380:				; CODE XREF: sub_68884E38+473j
		xor	eax, eax
		jmp	loc_688852CA
; ---------------------------------------------------------------------------

loc_68885387:				; CODE XREF: sub_68884E38+507j
		mov	eax, 1
		jmp	short loc_68885362
; ---------------------------------------------------------------------------

loc_6888538E:				; CODE XREF: sub_68884E38+54j
					; sub_68884E38+89j
		call	__stack_chk_fail
sub_68884E38	endp

; ---------------------------------------------------------------------------
		align 4
; Exported entry  70. aim_send_login

; =============== S U B	R O U T	I N E =======================================


		public aim_send_login
aim_send_login	proc near		; CODE XREF: sub_6889E310+E3p

var_9C		= dword	ptr -9Ch
var_98		= dword	ptr -98h
var_94		= dword	ptr -94h
var_90		= dword	ptr -90h
var_8C		= dword	ptr -8Ch
var_88		= dword	ptr -88h
var_74		= dword	ptr -74h
var_70		= dword	ptr -70h
var_6C		= dword	ptr -6Ch
var_68		= dword	ptr -68h
var_64		= dword	ptr -64h
var_60		= dword	ptr -60h
var_5C		= dword	ptr -5Ch
var_58		= dword	ptr -58h
var_54		= dword	ptr -54h
var_50		= dword	ptr -50h
var_44		= dword	ptr -44h
var_40		= byte ptr -40h
var_30		= byte ptr -30h
var_20		= dword	ptr -20h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h
arg_18		= dword	ptr  1Ch
arg_1C		= dword	ptr  20h

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 8Ch
		mov	edx, [esp+9Ch+arg_0]
		mov	[esp+9Ch+var_68], edx
		mov	edx, [esp+9Ch+arg_4]
		mov	[esp+9Ch+var_58], edx
		mov	ebp, [esp+9Ch+arg_8]
		mov	eax, [esp+9Ch+arg_C]
		mov	[esp+9Ch+var_6C], eax
		mov	edx, [esp+9Ch+arg_10]
		mov	[esp+9Ch+var_50], edx
		mov	esi, [esp+9Ch+arg_14]
		mov	eax, [esp+9Ch+arg_18]
		mov	[esp+9Ch+var_64], eax
		mov	edx, [esp+9Ch+arg_1C]
		mov	[esp+9Ch+var_54], edx
		mov	eax, ds:__stack_chk_guard
		mov	[esp+9Ch+var_20], eax
		xor	eax, eax
		mov	[esp+9Ch+var_44], 0
		test	esi, esi
		jz	loc_688857B8
		test	ebp, ebp
		jz	loc_688857B8
		mov	ecx, [esp+9Ch+var_6C]
		test	ecx, ecx
		jz	loc_688857B8
		mov	[esp+9Ch+var_94], 480h
		mov	[esp+9Ch+var_98], 2
		mov	edx, [esp+9Ch+var_68]
		mov	[esp+9Ch+var_9C], edx
		call	flap_frame_new
		mov	[esp+9Ch+var_60], eax
		mov	[esp+9Ch+var_88], 0
		mov	[esp+9Ch+var_8C], 0
		mov	[esp+9Ch+var_90], 0
		mov	[esp+9Ch+var_94], 2
		mov	[esp+9Ch+var_98], 17h
		mov	edx, [esp+9Ch+var_68]
		mov	[esp+9Ch+var_9C], edx
		call	aim_cachesnac
		mov	edx, [esp+9Ch+var_60]
		add	edx, 4
		mov	[esp+9Ch+var_5C], edx
		mov	[esp+9Ch+var_90], eax
		mov	[esp+9Ch+var_94], 2
		mov	[esp+9Ch+var_98], 17h
		mov	[esp+9Ch+var_9C], edx
		call	aim_putsnac
		mov	[esp+9Ch+var_94], ebp
		mov	[esp+9Ch+var_98], 1
		lea	ebx, [esp+9Ch+var_44]
		mov	[esp+9Ch+var_9C], ebx
		call	aim_tlvlist_add_str
		xor	eax, eax
		mov	ecx, 0FFFFFFFFh
		mov	edi, [esp+9Ch+var_6C]
		repne scasb
		not	ecx
		lea	edi, [ecx-1]
		mov	[esp+9Ch+var_9C], ebp
		call	oscar_util_valid_name_icq
		test	eax, eax
		jz	loc_68885768
		cmp	edi, 8
		jbe	loc_68885768

loc_688854DB:				; CODE XREF: aim_send_login+3E9j
		mov	edi, 8

loc_688854E0:				; CODE XREF: aim_send_login+3DAj
					; aim_send_login+3E3j
		mov	[esp+9Ch+var_9C], offset aMd5_1	; "md5"
		call	purple_ciphers_find_cipher
		mov	[esp+9Ch+var_98], 0
		mov	[esp+9Ch+var_9C], eax
		mov	[esp+9Ch+var_70], eax
		call	purple_cipher_context_new
		mov	ebp, eax
		mov	[esp+9Ch+var_94], edi
		mov	eax, [esp+9Ch+var_6C]
		mov	[esp+9Ch+var_98], eax
		mov	[esp+9Ch+var_9C], ebp
		call	purple_cipher_context_append
		mov	[esp+9Ch+var_90], 0
		lea	edx, [esp+9Ch+var_30]
		mov	[esp+9Ch+var_94], edx
		mov	[esp+9Ch+var_98], 10h
		mov	[esp+9Ch+var_9C], ebp
		mov	[esp+9Ch+var_74], edx
		call	purple_cipher_context_digest
		mov	[esp+9Ch+var_9C], ebp
		call	purple_cipher_context_destroy
		mov	[esp+9Ch+var_98], 0
		mov	ecx, [esp+9Ch+var_70]
		mov	[esp+9Ch+var_9C], ecx
		call	purple_cipher_context_new
		mov	ebp, eax
		xor	eax, eax
		mov	ecx, 0FFFFFFFFh
		mov	edi, [esp+9Ch+var_64]
		repne scasb
		not	ecx
		dec	ecx
		mov	[esp+9Ch+var_94], ecx
		mov	eax, [esp+9Ch+var_64]
		mov	[esp+9Ch+var_98], eax
		mov	[esp+9Ch+var_9C], ebp
		call	purple_cipher_context_append
		mov	[esp+9Ch+var_94], 10h
		mov	edx, [esp+9Ch+var_74]
		mov	[esp+9Ch+var_98], edx
		mov	[esp+9Ch+var_9C], ebp
		call	purple_cipher_context_append
		mov	[esp+9Ch+var_94], 1Ah
		mov	[esp+9Ch+var_98], offset aAolInstantMess ; "AOL	Instant	Messenger (SM)"
		mov	[esp+9Ch+var_9C], ebp
		call	purple_cipher_context_append
		mov	[esp+9Ch+var_90], 0
		lea	edi, [esp+9Ch+var_40]
		mov	[esp+9Ch+var_94], edi
		mov	[esp+9Ch+var_98], 10h
		mov	[esp+9Ch+var_9C], ebp
		call	purple_cipher_context_digest
		mov	[esp+9Ch+var_9C], ebp
		call	purple_cipher_context_destroy
		mov	edx, [esi+10h]
		mov	eax, [esp+9Ch+var_68]
		mov	eax, [eax+44h]
		test	eax, eax
		jnz	loc_68885784
		mov	eax, offset aPrplAimDistid ; "prpl-aim-distid"

loc_688855EB:				; CODE XREF: aim_send_login+3F5j
		mov	[esp+9Ch+var_98], edx
		mov	[esp+9Ch+var_9C], eax
		call	oscar_get_ui_info_int
		mov	ebp, eax
		mov	[esp+9Ch+var_90], edi
		mov	[esp+9Ch+var_94], 10h
		mov	[esp+9Ch+var_98], 25h
		mov	[esp+9Ch+var_9C], ebx
		call	aim_tlvlist_add_raw
		mov	[esp+9Ch+var_98], 4Ch
		mov	[esp+9Ch+var_9C], ebx
		call	aim_tlvlist_add_noval
		mov	eax, [esi]
		test	eax, eax
		jz	loc_68885790
		mov	[esp+9Ch+var_94], eax
		mov	[esp+9Ch+var_98], 3
		mov	[esp+9Ch+var_9C], ebx
		call	aim_tlvlist_add_str

loc_68885643:				; CODE XREF: aim_send_login+41Fj
		movzx	eax, word ptr [esi+4]
		mov	[esp+9Ch+var_94], eax
		mov	[esp+9Ch+var_98], 16h
		mov	[esp+9Ch+var_9C], ebx
		call	aim_tlvlist_add_16
		movzx	eax, word ptr [esi+6]
		mov	[esp+9Ch+var_94], eax
		mov	[esp+9Ch+var_98], 17h
		mov	[esp+9Ch+var_9C], ebx
		call	aim_tlvlist_add_16
		movzx	eax, word ptr [esi+8]
		mov	[esp+9Ch+var_94], eax
		mov	[esp+9Ch+var_98], 18h
		mov	[esp+9Ch+var_9C], ebx
		call	aim_tlvlist_add_16
		movzx	eax, word ptr [esi+0Ah]
		mov	[esp+9Ch+var_94], eax
		mov	[esp+9Ch+var_98], 19h
		mov	[esp+9Ch+var_9C], ebx
		call	aim_tlvlist_add_16
		movzx	eax, word ptr [esi+0Ch]
		mov	[esp+9Ch+var_94], eax
		mov	[esp+9Ch+var_98], 1Ah
		mov	[esp+9Ch+var_9C], ebx
		call	aim_tlvlist_add_16
		mov	[esp+9Ch+var_94], ebp
		mov	[esp+9Ch+var_98], 14h
		mov	[esp+9Ch+var_9C], ebx
		call	aim_tlvlist_add_32
		mov	eax, [esi+18h]
		mov	[esp+9Ch+var_94], eax
		mov	[esp+9Ch+var_98], 0Fh
		mov	[esp+9Ch+var_9C], ebx
		call	aim_tlvlist_add_str
		mov	eax, [esi+14h]
		mov	[esp+9Ch+var_94], eax
		mov	[esp+9Ch+var_98], 0Eh
		mov	[esp+9Ch+var_9C], ebx
		call	aim_tlvlist_add_str
		cmp	[esp+9Ch+var_54], 1
		sbb	eax, eax
		and	eax, 2
		inc	eax
		mov	[esp+9Ch+var_94], eax
		mov	[esp+9Ch+var_98], 4Ah
		mov	[esp+9Ch+var_9C], ebx
		call	aim_tlvlist_add_8
		mov	[esp+9Ch+var_98], ebx
		mov	edx, [esp+9Ch+var_5C]
		mov	[esp+9Ch+var_9C], edx
		call	aim_tlvlist_write
		mov	eax, [esp+9Ch+var_44]
		mov	[esp+9Ch+var_9C], eax
		call	aim_tlvlist_free
		mov	eax, [esp+9Ch+var_60]
		mov	[esp+9Ch+var_98], eax
		mov	edx, [esp+9Ch+var_58]
		mov	[esp+9Ch+var_9C], edx
		call	flap_connection_send
		xor	eax, eax

loc_6888574E:				; CODE XREF: aim_send_login+429j
		mov	edx, [esp+9Ch+var_20]
		xor	edx, ds:__stack_chk_guard
		jnz	short loc_688857BF
		add	esp, 8Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 4

loc_68885768:				; CODE XREF: aim_send_login+138j
					; aim_send_login+141j
		mov	edx, [esp+9Ch+var_50]
		test	edx, edx
		jz	loc_688854E0
		cmp	edi, 8
		jbe	loc_688854E0
		jmp	loc_688854DB
; ---------------------------------------------------------------------------
		align 4

loc_68885784:				; CODE XREF: aim_send_login+24Cj
		mov	eax, offset aPrplIcqDistid ; "prpl-icq-distid"
		jmp	loc_688855EB
; ---------------------------------------------------------------------------
		align 10h

loc_68885790:				; CODE XREF: aim_send_login+295j
		call	oscar_get_clientstring
		mov	edi, eax
		mov	[esp+9Ch+var_94], eax
		mov	[esp+9Ch+var_98], 3
		mov	[esp+9Ch+var_9C], ebx
		call	aim_tlvlist_add_str
		mov	[esp+9Ch+var_9C], edi
		call	g_free
		jmp	loc_68885643
; ---------------------------------------------------------------------------

loc_688857B8:				; CODE XREF: aim_send_login+6Fj
					; aim_send_login+77j ...
		mov	eax, 0FFFFFFEAh
		jmp	short loc_6888574E
; ---------------------------------------------------------------------------

loc_688857BF:				; CODE XREF: aim_send_login+3C4j
		call	__stack_chk_fail
aim_send_login	endp

; Exported entry  68. aim_request_login

; =============== S U B	R O U T	I N E =======================================


		public aim_request_login
aim_request_login proc near		; CODE XREF: sub_6889A890+1FBp

var_5C		= dword	ptr -5Ch
var_58		= dword	ptr -58h
var_54		= dword	ptr -54h
var_50		= dword	ptr -50h
var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_30		= dword	ptr -30h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 4Ch
		mov	ebx, [esp+5Ch+arg_0]
		mov	esi, [esp+5Ch+arg_4]
		mov	edx, [esp+5Ch+arg_8]
		mov	eax, ds:__stack_chk_guard
		mov	[esp+5Ch+var_20], eax
		xor	eax, eax
		mov	[esp+5Ch+var_24], 0
		test	ebx, ebx
		jz	loc_688858F0
		test	esi, esi
		jz	loc_688858F0
		test	edx, edx
		jz	loc_688858F0
		mov	ecx, 0FFFFFFFFh
		mov	edi, edx
		repne scasb
		not	ecx
		add	ecx, 15h
		mov	[esp+5Ch+var_54], ecx
		mov	[esp+5Ch+var_58], 2
		mov	[esp+5Ch+var_5C], ebx
		mov	[esp+5Ch+var_30], edx
		call	flap_frame_new
		mov	ebp, eax
		mov	[esp+5Ch+var_48], 0
		mov	[esp+5Ch+var_4C], 0
		mov	[esp+5Ch+var_50], 0
		mov	[esp+5Ch+var_54], 6
		mov	[esp+5Ch+var_58], 17h
		mov	[esp+5Ch+var_5C], ebx
		call	aim_cachesnac
		lea	edi, [ebp+4]
		mov	[esp+5Ch+var_50], eax
		mov	[esp+5Ch+var_54], 6
		mov	[esp+5Ch+var_58], 17h
		mov	[esp+5Ch+var_5C], edi
		call	aim_putsnac
		mov	edx, [esp+5Ch+var_30]
		mov	[esp+5Ch+var_54], edx
		mov	[esp+5Ch+var_58], 1
		lea	ebx, [esp+5Ch+var_24]
		mov	[esp+5Ch+var_5C], ebx
		call	aim_tlvlist_add_str
		mov	[esp+5Ch+var_58], 4Bh
		mov	[esp+5Ch+var_5C], ebx
		call	aim_tlvlist_add_noval
		mov	[esp+5Ch+var_58], 5Ah
		mov	[esp+5Ch+var_5C], ebx
		call	aim_tlvlist_add_noval
		mov	[esp+5Ch+var_58], ebx
		mov	[esp+5Ch+var_5C], edi
		call	aim_tlvlist_write
		mov	eax, [esp+5Ch+var_24]
		mov	[esp+5Ch+var_5C], eax
		call	aim_tlvlist_free
		mov	[esp+5Ch+var_58], ebp
		mov	[esp+5Ch+var_5C], esi
		call	flap_connection_send
		xor	eax, eax

loc_688858DB:				; CODE XREF: aim_request_login+131j
		mov	edx, [esp+5Ch+var_20]
		xor	edx, ds:__stack_chk_guard
		jnz	short loc_688858F7
		add	esp, 4Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_688858F0:				; CODE XREF: aim_request_login+28j
					; aim_request_login+30j ...
		mov	eax, 0FFFFFFEAh
		jmp	short loc_688858DB
; ---------------------------------------------------------------------------

loc_688858F7:				; CODE XREF: aim_request_login+121j
		call	__stack_chk_fail
aim_request_login endp

; Exported entry  12. aim_auth_securid_send

; =============== S U B	R O U T	I N E =======================================


		public aim_auth_securid_send
aim_auth_securid_send proc near		; CODE XREF: sub_6889E2CC+37j

var_5C		= dword	ptr -5Ch
var_58		= dword	ptr -58h
var_54		= dword	ptr -54h
var_50		= dword	ptr -50h
var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_30		= dword	ptr -30h
var_20		= dword	ptr -20h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 4Ch
		mov	ebx, [esp+5Ch+arg_0]
		mov	esi, [esp+5Ch+arg_4]
		mov	eax, ds:__stack_chk_guard
		mov	[esp+5Ch+var_20], eax
		xor	eax, eax
		test	ebx, ebx
		jz	loc_68885A00
		mov	[esp+5Ch+var_58], 17h
		mov	[esp+5Ch+var_5C], ebx
		call	flap_connection_getbytype_all
		mov	ebp, eax
		test	eax, eax
		jz	loc_68885A00
		test	esi, esi
		jz	loc_68885A00
		xor	eax, eax
		mov	ecx, 0FFFFFFFFh
		mov	edi, esi
		repne scasb
		not	ecx
		lea	edx, [ecx-1]
		mov	[esp+5Ch+var_30], edx
		add	ecx, 0Bh
		mov	[esp+5Ch+var_54], ecx
		mov	[esp+5Ch+var_58], 2
		mov	[esp+5Ch+var_5C], ebx
		call	flap_frame_new
		mov	edi, eax
		mov	[esp+5Ch+var_48], 0
		mov	[esp+5Ch+var_4C], 0
		mov	[esp+5Ch+var_50], 0
		mov	[esp+5Ch+var_54], 0Bh
		mov	[esp+5Ch+var_58], 17h
		mov	[esp+5Ch+var_5C], ebx
		call	aim_cachesnac
		lea	ebx, [edi+4]
		mov	[esp+5Ch+var_50], 0
		mov	[esp+5Ch+var_54], 0Bh
		mov	[esp+5Ch+var_58], 17h
		mov	[esp+5Ch+var_5C], ebx
		call	aim_putsnac
		movzx	eax, word ptr [esp+5Ch+var_30]
		mov	[esp+5Ch+var_58], eax
		mov	[esp+5Ch+var_5C], ebx
		call	sub_68881E0C
		mov	[esp+5Ch+var_58], esi
		mov	[esp+5Ch+var_5C], ebx
		call	sub_68882114
		mov	[esp+5Ch+var_58], edi
		mov	[esp+5Ch+var_5C], ebp
		call	flap_connection_send
		xor	eax, eax

loc_688859EB:				; CODE XREF: aim_auth_securid_send+109j
		mov	edx, [esp+5Ch+var_20]
		xor	edx, ds:__stack_chk_guard
		jnz	short loc_68885A07
		add	esp, 4Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_68885A00:				; CODE XREF: aim_auth_securid_send+1Cj
					; aim_auth_securid_send+36j ...
		mov	eax, 0FFFFFFEAh
		jmp	short loc_688859EB
; ---------------------------------------------------------------------------

loc_68885A07:				; CODE XREF: aim_auth_securid_send+F9j
		call	__stack_chk_fail
aim_auth_securid_send endp

; Exported entry 145. auth_modfirst

; =============== S U B	R O U T	I N E =======================================


		public auth_modfirst
auth_modfirst	proc near		; DATA XREF: oscar_data_new+172o

Dest		= dword	ptr -2Ch
Source		= dword	ptr -28h
Count		= dword	ptr -24h
var_10		= dword	ptr -10h
arg_4		= dword	ptr  8

		push	ebx
		sub	esp, 28h
		mov	ebx, [esp+2Ch+arg_4]
		mov	eax, ds:__stack_chk_guard
		mov	[esp+2Ch+var_10], eax
		xor	eax, eax
		mov	word ptr [ebx],	17h
		mov	word ptr [ebx+2], 0
		mov	word ptr [ebx+8], 0
		mov	[esp+2Ch+Count], 11h ; Count
		mov	[esp+2Ch+Source], offset aAuth ; "auth"
		lea	eax, [ebx+0Ah]
		mov	[esp+2Ch+Dest],	eax ; Dest
		call	strncpy
		mov	dword ptr [ebx+1Ch], offset sub_68884E38
		mov	dword ptr [ebx+20h], offset sub_68884D2C
		xor	eax, eax
		mov	edx, [esp+2Ch+var_10]
		xor	edx, ds:__stack_chk_guard
		jnz	short loc_68885A6C
		add	esp, 28h
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_68885A6C:				; CODE XREF: auth_modfirst+59j
		call	__stack_chk_fail
auth_modfirst	endp

; ---------------------------------------------------------------------------
		align 4

; =============== S U B	R O U T	I N E =======================================


sub_68885A74	proc near		; DATA XREF: bart_modfirst+4Bo

var_7C		= dword	ptr -7Ch
var_78		= dword	ptr -78h
var_74		= dword	ptr -74h
var_70		= dword	ptr -70h
var_6C		= dword	ptr -6Ch
var_68		= dword	ptr -68h
var_64		= dword	ptr -64h
var_60		= dword	ptr -60h
var_5C		= dword	ptr -5Ch
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_2D		= byte ptr -2Dh
var_20		= dword	ptr -20h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 6Ch
		mov	edi, [esp+7Ch+arg_0]
		mov	ebp, [esp+7Ch+arg_4]
		mov	edx, [esp+7Ch+arg_C]
		mov	esi, [esp+7Ch+arg_10]
		mov	ebx, [esp+7Ch+arg_14]
		mov	eax, ds:__stack_chk_guard
		mov	[esp+7Ch+var_20], eax
		xor	eax, eax
		mov	ax, [esi+2]
		cmp	ax, 3
		jz	loc_68885BD4
		cmp	ax, 5
		jz	short loc_68885AD8

loc_68885ABD:				; CODE XREF: sub_68885A74+199j
		xor	eax, eax

loc_68885ABF:				; CODE XREF: sub_68885A74+158j
		mov	edx, [esp+7Ch+var_20]
		xor	edx, ds:__stack_chk_guard
		jnz	loc_68885C47
		add	esp, 6Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 4

loc_68885AD8:				; CODE XREF: sub_68885A74+47j
		mov	[esp+7Ch+var_7C], ebx
		mov	[esp+7Ch+var_44], edx
		call	sub_68881990
		movzx	eax, al
		mov	[esp+7Ch+var_78], eax
		mov	[esp+7Ch+var_7C], ebx
		call	sub_68881D24
		mov	[esp+7Ch+var_3C], eax
		mov	[esp+7Ch+var_7C], ebx
		call	sub_688819F0
		mov	[esp+7Ch+var_7C], ebx
		call	sub_68881990
		mov	[esp+7Ch+var_2D], al
		mov	[esp+7Ch+var_7C], ebx
		call	sub_68881990
		movzx	eax, al
		mov	[esp+7Ch+var_34], eax
		mov	[esp+7Ch+var_78], eax
		mov	[esp+7Ch+var_7C], ebx
		call	sub_68881CAC
		mov	[esp+7Ch+var_38], eax
		mov	[esp+7Ch+var_7C], ebx
		call	sub_688819F0
		movzx	ecx, ax
		mov	[esp+7Ch+var_78], ecx
		mov	[esp+7Ch+var_7C], ebx
		mov	[esp+7Ch+var_40], ecx
		call	sub_68881CAC
		mov	ebx, eax
		movzx	eax, word ptr [esi+2]
		mov	[esp+7Ch+var_74], eax
		movzx	eax, word ptr [esi]
		mov	[esp+7Ch+var_78], eax
		mov	[esp+7Ch+var_7C], edi
		call	aim_callhandler
		test	eax, eax
		mov	edx, [esp+7Ch+var_44]
		mov	ecx, [esp+7Ch+var_40]
		jz	loc_68885C40
		mov	[esp+7Ch+var_5C], ecx
		mov	[esp+7Ch+var_60], ebx
		mov	ecx, [esp+7Ch+var_34]
		mov	[esp+7Ch+var_64], ecx
		mov	ecx, [esp+7Ch+var_38]
		mov	[esp+7Ch+var_68], ecx
		movzx	ecx, [esp+7Ch+var_2D]
		mov	[esp+7Ch+var_6C], ecx
		mov	ecx, [esp+7Ch+var_3C]
		mov	[esp+7Ch+var_70], ecx
		mov	[esp+7Ch+var_74], edx
		mov	[esp+7Ch+var_78], ebp
		mov	[esp+7Ch+var_7C], edi
		call	eax

loc_68885BA4:				; CODE XREF: sub_68885A74+1CEj
		mov	edx, [esp+7Ch+var_3C]
		mov	[esp+7Ch+var_7C], edx
		mov	[esp+7Ch+var_40], eax
		call	g_free
		mov	ecx, [esp+7Ch+var_38]
		mov	[esp+7Ch+var_7C], ecx
		call	g_free
		mov	[esp+7Ch+var_7C], ebx
		call	g_free
		mov	eax, [esp+7Ch+var_40]
		jmp	loc_68885ABF
; ---------------------------------------------------------------------------
		align 4

loc_68885BD4:				; CODE XREF: sub_68885A74+3Dj
		mov	[esp+7Ch+var_7C], ebx
		mov	[esp+7Ch+var_44], edx
		call	sub_688819F0
		mov	[esp+7Ch+var_7C], ebx
		call	sub_688819F0
		mov	[esp+7Ch+var_7C], ebx
		call	sub_68881990
		movzx	eax, word ptr [esi+2]
		mov	[esp+7Ch+var_74], eax
		movzx	eax, word ptr [esi]
		mov	[esp+7Ch+var_78], eax
		mov	[esp+7Ch+var_7C], edi
		call	aim_callhandler
		test	eax, eax
		mov	edx, [esp+7Ch+var_44]
		jz	loc_68885ABD
		mov	ecx, [esp+7Ch+var_20]
		xor	ecx, ds:__stack_chk_guard
		jnz	short loc_68885C47
		mov	[esp+7Ch+arg_8], edx
		mov	[esp+7Ch+arg_4], ebp
		mov	[esp+7Ch+arg_0], edi
		add	esp, 6Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		jmp	eax
; ---------------------------------------------------------------------------
		align 10h

loc_68885C40:				; CODE XREF: sub_68885A74+F4j
		xor	eax, eax
		jmp	loc_68885BA4
; ---------------------------------------------------------------------------

loc_68885C47:				; CODE XREF: sub_68885A74+55j
					; sub_68885A74+1A9j
		call	__stack_chk_fail
sub_68885A74	endp

; Exported entry  14. aim_bart_upload

; =============== S U B	R O U T	I N E =======================================


		public aim_bart_upload
aim_bart_upload	proc near		; CODE XREF: sub_688933E4+D0Ap
					; sub_6889D620+129p

var_5C		= dword	ptr -5Ch
var_58		= dword	ptr -58h
var_54		= dword	ptr -54h
var_50		= dword	ptr -50h
var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_30		= dword	ptr -30h
var_2C		= byte ptr -2Ch
var_20		= dword	ptr -20h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= word ptr  0Ch

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 4Ch
		mov	esi, [esp+5Ch+arg_0]
		mov	ebp, [esp+5Ch+arg_4]
		movzx	edi, [esp+5Ch+arg_8]
		mov	eax, ds:__stack_chk_guard
		mov	[esp+5Ch+var_20], eax
		xor	eax, eax
		test	esi, esi
		jz	loc_68885D58
		mov	[esp+5Ch+var_58], 10h
		mov	[esp+5Ch+var_5C], esi
		call	flap_connection_findbygroup
		mov	edx, eax
		test	eax, eax
		jz	loc_68885D58
		test	ebp, ebp
		jz	loc_68885D58
		test	di, di
		jz	loc_68885D58
		lea	eax, [edi+4]
		mov	[esp+5Ch+var_58], eax
		lea	ebx, [esp+5Ch+var_2C]
		mov	[esp+5Ch+var_5C], ebx
		mov	[esp+5Ch+var_30], edx
		call	sub_68881748
		mov	[esp+5Ch+var_58], 1
		mov	[esp+5Ch+var_5C], ebx
		call	sub_68881E0C
		mov	[esp+5Ch+var_58], edi
		mov	[esp+5Ch+var_5C], ebx
		call	sub_68881E0C
		mov	[esp+5Ch+var_54], edi
		mov	[esp+5Ch+var_58], ebp
		mov	[esp+5Ch+var_5C], ebx
		call	sub_688820A0
		mov	[esp+5Ch+var_48], 0
		mov	[esp+5Ch+var_4C], 0
		mov	[esp+5Ch+var_50], 0
		mov	[esp+5Ch+var_54], 2
		mov	[esp+5Ch+var_58], 10h
		mov	[esp+5Ch+var_5C], esi
		call	aim_cachesnac
		mov	[esp+5Ch+var_48], ebx
		mov	[esp+5Ch+var_4C], eax
		mov	[esp+5Ch+var_50], 2
		mov	[esp+5Ch+var_54], 10h
		mov	edx, [esp+5Ch+var_30]
		mov	[esp+5Ch+var_58], edx
		mov	[esp+5Ch+var_5C], esi
		call	flap_connection_send_snac
		mov	[esp+5Ch+var_5C], ebx
		call	sub_688817E4
		xor	eax, eax

loc_68885D43:				; CODE XREF: aim_bart_upload+111j
		mov	edx, [esp+5Ch+var_20]
		xor	edx, ds:__stack_chk_guard
		jnz	short loc_68885D5F
		add	esp, 4Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 4

loc_68885D58:				; CODE XREF: aim_bart_upload+21j
					; aim_bart_upload+3Bj ...
		mov	eax, 0FFFFFFEAh
		jmp	short loc_68885D43
; ---------------------------------------------------------------------------

loc_68885D5F:				; CODE XREF: aim_bart_upload+101j
		call	__stack_chk_fail
aim_bart_upload	endp

; Exported entry  13. aim_bart_request

; =============== S U B	R O U T	I N E =======================================


		public aim_bart_request
aim_bart_request proc near		; CODE XREF: sub_6889D620+A9p

var_6C		= dword	ptr -6Ch
var_68		= dword	ptr -68h
var_64		= dword	ptr -64h
var_60		= dword	ptr -60h
var_5C		= dword	ptr -5Ch
var_58		= dword	ptr -58h
var_40		= dword	ptr -40h
var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_2D		= byte ptr -2Dh
var_2C		= byte ptr -2Ch
var_20		= dword	ptr -20h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= byte ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 5Ch
		mov	esi, [esp+6Ch+arg_0]
		mov	eax, [esp+6Ch+arg_4]
		mov	[esp+6Ch+var_3C], eax
		mov	edx, [esp+6Ch+arg_C]
		mov	[esp+6Ch+var_38], edx
		mov	bl, [esp+6Ch+arg_8]
		mov	[esp+6Ch+var_2D], bl
		mov	ebp, [esp+6Ch+arg_10]
		mov	eax, ds:__stack_chk_guard
		mov	[esp+6Ch+var_20], eax
		xor	eax, eax
		test	esi, esi
		jz	loc_68885F18
		mov	[esp+6Ch+var_68], 10h
		mov	[esp+6Ch+var_6C], esi
		call	flap_connection_findbygroup
		mov	edx, eax
		test	eax, eax
		jz	loc_68885F18
		mov	ecx, [esp+6Ch+var_3C]
		test	ecx, ecx
		jz	loc_68885F18
		mov	ebx, [esp+6Ch+var_3C]
		cmp	byte ptr [ebx],	0
		jz	loc_68885F18
		mov	eax, [esp+6Ch+var_38]
		test	eax, eax
		jz	loc_68885F18
		test	bp, bp
		jz	loc_68885F18
		mov	ecx, 0FFFFFFFFh
		mov	edi, ebx
		xor	eax, eax
		repne scasb
		not	ecx
		movzx	ebx, bp
		mov	[esp+6Ch+var_34], ebx
		lea	eax, [ebx+ecx+5]
		mov	[esp+6Ch+var_68], eax
		lea	ebx, [esp+6Ch+var_2C]
		mov	[esp+6Ch+var_6C], ebx
		mov	[esp+6Ch+var_40], edx
		call	sub_68881748
		mov	ecx, 0FFFFFFFFh
		mov	edi, [esp+6Ch+var_3C]
		xor	eax, eax
		repne scasb
		not	ecx
		dec	ecx
		and	ecx, 0FFh
		mov	[esp+6Ch+var_68], ecx
		mov	[esp+6Ch+var_6C], ebx
		call	sub_68881DA4
		mov	eax, [esp+6Ch+var_3C]
		mov	[esp+6Ch+var_68], eax
		mov	[esp+6Ch+var_6C], ebx
		call	sub_68882114
		mov	[esp+6Ch+var_68], 1
		mov	[esp+6Ch+var_6C], ebx
		call	sub_68881DA4
		mov	[esp+6Ch+var_68], 1
		mov	[esp+6Ch+var_6C], ebx
		call	sub_68881E0C
		movzx	eax, [esp+6Ch+var_2D]
		mov	[esp+6Ch+var_68], eax
		mov	[esp+6Ch+var_6C], ebx
		call	sub_68881DA4
		and	ebp, 0FFh
		mov	[esp+6Ch+var_68], ebp
		mov	[esp+6Ch+var_6C], ebx
		call	sub_68881DA4
		mov	eax, [esp+6Ch+var_34]
		mov	[esp+6Ch+var_64], eax
		mov	eax, [esp+6Ch+var_38]
		mov	[esp+6Ch+var_68], eax
		mov	[esp+6Ch+var_6C], ebx
		call	sub_688820A0
		mov	[esp+6Ch+var_58], 0
		mov	[esp+6Ch+var_5C], 0
		mov	[esp+6Ch+var_60], 0
		mov	[esp+6Ch+var_64], 4
		mov	[esp+6Ch+var_68], 10h
		mov	[esp+6Ch+var_6C], esi
		call	aim_cachesnac
		mov	[esp+6Ch+var_58], ebx
		mov	[esp+6Ch+var_5C], eax
		mov	[esp+6Ch+var_60], 4
		mov	[esp+6Ch+var_64], 10h
		mov	edx, [esp+6Ch+var_40]
		mov	[esp+6Ch+var_68], edx
		mov	[esp+6Ch+var_6C], esi
		call	flap_connection_send_snac
		mov	[esp+6Ch+var_6C], ebx
		call	sub_688817E4
		xor	eax, eax

loc_68885F04:				; CODE XREF: aim_bart_request+1B9j
		mov	edx, [esp+6Ch+var_20]
		xor	edx, ds:__stack_chk_guard
		jnz	short loc_68885F1F
		add	esp, 5Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_68885F18:				; CODE XREF: aim_bart_request+37j
					; aim_bart_request+51j	...
		mov	eax, 0FFFFFFEAh
		jmp	short loc_68885F04
; ---------------------------------------------------------------------------

loc_68885F1F:				; CODE XREF: aim_bart_request+1AAj
		call	__stack_chk_fail
aim_bart_request endp

; Exported entry 146. bart_modfirst

; =============== S U B	R O U T	I N E =======================================


		public bart_modfirst
bart_modfirst	proc near		; DATA XREF: oscar_data_new+142o

Dest		= dword	ptr -2Ch
Source		= dword	ptr -28h
Count		= dword	ptr -24h
var_10		= dword	ptr -10h
arg_4		= dword	ptr  8

		push	ebx
		sub	esp, 28h
		mov	ebx, [esp+2Ch+arg_4]
		mov	eax, ds:__stack_chk_guard
		mov	[esp+2Ch+var_10], eax
		xor	eax, eax
		mov	word ptr [ebx],	10h
		mov	word ptr [ebx+2], 1
		mov	word ptr [ebx+4], 10h
		mov	word ptr [ebx+6], 629h
		mov	word ptr [ebx+8], 0
		mov	[esp+2Ch+Count], 11h ; Count
		mov	[esp+2Ch+Source], offset aBart ; "bart"
		lea	eax, [ebx+0Ah]
		mov	[esp+2Ch+Dest],	eax ; Dest
		call	strncpy
		mov	dword ptr [ebx+1Ch], offset sub_68885A74
		xor	eax, eax
		mov	edx, [esp+2Ch+var_10]
		xor	edx, ds:__stack_chk_guard
		jnz	short loc_68885F89
		add	esp, 28h
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_68885F89:				; CODE XREF: bart_modfirst+5Ej
		call	__stack_chk_fail
bart_modfirst	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_68885F90	proc near		; DATA XREF: bos_modfirst+4Bo

var_5C		= dword	ptr -5Ch
var_58		= dword	ptr -58h
var_54		= dword	ptr -54h
var_50		= dword	ptr -50h
var_4C		= dword	ptr -4Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= word ptr -30h
var_2E		= word ptr -2Eh
var_20		= dword	ptr -20h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 4Ch
		mov	ebx, [esp+5Ch+arg_0]
		mov	esi, [esp+5Ch+arg_4]
		mov	edi, [esp+5Ch+arg_C]
		mov	ebp, [esp+5Ch+arg_10]
		mov	eax, [esp+5Ch+arg_14]
		mov	edx, ds:__stack_chk_guard
		mov	[esp+5Ch+var_20], edx
		xor	edx, edx
		cmp	word ptr [ebp+2], 3
		jz	short loc_68885FD8
		xor	eax, eax

loc_68885FC0:				; CODE XREF: sub_68885F90+129j
		mov	edx, [esp+5Ch+var_20]
		xor	edx, ds:__stack_chk_guard
		jnz	loc_688860DC
		add	esp, 4Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_68885FD8:				; CODE XREF: sub_68885F90+2Cj
		mov	[esp+5Ch+var_5C], eax
		call	aim_tlvlist_read
		mov	[esp+5Ch+var_34], eax
		mov	[esp+5Ch+var_54], 1
		mov	[esp+5Ch+var_58], 1
		mov	[esp+5Ch+var_5C], eax
		call	aim_tlv_gettlv
		test	eax, eax
		jz	loc_688860C0
		mov	[esp+5Ch+var_54], 1
		mov	[esp+5Ch+var_58], 1
		mov	eax, [esp+5Ch+var_34]
		mov	[esp+5Ch+var_5C], eax
		call	aim_tlv_get16
		mov	[esp+5Ch+var_30], ax

loc_68886025:				; CODE XREF: sub_68885F90+137j
		mov	[esp+5Ch+var_54], 1
		mov	[esp+5Ch+var_58], 2
		mov	eax, [esp+5Ch+var_34]
		mov	[esp+5Ch+var_5C], eax
		call	aim_tlv_gettlv
		test	eax, eax
		jz	loc_688860CC
		mov	[esp+5Ch+var_54], 1
		mov	[esp+5Ch+var_58], 2
		mov	eax, [esp+5Ch+var_34]
		mov	[esp+5Ch+var_5C], eax
		call	aim_tlv_get16
		mov	[esp+5Ch+var_2E], ax

loc_6888606A:				; CODE XREF: sub_68885F90+143j
		movzx	eax, word ptr [ebp+2]
		mov	[esp+5Ch+var_54], eax
		movzx	eax, word ptr [ebp+0]
		mov	[esp+5Ch+var_58], eax
		mov	[esp+5Ch+var_5C], ebx
		call	aim_callhandler
		test	eax, eax
		jz	short loc_688860D8
		movzx	edx, [esp+5Ch+var_2E]
		mov	[esp+5Ch+var_4C], edx
		movzx	edx, [esp+5Ch+var_30]
		mov	[esp+5Ch+var_50], edx
		mov	[esp+5Ch+var_54], edi
		mov	[esp+5Ch+var_58], esi
		mov	[esp+5Ch+var_5C], ebx
		call	eax

loc_688860A5:				; CODE XREF: sub_68885F90+14Aj
		mov	edx, [esp+5Ch+var_34]
		mov	[esp+5Ch+var_5C], edx
		mov	[esp+5Ch+var_38], eax
		call	aim_tlvlist_free
		mov	eax, [esp+5Ch+var_38]
		jmp	loc_68885FC0
; ---------------------------------------------------------------------------
		align 10h

loc_688860C0:				; CODE XREF: sub_68885F90+6Ej
		mov	[esp+5Ch+var_30], 0
		jmp	loc_68886025
; ---------------------------------------------------------------------------

loc_688860CC:				; CODE XREF: sub_68885F90+B3j
		mov	[esp+5Ch+var_2E], 0
		jmp	short loc_6888606A
; ---------------------------------------------------------------------------
		align 4

loc_688860D8:				; CODE XREF: sub_68885F90+F4j
		xor	eax, eax
		jmp	short loc_688860A5
; ---------------------------------------------------------------------------

loc_688860DC:				; CODE XREF: sub_68885F90+3Aj
		call	__stack_chk_fail
sub_68885F90	endp

; ---------------------------------------------------------------------------
		align 4
; Exported entry  15. aim_bos_reqrights

; =============== S U B	R O U T	I N E =======================================


		public aim_bos_reqrights
aim_bos_reqrights proc near		; CODE XREF: .text:6889EBE8p

var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_10		= dword	ptr -10h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		sub	esp, 2Ch
		mov	eax, ds:__stack_chk_guard
		mov	[esp+2Ch+var_10], eax
		xor	eax, eax
		mov	[esp+2Ch+var_20], 2
		mov	[esp+2Ch+var_24], 9
		mov	eax, [esp+2Ch+arg_4]
		mov	[esp+2Ch+var_28], eax
		mov	eax, [esp+2Ch+arg_0]
		mov	[esp+2Ch+var_2C], eax
		call	aim_genericreq_n_snacid
		mov	eax, [esp+2Ch+var_10]
		xor	eax, ds:__stack_chk_guard
		jnz	short loc_68886126
		add	esp, 2Ch
		retn
; ---------------------------------------------------------------------------

loc_68886126:				; CODE XREF: aim_bos_reqrights+3Cj
		call	__stack_chk_fail
aim_bos_reqrights endp

; ---------------------------------------------------------------------------
		align 4
; Exported entry 147. bos_modfirst

; =============== S U B	R O U T	I N E =======================================


		public bos_modfirst
bos_modfirst	proc near		; DATA XREF: oscar_data_new+F2o

Dest		= dword	ptr -2Ch
Source		= dword	ptr -28h
Count		= dword	ptr -24h
var_10		= dword	ptr -10h
arg_4		= dword	ptr  8

		push	ebx
		sub	esp, 28h
		mov	ebx, [esp+2Ch+arg_4]
		mov	eax, ds:__stack_chk_guard
		mov	[esp+2Ch+var_10], eax
		xor	eax, eax
		mov	word ptr [ebx],	9
		mov	word ptr [ebx+2], 1
		mov	word ptr [ebx+4], 110h
		mov	word ptr [ebx+6], 629h
		mov	word ptr [ebx+8], 0
		mov	[esp+2Ch+Count], 11h ; Count
		mov	[esp+2Ch+Source], offset aBos ;	"bos"
		lea	eax, [ebx+0Ah]
		mov	[esp+2Ch+Dest],	eax ; Dest
		call	strncpy
		mov	dword ptr [ebx+1Ch], offset sub_68885F90
		xor	eax, eax
		mov	edx, [esp+2Ch+var_10]
		xor	edx, ds:__stack_chk_guard
		jnz	short loc_68886191
		add	esp, 28h
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_68886191:				; CODE XREF: bos_modfirst+5Ej
		call	__stack_chk_fail
bos_modfirst	endp

; ---------------------------------------------------------------------------
		align 4

; =============== S U B	R O U T	I N E =======================================


sub_68886198	proc near		; DATA XREF: buddylist_modfirst+4Bo

var_EC		= dword	ptr -0ECh
var_E8		= dword	ptr -0E8h
var_E4		= dword	ptr -0E4h
var_E0		= dword	ptr -0E0h
var_DC		= dword	ptr -0DCh
var_C4		= dword	ptr -0C4h
var_C0		= word ptr -0C0h
var_BE		= word ptr -0BEh
var_BC		= dword	ptr -0BCh
var_99		= byte ptr -99h
var_20		= dword	ptr -20h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 0DCh
		mov	esi, [esp+0ECh+arg_0]
		mov	edi, [esp+0ECh+arg_4]
		mov	ebp, [esp+0ECh+arg_C]
		mov	ebx, [esp+0ECh+arg_10]
		mov	ecx, [esp+0ECh+arg_14]
		mov	eax, ds:__stack_chk_guard
		mov	[esp+0ECh+var_20], eax
		xor	eax, eax
		mov	ax, [ebx+2]
		cmp	ax, 3
		jz	loc_68886274
		sub	eax, 0Bh
		cmp	ax, 1
		jbe	short loc_6888620C
		xor	edi, edi

loc_688861EC:				; CODE XREF: sub_68886198+D5j
					; sub_68886198+1BAj
		mov	eax, edi
		mov	edx, [esp+0ECh+var_20]
		xor	edx, ds:__stack_chk_guard
		jnz	loc_688863E3
		add	esp, 0DCh
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_6888620C:				; CODE XREF: sub_68886198+50j
		lea	edx, [esp+0ECh+var_BC]
		mov	[esp+0ECh+var_E4], edx
		mov	[esp+0ECh+var_E8], ecx
		mov	[esp+0ECh+var_EC], esi
		call	aim_info_extract
		movzx	eax, word ptr [ebx+2]
		mov	[esp+0ECh+var_E4], eax
		movzx	eax, word ptr [ebx]
		mov	[esp+0ECh+var_E8], eax
		mov	[esp+0ECh+var_EC], esi
		call	aim_callhandler
		test	eax, eax
		jz	loc_688863BC
		lea	edx, [esp+0ECh+var_BC]
		mov	[esp+0ECh+var_E0], edx
		mov	[esp+0ECh+var_E4], ebp
		mov	[esp+0ECh+var_E8], edi
		mov	[esp+0ECh+var_EC], esi
		call	eax
		mov	edi, eax

loc_68886256:				; CODE XREF: sub_68886198+226j
		cmp	word ptr [ebx+2], 0Bh
		jz	loc_68886358

loc_68886261:				; CODE XREF: sub_68886198+1C5j
					; sub_68886198+1E8j ...
		lea	eax, [esp+0ECh+var_BC]
		mov	[esp+0ECh+var_EC], eax
		call	aim_info_free
		jmp	loc_688861EC
; ---------------------------------------------------------------------------
		align 4

loc_68886274:				; CODE XREF: sub_68886198+43j
		mov	[esp+0ECh+var_EC], ecx
		call	aim_tlvlist_read
		mov	[esp+0ECh+var_C4], eax
		mov	[esp+0ECh+var_E4], 1
		mov	[esp+0ECh+var_E8], 1
		mov	[esp+0ECh+var_EC], eax
		call	aim_tlv_gettlv
		test	eax, eax
		jz	loc_688863D0
		mov	[esp+0ECh+var_E4], 1
		mov	[esp+0ECh+var_E8], 1
		mov	eax, [esp+0ECh+var_C4]
		mov	[esp+0ECh+var_EC], eax
		call	aim_tlv_get16
		mov	[esp+0ECh+var_C0], ax

loc_688862C1:				; CODE XREF: sub_68886198+23Fj
		mov	[esp+0ECh+var_E4], 1
		mov	[esp+0ECh+var_E8], 2
		mov	eax, [esp+0ECh+var_C4]
		mov	[esp+0ECh+var_EC], eax
		call	aim_tlv_gettlv
		test	eax, eax
		jz	loc_688863C4
		mov	[esp+0ECh+var_E4], 1
		mov	[esp+0ECh+var_E8], 2
		mov	eax, [esp+0ECh+var_C4]
		mov	[esp+0ECh+var_EC], eax
		call	aim_tlv_get16
		mov	[esp+0ECh+var_BE], ax

loc_68886306:				; CODE XREF: sub_68886198+233j
		movzx	eax, word ptr [ebx+2]
		mov	[esp+0ECh+var_E4], eax
		movzx	eax, word ptr [ebx]
		mov	[esp+0ECh+var_E8], eax
		mov	[esp+0ECh+var_EC], esi
		call	aim_callhandler
		test	eax, eax
		jz	loc_688863DC
		movzx	ecx, [esp+0ECh+var_BE]
		mov	[esp+0ECh+var_DC], ecx
		movzx	ecx, [esp+0ECh+var_C0]
		mov	[esp+0ECh+var_E0], ecx
		mov	[esp+0ECh+var_E4], ebp
		mov	[esp+0ECh+var_E8], edi
		mov	[esp+0ECh+var_EC], esi
		call	eax
		mov	edi, eax

loc_68886346:				; CODE XREF: sub_68886198+246j
		mov	eax, [esp+0ECh+var_C4]
		mov	[esp+0ECh+var_EC], eax
		call	aim_tlvlist_free
		jmp	loc_688861EC
; ---------------------------------------------------------------------------
		align 4

loc_68886358:				; CODE XREF: sub_68886198+C3j
		test	[esp+0ECh+var_99], 40h
		jz	loc_68886261
		mov	eax, [esi+68h]
		mov	[esp+0ECh+var_EC], eax
		call	purple_connection_get_account
		mov	edx, [esp+0ECh+var_BC]
		mov	[esp+0ECh+var_E8], edx
		mov	[esp+0ECh+var_EC], eax
		call	purple_find_buddy
		test	eax, eax
		jz	loc_68886261
		mov	[esp+0ECh+var_EC], eax
		call	purple_buddy_get_presence
		mov	[esp+0ECh+var_E8], 9
		mov	[esp+0ECh+var_EC], eax
		call	purple_presence_is_status_primitive_active
		test	eax, eax
		jz	loc_68886261
		mov	eax, [esp+0ECh+var_BC]
		mov	[esp+0ECh+var_E8], eax
		mov	[esp+0ECh+var_EC], esi
		call	icq_im_xstatus_request
		jmp	loc_68886261
; ---------------------------------------------------------------------------
		align 4

loc_688863BC:				; CODE XREF: sub_68886198+A1j
		xor	edi, edi
		jmp	loc_68886256
; ---------------------------------------------------------------------------
		align 4

loc_688863C4:				; CODE XREF: sub_68886198+147j
		mov	[esp+0ECh+var_BE], 0
		jmp	loc_68886306
; ---------------------------------------------------------------------------

loc_688863D0:				; CODE XREF: sub_68886198+102j
		mov	[esp+0ECh+var_C0], 0
		jmp	loc_688862C1
; ---------------------------------------------------------------------------

loc_688863DC:				; CODE XREF: sub_68886198+187j
		xor	edi, edi
		jmp	loc_68886346
; ---------------------------------------------------------------------------

loc_688863E3:				; CODE XREF: sub_68886198+63j
		call	__stack_chk_fail
sub_68886198	endp

; Exported entry  16. aim_buddylist_reqrights

; =============== S U B	R O U T	I N E =======================================


		public aim_buddylist_reqrights
aim_buddylist_reqrights	proc near	; CODE XREF: .text:6889EBD4p

var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_10		= dword	ptr -10h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		sub	esp, 2Ch
		mov	eax, ds:__stack_chk_guard
		mov	[esp+2Ch+var_10], eax
		xor	eax, eax
		mov	[esp+2Ch+var_20], 2
		mov	[esp+2Ch+var_24], 3
		mov	eax, [esp+2Ch+arg_4]
		mov	[esp+2Ch+var_28], eax
		mov	eax, [esp+2Ch+arg_0]
		mov	[esp+2Ch+var_2C], eax
		call	aim_genericreq_n_snacid
		mov	eax, [esp+2Ch+var_10]
		xor	eax, ds:__stack_chk_guard
		jnz	short loc_6888642A
		add	esp, 2Ch
		retn
; ---------------------------------------------------------------------------

loc_6888642A:				; CODE XREF: aim_buddylist_reqrights+3Cj
		call	__stack_chk_fail
aim_buddylist_reqrights	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 148. buddylist_modfirst

; =============== S U B	R O U T	I N E =======================================


		public buddylist_modfirst
buddylist_modfirst proc	near		; DATA XREF: oscar_data_new+B2o

Dest		= dword	ptr -2Ch
Source		= dword	ptr -28h
Count		= dword	ptr -24h
var_10		= dword	ptr -10h
arg_4		= dword	ptr  8

		push	ebx
		sub	esp, 28h
		mov	ebx, [esp+2Ch+arg_4]
		mov	eax, ds:__stack_chk_guard
		mov	[esp+2Ch+var_10], eax
		xor	eax, eax
		mov	word ptr [ebx],	3
		mov	word ptr [ebx+2], 1
		mov	word ptr [ebx+4], 110h
		mov	word ptr [ebx+6], 629h
		mov	word ptr [ebx+8], 0
		mov	[esp+2Ch+Count], 11h ; Count
		mov	[esp+2Ch+Source], offset aBuddy	; "buddy"
		lea	eax, [ebx+0Ah]
		mov	[esp+2Ch+Dest],	eax ; Dest
		call	strncpy
		mov	dword ptr [ebx+1Ch], offset sub_68886198
		xor	eax, eax
		mov	edx, [esp+2Ch+var_10]
		xor	edx, ds:__stack_chk_guard
		jnz	short loc_68886495
		add	esp, 28h
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_68886495:				; CODE XREF: buddylist_modfirst+5Ej
		call	__stack_chk_fail
buddylist_modfirst endp

; ---------------------------------------------------------------------------
		align 4
; Exported entry 185. flap_connection_destroy_chat

; =============== S U B	R O U T	I N E =======================================


		public flap_connection_destroy_chat
flap_connection_destroy_chat proc near	; CODE XREF: sub_68895BF0+23Fp

var_2C		= dword	ptr -2Ch
var_10		= dword	ptr -10h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	ebx
		sub	esp, 28h
		mov	eax, ds:__stack_chk_guard
		mov	[esp+2Ch+var_10], eax
		xor	eax, eax
		mov	eax, [esp+2Ch+arg_4]
		mov	ebx, [eax+80h]
		test	ebx, ebx
		jz	short loc_688864C4
		mov	eax, [ebx+4]
		mov	[esp+2Ch+var_2C], eax
		call	g_free

loc_688864C4:				; CODE XREF: flap_connection_destroy_chat+1Bj
		mov	eax, [esp+2Ch+var_10]
		xor	eax, ds:__stack_chk_guard
		jnz	short loc_688864DD
		mov	[esp+2Ch+arg_0], ebx
		add	esp, 28h
		pop	ebx
		jmp	g_free
; ---------------------------------------------------------------------------

loc_688864DD:				; CODE XREF: flap_connection_destroy_chat+32j
		call	__stack_chk_fail
flap_connection_destroy_chat endp

; ---------------------------------------------------------------------------
		align 4
; Exported entry  21. aim_chat_readroominfo

; =============== S U B	R O U T	I N E =======================================


		public aim_chat_readroominfo
aim_chat_readroominfo proc near		; CODE XREF: sub_68886554+13Bp
					; sub_6888B528+1481p

var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_10		= dword	ptr -10h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	esi
		push	ebx
		sub	esp, 24h
		mov	ebx, [esp+2Ch+arg_0]
		mov	esi, [esp+2Ch+arg_4]
		mov	eax, ds:__stack_chk_guard
		mov	[esp+2Ch+var_10], eax
		xor	eax, eax
		test	ebx, ebx
		jz	short loc_68886538
		test	esi, esi
		jz	short loc_68886538
		mov	[esp+2Ch+var_2C], ebx
		call	sub_688819F0
		mov	[esi], ax
		mov	[esp+2Ch+var_2C], ebx
		call	sub_68881990
		mov	[esi+8], al
		movzx	eax, al
		mov	[esp+2Ch+var_28], eax
		mov	[esp+2Ch+var_2C], ebx
		call	sub_68881CAC
		mov	[esi+4], eax
		mov	[esp+2Ch+var_2C], ebx
		call	sub_688819F0
		mov	[esi+0Ah], ax

loc_68886538:				; CODE XREF: aim_chat_readroominfo+1Aj
					; aim_chat_readroominfo+1Ej
		xor	eax, eax
		mov	edx, [esp+2Ch+var_10]
		xor	edx, ds:__stack_chk_guard
		jnz	short loc_6888654C
		add	esp, 24h
		pop	ebx
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_6888654C:				; CODE XREF: aim_chat_readroominfo+60j
		call	__stack_chk_fail
aim_chat_readroominfo endp

; ---------------------------------------------------------------------------
		align 4

; =============== S U B	R O U T	I N E =======================================


sub_68886554	proc near		; DATA XREF: chat_modfirst+4Bo

var_11C		= dword	ptr -11Ch
var_118		= dword	ptr -118h
var_114		= dword	ptr -114h
var_110		= dword	ptr -110h
var_10C		= dword	ptr -10Ch
var_108		= dword	ptr -108h
var_104		= dword	ptr -104h
var_100		= dword	ptr -100h
var_FC		= dword	ptr -0FCh
var_F8		= dword	ptr -0F8h
var_F4		= dword	ptr -0F4h
var_F0		= dword	ptr -0F0h
var_EC		= dword	ptr -0ECh
var_E8		= dword	ptr -0E8h
var_E4		= dword	ptr -0E4h
var_E0		= dword	ptr -0E0h
var_DC		= byte ptr -0DCh
var_D8		= dword	ptr -0D8h
var_D0		= byte ptr -0D0h
var_C4		= byte ptr -0C4h
var_28		= byte ptr -28h
var_20		= dword	ptr -20h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 10Ch
		mov	edx, [esp+11Ch+arg_0]
		mov	[esp+11Ch+var_F0], edx
		mov	edx, [esp+11Ch+arg_4]
		mov	[esp+11Ch+var_EC], edx
		mov	edx, [esp+11Ch+arg_C]
		mov	[esp+11Ch+var_E8], edx
		mov	ebp, [esp+11Ch+arg_10]
		mov	ebx, [esp+11Ch+arg_14]
		mov	eax, ds:__stack_chk_guard
		mov	[esp+11Ch+var_20], eax
		xor	eax, eax
		mov	ax, [ebp+2]
		cmp	ax, 2
		jz	loc_68886684
		lea	edx, [eax-3]
		cmp	dx, 1
		jbe	loc_688866CC
		cmp	ax, 6
		jz	short loc_688865DC
		xor	eax, eax

loc_688865BE:				; CODE XREF: sub_68886554+128j
					; sub_68886554+170j ...
		mov	edx, [esp+11Ch+var_20]
		xor	edx, ds:__stack_chk_guard
		jnz	loc_68886A35
		add	esp, 10Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_688865DC:				; CODE XREF: sub_68886554+66j
		lea	eax, [esp+11Ch+var_C4]
		mov	[esp+11Ch+var_F8], eax
		mov	ecx, 98h
		xor	eax, eax
		mov	edi, [esp+11Ch+var_F8]
		rep stosb
		lea	edi, [esp+11Ch+var_28]
		lea	esi, [esp+11Ch+var_20]
		nop

loc_68886600:				; CODE XREF: sub_68886554+B9j
		mov	[esp+11Ch+var_11C], ebx
		call	sub_68881990
		mov	[edi], al
		inc	edi
		cmp	edi, esi
		jnz	short loc_68886600
		mov	[esp+11Ch+var_114], 1 ;	int
		lea	edx, [esp+11Ch+var_28]
		mov	[esp+11Ch+var_118], edx	; void *
		mov	edx, [esp+11Ch+var_F0]
		mov	[esp+11Ch+var_11C], edx	; int
		call	aim_uncachecookie
		test	eax, eax
		jz	short loc_6888664D
		mov	edx, [eax+0Ch]
		mov	[esp+11Ch+var_11C], edx
		mov	[esp+11Ch+var_FC], eax
		call	g_free
		mov	eax, [esp+11Ch+var_FC]
		mov	[esp+11Ch+var_11C], eax
		call	g_free

loc_6888664D:				; CODE XREF: sub_68886554+DCj
		mov	[esp+11Ch+var_11C], ebx
		call	sub_688819F0
		cmp	ax, 3
		jz	loc_68886790
		movzx	eax, ax
		mov	[esp+11Ch+var_114], eax
		mov	[esp+11Ch+var_118], offset aFaimChat_incom ; "faim: chat_incoming: unknown channel! ("...
		mov	[esp+11Ch+var_11C], offset aOscar_2 ; "oscar"
		call	purple_debug_misc
		xor	eax, eax
		jmp	loc_688865BE
; ---------------------------------------------------------------------------
		align 4

loc_68886684:				; CODE XREF: sub_68886554+4Fj
		lea	eax, [esp+11Ch+var_DC]
		mov	[esp+11Ch+var_118], eax
		mov	[esp+11Ch+var_11C], ebx
		call	aim_chat_readroominfo
		mov	[esp+11Ch+var_11C], ebx
		call	sub_68881990
		cmp	al, 2
		jz	loc_68886964
		movzx	eax, al
		mov	[esp+11Ch+var_114], eax
		mov	[esp+11Ch+var_118], offset aFaimChat_roomu ; "faim: chat_roomupdateinfo: detail	level"...
		mov	[esp+11Ch+var_11C], offset aOscar_2 ; "oscar"
		call	purple_debug_misc
		mov	eax, 1
		jmp	loc_688865BE
; ---------------------------------------------------------------------------
		align 4

loc_688866CC:				; CODE XREF: sub_68886554+5Cj
		mov	esi, 98h
		mov	[esp+11Ch+var_F4], 0
		xor	edi, edi
		mov	[esp+11Ch+var_E4], ebp
		mov	ebp, [esp+11Ch+var_F0]
		jmp	short loc_68886717
; ---------------------------------------------------------------------------
		align 4

loc_688866E8:				; CODE XREF: sub_68886554+1CDj
		inc	[esp+11Ch+var_F4]
		mov	[esp+11Ch+var_118], esi
		mov	[esp+11Ch+var_11C], edi
		call	g_realloc
		mov	edi, eax
		lea	eax, [eax+esi-98h]
		mov	[esp+11Ch+var_114], eax
		mov	[esp+11Ch+var_118], ebx
		mov	[esp+11Ch+var_11C], ebp
		call	aim_info_extract
		add	esi, 98h

loc_68886717:				; CODE XREF: sub_68886554+18Fj
		mov	[esp+11Ch+var_11C], ebx
		call	sub_68881818
		test	eax, eax
		jnz	short loc_688866E8
		mov	ebp, [esp+11Ch+var_E4]
		movzx	eax, word ptr [ebp+2]
		mov	[esp+11Ch+var_114], eax
		movzx	eax, word ptr [ebp+0]
		mov	[esp+11Ch+var_118], eax
		mov	edx, [esp+11Ch+var_F0]
		mov	[esp+11Ch+var_11C], edx
		call	aim_callhandler
		test	eax, eax
		jz	loc_68886A15
		mov	[esp+11Ch+var_10C], edi
		mov	edx, [esp+11Ch+var_F4]
		mov	[esp+11Ch+var_110], edx
		mov	edx, [esp+11Ch+var_E8]
		mov	[esp+11Ch+var_114], edx
		mov	edx, [esp+11Ch+var_EC]
		mov	[esp+11Ch+var_118], edx
		mov	edx, [esp+11Ch+var_F0]
		mov	[esp+11Ch+var_11C], edx
		call	eax

loc_68886770:				; CODE XREF: sub_68886554+4C3j
		mov	[esp+11Ch+var_11C], edi
		mov	[esp+11Ch+var_FC], eax
		call	aim_info_free
		mov	[esp+11Ch+var_11C], edi
		call	g_free
		mov	eax, [esp+11Ch+var_FC]
		jmp	loc_688865BE
; ---------------------------------------------------------------------------
		align 10h

loc_68886790:				; CODE XREF: sub_68886554+105j
		mov	[esp+11Ch+var_11C], ebx
		call	aim_tlvlist_read
		mov	esi, eax
		mov	[esp+11Ch+var_114], 1
		mov	[esp+11Ch+var_118], 3
		mov	[esp+11Ch+var_11C], eax
		call	aim_tlv_gettlv
		test	eax, eax
		jz	short loc_688867E9
		movzx	edx, word ptr [eax+2]
		mov	[esp+11Ch+var_114], edx
		mov	eax, [eax+4]
		mov	[esp+11Ch+var_118], eax
		lea	ebx, [esp+11Ch+var_D0]
		mov	[esp+11Ch+var_11C], ebx
		call	sub_68881798
		lea	eax, [esp+11Ch+var_C4]
		mov	[esp+11Ch+var_114], eax
		mov	[esp+11Ch+var_118], ebx
		mov	edx, [esp+11Ch+var_F0]
		mov	[esp+11Ch+var_11C], edx
		call	aim_info_extract

loc_688867E9:				; CODE XREF: sub_68886554+260j
		mov	[esp+11Ch+var_114], 1
		mov	[esp+11Ch+var_118], 5
		mov	[esp+11Ch+var_11C], esi
		call	aim_tlv_gettlv
		test	eax, eax
		jz	loc_68886942
		movzx	edx, word ptr [eax+2]
		mov	[esp+11Ch+var_114], edx
		mov	eax, [eax+4]
		mov	[esp+11Ch+var_118], eax
		lea	ebx, [esp+11Ch+var_D0]
		mov	[esp+11Ch+var_11C], ebx
		call	sub_68881798
		mov	[esp+11Ch+var_11C], ebx
		call	aim_tlvlist_read
		mov	ebx, eax
		mov	[esp+11Ch+var_114], 1
		mov	[esp+11Ch+var_118], 1
		mov	[esp+11Ch+var_11C], eax
		call	aim_tlv_gettlv
		test	eax, eax
		jz	loc_68886A1C
		movzx	edx, word ptr [eax+2]
		mov	[esp+11Ch+var_E0], edx
		mov	[esp+11Ch+var_11C], eax
		call	aim_tlv_getvalue_as_string
		mov	[esp+11Ch+var_E4], eax

loc_68886862:				; CODE XREF: sub_68886554+4D8j
		mov	[esp+11Ch+var_114], 1
		mov	[esp+11Ch+var_118], 2
		mov	[esp+11Ch+var_11C], ebx
		call	aim_tlv_getstr
		mov	[esp+11Ch+var_F4], eax
		mov	[esp+11Ch+var_114], 1
		mov	[esp+11Ch+var_118], 3
		mov	[esp+11Ch+var_11C], ebx
		call	aim_tlv_getstr
		mov	edi, eax
		mov	[esp+11Ch+var_11C], ebx
		call	aim_tlvlist_free

loc_688868A0:				; CODE XREF: sub_68886554+408j
		movzx	eax, word ptr [ebp+2]
		mov	[esp+11Ch+var_114], eax
		movzx	eax, word ptr [ebp+0]
		mov	[esp+11Ch+var_118], eax
		mov	edx, [esp+11Ch+var_F0]
		mov	[esp+11Ch+var_11C], edx
		call	aim_callhandler
		test	eax, eax
		jz	loc_68886A0E
		mov	[esp+11Ch+var_100], edi
		mov	edx, [esp+11Ch+var_F4]
		mov	[esp+11Ch+var_104], edx
		mov	edx, [esp+11Ch+var_E4]
		mov	[esp+11Ch+var_108], edx
		mov	edx, [esp+11Ch+var_E0]
		mov	[esp+11Ch+var_10C], edx
		lea	edx, [esp+11Ch+var_C4]
		mov	[esp+11Ch+var_110], edx
		mov	edx, [esp+11Ch+var_E8]
		mov	[esp+11Ch+var_114], edx
		mov	edx, [esp+11Ch+var_EC]
		mov	[esp+11Ch+var_118], edx
		mov	edx, [esp+11Ch+var_F0]
		mov	[esp+11Ch+var_11C], edx
		call	eax

loc_68886901:				; CODE XREF: sub_68886554+4BCj
		lea	edx, [esp+11Ch+var_C4]
		mov	[esp+11Ch+var_11C], edx
		mov	[esp+11Ch+var_FC], eax
		call	aim_info_free
		mov	edx, [esp+11Ch+var_E4]
		mov	[esp+11Ch+var_11C], edx
		call	g_free
		mov	edx, [esp+11Ch+var_F4]
		mov	[esp+11Ch+var_11C], edx
		call	g_free
		mov	[esp+11Ch+var_11C], edi
		call	g_free
		mov	[esp+11Ch+var_11C], esi
		call	aim_tlvlist_free
		mov	eax, [esp+11Ch+var_FC]
		jmp	loc_688865BE
; ---------------------------------------------------------------------------

loc_68886942:				; CODE XREF: sub_68886554+2AFj
		xor	edi, edi
		mov	[esp+11Ch+var_F4], 0
		mov	[esp+11Ch+var_E0], 0
		mov	[esp+11Ch+var_E4], 0
		jmp	loc_688868A0
; ---------------------------------------------------------------------------
		align 4

loc_68886964:				; CODE XREF: sub_68886554+14Aj
		mov	[esp+11Ch+var_11C], ebx
		call	sub_688819F0
		mov	[esp+11Ch+var_11C], ebx
		call	aim_tlvlist_read
		mov	ebx, eax
		mov	[esp+11Ch+var_114], 1
		mov	[esp+11Ch+var_118], 0D1h
		mov	[esp+11Ch+var_11C], eax
		call	aim_tlv_get16
		movzx	esi, ax
		mov	[esp+11Ch+var_114], 1
		mov	[esp+11Ch+var_118], 0DAh
		mov	[esp+11Ch+var_11C], ebx
		call	aim_tlv_get16
		movzx	edi, ax
		movzx	eax, word ptr [ebp+2]
		mov	[esp+11Ch+var_114], eax
		movzx	eax, word ptr [ebp+0]
		mov	[esp+11Ch+var_118], eax
		mov	edx, [esp+11Ch+var_F0]
		mov	[esp+11Ch+var_11C], edx
		call	aim_callhandler
		test	eax, eax
		jz	short loc_68886A31
		mov	[esp+11Ch+var_10C], edi
		mov	[esp+11Ch+var_110], esi
		mov	edx, [esp+11Ch+var_E8]
		mov	[esp+11Ch+var_114], edx
		mov	edx, [esp+11Ch+var_EC]
		mov	[esp+11Ch+var_118], edx
		mov	edx, [esp+11Ch+var_F0]
		mov	[esp+11Ch+var_11C], edx
		call	eax

loc_688869ED:				; CODE XREF: sub_68886554+4DFj
		mov	edx, [esp+11Ch+var_D8]
		mov	[esp+11Ch+var_11C], edx
		mov	[esp+11Ch+var_FC], eax
		call	g_free
		mov	[esp+11Ch+var_11C], ebx
		call	aim_tlvlist_free
		mov	eax, [esp+11Ch+var_FC]
		jmp	loc_688865BE
; ---------------------------------------------------------------------------

loc_68886A0E:				; CODE XREF: sub_68886554+36Aj
		xor	eax, eax
		jmp	loc_68886901
; ---------------------------------------------------------------------------

loc_68886A15:				; CODE XREF: sub_68886554+1F1j
		xor	eax, eax
		jmp	loc_68886770
; ---------------------------------------------------------------------------

loc_68886A1C:				; CODE XREF: sub_68886554+2F4j
		mov	[esp+11Ch+var_E0], 0
		mov	[esp+11Ch+var_E4], 0
		jmp	loc_68886862
; ---------------------------------------------------------------------------

loc_68886A31:				; CODE XREF: sub_68886554+476j
		xor	eax, eax
		jmp	short loc_688869ED
; ---------------------------------------------------------------------------

loc_68886A35:				; CODE XREF: sub_68886554+77j
		call	__stack_chk_fail
sub_68886554	endp

; ---------------------------------------------------------------------------
		align 4
; Exported entry  22. aim_chat_send_im

; =============== S U B	R O U T	I N E =======================================


		public aim_chat_send_im
aim_chat_send_im proc near		; CODE XREF: oscar_send_chat+1C0p

var_7C		= dword	ptr -7Ch
var_78		= dword	ptr -78h
var_74		= dword	ptr -74h
var_70		= dword	ptr -70h
var_6C		= dword	ptr -6Ch
var_68		= dword	ptr -68h
var_58		= dword	ptr -58h
var_54		= dword	ptr -54h
var_50		= dword	ptr -50h
var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= byte ptr -34h
var_28		= byte ptr -28h
var_20		= dword	ptr -20h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h
arg_18		= dword	ptr  1Ch

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 6Ch
		mov	esi, [esp+7Ch+arg_0]
		mov	edx, [esp+7Ch+arg_4]
		mov	[esp+7Ch+var_54], edx
		mov	edx, [esp+7Ch+arg_C]
		mov	[esp+7Ch+var_50], edx
		mov	edx, [esp+7Ch+arg_10]
		mov	[esp+7Ch+var_4C], edx
		mov	edx, [esp+7Ch+arg_14]
		mov	[esp+7Ch+var_48], edx
		mov	edx, [esp+7Ch+arg_18]
		mov	[esp+7Ch+var_44], edx
		mov	edi, [esp+7Ch+arg_8]
		mov	eax, ds:__stack_chk_guard
		mov	[esp+7Ch+var_20], eax
		xor	eax, eax
		mov	[esp+7Ch+var_3C], 0
		mov	[esp+7Ch+var_38], 0
		test	esi, esi
		jz	loc_68886C83
		mov	ebp, [esp+7Ch+var_54]
		test	ebp, ebp
		jz	loc_68886C83
		mov	ebx, [esp+7Ch+var_50]
		test	ebx, ebx
		jz	loc_68886C83
		mov	ecx, [esp+7Ch+var_4C]
		test	ecx, ecx
		jle	loc_68886C83
		mov	[esp+7Ch+var_78], 476h
		lea	ebp, [esp+7Ch+var_34]
		mov	[esp+7Ch+var_7C], ebp
		call	sub_68881748
		mov	[esp+7Ch+var_68], 0
		mov	[esp+7Ch+var_6C], 0
		mov	[esp+7Ch+var_70], 0
		mov	[esp+7Ch+var_74], 5
		mov	[esp+7Ch+var_78], 0Eh
		mov	[esp+7Ch+var_7C], esi
		call	aim_cachesnac
		mov	[esp+7Ch+var_40], eax
		lea	ebx, [esp+7Ch+var_28]
		lea	edx, [esp+7Ch+var_20]
		mov	[esp+7Ch+var_58], edx
		nop

loc_68886B24:				; CODE XREF: aim_chat_send_im+F4j
		call	rand
		mov	[ebx], al
		inc	ebx
		cmp	ebx, [esp+7Ch+var_58]
		jnz	short loc_68886B24
		mov	[esp+7Ch+var_74], 0
		mov	[esp+7Ch+var_78], 1
		lea	eax, [esp+7Ch+var_28]
		mov	[esp+7Ch+var_7C], eax
		call	aim_mkcookie
		mov	dword ptr [eax+0Ch], 0
		mov	[esp+7Ch+var_78], eax ;	void *
		mov	[esp+7Ch+var_7C], esi ;	int
		call	aim_cachecookie
		mov	[esp+7Ch+var_74], 8
		lea	edx, [esp+7Ch+var_28]
		mov	[esp+7Ch+var_78], edx
		mov	[esp+7Ch+var_7C], ebp
		call	sub_688820A0
		mov	[esp+7Ch+var_78], 3
		mov	[esp+7Ch+var_7C], ebp
		call	sub_68881E0C
		mov	[esp+7Ch+var_78], 1
		lea	ebx, [esp+7Ch+var_3C]
		mov	[esp+7Ch+var_7C], ebx
		call	aim_tlvlist_add_noval
		test	edi, 1
		jz	loc_68886C9C
		and	edi, 2
		jnz	loc_68886CB5

loc_68886BB2:				; CODE XREF: aim_chat_send_im+273j
					; aim_chat_send_im+289j
		mov	edx, [esp+7Ch+var_50]
		mov	[esp+7Ch+var_70], edx
		movzx	eax, word ptr [esp+7Ch+var_4C]
		mov	[esp+7Ch+var_74], eax
		mov	[esp+7Ch+var_78], 1
		lea	edi, [esp+7Ch+var_38]
		mov	[esp+7Ch+var_7C], edi
		call	aim_tlvlist_add_raw
		mov	edx, [esp+7Ch+var_48]
		test	edx, edx
		jz	short loc_68886BF7
		mov	edx, [esp+7Ch+var_48]
		mov	[esp+7Ch+var_74], edx
		mov	[esp+7Ch+var_78], 2
		mov	[esp+7Ch+var_7C], edi
		call	aim_tlvlist_add_str

loc_68886BF7:				; CODE XREF: aim_chat_send_im+1A1j
		mov	eax, [esp+7Ch+var_44]
		test	eax, eax
		jz	short loc_68886C17
		mov	edx, [esp+7Ch+var_44]
		mov	[esp+7Ch+var_74], edx
		mov	[esp+7Ch+var_78], 3
		mov	[esp+7Ch+var_7C], edi
		call	aim_tlvlist_add_str

loc_68886C17:				; CODE XREF: aim_chat_send_im+1C1j
		mov	[esp+7Ch+var_74], edi
		mov	[esp+7Ch+var_78], 5
		mov	[esp+7Ch+var_7C], ebx
		call	aim_tlvlist_add_frozentlvlist
		mov	[esp+7Ch+var_78], ebx
		mov	[esp+7Ch+var_7C], ebp
		call	aim_tlvlist_write
		mov	eax, [esp+7Ch+var_38]
		mov	[esp+7Ch+var_7C], eax
		call	aim_tlvlist_free
		mov	eax, [esp+7Ch+var_3C]
		mov	[esp+7Ch+var_7C], eax
		call	aim_tlvlist_free
		mov	[esp+7Ch+var_68], ebp
		mov	eax, [esp+7Ch+var_40]
		mov	[esp+7Ch+var_6C], eax
		mov	[esp+7Ch+var_70], 5
		mov	[esp+7Ch+var_74], 0Eh
		mov	edx, [esp+7Ch+var_54]
		mov	[esp+7Ch+var_78], edx
		mov	[esp+7Ch+var_7C], esi
		call	flap_connection_send_snac
		mov	[esp+7Ch+var_7C], ebp
		call	sub_688817E4

loc_68886C83:				; CODE XREF: aim_chat_send_im+69j
					; aim_chat_send_im+75j	...
		xor	eax, eax
		mov	edx, [esp+7Ch+var_20]
		xor	edx, ds:__stack_chk_guard
		jnz	short loc_68886CCA
		add	esp, 6Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 4

loc_68886C9C:				; CODE XREF: aim_chat_send_im+167j
		mov	[esp+7Ch+var_78], 6
		mov	[esp+7Ch+var_7C], ebx
		call	aim_tlvlist_add_noval
		and	edi, 2
		jz	loc_68886BB2

loc_68886CB5:				; CODE XREF: aim_chat_send_im+170j
		mov	[esp+7Ch+var_78], 7
		mov	[esp+7Ch+var_7C], ebx
		call	aim_tlvlist_add_noval
		jmp	loc_68886BB2
; ---------------------------------------------------------------------------

loc_68886CCA:				; CODE XREF: aim_chat_send_im+253j
		call	__stack_chk_fail
aim_chat_send_im endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 179. chat_modfirst

; =============== S U B	R O U T	I N E =======================================


		public chat_modfirst
chat_modfirst	proc near		; DATA XREF: oscar_data_new+132o

Dest		= dword	ptr -2Ch
Source		= dword	ptr -28h
Count		= dword	ptr -24h
var_10		= dword	ptr -10h
arg_4		= dword	ptr  8

		push	ebx
		sub	esp, 28h
		mov	ebx, [esp+2Ch+arg_4]
		mov	eax, ds:__stack_chk_guard
		mov	[esp+2Ch+var_10], eax
		xor	eax, eax
		mov	word ptr [ebx],	0Eh
		mov	word ptr [ebx+2], 1
		mov	word ptr [ebx+4], 10h
		mov	word ptr [ebx+6], 629h
		mov	word ptr [ebx+8], 0
		mov	[esp+2Ch+Count], 11h ; Count
		mov	[esp+2Ch+Source], offset aChat ; "chat"
		lea	eax, [ebx+0Ah]
		mov	[esp+2Ch+Dest],	eax ; Dest
		call	strncpy
		mov	dword ptr [ebx+1Ch], offset sub_68886554
		xor	eax, eax
		mov	edx, [esp+2Ch+var_10]
		xor	edx, ds:__stack_chk_guard
		jnz	short loc_68886D35
		add	esp, 28h
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_68886D35:				; CODE XREF: chat_modfirst+5Ej
		call	__stack_chk_fail
chat_modfirst	endp

; ---------------------------------------------------------------------------
		align 4

; =============== S U B	R O U T	I N E =======================================


sub_68886D3C	proc near		; DATA XREF: chatnav_modfirst+4Bo

var_AC		= dword	ptr -0ACh
var_A8		= dword	ptr -0A8h
var_A4		= dword	ptr -0A4h
var_A0		= dword	ptr -0A0h
var_9C		= dword	ptr -9Ch
var_98		= dword	ptr -98h
var_94		= dword	ptr -94h
var_90		= dword	ptr -90h
var_8C		= dword	ptr -8Ch
var_88		= dword	ptr -88h
var_84		= dword	ptr -84h
var_80		= dword	ptr -80h
var_7C		= dword	ptr -7Ch
var_78		= dword	ptr -78h
var_74		= dword	ptr -74h
var_60		= dword	ptr -60h
var_5C		= dword	ptr -5Ch
var_58		= dword	ptr -58h
var_54		= dword	ptr -54h
var_50		= dword	ptr -50h
var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_3A		= word ptr -3Ah
var_38		= dword	ptr -38h
var_34		= word ptr -34h
var_32		= word ptr -32h
var_30		= word ptr -30h
var_2D		= byte ptr -2Dh
var_2C		= byte ptr -2Ch
var_20		= dword	ptr -20h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 9Ch
		mov	ebp, [esp+0ACh+arg_0]
		mov	edx, [esp+0ACh+arg_4]
		mov	[esp+0ACh+var_5C], edx
		mov	ecx, [esp+0ACh+arg_C]
		mov	[esp+0ACh+var_58], ecx
		mov	ebx, [esp+0ACh+arg_10]
		mov	esi, [esp+0ACh+arg_14]
		mov	eax, ds:__stack_chk_guard
		mov	[esp+0ACh+var_20], eax
		xor	eax, eax
		mov	ax, [ebx+2]
		cmp	ax, 1
		jz	loc_68886E74
		cmp	ax, 9
		jz	short loc_68886DB4
		xor	eax, eax

loc_68886D95:				; CODE XREF: sub_68886D3C+130j
					; sub_68886D3C+183j ...
		mov	ecx, [esp+0ACh+var_20]
		xor	ecx, ds:__stack_chk_guard
		jnz	loc_688878B2
		add	esp, 9Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 4

loc_68886DB4:				; CODE XREF: sub_68886D3C+55j
		mov	eax, [ebx+8]
		mov	[esp+0ACh+var_A8], eax
		mov	[esp+0ACh+var_AC], ebp
		call	aim_remsnac
		mov	[esp+0ACh+var_54], eax
		test	eax, eax
		jz	loc_6888750A
		mov	edx, [esp+0ACh+var_54]
		movzx	eax, word ptr [edx+4]
		cmp	ax, 0Dh
		jnz	loc_68886EC4
		mov	edx, [esp+0ACh+var_54]
		movzx	eax, word ptr [edx+6]
		cmp	ax, 2
		jz	loc_6888700A
		cmp	ax, 3
		jz	loc_688873F6
		cmp	ax, 4
		jz	loc_688874D4
		cmp	ax, 5
		jz	loc_688874EF
		cmp	ax, 6
		jz	loc_68886EFE
		cmp	ax, 7
		jz	loc_6888752C
		cmp	ax, 8
		jz	loc_68887411
		mov	[esp+0ACh+var_A4], eax
		mov	[esp+0ACh+var_A8], offset aChatnav_parse_ ; "chatnav_parse_info: unknown request sub"...
		mov	[esp+0ACh+var_AC], offset aOscar_3 ; "oscar"
		call	purple_debug_misc
		xor	eax, eax

loc_68886E49:				; CODE XREF: sub_68886D3C+1D8j
					; sub_68886D3C+6B5j ...
		mov	ecx, [esp+0ACh+var_54]
		mov	edx, [ecx+0Ch]
		mov	[esp+0ACh+var_AC], edx
		mov	[esp+0ACh+var_60], eax
		call	g_free
		mov	edx, [esp+0ACh+var_54]
		mov	[esp+0ACh+var_AC], edx
		call	g_free
		mov	eax, [esp+0ACh+var_60]
		jmp	loc_68886D95
; ---------------------------------------------------------------------------
		align 4

loc_68886E74:				; CODE XREF: sub_68886D3C+4Bj
		mov	eax, [ebx+8]
		mov	[esp+0ACh+var_A8], eax
		mov	[esp+0ACh+var_AC], ebp
		call	aim_remsnac
		mov	edi, eax
		test	eax, eax
		jz	loc_688877F6
		movzx	eax, word ptr [eax+4]
		cmp	ax, 0Dh
		jnz	loc_68886FD8
		cmp	word ptr [edi+6], 8
		jz	short loc_68886F19
		xor	eax, eax

loc_68886EA4:				; CODE XREF: sub_68886D3C+295j
		mov	edx, [edi+0Ch]
		mov	[esp+0ACh+var_AC], edx
		mov	[esp+0ACh+var_60], eax
		call	g_free
		mov	[esp+0ACh+var_AC], edi
		call	g_free
		mov	eax, [esp+0ACh+var_60]
		jmp	loc_68886D95
; ---------------------------------------------------------------------------

loc_68886EC4:				; CODE XREF: sub_68886D3C+9Fj
		mov	[esp+0ACh+var_A4], eax
		mov	[esp+0ACh+var_A8], offset aFaimChatnav_pa ; "faim: chatnav_parse_info: received	resp"...
		mov	[esp+0ACh+var_AC], offset aOscar_3 ; "oscar"
		call	purple_debug_misc
		mov	ecx, [esp+0ACh+var_54]
		mov	eax, [ecx+0Ch]
		mov	[esp+0ACh+var_AC], eax
		call	g_free
		mov	eax, [esp+0ACh+var_54]
		mov	[esp+0ACh+var_AC], eax
		call	g_free
		xor	eax, eax
		jmp	loc_68886D95
; ---------------------------------------------------------------------------

loc_68886EFE:				; CODE XREF: sub_68886D3C+D9j
		mov	[esp+0ACh+var_A8], offset aChatnav_pars_0 ; "chatnav_parse_info: response to occupan"...
		mov	[esp+0ACh+var_AC], offset aOscar_3 ; "oscar"
		call	purple_debug_misc
		xor	eax, eax
		jmp	loc_68886E49
; ---------------------------------------------------------------------------

loc_68886F19:				; CODE XREF: sub_68886D3C+164j
		mov	[esp+0ACh+var_AC], esi
		call	sub_688819F0
		movzx	ebx, ax
		mov	[esp+0ACh+var_AC], esi
		call	aim_tlvlist_read
		mov	[esp+0ACh+var_A4], 1
		mov	[esp+0ACh+var_A8], 8
		mov	[esp+0ACh+var_AC], eax
		call	aim_tlv_get16
		mov	esi, eax
		movzx	eax, ax
		mov	[esp+0ACh+var_A0], eax
		mov	[esp+0ACh+var_A4], ebx
		mov	[esp+0ACh+var_A8], offset aCouldNotJoinRo ; "Could not join room, error=0x%04hx, cha"...
		mov	[esp+0ACh+var_AC], offset aOscar_3 ; "oscar"
		call	purple_debug_warning
		cmp	si, 33h
		jz	loc_68887818
		mov	[esp+0ACh+var_A8], offset aUnknownError	; "Unknown error"
		mov	[esp+0ACh+var_AC], offset aPidgin_2 ; "pidgin"
		call	libintl_dgettext
		mov	ebx, eax

loc_68886F85:				; CODE XREF: sub_68886D3C+AF2j
		mov	[esp+0ACh+var_A8], offset aCouldNotJoinCh ; "Could not join chat room"
		mov	[esp+0ACh+var_AC], offset aPidgin_2 ; "pidgin"
		call	libintl_dgettext
		mov	[esp+0ACh+var_94], 0
		mov	[esp+0ACh+var_98], 0
		mov	[esp+0ACh+var_9C], ebx
		mov	[esp+0ACh+var_A0], eax
		mov	[esp+0ACh+var_A4], 0
		mov	[esp+0ACh+var_A8], 0
		mov	eax, [ebp+68h]
		mov	[esp+0ACh+var_AC], eax
		call	purple_notify_message
		mov	eax, 1
		jmp	loc_68886EA4
; ---------------------------------------------------------------------------
		align 4

loc_68886FD8:				; CODE XREF: sub_68886D3C+159j
		mov	[esp+0ACh+var_A4], eax
		mov	[esp+0ACh+var_A8], offset aChatnavErrorRe ; "chatnav error: received response that m"...
		mov	[esp+0ACh+var_AC], offset aOscar_3 ; "oscar"
		call	purple_debug_warning
		mov	eax, [edi+0Ch]
		mov	[esp+0ACh+var_AC], eax
		call	g_free
		mov	[esp+0ACh+var_AC], edi
		call	g_free
		xor	eax, eax
		jmp	loc_68886D95
; ---------------------------------------------------------------------------

loc_6888700A:				; CODE XREF: sub_68886D3C+B1j
		mov	[esp+0ACh+var_AC], esi
		call	aim_tlvlist_read
		mov	[esp+0ACh+var_4C], eax
		mov	[esp+0ACh+var_A4], 1
		mov	[esp+0ACh+var_A8], 2
		mov	[esp+0ACh+var_AC], eax
		call	aim_tlv_gettlv
		test	eax, eax
		jz	loc_6888754E
		mov	[esp+0ACh+var_A4], 1
		mov	[esp+0ACh+var_A8], 2
		mov	eax, [esp+0ACh+var_4C]
		mov	[esp+0ACh+var_AC], eax
		call	aim_tlv_get8
		mov	byte ptr [esp+0ACh+var_40], al

loc_68887056:				; CODE XREF: sub_68886D3C+817j
		mov	edi, 18h
		xor	esi, esi
		mov	[esp+0ACh+var_50], 0
		mov	[esp+0ACh+var_48], ebp
		xor	ebp, ebp
		mov	[esp+0ACh+var_44], ebx
		jmp	loc_688871BE
; ---------------------------------------------------------------------------

loc_68887074:				; CODE XREF: sub_68886D3C+59Dj
		mov	[esp+0ACh+var_A4], 1
		mov	[esp+0ACh+var_A8], 0D3h
		mov	[esp+0ACh+var_AC], ebx
		call	aim_tlv_getstr
		mov	[esi+4], eax

loc_6888708F:				; CODE XREF: sub_68886D3C+5AAj
		mov	[esp+0ACh+var_A4], 1
		mov	[esp+0ACh+var_A8], 0D5h
		mov	[esp+0ACh+var_AC], ebx
		call	aim_tlv_gettlv
		test	eax, eax
		jz	short loc_688870C3
		mov	[esp+0ACh+var_A4], 1
		mov	[esp+0ACh+var_A8], 0D5h
		mov	[esp+0ACh+var_AC], ebx
		call	aim_tlv_get8

loc_688870C3:				; CODE XREF: sub_68886D3C+36Dj
		mov	[esp+0ACh+var_A4], 1
		mov	[esp+0ACh+var_A8], 0D6h
		mov	[esp+0ACh+var_AC], ebx
		call	aim_tlv_gettlv
		test	eax, eax
		jz	loc_68887310
		mov	[esp+0ACh+var_A4], 1
		mov	[esp+0ACh+var_A8], 0D6h
		mov	[esp+0ACh+var_AC], ebx
		call	aim_tlv_getstr
		mov	[esi+8], eax

loc_688870FE:				; CODE XREF: sub_68886D3C+5DBj
		mov	[esp+0ACh+var_A4], 1
		mov	[esp+0ACh+var_A8], 0D7h
		mov	[esp+0ACh+var_AC], ebx
		call	aim_tlv_gettlv
		test	eax, eax
		jz	loc_68887304
		mov	[esp+0ACh+var_A4], 1
		mov	[esp+0ACh+var_A8], 0D7h
		mov	[esp+0ACh+var_AC], ebx
		call	aim_tlv_getstr
		mov	[esi+0Ch], eax

loc_68887139:				; CODE XREF: sub_68886D3C+5CFj
		mov	[esp+0ACh+var_A4], 1
		mov	[esp+0ACh+var_A8], 0D8h
		mov	[esp+0ACh+var_AC], ebx
		call	aim_tlv_gettlv
		test	eax, eax
		jz	loc_688872F8
		mov	[esp+0ACh+var_A4], 1
		mov	[esp+0ACh+var_A8], 0D8h
		mov	[esp+0ACh+var_AC], ebx
		call	aim_tlv_getstr
		mov	[esi+10h], eax

loc_68887174:				; CODE XREF: sub_68886D3C+5C3j
		mov	[esp+0ACh+var_A4], 1
		mov	[esp+0ACh+var_A8], 0D9h
		mov	[esp+0ACh+var_AC], ebx
		call	aim_tlv_gettlv
		test	eax, eax
		jz	loc_688872EC
		mov	[esp+0ACh+var_A4], 1
		mov	[esp+0ACh+var_A8], 0D9h
		mov	[esp+0ACh+var_AC], ebx
		call	aim_tlv_getstr
		mov	[esi+14h], eax

loc_688871AF:				; CODE XREF: sub_68886D3C+5B7j
		mov	[esp+0ACh+var_AC], ebx
		call	aim_tlvlist_free
		add	edi, 18h
		mov	esi, [esp+0ACh+var_50]

loc_688871BE:				; CODE XREF: sub_68886D3C+333j
		lea	edx, [esi+1]
		mov	[esp+0ACh+var_50], edx
		mov	[esp+0ACh+var_A4], edx
		mov	[esp+0ACh+var_A8], 3
		mov	eax, [esp+0ACh+var_4C]
		mov	[esp+0ACh+var_AC], eax
		call	aim_tlv_gettlv
		test	eax, eax
		jz	loc_6888731C
		movzx	edx, word ptr [eax+2]
		mov	[esp+0ACh+var_A4], edx
		mov	eax, [eax+4]
		mov	[esp+0ACh+var_A8], eax
		lea	edx, [esp+0ACh+var_2C]
		mov	[esp+0ACh+var_AC], edx
		call	sub_68881798
		mov	[esp+0ACh+var_A8], edi
		mov	[esp+0ACh+var_AC], ebp
		call	g_realloc
		mov	ebp, eax
		lea	esi, [eax+edi-18h]
		lea	ecx, [esp+0ACh+var_2C]
		mov	[esp+0ACh+var_AC], ecx
		call	sub_688819F0
		mov	[esi], ax
		lea	eax, [esp+0ACh+var_2C]
		mov	[esp+0ACh+var_AC], eax
		call	aim_tlvlist_read
		mov	ebx, eax
		mov	[esp+0ACh+var_A4], 1
		mov	[esp+0ACh+var_A8], 2
		mov	[esp+0ACh+var_AC], eax
		call	aim_tlv_gettlv
		test	eax, eax
		jz	short loc_68887287
		mov	[esp+0ACh+var_A4], 1
		mov	[esp+0ACh+var_A8], 2
		mov	[esp+0ACh+var_AC], ebx
		call	aim_tlv_get16
		movzx	eax, ax
		mov	[esp+0ACh+var_A4], eax
		mov	[esp+0ACh+var_A8], offset aFaimClassPermi ; "faim: class permissions %x\n"
		mov	[esp+0ACh+var_AC], offset aOscar_3 ; "oscar"
		call	purple_debug_misc

loc_68887287:				; CODE XREF: sub_68886D3C+516j
		mov	[esp+0ACh+var_A4], 1
		mov	[esp+0ACh+var_A8], 0C9h
		mov	[esp+0ACh+var_AC], ebx
		call	aim_tlv_gettlv
		test	eax, eax
		jz	short loc_688872BF
		mov	[esp+0ACh+var_A4], 1
		mov	[esp+0ACh+var_A8], 0C9h
		mov	[esp+0ACh+var_AC], ebx
		call	aim_tlv_get16
		mov	[esi+2], ax

loc_688872BF:				; CODE XREF: sub_68886D3C+565j
		mov	[esp+0ACh+var_A4], 1
		mov	[esp+0ACh+var_A8], 0D3h
		mov	[esp+0ACh+var_AC], ebx
		call	aim_tlv_gettlv
		test	eax, eax
		jnz	loc_68887074
		mov	dword ptr [esi+4], 0
		jmp	loc_6888708F
; ---------------------------------------------------------------------------
		align 4

loc_688872EC:				; CODE XREF: sub_68886D3C+452j
		mov	dword ptr [esi+14h], 0
		jmp	loc_688871AF
; ---------------------------------------------------------------------------

loc_688872F8:				; CODE XREF: sub_68886D3C+417j
		mov	dword ptr [esi+10h], 0
		jmp	loc_68887174
; ---------------------------------------------------------------------------

loc_68887304:				; CODE XREF: sub_68886D3C+3DCj
		mov	dword ptr [esi+0Ch], 0
		jmp	loc_68887139
; ---------------------------------------------------------------------------

loc_68887310:				; CODE XREF: sub_68886D3C+3A1j
		mov	dword ptr [esi+8], 0
		jmp	loc_688870FE
; ---------------------------------------------------------------------------

loc_6888731C:				; CODE XREF: sub_68886D3C+4A3j
		mov	[esp+0ACh+var_50], ebp
		mov	ebp, [esp+0ACh+var_48]
		mov	ebx, [esp+0ACh+var_44]
		movzx	eax, word ptr [ebx+2]
		mov	[esp+0ACh+var_A4], eax
		movzx	eax, word ptr [ebx]
		mov	[esp+0ACh+var_A8], eax
		mov	[esp+0ACh+var_AC], ebp
		call	aim_callhandler
		test	eax, eax
		jz	loc_68887547
		mov	edx, [esp+0ACh+var_50]
		mov	[esp+0ACh+var_94], edx
		mov	[esp+0ACh+var_98], esi
		movzx	edx, byte ptr [esp+0ACh+var_40]
		mov	[esp+0ACh+var_9C], edx
		mov	ecx, [esp+0ACh+var_54]
		movzx	edx, word ptr [ecx+6]
		mov	[esp+0ACh+var_A0], edx
		mov	edx, [esp+0ACh+var_58]
		mov	[esp+0ACh+var_A4], edx
		mov	ecx, [esp+0ACh+var_5C]
		mov	[esp+0ACh+var_A8], ecx
		mov	[esp+0ACh+var_AC], ebp
		call	eax

loc_6888737D:				; CODE XREF: sub_68886D3C+80Dj
		dec	esi
		js	short loc_688873D1
		lea	edx, [esi+esi*2]
		mov	ecx, [esp+0ACh+var_50]
		lea	ebx, [ecx+edx*8+4]
		mov	edi, eax
		lea	esi, [esi+0]

loc_68887390:				; CODE XREF: sub_68886D3C+691j
		mov	eax, [ebx]
		mov	[esp+0ACh+var_AC], eax
		call	g_free
		mov	eax, [ebx+4]
		mov	[esp+0ACh+var_AC], eax
		call	g_free
		mov	eax, [ebx+8]
		mov	[esp+0ACh+var_AC], eax
		call	g_free
		mov	eax, [ebx+0Ch]
		mov	[esp+0ACh+var_AC], eax
		call	g_free
		mov	edx, [ebx+10h]
		mov	[esp+0ACh+var_AC], edx
		call	g_free
		dec	esi
		sub	ebx, 18h
		cmp	esi, 0FFFFFFFFh
		jnz	short loc_68887390
		mov	eax, edi

loc_688873D1:				; CODE XREF: sub_68886D3C+642j
		mov	edx, [esp+0ACh+var_50]
		mov	[esp+0ACh+var_AC], edx
		mov	[esp+0ACh+var_60], eax
		call	g_free
		mov	ecx, [esp+0ACh+var_4C]
		mov	[esp+0ACh+var_AC], ecx
		call	aim_tlvlist_free
		mov	eax, [esp+0ACh+var_60]
		jmp	loc_68886E49
; ---------------------------------------------------------------------------

loc_688873F6:				; CODE XREF: sub_68886D3C+BBj
		mov	[esp+0ACh+var_A8], offset aChatnav_pars_1 ; "chatnav_parse_info: response to exchang"...
		mov	[esp+0ACh+var_AC], offset aOscar_3 ; "oscar"
		call	purple_debug_misc
		xor	eax, eax
		jmp	loc_68886E49
; ---------------------------------------------------------------------------

loc_68887411:				; CODE XREF: sub_68886D3C+EDj
		mov	[esp+0ACh+var_AC], esi
		call	aim_tlvlist_read
		mov	edi, eax
		mov	[esp+0ACh+var_A4], 1
		mov	[esp+0ACh+var_A8], 4
		mov	[esp+0ACh+var_AC], eax
		call	aim_tlv_gettlv
		test	eax, eax
		jz	loc_68887833
		movzx	edx, word ptr [eax+2]
		mov	[esp+0ACh+var_A4], edx
		mov	eax, [eax+4]
		mov	[esp+0ACh+var_A8], eax
		lea	esi, [esp+0ACh+var_2C]
		mov	[esp+0ACh+var_AC], esi
		call	sub_68881798
		mov	[esp+0ACh+var_AC], esi
		call	sub_688819F0
		mov	word ptr [esp+0ACh+var_4C], ax
		mov	[esp+0ACh+var_AC], esi
		call	sub_68881990
		movzx	eax, al
		mov	[esp+0ACh+var_A8], eax
		mov	[esp+0ACh+var_AC], esi
		call	sub_68881D24
		mov	[esp+0ACh+var_50], eax
		mov	[esp+0ACh+var_AC], esi
		call	sub_688819F0
		mov	word ptr [esp+0ACh+var_48], ax
		mov	[esp+0ACh+var_AC], esi
		call	sub_68881990
		cmp	al, 2
		jz	loc_68887558
		movzx	eax, al
		mov	[esp+0ACh+var_A4], eax
		mov	[esp+0ACh+var_A8], offset aUnknownDetaill ; "unknown detaillevel in create room	resp"...
		mov	[esp+0ACh+var_AC], offset aOscar_3 ; "oscar"
		call	purple_debug_misc
		mov	[esp+0ACh+var_AC], edi
		call	aim_tlvlist_free
		mov	eax, [esp+0ACh+var_50]
		mov	[esp+0ACh+var_AC], eax
		call	g_free
		xor	eax, eax
		jmp	loc_68886E49
; ---------------------------------------------------------------------------

loc_688874D4:				; CODE XREF: sub_68886D3C+C5j
		mov	[esp+0ACh+var_A8], offset aChatnav_pars_2 ; "chatnav_parse_info: response to room in"...
		mov	[esp+0ACh+var_AC], offset aOscar_3 ; "oscar"
		call	purple_debug_misc
		xor	eax, eax
		jmp	loc_68886E49
; ---------------------------------------------------------------------------

loc_688874EF:				; CODE XREF: sub_68886D3C+CFj
		mov	[esp+0ACh+var_A8], offset aChatnav_pars_3 ; "chatnav_parse_info: response to more ro"...
		mov	[esp+0ACh+var_AC], offset aOscar_3 ; "oscar"
		call	purple_debug_misc
		xor	eax, eax
		jmp	loc_68886E49
; ---------------------------------------------------------------------------

loc_6888750A:				; CODE XREF: sub_68886D3C+8Dj
		mov	eax, [ebx+8]
		mov	[esp+0ACh+var_A4], eax
		mov	[esp+0ACh+var_A8], offset aFaimChatnav__0 ; "faim: chatnav_parse_info: received	resp"...
		mov	[esp+0ACh+var_AC], offset aOscar_3 ; "oscar"
		call	purple_debug_misc
		xor	eax, eax
		jmp	loc_68886D95
; ---------------------------------------------------------------------------

loc_6888752C:				; CODE XREF: sub_68886D3C+E3j
		mov	[esp+0ACh+var_A8], offset aChatnav_pars_4 ; "chatnav_parse_info: search	results\n"
		mov	[esp+0ACh+var_AC], offset aOscar_3 ; "oscar"
		call	purple_debug_misc
		xor	eax, eax
		jmp	loc_68886E49
; ---------------------------------------------------------------------------

loc_68887547:				; CODE XREF: sub_68886D3C+605j
		xor	eax, eax
		jmp	loc_6888737D
; ---------------------------------------------------------------------------

loc_6888754E:				; CODE XREF: sub_68886D3C+2F4j
		mov	byte ptr [esp+0ACh+var_40], 0
		jmp	loc_68887056
; ---------------------------------------------------------------------------

loc_68887558:				; CODE XREF: sub_68886D3C+75Cj
		mov	[esp+0ACh+var_AC], esi
		call	sub_688819F0
		mov	[esp+0ACh+var_3A], ax
		mov	[esp+0ACh+var_AC], esi
		call	aim_tlvlist_read
		mov	esi, eax
		mov	[esp+0ACh+var_A4], 1
		mov	[esp+0ACh+var_A8], 6Ah
		mov	[esp+0ACh+var_AC], eax
		call	aim_tlv_gettlv
		test	eax, eax
		jz	loc_688878A5
		mov	[esp+0ACh+var_A4], 1
		mov	[esp+0ACh+var_A8], 6Ah
		mov	[esp+0ACh+var_AC], esi
		call	aim_tlv_getstr
		mov	[esp+0ACh+var_44], eax

loc_688875AB:				; CODE XREF: sub_68886D3C+B71j
		mov	[esp+0ACh+var_A4], 1
		mov	[esp+0ACh+var_A8], 0C9h
		mov	[esp+0ACh+var_AC], esi
		call	aim_tlv_gettlv
		test	eax, eax
		jz	loc_68887899
		mov	[esp+0ACh+var_A4], 1
		mov	[esp+0ACh+var_A8], 0C9h
		mov	[esp+0ACh+var_AC], esi
		call	aim_tlv_get16
		mov	[esp+0ACh+var_34], ax

loc_688875E8:				; CODE XREF: sub_68886D3C+B64j
		mov	[esp+0ACh+var_A4], 1
		mov	[esp+0ACh+var_A8], 0CAh
		mov	[esp+0ACh+var_AC], esi
		call	aim_tlv_gettlv
		test	eax, eax
		jz	loc_6888788C
		mov	[esp+0ACh+var_A4], 1
		mov	[esp+0ACh+var_A8], 0CAh
		mov	[esp+0ACh+var_AC], esi
		call	aim_tlv_get32
		mov	[esp+0ACh+var_38], eax

loc_68887624:				; CODE XREF: sub_68886D3C+B58j
		mov	[esp+0ACh+var_A4], 1
		mov	[esp+0ACh+var_A8], 0D1h
		mov	[esp+0ACh+var_AC], esi
		call	aim_tlv_gettlv
		test	eax, eax
		jz	loc_68887880
		mov	[esp+0ACh+var_A4], 1
		mov	[esp+0ACh+var_A8], 0D1h
		mov	[esp+0ACh+var_AC], esi
		call	aim_tlv_get16
		mov	[esp+0ACh+var_32], ax

loc_68887661:				; CODE XREF: sub_68886D3C+B4Bj
		mov	[esp+0ACh+var_A4], 1
		mov	[esp+0ACh+var_A8], 0D2h
		mov	[esp+0ACh+var_AC], esi
		call	aim_tlv_gettlv
		test	eax, eax
		jz	loc_68887874
		mov	[esp+0ACh+var_A4], 1
		mov	[esp+0ACh+var_A8], 0D2h
		mov	[esp+0ACh+var_AC], esi
		call	aim_tlv_get16
		mov	[esp+0ACh+var_30], ax

loc_6888769E:				; CODE XREF: sub_68886D3C+B3Fj
		mov	[esp+0ACh+var_A4], 1
		mov	[esp+0ACh+var_A8], 0D3h
		mov	[esp+0ACh+var_AC], esi
		call	aim_tlv_gettlv
		test	eax, eax
		jz	loc_68887867
		mov	[esp+0ACh+var_A4], 1
		mov	[esp+0ACh+var_A8], 0D3h
		mov	[esp+0ACh+var_AC], esi
		call	aim_tlv_getstr
		mov	[esp+0ACh+var_40], eax

loc_688876DA:				; CODE XREF: sub_68886D3C+B33j
		mov	[esp+0ACh+var_A4], 1
		mov	[esp+0ACh+var_A8], 0D5h
		mov	[esp+0ACh+var_AC], esi
		call	aim_tlv_gettlv
		test	eax, eax
		jz	loc_6888785D
		mov	[esp+0ACh+var_A4], 1
		mov	[esp+0ACh+var_A8], 0D5h
		mov	[esp+0ACh+var_AC], esi
		call	aim_tlv_get8
		mov	[esp+0ACh+var_2D], al

loc_68887716:				; CODE XREF: sub_68886D3C+B26j
		movzx	eax, word ptr [ebx+2]
		mov	[esp+0ACh+var_A4], eax
		movzx	eax, word ptr [ebx]
		mov	[esp+0ACh+var_A8], eax
		mov	[esp+0ACh+var_AC], ebp
		call	aim_callhandler
		test	eax, eax
		jz	loc_68887856
		mov	edx, [esp+0ACh+var_50]
		mov	[esp+0ACh+var_74], edx
		mov	ecx, [esp+0ACh+var_40]
		mov	[esp+0ACh+var_78], ecx
		movzx	edx, [esp+0ACh+var_3A]
		mov	[esp+0ACh+var_7C], edx
		movzx	edx, [esp+0ACh+var_2D]
		mov	[esp+0ACh+var_80], edx
		movzx	edx, [esp+0ACh+var_30]
		mov	[esp+0ACh+var_84], edx
		movzx	edx, [esp+0ACh+var_32]
		mov	[esp+0ACh+var_88], edx
		mov	edx, [esp+0ACh+var_38]
		mov	[esp+0ACh+var_8C], edx
		movzx	edx, [esp+0ACh+var_34]
		mov	[esp+0ACh+var_90], edx
		movzx	edx, word ptr [esp+0ACh+var_4C]
		mov	[esp+0ACh+var_94], edx
		movzx	edx, word ptr [esp+0ACh+var_48]
		mov	[esp+0ACh+var_98], edx
		mov	ecx, [esp+0ACh+var_44]
		mov	[esp+0ACh+var_9C], ecx
		mov	ecx, [esp+0ACh+var_54]
		movzx	edx, word ptr [ecx+6]
		mov	[esp+0ACh+var_A0], edx
		mov	edx, [esp+0ACh+var_58]
		mov	[esp+0ACh+var_A4], edx
		mov	ecx, [esp+0ACh+var_5C]
		mov	[esp+0ACh+var_A8], ecx
		mov	[esp+0ACh+var_AC], ebp
		call	eax

loc_688877B5:				; CODE XREF: sub_68886D3C+B1Cj
		mov	edx, [esp+0ACh+var_50]
		mov	[esp+0ACh+var_AC], edx
		mov	[esp+0ACh+var_60], eax
		call	g_free
		mov	ecx, [esp+0ACh+var_40]
		mov	[esp+0ACh+var_AC], ecx
		call	g_free
		mov	edx, [esp+0ACh+var_44]
		mov	[esp+0ACh+var_AC], edx
		call	g_free
		mov	[esp+0ACh+var_AC], esi
		call	aim_tlvlist_free
		mov	[esp+0ACh+var_AC], edi
		call	aim_tlvlist_free
		mov	eax, [esp+0ACh+var_60]
		jmp	loc_68886E49
; ---------------------------------------------------------------------------

loc_688877F6:				; CODE XREF: sub_68886D3C+14Bj
		mov	eax, [ebx+8]
		mov	[esp+0ACh+var_A4], eax
		mov	[esp+0ACh+var_A8], offset aChatnavError_0 ; "chatnav error: received response to unk"...
		mov	[esp+0ACh+var_AC], offset aOscar_3 ; "oscar"
		call	purple_debug_warning
		xor	eax, eax
		jmp	loc_68886D95
; ---------------------------------------------------------------------------

loc_68887818:				; CODE XREF: sub_68886D3C+22Dj
		mov	[esp+0ACh+var_A8], offset aInvalidChatRoo ; "Invalid chat room name"
		mov	[esp+0ACh+var_AC], offset aPidgin_2 ; "pidgin"
		call	libintl_dgettext
		mov	ebx, eax
		jmp	loc_68886F85
; ---------------------------------------------------------------------------

loc_68887833:				; CODE XREF: sub_68886D3C+6F9j
		mov	[esp+0ACh+var_A8], offset aNoBigblockInTo ; "no	bigblock in top	tlv in create room r"...
		mov	[esp+0ACh+var_AC], offset aOscar_3 ; "oscar"
		call	purple_debug_misc
		mov	[esp+0ACh+var_AC], edi
		call	aim_tlvlist_free
		xor	eax, eax
		jmp	loc_68886E49
; ---------------------------------------------------------------------------

loc_68887856:				; CODE XREF: sub_68886D3C+9F3j
		xor	eax, eax
		jmp	loc_688877B5
; ---------------------------------------------------------------------------

loc_6888785D:				; CODE XREF: sub_68886D3C+9B8j
		mov	[esp+0ACh+var_2D], 0
		jmp	loc_68887716
; ---------------------------------------------------------------------------

loc_68887867:				; CODE XREF: sub_68886D3C+97Cj
		mov	[esp+0ACh+var_40], 0
		jmp	loc_688876DA
; ---------------------------------------------------------------------------

loc_68887874:				; CODE XREF: sub_68886D3C+93Fj
		mov	[esp+0ACh+var_30], 0
		jmp	loc_6888769E
; ---------------------------------------------------------------------------

loc_68887880:				; CODE XREF: sub_68886D3C+902j
		mov	[esp+0ACh+var_32], 0
		jmp	loc_68887661
; ---------------------------------------------------------------------------

loc_6888788C:				; CODE XREF: sub_68886D3C+8C6j
		mov	[esp+0ACh+var_38], 0
		jmp	loc_68887624
; ---------------------------------------------------------------------------

loc_68887899:				; CODE XREF: sub_68886D3C+889j
		mov	[esp+0ACh+var_34], 0
		jmp	loc_688875E8
; ---------------------------------------------------------------------------

loc_688878A5:				; CODE XREF: sub_68886D3C+84Dj
		mov	[esp+0ACh+var_44], 0
		jmp	loc_688875AB
; ---------------------------------------------------------------------------

loc_688878B2:				; CODE XREF: sub_68886D3C+66j
		call	__stack_chk_fail
sub_68886D3C	endp

; ---------------------------------------------------------------------------
		align 4
; Exported entry  24. aim_chatnav_reqrights

; =============== S U B	R O U T	I N E =======================================


		public aim_chatnav_reqrights
aim_chatnav_reqrights proc near		; CODE XREF: .text:6889ED23p

var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_10		= dword	ptr -10h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		sub	esp, 2Ch
		mov	eax, ds:__stack_chk_guard
		mov	[esp+2Ch+var_10], eax
		xor	eax, eax
		mov	[esp+2Ch+var_20], 2
		mov	[esp+2Ch+var_24], 0Dh
		mov	eax, [esp+2Ch+arg_4]
		mov	[esp+2Ch+var_28], eax
		mov	eax, [esp+2Ch+arg_0]
		mov	[esp+2Ch+var_2C], eax
		call	aim_genericreq_n_snacid
		mov	eax, [esp+2Ch+var_10]
		xor	eax, ds:__stack_chk_guard
		jnz	short loc_688878FA
		add	esp, 2Ch
		retn
; ---------------------------------------------------------------------------

loc_688878FA:				; CODE XREF: aim_chatnav_reqrights+3Cj
		call	__stack_chk_fail
aim_chatnav_reqrights endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  23. aim_chatnav_createroom

; =============== S U B	R O U T	I N E =======================================


		public aim_chatnav_createroom
aim_chatnav_createroom proc near	; CODE XREF: sub_6889D028+179p
					; oscar_join_chat+133p

var_6C		= dword	ptr -6Ch
var_68		= dword	ptr -68h
var_64		= dword	ptr -64h
var_60		= dword	ptr -60h
var_5C		= dword	ptr -5Ch
var_58		= dword	ptr -58h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_30		= dword	ptr -30h
var_2C		= byte ptr -2Ch
var_20		= dword	ptr -20h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= word ptr  10h

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 5Ch
		mov	edi, [esp+6Ch+arg_0]
		mov	ebp, [esp+6Ch+arg_4]
		mov	ecx, [esp+6Ch+arg_8]
		movzx	esi, [esp+6Ch+arg_C]
		mov	eax, ds:__stack_chk_guard
		mov	[esp+6Ch+var_20], eax
		xor	eax, eax
		mov	[esp+6Ch+var_30], 0
		mov	[esp+6Ch+var_68], 476h
		lea	ebx, [esp+6Ch+var_2C]
		mov	[esp+6Ch+var_6C], ebx
		mov	[esp+6Ch+var_40], ecx
		call	sub_68881748
		mov	[esp+6Ch+var_58], 0
		mov	[esp+6Ch+var_5C], 0
		mov	[esp+6Ch+var_60], 0
		mov	[esp+6Ch+var_64], 8
		mov	[esp+6Ch+var_68], 0Dh
		mov	[esp+6Ch+var_6C], edi
		call	aim_cachesnac
		mov	[esp+6Ch+var_68], esi
		mov	[esp+6Ch+var_6C], ebx
		mov	[esp+6Ch+var_44], eax
		call	sub_68881E0C
		mov	[esp+6Ch+var_68], 6
		mov	[esp+6Ch+var_6C], ebx
		call	sub_68881DA4
		mov	[esp+6Ch+var_68], offset aCreate ; "create"
		mov	[esp+6Ch+var_6C], ebx
		call	sub_68882114
		mov	[esp+6Ch+var_68], 0FFFFh
		mov	[esp+6Ch+var_6C], ebx
		call	sub_68881E0C
		mov	[esp+6Ch+var_68], 1
		mov	[esp+6Ch+var_6C], ebx
		call	sub_68881DA4
		mov	ecx, [esp+6Ch+var_40]
		mov	[esp+6Ch+var_64], ecx
		mov	[esp+6Ch+var_68], 0D3h
		lea	esi, [esp+6Ch+var_30]
		mov	[esp+6Ch+var_6C], esi
		call	aim_tlvlist_add_str
		mov	[esp+6Ch+var_64], offset aUsAscii_0 ; "us-ascii"
		mov	[esp+6Ch+var_68], 0D6h
		mov	[esp+6Ch+var_6C], esi
		call	aim_tlvlist_add_str
		mov	[esp+6Ch+var_64], offset aEn ; "en"
		mov	[esp+6Ch+var_68], 0D7h
		mov	[esp+6Ch+var_6C], esi
		call	aim_tlvlist_add_str
		mov	eax, [esp+6Ch+var_30]
		mov	[esp+6Ch+var_6C], eax
		call	aim_tlvlist_count
		and	eax, 0FFFFh
		mov	[esp+6Ch+var_68], eax
		mov	[esp+6Ch+var_6C], ebx
		call	sub_68881E0C
		mov	[esp+6Ch+var_68], esi
		mov	[esp+6Ch+var_6C], ebx
		call	aim_tlvlist_write
		mov	eax, [esp+6Ch+var_30]
		mov	[esp+6Ch+var_6C], eax
		call	aim_tlvlist_free
		mov	[esp+6Ch+var_58], ebx
		mov	edx, [esp+6Ch+var_44]
		mov	[esp+6Ch+var_5C], edx
		mov	[esp+6Ch+var_60], 8
		mov	[esp+6Ch+var_64], 0Dh
		mov	[esp+6Ch+var_68], ebp
		mov	[esp+6Ch+var_6C], edi
		call	flap_connection_send_snac
		mov	[esp+6Ch+var_6C], ebx
		call	sub_688817E4
		xor	eax, eax
		mov	edx, [esp+6Ch+var_20]
		xor	edx, ds:__stack_chk_guard
		jnz	short loc_68887A8A
		add	esp, 5Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_68887A8A:				; CODE XREF: aim_chatnav_createroom+180j
		call	__stack_chk_fail
aim_chatnav_createroom endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 180. chatnav_modfirst

; =============== S U B	R O U T	I N E =======================================


		public chatnav_modfirst
chatnav_modfirst proc near		; DATA XREF: oscar_data_new+122o

Dest		= dword	ptr -2Ch
Source		= dword	ptr -28h
Count		= dword	ptr -24h
var_10		= dword	ptr -10h
arg_4		= dword	ptr  8

		push	ebx
		sub	esp, 28h
		mov	ebx, [esp+2Ch+arg_4]
		mov	eax, ds:__stack_chk_guard
		mov	[esp+2Ch+var_10], eax
		xor	eax, eax
		mov	word ptr [ebx],	0Dh
		mov	word ptr [ebx+2], 1
		mov	word ptr [ebx+4], 10h
		mov	word ptr [ebx+6], 629h
		mov	word ptr [ebx+8], 0
		mov	[esp+2Ch+Count], 11h ; Count
		mov	[esp+2Ch+Source], offset aChatnav ; "chatnav"
		lea	eax, [ebx+0Ah]
		mov	[esp+2Ch+Dest],	eax ; Dest
		call	strncpy
		mov	dword ptr [ebx+1Ch], offset sub_68886D3C
		xor	eax, eax
		mov	edx, [esp+2Ch+var_10]
		xor	edx, ds:__stack_chk_guard
		jnz	short loc_68887AF5
		add	esp, 28h
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_68887AF5:				; CODE XREF: chatnav_modfirst+5Ej
		call	__stack_chk_fail
chatnav_modfirst endp

; ---------------------------------------------------------------------------
		align 4

; =============== S U B	R O U T	I N E =======================================


sub_68887AFC	proc near		; CODE XREF: sub_68887BD8+22j
					; aim_ssi_reqdata+30p

var_2C		= dword	ptr -2Ch
var_10		= dword	ptr -10h

		push	edi
		push	esi
		push	ebx
		sub	esp, 20h
		mov	esi, eax
		mov	eax, ds:__stack_chk_guard
		mov	[esp+2Ch+var_10], eax
		xor	eax, eax
		mov	ebx, [esi+0D4h]
		test	ebx, ebx
		jz	short loc_68887B42
		lea	esi, [esi+0]

loc_68887B1C:				; CODE XREF: sub_68887AFC+44j
		mov	edi, [ebx+10h]
		mov	eax, [ebx]
		mov	[esp+2Ch+var_2C], eax
		call	g_free
		mov	eax, [ebx+0Ch]
		mov	[esp+2Ch+var_2C], eax
		call	aim_tlvlist_free
		mov	[esp+2Ch+var_2C], ebx
		call	g_free
		mov	ebx, edi
		test	edi, edi
		jnz	short loc_68887B1C

loc_68887B42:				; CODE XREF: sub_68887AFC+1Bj
		mov	ebx, [esi+0D8h]
		test	ebx, ebx
		jz	short loc_68887B72

loc_68887B4C:				; CODE XREF: sub_68887AFC+74j
		mov	edi, [ebx+10h]
		mov	eax, [ebx]
		mov	[esp+2Ch+var_2C], eax
		call	g_free
		mov	eax, [ebx+0Ch]
		mov	[esp+2Ch+var_2C], eax
		call	aim_tlvlist_free
		mov	[esp+2Ch+var_2C], ebx
		call	g_free
		mov	ebx, edi
		test	edi, edi
		jnz	short loc_68887B4C

loc_68887B72:				; CODE XREF: sub_68887AFC+4Ej
		mov	edx, [esi+0DCh]
		test	edx, edx
		jz	short loc_68887B8D

loc_68887B7C:				; CODE XREF: sub_68887AFC+8Fj
		mov	ebx, [edx+0Ch]
		mov	[esp+2Ch+var_2C], edx
		call	g_free
		mov	edx, ebx
		test	ebx, ebx
		jnz	short loc_68887B7C

loc_68887B8D:				; CODE XREF: sub_68887AFC+7Ej
		mov	word ptr [esi+0D0h], 0
		mov	dword ptr [esi+0D4h], 0
		mov	dword ptr [esi+0D8h], 0
		mov	dword ptr [esi+0DCh], 0
		mov	dword ptr [esi+0E0h], 0
		mov	eax, [esp+2Ch+var_10]
		xor	eax, ds:__stack_chk_guard
		jnz	short loc_68887BD1
		add	esp, 20h
		pop	ebx
		pop	esi
		pop	edi
		retn
; ---------------------------------------------------------------------------

loc_68887BD1:				; CODE XREF: sub_68887AFC+CCj
		call	__stack_chk_fail
sub_68887AFC	endp

; ---------------------------------------------------------------------------
		align 4

; =============== S U B	R O U T	I N E =======================================


sub_68887BD8	proc near		; DATA XREF: ssi_modfirst+52o

var_10		= dword	ptr -10h
arg_0		= dword	ptr  4

		sub	esp, 1Ch
		mov	eax, [esp+1Ch+arg_0]
		mov	edx, ds:__stack_chk_guard
		mov	[esp+1Ch+var_10], edx
		xor	edx, edx
		mov	edx, [esp+1Ch+var_10]
		xor	edx, ds:__stack_chk_guard
		jnz	short loc_68887BFF
		add	esp, 1Ch
		jmp	sub_68887AFC
; ---------------------------------------------------------------------------

loc_68887BFF:				; CODE XREF: sub_68887BD8+1Dj
		call	__stack_chk_fail
sub_68887BD8	endp


; =============== S U B	R O U T	I N E =======================================


sub_68887C04	proc near		; CODE XREF: sub_68888E10+89Fp
					; sub_68888E10+8C7p ...

var_2C		= dword	ptr -2Ch
var_10		= dword	ptr -10h

		push	ebx
		sub	esp, 28h
		mov	ebx, edx
		mov	edx, ds:__stack_chk_guard
		mov	[esp+2Ch+var_10], edx
		xor	edx, edx
		mov	ecx, [eax]
		test	ecx, ecx
		jz	short loc_68887C72
		test	ebx, ebx
		jz	short loc_68887C72
		cmp	ecx, ebx
		jnz	short loc_68887C2A
		jmp	short loc_68887C6B
; ---------------------------------------------------------------------------
		align 4

loc_68887C28:				; CODE XREF: sub_68887C04+2Fj
		mov	ecx, eax

loc_68887C2A:				; CODE XREF: sub_68887C04+1Ej
		mov	eax, [ecx+10h]
		test	eax, eax
		jz	short loc_68887C3B
		cmp	ebx, eax
		jnz	short loc_68887C28
		mov	eax, [ebx+10h]
		mov	[ecx+10h], eax

loc_68887C3B:				; CODE XREF: sub_68887C04+2Bj
					; sub_68887C04+6Cj
		mov	eax, [ebx]
		mov	[esp+2Ch+var_2C], eax
		call	g_free
		mov	eax, [ebx+0Ch]
		mov	[esp+2Ch+var_2C], eax
		call	aim_tlvlist_free
		mov	[esp+2Ch+var_2C], ebx
		call	g_free
		xor	eax, eax

loc_68887C5A:				; CODE XREF: sub_68887C04+73j
		mov	edx, [esp+2Ch+var_10]
		xor	edx, ds:__stack_chk_guard
		jnz	short loc_68887C79
		add	esp, 28h
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_68887C6B:				; CODE XREF: sub_68887C04+20j
		mov	edx, [ebx+10h]
		mov	[eax], edx
		jmp	short loc_68887C3B
; ---------------------------------------------------------------------------

loc_68887C72:				; CODE XREF: sub_68887C04+16j
					; sub_68887C04+1Aj
		mov	eax, 0FFFFFFEAh
		jmp	short loc_68887C5A
; ---------------------------------------------------------------------------

loc_68887C79:				; CODE XREF: sub_68887C04+60j
		call	__stack_chk_fail
sub_68887C04	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_68887C80	proc near		; CODE XREF: sub_688887DC+2B9p
					; sub_688887DC+4B0p ...

var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_10		= dword	ptr -10h

		push	edi
		push	esi
		push	ebx
		sub	esp, 30h
		mov	ebx, ds:__stack_chk_guard
		mov	[esp+3Ch+var_10], ebx
		xor	ebx, ebx
		mov	edi, [ecx]
		test	edi, edi
		jz	short loc_68887D04

loc_68887C98:				; CODE XREF: sub_68887C80+89j
		movzx	esi, word ptr [ecx+8]
		xor	ebx, ebx
		xchg	ax, ax

loc_68887CA0:				; CODE XREF: sub_68887C80+2Ej
		cmp	si, ds:word_688AF6E0[ebx*8]
		jz	short loc_68887CF8
		inc	ebx
		cmp	ebx, 0Fh
		jnz	short loc_68887CA0
		mov	ebx, offset aUnknown ; "unknown"

loc_68887CB5:				; CODE XREF: sub_68887C80+7Fj
		mov	[esp+3Ch+var_20], edi
		mov	[esp+3Ch+var_24], ebx
		mov	[esp+3Ch+var_28], esi
		movzx	ebx, word ptr [ecx+6]
		mov	[esp+3Ch+var_2C], ebx
		movzx	ecx, word ptr [ecx+4]
		mov	[esp+3Ch+var_30], ecx
		mov	[esp+3Ch+var_34], edx
		mov	[esp+3Ch+var_38], offset aSGid0x04hxBid0 ; "%s gid=0x%04hx, bid=0x%04hx, list_type="...
		mov	[esp+3Ch+var_3C], eax
		call	g_string_append_printf
		mov	eax, [esp+3Ch+var_10]
		xor	eax, ds:__stack_chk_guard
		jnz	short loc_68887D0B
		add	esp, 30h
		pop	ebx
		pop	esi
		pop	edi
		retn
; ---------------------------------------------------------------------------

loc_68887CF8:				; CODE XREF: sub_68887C80+28j
		mov	ebx, ds:off_688AF6E4[ebx*8]
		jmp	short loc_68887CB5
; ---------------------------------------------------------------------------
		align 4

loc_68887D04:				; CODE XREF: sub_68887C80+16j
		mov	edi, offset aNull ; "(null)"
		jmp	short loc_68887C98
; ---------------------------------------------------------------------------

loc_68887D0B:				; CODE XREF: sub_68887C80+6Fj
		call	__stack_chk_fail
sub_68887C80	endp


; =============== S U B	R O U T	I N E =======================================


sub_68887D10	proc near		; CODE XREF: sub_68888E10+275p
					; sub_68888E10+376p ...

var_5C		= dword	ptr -5Ch
var_40		= dword	ptr -40h
var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_20		= dword	ptr -20h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 4Ch
		mov	[esp+5Ch+var_38], eax
		mov	[esp+5Ch+var_34], edx
		mov	edx, [esp+5Ch+arg_0]
		mov	eax, [esp+5Ch+arg_8]
		mov	[esp+5Ch+var_30], eax
		mov	edi, ecx
		mov	ebp, edx
		mov	esi, [esp+5Ch+arg_4]
		mov	eax, ds:__stack_chk_guard
		mov	[esp+5Ch+var_20], eax
		xor	eax, eax
		mov	[esp+5Ch+var_5C], 14h
		mov	[esp+5Ch+var_40], edx
		mov	[esp+5Ch+var_3C], ecx
		call	g_malloc
		mov	ebx, eax
		mov	eax, [esp+5Ch+var_34]
		mov	[esp+5Ch+var_5C], eax
		call	g_strdup
		mov	[ebx], eax
		mov	ecx, [esp+5Ch+var_3C]
		mov	[ebx+4], cx
		mov	edx, [esp+5Ch+var_40]
		mov	[ebx+6], dx
		cmp	si, 1
		jz	loc_68887E80
		test	di, di
		jz	loc_68887E10
		inc	bp
		jz	loc_68887EE4
		lea	esi, [esi+0]

loc_68887D90:				; CODE XREF: sub_68887D10+102j
					; sub_68887D10+116j ...
		mov	[ebx+8], si
		mov	edx, [esp+5Ch+var_30]
		mov	[esp+5Ch+var_5C], edx
		call	aim_tlvlist_copy
		mov	[ebx+0Ch], eax
		mov	eax, [esp+5Ch+var_38]
		mov	ecx, [eax]
		test	ecx, ecx
		jz	loc_68887ED0
		mov	esi, [ebx+4]
		cmp	si, [ecx+4]
		jb	loc_68887E70
		jz	loc_68887E60

loc_68887DC4:				; CODE XREF: sub_68887D10+158j
		mov	eax, [ecx+10h]
		test	eax, eax
		jnz	short loc_68887DD2
		jmp	short loc_68887DED
; ---------------------------------------------------------------------------
		align 10h

loc_68887DD0:				; CODE XREF: sub_68887D10+DBj
		mov	eax, edx

loc_68887DD2:				; CODE XREF: sub_68887D10+B9j
		cmp	si, [eax+4]
		ja	short loc_68887DE4
		jnz	short loc_68887DED
		mov	dx, [eax+6]
		cmp	[ebx+6], dx
		jbe	short loc_68887DED

loc_68887DE4:				; CODE XREF: sub_68887D10+C6j
		mov	edx, [eax+10h]
		mov	ecx, eax
		test	edx, edx
		jnz	short loc_68887DD0

loc_68887DED:				; CODE XREF: sub_68887D10+BBj
					; sub_68887D10+C8j ...
		mov	eax, [ecx+10h]
		mov	[ebx+10h], eax
		mov	[ecx+10h], ebx

loc_68887DF6:				; CODE XREF: sub_68887D10+169j
					; sub_68887D10+1CDj
		mov	eax, ebx
		mov	edx, [esp+5Ch+var_20]
		xor	edx, ds:__stack_chk_guard
		jnz	loc_68887F1F
		add	esp, 4Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_68887E10:				; CODE XREF: sub_68887D10+6Fj
		inc	bp
		jnz	loc_68887D90
		mov	eax, [esp+5Ch+var_38]
		mov	ecx, [eax]
		mov	word ptr [ebx+6], 0
		test	ecx, ecx
		jz	loc_68887D90
		xor	edx, edx
		xchg	ax, ax

loc_68887E30:				; CODE XREF: sub_68887D10+14Cj
		cmp	dx, [ecx+6]
		jz	short loc_68887E57
		cmp	dx, [ecx+4]
		jz	short loc_68887E57
		mov	eax, ecx
		jmp	short loc_68887E46
; ---------------------------------------------------------------------------

loc_68887E40:				; CODE XREF: sub_68887D10+145j
		cmp	dx, [eax+4]
		jz	short loc_68887E57

loc_68887E46:				; CODE XREF: sub_68887D10+12Ej
		mov	eax, [eax+10h]
		test	eax, eax
		jz	loc_68887D90
		cmp	dx, [eax+6]
		jnz	short loc_68887E40

loc_68887E57:				; CODE XREF: sub_68887D10+124j
					; sub_68887D10+12Aj ...
		inc	edx
		mov	[ebx+6], dx
		jmp	short loc_68887E30
; ---------------------------------------------------------------------------
		align 10h

loc_68887E60:				; CODE XREF: sub_68887D10+AEj
		mov	dx, [ecx+6]
		cmp	[ebx+6], dx
		jnb	loc_68887DC4
		xchg	ax, ax

loc_68887E70:				; CODE XREF: sub_68887D10+A8j
		mov	[ebx+10h], ecx
		mov	eax, [esp+5Ch+var_38]
		mov	[eax], ebx
		jmp	loc_68887DF6
; ---------------------------------------------------------------------------
		align 10h

loc_68887E80:				; CODE XREF: sub_68887D10+66j
		inc	di
		jnz	loc_68887D90
		mov	eax, [esp+5Ch+var_34]
		test	eax, eax
		jz	loc_68887D90
		mov	eax, [esp+5Ch+var_38]
		mov	ecx, [eax]
		mov	word ptr [ebx+4], 0
		test	ecx, ecx
		jz	loc_68887D90
		xor	edx, edx

loc_68887EAA:				; CODE XREF: sub_68887D10+1BDj
		mov	eax, ecx
		jmp	short loc_68887EBB
; ---------------------------------------------------------------------------
		align 10h

loc_68887EB0:				; CODE XREF: sub_68887D10+1B0j
					; sub_68887D10+1B6j
		mov	eax, [eax+10h]
		test	eax, eax
		jz	loc_68887D90

loc_68887EBB:				; CODE XREF: sub_68887D10+19Cj
		cmp	word ptr [eax+8], 1
		jnz	short loc_68887EB0
		cmp	dx, [eax+4]
		jnz	short loc_68887EB0
		inc	edx
		mov	[ebx+4], dx
		jmp	short loc_68887EAA
; ---------------------------------------------------------------------------
		align 10h

loc_68887ED0:				; CODE XREF: sub_68887D10+9Bj
		mov	dword ptr [ebx+10h], 0
		mov	eax, [esp+5Ch+var_38]
		mov	[eax], ebx
		jmp	loc_68887DF6
; ---------------------------------------------------------------------------
		align 4

loc_68887EE4:				; CODE XREF: sub_68887D10+77j
		mov	eax, [esp+5Ch+var_38]
		mov	edi, [eax]
		mov	word ptr [ebx+6], 0
		test	edi, edi
		jz	loc_68887D90
		xor	ecx, ecx
		xchg	ax, ax

loc_68887EFC:				; CODE XREF: sub_68887D10+20Dj
		mov	edx, [ebx+4]
		cmp	[edi+4], edx
		jz	short loc_68887F18
		mov	eax, edi
		xchg	ax, ax

loc_68887F08:				; CODE XREF: sub_68887D10+206j
		mov	eax, [eax+10h]
		test	eax, eax
		jz	loc_68887D90
		cmp	[eax+4], edx
		jnz	short loc_68887F08

loc_68887F18:				; CODE XREF: sub_68887D10+1F2j
		inc	ecx
		mov	[ebx+6], cx
		jmp	short loc_68887EFC
; ---------------------------------------------------------------------------

loc_68887F1F:				; CODE XREF: sub_68887D10+F2j
		call	__stack_chk_fail
sub_68887D10	endp

; Exported entry  97. aim_ssi_itemlist_find

; =============== S U B	R O U T	I N E =======================================


		public aim_ssi_itemlist_find
aim_ssi_itemlist_find proc near		; CODE XREF: sub_688A46F4+5F3p

var_10		= dword	ptr -10h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	ebx
		sub	esp, 18h
		mov	eax, [esp+1Ch+arg_0]
		mov	edx, [esp+1Ch+arg_4]
		mov	ecx, [esp+1Ch+arg_8]
		mov	ebx, ds:__stack_chk_guard
		mov	[esp+1Ch+var_10], ebx
		xor	ebx, ebx
		test	eax, eax
		jnz	short loc_68887F4F
		jmp	short loc_68887F6C
; ---------------------------------------------------------------------------
		align 4

loc_68887F48:				; CODE XREF: aim_ssi_itemlist_find+2Fj
					; aim_ssi_itemlist_find+35j
		mov	eax, [eax+10h]
		test	eax, eax
		jz	short loc_68887F5B

loc_68887F4F:				; CODE XREF: aim_ssi_itemlist_find+1Ej
		cmp	[eax+4], dx
		jnz	short loc_68887F48
		cmp	[eax+6], cx
		jnz	short loc_68887F48

loc_68887F5B:				; CODE XREF: aim_ssi_itemlist_find+29j
					; aim_ssi_itemlist_find+4Aj
		mov	edx, [esp+1Ch+var_10]
		xor	edx, ds:__stack_chk_guard
		jnz	short loc_68887F70
		add	esp, 18h
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_68887F6C:				; CODE XREF: aim_ssi_itemlist_find+20j
		xor	eax, eax
		jmp	short loc_68887F5B
; ---------------------------------------------------------------------------

loc_68887F70:				; CODE XREF: aim_ssi_itemlist_find+41j
		call	__stack_chk_fail
aim_ssi_itemlist_find endp

; ---------------------------------------------------------------------------
		align 4
; Exported entry  98. aim_ssi_itemlist_finditem

; =============== S U B	R O U T	I N E =======================================


		public aim_ssi_itemlist_finditem
aim_ssi_itemlist_finditem proc near	; CODE XREF: oscar_auth_sendrequest+AFp
					; sub_688880D4+2Ap ...

var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_20		= dword	ptr -20h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 3Ch
		mov	edx, [esp+4Ch+arg_0]
		mov	[esp+4Ch+var_34], edx
		mov	edx, [esp+4Ch+arg_4]
		mov	[esp+4Ch+var_30], edx
		mov	esi, [esp+4Ch+arg_8]
		mov	ebp, [esp+4Ch+arg_C]
		mov	eax, ds:__stack_chk_guard
		mov	[esp+4Ch+var_20], eax
		xor	eax, eax
		mov	ebx, [esp+4Ch+var_34]
		test	ebx, ebx
		jz	loc_68888080
		mov	edi, [esp+4Ch+var_34]
		mov	ecx, [esp+4Ch+var_30]
		test	ecx, ecx
		jz	loc_68888084
		test	esi, esi
		jnz	short loc_68887FD3
		jmp	loc_68888070
; ---------------------------------------------------------------------------
		align 4

loc_68887FC8:				; CODE XREF: aim_ssi_itemlist_finditem+5Fj
					; aim_ssi_itemlist_finditem+65j ...
		mov	edi, [edi+10h]
		test	edi, edi
		jz	loc_68888080

loc_68887FD3:				; CODE XREF: aim_ssi_itemlist_finditem+48j
		cmp	[edi+8], bp
		jnz	short loc_68887FC8
		mov	eax, [edi]
		test	eax, eax
		jz	short loc_68887FC8
		mov	[esp+4Ch+var_48], esi
		mov	[esp+4Ch+var_4C], eax
		call	oscar_util_name_compare
		test	eax, eax
		jnz	short loc_68887FC8
		mov	ebx, [esp+4Ch+var_34]
		jmp	short loc_68887FFF
; ---------------------------------------------------------------------------
		align 4

loc_68887FF8:				; CODE XREF: aim_ssi_itemlist_finditem+8Cj
					; aim_ssi_itemlist_finditem+95j ...
		mov	ebx, [ebx+10h]
		test	ebx, ebx
		jz	short loc_68887FC8

loc_68887FFF:				; CODE XREF: aim_ssi_itemlist_finditem+7Bj
		cmp	word ptr [ebx+8], 1
		jnz	short loc_68887FF8
		mov	edx, [edi+4]
		cmp	[ebx+4], dx
		jnz	short loc_68887FF8
		mov	eax, [ebx]
		test	eax, eax
		jz	short loc_68887FF8
		mov	edx, [esp+4Ch+var_30]
		mov	[esp+4Ch+var_48], edx
		mov	[esp+4Ch+var_4C], eax
		call	oscar_util_name_compare
		test	eax, eax
		jnz	short loc_68887FF8
		lea	esi, [esi+0]

loc_6888802C:				; CODE XREF: aim_ssi_itemlist_finditem+EFj
					; aim_ssi_itemlist_finditem+10Aj ...
		mov	eax, edi
		mov	edx, [esp+4Ch+var_20]
		xor	edx, ds:__stack_chk_guard
		jnz	loc_688880CD
		add	esp, 3Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 4

loc_68888048:				; CODE XREF: aim_ssi_itemlist_finditem+FCj
		cmp	word ptr [edi+6], 0
		jnz	short loc_68888069
		mov	eax, [edi]
		test	eax, eax
		jz	short loc_68888069
		mov	edx, [esp+4Ch+var_30]
		mov	[esp+4Ch+var_48], edx
		mov	[esp+4Ch+var_4C], eax
		call	oscar_util_name_compare
		test	eax, eax
		jz	short loc_6888802C

loc_68888069:				; CODE XREF: aim_ssi_itemlist_finditem+D5j
					; aim_ssi_itemlist_finditem+DBj
		mov	edi, [edi+10h]
		test	edi, edi
		jz	short loc_68888080

loc_68888070:				; CODE XREF: aim_ssi_itemlist_finditem+4Aj
					; aim_ssi_itemlist_finditem+103j
		cmp	[edi+8], bp
		jz	short loc_68888048
		mov	edi, [edi+10h]
		test	edi, edi
		jnz	short loc_68888070
		lea	esi, [esi+0]

loc_68888080:				; CODE XREF: aim_ssi_itemlist_finditem+30j
					; aim_ssi_itemlist_finditem+55j ...
		xor	edi, edi
		jmp	short loc_6888802C
; ---------------------------------------------------------------------------

loc_68888084:				; CODE XREF: aim_ssi_itemlist_finditem+40j
		test	esi, esi
		jnz	short loc_68888093
		jmp	short loc_688880C5
; ---------------------------------------------------------------------------
		align 4

loc_6888808C:				; CODE XREF: aim_ssi_itemlist_finditem+11Fj
					; aim_ssi_itemlist_finditem+125j ...
		mov	edi, [edi+10h]
		test	edi, edi
		jz	short loc_68888080

loc_68888093:				; CODE XREF: aim_ssi_itemlist_finditem+10Ej
		cmp	[edi+8], bp
		jnz	short loc_6888808C
		mov	eax, [edi]
		test	eax, eax
		jz	short loc_6888808C
		mov	[esp+4Ch+var_48], esi
		mov	[esp+4Ch+var_4C], eax
		call	oscar_util_name_compare
		test	eax, eax
		jnz	short loc_6888808C
		jmp	loc_6888802C
; ---------------------------------------------------------------------------

loc_688880B4:				; CODE XREF: aim_ssi_itemlist_finditem+153j
		mov	edx, [edi]
		test	edx, edx
		jz	loc_6888802C

loc_688880BE:				; CODE XREF: aim_ssi_itemlist_finditem+151j
		mov	edi, [edi+10h]
		test	edi, edi
		jz	short loc_68888080

loc_688880C5:				; CODE XREF: aim_ssi_itemlist_finditem+110j
		cmp	[edi+8], bp
		jnz	short loc_688880BE
		jmp	short loc_688880B4
; ---------------------------------------------------------------------------

loc_688880CD:				; CODE XREF: aim_ssi_itemlist_finditem+C0j
		call	__stack_chk_fail
aim_ssi_itemlist_finditem endp

; ---------------------------------------------------------------------------
		align 4

; =============== S U B	R O U T	I N E =======================================


sub_688880D4	proc near		; CODE XREF: aim_ssi_delgroup+84p
					; aim_ssi_delbuddy+58p	...

var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_10		= dword	ptr -10h

		push	edi
		push	esi
		push	ebx
		sub	esp, 20h
		mov	esi, eax
		mov	eax, ds:__stack_chk_guard
		mov	[esp+2Ch+var_10], eax
		xor	eax, eax
		mov	[esp+2Ch+var_20], 1
		mov	[esp+2Ch+var_24], 0
		mov	[esp+2Ch+var_28], edx
		mov	[esp+2Ch+var_2C], esi
		call	aim_ssi_itemlist_finditem
		mov	ebx, eax
		test	eax, eax
		jz	loc_688881C8
		mov	eax, [eax+4]
		test	ax, ax
		jnz	loc_688881DC
		test	esi, esi
		jz	loc_688881C8
		mov	edx, esi
		xor	ecx, ecx
		jmp	short loc_6888812F
; ---------------------------------------------------------------------------
		align 4

loc_68888128:				; CODE XREF: sub_688880D4+60j
					; sub_688880D4+67j
		mov	edx, [edx+10h]
		test	edx, edx
		jz	short loc_68888148

loc_6888812F:				; CODE XREF: sub_688880D4+51j
					; sub_688880D4+71j
		cmp	word ptr [edx+8], 1
		jnz	short loc_68888128
		cmp	word ptr [edx+4], 0
		jz	short loc_68888128
		add	ecx, 2
		mov	edx, [edx+10h]
		test	edx, edx
		jnz	short loc_6888812F
		nop

loc_68888148:				; CODE XREF: sub_688880D4+59j
					; sub_688880D4+119j
		test	ecx, ecx
		jle	short loc_688881C8
		mov	[esp+2Ch+var_2C], ecx
		call	g_malloc
		mov	edi, eax
		mov	ecx, [ebx+4]
		test	cx, cx
		jz	loc_68888208
		test	esi, esi
		jz	loc_68888240
		mov	edx, esi
		xor	eax, eax
		jmp	short loc_6888817A
; ---------------------------------------------------------------------------

loc_68888170:				; CODE XREF: sub_688880D4+AAj
					; sub_688880D4+B1j
		mov	edx, [edx+10h]
		test	edx, edx
		jz	short loc_688881A0

loc_68888177:				; CODE XREF: sub_688880D4+C9j
		mov	ecx, [ebx+4]

loc_6888817A:				; CODE XREF: sub_688880D4+9Aj
		cmp	[edx+4], cx
		jnz	short loc_68888170
		cmp	word ptr [edx+8], 0
		jnz	short loc_68888170
		movzx	ecx, byte ptr [edx+7]
		mov	[edi+eax], cl
		mov	cl, [edx+6]
		mov	[edi+eax+1], cl
		add	eax, 2
		mov	edx, [edx+10h]
		test	edx, edx
		jnz	short loc_68888177
		nop

loc_688881A0:				; CODE XREF: sub_688880D4+A1j
					; sub_688880D4+145j
		and	eax, 0FFFFh

loc_688881A5:				; CODE XREF: sub_688880D4+16Ej
		mov	[esp+2Ch+var_20], edi
		mov	[esp+2Ch+var_24], eax
		mov	[esp+2Ch+var_28], 0C8h
		add	ebx, 0Ch
		mov	[esp+2Ch+var_2C], ebx
		call	aim_tlvlist_replace_raw
		mov	[esp+2Ch+var_2C], edi
		call	g_free

loc_688881C8:				; CODE XREF: sub_688880D4+33j
					; sub_688880D4+47j ...
		mov	eax, [esp+2Ch+var_10]
		xor	eax, ds:__stack_chk_guard
		jnz	short loc_68888247
		add	esp, 20h
		pop	ebx
		pop	esi
		pop	edi
		retn
; ---------------------------------------------------------------------------
		align 4

loc_688881DC:				; CODE XREF: sub_688880D4+3Fj
		test	esi, esi
		jz	short loc_688881C8
		mov	edx, esi
		xor	ecx, ecx
		jmp	short loc_688881F3
; ---------------------------------------------------------------------------
		align 4

loc_688881E8:				; CODE XREF: sub_688880D4+123j
					; sub_688880D4+12Aj ...
		mov	edx, [edx+10h]
		test	edx, edx
		jz	loc_68888148

loc_688881F3:				; CODE XREF: sub_688880D4+110j
		cmp	ax, [edx+4]
		jnz	short loc_688881E8
		cmp	word ptr [edx+8], 0
		jnz	short loc_688881E8
		add	ecx, 2
		jmp	short loc_688881E8
; ---------------------------------------------------------------------------
		align 4

loc_68888208:				; CODE XREF: sub_688880D4+88j
		test	esi, esi
		jz	short loc_68888240
		mov	edx, esi
		xor	eax, eax
		jmp	short loc_6888821B
; ---------------------------------------------------------------------------
		align 4

loc_68888214:				; CODE XREF: sub_688880D4+14Cj
					; sub_688880D4+154j ...
		mov	edx, [edx+10h]
		test	edx, edx
		jz	short loc_688881A0

loc_6888821B:				; CODE XREF: sub_688880D4+13Cj
		cmp	word ptr [edx+8], 1
		jnz	short loc_68888214
		mov	ecx, [edx+4]
		test	cx, cx
		jz	short loc_68888214
		shr	cx, 8
		mov	[edi+eax], cl
		mov	cl, [edx+4]
		mov	[edi+eax+1], cl
		add	eax, 2
		jmp	short loc_68888214
; ---------------------------------------------------------------------------
		align 10h

loc_68888240:				; CODE XREF: sub_688880D4+90j
					; sub_688880D4+136j
		xor	eax, eax
		jmp	loc_688881A5
; ---------------------------------------------------------------------------

loc_68888247:				; CODE XREF: sub_688880D4+FEj
		call	__stack_chk_fail
sub_688880D4	endp

; Exported entry  96. aim_ssi_itemlist_exists

; =============== S U B	R O U T	I N E =======================================


		public aim_ssi_itemlist_exists
aim_ssi_itemlist_exists	proc near	; CODE XREF: aim_ssi_itemlist_findparentname+27p
					; sub_688A46F4+141p

var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_10		= dword	ptr -10h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		sub	esp, 2Ch
		mov	edx, [esp+2Ch+arg_0]
		mov	eax, [esp+2Ch+arg_4]
		mov	ecx, ds:__stack_chk_guard
		mov	[esp+2Ch+var_10], ecx
		xor	ecx, ecx
		test	eax, eax
		jz	short loc_68888294
		mov	[esp+2Ch+var_20], 0
		mov	[esp+2Ch+var_24], eax
		mov	[esp+2Ch+var_28], 0
		mov	[esp+2Ch+var_2C], edx
		call	aim_ssi_itemlist_finditem

loc_68888283:				; CODE XREF: aim_ssi_itemlist_exists+4Aj
		mov	edx, [esp+2Ch+var_10]
		xor	edx, ds:__stack_chk_guard
		jnz	short loc_68888298
		add	esp, 2Ch
		retn
; ---------------------------------------------------------------------------
		align 4

loc_68888294:				; CODE XREF: aim_ssi_itemlist_exists+19j
		xor	eax, eax
		jmp	short loc_68888283
; ---------------------------------------------------------------------------

loc_68888298:				; CODE XREF: aim_ssi_itemlist_exists+41j
		call	__stack_chk_fail
aim_ssi_itemlist_exists	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  99. aim_ssi_itemlist_findparentname

; =============== S U B	R O U T	I N E =======================================


		public aim_ssi_itemlist_findparentname
aim_ssi_itemlist_findparentname	proc near ; CODE XREF: sub_6889CC50+50p
					; oscar_add_buddy+167p	...

var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_10		= dword	ptr -10h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	ebx
		sub	esp, 28h
		mov	ebx, [esp+2Ch+arg_0]
		mov	eax, [esp+2Ch+arg_4]
		mov	edx, ds:__stack_chk_guard
		mov	[esp+2Ch+var_10], edx
		xor	edx, edx
		test	ebx, ebx
		jz	short loc_688882F0
		test	eax, eax
		jz	short loc_688882F0
		mov	[esp+2Ch+var_28], eax
		mov	[esp+2Ch+var_2C], ebx
		call	aim_ssi_itemlist_exists
		test	eax, eax
		jz	short loc_688882F0
		mov	eax, [eax+4]
		jmp	short loc_688882DF
; ---------------------------------------------------------------------------
		align 4

loc_688882D8:				; CODE XREF: aim_ssi_itemlist_findparentname+43j
					; aim_ssi_itemlist_findparentname+4Aj
		mov	ebx, [ebx+10h]
		test	ebx, ebx
		jz	short loc_688882F0

loc_688882DF:				; CODE XREF: aim_ssi_itemlist_findparentname+33j
		cmp	ax, [ebx+4]
		jnz	short loc_688882D8
		cmp	word ptr [ebx+6], 0
		jnz	short loc_688882D8
		mov	eax, [ebx]
		jmp	short loc_688882F2
; ---------------------------------------------------------------------------

loc_688882F0:				; CODE XREF: aim_ssi_itemlist_findparentname+1Aj
					; aim_ssi_itemlist_findparentname+1Ej ...
		xor	eax, eax

loc_688882F2:				; CODE XREF: aim_ssi_itemlist_findparentname+4Ej
		mov	edx, [esp+2Ch+var_10]
		xor	edx, ds:__stack_chk_guard
		jnz	short loc_68888303
		add	esp, 28h
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_68888303:				; CODE XREF: aim_ssi_itemlist_findparentname+5Cj
		call	__stack_chk_fail
aim_ssi_itemlist_findparentname	endp

; Exported entry  94. aim_ssi_getpermdeny

; =============== S U B	R O U T	I N E =======================================


		public aim_ssi_getpermdeny
aim_ssi_getpermdeny proc near		; CODE XREF: sub_688A46F4+4B7p

var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_10		= dword	ptr -10h
arg_0		= dword	ptr  4

		sub	esp, 2Ch
		mov	eax, ds:__stack_chk_guard
		mov	[esp+2Ch+var_10], eax
		xor	eax, eax
		mov	[esp+2Ch+var_20], 4
		mov	[esp+2Ch+var_24], 0
		mov	[esp+2Ch+var_28], 0
		mov	eax, [esp+2Ch+arg_0]
		mov	[esp+2Ch+var_2C], eax
		call	aim_ssi_itemlist_finditem
		test	eax, eax
		jz	short loc_68888378
		mov	[esp+2Ch+var_24], 1
		mov	[esp+2Ch+var_28], 0CAh
		mov	eax, [eax+0Ch]
		mov	[esp+2Ch+var_2C], eax
		call	aim_tlv_gettlv
		test	eax, eax
		jz	short loc_68888378
		mov	eax, [eax+4]
		test	eax, eax
		jz	short loc_68888378
		movzx	eax, byte ptr [eax]

loc_68888367:				; CODE XREF: aim_ssi_getpermdeny+72j
		mov	edx, [esp+2Ch+var_10]
		xor	edx, ds:__stack_chk_guard
		jnz	short loc_6888837C
		add	esp, 2Ch
		retn
; ---------------------------------------------------------------------------
		align 4

loc_68888378:				; CODE XREF: aim_ssi_getpermdeny+34j
					; aim_ssi_getpermdeny+53j ...
		xor	eax, eax
		jmp	short loc_68888367
; ---------------------------------------------------------------------------

loc_6888837C:				; CODE XREF: aim_ssi_getpermdeny+69j
		call	__stack_chk_fail
aim_ssi_getpermdeny endp

; ---------------------------------------------------------------------------
		align 4
; Exported entry  95. aim_ssi_getpresence

; =============== S U B	R O U T	I N E =======================================


		public aim_ssi_getpresence
aim_ssi_getpresence proc near		; CODE XREF: .text:6889AC6Bp
					; sub_6889ACB0+44p ...

var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_10		= dword	ptr -10h
arg_0		= dword	ptr  4

		sub	esp, 2Ch
		mov	eax, ds:__stack_chk_guard
		mov	[esp+2Ch+var_10], eax
		xor	eax, eax
		mov	[esp+2Ch+var_20], 5
		mov	[esp+2Ch+var_24], 0
		mov	[esp+2Ch+var_28], 0
		mov	eax, [esp+2Ch+arg_0]
		mov	[esp+2Ch+var_2C], eax
		call	aim_ssi_itemlist_finditem
		test	eax, eax
		jz	short loc_688883E0
		mov	[esp+2Ch+var_24], 1
		mov	[esp+2Ch+var_28], 0C9h
		mov	eax, [eax+0Ch]
		mov	[esp+2Ch+var_2C], eax
		call	aim_tlv_gettlv
		test	eax, eax
		jz	short loc_688883E0
		cmp	word ptr [eax+2], 0
		jnz	short loc_688883F8

loc_688883E0:				; CODE XREF: aim_ssi_getpresence+34j
					; aim_ssi_getpresence+53j
		mov	eax, 0FFFFFFFFh

loc_688883E5:				; CODE XREF: aim_ssi_getpresence+95j
		mov	edx, [esp+2Ch+var_10]
		xor	edx, ds:__stack_chk_guard
		jnz	short loc_6888841B
		add	esp, 2Ch
		retn
; ---------------------------------------------------------------------------
		align 4

loc_688883F8:				; CODE XREF: aim_ssi_getpresence+5Aj
		mov	edx, [eax+4]
		movzx	eax, byte ptr [edx]
		shl	eax, 18h
		movzx	ecx, byte ptr [edx+3]
		add	ecx, eax
		movzx	eax, byte ptr [edx+1]
		shl	eax, 10h
		add	eax, ecx
		movzx	edx, byte ptr [edx+2]
		shl	edx, 8
		add	eax, edx
		jmp	short loc_688883E5
; ---------------------------------------------------------------------------

loc_6888841B:				; CODE XREF: aim_ssi_getpresence+6Bj
		call	__stack_chk_fail
aim_ssi_getpresence endp

; Exported entry  91. aim_ssi_getalias

; =============== S U B	R O U T	I N E =======================================


		public aim_ssi_getalias
aim_ssi_getalias proc near		; CODE XREF: aim_ssi_cleanlist+11Bp
					; sub_6889CC50+84p ...

var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_10		= dword	ptr -10h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		sub	esp, 2Ch
		mov	eax, ds:__stack_chk_guard
		mov	[esp+2Ch+var_10], eax
		xor	eax, eax
		mov	[esp+2Ch+var_20], 0
		mov	eax, [esp+2Ch+arg_8]
		mov	[esp+2Ch+var_24], eax
		mov	eax, [esp+2Ch+arg_4]
		mov	[esp+2Ch+var_28], eax
		mov	eax, [esp+2Ch+arg_0]
		mov	[esp+2Ch+var_2C], eax
		call	aim_ssi_itemlist_finditem
		test	eax, eax
		jz	short loc_688884A0
		mov	[esp+2Ch+var_24], 1
		mov	[esp+2Ch+var_28], 131h
		mov	eax, [eax+0Ch]
		mov	[esp+2Ch+var_2C], eax
		call	aim_tlv_gettlv
		test	eax, eax
		jz	short loc_688884A0
		movzx	edx, word ptr [eax+2]
		test	dx, dx
		jz	short loc_688884A0
		mov	ecx, [esp+2Ch+var_10]
		xor	ecx, ds:__stack_chk_guard
		jnz	short loc_688884B2
		mov	[esp+2Ch+arg_4], edx
		mov	eax, [eax+4]
		mov	[esp+2Ch+arg_0], eax
		add	esp, 2Ch
		jmp	g_strndup
; ---------------------------------------------------------------------------
		align 10h

loc_688884A0:				; CODE XREF: aim_ssi_getalias+34j
					; aim_ssi_getalias+53j	...
		xor	eax, eax
		mov	edx, [esp+2Ch+var_10]
		xor	edx, ds:__stack_chk_guard
		jnz	short loc_688884B2
		add	esp, 2Ch
		retn
; ---------------------------------------------------------------------------

loc_688884B2:				; CODE XREF: aim_ssi_getalias+68j
					; aim_ssi_getalias+8Cj
		call	__stack_chk_fail
aim_ssi_getalias endp

; ---------------------------------------------------------------------------
		align 4
; Exported entry  92. aim_ssi_getcomment

; =============== S U B	R O U T	I N E =======================================


		public aim_ssi_getcomment
aim_ssi_getcomment proc	near		; CODE XREF: sub_6889A038+C3p
					; oscar_user_info_append_extra_info+FCp

var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_10		= dword	ptr -10h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		sub	esp, 2Ch
		mov	eax, ds:__stack_chk_guard
		mov	[esp+2Ch+var_10], eax
		xor	eax, eax
		mov	[esp+2Ch+var_20], 0
		mov	eax, [esp+2Ch+arg_8]
		mov	[esp+2Ch+var_24], eax
		mov	eax, [esp+2Ch+arg_4]
		mov	[esp+2Ch+var_28], eax
		mov	eax, [esp+2Ch+arg_0]
		mov	[esp+2Ch+var_2C], eax
		call	aim_ssi_itemlist_finditem
		test	eax, eax
		jz	short loc_68888538
		mov	[esp+2Ch+var_24], 1
		mov	[esp+2Ch+var_28], 13Ch
		mov	eax, [eax+0Ch]
		mov	[esp+2Ch+var_2C], eax
		call	aim_tlv_gettlv
		test	eax, eax
		jz	short loc_68888538
		movzx	edx, word ptr [eax+2]
		test	dx, dx
		jz	short loc_68888538
		mov	ecx, [esp+2Ch+var_10]
		xor	ecx, ds:__stack_chk_guard
		jnz	short loc_6888854A
		mov	[esp+2Ch+arg_4], edx
		mov	eax, [eax+4]
		mov	[esp+2Ch+arg_0], eax
		add	esp, 2Ch
		jmp	g_strndup
; ---------------------------------------------------------------------------
		align 4

loc_68888538:				; CODE XREF: aim_ssi_getcomment+34j
					; aim_ssi_getcomment+53j ...
		xor	eax, eax
		mov	edx, [esp+2Ch+var_10]
		xor	edx, ds:__stack_chk_guard
		jnz	short loc_6888854A
		add	esp, 2Ch
		retn
; ---------------------------------------------------------------------------

loc_6888854A:				; CODE XREF: aim_ssi_getcomment+68j
					; aim_ssi_getcomment+8Cj
		call	__stack_chk_fail
aim_ssi_getcomment endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 111. aim_ssi_waitingforauth

; =============== S U B	R O U T	I N E =======================================


		public aim_ssi_waitingforauth
aim_ssi_waitingforauth proc near	; CODE XREF: sub_688992D4+91p
					; oscar_add_buddy+17Dp	...

var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_10		= dword	ptr -10h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		sub	esp, 2Ch
		mov	eax, ds:__stack_chk_guard
		mov	[esp+2Ch+var_10], eax
		xor	eax, eax
		mov	[esp+2Ch+var_20], 0
		mov	eax, [esp+2Ch+arg_8]
		mov	[esp+2Ch+var_24], eax
		mov	eax, [esp+2Ch+arg_4]
		mov	[esp+2Ch+var_28], eax
		mov	eax, [esp+2Ch+arg_0]
		mov	[esp+2Ch+var_2C], eax
		call	aim_ssi_itemlist_finditem
		test	eax, eax
		jz	short loc_688885BC
		mov	[esp+2Ch+var_24], 1
		mov	[esp+2Ch+var_28], 66h
		mov	eax, [eax+0Ch]
		mov	[esp+2Ch+var_2C], eax
		call	aim_tlv_gettlv
		test	eax, eax
		setnz	al
		movzx	eax, al

loc_688885A9:				; CODE XREF: aim_ssi_waitingforauth+6Ej
		mov	edx, [esp+2Ch+var_10]
		xor	edx, ds:__stack_chk_guard
		jnz	short loc_688885C0
		add	esp, 2Ch
		retn
; ---------------------------------------------------------------------------
		align 4

loc_688885BC:				; CODE XREF: aim_ssi_waitingforauth+34j
		xor	eax, eax
		jmp	short loc_688885A9
; ---------------------------------------------------------------------------

loc_688885C0:				; CODE XREF: aim_ssi_waitingforauth+63j
		call	__stack_chk_fail
aim_ssi_waitingforauth endp

; ---------------------------------------------------------------------------
		align 4
; Exported entry 105. aim_ssi_reqrights

; =============== S U B	R O U T	I N E =======================================


		public aim_ssi_reqrights
aim_ssi_reqrights proc near		; CODE XREF: .text:6889EB8Ep

var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_10		= dword	ptr -10h
arg_0		= dword	ptr  4

		push	ebx
		sub	esp, 28h
		mov	ebx, [esp+2Ch+arg_0]
		mov	eax, ds:__stack_chk_guard
		mov	[esp+2Ch+var_10], eax
		xor	eax, eax
		test	ebx, ebx
		jz	short loc_68888624
		mov	[esp+2Ch+var_28], 13h
		mov	[esp+2Ch+var_2C], ebx
		call	flap_connection_findbygroup
		test	eax, eax
		jz	short loc_68888624
		mov	[esp+2Ch+var_20], 2
		mov	[esp+2Ch+var_24], 13h
		mov	[esp+2Ch+var_28], eax
		mov	[esp+2Ch+var_2C], ebx
		call	aim_genericreq_n_snacid
		xor	eax, eax

loc_68888611:				; CODE XREF: aim_ssi_reqrights+61j
		mov	edx, [esp+2Ch+var_10]
		xor	edx, ds:__stack_chk_guard
		jnz	short loc_6888862B
		add	esp, 28h
		pop	ebx
		retn
; ---------------------------------------------------------------------------
		align 4

loc_68888624:				; CODE XREF: aim_ssi_reqrights+15j
					; aim_ssi_reqrights+29j
		mov	eax, 0FFFFFFEAh
		jmp	short loc_68888611
; ---------------------------------------------------------------------------

loc_6888862B:				; CODE XREF: aim_ssi_reqrights+53j
		call	__stack_chk_fail
aim_ssi_reqrights endp

; Exported entry 104. aim_ssi_reqdata

; =============== S U B	R O U T	I N E =======================================


		public aim_ssi_reqdata
aim_ssi_reqdata	proc near		; CODE XREF: sub_6889CFF4+15p
					; .text:6889EB96p

var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_10		= dword	ptr -10h
arg_0		= dword	ptr  4

		push	esi
		push	ebx
		sub	esp, 24h
		mov	ebx, [esp+2Ch+arg_0]
		mov	eax, ds:__stack_chk_guard
		mov	[esp+2Ch+var_10], eax
		xor	eax, eax
		test	ebx, ebx
		jz	short loc_68888698
		mov	[esp+2Ch+var_28], 13h
		mov	[esp+2Ch+var_2C], ebx
		call	flap_connection_findbygroup
		mov	esi, eax
		test	eax, eax
		jz	short loc_68888698
		mov	eax, ebx
		call	sub_68887AFC
		mov	[esp+2Ch+var_20], 4
		mov	[esp+2Ch+var_24], 13h
		mov	[esp+2Ch+var_28], esi
		mov	[esp+2Ch+var_2C], ebx
		call	aim_genericreq_n_snacid
		xor	eax, eax

loc_68888683:				; CODE XREF: aim_ssi_reqdata+6Dj
		mov	edx, [esp+2Ch+var_10]
		xor	edx, ds:__stack_chk_guard
		jnz	short loc_6888869F
		add	esp, 24h
		pop	ebx
		pop	esi
		retn
; ---------------------------------------------------------------------------
		align 4

loc_68888698:				; CODE XREF: aim_ssi_reqdata+16j
					; aim_ssi_reqdata+2Cj
		mov	eax, 0FFFFFFEAh
		jmp	short loc_68888683
; ---------------------------------------------------------------------------

loc_6888869F:				; CODE XREF: aim_ssi_reqdata+5Dj
		call	__stack_chk_fail
aim_ssi_reqdata	endp

; Exported entry  90. aim_ssi_enable

; =============== S U B	R O U T	I N E =======================================


		public aim_ssi_enable
aim_ssi_enable	proc near		; CODE XREF: sub_688A46F4+41Ap

var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_10		= dword	ptr -10h
arg_0		= dword	ptr  4

		push	ebx
		sub	esp, 28h
		mov	ebx, [esp+2Ch+arg_0]
		mov	eax, ds:__stack_chk_guard
		mov	[esp+2Ch+var_10], eax
		xor	eax, eax
		test	ebx, ebx
		jz	short loc_68888700
		mov	[esp+2Ch+var_28], 13h
		mov	[esp+2Ch+var_2C], ebx
		call	flap_connection_findbygroup
		test	eax, eax
		jz	short loc_68888700
		mov	[esp+2Ch+var_20], 7
		mov	[esp+2Ch+var_24], 13h
		mov	[esp+2Ch+var_28], eax
		mov	[esp+2Ch+var_2C], ebx
		call	aim_genericreq_n
		xor	eax, eax

loc_688886ED:				; CODE XREF: aim_ssi_enable+61j
		mov	edx, [esp+2Ch+var_10]
		xor	edx, ds:__stack_chk_guard
		jnz	short loc_68888707
		add	esp, 28h
		pop	ebx
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_68888700:				; CODE XREF: aim_ssi_enable+15j
					; aim_ssi_enable+29j
		mov	eax, 0FFFFFFEAh
		jmp	short loc_688886ED
; ---------------------------------------------------------------------------

loc_68888707:				; CODE XREF: aim_ssi_enable+53j
		call	__stack_chk_fail
aim_ssi_enable	endp

; Exported entry 100. aim_ssi_modbegin

; =============== S U B	R O U T	I N E =======================================


		public aim_ssi_modbegin
aim_ssi_modbegin proc near		; CODE XREF: sub_688887DC+2F8p

var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_10		= dword	ptr -10h
arg_0		= dword	ptr  4

		push	ebx
		sub	esp, 28h
		mov	ebx, [esp+2Ch+arg_0]
		mov	eax, ds:__stack_chk_guard
		mov	[esp+2Ch+var_10], eax
		xor	eax, eax
		test	ebx, ebx
		jz	short loc_68888768
		mov	[esp+2Ch+var_28], 13h
		mov	[esp+2Ch+var_2C], ebx
		call	flap_connection_findbygroup
		test	eax, eax
		jz	short loc_68888768
		mov	[esp+2Ch+var_20], 11h
		mov	[esp+2Ch+var_24], 13h
		mov	[esp+2Ch+var_28], eax
		mov	[esp+2Ch+var_2C], ebx
		call	aim_genericreq_n
		xor	eax, eax

loc_68888755:				; CODE XREF: aim_ssi_modbegin+61j
		mov	edx, [esp+2Ch+var_10]
		xor	edx, ds:__stack_chk_guard
		jnz	short loc_6888876F
		add	esp, 28h
		pop	ebx
		retn
; ---------------------------------------------------------------------------
		align 4

loc_68888768:				; CODE XREF: aim_ssi_modbegin+15j
					; aim_ssi_modbegin+29j
		mov	eax, 0FFFFFFEAh
		jmp	short loc_68888755
; ---------------------------------------------------------------------------

loc_6888876F:				; CODE XREF: aim_ssi_modbegin+53j
		call	__stack_chk_fail
aim_ssi_modbegin endp

; Exported entry 101. aim_ssi_modend

; =============== S U B	R O U T	I N E =======================================


		public aim_ssi_modend
aim_ssi_modend	proc near		; CODE XREF: sub_688887DC+31Dp

var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_10		= dword	ptr -10h
arg_0		= dword	ptr  4

		push	ebx
		sub	esp, 28h
		mov	ebx, [esp+2Ch+arg_0]
		mov	eax, ds:__stack_chk_guard
		mov	[esp+2Ch+var_10], eax
		xor	eax, eax
		test	ebx, ebx
		jz	short loc_688887D0
		mov	[esp+2Ch+var_28], 13h
		mov	[esp+2Ch+var_2C], ebx
		call	flap_connection_findbygroup
		test	eax, eax
		jz	short loc_688887D0
		mov	[esp+2Ch+var_20], 12h
		mov	[esp+2Ch+var_24], 13h
		mov	[esp+2Ch+var_28], eax
		mov	[esp+2Ch+var_2C], ebx
		call	aim_genericreq_n
		xor	eax, eax

loc_688887BD:				; CODE XREF: aim_ssi_modend+61j
		mov	edx, [esp+2Ch+var_10]
		xor	edx, ds:__stack_chk_guard
		jnz	short loc_688887D7
		add	esp, 28h
		pop	ebx
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_688887D0:				; CODE XREF: aim_ssi_modend+15j
					; aim_ssi_modend+29j
		mov	eax, 0FFFFFFEAh
		jmp	short loc_688887BD
; ---------------------------------------------------------------------------

loc_688887D7:				; CODE XREF: aim_ssi_modend+53j
		call	__stack_chk_fail
aim_ssi_modend	endp


; =============== S U B	R O U T	I N E =======================================


sub_688887DC	proc near		; CODE XREF: sub_68888E10+B33p
					; aim_ssi_setpresence+88j ...

var_5C		= dword	ptr -5Ch
var_58		= dword	ptr -58h
var_54		= dword	ptr -54h
var_50		= dword	ptr -50h
var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_30		= dword	ptr -30h
var_2C		= byte ptr -2Ch
var_20		= dword	ptr -20h

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 4Ch
		mov	ebp, eax
		mov	eax, ds:__stack_chk_guard
		mov	[esp+5Ch+var_20], eax
		xor	eax, eax
		mov	[esp+5Ch+var_5C], offset byte_688AF2EF
		call	g_string_new
		test	ebp, ebp
		jz	loc_68888DB8
		mov	esi, [ebp+0E4h]
		test	esi, esi
		jnz	loc_68888A26
		mov	edi, eax
		mov	ebx, [ebp+0DCh]
		test	ebx, ebx
		jz	loc_68888B0F

loc_68888822:				; CODE XREF: sub_688887DC+38Bj
					; sub_688887DC+399j ...
		mov	eax, [edi+4]
		test	eax, eax
		jnz	loc_68888A48

loc_6888882D:				; CODE XREF: sub_688887DC+28Dj
					; sub_688887DC+2F0j
		mov	[esp+5Ch+var_58], 1
		mov	[esp+5Ch+var_5C], edi
		call	g_string_free
		mov	eax, [ebp+0DCh]
		test	eax, eax
		jz	loc_68888AE8
		mov	eax, [ebp+0E8h]
		test	eax, eax
		jz	loc_68888AD1

loc_68888859:				; CODE XREF: sub_688887DC+307j
		mov	dword ptr [ebp+0E4h], 1
		mov	[esp+5Ch+var_58], 13h
		mov	[esp+5Ch+var_5C], ebp
		call	flap_connection_findbygroup
		mov	[esp+5Ch+var_30], eax
		test	eax, eax
		jz	loc_68888DB8
		mov	esi, [ebp+0DCh]
		test	esi, esi
		jz	loc_68888DB8
		mov	edx, [esi+8]
		test	edx, edx
		jz	loc_68888DB8
		xor	ebx, ebx
		jmp	short loc_6888889F
; ---------------------------------------------------------------------------

loc_6888889C:				; CODE XREF: sub_688887DC+F1j
		mov	edx, [esi+8]

loc_6888889F:				; CODE XREF: sub_688887DC+BEj
		add	ebx, 0Ah
		mov	edi, [edx]
		test	edi, edi
		jz	short loc_688888B7
		mov	ecx, 0FFFFFFFFh
		xor	eax, eax
		repne scasb
		not	ecx
		lea	ebx, [ebx+ecx-1]

loc_688888B7:				; CODE XREF: sub_688887DC+CAj
		mov	eax, [edx+0Ch]
		test	eax, eax
		jz	short loc_688888C8
		mov	[esp+5Ch+var_5C], eax
		call	aim_tlvlist_size
		add	ebx, eax

loc_688888C8:				; CODE XREF: sub_688887DC+E0j
		mov	esi, [esi+0Ch]
		test	esi, esi
		jnz	short loc_6888889C
		mov	[esp+5Ch+var_58], ebx
		lea	esi, [esp+5Ch+var_2C]
		mov	[esp+5Ch+var_5C], esi
		call	sub_68881748
		mov	ebx, [ebp+0DCh]
		test	ebx, ebx
		jnz	short loc_6888892D
		jmp	loc_68888DC2
; ---------------------------------------------------------------------------
		align 10h

loc_688888F0:				; CODE XREF: sub_688887DC+1D2j
		mov	[esp+5Ch+var_5C], eax
		call	aim_tlvlist_size
		and	eax, 0FFFFh

loc_688888FD:				; CODE XREF: sub_688887DC+1DAj
		mov	[esp+5Ch+var_58], eax
		mov	[esp+5Ch+var_5C], esi
		call	sub_68881E0C
		mov	eax, [ebx+8]
		mov	edi, [eax+0Ch]
		test	edi, edi
		jz	short loc_68888922
		add	eax, 0Ch
		mov	[esp+5Ch+var_58], eax
		mov	[esp+5Ch+var_5C], esi
		call	aim_tlvlist_write

loc_68888922:				; CODE XREF: sub_688887DC+135j
		mov	ebx, [ebx+0Ch]
		test	ebx, ebx
		jz	loc_688889BC

loc_6888892D:				; CODE XREF: sub_688887DC+10Bj
		mov	eax, [ebx+8]
		mov	edi, [eax]
		test	edi, edi
		jz	loc_68888A40
		mov	ecx, 0FFFFFFFFh
		xor	eax, eax
		repne scasb
		not	ecx
		dec	ecx
		and	ecx, 0FFFFh

loc_6888894C:				; CODE XREF: sub_688887DC+266j
		mov	[esp+5Ch+var_58], ecx
		mov	[esp+5Ch+var_5C], esi
		call	sub_68881E0C
		mov	eax, [ebx+8]
		mov	edx, [eax]
		test	edx, edx
		jz	short loc_68888970
		mov	[esp+5Ch+var_58], edx
		mov	[esp+5Ch+var_5C], esi
		call	sub_68882114
		mov	eax, [ebx+8]

loc_68888970:				; CODE XREF: sub_688887DC+183j
		movzx	eax, word ptr [eax+4]
		mov	[esp+5Ch+var_58], eax
		mov	[esp+5Ch+var_5C], esi
		call	sub_68881E0C
		mov	eax, [ebx+8]
		movzx	eax, word ptr [eax+6]
		mov	[esp+5Ch+var_58], eax
		mov	[esp+5Ch+var_5C], esi
		call	sub_68881E0C
		mov	eax, [ebx+8]
		movzx	eax, word ptr [eax+8]
		mov	[esp+5Ch+var_58], eax
		mov	[esp+5Ch+var_5C], esi
		call	sub_68881E0C
		mov	eax, [ebx+8]
		mov	eax, [eax+0Ch]
		test	eax, eax
		jnz	loc_688888F0
		xor	eax, eax
		jmp	loc_688888FD
; ---------------------------------------------------------------------------
		align 4

loc_688889BC:				; CODE XREF: sub_688887DC+14Bj
		mov	eax, [ebp+0DCh]

loc_688889C2:				; CODE XREF: sub_688887DC+5E8j
		mov	[esp+5Ch+var_48], 0
		mov	[esp+5Ch+var_4C], 0
		mov	[esp+5Ch+var_50], 0
		movzx	eax, word ptr [eax]
		mov	[esp+5Ch+var_54], eax
		mov	[esp+5Ch+var_58], 13h
		mov	[esp+5Ch+var_5C], ebp
		call	aim_cachesnac
		mov	[esp+5Ch+var_48], esi
		mov	[esp+5Ch+var_4C], eax
		mov	eax, [ebp+0DCh]
		movzx	eax, word ptr [eax]
		mov	[esp+5Ch+var_50], eax
		mov	[esp+5Ch+var_54], 13h
		mov	eax, [esp+5Ch+var_30]
		mov	[esp+5Ch+var_58], eax
		mov	[esp+5Ch+var_5C], ebp
		call	flap_connection_send_snac
		mov	[esp+5Ch+var_5C], esi
		call	sub_688817E4

loc_68888A26:				; CODE XREF: sub_688887DC+30j
					; sub_688887DC+314j
		xor	eax, eax

loc_68888A28:				; CODE XREF: sub_688887DC+32Ej
					; sub_688887DC+5E1j
		mov	edx, [esp+5Ch+var_20]
		xor	edx, ds:__stack_chk_guard
		jnz	loc_68888DF6
		add	esp, 4Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_68888A40:				; CODE XREF: sub_688887DC+158j
		xor	ecx, ecx
		jmp	loc_6888894C
; ---------------------------------------------------------------------------
		align 4

loc_68888A48:				; CODE XREF: sub_688887DC+4Bj
		mov	eax, [edi]
		mov	[esp+5Ch+var_54], eax
		mov	[esp+5Ch+var_58], offset aS_3 ;	"%s"
		mov	[esp+5Ch+var_5C], offset aOscar_4 ; "oscar"
		call	purple_debug_info
		call	purple_debug_is_verbose
		test	eax, eax
		jz	loc_6888882D
		mov	[esp+5Ch+var_58], 0
		mov	[esp+5Ch+var_5C], edi
		call	g_string_truncate
		mov	ebx, [ebp+0D8h]
		test	ebx, ebx
		jz	short loc_68888AA1
		lea	esi, [esi+0]

loc_68888A8C:				; CODE XREF: sub_688887DC+2C3j
		mov	ecx, ebx
		mov	edx, offset asc_688AF34C ; "\t"
		mov	eax, edi
		call	sub_68887C80
		mov	ebx, [ebx+10h]
		test	ebx, ebx
		jnz	short loc_68888A8C

loc_68888AA1:				; CODE XREF: sub_688887DC+2ABj
		mov	ebx, [edi]
		mov	eax, [ebp+68h]
		mov	[esp+5Ch+var_5C], eax
		call	purple_connection_get_account
		mov	[esp+5Ch+var_50], ebx
		mov	eax, [eax]
		mov	[esp+5Ch+var_54], eax
		mov	[esp+5Ch+var_58], offset aDumpingItemLis ; "Dumping item list of account %s:\n%s"
		mov	[esp+5Ch+var_5C], offset aOscar_4 ; "oscar"
		call	purple_debug_misc
		jmp	loc_6888882D
; ---------------------------------------------------------------------------

loc_68888AD1:				; CODE XREF: sub_688887DC+77j
		mov	[esp+5Ch+var_5C], ebp
		call	aim_ssi_modbegin
		mov	dword ptr [ebp+0E8h], 1
		jmp	loc_68888859
; ---------------------------------------------------------------------------

loc_68888AE8:				; CODE XREF: sub_688887DC+69j
		mov	eax, [ebp+0E8h]
		test	eax, eax
		jz	loc_68888A26
		mov	[esp+5Ch+var_5C], ebp
		call	aim_ssi_modend
		mov	dword ptr [ebp+0E8h], 0
		xor	eax, eax
		jmp	loc_68888A28
; ---------------------------------------------------------------------------

loc_68888B0F:				; CODE XREF: sub_688887DC+40j
		mov	ebx, [ebp+0D4h]
		mov	edx, ebx
		test	ebx, ebx
		jz	loc_68888DFB
		xor	esi, esi
		lea	esi, [esi+0]

loc_68888B24:				; CODE XREF: sub_688887DC+381j
		mov	cx, [ebx+6]
		mov	edx, [ebx+4]
		mov	eax, [ebp+0D8h]
		test	eax, eax
		jnz	short loc_68888B47
		jmp	loc_68888D04
; ---------------------------------------------------------------------------
		align 4

loc_68888B3C:				; CODE XREF: sub_688887DC+36Fj
					; sub_688887DC+375j
		mov	eax, [eax+10h]
		test	eax, eax
		jz	loc_68888D04

loc_68888B47:				; CODE XREF: sub_688887DC+357j
		cmp	dx, [eax+4]
		jnz	short loc_68888B3C
		cmp	cx, [eax+6]
		jnz	short loc_68888B3C

loc_68888B53:				; CODE XREF: sub_688887DC+57Bj
		mov	ebx, [ebx+10h]
		test	ebx, ebx
		jz	short loc_68888B5F
		cmp	esi, 0Eh
		jle	short loc_68888B24

loc_68888B5F:				; CODE XREF: sub_688887DC+37Cj
		mov	ecx, [ebp+0DCh]
		test	ecx, ecx
		jnz	loc_68888822
		mov	ebx, [ebp+0D8h]
		test	ebx, ebx
		jz	loc_68888822
		cmp	esi, 0Eh
		jg	loc_68888822

loc_68888B84:				; CODE XREF: sub_688887DC+3E1j
		mov	edx, [ebp+0D4h]

loc_68888B8A:				; CODE XREF: sub_688887DC+629j
		mov	cx, [ebx+6]
		mov	eax, [ebx+4]
		test	edx, edx
		jnz	short loc_68888BA7
		jmp	loc_68888CAC
; ---------------------------------------------------------------------------
		align 4

loc_68888B9C:				; CODE XREF: sub_688887DC+3CFj
					; sub_688887DC+3D5j
		mov	edx, [edx+10h]
		test	edx, edx
		jz	loc_68888CAC

loc_68888BA7:				; CODE XREF: sub_688887DC+3B7j
		cmp	ax, [edx+4]
		jnz	short loc_68888B9C
		cmp	cx, [edx+6]
		jnz	short loc_68888B9C

loc_68888BB3:				; CODE XREF: sub_688887DC+523j
		mov	ebx, [ebx+10h]
		test	ebx, ebx
		jz	short loc_68888BBF
		cmp	esi, 0Eh
		jle	short loc_68888B84

loc_68888BBF:				; CODE XREF: sub_688887DC+3DCj
		mov	edx, [ebp+0DCh]
		test	edx, edx
		jnz	loc_68888822
		mov	ebx, [ebp+0D8h]
		test	ebx, ebx
		jz	loc_68888822
		cmp	esi, 0Eh
		jg	loc_68888822
		mov	[esp+5Ch+var_30], edi

loc_68888BE8:				; CODE XREF: sub_688887DC+4BFj
		mov	cx, [ebx+6]
		mov	eax, [ebx+4]
		mov	edi, [ebp+0D4h]
		test	edi, edi
		jnz	short loc_68888C0B
		jmp	loc_68888C91
; ---------------------------------------------------------------------------
		align 10h

loc_68888C00:				; CODE XREF: sub_688887DC+433j
					; sub_688887DC+439j
		mov	edi, [edi+10h]
		test	edi, edi
		jz	loc_68888C91

loc_68888C0B:				; CODE XREF: sub_688887DC+41Bj
		cmp	ax, [edi+4]
		jnz	short loc_68888C00
		cmp	cx, [edi+6]
		jnz	short loc_68888C00
		mov	ecx, [ebx+0Ch]
		test	ecx, ecx
		jz	loc_68888D5C
		mov	eax, [edi+0Ch]
		test	eax, eax
		jz	short loc_68888C3D
		mov	[esp+5Ch+var_58], eax
		mov	[esp+5Ch+var_5C], ecx
		call	aim_tlvlist_cmp
		test	eax, eax
		jz	loc_68888D67

loc_68888C3D:				; CODE XREF: sub_688887DC+44Bj
					; sub_688887DC+585j ...
		mov	[esp+5Ch+var_5C], 10h
		call	g_malloc
		mov	word ptr [eax],	9
		mov	word ptr [eax+2], 0FFFFh
		mov	dword ptr [eax+4], 0
		mov	[eax+8], ebx
		mov	dword ptr [eax+0Ch], 0
		mov	edx, [ebp+0DCh]
		test	edx, edx
		jnz	short loc_68888C76
		jmp	loc_68888DC9
; ---------------------------------------------------------------------------

loc_68888C74:				; CODE XREF: sub_688887DC+49Fj
		mov	edx, ecx

loc_68888C76:				; CODE XREF: sub_688887DC+491j
		mov	ecx, [edx+0Ch]
		test	ecx, ecx
		jnz	short loc_68888C74
		mov	[edx+0Ch], eax

loc_68888C80:				; CODE XREF: sub_688887DC+5F3j
		inc	esi
		mov	ecx, ebx
		mov	edx, offset aModifyingItem ; "Modifying	item "
		mov	eax, [esp+5Ch+var_30]
		call	sub_68887C80

loc_68888C91:				; CODE XREF: sub_688887DC+41Dj
					; sub_688887DC+429j ...
		mov	ebx, [ebx+10h]
		test	ebx, ebx
		jz	short loc_68888CA1
		cmp	esi, 0Eh
		jle	loc_68888BE8

loc_68888CA1:				; CODE XREF: sub_688887DC+4BAj
		mov	edi, [esp+5Ch+var_30]
		jmp	loc_68888822
; ---------------------------------------------------------------------------
		align 4

loc_68888CAC:				; CODE XREF: sub_688887DC+3B9j
					; sub_688887DC+3C5j
		mov	[esp+5Ch+var_5C], 10h
		call	g_malloc
		mov	word ptr [eax],	8
		mov	word ptr [eax+2], 0FFFFh
		mov	dword ptr [eax+4], 0
		mov	[eax+8], ebx
		mov	dword ptr [eax+0Ch], 0
		mov	edx, [ebp+0DCh]
		test	edx, edx
		jnz	short loc_68888CE6
		jmp	loc_68888DE0
; ---------------------------------------------------------------------------
		align 4

loc_68888CE4:				; CODE XREF: sub_688887DC+50Fj
		mov	edx, ecx

loc_68888CE6:				; CODE XREF: sub_688887DC+500j
		mov	ecx, [edx+0Ch]
		test	ecx, ecx
		jnz	short loc_68888CE4
		mov	[edx+0Ch], eax

loc_68888CF0:				; CODE XREF: sub_688887DC+60Aj
		inc	esi
		mov	ecx, ebx
		mov	edx, offset aAddingItem	; "Adding item "
		mov	eax, edi
		call	sub_68887C80
		jmp	loc_68888BB3
; ---------------------------------------------------------------------------

loc_68888D04:				; CODE XREF: sub_688887DC+359j
					; sub_688887DC+365j
		mov	[esp+5Ch+var_5C], 10h
		call	g_malloc
		mov	word ptr [eax],	0Ah
		mov	word ptr [eax+2], 0FFFFh
		mov	dword ptr [eax+4], 0
		mov	[eax+8], ebx
		mov	dword ptr [eax+0Ch], 0
		mov	edx, [ebp+0DCh]
		test	edx, edx
		jnz	short loc_68888D3E
		jmp	loc_68888DEB
; ---------------------------------------------------------------------------
		align 4

loc_68888D3C:				; CODE XREF: sub_688887DC+567j
		mov	edx, ecx

loc_68888D3E:				; CODE XREF: sub_688887DC+558j
		mov	ecx, [edx+0Ch]
		test	ecx, ecx
		jnz	short loc_68888D3C
		mov	[edx+0Ch], eax

loc_68888D48:				; CODE XREF: sub_688887DC+615j
		inc	esi
		mov	ecx, ebx
		mov	edx, offset aDeletingItem ; "Deleting item "
		mov	eax, edi
		call	sub_68887C80
		jmp	loc_68888B53
; ---------------------------------------------------------------------------

loc_68888D5C:				; CODE XREF: sub_688887DC+440j
		mov	eax, [edi+0Ch]
		test	eax, eax
		jnz	loc_68888C3D

loc_68888D67:				; CODE XREF: sub_688887DC+45Bj
		mov	ecx, [ebx]
		test	ecx, ecx
		jz	short loc_68888DD4
		mov	eax, [edi]
		test	eax, eax
		jz	loc_68888C3D
		mov	[esp+5Ch+var_58], eax
		mov	[esp+5Ch+var_5C], ecx
		call	oscar_util_name_compare
		test	eax, eax
		jnz	loc_68888C3D

loc_68888D8B:				; CODE XREF: sub_688887DC+602j
		mov	edx, [edi+4]
		cmp	[ebx+4], dx
		jnz	loc_68888C3D
		mov	ax, [edi+6]
		cmp	[ebx+6], ax
		jnz	loc_68888C3D
		mov	edx, [edi+8]
		cmp	[ebx+8], dx
		jnz	loc_68888C3D
		jmp	loc_68888C91
; ---------------------------------------------------------------------------

loc_68888DB8:				; CODE XREF: sub_688887DC+22j
					; sub_688887DC+9Dj ...
		mov	eax, 0FFFFFFEAh
		jmp	loc_68888A28
; ---------------------------------------------------------------------------

loc_68888DC2:				; CODE XREF: sub_688887DC+10Dj
		xor	eax, eax
		jmp	loc_688889C2
; ---------------------------------------------------------------------------

loc_68888DC9:				; CODE XREF: sub_688887DC+493j
		mov	[ebp+0DCh], eax
		jmp	loc_68888C80
; ---------------------------------------------------------------------------

loc_68888DD4:				; CODE XREF: sub_688887DC+58Fj
		mov	eax, [edi]
		test	eax, eax
		jnz	loc_68888C3D
		jmp	short loc_68888D8B
; ---------------------------------------------------------------------------

loc_68888DE0:				; CODE XREF: sub_688887DC+502j
		mov	[ebp+0DCh], eax
		jmp	loc_68888CF0
; ---------------------------------------------------------------------------

loc_68888DEB:				; CODE XREF: sub_688887DC+55Aj
		mov	[ebp+0DCh], eax
		jmp	loc_68888D48
; ---------------------------------------------------------------------------

loc_68888DF6:				; CODE XREF: sub_688887DC+256j
		call	__stack_chk_fail
; ---------------------------------------------------------------------------

loc_68888DFB:				; CODE XREF: sub_688887DC+33Dj
		mov	ebx, [ebp+0D8h]
		xor	esi, esi
		test	ebx, ebx
		jnz	loc_68888B8A
		jmp	loc_68888822
sub_688887DC	endp


; =============== S U B	R O U T	I N E =======================================


sub_68888E10	proc near		; DATA XREF: ssi_modfirst+4Bo

var_7C		= dword	ptr -7Ch
var_78		= dword	ptr -78h
var_74		= dword	ptr -74h
var_70		= dword	ptr -70h
var_6C		= dword	ptr -6Ch
var_68		= dword	ptr -68h
var_58		= dword	ptr -58h
var_54		= dword	ptr -54h
var_50		= dword	ptr -50h
var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= byte ptr -2Ch
var_20		= dword	ptr -20h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 6Ch
		mov	eax, [esp+7Ch+arg_0]
		mov	[esp+7Ch+var_50], eax
		mov	edx, [esp+7Ch+arg_4]
		mov	[esp+7Ch+var_3C], edx
		mov	ecx, [esp+7Ch+arg_C]
		mov	[esp+7Ch+var_38], ecx
		mov	eax, [esp+7Ch+arg_10]
		mov	[esp+7Ch+var_44], eax
		mov	ebp, [esp+7Ch+arg_14]
		mov	edx, ds:__stack_chk_guard
		mov	[esp+7Ch+var_20], edx
		xor	edx, edx
		mov	ax, [eax+2]
		cmp	ax, 3
		jz	loc_68888EEC
		cmp	ax, 6
		jz	loc_68888FDE
		cmp	ax, 8
		jz	loc_6888920B
		cmp	ax, 9
		jz	loc_6888941A
		cmp	ax, 0Ah
		jz	loc_688895FD
		cmp	ax, 0Eh
		jz	loc_68889720
		cmp	ax, 0Fh
		jz	loc_68889A74
		cmp	ax, 15h
		jz	loc_68889AC7
		cmp	ax, 19h
		jz	loc_68889C14
		cmp	ax, 1Bh
		jz	loc_68889CA8
		cmp	ax, 1Ch
		jz	loc_68889384

loc_68888EC8:				; CODE XREF: sub_68888E10+33Bj
					; sub_68888E10+3B1j ...
		mov	[esp+7Ch+var_48], 0

loc_68888ED0:				; CODE XREF: sub_68888E10+1C9j
					; sub_68888E10+3F6j ...
		mov	eax, [esp+7Ch+var_48]
		mov	ecx, [esp+7Ch+var_20]
		xor	ecx, ds:__stack_chk_guard
		jnz	loc_68889F5C
		add	esp, 6Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_68888EEC:				; CODE XREF: sub_68888E10+4Ej
		mov	[esp+7Ch+var_7C], ebp
		call	aim_tlvlist_read
		mov	[esp+7Ch+var_54], eax
		mov	[esp+7Ch+var_74], 1
		mov	[esp+7Ch+var_78], 4
		mov	[esp+7Ch+var_7C], eax
		call	aim_tlv_gettlv
		mov	ebx, eax
		test	eax, eax
		jz	loc_68889E78
		movzx	eax, word ptr [eax+2]
		mov	[esp+7Ch+var_74], eax
		mov	eax, [ebx+4]
		mov	[esp+7Ch+var_78], eax
		lea	edi, [esp+7Ch+var_2C]
		mov	[esp+7Ch+var_7C], edi
		call	sub_68881798
		movzx	eax, word ptr [ebx+2]
		and	eax, 0FFFEh
		mov	[esp+7Ch+var_7C], eax
		call	g_malloc
		mov	esi, eax
		mov	ax, [ebx+2]
		xor	ebp, ebp
		shr	ax, 1
		jz	short loc_68888F6F
		nop

loc_68888F54:				; CODE XREF: sub_68888E10+15Dj
		mov	[esp+7Ch+var_7C], edi
		call	sub_688819F0
		mov	[esi+ebp*2], ax
		inc	ebp
		mov	ax, [ebx+2]
		shr	ax, 1
		movzx	eax, ax
		cmp	ebp, eax
		jl	short loc_68888F54

loc_68888F6F:				; CODE XREF: sub_68888E10+141j
		mov	edx, [esp+7Ch+var_44]
		movzx	eax, word ptr [edx+2]
		mov	[esp+7Ch+var_74], eax
		movzx	eax, word ptr [edx]
		mov	[esp+7Ch+var_78], eax
		mov	eax, [esp+7Ch+var_50]
		mov	[esp+7Ch+var_7C], eax
		call	aim_callhandler
		test	eax, eax
		jz	loc_68889DCD
		mov	[esp+7Ch+var_6C], esi
		mov	dx, [ebx+2]
		shr	dx, 1
		movzx	edx, dx
		mov	[esp+7Ch+var_70], edx
		mov	edx, [esp+7Ch+var_38]
		mov	[esp+7Ch+var_74], edx
		mov	ecx, [esp+7Ch+var_3C]
		mov	[esp+7Ch+var_78], ecx
		mov	edx, [esp+7Ch+var_50]
		mov	[esp+7Ch+var_7C], edx
		call	eax
		mov	[esp+7Ch+var_48], eax

loc_68888FC5:				; CODE XREF: sub_68888E10+FC5j
		mov	eax, [esp+7Ch+var_54]
		mov	[esp+7Ch+var_7C], eax
		call	aim_tlvlist_free
		mov	[esp+7Ch+var_7C], esi
		call	g_free
		jmp	loc_68888ED0
; ---------------------------------------------------------------------------

loc_68888FDE:				; CODE XREF: sub_68888E10+58j
		mov	[esp+7Ch+var_7C], offset byte_688AF2EF
		call	g_string_new
		mov	[esp+7Ch+var_4C], eax
		mov	[esp+7Ch+var_7C], ebp
		call	sub_68881990
		mov	byte ptr [esp+7Ch+var_34], al
		mov	eax, [esp+7Ch+var_50]
		mov	ebx, [eax+0D0h]
		mov	[esp+7Ch+var_7C], ebp
		call	sub_688819F0
		add	ebx, eax
		mov	eax, [esp+7Ch+var_50]
		mov	[eax+0D0h], bx
		add	eax, 0D4h
		mov	[esp+7Ch+var_40], eax
		mov	ebx, ebp
		jmp	loc_688890B2
; ---------------------------------------------------------------------------
		align 4

loc_6888902C:				; CODE XREF: sub_68888E10+2BAj
		mov	[esp+7Ch+var_48], 0

loc_68889034:				; CODE XREF: sub_68888E10+2D3j
		mov	[esp+7Ch+var_7C], ebx
		call	sub_688819F0
		mov	ebp, eax
		mov	[esp+7Ch+var_7C], ebx
		call	sub_688819F0
		movzx	esi, ax
		mov	[esp+7Ch+var_7C], ebx
		call	sub_688819F0
		movzx	edi, ax
		mov	[esp+7Ch+var_7C], ebx
		call	sub_688819F0
		movzx	eax, ax
		mov	[esp+7Ch+var_78], eax
		mov	[esp+7Ch+var_7C], ebx
		call	aim_tlvlist_readlen
		mov	[esp+7Ch+var_54], eax
		movzx	ecx, bp
		mov	[esp+7Ch+var_74], eax
		mov	[esp+7Ch+var_78], edi
		mov	[esp+7Ch+var_7C], esi
		mov	edx, [esp+7Ch+var_48]
		mov	eax, [esp+7Ch+var_40]
		call	sub_68887D10
		mov	ecx, eax
		mov	edx, offset asc_688AF34C ; "\t"
		mov	eax, [esp+7Ch+var_4C]
		call	sub_68887C80
		mov	eax, [esp+7Ch+var_48]
		mov	[esp+7Ch+var_7C], eax
		call	g_free
		mov	eax, [esp+7Ch+var_54]
		mov	[esp+7Ch+var_7C], eax
		call	aim_tlvlist_free

loc_688890B2:				; CODE XREF: sub_68888E10+214j
		mov	[esp+7Ch+var_7C], ebx
		call	sub_68881818
		cmp	eax, 4
		jbe	short loc_688890E8
		mov	[esp+7Ch+var_7C], ebx
		call	sub_688819F0
		test	ax, ax
		jz	loc_6888902C
		movzx	eax, ax
		mov	[esp+7Ch+var_78], eax
		mov	[esp+7Ch+var_7C], ebx
		call	sub_68881D24
		mov	[esp+7Ch+var_48], eax
		jmp	loc_68889034
; ---------------------------------------------------------------------------

loc_688890E8:				; CODE XREF: sub_68888E10+2ADj
		mov	ebp, ebx
		mov	eax, [esp+7Ch+var_4C]
		mov	ebx, [eax]
		mov	edx, [esp+7Ch+var_50]
		mov	eax, [edx+68h]
		mov	[esp+7Ch+var_7C], eax
		call	purple_connection_get_account
		mov	[esp+7Ch+var_70], ebx
		mov	eax, [eax]
		mov	[esp+7Ch+var_74], eax
		mov	[esp+7Ch+var_78], offset aReadingItemsFr ; "Reading items from tlvlist for account "...
		mov	[esp+7Ch+var_7C], offset aOscar_4 ; "oscar"
		call	purple_debug_misc
		mov	[esp+7Ch+var_78], 1
		mov	eax, [esp+7Ch+var_4C]
		mov	[esp+7Ch+var_7C], eax
		call	g_string_free
		mov	[esp+7Ch+var_7C], ebp
		call	sub_68881A60
		mov	edx, [esp+7Ch+var_50]
		mov	[edx+0E0h], eax
		mov	ecx, [esp+7Ch+var_44]
		test	byte ptr [ecx+4], 1
		jnz	loc_68888EC8
		mov	eax, [esp+7Ch+var_50]
		mov	ebx, [eax+0D4h]
		lea	esi, [eax+0D8h]
		test	ebx, ebx
		jz	short loc_68889192
		lea	esi, [esi+0]

loc_68889168:				; CODE XREF: sub_68888E10+380j
		movzx	ecx, word ptr [ebx+4]
		mov	eax, [ebx+0Ch]
		mov	[esp+7Ch+var_74], eax
		movzx	eax, word ptr [ebx+8]
		mov	[esp+7Ch+var_78], eax
		movzx	edx, word ptr [ebx+6]
		mov	[esp+7Ch+var_7C], edx
		mov	edx, [ebx]
		mov	eax, esi
		call	sub_68887D10
		mov	ebx, [ebx+10h]
		test	ebx, ebx
		jnz	short loc_68889168

loc_68889192:				; CODE XREF: sub_68888E10+353j
		mov	eax, [esp+7Ch+var_50]
		mov	dword ptr [eax+0CCh], 1
		mov	edx, [esp+7Ch+var_44]
		movzx	eax, word ptr [edx+2]
		mov	[esp+7Ch+var_74], eax
		movzx	eax, word ptr [edx]
		mov	[esp+7Ch+var_78], eax
		mov	eax, [esp+7Ch+var_50]
		mov	[esp+7Ch+var_7C], eax
		call	aim_callhandler
		test	eax, eax
		jz	loc_68888EC8
		mov	ecx, [esp+7Ch+var_50]
		mov	edx, [ecx+0E0h]
		mov	[esp+7Ch+var_68], edx
		movzx	edx, word ptr [ecx+0D0h]
		mov	[esp+7Ch+var_6C], edx
		movzx	edx, byte ptr [esp+7Ch+var_34]
		mov	[esp+7Ch+var_70], edx
		mov	edx, [esp+7Ch+var_38]
		mov	[esp+7Ch+var_74], edx
		mov	ecx, [esp+7Ch+var_3C]
		mov	[esp+7Ch+var_78], ecx
		mov	edx, [esp+7Ch+var_50]
		mov	[esp+7Ch+var_7C], edx
		call	eax
		mov	[esp+7Ch+var_48], eax
		jmp	loc_68888ED0
; ---------------------------------------------------------------------------

loc_6888920B:				; CODE XREF: sub_68888E10+62j
		mov	ecx, [esp+7Ch+var_44]
		add	ecx, 2
		mov	[esp+7Ch+var_40], ecx
		mov	[esp+7Ch+var_48], 0
		mov	eax, [esp+7Ch+var_50]
		add	eax, 0D8h
		mov	[esp+7Ch+var_34], eax
		mov	edx, [esp+7Ch+var_50]
		add	edx, 0D4h
		mov	[esp+7Ch+var_30], edx
		mov	ebx, ebp
		jmp	loc_68889330
; ---------------------------------------------------------------------------

loc_68889240:				; CODE XREF: sub_68888E10+53Bj
		mov	[esp+7Ch+var_54], 0

loc_68889248:				; CODE XREF: sub_68888E10+554j
		mov	[esp+7Ch+var_7C], ebx
		call	sub_688819F0
		movzx	edi, ax
		mov	[esp+7Ch+var_7C], ebx
		call	sub_688819F0
		movzx	ebp, ax
		mov	[esp+7Ch+var_7C], ebx
		call	sub_688819F0
		movzx	esi, ax
		mov	[esp+7Ch+var_7C], ebx
		call	sub_688819F0
		test	ax, ax
		jnz	loc_6888936C
		mov	[esp+7Ch+var_4C], 0

loc_68889282:				; CODE XREF: sub_68888E10+56Fj
		mov	eax, [esp+7Ch+var_4C]
		mov	[esp+7Ch+var_74], eax
		mov	[esp+7Ch+var_78], esi
		mov	[esp+7Ch+var_7C], ebp
		mov	ecx, edi
		mov	edx, [esp+7Ch+var_54]
		mov	eax, [esp+7Ch+var_34]
		call	sub_68887D10
		mov	eax, [esp+7Ch+var_4C]
		mov	[esp+7Ch+var_74], eax
		mov	[esp+7Ch+var_78], esi
		mov	[esp+7Ch+var_7C], ebp
		mov	ecx, edi
		mov	edx, [esp+7Ch+var_54]
		mov	eax, [esp+7Ch+var_30]
		call	sub_68887D10
		mov	eax, [esp+7Ch+var_4C]
		mov	[esp+7Ch+var_7C], eax
		call	aim_tlvlist_free
		mov	edx, [esp+7Ch+var_40]
		movzx	eax, word ptr [edx]
		mov	[esp+7Ch+var_74], eax
		mov	ecx, [esp+7Ch+var_44]
		movzx	eax, word ptr [ecx]
		mov	[esp+7Ch+var_78], eax
		mov	eax, [esp+7Ch+var_50]
		mov	[esp+7Ch+var_7C], eax
		call	aim_callhandler
		test	eax, eax
		jz	short loc_68889324
		mov	edx, [esp+7Ch+var_54]
		mov	[esp+7Ch+var_68], edx
		mov	[esp+7Ch+var_6C], esi
		mov	ecx, [esp+7Ch+var_40]
		movzx	edx, word ptr [ecx]
		mov	[esp+7Ch+var_70], edx
		mov	edx, [esp+7Ch+var_38]
		mov	[esp+7Ch+var_74], edx
		mov	ecx, [esp+7Ch+var_3C]
		mov	[esp+7Ch+var_78], ecx
		mov	edx, [esp+7Ch+var_50]
		mov	[esp+7Ch+var_7C], edx
		call	eax
		mov	[esp+7Ch+var_48], eax

loc_68889324:				; CODE XREF: sub_68888E10+4DEj
		mov	eax, [esp+7Ch+var_54]
		mov	[esp+7Ch+var_7C], eax
		call	g_free

loc_68889330:				; CODE XREF: sub_68888E10+42Bj
		mov	[esp+7Ch+var_7C], ebx
		call	sub_68881818
		test	eax, eax
		jz	loc_68888ED0
		mov	[esp+7Ch+var_7C], ebx
		call	sub_688819F0
		test	ax, ax
		jz	loc_68889240
		movzx	eax, ax
		mov	[esp+7Ch+var_78], eax
		mov	[esp+7Ch+var_7C], ebx
		call	sub_68881D24
		mov	[esp+7Ch+var_54], eax
		jmp	loc_68889248
; ---------------------------------------------------------------------------
		align 4

loc_6888936C:				; CODE XREF: sub_68888E10+464j
		movzx	eax, ax
		mov	[esp+7Ch+var_78], eax
		mov	[esp+7Ch+var_7C], ebx
		call	aim_tlvlist_readlen
		mov	[esp+7Ch+var_4C], eax
		jmp	loc_68889282
; ---------------------------------------------------------------------------

loc_68889384:				; CODE XREF: sub_68888E10+B2j
		mov	[esp+7Ch+var_7C], ebp
		call	sub_68881990
		test	al, al
		jz	loc_68889B84
		movzx	eax, al
		mov	[esp+7Ch+var_78], eax
		mov	[esp+7Ch+var_7C], ebp
		call	sub_68881D24
		mov	ebx, eax
		mov	[esp+7Ch+var_74], 0
		mov	[esp+7Ch+var_78], 0FFFFFFFFh
		mov	[esp+7Ch+var_7C], eax
		call	g_utf8_validate
		test	eax, eax
		jz	loc_68889E36

loc_688893C5:				; CODE XREF: sub_68888E10+1042j
		mov	ecx, [esp+7Ch+var_44]
		movzx	eax, word ptr [ecx+2]
		mov	[esp+7Ch+var_74], eax
		movzx	eax, word ptr [ecx]
		mov	[esp+7Ch+var_78], eax
		mov	eax, [esp+7Ch+var_50]
		mov	[esp+7Ch+var_7C], eax
		call	aim_callhandler
		test	eax, eax
		jz	loc_68889E29
		mov	[esp+7Ch+var_70], ebx
		mov	edx, [esp+7Ch+var_38]
		mov	[esp+7Ch+var_74], edx
		mov	ecx, [esp+7Ch+var_3C]
		mov	[esp+7Ch+var_78], ecx
		mov	edx, [esp+7Ch+var_50]
		mov	[esp+7Ch+var_7C], edx
		call	eax
		mov	[esp+7Ch+var_48], eax

loc_6888940D:				; CODE XREF: sub_68888E10+1021j
		mov	[esp+7Ch+var_7C], ebx
		call	g_free
		jmp	loc_68888ED0
; ---------------------------------------------------------------------------

loc_6888941A:				; CODE XREF: sub_68888E10+6Cj
		mov	edx, [esp+7Ch+var_44]
		add	edx, 2
		mov	[esp+7Ch+var_34], edx
		mov	[esp+7Ch+var_48], 0
		lea	esi, [esi+0]

loc_68889430:				; CODE XREF: sub_68888E10+7B8j
		mov	[esp+7Ch+var_7C], ebp
		call	sub_68881818
		test	eax, eax
		jz	loc_68888ED0
		mov	[esp+7Ch+var_7C], ebp
		call	sub_688819F0
		test	ax, ax
		jnz	loc_688895E5
		mov	[esp+7Ch+var_54], 0

loc_68889459:				; CODE XREF: sub_68888E10+7E8j
		mov	[esp+7Ch+var_7C], ebp
		call	sub_688819F0
		mov	esi, eax
		mov	[esp+7Ch+var_7C], ebp
		call	sub_688819F0
		mov	edi, eax
		mov	[esp+7Ch+var_7C], ebp
		call	sub_688819F0
		mov	word ptr [esp+7Ch+var_40], ax
		mov	[esp+7Ch+var_7C], ebp
		call	sub_688819F0
		test	ax, ax
		jnz	loc_688895CD
		mov	[esp+7Ch+var_4C], 0

loc_68889493:				; CODE XREF: sub_68888E10+7D0j
		mov	eax, [esp+7Ch+var_50]
		mov	ebx, [eax+0D8h]
		test	ebx, ebx
		jnz	short loc_688894AB
		jmp	short loc_688894F1
; ---------------------------------------------------------------------------
		align 4

loc_688894A4:				; CODE XREF: sub_68888E10+69Fj
					; sub_68888E10+6A5j
		mov	ebx, [ebx+10h]
		test	ebx, ebx
		jz	short loc_688894F1

loc_688894AB:				; CODE XREF: sub_68888E10+68Fj
		cmp	si, [ebx+4]
		jnz	short loc_688894A4
		cmp	di, [ebx+6]
		jnz	short loc_688894A4
		mov	eax, [esp+7Ch+var_40]
		mov	[ebx+8], ax
		mov	eax, [ebx]
		mov	[esp+7Ch+var_7C], eax
		call	g_free
		mov	eax, [esp+7Ch+var_54]
		mov	[esp+7Ch+var_7C], eax
		call	g_strdup
		mov	[ebx], eax
		mov	eax, [ebx+0Ch]
		mov	[esp+7Ch+var_7C], eax
		call	aim_tlvlist_free
		mov	eax, [esp+7Ch+var_4C]
		mov	[esp+7Ch+var_7C], eax
		call	aim_tlvlist_copy
		mov	[ebx+0Ch], eax

loc_688894F1:				; CODE XREF: sub_68888E10+691j
					; sub_68888E10+699j
		mov	eax, [esp+7Ch+var_50]
		mov	ebx, [eax+0D4h]
		test	ebx, ebx
		jnz	short loc_6888950B
		jmp	short loc_68889551
; ---------------------------------------------------------------------------
		align 4

loc_68889504:				; CODE XREF: sub_68888E10+6FFj
					; sub_68888E10+705j
		mov	ebx, [ebx+10h]
		test	ebx, ebx
		jz	short loc_68889551

loc_6888950B:				; CODE XREF: sub_68888E10+6EDj
		cmp	si, [ebx+4]
		jnz	short loc_68889504
		cmp	di, [ebx+6]
		jnz	short loc_68889504
		mov	eax, [esp+7Ch+var_40]
		mov	[ebx+8], ax
		mov	eax, [ebx]
		mov	[esp+7Ch+var_7C], eax
		call	g_free
		mov	eax, [esp+7Ch+var_54]
		mov	[esp+7Ch+var_7C], eax
		call	g_strdup
		mov	[ebx], eax
		mov	eax, [ebx+0Ch]
		mov	[esp+7Ch+var_7C], eax
		call	aim_tlvlist_free
		mov	eax, [esp+7Ch+var_4C]
		mov	[esp+7Ch+var_7C], eax
		call	aim_tlvlist_copy
		mov	[ebx+0Ch], eax

loc_68889551:				; CODE XREF: sub_68888E10+6EFj
					; sub_68888E10+6F9j
		mov	edx, [esp+7Ch+var_34]
		movzx	eax, word ptr [edx]
		mov	[esp+7Ch+var_74], eax
		mov	ecx, [esp+7Ch+var_44]
		movzx	eax, word ptr [ecx]
		mov	[esp+7Ch+var_78], eax
		mov	eax, [esp+7Ch+var_50]
		mov	[esp+7Ch+var_7C], eax
		call	aim_callhandler
		test	eax, eax
		jz	short loc_688895B0
		mov	edx, [esp+7Ch+var_54]
		mov	[esp+7Ch+var_68], edx
		movzx	edi, word ptr [esp+7Ch+var_40]
		mov	[esp+7Ch+var_6C], edi
		mov	ecx, [esp+7Ch+var_34]
		movzx	edx, word ptr [ecx]
		mov	[esp+7Ch+var_70], edx
		mov	edx, [esp+7Ch+var_38]
		mov	[esp+7Ch+var_74], edx
		mov	ecx, [esp+7Ch+var_3C]
		mov	[esp+7Ch+var_78], ecx
		mov	edx, [esp+7Ch+var_50]
		mov	[esp+7Ch+var_7C], edx
		call	eax
		mov	[esp+7Ch+var_48], eax

loc_688895B0:				; CODE XREF: sub_68888E10+765j
		mov	eax, [esp+7Ch+var_54]
		mov	[esp+7Ch+var_7C], eax
		call	g_free
		mov	eax, [esp+7Ch+var_4C]
		mov	[esp+7Ch+var_7C], eax
		call	aim_tlvlist_free
		jmp	loc_68889430
; ---------------------------------------------------------------------------

loc_688895CD:				; CODE XREF: sub_68888E10+675j
		movzx	eax, ax
		mov	[esp+7Ch+var_78], eax
		mov	[esp+7Ch+var_7C], ebp
		call	aim_tlvlist_readlen
		mov	[esp+7Ch+var_4C], eax
		jmp	loc_68889493
; ---------------------------------------------------------------------------

loc_688895E5:				; CODE XREF: sub_68888E10+63Bj
		movzx	eax, ax
		mov	[esp+7Ch+var_78], eax
		mov	[esp+7Ch+var_7C], ebp
		call	sub_68881D24
		mov	[esp+7Ch+var_54], eax
		jmp	loc_68889459
; ---------------------------------------------------------------------------

loc_688895FD:				; CODE XREF: sub_68888E10+76j
		mov	edi, [esp+7Ch+var_44]
		add	edi, 2
		mov	[esp+7Ch+var_48], 0
		mov	edx, [esp+7Ch+var_50]
		add	edx, 0D8h
		mov	[esp+7Ch+var_4C], edx
		mov	ecx, [esp+7Ch+var_50]
		add	ecx, 0D4h
		mov	[esp+7Ch+var_40], ecx
		mov	[esp+7Ch+var_54], edi
		mov	esi, [esp+7Ch+var_50]

loc_68889630:				; CODE XREF: sub_68888E10+8ECj
					; sub_68888E10+90Bj
		mov	[esp+7Ch+var_7C], ebp
		call	sub_68881818
		test	eax, eax
		jz	loc_68888ED0
		mov	[esp+7Ch+var_7C], ebp
		call	sub_688819F0
		movzx	eax, ax
		mov	[esp+7Ch+var_78], eax
		mov	[esp+7Ch+var_7C], ebp
		call	sub_68881904
		mov	[esp+7Ch+var_7C], ebp
		call	sub_688819F0
		mov	ebx, eax
		mov	[esp+7Ch+var_7C], ebp
		call	sub_688819F0
		mov	edi, eax
		mov	[esp+7Ch+var_7C], ebp
		call	sub_688819F0
		mov	[esp+7Ch+var_7C], ebp
		call	sub_688819F0
		movzx	eax, ax
		mov	[esp+7Ch+var_78], eax
		mov	[esp+7Ch+var_7C], ebp
		call	sub_68881904
		mov	edx, [esi+0D8h]
		test	edx, edx
		jnz	short loc_6888969F
		jmp	short loc_688896B4
; ---------------------------------------------------------------------------
		align 4

loc_68889698:				; CODE XREF: sub_68888E10+893j
					; sub_68888E10+899j
		mov	edx, [edx+10h]
		test	edx, edx
		jz	short loc_688896B4

loc_6888969F:				; CODE XREF: sub_68888E10+882j
		cmp	bx, [edx+4]
		jnz	short loc_68889698
		cmp	di, [edx+6]
		jnz	short loc_68889698
		mov	eax, [esp+7Ch+var_4C]
		call	sub_68887C04

loc_688896B4:				; CODE XREF: sub_68888E10+884j
					; sub_68888E10+88Dj
		mov	edx, [esi+0D4h]
		test	edx, edx
		jnz	short loc_688896C7
		jmp	short loc_688896DC
; ---------------------------------------------------------------------------

loc_688896C0:				; CODE XREF: sub_68888E10+8BBj
					; sub_68888E10+8C1j
		mov	edx, [edx+10h]
		test	edx, edx
		jz	short loc_688896DC

loc_688896C7:				; CODE XREF: sub_68888E10+8ACj
		cmp	bx, [edx+4]
		jnz	short loc_688896C0
		cmp	di, [edx+6]
		jnz	short loc_688896C0
		mov	eax, [esp+7Ch+var_40]
		call	sub_68887C04

loc_688896DC:				; CODE XREF: sub_68888E10+8AEj
					; sub_68888E10+8B5j
		mov	ecx, [esp+7Ch+var_54]
		movzx	eax, word ptr [ecx]
		mov	[esp+7Ch+var_74], eax
		mov	edx, [esp+7Ch+var_44]
		movzx	eax, word ptr [edx]
		mov	[esp+7Ch+var_78], eax
		mov	[esp+7Ch+var_7C], esi
		call	aim_callhandler
		test	eax, eax
		jz	loc_68889630
		mov	ecx, [esp+7Ch+var_38]
		mov	[esp+7Ch+var_74], ecx
		mov	edx, [esp+7Ch+var_3C]
		mov	[esp+7Ch+var_78], edx
		mov	[esp+7Ch+var_7C], esi
		call	eax
		mov	[esp+7Ch+var_48], eax
		jmp	loc_68889630
; ---------------------------------------------------------------------------

loc_68889720:				; CODE XREF: sub_68888E10+80j
		mov	eax, [esp+7Ch+var_50]
		mov	ebx, [eax+0DCh]
		mov	eax, 0Eh
		test	ebx, ebx
		jnz	short loc_6888974B
		jmp	loc_68889899
; ---------------------------------------------------------------------------

loc_68889738:				; CODE XREF: sub_68888E10+945j
		mov	[esp+7Ch+var_7C], ebp
		call	sub_688819F0
		mov	[ebx+2], ax
		mov	ebx, [ebx+0Ch]
		test	ebx, ebx
		jz	short loc_68889757

loc_6888974B:				; CODE XREF: sub_68888E10+921j
		mov	[esp+7Ch+var_7C], ebp
		call	sub_68881818
		test	eax, eax
		jnz	short loc_68889738

loc_68889757:				; CODE XREF: sub_68888E10+939j
		mov	eax, [esp+7Ch+var_50]
		mov	ebx, [eax+0DCh]
		test	ebx, ebx
		jz	loc_68889891
		mov	ax, [ebx+2]
		cmp	ax, 0FFFFh
		jz	loc_68889DAF
		mov	edi, [esp+7Ch+var_50]
		add	edi, 0D4h
		mov	ebp, [esp+7Ch+var_50]
		add	ebp, 0D8h
		mov	[esp+7Ch+var_54], edi
		mov	edi, [esp+7Ch+var_50]
		jmp	short loc_688897CD
; ---------------------------------------------------------------------------
		align 4

loc_68889798:				; CODE XREF: sub_68888E10+9C9j
		cmp	ax, 8
		jz	short loc_6888981D
		cmp	ax, 9
		jz	loc_688899D8
		cmp	ax, 0Ah
		jz	loc_68889D69
		xchg	ax, ax

loc_688897B4:				; CODE XREF: sub_68888E10+9C2j
					; sub_68888E10+9DFj ...
		mov	ebx, [ebx+0Ch]
		test	ebx, ebx
		jz	loc_68889891
		mov	ax, [ebx+2]
		cmp	ax, 0FFFFh
		jz	loc_68889DAF

loc_688897CD:				; CODE XREF: sub_68888E10+983j
		mov	edx, [ebx+8]
		test	edx, edx
		jz	short loc_688897B4
		test	ax, ax
		mov	eax, [ebx]
		jnz	short loc_68889798
		cmp	ax, 8
		jz	short loc_68889850
		cmp	ax, 9
		jz	loc_6888994D
		cmp	ax, 0Ah
		jnz	short loc_688897B4
		mov	eax, [edi+0D4h]
		test	eax, eax
		jnz	short loc_68889807
		jmp	short loc_68889814
; ---------------------------------------------------------------------------
		align 10h

loc_68889800:				; CODE XREF: sub_68888E10+9F9j
		mov	eax, [eax+10h]
		test	eax, eax
		jz	short loc_68889814

loc_68889807:				; CODE XREF: sub_68888E10+9E9j
		cmp	edx, eax
		jnz	short loc_68889800
		mov	eax, [esp+7Ch+var_54]
		call	sub_68887C04

loc_68889814:				; CODE XREF: sub_68888E10+9EBj
					; sub_68888E10+9F5j ...
		mov	dword ptr [ebx+8], 0
		jmp	short loc_688897B4
; ---------------------------------------------------------------------------

loc_6888981D:				; CODE XREF: sub_68888E10+98Cj
		mov	eax, [edi+0D8h]
		test	eax, eax
		jnz	short loc_68889833
		jmp	short loc_68889814
; ---------------------------------------------------------------------------
		align 4

loc_6888982C:				; CODE XREF: sub_68888E10+A25j
		mov	eax, [eax+10h]
		test	eax, eax
		jz	short loc_68889814

loc_68889833:				; CODE XREF: sub_68888E10+A15j
		cmp	edx, eax
		jnz	short loc_6888982C
		mov	eax, [edx]
		mov	[esp+7Ch+var_7C], eax
		call	g_strdup
		mov	[ebx+4], eax
		mov	edx, [ebx+8]
		mov	eax, ebp
		call	sub_68887C04
		jmp	short loc_68889814
; ---------------------------------------------------------------------------

loc_68889850:				; CODE XREF: sub_68888E10+9CFj
		mov	eax, [edi+0D8h]
		test	eax, eax
		jnz	short loc_68889863
		jmp	short loc_68889814
; ---------------------------------------------------------------------------

loc_6888985C:				; CODE XREF: sub_68888E10+A55j
		mov	eax, [eax+10h]
		test	eax, eax
		jz	short loc_68889814

loc_68889863:				; CODE XREF: sub_68888E10+A48j
		cmp	edx, eax
		jnz	short loc_6888985C
		movzx	ecx, word ptr [edx+4]
		mov	eax, [edx+0Ch]
		mov	[esp+7Ch+var_74], eax
		movzx	eax, word ptr [edx+8]
		mov	[esp+7Ch+var_78], eax
		movzx	eax, word ptr [edx+6]
		mov	[esp+7Ch+var_7C], eax
		mov	edx, [edx]
		mov	eax, [esp+7Ch+var_54]
		call	sub_68887D10
		jmp	loc_688897B4
; ---------------------------------------------------------------------------

loc_68889891:				; CODE XREF: sub_68888E10+953j
					; sub_68888E10+9A9j
		mov	edx, [esp+7Ch+var_44]
		movzx	eax, word ptr [edx+2]

loc_68889899:				; CODE XREF: sub_68888E10+923j
					; sub_68888E10+FA7j
		mov	[esp+7Ch+var_74], eax
		mov	edx, [esp+7Ch+var_44]
		movzx	eax, word ptr [edx]
		mov	[esp+7Ch+var_78], eax
		mov	eax, [esp+7Ch+var_50]
		mov	[esp+7Ch+var_7C], eax
		call	aim_callhandler
		test	eax, eax
		jz	loc_68889BA5
		mov	ecx, [esp+7Ch+var_50]
		mov	edx, [ecx+0DCh]
		mov	[esp+7Ch+var_70], edx
		mov	edx, [esp+7Ch+var_38]
		mov	[esp+7Ch+var_74], edx
		mov	ecx, [esp+7Ch+var_3C]
		mov	[esp+7Ch+var_78], ecx
		mov	edx, [esp+7Ch+var_50]
		mov	[esp+7Ch+var_7C], edx
		call	eax
		mov	[esp+7Ch+var_48], eax

loc_688898E7:				; CODE XREF: sub_68888E10+D9Dj
		mov	eax, [esp+7Ch+var_50]
		mov	ebx, [eax+0DCh]
		test	ebx, ebx
		jz	short loc_6888992B
		cmp	word ptr [ebx+2], 0FFFFh
		jnz	short loc_68889911
		jmp	loc_68889DBC
; ---------------------------------------------------------------------------
		align 4

loc_68889904:				; CODE XREF: sub_68888E10+B19j
		mov	ebx, esi
		cmp	word ptr [esi+2], 0FFFFh
		jz	loc_68889DBE

loc_68889911:				; CODE XREF: sub_68888E10+AEAj
		mov	esi, [ebx+0Ch]
		mov	eax, [ebx+4]
		mov	[esp+7Ch+var_7C], eax
		call	g_free
		mov	[esp+7Ch+var_7C], ebx
		call	g_free
		test	esi, esi
		jnz	short loc_68889904

loc_6888992B:				; CODE XREF: sub_68888E10+AE3j
		mov	eax, [esp+7Ch+var_50]
		mov	dword ptr [eax+0DCh], 0
		mov	dword ptr [eax+0E4h], 0
		call	sub_688887DC
		jmp	loc_68888ED0
; ---------------------------------------------------------------------------

loc_6888994D:				; CODE XREF: sub_68888E10+9D5j
		mov	eax, [edi+0D8h]
		test	eax, eax
		jnz	short loc_68889967
		jmp	loc_68889814
; ---------------------------------------------------------------------------

loc_6888995C:				; CODE XREF: sub_68888E10+B59j
		mov	eax, [eax+10h]
		test	eax, eax
		jz	loc_68889814

loc_68889967:				; CODE XREF: sub_68888E10+B45j
		cmp	edx, eax
		jnz	short loc_6888995C
		mov	ax, [edx+6]
		mov	edx, [edx+4]
		mov	esi, [edi+0D4h]
		test	esi, esi
		jnz	short loc_6888998F
		jmp	loc_688897B4
; ---------------------------------------------------------------------------
		align 4

loc_68889984:				; CODE XREF: sub_68888E10+B83j
					; sub_68888E10+B89j
		mov	esi, [esi+10h]
		test	esi, esi
		jz	loc_688897B4

loc_6888998F:				; CODE XREF: sub_68888E10+B6Aj
		cmp	dx, [esi+4]
		jnz	short loc_68889984
		cmp	ax, [esi+6]
		jnz	short loc_68889984
		mov	eax, [esi]
		mov	[esp+7Ch+var_7C], eax
		call	g_free
		mov	eax, [ebx+8]
		mov	eax, [eax]
		mov	[esp+7Ch+var_7C], eax
		call	g_strdup
		mov	[esi], eax
		mov	eax, [esi+0Ch]
		mov	[esp+7Ch+var_7C], eax
		call	aim_tlvlist_free
		mov	eax, [ebx+8]
		mov	eax, [eax+0Ch]
		mov	[esp+7Ch+var_7C], eax
		call	aim_tlvlist_copy
		mov	[esi+0Ch], eax
		jmp	loc_688897B4
; ---------------------------------------------------------------------------
		align 4

loc_688899D8:				; CODE XREF: sub_68888E10+992j
		mov	eax, [edi+0D8h]
		test	eax, eax
		jnz	short loc_688899F3
		jmp	loc_68889814
; ---------------------------------------------------------------------------
		align 4

loc_688899E8:				; CODE XREF: sub_68888E10+BE5j
		mov	eax, [eax+10h]
		test	eax, eax
		jz	loc_68889814

loc_688899F3:				; CODE XREF: sub_68888E10+BD0j
		cmp	edx, eax
		jnz	short loc_688899E8
		mov	cx, [edx+6]
		mov	eax, [edx+4]
		mov	esi, [edi+0D4h]
		test	esi, esi
		jnz	short loc_68889A1B
		jmp	loc_688897B4
; ---------------------------------------------------------------------------
		align 10h

loc_68889A10:				; CODE XREF: sub_68888E10+C0Fj
					; sub_68888E10+C15j
		mov	esi, [esi+10h]
		test	esi, esi
		jz	loc_688897B4

loc_68889A1B:				; CODE XREF: sub_68888E10+BF6j
		cmp	ax, [esi+4]
		jnz	short loc_68889A10
		cmp	cx, [esi+6]
		jnz	short loc_68889A10
		mov	eax, [edx]
		mov	[esp+7Ch+var_7C], eax
		call	g_free
		mov	edx, [ebx+8]
		mov	eax, [esi]
		mov	[esp+7Ch+var_7C], eax
		mov	[esp+7Ch+var_58], edx
		call	g_strdup
		mov	edx, [esp+7Ch+var_58]
		mov	[edx], eax
		mov	eax, [ebx+8]
		mov	eax, [eax+0Ch]
		mov	[esp+7Ch+var_7C], eax
		call	aim_tlvlist_free
		mov	edx, [ebx+8]
		mov	eax, [esi+0Ch]
		mov	[esp+7Ch+var_7C], eax
		mov	[esp+7Ch+var_58], edx
		call	aim_tlvlist_copy
		mov	edx, [esp+7Ch+var_58]
		mov	[edx+0Ch], eax
		jmp	loc_688897B4
; ---------------------------------------------------------------------------

loc_68889A74:				; CODE XREF: sub_68888E10+8Aj
		mov	edx, [esp+7Ch+var_44]
		movzx	eax, word ptr [edx]
		mov	ecx, [esp+7Ch+var_50]
		mov	dword ptr [ecx+0CCh], 1
		mov	[esp+7Ch+var_74], 0Fh
		mov	[esp+7Ch+var_78], eax
		mov	[esp+7Ch+var_7C], ecx
		call	aim_callhandler
		test	eax, eax
		jz	loc_68888EC8
		mov	edx, [esp+7Ch+var_38]
		mov	[esp+7Ch+var_74], edx
		mov	ecx, [esp+7Ch+var_3C]
		mov	[esp+7Ch+var_78], ecx
		mov	edx, [esp+7Ch+var_50]
		mov	[esp+7Ch+var_7C], edx
		call	eax
		mov	[esp+7Ch+var_48], eax
		jmp	loc_68888ED0
; ---------------------------------------------------------------------------

loc_68889AC7:				; CODE XREF: sub_68888E10+94j
		mov	[esp+7Ch+var_7C], ebp
		call	sub_68881990
		test	al, al
		jz	loc_68889DE7
		movzx	eax, al
		mov	[esp+7Ch+var_78], eax
		mov	[esp+7Ch+var_7C], ebp
		call	sub_68881D24
		mov	esi, eax
		mov	[esp+7Ch+var_74], 0
		mov	[esp+7Ch+var_78], 0FFFFFFFFh
		mov	[esp+7Ch+var_7C], eax
		call	g_utf8_validate
		test	eax, eax
		jz	loc_68889E91

loc_68889B08:				; CODE XREF: sub_68888E10+109Dj
		mov	[esp+7Ch+var_7C], ebp
		call	sub_688819F0
		test	ax, ax
		jnz	loc_68889BB2

loc_68889B19:				; CODE XREF: sub_68888E10+E50j
		xor	ebx, ebx

loc_68889B1B:				; CODE XREF: sub_68888E10+DCDj
					; sub_68888E10+DFFj ...
		mov	[esp+7Ch+var_7C], ebp
		call	sub_688819F0
		mov	ecx, [esp+7Ch+var_44]
		movzx	eax, word ptr [ecx+2]
		mov	[esp+7Ch+var_74], eax
		movzx	eax, word ptr [ecx]
		mov	[esp+7Ch+var_78], eax
		mov	eax, [esp+7Ch+var_50]
		mov	[esp+7Ch+var_7C], eax
		call	aim_callhandler
		test	eax, eax
		jz	loc_68889DDA
		mov	[esp+7Ch+var_6C], ebx
		mov	[esp+7Ch+var_70], esi
		mov	edx, [esp+7Ch+var_38]
		mov	[esp+7Ch+var_74], edx
		mov	ecx, [esp+7Ch+var_3C]
		mov	[esp+7Ch+var_78], ecx
		mov	edx, [esp+7Ch+var_50]
		mov	[esp+7Ch+var_7C], edx
		call	eax
		mov	[esp+7Ch+var_48], eax

loc_68889B6F:				; CODE XREF: sub_68888E10+F54j
					; sub_68888E10+FD2j
		mov	[esp+7Ch+var_7C], esi
		call	g_free
		mov	[esp+7Ch+var_7C], ebx
		call	g_free
		jmp	loc_68888ED0
; ---------------------------------------------------------------------------

loc_68889B84:				; CODE XREF: sub_68888E10+57Ej
		mov	[esp+7Ch+var_78], offset aDroppingYouWer ; "Dropping 'you were added' SNAC because "...
		mov	[esp+7Ch+var_7C], offset aOscar_4 ; "oscar"
		call	purple_debug_warning
		mov	[esp+7Ch+var_48], 0
		jmp	loc_68888ED0
; ---------------------------------------------------------------------------

loc_68889BA5:				; CODE XREF: sub_68888E10+AA6j
		mov	[esp+7Ch+var_48], 0
		jmp	loc_688898E7
; ---------------------------------------------------------------------------

loc_68889BB2:				; CODE XREF: sub_68888E10+D03j
		movzx	eax, ax
		mov	[esp+7Ch+var_78], eax
		mov	[esp+7Ch+var_7C], ebp
		call	sub_68881D24
		mov	ebx, eax
		mov	[esp+7Ch+var_74], 0
		mov	[esp+7Ch+var_78], 0FFFFFFFFh
		mov	[esp+7Ch+var_7C], eax
		call	g_utf8_validate
		test	eax, eax
		jnz	loc_68889B1B
		mov	[esp+7Ch+var_74], esi
		mov	[esp+7Ch+var_78], offset aGotNonUtf8Mess ; "Got	non-UTF8 message in auth grant from"...

loc_68889BEF:				; CODE XREF: sub_68888E10+E93j
		mov	[esp+7Ch+var_7C], offset aOscar_4 ; "oscar"
		call	purple_debug_warning
		mov	[esp+7Ch+var_7C], ebx
		call	purple_utf8_salvage
		mov	edi, eax
		mov	[esp+7Ch+var_7C], ebx
		call	g_free
		mov	ebx, edi
		jmp	loc_68889B1B
; ---------------------------------------------------------------------------

loc_68889C14:				; CODE XREF: sub_68888E10+9Ej
		mov	[esp+7Ch+var_7C], ebp
		call	sub_68881990
		test	al, al
		jz	loc_68889E08
		movzx	eax, al
		mov	[esp+7Ch+var_78], eax
		mov	[esp+7Ch+var_7C], ebp
		call	sub_68881D24
		mov	esi, eax
		mov	[esp+7Ch+var_74], 0
		mov	[esp+7Ch+var_78], 0FFFFFFFFh
		mov	[esp+7Ch+var_7C], eax
		call	g_utf8_validate
		test	eax, eax
		jz	loc_68889EB2

loc_68889C55:				; CODE XREF: sub_68888E10+10BEj
		mov	[esp+7Ch+var_7C], ebp
		call	sub_688819F0
		test	ax, ax
		jz	loc_68889B19
		movzx	eax, ax
		mov	[esp+7Ch+var_78], eax
		mov	[esp+7Ch+var_7C], ebp
		call	sub_68881D24
		mov	ebx, eax
		mov	[esp+7Ch+var_74], 0
		mov	[esp+7Ch+var_78], 0FFFFFFFFh
		mov	[esp+7Ch+var_7C], eax
		call	g_utf8_validate
		test	eax, eax
		jnz	loc_68889B1B
		mov	[esp+7Ch+var_74], esi
		mov	[esp+7Ch+var_78], offset aGotNonUtf8Me_0 ; "Got	non-UTF8 message in auth request fr"...
		jmp	loc_68889BEF
; ---------------------------------------------------------------------------

loc_68889CA8:				; CODE XREF: sub_68888E10+A8j
		mov	[esp+7Ch+var_7C], ebp
		call	sub_68881990
		test	al, al
		jz	loc_68889E57
		movzx	eax, al
		mov	[esp+7Ch+var_78], eax
		mov	[esp+7Ch+var_7C], ebp
		call	sub_68881D24
		mov	esi, eax
		mov	[esp+7Ch+var_74], 0
		mov	[esp+7Ch+var_78], 0FFFFFFFFh
		mov	[esp+7Ch+var_7C], eax
		call	g_utf8_validate
		test	eax, eax
		jz	loc_68889F3B

loc_68889CE9:				; CODE XREF: sub_68888E10+1147j
		mov	[esp+7Ch+var_7C], ebp
		call	sub_68881990
		mov	edi, eax
		mov	[esp+7Ch+var_7C], ebp
		call	sub_688819F0
		test	ax, ax
		jnz	loc_68889ED3
		xor	ebx, ebx

loc_68889D06:				; CODE XREF: sub_68888E10+10EEj
					; sub_68888E10+1126j
		mov	[esp+7Ch+var_7C], ebp
		call	sub_688819F0
		mov	ecx, [esp+7Ch+var_44]
		movzx	eax, word ptr [ecx+2]
		mov	[esp+7Ch+var_74], eax
		movzx	eax, word ptr [ecx]
		mov	[esp+7Ch+var_78], eax
		mov	eax, [esp+7Ch+var_50]
		mov	[esp+7Ch+var_7C], eax
		call	aim_callhandler
		test	eax, eax
		jz	loc_68889DDA
		mov	[esp+7Ch+var_68], ebx
		and	edi, 0FFh
		mov	[esp+7Ch+var_6C], edi
		mov	[esp+7Ch+var_70], esi
		mov	edx, [esp+7Ch+var_38]
		mov	[esp+7Ch+var_74], edx
		mov	ecx, [esp+7Ch+var_3C]
		mov	[esp+7Ch+var_78], ecx
		mov	edx, [esp+7Ch+var_50]
		mov	[esp+7Ch+var_7C], edx
		call	eax
		mov	[esp+7Ch+var_48], eax
		jmp	loc_68889B6F
; ---------------------------------------------------------------------------

loc_68889D69:				; CODE XREF: sub_68888E10+99Cj
		mov	eax, [edi+0D4h]
		test	eax, eax
		jnz	short loc_68889D83
		jmp	loc_68889814
; ---------------------------------------------------------------------------

loc_68889D78:				; CODE XREF: sub_68888E10+F75j
		mov	eax, [eax+10h]
		test	eax, eax
		jz	loc_68889814

loc_68889D83:				; CODE XREF: sub_68888E10+F61j
		cmp	edx, eax
		jnz	short loc_68889D78
		movzx	ecx, word ptr [edx+4]
		mov	eax, [edx+0Ch]
		mov	[esp+7Ch+var_74], eax
		movzx	eax, word ptr [edx+8]
		mov	[esp+7Ch+var_78], eax
		movzx	eax, word ptr [edx+6]
		mov	[esp+7Ch+var_7C], eax
		mov	edx, [edx]
		mov	eax, ebp
		call	sub_68887D10
		jmp	loc_688897B4
; ---------------------------------------------------------------------------

loc_68889DAF:				; CODE XREF: sub_68888E10+961j
					; sub_68888E10+9B7j
		mov	ecx, [esp+7Ch+var_44]
		movzx	eax, word ptr [ecx+2]
		jmp	loc_68889899
; ---------------------------------------------------------------------------

loc_68889DBC:				; CODE XREF: sub_68888E10+AECj
		mov	esi, ebx

loc_68889DBE:				; CODE XREF: sub_68888E10+AFBj
		mov	eax, [esp+7Ch+var_50]
		mov	[eax+0DCh], esi
		jmp	loc_68888ED0
; ---------------------------------------------------------------------------

loc_68889DCD:				; CODE XREF: sub_68888E10+180j
		mov	[esp+7Ch+var_48], 0
		jmp	loc_68888FC5
; ---------------------------------------------------------------------------

loc_68889DDA:				; CODE XREF: sub_68888E10+D34j
					; sub_68888E10+F1Fj
		mov	[esp+7Ch+var_48], 0
		jmp	loc_68889B6F
; ---------------------------------------------------------------------------

loc_68889DE7:				; CODE XREF: sub_68888E10+CC1j
		mov	[esp+7Ch+var_78], offset aDroppingAuthGr ; "Dropping auth grant	SNAC because userna"...
		mov	[esp+7Ch+var_7C], offset aOscar_4 ; "oscar"
		call	purple_debug_warning
		mov	[esp+7Ch+var_48], 0
		jmp	loc_68888ED0
; ---------------------------------------------------------------------------

loc_68889E08:				; CODE XREF: sub_68888E10+E0Ej
		mov	[esp+7Ch+var_78], offset aDroppingAuthRe ; "Dropping auth request SNAC because user"...
		mov	[esp+7Ch+var_7C], offset aOscar_4 ; "oscar"
		call	purple_debug_warning
		mov	[esp+7Ch+var_48], 0
		jmp	loc_68888ED0
; ---------------------------------------------------------------------------

loc_68889E29:				; CODE XREF: sub_68888E10+5D6j
		mov	[esp+7Ch+var_48], 0
		jmp	loc_6888940D
; ---------------------------------------------------------------------------

loc_68889E36:				; CODE XREF: sub_68888E10+5AFj
		mov	[esp+7Ch+var_78], offset aDroppingYouW_0 ; "Dropping 'you were added' SNAC because "...
		mov	[esp+7Ch+var_7C], offset aOscar_4 ; "oscar"
		call	purple_debug_warning
		mov	[esp+7Ch+var_7C], ebx
		call	g_free
		jmp	loc_688893C5
; ---------------------------------------------------------------------------

loc_68889E57:				; CODE XREF: sub_68888E10+EA2j
		mov	[esp+7Ch+var_78], offset aDroppingAuth_0 ; "Dropping auth reply	SNAC because userna"...
		mov	[esp+7Ch+var_7C], offset aOscar_4 ; "oscar"
		call	purple_debug_warning
		mov	[esp+7Ch+var_48], 0
		jmp	loc_68888ED0
; ---------------------------------------------------------------------------

loc_68889E78:				; CODE XREF: sub_68888E10+104j
		mov	eax, [esp+7Ch+var_54]
		mov	[esp+7Ch+var_7C], eax
		call	aim_tlvlist_free
		mov	[esp+7Ch+var_48], 0
		jmp	loc_68888ED0
; ---------------------------------------------------------------------------

loc_68889E91:				; CODE XREF: sub_68888E10+CF2j
		mov	[esp+7Ch+var_78], offset aDroppingAuth_1 ; "Dropping auth grant	SNAC because the us"...
		mov	[esp+7Ch+var_7C], offset aOscar_4 ; "oscar"
		call	purple_debug_warning
		mov	[esp+7Ch+var_7C], esi
		call	g_free
		jmp	loc_68889B08
; ---------------------------------------------------------------------------

loc_68889EB2:				; CODE XREF: sub_68888E10+E3Fj
		mov	[esp+7Ch+var_78], offset aDroppingAuth_2 ; "Dropping auth request SNAC because the "...
		mov	[esp+7Ch+var_7C], offset aOscar_4 ; "oscar"
		call	purple_debug_warning
		mov	[esp+7Ch+var_7C], esi
		call	g_free
		jmp	loc_68889C55
; ---------------------------------------------------------------------------

loc_68889ED3:				; CODE XREF: sub_68888E10+EEEj
		movzx	eax, ax
		mov	[esp+7Ch+var_78], eax
		mov	[esp+7Ch+var_7C], ebp
		call	sub_68881D24
		mov	ebx, eax
		mov	[esp+7Ch+var_74], 0
		mov	[esp+7Ch+var_78], 0FFFFFFFFh
		mov	[esp+7Ch+var_7C], eax
		call	g_utf8_validate
		test	eax, eax
		jnz	loc_68889D06
		mov	[esp+7Ch+var_74], esi
		mov	[esp+7Ch+var_78], offset aGotNonUtf8Me_1 ; "Got	non-UTF8 message in auth reply from"...
		mov	[esp+7Ch+var_7C], offset aOscar_4 ; "oscar"
		call	purple_debug_warning
		mov	[esp+7Ch+var_7C], ebx
		call	purple_utf8_salvage
		mov	[esp+7Ch+var_7C], ebx
		mov	[esp+7Ch+var_58], eax
		call	g_free
		mov	eax, [esp+7Ch+var_58]
		mov	ebx, eax
		jmp	loc_68889D06
; ---------------------------------------------------------------------------

loc_68889F3B:				; CODE XREF: sub_68888E10+ED3j
		mov	[esp+7Ch+var_78], offset aDroppingAuth_3 ; "Dropping auth reply	SNAC because the us"...
		mov	[esp+7Ch+var_7C], offset aOscar_4 ; "oscar"
		call	purple_debug_warning
		mov	[esp+7Ch+var_7C], esi
		call	g_free
		jmp	loc_68889CE9
; ---------------------------------------------------------------------------

loc_68889F5C:				; CODE XREF: sub_68888E10+CEj
		call	__stack_chk_fail
sub_68888E10	endp

; ---------------------------------------------------------------------------
		align 4
; Exported entry 110. aim_ssi_setpresence

; =============== S U B	R O U T	I N E =======================================


		public aim_ssi_setpresence
aim_ssi_setpresence proc near		; CODE XREF: .text:6889AC92j
					; sub_6889ACB0+6Bj ...

var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_10		= dword	ptr -10h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	edi
		push	esi
		push	ebx
		sub	esp, 20h
		mov	ebx, [esp+2Ch+arg_0]
		mov	esi, [esp+2Ch+arg_4]
		mov	eax, ds:__stack_chk_guard
		mov	[esp+2Ch+var_10], eax
		xor	eax, eax
		test	ebx, ebx
		jz	loc_6888A064
		mov	edi, [ebx+0CCh]
		test	edi, edi
		jz	loc_6888A064
		mov	[esp+2Ch+var_20], 5
		mov	[esp+2Ch+var_24], 0
		mov	[esp+2Ch+var_28], 0
		mov	eax, [ebx+0D8h]
		mov	[esp+2Ch+var_2C], eax
		call	aim_ssi_itemlist_finditem
		test	eax, eax
		jz	short loc_68889FF4

loc_68889FBD:				; CODE XREF: aim_ssi_setpresence+FBj
		mov	[esp+2Ch+var_24], esi
		mov	[esp+2Ch+var_28], 0C9h
		add	eax, 0Ch
		mov	[esp+2Ch+var_2C], eax
		call	aim_tlvlist_replace_32
		mov	edx, [esp+2Ch+var_10]
		xor	edx, ds:__stack_chk_guard
		jnz	loc_6888A084
		mov	eax, ebx
		add	esp, 20h
		pop	ebx
		pop	esi
		pop	edi
		jmp	sub_688887DC
; ---------------------------------------------------------------------------
		align 4

loc_68889FF4:				; CODE XREF: aim_ssi_setpresence+57j
		mov	edx, [ebx+0D8h]
		test	edx, edx
		jz	short loc_6888A015
		xchg	ax, ax

loc_6888A000:				; CODE XREF: aim_ssi_setpresence+AFj
		cmp	word ptr [edx+4], 0
		jnz	short loc_6888A00E
		cmp	word ptr [edx+6], 0
		jz	short loc_6888A07C

loc_6888A00E:				; CODE XREF: aim_ssi_setpresence+A1j
		mov	edx, [edx+10h]
		test	edx, edx
		jnz	short loc_6888A000

loc_6888A015:				; CODE XREF: aim_ssi_setpresence+98j
		lea	edi, [ebx+0D8h]
		mov	[esp+2Ch+var_24], 0
		mov	[esp+2Ch+var_28], 1
		mov	[esp+2Ch+var_2C], 0
		xor	ecx, ecx
		xor	edx, edx
		mov	eax, edi
		call	sub_68887D10

loc_6888A03D:				; CODE XREF: aim_ssi_setpresence+11Ej
		mov	[esp+2Ch+var_24], 0
		mov	[esp+2Ch+var_28], 5
		mov	[esp+2Ch+var_2C], 0FFFFh
		xor	ecx, ecx
		xor	edx, edx
		mov	eax, edi
		call	sub_68887D10
		jmp	loc_68889FBD
; ---------------------------------------------------------------------------

loc_6888A064:				; CODE XREF: aim_ssi_setpresence+1Bj
					; aim_ssi_setpresence+29j
		mov	eax, 0FFFFFFEAh
		mov	edx, [esp+2Ch+var_10]
		xor	edx, ds:__stack_chk_guard
		jnz	short loc_6888A084
		add	esp, 20h
		pop	ebx
		pop	esi
		pop	edi
		retn
; ---------------------------------------------------------------------------

loc_6888A07C:				; CODE XREF: aim_ssi_setpresence+A8j
		lea	edi, [ebx+0D8h]
		jmp	short loc_6888A03D
; ---------------------------------------------------------------------------

loc_6888A084:				; CODE XREF: aim_ssi_setpresence+7Aj
					; aim_ssi_setpresence+10Fj
		call	__stack_chk_fail
aim_ssi_setpresence endp

; ---------------------------------------------------------------------------
		align 4
; Exported entry 108. aim_ssi_seticon

; =============== S U B	R O U T	I N E =======================================


		public aim_ssi_seticon
aim_ssi_seticon	proc near		; CODE XREF: aim_ssi_delicon+3Ep
					; sub_688933E4+D98p ...

var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_2D		= byte ptr -2Dh
var_20		= dword	ptr -20h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= byte ptr  0Ch

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 3Ch
		mov	ebx, [esp+4Ch+arg_0]
		mov	esi, [esp+4Ch+arg_4]
		mov	al, [esp+4Ch+arg_8]
		mov	[esp+4Ch+var_2D], al
		mov	edx, ds:__stack_chk_guard
		mov	[esp+4Ch+var_20], edx
		xor	edx, edx
		test	ebx, ebx
		jz	loc_6888A194
		test	esi, esi
		jz	loc_6888A194
		test	al, al
		jz	loc_6888A194
		mov	ebp, [ebx+0CCh]
		test	ebp, ebp
		jz	loc_6888A194
		mov	[esp+4Ch+var_40], 14h
		mov	[esp+4Ch+var_44], offset a1 ; "1"
		mov	[esp+4Ch+var_48], 0
		mov	eax, [ebx+0D8h]
		mov	[esp+4Ch+var_4C], eax
		call	aim_ssi_itemlist_finditem
		mov	edx, eax
		test	eax, eax
		jz	loc_6888A19C

loc_6888A105:				; CODE XREF: aim_ssi_seticon+180j
		movzx	ecx, [esp+4Ch+var_2D]
		lea	eax, [ecx+2]
		mov	[esp+4Ch+var_4C], eax
		mov	[esp+4Ch+var_34], edx
		mov	[esp+4Ch+var_38], ecx
		call	g_malloc
		mov	ebp, eax
		mov	byte ptr [eax],	0
		mov	al, [esp+4Ch+var_2D]
		mov	[ebp+1], al
		lea	eax, [ebp+2]
		mov	ecx, [esp+4Ch+var_38]
		mov	edi, eax
		rep movsb
		mov	edx, [esp+4Ch+var_34]
		lea	esi, [edx+0Ch]
		mov	[esp+4Ch+var_40], ebp
		movzx	eax, [esp+4Ch+var_2D]
		add	eax, 2
		mov	[esp+4Ch+var_44], eax
		mov	[esp+4Ch+var_48], 0D5h
		mov	[esp+4Ch+var_4C], esi
		call	aim_tlvlist_replace_raw
		mov	[esp+4Ch+var_4C], ebp
		call	g_free
		mov	[esp+4Ch+var_48], 131h
		mov	[esp+4Ch+var_4C], esi
		call	aim_tlvlist_replace_noval
		mov	eax, ebx
		call	sub_688887DC
		xor	eax, eax

loc_6888A17C:				; CODE XREF: aim_ssi_seticon+10Dj
		mov	edx, [esp+4Ch+var_20]
		xor	edx, ds:__stack_chk_guard
		jnz	loc_6888A21C
		add	esp, 3Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_6888A194:				; CODE XREF: aim_ssi_seticon+25j
					; aim_ssi_seticon+2Dj ...
		mov	eax, 0FFFFFFEAh
		jmp	short loc_6888A17C
; ---------------------------------------------------------------------------
		align 4

loc_6888A19C:				; CODE XREF: aim_ssi_seticon+73j
		mov	eax, [ebx+0D8h]
		test	eax, eax
		jz	short loc_6888A1BD
		xchg	ax, ax

loc_6888A1A8:				; CODE XREF: aim_ssi_seticon+12Fj
		cmp	word ptr [eax+4], 0
		jnz	short loc_6888A1B6
		cmp	word ptr [eax+6], 0
		jz	short loc_6888A214

loc_6888A1B6:				; CODE XREF: aim_ssi_seticon+121j
		mov	eax, [eax+10h]
		test	eax, eax
		jnz	short loc_6888A1A8

loc_6888A1BD:				; CODE XREF: aim_ssi_seticon+118j
		lea	edi, [ebx+0D8h]
		mov	[esp+4Ch+var_44], 0
		mov	[esp+4Ch+var_48], 1
		mov	[esp+4Ch+var_4C], 0
		xor	ecx, ecx
		xor	edx, edx
		mov	eax, edi
		call	sub_68887D10

loc_6888A1E5:				; CODE XREF: aim_ssi_seticon+18Ej
		mov	[esp+4Ch+var_44], 0
		mov	[esp+4Ch+var_48], 14h
		mov	[esp+4Ch+var_4C], 0FFFFh
		xor	ecx, ecx
		mov	edx, offset a1	; "1"
		mov	eax, edi
		call	sub_68887D10
		mov	edx, eax
		jmp	loc_6888A105
; ---------------------------------------------------------------------------
		align 4

loc_6888A214:				; CODE XREF: aim_ssi_seticon+128j
		lea	edi, [ebx+0D8h]
		jmp	short loc_6888A1E5
; ---------------------------------------------------------------------------

loc_6888A21C:				; CODE XREF: aim_ssi_seticon+FAj
		call	__stack_chk_fail
aim_ssi_seticon	endp

; ---------------------------------------------------------------------------
		align 4
; Exported entry  88. aim_ssi_delicon

; =============== S U B	R O U T	I N E =======================================


		public aim_ssi_delicon
aim_ssi_delicon	proc near		; CODE XREF: sub_688933E4+D62p
					; sub_6889D620+16Ep ...

var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_15		= byte ptr -15h
var_14		= byte ptr -14h
var_13		= byte ptr -13h
var_12		= byte ptr -12h
var_11		= byte ptr -11h
var_10		= dword	ptr -10h
arg_0		= dword	ptr  4

		sub	esp, 2Ch
		mov	eax, ds:__stack_chk_guard
		mov	[esp+2Ch+var_10], eax
		xor	eax, eax
		mov	[esp+2Ch+var_15], 2
		mov	[esp+2Ch+var_14], 1
		mov	[esp+2Ch+var_13], 0D2h
		mov	[esp+2Ch+var_12], 4
		mov	[esp+2Ch+var_11], 72h
		mov	[esp+2Ch+var_24], 5
		lea	eax, [esp+2Ch+var_15]
		mov	[esp+2Ch+var_28], eax
		mov	eax, [esp+2Ch+arg_0]
		mov	[esp+2Ch+var_2C], eax
		call	aim_ssi_seticon
		mov	edx, [esp+2Ch+var_10]
		xor	edx, ds:__stack_chk_guard
		jnz	short loc_6888A277
		add	esp, 2Ch
		retn
; ---------------------------------------------------------------------------

loc_6888A277:				; CODE XREF: aim_ssi_delicon+4Dj
		call	__stack_chk_fail
aim_ssi_delicon	endp

; Exported entry 109. aim_ssi_setpermdeny

; =============== S U B	R O U T	I N E =======================================


		public aim_ssi_setpermdeny
aim_ssi_setpermdeny proc near		; CODE XREF: sub_6889A2F8+45p
					; oscar_set_aim_permdeny+36p

var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_10		= dword	ptr -10h
arg_0		= dword	ptr  4
arg_4		= byte ptr  8

		push	edi
		push	esi
		push	ebx
		sub	esp, 20h
		mov	ebx, [esp+2Ch+arg_0]
		movzx	esi, [esp+2Ch+arg_4]
		mov	eax, ds:__stack_chk_guard
		mov	[esp+2Ch+var_10], eax
		xor	eax, eax
		test	ebx, ebx
		jz	loc_6888A380
		mov	eax, [ebx+0CCh]
		test	eax, eax
		jz	loc_6888A380
		mov	[esp+2Ch+var_20], 4
		mov	[esp+2Ch+var_24], 0
		mov	[esp+2Ch+var_28], 0
		mov	eax, [ebx+0D8h]
		mov	[esp+2Ch+var_2C], eax
		call	aim_ssi_itemlist_finditem
		test	eax, eax
		jz	short loc_6888A310

loc_6888A2D6:				; CODE XREF: aim_ssi_setpermdeny+FFj
		and	esi, 0FFh
		mov	[esp+2Ch+var_24], esi
		mov	[esp+2Ch+var_28], 0CAh
		add	eax, 0Ch
		mov	[esp+2Ch+var_2C], eax
		call	aim_tlvlist_replace_8
		mov	edx, [esp+2Ch+var_10]
		xor	edx, ds:__stack_chk_guard
		jnz	loc_6888A3A0
		mov	eax, ebx
		add	esp, 20h
		pop	ebx
		pop	esi
		pop	edi
		jmp	sub_688887DC
; ---------------------------------------------------------------------------

loc_6888A310:				; CODE XREF: aim_ssi_setpermdeny+58j
		mov	edx, [ebx+0D8h]
		test	edx, edx
		jz	short loc_6888A331
		xchg	ax, ax

loc_6888A31C:				; CODE XREF: aim_ssi_setpermdeny+B3j
		cmp	word ptr [edx+4], 0
		jnz	short loc_6888A32A
		cmp	word ptr [edx+6], 0
		jz	short loc_6888A398

loc_6888A32A:				; CODE XREF: aim_ssi_setpermdeny+A5j
		mov	edx, [edx+10h]
		test	edx, edx
		jnz	short loc_6888A31C

loc_6888A331:				; CODE XREF: aim_ssi_setpermdeny+9Cj
		lea	edi, [ebx+0D8h]
		mov	[esp+2Ch+var_24], 0
		mov	[esp+2Ch+var_28], 1
		mov	[esp+2Ch+var_2C], 0
		xor	ecx, ecx
		xor	edx, edx
		mov	eax, edi
		call	sub_68887D10

loc_6888A359:				; CODE XREF: aim_ssi_setpermdeny+122j
		mov	[esp+2Ch+var_24], 0
		mov	[esp+2Ch+var_28], 4
		mov	[esp+2Ch+var_2C], 0FFFFh
		xor	ecx, ecx
		xor	edx, edx
		mov	eax, edi
		call	sub_68887D10
		jmp	loc_6888A2D6
; ---------------------------------------------------------------------------

loc_6888A380:				; CODE XREF: aim_ssi_setpermdeny+1Cj
					; aim_ssi_setpermdeny+2Aj
		mov	eax, 0FFFFFFEAh
		mov	edx, [esp+2Ch+var_10]
		xor	edx, ds:__stack_chk_guard
		jnz	short loc_6888A3A0
		add	esp, 20h
		pop	ebx
		pop	esi
		pop	edi
		retn
; ---------------------------------------------------------------------------

loc_6888A398:				; CODE XREF: aim_ssi_setpermdeny+ACj
		lea	edi, [ebx+0D8h]
		jmp	short loc_6888A359
; ---------------------------------------------------------------------------

loc_6888A3A0:				; CODE XREF: aim_ssi_setpermdeny+81j
					; aim_ssi_setpermdeny+113j
		call	__stack_chk_fail
aim_ssi_setpermdeny endp

; ---------------------------------------------------------------------------
		align 4
; Exported entry 103. aim_ssi_rename_group

; =============== S U B	R O U T	I N E =======================================


		public aim_ssi_rename_group
aim_ssi_rename_group proc near		; CODE XREF: oscar_rename_group+12Fp

var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_10		= dword	ptr -10h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	edi
		push	esi
		push	ebx
		sub	esp, 20h
		mov	ebx, [esp+2Ch+arg_0]
		mov	eax, [esp+2Ch+arg_4]
		mov	edi, [esp+2Ch+arg_8]
		mov	edx, ds:__stack_chk_guard
		mov	[esp+2Ch+var_10], edx
		xor	edx, edx
		test	ebx, ebx
		jz	short loc_6888A428
		test	eax, eax
		jz	short loc_6888A428
		test	edi, edi
		jz	short loc_6888A428
		mov	[esp+2Ch+var_20], 1
		mov	[esp+2Ch+var_24], 0
		mov	[esp+2Ch+var_28], eax
		mov	eax, [ebx+0D8h]
		mov	[esp+2Ch+var_2C], eax
		call	aim_ssi_itemlist_finditem
		mov	esi, eax
		test	eax, eax
		jz	short loc_6888A428
		mov	eax, [eax]
		mov	[esp+2Ch+var_2C], eax
		call	g_free
		mov	[esp+2Ch+var_2C], edi
		call	g_strdup
		mov	[esi], eax
		mov	eax, [esp+2Ch+var_10]
		xor	eax, ds:__stack_chk_guard
		jnz	short loc_6888A440
		mov	eax, ebx
		add	esp, 20h
		pop	ebx
		pop	esi
		pop	edi
		jmp	sub_688887DC
; ---------------------------------------------------------------------------
		align 4

loc_6888A428:				; CODE XREF: aim_ssi_rename_group+20j
					; aim_ssi_rename_group+24j ...
		mov	eax, 0FFFFFFEAh
		mov	edx, [esp+2Ch+var_10]
		xor	edx, ds:__stack_chk_guard
		jnz	short loc_6888A440
		add	esp, 20h
		pop	ebx
		pop	esi
		pop	edi
		retn
; ---------------------------------------------------------------------------

loc_6888A440:				; CODE XREF: aim_ssi_rename_group+70j
					; aim_ssi_rename_group+8Fj
		call	__stack_chk_fail
aim_ssi_rename_group endp

; ---------------------------------------------------------------------------
		align 4
; Exported entry  89. aim_ssi_editcomment

; =============== S U B	R O U T	I N E =======================================


		public aim_ssi_editcomment
aim_ssi_editcomment proc near		; CODE XREF: sub_6889A268+67p

var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_10		= dword	ptr -10h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		push	esi
		push	ebx
		sub	esp, 24h
		mov	ebx, [esp+2Ch+arg_0]
		mov	eax, [esp+2Ch+arg_4]
		mov	edx, [esp+2Ch+arg_8]
		mov	esi, [esp+2Ch+arg_C]
		mov	ecx, ds:__stack_chk_guard
		mov	[esp+2Ch+var_10], ecx
		xor	ecx, ecx
		test	ebx, ebx
		jz	short loc_6888A4E8
		test	eax, eax
		jz	short loc_6888A4E8
		test	edx, edx
		jz	short loc_6888A4E8
		mov	[esp+2Ch+var_20], 0
		mov	[esp+2Ch+var_24], edx
		mov	[esp+2Ch+var_28], eax
		mov	eax, [ebx+0D8h]
		mov	[esp+2Ch+var_2C], eax
		call	aim_ssi_itemlist_finditem
		test	eax, eax
		jz	short loc_6888A4E8
		test	esi, esi
		jz	short loc_6888A4A0
		cmp	byte ptr [esi],	0
		jnz	short loc_6888A4CC

loc_6888A4A0:				; CODE XREF: aim_ssi_editcomment+51j
		mov	[esp+2Ch+var_28], 13Ch
		add	eax, 0Ch
		mov	[esp+2Ch+var_2C], eax
		call	aim_tlvlist_remove

loc_6888A4B3:				; CODE XREF: aim_ssi_editcomment+9Bj
		mov	eax, [esp+2Ch+var_10]
		xor	eax, ds:__stack_chk_guard
		jnz	short loc_6888A4FF
		mov	eax, ebx
		add	esp, 24h
		pop	ebx
		pop	esi
		jmp	sub_688887DC
; ---------------------------------------------------------------------------
		align 4

loc_6888A4CC:				; CODE XREF: aim_ssi_editcomment+56j
		mov	[esp+2Ch+var_24], esi
		mov	[esp+2Ch+var_28], 13Ch
		add	eax, 0Ch
		mov	[esp+2Ch+var_2C], eax
		call	aim_tlvlist_replace_str
		jmp	short loc_6888A4B3
; ---------------------------------------------------------------------------
		align 4

loc_6888A4E8:				; CODE XREF: aim_ssi_editcomment+23j
					; aim_ssi_editcomment+27j ...
		mov	eax, 0FFFFFFEAh
		mov	edx, [esp+2Ch+var_10]
		xor	edx, ds:__stack_chk_guard
		jnz	short loc_6888A4FF
		add	esp, 24h
		pop	ebx
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_6888A4FF:				; CODE XREF: aim_ssi_editcomment+75j
					; aim_ssi_editcomment+AFj
		call	__stack_chk_fail
aim_ssi_editcomment endp

; Exported entry  83. aim_ssi_aliasbuddy

; =============== S U B	R O U T	I N E =======================================


		public aim_ssi_aliasbuddy
aim_ssi_aliasbuddy proc	near		; CODE XREF: oscar_alias_buddy+91p
					; sub_688A46F4+1A0p

var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_10		= dword	ptr -10h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		push	esi
		push	ebx
		sub	esp, 24h
		mov	ebx, [esp+2Ch+arg_0]
		mov	eax, [esp+2Ch+arg_4]
		mov	edx, [esp+2Ch+arg_8]
		mov	esi, [esp+2Ch+arg_C]
		mov	ecx, ds:__stack_chk_guard
		mov	[esp+2Ch+var_10], ecx
		xor	ecx, ecx
		test	ebx, ebx
		jz	short loc_6888A5A4
		test	eax, eax
		jz	short loc_6888A5A4
		test	edx, edx
		jz	short loc_6888A5A4
		mov	[esp+2Ch+var_20], 0
		mov	[esp+2Ch+var_24], edx
		mov	[esp+2Ch+var_28], eax
		mov	eax, [ebx+0D8h]
		mov	[esp+2Ch+var_2C], eax
		call	aim_ssi_itemlist_finditem
		test	eax, eax
		jz	short loc_6888A5A4
		test	esi, esi
		jz	short loc_6888A55C
		cmp	byte ptr [esi],	0
		jnz	short loc_6888A588

loc_6888A55C:				; CODE XREF: aim_ssi_aliasbuddy+51j
		mov	[esp+2Ch+var_28], 131h
		add	eax, 0Ch
		mov	[esp+2Ch+var_2C], eax
		call	aim_tlvlist_remove

loc_6888A56F:				; CODE XREF: aim_ssi_aliasbuddy+9Bj
		mov	eax, [esp+2Ch+var_10]
		xor	eax, ds:__stack_chk_guard
		jnz	short loc_6888A5BB
		mov	eax, ebx
		add	esp, 24h
		pop	ebx
		pop	esi
		jmp	sub_688887DC
; ---------------------------------------------------------------------------
		align 4

loc_6888A588:				; CODE XREF: aim_ssi_aliasbuddy+56j
		mov	[esp+2Ch+var_24], esi
		mov	[esp+2Ch+var_28], 131h
		add	eax, 0Ch
		mov	[esp+2Ch+var_2C], eax
		call	aim_tlvlist_replace_str
		jmp	short loc_6888A56F
; ---------------------------------------------------------------------------
		align 4

loc_6888A5A4:				; CODE XREF: aim_ssi_aliasbuddy+23j
					; aim_ssi_aliasbuddy+27j ...
		mov	eax, 0FFFFFFEAh
		mov	edx, [esp+2Ch+var_10]
		xor	edx, ds:__stack_chk_guard
		jnz	short loc_6888A5BB
		add	esp, 24h
		pop	ebx
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_6888A5BB:				; CODE XREF: aim_ssi_aliasbuddy+75j
					; aim_ssi_aliasbuddy+AFj
		call	__stack_chk_fail
aim_ssi_aliasbuddy endp

; Exported entry  87. aim_ssi_delgroup

; =============== S U B	R O U T	I N E =======================================


		public aim_ssi_delgroup
aim_ssi_delgroup proc near		; CODE XREF: oscar_remove_group+43j

var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_10		= dword	ptr -10h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	edi
		push	esi
		push	ebx
		sub	esp, 20h
		mov	ebx, [esp+2Ch+arg_0]
		mov	edi, [esp+2Ch+arg_4]
		mov	eax, ds:__stack_chk_guard
		mov	[esp+2Ch+var_10], eax
		xor	eax, eax
		test	ebx, ebx
		jz	loc_6888A664
		mov	[esp+2Ch+var_20], 1
		mov	[esp+2Ch+var_24], 0
		mov	[esp+2Ch+var_28], edi
		mov	eax, [ebx+0D8h]
		mov	[esp+2Ch+var_2C], eax
		call	aim_ssi_itemlist_finditem
		mov	esi, eax
		test	eax, eax
		jz	short loc_6888A664
		mov	[esp+2Ch+var_24], 1
		mov	[esp+2Ch+var_28], 0C8h
		mov	eax, [eax+0Ch]
		mov	[esp+2Ch+var_2C], eax
		call	aim_tlv_gettlv
		test	eax, eax
		jz	short loc_6888A62F
		cmp	word ptr [eax+2], 0
		jnz	short loc_6888A664

loc_6888A62F:				; CODE XREF: aim_ssi_delgroup+66j
		lea	eax, [ebx+0D8h]
		mov	edx, esi
		call	sub_68887C04
		mov	eax, [ebx+0D8h]
		mov	edx, edi
		call	sub_688880D4
		mov	edx, [esp+2Ch+var_10]
		xor	edx, ds:__stack_chk_guard
		jnz	short loc_6888A67C
		mov	eax, ebx
		add	esp, 20h
		pop	ebx
		pop	esi
		pop	edi
		jmp	sub_688887DC
; ---------------------------------------------------------------------------
		align 4

loc_6888A664:				; CODE XREF: aim_ssi_delgroup+1Bj
					; aim_ssi_delgroup+47j	...
		mov	eax, 0FFFFFFEAh
		mov	edx, [esp+2Ch+var_10]
		xor	edx, ds:__stack_chk_guard
		jnz	short loc_6888A67C
		add	esp, 20h
		pop	ebx
		pop	esi
		pop	edi
		retn
; ---------------------------------------------------------------------------

loc_6888A67C:				; CODE XREF: aim_ssi_delgroup+93j
					; aim_ssi_delgroup+B3j
		call	__stack_chk_fail
aim_ssi_delgroup endp

; ---------------------------------------------------------------------------
		align 4
; Exported entry  86. aim_ssi_delbuddy

; =============== S U B	R O U T	I N E =======================================


		public aim_ssi_delbuddy
aim_ssi_delbuddy proc near		; CODE XREF: aim_ssi_movebuddy+5Ep
					; aim_ssi_cleanlist+16Dp ...

var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_10		= dword	ptr -10h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	esi
		push	ebx
		sub	esp, 24h
		mov	ebx, [esp+2Ch+arg_0]
		mov	eax, [esp+2Ch+arg_4]
		mov	esi, [esp+2Ch+arg_8]
		mov	edx, ds:__stack_chk_guard
		mov	[esp+2Ch+var_10], edx
		xor	edx, edx
		test	ebx, ebx
		jz	short loc_6888A6FC
		mov	[esp+2Ch+var_20], 0
		mov	[esp+2Ch+var_24], eax
		mov	[esp+2Ch+var_28], esi
		mov	eax, [ebx+0D8h]
		mov	[esp+2Ch+var_2C], eax
		call	aim_ssi_itemlist_finditem
		mov	edx, eax
		test	eax, eax
		jz	short loc_6888A6FC
		lea	eax, [ebx+0D8h]
		call	sub_68887C04
		mov	eax, [ebx+0D8h]
		mov	edx, esi
		call	sub_688880D4
		mov	eax, [esp+2Ch+var_10]
		xor	eax, ds:__stack_chk_guard
		jnz	short loc_6888A713
		mov	eax, ebx
		add	esp, 24h
		pop	ebx
		pop	esi
		jmp	sub_688887DC
; ---------------------------------------------------------------------------
		align 4

loc_6888A6FC:				; CODE XREF: aim_ssi_delbuddy+1Fj
					; aim_ssi_delbuddy+43j
		mov	eax, 0FFFFFFEAh
		mov	edx, [esp+2Ch+var_10]
		xor	edx, ds:__stack_chk_guard
		jnz	short loc_6888A713
		add	esp, 24h
		pop	ebx
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_6888A713:				; CODE XREF: aim_ssi_delbuddy+67j
					; aim_ssi_delbuddy+87j
		call	__stack_chk_fail
aim_ssi_delbuddy endp

; Exported entry  85. aim_ssi_del_from_private_list

; =============== S U B	R O U T	I N E =======================================


		public aim_ssi_del_from_private_list
aim_ssi_del_from_private_list proc near	; CODE XREF: aim_ssi_cleanlist+1B7p
					; oscar_rem_permit+45p	...

var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_10		= dword	ptr -10h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= word ptr  0Ch

		push	ebx
		sub	esp, 28h
		mov	ebx, [esp+2Ch+arg_0]
		mov	eax, [esp+2Ch+arg_4]
		movzx	edx, [esp+2Ch+arg_8]
		mov	ecx, ds:__stack_chk_guard
		mov	[esp+2Ch+var_10], ecx
		xor	ecx, ecx
		test	ebx, ebx
		jz	short loc_6888A780
		mov	[esp+2Ch+var_20], edx
		mov	[esp+2Ch+var_24], eax
		mov	[esp+2Ch+var_28], 0
		mov	eax, [ebx+0D8h]
		mov	[esp+2Ch+var_2C], eax
		call	aim_ssi_itemlist_finditem
		mov	edx, eax
		test	eax, eax
		jz	short loc_6888A780
		lea	eax, [ebx+0D8h]
		call	sub_68887C04
		mov	eax, [esp+2Ch+var_10]
		xor	eax, ds:__stack_chk_guard
		jnz	short loc_6888A796
		mov	eax, ebx
		add	esp, 28h
		pop	ebx
		jmp	sub_688887DC
; ---------------------------------------------------------------------------
		align 10h

loc_6888A780:				; CODE XREF: aim_ssi_del_from_private_list+1Fj
					; aim_ssi_del_from_private_list+43j
		mov	eax, 0FFFFFFEAh
		mov	edx, [esp+2Ch+var_10]
		xor	edx, ds:__stack_chk_guard
		jnz	short loc_6888A796
		add	esp, 28h
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_6888A796:				; CODE XREF: aim_ssi_del_from_private_list+5Aj
					; aim_ssi_del_from_private_list+77j
		call	__stack_chk_fail
aim_ssi_del_from_private_list endp

; ---------------------------------------------------------------------------
		align 4
; Exported entry  81. aim_ssi_add_to_private_list

; =============== S U B	R O U T	I N E =======================================


		public aim_ssi_add_to_private_list
aim_ssi_add_to_private_list proc near	; CODE XREF: oscar_add_permit+45p
					; oscar_add_deny+4Cp ...

var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_20		= dword	ptr -20h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= word ptr  0Ch

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 2Ch
		mov	ebx, [esp+3Ch+arg_0]
		mov	esi, [esp+3Ch+arg_4]
		movzx	edi, [esp+3Ch+arg_8]
		mov	eax, ds:__stack_chk_guard
		mov	[esp+3Ch+var_20], eax
		xor	eax, eax
		test	ebx, ebx
		jz	loc_6888A864
		test	esi, esi
		jz	loc_6888A864
		mov	eax, [ebx+0CCh]
		test	eax, eax
		jz	loc_6888A864
		mov	ecx, [ebx+0D8h]
		test	ecx, ecx
		jz	short loc_6888A7F9
		nop

loc_6888A7E4:				; CODE XREF: aim_ssi_add_to_private_list+5Bj
		cmp	word ptr [ecx+4], 0
		jnz	short loc_6888A7F2
		cmp	word ptr [ecx+6], 0
		jz	short loc_6888A85C

loc_6888A7F2:				; CODE XREF: aim_ssi_add_to_private_list+4Dj
		mov	ecx, [ecx+10h]
		test	ecx, ecx
		jnz	short loc_6888A7E4

loc_6888A7F9:				; CODE XREF: aim_ssi_add_to_private_list+45j
		lea	ebp, [ebx+0D8h]
		mov	[esp+3Ch+var_34], 0
		mov	[esp+3Ch+var_38], 1
		mov	[esp+3Ch+var_3C], 0
		xor	ecx, ecx
		xor	edx, edx
		mov	eax, ebp
		call	sub_68887D10

loc_6888A821:				; CODE XREF: aim_ssi_add_to_private_list+C6j
		mov	[esp+3Ch+var_34], 0
		mov	[esp+3Ch+var_38], edi
		mov	[esp+3Ch+var_3C], 0FFFFh
		xor	ecx, ecx
		mov	edx, esi
		mov	eax, ebp
		call	sub_68887D10
		mov	edx, [esp+3Ch+var_20]
		xor	edx, ds:__stack_chk_guard
		jnz	short loc_6888A87D
		mov	eax, ebx
		add	esp, 2Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		jmp	sub_688887DC
; ---------------------------------------------------------------------------
		align 4

loc_6888A85C:				; CODE XREF: aim_ssi_add_to_private_list+54j
		lea	ebp, [ebx+0D8h]
		jmp	short loc_6888A821
; ---------------------------------------------------------------------------

loc_6888A864:				; CODE XREF: aim_ssi_add_to_private_list+21j
					; aim_ssi_add_to_private_list+29j ...
		mov	eax, 0FFFFFFEAh
		mov	edx, [esp+3Ch+var_20]
		xor	edx, ds:__stack_chk_guard
		jnz	short loc_6888A87D
		add	esp, 2Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_6888A87D:				; CODE XREF: aim_ssi_add_to_private_list+ADj
					; aim_ssi_add_to_private_list+D7j
		call	__stack_chk_fail
aim_ssi_add_to_private_list endp

; ---------------------------------------------------------------------------
		align 4
; Exported entry  82. aim_ssi_addbuddy

; =============== S U B	R O U T	I N E =======================================


		public aim_ssi_addbuddy
aim_ssi_addbuddy proc near		; CODE XREF: oscar_auth_sendrequest+10Bp
					; aim_ssi_movebuddy+96p ...

var_5C		= dword	ptr -5Ch
var_58		= dword	ptr -58h
var_54		= dword	ptr -54h
var_50		= dword	ptr -50h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_20		= dword	ptr -20h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h
arg_18		= dword	ptr  1Ch
arg_1C		= dword	ptr  20h

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 4Ch
		mov	ebx, [esp+5Ch+arg_0]
		mov	edx, [esp+5Ch+arg_4]
		mov	[esp+5Ch+var_44], edx
		mov	esi, [esp+5Ch+arg_8]
		mov	ebp, [esp+5Ch+arg_10]
		mov	eax, [esp+5Ch+arg_14]
		mov	[esp+5Ch+var_40], eax
		mov	edx, [esp+5Ch+arg_18]
		mov	[esp+5Ch+var_3C], edx
		mov	eax, [esp+5Ch+arg_1C]
		mov	[esp+5Ch+var_34], eax
		mov	eax, [esp+5Ch+arg_C]
		mov	[esp+5Ch+var_30], eax
		mov	edx, ds:__stack_chk_guard
		mov	[esp+5Ch+var_20], edx
		xor	edx, edx
		test	ebx, ebx
		jz	loc_6888AAA0
		mov	eax, [esp+5Ch+var_44]
		test	eax, eax
		jz	loc_6888AAA0
		test	esi, esi
		jz	loc_6888AAA0
		mov	[esp+5Ch+var_50], 1
		mov	[esp+5Ch+var_54], 0
		mov	[esp+5Ch+var_58], esi
		mov	eax, [ebx+0D8h]
		mov	[esp+5Ch+var_5C], eax
		call	aim_ssi_itemlist_finditem
		mov	edi, eax
		test	eax, eax
		jz	loc_6888AA0C
		lea	eax, [ebx+0D8h]
		mov	[esp+5Ch+var_38], eax

loc_6888A91D:				; CODE XREF: aim_ssi_addbuddy+209j
		mov	eax, [esp+5Ch+var_34]
		test	eax, eax
		jnz	loc_6888A9F0

loc_6888A929:				; CODE XREF: aim_ssi_addbuddy+180j
		test	ebp, ebp
		jz	short loc_6888A945
		mov	[esp+5Ch+var_54], ebp
		mov	[esp+5Ch+var_58], 131h
		lea	eax, [esp+5Ch+var_30]
		mov	[esp+5Ch+var_5C], eax
		call	aim_tlvlist_add_str

loc_6888A945:				; CODE XREF: aim_ssi_addbuddy+A7j
		mov	eax, [esp+5Ch+var_3C]
		test	eax, eax
		jz	short loc_6888A969
		mov	edx, [esp+5Ch+var_3C]
		mov	[esp+5Ch+var_54], edx
		mov	[esp+5Ch+var_58], 13Ah
		lea	eax, [esp+5Ch+var_30]
		mov	[esp+5Ch+var_5C], eax
		call	aim_tlvlist_add_str

loc_6888A969:				; CODE XREF: aim_ssi_addbuddy+C7j
		mov	eax, [esp+5Ch+var_40]
		test	eax, eax
		jz	short loc_6888A98D
		mov	eax, [esp+5Ch+var_40]
		mov	[esp+5Ch+var_54], eax
		mov	[esp+5Ch+var_58], 13Ch
		lea	eax, [esp+5Ch+var_30]
		mov	[esp+5Ch+var_5C], eax
		call	aim_tlvlist_add_str

loc_6888A98D:				; CODE XREF: aim_ssi_addbuddy+EBj
		movzx	ecx, word ptr [edi+4]
		mov	eax, [esp+5Ch+var_30]
		mov	[esp+5Ch+var_54], eax
		mov	[esp+5Ch+var_58], 0
		mov	[esp+5Ch+var_5C], 0FFFFh
		mov	edx, [esp+5Ch+var_44]
		mov	eax, [esp+5Ch+var_38]
		call	sub_68887D10
		mov	eax, [esp+5Ch+var_30]
		mov	[esp+5Ch+var_5C], eax
		call	aim_tlvlist_free
		mov	eax, [ebx+0D8h]
		mov	edx, esi
		call	sub_688880D4
		mov	eax, ebx
		call	sub_688887DC

loc_6888A9D5:				; CODE XREF: aim_ssi_addbuddy+221j
		mov	edx, [esp+5Ch+var_20]
		xor	edx, ds:__stack_chk_guard
		jnz	loc_6888AAAA
		add	esp, 4Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6888A9F0:				; CODE XREF: aim_ssi_addbuddy+9Fj
		mov	[esp+5Ch+var_58], 66h
		lea	eax, [esp+5Ch+var_30]
		mov	[esp+5Ch+var_5C], eax
		call	aim_tlvlist_add_noval
		jmp	loc_6888A929
; ---------------------------------------------------------------------------
		align 4

loc_6888AA0C:				; CODE XREF: aim_ssi_addbuddy+89j
		mov	eax, [ebx+0D8h]
		test	eax, eax
		jz	short loc_6888AA2D
		xchg	ax, ax

loc_6888AA18:				; CODE XREF: aim_ssi_addbuddy+1A7j
		cmp	word ptr [eax+4], 0
		jnz	short loc_6888AA26
		cmp	word ptr [eax+6], 0
		jz	short loc_6888AA94

loc_6888AA26:				; CODE XREF: aim_ssi_addbuddy+199j
		mov	eax, [eax+10h]
		test	eax, eax
		jnz	short loc_6888AA18

loc_6888AA2D:				; CODE XREF: aim_ssi_addbuddy+190j
		lea	eax, [ebx+0D8h]
		mov	[esp+5Ch+var_38], eax
		mov	[esp+5Ch+var_54], 0
		mov	[esp+5Ch+var_58], 1
		mov	[esp+5Ch+var_5C], 0
		xor	ecx, ecx
		xor	edx, edx
		call	sub_68887D10

loc_6888AA57:				; CODE XREF: aim_ssi_addbuddy+21Aj
		mov	[esp+5Ch+var_54], 0
		mov	[esp+5Ch+var_58], 1
		mov	[esp+5Ch+var_5C], 0
		mov	ecx, 0FFFFh
		mov	edx, esi
		mov	eax, [esp+5Ch+var_38]
		call	sub_68887D10
		mov	edi, eax
		mov	eax, [ebx+0D8h]
		xor	edx, edx
		call	sub_688880D4
		jmp	loc_6888A91D
; ---------------------------------------------------------------------------
		align 4

loc_6888AA94:				; CODE XREF: aim_ssi_addbuddy+1A0j
		lea	eax, [ebx+0D8h]
		mov	[esp+5Ch+var_38], eax
		jmp	short loc_6888AA57
; ---------------------------------------------------------------------------

loc_6888AAA0:				; CODE XREF: aim_ssi_addbuddy+49j
					; aim_ssi_addbuddy+55j	...
		mov	eax, 0FFFFFFEAh
		jmp	loc_6888A9D5
; ---------------------------------------------------------------------------

loc_6888AAAA:				; CODE XREF: aim_ssi_addbuddy+15Bj
		call	__stack_chk_fail
aim_ssi_addbuddy endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 102. aim_ssi_movebuddy

; =============== S U B	R O U T	I N E =======================================


		public aim_ssi_movebuddy
aim_ssi_movebuddy proc near		; CODE XREF: oscar_move_buddy+9Fj

var_5C		= dword	ptr -5Ch
var_58		= dword	ptr -58h
var_54		= dword	ptr -54h
var_50		= dword	ptr -50h
var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_30		= dword	ptr -30h
var_20		= dword	ptr -20h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 4Ch
		mov	ebx, [esp+5Ch+arg_0]
		mov	edi, [esp+5Ch+arg_4]
		mov	ebp, [esp+5Ch+arg_8]
		mov	esi, [esp+5Ch+arg_C]
		mov	eax, ds:__stack_chk_guard
		mov	[esp+5Ch+var_20], eax
		xor	eax, eax
		mov	[esp+5Ch+var_50], 0
		mov	[esp+5Ch+var_54], esi
		mov	[esp+5Ch+var_58], edi
		mov	eax, [ebx+0D8h]
		mov	[esp+5Ch+var_5C], eax
		call	aim_ssi_itemlist_finditem
		test	eax, eax
		jz	short loc_6888AB61
		mov	eax, [eax+0Ch]
		mov	[esp+5Ch+var_5C], eax
		call	aim_tlvlist_copy
		mov	[esp+5Ch+var_54], edi
		mov	[esp+5Ch+var_58], esi
		mov	[esp+5Ch+var_5C], ebx
		mov	[esp+5Ch+var_30], eax
		call	aim_ssi_delbuddy
		mov	[esp+5Ch+var_40], 0
		mov	[esp+5Ch+var_44], 0
		mov	[esp+5Ch+var_48], 0
		mov	[esp+5Ch+var_4C], 0
		mov	edx, [esp+5Ch+var_30]
		mov	[esp+5Ch+var_50], edx
		mov	[esp+5Ch+var_54], ebp
		mov	[esp+5Ch+var_58], esi
		mov	[esp+5Ch+var_5C], ebx
		call	aim_ssi_addbuddy
		xor	eax, eax

loc_6888AB4D:				; CODE XREF: aim_ssi_movebuddy+B6j
		mov	edx, [esp+5Ch+var_20]
		xor	edx, ds:__stack_chk_guard
		jnz	short loc_6888AB68
		add	esp, 4Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_6888AB61:				; CODE XREF: aim_ssi_movebuddy+42j
		mov	eax, 0FFFFFFEAh
		jmp	short loc_6888AB4D
; ---------------------------------------------------------------------------

loc_6888AB68:				; CODE XREF: aim_ssi_movebuddy+A7j
		call	__stack_chk_fail
aim_ssi_movebuddy endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  84. aim_ssi_cleanlist

; =============== S U B	R O U T	I N E =======================================


		public aim_ssi_cleanlist
aim_ssi_cleanlist proc near		; CODE XREF: sub_688A46F4+6Ep

var_5C		= dword	ptr -5Ch
var_58		= dword	ptr -58h
var_54		= dword	ptr -54h
var_50		= dword	ptr -50h
var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_30		= dword	ptr -30h
var_20		= dword	ptr -20h
arg_0		= dword	ptr  4

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 4Ch
		mov	edi, [esp+5Ch+arg_0]
		mov	eax, ds:__stack_chk_guard
		mov	[esp+5Ch+var_20], eax
		xor	eax, eax
		test	edi, edi
		jz	loc_6888AD7D
		mov	ebx, [edi+0D8h]
		test	ebx, ebx
		jz	loc_6888AD3C

loc_6888AB9C:				; CODE XREF: aim_ssi_cleanlist+7Cj
					; aim_ssi_cleanlist+17Ej ...
		mov	esi, [ebx+10h]
		mov	ecx, [ebx]
		test	ecx, ecx
		jz	loc_6888ACFC
		cmp	word ptr [ebx+8], 0
		jnz	short loc_6888ABE8
		mov	eax, [ebx+4]
		mov	ebp, [edi+0D8h]
		test	ax, ax
		jz	loc_6888AC7C
		test	ebp, ebp
		jz	loc_6888AC7C
		mov	edx, ebp
		jmp	short loc_6888ABDB
; ---------------------------------------------------------------------------
		align 10h

loc_6888ABD0:				; CODE XREF: aim_ssi_cleanlist+6Fj
					; aim_ssi_cleanlist+76j
		mov	edx, [edx+10h]
		test	edx, edx
		jz	loc_6888AC7C

loc_6888ABDB:				; CODE XREF: aim_ssi_cleanlist+5Cj
		cmp	ax, [edx+4]
		jnz	short loc_6888ABD0
		cmp	word ptr [edx+6], 0
		jnz	short loc_6888ABD0

loc_6888ABE8:				; CODE XREF: aim_ssi_cleanlist+3Ej
					; aim_ssi_cleanlist+1A2j
		mov	ebx, esi
		test	esi, esi
		jnz	short loc_6888AB9C

loc_6888ABEE:				; CODE XREF: aim_ssi_cleanlist+184j
					; aim_ssi_cleanlist+1C6j ...
		mov	ebp, [edi+0D8h]
		test	ebp, ebp
		jz	loc_6888AD3C
		lea	eax, [edi+0D8h]
		mov	[esp+5Ch+var_30], eax
		jmp	short loc_6888AC1F
; ---------------------------------------------------------------------------

loc_6888AC08:				; CODE XREF: aim_ssi_cleanlist+B5j
		cmp	ax, 2
		jz	short loc_6888AC27
		cmp	ax, 3
		jz	short loc_6888AC27

loc_6888AC14:				; CODE XREF: aim_ssi_cleanlist+C6j
		mov	ebp, [ebp+10h]
		test	ebp, ebp
		jz	loc_6888AD3C

loc_6888AC1F:				; CODE XREF: aim_ssi_cleanlist+96j
		mov	eax, [ebp+8]
		test	ax, ax
		jnz	short loc_6888AC08

loc_6888AC27:				; CODE XREF: aim_ssi_cleanlist+9Cj
					; aim_ssi_cleanlist+A2j
		mov	ebx, [ebp+10h]
		test	ebx, ebx
		jnz	short loc_6888AC3D
		jmp	loc_6888AD3C
; ---------------------------------------------------------------------------
		align 4

loc_6888AC34:				; CODE XREF: aim_ssi_cleanlist+D4j
					; aim_ssi_cleanlist+DDj ...
		test	esi, esi
		jz	short loc_6888AC14
		mov	eax, [ebp+8]
		mov	ebx, esi

loc_6888AC3D:				; CODE XREF: aim_ssi_cleanlist+BCj
		mov	esi, [ebx+10h]
		cmp	ax, [ebx+8]
		jnz	short loc_6888AC34
		mov	edx, [ebx+4]
		cmp	[ebp+4], dx
		jnz	short loc_6888AC34
		mov	eax, [ebp+0]
		test	eax, eax
		jz	short loc_6888AC34
		mov	edx, [ebx]
		test	edx, edx
		jz	short loc_6888AC34
		mov	[esp+5Ch+var_58], edx
		mov	[esp+5Ch+var_5C], eax
		call	oscar_util_name_compare
		test	eax, eax
		jnz	short loc_6888AC34
		mov	edx, ebx
		mov	eax, [esp+5Ch+var_30]
		call	sub_68887C04
		jmp	short loc_6888AC34
; ---------------------------------------------------------------------------
		align 4

loc_6888AC7C:				; CODE XREF: aim_ssi_cleanlist+4Cj
					; aim_ssi_cleanlist+54j ...
		mov	[esp+5Ch+var_54], ecx
		mov	[esp+5Ch+var_58], 0
		mov	[esp+5Ch+var_5C], ebp
		call	aim_ssi_getalias
		mov	ebp, eax
		mov	[esp+5Ch+var_40], 0
		mov	[esp+5Ch+var_44], 0
		mov	[esp+5Ch+var_48], 0
		mov	[esp+5Ch+var_4C], eax
		mov	[esp+5Ch+var_50], 0
		mov	[esp+5Ch+var_54], offset aOrphans ; "orphans"
		mov	eax, [ebx]
		mov	[esp+5Ch+var_58], eax
		mov	[esp+5Ch+var_5C], edi
		call	aim_ssi_addbuddy
		mov	[esp+5Ch+var_54], 0
		mov	eax, [ebx]
		mov	[esp+5Ch+var_58], eax
		mov	[esp+5Ch+var_5C], edi
		call	aim_ssi_delbuddy
		mov	[esp+5Ch+var_5C], ebp
		call	g_free
		mov	ebx, esi
		test	esi, esi
		jnz	loc_6888AB9C
		jmp	loc_6888ABEE
; ---------------------------------------------------------------------------
		align 4

loc_6888ACFC:				; CODE XREF: aim_ssi_cleanlist+33j
		movzx	eax, word ptr [ebx+8]
		test	ax, ax
		jz	short loc_6888AD56
		lea	edx, [eax-2]
		cmp	dx, 1
		jbe	short loc_6888AD18
		cmp	ax, 0Eh
		jnz	loc_6888ABE8

loc_6888AD18:				; CODE XREF: aim_ssi_cleanlist+19Cj
		mov	[esp+5Ch+var_54], eax
		mov	[esp+5Ch+var_58], 0
		mov	[esp+5Ch+var_5C], edi
		call	aim_ssi_del_from_private_list
		mov	ebx, esi
		test	esi, esi
		jnz	loc_6888AB9C
		jmp	loc_6888ABEE
; ---------------------------------------------------------------------------
		align 4

loc_6888AD3C:				; CODE XREF: aim_ssi_cleanlist+26j
					; aim_ssi_cleanlist+86j ...
		mov	edx, [esp+5Ch+var_20]
		xor	edx, ds:__stack_chk_guard
		jnz	short loc_6888AD96
		mov	eax, edi
		add	esp, 4Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		jmp	sub_688887DC
; ---------------------------------------------------------------------------

loc_6888AD56:				; CODE XREF: aim_ssi_cleanlist+193j
		mov	[esp+5Ch+var_54], 0
		mov	[esp+5Ch+var_58], 0
		mov	[esp+5Ch+var_5C], edi
		call	aim_ssi_delbuddy
		mov	ebx, esi
		test	esi, esi
		jnz	loc_6888AB9C
		jmp	loc_6888ABEE
; ---------------------------------------------------------------------------

loc_6888AD7D:				; CODE XREF: aim_ssi_cleanlist+18j
		mov	eax, 0FFFFFFEAh
		mov	edx, [esp+5Ch+var_20]
		xor	edx, ds:__stack_chk_guard
		jnz	short loc_6888AD96
		add	esp, 4Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_6888AD96:				; CODE XREF: aim_ssi_cleanlist+1D6j
					; aim_ssi_cleanlist+21Cj
		call	__stack_chk_fail
aim_ssi_cleanlist endp

; ---------------------------------------------------------------------------
		align 4
; Exported entry 107. aim_ssi_sendauthrequest

; =============== S U B	R O U T	I N E =======================================


		public aim_ssi_sendauthrequest
aim_ssi_sendauthrequest	proc near	; CODE XREF: oscar_auth_sendrequest+8Dp

var_5C		= dword	ptr -5Ch
var_58		= dword	ptr -58h
var_54		= dword	ptr -54h
var_50		= dword	ptr -50h
var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= byte ptr -2Ch
var_20		= dword	ptr -20h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 4Ch
		mov	esi, [esp+5Ch+arg_0]
		mov	ebp, [esp+5Ch+arg_4]
		mov	eax, [esp+5Ch+arg_8]
		mov	[esp+5Ch+var_34], eax
		mov	edx, ds:__stack_chk_guard
		mov	[esp+5Ch+var_20], edx
		xor	edx, edx
		test	esi, esi
		jz	loc_6888AF70
		mov	[esp+5Ch+var_58], 13h
		mov	[esp+5Ch+var_5C], esi
		call	flap_connection_findbygroup
		mov	[esp+5Ch+var_30], eax
		test	eax, eax
		jz	loc_6888AF70
		test	ebp, ebp
		jz	loc_6888AF70
		mov	ecx, 0FFFFFFFFh
		mov	edi, ebp
		xor	eax, eax
		repne scasb
		mov	edx, ecx
		not	edx
		mov	ecx, [esp+5Ch+var_34]
		test	ecx, ecx
		jz	loc_6888AF1C
		mov	ecx, 0FFFFFFFFh
		mov	edi, [esp+5Ch+var_34]
		repne scasb
		not	ecx
		lea	eax, [edx+ecx+4]
		mov	[esp+5Ch+var_58], eax
		lea	ebx, [esp+5Ch+var_2C]
		mov	[esp+5Ch+var_5C], ebx
		call	sub_68881748
		mov	ecx, 0FFFFFFFFh
		mov	edi, ebp
		xor	eax, eax
		repne scasb
		not	ecx
		dec	ecx
		and	ecx, 0FFh
		mov	[esp+5Ch+var_58], ecx
		mov	[esp+5Ch+var_5C], ebx
		call	sub_68881DA4
		mov	[esp+5Ch+var_58], ebp
		mov	[esp+5Ch+var_5C], ebx
		call	sub_68882114
		mov	ecx, 0FFFFFFFFh
		mov	edi, [esp+5Ch+var_34]
		xor	eax, eax
		repne scasb
		not	ecx
		dec	ecx
		and	ecx, 0FFFFh
		mov	[esp+5Ch+var_58], ecx
		mov	[esp+5Ch+var_5C], ebx
		call	sub_68881E0C
		mov	edx, [esp+5Ch+var_34]
		mov	[esp+5Ch+var_58], edx
		mov	[esp+5Ch+var_5C], ebx
		call	sub_68882114
		mov	[esp+5Ch+var_58], 0
		mov	[esp+5Ch+var_5C], ebx
		call	sub_68881DA4

loc_6888AE95:				; CODE XREF: aim_ssi_sendauthrequest+1CFj
		mov	[esp+5Ch+var_58], 0
		mov	[esp+5Ch+var_5C], ebx
		call	sub_68881E0C
		mov	[esp+5Ch+var_48], 0
		mov	[esp+5Ch+var_4C], 0
		mov	[esp+5Ch+var_50], 0
		mov	[esp+5Ch+var_54], 18h
		mov	[esp+5Ch+var_58], 13h
		mov	[esp+5Ch+var_5C], esi
		call	aim_cachesnac
		mov	[esp+5Ch+var_48], ebx
		mov	[esp+5Ch+var_4C], eax
		mov	[esp+5Ch+var_50], 18h
		mov	[esp+5Ch+var_54], 13h
		mov	eax, [esp+5Ch+var_30]
		mov	[esp+5Ch+var_58], eax
		mov	[esp+5Ch+var_5C], esi
		call	flap_connection_send_snac
		mov	[esp+5Ch+var_5C], ebx
		call	sub_688817E4
		xor	eax, eax

loc_6888AF07:				; CODE XREF: aim_ssi_sendauthrequest+1D9j
		mov	edx, [esp+5Ch+var_20]
		xor	edx, ds:__stack_chk_guard
		jnz	short loc_6888AF77
		add	esp, 4Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 4

loc_6888AF1C:				; CODE XREF: aim_ssi_sendauthrequest+64j
		add	edx, 4
		mov	[esp+5Ch+var_58], edx
		lea	ebx, [esp+5Ch+var_2C]
		mov	[esp+5Ch+var_5C], ebx
		call	sub_68881748
		mov	ecx, 0FFFFFFFFh
		mov	edi, ebp
		xor	eax, eax
		repne scasb
		not	ecx
		dec	ecx
		and	ecx, 0FFh
		mov	[esp+5Ch+var_58], ecx
		mov	[esp+5Ch+var_5C], ebx
		call	sub_68881DA4
		mov	[esp+5Ch+var_58], ebp
		mov	[esp+5Ch+var_5C], ebx
		call	sub_68882114
		mov	[esp+5Ch+var_58], 0
		mov	[esp+5Ch+var_5C], ebx
		call	sub_68881E0C
		jmp	loc_6888AE95
; ---------------------------------------------------------------------------

loc_6888AF70:				; CODE XREF: aim_ssi_sendauthrequest+25j
					; aim_ssi_sendauthrequest+41j ...
		mov	eax, 0FFFFFFEAh
		jmp	short loc_6888AF07
; ---------------------------------------------------------------------------

loc_6888AF77:				; CODE XREF: aim_ssi_sendauthrequest+175j
		call	__stack_chk_fail
aim_ssi_sendauthrequest	endp

; Exported entry 106. aim_ssi_sendauthreply

; =============== S U B	R O U T	I N E =======================================


		public aim_ssi_sendauthreply
aim_ssi_sendauthreply proc near		; CODE XREF: .text:688813DBp
					; sub_6888141C+37p

var_5C		= dword	ptr -5Ch
var_58		= dword	ptr -58h
var_54		= dword	ptr -54h
var_50		= dword	ptr -50h
var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_2D		= byte ptr -2Dh
var_2C		= byte ptr -2Ch
var_20		= dword	ptr -20h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= byte ptr  0Ch
arg_C		= dword	ptr  10h

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 4Ch
		mov	esi, [esp+5Ch+arg_0]
		mov	ebp, [esp+5Ch+arg_4]
		mov	eax, [esp+5Ch+arg_C]
		mov	[esp+5Ch+var_38], eax
		mov	dl, [esp+5Ch+arg_8]
		mov	[esp+5Ch+var_2D], dl
		mov	ecx, ds:__stack_chk_guard
		mov	[esp+5Ch+var_20], ecx
		xor	ecx, ecx
		test	esi, esi
		jz	loc_6888B178
		mov	[esp+5Ch+var_58], 13h
		mov	[esp+5Ch+var_5C], esi
		call	flap_connection_findbygroup
		mov	[esp+5Ch+var_34], eax
		test	eax, eax
		jz	loc_6888B178
		test	ebp, ebp
		jz	loc_6888B178
		mov	ecx, 0FFFFFFFFh
		mov	edi, ebp
		xor	eax, eax
		repne scasb
		mov	edx, ecx
		not	edx
		mov	ebx, [esp+5Ch+var_38]
		test	ebx, ebx
		jz	loc_6888B110
		mov	ecx, 0FFFFFFFFh
		mov	edi, [esp+5Ch+var_38]
		repne scasb
		not	ecx
		lea	eax, [edx+ecx+5]
		mov	[esp+5Ch+var_58], eax
		lea	ebx, [esp+5Ch+var_2C]
		mov	[esp+5Ch+var_5C], ebx
		call	sub_68881748
		mov	ecx, 0FFFFFFFFh
		mov	edi, ebp
		xor	eax, eax
		repne scasb
		not	ecx
		dec	ecx
		and	ecx, 0FFh
		mov	[esp+5Ch+var_58], ecx
		mov	[esp+5Ch+var_5C], ebx
		call	sub_68881DA4
		mov	[esp+5Ch+var_58], ebp
		mov	[esp+5Ch+var_5C], ebx
		call	sub_68882114
		movzx	eax, [esp+5Ch+var_2D]
		mov	[esp+5Ch+var_58], eax
		mov	[esp+5Ch+var_5C], ebx
		call	sub_68881DA4
		mov	ecx, 0FFFFFFFFh
		mov	edi, [esp+5Ch+var_38]
		xor	eax, eax
		repne scasb
		not	ecx
		movzx	ecx, cx
		mov	[esp+5Ch+var_58], ecx
		mov	[esp+5Ch+var_5C], ebx
		call	sub_68881E0C
		mov	edx, [esp+5Ch+var_38]
		mov	[esp+5Ch+var_58], edx
		mov	[esp+5Ch+var_5C], ebx
		call	sub_68882114
		mov	[esp+5Ch+var_58], 0
		mov	[esp+5Ch+var_5C], ebx
		call	sub_68881DA4

loc_6888B08A:				; CODE XREF: aim_ssi_sendauthreply+1F4j
		mov	[esp+5Ch+var_58], 0
		mov	[esp+5Ch+var_5C], ebx
		call	sub_68881E0C
		mov	[esp+5Ch+var_48], 0
		mov	[esp+5Ch+var_4C], 0
		mov	[esp+5Ch+var_50], 0
		mov	[esp+5Ch+var_54], 1Ah
		mov	[esp+5Ch+var_58], 13h
		mov	[esp+5Ch+var_5C], esi
		call	aim_cachesnac
		mov	[esp+5Ch+var_48], ebx
		mov	[esp+5Ch+var_4C], eax
		mov	[esp+5Ch+var_50], 1Ah
		mov	[esp+5Ch+var_54], 13h
		mov	eax, [esp+5Ch+var_34]
		mov	[esp+5Ch+var_58], eax
		mov	[esp+5Ch+var_5C], esi
		call	flap_connection_send_snac
		mov	[esp+5Ch+var_5C], ebx
		call	sub_688817E4
		xor	eax, eax

loc_6888B0FC:				; CODE XREF: aim_ssi_sendauthreply+201j
		mov	edx, [esp+5Ch+var_20]
		xor	edx, ds:__stack_chk_guard
		jnz	short loc_6888B182
		add	esp, 4Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_6888B110:				; CODE XREF: aim_ssi_sendauthreply+6Cj
		add	edx, 5
		mov	[esp+5Ch+var_58], edx
		lea	ebx, [esp+5Ch+var_2C]
		mov	[esp+5Ch+var_5C], ebx
		call	sub_68881748
		mov	ecx, 0FFFFFFFFh
		mov	edi, ebp
		xor	eax, eax
		repne scasb
		not	ecx
		dec	ecx
		and	ecx, 0FFh
		mov	[esp+5Ch+var_58], ecx
		mov	[esp+5Ch+var_5C], ebx
		call	sub_68881DA4
		mov	[esp+5Ch+var_58], ebp
		mov	[esp+5Ch+var_5C], ebx
		call	sub_68882114
		movzx	eax, [esp+5Ch+var_2D]
		mov	[esp+5Ch+var_58], eax
		mov	[esp+5Ch+var_5C], ebx
		call	sub_68881DA4
		mov	[esp+5Ch+var_58], 0
		mov	[esp+5Ch+var_5C], ebx
		call	sub_68881E0C
		jmp	loc_6888B08A
; ---------------------------------------------------------------------------
		align 4

loc_6888B178:				; CODE XREF: aim_ssi_sendauthreply+2Dj
					; aim_ssi_sendauthreply+49j ...
		mov	eax, 0FFFFFFEAh
		jmp	loc_6888B0FC
; ---------------------------------------------------------------------------

loc_6888B182:				; CODE XREF: aim_ssi_sendauthreply+18Aj
		call	__stack_chk_fail
aim_ssi_sendauthreply endp

; ---------------------------------------------------------------------------
		align 4
; Exported entry  93. aim_ssi_getdenyentrytype

; =============== S U B	R O U T	I N E =======================================


		public aim_ssi_getdenyentrytype
aim_ssi_getdenyentrytype proc near	; CODE XREF: oscar_add_deny+39p
					; oscar_rem_deny+39p ...

var_10		= dword	ptr -10h
arg_0		= dword	ptr  4

		sub	esp, 1Ch
		mov	eax, ds:__stack_chk_guard
		mov	[esp+1Ch+var_10], eax
		xor	eax, eax
		mov	eax, [esp+1Ch+arg_0]
		mov	eax, [eax+44h]
		test	eax, eax
		jnz	short loc_6888B1B8
		mov	eax, 3

loc_6888B1A6:				; CODE XREF: aim_ssi_getdenyentrytype+35j
		mov	edx, [esp+1Ch+var_10]
		xor	edx, ds:__stack_chk_guard
		jnz	short loc_6888B1BF
		add	esp, 1Ch
		retn
; ---------------------------------------------------------------------------
		align 4

loc_6888B1B8:				; CODE XREF: aim_ssi_getdenyentrytype+17j
		mov	eax, 0Eh
		jmp	short loc_6888B1A6
; ---------------------------------------------------------------------------

loc_6888B1BF:				; CODE XREF: aim_ssi_getdenyentrytype+28j
		call	__stack_chk_fail
aim_ssi_getdenyentrytype endp

; Exported entry 318. ssi_modfirst

; =============== S U B	R O U T	I N E =======================================


		public ssi_modfirst
ssi_modfirst	proc near		; DATA XREF: oscar_data_new+152o

Dest		= dword	ptr -2Ch
Source		= dword	ptr -28h
Count		= dword	ptr -24h
var_10		= dword	ptr -10h
arg_4		= dword	ptr  8

		push	ebx
		sub	esp, 28h
		mov	ebx, [esp+2Ch+arg_4]
		mov	eax, ds:__stack_chk_guard
		mov	[esp+2Ch+var_10], eax
		xor	eax, eax
		mov	word ptr [ebx],	13h
		mov	word ptr [ebx+2], 4
		mov	word ptr [ebx+4], 110h
		mov	word ptr [ebx+6], 629h
		mov	word ptr [ebx+8], 0
		mov	[esp+2Ch+Count], 11h ; Count
		mov	[esp+2Ch+Source], offset aFeedbag ; "feedbag"
		lea	eax, [ebx+0Ah]
		mov	[esp+2Ch+Dest],	eax ; Dest
		call	strncpy
		mov	dword ptr [ebx+1Ch], offset sub_68888E10
		mov	dword ptr [ebx+20h], offset sub_68887BD8
		xor	eax, eax
		mov	edx, [esp+2Ch+var_10]
		xor	edx, ds:__stack_chk_guard
		jnz	short loc_6888B230
		add	esp, 28h
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_6888B230:				; CODE XREF: ssi_modfirst+65j
		call	__stack_chk_fail
ssi_modfirst	endp

; ---------------------------------------------------------------------------
		align 4

; =============== S U B	R O U T	I N E =======================================


sub_6888B238	proc near		; DATA XREF: sub_6888B528+12E7o

var_10		= dword	ptr -10h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		sub	esp, 1Ch
		mov	eax, [esp+1Ch+arg_4]
		mov	edx, ds:__stack_chk_guard
		mov	[esp+1Ch+var_10], edx
		xor	edx, edx
		mov	edx, [esp+1Ch+var_10]
		xor	edx, ds:__stack_chk_guard
		jnz	short loc_6888B266
		mov	eax, [eax+50h]
		mov	[esp+1Ch+arg_0], eax
		add	esp, 1Ch
		jmp	g_free
; ---------------------------------------------------------------------------

loc_6888B266:				; CODE XREF: sub_6888B238+1Dj
		call	__stack_chk_fail
sub_6888B238	endp

; ---------------------------------------------------------------------------
		align 4

; =============== S U B	R O U T	I N E =======================================


sub_6888B26C	proc near		; DATA XREF: sub_6888B528+1486o

var_10		= dword	ptr -10h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		sub	esp, 1Ch
		mov	eax, [esp+1Ch+arg_4]
		mov	edx, ds:__stack_chk_guard
		mov	[esp+1Ch+var_10], edx
		xor	edx, edx
		mov	edx, [esp+1Ch+var_10]
		xor	edx, ds:__stack_chk_guard
		jnz	short loc_6888B29A
		mov	eax, [eax+48h]
		mov	[esp+1Ch+arg_0], eax
		add	esp, 1Ch
		jmp	g_free
; ---------------------------------------------------------------------------

loc_6888B29A:				; CODE XREF: sub_6888B26C+1Dj
		call	__stack_chk_fail
sub_6888B26C	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6888B2A0	proc near		; DATA XREF: sub_6888B528:loc_6888CA31o

var_10		= dword	ptr -10h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		sub	esp, 1Ch
		mov	eax, [esp+1Ch+arg_4]
		mov	edx, ds:__stack_chk_guard
		mov	[esp+1Ch+var_10], edx
		xor	edx, edx
		mov	edx, [esp+1Ch+var_10]
		xor	edx, ds:__stack_chk_guard
		jnz	short loc_6888B2CE
		mov	eax, [eax+48h]
		mov	[esp+1Ch+arg_0], eax
		add	esp, 1Ch
		jmp	g_free
; ---------------------------------------------------------------------------

loc_6888B2CE:				; CODE XREF: sub_6888B2A0+1Dj
		call	__stack_chk_fail
sub_6888B2A0	endp

; ---------------------------------------------------------------------------
		align 4

; =============== S U B	R O U T	I N E =======================================


sub_6888B2D4	proc near		; DATA XREF: sub_6888B528:loc_6888C9BEo

var_10		= dword	ptr -10h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		sub	esp, 1Ch
		mov	eax, [esp+1Ch+arg_4]
		mov	edx, ds:__stack_chk_guard
		mov	[esp+1Ch+var_10], edx
		xor	edx, edx
		mov	edx, [esp+1Ch+var_10]
		xor	edx, ds:__stack_chk_guard
		jnz	short loc_6888B302
		mov	eax, [eax+4Ch]
		mov	[esp+1Ch+arg_0], eax
		add	esp, 1Ch
		jmp	g_free
; ---------------------------------------------------------------------------

loc_6888B302:				; CODE XREF: sub_6888B2D4+1Dj
		call	__stack_chk_fail
sub_6888B2D4	endp

; ---------------------------------------------------------------------------
		align 4

; =============== S U B	R O U T	I N E =======================================


sub_6888B308	proc near		; CODE XREF: aim_im_sendch1_ext+A6p
					; aim_im_sendch2_chatinvite+1AEp ...

var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_20		= dword	ptr -20h
arg_0		= dword	ptr  4

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 2Ch
		mov	ebx, eax
		mov	esi, [esp+3Ch+arg_0]
		movzx	ebp, cx
		mov	eax, ds:__stack_chk_guard
		mov	[esp+3Ch+var_20], eax
		xor	eax, eax
		mov	[esp+3Ch+var_34], 8
		mov	[esp+3Ch+var_38], edx
		mov	[esp+3Ch+var_3C], ebx
		call	sub_688820A0
		mov	[esp+3Ch+var_38], ebp
		mov	[esp+3Ch+var_3C], ebx
		call	sub_68881E0C
		mov	ebp, 0FFFFFFFFh
		mov	ecx, ebp
		mov	edi, esi
		xor	eax, eax
		repne scasb
		not	ecx
		dec	ecx
		and	ecx, 0FFh
		mov	[esp+3Ch+var_38], ecx
		mov	[esp+3Ch+var_3C], ebx
		call	sub_68881DA4
		mov	[esp+3Ch+var_38], esi
		mov	[esp+3Ch+var_3C], ebx
		call	sub_68882114
		mov	ecx, ebp
		mov	edi, esi
		xor	eax, eax
		repne scasb
		not	ecx
		lea	eax, [ecx+0Ah]
		mov	edx, [esp+3Ch+var_20]
		xor	edx, ds:__stack_chk_guard
		jnz	short loc_6888B392
		add	esp, 2Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_6888B392:				; CODE XREF: sub_6888B308+80j
		call	__stack_chk_fail
sub_6888B308	endp

; ---------------------------------------------------------------------------
		align 4
; Exported entry  33. aim_icbm_makecookie

; =============== S U B	R O U T	I N E =======================================


		public aim_icbm_makecookie
aim_icbm_makecookie proc near		; CODE XREF: aim_im_sendch1_ext+91p
					; aim_im_sendch2_chatinvite+B5p ...

var_10		= dword	ptr -10h
arg_0		= dword	ptr  4

		push	esi
		push	ebx
		sub	esp, 14h
		mov	esi, [esp+1Ch+arg_0]
		mov	eax, ds:__stack_chk_guard
		mov	[esp+1Ch+var_10], eax
		xor	eax, eax
		xor	ebx, ebx
		xchg	ax, ax

loc_6888B3B0:				; CODE XREF: aim_icbm_makecookie+3Ej
		call	rand
		movzx	edx, al
		lea	ecx, [edx+edx*4]
		lea	edx, [edx+ecx*8]
		lea	edx, [edx+edx*4]
		shr	dx, 0Bh
		lea	edx, [edx+edx*4]
		shl	edx, 1
		sub	eax, edx
		add	eax, 30h
		mov	[esi+ebx], al
		inc	ebx
		cmp	ebx, 7
		jnz	short loc_6888B3B0
		mov	byte ptr [esi+7], 0
		mov	eax, [esp+1Ch+var_10]
		xor	eax, ds:__stack_chk_guard
		jnz	short loc_6888B3EE
		add	esp, 14h
		pop	ebx
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_6888B3EE:				; CODE XREF: aim_icbm_makecookie+4Ej
		call	__stack_chk_fail
aim_icbm_makecookie endp

; ---------------------------------------------------------------------------
		align 4
; Exported entry  53. aim_im_setparams

; =============== S U B	R O U T	I N E =======================================


		public aim_im_setparams
aim_im_setparams proc near		; CODE XREF: sub_6888B528+261p

var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_2C		= byte ptr -2Ch
var_20		= dword	ptr -20h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 3Ch
		mov	edi, [esp+4Ch+arg_0]
		mov	esi, [esp+4Ch+arg_4]
		mov	eax, ds:__stack_chk_guard
		mov	[esp+4Ch+var_20], eax
		xor	eax, eax
		test	edi, edi
		jz	loc_6888B51C
		mov	[esp+4Ch+var_48], 4
		mov	[esp+4Ch+var_4C], edi
		call	flap_connection_findbygroup
		mov	ebp, eax
		test	eax, eax
		jz	loc_6888B51C
		test	esi, esi
		jz	loc_6888B51C
		mov	[esp+4Ch+var_48], 10h
		lea	ebx, [esp+4Ch+var_2C]
		mov	[esp+4Ch+var_4C], ebx
		call	sub_68881748
		mov	[esp+4Ch+var_48], 0
		mov	[esp+4Ch+var_4C], ebx
		call	sub_68881E0C
		mov	eax, [esi+4]
		mov	[esp+4Ch+var_48], eax
		mov	[esp+4Ch+var_4C], ebx
		call	sub_68881E8C
		movzx	eax, word ptr [esi+8]
		mov	[esp+4Ch+var_48], eax
		mov	[esp+4Ch+var_4C], ebx
		call	sub_68881E0C
		movzx	eax, word ptr [esi+0Ah]
		mov	[esp+4Ch+var_48], eax
		mov	[esp+4Ch+var_4C], ebx
		call	sub_68881E0C
		movzx	eax, word ptr [esi+0Ch]
		mov	[esp+4Ch+var_48], eax
		mov	[esp+4Ch+var_4C], ebx
		call	sub_68881E0C
		mov	eax, [esi+10h]
		mov	[esp+4Ch+var_48], eax
		mov	[esp+4Ch+var_4C], ebx
		call	sub_68881E8C
		mov	[esp+4Ch+var_38], 0
		mov	[esp+4Ch+var_3C], 0
		mov	[esp+4Ch+var_40], 0
		mov	[esp+4Ch+var_44], 2
		mov	[esp+4Ch+var_48], 4
		mov	[esp+4Ch+var_4C], edi
		call	aim_cachesnac
		mov	[esp+4Ch+var_38], ebx
		mov	[esp+4Ch+var_3C], eax
		mov	[esp+4Ch+var_40], 2
		mov	[esp+4Ch+var_44], 4
		mov	[esp+4Ch+var_48], ebp
		mov	[esp+4Ch+var_4C], edi
		call	flap_connection_send_snac
		mov	[esp+4Ch+var_4C], ebx
		call	sub_688817E4
		xor	eax, eax

loc_6888B508:				; CODE XREF: aim_im_setparams+12Dj
		mov	edx, [esp+4Ch+var_20]
		xor	edx, ds:__stack_chk_guard
		jnz	short loc_6888B523
		add	esp, 3Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_6888B51C:				; CODE XREF: aim_im_setparams+1Cj
					; aim_im_setparams+36j	...
		mov	eax, 0FFFFFFEAh
		jmp	short loc_6888B508
; ---------------------------------------------------------------------------

loc_6888B523:				; CODE XREF: aim_im_setparams+11Ej
		call	__stack_chk_fail
aim_im_setparams endp


; =============== S U B	R O U T	I N E =======================================


sub_6888B528	proc near		; DATA XREF: msg_modfirst+4Bo

Buf1		= dword	ptr -21Ch
Buf2		= dword	ptr -218h
Size		= dword	ptr -214h
var_210		= dword	ptr -210h
var_20C		= dword	ptr -20Ch
var_208		= dword	ptr -208h
var_204		= dword	ptr -204h
var_200		= dword	ptr -200h
var_1F4		= dword	ptr -1F4h
var_1F0		= dword	ptr -1F0h
var_1EC		= dword	ptr -1ECh
var_1E8		= dword	ptr -1E8h
var_1E4		= dword	ptr -1E4h
var_1E0		= dword	ptr -1E0h
var_1DC		= dword	ptr -1DCh
var_1D8		= dword	ptr -1D8h
var_1D4		= dword	ptr -1D4h
var_1D0		= dword	ptr -1D0h
var_1C0		= byte ptr -1C0h
var_1B4		= byte ptr -1B4h
var_1A8		= dword	ptr -1A8h
var_1A4		= byte ptr -1A4h
var_1A3		= byte ptr -1A3h
var_1A0		= dword	ptr -1A0h
var_19C		= dword	ptr -19Ch
var_198		= word ptr -198h
var_194		= dword	ptr -194h
var_190		= word ptr -190h
var_18E		= word ptr -18Eh
var_18C		= word ptr -18Ch
var_188		= dword	ptr -188h
var_184		= dword	ptr -184h
var_180		= dword	ptr -180h
var_17C		= dword	ptr -17Ch
var_178		= dword	ptr -178h
var_174		= dword	ptr -174h
var_170		= word ptr -170h
var_16C		= word ptr -16Ch
var_16A		= dword	ptr -16Ah
var_166		= dword	ptr -166h
var_15C		= dword	ptr -15Ch
var_158		= dword	ptr -158h
var_154		= dword	ptr -154h
var_150		= dword	ptr -150h
var_14C		= dword	ptr -14Ch
var_148		= word ptr -148h
var_144		= dword	ptr -144h
var_140		= word ptr -140h
var_13C		= dword	ptr -13Ch
var_138		= word ptr -138h
var_134		= dword	ptr -134h
var_130		= dword	ptr -130h
var_12C		= word ptr -12Ch
var_128		= dword	ptr -128h
var_124		= dword	ptr -124h
var_120		= dword	ptr -120h
var_11C		= dword	ptr -11Ch
var_118		= dword	ptr -118h
var_114		= dword	ptr -114h
Dest		= byte ptr -7Ah
var_76		= byte ptr -76h
var_5C		= byte ptr -5Ch
var_58		= byte ptr -58h
var_3E		= byte ptr -3Eh
var_3A		= byte ptr -3Ah
var_20		= dword	ptr -20h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 20Ch
		mov	eax, [esp+21Ch+arg_0]
		mov	[esp+21Ch+var_1E8], eax
		mov	edx, [esp+21Ch+arg_4]
		mov	[esp+21Ch+var_1DC], edx
		mov	eax, [esp+21Ch+arg_C]
		mov	[esp+21Ch+var_1D8], eax
		mov	edx, [esp+21Ch+arg_10]
		mov	[esp+21Ch+var_1E4], edx
		mov	ebp, [esp+21Ch+arg_14]
		mov	eax, ds:__stack_chk_guard
		mov	[esp+21Ch+var_20], eax
		xor	eax, eax
		mov	ax, [edx+2]
		cmp	ax, 1
		jz	loc_6888B680
		cmp	ax, 5
		jz	loc_6888B700
		cmp	ax, 7
		jz	loc_6888B79C
		cmp	ax, 0Ah
		jz	loc_6888B84C
		cmp	ax, 0Bh
		jz	loc_6888B920
		cmp	ax, 0Ch
		jz	loc_6888B9A4
		cmp	ax, 14h
		jz	short loc_6888B5E4
		mov	[esp+21Ch+var_1E0], 0

loc_6888B5C1:				; CODE XREF: sub_6888B528+153j
					; sub_6888B528+1D1j ...
		mov	eax, [esp+21Ch+var_1E0]
		mov	edx, [esp+21Ch+var_20]
		xor	edx, ds:__stack_chk_guard
		jnz	loc_6888C7C3
		add	esp, 20Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 4

loc_6888B5E4:				; CODE XREF: sub_6888B528+8Fj
		mov	[esp+21Ch+Buf2], 8
		mov	[esp+21Ch+Buf1], ebp
		call	sub_68881904
		mov	[esp+21Ch+Buf1], ebp
		call	sub_688819F0
		movzx	ebx, ax
		mov	[esp+21Ch+Buf1], ebp
		call	sub_68881990
		movzx	eax, al
		mov	[esp+21Ch+Buf2], eax
		mov	[esp+21Ch+Buf1], ebp
		call	sub_68881D24
		mov	esi, eax
		mov	[esp+21Ch+Buf1], ebp
		call	sub_688819F0
		movzx	edi, ax
		mov	edx, [esp+21Ch+var_1E4]
		movzx	eax, word ptr [edx+2]
		mov	[esp+21Ch+Size], eax
		movzx	eax, word ptr [edx]
		mov	[esp+21Ch+Buf2], eax
		mov	eax, [esp+21Ch+var_1E8]
		mov	[esp+21Ch+Buf1], eax
		call	aim_callhandler
		test	eax, eax
		jz	loc_6888BBA8
		mov	[esp+21Ch+var_208], edi
		mov	[esp+21Ch+var_20C], esi
		mov	[esp+21Ch+var_210], ebx
		mov	edx, [esp+21Ch+var_1D8]
		mov	[esp+21Ch+Size], edx
		mov	edx, [esp+21Ch+var_1DC]
		mov	[esp+21Ch+Buf2], edx
		mov	edx, [esp+21Ch+var_1E8]
		mov	[esp+21Ch+Buf1], edx
		call	eax
		mov	[esp+21Ch+var_1E0], eax

loc_6888B673:				; CODE XREF: sub_6888B528+688j
		mov	[esp+21Ch+Buf1], esi
		call	g_free
		jmp	loc_6888B5C1
; ---------------------------------------------------------------------------

loc_6888B680:				; CODE XREF: sub_6888B528+53j
		mov	edx, [esp+21Ch+var_1E8]
		mov	edx, [edx+68h]
		mov	[esp+21Ch+var_1E0], edx
		mov	edx, [esp+21Ch+var_1E4]
		mov	eax, [edx+8]
		mov	[esp+21Ch+Buf2], eax
		mov	eax, [esp+21Ch+var_1E8]
		mov	[esp+21Ch+Buf1], eax
		call	aim_remsnac
		mov	esi, eax
		test	eax, eax
		jz	loc_6888C672
		movzx	eax, word ptr [eax+4]
		cmp	ax, 4
		jnz	loc_6888BB88
		mov	ebx, [esi+0Ch]
		test	ebx, ebx
		jz	short loc_6888B6CA
		cmp	byte ptr [ebx],	0
		jnz	loc_6888BA71

loc_6888B6CA:				; CODE XREF: sub_6888B528+197j
		mov	[esp+21Ch+Buf2], offset	aIcbmErrorRecei	; "icbm	error: received	response from requ"...
		mov	[esp+21Ch+Buf1], offset	aOscar_5 ; "oscar"
		call	purple_debug_misc

loc_6888B6DE:				; CODE XREF: sub_6888B528+65Bj
					; sub_6888B528+678j
		mov	eax, [esi+0Ch]
		mov	[esp+21Ch+Buf1], eax
		call	g_free
		mov	[esp+21Ch+Buf1], esi
		call	g_free
		mov	[esp+21Ch+var_1E0], 1
		jmp	loc_6888B5C1
; ---------------------------------------------------------------------------
		align 10h

loc_6888B700:				; CODE XREF: sub_6888B528+5Dj
		mov	[esp+21Ch+Buf1], ebp
		call	sub_688819F0
		mov	[esp+21Ch+var_198], ax
		mov	[esp+21Ch+Buf1], ebp
		call	sub_68881A60
		mov	[esp+21Ch+var_194], eax
		mov	[esp+21Ch+Buf1], ebp
		call	sub_688819F0
		mov	[esp+21Ch+var_190], ax
		mov	[esp+21Ch+Buf1], ebp
		call	sub_688819F0
		mov	[esp+21Ch+var_18E], ax
		mov	[esp+21Ch+Buf1], ebp
		call	sub_688819F0
		mov	[esp+21Ch+var_18C], ax
		mov	[esp+21Ch+Buf1], ebp
		call	sub_68881A60
		mov	[esp+21Ch+var_194], 51Bh
		mov	[esp+21Ch+var_190], 1F40h
		mov	[esp+21Ch+var_188], 0
		lea	eax, [esp+21Ch+var_198]
		mov	[esp+21Ch+Buf2], eax
		mov	eax, [esp+21Ch+var_1E8]
		mov	[esp+21Ch+Buf1], eax
		call	aim_im_setparams
		mov	[esp+21Ch+var_1E0], 0
		jmp	loc_6888B5C1
; ---------------------------------------------------------------------------
		align 4

loc_6888B79C:				; CODE XREF: sub_6888B528+67j
		lea	edx, [esp+21Ch+var_114]
		mov	[esp+21Ch+var_1F0], edx
		xor	ebx, ebx
		mov	ecx, 98h
		mov	edi, edx
		mov	al, bl
		rep stosb
		mov	[esp+21Ch+Buf2], 8
		mov	[esp+21Ch+Buf1], ebp
		call	sub_68881CAC
		mov	[esp+21Ch+var_1D4], eax
		mov	[esp+21Ch+Buf1], ebp
		call	sub_688819F0
		movzx	esi, ax
		lea	edx, [esp+21Ch+var_114]
		mov	[esp+21Ch+Size], edx
		mov	[esp+21Ch+Buf2], ebp
		mov	eax, [esp+21Ch+var_1E8]
		mov	[esp+21Ch+Buf1], eax
		call	aim_info_extract
		cmp	si, 1
		jz	loc_6888BEA9
		cmp	si, 2
		jz	loc_6888C103
		cmp	si, 4
		jz	loc_6888BBB5
		mov	[esp+21Ch+Size], esi
		mov	[esp+21Ch+Buf2], offset	aIcbmIcbmReceiv	; "icbm: ICBM received on an unsupported c"...
		mov	[esp+21Ch+Buf1], offset	aOscar_5 ; "oscar"
		call	purple_debug_misc
		mov	[esp+21Ch+var_1E0], 0

loc_6888B82C:				; CODE XREF: sub_6888B528+794j
					; sub_6888B528+BD6j ...
		lea	eax, [esp+21Ch+var_114]
		mov	[esp+21Ch+Buf1], eax
		call	aim_info_free
		mov	eax, [esp+21Ch+var_1D4]
		mov	[esp+21Ch+Buf1], eax
		call	g_free
		jmp	loc_6888B5C1
; ---------------------------------------------------------------------------

loc_6888B84C:				; CODE XREF: sub_6888B528+71j
		mov	edx, [esp+21Ch+var_1E4]
		add	edx, 2
		mov	[esp+21Ch+var_1D4], edx
		mov	[esp+21Ch+var_1E0], 0
		jmp	loc_6888B909
; ---------------------------------------------------------------------------

loc_6888B864:				; CODE XREF: sub_6888B528+3EBj
		mov	[esp+21Ch+Buf1], ebp
		call	sub_688819F0
		movzx	ebx, ax
		lea	eax, [esp+21Ch+var_114]
		mov	[esp+21Ch+Size], eax
		mov	[esp+21Ch+Buf2], ebp
		mov	edx, [esp+21Ch+var_1E8]
		mov	[esp+21Ch+Buf1], edx
		call	aim_info_extract
		mov	[esp+21Ch+Buf1], ebp
		call	sub_688819F0
		movzx	esi, ax
		mov	[esp+21Ch+Buf1], ebp
		call	sub_688819F0
		movzx	edi, ax
		mov	edx, [esp+21Ch+var_1D4]
		movzx	eax, word ptr [edx]
		mov	[esp+21Ch+Size], eax
		mov	edx, [esp+21Ch+var_1E4]
		movzx	eax, word ptr [edx]
		mov	[esp+21Ch+Buf2], eax
		mov	eax, [esp+21Ch+var_1E8]
		mov	[esp+21Ch+Buf1], eax
		call	aim_callhandler
		test	eax, eax
		jz	short loc_6888B8FA
		mov	[esp+21Ch+var_204], edi
		mov	[esp+21Ch+var_208], esi
		lea	edx, [esp+21Ch+var_114]
		mov	[esp+21Ch+var_20C], edx
		mov	[esp+21Ch+var_210], ebx
		mov	edx, [esp+21Ch+var_1D8]
		mov	[esp+21Ch+Size], edx
		mov	edx, [esp+21Ch+var_1DC]
		mov	[esp+21Ch+Buf2], edx
		mov	edx, [esp+21Ch+var_1E8]
		mov	[esp+21Ch+Buf1], edx
		call	eax
		mov	[esp+21Ch+var_1E0], eax

loc_6888B8FA:				; CODE XREF: sub_6888B528+39Cj
		lea	eax, [esp+21Ch+var_114]
		mov	[esp+21Ch+Buf1], eax
		call	aim_info_free

loc_6888B909:				; CODE XREF: sub_6888B528+337j
		mov	[esp+21Ch+Buf1], ebp
		call	sub_68881818
		test	eax, eax
		jnz	loc_6888B864
		jmp	loc_6888B5C1
; ---------------------------------------------------------------------------
		align 10h

loc_6888B920:				; CODE XREF: sub_6888B528+7Bj
		mov	[esp+21Ch+Buf2], 8
		mov	[esp+21Ch+Buf1], ebp
		call	sub_68881CAC
		mov	[esp+21Ch+var_1D4], eax
		mov	[esp+21Ch+Buf1], ebp
		call	sub_688819F0
		mov	ebx, eax
		mov	[esp+21Ch+Buf1], ebp
		call	sub_68881990
		movzx	eax, al
		mov	[esp+21Ch+Buf2], eax
		mov	[esp+21Ch+Buf1], ebp
		call	sub_68881D24
		mov	edi, eax
		mov	[esp+21Ch+Buf1], ebp
		call	sub_688819F0
		movzx	esi, ax
		cmp	bx, 2
		jz	loc_6888BE1C
		cmp	bx, 4
		jz	loc_6888BA0C

loc_6888B976:				; CODE XREF: sub_6888B528+50Fj
					; sub_6888B528+900j ...
		xor	esi, esi
		mov	[esp+21Ch+var_1E0], 0

loc_6888B980:				; CODE XREF: sub_6888B528+544j
					; sub_6888B528+87Fj ...
		mov	eax, [esp+21Ch+var_1D4]
		mov	[esp+21Ch+Buf1], eax
		call	g_free
		mov	[esp+21Ch+Buf1], edi
		call	g_free
		mov	[esp+21Ch+Buf1], esi
		call	g_free
		jmp	loc_6888B5C1
; ---------------------------------------------------------------------------
		align 4

loc_6888B9A4:				; CODE XREF: sub_6888B528+85j
		mov	[esp+21Ch+Buf2], 8
		mov	[esp+21Ch+Buf1], ebp
		call	sub_68881CAC
		mov	esi, eax
		mov	[esp+21Ch+Buf1], ebp
		call	sub_688819F0
		mov	[esp+21Ch+Buf1], ebp
		call	sub_68881990
		movzx	eax, al
		mov	[esp+21Ch+Buf2], eax
		mov	[esp+21Ch+Buf1], ebp
		call	sub_68881D24
		mov	ebx, eax
		mov	[esp+21Ch+Size], eax
		mov	[esp+21Ch+Buf2], offset	aSentMessageToS	; "Sent	message	to %s.\n"
		mov	[esp+21Ch+Buf1], offset	aOscar_5 ; "oscar"
		call	purple_debug_info
		mov	[esp+21Ch+Buf1], ebx
		call	g_free
		mov	[esp+21Ch+Buf1], esi
		call	g_free
		mov	[esp+21Ch+var_1E0], 0
		jmp	loc_6888B5C1
; ---------------------------------------------------------------------------

loc_6888BA0C:				; CODE XREF: sub_6888B528+448j
		cmp	si, 3
		jz	loc_6888BCC1
		mov	edx, [esp+21Ch+var_1E4]
		movzx	eax, word ptr [edx+2]
		mov	[esp+21Ch+Size], eax
		movzx	eax, word ptr [edx]
		mov	[esp+21Ch+Buf2], eax
		mov	eax, [esp+21Ch+var_1E8]
		mov	[esp+21Ch+Buf1], eax
		call	aim_callhandler
		test	eax, eax
		jz	loc_6888B976
		mov	[esp+21Ch+var_208], esi
		mov	[esp+21Ch+var_20C], edi
		mov	[esp+21Ch+var_210], 4
		mov	edx, [esp+21Ch+var_1D8]
		mov	[esp+21Ch+Size], edx
		mov	edx, [esp+21Ch+var_1DC]
		mov	[esp+21Ch+Buf2], edx
		mov	edx, [esp+21Ch+var_1E8]
		mov	[esp+21Ch+Buf1], edx
		call	eax
		mov	[esp+21Ch+var_1E0], eax
		xor	esi, esi
		jmp	loc_6888B980
; ---------------------------------------------------------------------------

loc_6888BA71:				; CODE XREF: sub_6888B528+19Cj
		mov	[esp+21Ch+Buf1], ebp
		call	sub_688819F0
		movzx	edi, ax
		mov	[esp+21Ch+Buf1], ebp
		call	aim_tlvlist_read
		mov	[esp+21Ch+Size], 1
		mov	[esp+21Ch+Buf2], 8
		mov	[esp+21Ch+Buf1], eax
		mov	[esp+21Ch+var_1F4], eax
		call	aim_tlv_gettlv
		test	eax, eax
		mov	ecx, [esp+21Ch+var_1F4]
		jz	loc_6888BDAC
		mov	[esp+21Ch+Size], 1
		mov	[esp+21Ch+Buf2], 8
		mov	[esp+21Ch+Buf1], ecx
		call	aim_tlv_get16
		mov	ebp, eax
		mov	ecx, [esp+21Ch+var_1F4]
		mov	[esp+21Ch+Buf1], ecx
		call	aim_tlvlist_free
		movzx	edx, bp
		mov	[esp+21Ch+var_1DC], edx
		mov	[esp+21Ch+var_20C], edx
		mov	[esp+21Ch+var_210], edi
		mov	[esp+21Ch+Size], ebx
		mov	[esp+21Ch+Buf2], offset	aMessageErrorWi	; "Message error with bn %s and	reason %hu"...
		mov	[esp+21Ch+Buf1], offset	aOscar_5 ; "oscar"
		call	purple_debug_error
		mov	[esp+21Ch+Buf1], edi
		call	oscar_get_msgerr_reason
		mov	[esp+21Ch+var_1E4], eax
		dec	ebp
		cmp	bp, 0Eh
		ja	loc_6888BDF1
		mov	edx, [esp+21Ch+var_1DC]
		mov	eax, ds:off_688B0280[edx*4]
		mov	[esp+21Ch+Buf2], eax
		mov	[esp+21Ch+Buf1], offset	aPidgin_3 ; "pidgin"
		call	libintl_dgettext
		mov	edi, eax
		mov	[esp+21Ch+Buf2], offset	aUnableToSendMe	; "Unable to send message: %s (%s)"
		mov	[esp+21Ch+Buf1], offset	aPidgin_3 ; "pidgin"
		call	libintl_dgettext
		mov	[esp+21Ch+Size], edi
		mov	edx, [esp+21Ch+var_1E4]
		mov	[esp+21Ch+Buf2], edx
		mov	[esp+21Ch+Buf1], eax
		call	g_strdup_printf
		mov	edi, eax

loc_6888BB57:				; CODE XREF: sub_6888B528+8EFj
		mov	edx, [esp+21Ch+var_1E0]
		mov	[esp+21Ch+Buf1], edx
		call	purple_connection_get_account
		mov	[esp+21Ch+Size], edi
		mov	[esp+21Ch+Buf2], eax
		mov	[esp+21Ch+Buf1], ebx
		call	purple_conv_present_error
		test	eax, eax
		jz	loc_6888C5EF

loc_6888BB7B:				; CODE XREF: sub_6888B528+113Ej
		mov	[esp+21Ch+Buf1], edi
		call	g_free
		jmp	loc_6888B6DE
; ---------------------------------------------------------------------------

loc_6888BB88:				; CODE XREF: sub_6888B528+18Cj
		mov	[esp+21Ch+Size], eax
		mov	[esp+21Ch+Buf2], offset	aIcbmErrorRec_0	; "icbm	error: received	response from inva"...
		mov	[esp+21Ch+Buf1], offset	aOscar_5 ; "oscar"
		call	purple_debug_misc
		jmp	loc_6888B6DE
; ---------------------------------------------------------------------------
		align 4

loc_6888BBA8:				; CODE XREF: sub_6888B528+11Cj
		mov	[esp+21Ch+var_1E0], 0
		jmp	loc_6888B673
; ---------------------------------------------------------------------------

loc_6888BBB5:				; CODE XREF: sub_6888B528+2DEj
		mov	[esp+21Ch+Buf1], ebp
		call	aim_tlvlist_read
		mov	esi, eax
		mov	[esp+21Ch+Size], 1
		mov	[esp+21Ch+Buf2], 5
		mov	[esp+21Ch+Buf1], eax
		call	aim_tlv_gettlv
		mov	ebx, eax
		test	eax, eax
		jz	loc_6888CA67
		movzx	eax, word ptr [eax+2]
		mov	[esp+21Ch+Size], eax
		mov	eax, [ebx+4]
		mov	[esp+21Ch+Buf2], eax
		lea	ebp, [esp+21Ch+var_1B4]
		mov	[esp+21Ch+Buf1], ebp
		call	sub_68881798
		mov	[esp+21Ch+Buf1], ebp
		call	sub_68881BB4
		mov	[esp+21Ch+var_1A8], eax
		mov	[esp+21Ch+Buf1], ebp
		call	sub_68881AE4
		mov	[esp+21Ch+var_1A4], al
		mov	[esp+21Ch+Buf1], ebp
		call	sub_68881AE4
		mov	[esp+21Ch+var_1A3], al
		cmp	[esp+21Ch+var_1A4], 1Ah
		jnz	loc_6888C5CB
		movzx	eax, word ptr [ebx+2]
		sub	eax, 6
		mov	[esp+21Ch+var_19C], eax

loc_6888BC39:				; CODE XREF: sub_6888B528+10B5j
		mov	[esp+21Ch+Buf2], eax
		mov	[esp+21Ch+Buf1], ebp
		call	sub_68881CAC
		mov	[esp+21Ch+var_1A0], eax
		mov	edx, [esp+21Ch+var_1E4]
		movzx	eax, word ptr [edx+2]
		mov	[esp+21Ch+Size], eax
		movzx	eax, word ptr [edx]
		mov	[esp+21Ch+Buf2], eax
		mov	eax, [esp+21Ch+var_1E8]
		mov	[esp+21Ch+Buf1], eax
		call	aim_callhandler
		test	eax, eax
		jz	loc_6888C6A3
		lea	edx, [esp+21Ch+var_1A8]
		mov	[esp+21Ch+var_208], edx
		lea	edx, [esp+21Ch+var_114]
		mov	[esp+21Ch+var_20C], edx
		mov	[esp+21Ch+var_210], 4
		mov	edx, [esp+21Ch+var_1D8]
		mov	[esp+21Ch+Size], edx
		mov	edx, [esp+21Ch+var_1DC]
		mov	[esp+21Ch+Buf2], edx
		mov	edx, [esp+21Ch+var_1E8]
		mov	[esp+21Ch+Buf1], edx
		call	eax
		mov	[esp+21Ch+var_1E0], eax

loc_6888BCA8:				; CODE XREF: sub_6888B528+1183j
		mov	eax, [esp+21Ch+var_1A0]
		mov	[esp+21Ch+Buf1], eax
		call	g_free

loc_6888BCB4:				; CODE XREF: sub_6888B528+1547j
		mov	[esp+21Ch+Buf1], esi
		call	aim_tlvlist_free
		jmp	loc_6888B82C
; ---------------------------------------------------------------------------

loc_6888BCC1:				; CODE XREF: sub_6888B528+4E8j
		mov	[esp+21Ch+Buf1], ebp
		call	sub_68881B44
		movzx	eax, ax
		mov	[esp+21Ch+Buf2], eax
		mov	[esp+21Ch+Buf1], ebp
		call	sub_68881904
		mov	[esp+21Ch+Buf1], ebp
		call	sub_68881B44
		movzx	eax, ax
		mov	[esp+21Ch+Buf2], eax
		mov	[esp+21Ch+Buf1], ebp
		call	sub_68881904
		mov	[esp+21Ch+Buf1], ebp
		call	sub_68881AE4
		add	eax, 18h
		cmp	al, 4
		ja	loc_6888C66B
		movzx	eax, al
		mov	ebx, ds:dword_688B02C0[eax*4]

loc_6888BD0C:				; CODE XREF: sub_6888B528+1145j
		mov	[esp+21Ch+Buf1], ebp
		call	sub_68881AE4
		mov	[esp+21Ch+Buf1], ebp
		call	sub_68881B44
		mov	[esp+21Ch+Buf1], ebp
		call	sub_68881B44
		mov	[esp+21Ch+Buf1], ebp
		call	sub_68881B44
		movzx	eax, ax
		mov	[esp+21Ch+Buf2], eax
		mov	[esp+21Ch+Buf1], ebp
		call	sub_68881CAC
		mov	esi, eax
		mov	edx, [esp+21Ch+var_1E4]
		movzx	eax, word ptr [edx+2]
		mov	[esp+21Ch+Size], eax
		movzx	eax, word ptr [edx]
		mov	[esp+21Ch+Buf2], eax
		mov	eax, [esp+21Ch+var_1E8]
		mov	[esp+21Ch+Buf1], eax
		call	aim_callhandler
		test	eax, eax
		jz	loc_6888C702
		mov	[esp+21Ch+var_200], esi
		mov	[esp+21Ch+var_204], ebx
		mov	[esp+21Ch+var_208], 3
		mov	[esp+21Ch+var_20C], edi
		mov	[esp+21Ch+var_210], 4
		mov	edx, [esp+21Ch+var_1D8]
		mov	[esp+21Ch+Size], edx
		mov	edx, [esp+21Ch+var_1DC]
		mov	[esp+21Ch+Buf2], edx
		mov	edx, [esp+21Ch+var_1E8]
		mov	[esp+21Ch+Buf1], edx
		call	eax
		mov	[esp+21Ch+var_1E0], eax

loc_6888BD9D:				; CODE XREF: sub_6888B528+11E2j
		mov	[esp+21Ch+Buf1], esi
		call	g_free
		xor	esi, esi
		jmp	loc_6888B980
; ---------------------------------------------------------------------------

loc_6888BDAC:				; CODE XREF: sub_6888B528+57Ej
		mov	[esp+21Ch+Buf1], ecx
		call	aim_tlvlist_free
		mov	[esp+21Ch+var_20C], 0
		mov	[esp+21Ch+var_210], edi
		mov	[esp+21Ch+Size], ebx
		mov	[esp+21Ch+Buf2], offset	aMessageErrorWi	; "Message error with bn %s and	reason %hu"...
		mov	[esp+21Ch+Buf1], offset	aOscar_5 ; "oscar"
		call	purple_debug_error
		mov	[esp+21Ch+Buf1], edi
		call	oscar_get_msgerr_reason
		mov	[esp+21Ch+var_1E4], eax
		mov	ebp, 0FFFFFFFFh
		mov	[esp+21Ch+var_1DC], 0

loc_6888BDF1:				; CODE XREF: sub_6888B528+5E2j
		mov	[esp+21Ch+Buf2], offset	aUnableToSend_0	; "Unable to send message: %s"
		mov	[esp+21Ch+Buf1], offset	aPidgin_3 ; "pidgin"
		call	libintl_dgettext
		mov	edx, [esp+21Ch+var_1E4]
		mov	[esp+21Ch+Buf2], edx
		mov	[esp+21Ch+Buf1], eax
		call	g_strdup_printf
		mov	edi, eax
		jmp	loc_6888BB57
; ---------------------------------------------------------------------------

loc_6888BE1C:				; CODE XREF: sub_6888B528+43Ej
		mov	[esp+21Ch+Buf1], ebp
		call	sub_68881B44
		cmp	ax, 1Bh
		jnz	loc_6888B976
		cmp	dword ptr [ebp+4], 4Eh
		jbe	loc_6888B976
		mov	[esp+21Ch+Buf2], 33h
		mov	[esp+21Ch+Buf1], ebp
		call	sub_68881904
		mov	[esp+21Ch+Buf1], ebp
		call	sub_68881B44
		mov	ebx, eax
		mov	[esp+21Ch+Buf1], ebp
		call	sub_68881B44
		mov	esi, eax
		movzx	eax, ax
		mov	[esp+21Ch+var_210], eax
		movzx	eax, bx
		mov	[esp+21Ch+Size], eax
		mov	[esp+21Ch+Buf2], offset	aXStatusNum1HuN	; "X-Status: num1 %hu, num2 %hu\n"
		mov	[esp+21Ch+Buf1], offset	aOscar_5 ; "oscar"
		call	purple_debug_misc
		cmp	bx, 4F00h
		jnz	short loc_6888BE90
		cmp	si, 3B00h
		jz	loc_6888CA74

loc_6888BE90:				; CODE XREF: sub_6888B528+95Bj
		mov	[esp+21Ch+Buf2], offset	aXStatus0x00040	; "X-Status: 0x0004, 0x000b not	an xstatus"...
		mov	[esp+21Ch+Buf1], offset	aOscar_5 ; "oscar"
		call	purple_debug_misc
		jmp	loc_6888B976
; ---------------------------------------------------------------------------

loc_6888BEA9:				; CODE XREF: sub_6888B528+2CAj
		lea	edx, [esp+21Ch+var_184]
		mov	[esp+21Ch+var_1EC], edx
		mov	ecx, 18h
		mov	edi, edx
		mov	al, bl
		rep stosb
		lea	edi, [esp+21Ch+var_1B4]
		jmp	short loc_6888BF14
; ---------------------------------------------------------------------------
		align 4

loc_6888BEC8:				; CODE XREF: sub_6888B528+A3Aj
		cmp	bx, 4
		jz	loc_6888BF72
		cmp	bx, 6
		jz	loc_6888C05E
		cmp	bx, 8
		jz	loc_6888C6B0
		cmp	bx, 9
		jz	loc_6888C5E2
		cmp	bx, 0Bh
		jz	loc_6888C693
		cmp	bx, 16h
		jz	loc_6888C7A2

loc_6888BF04:				; CODE XREF: sub_6888B528+A48j
					; sub_6888B528+A52j ...
		mov	edx, [esp+21Ch+var_1E0]
		mov	[esp+21Ch+Buf2], edx
		mov	[esp+21Ch+Buf1], ebp
		call	sub_68881874

loc_6888BF14:				; CODE XREF: sub_6888B528+99Bj
		mov	[esp+21Ch+Buf1], ebp
		call	sub_68881818
		cmp	eax, 3
		jbe	loc_6888C08D
		mov	[esp+21Ch+Buf1], ebp
		call	sub_688819F0
		mov	ebx, eax
		mov	[esp+21Ch+Buf1], ebp
		call	sub_688819F0
		movzx	esi, ax
		mov	[esp+21Ch+Buf1], ebp
		call	sub_68881818
		cmp	esi, eax
		ja	loc_6888C06E
		mov	[esp+21Ch+Buf1], ebp
		call	sub_68881848
		add	eax, esi
		mov	[esp+21Ch+var_1E0], eax
		cmp	bx, 2
		jz	short loc_6888BF7C
		cmp	bx, 3
		jnz	loc_6888BEC8
		or	[esp+21Ch+var_184], 2
		jmp	short loc_6888BF04
; ---------------------------------------------------------------------------

loc_6888BF72:				; CODE XREF: sub_6888B528+9A4j
		or	[esp+21Ch+var_184], 1
		jmp	short loc_6888BF04
; ---------------------------------------------------------------------------

loc_6888BF7C:				; CODE XREF: sub_6888B528+A34j
		mov	[esp+21Ch+Size], esi
		mov	eax, [ebp+0]
		add	eax, [ebp+8]
		mov	[esp+21Ch+Buf2], eax
		mov	[esp+21Ch+Buf1], edi
		call	sub_68881798
		mov	edx, [esp+21Ch+var_1E8]
		mov	eax, [edx+68h]
		mov	[esp+21Ch+Buf1], eax
		call	purple_connection_get_account
		mov	[esp+21Ch+var_1D0], eax

loc_6888BFA5:				; CODE XREF: sub_6888B528+B31j
		mov	[esp+21Ch+Buf1], edi
		call	sub_68881818
		cmp	eax, 3
		jbe	loc_6888BF04

loc_6888BFB6:				; CODE XREF: sub_6888B528+AC1j
		mov	[esp+21Ch+Buf1], edi
		call	sub_688819F0
		mov	ebx, eax
		mov	[esp+21Ch+Buf1], edi
		call	sub_688819F0
		movzx	esi, ax
		cmp	bx, 101h
		jz	short loc_6888BFF0
		mov	[esp+21Ch+Buf2], esi
		mov	[esp+21Ch+Buf1], edi
		call	sub_68881904
		mov	[esp+21Ch+Buf1], edi
		call	sub_68881818
		cmp	eax, 3
		ja	short loc_6888BFB6
		jmp	loc_6888BF04
; ---------------------------------------------------------------------------

loc_6888BFF0:				; CODE XREF: sub_6888B528+AA8j
		mov	[esp+21Ch+Buf1], edi
		call	sub_688819F0
		movzx	ebx, ax
		mov	[esp+21Ch+Buf2], 2
		mov	[esp+21Ch+Buf1], edi
		call	sub_68881904
		lea	edx, [esi-4]
		movzx	edx, dx
		mov	[esp+21Ch+Buf2], edx
		mov	[esp+21Ch+Buf1], edi
		mov	[esp+21Ch+var_1F4], edx
		call	sub_68881D24
		mov	esi, eax
		mov	edx, [esp+21Ch+var_1F4]
		mov	[esp+21Ch+var_20C], edx	; size_t
		mov	[esp+21Ch+var_210], eax	; char *
		mov	[esp+21Ch+Size], ebx ; int
		mov	eax, [esp+21Ch+var_114]
		mov	[esp+21Ch+Buf2], eax ; int
		mov	eax, [esp+21Ch+var_1D0]
		mov	[esp+21Ch+Buf1], eax ; int
		call	oscar_decode_im
		mov	[esp+21Ch+var_17C], eax
		mov	[esp+21Ch+Buf1], esi
		call	g_free
		jmp	loc_6888BFA5
; ---------------------------------------------------------------------------

loc_6888C05E:				; CODE XREF: sub_6888B528+9AEj
		or	[esp+21Ch+var_184], 800h
		jmp	loc_6888BF04
; ---------------------------------------------------------------------------

loc_6888C06E:				; CODE XREF: sub_6888B528+A1Cj
		mov	eax, [esp+21Ch+var_114]
		mov	[esp+21Ch+Size], eax
		mov	[esp+21Ch+Buf2], offset	aReceivedAnImCo	; "Received an IM containing an	invalid	me"...
		mov	[esp+21Ch+Buf1], offset	aOscar_5 ; "oscar"
		call	purple_debug_misc

loc_6888C08D:				; CODE XREF: sub_6888B528+9F7j
		mov	edx, [esp+21Ch+var_1E4]
		movzx	eax, word ptr [edx+2]
		mov	[esp+21Ch+Size], eax
		movzx	eax, word ptr [edx]
		mov	[esp+21Ch+Buf2], eax
		mov	eax, [esp+21Ch+var_1E8]
		mov	[esp+21Ch+Buf1], eax
		call	aim_callhandler
		test	eax, eax
		jz	loc_6888C788
		lea	edx, [esp+21Ch+var_184]
		mov	[esp+21Ch+var_208], edx
		lea	edx, [esp+21Ch+var_114]
		mov	[esp+21Ch+var_20C], edx
		mov	[esp+21Ch+var_210], 1
		mov	edx, [esp+21Ch+var_1D8]
		mov	[esp+21Ch+Size], edx
		mov	edx, [esp+21Ch+var_1DC]
		mov	[esp+21Ch+Buf2], edx
		mov	edx, [esp+21Ch+var_1E8]
		mov	[esp+21Ch+Buf1], edx
		call	eax
		mov	[esp+21Ch+var_1E0], eax

loc_6888C0EF:				; CODE XREF: sub_6888B528+1268j
		mov	eax, [esp+21Ch+var_17C]
		mov	[esp+21Ch+Buf1], eax
		call	g_free
		jmp	loc_6888B82C
; ---------------------------------------------------------------------------

loc_6888C103:				; CODE XREF: sub_6888B528+2D4j
		mov	[esp+21Ch+Buf1], ebp
		call	aim_tlvlist_read
		mov	[esp+21Ch+var_1D0], eax
		mov	dword ptr [esp+21Ch+Dest], 0
		lea	edi, [esp+21Ch+var_76]
		mov	ecx, 1Ah
		mov	al, bl
		rep stosb
		mov	dword ptr [esp+21Ch+var_5C], 0
		lea	edi, [esp+21Ch+var_58]
		mov	cl, 1Ah
		rep stosb
		mov	dword ptr [esp+21Ch+var_3E], 0
		lea	edi, [esp+21Ch+var_3A]
		mov	cl, 1Ah
		rep stosb
		lea	edx, [esp+21Ch+var_16C]
		mov	[esp+21Ch+var_1EC], edx
		mov	cl, 58h
		mov	edi, edx
		rep stosb
		mov	[esp+21Ch+Size], 1
		mov	[esp+21Ch+Buf2], 5
		mov	eax, [esp+21Ch+var_1D0]
		mov	[esp+21Ch+Buf1], eax
		call	aim_tlv_gettlv
		test	eax, eax
		jz	loc_6888C795
		movzx	edx, word ptr [eax+2]
		mov	[esp+21Ch+Size], edx
		mov	eax, [eax+4]
		mov	[esp+21Ch+Buf2], eax
		lea	ebx, [esp+21Ch+var_1C0]
		mov	[esp+21Ch+Buf1], ebx
		call	sub_68881798
		mov	[esp+21Ch+Buf1], ebx
		call	sub_688819F0
		mov	[esp+21Ch+var_16C], ax
		mov	[esp+21Ch+Buf2], 8
		mov	[esp+21Ch+Buf1], ebx
		call	sub_68881CAC
		mov	esi, eax
		mov	[esp+21Ch+Size], 8 ; Size
		mov	[esp+21Ch+Buf2], eax ; Buf2
		mov	eax, [esp+21Ch+var_1D4]
		mov	[esp+21Ch+Buf1], eax ; Buf1
		call	memcmp
		test	eax, eax
		jnz	loc_6888C70F
		mov	eax, [esi]
		mov	edx, [esi+4]
		mov	[esp+21Ch+var_16A], eax
		mov	[esp+21Ch+var_166], edx
		mov	[esp+21Ch+Buf1], esi
		call	g_free
		mov	[esp+21Ch+Size], 10h
		mov	[esp+21Ch+Buf2], ebx
		mov	edx, [esp+21Ch+var_1E8]
		mov	[esp+21Ch+Buf1], edx
		call	aim_locate_getcaps
		mov	[esp+21Ch+var_15C], eax
		mov	[esp+21Ch+var_158], edx
		mov	[esp+21Ch+Buf1], ebx
		call	aim_tlvlist_read
		mov	edi, eax
		mov	[esp+21Ch+Size], 1
		mov	[esp+21Ch+Buf2], 2
		mov	[esp+21Ch+Buf1], eax
		call	aim_tlv_gettlv
		test	eax, eax
		jz	short loc_6888C25A
		cmp	word ptr [eax+2], 4
		jz	loc_6888C8C9

loc_6888C25A:				; CODE XREF: sub_6888B528+D25j
					; sub_6888B528+13E2j
		mov	[esp+21Ch+Size], 1
		mov	[esp+21Ch+Buf2], 3
		mov	[esp+21Ch+Buf1], edi
		call	aim_tlv_gettlv
		test	eax, eax
		jz	short loc_6888C281
		cmp	word ptr [eax+2], 4
		jz	loc_6888C90F

loc_6888C281:				; CODE XREF: sub_6888B528+D4Cj
					; sub_6888B528+1428j
		mov	[esp+21Ch+Size], 1
		mov	[esp+21Ch+Buf2], 4
		mov	[esp+21Ch+Buf1], edi
		call	aim_tlv_gettlv
		test	eax, eax
		jz	short loc_6888C2A8
		cmp	word ptr [eax+2], 4
		jz	loc_6888C955

loc_6888C2A8:				; CODE XREF: sub_6888B528+D73j
					; sub_6888B528+146Ej
		mov	[esp+21Ch+Size], 1
		mov	[esp+21Ch+Buf2], 5
		mov	[esp+21Ch+Buf1], edi
		call	aim_tlv_gettlv
		test	eax, eax
		jz	short loc_6888C2E4
		mov	[esp+21Ch+Size], 1
		mov	[esp+21Ch+Buf2], 5
		mov	[esp+21Ch+Buf1], edi
		call	aim_tlv_get16
		mov	[esp+21Ch+var_148], ax

loc_6888C2E4:				; CODE XREF: sub_6888B528+D9Aj
		mov	[esp+21Ch+Size], 1
		mov	[esp+21Ch+Buf2], 0Ah
		mov	[esp+21Ch+Buf1], edi
		call	aim_tlv_gettlv
		test	eax, eax
		jz	short loc_6888C320
		mov	[esp+21Ch+Size], 1
		mov	[esp+21Ch+Buf2], 0Ah
		mov	[esp+21Ch+Buf1], edi
		call	aim_tlv_get16
		mov	[esp+21Ch+var_12C], ax

loc_6888C320:				; CODE XREF: sub_6888B528+DD6j
		mov	[esp+21Ch+Size], 1
		mov	[esp+21Ch+Buf2], 0Bh
		mov	[esp+21Ch+Buf1], edi
		call	aim_tlv_gettlv
		test	eax, eax
		jz	short loc_6888C35C
		mov	[esp+21Ch+Size], 1
		mov	[esp+21Ch+Buf2], 0Bh
		mov	[esp+21Ch+Buf1], edi
		call	aim_tlv_get16
		mov	[esp+21Ch+var_140], ax

loc_6888C35C:				; CODE XREF: sub_6888B528+E12j
		mov	[esp+21Ch+Size], 1
		mov	[esp+21Ch+Buf2], 0Ch
		mov	[esp+21Ch+Buf1], edi
		call	aim_tlv_gettlv
		test	eax, eax
		jz	short loc_6888C3B7
		mov	[esp+21Ch+Size], 1
		mov	[esp+21Ch+Buf2], 0Ch
		mov	[esp+21Ch+Buf1], edi
		call	aim_tlv_getstr
		mov	[esp+21Ch+var_13C], eax
		mov	[esp+21Ch+Size], 1
		mov	[esp+21Ch+Buf2], 0Ch
		mov	[esp+21Ch+Buf1], edi
		call	aim_tlv_getlength
		mov	[esp+21Ch+var_138], ax

loc_6888C3B7:				; CODE XREF: sub_6888B528+E4Ej
		mov	[esp+21Ch+Size], 1
		mov	[esp+21Ch+Buf2], 0Dh
		mov	[esp+21Ch+Buf1], edi
		call	aim_tlv_gettlv
		test	eax, eax
		jz	short loc_6888C3F2
		mov	[esp+21Ch+Size], 1
		mov	[esp+21Ch+Buf2], 0Dh
		mov	[esp+21Ch+Buf1], edi
		call	aim_tlv_getstr
		mov	[esp+21Ch+var_134], eax

loc_6888C3F2:				; CODE XREF: sub_6888B528+EA9j
		mov	[esp+21Ch+Size], 1
		mov	[esp+21Ch+Buf2], 0Eh
		mov	[esp+21Ch+Buf1], edi
		call	aim_tlv_gettlv
		test	eax, eax
		jz	short loc_6888C42D
		mov	[esp+21Ch+Size], 1
		mov	[esp+21Ch+Buf2], 0Eh
		mov	[esp+21Ch+Buf1], edi
		call	aim_tlv_getstr
		mov	[esp+21Ch+var_130], eax

loc_6888C42D:				; CODE XREF: sub_6888B528+EE4j
		mov	[esp+21Ch+Size], 1
		mov	[esp+21Ch+Buf2], 10h
		mov	[esp+21Ch+Buf1], edi
		call	aim_tlv_gettlv
		test	eax, eax
		jz	short loc_6888C454
		mov	[esp+21Ch+var_144], 1

loc_6888C454:				; CODE XREF: sub_6888B528+F1Fj
		cmp	[esp+21Ch+Dest], 0
		jz	short loc_6888C46C
		lea	eax, [esp+21Ch+Dest]
		mov	[esp+21Ch+var_154], eax

loc_6888C46C:				; CODE XREF: sub_6888B528+F34j
		cmp	[esp+21Ch+var_5C], 0
		jz	short loc_6888C484
		lea	eax, [esp+21Ch+var_5C]
		mov	[esp+21Ch+var_150], eax

loc_6888C484:				; CODE XREF: sub_6888B528+F4Cj
		cmp	[esp+21Ch+var_3E], 0
		jz	short loc_6888C49C
		lea	eax, [esp+21Ch+var_3E]
		mov	[esp+21Ch+var_14C], eax

loc_6888C49C:				; CODE XREF: sub_6888B528+F64j
		mov	[esp+21Ch+Size], 1
		mov	[esp+21Ch+Buf2], 2711h
		mov	[esp+21Ch+Buf1], edi
		call	aim_tlv_gettlv
		test	eax, eax
		jz	short loc_6888C504
		movzx	edx, word ptr [eax+2]
		mov	[esp+21Ch+Size], edx
		mov	eax, [eax+4]
		mov	[esp+21Ch+Buf2], eax
		lea	ebp, [esp+21Ch+var_1B4]
		mov	[esp+21Ch+Buf1], ebp
		call	sub_68881798
		mov	eax, [esp+21Ch+var_15C]
		test	al, 1
		jnz	loc_6888C7C8
		test	ah, 1
		jnz	loc_6888C81F
		test	al, 8
		jnz	loc_6888C99B
		test	ah, 40h
		jnz	loc_6888CA31
		test	al, 20h
		jnz	loc_6888C9BE

loc_6888C504:				; CODE XREF: sub_6888B528+F8Ej
					; sub_6888B528+12F2j ...
		mov	edx, [esp+21Ch+var_1E4]
		movzx	eax, word ptr [edx+2]
		mov	[esp+21Ch+Size], eax
		movzx	eax, word ptr [edx]
		mov	[esp+21Ch+Buf2], eax
		mov	eax, [esp+21Ch+var_1E8]
		mov	[esp+21Ch+Buf1], eax
		call	aim_callhandler
		test	eax, eax
		jz	loc_6888C7B6
		lea	edx, [esp+21Ch+var_16C]
		mov	[esp+21Ch+var_208], edx
		lea	edx, [esp+21Ch+var_114]
		mov	[esp+21Ch+var_20C], edx
		mov	[esp+21Ch+var_210], 2
		mov	edx, [esp+21Ch+var_1D8]
		mov	[esp+21Ch+Size], edx
		mov	edx, [esp+21Ch+var_1DC]
		mov	[esp+21Ch+Buf2], edx
		mov	edx, [esp+21Ch+var_1E8]
		mov	[esp+21Ch+Buf1], edx
		call	eax
		mov	[esp+21Ch+var_1E0], eax

loc_6888C566:				; CODE XREF: sub_6888B528+1296j
		mov	eax, [esp+21Ch+var_118]
		test	eax, eax
		jz	short loc_6888C585
		lea	edx, [esp+21Ch+var_16C]
		mov	[esp+21Ch+Buf2], edx
		mov	edx, [esp+21Ch+var_1E8]
		mov	[esp+21Ch+Buf1], edx
		call	eax

loc_6888C585:				; CODE XREF: sub_6888B528+1047j
		mov	eax, [esp+21Ch+var_13C]
		mov	[esp+21Ch+Buf1], eax
		call	g_free
		mov	eax, [esp+21Ch+var_134]
		mov	[esp+21Ch+Buf1], eax
		call	g_free
		mov	eax, [esp+21Ch+var_130]
		mov	[esp+21Ch+Buf1], eax
		call	g_free
		mov	[esp+21Ch+Buf1], edi
		call	aim_tlvlist_free

loc_6888C5BA:				; CODE XREF: sub_6888B528+120Bj
					; sub_6888B528+1275j
		mov	eax, [esp+21Ch+var_1D0]
		mov	[esp+21Ch+Buf1], eax
		call	aim_tlvlist_free
		jmp	loc_6888B82C
; ---------------------------------------------------------------------------

loc_6888C5CB:				; CODE XREF: sub_6888B528+6FDj
		mov	[esp+21Ch+Buf1], ebp
		call	sub_68881B44
		movzx	eax, ax
		mov	[esp+21Ch+var_19C], eax
		jmp	loc_6888BC39
; ---------------------------------------------------------------------------

loc_6888C5E2:				; CODE XREF: sub_6888B528+9C2j
		or	[esp+21Ch+var_184], 10h
		jmp	loc_6888BF04
; ---------------------------------------------------------------------------

loc_6888C5EF:				; CODE XREF: sub_6888B528+64Dj
		mov	[esp+21Ch+Buf1], edi
		call	g_free
		cmp	bp, 0Eh
		jbe	loc_6888C738
		mov	[esp+21Ch+Buf2], offset	aUnableToSend_1	; "Unable to send message to %s: %s"
		mov	[esp+21Ch+Buf1], offset	aPidgin_3 ; "pidgin"
		call	libintl_dgettext
		mov	edx, [esp+21Ch+var_1E4]
		mov	[esp+21Ch+Size], edx
		mov	[esp+21Ch+Buf2], ebx
		mov	[esp+21Ch+Buf1], eax
		call	g_strdup_printf
		mov	edi, eax

loc_6888C62B:				; CODE XREF: sub_6888B528+125Bj
		mov	[esp+21Ch+var_204], 0
		mov	[esp+21Ch+var_208], 0
		mov	eax, [esp+21Ch+var_1E4]
		mov	[esp+21Ch+var_20C], eax
		mov	[esp+21Ch+var_210], edi
		mov	[esp+21Ch+Size], 0
		mov	[esp+21Ch+Buf2], 0
		mov	edx, [esp+21Ch+var_1E8]
		mov	eax, [edx+68h]
		mov	[esp+21Ch+Buf1], eax
		call	purple_notify_message
		jmp	loc_6888BB7B
; ---------------------------------------------------------------------------

loc_6888C66B:				; CODE XREF: sub_6888B528+7D4j
		xor	ebx, ebx
		jmp	loc_6888BD0C
; ---------------------------------------------------------------------------

loc_6888C672:				; CODE XREF: sub_6888B528+17Ej
		mov	[esp+21Ch+Buf2], offset	aIcbmErrorRec_1	; "icbm	error: received	response from unkn"...
		mov	[esp+21Ch+Buf1], offset	aOscar_5 ; "oscar"
		call	purple_debug_misc
		mov	[esp+21Ch+var_1E0], 1
		jmp	loc_6888B5C1
; ---------------------------------------------------------------------------

loc_6888C693:				; CODE XREF: sub_6888B528+9CCj
		or	[esp+21Ch+var_184], 1000h
		jmp	loc_6888BF04
; ---------------------------------------------------------------------------

loc_6888C6A3:				; CODE XREF: sub_6888B528+742j
		mov	[esp+21Ch+var_1E0], 0
		jmp	loc_6888BCA8
; ---------------------------------------------------------------------------

loc_6888C6B0:				; CODE XREF: sub_6888B528+9B8j
		mov	[esp+21Ch+Buf1], ebp
		call	sub_68881A60
		mov	[esp+21Ch+var_174], eax
		mov	[esp+21Ch+Buf1], ebp
		call	sub_688819F0
		mov	[esp+21Ch+Buf1], ebp
		call	sub_688819F0
		mov	[esp+21Ch+var_170], ax
		mov	[esp+21Ch+Buf1], ebp
		call	sub_68881A60
		mov	[esp+21Ch+var_178], eax
		mov	eax, [esp+21Ch+var_174]
		test	eax, eax
		jz	loc_6888BF04
		or	[esp+21Ch+var_184], 20h
		jmp	loc_6888BF04
; ---------------------------------------------------------------------------

loc_6888C702:				; CODE XREF: sub_6888B528+836j
		mov	[esp+21Ch+var_1E0], 0
		jmp	loc_6888BD9D
; ---------------------------------------------------------------------------

loc_6888C70F:				; CODE XREF: sub_6888B528+CBAj
		mov	[esp+21Ch+Buf2], offset	aCookiesDonTMat	; "Cookies don't match in rendezvous ICBM,"...
		mov	[esp+21Ch+Buf1], offset	aOscar_5 ; "oscar"
		call	purple_debug_warning
		mov	[esp+21Ch+Buf1], esi
		call	g_free
		mov	[esp+21Ch+var_1E0], 1
		jmp	loc_6888C5BA
; ---------------------------------------------------------------------------

loc_6888C738:				; CODE XREF: sub_6888B528+10D3j
		mov	edx, [esp+21Ch+var_1DC]
		mov	eax, ds:off_688B0280[edx*4]
		mov	[esp+21Ch+Buf2], eax
		mov	[esp+21Ch+Buf1], offset	aPidgin_3 ; "pidgin"
		call	libintl_dgettext
		mov	edi, eax
		mov	[esp+21Ch+Buf2], offset	aUnableToSend_2	; "Unable to send message to %s: %s (%s)"
		mov	[esp+21Ch+Buf1], offset	aPidgin_3 ; "pidgin"
		call	libintl_dgettext
		mov	[esp+21Ch+var_210], edi
		mov	edx, [esp+21Ch+var_1E4]
		mov	[esp+21Ch+Size], edx
		mov	[esp+21Ch+Buf2], ebx
		mov	[esp+21Ch+Buf1], eax
		call	g_strdup_printf
		mov	edi, eax
		jmp	loc_6888C62B
; ---------------------------------------------------------------------------

loc_6888C788:				; CODE XREF: sub_6888B528+B86j
		mov	[esp+21Ch+var_1E0], 0
		jmp	loc_6888C0EF
; ---------------------------------------------------------------------------

loc_6888C795:				; CODE XREF: sub_6888B528+C5Dj
		mov	[esp+21Ch+var_1E0], 1
		jmp	loc_6888C5BA
; ---------------------------------------------------------------------------

loc_6888C7A2:				; CODE XREF: sub_6888B528+9D6j
		mov	[esp+21Ch+Buf1], ebp
		call	sub_68881A60
		mov	[esp+21Ch+var_180], eax
		jmp	loc_6888BF04
; ---------------------------------------------------------------------------

loc_6888C7B6:				; CODE XREF: sub_6888B528+FFDj
		mov	[esp+21Ch+var_1E0], 0
		jmp	loc_6888C566
; ---------------------------------------------------------------------------

loc_6888C7C3:				; CODE XREF: sub_6888B528+AAj
		call	__stack_chk_fail
; ---------------------------------------------------------------------------

loc_6888C7C8:				; CODE XREF: sub_6888B528+FB4j
		mov	[esp+21Ch+Buf1], ebp
		call	sub_68881A60
		mov	[esp+21Ch+var_128], eax
		mov	[esp+21Ch+Buf1], ebp
		call	sub_68881A60
		mov	[esp+21Ch+var_124], eax
		mov	[esp+21Ch+Buf1], ebp
		call	sub_68881A60
		mov	[esp+21Ch+var_120], eax
		mov	eax, [esp+21Ch+var_124]
		mov	[esp+21Ch+Buf2], eax
		mov	[esp+21Ch+Buf1], ebp
		call	sub_68881CAC
		mov	[esp+21Ch+var_11C], eax
		mov	[esp+21Ch+var_118], offset sub_6888B238
		jmp	loc_6888C504
; ---------------------------------------------------------------------------

loc_6888C81F:				; CODE XREF: sub_6888B528+FBDj
		mov	[esp+21Ch+var_1E0], edi

loc_6888C823:				; CODE XREF: sub_6888B528+1393j
		mov	[esp+21Ch+Buf1], ebp
		call	sub_68881818
		test	eax, eax
		jz	loc_6888C8C0
		mov	[esp+21Ch+Buf1], ebp
		call	sub_688819F0
		movzx	eax, ax
		mov	[esp+21Ch+Buf2], eax
		mov	[esp+21Ch+Buf1], ebp
		call	sub_68881D24
		mov	esi, eax
		mov	[esp+21Ch+Buf1], ebp
		call	sub_688819F0
		movzx	edi, ax
		xor	ebx, ebx
		test	edi, edi
		jz	short loc_6888C8B3
		lea	esi, [esi+0]

loc_6888C860:				; CODE XREF: sub_6888B528+1389j
		mov	[esp+21Ch+Buf1], ebp
		call	sub_688819F0
		movzx	eax, ax
		mov	[esp+21Ch+Buf2], eax
		mov	[esp+21Ch+Buf1], ebp
		call	sub_68881D24
		mov	[esp+21Ch+var_20C], eax
		mov	[esp+21Ch+var_210], esi
		mov	edx, [esp+21Ch+var_114]
		mov	[esp+21Ch+Size], edx
		mov	[esp+21Ch+Buf2], offset	aGotABuddyListF	; "got a buddy list from %s: group %s, bud"...
		mov	[esp+21Ch+Buf1], offset	aOscar_5 ; "oscar"
		mov	[esp+21Ch+var_1F4], eax
		call	purple_debug_misc
		mov	eax, [esp+21Ch+var_1F4]
		mov	[esp+21Ch+Buf1], eax
		call	g_free
		inc	ebx
		cmp	ebx, edi
		jl	short loc_6888C860

loc_6888C8B3:				; CODE XREF: sub_6888B528+1333j
		mov	[esp+21Ch+Buf1], esi
		call	g_free
		jmp	loc_6888C823
; ---------------------------------------------------------------------------

loc_6888C8C0:				; CODE XREF: sub_6888B528+1305j
		mov	edi, [esp+21Ch+var_1E0]
		jmp	loc_6888C504
; ---------------------------------------------------------------------------

loc_6888C8C9:				; CODE XREF: sub_6888B528+D2Cj
		mov	eax, [eax+4]
		movzx	edx, byte ptr [eax+3]
		mov	[esp+21Ch+var_204], edx
		movzx	edx, byte ptr [eax+2]
		mov	[esp+21Ch+var_208], edx
		movzx	edx, byte ptr [eax+1]
		mov	[esp+21Ch+var_20C], edx
		movzx	eax, byte ptr [eax]
		mov	[esp+21Ch+var_210], eax
		mov	[esp+21Ch+Size], offset	Format ; "%hhu.%hhu.%hhu.%hhu"
		mov	[esp+21Ch+Buf2], 1Eh ; Count
		lea	eax, [esp+21Ch+Dest]
		mov	[esp+21Ch+Buf1], eax ; Dest
		call	_snprintf
		jmp	loc_6888C25A
; ---------------------------------------------------------------------------

loc_6888C90F:				; CODE XREF: sub_6888B528+D53j
		mov	eax, [eax+4]
		movzx	edx, byte ptr [eax+3]
		mov	[esp+21Ch+var_204], edx
		movzx	edx, byte ptr [eax+2]
		mov	[esp+21Ch+var_208], edx
		movzx	edx, byte ptr [eax+1]
		mov	[esp+21Ch+var_20C], edx
		movzx	eax, byte ptr [eax]
		mov	[esp+21Ch+var_210], eax
		mov	[esp+21Ch+Size], offset	Format ; "%hhu.%hhu.%hhu.%hhu"
		mov	[esp+21Ch+Buf2], 1Eh ; Count
		lea	eax, [esp+21Ch+var_5C]
		mov	[esp+21Ch+Buf1], eax ; Dest
		call	_snprintf
		jmp	loc_6888C281
; ---------------------------------------------------------------------------

loc_6888C955:				; CODE XREF: sub_6888B528+D7Aj
		mov	eax, [eax+4]
		movzx	edx, byte ptr [eax+3]
		mov	[esp+21Ch+var_204], edx
		movzx	edx, byte ptr [eax+2]
		mov	[esp+21Ch+var_208], edx
		movzx	edx, byte ptr [eax+1]
		mov	[esp+21Ch+var_20C], edx
		movzx	eax, byte ptr [eax]
		mov	[esp+21Ch+var_210], eax
		mov	[esp+21Ch+Size], offset	Format ; "%hhu.%hhu.%hhu.%hhu"
		mov	[esp+21Ch+Buf2], 1Eh ; Count
		lea	eax, [esp+21Ch+var_3E]
		mov	[esp+21Ch+Buf1], eax ; Dest
		call	_snprintf
		jmp	loc_6888C2A8
; ---------------------------------------------------------------------------

loc_6888C99B:				; CODE XREF: sub_6888B528+FC5j
		lea	eax, [esp+21Ch+var_128]
		mov	[esp+21Ch+Buf2], eax
		mov	[esp+21Ch+Buf1], ebp
		call	aim_chat_readroominfo
		mov	[esp+21Ch+var_118], offset sub_6888B26C
		jmp	loc_6888C504
; ---------------------------------------------------------------------------

loc_6888C9BE:				; CODE XREF: sub_6888B528+FD6j
		mov	[esp+21Ch+var_118], offset sub_6888B2D4
		mov	[esp+21Ch+Buf1], ebp
		call	sub_688819F0
		mov	word ptr [esp+21Ch+var_128], ax
		mov	[esp+21Ch+Buf1], ebp
		call	sub_688819F0
		mov	word ptr [esp+21Ch+var_128+2], ax
		mov	[esp+21Ch+Buf1], ebp
		call	sub_68881A60
		mov	[esp+21Ch+var_124], eax
		xor	ebx, ebx
		jmp	short loc_6888C9FD
; ---------------------------------------------------------------------------

loc_6888C9FC:				; CODE XREF: sub_6888B528+14DFj
		inc	ebx

loc_6888C9FD:				; CODE XREF: sub_6888B528+14D2j
		mov	[esp+21Ch+Buf1], ebp
		call	sub_68881990
		test	al, al
		jnz	short loc_6888C9FC
		mov	eax, ebx
		not	eax
		mov	[esp+21Ch+Buf2], eax
		mov	[esp+21Ch+Buf1], ebp
		call	sub_68881904
		mov	[esp+21Ch+Buf2], ebx
		mov	[esp+21Ch+Buf1], ebp
		call	sub_68881D24
		mov	[esp+21Ch+var_120], eax
		jmp	loc_6888C504
; ---------------------------------------------------------------------------

loc_6888CA31:				; CODE XREF: sub_6888B528+FCEj
		mov	[esp+21Ch+var_118], offset sub_6888B2A0
		mov	[esp+21Ch+Buf1], ebp
		call	sub_68881B44
		cmp	ax, 1Bh
		jz	loc_6888CB9E
		mov	[esp+21Ch+Buf2], offset	aExpectedToFind	; "Expected to find a header with length 0"...
		mov	[esp+21Ch+Buf1], offset	aOscar_5 ; "oscar"
		call	purple_debug_warning
		jmp	loc_6888C504
; ---------------------------------------------------------------------------

loc_6888CA67:				; CODE XREF: sub_6888B528+6B3j
		mov	[esp+21Ch+var_1E0], 0FFFFFFFFh
		jmp	loc_6888BCB4
; ---------------------------------------------------------------------------

loc_6888CA74:				; CODE XREF: sub_6888B528+962j
		mov	[esp+21Ch+Buf2], 56h
		mov	[esp+21Ch+Buf1], ebp
		call	sub_68881904
		mov	[esp+21Ch+Buf1], ebp
		call	sub_68881848
		mov	edx, [ebp+4]
		sub	edx, eax
		mov	[esp+21Ch+Buf2], edx
		mov	[esp+21Ch+Buf1], ebp
		call	sub_68881D24
		mov	esi, eax
		mov	[esp+21Ch+Buf2], offset	aXStatusReceive	; "X-Status: Received XML reply\n"
		mov	[esp+21Ch+Buf1], offset	aOscar_5 ; "oscar"
		call	purple_debug_misc
		test	esi, esi
		jz	loc_6888CC77
		mov	[esp+21Ch+Buf1], 0
		call	g_string_new
		mov	ebx, eax
		mov	[esp+21Ch+Buf2], offset	SubStr ; "&lt;title&gt;"
		mov	[esp+21Ch+Buf1], esi ; Str
		call	strstr
		test	eax, eax
		jz	short loc_6888CB06
		lea	ebp, [eax+0Dh]
		mov	[esp+21Ch+Buf2], offset	aLtTitleGt_0 ; "&lt;/title&gt;"
		mov	[esp+21Ch+Buf1], ebp ; Str
		call	strstr
		test	eax, eax
		jz	short loc_6888CB06
		sub	eax, ebp
		mov	[esp+21Ch+Size], eax
		mov	[esp+21Ch+Buf2], ebp
		mov	[esp+21Ch+Buf1], ebx
		call	g_string_append_len

loc_6888CB06:				; CODE XREF: sub_6888B528+15B3j
					; sub_6888B528+15CAj
		mov	[esp+21Ch+Buf2], offset	aLtDescGt ; "&lt;desc&gt;"
		mov	[esp+21Ch+Buf1], esi ; Str
		call	strstr
		test	eax, eax
		jz	short loc_6888CB67
		lea	ebp, [eax+0Ch]
		mov	[esp+21Ch+Buf2], offset	aLtDescGt_0 ; "&lt;/desc&gt;"
		mov	[esp+21Ch+Buf1], ebp ; Str
		call	strstr
		mov	edx, eax
		test	eax, eax
		jz	short loc_6888CB67
		cmp	dword ptr [ebx+4], 0
		jz	short loc_6888CB55
		cmp	ebp, eax
		jnb	short loc_6888CB55
		mov	[esp+21Ch+Buf2], offset	asc_688AFB0E ; " - "
		mov	[esp+21Ch+Buf1], ebx
		mov	[esp+21Ch+var_1F4], eax
		call	g_string_append
		mov	edx, [esp+21Ch+var_1F4]

loc_6888CB55:				; CODE XREF: sub_6888B528+160Fj
					; sub_6888B528+1613j
		sub	edx, ebp
		mov	[esp+21Ch+Size], edx
		mov	[esp+21Ch+Buf2], ebp
		mov	[esp+21Ch+Buf1], ebx
		call	g_string_append_len

loc_6888CB67:				; CODE XREF: sub_6888B528+15F0j
					; sub_6888B528+1609j
		mov	eax, [ebx]
		mov	[esp+21Ch+Buf1], eax
		call	purple_unescape_text
		mov	ebp, eax
		mov	[esp+21Ch+Buf2], 1
		mov	[esp+21Ch+Buf1], ebx
		call	g_string_free
		cmp	byte ptr [ebp+0], 0
		jnz	short loc_6888CBD9

loc_6888CB89:				; CODE XREF: sub_6888B528+1700j
					; sub_6888B528+174Aj
		mov	[esp+21Ch+Buf1], ebp
		call	g_free
		mov	[esp+21Ch+var_1E0], 0
		jmp	loc_6888B980
; ---------------------------------------------------------------------------

loc_6888CB9E:				; CODE XREF: sub_6888B528+1520j
		mov	[esp+21Ch+Buf2], 1Bh
		mov	[esp+21Ch+Buf1], ebp
		call	sub_68881904
		mov	[esp+21Ch+Buf1], ebp
		call	sub_68881B44
		cmp	ax, 0Eh
		jz	loc_6888CC98
		mov	[esp+21Ch+Buf2], offset	aExpectedToFi_0	; "Expected to find a header with length 0"...
		mov	[esp+21Ch+Buf1], offset	aOscar_5 ; "oscar"
		call	purple_debug_warning
		jmp	loc_6888C504
; ---------------------------------------------------------------------------

loc_6888CBD9:				; CODE XREF: sub_6888B528+165Fj
		mov	[esp+21Ch+Size], ebp
		mov	[esp+21Ch+Buf2], offset	aXStatusReplyS ; "X-Status reply: %s\n"
		mov	[esp+21Ch+Buf1], offset	aOscar_5 ; "oscar"
		call	purple_debug_misc
		mov	edx, [esp+21Ch+var_1E8]
		mov	eax, [edx+68h]
		mov	[esp+21Ch+Buf1], eax
		call	purple_connection_get_account
		mov	ebx, eax
		mov	[esp+21Ch+Buf2], edi
		mov	[esp+21Ch+Buf1], eax
		call	purple_find_buddy
		mov	[esp+21Ch+Buf1], eax
		call	purple_buddy_get_presence
		mov	[esp+21Ch+Buf2], offset	aMood ;	"mood"
		mov	[esp+21Ch+Buf1], eax
		call	purple_presence_get_status
		test	eax, eax
		jz	loc_6888CB89
		mov	[esp+21Ch+Buf2], offset	aMood ;	"mood"
		mov	[esp+21Ch+Buf1], eax
		call	purple_status_get_attr_string
		mov	[esp+21Ch+var_200], 0
		mov	[esp+21Ch+var_204], ebp
		mov	[esp+21Ch+var_208], offset aMoodtext ; "moodtext"
		mov	[esp+21Ch+var_20C], eax
		mov	[esp+21Ch+var_210], offset aMood ; "mood"
		mov	[esp+21Ch+Size], offset	aMood ;	"mood"
		mov	[esp+21Ch+Buf2], edi
		mov	[esp+21Ch+Buf1], ebx
		call	purple_prpl_got_user_status
		jmp	loc_6888CB89
; ---------------------------------------------------------------------------

loc_6888CC77:				; CODE XREF: sub_6888B528+158Dj
		mov	[esp+21Ch+Buf2], offset	aXStatusCanTGet	; "X-Status: Can't get XML reply string\n"
		mov	[esp+21Ch+Buf1], offset	aOscar_5 ; "oscar"
		call	purple_debug_misc
		mov	[esp+21Ch+var_1E0], 0
		jmp	loc_6888B980
; ---------------------------------------------------------------------------

loc_6888CC98:				; CODE XREF: sub_6888B528+1692j
		mov	[esp+21Ch+Buf2], 0Eh
		mov	[esp+21Ch+Buf1], ebp
		call	sub_68881904
		mov	[esp+21Ch+Buf1], ebp
		call	sub_68881990
		mov	byte ptr [esp+21Ch+var_128], al
		mov	[esp+21Ch+Buf2], 5
		mov	[esp+21Ch+Buf1], ebp
		call	sub_68881904
		mov	[esp+21Ch+Buf1], ebp
		call	sub_68881B44
		movzx	eax, ax
		mov	[esp+21Ch+Buf2], eax
		mov	[esp+21Ch+Buf1], ebp
		call	sub_68881D24
		mov	[esp+21Ch+var_124], eax
		jmp	loc_6888C504
sub_6888B528	endp

; ---------------------------------------------------------------------------
		align 4
; Exported entry  41. aim_im_reqparams

; =============== S U B	R O U T	I N E =======================================


		public aim_im_reqparams
aim_im_reqparams proc near		; CODE XREF: .text:6889EBDCp

var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_10		= dword	ptr -10h
arg_0		= dword	ptr  4

		push	ebx
		sub	esp, 28h
		mov	ebx, [esp+2Ch+arg_0]
		mov	eax, ds:__stack_chk_guard
		mov	[esp+2Ch+var_10], eax
		xor	eax, eax
		test	ebx, ebx
		jz	short loc_6888CD48
		mov	[esp+2Ch+var_28], 4
		mov	[esp+2Ch+var_2C], ebx
		call	flap_connection_findbygroup
		test	eax, eax
		jz	short loc_6888CD48
		mov	[esp+2Ch+var_20], 4
		mov	[esp+2Ch+var_24], 4
		mov	[esp+2Ch+var_28], eax
		mov	[esp+2Ch+var_2C], ebx
		call	aim_genericreq_n_snacid
		xor	eax, eax

loc_6888CD35:				; CODE XREF: aim_im_reqparams+61j
		mov	edx, [esp+2Ch+var_10]
		xor	edx, ds:__stack_chk_guard
		jnz	short loc_6888CD4F
		add	esp, 28h
		pop	ebx
		retn
; ---------------------------------------------------------------------------
		align 4

loc_6888CD48:				; CODE XREF: aim_im_reqparams+15j
					; aim_im_reqparams+29j
		mov	eax, 0FFFFFFEAh
		jmp	short loc_6888CD35
; ---------------------------------------------------------------------------

loc_6888CD4F:				; CODE XREF: aim_im_reqparams+53j
		call	__stack_chk_fail
aim_im_reqparams endp

; Exported entry  43. aim_im_sendch1_ext

; =============== S U B	R O U T	I N E =======================================


		public aim_im_sendch1_ext
aim_im_sendch1_ext proc	near		; CODE XREF: oscar_send_im+2FBp

var_6C		= dword	ptr -6Ch
var_68		= dword	ptr -68h
var_64		= dword	ptr -64h
var_60		= dword	ptr -60h
var_5C		= dword	ptr -5Ch
var_58		= dword	ptr -58h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_34		= byte ptr -34h
var_28		= byte ptr -28h
var_20		= dword	ptr -20h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 5Ch
		mov	esi, [esp+6Ch+arg_0]
		mov	edi, [esp+6Ch+arg_4]
		mov	eax, ds:__stack_chk_guard
		mov	[esp+6Ch+var_20], eax
		xor	eax, eax
		test	esi, esi
		jz	loc_6888D060
		mov	[esp+6Ch+var_68], 4
		mov	[esp+6Ch+var_6C], esi
		call	flap_connection_findbygroup
		mov	ebp, eax
		test	eax, eax
		jz	loc_6888D060
		test	edi, edi
		jz	loc_6888D060
		mov	edx, [edi+8]
		test	edx, edx
		jz	loc_6888D060
		mov	eax, [edi+0Ch]
		test	eax, eax
		jz	loc_6888D060
		cmp	eax, 9F0h
		ja	loc_6888D054
		movzx	edx, word ptr [edi+1Ch]
		lea	edx, [eax+edx+0Ch]
		mov	[esp+6Ch+var_40], edx
		mov	eax, edx
		sub	eax, 0FFFFFF80h
		mov	[esp+6Ch+var_68], eax
		lea	ebx, [esp+6Ch+var_34]
		mov	[esp+6Ch+var_6C], ebx
		call	sub_68881748
		lea	edx, [esp+6Ch+var_28]
		mov	[esp+6Ch+var_6C], edx
		mov	[esp+6Ch+var_44], edx
		call	aim_icbm_makecookie
		mov	eax, [edi]
		mov	[esp+6Ch+var_6C], eax
		mov	ecx, 1
		mov	edx, [esp+6Ch+var_44]
		mov	eax, ebx
		call	sub_6888B308
		mov	[esp+6Ch+var_68], 2
		mov	[esp+6Ch+var_6C], ebx
		call	sub_68881E0C
		movzx	eax, word ptr [esp+6Ch+var_40]
		mov	[esp+6Ch+var_68], eax
		mov	[esp+6Ch+var_6C], ebx
		call	sub_68881E0C
		mov	[esp+6Ch+var_68], 501h
		mov	[esp+6Ch+var_6C], ebx
		call	sub_68881E0C
		movzx	eax, word ptr [edi+1Ch]
		mov	[esp+6Ch+var_68], eax
		mov	[esp+6Ch+var_6C], ebx
		call	sub_68881E0C
		movzx	eax, word ptr [edi+1Ch]
		mov	[esp+6Ch+var_64], eax
		mov	eax, [edi+20h]
		mov	[esp+6Ch+var_68], eax
		mov	[esp+6Ch+var_6C], ebx
		call	sub_688820A0
		mov	[esp+6Ch+var_68], 101h
		mov	[esp+6Ch+var_6C], ebx
		call	sub_68881E0C
		mov	eax, [edi+0Ch]
		add	eax, 4
		movzx	eax, ax
		mov	[esp+6Ch+var_68], eax
		mov	[esp+6Ch+var_6C], ebx
		call	sub_68881E0C
		movzx	eax, word ptr [edi+24h]
		mov	[esp+6Ch+var_68], eax
		mov	[esp+6Ch+var_6C], ebx
		call	sub_68881E0C
		mov	[esp+6Ch+var_68], 0
		mov	[esp+6Ch+var_6C], ebx
		call	sub_68881E0C
		mov	eax, [edi+0Ch]
		mov	[esp+6Ch+var_64], eax
		mov	eax, [edi+8]
		mov	[esp+6Ch+var_68], eax
		mov	[esp+6Ch+var_6C], ebx
		call	sub_688820A0
		test	byte ptr [edi+4], 1
		jnz	loc_6888CF88
		mov	[esp+6Ch+var_68], 3
		mov	[esp+6Ch+var_6C], ebx
		call	sub_68881E0C
		mov	[esp+6Ch+var_68], 0
		mov	[esp+6Ch+var_6C], ebx
		call	sub_68881E0C
		mov	eax, [edi+4]
		test	ah, 8
		jnz	loc_6888D044
		test	al, 20h
		jnz	loc_6888CFB3

loc_6888CEF0:				; CODE XREF: aim_im_sendch1_ext+259j
		test	al, 10h
		jnz	loc_6888D01C

loc_6888CEF8:				; CODE XREF: aim_im_sendch1_ext+2C2j
					; aim_im_sendch1_ext+2E8j
		mov	edx, [edi]
		xor	eax, eax
		mov	ecx, 0FFFFFFFFh
		mov	edi, edx
		repne scasb
		not	ecx
		mov	[esp+6Ch+var_58], ecx
		mov	[esp+6Ch+var_5C], edx
		mov	[esp+6Ch+var_60], 0
		mov	[esp+6Ch+var_64], 6
		mov	[esp+6Ch+var_68], 4
		mov	[esp+6Ch+var_6C], esi
		call	aim_cachesnac
		mov	[esp+6Ch+var_58], ebx
		mov	[esp+6Ch+var_5C], eax
		mov	[esp+6Ch+var_60], 6
		mov	[esp+6Ch+var_64], 4
		mov	[esp+6Ch+var_68], ebp
		mov	[esp+6Ch+var_6C], esi
		call	flap_connection_send_snac
		mov	[esp+6Ch+var_6C], ebx
		call	sub_688817E4
		mov	[esp+6Ch+var_68], 3Ch
		mov	[esp+6Ch+var_6C], esi
		call	aim_cleansnacs
		xor	eax, eax

loc_6888CF6D:				; CODE XREF: aim_im_sendch1_ext+305j
					; aim_im_sendch1_ext+311j
		mov	edx, [esp+6Ch+var_20]
		xor	edx, ds:__stack_chk_guard
		jnz	loc_6888D06A
		add	esp, 5Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 4

loc_6888CF88:				; CODE XREF: aim_im_sendch1_ext+162j
		mov	[esp+6Ch+var_68], 4

loc_6888CF90:				; CODE XREF: aim_im_sendch1_ext+2F8j
		mov	[esp+6Ch+var_6C], ebx
		call	sub_68881E0C
		mov	[esp+6Ch+var_68], 0
		mov	[esp+6Ch+var_6C], ebx
		call	sub_68881E0C
		mov	eax, [edi+4]
		test	al, 20h
		jz	loc_6888CEF0

loc_6888CFB3:				; CODE XREF: aim_im_sendch1_ext+196j
		mov	[esp+6Ch+var_68], 8
		mov	[esp+6Ch+var_6C], ebx
		call	sub_68881E0C
		mov	[esp+6Ch+var_68], 0Ch
		mov	[esp+6Ch+var_6C], ebx
		call	sub_68881E0C
		mov	eax, [edi+10h]
		mov	[esp+6Ch+var_68], eax
		mov	[esp+6Ch+var_6C], ebx
		call	sub_68881E8C
		mov	[esp+6Ch+var_68], 1
		mov	[esp+6Ch+var_6C], ebx
		call	sub_68881E0C
		movzx	eax, word ptr [edi+18h]
		mov	[esp+6Ch+var_68], eax
		mov	[esp+6Ch+var_6C], ebx
		call	sub_68881E0C
		mov	eax, [edi+14h]
		mov	[esp+6Ch+var_68], eax
		mov	[esp+6Ch+var_6C], ebx
		call	sub_68881E8C
		mov	eax, [edi+4]
		test	al, 10h
		jz	loc_6888CEF8

loc_6888D01C:				; CODE XREF: aim_im_sendch1_ext+19Ej
		mov	[esp+6Ch+var_68], 9
		mov	[esp+6Ch+var_6C], ebx
		call	sub_68881E0C
		mov	[esp+6Ch+var_68], 0
		mov	[esp+6Ch+var_6C], ebx
		call	sub_68881E0C
		jmp	loc_6888CEF8
; ---------------------------------------------------------------------------
		align 4

loc_6888D044:				; CODE XREF: aim_im_sendch1_ext+18Ej
		mov	[esp+6Ch+var_68], 6
		jmp	loc_6888CF90
; ---------------------------------------------------------------------------
		align 4

loc_6888D054:				; CODE XREF: aim_im_sendch1_ext+5Fj
		mov	eax, 0FFFFFFF9h
		jmp	loc_6888CF6D
; ---------------------------------------------------------------------------
		align 10h

loc_6888D060:				; CODE XREF: aim_im_sendch1_ext+1Cj
					; aim_im_sendch1_ext+36j ...
		mov	eax, 0FFFFFFEAh
		jmp	loc_6888CF6D
; ---------------------------------------------------------------------------

loc_6888D06A:				; CODE XREF: aim_im_sendch1_ext+223j
		call	__stack_chk_fail
aim_im_sendch1_ext endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  45. aim_im_sendch2_chatinvite

; =============== S U B	R O U T	I N E =======================================


		public aim_im_sendch2_chatinvite
aim_im_sendch2_chatinvite proc near	; CODE XREF: oscar_chat_invite+77p

var_8C		= dword	ptr -8Ch
var_88		= dword	ptr -88h
var_84		= dword	ptr -84h
var_80		= dword	ptr -80h
var_7C		= dword	ptr -7Ch
var_78		= dword	ptr -78h
var_68		= dword	ptr -68h
var_64		= dword	ptr -64h
var_60		= dword	ptr -60h
var_5C		= dword	ptr -5Ch
var_58		= dword	ptr -58h
var_54		= dword	ptr -54h
var_50		= word ptr -50h
var_4E		= word ptr -4Eh
var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_40		= byte ptr -40h
var_34		= dword	ptr -34h
var_28		= byte ptr -28h
var_20		= dword	ptr -20h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 7Ch
		mov	ebp, [esp+8Ch+arg_0]
		mov	esi, [esp+8Ch+arg_4]
		mov	eax, [esp+8Ch+arg_8]
		mov	[esp+8Ch+var_64], eax
		mov	edx, [esp+8Ch+arg_C]
		mov	[esp+8Ch+var_5C], edx
		mov	ecx, [esp+8Ch+arg_10]
		mov	[esp+8Ch+var_68], ecx
		mov	edx, [esp+8Ch+arg_14]
		mov	[esp+8Ch+var_58], edx
		mov	ecx, [esp+8Ch+var_5C]
		mov	[esp+8Ch+var_50], cx
		mov	[esp+8Ch+var_4E], dx
		mov	eax, ds:__stack_chk_guard
		mov	[esp+8Ch+var_20], eax
		xor	eax, eax
		mov	[esp+8Ch+var_48], 0
		mov	[esp+8Ch+var_44], 0
		test	ebp, ebp
		jz	loc_6888D3D4
		mov	[esp+8Ch+var_88], 4
		mov	[esp+8Ch+var_8C], ebp
		call	flap_connection_findbygroup
		mov	[esp+8Ch+var_54], eax
		test	eax, eax
		jz	loc_6888D3D4
		test	esi, esi
		jz	loc_6888D3D4
		mov	ebx, [esp+8Ch+var_64]
		test	ebx, ebx
		jz	loc_6888D3D4
		mov	ecx, [esp+8Ch+var_68]
		test	ecx, ecx
		jz	loc_6888D3D4
		lea	edx, [esp+8Ch+var_28]
		mov	[esp+8Ch+var_8C], edx
		call	aim_icbm_makecookie
		xor	ebx, ebx
		mov	ecx, 0FFFFFFFFh
		mov	edi, esi
		mov	al, bl
		repne scasb
		mov	[esp+8Ch+var_60], ecx
		mov	ecx, 0FFFFFFFFh
		mov	edi, [esp+8Ch+var_68]
		repne scasb
		mov	edx, ecx
		not	edx
		mov	ecx, 0FFFFFFFFh
		mov	edi, [esp+8Ch+var_64]
		repne scasb
		not	ecx
		sub	edx, [esp+8Ch+var_60]
		lea	eax, [edx+ecx+472h]
		mov	[esp+8Ch+var_88], eax
		lea	eax, [esp+8Ch+var_40]
		mov	[esp+8Ch+var_8C], eax
		call	sub_68881748
		mov	ecx, 0FFFFFFFFh
		mov	edi, esi
		mov	al, bl
		repne scasb
		not	ecx
		mov	[esp+8Ch+var_78], ecx
		mov	[esp+8Ch+var_7C], esi
		mov	[esp+8Ch+var_80], 0
		mov	[esp+8Ch+var_84], 6
		mov	[esp+8Ch+var_88], 4
		mov	[esp+8Ch+var_8C], ebp
		call	aim_cachesnac
		mov	[esp+8Ch+var_60], eax
		mov	[esp+8Ch+var_8C], 0Ch
		call	g_malloc
		mov	ebx, eax
		mov	[esp+8Ch+var_8C], esi
		call	g_strdup
		mov	[ebx], eax
		mov	edx, [esp+8Ch+var_68]
		mov	[esp+8Ch+var_8C], edx
		call	g_strdup
		mov	[ebx+4], eax
		mov	ecx, [esp+8Ch+var_5C]
		mov	[ebx+8], cx
		mov	eax, [esp+8Ch+var_58]
		mov	[ebx+0Ah], ax
		mov	[esp+8Ch+var_84], ebx
		mov	[esp+8Ch+var_88], 2
		lea	edx, [esp+8Ch+var_28]
		mov	[esp+8Ch+var_8C], edx
		call	aim_mkcookie
		test	eax, eax
		jz	loc_6888D3C4
		mov	[esp+8Ch+var_88], eax ;	void *
		mov	[esp+8Ch+var_8C], ebp ;	int
		call	aim_cachecookie

loc_6888D20E:				; CODE XREF: aim_im_sendch2_chatinvite+35Cj
		mov	[esp+8Ch+var_8C], esi
		mov	ecx, 2
		lea	edx, [esp+8Ch+var_28]
		lea	eax, [esp+8Ch+var_40]
		call	sub_6888B308
		mov	ebx, 0FFFFFFFFh
		xor	eax, eax
		mov	ecx, ebx
		mov	edi, [esp+8Ch+var_64]
		repne scasb
		mov	edx, ecx
		not	edx
		mov	ecx, ebx
		mov	edi, [esp+8Ch+var_68]
		repne scasb
		not	ecx
		lea	eax, [edx+ecx+2Fh]
		mov	[esp+8Ch+var_88], eax
		lea	ebx, [esp+8Ch+var_34]
		mov	[esp+8Ch+var_8C], ebx
		call	sub_68881748
		mov	[esp+8Ch+var_88], 0
		mov	[esp+8Ch+var_8C], ebx
		call	sub_68881E0C
		mov	[esp+8Ch+var_84], 8
		lea	eax, [esp+8Ch+var_28]
		mov	[esp+8Ch+var_88], eax
		mov	[esp+8Ch+var_8C], ebx
		call	sub_688820A0
		mov	[esp+8Ch+var_88], 8
		mov	[esp+8Ch+var_84], 0
		mov	[esp+8Ch+var_8C], ebx
		call	sub_688918E0
		mov	[esp+8Ch+var_84], 1
		mov	[esp+8Ch+var_88], 0Ah
		lea	esi, [esp+8Ch+var_44]
		mov	[esp+8Ch+var_8C], esi
		call	aim_tlvlist_add_16
		mov	[esp+8Ch+var_88], 0Fh
		mov	[esp+8Ch+var_8C], esi
		call	aim_tlvlist_add_noval
		mov	edx, [esp+8Ch+var_64]
		mov	[esp+8Ch+var_84], edx
		mov	[esp+8Ch+var_88], 0Ch
		mov	[esp+8Ch+var_8C], esi
		call	aim_tlvlist_add_str
		movzx	eax, [esp+8Ch+var_4E]
		mov	[esp+8Ch+var_7C], eax
		mov	ecx, [esp+8Ch+var_68]
		mov	[esp+8Ch+var_80], ecx
		movzx	eax, [esp+8Ch+var_50]
		mov	[esp+8Ch+var_84], eax
		mov	[esp+8Ch+var_88], 2711h
		mov	[esp+8Ch+var_8C], esi
		call	aim_tlvlist_add_chatroom
		mov	[esp+8Ch+var_88], esi
		mov	[esp+8Ch+var_8C], ebx
		call	aim_tlvlist_write
		mov	esi, [esp+8Ch+var_34]
		mov	[esp+8Ch+var_8C], ebx
		call	sub_68881848
		mov	[esp+8Ch+var_80], esi
		and	eax, 0FFFFh
		mov	[esp+8Ch+var_84], eax
		mov	[esp+8Ch+var_88], 5
		lea	esi, [esp+8Ch+var_48]
		mov	[esp+8Ch+var_8C], esi
		call	aim_tlvlist_add_raw
		mov	[esp+8Ch+var_8C], ebx
		call	sub_688817E4
		mov	[esp+8Ch+var_88], esi
		lea	eax, [esp+8Ch+var_40]
		mov	[esp+8Ch+var_8C], eax
		call	aim_tlvlist_write
		mov	eax, [esp+8Ch+var_44]
		mov	[esp+8Ch+var_8C], eax
		call	aim_tlvlist_free
		mov	eax, [esp+8Ch+var_48]
		mov	[esp+8Ch+var_8C], eax
		call	aim_tlvlist_free
		lea	edx, [esp+8Ch+var_40]
		mov	[esp+8Ch+var_78], edx
		mov	eax, [esp+8Ch+var_60]
		mov	[esp+8Ch+var_7C], eax
		mov	[esp+8Ch+var_80], 6
		mov	[esp+8Ch+var_84], 4
		mov	eax, [esp+8Ch+var_54]
		mov	[esp+8Ch+var_88], eax
		mov	[esp+8Ch+var_8C], ebp
		call	flap_connection_send_snac
		lea	edx, [esp+8Ch+var_40]
		mov	[esp+8Ch+var_8C], edx
		call	sub_688817E4
		xor	eax, eax

loc_6888D3A9:				; CODE XREF: aim_im_sendch2_chatinvite+369j
		mov	ecx, [esp+8Ch+var_20]
		xor	ecx, ds:__stack_chk_guard
		jnz	loc_6888D3DB
		add	esp, 7Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 4

loc_6888D3C4:				; CODE XREF: aim_im_sendch2_chatinvite+18Cj
		mov	[esp+8Ch+var_8C], ebx
		call	g_free
		jmp	loc_6888D20E
; ---------------------------------------------------------------------------
		align 4

loc_6888D3D4:				; CODE XREF: aim_im_sendch2_chatinvite+6Cj
					; aim_im_sendch2_chatinvite+88j ...
		mov	eax, 0FFFFFFEAh
		jmp	short loc_6888D3A9
; ---------------------------------------------------------------------------

loc_6888D3DB:				; CODE XREF: aim_im_sendch2_chatinvite+343j
		call	__stack_chk_fail
aim_im_sendch2_chatinvite endp

; Exported entry  47. aim_im_sendch2_icon

; =============== S U B	R O U T	I N E =======================================


		public aim_im_sendch2_icon
aim_im_sendch2_icon proc near		; CODE XREF: sub_6889F454+89Ap

var_7C		= dword	ptr -7Ch
var_78		= dword	ptr -78h
var_74		= dword	ptr -74h
var_70		= dword	ptr -70h
var_6C		= dword	ptr -6Ch
var_68		= dword	ptr -68h
var_50		= dword	ptr -50h
var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_42		= word ptr -42h
var_40		= dword	ptr -40h
var_34		= byte ptr -34h
var_28		= byte ptr -28h
var_20		= dword	ptr -20h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 6Ch
		mov	ebp, [esp+7Ch+arg_0]
		mov	esi, [esp+7Ch+arg_4]
		mov	eax, [esp+7Ch+arg_8]
		mov	[esp+7Ch+var_50], eax
		mov	ebx, [esp+7Ch+arg_C]
		mov	edx, [esp+7Ch+arg_10]
		mov	[esp+7Ch+var_48], edx
		mov	eax, [esp+7Ch+arg_14]
		mov	[esp+7Ch+var_42], ax
		mov	edx, ds:__stack_chk_guard
		mov	[esp+7Ch+var_20], edx
		xor	edx, edx
		test	ebp, ebp
		jz	loc_6888D690
		mov	[esp+7Ch+var_78], 4
		mov	[esp+7Ch+var_7C], ebp
		call	flap_connection_findbygroup
		mov	[esp+7Ch+var_4C], eax
		test	eax, eax
		jz	loc_6888D690
		test	esi, esi
		jz	loc_6888D690
		mov	edi, [esp+7Ch+var_50]
		test	edi, edi
		jz	loc_6888D690
		test	ebx, ebx
		jle	loc_6888D690
		cmp	ebx, 1BFFh
		jg	loc_6888D690
		lea	eax, [esp+7Ch+var_28]
		mov	[esp+7Ch+var_7C], eax
		call	aim_icbm_makecookie
		xor	eax, eax
		mov	ecx, 0FFFFFFFFh
		mov	edi, esi
		repne scasb
		not	ecx
		lea	eax, [ebx+ecx+54h]
		mov	[esp+7Ch+var_78], eax
		lea	edi, [esp+7Ch+var_34]
		mov	[esp+7Ch+var_7C], edi
		call	sub_68881748
		mov	[esp+7Ch+var_68], 0
		mov	[esp+7Ch+var_6C], 0
		mov	[esp+7Ch+var_70], 0
		mov	[esp+7Ch+var_74], 6
		mov	[esp+7Ch+var_78], 4
		mov	[esp+7Ch+var_7C], ebp
		call	aim_cachesnac
		mov	[esp+7Ch+var_40], eax
		mov	[esp+7Ch+var_7C], esi
		mov	ecx, 2
		lea	edx, [esp+7Ch+var_28]
		mov	eax, edi
		call	sub_6888B308
		mov	[esp+7Ch+var_78], 5
		mov	[esp+7Ch+var_7C], edi
		call	sub_68881E0C
		mov	esi, ebx
		lea	eax, [esi+42h]
		movzx	eax, ax
		mov	[esp+7Ch+var_78], eax
		mov	[esp+7Ch+var_7C], edi
		call	sub_68881E0C
		mov	[esp+7Ch+var_78], 0
		mov	[esp+7Ch+var_7C], edi
		call	sub_68881E0C
		mov	[esp+7Ch+var_74], 8
		lea	edx, [esp+7Ch+var_28]
		mov	[esp+7Ch+var_78], edx
		mov	[esp+7Ch+var_7C], edi
		call	sub_688820A0
		mov	[esp+7Ch+var_78], 1
		mov	[esp+7Ch+var_74], 0
		mov	[esp+7Ch+var_7C], edi
		call	sub_688918E0
		mov	[esp+7Ch+var_78], 0Ah
		mov	[esp+7Ch+var_7C], edi
		call	sub_68881E0C
		mov	[esp+7Ch+var_78], 2
		mov	[esp+7Ch+var_7C], edi
		call	sub_68881E0C
		mov	[esp+7Ch+var_78], 1
		mov	[esp+7Ch+var_7C], edi
		call	sub_68881E0C
		mov	[esp+7Ch+var_78], 0Fh
		mov	[esp+7Ch+var_7C], edi
		call	sub_68881E0C
		mov	[esp+7Ch+var_78], 0
		mov	[esp+7Ch+var_7C], edi
		call	sub_68881E0C
		mov	[esp+7Ch+var_78], 2711h
		mov	[esp+7Ch+var_7C], edi
		call	sub_68881E0C
		add	esi, 1Ah
		movzx	esi, si
		mov	[esp+7Ch+var_78], esi
		mov	[esp+7Ch+var_7C], edi
		call	sub_68881E0C
		mov	[esp+7Ch+var_78], 0
		mov	[esp+7Ch+var_7C], edi
		call	sub_68881E0C
		movzx	eax, [esp+7Ch+var_42]
		mov	[esp+7Ch+var_78], eax
		mov	[esp+7Ch+var_7C], edi
		call	sub_68881E0C
		mov	[esp+7Ch+var_78], ebx
		mov	[esp+7Ch+var_7C], edi
		call	sub_68881E8C
		mov	eax, [esp+7Ch+var_48]
		mov	[esp+7Ch+var_78], eax
		mov	[esp+7Ch+var_7C], edi
		call	sub_68881E8C
		mov	[esp+7Ch+var_74], ebx
		mov	edx, [esp+7Ch+var_50]
		mov	[esp+7Ch+var_78], edx
		mov	[esp+7Ch+var_7C], edi
		call	sub_688820A0
		mov	[esp+7Ch+var_78], offset aAvt1picture_id ; "AVT1picture.id"
		mov	[esp+7Ch+var_7C], edi
		call	sub_68882114
		mov	[esp+7Ch+var_78], 3
		mov	[esp+7Ch+var_7C], edi
		call	sub_68881E0C
		mov	[esp+7Ch+var_78], 0
		mov	[esp+7Ch+var_7C], edi
		call	sub_68881E0C
		mov	[esp+7Ch+var_68], edi
		mov	eax, [esp+7Ch+var_40]
		mov	[esp+7Ch+var_6C], eax
		mov	[esp+7Ch+var_70], 6
		mov	[esp+7Ch+var_74], 4
		mov	eax, [esp+7Ch+var_4C]
		mov	[esp+7Ch+var_78], eax
		mov	[esp+7Ch+var_7C], ebp
		call	flap_connection_send_snac
		mov	[esp+7Ch+var_7C], edi
		call	sub_688817E4
		xor	eax, eax

loc_6888D677:				; CODE XREF: aim_im_sendch2_icon+2B5j
		mov	edx, [esp+7Ch+var_20]
		xor	edx, ds:__stack_chk_guard
		jnz	loc_6888D697
		add	esp, 6Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6888D690:				; CODE XREF: aim_im_sendch2_icon+4Cj
					; aim_im_sendch2_icon+68j ...
		mov	eax, 0FFFFFFEAh
		jmp	short loc_6888D677
; ---------------------------------------------------------------------------

loc_6888D697:				; CODE XREF: aim_im_sendch2_icon+2A1j
		call	__stack_chk_fail
aim_im_sendch2_icon endp

; Exported entry  44. aim_im_sendch2_cancel

; =============== S U B	R O U T	I N E =======================================


		public aim_im_sendch2_cancel
aim_im_sendch2_cancel proc near		; CODE XREF: peer_oft_close+5Ep
					; .text:68899EE7p ...

var_7C		= dword	ptr -7Ch
var_78		= dword	ptr -78h
var_74		= dword	ptr -74h
var_70		= dword	ptr -70h
var_6C		= dword	ptr -6Ch
var_68		= dword	ptr -68h
var_5C		= dword	ptr -5Ch
var_58		= dword	ptr -58h
var_54		= dword	ptr -54h
var_50		= dword	ptr -50h
var_40		= dword	ptr -40h
var_3C		= dword	ptr -3Ch
var_38		= byte ptr -38h
var_2C		= dword	ptr -2Ch
var_20		= dword	ptr -20h
arg_0		= dword	ptr  4

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 6Ch
		mov	esi, [esp+7Ch+arg_0]
		mov	eax, ds:__stack_chk_guard
		mov	[esp+7Ch+var_20], eax
		xor	eax, eax
		mov	[esp+7Ch+var_40], 0
		mov	[esp+7Ch+var_3C], 0
		mov	ebp, [esi]
		mov	[esp+7Ch+var_78], 4
		mov	[esp+7Ch+var_7C], ebp
		call	flap_connection_findbygroup
		mov	[esp+7Ch+var_54], eax
		test	eax, eax
		jz	loc_6888D874
		mov	edi, [esi+10h]
		xor	eax, eax
		mov	ecx, 0FFFFFFFFh
		repne scasb
		not	ecx
		add	ecx, 75h
		mov	[esp+7Ch+var_78], ecx
		lea	edi, [esp+7Ch+var_38]
		mov	[esp+7Ch+var_7C], edi
		call	sub_68881748
		mov	[esp+7Ch+var_68], 0
		mov	[esp+7Ch+var_6C], 0
		mov	[esp+7Ch+var_70], 0
		mov	[esp+7Ch+var_74], 6
		mov	[esp+7Ch+var_78], 4
		mov	[esp+7Ch+var_7C], ebp
		call	aim_cachesnac
		mov	[esp+7Ch+var_50], eax
		lea	edx, [esi+18h]
		mov	[esp+7Ch+var_58], edx
		mov	eax, [esi+10h]
		mov	[esp+7Ch+var_7C], eax
		mov	ecx, 2
		mov	eax, edi
		call	sub_6888B308
		mov	[esp+7Ch+var_78], 3
		lea	ecx, [esp+7Ch+var_40]
		mov	[esp+7Ch+var_7C], ecx
		mov	[esp+7Ch+var_5C], ecx
		call	aim_tlvlist_add_noval
		mov	[esp+7Ch+var_78], 40h
		lea	ebx, [esp+7Ch+var_2C]
		mov	[esp+7Ch+var_7C], ebx
		call	sub_68881748
		mov	[esp+7Ch+var_78], 1
		mov	[esp+7Ch+var_7C], ebx
		call	sub_68881E0C
		mov	[esp+7Ch+var_74], 8
		mov	eax, [esp+7Ch+var_58]
		mov	[esp+7Ch+var_78], eax
		mov	[esp+7Ch+var_7C], ebx
		call	sub_688820A0
		mov	eax, [esi+8]
		mov	edx, [esi+0Ch]
		mov	[esp+7Ch+var_78], eax
		mov	[esp+7Ch+var_74], edx
		mov	[esp+7Ch+var_7C], ebx
		call	sub_688918E0
		mov	[esp+7Ch+var_74], 1
		mov	[esp+7Ch+var_78], 0Bh
		lea	esi, [esp+7Ch+var_3C]
		mov	[esp+7Ch+var_7C], esi
		call	aim_tlvlist_add_16
		mov	[esp+7Ch+var_78], esi
		mov	[esp+7Ch+var_7C], ebx
		call	aim_tlvlist_write
		mov	esi, [esp+7Ch+var_2C]
		mov	[esp+7Ch+var_7C], ebx
		call	sub_68881848
		mov	[esp+7Ch+var_70], esi
		and	eax, 0FFFFh
		mov	[esp+7Ch+var_74], eax
		mov	[esp+7Ch+var_78], 5
		mov	ecx, [esp+7Ch+var_5C]
		mov	[esp+7Ch+var_7C], ecx
		call	aim_tlvlist_add_raw
		mov	[esp+7Ch+var_7C], ebx
		call	sub_688817E4
		mov	ecx, [esp+7Ch+var_5C]
		mov	[esp+7Ch+var_78], ecx
		mov	[esp+7Ch+var_7C], edi
		call	aim_tlvlist_write
		mov	eax, [esp+7Ch+var_3C]
		mov	[esp+7Ch+var_7C], eax
		call	aim_tlvlist_free
		mov	eax, [esp+7Ch+var_40]
		mov	[esp+7Ch+var_7C], eax
		call	aim_tlvlist_free
		mov	[esp+7Ch+var_68], edi
		mov	eax, [esp+7Ch+var_50]
		mov	[esp+7Ch+var_6C], eax
		mov	[esp+7Ch+var_70], 6
		mov	[esp+7Ch+var_74], 4
		mov	eax, [esp+7Ch+var_54]
		mov	[esp+7Ch+var_78], eax
		mov	[esp+7Ch+var_7C], ebp
		call	flap_connection_send_snac
		mov	[esp+7Ch+var_7C], edi
		call	sub_688817E4

loc_6888D874:				; CODE XREF: aim_im_sendch2_cancel+41j
		mov	edx, [esp+7Ch+var_20]
		xor	edx, ds:__stack_chk_guard
		jnz	short loc_6888D888
		add	esp, 6Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_6888D888:				; CODE XREF: aim_im_sendch2_cancel+1E2j
		call	__stack_chk_fail
aim_im_sendch2_cancel endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  46. aim_im_sendch2_connected

; =============== S U B	R O U T	I N E =======================================


		public aim_im_sendch2_connected
aim_im_sendch2_connected proc near	; CODE XREF: peer_connection_finalize_connection+7Cj

var_5C		= dword	ptr -5Ch
var_58		= dword	ptr -58h
var_54		= dword	ptr -54h
var_50		= dword	ptr -50h
var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= byte ptr -2Ch
var_20		= dword	ptr -20h
arg_0		= dword	ptr  4

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 4Ch
		mov	ebx, [esp+5Ch+arg_0]
		mov	eax, ds:__stack_chk_guard
		mov	[esp+5Ch+var_20], eax
		xor	eax, eax
		mov	esi, [ebx]
		mov	[esp+5Ch+var_58], 4
		mov	[esp+5Ch+var_5C], esi
		call	flap_connection_findbygroup
		mov	ebp, eax
		test	eax, eax
		jz	loc_6888D9C2
		mov	edi, [ebx+10h]
		xor	eax, eax
		mov	ecx, 0FFFFFFFFh
		repne scasb
		not	ecx
		add	ecx, 28h
		mov	[esp+5Ch+var_58], ecx
		lea	edi, [esp+5Ch+var_2C]
		mov	[esp+5Ch+var_5C], edi
		call	sub_68881748
		mov	[esp+5Ch+var_48], 0
		mov	[esp+5Ch+var_4C], 0
		mov	[esp+5Ch+var_50], 0
		mov	[esp+5Ch+var_54], 6
		mov	[esp+5Ch+var_58], 4
		mov	[esp+5Ch+var_5C], esi
		call	aim_cachesnac
		mov	[esp+5Ch+var_30], eax
		lea	eax, [ebx+18h]
		mov	[esp+5Ch+var_34], eax
		mov	eax, [ebx+10h]
		mov	[esp+5Ch+var_5C], eax
		mov	ecx, 2
		mov	edx, [esp+5Ch+var_34]
		mov	eax, edi
		call	sub_6888B308
		mov	[esp+5Ch+var_58], 5
		mov	[esp+5Ch+var_5C], edi
		call	sub_68881E0C
		mov	[esp+5Ch+var_58], 1Ah
		mov	[esp+5Ch+var_5C], edi
		call	sub_68881E0C
		mov	[esp+5Ch+var_58], 2
		mov	[esp+5Ch+var_5C], edi
		call	sub_68881E0C
		mov	[esp+5Ch+var_54], 8
		mov	eax, [esp+5Ch+var_34]
		mov	[esp+5Ch+var_58], eax
		mov	[esp+5Ch+var_5C], edi
		call	sub_688820A0
		mov	eax, [ebx+8]
		mov	edx, [ebx+0Ch]
		mov	[esp+5Ch+var_58], eax
		mov	[esp+5Ch+var_54], edx
		mov	[esp+5Ch+var_5C], edi
		call	sub_688918E0
		mov	[esp+5Ch+var_48], edi
		mov	eax, [esp+5Ch+var_30]
		mov	[esp+5Ch+var_4C], eax
		mov	[esp+5Ch+var_50], 6
		mov	[esp+5Ch+var_54], 4
		mov	[esp+5Ch+var_58], ebp
		mov	[esp+5Ch+var_5C], esi
		call	flap_connection_send_snac
		mov	[esp+5Ch+var_5C], edi
		call	sub_688817E4

loc_6888D9C2:				; CODE XREF: aim_im_sendch2_connected+2Cj
		mov	eax, [esp+5Ch+var_20]
		xor	eax, ds:__stack_chk_guard
		jnz	short loc_6888D9D6
		add	esp, 4Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_6888D9D6:				; CODE XREF: aim_im_sendch2_connected+13Cj
		call	__stack_chk_fail
aim_im_sendch2_connected endp

; ---------------------------------------------------------------------------
		align 4
; Exported entry  48. aim_im_sendch2_odc_requestdirect

; =============== S U B	R O U T	I N E =======================================


		public aim_im_sendch2_odc_requestdirect
aim_im_sendch2_odc_requestdirect proc near ; CODE XREF:	sub_688A6AF0+1EBp

var_8C		= dword	ptr -8Ch
var_88		= dword	ptr -88h
var_84		= dword	ptr -84h
var_80		= dword	ptr -80h
var_7C		= dword	ptr -7Ch
var_78		= dword	ptr -78h
var_64		= dword	ptr -64h
var_60		= dword	ptr -60h
var_5C		= dword	ptr -5Ch
var_58		= dword	ptr -58h
var_52		= word ptr -52h
var_50		= dword	ptr -50h
var_40		= dword	ptr -40h
var_3C		= dword	ptr -3Ch
var_38		= byte ptr -38h
var_2C		= dword	ptr -2Ch
var_20		= dword	ptr -20h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= word ptr  14h
arg_14		= dword	ptr  18h

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 7Ch
		mov	eax, [esp+8Ch+arg_0]
		mov	[esp+8Ch+var_60], eax
		mov	ebx, [esp+8Ch+arg_4]
		mov	esi, [esp+8Ch+arg_8]
		mov	eax, [esp+8Ch+arg_C]
		mov	[esp+8Ch+var_58], eax
		movzx	ebp, [esp+8Ch+arg_10]
		mov	eax, [esp+8Ch+arg_14]
		mov	[esp+8Ch+var_52], ax
		mov	eax, ds:__stack_chk_guard
		mov	[esp+8Ch+var_20], eax
		xor	eax, eax
		mov	[esp+8Ch+var_40], 0
		mov	[esp+8Ch+var_3C], 0
		mov	[esp+8Ch+var_88], 4
		mov	eax, [esp+8Ch+var_60]
		mov	[esp+8Ch+var_8C], eax
		call	flap_connection_findbygroup
		mov	[esp+8Ch+var_5C], eax
		test	eax, eax
		jz	loc_6888DC4C
		xor	eax, eax
		mov	ecx, 0FFFFFFFFh
		mov	edi, esi
		repne scasb
		not	ecx
		add	ecx, 0F5h
		mov	[esp+8Ch+var_88], ecx
		lea	edi, [esp+8Ch+var_38]
		mov	[esp+8Ch+var_8C], edi
		call	sub_68881748
		mov	[esp+8Ch+var_78], 0
		mov	[esp+8Ch+var_7C], 0
		mov	[esp+8Ch+var_80], 0
		mov	[esp+8Ch+var_84], 6
		mov	[esp+8Ch+var_88], 4
		mov	eax, [esp+8Ch+var_60]
		mov	[esp+8Ch+var_8C], eax
		call	aim_cachesnac
		mov	[esp+8Ch+var_50], eax
		mov	[esp+8Ch+var_8C], esi
		mov	ecx, 2
		mov	edx, ebx
		mov	eax, edi
		call	sub_6888B308
		mov	[esp+8Ch+var_88], 3
		lea	edx, [esp+8Ch+var_40]
		mov	[esp+8Ch+var_8C], edx
		mov	[esp+8Ch+var_64], edx
		call	aim_tlvlist_add_noval
		mov	[esp+8Ch+var_88], 80h
		lea	esi, [esp+8Ch+var_2C]
		mov	[esp+8Ch+var_8C], esi
		call	sub_68881748
		mov	[esp+8Ch+var_88], 0
		mov	[esp+8Ch+var_8C], esi
		call	sub_68881E0C
		mov	[esp+8Ch+var_84], 8
		mov	[esp+8Ch+var_88], ebx
		mov	[esp+8Ch+var_8C], esi
		call	sub_688820A0
		mov	[esp+8Ch+var_88], 4
		mov	[esp+8Ch+var_84], 0
		mov	[esp+8Ch+var_8C], esi
		call	sub_688918E0
		mov	eax, [esp+8Ch+var_58]
		mov	[esp+8Ch+var_80], eax
		mov	[esp+8Ch+var_84], 4
		mov	[esp+8Ch+var_88], 2
		lea	ebx, [esp+8Ch+var_3C]
		mov	[esp+8Ch+var_8C], ebx
		call	aim_tlvlist_add_raw
		mov	eax, [esp+8Ch+var_58]
		mov	[esp+8Ch+var_80], eax
		mov	[esp+8Ch+var_84], 4
		mov	[esp+8Ch+var_88], 3
		mov	[esp+8Ch+var_8C], ebx
		call	aim_tlvlist_add_raw
		mov	[esp+8Ch+var_84], ebp
		mov	[esp+8Ch+var_88], 5
		mov	[esp+8Ch+var_8C], ebx
		call	aim_tlvlist_add_16
		movzx	eax, [esp+8Ch+var_52]
		mov	[esp+8Ch+var_84], eax
		mov	[esp+8Ch+var_88], 0Ah
		mov	[esp+8Ch+var_8C], ebx
		call	aim_tlvlist_add_16
		mov	[esp+8Ch+var_88], 0Fh
		mov	[esp+8Ch+var_8C], ebx
		call	aim_tlvlist_add_noval
		mov	[esp+8Ch+var_88], ebx
		mov	[esp+8Ch+var_8C], esi
		call	aim_tlvlist_write
		mov	ebx, [esp+8Ch+var_2C]
		mov	[esp+8Ch+var_8C], esi
		call	sub_68881848
		mov	[esp+8Ch+var_80], ebx
		and	eax, 0FFFFh
		mov	[esp+8Ch+var_84], eax
		mov	[esp+8Ch+var_88], 5
		mov	edx, [esp+8Ch+var_64]
		mov	[esp+8Ch+var_8C], edx
		call	aim_tlvlist_add_raw
		mov	[esp+8Ch+var_8C], esi
		call	sub_688817E4
		mov	edx, [esp+8Ch+var_64]
		mov	[esp+8Ch+var_88], edx
		mov	[esp+8Ch+var_8C], edi
		call	aim_tlvlist_write
		mov	eax, [esp+8Ch+var_3C]
		mov	[esp+8Ch+var_8C], eax
		call	aim_tlvlist_free
		mov	eax, [esp+8Ch+var_40]
		mov	[esp+8Ch+var_8C], eax
		call	aim_tlvlist_free
		mov	[esp+8Ch+var_78], edi
		mov	eax, [esp+8Ch+var_50]
		mov	[esp+8Ch+var_7C], eax
		mov	[esp+8Ch+var_80], 6
		mov	[esp+8Ch+var_84], 4
		mov	eax, [esp+8Ch+var_5C]
		mov	[esp+8Ch+var_88], eax
		mov	eax, [esp+8Ch+var_60]
		mov	[esp+8Ch+var_8C], eax
		call	flap_connection_send_snac
		mov	[esp+8Ch+var_8C], edi
		call	sub_688817E4

loc_6888DC4C:				; CODE XREF: aim_im_sendch2_odc_requestdirect+74j
		mov	eax, [esp+8Ch+var_20]
		xor	eax, ds:__stack_chk_guard
		jnz	short loc_6888DC60
		add	esp, 7Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_6888DC60:				; CODE XREF: aim_im_sendch2_odc_requestdirect+27Aj
		call	__stack_chk_fail
aim_im_sendch2_odc_requestdirect endp

; ---------------------------------------------------------------------------
		align 4
; Exported entry  49. aim_im_sendch2_odc_requestproxy

; =============== S U B	R O U T	I N E =======================================


		public aim_im_sendch2_odc_requestproxy
aim_im_sendch2_odc_requestproxy	proc near ; CODE XREF: sub_688A795C+4A6p

var_8C		= dword	ptr -8Ch
var_88		= dword	ptr -88h
var_84		= dword	ptr -84h
var_80		= dword	ptr -80h
var_7C		= dword	ptr -7Ch
var_78		= dword	ptr -78h
var_60		= dword	ptr -60h
var_5C		= dword	ptr -5Ch
var_58		= dword	ptr -58h
var_54		= dword	ptr -54h
var_50		= dword	ptr -50h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_3C		= byte ptr -3Ch
var_30		= dword	ptr -30h
var_24		= byte ptr -24h
var_23		= byte ptr -23h
var_22		= byte ptr -22h
var_21		= byte ptr -21h
var_20		= dword	ptr -20h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 7Ch
		mov	eax, [esp+8Ch+arg_0]
		mov	[esp+8Ch+var_5C], eax
		mov	esi, [esp+8Ch+arg_4]
		mov	ebp, [esp+8Ch+arg_8]
		mov	ebx, [esp+8Ch+arg_C]
		mov	eax, [esp+8Ch+arg_10]
		mov	word ptr [esp+8Ch+var_54], ax
		mov	eax, [esp+8Ch+arg_14]
		mov	word ptr [esp+8Ch+var_54+2], ax
		mov	eax, ds:__stack_chk_guard
		mov	[esp+8Ch+var_20], eax
		xor	eax, eax
		mov	[esp+8Ch+var_44], 0
		mov	[esp+8Ch+var_40], 0
		mov	[esp+8Ch+var_88], 4
		mov	eax, [esp+8Ch+var_5C]
		mov	[esp+8Ch+var_8C], eax
		call	flap_connection_findbygroup
		mov	[esp+8Ch+var_58], eax
		test	eax, eax
		jz	loc_6888DF45
		xor	eax, eax
		mov	ecx, 0FFFFFFFFh
		mov	edi, ebp
		repne scasb
		not	ecx
		add	ecx, 0F5h
		mov	[esp+8Ch+var_88], ecx
		lea	edi, [esp+8Ch+var_3C]
		mov	[esp+8Ch+var_8C], edi
		call	sub_68881748
		mov	[esp+8Ch+var_78], 0
		mov	[esp+8Ch+var_7C], 0
		mov	[esp+8Ch+var_80], 0
		mov	[esp+8Ch+var_84], 6
		mov	[esp+8Ch+var_88], 4
		mov	eax, [esp+8Ch+var_5C]
		mov	[esp+8Ch+var_8C], eax
		call	aim_cachesnac
		mov	[esp+8Ch+var_50], eax
		mov	[esp+8Ch+var_8C], ebp
		mov	ecx, 2
		mov	edx, esi
		mov	eax, edi
		call	sub_6888B308
		mov	[esp+8Ch+var_88], 3
		lea	edx, [esp+8Ch+var_44]
		mov	[esp+8Ch+var_8C], edx
		mov	[esp+8Ch+var_60], edx
		call	aim_tlvlist_add_noval
		mov	[esp+8Ch+var_88], 80h
		lea	ebp, [esp+8Ch+var_30]
		mov	[esp+8Ch+var_8C], ebp
		call	sub_68881748
		mov	[esp+8Ch+var_88], 0
		mov	[esp+8Ch+var_8C], ebp
		call	sub_68881E0C
		mov	[esp+8Ch+var_84], 8
		mov	[esp+8Ch+var_88], esi
		mov	[esp+8Ch+var_8C], ebp
		call	sub_688820A0
		mov	[esp+8Ch+var_88], 4
		mov	[esp+8Ch+var_84], 0
		mov	[esp+8Ch+var_8C], ebp
		call	sub_688918E0
		mov	[esp+8Ch+var_80], ebx
		mov	[esp+8Ch+var_84], 4
		mov	[esp+8Ch+var_88], 2
		lea	esi, [esp+8Ch+var_40]
		mov	[esp+8Ch+var_8C], esi
		call	aim_tlvlist_add_raw
		mov	[esp+8Ch+var_80], ebx
		mov	[esp+8Ch+var_84], 4
		mov	[esp+8Ch+var_88], 3
		mov	[esp+8Ch+var_8C], esi
		call	aim_tlvlist_add_raw
		movzx	eax, word ptr [esp+8Ch+var_54]
		mov	[esp+8Ch+var_84], eax
		mov	[esp+8Ch+var_88], 5
		mov	[esp+8Ch+var_8C], esi
		call	aim_tlvlist_add_16
		movzx	eax, word ptr [esp+8Ch+var_54+2]
		mov	[esp+8Ch+var_84], eax
		mov	[esp+8Ch+var_88], 0Ah
		mov	[esp+8Ch+var_8C], esi
		call	aim_tlvlist_add_16
		mov	[esp+8Ch+var_88], 0Fh
		mov	[esp+8Ch+var_8C], esi
		call	aim_tlvlist_add_noval
		mov	[esp+8Ch+var_88], 10h
		mov	[esp+8Ch+var_8C], esi
		call	aim_tlvlist_add_noval
		mov	al, [ebx]
		not	eax
		mov	[esp+8Ch+var_24], al
		mov	al, [ebx+1]
		not	eax
		mov	[esp+8Ch+var_23], al
		mov	al, [ebx+2]
		not	eax
		mov	[esp+8Ch+var_22], al
		mov	al, [ebx+3]
		not	eax
		mov	[esp+8Ch+var_21], al
		lea	eax, [esp+8Ch+var_24]
		mov	[esp+8Ch+var_80], eax
		mov	[esp+8Ch+var_84], 4
		mov	[esp+8Ch+var_88], 16h
		mov	[esp+8Ch+var_8C], esi
		call	aim_tlvlist_add_raw
		mov	eax, [esp+8Ch+var_54]
		not	eax
		movzx	eax, ax
		mov	[esp+8Ch+var_84], eax
		mov	[esp+8Ch+var_88], 17h
		mov	[esp+8Ch+var_8C], esi
		call	aim_tlvlist_add_16
		mov	[esp+8Ch+var_88], esi
		mov	[esp+8Ch+var_8C], ebp
		call	aim_tlvlist_write
		mov	ebx, [esp+8Ch+var_30]
		mov	[esp+8Ch+var_8C], ebp
		call	sub_68881848
		mov	[esp+8Ch+var_80], ebx
		and	eax, 0FFFFh
		mov	[esp+8Ch+var_84], eax
		mov	[esp+8Ch+var_88], 5
		mov	edx, [esp+8Ch+var_60]
		mov	[esp+8Ch+var_8C], edx
		call	aim_tlvlist_add_raw
		mov	[esp+8Ch+var_8C], ebp
		call	sub_688817E4
		mov	edx, [esp+8Ch+var_60]
		mov	[esp+8Ch+var_88], edx
		mov	[esp+8Ch+var_8C], edi
		call	aim_tlvlist_write
		mov	eax, [esp+8Ch+var_40]
		mov	[esp+8Ch+var_8C], eax
		call	aim_tlvlist_free
		mov	eax, [esp+8Ch+var_44]
		mov	[esp+8Ch+var_8C], eax
		call	aim_tlvlist_free
		mov	[esp+8Ch+var_78], edi
		mov	eax, [esp+8Ch+var_50]
		mov	[esp+8Ch+var_7C], eax
		mov	[esp+8Ch+var_80], 6
		mov	[esp+8Ch+var_84], 4
		mov	eax, [esp+8Ch+var_58]
		mov	[esp+8Ch+var_88], eax
		mov	eax, [esp+8Ch+var_5C]
		mov	[esp+8Ch+var_8C], eax
		call	flap_connection_send_snac
		mov	[esp+8Ch+var_8C], edi
		call	sub_688817E4

loc_6888DF45:				; CODE XREF: aim_im_sendch2_odc_requestproxy+74j
		mov	eax, [esp+8Ch+var_20]
		xor	eax, ds:__stack_chk_guard
		jnz	short loc_6888DF59
		add	esp, 7Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_6888DF59:				; CODE XREF: aim_im_sendch2_odc_requestproxy+2E7j
		call	__stack_chk_fail
aim_im_sendch2_odc_requestproxy	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  50. aim_im_sendch2_sendfile_requestdirect

; =============== S U B	R O U T	I N E =======================================


		public aim_im_sendch2_sendfile_requestdirect
aim_im_sendch2_sendfile_requestdirect proc near	; CODE XREF: sub_688A6AF0+1B6p

var_8C		= dword	ptr -8Ch
var_88		= dword	ptr -88h
var_84		= dword	ptr -84h
var_80		= dword	ptr -80h
var_7C		= dword	ptr -7Ch
var_78		= dword	ptr -78h
var_64		= dword	ptr -64h
var_60		= dword	ptr -60h
var_5C		= dword	ptr -5Ch
var_58		= word ptr -58h
var_56		= word ptr -56h
var_54		= dword	ptr -54h
var_50		= dword	ptr -50h
var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_44		= byte ptr -44h
var_38		= dword	ptr -38h
var_2C		= dword	ptr -2Ch
var_28		= word ptr -28h
var_20		= dword	ptr -20h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= word ptr  14h
arg_14		= dword	ptr  18h
arg_18		= dword	ptr  1Ch
arg_1C		= dword	ptr  20h
arg_20		= dword	ptr  24h

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 7Ch
		mov	eax, [esp+8Ch+arg_0]
		mov	[esp+8Ch+var_64], eax
		mov	esi, [esp+8Ch+arg_4]
		mov	ebx, [esp+8Ch+arg_8]
		mov	edi, [esp+8Ch+arg_C]
		mov	eax, [esp+8Ch+arg_18]
		mov	[esp+8Ch+var_60], eax
		mov	eax, [esp+8Ch+arg_1C]
		mov	[esp+8Ch+var_54], eax
		movzx	ebp, [esp+8Ch+arg_10]
		mov	eax, [esp+8Ch+arg_14]
		mov	[esp+8Ch+var_56], ax
		mov	eax, [esp+8Ch+arg_20]
		mov	[esp+8Ch+var_58], ax
		mov	eax, ds:__stack_chk_guard
		mov	[esp+8Ch+var_20], eax
		xor	eax, eax
		mov	[esp+8Ch+var_4C], 0
		mov	[esp+8Ch+var_48], 0
		test	ebx, ebx
		jz	loc_6888E2B4
		test	edi, edi
		jz	loc_6888E2D4
		mov	[esp+8Ch+var_88], 4
		mov	eax, [esp+8Ch+var_64]
		mov	[esp+8Ch+var_8C], eax
		call	flap_connection_findbygroup
		mov	[esp+8Ch+var_5C], eax
		test	eax, eax
		jz	loc_6888E2A0
		mov	[esp+8Ch+var_88], 3F6h
		lea	eax, [esp+8Ch+var_44]
		mov	[esp+8Ch+var_8C], eax
		call	sub_68881748
		mov	[esp+8Ch+var_78], 0
		mov	[esp+8Ch+var_7C], 0
		mov	[esp+8Ch+var_80], 0
		mov	[esp+8Ch+var_84], 6
		mov	[esp+8Ch+var_88], 4
		mov	eax, [esp+8Ch+var_64]
		mov	[esp+8Ch+var_8C], eax
		call	aim_cachesnac
		mov	[esp+8Ch+var_50], eax
		mov	[esp+8Ch+var_8C], ebx
		mov	ecx, 2
		mov	edx, esi
		lea	eax, [esp+8Ch+var_44]
		call	sub_6888B308
		mov	[esp+8Ch+var_88], 3
		lea	eax, [esp+8Ch+var_4C]
		mov	[esp+8Ch+var_8C], eax
		call	aim_tlvlist_add_noval
		mov	[esp+8Ch+var_88], 200h
		lea	ebx, [esp+8Ch+var_38]
		mov	[esp+8Ch+var_8C], ebx
		call	sub_68881748
		mov	[esp+8Ch+var_88], 0
		mov	[esp+8Ch+var_8C], ebx
		call	sub_68881E0C
		mov	[esp+8Ch+var_84], 8
		mov	[esp+8Ch+var_88], esi
		mov	[esp+8Ch+var_8C], ebx
		call	sub_688820A0
		mov	[esp+8Ch+var_88], 20h
		mov	[esp+8Ch+var_84], 0
		mov	[esp+8Ch+var_8C], ebx
		call	sub_688918E0
		mov	[esp+8Ch+var_80], edi
		mov	[esp+8Ch+var_84], 4
		mov	[esp+8Ch+var_88], 2
		lea	esi, [esp+8Ch+var_48]
		mov	[esp+8Ch+var_8C], esi
		call	aim_tlvlist_add_raw
		mov	[esp+8Ch+var_80], edi
		mov	[esp+8Ch+var_84], 4
		mov	[esp+8Ch+var_88], 3
		mov	[esp+8Ch+var_8C], esi
		call	aim_tlvlist_add_raw
		mov	[esp+8Ch+var_84], ebp
		mov	[esp+8Ch+var_88], 5
		mov	[esp+8Ch+var_8C], esi
		call	aim_tlvlist_add_16
		movzx	eax, [esp+8Ch+var_56]
		mov	[esp+8Ch+var_84], eax
		mov	[esp+8Ch+var_88], 0Ah
		mov	[esp+8Ch+var_8C], esi
		call	aim_tlvlist_add_16
		mov	[esp+8Ch+var_88], 0Fh
		mov	[esp+8Ch+var_8C], esi
		call	aim_tlvlist_add_noval
		mov	ebp, [esp+8Ch+var_60]
		test	ebp, ebp
		jz	loc_6888E1F3
		xor	eax, eax
		mov	ecx, 0FFFFFFFFh
		mov	edi, [esp+8Ch+var_60]
		repne scasb
		not	ecx
		add	ecx, 8
		mov	[esp+8Ch+var_88], ecx
		lea	edi, [esp+8Ch+var_2C]
		mov	[esp+8Ch+var_8C], edi
		call	sub_68881748
		cmp	[esp+8Ch+var_58], 2
		sbb	eax, eax
		add	eax, 2
		mov	[esp+8Ch+var_88], eax
		mov	[esp+8Ch+var_8C], edi
		call	sub_68881E0C
		movzx	eax, [esp+8Ch+var_58]
		mov	[esp+8Ch+var_88], eax
		mov	[esp+8Ch+var_8C], edi
		call	sub_68881E0C
		mov	eax, [esp+8Ch+var_54]
		mov	[esp+8Ch+var_88], eax
		mov	[esp+8Ch+var_8C], edi
		call	sub_68881E8C
		mov	eax, [esp+8Ch+var_60]
		mov	[esp+8Ch+var_88], eax
		mov	[esp+8Ch+var_8C], edi
		call	sub_68882114
		mov	[esp+8Ch+var_88], 0
		mov	[esp+8Ch+var_8C], edi
		call	sub_68881DA4
		mov	eax, [esp+8Ch+var_2C]
		mov	[esp+8Ch+var_80], eax
		movzx	eax, [esp+8Ch+var_28]
		mov	[esp+8Ch+var_84], eax
		mov	[esp+8Ch+var_88], 2711h
		mov	[esp+8Ch+var_8C], esi
		call	aim_tlvlist_add_raw
		mov	[esp+8Ch+var_8C], edi
		call	sub_688817E4

loc_6888E1F3:				; CODE XREF: aim_im_sendch2_sendfile_requestdirect+1EAj
		mov	[esp+8Ch+var_88], esi
		mov	[esp+8Ch+var_8C], ebx
		call	aim_tlvlist_write
		mov	esi, [esp+8Ch+var_38]
		mov	[esp+8Ch+var_8C], ebx
		call	sub_68881848
		mov	[esp+8Ch+var_80], esi
		and	eax, 0FFFFh
		mov	[esp+8Ch+var_84], eax
		mov	[esp+8Ch+var_88], 5
		lea	eax, [esp+8Ch+var_4C]
		mov	[esp+8Ch+var_8C], eax
		call	aim_tlvlist_add_raw
		mov	[esp+8Ch+var_8C], ebx
		call	sub_688817E4
		lea	eax, [esp+8Ch+var_4C]
		mov	[esp+8Ch+var_88], eax
		lea	eax, [esp+8Ch+var_44]
		mov	[esp+8Ch+var_8C], eax
		call	aim_tlvlist_write
		mov	eax, [esp+8Ch+var_48]
		mov	[esp+8Ch+var_8C], eax
		call	aim_tlvlist_free
		mov	eax, [esp+8Ch+var_4C]
		mov	[esp+8Ch+var_8C], eax
		call	aim_tlvlist_free
		lea	eax, [esp+8Ch+var_44]
		mov	[esp+8Ch+var_78], eax
		mov	eax, [esp+8Ch+var_50]
		mov	[esp+8Ch+var_7C], eax
		mov	[esp+8Ch+var_80], 6
		mov	[esp+8Ch+var_84], 4
		mov	eax, [esp+8Ch+var_5C]
		mov	[esp+8Ch+var_88], eax
		mov	eax, [esp+8Ch+var_64]
		mov	[esp+8Ch+var_8C], eax
		call	flap_connection_send_snac
		lea	eax, [esp+8Ch+var_44]
		mov	[esp+8Ch+var_8C], eax
		call	sub_688817E4

loc_6888E2A0:				; CODE XREF: aim_im_sendch2_sendfile_requestdirect+A2j
					; aim_im_sendch2_sendfile_requestdirect+370j ...
		mov	eax, [esp+8Ch+var_20]
		xor	eax, ds:__stack_chk_guard
		jnz	short loc_6888E2F2
		add	esp, 7Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_6888E2B4:				; CODE XREF: aim_im_sendch2_sendfile_requestdirect+7Aj
		mov	[esp+8Ch+var_84], offset aBnNull ; "bn != NULL"
		mov	[esp+8Ch+var_88], offset aAim_im_sendch2 ; "aim_im_sendch2_sendfile_requestdirect"
		mov	[esp+8Ch+var_8C], 0
		call	g_return_if_fail_warning
		jmp	short loc_6888E2A0
; ---------------------------------------------------------------------------
		align 4

loc_6888E2D4:				; CODE XREF: aim_im_sendch2_sendfile_requestdirect+82j
		mov	[esp+8Ch+var_84], offset aIpNull ; "ip != NULL"
		mov	[esp+8Ch+var_88], offset aAim_im_sendch2 ; "aim_im_sendch2_sendfile_requestdirect"
		mov	[esp+8Ch+var_8C], 0
		call	g_return_if_fail_warning
		jmp	short loc_6888E2A0
; ---------------------------------------------------------------------------

loc_6888E2F2:				; CODE XREF: aim_im_sendch2_sendfile_requestdirect+34Aj
		call	__stack_chk_fail
aim_im_sendch2_sendfile_requestdirect endp

; ---------------------------------------------------------------------------
		align 4
; Exported entry  51. aim_im_sendch2_sendfile_requestproxy

; =============== S U B	R O U T	I N E =======================================


		public aim_im_sendch2_sendfile_requestproxy
aim_im_sendch2_sendfile_requestproxy proc near ; CODE XREF: sub_688A795C+38Ep

var_9C		= dword	ptr -9Ch
var_98		= dword	ptr -98h
var_94		= dword	ptr -94h
var_90		= dword	ptr -90h
var_8C		= dword	ptr -8Ch
var_88		= dword	ptr -88h
var_74		= dword	ptr -74h
var_70		= dword	ptr -70h
var_6C		= dword	ptr -6Ch
var_68		= dword	ptr -68h
var_64		= dword	ptr -64h
var_60		= dword	ptr -60h
var_50		= dword	ptr -50h
var_4C		= dword	ptr -4Ch
var_48		= byte ptr -48h
var_3C		= dword	ptr -3Ch
var_30		= dword	ptr -30h
var_2C		= word ptr -2Ch
var_24		= byte ptr -24h
var_23		= byte ptr -23h
var_22		= byte ptr -22h
var_21		= byte ptr -21h
var_20		= dword	ptr -20h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= word ptr  18h
arg_18		= dword	ptr  1Ch
arg_1C		= dword	ptr  20h
arg_20		= dword	ptr  24h

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 8Ch
		mov	eax, [esp+9Ch+arg_0]
		mov	[esp+9Ch+var_74], eax
		mov	ebx, [esp+9Ch+arg_4]
		mov	esi, [esp+9Ch+arg_8]
		mov	edi, [esp+9Ch+arg_C]
		mov	eax, [esp+9Ch+arg_18]
		mov	[esp+9Ch+var_70], eax
		mov	eax, [esp+9Ch+arg_1C]
		mov	[esp+9Ch+var_64], eax
		mov	eax, [esp+9Ch+arg_10]
		mov	word ptr [esp+9Ch+var_68], ax
		movzx	ebp, [esp+9Ch+arg_14]
		mov	eax, [esp+9Ch+arg_20]
		mov	word ptr [esp+9Ch+var_68+2], ax
		mov	eax, ds:__stack_chk_guard
		mov	[esp+9Ch+var_20], eax
		xor	eax, eax
		mov	[esp+9Ch+var_50], 0
		mov	[esp+9Ch+var_4C], 0
		mov	[esp+9Ch+var_98], 4
		mov	eax, [esp+9Ch+var_74]
		mov	[esp+9Ch+var_9C], eax
		call	flap_connection_findbygroup
		mov	[esp+9Ch+var_6C], eax
		test	eax, eax
		jz	loc_6888E69B
		mov	[esp+9Ch+var_98], 3F6h
		lea	eax, [esp+9Ch+var_48]
		mov	[esp+9Ch+var_9C], eax
		call	sub_68881748
		mov	[esp+9Ch+var_88], 0
		mov	[esp+9Ch+var_8C], 0
		mov	[esp+9Ch+var_90], 0
		mov	[esp+9Ch+var_94], 6
		mov	[esp+9Ch+var_98], 4
		mov	eax, [esp+9Ch+var_74]
		mov	[esp+9Ch+var_9C], eax
		call	aim_cachesnac
		mov	[esp+9Ch+var_60], eax
		mov	[esp+9Ch+var_9C], esi
		mov	ecx, 2
		mov	edx, ebx
		lea	eax, [esp+9Ch+var_48]
		call	sub_6888B308
		mov	[esp+9Ch+var_98], 3
		lea	eax, [esp+9Ch+var_50]
		mov	[esp+9Ch+var_9C], eax
		call	aim_tlvlist_add_noval
		mov	[esp+9Ch+var_98], 200h
		lea	esi, [esp+9Ch+var_3C]
		mov	[esp+9Ch+var_9C], esi
		call	sub_68881748
		mov	[esp+9Ch+var_98], 0
		mov	[esp+9Ch+var_9C], esi
		call	sub_68881E0C
		mov	[esp+9Ch+var_94], 8
		mov	[esp+9Ch+var_98], ebx
		mov	[esp+9Ch+var_9C], esi
		call	sub_688820A0
		mov	[esp+9Ch+var_98], 20h
		mov	[esp+9Ch+var_94], 0
		mov	[esp+9Ch+var_9C], esi
		call	sub_688918E0
		mov	[esp+9Ch+var_90], edi
		mov	[esp+9Ch+var_94], 4
		mov	[esp+9Ch+var_98], 2
		lea	ebx, [esp+9Ch+var_4C]
		mov	[esp+9Ch+var_9C], ebx
		call	aim_tlvlist_add_raw
		mov	[esp+9Ch+var_90], edi
		mov	[esp+9Ch+var_94], 4
		mov	[esp+9Ch+var_98], 3
		mov	[esp+9Ch+var_9C], ebx
		call	aim_tlvlist_add_raw
		movzx	eax, word ptr [esp+9Ch+var_68]
		mov	[esp+9Ch+var_94], eax
		mov	[esp+9Ch+var_98], 5
		mov	[esp+9Ch+var_9C], ebx
		call	aim_tlvlist_add_16
		mov	[esp+9Ch+var_94], ebp
		mov	[esp+9Ch+var_98], 0Ah
		mov	[esp+9Ch+var_9C], ebx
		call	aim_tlvlist_add_16
		mov	[esp+9Ch+var_98], 0Fh
		mov	[esp+9Ch+var_9C], ebx
		call	aim_tlvlist_add_noval
		mov	[esp+9Ch+var_98], 10h
		mov	[esp+9Ch+var_9C], ebx
		call	aim_tlvlist_add_noval
		mov	al, [edi]
		not	eax
		mov	[esp+9Ch+var_24], al
		mov	al, [edi+1]
		not	eax
		mov	[esp+9Ch+var_23], al
		mov	al, [edi+2]
		not	eax
		mov	[esp+9Ch+var_22], al
		mov	al, [edi+3]
		not	eax
		mov	[esp+9Ch+var_21], al
		lea	eax, [esp+9Ch+var_24]
		mov	[esp+9Ch+var_90], eax
		mov	[esp+9Ch+var_94], 4
		mov	[esp+9Ch+var_98], 16h
		mov	[esp+9Ch+var_9C], ebx
		call	aim_tlvlist_add_raw
		mov	eax, [esp+9Ch+var_68]
		not	eax
		movzx	eax, ax
		mov	[esp+9Ch+var_94], eax
		mov	[esp+9Ch+var_98], 17h
		mov	[esp+9Ch+var_9C], ebx
		call	aim_tlvlist_add_16
		mov	eax, [esp+9Ch+var_70]
		test	eax, eax
		jz	loc_6888E5EE
		xor	eax, eax
		mov	ecx, 0FFFFFFFFh
		mov	edi, [esp+9Ch+var_70]
		repne scasb
		not	ecx
		add	ecx, 8
		mov	[esp+9Ch+var_98], ecx
		lea	edi, [esp+9Ch+var_30]
		mov	[esp+9Ch+var_9C], edi
		call	sub_68881748
		cmp	word ptr [esp+9Ch+var_68+2], 2
		sbb	eax, eax
		add	eax, 2
		mov	[esp+9Ch+var_98], eax
		mov	[esp+9Ch+var_9C], edi
		call	sub_68881E0C
		movzx	eax, word ptr [esp+9Ch+var_68+2]
		mov	[esp+9Ch+var_98], eax
		mov	[esp+9Ch+var_9C], edi
		call	sub_68881E0C
		mov	eax, [esp+9Ch+var_64]
		mov	[esp+9Ch+var_98], eax
		mov	[esp+9Ch+var_9C], edi
		call	sub_68881E8C
		mov	eax, [esp+9Ch+var_70]
		mov	[esp+9Ch+var_98], eax
		mov	[esp+9Ch+var_9C], edi
		call	sub_68882114
		mov	[esp+9Ch+var_98], 0
		mov	[esp+9Ch+var_9C], edi
		call	sub_68881DA4
		mov	eax, [esp+9Ch+var_30]
		mov	[esp+9Ch+var_90], eax
		movzx	eax, [esp+9Ch+var_2C]
		mov	[esp+9Ch+var_94], eax
		mov	[esp+9Ch+var_98], 2711h
		mov	[esp+9Ch+var_9C], ebx
		call	aim_tlvlist_add_raw
		mov	[esp+9Ch+var_9C], edi
		call	sub_688817E4

loc_6888E5EE:				; CODE XREF: aim_im_sendch2_sendfile_requestproxy+24Dj
		mov	[esp+9Ch+var_98], ebx
		mov	[esp+9Ch+var_9C], esi
		call	aim_tlvlist_write
		mov	ebx, [esp+9Ch+var_3C]
		mov	[esp+9Ch+var_9C], esi
		call	sub_68881848
		mov	[esp+9Ch+var_90], ebx
		and	eax, 0FFFFh
		mov	[esp+9Ch+var_94], eax
		mov	[esp+9Ch+var_98], 5
		lea	eax, [esp+9Ch+var_50]
		mov	[esp+9Ch+var_9C], eax
		call	aim_tlvlist_add_raw
		mov	[esp+9Ch+var_9C], esi
		call	sub_688817E4
		lea	eax, [esp+9Ch+var_50]
		mov	[esp+9Ch+var_98], eax
		lea	eax, [esp+9Ch+var_48]
		mov	[esp+9Ch+var_9C], eax
		call	aim_tlvlist_write
		mov	eax, [esp+9Ch+var_4C]
		mov	[esp+9Ch+var_9C], eax
		call	aim_tlvlist_free
		mov	eax, [esp+9Ch+var_50]
		mov	[esp+9Ch+var_9C], eax
		call	aim_tlvlist_free
		lea	eax, [esp+9Ch+var_48]
		mov	[esp+9Ch+var_88], eax
		mov	eax, [esp+9Ch+var_60]
		mov	[esp+9Ch+var_8C], eax
		mov	[esp+9Ch+var_90], 6
		mov	[esp+9Ch+var_94], 4
		mov	eax, [esp+9Ch+var_6C]
		mov	[esp+9Ch+var_98], eax
		mov	eax, [esp+9Ch+var_74]
		mov	[esp+9Ch+var_9C], eax
		call	flap_connection_send_snac
		lea	eax, [esp+9Ch+var_48]
		mov	[esp+9Ch+var_9C], eax
		call	sub_688817E4

loc_6888E69B:				; CODE XREF: aim_im_sendch2_sendfile_requestproxy+95j
		mov	eax, [esp+9Ch+var_20]
		xor	eax, ds:__stack_chk_guard
		jnz	short loc_6888E6B2
		add	esp, 8Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_6888E6B2:				; CODE XREF: aim_im_sendch2_sendfile_requestproxy+3ADj
		call	__stack_chk_fail
aim_im_sendch2_sendfile_requestproxy endp

; ---------------------------------------------------------------------------
		align 4
; Exported entry  39. aim_im_denytransfer

; =============== S U B	R O U T	I N E =======================================


		public aim_im_denytransfer
aim_im_denytransfer proc near		; CODE XREF: sub_688A634C+2Ep

var_6C		= dword	ptr -6Ch
var_68		= dword	ptr -68h
var_64		= dword	ptr -64h
var_60		= dword	ptr -60h
var_5C		= dword	ptr -5Ch
var_58		= dword	ptr -58h
var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_30		= dword	ptr -30h
var_2C		= byte ptr -2Ch
var_20		= dword	ptr -20h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= word ptr  10h

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 5Ch
		mov	esi, [esp+6Ch+arg_0]
		mov	eax, [esp+6Ch+arg_4]
		mov	[esp+6Ch+var_48], eax
		mov	edx, [esp+6Ch+arg_8]
		mov	[esp+6Ch+var_44], edx
		movzx	ebp, [esp+6Ch+arg_C]
		mov	eax, ds:__stack_chk_guard
		mov	[esp+6Ch+var_20], eax
		xor	eax, eax
		mov	[esp+6Ch+var_30], 0
		test	esi, esi
		jz	loc_6888E83C
		mov	[esp+6Ch+var_68], 4
		mov	[esp+6Ch+var_6C], esi
		call	flap_connection_findbygroup
		mov	edx, eax
		test	eax, eax
		jz	loc_6888E83C
		mov	ecx, 0FFFFFFFFh
		mov	edi, [esp+6Ch+var_48]
		xor	eax, eax
		repne scasb
		not	ecx
		add	ecx, 10h
		mov	[esp+6Ch+var_68], ecx
		lea	ebx, [esp+6Ch+var_2C]
		mov	[esp+6Ch+var_6C], ebx
		mov	[esp+6Ch+var_4C], edx
		call	sub_68881748
		mov	[esp+6Ch+var_58], 0
		mov	[esp+6Ch+var_5C], 0
		mov	[esp+6Ch+var_60], 0
		mov	[esp+6Ch+var_64], 0Bh
		mov	[esp+6Ch+var_68], 4
		mov	[esp+6Ch+var_6C], esi
		call	aim_cachesnac
		mov	[esp+6Ch+var_40], eax
		mov	[esp+6Ch+var_64], 8
		mov	eax, [esp+6Ch+var_44]
		mov	[esp+6Ch+var_68], eax
		mov	[esp+6Ch+var_6C], ebx
		call	sub_688820A0
		mov	[esp+6Ch+var_68], 2
		mov	[esp+6Ch+var_6C], ebx
		call	sub_68881E0C
		mov	ecx, 0FFFFFFFFh
		mov	edi, [esp+6Ch+var_48]
		xor	eax, eax
		repne scasb
		not	ecx
		dec	ecx
		and	ecx, 0FFh
		mov	[esp+6Ch+var_68], ecx
		mov	[esp+6Ch+var_6C], ebx
		call	sub_68881DA4
		mov	eax, [esp+6Ch+var_48]
		mov	[esp+6Ch+var_68], eax
		mov	[esp+6Ch+var_6C], ebx
		call	sub_68882114
		mov	[esp+6Ch+var_64], ebp
		mov	[esp+6Ch+var_68], 3
		lea	ebp, [esp+6Ch+var_30]
		mov	[esp+6Ch+var_6C], ebp
		call	aim_tlvlist_add_16
		mov	[esp+6Ch+var_68], ebp
		mov	[esp+6Ch+var_6C], ebx
		call	aim_tlvlist_write
		mov	eax, [esp+6Ch+var_30]
		mov	[esp+6Ch+var_6C], eax
		call	aim_tlvlist_free
		mov	[esp+6Ch+var_58], ebx
		mov	eax, [esp+6Ch+var_40]
		mov	[esp+6Ch+var_5C], eax
		mov	[esp+6Ch+var_60], 0Bh
		mov	[esp+6Ch+var_64], 4
		mov	edx, [esp+6Ch+var_4C]
		mov	[esp+6Ch+var_68], edx
		mov	[esp+6Ch+var_6C], esi
		call	flap_connection_send_snac
		mov	[esp+6Ch+var_6C], ebx
		call	sub_688817E4
		xor	eax, eax

loc_6888E827:				; CODE XREF: aim_im_denytransfer+189j
		mov	edx, [esp+6Ch+var_20]
		xor	edx, ds:__stack_chk_guard
		jnz	short loc_6888E843
		add	esp, 5Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 4

loc_6888E83C:				; CODE XREF: aim_im_denytransfer+35j
					; aim_im_denytransfer+4Fj
		mov	eax, 0FFFFFFEAh
		jmp	short loc_6888E827
; ---------------------------------------------------------------------------

loc_6888E843:				; CODE XREF: aim_im_denytransfer+179j
		call	__stack_chk_fail
aim_im_denytransfer endp

; Exported entry  42. aim_im_send_icq_confirmation

; =============== S U B	R O U T	I N E =======================================


		public aim_im_send_icq_confirmation
aim_im_send_icq_confirmation proc near	; CODE XREF: sub_6889F454+1283p

var_5C		= dword	ptr -5Ch
var_58		= dword	ptr -58h
var_54		= dword	ptr -54h
var_50		= dword	ptr -50h
var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_30		= dword	ptr -30h
var_2C		= byte ptr -2Ch
var_20		= dword	ptr -20h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 4Ch
		mov	esi, [esp+5Ch+arg_0]
		mov	ebx, [esp+5Ch+arg_4]
		mov	edx, [esp+5Ch+arg_8]
		mov	eax, ds:__stack_chk_guard
		mov	[esp+5Ch+var_20], eax
		xor	eax, eax
		mov	[esp+5Ch+var_30], edx
		call	g_random_int
		mov	ebp, eax
		mov	[esp+5Ch+var_54], ebx
		mov	[esp+5Ch+var_58], offset aSendingMessage ; "Sending message ack	to %s\n"
		mov	[esp+5Ch+var_5C], offset aOscar_5 ; "oscar"
		call	purple_debug_misc
		xor	eax, eax
		mov	ecx, 0FFFFFFFFh
		mov	edi, ebx
		repne scasb
		not	ecx
		add	ecx, 42h
		mov	[esp+5Ch+var_58], ecx
		lea	edi, [esp+5Ch+var_2C]
		mov	[esp+5Ch+var_5C], edi
		call	sub_68881748
		mov	[esp+5Ch+var_5C], ebx
		mov	ecx, 2
		mov	edx, [esp+5Ch+var_30]
		mov	eax, edi
		call	sub_6888B308
		mov	[esp+5Ch+var_58], 3
		mov	[esp+5Ch+var_5C], edi
		call	sub_68881E0C
		mov	[esp+5Ch+var_58], 1Bh
		mov	[esp+5Ch+var_5C], edi
		call	sub_68881F8C
		mov	[esp+5Ch+var_58], 8
		mov	[esp+5Ch+var_5C], edi
		call	sub_68881DA4
		mov	[esp+5Ch+var_58], 2000h
		mov	[esp+5Ch+var_54], 0
		mov	[esp+5Ch+var_5C], edi
		call	sub_688918E0
		mov	[esp+5Ch+var_58], 3
		mov	[esp+5Ch+var_5C], edi
		call	sub_68881E8C
		mov	[esp+5Ch+var_58], 4
		mov	[esp+5Ch+var_5C], edi
		call	sub_68881E8C
		and	ebp, 0FFFFh
		mov	[esp+5Ch+var_58], ebp
		mov	[esp+5Ch+var_5C], edi
		call	sub_68881E0C
		mov	[esp+5Ch+var_58], 0Eh
		mov	[esp+5Ch+var_5C], edi
		call	sub_68881F8C
		mov	[esp+5Ch+var_58], ebp
		mov	[esp+5Ch+var_5C], edi
		call	sub_68881E0C
		mov	[esp+5Ch+var_58], 0
		mov	[esp+5Ch+var_5C], edi
		call	sub_68881E8C
		mov	[esp+5Ch+var_58], 0
		mov	[esp+5Ch+var_5C], edi
		call	sub_68881E8C
		mov	[esp+5Ch+var_58], 0
		mov	[esp+5Ch+var_5C], edi
		call	sub_68881E8C
		mov	[esp+5Ch+var_58], 1
		mov	[esp+5Ch+var_5C], edi
		call	sub_68881DA4
		mov	[esp+5Ch+var_58], 0
		mov	[esp+5Ch+var_5C], edi
		call	sub_68881DA4
		mov	[esp+5Ch+var_58], 0
		mov	[esp+5Ch+var_5C], edi
		call	sub_68881E0C
		mov	[esp+5Ch+var_58], 100h
		mov	[esp+5Ch+var_5C], edi
		call	sub_68881E0C
		mov	[esp+5Ch+var_58], 1
		mov	[esp+5Ch+var_5C], edi
		call	sub_68881F8C
		mov	[esp+5Ch+var_58], 0
		mov	[esp+5Ch+var_5C], edi
		call	sub_68881DA4
		mov	[esp+5Ch+var_48], 0
		mov	[esp+5Ch+var_4C], 0
		mov	[esp+5Ch+var_50], 0
		mov	[esp+5Ch+var_54], 0Bh
		mov	[esp+5Ch+var_58], 4
		mov	[esp+5Ch+var_5C], esi
		call	aim_cachesnac
		mov	ebx, eax
		mov	[esp+5Ch+var_58], 4
		mov	[esp+5Ch+var_5C], esi
		call	flap_connection_findbygroup
		test	eax, eax
		jz	loc_6888EA6C
		mov	[esp+5Ch+var_48], edi
		mov	[esp+5Ch+var_4C], ebx
		mov	[esp+5Ch+var_50], 0Bh
		mov	[esp+5Ch+var_54], 4
		mov	[esp+5Ch+var_58], eax
		mov	[esp+5Ch+var_5C], esi
		call	flap_connection_send_snac

loc_6888EA50:				; CODE XREF: aim_im_send_icq_confirmation+250j
		mov	[esp+5Ch+var_5C], edi
		call	sub_688817E4
		mov	eax, [esp+5Ch+var_20]
		xor	eax, ds:__stack_chk_guard
		jnz	short loc_6888EA9A
		add	esp, 4Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_6888EA6C:				; CODE XREF: aim_im_send_icq_confirmation+1DEj
		mov	[esp+5Ch+var_4C], offset aConn ; "conn"
		mov	[esp+5Ch+var_50], offset aAim_im_send_ic ; "aim_im_send_icq_confirmation"
		mov	[esp+5Ch+var_54], 671h
		mov	[esp+5Ch+var_58], offset aFamily_icbm_c	; "family_icbm.c"
		mov	[esp+5Ch+var_5C], 0
		call	g_warn_message
		jmp	short loc_6888EA50
; ---------------------------------------------------------------------------

loc_6888EA9A:				; CODE XREF: aim_im_send_icq_confirmation+21Aj
		call	__stack_chk_fail
aim_im_send_icq_confirmation endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  40. aim_im_reqofflinemsgs

; =============== S U B	R O U T	I N E =======================================


		public aim_im_reqofflinemsgs
aim_im_reqofflinemsgs proc near		; CODE XREF: sub_6889DECC+1A6p
					; sub_688A46F4+462p

var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_10		= dword	ptr -10h
arg_0		= dword	ptr  4

		push	ebx
		sub	esp, 28h
		mov	ebx, [esp+2Ch+arg_0]
		mov	eax, ds:__stack_chk_guard
		mov	[esp+2Ch+var_10], eax
		xor	eax, eax
		test	ebx, ebx
		jz	short loc_6888EAFC
		mov	[esp+2Ch+var_28], 2
		mov	[esp+2Ch+var_2C], ebx
		call	flap_connection_findbygroup
		test	eax, eax
		jz	short loc_6888EAFC
		mov	[esp+2Ch+var_20], 10h
		mov	[esp+2Ch+var_24], 4
		mov	[esp+2Ch+var_28], eax
		mov	[esp+2Ch+var_2C], ebx
		call	aim_genericreq_n
		xor	eax, eax

loc_6888EAE9:				; CODE XREF: aim_im_reqofflinemsgs+61j
		mov	edx, [esp+2Ch+var_10]
		xor	edx, ds:__stack_chk_guard
		jnz	short loc_6888EB03
		add	esp, 28h
		pop	ebx
		retn
; ---------------------------------------------------------------------------
		align 4

loc_6888EAFC:				; CODE XREF: aim_im_reqofflinemsgs+15j
					; aim_im_reqofflinemsgs+29j
		mov	eax, 0FFFFFFEAh
		jmp	short loc_6888EAE9
; ---------------------------------------------------------------------------

loc_6888EB03:				; CODE XREF: aim_im_reqofflinemsgs+53j
		call	__stack_chk_fail
aim_im_reqofflinemsgs endp

; Exported entry  52. aim_im_sendmtn

; =============== S U B	R O U T	I N E =======================================


		public aim_im_sendmtn
aim_im_sendmtn	proc near		; CODE XREF: oscar_send_typing+E5p
					; oscar_send_typing+115p ...

var_5C		= dword	ptr -5Ch
var_58		= dword	ptr -58h
var_54		= dword	ptr -54h
var_50		= dword	ptr -50h
var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_32		= word ptr -32h
var_30		= dword	ptr -30h
var_2C		= byte ptr -2Ch
var_20		= dword	ptr -20h
arg_0		= dword	ptr  4
arg_4		= word ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 4Ch
		mov	esi, [esp+5Ch+arg_0]
		mov	eax, [esp+5Ch+arg_8]
		mov	[esp+5Ch+var_38], eax
		movzx	ebp, [esp+5Ch+arg_4]
		mov	edx, [esp+5Ch+arg_C]
		mov	[esp+5Ch+var_32], dx
		mov	eax, ds:__stack_chk_guard
		mov	[esp+5Ch+var_20], eax
		xor	eax, eax
		test	esi, esi
		jz	loc_6888EC78
		mov	[esp+5Ch+var_58], 2
		mov	[esp+5Ch+var_5C], esi
		call	flap_connection_findbygroup
		mov	edx, eax
		test	eax, eax
		jz	loc_6888EC78
		mov	eax, [esp+5Ch+var_38]
		test	eax, eax
		jz	loc_6888EC78
		mov	ecx, 0FFFFFFFFh
		mov	edi, [esp+5Ch+var_38]
		xor	eax, eax
		repne scasb
		not	ecx
		add	ecx, 0Ch
		mov	[esp+5Ch+var_58], ecx
		lea	ebx, [esp+5Ch+var_2C]
		mov	[esp+5Ch+var_5C], ebx
		mov	[esp+5Ch+var_3C], edx
		call	sub_68881748
		mov	[esp+5Ch+var_48], 0
		mov	[esp+5Ch+var_4C], 0
		mov	[esp+5Ch+var_50], 0
		mov	[esp+5Ch+var_54], 14h
		mov	[esp+5Ch+var_58], 4
		mov	[esp+5Ch+var_5C], esi
		call	aim_cachesnac
		mov	[esp+5Ch+var_30], eax
		mov	[esp+5Ch+var_58], 0
		mov	[esp+5Ch+var_5C], ebx
		call	sub_68881E8C
		mov	[esp+5Ch+var_58], 0
		mov	[esp+5Ch+var_5C], ebx
		call	sub_68881E8C
		mov	[esp+5Ch+var_58], ebp
		mov	[esp+5Ch+var_5C], ebx
		call	sub_68881E0C
		mov	ecx, 0FFFFFFFFh
		mov	edi, [esp+5Ch+var_38]
		xor	eax, eax
		repne scasb
		not	ecx
		dec	ecx
		and	ecx, 0FFh
		mov	[esp+5Ch+var_58], ecx
		mov	[esp+5Ch+var_5C], ebx
		call	sub_68881DA4
		mov	eax, [esp+5Ch+var_38]
		mov	[esp+5Ch+var_58], eax
		mov	[esp+5Ch+var_5C], ebx
		call	sub_68882114
		movzx	eax, [esp+5Ch+var_32]
		mov	[esp+5Ch+var_58], eax
		mov	[esp+5Ch+var_5C], ebx
		call	sub_68881E0C
		mov	[esp+5Ch+var_48], ebx
		mov	eax, [esp+5Ch+var_30]
		mov	[esp+5Ch+var_4C], eax
		mov	[esp+5Ch+var_50], 14h
		mov	[esp+5Ch+var_54], 4
		mov	edx, [esp+5Ch+var_3C]
		mov	[esp+5Ch+var_58], edx
		mov	[esp+5Ch+var_5C], esi
		call	flap_connection_send_snac
		mov	[esp+5Ch+var_5C], ebx
		call	sub_688817E4
		xor	eax, eax

loc_6888EC61:				; CODE XREF: aim_im_sendmtn+175j
		mov	edx, [esp+5Ch+var_20]
		xor	edx, ds:__stack_chk_guard
		jnz	short loc_6888EC7F
		add	esp, 4Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 4

loc_6888EC78:				; CODE XREF: aim_im_sendmtn+2Ej
					; aim_im_sendmtn+48j ...
		mov	eax, 0FFFFFFEAh
		jmp	short loc_6888EC61
; ---------------------------------------------------------------------------

loc_6888EC7F:				; CODE XREF: aim_im_sendmtn+163j
		call	__stack_chk_fail
aim_im_sendmtn	endp

; Exported entry 204. icq_im_xstatus_request

; =============== S U B	R O U T	I N E =======================================


		public icq_im_xstatus_request
icq_im_xstatus_request proc near	; CODE XREF: sub_68886198+219p
					; .text:6889F164j

var_9C		= dword	ptr -9Ch
var_98		= dword	ptr -98h
var_94		= dword	ptr -94h
var_90		= dword	ptr -90h
var_8C		= dword	ptr -8Ch
var_88		= dword	ptr -88h
var_84		= dword	ptr -84h
var_78		= byte ptr -78h
var_74		= dword	ptr -74h
var_70		= dword	ptr -70h
var_6C		= dword	ptr -6Ch
var_68		= dword	ptr -68h
var_64		= dword	ptr -64h
var_60		= dword	ptr -60h
var_54		= dword	ptr -54h
var_50		= dword	ptr -50h
var_4C		= byte ptr -4Ch
var_40		= dword	ptr -40h
var_34		= dword	ptr -34h
var_28		= byte ptr -28h
var_20		= dword	ptr -20h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 8Ch
		mov	eax, [esp+9Ch+arg_0]
		mov	[esp+9Ch+var_74], eax
		mov	ebx, [esp+9Ch+arg_4]
		mov	edx, ds:__stack_chk_guard
		mov	[esp+9Ch+var_20], edx
		xor	edx, edx
		mov	[esp+9Ch+var_54], 0
		mov	[esp+9Ch+var_50], 0
		test	eax, eax
		jz	loc_6888EF98
		mov	[esp+9Ch+var_98], 4
		mov	ecx, [esp+9Ch+var_74]
		mov	[esp+9Ch+var_9C], ecx
		call	flap_connection_findbygroup
		mov	[esp+9Ch+var_64], eax
		test	eax, eax
		jz	loc_6888EF98
		test	ebx, ebx
		jz	loc_6888EF98
		mov	edx, [esp+9Ch+var_74]
		mov	eax, [edx+68h]
		mov	[esp+9Ch+var_9C], eax
		call	purple_connection_get_account
		mov	eax, [eax]
		mov	[esp+9Ch+var_98], eax
		mov	[esp+9Ch+var_9C], offset aNQueryLtQGtLtP ; "<N><QUERY>&lt;Q&gt;&lt;PluginID&gt;srvM"...
		call	g_strdup_printf
		mov	[esp+9Ch+var_68], eax
		mov	ebp, 0FFFFFFFFh
		xor	eax, eax
		mov	ecx, ebp
		mov	edi, [esp+9Ch+var_68]
		repne scasb
		not	ecx
		mov	[esp+9Ch+var_70], ecx
		dec	ecx
		mov	[esp+9Ch+var_6C], ecx
		lea	esi, [esp+9Ch+var_28]
		mov	[esp+9Ch+var_9C], esi
		mov	[esp+9Ch+var_78], al
		call	aim_icbm_makecookie
		mov	al, [esp+9Ch+var_78]
		mov	ecx, ebp
		mov	edi, ebx
		repne scasb
		not	ecx
		mov	edx, [esp+9Ch+var_6C]
		lea	eax, [edx+ecx+0D3h]
		mov	[esp+9Ch+var_98], eax
		lea	edi, [esp+9Ch+var_4C]
		mov	[esp+9Ch+var_9C], edi
		call	sub_68881748
		mov	[esp+9Ch+var_88], 0
		mov	[esp+9Ch+var_8C], 0
		mov	[esp+9Ch+var_90], 0
		mov	[esp+9Ch+var_94], 6
		mov	[esp+9Ch+var_98], 4
		mov	ecx, [esp+9Ch+var_74]
		mov	[esp+9Ch+var_9C], ecx
		call	aim_cachesnac
		mov	[esp+9Ch+var_60], eax
		mov	[esp+9Ch+var_9C], ebx
		mov	ecx, 2
		mov	edx, esi
		mov	eax, edi
		call	sub_6888B308
		mov	eax, [esp+9Ch+var_70]
		add	eax, 0B6h
		mov	[esp+9Ch+var_98], eax
		lea	ebx, [esp+9Ch+var_40]
		mov	[esp+9Ch+var_9C], ebx
		call	sub_68881748
		mov	[esp+9Ch+var_98], 0
		mov	[esp+9Ch+var_9C], ebx
		call	sub_68881E0C
		mov	[esp+9Ch+var_94], 8
		mov	[esp+9Ch+var_98], esi
		mov	[esp+9Ch+var_9C], ebx
		call	sub_688820A0
		mov	[esp+9Ch+var_94], 10h
		mov	[esp+9Ch+var_98], offset byte_688AFF63
		mov	[esp+9Ch+var_9C], ebx
		call	sub_688820A0
		mov	[esp+9Ch+var_94], 1
		mov	[esp+9Ch+var_98], 0Ah
		lea	ebp, [esp+9Ch+var_50]
		mov	[esp+9Ch+var_9C], ebp
		call	aim_tlvlist_add_16
		mov	[esp+9Ch+var_98], 0Fh
		mov	[esp+9Ch+var_9C], ebp
		call	aim_tlvlist_add_noval
		mov	eax, [esp+9Ch+var_70]
		add	eax, 8Eh
		mov	[esp+9Ch+var_98], eax
		lea	esi, [esp+9Ch+var_34]
		mov	[esp+9Ch+var_9C], esi
		call	sub_68881748
		mov	[esp+9Ch+var_94], 8Fh
		mov	[esp+9Ch+var_98], offset asc_688AFF80 ;	"\x1B\n"
		mov	[esp+9Ch+var_9C], esi
		call	sub_688820A0
		mov	eax, [esp+9Ch+var_6C]
		mov	[esp+9Ch+var_94], eax
		mov	edx, [esp+9Ch+var_68]
		mov	[esp+9Ch+var_98], edx
		mov	[esp+9Ch+var_9C], esi
		call	sub_688820A0
		mov	eax, [esp+9Ch+var_34]
		mov	[esp+9Ch+var_90], eax
		mov	eax, [esp+9Ch+var_6C]
		add	eax, 8Fh
		movzx	eax, ax
		mov	[esp+9Ch+var_94], eax
		mov	[esp+9Ch+var_98], 2711h
		mov	[esp+9Ch+var_9C], ebp
		call	aim_tlvlist_add_raw
		mov	[esp+9Ch+var_98], ebp
		mov	[esp+9Ch+var_9C], ebx
		call	aim_tlvlist_write
		mov	eax, [esp+9Ch+var_50]
		mov	[esp+9Ch+var_9C], eax
		call	aim_tlvlist_free
		mov	ebp, [esp+9Ch+var_40]
		mov	[esp+9Ch+var_9C], ebx
		call	sub_68881848
		mov	[esp+9Ch+var_90], ebp
		and	eax, 0FFFFh
		mov	[esp+9Ch+var_94], eax
		mov	[esp+9Ch+var_98], 5
		lea	ebp, [esp+9Ch+var_54]
		mov	[esp+9Ch+var_9C], ebp
		call	aim_tlvlist_add_raw
		mov	[esp+9Ch+var_98], 3
		mov	[esp+9Ch+var_9C], ebp
		call	aim_tlvlist_add_noval
		mov	[esp+9Ch+var_98], ebp
		mov	[esp+9Ch+var_9C], edi
		call	aim_tlvlist_write
		mov	[esp+9Ch+var_98], offset aXStatusRequest ; "X-Status Request\n"
		mov	[esp+9Ch+var_9C], offset aOscar_5 ; "oscar"
		call	purple_debug_misc
		mov	[esp+9Ch+var_84], 1
		mov	[esp+9Ch+var_88], edi
		mov	eax, [esp+9Ch+var_60]
		mov	[esp+9Ch+var_8C], eax
		mov	[esp+9Ch+var_90], 6
		mov	[esp+9Ch+var_94], 4
		mov	eax, [esp+9Ch+var_64]
		mov	[esp+9Ch+var_98], eax
		mov	edx, [esp+9Ch+var_74]
		mov	[esp+9Ch+var_9C], edx
		call	flap_connection_send_snac_with_priority
		mov	eax, [esp+9Ch+var_54]
		mov	[esp+9Ch+var_9C], eax
		call	aim_tlvlist_free
		mov	[esp+9Ch+var_9C], ebx
		call	sub_688817E4
		mov	[esp+9Ch+var_9C], esi
		call	sub_688817E4
		mov	[esp+9Ch+var_9C], edi
		call	sub_688817E4
		mov	ecx, [esp+9Ch+var_68]
		mov	[esp+9Ch+var_9C], ecx
		call	g_free
		xor	eax, eax

loc_6888EF7C:				; CODE XREF: icq_im_xstatus_request+319j
		mov	edx, [esp+9Ch+var_20]
		xor	edx, ds:__stack_chk_guard
		jnz	loc_6888EF9F
		add	esp, 8Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 4

loc_6888EF98:				; CODE XREF: icq_im_xstatus_request+3Aj
					; icq_im_xstatus_request+5Aj ...
		mov	eax, 0FFFFFFEAh
		jmp	short loc_6888EF7C
; ---------------------------------------------------------------------------

loc_6888EF9F:				; CODE XREF: icq_im_xstatus_request+302j
		call	__stack_chk_fail
icq_im_xstatus_request endp

; Exported entry 206. icq_relay_xstatus

; =============== S U B	R O U T	I N E =======================================


		public icq_relay_xstatus
icq_relay_xstatus proc near		; CODE XREF: sub_6889F454+608p

var_6C		= dword	ptr -6Ch
var_68		= dword	ptr -68h
var_64		= dword	ptr -64h
var_60		= dword	ptr -60h
var_5C		= dword	ptr -5Ch
var_58		= dword	ptr -58h
var_54		= dword	ptr -54h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= byte ptr -2Ch
var_20		= dword	ptr -20h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 5Ch
		mov	esi, [esp+6Ch+arg_0]
		mov	eax, [esp+6Ch+arg_4]
		mov	[esp+6Ch+var_40], eax
		mov	edx, [esp+6Ch+arg_8]
		mov	[esp+6Ch+var_30], edx
		mov	eax, ds:__stack_chk_guard
		mov	[esp+6Ch+var_20], eax
		xor	eax, eax
		test	esi, esi
		jz	loc_6888F1D0
		mov	[esp+6Ch+var_68], 2
		mov	[esp+6Ch+var_6C], esi
		call	flap_connection_findbygroup
		mov	[esp+6Ch+var_38], eax
		test	eax, eax
		jz	loc_6888F1D0
		mov	eax, [esp+6Ch+var_40]
		test	eax, eax
		jz	loc_6888F1D0
		mov	eax, [esi+68h]
		mov	[esp+6Ch+var_6C], eax
		call	purple_connection_get_account
		mov	ebx, eax
		test	eax, eax
		jz	loc_6888F1D0
		mov	eax, [eax+40h]
		mov	[esp+6Ch+var_6C], eax
		call	purple_presence_get_active_status
		mov	ebp, eax
		test	eax, eax
		jz	loc_6888F1D0
		mov	[esp+6Ch+var_6C], eax
		call	purple_status_get_name
		mov	edi, eax
		test	eax, eax
		jz	loc_6888F1D0
		mov	[esp+6Ch+var_68], offset aMessage ; "message"
		mov	[esp+6Ch+var_6C], ebp
		call	purple_status_get_attr_string
		test	eax, eax
		jz	loc_6888F1D0
		mov	[esp+6Ch+var_6C], eax
		mov	[esp+6Ch+var_44], eax
		call	purple_markup_strip_html
		mov	ebp, eax
		test	eax, eax
		jz	loc_6888F1D0
		mov	[esp+6Ch+var_60], eax
		mov	[esp+6Ch+var_64], edi
		mov	eax, [ebx]
		mov	[esp+6Ch+var_68], eax
		mov	[esp+6Ch+var_6C], offset aNrResLtRetEven ; "<NR><RES>&lt;ret event='OnRemoteNotific"...
		call	g_strdup_printf
		mov	[esp+6Ch+var_3C], eax
		mov	ebx, 0FFFFFFFFh
		xor	eax, eax
		mov	ecx, ebx
		mov	edi, [esp+6Ch+var_3C]
		repne scasb
		not	ecx
		dec	ecx
		mov	[esp+6Ch+var_34], ecx
		mov	[esp+6Ch+var_60], ebp
		mov	edx, [esp+6Ch+var_44]
		mov	[esp+6Ch+var_64], edx
		mov	[esp+6Ch+var_68], offset aXStatusAutorep ; "X-Status AutoReply:	%s, %s\n"
		mov	[esp+6Ch+var_6C], offset aOscar_5 ; "oscar"
		mov	byte ptr [esp+6Ch+var_44], al
		call	purple_debug_misc
		mov	al, byte ptr [esp+6Ch+var_44]
		mov	ecx, ebx
		mov	edi, [esp+6Ch+var_40]
		repne scasb
		not	ecx
		mov	edx, [esp+6Ch+var_34]
		lea	eax, [edx+ecx+0A5h]
		mov	[esp+6Ch+var_68], eax
		lea	ebx, [esp+6Ch+var_2C]
		mov	[esp+6Ch+var_6C], ebx
		call	sub_68881748
		mov	[esp+6Ch+var_58], 0
		mov	[esp+6Ch+var_5C], 0
		mov	[esp+6Ch+var_60], 0
		mov	[esp+6Ch+var_64], 0Bh
		mov	[esp+6Ch+var_68], 4
		mov	[esp+6Ch+var_6C], esi
		call	aim_cachesnac
		mov	edi, eax
		mov	eax, [esp+6Ch+var_40]
		mov	[esp+6Ch+var_6C], eax
		mov	ecx, 2
		mov	edx, [esp+6Ch+var_30]
		mov	eax, ebx
		call	sub_6888B308
		mov	[esp+6Ch+var_68], 3
		mov	[esp+6Ch+var_6C], ebx
		call	sub_68881E0C
		mov	[esp+6Ch+var_64], 8Fh
		mov	[esp+6Ch+var_68], offset asc_688B0020 ;	"\x1B\t"
		mov	[esp+6Ch+var_6C], ebx
		call	sub_688820A0
		mov	edx, [esp+6Ch+var_34]
		mov	[esp+6Ch+var_64], edx
		mov	eax, [esp+6Ch+var_3C]
		mov	[esp+6Ch+var_68], eax
		mov	[esp+6Ch+var_6C], ebx
		call	sub_688820A0
		mov	[esp+6Ch+var_54], 1
		mov	[esp+6Ch+var_58], ebx
		mov	[esp+6Ch+var_5C], edi
		mov	[esp+6Ch+var_60], 0Bh
		mov	[esp+6Ch+var_64], 4
		mov	eax, [esp+6Ch+var_38]
		mov	[esp+6Ch+var_68], eax
		mov	[esp+6Ch+var_6C], esi
		call	flap_connection_send_snac_with_priority
		mov	edx, [esp+6Ch+var_3C]
		mov	[esp+6Ch+var_6C], edx
		call	g_free
		mov	[esp+6Ch+var_6C], ebp
		call	g_free
		mov	[esp+6Ch+var_6C], ebx
		call	sub_688817E4
		xor	eax, eax

loc_6888F1BC:				; CODE XREF: icq_relay_xstatus+231j
		mov	edx, [esp+6Ch+var_20]
		xor	edx, ds:__stack_chk_guard
		jnz	short loc_6888F1D7
		add	esp, 5Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_6888F1D0:				; CODE XREF: icq_relay_xstatus+28j
					; icq_relay_xstatus+44j ...
		mov	eax, 0FFFFFFEAh
		jmp	short loc_6888F1BC
; ---------------------------------------------------------------------------

loc_6888F1D7:				; CODE XREF: icq_relay_xstatus+222j
		call	__stack_chk_fail
icq_relay_xstatus endp

; Exported entry 209. msg_modfirst

; =============== S U B	R O U T	I N E =======================================


		public msg_modfirst
msg_modfirst	proc near		; DATA XREF: oscar_data_new+C2o

Dest		= dword	ptr -2Ch
Source		= dword	ptr -28h
Count		= dword	ptr -24h
var_10		= dword	ptr -10h
arg_4		= dword	ptr  8

		push	ebx
		sub	esp, 28h
		mov	ebx, [esp+2Ch+arg_4]
		mov	eax, ds:__stack_chk_guard
		mov	[esp+2Ch+var_10], eax
		xor	eax, eax
		mov	word ptr [ebx],	4
		mov	word ptr [ebx+2], 1
		mov	word ptr [ebx+4], 110h
		mov	word ptr [ebx+6], 629h
		mov	word ptr [ebx+8], 0
		mov	[esp+2Ch+Count], 11h ; Count
		mov	[esp+2Ch+Source], offset aMessaging ; "messaging"
		lea	eax, [ebx+0Ah]
		mov	[esp+2Ch+Dest],	eax ; Dest
		call	strncpy
		mov	dword ptr [ebx+1Ch], offset sub_6888B528
		xor	eax, eax
		mov	edx, [esp+2Ch+var_10]
		xor	edx, ds:__stack_chk_guard
		jnz	short loc_6888F241
		add	esp, 28h
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_6888F241:				; CODE XREF: msg_modfirst+5Ej
		call	__stack_chk_fail
msg_modfirst	endp

; ---------------------------------------------------------------------------
		align 4

; =============== S U B	R O U T	I N E =======================================


sub_6888F248	proc near		; DATA XREF: sub_6888F450+1A3o
					; sub_6888F450+27Co

var_10		= dword	ptr -10h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		sub	esp, 1Ch
		mov	eax, ds:__stack_chk_guard
		mov	[esp+1Ch+var_10], eax
		xor	eax, eax
		mov	eax, [esp+1Ch+arg_0]
		movzx	eax, word ptr [eax]
		mov	edx, [esp+1Ch+arg_4]
		movzx	edx, word ptr [edx]
		sub	eax, edx
		mov	edx, [esp+1Ch+var_10]
		xor	edx, ds:__stack_chk_guard
		jnz	short loc_6888F276
		add	esp, 1Ch
		retn
; ---------------------------------------------------------------------------

loc_6888F276:				; CODE XREF: sub_6888F248+28j
		call	__stack_chk_fail
sub_6888F248	endp

; ---------------------------------------------------------------------------
		align 4

; =============== S U B	R O U T	I N E =======================================


sub_6888F27C	proc near		; CODE XREF: sub_6888F27C+19Ep
					; sub_6888F450+228p ...

var_2C		= dword	ptr -2Ch
var_20		= dword	ptr -20h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch

		push	esi
		push	ebx
		sub	esp, 24h
		mov	ebx, eax
		mov	eax, ds:__stack_chk_guard
		mov	[esp+2Ch+var_10], eax
		xor	eax, eax
		test	ebx, ebx
		jz	loc_6888F3E0
		mov	eax, [ebx+8]
		mov	[esp+2Ch+var_2C], eax
		call	g_free
		mov	eax, [ebx+0Ch]
		mov	[esp+2Ch+var_2C], eax
		call	g_free
		mov	eax, [ebx+10h]
		mov	[esp+2Ch+var_2C], eax
		call	g_free
		mov	eax, [ebx+14h]
		mov	[esp+2Ch+var_2C], eax
		call	g_free
		mov	eax, [ebx+18h]
		mov	[esp+2Ch+var_2C], eax
		call	g_free
		mov	eax, [ebx+1Ch]
		mov	[esp+2Ch+var_2C], eax
		call	g_free
		mov	eax, [ebx+20h]
		mov	[esp+2Ch+var_2C], eax
		call	g_free
		mov	eax, [ebx+24h]
		mov	[esp+2Ch+var_2C], eax
		call	g_free
		mov	eax, [ebx+28h]
		mov	[esp+2Ch+var_2C], eax
		call	g_free
		mov	eax, [ebx+2Ch]
		mov	[esp+2Ch+var_2C], eax
		call	g_free
		mov	eax, [ebx+30h]
		mov	[esp+2Ch+var_2C], eax
		call	g_free
		mov	eax, [ebx+3Ch]
		mov	[esp+2Ch+var_2C], eax
		call	g_free
		mov	eax, [ebx+7Ch]
		test	eax, eax
		jz	short loc_6888F343
		cmp	word ptr [ebx+78h], 0
		jz	short loc_6888F343
		xor	esi, esi
		xchg	ax, ax

loc_6888F32C:				; CODE XREF: sub_6888F27C+C5j
		mov	eax, [eax+esi*4]
		mov	[esp+2Ch+var_2C], eax
		call	g_free
		inc	esi
		movzx	eax, word ptr [ebx+78h]
		cmp	eax, esi
		mov	eax, [ebx+7Ch]
		jg	short loc_6888F32C

loc_6888F343:				; CODE XREF: sub_6888F27C+A3j
					; sub_6888F27C+AAj
		mov	[esp+2Ch+var_2C], eax
		call	g_free
		mov	eax, [ebx+48h]
		mov	[esp+2Ch+var_2C], eax
		call	g_free
		mov	eax, [ebx+4Ch]
		mov	[esp+2Ch+var_2C], eax
		call	g_free
		mov	eax, [ebx+50h]
		mov	[esp+2Ch+var_2C], eax
		call	g_free
		mov	eax, [ebx+54h]
		mov	[esp+2Ch+var_2C], eax
		call	g_free
		mov	eax, [ebx+58h]
		mov	[esp+2Ch+var_2C], eax
		call	g_free
		mov	eax, [ebx+5Ch]
		mov	[esp+2Ch+var_2C], eax
		call	g_free
		mov	eax, [ebx+64h]
		mov	[esp+2Ch+var_2C], eax
		call	g_free
		mov	eax, [ebx+68h]
		mov	[esp+2Ch+var_2C], eax
		call	g_free
		mov	eax, [ebx+6Ch]
		mov	[esp+2Ch+var_2C], eax
		call	g_free
		mov	eax, [ebx+70h]
		mov	[esp+2Ch+var_2C], eax
		call	g_free
		mov	eax, [ebx+74h]
		mov	[esp+2Ch+var_2C], eax
		call	g_free
		mov	eax, [ebx+88h]
		mov	[esp+2Ch+var_2C], eax
		call	g_free
		mov	eax, [ebx+90h]
		mov	[esp+2Ch+var_2C], eax
		call	g_free

loc_6888F3E0:				; CODE XREF: sub_6888F27C+14j
		mov	eax, [esp+2Ch+var_10]
		xor	eax, ds:__stack_chk_guard
		jnz	short loc_6888F3F2
		add	esp, 24h
		pop	ebx
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_6888F3F2:				; CODE XREF: sub_6888F27C+16Ej
		call	__stack_chk_fail
; ---------------------------------------------------------------------------
		align 4

loc_6888F3F8:				; DATA XREF: icq_modfirst+52o
		push	esi
		push	ebx
		sub	esp, 14h
		mov	esi, [esp+2Ch+var_C]
		mov	eax, ds:__stack_chk_guard
		mov	[esp+2Ch+var_20], eax
		xor	eax, eax
		mov	ebx, [esi+0B8h]
		test	ebx, ebx
		jz	short loc_6888F446
		xchg	ax, ax

loc_6888F418:				; CODE XREF: sub_6888F27C+1A8j
		mov	eax, [ebx]
		call	sub_6888F27C
		mov	ebx, [ebx+4]
		test	ebx, ebx
		jnz	short loc_6888F418
		mov	eax, [esi+0B8h]

loc_6888F42C:				; CODE XREF: sub_6888F27C+1CCj
		mov	edx, [esp+2Ch+var_20]
		xor	edx, ds:__stack_chk_guard
		jnz	short loc_6888F44A
		mov	[esp+2Ch+var_C], eax
		add	esp, 14h
		pop	ebx
		pop	esi
		jmp	g_slist_free
; ---------------------------------------------------------------------------

loc_6888F446:				; CODE XREF: sub_6888F27C+198j
		xor	eax, eax
		jmp	short loc_6888F42C
; ---------------------------------------------------------------------------

loc_6888F44A:				; CODE XREF: sub_6888F27C+1BAj
		call	__stack_chk_fail
sub_6888F27C	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6888F450	proc near		; DATA XREF: icq_modfirst+4Bo

Str		= dword	ptr -8Ch
var_88		= dword	ptr -88h
var_84		= dword	ptr -84h
var_80		= dword	ptr -80h
var_7C		= dword	ptr -7Ch
var_78		= dword	ptr -78h
var_74		= dword	ptr -74h
var_68		= dword	ptr -68h
var_64		= dword	ptr -64h
var_60		= dword	ptr -60h
var_5C		= dword	ptr -5Ch
var_58		= dword	ptr -58h
var_54		= dword	ptr -54h
var_50		= dword	ptr -50h
var_4A		= word ptr -4Ah
var_48		= byte ptr -48h
var_3C		= byte ptr -3Ch
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_20		= dword	ptr -20h
arg_0		= dword	ptr  4
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 7Ch
		mov	ebx, [esp+8Ch+arg_0]
		mov	esi, [esp+8Ch+arg_10]
		mov	ebp, [esp+8Ch+arg_14]
		mov	eax, ds:__stack_chk_guard
		mov	[esp+8Ch+var_20], eax
		xor	eax, eax
		mov	ax, [esi+2]
		cmp	ax, 1
		jz	loc_6888F580
		cmp	ax, 3
		jz	short loc_6888F4A8
		xor	eax, eax

loc_6888F48D:				; CODE XREF: sub_6888F450+12Aj
					; sub_6888F450+16Aj ...
		mov	edx, [esp+8Ch+var_20]
		xor	edx, ds:__stack_chk_guard
		jnz	loc_6888FEF6
		add	esp, 7Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 4

loc_6888F4A8:				; CODE XREF: sub_6888F450+39j
		mov	[esp+8Ch+Str], ebp
		call	aim_tlvlist_read
		mov	[esp+8Ch+var_60], eax
		test	eax, eax
		jz	loc_6888F5C0
		mov	[esp+8Ch+var_84], 1
		mov	[esp+8Ch+var_88], 1
		mov	eax, [esp+8Ch+var_60]
		mov	[esp+8Ch+Str], eax
		call	aim_tlv_gettlv
		test	eax, eax
		jz	loc_6888F5C0
		movzx	ecx, word ptr [eax+2]
		mov	[esp+8Ch+var_84], ecx
		mov	eax, [eax+4]
		mov	[esp+8Ch+var_88], eax
		lea	ebp, [esp+8Ch+var_48]
		mov	[esp+8Ch+Str], ebp
		call	sub_68881798
		mov	[esp+8Ch+Str], ebp
		call	sub_68881B44
		movzx	edi, ax
		mov	[esp+8Ch+Str], ebp
		call	sub_68881BB4
		mov	[esp+8Ch+Str], ebp
		mov	[esp+8Ch+var_64], eax
		call	sub_68881B44
		mov	word ptr [esp+8Ch+var_5C], ax
		mov	[esp+8Ch+Str], ebp
		call	sub_68881B44
		mov	[esp+8Ch+var_4A], ax
		movzx	eax, ax
		mov	[esp+8Ch+var_78], eax
		movzx	eax, word ptr [esp+8Ch+var_5C]
		mov	[esp+8Ch+var_7C], eax
		mov	ecx, [esp+8Ch+var_64]
		mov	[esp+8Ch+var_80], ecx
		mov	[esp+8Ch+var_84], edi
		mov	[esp+8Ch+var_88], offset aIcqResponseDBy ; "icq	response: %d bytes, %u,	0x%04x,	0x%"...
		mov	[esp+8Ch+Str], offset aOscar_6 ; "oscar"
		call	purple_debug_misc
		cmp	word ptr [esp+8Ch+var_5C], 7DAh
		jz	loc_6888F6B2

loc_6888F569:				; CODE XREF: sub_6888F450+2DEj
					; sub_6888F450+37Fj ...
		mov	eax, [esp+8Ch+var_60]
		mov	[esp+8Ch+Str], eax
		call	aim_tlvlist_free
		mov	eax, 1
		jmp	loc_6888F48D
; ---------------------------------------------------------------------------
		align 10h

loc_6888F580:				; CODE XREF: sub_6888F450+2Fj
		mov	eax, [esi+8]
		mov	[esp+8Ch+var_88], eax
		mov	[esp+8Ch+Str], ebx
		call	aim_remsnac
		mov	esi, eax
		test	eax, eax
		jz	short loc_6888F59C
		cmp	word ptr [eax+4], 15h
		jz	short loc_6888F5E8

loc_6888F59C:				; CODE XREF: sub_6888F450+143j
					; sub_6888F450+1A1j
		mov	[esp+8Ch+var_88], offset aIcqTheOriginal ; "icq: the original snac for the error pa"...

loc_6888F5A4:				; CODE XREF: sub_6888F450+488j
		mov	[esp+8Ch+Str], offset aOscar_6 ; "oscar"
		call	purple_debug_misc
		mov	[esp+8Ch+Str], esi
		call	g_free
		xor	eax, eax
		jmp	loc_6888F48D
; ---------------------------------------------------------------------------
		align 10h

loc_6888F5C0:				; CODE XREF: sub_6888F450+66j
					; sub_6888F450+8Aj
		mov	eax, [esp+8Ch+var_60]
		mov	[esp+8Ch+Str], eax
		call	aim_tlvlist_free
		mov	[esp+8Ch+var_88], offset aCorruptIcqResp ; "corrupt ICQ	response\n"
		mov	[esp+8Ch+Str], offset aOscar_6 ; "oscar"
		call	purple_debug_misc
		xor	eax, eax
		jmp	loc_6888F48D
; ---------------------------------------------------------------------------
		align 4

loc_6888F5E8:				; CODE XREF: sub_6888F450+14Aj
		mov	edx, [eax+0Ch]
		mov	[esp+8Ch+var_60], edx
		test	edx, edx
		jz	short loc_6888F59C
		mov	[esp+8Ch+var_84], offset sub_6888F248
		mov	[esp+8Ch+var_88], eax
		mov	eax, [ebx+0B8h]
		mov	[esp+8Ch+Str], eax
		call	g_slist_find_custom
		mov	edi, eax
		test	eax, eax
		jz	loc_6888F8D0
		mov	eax, [eax]
		mov	[esp+8Ch+var_5C], eax
		mov	[esp+8Ch+Str], ebp
		call	sub_688819F0
		movzx	ebp, ax
		mov	edx, [esp+8Ch+var_5C]
		mov	eax, [edx+4]
		mov	[esp+8Ch+var_88], eax
		mov	[esp+8Ch+Str], offset aU ; "%u"
		call	g_strdup_printf
		mov	edx, [esp+8Ch+var_60]
		movzx	ecx, word ptr [edx]
		cmp	cx, 4B2h
		jz	loc_6888F80C
		cmp	cx, 4BAh
		jz	loc_6888F7D4
		mov	[esp+8Ch+var_84], ecx
		mov	[esp+8Ch+var_88], offset aIcqGotAnErrorP ; "icq: got an	error packet with unknown r"...
		mov	[esp+8Ch+Str], offset aOscar_6 ; "oscar"
		call	purple_debug_misc

loc_6888F674:				; CODE XREF: sub_6888F450+390j
					; sub_6888F450+3B7j ...
		mov	eax, [esp+8Ch+var_5C]
		call	sub_6888F27C
		mov	[esp+8Ch+var_88], edi
		mov	eax, [ebx+0B8h]
		mov	[esp+8Ch+Str], eax
		call	g_slist_remove
		mov	[ebx+0B8h], eax
		mov	eax, [esi+0Ch]
		mov	[esp+8Ch+Str], eax
		call	g_free
		mov	[esp+8Ch+Str], esi
		call	g_free
		mov	eax, 1
		jmp	loc_6888F48D
; ---------------------------------------------------------------------------

loc_6888F6B2:				; CODE XREF: sub_6888F450+113j
		mov	[esp+8Ch+Str], ebp
		call	sub_68881B44
		mov	edi, eax
		mov	[esp+8Ch+var_88], 1
		mov	[esp+8Ch+Str], ebp
		call	sub_68881904
		mov	[esp+8Ch+var_84], offset sub_6888F248
		lea	eax, [esp+8Ch+var_4A]
		mov	[esp+8Ch+var_88], eax
		mov	eax, [ebx+0B8h]
		mov	[esp+8Ch+Str], eax
		call	g_slist_find_custom
		test	eax, eax
		jz	loc_6888FEC5

loc_6888F6F2:				; CODE XREF: sub_6888F450+AA1j
		mov	eax, [eax]
		mov	[esp+8Ch+var_5C], eax
		cmp	di, 0E6h
		jz	loc_6888FE05
		ja	loc_6888F821
		cmp	di, 0D2h
		jz	loc_6888FAAA
		cmp	di, 0DCh
		jz	loc_6888FD5A
		cmp	di, 0C8h
		jz	loc_6888FBFB

loc_6888F72A:				; CODE XREF: sub_6888F450+3E7j
					; sub_6888F450+49Dj
		test	byte ptr [esi+4], 1
		jnz	loc_6888F569
		cmp	di, 104h
		jz	short loc_6888F74B

loc_6888F73B:				; CODE XREF: sub_6888F450+474j
		mov	edx, [esp+8Ch+var_5C]
		mov	[esp+8Ch+var_88], edx
		mov	[esp+8Ch+Str], ebx
		call	oscar_user_info_display_icq

loc_6888F74B:				; CODE XREF: sub_6888F450+2E9j
					; sub_6888F450+655j
		mov	edx, [esp+8Ch+var_5C]
		mov	ecx, [edx+4]
		test	ecx, ecx
		jz	short loc_6888F7AA
		mov	edx, [edx+8]
		test	edx, edx
		jz	short loc_6888F7AA
		mov	ebp, [ebx+68h]
		mov	[esp+8Ch+Str], ebp
		call	purple_connection_get_account
		mov	esi, eax
		mov	edx, [esp+8Ch+var_5C]
		mov	eax, [edx+8]
		mov	[esp+8Ch+var_84], eax
		mov	[esp+8Ch+var_88], ebx
		mov	[esp+8Ch+Str], esi
		call	oscar_utf8_try_convert
		mov	edi, eax
		mov	edx, [esp+8Ch+var_5C]
		mov	eax, [edx+8Ch]
		test	eax, eax
		jnz	loc_6889051D
		test	edi, edi
		jz	short loc_6888F7A2
		cmp	byte ptr [edi],	0
		jnz	loc_6889054F

loc_6888F7A2:				; CODE XREF: sub_6888F450+347j
					; sub_6888F450+1150j ...
		mov	[esp+8Ch+Str], edi
		call	g_free

loc_6888F7AA:				; CODE XREF: sub_6888F450+304j
					; sub_6888F450+30Bj ...
		mov	eax, [esp+8Ch+var_5C]
		call	sub_6888F27C
		mov	edx, [esp+8Ch+var_5C]
		mov	[esp+8Ch+var_88], edx
		mov	eax, [ebx+0B8h]
		mov	[esp+8Ch+Str], eax
		call	g_slist_remove
		mov	[ebx+0B8h], eax
		jmp	loc_6888F569
; ---------------------------------------------------------------------------

loc_6888F7D4:				; CODE XREF: sub_6888F450+206j
		mov	ecx, [esp+8Ch+var_5C]
		mov	ebp, [ecx+8Ch]
		test	ebp, ebp
		jz	loc_6888F674
		mov	ecx, [ecx+90h]
		mov	[esp+8Ch+var_80], ecx
		mov	[esp+8Ch+var_84], 0
		mov	[esp+8Ch+var_88], eax
		mov	eax, [ebx+68h]
		mov	[esp+8Ch+Str], eax
		call	oscar_auth_recvrequest
		jmp	loc_6888F674
; ---------------------------------------------------------------------------

loc_6888F80C:				; CODE XREF: sub_6888F450+1FBj
		mov	[esp+8Ch+var_84], eax
		mov	[esp+8Ch+var_88], ebp
		mov	[esp+8Ch+Str], ebx
		call	oscar_user_info_display_error
		jmp	loc_6888F674
; ---------------------------------------------------------------------------

loc_6888F821:				; CODE XREF: sub_6888F450+2B3j
		cmp	di, 104h
		jz	loc_6888FA2A
		ja	loc_6888F8DD
		cmp	di, 0EBh
		jnz	loc_6888F72A
		mov	[esp+8Ch+Str], ebp
		call	sub_68881B44
		mov	edx, [esp+8Ch+var_5C]
		mov	[edx+78h], ax
		movzx	eax, ax
		shl	eax, 2
		mov	[esp+8Ch+Str], eax
		call	g_malloc0
		mov	edx, [esp+8Ch+var_5C]
		mov	[edx+7Ch], eax
		xor	edi, edi
		movzx	eax, word ptr [edx+78h]
		mov	[esp+8Ch+var_58], ebx
		mov	ebx, edx
		mov	[esp+8Ch+var_54], esi
		mov	esi, edi

loc_6888F874:				; CODE XREF: sub_6888F450+44Ej
		cmp	esi, eax
		jge	short loc_6888F8B8

loc_6888F878:				; CODE XREF: sub_6888F450+466j
		mov	eax, [ebx+7Ch]
		lea	edi, [eax+esi*4]
		mov	[esp+8Ch+Str], ebp
		call	sub_68881B44
		movzx	eax, ax
		mov	[esp+8Ch+var_88], eax
		mov	[esp+8Ch+Str], ebp
		call	sub_68881D24
		mov	[edi], eax
		inc	esi
		movzx	eax, word ptr [ebx+78h]
		cmp	esi, eax
		jz	short loc_6888F874
		mov	[esp+8Ch+var_88], 1
		mov	[esp+8Ch+Str], ebp
		call	sub_68881904
		movzx	eax, word ptr [ebx+78h]
		cmp	esi, eax
		jl	short loc_6888F878

loc_6888F8B8:				; CODE XREF: sub_6888F450+426j
		mov	ebx, [esp+8Ch+var_58]
		mov	esi, [esp+8Ch+var_54]

loc_6888F8C0:				; CODE XREF: sub_6888F450+5D5j
					; sub_6888F450+7A6j ...
		test	byte ptr [esi+4], 1
		jz	loc_6888F73B
		jmp	loc_6888F569
; ---------------------------------------------------------------------------
		align 10h

loc_6888F8D0:				; CODE XREF: sub_6888F450+1C1j
		mov	[esp+8Ch+var_88], offset aIcqTheRequestI ; "icq: the request info for the error	pac"...
		jmp	loc_6888F5A4
; ---------------------------------------------------------------------------

loc_6888F8DD:				; CODE XREF: sub_6888F450+3DCj
		cmp	di, 19Ah
		jz	loc_6888FE29
		cmp	di, 0FB4h
		jnz	loc_6888F72A
		mov	[esp+8Ch+var_88], 4
		mov	[esp+8Ch+Str], ebx
		call	flap_connection_findbygroup
		mov	[esp+8Ch+var_54], eax
		test	eax, eax
		jz	loc_688905C6
		mov	[esp+8Ch+var_88], 2
		mov	[esp+8Ch+Str], ebp
		call	sub_68881904
		mov	[esp+8Ch+var_88], 2Fh
		mov	[esp+8Ch+Str], ebp
		call	sub_68881904
		mov	[esp+8Ch+Str], ebp
		call	aim_tlvlist_read
		mov	edi, eax
		mov	[esp+8Ch+var_84], 1
		mov	[esp+8Ch+var_88], 32h
		mov	[esp+8Ch+Str], eax
		call	aim_tlv_gettlv
		test	eax, eax
		jz	loc_688905BF
		mov	[esp+8Ch+Str], eax
		call	aim_tlv_getvalue_as_string
		mov	ebp, eax

loc_6888F963:				; CODE XREF: sub_6888F450+1171j
		mov	[esp+8Ch+var_84], 1
		mov	[esp+8Ch+var_88], 226h
		mov	[esp+8Ch+Str], edi
		call	aim_tlv_gettlv
		test	eax, eax
		jz	loc_688905DF
		mov	[esp+8Ch+Str], eax
		call	aim_tlv_getvalue_as_string
		mov	[esp+8Ch+var_58], eax
		mov	[esp+8Ch+Str], edi
		call	aim_tlvlist_free
		test	ebp, ebp
		jz	loc_688905EF
		mov	edi, [esp+8Ch+var_58]
		test	edi, edi
		jz	loc_688905EF
		mov	eax, [esp+8Ch+var_58]
		cmp	byte ptr [eax],	0
		jnz	loc_6888FEFB
		mov	eax, [ebx+68h]
		mov	[esp+8Ch+Str], eax
		call	purple_connection_get_account
		mov	edi, eax
		mov	[esp+8Ch+var_88], ebp
		mov	[esp+8Ch+Str], eax
		call	purple_find_buddy
		mov	[esp+8Ch+Str], eax
		call	purple_buddy_get_presence
		mov	[esp+8Ch+Str], eax
		call	purple_presence_get_active_status
		mov	[esp+8Ch+Str], eax
		call	purple_status_get_id
		mov	[esp+8Ch+var_78], 0
		mov	[esp+8Ch+var_7C], 0
		mov	[esp+8Ch+var_80], offset aMessage_0 ; "message"
		mov	[esp+8Ch+var_84], eax
		mov	[esp+8Ch+var_88], ebp
		mov	[esp+8Ch+Str], edi
		call	purple_prpl_got_user_status
		mov	eax, [esp+8Ch+var_58]
		mov	[esp+8Ch+Str], eax
		call	g_free

loc_6888FA1D:				; CODE XREF: sub_6888F450+10C8j
		mov	[esp+8Ch+Str], ebp
		call	g_free
		jmp	loc_6888F8C0
; ---------------------------------------------------------------------------

loc_6888FA2A:				; CODE XREF: sub_6888F450+3D6j
		mov	[esp+8Ch+Str], ebp
		call	sub_68881B44
		movzx	eax, ax
		mov	[esp+8Ch+var_88], eax
		mov	[esp+8Ch+Str], ebp
		call	sub_68881D24
		mov	edx, [esp+8Ch+var_5C]
		mov	[edx+8], eax
		mov	[esp+8Ch+Str], ebp
		call	sub_68881B44
		movzx	eax, ax
		mov	[esp+8Ch+var_88], eax
		mov	[esp+8Ch+Str], ebp
		call	sub_68881D24
		mov	edx, [esp+8Ch+var_5C]
		mov	[edx+0Ch], eax
		mov	[esp+8Ch+Str], ebp
		call	sub_68881B44
		movzx	eax, ax
		mov	[esp+8Ch+var_88], eax
		mov	[esp+8Ch+Str], ebp
		call	sub_68881D24
		mov	edx, [esp+8Ch+var_5C]
		mov	[edx+10h], eax
		mov	[esp+8Ch+Str], ebp
		call	sub_68881B44
		movzx	eax, ax
		mov	[esp+8Ch+var_88], eax
		mov	[esp+8Ch+Str], ebp
		call	sub_68881904
		test	byte ptr [esi+4], 1
		jnz	loc_6888F569
		jmp	loc_6888F74B
; ---------------------------------------------------------------------------

loc_6888FAAA:				; CODE XREF: sub_6888F450+2BEj
		mov	[esp+8Ch+Str], ebp
		call	sub_68881B44
		movzx	eax, ax
		mov	[esp+8Ch+var_88], eax
		mov	[esp+8Ch+Str], ebp
		call	sub_68881D24
		mov	edx, [esp+8Ch+var_5C]
		mov	[edx+48h], eax
		mov	[esp+8Ch+Str], ebp
		call	sub_68881B44
		movzx	eax, ax
		mov	[esp+8Ch+var_88], eax
		mov	[esp+8Ch+Str], ebp
		call	sub_68881D24
		mov	edx, [esp+8Ch+var_5C]
		mov	[edx+4Ch], eax
		mov	[esp+8Ch+Str], ebp
		call	sub_68881B44
		movzx	eax, ax
		mov	[esp+8Ch+var_88], eax
		mov	[esp+8Ch+Str], ebp
		call	sub_68881D24
		mov	edx, [esp+8Ch+var_5C]
		mov	[edx+50h], eax
		mov	[esp+8Ch+Str], ebp
		call	sub_68881B44
		movzx	eax, ax
		mov	[esp+8Ch+var_88], eax
		mov	[esp+8Ch+Str], ebp
		call	sub_68881D24
		mov	edx, [esp+8Ch+var_5C]
		mov	[edx+54h], eax
		mov	[esp+8Ch+Str], ebp
		call	sub_68881B44
		movzx	eax, ax
		mov	[esp+8Ch+var_88], eax
		mov	[esp+8Ch+Str], ebp
		call	sub_68881D24
		mov	edx, [esp+8Ch+var_5C]
		mov	[edx+58h], eax
		mov	[esp+8Ch+Str], ebp
		call	sub_68881B44
		movzx	eax, ax
		mov	[esp+8Ch+var_88], eax
		mov	[esp+8Ch+Str], ebp
		call	sub_68881D24
		mov	edx, [esp+8Ch+var_5C]
		mov	[edx+5Ch], eax
		mov	[esp+8Ch+Str], ebp
		call	sub_68881B44
		mov	edx, [esp+8Ch+var_5C]
		mov	[edx+60h], ax
		mov	[esp+8Ch+Str], ebp
		call	sub_68881B44
		movzx	eax, ax
		mov	[esp+8Ch+var_88], eax
		mov	[esp+8Ch+Str], ebp
		call	sub_68881D24
		mov	edx, [esp+8Ch+var_5C]
		mov	[edx+64h], eax
		mov	[esp+8Ch+Str], ebp
		call	sub_68881B44
		movzx	eax, ax
		mov	[esp+8Ch+var_88], eax
		mov	[esp+8Ch+Str], ebp
		call	sub_68881D24
		mov	edx, [esp+8Ch+var_5C]
		mov	[edx+68h], eax
		mov	[esp+8Ch+Str], ebp
		call	sub_68881B44
		movzx	eax, ax
		mov	[esp+8Ch+var_88], eax
		mov	[esp+8Ch+Str], ebp
		call	sub_68881D24
		mov	edx, [esp+8Ch+var_5C]
		mov	[edx+6Ch], eax
		mov	[esp+8Ch+var_88], 2
		mov	[esp+8Ch+Str], ebp
		call	sub_68881904
		mov	[esp+8Ch+Str], ebp
		call	sub_68881B44
		movzx	eax, ax
		mov	[esp+8Ch+var_88], eax
		mov	[esp+8Ch+Str], ebp
		call	sub_68881D24
		mov	edx, [esp+8Ch+var_5C]
		mov	[edx+70h], eax
		jmp	loc_6888F8C0
; ---------------------------------------------------------------------------

loc_6888FBFB:				; CODE XREF: sub_6888F450+2D4j
		mov	[esp+8Ch+Str], ebp
		call	sub_68881B44
		movzx	eax, ax
		mov	[esp+8Ch+var_88], eax
		mov	[esp+8Ch+Str], ebp
		call	sub_68881D24
		mov	edx, [esp+8Ch+var_5C]
		mov	[edx+8], eax
		mov	[esp+8Ch+Str], ebp
		call	sub_68881B44
		movzx	eax, ax
		mov	[esp+8Ch+var_88], eax
		mov	[esp+8Ch+Str], ebp
		call	sub_68881D24
		mov	edx, [esp+8Ch+var_5C]
		mov	[edx+0Ch], eax
		mov	[esp+8Ch+Str], ebp
		call	sub_68881B44
		movzx	eax, ax
		mov	[esp+8Ch+var_88], eax
		mov	[esp+8Ch+Str], ebp
		call	sub_68881D24
		mov	edx, [esp+8Ch+var_5C]
		mov	[edx+10h], eax
		mov	[esp+8Ch+Str], ebp
		call	sub_68881B44
		movzx	eax, ax
		mov	[esp+8Ch+var_88], eax
		mov	[esp+8Ch+Str], ebp
		call	sub_68881D24
		mov	edx, [esp+8Ch+var_5C]
		mov	[edx+14h], eax
		mov	[esp+8Ch+Str], ebp
		call	sub_68881B44
		movzx	eax, ax
		mov	[esp+8Ch+var_88], eax
		mov	[esp+8Ch+Str], ebp
		call	sub_68881D24
		mov	edx, [esp+8Ch+var_5C]
		mov	[edx+18h], eax
		mov	[esp+8Ch+Str], ebp
		call	sub_68881B44
		movzx	eax, ax
		mov	[esp+8Ch+var_88], eax
		mov	[esp+8Ch+Str], ebp
		call	sub_68881D24
		mov	edx, [esp+8Ch+var_5C]
		mov	[edx+1Ch], eax
		mov	[esp+8Ch+Str], ebp
		call	sub_68881B44
		movzx	eax, ax
		mov	[esp+8Ch+var_88], eax
		mov	[esp+8Ch+Str], ebp
		call	sub_68881D24
		mov	edx, [esp+8Ch+var_5C]
		mov	[edx+20h], eax
		mov	[esp+8Ch+Str], ebp
		call	sub_68881B44
		movzx	eax, ax
		mov	[esp+8Ch+var_88], eax
		mov	[esp+8Ch+Str], ebp
		call	sub_68881D24
		mov	edx, [esp+8Ch+var_5C]
		mov	[edx+24h], eax
		mov	[esp+8Ch+Str], ebp
		call	sub_68881B44
		movzx	eax, ax
		mov	[esp+8Ch+var_88], eax
		mov	[esp+8Ch+Str], ebp
		call	sub_68881D24
		mov	edx, [esp+8Ch+var_5C]
		mov	[edx+28h], eax
		mov	[esp+8Ch+Str], ebp
		call	sub_68881B44
		movzx	eax, ax
		mov	[esp+8Ch+var_88], eax
		mov	[esp+8Ch+Str], ebp
		call	sub_68881D24
		mov	edx, [esp+8Ch+var_5C]
		mov	[edx+2Ch], eax
		mov	[esp+8Ch+Str], ebp
		call	sub_68881B44
		movzx	eax, ax
		mov	[esp+8Ch+var_88], eax
		mov	[esp+8Ch+Str], ebp
		call	sub_68881D24
		mov	edx, [esp+8Ch+var_5C]
		mov	[edx+30h], eax
		mov	[esp+8Ch+Str], ebp
		call	sub_68881B44
		mov	edx, [esp+8Ch+var_5C]
		mov	[edx+34h], ax
		jmp	loc_6888F8C0
; ---------------------------------------------------------------------------

loc_6888FD5A:				; CODE XREF: sub_6888F450+2C9j
		mov	[esp+8Ch+Str], ebp
		call	sub_68881AE4
		mov	edx, [esp+8Ch+var_5C]
		mov	[edx+36h], al
		mov	[esp+8Ch+Str], ebp
		call	sub_68881AE4
		mov	edx, [esp+8Ch+var_5C]
		mov	[edx+37h], al
		mov	[esp+8Ch+Str], ebp
		call	sub_68881AE4
		mov	edx, [esp+8Ch+var_5C]
		mov	[edx+38h], al
		mov	[esp+8Ch+Str], ebp
		call	sub_68881B44
		movzx	eax, ax
		mov	[esp+8Ch+var_88], eax
		mov	[esp+8Ch+Str], ebp
		call	sub_68881D24
		mov	edx, [esp+8Ch+var_5C]
		mov	[edx+3Ch], eax
		mov	[esp+8Ch+Str], ebp
		call	sub_68881B44
		mov	edx, [esp+8Ch+var_5C]
		mov	[edx+40h], ax
		mov	[esp+8Ch+Str], ebp
		call	sub_68881AE4
		mov	edx, [esp+8Ch+var_5C]
		mov	[edx+42h], al
		mov	[esp+8Ch+Str], ebp
		call	sub_68881AE4
		mov	edx, [esp+8Ch+var_5C]
		mov	[edx+43h], al
		mov	[esp+8Ch+Str], ebp
		call	sub_68881AE4
		mov	edx, [esp+8Ch+var_5C]
		mov	[edx+44h], al
		mov	[esp+8Ch+Str], ebp
		call	sub_68881AE4
		mov	edx, [esp+8Ch+var_5C]
		mov	[edx+45h], al
		mov	[esp+8Ch+Str], ebp
		call	sub_68881AE4
		mov	edx, [esp+8Ch+var_5C]
		mov	[edx+46h], al
		jmp	loc_6888F8C0
; ---------------------------------------------------------------------------

loc_6888FE05:				; CODE XREF: sub_6888F450+2ADj
		mov	[esp+8Ch+Str], ebp
		call	sub_68881B44
		movzx	eax, ax
		dec	eax
		mov	[esp+8Ch+var_88], eax
		mov	[esp+8Ch+Str], ebp
		call	sub_68881D24
		mov	edx, [esp+8Ch+var_5C]
		mov	[edx+74h], eax
		jmp	loc_6888F8C0
; ---------------------------------------------------------------------------

loc_6888FE29:				; CODE XREF: sub_6888F450+492j
		mov	[esp+8Ch+var_88], 2
		mov	[esp+8Ch+Str], ebp
		call	sub_68881904
		mov	[esp+8Ch+Str], ebp
		call	sub_68881BB4
		mov	edx, [esp+8Ch+var_5C]
		mov	[edx+4], eax
		mov	[esp+8Ch+Str], ebp
		call	sub_68881B44
		movzx	eax, ax
		mov	[esp+8Ch+var_88], eax
		mov	[esp+8Ch+Str], ebp
		call	sub_68881D24
		mov	edx, [esp+8Ch+var_5C]
		mov	[edx+8], eax
		mov	[esp+8Ch+Str], ebp
		call	sub_68881B44
		movzx	eax, ax
		mov	[esp+8Ch+var_88], eax
		mov	[esp+8Ch+Str], ebp
		call	sub_68881D24
		mov	edx, [esp+8Ch+var_5C]
		mov	[edx+0Ch], eax
		mov	[esp+8Ch+Str], ebp
		call	sub_68881B44
		movzx	eax, ax
		mov	[esp+8Ch+var_88], eax
		mov	[esp+8Ch+Str], ebp
		call	sub_68881D24
		mov	edx, [esp+8Ch+var_5C]
		mov	[edx+10h], eax
		mov	[esp+8Ch+Str], ebp
		call	sub_68881B44
		movzx	eax, ax
		mov	[esp+8Ch+var_88], eax
		mov	[esp+8Ch+Str], ebp
		call	sub_68881D24
		mov	edx, [esp+8Ch+var_5C]
		mov	[edx+14h], eax
		jmp	loc_6888F8C0
; ---------------------------------------------------------------------------

loc_6888FEC5:				; CODE XREF: sub_6888F450+29Cj
		mov	[esp+8Ch+Str], 94h
		call	g_malloc0
		mov	cx, [esp+8Ch+var_4A]
		mov	[eax], cx
		mov	[esp+8Ch+var_88], eax
		mov	eax, [ebx+0B8h]
		mov	[esp+8Ch+Str], eax
		call	g_slist_prepend
		mov	[ebx+0B8h], eax
		jmp	loc_6888F6F2
; ---------------------------------------------------------------------------

loc_6888FEF6:				; CODE XREF: sub_6888F450+47j
		call	__stack_chk_fail
; ---------------------------------------------------------------------------

loc_6888FEFB:				; CODE XREF: sub_6888F450+562j
		mov	[esp+8Ch+Str], 94h
		call	g_malloc0
		mov	[esp+8Ch+var_68], eax
		or	ecx, 0FFFFFFFFh
		mov	edi, ebp
		xor	eax, eax
		repne scasb
		not	ecx
		add	ecx, 0C8h
		mov	[esp+8Ch+var_88], ecx
		lea	edx, [esp+8Ch+var_3C]
		mov	[esp+8Ch+Str], edx
		call	sub_68881748
		mov	[esp+8Ch+var_78], 0
		mov	[esp+8Ch+var_7C], 0
		mov	[esp+8Ch+var_80], 0
		mov	[esp+8Ch+var_84], 6
		mov	[esp+8Ch+var_88], 4
		mov	[esp+8Ch+Str], ebx
		call	aim_cachesnac
		mov	[esp+8Ch+var_50], eax
		lea	edx, [esp+8Ch+var_30]
		mov	[esp+8Ch+Str], edx
		mov	[esp+8Ch+var_64], edx
		call	aim_icbm_makecookie
		mov	[esp+8Ch+var_84], 8
		mov	edx, [esp+8Ch+var_64]
		mov	[esp+8Ch+var_88], edx
		lea	ecx, [esp+8Ch+var_3C]
		mov	[esp+8Ch+Str], ecx
		call	sub_688820A0
		mov	[esp+8Ch+var_88], 2
		lea	eax, [esp+8Ch+var_3C]
		mov	[esp+8Ch+Str], eax
		call	sub_68881E0C
		or	ecx, 0FFFFFFFFh
		mov	edi, ebp
		xor	eax, eax
		repne scasb
		not	ecx
		lea	eax, [ecx-1]
		and	eax, 0FFh
		mov	[esp+8Ch+var_88], eax
		lea	ecx, [esp+8Ch+var_3C]
		mov	[esp+8Ch+Str], ecx
		call	sub_68881DA4
		mov	[esp+8Ch+var_88], ebp
		lea	eax, [esp+8Ch+var_3C]
		mov	[esp+8Ch+Str], eax
		call	sub_68882114
		mov	[esp+8Ch+var_88], 5
		lea	ecx, [esp+8Ch+var_3C]
		mov	[esp+8Ch+Str], ecx
		call	sub_68881E0C
		mov	[esp+8Ch+var_88], 0B2h
		lea	eax, [esp+8Ch+var_3C]
		mov	[esp+8Ch+Str], eax
		call	sub_68881E0C
		mov	[esp+8Ch+var_88], 0
		lea	ecx, [esp+8Ch+var_3C]
		mov	[esp+8Ch+Str], ecx
		call	sub_68881E0C
		mov	[esp+8Ch+var_84], 8
		mov	edx, [esp+8Ch+var_64]
		mov	[esp+8Ch+var_88], edx
		lea	eax, [esp+8Ch+var_3C]
		mov	[esp+8Ch+Str], eax
		call	sub_688820A0
		mov	[esp+8Ch+var_88], 9461349h
		lea	edx, [esp+8Ch+var_3C]
		mov	[esp+8Ch+Str], edx
		call	sub_68881E8C
		mov	[esp+8Ch+var_88], 4C7Fh
		lea	ecx, [esp+8Ch+var_3C]
		mov	[esp+8Ch+Str], ecx
		call	sub_68881E0C
		mov	[esp+8Ch+var_88], 11D1h
		lea	eax, [esp+8Ch+var_3C]
		mov	[esp+8Ch+Str], eax
		call	sub_68881E0C
		mov	[esp+8Ch+var_88], 82224445h
		lea	edx, [esp+8Ch+var_3C]
		mov	[esp+8Ch+Str], edx
		call	sub_68881E8C
		mov	[esp+8Ch+var_88], 53540000h
		lea	ecx, [esp+8Ch+var_3C]
		mov	[esp+8Ch+Str], ecx
		call	sub_68881E8C
		mov	[esp+8Ch+var_88], 0Ah
		lea	eax, [esp+8Ch+var_3C]
		mov	[esp+8Ch+Str], eax
		call	sub_68881E0C
		mov	[esp+8Ch+var_88], 2
		lea	edx, [esp+8Ch+var_3C]
		mov	[esp+8Ch+Str], edx
		call	sub_68881E0C
		mov	[esp+8Ch+var_88], 1
		lea	ecx, [esp+8Ch+var_3C]
		mov	[esp+8Ch+Str], ecx
		call	sub_68881E0C
		mov	[esp+8Ch+var_88], 0Fh
		lea	eax, [esp+8Ch+var_3C]
		mov	[esp+8Ch+Str], eax
		call	sub_68881E0C
		mov	[esp+8Ch+var_88], 0
		lea	edx, [esp+8Ch+var_3C]
		mov	[esp+8Ch+Str], edx
		call	sub_68881E0C
		mov	[esp+8Ch+var_88], 2711h
		lea	ecx, [esp+8Ch+var_3C]
		mov	[esp+8Ch+Str], ecx
		call	sub_68881E0C
		mov	[esp+8Ch+var_88], 8Ah
		lea	eax, [esp+8Ch+var_3C]
		mov	[esp+8Ch+Str], eax
		call	sub_68881E0C
		mov	[esp+8Ch+var_88], 1Bh
		lea	edx, [esp+8Ch+var_3C]
		mov	[esp+8Ch+Str], edx
		call	sub_68881F8C
		mov	[esp+8Ch+var_88], 9
		lea	ecx, [esp+8Ch+var_3C]
		mov	[esp+8Ch+Str], ecx
		call	sub_68881F8C
		mov	[esp+8Ch+var_88], 0
		lea	eax, [esp+8Ch+var_3C]
		mov	[esp+8Ch+Str], eax
		call	sub_68882008
		mov	[esp+8Ch+var_88], 0
		lea	edx, [esp+8Ch+var_3C]
		mov	[esp+8Ch+Str], edx
		call	sub_68882008
		mov	[esp+8Ch+var_88], 0
		lea	ecx, [esp+8Ch+var_3C]
		mov	[esp+8Ch+Str], ecx
		call	sub_68882008
		mov	[esp+8Ch+var_88], 0
		lea	eax, [esp+8Ch+var_3C]
		mov	[esp+8Ch+Str], eax
		call	sub_68882008
		mov	[esp+8Ch+var_88], 0
		lea	edx, [esp+8Ch+var_3C]
		mov	[esp+8Ch+Str], edx
		call	sub_68881F8C
		mov	[esp+8Ch+var_88], 0
		lea	ecx, [esp+8Ch+var_3C]
		mov	[esp+8Ch+Str], ecx
		call	sub_68882008
		mov	[esp+8Ch+var_88], 0
		lea	eax, [esp+8Ch+var_3C]
		mov	[esp+8Ch+Str], eax
		call	sub_68881DA4
		mov	[esp+8Ch+var_88], 64h
		lea	edx, [esp+8Ch+var_3C]
		mov	[esp+8Ch+Str], edx
		call	sub_68881F8C
		mov	[esp+8Ch+var_88], 0Eh
		lea	ecx, [esp+8Ch+var_3C]
		mov	[esp+8Ch+Str], ecx
		call	sub_68881F8C
		mov	[esp+8Ch+var_88], 64h
		lea	eax, [esp+8Ch+var_3C]
		mov	[esp+8Ch+Str], eax
		call	sub_68881F8C
		mov	[esp+8Ch+var_88], 0
		lea	edx, [esp+8Ch+var_3C]
		mov	[esp+8Ch+Str], edx
		call	sub_68882008
		mov	[esp+8Ch+var_88], 0
		lea	ecx, [esp+8Ch+var_3C]
		mov	[esp+8Ch+Str], ecx
		call	sub_68882008
		mov	[esp+8Ch+var_88], 0
		lea	eax, [esp+8Ch+var_3C]
		mov	[esp+8Ch+Str], eax
		call	sub_68882008
		mov	[esp+8Ch+var_88], 1Ah
		lea	edx, [esp+8Ch+var_3C]
		mov	[esp+8Ch+Str], edx
		call	sub_68881DA4
		mov	[esp+8Ch+var_88], 0
		lea	ecx, [esp+8Ch+var_3C]
		mov	[esp+8Ch+Str], ecx
		call	sub_68881DA4
		mov	[esp+8Ch+var_88], 0
		lea	eax, [esp+8Ch+var_3C]
		mov	[esp+8Ch+Str], eax
		call	sub_68881F8C
		mov	[esp+8Ch+var_88], 1
		lea	edx, [esp+8Ch+var_3C]
		mov	[esp+8Ch+Str], edx
		call	sub_68881F8C
		mov	[esp+8Ch+var_88], 0
		lea	ecx, [esp+8Ch+var_3C]
		mov	[esp+8Ch+Str], ecx
		call	sub_68881F8C
		mov	[esp+8Ch+var_88], 3Ah
		lea	eax, [esp+8Ch+var_3C]
		mov	[esp+8Ch+Str], eax
		call	sub_68881DA4
		mov	[esp+8Ch+var_88], 811A18h
		lea	edx, [esp+8Ch+var_3C]
		mov	[esp+8Ch+Str], edx
		call	sub_68881E8C
		mov	[esp+8Ch+var_88], 0BC0E6C18h
		lea	ecx, [esp+8Ch+var_3C]
		mov	[esp+8Ch+Str], ecx
		call	sub_68881E8C
		mov	[esp+8Ch+var_88], 47A5916Fh
		lea	eax, [esp+8Ch+var_3C]
		mov	[esp+8Ch+Str], eax
		call	sub_68881E8C
		mov	[esp+8Ch+var_88], 18DCC76Fh
		lea	edx, [esp+8Ch+var_3C]
		mov	[esp+8Ch+Str], edx
		call	sub_68881E8C
		mov	[esp+8Ch+var_88], 1A010013h
		lea	ecx, [esp+8Ch+var_3C]
		mov	[esp+8Ch+Str], ecx
		call	sub_68881E8C
		mov	[esp+8Ch+var_88], 41h
		lea	eax, [esp+8Ch+var_3C]
		mov	[esp+8Ch+Str], eax
		call	sub_68881E8C
		mov	[esp+8Ch+var_88], 77617920h
		lea	edx, [esp+8Ch+var_3C]
		mov	[esp+8Ch+Str], edx
		call	sub_68881E8C
		mov	[esp+8Ch+var_88], 53746174h
		lea	ecx, [esp+8Ch+var_3C]
		mov	[esp+8Ch+Str], ecx
		call	sub_68881E8C
		mov	[esp+8Ch+var_88], 7573204Dh
		lea	eax, [esp+8Ch+var_3C]
		mov	[esp+8Ch+Str], eax
		call	sub_68881E8C
		mov	[esp+8Ch+var_88], 65737361h
		lea	edx, [esp+8Ch+var_3C]
		mov	[esp+8Ch+Str], edx
		call	sub_68881E8C
		mov	[esp+8Ch+var_88], 67650100h
		lea	ecx, [esp+8Ch+var_3C]
		mov	[esp+8Ch+Str], ecx
		call	sub_68881E8C
		mov	[esp+8Ch+var_88], 0
		lea	eax, [esp+8Ch+var_3C]
		mov	[esp+8Ch+Str], eax
		call	sub_68881E8C
		mov	[esp+8Ch+var_88], 0
		lea	edx, [esp+8Ch+var_3C]
		mov	[esp+8Ch+Str], edx
		call	sub_68881E8C
		mov	[esp+8Ch+var_88], 0
		lea	ecx, [esp+8Ch+var_3C]
		mov	[esp+8Ch+Str], ecx
		call	sub_68881E8C
		mov	[esp+8Ch+var_88], 15h
		lea	eax, [esp+8Ch+var_3C]
		mov	[esp+8Ch+Str], eax
		call	sub_68881E8C
		mov	[esp+8Ch+var_88], 0
		lea	edx, [esp+8Ch+var_3C]
		mov	[esp+8Ch+Str], edx
		call	sub_68881E8C
		mov	[esp+8Ch+var_88], 0Dh
		lea	ecx, [esp+8Ch+var_3C]
		mov	[esp+8Ch+Str], ecx
		call	sub_68881E8C
		mov	[esp+8Ch+var_88], 74h
		lea	eax, [esp+8Ch+var_3C]
		mov	[esp+8Ch+Str], eax
		call	sub_68881E8C
		mov	[esp+8Ch+var_88], 6578742Fh
		lea	edx, [esp+8Ch+var_3C]
		mov	[esp+8Ch+Str], edx
		call	sub_68881E8C
		mov	[esp+8Ch+var_88], 782D616Fh
		lea	ecx, [esp+8Ch+var_3C]
		mov	[esp+8Ch+Str], ecx
		call	sub_68881E8C
		mov	[esp+8Ch+var_88], 6C727466h
		lea	eax, [esp+8Ch+var_3C]
		mov	[esp+8Ch+Str], eax
		call	sub_68881E8C
		mov	[esp+8Ch+var_88], 3
		lea	edx, [esp+8Ch+var_3C]
		mov	[esp+8Ch+Str], edx
		call	sub_68881E0C
		mov	[esp+8Ch+var_88], 0
		lea	ecx, [esp+8Ch+var_3C]
		mov	[esp+8Ch+Str], ecx
		call	sub_68881E0C
		mov	[esp+8Ch+Str], ebp ; Str
		call	atoi
		mov	edx, [esp+8Ch+var_68]
		mov	[edx+4], eax
		mov	eax, [esp+8Ch+var_58]
		mov	[edx+88h], eax
		mov	edx, [esp+8Ch+var_30]
		mov	ecx, [esp+8Ch+var_2C]
		mov	eax, [esp+8Ch+var_68]
		mov	[eax+80h], edx
		mov	[eax+84h], ecx
		mov	[esp+8Ch+var_88], eax
		mov	eax, [ebx+0B8h]
		mov	[esp+8Ch+Str], eax
		call	g_slist_prepend
		mov	[ebx+0B8h], eax
		mov	[esp+8Ch+var_74], 0
		lea	edx, [esp+8Ch+var_3C]
		mov	[esp+8Ch+var_78], edx
		mov	eax, [esp+8Ch+var_50]
		mov	[esp+8Ch+var_7C], eax
		mov	[esp+8Ch+var_80], 6
		mov	[esp+8Ch+var_84], 4
		mov	eax, [esp+8Ch+var_54]
		mov	[esp+8Ch+var_88], eax
		mov	[esp+8Ch+Str], ebx
		call	flap_connection_send_snac_with_priority
		lea	edx, [esp+8Ch+var_3C]
		mov	[esp+8Ch+Str], edx
		call	sub_688817E4
		jmp	loc_6888FA1D
; ---------------------------------------------------------------------------

loc_6889051D:				; CODE XREF: sub_6888F450+33Fj
		mov	esi, [edx+90h]
		mov	eax, [edx+4]
		mov	[esp+8Ch+var_88], eax
		mov	[esp+8Ch+Str], offset aU ; "%u"
		call	g_strdup_printf
		mov	[esp+8Ch+var_80], esi
		mov	[esp+8Ch+var_84], edi
		mov	[esp+8Ch+var_88], eax
		mov	[esp+8Ch+Str], ebp
		call	oscar_auth_recvrequest
		jmp	loc_6888F7AA
; ---------------------------------------------------------------------------

loc_6889054F:				; CODE XREF: sub_6888F450+34Cj
		mov	edx, [esp+8Ch+var_5C]
		mov	eax, [edx+4]
		mov	[esp+8Ch+var_80], eax
		mov	[esp+8Ch+var_84], offset aU ; "%u"
		mov	[esp+8Ch+var_88], 10h
		lea	edx, [esp+8Ch+var_30]
		mov	[esp+8Ch+Str], edx
		mov	[esp+8Ch+var_64], edx
		call	g_snprintf
		mov	[esp+8Ch+var_84], edi
		mov	edx, [esp+8Ch+var_64]
		mov	[esp+8Ch+var_88], edx
		mov	[esp+8Ch+Str], ebp
		call	serv_got_alias
		mov	edx, [esp+8Ch+var_64]
		mov	[esp+8Ch+var_88], edx
		mov	[esp+8Ch+Str], esi
		call	purple_find_buddy
		test	eax, eax
		jz	loc_6888F7A2
		mov	[esp+8Ch+var_84], edi
		mov	[esp+8Ch+var_88], offset aServernick ; "servernick"
		mov	[esp+8Ch+Str], eax
		call	purple_blist_node_set_string
		jmp	loc_6888F7A2
; ---------------------------------------------------------------------------

loc_688905BF:				; CODE XREF: sub_6888F450+503j
		xor	ebp, ebp
		jmp	loc_6888F963
; ---------------------------------------------------------------------------

loc_688905C6:				; CODE XREF: sub_6888F450+4B9j
		mov	[esp+8Ch+var_88], offset aIcq0x0fb4FlapC ; "icq/0x0fb4:	flap connection	was not	fou"...
		mov	[esp+8Ch+Str], offset aOscar_6 ; "oscar"
		call	purple_debug_misc
		jmp	loc_6888F8C0
; ---------------------------------------------------------------------------

loc_688905DF:				; CODE XREF: sub_6888F450+52Dj
		mov	[esp+8Ch+Str], edi
		call	aim_tlvlist_free
		mov	[esp+8Ch+var_58], 0

loc_688905EF:				; CODE XREF: sub_6888F450+549j
					; sub_6888F450+555j
		mov	[esp+8Ch+var_88], offset aIcq0x0fb4UinOr ; "icq/0x0fb4:	uin or status_note_title wa"...
		mov	[esp+8Ch+Str], offset aOscar_6 ; "oscar"
		call	purple_debug_misc
		mov	[esp+8Ch+Str], ebp
		call	g_free
		mov	eax, [esp+8Ch+var_58]
		mov	[esp+8Ch+Str], eax
		call	g_free
		jmp	loc_6888F8C0
sub_6888F450	endp

; Exported entry  38. aim_icq_setsecurity

; =============== S U B	R O U T	I N E =======================================


		public aim_icq_setsecurity
aim_icq_setsecurity proc near		; CODE XREF: sub_688999AC+A2p
					; sub_6889DECC+21Cp

var_5C		= dword	ptr -5Ch
var_58		= dword	ptr -58h
var_54		= dword	ptr -54h
var_50		= dword	ptr -50h
var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= byte ptr -2Ch
var_20		= dword	ptr -20h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 4Ch
		mov	esi, [esp+5Ch+arg_0]
		mov	ebp, [esp+5Ch+arg_4]
		mov	edx, [esp+5Ch+arg_8]
		mov	[esp+5Ch+var_30], edx
		mov	eax, ds:__stack_chk_guard
		mov	[esp+5Ch+var_20], eax
		xor	eax, eax
		test	esi, esi
		jz	loc_688907E4
		mov	[esp+5Ch+var_58], 15h
		mov	[esp+5Ch+var_5C], esi
		call	flap_connection_findbygroup
		mov	edi, eax
		test	eax, eax
		jz	loc_688907E4
		mov	[esp+5Ch+var_58], 1Ah
		lea	ebx, [esp+5Ch+var_2C]
		mov	[esp+5Ch+var_5C], ebx
		call	sub_68881748
		mov	[esp+5Ch+var_48], 0
		mov	[esp+5Ch+var_4C], 0
		mov	[esp+5Ch+var_50], 0
		mov	[esp+5Ch+var_54], 2
		mov	[esp+5Ch+var_58], 15h
		mov	[esp+5Ch+var_5C], esi
		call	aim_cachesnac
		mov	[esp+5Ch+var_34], eax
		mov	[esp+5Ch+var_58], 1
		mov	[esp+5Ch+var_5C], ebx
		call	sub_68881E0C
		mov	[esp+5Ch+var_58], 16h
		mov	[esp+5Ch+var_5C], ebx
		call	sub_68881E0C
		mov	[esp+5Ch+var_58], 14h
		mov	[esp+5Ch+var_5C], ebx
		call	sub_68881F8C
		mov	[esp+5Ch+var_58], esi
		mov	[esp+5Ch+var_5C], ebx
		call	sub_68882208
		mov	[esp+5Ch+var_58], 7D0h
		mov	[esp+5Ch+var_5C], ebx
		call	sub_68881F8C
		movzx	eax, word ptr [esp+5Ch+var_34]
		mov	[esp+5Ch+var_58], eax
		mov	[esp+5Ch+var_5C], ebx
		call	sub_68881F8C
		mov	[esp+5Ch+var_58], 0C3Ah
		mov	[esp+5Ch+var_5C], ebx
		call	sub_68881F8C
		mov	[esp+5Ch+var_58], 30Ch
		mov	[esp+5Ch+var_5C], ebx
		call	sub_68881F8C
		mov	[esp+5Ch+var_58], 1
		mov	[esp+5Ch+var_5C], ebx
		call	sub_68881F8C
		movzx	eax, byte ptr [esp+5Ch+var_30]
		mov	[esp+5Ch+var_58], eax
		mov	[esp+5Ch+var_5C], ebx
		call	sub_68881F24
		mov	[esp+5Ch+var_58], 0F8h
		mov	[esp+5Ch+var_5C], ebx
		call	sub_68881F24
		mov	[esp+5Ch+var_58], 2
		mov	[esp+5Ch+var_5C], ebx
		call	sub_68881F24
		mov	[esp+5Ch+var_58], 1
		mov	[esp+5Ch+var_5C], ebx
		call	sub_68881F24
		mov	[esp+5Ch+var_58], 0
		mov	[esp+5Ch+var_5C], ebx
		call	sub_68881F24
		xor	eax, eax
		test	ebp, ebp
		setz	al
		mov	[esp+5Ch+var_58], eax
		mov	[esp+5Ch+var_5C], ebx
		call	sub_68881F24
		mov	[esp+5Ch+var_48], ebx
		mov	eax, [esp+5Ch+var_34]
		mov	[esp+5Ch+var_4C], eax
		mov	[esp+5Ch+var_50], 2
		mov	[esp+5Ch+var_54], 15h
		mov	[esp+5Ch+var_58], edi
		mov	[esp+5Ch+var_5C], esi
		call	flap_connection_send_snac
		mov	[esp+5Ch+var_5C], ebx
		call	sub_688817E4
		xor	eax, eax

loc_688907CB:				; CODE XREF: aim_icq_setsecurity+1CDj
		mov	edx, [esp+5Ch+var_20]
		xor	edx, ds:__stack_chk_guard
		jnz	loc_688907EB
		add	esp, 4Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 4

loc_688907E4:				; CODE XREF: aim_icq_setsecurity+24j
					; aim_icq_setsecurity+3Ej
		mov	eax, 0FFFFFFEAh
		jmp	short loc_688907CB
; ---------------------------------------------------------------------------

loc_688907EB:				; CODE XREF: aim_icq_setsecurity+1B9j
		call	__stack_chk_fail
aim_icq_setsecurity endp

; Exported entry  34. aim_icq_changepasswd

; =============== S U B	R O U T	I N E =======================================


		public aim_icq_changepasswd
aim_icq_changepasswd proc near		; CODE XREF: oscar_change_passwd+86j

var_5C		= dword	ptr -5Ch
var_58		= dword	ptr -58h
var_54		= dword	ptr -54h
var_50		= dword	ptr -50h
var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= byte ptr -2Ch
var_20		= dword	ptr -20h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 4Ch
		mov	esi, [esp+5Ch+arg_0]
		mov	eax, [esp+5Ch+arg_4]
		mov	[esp+5Ch+var_34], eax
		mov	edx, ds:__stack_chk_guard
		mov	[esp+5Ch+var_20], edx
		xor	edx, edx
		test	eax, eax
		jz	loc_688909A4
		test	esi, esi
		jz	loc_688909A4
		mov	[esp+5Ch+var_58], 15h
		mov	[esp+5Ch+var_5C], esi
		call	flap_connection_findbygroup
		mov	edx, eax
		test	eax, eax
		jz	loc_688909A4
		xor	eax, eax
		mov	ecx, 0FFFFFFFFh
		mov	edi, [esp+5Ch+var_34]
		repne scasb
		not	ecx
		lea	ebp, [ecx-1]
		cmp	ebp, 8
		jg	loc_68890998

loc_68890854:				; CODE XREF: aim_icq_changepasswd+1ADj
		lea	edi, [ebp+0Fh]
		lea	eax, [ebp+13h]
		mov	[esp+5Ch+var_58], eax
		lea	ebx, [esp+5Ch+var_2C]
		mov	[esp+5Ch+var_5C], ebx
		mov	[esp+5Ch+var_38], edx
		call	sub_68881748
		mov	[esp+5Ch+var_48], 0
		mov	[esp+5Ch+var_4C], 0
		mov	[esp+5Ch+var_50], 0
		mov	[esp+5Ch+var_54], 2
		mov	[esp+5Ch+var_58], 15h
		mov	[esp+5Ch+var_5C], esi
		call	aim_cachesnac
		mov	[esp+5Ch+var_30], eax
		mov	[esp+5Ch+var_58], 1
		mov	[esp+5Ch+var_5C], ebx
		call	sub_68881E0C
		mov	eax, edi
		and	eax, 0FFFFh
		mov	[esp+5Ch+var_58], eax
		mov	[esp+5Ch+var_5C], ebx
		call	sub_68881E0C
		sub	edi, 2
		movzx	edi, di
		mov	[esp+5Ch+var_58], edi
		mov	[esp+5Ch+var_5C], ebx
		call	sub_68881F8C
		mov	[esp+5Ch+var_58], esi
		mov	[esp+5Ch+var_5C], ebx
		call	sub_68882208
		mov	[esp+5Ch+var_58], 7D0h
		mov	[esp+5Ch+var_5C], ebx
		call	sub_68881F8C
		movzx	eax, word ptr [esp+5Ch+var_30]
		mov	[esp+5Ch+var_58], eax
		mov	[esp+5Ch+var_5C], ebx
		call	sub_68881F8C
		mov	[esp+5Ch+var_58], 42Eh
		mov	[esp+5Ch+var_5C], ebx
		call	sub_68881F8C
		lea	eax, [ebp+1]
		movzx	eax, ax
		mov	[esp+5Ch+var_58], eax
		mov	[esp+5Ch+var_5C], ebx
		call	sub_68881F8C
		mov	[esp+5Ch+var_54], ebp
		mov	eax, [esp+5Ch+var_34]
		mov	[esp+5Ch+var_58], eax
		mov	[esp+5Ch+var_5C], ebx
		call	sub_688820A0
		mov	[esp+5Ch+var_58], 0
		mov	[esp+5Ch+var_5C], ebx
		call	sub_68881F24
		mov	[esp+5Ch+var_48], ebx
		mov	eax, [esp+5Ch+var_30]
		mov	[esp+5Ch+var_4C], eax
		mov	[esp+5Ch+var_50], 2
		mov	[esp+5Ch+var_54], 15h
		mov	edx, [esp+5Ch+var_38]
		mov	[esp+5Ch+var_58], edx
		mov	[esp+5Ch+var_5C], esi
		call	flap_connection_send_snac
		mov	[esp+5Ch+var_5C], ebx
		call	sub_688817E4
		xor	eax, eax

loc_68890980:				; CODE XREF: aim_icq_changepasswd+1B9j
		mov	edx, [esp+5Ch+var_20]
		xor	edx, ds:__stack_chk_guard
		jnz	loc_688909AB
		add	esp, 4Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_68890998:				; CODE XREF: aim_icq_changepasswd+5Ej
		mov	ebp, 8
		jmp	loc_68890854
; ---------------------------------------------------------------------------
		align 4

loc_688909A4:				; CODE XREF: aim_icq_changepasswd+21j
					; aim_icq_changepasswd+29j ...
		mov	eax, 0FFFFFFEAh
		jmp	short loc_68890980
; ---------------------------------------------------------------------------

loc_688909AB:				; CODE XREF: aim_icq_changepasswd+19Aj
		call	__stack_chk_fail
aim_icq_changepasswd endp

; Exported entry  36. aim_icq_getallinfo

; =============== S U B	R O U T	I N E =======================================


; int __cdecl aim_icq_getallinfo(int, char *)
		public aim_icq_getallinfo
aim_icq_getallinfo proc	near		; CODE XREF: oscar_get_info+75j

Str		= dword	ptr -6Ch
var_68		= dword	ptr -68h
var_64		= dword	ptr -64h
var_60		= dword	ptr -60h
var_5C		= dword	ptr -5Ch
var_58		= dword	ptr -58h
var_54		= dword	ptr -54h
var_40		= dword	ptr -40h
var_2E		= word ptr -2Eh
var_2C		= byte ptr -2Ch
var_20		= dword	ptr -20h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 5Ch
		mov	esi, [esp+6Ch+arg_0]
		mov	edi, [esp+6Ch+arg_4]
		mov	eax, ds:__stack_chk_guard
		mov	[esp+6Ch+var_20], eax
		xor	eax, eax
		mov	[esp+6Ch+var_2E], 4B2h
		test	edi, edi
		jz	loc_68890B60
		mov	al, [edi]
		cmp	al, 2Fh
		jle	loc_68890B60
		cmp	al, 39h
		jg	loc_68890B60
		test	esi, esi
		jz	loc_68890B60
		mov	[esp+6Ch+var_68], 15h
		mov	[esp+6Ch+Str], esi
		call	flap_connection_findbygroup
		test	eax, eax
		jz	loc_68890B60
		mov	[esp+6Ch+var_68], 14h
		lea	ebx, [esp+6Ch+var_2C]
		mov	[esp+6Ch+Str], ebx
		mov	[esp+6Ch+var_40], eax
		call	sub_68881748
		mov	[esp+6Ch+var_58], 2
		lea	eax, [esp+6Ch+var_2E]
		mov	[esp+6Ch+var_5C], eax
		mov	[esp+6Ch+var_60], 0
		mov	[esp+6Ch+var_64], 2
		mov	[esp+6Ch+var_68], 15h
		mov	[esp+6Ch+Str], esi
		call	aim_cachesnac
		mov	ebp, eax
		mov	[esp+6Ch+var_68], 1
		mov	[esp+6Ch+Str], ebx
		call	sub_68881E0C
		mov	[esp+6Ch+var_68], 10h
		mov	[esp+6Ch+Str], ebx
		call	sub_68881E0C
		mov	[esp+6Ch+var_68], 0Eh
		mov	[esp+6Ch+Str], ebx
		call	sub_68881F8C
		mov	[esp+6Ch+var_68], esi
		mov	[esp+6Ch+Str], ebx
		call	sub_68882208
		mov	[esp+6Ch+var_68], 7D0h
		mov	[esp+6Ch+Str], ebx
		call	sub_68881F8C
		mov	eax, ebp
		and	eax, 0FFFFh
		mov	[esp+6Ch+var_68], eax
		mov	[esp+6Ch+Str], ebx
		call	sub_68881F8C
		movzx	eax, [esp+6Ch+var_2E]
		mov	[esp+6Ch+var_68], eax
		mov	[esp+6Ch+Str], ebx
		call	sub_68881F8C
		mov	[esp+6Ch+Str], edi ; Str
		call	atoi
		mov	[esp+6Ch+var_68], eax
		mov	[esp+6Ch+Str], ebx
		call	sub_68882008
		mov	[esp+6Ch+var_54], 0
		mov	[esp+6Ch+var_58], ebx
		mov	[esp+6Ch+var_5C], ebp
		mov	[esp+6Ch+var_60], 2
		mov	[esp+6Ch+var_64], 15h
		mov	edx, [esp+6Ch+var_40]
		mov	[esp+6Ch+var_68], edx
		mov	[esp+6Ch+Str], esi
		call	flap_connection_send_snac_with_priority
		mov	[esp+6Ch+Str], ebx
		call	sub_688817E4
		mov	[esp+6Ch+Str], 94h
		call	g_malloc0
		mov	ebx, eax
		mov	[eax], bp
		mov	[esp+6Ch+Str], edi ; Str
		call	atoi
		mov	[ebx+4], eax
		mov	[esp+6Ch+var_68], ebx
		mov	eax, [esi+0B8h]
		mov	[esp+6Ch+Str], eax
		call	g_slist_prepend
		mov	[esi+0B8h], eax
		xor	eax, eax

loc_68890B47:				; CODE XREF: aim_icq_getallinfo+1B5j
		mov	edx, [esp+6Ch+var_20]
		xor	edx, ds:__stack_chk_guard
		jnz	loc_68890B67
		add	esp, 5Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_68890B60:				; CODE XREF: aim_icq_getallinfo+23j
					; aim_icq_getallinfo+2Dj ...
		mov	eax, 0FFFFFFEAh
		jmp	short loc_68890B47
; ---------------------------------------------------------------------------

loc_68890B67:				; CODE XREF: aim_icq_getallinfo+1A1j
		call	__stack_chk_fail
aim_icq_getallinfo endp

; Exported entry  35. aim_icq_getalias

; =============== S U B	R O U T	I N E =======================================


; int __cdecl aim_icq_getalias(int, char *, int, int)
		public aim_icq_getalias
aim_icq_getalias proc near		; CODE XREF: .text:6889CB76p
					; sub_6889F454+F41p ...

Str		= dword	ptr -6Ch
var_68		= dword	ptr -68h
var_64		= dword	ptr -64h
var_60		= dword	ptr -60h
var_5C		= dword	ptr -5Ch
var_58		= dword	ptr -58h
var_54		= dword	ptr -54h
var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_2E		= word ptr -2Eh
var_2C		= byte ptr -2Ch
var_20		= dword	ptr -20h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 5Ch
		mov	esi, [esp+6Ch+arg_0]
		mov	ebp, [esp+6Ch+arg_4]
		mov	edx, [esp+6Ch+arg_8]
		mov	[esp+6Ch+var_44], edx
		mov	edx, [esp+6Ch+arg_C]
		mov	[esp+6Ch+var_40], edx
		mov	eax, ds:__stack_chk_guard
		mov	[esp+6Ch+var_20], eax
		xor	eax, eax
		mov	[esp+6Ch+var_2E], 4BAh
		test	ebp, ebp
		jz	loc_68890D60
		mov	al, [ebp+0]
		cmp	al, 2Fh
		jle	loc_68890D60
		cmp	al, 39h
		jg	loc_68890D60
		test	esi, esi
		jz	loc_68890D60
		mov	[esp+6Ch+var_68], 15h
		mov	[esp+6Ch+Str], esi
		call	flap_connection_findbygroup
		test	eax, eax
		jz	loc_68890D60
		mov	[esp+6Ch+var_64], ebp
		mov	[esp+6Ch+var_68], offset aRequestingIcqA ; "Requesting ICQ alias for %s\n"
		mov	[esp+6Ch+Str], offset aOscar_6 ; "oscar"
		mov	[esp+6Ch+var_48], eax
		call	purple_debug_info
		mov	[esp+6Ch+var_68], 14h
		lea	ebx, [esp+6Ch+var_2C]
		mov	[esp+6Ch+Str], ebx
		call	sub_68881748
		mov	[esp+6Ch+var_58], 2
		lea	eax, [esp+6Ch+var_2E]
		mov	[esp+6Ch+var_5C], eax
		mov	[esp+6Ch+var_60], 0
		mov	[esp+6Ch+var_64], 2
		mov	[esp+6Ch+var_68], 15h
		mov	[esp+6Ch+Str], esi
		call	aim_cachesnac
		mov	edi, eax
		mov	[esp+6Ch+var_68], 1
		mov	[esp+6Ch+Str], ebx
		call	sub_68881E0C
		mov	[esp+6Ch+var_68], 10h
		mov	[esp+6Ch+Str], ebx
		call	sub_68881E0C
		mov	[esp+6Ch+var_68], 0Eh
		mov	[esp+6Ch+Str], ebx
		call	sub_68881F8C
		mov	[esp+6Ch+var_68], esi
		mov	[esp+6Ch+Str], ebx
		call	sub_68882208
		mov	[esp+6Ch+var_68], 7D0h
		mov	[esp+6Ch+Str], ebx
		call	sub_68881F8C
		mov	eax, edi
		and	eax, 0FFFFh
		mov	[esp+6Ch+var_68], eax
		mov	[esp+6Ch+Str], ebx
		call	sub_68881F8C
		movzx	eax, [esp+6Ch+var_2E]
		mov	[esp+6Ch+var_68], eax
		mov	[esp+6Ch+Str], ebx
		call	sub_68881F8C
		mov	[esp+6Ch+Str], ebp ; Str
		call	atoi
		mov	[esp+6Ch+var_68], eax
		mov	[esp+6Ch+Str], ebx
		call	sub_68882008
		mov	[esp+6Ch+var_54], 0
		mov	[esp+6Ch+var_58], ebx
		mov	[esp+6Ch+var_5C], edi
		mov	[esp+6Ch+var_60], 2
		mov	[esp+6Ch+var_64], 15h
		mov	ecx, [esp+6Ch+var_48]
		mov	[esp+6Ch+var_68], ecx
		mov	[esp+6Ch+Str], esi
		call	flap_connection_send_snac_with_priority
		mov	[esp+6Ch+Str], ebx
		call	sub_688817E4
		mov	[esp+6Ch+Str], 94h
		call	g_malloc0
		mov	ebx, eax
		mov	[eax], di
		mov	[esp+6Ch+Str], ebp ; Str
		call	atoi
		mov	[ebx+4], eax
		mov	edx, [esp+6Ch+var_44]
		mov	[ebx+8Ch], edx
		mov	edx, [esp+6Ch+var_40]
		mov	[esp+6Ch+Str], edx
		call	g_strdup
		mov	[ebx+90h], eax
		mov	[esp+6Ch+var_68], ebx
		mov	eax, [esi+0B8h]
		mov	[esp+6Ch+Str], eax
		call	g_slist_prepend
		mov	[esi+0B8h], eax
		xor	eax, eax

loc_68890D48:				; CODE XREF: aim_icq_getalias+1F9j
		mov	edx, [esp+6Ch+var_20]
		xor	edx, ds:__stack_chk_guard
		jnz	loc_68890D67
		add	esp, 5Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_68890D60:				; CODE XREF: aim_icq_getalias+33j
					; aim_icq_getalias+3Ej	...
		mov	eax, 0FFFFFFEAh
		jmp	short loc_68890D48
; ---------------------------------------------------------------------------

loc_68890D67:				; CODE XREF: aim_icq_getalias+1E6j
		call	__stack_chk_fail
aim_icq_getalias endp

; Exported entry  37. aim_icq_sendsms

; =============== S U B	R O U T	I N E =======================================


		public aim_icq_sendsms
aim_icq_sendsms	proc near		; CODE XREF: oscar_send_im+7C7p

Time		= dword	ptr -7Ch
Count		= dword	ptr -78h
Format		= dword	ptr -74h
var_70		= dword	ptr -70h
var_6C		= dword	ptr -6Ch
var_68		= dword	ptr -68h
var_64		= dword	ptr -64h
var_60		= dword	ptr -60h
var_5C		= dword	ptr -5Ch
var_58		= dword	ptr -58h
var_54		= dword	ptr -54h
var_50		= dword	ptr -50h
var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_30		= dword	ptr -30h
var_2C		= byte ptr -2Ch
var_20		= dword	ptr -20h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 6Ch
		mov	ebp, [esp+7Ch+arg_0]
		mov	eax, [esp+7Ch+arg_4]
		mov	[esp+7Ch+var_58], eax
		mov	ebx, [esp+7Ch+arg_8]
		mov	edx, [esp+7Ch+arg_C]
		mov	[esp+7Ch+var_54], edx
		mov	ecx, ds:__stack_chk_guard
		mov	[esp+7Ch+var_20], ecx
		xor	ecx, ecx
		test	ebp, ebp
		jz	loc_68891094
		mov	[esp+7Ch+Count], 15h
		mov	[esp+7Ch+Time],	ebp
		call	flap_connection_findbygroup
		mov	[esp+7Ch+var_4C], eax
		test	eax, eax
		jz	loc_68891094
		mov	eax, [esp+7Ch+var_58]
		test	eax, eax
		jz	loc_68891094
		test	ebx, ebx
		jz	loc_68891094
		mov	eax, [esp+7Ch+var_54]
		test	eax, eax
		jz	loc_68891094
		mov	eax, [ebp+68h]
		mov	[esp+7Ch+Time],	eax
		call	purple_connection_get_account
		mov	[esp+7Ch+Time],	eax
		call	purple_account_get_username
		mov	[esp+7Ch+var_48], eax
		lea	esi, [esp+7Ch+var_30]
		mov	[esp+7Ch+Time],	esi ; Time
		call	time
		mov	[esp+7Ch+Time],	esi ; Time
		call	gmtime
		mov	[esp+7Ch+Count], eax
		mov	[esp+7Ch+Time],	offset aADBYTZ ; "%a, %d %b %Y %T %Z"
		call	purple_utf8_strftime
		mov	esi, eax
		mov	[esp+7Ch+Time],	ebx
		call	purple_markup_strip_html
		mov	[esp+7Ch+var_50], eax
		xor	eax, eax
		mov	ecx, 0FFFFFFFFh
		mov	edi, [esp+7Ch+var_58]
		repne scasb
		mov	[esp+7Ch+var_44], ecx
		mov	ecx, 0FFFFFFFFh
		mov	edi, [esp+7Ch+var_50]
		repne scasb
		mov	edx, ecx
		not	edx
		mov	ecx, 0FFFFFFFFh
		mov	edi, [esp+7Ch+var_48]
		repne scasb
		mov	[esp+7Ch+var_40], ecx
		mov	ecx, 0FFFFFFFFh
		mov	edi, [esp+7Ch+var_54]
		repne scasb
		mov	ebx, ecx
		not	ebx
		mov	ecx, 0FFFFFFFFh
		mov	edi, esi
		repne scasb
		sub	edx, [esp+7Ch+var_44]
		sub	ebx, [esp+7Ch+var_40]
		sub	edx, ecx
		lea	ebx, [edx+ebx+0CAh]
		mov	[esp+7Ch+Time],	ebx
		call	g_malloc
		mov	edx, eax
		mov	[esp+7Ch+var_60], esi
		mov	eax, [esp+7Ch+var_54]
		mov	[esp+7Ch+var_64], eax
		mov	ecx, [esp+7Ch+var_48]
		mov	[esp+7Ch+var_68], ecx
		mov	eax, [esp+7Ch+var_50]
		mov	[esp+7Ch+var_6C], eax
		mov	ecx, [esp+7Ch+var_58]
		mov	[esp+7Ch+var_70], ecx
		mov	[esp+7Ch+Format], offset aIcq_sms_messag ; "<icq_sms_message><destination>%s</desti"...
		mov	[esp+7Ch+Count], ebx ; Count
		mov	[esp+7Ch+Time],	edx ; Dest
		mov	[esp+7Ch+var_5C], edx
		call	_snprintf
		lea	edi, [ebx+24h]
		lea	eax, [ebx+28h]
		mov	[esp+7Ch+Count], eax
		lea	esi, [esp+7Ch+var_2C]
		mov	[esp+7Ch+Time],	esi
		call	sub_68881748
		mov	[esp+7Ch+var_68], 0
		mov	[esp+7Ch+var_6C], 0
		mov	[esp+7Ch+var_70], 0
		mov	[esp+7Ch+Format], 2
		mov	[esp+7Ch+Count], 15h
		mov	[esp+7Ch+Time],	ebp
		call	aim_cachesnac
		mov	[esp+7Ch+var_58], eax
		mov	[esp+7Ch+Count], 1
		mov	[esp+7Ch+Time],	esi
		call	sub_68881E0C
		mov	eax, edi
		and	eax, 0FFFFh
		mov	[esp+7Ch+Count], eax
		mov	[esp+7Ch+Time],	esi
		call	sub_68881E0C
		sub	edi, 2
		movzx	edi, di
		mov	[esp+7Ch+Count], edi
		mov	[esp+7Ch+Time],	esi
		call	sub_68881F8C
		mov	[esp+7Ch+Count], ebp
		mov	[esp+7Ch+Time],	esi
		call	sub_68882208
		mov	[esp+7Ch+Count], 7D0h
		mov	[esp+7Ch+Time],	esi
		call	sub_68881F8C
		movzx	eax, word ptr [esp+7Ch+var_58]
		mov	[esp+7Ch+Count], eax
		mov	[esp+7Ch+Time],	esi
		call	sub_68881F8C
		mov	[esp+7Ch+Count], 1482h
		mov	[esp+7Ch+Time],	esi
		call	sub_68881F8C
		mov	[esp+7Ch+Count], 1
		mov	[esp+7Ch+Time],	esi
		call	sub_68881E0C
		mov	[esp+7Ch+Count], 16h
		mov	[esp+7Ch+Time],	esi
		call	sub_68881E0C
		mov	[esp+7Ch+Count], 0
		mov	[esp+7Ch+Time],	esi
		call	sub_68881E8C
		mov	[esp+7Ch+Count], 0
		mov	[esp+7Ch+Time],	esi
		call	sub_68881E8C
		mov	[esp+7Ch+Count], 0
		mov	[esp+7Ch+Time],	esi
		call	sub_68881E8C
		mov	[esp+7Ch+Count], 0
		mov	[esp+7Ch+Time],	esi
		call	sub_68881E8C
		mov	[esp+7Ch+Count], 0
		mov	[esp+7Ch+Time],	esi
		call	sub_68881E0C
		and	ebx, 0FFFFh
		mov	[esp+7Ch+Count], ebx
		mov	[esp+7Ch+Time],	esi
		call	sub_68881E0C
		mov	edx, [esp+7Ch+var_5C]
		mov	[esp+7Ch+Count], edx
		mov	[esp+7Ch+Time],	esi
		call	sub_68882114
		mov	[esp+7Ch+Count], 0
		mov	[esp+7Ch+Time],	esi
		call	sub_68881DA4
		mov	[esp+7Ch+var_68], esi
		mov	eax, [esp+7Ch+var_58]
		mov	[esp+7Ch+var_6C], eax
		mov	[esp+7Ch+var_70], 2
		mov	[esp+7Ch+Format], 15h
		mov	eax, [esp+7Ch+var_4C]
		mov	[esp+7Ch+Count], eax
		mov	[esp+7Ch+Time],	ebp
		call	flap_connection_send_snac
		mov	[esp+7Ch+Time],	esi
		call	sub_688817E4
		mov	edx, [esp+7Ch+var_5C]
		mov	[esp+7Ch+Time],	edx
		call	g_free
		mov	edx, [esp+7Ch+var_50]
		mov	[esp+7Ch+Time],	edx
		call	g_free
		xor	eax, eax

loc_6889107A:				; CODE XREF: aim_icq_sendsms+32Dj
		mov	ecx, [esp+7Ch+var_20]
		xor	ecx, ds:__stack_chk_guard
		jnz	loc_6889109B
		add	esp, 6Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 4

loc_68891094:				; CODE XREF: aim_icq_sendsms+39j
					; aim_icq_sendsms+55j ...
		mov	eax, 0FFFFFFEAh
		jmp	short loc_6889107A
; ---------------------------------------------------------------------------

loc_6889109B:				; CODE XREF: aim_icq_sendsms+318j
		call	__stack_chk_fail
aim_icq_sendsms	endp

; Exported entry 205. icq_modfirst

; =============== S U B	R O U T	I N E =======================================


		public icq_modfirst
icq_modfirst	proc near		; DATA XREF: oscar_data_new+162o

Dest		= dword	ptr -2Ch
Source		= dword	ptr -28h
Count		= dword	ptr -24h
var_10		= dword	ptr -10h
arg_4		= dword	ptr  8

		push	ebx
		sub	esp, 28h
		mov	ebx, [esp+2Ch+arg_4]
		mov	eax, ds:__stack_chk_guard
		mov	[esp+2Ch+var_10], eax
		xor	eax, eax
		mov	word ptr [ebx],	15h
		mov	word ptr [ebx+2], 1
		mov	word ptr [ebx+4], 110h
		mov	word ptr [ebx+6], 47Ch
		mov	word ptr [ebx+8], 0
		mov	[esp+2Ch+Count], 11h ; Count
		mov	[esp+2Ch+Source], offset aIcq ;	"icq"
		lea	eax, [ebx+0Ah]
		mov	[esp+2Ch+Dest],	eax ; Dest
		call	strncpy
		mov	dword ptr [ebx+1Ch], offset sub_6888F450
		mov	dword ptr [ebx+20h], offset loc_6888F3F8
		xor	eax, eax
		mov	edx, [esp+2Ch+var_10]
		xor	edx, ds:__stack_chk_guard
		jnz	short loc_6889110C
		add	esp, 28h
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_6889110C:				; CODE XREF: icq_modfirst+65j
		call	__stack_chk_fail
icq_modfirst	endp

; ---------------------------------------------------------------------------
		align 4

; =============== S U B	R O U T	I N E =======================================


sub_68891114	proc near		; CODE XREF: aim_info_extract+308p
					; sub_688921A8+1E2p

Buf1		= dword	ptr -4Ch
Buf2		= dword	ptr -48h
Size		= dword	ptr -44h
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_20		= dword	ptr -20h

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 3Ch
		mov	ebp, eax
		mov	[esp+4Ch+var_34], edx
		mov	eax, ds:__stack_chk_guard
		mov	[esp+4Ch+var_20], eax
		xor	eax, eax
		mov	[esp+4Ch+var_30], 0
		mov	[esp+4Ch+var_38], 0
		mov	[esp+4Ch+Buf1],	ebp
		call	sub_68881818
		test	eax, eax
		jz	loc_688911EC

loc_6889114C:				; CODE XREF: sub_68891114+D2j
		mov	edx, [esp+4Ch+var_34]
		cmp	[esp+4Ch+var_38], edx
		jge	loc_688911EC
		mov	[esp+4Ch+Buf2],	10h
		mov	[esp+4Ch+Buf1],	ebp
		call	sub_68881CAC
		mov	esi, eax
		mov	ebx, offset aThinking ;	"thinking"
		xor	edi, edi
		jmp	short loc_68891187
; ---------------------------------------------------------------------------
		align 4

loc_68891178:				; CODE XREF: sub_68891114+93j
		inc	edi
		lea	eax, [edi+edi*4]
		mov	ebx, ds:off_688B0D80[eax*4]
		test	ebx, ebx
		jz	short loc_688911CF

loc_68891187:				; CODE XREF: sub_68891114+5Fj
		mov	[esp+4Ch+Size],	10h ; Size
		mov	[esp+4Ch+Buf2],	esi ; Buf2
		lea	eax, [edi+edi*4]
		lea	eax, dword_688B0D84[eax*4]
		mov	[esp+4Ch+Buf1],	eax ; Buf1
		call	memcmp
		test	eax, eax
		jnz	short loc_68891178
		lea	eax, [edi+edi*2]
		mov	eax, off_688AD004[eax*4]
		mov	[esp+4Ch+Size],	eax
		mov	[esp+4Ch+Buf2],	offset aCustomStatusIc ; "Custom status	icon: %s\n"
		mov	[esp+4Ch+Buf1],	offset aOscar_7	; "oscar"
		call	purple_debug_misc
		mov	[esp+4Ch+var_30], ebx

loc_688911CF:				; CODE XREF: sub_68891114+71j
		mov	[esp+4Ch+Buf1],	esi
		call	g_free
		add	[esp+4Ch+var_38], 10h
		mov	[esp+4Ch+Buf1],	ebp
		call	sub_68881818
		test	eax, eax
		jnz	loc_6889114C

loc_688911EC:				; CODE XREF: sub_68891114+32j
					; sub_68891114+40j
		mov	eax, [esp+4Ch+var_30]
		mov	edx, [esp+4Ch+var_20]
		xor	edx, ds:__stack_chk_guard
		jnz	short loc_68891204
		add	esp, 3Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_68891204:				; CODE XREF: sub_68891114+E6j
		call	__stack_chk_fail
sub_68891114	endp

; ---------------------------------------------------------------------------
		align 4
; Exported entry  57. aim_locate_finduserinfo

; =============== S U B	R O U T	I N E =======================================


		public aim_locate_finduserinfo
aim_locate_finduserinfo	proc near	; CODE XREF: sub_68891274+1Fp
					; sub_688921A8+23Fp ...

var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_10		= dword	ptr -10h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	esi
		push	ebx
		sub	esp, 24h
		mov	eax, [esp+2Ch+arg_0]
		mov	esi, [esp+2Ch+arg_4]
		mov	edx, ds:__stack_chk_guard
		mov	[esp+2Ch+var_10], edx
		xor	edx, edx
		test	esi, esi
		jz	short loc_68891268
		mov	ebx, [eax+0C4h]
		test	ebx, ebx
		jnz	short loc_68891242
		jmp	short loc_68891268
; ---------------------------------------------------------------------------
		align 4

loc_68891238:				; CODE XREF: aim_locate_finduserinfo+46j
		mov	ebx, [ebx+94h]
		test	ebx, ebx
		jz	short loc_68891268

loc_68891242:				; CODE XREF: aim_locate_finduserinfo+25j
		mov	[esp+2Ch+var_28], esi
		mov	eax, [ebx]
		mov	[esp+2Ch+var_2C], eax
		call	oscar_util_name_compare
		test	eax, eax
		jnz	short loc_68891238

loc_68891254:				; CODE XREF: aim_locate_finduserinfo+5Ej
		mov	eax, ebx
		mov	edx, [esp+2Ch+var_10]
		xor	edx, ds:__stack_chk_guard
		jnz	short loc_6889126C
		add	esp, 24h
		pop	ebx
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_68891268:				; CODE XREF: aim_locate_finduserinfo+1Bj
					; aim_locate_finduserinfo+27j ...
		xor	ebx, ebx
		jmp	short loc_68891254
; ---------------------------------------------------------------------------

loc_6889126C:				; CODE XREF: aim_locate_finduserinfo+54j
		call	__stack_chk_fail
aim_locate_finduserinfo	endp

; ---------------------------------------------------------------------------
		align 4

; =============== S U B	R O U T	I N E =======================================


sub_68891274	proc near		; CODE XREF: aim_info_extract+1B2p
					; sub_688921A8+22Cp

var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_20		= dword	ptr -20h

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 2Ch
		mov	esi, eax
		mov	ebx, edx
		mov	eax, ds:__stack_chk_guard
		mov	[esp+3Ch+var_20], eax
		xor	eax, eax
		mov	eax, [edx]
		mov	[esp+3Ch+var_38], eax
		mov	[esp+3Ch+var_3C], esi
		call	aim_locate_finduserinfo
		mov	ebp, eax
		test	eax, eax
		jz	loc_68891594

loc_688912A2:				; CODE XREF: sub_68891274+34Dj
		mov	eax, [ebx+4]
		mov	[ebp+4], ax
		mov	ax, [ebx+6]
		mov	[ebp+6], ax
		mov	eax, [ebx+8]
		test	ax, ax
		jz	short loc_688912BD
		mov	[ebp+8], ax

loc_688912BD:				; CODE XREF: sub_68891274+43j
		mov	eax, [ebx+0Ch]
		test	eax, eax
		jz	short loc_688912C7
		mov	[ebp+0Ch], eax

loc_688912C7:				; CODE XREF: sub_68891274+4Ej
		mov	eax, [ebx+10h]
		test	eax, eax
		jz	short loc_688912D1
		mov	[ebp+10h], eax

loc_688912D1:				; CODE XREF: sub_68891274+58j
		mov	eax, [ebx+14h]
		test	eax, eax
		jz	short loc_688912DB
		mov	[ebp+14h], eax

loc_688912DB:				; CODE XREF: sub_68891274+62j
		mov	eax, [ebx+18h]
		test	eax, eax
		jz	short loc_688912E5
		mov	[ebp+18h], eax

loc_688912E5:				; CODE XREF: sub_68891274+6Cj
		mov	edx, [ebx+20h]
		mov	eax, [ebx+24h]
		mov	ecx, eax
		or	ecx, edx
		jz	short loc_688912F7
		mov	[ebp+20h], edx
		mov	[ebp+24h], eax

loc_688912F7:				; CODE XREF: sub_68891274+7Bj
		mov	eax, [ebx+58h]
		or	[ebp+58h], eax
		cmp	word ptr [ebx+5Eh], 0
		jnz	loc_68891560

loc_68891308:				; CODE XREF: sub_68891274+319j
		mov	esi, [ebx+64h]
		test	esi, esi
		jz	short loc_6889134E
		mov	eax, [ebp+64h]
		mov	[esp+3Ch+var_3C], eax
		call	g_free
		mov	eax, [ebp+68h]
		mov	[esp+3Ch+var_3C], eax
		call	g_free
		movzx	eax, word ptr [ebx+6Ch]
		test	ax, ax
		jnz	loc_68891504
		mov	dword ptr [ebp+64h], 0

loc_68891339:				; CODE XREF: sub_68891274+2A6j
		mov	eax, [ebx+68h]
		mov	[esp+3Ch+var_3C], eax
		call	g_strdup
		mov	[ebp+68h], eax
		mov	eax, [ebx+6Ch]
		mov	[ebp+6Ch], ax

loc_6889134E:				; CODE XREF: sub_68891274+99j
		mov	ecx, [ebx+70h]
		test	ecx, ecx
		jz	short loc_6889139C
		mov	eax, [ebp+70h]
		mov	[esp+3Ch+var_3C], eax
		call	g_free
		mov	eax, [ebp+74h]
		mov	[esp+3Ch+var_3C], eax
		call	g_free
		movzx	eax, word ptr [ebx+78h]
		test	ax, ax
		jnz	loc_688914D4
		mov	dword ptr [ebp+70h], 0
		mov	eax, [ebx+74h]
		test	eax, eax
		jz	loc_688914F5

loc_6889138A:				; CODE XREF: sub_68891274+27Bj
		mov	[esp+3Ch+var_3C], eax
		call	g_strdup
		mov	[ebp+74h], eax

loc_68891395:				; CODE XREF: sub_68891274+288j
		mov	eax, [ebx+78h]
		mov	[ebp+78h], ax

loc_6889139C:				; CODE XREF: sub_68891274+DFj
		mov	edx, [ebx+7Ch]
		test	edx, edx
		jz	short loc_688913FC
		mov	eax, [ebp+7Ch]
		mov	[esp+3Ch+var_3C], eax
		call	g_free
		mov	eax, [ebp+80h]
		mov	[esp+3Ch+var_3C], eax
		call	g_free
		movzx	eax, word ptr [ebx+84h]
		test	ax, ax
		jnz	loc_68891478
		mov	dword ptr [ebp+7Ch], 0
		mov	eax, [ebx+80h]
		test	eax, eax
		jz	loc_6889149F

loc_688913E1:				; CODE XREF: sub_68891274+225j
		mov	[esp+3Ch+var_3C], eax
		call	g_strdup
		mov	[ebp+80h], eax

loc_688913EF:				; CODE XREF: sub_68891274+235j
		mov	eax, [ebx+84h]
		mov	[ebp+84h], ax

loc_688913FC:				; CODE XREF: sub_68891274+12Dj
		mov	eax, [ebx+88h]
		test	eax, eax
		mov	eax, [ebp+88h]
		jz	loc_68891520
		mov	[esp+3Ch+var_3C], eax
		call	g_free
		mov	eax, [ebp+8Ch]
		mov	[esp+3Ch+var_3C], eax
		call	g_free
		movzx	eax, word ptr [ebx+90h]
		test	ax, ax
		jnz	short loc_688914B0
		mov	dword ptr [ebp+88h], 0

loc_6889143C:				; CODE XREF: sub_68891274+25Bj
		mov	eax, [ebx+8Ch]
		mov	[esp+3Ch+var_3C], eax
		call	g_strdup
		mov	[ebp+8Ch], eax
		mov	eax, [ebx+90h]
		mov	[ebp+90h], ax

loc_6889145D:				; CODE XREF: sub_68891274+2E7j
		mov	eax, [esp+3Ch+var_20]
		xor	eax, ds:__stack_chk_guard
		jnz	loc_688915C6
		add	esp, 2Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 4

loc_68891478:				; CODE XREF: sub_68891274+152j
		mov	[esp+3Ch+var_3C], eax
		call	g_malloc
		mov	[ebp+7Ch], eax
		movzx	ecx, word ptr [ebx+84h]
		mov	esi, [ebx+7Ch]
		mov	edi, eax
		rep movsb
		mov	eax, [ebx+80h]
		test	eax, eax
		jnz	loc_688913E1

loc_6889149F:				; CODE XREF: sub_68891274+167j
		mov	dword ptr [ebp+80h], 0
		jmp	loc_688913EF
; ---------------------------------------------------------------------------
		align 10h

loc_688914B0:				; CODE XREF: sub_68891274+1BCj
		mov	[esp+3Ch+var_3C], eax
		call	g_malloc
		mov	[ebp+88h], eax
		movzx	ecx, word ptr [ebx+90h]
		mov	esi, [ebx+88h]
		mov	edi, eax
		rep movsb
		jmp	loc_6889143C
; ---------------------------------------------------------------------------

loc_688914D4:				; CODE XREF: sub_68891274+FEj
		mov	[esp+3Ch+var_3C], eax
		call	g_malloc
		mov	[ebp+70h], eax
		movzx	ecx, word ptr [ebx+78h]
		mov	esi, [ebx+70h]
		mov	edi, eax
		rep movsb
		mov	eax, [ebx+74h]
		test	eax, eax
		jnz	loc_6889138A

loc_688914F5:				; CODE XREF: sub_68891274+110j
		mov	dword ptr [ebp+74h], 0
		jmp	loc_68891395
; ---------------------------------------------------------------------------
		align 4

loc_68891504:				; CODE XREF: sub_68891274+B8j
		mov	[esp+3Ch+var_3C], eax
		call	g_malloc
		mov	[ebp+64h], eax
		movzx	ecx, word ptr [ebx+6Ch]
		mov	esi, [ebx+64h]
		mov	edi, eax
		rep movsb
		jmp	loc_68891339
; ---------------------------------------------------------------------------
		align 10h

loc_68891520:				; CODE XREF: sub_68891274+196j
		test	eax, eax
		jz	short loc_68891536
		mov	[esp+3Ch+var_3C], eax
		call	g_free
		mov	dword ptr [ebp+88h], 0

loc_68891536:				; CODE XREF: sub_68891274+2AEj
		mov	eax, [ebp+8Ch]
		test	eax, eax
		jz	short loc_68891552
		mov	[esp+3Ch+var_3C], eax
		call	g_free
		mov	dword ptr [ebp+8Ch], 0

loc_68891552:				; CODE XREF: sub_68891274+2CAj
		mov	word ptr [ebp+90h], 0
		jmp	loc_6889145D
; ---------------------------------------------------------------------------

loc_68891560:				; CODE XREF: sub_68891274+8Ej
		mov	eax, [ebp+60h]
		mov	[esp+3Ch+var_3C], eax
		call	g_free
		movzx	eax, word ptr [ebx+5Eh]
		mov	[esp+3Ch+var_3C], eax
		call	g_malloc
		mov	[ebp+60h], eax
		movzx	ecx, word ptr [ebx+5Eh]
		mov	esi, [ebx+60h]
		mov	edi, eax
		rep movsb
		mov	ax, [ebx+5Eh]
		mov	[ebp+5Eh], ax
		jmp	loc_68891308
; ---------------------------------------------------------------------------
		align 4

loc_68891594:				; CODE XREF: sub_68891274+28j
		mov	[esp+3Ch+var_3C], 98h
		call	g_malloc0
		mov	ebp, eax
		mov	eax, [ebx]
		mov	[esp+3Ch+var_3C], eax
		call	g_strdup
		mov	[ebp+0], eax
		mov	eax, [esi+0C4h]
		mov	[ebp+94h], eax
		mov	[esi+0C4h], ebp
		jmp	loc_688912A2
; ---------------------------------------------------------------------------

loc_688915C6:				; CODE XREF: sub_68891274+1F3j
		call	__stack_chk_fail
sub_68891274	endp

; ---------------------------------------------------------------------------
		align 4
; Exported entry  58. aim_locate_getcaps

; =============== S U B	R O U T	I N E =======================================


		public aim_locate_getcaps
aim_locate_getcaps proc	near		; CODE XREF: sub_6888B528+CEEp
					; aim_info_extract+2DAp ...

Buf1		= dword	ptr -9Ch
Buf2		= dword	ptr -98h
Size		= dword	ptr -94h
var_90		= dword	ptr -90h
var_8C		= dword	ptr -8Ch
var_88		= dword	ptr -88h
var_84		= dword	ptr -84h
var_80		= dword	ptr -80h
var_7C		= dword	ptr -7Ch
var_78		= dword	ptr -78h
var_74		= dword	ptr -74h
var_70		= dword	ptr -70h
var_6C		= dword	ptr -6Ch
var_68		= dword	ptr -68h
var_64		= dword	ptr -64h
var_60		= dword	ptr -60h
var_5C		= dword	ptr -5Ch
var_58		= dword	ptr -58h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_20		= dword	ptr -20h
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 8Ch
		mov	edx, [esp+9Ch+arg_4]
		mov	[esp+9Ch+var_34], edx
		mov	ecx, [esp+9Ch+arg_8]
		mov	[esp+9Ch+var_30], ecx
		mov	eax, ds:__stack_chk_guard
		mov	[esp+9Ch+var_20], eax
		xor	eax, eax
		mov	[esp+9Ch+var_40], 0
		mov	[esp+9Ch+var_3C], 0
		mov	[esp+9Ch+var_38], 0
		mov	edx, [esp+9Ch+var_34]
		mov	[esp+9Ch+Buf1],	edx
		call	sub_68881818
		test	eax, eax
		jz	loc_688916D1
		nop

loc_68891624:				; CODE XREF: aim_locate_getcaps+FFj
		mov	edx, [esp+9Ch+var_30]
		cmp	[esp+9Ch+var_40], edx
		jge	loc_688916D1
		mov	[esp+9Ch+Buf2],	10h
		mov	edx, [esp+9Ch+var_34]
		mov	[esp+9Ch+Buf1],	edx
		call	sub_68881CAC
		mov	[esp+9Ch+var_44], eax
		mov	ebx, offset dword_688B0718
		mov	esi, 80000h
		xor	edi, edi
		xor	ebp, ebp
		jmp	short loc_68891671
; ---------------------------------------------------------------------------
		align 4

loc_6889165C:				; CODE XREF: aim_locate_getcaps+CAj
		inc	ebp
		mov	esi, [ebx]
		mov	edi, [ebx+4]
		add	ebx, 18h
		test	edi, 2
		jnz	loc_688916F4

loc_68891671:				; CODE XREF: aim_locate_getcaps+8Cj
		mov	[esp+9Ch+Size],	10h ; Size
		mov	eax, [esp+9Ch+var_44]
		mov	[esp+9Ch+Buf2],	eax ; Buf2
		lea	eax, [ebp+ebp*2+0]
		lea	eax, byte_688B0708[eax*8]
		mov	[esp+9Ch+Buf1],	eax ; Buf1
		call	memcmp
		test	eax, eax
		jnz	short loc_6889165C
		mov	edx, [esp+9Ch+var_3C]
		or	edx, esi
		mov	eax, [esp+9Ch+var_38]
		or	eax, edi
		mov	[esp+9Ch+var_3C], edx
		mov	[esp+9Ch+var_38], eax

loc_688916AC:				; CODE XREF: aim_locate_getcaps+1BFj
		mov	eax, [esp+9Ch+var_44]
		mov	[esp+9Ch+Buf1],	eax
		call	g_free
		add	[esp+9Ch+var_40], 10h
		mov	edx, [esp+9Ch+var_34]
		mov	[esp+9Ch+Buf1],	edx
		call	sub_68881818
		test	eax, eax
		jnz	loc_68891624

loc_688916D1:				; CODE XREF: aim_locate_getcaps+51j
					; aim_locate_getcaps+60j
		mov	eax, [esp+9Ch+var_3C]
		mov	edx, [esp+9Ch+var_38]
		mov	ecx, [esp+9Ch+var_20]
		xor	ecx, ds:__stack_chk_guard
		jnz	loc_68891790
		add	esp, 8Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_688916F4:				; CODE XREF: aim_locate_getcaps+9Fj
		mov	ecx, [esp+9Ch+var_44]
		movzx	eax, byte ptr [ecx+0Fh]
		mov	[esp+9Ch+var_58], eax
		movzx	eax, byte ptr [ecx+0Eh]
		mov	[esp+9Ch+var_5C], eax
		movzx	eax, byte ptr [ecx+0Dh]
		mov	[esp+9Ch+var_60], eax
		movzx	eax, byte ptr [ecx+0Ch]
		mov	[esp+9Ch+var_64], eax
		movzx	eax, byte ptr [ecx+0Bh]
		mov	[esp+9Ch+var_68], eax
		movzx	eax, byte ptr [ecx+0Ah]
		mov	[esp+9Ch+var_6C], eax
		movzx	eax, byte ptr [ecx+9]
		mov	[esp+9Ch+var_70], eax
		movzx	eax, byte ptr [ecx+8]
		mov	[esp+9Ch+var_74], eax
		movzx	eax, byte ptr [ecx+7]
		mov	[esp+9Ch+var_78], eax
		movzx	eax, byte ptr [ecx+6]
		mov	[esp+9Ch+var_7C], eax
		movzx	eax, byte ptr [ecx+5]
		mov	[esp+9Ch+var_80], eax
		movzx	eax, byte ptr [ecx+4]
		mov	[esp+9Ch+var_84], eax
		movzx	eax, byte ptr [ecx+3]
		mov	[esp+9Ch+var_88], eax
		movzx	eax, byte ptr [ecx+2]
		mov	[esp+9Ch+var_8C], eax
		movzx	eax, byte ptr [ecx+1]
		mov	[esp+9Ch+var_90], eax
		movzx	eax, byte ptr [ecx]
		mov	[esp+9Ch+Size],	eax
		mov	[esp+9Ch+Buf2],	offset aUnknownCapabil ; "unknown capability: {%02x%02x%02x%02x-%"...
		mov	[esp+9Ch+Buf1],	offset aOscar_7	; "oscar"
		call	purple_debug_misc
		jmp	loc_688916AC
; ---------------------------------------------------------------------------

loc_68891790:				; CODE XREF: aim_locate_getcaps+117j
		call	__stack_chk_fail
aim_locate_getcaps endp

; ---------------------------------------------------------------------------
		align 4
; Exported entry  59. aim_locate_getcaps_short

; =============== S U B	R O U T	I N E =======================================


		public aim_locate_getcaps_short
aim_locate_getcaps_short proc near	; CODE XREF: aim_info_extract+5EDp

Buf1		= dword	ptr -5Ch
Buf2		= dword	ptr -58h
Size		= dword	ptr -54h
var_50		= dword	ptr -50h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_20		= dword	ptr -20h
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 4Ch
		mov	edx, [esp+5Ch+arg_4]
		mov	[esp+5Ch+var_34], edx
		mov	ecx, [esp+5Ch+arg_8]
		mov	[esp+5Ch+var_30], ecx
		mov	eax, ds:__stack_chk_guard
		mov	[esp+5Ch+var_20], eax
		xor	eax, eax
		mov	[esp+5Ch+var_40], 0
		mov	[esp+5Ch+var_3C], 0
		mov	[esp+5Ch+var_38], 0
		mov	edx, [esp+5Ch+var_34]
		mov	[esp+5Ch+Buf1],	edx
		call	sub_68881818
		test	eax, eax
		jz	loc_68891891
		xchg	ax, ax

loc_688917E8:				; CODE XREF: aim_locate_getcaps_short+F3j
		mov	edx, [esp+5Ch+var_30]
		cmp	[esp+5Ch+var_40], edx
		jge	loc_68891891
		mov	[esp+5Ch+Buf2],	2
		mov	edx, [esp+5Ch+var_34]
		mov	[esp+5Ch+Buf1],	edx
		call	sub_68881CAC
		mov	[esp+5Ch+var_44], eax
		mov	ebx, offset dword_688B0718
		mov	esi, 80000h
		xor	edi, edi
		xor	ebp, ebp
		jmp	short loc_68891831
; ---------------------------------------------------------------------------
		align 10h

loc_68891820:				; CODE XREF: aim_locate_getcaps_short+BEj
		inc	ebp
		mov	esi, [ebx]
		mov	edi, [ebx+4]
		add	ebx, 18h
		test	edi, 2
		jnz	short loc_688918B0

loc_68891831:				; CODE XREF: aim_locate_getcaps_short+84j
		mov	[esp+5Ch+Size],	2 ; Size
		mov	eax, [esp+5Ch+var_44]
		mov	[esp+5Ch+Buf2],	eax ; Buf2
		lea	eax, [ebp+ebp*2+0]
		lea	eax, word_688B070A[eax*8]
		mov	[esp+5Ch+Buf1],	eax ; Buf1
		call	memcmp
		test	eax, eax
		jnz	short loc_68891820
		mov	edx, [esp+5Ch+var_3C]
		or	edx, esi
		mov	eax, [esp+5Ch+var_38]
		or	eax, edi
		mov	[esp+5Ch+var_3C], edx
		mov	[esp+5Ch+var_38], eax

loc_6889186C:				; CODE XREF: aim_locate_getcaps_short+13Fj
		mov	eax, [esp+5Ch+var_44]
		mov	[esp+5Ch+Buf1],	eax
		call	g_free
		add	[esp+5Ch+var_40], 2
		mov	edx, [esp+5Ch+var_34]
		mov	[esp+5Ch+Buf1],	edx
		call	sub_68881818
		test	eax, eax
		jnz	loc_688917E8

loc_68891891:				; CODE XREF: aim_locate_getcaps_short+48j
					; aim_locate_getcaps_short+58j
		mov	eax, [esp+5Ch+var_3C]
		mov	edx, [esp+5Ch+var_38]
		mov	ecx, [esp+5Ch+var_20]
		xor	ecx, ds:__stack_chk_guard
		jnz	short loc_688918D9
		add	esp, 4Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_688918B0:				; CODE XREF: aim_locate_getcaps_short+97j
		mov	ecx, [esp+5Ch+var_44]
		movzx	eax, byte ptr [ecx+1]
		mov	[esp+5Ch+var_50], eax
		movzx	eax, byte ptr [ecx]
		mov	[esp+5Ch+Size],	eax
		mov	[esp+5Ch+Buf2],	offset aUnknownShortCa ; "unknown short	capability: {%02x%02x}\n"
		mov	[esp+5Ch+Buf1],	offset aOscar_7	; "oscar"
		call	purple_debug_misc
		jmp	short loc_6889186C
; ---------------------------------------------------------------------------

loc_688918D9:				; CODE XREF: aim_locate_getcaps_short+10Bj
		call	__stack_chk_fail
aim_locate_getcaps_short endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 170. byte_stream_putcaps

; =============== S U B	R O U T	I N E =======================================


		public sub_688918E0
sub_688918E0	proc near		; CODE XREF: aim_im_sendch2_chatinvite+21Fp
					; aim_im_sendch2_icon+169p ...

var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_30		= dword	ptr -30h
var_20		= dword	ptr -20h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 3Ch
		mov	edi, [esp+4Ch+arg_0]
		mov	edx, [esp+4Ch+arg_4]
		mov	[esp+4Ch+var_30], edx
		mov	ebp, [esp+4Ch+arg_8]
		mov	eax, ds:__stack_chk_guard
		mov	[esp+4Ch+var_20], eax
		xor	eax, eax
		test	edi, edi
		jz	short loc_6889196E
		mov	ebx, offset dword_688B0700
		xor	esi, esi
		jmp	short loc_68891914
; ---------------------------------------------------------------------------
		align 10h

loc_68891910:				; CODE XREF: sub_688918E0+56j
					; sub_688918E0+76j
		inc	esi
		add	ebx, 18h

loc_68891914:				; CODE XREF: sub_688918E0+2Dj
		mov	[esp+4Ch+var_4C], edi
		call	sub_68881818
		test	eax, eax
		jz	short loc_6889195A
		mov	edx, [ebx]
		mov	eax, [ebx+4]
		mov	ecx, eax
		xor	ecx, 2
		or	ecx, edx
		jz	short loc_68891958
		and	edx, [esp+4Ch+var_30]
		and	eax, ebp
		or	eax, edx
		jz	short loc_68891910
		mov	[esp+4Ch+var_44], 10h
		lea	eax, [esi+esi*2]
		lea	eax, byte_688B0708[eax*8]
		mov	[esp+4Ch+var_48], eax
		mov	[esp+4Ch+var_4C], edi
		call	sub_688820A0
		jmp	short loc_68891910
; ---------------------------------------------------------------------------

loc_68891958:				; CODE XREF: sub_688918E0+4Cj
		xor	eax, eax

loc_6889195A:				; CODE XREF: sub_688918E0+3Ej
					; sub_688918E0+93j
		mov	edx, [esp+4Ch+var_20]
		xor	edx, ds:__stack_chk_guard
		jnz	short loc_68891975
		add	esp, 3Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_6889196E:				; CODE XREF: sub_688918E0+24j
		mov	eax, 0FFFFFFEAh
		jmp	short loc_6889195A
; ---------------------------------------------------------------------------

loc_68891975:				; CODE XREF: sub_688918E0+84j
		call	__stack_chk_fail
sub_688918E0	endp

; ---------------------------------------------------------------------------
		align 4
; Exported entry  55. aim_info_free

; =============== S U B	R O U T	I N E =======================================


		public aim_info_free
aim_info_free	proc near		; CODE XREF: sub_68886198+D0p
					; sub_68886554+223p ...

var_2C		= dword	ptr -2Ch
var_10		= dword	ptr -10h
arg_0		= dword	ptr  4

		push	ebx
		sub	esp, 28h
		mov	ebx, [esp+2Ch+arg_0]
		mov	eax, ds:__stack_chk_guard
		mov	[esp+2Ch+var_10], eax
		xor	eax, eax
		mov	eax, [ebx]
		mov	[esp+2Ch+var_2C], eax
		call	g_free
		mov	eax, [ebx+60h]
		mov	[esp+2Ch+var_2C], eax
		call	g_free
		mov	eax, [ebx+64h]
		mov	[esp+2Ch+var_2C], eax
		call	g_free
		mov	eax, [ebx+68h]
		mov	[esp+2Ch+var_2C], eax
		call	g_free
		mov	eax, [ebx+70h]
		mov	[esp+2Ch+var_2C], eax
		call	g_free
		mov	eax, [ebx+74h]
		mov	[esp+2Ch+var_2C], eax
		call	g_free
		mov	eax, [ebx+7Ch]
		mov	[esp+2Ch+var_2C], eax
		call	g_free
		mov	eax, [ebx+80h]
		mov	[esp+2Ch+var_2C], eax
		call	g_free
		mov	eax, [ebx+88h]
		mov	[esp+2Ch+var_2C], eax
		call	g_free
		mov	eax, [esp+2Ch+var_10]
		xor	eax, ds:__stack_chk_guard
		jnz	short loc_68891A16
		mov	eax, [ebx+8Ch]
		mov	[esp+2Ch+arg_0], eax
		add	esp, 28h
		pop	ebx
		jmp	g_free
; ---------------------------------------------------------------------------

loc_68891A16:				; CODE XREF: aim_info_free+85j
		call	__stack_chk_fail
; ---------------------------------------------------------------------------
		align 4

loc_68891A1C:				; DATA XREF: locate_modfirst+52o
		push	esi
		push	ebx
		sub	esp, 24h
		mov	esi, [esp+2Ch+arg_0]
		mov	eax, ds:__stack_chk_guard
		mov	[esp+2Ch+var_10], eax
		xor	eax, eax
		mov	ebx, [esi+0C4h]
		test	ebx, ebx
		jz	short loc_68891A62
		xchg	ax, ax

loc_68891A3C:				; CODE XREF: aim_info_free+E4j
		mov	eax, [ebx+94h]
		mov	[esi+0C4h], eax
		mov	[esp+2Ch+var_2C], ebx
		call	aim_info_free
		mov	[esp+2Ch+var_2C], ebx
		call	g_free
		mov	ebx, [esi+0C4h]
		test	ebx, ebx
		jnz	short loc_68891A3C

loc_68891A62:				; CODE XREF: aim_info_free+BCj
		mov	eax, [esp+2Ch+var_10]
		xor	eax, ds:__stack_chk_guard
		jnz	short loc_68891A74
		add	esp, 24h
		pop	ebx
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_68891A74:				; CODE XREF: aim_info_free+F0j
		call	__stack_chk_fail
aim_info_free	endp

; ---------------------------------------------------------------------------
		align 4
; Exported entry  54. aim_info_extract

; =============== S U B	R O U T	I N E =======================================


		public aim_info_extract
aim_info_extract proc near		; CODE XREF: sub_68886198+83p
					; sub_68886554+1B8p ...

Str1		= dword	ptr -7Ch
Str2		= dword	ptr -78h
var_74		= dword	ptr -74h
var_70		= dword	ptr -70h
var_6C		= dword	ptr -6Ch
var_68		= dword	ptr -68h
var_50		= dword	ptr -50h
var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_20		= dword	ptr -20h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 6Ch
		mov	eax, [esp+7Ch+arg_0]
		mov	[esp+7Ch+var_38], eax
		mov	ebx, [esp+7Ch+arg_4]
		mov	edx, [esp+7Ch+arg_8]
		mov	[esp+7Ch+var_40], edx
		mov	eax, ds:__stack_chk_guard
		mov	[esp+7Ch+var_20], eax
		xor	eax, eax
		test	ebx, ebx
		jz	loc_68892146
		test	edx, edx
		jz	loc_68892146
		mov	ecx, 98h
		mov	edi, edx
		rep stosb
		mov	[esp+7Ch+Str1],	ebx
		call	sub_68881990
		movzx	eax, al
		mov	[esp+7Ch+Str2],	eax
		mov	[esp+7Ch+Str1],	ebx
		call	sub_68881D24
		mov	edx, [esp+7Ch+var_40]
		mov	[edx], eax
		mov	[esp+7Ch+Str1],	ebx
		call	sub_688819F0
		mov	edx, [esp+7Ch+var_40]
		mov	[edx+4], ax
		mov	[esp+7Ch+Str1],	ebx
		call	sub_688819F0
		test	ax, ax
		jz	loc_68891C26
		movzx	eax, ax
		inc	eax
		mov	[esp+7Ch+var_44], eax
		mov	[esp+7Ch+var_4C], 1
		mov	eax, [esp+7Ch+var_40]
		add	eax, 30h
		mov	[esp+7Ch+var_30], eax
		mov	edi, ebx
		mov	esi, [esp+7Ch+var_40]
		nop

loc_68891B24:				; CODE XREF: aim_info_extract+1A4j
		mov	[esp+7Ch+Str1],	edi
		call	sub_688819F0
		mov	ebp, eax
		mov	[esp+7Ch+Str1],	edi
		call	sub_688819F0
		movzx	ebx, ax
		mov	[esp+7Ch+Str1],	edi
		call	sub_68881848
		mov	[esp+7Ch+var_48], eax
		mov	[esp+7Ch+var_50], ebx
		mov	[esp+7Ch+Str1],	edi
		call	sub_68881818
		cmp	ebx, eax
		jnb	loc_68891C50

loc_68891B59:				; CODE XREF: aim_info_extract+1E0j
		mov	edx, [esp+7Ch+var_50]
		add	edx, [esp+7Ch+var_48]
		mov	[esp+7Ch+var_50], edx
		cmp	bp, 1
		jz	loc_68891C64
		cmp	bp, 2
		jz	loc_68891C78
		cmp	bp, 3
		jz	loc_68891C90
		cmp	bp, 4
		jz	loc_68891CA4
		cmp	bp, 5
		jz	loc_68891CBC
		cmp	bp, 6
		jz	loc_68891CD0
		cmp	bp, 8
		jz	short loc_68891C04
		cmp	bp, 0Ah
		jz	loc_68891CF0
		cmp	bp, 0Ch
		jz	loc_68891D04
		cmp	bp, 0Dh
		jz	loc_68891D28
		cmp	bp, 0Eh
		jz	short loc_68891C04
		lea	eax, [ebp-0Fh]
		cmp	ax, 1
		jbe	loc_68892028
		cmp	bp, 14h
		jz	loc_68892040
		cmp	bp, 19h
		jz	loc_68892050
		cmp	bp, 1Ah
		jz	short loc_68891C04
		cmp	bp, 1Bh
		jz	short loc_68891C04
		cmp	bp, 1Dh
		jz	loc_68891DC0
		xchg	ax, ax

loc_68891C04:				; CODE XREF: aim_info_extract+129j
					; aim_info_extract+14Dj ...
		mov	eax, [esp+7Ch+var_50]
		mov	[esp+7Ch+Str2],	eax
		mov	[esp+7Ch+Str1],	edi
		call	sub_68881874
		inc	[esp+7Ch+var_4C]
		mov	edx, [esp+7Ch+var_44]
		cmp	[esp+7Ch+var_4C], edx
		jnz	loc_68891B24

loc_68891C26:				; CODE XREF: aim_info_extract+80j
		mov	edx, [esp+7Ch+var_40]
		mov	eax, [esp+7Ch+var_38]
		call	sub_68891274
		xor	eax, eax

loc_68891C35:				; CODE XREF: aim_info_extract+6CFj
		mov	edx, [esp+7Ch+var_20]
		xor	edx, ds:__stack_chk_guard
		jnz	loc_688921A1
		add	esp, 6Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_68891C50:				; CODE XREF: aim_info_extract+D7j
		mov	[esp+7Ch+Str1],	edi
		call	sub_68881818
		mov	[esp+7Ch+var_50], eax
		jmp	loc_68891B59
; ---------------------------------------------------------------------------
		align 4

loc_68891C64:				; CODE XREF: aim_info_extract+EDj
		mov	[esp+7Ch+Str1],	edi
		call	sub_688819F0
		mov	[esi+8], ax
		or	dword ptr [esi+58h], 1
		jmp	short loc_68891C04
; ---------------------------------------------------------------------------
		align 4

loc_68891C78:				; CODE XREF: aim_info_extract+F7j
		mov	[esp+7Ch+Str1],	edi
		call	sub_68881A60
		mov	[esi+0Ch], eax
		or	dword ptr [esi+58h], 200h
		jmp	loc_68891C04
; ---------------------------------------------------------------------------
		align 10h

loc_68891C90:				; CODE XREF: aim_info_extract+101j
		mov	[esp+7Ch+Str1],	edi
		call	sub_68881A60
		mov	[esi+14h], eax
		or	dword ptr [esi+58h], 4
		jmp	loc_68891C04
; ---------------------------------------------------------------------------

loc_68891CA4:				; CODE XREF: aim_info_extract+10Bj
		mov	[esp+7Ch+Str1],	edi
		call	sub_688819F0
		mov	[esi+6], ax
		or	dword ptr [esi+58h], 8
		jmp	loc_68891C04
; ---------------------------------------------------------------------------
		align 4

loc_68891CBC:				; CODE XREF: aim_info_extract+115j
		mov	[esp+7Ch+Str1],	edi
		call	sub_68881A60
		mov	[esi+10h], eax
		or	dword ptr [esi+58h], 2
		jmp	loc_68891C04
; ---------------------------------------------------------------------------

loc_68891CD0:				; CODE XREF: aim_info_extract+11Fj
		mov	[esp+7Ch+Str1],	edi
		call	sub_688819F0
		mov	[esp+7Ch+Str1],	edi
		call	sub_688819F0
		movzx	eax, ax
		mov	[esi+28h], eax
		or	dword ptr [esi+58h], 10h
		jmp	loc_68891C04
; ---------------------------------------------------------------------------
		align 10h

loc_68891CF0:				; CODE XREF: aim_info_extract+12Fj
		mov	[esp+7Ch+Str1],	edi
		call	sub_68881A60
		mov	[esi+2Ch], eax
		or	dword ptr [esi+58h], 20h
		jmp	loc_68891C04
; ---------------------------------------------------------------------------

loc_68891D04:				; CODE XREF: aim_info_extract+139j
		mov	[esp+7Ch+var_74], 25h
		mov	eax, [esp+7Ch+var_30]
		mov	[esp+7Ch+Str2],	eax
		mov	[esp+7Ch+Str1],	edi
		call	sub_68881C3C
		or	dword ptr [esi+58h], 40h
		jmp	loc_68891C04
; ---------------------------------------------------------------------------
		align 4

loc_68891D28:				; CODE XREF: aim_info_extract+143j
		mov	edx, [esp+7Ch+var_38]
		mov	eax, [edx+68h]
		mov	[esp+7Ch+Str1],	eax
		call	purple_connection_get_account
		mov	ebp, eax
		mov	eax, [esi+20h]
		mov	[esp+7Ch+var_3C], eax
		mov	edx, [esi+24h]
		mov	[esp+7Ch+var_34], edx
		mov	[esp+7Ch+var_74], ebx
		mov	[esp+7Ch+Str2],	edi
		mov	eax, [esp+7Ch+var_38]
		mov	[esp+7Ch+Str1],	eax
		call	aim_locate_getcaps
		or	eax, [esp+7Ch+var_3C]
		mov	[esi+20h], eax
		or	edx, [esp+7Ch+var_34]
		mov	[esi+24h], edx
		or	dword ptr [esi+58h], 80h
		mov	eax, [esp+7Ch+var_48]
		mov	[esp+7Ch+Str2],	eax
		mov	[esp+7Ch+Str1],	edi
		call	sub_68881874
		mov	edx, ebx
		mov	eax, edi
		call	sub_68891114
		test	eax, eax
		jz	loc_6889212B
		mov	[esp+7Ch+var_68], 0
		mov	[esp+7Ch+var_6C], eax
		mov	[esp+7Ch+var_70], offset aMood_0 ; "mood"
		mov	[esp+7Ch+var_74], offset aMood_0 ; "mood"
		mov	eax, [esi]
		mov	[esp+7Ch+Str2],	eax
		mov	[esp+7Ch+Str1],	ebp
		call	purple_prpl_got_user_status
		jmp	loc_68891C04
; ---------------------------------------------------------------------------

loc_68891DC0:				; CODE XREF: aim_info_extract+180j
		mov	ebp, esi
		jmp	short loc_68891DDC
; ---------------------------------------------------------------------------

loc_68891DC4:				; CODE XREF: aim_info_extract:loc_68891E48j
		dec	bx
		jz	loc_68891FE0

loc_68891DCC:				; CODE XREF: aim_info_extract+3E0j
					; aim_info_extract+482j ...
		mov	edx, [esp+7Ch+var_3C]
		mov	[esp+7Ch+Str2],	edx
		mov	[esp+7Ch+Str1],	edi
		call	sub_68881874

loc_68891DDC:				; CODE XREF: aim_info_extract+346j
		mov	[esp+7Ch+Str1],	edi
		call	sub_68881848
		add	eax, 4
		cmp	[esp+7Ch+var_50], eax
		jl	loc_68892124
		mov	[esp+7Ch+Str1],	edi
		call	sub_688819F0
		mov	ebx, eax
		mov	[esp+7Ch+Str1],	edi
		call	sub_68881990
		mov	byte ptr [esp+7Ch+var_34], al
		mov	[esp+7Ch+Str1],	edi
		call	sub_68881990
		mov	byte ptr [esp+7Ch+var_48], al
		mov	[esp+7Ch+Str1],	edi
		call	sub_68881848
		mov	[esp+7Ch+var_3C], eax
		movzx	esi, byte ptr [esp+7Ch+var_48]
		mov	[esp+7Ch+Str1],	edi
		call	sub_68881818
		cmp	esi, eax
		jnb	loc_68891F04
		mov	eax, esi
		add	eax, [esp+7Ch+var_3C]
		mov	[esp+7Ch+var_3C], eax
		cmp	bx, 2
		jz	loc_68891F1E

loc_68891E48:				; CODE XREF: aim_info_extract+49Cj
		jbe	loc_68891DC4
		cmp	bx, 9
		jz	loc_68891F7C
		cmp	bx, 0Eh
		jnz	loc_68891DCC
		mov	edx, [esp+7Ch+var_38]
		mov	eax, [edx+68h]
		mov	[esp+7Ch+Str1],	eax
		call	purple_connection_get_account
		mov	[esp+7Ch+var_48], eax
		mov	[esp+7Ch+Str2],	esi
		mov	[esp+7Ch+Str1],	edi
		call	sub_68881D24
		mov	ebx, eax
		cmp	byte ptr [eax],	0
		jz	loc_688920A0
		mov	eax, offset aIcqmood0 ;	"icqmood0"
		xor	esi, esi
		jmp	short loc_68891EA8
; ---------------------------------------------------------------------------
		align 4

loc_68891E98:				; CODE XREF: aim_info_extract+43Aj
		inc	esi
		mov	eax, ds:off_688B0C60[esi*8]
		test	eax, eax
		jz	loc_68892086

loc_68891EA8:				; CODE XREF: aim_info_extract+417j
		mov	[esp+7Ch+Str2],	eax ; Str2
		mov	[esp+7Ch+Str1],	ebx ; Str1
		call	strcmp
		test	eax, eax
		jnz	short loc_68891E98
		mov	esi, ds:off_688B0C64[esi*8]
		test	esi, esi
		jz	loc_68892086
		mov	[esp+7Ch+Str1],	ebx
		call	g_free
		mov	[esp+7Ch+var_68], 0
		mov	[esp+7Ch+var_6C], esi
		mov	[esp+7Ch+var_70], offset aMood_0 ; "mood"
		mov	[esp+7Ch+var_74], offset aMood_0 ; "mood"
		mov	eax, [ebp+0]
		mov	[esp+7Ch+Str2],	eax
		mov	eax, [esp+7Ch+var_48]
		mov	[esp+7Ch+Str1],	eax
		call	purple_prpl_got_user_status
		jmp	loc_68891DCC
; ---------------------------------------------------------------------------
		align 4

loc_68891F04:				; CODE XREF: aim_info_extract+3B2j
		mov	[esp+7Ch+Str1],	edi
		call	sub_68881818
		add	eax, [esp+7Ch+var_3C]
		mov	[esp+7Ch+var_3C], eax
		cmp	bx, 2
		jnz	loc_68891E48

loc_68891F1E:				; CODE XREF: aim_info_extract+3C6j
		mov	eax, [ebp+70h]
		mov	[esp+7Ch+Str1],	eax
		call	g_free
		mov	eax, [ebp+74h]
		mov	[esp+7Ch+Str1],	eax
		call	g_free
		cmp	byte ptr [esp+7Ch+var_48], 3
		jbe	loc_688920C8
		mov	[esp+7Ch+Str1],	edi
		call	sub_688819F0
		mov	[ebp+78h], ax
		movzx	eax, ax
		mov	[esp+7Ch+Str2],	eax
		mov	[esp+7Ch+Str1],	edi
		call	sub_68881D24
		mov	[ebp+70h], eax
		mov	[esp+7Ch+Str1],	edi
		call	sub_688819F0
		dec	ax
		jz	loc_6889217A

loc_68891F6D:				; CODE XREF: aim_info_extract+672j
		mov	dword ptr [ebp+74h], 0
		jmp	loc_68891DCC
; ---------------------------------------------------------------------------
		align 4

loc_68891F7C:				; CODE XREF: aim_info_extract+3D6j
		mov	eax, [ebp+7Ch]
		mov	[esp+7Ch+Str1],	eax
		call	g_free
		mov	eax, [ebp+80h]
		mov	[esp+7Ch+Str1],	eax
		call	g_free
		cmp	byte ptr [esp+7Ch+var_48], 3
		jbe	loc_688920F4
		mov	[esp+7Ch+Str1],	edi
		call	sub_688819F0
		mov	[ebp+84h], ax
		movzx	eax, ax
		mov	[esp+7Ch+Str2],	eax
		mov	[esp+7Ch+Str1],	edi
		call	sub_68881D24
		mov	[ebp+7Ch], eax
		mov	[esp+7Ch+Str1],	edi
		call	sub_688819F0
		dec	ax
		jz	loc_68892150

loc_68891FD1:				; CODE XREF: aim_info_extract+6A1j
		mov	dword ptr [ebp+80h], 0
		jmp	loc_68891DCC
; ---------------------------------------------------------------------------

loc_68891FE0:				; CODE XREF: aim_info_extract+34Aj
		cmp	byte ptr [esp+7Ch+var_48], 0
		jz	loc_68891DCC
		cmp	byte ptr [esp+7Ch+var_34], 1
		ja	loc_68891DCC
		mov	eax, [ebp+60h]
		mov	[esp+7Ch+Str1],	eax
		call	g_free
		mov	al, byte ptr [esp+7Ch+var_34]
		mov	[ebp+5Ch], al
		mov	[esp+7Ch+Str2],	esi
		mov	[esp+7Ch+Str1],	edi
		call	sub_68881CAC
		mov	[ebp+60h], eax
		movzx	eax, byte ptr [esp+7Ch+var_48]
		mov	[ebp+5Eh], ax
		jmp	loc_68891DCC
; ---------------------------------------------------------------------------
		align 4

loc_68892028:				; CODE XREF: aim_info_extract+156j
		mov	[esp+7Ch+Str1],	edi
		call	sub_68881A60
		mov	[esi+18h], eax
		or	dword ptr [esi+58h], 100h
		jmp	loc_68891C04
; ---------------------------------------------------------------------------
		align 10h

loc_68892040:				; CODE XREF: aim_info_extract+160j
		mov	[esp+7Ch+Str1],	edi
		call	sub_68881990
		jmp	loc_68891C04
; ---------------------------------------------------------------------------
		align 10h

loc_68892050:				; CODE XREF: aim_info_extract+16Aj
		mov	edx, [esi+20h]
		mov	[esp+7Ch+var_48], edx
		mov	ebp, [esi+24h]
		mov	[esp+7Ch+var_74], ebx
		mov	[esp+7Ch+Str2],	edi
		mov	eax, [esp+7Ch+var_38]
		mov	[esp+7Ch+Str1],	eax
		call	aim_locate_getcaps_short
		or	eax, [esp+7Ch+var_48]
		mov	[esi+20h], eax
		or	edx, ebp
		mov	[esi+24h], edx
		or	dword ptr [esi+58h], 80h
		jmp	loc_68891C04
; ---------------------------------------------------------------------------

loc_68892086:				; CODE XREF: aim_info_extract+426j
					; aim_info_extract+445j
		mov	[esp+7Ch+var_74], ebx
		mov	[esp+7Ch+Str2],	offset aUnknownIcqmood ; "Unknown icqmood: %s\n"
		mov	[esp+7Ch+Str1],	offset aOscar_7	; "oscar"
		call	purple_debug_warning
		xchg	ax, ax

loc_688920A0:				; CODE XREF: aim_info_extract+40Aj
		mov	[esp+7Ch+Str1],	ebx
		call	g_free
		mov	[esp+7Ch+var_74], offset aMood_0 ; "mood"
		mov	eax, [ebp+0]
		mov	[esp+7Ch+Str2],	eax
		mov	eax, [esp+7Ch+var_48]
		mov	[esp+7Ch+Str1],	eax
		call	purple_prpl_got_user_status_deactive
		jmp	loc_68891DCC
; ---------------------------------------------------------------------------

loc_688920C8:				; CODE XREF: aim_info_extract+4BDj
		movzx	eax, byte ptr [esp+7Ch+var_48]
		mov	[esp+7Ch+Str2],	eax
		mov	[esp+7Ch+Str1],	edi
		call	sub_68881904
		mov	word ptr [ebp+78h], 0
		mov	[esp+7Ch+Str1],	offset byte_688B0618
		call	g_strdup
		mov	[ebp+70h], eax
		jmp	loc_68891F6D
; ---------------------------------------------------------------------------
		align 4

loc_688920F4:				; CODE XREF: aim_info_extract+51Ej
		movzx	eax, byte ptr [esp+7Ch+var_48]
		mov	[esp+7Ch+Str2],	eax
		mov	[esp+7Ch+Str1],	edi
		call	sub_68881904
		mov	word ptr [ebp+84h], 0
		mov	[esp+7Ch+Str1],	offset byte_688B0618
		call	g_strdup
		mov	[ebp+7Ch], eax
		jmp	loc_68891FD1
; ---------------------------------------------------------------------------
		align 4

loc_68892124:				; CODE XREF: aim_info_extract+36Fj
		mov	esi, ebp
		jmp	loc_68891C04
; ---------------------------------------------------------------------------

loc_6889212B:				; CODE XREF: aim_info_extract+30Fj
		mov	[esp+7Ch+var_74], offset aMood_0 ; "mood"
		mov	eax, [esi]
		mov	[esp+7Ch+Str2],	eax
		mov	[esp+7Ch+Str1],	ebp
		call	purple_prpl_got_user_status_deactive
		jmp	loc_68891C04
; ---------------------------------------------------------------------------

loc_68892146:				; CODE XREF: aim_info_extract+31j
					; aim_info_extract+39j
		mov	eax, 0FFFFFFEAh
		jmp	loc_68891C35
; ---------------------------------------------------------------------------

loc_68892150:				; CODE XREF: aim_info_extract+54Fj
		mov	[esp+7Ch+Str1],	edi
		call	sub_688819F0
		mov	[esp+7Ch+Str1],	edi
		call	sub_688819F0
		movzx	eax, ax
		mov	[esp+7Ch+Str2],	eax
		mov	[esp+7Ch+Str1],	edi
		call	sub_68881D24
		mov	[ebp+80h], eax
		jmp	loc_68891DCC
; ---------------------------------------------------------------------------

loc_6889217A:				; CODE XREF: aim_info_extract+4EBj
		mov	[esp+7Ch+Str1],	edi
		call	sub_688819F0
		mov	[esp+7Ch+Str1],	edi
		call	sub_688819F0
		movzx	eax, ax
		mov	[esp+7Ch+Str2],	eax
		mov	[esp+7Ch+Str1],	edi
		call	sub_68881D24
		mov	[ebp+74h], eax
		jmp	loc_68891DCC
; ---------------------------------------------------------------------------

loc_688921A1:				; CODE XREF: aim_info_extract+1C3j
		call	__stack_chk_fail
aim_info_extract endp

; ---------------------------------------------------------------------------
		align 4

; =============== S U B	R O U T	I N E =======================================


sub_688921A8	proc near		; DATA XREF: locate_modfirst+4Bo

var_5C		= dword	ptr -5Ch
var_58		= dword	ptr -58h
var_54		= dword	ptr -54h
var_50		= dword	ptr -50h
var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= byte ptr -2Ch
var_20		= dword	ptr -20h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 4Ch
		mov	eax, [esp+5Ch+arg_0]
		mov	[esp+5Ch+var_34], eax
		mov	ebp, [esp+5Ch+arg_4]
		mov	edi, [esp+5Ch+arg_C]
		mov	ebx, [esp+5Ch+arg_10]
		mov	esi, [esp+5Ch+arg_14]
		mov	edx, ds:__stack_chk_guard
		mov	[esp+5Ch+var_20], edx
		xor	edx, edx
		mov	ax, [ebx+2]
		cmp	ax, 1
		jz	loc_68892418
		cmp	ax, 3
		jz	loc_68892494
		cmp	ax, 6
		jz	short loc_6889220C
		xor	eax, eax

loc_688921F3:				; CODE XREF: sub_688921A8+268j
					; sub_688921A8+2E4j ...
		mov	edx, [esp+5Ch+var_20]
		xor	edx, ds:__stack_chk_guard
		jnz	loc_688925CE
		add	esp, 4Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 4

loc_6889220C:				; CODE XREF: sub_688921A8+47j
		mov	[esp+5Ch+var_5C], 98h
		call	g_malloc
		mov	ebp, eax
		mov	[esp+5Ch+var_54], eax
		mov	[esp+5Ch+var_58], esi
		mov	eax, [esp+5Ch+var_34]
		mov	[esp+5Ch+var_5C], eax
		call	aim_info_extract
		mov	[esp+5Ch+var_5C], esi
		call	aim_tlvlist_read
		mov	[esp+5Ch+var_30], eax
		mov	[esp+5Ch+var_54], 1
		mov	[esp+5Ch+var_58], 1
		mov	[esp+5Ch+var_5C], eax
		call	aim_tlv_getstr
		mov	[ebp+68h], eax
		mov	[esp+5Ch+var_54], 1
		mov	[esp+5Ch+var_58], 2
		mov	eax, [esp+5Ch+var_30]
		mov	[esp+5Ch+var_5C], eax
		call	aim_tlv_gettlv
		mov	ebx, eax
		test	eax, eax
		jz	short loc_68892299
		movzx	eax, word ptr [eax+2]
		mov	[esp+5Ch+var_5C], eax
		call	g_malloc
		mov	[ebp+64h], eax
		movzx	ecx, word ptr [ebx+2]
		mov	esi, [ebx+4]
		mov	edi, eax
		rep movsb
		mov	ax, [ebx+2]
		mov	[ebp+6Ch], ax

loc_68892299:				; CODE XREF: sub_688921A8+CDj
		mov	[esp+5Ch+var_54], 1
		mov	[esp+5Ch+var_58], 3
		mov	eax, [esp+5Ch+var_30]
		mov	[esp+5Ch+var_5C], eax
		call	aim_tlv_getstr
		mov	[ebp+8Ch], eax
		mov	[esp+5Ch+var_54], 1
		mov	[esp+5Ch+var_58], 4
		mov	eax, [esp+5Ch+var_30]
		mov	[esp+5Ch+var_5C], eax
		call	aim_tlv_gettlv
		mov	ebx, eax
		test	eax, eax
		jz	short loc_68892305
		movzx	eax, word ptr [eax+2]
		mov	[esp+5Ch+var_5C], eax
		call	g_malloc
		mov	[ebp+88h], eax
		movzx	ecx, word ptr [ebx+2]
		mov	esi, [ebx+4]
		mov	edi, eax
		rep movsb
		mov	ax, [ebx+2]
		mov	[ebp+90h], ax

loc_68892305:				; CODE XREF: sub_688921A8+133j
		mov	[esp+5Ch+var_54], 1
		mov	[esp+5Ch+var_58], 5
		mov	eax, [esp+5Ch+var_30]
		mov	[esp+5Ch+var_5C], eax
		call	aim_tlv_gettlv
		mov	ebx, eax
		test	eax, eax
		jz	loc_688923C2
		mov	edx, [esp+5Ch+var_34]
		mov	eax, [edx+68h]
		mov	[esp+5Ch+var_5C], eax
		call	purple_connection_get_account
		mov	edi, eax
		movzx	eax, word ptr [ebx+2]
		mov	[esp+5Ch+var_54], eax
		mov	eax, [ebx+4]
		mov	[esp+5Ch+var_58], eax
		lea	esi, [esp+5Ch+var_2C]
		mov	[esp+5Ch+var_5C], esi
		call	sub_68881798
		movzx	eax, word ptr [ebx+2]
		mov	[esp+5Ch+var_54], eax
		mov	[esp+5Ch+var_58], esi
		mov	eax, [esp+5Ch+var_34]
		mov	[esp+5Ch+var_5C], eax
		call	aim_locate_getcaps
		mov	[ebp+20h], eax
		mov	[ebp+24h], edx
		mov	[esp+5Ch+var_5C], esi
		call	sub_688818CC
		mov	dword ptr [ebp+58h], 80h
		movzx	edx, word ptr [ebx+2]
		mov	eax, esi
		call	sub_68891114
		test	eax, eax
		jz	loc_68892570
		mov	[esp+5Ch+var_48], 0
		mov	[esp+5Ch+var_4C], eax
		mov	[esp+5Ch+var_50], offset aMood_0 ; "mood"
		mov	[esp+5Ch+var_54], offset aMood_0 ; "mood"
		mov	eax, [ebp+0]
		mov	[esp+5Ch+var_58], eax
		mov	[esp+5Ch+var_5C], edi
		call	purple_prpl_got_user_status

loc_688923C2:				; CODE XREF: sub_688921A8+17Dj
					; sub_688921A8+3DFj
		mov	eax, [esp+5Ch+var_30]
		mov	[esp+5Ch+var_5C], eax
		call	aim_tlvlist_free
		mov	edx, ebp
		mov	eax, [esp+5Ch+var_34]
		call	sub_68891274
		mov	eax, [ebp+0]
		mov	[esp+5Ch+var_58], eax
		mov	edx, [esp+5Ch+var_34]
		mov	[esp+5Ch+var_5C], edx
		call	aim_locate_finduserinfo
		mov	ebx, eax
		mov	[esp+5Ch+var_5C], ebp
		call	aim_info_free
		mov	[esp+5Ch+var_5C], ebp
		call	g_free
		mov	[esp+5Ch+var_58], ebx
		mov	eax, [esp+5Ch+var_34]
		mov	[esp+5Ch+var_5C], eax
		call	oscar_user_info_display_aim
		xor	eax, eax
		jmp	loc_688921F3
; ---------------------------------------------------------------------------
		align 4

loc_68892418:				; CODE XREF: sub_688921A8+33j
		mov	eax, [ebx+8]
		mov	[esp+5Ch+var_58], eax
		mov	eax, [esp+5Ch+var_34]
		mov	[esp+5Ch+var_5C], eax
		call	aim_remsnac
		mov	ebx, eax
		test	eax, eax
		jz	loc_688925B3
		movzx	eax, word ptr [eax+4]
		cmp	ax, 2
		jz	short loc_6889244A
		cmp	word ptr [ebx+6], 15h
		jnz	loc_68892530

loc_6889244A:				; CODE XREF: sub_688921A8+295j
		mov	edi, [ebx+0Ch]
		test	edi, edi
		jz	loc_68892590
		mov	[esp+5Ch+var_5C], esi
		call	sub_688819F0
		mov	[esp+5Ch+var_54], edi
		movzx	eax, ax
		mov	[esp+5Ch+var_58], eax
		mov	edx, [esp+5Ch+var_34]
		mov	[esp+5Ch+var_5C], edx
		call	oscar_user_info_display_error
		mov	eax, [ebx+0Ch]
		mov	[esp+5Ch+var_5C], eax
		call	g_free
		mov	[esp+5Ch+var_5C], ebx
		call	g_free
		mov	eax, 1
		jmp	loc_688921F3
; ---------------------------------------------------------------------------
		align 4

loc_68892494:				; CODE XREF: sub_688921A8+3Dj
		mov	[esp+5Ch+var_5C], esi
		call	aim_tlvlist_read
		mov	esi, eax
		mov	[esp+5Ch+var_54], 1
		mov	[esp+5Ch+var_58], 1
		mov	[esp+5Ch+var_5C], eax
		call	aim_tlv_gettlv
		test	eax, eax
		jz	loc_68892564
		mov	[esp+5Ch+var_54], 1
		mov	[esp+5Ch+var_58], 1
		mov	[esp+5Ch+var_5C], esi
		call	aim_tlv_get16
		mov	word ptr [esp+5Ch+var_30], ax

loc_688924DB:				; CODE XREF: sub_688921A8+3C3j
		movzx	eax, word ptr [ebx+2]
		mov	[esp+5Ch+var_54], eax
		movzx	eax, word ptr [ebx]
		mov	[esp+5Ch+var_58], eax
		mov	eax, [esp+5Ch+var_34]
		mov	[esp+5Ch+var_5C], eax
		call	aim_callhandler
		test	eax, eax
		jz	loc_6889258C
		movzx	edx, word ptr [esp+5Ch+var_30]
		mov	[esp+5Ch+var_50], edx
		mov	[esp+5Ch+var_54], edi
		mov	[esp+5Ch+var_58], ebp
		mov	edx, [esp+5Ch+var_34]
		mov	[esp+5Ch+var_5C], edx
		call	eax

loc_68892518:				; CODE XREF: sub_688921A8+3E6j
		mov	[esp+5Ch+var_5C], esi
		mov	[esp+5Ch+var_38], eax
		call	aim_tlvlist_free
		mov	eax, [esp+5Ch+var_38]
		jmp	loc_688921F3
; ---------------------------------------------------------------------------
		align 10h

loc_68892530:				; CODE XREF: sub_688921A8+29Cj
		mov	[esp+5Ch+var_54], eax
		mov	[esp+5Ch+var_58], offset aLocateErrorRec ; "locate error: received response from in"...
		mov	[esp+5Ch+var_5C], offset aOscar_7 ; "oscar"
		call	purple_debug_misc
		mov	eax, [ebx+0Ch]
		mov	[esp+5Ch+var_5C], eax
		call	g_free
		mov	[esp+5Ch+var_5C], ebx
		call	g_free
		xor	eax, eax
		jmp	loc_688921F3
; ---------------------------------------------------------------------------
		align 4

loc_68892564:				; CODE XREF: sub_688921A8+310j
		mov	word ptr [esp+5Ch+var_30], 0
		jmp	loc_688924DB
; ---------------------------------------------------------------------------

loc_68892570:				; CODE XREF: sub_688921A8+1E9j
		mov	[esp+5Ch+var_54], offset aMood_0 ; "mood"
		mov	eax, [ebp+0]
		mov	[esp+5Ch+var_58], eax
		mov	[esp+5Ch+var_5C], edi
		call	purple_prpl_got_user_status_deactive
		jmp	loc_688923C2
; ---------------------------------------------------------------------------

loc_6889258C:				; CODE XREF: sub_688921A8+350j
		xor	eax, eax
		jmp	short loc_68892518
; ---------------------------------------------------------------------------

loc_68892590:				; CODE XREF: sub_688921A8+2A7j
		mov	[esp+5Ch+var_58], offset aLocateErrorR_0 ; "locate error: received response from re"...
		mov	[esp+5Ch+var_5C], offset aOscar_7 ; "oscar"
		call	purple_debug_misc
		mov	[esp+5Ch+var_5C], ebx
		call	g_free
		xor	eax, eax
		jmp	loc_688921F3
; ---------------------------------------------------------------------------

loc_688925B3:				; CODE XREF: sub_688921A8+287j
		mov	[esp+5Ch+var_58], offset aLocateErrorR_1 ; "locate error: received response from un"...
		mov	[esp+5Ch+var_5C], offset aOscar_7 ; "oscar"
		call	purple_debug_misc
		xor	eax, eax
		jmp	loc_688921F3
; ---------------------------------------------------------------------------

loc_688925CE:				; CODE XREF: sub_688921A8+55j
		call	__stack_chk_fail
sub_688921A8	endp

; ---------------------------------------------------------------------------
		align 4
; Exported entry  61. aim_locate_reqrights

; =============== S U B	R O U T	I N E =======================================


		public aim_locate_reqrights
aim_locate_reqrights proc near		; CODE XREF: .text:6889EBC8p

var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_10		= dword	ptr -10h
arg_0		= dword	ptr  4

		push	ebx
		sub	esp, 28h
		mov	ebx, [esp+2Ch+arg_0]
		mov	eax, ds:__stack_chk_guard
		mov	[esp+2Ch+var_10], eax
		xor	eax, eax
		test	ebx, ebx
		jz	short loc_68892630
		mov	[esp+2Ch+var_28], 2
		mov	[esp+2Ch+var_2C], ebx
		call	flap_connection_findbygroup
		test	eax, eax
		jz	short loc_68892630
		mov	[esp+2Ch+var_20], 2
		mov	[esp+2Ch+var_24], 2
		mov	[esp+2Ch+var_28], eax
		mov	[esp+2Ch+var_2C], ebx
		call	aim_genericreq_n_snacid
		xor	eax, eax

loc_6889261D:				; CODE XREF: aim_locate_reqrights+61j
		mov	edx, [esp+2Ch+var_10]
		xor	edx, ds:__stack_chk_guard
		jnz	short loc_68892637
		add	esp, 28h
		pop	ebx
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_68892630:				; CODE XREF: aim_locate_reqrights+15j
					; aim_locate_reqrights+29j
		mov	eax, 0FFFFFFEAh
		jmp	short loc_6889261D
; ---------------------------------------------------------------------------

loc_68892637:				; CODE XREF: aim_locate_reqrights+53j
		call	__stack_chk_fail
aim_locate_reqrights endp

; Exported entry  63. aim_locate_setprofile

; =============== S U B	R O U T	I N E =======================================


		public aim_locate_setprofile
aim_locate_setprofile proc near		; CODE XREF: sub_6889A35C+1ABp
					; sub_6889A35C+295p

Dest		= dword	ptr -7Ch
Count		= dword	ptr -78h
Format		= dword	ptr -74h
var_70		= dword	ptr -70h
var_6C		= dword	ptr -6Ch
var_68		= dword	ptr -68h
var_54		= dword	ptr -54h
var_50		= dword	ptr -50h
var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_30		= dword	ptr -30h
var_2C		= byte ptr -2Ch
var_20		= dword	ptr -20h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h
arg_18		= dword	ptr  1Ch

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 6Ch
		mov	ebx, [esp+7Ch+arg_0]
		mov	esi, [esp+7Ch+arg_4]
		mov	ebp, [esp+7Ch+arg_8]
		mov	edx, [esp+7Ch+arg_C]
		mov	[esp+7Ch+var_40], edx
		mov	eax, [esp+7Ch+arg_10]
		mov	[esp+7Ch+var_44], eax
		mov	edx, [esp+7Ch+arg_14]
		mov	[esp+7Ch+var_50], edx
		mov	edx, [esp+7Ch+arg_18]
		mov	[esp+7Ch+var_4C], edx
		mov	eax, ds:__stack_chk_guard
		mov	[esp+7Ch+var_20], eax
		xor	eax, eax
		mov	[esp+7Ch+var_30], 0
		test	ebx, ebx
		jz	loc_688928D8
		mov	[esp+7Ch+Count], 2
		mov	[esp+7Ch+Dest],	ebx
		call	flap_connection_findbygroup
		mov	[esp+7Ch+var_48], eax
		test	eax, eax
		jz	loc_688928D8
		test	ebp, ebp
		jz	loc_68892904
		test	esi, esi
		jz	loc_688928D8
		mov	eax, [esp+7Ch+var_50]
		test	eax, eax
		jz	short loc_688926E7

loc_688926D3:				; CODE XREF: aim_locate_setprofile+2CEj
		mov	eax, [esp+7Ch+var_4C]
		test	eax, eax
		jnz	loc_688928CC

loc_688926DF:				; CODE XREF: aim_locate_setprofile+296j
		test	ebp, ebp
		jz	loc_688928F8

loc_688926E7:				; CODE XREF: aim_locate_setprofile+95j
		mov	ecx, 0FFFFFFFFh
		mov	edi, esi
		xor	eax, eax
		repne scasb
		not	ecx
		add	ecx, 18h
		mov	[esp+7Ch+Dest],	ecx
		call	g_malloc
		mov	edx, eax
		mov	ecx, 0FFFFFFFFh
		mov	edi, esi
		xor	eax, eax
		repne scasb
		not	ecx
		mov	[esp+7Ch+var_70], esi
		mov	[esp+7Ch+Format], offset aTextAolrtfCh_0 ; "text/aolrtf; charset=\"%s\""
		add	ecx, 18h
		mov	[esp+7Ch+Count], ecx ; Count
		mov	[esp+7Ch+Dest],	edx ; Dest
		mov	[esp+7Ch+var_54], edx
		call	_snprintf
		mov	edx, [esp+7Ch+var_54]
		mov	[esp+7Ch+Format], edx
		mov	[esp+7Ch+Count], 1
		lea	esi, [esp+7Ch+var_30]
		mov	[esp+7Ch+Dest],	esi
		call	aim_tlvlist_add_str
		mov	[esp+7Ch+var_70], ebp
		movzx	eax, word ptr [esp+7Ch+var_40]
		mov	[esp+7Ch+Format], eax
		mov	[esp+7Ch+Count], 2
		mov	[esp+7Ch+Dest],	esi
		call	aim_tlvlist_add_raw
		mov	edx, [esp+7Ch+var_54]
		mov	[esp+7Ch+Dest],	edx
		call	g_free

loc_68892772:				; CODE XREF: aim_locate_setprofile+2C0j
		mov	ebp, [esp+7Ch+var_50]
		test	ebp, ebp
		jz	loc_6889281C
		mov	edi, [esp+7Ch+var_4C]
		test	edi, edi
		jz	loc_688928E0
		mov	ebp, 0FFFFFFFFh
		mov	ecx, ebp
		mov	edi, [esp+7Ch+var_44]
		xor	eax, eax
		repne scasb
		not	ecx
		add	ecx, 18h
		mov	[esp+7Ch+Dest],	ecx
		call	g_malloc
		mov	edx, eax
		mov	ecx, ebp
		mov	edi, [esp+7Ch+var_44]
		xor	eax, eax
		repne scasb
		not	ecx
		mov	eax, [esp+7Ch+var_44]
		mov	[esp+7Ch+var_70], eax
		mov	[esp+7Ch+Format], offset aTextAolrtfCh_0 ; "text/aolrtf; charset=\"%s\""
		lea	ebp, [ecx+18h]
		mov	[esp+7Ch+Count], ebp ; Count
		mov	[esp+7Ch+Dest],	edx ; Dest
		mov	[esp+7Ch+var_54], edx
		call	_snprintf
		mov	edx, [esp+7Ch+var_54]
		mov	[esp+7Ch+Format], edx
		mov	[esp+7Ch+Count], 3
		mov	[esp+7Ch+Dest],	esi
		call	aim_tlvlist_add_str
		mov	eax, [esp+7Ch+var_50]
		mov	[esp+7Ch+var_70], eax
		movzx	eax, word ptr [esp+7Ch+var_4C]
		mov	[esp+7Ch+Format], eax
		mov	[esp+7Ch+Count], 4
		mov	[esp+7Ch+Dest],	esi
		call	aim_tlvlist_add_raw
		mov	edx, [esp+7Ch+var_54]
		mov	[esp+7Ch+Dest],	edx
		call	g_free

loc_6889281C:				; CODE XREF: aim_locate_setprofile+13Cj
					; aim_locate_setprofile+2B4j
		mov	eax, [esp+7Ch+var_30]
		mov	[esp+7Ch+Dest],	eax
		call	aim_tlvlist_size
		mov	[esp+7Ch+Count], eax
		lea	ebp, [esp+7Ch+var_2C]
		mov	[esp+7Ch+Dest],	ebp
		call	sub_68881748
		mov	[esp+7Ch+var_68], 0
		mov	[esp+7Ch+var_6C], 0
		mov	[esp+7Ch+var_70], 0
		mov	[esp+7Ch+Format], 4
		mov	[esp+7Ch+Count], 2
		mov	[esp+7Ch+Dest],	ebx
		call	aim_cachesnac
		mov	edi, eax
		mov	[esp+7Ch+Count], esi
		mov	[esp+7Ch+Dest],	ebp
		call	aim_tlvlist_write
		mov	eax, [esp+7Ch+var_30]
		mov	[esp+7Ch+Dest],	eax
		call	aim_tlvlist_free
		mov	[esp+7Ch+var_68], ebp
		mov	[esp+7Ch+var_6C], edi
		mov	[esp+7Ch+var_70], 4
		mov	[esp+7Ch+Format], 2
		mov	eax, [esp+7Ch+var_48]
		mov	[esp+7Ch+Count], eax
		mov	[esp+7Ch+Dest],	ebx
		call	flap_connection_send_snac
		mov	[esp+7Ch+Dest],	ebp
		call	sub_688817E4
		xor	eax, eax

loc_688928B4:				; CODE XREF: aim_locate_setprofile+2A1j
		mov	edx, [esp+7Ch+var_20]
		xor	edx, ds:__stack_chk_guard
		jnz	loc_68892912
		add	esp, 6Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_688928CC:				; CODE XREF: aim_locate_setprofile+9Dj
		mov	eax, [esp+7Ch+var_44]
		test	eax, eax
		jnz	loc_688926DF

loc_688928D8:				; CODE XREF: aim_locate_setprofile+5Dj
					; aim_locate_setprofile+79j ...
		mov	eax, 0FFFFFFEAh
		jmp	short loc_688928B4
; ---------------------------------------------------------------------------
		align 10h

loc_688928E0:				; CODE XREF: aim_locate_setprofile+148j
		mov	[esp+7Ch+Count], 4
		mov	[esp+7Ch+Dest],	esi
		call	aim_tlvlist_add_noval
		jmp	loc_6889281C
; ---------------------------------------------------------------------------
		align 4

loc_688928F8:				; CODE XREF: aim_locate_setprofile+A5j
		lea	esi, [esp+7Ch+var_30]
		jmp	loc_68892772
; ---------------------------------------------------------------------------
		align 4

loc_68892904:				; CODE XREF: aim_locate_setprofile+81j
		mov	eax, [esp+7Ch+var_50]
		test	eax, eax
		jnz	loc_688926D3
		jmp	short loc_688928D8
; ---------------------------------------------------------------------------

loc_68892912:				; CODE XREF: aim_locate_setprofile+282j
		call	__stack_chk_fail
aim_locate_setprofile endp

; ---------------------------------------------------------------------------
		align 4
; Exported entry  62. aim_locate_setcaps

; =============== S U B	R O U T	I N E =======================================


		public aim_locate_setcaps
aim_locate_setcaps proc	near		; CODE XREF: .text:6889AF8Cp
					; oscar_set_status+EBp

var_6C		= dword	ptr -6Ch
var_68		= word ptr -68h
var_64		= dword	ptr -64h
var_60		= dword	ptr -60h
var_5C		= dword	ptr -5Ch
var_58		= dword	ptr -58h
var_40		= dword	ptr -40h
var_30		= dword	ptr -30h
var_2C		= byte ptr -2Ch
var_20		= dword	ptr -20h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 5Ch
		mov	ebx, [esp+6Ch+arg_0]
		mov	esi, [esp+6Ch+arg_4]
		mov	edi, [esp+6Ch+arg_8]
		mov	eax, ds:__stack_chk_guard
		mov	[esp+6Ch+var_20], eax
		xor	eax, eax
		mov	eax, [ebx+68h]
		mov	[esp+6Ch+var_6C], eax
		call	purple_connection_get_account
		mov	[esp+6Ch+var_6C], eax
		call	purple_account_get_presence
		mov	dword ptr [esp+6Ch+var_68], offset aMood_0 ; "mood"
		mov	[esp+6Ch+var_6C], eax
		call	purple_presence_get_status
		mov	dword ptr [esp+6Ch+var_68], offset aMood_0 ; "mood"
		mov	[esp+6Ch+var_6C], eax
		call	purple_status_get_attr_string
		mov	ebp, eax
		mov	[esp+6Ch+var_30], 0
		mov	dword ptr [esp+6Ch+var_68], 2
		mov	[esp+6Ch+var_6C], ebx
		call	flap_connection_findbygroup
		test	eax, eax
		jz	loc_68892A5B
		mov	[esp+6Ch+var_5C], ebp ;	char *
		mov	[esp+6Ch+var_64], esi ;	int
		mov	[esp+6Ch+var_60], edi ;	int
		mov	dword ptr [esp+6Ch+var_68], 5 ;	__int16
		lea	edi, [esp+6Ch+var_30]
		mov	[esp+6Ch+var_6C], edi ;	int
		mov	[esp+6Ch+var_40], eax
		call	aim_tlvlist_add_caps
		mov	eax, [esp+6Ch+var_30]
		mov	[esp+6Ch+var_6C], eax
		call	aim_tlvlist_size
		mov	dword ptr [esp+6Ch+var_68], eax
		lea	esi, [esp+6Ch+var_2C]
		mov	[esp+6Ch+var_6C], esi
		call	sub_68881748
		mov	[esp+6Ch+var_58], 0
		mov	[esp+6Ch+var_5C], 0
		mov	[esp+6Ch+var_60], 0
		mov	[esp+6Ch+var_64], 4
		mov	dword ptr [esp+6Ch+var_68], 2
		mov	[esp+6Ch+var_6C], ebx
		call	aim_cachesnac
		mov	ebp, eax
		mov	dword ptr [esp+6Ch+var_68], edi
		mov	[esp+6Ch+var_6C], esi
		call	aim_tlvlist_write
		mov	eax, [esp+6Ch+var_30]
		mov	[esp+6Ch+var_6C], eax
		call	aim_tlvlist_free
		mov	[esp+6Ch+var_58], esi
		mov	[esp+6Ch+var_5C], ebp
		mov	[esp+6Ch+var_60], 4
		mov	[esp+6Ch+var_64], 2
		mov	edx, [esp+6Ch+var_40]
		mov	dword ptr [esp+6Ch+var_68], edx
		mov	[esp+6Ch+var_6C], ebx
		call	flap_connection_send_snac
		mov	[esp+6Ch+var_6C], esi
		call	sub_688817E4
		xor	eax, eax

loc_68892A47:				; CODE XREF: aim_locate_setcaps+148j
		mov	edx, [esp+6Ch+var_20]
		xor	edx, ds:__stack_chk_guard
		jnz	short loc_68892A62
		add	esp, 5Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_68892A5B:				; CODE XREF: aim_locate_setcaps+6Dj
		mov	eax, 0FFFFFFEAh
		jmp	short loc_68892A47
; ---------------------------------------------------------------------------

loc_68892A62:				; CODE XREF: aim_locate_setcaps+139j
		call	__stack_chk_fail
aim_locate_setcaps endp

; ---------------------------------------------------------------------------
		align 4
; Exported entry  60. aim_locate_getinfoshort

; =============== S U B	R O U T	I N E =======================================


		public aim_locate_getinfoshort
aim_locate_getinfoshort	proc near	; CODE XREF: .text:6889F1F3p
					; oscar_get_info+44p

var_5C		= dword	ptr -5Ch
var_58		= dword	ptr -58h
var_54		= dword	ptr -54h
var_50		= dword	ptr -50h
var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= byte ptr -2Ch
var_20		= dword	ptr -20h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 4Ch
		mov	ebp, [esp+5Ch+arg_0]
		mov	ebx, [esp+5Ch+arg_4]
		mov	edx, [esp+5Ch+arg_8]
		mov	[esp+5Ch+var_30], edx
		mov	eax, ds:__stack_chk_guard
		mov	[esp+5Ch+var_20], eax
		xor	eax, eax
		test	ebp, ebp
		jz	loc_68892B98
		mov	[esp+5Ch+var_58], 2
		mov	[esp+5Ch+var_5C], ebp
		call	flap_connection_findbygroup
		mov	edx, eax
		test	eax, eax
		jz	loc_68892B98
		test	ebx, ebx
		jz	loc_68892B98
		mov	ecx, 0FFFFFFFFh
		mov	edi, ebx
		xor	eax, eax
		repne scasb
		not	ecx
		add	ecx, 4
		mov	[esp+5Ch+var_58], ecx
		lea	esi, [esp+5Ch+var_2C]
		mov	[esp+5Ch+var_5C], esi
		mov	[esp+5Ch+var_34], edx
		call	sub_68881748
		mov	eax, [esp+5Ch+var_30]
		mov	[esp+5Ch+var_58], eax
		mov	[esp+5Ch+var_5C], esi
		call	sub_68881E8C
		mov	ecx, 0FFFFFFFFh
		mov	edi, ebx
		xor	eax, eax
		repne scasb
		not	ecx
		dec	ecx
		and	ecx, 0FFh
		mov	[esp+5Ch+var_58], ecx
		mov	[esp+5Ch+var_5C], esi
		call	sub_68881DA4
		mov	[esp+5Ch+var_58], ebx
		mov	[esp+5Ch+var_5C], esi
		call	sub_68882114
		mov	ecx, 0FFFFFFFFh
		mov	edi, ebx
		xor	eax, eax
		repne scasb
		not	ecx
		mov	[esp+5Ch+var_48], ecx
		mov	[esp+5Ch+var_4C], ebx
		mov	[esp+5Ch+var_50], 0
		mov	[esp+5Ch+var_54], 15h
		mov	[esp+5Ch+var_58], 2
		mov	[esp+5Ch+var_5C], ebp
		call	aim_cachesnac
		mov	[esp+5Ch+var_44], 0
		mov	[esp+5Ch+var_48], esi
		mov	[esp+5Ch+var_4C], eax
		mov	[esp+5Ch+var_50], 15h
		mov	[esp+5Ch+var_54], 2
		mov	edx, [esp+5Ch+var_34]
		mov	[esp+5Ch+var_58], edx
		mov	[esp+5Ch+var_5C], ebp
		call	flap_connection_send_snac_with_priority
		mov	[esp+5Ch+var_5C], esi
		call	sub_688817E4
		xor	eax, eax

loc_68892B83:				; CODE XREF: aim_locate_getinfoshort+135j
		mov	edx, [esp+5Ch+var_20]
		xor	edx, ds:__stack_chk_guard
		jnz	short loc_68892B9F
		add	esp, 4Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 4

loc_68892B98:				; CODE XREF: aim_locate_getinfoshort+24j
					; aim_locate_getinfoshort+3Ej ...
		mov	eax, 0FFFFFFEAh
		jmp	short loc_68892B83
; ---------------------------------------------------------------------------

loc_68892B9F:				; CODE XREF: aim_locate_getinfoshort+125j
		call	__stack_chk_fail
aim_locate_getinfoshort	endp

; Exported entry 207. locate_modfirst

; =============== S U B	R O U T	I N E =======================================


		public locate_modfirst
locate_modfirst	proc near		; DATA XREF: oscar_data_new+A2o

Dest		= dword	ptr -2Ch
Source		= dword	ptr -28h
Count		= dword	ptr -24h
var_10		= dword	ptr -10h
arg_4		= dword	ptr  8

		push	ebx
		sub	esp, 28h
		mov	ebx, [esp+2Ch+arg_4]
		mov	eax, ds:__stack_chk_guard
		mov	[esp+2Ch+var_10], eax
		xor	eax, eax
		mov	word ptr [ebx],	2
		mov	word ptr [ebx+2], 1
		mov	word ptr [ebx+4], 110h
		mov	word ptr [ebx+6], 629h
		mov	word ptr [ebx+8], 0
		mov	[esp+2Ch+Count], 11h ; Count
		mov	[esp+2Ch+Source], offset aLocate ; "locate"
		lea	eax, [ebx+0Ah]
		mov	[esp+2Ch+Dest],	eax ; Dest
		call	strncpy
		mov	dword ptr [ebx+1Ch], offset sub_688921A8
		mov	dword ptr [ebx+20h], offset loc_68891A1C
		xor	eax, eax
		mov	edx, [esp+2Ch+var_10]
		xor	edx, ds:__stack_chk_guard
		jnz	short loc_68892C10
		add	esp, 28h
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_68892C10:				; CODE XREF: locate_modfirst+65j
		call	__stack_chk_fail
locate_modfirst	endp

; ---------------------------------------------------------------------------
		align 4
; Exported entry 202. icq_get_custom_icon_description

; =============== S U B	R O U T	I N E =======================================


; int __cdecl icq_get_custom_icon_description(char *)
		public icq_get_custom_icon_description
icq_get_custom_icon_description	proc near ; CODE XREF: oscar_user_info_append_status+264p

Str1		= dword	ptr -3Ch
Str2		= dword	ptr -38h
var_20		= dword	ptr -20h
arg_0		= dword	ptr  4

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 2Ch
		mov	edi, [esp+3Ch+arg_0]
		mov	eax, ds:__stack_chk_guard
		mov	[esp+3Ch+var_20], eax
		xor	eax, eax
		test	edi, edi
		jz	short loc_68892C6A
		cmp	byte ptr [edi],	0
		jz	short loc_68892C6A
		mov	ebx, offset off_688AD004
		mov	esi, offset off_688B0D94
		mov	edx, offset aThinking ;	"thinking"
		xchg	ax, ax

loc_68892C48:				; CODE XREF: icq_get_custom_icon_description+50j
		mov	ebp, [ebx]
		test	ebp, ebp
		jz	short loc_68892C5E
		mov	[esp+3Ch+Str2],	edx ; Str2
		mov	[esp+3Ch+Str1],	edi ; Str1
		call	strcmp
		test	eax, eax
		jz	short loc_68892C6C

loc_68892C5E:				; CODE XREF: icq_get_custom_icon_description+34j
		mov	edx, [esi]
		add	ebx, 0Ch
		add	esi, 14h
		test	edx, edx
		jnz	short loc_68892C48

loc_68892C6A:				; CODE XREF: icq_get_custom_icon_description+18j
					; icq_get_custom_icon_description+1Dj
		xor	ebp, ebp

loc_68892C6C:				; CODE XREF: icq_get_custom_icon_description+44j
		mov	eax, ebp
		mov	edx, [esp+3Ch+var_20]
		xor	edx, ds:__stack_chk_guard
		jnz	short loc_68892C82
		add	esp, 2Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_68892C82:				; CODE XREF: icq_get_custom_icon_description+60j
		call	__stack_chk_fail
icq_get_custom_icon_description	endp

; ---------------------------------------------------------------------------
		align 4
; Exported entry 201. icq_get_custom_icon_data

; =============== S U B	R O U T	I N E =======================================


; int __cdecl icq_get_custom_icon_data(char *)
		public icq_get_custom_icon_data
icq_get_custom_icon_data proc near	; CODE XREF: aim_tlvlist_add_caps+4Fp

Str1		= dword	ptr -2Ch
Str2		= dword	ptr -28h
var_10		= dword	ptr -10h
arg_0		= dword	ptr  4

		push	edi
		push	esi
		push	ebx
		sub	esp, 20h
		mov	edi, [esp+2Ch+arg_0]
		mov	eax, ds:__stack_chk_guard
		mov	[esp+2Ch+var_10], eax
		xor	eax, eax
		test	edi, edi
		jz	short loc_68892CFC
		cmp	byte ptr [edi],	0
		jz	short loc_68892CFC
		mov	esi, offset off_688AD004
		mov	eax, offset aThinking ;	"thinking"
		xor	ebx, ebx
		xchg	ax, ax

loc_68892CB4:				; CODE XREF: icq_get_custom_icon_data+52j
		mov	edx, [esi]
		test	edx, edx
		jz	short loc_68892CCA
		mov	[esp+2Ch+Str2],	eax ; Str2
		mov	[esp+2Ch+Str1],	edi ; Str1
		call	strcmp
		test	eax, eax
		jz	short loc_68892CF0

loc_68892CCA:				; CODE XREF: icq_get_custom_icon_data+30j
		inc	ebx
		lea	eax, [ebx+ebx*4]
		mov	eax, ds:off_688B0D80[eax*4]
		add	esi, 0Ch
		test	eax, eax
		jnz	short loc_68892CB4

loc_68892CDC:				; CODE XREF: icq_get_custom_icon_data+72j
					; icq_get_custom_icon_data+76j
		mov	edx, [esp+2Ch+var_10]
		xor	edx, ds:__stack_chk_guard
		jnz	short loc_68892D00
		add	esp, 20h
		pop	ebx
		pop	esi
		pop	edi
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_68892CF0:				; CODE XREF: icq_get_custom_icon_data+40j
		lea	eax, [ebx+ebx*4]
		lea	eax, dword_688B0D84[eax*4]
		jmp	short loc_68892CDC
; ---------------------------------------------------------------------------

loc_68892CFC:				; CODE XREF: icq_get_custom_icon_data+17j
					; icq_get_custom_icon_data+1Cj
		xor	eax, eax
		jmp	short loc_68892CDC
; ---------------------------------------------------------------------------

loc_68892D00:				; CODE XREF: icq_get_custom_icon_data+5Ej
		call	__stack_chk_fail
icq_get_custom_icon_data endp

; ---------------------------------------------------------------------------
		align 4
; Exported entry 203. icq_get_purple_moods

; =============== S U B	R O U T	I N E =======================================


		public icq_get_purple_moods
icq_get_purple_moods proc near		; CODE XREF: oscar_get_purple_moods+26j

var_10		= dword	ptr -10h

		sub	esp, 1Ch
		mov	eax, ds:__stack_chk_guard
		mov	[esp+1Ch+var_10], eax
		xor	eax, eax
		mov	eax, offset off_688AD000
		mov	edx, [esp+1Ch+var_10]
		xor	edx, ds:__stack_chk_guard
		jnz	short loc_68892D2B
		add	esp, 1Ch
		retn
; ---------------------------------------------------------------------------

loc_68892D2B:				; CODE XREF: icq_get_purple_moods+1Dj
		call	__stack_chk_fail
icq_get_purple_moods endp

; Exported entry  72. aim_srv_clientready

; =============== S U B	R O U T	I N E =======================================


		public aim_srv_clientready
aim_srv_clientready proc near		; CODE XREF: sub_6889DECC+19Ep
					; .text:6889EB52p ...

var_5C		= dword	ptr -5Ch
var_58		= dword	ptr -58h
var_54		= dword	ptr -54h
var_50		= dword	ptr -50h
var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_30		= dword	ptr -30h
var_2C		= byte ptr -2Ch
var_20		= dword	ptr -20h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 4Ch
		mov	edi, [esp+5Ch+arg_0]
		mov	eax, [esp+5Ch+arg_4]
		mov	[esp+5Ch+var_30], eax
		mov	eax, ds:__stack_chk_guard
		mov	[esp+5Ch+var_20], eax
		xor	eax, eax
		mov	[esp+5Ch+var_58], 476h
		lea	esi, [esp+5Ch+var_2C]
		mov	[esp+5Ch+var_5C], esi
		call	sub_68881748
		mov	eax, [esp+5Ch+var_30]
		mov	ebp, [eax+64h]
		test	ebp, ebp
		jz	short loc_68892DCC
		lea	esi, [esi+0]

loc_68892D70:				; CODE XREF: aim_srv_clientready+9Aj
		movzx	eax, word ptr [ebp+0]
		mov	[esp+5Ch+var_58], eax
		mov	[esp+5Ch+var_5C], edi
		call	aim__findmodulebygroup
		mov	ebx, eax
		test	eax, eax
		jz	short loc_68892DC5
		movzx	eax, word ptr [eax]
		mov	[esp+5Ch+var_58], eax
		mov	[esp+5Ch+var_5C], esi
		call	sub_68881E0C
		movzx	eax, word ptr [ebx+2]
		mov	[esp+5Ch+var_58], eax
		mov	[esp+5Ch+var_5C], esi
		call	sub_68881E0C
		movzx	eax, word ptr [ebx+4]
		mov	[esp+5Ch+var_58], eax
		mov	[esp+5Ch+var_5C], esi
		call	sub_68881E0C
		movzx	eax, word ptr [ebx+6]
		mov	[esp+5Ch+var_58], eax
		mov	[esp+5Ch+var_5C], esi
		call	sub_68881E0C

loc_68892DC5:				; CODE XREF: aim_srv_clientready+54j
		mov	ebp, [ebp+4]
		test	ebp, ebp
		jnz	short loc_68892D70

loc_68892DCC:				; CODE XREF: aim_srv_clientready+3Bj
		mov	[esp+5Ch+var_48], 0
		mov	[esp+5Ch+var_4C], 0
		mov	[esp+5Ch+var_50], 0
		mov	[esp+5Ch+var_54], 2
		mov	[esp+5Ch+var_58], 1
		mov	[esp+5Ch+var_5C], edi
		call	aim_cachesnac
		mov	[esp+5Ch+var_48], esi
		mov	[esp+5Ch+var_4C], eax
		mov	[esp+5Ch+var_50], 2
		mov	[esp+5Ch+var_54], 1
		mov	eax, [esp+5Ch+var_30]
		mov	[esp+5Ch+var_58], eax
		mov	[esp+5Ch+var_5C], edi
		call	flap_connection_send_snac
		mov	[esp+5Ch+var_5C], esi
		call	sub_688817E4
		mov	eax, [esp+5Ch+var_20]
		xor	eax, ds:__stack_chk_guard
		jnz	short loc_68892E40
		add	esp, 4Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_68892E40:				; CODE XREF: aim_srv_clientready+106j
		call	__stack_chk_fail
aim_srv_clientready endp

; ---------------------------------------------------------------------------
		align 4
; Exported entry  76. aim_srv_requestnew

; =============== S U B	R O U T	I N E =======================================


		public aim_srv_requestnew
aim_srv_requestnew proc	near		; CODE XREF: sub_688933E4+D51p
					; .text:688994DFj ...

var_5C		= dword	ptr -5Ch
var_58		= dword	ptr -58h
var_54		= dword	ptr -54h
var_50		= dword	ptr -50h
var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_30		= dword	ptr -30h
var_2C		= byte ptr -2Ch
var_20		= dword	ptr -20h
arg_0		= dword	ptr  4
arg_4		= word ptr  8

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 4Ch
		mov	esi, [esp+5Ch+arg_0]
		movzx	ebp, [esp+5Ch+arg_4]
		mov	eax, ds:__stack_chk_guard
		mov	[esp+5Ch+var_20], eax
		xor	eax, eax
		mov	[esp+5Ch+var_30], 0
		mov	[esp+5Ch+var_58], 9
		mov	[esp+5Ch+var_5C], esi
		call	flap_connection_findbygroup
		mov	edi, eax
		test	eax, eax
		jz	loc_68892F28
		mov	[esp+5Ch+var_58], 6
		lea	ebx, [esp+5Ch+var_2C]
		mov	[esp+5Ch+var_5C], ebx
		call	sub_68881748
		mov	[esp+5Ch+var_58], ebp
		mov	[esp+5Ch+var_5C], ebx
		call	sub_68881E0C
		mov	eax, [esi+40h]
		test	eax, eax
		jnz	loc_68892F3C
		lea	ebp, [esp+5Ch+var_30]

loc_68892EB4:				; CODE XREF: aim_srv_requestnew+108j
		mov	[esp+5Ch+var_58], ebp
		mov	[esp+5Ch+var_5C], ebx
		call	aim_tlvlist_write
		mov	eax, [esp+5Ch+var_30]
		mov	[esp+5Ch+var_5C], eax
		call	aim_tlvlist_free
		mov	[esp+5Ch+var_48], 0
		mov	[esp+5Ch+var_4C], 0
		mov	[esp+5Ch+var_50], 0
		mov	[esp+5Ch+var_54], 4
		mov	[esp+5Ch+var_58], 1
		mov	[esp+5Ch+var_5C], esi
		call	aim_cachesnac
		mov	[esp+5Ch+var_48], ebx
		mov	[esp+5Ch+var_4C], eax
		mov	[esp+5Ch+var_50], 4
		mov	[esp+5Ch+var_54], 1
		mov	[esp+5Ch+var_58], edi
		mov	[esp+5Ch+var_5C], esi
		call	flap_connection_send_snac
		mov	[esp+5Ch+var_5C], ebx
		call	sub_688817E4

loc_68892F28:				; CODE XREF: aim_srv_requestnew+37j
		mov	eax, [esp+5Ch+var_20]
		xor	eax, ds:__stack_chk_guard
		jnz	short loc_68892F55
		add	esp, 4Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_68892F3C:				; CODE XREF: aim_srv_requestnew+62j
		mov	[esp+5Ch+var_58], 8Ch
		lea	ebp, [esp+5Ch+var_30]
		mov	[esp+5Ch+var_5C], ebp
		call	aim_tlvlist_add_noval
		jmp	loc_68892EB4
; ---------------------------------------------------------------------------

loc_68892F55:				; CODE XREF: aim_srv_requestnew+EAj
		call	__stack_chk_fail
aim_srv_requestnew endp

; ---------------------------------------------------------------------------
		align 4
; Exported entry  20. aim_chat_join

; =============== S U B	R O U T	I N E =======================================


		public aim_chat_join
aim_chat_join	proc near		; CODE XREF: sub_6889D028+2B6p

var_FC		= dword	ptr -0FCh
var_F8		= dword	ptr -0F8h
var_F4		= dword	ptr -0F4h
var_F0		= dword	ptr -0F0h
var_EC		= dword	ptr -0ECh
var_E8		= dword	ptr -0E8h
var_D0		= dword	ptr -0D0h
var_CC		= dword	ptr -0CCh
var_C8		= dword	ptr -0C8h
var_C4		= dword	ptr -0C4h
var_C0		= word ptr -0C0h
var_BE		= word ptr -0BEh
var_B4		= dword	ptr -0B4h
var_B0		= byte ptr -0B0h
var_A4		= word ptr -0A4h
var_A2		= byte ptr -0A2h
var_22		= word ptr -22h
var_20		= dword	ptr -20h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 0ECh
		mov	ebp, [esp+0FCh+arg_0]
		mov	edx, [esp+0FCh+arg_4]
		mov	esi, [esp+0FCh+arg_8]
		mov	eax, [esp+0FCh+arg_C]
		mov	[esp+0FCh+var_C4], eax
		mov	[esp+0FCh+var_C0], dx
		mov	[esp+0FCh+var_BE], ax
		mov	eax, ds:__stack_chk_guard
		mov	[esp+0FCh+var_20], eax
		xor	eax, eax
		mov	[esp+0FCh+var_B4], 0
		mov	[esp+0FCh+var_F8], 9
		mov	[esp+0FCh+var_FC], ebp
		mov	[esp+0FCh+var_D0], edx
		call	flap_connection_findbygroup
		mov	[esp+0FCh+var_C8], eax
		test	eax, eax
		jz	loc_68893120
		test	esi, esi
		jz	loc_68893120
		cmp	byte ptr [esi],	0
		jz	loc_68893120
		mov	[esp+0FCh+var_F8], 1FAh
		lea	ebx, [esp+0FCh+var_B0]
		mov	[esp+0FCh+var_FC], ebx
		call	sub_68881748
		lea	eax, [esp+0FCh+var_A4]
		mov	[esp+0FCh+var_CC], eax
		mov	ecx, 84h
		xor	eax, eax
		mov	edi, [esp+0FCh+var_CC]
		rep stosb
		mov	edx, [esp+0FCh+var_D0]
		mov	[esp+0FCh+var_A4], dx
		mov	[esp+0FCh+var_F4], 80h
		mov	[esp+0FCh+var_F8], esi
		lea	eax, [esp+0FCh+var_A2]
		mov	[esp+0FCh+var_FC], eax
		call	g_strlcpy
		mov	edx, [esp+0FCh+var_C4]
		mov	[esp+0FCh+var_22], dx
		mov	[esp+0FCh+var_F8], 0Eh
		mov	[esp+0FCh+var_FC], ebx
		call	sub_68881E0C
		movzx	eax, [esp+0FCh+var_BE]
		mov	[esp+0FCh+var_EC], eax
		mov	[esp+0FCh+var_F0], esi
		movzx	eax, [esp+0FCh+var_C0]
		mov	[esp+0FCh+var_F4], eax
		mov	[esp+0FCh+var_F8], 1
		lea	esi, [esp+0FCh+var_B4]
		mov	[esp+0FCh+var_FC], esi
		call	aim_tlvlist_add_chatroom
		mov	edx, [ebp+40h]
		test	edx, edx
		jnz	loc_68893108

loc_68893072:				; CODE XREF: aim_chat_join+1BCj
		mov	[esp+0FCh+var_F8], esi
		mov	[esp+0FCh+var_FC], ebx
		call	aim_tlvlist_write
		mov	eax, [esp+0FCh+var_B4]
		mov	[esp+0FCh+var_FC], eax
		call	aim_tlvlist_free
		mov	[esp+0FCh+var_E8], 84h
		lea	eax, [esp+0FCh+var_A4]
		mov	[esp+0FCh+var_EC], eax
		mov	[esp+0FCh+var_F0], 0
		mov	[esp+0FCh+var_F4], 4
		mov	[esp+0FCh+var_F8], 1
		mov	[esp+0FCh+var_FC], ebp
		call	aim_cachesnac
		mov	[esp+0FCh+var_E8], ebx
		mov	[esp+0FCh+var_EC], eax
		mov	[esp+0FCh+var_F0], 4
		mov	[esp+0FCh+var_F4], 1
		mov	eax, [esp+0FCh+var_C8]
		mov	[esp+0FCh+var_F8], eax
		mov	[esp+0FCh+var_FC], ebp
		call	flap_connection_send_snac
		mov	[esp+0FCh+var_FC], ebx
		call	sub_688817E4
		xor	eax, eax

loc_688930EC:				; CODE XREF: aim_chat_join+1C9j
		mov	edx, [esp+0FCh+var_20]
		xor	edx, ds:__stack_chk_guard
		jnz	short loc_68893127
		add	esp, 0ECh
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 4

loc_68893108:				; CODE XREF: aim_chat_join+110j
		mov	[esp+0FCh+var_F8], 8Ch
		mov	[esp+0FCh+var_FC], esi
		call	aim_tlvlist_add_noval
		jmp	loc_68893072
; ---------------------------------------------------------------------------
		align 10h

loc_68893120:				; CODE XREF: aim_chat_join+64j
					; aim_chat_join+6Cj ...
		mov	eax, 0FFFFFFEAh
		jmp	short loc_688930EC
; ---------------------------------------------------------------------------

loc_68893127:				; CODE XREF: aim_chat_join+19Dj
		call	__stack_chk_fail
aim_chat_join	endp

; Exported entry  75. aim_srv_reqrates

; =============== S U B	R O U T	I N E =======================================


		public aim_srv_reqrates
aim_srv_reqrates proc near		; CODE XREF: sub_688933E4+AAFp

var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_10		= dword	ptr -10h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		sub	esp, 2Ch
		mov	eax, ds:__stack_chk_guard
		mov	[esp+2Ch+var_10], eax
		xor	eax, eax
		mov	[esp+2Ch+var_20], 6
		mov	[esp+2Ch+var_24], 1
		mov	eax, [esp+2Ch+arg_4]
		mov	[esp+2Ch+var_28], eax
		mov	eax, [esp+2Ch+arg_0]
		mov	[esp+2Ch+var_2C], eax
		call	aim_genericreq_n_snacid
		mov	eax, [esp+2Ch+var_10]
		xor	eax, ds:__stack_chk_guard
		jnz	short loc_6889316E
		add	esp, 2Ch
		retn
; ---------------------------------------------------------------------------

loc_6889316E:				; CODE XREF: aim_srv_reqrates+3Cj
		call	__stack_chk_fail
aim_srv_reqrates endp

; ---------------------------------------------------------------------------
		align 4
; Exported entry  73. aim_srv_rates_addparam

; =============== S U B	R O U T	I N E =======================================


		public aim_srv_rates_addparam
aim_srv_rates_addparam proc near	; CODE XREF: sub_688933E4+70Bp

var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_2C		= byte ptr -2Ch
var_20		= dword	ptr -20h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 3Ch
		mov	edi, [esp+4Ch+arg_0]
		mov	ebp, [esp+4Ch+arg_4]
		mov	eax, ds:__stack_chk_guard
		mov	[esp+4Ch+var_20], eax
		xor	eax, eax
		mov	[esp+4Ch+var_48], 1F6h
		lea	esi, [esp+4Ch+var_2C]
		mov	[esp+4Ch+var_4C], esi
		call	sub_68881748
		mov	ebx, [ebp+68h]
		test	ebx, ebx
		jz	short loc_688931C4
		lea	esi, [esi+0]

loc_688931AC:				; CODE XREF: aim_srv_rates_addparam+4Ej
		mov	eax, [ebx]
		movzx	eax, word ptr [eax]
		mov	[esp+4Ch+var_48], eax
		mov	[esp+4Ch+var_4C], esi
		call	sub_68881E0C
		mov	ebx, [ebx+4]
		test	ebx, ebx
		jnz	short loc_688931AC

loc_688931C4:				; CODE XREF: aim_srv_rates_addparam+33j
		mov	[esp+4Ch+var_38], 0
		mov	[esp+4Ch+var_3C], 0
		mov	[esp+4Ch+var_40], 0
		mov	[esp+4Ch+var_44], 8
		mov	[esp+4Ch+var_48], 1
		mov	[esp+4Ch+var_4C], edi
		call	aim_cachesnac
		mov	[esp+4Ch+var_38], esi
		mov	[esp+4Ch+var_3C], eax
		mov	[esp+4Ch+var_40], 8
		mov	[esp+4Ch+var_44], 1
		mov	[esp+4Ch+var_48], ebp
		mov	[esp+4Ch+var_4C], edi
		call	flap_connection_send_snac
		mov	[esp+4Ch+var_4C], esi
		call	sub_688817E4
		mov	eax, [esp+4Ch+var_20]
		xor	eax, ds:__stack_chk_guard
		jnz	short loc_68893234
		add	esp, 3Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_68893234:				; CODE XREF: aim_srv_rates_addparam+B6j
		call	__stack_chk_fail
aim_srv_rates_addparam endp

; ---------------------------------------------------------------------------
		align 4
; Exported entry  74. aim_srv_reqpersonalinfo

; =============== S U B	R O U T	I N E =======================================


		public aim_srv_reqpersonalinfo
aim_srv_reqpersonalinfo	proc near	; CODE XREF: .text:6889EB72p

var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_10		= dword	ptr -10h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		sub	esp, 2Ch
		mov	eax, ds:__stack_chk_guard
		mov	[esp+2Ch+var_10], eax
		xor	eax, eax
		mov	[esp+2Ch+var_20], 0Eh
		mov	[esp+2Ch+var_24], 1
		mov	eax, [esp+2Ch+arg_4]
		mov	[esp+2Ch+var_28], eax
		mov	eax, [esp+2Ch+arg_0]
		mov	[esp+2Ch+var_2C], eax
		call	aim_genericreq_n_snacid
		mov	eax, [esp+2Ch+var_10]
		xor	eax, ds:__stack_chk_guard
		jnz	short loc_6889327E
		add	esp, 2Ch
		retn
; ---------------------------------------------------------------------------

loc_6889327E:				; CODE XREF: aim_srv_reqpersonalinfo+3Cj
		call	__stack_chk_fail
aim_srv_reqpersonalinfo	endp

; ---------------------------------------------------------------------------
		align 4
; Exported entry  79. aim_srv_setidle

; =============== S U B	R O U T	I N E =======================================


		public aim_srv_setidle
aim_srv_setidle	proc near		; CODE XREF: sub_6889DECC+153p
					; oscar_set_idle+37j

var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_3C		= dword	ptr -3Ch
var_20		= dword	ptr -20h
var_10		= dword	ptr -10h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	ebx
		sub	esp, 48h
		mov	ebx, [esp+4Ch+arg_0]
		mov	eax, [esp+4Ch+arg_4]
		mov	[esp+4Ch+var_20], eax
		mov	eax, ds:__stack_chk_guard
		mov	[esp+4Ch+var_10], eax
		xor	eax, eax
		mov	[esp+4Ch+var_48], 9
		mov	[esp+4Ch+var_4C], ebx
		call	flap_connection_findbygroup
		test	eax, eax
		jz	short loc_688932D7
		lea	edx, [esp+4Ch+var_20]
		mov	[esp+4Ch+var_3C], edx
		mov	[esp+4Ch+var_40], 11h
		mov	[esp+4Ch+var_44], 1
		mov	[esp+4Ch+var_48], eax
		mov	[esp+4Ch+var_4C], ebx
		call	aim_genericreq_l

loc_688932D7:				; CODE XREF: aim_srv_setidle+2Dj
		mov	eax, [esp+4Ch+var_10]
		xor	eax, ds:__stack_chk_guard
		jnz	short loc_688932E8
		add	esp, 48h
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_688932E8:				; CODE XREF: aim_srv_setidle+5Dj
		call	__stack_chk_fail
aim_srv_setidle	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  80. aim_srv_setversions

; =============== S U B	R O U T	I N E =======================================


		public aim_srv_setversions
aim_srv_setversions proc near		; CODE XREF: sub_688933E4+18Cp

var_5C		= dword	ptr -5Ch
var_58		= dword	ptr -58h
var_54		= dword	ptr -54h
var_50		= dword	ptr -50h
var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_30		= dword	ptr -30h
var_2C		= byte ptr -2Ch
var_20		= dword	ptr -20h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 4Ch
		mov	edi, [esp+5Ch+arg_0]
		mov	eax, [esp+5Ch+arg_4]
		mov	[esp+5Ch+var_30], eax
		mov	eax, ds:__stack_chk_guard
		mov	[esp+5Ch+var_20], eax
		xor	eax, eax
		mov	[esp+5Ch+var_58], 476h
		lea	esi, [esp+5Ch+var_2C]
		mov	[esp+5Ch+var_5C], esi
		call	sub_68881748
		mov	eax, [esp+5Ch+var_30]
		mov	ebx, [eax+64h]
		test	ebx, ebx
		jz	short loc_6889336B
		lea	esi, [esi+0]

loc_68893330:				; CODE XREF: aim_srv_setversions+79j
		movzx	eax, word ptr [ebx]
		mov	[esp+5Ch+var_58], eax
		mov	[esp+5Ch+var_5C], edi
		call	aim__findmodulebygroup
		mov	ebp, eax
		test	eax, eax
		jz	short loc_68893364
		movzx	eax, word ptr [eax]
		mov	[esp+5Ch+var_58], eax
		mov	[esp+5Ch+var_5C], esi
		call	sub_68881E0C
		movzx	eax, word ptr [ebp+2]
		mov	[esp+5Ch+var_58], eax
		mov	[esp+5Ch+var_5C], esi
		call	sub_68881E0C

loc_68893364:				; CODE XREF: aim_srv_setversions+53j
		mov	ebx, [ebx+4]
		test	ebx, ebx
		jnz	short loc_68893330

loc_6889336B:				; CODE XREF: aim_srv_setversions+3Bj
		mov	[esp+5Ch+var_48], 0
		mov	[esp+5Ch+var_4C], 0
		mov	[esp+5Ch+var_50], 0
		mov	[esp+5Ch+var_54], 17h
		mov	[esp+5Ch+var_58], 1
		mov	[esp+5Ch+var_5C], edi
		call	aim_cachesnac
		mov	[esp+5Ch+var_48], esi
		mov	[esp+5Ch+var_4C], eax
		mov	[esp+5Ch+var_50], 17h
		mov	[esp+5Ch+var_54], 1
		mov	eax, [esp+5Ch+var_30]
		mov	[esp+5Ch+var_58], eax
		mov	[esp+5Ch+var_5C], edi
		call	flap_connection_send_snac
		mov	[esp+5Ch+var_5C], esi
		call	sub_688817E4
		mov	eax, [esp+5Ch+var_20]
		xor	eax, ds:__stack_chk_guard
		jnz	short loc_688933DF
		add	esp, 4Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_688933DF:				; CODE XREF: aim_srv_setversions+E5j
		call	__stack_chk_fail
aim_srv_setversions endp


; =============== S U B	R O U T	I N E =======================================


sub_688933E4	proc near		; DATA XREF: service_modfirst+4Bo

var_14C		= dword	ptr -14Ch
var_148		= dword	ptr -148h
var_144		= dword	ptr -144h
var_140		= dword	ptr -140h
var_13C		= dword	ptr -13Ch
var_138		= dword	ptr -138h
var_134		= dword	ptr -134h
var_130		= dword	ptr -130h
var_12C		= dword	ptr -12Ch
var_128		= dword	ptr -128h
var_124		= dword	ptr -124h
var_120		= dword	ptr -120h
var_11C		= dword	ptr -11Ch
var_108		= dword	ptr -108h
var_104		= dword	ptr -104h
var_100		= dword	ptr -100h
var_FC		= dword	ptr -0FCh
var_F8		= dword	ptr -0F8h
var_F4		= dword	ptr -0F4h
var_F0		= dword	ptr -0F0h
var_E8		= dword	ptr -0E8h
var_E4		= dword	ptr -0E4h
var_E0		= word ptr -0E0h
var_DC		= dword	ptr -0DCh
var_D8		= word ptr -0D8h
var_D4		= dword	ptr -0D4h
var_D0		= dword	ptr -0D0h
var_CC		= byte ptr -0CCh
var_C8		= word ptr -0C8h
var_C4		= dword	ptr -0C4h
var_C0		= word ptr -0C0h
var_BC		= byte ptr -0BCh
var_20		= dword	ptr -20h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 13Ch
		mov	ebx, [esp+14Ch+arg_0]
		mov	[esp+14Ch+var_F8], ebx
		mov	ebx, [esp+14Ch+arg_4]
		mov	[esp+14Ch+var_100], ebx
		mov	esi, [esp+14Ch+arg_8]
		mov	ebx, [esp+14Ch+arg_C]
		mov	[esp+14Ch+var_F0], ebx
		mov	edx, [esp+14Ch+arg_10]
		mov	ebx, [esp+14Ch+arg_14]
		mov	eax, ds:__stack_chk_guard
		mov	[esp+14Ch+var_20], eax
		xor	eax, eax
		mov	ax, [edx+2]
		cmp	ax, 3
		jz	loc_68893530
		cmp	ax, 5
		jz	loc_68893580
		cmp	ax, 7
		jz	loc_6889377C
		cmp	ax, 0Ah
		jz	loc_688938BC
		cmp	ax, 0Bh
		jz	loc_68893B6B
		cmp	ax, 0Dh
		jz	loc_68893BAC
		cmp	ax, 0Fh
		jz	loc_68893BB6
		cmp	ax, 10h
		jz	loc_68893C17
		cmp	ax, 12h
		jz	loc_68893CB4
		cmp	ax, 13h
		jz	loc_68893DDD
		cmp	ax, 18h
		jz	loc_68893E60
		cmp	ax, 1Fh
		jz	loc_68893EA2
		cmp	ax, 21h
		jz	short loc_688934D4

loc_688934B4:				; CODE XREF: sub_688933E4+FCj
					; sub_688933E4+149j ...
		xor	eax, eax

loc_688934B6:				; CODE XREF: sub_688933E4+196j
					; sub_688933E4+392j ...
		mov	edx, [esp+14Ch+var_20]
		xor	edx, ds:__stack_chk_guard
		jnz	loc_6889418E
		add	esp, 13Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_688934D4:				; CODE XREF: sub_688933E4+CEj
		mov	[esp+14Ch+var_14C], ebx
		call	sub_688819F0
		cmp	ax, 1
		ja	short loc_688934B4
		mov	[esp+14Ch+var_14C], ebx
		call	sub_68881990
		mov	[esp+14Ch+var_14C], ebx
		mov	byte ptr [esp+14Ch+var_108], al
		call	sub_68881990
		movzx	edi, al
		mov	[esp+14Ch+var_148], edi
		mov	[esp+14Ch+var_14C], ebx
		call	sub_68881CAC
		mov	esi, eax
		mov	dl, byte ptr [esp+14Ch+var_108]
		test	dl, dl
		jz	loc_6889407A
		cmp	dl, 41h
		jz	loc_6889407A
		cmp	dl, 81h
		jz	loc_68894150

loc_68893525:				; CODE XREF: sub_688933E4+D17j
					; sub_688933E4+D56j ...
		mov	[esp+14Ch+var_14C], esi
		call	g_free
		jmp	short loc_688934B4
; ---------------------------------------------------------------------------
		align 10h

loc_68893530:				; CODE XREF: sub_688933E4+56j
		mov	esi, [esp+14Ch+var_100]
		jmp	short loc_68893555
; ---------------------------------------------------------------------------
		align 4

loc_68893538:				; CODE XREF: sub_688933E4+17Bj
		mov	[esp+14Ch+var_14C], ebx
		call	sub_688819F0
		movzx	eax, ax
		mov	[esp+14Ch+var_148], eax
		mov	eax, [esi+64h]
		mov	[esp+14Ch+var_14C], eax
		call	g_slist_prepend
		mov	[esi+64h], eax

loc_68893555:				; CODE XREF: sub_688933E4+150j
		mov	[esp+14Ch+var_14C], ebx
		call	sub_68881818
		test	eax, eax
		jnz	short loc_68893538
		mov	ebx, [esp+14Ch+var_100]
		mov	[esp+14Ch+var_148], ebx
		mov	ebx, [esp+14Ch+var_F8]
		mov	[esp+14Ch+var_14C], ebx
		call	aim_srv_setversions
		mov	eax, 1
		jmp	loc_688934B6
; ---------------------------------------------------------------------------
		align 10h

loc_68893580:				; CODE XREF: sub_688933E4+60j
		lea	ebp, [esp+14Ch+var_E0]
		mov	ecx, 24h
		xor	eax, eax
		mov	edi, ebp
		rep stosb
		mov	[esp+14Ch+var_14C], ebx
		mov	[esp+14Ch+var_108], edx
		call	aim_tlvlist_read
		mov	ebx, eax
		mov	[esp+14Ch+var_144], 1
		mov	[esp+14Ch+var_148], 0Dh
		mov	[esp+14Ch+var_14C], eax
		call	aim_tlv_gettlv
		test	eax, eax
		mov	edx, [esp+14Ch+var_108]
		jz	loc_68893CA1
		mov	[esp+14Ch+var_144], 1
		mov	[esp+14Ch+var_148], 5
		mov	[esp+14Ch+var_14C], ebx
		mov	[esp+14Ch+var_108], edx
		call	aim_tlv_gettlv
		test	eax, eax
		jz	loc_68893CA1
		mov	[esp+14Ch+var_144], 1
		mov	[esp+14Ch+var_148], 6
		mov	[esp+14Ch+var_14C], ebx
		call	aim_tlv_gettlv
		test	eax, eax
		jz	loc_68893CA1
		mov	[esp+14Ch+var_144], 1
		mov	[esp+14Ch+var_148], 0Dh
		mov	[esp+14Ch+var_14C], ebx
		call	aim_tlv_get16
		mov	[esp+14Ch+var_E0], ax
		mov	[esp+14Ch+var_144], 1
		mov	[esp+14Ch+var_148], 5
		mov	[esp+14Ch+var_14C], ebx
		call	aim_tlv_getstr
		mov	[esp+14Ch+var_DC], eax
		mov	[esp+14Ch+var_144], 1
		mov	[esp+14Ch+var_148], 6
		mov	[esp+14Ch+var_14C], ebx
		call	aim_tlv_gettlv
		mov	ax, [eax+2]
		mov	[esp+14Ch+var_D8], ax
		mov	[esp+14Ch+var_144], 1
		mov	[esp+14Ch+var_148], 6
		mov	[esp+14Ch+var_14C], ebx
		call	aim_tlv_getstr
		mov	[esp+14Ch+var_D4], eax
		mov	[esp+14Ch+var_144], 1
		mov	[esp+14Ch+var_148], 8Dh
		mov	[esp+14Ch+var_14C], ebx
		call	aim_tlv_getstr
		mov	[esp+14Ch+var_D0], eax
		mov	[esp+14Ch+var_144], 1
		mov	[esp+14Ch+var_148], 8Eh
		mov	[esp+14Ch+var_14C], ebx
		call	aim_tlv_get8
		mov	[esp+14Ch+var_CC], al
		mov	edx, [esp+14Ch+var_108]
		mov	eax, [edx+8]
		mov	[esp+14Ch+var_148], eax
		mov	eax, [esp+14Ch+var_F8]
		mov	[esp+14Ch+var_14C], eax
		call	aim_remsnac
		mov	esi, eax
		cmp	[esp+14Ch+var_E0], 0Eh
		mov	edx, [esp+14Ch+var_108]
		jz	loc_68893FF5

loc_688936DF:				; CODE XREF: sub_688933E4+C13j
					; sub_688933E4+C40j
		movzx	eax, word ptr [edx+2]
		mov	[esp+14Ch+var_144], eax
		movzx	eax, word ptr [edx]
		mov	[esp+14Ch+var_148], eax
		mov	edx, [esp+14Ch+var_F8]
		mov	[esp+14Ch+var_14C], edx
		call	aim_callhandler
		test	eax, eax
		jz	loc_68893FEE
		mov	[esp+14Ch+var_140], ebp
		mov	ecx, [esp+14Ch+var_F0]
		mov	[esp+14Ch+var_144], ecx
		mov	edx, [esp+14Ch+var_100]
		mov	[esp+14Ch+var_148], edx
		mov	ecx, [esp+14Ch+var_F8]
		mov	[esp+14Ch+var_14C], ecx
		call	eax

loc_6889371F:				; CODE XREF: sub_688933E4+C0Cj
		mov	edx, [esp+14Ch+var_DC]
		mov	[esp+14Ch+var_14C], edx
		mov	[esp+14Ch+var_108], eax
		call	g_free
		mov	edx, [esp+14Ch+var_D4]
		mov	[esp+14Ch+var_14C], edx
		call	g_free
		mov	edx, [esp+14Ch+var_D0]
		mov	[esp+14Ch+var_14C], edx
		call	g_free
		test	esi, esi
		mov	eax, [esp+14Ch+var_108]
		jz	short loc_6889375E
		mov	edx, [esi+0Ch]
		mov	[esp+14Ch+var_14C], edx
		call	g_free
		mov	eax, [esp+14Ch+var_108]

loc_6889375E:				; CODE XREF: sub_688933E4+369j
					; sub_688933E4+B76j ...
		mov	[esp+14Ch+var_14C], esi

loc_68893761:				; CODE XREF: sub_688933E4+A77j
		mov	[esp+14Ch+var_108], eax
		call	g_free
		mov	[esp+14Ch+var_14C], ebx
		call	aim_tlvlist_free
		mov	eax, [esp+14Ch+var_108]
		jmp	loc_688934B6
; ---------------------------------------------------------------------------
		align 4

loc_6889377C:				; CODE XREF: sub_688933E4+6Aj
		add	esi, 2
		mov	[esp+14Ch+var_104], esi
		mov	[esp+14Ch+var_14C], ebx
		call	sub_688819F0
		mov	word ptr [esp+14Ch+var_F4], ax
		test	ax, ax
		jz	loc_68894055
		xor	edi, edi
		mov	ebp, [esp+14Ch+var_100]
		jmp	short loc_688937E6
; ---------------------------------------------------------------------------
		align 4

loc_688937A4:				; CODE XREF: sub_688933E4+484j
		mov	byte ptr [esi+20h], 0
		xor	ecx, ecx
		xor	edx, edx

loc_688937AC:				; CODE XREF: sub_688933E4+4C9j
		mov	eax, [esp+14Ch+var_E8]
		sub	eax, edx
		mov	[esi+24h], eax
		mov	eax, [esp+14Ch+var_E4]
		sub	eax, ecx
		mov	[esi+28h], eax
		mov	[esp+14Ch+var_148], esi
		mov	eax, [ebp+68h]
		mov	[esp+14Ch+var_14C], eax
		call	g_slist_prepend
		mov	[ebp+68h], eax
		cmp	word ptr [esi],	1
		jz	loc_688938B4

loc_688937DA:				; CODE XREF: sub_688933E4+4D3j
		inc	edi
		cmp	di, word ptr [esp+14Ch+var_F4]
		jz	loc_68893A25

loc_688937E6:				; CODE XREF: sub_688933E4+3BBj
		mov	[esp+14Ch+var_148], 0
		lea	eax, [esp+14Ch+var_E8]
		mov	[esp+14Ch+var_14C], eax
		call	wpurple_gettimeofday
		mov	[esp+14Ch+var_14C], 2Ch
		call	g_malloc
		mov	esi, eax
		mov	[esp+14Ch+var_14C], ebx
		call	sub_688819F0
		mov	[esi], ax
		mov	[esp+14Ch+var_14C], ebx
		call	sub_68881A60
		mov	[esi+4], eax
		mov	[esp+14Ch+var_14C], ebx
		call	sub_68881A60
		mov	[esi+8], eax
		mov	[esp+14Ch+var_14C], ebx
		call	sub_68881A60
		mov	[esi+0Ch], eax
		mov	[esp+14Ch+var_14C], ebx
		call	sub_68881A60
		mov	[esi+10h], eax
		mov	[esp+14Ch+var_14C], ebx
		call	sub_68881A60
		mov	[esi+14h], eax
		mov	[esp+14Ch+var_14C], ebx
		call	sub_68881A60
		mov	[esi+18h], eax
		mov	[esp+14Ch+var_14C], ebx
		call	sub_68881A60
		mov	[esi+1Ch], eax
		mov	ecx, [esp+14Ch+var_104]
		cmp	word ptr [ecx],	2
		jbe	loc_688937A4
		mov	[esp+14Ch+var_14C], ebx
		call	sub_68881A60
		mov	[esp+14Ch+var_14C], ebx
		mov	[esp+14Ch+var_108], eax
		call	sub_68881990
		mov	[esi+20h], al
		mov	ecx, [esp+14Ch+var_108]
		mov	eax, 10624DD3h
		mul	ecx
		shr	edx, 6
		lea	eax, [edx+edx*4]
		lea	eax, [eax+eax*4]
		lea	eax, [eax+eax*4]
		shl	eax, 3
		sub	ecx, eax
		lea	eax, [ecx+ecx*4]
		lea	eax, [eax+eax*4]
		lea	ecx, [eax+eax*4]
		shl	ecx, 3
		jmp	loc_688937AC
; ---------------------------------------------------------------------------
		align 4

loc_688938B4:				; CODE XREF: sub_688933E4+3F0j
		mov	[ebp+6Ch], esi
		jmp	loc_688937DA
; ---------------------------------------------------------------------------

loc_688938BC:				; CODE XREF: sub_688933E4+74j
		mov	[esp+14Ch+var_148], 0
		lea	eax, [esp+14Ch+var_E8]
		mov	[esp+14Ch+var_14C], eax
		call	wpurple_gettimeofday
		mov	[esp+14Ch+var_14C], ebx
		call	sub_688819F0
		mov	edi, eax
		mov	[esp+14Ch+var_14C], ebx
		call	sub_688819F0
		mov	ecx, [esp+14Ch+var_100]
		mov	edx, [ecx+68h]
		test	edx, edx
		jnz	short loc_688938FF
		jmp	loc_688934B4
; ---------------------------------------------------------------------------
		align 4

loc_688938F4:				; CODE XREF: sub_688933E4+521j
		mov	edx, [edx+4]
		test	edx, edx
		jz	loc_688934B4

loc_688938FF:				; CODE XREF: sub_688933E4+507j
		mov	ebp, [edx]
		cmp	ax, [ebp+0]
		jnz	short loc_688938F4
		mov	[esp+14Ch+var_14C], ebx
		call	sub_68881A60
		mov	[ebp+4], eax
		mov	[esp+14Ch+var_14C], ebx
		call	sub_68881A60
		mov	[ebp+8], eax
		mov	[esp+14Ch+var_14C], ebx
		call	sub_68881A60
		mov	[ebp+0Ch], eax
		mov	[esp+14Ch+var_14C], ebx
		call	sub_68881A60
		mov	[ebp+10h], eax
		mov	[esp+14Ch+var_14C], ebx
		call	sub_68881A60
		mov	[ebp+14h], eax
		mov	[esp+14Ch+var_14C], ebx
		call	sub_68881A60
		mov	[ebp+18h], eax
		mov	[esp+14Ch+var_14C], ebx
		call	sub_68881A60
		mov	[ebp+1Ch], eax
		cmp	word ptr [esi+2], 2
		ja	loc_68893F85
		mov	byte ptr [ebp+20h], 0
		mov	[esp+14Ch+var_F4], 0
		xor	ebx, ebx
		xor	edx, edx
		xor	esi, esi

loc_68893971:				; CODE XREF: sub_688933E4+BE8j
		mov	ecx, [esp+14Ch+var_E8]
		sub	ecx, edx
		mov	[ebp+24h], ecx
		mov	edx, [esp+14Ch+var_E4]
		sub	edx, ebx
		mov	[ebp+28h], edx
		mov	ecx, [ebp+4]
		mov	edx, [ebp+14h]
		mov	[esp+14Ch+var_104], edx
		mov	ebx, [ebp+10h]
		mov	[esp+14Ch+var_100], ebx
		mov	edx, [ebp+8]
		mov	ebx, [ebp+0Ch]
		mov	[esp+14Ch+var_FC], ebx
		mov	ebx, [ebp+18h]
		mov	[esp+14Ch+var_F8], ebx
		movzx	ebx, word ptr [ebp+0]
		mov	[esp+14Ch+var_11C], ecx
		mov	ecx, [esp+14Ch+var_F4]
		mov	[esp+14Ch+var_120], ecx
		mov	[esp+14Ch+var_124], esi
		mov	ecx, [esp+14Ch+var_104]
		mov	[esp+14Ch+var_128], ecx
		mov	ecx, [esp+14Ch+var_100]
		mov	[esp+14Ch+var_12C], ecx
		mov	[esp+14Ch+var_130], edx
		mov	edx, [esp+14Ch+var_FC]
		mov	[esp+14Ch+var_134], edx
		mov	[esp+14Ch+var_138], eax
		mov	ecx, [esp+14Ch+var_F8]
		mov	[esp+14Ch+var_13C], ecx
		mov	[esp+14Ch+var_140], ebx
		cmp	di, 4
		ja	loc_68893F5F
		movzx	eax, di
		mov	eax, ds:off_688B1424[eax*4]
		mov	[esp+14Ch+var_144], eax
		mov	[esp+14Ch+var_148], offset aRateSParamId0x ; "rate %s (param ID	0x%04hx): curavg = %u"...
		mov	[esp+14Ch+var_14C], offset aOscar_8 ; "oscar"
		call	purple_debug_misc
		cmp	di, 3
		jz	loc_68894030

loc_68893A1B:				; CODE XREF: sub_688933E4+72Aj
		mov	eax, 1
		jmp	loc_688934B6
; ---------------------------------------------------------------------------

loc_68893A25:				; CODE XREF: sub_688933E4+3FCj
		mov	[esp+14Ch+var_14C], eax
		call	g_slist_reverse
		mov	edx, [esp+14Ch+var_100]
		mov	[edx+68h], eax
		mov	word ptr [esp+14Ch+var_FC], 0
		nop

loc_68893A3C:				; CODE XREF: sub_688933E4+6F6j
					; sub_688933E4+77Cj
		mov	[esp+14Ch+var_14C], ebx
		call	sub_688819F0
		mov	esi, eax
		mov	[esp+14Ch+var_14C], ebx
		call	sub_688819F0
		cmp	si, 1
		jz	loc_68893B40
		mov	ecx, [esp+14Ch+var_100]
		mov	edx, [ecx+68h]
		test	edx, edx
		jnz	short loc_68893A73
		jmp	loc_68893B38
; ---------------------------------------------------------------------------

loc_68893A68:				; CODE XREF: sub_688933E4+695j
		mov	edx, [edx+4]
		test	edx, edx
		jz	loc_68893B38

loc_68893A73:				; CODE XREF: sub_688933E4+67Dj
		mov	ebp, [edx]
		cmp	si, [ebp+0]
		jnz	short loc_68893A68

loc_68893A7B:				; CODE XREF: sub_688933E4+756j
		test	ax, ax
		jz	short loc_68893ACC
		movzx	eax, ax
		inc	eax
		mov	[esp+14Ch+var_104], eax
		mov	esi, 1
		lea	esi, [esi+0]

loc_68893A90:				; CODE XREF: sub_688933E4+6E6j
		mov	[esp+14Ch+var_14C], ebx
		call	sub_688819F0
		mov	edi, eax
		mov	[esp+14Ch+var_14C], ebx
		call	sub_688819F0
		test	ebp, ebp
		jz	short loc_68893AC5
		mov	[esp+14Ch+var_144], ebp
		shl	edi, 10h
		movzx	eax, ax
		add	eax, edi
		mov	[esp+14Ch+var_148], eax
		mov	edx, [esp+14Ch+var_100]
		mov	eax, [edx+70h]
		mov	[esp+14Ch+var_14C], eax
		call	g_hash_table_insert

loc_68893AC5:				; CODE XREF: sub_688933E4+6C0j
		inc	esi
		cmp	esi, [esp+14Ch+var_104]
		jnz	short loc_68893A90

loc_68893ACC:				; CODE XREF: sub_688933E4+69Aj
		inc	word ptr [esp+14Ch+var_FC]
		mov	eax, [esp+14Ch+var_F4]
		cmp	word ptr [esp+14Ch+var_FC], ax
		jnz	loc_68893A3C

loc_68893AE0:				; CODE XREF: sub_688933E4+782j
					; sub_688933E4+C83j
		mov	ebx, [esp+14Ch+var_100]
		mov	[esp+14Ch+var_148], ebx
		mov	ebx, [esp+14Ch+var_F8]
		mov	[esp+14Ch+var_14C], ebx
		call	aim_srv_rates_addparam
		mov	[esp+14Ch+var_144], 6
		mov	[esp+14Ch+var_148], 0FFFFh
		mov	[esp+14Ch+var_14C], ebx
		call	aim_callhandler
		test	eax, eax
		jz	loc_68893A1B
		mov	ebx, [esp+14Ch+var_F0]
		mov	[esp+14Ch+var_144], ebx
		mov	ebx, [esp+14Ch+var_100]
		mov	[esp+14Ch+var_148], ebx
		mov	ebx, [esp+14Ch+var_F8]
		mov	[esp+14Ch+var_14C], ebx
		call	eax
		mov	eax, 1
		jmp	loc_688934B6
; ---------------------------------------------------------------------------
		align 4

loc_68893B38:				; CODE XREF: sub_688933E4+67Fj
					; sub_688933E4+689j
		xor	ebp, ebp
		jmp	loc_68893A7B
; ---------------------------------------------------------------------------
		align 10h

loc_68893B40:				; CODE XREF: sub_688933E4+66Ej
		movzx	eax, ax
		shl	eax, 2
		mov	[esp+14Ch+var_148], eax
		mov	[esp+14Ch+var_14C], ebx
		call	sub_68881904
		inc	word ptr [esp+14Ch+var_FC]
		mov	eax, [esp+14Ch+var_F4]
		cmp	word ptr [esp+14Ch+var_FC], ax
		jnz	loc_68893A3C
		jmp	loc_68893AE0
; ---------------------------------------------------------------------------

loc_68893B6B:				; CODE XREF: sub_688933E4+7Ej
		mov	[esp+14Ch+var_144], 0Bh

loc_68893B73:				; CODE XREF: sub_688933E4+7D0j
		movzx	eax, word ptr [edx]
		mov	[esp+14Ch+var_148], eax
		mov	ebx, [esp+14Ch+var_F8]
		mov	[esp+14Ch+var_14C], ebx
		call	aim_callhandler
		test	eax, eax
		jz	loc_688934B4
		mov	ebx, [esp+14Ch+var_F0]
		mov	[esp+14Ch+var_144], ebx
		mov	ebx, [esp+14Ch+var_100]
		mov	[esp+14Ch+var_148], ebx
		mov	ebx, [esp+14Ch+var_F8]
		mov	[esp+14Ch+var_14C], ebx
		call	eax
		jmp	loc_688934B6
; ---------------------------------------------------------------------------

loc_68893BAC:				; CODE XREF: sub_688933E4+88j
		mov	[esp+14Ch+var_144], 0Dh
		jmp	short loc_68893B73
; ---------------------------------------------------------------------------

loc_68893BB6:				; CODE XREF: sub_688933E4+92j
		lea	esi, [esp+14Ch+var_BC]
		mov	[esp+14Ch+var_144], esi
		mov	[esp+14Ch+var_148], ebx
		mov	ebx, [esp+14Ch+var_F8]
		mov	[esp+14Ch+var_14C], ebx
		mov	[esp+14Ch+var_108], edx
		call	aim_info_extract
		mov	edx, [esp+14Ch+var_108]
		movzx	eax, word ptr [edx+2]
		mov	[esp+14Ch+var_144], eax
		movzx	eax, word ptr [edx]
		mov	[esp+14Ch+var_148], eax
		mov	[esp+14Ch+var_14C], ebx
		call	aim_callhandler
		test	eax, eax
		jz	loc_68893CB0
		mov	[esp+14Ch+var_140], esi
		mov	ebx, [esp+14Ch+var_F0]
		mov	[esp+14Ch+var_144], ebx
		mov	ebx, [esp+14Ch+var_100]
		mov	[esp+14Ch+var_148], ebx
		mov	ebx, [esp+14Ch+var_F8]
		mov	[esp+14Ch+var_14C], ebx
		call	eax
		jmp	short loc_68893C8C
; ---------------------------------------------------------------------------

loc_68893C17:				; CODE XREF: sub_688933E4+9Cj
		lea	esi, [esp+14Ch+var_BC]
		mov	ecx, 98h
		xor	eax, eax
		mov	edi, esi
		rep stosb
		mov	[esp+14Ch+var_14C], ebx
		mov	[esp+14Ch+var_108], edx
		call	sub_688819F0
		movzx	edi, ax
		mov	[esp+14Ch+var_14C], ebx
		call	sub_68881818
		test	eax, eax
		mov	edx, [esp+14Ch+var_108]
		jnz	loc_68893FD1

loc_68893C4C:				; CODE XREF: sub_688933E4+C05j
		movzx	eax, word ptr [edx+2]
		mov	[esp+14Ch+var_144], eax
		movzx	eax, word ptr [edx]
		mov	[esp+14Ch+var_148], eax
		mov	ebx, [esp+14Ch+var_F8]
		mov	[esp+14Ch+var_14C], ebx
		call	aim_callhandler
		test	eax, eax
		jz	short loc_68893CB0
		mov	[esp+14Ch+var_13C], esi
		mov	[esp+14Ch+var_140], edi
		mov	ebx, [esp+14Ch+var_F0]
		mov	[esp+14Ch+var_144], ebx
		mov	ebx, [esp+14Ch+var_100]
		mov	[esp+14Ch+var_148], ebx
		mov	ebx, [esp+14Ch+var_F8]
		mov	[esp+14Ch+var_14C], ebx
		call	eax

loc_68893C8C:				; CODE XREF: sub_688933E4+831j
					; sub_688933E4+8CEj
		mov	[esp+14Ch+var_14C], esi
		mov	[esp+14Ch+var_108], eax
		call	aim_info_free
		mov	eax, [esp+14Ch+var_108]
		jmp	loc_688934B6
; ---------------------------------------------------------------------------

loc_68893CA1:				; CODE XREF: sub_688933E4+1D7j
					; sub_688933E4+1FBj ...
		mov	[esp+14Ch+var_14C], ebx
		call	aim_tlvlist_free
		xor	eax, eax
		jmp	loc_688934B6
; ---------------------------------------------------------------------------

loc_68893CB0:				; CODE XREF: sub_688933E4+80Ej
					; sub_688933E4+885j
		xor	eax, eax
		jmp	short loc_68893C8C
; ---------------------------------------------------------------------------

loc_68893CB4:				; CODE XREF: sub_688933E4+A6j
		mov	[esp+14Ch+var_14C], ebx
		mov	[esp+14Ch+var_108], edx
		call	sub_688819F0
		mov	esi, eax
		xor	edi, edi
		test	ax, ax
		mov	edx, [esp+14Ch+var_108]
		jz	short loc_68893CFB
		mov	ebp, edx
		nop

loc_68893CD0:				; CODE XREF: sub_688933E4+913j
		mov	[esp+14Ch+var_14C], ebx
		call	sub_688819F0
		movzx	eax, ax
		mov	[esp+14Ch+var_144], eax
		mov	[esp+14Ch+var_148], offset aBifurcatedMigr ; "bifurcated migration unsupported -- gro"...
		mov	[esp+14Ch+var_14C], offset aOscar_8 ; "oscar"
		call	purple_debug_misc
		inc	edi
		cmp	di, si
		jnz	short loc_68893CD0
		mov	edx, ebp

loc_68893CFB:				; CODE XREF: sub_688933E4+8E7j
		mov	[esp+14Ch+var_14C], ebx
		mov	[esp+14Ch+var_108], edx
		call	aim_tlvlist_read
		mov	ebx, eax
		mov	[esp+14Ch+var_144], 1
		mov	[esp+14Ch+var_148], 5
		mov	[esp+14Ch+var_14C], eax
		call	aim_tlv_gettlv
		test	eax, eax
		mov	edx, [esp+14Ch+var_108]
		jz	loc_68894029
		mov	[esp+14Ch+var_144], 1
		mov	[esp+14Ch+var_148], 5
		mov	[esp+14Ch+var_14C], ebx
		mov	[esp+14Ch+var_108], edx
		call	aim_tlv_getstr
		mov	esi, eax
		mov	edx, [esp+14Ch+var_108]

loc_68893D4F:				; CODE XREF: sub_688933E4+C47j
		mov	[esp+14Ch+var_144], 1
		mov	[esp+14Ch+var_148], 6
		mov	[esp+14Ch+var_14C], ebx
		mov	[esp+14Ch+var_108], edx
		call	aim_tlv_gettlv
		mov	edi, eax
		mov	edx, [esp+14Ch+var_108]
		movzx	eax, word ptr [edx+2]
		mov	[esp+14Ch+var_144], eax
		movzx	eax, word ptr [edx]
		mov	[esp+14Ch+var_148], eax
		mov	eax, [esp+14Ch+var_F8]
		mov	[esp+14Ch+var_14C], eax
		call	aim_callhandler
		test	eax, eax
		jz	loc_6889410A
		test	edi, edi
		jz	loc_68894073
		mov	edx, [edi+4]

loc_68893D9F:				; CODE XREF: sub_688933E4+C91j
		mov	[esp+14Ch+var_13C], edx
		mov	[esp+14Ch+var_140], esi
		mov	edx, [esp+14Ch+var_F0]
		mov	[esp+14Ch+var_144], edx
		mov	ecx, [esp+14Ch+var_100]
		mov	[esp+14Ch+var_148], ecx
		mov	edx, [esp+14Ch+var_F8]
		mov	[esp+14Ch+var_14C], edx
		call	eax

loc_68893DC0:				; CODE XREF: sub_688933E4+D28j
		mov	[esp+14Ch+var_14C], ebx
		mov	[esp+14Ch+var_108], eax
		call	aim_tlvlist_free
		mov	[esp+14Ch+var_14C], esi
		call	g_free
		mov	eax, [esp+14Ch+var_108]
		jmp	loc_688934B6
; ---------------------------------------------------------------------------

loc_68893DDD:				; CODE XREF: sub_688933E4+B0j
		mov	[esp+14Ch+var_14C], ebx
		mov	[esp+14Ch+var_108], edx
		call	sub_688819F0
		movzx	esi, ax
		mov	[esp+14Ch+var_14C], ebx
		call	aim_tlvlist_read
		mov	ebx, eax
		mov	[esp+14Ch+var_144], 1
		mov	[esp+14Ch+var_148], 0Bh
		mov	[esp+14Ch+var_14C], eax
		call	aim_tlv_getstr
		mov	edi, eax
		mov	edx, [esp+14Ch+var_108]
		movzx	eax, word ptr [edx+2]
		mov	[esp+14Ch+var_144], eax
		movzx	eax, word ptr [edx]
		mov	[esp+14Ch+var_148], eax
		mov	ecx, [esp+14Ch+var_F8]
		mov	[esp+14Ch+var_14C], ecx
		call	aim_callhandler
		test	eax, eax
		jz	loc_6889404E
		mov	[esp+14Ch+var_13C], edi
		mov	[esp+14Ch+var_140], esi
		mov	edx, [esp+14Ch+var_F0]
		mov	[esp+14Ch+var_144], edx
		mov	ecx, [esp+14Ch+var_100]
		mov	[esp+14Ch+var_148], ecx
		mov	edx, [esp+14Ch+var_F8]
		mov	[esp+14Ch+var_14C], edx
		call	eax

loc_68893E58:				; CODE XREF: sub_688933E4+C6Cj
		mov	[esp+14Ch+var_14C], edi
		jmp	loc_68893761
; ---------------------------------------------------------------------------

loc_68893E60:				; CODE XREF: sub_688933E4+BAj
		mov	[esp+14Ch+var_14C], ebx
		call	sub_68881818
		mov	[esp+14Ch+var_14C], ebx
		call	sub_68881818
		mov	[esp+14Ch+var_148], eax
		mov	[esp+14Ch+var_14C], ebx
		call	sub_68881CAC
		mov	[esp+14Ch+var_14C], eax
		call	g_free
		mov	ebx, [esp+14Ch+var_100]
		mov	[esp+14Ch+var_148], ebx
		mov	ebx, [esp+14Ch+var_F8]
		mov	[esp+14Ch+var_14C], ebx
		call	aim_srv_reqrates
		mov	eax, 1
		jmp	loc_688934B6
; ---------------------------------------------------------------------------

loc_68893EA2:				; CODE XREF: sub_688933E4+C4j
		mov	[esp+14Ch+var_14C], ebx
		mov	[esp+14Ch+var_108], edx
		call	sub_68881A60
		mov	edi, eax
		mov	[esp+14Ch+var_14C], ebx
		call	sub_68881A60
		mov	ebp, eax
		mov	[esp+14Ch+var_14C], ebx
		call	aim_tlvlist_read
		mov	ebx, eax
		mov	[esp+14Ch+var_144], 1
		mov	[esp+14Ch+var_148], 1
		mov	[esp+14Ch+var_14C], eax
		call	aim_tlv_getstr
		mov	esi, eax
		test	eax, eax
		mov	edx, [esp+14Ch+var_108]
		jz	loc_68894100

loc_68893EEA:				; CODE XREF: sub_688933E4+D21j
		mov	[esp+14Ch+var_13C], eax
		mov	[esp+14Ch+var_140], ebp
		mov	[esp+14Ch+var_144], edi
		mov	[esp+14Ch+var_148], offset aGotMemoryReque ; "Got memory request for data at 0x%08x ("...
		mov	[esp+14Ch+var_14C], offset aOscar_8 ; "oscar"
		mov	[esp+14Ch+var_108], edx
		call	purple_debug_info
		mov	edx, [esp+14Ch+var_108]
		movzx	eax, word ptr [edx+2]
		mov	[esp+14Ch+var_144], eax
		movzx	eax, word ptr [edx]
		mov	[esp+14Ch+var_148], eax
		mov	eax, [esp+14Ch+var_F8]
		mov	[esp+14Ch+var_14C], eax
		call	aim_callhandler
		test	eax, eax
		jz	loc_6889406C
		mov	[esp+14Ch+var_138], esi
		mov	[esp+14Ch+var_13C], ebp
		mov	[esp+14Ch+var_140], edi
		mov	edx, [esp+14Ch+var_F0]
		mov	[esp+14Ch+var_144], edx
		mov	ecx, [esp+14Ch+var_100]
		mov	[esp+14Ch+var_148], ecx
		mov	edx, [esp+14Ch+var_F8]
		mov	[esp+14Ch+var_14C], edx
		call	eax
		jmp	loc_6889375E
; ---------------------------------------------------------------------------

loc_68893F5F:				; CODE XREF: sub_688933E4+605j
		mov	[esp+14Ch+var_144], offset aInvalid ; "invalid"
		mov	[esp+14Ch+var_148], offset aRateSParamId0x ; "rate %s (param ID	0x%04hx): curavg = %u"...
		mov	[esp+14Ch+var_14C], offset aOscar_8 ; "oscar"
		call	purple_debug_misc
		mov	eax, 1
		jmp	loc_688934B6
; ---------------------------------------------------------------------------

loc_68893F85:				; CODE XREF: sub_688933E4+575j
		mov	[esp+14Ch+var_14C], ebx
		call	sub_68881A60
		mov	esi, eax
		mov	[esp+14Ch+var_14C], ebx
		call	sub_68881990
		movzx	ecx, al
		mov	[ebp+20h], cl
		mov	edx, 10624DD3h
		mov	eax, esi
		mul	edx
		shr	edx, 6
		lea	eax, [edx+edx*4]
		lea	eax, [eax+eax*4]
		lea	eax, [eax+eax*4]
		shl	eax, 3
		mov	ebx, esi
		sub	ebx, eax
		lea	eax, [ebx+ebx*4]
		lea	eax, [eax+eax*4]
		lea	ebx, [eax+eax*4]
		shl	ebx, 3
		mov	[esp+14Ch+var_F4], ecx
		mov	eax, [ebp+1Ch]
		jmp	loc_68893971
; ---------------------------------------------------------------------------

loc_68893FD1:				; CODE XREF: sub_688933E4+862j
		mov	[esp+14Ch+var_144], esi
		mov	[esp+14Ch+var_148], ebx
		mov	ebx, [esp+14Ch+var_F8]
		mov	[esp+14Ch+var_14C], ebx
		call	aim_info_extract
		mov	edx, [esp+14Ch+var_108]
		jmp	loc_68893C4C
; ---------------------------------------------------------------------------

loc_68893FEE:				; CODE XREF: sub_688933E4+318j
		xor	eax, eax
		jmp	loc_6889371F
; ---------------------------------------------------------------------------

loc_68893FF5:				; CODE XREF: sub_688933E4+2F5j
		test	eax, eax
		jz	loc_688936DF
		mov	eax, [eax+0Ch]
		mov	cx, [eax]
		mov	[esp+14Ch+var_C8], cx
		lea	ecx, [eax+2]
		mov	[esp+14Ch+var_C4], ecx
		mov	ax, [eax+82h]
		mov	[esp+14Ch+var_C0], ax
		jmp	loc_688936DF
; ---------------------------------------------------------------------------

loc_68894029:				; CODE XREF: sub_688933E4+943j
		xor	esi, esi
		jmp	loc_68893D4F
; ---------------------------------------------------------------------------

loc_68894030:				; CODE XREF: sub_688933E4+631j
		mov	[esp+14Ch+var_148], offset aTheLastActionY ; "The last action you attempted could not"...
		mov	[esp+14Ch+var_14C], offset aOscar_8 ; "oscar"
		call	purple_debug_warning
		mov	eax, 1
		jmp	loc_688934B6
; ---------------------------------------------------------------------------

loc_6889404E:				; CODE XREF: sub_688933E4+A4Dj
		xor	eax, eax
		jmp	loc_68893E58
; ---------------------------------------------------------------------------

loc_68894055:				; CODE XREF: sub_688933E4+3AFj
		mov	ebx, [esp+14Ch+var_100]
		mov	eax, [ebx+68h]
		mov	[esp+14Ch+var_14C], eax
		call	g_slist_reverse
		mov	[ebx+68h], eax
		jmp	loc_68893AE0
; ---------------------------------------------------------------------------

loc_6889406C:				; CODE XREF: sub_688933E4+B4Bj
		xor	eax, eax
		jmp	loc_6889375E
; ---------------------------------------------------------------------------

loc_68894073:				; CODE XREF: sub_688933E4+9B2j
		xor	edx, edx
		jmp	loc_68893D9F
; ---------------------------------------------------------------------------

loc_6889407A:				; CODE XREF: sub_688933E4+129j
					; sub_688933E4+132j
		mov	[esp+14Ch+var_148], 10h
		mov	ebx, [esp+14Ch+var_F8]
		mov	[esp+14Ch+var_14C], ebx
		call	flap_connection_getbytype
		test	eax, eax
		jz	short loc_68894111

loc_68894092:				; CODE XREF: sub_688933E4+D32j
		mov	ebx, [esp+14Ch+var_F8]
		mov	eax, [ebx+68h]
		mov	[esp+14Ch+var_14C], eax
		call	purple_connection_get_account
		mov	[esp+14Ch+var_14C], eax
		call	purple_buddy_icons_find_account_icon
		mov	ebx, eax
		test	eax, eax
		jz	loc_6889413F
		mov	[esp+14Ch+var_148], offset aUploadingIconT ; "Uploading	icon to	icon server\n"
		mov	[esp+14Ch+var_14C], offset aOscar_8 ; "oscar"
		call	purple_debug_info
		mov	[esp+14Ch+var_14C], ebx
		call	purple_imgstore_get_size
		mov	edi, eax
		mov	[esp+14Ch+var_14C], ebx
		call	purple_imgstore_get_data
		and	edi, 0FFFFh
		mov	[esp+14Ch+var_144], edi
		mov	[esp+14Ch+var_148], eax
		mov	eax, [esp+14Ch+var_F8]
		mov	[esp+14Ch+var_14C], eax
		call	aim_bart_upload
		mov	[esp+14Ch+var_14C], ebx
		call	purple_imgstore_unref
		jmp	loc_68893525
; ---------------------------------------------------------------------------

loc_68894100:				; CODE XREF: sub_688933E4+B00j
		mov	eax, offset aAim_exe ; "aim.exe"
		jmp	loc_68893EEA
; ---------------------------------------------------------------------------

loc_6889410A:				; CODE XREF: sub_688933E4+9AAj
		xor	eax, eax
		jmp	loc_68893DC0
; ---------------------------------------------------------------------------

loc_68894111:				; CODE XREF: sub_688933E4+CACj
		mov	ecx, [ebx+4]
		test	ecx, ecx
		jnz	loc_68894092
		mov	dword ptr [ebx+4], 1
		mov	dword ptr [ebx+8], 1
		mov	[esp+14Ch+var_148], 10h
		mov	[esp+14Ch+var_14C], ebx
		call	aim_srv_requestnew
		jmp	loc_68893525
; ---------------------------------------------------------------------------

loc_6889413F:				; CODE XREF: sub_688933E4+CC9j
					; sub_688933E4+D87j
		mov	ebx, [esp+14Ch+var_F8]
		mov	[esp+14Ch+var_14C], ebx
		call	aim_ssi_delicon
		jmp	loc_68893525
; ---------------------------------------------------------------------------

loc_68894150:				; CODE XREF: sub_688933E4+13Bj
		mov	ebx, [esp+14Ch+var_F8]
		mov	eax, [ebx+68h]
		mov	[esp+14Ch+var_14C], eax
		call	purple_connection_get_account
		mov	[esp+14Ch+var_14C], eax
		call	purple_buddy_icons_find_account_icon
		mov	ebx, eax
		test	eax, eax
		jz	short loc_6889413F
		mov	[esp+14Ch+var_144], edi
		mov	[esp+14Ch+var_148], esi
		mov	eax, [esp+14Ch+var_F8]
		mov	[esp+14Ch+var_14C], eax
		call	aim_ssi_seticon
		mov	[esp+14Ch+var_14C], ebx
		call	purple_imgstore_unref
		jmp	loc_68893525
; ---------------------------------------------------------------------------

loc_6889418E:				; CODE XREF: sub_688933E4+DFj
		call	__stack_chk_fail
sub_688933E4	endp

; ---------------------------------------------------------------------------
		align 4
; Exported entry  78. aim_srv_setextrainfo

; =============== S U B	R O U T	I N E =======================================


		public aim_srv_setextrainfo
aim_srv_setextrainfo proc near		; CODE XREF: sub_68899944+4Ap
					; sub_6889A35C+324p ...

var_6C		= dword	ptr -6Ch
var_68		= dword	ptr -68h
var_64		= dword	ptr -64h
var_60		= dword	ptr -60h
var_5C		= dword	ptr -5Ch
var_58		= dword	ptr -58h
var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_20		= dword	ptr -20h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 5Ch
		mov	ebx, [esp+6Ch+arg_0]
		mov	ebp, [esp+6Ch+arg_4]
		mov	edx, [esp+6Ch+arg_8]
		mov	[esp+6Ch+var_40], edx
		mov	edi, [esp+6Ch+arg_C]
		mov	eax, [esp+6Ch+arg_10]
		mov	[esp+6Ch+var_48], eax
		mov	edx, [esp+6Ch+arg_14]
		mov	[esp+6Ch+var_44], edx
		mov	eax, ds:__stack_chk_guard
		mov	[esp+6Ch+var_20], eax
		xor	eax, eax
		mov	[esp+6Ch+var_30], 0
		test	ebx, ebx
		jz	loc_688943AC
		mov	[esp+6Ch+var_68], 4
		mov	[esp+6Ch+var_6C], ebx
		call	flap_connection_findbygroup
		mov	esi, eax
		test	eax, eax
		jz	loc_688943AC
		test	ebp, ebp
		jnz	loc_68894370
		lea	ebp, [esp+6Ch+var_30]

loc_68894206:				; CODE XREF: aim_srv_setextrainfo+1FEj
		test	edi, edi
		jz	loc_688942C8
		mov	eax, [esp+6Ch+var_48]
		test	eax, eax
		jz	loc_68894398
		xor	eax, eax
		mov	ecx, 0FFFFFFFFh
		mov	edi, [esp+6Ch+var_48]
		repne scasb
		not	ecx
		lea	edx, [ecx+0Fh]

loc_6889422C:				; CODE XREF: aim_srv_setextrainfo+209j
		mov	edi, [esp+6Ch+var_44]
		test	edi, edi
		jz	loc_688943A4
		xor	eax, eax
		mov	ecx, 0FFFFFFFFh
		mov	edi, [esp+6Ch+var_44]
		repne scasb
		not	ecx
		dec	ecx

loc_68894248:				; CODE XREF: aim_srv_setextrainfo+212j
		add	edx, ecx
		mov	[esp+6Ch+var_68], edx
		lea	edi, [esp+6Ch+var_2C]
		mov	[esp+6Ch+var_6C], edi
		call	sub_68881748
		mov	edx, [esp+6Ch+var_48]
		mov	[esp+6Ch+var_64], edx
		mov	[esp+6Ch+var_68], 2
		mov	[esp+6Ch+var_6C], edi
		call	sub_68882318
		mov	eax, [esp+6Ch+var_44]
		mov	[esp+6Ch+var_64], eax
		mov	[esp+6Ch+var_68], 9
		mov	[esp+6Ch+var_6C], edi
		call	sub_68882318
		mov	edx, [esp+6Ch+var_2C]
		mov	[esp+6Ch+var_6C], edi
		mov	[esp+6Ch+var_4C], edx
		call	sub_68881848
		mov	edx, [esp+6Ch+var_4C]
		mov	[esp+6Ch+var_60], edx
		and	eax, 0FFFFh
		mov	[esp+6Ch+var_64], eax
		mov	[esp+6Ch+var_68], 1Dh
		mov	[esp+6Ch+var_6C], ebp
		call	aim_tlvlist_add_raw
		mov	[esp+6Ch+var_6C], edi
		call	sub_688817E4
		jmp	short loc_688942CC
; ---------------------------------------------------------------------------
		align 4

loc_688942C8:				; CODE XREF: aim_srv_setextrainfo+74j
		lea	edi, [esp+6Ch+var_2C]

loc_688942CC:				; CODE XREF: aim_srv_setextrainfo+12Fj
		mov	eax, [esp+6Ch+var_30]
		mov	[esp+6Ch+var_6C], eax
		call	aim_tlvlist_size
		mov	[esp+6Ch+var_68], eax
		mov	[esp+6Ch+var_6C], edi
		call	sub_68881748
		mov	[esp+6Ch+var_68], ebp
		mov	[esp+6Ch+var_6C], edi
		call	aim_tlvlist_write
		mov	eax, [esp+6Ch+var_30]
		mov	[esp+6Ch+var_6C], eax
		call	aim_tlvlist_free
		mov	[esp+6Ch+var_58], 0
		mov	[esp+6Ch+var_5C], 0
		mov	[esp+6Ch+var_60], 0
		mov	[esp+6Ch+var_64], 1Eh
		mov	[esp+6Ch+var_68], 1
		mov	[esp+6Ch+var_6C], ebx
		call	aim_cachesnac
		mov	[esp+6Ch+var_58], edi
		mov	[esp+6Ch+var_5C], eax
		mov	[esp+6Ch+var_60], 1Eh
		mov	[esp+6Ch+var_64], 1
		mov	[esp+6Ch+var_68], esi
		mov	[esp+6Ch+var_6C], ebx
		call	flap_connection_send_snac
		mov	[esp+6Ch+var_6C], edi
		call	sub_688817E4
		xor	eax, eax

loc_6889435A:				; CODE XREF: aim_srv_setextrainfo+21Dj
		mov	edx, [esp+6Ch+var_20]
		xor	edx, ds:__stack_chk_guard
		jnz	short loc_688943B3
		add	esp, 5Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_68894370:				; CODE XREF: aim_srv_setextrainfo+68j
		mov	ebp, [esp+6Ch+var_40]
		or	ebp, 10020000h
		mov	[esp+6Ch+var_64], ebp
		mov	[esp+6Ch+var_68], 6
		lea	ebp, [esp+6Ch+var_30]
		mov	[esp+6Ch+var_6C], ebp
		call	aim_tlvlist_add_32
		jmp	loc_68894206
; ---------------------------------------------------------------------------
		align 4

loc_68894398:				; CODE XREF: aim_srv_setextrainfo+80j
		mov	edx, 10h
		jmp	loc_6889422C
; ---------------------------------------------------------------------------
		align 4

loc_688943A4:				; CODE XREF: aim_srv_setextrainfo+9Ej
		xor	ecx, ecx
		jmp	loc_68894248
; ---------------------------------------------------------------------------
		align 4

loc_688943AC:				; CODE XREF: aim_srv_setextrainfo+46j
					; aim_srv_setextrainfo+60j
		mov	eax, 0FFFFFFEAh
		jmp	short loc_6889435A
; ---------------------------------------------------------------------------

loc_688943B3:				; CODE XREF: aim_srv_setextrainfo+1D0j
		call	__stack_chk_fail
aim_srv_setextrainfo endp

; Exported entry  77. aim_srv_set_dc_info

; =============== S U B	R O U T	I N E =======================================


		public aim_srv_set_dc_info
aim_srv_set_dc_info proc near		; CODE XREF: sub_6889DECC+11Fp

var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_2C		= dword	ptr -2Ch
var_28		= byte ptr -28h
var_1C		= dword	ptr -1Ch
var_10		= dword	ptr -10h
arg_0		= dword	ptr  4

		push	edi
		push	esi
		push	ebx
		sub	esp, 40h
		mov	esi, [esp+4Ch+arg_0]
		mov	eax, ds:__stack_chk_guard
		mov	[esp+4Ch+var_10], eax
		xor	eax, eax
		mov	[esp+4Ch+var_2C], 0
		mov	[esp+4Ch+var_48], 25h
		lea	ebx, [esp+4Ch+var_1C]
		mov	[esp+4Ch+var_4C], ebx
		call	sub_68881748
		mov	[esp+4Ch+var_48], 0
		mov	[esp+4Ch+var_4C], ebx
		call	sub_68881E8C
		mov	[esp+4Ch+var_48], 0
		mov	[esp+4Ch+var_4C], ebx
		call	sub_68881E8C
		mov	[esp+4Ch+var_48], 0
		mov	[esp+4Ch+var_4C], ebx
		call	sub_68881DA4
		mov	[esp+4Ch+var_48], 8
		mov	[esp+4Ch+var_4C], ebx
		call	sub_68881E0C
		mov	[esp+4Ch+var_48], 0
		mov	[esp+4Ch+var_4C], ebx
		call	sub_68881E8C
		mov	[esp+4Ch+var_48], 50h
		mov	[esp+4Ch+var_4C], ebx
		call	sub_68881E8C
		mov	[esp+4Ch+var_48], 3
		mov	[esp+4Ch+var_4C], ebx
		call	sub_68881E8C
		mov	[esp+4Ch+var_48], 0
		mov	[esp+4Ch+var_4C], ebx
		call	sub_68881E8C
		mov	[esp+4Ch+var_48], 0
		mov	[esp+4Ch+var_4C], ebx
		call	sub_68881E8C
		mov	[esp+4Ch+var_48], 0
		mov	[esp+4Ch+var_4C], ebx
		call	sub_68881E8C
		mov	[esp+4Ch+var_48], 0
		mov	[esp+4Ch+var_4C], ebx
		call	sub_68881E0C
		mov	edi, [esp+4Ch+var_1C]
		mov	[esp+4Ch+var_4C], ebx
		call	sub_68881848
		mov	[esp+4Ch+var_40], edi
		and	eax, 0FFFFh
		mov	[esp+4Ch+var_44], eax
		mov	[esp+4Ch+var_48], 0Ch
		lea	edi, [esp+4Ch+var_2C]
		mov	[esp+4Ch+var_4C], edi
		call	aim_tlvlist_add_raw
		mov	[esp+4Ch+var_4C], ebx
		call	sub_688817E4
		mov	eax, [esp+4Ch+var_2C]
		mov	[esp+4Ch+var_4C], eax
		call	aim_tlvlist_size
		mov	[esp+4Ch+var_48], eax
		lea	ebx, [esp+4Ch+var_28]
		mov	[esp+4Ch+var_4C], ebx
		call	sub_68881748
		mov	[esp+4Ch+var_48], edi
		mov	[esp+4Ch+var_4C], ebx
		call	aim_tlvlist_write
		mov	eax, [esp+4Ch+var_2C]
		mov	[esp+4Ch+var_4C], eax
		call	aim_tlvlist_free
		mov	[esp+4Ch+var_38], 0
		mov	[esp+4Ch+var_3C], 0
		mov	[esp+4Ch+var_40], 0
		mov	[esp+4Ch+var_44], 1Eh
		mov	[esp+4Ch+var_48], 1
		mov	[esp+4Ch+var_4C], esi
		call	aim_cachesnac
		mov	edi, eax
		mov	[esp+4Ch+var_48], 4
		mov	[esp+4Ch+var_4C], esi
		call	flap_connection_findbygroup
		test	eax, eax
		jz	short loc_68894588
		mov	[esp+4Ch+var_38], ebx
		mov	[esp+4Ch+var_3C], edi
		mov	[esp+4Ch+var_40], 1Eh
		mov	[esp+4Ch+var_44], 1
		mov	[esp+4Ch+var_48], eax
		mov	[esp+4Ch+var_4C], esi
		call	flap_connection_send_snac

loc_6889456C:				; CODE XREF: aim_srv_set_dc_info+1FCj
		mov	[esp+4Ch+var_4C], ebx
		call	sub_688817E4
		mov	eax, [esp+4Ch+var_10]
		xor	eax, ds:__stack_chk_guard
		jnz	short loc_688945B6
		add	esp, 40h
		pop	ebx
		pop	esi
		pop	edi
		retn
; ---------------------------------------------------------------------------
		align 4

loc_68894588:				; CODE XREF: aim_srv_set_dc_info+18Ej
		mov	[esp+4Ch+var_3C], offset aConnNull ; "conn != NULL"
		mov	[esp+4Ch+var_40], offset aAim_srv_set_dc ; "aim_srv_set_dc_info"
		mov	[esp+4Ch+var_44], 37Ah
		mov	[esp+4Ch+var_48], offset aFamily_oservic ; "family_oservice.c"
		mov	[esp+4Ch+var_4C], 0
		call	g_warn_message
		jmp	short loc_6889456C
; ---------------------------------------------------------------------------

loc_688945B6:				; CODE XREF: aim_srv_set_dc_info+1C6j
		call	__stack_chk_fail
aim_srv_set_dc_info endp

; ---------------------------------------------------------------------------
		align 4
; Exported entry  71. aim_sendmemblock

; =============== S U B	R O U T	I N E =======================================


		public aim_sendmemblock
aim_sendmemblock proc near		; CODE XREF: sub_6889C3AC+137p
					; sub_6889C7A4+22Bp

var_7C		= dword	ptr -7Ch
var_78		= dword	ptr -78h
var_74		= dword	ptr -74h
var_70		= dword	ptr -70h
var_6C		= dword	ptr -6Ch
var_68		= dword	ptr -68h
var_5C		= dword	ptr -5Ch
var_58		= dword	ptr -58h
var_51		= byte ptr -51h
var_50		= dword	ptr -50h
var_3D		= byte ptr -3Dh
var_3C		= byte ptr -3Ch
var_30		= byte ptr -30h
var_20		= dword	ptr -20h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= byte ptr  18h

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 6Ch
		mov	esi, [esp+7Ch+arg_0]
		mov	edi, [esp+7Ch+arg_4]
		mov	edx, [esp+7Ch+arg_8]
		mov	[esp+7Ch+var_50], edx
		mov	ebp, [esp+7Ch+arg_C]
		mov	edx, [esp+7Ch+arg_10]
		mov	[esp+7Ch+var_58], edx
		mov	dl, [esp+7Ch+arg_14]
		mov	[esp+7Ch+var_51], dl
		mov	eax, ds:__stack_chk_guard
		mov	[esp+7Ch+var_20], eax
		xor	eax, eax
		test	esi, esi
		jz	loc_6889486C
		test	edi, edi
		jz	loc_6889486C
		mov	[esp+7Ch+var_78], 12h
		lea	ebx, [esp+7Ch+var_3C]
		mov	[esp+7Ch+var_7C], ebx
		call	sub_68881748
		mov	[esp+7Ch+var_78], 10h
		mov	[esp+7Ch+var_7C], ebx
		call	sub_68881E0C
		cmp	[esp+7Ch+var_51], 1
		jz	loc_68894744
		mov	eax, [esp+7Ch+var_58]
		test	eax, eax
		jz	loc_688947F0

loc_6889464F:				; CODE XREF: aim_sendmemblock+197j
		test	ebp, ebp
		jnz	loc_68894778

loc_68894657:				; CODE XREF: aim_sendmemblock+236j
		mov	[esp+7Ch+var_3D], 0
		mov	[esp+7Ch+var_78], 0
		mov	[esp+7Ch+var_7C], offset aMd5 ;	"md5"
		call	purple_cipher_context_new_by_name
		mov	ebp, eax
		mov	[esp+7Ch+var_74], 0
		lea	eax, [esp+7Ch+var_3D]
		mov	[esp+7Ch+var_78], eax
		mov	[esp+7Ch+var_7C], ebp
		call	purple_cipher_context_append
		mov	[esp+7Ch+var_70], 0
		lea	edx, [esp+7Ch+var_30]
		mov	[esp+7Ch+var_74], edx
		mov	[esp+7Ch+var_78], 10h
		mov	[esp+7Ch+var_7C], ebp
		mov	[esp+7Ch+var_5C], edx
		call	purple_cipher_context_digest
		mov	[esp+7Ch+var_7C], ebp
		call	purple_cipher_context_destroy
		mov	[esp+7Ch+var_74], 10h
		mov	edx, [esp+7Ch+var_5C]
		mov	[esp+7Ch+var_78], edx
		mov	[esp+7Ch+var_7C], ebx
		call	sub_688820A0

loc_688946CE:				; CODE XREF: aim_sendmemblock+1B5j
					; aim_sendmemblock+22Ej ...
		mov	[esp+7Ch+var_68], 0
		mov	[esp+7Ch+var_6C], 0
		mov	[esp+7Ch+var_70], 0
		mov	[esp+7Ch+var_74], 20h
		mov	[esp+7Ch+var_78], 1
		mov	[esp+7Ch+var_7C], esi
		call	aim_cachesnac
		mov	[esp+7Ch+var_68], ebx
		mov	[esp+7Ch+var_6C], eax
		mov	[esp+7Ch+var_70], 20h
		mov	[esp+7Ch+var_74], 1
		mov	[esp+7Ch+var_78], edi
		mov	[esp+7Ch+var_7C], esi
		call	flap_connection_send_snac
		mov	[esp+7Ch+var_7C], ebx
		call	sub_688817E4
		xor	eax, eax

loc_6889472C:				; CODE XREF: aim_sendmemblock+2B5j
		mov	edx, [esp+7Ch+var_20]
		xor	edx, ds:__stack_chk_guard
		jnz	loc_68894876
		add	esp, 6Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_68894744:				; CODE XREF: aim_sendmemblock+81j
		mov	eax, [esp+7Ch+var_58]
		test	eax, eax
		jz	loc_688947F0
		cmp	ebp, 10h
		jnz	loc_6889464F
		mov	[esp+7Ch+var_74], 10h
		mov	edx, [esp+7Ch+var_58]
		mov	[esp+7Ch+var_78], edx
		mov	[esp+7Ch+var_7C], ebx
		call	sub_688820A0
		jmp	loc_688946CE
; ---------------------------------------------------------------------------
		align 4

loc_68894778:				; CODE XREF: aim_sendmemblock+95j
		mov	[esp+7Ch+var_78], 0
		mov	[esp+7Ch+var_7C], offset aMd5 ;	"md5"
		call	purple_cipher_context_new_by_name
		mov	edx, eax
		mov	[esp+7Ch+var_74], ebp
		mov	eax, [esp+7Ch+var_58]
		mov	[esp+7Ch+var_78], eax
		mov	[esp+7Ch+var_7C], edx
		mov	[esp+7Ch+var_5C], edx
		call	purple_cipher_context_append
		mov	[esp+7Ch+var_70], 0
		lea	ebp, [esp+7Ch+var_30]
		mov	[esp+7Ch+var_74], ebp
		mov	[esp+7Ch+var_78], 10h
		mov	edx, [esp+7Ch+var_5C]
		mov	[esp+7Ch+var_7C], edx
		call	purple_cipher_context_digest
		mov	edx, [esp+7Ch+var_5C]
		mov	[esp+7Ch+var_7C], edx
		call	purple_cipher_context_destroy
		mov	[esp+7Ch+var_74], 10h
		mov	[esp+7Ch+var_78], ebp
		mov	[esp+7Ch+var_7C], ebx
		call	sub_688820A0
		jmp	loc_688946CE
; ---------------------------------------------------------------------------
		align 10h

loc_688947F0:				; CODE XREF: aim_sendmemblock+8Dj
					; aim_sendmemblock+18Ej
		test	ebp, ebp
		jz	loc_68894657
		cmp	[esp+7Ch+var_50], 3FFFFFFh
		jnz	short loc_6889480A
		cmp	ebp, 3FFFFFFh
		jz	short loc_68894824

loc_6889480A:				; CODE XREF: aim_sendmemblock+244j
		mov	[esp+7Ch+var_78], offset aSendmemblockUn ; "sendmemblock: unknown hash request\n"
		mov	[esp+7Ch+var_7C], offset aOscar_8 ; "oscar"
		call	purple_debug_warning
		jmp	loc_688946CE
; ---------------------------------------------------------------------------
		align 4

loc_68894824:				; CODE XREF: aim_sendmemblock+24Cj
		mov	[esp+7Ch+var_78], 44A95D26h
		mov	[esp+7Ch+var_7C], ebx
		call	sub_68881E8C
		mov	[esp+7Ch+var_78], 0D2490423h
		mov	[esp+7Ch+var_7C], ebx
		call	sub_68881E8C
		mov	[esp+7Ch+var_78], 93B8821Fh
		mov	[esp+7Ch+var_7C], ebx
		call	sub_68881E8C
		mov	[esp+7Ch+var_78], 51C54B01h
		mov	[esp+7Ch+var_7C], ebx
		call	sub_68881E8C
		jmp	loc_688946CE
; ---------------------------------------------------------------------------
		align 4

loc_6889486C:				; CODE XREF: aim_sendmemblock+4Aj
					; aim_sendmemblock+52j
		mov	eax, 0FFFFFFEAh
		jmp	loc_6889472C
; ---------------------------------------------------------------------------

loc_68894876:				; CODE XREF: aim_sendmemblock+17Aj
		call	__stack_chk_fail
aim_sendmemblock endp

; ---------------------------------------------------------------------------
		align 4
; Exported entry 317. service_modfirst

; =============== S U B	R O U T	I N E =======================================


		public service_modfirst
service_modfirst proc near		; DATA XREF: oscar_data_new+92o

Dest		= dword	ptr -2Ch
Source		= dword	ptr -28h
Count		= dword	ptr -24h
var_10		= dword	ptr -10h
arg_4		= dword	ptr  8

		push	ebx
		sub	esp, 28h
		mov	ebx, [esp+2Ch+arg_4]
		mov	eax, ds:__stack_chk_guard
		mov	[esp+2Ch+var_10], eax
		xor	eax, eax
		mov	word ptr [ebx],	1
		mov	word ptr [ebx+2], 3
		mov	word ptr [ebx+4], 110h
		mov	word ptr [ebx+6], 629h
		mov	word ptr [ebx+8], 0
		mov	[esp+2Ch+Count], 11h ; Count
		mov	[esp+2Ch+Source], offset aOservice ; "oservice"
		lea	eax, [ebx+0Ah]
		mov	[esp+2Ch+Dest],	eax ; Dest
		call	strncpy
		mov	dword ptr [ebx+1Ch], offset sub_688933E4
		xor	eax, eax
		mov	edx, [esp+2Ch+var_10]
		xor	edx, ds:__stack_chk_guard
		jnz	short loc_688948E1
		add	esp, 28h
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_688948E1:				; CODE XREF: service_modfirst+5Ej
		call	__stack_chk_fail
service_modfirst endp

; ---------------------------------------------------------------------------
		align 4

; =============== S U B	R O U T	I N E =======================================


sub_688948E8	proc near		; DATA XREF: popups_modfirst+4Bo

var_6C		= dword	ptr -6Ch
var_68		= dword	ptr -68h
var_64		= dword	ptr -64h
var_60		= dword	ptr -60h
var_5C		= dword	ptr -5Ch
var_58		= dword	ptr -58h
var_54		= dword	ptr -54h
var_50		= dword	ptr -50h
var_40		= dword	ptr -40h
var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= word ptr -30h
var_2E		= word ptr -2Eh
var_20		= dword	ptr -20h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 5Ch
		mov	edi, [esp+6Ch+arg_0]
		mov	edx, [esp+6Ch+arg_4]
		mov	ecx, [esp+6Ch+arg_C]
		mov	ebx, [esp+6Ch+arg_10]
		mov	eax, [esp+6Ch+arg_14]
		mov	esi, ds:__stack_chk_guard
		mov	[esp+6Ch+var_20], esi
		xor	esi, esi
		cmp	word ptr [ebx+2], 2
		jz	short loc_68894938
		xor	eax, eax

loc_6889491E:				; CODE XREF: sub_688948E8+16Dj
		mov	ebx, [esp+6Ch+var_20]
		xor	ebx, ds:__stack_chk_guard
		jnz	loc_68894A60
		add	esp, 5Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 4

loc_68894938:				; CODE XREF: sub_688948E8+32j
		mov	[esp+6Ch+var_6C], eax
		mov	[esp+6Ch+var_3C], edx
		mov	[esp+6Ch+var_40], ecx
		call	aim_tlvlist_read
		mov	esi, eax
		mov	[esp+6Ch+var_64], 1
		mov	[esp+6Ch+var_68], 1
		mov	[esp+6Ch+var_6C], eax
		call	aim_tlv_getstr
		mov	[esp+6Ch+var_38], eax
		mov	[esp+6Ch+var_64], 1
		mov	[esp+6Ch+var_68], 2
		mov	[esp+6Ch+var_6C], esi
		call	aim_tlv_getstr
		mov	[esp+6Ch+var_34], eax
		mov	[esp+6Ch+var_64], 1
		mov	[esp+6Ch+var_68], 3
		mov	[esp+6Ch+var_6C], esi
		call	aim_tlv_get16
		mov	[esp+6Ch+var_30], ax
		mov	[esp+6Ch+var_64], 1
		mov	[esp+6Ch+var_68], 4
		mov	[esp+6Ch+var_6C], esi
		call	aim_tlv_get16
		mov	[esp+6Ch+var_2E], ax
		mov	[esp+6Ch+var_64], 1
		mov	[esp+6Ch+var_68], 5
		mov	[esp+6Ch+var_6C], esi
		call	aim_tlv_get16
		movzx	ebp, ax
		movzx	eax, word ptr [ebx+2]
		mov	[esp+6Ch+var_64], eax
		movzx	eax, word ptr [ebx]
		mov	[esp+6Ch+var_68], eax
		mov	[esp+6Ch+var_6C], edi
		call	aim_callhandler
		test	eax, eax
		mov	edx, [esp+6Ch+var_3C]
		mov	ecx, [esp+6Ch+var_40]
		jz	short loc_68894A5C
		mov	[esp+6Ch+var_50], ebp
		movzx	ebx, [esp+6Ch+var_2E]
		mov	[esp+6Ch+var_54], ebx
		movzx	ebx, [esp+6Ch+var_30]
		mov	[esp+6Ch+var_58], ebx
		mov	ebx, [esp+6Ch+var_34]
		mov	[esp+6Ch+var_5C], ebx
		mov	ebx, [esp+6Ch+var_38]
		mov	[esp+6Ch+var_60], ebx
		mov	[esp+6Ch+var_64], ecx
		mov	[esp+6Ch+var_68], edx
		mov	[esp+6Ch+var_6C], edi
		call	eax

loc_68894A2D:				; CODE XREF: sub_688948E8+176j
		mov	[esp+6Ch+var_6C], esi
		mov	[esp+6Ch+var_3C], eax
		call	aim_tlvlist_free
		mov	esi, [esp+6Ch+var_38]
		mov	[esp+6Ch+var_6C], esi
		call	g_free
		mov	edx, [esp+6Ch+var_34]
		mov	[esp+6Ch+var_6C], edx
		call	g_free
		mov	eax, [esp+6Ch+var_3C]
		jmp	loc_6889491E
; ---------------------------------------------------------------------------
		align 4

loc_68894A5C:				; CODE XREF: sub_688948E8+110j
		xor	eax, eax
		jmp	short loc_68894A2D
; ---------------------------------------------------------------------------

loc_68894A60:				; CODE XREF: sub_688948E8+40j
		call	__stack_chk_fail
sub_688948E8	endp

; ---------------------------------------------------------------------------
		align 4
; Exported entry 314. popups_modfirst

; =============== S U B	R O U T	I N E =======================================


		public popups_modfirst
popups_modfirst	proc near		; DATA XREF: oscar_data_new+E2o

Dest		= dword	ptr -2Ch
Source		= dword	ptr -28h
Count		= dword	ptr -24h
var_10		= dword	ptr -10h
arg_4		= dword	ptr  8

		push	ebx
		sub	esp, 28h
		mov	ebx, [esp+2Ch+arg_4]
		mov	eax, ds:__stack_chk_guard
		mov	[esp+2Ch+var_10], eax
		xor	eax, eax
		mov	word ptr [ebx],	8
		mov	word ptr [ebx+2], 1
		mov	word ptr [ebx+4], 104h
		mov	word ptr [ebx+6], 1
		mov	word ptr [ebx+8], 0
		mov	[esp+2Ch+Count], 11h ; Count
		mov	[esp+2Ch+Source], offset aPopup	; "popup"
		lea	eax, [ebx+0Ah]
		mov	[esp+2Ch+Dest],	eax ; Dest
		call	strncpy
		mov	dword ptr [ebx+1Ch], offset sub_688948E8
		xor	eax, eax
		mov	edx, [esp+2Ch+var_10]
		xor	edx, ds:__stack_chk_guard
		jnz	short loc_68894ACD
		add	esp, 28h
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_68894ACD:				; CODE XREF: popups_modfirst+5Ej
		call	__stack_chk_fail
popups_modfirst	endp

; ---------------------------------------------------------------------------
		align 4

; =============== S U B	R O U T	I N E =======================================


sub_68894AD4	proc near		; DATA XREF: stats_modfirst+4Bo

var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_30		= dword	ptr -30h
var_20		= dword	ptr -20h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 3Ch
		mov	esi, [esp+4Ch+arg_0]
		mov	edi, [esp+4Ch+arg_4]
		mov	edx, [esp+4Ch+arg_C]
		mov	ebx, [esp+4Ch+arg_10]
		mov	eax, [esp+4Ch+arg_14]
		mov	ecx, ds:__stack_chk_guard
		mov	[esp+4Ch+var_20], ecx
		xor	ecx, ecx
		cmp	word ptr [ebx+2], 2
		jz	short loc_68894B18

loc_68894B02:				; CODE XREF: sub_68894AD4+70j
		xor	eax, eax
		mov	edx, [esp+4Ch+var_20]
		xor	edx, ds:__stack_chk_guard
		jnz	short loc_68894B6B
		add	esp, 3Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_68894B18:				; CODE XREF: sub_68894AD4+2Cj
		mov	[esp+4Ch+var_4C], eax
		mov	[esp+4Ch+var_30], edx
		call	sub_688819F0
		movzx	ebp, ax
		movzx	eax, word ptr [ebx+2]
		mov	[esp+4Ch+var_44], eax
		movzx	eax, word ptr [ebx]
		mov	[esp+4Ch+var_48], eax
		mov	[esp+4Ch+var_4C], esi
		call	aim_callhandler
		test	eax, eax
		mov	edx, [esp+4Ch+var_30]
		jz	short loc_68894B02
		mov	ecx, [esp+4Ch+var_20]
		xor	ecx, ds:__stack_chk_guard
		jnz	short loc_68894B6B
		mov	[esp+4Ch+arg_C], ebp
		mov	[esp+4Ch+arg_8], edx
		mov	[esp+4Ch+arg_4], edi
		mov	[esp+4Ch+arg_0], esi
		add	esp, 3Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		jmp	eax
; ---------------------------------------------------------------------------

loc_68894B6B:				; CODE XREF: sub_68894AD4+3Aj
					; sub_68894AD4+7Cj
		call	__stack_chk_fail
sub_68894AD4	endp

; Exported entry 319. stats_modfirst

; =============== S U B	R O U T	I N E =======================================


		public stats_modfirst
stats_modfirst	proc near		; DATA XREF: oscar_data_new+112o

Dest		= dword	ptr -2Ch
Source		= dword	ptr -28h
Count		= dword	ptr -24h
var_10		= dword	ptr -10h
arg_4		= dword	ptr  8

		push	ebx
		sub	esp, 28h
		mov	ebx, [esp+2Ch+arg_4]
		mov	eax, ds:__stack_chk_guard
		mov	[esp+2Ch+var_10], eax
		xor	eax, eax
		mov	word ptr [ebx],	0Bh
		mov	word ptr [ebx+2], 1
		mov	word ptr [ebx+4], 104h
		mov	word ptr [ebx+6], 1
		mov	word ptr [ebx+8], 0
		mov	[esp+2Ch+Count], 11h ; Count
		mov	[esp+2Ch+Source], offset aStats	; "stats"
		lea	eax, [ebx+0Ah]
		mov	[esp+2Ch+Dest],	eax ; Dest
		call	strncpy
		mov	dword ptr [ebx+1Ch], offset sub_68894AD4
		xor	eax, eax
		mov	edx, [esp+2Ch+var_10]
		xor	edx, ds:__stack_chk_guard
		jnz	short loc_68894BD5
		add	esp, 28h
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_68894BD5:				; CODE XREF: stats_modfirst+5Ej
		call	__stack_chk_fail
stats_modfirst	endp

; ---------------------------------------------------------------------------
		align 4

; =============== S U B	R O U T	I N E =======================================


sub_68894BDC	proc near		; DATA XREF: search_modfirst+4Bo

Dest		= dword	ptr -7Ch
Source		= dword	ptr -78h
Count		= dword	ptr -74h
var_70		= dword	ptr -70h
var_6C		= dword	ptr -6Ch
var_68		= dword	ptr -68h
var_54		= dword	ptr -54h
var_50		= dword	ptr -50h
var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_20		= dword	ptr -20h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 6Ch
		mov	edx, [esp+7Ch+arg_0]
		mov	[esp+7Ch+var_40], edx
		mov	ecx, [esp+7Ch+arg_4]
		mov	[esp+7Ch+var_3C], ecx
		mov	edx, [esp+7Ch+arg_C]
		mov	[esp+7Ch+var_38], edx
		mov	ecx, [esp+7Ch+arg_10]
		mov	[esp+7Ch+var_4C], ecx
		mov	ebx, [esp+7Ch+arg_14]
		mov	eax, ds:__stack_chk_guard
		mov	[esp+7Ch+var_20], eax
		xor	eax, eax
		mov	ax, [ecx+2]
		cmp	ax, 1
		jz	loc_68894DA4
		cmp	ax, 3
		jz	short loc_68894C50
		xor	eax, eax

loc_68894C37:				; CODE XREF: sub_68894BDC+1C3j
					; sub_68894BDC+23Fj ...
		mov	ecx, [esp+7Ch+var_20]
		xor	ecx, ds:__stack_chk_guard
		jnz	loc_68894E62
		add	esp, 6Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_68894C50:				; CODE XREF: sub_68894BDC+57j
		mov	ecx, [esp+7Ch+var_4C]
		mov	eax, [ecx+8]
		mov	[esp+7Ch+Source], eax
		mov	edx, [esp+7Ch+var_40]
		mov	[esp+7Ch+Dest],	edx
		call	aim_remsnac
		mov	[esp+7Ch+var_34], eax
		test	eax, eax
		jz	loc_68894E28
		mov	ecx, [eax+0Ch]
		mov	[esp+7Ch+var_30], ecx

loc_68894C7A:				; CODE XREF: sub_68894BDC+254j
		mov	[esp+7Ch+Dest],	ebx
		call	aim_tlvlist_read
		mov	[esp+7Ch+var_48], eax
		mov	[esp+7Ch+Dest],	eax
		call	aim_tlvlist_count
		mov	[esp+7Ch+var_44], eax
		mov	ebx, 62h
		xor	esi, esi
		xor	ebp, ebp
		jmp	short loc_68894CDB
; ---------------------------------------------------------------------------
		align 10h

loc_68894CA0:				; CODE XREF: sub_68894BDC+122j
		cmp	[esp+7Ch+var_44], ebp
		jle	short loc_68894D00
		mov	[esp+7Ch+Source], ebx
		mov	[esp+7Ch+Dest],	esi
		call	g_realloc
		mov	esi, eax
		mov	[esp+7Ch+Count], 61h ; Count
		mov	[esp+7Ch+Source], edi ;	Source
		lea	eax, [eax+ebx-62h]
		mov	[esp+7Ch+Dest],	eax ; Dest
		call	strncpy
		mov	[esp+7Ch+Dest],	edi
		call	g_free
		add	ebx, 62h
		mov	ebp, [esp+7Ch+var_50]

loc_68894CDB:				; CODE XREF: sub_68894BDC+BFj
		lea	edx, [ebp+1]
		mov	[esp+7Ch+var_50], edx
		mov	[esp+7Ch+Count], edx
		mov	[esp+7Ch+Source], 1
		mov	eax, [esp+7Ch+var_48]
		mov	[esp+7Ch+Dest],	eax
		call	aim_tlv_getstr
		mov	edi, eax
		test	eax, eax
		jnz	short loc_68894CA0

loc_68894D00:				; CODE XREF: sub_68894BDC+C8j
		mov	[esp+7Ch+Dest],	edi
		call	g_free
		mov	eax, [esp+7Ch+var_48]
		mov	[esp+7Ch+Dest],	eax
		call	aim_tlvlist_free
		mov	edx, [esp+7Ch+var_4C]
		movzx	eax, word ptr [edx+2]
		mov	[esp+7Ch+Count], eax
		movzx	eax, word ptr [edx]
		mov	[esp+7Ch+Source], eax
		mov	ecx, [esp+7Ch+var_40]
		mov	[esp+7Ch+Dest],	ecx
		call	aim_callhandler
		test	eax, eax
		jz	loc_68894E20
		mov	[esp+7Ch+var_68], esi
		mov	[esp+7Ch+var_6C], ebp
		mov	edx, [esp+7Ch+var_30]
		mov	[esp+7Ch+var_70], edx
		mov	ecx, [esp+7Ch+var_38]
		mov	[esp+7Ch+Count], ecx
		mov	edx, [esp+7Ch+var_3C]
		mov	[esp+7Ch+Source], edx
		mov	ecx, [esp+7Ch+var_40]
		mov	[esp+7Ch+Dest],	ecx
		call	eax

loc_68894D64:				; CODE XREF: sub_68894BDC+246j
		mov	edx, [esp+7Ch+var_34]
		test	edx, edx
		jz	short loc_68894D83
		mov	ecx, [esp+7Ch+var_34]
		mov	edx, [ecx+0Ch]
		mov	[esp+7Ch+Dest],	edx
		mov	[esp+7Ch+var_54], eax
		call	g_free
		mov	eax, [esp+7Ch+var_54]

loc_68894D83:				; CODE XREF: sub_68894BDC+18Ej
		mov	edx, [esp+7Ch+var_34]
		mov	[esp+7Ch+Dest],	edx
		mov	[esp+7Ch+var_54], eax
		call	g_free
		mov	[esp+7Ch+Dest],	esi
		call	g_free
		mov	eax, [esp+7Ch+var_54]
		jmp	loc_68894C37
; ---------------------------------------------------------------------------

loc_68894DA4:				; CODE XREF: sub_68894BDC+4Dj
		mov	eax, [ecx+8]
		mov	[esp+7Ch+Source], eax
		mov	edx, [esp+7Ch+var_40]
		mov	[esp+7Ch+Dest],	edx
		call	aim_remsnac
		mov	ebx, eax
		test	eax, eax
		jz	short loc_68894E3C
		mov	edx, [esp+7Ch+var_4C]
		movzx	eax, word ptr [edx+2]
		mov	[esp+7Ch+Count], eax
		movzx	eax, word ptr [edx]
		mov	[esp+7Ch+Source], eax
		mov	ecx, [esp+7Ch+var_40]
		mov	[esp+7Ch+Dest],	ecx
		call	aim_callhandler
		test	eax, eax
		jz	short loc_68894E38
		mov	edx, [ebx+0Ch]
		mov	[esp+7Ch+var_70], edx
		mov	edx, [esp+7Ch+var_38]
		mov	[esp+7Ch+Count], edx
		mov	ecx, [esp+7Ch+var_3C]
		mov	[esp+7Ch+Source], ecx
		mov	edx, [esp+7Ch+var_40]
		mov	[esp+7Ch+Dest],	edx
		call	eax

loc_68894E00:				; CODE XREF: sub_68894BDC+25Ej
		mov	edx, [ebx+0Ch]
		mov	[esp+7Ch+Dest],	edx
		mov	[esp+7Ch+var_54], eax
		call	g_free
		mov	[esp+7Ch+Dest],	ebx
		call	g_free
		mov	eax, [esp+7Ch+var_54]
		jmp	loc_68894C37
; ---------------------------------------------------------------------------

loc_68894E20:				; CODE XREF: sub_68894BDC+159j
		xor	eax, eax
		jmp	loc_68894D64
; ---------------------------------------------------------------------------
		align 4

loc_68894E28:				; CODE XREF: sub_68894BDC+91j
		mov	[esp+7Ch+var_30], 0
		jmp	loc_68894C7A
; ---------------------------------------------------------------------------
		align 4

loc_68894E38:				; CODE XREF: sub_68894BDC+202j
		xor	eax, eax
		jmp	short loc_68894E00
; ---------------------------------------------------------------------------

loc_68894E3C:				; CODE XREF: sub_68894BDC+1DFj
		mov	ecx, [esp+7Ch+var_4C]
		mov	eax, [ecx+8]
		mov	[esp+7Ch+Count], eax
		mov	[esp+7Ch+Source], offset aSearchErrorCou ; "search error: couldn't get a snac for 0"...
		mov	[esp+7Ch+Dest],	offset aOscar_9	; "oscar"
		call	purple_debug_misc
		xor	eax, eax
		jmp	loc_68894C37
; ---------------------------------------------------------------------------

loc_68894E62:				; CODE XREF: sub_68894BDC+65j
		call	__stack_chk_fail
sub_68894BDC	endp

; ---------------------------------------------------------------------------
		align 4
; Exported entry  69. aim_search_address

; =============== S U B	R O U T	I N E =======================================


		public aim_search_address
aim_search_address proc	near		; CODE XREF: sub_68899290+37j

var_5C		= dword	ptr -5Ch
var_58		= dword	ptr -58h
var_54		= dword	ptr -54h
var_50		= dword	ptr -50h
var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_30		= dword	ptr -30h
var_2C		= byte ptr -2Ch
var_20		= dword	ptr -20h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 4Ch
		mov	ebp, [esp+5Ch+arg_0]
		mov	ebx, [esp+5Ch+arg_4]
		mov	eax, ds:__stack_chk_guard
		mov	[esp+5Ch+var_20], eax
		xor	eax, eax
		mov	[esp+5Ch+var_58], 0Ah
		mov	[esp+5Ch+var_5C], ebp
		call	flap_connection_findbygroup
		mov	edx, eax
		test	eax, eax
		jz	loc_68894F50
		test	ebx, ebx
		jz	loc_68894F50
		mov	ecx, 0FFFFFFFFh
		mov	edi, ebx
		xor	eax, eax
		repne scasb
		not	ecx
		dec	ecx
		mov	[esp+5Ch+var_58], ecx
		lea	esi, [esp+5Ch+var_2C]
		mov	[esp+5Ch+var_5C], esi
		mov	[esp+5Ch+var_30], edx
		call	sub_68881748
		mov	[esp+5Ch+var_58], ebx
		mov	[esp+5Ch+var_5C], esi
		call	sub_68882114
		mov	ecx, 0FFFFFFFFh
		mov	edi, ebx
		xor	eax, eax
		repne scasb
		not	ecx
		mov	[esp+5Ch+var_48], ecx
		mov	[esp+5Ch+var_4C], ebx
		mov	[esp+5Ch+var_50], 0
		mov	[esp+5Ch+var_54], 2
		mov	[esp+5Ch+var_58], 0Ah
		mov	[esp+5Ch+var_5C], ebp
		call	aim_cachesnac
		mov	[esp+5Ch+var_48], esi
		mov	[esp+5Ch+var_4C], eax
		mov	[esp+5Ch+var_50], 2
		mov	[esp+5Ch+var_54], 0Ah
		mov	edx, [esp+5Ch+var_30]
		mov	[esp+5Ch+var_58], edx
		mov	[esp+5Ch+var_5C], ebp
		call	flap_connection_send_snac
		mov	[esp+5Ch+var_5C], esi
		call	sub_688817E4
		xor	eax, eax

loc_68894F39:				; CODE XREF: aim_search_address+EDj
		mov	edx, [esp+5Ch+var_20]
		xor	edx, ds:__stack_chk_guard
		jnz	short loc_68894F57
		add	esp, 4Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_68894F50:				; CODE XREF: aim_search_address+2Ej
					; aim_search_address+36j
		mov	eax, 0FFFFFFEAh
		jmp	short loc_68894F39
; ---------------------------------------------------------------------------

loc_68894F57:				; CODE XREF: aim_search_address+DBj
		call	__stack_chk_fail
aim_search_address endp

; Exported entry 315. search_modfirst

; =============== S U B	R O U T	I N E =======================================


		public search_modfirst
search_modfirst	proc near		; DATA XREF: oscar_data_new+102o

Dest		= dword	ptr -2Ch
Source		= dword	ptr -28h
Count		= dword	ptr -24h
var_10		= dword	ptr -10h
arg_4		= dword	ptr  8

		push	ebx
		sub	esp, 28h
		mov	ebx, [esp+2Ch+arg_4]
		mov	eax, ds:__stack_chk_guard
		mov	[esp+2Ch+var_10], eax
		xor	eax, eax
		mov	word ptr [ebx],	0Ah
		mov	word ptr [ebx+2], 1
		mov	word ptr [ebx+4], 110h
		mov	word ptr [ebx+6], 629h
		mov	word ptr [ebx+8], 0
		mov	[esp+2Ch+Count], 11h ; Count
		mov	[esp+2Ch+Source], offset aUserlookup ; "userlookup"
		lea	eax, [ebx+0Ah]
		mov	[esp+2Ch+Dest],	eax ; Dest
		call	strncpy
		mov	dword ptr [ebx+1Ch], offset sub_68894BDC
		xor	eax, eax
		mov	edx, [esp+2Ch+var_10]
		xor	edx, ds:__stack_chk_guard
		jnz	short loc_68894FC1
		add	esp, 28h
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_68894FC1:				; CODE XREF: search_modfirst+5Ej
		call	__stack_chk_fail
search_modfirst	endp

; ---------------------------------------------------------------------------
		align 4

; =============== S U B	R O U T	I N E =======================================


sub_68894FC8	proc near		; CODE XREF: flap_connection_send+D4p
					; sub_68895BF0+182p ...

var_2C		= dword	ptr -2Ch
var_10		= dword	ptr -10h

		push	ebx
		sub	esp, 28h
		mov	ebx, eax
		mov	eax, ds:__stack_chk_guard
		mov	[esp+2Ch+var_10], eax
		xor	eax, eax
		mov	eax, [ebx+4]
		mov	[esp+2Ch+var_2C], eax
		call	g_free
		mov	[esp+2Ch+var_2C], ebx
		call	g_free
		mov	eax, [esp+2Ch+var_10]
		xor	eax, ds:__stack_chk_guard
		jnz	short loc_68894FFD
		add	esp, 28h
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_68894FFD:				; CODE XREF: sub_68894FC8+2Ej
		call	__stack_chk_fail
sub_68894FC8	endp

; ---------------------------------------------------------------------------
		align 4
; Exported entry 189. flap_connection_new

; =============== S U B	R O U T	I N E =======================================


		public flap_connection_new
flap_connection_new proc near		; CODE XREF: sub_6889C040+CBp
					; sub_6889E454+1DEp ...

var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_10		= dword	ptr -10h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	edi
		push	esi
		push	ebx
		sub	esp, 20h
		mov	esi, [esp+2Ch+arg_0]
		mov	edi, [esp+2Ch+arg_4]
		mov	eax, ds:__stack_chk_guard
		mov	[esp+2Ch+var_10], eax
		xor	eax, eax
		mov	[esp+2Ch+var_2C], 84h
		call	g_malloc0
		mov	ebx, eax
		mov	[eax], esi
		mov	[esp+2Ch+var_2C], 0
		call	purple_circ_buffer_new
		mov	[ebx+50h], eax
		mov	dword ptr [ebx+2Ch], 0FFFFFFFFh
		mov	word ptr [ebx+5Eh], 0FFFFh
		mov	[ebx+5Ch], di
		mov	[esp+2Ch+var_28], offset loc_688ABD08
		mov	[esp+2Ch+var_2C], offset loc_688ABD10
		call	g_hash_table_new
		mov	[ebx+70h], eax
		mov	[esp+2Ch+var_28], ebx
		mov	eax, [esi+0F0h]
		mov	[esp+2Ch+var_2C], eax
		call	g_slist_prepend
		mov	[esi+0F0h], eax
		mov	edx, [esp+2Ch+var_10]
		xor	edx, ds:__stack_chk_guard
		jnz	short loc_68895091
		mov	eax, ebx
		add	esp, 20h
		pop	ebx
		pop	esi
		pop	edi
		retn
; ---------------------------------------------------------------------------

loc_68895091:				; CODE XREF: flap_connection_new+82j
		call	__stack_chk_fail
flap_connection_new endp

; ---------------------------------------------------------------------------
		align 4
; Exported entry 192. flap_connection_schedule_destroy

; =============== S U B	R O U T	I N E =======================================


		public flap_connection_schedule_destroy
flap_connection_schedule_destroy proc near ; CODE XREF:	sub_68895128+D5j
					; sub_68895128+30Fp ...

var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_10		= dword	ptr -10h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	edi
		push	esi
		push	ebx
		sub	esp, 20h
		mov	ebx, [esp+2Ch+arg_0]
		mov	edi, [esp+2Ch+arg_4]
		mov	esi, [esp+2Ch+arg_8]
		mov	eax, ds:__stack_chk_guard
		mov	[esp+2Ch+var_10], eax
		xor	eax, eax
		mov	eax, [ebx+0Ch]
		test	eax, eax
		jnz	short loc_68895110
		movzx	eax, word ptr [ebx+5Ch]
		mov	[esp+2Ch+var_20], eax
		mov	[esp+2Ch+var_24], ebx
		mov	[esp+2Ch+var_28], offset aSchedulingDest ; "Scheduling destruction of FLAP connecti"...
		mov	[esp+2Ch+var_2C], offset aOscar_10 ; "oscar"
		call	purple_debug_info
		mov	[ebx+10h], edi
		mov	eax, [ebx+14h]
		mov	[esp+2Ch+var_2C], eax
		call	g_free
		mov	[esp+2Ch+var_2C], esi
		call	g_strdup
		mov	[ebx+14h], eax
		mov	[esp+2Ch+var_24], ebx
		mov	[esp+2Ch+var_28], offset sub_68895BF0
		mov	[esp+2Ch+var_2C], 0
		call	purple_timeout_add
		mov	[ebx+0Ch], eax

loc_68895110:				; CODE XREF: flap_connection_schedule_destroy+22j
		mov	eax, [esp+2Ch+var_10]
		xor	eax, ds:__stack_chk_guard
		jnz	short loc_68895123
		add	esp, 20h
		pop	ebx
		pop	esi
		pop	edi
		retn
; ---------------------------------------------------------------------------

loc_68895123:				; CODE XREF: flap_connection_schedule_destroy+82j
		call	__stack_chk_fail
flap_connection_schedule_destroy endp


; =============== S U B	R O U T	I N E =======================================


sub_68895128	proc near		; CODE XREF: flap_connection_send+14Ep
					; DATA XREF: flap_connection_send+11Do	...

Time		= dword	ptr -5Ch
var_58		= dword	ptr -58h
var_54		= word ptr -54h
var_50		= dword	ptr -50h
var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_10		= dword	ptr -10h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	ebx
		sub	esp, 28h
		mov	ebx, [esp+2Ch+arg_0]
		mov	eax, ds:__stack_chk_guard
		mov	[esp+2Ch+var_10], eax
		xor	eax, eax
		mov	eax, [ebx+50h]
		mov	[esp+2Ch+var_2C], eax
		call	purple_circ_buffer_get_max_read
		test	eax, eax
		jz	loc_68895204
		mov	edx, [ebx+30h]
		test	edx, edx
		jz	loc_68895228
		mov	[esp+2Ch+var_24], eax
		mov	eax, [ebx+50h]
		mov	eax, [eax+14h]
		mov	[esp+2Ch+var_28], eax
		mov	[esp+2Ch+var_2C], edx
		call	purple_ssl_write

loc_6889516F:				; CODE XREF: sub_68895128+121j
		cmp	eax, 0
		jle	short loc_68895198
		mov	edx, [esp+2Ch+var_10]
		xor	edx, ds:__stack_chk_guard
		jnz	loc_68895287
		mov	[esp+2Ch+arg_4], eax
		mov	eax, [ebx+50h]
		mov	[esp+2Ch+arg_0], eax
		add	esp, 28h
		pop	ebx
		jmp	purple_circ_buffer_mark_read
; ---------------------------------------------------------------------------

loc_68895198:				; CODE XREF: sub_68895128+4Aj
		jnz	loc_68895250

loc_6889519E:				; CODE XREF: sub_68895128+13Dj
		mov	eax, [ebx+58h]
		mov	[esp+2Ch+var_2C], eax
		call	purple_input_remove
		mov	dword ptr [ebx+58h], 0
		mov	eax, [ebx+30h]
		test	eax, eax
		jz	loc_68895270
		mov	[esp+2Ch+var_2C], eax
		call	purple_ssl_close
		mov	dword ptr [ebx+30h], 0

loc_688951CA:				; CODE XREF: sub_68895128+15Aj
		call	_errno
		mov	eax, [eax]
		mov	[esp+2Ch+var_2C], eax
		call	wpurple_strerror
		mov	edx, [esp+2Ch+var_10]
		xor	edx, ds:__stack_chk_guard
		jnz	loc_68895287
		mov	[esp+2Ch+arg_8], eax
		mov	[esp+2Ch+arg_4], 4
		mov	[esp+2Ch+arg_0], ebx
		add	esp, 28h
		pop	ebx
		jmp	flap_connection_schedule_destroy
; ---------------------------------------------------------------------------
		align 4

loc_68895204:				; CODE XREF: sub_68895128+20j
		mov	eax, [ebx+58h]
		mov	[esp+2Ch+var_2C], eax
		call	purple_input_remove
		mov	dword ptr [ebx+58h], 0

loc_68895216:				; CODE XREF: sub_68895128+130j
					; sub_68895128+143j
		mov	eax, [esp+2Ch+var_10]
		xor	eax, ds:__stack_chk_guard
		jnz	short loc_68895287
		add	esp, 28h
		pop	ebx
		retn
; ---------------------------------------------------------------------------
		align 4

loc_68895228:				; CODE XREF: sub_68895128+2Bj
		mov	[esp+2Ch+var_20], 0
		mov	[esp+2Ch+var_24], eax
		mov	eax, [ebx+50h]
		mov	eax, [eax+14h]
		mov	[esp+2Ch+var_28], eax
		mov	eax, [ebx+2Ch]
		mov	[esp+2Ch+var_2C], eax
		call	wpurple_send
		jmp	loc_6889516F
; ---------------------------------------------------------------------------
		align 10h

loc_68895250:				; CODE XREF: sub_68895128:loc_68895198j
		call	_errno
		cmp	dword ptr [eax], 0Bh
		jz	short loc_68895216
		call	_errno
		cmp	dword ptr [eax], 2733h
		jnz	loc_6889519E
		jmp	short loc_68895216
; ---------------------------------------------------------------------------
		align 10h

loc_68895270:				; CODE XREF: sub_68895128+8Dj
		mov	eax, [ebx+2Ch]
		mov	[esp+2Ch+var_2C], eax
		call	wpurple_close
		mov	dword ptr [ebx+2Ch], 0FFFFFFFFh
		jmp	loc_688951CA
; ---------------------------------------------------------------------------

loc_68895287:				; CODE XREF: sub_68895128+56j
					; sub_68895128+BBj ...
		call	__stack_chk_fail
; ---------------------------------------------------------------------------

loc_6889528C:				; CODE XREF: flap_connection_recv_cb+22j
					; flap_connection_recv_cb_ssl+22j
		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 4Ch
		mov	ebx, eax
		mov	eax, ds:__stack_chk_guard
		mov	[esp+5Ch+var_20], eax
		xor	eax, eax
		mov	edx, [ebx+44h]
		test	edx, edx
		jz	loc_68895344
		mov	eax, [ebx+4Ch]
		mov	ecx, [ebx+48h]
		sub	ecx, eax
		jz	short loc_688952F1
		add	eax, [ebx+44h]
		mov	edx, [ebx+30h]
		test	edx, edx
		jz	loc_68895400

loc_688952C3:				; CODE XREF: sub_68895128+2D1j
		mov	dword ptr [esp+5Ch+var_54], ecx
		mov	[esp+5Ch+var_58], eax
		mov	[esp+5Ch+Time],	edx
		call	purple_ssl_read
		cmp	eax, 0
		jz	loc_68895424

loc_688952DC:				; CODE XREF: sub_68895128+2F6j
		jl	loc_688956B8
		add	eax, [ebx+4Ch]
		mov	[ebx+4Ch], eax
		cmp	eax, [ebx+48h]
		jb	loc_6889543C

loc_688952F1:				; CODE XREF: sub_68895128+18Bj
					; sub_68895128+2C3j
		lea	esi, [ebx+44h]
		mov	[esp+5Ch+Time],	esi
		call	sub_688818CC
		lea	ebp, [ebx+40h]
		mov	edi, [ebx]
		mov	al, [ebx+40h]
		cmp	al, 1
		jz	loc_68895514
		cmp	al, 2
		jz	loc_6889555C
		cmp	al, 4
		jz	loc_68895454

loc_6889531C:				; CODE XREF: sub_68895128+336j
					; sub_68895128+3E7j ...
		mov	[esp+5Ch+Time],	0 ; Time
		call	time
		mov	[ebx+8], eax
		mov	eax, [ebx+44h]
		mov	[esp+5Ch+Time],	eax
		call	g_free
		mov	dword ptr [ebx+44h], 0
		mov	dword ptr [ebx+3Ch], 0

loc_68895344:				; CODE XREF: sub_68895128+17Dj
		mov	edx, [ebx+3Ch]
		lea	ecx, [ebx+edx+34h]
		mov	eax, 6
		sub	eax, edx
		mov	edx, [ebx+30h]
		test	edx, edx
		jz	loc_68895610
		mov	dword ptr [esp+5Ch+var_54], eax
		mov	[esp+5Ch+var_58], ecx
		mov	[esp+5Ch+Time],	edx
		call	purple_ssl_read
		mov	esi, eax

loc_6889536F:				; CODE XREF: sub_68895128+505j
		cmp	esi, 0
		jz	loc_68895424
		jl	loc_688956B8
		mov	eax, [ebx]
		mov	edi, [eax+68h]
		mov	[esp+5Ch+Time],	0 ; Time
		call	time
		mov	[edi+30h], eax
		add	esi, [ebx+3Ch]
		mov	[ebx+3Ch], esi
		cmp	esi, 5
		jle	loc_6889543C
		cmp	byte ptr [ebx+34h], 2Ah
		jnz	loc_6889571B
		mov	dl, [ebx+35h]
		mov	[ebx+40h], dl
		movzx	eax, byte ptr [ebx+36h]
		shl	eax, 8
		movzx	edx, byte ptr [ebx+37h]
		add	eax, edx
		mov	[ebx+42h], ax
		movzx	eax, byte ptr [ebx+38h]
		shl	eax, 8
		movzx	edx, byte ptr [ebx+39h]
		add	eax, edx
		mov	[ebx+48h], eax
		mov	[esp+5Ch+Time],	eax
		call	g_malloc
		mov	[ebx+44h], eax
		mov	dword ptr [ebx+4Ch], 0
		xor	eax, eax
		mov	ecx, [ebx+48h]
		sub	ecx, eax
		jz	loc_688952F1
		add	eax, [ebx+44h]
		mov	edx, [ebx+30h]
		test	edx, edx
		jnz	loc_688952C3
		nop

loc_68895400:				; CODE XREF: sub_68895128+195j
		mov	[esp+5Ch+var_50], 0
		mov	dword ptr [esp+5Ch+var_54], ecx
		mov	[esp+5Ch+var_58], eax
		mov	eax, [ebx+2Ch]
		mov	[esp+5Ch+Time],	eax
		call	wpurple_recv
		cmp	eax, 0
		jnz	loc_688952DC

loc_68895424:				; CODE XREF: sub_68895128+1AEj
					; sub_68895128+24Aj
		mov	dword ptr [esp+5Ch+var_54], 0
		mov	[esp+5Ch+var_58], 2
		mov	[esp+5Ch+Time],	ebx
		call	flap_connection_schedule_destroy

loc_6889543C:				; CODE XREF: sub_68895128+1C3j
					; sub_68895128+273j ...
		mov	edx, [esp+5Ch+var_20]
		xor	edx, ds:__stack_chk_guard
		jnz	loc_68895738
		add	esp, 4Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_68895454:				; CODE XREF: sub_68895128+1EEj
		mov	[esp+5Ch+Time],	esi
		call	sub_68881818
		test	eax, eax
		jz	loc_6889531C
		cmp	word ptr [ebx+5Ch], 17h
		jz	loc_6889563C
		mov	[esp+5Ch+Time],	esi
		call	aim_tlvlist_read
		mov	esi, eax
		mov	dword ptr [esp+5Ch+var_54], 1
		mov	[esp+5Ch+var_58], 9
		mov	[esp+5Ch+Time],	eax
		call	aim_tlv_gettlv
		test	eax, eax
		jz	short loc_688954B1
		mov	dword ptr [esp+5Ch+var_54], 1
		mov	[esp+5Ch+var_58], 9
		mov	[esp+5Ch+Time],	esi
		call	aim_tlv_get16
		mov	[ebx+18h], ax

loc_688954B1:				; CODE XREF: sub_68895128+36Bj
		mov	dword ptr [esp+5Ch+var_54], 1
		mov	[esp+5Ch+var_58], 0Bh
		mov	[esp+5Ch+Time],	esi
		call	aim_tlv_gettlv
		test	eax, eax
		jz	loc_68895634
		mov	dword ptr [esp+5Ch+var_54], 1
		mov	[esp+5Ch+var_58], 0Bh
		mov	[esp+5Ch+Time],	esi
		call	aim_tlv_getstr
		mov	edi, eax

loc_688954EB:				; CODE XREF: sub_68895128+50Ej
		mov	dword ptr [esp+5Ch+var_54], edi
		mov	[esp+5Ch+var_58], 2
		mov	[esp+5Ch+Time],	ebx
		call	flap_connection_schedule_destroy
		mov	[esp+5Ch+Time],	esi
		call	aim_tlvlist_free
		mov	[esp+5Ch+Time],	edi
		call	g_free
		jmp	loc_6889531C
; ---------------------------------------------------------------------------

loc_68895514:				; CODE XREF: sub_68895128+1DEj
		mov	[esp+5Ch+Time],	esi
		call	sub_68881A60
		cmp	eax, 1
		jz	loc_68895604
		mov	dword ptr [esp+5Ch+var_54], eax
		mov	[esp+5Ch+var_58], offset aExpectingFlapV ; "Expecting FLAP version 0x00000001 but r"...
		mov	[esp+5Ch+Time],	offset aOscar_10 ; "oscar"
		call	purple_debug_warning
		mov	dword ptr [esp+5Ch+var_54], 0
		mov	[esp+5Ch+var_58], 5
		mov	[esp+5Ch+Time],	ebx
		call	flap_connection_schedule_destroy
		jmp	loc_6889531C
; ---------------------------------------------------------------------------
		align 4

loc_6889555C:				; CODE XREF: sub_68895128+1E6j
		mov	[esp+5Ch+Time],	esi
		call	sub_68881818
		cmp	eax, 9
		jbe	loc_6889531C
		mov	[esp+5Ch+Time],	esi
		call	sub_688819F0
		mov	word ptr [esp+5Ch+var_2C], ax
		mov	[esp+5Ch+Time],	esi
		call	sub_688819F0
		mov	word ptr [esp+5Ch+var_2C+2], ax
		mov	[esp+5Ch+Time],	esi
		call	sub_688819F0
		mov	word ptr [esp+5Ch+var_28], ax
		mov	[esp+5Ch+Time],	esi
		call	sub_68881A60
		mov	[esp+5Ch+var_24], eax
		cmp	word ptr [esp+5Ch+var_28], 0
		js	loc_688956FF

loc_688955AC:				; CODE XREF: sub_68895128+5EEj
		mov	ecx, [edi+6Ch]
		test	ecx, ecx
		jnz	short loc_688955CC
		jmp	loc_6889531C
; ---------------------------------------------------------------------------

loc_688955B8:				; CODE XREF: sub_68895128+4A8j
		mov	eax, [esp+5Ch+var_2C]
		cmp	[ecx], ax
		jz	short loc_688955D2

loc_688955C1:				; CODE XREF: sub_68895128+4D2j
		mov	ecx, [ecx+28h]
		test	ecx, ecx
		jz	loc_6889531C

loc_688955CC:				; CODE XREF: sub_68895128+489j
		test	byte ptr [ecx+8], 1
		jz	short loc_688955B8

loc_688955D2:				; CODE XREF: sub_68895128+497j
		mov	[esp+5Ch+var_48], esi
		lea	edx, [esp+5Ch+var_2C]
		mov	[esp+5Ch+var_4C], edx
		mov	[esp+5Ch+var_50], ebp
		mov	dword ptr [esp+5Ch+var_54], ecx
		mov	[esp+5Ch+var_58], ebx
		mov	[esp+5Ch+Time],	edi
		mov	[esp+5Ch+var_34], ecx
		call	dword ptr [ecx+1Ch]
		test	eax, eax
		mov	ecx, [esp+5Ch+var_34]
		jz	short loc_688955C1
		jmp	loc_6889531C
; ---------------------------------------------------------------------------
		align 4

loc_68895604:				; CODE XREF: sub_68895128+3F7j
		mov	dword ptr [ebx+4], 1
		jmp	loc_6889531C
; ---------------------------------------------------------------------------

loc_68895610:				; CODE XREF: sub_68895128+22Fj
		mov	[esp+5Ch+var_50], 0
		mov	dword ptr [esp+5Ch+var_54], eax
		mov	[esp+5Ch+var_58], ecx
		mov	eax, [ebx+2Ch]
		mov	[esp+5Ch+Time],	eax
		call	wpurple_recv
		mov	esi, eax
		jmp	loc_6889536F
; ---------------------------------------------------------------------------
		align 4

loc_68895634:				; CODE XREF: sub_68895128+3A3j
		xor	edi, edi
		jmp	loc_688954EB
; ---------------------------------------------------------------------------
		align 4

loc_6889563C:				; CODE XREF: sub_68895128+341j
		mov	word ptr [esp+5Ch+var_2C], 17h
		mov	word ptr [esp+5Ch+var_2C+2], 3
		mov	[esp+5Ch+var_24], 0
		mov	word ptr [esp+5Ch+var_28], 0
		mov	esi, [edi+6Ch]
		test	esi, esi
		jz	loc_6889531C
		lea	edx, [ebx+44h]
		mov	[esp+5Ch+var_30], edx
		jmp	short loc_68895684
; ---------------------------------------------------------------------------
		align 10h

loc_68895670:				; CODE XREF: sub_68895128+560j
		mov	eax, [esp+5Ch+var_2C]
		cmp	[esi], ax
		jz	short loc_6889568A

loc_68895679:				; CODE XREF: sub_68895128+586j
		mov	esi, [esi+28h]
		test	esi, esi
		jz	loc_6889531C

loc_68895684:				; CODE XREF: sub_68895128+543j
		test	byte ptr [esi+8], 1
		jz	short loc_68895670

loc_6889568A:				; CODE XREF: sub_68895128+54Fj
		mov	edx, [esp+5Ch+var_30]
		mov	[esp+5Ch+var_48], edx
		lea	eax, [esp+5Ch+var_2C]
		mov	[esp+5Ch+var_4C], eax
		mov	[esp+5Ch+var_50], ebp
		mov	dword ptr [esp+5Ch+var_54], esi
		mov	[esp+5Ch+var_58], ebx
		mov	[esp+5Ch+Time],	edi
		call	dword ptr [esi+1Ch]
		test	eax, eax
		jz	short loc_68895679
		jmp	loc_6889531C
; ---------------------------------------------------------------------------
		align 4

loc_688956B8:				; CODE XREF: sub_68895128:loc_688952DCj
					; sub_68895128+250j
		call	_errno
		cmp	dword ptr [eax], 0Bh
		jz	loc_6889543C
		call	_errno
		cmp	dword ptr [eax], 2733h
		jz	loc_6889543C
		call	_errno
		mov	eax, [eax]
		mov	[esp+5Ch+Time],	eax
		call	wpurple_strerror
		mov	dword ptr [esp+5Ch+var_54], eax
		mov	[esp+5Ch+var_58], 4
		mov	[esp+5Ch+Time],	ebx
		call	flap_connection_schedule_destroy
		jmp	loc_6889543C
; ---------------------------------------------------------------------------

loc_688956FF:				; CODE XREF: sub_68895128+47Ej
		mov	[esp+5Ch+Time],	esi
		call	sub_688819F0
		movzx	eax, ax
		mov	[esp+5Ch+var_58], eax
		mov	[esp+5Ch+Time],	esi
		call	sub_68881904
		jmp	loc_688955AC
; ---------------------------------------------------------------------------

loc_6889571B:				; CODE XREF: sub_68895128+27Dj
		mov	dword ptr [esp+5Ch+var_54], 0
		mov	[esp+5Ch+var_58], 5
		mov	[esp+5Ch+Time],	ebx
		call	flap_connection_schedule_destroy
		jmp	loc_6889543C
; ---------------------------------------------------------------------------

loc_68895738:				; CODE XREF: sub_68895128+31Ej
		call	__stack_chk_fail
sub_68895128	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 186. flap_connection_findbygroup

; =============== S U B	R O U T	I N E =======================================


		public flap_connection_findbygroup
flap_connection_findbygroup proc near	; CODE XREF: aim_email_sendcookies+28p
					; aim_email_activate+28p ...

var_10		= dword	ptr -10h
arg_0		= dword	ptr  4
arg_4		= word ptr  8

		push	ebx
		sub	esp, 18h
		movzx	ecx, [esp+1Ch+arg_4]
		mov	eax, ds:__stack_chk_guard
		mov	[esp+1Ch+var_10], eax
		xor	eax, eax
		mov	eax, [esp+1Ch+arg_0]
		mov	ebx, [eax+0F0h]
		test	ebx, ebx
		jz	short loc_68895793

loc_68895762:				; CODE XREF: flap_connection_findbygroup+51j
		mov	eax, [ebx]
		mov	edx, [eax+64h]
		test	edx, edx
		jnz	short loc_68895777
		jmp	short loc_6889578C
; ---------------------------------------------------------------------------
		align 10h

loc_68895770:				; CODE XREF: flap_connection_findbygroup+39j
		mov	edx, [edx+4]
		test	edx, edx
		jz	short loc_6889578C

loc_68895777:				; CODE XREF: flap_connection_findbygroup+29j
		cmp	[edx], ecx
		jnz	short loc_68895770

loc_6889577B:				; CODE XREF: flap_connection_findbygroup+55j
		mov	edx, [esp+1Ch+var_10]
		xor	edx, ds:__stack_chk_guard
		jnz	short loc_68895797
		add	esp, 18h
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_6889578C:				; CODE XREF: flap_connection_findbygroup+2Bj
					; flap_connection_findbygroup+35j
		mov	ebx, [ebx+4]
		test	ebx, ebx
		jnz	short loc_68895762

loc_68895793:				; CODE XREF: flap_connection_findbygroup+20j
		xor	eax, eax
		jmp	short loc_6889577B
; ---------------------------------------------------------------------------

loc_68895797:				; CODE XREF: flap_connection_findbygroup+45j
		call	__stack_chk_fail
flap_connection_findbygroup endp

; Exported entry 187. flap_connection_getbytype

; =============== S U B	R O U T	I N E =======================================


		public flap_connection_getbytype
flap_connection_getbytype proc near	; CODE XREF: sub_688933E4+CA5p
					; .text:68899485p ...

var_10		= dword	ptr -10h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	ebx
		sub	esp, 18h
		mov	ebx, [esp+1Ch+arg_4]
		mov	eax, ds:__stack_chk_guard
		mov	[esp+1Ch+var_10], eax
		xor	eax, eax
		mov	eax, [esp+1Ch+arg_0]
		mov	edx, [eax+0F0h]
		test	edx, edx
		jnz	short loc_688957C7
		jmp	short loc_688957EC
; ---------------------------------------------------------------------------
		align 10h

loc_688957C0:				; CODE XREF: flap_connection_getbytype+33j
					; flap_connection_getbytype+3Aj
		mov	edx, [edx+4]
		test	edx, edx
		jz	short loc_688957EC

loc_688957C7:				; CODE XREF: flap_connection_getbytype+1Fj
		mov	eax, [edx]
		movzx	ecx, word ptr [eax+5Ch]
		cmp	ecx, ebx
		jnz	short loc_688957C0
		mov	ecx, [eax+4]
		test	ecx, ecx
		jz	short loc_688957C0

loc_688957D8:				; CODE XREF: flap_connection_getbytype+52j
		mov	edx, [esp+1Ch+var_10]
		xor	edx, ds:__stack_chk_guard
		jnz	short loc_688957F0
		add	esp, 18h
		pop	ebx
		retn
; ---------------------------------------------------------------------------
		align 4

loc_688957EC:				; CODE XREF: flap_connection_getbytype+21j
					; flap_connection_getbytype+29j
		xor	eax, eax
		jmp	short loc_688957D8
; ---------------------------------------------------------------------------

loc_688957F0:				; CODE XREF: flap_connection_getbytype+46j
		call	__stack_chk_fail
flap_connection_getbytype endp

; ---------------------------------------------------------------------------
		align 4
; Exported entry 188. flap_connection_getbytype_all

; =============== S U B	R O U T	I N E =======================================


		public flap_connection_getbytype_all
flap_connection_getbytype_all proc near	; CODE XREF: aim_auth_securid_send+2Dp

var_10		= dword	ptr -10h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	ebx
		sub	esp, 18h
		mov	ebx, [esp+1Ch+arg_4]
		mov	eax, ds:__stack_chk_guard
		mov	[esp+1Ch+var_10], eax
		xor	eax, eax
		mov	eax, [esp+1Ch+arg_0]
		mov	edx, [eax+0F0h]
		test	edx, edx
		jnz	short loc_68895823
		jmp	short loc_68895840
; ---------------------------------------------------------------------------
		align 4

loc_6889581C:				; CODE XREF: flap_connection_getbytype_all+33j
		mov	edx, [edx+4]
		test	edx, edx
		jz	short loc_68895840

loc_68895823:				; CODE XREF: flap_connection_getbytype_all+1Fj
		mov	eax, [edx]
		movzx	ecx, word ptr [eax+5Ch]
		cmp	ecx, ebx
		jnz	short loc_6889581C

loc_6889582D:				; CODE XREF: flap_connection_getbytype_all+4Aj
		mov	edx, [esp+1Ch+var_10]
		xor	edx, ds:__stack_chk_guard
		jnz	short loc_68895844
		add	esp, 18h
		pop	ebx
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_68895840:				; CODE XREF: flap_connection_getbytype_all+21j
					; flap_connection_getbytype_all+29j
		xor	eax, eax
		jmp	short loc_6889582D
; ---------------------------------------------------------------------------

loc_68895844:				; CODE XREF: flap_connection_getbytype_all+3Fj
		call	__stack_chk_fail
flap_connection_getbytype_all endp

; ---------------------------------------------------------------------------
		align 4
; Exported entry 200. flap_frame_new

; =============== S U B	R O U T	I N E =======================================


		public flap_frame_new
flap_frame_new	proc near		; CODE XREF: aim_send_login+A0p
					; aim_request_login+5Fp ...

var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_10		= dword	ptr -10h
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	edi
		push	esi
		push	ebx
		sub	esp, 20h
		mov	esi, [esp+2Ch+arg_8]
		mov	edi, [esp+2Ch+arg_4]
		mov	eax, ds:__stack_chk_guard
		mov	[esp+2Ch+var_10], eax
		xor	eax, eax
		mov	[esp+2Ch+var_2C], 10h
		call	g_malloc0
		mov	ebx, eax
		mov	edx, edi
		mov	[eax], dl
		test	esi, esi
		jle	short loc_6889588A
		mov	[esp+2Ch+var_28], esi
		lea	eax, [eax+4]
		mov	[esp+2Ch+var_2C], eax
		call	sub_68881748

loc_6889588A:				; CODE XREF: flap_frame_new+2Dj
		mov	eax, ebx
		mov	edx, [esp+2Ch+var_10]
		xor	edx, ds:__stack_chk_guard
		jnz	short loc_6889589F
		add	esp, 20h
		pop	ebx
		pop	esi
		pop	edi
		retn
; ---------------------------------------------------------------------------

loc_6889589F:				; CODE XREF: flap_frame_new+4Aj
		call	__stack_chk_fail
flap_frame_new	endp

; Exported entry 190. flap_connection_recv_cb

; =============== S U B	R O U T	I N E =======================================


		public flap_connection_recv_cb
flap_connection_recv_cb	proc near	; DATA XREF: sub_6889AB20+2Eo

var_10		= dword	ptr -10h
arg_0		= dword	ptr  4

		sub	esp, 1Ch
		mov	eax, [esp+1Ch+arg_0]
		mov	edx, ds:__stack_chk_guard
		mov	[esp+1Ch+var_10], edx
		xor	edx, edx
		mov	edx, [esp+1Ch+var_10]
		xor	edx, ds:__stack_chk_guard
		jnz	short loc_688958CB
		add	esp, 1Ch
		jmp	loc_6889528C
; ---------------------------------------------------------------------------

loc_688958CB:				; CODE XREF: flap_connection_recv_cb+1Dj
		call	__stack_chk_fail
flap_connection_recv_cb	endp

; Exported entry 191. flap_connection_recv_cb_ssl

; =============== S U B	R O U T	I N E =======================================


		public flap_connection_recv_cb_ssl
flap_connection_recv_cb_ssl proc near	; DATA XREF: sub_6889ABF8+17o

var_10		= dword	ptr -10h
arg_0		= dword	ptr  4

		sub	esp, 1Ch
		mov	eax, [esp+1Ch+arg_0]
		mov	edx, ds:__stack_chk_guard
		mov	[esp+1Ch+var_10], edx
		xor	edx, edx
		mov	edx, [esp+1Ch+var_10]
		xor	edx, ds:__stack_chk_guard
		jnz	short loc_688958F7
		add	esp, 1Ch
		jmp	loc_6889528C
; ---------------------------------------------------------------------------

loc_688958F7:				; CODE XREF: flap_connection_recv_cb_ssl+1Dj
		call	__stack_chk_fail
flap_connection_recv_cb_ssl endp

; Exported entry 193. flap_connection_send

; =============== S U B	R O U T	I N E =======================================


		public flap_connection_send
flap_connection_send proc near		; CODE XREF: aim_send_login+3B3p
					; aim_request_login+110p ...

var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_20		= dword	ptr -20h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 3Ch
		mov	edi, [esp+4Ch+arg_0]
		mov	esi, [esp+4Ch+arg_4]
		mov	eax, ds:__stack_chk_guard
		mov	[esp+4Ch+var_20], eax
		xor	eax, eax
		mov	eax, [edi+60h]
		inc	eax
		mov	[edi+60h], ax
		mov	[esi+2], ax
		lea	ebp, [esi+4]
		mov	[esp+4Ch+var_4C], ebp
		call	sub_68881848
		mov	[esp+4Ch+var_30], eax
		add	eax, 6
		mov	[esp+4Ch+var_48], eax
		lea	ebx, [esp+4Ch+var_2C]
		mov	[esp+4Ch+var_4C], ebx
		call	sub_68881748
		mov	[esp+4Ch+var_48], 2Ah
		mov	[esp+4Ch+var_4C], ebx
		call	sub_68881DA4
		movzx	eax, byte ptr [esi]
		mov	[esp+4Ch+var_48], eax
		mov	[esp+4Ch+var_4C], ebx
		call	sub_68881DA4
		movzx	eax, word ptr [esi+2]
		mov	[esp+4Ch+var_48], eax
		mov	[esp+4Ch+var_4C], ebx
		call	sub_68881E0C
		movzx	eax, word ptr [esp+4Ch+var_30]
		mov	[esp+4Ch+var_48], eax
		mov	[esp+4Ch+var_4C], ebx
		call	sub_68881E0C
		mov	[esp+4Ch+var_4C], ebp
		call	sub_688818CC
		mov	eax, [esp+4Ch+var_30]
		mov	[esp+4Ch+var_44], eax
		mov	[esp+4Ch+var_48], ebp
		mov	[esp+4Ch+var_4C], ebx
		call	sub_68882160
		mov	[esp+4Ch+var_4C], ebx
		call	sub_68881848
		mov	ebp, eax
		mov	[esp+4Ch+var_4C], ebx
		call	sub_688818CC
		mov	[esp+4Ch+var_4C], ebx
		call	sub_68881818
		cmp	ebp, eax
		ja	loc_68895A54

loc_688959C2:				; CODE XREF: flap_connection_send+162j
		test	ebp, ebp
		jnz	short loc_688959F0

loc_688959C6:				; CODE XREF: flap_connection_send+110j
					; flap_connection_send+153j ...
		mov	[esp+4Ch+var_4C], ebx
		call	sub_688817E4
		mov	eax, esi
		call	sub_68894FC8
		mov	eax, [esp+4Ch+var_20]
		xor	eax, ds:__stack_chk_guard
		jnz	loc_68895A85
		add	esp, 3Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_688959F0:				; CODE XREF: flap_connection_send+C8j
		mov	[esp+4Ch+var_44], ebp
		mov	eax, [esp+4Ch+var_2C]
		mov	[esp+4Ch+var_48], eax
		mov	eax, [edi+50h]
		mov	[esp+4Ch+var_4C], eax
		call	purple_circ_buffer_append
		mov	ebp, [edi+58h]
		test	ebp, ebp
		jnz	short loc_688959C6
		mov	eax, [edi+30h]
		test	eax, eax
		jz	short loc_68895A64
		mov	[esp+4Ch+var_40], edi
		mov	[esp+4Ch+var_44], offset sub_68895128
		mov	[esp+4Ch+var_48], 2
		mov	eax, [eax+1Ch]

loc_68895A2C:				; CODE XREF: flap_connection_send+187j
		mov	[esp+4Ch+var_4C], eax
		call	purple_input_add
		mov	[edi+58h], eax
		mov	[esp+4Ch+var_44], 0
		mov	[esp+4Ch+var_48], 0FFFFFFFFh
		mov	[esp+4Ch+var_4C], edi
		call	sub_68895128
		jmp	loc_688959C6
; ---------------------------------------------------------------------------

loc_68895A54:				; CODE XREF: flap_connection_send+C0j
		mov	[esp+4Ch+var_4C], ebx
		call	sub_68881818
		mov	ebp, eax
		jmp	loc_688959C2
; ---------------------------------------------------------------------------
		align 4

loc_68895A64:				; CODE XREF: flap_connection_send+117j
		mov	eax, [edi+2Ch]
		test	eax, eax
		js	loc_688959C6
		mov	[esp+4Ch+var_40], edi
		mov	[esp+4Ch+var_44], offset sub_68895128
		mov	[esp+4Ch+var_48], 2
		jmp	short loc_68895A2C
; ---------------------------------------------------------------------------

loc_68895A85:				; CODE XREF: flap_connection_send+E3j
		call	__stack_chk_fail
flap_connection_send endp

; ---------------------------------------------------------------------------
		align 4
; Exported entry 183. flap_connection_close

; =============== S U B	R O U T	I N E =======================================


		public flap_connection_close
flap_connection_close proc near		; CODE XREF: sub_68895BF0+10Bp

var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_10		= dword	ptr -10h
arg_4		= dword	ptr  8

		push	ebx
		sub	esp, 28h
		mov	ebx, [esp+2Ch+arg_4]
		mov	eax, ds:__stack_chk_guard
		mov	[esp+2Ch+var_10], eax
		xor	eax, eax
		mov	eax, [ebx+1Ch]
		test	eax, eax
		jz	short loc_68895AB5
		mov	[esp+2Ch+var_2C], eax
		call	purple_proxy_connect_cancel
		mov	dword ptr [ebx+1Ch], 0

loc_68895AB5:				; CODE XREF: flap_connection_close+18j
		mov	eax, [ebx+30h]
		test	eax, eax
		jz	short loc_68895AD2
		mov	edx, [eax+24h]
		test	edx, edx
		jz	short loc_68895AD2
		mov	[esp+2Ch+var_2C], eax
		call	purple_ssl_close
		mov	dword ptr [ebx+30h], 0

loc_68895AD2:				; CODE XREF: flap_connection_close+2Ej
					; flap_connection_close+35j
		mov	eax, [ebx+28h]
		test	eax, eax
		jz	short loc_68895AE4
		cmp	word ptr [ebx+5Ch], 0Eh
		jz	loc_68895BD4

loc_68895AE4:				; CODE XREF: flap_connection_close+4Bj
					; flap_connection_close+157j
		mov	eax, [ebx+2Ch]
		test	eax, eax
		js	loc_68895B9C
		cmp	word ptr [ebx+5Ch], 2
		jz	loc_68895BB2

loc_68895AFA:				; CODE XREF: flap_connection_close+115j
					; flap_connection_close+120j ...
		mov	eax, [ebx+54h]
		test	eax, eax
		jnz	short loc_68895B70
		mov	eax, [ebx+58h]
		test	eax, eax
		jnz	short loc_68895B86

loc_68895B08:				; CODE XREF: flap_connection_close+F8j
					; flap_connection_close+109j
		mov	eax, [ebx+2Ch]
		test	eax, eax
		js	short loc_68895B1E
		mov	[esp+2Ch+var_2C], eax
		call	wpurple_close
		mov	dword ptr [ebx+2Ch], 0FFFFFFFFh

loc_68895B1E:				; CODE XREF: flap_connection_close+81j
		mov	eax, [ebx+30h]
		test	eax, eax
		jz	short loc_68895B34
		mov	[esp+2Ch+var_2C], eax
		call	purple_ssl_close
		mov	dword ptr [ebx+30h], 0

loc_68895B34:				; CODE XREF: flap_connection_close+97j
		mov	eax, [ebx+44h]
		mov	[esp+2Ch+var_2C], eax
		call	g_free
		mov	dword ptr [ebx+44h], 0
		mov	eax, [ebx+50h]
		mov	[esp+2Ch+var_2C], eax
		call	purple_circ_buffer_destroy
		mov	dword ptr [ebx+50h], 0
		mov	eax, [esp+2Ch+var_10]
		xor	eax, ds:__stack_chk_guard
		jnz	loc_68895BE8
		add	esp, 28h
		pop	ebx
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_68895B70:				; CODE XREF: flap_connection_close+73j
		mov	[esp+2Ch+var_2C], eax
		call	purple_input_remove
		mov	dword ptr [ebx+54h], 0
		mov	eax, [ebx+58h]
		test	eax, eax
		jz	short loc_68895B08

loc_68895B86:				; CODE XREF: flap_connection_close+7Aj
		mov	[esp+2Ch+var_2C], eax
		call	purple_input_remove
		mov	dword ptr [ebx+58h], 0
		jmp	loc_68895B08
; ---------------------------------------------------------------------------
		align 4

loc_68895B9C:				; CODE XREF: flap_connection_close+5Dj
		mov	eax, [ebx+30h]
		test	eax, eax
		jz	loc_68895AFA
		cmp	word ptr [ebx+5Ch], 2
		jnz	loc_68895AFA

loc_68895BB2:				; CODE XREF: flap_connection_close+68j
		mov	[esp+2Ch+var_2C], 10h
		call	g_malloc0
		mov	byte ptr [eax],	4
		mov	[esp+2Ch+var_28], eax
		mov	[esp+2Ch+var_2C], ebx
		call	flap_connection_send
		jmp	loc_68895AFA
; ---------------------------------------------------------------------------
		align 4

loc_68895BD4:				; CODE XREF: flap_connection_close+52j
		mov	[esp+2Ch+var_2C], eax
		call	oscar_chat_destroy
		mov	dword ptr [ebx+28h], 0
		jmp	loc_68895AE4
; ---------------------------------------------------------------------------

loc_68895BE8:				; CODE XREF: flap_connection_close+D6j
		call	__stack_chk_fail
flap_connection_close endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_68895BF0	proc near		; CODE XREF: flap_connection_destroy+5Bj
					; DATA XREF: flap_connection_schedule_destroy+61o

var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_3C		= dword	ptr -3Ch
var_20		= dword	ptr -20h
arg_0		= dword	ptr  4

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 3Ch
		mov	ebx, [esp+4Ch+arg_0]
		mov	eax, ds:__stack_chk_guard
		mov	[esp+4Ch+var_20], eax
		xor	eax, eax
		mov	[esp+4Ch+var_44], ebx
		mov	[esp+4Ch+var_48], offset aDestroyingFlap ; "Destroying FLAP connection %p\n"
		mov	[esp+4Ch+var_4C], offset aOscar_10 ; "oscar"
		call	purple_debug_info
		mov	esi, [ebx]
		mov	eax, [esi+68h]
		mov	[esp+4Ch+var_4C], eax
		call	purple_connection_get_account
		mov	edi, eax
		mov	eax, [ebx+10h]
		mov	[esp+4Ch+var_3C], eax
		movzx	eax, word ptr [ebx+5Ch]
		mov	[esp+4Ch+var_40], eax
		mov	[esp+4Ch+var_44], ebx
		mov	[esp+4Ch+var_48], offset aDestroyingOsca ; "Destroying oscar connection	(%p) of	typ"...
		mov	[esp+4Ch+var_4C], offset aOscar_10 ; "oscar"
		call	purple_debug_info
		mov	[esp+4Ch+var_48], ebx
		mov	eax, [esi+0F0h]
		mov	[esp+4Ch+var_4C], eax
		call	g_slist_remove
		mov	[esi+0F0h], eax
		mov	[esp+4Ch+var_44], 3
		mov	[esp+4Ch+var_48], 0FFFFh
		mov	[esp+4Ch+var_4C], esi
		call	aim_callhandler
		test	eax, eax
		jz	short loc_68895CA8
		mov	edx, [ebx+14h]
		mov	[esp+4Ch+var_3C], edx
		movzx	edx, word ptr [ebx+18h]
		mov	[esp+4Ch+var_40], edx
		mov	[esp+4Ch+var_44], 0
		mov	[esp+4Ch+var_48], ebx
		mov	[esp+4Ch+var_4C], esi
		call	eax

loc_68895CA8:				; CODE XREF: sub_68895BF0+96j
		mov	ebp, [edi+20h]
		test	ebp, ebp
		jnz	short loc_68895CF4
		mov	edx, [esi+0F0h]
		test	edx, edx
		jnz	loc_68895E1C
		lea	esi, [esi+0]

loc_68895CC0:				; CODE XREF: sub_68895BF0+226j
		cmp	word ptr [ebx+18h], 1
		jz	loc_68895E88
		mov	eax, [ebx+10h]
		cmp	eax, 2
		jz	loc_68895EB9
		cmp	eax, 4
		jz	loc_68895EDB
		cmp	eax, 5
		jz	loc_68895EEB
		cmp	eax, 6
		jz	loc_68895E39
		xchg	ax, ax

loc_68895CF4:				; CODE XREF: sub_68895BF0+BDj
					; sub_68895BF0+21Bj ...
		mov	[esp+4Ch+var_48], ebx
		mov	[esp+4Ch+var_4C], esi
		call	flap_connection_close
		mov	eax, [ebx+14h]
		mov	[esp+4Ch+var_4C], eax
		call	g_free
		mov	eax, [ebx+24h]
		mov	[esp+4Ch+var_4C], eax
		call	g_free
		cmp	word ptr [ebx+5Ch], 0Eh
		jz	loc_68895E28

loc_68895D21:				; CODE XREF: sub_68895BF0+244j
		mov	eax, [ebx+64h]
		mov	[esp+4Ch+var_4C], eax
		call	g_slist_free
		mov	eax, [ebx+68h]
		test	eax, eax
		jz	short loc_68895D54
		nop

loc_68895D34:				; CODE XREF: sub_68895BF0+162j
		mov	eax, [eax]
		mov	[esp+4Ch+var_4C], eax
		call	g_free
		mov	eax, [ebx+68h]
		mov	[esp+4Ch+var_48], eax
		mov	[esp+4Ch+var_4C], eax
		call	g_slist_delete_link
		mov	[ebx+68h], eax
		test	eax, eax
		jnz	short loc_68895D34

loc_68895D54:				; CODE XREF: sub_68895BF0+141j
		mov	eax, [ebx+70h]
		mov	[esp+4Ch+var_4C], eax
		call	g_hash_table_destroy
		mov	eax, [ebx+74h]
		test	eax, eax
		jnz	short loc_68895D82
		jmp	short loc_68895D99
; ---------------------------------------------------------------------------

loc_68895D68:				; CODE XREF: sub_68895BF0+1A2j
		call	g_queue_pop_head
		mov	esi, eax
		mov	eax, [eax+4]
		call	sub_68894FC8
		mov	[esp+4Ch+var_4C], esi
		call	g_free
		mov	eax, [ebx+74h]

loc_68895D82:				; CODE XREF: sub_68895BF0+174j
		mov	[esp+4Ch+var_4C], eax
		call	g_queue_is_empty
		test	eax, eax
		mov	eax, [ebx+74h]
		mov	[esp+4Ch+var_4C], eax
		jz	short loc_68895D68
		call	g_queue_free

loc_68895D99:				; CODE XREF: sub_68895BF0+176j
		mov	eax, [ebx+78h]
		test	eax, eax
		jnz	short loc_68895DBE
		jmp	short loc_68895DD5
; ---------------------------------------------------------------------------
		align 4

loc_68895DA4:				; CODE XREF: sub_68895BF0+1DEj
		call	g_queue_pop_head
		mov	esi, eax
		mov	eax, [eax+4]
		call	sub_68894FC8
		mov	[esp+4Ch+var_4C], esi
		call	g_free
		mov	eax, [ebx+78h]

loc_68895DBE:				; CODE XREF: sub_68895BF0+1AEj
		mov	[esp+4Ch+var_4C], eax
		call	g_queue_is_empty
		test	eax, eax
		mov	eax, [ebx+78h]
		mov	[esp+4Ch+var_4C], eax
		jz	short loc_68895DA4
		call	g_queue_free

loc_68895DD5:				; CODE XREF: sub_68895BF0+1B0j
		mov	eax, [ebx+7Ch]
		test	eax, eax
		jz	short loc_68895DE4
		mov	[esp+4Ch+var_4C], eax
		call	purple_timeout_remove

loc_68895DE4:				; CODE XREF: sub_68895BF0+1EAj
		mov	[esp+4Ch+var_4C], ebx
		call	g_free
		xor	eax, eax
		mov	edx, [esp+4Ch+var_20]
		xor	edx, ds:__stack_chk_guard
		jnz	loc_68895F0F
		add	esp, 3Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_68895E06:				; CODE XREF: sub_68895BF0+235j
		mov	ecx, [eax+4]
		test	ecx, ecx
		jnz	loc_68895CF4

loc_68895E11:				; CODE XREF: sub_68895BF0+233j
		mov	edx, [edx+4]
		test	edx, edx
		jz	loc_68895CC0

loc_68895E1C:				; CODE XREF: sub_68895BF0+C7j
		mov	eax, [edx]
		cmp	word ptr [eax+5Ch], 2
		jnz	short loc_68895E11
		jmp	short loc_68895E06
; ---------------------------------------------------------------------------
		align 4

loc_68895E28:				; CODE XREF: sub_68895BF0+12Bj
		mov	[esp+4Ch+var_48], ebx
		mov	[esp+4Ch+var_4C], esi
		call	flap_connection_destroy_chat
		jmp	loc_68895D21
; ---------------------------------------------------------------------------

loc_68895E39:				; CODE XREF: sub_68895BF0+FCj
		mov	edi, [ebx+14h]
		mov	[esp+4Ch+var_48], offset aUnableToConnec ; "Unable to connect: %s"

loc_68895E44:				; CODE XREF: sub_68895BF0+2F6j
		mov	[esp+4Ch+var_4C], offset aPidgin_4 ; "pidgin"
		call	libintl_dgettext
		mov	[esp+4Ch+var_48], edi
		mov	[esp+4Ch+var_4C], eax
		call	g_strdup_printf
		mov	ebp, eax
		xor	eax, eax

loc_68895E60:				; CODE XREF: sub_68895BF0+2C7j
					; sub_68895BF0+2E9j ...
		test	ebp, ebp
		jz	loc_68895CF4
		mov	[esp+4Ch+var_44], ebp
		mov	[esp+4Ch+var_48], eax
		mov	eax, [esi+68h]
		mov	[esp+4Ch+var_4C], eax
		call	purple_connection_error_reason
		mov	[esp+4Ch+var_4C], ebp
		call	g_free
		jmp	loc_68895CF4
; ---------------------------------------------------------------------------

loc_68895E88:				; CODE XREF: sub_68895BF0+D5j
		mov	[esp+4Ch+var_48], offset aYouHaveSignedO ; "You	have signed on from another locatio"...
		mov	[esp+4Ch+var_4C], offset aPidgin_4 ; "pidgin"
		call	libintl_dgettext
		mov	[esp+4Ch+var_4C], eax
		call	g_strdup
		mov	ebp, eax
		mov	[esp+4Ch+var_4C], edi
		call	purple_account_get_remember_password
		test	eax, eax
		jz	short loc_68895EF5
		mov	eax, 6
		jmp	short loc_68895E60
; ---------------------------------------------------------------------------

loc_68895EB9:				; CODE XREF: sub_68895BF0+E1j
		mov	[esp+4Ch+var_48], offset aServerClosedTh ; "Server closed the connection"

loc_68895EC1:				; CODE XREF: sub_68895BF0+303j
		mov	[esp+4Ch+var_4C], offset aPidgin_4 ; "pidgin"
		call	libintl_dgettext
		mov	[esp+4Ch+var_4C], eax
		call	g_strdup
		mov	ebp, eax
		xor	eax, eax
		jmp	short loc_68895E60
; ---------------------------------------------------------------------------

loc_68895EDB:				; CODE XREF: sub_68895BF0+EAj
		mov	edi, [ebx+14h]
		mov	[esp+4Ch+var_48], offset aLostConnection ; "Lost connection with server: %s"
		jmp	loc_68895E44
; ---------------------------------------------------------------------------

loc_68895EEB:				; CODE XREF: sub_68895BF0+F3j
		mov	[esp+4Ch+var_48], offset aReceivedInvali ; "Received invalid data on connection	wit"...
		jmp	short loc_68895EC1
; ---------------------------------------------------------------------------

loc_68895EF5:				; CODE XREF: sub_68895BF0+2C0j
		mov	[esp+4Ch+var_48], 0
		mov	[esp+4Ch+var_4C], edi
		call	purple_account_set_password
		mov	eax, 6
		jmp	loc_68895E60
; ---------------------------------------------------------------------------

loc_68895F0F:				; CODE XREF: sub_68895BF0+208j
		call	__stack_chk_fail
sub_68895BF0	endp

; Exported entry 184. flap_connection_destroy

; =============== S U B	R O U T	I N E =======================================


		public flap_connection_destroy
flap_connection_destroy	proc near	; CODE XREF: oscar_data_destroy+9Dp

var_2C		= dword	ptr -2Ch
var_10		= dword	ptr -10h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	edi
		push	esi
		push	ebx
		sub	esp, 20h
		mov	ebx, [esp+2Ch+arg_0]
		mov	edi, [esp+2Ch+arg_4]
		mov	esi, [esp+2Ch+arg_8]
		mov	eax, ds:__stack_chk_guard
		mov	[esp+2Ch+var_10], eax
		xor	eax, eax
		mov	eax, [ebx+0Ch]
		test	eax, eax
		jz	short loc_68895F40
		mov	[esp+2Ch+var_2C], eax
		call	purple_timeout_remove

loc_68895F40:				; CODE XREF: flap_connection_destroy+22j
		mov	[ebx+10h], edi
		mov	eax, [ebx+14h]
		mov	[esp+2Ch+var_2C], eax
		call	g_free
		mov	[esp+2Ch+var_2C], esi
		call	g_strdup
		mov	[ebx+14h], eax
		mov	eax, [esp+2Ch+var_10]
		xor	eax, ds:__stack_chk_guard
		jnz	short loc_68895F74
		mov	[esp+2Ch+arg_0], ebx
		add	esp, 20h
		pop	ebx
		pop	esi
		pop	edi
		jmp	sub_68895BF0
; ---------------------------------------------------------------------------

loc_68895F74:				; CODE XREF: flap_connection_destroy+4Fj
		call	__stack_chk_fail
flap_connection_destroy	endp

; ---------------------------------------------------------------------------
		align 4
; Exported entry 194. flap_connection_send_keepalive

; =============== S U B	R O U T	I N E =======================================


		public flap_connection_send_keepalive
flap_connection_send_keepalive proc near ; CODE	XREF: oscar_keepalive+31p

var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_10		= dword	ptr -10h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	esi
		push	ebx
		sub	esp, 24h
		mov	esi, [esp+2Ch+arg_0]
		mov	ebx, [esp+2Ch+arg_4]
		mov	eax, ds:__stack_chk_guard
		mov	[esp+2Ch+var_10], eax
		xor	eax, eax
		mov	[esp+2Ch+var_2C], 10h
		call	g_malloc0
		mov	byte ptr [eax],	5
		mov	[esp+2Ch+var_28], eax
		mov	[esp+2Ch+var_2C], ebx
		call	flap_connection_send
		mov	eax, [esp+2Ch+var_10]
		xor	eax, ds:__stack_chk_guard
		jnz	short loc_68895FD1
		mov	[esp+2Ch+arg_4], 3Ch
		mov	[esp+2Ch+arg_0], esi
		add	esp, 24h
		pop	ebx
		pop	esi
		jmp	aim_cleansnacs
; ---------------------------------------------------------------------------

loc_68895FD1:				; CODE XREF: flap_connection_send_keepalive+3Dj
		call	__stack_chk_fail
flap_connection_send_keepalive endp

; ---------------------------------------------------------------------------
		align 4
; Exported entry 196. flap_connection_send_snac_with_priority

; =============== S U B	R O U T	I N E =======================================


		public flap_connection_send_snac_with_priority
flap_connection_send_snac_with_priority	proc near ; CODE XREF: icq_im_xstatus_request+2C1p
					; icq_relay_xstatus+1F5p ...

var_6C		= dword	ptr -6Ch
var_68		= dword	ptr -68h
var_64		= dword	ptr -64h
var_60		= dword	ptr -60h
var_5C		= dword	ptr -5Ch
var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_3A		= word ptr -3Ah
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h
arg_18		= dword	ptr  1Ch

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 5Ch
		mov	eax, [esp+6Ch+arg_0]
		mov	edi, [esp+6Ch+arg_4]
		mov	ecx, [esp+6Ch+arg_10]
		mov	ebx, [esp+6Ch+arg_14]
		mov	edx, [esp+6Ch+arg_18]
		mov	[esp+6Ch+var_34], edx
		mov	ebp, [esp+6Ch+arg_8]
		mov	edx, [esp+6Ch+arg_C]
		mov	[esp+6Ch+var_3A], dx
		mov	edx, ds:__stack_chk_guard
		mov	[esp+6Ch+var_20], edx
		xor	edx, edx
		test	ebx, ebx
		jz	loc_68896208
		mov	edx, [ebx+8]
		lea	esi, [edx+0Ah]
		mov	[esp+6Ch+var_64], esi
		mov	[esp+6Ch+var_68], 2
		mov	[esp+6Ch+var_6C], eax
		mov	[esp+6Ch+var_4C], edx
		mov	[esp+6Ch+var_48], ecx
		call	flap_frame_new
		mov	[esp+6Ch+var_40], eax
		movzx	eax, [esp+6Ch+var_3A]
		mov	[esp+6Ch+var_44], eax
		movzx	esi, bp
		mov	eax, [esp+6Ch+var_40]
		add	eax, 4
		mov	[esp+6Ch+var_38], eax
		mov	ecx, [esp+6Ch+var_48]
		mov	[esp+6Ch+var_60], ecx
		mov	ecx, [esp+6Ch+var_44]
		mov	[esp+6Ch+var_64], ecx
		mov	[esp+6Ch+var_68], esi
		mov	[esp+6Ch+var_6C], eax
		call	aim_putsnac
		mov	edx, [esp+6Ch+var_4C]
		test	edx, edx
		jz	short loc_688960A2
		mov	[esp+6Ch+var_6C], ebx
		call	sub_688818CC
		mov	edx, [esp+6Ch+var_4C]
		mov	[esp+6Ch+var_64], edx
		mov	[esp+6Ch+var_68], ebx
		mov	edx, [esp+6Ch+var_38]
		mov	[esp+6Ch+var_6C], edx
		call	sub_68882160

loc_688960A2:				; CODE XREF: flap_connection_send_snac_with_priority+A8j
					; flap_connection_send_snac_with_priority+277j
		mov	eax, [edi+7Ch]
		test	eax, eax
		jz	short loc_68896120

loc_688960A9:				; CODE XREF: flap_connection_send_snac_with_priority+22Bj
		mov	[esp+6Ch+var_6C], 8
		call	g_malloc
		mov	ebx, eax
		mov	[eax], bp
		mov	cx, [esp+6Ch+var_3A]
		mov	[eax+2], cx
		mov	eax, [esp+6Ch+var_40]
		mov	[ebx+4], eax
		mov	eax, [esp+6Ch+var_34]
		test	eax, eax
		jnz	short loc_6889610C
		mov	eax, [edi+78h]
		test	eax, eax
		jz	loc_68896284

loc_688960DD:				; CODE XREF: flap_connection_send_snac_with_priority+139j
					; flap_connection_send_snac_with_priority+143j	...
		mov	[esp+6Ch+var_68], ebx
		mov	[esp+6Ch+var_6C], eax
		call	g_queue_push_tail
		mov	eax, [edi+7Ch]
		test	eax, eax
		jz	loc_68896254

loc_688960F4:				; CODE XREF: flap_connection_send_snac_with_priority+1F9j
					; flap_connection_send_snac_with_priority+297j
		mov	ecx, [esp+6Ch+var_20]
		xor	ecx, ds:__stack_chk_guard
		jnz	loc_68896291
		add	esp, 5Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_6889610C:				; CODE XREF: flap_connection_send_snac_with_priority+F8j
		mov	eax, [edi+74h]
		test	eax, eax
		jnz	short loc_688960DD
		call	g_queue_new
		mov	[edi+74h], eax
		jmp	short loc_688960DD
; ---------------------------------------------------------------------------
		align 10h

loc_68896120:				; CODE XREF: flap_connection_send_snac_with_priority+CFj
		shl	esi, 10h
		mov	eax, [esp+6Ch+var_44]
		add	eax, esi
		mov	[esp+6Ch+var_68], eax
		mov	eax, [edi+70h]
		mov	[esp+6Ch+var_6C], eax
		call	g_hash_table_lookup
		mov	ebx, eax
		test	eax, eax
		jz	loc_68896274

loc_68896142:				; CODE XREF: flap_connection_send_snac_with_priority+2A7j
		mov	[esp+6Ch+var_68], 0
		lea	eax, [esp+6Ch+var_28]
		mov	[esp+6Ch+var_6C], eax
		call	wpurple_gettimeofday
		mov	ecx, [esp+6Ch+var_28]
		mov	[esp+6Ch+var_38], ecx
		mov	esi, [esp+6Ch+var_24]
		mov	eax, ecx
		sub	eax, [ebx+24h]
		lea	eax, [eax+eax*4]
		lea	eax, [eax+eax*4]
		lea	eax, [eax+eax*4]
		mov	[esp+6Ch+var_30], eax
		mov	ecx, esi
		sub	ecx, [ebx+28h]
		mov	eax, 10624DD3h
		imul	ecx
		mov	eax, edx
		sar	eax, 6
		sar	ecx, 1Fh
		sub	eax, ecx
		mov	ecx, [esp+6Ch+var_30]
		lea	edx, [eax+ecx*8]
		mov	eax, [ebx+4]
		dec	eax
		imul	eax, [ebx+18h]
		add	eax, edx
		xor	edx, edx
		div	dword ptr [ebx+4]
		mov	ecx, [ebx+1Ch]
		cmp	eax, ecx
		ja	short loc_688961D8
		cmp	byte ptr [ebx+20h], 0
		mov	edx, [ebx+0Ch]
		jnz	short loc_688961E3

loc_688961B0:				; CODE XREF: flap_connection_send_snac_with_priority+209j
		cmp	edx, eax
		jnb	short loc_688961E3
		mov	[ebx+18h], eax
		mov	ecx, [esp+6Ch+var_38]
		mov	[ebx+24h], ecx
		mov	[ebx+28h], esi

loc_688961C1:				; CODE XREF: flap_connection_send_snac_with_priority+2A1j
		mov	eax, [esp+6Ch+var_40]
		mov	[esp+6Ch+var_68], eax
		mov	[esp+6Ch+var_6C], edi
		call	flap_connection_send
		jmp	loc_688960F4
; ---------------------------------------------------------------------------
		align 4

loc_688961D8:				; CODE XREF: flap_connection_send_snac_with_priority+1CDj
		mov	eax, ecx
		cmp	byte ptr [ebx+20h], 0
		mov	edx, [ebx+0Ch]
		jz	short loc_688961B0

loc_688961E3:				; CODE XREF: flap_connection_send_snac_with_priority+1D6j
					; flap_connection_send_snac_with_priority+1DAj
		mov	[esp+6Ch+var_5C], edx
		mov	[esp+6Ch+var_60], eax
		mov	[esp+6Ch+var_64], edi
		mov	[esp+6Ch+var_68], offset aCurrentRateFor ; "Current rate for conn %p would be %u, b"...
		mov	[esp+6Ch+var_6C], offset aOscar_10 ; "oscar"
		call	purple_debug_info
		jmp	loc_688960A9
; ---------------------------------------------------------------------------

loc_68896208:				; CODE XREF: flap_connection_send_snac_with_priority+43j
		mov	[esp+6Ch+var_64], 0Ah
		mov	[esp+6Ch+var_68], 2
		mov	[esp+6Ch+var_6C], eax
		mov	[esp+6Ch+var_48], ecx
		call	flap_frame_new
		mov	[esp+6Ch+var_40], eax
		movzx	edx, [esp+6Ch+var_3A]
		mov	[esp+6Ch+var_44], edx
		movzx	esi, bp
		mov	ecx, [esp+6Ch+var_48]
		mov	[esp+6Ch+var_60], ecx
		mov	[esp+6Ch+var_64], edx
		mov	[esp+6Ch+var_68], esi
		add	eax, 4
		mov	[esp+6Ch+var_6C], eax
		call	aim_putsnac
		jmp	loc_688960A2
; ---------------------------------------------------------------------------

loc_68896254:				; CODE XREF: flap_connection_send_snac_with_priority+116j
		mov	[esp+6Ch+var_64], edi
		mov	[esp+6Ch+var_68], offset sub_68896420
		mov	[esp+6Ch+var_6C], 1F4h
		call	purple_timeout_add
		mov	[edi+7Ch], eax
		jmp	loc_688960F4
; ---------------------------------------------------------------------------

loc_68896274:				; CODE XREF: flap_connection_send_snac_with_priority+164j
		mov	ebx, [edi+6Ch]
		test	ebx, ebx
		jz	loc_688961C1
		jmp	loc_68896142
; ---------------------------------------------------------------------------

loc_68896284:				; CODE XREF: flap_connection_send_snac_with_priority+FFj
		call	g_queue_new
		mov	[edi+78h], eax
		jmp	loc_688960DD
; ---------------------------------------------------------------------------

loc_68896291:				; CODE XREF: flap_connection_send_snac_with_priority+126j
		call	__stack_chk_fail
flap_connection_send_snac_with_priority	endp

; ---------------------------------------------------------------------------
		align 4
; Exported entry 195. flap_connection_send_snac

; =============== S U B	R O U T	I N E =======================================


		public flap_connection_send_snac
flap_connection_send_snac proc near	; CODE XREF: aim_admin_getinfo+9Ep
					; aim_admin_setnick+CBp ...

var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_10		= dword	ptr -10h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= word ptr  0Ch
arg_C		= word ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h

		sub	esp, 3Ch
		movzx	eax, [esp+3Ch+arg_8]
		movzx	edx, [esp+3Ch+arg_C]
		mov	ecx, ds:__stack_chk_guard
		mov	[esp+3Ch+var_10], ecx
		xor	ecx, ecx
		mov	[esp+3Ch+var_24], 1
		mov	ecx, [esp+3Ch+arg_14]
		mov	[esp+3Ch+var_28], ecx
		mov	ecx, [esp+3Ch+arg_10]
		mov	[esp+3Ch+var_2C], ecx
		mov	[esp+3Ch+var_30], edx
		mov	[esp+3Ch+var_34], eax
		mov	eax, [esp+3Ch+arg_4]
		mov	[esp+3Ch+var_38], eax
		mov	eax, [esp+3Ch+arg_0]
		mov	[esp+3Ch+var_3C], eax
		call	flap_connection_send_snac_with_priority
		mov	eax, [esp+3Ch+var_10]
		xor	eax, ds:__stack_chk_guard
		jnz	short loc_688962F5
		add	esp, 3Ch
		retn
; ---------------------------------------------------------------------------

loc_688962F5:				; CODE XREF: flap_connection_send_snac+57j
		call	__stack_chk_fail
flap_connection_send_snac endp

; ---------------------------------------------------------------------------
		align 4

; =============== S U B	R O U T	I N E =======================================


sub_688962FC	proc near		; CODE XREF: sub_68896420+77p
					; sub_68896420+94p

var_5C		= dword	ptr -5Ch
var_58		= dword	ptr -58h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_20		= dword	ptr -20h
arg_0		= dword	ptr  4

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 4Ch
		mov	esi, eax
		mov	[esp+5Ch+var_38], ecx
		mov	ebp, [esp+5Ch+arg_0]
		mov	eax, ds:__stack_chk_guard
		mov	[esp+5Ch+var_20], eax
		xor	eax, eax
		mov	[esp+5Ch+var_34], edx
		jmp	loc_688963B4
; ---------------------------------------------------------------------------
		align 4

loc_68896324:				; CODE XREF: sub_688962FC+EDj
					; sub_688962FC+F8j
		mov	eax, [esp+5Ch+var_34]
		sub	eax, [ecx+24h]
		lea	eax, [eax+eax*4]
		lea	eax, [eax+eax*4]
		lea	eax, [eax+eax*4]
		mov	[esp+5Ch+var_30], eax
		mov	edi, [esp+5Ch+var_38]
		sub	edi, [ecx+28h]
		mov	eax, 10624DD3h
		imul	edi
		mov	[esp+5Ch+var_44], eax
		mov	[esp+5Ch+var_40], edx
		mov	eax, [esp+5Ch+var_40]
		sar	eax, 6
		sar	edi, 1Fh
		sub	eax, edi
		mov	edi, [esp+5Ch+var_30]
		lea	edx, [eax+edi*8]
		mov	eax, [ecx+4]
		dec	eax
		imul	eax, [ecx+18h]
		add	eax, edx
		xor	edx, edx
		div	dword ptr [ecx+4]
		mov	edx, [ecx+1Ch]
		cmp	eax, edx
		jbe	short loc_68896379
		mov	eax, edx

loc_68896379:				; CODE XREF: sub_688962FC+79j
		cmp	byte ptr [ecx+20h], 0
		jnz	short loc_688963FC
		cmp	[ecx+0Ch], eax
		jnb	short loc_688963FC
		mov	[ecx+18h], eax
		mov	edx, [esp+5Ch+var_34]
		mov	[ecx+24h], edx
		mov	edi, [esp+5Ch+var_38]
		mov	[ecx+28h], edi

loc_68896395:				; CODE XREF: sub_688962FC+FEj
		mov	eax, [ebx+4]
		mov	[esp+5Ch+var_58], eax
		mov	[esp+5Ch+var_5C], esi
		call	flap_connection_send
		mov	[esp+5Ch+var_5C], ebx
		call	g_free
		mov	[esp+5Ch+var_5C], ebp
		call	g_queue_pop_head

loc_688963B4:				; CODE XREF: sub_688962FC+20j
		mov	[esp+5Ch+var_5C], ebp
		call	g_queue_is_empty
		test	eax, eax
		jnz	short loc_68896414
		mov	[esp+5Ch+var_5C], ebp
		call	g_queue_peek_head
		mov	ebx, eax
		movzx	eax, word ptr [eax]
		shl	eax, 10h
		movzx	edx, word ptr [ebx+2]
		add	eax, edx
		mov	[esp+5Ch+var_58], eax
		mov	eax, [esi+70h]
		mov	[esp+5Ch+var_5C], eax
		call	g_hash_table_lookup
		mov	ecx, eax
		test	eax, eax
		jnz	loc_68896324
		mov	ecx, [esi+6Ch]
		test	ecx, ecx
		jnz	loc_68896324
		jmp	short loc_68896395
; ---------------------------------------------------------------------------

loc_688963FC:				; CODE XREF: sub_688962FC+81j
					; sub_688962FC+86j
		xor	eax, eax

loc_688963FE:				; CODE XREF: sub_688962FC+11Dj
		mov	edx, [esp+5Ch+var_20]
		xor	edx, ds:__stack_chk_guard
		jnz	short loc_6889641B
		add	esp, 4Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 4

loc_68896414:				; CODE XREF: sub_688962FC+C2j
		mov	eax, 1
		jmp	short loc_688963FE
; ---------------------------------------------------------------------------

loc_6889641B:				; CODE XREF: sub_688962FC+10Cj
		call	__stack_chk_fail
sub_688962FC	endp


; =============== S U B	R O U T	I N E =======================================


sub_68896420	proc near		; DATA XREF: flap_connection_send_snac_with_priority+280o

var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
arg_0		= dword	ptr  4

		push	ebx
		sub	esp, 38h
		mov	ebx, [esp+3Ch+arg_0]
		mov	eax, ds:__stack_chk_guard
		mov	[esp+3Ch+var_10], eax
		xor	eax, eax
		mov	[esp+3Ch+var_38], 0
		lea	eax, [esp+3Ch+var_18]
		mov	[esp+3Ch+var_3C], eax
		call	wpurple_gettimeofday
		mov	eax, [ebx+78h]
		test	eax, eax
		jz	loc_688964E8
		mov	edx, [eax+8]

loc_68896455:				; CODE XREF: sub_68896420+CAj
		mov	eax, [ebx+74h]
		test	eax, eax
		jz	loc_688964E0
		mov	eax, [eax+8]

loc_68896463:				; CODE XREF: sub_68896420+C2j
		mov	[esp+3Ch+var_2C], ebx
		mov	[esp+3Ch+var_30], edx
		mov	[esp+3Ch+var_34], eax
		mov	[esp+3Ch+var_38], offset aAttemptingToSe ; "Attempting to send %u queued SNACs and "...
		mov	[esp+3Ch+var_3C], offset aOscar_10 ; "oscar"
		call	purple_debug_info
		mov	eax, [ebx+74h]
		test	eax, eax
		jz	short loc_688964A0
		mov	[esp+3Ch+var_3C], eax
		mov	edx, [esp+3Ch+var_18]
		mov	ecx, [esp+3Ch+var_14]
		mov	eax, ebx
		call	sub_688962FC
		test	eax, eax
		jz	short loc_688964D8

loc_688964A0:				; CODE XREF: sub_68896420+68j
		mov	eax, [ebx+78h]
		test	eax, eax
		jz	short loc_688964BD
		mov	[esp+3Ch+var_3C], eax
		mov	edx, [esp+3Ch+var_18]
		mov	ecx, [esp+3Ch+var_14]
		mov	eax, ebx
		call	sub_688962FC
		test	eax, eax
		jz	short loc_688964D8

loc_688964BD:				; CODE XREF: sub_68896420+85j
		mov	dword ptr [ebx+7Ch], 0
		xor	eax, eax

loc_688964C6:				; CODE XREF: sub_68896420+BDj
		mov	edx, [esp+3Ch+var_10]
		xor	edx, ds:__stack_chk_guard
		jnz	short loc_688964EF
		add	esp, 38h
		pop	ebx
		retn
; ---------------------------------------------------------------------------
		align 4

loc_688964D8:				; CODE XREF: sub_68896420+7Ej
					; sub_68896420+9Bj
		mov	eax, 1
		jmp	short loc_688964C6
; ---------------------------------------------------------------------------
		align 10h

loc_688964E0:				; CODE XREF: sub_68896420+3Aj
		xor	eax, eax
		jmp	loc_68896463
; ---------------------------------------------------------------------------
		align 4

loc_688964E8:				; CODE XREF: sub_68896420+2Cj
		xor	edx, edx
		jmp	loc_68896455
; ---------------------------------------------------------------------------

loc_688964EF:				; CODE XREF: sub_68896420+B0j
		call	__stack_chk_fail
sub_68896420	endp

; Exported entry 199. flap_connection_send_version_with_cookie_and_clientinfo

; =============== S U B	R O U T	I N E =======================================


		public flap_connection_send_version_with_cookie_and_clientinfo
flap_connection_send_version_with_cookie_and_clientinfo	proc near
					; CODE XREF: sub_6889A890+19Ap

var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= word ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 3Ch
		mov	eax, [esp+4Ch+arg_4]
		mov	[esp+4Ch+var_34], eax
		mov	edx, [esp+4Ch+arg_C]
		mov	esi, [esp+4Ch+arg_10]
		mov	eax, [esp+4Ch+arg_14]
		mov	[esp+4Ch+var_30], eax
		movzx	ebx, [esp+4Ch+arg_8]
		mov	eax, ds:__stack_chk_guard
		mov	[esp+4Ch+var_20], eax
		xor	eax, eax
		mov	[esp+4Ch+var_24], 0
		lea	eax, [ebx+480h]
		mov	[esp+4Ch+var_44], eax
		mov	[esp+4Ch+var_48], 1
		mov	eax, [esp+4Ch+arg_0]
		mov	[esp+4Ch+var_4C], eax
		mov	[esp+4Ch+var_38], edx
		call	flap_frame_new
		mov	edi, eax
		lea	ebp, [eax+4]
		mov	[esp+4Ch+var_48], 1
		mov	[esp+4Ch+var_4C], ebp
		call	sub_68881E8C
		mov	edx, [esp+4Ch+var_38]
		mov	[esp+4Ch+var_40], edx
		mov	[esp+4Ch+var_44], ebx
		mov	[esp+4Ch+var_48], 6
		lea	ebx, [esp+4Ch+var_24]
		mov	[esp+4Ch+var_4C], ebx
		call	aim_tlvlist_add_raw
		mov	eax, [esi]
		test	eax, eax
		jz	loc_6889665C
		mov	[esp+4Ch+var_44], eax
		mov	[esp+4Ch+var_48], 3
		mov	[esp+4Ch+var_4C], ebx
		call	aim_tlvlist_add_str

loc_688965A0:				; CODE XREF: flap_connection_send_version_with_cookie_and_clientinfo+191j
		movzx	eax, word ptr [esi+6]
		mov	[esp+4Ch+var_44], eax
		mov	[esp+4Ch+var_48], 17h
		mov	[esp+4Ch+var_4C], ebx
		call	aim_tlvlist_add_16
		movzx	eax, word ptr [esi+8]
		mov	[esp+4Ch+var_44], eax
		mov	[esp+4Ch+var_48], 18h
		mov	[esp+4Ch+var_4C], ebx
		call	aim_tlvlist_add_16
		movzx	eax, word ptr [esi+0Ah]
		mov	[esp+4Ch+var_44], eax
		mov	[esp+4Ch+var_48], 19h
		mov	[esp+4Ch+var_4C], ebx
		call	aim_tlvlist_add_16
		movzx	eax, word ptr [esi+0Ch]
		mov	[esp+4Ch+var_44], eax
		mov	[esp+4Ch+var_48], 1Ah
		mov	[esp+4Ch+var_4C], ebx
		call	aim_tlvlist_add_16
		cmp	[esp+4Ch+var_30], 1
		sbb	eax, eax
		and	eax, 2
		inc	eax
		mov	[esp+4Ch+var_44], eax
		mov	[esp+4Ch+var_48], 4Ah
		mov	[esp+4Ch+var_4C], ebx
		call	aim_tlvlist_add_8
		mov	[esp+4Ch+var_48], ebx
		mov	[esp+4Ch+var_4C], ebp
		call	aim_tlvlist_write
		mov	eax, [esp+4Ch+var_24]
		mov	[esp+4Ch+var_4C], eax
		call	aim_tlvlist_free
		mov	[esp+4Ch+var_48], edi
		mov	eax, [esp+4Ch+var_34]
		mov	[esp+4Ch+var_4C], eax
		call	flap_connection_send
		mov	eax, [esp+4Ch+var_20]
		xor	eax, ds:__stack_chk_guard
		jnz	short loc_6889668A
		add	esp, 3Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 4

loc_6889665C:				; CODE XREF: flap_connection_send_version_with_cookie_and_clientinfo+92j
		call	oscar_get_clientstring
		mov	[esp+4Ch+var_44], eax
		mov	[esp+4Ch+var_48], 3
		mov	[esp+4Ch+var_4C], ebx
		mov	[esp+4Ch+var_38], eax
		call	aim_tlvlist_add_str
		mov	edx, [esp+4Ch+var_38]
		mov	[esp+4Ch+var_4C], edx
		call	g_free
		jmp	loc_688965A0
; ---------------------------------------------------------------------------

loc_6889668A:				; CODE XREF: flap_connection_send_version_with_cookie_and_clientinfo+15Dj
		call	__stack_chk_fail
flap_connection_send_version_with_cookie_and_clientinfo	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 198. flap_connection_send_version_with_cookie

; =============== S U B	R O U T	I N E =======================================


		public flap_connection_send_version_with_cookie
flap_connection_send_version_with_cookie proc near ; CODE XREF:	sub_6889A890+DAp

var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_30		= dword	ptr -30h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= word ptr  0Ch
arg_C		= dword	ptr  10h

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 3Ch
		mov	ebp, [esp+4Ch+arg_4]
		mov	edx, [esp+4Ch+arg_C]
		movzx	edi, [esp+4Ch+arg_8]
		mov	eax, ds:__stack_chk_guard
		mov	[esp+4Ch+var_20], eax
		xor	eax, eax
		mov	[esp+4Ch+var_24], 0
		lea	eax, [edi+8]
		mov	[esp+4Ch+var_44], eax
		mov	[esp+4Ch+var_48], 1
		mov	eax, [esp+4Ch+arg_0]
		mov	[esp+4Ch+var_4C], eax
		mov	[esp+4Ch+var_30], edx
		call	flap_frame_new
		mov	ebx, eax
		lea	esi, [eax+4]
		mov	[esp+4Ch+var_48], 1
		mov	[esp+4Ch+var_4C], esi
		call	sub_68881E8C
		mov	edx, [esp+4Ch+var_30]
		mov	[esp+4Ch+var_40], edx
		mov	[esp+4Ch+var_44], edi
		mov	[esp+4Ch+var_48], 6
		lea	edi, [esp+4Ch+var_24]
		mov	[esp+4Ch+var_4C], edi
		call	aim_tlvlist_add_raw
		mov	[esp+4Ch+var_48], edi
		mov	[esp+4Ch+var_4C], esi
		call	aim_tlvlist_write
		mov	eax, [esp+4Ch+var_24]
		mov	[esp+4Ch+var_4C], eax
		call	aim_tlvlist_free
		mov	[esp+4Ch+var_48], ebx
		mov	[esp+4Ch+var_4C], ebp
		call	flap_connection_send
		mov	eax, [esp+4Ch+var_20]
		xor	eax, ds:__stack_chk_guard
		jnz	short loc_68896743
		add	esp, 3Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_68896743:				; CODE XREF: flap_connection_send_version_with_cookie+A9j
		call	__stack_chk_fail
flap_connection_send_version_with_cookie endp

; Exported entry 197. flap_connection_send_version

; =============== S U B	R O U T	I N E =======================================


		public flap_connection_send_version
flap_connection_send_version proc near	; CODE XREF: sub_6889A890+1D7p

var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_10		= dword	ptr -10h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	esi
		push	ebx
		sub	esp, 24h
		mov	esi, [esp+2Ch+arg_4]
		mov	eax, ds:__stack_chk_guard
		mov	[esp+2Ch+var_10], eax
		xor	eax, eax
		mov	[esp+2Ch+var_24], 4
		mov	[esp+2Ch+var_28], 1
		mov	eax, [esp+2Ch+arg_0]
		mov	[esp+2Ch+var_2C], eax
		call	flap_frame_new
		mov	ebx, eax
		mov	[esp+2Ch+var_28], 1
		lea	eax, [eax+4]
		mov	[esp+2Ch+var_2C], eax
		call	sub_68881E8C
		mov	eax, [esp+2Ch+var_10]
		xor	eax, ds:__stack_chk_guard
		jnz	short loc_688967AB
		mov	[esp+2Ch+arg_4], ebx
		mov	[esp+2Ch+arg_0], esi
		add	esp, 24h
		pop	ebx
		pop	esi
		jmp	flap_connection_send
; ---------------------------------------------------------------------------

loc_688967AB:				; CODE XREF: flap_connection_send_version+4Fj
		call	__stack_chk_fail
flap_connection_send_version endp


; =============== S U B	R O U T	I N E =======================================


sub_688967B0	proc near		; DATA XREF: misc_modfirst+3Fo

var_5C		= dword	ptr -5Ch
var_58		= dword	ptr -58h
var_54		= dword	ptr -54h
var_50		= dword	ptr -50h
var_4C		= dword	ptr -4Ch
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_20		= dword	ptr -20h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 4Ch
		mov	esi, [esp+5Ch+arg_0]
		mov	edi, [esp+5Ch+arg_4]
		mov	ecx, [esp+5Ch+arg_C]
		mov	ebx, [esp+5Ch+arg_10]
		mov	ebp, [esp+5Ch+arg_14]
		mov	eax, ds:__stack_chk_guard
		mov	[esp+5Ch+var_20], eax
		xor	eax, eax
		movzx	eax, word ptr [ebx+2]
		cmp	ax, 1
		jz	short loc_68896844
		cmp	dword ptr [ebx], 0FFFFFFFFh
		jz	short loc_68896800

loc_688967E5:				; CODE XREF: sub_688967B0+6Dj
		xor	eax, eax

loc_688967E7:				; CODE XREF: sub_688967B0+10Aj
					; sub_688967B0+133j
		mov	ecx, [esp+5Ch+var_20]
		xor	ecx, ds:__stack_chk_guard
		jnz	loc_68896904
		add	esp, 4Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_68896800:				; CODE XREF: sub_688967B0+33j
		mov	[esp+5Ch+var_54], eax
		movzx	eax, word ptr [ebx]
		mov	[esp+5Ch+var_58], eax
		mov	[esp+5Ch+var_5C], esi
		mov	[esp+5Ch+var_34], ecx
		call	aim_callhandler
		test	eax, eax
		mov	ecx, [esp+5Ch+var_34]
		jz	short loc_688967E5
		mov	edx, [esp+5Ch+var_20]
		xor	edx, ds:__stack_chk_guard
		jnz	loc_68896904
		mov	[esp+5Ch+arg_8], ecx
		mov	[esp+5Ch+arg_4], edi
		mov	[esp+5Ch+arg_0], esi
		add	esp, 4Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		jmp	eax
; ---------------------------------------------------------------------------

loc_68896844:				; CODE XREF: sub_688967B0+2Ej
		mov	eax, [ebx+8]
		mov	[esp+5Ch+var_58], eax
		mov	[esp+5Ch+var_5C], esi
		mov	[esp+5Ch+var_34], ecx
		call	aim_remsnac
		mov	[esp+5Ch+var_30], eax
		mov	[esp+5Ch+var_5C], ebp
		call	sub_68881818
		test	eax, eax
		mov	ecx, [esp+5Ch+var_34]
		jnz	short loc_688968E8
		xor	ebp, ebp

loc_6889686D:				; CODE XREF: sub_688967B0+147j
		movzx	eax, word ptr [ebx+2]
		mov	[esp+5Ch+var_54], eax
		movzx	eax, word ptr [ebx]
		mov	[esp+5Ch+var_58], eax
		mov	[esp+5Ch+var_5C], esi
		mov	[esp+5Ch+var_34], ecx
		call	aim_callhandler
		test	eax, eax
		mov	ecx, [esp+5Ch+var_34]
		jz	short loc_688968FC
		mov	ebx, [esp+5Ch+var_30]
		test	ebx, ebx
		jz	short loc_68896900
		mov	edx, [esp+5Ch+var_30]
		mov	ebx, [edx+0Ch]

loc_6889689F:				; CODE XREF: sub_688967B0+152j
		mov	[esp+5Ch+var_4C], ebx
		mov	[esp+5Ch+var_50], ebp
		mov	[esp+5Ch+var_54], ecx
		mov	[esp+5Ch+var_58], edi
		mov	[esp+5Ch+var_5C], esi
		call	eax

loc_688968B4:				; CODE XREF: sub_688967B0+14Ej
		mov	edx, [esp+5Ch+var_30]
		test	edx, edx
		jz	loc_688967E7
		mov	ecx, [esp+5Ch+var_30]
		mov	edx, [ecx+0Ch]
		mov	[esp+5Ch+var_5C], edx
		mov	[esp+5Ch+var_34], eax
		call	g_free
		mov	edx, [esp+5Ch+var_30]
		mov	[esp+5Ch+var_5C], edx
		call	g_free
		mov	eax, [esp+5Ch+var_34]
		jmp	loc_688967E7
; ---------------------------------------------------------------------------

loc_688968E8:				; CODE XREF: sub_688967B0+B9j
		mov	[esp+5Ch+var_5C], ebp
		call	sub_688819F0
		movzx	ebp, ax
		mov	ecx, [esp+5Ch+var_34]
		jmp	loc_6889686D
; ---------------------------------------------------------------------------

loc_688968FC:				; CODE XREF: sub_688967B0+DEj
		xor	eax, eax
		jmp	short loc_688968B4
; ---------------------------------------------------------------------------

loc_68896900:				; CODE XREF: sub_688967B0+E6j
		xor	ebx, ebx
		jmp	short loc_6889689F
; ---------------------------------------------------------------------------

loc_68896904:				; CODE XREF: sub_688967B0+41j
					; sub_688967B0+79j
		call	__stack_chk_fail
sub_688967B0	endp

; ---------------------------------------------------------------------------
		align 4
; Exported entry  31. aim_genericreq_n

; =============== S U B	R O U T	I N E =======================================


		public aim_genericreq_n
aim_genericreq_n proc near		; CODE XREF: aim_admin_reqconfirm+2Dp
					; aim_ssi_enable+42p ...

var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_10		= dword	ptr -10h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= word ptr  0Ch
arg_C		= word ptr  10h

		sub	esp, 3Ch
		movzx	eax, [esp+3Ch+arg_8]
		movzx	edx, [esp+3Ch+arg_C]
		mov	ecx, ds:__stack_chk_guard
		mov	[esp+3Ch+var_10], ecx
		xor	ecx, ecx
		mov	[esp+3Ch+var_28], 0
		mov	[esp+3Ch+var_2C], 0
		mov	[esp+3Ch+var_30], edx
		mov	[esp+3Ch+var_34], eax
		mov	eax, [esp+3Ch+arg_4]
		mov	[esp+3Ch+var_38], eax
		mov	eax, [esp+3Ch+arg_0]
		mov	[esp+3Ch+var_3C], eax
		call	flap_connection_send_snac
		mov	eax, [esp+3Ch+var_10]
		xor	eax, ds:__stack_chk_guard
		jnz	short loc_68896961
		add	esp, 3Ch
		retn
; ---------------------------------------------------------------------------

loc_68896961:				; CODE XREF: aim_genericreq_n+4Fj
		call	__stack_chk_fail
aim_genericreq_n endp

; ---------------------------------------------------------------------------
		align 4
; Exported entry  32. aim_genericreq_n_snacid

; =============== S U B	R O U T	I N E =======================================


		public aim_genericreq_n_snacid
aim_genericreq_n_snacid	proc near	; CODE XREF: aim_bos_reqrights+2Dp
					; aim_buddylist_reqrights+2Dp ...

var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_20		= dword	ptr -20h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= word ptr  0Ch
arg_C		= word ptr  10h

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 3Ch
		mov	ebx, [esp+4Ch+arg_0]
		mov	ebp, [esp+4Ch+arg_4]
		movzx	esi, [esp+4Ch+arg_8]
		movzx	edi, [esp+4Ch+arg_C]
		mov	eax, ds:__stack_chk_guard
		mov	[esp+4Ch+var_20], eax
		xor	eax, eax
		mov	[esp+4Ch+var_38], 0
		mov	[esp+4Ch+var_3C], 0
		mov	[esp+4Ch+var_40], 0
		mov	[esp+4Ch+var_44], edi
		mov	[esp+4Ch+var_48], esi
		mov	[esp+4Ch+var_4C], ebx
		call	aim_cachesnac
		mov	[esp+4Ch+var_38], 0
		mov	[esp+4Ch+var_3C], eax
		mov	[esp+4Ch+var_40], edi
		mov	[esp+4Ch+var_44], esi
		mov	[esp+4Ch+var_48], ebp
		mov	[esp+4Ch+var_4C], ebx
		call	flap_connection_send_snac
		mov	eax, [esp+4Ch+var_20]
		xor	eax, ds:__stack_chk_guard
		jnz	short loc_688969E8
		add	esp, 3Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_688969E8:				; CODE XREF: aim_genericreq_n_snacid+76j
		call	__stack_chk_fail
aim_genericreq_n_snacid	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  30. aim_genericreq_l

; =============== S U B	R O U T	I N E =======================================


		public aim_genericreq_l
aim_genericreq_l proc near		; CODE XREF: aim_srv_setidle+4Ep

var_5C		= dword	ptr -5Ch
var_58		= dword	ptr -58h
var_54		= dword	ptr -54h
var_50		= dword	ptr -50h
var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= byte ptr -2Ch
var_20		= dword	ptr -20h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= word ptr  0Ch
arg_C		= word ptr  10h
arg_10		= dword	ptr  14h

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 4Ch
		mov	esi, [esp+5Ch+arg_0]
		mov	ecx, [esp+5Ch+arg_4]
		mov	edx, [esp+5Ch+arg_10]
		movzx	edi, [esp+5Ch+arg_8]
		movzx	ebp, [esp+5Ch+arg_C]
		mov	eax, ds:__stack_chk_guard
		mov	[esp+5Ch+var_20], eax
		xor	eax, eax
		test	edx, edx
		jz	loc_68896ABC
		mov	[esp+5Ch+var_58], 4
		lea	ebx, [esp+5Ch+var_2C]
		mov	[esp+5Ch+var_5C], ebx
		mov	[esp+5Ch+var_34], edx
		mov	[esp+5Ch+var_38], ecx
		call	sub_68881748
		mov	[esp+5Ch+var_48], 0
		mov	[esp+5Ch+var_4C], 0
		mov	[esp+5Ch+var_50], 0
		mov	[esp+5Ch+var_54], ebp
		mov	[esp+5Ch+var_58], edi
		mov	[esp+5Ch+var_5C], esi
		call	aim_cachesnac
		mov	[esp+5Ch+var_30], eax
		mov	edx, [esp+5Ch+var_34]
		mov	eax, [edx]
		mov	[esp+5Ch+var_58], eax
		mov	[esp+5Ch+var_5C], ebx
		call	sub_68881E8C
		mov	[esp+5Ch+var_48], ebx
		mov	eax, [esp+5Ch+var_30]
		mov	[esp+5Ch+var_4C], eax
		mov	[esp+5Ch+var_50], ebp
		mov	[esp+5Ch+var_54], edi
		mov	ecx, [esp+5Ch+var_38]
		mov	[esp+5Ch+var_58], ecx
		mov	[esp+5Ch+var_5C], esi
		call	flap_connection_send_snac
		mov	[esp+5Ch+var_5C], ebx
		call	sub_688817E4

loc_68896AA6:				; CODE XREF: aim_genericreq_l+E0j
		mov	eax, [esp+5Ch+var_20]
		xor	eax, ds:__stack_chk_guard
		jnz	short loc_68896AD2
		add	esp, 4Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 4

loc_68896ABC:				; CODE XREF: aim_genericreq_l+2Aj
		mov	[esp+5Ch+var_50], ebp
		mov	[esp+5Ch+var_54], edi
		mov	[esp+5Ch+var_58], ecx
		mov	[esp+5Ch+var_5C], esi
		call	aim_genericreq_n
		jmp	short loc_68896AA6
; ---------------------------------------------------------------------------

loc_68896AD2:				; CODE XREF: aim_genericreq_l+C0j
		call	__stack_chk_fail
aim_genericreq_l endp

; ---------------------------------------------------------------------------
		align 4
; Exported entry 208. misc_modfirst

; =============== S U B	R O U T	I N E =======================================


		public misc_modfirst
misc_modfirst	proc near		; DATA XREF: oscar_data_new+82o

Dest		= dword	ptr -2Ch
Source		= dword	ptr -28h
Count		= dword	ptr -24h
var_10		= dword	ptr -10h
arg_4		= dword	ptr  8

		push	ebx
		sub	esp, 28h
		mov	ebx, [esp+2Ch+arg_4]
		mov	eax, ds:__stack_chk_guard
		mov	[esp+2Ch+var_10], eax
		xor	eax, eax
		mov	word ptr [ebx],	0FFFFh
		mov	word ptr [ebx+2], 0
		mov	word ptr [ebx+8], 1
		mov	[esp+2Ch+Count], 11h ; Count
		mov	[esp+2Ch+Source], offset aMisc ; "misc"
		lea	eax, [ebx+0Ah]
		mov	[esp+2Ch+Dest],	eax ; Dest
		call	strncpy
		mov	dword ptr [ebx+1Ch], offset sub_688967B0
		xor	eax, eax
		mov	edx, [esp+2Ch+var_10]
		xor	edx, ds:__stack_chk_guard
		jnz	short loc_68896B31
		add	esp, 28h
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_68896B31:				; CODE XREF: misc_modfirst+52j
		call	__stack_chk_fail
misc_modfirst	endp

; ---------------------------------------------------------------------------
		align 4
; Exported entry 143. aim_uncachecookie

; =============== S U B	R O U T	I N E =======================================


; int __cdecl aim_uncachecookie(int, void *, int)
		public aim_uncachecookie
aim_uncachecookie proc near		; CODE XREF: sub_68886554+D5p

Buf1		= dword	ptr -3Ch
Buf2		= dword	ptr -38h
Size		= dword	ptr -34h
var_20		= dword	ptr -20h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 2Ch
		mov	edi, [esp+3Ch+arg_0]
		mov	ebp, [esp+3Ch+arg_4]
		mov	esi, [esp+3Ch+arg_8]
		mov	eax, ds:__stack_chk_guard
		mov	[esp+3Ch+var_20], eax
		xor	eax, eax
		test	ebp, ebp
		jz	short loc_68896BAE
		mov	ebx, [edi+0B4h]
		test	ebx, ebx
		jz	short loc_68896B98
		add	edi, 0B4h
		jmp	short loc_68896B76
; ---------------------------------------------------------------------------

loc_68896B6C:				; CODE XREF: aim_uncachecookie+41j
					; aim_uncachecookie+59j
		lea	edi, [ebx+14h]
		mov	ebx, [ebx+14h]
		test	ebx, ebx
		jz	short loc_68896B98

loc_68896B76:				; CODE XREF: aim_uncachecookie+32j
		cmp	[ebx+8], esi
		jnz	short loc_68896B6C
		mov	[esp+3Ch+Size],	8 ; Size
		mov	[esp+3Ch+Buf2],	ebp ; Buf2
		mov	[esp+3Ch+Buf1],	ebx ; Buf1
		call	memcmp
		test	eax, eax
		jnz	short loc_68896B6C
		mov	eax, [ebx+14h]
		mov	[edi], eax

loc_68896B98:				; CODE XREF: aim_uncachecookie+2Aj
					; aim_uncachecookie+3Cj ...
		mov	eax, ebx
		mov	edx, [esp+3Ch+var_20]
		xor	edx, ds:__stack_chk_guard
		jnz	short loc_68896BB2
		add	esp, 2Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_68896BAE:				; CODE XREF: aim_uncachecookie+20j
		xor	ebx, ebx
		jmp	short loc_68896B98
; ---------------------------------------------------------------------------

loc_68896BB2:				; CODE XREF: aim_uncachecookie+6Cj
		call	__stack_chk_fail
aim_uncachecookie endp

; ---------------------------------------------------------------------------
		align 4
; Exported entry  64. aim_mkcookie

; =============== S U B	R O U T	I N E =======================================


		public aim_mkcookie
aim_mkcookie	proc near		; CODE XREF: aim_chat_send_im+10Dp
					; aim_im_sendch2_chatinvite+185p

var_2C		= dword	ptr -2Ch
var_10		= dword	ptr -10h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	edi
		push	esi
		push	ebx
		sub	esp, 20h
		mov	ebx, [esp+2Ch+arg_0]
		mov	esi, [esp+2Ch+arg_4]
		mov	edi, [esp+2Ch+arg_8]
		mov	eax, ds:__stack_chk_guard
		mov	[esp+2Ch+var_10], eax
		xor	eax, eax
		test	ebx, ebx
		jz	short loc_68896C08
		mov	[esp+2Ch+var_2C], 18h
		call	g_malloc0
		mov	[eax+0Ch], edi
		mov	[eax+8], esi
		mov	edx, [ebx]
		mov	[eax], edx
		mov	edx, [ebx+4]
		mov	[eax+4], edx

loc_68896BF5:				; CODE XREF: aim_mkcookie+52j
		mov	edx, [esp+2Ch+var_10]
		xor	edx, ds:__stack_chk_guard
		jnz	short loc_68896C0C
		add	esp, 20h
		pop	ebx
		pop	esi
		pop	edi
		retn
; ---------------------------------------------------------------------------

loc_68896C08:				; CODE XREF: aim_mkcookie+1Fj
		xor	eax, eax
		jmp	short loc_68896BF5
; ---------------------------------------------------------------------------

loc_68896C0C:				; CODE XREF: aim_mkcookie+47j
		call	__stack_chk_fail
aim_mkcookie	endp

; ---------------------------------------------------------------------------
		align 4
; Exported entry  25. aim_checkcookie

; =============== S U B	R O U T	I N E =======================================


; int __cdecl aim_checkcookie(int, void	*, int)
		public aim_checkcookie
aim_checkcookie	proc near		; CODE XREF: aim_cachecookie+2Fp

Buf1		= dword	ptr -2Ch
Buf2		= dword	ptr -28h
Size		= dword	ptr -24h
var_10		= dword	ptr -10h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	edi
		push	esi
		push	ebx
		sub	esp, 20h
		mov	edi, [esp+2Ch+arg_4]
		mov	esi, [esp+2Ch+arg_8]
		mov	eax, ds:__stack_chk_guard
		mov	[esp+2Ch+var_10], eax
		xor	eax, eax
		mov	eax, [esp+2Ch+arg_0]
		mov	ebx, [eax+0B4h]
		test	ebx, ebx
		jnz	short loc_68896C47
		jmp	short loc_68896C64
; ---------------------------------------------------------------------------
		align 10h

loc_68896C40:				; CODE XREF: aim_checkcookie+36j
					; aim_checkcookie+4Ej
		mov	ebx, [ebx+14h]
		test	ebx, ebx
		jz	short loc_68896C64

loc_68896C47:				; CODE XREF: aim_checkcookie+25j
		cmp	[ebx+8], esi
		jnz	short loc_68896C40
		mov	[esp+2Ch+Size],	8 ; Size
		mov	[esp+2Ch+Buf2],	edi ; Buf2
		mov	[esp+2Ch+Buf1],	ebx ; Buf1
		call	memcmp
		test	eax, eax
		jnz	short loc_68896C40

loc_68896C64:				; CODE XREF: aim_checkcookie+27j
					; aim_checkcookie+31j
		mov	eax, ebx
		mov	edx, [esp+2Ch+var_10]
		xor	edx, ds:__stack_chk_guard
		jnz	short loc_68896C79
		add	esp, 20h
		pop	ebx
		pop	esi
		pop	edi
		retn
; ---------------------------------------------------------------------------

loc_68896C79:				; CODE XREF: aim_checkcookie+5Cj
		call	__stack_chk_fail
aim_checkcookie	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  27. aim_cookie_free

; =============== S U B	R O U T	I N E =======================================


		public aim_cookie_free
aim_cookie_free	proc near		; CODE XREF: aim_cachecookie+45p

var_2C		= dword	ptr -2Ch
var_10		= dword	ptr -10h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	ebx
		sub	esp, 28h
		mov	eax, [esp+2Ch+arg_0]
		mov	ebx, [esp+2Ch+arg_4]
		mov	edx, ds:__stack_chk_guard
		mov	[esp+2Ch+var_10], edx
		xor	edx, edx
		test	eax, eax
		jz	short loc_68896CEB
		test	ebx, ebx
		jz	short loc_68896CEB
		lea	edx, [eax+0B4h]
		mov	eax, [eax+0B4h]

loc_68896CAC:				; CODE XREF: aim_cookie_free+69j
		test	eax, eax
		jz	short loc_68896CBE

loc_68896CB0:				; CODE XREF: aim_cookie_free+3Cj
		cmp	ebx, eax
		jz	short loc_68896CE4
		lea	edx, [eax+14h]
		mov	eax, [eax+14h]
		test	eax, eax
		jnz	short loc_68896CB0

loc_68896CBE:				; CODE XREF: aim_cookie_free+2Ej
		mov	eax, [ebx+0Ch]
		mov	[esp+2Ch+var_2C], eax
		call	g_free
		mov	[esp+2Ch+var_2C], ebx
		call	g_free
		xor	eax, eax

loc_68896CD3:				; CODE XREF: aim_cookie_free+70j
		mov	edx, [esp+2Ch+var_10]
		xor	edx, ds:__stack_chk_guard
		jnz	short loc_68896CF2
		add	esp, 28h
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_68896CE4:				; CODE XREF: aim_cookie_free+32j
		mov	eax, [ebx+14h]
		mov	[edx], eax
		jmp	short loc_68896CAC
; ---------------------------------------------------------------------------

loc_68896CEB:				; CODE XREF: aim_cookie_free+1Aj
					; aim_cookie_free+1Ej
		mov	eax, 0FFFFFFEAh
		jmp	short loc_68896CD3
; ---------------------------------------------------------------------------

loc_68896CF2:				; CODE XREF: aim_cookie_free+5Dj
		call	__stack_chk_fail
aim_cookie_free	endp

; ---------------------------------------------------------------------------
		align 4
; Exported entry  17. aim_cachecookie

; =============== S U B	R O U T	I N E =======================================


; int __cdecl aim_cachecookie(int, void	*)
		public aim_cachecookie
aim_cachecookie	proc near		; CODE XREF: aim_chat_send_im+120p
					; aim_im_sendch2_chatinvite+199p

Time		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_10		= dword	ptr -10h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	edi
		push	esi
		push	ebx
		sub	esp, 20h
		mov	esi, [esp+2Ch+arg_0]
		mov	ebx, [esp+2Ch+arg_4]
		mov	eax, ds:__stack_chk_guard
		mov	[esp+2Ch+var_10], eax
		xor	eax, eax
		test	esi, esi
		jz	short loc_68896D90
		test	ebx, ebx
		jz	short loc_68896D90
		mov	eax, [ebx+8]
		mov	[esp+2Ch+var_24], eax ;	int
		mov	[esp+2Ch+var_28], ebx ;	void *
		mov	[esp+2Ch+Time],	esi ; int
		call	aim_checkcookie
		mov	edi, eax
		cmp	eax, ebx
		jz	short loc_68896D78
		test	eax, eax
		jz	short loc_68896D42
		mov	[esp+2Ch+var_28], eax
		mov	[esp+2Ch+Time],	esi
		call	aim_cookie_free

loc_68896D42:				; CODE XREF: aim_cachecookie+3Cj
		mov	[esp+2Ch+Time],	0 ; Time
		call	time
		mov	[ebx+10h], eax
		mov	eax, [esi+0B4h]
		mov	[ebx+14h], eax
		mov	[esi+0B4h], ebx
		xor	eax, eax

loc_68896D62:				; CODE XREF: aim_cachecookie+94j
					; aim_cachecookie+9Dj
		mov	edx, [esp+2Ch+var_10]
		xor	edx, ds:__stack_chk_guard
		jnz	short loc_68896D97
		add	esp, 20h
		pop	ebx
		pop	esi
		pop	edi
		retn
; ---------------------------------------------------------------------------
		align 4

loc_68896D78:				; CODE XREF: aim_cachecookie+38j
		mov	[esp+2Ch+Time],	0 ; Time
		call	time
		mov	[edi+10h], eax
		mov	eax, 1
		jmp	short loc_68896D62
; ---------------------------------------------------------------------------
		align 10h

loc_68896D90:				; CODE XREF: aim_cachecookie+1Bj
					; aim_cachecookie+1Fj
		mov	eax, 0FFFFFFEAh
		jmp	short loc_68896D62
; ---------------------------------------------------------------------------

loc_68896D97:				; CODE XREF: aim_cachecookie+74j
		call	__stack_chk_fail
aim_cachecookie	endp


; =============== S U B	R O U T	I N E =======================================


sub_68896D9C	proc near		; CODE XREF: peer_odc_send_cookie+32p
					; peer_odc_send_typing+44p ...

var_5C		= dword	ptr -5Ch
var_58		= dword	ptr -58h
var_54		= dword	ptr -54h
var_50		= dword	ptr -50h
var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_30		= dword	ptr -30h
var_2C		= byte ptr -2Ch
var_20		= dword	ptr -20h

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 4Ch
		mov	ebp, eax
		mov	ebx, edx
		mov	eax, ds:__stack_chk_guard
		mov	[esp+5Ch+var_20], eax
		xor	eax, eax
		mov	eax, [edx+34h]
		mov	[esp+5Ch+var_48], eax
		movzx	eax, word ptr [edx+0Eh]
		mov	[esp+5Ch+var_4C], eax
		movzx	eax, word ptr [edx]
		mov	[esp+5Ch+var_50], eax
		mov	eax, [ebp+10h]
		mov	[esp+5Ch+var_54], eax
		mov	[esp+5Ch+var_58], offset aOutgoingOdcFra ; "Outgoing ODC frame to %s with type=0x%0"...
		mov	[esp+5Ch+var_5C], offset aOscar_11 ; "oscar"
		call	purple_debug_info
		mov	eax, [ebp+0]
		mov	eax, [eax+68h]
		mov	[esp+5Ch+var_5C], eax
		call	purple_connection_get_account
		mov	[esp+5Ch+var_5C], eax
		call	purple_account_get_username
		mov	esi, eax
		xor	eax, eax
		mov	ecx, 0FFFFFFFFh
		mov	edi, esi
		repne scasb
		not	ecx
		dec	ecx
		lea	edx, [ebx+10h]
		mov	edi, edx
		rep movsb
		lea	edi, [ebx+4]
		mov	eax, [ebp+18h]
		mov	[ebx+4], eax
		mov	eax, [ebp+1Ch]
		mov	[ebx+8], eax
		mov	eax, [ebx+34h]
		add	eax, 4Ch
		mov	[esp+5Ch+var_58], eax
		lea	esi, [esp+5Ch+var_2C]
		mov	[esp+5Ch+var_5C], esi
		mov	[esp+5Ch+var_30], edx
		call	sub_68881748
		mov	[esp+5Ch+var_54], 4
		lea	eax, [ebp+14h]
		mov	[esp+5Ch+var_58], eax
		mov	[esp+5Ch+var_5C], esi
		call	sub_688820A0
		mov	[esp+5Ch+var_58], 4Ch
		mov	[esp+5Ch+var_5C], esi
		call	sub_68881E0C
		movzx	eax, word ptr [ebx]
		mov	[esp+5Ch+var_58], eax
		mov	[esp+5Ch+var_5C], esi
		call	sub_68881E0C
		movzx	eax, word ptr [ebx+2]
		mov	[esp+5Ch+var_58], eax
		mov	[esp+5Ch+var_5C], esi
		call	sub_68881E0C
		mov	[esp+5Ch+var_58], 0
		mov	[esp+5Ch+var_5C], esi
		call	sub_68881E0C
		mov	[esp+5Ch+var_54], 8
		mov	[esp+5Ch+var_58], edi
		mov	[esp+5Ch+var_5C], esi
		call	sub_688820A0
		mov	[esp+5Ch+var_58], 0
		mov	[esp+5Ch+var_5C], esi
		call	sub_68881E0C
		mov	[esp+5Ch+var_58], 0
		mov	[esp+5Ch+var_5C], esi
		call	sub_68881E0C
		mov	[esp+5Ch+var_58], 0
		mov	[esp+5Ch+var_5C], esi
		call	sub_68881E0C
		mov	[esp+5Ch+var_58], 0
		mov	[esp+5Ch+var_5C], esi
		call	sub_68881E0C
		mov	eax, [ebx+34h]
		mov	[esp+5Ch+var_58], eax
		mov	[esp+5Ch+var_5C], esi
		call	sub_68881E8C
		movzx	eax, word ptr [ebx+0Ch]
		mov	[esp+5Ch+var_58], eax
		mov	[esp+5Ch+var_5C], esi
		call	sub_68881E0C
		mov	[esp+5Ch+var_58], 0
		mov	[esp+5Ch+var_5C], esi
		call	sub_68881E0C
		mov	[esp+5Ch+var_58], 0
		mov	[esp+5Ch+var_5C], esi
		call	sub_68881E0C
		movzx	eax, word ptr [ebx+0Eh]
		mov	[esp+5Ch+var_58], eax
		mov	[esp+5Ch+var_5C], esi
		call	sub_68881E0C
		mov	[esp+5Ch+var_58], 0
		mov	[esp+5Ch+var_5C], esi
		call	sub_68881E0C
		mov	[esp+5Ch+var_58], 0
		mov	[esp+5Ch+var_5C], esi
		call	sub_68881E0C
		mov	[esp+5Ch+var_54], 20h
		mov	edx, [esp+5Ch+var_30]
		mov	[esp+5Ch+var_58], edx
		mov	[esp+5Ch+var_5C], esi
		call	sub_688820A0
		mov	eax, [ebx+34h]
		mov	[esp+5Ch+var_54], eax
		mov	eax, [ebx+30h]
		mov	[esp+5Ch+var_58], eax
		mov	[esp+5Ch+var_5C], esi
		call	sub_688820A0
		mov	[esp+5Ch+var_58], esi
		mov	[esp+5Ch+var_5C], ebp
		call	peer_connection_send
		mov	[esp+5Ch+var_5C], esi
		call	sub_688817E4
		mov	eax, [esp+5Ch+var_20]
		xor	eax, ds:__stack_chk_guard
		jnz	short loc_68896FA8
		add	esp, 4Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_68896FA8:				; CODE XREF: sub_68896D9C+202j
		call	__stack_chk_fail
sub_68896D9C	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_68896FB0	proc near		; DATA XREF: peer_odc_recv_frame+380o

Str		= dword	ptr -9Ch
var_98		= dword	ptr -98h
var_94		= dword	ptr -94h
var_90		= dword	ptr -90h
var_8C		= dword	ptr -8Ch
var_70		= dword	ptr -70h
var_6C		= dword	ptr -6Ch
var_68		= dword	ptr -68h
var_64		= dword	ptr -64h
var_60		= dword	ptr -60h
var_5C		= dword	ptr -5Ch
var_58		= dword	ptr -58h
var_54		= dword	ptr -54h
var_50		= dword	ptr -50h
var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_40		= word ptr -40h
var_3E		= word ptr -3Eh
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= byte ptr -24h
var_20		= dword	ptr -20h
arg_0		= dword	ptr  4

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 8Ch
		mov	edx, [esp+9Ch+arg_0]
		mov	[esp+9Ch+var_64], edx
		mov	ecx, ds:__stack_chk_guard
		mov	[esp+9Ch+var_20], ecx
		xor	ecx, ecx
		mov	edx, [edx+3Ch]
		mov	[esp+9Ch+var_68], edx
		mov	ecx, edx
		mov	edx, [edx+38h]
		mov	[esp+9Ch+var_90], 0
		mov	eax, [ecx+34h]
		sub	eax, edx
		mov	[esp+9Ch+var_94], eax
		add	edx, [ecx+30h]
		mov	[esp+9Ch+var_98], edx
		mov	edx, [esp+9Ch+var_64]
		mov	eax, [edx+54h]
		mov	[esp+9Ch+Str], eax
		call	wpurple_recv
		cmp	eax, 0
		jz	loc_68897374
		jl	loc_68897504
		mov	ecx, [esp+9Ch+var_68]
		add	eax, [ecx+38h]
		mov	[ecx+38h], eax
		mov	edx, [ecx+34h]
		cmp	eax, edx
		jnb	short loc_68897040

loc_68897024:				; CODE XREF: sub_68896FB0+3E0j
					; sub_68896FB0+54Dj ...
		mov	ecx, [esp+9Ch+var_20]
		xor	ecx, ds:__stack_chk_guard
		jnz	loc_688975E9
		add	esp, 8Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_68897040:				; CODE XREF: sub_68896FB0+72j
		mov	eax, [ecx+30h]
		mov	byte ptr [eax+edx], 0
		mov	eax, ecx
		add	eax, 30h
		mov	[esp+9Ch+Str], eax
		call	sub_688818CC
		mov	edx, [esp+9Ch+var_68]
		mov	dx, [edx+0Eh]
		and	edx, 1
		mov	[esp+9Ch+var_40], dx
		mov	ecx, [esp+9Ch+var_68]
		mov	ecx, [ecx+0Ch]
		mov	[esp+9Ch+var_3E], cx
		mov	edx, [esp+9Ch+var_68]
		mov	ebx, [edx+34h]
		mov	edi, [edx+30h]
		mov	ecx, [esp+9Ch+var_64]
		add	ecx, 10h
		mov	[esp+9Ch+var_4C], ecx
		mov	edx, [esp+9Ch+var_64]
		mov	eax, [edx]
		mov	eax, [eax+68h]
		mov	[esp+9Ch+var_44], eax
		mov	[esp+9Ch+Str], eax
		call	purple_connection_get_account
		mov	[esp+9Ch+var_54], eax
		add	ebx, edi
		mov	[esp+9Ch+var_6C], ebx
		mov	[esp+9Ch+var_90], offset g_free
		mov	[esp+9Ch+var_94], 0
		mov	[esp+9Ch+var_98], offset loc_688ABD08
		mov	[esp+9Ch+Str], offset loc_688ABD10
		call	g_hash_table_new_full
		mov	[esp+9Ch+var_58], eax
		mov	[esp+9Ch+var_98], offset aBinary ; "<binary>"
		mov	[esp+9Ch+Str], edi
		call	purple_strcasestr
		mov	[esp+9Ch+var_48], eax
		test	eax, eax
		jz	loc_688975BC
		add	eax, 8
		mov	[esp+9Ch+var_30], eax
		mov	edx, [esp+9Ch+var_48]
		add	edx, 25h
		lea	ebx, [esp+9Ch+var_24]
		cmp	[esp+9Ch+var_6C], edx
		jb	loc_688975C8
		lea	edx, [esp+9Ch+var_2C]
		mov	[esp+9Ch+var_60], edx
		mov	[esp+9Ch+var_5C], edi
		jmp	loc_688971EF
; ---------------------------------------------------------------------------
		align 4

loc_68897118:				; CODE XREF: sub_68896FB0+265j
		inc	[esp+9Ch+var_30]
		mov	[esp+9Ch+Str], offset aId ; "id"
		call	g_quark_try_string
		mov	[esp+9Ch+var_98], eax
		mov	[esp+9Ch+Str], ebx
		call	g_datalist_id_get_data
		test	eax, eax
		jz	loc_68897550
		mov	[esp+9Ch+Str], eax ; Str
		call	atoi
		mov	edi, eax
		mov	[esp+9Ch+Str], offset aSize ; "size"
		call	g_quark_try_string
		mov	[esp+9Ch+var_98], eax
		mov	[esp+9Ch+Str], ebx
		call	g_datalist_id_get_data
		test	eax, eax
		jz	loc_68897550
		mov	[esp+9Ch+Str], eax ; Str
		call	atol
		mov	esi, eax
		mov	[esp+9Ch+Str], ebx
		call	g_datalist_clear
		test	esi, esi
		jz	short loc_6889718C
		mov	eax, [esp+9Ch+var_30]
		add	eax, esi
		cmp	[esp+9Ch+var_6C], eax
		jb	loc_6889721B

loc_6889718C:				; CODE XREF: sub_68896FB0+1CAj
		mov	[esp+9Ch+Str], 8
		call	g_malloc
		mov	ebp, eax
		mov	[eax], esi
		mov	eax, [esp+9Ch+var_30]
		mov	[ebp+4], eax
		add	esi, eax
		mov	[esp+9Ch+var_30], esi
		mov	[esp+9Ch+var_94], 7
		mov	[esp+9Ch+var_98], offset aData_1 ; "</data>"
		mov	[esp+9Ch+Str], esi
		call	g_ascii_strncasecmp
		test	eax, eax
		jnz	loc_688975D8
		add	[esp+9Ch+var_30], 7
		mov	[esp+9Ch+var_94], ebp
		mov	[esp+9Ch+var_98], edi
		mov	eax, [esp+9Ch+var_58]
		mov	[esp+9Ch+Str], eax
		call	g_hash_table_insert
		mov	eax, [esp+9Ch+var_30]
		lea	edx, [eax+1Dh]
		cmp	[esp+9Ch+var_6C], edx
		jb	short loc_6889721B

loc_688971EF:				; CODE XREF: sub_68896FB0+160j
		mov	[esp+9Ch+var_8C], ebx
		lea	edx, [esp+9Ch+var_30]
		mov	[esp+9Ch+var_90], edx
		mov	ecx, [esp+9Ch+var_60]
		mov	[esp+9Ch+var_94], ecx
		mov	[esp+9Ch+var_98], eax
		mov	[esp+9Ch+Str], offset aData_0 ;	"data"
		call	purple_markup_find_tag
		test	eax, eax
		jnz	loc_68897118

loc_6889721B:				; CODE XREF: sub_68896FB0+1D6j
					; sub_68896FB0+23Dj
		mov	edi, [esp+9Ch+var_5C]

loc_6889721F:				; CODE XREF: sub_68896FB0+5ACj
					; sub_68896FB0+620j ...
		mov	[esp+9Ch+Str], offset byte_688B1754
		call	g_string_new
		mov	[esp+9Ch+var_5C], eax
		mov	[esp+9Ch+var_30], edi
		xor	esi, esi
		movzx	edx, [esp+9Ch+var_3E]
		mov	[esp+9Ch+var_50], edx
		mov	ebp, [esp+9Ch+var_4C]
		mov	[esp+9Ch+var_4C], esi
		xchg	ax, ax

loc_68897248:				; CODE XREF: sub_68896FB0+3BCj
		mov	[esp+9Ch+var_8C], ebx
		lea	edx, [esp+9Ch+var_28]
		mov	[esp+9Ch+var_90], edx
		mov	ecx, [esp+9Ch+var_60]
		mov	[esp+9Ch+var_94], ecx
		mov	[esp+9Ch+var_98], edi
		mov	[esp+9Ch+Str], offset aImg_0 ; "img"
		call	purple_markup_find_tag
		test	eax, eax
		jz	loc_688973F4
		mov	[esp+9Ch+Str], offset aId ; "id"
		call	g_quark_try_string
		mov	[esp+9Ch+var_98], eax
		mov	[esp+9Ch+Str], ebx
		call	g_datalist_id_get_data
		mov	edi, eax
		mov	[esp+9Ch+Str], offset aSrc ; "src"
		call	g_quark_try_string
		mov	[esp+9Ch+var_98], eax
		mov	[esp+9Ch+Str], ebx
		call	g_datalist_id_get_data
		mov	esi, eax
		mov	[esp+9Ch+Str], offset aDatasize	; "datasize"
		call	g_quark_try_string
		mov	[esp+9Ch+var_98], eax
		mov	[esp+9Ch+Str], ebx
		call	g_datalist_id_get_data
		test	edi, edi
		jz	short loc_6889730A
		test	esi, esi
		jz	short loc_6889730A
		test	eax, eax
		jz	short loc_6889730A
		mov	[esp+9Ch+Str], edi ; Str
		mov	[esp+9Ch+var_70], eax
		call	atoi
		mov	edx, [esp+9Ch+var_70]
		mov	[esp+9Ch+Str], edx ; Str
		mov	[esp+9Ch+var_70], eax
		call	atol
		mov	edi, eax
		mov	ecx, [esp+9Ch+var_70]
		mov	[esp+9Ch+var_98], ecx
		mov	eax, [esp+9Ch+var_58]
		mov	[esp+9Ch+Str], eax
		call	g_hash_table_lookup
		test	eax, eax
		jz	short loc_6889730A
		cmp	edi, [eax]
		jz	loc_68897398

loc_6889730A:				; CODE XREF: sub_68896FB0+312j
					; sub_68896FB0+316j ...
		xor	esi, esi

loc_6889730C:				; CODE XREF: sub_68896FB0+41Dj
		mov	[esp+9Ch+Str], ebx
		call	g_datalist_clear
		mov	edx, [esp+9Ch+var_30]
		mov	eax, [esp+9Ch+var_2C]
		sub	eax, edx
		mov	[esp+9Ch+var_8C], eax ;	size_t
		mov	[esp+9Ch+var_90], edx ;	char *
		mov	edx, [esp+9Ch+var_50]
		mov	[esp+9Ch+var_94], edx ;	int
		mov	eax, [ebp+0]
		mov	[esp+9Ch+var_98], eax ;	int
		mov	eax, [esp+9Ch+var_54]
		mov	[esp+9Ch+Str], eax ; int
		call	oscar_decode_im
		mov	edi, eax
		test	eax, eax
		jz	short loc_6889735F
		mov	[esp+9Ch+var_98], eax
		mov	eax, [esp+9Ch+var_5C]
		mov	[esp+9Ch+Str], eax
		call	g_string_append
		mov	[esp+9Ch+Str], edi
		call	g_free

loc_6889735F:				; CODE XREF: sub_68896FB0+395j
		test	esi, esi
		jnz	short loc_688973D4

loc_68897363:				; CODE XREF: sub_68896FB0+43Cj
		mov	edi, [esp+9Ch+var_28]
		inc	edi
		mov	[esp+9Ch+var_30], edi
		jmp	loc_68897248
; ---------------------------------------------------------------------------
		align 4

loc_68897374:				; CODE XREF: sub_68896FB0+57j
		mov	[esp+9Ch+var_94], 0
		mov	[esp+9Ch+var_98], 2
		mov	ecx, [esp+9Ch+var_64]
		mov	[esp+9Ch+Str], ecx
		call	peer_connection_destroy
		jmp	loc_68897024
; ---------------------------------------------------------------------------
		align 4

loc_68897398:				; CODE XREF: sub_68896FB0+354j
		mov	[esp+9Ch+var_98], edi
		mov	eax, [eax+4]
		mov	[esp+9Ch+Str], eax
		call	g_memdup
		mov	[esp+9Ch+var_94], esi
		mov	[esp+9Ch+var_98], edi
		mov	[esp+9Ch+Str], eax
		call	purple_imgstore_add_with_id
		mov	esi, eax
		mov	[esp+9Ch+var_98], eax
		mov	eax, [esp+9Ch+var_4C]
		mov	[esp+9Ch+Str], eax
		call	g_slist_append
		mov	[esp+9Ch+var_4C], eax
		jmp	loc_6889730C
; ---------------------------------------------------------------------------
		align 4

loc_688973D4:				; CODE XREF: sub_68896FB0+3B1j
		mov	[esp+9Ch+var_94], esi
		mov	[esp+9Ch+var_98], offset aImgIdD ; "<IMG ID=\"%d\">"
		mov	eax, [esp+9Ch+var_5C]
		mov	[esp+9Ch+Str], eax
		call	g_string_append_printf
		jmp	loc_68897363
; ---------------------------------------------------------------------------
		align 4

loc_688973F4:				; CODE XREF: sub_68896FB0+2BEj
		mov	esi, [esp+9Ch+var_4C]
		mov	ebx, esi
		mov	eax, [esp+9Ch+var_30]
		cmp	eax, [esp+9Ch+var_48]
		jbe	loc_68897564

loc_68897408:				; CODE XREF: sub_68896FB0+5E6j
					; sub_68896FB0+604j
		cmp	esi, 1
		sbb	edi, edi
		not	edi
		and	edi, 1000h
		cmp	[esp+9Ch+var_40], 0
		jz	short loc_68897420
		or	edi, 8

loc_68897420:				; CODE XREF: sub_68896FB0+46Bj
		mov	[esp+9Ch+Str], 0 ; Time
		call	time
		mov	[esp+9Ch+var_8C], eax
		mov	[esp+9Ch+var_90], edi
		mov	edx, [esp+9Ch+var_5C]
		mov	eax, [edx]
		mov	[esp+9Ch+var_94], eax
		mov	ecx, [esp+9Ch+var_64]
		mov	eax, [ecx+10h]
		mov	[esp+9Ch+var_98], eax
		mov	edx, [esp+9Ch+var_44]
		mov	[esp+9Ch+Str], edx
		call	serv_got_im
		mov	[esp+9Ch+var_98], 1
		mov	eax, [esp+9Ch+var_5C]
		mov	[esp+9Ch+Str], eax
		call	g_string_free
		test	esi, esi
		jz	short loc_68897489
		lea	esi, [esi+0]

loc_68897470:				; CODE XREF: sub_68896FB0+4CFj
		mov	eax, [esi]
		mov	[esp+9Ch+Str], eax
		call	purple_imgstore_unref_by_id
		mov	esi, [esi+4]
		test	esi, esi
		jnz	short loc_68897470
		mov	[esp+9Ch+Str], ebx
		call	g_slist_free

loc_68897489:				; CODE XREF: sub_68896FB0+4BBj
		mov	eax, [esp+9Ch+var_58]
		mov	[esp+9Ch+Str], eax
		call	g_hash_table_destroy
		mov	edx, [esp+9Ch+var_68]
		mov	eax, [edx+30h]
		mov	[esp+9Ch+Str], eax
		call	g_free
		mov	ecx, [esp+9Ch+var_68]
		mov	dword ptr [ecx+30h], 0
		mov	[esp+9Ch+Str], ecx
		call	g_free
		mov	edx, [esp+9Ch+var_64]
		mov	dword ptr [edx+3Ch], 0
		mov	eax, [edx+84h]
		mov	[esp+9Ch+Str], eax
		call	purple_input_remove
		mov	ecx, [esp+9Ch+var_64]
		mov	[esp+9Ch+var_90], ecx
		mov	[esp+9Ch+var_94], offset peer_connection_recv_cb
		mov	[esp+9Ch+var_98], 1
		mov	eax, [ecx+54h]
		mov	[esp+9Ch+Str], eax
		call	purple_input_add
		mov	edx, [esp+9Ch+var_64]
		mov	[edx+84h], eax
		jmp	loc_68897024
; ---------------------------------------------------------------------------
		align 4

loc_68897504:				; CODE XREF: sub_68896FB0+5Dj
		call	_errno
		cmp	dword ptr [eax], 0Bh
		jz	loc_68897024
		call	_errno
		cmp	dword ptr [eax], 2733h
		jz	loc_68897024
		call	_errno
		mov	eax, [eax]
		mov	[esp+9Ch+Str], eax
		call	wpurple_strerror
		mov	[esp+9Ch+var_94], eax
		mov	[esp+9Ch+var_98], 4
		mov	edx, [esp+9Ch+var_64]
		mov	[esp+9Ch+Str], edx
		call	peer_connection_destroy
		jmp	loc_68897024
; ---------------------------------------------------------------------------
		align 10h

loc_68897550:				; CODE XREF: sub_68896FB0+186j
					; sub_68896FB0+1B0j
		mov	edi, [esp+9Ch+var_5C]
		mov	[esp+9Ch+Str], ebx
		call	g_datalist_clear
		jmp	loc_6889721F
; ---------------------------------------------------------------------------
		align 4

loc_68897564:				; CODE XREF: sub_68896FB0+452j
		mov	edx, [esp+9Ch+var_48]
		sub	edx, eax
		mov	[esp+9Ch+var_8C], edx ;	size_t
		mov	[esp+9Ch+var_90], eax ;	char *
		movzx	eax, [esp+9Ch+var_3E]
		mov	[esp+9Ch+var_94], eax ;	int
		mov	edx, [esp+9Ch+var_64]
		mov	eax, [edx+10h]
		mov	[esp+9Ch+var_98], eax ;	int
		mov	eax, [esp+9Ch+var_54]
		mov	[esp+9Ch+Str], eax ; int
		call	oscar_decode_im
		mov	edi, eax
		test	eax, eax
		jz	loc_68897408
		mov	[esp+9Ch+var_98], eax
		mov	eax, [esp+9Ch+var_5C]
		mov	[esp+9Ch+Str], eax
		call	g_string_append
		mov	[esp+9Ch+Str], edi
		call	g_free
		jmp	loc_68897408
; ---------------------------------------------------------------------------
		align 4

loc_688975BC:				; CODE XREF: sub_68896FB0+132j
		mov	edx, [esp+9Ch+var_6C]
		mov	[esp+9Ch+var_48], edx
		lea	ebx, [esp+9Ch+var_24]

loc_688975C8:				; CODE XREF: sub_68896FB0+14Ej
		lea	ecx, [esp+9Ch+var_2C]
		mov	[esp+9Ch+var_60], ecx
		jmp	loc_6889721F
; ---------------------------------------------------------------------------
		align 4

loc_688975D8:				; CODE XREF: sub_68896FB0+213j
		mov	edi, [esp+9Ch+var_5C]
		mov	[esp+9Ch+Str], ebp
		call	g_free
		jmp	loc_6889721F
; ---------------------------------------------------------------------------

loc_688975E9:				; CODE XREF: sub_68896FB0+7Ej
		call	__stack_chk_fail
sub_68896FB0	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 298. peer_odc_close

; =============== S U B	R O U T	I N E =======================================


		public peer_odc_close
peer_odc_close	proc near		; CODE XREF: sub_688A5DF8+173p

Time		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_10		= dword	ptr -10h
arg_0		= dword	ptr  4

		push	edi
		push	esi
		push	ebx
		sub	esp, 30h
		mov	ebx, [esp+3Ch+arg_0]
		mov	eax, ds:__stack_chk_guard
		mov	[esp+3Ch+var_10], eax
		xor	eax, eax
		mov	eax, [ebx+34h]
		cmp	eax, 2
		jz	loc_68897700
		cmp	eax, 3
		jz	loc_68897710
		cmp	eax, 4
		jz	loc_68897720
		cmp	eax, 5
		jz	loc_6889774C
		cmp	eax, 6
		jz	short loc_6889767C

loc_68897631:				; CODE XREF: peer_odc_close+ACj
					; peer_odc_close+108j
		mov	ebx, [ebx+3Ch]
		test	ebx, ebx
		jz	short loc_68897664
		mov	eax, [ebx+30h]
		mov	[esp+3Ch+Time],	eax
		call	g_free
		mov	eax, [esp+3Ch+var_10]
		xor	eax, ds:__stack_chk_guard
		jnz	loc_68897759
		mov	[esp+3Ch+arg_0], ebx
		add	esp, 30h
		pop	ebx
		pop	esi
		pop	edi
		jmp	g_free
; ---------------------------------------------------------------------------
		align 4

loc_68897664:				; CODE XREF: peer_odc_close+46j
		mov	eax, [esp+3Ch+var_10]
		xor	eax, ds:__stack_chk_guard
		jnz	loc_68897759
		add	esp, 30h
		pop	ebx
		pop	esi
		pop	edi
		retn
; ---------------------------------------------------------------------------
		align 4

loc_6889767C:				; CODE XREF: peer_odc_close+3Fj
		mov	[esp+3Ch+var_38], offset aUnableToEstabl ; "Unable to establish	a connection with t"...

loc_68897684:				; CODE XREF: peer_odc_close+118j
					; peer_odc_close+128j ...
		mov	[esp+3Ch+Time],	offset aPidgin_5 ; "pidgin"
		call	libintl_dgettext
		mov	[esp+3Ch+Time],	eax
		call	g_strdup
		mov	esi, eax

loc_6889769A:				; CODE XREF: peer_odc_close+155j
		test	esi, esi
		jz	short loc_68897631
		mov	eax, [ebx]
		mov	eax, [eax+68h]
		mov	[esp+3Ch+Time],	eax
		call	purple_connection_get_account
		mov	edx, [ebx+10h]
		mov	[esp+3Ch+var_34], edx
		mov	[esp+3Ch+var_38], eax
		mov	[esp+3Ch+Time],	1
		call	purple_conversation_new
		mov	edi, eax
		mov	[esp+3Ch+Time],	0 ; Time
		call	time
		mov	[esp+3Ch+var_2C], eax
		mov	[esp+3Ch+var_30], 4
		mov	[esp+3Ch+var_34], esi
		mov	[esp+3Ch+var_38], 0
		mov	[esp+3Ch+Time],	edi
		call	purple_conversation_write
		mov	[esp+3Ch+Time],	esi
		call	g_free
		jmp	loc_68897631
; ---------------------------------------------------------------------------
		align 10h

loc_68897700:				; CODE XREF: peer_odc_close+1Bj
		mov	[esp+3Ch+var_38], offset aTheRemoteUserH ; "The	remote user has	closed the connecti"...
		jmp	loc_68897684
; ---------------------------------------------------------------------------
		align 10h

loc_68897710:				; CODE XREF: peer_odc_close+24j
		mov	[esp+3Ch+var_38], offset aTheRemoteUse_0 ; "The	remote user has	declined your reque"...
		jmp	loc_68897684
; ---------------------------------------------------------------------------
		align 10h

loc_68897720:				; CODE XREF: peer_odc_close+2Dj
		mov	esi, [ebx+38h]
		mov	[esp+3Ch+var_38], offset aLostConnecti_0 ; "Lost connection with the remote user:<b"...
		mov	[esp+3Ch+Time],	offset aPidgin_5 ; "pidgin"
		call	libintl_dgettext
		mov	[esp+3Ch+var_38], esi
		mov	[esp+3Ch+Time],	eax
		call	g_strdup_printf
		mov	esi, eax
		jmp	loc_6889769A
; ---------------------------------------------------------------------------
		align 4

loc_6889774C:				; CODE XREF: peer_odc_close+36j
		mov	[esp+3Ch+var_38], offset aReceivedInva_0 ; "Received invalid data on connection	wit"...
		jmp	loc_68897684
; ---------------------------------------------------------------------------

loc_68897759:				; CODE XREF: peer_odc_close+5Dj
					; peer_odc_close+7Ej
		call	__stack_chk_fail
peer_odc_close	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 300. peer_odc_send_cookie

; =============== S U B	R O U T	I N E =======================================


		public peer_odc_send_cookie
peer_odc_send_cookie proc near		; CODE XREF: peer_odc_recv_frame+34Ep
					; peer_connection_finalize_connection+8Dp

var_4C		= word ptr -4Ch
var_4A		= word ptr -4Ah
var_3E		= word ptr -3Eh
var_10		= dword	ptr -10h
arg_0		= dword	ptr  4

		push	edi
		sub	esp, 48h
		mov	eax, ds:__stack_chk_guard
		mov	[esp+4Ch+var_10], eax
		xor	eax, eax
		mov	edx, esp
		mov	ecx, 3Ch
		mov	edi, esp
		rep stosb
		mov	[esp+4Ch+var_4C], 1
		mov	[esp+4Ch+var_4A], 6
		mov	[esp+4Ch+var_3E], 60h
		mov	eax, [esp+4Ch+arg_0]
		call	sub_68896D9C
		mov	eax, [esp+4Ch+var_10]
		xor	eax, ds:__stack_chk_guard
		jnz	short loc_688977A8
		add	esp, 48h
		pop	edi
		retn
; ---------------------------------------------------------------------------

loc_688977A8:				; CODE XREF: peer_odc_send_cookie+41j
		call	__stack_chk_fail
peer_odc_send_cookie endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 302. peer_odc_send_typing

; =============== S U B	R O U T	I N E =======================================


		public peer_odc_send_typing
peer_odc_send_typing proc near		; CODE XREF: oscar_send_typing+F7p

var_4C		= word ptr -4Ch
var_4A		= word ptr -4Ah
var_3E		= word ptr -3Eh
var_10		= dword	ptr -10h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	edi
		push	esi
		push	ebx
		sub	esp, 40h
		mov	ebx, [esp+4Ch+arg_0]
		mov	esi, [esp+4Ch+arg_4]
		mov	eax, ds:__stack_chk_guard
		mov	[esp+4Ch+var_10], eax
		xor	eax, eax
		mov	ecx, 3Ch
		mov	edi, esp
		rep stosb
		mov	[esp+4Ch+var_4C], 1
		mov	[esp+4Ch+var_4A], 6
		cmp	esi, 1
		jz	short loc_6889780C
		cmp	esi, 2
		jz	short loc_68897818
		mov	[esp+4Ch+var_3E], 2

loc_688977F0:				; CODE XREF: peer_odc_send_typing+63j
					; peer_odc_send_typing+6Fj
		mov	edx, esp
		mov	eax, ebx
		call	sub_68896D9C
		mov	eax, [esp+4Ch+var_10]
		xor	eax, ds:__stack_chk_guard
		jnz	short loc_68897821
		add	esp, 40h
		pop	ebx
		pop	esi
		pop	edi
		retn
; ---------------------------------------------------------------------------

loc_6889780C:				; CODE XREF: peer_odc_send_typing+32j
		mov	[esp+4Ch+var_3E], 0Ah
		jmp	short loc_688977F0
; ---------------------------------------------------------------------------
		align 4

loc_68897818:				; CODE XREF: peer_odc_send_typing+37j
		mov	[esp+4Ch+var_3E], 6
		jmp	short loc_688977F0
; ---------------------------------------------------------------------------

loc_68897821:				; CODE XREF: peer_odc_send_typing+53j
		call	__stack_chk_fail
peer_odc_send_typing endp

; ---------------------------------------------------------------------------
		align 4
; Exported entry 301. peer_odc_send_im

; =============== S U B	R O U T	I N E =======================================


		public peer_odc_send_im
peer_odc_send_im proc near		; CODE XREF: oscar_send_im+45Ep

var_7C		= dword	ptr -7Ch
var_78		= dword	ptr -78h
var_74		= dword	ptr -74h
var_64		= dword	ptr -64h
var_60		= dword	ptr -60h
var_5C		= word ptr -5Ch
var_5A		= word ptr -5Ah
var_50		= word ptr -50h
var_4E		= word ptr -4Eh
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_20		= dword	ptr -20h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 6Ch
		mov	eax, [esp+7Ch+arg_0]
		mov	[esp+7Ch+var_60], eax
		mov	esi, [esp+7Ch+arg_4]
		mov	ebx, [esp+7Ch+arg_8]
		mov	ebp, [esp+7Ch+arg_C]
		mov	edx, [esp+7Ch+arg_10]
		mov	eax, ds:__stack_chk_guard
		mov	[esp+7Ch+var_20], eax
		xor	eax, eax
		test	esi, esi
		jz	loc_6889790C
		test	ebx, ebx
		jle	short loc_688978EC
		lea	eax, [esp+7Ch+var_5C]
		mov	[esp+7Ch+var_64], eax
		mov	ecx, 3Ch
		xor	eax, eax
		mov	edi, [esp+7Ch+var_64]
		rep stosb
		mov	[esp+7Ch+var_5C], 1
		mov	[esp+7Ch+var_5A], 6
		mov	[esp+7Ch+var_28], ebx
		mov	[esp+7Ch+var_50], bp
		mov	[esp+7Ch+var_4E], dx
		mov	[esp+7Ch+var_78], ebx
		lea	ebp, [esp+7Ch+var_2C]
		mov	[esp+7Ch+var_7C], ebp
		call	sub_68881748
		mov	[esp+7Ch+var_74], ebx
		mov	[esp+7Ch+var_78], esi
		mov	[esp+7Ch+var_7C], ebp
		call	sub_688820A0
		lea	edx, [esp+7Ch+var_5C]
		mov	eax, [esp+7Ch+var_60]
		call	sub_68896D9C
		mov	eax, [esp+7Ch+var_2C]
		mov	[esp+7Ch+var_7C], eax
		call	g_free

loc_688978D7:				; CODE XREF: peer_odc_send_im+E0j
					; peer_odc_send_im+100j
		mov	eax, [esp+7Ch+var_20]
		xor	eax, ds:__stack_chk_guard
		jnz	short loc_6889792A
		add	esp, 6Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 4

loc_688978EC:				; CODE XREF: peer_odc_send_im+43j
		mov	[esp+7Ch+var_74], offset aLen0 ; "len >	0"
		mov	[esp+7Ch+var_78], offset aPeer_odc_send_ ; "peer_odc_send_im"
		mov	[esp+7Ch+var_7C], 0
		call	g_return_if_fail_warning
		jmp	short loc_688978D7
; ---------------------------------------------------------------------------
		align 4

loc_6889790C:				; CODE XREF: peer_odc_send_im+3Bj
		mov	[esp+7Ch+var_74], offset aMsgNull ; "msg != NULL"
		mov	[esp+7Ch+var_78], offset aPeer_odc_send_ ; "peer_odc_send_im"
		mov	[esp+7Ch+var_7C], 0
		call	g_return_if_fail_warning
		jmp	short loc_688978D7
; ---------------------------------------------------------------------------

loc_6889792A:				; CODE XREF: peer_odc_send_im+B9j
		call	__stack_chk_fail
peer_odc_send_im endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 299. peer_odc_recv_frame

; =============== S U B	R O U T	I N E =======================================


		public peer_odc_recv_frame
peer_odc_recv_frame proc near		; CODE XREF: peer_connection_recv_cb+263p

Time		= dword	ptr -5Ch
Buf2		= dword	ptr -58h
Size		= dword	ptr -54h
var_50		= dword	ptr -50h
var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_20		= dword	ptr -20h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 4Ch
		mov	edi, [esp+5Ch+arg_0]
		mov	esi, [esp+5Ch+arg_4]
		mov	eax, ds:__stack_chk_guard
		mov	[esp+5Ch+var_20], eax
		xor	eax, eax
		mov	eax, [edi]
		mov	eax, [eax+68h]
		mov	[esp+5Ch+var_30], eax
		mov	[esp+5Ch+Time],	3Ch
		call	g_malloc0
		mov	ebx, eax
		mov	[esp+5Ch+Time],	esi
		call	sub_688819F0
		mov	[ebx], ax
		mov	[esp+5Ch+Time],	esi
		call	sub_688819F0
		mov	[ebx+2], ax
		mov	[esp+5Ch+Buf2],	2
		mov	[esp+5Ch+Time],	esi
		call	sub_68881904
		lea	ecx, [ebx+4]
		mov	[esp+5Ch+Size],	8
		mov	[esp+5Ch+Buf2],	ecx
		mov	[esp+5Ch+Time],	esi
		mov	[esp+5Ch+var_34], ecx
		call	sub_68881C3C
		mov	[esp+5Ch+Buf2],	8
		mov	[esp+5Ch+Time],	esi
		call	sub_68881904
		mov	[esp+5Ch+Time],	esi
		call	sub_68881A60
		mov	[ebx+34h], eax
		mov	[esp+5Ch+Time],	esi
		call	sub_688819F0
		mov	[ebx+0Ch], ax
		mov	[esp+5Ch+Buf2],	4
		mov	[esp+5Ch+Time],	esi
		call	sub_68881904
		mov	[esp+5Ch+Time],	esi
		call	sub_688819F0
		mov	[ebx+0Eh], ax
		mov	[esp+5Ch+Buf2],	4
		mov	[esp+5Ch+Time],	esi
		call	sub_68881904
		lea	ebp, [ebx+10h]
		mov	[esp+5Ch+Size],	20h
		mov	[esp+5Ch+Buf2],	ebp
		mov	[esp+5Ch+Time],	esi
		call	sub_68881C3C
		mov	eax, [ebx+34h]
		mov	[esp+5Ch+var_48], eax
		movzx	eax, word ptr [ebx+0Eh]
		mov	[esp+5Ch+var_4C], eax
		movzx	eax, word ptr [ebx]
		mov	[esp+5Ch+var_50], eax
		mov	[esp+5Ch+Size],	ebp
		mov	[esp+5Ch+Buf2],	offset aIncomingOdcFra ; "Incoming ODC frame from %s with type=0x"...
		mov	[esp+5Ch+Time],	offset aOscar_11 ; "oscar"
		call	purple_debug_info
		mov	eax, [edi+24h]
		test	eax, eax
		mov	ecx, [esp+5Ch+var_34]
		jnz	loc_68897AD9
		test	byte ptr [edi+28h], 20h
		jnz	loc_68897C5C

loc_68897A54:				; CODE XREF: peer_odc_recv_frame+353j
		mov	dword ptr [edi+24h], 1
		mov	eax, [edi+50h]
		cmp	eax, 0FFFFFFFFh
		jz	short loc_68897A72
		mov	[esp+5Ch+Time],	eax
		call	wpurple_close
		mov	dword ptr [edi+50h], 0FFFFFFFFh

loc_68897A72:				; CODE XREF: peer_odc_recv_frame+131j
		mov	edx, [esp+5Ch+var_30]
		mov	[esp+5Ch+Time],	edx
		call	purple_connection_get_account
		mov	ecx, [edi+10h]
		mov	[esp+5Ch+Size],	ecx
		mov	[esp+5Ch+Buf2],	eax
		mov	[esp+5Ch+Time],	1
		call	purple_conversation_new
		mov	esi, eax
		mov	[esp+5Ch+Time],	0 ; Time
		call	time
		mov	ebp, eax
		mov	[esp+5Ch+Buf2],	offset aDirectImEstabl ; "Direct IM established"
		mov	[esp+5Ch+Time],	offset aPidgin_5 ; "pidgin"
		call	libintl_dgettext
		mov	[esp+5Ch+var_4C], ebp
		mov	[esp+5Ch+var_50], 4
		mov	[esp+5Ch+Size],	eax
		mov	[esp+5Ch+Buf2],	0
		mov	[esp+5Ch+Time],	esi
		call	purple_conversation_write

loc_68897AD9:				; CODE XREF: peer_odc_recv_frame+114j
		movzx	eax, word ptr [ebx]
		cmp	ax, 1
		jz	short loc_68897AF0
		movzx	ecx, word ptr [ebx+2]
		cmp	cx, 6
		jnz	loc_68897C2C

loc_68897AF0:				; CODE XREF: peer_odc_recv_frame+1B0j
		mov	ax, [ebx+0Eh]
		test	al, 8
		jnz	loc_68897D2C
		test	al, 4
		jz	loc_68897CEC
		mov	[esp+5Ch+var_50], 2

loc_68897B0C:				; CODE XREF: peer_odc_recv_frame+41Fj
		mov	[esp+5Ch+Size],	0
		mov	eax, [edi+10h]
		mov	[esp+5Ch+Buf2],	eax
		mov	edx, [esp+5Ch+var_30]
		mov	[esp+5Ch+Time],	edx
		call	serv_got_typing
		mov	eax, [ebx+34h]
		test	eax, eax
		jz	loc_68897D0A

loc_68897B32:				; CODE XREF: peer_odc_recv_frame+3D4j
		cmp	eax, 3200000h
		jbe	loc_68897C88
		mov	[esp+5Ch+Time],	eax
		call	purple_str_size_to_units
		mov	ebp, eax
		mov	[esp+5Ch+Time],	3200000h
		call	purple_str_size_to_units
		mov	[esp+5Ch+var_30], eax
		mov	esi, [edi+10h]
		mov	[esp+5Ch+Buf2],	offset aSTriedToSendYo ; "%s tried to send you a %s file, but we "...
		mov	[esp+5Ch+Time],	offset aPidgin_5 ; "pidgin"
		call	libintl_dgettext
		mov	edx, [esp+5Ch+var_30]
		mov	[esp+5Ch+var_50], edx
		mov	[esp+5Ch+Size],	ebp
		mov	[esp+5Ch+Buf2],	esi
		mov	[esp+5Ch+Time],	eax
		call	g_strdup_printf
		mov	esi, eax
		mov	[esp+5Ch+Time],	ebp
		call	g_free
		mov	eax, [esp+5Ch+var_30]
		mov	[esp+5Ch+Time],	eax
		call	g_free
		mov	eax, [edi]
		mov	eax, [eax+68h]
		mov	[esp+5Ch+Time],	eax
		call	purple_connection_get_account
		mov	ecx, [edi+10h]
		mov	[esp+5Ch+Size],	ecx
		mov	[esp+5Ch+Buf2],	eax
		mov	[esp+5Ch+Time],	1
		call	purple_conversation_new
		mov	ebp, eax
		mov	[esp+5Ch+Time],	0 ; Time
		call	time
		mov	[esp+5Ch+var_4C], eax
		mov	[esp+5Ch+var_50], 4
		mov	[esp+5Ch+Size],	esi
		mov	[esp+5Ch+Buf2],	0
		mov	[esp+5Ch+Time],	ebp
		call	purple_conversation_write
		mov	[esp+5Ch+Time],	esi
		call	g_free
		mov	[esp+5Ch+Size],	0
		mov	[esp+5Ch+Buf2],	1
		mov	[esp+5Ch+Time],	edi
		call	peer_connection_destroy
		mov	edx, [esp+5Ch+var_20]
		xor	edx, ds:__stack_chk_guard
		jnz	short loc_68897C54

loc_68897C1A:				; CODE XREF: peer_odc_recv_frame+322j
					; peer_odc_recv_frame+45Aj
		mov	[esp+5Ch+arg_0], ebx
		add	esp, 4Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		jmp	g_free
; ---------------------------------------------------------------------------
		align 4

loc_68897C2C:				; CODE XREF: peer_odc_recv_frame+1BAj
		mov	[esp+5Ch+var_50], ecx
		mov	[esp+5Ch+Size],	eax
		mov	[esp+5Ch+Buf2],	offset aUnknownOdcFram ; "Unknown ODC frame type 0x%04hx, subtype"...
		mov	[esp+5Ch+Time],	offset aOscar_11 ; "oscar"
		call	purple_debug_info
		mov	eax, [esp+5Ch+var_20]
		xor	eax, ds:__stack_chk_guard
		jz	short loc_68897C1A

loc_68897C54:				; CODE XREF: peer_odc_recv_frame+2E8j
					; peer_odc_recv_frame+3ABj ...
		call	__stack_chk_fail
; ---------------------------------------------------------------------------
		align 4

loc_68897C5C:				; CODE XREF: peer_odc_recv_frame+11Ej
		mov	[esp+5Ch+Size],	8 ; Size
		mov	[esp+5Ch+Buf2],	ecx ; Buf2
		lea	eax, [edi+18h]
		mov	[esp+5Ch+Time],	eax ; Buf1
		call	memcmp
		test	eax, eax
		jnz	loc_68897D54
		mov	[esp+5Ch+Time],	edi
		call	peer_odc_send_cookie
		jmp	loc_68897A54
; ---------------------------------------------------------------------------

loc_68897C88:				; CODE XREF: peer_odc_recv_frame+207j
		inc	eax
		mov	[esp+5Ch+Time],	eax
		call	g_malloc
		mov	[ebx+30h], eax
		mov	dword ptr [ebx+38h], 0
		mov	[edi+3Ch], ebx
		mov	eax, [edi+84h]
		mov	[esp+5Ch+Time],	eax
		call	purple_input_remove
		mov	[esp+5Ch+var_50], edi
		mov	[esp+5Ch+Size],	offset sub_68896FB0
		mov	[esp+5Ch+Buf2],	1
		mov	eax, [edi+54h]
		mov	[esp+5Ch+Time],	eax
		call	purple_input_add
		mov	[edi+84h], eax
		mov	eax, [esp+5Ch+var_20]
		xor	eax, ds:__stack_chk_guard
		jnz	loc_68897C54
		add	esp, 4Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 4

loc_68897CEC:				; CODE XREF: peer_odc_recv_frame+1CEj
		mov	eax, [edi+10h]
		mov	[esp+5Ch+Buf2],	eax
		mov	edx, [esp+5Ch+var_30]
		mov	[esp+5Ch+Time],	edx
		call	serv_got_typing_stopped
		mov	eax, [ebx+34h]
		test	eax, eax
		jnz	loc_68897B32

loc_68897D0A:				; CODE XREF: peer_odc_recv_frame+1FCj
		mov	edx, [esp+5Ch+var_20]
		xor	edx, ds:__stack_chk_guard
		jnz	loc_68897C54
		mov	[esp+5Ch+arg_0], ebx
		add	esp, 4Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		jmp	g_free
; ---------------------------------------------------------------------------
		align 4

loc_68897D2C:				; CODE XREF: peer_odc_recv_frame+1C6j
		mov	eax, [edi+10h]
		mov	[esp+5Ch+Size],	eax
		mov	[esp+5Ch+Buf2],	offset aOhmigodSHasSta ; "ohmigod! %s has started typing (DirectI"...
		mov	[esp+5Ch+Time],	offset aOscar_11 ; "oscar"
		call	purple_debug_info
		mov	[esp+5Ch+var_50], 1
		jmp	loc_68897B0C
; ---------------------------------------------------------------------------

loc_68897D54:				; CODE XREF: peer_odc_recv_frame+345j
		mov	[esp+5Ch+Buf2],	offset aReceivedAnInco ; "Received an incorrect	cookie.	 Closing "...
		mov	[esp+5Ch+Time],	offset aOscar_11 ; "oscar"
		call	purple_debug_info
		mov	[esp+5Ch+Size],	0
		mov	[esp+5Ch+Buf2],	5
		mov	[esp+5Ch+Time],	edi
		call	peer_connection_destroy
		mov	edx, [esp+5Ch+var_20]
		xor	edx, ds:__stack_chk_guard
		jz	loc_68897C1A
		jmp	loc_68897C54
peer_odc_recv_frame endp

; ---------------------------------------------------------------------------
		align 4

; =============== S U B	R O U T	I N E =======================================


sub_68897D98	proc near		; CODE XREF: sub_688983A4+B0p
					; peer_oft_recvcb_ack_recv+38p

var_10		= dword	ptr -10h
arg_0		= dword	ptr  4

		push	esi
		push	ebx
		sub	esp, 14h
		mov	ebx, ds:__stack_chk_guard
		mov	[esp+1Ch+var_10], ebx
		xor	ebx, ebx
		shr	ecx, 10h
		mov	esi, [esp+1Ch+arg_0]
		test	esi, esi
		jz	short loc_68897DFC
		inc	edx
		dec	eax
		mov	bl, 1

loc_68897DB8:				; CODE XREF: sub_68897D98+66j
		cmp	edx, ebx
		jle	short loc_68897DD5

loc_68897DBC:				; CODE XREF: sub_68897D98+3Bj
		movzx	esi, byte ptr [eax+ebx]
		test	bl, 1
		jnz	short loc_68897DC8
		shl	esi, 8

loc_68897DC8:				; CODE XREF: sub_68897D98+2Bj
		movzx	esi, si
		sub	ecx, esi
		sbb	ecx, 0
		inc	ebx
		cmp	ebx, edx
		jnz	short loc_68897DBC

loc_68897DD5:				; CODE XREF: sub_68897D98+22j
		movzx	eax, cx
		shr	ecx, 10h
		add	ecx, eax
		mov	eax, ecx
		shr	eax, 10h
		lea	eax, [ecx+eax]
		shl	eax, 10h
		mov	edx, [esp+1Ch+var_10]
		xor	edx, ds:__stack_chk_guard
		jnz	short loc_68897E00
		add	esp, 14h
		pop	ebx
		pop	esi
		retn
; ---------------------------------------------------------------------------
		align 4

loc_68897DFC:				; CODE XREF: sub_68897D98+1Aj
		xor	ebx, ebx
		jmp	short loc_68897DB8
; ---------------------------------------------------------------------------

loc_68897E00:				; CODE XREF: sub_68897D98+5Aj
		call	__stack_chk_fail
sub_68897D98	endp

; ---------------------------------------------------------------------------
		align 4

; =============== S U B	R O U T	I N E =======================================


sub_68897E08	proc near		; CODE XREF: peer_oft_recv_frame+3BDp
					; peer_oft_sendcb_init+118j

var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_30		= dword	ptr -30h
var_20		= dword	ptr -20h
arg_0		= dword	ptr  4

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 3Ch
		mov	edi, eax
		mov	esi, edx
		mov	ebp, ecx
		mov	edx, [esp+4Ch+arg_0]
		mov	eax, ds:__stack_chk_guard
		mov	[esp+4Ch+var_20], eax
		xor	eax, eax
		mov	[esp+4Ch+var_4C], esi
		mov	[esp+4Ch+var_30], edx
		call	purple_xfer_get_local_filename
		mov	[esp+4Ch+var_44], eax
		mov	[esp+4Ch+var_48], offset aCalculatingChe ; "Calculating	checksum of %s\n"
		mov	[esp+4Ch+var_4C], offset aOscar_12 ; "oscar"
		call	purple_debug_info
		mov	[esp+4Ch+var_4C], 40020h
		call	g_malloc0
		mov	ebx, eax
		mov	[eax], edi
		mov	[eax+4], esi
		mov	[eax+8], ebp
		mov	edx, [esp+4Ch+var_30]
		mov	[eax+0Ch], edx
		mov	dword ptr [eax+10h], 0FFFF0000h
		mov	[esp+4Ch+var_4C], esi
		call	purple_xfer_get_local_filename
		mov	[esp+4Ch+var_48], offset aRb ; "rb"
		mov	[esp+4Ch+var_4C], eax
		call	g_fopen
		mov	[ebx+18h], eax
		test	eax, eax
		jz	short loc_68897EC4
		mov	[esp+4Ch+var_44], ebx
		mov	[esp+4Ch+var_48], offset sub_688983A4
		mov	[esp+4Ch+var_4C], 0Ah
		call	purple_timeout_add
		mov	[ebx+4001Ch], eax
		mov	[edi+0A0h], ebx
		mov	eax, [esp+4Ch+var_20]
		xor	eax, ds:__stack_chk_guard
		jnz	short loc_68897F1A
		add	esp, 3Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 4

loc_68897EC4:				; CODE XREF: sub_68897E08+81j
		call	_errno
		mov	eax, [eax]
		mov	[esp+4Ch+var_4C], eax
		call	wpurple_strerror
		mov	edi, eax
		mov	[esp+4Ch+var_4C], esi
		call	purple_xfer_get_local_filename
		mov	[esp+4Ch+var_40], edi
		mov	[esp+4Ch+var_44], eax
		mov	[esp+4Ch+var_48], offset aUnableToOpenSF ; "Unable to open %s for checksumming:	%s\"...
		mov	[esp+4Ch+var_4C], offset aOscar_12 ; "oscar"
		call	purple_debug_error
		mov	[esp+4Ch+var_4C], ebx
		call	ebp
		mov	eax, [esp+4Ch+var_20]
		xor	eax, ds:__stack_chk_guard
		jnz	short loc_68897F1A
		mov	[esp+4Ch+arg_0], ebx
		add	esp, 3Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		jmp	g_free
; ---------------------------------------------------------------------------

loc_68897F1A:				; CODE XREF: sub_68897E08+B1j
					; sub_68897E08+100j
		call	__stack_chk_fail
sub_68897E08	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_68897F20	proc near		; DATA XREF: peer_oft_sendcb_init+109o

var_2C		= dword	ptr -2Ch
var_10		= dword	ptr -10h
arg_0		= dword	ptr  4

		sub	esp, 2Ch
		mov	edx, [esp+2Ch+arg_0]
		mov	eax, ds:__stack_chk_guard
		mov	[esp+2Ch+var_10], eax
		xor	eax, eax
		mov	eax, [edx]
		mov	edx, [edx+10h]
		mov	[eax+0CCh], edx
		mov	[esp+2Ch+var_2C], eax
		call	peer_connection_trynext
		xor	eax, eax
		mov	edx, [esp+2Ch+var_10]
		xor	edx, ds:__stack_chk_guard
		jnz	short loc_68897F57
		add	esp, 2Ch
		retn
; ---------------------------------------------------------------------------

loc_68897F57:				; CODE XREF: sub_68897F20+31j
		call	__stack_chk_fail
sub_68897F20	endp


; =============== S U B	R O U T	I N E =======================================


sub_68897F5C	proc near		; CODE XREF: sub_688981BC+5Ep
					; peer_oft_send_prompt+31j ...

var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_2C		= byte ptr -2Ch
var_20		= dword	ptr -20h

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 2Ch
		mov	edi, eax
		mov	esi, edx
		mov	eax, ds:__stack_chk_guard
		mov	[esp+3Ch+var_20], eax
		xor	eax, eax
		mov	ebp, [edx+0C0h]
		add	ebp, 0C0h
		mov	[esp+3Ch+var_38], ebp
		lea	ebx, [esp+3Ch+var_2C]
		mov	[esp+3Ch+var_3C], ebx
		call	sub_68881748
		mov	[esp+3Ch+var_34], 4
		lea	eax, [edi+14h]
		mov	[esp+3Ch+var_38], eax
		mov	[esp+3Ch+var_3C], ebx
		call	sub_688820A0
		and	ebp, 0FFFFh
		mov	[esp+3Ch+var_38], ebp
		mov	[esp+3Ch+var_3C], ebx
		call	sub_68881E0C
		movzx	eax, word ptr [esi]
		mov	[esp+3Ch+var_38], eax
		mov	[esp+3Ch+var_3C], ebx
		call	sub_68881E0C
		mov	[esp+3Ch+var_34], 8
		lea	eax, [esi+2]
		mov	[esp+3Ch+var_38], eax
		mov	[esp+3Ch+var_3C], ebx
		call	sub_688820A0
		movzx	eax, word ptr [esi+0Ah]
		mov	[esp+3Ch+var_38], eax
		mov	[esp+3Ch+var_3C], ebx
		call	sub_68881E0C
		movzx	eax, word ptr [esi+0Ch]
		mov	[esp+3Ch+var_38], eax
		mov	[esp+3Ch+var_3C], ebx
		call	sub_68881E0C
		movzx	eax, word ptr [esi+0Eh]
		mov	[esp+3Ch+var_38], eax
		mov	[esp+3Ch+var_3C], ebx
		call	sub_68881E0C
		movzx	eax, word ptr [esi+10h]
		mov	[esp+3Ch+var_38], eax
		mov	[esp+3Ch+var_3C], ebx
		call	sub_68881E0C
		movzx	eax, word ptr [esi+12h]
		mov	[esp+3Ch+var_38], eax
		mov	[esp+3Ch+var_3C], ebx
		call	sub_68881E0C
		movzx	eax, word ptr [esi+14h]
		mov	[esp+3Ch+var_38], eax
		mov	[esp+3Ch+var_3C], ebx
		call	sub_68881E0C
		mov	eax, [esi+18h]
		mov	[esp+3Ch+var_38], eax
		mov	[esp+3Ch+var_3C], ebx
		call	sub_68881E8C
		mov	eax, [esi+1Ch]
		mov	[esp+3Ch+var_38], eax
		mov	[esp+3Ch+var_3C], ebx
		call	sub_68881E8C
		mov	eax, [esi+20h]
		mov	[esp+3Ch+var_38], eax
		mov	[esp+3Ch+var_3C], ebx
		call	sub_68881E8C
		mov	eax, [esi+24h]
		mov	[esp+3Ch+var_38], eax
		mov	[esp+3Ch+var_3C], ebx
		call	sub_68881E8C
		mov	eax, [esi+28h]
		mov	[esp+3Ch+var_38], eax
		mov	[esp+3Ch+var_3C], ebx
		call	sub_68881E8C
		mov	eax, [esi+2Ch]
		mov	[esp+3Ch+var_38], eax
		mov	[esp+3Ch+var_3C], ebx
		call	sub_68881E8C
		mov	eax, [esi+30h]
		mov	[esp+3Ch+var_38], eax
		mov	[esp+3Ch+var_3C], ebx
		call	sub_68881E8C
		mov	eax, [esi+34h]
		mov	[esp+3Ch+var_38], eax
		mov	[esp+3Ch+var_3C], ebx
		call	sub_68881E8C
		mov	eax, [esi+38h]
		mov	[esp+3Ch+var_38], eax
		mov	[esp+3Ch+var_3C], ebx
		call	sub_68881E8C
		mov	eax, [esi+3Ch]
		mov	[esp+3Ch+var_38], eax
		mov	[esp+3Ch+var_3C], ebx
		call	sub_68881E8C
		mov	[esp+3Ch+var_34], 20h
		lea	eax, [esi+40h]
		mov	[esp+3Ch+var_38], eax
		mov	[esp+3Ch+var_3C], ebx
		call	sub_688820A0
		movzx	eax, byte ptr [esi+60h]
		mov	[esp+3Ch+var_38], eax
		mov	[esp+3Ch+var_3C], ebx
		call	sub_68881DA4
		movzx	eax, byte ptr [esi+61h]
		mov	[esp+3Ch+var_38], eax
		mov	[esp+3Ch+var_3C], ebx
		call	sub_68881DA4
		movzx	eax, byte ptr [esi+62h]
		mov	[esp+3Ch+var_38], eax
		mov	[esp+3Ch+var_3C], ebx
		call	sub_68881DA4
		mov	[esp+3Ch+var_34], 45h
		lea	eax, [esi+63h]
		mov	[esp+3Ch+var_38], eax
		mov	[esp+3Ch+var_3C], ebx
		call	sub_688820A0
		mov	[esp+3Ch+var_34], 10h
		lea	eax, [esi+0A8h]
		mov	[esp+3Ch+var_38], eax
		mov	[esp+3Ch+var_3C], ebx
		call	sub_688820A0
		movzx	eax, word ptr [esi+0B8h]
		mov	[esp+3Ch+var_38], eax
		mov	[esp+3Ch+var_3C], ebx
		call	sub_68881E0C
		movzx	eax, word ptr [esi+0BAh]
		mov	[esp+3Ch+var_38], eax
		mov	[esp+3Ch+var_3C], ebx
		call	sub_68881E0C
		mov	eax, [esi+0C0h]
		mov	[esp+3Ch+var_34], eax
		mov	eax, [esi+0BCh]
		mov	[esp+3Ch+var_38], eax
		mov	[esp+3Ch+var_3C], ebx
		call	sub_688820A0
		mov	[esp+3Ch+var_38], ebx
		mov	[esp+3Ch+var_3C], edi
		call	peer_connection_send
		mov	[esp+3Ch+var_3C], ebx
		call	sub_688817E4
		mov	eax, [esp+3Ch+var_20]
		xor	eax, ds:__stack_chk_guard
		jnz	short loc_688981B5
		add	esp, 2Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_688981B5:				; CODE XREF: sub_68897F5C+24Fj
		call	__stack_chk_fail
sub_68897F5C	endp

; ---------------------------------------------------------------------------
		align 4

; =============== S U B	R O U T	I N E =======================================


sub_688981BC	proc near		; DATA XREF: peer_oft_recv_frame+3B6o

var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_20		= dword	ptr -20h
var_10		= dword	ptr -10h
arg_0		= dword	ptr  4

		sub	esp, 3Ch
		mov	edx, [esp+3Ch+arg_0]
		mov	eax, ds:__stack_chk_guard
		mov	[esp+3Ch+var_10], eax
		xor	eax, eax
		mov	eax, [edx]
		mov	ecx, [eax+0E4h]
		cmp	[edx+10h], ecx
		jz	short loc_68898234

loc_688981DB:				; CODE XREF: sub_688981BC+81j
		mov	dword ptr [eax+0E4h], 0FFFF0000h
		mov	dword ptr [eax+0D0h], 0FFFF0000h
		mov	dword ptr [eax+0E0h], 0

loc_688981F9:				; CODE XREF: sub_688981BC+9Aj
		mov	word ptr [eax+0A8h], 106h
		mov	edx, [eax+18h]
		mov	[eax+0AAh], edx
		mov	edx, [eax+1Ch]
		mov	[eax+0AEh], edx
		lea	edx, [eax+0A8h]
		call	sub_68897F5C
		xor	eax, eax
		mov	edx, [esp+3Ch+var_10]
		xor	edx, ds:__stack_chk_guard
		jnz	short loc_68898258
		add	esp, 3Ch
		retn
; ---------------------------------------------------------------------------
		align 4

loc_68898234:				; CODE XREF: sub_688981BC+1Dj
		mov	ecx, [edx+14h]
		cmp	ecx, [eax+0E0h]
		jnz	short loc_688981DB
		mov	[esp+3Ch+var_38], ecx
		mov	edx, [edx+4]
		mov	[esp+3Ch+var_3C], edx
		mov	[esp+3Ch+var_20], eax
		call	purple_xfer_set_bytes_sent
		mov	eax, [esp+3Ch+var_20]
		jmp	short loc_688981F9
; ---------------------------------------------------------------------------

loc_68898258:				; CODE XREF: sub_688981BC+6Fj
		call	__stack_chk_fail
sub_688981BC	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_68898260	proc near		; DATA XREF: peer_oft_recvcb_end+62o

var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_10		= dword	ptr -10h
arg_0		= dword	ptr  4

		push	ebx
		sub	esp, 28h
		mov	ebx, [esp+2Ch+arg_0]
		mov	eax, ds:__stack_chk_guard
		mov	[esp+2Ch+var_10], eax
		xor	eax, eax
		mov	eax, [ebx+80h]
		mov	[esp+2Ch+var_2C], eax
		call	purple_circ_buffer_get_max_read
		test	eax, eax
		jz	short loc_6889829C
		mov	eax, 1

loc_6889828A:				; CODE XREF: sub_68898260+5Fj
		mov	edx, [esp+2Ch+var_10]
		xor	edx, ds:__stack_chk_guard
		jnz	short loc_688982C1
		add	esp, 28h
		pop	ebx
		retn
; ---------------------------------------------------------------------------
		align 4

loc_6889829C:				; CODE XREF: sub_68898260+23j
		mov	dword ptr [ebx+16Ch], 0
		mov	[esp+2Ch+var_24], 0
		mov	eax, [ebx+34h]
		mov	[esp+2Ch+var_28], eax
		mov	[esp+2Ch+var_2C], ebx
		call	peer_connection_destroy
		xor	eax, eax
		jmp	short loc_6889828A
; ---------------------------------------------------------------------------

loc_688982C1:				; CODE XREF: sub_68898260+34j
		call	__stack_chk_fail
sub_68898260	endp

; ---------------------------------------------------------------------------
		align 4

; =============== S U B	R O U T	I N E =======================================


sub_688982C8	proc near		; DATA XREF: peer_oft_recv_frame+283o

var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_10		= dword	ptr -10h
arg_0		= dword	ptr  4

		push	ebx
		sub	esp, 28h
		mov	ebx, [esp+2Ch+arg_0]
		mov	eax, ds:__stack_chk_guard
		mov	[esp+2Ch+var_10], eax
		xor	eax, eax
		mov	eax, [ebx+80h]
		mov	[esp+2Ch+var_2C], eax
		call	purple_circ_buffer_get_max_read
		test	eax, eax
		jz	short loc_68898304
		mov	eax, 1

loc_688982F2:				; CODE XREF: sub_688982C8+77j
		mov	edx, [esp+2Ch+var_10]
		xor	edx, ds:__stack_chk_guard
		jnz	short loc_68898341
		add	esp, 28h
		pop	ebx
		retn
; ---------------------------------------------------------------------------
		align 4

loc_68898304:				; CODE XREF: sub_688982C8+23j
		mov	dword ptr [ebx+16Ch], 0
		mov	eax, [ebx+0A4h]
		mov	edx, [ebx+54h]
		mov	[eax+30h], edx
		mov	dword ptr [ebx+54h], 0FFFFFFFFh
		mov	[esp+2Ch+var_20], 0
		mov	[esp+2Ch+var_24], 0
		mov	[esp+2Ch+var_28], edx
		mov	[esp+2Ch+var_2C], eax
		call	purple_xfer_start
		xor	eax, eax
		jmp	short loc_688982F2
; ---------------------------------------------------------------------------

loc_68898341:				; CODE XREF: sub_688982C8+34j
		call	__stack_chk_fail
sub_688982C8	endp

; ---------------------------------------------------------------------------
		align 4
; Exported entry 304. peer_oft_checksum_destroy

; =============== S U B	R O U T	I N E =======================================


		public peer_oft_checksum_destroy
peer_oft_checksum_destroy proc near	; CODE XREF: sub_688983A4+52p
					; sub_688A5DF8+1C4p

File		= dword	ptr -2Ch
var_10		= dword	ptr -10h
arg_0		= dword	ptr  4

		push	ebx
		sub	esp, 28h
		mov	ebx, [esp+2Ch+arg_0]
		mov	eax, ds:__stack_chk_guard
		mov	[esp+2Ch+var_10], eax
		xor	eax, eax
		mov	eax, [ebx]
		mov	dword ptr [eax+0A0h], 0
		mov	eax, [ebx+18h]
		mov	[esp+2Ch+File],	eax ; File
		call	fclose
		mov	eax, [ebx+4001Ch]
		test	eax, eax
		jz	short loc_68898384
		mov	[esp+2Ch+File],	eax
		call	purple_timeout_remove

loc_68898384:				; CODE XREF: peer_oft_checksum_destroy+32j
		mov	eax, [esp+2Ch+var_10]
		xor	eax, ds:__stack_chk_guard
		jnz	short loc_6889839D
		mov	[esp+2Ch+arg_0], ebx
		add	esp, 28h
		pop	ebx
		jmp	g_free
; ---------------------------------------------------------------------------

loc_6889839D:				; CODE XREF: peer_oft_checksum_destroy+46j
		call	__stack_chk_fail
peer_oft_checksum_destroy endp

; ---------------------------------------------------------------------------
		align 4

; =============== S U B	R O U T	I N E =======================================


sub_688983A4	proc near		; DATA XREF: sub_68897E08+87o

DstBuf		= dword	ptr -3Ch
ElementSize	= dword	ptr -38h
Count		= dword	ptr -34h
File		= dword	ptr -30h
var_20		= dword	ptr -20h
arg_0		= dword	ptr  4

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 2Ch
		mov	ebx, [esp+3Ch+arg_0]
		mov	eax, ds:__stack_chk_guard
		mov	[esp+3Ch+var_20], eax
		xor	eax, eax
		mov	eax, [ebx+14h]
		mov	edx, [ebx+0Ch]
		cmp	eax, edx
		jb	short loc_68898414

loc_688983C4:				; CODE XREF: sub_688983A4+9Cj
		mov	eax, [ebx+4]
		mov	[esp+3Ch+DstBuf], eax
		call	purple_xfer_get_local_filename
		mov	[esp+3Ch+Count], eax
		mov	[esp+3Ch+ElementSize], offset aChecksumOfSCal ;	"Checksum of %s	calculated\n"
		mov	[esp+3Ch+DstBuf], offset aOscar_12 ; "oscar"
		call	purple_debug_info
		mov	eax, [ebx+8]
		test	eax, eax
		jz	short loc_688983F3
		mov	[esp+3Ch+DstBuf], ebx
		call	eax

loc_688983F3:				; CODE XREF: sub_688983A4+48j
		mov	[esp+3Ch+DstBuf], ebx
		call	peer_oft_checksum_destroy
		xor	eax, eax

loc_688983FD:				; CODE XREF: sub_688983A4+C2j
		mov	edx, [esp+3Ch+var_20]
		xor	edx, ds:__stack_chk_guard
		jnz	short loc_6889846F
		add	esp, 2Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 4

loc_68898414:				; CODE XREF: sub_688983A4+1Ej
		sub	edx, eax
		cmp	edx, 40000h
		ja	short loc_68898468

loc_6889841E:				; CODE XREF: sub_688983A4+C9j
		lea	edi, [ebx+1Ch]
		mov	eax, [ebx+18h]
		mov	[esp+3Ch+File],	eax ; File
		mov	[esp+3Ch+Count], edx ; Count
		mov	[esp+3Ch+ElementSize], 1 ; ElementSize
		mov	[esp+3Ch+DstBuf], edi ;	DstBuf
		call	fread
		mov	esi, eax
		test	eax, eax
		jz	short loc_688983C4
		mov	ebp, [ebx+14h]
		mov	ecx, [ebx+10h]
		mov	eax, ebp
		and	eax, 1
		mov	[esp+3Ch+DstBuf], eax
		mov	edx, esi
		mov	eax, edi
		call	sub_68897D98
		mov	[ebx+10h], eax
		add	esi, ebp
		mov	[ebx+14h], esi
		mov	eax, 1
		jmp	short loc_688983FD
; ---------------------------------------------------------------------------

loc_68898468:				; CODE XREF: sub_688983A4+78j
		mov	edx, 40000h
		jmp	short loc_6889841E
; ---------------------------------------------------------------------------

loc_6889846F:				; CODE XREF: sub_688983A4+63j
		call	__stack_chk_fail
sub_688983A4	endp

; Exported entry 305. peer_oft_close

; =============== S U B	R O U T	I N E =======================================


		public peer_oft_close
peer_oft_close	proc near		; CODE XREF: sub_688A5DF8+183p

var_2C		= dword	ptr -2Ch
var_10		= dword	ptr -10h
arg_0		= dword	ptr  4

		push	ebx
		sub	esp, 28h
		mov	ebx, [esp+2Ch+arg_0]
		mov	eax, ds:__stack_chk_guard
		mov	[esp+2Ch+var_10], eax
		xor	eax, eax
		mov	eax, [ebx+0A4h]
		mov	[esp+2Ch+var_2C], eax
		call	purple_xfer_get_status
		cmp	eax, 5
		jz	short loc_688984C8

loc_6889849A:				; CODE XREF: peer_oft_close+59j
					; peer_oft_close+63j
		mov	eax, [ebx+16Ch]
		test	eax, eax
		jz	short loc_688984B6
		mov	[esp+2Ch+var_2C], eax
		call	purple_timeout_remove
		mov	dword ptr [ebx+16Ch], 0

loc_688984B6:				; CODE XREF: peer_oft_close+2Ej
		mov	eax, [esp+2Ch+var_10]
		xor	eax, ds:__stack_chk_guard
		jnz	short loc_688984D9
		add	esp, 28h
		pop	ebx
		retn
; ---------------------------------------------------------------------------
		align 4

loc_688984C8:				; CODE XREF: peer_oft_close+24j
		mov	eax, [ebx+24h]
		test	eax, eax
		jnz	short loc_6889849A
		mov	[esp+2Ch+var_2C], ebx
		call	aim_im_sendch2_cancel
		jmp	short loc_6889849A
; ---------------------------------------------------------------------------

loc_688984D9:				; CODE XREF: peer_oft_close+4Cj
		call	__stack_chk_fail
peer_oft_close	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 310. peer_oft_send_prompt

; =============== S U B	R O U T	I N E =======================================


		public peer_oft_send_prompt
peer_oft_send_prompt proc near		; CODE XREF: peer_connection_finalize_connection+A8p

var_10		= dword	ptr -10h
arg_0		= dword	ptr  4

		sub	esp, 1Ch
		mov	eax, [esp+1Ch+arg_0]
		mov	edx, ds:__stack_chk_guard
		mov	[esp+1Ch+var_10], edx
		xor	edx, edx
		mov	word ptr [eax+0A8h], 101h
		mov	edx, [esp+1Ch+var_10]
		xor	edx, ds:__stack_chk_guard
		jnz	short loc_68898516
		lea	edx, [eax+0A8h]
		add	esp, 1Ch
		jmp	sub_68897F5C
; ---------------------------------------------------------------------------

loc_68898516:				; CODE XREF: peer_oft_send_prompt+26j
		call	__stack_chk_fail
peer_oft_send_prompt endp

; ---------------------------------------------------------------------------
		align 4
; Exported entry 306. peer_oft_recv_frame

; =============== S U B	R O U T	I N E =======================================


		public peer_oft_recv_frame
peer_oft_recv_frame proc near		; CODE XREF: peer_connection_recv_cb+277p

Buf1		= dword	ptr -0FCh
Buf2		= dword	ptr -0F8h
Size		= dword	ptr -0F4h
var_F0		= dword	ptr -0F0h
var_E4		= dword	ptr -0E4h
var_DA		= word ptr -0DAh
var_D8		= word ptr -0D8h
var_D6		= word ptr -0D6h
var_D4		= word ptr -0D4h
var_D2		= word ptr -0D2h
var_D0		= word ptr -0D0h
var_CC		= dword	ptr -0CCh
var_C8		= dword	ptr -0C8h
var_C4		= dword	ptr -0C4h
var_C0		= dword	ptr -0C0h
var_BC		= dword	ptr -0BCh
var_B8		= dword	ptr -0B8h
var_B4		= dword	ptr -0B4h
var_B0		= dword	ptr -0B0h
var_AC		= dword	ptr -0ACh
var_A8		= dword	ptr -0A8h
var_A4		= byte ptr -0A4h
var_84		= byte ptr -84h
var_83		= byte ptr -83h
var_82		= byte ptr -82h
var_81		= byte ptr -81h
var_3C		= byte ptr -3Ch
var_2C		= word ptr -2Ch
var_2A		= word ptr -2Ah
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 0ECh
		mov	ebp, [esp+0FCh+arg_0]
		mov	ebx, [esp+0FCh+arg_4]
		mov	eax, ds:__stack_chk_guard
		mov	[esp+0FCh+var_20], eax
		xor	eax, eax
		mov	[esp+0FCh+Buf1], ebx
		call	sub_688819F0
		mov	word ptr [esp+0FCh+var_E4], ax
		mov	[esp+0FCh+Size], 8
		lea	esi, [esp+0FCh+var_E4]
		lea	edi, [esp+0FCh+var_E4+2]
		mov	[esp+0FCh+Buf2], edi
		mov	[esp+0FCh+Buf1], ebx
		call	sub_68881C3C
		mov	[esp+0FCh+Buf1], ebx
		call	sub_688819F0
		mov	[esp+0FCh+var_DA], ax
		mov	[esp+0FCh+Buf1], ebx
		call	sub_688819F0
		mov	[esp+0FCh+var_D8], ax
		mov	[esp+0FCh+Buf1], ebx
		call	sub_688819F0
		mov	[esp+0FCh+var_D6], ax
		mov	[esp+0FCh+Buf1], ebx
		call	sub_688819F0
		mov	[esp+0FCh+var_D4], ax
		mov	[esp+0FCh+Buf1], ebx
		call	sub_688819F0
		mov	[esp+0FCh+var_D2], ax
		mov	[esp+0FCh+Buf1], ebx
		call	sub_688819F0
		mov	[esp+0FCh+var_D0], ax
		mov	[esp+0FCh+Buf1], ebx
		call	sub_68881A60
		mov	[esp+0FCh+var_CC], eax
		mov	[esp+0FCh+Buf1], ebx
		call	sub_68881A60
		mov	[esp+0FCh+var_C8], eax
		mov	[esp+0FCh+Buf1], ebx
		call	sub_68881A60
		mov	[esp+0FCh+var_C4], eax
		mov	[esp+0FCh+Buf1], ebx
		call	sub_68881A60
		mov	[esp+0FCh+var_C0], eax
		mov	[esp+0FCh+Buf1], ebx
		call	sub_68881A60
		mov	[esp+0FCh+var_BC], eax
		mov	[esp+0FCh+Buf1], ebx
		call	sub_68881A60
		mov	[esp+0FCh+var_B8], eax
		mov	[esp+0FCh+Buf1], ebx
		call	sub_68881A60
		mov	[esp+0FCh+var_B4], eax
		mov	[esp+0FCh+Buf1], ebx
		call	sub_68881A60
		mov	[esp+0FCh+var_B0], eax
		mov	[esp+0FCh+Buf1], ebx
		call	sub_68881A60
		mov	[esp+0FCh+var_AC], eax
		mov	[esp+0FCh+Buf1], ebx
		call	sub_68881A60
		mov	[esp+0FCh+var_A8], eax
		mov	[esp+0FCh+Size], 20h
		lea	eax, [esp+0FCh+var_A4]
		mov	[esp+0FCh+Buf2], eax
		mov	[esp+0FCh+Buf1], ebx
		call	sub_68881C3C
		mov	[esp+0FCh+Buf1], ebx
		call	sub_68881990
		mov	[esp+0FCh+var_84], al
		mov	[esp+0FCh+Buf1], ebx
		call	sub_68881990
		mov	[esp+0FCh+var_83], al
		mov	[esp+0FCh+Buf1], ebx
		call	sub_68881990
		mov	[esp+0FCh+var_82], al
		mov	[esp+0FCh+Size], 45h
		lea	eax, [esp+0FCh+var_81]
		mov	[esp+0FCh+Buf2], eax
		mov	[esp+0FCh+Buf1], ebx
		call	sub_68881C3C
		mov	[esp+0FCh+Size], 10h
		lea	eax, [esp+0FCh+var_3C]
		mov	[esp+0FCh+Buf2], eax
		mov	[esp+0FCh+Buf1], ebx
		call	sub_68881C3C
		mov	[esp+0FCh+Buf1], ebx
		call	sub_688819F0
		mov	[esp+0FCh+var_2C], ax
		mov	[esp+0FCh+Buf1], ebx
		call	sub_688819F0
		mov	[esp+0FCh+var_2A], ax
		mov	eax, [ebx+4]
		sub	eax, 0BAh
		mov	[esp+0FCh+var_24], eax
		mov	[esp+0FCh+Buf2], eax
		mov	[esp+0FCh+Buf1], ebx
		call	sub_68881CAC
		mov	[esp+0FCh+var_28], eax
		movzx	eax, word ptr [esp+0FCh+var_E4]
		mov	[esp+0FCh+var_F0], eax
		mov	eax, [ebp+10h]
		mov	[esp+0FCh+Size], eax
		mov	[esp+0FCh+Buf2], offset	aIncomingOftFra	; "Incoming OFT	frame from %s with type=0x"...
		mov	[esp+0FCh+Buf1], offset	aOscar_12 ; "oscar"
		call	purple_debug_info
		mov	eax, [esp+0FCh+var_E4]
		cmp	ax, 204h
		jz	loc_68898828
		jbe	short loc_68898758
		cmp	ax, 205h
		jz	loc_68898890
		cmp	ax, 207h
		jz	short loc_68898764
		xchg	ax, ax

loc_68898728:				; CODE XREF: peer_oft_recv_frame+246j
					; peer_oft_recv_frame+29Dj ...
		mov	eax, [esp+0FCh+var_28]
		mov	[esp+0FCh+Buf1], eax
		call	g_free
		mov	eax, [esp+0FCh+var_20]
		xor	eax, ds:__stack_chk_guard
		jnz	loc_68898933
		add	esp, 0ECh
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 4

loc_68898758:				; CODE XREF: peer_oft_recv_frame+1F8j
		cmp	ax, 101h
		jz	short loc_688987C0
		cmp	ax, 202h
		jnz	short loc_68898728

loc_68898764:				; CODE XREF: peer_oft_recv_frame+208j
		mov	[esp+0FCh+Size], 8 ; Size
		mov	[esp+0FCh+Buf2], edi ; Buf2
		lea	eax, [ebp+18h]
		mov	[esp+0FCh+Buf1], eax ; Buf1
		call	memcmp
		test	eax, eax
		jnz	loc_688988E4

loc_68898783:				; CODE XREF: peer_oft_recv_frame+305j
		mov	eax, [ebp+84h]
		mov	[esp+0FCh+Buf1], eax
		call	purple_input_remove
		mov	dword ptr [ebp+84h], 0
		mov	[esp+0FCh+Size], ebp
		mov	[esp+0FCh+Buf2], offset	sub_688982C8
		mov	[esp+0FCh+Buf1], 64h
		call	purple_timeout_add
		mov	[ebp+16Ch], eax
		jmp	loc_68898728
; ---------------------------------------------------------------------------
		align 10h

loc_688987C0:				; CODE XREF: peer_oft_recv_frame+240j
		mov	eax, [ebp+164h]
		mov	[esp+0FCh+Buf1], eax
		call	g_free
		lea	ebx, [ebp+0A8h]
		mov	ecx, 31h
		mov	edi, ebx
		rep movsd
		mov	eax, [esp+0FCh+var_24]
		mov	[esp+0FCh+Buf2], eax
		mov	eax, [esp+0FCh+var_28]
		mov	[esp+0FCh+Buf1], eax
		call	g_memdup
		mov	[ebp+164h], eax
		mov	word ptr [ebp+0A8h], 202h
		mov	eax, [ebp+18h]
		mov	[ebp+0AAh], eax
		mov	eax, [ebp+1Ch]
		mov	[ebp+0AEh], eax
		mov	edx, ebx
		mov	eax, ebp
		call	sub_68897F5C
		jmp	loc_68898783
; ---------------------------------------------------------------------------
		align 4

loc_68898828:				; CODE XREF: peer_oft_recv_frame+1F2j
		mov	eax, [ebp+0A4h]
		mov	[esp+0FCh+Buf1], eax
		call	purple_xfer_is_completed
		test	eax, eax
		jz	loc_68898918

loc_6889883E:				; CODE XREF: peer_oft_recv_frame+412j
		mov	eax, [ebp+84h]
		mov	[esp+0FCh+Buf1], eax
		call	purple_input_remove
		mov	dword ptr [ebp+84h], 0
		mov	eax, [ebp+0A4h]
		mov	edx, [ebp+54h]
		mov	[eax+30h], edx
		mov	dword ptr [ebp+54h], 0FFFFFFFFh
		mov	dword ptr [ebp+34h], 0
		mov	[esp+0FCh+Size], 0
		mov	[esp+0FCh+Buf2], 0
		mov	[esp+0FCh+Buf1], ebp
		call	peer_connection_schedule_destroy
		jmp	loc_68898728
; ---------------------------------------------------------------------------
		align 10h

loc_68898890:				; CODE XREF: peer_oft_recv_frame+1FEj
		mov	[esp+0FCh+Size], 8 ; Size
		mov	[esp+0FCh+Buf2], edi ; Buf2
		lea	eax, [ebp+18h]
		mov	[esp+0FCh+Buf1], eax ; Buf1
		call	memcmp
		test	eax, eax
		jnz	short loc_688988E4
		mov	eax, [esp+0FCh+var_A8]
		mov	[ebp+0E4h], eax
		mov	eax, [esp+0FCh+var_BC]
		mov	[ebp+0D0h], eax
		mov	eax, [esp+0FCh+var_AC]
		mov	[ebp+0E0h], eax
		mov	edx, [ebp+0A4h]
		mov	[esp+0FCh+Buf1], eax
		mov	ecx, offset sub_688981BC
		mov	eax, ebp
		call	sub_68897E08
		jmp	loc_68898728
; ---------------------------------------------------------------------------
		align 4

loc_688988E4:				; CODE XREF: peer_oft_recv_frame+261j
					; peer_oft_recv_frame+38Dj
		mov	[esp+0FCh+Buf2], offset	aReceivedAnIn_0	; "Received an incorrect cookie.  Closing "...
		mov	[esp+0FCh+Buf1], offset	aOscar_12 ; "oscar"
		call	purple_debug_info
		mov	[esp+0FCh+Size], 0
		mov	[esp+0FCh+Buf2], 5
		mov	[esp+0FCh+Buf1], ebp
		call	peer_connection_destroy
		jmp	loc_68898728
; ---------------------------------------------------------------------------
		align 4

loc_68898918:				; CODE XREF: peer_oft_recv_frame+31Cj
		mov	[esp+0FCh+Buf2], 1
		mov	eax, [ebp+0A4h]
		mov	[esp+0FCh+Buf1], eax
		call	purple_xfer_set_completed
		jmp	loc_6889883E
; ---------------------------------------------------------------------------

loc_68898933:				; CODE XREF: peer_oft_recv_frame+228j
		call	__stack_chk_fail
peer_oft_recv_frame endp

; Exported entry 309. peer_oft_recvcb_init

; =============== S U B	R O U T	I N E =======================================


		public peer_oft_recvcb_init
peer_oft_recvcb_init proc near		; DATA XREF: peer_connection_got_proposition:loc_688A754Bo

var_10		= dword	ptr -10h
arg_0		= dword	ptr  4

		sub	esp, 1Ch
		mov	eax, ds:__stack_chk_guard
		mov	[esp+1Ch+var_10], eax
		xor	eax, eax
		mov	eax, [esp+1Ch+arg_0]
		mov	eax, [eax+7Ch]
		or	dword ptr [eax+28h], 2
		mov	edx, [esp+1Ch+var_10]
		xor	edx, ds:__stack_chk_guard
		jnz	short loc_68898969
		mov	[esp+1Ch+arg_0], eax
		add	esp, 1Ch
		jmp	peer_connection_trynext
; ---------------------------------------------------------------------------

loc_68898969:				; CODE XREF: peer_oft_recvcb_init+23j
		call	__stack_chk_fail
peer_oft_recvcb_init endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 308. peer_oft_recvcb_end

; =============== S U B	R O U T	I N E =======================================


		public peer_oft_recvcb_end
peer_oft_recvcb_end proc near		; DATA XREF: peer_connection_got_proposition+28Do

var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_10		= dword	ptr -10h
arg_0		= dword	ptr  4

		push	ebx
		sub	esp, 28h
		mov	eax, ds:__stack_chk_guard
		mov	[esp+2Ch+var_10], eax
		xor	eax, eax
		mov	eax, [esp+2Ch+arg_0]
		mov	ebx, [eax+7Ch]
		mov	eax, [ebx+0A4h]
		mov	edx, [eax+30h]
		mov	[ebx+54h], edx
		mov	dword ptr [eax+30h], 0FFFFFFFFh
		mov	word ptr [ebx+0A8h], 204h
		mov	dword ptr [ebx+0D0h], 0FFFF0000h
		mov	[esp+2Ch+var_2C], eax
		call	purple_xfer_get_bytes_sent
		mov	[ebx+0E0h], eax
		lea	edx, [ebx+0A8h]
		mov	eax, ebx
		call	sub_68897F5C
		mov	dword ptr [ebx+34h], 0
		mov	[esp+2Ch+var_24], ebx
		mov	[esp+2Ch+var_28], offset sub_68898260
		mov	[esp+2Ch+var_2C], 64h
		call	purple_timeout_add
		mov	[ebx+16Ch], eax
		mov	eax, [esp+2Ch+var_10]
		xor	eax, ds:__stack_chk_guard
		jnz	short loc_688989FD
		add	esp, 28h
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_688989FD:				; CODE XREF: peer_oft_recvcb_end+86j
		call	__stack_chk_fail
peer_oft_recvcb_end endp

; ---------------------------------------------------------------------------
		align 4
; Exported entry 307. peer_oft_recvcb_ack_recv

; =============== S U B	R O U T	I N E =======================================


		public peer_oft_recvcb_ack_recv
peer_oft_recvcb_ack_recv proc near	; DATA XREF: peer_connection_got_proposition+2CFo

var_2C		= dword	ptr -2Ch
var_10		= dword	ptr -10h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	edi
		push	esi
		push	ebx
		sub	esp, 20h
		mov	ecx, [esp+2Ch+arg_0]
		mov	esi, [esp+2Ch+arg_4]
		mov	edi, [esp+2Ch+arg_8]
		mov	eax, ds:__stack_chk_guard
		mov	[esp+2Ch+var_10], eax
		xor	eax, eax
		mov	ebx, [ecx+7Ch]
		mov	[esp+2Ch+var_2C], ecx
		call	purple_xfer_get_bytes_sent
		mov	ecx, [ebx+0E4h]
		and	eax, 1
		mov	[esp+2Ch+var_2C], eax
		mov	edx, edi
		mov	eax, esi
		call	sub_68897D98
		mov	[ebx+0E4h], eax
		mov	eax, [esp+2Ch+var_10]
		xor	eax, ds:__stack_chk_guard
		jnz	short loc_68898A5A
		add	esp, 20h
		pop	ebx
		pop	esi
		pop	edi
		retn
; ---------------------------------------------------------------------------

loc_68898A5A:				; CODE XREF: peer_oft_recvcb_ack_recv+4Dj
		call	__stack_chk_fail
peer_oft_recvcb_ack_recv endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 312. peer_oft_sendcb_init

; =============== S U B	R O U T	I N E =======================================


		public peer_oft_sendcb_init
peer_oft_sendcb_init proc near		; DATA XREF: oscar_new_xfer+4Do

Dest		= dword	ptr -2Ch
Source		= dword	ptr -28h
Count		= dword	ptr -24h
var_10		= dword	ptr -10h
arg_0		= dword	ptr  4

		push	edi
		push	esi
		push	ebx
		sub	esp, 20h
		mov	esi, [esp+2Ch+arg_0]
		mov	eax, ds:__stack_chk_guard
		mov	[esp+2Ch+var_10], eax
		xor	eax, eax
		mov	ebx, [esi+7Ch]
		or	dword ptr [ebx+28h], 2
		mov	[esp+2Ch+Dest],	esi
		call	purple_xfer_get_size
		mov	word ptr [ebx+0B6h], 1
		mov	word ptr [ebx+0B8h], 1
		mov	word ptr [ebx+0BAh], 1
		mov	word ptr [ebx+0BCh], 1
		mov	[ebx+0C0h], eax
		mov	[ebx+0C4h], eax
		mov	dword ptr [ebx+0CCh], 0FFFF0000h
		mov	dword ptr [ebx+0D0h], 0FFFF0000h
		mov	dword ptr [ebx+0DCh], 0FFFF0000h
		mov	dword ptr [ebx+0E4h], 0FFFF0000h
		mov	[esp+2Ch+Count], 1Fh ; Count
		mov	[esp+2Ch+Source], offset aCoolFilexfer ; "Cool FileXfer"
		lea	eax, [ebx+0E8h]
		mov	[esp+2Ch+Dest],	eax ; Dest
		call	strncpy
		mov	dword ptr [ebx+0C8h], 0
		mov	dword ptr [ebx+0D8h], 0
		mov	eax, [esi+18h]
		mov	[esp+2Ch+Dest],	eax
		call	g_path_get_basename
		mov	edx, eax
		mov	[esi+14h], eax
		xor	eax, eax
		mov	ecx, 0FFFFFFFFh
		mov	edi, edx
		repne scasb
		not	ecx
		lea	eax, [ecx-1]
		cmp	ecx, 3Fh
		ja	short loc_68898B3D
		mov	eax, 3Fh
		mov	ecx, 40h

loc_68898B3D:				; CODE XREF: peer_oft_sendcb_init+D1j
		mov	[ebx+168h], ecx
		mov	[esp+2Ch+Source], eax
		mov	[esp+2Ch+Dest],	edx
		call	g_strndup
		mov	[ebx+164h], eax
		mov	eax, [esp+2Ch+var_10]
		xor	eax, ds:__stack_chk_guard
		jnz	short loc_68898B7D
		mov	[esp+2Ch+arg_0], 0FFFFFFFFh
		mov	ecx, offset sub_68897F20
		mov	edx, esi
		mov	eax, ebx
		add	esp, 20h
		pop	ebx
		pop	esi
		pop	edi
		jmp	sub_68897E08
; ---------------------------------------------------------------------------

loc_68898B7D:				; CODE XREF: peer_oft_sendcb_init+FFj
		call	__stack_chk_fail
peer_oft_sendcb_init endp

; ---------------------------------------------------------------------------
		align 4
; Exported entry 311. peer_oft_sendcb_ack

; =============== S U B	R O U T	I N E =======================================


		public peer_oft_sendcb_ack
peer_oft_sendcb_ack proc near		; DATA XREF: oscar_new_xfer+7Do

var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_10		= dword	ptr -10h
arg_0		= dword	ptr  4

		push	esi
		push	ebx
		sub	esp, 24h
		mov	ebx, [esp+2Ch+arg_0]
		mov	eax, ds:__stack_chk_guard
		mov	[esp+2Ch+var_10], eax
		xor	eax, eax
		mov	esi, [ebx+7Ch]
		mov	[esp+2Ch+var_2C], ebx
		call	purple_xfer_get_bytes_remaining
		test	eax, eax
		jnz	short loc_68898BE1
		mov	eax, [ebx+34h]
		mov	[esp+2Ch+var_2C], eax
		call	purple_input_remove
		mov	eax, [ebx+30h]
		mov	[esi+54h], eax
		mov	dword ptr [ebx+30h], 0FFFFFFFFh
		mov	[esp+2Ch+var_20], esi
		mov	[esp+2Ch+var_24], offset peer_connection_recv_cb
		mov	[esp+2Ch+var_28], 1
		mov	[esp+2Ch+var_2C], eax
		call	purple_input_add
		mov	[esi+84h], eax

loc_68898BE1:				; CODE XREF: peer_oft_sendcb_ack+21j
		mov	eax, [esp+2Ch+var_10]
		xor	eax, ds:__stack_chk_guard
		jnz	short loc_68898BF3
		add	esp, 24h
		pop	ebx
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_68898BF3:				; CODE XREF: peer_oft_sendcb_ack+67j
		call	__stack_chk_fail
peer_oft_sendcb_ack endp

; Exported entry 303. peer_oft_cb_generic_cancel

; =============== S U B	R O U T	I N E =======================================


		public peer_oft_cb_generic_cancel
peer_oft_cb_generic_cancel proc	near	; DATA XREF: oscar_new_xfer+5Do
					; oscar_new_xfer+6Do ...

var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_10		= dword	ptr -10h
arg_0		= dword	ptr  4

		sub	esp, 2Ch
		mov	eax, ds:__stack_chk_guard
		mov	[esp+2Ch+var_10], eax
		xor	eax, eax
		mov	eax, [esp+2Ch+arg_0]
		mov	eax, [eax+7Ch]
		test	eax, eax
		jz	short loc_68898C29
		mov	[esp+2Ch+var_24], 0
		mov	[esp+2Ch+var_28], 1
		mov	[esp+2Ch+var_2C], eax
		call	peer_connection_destroy

loc_68898C29:				; CODE XREF: peer_oft_cb_generic_cancel+17j
		mov	eax, [esp+2Ch+var_10]
		xor	eax, ds:__stack_chk_guard
		jnz	short loc_68898C39
		add	esp, 2Ch
		retn
; ---------------------------------------------------------------------------

loc_68898C39:				; CODE XREF: peer_oft_cb_generic_cancel+3Bj
		call	__stack_chk_fail
peer_oft_cb_generic_cancel endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_68898C40	proc near		; DATA XREF: oscar_login+7CEo

var_10		= dword	ptr -10h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	ebx
		sub	esp, 18h
		mov	ebx, [esp+1Ch+arg_0]
		mov	ecx, [esp+1Ch+arg_4]
		mov	eax, ds:__stack_chk_guard
		mov	[esp+1Ch+var_10], eax
		xor	eax, eax
		mov	eax, ebx
		shr	eax, 10h
		mov	edx, ecx
		shr	edx, 10h
		cmp	eax, edx
		jz	short loc_68898C78
		sub	eax, edx

loc_68898C67:				; CODE XREF: sub_68898C40+43j
		mov	edx, [esp+1Ch+var_10]
		xor	edx, ds:__stack_chk_guard
		jnz	short loc_68898C85
		add	esp, 18h
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_68898C78:				; CODE XREF: sub_68898C40+23j
		movzx	eax, bx
		and	ecx, 0FFFFh
		sub	eax, ecx
		jmp	short loc_68898C67
; ---------------------------------------------------------------------------

loc_68898C85:				; CODE XREF: sub_68898C40+31j
		call	__stack_chk_fail
sub_68898C40	endp

; ---------------------------------------------------------------------------
		align 4

; =============== S U B	R O U T	I N E =======================================


sub_68898C8C	proc near		; DATA XREF: oscar_init+241o

Str1		= dword	ptr -3Ch
Str2		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2B		= byte ptr -2Bh
var_20		= dword	ptr -20h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 2Ch
		mov	esi, [esp+3Ch+arg_0]
		mov	ebp, [esp+3Ch+arg_4]
		mov	edi, [esp+3Ch+arg_8]
		mov	eax, ds:__stack_chk_guard
		mov	[esp+3Ch+var_20], eax
		xor	eax, eax
		mov	[esp+3Ch+Str2],	offset aAccount	; "account"
		mov	[esp+3Ch+Str1],	edi
		call	g_hash_table_lookup
		mov	ebx, eax
		mov	[esp+3Ch+Str2],	offset aAim ; "aim"
		mov	[esp+3Ch+Str1],	esi
		call	g_ascii_strcasecmp
		test	eax, eax
		jz	short loc_68898CE8
		mov	[esp+3Ch+Str2],	offset aIcq_0 ;	"icq"
		mov	[esp+3Ch+Str1],	esi
		call	g_ascii_strcasecmp
		test	eax, eax
		jnz	loc_68898E20

loc_68898CE8:				; CODE XREF: sub_68898C8C+42j
		mov	[esp+3Ch+var_30], esi
		mov	[esp+3Ch+var_34], offset aPrplS	; "prpl-%s"
		mov	[esp+3Ch+Str2],	0Bh
		lea	esi, [esp+3Ch+var_2B]
		mov	[esp+3Ch+Str1],	esi
		call	g_snprintf
		test	ebx, ebx
		jz	loc_68898DD4
		mov	[esp+3Ch+Str2],	esi
		mov	[esp+3Ch+Str1],	ebx
		call	purple_accounts_find
		mov	ebx, eax
		test	eax, eax
		jz	loc_68898E20
		mov	[esp+3Ch+Str1],	eax
		call	purple_account_is_connected
		test	eax, eax
		jz	loc_68898E20

loc_68898D36:				; CODE XREF: sub_68898C8C+18Bj
		mov	[esp+3Ch+Str2],	offset aGoim ; "GoIM"
		mov	[esp+3Ch+Str1],	ebp
		call	g_ascii_strcasecmp
		test	eax, eax
		jnz	loc_68898E3C
		mov	[esp+3Ch+Str2],	offset aScreenname ; "screenname"
		mov	[esp+3Ch+Str1],	edi
		call	g_hash_table_lookup
		mov	ebp, eax
		test	eax, eax
		jz	loc_68898F2E
		mov	[esp+3Ch+Str2],	offset aMessage_1 ; "message"
		mov	[esp+3Ch+Str1],	edi
		call	g_hash_table_lookup
		mov	edi, eax
		mov	[esp+3Ch+var_34], ebx
		mov	[esp+3Ch+Str2],	ebp
		mov	[esp+3Ch+Str1],	1
		call	purple_find_conversation_with_account
		mov	esi, eax
		test	eax, eax
		jz	loc_68898F38

loc_68898D98:				; CODE XREF: sub_68898C8C+2C2j
		mov	[esp+3Ch+Str1],	esi
		call	purple_conversation_present
		test	edi, edi
		jz	loc_68898F2E
		mov	[esp+3Ch+var_34], 20h
		mov	[esp+3Ch+Str2],	offset asc_688B1B44 ; "+"
		mov	[esp+3Ch+Str1],	edi
		call	g_strdelimit
		mov	[esp+3Ch+Str2],	edi
		mov	[esp+3Ch+Str1],	esi
		call	purple_conv_send_confirm
		mov	eax, 1
		jmp	short loc_68898E22
; ---------------------------------------------------------------------------
		align 4

loc_68898DD4:				; CODE XREF: sub_68898C8C+7Ej
		call	purple_accounts_get_all
		mov	ebx, eax
		test	eax, eax
		jnz	short loc_68898DEB
		jmp	short loc_68898E20
; ---------------------------------------------------------------------------
		align 4

loc_68898DE4:				; CODE XREF: sub_68898C8C+177j
					; sub_68898C8C+185j
		mov	ebx, [ebx+4]
		test	ebx, ebx
		jz	short loc_68898E20

loc_68898DEB:				; CODE XREF: sub_68898C8C+151j
		mov	eax, [ebx]
		mov	[esp+3Ch+Str1],	eax
		call	purple_account_get_protocol_id
		mov	[esp+3Ch+Str2],	eax ; Str2
		mov	[esp+3Ch+Str1],	esi ; Str1
		call	strcmp
		test	eax, eax
		jnz	short loc_68898DE4
		mov	eax, [ebx]
		mov	[esp+3Ch+Str1],	eax
		call	purple_account_is_connected
		test	eax, eax
		jz	short loc_68898DE4
		mov	ebx, [ebx]
		test	ebx, ebx
		jnz	loc_68898D36
		lea	esi, [esi+0]

loc_68898E20:				; CODE XREF: sub_68898C8C+56j
					; sub_68898C8C+94j ...
		xor	eax, eax

loc_68898E22:				; CODE XREF: sub_68898C8C+145j
					; sub_68898C8C+24Bj ...
		mov	edx, [esp+3Ch+var_20]
		xor	edx, ds:__stack_chk_guard
		jnz	loc_68898F53
		add	esp, 2Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 4

loc_68898E3C:				; CODE XREF: sub_68898C8C+BCj
		mov	[esp+3Ch+Str2],	offset aGochat ; "GoChat"
		mov	[esp+3Ch+Str1],	ebp
		call	g_ascii_strcasecmp
		test	eax, eax
		jnz	loc_68898EDC
		mov	[esp+3Ch+Str2],	offset aRoomname ; "roomname"
		mov	[esp+3Ch+Str1],	edi
		call	g_hash_table_lookup
		mov	esi, eax
		test	eax, eax
		jz	loc_68898F2E
		mov	[esp+3Ch+Str1],	offset a4 ; "4"
		call	g_strdup
		mov	ebp, eax
		mov	[esp+3Ch+Str1],	offset aExchange ; "exchange"
		call	g_strdup
		mov	[esp+3Ch+var_34], ebp
		mov	[esp+3Ch+Str2],	eax
		mov	[esp+3Ch+Str1],	edi
		call	g_hash_table_insert
		mov	[esp+3Ch+Str1],	esi
		call	g_strdup
		mov	esi, eax
		mov	[esp+3Ch+Str1],	offset aRoom ; "room"
		call	g_strdup
		mov	[esp+3Ch+var_34], esi
		mov	[esp+3Ch+Str2],	eax
		mov	[esp+3Ch+Str1],	edi
		call	g_hash_table_insert
		mov	[esp+3Ch+Str1],	ebx
		call	purple_account_get_connection
		mov	[esp+3Ch+Str2],	edi
		mov	[esp+3Ch+Str1],	eax
		call	serv_join_chat
		mov	eax, 1
		jmp	loc_68898E22
; ---------------------------------------------------------------------------

loc_68898EDC:				; CODE XREF: sub_68898C8C+1C2j
		mov	[esp+3Ch+Str2],	offset aAddbuddy ; "AddBuddy"
		mov	[esp+3Ch+Str1],	ebp
		call	g_ascii_strcasecmp
		test	eax, eax
		jnz	loc_68898E20
		mov	[esp+3Ch+Str2],	offset aScreenname ; "screenname"
		mov	[esp+3Ch+Str1],	edi
		call	g_hash_table_lookup
		mov	esi, eax
		mov	[esp+3Ch+Str2],	offset aGroupname ; "groupname"
		mov	[esp+3Ch+Str1],	edi
		call	g_hash_table_lookup
		mov	[esp+3Ch+var_30], 0
		mov	[esp+3Ch+var_34], eax
		mov	[esp+3Ch+Str2],	esi
		mov	[esp+3Ch+Str1],	ebx
		call	purple_blist_request_add_buddy

loc_68898F2E:				; CODE XREF: sub_68898C8C+D6j
					; sub_68898C8C+116j ...
		mov	eax, 1
		jmp	loc_68898E22
; ---------------------------------------------------------------------------

loc_68898F38:				; CODE XREF: sub_68898C8C+106j
		mov	[esp+3Ch+var_34], ebp
		mov	[esp+3Ch+Str2],	ebx
		mov	[esp+3Ch+Str1],	1
		call	purple_conversation_new
		mov	esi, eax
		jmp	loc_68898D98
; ---------------------------------------------------------------------------

loc_68898F53:				; CODE XREF: sub_68898C8C+1A0j
		call	__stack_chk_fail
sub_68898C8C	endp


; =============== S U B	R O U T	I N E =======================================


sub_68898F58	proc near		; DATA XREF: sub_68899BD8+10Do

var_2C		= dword	ptr -2Ch
var_10		= dword	ptr -10h
arg_0		= dword	ptr  4

		push	ebx
		sub	esp, 28h
		mov	ebx, [esp+2Ch+arg_0]
		mov	eax, ds:__stack_chk_guard
		mov	[esp+2Ch+var_10], eax
		xor	eax, eax
		mov	eax, [ebx+4]
		mov	[esp+2Ch+var_2C], eax
		call	g_free
		mov	eax, [esp+2Ch+var_10]
		xor	eax, ds:__stack_chk_guard
		jnz	short loc_68898F8F
		mov	[esp+2Ch+arg_0], ebx
		add	esp, 28h
		pop	ebx
		jmp	g_free
; ---------------------------------------------------------------------------

loc_68898F8F:				; CODE XREF: sub_68898F58+28j
		call	__stack_chk_fail
sub_68898F58	endp

; Exported entry 236. oscar_free_name_data

; =============== S U B	R O U T	I N E =======================================


		public oscar_free_name_data
oscar_free_name_data proc near		; CODE XREF: .text:688813F6j
					; sub_6888141C+50j ...

var_2C		= dword	ptr -2Ch
var_10		= dword	ptr -10h
arg_0		= dword	ptr  4

		push	ebx
		sub	esp, 28h
		mov	ebx, [esp+2Ch+arg_0]
		mov	eax, ds:__stack_chk_guard
		mov	[esp+2Ch+var_10], eax
		xor	eax, eax
		mov	eax, [ebx+4]
		mov	[esp+2Ch+var_2C], eax
		call	g_free
		mov	eax, [ebx+8]
		mov	[esp+2Ch+var_2C], eax
		call	g_free
		mov	eax, [esp+2Ch+var_10]
		xor	eax, ds:__stack_chk_guard
		jnz	short loc_68898FD6
		mov	[esp+2Ch+arg_0], ebx
		add	esp, 28h
		pop	ebx
		jmp	g_free
; ---------------------------------------------------------------------------

loc_68898FD6:				; CODE XREF: oscar_free_name_data+33j
		call	__stack_chk_fail
oscar_free_name_data endp

; ---------------------------------------------------------------------------
		align 4

; =============== S U B	R O U T	I N E =======================================


sub_68898FDC	proc near		; CODE XREF: .text:6889B88Cp
					; sub_6889D300+1Fp ...

var_2C		= dword	ptr -2Ch
var_10		= dword	ptr -10h

		push	ebx
		sub	esp, 28h
		mov	ebx, edx
		mov	edx, ds:__stack_chk_guard
		mov	[esp+2Ch+var_10], edx
		xor	edx, edx
		mov	[esp+2Ch+var_2C], eax
		call	purple_connection_get_protocol_data
		mov	ecx, [eax+34h]
		test	ecx, ecx
		jnz	short loc_68899007
		jmp	short loc_68899020
; ---------------------------------------------------------------------------
		align 10h

loc_68899000:				; CODE XREF: sub_68898FDC+30j
		mov	ecx, [ecx+4]
		test	ecx, ecx
		jz	short loc_68899020

loc_68899007:				; CODE XREF: sub_68898FDC+1Fj
		mov	eax, [ecx]
		cmp	[eax+0Ch], ebx
		jnz	short loc_68899000

loc_6889900E:				; CODE XREF: sub_68898FDC+46j
		mov	edx, [esp+2Ch+var_10]
		xor	edx, ds:__stack_chk_guard
		jnz	short loc_68899024
		add	esp, 28h
		pop	ebx
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_68899020:				; CODE XREF: sub_68898FDC+21j
					; sub_68898FDC+29j
		xor	eax, eax
		jmp	short loc_6889900E
; ---------------------------------------------------------------------------

loc_68899024:				; CODE XREF: sub_68898FDC+3Cj
		call	__stack_chk_fail
sub_68898FDC	endp

; ---------------------------------------------------------------------------
		align 4

; =============== S U B	R O U T	I N E =======================================


sub_6889902C	proc near		; DATA XREF: sub_6889B308+13Fo
					; sub_6889F454+C37o

var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_10		= dword	ptr -10h
arg_0		= dword	ptr  4

		push	edi
		push	esi
		push	ebx
		sub	esp, 20h
		mov	ebx, [esp+2Ch+arg_0]
		mov	eax, ds:__stack_chk_guard
		mov	[esp+2Ch+var_10], eax
		xor	eax, eax
		mov	edi, [ebx+8]
		mov	esi, [ebx+4]
		mov	eax, [ebx]
		mov	[esp+2Ch+var_2C], eax
		call	purple_connection_get_account
		mov	[esp+2Ch+var_20], edi
		mov	[esp+2Ch+var_24], 0
		mov	[esp+2Ch+var_28], esi
		mov	[esp+2Ch+var_2C], eax
		call	purple_blist_request_add_buddy
		mov	eax, [esp+2Ch+var_10]
		xor	eax, ds:__stack_chk_guard
		jnz	short loc_68899084
		mov	[esp+2Ch+arg_0], ebx
		add	esp, 20h
		pop	ebx
		pop	esi
		pop	edi
		jmp	oscar_free_name_data
; ---------------------------------------------------------------------------

loc_68899084:				; CODE XREF: sub_6889902C+47j
		call	__stack_chk_fail
sub_6889902C	endp

; ---------------------------------------------------------------------------
		align 4

; =============== S U B	R O U T	I N E =======================================


sub_6889908C	proc near		; DATA XREF: oscar_actions+1F8o

var_7C		= dword	ptr -7Ch
var_78		= dword	ptr -78h
var_74		= dword	ptr -74h
var_70		= dword	ptr -70h
var_6C		= dword	ptr -6Ch
var_68		= dword	ptr -68h
var_64		= dword	ptr -64h
var_60		= dword	ptr -60h
var_5C		= dword	ptr -5Ch
var_58		= dword	ptr -58h
var_54		= dword	ptr -54h
var_50		= dword	ptr -50h
var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_20		= dword	ptr -20h
arg_0		= dword	ptr  4

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 6Ch
		mov	eax, ds:__stack_chk_guard
		mov	[esp+7Ch+var_20], eax
		xor	eax, eax
		mov	eax, [esp+7Ch+arg_0]
		mov	ebx, [eax+0Ch]
		mov	[esp+7Ch+var_7C], ebx
		call	purple_connection_get_account
		mov	[esp+7Ch+var_78], offset a_cancel ; "_Cancel"
		mov	[esp+7Ch+var_7C], offset aPidgin_6 ; "pidgin"
		mov	[esp+7Ch+var_34], eax
		call	libintl_dgettext
		mov	[esp+7Ch+var_78], offset a_search ; "_Search"
		mov	[esp+7Ch+var_7C], offset aPidgin_6 ; "pidgin"
		mov	[esp+7Ch+var_30], eax
		call	libintl_dgettext
		mov	ebp, eax
		mov	[esp+7Ch+var_78], offset aTypeTheEmailAd ; "Type the email address of the buddy	you"...
		mov	[esp+7Ch+var_7C], offset aPidgin_6 ; "pidgin"
		call	libintl_dgettext
		mov	edi, eax
		mov	[esp+7Ch+var_78], offset aSearchForABudd ; "Search for a buddy by email	address"
		mov	[esp+7Ch+var_7C], offset aPidgin_6 ; "pidgin"
		call	libintl_dgettext
		mov	esi, eax
		mov	[esp+7Ch+var_78], offset aFindBuddyByEma ; "Find Buddy by Email"
		mov	[esp+7Ch+var_7C], offset aPidgin_6 ; "pidgin"
		call	libintl_dgettext
		mov	[esp+7Ch+var_40], ebx
		mov	[esp+7Ch+var_44], 0
		mov	[esp+7Ch+var_48], 0
		mov	ecx, [esp+7Ch+var_34]
		mov	[esp+7Ch+var_4C], ecx
		mov	[esp+7Ch+var_50], 0
		mov	edx, [esp+7Ch+var_30]
		mov	[esp+7Ch+var_54], edx
		mov	[esp+7Ch+var_58], offset sub_68899290
		mov	[esp+7Ch+var_5C], ebp
		mov	[esp+7Ch+var_60], 0
		mov	[esp+7Ch+var_64], 0
		mov	[esp+7Ch+var_68], 0
		mov	[esp+7Ch+var_6C], 0
		mov	[esp+7Ch+var_70], edi
		mov	[esp+7Ch+var_74], esi
		mov	[esp+7Ch+var_78], eax
		mov	[esp+7Ch+var_7C], ebx
		call	purple_request_input
		mov	eax, [esp+7Ch+var_20]
		xor	eax, ds:__stack_chk_guard
		jnz	short loc_688991A2
		add	esp, 6Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_688991A2:				; CODE XREF: sub_6889908C+10Cj
		call	__stack_chk_fail
sub_6889908C	endp

; ---------------------------------------------------------------------------
		align 4

; =============== S U B	R O U T	I N E =======================================


sub_688991A8	proc near		; DATA XREF: oscar_actions+174o

var_6C		= dword	ptr -6Ch
var_68		= dword	ptr -68h
var_64		= dword	ptr -64h
var_60		= dword	ptr -60h
var_5C		= dword	ptr -5Ch
var_58		= dword	ptr -58h
var_54		= dword	ptr -54h
var_50		= dword	ptr -50h
var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_20		= dword	ptr -20h
arg_0		= dword	ptr  4

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 5Ch
		mov	eax, ds:__stack_chk_guard
		mov	[esp+6Ch+var_20], eax
		xor	eax, eax
		mov	eax, [esp+6Ch+arg_0]
		mov	ebx, [eax+0Ch]
		mov	[esp+6Ch+var_6C], ebx
		call	purple_connection_get_account
		mov	ebp, eax
		mov	[esp+6Ch+var_68], offset a_cancel ; "_Cancel"
		mov	[esp+6Ch+var_6C], offset aPidgin_6 ; "pidgin"
		call	libintl_dgettext
		mov	edi, eax
		mov	[esp+6Ch+var_68], offset a_ok ;	"_OK"
		mov	[esp+6Ch+var_6C], offset aPidgin_6 ; "pidgin"
		call	libintl_dgettext
		mov	esi, eax
		mov	[esp+6Ch+var_68], offset aChangeAddressT ; "Change Address To:"
		mov	[esp+6Ch+var_6C], offset aPidgin_6 ; "pidgin"
		call	libintl_dgettext
		mov	[esp+6Ch+var_30], ebx
		mov	[esp+6Ch+var_34], 0
		mov	[esp+6Ch+var_38], 0
		mov	[esp+6Ch+var_3C], ebp
		mov	[esp+6Ch+var_40], 0
		mov	[esp+6Ch+var_44], edi
		mov	[esp+6Ch+var_48], offset loc_68899458
		mov	[esp+6Ch+var_4C], esi
		mov	[esp+6Ch+var_50], 0
		mov	[esp+6Ch+var_54], 0
		mov	[esp+6Ch+var_58], 0
		mov	[esp+6Ch+var_5C], 0
		mov	[esp+6Ch+var_60], 0
		mov	[esp+6Ch+var_64], eax
		mov	[esp+6Ch+var_68], 0
		mov	[esp+6Ch+var_6C], ebx
		call	purple_request_input
		mov	eax, [esp+6Ch+var_20]
		xor	eax, ds:__stack_chk_guard
		jnz	short loc_6889928B
		add	esp, 5Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_6889928B:				; CODE XREF: sub_688991A8+D9j
		call	__stack_chk_fail
sub_688991A8	endp


; =============== S U B	R O U T	I N E =======================================


sub_68899290	proc near		; DATA XREF: sub_6889908C+C2o

var_2C		= dword	ptr -2Ch
var_10		= dword	ptr -10h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	ebx
		sub	esp, 28h
		mov	ebx, [esp+2Ch+arg_4]
		mov	eax, ds:__stack_chk_guard
		mov	[esp+2Ch+var_10], eax
		xor	eax, eax
		mov	eax, [esp+2Ch+arg_0]
		mov	[esp+2Ch+var_2C], eax
		call	purple_connection_get_protocol_data
		mov	edx, [esp+2Ch+var_10]
		xor	edx, ds:__stack_chk_guard
		jnz	short loc_688992CC
		mov	[esp+2Ch+arg_4], ebx
		mov	[esp+2Ch+arg_0], eax
		add	esp, 28h
		pop	ebx
		jmp	aim_search_address
; ---------------------------------------------------------------------------

loc_688992CC:				; CODE XREF: sub_68899290+29j
		call	__stack_chk_fail
sub_68899290	endp

; ---------------------------------------------------------------------------
		align 4

; =============== S U B	R O U T	I N E =======================================


sub_688992D4	proc near		; DATA XREF: oscar_actions+1B6o

var_5C		= dword	ptr -5Ch
var_58		= dword	ptr -58h
var_54		= dword	ptr -54h
var_50		= dword	ptr -50h
var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_20		= dword	ptr -20h
arg_0		= dword	ptr  4

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 4Ch
		mov	eax, ds:__stack_chk_guard
		mov	[esp+5Ch+var_20], eax
		xor	eax, eax
		mov	eax, [esp+5Ch+arg_0]
		mov	eax, [eax+0Ch]
		mov	[esp+5Ch+var_34], eax
		mov	[esp+5Ch+var_5C], eax
		call	purple_connection_get_protocol_data
		mov	esi, eax
		mov	eax, [esp+5Ch+var_34]
		mov	[esp+5Ch+var_5C], eax
		call	purple_connection_get_account
		mov	[esp+5Ch+var_58], 0
		mov	[esp+5Ch+var_5C], eax
		call	purple_find_buddies
		mov	[esp+5Ch+var_30], eax
		test	eax, eax
		jz	loc_68899443
		mov	ebp, eax
		mov	[esp+5Ch+var_38], 0
		jmp	short loc_68899337
; ---------------------------------------------------------------------------
		align 10h

loc_68899330:				; CODE XREF: sub_688992D4+98j
		mov	ebp, [ebp+4]
		test	ebp, ebp
		jz	short loc_68899389

loc_68899337:				; CODE XREF: sub_688992D4+59j
					; sub_688992D4+B3j
		mov	ebx, [ebp+0]
		mov	[esp+5Ch+var_5C], ebx
		call	purple_buddy_get_name
		mov	edi, eax
		mov	[esp+5Ch+var_5C], ebx
		call	purple_buddy_get_group
		mov	[esp+5Ch+var_5C], eax
		call	purple_group_get_name
		mov	[esp+5Ch+var_54], edi
		mov	[esp+5Ch+var_58], eax
		mov	eax, [esi+0D8h]
		mov	[esp+5Ch+var_5C], eax
		call	aim_ssi_waitingforauth
		test	eax, eax
		jz	short loc_68899330
		mov	[esp+5Ch+var_58], ebx
		mov	eax, [esp+5Ch+var_38]
		mov	[esp+5Ch+var_5C], eax
		call	g_slist_prepend
		mov	[esp+5Ch+var_38], eax
		mov	ebp, [ebp+4]
		test	ebp, ebp
		jnz	short loc_68899337

loc_68899389:				; CODE XREF: sub_688992D4+61j
					; sub_688992D4+177j
		mov	eax, [esp+5Ch+var_30]
		mov	[esp+5Ch+var_5C], eax
		call	g_slist_free
		mov	eax, [esp+5Ch+var_38]
		mov	[esp+5Ch+var_5C], eax
		call	g_slist_reverse
		mov	esi, eax
		mov	[esp+5Ch+var_58], offset aYouAreNotWaiti ; "you	are not	waiting	for authorization"
		mov	[esp+5Ch+var_5C], offset aPidgin_6 ; "pidgin"
		call	libintl_dgettext
		mov	[esp+5Ch+var_58], eax
		mov	[esp+5Ch+var_5C], esi
		call	oscar_format_buddies
		mov	ebx, eax
		mov	[esp+5Ch+var_5C], esi
		call	g_slist_free
		mov	[esp+5Ch+var_58], offset aYouCanReReques ; "You	can re-request authorization from t"...
		mov	[esp+5Ch+var_5C], offset aPidgin_6 ; "pidgin"
		call	libintl_dgettext
		mov	esi, eax
		mov	[esp+5Ch+var_58], offset aYouAreAwaiting ; "You	are awaiting authorization from	the"...
		mov	[esp+5Ch+var_5C], offset aPidgin_6 ; "pidgin"
		call	libintl_dgettext
		mov	[esp+5Ch+var_44], 0
		mov	[esp+5Ch+var_48], 0
		mov	[esp+5Ch+var_4C], ebx
		mov	[esp+5Ch+var_50], esi
		mov	[esp+5Ch+var_54], eax
		mov	[esp+5Ch+var_58], 0
		mov	eax, [esp+5Ch+var_34]
		mov	[esp+5Ch+var_5C], eax
		call	purple_notify_formatted
		mov	eax, [esp+5Ch+var_20]
		xor	eax, ds:__stack_chk_guard
		jnz	short loc_68899450
		mov	[esp+5Ch+arg_0], ebx
		add	esp, 4Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		jmp	g_free
; ---------------------------------------------------------------------------

loc_68899443:				; CODE XREF: sub_688992D4+49j
		mov	[esp+5Ch+var_38], 0
		jmp	loc_68899389
; ---------------------------------------------------------------------------

loc_68899450:				; CODE XREF: sub_688992D4+15Dj
		call	__stack_chk_fail
sub_688992D4	endp

; ---------------------------------------------------------------------------
		align 4

loc_68899458:				; DATA XREF: sub_688991A8+87o
		push	esi
		push	ebx
		sub	esp, 24h
		mov	esi, [esp+34h]
		mov	eax, ds:__stack_chk_guard
		mov	[esp+1Ch], eax
		xor	eax, eax
		mov	eax, [esp+30h]
		mov	[esp], eax
		call	purple_connection_get_protocol_data
		mov	ebx, eax
		mov	dword ptr [esp+4], 7
		mov	[esp], eax
		call	flap_connection_getbytype
		test	eax, eax
		jz	short loc_688994B0
		mov	[esp+8], esi
		mov	[esp+4], eax
		mov	[esp], ebx
		call	aim_admin_setemail
		mov	eax, [esp+1Ch]
		xor	eax, ds:__stack_chk_guard
		jnz	short loc_688994E4
		add	esp, 24h
		pop	ebx
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_688994B0:				; CODE XREF: .text:6889948Cj
		mov	dword ptr [ebx+18h], 1
		mov	[esp], esi
		call	g_strdup
		mov	[ebx+1Ch], eax
		mov	eax, [esp+1Ch]
		xor	eax, ds:__stack_chk_guard
		jnz	short loc_688994E4
		mov	dword ptr [esp+34h], 7
		mov	[esp+30h], ebx
		add	esp, 24h
		pop	ebx
		pop	esi
		jmp	aim_srv_requestnew
; ---------------------------------------------------------------------------

loc_688994E4:				; CODE XREF: .text:688994A8j
					; .text:688994CCj
		call	__stack_chk_fail
; ---------------------------------------------------------------------------
		align 4

; =============== S U B	R O U T	I N E =======================================


sub_688994EC	proc near		; DATA XREF: oscar_actions+142o

var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_10		= dword	ptr -10h
arg_0		= dword	ptr  4

		push	ebx
		sub	esp, 28h
		mov	eax, ds:__stack_chk_guard
		mov	[esp+2Ch+var_10], eax
		xor	eax, eax
		mov	eax, [esp+2Ch+arg_0]
		mov	eax, [eax+0Ch]
		mov	[esp+2Ch+var_2C], eax
		call	purple_connection_get_protocol_data
		mov	ebx, eax
		mov	[esp+2Ch+var_28], 7
		mov	[esp+2Ch+var_2C], eax
		call	flap_connection_getbytype
		test	eax, eax
		jz	short loc_68899548
		mov	[esp+2Ch+var_24], 11h
		mov	[esp+2Ch+var_28], eax
		mov	[esp+2Ch+var_2C], ebx
		call	aim_admin_getinfo

loc_68899534:				; CODE XREF: sub_688994EC+73j
		mov	eax, [esp+2Ch+var_10]
		xor	eax, ds:__stack_chk_guard
		jnz	short loc_68899561
		add	esp, 28h
		pop	ebx
		retn
; ---------------------------------------------------------------------------
		align 4

loc_68899548:				; CODE XREF: sub_688994EC+32j
		mov	dword ptr [ebx+14h], 1
		mov	[esp+2Ch+var_28], 7
		mov	[esp+2Ch+var_2C], ebx
		call	aim_srv_requestnew
		jmp	short loc_68899534
; ---------------------------------------------------------------------------

loc_68899561:				; CODE XREF: sub_688994EC+52j
		call	__stack_chk_fail
sub_688994EC	endp

; ---------------------------------------------------------------------------
		align 4

; =============== S U B	R O U T	I N E =======================================


sub_68899568	proc near		; DATA XREF: oscar_actions+110o

var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_10		= dword	ptr -10h
arg_0		= dword	ptr  4

		push	ebx
		sub	esp, 28h
		mov	eax, ds:__stack_chk_guard
		mov	[esp+2Ch+var_10], eax
		xor	eax, eax
		mov	eax, [esp+2Ch+arg_0]
		mov	eax, [eax+0Ch]
		mov	[esp+2Ch+var_2C], eax
		call	purple_connection_get_protocol_data
		mov	ebx, eax
		mov	[esp+2Ch+var_28], 7
		mov	[esp+2Ch+var_2C], eax
		call	flap_connection_getbytype
		test	eax, eax
		jz	short loc_688995BC
		mov	[esp+2Ch+var_28], eax
		mov	[esp+2Ch+var_2C], ebx
		call	aim_admin_reqconfirm

loc_688995A8:				; CODE XREF: sub_68899568+6Bj
		mov	eax, [esp+2Ch+var_10]
		xor	eax, ds:__stack_chk_guard
		jnz	short loc_688995D5
		add	esp, 28h
		pop	ebx
		retn
; ---------------------------------------------------------------------------
		align 4

loc_688995BC:				; CODE XREF: sub_68899568+32j
		mov	dword ptr [ebx+10h], 1
		mov	[esp+2Ch+var_28], 7
		mov	[esp+2Ch+var_2C], ebx
		call	aim_srv_requestnew
		jmp	short loc_688995A8
; ---------------------------------------------------------------------------

loc_688995D5:				; CODE XREF: sub_68899568+4Aj
		call	__stack_chk_fail
sub_68899568	endp

; ---------------------------------------------------------------------------
		align 4

; =============== S U B	R O U T	I N E =======================================


sub_688995DC	proc near		; DATA XREF: oscar_actions+248o

var_7C		= dword	ptr -7Ch
var_78		= dword	ptr -78h
var_74		= dword	ptr -74h
var_70		= dword	ptr -70h
var_6C		= dword	ptr -6Ch
var_68		= dword	ptr -68h
var_64		= dword	ptr -64h
var_60		= dword	ptr -60h
var_5C		= dword	ptr -5Ch
var_58		= dword	ptr -58h
var_54		= dword	ptr -54h
var_50		= dword	ptr -50h
var_4C		= dword	ptr -4Ch
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_20		= dword	ptr -20h
arg_0		= dword	ptr  4

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 6Ch
		mov	eax, ds:__stack_chk_guard
		mov	[esp+7Ch+var_20], eax
		xor	eax, eax
		mov	eax, [esp+7Ch+arg_0]
		mov	ebx, [eax+0Ch]
		mov	[esp+7Ch+var_7C], ebx
		call	purple_connection_get_account
		mov	esi, eax
		mov	[esp+7Ch+var_74], 1
		mov	[esp+7Ch+var_78], offset aAuthorization	; "authorization"
		mov	[esp+7Ch+var_7C], eax
		call	purple_account_get_bool
		mov	[esp+7Ch+var_74], 0
		mov	[esp+7Ch+var_78], offset aWeb_aware ; "web_aware"
		mov	[esp+7Ch+var_7C], esi
		mov	[esp+7Ch+var_34], eax
		call	purple_account_get_bool
		mov	ebp, eax
		call	purple_request_fields_new
		mov	edi, eax
		mov	[esp+7Ch+var_7C], 0
		call	purple_request_field_group_new
		mov	esi, eax
		mov	[esp+7Ch+var_78], offset aRequireAuthori ; "Require authorization"
		mov	[esp+7Ch+var_7C], offset aPidgin_6 ; "pidgin"
		call	libintl_dgettext
		mov	edx, [esp+7Ch+var_34]
		mov	[esp+7Ch+var_74], edx
		mov	[esp+7Ch+var_78], eax
		mov	[esp+7Ch+var_7C], offset aAuthorization	; "authorization"
		call	purple_request_field_bool_new
		mov	[esp+7Ch+var_78], eax
		mov	[esp+7Ch+var_7C], esi
		call	purple_request_field_group_add_field
		mov	[esp+7Ch+var_78], offset aWebAwareEnabli ; "Web	aware (enabling	this will cause	you"...
		mov	[esp+7Ch+var_7C], offset aPidgin_6 ; "pidgin"
		call	libintl_dgettext
		mov	[esp+7Ch+var_74], ebp
		mov	[esp+7Ch+var_78], eax
		mov	[esp+7Ch+var_7C], offset aWeb_aware ; "web_aware"
		call	purple_request_field_bool_new
		mov	[esp+7Ch+var_78], eax
		mov	[esp+7Ch+var_7C], esi
		call	purple_request_field_group_add_field
		mov	[esp+7Ch+var_78], esi
		mov	[esp+7Ch+var_7C], edi
		call	purple_request_fields_add_group
		mov	[esp+7Ch+var_7C], ebx
		call	purple_connection_get_account
		mov	[esp+7Ch+var_78], offset aCancel ; "Cancel"
		mov	[esp+7Ch+var_7C], offset aPidgin_6 ; "pidgin"
		mov	[esp+7Ch+var_30], eax
		call	libintl_dgettext
		mov	[esp+7Ch+var_78], offset aOk ; "OK"
		mov	[esp+7Ch+var_7C], offset aPidgin_6 ; "pidgin"
		mov	[esp+7Ch+var_34], eax
		call	libintl_dgettext
		mov	ebp, eax
		mov	[esp+7Ch+var_78], offset aIcqPrivacyOpti ; "ICQ	Privacy	Options"
		mov	[esp+7Ch+var_7C], offset aPidgin_6 ; "pidgin"
		call	libintl_dgettext
		mov	esi, eax
		mov	[esp+7Ch+var_78], offset aIcqPrivacyOpti ; "ICQ	Privacy	Options"
		mov	[esp+7Ch+var_7C], offset aPidgin_6 ; "pidgin"
		call	libintl_dgettext
		mov	[esp+7Ch+var_4C], ebx
		mov	[esp+7Ch+var_50], 0
		mov	[esp+7Ch+var_54], 0
		mov	ecx, [esp+7Ch+var_30]
		mov	[esp+7Ch+var_58], ecx
		mov	[esp+7Ch+var_5C], 0
		mov	edx, [esp+7Ch+var_34]
		mov	[esp+7Ch+var_60], edx
		mov	[esp+7Ch+var_64], offset sub_688999AC
		mov	[esp+7Ch+var_68], ebp
		mov	[esp+7Ch+var_6C], edi
		mov	[esp+7Ch+var_70], 0
		mov	[esp+7Ch+var_74], esi
		mov	[esp+7Ch+var_78], eax
		mov	[esp+7Ch+var_7C], ebx
		call	purple_request_fields
		mov	eax, [esp+7Ch+var_20]
		xor	eax, ds:__stack_chk_guard
		jnz	short loc_68899791
		add	esp, 6Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_68899791:				; CODE XREF: sub_688995DC+1ABj
		call	__stack_chk_fail
sub_688995DC	endp

; ---------------------------------------------------------------------------
		align 4

; =============== S U B	R O U T	I N E =======================================


sub_68899798	proc near		; CODE XREF: sub_68899944+14p
					; sub_6889A35C+300p

var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_10		= dword	ptr -10h

		push	edi
		push	esi
		push	ebx
		sub	esp, 20h
		mov	edx, ds:__stack_chk_guard
		mov	[esp+2Ch+var_10], edx
		xor	edx, edx
		mov	[esp+2Ch+var_2C], eax
		call	purple_connection_get_account
		mov	edi, eax
		mov	[esp+2Ch+var_2C], eax
		call	purple_account_get_active_status
		mov	[esp+2Ch+var_2C], eax
		call	purple_status_get_id
		mov	ebx, eax
		mov	[esp+2Ch+var_24], 0
		mov	[esp+2Ch+var_28], offset aWeb_aware ; "web_aware"
		mov	[esp+2Ch+var_2C], edi
		call	purple_account_get_bool
		cmp	eax, 1
		sbb	eax, eax
		and	eax, 0FFFF0000h
		add	eax, 30000h
		mov	edi, offset aAvailable_0 ; "available"
		mov	ecx, 0Ah
		mov	esi, ebx
		repe cmpsb
		jz	loc_688998E8
		mov	edi, offset aAway ; "away"
		mov	ecx, 5
		mov	esi, ebx
		repe cmpsb
		jz	loc_688998FC
		mov	edi, offset aDnd ; "dnd"
		mov	ecx, 4
		mov	esi, ebx
		repe cmpsb
		jz	loc_68899904
		mov	edi, offset aNa	; "na"
		mov	ecx, 3
		mov	esi, ebx
		repe cmpsb
		jz	loc_688998E4
		mov	edi, offset aOccupied ;	"occupied"
		mov	ecx, 9
		mov	esi, ebx
		repe cmpsb
		jz	loc_6889990C
		mov	edi, offset aFree4chat ; "free4chat"
		mov	ecx, 0Ah
		mov	esi, ebx
		repe cmpsb
		jz	loc_6889991C
		mov	edi, offset aInvisible ; "invisible"
		mov	ecx, 0Ah
		mov	esi, ebx
		repe cmpsb
		jz	loc_68899914
		mov	edi, offset aEvil ; "evil"
		mov	ecx, 5
		mov	esi, ebx
		repe cmpsb
		jz	loc_68899921
		mov	edi, offset aDepression	; "depression"
		mov	ecx, 0Bh
		mov	esi, ebx
		repe cmpsb
		jz	loc_68899926
		mov	edi, offset aAtwork ; "atwork"
		mov	ecx, 7
		mov	esi, ebx
		repe cmpsb
		jz	short loc_6889992B
		mov	edi, offset aAthome ; "athome"
		mov	ecx, 7
		mov	esi, ebx
		repe cmpsb
		jz	short loc_68899930
		mov	edi, offset aLunch ; "lunch"
		mov	ecx, 6
		mov	esi, ebx
		repe cmpsb
		jz	short loc_68899935
		mov	edi, offset aCustom ; "custom"
		mov	ecx, 7
		mov	esi, ebx
		repe cmpsb
		jnz	short loc_688998E8
		lea	esi, [esi+0]

loc_688998E4:				; CODE XREF: sub_68899798+9Fj
		or	eax, 5
		nop

loc_688998E8:				; CODE XREF: sub_68899798+63j
					; sub_68899798+147j ...
		mov	edx, [esp+2Ch+var_10]
		xor	edx, ds:__stack_chk_guard
		jnz	short loc_6889993C
		add	esp, 20h
		pop	ebx
		pop	esi
		pop	edi
		retn
; ---------------------------------------------------------------------------
		align 4

loc_688998FC:				; CODE XREF: sub_68899798+77j
		or	eax, 1
		jmp	short loc_688998E8
; ---------------------------------------------------------------------------
		align 4

loc_68899904:				; CODE XREF: sub_68899798+8Bj
		or	eax, 13h
		jmp	short loc_688998E8
; ---------------------------------------------------------------------------
		align 4

loc_6889990C:				; CODE XREF: sub_68899798+B3j
		or	eax, 11h
		jmp	short loc_688998E8
; ---------------------------------------------------------------------------
		align 4

loc_68899914:				; CODE XREF: sub_68899798+DBj
		or	ah, 1
		jmp	short loc_688998E8
; ---------------------------------------------------------------------------
		align 4

loc_6889991C:				; CODE XREF: sub_68899798+C7j
		or	eax, 20h
		jmp	short loc_688998E8
; ---------------------------------------------------------------------------

loc_68899921:				; CODE XREF: sub_68899798+EFj
		or	ah, 30h
		jmp	short loc_688998E8
; ---------------------------------------------------------------------------

loc_68899926:				; CODE XREF: sub_68899798+103j
		or	ah, 40h
		jmp	short loc_688998E8
; ---------------------------------------------------------------------------

loc_6889992B:				; CODE XREF: sub_68899798+117j
		or	ah, 60h
		jmp	short loc_688998E8
; ---------------------------------------------------------------------------

loc_68899930:				; CODE XREF: sub_68899798+127j
		or	ah, 50h
		jmp	short loc_688998E8
; ---------------------------------------------------------------------------

loc_68899935:				; CODE XREF: sub_68899798+137j
		or	eax, 2001h
		jmp	short loc_688998E8
; ---------------------------------------------------------------------------

loc_6889993C:				; CODE XREF: sub_68899798+15Aj
		call	__stack_chk_fail
sub_68899798	endp

; ---------------------------------------------------------------------------
		align 4

; =============== S U B	R O U T	I N E =======================================


sub_68899944	proc near		; CODE XREF: sub_688999AC+8Ep
					; sub_6889DECC+1DAp

var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_10		= dword	ptr -10h

		push	esi
		push	ebx
		sub	esp, 34h
		mov	ebx, eax
		mov	eax, ds:__stack_chk_guard
		mov	[esp+3Ch+var_10], eax
		xor	eax, eax
		mov	eax, ebx
		call	sub_68899798
		mov	esi, eax
		mov	[esp+3Ch+var_3C], ebx
		call	purple_connection_get_protocol_data
		mov	[esp+3Ch+var_28], 0
		mov	[esp+3Ch+var_2C], 0
		mov	[esp+3Ch+var_30], 0
		mov	[esp+3Ch+var_34], esi
		mov	[esp+3Ch+var_38], 1
		mov	[esp+3Ch+var_3C], eax
		call	aim_srv_setextrainfo
		mov	eax, [esp+3Ch+var_10]
		xor	eax, ds:__stack_chk_guard
		jnz	short loc_688999A5
		add	esp, 34h
		pop	ebx
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_688999A5:				; CODE XREF: sub_68899944+59j
		call	__stack_chk_fail
sub_68899944	endp

; ---------------------------------------------------------------------------
		align 4

; =============== S U B	R O U T	I N E =======================================


sub_688999AC	proc near		; DATA XREF: sub_688995DC+179o

var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_30		= dword	ptr -30h
var_20		= dword	ptr -20h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 3Ch
		mov	ebx, [esp+4Ch+arg_0]
		mov	edi, [esp+4Ch+arg_4]
		mov	eax, ds:__stack_chk_guard
		mov	[esp+4Ch+var_20], eax
		xor	eax, eax
		mov	[esp+4Ch+var_4C], ebx
		call	purple_connection_get_protocol_data
		mov	[esp+4Ch+var_4C], ebx
		mov	[esp+4Ch+var_30], eax
		call	purple_connection_get_account
		mov	ebp, eax
		mov	[esp+4Ch+var_48], offset aAuthorization	; "authorization"
		mov	[esp+4Ch+var_4C], edi
		call	purple_request_fields_get_field
		mov	[esp+4Ch+var_4C], eax
		call	purple_request_field_bool_get_value
		mov	esi, eax
		mov	[esp+4Ch+var_48], offset aWeb_aware ; "web_aware"
		mov	[esp+4Ch+var_4C], edi
		call	purple_request_fields_get_field
		mov	[esp+4Ch+var_4C], eax
		call	purple_request_field_bool_get_value
		mov	edi, eax
		mov	[esp+4Ch+var_44], esi
		mov	[esp+4Ch+var_48], offset aAuthorization	; "authorization"
		mov	[esp+4Ch+var_4C], ebp
		call	purple_account_set_bool
		mov	[esp+4Ch+var_44], edi
		mov	[esp+4Ch+var_48], offset aWeb_aware ; "web_aware"
		mov	[esp+4Ch+var_4C], ebp
		call	purple_account_set_bool
		mov	eax, ebx
		call	sub_68899944
		mov	[esp+4Ch+var_44], edi
		mov	[esp+4Ch+var_48], esi
		mov	edx, [esp+4Ch+var_30]
		mov	[esp+4Ch+var_4C], edx
		call	aim_icq_setsecurity
		mov	eax, [esp+4Ch+var_20]
		xor	eax, ds:__stack_chk_guard
		jnz	short loc_68899A67
		add	esp, 3Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_68899A67:				; CODE XREF: sub_688999AC+B1j
		call	__stack_chk_fail
sub_688999AC	endp


; =============== S U B	R O U T	I N E =======================================


sub_68899A6C	proc near		; DATA XREF: oscar_actions+2D0o

var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_10		= dword	ptr -10h
arg_0		= dword	ptr  4

		sub	esp, 2Ch
		mov	eax, ds:__stack_chk_guard
		mov	[esp+2Ch+var_10], eax
		xor	eax, eax
		mov	[esp+2Ch+var_28], offset aHttpMymobile_a ; "http://mymobile.aol.com/dbreg/register?"...
		mov	eax, [esp+2Ch+arg_0]
		mov	eax, [eax+0Ch]
		mov	[esp+2Ch+var_2C], eax
		call	purple_notify_uri
		mov	eax, [esp+2Ch+var_10]
		xor	eax, ds:__stack_chk_guard
		jnz	short loc_68899AA1
		add	esp, 2Ch
		retn
; ---------------------------------------------------------------------------

loc_68899AA1:				; CODE XREF: sub_68899A6C+2Fj
		call	__stack_chk_fail
sub_68899A6C	endp

; ---------------------------------------------------------------------------
		align 4

; =============== S U B	R O U T	I N E =======================================


sub_68899AA8	proc near		; DATA XREF: oscar_actions+308o

var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_10		= dword	ptr -10h
arg_0		= dword	ptr  4

		sub	esp, 2Ch
		mov	eax, ds:__stack_chk_guard
		mov	[esp+2Ch+var_10], eax
		xor	eax, eax
		mov	[esp+2Ch+var_28], offset aHttpWww_icq_co ; "http://www.icq.com/whitepages/user_deta"...
		mov	eax, [esp+2Ch+arg_0]
		mov	eax, [eax+0Ch]
		mov	[esp+2Ch+var_2C], eax
		call	purple_notify_uri
		mov	eax, [esp+2Ch+var_10]
		xor	eax, ds:__stack_chk_guard
		jnz	short loc_68899ADD
		add	esp, 2Ch
		retn
; ---------------------------------------------------------------------------

loc_68899ADD:				; CODE XREF: sub_68899AA8+2Fj
		call	__stack_chk_fail
sub_68899AA8	endp

; ---------------------------------------------------------------------------
		align 4

loc_68899AE4:				; DATA XREF: oscar_actions+B6o
		push	esi
		push	ebx
		sub	esp, 24h
		mov	eax, ds:__stack_chk_guard
		mov	[esp+1Ch], eax
		xor	eax, eax
		mov	eax, [esp+30h]
		mov	ebx, [eax+0Ch]
		mov	[esp], ebx
		call	purple_connection_get_protocol_data
		mov	esi, eax
		mov	[esp], ebx
		call	purple_connection_get_account
		mov	[esp], eax
		call	purple_account_get_username
		mov	[esp+8], eax
		mov	dword ptr [esp+4], offset aS ; "%s"
		mov	eax, [esi+0BCh]
		mov	eax, [eax+20h]
		mov	[esp], eax
		call	purple_strreplace
		mov	esi, eax
		mov	[esp+4], eax
		mov	[esp], ebx
		call	purple_notify_uri
		mov	eax, [esp+1Ch]
		xor	eax, ds:__stack_chk_guard
		jnz	short loc_68899B5A
		mov	[esp+30h], esi
		add	esp, 24h
		pop	ebx
		pop	esi
		jmp	g_free
; ---------------------------------------------------------------------------

loc_68899B5A:				; CODE XREF: .text:68899B4Aj
		call	__stack_chk_fail
; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_68899B60	proc near		; DATA XREF: oscar_actions+73o

var_2C		= dword	ptr -2Ch
var_10		= dword	ptr -10h
arg_0		= dword	ptr  4

		sub	esp, 2Ch
		mov	eax, ds:__stack_chk_guard
		mov	[esp+2Ch+var_10], eax
		xor	eax, eax
		mov	eax, [esp+2Ch+arg_0]
		mov	eax, [eax+0Ch]
		mov	[esp+2Ch+var_2C], eax
		call	purple_connection_get_account
		mov	edx, [esp+2Ch+var_10]
		xor	edx, ds:__stack_chk_guard
		jnz	short loc_68899B95
		mov	[esp+2Ch+arg_0], eax
		add	esp, 2Ch
		jmp	purple_account_request_change_password
; ---------------------------------------------------------------------------

loc_68899B95:				; CODE XREF: sub_68899B60+27j
		call	__stack_chk_fail
sub_68899B60	endp

; ---------------------------------------------------------------------------
		align 4

; =============== S U B	R O U T	I N E =======================================


sub_68899B9C	proc near		; DATA XREF: oscar_actions+32o

var_2C		= dword	ptr -2Ch
var_10		= dword	ptr -10h
arg_0		= dword	ptr  4

		sub	esp, 2Ch
		mov	eax, ds:__stack_chk_guard
		mov	[esp+2Ch+var_10], eax
		xor	eax, eax
		mov	eax, [esp+2Ch+arg_0]
		mov	eax, [eax+0Ch]
		mov	[esp+2Ch+var_2C], eax
		call	purple_connection_get_account
		mov	edx, [esp+2Ch+var_10]
		xor	edx, ds:__stack_chk_guard
		jnz	short loc_68899BD1
		mov	[esp+2Ch+arg_0], eax
		add	esp, 2Ch
		jmp	purple_account_request_change_user_info
; ---------------------------------------------------------------------------

loc_68899BD1:				; CODE XREF: sub_68899B9C+27j
		call	__stack_chk_fail
sub_68899B9C	endp

; ---------------------------------------------------------------------------
		align 4

; =============== S U B	R O U T	I N E =======================================


sub_68899BD8	proc near		; DATA XREF: oscar_blist_node_menu+351o

var_7C		= dword	ptr -7Ch
var_78		= dword	ptr -78h
var_74		= dword	ptr -74h
var_70		= dword	ptr -70h
var_6C		= dword	ptr -6Ch
var_68		= dword	ptr -68h
var_64		= dword	ptr -64h
var_60		= dword	ptr -60h
var_5C		= dword	ptr -5Ch
var_58		= dword	ptr -58h
var_54		= dword	ptr -54h
var_50		= dword	ptr -50h
var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_20		= dword	ptr -20h
arg_0		= dword	ptr  4

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 6Ch
		mov	ebp, [esp+7Ch+arg_0]
		mov	eax, ds:__stack_chk_guard
		mov	[esp+7Ch+var_20], eax
		xor	eax, eax
		mov	[esp+7Ch+var_7C], ebp
		call	purple_blist_node_get_type
		cmp	eax, 2
		jz	short loc_68899C34
		mov	[esp+7Ch+var_74], offset aPurple_blist_0 ; "PURPLE_BLIST_NODE_IS_BUDDY(node)"
		mov	[esp+7Ch+var_78], offset aOscar_ask_dire ; "oscar_ask_directim"
		mov	[esp+7Ch+var_7C], 0
		call	g_return_if_fail_warning
		mov	edx, [esp+7Ch+var_20]
		xor	edx, ds:__stack_chk_guard
		jnz	loc_68899D64
		add	esp, 6Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 4

loc_68899C34:				; CODE XREF: sub_68899BD8+24j
		mov	[esp+7Ch+var_7C], ebp
		call	purple_buddy_get_account
		mov	edi, eax
		mov	[esp+7Ch+var_7C], eax
		call	purple_account_get_connection
		mov	esi, eax
		mov	[esp+7Ch+var_7C], 8
		call	g_malloc0
		mov	ebx, eax
		mov	[esp+7Ch+var_7C], ebp
		call	purple_buddy_get_name
		mov	[esp+7Ch+var_7C], eax
		call	g_strdup
		mov	[ebx+4], eax
		mov	[esp+7Ch+var_7C], esi
		call	purple_connection_get_protocol_data
		mov	[ebx], eax
		mov	ebp, [ebx+4]
		mov	[esp+7Ch+var_78], offset aYouHaveSelecte ; "You	have selected to open a	Direct IM c"...
		mov	[esp+7Ch+var_7C], offset aPidgin_6 ; "pidgin"
		call	libintl_dgettext
		mov	[esp+7Ch+var_78], ebp
		mov	[esp+7Ch+var_7C], eax
		call	g_strdup_printf
		mov	ebp, eax
		mov	[esp+7Ch+var_78], offset a_cancel ; "_Cancel"
		mov	[esp+7Ch+var_7C], offset aPidgin_6 ; "pidgin"
		call	libintl_dgettext
		mov	[esp+7Ch+var_78], offset aC_onnect ; "C_onnect"
		mov	[esp+7Ch+var_7C], offset aPidgin_6 ; "pidgin"
		mov	[esp+7Ch+var_38], eax
		call	libintl_dgettext
		mov	edx, eax
		mov	eax, [ebx+4]
		mov	[esp+7Ch+var_30], eax
		mov	[esp+7Ch+var_78], offset aBecauseThisRev ; "Because this reveals your IP address, i"...
		mov	[esp+7Ch+var_7C], offset aPidgin_6 ; "pidgin"
		mov	[esp+7Ch+var_34], edx
		call	libintl_dgettext
		mov	[esp+7Ch+var_48], offset sub_68898F58
		mov	ecx, [esp+7Ch+var_38]
		mov	[esp+7Ch+var_4C], ecx
		mov	[esp+7Ch+var_50], offset sub_68899D6C
		mov	edx, [esp+7Ch+var_34]
		mov	[esp+7Ch+var_54], edx
		mov	[esp+7Ch+var_58], 2
		mov	[esp+7Ch+var_5C], ebx
		mov	[esp+7Ch+var_60], 0
		mov	edx, [esp+7Ch+var_30]
		mov	[esp+7Ch+var_64], edx
		mov	[esp+7Ch+var_68], edi
		mov	[esp+7Ch+var_6C], 0
		mov	[esp+7Ch+var_70], eax
		mov	[esp+7Ch+var_74], ebp
		mov	[esp+7Ch+var_78], 0
		mov	[esp+7Ch+var_7C], esi
		call	purple_request_action
		mov	eax, [esp+7Ch+var_20]
		xor	eax, ds:__stack_chk_guard
		jnz	short loc_68899D64
		mov	[esp+7Ch+arg_0], ebp
		add	esp, 6Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		jmp	g_free
; ---------------------------------------------------------------------------

loc_68899D64:				; CODE XREF: sub_68899BD8+4Cj
					; sub_68899BD8+177j
		call	__stack_chk_fail
sub_68899BD8	endp

; ---------------------------------------------------------------------------
		align 4

; =============== S U B	R O U T	I N E =======================================


sub_68899D6C	proc near		; DATA XREF: sub_68899BD8+11Do

var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_10		= dword	ptr -10h
arg_0		= dword	ptr  4

		push	ebx
		sub	esp, 28h
		mov	ebx, [esp+2Ch+arg_0]
		mov	eax, ds:__stack_chk_guard
		mov	[esp+2Ch+var_10], eax
		xor	eax, eax
		mov	eax, [ebx+4]
		mov	[esp+2Ch+var_20], eax
		mov	[esp+2Ch+var_28], 4
		mov	[esp+2Ch+var_24], 0
		mov	eax, [ebx]
		mov	[esp+2Ch+var_2C], eax
		call	peer_connection_propose
		mov	eax, [ebx+4]
		mov	[esp+2Ch+var_2C], eax
		call	g_free
		mov	eax, [esp+2Ch+var_10]
		xor	eax, ds:__stack_chk_guard
		jnz	short loc_68899DC4
		mov	[esp+2Ch+arg_0], ebx
		add	esp, 28h
		pop	ebx
		jmp	g_free
; ---------------------------------------------------------------------------

loc_68899DC4:				; CODE XREF: sub_68899D6C+49j
		call	__stack_chk_fail
sub_68899D6C	endp

; ---------------------------------------------------------------------------
		align 4

loc_68899DCC:				; DATA XREF: oscar_blist_node_menu+30Ao
		push	edi
		push	esi
		push	ebx
		sub	esp, 30h
		mov	ebx, [esp+40h]
		mov	eax, ds:__stack_chk_guard
		mov	[esp+2Ch], eax
		xor	eax, eax
		mov	[esp], ebx
		call	purple_blist_node_get_type
		cmp	eax, 2
		jz	short loc_68899E24
		mov	dword ptr [esp+8], offset aPurple_blist_0 ; "PURPLE_BLIST_NODE_IS_BUDDY(node)"
		mov	dword ptr [esp+4], offset aOscar_close_di ; "oscar_close_directim"
		mov	dword ptr [esp], 0
		call	g_return_if_fail_warning

loc_68899E0A:				; CODE XREF: .text:68899E63j
					; .text:68899EDCj
		mov	eax, [esp+2Ch]
		xor	eax, ds:__stack_chk_guard
		jnz	loc_68899EF1
		add	esp, 30h
		pop	ebx
		pop	esi
		pop	edi
		retn
; ---------------------------------------------------------------------------
		align 4

loc_68899E24:				; CODE XREF: .text:68899DECj
		mov	[esp], ebx
		call	purple_buddy_get_name
		mov	esi, eax
		mov	[esp], ebx
		call	purple_buddy_get_account
		mov	edi, eax
		mov	[esp], eax
		call	purple_account_get_connection
		mov	dword ptr [esp+8], 4
		mov	dword ptr [esp+0Ch], 0
		mov	[esp+4], esi
		mov	eax, [eax+1Ch]
		mov	[esp], eax
		call	peer_connection_find_by_type
		mov	ebx, eax
		test	eax, eax
		jz	short loc_68899E0A
		mov	eax, [ebx+24h]
		test	eax, eax
		jz	short loc_68899EE4

loc_68899E6C:				; CODE XREF: .text:68899EECj
		mov	dword ptr [esp+8], 0
		mov	dword ptr [esp+4], 1
		mov	[esp], ebx
		call	peer_connection_destroy
		mov	[esp+8], esi
		mov	[esp+4], edi
		mov	dword ptr [esp], 1
		call	purple_conversation_new
		mov	ebx, eax
		mov	dword ptr [esp], 0
		call	time
		mov	esi, eax
		mov	dword ptr [esp+4], offset aYouClosedTheCo ; "You closed	the connection."
		mov	dword ptr [esp], offset	aPidgin_6 ; "pidgin"
		call	libintl_dgettext
		mov	[esp+10h], esi
		mov	dword ptr [esp+0Ch], 4
		mov	[esp+8], eax
		mov	dword ptr [esp+4], 0
		mov	[esp], ebx
		call	purple_conversation_write
		jmp	loc_68899E0A
; ---------------------------------------------------------------------------
		align 4

loc_68899EE4:				; CODE XREF: .text:68899E6Aj
		mov	[esp], ebx
		call	aim_im_sendch2_cancel
		jmp	loc_68899E6C
; ---------------------------------------------------------------------------

loc_68899EF1:				; CODE XREF: .text:68899E14j
		call	__stack_chk_fail
; ---------------------------------------------------------------------------
		align 4

; =============== S U B	R O U T	I N E =======================================


sub_68899EF8	proc near		; DATA XREF: oscar_login+1BCo

var_7C		= dword	ptr -7Ch
var_78		= dword	ptr -78h
var_74		= dword	ptr -74h
var_70		= dword	ptr -70h
var_6C		= dword	ptr -6Ch
var_68		= dword	ptr -68h
var_64		= dword	ptr -64h
var_60		= dword	ptr -60h
var_5C		= dword	ptr -5Ch
var_58		= dword	ptr -58h
var_54		= dword	ptr -54h
var_50		= dword	ptr -50h
var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_20		= dword	ptr -20h
arg_0		= dword	ptr  4

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 6Ch
		mov	eax, ds:__stack_chk_guard
		mov	[esp+7Ch+var_20], eax
		xor	eax, eax
		mov	eax, [esp+7Ch+arg_0]
		mov	ebx, [eax+68h]
		mov	[esp+7Ch+var_7C], ebx
		call	purple_connection_get_account
		mov	edi, eax
		mov	[esp+7Ch+var_78], offset aGotSecuridRequ ; "Got	SecurID	request\n"
		mov	[esp+7Ch+var_7C], offset aOscar_13 ; "oscar"
		call	purple_debug_info
		mov	[esp+7Ch+var_7C], edi
		call	purple_account_get_username
		mov	[esp+7Ch+var_78], eax
		mov	[esp+7Ch+var_7C], offset aEnterTheSecuri ; "Enter the SecurID key for %s."
		call	g_strdup_printf
		mov	esi, eax
		mov	[esp+7Ch+var_78], offset a_cancel ; "_Cancel"
		mov	[esp+7Ch+var_7C], offset aPidgin_6 ; "pidgin"
		call	libintl_dgettext
		mov	[esp+7Ch+var_78], offset a_ok ;	"_OK"
		mov	[esp+7Ch+var_7C], offset aPidgin_6 ; "pidgin"
		mov	[esp+7Ch+var_34], eax
		call	libintl_dgettext
		mov	[esp+7Ch+var_78], offset aEnterThe6Digit ; "Enter the 6	digit number from the digit"...
		mov	[esp+7Ch+var_7C], offset aPidgin_6 ; "pidgin"
		mov	[esp+7Ch+var_30], eax
		call	libintl_dgettext
		mov	ebp, eax
		mov	[esp+7Ch+var_78], offset aEnterSecurid ; "Enter	SecurID"
		mov	[esp+7Ch+var_7C], offset aPidgin_6 ; "pidgin"
		call	libintl_dgettext
		mov	[esp+7Ch+var_40], ebx
		mov	[esp+7Ch+var_44], 0
		mov	[esp+7Ch+var_48], 0
		mov	[esp+7Ch+var_4C], edi
		mov	[esp+7Ch+var_50], offset sub_6889A890
		mov	ecx, [esp+7Ch+var_34]
		mov	[esp+7Ch+var_54], ecx
		mov	[esp+7Ch+var_58], offset sub_6889E2CC
		mov	edx, [esp+7Ch+var_30]
		mov	[esp+7Ch+var_5C], edx
		mov	[esp+7Ch+var_60], 0
		mov	[esp+7Ch+var_64], 0
		mov	[esp+7Ch+var_68], 0
		mov	[esp+7Ch+var_6C], ebp
		mov	[esp+7Ch+var_70], esi
		mov	[esp+7Ch+var_74], eax
		mov	[esp+7Ch+var_78], 0
		mov	[esp+7Ch+var_7C], ebx
		call	purple_request_input
		mov	[esp+7Ch+var_7C], esi
		call	g_free
		mov	eax, 1
		mov	edx, [esp+7Ch+var_20]
		xor	edx, ds:__stack_chk_guard
		jnz	short loc_6889A033
		add	esp, 6Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_6889A033:				; CODE XREF: sub_68899EF8+131j
		call	__stack_chk_fail
sub_68899EF8	endp


; =============== S U B	R O U T	I N E =======================================


sub_6889A038	proc near		; DATA XREF: oscar_blist_node_menu+9Co

var_8C		= dword	ptr -8Ch
var_88		= dword	ptr -88h
var_84		= dword	ptr -84h
var_80		= dword	ptr -80h
var_7C		= dword	ptr -7Ch
var_78		= dword	ptr -78h
var_74		= dword	ptr -74h
var_70		= dword	ptr -70h
var_6C		= dword	ptr -6Ch
var_68		= dword	ptr -68h
var_64		= dword	ptr -64h
var_60		= dword	ptr -60h
var_5C		= dword	ptr -5Ch
var_58		= dword	ptr -58h
var_54		= dword	ptr -54h
var_50		= dword	ptr -50h
var_40		= dword	ptr -40h
var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_20		= dword	ptr -20h
arg_0		= dword	ptr  4

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 7Ch
		mov	ebx, [esp+8Ch+arg_0]
		mov	eax, ds:__stack_chk_guard
		mov	[esp+8Ch+var_20], eax
		xor	eax, eax
		mov	[esp+8Ch+var_8C], ebx
		call	purple_blist_node_get_type
		cmp	eax, 2
		jz	short loc_6889A094
		mov	[esp+8Ch+var_84], offset aPurple_blist_0 ; "PURPLE_BLIST_NODE_IS_BUDDY(node)"
		mov	[esp+8Ch+var_88], offset aOscar_buddycb_ ; "oscar_buddycb_edit_comment"
		mov	[esp+8Ch+var_8C], 0
		call	g_return_if_fail_warning

loc_6889A07A:				; CODE XREF: sub_6889A038+96j
		mov	eax, [esp+8Ch+var_20]
		xor	eax, ds:__stack_chk_guard
		jnz	loc_6889A263
		add	esp, 7Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 4

loc_6889A094:				; CODE XREF: sub_6889A038+24j
		mov	[esp+8Ch+var_8C], ebx
		call	purple_buddy_get_name
		mov	[esp+8Ch+var_38], eax
		mov	[esp+8Ch+var_8C], ebx
		call	purple_buddy_get_account
		mov	[esp+8Ch+var_30], eax
		mov	[esp+8Ch+var_8C], eax
		call	purple_account_get_connection
		mov	[esp+8Ch+var_34], eax
		mov	[esp+8Ch+var_8C], eax
		call	purple_connection_get_protocol_data
		mov	edi, eax
		mov	[esp+8Ch+var_8C], ebx
		call	purple_buddy_get_group
		mov	ebp, eax
		test	eax, eax
		jz	short loc_6889A07A
		mov	[esp+8Ch+var_8C], 0Ch
		call	g_malloc
		mov	esi, eax
		mov	[esp+8Ch+var_8C], ebp
		call	purple_group_get_name
		mov	edx, [esp+8Ch+var_38]
		mov	[esp+8Ch+var_84], edx
		mov	[esp+8Ch+var_88], eax
		mov	eax, [edi+0D8h]
		mov	[esp+8Ch+var_8C], eax
		call	aim_ssi_getcomment
		mov	ebp, eax
		test	eax, eax
		jz	loc_6889A25C
		mov	[esp+8Ch+var_84], eax
		mov	[esp+8Ch+var_88], edi
		mov	eax, [esp+8Ch+var_30]
		mov	[esp+8Ch+var_8C], eax
		call	oscar_utf8_try_convert
		mov	edi, eax

loc_6889A120:				; CODE XREF: sub_6889A038+226j
		mov	eax, [esp+8Ch+var_34]
		mov	[esi], eax
		mov	eax, [esp+8Ch+var_38]
		mov	[esp+8Ch+var_8C], eax
		call	g_strdup
		mov	[esi+4], eax
		mov	[esp+8Ch+var_8C], ebx
		call	purple_buddy_get_alias_only
		mov	[esp+8Ch+var_8C], eax
		call	g_strdup
		mov	[esi+8], eax
		mov	ebx, [esi+4]
		mov	[esp+8Ch+var_88], offset aBuddyCommentFo ; "Buddy Comment for %s"
		mov	[esp+8Ch+var_8C], offset aPidgin_6 ; "pidgin"
		call	libintl_dgettext
		mov	[esp+8Ch+var_88], ebx
		mov	[esp+8Ch+var_8C], eax
		call	g_strdup_printf
		mov	ebx, eax
		mov	edx, [esi+4]
		mov	[esp+8Ch+var_88], offset a_cancel ; "_Cancel"
		mov	[esp+8Ch+var_8C], offset aPidgin_6 ; "pidgin"
		mov	[esp+8Ch+var_40], edx
		call	libintl_dgettext
		mov	[esp+8Ch+var_88], offset a_ok ;	"_OK"
		mov	[esp+8Ch+var_8C], offset aPidgin_6 ; "pidgin"
		mov	[esp+8Ch+var_3C], eax
		call	libintl_dgettext
		mov	[esp+8Ch+var_38], eax
		mov	[esp+8Ch+var_88], offset aBuddyComment ; "Buddy	Comment:"
		mov	[esp+8Ch+var_8C], offset aPidgin_6 ; "pidgin"
		call	libintl_dgettext
		mov	[esp+8Ch+var_50], esi
		mov	[esp+8Ch+var_54], 0
		mov	edx, [esp+8Ch+var_40]
		mov	[esp+8Ch+var_58], edx
		mov	edx, [esp+8Ch+var_30]
		mov	[esp+8Ch+var_5C], edx
		mov	[esp+8Ch+var_60], offset oscar_free_name_data
		mov	ecx, [esp+8Ch+var_3C]
		mov	[esp+8Ch+var_64], ecx
		mov	[esp+8Ch+var_68], offset sub_6889A268
		mov	edx, [esp+8Ch+var_38]
		mov	[esp+8Ch+var_6C], edx
		mov	[esp+8Ch+var_70], 0
		mov	[esp+8Ch+var_74], 0
		mov	[esp+8Ch+var_78], 1
		mov	[esp+8Ch+var_7C], edi
		mov	[esp+8Ch+var_80], 0
		mov	[esp+8Ch+var_84], eax
		mov	[esp+8Ch+var_88], ebx
		mov	eax, [esp+8Ch+var_34]
		mov	[esp+8Ch+var_8C], eax
		call	purple_request_input
		mov	[esp+8Ch+var_8C], ebx
		call	g_free
		mov	[esp+8Ch+var_8C], ebp
		call	g_free
		mov	edx, [esp+8Ch+var_20]
		xor	edx, ds:__stack_chk_guard
		jnz	short loc_6889A263
		mov	[esp+8Ch+arg_0], edi
		add	esp, 7Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		jmp	g_free
; ---------------------------------------------------------------------------
		align 4

loc_6889A25C:				; CODE XREF: sub_6889A038+CCj
		xor	edi, edi
		jmp	loc_6889A120
; ---------------------------------------------------------------------------

loc_6889A263:				; CODE XREF: sub_6889A038+4Cj
					; sub_6889A038+20Ej
		call	__stack_chk_fail
sub_6889A038	endp


; =============== S U B	R O U T	I N E =======================================


sub_6889A268	proc near		; DATA XREF: sub_6889A038+1ACo

var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_20		= dword	ptr -20h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 2Ch
		mov	ebx, [esp+3Ch+arg_0]
		mov	ebp, [esp+3Ch+arg_4]
		mov	eax, ds:__stack_chk_guard
		mov	[esp+3Ch+var_20], eax
		xor	eax, eax
		mov	esi, [ebx]
		mov	[esp+3Ch+var_3C], esi
		call	purple_connection_get_protocol_data
		mov	edi, eax
		mov	[esp+3Ch+var_3C], esi
		call	purple_connection_get_account
		mov	edx, [ebx+4]
		mov	[esp+3Ch+var_38], edx
		mov	[esp+3Ch+var_3C], eax
		call	purple_find_buddy
		test	eax, eax
		jz	short loc_6889A2D4
		mov	[esp+3Ch+var_3C], eax
		call	purple_buddy_get_group
		test	eax, eax
		jz	short loc_6889A2D4
		mov	esi, [ebx+4]
		mov	[esp+3Ch+var_3C], eax
		call	purple_group_get_name
		mov	[esp+3Ch+var_30], ebp
		mov	[esp+3Ch+var_34], esi
		mov	[esp+3Ch+var_38], eax
		mov	[esp+3Ch+var_3C], edi
		call	aim_ssi_editcomment

loc_6889A2D4:				; CODE XREF: sub_6889A268+3Fj
					; sub_6889A268+4Bj
		mov	eax, [esp+3Ch+var_20]
		xor	eax, ds:__stack_chk_guard
		jnz	short loc_6889A2F0
		mov	[esp+3Ch+arg_0], ebx
		add	esp, 2Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		jmp	oscar_free_name_data
; ---------------------------------------------------------------------------

loc_6889A2F0:				; CODE XREF: sub_6889A268+76j
		call	__stack_chk_fail
sub_6889A268	endp

; ---------------------------------------------------------------------------
		align 4

; =============== S U B	R O U T	I N E =======================================


sub_6889A2F8	proc near		; CODE XREF: oscar_set_status+CEp
					; sub_688A46F4+3FEp

var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_10		= dword	ptr -10h

		push	esi
		push	ebx
		sub	esp, 24h
		mov	ebx, eax
		mov	eax, ds:__stack_chk_guard
		mov	[esp+2Ch+var_10], eax
		xor	eax, eax
		mov	[esp+2Ch+var_2C], ebx
		call	purple_account_get_connection
		mov	[esp+2Ch+var_2C], eax
		call	purple_connection_get_protocol_data
		mov	esi, eax
		mov	[esp+2Ch+var_28], offset aInvisible ; "invisible"
		mov	[esp+2Ch+var_2C], ebx
		call	purple_account_is_status_active
		cmp	eax, 1
		sbb	edx, edx
		not	edx
		add	edx, 4
		mov	[esp+2Ch+var_28], edx
		mov	[esp+2Ch+var_2C], esi
		call	aim_ssi_setpermdeny
		mov	eax, [esp+2Ch+var_10]
		xor	eax, ds:__stack_chk_guard
		jnz	short loc_6889A354
		add	esp, 24h
		pop	ebx
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_6889A354:				; CODE XREF: sub_6889A2F8+54j
		call	__stack_chk_fail
sub_6889A2F8	endp

; ---------------------------------------------------------------------------
		align 4

; =============== S U B	R O U T	I N E =======================================


sub_6889A35C	proc near		; CODE XREF: .text:6889AFAEp
					; oscar_set_info+50j ...

var_98		= dword	ptr -98h
var_94		= dword	ptr -94h
var_90		= dword	ptr -90h
var_7C		= dword	ptr -7Ch
var_6C		= dword	ptr -6Ch
var_68		= dword	ptr -68h
var_64		= dword	ptr -64h
var_60		= dword	ptr -60h
var_5C		= dword	ptr -5Ch
var_58		= dword	ptr -58h
var_54		= dword	ptr -54h
var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 5Ch
		mov	ebp, edx
		mov	edi, [esp+6Ch+arg_0]
		mov	esi, [esp+6Ch+arg_4]
		mov	edx, ds:__stack_chk_guard
		mov	[esp+6Ch+var_20], edx
		xor	edx, edx
		mov	[esp+6Ch+var_6C], eax
		mov	[esp+6Ch+var_4C], ecx
		call	purple_account_get_connection
		mov	[esp+6Ch+var_48], eax
		mov	[esp+6Ch+var_6C], eax
		call	purple_connection_get_protocol_data
		mov	ebx, eax
		mov	[esp+6Ch+var_30], 0
		mov	[esp+6Ch+var_2C], 0
		mov	[esp+6Ch+var_28], 0
		mov	[esp+6Ch+var_24], 0
		mov	[esp+6Ch+var_6C], esi
		call	purple_status_get_type
		mov	[esp+6Ch+var_6C], eax
		call	purple_status_type_get_primitive
		mov	[esp+6Ch+var_44], eax
		test	ebp, ebp
		mov	ecx, [esp+6Ch+var_4C]
		jz	loc_6889A4C4
		mov	edx, [ebx+60h]
		test	edx, edx
		jz	loc_6889A694
		test	ecx, ecx
		jz	loc_6889A4C4
		mov	[esp+6Ch+var_6C], ecx
		call	purple_strdup_withhtml
		mov	edx, eax
		lea	eax, [esp+6Ch+var_30]
		mov	[esp+6Ch+var_60], eax
		mov	[esp+6Ch+var_64], 0
		lea	eax, [esp+6Ch+var_2C]
		mov	[esp+6Ch+var_68], eax
		mov	[esp+6Ch+var_6C], edx
		mov	[esp+6Ch+var_4C], edx
		call	oscar_encode_im
		mov	ebp, eax
		mov	edx, [esp+6Ch+var_4C]
		mov	[esp+6Ch+var_6C], edx
		call	g_free
		mov	edx, [ebx+60h]
		cmp	edx, [esp+6Ch+var_2C]
		jnb	loc_6889A4C6
		mov	[esp+6Ch+var_60], edx
		mov	[esp+6Ch+var_64], offset aTheMaximumProf ; "The	maximum	profile	length of %d bytes "...
		mov	[esp+6Ch+var_68], offset aTheMaximumPr_0 ; "The	maximum	profile	length of %d byte h"...
		mov	[esp+6Ch+var_6C], offset aPidgin_6 ; "pidgin"
		mov	[esp+6Ch+var_4C], edx
		call	libintl_dngettext
		mov	edx, [esp+6Ch+var_4C]
		mov	[esp+6Ch+var_68], edx
		mov	[esp+6Ch+var_6C], eax
		call	g_strdup_printf
		mov	[esp+6Ch+var_40], eax
		mov	[esp+6Ch+var_68], offset aProfileTooLong ; "Profile too	long."
		mov	[esp+6Ch+var_6C], offset aPidgin_6 ; "pidgin"
		call	libintl_dgettext
		mov	[esp+6Ch+var_54], 0
		mov	[esp+6Ch+var_58], 0
		mov	edx, [esp+6Ch+var_40]
		mov	[esp+6Ch+var_5C], edx
		mov	[esp+6Ch+var_60], eax
		mov	[esp+6Ch+var_64], 0
		mov	[esp+6Ch+var_68], 1
		mov	eax, [esp+6Ch+var_48]
		mov	[esp+6Ch+var_6C], eax
		call	purple_notify_message
		mov	eax, [esp+6Ch+var_40]
		mov	[esp+6Ch+var_6C], eax
		call	g_free
		jmp	short loc_6889A4C6
; ---------------------------------------------------------------------------
		align 4

loc_6889A4C4:				; CODE XREF: sub_6889A35C+71j
					; sub_6889A35C+84j
		xor	ebp, ebp

loc_6889A4C6:				; CODE XREF: sub_6889A35C+CDj
					; sub_6889A35C+163j ...
		test	edi, edi
		jnz	short loc_6889A540
		mov	edx, [ebx+64h]
		mov	eax, [esp+6Ch+var_24]
		cmp	eax, edx
		ja	short loc_6889A53C

loc_6889A4D5:				; CODE XREF: sub_6889A35C+1E2j
		mov	[esp+6Ch+var_54], eax
		mov	[esp+6Ch+var_58], 0
		mov	eax, [esp+6Ch+var_28]
		mov	[esp+6Ch+var_5C], eax
		mov	edx, [ebx+60h]
		mov	eax, [esp+6Ch+var_2C]
		cmp	eax, edx
		ja	short loc_6889A538

loc_6889A4F4:				; CODE XREF: sub_6889A35C+1DEj
		mov	[esp+6Ch+var_60], eax
		mov	[esp+6Ch+var_64], ebp
		mov	eax, [esp+6Ch+var_30]
		mov	[esp+6Ch+var_68], eax
		mov	[esp+6Ch+var_6C], ebx
		call	aim_locate_setprofile
		mov	[esp+6Ch+var_6C], ebp
		call	g_free
		mov	[esp+6Ch+var_6C], 0
		call	g_free

loc_6889A520:				; CODE XREF: sub_6889A35C+331j
		mov	edx, [esp+6Ch+var_20]
		xor	edx, ds:__stack_chk_guard
		jnz	loc_6889A7CE
		add	esp, 5Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_6889A538:				; CODE XREF: sub_6889A35C+196j
		mov	eax, edx
		jmp	short loc_6889A4F4
; ---------------------------------------------------------------------------

loc_6889A53C:				; CODE XREF: sub_6889A35C+177j
		mov	eax, edx
		jmp	short loc_6889A4D5
; ---------------------------------------------------------------------------

loc_6889A540:				; CODE XREF: sub_6889A35C+16Cj
		mov	[esp+6Ch+var_68], offset aMessage_1 ; "message"
		mov	[esp+6Ch+var_6C], esi
		call	purple_status_get_attr_string
		test	eax, eax
		jz	loc_6889A6FC
		cmp	[esp+6Ch+var_44], 2
		jz	loc_6889A6FC
		cmp	[esp+6Ch+var_44], 4
		jz	loc_6889A6FC
		mov	[esp+6Ch+var_6C], eax
		call	purple_markup_linkify
		mov	edi, eax
		lea	eax, [esp+6Ch+var_28]
		mov	[esp+6Ch+var_60], eax
		mov	[esp+6Ch+var_64], 0
		lea	eax, [esp+6Ch+var_24]
		mov	[esp+6Ch+var_68], eax
		mov	[esp+6Ch+var_6C], edi
		call	oscar_encode_im
		mov	[esp+6Ch+var_6C], edi
		mov	[esp+6Ch+var_4C], eax
		call	g_free
		mov	edi, [ebx+64h]
		mov	eax, [esp+6Ch+var_24]
		cmp	edi, eax
		mov	ecx, [esp+6Ch+var_4C]
		jb	loc_6889A740

loc_6889A5B7:				; CODE XREF: sub_6889A35C+3B5j
					; sub_6889A35C+46Dj
		cmp	edi, eax
		jbe	short loc_6889A5BD
		mov	edi, eax

loc_6889A5BD:				; CODE XREF: sub_6889A35C+25Dj
		mov	[esp+6Ch+var_54], edi
		mov	[esp+6Ch+var_58], ecx
		mov	eax, [esp+6Ch+var_28]
		mov	[esp+6Ch+var_5C], eax
		mov	eax, [esp+6Ch+var_2C]
		mov	edx, [ebx+60h]
		cmp	edx, eax
		jbe	short loc_6889A5DA
		mov	edx, eax

loc_6889A5DA:				; CODE XREF: sub_6889A35C+27Aj
		mov	[esp+6Ch+var_60], edx
		mov	[esp+6Ch+var_64], ebp
		mov	eax, [esp+6Ch+var_30]
		mov	[esp+6Ch+var_68], eax
		mov	[esp+6Ch+var_6C], ebx
		mov	[esp+6Ch+var_4C], ecx
		call	aim_locate_setprofile
		mov	[esp+6Ch+var_6C], ebp
		call	g_free
		mov	ecx, [esp+6Ch+var_4C]
		mov	[esp+6Ch+var_6C], ecx
		call	g_free
		mov	[esp+6Ch+var_68], offset aMessage_1 ; "message"
		mov	[esp+6Ch+var_6C], esi
		call	purple_status_get_attr_string
		test	eax, eax
		jz	loc_6889A718
		mov	[esp+6Ch+var_6C], eax
		call	purple_markup_strip_html
		mov	ebp, eax
		xor	eax, eax
		mov	ecx, 0FFFFFFFFh
		mov	edi, ebp
		repne scasb
		not	ecx
		dec	ecx
		cmp	ecx, 0FBh
		ja	loc_6889A720

loc_6889A646:				; CODE XREF: sub_6889A35C+3BEj
					; sub_6889A35C+3DCj
		mov	[esp+6Ch+var_68], offset aItmsurl ; "itmsurl"
		mov	[esp+6Ch+var_6C], esi
		call	purple_status_get_attr_string
		mov	esi, eax
		mov	eax, [esp+6Ch+var_48]
		call	sub_68899798
		mov	[esp+6Ch+var_58], esi
		mov	[esp+6Ch+var_5C], ebp
		mov	[esp+6Ch+var_60], 1
		mov	[esp+6Ch+var_64], eax
		mov	[esp+6Ch+var_68], 1
		mov	[esp+6Ch+var_6C], ebx
		call	aim_srv_setextrainfo
		mov	[esp+6Ch+var_6C], ebp
		call	g_free
		jmp	loc_6889A520
; ---------------------------------------------------------------------------
		align 4

loc_6889A694:				; CODE XREF: sub_6889A35C+7Cj
		mov	[esp+6Ch+var_68], offset aYouHaveProbabl ; "You	have probably requested	to set your"...
		mov	[esp+6Ch+var_6C], offset aPidgin_6 ; "pidgin"
		call	libintl_dgettext
		mov	ebp, eax
		mov	[esp+6Ch+var_68], offset aUnableToSetAim ; "Unable to set AIM profile."
		mov	[esp+6Ch+var_6C], offset aPidgin_6 ; "pidgin"
		call	libintl_dgettext
		mov	[esp+6Ch+var_54], 0
		mov	[esp+6Ch+var_58], 0
		mov	[esp+6Ch+var_5C], ebp
		mov	[esp+6Ch+var_60], eax
		mov	[esp+6Ch+var_64], 0
		mov	[esp+6Ch+var_68], 1
		mov	eax, [esp+6Ch+var_48]
		mov	[esp+6Ch+var_6C], eax
		call	purple_notify_message
		xor	ebp, ebp
		jmp	loc_6889A4C6
; ---------------------------------------------------------------------------
		align 4

loc_6889A6FC:				; CODE XREF: sub_6889A35C+1F6j
					; sub_6889A35C+201j ...
		mov	[esp+6Ch+var_6C], offset byte_688B2167
		call	g_strdup
		mov	ecx, eax
		mov	eax, [esp+6Ch+var_24]
		mov	edi, [ebx+64h]
		jmp	loc_6889A5B7
; ---------------------------------------------------------------------------
		align 4

loc_6889A718:				; CODE XREF: sub_6889A35C+2C0j
		xor	ebp, ebp
		jmp	loc_6889A646
; ---------------------------------------------------------------------------
		align 10h

loc_6889A720:				; CODE XREF: sub_6889A35C+2E4j
		lea	eax, [ebp+0F9h]
		mov	[esp+6Ch+var_68], eax
		mov	[esp+6Ch+var_6C], ebp
		call	g_utf8_find_prev_char
		mov	dword ptr [eax], 2E2E2Eh
		jmp	loc_6889A646
; ---------------------------------------------------------------------------
		align 10h

loc_6889A740:				; CODE XREF: sub_6889A35C+255j
		mov	[esp+6Ch+var_60], edi
		mov	[esp+6Ch+var_64], offset aTheMaximumAway ; "The	maximum	away message length of %d b"...
		mov	[esp+6Ch+var_68], offset aTheMaximumAw_0 ; "The	maximum	away message length of %d b"...
		mov	[esp+6Ch+var_6C], offset aPidgin_6 ; "pidgin"
		call	libintl_dngettext
		mov	[esp+6Ch+var_68], edi
		mov	[esp+6Ch+var_6C], eax
		call	g_strdup_printf
		mov	edi, eax
		mov	[esp+6Ch+var_68], offset aAwayMessageToo ; "Away message too long."
		mov	[esp+6Ch+var_6C], offset aPidgin_6 ; "pidgin"
		call	libintl_dgettext
		mov	[esp+6Ch+var_54], 0
		mov	[esp+6Ch+var_58], 0
		mov	[esp+6Ch+var_5C], edi
		mov	[esp+6Ch+var_60], eax
		mov	[esp+6Ch+var_64], 0
		mov	[esp+6Ch+var_68], 1
		mov	eax, [esp+6Ch+var_48]
		mov	[esp+6Ch+var_6C], eax
		call	purple_notify_message
		mov	[esp+6Ch+var_6C], edi
		call	g_free
		mov	eax, [esp+6Ch+var_24]
		mov	edi, [ebx+64h]
		mov	ecx, [esp+6Ch+var_4C]
		jmp	loc_6889A5B7
; ---------------------------------------------------------------------------

loc_6889A7CE:				; CODE XREF: sub_6889A35C+1CEj
		call	__stack_chk_fail
; ---------------------------------------------------------------------------
		align 4

loc_6889A7D4:				; CODE XREF: sub_6889AB20+72j
					; sub_6889AB9C+52j
		push	edi
		push	esi
		push	ebx
		sub	esp, 20h
		mov	ebx, eax
		mov	edi, edx
		mov	eax, ds:__stack_chk_guard
		mov	[esp+98h+var_7C], eax
		xor	eax, eax
		mov	eax, [ebx]
		mov	esi, [eax+68h]
		movzx	eax, word ptr [ebx+5Ch]
		mov	[esp+98h+var_90], eax
		mov	[esp+98h+var_94], offset aUnableToConn_0 ; "unable to connect to FLAP server of	typ"...
		mov	[esp+98h+var_98], offset aOscar_13 ; "oscar"
		call	purple_debug_error
		mov	eax, [ebx+5Ch]
		cmp	ax, 17h
		jz	short loc_6889A880
		cmp	ax, 2
		jz	short loc_6889A840
		mov	[esp+98h+var_90], edi
		mov	[esp+98h+var_94], 6
		mov	[esp+98h+var_98], ebx
		call	flap_connection_schedule_destroy

loc_6889A82D:				; CODE XREF: sub_6889A35C+522j
		mov	eax, [esp+98h+var_7C]
		xor	eax, ds:__stack_chk_guard
		jnz	short loc_6889A88A
		add	esp, 20h
		pop	ebx
		pop	esi
		pop	edi
		retn
; ---------------------------------------------------------------------------

loc_6889A840:				; CODE XREF: sub_6889A35C+4BBj
		mov	[esp+98h+var_94], offset aUnableToConn_1 ; "Unable to connect to BOS server: %s"

loc_6889A848:				; CODE XREF: sub_6889A35C+52Cj
		mov	[esp+98h+var_98], offset aPidgin_6 ; "pidgin"
		call	libintl_dgettext
		mov	[esp+98h+var_94], edi
		mov	[esp+98h+var_98], eax
		call	g_strdup_printf
		mov	ebx, eax
		mov	[esp+98h+var_90], eax
		mov	[esp+98h+var_94], 0
		mov	[esp+98h+var_98], esi
		call	purple_connection_error_reason
		mov	[esp+98h+var_98], ebx
		call	g_free
		jmp	short loc_6889A82D
; ---------------------------------------------------------------------------

loc_6889A880:				; CODE XREF: sub_6889A35C+4B5j
		mov	[esp+98h+var_94], offset aUnableToConn_2 ; "Unable to connect to authentication	ser"...
		jmp	short loc_6889A848
; ---------------------------------------------------------------------------

loc_6889A88A:				; CODE XREF: sub_6889A35C+4DBj
		call	__stack_chk_fail
sub_6889A35C	endp ; sp-analysis failed

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6889A890	proc near		; DATA XREF: sub_68899EF8+C6o

var_8C		= dword	ptr -8Ch
var_88		= dword	ptr -88h
var_84		= byte ptr -84h
var_80		= dword	ptr -80h
var_7C		= dword	ptr -7Ch
var_78		= dword	ptr -78h
var_6C		= dword	ptr -6Ch
var_68		= byte ptr -68h
var_64		= dword	ptr -64h
var_60		= dword	ptr -60h
var_58		= byte ptr -58h
var_3C		= byte ptr -3Ch
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_10		= dword	ptr -10h
arg_0		= dword	ptr  4

		push	ebx
		sub	esp, 28h
		mov	ebx, [esp+2Ch+arg_0]
		mov	eax, ds:__stack_chk_guard
		mov	[esp+2Ch+var_10], eax
		xor	eax, eax
		mov	[esp+2Ch+var_28], offset aTheSecuridKeyE ; "The	SecurID	key entered is invalid"
		mov	[esp+2Ch+var_2C], offset aPidgin_6 ; "pidgin"
		call	libintl_dgettext
		mov	[esp+2Ch+var_24], eax
		mov	[esp+2Ch+var_28], 2
		mov	[esp+2Ch+var_2C], ebx
		call	purple_connection_error_reason
		mov	eax, [esp+2Ch+var_10]
		xor	eax, ds:__stack_chk_guard
		jnz	short loc_6889A8DC
		add	esp, 28h
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_6889A8DC:				; CODE XREF: sub_6889A890+45j
		call	__stack_chk_fail
; ---------------------------------------------------------------------------
		align 4

loc_6889A8E4:				; CODE XREF: sub_6889AB20+5Bj
					; sub_6889ABF8+3Dj
		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 7Ch
		mov	ebx, eax
		mov	eax, ds:__stack_chk_guard
		mov	[esp+8Ch+var_20], eax
		xor	eax, eax
		mov	ebp, [ebx]
		mov	eax, [ebp+68h]
		mov	[esp+8Ch+var_60], eax
		mov	[esp+8Ch+var_8C], eax
		call	purple_connection_get_account
		mov	[esp+8Ch+var_64], eax
		movzx	eax, word ptr [ebx+5Ch]
		mov	dword ptr [esp+8Ch+var_84], eax
		mov	[esp+8Ch+var_88], offset aConnectedToFla ; "connected to FLAP server of	type 0x%04h"...
		mov	[esp+8Ch+var_8C], offset aOscar_13 ; "oscar"
		call	purple_debug_info
		mov	esi, [ebx+24h]
		test	esi, esi
		jz	loc_6889AA60
		mov	dword ptr [esp+8Ch+var_84], 1
		mov	[esp+8Ch+var_88], offset aUse_clientlogi ; "use_clientlogin"
		mov	eax, [esp+8Ch+var_64]
		mov	[esp+8Ch+var_8C], eax
		call	purple_account_get_bool
		test	eax, eax
		jnz	short loc_6889A9BC
		mov	eax, [ebx+24h]
		mov	[esp+8Ch+var_80], eax
		movzx	eax, word ptr [ebx+20h]
		mov	dword ptr [esp+8Ch+var_84], eax
		mov	[esp+8Ch+var_88], ebx
		mov	[esp+8Ch+var_8C], ebp
		call	flap_connection_send_version_with_cookie

loc_6889A96F:				; CODE XREF: sub_6889A890+19Fj
		mov	eax, [ebx+24h]
		mov	[esp+8Ch+var_8C], eax
		call	g_free
		mov	dword ptr [ebx+24h], 0

loc_6889A981:				; CODE XREF: sub_6889A890+1DCj
		mov	eax, [ebx+5Ch]
		cmp	ax, 17h
		jz	loc_6889AA74
		cmp	ax, 2
		jz	loc_6889AAE0
		cmp	ax, 0Eh
		jz	loc_6889AA3C

loc_6889A9A2:				; CODE XREF: sub_6889A890+1C8j
					; sub_6889A890+248j ...
		mov	eax, [esp+8Ch+var_20]
		xor	eax, ds:__stack_chk_guard
		jnz	loc_6889AB19
		add	esp, 7Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 4

loc_6889A9BC:				; CODE XREF: sub_6889A890+C2j
		lea	eax, [esp+8Ch+var_58]
		mov	[esp+8Ch+var_6C], eax
		mov	esi, offset dword_688AD1C0
		mov	ecx, 7
		mov	edi, eax
		rep movsd
		lea	eax, [esp+8Ch+var_3C]
		mov	dword ptr [esp+8Ch+var_68], eax
		mov	esi, offset dword_688AD1DC
		mov	cl, 7
		mov	edi, eax
		rep movsd
		mov	dword ptr [esp+8Ch+var_84], 1
		mov	[esp+8Ch+var_88], offset aAllow_multiple ; "allow_multiple_logins"
		mov	eax, [esp+8Ch+var_64]
		mov	[esp+8Ch+var_8C], eax
		call	purple_account_get_bool
		mov	ecx, [ebp+44h]
		test	ecx, ecx
		jz	short loc_6889AA34
		lea	edx, [esp+8Ch+var_3C]

loc_6889AA0C:				; CODE XREF: sub_6889A890+1A8j
		mov	[esp+8Ch+var_78], eax
		mov	[esp+8Ch+var_7C], edx
		mov	eax, [ebx+24h]
		mov	[esp+8Ch+var_80], eax
		movzx	eax, word ptr [ebx+20h]
		mov	dword ptr [esp+8Ch+var_84], eax
		mov	[esp+8Ch+var_88], ebx
		mov	[esp+8Ch+var_8C], ebp
		call	flap_connection_send_version_with_cookie_and_clientinfo
		jmp	loc_6889A96F
; ---------------------------------------------------------------------------

loc_6889AA34:				; CODE XREF: sub_6889A890+176j
		lea	edx, [esp+8Ch+var_58]
		jmp	short loc_6889AA0C
; ---------------------------------------------------------------------------
		align 4

loc_6889AA3C:				; CODE XREF: sub_6889A890+10Cj
		mov	eax, [ebx+28h]
		mov	[esp+8Ch+var_88], eax
		mov	eax, [ebp+34h]
		mov	[esp+8Ch+var_8C], eax
		call	g_slist_prepend
		mov	[ebp+34h], eax
		mov	dword ptr [ebx+28h], 0
		jmp	loc_6889A9A2
; ---------------------------------------------------------------------------
		align 10h

loc_6889AA60:				; CODE XREF: sub_6889A890+9Ej
		mov	[esp+8Ch+var_88], ebx
		mov	[esp+8Ch+var_8C], ebp
		call	flap_connection_send_version
		jmp	loc_6889A981
; ---------------------------------------------------------------------------
		align 4

loc_6889AA74:				; CODE XREF: sub_6889A890+F8j
		mov	eax, [esp+8Ch+var_64]
		mov	[esp+8Ch+var_8C], eax
		call	purple_account_get_username
		mov	dword ptr [esp+8Ch+var_84], eax
		mov	[esp+8Ch+var_88], ebx
		mov	[esp+8Ch+var_8C], ebp
		call	aim_request_login
		mov	[esp+8Ch+var_88], offset aUsernameSentWa ; "Username sent, waiting for response\n"
		mov	[esp+8Ch+var_8C], offset aOscar_13 ; "oscar"
		call	purple_debug_info
		mov	[esp+8Ch+var_88], offset aUsernameSent ; "Username sent"
		mov	[esp+8Ch+var_8C], offset aPidgin_6 ; "pidgin"
		call	libintl_dgettext
		mov	[esp+8Ch+var_80], 6
		mov	dword ptr [esp+8Ch+var_84], 1
		mov	[esp+8Ch+var_88], eax
		mov	eax, [esp+8Ch+var_60]
		mov	[esp+8Ch+var_8C], eax
		call	purple_connection_update_progress
		jmp	loc_6889A9A2
; ---------------------------------------------------------------------------
		align 10h

loc_6889AAE0:				; CODE XREF: sub_6889A890+102j
		mov	[esp+8Ch+var_88], offset aConnectionEsta ; "Connection established, cookie sent"
		mov	[esp+8Ch+var_8C], offset aPidgin_6 ; "pidgin"
		call	libintl_dgettext
		mov	[esp+8Ch+var_80], 6
		mov	dword ptr [esp+8Ch+var_84], 4
		mov	[esp+8Ch+var_88], eax
		mov	eax, [esp+8Ch+var_60]
		mov	[esp+8Ch+var_8C], eax
		call	purple_connection_update_progress
		jmp	loc_6889A9A2
; ---------------------------------------------------------------------------

loc_6889AB19:				; CODE XREF: sub_6889A890+11Cj
		call	__stack_chk_fail
sub_6889A890	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6889AB20	proc near		; DATA XREF: sub_6889C040+101o
					; sub_6889E454+3D0o ...

var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_10		= dword	ptr -10h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	ebx
		sub	esp, 28h
		mov	ebx, [esp+2Ch+arg_0]
		mov	eax, [esp+2Ch+arg_4]
		mov	edx, [esp+2Ch+arg_8]
		mov	ecx, ds:__stack_chk_guard
		mov	[esp+2Ch+var_10], ecx
		xor	ecx, ecx
		mov	dword ptr [ebx+1Ch], 0
		mov	[ebx+2Ch], eax
		test	eax, eax
		js	short loc_6889AB80
		mov	[esp+2Ch+var_20], ebx
		mov	[esp+2Ch+var_24], offset flap_connection_recv_cb
		mov	[esp+2Ch+var_28], 1
		mov	[esp+2Ch+var_2C], eax
		call	purple_input_add
		mov	[ebx+54h], eax
		mov	ecx, [esp+2Ch+var_10]
		xor	ecx, ds:__stack_chk_guard
		jnz	short loc_6889AB97
		mov	eax, ebx
		add	esp, 28h
		pop	ebx
		jmp	loc_6889A8E4
; ---------------------------------------------------------------------------

loc_6889AB80:				; CODE XREF: sub_6889AB20+28j
		mov	eax, [esp+2Ch+var_10]
		xor	eax, ds:__stack_chk_guard
		jnz	short loc_6889AB97
		mov	eax, ebx
		add	esp, 28h
		pop	ebx
		jmp	loc_6889A7D4
; ---------------------------------------------------------------------------

loc_6889AB97:				; CODE XREF: sub_6889AB20+53j
					; sub_6889AB20+6Aj
		call	__stack_chk_fail
sub_6889AB20	endp


; =============== S U B	R O U T	I N E =======================================


sub_6889AB9C	proc near		; DATA XREF: sub_6889C040+16Bo
					; sub_6889E454+216o ...

var_2C		= dword	ptr -2Ch
var_10		= dword	ptr -10h
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	esi
		push	ebx
		sub	esp, 24h
		mov	esi, [esp+2Ch+arg_4]
		mov	ebx, [esp+2Ch+arg_8]
		mov	eax, ds:__stack_chk_guard
		mov	[esp+2Ch+var_10], eax
		xor	eax, eax
		mov	eax, [ebx+58h]
		test	eax, eax
		jz	short loc_6889ABCA
		mov	[esp+2Ch+var_2C], eax
		call	purple_input_remove
		mov	dword ptr [ebx+58h], 0

loc_6889ABCA:				; CODE XREF: sub_6889AB9C+1Dj
		mov	dword ptr [ebx+30h], 0
		mov	[esp+2Ch+var_2C], esi
		call	purple_ssl_strerror
		mov	edx, [esp+2Ch+var_10]
		xor	edx, ds:__stack_chk_guard
		jnz	short loc_6889ABF3
		mov	edx, eax
		mov	eax, ebx
		add	esp, 24h
		pop	ebx
		pop	esi
		jmp	loc_6889A7D4
; ---------------------------------------------------------------------------

loc_6889ABF3:				; CODE XREF: sub_6889AB9C+47j
		call	__stack_chk_fail
sub_6889AB9C	endp


; =============== S U B	R O U T	I N E =======================================


sub_6889ABF8	proc near		; DATA XREF: sub_6889C040+173o
					; sub_6889E454+21Eo ...

var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_10		= dword	ptr -10h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	ebx
		sub	esp, 28h
		mov	ebx, [esp+2Ch+arg_0]
		mov	eax, ds:__stack_chk_guard
		mov	[esp+2Ch+var_10], eax
		xor	eax, eax
		mov	[esp+2Ch+var_24], ebx
		mov	[esp+2Ch+var_28], offset flap_connection_recv_cb_ssl
		mov	eax, [esp+2Ch+arg_4]
		mov	[esp+2Ch+var_2C], eax
		call	purple_ssl_input_add
		mov	eax, [esp+2Ch+var_10]
		xor	eax, ds:__stack_chk_guard
		jnz	short loc_6889AC3A
		mov	eax, ebx
		add	esp, 28h
		pop	ebx
		jmp	loc_6889A8E4
; ---------------------------------------------------------------------------

loc_6889AC3A:				; CODE XREF: sub_6889ABF8+35j
		call	__stack_chk_fail
sub_6889ABF8	endp

; ---------------------------------------------------------------------------
		align 10h

loc_6889AC40:				; DATA XREF: oscar_login+984o
		push	esi
		push	ebx
		sub	esp, 24h
		mov	esi, [esp+38h]
		mov	eax, ds:__stack_chk_guard
		mov	[esp+1Ch], eax
		xor	eax, eax
		mov	eax, [esp+3Ch]
		mov	[esp], eax
		call	purple_connection_get_protocol_data
		mov	ebx, eax
		mov	eax, [eax+0D8h]
		mov	[esp], eax
		call	aim_ssi_getpresence
		test	esi, esi
		jz	short loc_6889AC98
		mov	edx, [esp+1Ch]
		xor	edx, ds:__stack_chk_guard
		jnz	short loc_6889ACAB
		and	eax, 0FFFDFFFFh

loc_6889AC85:				; CODE XREF: .text:6889ACA9j
		mov	[esp+34h], eax
		mov	[esp+30h], ebx
		add	esp, 24h
		pop	ebx
		pop	esi
		jmp	aim_ssi_setpresence
; ---------------------------------------------------------------------------
		align 4

loc_6889AC98:				; CODE XREF: .text:6889AC72j
		mov	edx, [esp+1Ch]
		xor	edx, ds:__stack_chk_guard
		jnz	short loc_6889ACAB
		or	eax, 20000h
		jmp	short loc_6889AC85
; ---------------------------------------------------------------------------

loc_6889ACAB:				; CODE XREF: .text:6889AC7Ej
					; .text:6889ACA2j
		call	__stack_chk_fail

; =============== S U B	R O U T	I N E =======================================


sub_6889ACB0	proc near		; DATA XREF: oscar_login+968o

var_3C		= dword	ptr -3Ch
var_20		= dword	ptr -20h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 2Ch
		mov	esi, [esp+3Ch+arg_8]
		mov	eax, ds:__stack_chk_guard
		mov	[esp+3Ch+var_20], eax
		xor	eax, eax
		mov	eax, [esp+3Ch+arg_C]
		mov	[esp+3Ch+var_3C], eax
		call	purple_connection_get_protocol_data
		mov	ebp, eax
		mov	edi, offset aNone ; "none"
		mov	ecx, 5
		repe cmpsb
		setnbe	bl
		setb	al
		sub	ebx, eax
		movsx	ebx, bl
		mov	eax, [ebp+0D8h]
		mov	[esp+3Ch+var_3C], eax
		call	aim_ssi_getpresence
		test	ebx, ebx
		jnz	short loc_6889AD20
		mov	edx, [esp+3Ch+var_20]
		xor	edx, ds:__stack_chk_guard
		jnz	short loc_6889AD31
		and	ah, 0FBh

loc_6889AD0C:				; CODE XREF: sub_6889ACB0+7Fj
		mov	[esp+3Ch+arg_4], eax
		mov	[esp+3Ch+arg_0], ebp
		add	esp, 2Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		jmp	aim_ssi_setpresence
; ---------------------------------------------------------------------------

loc_6889AD20:				; CODE XREF: sub_6889ACB0+4Bj
		mov	edx, [esp+3Ch+var_20]
		xor	edx, ds:__stack_chk_guard
		jnz	short loc_6889AD31
		or	ah, 4
		jmp	short loc_6889AD0C
; ---------------------------------------------------------------------------

loc_6889AD31:				; CODE XREF: sub_6889ACB0+57j
					; sub_6889ACB0+7Aj
		call	__stack_chk_fail
sub_6889ACB0	endp

; ---------------------------------------------------------------------------
		align 4

loc_6889AD38:				; DATA XREF: oscar_login+75Co
		push	esi
		push	ebx
		sub	esp, 34h
		mov	esi, [esp+40h]
		mov	eax, ds:__stack_chk_guard
		mov	[esp+2Ch], eax
		xor	eax, eax
		mov	ebx, [esp+4Ch]
		mov	dword ptr [esp+4], offset aNoResultsFound ; "No	results	found for email	address	%s"
		mov	dword ptr [esp], offset	aPidgin_6 ; "pidgin"
		call	libintl_dgettext
		mov	[esp+4], ebx
		mov	[esp], eax
		call	g_strdup_printf
		mov	ebx, eax
		mov	dword ptr [esp+18h], 0
		mov	dword ptr [esp+14h], 0
		mov	dword ptr [esp+10h], 0
		mov	[esp+0Ch], eax
		mov	dword ptr [esp+8], 0
		mov	dword ptr [esp+4], 0
		mov	eax, [esi+68h]
		mov	[esp], eax
		call	purple_notify_message
		mov	[esp], ebx
		call	g_free
		mov	eax, 1
		mov	edx, [esp+2Ch]
		xor	edx, ds:__stack_chk_guard
		jnz	short loc_6889ADC8
		add	esp, 34h
		pop	ebx
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_6889ADC8:				; CODE XREF: .text:6889ADC0j
		call	__stack_chk_fail
; ---------------------------------------------------------------------------
		align 10h

loc_6889ADD0:				; DATA XREF: oscar_login+734o
		push	esi
		push	ebx
		sub	esp, 34h
		mov	eax, ds:__stack_chk_guard
		mov	[esp+2Ch], eax
		xor	eax, eax
		mov	eax, [esp+40h]
		mov	esi, [eax+68h]
		mov	eax, [esp+50h]
		mov	[esp+0Ch], eax
		mov	[esp+8], eax
		mov	eax, [esp+4Ch]
		mov	[esp+4], eax
		mov	dword ptr [esp], offset	aSBrAHrefSSA ; "%s<br><a href=\"%s\">%s</a>"
		call	g_strdup_printf
		mov	ebx, eax
		mov	dword ptr [esp+4], offset aPopUpMessage	; "Pop-Up Message"
		mov	dword ptr [esp], offset	aPidgin_6 ; "pidgin"
		call	libintl_dgettext
		mov	dword ptr [esp+18h], 0
		mov	dword ptr [esp+14h], 0
		mov	[esp+10h], ebx
		mov	dword ptr [esp+0Ch], 0
		mov	[esp+8], eax
		mov	dword ptr [esp+4], 0
		mov	[esp], esi
		call	purple_notify_formatted
		mov	[esp], ebx
		call	g_free
		mov	eax, 1
		mov	edx, [esp+2Ch]
		xor	edx, ds:__stack_chk_guard
		jnz	short loc_6889AE6C
		add	esp, 34h
		pop	ebx
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_6889AE6C:				; CODE XREF: .text:6889AE64j
		call	__stack_chk_fail
; ---------------------------------------------------------------------------
		align 4

loc_6889AE74:				; DATA XREF: oscar_login+70Co
		push	esi
		push	ebx
		sub	esp, 34h
		mov	esi, [esp+40h]
		mov	eax, ds:__stack_chk_guard
		mov	[esp+2Ch], eax
		xor	eax, eax
		mov	edx, [esp+4Ch]
		mov	ebx, edx
		mov	eax, [esp+50h]
		and	edx, 0FFFFh
		test	eax, eax
		jz	loc_6889AF24

loc_6889AEA0:				; CODE XREF: .text:6889AF29j
		mov	[esp+0Ch], edx
		mov	[esp+8], eax
		mov	dword ptr [esp+4], offset aMotdSHu ; "MOTD: %s (%hu)\n"
		mov	dword ptr [esp], offset	aOscar_13 ; "oscar"
		call	purple_debug_misc
		cmp	bx, 3
		ja	short loc_6889AF0D
		mov	dword ptr [esp+4], offset aYourAimConnect ; "Your AIM connection may be	lost."
		mov	dword ptr [esp], offset	aPidgin_6 ; "pidgin"
		call	libintl_dgettext
		mov	dword ptr [esp+18h], 0
		mov	dword ptr [esp+14h], 0
		mov	dword ptr [esp+10h], 0
		mov	[esp+0Ch], eax
		mov	dword ptr [esp+8], 0
		mov	dword ptr [esp+4], 1
		mov	eax, [esi+68h]
		mov	[esp], eax
		call	purple_notify_message

loc_6889AF0D:				; CODE XREF: .text:6889AEC0j
		mov	eax, 1
		mov	edx, [esp+2Ch]
		xor	edx, ds:__stack_chk_guard
		jnz	short loc_6889AF2E
		add	esp, 34h
		pop	ebx
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_6889AF24:				; CODE XREF: .text:6889AE9Aj
		mov	eax, offset aUnknown_0 ; "Unknown"
		jmp	loc_6889AEA0
; ---------------------------------------------------------------------------

loc_6889AF2E:				; CODE XREF: .text:6889AF1Cj
		call	__stack_chk_fail
; ---------------------------------------------------------------------------
		align 4

loc_6889AF34:				; DATA XREF: oscar_login+644o
		push	edi
		push	esi
		push	ebx
		sub	esp, 20h
		mov	ebx, [esp+30h]
		mov	eax, ds:__stack_chk_guard
		mov	[esp+1Ch], eax
		xor	eax, eax
		mov	eax, [ebx+68h]
		mov	[esp], eax
		call	purple_connection_get_account
		mov	esi, eax
		movzx	edi, word ptr [esp+3Ch]
		mov	[esp+8], edi
		mov	dword ptr [esp+4], offset aLocateRightsMa ; "locate rights: max	sig len	= %d\n"
		mov	dword ptr [esp], offset	aOscar_13 ; "oscar"
		call	purple_debug_misc
		mov	[ebx+64h], edi
		mov	[ebx+60h], edi
		mov	dword ptr [esp+4], 700E402Dh
		mov	dword ptr [esp+8], 1
		mov	[esp], ebx
		call	aim_locate_setcaps
		mov	[esp], esi
		call	purple_account_get_active_status
		mov	ecx, [esi+0Ch]
		mov	[esp+4], eax
		mov	dword ptr [esp], 1
		mov	edx, 1
		mov	eax, esi
		call	sub_6889A35C
		mov	eax, 1
		mov	edx, [esp+1Ch]
		xor	edx, ds:__stack_chk_guard
		jnz	short loc_6889AFCB
		add	esp, 20h
		pop	ebx
		pop	esi
		pop	edi
		retn
; ---------------------------------------------------------------------------

loc_6889AFCB:				; CODE XREF: .text:6889AFC2j
		call	__stack_chk_fail

; =============== S U B	R O U T	I N E =======================================


sub_6889AFD0	proc near		; DATA XREF: oscar_login+5CCo

var_5C		= dword	ptr -5Ch
var_58		= dword	ptr -58h
var_54		= dword	ptr -54h
var_50		= dword	ptr -50h
var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_30		= dword	ptr -30h
var_20		= dword	ptr -20h
arg_0		= dword	ptr  4
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h
arg_18		= word ptr  1Ch

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 4Ch
		mov	edi, [esp+5Ch+arg_0]
		mov	eax, ds:__stack_chk_guard
		mov	[esp+5Ch+var_20], eax
		xor	eax, eax
		mov	eax, [edi+68h]
		mov	[esp+5Ch+var_5C], eax
		call	purple_connection_get_account
		mov	ebp, eax
		mov	esi, [esp+5Ch+arg_10]
		mov	eax, [esp+5Ch+arg_14]
		movzx	edx, [esp+5Ch+arg_18]
		cmp	edx, 4		; switch 5 cases
		jbe	loc_6889B0BC
		mov	edx, [esi]	; jumptable 6889B0BC default case
		movzx	ebx, ax
		mov	[esp+5Ch+var_50], ebx
		mov	[esp+5Ch+var_54], offset aYouMissedHuMes ; "You	missed %hu messages from %s for	an "...
		mov	[esp+5Ch+var_58], offset aYouMissedHuM_0 ; "You	missed %hu message from	%s for an u"...
		xchg	ax, ax

loc_6889B024:				; CODE XREF: sub_6889AFD0+10Dj
					; sub_6889AFD0+12Dj ...
		mov	[esp+5Ch+var_5C], offset aPidgin_6 ; "pidgin"
		mov	[esp+5Ch+var_30], edx
		call	libintl_dngettext
		mov	edx, [esp+5Ch+var_30]
		mov	[esp+5Ch+var_54], edx
		mov	[esp+5Ch+var_58], ebx
		mov	[esp+5Ch+var_5C], eax
		call	g_strdup_printf
		mov	ebx, eax
		mov	[esp+5Ch+var_54], eax
		mov	[esp+5Ch+var_58], ebp
		mov	eax, [esi]
		mov	[esp+5Ch+var_5C], eax
		call	purple_conv_present_error
		test	eax, eax
		jnz	short loc_6889B097
		mov	[esp+5Ch+var_44], 0
		mov	[esp+5Ch+var_48], 0
		mov	[esp+5Ch+var_4C], 0
		mov	[esp+5Ch+var_50], ebx
		mov	[esp+5Ch+var_54], 0
		mov	[esp+5Ch+var_58], 0
		mov	eax, [edi+68h]
		mov	[esp+5Ch+var_5C], eax
		call	purple_notify_message

loc_6889B097:				; CODE XREF: sub_6889AFD0+8Ej
		mov	[esp+5Ch+var_5C], ebx
		call	g_free
		mov	eax, 1
		mov	edx, [esp+5Ch+var_20]
		xor	edx, ds:__stack_chk_guard
		jnz	loc_6889B162
		add	esp, 4Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_6889B0BC:				; CODE XREF: sub_6889AFD0+33j
		jmp	ds:off_688B2778[edx*4] ; switch	jump
; ---------------------------------------------------------------------------
		align 4

loc_6889B0C4:				; CODE XREF: sub_6889AFD0:loc_6889B0BCj
					; DATA XREF: .rdata:off_688B2778o
		mov	edx, [esi]	; jumptable 6889B0BC case 3
		movzx	ebx, ax
		mov	[esp+5Ch+var_50], ebx
		mov	[esp+5Ch+var_54], offset aYouMissedHuM_1 ; "You	missed %hu messages from %s because"...
		mov	[esp+5Ch+var_58], offset aYouMissedHuM_2 ; "You	missed %hu message from	%s because "...
		jmp	loc_6889B024
; ---------------------------------------------------------------------------
		align 4

loc_6889B0E4:				; CODE XREF: sub_6889AFD0:loc_6889B0BCj
					; DATA XREF: .rdata:off_688B2778o
		mov	edx, [esi]	; jumptable 6889B0BC case 4
		movzx	ebx, ax
		mov	[esp+5Ch+var_50], ebx
		mov	[esp+5Ch+var_54], offset aYouMissedHuM_3 ; "You	missed %hu messages from %s because"...
		mov	[esp+5Ch+var_58], offset aYouMissedHuM_4 ; "You	missed %hu message from	%s because "...
		jmp	loc_6889B024
; ---------------------------------------------------------------------------
		align 4

loc_6889B104:				; CODE XREF: sub_6889AFD0:loc_6889B0BCj
					; DATA XREF: .rdata:off_688B2778o
		mov	edx, [esi]	; jumptable 6889B0BC case 0
		movzx	ebx, ax
		mov	[esp+5Ch+var_50], ebx
		mov	[esp+5Ch+var_54], offset aYouMissedHuM_5 ; "You	missed %hu messages from %s because"...
		mov	[esp+5Ch+var_58], offset aYouMissedHuM_6 ; "You	missed %hu message from	%s because "...
		jmp	loc_6889B024
; ---------------------------------------------------------------------------
		align 4

loc_6889B124:				; CODE XREF: sub_6889AFD0:loc_6889B0BCj
					; DATA XREF: .rdata:off_688B2778o
		mov	edx, [esi]	; jumptable 6889B0BC case 1
		movzx	ebx, ax
		mov	[esp+5Ch+var_50], ebx
		mov	[esp+5Ch+var_54], offset aYouMissedHuM_7 ; "You	missed %hu messages from %s because"...
		mov	[esp+5Ch+var_58], offset aYouMissedHuM_8 ; "You	missed %hu message from	%s because "...
		jmp	loc_6889B024
; ---------------------------------------------------------------------------
		align 4

loc_6889B144:				; CODE XREF: sub_6889AFD0:loc_6889B0BCj
					; DATA XREF: .rdata:off_688B2778o
		mov	edx, [esi]	; jumptable 6889B0BC case 2
		movzx	ebx, ax
		mov	[esp+5Ch+var_50], ebx
		mov	[esp+5Ch+var_54], offset aYouMissedHuM_9 ; "You	missed %hu messages from %s because"...
		mov	[esp+5Ch+var_58], offset aYouMissedHu_10 ; "You	missed %hu message from	%s because "...
		jmp	loc_6889B024
; ---------------------------------------------------------------------------

loc_6889B162:				; CODE XREF: sub_6889AFD0+DEj
		call	__stack_chk_fail
sub_6889AFD0	endp

; ---------------------------------------------------------------------------
		align 4

; =============== S U B	R O U T	I N E =======================================


sub_6889B168	proc near		; DATA XREF: oscar_login+554o

var_5C		= dword	ptr -5Ch
var_58		= dword	ptr -58h
var_54		= dword	ptr -54h
var_50		= dword	ptr -50h
var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_2D		= byte ptr -2Dh
var_20		= dword	ptr -20h
arg_0		= dword	ptr  4
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 4Ch
		mov	eax, ds:__stack_chk_guard
		mov	[esp+5Ch+var_20], eax
		xor	eax, eax
		mov	eax, [esp+5Ch+arg_0]
		mov	esi, [eax+68h]
		mov	ebx, [esp+5Ch+arg_C]
		mov	eax, [esp+5Ch+arg_10]
		mov	[esp+5Ch+var_2D], al
		mov	edi, [esp+5Ch+arg_14]
		and	eax, 0FFh
		mov	[esp+5Ch+var_50], eax
		mov	[esp+5Ch+var_54], ebx
		mov	[esp+5Ch+var_58], offset aSsiReceivedAut ; "ssi: received authorization	reply from "...
		mov	[esp+5Ch+var_5C], offset aOscar_13 ; "oscar"
		call	purple_debug_info
		mov	[esp+5Ch+var_5C], esi
		call	purple_connection_get_account
		mov	[esp+5Ch+var_58], ebx
		mov	[esp+5Ch+var_5C], eax
		call	purple_find_buddy
		mov	ebp, eax
		test	eax, eax
		jz	loc_6889B2A4
		mov	[esp+5Ch+var_5C], eax
		call	purple_buddy_get_alias_only
		test	eax, eax
		jz	loc_6889B2A4
		mov	[esp+5Ch+var_5C], ebp
		call	purple_buddy_get_alias_only
		mov	[esp+5Ch+var_54], eax
		mov	[esp+5Ch+var_58], ebx
		mov	[esp+5Ch+var_5C], offset aSS_1 ; "%s (%s)"
		call	g_strdup_printf
		mov	ebx, eax
		cmp	[esp+5Ch+var_2D], 0
		jnz	loc_6889B2B9

loc_6889B209:				; CODE XREF: sub_6889B168+14Bj
		test	edi, edi
		jz	loc_6889B2E8

loc_6889B211:				; CODE XREF: sub_6889B168+196j
		mov	[esp+5Ch+var_58], offset aTheUserSHasDen ; "The	user %s	has denied your	request	to "...
		mov	[esp+5Ch+var_5C], offset aPidgin_6 ; "pidgin"
		call	libintl_dgettext
		mov	[esp+5Ch+var_54], edi
		mov	[esp+5Ch+var_58], ebx
		mov	[esp+5Ch+var_5C], eax
		call	g_strdup_printf
		mov	edi, eax
		mov	[esp+5Ch+var_58], offset aAuthorizationD ; "Authorization Denied"

loc_6889B23F:				; CODE XREF: sub_6889B168+17Bj
		mov	[esp+5Ch+var_5C], offset aPidgin_6 ; "pidgin"
		call	libintl_dgettext
		mov	[esp+5Ch+var_44], 0
		mov	[esp+5Ch+var_48], 0
		mov	[esp+5Ch+var_4C], edi
		mov	[esp+5Ch+var_50], eax
		mov	[esp+5Ch+var_54], 0
		mov	[esp+5Ch+var_58], 2
		mov	[esp+5Ch+var_5C], esi
		call	purple_notify_message
		mov	[esp+5Ch+var_5C], edi
		call	g_free
		mov	[esp+5Ch+var_5C], ebx
		call	g_free
		mov	eax, 1
		mov	edx, [esp+5Ch+var_20]
		xor	edx, ds:__stack_chk_guard
		jnz	short loc_6889B303
		add	esp, 4Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_6889B2A4:				; CODE XREF: sub_6889B168+62j
					; sub_6889B168+72j
		mov	[esp+5Ch+var_5C], ebx
		call	g_strdup
		mov	ebx, eax
		cmp	[esp+5Ch+var_2D], 0
		jz	loc_6889B209

loc_6889B2B9:				; CODE XREF: sub_6889B168+9Bj
		mov	[esp+5Ch+var_58], offset aTheUserSHasGra ; "The	user %s	has granted your request to"...
		mov	[esp+5Ch+var_5C], offset aPidgin_6 ; "pidgin"
		call	libintl_dgettext
		mov	[esp+5Ch+var_58], ebx
		mov	[esp+5Ch+var_5C], eax
		call	g_strdup_printf
		mov	edi, eax
		mov	[esp+5Ch+var_58], offset aAuthorizationG ; "Authorization Granted"
		jmp	loc_6889B23F
; ---------------------------------------------------------------------------

loc_6889B2E8:				; CODE XREF: sub_6889B168+A3j
		mov	[esp+5Ch+var_58], offset aNoReasonGiven_ ; "No reason given."
		mov	[esp+5Ch+var_5C], offset aPidgin_6 ; "pidgin"
		call	libintl_dgettext
		mov	edi, eax
		jmp	loc_6889B211
; ---------------------------------------------------------------------------

loc_6889B303:				; CODE XREF: sub_6889B168+132j
		call	__stack_chk_fail
sub_6889B168	endp


; =============== S U B	R O U T	I N E =======================================


sub_6889B308	proc near		; DATA XREF: oscar_login+504o

var_8C		= dword	ptr -8Ch
var_7C		= dword	ptr -7Ch
var_78		= dword	ptr -78h
var_74		= dword	ptr -74h
var_70		= dword	ptr -70h
var_6C		= dword	ptr -6Ch
var_68		= dword	ptr -68h
var_64		= dword	ptr -64h
var_60		= dword	ptr -60h
var_5C		= dword	ptr -5Ch
var_58		= dword	ptr -58h
var_54		= dword	ptr -54h
var_50		= dword	ptr -50h
var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_20		= dword	ptr -20h
arg_0		= dword	ptr  4
arg_C		= dword	ptr  10h

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 6Ch
		mov	eax, ds:__stack_chk_guard
		mov	[esp+7Ch+var_20], eax
		xor	eax, eax
		mov	eax, [esp+7Ch+arg_0]
		mov	esi, [eax+68h]
		mov	ebx, [esp+7Ch+arg_C]
		mov	[esp+7Ch+var_74], ebx
		mov	[esp+7Ch+var_78], offset aSsiSHasGivenYo ; "ssi: %s has	given you permission to	add"...
		mov	[esp+7Ch+var_7C], offset aOscar_13 ; "oscar"
		call	purple_debug_info
		mov	[esp+7Ch+var_7C], esi
		call	purple_connection_get_account
		mov	[esp+7Ch+var_78], ebx
		mov	[esp+7Ch+var_7C], eax
		call	purple_find_buddy
		mov	ebp, eax
		test	eax, eax
		jz	loc_6889B4CC
		mov	[esp+7Ch+var_7C], eax
		call	purple_buddy_get_alias_only
		test	eax, eax
		jz	loc_6889B4BC
		mov	[esp+7Ch+var_7C], ebp
		call	purple_buddy_get_alias_only
		mov	[esp+7Ch+var_74], eax
		mov	[esp+7Ch+var_78], ebx
		mov	[esp+7Ch+var_7C], offset aSS_1 ; "%s (%s)"
		call	g_strdup_printf

loc_6889B38D:				; CODE XREF: sub_6889B308+1BCj
		mov	edi, eax
		mov	[esp+7Ch+var_78], offset aTheUserSHasGiv ; "The	user %s	has given you permission to"...
		mov	[esp+7Ch+var_7C], offset aPidgin_6 ; "pidgin"
		call	libintl_dgettext
		mov	[esp+7Ch+var_78], edi
		mov	[esp+7Ch+var_7C], eax
		call	g_strdup_printf
		mov	[esp+7Ch+var_30], eax
		mov	[esp+7Ch+var_7C], edi
		call	g_free
		mov	[esp+7Ch+var_7C], 0Ch
		call	g_malloc
		mov	edi, eax
		mov	[eax], esi
		mov	[esp+7Ch+var_7C], ebx
		call	g_strdup
		mov	[edi+4], eax
		mov	[esp+7Ch+var_7C], ebp
		call	purple_buddy_get_alias_only
		mov	[esp+7Ch+var_7C], eax
		call	g_strdup

loc_6889B3E6:				; CODE XREF: sub_6889B308+217j
		mov	[edi+8], eax
		mov	[esp+7Ch+var_78], offset a_no ;	"_No"
		mov	[esp+7Ch+var_7C], offset aPidgin_6 ; "pidgin"
		call	libintl_dgettext
		mov	[esp+7Ch+var_78], offset a_yes ; "_Yes"
		mov	[esp+7Ch+var_7C], offset aPidgin_6 ; "pidgin"
		mov	[esp+7Ch+var_38], eax
		call	libintl_dgettext
		mov	[esp+7Ch+var_7C], esi
		mov	[esp+7Ch+var_34], eax
		call	purple_connection_get_account
		mov	ebp, eax
		mov	[esp+7Ch+var_78], offset aAuthorizatio_0 ; "Authorization Given"
		mov	[esp+7Ch+var_7C], offset aPidgin_6 ; "pidgin"
		call	libintl_dgettext
		mov	[esp+7Ch+var_48], offset oscar_free_name_data
		mov	ecx, [esp+7Ch+var_38]
		mov	[esp+7Ch+var_4C], ecx
		mov	[esp+7Ch+var_50], offset sub_6889902C
		mov	edx, [esp+7Ch+var_34]
		mov	[esp+7Ch+var_54], edx
		mov	[esp+7Ch+var_58], 2
		mov	[esp+7Ch+var_5C], edi
		mov	[esp+7Ch+var_60], 0
		mov	[esp+7Ch+var_64], ebx
		mov	[esp+7Ch+var_68], ebp
		mov	[esp+7Ch+var_6C], 0FFFFFFFFh
		mov	edx, [esp+7Ch+var_30]
		mov	[esp+7Ch+var_70], edx
		mov	[esp+7Ch+var_74], eax
		mov	[esp+7Ch+var_78], 0
		mov	[esp+7Ch+var_7C], esi
		call	purple_request_action
		mov	eax, [esp+7Ch+var_30]
		mov	[esp+7Ch+var_7C], eax
		call	g_free
		mov	eax, 1
		mov	edx, [esp+7Ch+var_20]
		xor	edx, ds:__stack_chk_guard
		jnz	short loc_6889B524
		add	esp, 6Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_6889B4BC:				; CODE XREF: sub_6889B308+63j
		mov	[esp+7Ch+var_7C], ebx
		call	g_strdup
		jmp	loc_6889B38D
; ---------------------------------------------------------------------------
		align 4

loc_6889B4CC:				; CODE XREF: sub_6889B308+53j
		mov	[esp+7Ch+var_7C], ebx
		call	g_strdup
		mov	edi, eax
		mov	[esp+7Ch+var_78], offset aTheUserSHasGiv ; "The	user %s	has given you permission to"...
		mov	[esp+7Ch+var_7C], offset aPidgin_6 ; "pidgin"
		call	libintl_dgettext
		mov	[esp+7Ch+var_78], edi
		mov	[esp+7Ch+var_7C], eax
		call	g_strdup_printf
		mov	[esp+7Ch+var_30], eax
		mov	[esp+7Ch+var_7C], edi
		call	g_free
		mov	[esp+7Ch+var_7C], 0Ch
		call	g_malloc
		mov	edi, eax
		mov	[eax], esi
		mov	[esp+7Ch+var_7C], ebx
		call	g_strdup
		mov	[edi+4], eax
		xor	eax, eax
		jmp	loc_6889B3E6
; ---------------------------------------------------------------------------

loc_6889B524:				; CODE XREF: sub_6889B308+1AAj
		call	__stack_chk_fail
; ---------------------------------------------------------------------------
		align 4

loc_6889B52C:				; DATA XREF: oscar_login+48Co
		push	edi
		push	esi
		push	ebx
		sub	esp, 30h
		mov	eax, ds:__stack_chk_guard
		mov	[esp+0B8h+var_8C], eax
		xor	eax, eax
		mov	eax, [esp+0B8h+var_78]
		mov	esi, [eax+68h]
		mov	ebx, [esp+0B8h+var_6C]
		test	ebx, ebx
		jnz	loc_6889B5F0
		jmp	loc_6889B684
; ---------------------------------------------------------------------------
		align 4

loc_6889B558:				; CODE XREF: sub_6889B308+332j
		cmp	ax, 0Eh
		jz	loc_6889B658
		test	ax, ax
		jz	short loc_6889B5E5
		mov	[esp+0Ch], eax
		movzx	eax, word ptr [ebx]
		mov	[esp+8], eax
		mov	dword ptr [esp+4], offset aSsiAction0x04h ; "ssi: Action 0x%04hx was unsuccessful wi"...
		mov	dword ptr [esp+0], offset aOscar_13 ; "oscar"
		call	purple_debug_error
		mov	edi, [ebx+4]
		test	edi, edi
		jz	loc_6889B720

loc_6889B591:				; CODE XREF: sub_6889B308+42Ej
		mov	dword ptr [esp+4], offset aUnableToAddThe ; "Unable to add the buddy %s	for an unkno"...

loc_6889B599:				; CODE XREF: sub_6889B308+34Bj
		mov	dword ptr [esp+0], offset aPidgin_6 ; "pidgin"
		call	libintl_dgettext
		mov	[esp+4], edi
		mov	[esp+0], eax
		call	g_strdup_printf
		mov	edi, eax
		mov	eax, [ebx+4]
		test	eax, eax
		jz	short loc_6889B5DD
		mov	[esp+0], esi
		call	purple_connection_get_account
		mov	[esp+8], edi
		mov	[esp+4], eax
		mov	eax, [ebx+4]
		mov	[esp+0], eax
		call	purple_conv_present_error
		test	eax, eax
		jz	loc_6889B6B8

loc_6889B5DD:				; CODE XREF: sub_6889B308+2B0j
					; sub_6889B308+3F4j
		mov	[esp+0], edi
		call	g_free

loc_6889B5E5:				; CODE XREF: sub_6889B308+25Dj
					; sub_6889B308+32Cj ...
		mov	ebx, [ebx+0Ch]
		test	ebx, ebx
		jz	loc_6889B684

loc_6889B5F0:				; CODE XREF: sub_6889B308+242j
					; sub_6889B308+376j
		mov	eax, [ebx+8]
		test	eax, eax
		jz	loc_6889B6A0
		mov	eax, [eax]
		test	eax, eax
		jz	loc_6889B6AC

loc_6889B605:				; CODE XREF: sub_6889B308+39Dj
					; sub_6889B308+3A9j
		mov	[esp+10h], eax
		movzx	eax, word ptr [ebx]
		mov	[esp+0Ch], eax
		movzx	eax, word ptr [ebx+2]
		mov	[esp+8], eax
		mov	dword ptr [esp+4], offset aSsiStatusIs0x0 ; "ssi: status is 0x%04hx for	a 0x%04hx ac"...
		mov	dword ptr [esp+0], offset aOscar_13 ; "oscar"
		call	purple_debug_misc
		movzx	eax, word ptr [ebx+2]
		cmp	ax, 0FFFFh
		jz	short loc_6889B5E5
		cmp	ax, 0Ch
		jnz	loc_6889B558
		mov	edi, [ebx+4]
		test	edi, edi
		jz	loc_6889B704

loc_6889B64B:				; CODE XREF: sub_6889B308+412j
		mov	dword ptr [esp+4], offset aUnableToAddT_0 ; "Unable to add the buddy %s	because	you "...
		jmp	loc_6889B599
; ---------------------------------------------------------------------------

loc_6889B658:				; CODE XREF: sub_6889B308+254j
		cmp	word ptr [ebx],	8
		jnz	short loc_6889B5E5
		mov	eax, [ebx+4]
		test	eax, eax
		jz	short loc_6889B5E5
		mov	dword ptr [esp+8], 0
		mov	[esp+4], eax
		mov	[esp+0], esi
		call	oscar_auth_sendrequest
		mov	ebx, [ebx+0Ch]
		test	ebx, ebx
		jnz	loc_6889B5F0

loc_6889B684:				; CODE XREF: sub_6889B308+248j
					; sub_6889B308+2E2j
		mov	eax, 1
		mov	edx, [esp+0B8h+var_8C]
		xor	edx, ds:__stack_chk_guard
		jnz	loc_6889B73B
		add	esp, 30h
		pop	ebx
		pop	esi
		pop	edi
		retn
; ---------------------------------------------------------------------------

loc_6889B6A0:				; CODE XREF: sub_6889B308+2EDj
		mov	eax, offset aNoItem ; "no item"
		jmp	loc_6889B605
; ---------------------------------------------------------------------------
		align 4

loc_6889B6AC:				; CODE XREF: sub_6889B308+2F7j
		mov	eax, offset aNoName ; "no name"
		jmp	loc_6889B605
; ---------------------------------------------------------------------------
		align 4

loc_6889B6B8:				; CODE XREF: sub_6889B308+2CFj
		mov	dword ptr [esp+4], offset aUnableToAdd ; "Unable to Add"
		mov	dword ptr [esp+0], offset aPidgin_6 ; "pidgin"
		call	libintl_dgettext
		mov	dword ptr [esp+18h], 0
		mov	dword ptr [esp+14h], 0
		mov	[esp+10h], edi
		mov	[esp+0Ch], eax
		mov	dword ptr [esp+8], 0
		mov	dword ptr [esp+4], 0
		mov	[esp+0], esi
		call	purple_notify_message
		jmp	loc_6889B5DD
; ---------------------------------------------------------------------------
		align 4

loc_6889B704:				; CODE XREF: sub_6889B308+33Dj
		mov	dword ptr [esp+4], offset aNoName_0 ; "(no name)"
		mov	dword ptr [esp+0], offset aPidgin_6 ; "pidgin"
		call	libintl_dgettext
		mov	edi, eax
		jmp	loc_6889B64B
; ---------------------------------------------------------------------------
		align 10h

loc_6889B720:				; CODE XREF: sub_6889B308+283j
		mov	dword ptr [esp+4], offset aNoName_0 ; "(no name)"
		mov	dword ptr [esp+0], offset aPidgin_6 ; "pidgin"
		call	libintl_dgettext
		mov	edi, eax
		jmp	loc_6889B591
; ---------------------------------------------------------------------------

loc_6889B73B:				; CODE XREF: sub_6889B308+38Bj
		call	__stack_chk_fail
sub_6889B308	endp ; sp-analysis failed


; =============== S U B	R O U T	I N E =======================================


sub_6889B740	proc near		; DATA XREF: oscar_login+43Co

var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_30		= dword	ptr -30h
var_20		= dword	ptr -20h
arg_0		= dword	ptr  4
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 3Ch
		mov	edx, [esp+4Ch+arg_0]
		mov	[esp+4Ch+var_30], edx
		mov	eax, ds:__stack_chk_guard
		mov	[esp+4Ch+var_20], eax
		xor	eax, eax
		mov	edi, [esp+4Ch+arg_C]
		mov	ebx, [esp+4Ch+arg_10]
		mov	[esp+4Ch+var_4C], offset aSsiRights ; "ssi rights:"
		call	g_string_new
		mov	esi, eax
		test	edi, edi
		jle	loc_6889B81D
		xor	ebp, ebp
		xchg	ax, ax

loc_6889B77C:				; CODE XREF: sub_6889B740+5Bj
		movzx	eax, word ptr [ebx+ebp*2]
		mov	[esp+4Ch+var_40], eax
		mov	[esp+4Ch+var_44], ebp
		mov	[esp+4Ch+var_48], offset aMaxType0x04xHd ; " max type 0x%04x=%hd,"
		mov	[esp+4Ch+var_4C], esi
		call	g_string_append_printf
		inc	ebp
		cmp	ebp, edi
		jnz	short loc_6889B77C
		mov	[esp+4Ch+var_48], offset asc_688B2AE8 ;	"\n"
		mov	[esp+4Ch+var_4C], esi
		call	g_string_append
		mov	eax, [esi]
		mov	[esp+4Ch+var_44], eax
		mov	[esp+4Ch+var_48], offset aS ; "%s"
		mov	[esp+4Ch+var_4C], offset aOscar_13 ; "oscar"
		call	purple_debug_misc
		mov	[esp+4Ch+var_48], 1
		mov	[esp+4Ch+var_4C], esi
		call	g_string_free
		movzx	eax, word ptr [ebx]
		mov	edx, [esp+4Ch+var_30]
		mov	[edx+50h], eax
		movzx	eax, word ptr [ebx+2]
		mov	[edx+54h], eax
		cmp	ebp, 1
		jz	short loc_6889B804
		movzx	eax, word ptr [ebx+4]
		mov	edx, [esp+4Ch+var_30]
		mov	[edx+58h], eax
		cmp	ebp, 2
		jz	short loc_6889B804
		movzx	eax, word ptr [ebx+6]
		mov	[edx+5Ch], eax

loc_6889B804:				; CODE XREF: sub_6889B740+ABj
					; sub_6889B740+BBj ...
		mov	eax, 1
		mov	edx, [esp+4Ch+var_20]
		xor	edx, ds:__stack_chk_guard
		jnz	short loc_6889B868
		add	esp, 3Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_6889B81D:				; CODE XREF: sub_6889B740+32j
		mov	[esp+4Ch+var_48], offset asc_688B2AE8 ;	"\n"
		mov	[esp+4Ch+var_4C], eax
		call	g_string_append
		mov	eax, [esi]
		mov	[esp+4Ch+var_44], eax
		mov	[esp+4Ch+var_48], offset aS ; "%s"
		mov	[esp+4Ch+var_4C], offset aOscar_13 ; "oscar"
		call	purple_debug_misc
		mov	[esp+4Ch+var_48], 1
		mov	[esp+4Ch+var_4C], esi
		call	g_string_free
		test	edi, edi
		jnz	short loc_6889B804
		movzx	eax, word ptr [ebx]
		mov	edx, [esp+4Ch+var_30]
		mov	[edx+50h], eax
		jmp	short loc_6889B804
; ---------------------------------------------------------------------------
		align 4

loc_6889B868:				; CODE XREF: sub_6889B740+D3j
		call	__stack_chk_fail
sub_6889B740	endp

; ---------------------------------------------------------------------------
		align 10h

loc_6889B870:				; DATA XREF: oscar_login+374o
		push	edi
		push	esi
		push	ebx
		sub	esp, 20h
		mov	eax, ds:__stack_chk_guard
		mov	[esp+1Ch], eax
		xor	eax, eax
		mov	eax, [esp+30h]
		mov	eax, [eax+68h]
		mov	edx, [esp+34h]
		call	sub_68898FDC
		mov	ebx, eax
		test	eax, eax
		jz	short loc_6889B8D1
		mov	edi, [esp+3Ch]
		mov	esi, [esp+40h]
		mov	eax, esi
		and	eax, 0FFFFh
		mov	[esp+0Ch], eax
		mov	eax, edi
		and	eax, 0FFFFh
		mov	[esp+8], eax
		mov	dword ptr [esp+4], offset aInsideChat_inf ; "inside chat_info_update (maxmsglen	= %h"...
		mov	dword ptr [esp], offset	aOscar_13 ; "oscar"
		call	purple_debug_misc
		mov	[ebx+1Ch], di
		mov	[ebx+1Eh], si

loc_6889B8D1:				; CODE XREF: .text:6889B895j
		mov	eax, 1
		mov	edx, [esp+1Ch]
		xor	edx, ds:__stack_chk_guard
		jnz	short loc_6889B8E9
		add	esp, 20h
		pop	ebx
		pop	esi
		pop	edi
		retn
; ---------------------------------------------------------------------------

loc_6889B8E9:				; CODE XREF: .text:6889B8E0j
		call	__stack_chk_fail
; ---------------------------------------------------------------------------
		align 10h

loc_6889B8F0:				; DATA XREF: oscar_login+284o
		push	edi
		push	esi
		push	ebx
		sub	esp, 20h
		mov	ebx, [esp+30h]
		mov	eax, ds:__stack_chk_guard
		mov	[esp+1Ch], eax
		xor	eax, eax
		movzx	esi, word ptr [esp+40h]
		movzx	edi, word ptr [esp+3Ch]
		mov	[esp+0Ch], esi
		mov	[esp+8], edi
		mov	dword ptr [esp+4], offset aBuddyListRight ; "buddy list	rights:	Max buddies = %hu / "...
		mov	dword ptr [esp], offset	aOscar_13 ; "oscar"
		call	purple_debug_misc
		mov	[ebx+50h], edi
		mov	[ebx+4Ch], esi
		mov	eax, 1
		mov	edx, [esp+1Ch]
		xor	edx, ds:__stack_chk_guard
		jnz	short loc_6889B949
		add	esp, 20h
		pop	ebx
		pop	esi
		pop	edi
		retn
; ---------------------------------------------------------------------------

loc_6889B949:				; CODE XREF: .text:6889B940j
		call	__stack_chk_fail
; ---------------------------------------------------------------------------
		align 10h

loc_6889B950:				; DATA XREF: oscar_login+F4o
		push	esi
		push	ebx
		sub	esp, 134h
		mov	eax, ds:__stack_chk_guard
		mov	[esp+12Ch], eax
		xor	eax, eax
		mov	eax, [esp+140h]
		mov	ebx, [eax+68h]
		mov	eax, [esp+14Ch]
		test	ax, ax
		jz	short loc_6889B9C4
		mov	dword ptr [esp+0Ch], offset aUnknown_1 ; "unknown"
		and	eax, 0FFFFh
		mov	[esp+8], eax
		mov	dword ptr [esp+4], offset aAccountConfirm ; "account confirmation returned status 0x"...
		mov	dword ptr [esp], offset	aOscar_13 ; "oscar"
		call	purple_debug_info

loc_6889B9A1:				; CODE XREF: .text:6889BA6Fj
		mov	eax, 1
		mov	edx, [esp+12Ch]
		xor	edx, ds:__stack_chk_guard
		jnz	loc_6889BA74
		add	esp, 134h
		pop	ebx
		pop	esi
		retn
; ---------------------------------------------------------------------------
		align 4

loc_6889B9C4:				; CODE XREF: .text:6889B97Aj
		mov	dword ptr [esp+0Ch], offset aEmailSent ; "email	sent"
		and	eax, 0FFFFh
		mov	[esp+8], eax
		mov	dword ptr [esp+4], offset aAccountConfirm ; "account confirmation returned status 0x"...
		mov	dword ptr [esp], offset	aOscar_13 ; "oscar"
		call	purple_debug_info
		mov	[esp], ebx
		call	purple_connection_get_account
		mov	[esp], eax
		call	purple_account_get_username
		mov	esi, eax
		mov	dword ptr [esp+4], offset aYouShouldRecei ; "You should	receive	an email asking	to c"...
		mov	dword ptr [esp], offset	aPidgin_6 ; "pidgin"
		call	libintl_dgettext
		mov	[esp+0Ch], esi
		mov	[esp+8], eax
		mov	dword ptr [esp+4], 100h
		lea	esi, [esp+2Ch]
		mov	[esp], esi
		call	g_snprintf
		mov	dword ptr [esp+4], offset aAccountConfi_0 ; "Account Confirmation Requested"
		mov	dword ptr [esp], offset	aPidgin_6 ; "pidgin"
		call	libintl_dgettext
		mov	dword ptr [esp+18h], 0
		mov	dword ptr [esp+14h], 0
		mov	[esp+10h], esi
		mov	[esp+0Ch], eax
		mov	dword ptr [esp+8], 0
		mov	dword ptr [esp+4], 2
		mov	[esp], ebx
		call	purple_notify_message
		jmp	loc_6889B9A1
; ---------------------------------------------------------------------------

loc_6889BA74:				; CODE XREF: .text:6889B9B3j
		call	__stack_chk_fail
; ---------------------------------------------------------------------------
		align 4

; =============== S U B	R O U T	I N E =======================================


sub_6889BA7C	proc near		; DATA XREF: oscar_login+A4o
					; oscar_login+CCo

var_5C		= dword	ptr -5Ch
var_58		= dword	ptr -58h
var_54		= dword	ptr -54h
var_50		= dword	ptr -50h
var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_20		= dword	ptr -20h
arg_0		= dword	ptr  4
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h
arg_18		= dword	ptr  1Ch
arg_1C		= dword	ptr  20h
arg_20		= dword	ptr  24h

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 4Ch
		mov	eax, ds:__stack_chk_guard
		mov	[esp+5Ch+var_20], eax
		xor	eax, eax
		mov	eax, [esp+5Ch+arg_0]
		mov	eax, [eax+68h]
		mov	[esp+5Ch+var_38], eax
		mov	edx, [esp+5Ch+arg_C]
		mov	ecx, [esp+5Ch+arg_10]
		mov	edi, [esp+5Ch+arg_14]
		mov	esi, edi
		mov	ebp, [esp+5Ch+arg_18]
		mov	eax, [esp+5Ch+arg_1C]
		mov	ebx, [esp+5Ch+arg_20]
		test	ebx, ebx
		jz	loc_6889BCAC
		mov	[esp+5Ch+var_34], ebx
		test	eax, eax
		jz	loc_6889BCBC

loc_6889BACA:				; CODE XREF: sub_6889BA7C+23Aj
		test	ebp, ebp
		jz	loc_6889BCCC

loc_6889BAD2:				; CODE XREF: sub_6889BA7C+247j
		mov	[esp+5Ch+var_30], ebp

loc_6889BAD6:				; CODE XREF: sub_6889BA7C+258j
		and	edi, 0FFFFh
		and	ecx, 0FFFFh
		mov	[esp+5Ch+var_3C], ecx
		test	edx, edx
		jz	loc_6889BC90
		mov	edx, offset aChange ; "change"

loc_6889BAF3:				; CODE XREF: sub_6889BA7C+219j
		mov	ecx, [esp+5Ch+var_34]
		mov	[esp+5Ch+var_40], ecx
		mov	[esp+5Ch+var_44], eax
		mov	eax, [esp+5Ch+var_30]
		mov	[esp+5Ch+var_48], eax
		mov	[esp+5Ch+var_4C], edi
		mov	ecx, [esp+5Ch+var_3C]
		mov	[esp+5Ch+var_50], ecx
		mov	[esp+5Ch+var_54], edx
		mov	[esp+5Ch+var_58], offset aAccountInfoBec ; "account info: because of %s, perms=0x%0"...
		mov	[esp+5Ch+var_5C], offset aOscar_13 ; "oscar"
		call	purple_debug_misc
		test	si, si
		jz	loc_6889BBDC
		test	ebp, ebp
		jz	loc_6889BBDC
		cmp	si, 1
		jz	loc_6889BCDC
		cmp	si, 6
		jz	loc_6889BCEC
		cmp	si, 0Bh
		jz	loc_6889BCFC
		cmp	si, 1Dh
		jz	loc_6889BD0C
		cmp	si, 21h
		jz	loc_6889BD1C
		cmp	si, 23h
		jz	loc_6889BC9C
		mov	[esp+5Ch+var_58], offset aError0x04xUnkn ; "Error 0x%04x: Unknown error."

loc_6889BB80:				; CODE XREF: sub_6889BA7C+228j
					; sub_6889BA7C+268j ...
		mov	[esp+5Ch+var_5C], offset aPidgin_6 ; "pidgin"
		call	libintl_dgettext
		mov	[esp+5Ch+var_58], edi
		mov	[esp+5Ch+var_5C], eax
		call	g_strdup_printf
		mov	ebx, eax
		mov	[esp+5Ch+var_58], offset aErrorChangingA ; "Error Changing Account Info"
		mov	[esp+5Ch+var_5C], offset aPidgin_6 ; "pidgin"
		call	libintl_dgettext
		mov	[esp+5Ch+var_44], 0
		mov	[esp+5Ch+var_48], 0
		mov	[esp+5Ch+var_4C], ebx
		mov	[esp+5Ch+var_50], eax
		mov	[esp+5Ch+var_54], 0
		mov	[esp+5Ch+var_58], 0
		jmp	loc_6889BC5C
; ---------------------------------------------------------------------------
		align 4

loc_6889BBDC:				; CODE XREF: sub_6889BA7C+B2j
					; sub_6889BA7C+BAj
		test	ebx, ebx
		jz	loc_6889BC70
		mov	ecx, [esp+5Ch+var_38]
		mov	[esp+5Ch+var_5C], ecx
		call	purple_connection_get_account
		mov	[esp+5Ch+var_5C], eax
		call	purple_account_get_username
		mov	esi, eax
		mov	[esp+5Ch+var_58], offset aTheEmailAddres ; "The	email address for %s is	%s"
		mov	[esp+5Ch+var_5C], offset aPidgin_6 ; "pidgin"
		call	libintl_dgettext
		mov	[esp+5Ch+var_54], ebx
		mov	[esp+5Ch+var_58], esi
		mov	[esp+5Ch+var_5C], eax
		call	g_strdup_printf
		mov	ebx, eax
		mov	[esp+5Ch+var_58], offset aAccountInfo ;	"Account Info"
		mov	[esp+5Ch+var_5C], offset aPidgin_6 ; "pidgin"
		call	libintl_dgettext
		mov	[esp+5Ch+var_44], 0
		mov	[esp+5Ch+var_48], 0
		mov	[esp+5Ch+var_4C], ebx
		mov	[esp+5Ch+var_50], eax
		mov	[esp+5Ch+var_54], 0
		mov	[esp+5Ch+var_58], 2

loc_6889BC5C:				; CODE XREF: sub_6889BA7C+15Aj
		mov	edx, [esp+5Ch+var_38]
		mov	[esp+5Ch+var_5C], edx
		call	purple_notify_message
		mov	[esp+5Ch+var_5C], ebx
		call	g_free

loc_6889BC70:				; CODE XREF: sub_6889BA7C+162j
		mov	eax, 1
		mov	ecx, [esp+5Ch+var_20]
		xor	ecx, ds:__stack_chk_guard
		jnz	loc_6889BD29
		add	esp, 4Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6889BC90:				; CODE XREF: sub_6889BA7C+6Cj
		mov	edx, offset aRequest ; "request"
		jmp	loc_6889BAF3
; ---------------------------------------------------------------------------
		align 4

loc_6889BC9C:				; CODE XREF: sub_6889BA7C+F6j
		mov	[esp+5Ch+var_58], offset aError0x04xUnab ; "Error 0x%04x: Unable to change email ad"...
		jmp	loc_6889BB80
; ---------------------------------------------------------------------------
		align 4

loc_6889BCAC:				; CODE XREF: sub_6889BA7C+3Cj
		mov	[esp+5Ch+var_34], offset aNull_0 ; "(null)"
		test	eax, eax
		jnz	loc_6889BACA

loc_6889BCBC:				; CODE XREF: sub_6889BA7C+48j
		mov	eax, offset aNull_0 ; "(null)"
		test	ebp, ebp
		jnz	loc_6889BAD2
		lea	esi, [esi+0]

loc_6889BCCC:				; CODE XREF: sub_6889BA7C+50j
		mov	[esp+5Ch+var_30], offset aNull_0 ; "(null)"
		jmp	loc_6889BAD6
; ---------------------------------------------------------------------------
		align 4

loc_6889BCDC:				; CODE XREF: sub_6889BA7C+C4j
		mov	[esp+5Ch+var_58], offset aError0x04xUn_0 ; "Error 0x%04x: Unable to format username"...
		jmp	loc_6889BB80
; ---------------------------------------------------------------------------
		align 4

loc_6889BCEC:				; CODE XREF: sub_6889BA7C+CEj
		mov	[esp+5Ch+var_58], offset aError0x04xUn_1 ; "Error 0x%04x: Unable to format username"...
		jmp	loc_6889BB80
; ---------------------------------------------------------------------------
		align 4

loc_6889BCFC:				; CODE XREF: sub_6889BA7C+D8j
		mov	[esp+5Ch+var_58], offset aError0x04xUn_2 ; "Error 0x%04x: Unable to format username"...
		jmp	loc_6889BB80
; ---------------------------------------------------------------------------
		align 4

loc_6889BD0C:				; CODE XREF: sub_6889BA7C+E2j
		mov	[esp+5Ch+var_58], offset aError0x04xUn_3 ; "Error 0x%04x: Unable to change email ad"...
		jmp	loc_6889BB80
; ---------------------------------------------------------------------------
		align 4

loc_6889BD1C:				; CODE XREF: sub_6889BA7C+ECj
		mov	[esp+5Ch+var_58], offset aError0x04xUn_4 ; "Error 0x%04x: Unable to change email ad"...
		jmp	loc_6889BB80
; ---------------------------------------------------------------------------

loc_6889BD29:				; CODE XREF: sub_6889BA7C+203j
		call	__stack_chk_fail
sub_6889BA7C	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6889BD30	proc near		; DATA XREF: oscar_login+784o

var_5C		= dword	ptr -5Ch
var_58		= dword	ptr -58h
var_54		= dword	ptr -54h
var_50		= dword	ptr -50h
var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_30		= dword	ptr -30h
var_20		= dword	ptr -20h
arg_0		= dword	ptr  4
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 4Ch
		mov	eax, ds:__stack_chk_guard
		mov	[esp+5Ch+var_20], eax
		xor	eax, eax
		mov	eax, [esp+5Ch+arg_0]
		mov	eax, [eax+68h]
		mov	[esp+5Ch+var_30], eax
		mov	edi, [esp+5Ch+arg_C]
		mov	esi, [esp+5Ch+arg_10]
		mov	ebp, [esp+5Ch+arg_14]
		call	purple_notify_searchresults_new
		mov	ebx, eax
		test	eax, eax
		jz	loc_6889BE6C
		mov	[esp+5Ch+var_50], esi
		mov	[esp+5Ch+var_54], offset aTheFollowingUs ; "The	following usernames are	associated "...
		mov	[esp+5Ch+var_58], offset aTheFollowing_0 ; "The	following username is associated wi"...
		mov	[esp+5Ch+var_5C], offset aPidgin_6 ; "pidgin"
		call	libintl_dngettext
		mov	[esp+5Ch+var_58], edi
		mov	[esp+5Ch+var_5C], eax
		call	g_strdup_printf
		mov	edi, eax
		mov	[esp+5Ch+var_58], offset aUsername ; "Username"
		mov	[esp+5Ch+var_5C], offset aPidgin_6 ; "pidgin"
		call	libintl_dgettext
		mov	[esp+5Ch+var_5C], eax
		call	purple_notify_searchresults_column_new
		mov	[esp+5Ch+var_58], eax
		mov	[esp+5Ch+var_5C], ebx
		call	purple_notify_searchresults_column_add
		test	esi, esi
		jle	short loc_6889BDFF
		shl	esi, 1
		lea	eax, ds:0[esi*8]
		sub	eax, esi
		lea	esi, [ebp+eax*8+0]
		sub	esi, eax
		nop

loc_6889BDD4:				; CODE XREF: sub_6889BD30+CDj
		mov	[esp+5Ch+var_5C], ebp
		call	g_strdup
		mov	[esp+5Ch+var_58], eax
		mov	[esp+5Ch+var_5C], 0
		call	g_list_append
		mov	[esp+5Ch+var_58], eax
		mov	[esp+5Ch+var_5C], ebx
		call	purple_notify_searchresults_row_add
		add	ebp, 62h
		cmp	ebp, esi
		jnz	short loc_6889BDD4

loc_6889BDFF:				; CODE XREF: sub_6889BD30+90j
		mov	[esp+5Ch+var_54], offset loc_6889BED4
		mov	[esp+5Ch+var_58], 2
		mov	[esp+5Ch+var_5C], ebx
		call	purple_notify_searchresults_button_add
		mov	[esp+5Ch+var_44], 0
		mov	[esp+5Ch+var_48], 0
		mov	[esp+5Ch+var_4C], ebx
		mov	[esp+5Ch+var_50], edi
		mov	[esp+5Ch+var_54], 0
		mov	[esp+5Ch+var_58], 0
		mov	edx, [esp+5Ch+var_30]
		mov	[esp+5Ch+var_5C], edx
		call	purple_notify_searchresults
		mov	[esp+5Ch+var_5C], edi
		call	g_free

loc_6889BE53:				; CODE XREF: sub_6889BD30+19Cj
		mov	eax, 1
		mov	edx, [esp+5Ch+var_20]
		xor	edx, ds:__stack_chk_guard
		jnz	short loc_6889BECE
		add	esp, 4Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_6889BE6C:				; CODE XREF: sub_6889BD30+32j
		mov	[esp+5Ch+var_58], offset aPurple_parse_s ; "purple_parse_searchreply: Unable to	dis"...
		mov	[esp+5Ch+var_5C], offset aOscar_13 ; "oscar"
		call	purple_debug_error
		mov	[esp+5Ch+var_58], offset aUnableToDispla ; "Unable to display the search results."
		mov	[esp+5Ch+var_5C], offset aPidgin_6 ; "pidgin"
		call	libintl_dgettext
		mov	[esp+5Ch+var_44], 0
		mov	[esp+5Ch+var_48], 0
		mov	[esp+5Ch+var_4C], 0
		mov	[esp+5Ch+var_50], eax
		mov	[esp+5Ch+var_54], 0
		mov	[esp+5Ch+var_58], 0
		mov	edx, [esp+5Ch+var_30]
		mov	[esp+5Ch+var_5C], edx
		call	purple_notify_message
		jmp	short loc_6889BE53
; ---------------------------------------------------------------------------

loc_6889BECE:				; CODE XREF: sub_6889BD30+132j
		call	__stack_chk_fail
sub_6889BD30	endp

; ---------------------------------------------------------------------------
		align 4

loc_6889BED4:				; DATA XREF: sub_6889BD30:loc_6889BDFFo
		push	esi
		push	ebx
		sub	esp, 24h
		mov	esi, [esp+30h]
		mov	eax, ds:__stack_chk_guard
		mov	[esp+1Ch], eax
		xor	eax, eax
		mov	dword ptr [esp+4], 0
		mov	eax, [esp+34h]
		mov	[esp], eax
		call	g_list_nth_data
		mov	ebx, eax
		mov	[esp], esi
		call	purple_connection_get_account
		mov	dword ptr [esp+0Ch], 0
		mov	dword ptr [esp+8], 0
		mov	[esp+4], ebx
		mov	[esp], eax
		call	purple_blist_request_add_buddy
		mov	eax, [esp+1Ch]
		xor	eax, ds:__stack_chk_guard
		jnz	short loc_6889BF34
		add	esp, 24h
		pop	ebx
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_6889BF34:				; CODE XREF: .text:6889BF2Cj
		call	__stack_chk_fail
; ---------------------------------------------------------------------------
		align 4

; =============== S U B	R O U T	I N E =======================================


sub_6889BF3C	proc near		; CODE XREF: sub_6889C040+2B6p
					; sub_6889F454+8F9p

Str		= dword	ptr -4Ch
Val		= dword	ptr -48h
Count		= dword	ptr -44h
var_30		= dword	ptr -30h
Dest		= byte ptr -23h
var_21		= byte ptr -21h
var_20		= dword	ptr -20h

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 3Ch
		mov	edx, ds:__stack_chk_guard
		mov	[esp+4Ch+var_20], edx
		xor	edx, edx
		test	eax, eax
		jz	loc_6889C036
		mov	[esp+4Ch+Val], 2Dh ; Val
		mov	[esp+4Ch+Str], eax ; Str
		call	strchr
		test	eax, eax
		jz	loc_6889C036
		inc	eax
		mov	[esp+4Ch+Val], 2Dh ; Val
		mov	[esp+4Ch+Str], eax ; Str
		call	strchr
		mov	ebx, eax
		test	eax, eax
		jz	loc_6889C036
		lea	ebp, [eax+1]
		mov	[esp+4Ch+Str], ebp
		call	g_strdup
		mov	ecx, eax
		mov	dl, [ebx+1]
		test	dl, dl
		jz	loc_6889C032
		mov	ebx, 1
		xor	esi, esi
		lea	edi, [esp+4Ch+Dest]
		jmp	short loc_6889BFC0
; ---------------------------------------------------------------------------
		align 10h

loc_6889BFB0:				; CODE XREF: sub_6889BF3C+87j
		mov	[ecx+ebx-1], dl
		mov	eax, ebx
		inc	esi
		mov	dl, [ebp+esi+0]
		inc	ebx
		test	dl, dl
		jz	short loc_6889C018

loc_6889BFC0:				; CODE XREF: sub_6889BF3C+71j
					; sub_6889BF3C+D7j
		cmp	dl, 25h
		jnz	short loc_6889BFB0
		mov	[esp+4Ch+Count], 2 ; Count
		lea	eax, [ebp+esi+1]
		mov	[esp+4Ch+Val], eax ; Source
		mov	[esp+4Ch+Str], edi ; Dest
		mov	[esp+4Ch+var_30], ecx
		call	strncpy
		mov	[esp+4Ch+var_21], 0
		add	esi, 2
		mov	[esp+4Ch+Count], 10h ; Radix
		mov	[esp+4Ch+Val], 0 ; EndPtr
		mov	[esp+4Ch+Str], edi ; Str
		call	strtol
		mov	ecx, [esp+4Ch+var_30]
		mov	[ecx+ebx-1], al
		mov	eax, ebx
		inc	esi
		mov	dl, [ebp+esi+0]
		inc	ebx
		test	dl, dl
		jnz	short loc_6889BFC0
		lea	esi, [esi+0]

loc_6889C018:				; CODE XREF: sub_6889BF3C+82j
					; sub_6889BF3C+F8j
		mov	byte ptr [ecx+eax], 0

loc_6889C01C:				; CODE XREF: sub_6889BF3C+FCj
		mov	eax, ecx
		mov	edx, [esp+4Ch+var_20]
		xor	edx, ds:__stack_chk_guard
		jnz	short loc_6889C03A
		add	esp, 3Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_6889C032:				; CODE XREF: sub_6889BF3C+60j
		xor	eax, eax
		jmp	short loc_6889C018
; ---------------------------------------------------------------------------

loc_6889C036:				; CODE XREF: sub_6889BF3C+15j
					; sub_6889BF3C+2Dj ...
		xor	ecx, ecx
		jmp	short loc_6889C01C
; ---------------------------------------------------------------------------

loc_6889C03A:				; CODE XREF: sub_6889BF3C+ECj
		call	__stack_chk_fail
sub_6889BF3C	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6889C040	proc near		; DATA XREF: oscar_login+6E4o

Str		= dword	ptr -6Ch
Val		= dword	ptr -68h
var_64		= dword	ptr -64h
var_60		= dword	ptr -60h
var_5C		= dword	ptr -5Ch
var_58		= dword	ptr -58h
var_54		= dword	ptr -54h
var_40		= dword	ptr -40h
var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_20		= dword	ptr -20h
arg_0		= dword	ptr  4
arg_C		= dword	ptr  10h

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 5Ch
		mov	ebp, [esp+6Ch+arg_0]
		mov	eax, ds:__stack_chk_guard
		mov	[esp+6Ch+var_20], eax
		xor	eax, eax
		mov	edx, [ebp+68h]
		mov	[esp+6Ch+var_30], edx
		mov	[esp+6Ch+Str], edx
		call	purple_connection_get_account
		mov	[esp+6Ch+var_34], eax
		mov	ebx, [esp+6Ch+arg_C]
		movzx	edi, word ptr [ebp+0F4h]
		mov	esi, [ebx+4]
		mov	[esp+6Ch+Val], 3Ah ; Val
		mov	[esp+6Ch+Str], esi ; Str
		call	strchr
		mov	edx, eax
		test	eax, eax
		jz	loc_6889C2A8
		sub	eax, esi
		mov	[esp+6Ch+Val], eax
		mov	[esp+6Ch+Str], esi
		mov	[esp+6Ch+var_40], edx
		call	g_strndup
		mov	[esp+6Ch+var_3C], eax
		mov	edx, [esp+6Ch+var_40]
		inc	edx
		mov	[esp+6Ch+Str], edx ; Str
		call	atoi
		mov	[esp+6Ch+var_38], eax

loc_6889C0B8:				; CODE XREF: sub_6889C040+278j
		cmp	byte ptr [ebx+14h], 0
		jz	loc_6889C230

loc_6889C0C2:				; CODE XREF: sub_6889C040+238j
		movzx	eax, word ptr [ebx]
		cmp	ax, 7
		jz	loc_6889C288
		cmp	ax, 10h
		jz	loc_6889C288

loc_6889C0D9:				; CODE XREF: sub_6889C040+241j
		mov	[esp+6Ch+var_5C], eax
		mov	eax, [esp+6Ch+var_38]
		mov	[esp+6Ch+var_60], eax
		mov	eax, [esp+6Ch+var_3C]
		mov	[esp+6Ch+var_64], eax
		mov	[esp+6Ch+Val], offset aConnectingToFl ;	"Connecting to FLAP server %s:%d of type"...
		mov	[esp+6Ch+Str], offset aOscar_13	; "oscar"
		call	purple_debug_info
		movzx	eax, word ptr [ebx]
		mov	[esp+6Ch+Val], eax
		mov	[esp+6Ch+Str], ebp
		call	flap_connection_new
		mov	esi, eax
		movzx	eax, word ptr [ebx+8]
		mov	[esi+20h], ax
		mov	[esp+6Ch+Val], eax
		mov	eax, [ebx+0Ch]
		mov	[esp+6Ch+Str], eax
		call	g_memdup
		mov	[esi+24h], eax
		cmp	word ptr [esi+5Ch], 0Eh
		jz	loc_6889C2C0

loc_6889C137:				; CODE XREF: sub_6889C040+2E3j
		cmp	byte ptr [ebx+14h], 0
		jnz	short loc_6889C1A0
		mov	[esp+6Ch+var_58], esi
		mov	[esp+6Ch+var_5C], offset sub_6889AB20
		mov	eax, [esp+6Ch+var_38]
		mov	[esp+6Ch+var_60], eax
		mov	eax, [esp+6Ch+var_3C]
		mov	[esp+6Ch+var_64], eax
		mov	eax, [esp+6Ch+var_34]
		mov	[esp+6Ch+Val], eax
		mov	[esp+6Ch+Str], 0
		call	purple_proxy_connect
		mov	[esi+1Ch], eax
		mov	eax, [esi+30h]
		test	eax, eax
		jz	short loc_6889C1DE

loc_6889C177:				; CODE XREF: sub_6889C040+19Cj
					; sub_6889C040+1A3j ...
		mov	eax, [esp+6Ch+var_3C]
		mov	[esp+6Ch+Str], eax
		call	g_free
		mov	eax, 1

loc_6889C188:				; CODE XREF: sub_6889C040+361j
		mov	edx, [esp+6Ch+var_20]
		xor	edx, ds:__stack_chk_guard
		jnz	loc_6889C3A6
		add	esp, 5Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_6889C1A0:				; CODE XREF: sub_6889C040+FBj
		mov	[esp+6Ch+var_54], esi
		mov	eax, [ebx+10h]
		mov	[esp+6Ch+var_58], eax
		mov	[esp+6Ch+var_5C], offset sub_6889AB9C
		mov	[esp+6Ch+var_60], offset sub_6889ABF8
		mov	eax, [esp+6Ch+var_38]
		mov	[esp+6Ch+var_64], eax
		mov	eax, [esp+6Ch+var_3C]
		mov	[esp+6Ch+Val], eax
		mov	eax, [esp+6Ch+var_34]
		mov	[esp+6Ch+Str], eax
		call	purple_ssl_connect_with_ssl_cn
		mov	[esi+30h], eax
		test	eax, eax
		jnz	short loc_6889C177

loc_6889C1DE:				; CODE XREF: sub_6889C040+135j
		mov	eax, [esi+1Ch]
		test	eax, eax
		jnz	short loc_6889C177
		mov	[esp+6Ch+Val], offset aUnableToInitia ;	"Unable	to initialize connection"
		mov	[esp+6Ch+Str], offset aPidgin_6	; "pidgin"
		call	libintl_dgettext
		mov	[esp+6Ch+var_64], eax
		mov	[esp+6Ch+Val], 6
		mov	[esp+6Ch+Str], esi
		call	flap_connection_schedule_destroy
		movzx	eax, word ptr [ebx]
		mov	[esp+6Ch+var_64], eax
		mov	[esp+6Ch+Val], offset aUnableToConn_3 ;	"Unable	to connect to FLAP server of typ"...
		mov	[esp+6Ch+Str], offset aOscar_13	; "oscar"
		call	purple_debug_error
		jmp	loc_6889C177
; ---------------------------------------------------------------------------
		align 10h

loc_6889C230:				; CODE XREF: sub_6889C040+7Cj
		mov	[esp+6Ch+var_64], offset aOpportunisti_0 ; "opportunistic_encryption"
		mov	[esp+6Ch+Val], offset aEncryption_0 ; "encryption"
		mov	eax, [esp+6Ch+var_34]
		mov	[esp+6Ch+Str], eax
		call	purple_account_get_string
		mov	edi, offset aOpportunisti_0 ; "opportunistic_encryption"
		mov	ecx, 19h
		mov	esi, eax
		repe cmpsb
		jz	loc_6889C328
		mov	edi, offset aRequire_encryp ; "require_encryption"
		mov	ecx, 13h
		mov	esi, eax
		repe cmpsb
		jz	loc_6889C348

loc_6889C274:				; CODE XREF: sub_6889C040+303j
		cmp	byte ptr [ebx+14h], 0
		jnz	loc_6889C0C2

loc_6889C27E:				; CODE XREF: sub_6889C040+264j
		movzx	eax, word ptr [ebx]
		jmp	loc_6889C0D9
; ---------------------------------------------------------------------------
		align 4

loc_6889C288:				; CODE XREF: sub_6889C040+89j
					; sub_6889C040+93j
		mov	[esp+6Ch+var_64], eax
		mov	[esp+6Ch+Val], offset aIgnoringBroken ;	"Ignoring broken SSL for FLAP type 0x%04"...
		mov	[esp+6Ch+Str], offset aOscar_13	; "oscar"
		call	purple_debug_info
		mov	byte ptr [ebx+14h], 0
		jmp	short loc_6889C27E
; ---------------------------------------------------------------------------
		align 4

loc_6889C2A8:				; CODE XREF: sub_6889C040+4Bj
		mov	[esp+6Ch+var_38], edi
		mov	[esp+6Ch+Str], esi
		call	g_strdup
		mov	[esp+6Ch+var_3C], eax
		jmp	loc_6889C0B8
; ---------------------------------------------------------------------------
		align 10h

loc_6889C2C0:				; CODE XREF: sub_6889C040+F1j
		mov	[esp+6Ch+Str], 20h
		call	g_malloc0
		mov	edi, eax
		mov	[eax+0Ch], esi
		mov	edx, [esp+6Ch+var_30]
		mov	[eax+14h], edx
		mov	eax, [ebx+1Ch]
		mov	[esp+6Ch+Str], eax
		call	g_strdup
		mov	[edi], eax
		mov	eax, [ebx+18h]
		mov	[edi+8], ax
		mov	eax, [ebx+20h]
		mov	[edi+0Ah], ax
		mov	eax, [ebx+1Ch]
		call	sub_6889BF3C
		mov	[edi+4], eax
		mov	[esi+28h], edi
		movzx	eax, word ptr [edi+8]
		mov	[esp+6Ch+var_60], eax
		mov	eax, [edi]
		mov	[esp+6Ch+var_64], eax
		mov	[esp+6Ch+Val], offset aConnectingToCh ;	"Connecting to chat room %s exchange %hu"...
		mov	[esp+6Ch+Str], offset aOscar_13	; "oscar"
		call	purple_debug_info
		jmp	loc_6889C137
; ---------------------------------------------------------------------------

loc_6889C328:				; CODE XREF: sub_6889C040+21Aj
		movzx	eax, word ptr [ebx]
		mov	[esp+6Ch+var_64], eax
		mov	[esp+6Ch+Val], offset aWeWonTUseSslFo ;	"We won't use SSL for FLAP type 0x%04hx."...
		mov	[esp+6Ch+Str], offset aOscar_13	; "oscar"
		call	purple_debug_warning
		jmp	loc_6889C274
; ---------------------------------------------------------------------------

loc_6889C348:				; CODE XREF: sub_6889C040+22Ej
		movzx	eax, word ptr [ebx]
		mov	[esp+6Ch+var_5C], eax
		mov	eax, [esp+6Ch+var_38]
		mov	[esp+6Ch+var_60], eax
		mov	eax, [esp+6Ch+var_3C]
		mov	[esp+6Ch+var_64], eax
		mov	[esp+6Ch+Val], offset aFlapServerSDOf ;	"FLAP server %s:%d of type 0x%04hx doesn"...
		mov	[esp+6Ch+Str], offset aOscar_13	; "oscar"
		call	purple_debug_error
		mov	[esp+6Ch+Val], offset aYouRequiredE_0 ;	"You required encryption in your account"...
		mov	[esp+6Ch+Str], offset aPidgin_6	; "pidgin"
		call	libintl_dgettext
		mov	[esp+6Ch+var_64], eax
		mov	[esp+6Ch+Val], 4
		mov	edx, [esp+6Ch+var_30]
		mov	[esp+6Ch+Str], edx
		call	purple_connection_error_reason
		xor	eax, eax
		jmp	loc_6889C188
; ---------------------------------------------------------------------------

loc_6889C3A6:				; CODE XREF: sub_6889C040+152j
		call	__stack_chk_fail
sub_6889C040	endp

; ---------------------------------------------------------------------------
		align 4

; =============== S U B	R O U T	I N E =======================================


sub_6889C3AC	proc near		; DATA XREF: oscar_login+6BCo

var_15C		= dword	ptr -15Ch
var_158		= dword	ptr -158h
var_154		= dword	ptr -154h
var_150		= dword	ptr -150h
var_14C		= dword	ptr -14Ch
var_148		= dword	ptr -148h
var_144		= dword	ptr -144h
var_134		= dword	ptr -134h
var_130		= dword	ptr -130h
var_120		= byte ptr -120h
var_20		= dword	ptr -20h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 14Ch
		mov	edx, [esp+15Ch+arg_0]
		mov	[esp+15Ch+var_134], edx
		mov	edx, [esp+15Ch+arg_4]
		mov	[esp+15Ch+var_130], edx
		mov	eax, ds:__stack_chk_guard
		mov	[esp+15Ch+var_20], eax
		xor	eax, eax
		mov	esi, [esp+15Ch+arg_C]
		mov	ebp, [esp+15Ch+arg_10]
		mov	ebx, [esp+15Ch+arg_14]
		test	ebx, ebx
		jz	loc_6889C4EC
		mov	eax, ebx

loc_6889C3F9:				; CODE XREF: sub_6889C3AC+145j
		mov	[esp+15Ch+var_14C], eax
		mov	[esp+15Ch+var_150], ebp
		mov	[esp+15Ch+var_154], esi
		mov	[esp+15Ch+var_158], offset aOffsetULenUFil ; "offset: %u, len: %u, file: %s\n"
		mov	[esp+15Ch+var_15C], offset aOscar_13 ; "oscar"
		call	purple_debug_misc
		test	ebp, ebp
		jz	loc_6889C4A4
		mov	[esp+15Ch+var_15C], 1Ch
		call	g_malloc0
		mov	edi, eax
		mov	edx, [esp+15Ch+var_134]
		mov	eax, [edx+68h]
		mov	[edi], eax
		mov	edx, [esp+15Ch+var_130]
		mov	[edi+14h], edx
		mov	[edi+4], esi
		mov	[edi+8], ebp
		mov	[esp+15Ch+var_15C], ebx
		call	g_strdup
		mov	[edi+0Ch], eax
		mov	eax, [edi]
		mov	[esp+15Ch+var_148], edi
		mov	[esp+15Ch+var_14C], offset sub_6889C5A4
		mov	[esp+15Ch+var_150], 50h
		mov	[esp+15Ch+var_154], offset aPidgin_im ;	"pidgin.im"
		mov	ecx, [eax+0Ch]
		mov	[esp+15Ch+var_158], ecx
		mov	[esp+15Ch+var_15C], eax
		call	purple_proxy_connect
		test	eax, eax
		jz	short loc_6889C4F8

loc_6889C481:				; CODE XREF: sub_6889C3AC+13Cj
					; sub_6889C3AC+1EBj
		mov	eax, 1
		mov	edx, [esp+15Ch+var_20]
		xor	edx, ds:__stack_chk_guard
		jnz	loc_6889C59C
		add	esp, 14Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_6889C4A4:				; CODE XREF: sub_6889C3AC+6Fj
		mov	[esp+15Ch+var_158], offset aLenIs0HashingN ; "len is 0,	hashing	NULL\n"
		mov	[esp+15Ch+var_15C], offset aOscar_13 ; "oscar"
		call	purple_debug_misc
		mov	[esp+15Ch+var_148], 0
		mov	[esp+15Ch+var_14C], 0
		mov	[esp+15Ch+var_150], 0
		mov	[esp+15Ch+var_154], esi
		mov	edx, [esp+15Ch+var_130]
		mov	[esp+15Ch+var_158], edx
		mov	edx, [esp+15Ch+var_134]
		mov	[esp+15Ch+var_15C], edx
		call	aim_sendmemblock
		jmp	short loc_6889C481
; ---------------------------------------------------------------------------
		align 4

loc_6889C4EC:				; CODE XREF: sub_6889C3AC+45j
		mov	eax, offset aAim_exe_0 ; "aim.exe"
		jmp	loc_6889C3F9
; ---------------------------------------------------------------------------
		align 4

loc_6889C4F8:				; CODE XREF: sub_6889C3AC+D3j
		mov	eax, [edi+0Ch]
		mov	[esp+15Ch+var_15C], eax
		call	g_free
		mov	[esp+15Ch+var_15C], edi
		call	g_free
		mov	[esp+15Ch+var_158], offset aHttpPidgin_im ; "http://pidgin.im/"
		mov	[esp+15Ch+var_15C], offset aWebsite ; "website"
		call	oscar_get_ui_info_string
		mov	ebx, eax
		mov	[esp+15Ch+var_158], offset aYouMayBeDiscon ; "You may be disconnected shortly.	If so"...
		mov	[esp+15Ch+var_15C], offset aPidgin_6 ; "pidgin"
		call	libintl_dgettext
		mov	[esp+15Ch+var_150], ebx
		mov	[esp+15Ch+var_154], eax
		mov	[esp+15Ch+var_158], 100h
		lea	ebx, [esp+15Ch+var_120]
		mov	[esp+15Ch+var_15C], ebx
		call	g_snprintf
		mov	[esp+15Ch+var_158], offset aUnableToGetAVa ; "Unable to	get a valid login hash."
		mov	[esp+15Ch+var_15C], offset aPidgin_6 ; "pidgin"
		call	libintl_dgettext
		mov	[esp+15Ch+var_144], 0
		mov	[esp+15Ch+var_148], 0
		mov	[esp+15Ch+var_14C], ebx
		mov	[esp+15Ch+var_150], eax
		mov	[esp+15Ch+var_154], 0
		mov	[esp+15Ch+var_158], 1
		mov	eax, [edi]
		mov	[esp+15Ch+var_15C], eax
		call	purple_notify_message
		jmp	loc_6889C481
; ---------------------------------------------------------------------------

loc_6889C59C:				; CODE XREF: sub_6889C3AC+E7j
		call	__stack_chk_fail
sub_6889C3AC	endp

; ---------------------------------------------------------------------------
		align 4

; =============== S U B	R O U T	I N E =======================================


sub_6889C5A4	proc near		; DATA XREF: sub_6889C3AC+AAo

var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_20		= dword	ptr -20h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 3Ch
		mov	ebx, [esp+4Ch+arg_0]
		mov	eax, [esp+4Ch+arg_4]
		mov	edx, ds:__stack_chk_guard
		mov	[esp+4Ch+var_20], edx
		xor	edx, edx
		mov	[ebx+10h], eax
		test	eax, eax
		js	loc_6889C6F0
		mov	eax, [ebx+0Ch]
		test	eax, eax
		jz	loc_6889C6A4

loc_6889C5D5:				; CODE XREF: sub_6889C5A4+105j
		mov	[esp+4Ch+var_40], eax
		mov	eax, [ebx+8]
		mov	[esp+4Ch+var_44], eax
		mov	eax, [ebx+4]
		mov	[esp+4Ch+var_48], eax
		mov	[esp+4Ch+var_4C], offset aGetHttpPidgin_ ; "GET	http://pidgin.im/aim_data.php3?offs"...
		call	g_strdup_printf
		mov	esi, eax
		mov	ebp, 0FFFFFFFFh
		mov	ecx, ebp
		mov	edi, eax
		xor	eax, eax
		repne scasb
		not	ecx
		dec	ecx
		mov	[esp+4Ch+var_40], 0
		mov	[esp+4Ch+var_44], ecx
		mov	[esp+4Ch+var_48], esi
		mov	eax, [ebx+10h]
		mov	[esp+4Ch+var_4C], eax
		call	wpurple_send
		mov	edx, eax
		test	eax, eax
		js	loc_6889C6B0
		mov	ecx, ebp
		mov	edi, esi
		xor	eax, eax
		repne scasb
		not	ecx
		lea	ebp, [ecx-1]
		cmp	edx, ebp
		jz	short loc_6889C657
		mov	[esp+4Ch+var_40], edx
		mov	[esp+4Ch+var_44], ebp
		mov	[esp+4Ch+var_48], offset aTriedToWriteUB ; "Tried to write %u bytes to fetch AIM ha"...
		mov	[esp+4Ch+var_4C], offset aOscar_13 ; "oscar"
		call	purple_debug_error

loc_6889C657:				; CODE XREF: sub_6889C5A4+95j
					; sub_6889C5A4+146j
		mov	[esp+4Ch+var_4C], esi
		call	g_free
		mov	eax, [ebx+0Ch]
		mov	[esp+4Ch+var_4C], eax
		call	g_free
		mov	[esp+4Ch+var_40], ebx
		mov	[esp+4Ch+var_44], offset sub_6889C7A4
		mov	[esp+4Ch+var_48], 1
		mov	eax, [ebx+10h]
		mov	[esp+4Ch+var_4C], eax
		call	purple_input_add
		mov	[ebx+18h], eax
		mov	edx, [esp+4Ch+var_20]
		xor	edx, ds:__stack_chk_guard
		jnz	loc_6889C79D
		add	esp, 3Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_6889C6A4:				; CODE XREF: sub_6889C5A4+2Bj
		mov	eax, offset byte_688B2167
		jmp	loc_6889C5D5
; ---------------------------------------------------------------------------
		align 10h

loc_6889C6B0:				; CODE XREF: sub_6889C5A4+80j
		call	_errno
		mov	eax, [eax]
		mov	[esp+4Ch+var_4C], eax
		call	wpurple_strerror
		mov	edx, eax
		mov	ecx, ebp
		mov	edi, esi
		xor	eax, eax
		repne scasb
		not	ecx
		lea	ebp, [ecx-1]
		mov	[esp+4Ch+var_40], edx
		mov	[esp+4Ch+var_44], ebp
		mov	[esp+4Ch+var_48], offset aErrorWritingUB ; "Error writing %u bytes to fetch AIM	has"...
		mov	[esp+4Ch+var_4C], offset aOscar_13 ; "oscar"
		call	purple_debug_error
		jmp	loc_6889C657
; ---------------------------------------------------------------------------
		align 10h

loc_6889C6F0:				; CODE XREF: sub_6889C5A4+20j
		mov	[esp+4Ch+var_48], offset aHttpPidgin_im	; "http://pidgin.im/"
		mov	[esp+4Ch+var_4C], offset aWebsite ; "website"
		call	oscar_get_ui_info_string
		mov	esi, eax
		mov	[esp+4Ch+var_48], offset aYouMayBeDiscon ; "You	may be disconnected shortly.  If so"...
		mov	[esp+4Ch+var_4C], offset aPidgin_6 ; "pidgin"
		call	libintl_dgettext
		mov	[esp+4Ch+var_48], esi
		mov	[esp+4Ch+var_4C], eax
		call	g_strdup_printf
		mov	esi, eax
		mov	[esp+4Ch+var_48], offset aUnableToGetA_0 ; "Unable to get a valid AIM login hash."
		mov	[esp+4Ch+var_4C], offset aPidgin_6 ; "pidgin"
		call	libintl_dgettext
		mov	[esp+4Ch+var_34], 0
		mov	[esp+4Ch+var_38], 0
		mov	[esp+4Ch+var_3C], esi
		mov	[esp+4Ch+var_40], eax
		mov	[esp+4Ch+var_44], 0
		mov	[esp+4Ch+var_48], 1
		mov	eax, [ebx]
		mov	[esp+4Ch+var_4C], eax
		call	purple_notify_message
		mov	[esp+4Ch+var_4C], esi
		call	g_free
		mov	eax, [ebx+0Ch]
		mov	[esp+4Ch+var_4C], eax
		call	g_free
		mov	eax, [esp+4Ch+var_20]
		xor	eax, ds:__stack_chk_guard
		jnz	short loc_6889C79D
		mov	[esp+4Ch+arg_0], ebx
		add	esp, 3Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		jmp	g_free
; ---------------------------------------------------------------------------

loc_6889C79D:				; CODE XREF: sub_6889C5A4+F2j
					; sub_6889C5A4+1E7j
		call	__stack_chk_fail
sub_6889C5A4	endp

; ---------------------------------------------------------------------------
		align 4

; =============== S U B	R O U T	I N E =======================================


sub_6889C7A4	proc near		; DATA XREF: sub_6889C5A4+CAo

var_15C		= dword	ptr -15Ch
var_158		= dword	ptr -158h
var_154		= dword	ptr -154h
var_150		= dword	ptr -150h
var_14C		= dword	ptr -14Ch
var_148		= dword	ptr -148h
var_144		= dword	ptr -144h
var_130		= dword	ptr -130h
var_121		= byte ptr -121h
var_120		= byte ptr -120h
var_110		= byte ptr -110h
var_20		= dword	ptr -20h
arg_0		= dword	ptr  4

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 14Ch
		mov	ebx, [esp+15Ch+arg_0]
		mov	eax, ds:__stack_chk_guard
		mov	[esp+15Ch+var_20], eax
		xor	eax, eax
		mov	eax, [ebx]
		mov	[esp+15Ch+var_15C], eax
		call	purple_connection_get_protocol_data
		mov	[esp+15Ch+var_130], eax
		mov	[esp+15Ch+var_121], 0
		xor	esi, esi
		lea	edi, [esp+15Ch+var_121]
		jmp	short loc_6889C7EB
; ---------------------------------------------------------------------------
		align 10h

loc_6889C7E0:				; CODE XREF: sub_6889C7A4+67j
		cmp	al, 0Dh
		jz	short loc_6889C80E
		xor	esi, esi

loc_6889C7E6:				; CODE XREF: sub_6889C7A4+6Dj
		mov	[esp+15Ch+var_121], 0

loc_6889C7EB:				; CODE XREF: sub_6889C7A4+38j
		mov	[esp+15Ch+var_154], 1
		mov	[esp+15Ch+var_158], edi
		mov	eax, [ebx+10h]
		mov	[esp+15Ch+var_15C], eax
		call	wpurple_read
		dec	eax
		mov	al, [esp+15Ch+var_121]
		jnz	short loc_6889C813
		cmp	al, 0Ah
		jnz	short loc_6889C7E0
		inc	esi

loc_6889C80E:				; CODE XREF: sub_6889C7A4+3Ej
		cmp	esi, 2
		jnz	short loc_6889C7E6

loc_6889C813:				; CODE XREF: sub_6889C7A4+63j
		cmp	al, 0Ah
		jz	loc_6889C8E4
		mov	[esp+15Ch+var_158], offset aHttpPidgin_im ; "http://pidgin.im/"
		mov	[esp+15Ch+var_15C], offset aWebsite ; "website"
		call	oscar_get_ui_info_string
		mov	esi, eax
		mov	[esp+15Ch+var_158], offset aYouMayBeDiscon ; "You may be disconnected shortly.	If so"...
		mov	[esp+15Ch+var_15C], offset aPidgin_6 ; "pidgin"
		call	libintl_dgettext
		mov	[esp+15Ch+var_150], esi
		mov	[esp+15Ch+var_154], eax
		mov	[esp+15Ch+var_158], 100h
		lea	esi, [esp+15Ch+var_120]
		mov	[esp+15Ch+var_15C], esi
		call	g_snprintf
		mov	[esp+15Ch+var_158], offset aUnableToGetA_0 ; "Unable to	get a valid AIM	login hash."
		mov	[esp+15Ch+var_15C], offset aPidgin_6 ; "pidgin"
		call	libintl_dgettext
		mov	[esp+15Ch+var_144], 0
		mov	[esp+15Ch+var_148], 0
		mov	[esp+15Ch+var_14C], esi
		mov	[esp+15Ch+var_150], eax
		mov	[esp+15Ch+var_154], 0
		mov	[esp+15Ch+var_158], 1
		mov	eax, [ebx]
		mov	[esp+15Ch+var_15C], eax
		call	purple_notify_message
		mov	eax, [ebx+18h]
		mov	[esp+15Ch+var_15C], eax
		call	purple_input_remove
		mov	eax, [ebx+10h]
		mov	[esp+15Ch+var_15C], eax
		call	wpurple_close
		mov	[esp+15Ch+var_15C], ebx
		call	g_free

loc_6889C8C5:				; CODE XREF: sub_6889C7A4+238j
		mov	eax, [esp+15Ch+var_20]
		xor	eax, ds:__stack_chk_guard
		jnz	loc_6889C9E1
		add	esp, 14Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 4

loc_6889C8E4:				; CODE XREF: sub_6889C7A4+71j
		mov	[esp+15Ch+var_154], 10h
		lea	eax, [esp+15Ch+var_120]
		mov	[esp+15Ch+var_158], eax
		mov	eax, [ebx+10h]
		mov	[esp+15Ch+var_15C], eax
		call	wpurple_read
		cmp	eax, 10h
		jz	short loc_6889C918
		mov	[esp+15Ch+var_158], offset aCouldNotReadFu ; "Could not	read full AIM login hash from"...
		mov	[esp+15Ch+var_15C], offset aOscar_13 ; "oscar"
		call	purple_debug_warning

loc_6889C918:				; CODE XREF: sub_6889C7A4+15Ej
		mov	[esp+15Ch+var_110], 0
		mov	[esp+15Ch+var_15C], offset aSendingHash	; "Sending hash: "
		call	g_string_new
		mov	esi, eax
		lea	ebp, [esp+15Ch+var_120]
		lea	edi, [esp+15Ch+var_110]
		nop

loc_6889C934:				; CODE XREF: sub_6889C7A4+1ABj
		movzx	edx, byte ptr [ebp+0]
		mov	[esp+15Ch+var_154], edx
		mov	[esp+15Ch+var_158], offset a02hhx ; "%02hhx "
		mov	[esp+15Ch+var_15C], esi
		call	g_string_append_printf
		inc	ebp
		cmp	ebp, edi
		jnz	short loc_6889C934
		mov	[esp+15Ch+var_158], offset asc_688B2AE8	; "\n"
		mov	[esp+15Ch+var_15C], esi
		call	g_string_append
		mov	eax, [esi]
		mov	[esp+15Ch+var_154], eax
		mov	[esp+15Ch+var_158], offset aS ;	"%s"
		mov	[esp+15Ch+var_15C], offset aOscar_13 ; "oscar"
		call	purple_debug_misc
		mov	[esp+15Ch+var_158], 1
		mov	[esp+15Ch+var_15C], esi
		call	g_string_free
		mov	eax, [ebx+18h]
		mov	[esp+15Ch+var_15C], eax
		call	purple_input_remove
		mov	eax, [ebx+10h]
		mov	[esp+15Ch+var_15C], eax
		call	wpurple_close
		mov	[esp+15Ch+var_148], 1
		lea	eax, [esp+15Ch+var_120]
		mov	[esp+15Ch+var_14C], eax
		mov	[esp+15Ch+var_150], 10h
		mov	[esp+15Ch+var_154], 0
		mov	eax, [ebx+14h]
		mov	[esp+15Ch+var_158], eax
		mov	eax, [esp+15Ch+var_130]
		mov	[esp+15Ch+var_15C], eax
		call	aim_sendmemblock
		mov	[esp+15Ch+var_15C], ebx
		call	g_free
		jmp	loc_6889C8C5
; ---------------------------------------------------------------------------

loc_6889C9E1:				; CODE XREF: sub_6889C7A4+12Ej
		call	__stack_chk_fail
sub_6889C7A4	endp

; ---------------------------------------------------------------------------
		align 4

; =============== S U B	R O U T	I N E =======================================


sub_6889C9E8	proc near		; DATA XREF: oscar_login+694o

var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_10		= dword	ptr -10h
arg_0		= dword	ptr  4
arg_C		= dword	ptr  10h

		sub	esp, 2Ch
		mov	eax, ds:__stack_chk_guard
		mov	[esp+2Ch+var_10], eax
		xor	eax, eax
		mov	eax, [esp+2Ch+arg_C]
		mov	eax, [eax]
		mov	[esp+2Ch+var_28], eax
		mov	eax, [esp+2Ch+arg_0]
		mov	eax, [eax+68h]
		mov	[esp+2Ch+var_2C], eax
		call	purple_connection_set_display_name
		mov	eax, 1
		mov	edx, [esp+2Ch+var_10]
		xor	edx, ds:__stack_chk_guard
		jnz	short loc_6889CA24
		add	esp, 2Ch
		retn
; ---------------------------------------------------------------------------

loc_6889CA24:				; CODE XREF: sub_6889C9E8+36j
		call	__stack_chk_fail
sub_6889C9E8	endp

; ---------------------------------------------------------------------------
		align 4

; =============== S U B	R O U T	I N E =======================================


sub_6889CA2C	proc near		; DATA XREF: oscar_login+61Co

var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_10		= dword	ptr -10h
arg_0		= dword	ptr  4
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= word ptr  18h

		push	ebx
		sub	esp, 38h
		mov	eax, ds:__stack_chk_guard
		mov	[esp+3Ch+var_10], eax
		xor	eax, eax
		mov	eax, [esp+3Ch+arg_0]
		mov	ecx, [eax+68h]
		mov	ebx, [esp+3Ch+arg_C]
		mov	edx, [esp+3Ch+arg_10]
		movzx	eax, [esp+3Ch+arg_14]
		cmp	eax, 1
		jz	short loc_6889CAD0
		jle	short loc_6889CABC
		cmp	eax, 2
		jz	short loc_6889CA9C
		cmp	eax, 0Fh
		jz	short loc_6889CAC0

loc_6889CA60:				; CODE XREF: sub_6889CA2C+92j
		mov	[esp+3Ch+var_2C], eax
		and	ebx, 0FFFFh
		mov	[esp+3Ch+var_30], ebx
		mov	[esp+3Ch+var_34], edx
		mov	[esp+3Ch+var_38], offset aReceivedUnknow ; "Received unknown typing notification me"...
		mov	[esp+3Ch+var_3C], offset aOscar_13 ; "oscar"
		call	purple_debug_info

loc_6889CA86:				; CODE XREF: sub_6889CA2C+8Cj
					; sub_6889CA2C+A0j ...
		mov	eax, 1
		mov	edx, [esp+3Ch+var_10]
		xor	edx, ds:__stack_chk_guard
		jnz	short loc_6889CAEE
		add	esp, 38h
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_6889CA9C:				; CODE XREF: sub_6889CA2C+2Dj
		mov	[esp+3Ch+var_30], 1
		mov	[esp+3Ch+var_34], 0
		mov	[esp+3Ch+var_38], edx
		mov	[esp+3Ch+var_3C], ecx
		call	serv_got_typing
		jmp	short loc_6889CA86
; ---------------------------------------------------------------------------
		align 4

loc_6889CABC:				; CODE XREF: sub_6889CA2C+28j
		test	eax, eax
		jnz	short loc_6889CA60

loc_6889CAC0:				; CODE XREF: sub_6889CA2C+32j
		mov	[esp+3Ch+var_38], edx
		mov	[esp+3Ch+var_3C], ecx
		call	serv_got_typing_stopped
		jmp	short loc_6889CA86
; ---------------------------------------------------------------------------
		align 10h

loc_6889CAD0:				; CODE XREF: sub_6889CA2C+26j
		mov	[esp+3Ch+var_30], 2
		mov	[esp+3Ch+var_34], 0
		mov	[esp+3Ch+var_38], edx
		mov	[esp+3Ch+var_3C], ecx
		call	serv_got_typing
		jmp	short loc_6889CA86
; ---------------------------------------------------------------------------

loc_6889CAEE:				; CODE XREF: sub_6889CA2C+69j
		call	__stack_chk_fail
sub_6889CA2C	endp

; ---------------------------------------------------------------------------
		align 4

loc_6889CAF4:				; DATA XREF: oscar_login+52Co
		push	edi
		push	esi
		push	ebx
		sub	esp, 20h
		mov	edi, [esp+30h]
		mov	eax, ds:__stack_chk_guard
		mov	[esp+1Ch], eax
		xor	eax, eax
		mov	esi, [esp+3Ch]
		mov	ebx, [esp+40h]
		mov	[esp+8], esi
		mov	dword ptr [esp+4], offset aSsiReceivedA_0 ; "ssi: received authorization request fro"...
		mov	dword ptr [esp], offset	aOscar_13 ; "oscar"
		call	purple_debug_info
		test	ebx, ebx
		jz	short loc_6889CB94
		mov	dword ptr [esp+8], 0
		mov	dword ptr [esp+4], 0FFFFFFFFh
		mov	[esp], ebx
		call	g_utf8_validate
		test	eax, eax
		jnz	short loc_6889CB63
		mov	[esp+8], esi
		mov	dword ptr [esp+4], offset aReceivedAuthRe ; "Received auth request from	%s with	inva"...
		mov	dword ptr [esp], offset	aOscar_13 ; "oscar"
		call	purple_debug_warning
		xor	ebx, ebx

loc_6889CB63:				; CODE XREF: .text:6889CB47j
					; .text:6889CBACj
		mov	[esp+0Ch], ebx
		mov	dword ptr [esp+8], 1
		mov	[esp+4], esi
		mov	[esp], edi
		call	aim_icq_getalias
		mov	eax, 1
		mov	edx, [esp+1Ch]
		xor	edx, ds:__stack_chk_guard
		jnz	short loc_6889CBAE
		add	esp, 20h
		pop	ebx
		pop	esi
		pop	edi
		retn
; ---------------------------------------------------------------------------
		align 4

loc_6889CB94:				; CODE XREF: .text:6889CB2Bj
		mov	[esp+8], esi
		mov	dword ptr [esp+4], offset aReceivedAuth_0 ; "Received auth request from	%s with	empt"...
		mov	dword ptr [esp], offset	aOscar_13 ; "oscar"
		call	purple_debug_warning
		jmp	short loc_6889CB63
; ---------------------------------------------------------------------------

loc_6889CBAE:				; CODE XREF: .text:6889CB8Aj
		call	__stack_chk_fail
; ---------------------------------------------------------------------------
		align 4

loc_6889CBB4:				; DATA XREF: oscar_login+57Co
		push	edi
		push	esi
		push	ebx
		sub	esp, 30h
		mov	eax, ds:__stack_chk_guard
		mov	[esp+2Ch], eax
		xor	eax, eax
		mov	eax, [esp+40h]
		mov	eax, [eax+68h]
		mov	[esp], eax
		call	purple_connection_get_account
		mov	esi, eax
		mov	ebx, [esp+4Ch]
		mov	[esp+4], ebx
		mov	[esp], eax
		call	purple_find_buddy
		mov	edi, eax
		mov	[esp+8], ebx
		mov	dword ptr [esp+4], offset aSsiSAddedYouTo ; "ssi: %s added you to their	buddy list\n"
		mov	dword ptr [esp], offset	aOscar_13 ; "oscar"
		call	purple_debug_info
		test	edi, edi
		jz	short loc_6889CC44
		mov	[esp], edi
		call	purple_buddy_get_alias_only

loc_6889CC0C:				; CODE XREF: .text:6889CC46j
		mov	dword ptr [esp+10h], 0
		mov	[esp+0Ch], eax
		mov	dword ptr [esp+8], 0
		mov	[esp+4], ebx
		mov	[esp], esi
		call	purple_account_notify_added
		mov	eax, 1
		mov	edx, [esp+2Ch]
		xor	edx, ds:__stack_chk_guard
		jnz	short loc_6889CC48
		add	esp, 30h
		pop	ebx
		pop	esi
		pop	edi
		retn
; ---------------------------------------------------------------------------

loc_6889CC44:				; CODE XREF: .text:6889CC02j
		xor	eax, eax
		jmp	short loc_6889CC0C
; ---------------------------------------------------------------------------

loc_6889CC48:				; CODE XREF: .text:6889CC3Bj
		call	__stack_chk_fail
; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6889CC50	proc near		; DATA XREF: oscar_login+4B4o
					; oscar_login+4DCo

var_5C		= dword	ptr -5Ch
var_58		= dword	ptr -58h
var_54		= dword	ptr -54h
var_50		= dword	ptr -50h
var_40		= dword	ptr -40h
var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_20		= dword	ptr -20h
arg_0		= dword	ptr  4
arg_C		= dword	ptr  10h
arg_10		= word ptr  14h
arg_14		= dword	ptr  18h

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 4Ch
		mov	ebp, [esp+5Ch+arg_0]
		mov	eax, ds:__stack_chk_guard
		mov	[esp+5Ch+var_20], eax
		xor	eax, eax
		mov	eax, [ebp+68h]
		mov	[esp+5Ch+var_5C], eax
		call	purple_connection_get_account
		mov	edx, [esp+5Ch+arg_C]
		mov	[esp+5Ch+var_38], edx
		mov	ebx, [esp+5Ch+arg_14]
		cmp	[esp+5Ch+arg_10], 0
		jnz	loc_6889CD5B
		test	ebx, ebx
		jz	loc_6889CD5B
		mov	esi, eax
		mov	[esp+5Ch+var_58], ebx
		mov	eax, [ebp+0D8h]
		mov	[esp+5Ch+var_5C], eax
		call	aim_ssi_itemlist_findparentname
		mov	edi, eax
		test	eax, eax
		jz	loc_6889CD78
		mov	[esp+5Ch+var_54], eax
		mov	[esp+5Ch+var_58], ebp
		mov	[esp+5Ch+var_5C], esi
		call	oscar_utf8_try_convert
		mov	[esp+5Ch+var_34], eax

loc_6889CCC3:				; CODE XREF: sub_6889CC50+130j
		mov	[esp+5Ch+var_54], ebx
		mov	[esp+5Ch+var_58], edi
		mov	eax, [ebp+0D8h]
		mov	[esp+5Ch+var_5C], eax
		call	aim_ssi_getalias
		mov	[esp+5Ch+var_54], eax
		mov	[esp+5Ch+var_58], ebp
		mov	[esp+5Ch+var_5C], esi
		mov	[esp+5Ch+var_40], eax
		call	oscar_utf8_try_convert
		mov	[esp+5Ch+var_3C], eax
		mov	ecx, [esp+5Ch+var_40]
		mov	[esp+5Ch+var_5C], ecx
		call	g_free
		mov	[esp+5Ch+var_58], ebx
		mov	[esp+5Ch+var_5C], esi
		call	purple_find_buddy
		test	eax, eax
		jz	short loc_6889CD88
		mov	edx, [esp+5Ch+var_3C]
		mov	[esp+5Ch+var_58], edx
		mov	[esp+5Ch+var_5C], eax
		call	purple_blist_alias_buddy

loc_6889CD1D:				; CODE XREF: sub_6889CC50+13Ej
					; sub_6889CC50+1C3j ...
		mov	[esp+5Ch+var_50], 0
		mov	[esp+5Ch+var_54], ebx
		mov	[esp+5Ch+var_58], edi
		mov	eax, [ebp+0D8h]
		mov	[esp+5Ch+var_5C], eax
		call	aim_ssi_itemlist_finditem
		test	eax, eax
		jz	loc_6889CE58

loc_6889CD43:				; CODE XREF: sub_6889CC50+224j
		mov	eax, [esp+5Ch+var_34]
		mov	[esp+5Ch+var_5C], eax
		call	g_free
		mov	eax, [esp+5Ch+var_3C]
		mov	[esp+5Ch+var_5C], eax
		call	g_free

loc_6889CD5B:				; CODE XREF: sub_6889CC50+33j
					; sub_6889CC50+3Bj
		mov	eax, 1
		mov	edx, [esp+5Ch+var_20]
		xor	edx, ds:__stack_chk_guard
		jnz	loc_6889CEB6
		add	esp, 4Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_6889CD78:				; CODE XREF: sub_6889CC50+59j
		mov	[esp+5Ch+var_34], 0
		jmp	loc_6889CCC3
; ---------------------------------------------------------------------------
		align 4

loc_6889CD88:				; CODE XREF: sub_6889CC50+BBj
		cmp	word ptr [esp+5Ch+var_38], 8
		jnz	short loc_6889CD1D
		mov	eax, [esp+5Ch+var_3C]
		mov	[esp+5Ch+var_54], eax
		mov	[esp+5Ch+var_58], ebx
		mov	[esp+5Ch+var_5C], esi
		call	purple_buddy_new
		mov	[esp+5Ch+var_38], eax
		mov	eax, [esp+5Ch+var_34]
		test	eax, eax
		jz	loc_6889CE79
		mov	eax, [esp+5Ch+var_34]
		mov	[esp+5Ch+var_5C], eax
		call	purple_find_group
		mov	[esp+5Ch+var_30], eax
		test	eax, eax
		jz	loc_6889CEF9

loc_6889CDCC:				; CODE XREF: sub_6889CC50+2A1j
		mov	eax, [esp+5Ch+var_34]

loc_6889CDD0:				; CODE XREF: sub_6889CC50+261j
		mov	[esp+5Ch+var_50], eax
		mov	[esp+5Ch+var_54], ebx
		mov	[esp+5Ch+var_58], offset aSsiAddingBud_0 ; "ssi: adding	buddy %s to group %s to	loc"...
		mov	[esp+5Ch+var_5C], offset aOscar_13 ; "oscar"
		call	purple_debug_info
		mov	[esp+5Ch+var_50], 0
		mov	eax, [esp+5Ch+var_30]
		mov	[esp+5Ch+var_54], eax
		mov	[esp+5Ch+var_58], 0
		mov	eax, [esp+5Ch+var_38]
		mov	[esp+5Ch+var_5C], eax
		call	purple_blist_add_buddy
		cmp	byte ptr [ebx],	2Bh
		jnz	loc_6889CD1D
		mov	[esp+5Ch+var_50], 0
		mov	[esp+5Ch+var_54], offset aAvailable_0 ;	"available"
		mov	[esp+5Ch+var_58], ebx
		mov	[esp+5Ch+var_5C], esi
		call	purple_prpl_got_user_status
		mov	[esp+5Ch+var_50], 0
		mov	[esp+5Ch+var_54], offset aMobile_0 ; "mobile"
		mov	[esp+5Ch+var_58], ebx
		mov	[esp+5Ch+var_5C], esi
		call	purple_prpl_got_user_status
		jmp	loc_6889CD1D
; ---------------------------------------------------------------------------
		align 4

loc_6889CE58:				; CODE XREF: sub_6889CC50+EDj
		mov	[esp+5Ch+var_50], edi
		mov	[esp+5Ch+var_54], ebx
		mov	[esp+5Ch+var_58], offset aPurple_ssi_par ; "purple_ssi_parseaddmod: Could not find "...
		mov	[esp+5Ch+var_5C], offset aOscar_13 ; "oscar"
		call	purple_debug_error
		jmp	loc_6889CD43
; ---------------------------------------------------------------------------

loc_6889CE79:				; CODE XREF: sub_6889CC50+15Ej
		mov	[esp+5Ch+var_58], offset aOrphans_0 ; "Orphans"
		mov	[esp+5Ch+var_5C], offset aPidgin_6 ; "pidgin"
		call	libintl_dgettext
		mov	[esp+5Ch+var_5C], eax
		call	purple_find_group
		mov	[esp+5Ch+var_30], eax
		test	eax, eax
		jz	short loc_6889CEBB

loc_6889CE9D:				; CODE XREF: sub_6889CC50+2A7j
		mov	[esp+5Ch+var_58], offset aOrphans_0 ; "Orphans"
		mov	[esp+5Ch+var_5C], offset aPidgin_6 ; "pidgin"
		call	libintl_dgettext
		jmp	loc_6889CDD0
; ---------------------------------------------------------------------------

loc_6889CEB6:				; CODE XREF: sub_6889CC50+11Aj
		call	__stack_chk_fail
; ---------------------------------------------------------------------------

loc_6889CEBB:				; CODE XREF: sub_6889CC50+24Bj
		mov	[esp+5Ch+var_58], offset aOrphans_0 ; "Orphans"
		mov	[esp+5Ch+var_5C], offset aPidgin_6 ; "pidgin"
		call	libintl_dgettext

loc_6889CECF:				; CODE XREF: sub_6889CC50+2ADj
		mov	[esp+5Ch+var_5C], eax
		call	purple_group_new
		mov	[esp+5Ch+var_30], eax
		mov	[esp+5Ch+var_58], 0
		mov	[esp+5Ch+var_5C], eax
		call	purple_blist_add_group
		mov	eax, [esp+5Ch+var_34]
		test	eax, eax
		jnz	loc_6889CDCC
		jmp	short loc_6889CE9D
; ---------------------------------------------------------------------------

loc_6889CEF9:				; CODE XREF: sub_6889CC50+176j
		mov	eax, [esp+5Ch+var_34]
		jmp	short loc_6889CECF
sub_6889CC50	endp

; ---------------------------------------------------------------------------
		align 10h

loc_6889CF00:				; DATA XREF: oscar_login+414o
		push	edi
		push	esi
		push	ebx
		sub	esp, 30h
		mov	ebx, [esp+40h]
		mov	eax, ds:__stack_chk_guard
		mov	[esp+2Ch], eax
		xor	eax, eax
		mov	edi, [ebx+68h]
		mov	esi, [esp+4Ch]
		mov	eax, esi
		and	eax, 0FFFFh
		mov	[esp+8], eax
		mov	dword ptr [esp+4], offset aSsiSnacErrorHu ; "ssi: SNAC error %hu\n"
		mov	dword ptr [esp], offset	aOscar_13 ; "oscar"
		call	purple_debug_error
		cmp	si, 5
		jz	short loc_6889CF60

loc_6889CF41:				; CODE XREF: .text:6889CFDCj
		mov	eax, 1
		mov	edx, [esp+2Ch]
		xor	edx, ds:__stack_chk_guard
		jnz	loc_6889CFEE
		add	esp, 30h
		pop	ebx
		pop	esi
		pop	edi
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6889CF60:				; CODE XREF: .text:6889CF3Fj
		mov	eax, [ebx+48h]
		test	eax, eax
		jnz	short loc_6889CFE4
		mov	dword ptr [esp+4], offset aTheAimServersW ; "The AIM servers were temporarily unable"...
		mov	dword ptr [esp], offset	aPidgin_6 ; "pidgin"
		call	libintl_dgettext
		mov	esi, eax
		mov	dword ptr [esp+4], offset aUnableToRetrie ; "Unable to Retrieve	Buddy List"
		mov	dword ptr [esp], offset	aPidgin_6 ; "pidgin"
		call	libintl_dgettext
		mov	dword ptr [esp+18h], 0
		mov	dword ptr [esp+14h], 0
		mov	[esp+10h], esi
		mov	[esp+0Ch], eax
		mov	dword ptr [esp+8], 0
		mov	dword ptr [esp+4], 0
		mov	[esp], edi
		call	purple_notify_message

loc_6889CFC1:				; CODE XREF: .text:6889CFECj
		mov	[esp+8], ebx
		mov	dword ptr [esp+4], offset sub_6889CFF4
		mov	dword ptr [esp], 1Eh
		call	purple_timeout_add_seconds
		mov	[ebx+48h], eax
		jmp	loc_6889CF41
; ---------------------------------------------------------------------------
		align 4

loc_6889CFE4:				; CODE XREF: .text:6889CF65j
		mov	[esp], eax
		call	purple_timeout_remove
		jmp	short loc_6889CFC1
; ---------------------------------------------------------------------------

loc_6889CFEE:				; CODE XREF: .text:6889CF50j
		call	__stack_chk_fail
; ---------------------------------------------------------------------------
		align 4

; =============== S U B	R O U T	I N E =======================================


sub_6889CFF4	proc near		; DATA XREF: .text:6889CFC5o
					; .text:6889EBAEo

var_2C		= dword	ptr -2Ch
var_10		= dword	ptr -10h
arg_0		= dword	ptr  4

		sub	esp, 2Ch
		mov	eax, ds:__stack_chk_guard
		mov	[esp+2Ch+var_10], eax
		xor	eax, eax
		mov	eax, [esp+2Ch+arg_0]
		mov	[esp+2Ch+var_2C], eax
		call	aim_ssi_reqdata
		mov	eax, 1
		mov	edx, [esp+2Ch+var_10]
		xor	edx, ds:__stack_chk_guard
		jnz	short loc_6889D023
		add	esp, 2Ch
		retn
; ---------------------------------------------------------------------------

loc_6889D023:				; CODE XREF: sub_6889CFF4+29j
		call	__stack_chk_fail
sub_6889CFF4	endp


; =============== S U B	R O U T	I N E =======================================


sub_6889D028	proc near		; DATA XREF: oscar_login+3ECo

var_8C		= dword	ptr -8Ch
var_88		= dword	ptr -88h
var_84		= dword	ptr -84h
var_80		= dword	ptr -80h
var_7C		= dword	ptr -7Ch
var_78		= dword	ptr -78h
var_74		= dword	ptr -74h
var_70		= dword	ptr -70h
var_6C		= dword	ptr -6Ch
var_68		= dword	ptr -68h
var_64		= dword	ptr -64h
var_60		= dword	ptr -60h
var_5C		= dword	ptr -5Ch
var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_20		= dword	ptr -20h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_C		= word ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h
arg_18		= dword	ptr  1Ch
arg_1C		= dword	ptr  20h
arg_20		= dword	ptr  24h
arg_24		= dword	ptr  28h
arg_28		= dword	ptr  2Ch
arg_2C		= dword	ptr  30h
arg_30		= dword	ptr  34h
arg_34		= dword	ptr  38h
arg_38		= dword	ptr  3Ch

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 7Ch
		mov	ebp, [esp+8Ch+arg_0]
		mov	edx, [esp+8Ch+arg_4]
		mov	[esp+8Ch+var_48], edx
		mov	esi, ds:__stack_chk_guard
		mov	[esp+8Ch+var_20], esi
		xor	esi, esi
		movzx	eax, [esp+8Ch+arg_C]
		cmp	eax, 2
		jz	short loc_6889D098
		cmp	eax, 8
		jz	loc_6889D1D8
		mov	[esp+8Ch+var_84], eax
		mov	[esp+8Ch+var_88], offset aChatnavInfoUnk ; "chatnav info: unknown type (%04hx)\n"
		mov	[esp+8Ch+var_8C], offset aOscar_13 ; "oscar"
		call	purple_debug_warning

loc_6889D07B:				; CODE XREF: sub_6889D028+13Dj
					; sub_6889D028+1A9j ...
		mov	eax, 1
		mov	edx, [esp+8Ch+var_20]
		xor	edx, ds:__stack_chk_guard
		jnz	loc_6889D2F9
		add	esp, 7Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_6889D098:				; CODE XREF: sub_6889D028+30j
		mov	[esp+8Ch+var_8C], offset byte_688B2167
		call	g_string_new
		mov	esi, eax
		mov	edx, [esp+8Ch+arg_14]
		mov	ebx, [esp+8Ch+arg_18]
		mov	[esp+8Ch+var_80], edx
		movzx	eax, byte ptr [esp+8Ch+arg_10]
		mov	[esp+8Ch+var_84], eax
		mov	[esp+8Ch+var_88], offset aChatInfoMaxCon ; "chat info: Max Concurrent Rooms: %hhd, "...
		mov	[esp+8Ch+var_8C], esi
		mov	[esp+8Ch+var_4C], edx
		call	g_string_append_printf
		mov	edx, [esp+8Ch+var_4C]
		test	edx, edx
		jle	short loc_6889D136
		xor	edi, edi
		mov	[esp+8Ch+var_3C], ebp
		mov	ebp, edx

loc_6889D0E8:				; CODE XREF: sub_6889D028+108j
		movzx	eax, word ptr [ebx]
		mov	[esp+8Ch+var_84], eax
		mov	[esp+8Ch+var_88], offset aHu ; "%hu"
		mov	[esp+8Ch+var_8C], esi
		call	g_string_append_printf
		mov	eax, [ebx+4]
		test	eax, eax
		jz	short loc_6889D11A
		mov	[esp+8Ch+var_84], eax
		mov	[esp+8Ch+var_88], offset aS_4 ;	" %s"
		mov	[esp+8Ch+var_8C], esi
		call	g_string_append_printf

loc_6889D11A:				; CODE XREF: sub_6889D028+DCj
		mov	[esp+8Ch+var_88], offset asc_688B369E ;	", "
		mov	[esp+8Ch+var_8C], esi
		call	g_string_append
		inc	edi
		add	ebx, 18h
		cmp	edi, ebp
		jnz	short loc_6889D0E8
		mov	ebp, [esp+8Ch+var_3C]

loc_6889D136:				; CODE XREF: sub_6889D028+B6j
		mov	eax, [esi]
		mov	[esp+8Ch+var_84], eax
		mov	[esp+8Ch+var_88], offset aS_2 ;	"%s\n"
		mov	[esp+8Ch+var_8C], offset aOscar_13 ; "oscar"
		call	purple_debug_misc
		mov	[esp+8Ch+var_88], 1
		mov	[esp+8Ch+var_8C], esi
		call	g_string_free
		mov	eax, [ebp+0Ch]
		test	eax, eax
		jz	loc_6889D07B
		mov	esi, [esp+8Ch+var_48]
		nop

loc_6889D170:				; CODE XREF: sub_6889D028+1A7j
		mov	ebx, [eax]
		mov	eax, [ebx]
		mov	[esp+8Ch+var_84], eax
		mov	[esp+8Ch+var_88], offset aCreatingRoomS	; "creating room %s\n"
		mov	[esp+8Ch+var_8C], offset aOscar_13 ; "oscar"
		call	purple_debug_info
		movzx	eax, word ptr [ebx+4]
		mov	[esp+8Ch+var_80], eax
		mov	eax, [ebx]
		mov	[esp+8Ch+var_84], eax
		mov	[esp+8Ch+var_88], esi
		mov	[esp+8Ch+var_8C], ebp
		call	aim_chatnav_createroom
		mov	eax, [ebx]
		mov	[esp+8Ch+var_8C], eax
		call	g_free
		mov	[esp+8Ch+var_88], ebx
		mov	eax, [ebp+0Ch]
		mov	[esp+8Ch+var_8C], eax
		call	g_slist_remove
		mov	[ebp+0Ch], eax
		mov	[esp+8Ch+var_8C], ebx
		call	g_free
		mov	eax, [ebp+0Ch]
		test	eax, eax
		jnz	short loc_6889D170
		jmp	loc_6889D07B
; ---------------------------------------------------------------------------
		align 4

loc_6889D1D8:				; CODE XREF: sub_6889D028+35j
		mov	edx, [esp+8Ch+arg_10]
		mov	eax, [esp+8Ch+arg_14]
		mov	[esp+8Ch+var_48], eax
		mov	esi, [esp+8Ch+arg_18]
		mov	[esp+8Ch+var_3C], esi
		mov	eax, [esp+8Ch+arg_1C]
		mov	[esp+8Ch+var_44], eax
		mov	esi, [esp+8Ch+arg_20]
		mov	[esp+8Ch+var_38], esi
		mov	eax, [esp+8Ch+arg_24]
		mov	[esp+8Ch+var_40], eax
		mov	ecx, [esp+8Ch+arg_28]
		mov	esi, [esp+8Ch+arg_2C]
		mov	edi, [esp+8Ch+arg_30]
		mov	eax, [esp+8Ch+arg_34]
		mov	ebx, [esp+8Ch+arg_38]
		test	eax, eax
		jz	loc_6889D2E8

loc_6889D241:				; CODE XREF: sub_6889D028+2C5j
		and	edi, 0FFFFh
		mov	[esp+8Ch+var_34], edi
		and	esi, 0FFh
		mov	[esp+8Ch+var_30], esi
		and	ecx, 0FFFFh
		movzx	esi, word ptr [esp+8Ch+var_40]
		mov	[esp+8Ch+var_40], esi
		movzx	esi, word ptr [esp+8Ch+var_44]
		mov	[esp+8Ch+var_44], esi
		movzx	edi, word ptr [esp+8Ch+var_48]
		movzx	esi, word ptr [esp+8Ch+var_3C]
		test	edx, edx
		jz	short loc_6889D2F2

loc_6889D27B:				; CODE XREF: sub_6889D028+2CFj
		mov	[esp+8Ch+var_5C], ebx
		mov	[esp+8Ch+var_60], eax
		mov	eax, [esp+8Ch+var_34]
		mov	[esp+8Ch+var_64], eax
		mov	eax, [esp+8Ch+var_30]
		mov	[esp+8Ch+var_68], eax
		mov	[esp+8Ch+var_6C], ecx
		mov	eax, [esp+8Ch+var_40]
		mov	[esp+8Ch+var_70], eax
		mov	eax, [esp+8Ch+var_38]
		mov	[esp+8Ch+var_74], eax
		mov	eax, [esp+8Ch+var_44]
		mov	[esp+8Ch+var_78], eax
		mov	[esp+8Ch+var_7C], edi
		mov	[esp+8Ch+var_80], esi
		mov	[esp+8Ch+var_84], edx
		mov	[esp+8Ch+var_88], offset aCreatedRoomSHu ; "created room: %s %hu %hu %hu %u %hu	%hu"...
		mov	[esp+8Ch+var_8C], offset aOscar_13 ; "oscar"
		call	purple_debug_misc
		mov	[esp+8Ch+var_80], edi
		mov	[esp+8Ch+var_84], ebx
		mov	[esp+8Ch+var_88], esi
		mov	[esp+8Ch+var_8C], ebp
		call	aim_chat_join
		jmp	loc_6889D07B
; ---------------------------------------------------------------------------

loc_6889D2E8:				; CODE XREF: sub_6889D028+213j
		mov	eax, offset aNull_0 ; "(null)"
		jmp	loc_6889D241
; ---------------------------------------------------------------------------

loc_6889D2F2:				; CODE XREF: sub_6889D028+251j
		mov	edx, offset aNull_0 ; "(null)"
		jmp	short loc_6889D27B
; ---------------------------------------------------------------------------

loc_6889D2F9:				; CODE XREF: sub_6889D028+62j
		call	__stack_chk_fail
sub_6889D028	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_6889D300(int,	int, int, int, int, int, char *)
sub_6889D300	proc near		; DATA XREF: oscar_login+39Co

Time		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_20		= dword	ptr -20h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h
arg_18		= dword	ptr  1Ch

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 3Ch
		mov	eax, ds:__stack_chk_guard
		mov	[esp+4Ch+var_20], eax
		xor	eax, eax
		mov	eax, [esp+4Ch+arg_0]
		mov	ebx, [eax+68h]
		mov	edx, [esp+4Ch+arg_4]
		mov	eax, ebx
		call	sub_68898FDC
		mov	esi, eax
		test	eax, eax
		jz	short loc_6889D386
		mov	ebp, [esp+4Ch+arg_C]
		mov	eax, [esp+4Ch+arg_10]
		mov	[esp+4Ch+var_44], eax ;	int
		mov	eax, [esp+4Ch+arg_14]
		mov	[esp+4Ch+var_48], eax ;	int
		mov	eax, [esp+4Ch+arg_18]
		mov	[esp+4Ch+Time],	eax ; char *
		call	oscar_encoding_to_utf8
		mov	edi, eax
		mov	[esp+4Ch+Time],	0 ; Time
		call	time
		mov	[esp+4Ch+var_38], eax
		mov	[esp+4Ch+var_3C], edi
		mov	[esp+4Ch+var_40], 0
		mov	eax, [ebp+0]
		mov	[esp+4Ch+var_44], eax
		mov	eax, [esi+10h]
		mov	[esp+4Ch+var_48], eax
		mov	[esp+4Ch+Time],	ebx
		call	serv_got_chat_in
		mov	[esp+4Ch+Time],	edi
		call	g_free

loc_6889D386:				; CODE XREF: sub_6889D300+28j
		mov	eax, 1
		mov	edx, [esp+4Ch+var_20]
		xor	edx, ds:__stack_chk_guard
		jnz	short loc_6889D39F
		add	esp, 3Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_6889D39F:				; CODE XREF: sub_6889D300+95j
		call	__stack_chk_fail
sub_6889D300	endp


; =============== S U B	R O U T	I N E =======================================


sub_6889D3A4	proc near		; DATA XREF: oscar_login+34Co

var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_30		= dword	ptr -30h
var_20		= dword	ptr -20h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 3Ch
		mov	eax, ds:__stack_chk_guard
		mov	[esp+4Ch+var_20], eax
		xor	eax, eax
		mov	eax, [esp+4Ch+arg_0]
		mov	eax, [eax+68h]
		mov	edx, [esp+4Ch+arg_C]
		mov	[esp+4Ch+var_30], edx
		mov	esi, [esp+4Ch+arg_10]
		mov	edx, [esp+4Ch+arg_4]
		call	sub_68898FDC
		mov	ebp, eax
		test	eax, eax
		jz	short loc_6889D412
		mov	eax, [esp+4Ch+var_30]
		test	eax, eax
		jle	short loc_6889D412
		xor	ebx, ebx
		xchg	ax, ax

loc_6889D3E4:				; CODE XREF: sub_6889D3A4+6Cj
		mov	edi, [esi]
		mov	eax, [ebp+18h]
		mov	[esp+4Ch+var_4C], eax
		call	purple_conversation_get_chat_data
		mov	[esp+4Ch+var_44], 0
		mov	[esp+4Ch+var_48], edi
		mov	[esp+4Ch+var_4C], eax
		call	purple_conv_chat_remove_user
		inc	ebx
		add	esi, 98h
		cmp	ebx, [esp+4Ch+var_30]
		jnz	short loc_6889D3E4

loc_6889D412:				; CODE XREF: sub_6889D3A4+32j
					; sub_6889D3A4+3Aj
		mov	eax, 1
		mov	edx, [esp+4Ch+var_20]
		xor	edx, ds:__stack_chk_guard
		jnz	short loc_6889D42B
		add	esp, 3Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_6889D42B:				; CODE XREF: sub_6889D3A4+7Dj
		call	__stack_chk_fail
sub_6889D3A4	endp


; =============== S U B	R O U T	I N E =======================================


sub_6889D430	proc near		; DATA XREF: oscar_login+324o

var_5C		= dword	ptr -5Ch
var_58		= dword	ptr -58h
var_54		= dword	ptr -54h
var_50		= dword	ptr -50h
var_4C		= dword	ptr -4Ch
var_30		= dword	ptr -30h
var_20		= dword	ptr -20h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 4Ch
		mov	eax, ds:__stack_chk_guard
		mov	[esp+5Ch+var_20], eax
		xor	eax, eax
		mov	eax, [esp+5Ch+arg_0]
		mov	eax, [eax+68h]
		mov	edx, [esp+5Ch+arg_C]
		mov	[esp+5Ch+var_30], edx
		mov	esi, [esp+5Ch+arg_10]
		mov	edx, [esp+5Ch+arg_4]
		call	sub_68898FDC
		mov	ebp, eax
		test	eax, eax
		jz	short loc_6889D4AE
		mov	eax, [esp+5Ch+var_30]
		test	eax, eax
		jle	short loc_6889D4AE
		xor	ebx, ebx
		xchg	ax, ax

loc_6889D470:				; CODE XREF: sub_6889D430+7Cj
		mov	edi, [esi]
		mov	eax, [ebp+18h]
		mov	[esp+5Ch+var_5C], eax
		call	purple_conversation_get_chat_data
		mov	[esp+5Ch+var_4C], 1
		mov	[esp+5Ch+var_50], 0
		mov	[esp+5Ch+var_54], 0
		mov	[esp+5Ch+var_58], edi
		mov	[esp+5Ch+var_5C], eax
		call	purple_conv_chat_add_user
		inc	ebx
		add	esi, 98h
		cmp	ebx, [esp+5Ch+var_30]
		jnz	short loc_6889D470

loc_6889D4AE:				; CODE XREF: sub_6889D430+32j
					; sub_6889D430+3Aj
		mov	eax, 1
		mov	edx, [esp+5Ch+var_20]
		xor	edx, ds:__stack_chk_guard
		jnz	short loc_6889D4C7
		add	esp, 4Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_6889D4C7:				; CODE XREF: sub_6889D430+8Dj
		call	__stack_chk_fail
sub_6889D430	endp


; =============== S U B	R O U T	I N E =======================================


sub_6889D4CC	proc near		; DATA XREF: oscar_login+2D4o

var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_20		= dword	ptr -20h
arg_0		= dword	ptr  4
arg_C		= dword	ptr  10h

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 2Ch
		mov	esi, [esp+3Ch+arg_0]
		mov	eax, ds:__stack_chk_guard
		mov	[esp+3Ch+var_20], eax
		xor	eax, eax
		mov	edi, [esi+68h]
		mov	[esp+3Ch+var_3C], edi
		call	purple_connection_get_account
		mov	ebp, eax
		mov	ebx, [esp+3Ch+arg_C]
		mov	[esp+3Ch+var_30], 0
		mov	[esp+3Ch+var_34], offset aOffline_0 ; "offline"
		mov	eax, [ebx]
		mov	[esp+3Ch+var_38], eax
		mov	[esp+3Ch+var_3C], ebp
		call	purple_prpl_got_user_status
		mov	[esp+3Ch+var_34], offset aMobile_0 ; "mobile"
		mov	eax, [ebx]
		mov	[esp+3Ch+var_38], eax
		mov	[esp+3Ch+var_3C], ebp
		call	purple_prpl_got_user_status_deactive
		mov	eax, [ebx]
		mov	[esp+3Ch+var_38], eax
		mov	eax, [edi+0Ch]
		mov	[esp+3Ch+var_3C], eax
		call	purple_normalize
		mov	[esp+3Ch+var_38], eax
		mov	eax, [esi+38h]
		mov	[esp+3Ch+var_3C], eax
		call	g_hash_table_remove
		mov	eax, 1
		mov	edx, [esp+3Ch+var_20]
		xor	edx, ds:__stack_chk_guard
		jnz	short loc_6889D560
		add	esp, 2Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_6889D560:				; CODE XREF: sub_6889D4CC+8Aj
		call	__stack_chk_fail
sub_6889D4CC	endp

; ---------------------------------------------------------------------------
		align 4

; =============== S U B	R O U T	I N E =======================================


sub_6889D568	proc near		; DATA XREF: oscar_login+1E4o

var_5C		= dword	ptr -5Ch
var_58		= dword	ptr -58h
var_54		= dword	ptr -54h
var_50		= dword	ptr -50h
var_4C		= dword	ptr -4Ch
var_30		= dword	ptr -30h
var_20		= dword	ptr -20h
arg_0		= dword	ptr  4
arg_C		= dword	ptr  10h
arg_14		= dword	ptr  18h
arg_18		= dword	ptr  1Ch
arg_1C		= dword	ptr  20h
arg_20		= dword	ptr  24h

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 4Ch
		mov	eax, ds:__stack_chk_guard
		mov	[esp+5Ch+var_20], eax
		xor	eax, eax
		mov	eax, [esp+5Ch+arg_0]
		mov	edi, [eax+68h]
		mov	esi, [esp+5Ch+arg_C]
		mov	ecx, [esp+5Ch+arg_14]
		mov	ebp, [esp+5Ch+arg_18]
		mov	edx, [esp+5Ch+arg_1C]
		mov	ebx, [esp+5Ch+arg_20]
		test	bx, bx
		jz	short loc_6889D601
		cmp	bx, 5Ah
		jz	short loc_6889D601
		and	ebp, 0FFFFh
		mov	[esp+5Ch+var_58], ebp
		mov	[esp+5Ch+var_5C], ecx
		mov	[esp+5Ch+var_30], edx
		call	purple_base16_encode
		mov	ebp, eax
		and	ebx, 0FFFFh
		mov	[esp+5Ch+var_58], ebx
		mov	edx, [esp+5Ch+var_30]
		mov	[esp+5Ch+var_5C], edx
		call	g_memdup
		mov	[esp+5Ch+var_5C], edi
		mov	[esp+5Ch+var_30], eax
		call	purple_connection_get_account
		mov	[esp+5Ch+var_4C], ebp
		mov	[esp+5Ch+var_50], ebx
		mov	edx, [esp+5Ch+var_30]
		mov	[esp+5Ch+var_54], edx
		mov	[esp+5Ch+var_58], esi
		mov	[esp+5Ch+var_5C], eax
		call	purple_buddy_icons_set_for_user
		mov	[esp+5Ch+var_5C], ebp
		call	g_free

loc_6889D601:				; CODE XREF: sub_6889D568+33j
					; sub_6889D568+39j
		mov	eax, 1
		mov	edx, [esp+5Ch+var_20]
		xor	edx, ds:__stack_chk_guard
		jnz	short loc_6889D61A
		add	esp, 4Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_6889D61A:				; CODE XREF: sub_6889D568+A8j
		call	__stack_chk_fail
sub_6889D568	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6889D620	proc near		; CODE XREF: sub_6889D79C+6E6p
					; .text:6889EB60p

var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_10		= dword	ptr -10h

		push	edi
		push	esi
		push	ebx
		sub	esp, 30h
		mov	esi, eax
		mov	eax, ds:__stack_chk_guard
		mov	[esp+3Ch+var_10], eax
		xor	eax, eax
		mov	[esp+3Ch+var_3C], esi
		call	purple_connection_get_protocol_data
		mov	ebx, eax
		mov	[esp+3Ch+var_38], 10h
		mov	[esp+3Ch+var_3C], eax
		call	flap_connection_getbytype
		test	eax, eax
		jz	loc_6889D764
		mov	edx, [ebx+8]
		test	edx, edx
		jnz	loc_6889D6FC

loc_6889D660:				; CODE XREF: sub_6889D620+13Dj
		mov	eax, [ebx+3Ch]
		test	eax, eax
		jnz	short loc_6889D68F
		jmp	short loc_6889D6D0
; ---------------------------------------------------------------------------
		align 4

loc_6889D66C:				; CODE XREF: sub_6889D620+7Fj
					; sub_6889D620+88j ...
		mov	eax, [ebx+3Ch]
		mov	eax, [eax]
		mov	[esp+3Ch+var_3C], eax
		call	g_free
		mov	eax, [ebx+3Ch]
		mov	[esp+3Ch+var_38], eax
		mov	[esp+3Ch+var_3C], eax
		call	g_slist_delete_link
		mov	[ebx+3Ch], eax
		test	eax, eax
		jz	short loc_6889D6D0

loc_6889D68F:				; CODE XREF: sub_6889D620+45j
		mov	eax, [eax]
		mov	[esp+3Ch+var_38], eax
		mov	[esp+3Ch+var_3C], ebx
		call	aim_locate_finduserinfo
		test	eax, eax
		jz	short loc_6889D66C
		movzx	edx, word ptr [eax+5Eh]
		test	dx, dx
		jz	short loc_6889D66C
		mov	[esp+3Ch+var_2C], edx
		mov	edx, [eax+60h]
		mov	[esp+3Ch+var_30], edx
		movzx	eax, byte ptr [eax+5Ch]
		mov	[esp+3Ch+var_34], eax
		mov	eax, [ebx+3Ch]
		mov	eax, [eax]
		mov	[esp+3Ch+var_38], eax
		mov	[esp+3Ch+var_3C], ebx
		call	aim_bart_request
		jmp	short loc_6889D66C
; ---------------------------------------------------------------------------

loc_6889D6D0:				; CODE XREF: sub_6889D620+47j
					; sub_6889D620+6Dj
		mov	[esp+3Ch+var_38], offset aNoMoreIconsToR ; "no more icons to request\n"
		mov	[esp+3Ch+var_3C], offset aOscar_13 ; "oscar"
		call	purple_debug_misc

loc_6889D6E4:				; CODE XREF: sub_6889D620+149j
					; sub_6889D620+166j
		mov	eax, [esp+3Ch+var_10]
		xor	eax, ds:__stack_chk_guard
		jnz	loc_6889D795
		add	esp, 30h
		pop	ebx
		pop	esi
		pop	edi
		retn
; ---------------------------------------------------------------------------
		align 4

loc_6889D6FC:				; CODE XREF: sub_6889D620+3Aj
		mov	[esp+3Ch+var_3C], esi
		call	purple_connection_get_account
		mov	[esp+3Ch+var_3C], eax
		call	purple_buddy_icons_find_account_icon
		mov	esi, eax
		test	eax, eax
		jz	short loc_6889D78B
		mov	[esp+3Ch+var_38], offset aUploadingIco_0 ; "Uploading icon to icon server\n"
		mov	[esp+3Ch+var_3C], offset aOscar_13 ; "oscar"
		call	purple_debug_info
		mov	[esp+3Ch+var_3C], esi
		call	purple_imgstore_get_size
		mov	edi, eax
		mov	[esp+3Ch+var_3C], esi
		call	purple_imgstore_get_data
		and	edi, 0FFFFh
		mov	[esp+3Ch+var_34], edi
		mov	[esp+3Ch+var_38], eax
		mov	[esp+3Ch+var_3C], ebx
		call	aim_bart_upload
		mov	[esp+3Ch+var_3C], esi
		call	purple_imgstore_unref

loc_6889D756:				; CODE XREF: sub_6889D620+173j
		mov	dword ptr [ebx+8], 0
		jmp	loc_6889D660
; ---------------------------------------------------------------------------
		align 4

loc_6889D764:				; CODE XREF: sub_6889D620+2Fj
		mov	ecx, [ebx+4]
		test	ecx, ecx
		jnz	loc_6889D6E4
		mov	[esp+3Ch+var_38], 10h
		mov	[esp+3Ch+var_3C], ebx
		call	aim_srv_requestnew
		mov	dword ptr [ebx+4], 1
		jmp	loc_6889D6E4
; ---------------------------------------------------------------------------

loc_6889D78B:				; CODE XREF: sub_6889D620+F0j
		mov	[esp+3Ch+var_3C], ebx
		call	aim_ssi_delicon
		jmp	short loc_6889D756
; ---------------------------------------------------------------------------

loc_6889D795:				; CODE XREF: sub_6889D620+CEj
		call	__stack_chk_fail
sub_6889D620	endp

; ---------------------------------------------------------------------------
		align 4

; =============== S U B	R O U T	I N E =======================================


sub_6889D79C	proc near		; DATA XREF: oscar_login+2ACo

C		= dword	ptr -5Ch
Type		= dword	ptr -58h
var_54		= dword	ptr -54h
var_50		= dword	ptr -50h
var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_3C		= dword	ptr -3Ch
Str1		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_20		= dword	ptr -20h
arg_0		= dword	ptr  4
arg_C		= dword	ptr  10h

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 4Ch
		mov	edx, [esp+5Ch+arg_0]
		mov	[esp+5Ch+var_3C], edx
		mov	eax, ds:__stack_chk_guard
		mov	[esp+5Ch+var_20], eax
		xor	eax, eax
		mov	eax, [edx+68h]
		mov	[esp+5Ch+var_34], eax
		mov	[esp+5Ch+C], eax
		call	purple_connection_get_account
		mov	ebx, [esp+5Ch+arg_C]
		test	ebx, ebx
		jz	loc_6889DD18
		mov	ebp, eax
		mov	eax, [ebx]
		test	eax, eax
		jz	loc_6889DD3C
		mov	[esp+5Ch+Type],	eax
		mov	[esp+5Ch+C], ebp
		call	purple_find_buddy
		test	eax, eax
		jz	loc_6889DA14
		mov	[esp+5Ch+C], eax
		call	purple_buddy_get_presence
		mov	[esp+5Ch+C], eax
		call	purple_presence_get_active_status
		mov	[esp+5Ch+var_30], eax

loc_6889D805:				; CODE XREF: sub_6889D79C+280j
		mov	eax, [ebx]
		mov	[esp+5Ch+C], eax
		call	oscar_util_valid_name_icq
		test	eax, eax
		jnz	short loc_6889D87B
		mov	edi, [ebx]
		movsx	ecx, byte ptr [edi]
		test	cl, cl
		jz	loc_6889DE8C
		mov	esi, ds:__mb_cur_max
		jmp	short loc_6889D84A
; ---------------------------------------------------------------------------

loc_6889D828:				; CODE XREF: sub_6889D79C+B1j
		mov	edx, ds:_pctype
		mov	eax, [edx]
		mov	ax, [eax+ecx*2]
		and	eax, 2
		movzx	eax, ax
		test	eax, eax
		jz	short loc_6889D863

loc_6889D83E:				; CODE XREF: sub_6889D79C+C5j
		inc	edi
		movsx	ecx, byte ptr [edi]
		test	cl, cl
		jz	loc_6889DC58

loc_6889D84A:				; CODE XREF: sub_6889D79C+8Aj
		cmp	dword ptr [esi], 1
		jz	short loc_6889D828
		mov	[esp+5Ch+Type],	2 ; Type
		mov	[esp+5Ch+C], ecx ; C
		call	_isctype
		test	eax, eax
		jnz	short loc_6889D83E

loc_6889D863:				; CODE XREF: sub_6889D79C+A0j
		mov	edi, [ebx]
		mov	eax, edi

loc_6889D867:				; CODE XREF: sub_6889D79C+4C0j
					; sub_6889D79C+6F2j
		mov	[esp+5Ch+var_54], eax
		mov	[esp+5Ch+Type],	edi
		mov	eax, [esp+5Ch+var_34]
		mov	[esp+5Ch+C], eax
		call	serv_got_alias

loc_6889D87B:				; CODE XREF: sub_6889D79C+75j
		mov	eax, [ebx+58h]
		test	al, 1
		jz	loc_6889D960
		mov	edi, [ebx+8]
		shr	di, 5
		and	edi, 1

loc_6889D890:				; CODE XREF: sub_6889D79C+1C6j
		test	al, 10h
		jz	short loc_6889D8E4
		mov	esi, [ebx+28h]
		test	esi, 20h
		jz	loc_6889DA00

loc_6889D8A3:				; CODE XREF: sub_6889D79C+266j
					; sub_6889D79C+271j
		mov	eax, [ebx]
		mov	[esp+5Ch+C], eax
		call	oscar_util_valid_name_icq
		test	eax, eax
		jz	short loc_6889D8F4

loc_6889D8B1:				; CODE XREF: sub_6889D79C+156j
		test	esi, 20h
		jz	loc_6889D97C
		mov	[esp+5Ch+Str1],	offset aFree4chat ; "free4chat"
		test	byte ptr [ebx+8], 80h
		jnz	short loc_6889D90A

loc_6889D8CB:				; CODE XREF: sub_6889D79C+16Cj
		mov	[esp+5Ch+var_54], offset aMobile_0 ; "mobile"
		mov	eax, [ebx]
		mov	[esp+5Ch+Type],	eax
		mov	[esp+5Ch+C], ebp
		call	purple_prpl_got_user_status_deactive
		jmp	short loc_6889D928
; ---------------------------------------------------------------------------
		align 4

loc_6889D8E4:				; CODE XREF: sub_6889D79C+F6j
		xor	esi, esi
		mov	eax, [ebx]
		mov	[esp+5Ch+C], eax
		call	oscar_util_valid_name_icq
		test	eax, eax
		jnz	short loc_6889D8B1

loc_6889D8F4:				; CODE XREF: sub_6889D79C+113j
		and	esi, 100h
		jz	short loc_6889D968

loc_6889D8FC:				; CODE XREF: sub_6889D79C+212j
		mov	[esp+5Ch+Str1],	offset aInvisible ; "invisible"

loc_6889D904:				; CODE XREF: sub_6889D79C+1DCj
					; sub_6889D79C+25Cj ...
		test	byte ptr [ebx+8], 80h
		jz	short loc_6889D8CB

loc_6889D90A:				; CODE XREF: sub_6889D79C+12Dj
		mov	[esp+5Ch+var_50], 0
		mov	[esp+5Ch+var_54], offset aMobile_0 ; "mobile"
		mov	eax, [ebx]
		mov	[esp+5Ch+Type],	eax
		mov	[esp+5Ch+C], ebp
		call	purple_prpl_got_user_status

loc_6889D928:				; CODE XREF: sub_6889D79C+145j
		mov	eax, [ebx+70h]
		test	eax, eax
		jz	short loc_6889D93C
		movzx	edx, word ptr [ebx+78h]
		test	dx, dx
		jnz	loc_6889DA24

loc_6889D93C:				; CODE XREF: sub_6889D79C+191j
		mov	[esp+5Ch+Type],	offset aAvailable_0 ; "available"
		mov	eax, [esp+5Ch+Str1]
		mov	[esp+5Ch+C], eax ; Str1
		call	strcmp
		test	eax, eax
		jnz	loc_6889DDE8
		xor	esi, esi
		jmp	loc_6889DC86
; ---------------------------------------------------------------------------
		align 10h

loc_6889D960:				; CODE XREF: sub_6889D79C+E4j
		xor	edi, edi
		jmp	loc_6889D890
; ---------------------------------------------------------------------------
		align 4

loc_6889D968:				; CODE XREF: sub_6889D79C+15Ej
		test	edi, edi
		jz	loc_6889DC64

loc_6889D970:				; CODE XREF: sub_6889D79C+20Aj
		mov	[esp+5Ch+Str1],	offset aAway ; "away"
		jmp	short loc_6889D904
; ---------------------------------------------------------------------------
		align 4

loc_6889D97C:				; CODE XREF: sub_6889D79C+11Bj
		test	esi, 2
		jnz	loc_6889DC74
		test	esi, 4
		jnz	loc_6889DE34
		test	esi, 10h
		jnz	loc_6889DE41
		test	esi, 1
		jnz	short loc_6889D970
		test	esi, 100h
		jnz	loc_6889D8FC
		test	esi, 3000h
		jnz	loc_6889DE93
		test	esi, 4000h
		jnz	loc_6889DEA0
		test	esi, 5000h
		jnz	loc_6889DEAD
		test	esi, 6000h
		jnz	loc_6889DEBA
		and	esi, 2001h
		jz	loc_6889DC64
		mov	[esp+5Ch+Str1],	offset aLunch ;	"lunch"
		jmp	loc_6889D904
; ---------------------------------------------------------------------------
		align 10h

loc_6889DA00:				; CODE XREF: sub_6889D79C+101j
		test	esi, esi
		jz	loc_6889D8A3
		mov	edi, 1
		jmp	loc_6889D8A3
; ---------------------------------------------------------------------------
		align 4

loc_6889DA14:				; CODE XREF: sub_6889D79C+4Fj
		mov	[esp+5Ch+var_30], 0
		jmp	loc_6889D805
; ---------------------------------------------------------------------------
		align 4

loc_6889DA24:				; CODE XREF: sub_6889D79C+19Aj
		mov	[esp+5Ch+var_54], edx ;	int
		mov	[esp+5Ch+Type],	eax ; int
		mov	eax, [ebx+74h]
		mov	[esp+5Ch+C], eax ; char	*
		call	oscar_encoding_to_utf8
		mov	edi, offset aAvailable_0 ; "available"
		mov	ecx, 0Ah
		mov	esi, [esp+5Ch+Str1]
		repe cmpsb
		jz	loc_6889DC84
		test	eax, eax
		jz	loc_6889DDE8
		mov	esi, eax

loc_6889DA57:				; CODE XREF: sub_6889D79C+653j
		mov	[esp+5Ch+var_4C], eax
		mov	eax, [ebx]
		mov	[esp+5Ch+var_50], eax
		mov	edx, [esp+5Ch+Str1]
		mov	[esp+5Ch+var_54], edx
		mov	[esp+5Ch+Type],	offset aActivatingStat ; "Activating status '%s' for buddy %s, me"...
		mov	[esp+5Ch+C], offset aOscar_13 ;	"oscar"
		call	purple_debug_info
		mov	[esp+5Ch+var_48], 0
		mov	[esp+5Ch+var_4C], esi
		mov	[esp+5Ch+var_50], offset aMessage_1 ; "message"
		mov	eax, [esp+5Ch+Str1]
		mov	[esp+5Ch+var_54], eax
		mov	eax, [ebx]
		mov	[esp+5Ch+Type],	eax
		mov	[esp+5Ch+C], ebp
		call	purple_prpl_got_user_status
		xor	edi, edi

loc_6889DAA9:				; CODE XREF: sub_6889D79C+576j
		mov	[esp+5Ch+C], esi
		call	g_free
		mov	[esp+5Ch+C], edi
		call	g_free
		mov	eax, [ebx+58h]
		test	al, 4
		jz	loc_6889DB68
		mov	eax, [ebx+14h]

loc_6889DAC7:				; CODE XREF: sub_6889D79C+3D7j
					; sub_6889D79C+5D3j
		mov	[esp+5Ch+var_54], eax
		mov	eax, [ebx]
		mov	[esp+5Ch+Type],	eax
		mov	[esp+5Ch+C], ebp
		call	purple_prpl_got_user_login_time
		test	byte ptr [ebx+58h], 8
		jnz	loc_6889DC14

loc_6889DAE3:				; CODE XREF: sub_6889D79C+495j
		mov	[esp+5Ch+var_50], 0
		mov	[esp+5Ch+var_54], 0
		mov	eax, [ebx]
		mov	[esp+5Ch+Type],	eax
		mov	[esp+5Ch+C], ebp
		call	purple_prpl_got_user_idle

loc_6889DB01:				; CODE XREF: sub_6889D79C+4B5j
		mov	eax, [ebx]
		mov	[esp+5Ch+Type],	eax
		mov	[esp+5Ch+C], ebp
		call	purple_normalize
		mov	[esp+5Ch+Type],	eax
		mov	edx, [esp+5Ch+var_3C]
		mov	eax, [edx+38h]
		mov	[esp+5Ch+C], eax
		call	g_hash_table_lookup
		mov	esi, eax
		test	eax, eax
		jz	loc_6889DDF4

loc_6889DB2C:				; CODE XREF: sub_6889D79C+693j
		mov	dword ptr [esi], 0
		mov	dword ptr [esi+14h], 0
		mov	eax, [ebx+2Ch]
		mov	[esi+4], eax
		movzx	eax, word ptr [ebx+5Eh]
		test	ax, ax
		jnz	short loc_6889DB78

loc_6889DB48:				; CODE XREF: sub_6889D79C+472j
					; sub_6889D79C+598j ...
		mov	eax, 1
		mov	edx, [esp+5Ch+var_20]
		xor	edx, ds:__stack_chk_guard
		jnz	loc_6889DEC7
		add	esp, 4Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 4

loc_6889DB68:				; CODE XREF: sub_6889D79C+322j
		test	ah, 1
		jnz	loc_6889DD60
		xor	eax, eax
		jmp	loc_6889DAC7
; ---------------------------------------------------------------------------

loc_6889DB78:				; CODE XREF: sub_6889D79C+3AAj
		mov	[esp+5Ch+Type],	eax
		mov	eax, [ebx+60h]
		mov	[esp+5Ch+C], eax
		call	purple_base16_encode
		mov	esi, eax
		mov	eax, [ebx]
		mov	[esp+5Ch+Type],	eax
		mov	[esp+5Ch+C], ebp
		call	purple_find_buddy
		test	eax, eax
		jz	short loc_6889DBBB
		mov	[esp+5Ch+C], eax
		call	purple_buddy_icons_get_checksum_for_user
		test	esi, esi
		jz	short loc_6889DBBB
		test	eax, eax
		jz	short loc_6889DBBB
		mov	[esp+5Ch+Type],	eax ; Str2
		mov	[esp+5Ch+C], esi ; Str1
		call	strcmp
		test	eax, eax
		jz	short loc_6889DC06

loc_6889DBBB:				; CODE XREF: sub_6889D79C+3FDj
					; sub_6889D79C+409j ...
		mov	[esp+5Ch+var_4C], 0
		mov	[esp+5Ch+var_50], 0
		mov	[esp+5Ch+var_54], 0
		mov	eax, [ebx]
		mov	[esp+5Ch+Type],	eax
		mov	[esp+5Ch+C], ebp
		call	purple_buddy_icons_set_for_user
		mov	[esp+5Ch+var_54], offset oscar_util_name_compare
		mov	eax, [ebx]
		mov	[esp+5Ch+Type],	eax
		mov	edx, [esp+5Ch+var_3C]
		mov	eax, [edx+3Ch]
		mov	[esp+5Ch+C], eax
		call	g_slist_find_custom
		test	eax, eax
		jz	loc_6889DE4E

loc_6889DC06:				; CODE XREF: sub_6889D79C+41Dj
					; sub_6889D79C+6EBj
		mov	[esp+5Ch+C], esi
		call	g_free
		jmp	loc_6889DB48
; ---------------------------------------------------------------------------
		align 4

loc_6889DC14:				; CODE XREF: sub_6889D79C+341j
		mov	[esp+5Ch+C], 0	; Time
		call	time
		movzx	edx, word ptr [ebx+6]
		lea	edx, [edx+edx*2]
		lea	edx, [edx+edx*4]
		shl	edx, 2
		sub	eax, edx
		test	eax, eax
		jle	loc_6889DAE3
		mov	[esp+5Ch+var_50], eax
		mov	[esp+5Ch+var_54], 1
		mov	eax, [ebx]
		mov	[esp+5Ch+Type],	eax
		mov	[esp+5Ch+C], ebp
		call	purple_prpl_got_user_idle
		jmp	loc_6889DB01
; ---------------------------------------------------------------------------
		align 4

loc_6889DC58:				; CODE XREF: sub_6889D79C+A8j
		mov	edi, [ebx]
		xor	eax, eax
		jmp	loc_6889D867
; ---------------------------------------------------------------------------
		align 4

loc_6889DC64:				; CODE XREF: sub_6889D79C+1CEj
					; sub_6889D79C+24Ej
		mov	[esp+5Ch+Str1],	offset aAvailable_0 ; "available"
		jmp	loc_6889D904
; ---------------------------------------------------------------------------
		align 4

loc_6889DC74:				; CODE XREF: sub_6889D79C+1E6j
		mov	[esp+5Ch+Str1],	offset aDnd ; "dnd"
		jmp	loc_6889D904
; ---------------------------------------------------------------------------
		align 4

loc_6889DC84:				; CODE XREF: sub_6889D79C+2ABj
		mov	esi, eax

loc_6889DC86:				; CODE XREF: sub_6889D79C+1BEj
		mov	eax, [ebx+7Ch]
		test	eax, eax
		jz	loc_6889DD9C
		movzx	edx, word ptr [ebx+84h]
		test	dx, dx
		jnz	loc_6889DD74

loc_6889DCA1:				; CODE XREF: sub_6889D79C+5F0j
					; sub_6889D79C+606j ...
		xor	edi, edi
		mov	eax, offset aNull_0 ; "(null)"

loc_6889DCA8:				; CODE XREF: sub_6889D79C+5F8j
		test	esi, esi
		jz	loc_6889DDDC
		mov	edx, esi

loc_6889DCB2:				; CODE XREF: sub_6889D79C+645j
		mov	[esp+5Ch+var_48], eax
		mov	[esp+5Ch+var_4C], edx
		mov	eax, [ebx]
		mov	[esp+5Ch+var_50], eax
		mov	edx, [esp+5Ch+Str1]
		mov	[esp+5Ch+var_54], edx
		mov	[esp+5Ch+Type],	offset aActivatingSt_0 ; "Activating status '%s' for buddy %s, me"...
		mov	[esp+5Ch+C], offset aOscar_13 ;	"oscar"
		call	purple_debug_info
		mov	[esp+5Ch+var_40], 0
		mov	[esp+5Ch+var_44], edi
		mov	[esp+5Ch+var_48], offset aItmsurl ; "itmsurl"
		mov	[esp+5Ch+var_4C], esi
		mov	[esp+5Ch+var_50], offset aMessage_1 ; "message"
		mov	eax, [esp+5Ch+Str1]
		mov	[esp+5Ch+var_54], eax
		mov	eax, [ebx]
		mov	[esp+5Ch+Type],	eax
		mov	[esp+5Ch+C], ebp
		call	purple_prpl_got_user_status
		jmp	loc_6889DAA9
; ---------------------------------------------------------------------------
		align 4

loc_6889DD18:				; CODE XREF: sub_6889D79C+2Fj
		mov	[esp+5Ch+var_54], offset aInfoNull ; "info != NULL"
		mov	[esp+5Ch+Type],	offset aPurple_parse_o ; "purple_parse_oncoming"
		mov	[esp+5Ch+C], 0
		call	g_return_if_fail_warning
		jmp	loc_6889DB48
; ---------------------------------------------------------------------------
		align 4

loc_6889DD3C:				; CODE XREF: sub_6889D79C+3Bj
		mov	[esp+5Ch+var_54], offset aInfoBnNull ; "info->bn != NULL"
		mov	[esp+5Ch+Type],	offset aPurple_parse_o ; "purple_parse_oncoming"
		mov	[esp+5Ch+C], 0
		call	g_return_if_fail_warning
		jmp	loc_6889DB48
; ---------------------------------------------------------------------------
		align 10h

loc_6889DD60:				; CODE XREF: sub_6889D79C+3CFj
		mov	[esp+5Ch+C], 0	; Time
		call	time
		sub	eax, [ebx+18h]
		jmp	loc_6889DAC7
; ---------------------------------------------------------------------------

loc_6889DD74:				; CODE XREF: sub_6889D79C+4FFj
		mov	[esp+5Ch+var_54], edx ;	int
		mov	[esp+5Ch+Type],	eax ; int
		mov	eax, [ebx+80h]
		mov	[esp+5Ch+C], eax ; char	*
		call	oscar_encoding_to_utf8

loc_6889DD8A:				; CODE XREF: sub_6889D79C+63Cj
		test	eax, eax
		jz	loc_6889DCA1
		mov	edi, eax
		jmp	loc_6889DCA8
; ---------------------------------------------------------------------------
		align 4

loc_6889DD9C:				; CODE XREF: sub_6889D79C+4EFj
		mov	edi, [esp+5Ch+var_30]
		test	edi, edi
		jz	loc_6889DCA1
		mov	eax, [esp+5Ch+var_30]
		mov	[esp+5Ch+C], eax
		call	purple_status_is_available
		test	eax, eax
		jz	loc_6889DCA1
		mov	[esp+5Ch+Type],	offset aItmsurl	; "itmsurl"
		mov	eax, [esp+5Ch+var_30]
		mov	[esp+5Ch+C], eax
		call	purple_status_get_attr_string
		mov	[esp+5Ch+C], eax
		call	g_strdup
		jmp	short loc_6889DD8A
; ---------------------------------------------------------------------------
		align 4

loc_6889DDDC:				; CODE XREF: sub_6889D79C+50Ej
		mov	edx, offset aNull_0 ; "(null)"
		jmp	loc_6889DCB2
; ---------------------------------------------------------------------------
		align 4

loc_6889DDE8:				; CODE XREF: sub_6889D79C+1B6j
					; sub_6889D79C+2B3j
		xor	esi, esi
		mov	eax, offset aNull_0 ; "(null)"
		jmp	loc_6889DA57
; ---------------------------------------------------------------------------

loc_6889DDF4:				; CODE XREF: sub_6889D79C+38Aj
		mov	[esp+5Ch+C], 2Ch
		call	g_malloc0
		mov	esi, eax
		mov	eax, [ebx]
		mov	[esp+5Ch+Type],	eax
		mov	[esp+5Ch+C], ebp
		call	purple_normalize
		mov	[esp+5Ch+C], eax
		call	g_strdup
		mov	[esp+5Ch+var_54], esi
		mov	[esp+5Ch+Type],	eax
		mov	edx, [esp+5Ch+var_3C]
		mov	eax, [edx+38h]
		mov	[esp+5Ch+C], eax
		call	g_hash_table_insert
		jmp	loc_6889DB2C
; ---------------------------------------------------------------------------

loc_6889DE34:				; CODE XREF: sub_6889D79C+1F2j
		mov	[esp+5Ch+Str1],	offset aNa ; "na"
		jmp	loc_6889D904
; ---------------------------------------------------------------------------

loc_6889DE41:				; CODE XREF: sub_6889D79C+1FEj
		mov	[esp+5Ch+Str1],	offset aOccupied ; "occupied"
		jmp	loc_6889D904
; ---------------------------------------------------------------------------

loc_6889DE4E:				; CODE XREF: sub_6889D79C+464j
		mov	eax, [ebx]
		mov	[esp+5Ch+Type],	eax
		mov	[esp+5Ch+C], ebp
		call	purple_normalize
		mov	[esp+5Ch+C], eax
		call	g_strdup
		mov	[esp+5Ch+Type],	eax
		mov	edx, [esp+5Ch+var_3C]
		mov	eax, [edx+3Ch]
		mov	[esp+5Ch+C], eax
		call	g_slist_prepend
		mov	edx, [esp+5Ch+var_3C]
		mov	[edx+3Ch], eax
		mov	eax, [esp+5Ch+var_34]
		call	sub_6889D620
		jmp	loc_6889DC06
; ---------------------------------------------------------------------------

loc_6889DE8C:				; CODE XREF: sub_6889D79C+7Ej
		xor	eax, eax
		jmp	loc_6889D867
; ---------------------------------------------------------------------------

loc_6889DE93:				; CODE XREF: sub_6889D79C+21Ej
		mov	[esp+5Ch+Str1],	offset aEvil ; "evil"
		jmp	loc_6889D904
; ---------------------------------------------------------------------------

loc_6889DEA0:				; CODE XREF: sub_6889D79C+22Aj
		mov	[esp+5Ch+Str1],	offset aDepression ; "depression"
		jmp	loc_6889D904
; ---------------------------------------------------------------------------

loc_6889DEAD:				; CODE XREF: sub_6889D79C+236j
		mov	[esp+5Ch+Str1],	offset aAthome ; "athome"
		jmp	loc_6889D904
; ---------------------------------------------------------------------------

loc_6889DEBA:				; CODE XREF: sub_6889D79C+242j
		mov	[esp+5Ch+Str1],	offset aAtwork ; "atwork"
		jmp	loc_6889D904
; ---------------------------------------------------------------------------

loc_6889DEC7:				; CODE XREF: sub_6889D79C+3BBj
		call	__stack_chk_fail
sub_6889D79C	endp


; =============== S U B	R O U T	I N E =======================================


sub_6889DECC	proc near		; DATA XREF: oscar_login+234o

Str1		= dword	ptr -5Ch
Str2		= dword	ptr -58h
var_54		= dword	ptr -54h
var_50		= dword	ptr -50h
var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_20		= dword	ptr -20h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_C		= word ptr  10h
arg_10		= word ptr  14h

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 4Ch
		mov	edx, [esp+5Ch+arg_4]
		mov	[esp+5Ch+var_30], edx
		mov	eax, ds:__stack_chk_guard
		mov	[esp+5Ch+var_20], eax
		xor	eax, eax
		mov	eax, [esp+5Ch+arg_0]
		mov	edi, [eax+68h]
		mov	[esp+5Ch+Str1],	edi
		call	purple_connection_get_protocol_data
		mov	ebx, eax
		mov	[esp+5Ch+Str1],	edi
		call	purple_connection_get_account
		mov	esi, eax
		movzx	ebp, [esp+5Ch+arg_10]
		movzx	eax, [esp+5Ch+arg_C]
		mov	[esp+5Ch+var_50], ebp
		mov	[esp+5Ch+var_54], eax
		mov	[esp+5Ch+Str2],	offset aBosRightsMaxPe ; "BOS rights: Max permit = %hu / Max deny"...
		mov	[esp+5Ch+Str1],	offset aOscar_13 ; "oscar"
		mov	[esp+5Ch+var_38], eax
		call	purple_debug_misc
		mov	eax, [esp+5Ch+var_38]
		mov	[ebx+58h], eax
		mov	[ebx+5Ch], ebp
		mov	[esp+5Ch+Str2],	offset aBuddyListLoade ; "buddy	list loaded\n"
		mov	[esp+5Ch+Str1],	offset aOscar_13 ; "oscar"
		call	purple_debug_info
		mov	[esp+5Ch+Str1],	esi
		call	purple_account_get_user_info
		test	eax, eax
		jz	short loc_6889DF69
		mov	[esp+5Ch+Str1],	esi
		call	purple_account_get_user_info
		mov	[esp+5Ch+Str2],	eax
		mov	[esp+5Ch+Str1],	edi
		call	serv_set_info

loc_6889DF69:				; CODE XREF: sub_6889DECC+87j
		mov	[esp+5Ch+Str1],	esi
		call	purple_account_get_username
		mov	ebp, eax
		mov	eax, [ebx+44h]
		test	eax, eax
		jz	loc_6889E114

loc_6889DF7E:				; CODE XREF: sub_6889DECC+25Ej
					; sub_6889DECC+2A4j ...
		mov	[esp+5Ch+Str1],	esi
		call	purple_account_get_active_status
		mov	ebp, eax
		mov	[esp+5Ch+Str1],	eax
		call	purple_status_is_available
		mov	edx, eax
		test	eax, eax
		jnz	loc_6889E0F4
		xor	eax, eax

loc_6889DF9C:				; CODE XREF: sub_6889DECC+240j
		mov	[esp+5Ch+Str1],	eax
		mov	[esp+5Ch+var_38], edx
		call	purple_markup_strip_html
		mov	[esp+5Ch+var_34], eax
		mov	[esp+5Ch+Str2],	offset aItmsurl	; "itmsurl"
		mov	[esp+5Ch+Str1],	ebp
		call	purple_status_get_attr_string
		mov	[esp+5Ch+var_48], eax
		mov	eax, [esp+5Ch+var_34]
		mov	[esp+5Ch+var_4C], eax
		mov	edx, [esp+5Ch+var_38]
		mov	[esp+5Ch+var_50], edx
		mov	[esp+5Ch+var_54], 0
		mov	[esp+5Ch+Str2],	0
		mov	[esp+5Ch+Str1],	ebx
		call	aim_srv_setextrainfo
		mov	[esp+5Ch+Str1],	ebx
		call	aim_srv_set_dc_info
		mov	eax, [esp+5Ch+var_34]
		mov	[esp+5Ch+Str1],	eax
		call	g_free
		mov	[esp+5Ch+Str1],	ebp
		call	purple_status_get_presence
		mov	ebp, eax
		mov	[esp+5Ch+Str1],	eax
		call	purple_presence_is_idle
		test	eax, eax
		jnz	loc_6889E178
		xor	eax, eax

loc_6889E018:				; CODE XREF: sub_6889DECC+2CCj
		mov	[esp+5Ch+Str2],	eax
		mov	[esp+5Ch+Str1],	ebx
		call	aim_srv_setidle
		mov	eax, [ebx+44h]
		test	eax, eax
		jnz	short loc_6889E0A4

loc_6889E02B:				; CODE XREF: sub_6889DECC+221j
		mov	[esp+5Ch+Str2],	18h
		mov	[esp+5Ch+Str1],	ebx
		call	aim_srv_requestnew
		mov	[esp+5Ch+Str2],	0Dh
		mov	[esp+5Ch+Str1],	ebx
		call	aim_srv_requestnew
		mov	dword ptr [ebx+0C8h], 1
		mov	ebp, [ebx+0CCh]
		test	ebp, ebp
		jz	short loc_6889E087
		mov	edx, [esp+5Ch+var_30]
		mov	[esp+5Ch+Str2],	edx
		mov	[esp+5Ch+Str1],	ebx
		call	aim_srv_clientready
		mov	[esp+5Ch+Str1],	ebx
		call	aim_im_reqofflinemsgs
		mov	[esp+5Ch+Str2],	1
		mov	[esp+5Ch+Str1],	edi
		call	purple_connection_set_state

loc_6889E087:				; CODE XREF: sub_6889DECC+191j
		mov	eax, 1
		mov	edx, [esp+5Ch+var_20]
		xor	edx, ds:__stack_chk_guard
		jnz	loc_6889E2C7
		add	esp, 4Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_6889E0A4:				; CODE XREF: sub_6889DECC+15Dj
		mov	eax, edi
		call	sub_68899944
		mov	[esp+5Ch+var_54], 0
		mov	[esp+5Ch+Str2],	offset aWeb_aware ; "web_aware"
		mov	[esp+5Ch+Str1],	esi
		call	purple_account_get_bool
		mov	ebp, eax
		mov	[esp+5Ch+var_54], 1
		mov	[esp+5Ch+Str2],	offset aAuthorization ;	"authorization"
		mov	[esp+5Ch+Str1],	esi
		call	purple_account_get_bool
		mov	[esp+5Ch+var_54], ebp
		mov	[esp+5Ch+Str2],	eax
		mov	[esp+5Ch+Str1],	ebx
		call	aim_icq_setsecurity
		jmp	loc_6889E02B
; ---------------------------------------------------------------------------
		align 4

loc_6889E0F4:				; CODE XREF: sub_6889DECC+C8j
		mov	[esp+5Ch+Str2],	offset aMessage_1 ; "message"
		mov	[esp+5Ch+Str1],	ebp
		mov	[esp+5Ch+var_38], eax
		call	purple_status_get_attr_string
		mov	edx, [esp+5Ch+var_38]
		jmp	loc_6889DF9C
; ---------------------------------------------------------------------------
		align 4

loc_6889E114:				; CODE XREF: sub_6889DECC+ACj
		mov	[esp+5Ch+Str1],	edi
		call	purple_connection_get_display_name
		mov	[esp+5Ch+Str2],	eax ; Str2
		mov	[esp+5Ch+Str1],	ebp ; Str1
		call	strcmp
		test	eax, eax
		jz	loc_6889DF7E
		mov	[esp+5Ch+Str1],	edi
		call	purple_connection_get_display_name
		test	eax, eax
		jz	short loc_6889E1A0
		mov	[esp+5Ch+Str2],	40h ; Val
		mov	[esp+5Ch+Str1],	eax ; Str
		mov	[esp+5Ch+var_38], eax
		call	strchr
		test	eax, eax
		mov	edx, [esp+5Ch+var_38]
		jz	short loc_6889E1A0
		mov	[esp+5Ch+var_54], edx
		mov	[esp+5Ch+Str2],	offset aCowardlyRefusi ; "Cowardly refusing to attempt to format "...
		mov	[esp+5Ch+Str1],	offset aOscar_13 ; "oscar"
		call	purple_debug_info
		jmp	loc_6889DF7E
; ---------------------------------------------------------------------------
		align 4

loc_6889E178:				; CODE XREF: sub_6889DECC+144j
		mov	[esp+5Ch+Str1],	0 ; Time
		call	time
		mov	[esp+5Ch+var_34], eax
		mov	[esp+5Ch+Str1],	ebp
		call	purple_presence_get_idle_time
		mov	edx, [esp+5Ch+var_34]
		sub	edx, eax
		mov	eax, edx
		jmp	loc_6889E018
; ---------------------------------------------------------------------------
		align 10h

loc_6889E1A0:				; CODE XREF: sub_6889DECC+26Ej
					; sub_6889DECC+28Aj
		mov	[esp+5Ch+Str1],	edi
		call	purple_connection_get_account
		mov	[esp+5Ch+Str1],	eax
		call	purple_account_get_username
		mov	[esp+5Ch+Str2],	ebp
		mov	[esp+5Ch+Str1],	eax
		call	oscar_util_name_compare
		test	eax, eax
		jnz	short loc_6889E23A
		mov	[esp+5Ch+Str1],	ebp
		call	g_strdup
		mov	[esp+5Ch+var_34], eax
		mov	[esp+5Ch+Str2],	40h ; Val
		mov	[esp+5Ch+Str1],	eax ; Str
		call	strchr
		test	eax, eax
		jz	short loc_6889E1E3
		mov	byte ptr [eax],	0

loc_6889E1E3:				; CODE XREF: sub_6889DECC+312j
		mov	[esp+5Ch+Str1],	edi
		call	purple_connection_get_protocol_data
		mov	ebp, eax
		mov	[esp+5Ch+Str2],	7
		mov	[esp+5Ch+Str1],	eax
		call	flap_connection_getbytype
		test	eax, eax
		jz	loc_6889E299
		mov	[esp+5Ch+Str2],	7
		mov	[esp+5Ch+Str1],	ebp
		call	flap_connection_getbytype
		mov	edx, [esp+5Ch+var_34]
		mov	[esp+5Ch+var_54], edx
		mov	[esp+5Ch+Str2],	eax
		mov	[esp+5Ch+Str1],	ebp
		call	aim_admin_setnick
		mov	eax, [esp+5Ch+var_34]
		mov	[esp+5Ch+Str1],	eax
		call	g_free
		jmp	loc_6889DF7E
; ---------------------------------------------------------------------------

loc_6889E23A:				; CODE XREF: sub_6889DECC+2F2j
		mov	[esp+5Ch+Str2],	offset aUsernameFormat ; "Username formatting can change only cap"...
		mov	[esp+5Ch+Str1],	offset aPidgin_6 ; "pidgin"
		call	libintl_dgettext
		mov	ebp, eax
		mov	[esp+5Ch+Str2],	offset aTheNewFormatti ; "The new formatting is	invalid."
		mov	[esp+5Ch+Str1],	offset aPidgin_6 ; "pidgin"
		call	libintl_dgettext
		mov	[esp+5Ch+var_44], 0
		mov	[esp+5Ch+var_48], 0
		mov	[esp+5Ch+var_4C], ebp
		mov	[esp+5Ch+var_50], eax
		mov	[esp+5Ch+var_54], 0
		mov	[esp+5Ch+Str2],	0
		mov	[esp+5Ch+Str1],	edi
		call	purple_notify_message
		jmp	loc_6889DF7E
; ---------------------------------------------------------------------------

loc_6889E299:				; CODE XREF: sub_6889DECC+333j
		mov	dword ptr [ebp+20h], 1
		mov	eax, [ebp+24h]
		mov	[esp+5Ch+Str1],	eax
		call	g_free
		mov	eax, [esp+5Ch+var_34]
		mov	[ebp+24h], eax
		mov	[esp+5Ch+Str2],	7
		mov	[esp+5Ch+Str1],	ebp
		call	aim_srv_requestnew
		jmp	loc_6889DF7E
; ---------------------------------------------------------------------------

loc_6889E2C7:				; CODE XREF: sub_6889DECC+1CAj
		call	__stack_chk_fail
sub_6889DECC	endp


; =============== S U B	R O U T	I N E =======================================


sub_6889E2CC	proc near		; DATA XREF: sub_68899EF8+D6o

var_2C		= dword	ptr -2Ch
var_10		= dword	ptr -10h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	ebx
		sub	esp, 28h
		mov	ebx, [esp+2Ch+arg_4]
		mov	eax, ds:__stack_chk_guard
		mov	[esp+2Ch+var_10], eax
		xor	eax, eax
		mov	eax, [esp+2Ch+arg_0]
		mov	[esp+2Ch+var_2C], eax
		call	purple_connection_get_protocol_data
		mov	edx, [esp+2Ch+var_10]
		xor	edx, ds:__stack_chk_guard
		jnz	short loc_6889E308
		mov	[esp+2Ch+arg_4], ebx
		mov	[esp+2Ch+arg_0], eax
		add	esp, 28h
		pop	ebx
		jmp	aim_auth_securid_send
; ---------------------------------------------------------------------------

loc_6889E308:				; CODE XREF: sub_6889E2CC+29j
		call	__stack_chk_fail
sub_6889E2CC	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6889E310	proc near		; DATA XREF: oscar_login+194o

var_9C		= dword	ptr -9Ch
var_98		= dword	ptr -98h
var_94		= dword	ptr -94h
var_90		= dword	ptr -90h
var_8C		= dword	ptr -8Ch
var_88		= dword	ptr -88h
var_84		= dword	ptr -84h
var_80		= dword	ptr -80h
var_74		= dword	ptr -74h
var_70		= dword	ptr -70h
var_6C		= dword	ptr -6Ch
var_68		= dword	ptr -68h
var_64		= dword	ptr -64h
var_60		= dword	ptr -60h
var_58		= byte ptr -58h
var_3C		= byte ptr -3Ch
var_20		= dword	ptr -20h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 8Ch
		mov	ebp, [esp+9Ch+arg_0]
		mov	edx, [esp+9Ch+arg_4]
		mov	[esp+9Ch+var_60], edx
		mov	eax, ds:__stack_chk_guard
		mov	[esp+9Ch+var_20], eax
		xor	eax, eax
		lea	ebx, [esp+9Ch+var_58]
		mov	esi, offset dword_688AD1C0
		mov	ecx, 7
		mov	edi, ebx
		rep movsd
		lea	edx, [esp+9Ch+var_3C]
		mov	[esp+9Ch+var_6C], edx
		mov	esi, offset dword_688AD1DC
		mov	cl, 7
		mov	edi, edx
		rep movsd
		mov	edi, [ebp+68h]
		mov	[esp+9Ch+var_9C], edi
		call	purple_connection_get_account
		mov	esi, eax
		mov	edx, [esp+9Ch+arg_C]
		mov	[esp+9Ch+var_68], edx
		mov	edx, [esp+9Ch+arg_10]
		mov	[esp+9Ch+var_64], edx
		mov	[esp+9Ch+var_94], 1
		mov	[esp+9Ch+var_98], offset aAllow_multiple ; "allow_multiple_logins"
		mov	[esp+9Ch+var_9C], eax
		call	purple_account_get_bool
		mov	edx, eax
		mov	eax, [ebp+44h]
		test	eax, eax
		jnz	loc_6889E444
		mov	ecx, ebx

loc_6889E3A6:				; CODE XREF: sub_6889E310+138j
		mov	[esp+9Ch+var_9C], edi
		mov	[esp+9Ch+var_74], edx
		mov	[esp+9Ch+var_70], ecx
		call	purple_connection_get_password
		mov	ebx, eax
		mov	[esp+9Ch+var_9C], esi
		call	purple_account_get_username
		mov	edx, [esp+9Ch+var_74]
		mov	[esp+9Ch+var_80], edx
		mov	edx, [esp+9Ch+var_68]
		mov	[esp+9Ch+var_84], edx
		mov	ecx, [esp+9Ch+var_70]
		mov	[esp+9Ch+var_88], ecx
		mov	edx, [esp+9Ch+var_64]
		mov	[esp+9Ch+var_8C], edx
		mov	[esp+9Ch+var_90], ebx
		mov	[esp+9Ch+var_94], eax
		mov	edx, [esp+9Ch+var_60]
		mov	[esp+9Ch+var_98], edx
		mov	[esp+9Ch+var_9C], ebp
		call	aim_send_login
		mov	[esp+9Ch+var_98], offset aPasswordSent ; "Password sent"
		mov	[esp+9Ch+var_9C], offset aPidgin_6 ; "pidgin"
		call	libintl_dgettext
		mov	[esp+9Ch+var_90], 6
		mov	[esp+9Ch+var_94], 2
		mov	[esp+9Ch+var_98], eax
		mov	[esp+9Ch+var_9C], edi
		call	purple_connection_update_progress
		mov	eax, 1
		mov	edx, [esp+9Ch+var_20]
		xor	edx, ds:__stack_chk_guard
		jnz	short loc_6889E44D
		add	esp, 8Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_6889E444:				; CODE XREF: sub_6889E310+8Ej
		lea	ecx, [esp+9Ch+var_3C]
		jmp	loc_6889E3A6
; ---------------------------------------------------------------------------

loc_6889E44D:				; CODE XREF: sub_6889E310+127j
		call	__stack_chk_fail
sub_6889E310	endp

; ---------------------------------------------------------------------------
		align 4

; =============== S U B	R O U T	I N E =======================================


sub_6889E454	proc near		; DATA XREF: oscar_login+16Co

Str		= dword	ptr -15Ch
var_158		= dword	ptr -158h
var_154		= dword	ptr -154h
var_150		= dword	ptr -150h
var_14C		= dword	ptr -14Ch
var_148		= dword	ptr -148h
var_144		= dword	ptr -144h
var_138		= dword	ptr -138h
var_134		= dword	ptr -134h
var_130		= dword	ptr -130h
var_120		= byte ptr -120h
var_20		= dword	ptr -20h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_C		= dword	ptr  10h

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 14Ch
		mov	esi, [esp+15Ch+arg_0]
		mov	edi, [esp+15Ch+arg_4]
		mov	eax, ds:__stack_chk_guard
		mov	[esp+15Ch+var_20], eax
		xor	eax, eax
		mov	ebp, [esi+68h]
		mov	[esp+15Ch+Str],	ebp
		call	purple_connection_get_account
		mov	[esp+15Ch+var_138], eax
		movzx	eax, word ptr [esi+0F4h]
		mov	[esp+15Ch+var_154], eax
		mov	[esp+15Ch+var_158], offset aPort_0 ; "port"
		mov	eax, [esp+15Ch+var_138]
		mov	[esp+15Ch+Str],	eax
		call	purple_account_get_int
		mov	[esp+15Ch+var_134], eax
		mov	ebx, [esp+15Ch+arg_C]
		mov	eax, [ebx]
		mov	[esp+15Ch+var_154], eax
		mov	[esp+15Ch+var_158], offset aInsideAuth_res ; "inside auth_resp (Username: %s)\n"
		mov	[esp+15Ch+Str],	offset aOscar_13 ; "oscar"
		call	purple_debug_info
		movzx	eax, word ptr [ebx+4]
		test	ax, ax
		jnz	loc_6889E578
		mov	eax, [ebx+14h]
		test	eax, eax
		jz	short loc_6889E4EC ; jumptable 6889E582	default	case
		cmp	word ptr [ebx+18h], 0
		jnz	loc_6889E58C

loc_6889E4EC:				; CODE XREF: sub_6889E454+8Bj
					; sub_6889E454+128j ...
		mov	[esp+15Ch+var_158], offset aUnknownReaso_1 ; jumptable 6889E582	default	case

loc_6889E4F4:				; CODE XREF: sub_6889E454+2D0j
					; sub_6889E454+2F4j
		mov	[esp+15Ch+Str],	offset aPidgin_6 ; "pidgin"
		call	libintl_dgettext
		mov	[esp+15Ch+var_154], eax
		mov	[esp+15Ch+var_158], 2
		mov	[esp+15Ch+Str],	ebp
		call	purple_connection_error_reason

loc_6889E514:				; CODE XREF: sub_6889E454+2C0j
					; sub_6889E454+324j ...
		movzx	eax, word ptr [ebx+4]
		mov	[esp+15Ch+var_154], eax
		mov	[esp+15Ch+var_158], offset aLoginErrorCode ; "Login Error Code 0x%04hx\n"
		mov	[esp+15Ch+Str],	offset aOscar_13 ; "oscar"
		call	purple_debug_info
		mov	eax, [ebx+8]
		test	eax, eax
		jz	loc_6889E870

loc_6889E53B:				; CODE XREF: sub_6889E454+421j
		mov	[esp+15Ch+var_154], eax
		mov	[esp+15Ch+var_158], offset aErrorUrlS ;	"Error URL: %s\n"
		mov	[esp+15Ch+Str],	offset aOscar_13 ; "oscar"
		call	purple_debug_info
		mov	eax, 1

loc_6889E558:				; CODE XREF: sub_6889E454+291j
					; sub_6889E454+45Dj
		mov	edx, [esp+15Ch+var_20]
		xor	edx, ds:__stack_chk_guard
		jnz	loc_6889E8DE
		add	esp, 14Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 4

loc_6889E578:				; CODE XREF: sub_6889E454+80j
		cmp	ax, 1Dh		; switch 30 cases
		ja	loc_6889E4EC	; jumptable 6889E582 default case
		jmp	ds:off_688B3C28[eax*4] ; switch	jump
; ---------------------------------------------------------------------------
		align 4

loc_6889E58C:				; CODE XREF: sub_6889E454+92j
		mov	edx, [ebx+1Ch]
		test	edx, edx
		jz	loc_6889E4EC	; jumptable 6889E582 default case
		mov	edx, [ebx+10h]
		test	edx, edx
		jz	loc_6889E8D4

loc_6889E5A2:				; CODE XREF: sub_6889E454+485j
		mov	[esp+15Ch+var_14C], eax
		mov	[esp+15Ch+var_150], edx
		movzx	eax, word ptr [ebx+0Ch]
		mov	[esp+15Ch+var_154], eax
		mov	[esp+15Ch+var_158], offset aRegStatusHuEma ; "Reg status: %hu\nEmail: %s\nBOSIP: %s\n"
		mov	[esp+15Ch+Str],	offset aOscar_13 ; "oscar"
		call	purple_debug_misc
		mov	[esp+15Ch+var_158], offset aClosingAuthCon ; "Closing auth connection...\n"
		mov	[esp+15Ch+Str],	offset aOscar_13 ; "oscar"
		call	purple_debug_info
		mov	[esp+15Ch+var_154], 0
		mov	[esp+15Ch+var_158], 0
		mov	[esp+15Ch+Str],	edi
		call	flap_connection_schedule_destroy
		mov	edx, [ebx+14h]
		xor	eax, eax
		mov	ecx, 0FFFFFFFFh
		mov	edi, edx
		repne scasb
		not	ecx
		dec	ecx
		xor	edi, edi
		jmp	short loc_6889E613
; ---------------------------------------------------------------------------
		align 4

loc_6889E608:				; CODE XREF: sub_6889E454+1C1j
		cmp	byte ptr [edx+edi], 3Ah
		jz	loc_6889E858
		inc	edi

loc_6889E613:				; CODE XREF: sub_6889E454+1B1j
		cmp	edi, ecx
		jnz	short loc_6889E608

loc_6889E617:				; CODE XREF: sub_6889E454+417j
		mov	[esp+15Ch+var_158], edi
		mov	[esp+15Ch+Str],	edx
		call	g_strndup
		mov	[esp+15Ch+var_130], eax
		mov	[esp+15Ch+var_158], 2
		mov	[esp+15Ch+Str],	esi
		call	flap_connection_new
		mov	edi, eax
		movzx	eax, word ptr [ebx+18h]
		mov	[edi+20h], ax
		mov	[esp+15Ch+var_158], eax
		mov	eax, [ebx+1Ch]
		mov	[esp+15Ch+Str],	eax
		call	g_memdup
		mov	[edi+24h], eax
		mov	eax, [esi+40h]
		test	eax, eax
		jz	loc_6889E820
		mov	[esp+15Ch+var_144], edi
		mov	[esp+15Ch+var_148], offset aBos_oscar_aol_ ; "bos.oscar.aol.com"
		mov	[esp+15Ch+var_14C], offset sub_6889AB9C
		mov	[esp+15Ch+var_150], offset sub_6889ABF8
		mov	eax, [esp+15Ch+var_134]
		mov	[esp+15Ch+var_154], eax
		mov	eax, [esp+15Ch+var_130]
		mov	[esp+15Ch+var_158], eax
		mov	eax, [esp+15Ch+var_138]
		mov	[esp+15Ch+Str],	eax
		call	purple_ssl_connect_with_ssl_cn
		mov	[edi+30h], eax

loc_6889E699:				; CODE XREF: sub_6889E454+3FFj
		mov	eax, [esp+15Ch+var_130]
		mov	[esp+15Ch+Str],	eax
		call	g_free
		mov	eax, [edi+30h]
		test	eax, eax
		jz	loc_6889E87C

loc_6889E6B0:				; CODE XREF: sub_6889E454+42Dj
		mov	[esp+15Ch+var_158], offset aReceivedAuthor ; "Received authorization"
		mov	[esp+15Ch+Str],	offset aPidgin_6 ; "pidgin"
		call	libintl_dgettext
		mov	[esp+15Ch+var_150], 6
		mov	[esp+15Ch+var_154], 3
		mov	[esp+15Ch+var_158], eax
		mov	[esp+15Ch+Str],	ebp
		call	purple_connection_update_progress
		mov	eax, 1
		jmp	loc_6889E558
; ---------------------------------------------------------------------------
		align 4

loc_6889E6EC:				; CODE XREF: sub_6889E454+12Ej
					; DATA XREF: .rdata:off_688B3C28o
		mov	[esp+15Ch+var_158], offset aYourIpAddressH ; jumptable 6889E582	case 29

loc_6889E6F4:				; CODE XREF: sub_6889E454+3C4j
		mov	[esp+15Ch+Str],	offset aPidgin_6 ; "pidgin"
		call	libintl_dgettext
		mov	[esp+15Ch+var_154], eax
		mov	[esp+15Ch+var_158], 10h
		mov	[esp+15Ch+Str],	ebp
		call	purple_connection_error_reason
		jmp	loc_6889E514
; ---------------------------------------------------------------------------
		align 4

loc_6889E71C:				; CODE XREF: sub_6889E454+12Ej
					; DATA XREF: .rdata:off_688B3C28o
		mov	[esp+15Ch+var_158], offset aYourAccountIsC ; jumptable 6889E582	case 17
		jmp	loc_6889E4F4
; ---------------------------------------------------------------------------
		align 4

loc_6889E72C:				; CODE XREF: sub_6889E454+12Ej
					; DATA XREF: .rdata:off_688B3C28o
		mov	eax, [esp+15Ch+var_138]	; jumptable 6889E582 case 5
		mov	[esp+15Ch+Str],	eax
		call	purple_account_get_remember_password
		test	eax, eax
		jz	loc_6889E8B8

loc_6889E740:				; CODE XREF: sub_6889E454+478j
		mov	[esp+15Ch+var_158], offset aIncorrectPas_0 ; "Incorrect	password"
		jmp	loc_6889E4F4
; ---------------------------------------------------------------------------
		align 10h

loc_6889E750:				; CODE XREF: sub_6889E454+12Ej
					; DATA XREF: .rdata:off_688B3C28o
		mov	[esp+15Ch+var_158], offset aTheAolInstantM ; jumptable 6889E582	cases 2,20
		mov	[esp+15Ch+Str],	offset aPidgin_6 ; "pidgin"
		call	libintl_dgettext
		mov	[esp+15Ch+var_154], eax
		mov	[esp+15Ch+var_158], 0
		mov	[esp+15Ch+Str],	ebp
		call	purple_connection_error_reason
		jmp	loc_6889E514
; ---------------------------------------------------------------------------
		align 10h

loc_6889E780:				; CODE XREF: sub_6889E454+12Ej
					; DATA XREF: .rdata:off_688B3C28o
		mov	[esp+15Ch+var_158], offset aUsernameDoesNo ; jumptable 6889E582	case 1
		mov	[esp+15Ch+Str],	offset aPidgin_6 ; "pidgin"
		call	libintl_dgettext
		mov	[esp+15Ch+var_154], eax
		mov	[esp+15Ch+var_158], 1
		mov	[esp+15Ch+Str],	ebp
		call	purple_connection_error_reason
		jmp	loc_6889E514
; ---------------------------------------------------------------------------
		align 10h

loc_6889E7B0:				; CODE XREF: sub_6889E454+12Ej
					; DATA XREF: .rdata:off_688B3C28o
		mov	[esp+15Ch+var_158], offset aHttpPidgin_im ; jumptable 6889E582 case 28
		mov	[esp+15Ch+Str],	offset aWebsite	; "website"
		call	oscar_get_ui_info_string
		mov	esi, eax
		mov	[esp+15Ch+var_158], offset aTheClientVersi ; "The client version you are using is too"...
		mov	[esp+15Ch+Str],	offset aPidgin_6 ; "pidgin"
		call	libintl_dgettext
		mov	[esp+15Ch+var_150], esi
		mov	[esp+15Ch+var_154], eax
		mov	[esp+15Ch+var_158], 100h
		lea	esi, [esp+15Ch+var_120]
		mov	[esp+15Ch+Str],	esi
		call	g_snprintf
		mov	[esp+15Ch+var_154], esi
		mov	[esp+15Ch+var_158], 10h
		mov	[esp+15Ch+Str],	ebp
		call	purple_connection_error_reason
		jmp	loc_6889E514
; ---------------------------------------------------------------------------
		align 10h

loc_6889E810:				; CODE XREF: sub_6889E454+12Ej
					; DATA XREF: .rdata:off_688B3C28o
		mov	[esp+15Ch+var_158], offset aYourUsernameHa ; jumptable 6889E582	case 24
		jmp	loc_6889E6F4
; ---------------------------------------------------------------------------
		align 10h

loc_6889E820:				; CODE XREF: sub_6889E454+204j
		mov	[esp+15Ch+var_148], edi
		mov	[esp+15Ch+var_14C], offset sub_6889AB20
		mov	eax, [esp+15Ch+var_134]
		mov	[esp+15Ch+var_150], eax
		mov	eax, [esp+15Ch+var_130]
		mov	[esp+15Ch+var_154], eax
		mov	eax, [esp+15Ch+var_138]
		mov	[esp+15Ch+var_158], eax
		mov	[esp+15Ch+Str],	0
		call	purple_proxy_connect
		mov	[edi+1Ch], eax
		jmp	loc_6889E699
; ---------------------------------------------------------------------------

loc_6889E858:				; CODE XREF: sub_6889E454+1B8j
		lea	eax, [edx+edi+1]
		mov	[esp+15Ch+Str],	eax ; Str
		call	atoi
		mov	[esp+15Ch+var_134], eax
		mov	edx, [ebx+14h]
		jmp	loc_6889E617
; ---------------------------------------------------------------------------

loc_6889E870:				; CODE XREF: sub_6889E454+E1j
		mov	eax, offset byte_688B2167
		jmp	loc_6889E53B
; ---------------------------------------------------------------------------
		align 4

loc_6889E87C:				; CODE XREF: sub_6889E454+256j
		mov	eax, [edi+1Ch]
		test	eax, eax
		jnz	loc_6889E6B0
		mov	[esp+15Ch+var_158], offset aUnableToConn_4 ; "Unable to	connect"
		mov	[esp+15Ch+Str],	offset aPidgin_6 ; "pidgin"
		call	libintl_dgettext
		mov	[esp+15Ch+var_154], eax
		mov	[esp+15Ch+var_158], 0
		mov	[esp+15Ch+Str],	ebp
		call	purple_connection_error_reason
		xor	eax, eax
		jmp	loc_6889E558
; ---------------------------------------------------------------------------
		align 4

loc_6889E8B8:				; CODE XREF: sub_6889E454+2E6j
		mov	[esp+15Ch+var_158], 0
		mov	eax, [esp+15Ch+var_138]
		mov	[esp+15Ch+Str],	eax
		call	purple_account_set_password
		jmp	loc_6889E740
; ---------------------------------------------------------------------------
		align 4

loc_6889E8D4:				; CODE XREF: sub_6889E454+148j
		mov	edx, offset aNull_2 ; "null"
		jmp	loc_6889E5A2
; ---------------------------------------------------------------------------

loc_6889E8DE:				; CODE XREF: sub_6889E454+111j
		call	__stack_chk_fail
sub_6889E454	endp

; ---------------------------------------------------------------------------
		align 4

; =============== S U B	R O U T	I N E =======================================


sub_6889E8E4	proc near		; DATA XREF: oscar_login+144o

var_7C		= dword	ptr -7Ch
var_78		= dword	ptr -78h
var_74		= dword	ptr -74h
var_70		= dword	ptr -70h
var_6C		= dword	ptr -6Ch
var_68		= dword	ptr -68h
var_64		= dword	ptr -64h
var_60		= dword	ptr -60h
var_5C		= dword	ptr -5Ch
var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
arg_0		= dword	ptr  4
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h
arg_18		= dword	ptr  1Ch

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 6Ch
		mov	eax, ds:__stack_chk_guard
		mov	[esp+7Ch+var_20], eax
		xor	eax, eax
		mov	eax, [esp+7Ch+arg_0]
		mov	edi, [eax+68h]
		mov	[esp+7Ch+var_7C], edi
		call	purple_connection_get_account
		mov	ecx, [esp+7Ch+arg_C]
		mov	ebp, [esp+7Ch+arg_10]
		mov	esi, [esp+7Ch+arg_14]
		mov	ebx, [esp+7Ch+arg_18]
		test	eax, eax
		jz	short loc_6889E948
		test	ecx, ecx
		jz	short loc_6889E948
		mov	[esp+7Ch+var_7C], eax
		mov	[esp+7Ch+var_44], eax
		mov	[esp+7Ch+var_48], ecx
		call	purple_account_get_check_mail
		test	eax, eax
		mov	edx, [esp+7Ch+var_44]
		mov	ecx, [esp+7Ch+var_48]
		jnz	short loc_6889E990

loc_6889E948:				; CODE XREF: sub_6889E8E4+42j
					; sub_6889E8E4+46j ...
		test	esi, esi
		jz	short loc_6889E970
		test	ebx, ebx
		jz	loc_6889EA4C

loc_6889E954:				; CODE XREF: sub_6889E8E4+16Dj
		mov	[esp+7Ch+var_70], ebx
		mov	[esp+7Ch+var_74], esi
		mov	[esp+7Ch+var_78], offset aGotAnAlertSS ; "Got an alert '%s' %s\n"
		mov	[esp+7Ch+var_7C], offset aOscar_13 ; "oscar"
		call	purple_debug_misc

loc_6889E970:				; CODE XREF: sub_6889E8E4+66j
		mov	eax, 1
		mov	edx, [esp+7Ch+var_20]
		xor	edx, ds:__stack_chk_guard
		jnz	loc_6889EA64
		add	esp, 6Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6889E990:				; CODE XREF: sub_6889E8E4+62j
		cmp	byte ptr [ecx+0Eh], 0
		jz	short loc_6889E948
		test	ebp, ebp
		jz	short loc_6889E948
		mov	ebp, [ecx+10h]
		test	ebp, ebp
		jz	loc_6889EA56
		mov	[esp+7Ch+var_40], offset byte_688B3CA0

loc_6889E9AD:				; CODE XREF: sub_6889E8E4+17Bj
		mov	[esp+7Ch+var_7C], edx
		mov	[esp+7Ch+var_48], ecx
		call	purple_account_get_username
		mov	[esp+7Ch+var_70], ebp
		mov	edx, [esp+7Ch+var_40]
		mov	[esp+7Ch+var_74], edx
		mov	[esp+7Ch+var_78], eax
		mov	[esp+7Ch+var_7C], offset aSSS_1	; "%s%s%s"
		call	g_strdup_printf
		mov	ebp, eax
		mov	[esp+7Ch+var_2C], 0
		mov	[esp+7Ch+var_30], eax
		mov	[esp+7Ch+var_24], 0
		mov	ecx, [esp+7Ch+var_48]
		mov	eax, [ecx+8]
		mov	[esp+7Ch+var_28], eax
		mov	[esp+7Ch+var_5C], 0
		mov	[esp+7Ch+var_60], 0
		lea	eax, [esp+7Ch+var_28]
		mov	[esp+7Ch+var_64], eax
		lea	eax, [esp+7Ch+var_30]
		mov	[esp+7Ch+var_68], eax
		mov	[esp+7Ch+var_6C], 0
		mov	[esp+7Ch+var_70], 0
		mov	[esp+7Ch+var_74], 0
		movzx	eax, word ptr [ecx+0Ch]
		mov	[esp+7Ch+var_78], eax
		mov	[esp+7Ch+var_7C], edi
		call	purple_notify_emails
		mov	[esp+7Ch+var_7C], ebp
		call	g_free
		jmp	loc_6889E948
; ---------------------------------------------------------------------------
		align 4

loc_6889EA4C:				; CODE XREF: sub_6889E8E4+6Aj
		mov	ebx, offset byte_688B2167
		jmp	loc_6889E954
; ---------------------------------------------------------------------------

loc_6889EA56:				; CODE XREF: sub_6889E8E4+BBj
		mov	ebp, offset byte_688B2167
		mov	[esp+7Ch+var_40], ebp
		jmp	loc_6889E9AD
; ---------------------------------------------------------------------------

loc_6889EA64:				; CODE XREF: sub_6889E8E4+9Bj
		call	__stack_chk_fail
sub_6889E8E4	endp

; ---------------------------------------------------------------------------
		align 4

; =============== S U B	R O U T	I N E =======================================


sub_6889EA6C	proc near		; DATA XREF: oscar_login+11Co
					; oscar_login+20Co ...

var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_10		= dword	ptr -10h
arg_C		= word ptr  10h

		push	ebx
		sub	esp, 28h
		mov	eax, ds:__stack_chk_guard
		mov	[esp+2Ch+var_10], eax
		xor	eax, eax
		movzx	ebx, [esp+2Ch+arg_C]
		mov	[esp+2Ch+var_2C], ebx
		call	oscar_get_msgerr_reason
		mov	[esp+2Ch+var_20], eax
		mov	[esp+2Ch+var_24], ebx
		mov	[esp+2Ch+var_28], offset aSnacThrewError ; "snac threw error (reason 0x%04hx: %s)\n"
		mov	[esp+2Ch+var_2C], offset aOscar_13 ; "oscar"
		call	purple_debug_error
		mov	eax, 1
		mov	edx, [esp+2Ch+var_10]
		xor	edx, ds:__stack_chk_guard
		jnz	short loc_6889EABA
		add	esp, 28h
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_6889EABA:				; CODE XREF: sub_6889EA6C+47j
		call	__stack_chk_fail
sub_6889EA6C	endp

; ---------------------------------------------------------------------------
		align 10h

loc_6889EAC0:				; DATA XREF: oscar_login+7Co
		push	edi
		push	esi
		push	ebx
		sub	esp, 20h
		mov	esi, [esp+30h]
		mov	ebx, [esp+34h]
		mov	eax, ds:__stack_chk_guard
		mov	[esp+1Ch], eax
		xor	eax, eax
		movzx	eax, word ptr [ebx+5Ch]
		mov	[esp+8], eax
		mov	dword ptr [esp+4], offset aFlapConnection ; "FLAP connection of	type 0x%04hx is	now "...
		mov	dword ptr [esp], offset	aOscar_13 ; "oscar"
		call	purple_debug_info
		mov	eax, [ebx+5Ch]
		cmp	ax, 2
		jz	short loc_6889EB68
		cmp	ax, 7
		jz	loc_6889EC24
		cmp	ax, 0Eh
		jz	loc_6889ECC0
		cmp	ax, 0Dh
		jz	loc_6889ED10
		cmp	ax, 18h
		jz	loc_6889ED30
		cmp	ax, 10h
		jz	short loc_6889EB48

loc_6889EB2C:				; CODE XREF: .text:6889EB65j
					; .text:6889EC1Dj ...
		mov	eax, 1
		mov	edx, [esp+1Ch]
		xor	edx, ds:__stack_chk_guard
		jnz	loc_6889EE5A
		add	esp, 20h
		pop	ebx
		pop	esi
		pop	edi
		retn
; ---------------------------------------------------------------------------

loc_6889EB48:				; CODE XREF: .text:6889EB2Aj
		mov	edi, [esi+68h]
		mov	[esp+4], ebx
		mov	[esp], esi
		call	aim_srv_clientready
		mov	dword ptr [esi+4], 0
		mov	eax, edi
		call	sub_6889D620
		jmp	short loc_6889EB2C
; ---------------------------------------------------------------------------
		align 4

loc_6889EB68:				; CODE XREF: .text:6889EAFCj
		mov	edi, [esi+68h]
		mov	[esp+4], ebx
		mov	[esp], esi
		call	aim_srv_reqpersonalinfo
		mov	dword ptr [esp+4], offset aSsiRequestingR ; "ssi: requesting rights and	list\n"
		mov	dword ptr [esp], offset	aOscar_13 ; "oscar"
		call	purple_debug_info
		mov	[esp], esi
		call	aim_ssi_reqrights
		mov	[esp], esi
		call	aim_ssi_reqdata
		mov	eax, [esi+48h]
		test	eax, eax
		jz	short loc_6889EBAA
		mov	[esp], eax
		call	purple_timeout_remove

loc_6889EBAA:				; CODE XREF: .text:6889EBA0j
		mov	[esp+8], esi
		mov	dword ptr [esp+4], offset sub_6889CFF4
		mov	dword ptr [esp], 1Eh
		call	purple_timeout_add_seconds
		mov	[esi+48h], eax
		mov	[esp], esi
		call	aim_locate_reqrights
		mov	[esp+4], ebx
		mov	[esp], esi
		call	aim_buddylist_reqrights
		mov	[esp], esi
		call	aim_im_reqparams
		mov	[esp+4], ebx
		mov	[esp], esi
		call	aim_bos_reqrights
		mov	dword ptr [esp+4], offset aFinalizingConn ; "Finalizing	connection"
		mov	dword ptr [esp], offset	aPidgin_6 ; "pidgin"
		call	libintl_dgettext
		mov	dword ptr [esp+0Ch], 6
		mov	dword ptr [esp+8], 5
		mov	[esp+4], eax
		mov	[esp], edi
		call	purple_connection_update_progress
		jmp	loc_6889EB2C
; ---------------------------------------------------------------------------
		align 4

loc_6889EC24:				; CODE XREF: .text:6889EB02j
		mov	[esp+4], ebx
		mov	[esp], esi
		call	aim_srv_clientready
		mov	dword ptr [esp+4], offset aConnectedToAdm ; "connected to admin\n"
		mov	dword ptr [esp], offset	aOscar_13 ; "oscar"
		call	purple_debug_info
		mov	eax, [esi+28h]
		test	eax, eax
		jnz	loc_6889EDFC

loc_6889EC4F:				; CODE XREF: .text:6889EE55j
		mov	eax, [esi+20h]
		test	eax, eax
		jnz	loc_6889EDB4

loc_6889EC5A:				; CODE XREF: .text:6889EDF4j
		mov	eax, [esi+10h]
		test	eax, eax
		jnz	loc_6889ED88

loc_6889EC65:				; CODE XREF: .text:6889EDAFj
		mov	edi, [esi+14h]
		test	edi, edi
		jnz	loc_6889ED54

loc_6889EC70:				; CODE XREF: .text:6889ED83j
		mov	ecx, [esi+18h]
		test	ecx, ecx
		jz	loc_6889EB2C
		mov	dword ptr [esp+4], offset aSettingEmailAd ; "setting email address\n"
		mov	dword ptr [esp], offset	aOscar_13 ; "oscar"
		call	purple_debug_info
		mov	eax, [esi+1Ch]
		mov	[esp+8], eax
		mov	[esp+4], ebx
		mov	[esp], esi
		call	aim_admin_setemail
		mov	eax, [esi+1Ch]
		mov	[esp], eax
		call	g_free
		mov	dword ptr [esi+1Ch], 0
		mov	dword ptr [esi+18h], 0
		jmp	loc_6889EB2C
; ---------------------------------------------------------------------------

loc_6889ECC0:				; CODE XREF: .text:6889EB0Cj
		mov	edi, [esi+68h]
		mov	[esp+4], ebx
		mov	[esp], esi
		call	aim_srv_clientready
		mov	edx, ebx
		mov	eax, edi
		call	sub_68898FDC
		mov	ebx, eax
		test	eax, eax
		jz	loc_6889EB2C
		mov	eax, dword_688AD1F8
		mov	[ebx+10h], eax
		mov	edx, [ebx+4]
		lea	ecx, [eax+1]
		mov	dword_688AD1F8,	ecx
		mov	[esp+8], edx
		mov	[esp+4], eax
		mov	[esp], edi
		call	serv_got_joined_chat
		mov	[ebx+18h], eax
		jmp	loc_6889EB2C
; ---------------------------------------------------------------------------
		align 10h

loc_6889ED10:				; CODE XREF: .text:6889EB16j
		mov	[esp+4], ebx
		mov	[esp], esi
		call	aim_srv_clientready
		mov	[esp+4], ebx
		mov	[esp], esi
		call	aim_chatnav_reqrights
		jmp	loc_6889EB2C
; ---------------------------------------------------------------------------
		align 10h

loc_6889ED30:				; CODE XREF: .text:6889EB20j
		mov	[esp], esi
		call	aim_email_sendcookies
		mov	[esp], esi
		call	aim_email_activate
		mov	[esp+4], ebx
		mov	[esp], esi
		call	aim_srv_clientready
		jmp	loc_6889EB2C
; ---------------------------------------------------------------------------
		align 4

loc_6889ED54:				; CODE XREF: .text:6889EC6Aj
		mov	dword ptr [esp+4], offset aRequestingEmai ; "requesting	email address\n"
		mov	dword ptr [esp], offset	aOscar_13 ; "oscar"
		call	purple_debug_info
		mov	dword ptr [esp+8], 11h
		mov	[esp+4], ebx
		mov	[esp], esi
		call	aim_admin_getinfo
		mov	dword ptr [esi+14h], 0
		jmp	loc_6889EC70
; ---------------------------------------------------------------------------

loc_6889ED88:				; CODE XREF: .text:6889EC5Fj
		mov	dword ptr [esp+4], offset aConfirmingAcco ; "confirming	account\n"
		mov	dword ptr [esp], offset	aOscar_13 ; "oscar"
		call	purple_debug_info
		mov	[esp+4], ebx
		mov	[esp], esi
		call	aim_admin_reqconfirm
		mov	dword ptr [esi+10h], 0
		jmp	loc_6889EC65
; ---------------------------------------------------------------------------

loc_6889EDB4:				; CODE XREF: .text:6889EC54j
		mov	dword ptr [esp+4], offset aFormattingUser ; "formatting	username\n"
		mov	dword ptr [esp], offset	aOscar_13 ; "oscar"
		call	purple_debug_info
		mov	eax, [esi+24h]
		mov	[esp+8], eax
		mov	[esp+4], ebx
		mov	[esp], esi
		call	aim_admin_setnick
		mov	eax, [esi+24h]
		mov	[esp], eax
		call	g_free
		mov	dword ptr [esi+24h], 0
		mov	dword ptr [esi+20h], 0
		jmp	loc_6889EC5A
; ---------------------------------------------------------------------------
		align 4

loc_6889EDFC:				; CODE XREF: .text:6889EC49j
		mov	dword ptr [esp+4], offset aChangingPasswo ; "changing password\n"
		mov	dword ptr [esp], offset	aOscar_13 ; "oscar"
		call	purple_debug_info
		mov	eax, [esi+2Ch]
		mov	[esp+0Ch], eax
		mov	eax, [esi+30h]
		mov	[esp+8], eax
		mov	[esp+4], ebx
		mov	[esp], esi
		call	aim_admin_changepasswd
		mov	eax, [esi+2Ch]
		mov	[esp], eax
		call	g_free
		mov	dword ptr [esi+2Ch], 0
		mov	eax, [esi+30h]
		mov	[esp], eax
		call	g_free
		mov	dword ptr [esi+30h], 0
		mov	dword ptr [esi+28h], 0
		jmp	loc_6889EC4F
; ---------------------------------------------------------------------------

loc_6889EE5A:				; CODE XREF: .text:6889EB3Bj
		call	__stack_chk_fail
; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6889EE60	proc near		; CODE XREF: sub_6889F200+98p

var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_10		= dword	ptr -10h

		sub	esp, 2Ch
		mov	edx, ds:__stack_chk_guard
		mov	[esp+2Ch+var_10], edx
		xor	edx, edx
		test	al, 20h
		jnz	loc_6889EEF8
		test	al, 2
		jnz	loc_6889EF68
		test	al, 4
		jnz	loc_6889EF28
		test	al, 10h
		jnz	loc_6889EF88
		test	al, 1
		jnz	loc_6889EFAC
		test	eax, 10000h
		jnz	loc_6889EFD0
		test	ah, 1
		jnz	loc_6889EF48
		test	ah, 30h
		jnz	loc_6889F018
		test	ah, 40h
		jnz	loc_6889F03C
		test	ah, 50h
		jnz	loc_6889F060
		test	ah, 60h
		jnz	loc_6889F084
		test	eax, 2001h
		jnz	loc_6889EFF4
		mov	[esp+2Ch+var_28], offset aOnline ; "Online"
		mov	[esp+2Ch+var_2C], offset aPidgin_6 ; "pidgin"
		call	libintl_dgettext
		mov	[esp+2Ch+var_2C], eax
		call	g_strdup
		jmp	short loc_6889EF14
; ---------------------------------------------------------------------------

loc_6889EEF8:				; CODE XREF: sub_6889EE60+11j
		mov	[esp+2Ch+var_28], offset aFreeForChat ;	"Free For Chat"
		mov	[esp+2Ch+var_2C], offset aPidgin_6 ; "pidgin"
		call	libintl_dgettext
		mov	[esp+2Ch+var_2C], eax
		call	g_strdup

loc_6889EF14:				; CODE XREF: sub_6889EE60+96j
					; sub_6889EE60+E4j ...
		mov	edx, [esp+2Ch+var_10]
		xor	edx, ds:__stack_chk_guard
		jnz	loc_6889F0A5
		add	esp, 2Ch
		retn
; ---------------------------------------------------------------------------

loc_6889EF28:				; CODE XREF: sub_6889EE60+21j
		mov	[esp+2Ch+var_28], offset aNotAvailable ; "Not Available"
		mov	[esp+2Ch+var_2C], offset aPidgin_6 ; "pidgin"
		call	libintl_dgettext
		mov	[esp+2Ch+var_2C], eax
		call	g_strdup
		jmp	short loc_6889EF14
; ---------------------------------------------------------------------------
		align 4

loc_6889EF48:				; CODE XREF: sub_6889EE60+45j
		mov	[esp+2Ch+var_28], offset aInvisible_1 ;	"Invisible"
		mov	[esp+2Ch+var_2C], offset aPidgin_6 ; "pidgin"
		call	libintl_dgettext
		mov	[esp+2Ch+var_2C], eax
		call	g_strdup
		jmp	short loc_6889EF14
; ---------------------------------------------------------------------------
		align 4

loc_6889EF68:				; CODE XREF: sub_6889EE60+19j
		mov	[esp+2Ch+var_28], offset aDoNotDisturb ; "Do Not Disturb"
		mov	[esp+2Ch+var_2C], offset aPidgin_6 ; "pidgin"
		call	libintl_dgettext
		mov	[esp+2Ch+var_2C], eax
		call	g_strdup
		jmp	short loc_6889EF14
; ---------------------------------------------------------------------------
		align 4

loc_6889EF88:				; CODE XREF: sub_6889EE60+29j
		mov	[esp+2Ch+var_28], offset aOccupied_0 ; "Occupied"
		mov	[esp+2Ch+var_2C], offset aPidgin_6 ; "pidgin"
		call	libintl_dgettext
		mov	[esp+2Ch+var_2C], eax
		call	g_strdup
		jmp	loc_6889EF14
; ---------------------------------------------------------------------------
		align 4

loc_6889EFAC:				; CODE XREF: sub_6889EE60+31j
		mov	[esp+2Ch+var_28], offset aAway_0 ; "Away"
		mov	[esp+2Ch+var_2C], offset aPidgin_6 ; "pidgin"
		call	libintl_dgettext
		mov	[esp+2Ch+var_2C], eax
		call	g_strdup
		jmp	loc_6889EF14
; ---------------------------------------------------------------------------
		align 10h

loc_6889EFD0:				; CODE XREF: sub_6889EE60+3Cj
		mov	[esp+2Ch+var_28], offset aWebAware ; "Web Aware"
		mov	[esp+2Ch+var_2C], offset aPidgin_6 ; "pidgin"
		call	libintl_dgettext
		mov	[esp+2Ch+var_2C], eax
		call	g_strdup
		jmp	loc_6889EF14
; ---------------------------------------------------------------------------
		align 4

loc_6889EFF4:				; CODE XREF: sub_6889EE60+74j
		mov	[esp+2Ch+var_28], offset aAtLunch ; "At	lunch"
		mov	[esp+2Ch+var_2C], offset aPidgin_6 ; "pidgin"
		call	libintl_dgettext
		mov	[esp+2Ch+var_2C], eax
		call	g_strdup
		jmp	loc_6889EF14
; ---------------------------------------------------------------------------
		align 4

loc_6889F018:				; CODE XREF: sub_6889EE60+4Ej
		mov	[esp+2Ch+var_28], offset aEvil_0 ; "Evil"
		mov	[esp+2Ch+var_2C], offset aPidgin_6 ; "pidgin"
		call	libintl_dgettext
		mov	[esp+2Ch+var_2C], eax
		call	g_strdup
		jmp	loc_6889EF14
; ---------------------------------------------------------------------------
		align 4

loc_6889F03C:				; CODE XREF: sub_6889EE60+57j
		mov	[esp+2Ch+var_28], offset aDepression_0 ; "Depression"
		mov	[esp+2Ch+var_2C], offset aPidgin_6 ; "pidgin"
		call	libintl_dgettext
		mov	[esp+2Ch+var_2C], eax
		call	g_strdup
		jmp	loc_6889EF14
; ---------------------------------------------------------------------------
		align 10h

loc_6889F060:				; CODE XREF: sub_6889EE60+60j
		mov	[esp+2Ch+var_28], offset aAtHome ; "At home"
		mov	[esp+2Ch+var_2C], offset aPidgin_6 ; "pidgin"
		call	libintl_dgettext
		mov	[esp+2Ch+var_2C], eax
		call	g_strdup
		jmp	loc_6889EF14
; ---------------------------------------------------------------------------
		align 4

loc_6889F084:				; CODE XREF: sub_6889EE60+69j
		mov	[esp+2Ch+var_28], offset aAtWork ; "At work"
		mov	[esp+2Ch+var_2C], offset aPidgin_6 ; "pidgin"
		call	libintl_dgettext
		mov	[esp+2Ch+var_2C], eax
		call	g_strdup
		jmp	loc_6889EF14
; ---------------------------------------------------------------------------

loc_6889F0A5:				; CODE XREF: sub_6889EE60+BEj
		call	__stack_chk_fail
sub_6889EE60	endp

; ---------------------------------------------------------------------------
		align 4

loc_6889F0AC:				; DATA XREF: oscar_blist_node_menu+254o
		push	edi
		push	esi
		push	ebx
		sub	esp, 20h
		mov	ebx, [esp+30h]
		mov	eax, ds:__stack_chk_guard
		mov	[esp+1Ch], eax
		xor	eax, eax
		mov	[esp], ebx
		call	purple_blist_node_get_type
		cmp	eax, 2
		jz	short loc_6889F100
		mov	dword ptr [esp+8], offset aPurple_blist_0 ; "PURPLE_BLIST_NODE_IS_BUDDY(node)"
		mov	dword ptr [esp+4], offset aOscar_get_icqx ; "oscar_get_icqxstatusmsg"
		mov	dword ptr [esp], 0
		call	g_return_if_fail_warning
		mov	eax, [esp+1Ch]
		xor	eax, ds:__stack_chk_guard
		jnz	short loc_6889F169
		add	esp, 20h
		pop	ebx
		pop	esi
		pop	edi
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6889F100:				; CODE XREF: .text:6889F0CCj
		mov	[esp], ebx
		call	purple_buddy_get_name
		mov	esi, eax
		mov	[esp], ebx
		call	purple_buddy_get_account
		mov	ebx, eax
		mov	[esp], eax
		call	purple_account_get_connection
		mov	[esp], eax
		call	purple_connection_get_protocol_data
		mov	edi, eax
		mov	[esp], ebx
		call	purple_account_get_username
		mov	[esp+0Ch], eax
		mov	[esp+8], esi
		mov	dword ptr [esp+4], offset aManualXStatusG ; "Manual X-Status Get From %s to %s:\n"
		mov	dword ptr [esp], offset	aOscar_13 ; "oscar"
		call	purple_debug_info
		mov	eax, [esp+1Ch]
		xor	eax, ds:__stack_chk_guard
		jnz	short loc_6889F169
		mov	[esp+34h], esi
		mov	[esp+30h], edi
		add	esp, 20h
		pop	ebx
		pop	esi
		pop	edi
		jmp	icq_im_xstatus_request
; ---------------------------------------------------------------------------

loc_6889F169:				; CODE XREF: .text:6889F0F4j
					; .text:6889F154j
		call	__stack_chk_fail
; ---------------------------------------------------------------------------
		align 10h

loc_6889F170:				; DATA XREF: oscar_blist_node_menu+208o
		push	esi
		push	ebx
		sub	esp, 24h
		mov	ebx, [esp+30h]
		mov	eax, ds:__stack_chk_guard
		mov	[esp+1Ch], eax
		xor	eax, eax
		mov	[esp], ebx
		call	purple_blist_node_get_type
		cmp	eax, 2
		jz	short loc_6889F1C0
		mov	dword ptr [esp+8], offset aPurple_blist_0 ; "PURPLE_BLIST_NODE_IS_BUDDY(node)"
		mov	dword ptr [esp+4], offset aOscar_get_aim_ ; "oscar_get_aim_info_cb"
		mov	dword ptr [esp], 0
		call	g_return_if_fail_warning

loc_6889F1AD:				; CODE XREF: .text:6889F1F8j
		mov	eax, [esp+1Ch]
		xor	eax, ds:__stack_chk_guard
		jnz	short loc_6889F1FA
		add	esp, 24h
		pop	ebx
		pop	esi
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6889F1C0:				; CODE XREF: .text:6889F18Fj
		mov	[esp], ebx
		call	purple_buddy_get_account
		mov	[esp], eax
		call	purple_account_get_connection
		mov	esi, eax
		mov	[esp], ebx
		call	purple_buddy_get_name
		mov	ebx, eax
		mov	[esp], esi
		call	purple_connection_get_protocol_data
		mov	dword ptr [esp+8], 3
		mov	[esp+4], ebx
		mov	[esp], eax
		call	aim_locate_getinfoshort
		jmp	short loc_6889F1AD
; ---------------------------------------------------------------------------

loc_6889F1FA:				; CODE XREF: .text:6889F1B7j
		call	__stack_chk_fail
; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_6889F200(int,	int, int, int, int, int, void *, int)
sub_6889F200	proc near		; DATA XREF: oscar_login+5F4o

var_5C		= dword	ptr -5Ch
var_58		= dword	ptr -58h
var_54		= dword	ptr -54h
var_50		= dword	ptr -50h
var_4C		= dword	ptr -4Ch
var_30		= dword	ptr -30h
var_20		= dword	ptr -20h
arg_0		= dword	ptr  4
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h
arg_18		= dword	ptr  1Ch
arg_1C		= dword	ptr  20h

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 4Ch
		mov	ecx, [esp+5Ch+arg_0]
		mov	eax, ds:__stack_chk_guard
		mov	[esp+5Ch+var_20], eax
		xor	eax, eax
		mov	eax, [esp+5Ch+arg_C]
		mov	ebx, [esp+5Ch+arg_10]
		mov	edx, [esp+5Ch+arg_14]
		cmp	ax, 2
		jz	loc_6889F388
		cmp	ax, 4
		jz	short loc_6889F250
		mov	eax, 1

loc_6889F237:				; CODE XREF: sub_6889F200+91j
					; sub_6889F200+172j ...
		mov	edx, [esp+5Ch+var_20]
		xor	edx, ds:__stack_chk_guard
		jnz	loc_6889F40E
		add	esp, 4Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6889F250:				; CODE XREF: sub_6889F200+30j
		cmp	dx, 3
		jz	loc_6889F378
		xor	esi, esi
		xor	eax, eax

loc_6889F25E:				; CODE XREF: sub_6889F200+180j
		and	edx, 0FFFFh
		mov	ecx, [ecx+68h]
		cmp	dx, 3
		jz	short loc_6889F294
		cmp	dx, 6
		jz	short loc_6889F294
		mov	[esp+5Ch+var_50], edx
		mov	[esp+5Ch+var_54], ebx
		mov	[esp+5Ch+var_58], offset aReceivedAnUnkn ; "Received an	unknown	client auto-respons"...
		mov	[esp+5Ch+var_5C], offset aOscar_13 ; "oscar"
		call	purple_debug_warning
		xor	eax, eax
		jmp	short loc_6889F237
; ---------------------------------------------------------------------------
		align 4

loc_6889F294:				; CODE XREF: sub_6889F200+6Bj
					; sub_6889F200+71j
		mov	[esp+5Ch+var_30], ecx
		call	sub_6889EE60
		mov	ebp, eax
		mov	[esp+5Ch+var_54], 0
		mov	[esp+5Ch+var_58], offset asc_688B3F07 ;	"\r\n"
		mov	[esp+5Ch+var_5C], esi
		call	g_strsplit
		mov	edi, eax
		call	purple_notify_user_info_new
		mov	esi, eax
		mov	[esp+5Ch+var_58], offset aUin_0	; "UIN"
		mov	[esp+5Ch+var_5C], offset aPidgin_6 ; "pidgin"
		call	libintl_dgettext
		mov	[esp+5Ch+var_54], ebx
		mov	[esp+5Ch+var_58], eax
		mov	[esp+5Ch+var_5C], esi
		call	purple_notify_user_info_add_pair
		mov	[esp+5Ch+var_58], offset aStatus_0 ; "Status"
		mov	[esp+5Ch+var_5C], offset aPidgin_6 ; "pidgin"
		call	libintl_dgettext
		mov	[esp+5Ch+var_54], ebp
		mov	[esp+5Ch+var_58], eax
		mov	[esp+5Ch+var_5C], esi
		call	purple_notify_user_info_add_pair
		mov	[esp+5Ch+var_5C], esi
		call	purple_notify_user_info_add_section_break
		mov	[esp+5Ch+var_58], edi
		mov	[esp+5Ch+var_5C], offset aBr_1 ; "<BR>"
		call	g_strjoinv
		mov	[esp+5Ch+var_54], eax
		mov	[esp+5Ch+var_58], 0
		mov	[esp+5Ch+var_5C], esi
		call	purple_notify_user_info_add_pair
		mov	[esp+5Ch+var_5C], ebp
		call	g_free
		mov	[esp+5Ch+var_5C], edi
		call	g_strfreev
		mov	[esp+5Ch+var_4C], 0
		mov	[esp+5Ch+var_50], 0
		mov	[esp+5Ch+var_54], esi
		mov	[esp+5Ch+var_58], ebx
		mov	ecx, [esp+5Ch+var_30]
		mov	[esp+5Ch+var_5C], ecx
		call	purple_notify_userinfo
		mov	[esp+5Ch+var_5C], esi
		call	purple_notify_user_info_destroy
		xor	eax, eax
		jmp	loc_6889F237
; ---------------------------------------------------------------------------
		align 4

loc_6889F378:				; CODE XREF: sub_6889F200+54j
		mov	eax, [esp+5Ch+arg_18]
		mov	esi, [esp+5Ch+arg_1C]
		jmp	loc_6889F25E
; ---------------------------------------------------------------------------
		align 4

loc_6889F388:				; CODE XREF: sub_6889F200+26j
		mov	eax, [esp+5Ch+arg_18]
		and	edx, 0FFFFh
		cmp	dx, 3
		jz	short loc_6889F3BC
		mov	[esp+5Ch+var_50], edx
		mov	[esp+5Ch+var_54], ebx
		mov	[esp+5Ch+var_58], offset aReceivedAnUn_0 ; "Received an	unknown	rendezvous message "...
		mov	[esp+5Ch+var_5C], offset aOscar_13 ; "oscar"
		call	purple_debug_warning
		xor	eax, eax
		jmp	loc_6889F237
; ---------------------------------------------------------------------------
		align 4

loc_6889F3BC:				; CODE XREF: sub_6889F200+196j
		mov	[esp+5Ch+var_54], eax ;	void *
		mov	[esp+5Ch+var_58], ebx ;	int
		mov	[esp+5Ch+var_5C], ecx ;	int
		call	peer_connection_find_by_cookie
		test	eax, eax
		jz	short loc_6889F3EF
		mov	[esp+5Ch+var_54], 0
		mov	[esp+5Ch+var_58], 3
		mov	[esp+5Ch+var_5C], eax
		call	peer_connection_destroy
		xor	eax, eax
		jmp	loc_6889F237
; ---------------------------------------------------------------------------

loc_6889F3EF:				; CODE XREF: sub_6889F200+1CEj
		mov	[esp+5Ch+var_54], ebx
		mov	[esp+5Ch+var_58], offset aReceivedARende ; "Received a rendezvous cancel message fo"...
		mov	[esp+5Ch+var_5C], offset aOscar_13 ; "oscar"
		call	purple_debug_info
		xor	eax, eax
		jmp	loc_6889F237
; ---------------------------------------------------------------------------

loc_6889F40E:				; CODE XREF: sub_6889F200+41j
		call	__stack_chk_fail
sub_6889F200	endp

; ---------------------------------------------------------------------------
		align 4
; Exported entry 240. oscar_get_locale_charset

; =============== S U B	R O U T	I N E =======================================


		public oscar_get_locale_charset
oscar_get_locale_charset proc near	; CODE XREF: oscar_decode_im+62p
					; oscar_decode_im:loc_68883CE8p ...

var_2C		= dword	ptr -2Ch
var_10		= dword	ptr -10h

		sub	esp, 2Ch
		mov	eax, ds:__stack_chk_guard
		mov	[esp+2Ch+var_10], eax
		xor	eax, eax
		mov	eax, ds:dword_688C1020
		test	eax, eax
		jz	short loc_6889F43C

loc_6889F42B:				; CODE XREF: oscar_get_locale_charset+39j
		mov	edx, [esp+2Ch+var_10]
		xor	edx, ds:__stack_chk_guard
		jnz	short loc_6889F44F
		add	esp, 2Ch
		retn
; ---------------------------------------------------------------------------
		align 4

loc_6889F43C:				; CODE XREF: oscar_get_locale_charset+15j
		mov	[esp+2Ch+var_2C], offset dword_688C1020
		call	g_get_charset
		mov	eax, ds:dword_688C1020
		jmp	short loc_6889F42B
; ---------------------------------------------------------------------------

loc_6889F44F:				; CODE XREF: oscar_get_locale_charset+21j
		call	__stack_chk_fail
oscar_get_locale_charset endp


; =============== S U B	R O U T	I N E =======================================


sub_6889F454	proc near		; DATA XREF: oscar_login+5A4o

Time		= dword	ptr -0BCh
EndPtr		= dword	ptr -0B8h
Radix		= dword	ptr -0B4h
var_B0		= dword	ptr -0B0h
var_AC		= dword	ptr -0ACh
var_A8		= dword	ptr -0A8h
var_A4		= dword	ptr -0A4h
var_A0		= dword	ptr -0A0h
var_9C		= dword	ptr -9Ch
var_98		= dword	ptr -98h
var_94		= dword	ptr -94h
var_90		= dword	ptr -90h
var_8C		= dword	ptr -8Ch
var_88		= dword	ptr -88h
var_74		= dword	ptr -74h
var_70		= dword	ptr -70h
var_6C		= dword	ptr -6Ch
var_68		= dword	ptr -68h
var_64		= dword	ptr -64h
var_60		= dword	ptr -60h
var_5C		= dword	ptr -5Ch
var_58		= dword	ptr -58h
var_54		= dword	ptr -54h
var_50		= dword	ptr -50h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_3C		= byte ptr -3Ch
var_38		= byte ptr -38h
var_34		= dword	ptr -34h
var_30		= byte ptr -30h
var_2C		= byte ptr -2Ch
var_20		= dword	ptr -20h
arg_0		= dword	ptr  4
arg_C		= word ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 0ACh
		mov	edx, [esp+0BCh+arg_0]
		mov	[esp+0BCh+var_6C], edx
		mov	ecx, ds:__stack_chk_guard
		mov	[esp+0BCh+var_20], ecx
		xor	ecx, ecx
		mov	ebx, [esp+0BCh+arg_10]
		movzx	eax, [esp+0BCh+arg_C]
		cmp	eax, 2
		jz	loc_6889F6F8
		cmp	eax, 4
		jz	loc_6889F6B4
		cmp	eax, 1
		jz	short loc_6889F4D8
		mov	[esp+0BCh+Radix], eax
		mov	[esp+0BCh+EndPtr], offset aIcbmReceivedOn ; "ICBM received on unsupported channel (c"...
		mov	[esp+0BCh+Time], offset	aOscar_13 ; "oscar"
		call	purple_debug_warning
		xor	eax, eax

loc_6889F4B8:				; CODE XREF: sub_6889F454+25Aj
					; sub_6889F454+29Cj ...
		mov	edx, [esp+0BCh+var_20]
		xor	edx, ds:__stack_chk_guard
		jnz	loc_688A0600
		add	esp, 0ACh
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 4

loc_6889F4D8:				; CODE XREF: sub_6889F454+48j
		mov	esi, [esp+0BCh+arg_14]
		mov	edx, [edx+68h]
		mov	[esp+0BCh+var_64], edx
		mov	[esp+0BCh+Time], edx
		call	purple_connection_get_account
		mov	edi, eax
		mov	eax, [ebx]
		mov	[esp+0BCh+Radix], eax
		mov	[esp+0BCh+EndPtr], offset aReceivedImFrom ; "Received IM from %s\n"
		mov	[esp+0BCh+Time], offset	aOscar_13 ; "oscar"
		call	purple_debug_misc
		mov	eax, [ebx]
		mov	[esp+0BCh+EndPtr], eax
		mov	[esp+0BCh+Time], edi
		call	purple_normalize
		mov	[esp+0BCh+EndPtr], eax
		mov	edx, [esp+0BCh+var_6C]
		mov	eax, [edx+38h]
		mov	[esp+0BCh+Time], eax
		call	g_hash_table_lookup
		mov	ebp, eax
		test	eax, eax
		jz	loc_688A04CF

loc_6889F535:				; CODE XREF: sub_6889F454+10B6j
		mov	eax, [esi]
		mov	ecx, eax
		and	ecx, 1
		neg	ecx
		and	ecx, 8
		mov	[esp+0BCh+var_68], ecx
		xor	edx, edx
		test	ah, 10h
		setnz	dl
		mov	[ebp+0], edx
		test	al, 20h
		jz	short loc_6889F5A8
		mov	eax, [esi+10h]
		test	eax, eax
		jz	short loc_6889F5A8
		cmp	word ptr [esi+14h], 0
		jz	short loc_6889F5A8
		mov	eax, [esi+0Ch]
		test	eax, eax
		jz	short loc_6889F5A8
		mov	eax, [ebx]
		mov	[esp+0BCh+Radix], eax
		mov	[esp+0BCh+EndPtr], offset aSHasAnIcon ;	"%s has	an icon\n"
		mov	[esp+0BCh+Time], offset	aOscar_13 ; "oscar"
		call	purple_debug_misc
		mov	eax, [esi+10h]
		cmp	eax, [ebp+18h]
		movzx	edx, word ptr [esi+14h]
		jz	loc_688A056D
		mov	ecx, [esi+0Ch]

loc_6889F596:				; CODE XREF: sub_6889F454+111Fj
					; sub_6889F454+1128j
		mov	dword ptr [ebp+24h], 1
		mov	[ebp+18h], eax
		mov	[ebp+1Ch], edx
		mov	[ebp+20h], ecx
		xchg	ax, ax

loc_6889F5A8:				; CODE XREF: sub_6889F454+FEj
					; sub_6889F454+105j ...
		mov	[esp+0BCh+Time], edi
		call	purple_buddy_icons_find_account_icon
		mov	edx, eax
		test	eax, eax
		jz	short loc_6889F5D0
		test	byte ptr [esi],	10h
		jz	short loc_6889F5D0
		mov	eax, [ebp+28h]
		test	eax, eax
		jnz	short loc_6889F5D0
		mov	ebp, [ebp+14h]
		test	ebp, ebp
		jnz	loc_6889FC6A
		lea	esi, [esi+0]

loc_6889F5D0:				; CODE XREF: sub_6889F454+160j
					; sub_6889F454+165j ...
		mov	[esp+0BCh+Time], edx
		call	purple_imgstore_unref
		mov	eax, [esi+8]
		mov	[esp+0BCh+Time], eax
		call	g_strdup
		mov	edi, eax
		lea	ebp, [esp+0BCh+var_3C]
		mov	[esp+0BCh+var_AC], ebp
		lea	eax, [esp+0BCh+var_40]
		mov	[esp+0BCh+var_B0], eax
		lea	edx, [esp+0BCh+var_44]
		mov	[esp+0BCh+Radix], edx
		mov	[esp+0BCh+EndPtr], edi
		mov	[esp+0BCh+Time], offset	aBody ;	"body"
		call	purple_markup_find_tag
		test	eax, eax
		jnz	loc_6889F854

loc_6889F618:				; CODE XREF: sub_6889F454+559j
		mov	[esp+0BCh+var_AC], ebp
		lea	eax, [esp+0BCh+var_40]
		mov	[esp+0BCh+var_B0], eax
		lea	edx, [esp+0BCh+var_44]
		mov	[esp+0BCh+Radix], edx
		mov	[esp+0BCh+EndPtr], edi
		mov	[esp+0BCh+Time], offset	aHtml ;	"html"
		call	purple_markup_find_tag
		test	eax, eax
		jnz	loc_6889F810

loc_6889F644:				; CODE XREF: sub_6889F454+3F9j
		mov	[esp+0BCh+var_AC], ebp
		lea	ecx, [esp+0BCh+var_40]
		mov	[esp+0BCh+var_B0], ecx
		lea	eax, [esp+0BCh+var_44]
		mov	[esp+0BCh+Radix], eax
		mov	[esp+0BCh+EndPtr], edi
		mov	[esp+0BCh+Time], offset	aHtml_0	; "/html"
		call	purple_markup_find_tag
		test	eax, eax
		jnz	loc_6889F7D4

loc_6889F670:				; CODE XREF: sub_6889F454+3B7j
		test	dword ptr [esi], 800h
		jz	loc_6889F7C0
		mov	eax, [esi+4]

loc_6889F67F:				; CODE XREF: sub_6889F454+378j
		mov	[esp+0BCh+var_AC], eax
		mov	edx, [esp+0BCh+var_68]
		mov	[esp+0BCh+var_B0], edx
		mov	[esp+0BCh+Radix], edi
		mov	eax, [ebx]
		mov	[esp+0BCh+EndPtr], eax
		mov	ecx, [esp+0BCh+var_64]
		mov	[esp+0BCh+Time], ecx
		call	serv_got_im
		mov	[esp+0BCh+Time], edi
		call	g_free
		mov	eax, 1
		jmp	loc_6889F4B8
; ---------------------------------------------------------------------------
		align 4

loc_6889F6B4:				; CODE XREF: sub_6889F454+3Fj
		mov	ebx, [esp+0BCh+arg_14]
		mov	edx, [esp+0BCh+var_6C]
		mov	edx, [edx+68h]
		mov	[esp+0BCh+var_58], edx
		mov	[esp+0BCh+Time], edx
		call	purple_connection_get_account
		mov	[esp+0BCh+var_64], eax
		movzx	eax, byte ptr [ebx+4]
		test	al, al
		jz	short loc_6889F6EB
		mov	ecx, [ebx+8]
		test	ecx, ecx
		jz	short loc_6889F6EB
		mov	edx, [ebx]
		test	edx, edx
		jnz	loc_6889FAD4

loc_6889F6EB:				; CODE XREF: sub_6889F454+284j
					; sub_6889F454+28Bj
		mov	eax, 1
		jmp	loc_6889F4B8
; ---------------------------------------------------------------------------
		align 4

loc_6889F6F8:				; CODE XREF: sub_6889F454+36j
		mov	ebp, [esp+0BCh+arg_14]
		mov	esi, [esp+0BCh+var_6C]
		test	esi, esi
		jz	loc_6889FD08
		mov	edx, [esp+0BCh+var_6C]
		mov	esi, [edx+68h]
		test	esi, esi
		jz	loc_6889F9B4
		mov	[esp+0BCh+Time], esi
		call	purple_connection_get_account
		mov	[esp+0BCh+var_68], eax
		mov	[esp+0BCh+Time], esi
		call	purple_connection_get_protocol_data
		mov	[esp+0BCh+var_6C], eax
		test	ebp, ebp
		jz	loc_6889F9D0
		movzx	eax, word ptr [ebp+0]
		mov	[esp+0BCh+var_A8], eax
		mov	eax, [ebx]
		mov	[esp+0BCh+var_AC], eax
		mov	eax, [ebp+10h]
		mov	edx, [ebp+14h]
		mov	[esp+0BCh+Radix], eax
		mov	[esp+0BCh+var_B0], edx
		mov	[esp+0BCh+EndPtr], offset aIncomingRendez ; "Incoming rendezvous message of type %I6"...
		mov	[esp+0BCh+Time], offset	aOscar_13 ; "oscar"
		call	purple_debug_misc
		mov	eax, [ebp+30h]
		test	eax, eax
		jz	loc_6889FACC
		movzx	ecx, word ptr [ebp+34h]
		mov	[esp+0BCh+Radix], ecx ;	int
		mov	[esp+0BCh+EndPtr], eax ; int
		mov	eax, [ebp+38h]
		mov	[esp+0BCh+Time], eax ; char *
		call	oscar_encoding_to_utf8
		mov	edx, eax

loc_6889F78E:				; CODE XREF: sub_6889F454+67Aj
		mov	eax, [ebp+10h]
		mov	ecx, [ebp+14h]
		test	al, 8
		jz	loc_6889F9D8
		mov	eax, [ebp+48h]
		test	eax, eax
		jz	short loc_6889F7AE
		cmp	word ptr [ebp+44h], 0
		jnz	loc_6889FD2C

loc_6889F7AE:				; CODE XREF: sub_6889F454+34Dj
					; sub_6889F454+58Ej ...
		mov	[esp+0BCh+Time], edx
		call	g_free
		mov	eax, 1
		jmp	loc_6889F4B8
; ---------------------------------------------------------------------------

loc_6889F7C0:				; CODE XREF: sub_6889F454+222j
		mov	[esp+0BCh+Time], 0 ; Time
		call	time
		jmp	loc_6889F67F
; ---------------------------------------------------------------------------
		align 4

loc_6889F7D4:				; CODE XREF: sub_6889F454+216j
		mov	[esp+0BCh+Time], ebp
		call	g_datalist_clear
		mov	eax, [esp+0BCh+var_44]
		sub	eax, edi
		mov	edx, [esp+0BCh+var_40]
		inc	edx
		mov	[esp+0BCh+var_B0], edx
		mov	[esp+0BCh+Radix], edi
		mov	[esp+0BCh+EndPtr], eax
		mov	[esp+0BCh+Time], offset	a_SS ; "%.*s%s"
		call	g_strdup_printf
		mov	ebp, eax
		mov	[esp+0BCh+Time], edi
		call	g_free
		mov	edi, ebp
		jmp	loc_6889F670
; ---------------------------------------------------------------------------

loc_6889F810:				; CODE XREF: sub_6889F454+1EAj
		mov	[esp+0BCh+Time], ebp
		call	g_datalist_clear
		mov	eax, [esp+0BCh+var_44]
		sub	eax, edi
		mov	edx, [esp+0BCh+var_40]
		inc	edx
		mov	[esp+0BCh+var_B0], edx
		mov	[esp+0BCh+Radix], edi
		mov	[esp+0BCh+EndPtr], eax
		mov	[esp+0BCh+Time], offset	a_SS ; "%.*s%s"
		call	g_strdup_printf
		mov	[esp+0BCh+Time], edi
		mov	[esp+0BCh+var_70], eax
		call	g_free
		mov	eax, [esp+0BCh+var_70]
		mov	edi, eax
		jmp	loc_6889F644
; ---------------------------------------------------------------------------
		align 4

loc_6889F854:				; CODE XREF: sub_6889F454+1BEj
		mov	[esp+0BCh+var_34], 0
		lea	ecx, [esp+0BCh+var_30]
		mov	[esp+0BCh+var_AC], ecx
		lea	eax, [esp+0BCh+var_34]
		mov	[esp+0BCh+var_B0], eax
		lea	eax, [esp+0BCh+var_38]
		mov	[esp+0BCh+Radix], eax
		mov	eax, [esp+0BCh+var_40]
		inc	eax
		mov	[esp+0BCh+EndPtr], eax
		mov	[esp+0BCh+Time], offset	aBody_0	; "/body"
		call	purple_markup_find_tag
		test	eax, eax
		jnz	loc_6889FC38
		mov	[esp+0BCh+EndPtr], offset aBrokenMessageC ; "Broken message contains <body> but	not "...
		mov	[esp+0BCh+Time], offset	aOscar_13 ; "oscar"
		call	purple_debug_warning
		mov	eax, [esp+0BCh+var_44]
		mov	[esp+0BCh+Time], eax
		call	g_strdup
		mov	[esp+0BCh+var_6C], eax

loc_6889F8C1:				; CODE XREF: sub_6889F454+811j
		mov	[esp+0BCh+Time], offset	aIchattextcolor	; "ichattextcolor"
		call	g_quark_try_string
		mov	[esp+0BCh+EndPtr], eax
		mov	[esp+0BCh+Time], ebp
		call	g_datalist_id_get_data
		test	eax, eax
		jz	loc_688A0498
		mov	edx, [esp+0BCh+var_6C]
		mov	[esp+0BCh+Radix], edx
		mov	[esp+0BCh+EndPtr], eax
		mov	[esp+0BCh+Time], offset	aFontColorSSFon	; "<font color=\"%s\">%s</font>"
		call	g_strdup_printf
		mov	[esp+0BCh+var_60], eax
		mov	eax, [esp+0BCh+var_6C]
		mov	[esp+0BCh+Time], eax
		call	g_free

loc_6889F909:				; CODE XREF: sub_6889F454+104Cj
		mov	[esp+0BCh+Time], offset	aIchatballoonco	; "ichatballooncolor"
		call	g_quark_try_string
		mov	[esp+0BCh+EndPtr], eax
		mov	[esp+0BCh+Time], ebp
		call	g_datalist_id_get_data
		test	eax, eax
		jz	loc_688A0488
		mov	edx, [esp+0BCh+var_60]
		mov	[esp+0BCh+Radix], edx
		mov	[esp+0BCh+EndPtr], eax
		mov	[esp+0BCh+Time], offset	aFontBackSSFont	; "<font back=\"%s\">%s</font>"
		call	g_strdup_printf
		mov	[esp+0BCh+var_6C], eax
		mov	eax, [esp+0BCh+var_60]
		mov	[esp+0BCh+Time], eax
		call	g_free

loc_6889F951:				; CODE XREF: sub_6889F454+103Cj
		mov	[esp+0BCh+Time], ebp
		call	g_datalist_clear
		mov	eax, [esp+0BCh+var_44]
		sub	eax, edi
		mov	edx, [esp+0BCh+var_34]
		test	edx, edx
		jz	loc_688A0516
		inc	edx

loc_6889F96F:				; CODE XREF: sub_6889F454+10C7j
		mov	[esp+0BCh+var_AC], edx
		mov	edx, [esp+0BCh+var_6C]
		mov	[esp+0BCh+var_B0], edx
		mov	[esp+0BCh+Radix], edi
		mov	[esp+0BCh+EndPtr], eax
		mov	[esp+0BCh+Time], offset	a_SSS ;	"%.*s%s%s"
		call	g_strdup_printf
		mov	[esp+0BCh+Time], edi
		mov	[esp+0BCh+var_70], eax
		call	g_free
		mov	ecx, [esp+0BCh+var_6C]
		mov	[esp+0BCh+Time], ecx
		call	g_free
		mov	eax, [esp+0BCh+var_70]
		mov	edi, eax
		jmp	loc_6889F618
; ---------------------------------------------------------------------------
		align 4

loc_6889F9B4:				; CODE XREF: sub_6889F454+2C0j
		mov	[esp+0BCh+Radix], offset aOdGcNull ; "od->gc !=	NULL"
		mov	[esp+0BCh+EndPtr], offset aIncomingim_cha ; "incomingim_chan2"
		mov	[esp+0BCh+Time], 0
		call	g_return_if_fail_warning

loc_6889F9D0:				; CODE XREF: sub_6889F454+2E0j
		xor	eax, eax
		jmp	loc_6889F4B8
; ---------------------------------------------------------------------------
		align 4

loc_6889F9D8:				; CODE XREF: sub_6889F454+342j
		test	al, 24h
		jnz	loc_6889FA6C
		test	al, 12h
		jnz	loc_6889F7AE
		test	al, 1
		jnz	loc_688A05B1
		test	ah, 40h
		jz	loc_688A0588
		movzx	eax, byte ptr [ebp+44h]
		mov	[esp+0BCh+Radix], eax
		mov	[esp+0BCh+EndPtr], offset aGotAnIcqServer ; "Got an ICQ	Server Relay message of	type"...
		mov	[esp+0BCh+Time], offset	aOscar_13 ; "oscar"
		mov	[esp+0BCh+var_74], edx
		call	purple_debug_info
		mov	al, [ebp+44h]
		cmp	al, 1
		mov	edx, [esp+0BCh+var_74]
		jz	loc_688A0605
		cmp	al, 1Ah
		jnz	loc_6889F7AE
		mov	[esp+0BCh+EndPtr], offset aSendingXStatus ; "Sending X-Status Reply\n"
		mov	[esp+0BCh+Time], offset	aOscar_13 ; "oscar"
		mov	[esp+0BCh+var_74], edx
		call	purple_debug_info
		lea	eax, [ebp+2]
		mov	[esp+0BCh+Radix], eax
		mov	eax, [ebx]
		mov	[esp+0BCh+EndPtr], eax
		mov	eax, [esp+0BCh+var_6C]
		mov	[esp+0BCh+Time], eax
		call	icq_relay_xstatus
		mov	edx, [esp+0BCh+var_74]
		jmp	loc_6889F7AE
; ---------------------------------------------------------------------------
		align 4

loc_6889FA6C:				; CODE XREF: sub_6889F454+586j
		mov	eax, [ebp+0]
		test	ax, ax
		jz	loc_688A04A8
		dec	ax
		jnz	loc_6889F7AE
		lea	eax, [ebp+2]
		mov	[esp+0BCh+Radix], eax ;	void *
		mov	eax, [ebx]
		mov	[esp+0BCh+EndPtr], eax ; int
		mov	eax, [esp+0BCh+var_6C]
		mov	[esp+0BCh+Time], eax ; int
		mov	[esp+0BCh+var_74], edx
		call	peer_connection_find_by_cookie
		test	eax, eax
		mov	edx, [esp+0BCh+var_74]
		jz	loc_6889F7AE
		mov	[esp+0BCh+Radix], 0
		mov	[esp+0BCh+EndPtr], 2
		mov	[esp+0BCh+Time], eax
		call	peer_connection_destroy
		mov	edx, [esp+0BCh+var_74]
		jmp	loc_6889F7AE
; ---------------------------------------------------------------------------
		align 4

loc_6889FACC:				; CODE XREF: sub_6889F454+31Bj
		xor	edx, edx
		jmp	loc_6889F78E
; ---------------------------------------------------------------------------
		align 4

loc_6889FAD4:				; CODE XREF: sub_6889F454+291j
		mov	[esp+0BCh+Radix], eax
		mov	[esp+0BCh+EndPtr], offset aReceivedAChann ; "Received a	channel	4 message of type 0x"...
		mov	[esp+0BCh+Time], offset	aOscar_13 ; "oscar"
		call	purple_debug_info
		xor	eax, eax
		cmp	byte ptr [ebx+4], 1
		setz	al
		mov	[esp+0BCh+Radix], eax
		mov	[esp+0BCh+EndPtr], offset byte_688B4173
		mov	eax, [ebx+8]
		mov	[esp+0BCh+Time], eax
		call	g_strsplit
		mov	[esp+0BCh+var_54], eax
		mov	ebp, [eax]
		test	ebp, ebp
		jz	loc_6889FCFC
		xor	eax, eax
		mov	edx, [esp+0BCh+var_54]

loc_6889FB20:				; CODE XREF: sub_6889F454+6D2j
		inc	eax
		mov	edi, [edx+eax*4]
		test	edi, edi
		jnz	short loc_6889FB20
		lea	eax, ds:4[eax*4]

loc_6889FB2F:				; CODE XREF: sub_6889F454+8ADj
		mov	[esp+0BCh+Time], eax
		call	g_malloc
		mov	[esp+0BCh+var_60], eax
		mov	eax, [esp+0BCh+var_54]
		mov	esi, [eax]
		test	esi, esi
		jz	loc_688A0520
		mov	edx, eax
		add	edx, 4
		mov	edi, eax
		mov	[esp+0BCh+var_68], 0
		xor	ebp, ebp
		mov	[esp+0BCh+var_5C], ebx
		mov	ebx, edx

loc_6889FB60:				; CODE XREF: sub_6889F454+78Aj
		mov	edx, [esp+0BCh+var_5C]
		mov	eax, [edx]
		mov	[esp+0BCh+EndPtr], eax
		mov	[esp+0BCh+Time], offset	byte_688B4175
		call	g_strdup_printf
		mov	esi, eax
		mov	[esp+0BCh+EndPtr], 0Dh
		mov	eax, [edi]
		mov	[esp+0BCh+Time], eax
		call	purple_str_strip_char
		add	ebp, [esp+0BCh+var_60]
		mov	edx, [edi]
		mov	ecx, 0FFFFFFFFh
		mov	edi, edx
		xor	eax, eax
		repne scasb
		not	ecx
		dec	ecx
		mov	[esp+0BCh+var_AC], ecx ; size_t
		mov	[esp+0BCh+var_B0], edx ; char *
		mov	[esp+0BCh+Radix], 0 ; int
		mov	[esp+0BCh+EndPtr], esi ; int
		mov	eax, [esp+0BCh+var_64]
		mov	[esp+0BCh+Time], eax ; int
		call	oscar_decode_im
		mov	[ebp+0], eax
		mov	[esp+0BCh+Time], esi
		call	g_free
		inc	[esp+0BCh+var_68]
		mov	ebp, [esp+0BCh+var_68]
		shl	ebp, 2
		mov	edi, ebx
		add	ebx, 4
		mov	ecx, [ebx-4]
		test	ecx, ecx
		jnz	short loc_6889FB60
		mov	ebx, [esp+0BCh+var_5C]

loc_6889FBE4:				; CODE XREF: sub_6889F454+10D6j
		mov	eax, [esp+0BCh+var_60]
		mov	dword ptr [eax+ebp], 0
		movzx	eax, byte ptr [ebx+4]
		cmp	al, 1Ah		; switch 27 cases
		jbe	loc_6889FE20

loc_6889FBFB:				; CODE XREF: sub_6889F454+9CFj
					; DATA XREF: .rdata:off_688B44B4o
		mov	[esp+0BCh+Radix], eax ;	jumptable 6889FE23 default case
		mov	[esp+0BCh+EndPtr], offset aReceivedACha_0 ; "Received a	channel	4 message of unknown"...
		mov	[esp+0BCh+Time], offset	aOscar_13 ; "oscar"
		call	purple_debug_info
		nop

loc_6889FC14:				; CODE XREF: sub_6889F454+9CFj
					; sub_6889F454+A0Ej ...
		mov	eax, [esp+0BCh+var_54] ; jumptable 6889FE23 case 18
		mov	[esp+0BCh+Time], eax
		call	g_strfreev
		mov	eax, [esp+0BCh+var_60]
		mov	[esp+0BCh+Time], eax
		call	g_strfreev
		mov	eax, 1
		jmp	loc_6889F4B8
; ---------------------------------------------------------------------------
		align 4

loc_6889FC38:				; CODE XREF: sub_6889F454+443j
		mov	edx, [esp+0BCh+var_44]
		mov	eax, [esp+0BCh+var_34]
		inc	eax
		sub	eax, edx
		mov	[esp+0BCh+EndPtr], eax
		mov	[esp+0BCh+Time], edx
		call	g_strndup
		mov	[esp+0BCh+var_6C], eax
		lea	eax, [esp+0BCh+var_30]
		mov	[esp+0BCh+Time], eax
		call	g_datalist_clear
		jmp	loc_6889F8C1
; ---------------------------------------------------------------------------

loc_6889FC6A:				; CODE XREF: sub_6889F454+173j
		mov	[esp+0BCh+Time], edx
		mov	[esp+0BCh+var_74], edx
		call	purple_imgstore_get_data
		mov	[esp+0BCh+var_60], eax
		mov	edx, [esp+0BCh+var_74]
		mov	[esp+0BCh+Time], edx
		call	purple_imgstore_get_size
		mov	ecx, eax
		mov	[esp+0BCh+var_B0], eax
		mov	eax, [ebx]
		mov	[esp+0BCh+Radix], eax
		mov	[esp+0BCh+EndPtr], offset aSendingBuddyIc ; "Sending buddy icon	to %s (%u bytes)\n"
		mov	[esp+0BCh+Time], offset	aOscar_13 ; "oscar"
		mov	[esp+0BCh+var_70], ecx
		call	purple_debug_info
		mov	ecx, [esp+0BCh+var_70]
		mov	[esp+0BCh+EndPtr], ecx
		mov	eax, [esp+0BCh+var_60]
		mov	[esp+0BCh+Time], eax
		call	aimutil_iconsum
		movzx	ebp, ax
		mov	[esp+0BCh+Time], edi
		call	purple_buddy_icons_get_account_icon_timestamp
		mov	[esp+0BCh+var_A8], ebp
		mov	[esp+0BCh+var_AC], eax
		mov	ecx, [esp+0BCh+var_70]
		mov	[esp+0BCh+var_B0], ecx
		mov	eax, [esp+0BCh+var_60]
		mov	[esp+0BCh+Radix], eax
		mov	eax, [ebx]
		mov	[esp+0BCh+EndPtr], eax
		mov	ecx, [esp+0BCh+var_6C]
		mov	[esp+0BCh+Time], ecx
		call	aim_im_sendch2_icon
		mov	edx, [esp+0BCh+var_74]
		jmp	loc_6889F5D0
; ---------------------------------------------------------------------------

loc_6889FCFC:				; CODE XREF: sub_6889F454+6C0j
		mov	eax, 4
		jmp	loc_6889FB2F
; ---------------------------------------------------------------------------
		align 4

loc_6889FD08:				; CODE XREF: sub_6889F454+2B1j
		mov	[esp+0BCh+Radix], offset aOdNull ; "od != NULL"
		mov	[esp+0BCh+EndPtr], offset aIncomingim_cha ; "incomingim_chan2"
		mov	[esp+0BCh+Time], 0
		call	g_return_if_fail_warning
		xor	eax, eax
		jmp	loc_6889F4B8
; ---------------------------------------------------------------------------
		align 4

loc_6889FD2C:				; CODE XREF: sub_6889F454+354j
		movzx	ecx, byte ptr [ebp+4Ch]
		mov	[esp+0BCh+Radix], ecx ;	int
		mov	[esp+0BCh+EndPtr], eax ; int
		mov	eax, [ebp+38h]
		mov	[esp+0BCh+Time], eax ; char *
		mov	[esp+0BCh+var_74], edx
		call	oscar_encoding_to_utf8
		mov	ecx, eax
		mov	[esp+0BCh+var_70], ecx
		call	sub_6889BF3C
		mov	edi, eax
		test	eax, eax
		mov	edx, [esp+0BCh+var_74]
		mov	ecx, [esp+0BCh+var_70]
		jz	loc_688A050F
		mov	[esp+0BCh+Time], ecx
		call	g_free
		mov	edx, [esp+0BCh+var_74]

loc_6889FD70:				; CODE XREF: sub_6889F454+10BDj
		mov	[esp+0BCh+var_B0], offset g_free
		mov	[esp+0BCh+Radix], offset g_free
		mov	[esp+0BCh+EndPtr], offset g_str_equal
		mov	[esp+0BCh+Time], offset	loc_688ABE00
		mov	[esp+0BCh+var_74], edx
		call	g_hash_table_new_full
		mov	[esp+0BCh+var_6C], eax
		mov	[esp+0BCh+Time], offset	aRoom ;	"room"
		call	g_strdup
		mov	[esp+0BCh+Radix], edi
		mov	[esp+0BCh+EndPtr], eax
		mov	eax, [esp+0BCh+var_6C]
		mov	[esp+0BCh+Time], eax
		call	g_hash_table_replace
		movzx	eax, word ptr [ebp+44h]
		mov	[esp+0BCh+EndPtr], eax
		mov	[esp+0BCh+Time], offset	aD ; "%d"
		call	g_strdup_printf
		mov	ebp, eax
		mov	[esp+0BCh+Time], offset	aExchange ; "exchange"
		call	g_strdup
		mov	[esp+0BCh+Radix], ebp
		mov	[esp+0BCh+EndPtr], eax
		mov	eax, [esp+0BCh+var_6C]
		mov	[esp+0BCh+Time], eax
		call	g_hash_table_replace
		mov	eax, [esp+0BCh+var_6C]
		mov	[esp+0BCh+var_AC], eax
		mov	edx, [esp+0BCh+var_74]
		mov	[esp+0BCh+var_B0], edx
		mov	eax, [ebx]
		mov	[esp+0BCh+Radix], eax
		mov	[esp+0BCh+EndPtr], edi
		mov	[esp+0BCh+Time], esi
		call	serv_got_chat_invite
		mov	edx, [esp+0BCh+var_74]
		jmp	loc_6889F7AE
; ---------------------------------------------------------------------------
		align 10h

loc_6889FE20:				; CODE XREF: sub_6889F454+7A1j
		movzx	edx, al
		jmp	ds:off_688B44B4[edx*4] ; switch	jump
; ---------------------------------------------------------------------------

loc_6889FE2A:				; CODE XREF: sub_6889F454+9CFj
					; DATA XREF: .rdata:off_688B44B4o
		mov	eax, [ebx+0Ch]	; jumptable 6889FE23 case 26
		mov	[esp+0BCh+Radix], eax
		mov	eax, [ebx+8]
		mov	[esp+0BCh+EndPtr], eax
		lea	ebx, [esp+0BCh+var_2C]
		mov	[esp+0BCh+Time], ebx
		call	sub_68881798
		mov	[esp+0BCh+EndPtr], 15h
		mov	[esp+0BCh+Time], ebx
		call	sub_68881904
		mov	[esp+0BCh+Time], ebx
		call	sub_68881B44
		test	ax, ax
		jnz	loc_6889FC14	; jumptable 6889FE23 case 18
		mov	[esp+0BCh+Time], ebx
		call	sub_68881BB4
		cmp	eax, 7D0h
		ja	loc_6889FC14	; jumptable 6889FE23 case 18
		mov	[esp+0BCh+EndPtr], eax
		mov	[esp+0BCh+Time], ebx
		call	sub_68881D24
		mov	ebp, eax
		test	eax, eax
		jz	loc_6889FC14	; jumptable 6889FE23 case 18
		mov	[esp+0BCh+EndPtr], 3
		mov	[esp+0BCh+Time], ebx
		call	sub_68881904
		mov	[esp+0BCh+EndPtr], 4
		mov	[esp+0BCh+Time], ebx
		call	sub_68881904
		mov	[esp+0BCh+Time], ebx
		call	sub_68881BB4
		cmp	eax, 7D0h
		jbe	loc_688A070F
		mov	[esp+0BCh+Time], ebp
		call	g_free
		jmp	loc_6889FC14	; jumptable 6889FE23 case 18
; ---------------------------------------------------------------------------
		align 4

loc_6889FED4:				; CODE XREF: sub_6889F454+9CFj
					; DATA XREF: .rdata:off_688B44B4o
		mov	[esp+0BCh+Radix], 0 ; jumptable	6889FE23 case 19
		mov	[esp+0BCh+EndPtr], offset byte_688B4173
		mov	eax, [ebx+8]
		mov	[esp+0BCh+Time], eax
		call	g_strsplit
		mov	[esp+0BCh+var_68], eax
		test	eax, eax
		jz	loc_6889FC14	; jumptable 6889FE23 case 18
		call	_errno
		mov	dword ptr [eax], 0
		mov	ecx, [esp+0BCh+var_68]
		mov	eax, [ecx]
		test	eax, eax
		jz	loc_688A0533
		mov	[esp+0BCh+Radix], 0Ah ;	Radix
		mov	[esp+0BCh+EndPtr], 0 ; EndPtr
		mov	[esp+0BCh+Time], eax ; Str
		call	strtoul
		mov	[esp+0BCh+var_5C], eax
		test	eax, eax
		jz	loc_688A0533
		call	_errno
		mov	eax, [eax]
		test	eax, eax
		jnz	loc_688A0533
		mov	ebp, [esp+0BCh+var_68]
		add	ebp, 4
		mov	eax, [esp+0BCh+var_68]
		mov	edi, [eax+4]
		test	edi, edi
		jz	loc_688A0533
		mov	edx, [esp+0BCh+var_68]
		add	edx, 8
		mov	eax, [esp+0BCh+var_68]
		mov	esi, [eax+8]
		test	esi, esi
		jz	loc_688A0533
		mov	ecx, [esp+0BCh+var_68]
		add	ecx, 0Ch
		mov	[esp+0BCh+var_6C], 1
		mov	[esp+0BCh+var_50], ebx
		mov	eax, ebp
		mov	ebp, edx
		mov	ebx, esi
		mov	esi, ecx
		mov	edx, eax
		jmp	short loc_6889FFB3
; ---------------------------------------------------------------------------

loc_6889FF92:				; CODE XREF: sub_6889F454+C9Bj
		mov	edx, esi
		mov	edi, [esi]
		test	edi, edi
		jz	loc_688A052F
		inc	[esp+0BCh+var_6C]
		lea	ebp, [esi+4]
		add	esi, 8
		mov	ebx, [esi-4]
		test	ebx, ebx
		jz	loc_688A052F

loc_6889FFB3:				; CODE XREF: sub_6889F454+B3Cj
		mov	eax, [esp+0BCh+var_50]
		mov	ecx, [eax]
		mov	[esp+0BCh+EndPtr], offset aIcqUserUHasSen ; "ICQ user %u has sent you a	buddy: %s (%"...
		mov	[esp+0BCh+Time], offset	aPidgin_6 ; "pidgin"
		mov	[esp+0BCh+var_74], edx
		mov	[esp+0BCh+var_70], ecx
		call	libintl_dgettext
		mov	[esp+0BCh+var_B0], edi
		mov	[esp+0BCh+Radix], ebx
		mov	ecx, [esp+0BCh+var_70]
		mov	[esp+0BCh+EndPtr], ecx
		mov	[esp+0BCh+Time], eax
		call	g_strdup_printf
		mov	edi, eax
		mov	[esp+0BCh+Time], 0Ch
		call	g_malloc
		mov	ebx, eax
		mov	ecx, [esp+0BCh+var_58]
		mov	[eax], ecx
		mov	edx, [esp+0BCh+var_74]
		mov	eax, [edx]
		mov	[esp+0BCh+Time], eax
		call	g_strdup
		mov	[ebx+4], eax
		mov	eax, [ebp+0]
		mov	[esp+0BCh+Time], eax
		call	g_strdup
		mov	[ebx+8], eax
		mov	[esp+0BCh+EndPtr], offset a_decline ; "_Decline"
		mov	[esp+0BCh+Time], offset	aPidgin_6 ; "pidgin"
		call	libintl_dgettext
		mov	[esp+0BCh+EndPtr], offset a_add	; "_Add"
		mov	[esp+0BCh+Time], offset	aPidgin_6 ; "pidgin"
		mov	[esp+0BCh+var_70], eax
		call	libintl_dgettext
		mov	edx, eax
		mov	ebp, [ebx+4]
		mov	eax, [esp+0BCh+var_58]
		mov	[esp+0BCh+Time], eax
		mov	[esp+0BCh+var_74], edx
		call	purple_connection_get_account
		mov	[esp+0BCh+var_64], eax
		mov	[esp+0BCh+EndPtr], offset aDoYouWantToAdd ; "Do	you want to add	this buddy to your b"...
		mov	[esp+0BCh+Time], offset	aPidgin_6 ; "pidgin"
		call	libintl_dgettext
		mov	[esp+0BCh+var_88], offset oscar_free_name_data
		mov	ecx, [esp+0BCh+var_70]
		mov	[esp+0BCh+var_8C], ecx
		mov	[esp+0BCh+var_90], offset sub_6889902C
		mov	edx, [esp+0BCh+var_74]
		mov	[esp+0BCh+var_94], edx
		mov	[esp+0BCh+var_98], 2
		mov	[esp+0BCh+var_9C], ebx
		mov	[esp+0BCh+var_A0], 0
		mov	[esp+0BCh+var_A4], ebp
		mov	edx, [esp+0BCh+var_64]
		mov	[esp+0BCh+var_A8], edx
		mov	[esp+0BCh+var_AC], 0FFFFFFFFh
		mov	[esp+0BCh+var_B0], eax
		mov	[esp+0BCh+Radix], edi
		mov	[esp+0BCh+EndPtr], 0
		mov	edx, [esp+0BCh+var_58]
		mov	[esp+0BCh+Time], edx
		call	purple_request_action
		mov	[esp+0BCh+Time], edi
		call	g_free
		mov	eax, [esp+0BCh+var_5C]
		cmp	[esp+0BCh+var_6C], eax
		jnz	loc_6889FF92

loc_688A00F5:				; CODE XREF: sub_6889F454+1114j
		mov	eax, [esp+0BCh+var_68]
		mov	[esp+0BCh+Time], eax
		call	g_strfreev
		jmp	loc_6889FC14	; jumptable 6889FE23 case 18
; ---------------------------------------------------------------------------

loc_688A0106:				; CODE XREF: sub_6889F454+9CFj
					; DATA XREF: .rdata:off_688B44B4o
		cmp	[esp+0BCh+var_68], 5 ; jumptable 6889FE23 case 14
		jle	loc_6889FC14	; jumptable 6889FE23 case 18
		mov	eax, [esp+0BCh+var_60]
		mov	edi, [eax+14h]
		mov	esi, [eax+0Ch]
		mov	ebx, [eax]
		mov	[esp+0BCh+EndPtr], offset aYouHaveReceive ; "You have received an ICQ email from %s "...
		mov	[esp+0BCh+Time], offset	aPidgin_6 ; "pidgin"
		call	libintl_dgettext
		mov	[esp+0BCh+var_B0], edi
		mov	[esp+0BCh+Radix], esi
		mov	[esp+0BCh+EndPtr], ebx
		mov	[esp+0BCh+Time], eax
		call	g_strdup_printf
		mov	ebx, eax
		mov	[esp+0BCh+var_A4], 0
		mov	[esp+0BCh+var_A8], 0
		mov	[esp+0BCh+var_AC], eax
		mov	[esp+0BCh+var_B0], offset aIcqEmail ; "ICQ Email"

loc_688A0163:				; CODE XREF: sub_6889F454+D95j
					; sub_6889F454+DDAj ...
		mov	[esp+0BCh+Radix], 0
		mov	[esp+0BCh+EndPtr], 2
		mov	edx, [esp+0BCh+var_58]
		mov	[esp+0BCh+Time], edx
		call	purple_notify_message
		mov	[esp+0BCh+Time], ebx
		call	g_free
		jmp	loc_6889FC14	; jumptable 6889FE23 case 18
; ---------------------------------------------------------------------------

loc_688A018C:				; CODE XREF: sub_6889F454+9CFj
					; DATA XREF: .rdata:off_688B44B4o
		cmp	[esp+0BCh+var_68], 4 ; jumptable 6889FE23 case 9
		jle	loc_6889FC14	; jumptable 6889FE23 case 18
		mov	eax, [esp+0BCh+var_60]
		mov	edi, [eax+14h]
		mov	esi, [eax+0Ch]
		mov	ebx, [eax]
		mov	[esp+0BCh+EndPtr], offset aYouHaveRecei_0 ; "You have received a special message\n\n"...
		mov	[esp+0BCh+Time], offset	aPidgin_6 ; "pidgin"
		call	libintl_dgettext
		mov	[esp+0BCh+var_B0], edi
		mov	[esp+0BCh+Radix], esi
		mov	[esp+0BCh+EndPtr], ebx
		mov	[esp+0BCh+Time], eax
		call	g_strdup_printf
		mov	ebx, eax
		mov	[esp+0BCh+var_A4], 0
		mov	[esp+0BCh+var_A8], 0
		mov	[esp+0BCh+var_AC], eax
		mov	[esp+0BCh+var_B0], offset aIcqServerMessa ; "ICQ Server	Message"
		jmp	loc_688A0163
; ---------------------------------------------------------------------------

loc_688A01EE:				; CODE XREF: sub_6889F454+9CFj
					; DATA XREF: .rdata:off_688B44B4o
		mov	ebx, [ebx]	; jumptable 6889FE23 case 8
		mov	[esp+0BCh+EndPtr], offset aTheUserUHasGra ; "The user %u has granted your request to"...
		mov	[esp+0BCh+Time], offset	aPidgin_6 ; "pidgin"
		call	libintl_dgettext
		mov	[esp+0BCh+EndPtr], ebx
		mov	[esp+0BCh+Time], eax
		call	g_strdup_printf
		mov	ebx, eax
		mov	[esp+0BCh+var_A4], 0
		mov	[esp+0BCh+var_A8], 0
		mov	[esp+0BCh+var_AC], eax
		mov	[esp+0BCh+var_B0], offset aIcqAuthorizati ; "ICQ authorization accepted."
		jmp	loc_688A0163
; ---------------------------------------------------------------------------

loc_688A0233:				; CODE XREF: sub_6889F454+9CFj
					; DATA XREF: .rdata:off_688B44B4o
		cmp	[esp+0BCh+var_68], 5 ; jumptable 6889FE23 case 13
		jle	loc_6889FC14	; jumptable 6889FE23 case 18
		mov	eax, [esp+0BCh+var_60]
		mov	edi, [eax+14h]
		mov	esi, [eax+0Ch]
		mov	ebx, [eax]
		mov	[esp+0BCh+EndPtr], offset aYouHaveRecei_1 ; "You have received an ICQ page\n\nFrom: "...
		mov	[esp+0BCh+Time], offset	aPidgin_6 ; "pidgin"
		call	libintl_dgettext
		mov	[esp+0BCh+var_B0], edi
		mov	[esp+0BCh+Radix], esi
		mov	[esp+0BCh+EndPtr], ebx
		mov	[esp+0BCh+Time], eax
		call	g_strdup_printf
		mov	ebx, eax
		mov	[esp+0BCh+var_A4], 0
		mov	[esp+0BCh+var_A8], 0
		mov	[esp+0BCh+var_AC], eax
		mov	[esp+0BCh+var_B0], offset aIcqPage ; "ICQ Page"
		jmp	loc_688A0163
; ---------------------------------------------------------------------------

loc_688A0295:				; CODE XREF: sub_6889F454+9CFj
					; DATA XREF: .rdata:off_688B44B4o
		mov	eax, [esp+0BCh+var_68] ; jumptable 6889FE23 case 7
		test	eax, eax
		jle	loc_6889FC14	; jumptable 6889FE23 case 18
		mov	eax, [esp+0BCh+var_60]
		mov	edi, [eax]
		test	edi, edi
		jz	loc_688A06F4

loc_688A02AF:				; CODE XREF: sub_6889F454+12B6j
		mov	esi, [ebx]
		mov	[esp+0BCh+EndPtr], offset aTheUserUHasDen ; "The user %u has denied your request to "...
		mov	[esp+0BCh+Time], offset	aPidgin_6 ; "pidgin"
		call	libintl_dgettext
		mov	[esp+0BCh+Radix], edi
		mov	[esp+0BCh+EndPtr], esi
		mov	[esp+0BCh+Time], eax
		call	g_strdup_printf
		mov	ebx, eax
		mov	[esp+0BCh+EndPtr], offset aIcqAuthoriza_0 ; "ICQ authorization denied."
		mov	[esp+0BCh+Time], offset	aPidgin_6 ; "pidgin"
		call	libintl_dgettext
		mov	[esp+0BCh+var_A4], 0
		mov	[esp+0BCh+var_A8], 0
		mov	[esp+0BCh+var_AC], ebx
		mov	[esp+0BCh+var_B0], eax
		jmp	loc_688A0163
; ---------------------------------------------------------------------------

loc_688A0308:				; CODE XREF: sub_6889F454+9CFj
					; DATA XREF: .rdata:off_688B44B4o
		cmp	[esp+0BCh+var_68], 5 ; jumptable 6889FE23 case 6
		jle	loc_6889FC14	; jumptable 6889FE23 case 18
		mov	eax, [ebx]
		mov	[esp+0BCh+EndPtr], eax
		mov	[esp+0BCh+Time], offset	byte_688B4175
		call	g_strdup_printf
		mov	ebp, eax
		mov	eax, [esp+0BCh+var_60]
		mov	edx, [eax+14h]
		test	edx, edx
		jz	loc_688A06ED
		xor	eax, eax
		or	ecx, 0FFFFFFFFh
		mov	edi, edx
		repne scasb
		not	ecx
		dec	ecx
		mov	[esp+0BCh+var_AC], ecx ; size_t
		mov	[esp+0BCh+var_B0], edx ; char *
		mov	[esp+0BCh+Radix], 3 ; int
		mov	[esp+0BCh+EndPtr], ebp ; int
		mov	eax, [esp+0BCh+var_64]
		mov	[esp+0BCh+Time], eax ; int
		call	oscar_decode_im
		mov	esi, eax

loc_688A0364:				; CODE XREF: sub_6889F454+129Bj
		mov	eax, [ebx]
		mov	[esp+0BCh+Radix], eax
		mov	[esp+0BCh+EndPtr], offset aReceivedAnAuth ; "Received an authorization request from "...
		mov	[esp+0BCh+Time], offset	aOscar_13 ; "oscar"
		call	purple_debug_info
		mov	[esp+0BCh+var_B0], esi ; int
		mov	[esp+0BCh+Radix], 1 ; int
		mov	[esp+0BCh+EndPtr], ebp ; char *
		mov	edx, [esp+0BCh+var_6C]
		mov	[esp+0BCh+Time], edx ; int
		call	aim_icq_getalias
		mov	[esp+0BCh+Time], ebp
		call	g_free
		mov	[esp+0BCh+Time], esi
		call	g_free
		jmp	loc_6889FC14	; jumptable 6889FE23 case 18
; ---------------------------------------------------------------------------

loc_688A03AF:				; CODE XREF: sub_6889F454+9CFj
					; DATA XREF: .rdata:off_688B44B4o
		cmp	[esp+0BCh+var_68], 1 ; jumptable 6889FE23 case 4
		jle	loc_6889FC14	; jumptable 6889FE23 case 18
		mov	eax, [esp+0BCh+var_60]
		mov	eax, [eax+4]
		test	eax, eax
		jz	loc_6889FC14	; jumptable 6889FE23 case 18
		mov	eax, [ebx]
		mov	[esp+0BCh+EndPtr], eax
		mov	[esp+0BCh+Time], offset	byte_688B4175
		call	g_strdup_printf
		mov	esi, eax
		mov	edx, [esp+0BCh+var_60]
		mov	eax, [edx]
		test	eax, eax
		jz	loc_688A05F2
		cmp	byte ptr [eax],	0
		jz	loc_688A05F2
		mov	edx, [edx+4]

loc_688A03F7:				; CODE XREF: sub_6889F454+11A7j
		mov	[esp+0BCh+Radix], eax
		mov	[esp+0BCh+EndPtr], edx
		mov	[esp+0BCh+Time], offset	aAHrefSSA ; "<A	HREF=\"%s\">%s</A>"
		call	g_strdup_printf

loc_688A040B:				; CODE XREF: sub_6889F454+1030j
		mov	ebx, eax
		mov	[esp+0BCh+Time], 0 ; Time
		call	time
		mov	[esp+0BCh+var_AC], eax
		mov	[esp+0BCh+var_B0], 0
		mov	[esp+0BCh+Radix], ebx
		mov	[esp+0BCh+EndPtr], esi
		mov	edx, [esp+0BCh+var_58]
		mov	[esp+0BCh+Time], edx
		call	serv_got_im
		mov	[esp+0BCh+Time], esi
		call	g_free
		mov	[esp+0BCh+Time], ebx
		call	g_free
		jmp	loc_6889FC14	; jumptable 6889FE23 case 18
; ---------------------------------------------------------------------------

loc_688A044E:				; CODE XREF: sub_6889F454+9CFj
					; DATA XREF: .rdata:off_688B44B4o
		mov	edx, [esp+0BCh+var_68] ; jumptable 6889FE23 case 1
		test	edx, edx
		jle	loc_6889FC14	; jumptable 6889FE23 case 18
		mov	eax, [ebx]
		mov	[esp+0BCh+EndPtr], eax
		mov	[esp+0BCh+Time], offset	byte_688B4175
		call	g_strdup_printf
		mov	esi, eax
		mov	[esp+0BCh+EndPtr], 0FFFFFFFFh
		mov	edx, [esp+0BCh+var_60]
		mov	eax, [edx]
		mov	[esp+0BCh+Time], eax
		call	g_markup_escape_text
		jmp	short loc_688A040B
; ---------------------------------------------------------------------------
		align 4

loc_688A0488:				; CODE XREF: sub_6889F454+4CFj
		mov	eax, [esp+0BCh+var_60]
		mov	[esp+0BCh+var_6C], eax
		jmp	loc_6889F951
; ---------------------------------------------------------------------------
		align 4

loc_688A0498:				; CODE XREF: sub_6889F454+487j
		mov	eax, [esp+0BCh+var_6C]
		mov	[esp+0BCh+var_60], eax
		jmp	loc_6889F909
; ---------------------------------------------------------------------------
		align 4

loc_688A04A8:				; CODE XREF: sub_6889F454+61Ej
		mov	[esp+0BCh+var_B0], ebp
		mov	[esp+0BCh+Radix], edx
		mov	eax, [ebx]
		mov	[esp+0BCh+EndPtr], eax
		mov	eax, [esp+0BCh+var_6C]
		mov	[esp+0BCh+Time], eax
		mov	[esp+0BCh+var_74], edx
		call	peer_connection_got_proposition
		mov	edx, [esp+0BCh+var_74]
		jmp	loc_6889F7AE
; ---------------------------------------------------------------------------

loc_688A04CF:				; CODE XREF: sub_6889F454+DBj
		mov	[esp+0BCh+Time], 2Ch
		call	g_malloc0
		mov	ebp, eax
		mov	eax, [ebx]
		mov	[esp+0BCh+EndPtr], eax
		mov	[esp+0BCh+Time], edi
		call	purple_normalize
		mov	[esp+0BCh+Time], eax
		call	g_strdup
		mov	[esp+0BCh+Radix], ebp
		mov	[esp+0BCh+EndPtr], eax
		mov	edx, [esp+0BCh+var_6C]
		mov	eax, [edx+38h]
		mov	[esp+0BCh+Time], eax
		call	g_hash_table_insert
		jmp	loc_6889F535
; ---------------------------------------------------------------------------

loc_688A050F:				; CODE XREF: sub_6889F454+90Aj
		mov	edi, ecx
		jmp	loc_6889FD70
; ---------------------------------------------------------------------------

loc_688A0516:				; CODE XREF: sub_6889F454+514j
		mov	edx, offset aBody_1 ; "</body>"
		jmp	loc_6889F96F
; ---------------------------------------------------------------------------

loc_688A0520:				; CODE XREF: sub_6889F454+6EFj
		mov	[esp+0BCh+var_68], 0
		xor	ebp, ebp
		jmp	loc_6889FBE4
; ---------------------------------------------------------------------------

loc_688A052F:				; CODE XREF: sub_6889F454+B44j
					; sub_6889F454+B59j
		mov	ebx, [esp+0BCh+var_50]

loc_688A0533:				; CODE XREF: sub_6889F454+ABAj
					; sub_6889F454+ADEj ...
		mov	[esp+0BCh+EndPtr], 0
		mov	eax, [ebx+8]
		mov	[esp+0BCh+Time], eax
		call	g_strescape
		mov	ebx, eax
		mov	[esp+0BCh+Radix], eax
		mov	[esp+0BCh+EndPtr], offset aUnknownSyntaxP ; "Unknown syntax parsing ICQ	buddies.  ar"...
		mov	[esp+0BCh+Time], offset	aOscar_13 ; "oscar"
		call	purple_debug_error
		mov	[esp+0BCh+Time], ebx
		call	g_free
		jmp	loc_688A00F5
; ---------------------------------------------------------------------------

loc_688A056D:				; CODE XREF: sub_6889F454+139j
		cmp	edx, [ebp+1Ch]
		mov	ecx, [esi+0Ch]
		jnz	loc_6889F596
		cmp	ecx, [ebp+20h]
		jnz	loc_6889F596
		jmp	loc_6889F5A8
; ---------------------------------------------------------------------------
		align 4

loc_688A0588:				; CODE XREF: sub_6889F454+59Fj
		mov	[esp+0BCh+Radix], eax
		mov	[esp+0BCh+var_B0], ecx
		mov	[esp+0BCh+EndPtr], offset aUnknownRequest ; "Unknown request class %I64u\n"
		mov	[esp+0BCh+Time], offset	aOscar_13 ; "oscar"
		mov	[esp+0BCh+var_74], edx
		call	purple_debug_error
		mov	edx, [esp+0BCh+var_74]
		jmp	loc_6889F7AE
; ---------------------------------------------------------------------------

loc_688A05B1:				; CODE XREF: sub_6889F454+596j
		mov	esi, [ebp+48h]
		mov	[esp+0BCh+EndPtr], esi
		mov	eax, [ebp+50h]
		mov	[esp+0BCh+Time], eax
		mov	[esp+0BCh+var_74], edx
		call	g_memdup
		mov	[esp+0BCh+var_AC], 0
		mov	[esp+0BCh+var_B0], esi
		mov	[esp+0BCh+Radix], eax
		mov	eax, [ebx]
		mov	[esp+0BCh+EndPtr], eax
		mov	eax, [esp+0BCh+var_68]
		mov	[esp+0BCh+Time], eax
		call	purple_buddy_icons_set_for_user
		mov	edx, [esp+0BCh+var_74]
		jmp	loc_6889F7AE
; ---------------------------------------------------------------------------

loc_688A05F2:				; CODE XREF: sub_6889F454+F91j
					; sub_6889F454+F9Aj
		mov	edx, [esp+0BCh+var_60]
		mov	eax, [edx+4]
		mov	edx, eax
		jmp	loc_688A03F7
; ---------------------------------------------------------------------------

loc_688A0600:				; CODE XREF: sub_6889F454+71j
		call	__stack_chk_fail
; ---------------------------------------------------------------------------

loc_688A0605:				; CODE XREF: sub_6889F454+5CEj
		mov	ecx, [ebp+48h]
		mov	[esp+0BCh+var_60], ecx
		test	ecx, ecx
		jz	loc_6889F7AE
		mov	eax, [ebp+38h]
		mov	[esp+0BCh+var_64], eax
		xor	eax, eax
		or	ecx, 0FFFFFFFFh
		mov	edi, [esp+0BCh+var_60]
		repne scasb
		not	ecx
		lea	edi, [ecx-1]
		cmp	[esp+0BCh+var_64], 0
		jz	loc_688A0809

loc_688A0636:				; CODE XREF: sub_6889F454+13D3j
					; sub_6889F454+1416j
		mov	[esp+0BCh+Radix], edi ;	int
		mov	eax, [ebp+48h]
		mov	[esp+0BCh+EndPtr], eax ; int
		mov	eax, [esp+0BCh+var_64]
		mov	[esp+0BCh+Time], eax ; char *
		mov	[esp+0BCh+var_74], edx
		call	oscar_encoding_to_utf8
		mov	edi, eax
		mov	[esp+0BCh+EndPtr], 0FFFFFFFFh
		mov	[esp+0BCh+Time], eax
		call	g_markup_escape_text
		mov	[esp+0BCh+var_68], eax
		mov	[esp+0BCh+Time], edi
		call	g_free
		mov	[esp+0BCh+Radix], offset aBr ; "<br>"
		mov	[esp+0BCh+EndPtr], offset asc_688B3F07 ; "\r\n"
		mov	eax, [esp+0BCh+var_68]
		mov	[esp+0BCh+Time], eax
		call	purple_strreplace
		mov	edi, eax
		mov	eax, [esp+0BCh+var_68]
		mov	[esp+0BCh+Time], eax
		call	g_free
		mov	[esp+0BCh+Time], 0 ; Time
		call	time
		mov	[esp+0BCh+var_AC], eax
		mov	[esp+0BCh+var_B0], 0
		mov	[esp+0BCh+Radix], edi
		mov	eax, [ebx]
		mov	[esp+0BCh+EndPtr], eax
		mov	[esp+0BCh+Time], esi
		call	serv_got_im
		lea	eax, [ebp+2]
		mov	[esp+0BCh+Radix], eax
		mov	eax, [ebx]
		mov	[esp+0BCh+EndPtr], eax
		mov	eax, [esp+0BCh+var_6C]
		mov	[esp+0BCh+Time], eax
		call	aim_im_send_icq_confirmation
		mov	[esp+0BCh+Time], edi
		call	g_free
		mov	edx, [esp+0BCh+var_74]
		jmp	loc_6889F7AE
; ---------------------------------------------------------------------------

loc_688A06ED:				; CODE XREF: sub_6889F454+EDCj
		xor	esi, esi
		jmp	loc_688A0364
; ---------------------------------------------------------------------------

loc_688A06F4:				; CODE XREF: sub_6889F454+E55j
		mov	[esp+0BCh+EndPtr], offset aNoReasonGiven_ ; "No	reason given."
		mov	[esp+0BCh+Time], offset	aPidgin_6 ; "pidgin"
		call	libintl_dgettext
		mov	edi, eax
		jmp	loc_688A02AF
; ---------------------------------------------------------------------------

loc_688A070F:				; CODE XREF: sub_6889F454+A6Aj
		mov	[esp+0BCh+EndPtr], eax
		mov	[esp+0BCh+Time], ebx
		call	sub_68881D24
		mov	[esp+0BCh+var_6C], eax
		mov	[esp+0BCh+EndPtr], offset aIcqsms ; "ICQSMS"
		mov	[esp+0BCh+Time], ebp ; Str1
		call	strcmp
		test	eax, eax
		jnz	loc_688A07F0
		cmp	[esp+0BCh+var_6C], 0
		jz	loc_688A07F0
		mov	[esp+0BCh+EndPtr], 0FFFFFFFFh
		mov	eax, [esp+0BCh+var_6C]
		mov	[esp+0BCh+Time], eax
		call	xmlnode_from_str
		mov	edi, eax
		test	eax, eax
		jz	loc_688A07F0
		mov	[esp+0BCh+EndPtr], offset aSender ; "sender"
		mov	[esp+0BCh+Time], eax
		call	xmlnode_get_child
		test	eax, eax
		jz	loc_688A0876
		mov	[esp+0BCh+Time], eax
		call	xmlnode_get_data
		mov	ebx, eax

loc_688A0782:				; CODE XREF: sub_6889F454+1424j
		mov	[esp+0BCh+EndPtr], offset aText	; "text"
		mov	[esp+0BCh+Time], edi
		call	xmlnode_get_child
		test	eax, eax
		jz	loc_688A086F
		mov	[esp+0BCh+Time], eax
		call	xmlnode_get_data
		mov	esi, eax
		test	ebx, ebx
		jz	short loc_688A07D8
		test	eax, eax
		jz	short loc_688A07D8
		mov	[esp+0BCh+Time], 0 ; Time
		call	time
		mov	[esp+0BCh+var_AC], eax
		mov	[esp+0BCh+var_B0], 0
		mov	[esp+0BCh+Radix], esi
		mov	[esp+0BCh+EndPtr], ebx
		mov	edx, [esp+0BCh+var_58]
		mov	[esp+0BCh+Time], edx
		call	serv_got_im

loc_688A07D8:				; CODE XREF: sub_6889F454+1352j
					; sub_6889F454+1356j ...
		mov	[esp+0BCh+Time], ebx
		call	g_free
		mov	[esp+0BCh+Time], esi
		call	g_free
		mov	[esp+0BCh+Time], edi
		call	xmlnode_free

loc_688A07F0:				; CODE XREF: sub_6889F454+12DDj
					; sub_6889F454+12E8j ...
		mov	[esp+0BCh+Time], ebp
		call	g_free
		mov	eax, [esp+0BCh+var_6C]
		mov	[esp+0BCh+Time], eax
		call	g_free
		jmp	loc_6889FC14	; jumptable 6889FE23 case 18
; ---------------------------------------------------------------------------

loc_688A0809:				; CODE XREF: sub_6889F454+11DCj
		mov	[esp+0BCh+Radix], 0
		mov	[esp+0BCh+EndPtr], edi
		mov	ecx, [esp+0BCh+var_60]
		mov	[esp+0BCh+Time], ecx
		call	g_utf8_validate
		test	eax, eax
		mov	edx, [esp+0BCh+var_74]
		jnz	loc_688A0636
		call	oscar_get_locale_charset
		mov	[esp+0BCh+Radix], eax
		mov	[esp+0BCh+EndPtr], offset aEncoding_0 ;	"encoding"
		mov	eax, [esp+0BCh+var_68]
		mov	[esp+0BCh+Time], eax
		call	purple_account_get_string
		mov	[esp+0BCh+var_64], eax
		mov	[esp+0BCh+Radix], eax
		mov	[esp+0BCh+EndPtr], offset aMirandaIsThatY ; "Miranda, is that you? Using '%s' as enc"...
		mov	[esp+0BCh+Time], offset	aOscar_13 ; "oscar"
		call	purple_debug_info
		mov	edx, [esp+0BCh+var_74]
		jmp	loc_688A0636
; ---------------------------------------------------------------------------

loc_688A086F:				; CODE XREF: sub_6889F454+1340j
		xor	esi, esi
		jmp	loc_688A07D8
; ---------------------------------------------------------------------------

loc_688A0876:				; CODE XREF: sub_6889F454+131Ej
		xor	ebx, ebx
		jmp	loc_688A0782
sub_6889F454	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 221. oscar_chat_destroy

; =============== S U B	R O U T	I N E =======================================


		public oscar_chat_destroy
oscar_chat_destroy proc	near		; CODE XREF: flap_connection_close+14Bp
					; sub_688A08C8+53p ...

var_2C		= dword	ptr -2Ch
var_10		= dword	ptr -10h
arg_0		= dword	ptr  4

		push	ebx
		sub	esp, 28h
		mov	ebx, [esp+2Ch+arg_0]
		mov	eax, ds:__stack_chk_guard
		mov	[esp+2Ch+var_10], eax
		xor	eax, eax
		mov	eax, [ebx]
		mov	[esp+2Ch+var_2C], eax
		call	g_free
		mov	eax, [ebx+4]
		mov	[esp+2Ch+var_2C], eax
		call	g_free
		mov	eax, [esp+2Ch+var_10]
		xor	eax, ds:__stack_chk_guard
		jnz	short loc_688A08C1
		mov	[esp+2Ch+arg_0], ebx
		add	esp, 28h
		pop	ebx
		jmp	g_free
; ---------------------------------------------------------------------------

loc_688A08C1:				; CODE XREF: oscar_chat_destroy+32j
		call	__stack_chk_fail
oscar_chat_destroy endp

; ---------------------------------------------------------------------------
		align 4

; =============== S U B	R O U T	I N E =======================================


sub_688A08C8	proc near		; CODE XREF: sub_688A0938+FCp
					; oscar_chat_leave+B3j

var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_10		= dword	ptr -10h

		push	edi
		push	esi
		push	ebx
		sub	esp, 20h
		mov	esi, eax
		mov	ebx, edx
		mov	eax, ds:__stack_chk_guard
		mov	[esp+2Ch+var_10], eax
		xor	eax, eax
		mov	[esp+2Ch+var_2C], esi
		call	purple_connection_get_protocol_data
		mov	edi, eax
		mov	eax, [ebx+18h]
		mov	[esp+2Ch+var_2C], eax
		call	purple_conversation_get_chat_data
		mov	[esp+2Ch+var_2C], eax
		call	purple_conv_chat_get_id
		mov	[esp+2Ch+var_28], eax
		mov	[esp+2Ch+var_2C], esi
		call	serv_got_chat_left
		mov	[esp+2Ch+var_28], ebx
		mov	eax, [edi+34h]
		mov	[esp+2Ch+var_2C], eax
		call	g_slist_remove
		mov	[edi+34h], eax
		mov	[esp+2Ch+var_2C], ebx
		call	oscar_chat_destroy
		mov	eax, [esp+2Ch+var_10]
		xor	eax, ds:__stack_chk_guard
		jnz	short loc_688A0933
		add	esp, 20h
		pop	ebx
		pop	esi
		pop	edi
		retn
; ---------------------------------------------------------------------------

loc_688A0933:				; CODE XREF: sub_688A08C8+62j
		call	__stack_chk_fail
sub_688A08C8	endp


; =============== S U B	R O U T	I N E =======================================


sub_688A0938	proc near		; DATA XREF: oscar_login+54o

Time		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_3C		= dword	ptr -3Ch
var_20		= dword	ptr -20h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 3Ch
		mov	ebx, [esp+4Ch+arg_4]
		mov	eax, ds:__stack_chk_guard
		mov	[esp+4Ch+var_20], eax
		xor	eax, eax
		mov	eax, [esp+4Ch+arg_0]
		mov	esi, [eax+68h]
		mov	edx, [esp+4Ch+arg_C]
		mov	ecx, [esp+4Ch+arg_10]
		test	ecx, ecx
		jz	loc_688A0A40

loc_688A0965:				; CODE XREF: sub_688A0938+10Dj
		mov	[esp+4Ch+var_40], ecx
		and	edx, 0FFFFh
		mov	[esp+4Ch+var_44], edx
		mov	[esp+4Ch+var_48], offset aDisconnected_C ; "Disconnected.  Code	is 0x%04x and msg i"...
		mov	[esp+4Ch+Time],	offset aOscar_13 ; "oscar"
		call	purple_debug_info
		test	ebx, ebx
		jz	loc_688A0A4C
		cmp	word ptr [ebx+5Ch], 0Eh
		jz	short loc_688A09B4

loc_688A0996:				; CODE XREF: sub_688A0938+89j
					; sub_688A0938+101j ...
		mov	eax, 1
		mov	edx, [esp+4Ch+var_20]
		xor	edx, ds:__stack_chk_guard
		jnz	loc_688A0A6D
		add	esp, 3Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 4

loc_688A09B4:				; CODE XREF: sub_688A0938+5Cj
		mov	edx, ebx
		mov	eax, esi
		call	sub_68898FDC
		mov	ebx, eax
		test	eax, eax
		jz	short loc_688A0996
		mov	eax, [eax+10h]
		mov	[esp+4Ch+var_48], eax
		mov	[esp+4Ch+Time],	esi
		call	purple_find_chat
		mov	edi, eax
		test	eax, eax
		jz	short loc_688A0A30
		mov	ebp, [ebx]
		mov	[esp+4Ch+var_48], offset aYouHaveBeenDis ; "You	have been disconnected from chat ro"...
		mov	[esp+4Ch+Time],	offset aPidgin_6 ; "pidgin"
		call	libintl_dgettext
		mov	[esp+4Ch+var_48], ebp
		mov	[esp+4Ch+Time],	eax
		call	g_strdup_printf
		mov	ebp, eax
		mov	[esp+4Ch+Time],	0 ; Time
		call	time
		mov	[esp+4Ch+var_3C], eax
		mov	[esp+4Ch+var_40], 200h
		mov	[esp+4Ch+var_44], ebp
		mov	[esp+4Ch+var_48], 0
		mov	[esp+4Ch+Time],	edi
		call	purple_conversation_write
		mov	[esp+4Ch+Time],	ebp
		call	g_free

loc_688A0A30:				; CODE XREF: sub_688A0938+9Ej
		mov	edx, ebx
		mov	eax, esi
		call	sub_688A08C8
		jmp	loc_688A0996
; ---------------------------------------------------------------------------
		align 10h

loc_688A0A40:				; CODE XREF: sub_688A0938+27j
		mov	ecx, offset byte_688B2167
		jmp	loc_688A0965
; ---------------------------------------------------------------------------
		align 4

loc_688A0A4C:				; CODE XREF: sub_688A0938+51j
		mov	[esp+4Ch+var_44], offset aConnNull_0 ; "conn !=	NULL"
		mov	[esp+4Ch+var_48], offset aPurple_connerr ; "purple_connerr"
		mov	[esp+4Ch+Time],	0
		call	g_return_if_fail_warning
		jmp	loc_688A0996
; ---------------------------------------------------------------------------

loc_688A0A6D:				; CODE XREF: sub_688A0938+6Dj
		call	__stack_chk_fail
sub_688A0938	endp

; ---------------------------------------------------------------------------
		align 4
; Exported entry 251. oscar_login

; =============== S U B	R O U T	I N E =======================================


		public oscar_login
oscar_login	proc near

Str1		= dword	ptr -5Ch
Str2		= dword	ptr -58h
var_54		= dword	ptr -54h
var_50		= dword	ptr -50h
var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_20		= dword	ptr -20h
arg_0		= dword	ptr  4

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 4Ch
		mov	edx, [esp+5Ch+arg_0]
		mov	[esp+5Ch+var_38], edx
		mov	eax, ds:__stack_chk_guard
		mov	[esp+5Ch+var_20], eax
		xor	eax, eax
		mov	[esp+5Ch+Str1],	offset byte_688B2167
		call	g_string_new
		mov	esi, eax
		mov	edx, [esp+5Ch+var_38]
		mov	[esp+5Ch+Str1],	edx
		call	purple_account_get_connection
		mov	ebp, eax
		call	oscar_data_new
		mov	ebx, eax
		mov	[eax+68h], ebp
		mov	[esp+5Ch+Str2],	eax
		mov	[esp+5Ch+Str1],	ebp
		call	purple_connection_set_protocol_data
		mov	[esp+5Ch+var_4C], 0
		mov	[esp+5Ch+var_50], offset sub_688A0938
		mov	[esp+5Ch+var_54], 3
		mov	[esp+5Ch+Str2],	0FFFFh
		mov	[esp+5Ch+Str1],	ebx
		call	oscar_data_addhandler
		mov	[esp+5Ch+var_4C], 0
		mov	[esp+5Ch+var_50], offset loc_6889EAC0
		mov	[esp+5Ch+var_54], 6
		mov	[esp+5Ch+Str2],	0FFFFh
		mov	[esp+5Ch+Str1],	ebx
		call	oscar_data_addhandler
		mov	[esp+5Ch+var_4C], 0
		mov	[esp+5Ch+var_50], offset sub_6889BA7C
		mov	[esp+5Ch+var_54], 3
		mov	[esp+5Ch+Str2],	7
		mov	[esp+5Ch+Str1],	ebx
		call	oscar_data_addhandler
		mov	[esp+5Ch+var_4C], 0
		mov	[esp+5Ch+var_50], offset sub_6889BA7C
		mov	[esp+5Ch+var_54], 5
		mov	[esp+5Ch+Str2],	7
		mov	[esp+5Ch+Str1],	ebx
		call	oscar_data_addhandler
		mov	[esp+5Ch+var_4C], 0
		mov	[esp+5Ch+var_50], offset loc_6889B950
		mov	[esp+5Ch+var_54], 7
		mov	[esp+5Ch+Str2],	7
		mov	[esp+5Ch+Str1],	ebx
		call	oscar_data_addhandler
		mov	[esp+5Ch+var_4C], 0
		mov	[esp+5Ch+var_50], offset sub_6889EA6C
		mov	[esp+5Ch+var_54], 1
		mov	[esp+5Ch+Str2],	18h
		mov	[esp+5Ch+Str1],	ebx
		call	oscar_data_addhandler
		mov	[esp+5Ch+var_4C], 0
		mov	[esp+5Ch+var_50], offset sub_6889E8E4
		mov	[esp+5Ch+var_54], 7
		mov	[esp+5Ch+Str2],	18h
		mov	[esp+5Ch+Str1],	ebx
		call	oscar_data_addhandler
		mov	[esp+5Ch+var_4C], 0
		mov	[esp+5Ch+var_50], offset sub_6889E454
		mov	[esp+5Ch+var_54], 3
		mov	[esp+5Ch+Str2],	17h
		mov	[esp+5Ch+Str1],	ebx
		call	oscar_data_addhandler
		mov	[esp+5Ch+var_4C], 0
		mov	[esp+5Ch+var_50], offset sub_6889E310
		mov	[esp+5Ch+var_54], 7
		mov	[esp+5Ch+Str2],	17h
		mov	[esp+5Ch+Str1],	ebx
		call	oscar_data_addhandler
		mov	[esp+5Ch+var_4C], 0
		mov	[esp+5Ch+var_50], offset sub_68899EF8
		mov	[esp+5Ch+var_54], 0Ah
		mov	[esp+5Ch+Str2],	17h
		mov	[esp+5Ch+Str1],	ebx
		call	oscar_data_addhandler
		mov	[esp+5Ch+var_4C], 0
		mov	[esp+5Ch+var_50], offset sub_6889D568
		mov	[esp+5Ch+var_54], 5
		mov	[esp+5Ch+Str2],	10h
		mov	[esp+5Ch+Str1],	ebx
		call	oscar_data_addhandler
		mov	[esp+5Ch+var_4C], 0
		mov	[esp+5Ch+var_50], offset sub_6889EA6C
		mov	[esp+5Ch+var_54], 1
		mov	[esp+5Ch+Str2],	9
		mov	[esp+5Ch+Str1],	ebx
		call	oscar_data_addhandler
		mov	[esp+5Ch+var_4C], 0
		mov	[esp+5Ch+var_50], offset sub_6889DECC
		mov	[esp+5Ch+var_54], 3
		mov	[esp+5Ch+Str2],	9
		mov	[esp+5Ch+Str1],	ebx
		call	oscar_data_addhandler
		mov	[esp+5Ch+var_4C], 0
		mov	[esp+5Ch+var_50], offset sub_6889EA6C
		mov	[esp+5Ch+var_54], 1
		mov	[esp+5Ch+Str2],	3
		mov	[esp+5Ch+Str1],	ebx
		call	oscar_data_addhandler
		mov	[esp+5Ch+var_4C], 0
		mov	[esp+5Ch+var_50], offset loc_6889B8F0
		mov	[esp+5Ch+var_54], 3
		mov	[esp+5Ch+Str2],	3
		mov	[esp+5Ch+Str1],	ebx
		call	oscar_data_addhandler
		mov	[esp+5Ch+var_4C], 0
		mov	[esp+5Ch+var_50], offset sub_6889D79C
		mov	[esp+5Ch+var_54], 0Bh
		mov	[esp+5Ch+Str2],	3
		mov	[esp+5Ch+Str1],	ebx
		call	oscar_data_addhandler
		mov	[esp+5Ch+var_4C], 0
		mov	[esp+5Ch+var_50], offset sub_6889D4CC
		mov	[esp+5Ch+var_54], 0Ch
		mov	[esp+5Ch+Str2],	3
		mov	[esp+5Ch+Str1],	ebx
		call	oscar_data_addhandler
		mov	[esp+5Ch+var_4C], 0
		mov	[esp+5Ch+var_50], offset sub_6889EA6C
		mov	[esp+5Ch+var_54], 1
		mov	[esp+5Ch+Str2],	0Eh
		mov	[esp+5Ch+Str1],	ebx
		call	oscar_data_addhandler
		mov	[esp+5Ch+var_4C], 0
		mov	[esp+5Ch+var_50], offset sub_6889D430
		mov	[esp+5Ch+var_54], 3
		mov	[esp+5Ch+Str2],	0Eh
		mov	[esp+5Ch+Str1],	ebx
		call	oscar_data_addhandler
		mov	[esp+5Ch+var_4C], 0
		mov	[esp+5Ch+var_50], offset sub_6889D3A4
		mov	[esp+5Ch+var_54], 4
		mov	[esp+5Ch+Str2],	0Eh
		mov	[esp+5Ch+Str1],	ebx
		call	oscar_data_addhandler
		mov	[esp+5Ch+var_4C], 0
		mov	[esp+5Ch+var_50], offset loc_6889B870
		mov	[esp+5Ch+var_54], 2
		mov	[esp+5Ch+Str2],	0Eh
		mov	[esp+5Ch+Str1],	ebx
		call	oscar_data_addhandler
		mov	[esp+5Ch+var_4C], 0
		mov	[esp+5Ch+var_50], offset sub_6889D300
		mov	[esp+5Ch+var_54], 6
		mov	[esp+5Ch+Str2],	0Eh
		mov	[esp+5Ch+Str1],	ebx
		call	oscar_data_addhandler
		mov	[esp+5Ch+var_4C], 0
		mov	[esp+5Ch+var_50], offset sub_6889EA6C
		mov	[esp+5Ch+var_54], 1
		mov	[esp+5Ch+Str2],	0Dh
		mov	[esp+5Ch+Str1],	ebx
		call	oscar_data_addhandler
		mov	[esp+5Ch+var_4C], 0
		mov	[esp+5Ch+var_50], offset sub_6889D028
		mov	[esp+5Ch+var_54], 9
		mov	[esp+5Ch+Str2],	0Dh
		mov	[esp+5Ch+Str1],	ebx
		call	oscar_data_addhandler
		mov	[esp+5Ch+var_4C], 0
		mov	[esp+5Ch+var_50], offset loc_6889CF00
		mov	[esp+5Ch+var_54], 1
		mov	[esp+5Ch+Str2],	13h
		mov	[esp+5Ch+Str1],	ebx
		call	oscar_data_addhandler
		mov	[esp+5Ch+var_4C], 0
		mov	[esp+5Ch+var_50], offset sub_6889B740
		mov	[esp+5Ch+var_54], 3
		mov	[esp+5Ch+Str2],	13h
		mov	[esp+5Ch+Str1],	ebx
		call	oscar_data_addhandler
		mov	[esp+5Ch+var_4C], 0
		mov	[esp+5Ch+var_50], offset sub_688A46F4
		mov	[esp+5Ch+var_54], 6
		mov	[esp+5Ch+Str2],	13h
		mov	[esp+5Ch+Str1],	ebx
		call	oscar_data_addhandler
		mov	[esp+5Ch+var_4C], 0
		mov	[esp+5Ch+var_50], offset loc_6889B52C
		mov	[esp+5Ch+var_54], 0Eh
		mov	[esp+5Ch+Str2],	13h
		mov	[esp+5Ch+Str1],	ebx
		call	oscar_data_addhandler
		mov	[esp+5Ch+var_4C], 0
		mov	[esp+5Ch+var_50], offset sub_6889CC50
		mov	[esp+5Ch+var_54], 8
		mov	[esp+5Ch+Str2],	13h
		mov	[esp+5Ch+Str1],	ebx
		call	oscar_data_addhandler
		mov	[esp+5Ch+var_4C], 0
		mov	[esp+5Ch+var_50], offset sub_6889CC50
		mov	[esp+5Ch+var_54], 9
		mov	[esp+5Ch+Str2],	13h
		mov	[esp+5Ch+Str1],	ebx
		call	oscar_data_addhandler
		mov	[esp+5Ch+var_4C], 0
		mov	[esp+5Ch+var_50], offset sub_6889B308
		mov	[esp+5Ch+var_54], 15h
		mov	[esp+5Ch+Str2],	13h
		mov	[esp+5Ch+Str1],	ebx
		call	oscar_data_addhandler
		mov	[esp+5Ch+var_4C], 0
		mov	[esp+5Ch+var_50], offset loc_6889CAF4
		mov	[esp+5Ch+var_54], 19h
		mov	[esp+5Ch+Str2],	13h
		mov	[esp+5Ch+Str1],	ebx
		call	oscar_data_addhandler
		mov	[esp+5Ch+var_4C], 0
		mov	[esp+5Ch+var_50], offset sub_6889B168
		mov	[esp+5Ch+var_54], 1Bh
		mov	[esp+5Ch+Str2],	13h
		mov	[esp+5Ch+Str1],	ebx
		call	oscar_data_addhandler
		mov	[esp+5Ch+var_4C], 0
		mov	[esp+5Ch+var_50], offset loc_6889CBB4
		mov	[esp+5Ch+var_54], 1Ch
		mov	[esp+5Ch+Str2],	13h
		mov	[esp+5Ch+Str1],	ebx
		call	oscar_data_addhandler
		mov	[esp+5Ch+var_4C], 0
		mov	[esp+5Ch+var_50], offset sub_6889F454
		mov	[esp+5Ch+var_54], 7
		mov	[esp+5Ch+Str2],	4
		mov	[esp+5Ch+Str1],	ebx
		call	oscar_data_addhandler
		mov	[esp+5Ch+var_4C], 0
		mov	[esp+5Ch+var_50], offset sub_6889AFD0
		mov	[esp+5Ch+var_54], 0Ah
		mov	[esp+5Ch+Str2],	4
		mov	[esp+5Ch+Str1],	ebx
		call	oscar_data_addhandler
		mov	[esp+5Ch+var_4C], 0
		mov	[esp+5Ch+var_50], offset sub_6889F200
		mov	[esp+5Ch+var_54], 0Bh
		mov	[esp+5Ch+Str2],	4
		mov	[esp+5Ch+Str1],	ebx
		call	oscar_data_addhandler
		mov	[esp+5Ch+var_4C], 0
		mov	[esp+5Ch+var_50], offset sub_6889CA2C
		mov	[esp+5Ch+var_54], 14h
		mov	[esp+5Ch+Str2],	4
		mov	[esp+5Ch+Str1],	ebx
		call	oscar_data_addhandler
		mov	[esp+5Ch+var_4C], 0
		mov	[esp+5Ch+var_50], offset loc_6889AF34
		mov	[esp+5Ch+var_54], 3
		mov	[esp+5Ch+Str2],	2
		mov	[esp+5Ch+Str1],	ebx
		call	oscar_data_addhandler
		mov	[esp+5Ch+var_4C], 0
		mov	[esp+5Ch+var_50], offset sub_6889EA6C
		mov	[esp+5Ch+var_54], 1
		mov	[esp+5Ch+Str2],	1
		mov	[esp+5Ch+Str1],	ebx
		call	oscar_data_addhandler
		mov	[esp+5Ch+var_4C], 0
		mov	[esp+5Ch+var_50], offset sub_6889C9E8
		mov	[esp+5Ch+var_54], 0Fh
		mov	[esp+5Ch+Str2],	1
		mov	[esp+5Ch+Str1],	ebx
		call	oscar_data_addhandler
		mov	[esp+5Ch+var_4C], 0
		mov	[esp+5Ch+var_50], offset sub_6889C3AC
		mov	[esp+5Ch+var_54], 1Fh
		mov	[esp+5Ch+Str2],	1
		mov	[esp+5Ch+Str1],	ebx
		call	oscar_data_addhandler
		mov	[esp+5Ch+var_4C], 0
		mov	[esp+5Ch+var_50], offset sub_6889C040
		mov	[esp+5Ch+var_54], 5
		mov	[esp+5Ch+Str2],	1
		mov	[esp+5Ch+Str1],	ebx
		call	oscar_data_addhandler
		mov	[esp+5Ch+var_4C], 0
		mov	[esp+5Ch+var_50], offset loc_6889AE74
		mov	[esp+5Ch+var_54], 13h
		mov	[esp+5Ch+Str2],	1
		mov	[esp+5Ch+Str1],	ebx
		call	oscar_data_addhandler
		mov	[esp+5Ch+var_4C], 0
		mov	[esp+5Ch+var_50], offset loc_6889ADD0
		mov	[esp+5Ch+var_54], 2
		mov	[esp+5Ch+Str2],	8
		mov	[esp+5Ch+Str1],	ebx
		call	oscar_data_addhandler
		mov	[esp+5Ch+var_4C], 0
		mov	[esp+5Ch+var_50], offset loc_6889AD38
		mov	[esp+5Ch+var_54], 1
		mov	[esp+5Ch+Str2],	0Ah
		mov	[esp+5Ch+Str1],	ebx
		call	oscar_data_addhandler
		mov	[esp+5Ch+var_4C], 0
		mov	[esp+5Ch+var_50], offset sub_6889BD30
		mov	[esp+5Ch+var_54], 3
		mov	[esp+5Ch+Str2],	0Ah
		mov	[esp+5Ch+Str1],	ebx
		call	oscar_data_addhandler
		mov	[esp+5Ch+Str2],	offset aRegisteredHand ; "Registered handlers: "
		mov	[esp+5Ch+Str1],	esi
		call	g_string_append
		mov	eax, [ebx+0ECh]
		mov	[esp+5Ch+Str1],	eax
		call	g_hash_table_get_keys
		mov	[esp+5Ch+var_30], eax
		mov	[esp+5Ch+Str1],	eax
		call	g_list_copy
		mov	[esp+5Ch+Str2],	offset sub_68898C40
		mov	[esp+5Ch+Str1],	eax
		call	g_list_sort
		mov	[esp+5Ch+var_34], eax
		mov	edi, eax
		test	eax, eax
		jz	loc_688A1287

loc_688A1260:				; CODE XREF: oscar_login+811j
		mov	eax, [edi]
		movzx	edx, ax
		mov	[esp+5Ch+var_50], edx
		shr	eax, 10h
		mov	[esp+5Ch+var_54], eax
		mov	[esp+5Ch+Str2],	offset a04x04x ; "%04x/%04x, "
		mov	[esp+5Ch+Str1],	esi
		call	g_string_append_printf
		mov	edi, [edi+4]
		test	edi, edi
		jnz	short loc_688A1260

loc_688A1287:				; CODE XREF: oscar_login+7E6j
		mov	eax, [esp+5Ch+var_34]
		mov	[esp+5Ch+Str1],	eax
		call	g_list_free
		mov	eax, [esp+5Ch+var_30]
		mov	[esp+5Ch+Str1],	eax
		call	g_list_free
		mov	eax, [esi]
		mov	[esp+5Ch+var_54], eax
		mov	[esp+5Ch+Str2],	offset aS_2 ; "%s\n"
		mov	[esp+5Ch+Str1],	offset aOscar_13 ; "oscar"
		call	purple_debug_misc
		mov	[esp+5Ch+Str2],	1
		mov	[esp+5Ch+Str1],	esi
		call	g_string_free
		mov	[esp+5Ch+var_54], ebp
		mov	[esp+5Ch+Str2],	offset aOscar_loginGcP ; "oscar_login: gc = %p\n"
		mov	[esp+5Ch+Str1],	offset aOscar_13 ; "oscar"
		call	purple_debug_misc
		mov	edx, [esp+5Ch+var_38]
		mov	[esp+5Ch+Str1],	edx
		call	purple_account_get_username
		mov	[esp+5Ch+Str1],	eax
		call	oscar_util_valid_name
		test	eax, eax
		jz	loc_688A14A0
		or	dword ptr [ebp+4], 1
		mov	edx, [esp+5Ch+var_38]
		mov	[esp+5Ch+Str1],	edx
		call	purple_account_get_protocol_id
		mov	[esp+5Ch+Str2],	offset aPrplIcq	; "prpl-icq"
		mov	[esp+5Ch+Str1],	eax
		call	g_str_equal
		test	eax, eax
		jnz	loc_688A1494
		or	dword ptr [ebp+4], 4

loc_688A1329:				; CODE XREF: oscar_login+A27j
		mov	edx, [esp+5Ch+var_38]
		mov	[esp+5Ch+Str1],	edx
		call	purple_account_get_protocol_id
		mov	[esp+5Ch+Str2],	offset aPrplIcq	; "prpl-icq"
		mov	[esp+5Ch+Str1],	eax
		call	g_str_equal
		test	eax, eax
		jz	short loc_688A1350
		or	dword ptr [ebp+4], 200h

loc_688A1350:				; CODE XREF: oscar_login+8D3j
		mov	[esp+5Ch+var_54], 1446h
		mov	[esp+5Ch+Str2],	offset aPort_0 ; "port"
		mov	edx, [esp+5Ch+var_38]
		mov	[esp+5Ch+Str1],	edx
		call	purple_account_get_int
		mov	[ebx+0F4h], ax
		mov	[esp+5Ch+var_54], offset aOpportunisti_0 ; "opportunistic_encryption"
		mov	[esp+5Ch+Str2],	offset aEncryption_0 ; "encryption"
		mov	edx, [esp+5Ch+var_38]
		mov	[esp+5Ch+Str1],	edx
		call	purple_account_get_string
		mov	[esp+5Ch+var_34], eax
		call	purple_ssl_is_supported
		test	eax, eax
		jnz	short loc_688A13B2
		mov	edi, offset aRequire_encryp ; "require_encryption"
		mov	ecx, 13h
		mov	esi, [esp+5Ch+var_34]
		repe cmpsb
		jz	loc_688A1720

loc_688A13B2:				; CODE XREF: oscar_login+926j
		call	purple_ssl_is_supported
		test	eax, eax
		jz	loc_688A160C
		mov	edi, offset aNo_encryptio_0 ; "no_encryption"
		mov	ecx, 0Eh
		mov	esi, [esp+5Ch+var_34]
		repe cmpsb
		setnz	al
		movzx	eax, al

loc_688A13D5:				; CODE XREF: oscar_login+B9Aj
		mov	[ebx+40h], eax
		mov	[esp+5Ch+var_50], ebp
		mov	[esp+5Ch+var_54], offset sub_6889ACB0
		mov	[esp+5Ch+Str2],	offset aPurpleAwayIdle ; "/purple/away/idle_reporting"
		mov	[esp+5Ch+Str1],	ebp
		call	purple_prefs_connect_callback
		mov	[esp+5Ch+var_50], ebp
		mov	[esp+5Ch+var_54], offset loc_6889AC40
		mov	[esp+5Ch+Str2],	offset aPluginsPrplOsc ; "/plugins/prpl/oscar/recent_buddies"
		mov	[esp+5Ch+Str1],	ebp
		call	purple_prefs_connect_callback
		mov	[esp+5Ch+var_54], 1
		mov	[esp+5Ch+Str2],	offset aUse_clientlogi ; "use_clientlogin"
		mov	edx, [esp+5Ch+var_38]
		mov	[esp+5Ch+Str1],	edx
		call	purple_account_get_bool
		test	eax, eax
		jz	loc_688A1504
		mov	edx, [esp+5Ch+var_38]
		mov	[esp+5Ch+Str1],	edx
		call	purple_account_get_username
		mov	[esp+5Ch+Str2],	eax
		mov	[esp+5Ch+Str1],	ebx
		call	send_client_login

loc_688A144C:				; CODE XREF: oscar_login+B53j
					; oscar_login+B62j
		mov	[esp+5Ch+Str2],	offset aConnecting ; "Connecting"
		mov	[esp+5Ch+Str1],	offset aPidgin_6 ; "pidgin"
		call	libintl_dgettext
		mov	[esp+5Ch+var_50], 6
		mov	[esp+5Ch+var_54], 0
		mov	[esp+5Ch+Str2],	eax
		mov	[esp+5Ch+Str1],	ebp
		call	purple_connection_update_progress

loc_688A147C:				; CODE XREF: oscar_login+B90j
					; oscar_login+CD4j
		mov	edx, [esp+5Ch+var_20]
		xor	edx, ds:__stack_chk_guard
		jnz	loc_688A17A2
		add	esp, 4Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_688A1494:				; CODE XREF: oscar_login+8ABj
		mov	dword ptr [ebx+44h], 1
		jmp	loc_688A1329
; ---------------------------------------------------------------------------

loc_688A14A0:				; CODE XREF: oscar_login+883j
		mov	edx, [esp+5Ch+var_38]
		mov	[esp+5Ch+Str1],	edx
		call	purple_account_get_username
		mov	ebx, eax
		mov	[esp+5Ch+Str2],	offset aUnableToSignOn ; "Unable to sign on as %s because the use"...
		mov	[esp+5Ch+Str1],	offset aPidgin_6 ; "pidgin"
		call	libintl_dgettext
		mov	[esp+5Ch+Str2],	ebx
		mov	[esp+5Ch+Str1],	eax
		call	g_strdup_printf
		mov	ebx, eax
		mov	[esp+5Ch+var_54], eax
		mov	[esp+5Ch+Str2],	7
		mov	[esp+5Ch+Str1],	ebp
		call	purple_connection_error_reason
		mov	eax, [esp+5Ch+var_20]
		xor	eax, ds:__stack_chk_guard
		jnz	loc_688A17A2
		mov	[esp+5Ch+arg_0], ebx
		add	esp, 4Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		jmp	g_free
; ---------------------------------------------------------------------------

loc_688A1504:				; CODE XREF: oscar_login+9BAj
		mov	[esp+5Ch+Str2],	17h
		mov	[esp+5Ch+Str1],	ebx
		call	flap_connection_new
		mov	[esp+5Ch+var_34], eax
		mov	eax, [ebx+40h]
		test	eax, eax
		jnz	loc_688A1614
		cmp	dword ptr [ebx+44h], 1
		sbb	eax, eax
		not	eax
		and	eax, 2
		mov	eax, ds:off_688B53EC[eax*4]
		mov	[esp+5Ch+var_54], eax
		mov	[esp+5Ch+Str2],	offset aServer ; "server"
		mov	edx, [esp+5Ch+var_38]
		mov	[esp+5Ch+Str1],	edx
		call	purple_account_get_string
		mov	esi, eax
		cmp	dword ptr [ebx+44h], 1
		sbb	edx, edx
		and	edx, 0FFFFFFFEh
		mov	eax, ds:off_688B53F8[edx*4]
		mov	[esp+5Ch+Str2],	eax ; Str2
		mov	[esp+5Ch+Str1],	esi ; Str1
		call	strcmp
		test	eax, eax
		jz	loc_688A174D

loc_688A1573:				; CODE XREF: oscar_login+D29j
		mov	[esp+5Ch+var_54], 1446h
		mov	[esp+5Ch+Str2],	offset aPort_0 ; "port"
		mov	edx, [esp+5Ch+var_38]
		mov	[esp+5Ch+Str1],	edx
		call	purple_account_get_int
		mov	edx, [esp+5Ch+var_34]
		mov	[esp+5Ch+var_48], edx
		mov	[esp+5Ch+var_4C], offset sub_6889AB20
		mov	[esp+5Ch+var_50], eax
		mov	[esp+5Ch+var_54], esi
		mov	edx, [esp+5Ch+var_38]
		mov	[esp+5Ch+Str2],	edx
		mov	[esp+5Ch+Str1],	0
		call	purple_proxy_connect
		mov	edx, [esp+5Ch+var_34]
		mov	[edx+1Ch], eax
		mov	eax, [edx+30h]

loc_688A15C5:				; CODE XREF: oscar_login+CA7j
		test	eax, eax
		jnz	loc_688A144C
		mov	eax, [esp+5Ch+var_34]
		mov	eax, [eax+1Ch]
		test	eax, eax
		jnz	loc_688A144C
		mov	[esp+5Ch+Str2],	offset aUnableToConn_4 ; "Unable to connect"
		mov	[esp+5Ch+Str1],	offset aPidgin_6 ; "pidgin"
		call	libintl_dgettext
		mov	[esp+5Ch+var_54], eax
		mov	[esp+5Ch+Str2],	0
		mov	[esp+5Ch+Str1],	ebp
		call	purple_connection_error_reason
		jmp	loc_688A147C
; ---------------------------------------------------------------------------
		align 4

loc_688A160C:				; CODE XREF: oscar_login+945j
		xor	eax, eax
		jmp	loc_688A13D5
; ---------------------------------------------------------------------------
		align 4

loc_688A1614:				; CODE XREF: oscar_login+AA9j
		cmp	dword ptr [ebx+44h], 1
		sbb	eax, eax
		and	eax, 0FFFFFFFEh
		mov	eax, ds:off_688B53F8[eax*4]
		mov	[esp+5Ch+var_54], eax
		mov	[esp+5Ch+Str2],	offset aServer ; "server"
		mov	edx, [esp+5Ch+var_38]
		mov	[esp+5Ch+Str1],	edx
		call	purple_account_get_string
		mov	[esp+5Ch+var_30], eax
		cmp	dword ptr [ebx+44h], 1
		sbb	eax, eax
		not	eax
		and	eax, 2
		mov	eax, ds:off_688B53EC[eax*4]
		mov	[esp+5Ch+Str2],	eax ; Str2
		mov	eax, [esp+5Ch+var_30]
		mov	[esp+5Ch+Str1],	eax ; Str1
		call	strcmp
		test	eax, eax
		jz	short loc_688A1678
		mov	edi, offset aLogin_messagin ; "login.messaging.aol.com"
		mov	ecx, 18h
		mov	esi, [esp+5Ch+var_30]
		repe cmpsb
		jnz	short loc_688A16C8

loc_688A1678:				; CODE XREF: oscar_login+BF0j
		mov	[esp+5Ch+Str2],	offset aAccountUsesSsl ; "Account uses SSL, so changing	server to"...
		mov	[esp+5Ch+Str1],	offset aOscar_13 ; "oscar"
		call	purple_debug_info
		cmp	dword ptr [ebx+44h], 1
		sbb	eax, eax
		and	eax, 0FFFFFFFEh
		mov	eax, ds:off_688B53F8[eax*4]
		mov	[esp+5Ch+var_54], eax
		mov	[esp+5Ch+Str2],	offset aServer ; "server"
		mov	edx, [esp+5Ch+var_38]
		mov	[esp+5Ch+Str1],	edx
		call	purple_account_set_string
		cmp	dword ptr [ebx+44h], 1
		sbb	eax, eax
		and	eax, 0FFFFFFFEh
		mov	eax, ds:off_688B53F8[eax*4]
		mov	[esp+5Ch+var_30], eax

loc_688A16C8:				; CODE XREF: oscar_login+C02j
		mov	[esp+5Ch+var_54], 1446h
		mov	[esp+5Ch+Str2],	offset aPort_0 ; "port"
		mov	edx, [esp+5Ch+var_38]
		mov	[esp+5Ch+Str1],	edx
		call	purple_account_get_int
		mov	edx, [esp+5Ch+var_34]
		mov	[esp+5Ch+var_48], edx
		mov	[esp+5Ch+var_4C], offset sub_6889AB9C
		mov	[esp+5Ch+var_50], offset sub_6889ABF8
		mov	[esp+5Ch+var_54], eax
		mov	eax, [esp+5Ch+var_30]
		mov	[esp+5Ch+Str2],	eax
		mov	edx, [esp+5Ch+var_38]
		mov	[esp+5Ch+Str1],	edx
		call	purple_ssl_connect
		mov	edx, [esp+5Ch+var_34]
		mov	[edx+30h], eax
		jmp	loc_688A15C5
; ---------------------------------------------------------------------------

loc_688A1720:				; CODE XREF: oscar_login+938j
		mov	[esp+5Ch+Str2],	offset aYouRequiredE_1 ; "You required encryption in your account"...
		mov	[esp+5Ch+Str1],	offset aPidgin_6 ; "pidgin"
		call	libintl_dgettext
		mov	[esp+5Ch+var_54], eax
		mov	[esp+5Ch+Str2],	4
		mov	[esp+5Ch+Str1],	ebp
		call	purple_connection_error_reason
		jmp	loc_688A147C
; ---------------------------------------------------------------------------

loc_688A174D:				; CODE XREF: oscar_login+AF9j
		mov	[esp+5Ch+Str2],	offset aAccountDoesNot ; "Account does not use SSL, so changing	s"...
		mov	[esp+5Ch+Str1],	offset aOscar_13 ; "oscar"
		call	purple_debug_info
		cmp	dword ptr [ebx+44h], 1
		sbb	eax, eax
		not	eax
		and	eax, 2
		mov	eax, ds:off_688B53EC[eax*4]
		mov	[esp+5Ch+var_54], eax
		mov	[esp+5Ch+Str2],	offset aServer ; "server"
		mov	edx, [esp+5Ch+var_38]
		mov	[esp+5Ch+Str1],	edx
		call	purple_account_set_string
		cmp	dword ptr [ebx+44h], 1
		sbb	eax, eax
		not	eax
		and	eax, 2
		mov	esi, ds:off_688B53EC[eax*4]
		jmp	loc_688A1573
; ---------------------------------------------------------------------------

loc_688A17A2:				; CODE XREF: oscar_login+A12j
					; oscar_login+A7Aj
		call	__stack_chk_fail
oscar_login	endp

; ---------------------------------------------------------------------------
		align 4
; Exported entry 226. oscar_close

; =============== S U B	R O U T	I N E =======================================


		public oscar_close
oscar_close	proc near

var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_10		= dword	ptr -10h
arg_0		= dword	ptr  4

		push	edi
		push	esi
		push	ebx
		sub	esp, 20h
		mov	edi, [esp+2Ch+arg_0]
		mov	eax, ds:__stack_chk_guard
		mov	[esp+2Ch+var_10], eax
		xor	eax, eax
		mov	[esp+2Ch+var_2C], edi
		call	purple_connection_get_protocol_data
		mov	ebx, eax
		mov	eax, [eax+34h]
		test	eax, eax
		jz	short loc_688A181E
		xchg	ax, ax

loc_688A17D0:				; CODE XREF: oscar_close+46j
		mov	esi, [eax]
		mov	[esp+2Ch+var_28], esi
		mov	[esp+2Ch+var_2C], eax
		call	g_slist_remove
		mov	[ebx+34h], eax
		mov	[esp+2Ch+var_2C], esi
		call	oscar_chat_destroy
		mov	eax, [ebx+34h]
		test	eax, eax
		jnz	short loc_688A17D0
		mov	eax, [ebx+0Ch]
		test	eax, eax
		jz	short loc_688A1825
		nop

loc_688A17F8:				; CODE XREF: oscar_close+7Bj
		mov	esi, [eax]
		mov	eax, [esi]
		mov	[esp+2Ch+var_2C], eax
		call	g_free
		mov	[esp+2Ch+var_28], esi
		mov	eax, [ebx+0Ch]
		mov	[esp+2Ch+var_2C], eax
		call	g_slist_remove
		mov	[ebx+0Ch], eax
		mov	[esp+2Ch+var_2C], esi
		call	g_free

loc_688A181E:				; CODE XREF: oscar_close+24j
		mov	eax, [ebx+0Ch]
		test	eax, eax
		jnz	short loc_688A17F8

loc_688A1825:				; CODE XREF: oscar_close+4Dj
		mov	[esp+2Ch+var_2C], ebx
		call	oscar_data_destroy
		mov	[esp+2Ch+var_28], 0
		mov	[esp+2Ch+var_2C], edi
		call	purple_connection_set_protocol_data
		mov	[esp+2Ch+var_2C], edi
		call	purple_prefs_disconnect_by_handle
		mov	[esp+2Ch+var_28], offset aSignedOff_ ; "Signed off.\n"
		mov	[esp+2Ch+var_2C], offset aOscar_13 ; "oscar"
		call	purple_debug_info
		mov	eax, [esp+2Ch+var_10]
		xor	eax, ds:__stack_chk_guard
		jnz	short loc_688A186C
		add	esp, 20h
		pop	ebx
		pop	esi
		pop	edi
		retn
; ---------------------------------------------------------------------------

loc_688A186C:				; CODE XREF: oscar_close+BBj
		call	__stack_chk_fail
oscar_close	endp

; ---------------------------------------------------------------------------
		align 4
; Exported entry 227. oscar_connect_to_bos

; =============== S U B	R O U T	I N E =======================================


		public oscar_connect_to_bos
oscar_connect_to_bos proc near		; CODE XREF: sub_68882584+60Bp

var_6C		= dword	ptr -6Ch
var_68		= dword	ptr -68h
var_64		= dword	ptr -64h
var_60		= dword	ptr -60h
var_5C		= dword	ptr -5Ch
var_58		= dword	ptr -58h
var_54		= dword	ptr -54h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_20		= dword	ptr -20h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h
arg_18		= dword	ptr  1Ch

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 5Ch
		mov	ebx, [esp+6Ch+arg_0]
		mov	edx, [esp+6Ch+arg_4]
		mov	[esp+6Ch+var_3C], edx
		mov	edx, [esp+6Ch+arg_8]
		mov	[esp+6Ch+var_30], edx
		mov	edx, [esp+6Ch+arg_10]
		mov	[esp+6Ch+var_38], edx
		mov	ecx, [esp+6Ch+arg_14]
		mov	edx, [esp+6Ch+arg_18]
		mov	edi, [esp+6Ch+arg_C]
		movzx	ebp, cx
		mov	eax, ds:__stack_chk_guard
		mov	[esp+6Ch+var_20], eax
		xor	eax, eax
		mov	[esp+6Ch+var_6C], ebx
		mov	[esp+6Ch+var_44], edx
		mov	[esp+6Ch+var_40], ecx
		call	purple_connection_get_account
		mov	[esp+6Ch+var_34], eax
		mov	[esp+6Ch+var_68], 2
		mov	eax, [esp+6Ch+var_3C]
		mov	[esp+6Ch+var_6C], eax
		call	flap_connection_new
		mov	esi, eax
		mov	ecx, [esp+6Ch+var_40]
		mov	[eax+20h], cx
		mov	[esp+6Ch+var_68], ebp
		mov	eax, [esp+6Ch+var_38]
		mov	[esp+6Ch+var_6C], eax
		call	g_memdup
		mov	[esi+24h], eax
		mov	edx, [esp+6Ch+var_44]
		test	edx, edx
		jz	loc_688A19D0
		mov	[esp+6Ch+var_54], esi
		mov	[esp+6Ch+var_58], edx
		mov	[esp+6Ch+var_5C], offset sub_6889AB9C
		mov	[esp+6Ch+var_60], offset sub_6889ABF8
		movzx	eax, di
		mov	[esp+6Ch+var_64], eax
		mov	edx, [esp+6Ch+var_30]
		mov	[esp+6Ch+var_68], edx
		mov	eax, [esp+6Ch+var_34]
		mov	[esp+6Ch+var_6C], eax
		call	purple_ssl_connect_with_ssl_cn
		mov	[esi+30h], eax

loc_688A1941:				; CODE XREF: oscar_connect_to_bos+191j
		test	eax, eax
		jz	short loc_688A199C

loc_688A1945:				; CODE XREF: oscar_connect_to_bos+12Dj
		mov	edx, [esp+6Ch+var_3C]
		mov	[edx+0F4h], di
		mov	[esp+6Ch+var_68], offset aReceivedAuthor ; "Received authorization"
		mov	[esp+6Ch+var_6C], offset aPidgin_6 ; "pidgin"
		call	libintl_dgettext
		mov	[esp+6Ch+var_60], 6
		mov	[esp+6Ch+var_64], 3
		mov	[esp+6Ch+var_68], eax
		mov	[esp+6Ch+var_6C], ebx
		call	purple_connection_update_progress
		mov	eax, 1

loc_688A1985:				; CODE XREF: oscar_connect_to_bos+159j
		mov	edx, [esp+6Ch+var_20]
		xor	edx, ds:__stack_chk_guard
		jnz	short loc_688A1A0A
		add	esp, 5Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 4

loc_688A199C:				; CODE XREF: oscar_connect_to_bos+CFj
		mov	eax, [esi+1Ch]
		test	eax, eax
		jnz	short loc_688A1945
		mov	[esp+6Ch+var_68], offset aUnableToConn_4 ; "Unable to connect"
		mov	[esp+6Ch+var_6C], offset aPidgin_6 ; "pidgin"
		call	libintl_dgettext
		mov	[esp+6Ch+var_64], eax
		mov	[esp+6Ch+var_68], 0
		mov	[esp+6Ch+var_6C], ebx
		call	purple_connection_error_reason
		xor	eax, eax
		jmp	short loc_688A1985
; ---------------------------------------------------------------------------
		align 10h

loc_688A19D0:				; CODE XREF: oscar_connect_to_bos+91j
		mov	[esp+6Ch+var_58], esi
		mov	[esp+6Ch+var_5C], offset sub_6889AB20
		movzx	eax, di
		mov	[esp+6Ch+var_60], eax
		mov	edx, [esp+6Ch+var_30]
		mov	[esp+6Ch+var_64], edx
		mov	eax, [esp+6Ch+var_34]
		mov	[esp+6Ch+var_68], eax
		mov	[esp+6Ch+var_6C], 0
		call	purple_proxy_connect
		mov	[esi+1Ch], eax
		mov	eax, [esi+30h]
		jmp	loc_688A1941
; ---------------------------------------------------------------------------

loc_688A1A0A:				; CODE XREF: oscar_connect_to_bos+11Bj
		call	__stack_chk_fail
oscar_connect_to_bos endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 247. oscar_keepalive

; =============== S U B	R O U T	I N E =======================================


		public oscar_keepalive
oscar_keepalive	proc near

var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_10		= dword	ptr -10h
arg_0		= dword	ptr  4

		push	esi
		push	ebx
		sub	esp, 24h
		mov	eax, ds:__stack_chk_guard
		mov	[esp+2Ch+var_10], eax
		xor	eax, eax
		mov	eax, [esp+2Ch+arg_0]
		mov	[esp+2Ch+var_2C], eax
		call	purple_connection_get_protocol_data
		mov	esi, eax
		mov	ebx, [eax+0F0h]
		test	ebx, ebx
		jz	short loc_688A1A4D

loc_688A1A38:				; CODE XREF: oscar_keepalive+3Bj
		mov	edx, [ebx]
		mov	[esp+2Ch+var_28], edx
		mov	[esp+2Ch+var_2C], esi
		call	flap_connection_send_keepalive
		mov	ebx, [ebx+4]
		test	ebx, ebx
		jnz	short loc_688A1A38

loc_688A1A4D:				; CODE XREF: oscar_keepalive+26j
		mov	eax, [esp+2Ch+var_10]
		xor	eax, ds:__stack_chk_guard
		jnz	short loc_688A1A5F
		add	esp, 24h
		pop	ebx
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_688A1A5F:				; CODE XREF: oscar_keepalive+47j
		call	__stack_chk_fail
oscar_keepalive	endp

; Exported entry 264. oscar_send_typing

; =============== S U B	R O U T	I N E =======================================


		public oscar_send_typing
oscar_send_typing proc near

var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_30		= dword	ptr -30h
var_20		= dword	ptr -20h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 3Ch
		mov	esi, [esp+4Ch+arg_0]
		mov	ebx, [esp+4Ch+arg_4]
		mov	edx, [esp+4Ch+arg_8]
		mov	[esp+4Ch+var_30], edx
		mov	eax, ds:__stack_chk_guard
		mov	[esp+4Ch+var_20], eax
		xor	eax, eax
		mov	[esp+4Ch+var_4C], esi
		call	purple_connection_get_protocol_data
		mov	edi, eax
		mov	[esp+4Ch+var_44], 4
		mov	[esp+4Ch+var_40], 0
		mov	[esp+4Ch+var_48], ebx
		mov	[esp+4Ch+var_4C], eax
		call	peer_connection_find_by_type
		test	eax, eax
		jz	short loc_688A1ABB
		mov	ecx, [eax+24h]
		test	ecx, ecx
		jnz	loc_688A1B50

loc_688A1ABB:				; CODE XREF: oscar_send_typing+4Aj
		mov	eax, [esi+0Ch]
		mov	ebp, [eax+34h]
		test	ebp, ebp
		jnz	short loc_688A1ACF
		jmp	short loc_688A1AFF
; ---------------------------------------------------------------------------
		align 4

loc_688A1AC8:				; CODE XREF: oscar_send_typing+7Cj
		mov	ebp, [ebp+4]
		test	ebp, ebp
		jz	short loc_688A1AFC

loc_688A1ACF:				; CODE XREF: oscar_send_typing+5Fj
		mov	eax, [ebp+0]
		mov	[esp+4Ch+var_48], eax
		mov	[esp+4Ch+var_4C], ebx
		call	oscar_util_name_compare
		test	eax, eax
		jnz	short loc_688A1AC8

loc_688A1AE2:				; CODE XREF: oscar_send_typing+B8j
					; oscar_send_typing+BEj ...
		xor	eax, eax
		mov	edx, [esp+4Ch+var_20]
		xor	edx, ds:__stack_chk_guard
		jnz	loc_688A1BA4
		add	esp, 3Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_688A1AFC:				; CODE XREF: oscar_send_typing+69j
		mov	eax, [esi+0Ch]

loc_688A1AFF:				; CODE XREF: oscar_send_typing+61j
		mov	[esp+4Ch+var_48], ebx
		mov	[esp+4Ch+var_4C], eax
		call	purple_normalize
		mov	[esp+4Ch+var_48], eax
		mov	eax, [edi+38h]
		mov	[esp+4Ch+var_4C], eax
		call	g_hash_table_lookup
		test	eax, eax
		jz	short loc_688A1AE2
		mov	edx, [eax]
		test	edx, edx
		jz	short loc_688A1AE2
		cmp	[esp+4Ch+var_30], 1
		jz	short loc_688A1B83
		cmp	[esp+4Ch+var_30], 2
		jz	short loc_688A1B62
		mov	[esp+4Ch+var_40], 0
		mov	[esp+4Ch+var_44], ebx
		mov	[esp+4Ch+var_48], 1
		mov	[esp+4Ch+var_4C], edi
		call	aim_im_sendmtn
		jmp	short loc_688A1AE2
; ---------------------------------------------------------------------------

loc_688A1B50:				; CODE XREF: oscar_send_typing+51j
		mov	edx, [esp+4Ch+var_30]
		mov	[esp+4Ch+var_48], edx
		mov	[esp+4Ch+var_4C], eax
		call	peer_odc_send_typing
		jmp	short loc_688A1AE2
; ---------------------------------------------------------------------------

loc_688A1B62:				; CODE XREF: oscar_send_typing+CCj
		mov	[esp+4Ch+var_40], 1
		mov	[esp+4Ch+var_44], ebx
		mov	[esp+4Ch+var_48], 1
		mov	[esp+4Ch+var_4C], edi
		call	aim_im_sendmtn
		jmp	loc_688A1AE2
; ---------------------------------------------------------------------------

loc_688A1B83:				; CODE XREF: oscar_send_typing+C5j
		mov	[esp+4Ch+var_40], 2
		mov	[esp+4Ch+var_44], ebx
		mov	[esp+4Ch+var_48], 1
		mov	[esp+4Ch+var_4C], edi
		call	aim_im_sendmtn
		jmp	loc_688A1AE2
; ---------------------------------------------------------------------------

loc_688A1BA4:				; CODE XREF: oscar_send_typing+8Aj
		call	__stack_chk_fail
oscar_send_typing endp

; ---------------------------------------------------------------------------
		align 4
; Exported entry 263. oscar_send_im

; =============== S U B	R O U T	I N E =======================================


		public oscar_send_im
oscar_send_im	proc near

Str		= dword	ptr -9Ch
SubStr		= dword	ptr -98h
var_94		= dword	ptr -94h
var_90		= dword	ptr -90h
var_8C		= dword	ptr -8Ch
var_78		= dword	ptr -78h
var_74		= dword	ptr -74h
var_70		= dword	ptr -70h
var_6C		= dword	ptr -6Ch
var_68		= dword	ptr -68h
var_64		= dword	ptr -64h
var_60		= dword	ptr -60h
var_5A		= word ptr -5Ah
var_58		= dword	ptr -58h
var_54		= byte ptr -54h
var_50		= dword	ptr -50h
var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= word ptr -2Ch
var_28		= dword	ptr -28h
var_24		= word ptr -24h
var_20		= dword	ptr -20h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 8Ch
		mov	esi, [esp+9Ch+arg_0]
		mov	ebx, [esp+9Ch+arg_4]
		mov	edx, [esp+9Ch+arg_8]
		mov	[esp+9Ch+var_6C], edx
		mov	edi, [esp+9Ch+arg_C]
		mov	ecx, ds:__stack_chk_guard
		mov	[esp+9Ch+var_20], ecx
		xor	ecx, ecx
		mov	[esp+9Ch+Str], esi
		call	purple_connection_get_protocol_data
		mov	ebp, eax
		mov	[esp+9Ch+Str], esi
		call	purple_connection_get_account
		mov	esi, eax
		mov	[esp+9Ch+Str], ebx
		call	oscar_util_valid_name_sms
		mov	[esp+9Ch+var_70], eax
		mov	edx, [ebp+44h]
		test	edx, edx
		jz	short loc_688A1C11
		test	eax, eax
		jnz	loc_688A2340

loc_688A1C11:				; CODE XREF: oscar_send_im+5Bj
		mov	ecx, edi
		and	ecx, 8
		mov	[esp+9Ch+var_60], ecx
		jnz	loc_688A1EE8
		mov	ecx, [esp+9Ch+var_6C]
		mov	[esp+9Ch+Str], ecx
		call	g_strdup
		mov	[esp+9Ch+var_68], eax

loc_688A1C30:				; CODE XREF: oscar_send_im+350j
		mov	[esp+9Ch+var_94], 4
		mov	[esp+9Ch+var_90], 0
		mov	[esp+9Ch+SubStr], ebx
		mov	[esp+9Ch+Str], ebp
		call	peer_connection_find_by_type
		mov	[esp+9Ch+var_64], eax
		test	eax, eax
		jz	short loc_688A1C5F
		mov	eax, [eax+24h]
		test	eax, eax
		jnz	loc_688A2184

loc_688A1C5F:				; CODE XREF: oscar_send_im+A6j
		mov	[esp+9Ch+var_94], esi
		mov	[esp+9Ch+SubStr], ebx
		mov	[esp+9Ch+Str], 1
		call	purple_find_conversation_with_account
		mov	edi, eax
		mov	[esp+9Ch+SubStr], offset aImg ;	"<IMG "
		mov	eax, [esp+9Ch+var_68]
		mov	[esp+9Ch+Str], eax ; Str
		call	strstr
		test	eax, eax
		jz	short loc_688A1CD5
		mov	[esp+9Ch+Str], 0 ; Time
		call	time
		mov	[esp+9Ch+SubStr], offset aYourImImageWas ; "Your IM Image was not sent.	You must be"...
		mov	[esp+9Ch+Str], offset aPidgin_6	; "pidgin"
		mov	[esp+9Ch+var_78], eax
		call	libintl_dgettext
		mov	edx, [esp+9Ch+var_78]
		mov	[esp+9Ch+var_8C], edx
		mov	[esp+9Ch+var_90], 200h
		mov	[esp+9Ch+var_94], eax
		mov	[esp+9Ch+SubStr], offset byte_688B2167
		mov	[esp+9Ch+Str], edi
		call	purple_conversation_write

loc_688A1CD5:				; CODE XREF: oscar_send_im+DFj
		mov	[esp+9Ch+SubStr], ebx
		mov	[esp+9Ch+Str], esi
		call	purple_find_buddy
		mov	edi, eax
		mov	[esp+9Ch+SubStr], ebx
		mov	[esp+9Ch+Str], esi
		call	purple_normalize
		mov	[esp+9Ch+SubStr], eax
		mov	eax, [ebp+38h]
		mov	[esp+9Ch+Str], eax
		call	g_hash_table_lookup
		mov	edx, eax
		test	eax, eax
		jz	loc_688A23E4

loc_688A1D08:				; CODE XREF: oscar_send_im+877j
		mov	[esp+9Ch+var_44], 0
		mov	eax, [esp+9Ch+var_70]
		test	eax, eax
		jnz	short loc_688A1D4B
		test	edi, edi
		jz	loc_688A23D8
		mov	[esp+9Ch+Str], edi
		mov	[esp+9Ch+var_78], edx
		call	purple_buddy_get_account
		mov	[esp+9Ch+Str], eax
		call	purple_account_is_connected
		test	eax, eax
		mov	edx, [esp+9Ch+var_78]
		jnz	loc_688A2388

loc_688A1D40:				; CODE XREF: oscar_send_im+7FCj
		mov	eax, [esp+9Ch+var_44]
		or	ah, 8

loc_688A1D47:				; CODE XREF: oscar_send_im+831j
		mov	[esp+9Ch+var_44], eax

loc_688A1D4B:				; CODE XREF: oscar_send_im+16Aj
					; oscar_send_im+7F6j
		mov	eax, [ebp+44h]
		test	eax, eax
		jz	loc_688A212C
		mov	[esp+9Ch+var_28], offset byte_688AD1FC
		mov	[esp+9Ch+var_2C], 1

loc_688A1D65:				; CODE XREF: oscar_send_im+595j
		mov	edi, [edx+24h]
		test	edi, edi
		jnz	loc_688A2157

loc_688A1D70:				; CODE XREF: oscar_send_im+5A5j
					; oscar_send_im+5D3j
		mov	[esp+9Ch+Str], esi
		mov	[esp+9Ch+var_78], edx
		call	purple_buddy_icons_find_account_icon
		mov	edi, eax
		test	eax, eax
		jz	loc_688A1E25
		mov	[esp+9Ch+Str], eax
		call	purple_imgstore_get_data
		mov	[esp+9Ch+Str], edi
		mov	[esp+9Ch+var_74], eax
		call	purple_imgstore_get_size
		mov	[esp+9Ch+var_38], eax
		mov	[esp+9Ch+SubStr], eax
		mov	ecx, [esp+9Ch+var_74]
		mov	[esp+9Ch+Str], ecx
		call	aimutil_iconsum
		movzx	eax, ax
		mov	[esp+9Ch+var_30], eax
		mov	[esp+9Ch+Str], esi
		call	purple_buddy_icons_get_account_icon_timestamp
		mov	[esp+9Ch+var_34], eax
		mov	edx, [esp+9Ch+var_78]
		mov	ecx, [edx+8]
		cmp	[esp+9Ch+var_38], ecx
		jz	loc_688A23B0

loc_688A1DD2:				; CODE XREF: oscar_send_im+80Bj
					; oscar_send_im+814j
		mov	dword ptr [edx+14h], 0
		mov	dword ptr [edx+28h], 0

loc_688A1DE0:				; CODE XREF: oscar_send_im+825j
		mov	[esp+9Ch+SubStr], offset aClaimingToHave ; "Claiming to	have a buddy icon\n"
		mov	[esp+9Ch+Str], offset aOscar_13	; "oscar"
		mov	[esp+9Ch+var_78], edx
		call	purple_debug_info
		or	[esp+9Ch+var_44], 20h
		mov	eax, [esp+9Ch+var_38]
		mov	edx, [esp+9Ch+var_78]
		mov	[edx+8], eax
		mov	eax, [esp+9Ch+var_30]
		mov	[edx+0Ch], eax
		mov	eax, [esp+9Ch+var_34]
		mov	[edx+10h], eax
		mov	dword ptr [edx+14h], 1

loc_688A1E1D:				; CODE XREF: oscar_send_im+81Fj
		mov	[esp+9Ch+Str], edi
		call	purple_imgstore_unref

loc_688A1E25:				; CODE XREF: oscar_send_im+1D4j
		mov	[esp+9Ch+var_48], ebx
		mov	[esp+9Ch+Str], ebx
		call	oscar_util_valid_name_sms
		test	eax, eax
		mov	eax, [esp+9Ch+var_68]
		jz	loc_688A2038
		mov	[esp+9Ch+Str], eax
		call	purple_markup_strip_html
		mov	ebx, eax
		mov	eax, [esp+9Ch+var_68]
		mov	[esp+9Ch+Str], eax
		call	g_free
		mov	[esp+9Ch+var_90], 0
		lea	eax, [esp+9Ch+var_24]
		mov	[esp+9Ch+var_94], eax
		lea	eax, [esp+9Ch+var_3C]
		mov	[esp+9Ch+SubStr], eax
		mov	[esp+9Ch+Str], ebx
		call	oscar_encode_im
		mov	[esp+9Ch+var_40], eax
		mov	edx, [esp+9Ch+var_3C]

loc_688A1E7B:				; CODE XREF: oscar_send_im+4D8j
					; oscar_send_im+578j
		mov	[esp+9Ch+var_90], edx
		movzx	eax, [esp+9Ch+var_24]
		mov	[esp+9Ch+var_94], eax
		mov	[esp+9Ch+SubStr], offset aSendingImChars ; "Sending IM,	charset=0x%04hx, length=%u\"...
		mov	[esp+9Ch+Str], offset aOscar_13	; "oscar"
		call	purple_debug_info
		lea	eax, [esp+9Ch+var_48]
		mov	[esp+9Ch+SubStr], eax
		mov	[esp+9Ch+Str], ebp
		call	aim_im_sendch1_ext
		mov	esi, eax
		mov	eax, [esp+9Ch+var_40]
		mov	[esp+9Ch+Str], eax
		call	g_free
		mov	[esp+9Ch+Str], ebx
		call	g_free
		test	esi, esi
		jns	loc_688A202B
		mov	eax, esi

loc_688A1ECC:				; CODE XREF: oscar_send_im+484j
					; oscar_send_im+7D4j
		mov	ecx, [esp+9Ch+var_20]
		xor	ecx, ds:__stack_chk_guard
		jnz	loc_688A2435
		add	esp, 8Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 4

loc_688A1EE8:				; CODE XREF: oscar_send_im+6Ej
		mov	[esp+9Ch+SubStr], ebx
		mov	edx, [esp+9Ch+var_6C]
		mov	[esp+9Ch+Str], edx
		call	oscar_util_format_string
		mov	[esp+9Ch+var_68], eax
		jmp	loc_688A1C30
; ---------------------------------------------------------------------------
		align 4

loc_688A1F04:				; CODE XREF: oscar_send_im+6E1j
		cmp	byte ptr [esi],	0
		jz	short loc_688A1F19
		mov	[esp+9Ch+SubStr], esi
		mov	eax, [esp+9Ch+var_6C]
		mov	[esp+9Ch+Str], eax
		call	g_string_append

loc_688A1F19:				; CODE XREF: oscar_send_im+35Bj
					; oscar_send_im+6ABj ...
		mov	[esp+9Ch+SubStr], offset aBodyHtml ; "</BODY></HTML>"
		mov	eax, [esp+9Ch+var_6C]
		mov	[esp+9Ch+Str], eax
		call	g_string_append
		mov	[esp+9Ch+var_90], 0
		lea	eax, [esp+9Ch+var_5A]
		mov	[esp+9Ch+var_94], eax
		lea	eax, [esp+9Ch+var_58]
		mov	[esp+9Ch+SubStr], eax
		mov	edx, [esp+9Ch+var_6C]
		mov	eax, [edx]
		mov	[esp+9Ch+Str], eax
		call	oscar_encode_im
		mov	ebx, eax
		mov	[esp+9Ch+SubStr], 1
		mov	eax, [esp+9Ch+var_6C]
		mov	[esp+9Ch+Str], eax
		call	g_string_free
		mov	eax, [esp+9Ch+var_58]
		mov	[esp+9Ch+SubStr], eax
		mov	[esp+9Ch+Str], ebx
		call	g_string_new_len
		mov	esi, eax
		mov	[esp+9Ch+Str], ebx
		call	g_free
		mov	eax, [esp+9Ch+var_70]
		test	eax, eax
		jz	short loc_688A1FB2
		mov	eax, [edi+4]
		mov	[esp+9Ch+var_94], eax
		mov	eax, [edi]
		mov	[esp+9Ch+SubStr], eax
		mov	[esp+9Ch+Str], esi
		call	g_string_append_len
		mov	[esp+9Ch+SubStr], offset aBinary_1 ; "</BINARY>"
		mov	[esp+9Ch+Str], eax
		call	g_string_append
		mov	esi, eax

loc_688A1FB2:				; CODE XREF: oscar_send_im+3DDj
		mov	[esp+9Ch+SubStr], 1
		mov	[esp+9Ch+Str], edi
		call	g_string_free
		movzx	eax, [esp+9Ch+var_5A]
		mov	[esp+9Ch+var_90], eax
		mov	eax, [esi]
		mov	[esp+9Ch+var_94], eax
		mov	[esp+9Ch+SubStr], offset aSendingDirec_0 ; "sending direct IM %s using charset %i"
		mov	[esp+9Ch+Str], offset aOscar_13	; "oscar"
		call	purple_debug_info
		mov	edx, [esp+9Ch+var_60]
		mov	[esp+9Ch+var_8C], edx
		movzx	eax, [esp+9Ch+var_5A]
		mov	[esp+9Ch+var_90], eax
		mov	eax, [esi+4]
		mov	[esp+9Ch+var_94], eax
		mov	eax, [esi]
		mov	[esp+9Ch+SubStr], eax
		mov	eax, [esp+9Ch+var_64]
		mov	[esp+9Ch+Str], eax
		call	peer_odc_send_im
		mov	[esp+9Ch+SubStr], 1
		mov	[esp+9Ch+Str], esi
		call	g_string_free
		mov	eax, [esp+9Ch+var_68]
		mov	[esp+9Ch+Str], eax
		call	g_free

loc_688A202B:				; CODE XREF: oscar_send_im+318j
					; oscar_send_im+7CEj
		mov	eax, 1
		jmp	loc_688A1ECC
; ---------------------------------------------------------------------------
		align 4

loc_688A2038:				; CODE XREF: oscar_send_im+28Bj
		mov	[esp+9Ch+SubStr], eax
		mov	[esp+9Ch+Str], offset aHtmlBodySBodyH ;	"<HTML><BODY>%s</BODY></HTML>"
		call	g_strdup_printf
		mov	ebx, eax
		mov	eax, [esp+9Ch+var_68]
		mov	[esp+9Ch+Str], eax
		call	g_free
		mov	[esp+9Ch+var_90], 0
		lea	edi, [esp+9Ch+var_24]
		mov	[esp+9Ch+var_94], edi
		lea	esi, [esp+9Ch+var_3C]
		mov	[esp+9Ch+SubStr], esi
		mov	[esp+9Ch+Str], ebx
		call	oscar_encode_im
		mov	[esp+9Ch+var_40], eax
		mov	edx, [esp+9Ch+var_3C]
		cmp	edx, 9F0h
		jbe	loc_688A1E7B
		mov	[esp+9Ch+Str], eax
		call	g_free
		mov	[esp+9Ch+Str], ebx
		call	purple_markup_strip_html
		mov	[esp+9Ch+var_70], eax
		mov	[esp+9Ch+Str], ebx
		call	g_free
		mov	[esp+9Ch+SubStr], 0FFFFFFFFh
		mov	eax, [esp+9Ch+var_70]
		mov	[esp+9Ch+Str], eax
		call	g_markup_escape_text
		mov	ebx, eax
		mov	eax, [esp+9Ch+var_70]
		mov	[esp+9Ch+Str], eax
		call	g_free
		mov	[esp+9Ch+Str], ebx
		call	purple_strdup_withhtml
		mov	[esp+9Ch+var_70], eax
		mov	[esp+9Ch+Str], ebx
		call	g_free
		mov	[esp+9Ch+var_90], 0
		mov	[esp+9Ch+var_94], edi
		mov	[esp+9Ch+SubStr], esi
		mov	eax, [esp+9Ch+var_70]
		mov	[esp+9Ch+Str], eax
		call	oscar_encode_im
		mov	[esp+9Ch+var_40], eax
		mov	[esp+9Ch+var_90], eax
		mov	edx, [esp+9Ch+var_6C]
		mov	[esp+9Ch+var_94], edx
		mov	[esp+9Ch+SubStr], offset aSendingSAsSBec ; "Sending %s as %s because the original w"...
		mov	[esp+9Ch+Str], offset aOscar_13	; "oscar"
		call	purple_debug_info
		mov	edx, [esp+9Ch+var_3C]
		mov	ebx, [esp+9Ch+var_70]
		jmp	loc_688A1E7B
; ---------------------------------------------------------------------------
		align 4

loc_688A212C:				; CODE XREF: oscar_send_im+1A4j
		mov	[esp+9Ch+var_28], offset byte_688AD1FD
		mov	[esp+9Ch+var_2C], 4
		mov	eax, [esp+9Ch+var_60]
		test	eax, eax
		jz	loc_688A1D65
		or	[esp+9Ch+var_44], 1
		mov	edi, [edx+24h]
		test	edi, edi
		jz	loc_688A1D70

loc_688A2157:				; CODE XREF: oscar_send_im+1BEj
		mov	[esp+9Ch+SubStr], offset aSendingBuddy_0 ; "Sending buddy icon request with message"...
		mov	[esp+9Ch+Str], offset aOscar_13	; "oscar"
		mov	[esp+9Ch+var_78], edx
		call	purple_debug_info
		or	[esp+9Ch+var_44], 10h
		mov	edx, [esp+9Ch+var_78]
		mov	dword ptr [edx+24h], 0
		jmp	loc_688A1D70
; ---------------------------------------------------------------------------

loc_688A2184:				; CODE XREF: oscar_send_im+ADj
		mov	[esp+9Ch+var_94], edi
		mov	[esp+9Ch+SubStr], offset aSendingDirectI ; "Sending direct IM with flags %i\n"
		mov	[esp+9Ch+Str], offset aOscar_13	; "oscar"
		call	purple_debug_info
		mov	[esp+9Ch+Str], offset aHtmlBody	; "<HTML><BODY>"
		call	g_string_new
		mov	[esp+9Ch+var_6C], eax
		mov	[esp+9Ch+Str], offset aBinary_0	; "<BINARY>"
		call	g_string_new
		mov	edi, eax
		mov	eax, [esp+9Ch+var_68]
		test	eax, eax
		jz	loc_688A2428
		mov	eax, [esp+9Ch+var_68]
		cmp	byte ptr [eax],	0
		jz	loc_688A2428
		mov	esi, [esp+9Ch+var_68]
		mov	[esp+9Ch+var_70], 0
		lea	ebx, [esp+9Ch+var_54]
		jmp	loc_688A2267
; ---------------------------------------------------------------------------

loc_688A21E8:				; CODE XREF: oscar_send_im+769j
		mov	[esp+9Ch+var_8C], esi
		mov	ecx, [esp+9Ch+var_70]
		mov	[esp+9Ch+var_90], ecx
		mov	[esp+9Ch+var_94], edx
		mov	[esp+9Ch+SubStr], offset aImgSrcSIdDData ; "<IMG SRC=\"%s\" ID=\"%d\" DATASIZE=\"%l"...
		mov	eax, [esp+9Ch+var_6C]
		mov	[esp+9Ch+Str], eax
		call	g_string_append_printf

loc_688A220C:				; CODE XREF: oscar_send_im+78Fj
		mov	[esp+9Ch+var_90], esi
		mov	edx, [esp+9Ch+var_70]
		mov	[esp+9Ch+var_94], edx
		mov	[esp+9Ch+SubStr], offset aDataIdDSizeLu	; "<DATA ID=\"%d\" SIZE=\"%lu\">"
		mov	[esp+9Ch+Str], edi
		call	g_string_append_printf
		mov	[esp+9Ch+var_94], esi
		mov	[esp+9Ch+SubStr], ebp
		mov	[esp+9Ch+Str], edi
		call	g_string_append_len
		mov	[esp+9Ch+SubStr], offset aData_2 ; "</DATA>"
		mov	[esp+9Ch+Str], edi
		call	g_string_append

loc_688A2248:				; CODE XREF: oscar_send_im+71Fj
					; oscar_send_im+739j
		mov	[esp+9Ch+Str], ebx
		call	g_datalist_clear
		mov	eax, [esp+9Ch+var_4C]
		mov	esi, eax
		inc	esi
		jz	loc_688A1F19
		cmp	byte ptr [eax+1], 0
		jz	loc_688A1F19

loc_688A2267:				; CODE XREF: oscar_send_im+637j
		mov	[esp+9Ch+var_8C], ebx
		lea	ecx, [esp+9Ch+var_4C]
		mov	[esp+9Ch+var_90], ecx
		lea	eax, [esp+9Ch+var_50]
		mov	[esp+9Ch+var_94], eax
		mov	[esp+9Ch+SubStr], esi
		mov	[esp+9Ch+Str], offset aImg_1 ; "img"
		call	purple_markup_find_tag
		test	eax, eax
		jz	loc_688A1F04
		mov	eax, [esp+9Ch+var_50]
		cmp	eax, esi
		jz	short loc_688A22B1
		sub	eax, esi
		mov	[esp+9Ch+var_94], eax
		mov	[esp+9Ch+SubStr], esi
		mov	eax, [esp+9Ch+var_6C]
		mov	[esp+9Ch+Str], eax
		call	g_string_append_len

loc_688A22B1:				; CODE XREF: oscar_send_im+6EDj
		mov	[esp+9Ch+Str], offset aId_0 ; "id"
		call	g_quark_try_string
		mov	[esp+9Ch+SubStr], eax
		mov	[esp+9Ch+Str], ebx
		call	g_datalist_id_get_data
		test	eax, eax
		jz	loc_688A2248
		mov	[esp+9Ch+Str], eax ; Str
		call	atoi
		mov	[esp+9Ch+Str], eax
		call	purple_imgstore_find_by_id
		mov	ebp, eax
		test	eax, eax
		jz	loc_688A2248
		mov	[esp+9Ch+Str], eax
		call	purple_imgstore_get_size
		mov	esi, eax
		mov	[esp+9Ch+Str], ebp
		call	purple_imgstore_get_filename
		mov	[esp+9Ch+Str], ebp
		mov	[esp+9Ch+var_78], eax
		call	purple_imgstore_get_data
		mov	ebp, eax
		inc	[esp+9Ch+var_70]
		mov	edx, [esp+9Ch+var_78]
		test	edx, edx
		jnz	loc_688A21E8
		mov	[esp+9Ch+var_90], esi
		mov	edx, [esp+9Ch+var_70]
		mov	[esp+9Ch+var_94], edx
		mov	[esp+9Ch+SubStr], offset aImgIdDDatasize ; "<IMG ID=\"%d\" DATASIZE=\"%lu\">"
		mov	eax, [esp+9Ch+var_6C]
		mov	[esp+9Ch+Str], eax
		call	g_string_append_printf
		jmp	loc_688A220C
; ---------------------------------------------------------------------------

loc_688A2340:				; CODE XREF: oscar_send_im+5Fj
		mov	[esp+9Ch+var_94], ebx
		mov	[esp+9Ch+SubStr], offset aSendingSmsToS_ ; "Sending SMS	to %s.\n"
		mov	[esp+9Ch+Str], offset aOscar_13	; "oscar"
		call	purple_debug_info
		mov	[esp+9Ch+Str], esi
		call	purple_account_get_username
		mov	[esp+9Ch+var_90], eax
		mov	edx, [esp+9Ch+var_6C]
		mov	[esp+9Ch+var_94], edx
		mov	[esp+9Ch+SubStr], ebx
		mov	[esp+9Ch+Str], ebp
		call	aim_icq_sendsms
		test	eax, eax
		jns	loc_688A202B
		jmp	loc_688A1ECC
; ---------------------------------------------------------------------------
		align 4

loc_688A2388:				; CODE XREF: oscar_send_im+18Ej
		mov	[esp+9Ch+Str], edi
		mov	[esp+9Ch+var_78], edx
		call	purple_buddy_get_presence
		mov	[esp+9Ch+Str], eax
		call	purple_presence_is_online
		test	eax, eax
		mov	edx, [esp+9Ch+var_78]
		jnz	loc_688A1D4B
		jmp	loc_688A1D40
; ---------------------------------------------------------------------------
		align 10h

loc_688A23B0:				; CODE XREF: oscar_send_im+220j
		mov	ecx, [edx+0Ch]
		cmp	[esp+9Ch+var_30], ecx
		jnz	loc_688A1DD2
		cmp	eax, [edx+10h]
		jnz	loc_688A1DD2
		mov	esi, [edx+14h]
		test	esi, esi
		jnz	loc_688A1E1D
		jmp	loc_688A1DE0
; ---------------------------------------------------------------------------
		align 4

loc_688A23D8:				; CODE XREF: oscar_send_im+16Ej
		mov	eax, 800h
		jmp	loc_688A1D47
; ---------------------------------------------------------------------------
		align 4

loc_688A23E4:				; CODE XREF: oscar_send_im+156j
		mov	[esp+9Ch+Str], 2Ch
		call	g_malloc0
		mov	[esp+9Ch+SubStr], ebx
		mov	[esp+9Ch+Str], esi
		mov	[esp+9Ch+var_78], eax
		call	purple_normalize
		mov	[esp+9Ch+Str], eax
		call	g_strdup
		mov	edx, [esp+9Ch+var_78]
		mov	[esp+9Ch+var_94], edx
		mov	[esp+9Ch+SubStr], eax
		mov	eax, [ebp+38h]
		mov	[esp+9Ch+Str], eax
		call	g_hash_table_insert
		mov	edx, [esp+9Ch+var_78]
		jmp	loc_688A1D08
; ---------------------------------------------------------------------------

loc_688A2428:				; CODE XREF: oscar_send_im+614j
					; oscar_send_im+621j
		mov	[esp+9Ch+var_70], 0
		jmp	loc_688A1F19
; ---------------------------------------------------------------------------

loc_688A2435:				; CODE XREF: oscar_send_im+32Aj
		call	__stack_chk_fail
oscar_send_im	endp

; ---------------------------------------------------------------------------
		align 4
; Exported entry 239. oscar_get_info

; =============== S U B	R O U T	I N E =======================================


; int __cdecl oscar_get_info(int, char *)
		public oscar_get_info
oscar_get_info	proc near

var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_10		= dword	ptr -10h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	esi
		push	ebx
		sub	esp, 24h
		mov	esi, [esp+2Ch+arg_4]
		mov	eax, ds:__stack_chk_guard
		mov	[esp+2Ch+var_10], eax
		xor	eax, eax
		mov	eax, [esp+2Ch+arg_0]
		mov	[esp+2Ch+var_2C], eax
		call	purple_connection_get_protocol_data
		mov	ebx, eax
		mov	ecx, [eax+44h]
		test	ecx, ecx
		jz	short loc_688A2471
		mov	[esp+2Ch+var_2C], esi
		call	oscar_util_valid_name_icq
		test	eax, eax
		jnz	short loc_688A2498

loc_688A2471:				; CODE XREF: oscar_get_info+27j
		mov	[esp+2Ch+var_24], 3
		mov	[esp+2Ch+var_28], esi
		mov	[esp+2Ch+var_2C], ebx
		call	aim_locate_getinfoshort
		mov	eax, [esp+2Ch+var_10]
		xor	eax, ds:__stack_chk_guard
		jnz	short loc_688A24B6
		add	esp, 24h
		pop	ebx
		pop	esi
		retn
; ---------------------------------------------------------------------------
		align 4

loc_688A2498:				; CODE XREF: oscar_get_info+33j
		mov	eax, [esp+2Ch+var_10]
		xor	eax, ds:__stack_chk_guard
		jnz	short loc_688A24B6
		mov	[esp+2Ch+arg_4], esi ; char *
		mov	[esp+2Ch+arg_0], ebx ; int
		add	esp, 24h
		pop	ebx
		pop	esi
		jmp	aim_icq_getallinfo
; ---------------------------------------------------------------------------

loc_688A24B6:				; CODE XREF: oscar_get_info+53j
					; oscar_get_info+66j
		call	__stack_chk_fail
oscar_get_info	endp

; ---------------------------------------------------------------------------
		align 4
; Exported entry 267. oscar_set_idle

; =============== S U B	R O U T	I N E =======================================


		public oscar_set_idle
oscar_set_idle	proc near

var_2C		= dword	ptr -2Ch
var_10		= dword	ptr -10h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	ebx
		sub	esp, 28h
		mov	ebx, [esp+2Ch+arg_4]
		mov	eax, ds:__stack_chk_guard
		mov	[esp+2Ch+var_10], eax
		xor	eax, eax
		mov	eax, [esp+2Ch+arg_0]
		mov	[esp+2Ch+var_2C], eax
		call	purple_connection_get_protocol_data
		mov	edx, [esp+2Ch+var_10]
		xor	edx, ds:__stack_chk_guard
		jnz	short loc_688A24F8
		mov	[esp+2Ch+arg_4], ebx
		mov	[esp+2Ch+arg_0], eax
		add	esp, 28h
		pop	ebx
		jmp	aim_srv_setidle
; ---------------------------------------------------------------------------

loc_688A24F8:				; CODE XREF: oscar_set_idle+29j
		call	__stack_chk_fail
oscar_set_idle	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 268. oscar_set_info

; =============== S U B	R O U T	I N E =======================================


		public oscar_set_info
oscar_set_info	proc near

var_2C		= dword	ptr -2Ch
var_10		= dword	ptr -10h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	esi
		push	ebx
		sub	esp, 24h
		mov	esi, [esp+2Ch+arg_4]
		mov	eax, ds:__stack_chk_guard
		mov	[esp+2Ch+var_10], eax
		xor	eax, eax
		mov	eax, [esp+2Ch+arg_0]
		mov	[esp+2Ch+var_2C], eax
		call	purple_connection_get_account
		mov	ebx, eax
		mov	[esp+2Ch+var_2C], eax
		call	purple_account_get_active_status
		mov	edx, [esp+2Ch+var_10]
		xor	edx, ds:__stack_chk_guard
		jnz	short loc_688A2555
		mov	[esp+2Ch+arg_4], eax
		mov	[esp+2Ch+arg_0], 0
		mov	ecx, esi
		mov	edx, 1
		mov	eax, ebx
		add	esp, 24h
		pop	ebx
		pop	esi
		jmp	sub_6889A35C
; ---------------------------------------------------------------------------

loc_688A2555:				; CODE XREF: oscar_set_info+34j
		call	__stack_chk_fail
oscar_set_info	endp

; ---------------------------------------------------------------------------
		align 4
; Exported entry 269. oscar_set_status

; =============== S U B	R O U T	I N E =======================================


		public oscar_set_status
oscar_set_status proc near

var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_10		= dword	ptr -10h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	edi
		push	esi
		push	ebx
		sub	esp, 20h
		mov	esi, [esp+2Ch+arg_0]
		mov	ebx, [esp+2Ch+arg_4]
		mov	eax, ds:__stack_chk_guard
		mov	[esp+2Ch+var_10], eax
		xor	eax, eax
		mov	[esp+2Ch+var_2C], ebx
		call	purple_status_get_name
		mov	[esp+2Ch+var_24], eax
		mov	[esp+2Ch+var_28], offset aSetStatusToS ; "Set status to	%s\n"
		mov	[esp+2Ch+var_2C], offset aOscar_13 ; "oscar"
		call	purple_debug_info
		mov	[esp+2Ch+var_2C], ebx
		call	purple_status_is_active
		test	eax, eax
		jnz	short loc_688A25AD
		mov	[esp+2Ch+var_2C], ebx
		call	purple_status_is_independent
		test	eax, eax
		jz	short loc_688A25B9

loc_688A25AD:				; CODE XREF: oscar_set_status+43j
		mov	[esp+2Ch+var_2C], esi
		call	purple_account_is_connected
		test	eax, eax
		jnz	short loc_688A25D0

loc_688A25B9:				; CODE XREF: oscar_set_status+4Fj
					; oscar_set_status+F0j
		mov	eax, [esp+2Ch+var_10]
		xor	eax, ds:__stack_chk_guard
		jnz	loc_688A2651
		add	esp, 20h
		pop	ebx
		pop	esi
		pop	edi
		retn
; ---------------------------------------------------------------------------

loc_688A25D0:				; CODE XREF: oscar_set_status+5Bj
		mov	[esp+2Ch+var_2C], esi
		call	purple_account_get_connection
		mov	[esp+2Ch+var_2C], eax
		call	purple_connection_get_protocol_data
		mov	edi, eax
		mov	[esp+2Ch+var_2C], ebx
		call	purple_status_get_type
		mov	[esp+2Ch+var_2C], eax
		call	purple_status_type_get_primitive
		cmp	eax, 9
		jz	short loc_688A2634
		mov	edi, [edi+44h]
		test	edi, edi
		jnz	short loc_688A2628

loc_688A25FE:				; CODE XREF: oscar_set_status+D3j
		mov	eax, [esp+2Ch+var_10]
		xor	eax, ds:__stack_chk_guard
		jnz	short loc_688A2651
		mov	[esp+2Ch+arg_4], ebx
		mov	[esp+2Ch+arg_0], 1
		xor	ecx, ecx
		xor	edx, edx
		mov	eax, esi
		add	esp, 20h
		pop	ebx
		pop	esi
		pop	edi
		jmp	sub_6889A35C
; ---------------------------------------------------------------------------
		align 4

loc_688A2628:				; CODE XREF: oscar_set_status+A0j
		mov	eax, esi
		call	sub_6889A2F8
		jmp	short loc_688A25FE
; ---------------------------------------------------------------------------
		align 4

loc_688A2634:				; CODE XREF: oscar_set_status+99j
		mov	[esp+2Ch+var_28], 700E402Dh
		mov	[esp+2Ch+var_24], 1
		mov	[esp+2Ch+var_2C], edi
		call	aim_locate_setcaps
		jmp	loc_688A25B9
; ---------------------------------------------------------------------------

loc_688A2651:				; CODE XREF: oscar_set_status+67j
					; oscar_set_status+ACj
		call	__stack_chk_fail
oscar_set_status endp

; ---------------------------------------------------------------------------
		align 4
; Exported entry 211. oscar_add_buddy

; =============== S U B	R O U T	I N E =======================================


; int __cdecl oscar_add_buddy(int, char	*, int,	int)
		public oscar_add_buddy
oscar_add_buddy	proc near

var_5C		= dword	ptr -5Ch
var_58		= dword	ptr -58h
var_54		= dword	ptr -54h
var_50		= dword	ptr -50h
var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_20		= dword	ptr -20h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 4Ch
		mov	esi, [esp+5Ch+arg_0]
		mov	eax, [esp+5Ch+arg_4]
		mov	[esp+5Ch+var_38], eax
		mov	ebp, [esp+5Ch+arg_8]
		mov	eax, [esp+5Ch+arg_C]
		mov	[esp+5Ch+var_30], eax
		mov	eax, ds:__stack_chk_guard
		mov	[esp+5Ch+var_20], eax
		xor	eax, eax
		mov	[esp+5Ch+var_5C], esi
		call	purple_connection_get_protocol_data
		mov	edi, eax
		mov	[esp+5Ch+var_5C], esi
		call	purple_connection_get_account
		mov	[esp+5Ch+var_34], eax
		mov	eax, [esp+5Ch+var_38]
		mov	[esp+5Ch+var_5C], eax
		call	purple_buddy_get_name
		mov	ebx, eax
		mov	[esp+5Ch+var_5C], ebp
		call	purple_group_get_name
		mov	ebp, eax
		mov	[esp+5Ch+var_5C], ebx
		call	oscar_util_valid_name
		test	eax, eax
		jz	short loc_688A2720
		mov	eax, [edi+0CCh]
		test	eax, eax
		jnz	loc_688A278C

loc_688A26CA:				; CODE XREF: oscar_add_buddy+184j
					; oscar_add_buddy+19Ej	...
		mov	ebp, [edi+44h]
		test	ebp, ebp
		jnz	short loc_688A26EC
		mov	eax, [esp+5Ch+var_20]
		xor	eax, ds:__stack_chk_guard
		jnz	loc_688A28F2
		add	esp, 4Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 4

loc_688A26EC:				; CODE XREF: oscar_add_buddy+77j
		mov	eax, [esp+5Ch+var_20]
		xor	eax, ds:__stack_chk_guard
		jnz	loc_688A28F2
		mov	[esp+5Ch+arg_C], 0 ; int
		mov	[esp+5Ch+arg_8], 0 ; int
		mov	[esp+5Ch+arg_4], ebx ; char *
		mov	[esp+5Ch+arg_0], edi ; int
		add	esp, 4Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		jmp	aim_icq_getalias
; ---------------------------------------------------------------------------

loc_688A2720:				; CODE XREF: oscar_add_buddy+62j
		mov	[esp+5Ch+var_58], offset aUnableToAddT_1 ; "Unable to add the buddy %s because the "...
		mov	[esp+5Ch+var_5C], offset aPidgin_6 ; "pidgin"
		call	libintl_dgettext
		mov	[esp+5Ch+var_58], ebx
		mov	[esp+5Ch+var_5C], eax
		call	g_strdup_printf
		mov	ebp, eax
		mov	[esp+5Ch+var_54], eax
		mov	eax, [esp+5Ch+var_34]
		mov	[esp+5Ch+var_58], eax
		mov	[esp+5Ch+var_5C], ebx
		call	purple_conv_present_error
		test	eax, eax
		jz	loc_688A27FC

loc_688A275E:				; CODE XREF: oscar_add_buddy+1E8j
		mov	[esp+5Ch+var_5C], ebp
		call	g_free
		mov	eax, [esp+5Ch+var_20]
		xor	eax, ds:__stack_chk_guard
		jnz	loc_688A28F2
		mov	eax, [esp+5Ch+var_38]
		mov	[esp+5Ch+arg_0], eax
		add	esp, 4Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		jmp	purple_blist_remove_buddy
; ---------------------------------------------------------------------------
		align 4

loc_688A278C:				; CODE XREF: oscar_add_buddy+6Cj
		mov	[esp+5Ch+var_50], 0
		mov	[esp+5Ch+var_54], ebx
		mov	[esp+5Ch+var_58], ebp
		mov	eax, [edi+0D8h]
		mov	[esp+5Ch+var_5C], eax
		call	aim_ssi_itemlist_finditem
		test	eax, eax
		jz	loc_688A2848
		mov	[esp+5Ch+var_58], ebx
		mov	eax, [edi+0D8h]
		mov	[esp+5Ch+var_5C], eax
		call	aim_ssi_itemlist_findparentname
		mov	[esp+5Ch+var_54], ebx
		mov	[esp+5Ch+var_58], eax
		mov	eax, [edi+0D8h]
		mov	[esp+5Ch+var_5C], eax
		call	aim_ssi_waitingforauth
		test	eax, eax
		jz	loc_688A26CA
		mov	eax, [esp+5Ch+var_30]
		mov	[esp+5Ch+var_54], eax
		mov	[esp+5Ch+var_58], ebx
		mov	[esp+5Ch+var_5C], esi
		call	oscar_auth_sendrequest
		jmp	loc_688A26CA
; ---------------------------------------------------------------------------
		align 4

loc_688A27FC:				; CODE XREF: oscar_add_buddy+100j
		mov	[esp+5Ch+var_58], offset aUnableToAdd ;	"Unable	to Add"
		mov	[esp+5Ch+var_5C], offset aPidgin_6 ; "pidgin"
		call	libintl_dgettext
		mov	[esp+5Ch+var_44], 0
		mov	[esp+5Ch+var_48], 0
		mov	[esp+5Ch+var_4C], ebp
		mov	[esp+5Ch+var_50], eax
		mov	[esp+5Ch+var_54], 0
		mov	[esp+5Ch+var_58], 0
		mov	[esp+5Ch+var_5C], esi
		call	purple_notify_message
		jmp	loc_688A275E
; ---------------------------------------------------------------------------
		align 4

loc_688A2848:				; CODE XREF: oscar_add_buddy+154j
		mov	[esp+5Ch+var_50], ebp
		mov	[esp+5Ch+var_54], ebx
		mov	[esp+5Ch+var_58], offset aSsiAddingBud_1 ; "ssi: adding	buddy %s to group %s\n"
		mov	[esp+5Ch+var_5C], offset aOscar_13 ; "oscar"
		call	purple_debug_info
		mov	eax, [esp+5Ch+var_38]
		mov	[esp+5Ch+var_5C], eax
		call	purple_buddy_get_alias_only
		mov	[esp+5Ch+var_40], 0
		mov	[esp+5Ch+var_44], 0
		mov	[esp+5Ch+var_48], 0
		mov	[esp+5Ch+var_4C], eax
		mov	[esp+5Ch+var_50], 0
		mov	[esp+5Ch+var_54], ebp
		mov	[esp+5Ch+var_58], ebx
		mov	[esp+5Ch+var_5C], edi
		call	aim_ssi_addbuddy
		cmp	byte ptr [ebx],	2Bh
		jnz	loc_688A26CA
		mov	[esp+5Ch+var_50], 0
		mov	[esp+5Ch+var_54], offset aAvailable_0 ;	"available"
		mov	[esp+5Ch+var_58], ebx
		mov	eax, [esp+5Ch+var_34]
		mov	[esp+5Ch+var_5C], eax
		call	purple_prpl_got_user_status
		mov	[esp+5Ch+var_50], 0
		mov	[esp+5Ch+var_54], offset aMobile_0 ; "mobile"
		mov	[esp+5Ch+var_58], ebx
		mov	eax, [esp+5Ch+var_34]
		mov	[esp+5Ch+var_5C], eax
		call	purple_prpl_got_user_status
		jmp	loc_688A26CA
; ---------------------------------------------------------------------------

loc_688A28F2:				; CODE XREF: oscar_add_buddy+83j
					; oscar_add_buddy+9Ej ...
		call	__stack_chk_fail
oscar_add_buddy	endp

; ---------------------------------------------------------------------------
		align 4
; Exported entry 258. oscar_remove_buddy

; =============== S U B	R O U T	I N E =======================================


		public oscar_remove_buddy
oscar_remove_buddy proc	near

var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_10		= dword	ptr -10h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	edi
		push	esi
		push	ebx
		sub	esp, 20h
		mov	esi, [esp+2Ch+arg_4]
		mov	edi, [esp+2Ch+arg_8]
		mov	eax, ds:__stack_chk_guard
		mov	[esp+2Ch+var_10], eax
		xor	eax, eax
		mov	eax, [esp+2Ch+arg_0]
		mov	[esp+2Ch+var_2C], eax
		call	purple_connection_get_protocol_data
		mov	ebx, eax
		mov	eax, [eax+0CCh]
		test	eax, eax
		jnz	short loc_688A293C
		mov	eax, [esp+2Ch+var_10]
		xor	eax, ds:__stack_chk_guard
		jnz	short loc_688A298F
		add	esp, 20h
		pop	ebx
		pop	esi
		pop	edi
		retn
; ---------------------------------------------------------------------------

loc_688A293C:				; CODE XREF: oscar_remove_buddy+2Fj
		mov	[esp+2Ch+var_2C], edi
		call	purple_group_get_name
		mov	edi, eax
		mov	[esp+2Ch+var_2C], esi
		call	purple_buddy_get_name
		mov	esi, eax
		mov	[esp+2Ch+var_20], edi
		mov	[esp+2Ch+var_24], eax
		mov	[esp+2Ch+var_28], offset aSsiDeletingBud ; "ssi: deleting buddy	%s from	group %s\n"
		mov	[esp+2Ch+var_2C], offset aOscar_13 ; "oscar"
		call	purple_debug_info
		mov	eax, [esp+2Ch+var_10]
		xor	eax, ds:__stack_chk_guard
		jnz	short loc_688A298F
		mov	[esp+2Ch+arg_8], edi
		mov	[esp+2Ch+arg_4], esi
		mov	[esp+2Ch+arg_0], ebx
		add	esp, 20h
		pop	ebx
		pop	esi
		pop	edi
		jmp	aim_ssi_delbuddy
; ---------------------------------------------------------------------------

loc_688A298F:				; CODE XREF: oscar_remove_buddy+3Bj
					; oscar_remove_buddy+7Ej
		call	__stack_chk_fail
oscar_remove_buddy endp

; Exported entry 252. oscar_move_buddy

; =============== S U B	R O U T	I N E =======================================


; int __cdecl oscar_move_buddy(int, int, char *, char *)
		public oscar_move_buddy
oscar_move_buddy proc near

Str1		= dword	ptr -4Ch
Str2		= dword	ptr -48h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_3C		= dword	ptr -3Ch
var_20		= dword	ptr -20h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 3Ch
		mov	ebp, [esp+4Ch+arg_4]
		mov	esi, [esp+4Ch+arg_8]
		mov	edi, [esp+4Ch+arg_C]
		mov	eax, ds:__stack_chk_guard
		mov	[esp+4Ch+var_20], eax
		xor	eax, eax
		mov	eax, [esp+4Ch+arg_0]
		mov	[esp+4Ch+Str1],	eax
		call	purple_connection_get_protocol_data
		mov	ebx, eax
		mov	eax, [eax+0CCh]
		test	eax, eax
		jz	short loc_688A29DA
		mov	[esp+4Ch+Str2],	edi ; Str2
		mov	[esp+4Ch+Str1],	esi ; Str1
		call	strcmp
		test	eax, eax
		jnz	short loc_688A29F0

loc_688A29DA:				; CODE XREF: oscar_move_buddy+34j
		mov	eax, [esp+4Ch+var_20]
		xor	eax, ds:__stack_chk_guard
		jnz	short loc_688A2A38
		add	esp, 3Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_688A29F0:				; CODE XREF: oscar_move_buddy+44j
		mov	[esp+4Ch+var_3C], edi
		mov	[esp+4Ch+var_40], esi
		mov	[esp+4Ch+var_44], ebp
		mov	[esp+4Ch+Str2],	offset aSsiMovingBuddy ; "ssi: moving buddy %s from group %s to	g"...
		mov	[esp+4Ch+Str1],	offset aOscar_13 ; "oscar"
		call	purple_debug_info
		mov	eax, [esp+4Ch+var_20]
		xor	eax, ds:__stack_chk_guard
		jnz	short loc_688A2A38
		mov	[esp+4Ch+arg_C], ebp
		mov	[esp+4Ch+arg_8], edi
		mov	[esp+4Ch+arg_4], esi
		mov	[esp+4Ch+arg_0], ebx
		add	esp, 3Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		jmp	aim_ssi_movebuddy
; ---------------------------------------------------------------------------

loc_688A2A38:				; CODE XREF: oscar_move_buddy+50j
					; oscar_move_buddy+86j
		call	__stack_chk_fail
oscar_move_buddy endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 214. oscar_alias_buddy

; =============== S U B	R O U T	I N E =======================================


		public oscar_alias_buddy
oscar_alias_buddy proc near

var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_20		= dword	ptr -20h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 2Ch
		mov	esi, [esp+3Ch+arg_4]
		mov	edi, [esp+3Ch+arg_8]
		mov	eax, ds:__stack_chk_guard
		mov	[esp+3Ch+var_20], eax
		xor	eax, eax
		mov	eax, [esp+3Ch+arg_0]
		mov	[esp+3Ch+var_3C], eax
		call	purple_connection_get_protocol_data
		mov	ebx, eax
		mov	eax, [eax+0CCh]
		test	eax, eax
		jnz	short loc_688A2A88

loc_688A2A72:				; CODE XREF: oscar_alias_buddy+5Ej
					; oscar_alias_buddy+96j
		mov	eax, [esp+3Ch+var_20]
		xor	eax, ds:__stack_chk_guard
		jnz	short loc_688A2ADF
		add	esp, 2Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 4

loc_688A2A88:				; CODE XREF: oscar_alias_buddy+30j
		mov	[esp+3Ch+var_38], esi
		mov	eax, [ebx+0D8h]
		mov	[esp+3Ch+var_3C], eax
		call	aim_ssi_itemlist_findparentname
		mov	ebp, eax
		test	eax, eax
		jz	short loc_688A2A72
		test	edi, edi
		jz	short loc_688A2AD8
		mov	eax, edi

loc_688A2AA6:				; CODE XREF: oscar_alias_buddy+9Dj
		mov	[esp+3Ch+var_30], eax
		mov	[esp+3Ch+var_34], esi
		mov	[esp+3Ch+var_38], offset aSsiChangingThe ; "ssi: changing the alias for	buddy %s to"...
		mov	[esp+3Ch+var_3C], offset aOscar_13 ; "oscar"
		call	purple_debug_info
		mov	[esp+3Ch+var_30], edi
		mov	[esp+3Ch+var_34], esi
		mov	[esp+3Ch+var_38], ebp
		mov	[esp+3Ch+var_3C], ebx
		call	aim_ssi_aliasbuddy
		jmp	short loc_688A2A72
; ---------------------------------------------------------------------------

loc_688A2AD8:				; CODE XREF: oscar_alias_buddy+62j
		mov	eax, offset aNone_0 ; "(none)"
		jmp	short loc_688A2AA6
; ---------------------------------------------------------------------------

loc_688A2ADF:				; CODE XREF: oscar_alias_buddy+3Cj
		call	__stack_chk_fail
oscar_alias_buddy endp

; Exported entry 260. oscar_rename_group

; =============== S U B	R O U T	I N E =======================================


		public oscar_rename_group
oscar_rename_group proc	near

var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_20		= dword	ptr -20h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 3Ch
		mov	ebp, [esp+4Ch+arg_0]
		mov	eax, [esp+4Ch+arg_4]
		mov	[esp+4Ch+var_34], eax
		mov	edi, [esp+4Ch+arg_8]
		mov	ebx, [esp+4Ch+arg_C]
		mov	eax, ds:__stack_chk_guard
		mov	[esp+4Ch+var_20], eax
		xor	eax, eax
		mov	[esp+4Ch+var_4C], ebp
		call	purple_connection_get_protocol_data
		mov	esi, eax
		mov	eax, [eax+0CCh]
		test	eax, eax
		jnz	short loc_688A2B38
		mov	eax, [esp+4Ch+var_20]
		xor	eax, ds:__stack_chk_guard
		jnz	loc_688A2C41
		add	esp, 3Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 4

loc_688A2B38:				; CODE XREF: oscar_rename_group+38j
		mov	[esp+4Ch+var_4C], edi
		call	purple_group_get_name
		mov	edi, eax
		mov	[esp+4Ch+var_40], 1
		mov	[esp+4Ch+var_44], 0
		mov	[esp+4Ch+var_48], eax
		mov	eax, [esi+0D8h]
		mov	[esp+4Ch+var_4C], eax
		call	aim_ssi_itemlist_finditem
		test	eax, eax
		jz	loc_688A2C04
		mov	[esp+4Ch+var_4C], ebp
		call	purple_connection_get_account
		mov	[esp+4Ch+var_30], eax
		test	ebx, ebx
		jz	loc_688A2C3A
		mov	ebp, ebx
		xor	esi, esi

loc_688A2B84:				; CODE XREF: oscar_rename_group+BEj
		mov	eax, [ebp+0]
		mov	[esp+4Ch+var_4C], eax
		call	purple_buddy_get_group
		mov	[esp+4Ch+var_48], eax
		mov	[esp+4Ch+var_4C], esi
		call	g_list_append
		mov	esi, eax
		mov	ebp, [ebp+4]
		test	ebp, ebp
		jnz	short loc_688A2B84

loc_688A2BA4:				; CODE XREF: oscar_rename_group+158j
		mov	[esp+4Ch+var_44], esi
		mov	[esp+4Ch+var_48], ebx
		mov	eax, [esp+4Ch+var_30]
		mov	[esp+4Ch+var_4C], eax
		call	purple_account_remove_buddies
		mov	[esp+4Ch+var_48], ebx
		mov	eax, [esp+4Ch+var_30]
		mov	[esp+4Ch+var_4C], eax
		call	purple_account_add_buddies
		mov	[esp+4Ch+var_4C], esi
		call	g_list_free
		mov	eax, [esp+4Ch+var_20]
		xor	eax, ds:__stack_chk_guard
		jnz	short loc_688A2C41
		mov	[esp+4Ch+arg_C], edi
		mov	eax, [esp+4Ch+var_34]
		mov	[esp+4Ch+arg_8], eax
		mov	[esp+4Ch+arg_4], offset	aSsiMovedAllBud	; "ssi:	moved all buddies from group %s	to"...

loc_688A2BF0:				; CODE XREF: oscar_rename_group+154j
		mov	[esp+4Ch+arg_0], offset	aOscar_13 ; "oscar"
		add	esp, 3Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		jmp	purple_debug_info
; ---------------------------------------------------------------------------

loc_688A2C04:				; CODE XREF: oscar_rename_group+82j
		mov	[esp+4Ch+var_44], edi
		mov	eax, [esp+4Ch+var_34]
		mov	[esp+4Ch+var_48], eax
		mov	[esp+4Ch+var_4C], esi
		call	aim_ssi_rename_group
		mov	eax, [esp+4Ch+var_20]
		xor	eax, ds:__stack_chk_guard
		jnz	short loc_688A2C41
		mov	[esp+4Ch+arg_C], edi
		mov	eax, [esp+4Ch+var_34]
		mov	[esp+4Ch+arg_8], eax
		mov	[esp+4Ch+arg_4], offset	aSsiRenamedGrou	; "ssi:	renamed	group %s to %s\n"
		jmp	short loc_688A2BF0
; ---------------------------------------------------------------------------

loc_688A2C3A:				; CODE XREF: oscar_rename_group+96j
		xor	esi, esi
		jmp	loc_688A2BA4
; ---------------------------------------------------------------------------

loc_688A2C41:				; CODE XREF: oscar_rename_group+44j
					; oscar_rename_group+F6j ...
		call	__stack_chk_fail
oscar_rename_group endp

; ---------------------------------------------------------------------------
		align 4
; Exported entry 259. oscar_remove_group

; =============== S U B	R O U T	I N E =======================================


		public oscar_remove_group
oscar_remove_group proc	near

var_2C		= dword	ptr -2Ch
var_10		= dword	ptr -10h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	esi
		push	ebx
		sub	esp, 24h
		mov	ebx, [esp+2Ch+arg_0]
		mov	eax, ds:__stack_chk_guard
		mov	[esp+2Ch+var_10], eax
		xor	eax, eax
		mov	eax, [esp+2Ch+arg_4]
		mov	[esp+2Ch+var_2C], eax
		call	purple_group_get_name
		mov	esi, eax
		mov	[esp+2Ch+var_2C], ebx
		call	purple_connection_get_protocol_data
		mov	edx, [esp+2Ch+var_10]
		xor	edx, ds:__stack_chk_guard
		jnz	short loc_688A2C90
		mov	[esp+2Ch+arg_4], esi
		mov	[esp+2Ch+arg_0], eax
		add	esp, 24h
		pop	ebx
		pop	esi
		jmp	aim_ssi_delgroup
; ---------------------------------------------------------------------------

loc_688A2C90:				; CODE XREF: oscar_remove_group+34j
		call	__stack_chk_fail
oscar_remove_group endp

; ---------------------------------------------------------------------------
		align 4
; Exported entry 222. oscar_chat_info

; =============== S U B	R O U T	I N E =======================================


		public oscar_chat_info
oscar_chat_info	proc near

var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_10		= dword	ptr -10h

		push	esi
		push	ebx
		sub	esp, 24h
		mov	eax, ds:__stack_chk_guard
		mov	[esp+2Ch+var_10], eax
		xor	eax, eax
		mov	[esp+2Ch+var_2C], 1Ch
		call	g_malloc0
		mov	ebx, eax
		mov	[esp+2Ch+var_28], offset a_room	; "_Room:"
		mov	[esp+2Ch+var_2C], offset aPidgin_6 ; "pidgin"
		call	libintl_dgettext
		mov	[ebx], eax
		mov	dword ptr [ebx+4], offset aRoom	; "room"
		mov	dword ptr [ebx+8], 1
		mov	[esp+2Ch+var_28], ebx
		mov	[esp+2Ch+var_2C], 0
		call	g_list_append
		mov	esi, eax
		mov	[esp+2Ch+var_2C], 1Ch
		call	g_malloc0
		mov	ebx, eax
		mov	[esp+2Ch+var_28], offset a_exchange ; "_Exchange:"
		mov	[esp+2Ch+var_2C], offset aPidgin_6 ; "pidgin"
		call	libintl_dgettext
		mov	[ebx], eax
		mov	dword ptr [ebx+4], offset aExchange ; "exchange"
		mov	dword ptr [ebx+8], 1
		mov	dword ptr [ebx+0Ch], 1
		mov	dword ptr [ebx+10h], 4
		mov	dword ptr [ebx+14h], 14h
		mov	[esp+2Ch+var_28], ebx
		mov	[esp+2Ch+var_2C], esi
		call	g_list_append
		mov	edx, [esp+2Ch+var_10]
		xor	edx, ds:__stack_chk_guard
		jnz	short loc_688A2D51
		add	esp, 24h
		pop	ebx
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_688A2D51:				; CODE XREF: oscar_chat_info+B1j
		call	__stack_chk_fail
oscar_chat_info	endp

; ---------------------------------------------------------------------------
		align 4
; Exported entry 223. oscar_chat_info_defaults

; =============== S U B	R O U T	I N E =======================================


		public oscar_chat_info_defaults
oscar_chat_info_defaults proc near

var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_10		= dword	ptr -10h
arg_4		= dword	ptr  8

		push	esi
		push	ebx
		sub	esp, 24h
		mov	esi, [esp+2Ch+arg_4]
		mov	eax, ds:__stack_chk_guard
		mov	[esp+2Ch+var_10], eax
		xor	eax, eax
		mov	[esp+2Ch+var_20], offset g_free
		mov	[esp+2Ch+var_24], 0
		mov	[esp+2Ch+var_28], offset g_str_equal
		mov	[esp+2Ch+var_2C], offset loc_688ABE00
		call	g_hash_table_new_full
		mov	ebx, eax
		test	esi, esi
		jz	short loc_688A2DB2
		mov	[esp+2Ch+var_2C], esi
		call	g_strdup
		mov	[esp+2Ch+var_24], eax
		mov	[esp+2Ch+var_28], offset aRoom ; "room"
		mov	[esp+2Ch+var_2C], ebx
		call	g_hash_table_insert

loc_688A2DB2:				; CODE XREF: oscar_chat_info_defaults+3Cj
		mov	[esp+2Ch+var_2C], offset a4 ; "4"
		call	g_strdup
		mov	[esp+2Ch+var_24], eax
		mov	[esp+2Ch+var_28], offset aExchange ; "exchange"
		mov	[esp+2Ch+var_2C], ebx
		call	g_hash_table_insert
		mov	eax, ebx
		mov	edx, [esp+2Ch+var_10]
		xor	edx, ds:__stack_chk_guard
		jnz	short loc_688A2DE6
		add	esp, 24h
		pop	ebx
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_688A2DE6:				; CODE XREF: oscar_chat_info_defaults+86j
		call	__stack_chk_fail
oscar_chat_info_defaults endp

; ---------------------------------------------------------------------------
		align 4
; Exported entry 237. oscar_get_chat_name

; =============== S U B	R O U T	I N E =======================================


		public oscar_get_chat_name
oscar_get_chat_name proc near

var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_10		= dword	ptr -10h
arg_0		= dword	ptr  4

		sub	esp, 2Ch
		mov	eax, ds:__stack_chk_guard
		mov	[esp+2Ch+var_10], eax
		xor	eax, eax
		mov	[esp+2Ch+var_28], offset aRoom ; "room"
		mov	eax, [esp+2Ch+arg_0]
		mov	[esp+2Ch+var_2C], eax
		call	g_hash_table_lookup
		mov	edx, [esp+2Ch+var_10]
		xor	edx, ds:__stack_chk_guard
		jnz	short loc_688A2E26
		mov	[esp+2Ch+arg_0], eax
		add	esp, 2Ch
		jmp	g_strdup
; ---------------------------------------------------------------------------

loc_688A2E26:				; CODE XREF: oscar_get_chat_name+2Cj
		call	__stack_chk_fail
oscar_get_chat_name endp

; ---------------------------------------------------------------------------
		align 4
; Exported entry 246. oscar_join_chat

; =============== S U B	R O U T	I N E =======================================


		public oscar_join_chat
oscar_join_chat	proc near

Str		= dword	ptr -3Ch
EndPtr		= dword	ptr -38h
Radix		= dword	ptr -34h
var_30		= dword	ptr -30h
var_20		= dword	ptr -20h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 2Ch
		mov	esi, [esp+3Ch+arg_4]
		mov	eax, ds:__stack_chk_guard
		mov	[esp+3Ch+var_20], eax
		xor	eax, eax
		mov	eax, [esp+3Ch+arg_0]
		mov	[esp+3Ch+Str], eax
		call	purple_connection_get_protocol_data
		mov	edi, eax
		mov	[esp+3Ch+EndPtr], offset aRoom ; "room"
		mov	[esp+3Ch+Str], esi
		call	g_hash_table_lookup
		mov	ebx, eax
		mov	[esp+3Ch+EndPtr], offset aExchange ; "exchange"
		mov	[esp+3Ch+Str], esi
		call	g_hash_table_lookup
		test	ebx, ebx
		jz	short loc_688A2ED4
		cmp	byte ptr [ebx],	0
		jz	short loc_688A2ED4
		mov	esi, eax
		test	eax, eax
		jz	loc_688A2FD0
		call	_errno
		mov	dword ptr [eax], 0
		mov	[esp+3Ch+Radix], 0Ah ; Radix
		mov	[esp+3Ch+EndPtr], 0 ; EndPtr
		mov	[esp+3Ch+Str], esi ; Str
		call	strtol
		mov	esi, eax
		call	_errno
		mov	eax, [eax]
		test	eax, eax
		jz	short loc_688A2F08
		mov	[esp+3Ch+Radix], offset	aErrno0	; "errno == 0"
		mov	[esp+3Ch+EndPtr], offset aOscar_join_cha ; "oscar_join_chat"
		mov	[esp+3Ch+Str], 0
		call	g_return_if_fail_warning
		jmp	short loc_688A2EF0
; ---------------------------------------------------------------------------
		align 4

loc_688A2ED4:				; CODE XREF: oscar_join_chat+48j
					; oscar_join_chat+4Dj
		mov	[esp+3Ch+Radix], offset	aNameNullName0 ; "name != NULL && *name	!= '\\0'"
		mov	[esp+3Ch+EndPtr], offset aOscar_join_cha ; "oscar_join_chat"
		mov	[esp+3Ch+Str], 0
		call	g_return_if_fail_warning

loc_688A2EF0:				; CODE XREF: oscar_join_chat+A5j
					; oscar_join_chat+138j	...
		mov	eax, [esp+3Ch+var_20]
		xor	eax, ds:__stack_chk_guard
		jnz	loc_688A2FF1
		add	esp, 2Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_688A2F08:				; CODE XREF: oscar_join_chat+87j
		mov	[esp+3Ch+Radix], ebx
		mov	[esp+3Ch+EndPtr], offset aAttemptingToJo ; "Attempting to join chat room %s.\n"
		mov	[esp+3Ch+Str], offset aOscar_13	; "oscar"
		call	purple_debug_info
		mov	[esp+3Ch+EndPtr], 0Dh
		mov	[esp+3Ch+Str], edi
		call	flap_connection_getbytype
		mov	ebp, eax
		test	eax, eax
		jz	short loc_688A2F68
		mov	[esp+3Ch+EndPtr], offset aChatnavExistsC ; "chatnav exists, creating room\n"
		mov	[esp+3Ch+Str], offset aOscar_13	; "oscar"
		call	purple_debug_info
		and	esi, 0FFFFh
		mov	[esp+3Ch+var_30], esi
		mov	[esp+3Ch+Radix], ebx
		mov	[esp+3Ch+EndPtr], ebp
		mov	[esp+3Ch+Str], edi
		call	aim_chatnav_createroom
		jmp	short loc_688A2EF0
; ---------------------------------------------------------------------------
		align 4

loc_688A2F68:				; CODE XREF: oscar_join_chat+108j
		mov	[esp+3Ch+Str], 8
		call	g_malloc0
		mov	ebp, eax
		mov	[esp+3Ch+EndPtr], offset aChatnavDoesNot ; "chatnav does not exist, opening chatnav"...
		mov	[esp+3Ch+Str], offset aOscar_13	; "oscar"
		call	purple_debug_info
		mov	[ebp+4], esi
		mov	[esp+3Ch+Str], ebx
		call	g_strdup
		mov	[ebp+0], eax
		mov	[esp+3Ch+EndPtr], ebp
		mov	eax, [edi+0Ch]
		mov	[esp+3Ch+Str], eax
		call	g_slist_prepend
		mov	[edi+0Ch], eax
		mov	eax, [esp+3Ch+var_20]
		xor	eax, ds:__stack_chk_guard
		jnz	short loc_688A2FF1
		mov	[esp+3Ch+arg_4], 0Dh
		mov	[esp+3Ch+arg_0], edi
		add	esp, 2Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		jmp	aim_srv_requestnew
; ---------------------------------------------------------------------------
		align 10h

loc_688A2FD0:				; CODE XREF: oscar_join_chat+53j
		mov	[esp+3Ch+Radix], offset	aExchangeNull ;	"exchange != NULL"
		mov	[esp+3Ch+EndPtr], offset aOscar_join_cha ; "oscar_join_chat"
		mov	[esp+3Ch+Str], 0
		call	g_return_if_fail_warning
		jmp	loc_688A2EF0
; ---------------------------------------------------------------------------

loc_688A2FF1:				; CODE XREF: oscar_join_chat+CEj
					; oscar_join_chat+188j
		call	__stack_chk_fail
oscar_join_chat	endp

; ---------------------------------------------------------------------------
		align 4
; Exported entry 224. oscar_chat_invite

; =============== S U B	R O U T	I N E =======================================


		public oscar_chat_invite
oscar_chat_invite proc near

var_5C		= dword	ptr -5Ch
var_58		= dword	ptr -58h
var_54		= dword	ptr -54h
var_50		= dword	ptr -50h
var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_30		= dword	ptr -30h
var_20		= dword	ptr -20h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 4Ch
		mov	ebx, [esp+5Ch+arg_0]
		mov	edi, [esp+5Ch+arg_4]
		mov	ebp, [esp+5Ch+arg_8]
		mov	esi, [esp+5Ch+arg_C]
		mov	eax, ds:__stack_chk_guard
		mov	[esp+5Ch+var_20], eax
		xor	eax, eax
		mov	[esp+5Ch+var_5C], ebx
		call	purple_connection_get_protocol_data
		mov	[esp+5Ch+var_30], eax
		mov	[esp+5Ch+var_5C], ebx
		call	purple_connection_get_protocol_data
		mov	edx, [eax+34h]
		test	edx, edx
		jnz	short loc_688A303F
		jmp	short loc_688A3074
; ---------------------------------------------------------------------------
		align 4

loc_688A3038:				; CODE XREF: oscar_chat_invite+4Cj
		mov	edx, [edx+4]
		test	edx, edx
		jz	short loc_688A3074

loc_688A303F:				; CODE XREF: oscar_chat_invite+3Bj
		mov	ecx, [edx]
		cmp	edi, [ecx+10h]
		jnz	short loc_688A3038
		mov	eax, [ecx]
		movzx	edx, word ptr [ecx+8]
		test	ebp, ebp
		jz	short loc_688A3088

loc_688A3050:				; CODE XREF: oscar_chat_invite+95j
		mov	[esp+5Ch+var_48], 0
		mov	[esp+5Ch+var_4C], eax
		mov	[esp+5Ch+var_50], edx
		mov	[esp+5Ch+var_54], ebp
		mov	[esp+5Ch+var_58], esi
		mov	eax, [esp+5Ch+var_30]
		mov	[esp+5Ch+var_5C], eax
		call	aim_im_sendch2_chatinvite

loc_688A3074:				; CODE XREF: oscar_chat_invite+3Dj
					; oscar_chat_invite+45j
		mov	eax, [esp+5Ch+var_20]
		xor	eax, ds:__stack_chk_guard
		jnz	short loc_688A308F
		add	esp, 4Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_688A3088:				; CODE XREF: oscar_chat_invite+56j
		mov	ebp, offset byte_688B2167
		jmp	short loc_688A3050
; ---------------------------------------------------------------------------

loc_688A308F:				; CODE XREF: oscar_chat_invite+86j
		call	__stack_chk_fail
oscar_chat_invite endp

; Exported entry 225. oscar_chat_leave

; =============== S U B	R O U T	I N E =======================================


		public oscar_chat_leave
oscar_chat_leave proc near

var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_10		= dword	ptr -10h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	edi
		push	esi
		push	ebx
		sub	esp, 20h
		mov	edi, [esp+2Ch+arg_0]
		mov	eax, ds:__stack_chk_guard
		mov	[esp+2Ch+var_10], eax
		xor	eax, eax
		mov	eax, [esp+2Ch+arg_4]
		mov	[esp+2Ch+var_28], eax
		mov	[esp+2Ch+var_2C], edi
		call	purple_find_chat
		mov	ebx, eax
		test	eax, eax
		jz	loc_688A3150
		mov	[esp+2Ch+var_2C], eax
		call	purple_conversation_get_name
		mov	[esp+2Ch+var_24], eax
		mov	[esp+2Ch+var_28], offset aLeavingChatRoo ; "Leaving chat room %s\n"
		mov	[esp+2Ch+var_2C], offset aOscar_13 ; "oscar"
		call	purple_debug_info
		mov	[esp+2Ch+var_2C], ebx
		call	purple_conversation_get_chat_data
		mov	[esp+2Ch+var_2C], eax
		call	purple_conv_chat_get_id
		mov	esi, eax
		mov	[esp+2Ch+var_2C], edi
		call	purple_connection_get_protocol_data
		mov	ecx, [eax+34h]
		test	ecx, ecx
		jnz	short loc_688A310F
		jmp	short loc_688A314C
; ---------------------------------------------------------------------------
		align 4

loc_688A3108:				; CODE XREF: oscar_chat_leave+80j
		mov	ecx, [ecx+4]
		test	ecx, ecx
		jz	short loc_688A314C

loc_688A310F:				; CODE XREF: oscar_chat_leave+6Ej
		mov	ebx, [ecx]
		cmp	esi, [ebx+10h]
		jnz	short loc_688A3108

loc_688A3116:				; CODE XREF: oscar_chat_leave+BAj
		mov	[esp+2Ch+var_24], 0
		mov	[esp+2Ch+var_28], 0
		mov	eax, [ebx+0Ch]
		mov	[esp+2Ch+var_2C], eax
		call	flap_connection_schedule_destroy
		mov	eax, [esp+2Ch+var_10]
		xor	eax, ds:__stack_chk_guard
		jnz	short loc_688A317F
		mov	edx, ebx
		mov	eax, edi
		add	esp, 20h
		pop	ebx
		pop	esi
		pop	edi
		jmp	sub_688A08C8
; ---------------------------------------------------------------------------

loc_688A314C:				; CODE XREF: oscar_chat_leave+70j
					; oscar_chat_leave+79j
		xor	ebx, ebx
		jmp	short loc_688A3116
; ---------------------------------------------------------------------------

loc_688A3150:				; CODE XREF: oscar_chat_leave+29j
		mov	[esp+2Ch+var_24], offset aConvNull ; "conv != NULL"
		mov	[esp+2Ch+var_28], offset aOscar_chat_lea ; "oscar_chat_leave"
		mov	[esp+2Ch+var_2C], 0
		call	g_return_if_fail_warning
		mov	eax, [esp+2Ch+var_10]
		xor	eax, ds:__stack_chk_guard
		jnz	short loc_688A317F
		add	esp, 20h
		pop	ebx
		pop	esi
		pop	edi
		retn
; ---------------------------------------------------------------------------

loc_688A317F:				; CODE XREF: oscar_chat_leave+A7j
					; oscar_chat_leave+E2j
		call	__stack_chk_fail
oscar_chat_leave endp

; Exported entry 261. oscar_send_chat

; =============== S U B	R O U T	I N E =======================================


		public oscar_send_chat
oscar_send_chat	proc near

Str		= dword	ptr -5Ch
SubStr		= dword	ptr -58h
var_54		= dword	ptr -54h
var_50		= dword	ptr -50h
var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2A		= byte ptr -2Ah
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 4Ch
		mov	ebx, [esp+5Ch+arg_0]
		mov	esi, [esp+5Ch+arg_4]
		mov	edx, [esp+5Ch+arg_8]
		mov	[esp+5Ch+var_34], edx
		mov	eax, ds:__stack_chk_guard
		mov	[esp+5Ch+var_20], eax
		xor	eax, eax
		mov	[esp+5Ch+Str], ebx
		call	purple_connection_get_protocol_data
		mov	[esp+5Ch+var_30], eax
		mov	[esp+5Ch+SubStr], esi
		mov	[esp+5Ch+Str], ebx
		call	purple_find_chat
		mov	esi, eax
		test	eax, eax
		jz	loc_688A3360
		mov	[esp+5Ch+Str], ebx
		call	purple_connection_get_protocol_data
		mov	ecx, [eax+34h]
		test	ecx, ecx
		jnz	short loc_688A31E7
		jmp	loc_688A3360
; ---------------------------------------------------------------------------

loc_688A31DC:				; CODE XREF: oscar_send_chat+68j
		mov	ecx, [ecx+4]
		test	ecx, ecx
		jz	loc_688A3360

loc_688A31E7:				; CODE XREF: oscar_send_chat+51j
		mov	edi, [ecx]
		cmp	esi, [edi+18h]
		jnz	short loc_688A31DC
		mov	edx, [esp+5Ch+var_34]
		mov	[esp+5Ch+Str], edx
		call	purple_strdup_withhtml
		mov	ebx, eax
		mov	[esp+5Ch+SubStr], offset aImg ;	"<IMG "
		mov	[esp+5Ch+Str], eax ; Str
		call	strstr
		test	eax, eax
		jz	short loc_688A3252
		mov	[esp+5Ch+Str], 0 ; Time
		call	time
		mov	ebp, eax
		mov	[esp+5Ch+SubStr], offset aYourImImageW_0 ; "Your IM Image was not sent.	You cannot "...
		mov	[esp+5Ch+Str], offset aPidgin_6	; "pidgin"
		call	libintl_dgettext
		mov	[esp+5Ch+var_4C], ebp
		mov	[esp+5Ch+var_50], 200h
		mov	[esp+5Ch+var_54], eax
		mov	[esp+5Ch+SubStr], offset byte_688B2167
		mov	[esp+5Ch+Str], esi
		call	purple_conversation_write

loc_688A3252:				; CODE XREF: oscar_send_chat+8Aj
		lea	edx, [esp+5Ch+var_28]
		mov	[esp+5Ch+var_50], edx
		lea	esi, [esp+5Ch+var_2A]
		mov	[esp+5Ch+var_54], esi
		lea	eax, [esp+5Ch+var_24]
		mov	[esp+5Ch+SubStr], eax
		mov	[esp+5Ch+Str], ebx
		call	oscar_encode_im
		mov	ebp, eax
		mov	eax, [esp+5Ch+var_24]
		movzx	ecx, word ptr [edi+1Ch]
		cmp	ecx, eax
		jb	short loc_688A328C
		movzx	ecx, word ptr [edi+1Eh]
		cmp	eax, ecx
		jbe	loc_688A3316

loc_688A328C:				; CODE XREF: oscar_send_chat+FAj
		mov	[esp+5Ch+Str], ebp
		call	g_free
		mov	[esp+5Ch+Str], ebx
		call	purple_markup_strip_html
		mov	ebp, eax
		mov	[esp+5Ch+Str], ebx
		call	g_free
		mov	[esp+5Ch+Str], ebp
		call	purple_strdup_withhtml
		mov	ebx, eax
		mov	[esp+5Ch+Str], ebp
		call	g_free
		lea	edx, [esp+5Ch+var_28]
		mov	[esp+5Ch+var_50], edx
		mov	[esp+5Ch+var_54], esi
		lea	eax, [esp+5Ch+var_24]
		mov	[esp+5Ch+SubStr], eax
		mov	[esp+5Ch+Str], ebx
		call	oscar_encode_im
		mov	ebp, eax
		mov	eax, [esp+5Ch+var_24]
		movzx	ecx, word ptr [edi+1Ch]
		movzx	esi, word ptr [edi+1Eh]
		cmp	ecx, eax
		jb	loc_688A3379
		cmp	eax, esi
		ja	loc_688A3379
		mov	[esp+5Ch+var_50], ebp
		mov	edx, [esp+5Ch+var_34]
		mov	[esp+5Ch+var_54], edx
		mov	[esp+5Ch+SubStr], offset aSendingSAsSBec ; "Sending %s as %s because the original w"...
		mov	[esp+5Ch+Str], offset aOscar_13	; "oscar"
		call	purple_debug_info
		mov	eax, [esp+5Ch+var_24]

loc_688A3316:				; CODE XREF: oscar_send_chat+102j
		mov	[esp+5Ch+var_44], offset aEn_0 ; "en"
		mov	ecx, [esp+5Ch+var_28]
		mov	[esp+5Ch+var_48], ecx
		mov	[esp+5Ch+var_4C], eax
		mov	[esp+5Ch+var_50], ebp
		mov	[esp+5Ch+var_54], 0
		mov	eax, [edi+0Ch]
		mov	[esp+5Ch+SubStr], eax
		mov	eax, [esp+5Ch+var_30]
		mov	[esp+5Ch+Str], eax
		call	aim_chat_send_im
		mov	[esp+5Ch+Str], ebp
		call	g_free
		mov	[esp+5Ch+Str], ebx
		call	g_free
		xor	eax, eax
		jmp	short loc_688A3365
; ---------------------------------------------------------------------------
		align 10h

loc_688A3360:				; CODE XREF: oscar_send_chat+3Ej
					; oscar_send_chat+53j ...
		mov	eax, 0FFFFFFEAh

loc_688A3365:				; CODE XREF: oscar_send_chat+1D7j
					; oscar_send_chat+232j
		mov	edx, [esp+5Ch+var_20]
		xor	edx, ds:__stack_chk_guard
		jnz	short loc_688A33B8
		add	esp, 4Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_688A3379:				; CODE XREF: oscar_send_chat+160j
					; oscar_send_chat+168j
		mov	[esp+5Ch+var_44], esi
		mov	[esp+5Ch+var_48], eax
		mov	[esp+5Ch+var_4C], ecx
		mov	[esp+5Ch+var_50], eax
		mov	[esp+5Ch+var_54], ebp
		mov	[esp+5Ch+SubStr], offset aCouldNotSendSB ; "Could not send %s because (%u > maxlen "...
		mov	[esp+5Ch+Str], offset aOscar_13	; "oscar"
		call	purple_debug_warning
		mov	[esp+5Ch+Str], ebx
		call	g_free
		mov	[esp+5Ch+Str], ebp
		call	g_free
		mov	eax, 0FFFFFFF9h
		jmp	short loc_688A3365
; ---------------------------------------------------------------------------

loc_688A33B8:				; CODE XREF: oscar_send_chat+1EBj
		call	__stack_chk_fail
oscar_send_chat	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 242. oscar_get_purple_moods

; =============== S U B	R O U T	I N E =======================================


		public oscar_get_purple_moods
oscar_get_purple_moods proc near

var_10		= dword	ptr -10h
arg_0		= dword	ptr  4

		sub	esp, 1Ch
		mov	eax, [esp+1Ch+arg_0]
		mov	edx, ds:__stack_chk_guard
		mov	[esp+1Ch+var_10], edx
		xor	edx, edx
		mov	edx, [esp+1Ch+var_10]
		xor	edx, ds:__stack_chk_guard
		jnz	short loc_688A33EB
		mov	[esp+1Ch+arg_0], eax
		add	esp, 1Ch
		jmp	icq_get_purple_moods
; ---------------------------------------------------------------------------

loc_688A33EB:				; CODE XREF: oscar_get_purple_moods+1Dj
		call	__stack_chk_fail
oscar_get_purple_moods endp

; Exported entry 250. oscar_list_icon_icq

; =============== S U B	R O U T	I N E =======================================


		public oscar_list_icon_icq
oscar_list_icon_icq proc near

var_2C		= dword	ptr -2Ch
var_10		= dword	ptr -10h
arg_4		= dword	ptr  8

		push	ebx
		sub	esp, 28h
		mov	eax, [esp+2Ch+arg_4]
		mov	edx, ds:__stack_chk_guard
		mov	[esp+2Ch+var_10], edx
		xor	edx, edx
		test	eax, eax
		jz	short loc_688A3422
		mov	[esp+2Ch+var_2C], eax
		call	purple_buddy_get_name
		mov	ebx, eax
		test	eax, eax
		jz	short loc_688A3422
		mov	[esp+2Ch+var_2C], eax
		call	oscar_util_valid_name_sms
		test	eax, eax
		jz	short loc_688A3438

loc_688A3422:				; CODE XREF: oscar_list_icon_icq+16j
					; oscar_list_icon_icq+24j ...
		mov	eax, offset aIcq_0 ; "icq"
		mov	edx, [esp+2Ch+var_10]
		xor	edx, ds:__stack_chk_guard
		jnz	short loc_688A3442
		add	esp, 28h
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_688A3438:				; CODE XREF: oscar_list_icon_icq+30j
		mov	[esp+2Ch+var_2C], ebx
		call	oscar_util_valid_name_icq
		jmp	short loc_688A3422
; ---------------------------------------------------------------------------

loc_688A3442:				; CODE XREF: oscar_list_icon_icq+41j
		call	__stack_chk_fail
oscar_list_icon_icq endp

; ---------------------------------------------------------------------------
		align 4
; Exported entry 249. oscar_list_icon_aim

; =============== S U B	R O U T	I N E =======================================


		public oscar_list_icon_aim
oscar_list_icon_aim proc near

var_2C		= dword	ptr -2Ch
var_10		= dword	ptr -10h
arg_4		= dword	ptr  8

		push	ebx
		sub	esp, 28h
		mov	eax, [esp+2Ch+arg_4]
		mov	edx, ds:__stack_chk_guard
		mov	[esp+2Ch+var_10], edx
		xor	edx, edx
		test	eax, eax
		jz	short loc_688A347A
		mov	[esp+2Ch+var_2C], eax
		call	purple_buddy_get_name
		mov	ebx, eax
		test	eax, eax
		jz	short loc_688A347A
		mov	[esp+2Ch+var_2C], eax
		call	oscar_util_valid_name_sms
		test	eax, eax
		jz	short loc_688A3490

loc_688A347A:				; CODE XREF: oscar_list_icon_aim+16j
					; oscar_list_icon_aim+24j ...
		mov	eax, offset aAim ; "aim"

loc_688A347F:				; CODE XREF: oscar_list_icon_aim+59j
		mov	edx, [esp+2Ch+var_10]
		xor	edx, ds:__stack_chk_guard
		jnz	short loc_688A34A3
		add	esp, 28h
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_688A3490:				; CODE XREF: oscar_list_icon_aim+30j
		mov	[esp+2Ch+var_2C], ebx
		call	oscar_util_valid_name_icq
		test	eax, eax
		jz	short loc_688A347A
		mov	eax, offset aIcq_0 ; "icq"
		jmp	short loc_688A347F
; ---------------------------------------------------------------------------

loc_688A34A3:				; CODE XREF: oscar_list_icon_aim+41j
		call	__stack_chk_fail
oscar_list_icon_aim endp

; Exported entry 248. oscar_list_emblem

; =============== S U B	R O U T	I N E =======================================


		public oscar_list_emblem
oscar_list_emblem proc near

var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_20		= dword	ptr -20h
arg_0		= dword	ptr  4

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 2Ch
		mov	ebx, [esp+3Ch+arg_0]
		mov	eax, ds:__stack_chk_guard
		mov	[esp+3Ch+var_20], eax
		xor	eax, eax
		mov	[esp+3Ch+var_3C], ebx
		call	purple_buddy_get_account
		mov	esi, eax
		mov	[esp+3Ch+var_3C], ebx
		call	purple_buddy_get_name
		mov	ebp, eax
		test	esi, esi
		jz	loc_688A3588
		mov	[esp+3Ch+var_3C], esi
		call	purple_account_get_connection
		test	eax, eax
		jz	loc_688A3588
		mov	[esp+3Ch+var_3C], eax
		call	purple_connection_get_protocol_data
		mov	edi, eax
		test	eax, eax
		jz	loc_688A360C
		mov	[esp+3Ch+var_38], ebp
		mov	[esp+3Ch+var_3C], eax
		call	aim_locate_finduserinfo
		mov	esi, eax

loc_688A350A:				; CODE XREF: oscar_list_emblem+E4j
					; oscar_list_emblem+166j
		mov	[esp+3Ch+var_3C], ebx
		call	purple_buddy_get_presence
		mov	ebx, eax
		mov	[esp+3Ch+var_3C], eax
		call	purple_presence_is_online
		test	eax, eax
		jnz	short loc_688A3532
		test	ebp, ebp
		jz	short loc_688A3532
		test	edi, edi
		jz	short loc_688A3532
		mov	edx, [edi+0CCh]
		test	edx, edx
		jnz	short loc_688A3594

loc_688A3532:				; CODE XREF: oscar_list_emblem+76j
					; oscar_list_emblem+7Aj ...
		test	esi, esi
		jz	loc_688A3600
		mov	eax, [esi+8]
		test	al, 2
		jnz	short loc_688A3580
		test	ah, 4
		jnz	short loc_688A3560
		test	byte ptr [esi+22h], 20h
		jnz	loc_688A35F4
		test	byte ptr [esi+2Ah], 8
		jz	short loc_688A35D0
		mov	eax, offset aBirthday ;	"birthday"
		jmp	short loc_688A3565
; ---------------------------------------------------------------------------
		align 10h

loc_688A3560:				; CODE XREF: oscar_list_emblem+9Cj
		mov	eax, offset aBot ; "bot"

loc_688A3565:				; CODE XREF: oscar_list_emblem+B3j
					; oscar_list_emblem+DDj ...
		mov	edx, [esp+3Ch+var_20]
		xor	edx, ds:__stack_chk_guard
		jnz	loc_688A3607
		add	esp, 2Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_688A3580:				; CODE XREF: oscar_list_emblem+97j
		mov	eax, offset aAdmin_0 ; "admin"
		jmp	short loc_688A3565
; ---------------------------------------------------------------------------
		align 4

loc_688A3588:				; CODE XREF: oscar_list_emblem+2Cj
					; oscar_list_emblem+3Cj
		xor	edi, edi
		xor	esi, esi
		jmp	loc_688A350A
; ---------------------------------------------------------------------------
		align 4

loc_688A3594:				; CODE XREF: oscar_list_emblem+88j
		mov	[esp+3Ch+var_38], ebp
		mov	eax, [edi+0D8h]
		mov	[esp+3Ch+var_3C], eax
		call	aim_ssi_itemlist_findparentname
		test	eax, eax
		jz	short loc_688A3532
		mov	[esp+3Ch+var_34], ebp
		mov	[esp+3Ch+var_38], eax
		mov	eax, [edi+0D8h]
		mov	[esp+3Ch+var_3C], eax
		call	aim_ssi_waitingforauth
		test	eax, eax
		jz	loc_688A3532
		mov	eax, offset aNotAuthorized ; "not-authorized"
		jmp	short loc_688A3565
; ---------------------------------------------------------------------------
		align 10h

loc_688A35D0:				; CODE XREF: oscar_list_emblem+ACj
		mov	[esp+3Ch+var_38], 9
		mov	[esp+3Ch+var_3C], ebx
		call	purple_presence_is_status_primitive_active
		test	eax, eax
		jnz	short loc_688A3600
		test	byte ptr [esi+22h], 10h
		jz	short loc_688A3600
		mov	eax, offset aHiptop ; "hiptop"
		jmp	loc_688A3565
; ---------------------------------------------------------------------------

loc_688A35F4:				; CODE XREF: oscar_list_emblem+A2j
		mov	eax, offset aSecure ; "secure"
		jmp	loc_688A3565
; ---------------------------------------------------------------------------
		align 10h

loc_688A3600:				; CODE XREF: oscar_list_emblem+8Cj
					; oscar_list_emblem+13Aj ...
		xor	eax, eax
		jmp	loc_688A3565
; ---------------------------------------------------------------------------

loc_688A3607:				; CODE XREF: oscar_list_emblem+C7j
		call	__stack_chk_fail
; ---------------------------------------------------------------------------

loc_688A360C:				; CODE XREF: oscar_list_emblem+4Ej
		xor	esi, esi
		jmp	loc_688A350A
oscar_list_emblem endp

; ---------------------------------------------------------------------------
		align 4
; Exported entry 274. oscar_tooltip_text

; =============== S U B	R O U T	I N E =======================================


		public oscar_tooltip_text
oscar_tooltip_text proc	near

var_5C		= dword	ptr -5Ch
var_58		= dword	ptr -58h
var_54		= dword	ptr -54h
var_50		= dword	ptr -50h
var_4C		= dword	ptr -4Ch
var_30		= dword	ptr -30h
var_20		= dword	ptr -20h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 4Ch
		mov	ebx, [esp+5Ch+arg_0]
		mov	esi, [esp+5Ch+arg_4]
		mov	edi, [esp+5Ch+arg_8]
		mov	eax, ds:__stack_chk_guard
		mov	[esp+5Ch+var_20], eax
		xor	eax, eax
		test	ebx, ebx
		jz	short loc_688A364A
		mov	[esp+5Ch+var_5C], ebx
		call	purple_buddy_get_account
		mov	[esp+5Ch+var_5C], eax
		call	purple_account_is_connected
		test	eax, eax
		jnz	short loc_688A3664

loc_688A364A:				; CODE XREF: oscar_tooltip_text+20j
					; oscar_tooltip_text+62j ...
		mov	eax, [esp+5Ch+var_20]
		xor	eax, ds:__stack_chk_guard
		jnz	loc_688A36F3
		add	esp, 4Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 4

loc_688A3664:				; CODE XREF: oscar_tooltip_text+34j
		mov	[esp+5Ch+var_5C], ebx
		call	purple_buddy_get_presence
		mov	[esp+5Ch+var_5C], eax
		call	purple_presence_is_online
		test	eax, eax
		jz	short loc_688A364A
		mov	[esp+5Ch+var_5C], ebx
		call	purple_buddy_get_account
		mov	[esp+5Ch+var_5C], eax
		call	purple_account_get_connection
		mov	ebp, eax
		mov	[esp+5Ch+var_5C], eax
		call	purple_connection_get_protocol_data
		mov	[esp+5Ch+var_5C], ebx
		mov	[esp+5Ch+var_30], eax
		call	purple_buddy_get_name
		mov	[esp+5Ch+var_58], eax
		mov	edx, [esp+5Ch+var_30]
		mov	[esp+5Ch+var_5C], edx
		call	aim_locate_finduserinfo
		mov	[esp+5Ch+var_4C], 0
		mov	[esp+5Ch+var_50], eax
		mov	[esp+5Ch+var_54], ebx
		mov	[esp+5Ch+var_58], esi
		mov	[esp+5Ch+var_5C], ebp
		mov	[esp+5Ch+var_30], eax
		call	oscar_user_info_append_status
		test	edi, edi
		mov	eax, [esp+5Ch+var_30]
		jz	loc_688A364A
		mov	[esp+5Ch+var_50], eax
		mov	[esp+5Ch+var_54], ebx
		mov	[esp+5Ch+var_58], esi
		mov	[esp+5Ch+var_5C], ebp
		call	oscar_user_info_append_extra_info
		jmp	loc_688A364A
; ---------------------------------------------------------------------------

loc_688A36F3:				; CODE XREF: oscar_tooltip_text+40j
		call	__stack_chk_fail
oscar_tooltip_text endp

; Exported entry 272. oscar_status_text

; =============== S U B	R O U T	I N E =======================================


		public oscar_status_text
oscar_status_text proc near

var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_20		= dword	ptr -20h
arg_0		= dword	ptr  4

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 3Ch
		mov	ebx, [esp+4Ch+arg_0]
		mov	eax, ds:__stack_chk_guard
		mov	[esp+4Ch+var_20], eax
		xor	eax, eax
		mov	[esp+4Ch+var_4C], ebx
		call	purple_buddy_get_account
		mov	[esp+4Ch+var_4C], eax
		call	purple_account_get_connection
		mov	esi, eax
		mov	[esp+4Ch+var_4C], eax
		call	purple_connection_get_account
		mov	[esp+4Ch+var_30], eax
		mov	[esp+4Ch+var_4C], esi
		call	purple_connection_get_protocol_data
		mov	esi, eax
		mov	[esp+4Ch+var_4C], ebx
		call	purple_buddy_get_presence
		mov	edi, eax
		mov	[esp+4Ch+var_4C], eax
		call	purple_presence_get_active_status
		mov	ebp, eax
		test	esi, esi
		jz	short loc_688A375A
		mov	[esp+4Ch+var_4C], edi
		call	purple_presence_is_online
		test	eax, eax
		jz	short loc_688A37C8

loc_688A375A:				; CODE XREF: oscar_status_text+54j
		mov	[esp+4Ch+var_48], offset aMessage_1 ; "message"
		mov	[esp+4Ch+var_4C], ebp
		call	purple_status_get_attr_string
		mov	ebx, eax
		test	eax, eax
		jz	loc_688A3858
		mov	eax, [esp+4Ch+var_30]
		mov	[esp+4Ch+var_4C], eax
		call	purple_account_get_username
		mov	[esp+4Ch+var_48], eax
		mov	[esp+4Ch+var_4C], ebx
		call	oscar_util_format_string
		mov	ebx, eax
		mov	[esp+4Ch+var_48], 0FFFFFFFFh
		mov	[esp+4Ch+var_4C], eax
		call	purple_markup_escape_text
		mov	[esp+4Ch+var_4C], ebx
		mov	[esp+4Ch+var_34], eax
		call	g_free
		mov	eax, [esp+4Ch+var_34]

loc_688A37AE:				; CODE XREF: oscar_status_text+192j
		mov	edx, [esp+4Ch+var_20]
		xor	edx, ds:__stack_chk_guard
		jnz	loc_688A3850
		add	esp, 3Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 4

loc_688A37C8:				; CODE XREF: oscar_status_text+60j
		mov	[esp+4Ch+var_4C], ebx
		call	purple_buddy_get_name
		mov	ebx, eax
		mov	[esp+4Ch+var_48], eax
		mov	eax, [esi+0D8h]
		mov	[esp+4Ch+var_4C], eax
		call	aim_ssi_itemlist_findparentname
		mov	[esp+4Ch+var_44], ebx
		mov	[esp+4Ch+var_48], eax
		mov	eax, [esi+0D8h]
		mov	[esp+4Ch+var_4C], eax
		call	aim_ssi_waitingforauth
		test	eax, eax
		jnz	short loc_688A3830
		mov	[esp+4Ch+var_48], offset aOffline ; "Offline"
		mov	[esp+4Ch+var_4C], offset aPidgin_6 ; "pidgin"
		call	libintl_dgettext
		mov	edx, [esp+4Ch+var_20]
		xor	edx, ds:__stack_chk_guard
		jnz	short loc_688A3850

loc_688A381E:				; CODE XREF: oscar_status_text+156j
		mov	[esp+4Ch+arg_0], eax
		add	esp, 3Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		jmp	g_strdup
; ---------------------------------------------------------------------------
		align 10h

loc_688A3830:				; CODE XREF: oscar_status_text+104j
		mov	[esp+4Ch+var_48], offset aNotAuthorize_0 ; "Not	Authorized"
		mov	[esp+4Ch+var_4C], offset aPidgin_6 ; "pidgin"
		call	libintl_dgettext
		mov	edx, [esp+4Ch+var_20]
		xor	edx, ds:__stack_chk_guard
		jz	short loc_688A381E

loc_688A3850:				; CODE XREF: oscar_status_text+C0j
					; oscar_status_text+124j ...
		call	__stack_chk_fail
; ---------------------------------------------------------------------------
		align 4

loc_688A3858:				; CODE XREF: oscar_status_text+76j
		mov	[esp+4Ch+var_4C], ebp
		call	purple_status_is_available
		test	eax, eax
		jnz	short loc_688A3888
		mov	[esp+4Ch+var_4C], ebp
		call	purple_status_get_name
		mov	edx, [esp+4Ch+var_20]
		xor	edx, ds:__stack_chk_guard
		jnz	short loc_688A3850
		mov	[esp+4Ch+arg_0], eax
		add	esp, 3Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		jmp	g_strdup
; ---------------------------------------------------------------------------

loc_688A3888:				; CODE XREF: oscar_status_text+16Aj
		xor	eax, eax
		jmp	loc_688A37AE
oscar_status_text endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 265. oscar_set_aim_permdeny

; =============== S U B	R O U T	I N E =======================================


		public oscar_set_aim_permdeny
oscar_set_aim_permdeny proc near	; CODE XREF: sub_688A46F4+6AFp

var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_10		= dword	ptr -10h
arg_0		= dword	ptr  4

		push	esi
		push	ebx
		sub	esp, 24h
		mov	ebx, [esp+2Ch+arg_0]
		mov	eax, ds:__stack_chk_guard
		mov	[esp+2Ch+var_10], eax
		xor	eax, eax
		mov	[esp+2Ch+var_2C], ebx
		call	purple_connection_get_account
		mov	esi, eax
		mov	[esp+2Ch+var_2C], ebx
		call	purple_connection_get_protocol_data
		mov	edx, [esi+38h]
		and	edx, 0FFh
		mov	[esp+2Ch+var_28], edx
		mov	[esp+2Ch+var_2C], eax
		call	aim_ssi_setpermdeny
		mov	eax, [esp+2Ch+var_10]
		xor	eax, ds:__stack_chk_guard
		jnz	short loc_688A38DD
		add	esp, 24h
		pop	ebx
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_688A38DD:				; CODE XREF: oscar_set_aim_permdeny+45j
		call	__stack_chk_fail
oscar_set_aim_permdeny endp

; ---------------------------------------------------------------------------
		align 4
; Exported entry 213. oscar_add_permit

; =============== S U B	R O U T	I N E =======================================


		public oscar_add_permit
oscar_add_permit proc near

var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_10		= dword	ptr -10h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	esi
		push	ebx
		sub	esp, 24h
		mov	ebx, [esp+2Ch+arg_4]
		mov	eax, ds:__stack_chk_guard
		mov	[esp+2Ch+var_10], eax
		xor	eax, eax
		mov	eax, [esp+2Ch+arg_0]
		mov	[esp+2Ch+var_2C], eax
		call	purple_connection_get_protocol_data
		mov	esi, eax
		mov	[esp+2Ch+var_28], offset aSsiAboutToAddA ; "ssi: About to add a	permit\n"
		mov	[esp+2Ch+var_2C], offset aOscar_13 ; "oscar"
		call	purple_debug_info
		mov	[esp+2Ch+var_24], 2
		mov	[esp+2Ch+var_28], ebx
		mov	[esp+2Ch+var_2C], esi
		call	aim_ssi_add_to_private_list
		mov	eax, [esp+2Ch+var_10]
		xor	eax, ds:__stack_chk_guard
		jnz	short loc_688A3940
		add	esp, 24h
		pop	ebx
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_688A3940:				; CODE XREF: oscar_add_permit+54j
		call	__stack_chk_fail
oscar_add_permit endp

; ---------------------------------------------------------------------------
		align 4
; Exported entry 212. oscar_add_deny

; =============== S U B	R O U T	I N E =======================================


		public oscar_add_deny
oscar_add_deny	proc near

var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_10		= dword	ptr -10h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	esi
		push	ebx
		sub	esp, 24h
		mov	esi, [esp+2Ch+arg_4]
		mov	eax, ds:__stack_chk_guard
		mov	[esp+2Ch+var_10], eax
		xor	eax, eax
		mov	eax, [esp+2Ch+arg_0]
		mov	[esp+2Ch+var_2C], eax
		call	purple_connection_get_protocol_data
		mov	ebx, eax
		mov	[esp+2Ch+var_28], offset aSsiAboutToAd_0 ; "ssi: About to add a	deny\n"
		mov	[esp+2Ch+var_2C], offset aOscar_13 ; "oscar"
		call	purple_debug_info
		mov	[esp+2Ch+var_2C], ebx
		call	aim_ssi_getdenyentrytype
		movzx	eax, ax
		mov	[esp+2Ch+var_24], eax
		mov	[esp+2Ch+var_28], esi
		mov	[esp+2Ch+var_2C], ebx
		call	aim_ssi_add_to_private_list
		mov	eax, [esp+2Ch+var_10]
		xor	eax, ds:__stack_chk_guard
		jnz	short loc_688A39AB
		add	esp, 24h
		pop	ebx
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_688A39AB:				; CODE XREF: oscar_add_deny+5Bj
		call	__stack_chk_fail
oscar_add_deny	endp

; Exported entry 257. oscar_rem_permit

; =============== S U B	R O U T	I N E =======================================


		public oscar_rem_permit
oscar_rem_permit proc near

var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_10		= dword	ptr -10h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	esi
		push	ebx
		sub	esp, 24h
		mov	ebx, [esp+2Ch+arg_4]
		mov	eax, ds:__stack_chk_guard
		mov	[esp+2Ch+var_10], eax
		xor	eax, eax
		mov	eax, [esp+2Ch+arg_0]
		mov	[esp+2Ch+var_2C], eax
		call	purple_connection_get_protocol_data
		mov	esi, eax
		mov	[esp+2Ch+var_28], offset aSsiAboutToDele ; "ssi: About to delete a permit\n"
		mov	[esp+2Ch+var_2C], offset aOscar_13 ; "oscar"
		call	purple_debug_info
		mov	[esp+2Ch+var_24], 2
		mov	[esp+2Ch+var_28], ebx
		mov	[esp+2Ch+var_2C], esi
		call	aim_ssi_del_from_private_list
		mov	eax, [esp+2Ch+var_10]
		xor	eax, ds:__stack_chk_guard
		jnz	short loc_688A3A0C
		add	esp, 24h
		pop	ebx
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_688A3A0C:				; CODE XREF: oscar_rem_permit+54j
		call	__stack_chk_fail
oscar_rem_permit endp

; ---------------------------------------------------------------------------
		align 4
; Exported entry 256. oscar_rem_deny

; =============== S U B	R O U T	I N E =======================================


		public oscar_rem_deny
oscar_rem_deny	proc near

var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_10		= dword	ptr -10h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	esi
		push	ebx
		sub	esp, 24h
		mov	esi, [esp+2Ch+arg_4]
		mov	eax, ds:__stack_chk_guard
		mov	[esp+2Ch+var_10], eax
		xor	eax, eax
		mov	eax, [esp+2Ch+arg_0]
		mov	[esp+2Ch+var_2C], eax
		call	purple_connection_get_protocol_data
		mov	ebx, eax
		mov	[esp+2Ch+var_28], offset aSsiAboutToDe_0 ; "ssi: About to delete a deny\n"
		mov	[esp+2Ch+var_2C], offset aOscar_13 ; "oscar"
		call	purple_debug_info
		mov	[esp+2Ch+var_2C], ebx
		call	aim_ssi_getdenyentrytype
		movzx	eax, ax
		mov	[esp+2Ch+var_24], eax
		mov	[esp+2Ch+var_28], esi
		mov	[esp+2Ch+var_2C], ebx
		call	aim_ssi_del_from_private_list
		mov	eax, [esp+2Ch+var_10]
		xor	eax, ds:__stack_chk_guard
		jnz	short loc_688A3A77
		add	esp, 24h
		pop	ebx
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_688A3A77:				; CODE XREF: oscar_rem_deny+5Bj
		call	__stack_chk_fail
oscar_rem_deny	endp

; Exported entry 273. oscar_status_types

; =============== S U B	R O U T	I N E =======================================


		public oscar_status_types
oscar_status_types proc	near

var_7C		= dword	ptr -7Ch
var_78		= dword	ptr -78h
var_74		= dword	ptr -74h
var_70		= dword	ptr -70h
var_6C		= dword	ptr -6Ch
var_68		= dword	ptr -68h
var_64		= dword	ptr -64h
var_60		= dword	ptr -60h
var_5C		= dword	ptr -5Ch
var_58		= dword	ptr -58h
var_54		= dword	ptr -54h
var_50		= dword	ptr -50h
var_4C		= dword	ptr -4Ch
var_30		= dword	ptr -30h
var_20		= dword	ptr -20h
arg_0		= dword	ptr  4

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 6Ch
		mov	eax, [esp+7Ch+arg_0]
		mov	edx, ds:__stack_chk_guard
		mov	[esp+7Ch+var_20], edx
		xor	edx, edx
		test	eax, eax
		jz	loc_688A428C
		mov	[esp+7Ch+var_7C], eax
		call	purple_account_get_username
		mov	[esp+7Ch+var_7C], eax
		call	oscar_util_valid_name_icq
		mov	ebx, eax
		mov	[esp+7Ch+var_7C], 0Dh
		call	purple_value_new
		mov	ebp, eax
		mov	[esp+7Ch+var_78], offset aItunesMusicSto ; "iTunes Music Store Link"
		mov	[esp+7Ch+var_7C], offset aPidgin_6 ; "pidgin"
		call	libintl_dgettext
		mov	edi, eax
		mov	[esp+7Ch+var_7C], 0Dh
		call	purple_value_new
		mov	esi, eax
		mov	[esp+7Ch+var_78], offset aMessage_2 ; "Message"
		mov	[esp+7Ch+var_7C], offset aPidgin_6 ; "pidgin"
		call	libintl_dgettext
		mov	[esp+7Ch+var_4C], 0
		mov	[esp+7Ch+var_50], ebp
		mov	[esp+7Ch+var_54], edi
		mov	[esp+7Ch+var_58], offset aItmsurl ; "itmsurl"
		mov	[esp+7Ch+var_5C], esi
		mov	[esp+7Ch+var_60], eax
		mov	[esp+7Ch+var_64], offset aMessage_1 ; "message"
		mov	[esp+7Ch+var_68], 0
		mov	[esp+7Ch+var_6C], 1
		mov	[esp+7Ch+var_70], 1
		mov	[esp+7Ch+var_74], 0
		mov	[esp+7Ch+var_78], offset aAvailable_0 ;	"available"
		mov	[esp+7Ch+var_7C], 2
		call	purple_status_type_new_with_attrs
		mov	[esp+7Ch+var_78], eax
		mov	[esp+7Ch+var_7C], 0
		call	g_list_prepend
		mov	esi, eax
		mov	[esp+7Ch+var_7C], 0Dh
		call	purple_value_new
		mov	ebp, eax
		mov	[esp+7Ch+var_78], offset aMessage_2 ; "Message"
		mov	[esp+7Ch+var_7C], offset aPidgin_6 ; "pidgin"
		call	libintl_dgettext
		mov	edi, eax
		mov	[esp+7Ch+var_78], offset aFreeForChat ;	"Free For Chat"
		mov	[esp+7Ch+var_7C], offset aPidgin_6 ; "pidgin"
		call	libintl_dgettext
		mov	[esp+7Ch+var_58], 0
		mov	[esp+7Ch+var_5C], ebp
		mov	[esp+7Ch+var_60], edi
		mov	[esp+7Ch+var_64], offset aMessage_1 ; "message"
		mov	[esp+7Ch+var_68], 0
		mov	[esp+7Ch+var_6C], ebx
		mov	[esp+7Ch+var_70], 1
		mov	[esp+7Ch+var_74], eax
		mov	[esp+7Ch+var_78], offset aFree4chat ; "free4chat"
		mov	[esp+7Ch+var_7C], 2
		call	purple_status_type_new_with_attrs
		mov	[esp+7Ch+var_78], eax
		mov	[esp+7Ch+var_7C], esi
		call	g_list_prepend
		mov	esi, eax
		mov	[esp+7Ch+var_7C], 0Dh
		call	purple_value_new
		mov	ebp, eax
		mov	[esp+7Ch+var_78], offset aMessage_2 ; "Message"
		mov	[esp+7Ch+var_7C], offset aPidgin_6 ; "pidgin"
		call	libintl_dgettext
		mov	edi, eax
		mov	[esp+7Ch+var_78], offset aEvil_0 ; "Evil"
		mov	[esp+7Ch+var_7C], offset aPidgin_6 ; "pidgin"
		call	libintl_dgettext
		mov	[esp+7Ch+var_58], 0
		mov	[esp+7Ch+var_5C], ebp
		mov	[esp+7Ch+var_60], edi
		mov	[esp+7Ch+var_64], offset aMessage_1 ; "message"
		mov	[esp+7Ch+var_68], 0
		mov	[esp+7Ch+var_6C], ebx
		mov	[esp+7Ch+var_70], 1
		mov	[esp+7Ch+var_74], eax
		mov	[esp+7Ch+var_78], offset aEvil ; "evil"
		mov	[esp+7Ch+var_7C], 2
		call	purple_status_type_new_with_attrs
		mov	[esp+7Ch+var_78], eax
		mov	[esp+7Ch+var_7C], esi
		call	g_list_prepend
		mov	esi, eax
		mov	[esp+7Ch+var_7C], 0Dh
		call	purple_value_new
		mov	ebp, eax
		mov	[esp+7Ch+var_78], offset aMessage_2 ; "Message"
		mov	[esp+7Ch+var_7C], offset aPidgin_6 ; "pidgin"
		call	libintl_dgettext
		mov	edi, eax
		mov	[esp+7Ch+var_78], offset aDepression_0 ; "Depression"
		mov	[esp+7Ch+var_7C], offset aPidgin_6 ; "pidgin"
		call	libintl_dgettext
		mov	[esp+7Ch+var_58], 0
		mov	[esp+7Ch+var_5C], ebp
		mov	[esp+7Ch+var_60], edi
		mov	[esp+7Ch+var_64], offset aMessage_1 ; "message"
		mov	[esp+7Ch+var_68], 0
		mov	[esp+7Ch+var_6C], ebx
		mov	[esp+7Ch+var_70], 1
		mov	[esp+7Ch+var_74], eax
		mov	[esp+7Ch+var_78], offset aDepression ; "depression"
		mov	[esp+7Ch+var_7C], 2
		call	purple_status_type_new_with_attrs
		mov	[esp+7Ch+var_78], eax
		mov	[esp+7Ch+var_7C], esi
		call	g_list_prepend
		mov	esi, eax
		mov	[esp+7Ch+var_7C], 0Dh
		call	purple_value_new
		mov	ebp, eax
		mov	[esp+7Ch+var_78], offset aMessage_2 ; "Message"
		mov	[esp+7Ch+var_7C], offset aPidgin_6 ; "pidgin"
		call	libintl_dgettext
		mov	edi, eax
		mov	[esp+7Ch+var_78], offset aAtHome ; "At home"
		mov	[esp+7Ch+var_7C], offset aPidgin_6 ; "pidgin"
		call	libintl_dgettext
		mov	[esp+7Ch+var_58], 0
		mov	[esp+7Ch+var_5C], ebp
		mov	[esp+7Ch+var_60], edi
		mov	[esp+7Ch+var_64], offset aMessage_1 ; "message"
		mov	[esp+7Ch+var_68], 0
		mov	[esp+7Ch+var_6C], ebx
		mov	[esp+7Ch+var_70], 1
		mov	[esp+7Ch+var_74], eax
		mov	[esp+7Ch+var_78], offset aAthome ; "athome"
		mov	[esp+7Ch+var_7C], 2
		call	purple_status_type_new_with_attrs
		mov	[esp+7Ch+var_78], eax
		mov	[esp+7Ch+var_7C], esi
		call	g_list_prepend
		mov	esi, eax
		mov	[esp+7Ch+var_7C], 0Dh
		call	purple_value_new
		mov	ebp, eax
		mov	[esp+7Ch+var_78], offset aMessage_2 ; "Message"
		mov	[esp+7Ch+var_7C], offset aPidgin_6 ; "pidgin"
		call	libintl_dgettext
		mov	edi, eax
		mov	[esp+7Ch+var_78], offset aAtWork ; "At work"
		mov	[esp+7Ch+var_7C], offset aPidgin_6 ; "pidgin"
		call	libintl_dgettext
		mov	[esp+7Ch+var_58], 0
		mov	[esp+7Ch+var_5C], ebp
		mov	[esp+7Ch+var_60], edi
		mov	[esp+7Ch+var_64], offset aMessage_1 ; "message"
		mov	[esp+7Ch+var_68], 0
		mov	[esp+7Ch+var_6C], ebx
		mov	[esp+7Ch+var_70], 1
		mov	[esp+7Ch+var_74], eax
		mov	[esp+7Ch+var_78], offset aAtwork ; "atwork"
		mov	[esp+7Ch+var_7C], 2
		call	purple_status_type_new_with_attrs
		mov	[esp+7Ch+var_78], eax
		mov	[esp+7Ch+var_7C], esi
		call	g_list_prepend
		mov	esi, eax
		mov	[esp+7Ch+var_7C], 0Dh
		call	purple_value_new
		mov	ebp, eax
		mov	[esp+7Ch+var_78], offset aMessage_2 ; "Message"
		mov	[esp+7Ch+var_7C], offset aPidgin_6 ; "pidgin"
		call	libintl_dgettext
		mov	edi, eax
		mov	[esp+7Ch+var_78], offset aLunch_0 ; "Lunch"
		mov	[esp+7Ch+var_7C], offset aPidgin_6 ; "pidgin"
		call	libintl_dgettext
		mov	[esp+7Ch+var_58], 0
		mov	[esp+7Ch+var_5C], ebp
		mov	[esp+7Ch+var_60], edi
		mov	[esp+7Ch+var_64], offset aMessage_1 ; "message"
		mov	[esp+7Ch+var_68], 0
		mov	[esp+7Ch+var_6C], ebx
		mov	[esp+7Ch+var_70], 1
		mov	[esp+7Ch+var_74], eax
		mov	[esp+7Ch+var_78], offset aLunch	; "lunch"
		mov	[esp+7Ch+var_7C], 2
		call	purple_status_type_new_with_attrs
		mov	[esp+7Ch+var_78], eax
		mov	[esp+7Ch+var_7C], esi
		call	g_list_prepend
		mov	esi, eax
		mov	[esp+7Ch+var_7C], 0Dh
		call	purple_value_new
		mov	edi, eax
		mov	[esp+7Ch+var_78], offset aMessage_2 ; "Message"
		mov	[esp+7Ch+var_7C], offset aPidgin_6 ; "pidgin"
		call	libintl_dgettext
		mov	[esp+7Ch+var_58], 0
		mov	[esp+7Ch+var_5C], edi
		mov	[esp+7Ch+var_60], eax
		mov	[esp+7Ch+var_64], offset aMessage_1 ; "message"
		mov	[esp+7Ch+var_68], 0
		mov	[esp+7Ch+var_6C], 1
		mov	[esp+7Ch+var_70], 1
		mov	[esp+7Ch+var_74], 0
		mov	[esp+7Ch+var_78], offset aAway ; "away"
		mov	[esp+7Ch+var_7C], 5
		call	purple_status_type_new_with_attrs
		mov	[esp+7Ch+var_78], eax
		mov	[esp+7Ch+var_7C], esi
		call	g_list_prepend
		mov	esi, eax
		mov	[esp+7Ch+var_7C], 0Dh
		call	purple_value_new
		mov	edi, eax
		mov	[esp+7Ch+var_78], offset aMessage_2 ; "Message"
		mov	[esp+7Ch+var_7C], offset aPidgin_6 ; "pidgin"
		call	libintl_dgettext
		mov	[esp+7Ch+var_58], 0
		mov	[esp+7Ch+var_5C], edi
		mov	[esp+7Ch+var_60], eax
		mov	[esp+7Ch+var_64], offset aMessage_1 ; "message"
		mov	[esp+7Ch+var_68], 0
		mov	[esp+7Ch+var_6C], 1
		mov	[esp+7Ch+var_70], 1
		mov	[esp+7Ch+var_74], 0
		mov	[esp+7Ch+var_78], offset aInvisible ; "invisible"
		mov	[esp+7Ch+var_7C], 4
		call	purple_status_type_new_with_attrs
		mov	[esp+7Ch+var_78], eax
		mov	[esp+7Ch+var_7C], esi
		call	g_list_prepend
		mov	esi, eax
		mov	[esp+7Ch+var_68], 1
		mov	[esp+7Ch+var_6C], 0
		mov	[esp+7Ch+var_70], 0
		mov	[esp+7Ch+var_74], 0
		mov	[esp+7Ch+var_78], offset aMobile_0 ; "mobile"
		mov	[esp+7Ch+var_7C], 7
		call	purple_status_type_new_full
		mov	[esp+7Ch+var_78], eax
		mov	[esp+7Ch+var_7C], esi
		call	g_list_prepend
		mov	esi, eax
		mov	[esp+7Ch+var_7C], 0Dh
		call	purple_value_new
		mov	ebp, eax
		mov	[esp+7Ch+var_78], offset aMessage_2 ; "Message"
		mov	[esp+7Ch+var_7C], offset aPidgin_6 ; "pidgin"
		call	libintl_dgettext
		mov	edi, eax
		mov	[esp+7Ch+var_78], offset aOccupied_0 ; "Occupied"
		mov	[esp+7Ch+var_7C], offset aPidgin_6 ; "pidgin"
		call	libintl_dgettext
		mov	[esp+7Ch+var_58], 0
		mov	[esp+7Ch+var_5C], ebp
		mov	[esp+7Ch+var_60], edi
		mov	[esp+7Ch+var_64], offset aMessage_1 ; "message"
		mov	[esp+7Ch+var_68], 0
		mov	[esp+7Ch+var_6C], ebx
		mov	[esp+7Ch+var_70], 1
		mov	[esp+7Ch+var_74], eax
		mov	[esp+7Ch+var_78], offset aOccupied ; "occupied"
		mov	[esp+7Ch+var_7C], 3
		call	purple_status_type_new_with_attrs
		mov	[esp+7Ch+var_78], eax
		mov	[esp+7Ch+var_7C], esi
		call	g_list_prepend
		mov	esi, eax
		mov	[esp+7Ch+var_7C], 0Dh
		call	purple_value_new
		mov	ebp, eax
		mov	[esp+7Ch+var_78], offset aMessage_2 ; "Message"
		mov	[esp+7Ch+var_7C], offset aPidgin_6 ; "pidgin"
		call	libintl_dgettext
		mov	edi, eax
		mov	[esp+7Ch+var_78], offset aDoNotDisturb ; "Do Not Disturb"
		mov	[esp+7Ch+var_7C], offset aPidgin_6 ; "pidgin"
		call	libintl_dgettext
		mov	[esp+7Ch+var_58], 0
		mov	[esp+7Ch+var_5C], ebp
		mov	[esp+7Ch+var_60], edi
		mov	[esp+7Ch+var_64], offset aMessage_1 ; "message"
		mov	[esp+7Ch+var_68], 0
		mov	[esp+7Ch+var_6C], ebx
		mov	[esp+7Ch+var_70], 1
		mov	[esp+7Ch+var_74], eax
		mov	[esp+7Ch+var_78], offset aDnd ;	"dnd"
		mov	[esp+7Ch+var_7C], 3
		call	purple_status_type_new_with_attrs
		mov	[esp+7Ch+var_78], eax
		mov	[esp+7Ch+var_7C], esi
		call	g_list_prepend
		mov	esi, eax
		mov	[esp+7Ch+var_7C], 0Dh
		call	purple_value_new
		mov	ebp, eax
		mov	[esp+7Ch+var_78], offset aMessage_2 ; "Message"
		mov	[esp+7Ch+var_7C], offset aPidgin_6 ; "pidgin"
		call	libintl_dgettext
		mov	edi, eax
		mov	[esp+7Ch+var_78], offset aNotAvailable ; "Not Available"
		mov	[esp+7Ch+var_7C], offset aPidgin_6 ; "pidgin"
		call	libintl_dgettext
		mov	[esp+7Ch+var_58], 0
		mov	[esp+7Ch+var_5C], ebp
		mov	[esp+7Ch+var_60], edi
		mov	[esp+7Ch+var_64], offset aMessage_1 ; "message"
		mov	[esp+7Ch+var_68], 0
		mov	[esp+7Ch+var_6C], ebx
		mov	[esp+7Ch+var_70], 1
		mov	[esp+7Ch+var_74], eax
		mov	[esp+7Ch+var_78], offset aNa ; "na"
		mov	[esp+7Ch+var_7C], 6
		call	purple_status_type_new_with_attrs
		mov	[esp+7Ch+var_78], eax
		mov	[esp+7Ch+var_7C], esi
		call	g_list_prepend
		mov	esi, eax
		mov	[esp+7Ch+var_68], 0
		mov	[esp+7Ch+var_6C], 1
		mov	[esp+7Ch+var_70], 1
		mov	[esp+7Ch+var_74], 0
		mov	[esp+7Ch+var_78], offset aOffline_0 ; "offline"
		mov	[esp+7Ch+var_7C], 1
		call	purple_status_type_new_full
		mov	[esp+7Ch+var_78], eax
		mov	[esp+7Ch+var_7C], esi
		call	g_list_prepend
		mov	esi, eax
		mov	[esp+7Ch+var_7C], 0Dh
		call	purple_value_new
		mov	[esp+7Ch+var_78], offset aMoodComment ;	"Mood Comment"
		mov	[esp+7Ch+var_7C], offset aPidgin_6 ; "pidgin"
		mov	[esp+7Ch+var_30], eax
		call	libintl_dgettext
		mov	ebp, eax
		mov	[esp+7Ch+var_7C], 0Dh
		call	purple_value_new
		mov	edi, eax
		mov	[esp+7Ch+var_78], offset aMoodName ; "Mood Name"
		mov	[esp+7Ch+var_7C], offset aPidgin_6 ; "pidgin"
		call	libintl_dgettext
		mov	[esp+7Ch+var_4C], 0
		mov	edx, [esp+7Ch+var_30]
		mov	[esp+7Ch+var_50], edx
		mov	[esp+7Ch+var_54], ebp
		mov	[esp+7Ch+var_58], offset aMoodtext_0 ; "moodtext"
		mov	[esp+7Ch+var_5C], edi
		mov	[esp+7Ch+var_60], eax
		mov	[esp+7Ch+var_64], offset aMood_1 ; "mood"
		mov	[esp+7Ch+var_68], 1
		mov	[esp+7Ch+var_6C], ebx
		mov	[esp+7Ch+var_70], 1
		mov	[esp+7Ch+var_74], 0
		mov	[esp+7Ch+var_78], offset aMood_1 ; "mood"
		mov	[esp+7Ch+var_7C], 9
		call	purple_status_type_new_with_attrs
		mov	[esp+7Ch+var_78], eax
		mov	[esp+7Ch+var_7C], esi
		call	g_list_prepend
		mov	edx, [esp+7Ch+var_20]
		xor	edx, ds:__stack_chk_guard
		jnz	short loc_688A42BE
		mov	[esp+7Ch+arg_0], eax
		add	esp, 6Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		jmp	g_list_reverse
; ---------------------------------------------------------------------------
		align 4

loc_688A428C:				; CODE XREF: oscar_status_types+1Cj
		mov	[esp+7Ch+var_74], offset aAccountNull ;	"account != NULL"
		mov	[esp+7Ch+var_78], offset aOscar_status_t ; "oscar_status_types"
		mov	[esp+7Ch+var_7C], 0
		call	g_return_if_fail_warning
		xor	eax, eax
		mov	edx, [esp+7Ch+var_20]
		xor	edx, ds:__stack_chk_guard
		jnz	short loc_688A42BE
		add	esp, 6Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_688A42BE:				; CODE XREF: oscar_status_types+7F8j
					; oscar_status_types+838j
		call	__stack_chk_fail
oscar_status_types endp

; ---------------------------------------------------------------------------
		align 4
; Exported entry 218. oscar_blist_node_menu

; =============== S U B	R O U T	I N E =======================================


		public oscar_blist_node_menu
oscar_blist_node_menu proc near

var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_20		= dword	ptr -20h
arg_0		= dword	ptr  4

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 3Ch
		mov	ebx, [esp+4Ch+arg_0]
		mov	eax, ds:__stack_chk_guard
		mov	[esp+4Ch+var_20], eax
		xor	eax, eax
		mov	[esp+4Ch+var_4C], ebx
		call	purple_blist_node_get_type
		cmp	eax, 2
		jnz	loc_688A447C
		mov	[esp+4Ch+var_4C], ebx
		call	purple_buddy_get_name
		mov	ebp, eax
		mov	[esp+4Ch+var_4C], ebx
		call	purple_buddy_get_account
		mov	[esp+4Ch+var_34], eax
		mov	[esp+4Ch+var_4C], eax
		call	purple_account_get_connection
		mov	[esp+4Ch+var_4C], eax
		call	purple_connection_get_protocol_data
		mov	esi, eax
		mov	[esp+4Ch+var_48], ebp
		mov	[esp+4Ch+var_4C], eax
		call	aim_locate_finduserinfo
		mov	[esp+4Ch+var_30], eax
		mov	eax, [esi+44h]
		test	eax, eax
		jnz	loc_688A4498

loc_688A432E:				; CODE XREF: oscar_blist_node_menu+1DEj
		xor	edi, edi

loc_688A4330:				; CODE XREF: oscar_blist_node_menu+22Aj
		mov	[esp+4Ch+var_4C], ebx
		call	purple_buddy_get_group
		test	eax, eax
		jz	short loc_688A437E
		mov	[esp+4Ch+var_48], offset aEditBuddyComme ; "Edit Buddy Comment"
		mov	[esp+4Ch+var_4C], offset aPidgin_6 ; "pidgin"
		call	libintl_dgettext
		mov	[esp+4Ch+var_40], 0
		mov	[esp+4Ch+var_44], 0
		mov	[esp+4Ch+var_48], offset sub_6889A038
		mov	[esp+4Ch+var_4C], eax
		call	purple_menu_action_new
		mov	[esp+4Ch+var_48], eax
		mov	[esp+4Ch+var_4C], edi
		call	g_list_prepend
		mov	edi, eax

loc_688A437E:				; CODE XREF: oscar_blist_node_menu+76j
		mov	eax, [esi+44h]
		test	eax, eax
		jnz	loc_688A44F4
		mov	eax, [esp+4Ch+var_30]
		test	eax, eax
		jz	short loc_688A43CC

loc_688A4391:				; CODE XREF: oscar_blist_node_menu+292j
		mov	eax, [esp+4Ch+var_34]
		mov	[esp+4Ch+var_4C], eax
		call	purple_account_get_username
		mov	[esp+4Ch+var_48], ebp
		mov	[esp+4Ch+var_4C], eax
		call	oscar_util_name_compare
		test	eax, eax
		jz	short loc_688A43CC
		test	ebx, ebx
		jz	short loc_688A43CC
		mov	[esp+4Ch+var_4C], ebx
		call	purple_buddy_get_account
		mov	[esp+4Ch+var_4C], eax
		call	purple_account_is_connected
		test	eax, eax
		jnz	loc_688A4564
		lea	esi, [esi+0]

loc_688A43CC:				; CODE XREF: oscar_blist_node_menu+CBj
					; oscar_blist_node_menu+E7j ...
		mov	ecx, [esi+0CCh]
		test	ecx, ecx
		jnz	short loc_688A43F8

loc_688A43D6:				; CODE XREF: oscar_blist_node_menu+13Ej
					; oscar_blist_node_menu+154j ...
		mov	eax, [esp+4Ch+var_20]
		xor	eax, ds:__stack_chk_guard
		jnz	loc_688A4627
		mov	[esp+4Ch+arg_0], edi
		add	esp, 3Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		jmp	g_list_reverse
; ---------------------------------------------------------------------------
		align 4

loc_688A43F8:				; CODE XREF: oscar_blist_node_menu+110j
		mov	[esp+4Ch+var_4C], ebx
		call	purple_buddy_get_group
		test	eax, eax
		jz	short loc_688A43D6
		mov	[esp+4Ch+var_48], ebp
		mov	eax, [esi+0D8h]
		mov	[esp+4Ch+var_4C], eax
		call	aim_ssi_itemlist_findparentname
		test	eax, eax
		jz	short loc_688A43D6
		mov	[esp+4Ch+var_44], ebp
		mov	[esp+4Ch+var_48], eax
		mov	eax, [esi+0D8h]
		mov	[esp+4Ch+var_4C], eax
		call	aim_ssi_waitingforauth
		test	eax, eax
		jz	short loc_688A43D6
		mov	[esp+4Ch+var_48], offset aReRequestAutho ; "Re-request Authorization"
		mov	[esp+4Ch+var_4C], offset aPidgin_6 ; "pidgin"
		call	libintl_dgettext
		mov	[esp+4Ch+var_40], 0
		mov	[esp+4Ch+var_44], 0
		mov	[esp+4Ch+var_48], offset oscar_auth_sendrequest_menu
		mov	[esp+4Ch+var_4C], eax
		call	purple_menu_action_new
		mov	[esp+4Ch+var_48], eax
		mov	[esp+4Ch+var_4C], edi
		call	g_list_prepend
		mov	edi, eax
		jmp	loc_688A43D6
; ---------------------------------------------------------------------------
		align 4

loc_688A447C:				; CODE XREF: oscar_blist_node_menu+21j
		xor	eax, eax
		mov	edx, [esp+4Ch+var_20]
		xor	edx, ds:__stack_chk_guard
		jnz	loc_688A4627
		add	esp, 3Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 4

loc_688A4498:				; CODE XREF: oscar_blist_node_menu+64j
		mov	[esp+4Ch+var_4C], ebp
		call	oscar_util_valid_name_icq
		test	eax, eax
		jz	loc_688A432E
		mov	[esp+4Ch+var_48], offset aGetAimInfo ; "Get AIM	Info"
		mov	[esp+4Ch+var_4C], offset aPidgin_6 ; "pidgin"
		call	libintl_dgettext
		mov	[esp+4Ch+var_40], 0
		mov	[esp+4Ch+var_44], 0
		mov	[esp+4Ch+var_48], offset loc_6889F170
		mov	[esp+4Ch+var_4C], eax
		call	purple_menu_action_new
		mov	[esp+4Ch+var_48], eax
		mov	[esp+4Ch+var_4C], 0
		call	g_list_prepend
		mov	edi, eax
		jmp	loc_688A4330
; ---------------------------------------------------------------------------
		align 4

loc_688A44F4:				; CODE XREF: oscar_blist_node_menu+BFj
		mov	[esp+4Ch+var_48], offset aGetXStatusMsg	; "Get X-Status	Msg"
		mov	[esp+4Ch+var_4C], offset aPidgin_6 ; "pidgin"
		call	libintl_dgettext
		mov	[esp+4Ch+var_40], 0
		mov	[esp+4Ch+var_44], 0
		mov	[esp+4Ch+var_48], offset loc_6889F0AC
		mov	[esp+4Ch+var_4C], eax
		call	purple_menu_action_new
		mov	[esp+4Ch+var_48], eax
		mov	[esp+4Ch+var_4C], edi
		call	g_list_prepend
		mov	edi, eax
		mov	[esp+4Ch+var_48], ebp
		mov	[esp+4Ch+var_4C], esi
		call	create_visibility_menu_item
		mov	[esp+4Ch+var_48], eax
		mov	[esp+4Ch+var_4C], edi
		call	g_list_prepend
		mov	edi, eax
		mov	eax, [esp+4Ch+var_30]
		test	eax, eax
		jnz	loc_688A4391
		jmp	loc_688A43CC
; ---------------------------------------------------------------------------
		align 4

loc_688A4564:				; CODE XREF: oscar_blist_node_menu+FFj
		mov	[esp+4Ch+var_4C], ebx
		call	purple_buddy_get_presence
		mov	[esp+4Ch+var_4C], eax
		call	purple_presence_is_online
		test	eax, eax
		jz	loc_688A43CC
		mov	[esp+4Ch+var_44], 4
		mov	[esp+4Ch+var_40], 0
		mov	[esp+4Ch+var_48], ebp
		mov	[esp+4Ch+var_4C], esi
		call	peer_connection_find_by_type
		mov	edx, [esp+4Ch+var_30]
		test	byte ptr [edx+20h], 4
		jz	loc_688A43CC
		test	eax, eax
		jz	short loc_688A45F1
		mov	[esp+4Ch+var_48], offset aEndDirectImSes ; "End	Direct IM Session"
		mov	[esp+4Ch+var_4C], offset aPidgin_6 ; "pidgin"
		call	libintl_dgettext
		mov	[esp+4Ch+var_40], 0
		mov	[esp+4Ch+var_44], 0
		mov	[esp+4Ch+var_48], offset loc_68899DCC
		mov	[esp+4Ch+var_4C], eax
		call	purple_menu_action_new

loc_688A45DE:				; CODE XREF: oscar_blist_node_menu+361j
		mov	[esp+4Ch+var_48], eax
		mov	[esp+4Ch+var_4C], edi
		call	g_list_prepend
		mov	edi, eax
		jmp	loc_688A43CC
; ---------------------------------------------------------------------------

loc_688A45F1:				; CODE XREF: oscar_blist_node_menu+2E4j
		mov	[esp+4Ch+var_48], offset aDirectIm ; "Direct IM"
		mov	[esp+4Ch+var_4C], offset aPidgin_6 ; "pidgin"
		call	libintl_dgettext
		mov	[esp+4Ch+var_40], 0
		mov	[esp+4Ch+var_44], 0
		mov	[esp+4Ch+var_48], offset sub_68899BD8
		mov	[esp+4Ch+var_4C], eax
		call	purple_menu_action_new
		jmp	short loc_688A45DE
; ---------------------------------------------------------------------------

loc_688A4627:				; CODE XREF: oscar_blist_node_menu+11Cj
					; oscar_blist_node_menu+1C4j
		call	__stack_chk_fail
oscar_blist_node_menu endp

; Exported entry 266. oscar_set_icon

; =============== S U B	R O U T	I N E =======================================


		public oscar_set_icon
oscar_set_icon	proc near		; CODE XREF: sub_688A46F4+438p

var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_30		= byte ptr -30h
var_20		= dword	ptr -20h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 3Ch
		mov	ebx, [esp+4Ch+arg_4]
		mov	eax, ds:__stack_chk_guard
		mov	[esp+4Ch+var_20], eax
		xor	eax, eax
		mov	eax, [esp+4Ch+arg_0]
		mov	[esp+4Ch+var_4C], eax
		call	purple_connection_get_protocol_data
		mov	edi, eax
		test	ebx, ebx
		jz	loc_688A46E4
		mov	[esp+4Ch+var_4C], ebx
		call	purple_imgstore_get_data
		mov	esi, eax
		mov	[esp+4Ch+var_4C], ebx
		call	purple_imgstore_get_size
		mov	ebp, eax
		mov	[esp+4Ch+var_48], 0
		mov	[esp+4Ch+var_4C], offset aMd5_0	; "md5"
		call	purple_cipher_context_new_by_name
		mov	ebx, eax
		mov	[esp+4Ch+var_44], ebp
		mov	[esp+4Ch+var_48], esi
		mov	[esp+4Ch+var_4C], eax
		call	purple_cipher_context_append
		mov	[esp+4Ch+var_40], 0
		lea	esi, [esp+4Ch+var_30]
		mov	[esp+4Ch+var_44], esi
		mov	[esp+4Ch+var_48], 10h
		mov	[esp+4Ch+var_4C], ebx
		call	purple_cipher_context_digest
		mov	[esp+4Ch+var_4C], ebx
		call	purple_cipher_context_destroy
		mov	[esp+4Ch+var_44], 10h
		mov	[esp+4Ch+var_48], esi
		mov	[esp+4Ch+var_4C], edi
		call	aim_ssi_seticon

loc_688A46CE:				; CODE XREF: oscar_set_icon+C0j
		mov	eax, [esp+4Ch+var_20]
		xor	eax, ds:__stack_chk_guard
		jnz	short loc_688A46EE
		add	esp, 3Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 4

loc_688A46E4:				; CODE XREF: oscar_set_icon+26j
		mov	[esp+4Ch+var_4C], eax
		call	aim_ssi_delicon
		jmp	short loc_688A46CE
; ---------------------------------------------------------------------------

loc_688A46EE:				; CODE XREF: oscar_set_icon+ACj
		call	__stack_chk_fail
oscar_set_icon	endp

; ---------------------------------------------------------------------------
		align 4

; =============== S U B	R O U T	I N E =======================================


sub_688A46F4	proc near		; DATA XREF: oscar_login+464o

var_6C		= dword	ptr -6Ch
var_68		= dword	ptr -68h
var_64		= dword	ptr -64h
var_60		= dword	ptr -60h
var_50		= dword	ptr -50h
var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_3A		= word ptr -3Ah
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_20		= dword	ptr -20h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 5Ch
		mov	ebx, [esp+6Ch+arg_0]
		mov	edx, [esp+6Ch+arg_4]
		mov	[esp+6Ch+var_30], edx
		mov	eax, ds:__stack_chk_guard
		mov	[esp+6Ch+var_20], eax
		xor	eax, eax
		mov	[esp+6Ch+var_6C], ebx
		call	aim_ssi_getdenyentrytype
		mov	[esp+6Ch+var_3A], ax
		mov	ebx, [ebx+68h]
		mov	[esp+6Ch+var_48], ebx
		mov	[esp+6Ch+var_6C], ebx
		call	purple_connection_get_protocol_data
		mov	ebp, eax
		mov	edx, [esp+6Ch+var_48]
		mov	[esp+6Ch+var_6C], edx
		call	purple_connection_get_account
		mov	[esp+6Ch+var_40], eax
		mov	eax, [ebp+48h]
		test	eax, eax
		jnz	loc_688A4E40

loc_688A474B:				; CODE XREF: sub_688A46F4+75Bj
		mov	[esp+6Ch+var_68], offset aSsiSyncingLoca ; "ssi: syncing local list and	server list"...
		mov	[esp+6Ch+var_6C], offset aOscar_13 ; "oscar"
		call	purple_debug_info
		mov	[esp+6Ch+var_6C], ebp
		call	aim_ssi_cleanlist
		mov	[esp+6Ch+var_68], 0
		mov	eax, [esp+6Ch+var_40]
		mov	[esp+6Ch+var_6C], eax
		call	purple_find_buddies
		mov	edi, eax
		xor	ebx, ebx
		test	eax, eax
		jz	loc_688A48C8
		mov	[esp+6Ch+var_44], ebx
		jmp	short loc_688A4808
; ---------------------------------------------------------------------------
		align 10h

loc_688A4790:				; CODE XREF: sub_688A46F4+148j
		mov	[esp+6Ch+var_68], offset aServernick_0 ; "servernick"
		mov	[esp+6Ch+var_6C], ebx
		call	purple_blist_node_get_string
		test	eax, eax
		jz	short loc_688A47B8
		mov	[esp+6Ch+var_64], eax
		mov	[esp+6Ch+var_68], esi
		mov	edx, [esp+6Ch+var_48]
		mov	[esp+6Ch+var_6C], edx
		call	serv_got_alias

loc_688A47B8:				; CODE XREF: sub_688A46F4+AEj
		mov	[esp+6Ch+var_64], esi
		mov	eax, [esp+6Ch+var_4C]
		mov	[esp+6Ch+var_68], eax
		mov	eax, [ebp+0D8h]
		mov	[esp+6Ch+var_6C], eax
		call	aim_ssi_getalias
		mov	[esp+6Ch+var_6C], ebx
		mov	[esp+6Ch+var_50], eax
		call	purple_buddy_get_local_buddy_alias
		mov	edx, [esp+6Ch+var_50]
		test	edx, edx
		jz	loc_688A4870

loc_688A47EA:				; CODE XREF: sub_688A46F4+17Ej
					; sub_688A46F4+187j ...
		mov	[esp+6Ch+var_6C], edx
		call	g_free

loc_688A47F2:				; CODE XREF: sub_688A46F4+17Aj
		mov	[esp+6Ch+var_68], edi
		mov	[esp+6Ch+var_6C], edi
		call	g_slist_delete_link
		mov	edi, eax
		test	eax, eax
		jz	loc_688A48A4

loc_688A4808:				; CODE XREF: sub_688A46F4+97j
		mov	ebx, [edi]
		mov	[esp+6Ch+var_6C], ebx
		call	purple_buddy_get_group
		mov	[esp+6Ch+var_6C], eax
		call	purple_group_get_name
		mov	[esp+6Ch+var_4C], eax
		mov	[esp+6Ch+var_6C], ebx
		call	purple_buddy_get_name
		mov	esi, eax
		mov	[esp+6Ch+var_68], eax
		mov	eax, [ebp+0D8h]
		mov	[esp+6Ch+var_6C], eax
		call	aim_ssi_itemlist_exists
		test	eax, eax
		jnz	loc_688A4790
		mov	[esp+6Ch+var_64], esi
		mov	[esp+6Ch+var_68], offset aSsiRemovingBud ; "ssi: removing buddy	%s from	local list\"...
		mov	[esp+6Ch+var_6C], offset aOscar_13 ; "oscar"
		call	purple_debug_info
		mov	[esp+6Ch+var_68], ebx
		mov	eax, [esp+6Ch+var_44]
		mov	[esp+6Ch+var_6C], eax
		call	g_slist_prepend
		mov	[esp+6Ch+var_44], eax
		jmp	short loc_688A47F2
; ---------------------------------------------------------------------------

loc_688A4870:				; CODE XREF: sub_688A46F4+F0j
		test	eax, eax
		jz	loc_688A47EA
		cmp	byte ptr [eax],	0
		jz	loc_688A47EA
		mov	[esp+6Ch+var_60], eax
		mov	[esp+6Ch+var_64], esi
		mov	eax, [esp+6Ch+var_4C]
		mov	[esp+6Ch+var_68], eax
		mov	[esp+6Ch+var_6C], ebp
		call	aim_ssi_aliasbuddy
		mov	edx, [esp+6Ch+var_50]
		jmp	loc_688A47EA
; ---------------------------------------------------------------------------
		align 4

loc_688A48A4:				; CODE XREF: sub_688A46F4+10Ej
		mov	ebx, [esp+6Ch+var_44]
		test	ebx, ebx
		jz	short loc_688A48C8

loc_688A48AC:				; CODE XREF: sub_688A46F4+1D2j
		mov	eax, [ebx]
		mov	[esp+6Ch+var_6C], eax
		call	purple_blist_remove_buddy
		mov	[esp+6Ch+var_68], ebx
		mov	[esp+6Ch+var_6C], ebx
		call	g_slist_delete_link
		mov	ebx, eax
		test	eax, eax
		jnz	short loc_688A48AC

loc_688A48C8:				; CODE XREF: sub_688A46F4+8Dj
					; sub_688A46F4+1B6j
		mov	esi, [ebp+44h]
		test	esi, esi
		jnz	short loc_688A4911
		mov	eax, [esp+6Ch+var_40]
		mov	ebx, [eax+30h]
		test	ebx, ebx
		jz	short loc_688A4911
		xchg	ax, ax

loc_688A48DC:				; CODE XREF: sub_688A46F4+21Bj
		mov	esi, [ebx+4]
		mov	[esp+6Ch+var_60], 2
		mov	eax, [ebx]
		mov	[esp+6Ch+var_64], eax
		mov	[esp+6Ch+var_68], 0
		mov	eax, [ebp+0D8h]
		mov	[esp+6Ch+var_6C], eax
		call	aim_ssi_itemlist_finditem
		test	eax, eax
		jz	loc_688A4DC4

loc_688A490B:				; CODE XREF: sub_688A46F4+704j
		mov	ebx, esi
		test	esi, esi
		jnz	short loc_688A48DC

loc_688A4911:				; CODE XREF: sub_688A46F4+1D9j
					; sub_688A46F4+1E4j
		mov	eax, [esp+6Ch+var_40]
		mov	edi, [eax+34h]
		test	edi, edi
		jz	short loc_688A4955
		movzx	esi, [esp+6Ch+var_3A]
		lea	esi, [esi+0]

loc_688A4924:				; CODE XREF: sub_688A46F4+25Fj
		mov	ebx, [edi+4]
		mov	[esp+6Ch+var_60], esi
		mov	eax, [edi]
		mov	[esp+6Ch+var_64], eax
		mov	[esp+6Ch+var_68], 0
		mov	eax, [ebp+0D8h]
		mov	[esp+6Ch+var_6C], eax
		call	aim_ssi_itemlist_finditem
		test	eax, eax
		jz	loc_688A4D60

loc_688A494F:				; CODE XREF: sub_688A46F4+6A0j
		mov	edi, ebx
		test	ebx, ebx
		jnz	short loc_688A4924

loc_688A4955:				; CODE XREF: sub_688A46F4+226j
		mov	eax, [ebp+0D8h]
		mov	[esp+6Ch+var_6C], eax
		call	aim_ssi_getpresence
		mov	ebx, eax
		cmp	eax, 0FFFFFFFFh
		jz	short loc_688A4999
		mov	[esp+6Ch+var_6C], offset aPurpleAwayIdle ; "/purple/away/idle_reporting"
		call	purple_prefs_get_string
		mov	edi, offset aNone ; "none"
		mov	ecx, 5
		mov	esi, eax
		repe cmpsb
		jz	loc_688A4DB0
		or	bh, 4
		mov	[esp+6Ch+var_68], ebx
		mov	[esp+6Ch+var_6C], ebp
		call	aim_ssi_setpresence

loc_688A4999:				; CODE XREF: sub_688A46F4+274j
					; sub_688A46F4+6CBj
		mov	edi, [ebp+0D8h]
		test	edi, edi
		jz	loc_688A4AE3
		mov	esi, edi
		mov	edi, [esp+6Ch+var_40]
		lea	esi, [esi+0]

loc_688A49B0:				; CODE XREF: sub_688A46F4+3E9j
					; sub_688A46F4+4F6j ...
		mov	eax, [esi]
		test	eax, eax
		jz	short loc_688A49D6
		mov	[esp+6Ch+var_64], 0
		mov	[esp+6Ch+var_68], 0FFFFFFFFh
		mov	[esp+6Ch+var_6C], eax
		call	g_utf8_validate
		test	eax, eax
		jz	loc_688A4D34

loc_688A49D6:				; CODE XREF: sub_688A46F4+2C0j
		mov	eax, [esi+8]
		cmp	ax, 0Eh		; switch 15 cases
		ja	loc_688A4AD8	; jumptable 688A49E6 default case
		movzx	ecx, ax
		jmp	ds:off_688B5068[ecx*4] ; switch	jump
; ---------------------------------------------------------------------------

loc_688A49ED:				; CODE XREF: sub_688A46F4+618j
		mov	[esp+6Ch+var_68], offset aOrphans_0 ; "Orphans"
		mov	[esp+6Ch+var_6C], offset aPidgin_6 ; "pidgin"
		call	libintl_dgettext
		mov	[esp+6Ch+var_6C], eax
		call	purple_find_group
		mov	[esp+6Ch+var_34], eax
		test	eax, eax
		jnz	short loc_688A4A41
		mov	[esp+6Ch+var_68], offset aOrphans_0 ; "Orphans"
		mov	[esp+6Ch+var_6C], offset aPidgin_6 ; "pidgin"
		call	libintl_dgettext

loc_688A4A25:				; CODE XREF: sub_688A46F4+63Aj
		mov	[esp+6Ch+var_6C], eax
		call	purple_group_new
		mov	[esp+6Ch+var_34], eax
		mov	[esp+6Ch+var_68], 0
		mov	[esp+6Ch+var_6C], eax
		call	purple_blist_add_group

loc_688A4A41:				; CODE XREF: sub_688A46F4+31Bj
					; sub_688A46F4+630j
		mov	eax, [esi]
		mov	[esp+6Ch+var_64], eax
		mov	[esp+6Ch+var_68], ebx
		mov	eax, [ebp+0D8h]
		mov	[esp+6Ch+var_6C], eax
		call	aim_ssi_getalias
		mov	[esp+6Ch+var_44], eax
		mov	[esp+6Ch+var_64], eax
		mov	[esp+6Ch+var_68], ebp
		mov	[esp+6Ch+var_6C], edi
		call	oscar_utf8_try_convert
		mov	[esp+6Ch+var_38], eax
		mov	eax, [esp+6Ch+var_34]
		mov	[esp+6Ch+var_64], eax
		mov	eax, [esi]
		mov	[esp+6Ch+var_68], eax
		mov	[esp+6Ch+var_6C], edi
		call	purple_find_buddy_in_group
		mov	ecx, eax
		mov	eax, [esp+6Ch+var_38]
		test	ecx, ecx
		jz	loc_688A4E94
		mov	[esp+6Ch+var_68], eax
		mov	[esp+6Ch+var_6C], ecx
		mov	[esp+6Ch+var_50], ecx
		call	purple_blist_alias_buddy
		mov	ecx, [esp+6Ch+var_50]
		mov	eax, [esi]
		cmp	byte ptr [eax],	2Bh
		jz	loc_688A4F00

loc_688A4AB4:				; CODE XREF: sub_688A46F4+803j
					; sub_688A46F4+85Cj
		mov	eax, [esp+6Ch+var_4C]
		mov	[esp+6Ch+var_6C], eax
		call	g_free
		mov	eax, [esp+6Ch+var_44]
		mov	[esp+6Ch+var_6C], eax
		call	g_free
		mov	eax, [esp+6Ch+var_38]
		mov	[esp+6Ch+var_6C], eax
		call	g_free

loc_688A4AD8:				; CODE XREF: sub_688A46F4+2E9j
					; sub_688A46F4+2F2j ...
		mov	esi, [esi+10h]	; jumptable 688A49E6 default case
		test	esi, esi
		jnz	loc_688A49B0

loc_688A4AE3:				; CODE XREF: sub_688A46F4+2ADj
					; sub_688A46F4+4FCj ...
		mov	ebx, [ebp+44h]
		test	ebx, ebx
		jz	loc_688A4D9C
		mov	eax, [esp+6Ch+var_40]
		call	sub_6889A2F8

loc_688A4AF7:				; CODE XREF: sub_688A46F4+6B4j
		mov	[esp+6Ch+var_68], offset aSsiActivatingS ; "ssi: activating server-stored buddy	lis"...
		mov	[esp+6Ch+var_6C], offset aOscar_13 ; "oscar"
		call	purple_debug_info
		mov	[esp+6Ch+var_6C], ebp
		call	aim_ssi_enable
		mov	eax, [esp+6Ch+var_40]
		mov	[esp+6Ch+var_6C], eax
		call	purple_buddy_icons_find_account_icon
		mov	ebx, eax
		mov	[esp+6Ch+var_68], eax
		mov	edx, [esp+6Ch+var_48]
		mov	[esp+6Ch+var_6C], edx
		call	oscar_set_icon
		mov	[esp+6Ch+var_6C], ebx
		call	purple_imgstore_unref
		mov	eax, [ebp+0C8h]
		test	eax, eax
		jz	short loc_688A4B6F
		mov	edx, [esp+6Ch+var_30]
		mov	[esp+6Ch+var_68], edx
		mov	[esp+6Ch+var_6C], ebp
		call	aim_srv_clientready
		mov	[esp+6Ch+var_6C], ebp
		call	aim_im_reqofflinemsgs
		mov	[esp+6Ch+var_68], 1
		mov	edx, [esp+6Ch+var_48]
		mov	[esp+6Ch+var_6C], edx
		call	purple_connection_set_state

loc_688A4B6F:				; CODE XREF: sub_688A46F4+44Dj
		mov	eax, 1
		mov	edx, [esp+6Ch+var_20]
		xor	edx, ds:__stack_chk_guard
		jnz	loc_688A4F5F
		add	esp, 5Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_688A4B8C:				; CODE XREF: sub_688A46F4+2F2j
					; DATA XREF: .rdata:off_688B5068o
		mov	eax, [ebp+44h]	; jumptable 688A49E6 case 4
		test	eax, eax
		jnz	loc_688A4AD8	; jumptable 688A49E6 default case
		mov	eax, [esi+0Ch]
		test	eax, eax
		jz	loc_688A4AD8	; jumptable 688A49E6 default case
		mov	eax, [ebp+0D8h]
		mov	[esp+6Ch+var_6C], eax
		call	aim_ssi_getpermdeny
		test	al, al
		jz	loc_688A4AD8	; jumptable 688A49E6 default case
		movzx	ebx, al
		mov	eax, [edi+38h]
		cmp	ebx, eax
		jz	loc_688A4AD8	; jumptable 688A49E6 default case
		mov	[esp+6Ch+var_60], ebx
		mov	[esp+6Ch+var_64], eax
		mov	[esp+6Ch+var_68], offset aSsiChangingPer ; "ssi: changing permdeny from	%d to %hhu\"...
		mov	[esp+6Ch+var_6C], offset aOscar_13 ; "oscar"
		call	purple_debug_info
		mov	[edi+38h], ebx
		mov	esi, [esi+10h]
		test	esi, esi
		jnz	loc_688A49B0
		jmp	loc_688A4AE3
; ---------------------------------------------------------------------------
		align 4

loc_688A4BF8:				; CODE XREF: sub_688A46F4+2F2j
					; DATA XREF: .rdata:off_688B5068o
		cmp	[esp+6Ch+var_3A], ax ; jumptable 688A49E6 cases	3,14
		jnz	loc_688A4AD8	; jumptable 688A49E6 default case
		mov	eax, [esi]
		test	eax, eax
		jz	loc_688A4AD8	; jumptable 688A49E6 default case
		mov	ebx, [edi+34h]
		test	ebx, ebx
		jnz	short loc_688A4C29
		jmp	loc_688A4E54
; ---------------------------------------------------------------------------
		align 4

loc_688A4C1C:				; CODE XREF: sub_688A46F4+545j
		mov	ebx, [ebx+4]
		mov	eax, [esi]
		test	ebx, ebx
		jz	loc_688A4E54

loc_688A4C29:				; CODE XREF: sub_688A46F4+51Ej
		mov	edx, [ebx]
		mov	[esp+6Ch+var_68], edx
		mov	[esp+6Ch+var_6C], eax
		call	oscar_util_name_compare
		test	eax, eax
		jnz	short loc_688A4C1C
		jmp	loc_688A4AD8	; jumptable 688A49E6 default case
; ---------------------------------------------------------------------------

loc_688A4C40:				; CODE XREF: sub_688A46F4+2F2j
					; DATA XREF: .rdata:off_688B5068o
		mov	edx, [ebp+44h]	; jumptable 688A49E6 case 2
		test	edx, edx
		jnz	loc_688A4AD8	; jumptable 688A49E6 default case
		mov	eax, [esi]
		test	eax, eax
		jz	loc_688A4AD8	; jumptable 688A49E6 default case
		mov	ebx, [edi+30h]
		test	ebx, ebx
		jnz	short loc_688A4C71
		jmp	loc_688A4E00
; ---------------------------------------------------------------------------
		align 4

loc_688A4C64:				; CODE XREF: sub_688A46F4+58Dj
		mov	ebx, [ebx+4]
		mov	eax, [esi]
		test	ebx, ebx
		jz	loc_688A4E00

loc_688A4C71:				; CODE XREF: sub_688A46F4+566j
		mov	edx, [ebx]
		mov	[esp+6Ch+var_68], edx
		mov	[esp+6Ch+var_6C], eax
		call	oscar_util_name_compare
		test	eax, eax
		jnz	short loc_688A4C64
		jmp	loc_688A4AD8	; jumptable 688A49E6 default case
; ---------------------------------------------------------------------------

loc_688A4C88:				; CODE XREF: sub_688A46F4+2F2j
					; DATA XREF: .rdata:off_688B5068o
		mov	eax, [esi]	; jumptable 688A49E6 case 1
		test	eax, eax
		jz	loc_688A4AD8	; jumptable 688A49E6 default case
		mov	[esp+6Ch+var_6C], eax
		call	purple_find_group
		test	eax, eax
		jnz	loc_688A4AD8	; jumptable 688A49E6 default case
		mov	eax, [esi]
		mov	[esp+6Ch+var_6C], eax
		call	purple_group_new
		mov	[esp+6Ch+var_68], 0
		mov	[esp+6Ch+var_6C], eax
		call	purple_blist_add_group
		jmp	loc_688A4AD8	; jumptable 688A49E6 default case
; ---------------------------------------------------------------------------
		align 4

loc_688A4CC4:				; CODE XREF: sub_688A46F4+2F2j
					; DATA XREF: .rdata:off_688B5068o
		mov	ecx, [esi]	; jumptable 688A49E6 case 0
		test	ecx, ecx
		jz	loc_688A4AD8	; jumptable 688A49E6 default case
		mov	[esp+6Ch+var_64], 0
		movzx	eax, word ptr [esi+4]
		mov	[esp+6Ch+var_68], eax
		mov	eax, [ebp+0D8h]
		mov	[esp+6Ch+var_6C], eax
		call	aim_ssi_itemlist_find
		test	eax, eax
		jz	loc_688A4F58
		mov	ebx, [eax]

loc_688A4CF6:				; CODE XREF: sub_688A46F4+866j
		mov	[esp+6Ch+var_64], ebx
		mov	[esp+6Ch+var_68], ebp
		mov	[esp+6Ch+var_6C], edi
		call	oscar_utf8_try_convert
		mov	[esp+6Ch+var_4C], eax
		test	eax, eax
		jz	loc_688A49ED
		mov	eax, [esp+6Ch+var_4C]
		mov	[esp+6Ch+var_6C], eax
		call	purple_find_group
		mov	[esp+6Ch+var_34], eax
		test	eax, eax
		jnz	loc_688A4A41
		mov	eax, [esp+6Ch+var_4C]
		jmp	loc_688A4A25
; ---------------------------------------------------------------------------
		align 4

loc_688A4D34:				; CODE XREF: sub_688A46F4+2DCj
		movzx	eax, word ptr [esi+8]
		mov	[esp+6Ch+var_64], eax
		mov	[esp+6Ch+var_68], offset aSsiServerListC ; "ssi: server	list contains item of type "...
		mov	[esp+6Ch+var_6C], offset aOscar_13 ; "oscar"
		call	purple_debug_warning
		mov	esi, [esi+10h]
		test	esi, esi
		jnz	loc_688A49B0
		jmp	loc_688A4AE3
; ---------------------------------------------------------------------------

loc_688A4D60:				; CODE XREF: sub_688A46F4+255j
		mov	eax, [edi]
		mov	[esp+6Ch+var_64], eax
		mov	[esp+6Ch+var_68], offset aSsiRemovingDen ; "ssi: removing deny %s from local list\n"
		mov	[esp+6Ch+var_6C], offset aOscar_13 ; "oscar"
		call	purple_debug_info
		mov	[esp+6Ch+var_64], 1
		mov	eax, [edi]
		mov	[esp+6Ch+var_68], eax
		mov	eax, [esp+6Ch+var_40]
		mov	[esp+6Ch+var_6C], eax
		call	purple_privacy_deny_remove
		jmp	loc_688A494F
; ---------------------------------------------------------------------------
		align 4

loc_688A4D9C:				; CODE XREF: sub_688A46F4+3F4j
		mov	edx, [esp+6Ch+var_48]
		mov	[esp+6Ch+var_6C], edx
		call	oscar_set_aim_permdeny
		jmp	loc_688A4AF7
; ---------------------------------------------------------------------------
		align 10h

loc_688A4DB0:				; CODE XREF: sub_688A46F4+290j
		and	bh, 0FBh
		mov	[esp+6Ch+var_68], ebx
		mov	[esp+6Ch+var_6C], ebp
		call	aim_ssi_setpresence
		jmp	loc_688A4999
; ---------------------------------------------------------------------------

loc_688A4DC4:				; CODE XREF: sub_688A46F4+211j
		mov	eax, [ebx]
		mov	[esp+6Ch+var_64], eax
		mov	[esp+6Ch+var_68], offset aSsiRemovingPer ; "ssi: removing permit %s from local list"...
		mov	[esp+6Ch+var_6C], offset aOscar_13 ; "oscar"
		call	purple_debug_info
		mov	[esp+6Ch+var_64], 1
		mov	eax, [ebx]
		mov	[esp+6Ch+var_68], eax
		mov	eax, [esp+6Ch+var_40]
		mov	[esp+6Ch+var_6C], eax
		call	purple_privacy_permit_remove
		jmp	loc_688A490B
; ---------------------------------------------------------------------------
		align 10h

loc_688A4E00:				; CODE XREF: sub_688A46F4+568j
					; sub_688A46F4+577j
		mov	[esp+6Ch+var_64], eax
		mov	[esp+6Ch+var_68], offset aSsiAddingPermi ; "ssi: adding	permit buddy %s	to local li"...
		mov	[esp+6Ch+var_6C], offset aOscar_13 ; "oscar"
		call	purple_debug_info
		mov	[esp+6Ch+var_64], 1
		mov	eax, [esi]
		mov	[esp+6Ch+var_68], eax
		mov	[esp+6Ch+var_6C], edi
		call	purple_privacy_permit_add
		mov	esi, [esi+10h]
		test	esi, esi
		jnz	loc_688A49B0
		jmp	loc_688A4AE3
; ---------------------------------------------------------------------------
		align 10h

loc_688A4E40:				; CODE XREF: sub_688A46F4+51j
		mov	[esp+6Ch+var_6C], eax
		call	purple_timeout_remove
		mov	dword ptr [ebp+48h], 0
		jmp	loc_688A474B
; ---------------------------------------------------------------------------

loc_688A4E54:				; CODE XREF: sub_688A46F4+520j
					; sub_688A46F4+52Fj
		mov	[esp+6Ch+var_64], eax
		mov	[esp+6Ch+var_68], offset aSsiAddingDenyB ; "ssi: adding	deny buddy %s to local list"...
		mov	[esp+6Ch+var_6C], offset aOscar_13 ; "oscar"
		call	purple_debug_info
		mov	[esp+6Ch+var_64], 1
		mov	eax, [esi]
		mov	[esp+6Ch+var_68], eax
		mov	[esp+6Ch+var_6C], edi
		call	purple_privacy_deny_add
		mov	esi, [esi+10h]
		test	esi, esi
		jnz	loc_688A49B0
		jmp	loc_688A4AE3
; ---------------------------------------------------------------------------
		align 4

loc_688A4E94:				; CODE XREF: sub_688A46F4+39Bj
		mov	[esp+6Ch+var_64], eax
		mov	eax, [esi]
		mov	[esp+6Ch+var_68], eax
		mov	[esp+6Ch+var_6C], edi
		call	purple_buddy_new
		mov	ecx, eax
		mov	[esp+6Ch+var_60], ebx
		mov	eax, [esi]
		mov	[esp+6Ch+var_64], eax
		mov	[esp+6Ch+var_68], offset aSsiAddingBud_0 ; "ssi: adding	buddy %s to group %s to	loc"...
		mov	[esp+6Ch+var_6C], offset aOscar_13 ; "oscar"
		mov	[esp+6Ch+var_50], ecx
		call	purple_debug_info
		mov	[esp+6Ch+var_60], 0
		mov	eax, [esp+6Ch+var_34]
		mov	[esp+6Ch+var_64], eax
		mov	[esp+6Ch+var_68], 0
		mov	ecx, [esp+6Ch+var_50]
		mov	[esp+6Ch+var_6C], ecx
		call	purple_blist_add_buddy
		mov	ecx, [esp+6Ch+var_50]
		mov	eax, [esi]
		cmp	byte ptr [eax],	2Bh
		jnz	loc_688A4AB4
		lea	esi, [esi+0]

loc_688A4F00:				; CODE XREF: sub_688A46F4+3BAj
		mov	[esp+6Ch+var_6C], ecx
		mov	[esp+6Ch+var_50], ecx
		call	purple_buddy_get_name
		mov	[esp+6Ch+var_60], 0
		mov	[esp+6Ch+var_64], offset aAvailable_0 ;	"available"
		mov	[esp+6Ch+var_68], eax
		mov	[esp+6Ch+var_6C], edi
		call	purple_prpl_got_user_status
		mov	ecx, [esp+6Ch+var_50]
		mov	[esp+6Ch+var_6C], ecx
		call	purple_buddy_get_name
		mov	[esp+6Ch+var_60], 0
		mov	[esp+6Ch+var_64], offset aMobile_0 ; "mobile"
		mov	[esp+6Ch+var_68], eax
		mov	[esp+6Ch+var_6C], edi
		call	purple_prpl_got_user_status
		jmp	loc_688A4AB4
; ---------------------------------------------------------------------------
		align 4

loc_688A4F58:				; CODE XREF: sub_688A46F4+5FAj
		xor	ebx, ebx
		jmp	loc_688A4CF6
; ---------------------------------------------------------------------------

loc_688A4F5F:				; CODE XREF: sub_688A46F4+48Aj
		call	__stack_chk_fail
sub_688A46F4	endp

; Exported entry 219. oscar_can_receive_file

; =============== S U B	R O U T	I N E =======================================


		public oscar_can_receive_file
oscar_can_receive_file proc near

var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_10		= dword	ptr -10h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	edi
		push	esi
		push	ebx
		sub	esp, 20h
		mov	ebx, [esp+2Ch+arg_0]
		mov	edi, [esp+2Ch+arg_4]
		mov	eax, ds:__stack_chk_guard
		mov	[esp+2Ch+var_10], eax
		xor	eax, eax
		mov	[esp+2Ch+var_2C], ebx
		call	purple_connection_get_protocol_data
		mov	esi, eax
		mov	[esp+2Ch+var_2C], ebx
		call	purple_connection_get_account
		test	esi, esi
		jz	short loc_688A4FCC
		mov	ebx, eax
		mov	[esp+2Ch+var_28], edi
		mov	[esp+2Ch+var_2C], esi
		call	aim_locate_finduserinfo
		test	eax, eax
		jz	short loc_688A4FAB
		test	byte ptr [eax+20h], 20h
		jz	short loc_688A4FCC

loc_688A4FAB:				; CODE XREF: oscar_can_receive_file+3Fj
		mov	[esp+2Ch+var_2C], ebx
		call	purple_account_get_username
		mov	[esp+2Ch+var_28], eax
		mov	[esp+2Ch+var_2C], edi
		call	oscar_util_name_compare
		test	eax, eax
		setnz	al
		movzx	eax, al
		jmp	short loc_688A4FCE
; ---------------------------------------------------------------------------
		align 4

loc_688A4FCC:				; CODE XREF: oscar_can_receive_file+2Dj
					; oscar_can_receive_file+45j
		xor	eax, eax

loc_688A4FCE:				; CODE XREF: oscar_can_receive_file+63j
		mov	edx, [esp+2Ch+var_10]
		xor	edx, ds:__stack_chk_guard
		jnz	short loc_688A4FE1
		add	esp, 20h
		pop	ebx
		pop	esi
		pop	edi
		retn
; ---------------------------------------------------------------------------

loc_688A4FE1:				; CODE XREF: oscar_can_receive_file+74j
		call	__stack_chk_fail
oscar_can_receive_file endp

; ---------------------------------------------------------------------------
		align 4
; Exported entry 253. oscar_new_xfer

; =============== S U B	R O U T	I N E =======================================


		public oscar_new_xfer
oscar_new_xfer	proc near		; CODE XREF: oscar_send_file+22p

var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_10		= dword	ptr -10h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	edi
		push	esi
		push	ebx
		sub	esp, 20h
		mov	ebx, [esp+2Ch+arg_0]
		mov	esi, [esp+2Ch+arg_4]
		mov	eax, ds:__stack_chk_guard
		mov	[esp+2Ch+var_10], eax
		xor	eax, eax
		mov	[esp+2Ch+var_2C], ebx
		call	purple_connection_get_protocol_data
		mov	edi, eax
		mov	[esp+2Ch+var_2C], ebx
		call	purple_connection_get_account
		mov	[esp+2Ch+var_24], esi
		mov	[esp+2Ch+var_28], 1
		mov	[esp+2Ch+var_2C], eax
		call	purple_xfer_new
		mov	ebx, eax
		test	eax, eax
		jz	short loc_688A50AB
		mov	[esp+2Ch+var_2C], eax
		call	purple_xfer_ref
		mov	[esp+2Ch+var_28], offset peer_oft_sendcb_init
		mov	[esp+2Ch+var_2C], ebx
		call	purple_xfer_set_init_fnc
		mov	[esp+2Ch+var_28], offset peer_oft_cb_generic_cancel
		mov	[esp+2Ch+var_2C], ebx
		call	purple_xfer_set_cancel_send_fnc
		mov	[esp+2Ch+var_28], offset peer_oft_cb_generic_cancel
		mov	[esp+2Ch+var_2C], ebx
		call	purple_xfer_set_request_denied_fnc
		mov	[esp+2Ch+var_28], offset peer_oft_sendcb_ack
		mov	[esp+2Ch+var_2C], ebx
		call	purple_xfer_set_ack_fnc
		mov	[esp+2Ch+var_20], esi
		mov	[esp+2Ch+var_28], 20h
		mov	[esp+2Ch+var_24], 0
		mov	[esp+2Ch+var_2C], edi
		call	peer_connection_new
		mov	esi, eax
		or	dword ptr [eax+28h], 3
		lea	eax, [eax+18h]
		mov	[esp+2Ch+var_2C], eax
		call	aim_icbm_makecookie
		mov	[esi+0A4h], ebx
		mov	[ebx+7Ch], esi

loc_688A50AB:				; CODE XREF: oscar_new_xfer+43j
		mov	eax, ebx
		mov	edx, [esp+2Ch+var_10]
		xor	edx, ds:__stack_chk_guard
		jnz	short loc_688A50C0
		add	esp, 20h
		pop	ebx
		pop	esi
		pop	edi
		retn
; ---------------------------------------------------------------------------

loc_688A50C0:				; CODE XREF: oscar_new_xfer+CFj
		call	__stack_chk_fail
oscar_new_xfer	endp

; ---------------------------------------------------------------------------
		align 4
; Exported entry 262. oscar_send_file

; =============== S U B	R O U T	I N E =======================================


		public oscar_send_file
oscar_send_file	proc near

var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_10		= dword	ptr -10h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	ebx
		sub	esp, 28h
		mov	ebx, [esp+2Ch+arg_8]
		mov	eax, ds:__stack_chk_guard
		mov	[esp+2Ch+var_10], eax
		xor	eax, eax
		mov	eax, [esp+2Ch+arg_4]
		mov	[esp+2Ch+var_28], eax
		mov	eax, [esp+2Ch+arg_0]
		mov	[esp+2Ch+var_2C], eax
		call	oscar_new_xfer
		test	ebx, ebx
		jz	short loc_688A5110
		mov	edx, [esp+2Ch+var_10]
		xor	edx, ds:__stack_chk_guard
		jnz	short loc_688A5129
		mov	[esp+2Ch+arg_4], ebx
		mov	[esp+2Ch+arg_0], eax
		add	esp, 28h
		pop	ebx
		jmp	purple_xfer_request_accepted
; ---------------------------------------------------------------------------

loc_688A5110:				; CODE XREF: oscar_send_file+29j
		mov	edx, [esp+2Ch+var_10]
		xor	edx, ds:__stack_chk_guard
		jnz	short loc_688A5129
		mov	[esp+2Ch+arg_0], eax
		add	esp, 28h
		pop	ebx
		jmp	purple_xfer_request
; ---------------------------------------------------------------------------

loc_688A5129:				; CODE XREF: oscar_send_file+35j
					; oscar_send_file+52j
		call	__stack_chk_fail
oscar_send_file	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 210. oscar_actions

; =============== S U B	R O U T	I N E =======================================


		public oscar_actions
oscar_actions	proc near

var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_10		= dword	ptr -10h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	esi
		push	ebx
		sub	esp, 24h
		mov	eax, ds:__stack_chk_guard
		mov	[esp+2Ch+var_10], eax
		xor	eax, eax
		mov	eax, [esp+2Ch+arg_4]
		mov	[esp+2Ch+var_2C], eax
		call	purple_connection_get_protocol_data
		mov	ebx, eax
		mov	[esp+2Ch+var_28], offset aSetUserInfo___ ; "Set	User Info..."
		mov	[esp+2Ch+var_2C], offset aPidgin_6 ; "pidgin"
		call	libintl_dgettext
		mov	[esp+2Ch+var_28], offset sub_68899B9C
		mov	[esp+2Ch+var_2C], eax
		call	purple_plugin_action_new
		mov	[esp+2Ch+var_28], eax
		mov	[esp+2Ch+var_2C], 0
		call	g_list_prepend
		mov	esi, eax
		mov	eax, [ebx+44h]
		test	eax, eax
		jnz	loc_688A5424

loc_688A518F:				; CODE XREF: oscar_actions+326j
		mov	[esp+2Ch+var_28], offset aChangePassword ; "Change Password..."
		mov	[esp+2Ch+var_2C], offset aPidgin_6 ; "pidgin"
		call	libintl_dgettext
		mov	[esp+2Ch+var_28], offset sub_68899B60
		mov	[esp+2Ch+var_2C], eax
		call	purple_plugin_action_new
		mov	[esp+2Ch+var_28], eax
		mov	[esp+2Ch+var_2C], esi
		call	g_list_prepend
		mov	esi, eax
		mov	eax, [ebx+0BCh]
		test	eax, eax
		jz	short loc_688A5204
		mov	eax, [eax+20h]
		test	eax, eax
		jz	short loc_688A5204
		mov	[esp+2Ch+var_28], offset aChangePasswo_0 ; "Change Password (web)"
		mov	[esp+2Ch+var_2C], offset aPidgin_6 ; "pidgin"
		call	libintl_dgettext
		mov	[esp+2Ch+var_28], offset loc_68899AE4
		mov	[esp+2Ch+var_2C], eax
		call	purple_plugin_action_new
		mov	[esp+2Ch+var_28], eax
		mov	[esp+2Ch+var_2C], esi
		call	g_list_prepend
		mov	esi, eax

loc_688A5204:				; CODE XREF: oscar_actions+99j
					; oscar_actions+A0j
		mov	eax, [ebx+44h]
		test	eax, eax
		jz	loc_688A53EC

loc_688A520F:				; CODE XREF: oscar_actions+2EEj
		mov	[esp+2Ch+var_28], 0
		mov	[esp+2Ch+var_2C], esi
		call	g_list_prepend
		mov	esi, eax
		mov	eax, [ebx+44h]
		test	eax, eax
		jnz	loc_688A5364
		mov	[esp+2Ch+var_28], offset aConfirmAccount ; "Confirm Account"
		mov	[esp+2Ch+var_2C], offset aPidgin_6 ; "pidgin"
		call	libintl_dgettext
		mov	[esp+2Ch+var_28], offset sub_68899568
		mov	[esp+2Ch+var_2C], eax
		call	purple_plugin_action_new
		mov	[esp+2Ch+var_28], eax
		mov	[esp+2Ch+var_2C], esi
		call	g_list_prepend
		mov	ebx, eax
		mov	[esp+2Ch+var_28], offset aDisplayCurrent ; "Display Currently Registered Email Addr"...
		mov	[esp+2Ch+var_2C], offset aPidgin_6 ; "pidgin"
		call	libintl_dgettext
		mov	[esp+2Ch+var_28], offset sub_688994EC
		mov	[esp+2Ch+var_2C], eax
		call	purple_plugin_action_new
		mov	[esp+2Ch+var_28], eax
		mov	[esp+2Ch+var_2C], ebx
		call	g_list_prepend
		mov	ebx, eax
		mov	[esp+2Ch+var_28], offset aChangeCurrentl ; "Change Currently Registered	Email Addre"...
		mov	[esp+2Ch+var_2C], offset aPidgin_6 ; "pidgin"
		call	libintl_dgettext
		mov	[esp+2Ch+var_28], offset sub_688991A8

loc_688A52AC:				; CODE XREF: oscar_actions+2B4j
		mov	[esp+2Ch+var_2C], eax
		call	purple_plugin_action_new
		mov	[esp+2Ch+var_28], eax
		mov	[esp+2Ch+var_2C], ebx
		call	g_list_prepend
		mov	[esp+2Ch+var_28], 0
		mov	[esp+2Ch+var_2C], eax
		call	g_list_prepend
		mov	ebx, eax
		mov	[esp+2Ch+var_28], offset aShowBuddiesAwa ; "Show Buddies Awaiting Authorization"
		mov	[esp+2Ch+var_2C], offset aPidgin_6 ; "pidgin"
		call	libintl_dgettext
		mov	[esp+2Ch+var_28], offset sub_688992D4
		mov	[esp+2Ch+var_2C], eax
		call	purple_plugin_action_new
		mov	[esp+2Ch+var_28], eax
		mov	[esp+2Ch+var_2C], ebx
		call	g_list_prepend
		mov	[esp+2Ch+var_28], 0
		mov	[esp+2Ch+var_2C], eax
		call	g_list_prepend
		mov	ebx, eax
		mov	[esp+2Ch+var_28], offset aSearchForBuddy ; "Search for Buddy by	Email Address..."
		mov	[esp+2Ch+var_2C], offset aPidgin_6 ; "pidgin"
		call	libintl_dgettext
		mov	[esp+2Ch+var_28], offset sub_6889908C
		mov	[esp+2Ch+var_2C], eax
		call	purple_plugin_action_new
		mov	[esp+2Ch+var_28], eax
		mov	[esp+2Ch+var_2C], ebx
		call	g_list_prepend
		mov	edx, [esp+2Ch+var_10]
		xor	edx, ds:__stack_chk_guard
		jnz	loc_688A545B
		mov	[esp+2Ch+arg_0], eax
		add	esp, 24h
		pop	ebx
		pop	esi
		jmp	g_list_reverse
; ---------------------------------------------------------------------------
		align 4

loc_688A5364:				; CODE XREF: oscar_actions+F6j
		mov	[esp+2Ch+var_28], offset aSetPrivacyOpti ; "Set	Privacy	Options..."
		mov	[esp+2Ch+var_2C], offset aPidgin_6 ; "pidgin"
		call	libintl_dgettext
		mov	[esp+2Ch+var_28], offset sub_688995DC
		mov	[esp+2Ch+var_2C], eax
		call	purple_plugin_action_new
		mov	[esp+2Ch+var_28], eax
		mov	[esp+2Ch+var_2C], esi
		call	g_list_prepend
		mov	ebx, eax
		mov	[esp+2Ch+var_28], offset aShowVisibleLis ; "Show Visible List"
		mov	[esp+2Ch+var_2C], offset aPidgin_6 ; "pidgin"
		call	libintl_dgettext
		mov	[esp+2Ch+var_28], offset oscar_show_visible_list
		mov	[esp+2Ch+var_2C], eax
		call	purple_plugin_action_new
		mov	[esp+2Ch+var_28], eax
		mov	[esp+2Ch+var_2C], ebx
		call	g_list_prepend
		mov	ebx, eax
		mov	[esp+2Ch+var_28], offset aShowInvisibleL ; "Show Invisible List"
		mov	[esp+2Ch+var_2C], offset aPidgin_6 ; "pidgin"
		call	libintl_dgettext
		mov	[esp+2Ch+var_28], offset oscar_show_invisible_list
		jmp	loc_688A52AC
; ---------------------------------------------------------------------------
		align 4

loc_688A53EC:				; CODE XREF: oscar_actions+D9j
		mov	[esp+2Ch+var_28], offset aConfigureImFor ; "Configure IM Forwarding (web)"
		mov	[esp+2Ch+var_2C], offset aPidgin_6 ; "pidgin"
		call	libintl_dgettext
		mov	[esp+2Ch+var_28], offset sub_68899A6C
		mov	[esp+2Ch+var_2C], eax
		call	purple_plugin_action_new
		mov	[esp+2Ch+var_28], eax
		mov	[esp+2Ch+var_2C], esi
		call	g_list_prepend
		mov	esi, eax
		jmp	loc_688A520F
; ---------------------------------------------------------------------------
		align 4

loc_688A5424:				; CODE XREF: oscar_actions+59j
		mov	[esp+2Ch+var_28], offset aSetUserInfoWeb ; "Set	User Info (web)..."
		mov	[esp+2Ch+var_2C], offset aPidgin_6 ; "pidgin"
		call	libintl_dgettext
		mov	[esp+2Ch+var_28], offset sub_68899AA8
		mov	[esp+2Ch+var_2C], eax
		call	purple_plugin_action_new
		mov	[esp+2Ch+var_28], eax
		mov	[esp+2Ch+var_2C], esi
		call	g_list_prepend
		mov	esi, eax
		jmp	loc_688A518F
; ---------------------------------------------------------------------------

loc_688A545B:				; CODE XREF: oscar_actions+21Ej
		call	__stack_chk_fail
oscar_actions	endp

; Exported entry 220. oscar_change_passwd

; =============== S U B	R O U T	I N E =======================================


		public oscar_change_passwd
oscar_change_passwd proc near

var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_10		= dword	ptr -10h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	edi
		push	esi
		push	ebx
		sub	esp, 20h
		mov	edi, [esp+2Ch+arg_4]
		mov	esi, [esp+2Ch+arg_8]
		mov	eax, ds:__stack_chk_guard
		mov	[esp+2Ch+var_10], eax
		xor	eax, eax
		mov	eax, [esp+2Ch+arg_0]
		mov	[esp+2Ch+var_2C], eax
		call	purple_connection_get_protocol_data
		mov	ebx, eax
		mov	eax, [eax+44h]
		test	eax, eax
		jnz	short loc_688A54CC
		mov	[esp+2Ch+var_28], 7
		mov	[esp+2Ch+var_2C], ebx
		call	flap_connection_getbytype
		test	eax, eax
		jz	short loc_688A54EC
		mov	[esp+2Ch+var_20], edi
		mov	[esp+2Ch+var_24], esi
		mov	[esp+2Ch+var_28], eax
		mov	[esp+2Ch+var_2C], ebx
		call	aim_admin_changepasswd
		mov	eax, [esp+2Ch+var_10]
		xor	eax, ds:__stack_chk_guard
		jnz	short loc_688A552C
		add	esp, 20h
		pop	ebx
		pop	esi
		pop	edi
		retn
; ---------------------------------------------------------------------------
		align 4

loc_688A54CC:				; CODE XREF: oscar_change_passwd+2Cj
		mov	eax, [esp+2Ch+var_10]
		xor	eax, ds:__stack_chk_guard
		jnz	short loc_688A552C
		mov	[esp+2Ch+arg_4], esi
		mov	[esp+2Ch+arg_0], ebx
		add	esp, 20h
		pop	ebx
		pop	esi
		pop	edi
		jmp	aim_icq_changepasswd
; ---------------------------------------------------------------------------
		align 4

loc_688A54EC:				; CODE XREF: oscar_change_passwd+40j
		mov	dword ptr [ebx+28h], 1
		mov	[esp+2Ch+var_2C], edi
		call	g_strdup
		mov	[ebx+2Ch], eax
		mov	[esp+2Ch+var_2C], esi
		call	g_strdup
		mov	[ebx+30h], eax
		mov	eax, [esp+2Ch+var_10]
		xor	eax, ds:__stack_chk_guard
		jnz	short loc_688A552C
		mov	[esp+2Ch+arg_4], 7
		mov	[esp+2Ch+arg_0], ebx
		add	esp, 20h
		pop	ebx
		pop	esi
		pop	edi
		jmp	aim_srv_requestnew
; ---------------------------------------------------------------------------

loc_688A552C:				; CODE XREF: oscar_change_passwd+60j
					; oscar_change_passwd+76j ...
		call	__stack_chk_fail
oscar_change_passwd endp

; ---------------------------------------------------------------------------
		align 4
; Exported entry 228. oscar_convo_closed

; =============== S U B	R O U T	I N E =======================================


		public oscar_convo_closed
oscar_convo_closed proc	near

var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_20		= dword	ptr -20h
var_10		= dword	ptr -10h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	ebx
		sub	esp, 38h
		mov	ebx, [esp+3Ch+arg_4]
		mov	eax, ds:__stack_chk_guard
		mov	[esp+3Ch+var_10], eax
		xor	eax, eax
		mov	eax, [esp+3Ch+arg_0]
		mov	[esp+3Ch+var_3C], eax
		call	purple_connection_get_protocol_data
		mov	[esp+3Ch+var_34], 4
		mov	[esp+3Ch+var_30], 0
		mov	[esp+3Ch+var_38], ebx
		mov	[esp+3Ch+var_3C], eax
		call	peer_connection_find_by_type
		test	eax, eax
		jz	short loc_688A5592
		mov	edx, [eax+24h]
		test	edx, edx
		jz	short loc_688A55A4

loc_688A557A:				; CODE XREF: oscar_convo_closed+80j
		mov	[esp+3Ch+var_34], 0
		mov	[esp+3Ch+var_38], 1
		mov	[esp+3Ch+var_3C], eax
		call	peer_connection_destroy

loc_688A5592:				; CODE XREF: oscar_convo_closed+3Dj
		mov	eax, [esp+3Ch+var_10]
		xor	eax, ds:__stack_chk_guard
		jnz	short loc_688A55B6
		add	esp, 38h
		pop	ebx
		retn
; ---------------------------------------------------------------------------
		align 4

loc_688A55A4:				; CODE XREF: oscar_convo_closed+44j
		mov	[esp+3Ch+var_3C], eax
		mov	[esp+3Ch+var_20], eax
		call	aim_im_sendch2_cancel
		mov	eax, [esp+3Ch+var_20]
		jmp	short loc_688A557A
; ---------------------------------------------------------------------------

loc_688A55B6:				; CODE XREF: oscar_convo_closed+68j
		call	__stack_chk_fail
oscar_convo_closed endp

; ---------------------------------------------------------------------------
		align 4
; Exported entry 254. oscar_normalize

; =============== S U B	R O U T	I N E =======================================


		public oscar_normalize
oscar_normalize	proc near

var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_10		= dword	ptr -10h
arg_4		= dword	ptr  8

		push	edi
		push	esi
		push	ebx
		sub	esp, 20h
		mov	ecx, [esp+2Ch+arg_4]
		mov	eax, ds:__stack_chk_guard
		mov	[esp+2Ch+var_10], eax
		xor	eax, eax
		test	ecx, ecx
		jz	loc_688A56A8
		mov	al, [ecx]
		test	al, al
		jz	loc_688A56C8
		inc	ecx
		xor	edx, edx
		xchg	ax, ax

loc_688A55E8:				; CODE XREF: oscar_normalize+45j
		cmp	al, 20h
		jz	short loc_688A55FB
		mov	ds:byte_688C1040[edx], al
		inc	edx
		cmp	edx, 7FEh
		jg	short loc_688A5603

loc_688A55FB:				; CODE XREF: oscar_normalize+2Ej
		inc	ecx
		mov	al, [ecx-1]
		test	al, al
		jnz	short loc_688A55E8

loc_688A5603:				; CODE XREF: oscar_normalize+3Dj
					; oscar_normalize+10Ej
		mov	ds:byte_688C1040[edx], 0
		mov	[esp+2Ch+var_28], 0FFFFFFFFh
		mov	[esp+2Ch+var_2C], offset byte_688C1040
		call	g_utf8_strdown
		mov	esi, eax
		mov	[esp+2Ch+var_24], 0
		mov	[esp+2Ch+var_28], 0FFFFFFFFh
		mov	[esp+2Ch+var_2C], eax
		call	g_utf8_normalize
		mov	ebx, eax
		xor	eax, eax
		mov	ecx, 0FFFFFFFFh
		mov	edi, ebx
		repne scasb
		not	ecx
		dec	ecx
		cmp	ecx, 7FFh
		ja	short loc_688A5690

loc_688A5650:				; CODE XREF: oscar_normalize+E8j
		mov	[esp+2Ch+var_24], 800h
		mov	[esp+2Ch+var_28], ebx
		mov	[esp+2Ch+var_2C], offset byte_688C1040
		call	g_strlcpy
		mov	[esp+2Ch+var_2C], ebx
		call	g_free
		mov	[esp+2Ch+var_2C], esi
		call	g_free
		mov	eax, offset byte_688C1040

loc_688A567D:				; CODE XREF: oscar_normalize+10Aj
		mov	edx, [esp+2Ch+var_10]
		xor	edx, ds:__stack_chk_guard
		jnz	short loc_688A56CF
		add	esp, 20h
		pop	ebx
		pop	esi
		pop	edi
		retn
; ---------------------------------------------------------------------------

loc_688A5690:				; CODE XREF: oscar_normalize+92j
		mov	[esp+2Ch+var_28], offset aNormalizedStri ; "normalized string exceeds buffer length"...
		mov	[esp+2Ch+var_2C], offset aOscar_13 ; "oscar"
		call	purple_debug_error
		jmp	short loc_688A5650
; ---------------------------------------------------------------------------
		align 4

loc_688A56A8:				; CODE XREF: oscar_normalize+17j
		mov	[esp+2Ch+var_24], offset aStrNull ; "str != NULL"
		mov	[esp+2Ch+var_28], offset aOscar_normaliz ; "oscar_normalize"
		mov	[esp+2Ch+var_2C], 0
		call	g_return_if_fail_warning
		xor	eax, eax
		jmp	short loc_688A567D
; ---------------------------------------------------------------------------

loc_688A56C8:				; CODE XREF: oscar_normalize+21j
		xor	edx, edx
		jmp	loc_688A5603
; ---------------------------------------------------------------------------

loc_688A56CF:				; CODE XREF: oscar_normalize+CBj
		call	__stack_chk_fail
oscar_normalize	endp

; Exported entry 255. oscar_offline_message

; =============== S U B	R O U T	I N E =======================================


		public oscar_offline_message
oscar_offline_message proc near

var_10		= dword	ptr -10h

		sub	esp, 1Ch
		mov	eax, ds:__stack_chk_guard
		mov	[esp+1Ch+var_10], eax
		xor	eax, eax
		mov	al, 1
		mov	edx, [esp+1Ch+var_10]
		xor	edx, ds:__stack_chk_guard
		jnz	short loc_688A56F4
		add	esp, 1Ch
		retn
; ---------------------------------------------------------------------------

loc_688A56F4:				; CODE XREF: oscar_offline_message+1Aj
		call	__stack_chk_fail
oscar_offline_message endp

; ---------------------------------------------------------------------------
		align 4
; Exported entry 245. oscar_init

; =============== S U B	R O U T	I N E =======================================


		public oscar_init
oscar_init	proc near

var_5C		= dword	ptr -5Ch
var_58		= dword	ptr -58h
var_54		= dword	ptr -54h
var_50		= dword	ptr -50h
var_4C		= dword	ptr -4Ch
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_20		= dword	ptr -20h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 4Ch
		mov	edx, [esp+5Ch+arg_0]
		mov	[esp+5Ch+var_30], edx
		mov	eax, ds:__stack_chk_guard
		mov	[esp+5Ch+var_20], eax
		xor	eax, eax
		mov	eax, [edx+10h]
		mov	edi, [eax+4Ch]
		cmp	[esp+5Ch+arg_4], 1
		sbb	eax, eax
		and	eax, 0FFFFFFFEh
		mov	ebx, ds:off_688B53F8[eax*4]
		mov	[esp+5Ch+var_58], offset aServer_0 ; "Server"
		mov	[esp+5Ch+var_5C], offset aPidgin_6 ; "pidgin"
		call	libintl_dgettext
		mov	[esp+5Ch+var_54], ebx
		mov	[esp+5Ch+var_58], offset aServer ; "server"
		mov	[esp+5Ch+var_5C], eax
		call	purple_account_option_string_new
		mov	[esp+5Ch+var_58], eax
		mov	eax, [edi+8]
		mov	[esp+5Ch+var_5C], eax
		call	g_list_append
		mov	[edi+8], eax
		mov	[esp+5Ch+var_58], offset aPort_1 ; "Port"
		mov	[esp+5Ch+var_5C], offset aPidgin_6 ; "pidgin"
		call	libintl_dgettext
		mov	[esp+5Ch+var_54], 1446h
		mov	[esp+5Ch+var_58], offset aPort_0 ; "port"
		mov	[esp+5Ch+var_5C], eax
		call	purple_account_option_int_new
		mov	[esp+5Ch+var_58], eax
		mov	eax, [edi+8]
		mov	[esp+5Ch+var_5C], eax
		call	g_list_append
		mov	[edi+8], eax
		mov	edx, offset aUseEncryptionI ; "Use encryption if available"
		xor	ebx, ebx
		xor	ebp, ebp

loc_688A57AE:				; CODE XREF: oscar_init+10Cj
		mov	[esp+5Ch+var_5C], 8
		mov	[esp+5Ch+var_34], edx
		call	g_malloc0
		mov	esi, eax
		mov	edx, [esp+5Ch+var_34]
		mov	[esp+5Ch+var_58], edx
		mov	[esp+5Ch+var_5C], offset aPidgin_6 ; "pidgin"
		call	libintl_dgettext
		mov	[esp+5Ch+var_5C], eax
		call	g_strdup
		mov	[esi], eax
		mov	eax, ds:off_688B5520[ebx*4]
		mov	[esp+5Ch+var_5C], eax
		call	g_strdup
		mov	[esi+4], eax
		mov	[esp+5Ch+var_58], esi
		mov	[esp+5Ch+var_5C], ebp
		call	g_list_append
		mov	ebp, eax
		inc	ebx
		mov	edx, ds:off_688B5510[ebx*4]
		test	edx, edx
		jnz	short loc_688A57AE
		mov	[esp+5Ch+var_58], offset aConnectionSecu ; "Connection security"
		mov	[esp+5Ch+var_5C], offset aPidgin_6 ; "pidgin"
		call	libintl_dgettext
		mov	[esp+5Ch+var_54], ebp
		mov	[esp+5Ch+var_58], offset aEncryption_0 ; "encryption"
		mov	[esp+5Ch+var_5C], eax
		call	purple_account_option_list_new
		mov	[esp+5Ch+var_58], eax
		mov	eax, [edi+8]
		mov	[esp+5Ch+var_5C], eax
		call	g_list_append
		mov	[edi+8], eax
		mov	[esp+5Ch+var_58], offset aUseClientlogin ; "Use	clientLogin"
		mov	[esp+5Ch+var_5C], offset aPidgin_6 ; "pidgin"
		call	libintl_dgettext
		mov	[esp+5Ch+var_54], 1
		mov	[esp+5Ch+var_58], offset aUse_clientlogi ; "use_clientlogin"
		mov	[esp+5Ch+var_5C], eax
		call	purple_account_option_bool_new
		mov	[esp+5Ch+var_58], eax
		mov	eax, [edi+8]
		mov	[esp+5Ch+var_5C], eax
		call	g_list_append
		mov	[edi+8], eax
		mov	[esp+5Ch+var_58], offset aAlwaysUseAimIc ; "Always use AIM/ICQ proxy server for\nfi"...
		mov	[esp+5Ch+var_5C], offset aPidgin_6 ; "pidgin"
		call	libintl_dgettext
		mov	[esp+5Ch+var_54], 0
		mov	[esp+5Ch+var_58], offset aAlways_use_rv_ ; "always_use_rv_proxy"
		mov	[esp+5Ch+var_5C], eax
		call	purple_account_option_bool_new
		mov	[esp+5Ch+var_58], eax
		mov	eax, [edi+8]
		mov	[esp+5Ch+var_5C], eax
		call	g_list_append
		mov	[edi+8], eax
		mov	edx, [esp+5Ch+var_30]
		mov	[esp+5Ch+var_5C], edx
		call	purple_plugin_get_id
		mov	[esp+5Ch+var_58], offset aPrplAim ; "prpl-aim"
		mov	[esp+5Ch+var_5C], eax
		call	g_str_equal
		test	eax, eax
		jnz	loc_688A5974

loc_688A58E4:				; CODE XREF: oscar_init+2B6j
		mov	ecx, ds:dword_688C1840
		test	ecx, ecx
		jnz	short loc_688A595D
		mov	ds:dword_688C1840, 1
		mov	[esp+5Ch+var_5C], offset aPluginsPrplO_0 ; "/plugins/prpl/oscar"
		call	purple_prefs_add_none
		mov	[esp+5Ch+var_58], 0
		mov	[esp+5Ch+var_5C], offset aPluginsPrplOsc ; "/plugins/prpl/oscar/recent_buddies"
		call	purple_prefs_add_bool
		mov	[esp+5Ch+var_5C], offset aPluginsPrplO_1 ; "/plugins/prpl/oscar/show_idle"
		call	purple_prefs_remove
		mov	[esp+5Ch+var_5C], offset aPluginsPrplO_2 ; "/plugins/prpl/oscar/always_use_rv_proxy"
		call	purple_prefs_remove
		call	purple_get_core
		mov	[esp+5Ch+var_4C], 0
		mov	[esp+5Ch+var_50], offset sub_68898C8C
		mov	[esp+5Ch+var_54], offset dword_688C1840
		mov	[esp+5Ch+var_58], offset aUriHandler ; "uri-handler"
		mov	[esp+5Ch+var_5C], eax
		call	purple_signal_connect

loc_688A595D:				; CODE XREF: oscar_init+1F0j
		mov	eax, [esp+5Ch+var_20]
		xor	eax, ds:__stack_chk_guard
		jnz	short loc_688A59B7
		add	esp, 4Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 4

loc_688A5974:				; CODE XREF: oscar_init+1E2j
		mov	[esp+5Ch+var_58], offset aAllowMultipleS ; "Allow multiple simultaneous	logins"
		mov	[esp+5Ch+var_5C], offset aPidgin_6 ; "pidgin"
		call	libintl_dgettext
		mov	[esp+5Ch+var_54], 1
		mov	[esp+5Ch+var_58], offset aAllow_multiple ; "allow_multiple_logins"
		mov	[esp+5Ch+var_5C], eax
		call	purple_account_option_bool_new
		mov	[esp+5Ch+var_58], eax
		mov	eax, [edi+8]
		mov	[esp+5Ch+var_5C], eax
		call	g_list_append
		mov	[edi+8], eax
		jmp	loc_688A58E4
; ---------------------------------------------------------------------------

loc_688A59B7:				; CODE XREF: oscar_init+26Bj
		call	__stack_chk_fail
oscar_init	endp

; Exported entry 231. oscar_data_new

; =============== S U B	R O U T	I N E =======================================


		public oscar_data_new
oscar_data_new	proc near		; CODE XREF: oscar_login+36p

var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_10		= dword	ptr -10h

		push	edi
		push	esi
		push	ebx
		sub	esp, 30h
		mov	eax, ds:__stack_chk_guard
		mov	[esp+3Ch+var_10], eax
		xor	eax, eax
		mov	[esp+3Ch+var_3C], 0FCh
		call	g_malloc0
		mov	esi, eax
		mov	[esp+3Ch+var_3C], eax
		call	aim_initsnachash
		mov	dword ptr [esi+0B0h], 1
		mov	[esp+3Ch+var_30], offset g_free
		mov	[esp+3Ch+var_34], offset g_free
		mov	[esp+3Ch+var_38], offset g_str_equal
		mov	[esp+3Ch+var_3C], offset loc_688ABE00
		call	g_hash_table_new_full
		mov	[esi+38h], eax
		mov	[esp+3Ch+var_30], offset g_free
		mov	[esp+3Ch+var_34], 0
		mov	[esp+3Ch+var_38], offset loc_688ABD08
		mov	[esp+3Ch+var_3C], offset loc_688ABD10
		call	g_hash_table_new_full
		mov	[esi+0ECh], eax
		mov	[esp+3Ch+var_38], offset misc_modfirst
		mov	[esp+3Ch+var_3C], esi
		call	aim__registermodule
		mov	[esp+3Ch+var_38], offset service_modfirst
		mov	[esp+3Ch+var_3C], esi
		call	aim__registermodule
		mov	[esp+3Ch+var_38], offset locate_modfirst
		mov	[esp+3Ch+var_3C], esi
		call	aim__registermodule
		mov	[esp+3Ch+var_38], offset buddylist_modfirst
		mov	[esp+3Ch+var_3C], esi
		call	aim__registermodule
		mov	[esp+3Ch+var_38], offset msg_modfirst
		mov	[esp+3Ch+var_3C], esi
		call	aim__registermodule
		mov	[esp+3Ch+var_38], offset admin_modfirst
		mov	[esp+3Ch+var_3C], esi
		call	aim__registermodule
		mov	[esp+3Ch+var_38], offset popups_modfirst
		mov	[esp+3Ch+var_3C], esi
		call	aim__registermodule
		mov	[esp+3Ch+var_38], offset bos_modfirst
		mov	[esp+3Ch+var_3C], esi
		call	aim__registermodule
		mov	[esp+3Ch+var_38], offset search_modfirst
		mov	[esp+3Ch+var_3C], esi
		call	aim__registermodule
		mov	[esp+3Ch+var_38], offset stats_modfirst
		mov	[esp+3Ch+var_3C], esi
		call	aim__registermodule
		mov	[esp+3Ch+var_38], offset chatnav_modfirst
		mov	[esp+3Ch+var_3C], esi
		call	aim__registermodule
		mov	[esp+3Ch+var_38], offset chat_modfirst
		mov	[esp+3Ch+var_3C], esi
		call	aim__registermodule
		mov	[esp+3Ch+var_38], offset bart_modfirst
		mov	[esp+3Ch+var_3C], esi
		call	aim__registermodule
		mov	[esp+3Ch+var_38], offset ssi_modfirst
		mov	[esp+3Ch+var_3C], esi
		call	aim__registermodule
		mov	[esp+3Ch+var_38], offset icq_modfirst
		mov	[esp+3Ch+var_3C], esi
		call	aim__registermodule
		mov	[esp+3Ch+var_38], offset auth_modfirst
		mov	[esp+3Ch+var_3C], esi
		call	aim__registermodule
		mov	[esp+3Ch+var_38], offset email_modfirst
		mov	[esp+3Ch+var_3C], esi
		call	aim__registermodule
		mov	[esp+3Ch+var_3C], offset aRegisteredModu ; "Registered modules:	"
		call	g_string_new
		mov	edi, eax
		mov	ebx, [esi+6Ch]
		test	ebx, ebx
		jz	short loc_688A5BA1
		nop

loc_688A5B64:				; CODE XREF: oscar_data_new+1E3j
		movzx	eax, word ptr [ebx+6]
		mov	[esp+3Ch+var_24], eax
		movzx	eax, word ptr [ebx+4]
		mov	[esp+3Ch+var_28], eax
		movzx	eax, word ptr [ebx+2]
		mov	[esp+3Ch+var_2C], eax
		movzx	eax, word ptr [ebx]
		mov	[esp+3Ch+var_30], eax
		lea	edx, [ebx+0Ah]
		mov	[esp+3Ch+var_34], edx
		mov	[esp+3Ch+var_38], offset aSFamily0x04xVe ; "%s (family=0x%04x, version=0x%04x, tool"...
		mov	[esp+3Ch+var_3C], edi
		call	g_string_append_printf
		mov	ebx, [ebx+28h]
		test	ebx, ebx
		jnz	short loc_688A5B64

loc_688A5BA1:				; CODE XREF: oscar_data_new+1A5j
		mov	eax, [edi]
		mov	[esp+3Ch+var_34], eax
		mov	[esp+3Ch+var_38], offset aS_0 ;	"%s\n"
		mov	[esp+3Ch+var_3C], offset aOscar_14 ; "oscar"
		call	purple_debug_misc
		mov	[esp+3Ch+var_38], 1
		mov	[esp+3Ch+var_3C], edi
		call	g_string_free
		mov	eax, esi
		mov	edx, [esp+3Ch+var_10]
		xor	edx, ds:__stack_chk_guard
		jnz	short loc_688A5BE0
		add	esp, 30h
		pop	ebx
		pop	esi
		pop	edi
		retn
; ---------------------------------------------------------------------------

loc_688A5BE0:				; CODE XREF: oscar_data_new+21Bj
		call	__stack_chk_fail
oscar_data_new	endp

; ---------------------------------------------------------------------------
		align 4
; Exported entry 230. oscar_data_destroy

; =============== S U B	R O U T	I N E =======================================


		public oscar_data_destroy
oscar_data_destroy proc	near		; CODE XREF: oscar_close+80p

var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_10		= dword	ptr -10h
arg_0		= dword	ptr  4

		push	ebx
		sub	esp, 28h
		mov	ebx, [esp+2Ch+arg_0]
		mov	eax, ds:__stack_chk_guard
		mov	[esp+2Ch+var_10], eax
		xor	eax, eax
		mov	[esp+2Ch+var_28], 0FFFFFFFFh
		mov	[esp+2Ch+var_2C], ebx
		call	aim_cleansnacs
		mov	eax, [ebx]
		test	eax, eax
		jz	short loc_688A5C19
		mov	[esp+2Ch+var_2C], eax
		call	purple_util_fetch_url_cancel

loc_688A5C19:				; CODE XREF: oscar_data_destroy+27j
		mov	eax, [ebx+3Ch]
		test	eax, eax
		jz	short loc_688A5C40

loc_688A5C20:				; CODE XREF: oscar_data_destroy+56j
		mov	eax, [eax]
		mov	[esp+2Ch+var_2C], eax
		call	g_free
		mov	eax, [ebx+3Ch]
		mov	[esp+2Ch+var_28], eax
		mov	[esp+2Ch+var_2C], eax
		call	g_slist_delete_link
		mov	[ebx+3Ch], eax
		test	eax, eax
		jnz	short loc_688A5C20

loc_688A5C40:				; CODE XREF: oscar_data_destroy+36j
		mov	eax, [ebx+1Ch]
		mov	[esp+2Ch+var_2C], eax
		call	g_free
		mov	eax, [ebx+30h]
		mov	[esp+2Ch+var_2C], eax
		call	g_free
		mov	eax, [ebx+2Ch]
		mov	[esp+2Ch+var_2C], eax
		call	g_free
		mov	eax, [ebx+48h]
		test	eax, eax
		jz	short loc_688A5C8A
		jmp	loc_688A5CFE
; ---------------------------------------------------------------------------
		align 10h

loc_688A5C70:				; CODE XREF: oscar_data_destroy+AAj
		mov	[esp+2Ch+var_24], 0
		mov	[esp+2Ch+var_28], 0
		mov	eax, [eax]
		mov	[esp+2Ch+var_2C], eax
		call	flap_connection_destroy

loc_688A5C8A:				; CODE XREF: oscar_data_destroy+7Ej
					; oscar_data_destroy+11Ej
		mov	eax, [ebx+0F0h]
		test	eax, eax
		jnz	short loc_688A5C70
		mov	eax, [ebx+0F8h]
		test	eax, eax
		jz	short loc_688A5CC4
		xchg	ax, ax

loc_688A5CA0:				; CODE XREF: oscar_data_destroy+DAj
		mov	[esp+2Ch+var_24], 0
		mov	[esp+2Ch+var_28], 1
		mov	eax, [eax]
		mov	[esp+2Ch+var_2C], eax
		call	peer_connection_destroy
		mov	eax, [ebx+0F8h]
		test	eax, eax
		jnz	short loc_688A5CA0

loc_688A5CC4:				; CODE XREF: oscar_data_destroy+B4j
		mov	[esp+2Ch+var_2C], ebx
		call	aim__shutdownmodules
		mov	eax, [ebx+38h]
		mov	[esp+2Ch+var_2C], eax
		call	g_hash_table_destroy
		mov	eax, [ebx+0ECh]
		mov	[esp+2Ch+var_2C], eax
		call	g_hash_table_destroy
		mov	eax, [esp+2Ch+var_10]
		xor	eax, ds:__stack_chk_guard
		jnz	short loc_688A5D08
		mov	[esp+2Ch+arg_0], ebx
		add	esp, 28h
		pop	ebx
		jmp	g_free
; ---------------------------------------------------------------------------

loc_688A5CFE:				; CODE XREF: oscar_data_destroy+80j
		mov	[esp+2Ch+var_2C], eax
		call	purple_timeout_remove
		jmp	short loc_688A5C8A
; ---------------------------------------------------------------------------

loc_688A5D08:				; CODE XREF: oscar_data_destroy+107j
		call	__stack_chk_fail
oscar_data_destroy endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 229. oscar_data_addhandler

; =============== S U B	R O U T	I N E =======================================


		public oscar_data_addhandler
oscar_data_addhandler proc near		; CODE XREF: oscar_login+6Fp
					; oscar_login+97p ...

var_4C		= dword	ptr -4Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_20		= dword	ptr -20h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 3Ch
		mov	ecx, [esp+4Ch+arg_0]
		mov	esi, [esp+4Ch+arg_4]
		mov	ebx, [esp+4Ch+arg_8]
		mov	edx, [esp+4Ch+arg_C]
		mov	[esp+4Ch+var_30], edx
		mov	edx, [esp+4Ch+arg_10]
		movzx	ebp, bx
		mov	eax, ds:__stack_chk_guard
		mov	[esp+4Ch+var_20], eax
		xor	eax, eax
		mov	[esp+4Ch+var_4C], 0Ch
		mov	[esp+4Ch+var_38], edx
		mov	[esp+4Ch+var_34], ecx
		call	g_malloc0
		mov	[eax], si
		mov	[eax+2], bx
		mov	edx, [esp+4Ch+var_38]
		mov	[eax+8], dx
		mov	edx, [esp+4Ch+var_30]
		mov	[eax+4], edx
		mov	edx, [esp+4Ch+var_20]
		xor	edx, ds:__stack_chk_guard
		mov	ecx, [esp+4Ch+var_34]
		jnz	short loc_688A5D9C
		mov	edi, esi
		mov	[esp+4Ch+arg_8], eax
		shl	edi, 10h
		add	edi, ebp
		mov	[esp+4Ch+arg_4], edi
		mov	eax, [ecx+0ECh]
		mov	[esp+4Ch+arg_0], eax
		add	esp, 3Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		jmp	g_hash_table_insert
; ---------------------------------------------------------------------------

loc_688A5D9C:				; CODE XREF: oscar_data_addhandler+65j
		call	__stack_chk_fail
oscar_data_addhandler endp

; ---------------------------------------------------------------------------
		align 4
; Exported entry  19. aim_callhandler

; =============== S U B	R O U T	I N E =======================================


		public aim_callhandler
aim_callhandler	proc near		; CODE XREF: sub_68883F44+166p
					; sub_68883F44+269p ...

var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_10		= dword	ptr -10h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= word ptr  0Ch

		sub	esp, 2Ch
		movzx	eax, [esp+2Ch+arg_8]
		mov	edx, ds:__stack_chk_guard
		mov	[esp+2Ch+var_10], edx
		xor	edx, edx
		mov	edx, [esp+2Ch+arg_4]
		shl	edx, 10h
		add	eax, edx
		mov	[esp+2Ch+var_28], eax
		mov	eax, [esp+2Ch+arg_0]
		mov	eax, [eax+0ECh]
		mov	[esp+2Ch+var_2C], eax
		call	g_hash_table_lookup
		test	eax, eax
		jz	short loc_688A5DEE
		mov	eax, [eax+4]

loc_688A5DDE:				; CODE XREF: aim_callhandler+4Cj
		mov	edx, [esp+2Ch+var_10]
		xor	edx, ds:__stack_chk_guard
		jnz	short loc_688A5DF2
		add	esp, 2Ch
		retn
; ---------------------------------------------------------------------------

loc_688A5DEE:				; CODE XREF: aim_callhandler+35j
		xor	eax, eax
		jmp	short loc_688A5DDE
; ---------------------------------------------------------------------------

loc_688A5DF2:				; CODE XREF: aim_callhandler+44j
		call	__stack_chk_fail
aim_callhandler	endp

; ---------------------------------------------------------------------------
		align 4

; =============== S U B	R O U T	I N E =======================================


sub_688A5DF8	proc near		; CODE XREF: sub_688A5DF8+1B2p
					; peer_connection_trynext+27p

var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_10		= dword	ptr -10h
arg_0		= dword	ptr  4

		push	ebx
		sub	esp, 28h
		mov	ebx, eax
		mov	eax, ds:__stack_chk_guard
		mov	[esp+2Ch+var_10], eax
		xor	eax, eax
		mov	edx, [ebx+8]
		mov	eax, [ebx+0Ch]
		mov	ecx, edx
		xor	ecx, 4
		or	ecx, eax
		jz	loc_688A5F68
		xor	edx, 20h
		or	edx, eax
		jz	loc_688A5F78

loc_688A5E27:				; CODE XREF: sub_688A5DF8+178j
					; sub_688A5DF8+188j
		mov	eax, [ebx+44h]
		test	eax, eax
		jz	short loc_688A5E3D
		mov	[esp+2Ch+var_2C], eax
		call	purple_proxy_connect_cancel
		mov	dword ptr [ebx+44h], 0

loc_688A5E3D:				; CODE XREF: sub_688A5DF8+34j
		mov	eax, [ebx+40h]
		test	eax, eax
		jz	short loc_688A5E53
		mov	[esp+2Ch+var_2C], eax
		call	purple_proxy_connect_cancel
		mov	dword ptr [ebx+40h], 0

loc_688A5E53:				; CODE XREF: sub_688A5DF8+4Aj
		mov	eax, [ebx+48h]
		test	eax, eax
		jz	short loc_688A5E69
		mov	[esp+2Ch+var_2C], eax
		call	purple_network_listen_cancel
		mov	dword ptr [ebx+48h], 0

loc_688A5E69:				; CODE XREF: sub_688A5DF8+60j
		mov	eax, [ebx+4Ch]
		test	eax, eax
		jnz	loc_688A5F14
		mov	eax, [ebx+84h]
		test	eax, eax
		jnz	loc_688A5F31

loc_688A5E82:				; CODE XREF: sub_688A5DF8+133j
		mov	eax, [ebx+88h]
		test	eax, eax
		jnz	loc_688A5F51

loc_688A5E90:				; CODE XREF: sub_688A5DF8+153j
					; sub_688A5DF8+16Bj
		mov	eax, [ebx+50h]
		test	eax, eax
		js	short loc_688A5EA6
		mov	[esp+2Ch+var_2C], eax
		call	wpurple_close
		mov	dword ptr [ebx+50h], 0FFFFFFFFh

loc_688A5EA6:				; CODE XREF: sub_688A5DF8+9Dj
		mov	eax, [ebx+54h]
		test	eax, eax
		js	short loc_688A5EBC
		mov	[esp+2Ch+var_2C], eax
		call	wpurple_close
		mov	dword ptr [ebx+54h], 0FFFFFFFFh

loc_688A5EBC:				; CODE XREF: sub_688A5DF8+B3j
		mov	eax, [ebx+74h]
		mov	[esp+2Ch+var_2C], eax
		call	g_free
		mov	dword ptr [ebx+74h], 0
		mov	dword ptr [ebx+78h], 0
		mov	dword ptr [ebx+7Ch], 0
		mov	eax, [ebx+80h]
		mov	[esp+2Ch+var_2C], eax
		call	purple_circ_buffer_destroy
		mov	[esp+2Ch+var_2C], 0
		call	purple_circ_buffer_new
		mov	[ebx+80h], eax
		and	dword ptr [ebx+28h], 0FFFFFFDFh
		mov	eax, [esp+2Ch+var_10]
		xor	eax, ds:__stack_chk_guard
		jnz	short loc_688A5F85
		add	esp, 28h
		pop	ebx
		retn
; ---------------------------------------------------------------------------
		align 4

loc_688A5F14:				; CODE XREF: sub_688A5DF8+76j
		mov	[esp+2Ch+var_2C], eax
		call	purple_timeout_remove
		mov	dword ptr [ebx+4Ch], 0
		mov	eax, [ebx+84h]
		test	eax, eax
		jz	loc_688A5E82

loc_688A5F31:				; CODE XREF: sub_688A5DF8+84j
		mov	[esp+2Ch+var_2C], eax
		call	purple_input_remove
		mov	dword ptr [ebx+84h], 0
		mov	eax, [ebx+88h]
		test	eax, eax
		jz	loc_688A5E90

loc_688A5F51:				; CODE XREF: sub_688A5DF8+92j
		mov	[esp+2Ch+var_2C], eax
		call	purple_input_remove
		mov	dword ptr [ebx+88h], 0
		jmp	loc_688A5E90
; ---------------------------------------------------------------------------

loc_688A5F68:				; CODE XREF: sub_688A5DF8+1Ej
		mov	[esp+2Ch+var_2C], ebx
		call	peer_odc_close
		jmp	loc_688A5E27
; ---------------------------------------------------------------------------
		align 4

loc_688A5F78:				; CODE XREF: sub_688A5DF8+29j
		mov	[esp+2Ch+var_2C], ebx
		call	peer_oft_close
		jmp	loc_688A5E27
; ---------------------------------------------------------------------------

loc_688A5F85:				; CODE XREF: sub_688A5DF8+112j
		call	__stack_chk_fail
; ---------------------------------------------------------------------------
		align 4

loc_688A5F8C:				; CODE XREF: peer_connection_destroy+5Bj
					; DATA XREF: peer_connection_schedule_destroy+55o
		push	esi
		push	ebx
		sub	esp, 24h
		mov	ebx, [esp+2Ch+arg_0]
		mov	eax, ds:__stack_chk_guard
		mov	[esp+2Ch+var_10], eax
		xor	eax, eax
		mov	[esp+2Ch+var_2C], ebx
		call	purple_request_close_with_handle
		mov	eax, ebx
		call	sub_688A5DF8
		mov	eax, [ebx+0A0h]
		test	eax, eax
		jz	short loc_688A5FC1
		mov	[esp+2Ch+var_2C], eax
		call	peer_oft_checksum_destroy

loc_688A5FC1:				; CODE XREF: sub_688A5DF8+1BFj
		mov	eax, [ebx+0A4h]
		test	eax, eax
		jz	short loc_688A5FFE
		mov	dword ptr [eax+7Ch], 0
		mov	[esp+2Ch+var_2C], eax
		call	purple_xfer_get_status
		sub	eax, 4
		cmp	eax, 2
		ja	loc_688A6090

loc_688A5FE6:				; CODE XREF: sub_688A5DF8+2B1j
					; sub_688A5DF8+2BDj
		mov	eax, [ebx+0A4h]
		mov	[esp+2Ch+var_2C], eax
		call	purple_xfer_unref
		mov	dword ptr [ebx+0A4h], 0

loc_688A5FFE:				; CODE XREF: sub_688A5DF8+1D1j
		mov	eax, [ebx+10h]
		mov	[esp+2Ch+var_2C], eax
		call	g_free
		mov	eax, [ebx+38h]
		mov	[esp+2Ch+var_2C], eax
		call	g_free
		mov	eax, [ebx+8Ch]
		mov	[esp+2Ch+var_2C], eax
		call	g_free
		mov	eax, [ebx+90h]
		mov	[esp+2Ch+var_2C], eax
		call	g_free
		mov	eax, [ebx+94h]
		mov	[esp+2Ch+var_2C], eax
		call	g_free
		mov	eax, [ebx+164h]
		mov	[esp+2Ch+var_2C], eax
		call	g_free
		mov	eax, [ebx+80h]
		mov	[esp+2Ch+var_2C], eax
		call	purple_circ_buffer_destroy
		mov	esi, [ebx]
		mov	[esp+2Ch+var_28], ebx
		mov	eax, [esi+0F8h]
		mov	[esp+2Ch+var_2C], eax
		call	g_slist_remove
		mov	[esi+0F8h], eax
		mov	[esp+2Ch+var_2C], ebx
		call	g_free
		xor	eax, eax
		mov	edx, [esp+2Ch+var_10]
		xor	edx, ds:__stack_chk_guard
		jnz	short loc_688A60BA
		add	esp, 24h
		pop	ebx
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_688A6090:				; CODE XREF: sub_688A5DF8+1E8j
		mov	eax, [ebx+34h]
		sub	eax, 2
		cmp	eax, 1
		mov	eax, [ebx+0A4h]
		mov	[esp+2Ch+var_2C], eax
		jbe	short loc_688A60B0
		call	purple_xfer_cancel_local
		jmp	loc_688A5FE6
; ---------------------------------------------------------------------------
		align 10h

loc_688A60B0:				; CODE XREF: sub_688A5DF8+2AAj
		call	purple_xfer_cancel_remote
		jmp	loc_688A5FE6
; ---------------------------------------------------------------------------

loc_688A60BA:				; CODE XREF: sub_688A5DF8+290j
		call	__stack_chk_fail
sub_688A5DF8	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 289. peer_connection_find_by_type

; =============== S U B	R O U T	I N E =======================================


		public peer_connection_find_by_type
peer_connection_find_by_type proc near	; CODE XREF: .text:68899E5Ap
					; oscar_send_typing+43p ...

var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_30		= dword	ptr -30h
var_20		= dword	ptr -20h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 3Ch
		mov	edx, [esp+4Ch+arg_4]
		mov	[esp+4Ch+var_30], edx
		mov	edi, [esp+4Ch+arg_8]
		mov	ebp, [esp+4Ch+arg_C]
		mov	eax, ds:__stack_chk_guard
		mov	[esp+4Ch+var_20], eax
		xor	eax, eax
		mov	eax, [esp+4Ch+arg_0]
		mov	ebx, [eax+0F8h]
		test	ebx, ebx
		jnz	short loc_688A60FB
		jmp	short loc_688A613C
; ---------------------------------------------------------------------------
		align 4

loc_688A60F4:				; CODE XREF: peer_connection_find_by_type+49j
					; peer_connection_find_by_type+60j
		mov	ebx, [ebx+4]
		test	ebx, ebx
		jz	short loc_688A613C

loc_688A60FB:				; CODE XREF: peer_connection_find_by_type+2Ej
		mov	esi, [ebx]
		mov	ecx, [esi+0Ch]
		xor	ecx, ebp
		mov	eax, [esi+8]
		xor	eax, edi
		or	ecx, eax
		jnz	short loc_688A60F4
		mov	edx, [esp+4Ch+var_30]
		mov	[esp+4Ch+var_48], edx
		mov	eax, [esi+10h]
		mov	[esp+4Ch+var_4C], eax
		call	oscar_util_name_compare
		test	eax, eax
		jnz	short loc_688A60F4
		xchg	ax, ax

loc_688A6124:				; CODE XREF: peer_connection_find_by_type+7Ej
		mov	eax, esi
		mov	edx, [esp+4Ch+var_20]
		xor	edx, ds:__stack_chk_guard
		jnz	short loc_688A6140
		add	esp, 3Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 4

loc_688A613C:				; CODE XREF: peer_connection_find_by_type+30j
					; peer_connection_find_by_type+39j
		xor	esi, esi
		jmp	short loc_688A6124
; ---------------------------------------------------------------------------

loc_688A6140:				; CODE XREF: peer_connection_find_by_type+70j
		call	__stack_chk_fail
peer_connection_find_by_type endp

; ---------------------------------------------------------------------------
		align 4
; Exported entry 288. peer_connection_find_by_cookie

; =============== S U B	R O U T	I N E =======================================


; int __cdecl peer_connection_find_by_cookie(int, int, void *)
		public peer_connection_find_by_cookie
peer_connection_find_by_cookie proc near ; CODE	XREF: sub_6889F200+1C7p
					; sub_6889F454+644p ...

Buf1		= dword	ptr -3Ch
Buf2		= dword	ptr -38h
Size		= dword	ptr -34h
var_20		= dword	ptr -20h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 2Ch
		mov	ebp, [esp+3Ch+arg_4]
		mov	edi, [esp+3Ch+arg_8]
		mov	eax, ds:__stack_chk_guard
		mov	[esp+3Ch+var_20], eax
		xor	eax, eax
		mov	eax, [esp+3Ch+arg_0]
		mov	ebx, [eax+0F8h]
		test	ebx, ebx
		jnz	short loc_688A617B
		jmp	short loc_688A61C4
; ---------------------------------------------------------------------------
		align 4

loc_688A6174:				; CODE XREF: peer_connection_find_by_cookie+4Ej
					; peer_connection_find_by_cookie+61j
		mov	ebx, [ebx+4]
		test	ebx, ebx
		jz	short loc_688A61C4

loc_688A617B:				; CODE XREF: peer_connection_find_by_cookie+26j
		mov	esi, [ebx]
		mov	[esp+3Ch+Size],	8 ; Size
		mov	[esp+3Ch+Buf2],	edi ; Buf2
		lea	eax, [esi+18h]
		mov	[esp+3Ch+Buf1],	eax ; Buf1
		call	memcmp
		test	eax, eax
		jnz	short loc_688A6174
		mov	[esp+3Ch+Buf2],	ebp
		mov	eax, [esi+10h]
		mov	[esp+3Ch+Buf1],	eax
		call	oscar_util_name_compare
		test	eax, eax
		jnz	short loc_688A6174

loc_688A61AB:				; CODE XREF: peer_connection_find_by_cookie+7Ej
		mov	eax, esi
		mov	edx, [esp+3Ch+var_20]
		xor	edx, ds:__stack_chk_guard
		jnz	short loc_688A61C8
		add	esp, 2Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 4

loc_688A61C4:				; CODE XREF: peer_connection_find_by_cookie+28j
					; peer_connection_find_by_cookie+31j
		xor	esi, esi
		jmp	short loc_688A61AB
; ---------------------------------------------------------------------------

loc_688A61C8:				; CODE XREF: peer_connection_find_by_cookie+6Fj
		call	__stack_chk_fail
peer_connection_find_by_cookie endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 292. peer_connection_new

; =============== S U B	R O U T	I N E =======================================


		public peer_connection_new
peer_connection_new proc near		; CODE XREF: oscar_new_xfer+A4p
					; peer_connection_propose+3Ap ...

Time		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_20		= dword	ptr -20h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 3Ch
		mov	esi, [esp+4Ch+arg_0]
		mov	edi, [esp+4Ch+arg_4]
		mov	edx, [esp+4Ch+arg_8]
		mov	[esp+4Ch+var_30], edx
		mov	ebp, [esp+4Ch+arg_C]
		mov	eax, ds:__stack_chk_guard
		mov	[esp+4Ch+var_20], eax
		xor	eax, eax
		mov	eax, [esi+68h]
		mov	[esp+4Ch+Time],	eax
		call	purple_connection_get_account
		mov	[esp+4Ch+Time],	170h
		mov	[esp+4Ch+var_34], eax
		call	g_malloc0
		mov	ebx, eax
		mov	[eax], esi
		mov	[eax+8], edi
		mov	edx, [esp+4Ch+var_30]
		mov	[eax+0Ch], edx
		mov	[esp+4Ch+Time],	ebp
		call	g_strdup
		mov	[ebx+10h], eax
		mov	[esp+4Ch+Time],	0
		call	purple_circ_buffer_new
		mov	[ebx+80h], eax
		mov	dword ptr [ebx+50h], 0FFFFFFFFh
		mov	dword ptr [ebx+54h], 0FFFFFFFFh
		mov	[esp+4Ch+Time],	0 ; Time
		call	time
		mov	[ebx+2Ch], eax
		mov	ebp, [ebx+9Ch]
		mov	[esp+4Ch+var_44], 0
		mov	[esp+4Ch+var_48], offset aAlways_use_r_0 ; "always_use_rv_proxy"
		mov	ecx, [esp+4Ch+var_34]
		mov	[esp+4Ch+Time],	ecx
		call	purple_account_get_bool
		or	eax, ebp
		mov	[ebx+9Ch], eax
		mov	eax, edi
		xor	eax, 4
		or	eax, [esp+4Ch+var_30]
		jz	short loc_688A62D4
		xor	edi, 20h
		or	edi, [esp+4Ch+var_30]
		jz	short loc_688A62C8

loc_688A6297:				; CODE XREF: peer_connection_new+FFj
					; peer_connection_new+10Bj
		mov	[esp+4Ch+var_48], ebx
		mov	eax, [esi+0F8h]
		mov	[esp+4Ch+Time],	eax
		call	g_slist_prepend
		mov	[esi+0F8h], eax
		mov	eax, ebx
		mov	edx, [esp+4Ch+var_20]
		xor	edx, ds:__stack_chk_guard
		jnz	short loc_688A62DD
		add	esp, 3Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 4

loc_688A62C8:				; CODE XREF: peer_connection_new+C5j
		mov	dword ptr [ebx+14h], 3254464Fh
		jmp	short loc_688A6297
; ---------------------------------------------------------------------------
		align 4

loc_688A62D4:				; CODE XREF: peer_connection_new+BCj
		mov	dword ptr [ebx+14h], 3243444Fh
		jmp	short loc_688A6297
; ---------------------------------------------------------------------------

loc_688A62DD:				; CODE XREF: peer_connection_new+EBj
		call	__stack_chk_fail
peer_connection_new endp

; ---------------------------------------------------------------------------
		align 4
; Exported entry 286. peer_connection_destroy

; =============== S U B	R O U T	I N E =======================================


		public peer_connection_destroy
peer_connection_destroy	proc near	; CODE XREF: sub_68896FB0+3DBp
					; sub_68896FB0+595p ...

var_2C		= dword	ptr -2Ch
var_10		= dword	ptr -10h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	edi
		push	esi
		push	ebx
		sub	esp, 20h
		mov	ebx, [esp+2Ch+arg_0]
		mov	edi, [esp+2Ch+arg_4]
		mov	esi, [esp+2Ch+arg_8]
		mov	eax, ds:__stack_chk_guard
		mov	[esp+2Ch+var_10], eax
		xor	eax, eax
		mov	eax, [ebx+30h]
		test	eax, eax
		jz	short loc_688A6310
		mov	[esp+2Ch+var_2C], eax
		call	purple_timeout_remove

loc_688A6310:				; CODE XREF: peer_connection_destroy+22j
		mov	[ebx+34h], edi
		mov	eax, [ebx+38h]
		mov	[esp+2Ch+var_2C], eax
		call	g_free
		mov	[esp+2Ch+var_2C], esi
		call	g_strdup
		mov	[ebx+38h], eax
		mov	eax, [esp+2Ch+var_10]
		xor	eax, ds:__stack_chk_guard
		jnz	short loc_688A6344
		mov	[esp+2Ch+arg_0], ebx
		add	esp, 20h
		pop	ebx
		pop	esi
		pop	edi
		jmp	loc_688A5F8C
; ---------------------------------------------------------------------------

loc_688A6344:				; CODE XREF: peer_connection_destroy+4Fj
		call	__stack_chk_fail
peer_connection_destroy	endp

; ---------------------------------------------------------------------------
		align 4

; =============== S U B	R O U T	I N E =======================================


sub_688A634C	proc near		; DATA XREF: peer_connection_got_proposition+4A4o

var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_10		= dword	ptr -10h
arg_0		= dword	ptr  4

		push	ebx
		sub	esp, 28h
		mov	ebx, [esp+2Ch+arg_0]
		mov	eax, ds:__stack_chk_guard
		mov	[esp+2Ch+var_10], eax
		xor	eax, eax
		mov	[esp+2Ch+var_20], 1
		lea	eax, [ebx+18h]
		mov	[esp+2Ch+var_24], eax
		mov	eax, [ebx+10h]
		mov	[esp+2Ch+var_28], eax
		mov	eax, [ebx]
		mov	[esp+2Ch+var_2C], eax
		call	aim_im_denytransfer
		mov	[esp+2Ch+var_24], 0
		mov	[esp+2Ch+var_28], 1
		mov	[esp+2Ch+var_2C], ebx
		call	peer_connection_destroy
		mov	eax, [esp+2Ch+var_10]
		xor	eax, ds:__stack_chk_guard
		jnz	short loc_688A63A8
		add	esp, 28h
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_688A63A8:				; CODE XREF: sub_688A634C+55j
		call	__stack_chk_fail
sub_688A634C	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 294. peer_connection_recv_cb

; =============== S U B	R O U T	I N E =======================================


		public peer_connection_recv_cb
peer_connection_recv_cb	proc near	; DATA XREF: sub_68896FB0+528o
					; peer_oft_sendcb_ack+3Fo ...

Time		= dword	ptr -4Ch
Buf2		= dword	ptr -48h
Size		= dword	ptr -44h
var_40		= dword	ptr -40h
var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_10		= dword	ptr -10h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	esi
		push	ebx
		sub	esp, 44h
		mov	ebx, [esp+4Ch+arg_0]
		mov	eax, ds:__stack_chk_guard
		mov	[esp+4Ch+var_10], eax
		xor	eax, eax
		mov	eax, [ebx+74h]
		test	eax, eax
		jz	loc_688A64F0
		mov	ecx, [ebx+7Ch]

loc_688A63D2:				; CODE XREF: peer_connection_recv_cb+1DCj
		mov	[esp+4Ch+var_40], 0
		mov	edx, [ebx+78h]
		sub	edx, ecx
		mov	[esp+4Ch+Size],	edx
		add	eax, ecx
		mov	[esp+4Ch+Buf2],	eax
		mov	eax, [ebx+54h]
		mov	[esp+4Ch+Time],	eax
		call	wpurple_recv
		mov	esi, eax
		cmp	eax, 0
		jz	short loc_688A6478
		jl	short loc_688A6434
		mov	[esp+4Ch+Time],	0 ; Time
		call	time
		mov	[ebx+2Ch], eax
		add	esi, [ebx+7Ch]
		mov	[ebx+7Ch], esi
		cmp	esi, [ebx+78h]
		jnb	loc_688A64A8

loc_688A641B:				; CODE XREF: peer_connection_recv_cb+8Cj
					; peer_connection_recv_cb+99j ...
		mov	eax, [esp+4Ch+var_10]
		xor	eax, ds:__stack_chk_guard
		jnz	loc_688A6631
		add	esp, 44h
		pop	ebx
		pop	esi
		retn
; ---------------------------------------------------------------------------
		align 4

loc_688A6434:				; CODE XREF: peer_connection_recv_cb+4Bj
					; peer_connection_recv_cb+174j
		call	_errno
		cmp	dword ptr [eax], 0Bh
		jz	short loc_688A641B
		call	_errno
		cmp	dword ptr [eax], 2733h
		jz	short loc_688A641B
		call	_errno
		mov	eax, [eax]
		mov	[esp+4Ch+Time],	eax
		call	wpurple_strerror
		mov	edx, [esp+4Ch+var_10]
		xor	edx, ds:__stack_chk_guard
		jnz	loc_688A6631
		mov	[esp+4Ch+arg_8], eax
		mov	[esp+4Ch+arg_4], 4
		jmp	short loc_688A6498
; ---------------------------------------------------------------------------

loc_688A6478:				; CODE XREF: peer_connection_recv_cb+49j
					; peer_connection_recv_cb+16Ej
		mov	edx, [esp+4Ch+var_10]
		xor	edx, ds:__stack_chk_guard
		jnz	loc_688A6631
		mov	[esp+4Ch+arg_8], 0
		mov	[esp+4Ch+arg_4], 2

loc_688A6498:				; CODE XREF: peer_connection_recv_cb+C6j
					; peer_connection_recv_cb+254j
		mov	[esp+4Ch+arg_0], ebx
		add	esp, 44h
		pop	ebx
		pop	esi
		jmp	peer_connection_destroy
; ---------------------------------------------------------------------------
		align 4

loc_688A64A8:				; CODE XREF: peer_connection_recv_cb+65j
		lea	esi, [ebx+74h]
		mov	[esp+4Ch+Time],	esi
		call	sub_688818CC
		mov	edx, [ebx+8]
		mov	eax, [ebx+0Ch]
		mov	ecx, edx
		xor	ecx, 4
		or	ecx, eax
		jz	loc_688A660C
		xor	edx, 20h
		or	edx, eax
		jz	loc_688A6620

loc_688A64D1:				; CODE XREF: peer_connection_recv_cb+268j
					; peer_connection_recv_cb+27Cj
		mov	eax, [ebx+74h]
		mov	[esp+4Ch+Time],	eax
		call	g_free
		mov	dword ptr [ebx+74h], 0
		mov	dword ptr [ebx+60h], 0
		jmp	loc_688A641B
; ---------------------------------------------------------------------------
		align 10h

loc_688A64F0:				; CODE XREF: peer_connection_recv_cb+19j
		mov	edx, [ebx+60h]
		mov	[esp+4Ch+var_40], 0
		mov	eax, 6
		sub	eax, edx
		mov	[esp+4Ch+Size],	eax
		lea	eax, [ebx+edx+58h]
		mov	[esp+4Ch+Buf2],	eax
		mov	eax, [ebx+54h]
		mov	[esp+4Ch+Time],	eax
		call	wpurple_recv
		mov	esi, eax
		cmp	eax, 0
		jz	loc_688A6478
		jl	loc_688A6434
		mov	[esp+4Ch+Time],	0 ; Time
		call	time
		mov	[ebx+2Ch], eax
		add	esi, [ebx+60h]
		mov	[ebx+60h], esi
		cmp	esi, 5
		jle	loc_688A641B
		mov	[esp+4Ch+Size],	4 ; Size
		lea	eax, [ebx+58h]
		mov	[esp+4Ch+Buf2],	eax ; Buf2
		lea	eax, [ebx+14h]
		mov	[esp+4Ch+Time],	eax ; Buf1
		call	memcmp
		test	eax, eax
		jnz	short loc_688A6594
		movzx	edx, byte ptr [ebx+5Dh]
		movzx	eax, byte ptr [ebx+5Ch]
		shl	eax, 8
		lea	eax, [edx+eax-6]
		mov	[ebx+78h], eax
		mov	[esp+4Ch+Time],	eax
		call	g_malloc
		mov	[ebx+74h], eax
		mov	dword ptr [ebx+7Ch], 0
		xor	ecx, ecx
		jmp	loc_688A63D2
; ---------------------------------------------------------------------------
		align 4

loc_688A6594:				; CODE XREF: peer_connection_recv_cb+1B4j
		movzx	eax, byte ptr [ebx+5Bh]
		mov	[esp+4Ch+var_28], eax
		movzx	eax, byte ptr [ebx+5Ah]
		mov	[esp+4Ch+var_2C], eax
		movzx	eax, byte ptr [ebx+59h]
		mov	[esp+4Ch+var_30], eax
		movzx	eax, byte ptr [ebx+58h]
		mov	[esp+4Ch+var_34], eax
		movzx	eax, byte ptr [ebx+17h]
		mov	[esp+4Ch+var_38], eax
		movzx	eax, byte ptr [ebx+16h]
		mov	[esp+4Ch+var_3C], eax
		movzx	eax, byte ptr [ebx+15h]
		mov	[esp+4Ch+var_40], eax
		movzx	eax, byte ptr [ebx+14h]
		mov	[esp+4Ch+Size],	eax
		mov	[esp+4Ch+Buf2],	offset aExpectingMagic ; "Expecting magic string to be %c%c%c%c	b"...
		mov	[esp+4Ch+Time],	offset aOscar_15 ; "oscar"
		call	purple_debug_warning
		mov	eax, [esp+4Ch+var_10]
		xor	eax, ds:__stack_chk_guard
		jnz	short loc_688A6631
		mov	[esp+4Ch+arg_8], 0
		mov	[esp+4Ch+arg_4], 5
		jmp	loc_688A6498
; ---------------------------------------------------------------------------
		align 4

loc_688A660C:				; CODE XREF: peer_connection_recv_cb+110j
		mov	[esp+4Ch+Buf2],	esi
		mov	[esp+4Ch+Time],	ebx
		call	peer_odc_recv_frame
		jmp	loc_688A64D1
; ---------------------------------------------------------------------------
		align 10h

loc_688A6620:				; CODE XREF: peer_connection_recv_cb+11Bj
		mov	[esp+4Ch+Buf2],	esi
		mov	[esp+4Ch+Time],	ebx
		call	peer_oft_recv_frame
		jmp	loc_688A64D1
; ---------------------------------------------------------------------------

loc_688A6631:				; CODE XREF: peer_connection_recv_cb+75j
					; peer_connection_recv_cb+B4j ...
		call	__stack_chk_fail
peer_connection_recv_cb	endp

; ---------------------------------------------------------------------------
		align 4
; Exported entry 295. peer_connection_schedule_destroy

; =============== S U B	R O U T	I N E =======================================


		public peer_connection_schedule_destroy
peer_connection_schedule_destroy proc near ; CODE XREF:	peer_oft_recv_frame+367p
					; sub_688A6FB0+EBj

var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_10		= dword	ptr -10h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	edi
		push	esi
		push	ebx
		sub	esp, 20h
		mov	ebx, [esp+2Ch+arg_0]
		mov	edi, [esp+2Ch+arg_4]
		mov	esi, [esp+2Ch+arg_8]
		mov	eax, ds:__stack_chk_guard
		mov	[esp+2Ch+var_10], eax
		xor	eax, eax
		mov	eax, [ebx+30h]
		test	eax, eax
		jnz	short loc_688A66A4
		mov	[esp+2Ch+var_28], offset aSchedulingDe_0 ; "Scheduling destruction of peer connecti"...
		mov	[esp+2Ch+var_2C], offset aOscar_15 ; "oscar"
		call	purple_debug_info
		mov	[ebx+34h], edi
		mov	eax, [ebx+38h]
		mov	[esp+2Ch+var_2C], eax
		call	g_free
		mov	[esp+2Ch+var_2C], esi
		call	g_strdup
		mov	[ebx+38h], eax
		mov	[esp+2Ch+var_24], ebx
		mov	[esp+2Ch+var_28], offset loc_688A5F8C
		mov	[esp+2Ch+var_2C], 0
		call	purple_timeout_add
		mov	[ebx+30h], eax

loc_688A66A4:				; CODE XREF: peer_connection_schedule_destroy+22j
		mov	eax, [esp+2Ch+var_10]
		xor	eax, ds:__stack_chk_guard
		jnz	short loc_688A66B7
		add	esp, 20h
		pop	ebx
		pop	esi
		pop	edi
		retn
; ---------------------------------------------------------------------------

loc_688A66B7:				; CODE XREF: peer_connection_schedule_destroy+76j
		call	__stack_chk_fail
peer_connection_schedule_destroy endp

; Exported entry 287. peer_connection_finalize_connection

; =============== S U B	R O U T	I N E =======================================


		public peer_connection_finalize_connection
peer_connection_finalize_connection proc near ;	CODE XREF: sub_688A6D8C+AFp
					; peer_connection_listen_cb+96p ...

var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_10		= dword	ptr -10h
arg_0		= dword	ptr  4

		push	ebx
		sub	esp, 28h
		mov	ebx, [esp+2Ch+arg_0]
		mov	eax, ds:__stack_chk_guard
		mov	[esp+2Ch+var_10], eax
		xor	eax, eax
		mov	[esp+2Ch+var_20], ebx
		mov	[esp+2Ch+var_24], offset peer_connection_recv_cb
		mov	[esp+2Ch+var_28], 1
		mov	eax, [ebx+54h]
		mov	[esp+2Ch+var_2C], eax
		call	purple_input_add
		mov	[ebx+84h], eax
		mov	edx, [ebx+8]
		mov	eax, [ebx+0Ch]
		mov	ecx, edx
		xor	ecx, 4
		or	ecx, eax
		jz	short loc_688A6740
		xor	edx, 20h
		or	edx, eax
		jz	short loc_688A6750

loc_688A670A:				; CODE XREF: peer_connection_finalize_connection+92j
					; peer_connection_finalize_connection+A3j ...
		test	byte ptr [ebx+28h], 20h
		jz	short loc_688A6724

loc_688A6710:				; CODE XREF: peer_connection_finalize_connection+88j
		mov	eax, [esp+2Ch+var_10]
		xor	eax, ds:__stack_chk_guard
		jnz	short loc_688A676B
		add	esp, 28h
		pop	ebx
		retn
; ---------------------------------------------------------------------------
		align 4

loc_688A6724:				; CODE XREF: peer_connection_finalize_connection+52j
		mov	eax, [esp+2Ch+var_10]
		xor	eax, ds:__stack_chk_guard
		jnz	short loc_688A676B
		mov	[esp+2Ch+arg_0], ebx
		add	esp, 28h
		pop	ebx
		jmp	aim_im_sendch2_connected
; ---------------------------------------------------------------------------
		align 10h

loc_688A6740:				; CODE XREF: peer_connection_finalize_connection+45j
		test	byte ptr [ebx+28h], 20h
		jnz	short loc_688A6710
		mov	[esp+2Ch+var_2C], ebx
		call	peer_odc_send_cookie
		jmp	short loc_688A670A
; ---------------------------------------------------------------------------

loc_688A6750:				; CODE XREF: peer_connection_finalize_connection+4Cj
		mov	eax, [ebx+0A4h]
		mov	[esp+2Ch+var_2C], eax
		call	purple_xfer_get_type
		dec	eax
		jnz	short loc_688A670A
		mov	[esp+2Ch+var_2C], ebx
		call	peer_oft_send_prompt
		jmp	short loc_688A670A
; ---------------------------------------------------------------------------

loc_688A676B:				; CODE XREF: peer_connection_finalize_connection+5Ej
					; peer_connection_finalize_connection+72j
		call	__stack_chk_fail
peer_connection_finalize_connection endp

; Exported entry 297. peer_connection_trynext

; =============== S U B	R O U T	I N E =======================================


		public peer_connection_trynext
peer_connection_trynext	proc near	; CODE XREF: sub_68897F20+20p
					; peer_oft_recvcb_init+2Cj ...

Str1		= dword	ptr -4Ch
Str2		= dword	ptr -48h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_20		= dword	ptr -20h
arg_0		= dword	ptr  4

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 3Ch
		mov	ebx, [esp+4Ch+arg_0]
		mov	eax, ds:__stack_chk_guard
		mov	[esp+4Ch+var_20], eax
		xor	eax, eax
		mov	eax, [ebx]
		mov	eax, [eax+68h]
		mov	[esp+4Ch+Str1],	eax
		call	purple_connection_get_account
		mov	esi, eax
		mov	eax, ebx
		call	sub_688A5DF8
		mov	edx, [ebx+28h]
		test	dl, 4
		jnz	loc_688A6880
		mov	edi, [ebx+94h]
		test	edi, edi
		jz	loc_688A6880
		movzx	ebp, word ptr [ebx+98h]
		test	bp, bp
		jz	loc_688A6880
		mov	eax, [ebx+9Ch]
		test	eax, eax
		jnz	loc_688A6880
		or	edx, 4
		mov	[ebx+28h], edx
		mov	eax, [ebx+8]
		xor	eax, 4
		or	eax, [ebx+0Ch]
		jz	loc_688A6A30

loc_688A67E9:				; CODE XREF: peer_connection_trynext+340j
		mov	[esp+4Ch+var_38], ebx
		mov	[esp+4Ch+var_3C], offset sub_688A6EB0
		mov	[esp+4Ch+var_40], ebp
		mov	[esp+4Ch+var_44], edi
		mov	[esp+4Ch+Str2],	esi
		mov	[esp+4Ch+Str1],	0
		call	purple_proxy_connect
		mov	edi, eax
		mov	[ebx+44h], eax
		mov	eax, [ebx+94h]
		mov	ebp, [ebx+90h]
		test	eax, eax
		jz	loc_688A69EC
		mov	[esp+4Ch+Str2],	ebp ; Str2
		mov	[esp+4Ch+Str1],	eax ; Str1
		call	strcmp
		test	eax, eax
		jnz	loc_688A69EC

loc_688A683A:				; CODE XREF: peer_connection_trynext+2ADj
		test	edi, edi
		jz	short loc_688A6874

loc_688A683E:				; CODE XREF: peer_connection_trynext+109j
		mov	[esp+4Ch+var_44], ebx
		mov	[esp+4Ch+Str2],	offset sub_688A6D8C
		mov	[esp+4Ch+Str1],	5
		call	purple_timeout_add_seconds
		mov	[ebx+4Ch], eax
		lea	esi, [esi+0]

loc_688A685C:				; CODE XREF: peer_connection_trynext+180j
					; peer_connection_trynext+19Ej	...
		mov	eax, [esp+4Ch+var_20]
		xor	eax, ds:__stack_chk_guard
		jnz	loc_688A6AB5
		add	esp, 3Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_688A6874:				; CODE XREF: peer_connection_trynext+CCj
		mov	ebp, [ebx+40h]
		test	ebp, ebp
		jnz	short loc_688A683E
		mov	edx, [ebx+28h]
		xchg	ax, ax

loc_688A6880:				; CODE XREF: peer_connection_trynext+32j
					; peer_connection_trynext+40j ...
		test	dl, 8
		jz	loc_688A6914

loc_688A6889:				; CODE XREF: peer_connection_trynext+1ACj
					; peer_connection_trynext+1EEj
		test	dl, 10h
		jnz	short loc_688A68F6
		mov	eax, edx
		or	eax, 10h
		mov	[ebx+28h], eax
		mov	ecx, [ebx+9Ch]
		test	ecx, ecx
		jnz	short loc_688A68A6
		or	edx, 30h
		mov	[ebx+28h], edx

loc_688A68A6:				; CODE XREF: peer_connection_trynext+12Ej
		mov	edx, [ebx+8]
		xor	edx, 4
		or	edx, [ebx+0Ch]
		jz	loc_688A697C

loc_688A68B5:				; CODE XREF: peer_connection_trynext+277j
		mov	eax, [ebx+8Ch]
		test	eax, eax
		jz	loc_688A6964

loc_688A68C3:				; CODE XREF: peer_connection_trynext+206j
					; peer_connection_trynext+2B9j
		mov	[esp+4Ch+var_38], ebx
		mov	[esp+4Ch+var_3C], offset peer_proxy_connection_established_cb
		mov	[esp+4Ch+var_40], 1446h
		mov	[esp+4Ch+var_44], eax
		mov	[esp+4Ch+Str2],	esi
		mov	[esp+4Ch+Str1],	0
		call	purple_proxy_connect
		mov	[ebx+44h], eax
		test	eax, eax
		jnz	loc_688A685C

loc_688A68F6:				; CODE XREF: peer_connection_trynext+11Cj
		mov	[esp+4Ch+var_44], 0
		mov	[esp+4Ch+Str2],	6
		mov	[esp+4Ch+Str1],	ebx
		call	peer_connection_destroy
		jmp	loc_688A685C
; ---------------------------------------------------------------------------
		align 4

loc_688A6914:				; CODE XREF: peer_connection_trynext+113j
		mov	edi, [ebx+9Ch]
		test	edi, edi
		jnz	loc_688A6889
		or	edx, 28h
		mov	[ebx+28h], edx
		mov	[esp+4Ch+var_3C], ebx
		mov	[esp+4Ch+var_40], offset sub_688A6AF0
		mov	[esp+4Ch+var_44], 1
		mov	[esp+4Ch+Str2],	14AAh
		mov	[esp+4Ch+Str1],	1446h
		call	purple_network_listen_range
		mov	[ebx+48h], eax
		test	eax, eax
		jnz	loc_688A685C
		mov	edx, [ebx+28h]
		jmp	loc_688A6889
; ---------------------------------------------------------------------------
		align 4

loc_688A6964:				; CODE XREF: peer_connection_trynext+14Dj
		mov	eax, [ebx]
		mov	edx, [eax+44h]
		test	edx, edx
		jz	loc_688A6A24
		mov	eax, offset aArs_icq_com ; "ars.icq.com"
		jmp	loc_688A68C3
; ---------------------------------------------------------------------------
		align 4

loc_688A697C:				; CODE XREF: peer_connection_trynext+13Fj
		mov	[esp+4Ch+Str2],	offset aAttemptingToCo ; "Attempting to	connect	via proxy server."
		mov	[esp+4Ch+Str1],	offset aPidgin_7 ; "pidgin"
		call	libintl_dgettext
		mov	[esp+4Ch+Str1],	eax
		call	g_strdup
		mov	edi, eax
		mov	eax, [ebx+10h]
		mov	[esp+4Ch+var_44], eax
		mov	[esp+4Ch+Str2],	esi
		mov	[esp+4Ch+Str1],	1
		call	purple_conversation_new
		mov	ebp, eax
		mov	[esp+4Ch+Str1],	0 ; Time
		call	time
		mov	[esp+4Ch+var_3C], eax
		mov	[esp+4Ch+var_40], 4
		mov	[esp+4Ch+var_44], edi
		mov	[esp+4Ch+Str2],	0
		mov	[esp+4Ch+Str1],	ebp
		call	purple_conversation_write
		mov	[esp+4Ch+Str1],	edi
		call	g_free
		jmp	loc_688A68B5
; ---------------------------------------------------------------------------

loc_688A69EC:				; CODE XREF: peer_connection_trynext+B0j
					; peer_connection_trynext+C4j
		mov	[esp+4Ch+var_38], ebx
		mov	[esp+4Ch+var_3C], offset sub_688A6E7C
		movzx	eax, word ptr [ebx+98h]
		mov	[esp+4Ch+var_40], eax
		mov	[esp+4Ch+var_44], ebp
		mov	[esp+4Ch+Str2],	esi
		mov	[esp+4Ch+Str1],	0
		call	purple_proxy_connect
		mov	[ebx+40h], eax
		mov	edi, [ebx+44h]
		jmp	loc_688A683A
; ---------------------------------------------------------------------------
		align 4

loc_688A6A24:				; CODE XREF: peer_connection_trynext+1FBj
		mov	eax, offset aArs_oscar_aol_ ; "ars.oscar.aol.com"
		jmp	loc_688A68C3
; ---------------------------------------------------------------------------
		align 10h

loc_688A6A30:				; CODE XREF: peer_connection_trynext+73j
		mov	[esp+4Ch+Str2],	offset aAttemptingTo_0 ; "Attempting to	connect	to %s:%hu."
		mov	[esp+4Ch+Str1],	offset aPidgin_7 ; "pidgin"
		call	libintl_dgettext
		mov	[esp+4Ch+var_44], ebp
		mov	[esp+4Ch+Str2],	edi
		mov	[esp+4Ch+Str1],	eax
		call	g_strdup_printf
		mov	edi, eax
		mov	eax, [ebx+10h]
		mov	[esp+4Ch+var_44], eax
		mov	[esp+4Ch+Str2],	esi
		mov	[esp+4Ch+Str1],	1
		call	purple_conversation_new
		mov	ebp, eax
		mov	[esp+4Ch+Str1],	0 ; Time
		call	time
		mov	[esp+4Ch+var_3C], eax
		mov	[esp+4Ch+var_40], 4
		mov	[esp+4Ch+var_44], edi
		mov	[esp+4Ch+Str2],	0
		mov	[esp+4Ch+Str1],	ebp
		call	purple_conversation_write
		mov	[esp+4Ch+Str1],	edi
		call	g_free
		movzx	ebp, word ptr [ebx+98h]
		mov	edi, [ebx+94h]
		jmp	loc_688A67E9
; ---------------------------------------------------------------------------

loc_688A6AB5:				; CODE XREF: peer_connection_trynext+F6j
		call	__stack_chk_fail
peer_connection_trynext	endp

; ---------------------------------------------------------------------------
		align 4

; =============== S U B	R O U T	I N E =======================================


sub_688A6ABC	proc near		; DATA XREF: peer_connection_got_proposition+4B0o

var_10		= dword	ptr -10h
arg_0		= dword	ptr  4

		sub	esp, 1Ch
		mov	eax, [esp+1Ch+arg_0]
		mov	edx, ds:__stack_chk_guard
		mov	[esp+1Ch+var_10], edx
		xor	edx, edx
		or	dword ptr [eax+28h], 2
		mov	edx, [esp+1Ch+var_10]
		xor	edx, ds:__stack_chk_guard
		jnz	short loc_688A6AEB
		mov	[esp+1Ch+arg_0], eax
		add	esp, 1Ch
		jmp	peer_connection_trynext
; ---------------------------------------------------------------------------

loc_688A6AEB:				; CODE XREF: sub_688A6ABC+21j
		call	__stack_chk_fail
sub_688A6ABC	endp


; =============== S U B	R O U T	I N E =======================================


sub_688A6AF0	proc near		; DATA XREF: peer_connection_trynext+1BCo

Time		= dword	ptr -6Ch
var_68		= dword	ptr -68h
var_64		= dword	ptr -64h
var_60		= dword	ptr -60h
var_5C		= dword	ptr -5Ch
var_58		= dword	ptr -58h
var_54		= dword	ptr -54h
var_50		= dword	ptr -50h
var_4C		= dword	ptr -4Ch
var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_30		= dword	ptr -30h
var_20		= dword	ptr -20h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 5Ch
		mov	esi, [esp+6Ch+arg_0]
		mov	ebx, [esp+6Ch+arg_4]
		mov	eax, ds:__stack_chk_guard
		mov	[esp+6Ch+var_20], eax
		xor	eax, eax
		mov	dword ptr [ebx+48h], 0
		test	esi, esi
		js	loc_688A6C2C
		mov	edi, [ebx]
		mov	eax, [edi+68h]
		mov	[esp+6Ch+Time],	eax
		call	purple_connection_get_account
		mov	[esp+6Ch+var_30], eax
		mov	[ebx+50h], esi
		mov	[esp+6Ch+var_60], ebx
		mov	[esp+6Ch+var_64], offset peer_connection_listen_cb
		mov	[esp+6Ch+var_68], 1
		mov	[esp+6Ch+Time],	esi
		call	purple_input_add
		mov	[ebx+84h], eax
		mov	[esp+6Ch+var_68], 4
		mov	[esp+6Ch+Time],	edi
		call	flap_connection_findbygroup
		mov	esi, eax
		test	eax, eax
		jz	loc_688A6C2C
		mov	eax, [eax+30h]
		test	eax, eax
		jz	loc_688A6C48
		mov	eax, [eax+1Ch]
		mov	[esp+6Ch+Time],	eax
		call	purple_network_get_my_ip
		mov	ebp, eax

loc_688A6B81:				; CODE XREF: sub_688A6AF0+165j
		mov	[esp+6Ch+Time],	ebp
		call	purple_network_ip_atoi
		mov	edx, eax
		test	eax, eax
		jz	short loc_688A6BDC
		mov	eax, [ebx+50h]
		mov	[esp+6Ch+Time],	eax
		mov	[esp+6Ch+var_38], edx
		call	purple_network_get_port_from_fd
		mov	ecx, [ebx+8]
		mov	[esp+6Ch+var_3C], ecx
		mov	esi, [ebx+0Ch]
		xor	ecx, 4
		or	ecx, esi
		mov	edx, [esp+6Ch+var_38]
		jz	loc_688A6CB0
		mov	ecx, [esp+6Ch+var_3C]
		xor	ecx, 20h
		or	ecx, esi
		jz	loc_688A6C5C

loc_688A6BC6:				; CODE XREF: sub_688A6AF0+1BBj
		mov	eax, [esp+6Ch+var_20]
		xor	eax, ds:__stack_chk_guard
		jnz	short loc_688A6C26
		add	esp, 5Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 4

loc_688A6BDC:				; CODE XREF: sub_688A6AF0+9Dj
		mov	edx, [esi+30h]
		test	edx, edx
		setnz	al
		movzx	ecx, al
		test	al, al
		jz	loc_688A6D78
		mov	eax, [edx+1Ch]

loc_688A6BF2:				; CODE XREF: sub_688A6AF0+28Bj
		test	ebp, ebp
		jz	loc_688A6D80

loc_688A6BFA:				; CODE XREF: sub_688A6AF0+295j
		mov	[esp+6Ch+var_5C], ecx
		mov	[esp+6Ch+var_60], eax
		mov	[esp+6Ch+var_64], ebp
		mov	[esp+6Ch+var_68], offset aCanTAskPeerToC ; "Can't ask peer to connect to us because"...
		mov	[esp+6Ch+Time],	offset aOscar_15 ; "oscar"
		call	purple_debug_error
		mov	esi, [esp+6Ch+var_20]
		xor	esi, ds:__stack_chk_guard
		jz	short loc_688A6C38

loc_688A6C26:				; CODE XREF: sub_688A6AF0+E0j
					; sub_688A6AF0+146j ...
		call	__stack_chk_fail
; ---------------------------------------------------------------------------
		align 4

loc_688A6C2C:				; CODE XREF: sub_688A6AF0+23j
					; sub_688A6AF0+73j
		mov	ecx, [esp+6Ch+var_20]
		xor	ecx, ds:__stack_chk_guard
		jnz	short loc_688A6C26

loc_688A6C38:				; CODE XREF: sub_688A6AF0+134j
		mov	[esp+6Ch+arg_0], ebx
		add	esp, 5Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		jmp	peer_connection_trynext
; ---------------------------------------------------------------------------

loc_688A6C48:				; CODE XREF: sub_688A6AF0+7Ej
		mov	eax, [esi+2Ch]
		mov	[esp+6Ch+Time],	eax
		call	purple_network_get_my_ip
		mov	ebp, eax
		jmp	loc_688A6B81
; ---------------------------------------------------------------------------
		align 4

loc_688A6C5C:				; CODE XREF: sub_688A6AF0+D0j
		movzx	ebp, word ptr [ebx+0B6h]
		mov	esi, [ebx+0C4h]
		mov	ecx, [ebx+20h]
		inc	ecx
		mov	[ebx+20h], cx
		mov	[esp+6Ch+var_4C], ebp
		mov	[esp+6Ch+var_50], esi
		mov	esi, [ebx+164h]
		mov	[esp+6Ch+var_54], esi
		movzx	ecx, cx
		mov	[esp+6Ch+var_58], ecx
		movzx	eax, ax
		mov	[esp+6Ch+var_5C], eax
		mov	[esp+6Ch+var_60], edx
		mov	eax, [ebx+10h]
		mov	[esp+6Ch+var_64], eax
		add	ebx, 18h
		mov	[esp+6Ch+var_68], ebx
		mov	[esp+6Ch+Time],	edi
		call	aim_im_sendch2_sendfile_requestdirect
		jmp	loc_688A6BC6
; ---------------------------------------------------------------------------

loc_688A6CB0:				; CODE XREF: sub_688A6AF0+C1j
		mov	ecx, [ebx+20h]
		inc	ecx
		mov	[ebx+20h], cx
		movzx	esi, ax
		movzx	ecx, cx
		mov	[esp+6Ch+var_58], ecx
		mov	[esp+6Ch+var_5C], esi
		mov	[esp+6Ch+var_60], edx
		mov	eax, [ebx+10h]
		mov	[esp+6Ch+var_64], eax
		lea	eax, [ebx+18h]
		mov	[esp+6Ch+var_68], eax
		mov	[esp+6Ch+Time],	edi
		call	aim_im_sendch2_odc_requestdirect
		mov	eax, [ebx+10h]
		mov	[esp+6Ch+var_64], eax
		mov	eax, [esp+6Ch+var_30]
		mov	[esp+6Ch+var_68], eax
		mov	[esp+6Ch+Time],	1
		call	purple_conversation_new
		mov	edi, eax
		mov	ebx, [ebx+10h]
		mov	[esp+6Ch+var_68], offset aAskingSToConne ; "Asking %s to connect to us at %s:%hu fo"...
		mov	[esp+6Ch+Time],	offset aPidgin_7 ; "pidgin"
		call	libintl_dgettext
		mov	[esp+6Ch+var_60], esi
		mov	[esp+6Ch+var_64], ebp
		mov	[esp+6Ch+var_68], ebx
		mov	[esp+6Ch+Time],	eax
		call	g_strdup_printf
		mov	ebx, eax
		mov	[esp+6Ch+Time],	0 ; Time
		call	time
		mov	[esp+6Ch+var_5C], eax
		mov	[esp+6Ch+var_60], 4
		mov	[esp+6Ch+var_64], ebx
		mov	[esp+6Ch+var_68], 0
		mov	[esp+6Ch+Time],	edi
		call	purple_conversation_write
		mov	ecx, [esp+6Ch+var_20]
		xor	ecx, ds:__stack_chk_guard
		jnz	loc_688A6C26
		mov	[esp+6Ch+arg_0], ebx
		add	esp, 5Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		jmp	g_free
; ---------------------------------------------------------------------------
		align 4

loc_688A6D78:				; CODE XREF: sub_688A6AF0+F9j
		mov	eax, [esi+2Ch]
		jmp	loc_688A6BF2
; ---------------------------------------------------------------------------

loc_688A6D80:				; CODE XREF: sub_688A6AF0+104j
		mov	ebp, offset aNull_1 ; "(null)"
		jmp	loc_688A6BFA
sub_688A6AF0	endp

; ---------------------------------------------------------------------------
		align 4

; =============== S U B	R O U T	I N E =======================================


sub_688A6D8C	proc near		; DATA XREF: peer_connection_trynext+D2o

var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_10		= dword	ptr -10h
arg_0		= dword	ptr  4

		push	ebx
		sub	esp, 28h
		mov	ebx, [esp+2Ch+arg_0]
		mov	eax, ds:__stack_chk_guard
		mov	[esp+2Ch+var_10], eax
		xor	eax, eax
		mov	[esp+2Ch+var_28], offset aPeerConnection ; "Peer connection timed out after 5 secon"...
		mov	[esp+2Ch+var_2C], offset aOscar_15 ; "oscar"
		call	purple_debug_info
		mov	[esp+2Ch+var_2C], ebx
		call	peer_connection_trynext
		xor	eax, eax
		mov	edx, [esp+2Ch+var_10]
		xor	edx, ds:__stack_chk_guard
		jnz	short loc_688A6DCE
		add	esp, 28h
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_688A6DCE:				; CODE XREF: sub_688A6D8C+3Bj
		call	__stack_chk_fail
; ---------------------------------------------------------------------------
		align 4

loc_688A6DD4:				; CODE XREF: sub_688A6E7C+28j
					; sub_688A6EB0+2Bj
		push	esi
		push	ebx
		sub	esp, 24h
		mov	ebx, eax
		mov	esi, edx
		mov	eax, ds:__stack_chk_guard
		mov	[esp+2Ch+var_10], eax
		xor	eax, eax
		test	ecx, ecx
		jz	short loc_688A6E54
		mov	dword ptr [ebx+44h], 0
		test	esi, esi
		js	short loc_688A6E5F

loc_688A6DF7:				; CODE XREF: sub_688A6D8C+D1j
		mov	eax, [ebx+4Ch]
		mov	[esp+2Ch+var_2C], eax
		call	purple_timeout_remove
		mov	dword ptr [ebx+4Ch], 0
		mov	eax, [ebx+40h]
		test	eax, eax
		jz	short loc_688A6E1F
		mov	[esp+2Ch+var_2C], eax
		call	purple_proxy_connect_cancel
		mov	dword ptr [ebx+40h], 0

loc_688A6E1F:				; CODE XREF: sub_688A6D8C+82j
		mov	eax, [ebx+44h]
		test	eax, eax
		jz	short loc_688A6E35
		mov	[esp+2Ch+var_2C], eax
		call	purple_proxy_connect_cancel
		mov	dword ptr [ebx+44h], 0

loc_688A6E35:				; CODE XREF: sub_688A6D8C+98j
		mov	[ebx+54h], esi
		mov	[esp+2Ch+var_2C], ebx
		call	peer_connection_finalize_connection

loc_688A6E40:				; CODE XREF: sub_688A6D8C+D8j
					; sub_688A6D8C+DFj ...
		mov	eax, [esp+2Ch+var_10]
		xor	eax, ds:__stack_chk_guard
		jnz	short loc_688A6E77
		add	esp, 24h
		pop	ebx
		pop	esi
		retn
; ---------------------------------------------------------------------------
		align 4

loc_688A6E54:				; CODE XREF: sub_688A6D8C+5Ej
		mov	dword ptr [ebx+40h], 0
		test	esi, esi
		jns	short loc_688A6DF7

loc_688A6E5F:				; CODE XREF: sub_688A6D8C+69j
		mov	eax, [ebx+44h]
		test	eax, eax
		jnz	short loc_688A6E40
		mov	eax, [ebx+40h]
		test	eax, eax
		jnz	short loc_688A6E40
		mov	[esp+2Ch+var_2C], ebx
		call	peer_connection_trynext
		jmp	short loc_688A6E40
; ---------------------------------------------------------------------------

loc_688A6E77:				; CODE XREF: sub_688A6D8C+BEj
		call	__stack_chk_fail
sub_688A6D8C	endp


; =============== S U B	R O U T	I N E =======================================


sub_688A6E7C	proc near		; DATA XREF: peer_connection_trynext+280o

var_10		= dword	ptr -10h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		sub	esp, 1Ch
		mov	eax, [esp+1Ch+arg_0]
		mov	edx, [esp+1Ch+arg_4]
		mov	ecx, ds:__stack_chk_guard
		mov	[esp+1Ch+var_10], ecx
		xor	ecx, ecx
		mov	ecx, [esp+1Ch+var_10]
		xor	ecx, ds:__stack_chk_guard
		jnz	short loc_688A6EA9
		xor	ecx, ecx
		add	esp, 1Ch
		jmp	loc_688A6DD4
; ---------------------------------------------------------------------------

loc_688A6EA9:				; CODE XREF: sub_688A6E7C+21j
		call	__stack_chk_fail
sub_688A6E7C	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_688A6EB0	proc near		; DATA XREF: peer_connection_trynext+7Do

var_10		= dword	ptr -10h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		sub	esp, 1Ch
		mov	eax, [esp+1Ch+arg_0]
		mov	edx, [esp+1Ch+arg_4]
		mov	ecx, ds:__stack_chk_guard
		mov	[esp+1Ch+var_10], ecx
		xor	ecx, ecx
		mov	ecx, [esp+1Ch+var_10]
		xor	ecx, ds:__stack_chk_guard
		jnz	short loc_688A6EE0
		mov	ecx, 1
		add	esp, 1Ch
		jmp	loc_688A6DD4
; ---------------------------------------------------------------------------

loc_688A6EE0:				; CODE XREF: sub_688A6EB0+21j
		call	__stack_chk_fail
sub_688A6EB0	endp

; ---------------------------------------------------------------------------
		align 4
; Exported entry 291. peer_connection_listen_cb

; =============== S U B	R O U T	I N E =======================================


		public peer_connection_listen_cb
peer_connection_listen_cb proc near	; DATA XREF: sub_688A6AF0+41o

s		= dword	ptr -3Ch
addr		= dword	ptr -38h
addrlen		= dword	ptr -34h
var_24		= dword	ptr -24h
var_20		= sockaddr ptr -20h
var_10		= dword	ptr -10h
arg_0		= dword	ptr  4

		push	ebx
		sub	esp, 38h
		mov	ebx, [esp+3Ch+arg_0]
		mov	eax, ds:__stack_chk_guard
		mov	[esp+3Ch+var_10], eax
		xor	eax, eax
		mov	[esp+3Ch+var_24], 10h
		mov	[esp+3Ch+addr],	offset aAcceptingConne ; "Accepting connection on listener socket"...
		mov	[esp+3Ch+s], offset aOscar_15 ;	"oscar"
		call	purple_debug_info
		lea	eax, [esp+3Ch+var_24]
		mov	[esp+3Ch+addrlen], eax ; addrlen
		lea	eax, [esp+3Ch+var_20]
		mov	[esp+3Ch+addr],	eax ; addr
		mov	eax, [ebx+50h]
		mov	[esp+3Ch+s], eax ; s
		call	accept
		sub	esp, 0Ch
		mov	[ebx+54h], eax
		test	eax, eax
		js	short loc_688A6F88
		mov	edx, dword ptr [esp+3Ch+var_20.sa_family]
		mov	[esp+3Ch+s], eax
		cmp	dx, 2
		jz	short loc_688A6F68
		cmp	dx, 17h
		jz	short loc_688A6F68
		call	wpurple_close

loc_688A6F54:				; CODE XREF: peer_connection_listen_cb+9Bj
					; peer_connection_listen_cb+A8j ...
		mov	eax, [esp+3Ch+var_10]
		xor	eax, ds:__stack_chk_guard
		jnz	short loc_688A6FA9
		add	esp, 38h
		pop	ebx
		retn
; ---------------------------------------------------------------------------
		align 4

loc_688A6F68:				; CODE XREF: peer_connection_listen_cb+5Fj
					; peer_connection_listen_cb+65j
		call	_purple_network_set_common_socket_flags
		mov	eax, [ebx+84h]
		mov	[esp+3Ch+s], eax
		call	purple_input_remove
		mov	[esp+3Ch+s], ebx
		call	peer_connection_finalize_connection
		jmp	short loc_688A6F54
; ---------------------------------------------------------------------------
		align 4

loc_688A6F88:				; CODE XREF: peer_connection_listen_cb+52j
		call	_errno
		cmp	dword ptr [eax], 0Bh
		jz	short loc_688A6F54
		call	_errno
		cmp	dword ptr [eax], 2733h
		jz	short loc_688A6F54
		mov	[esp+3Ch+s], ebx
		call	peer_connection_trynext
		jmp	short loc_688A6F54
; ---------------------------------------------------------------------------

loc_688A6FA9:				; CODE XREF: peer_connection_listen_cb+76j
		call	__stack_chk_fail
peer_connection_listen_cb endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_688A6FB0	proc near		; CODE XREF: peer_connection_send+78p
					; DATA XREF: peer_connection_send+48o

Time		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_10		= dword	ptr -10h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	ebx
		sub	esp, 28h
		mov	ebx, [esp+2Ch+arg_0]
		mov	eax, ds:__stack_chk_guard
		mov	[esp+2Ch+var_10], eax
		xor	eax, eax
		mov	eax, [ebx+80h]
		mov	[esp+2Ch+Time],	eax
		call	purple_circ_buffer_get_max_read
		test	eax, eax
		jz	loc_688A70A0
		mov	[esp+2Ch+var_20], 0
		mov	[esp+2Ch+var_24], eax
		mov	eax, [ebx+80h]
		mov	eax, [eax+14h]
		mov	[esp+2Ch+var_28], eax
		mov	eax, [ebx+54h]
		mov	[esp+2Ch+Time],	eax
		call	wpurple_send
		cmp	eax, 0
		jle	short loc_688A7038
		mov	[esp+2Ch+var_28], eax
		mov	eax, [ebx+80h]
		mov	[esp+2Ch+Time],	eax
		call	purple_circ_buffer_mark_read
		mov	[esp+2Ch+Time],	0 ; Time
		call	time
		mov	[ebx+2Ch], eax

loc_688A7023:				; CODE XREF: sub_688A6FB0+116j
					; sub_688A6FB0+140j ...
		mov	eax, [esp+2Ch+var_10]
		xor	eax, ds:__stack_chk_guard
		jnz	loc_688A710C
		add	esp, 28h
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_688A7038:				; CODE XREF: sub_688A6FB0+50j
		jnz	loc_688A70E8

loc_688A703E:				; CODE XREF: sub_688A6FB0+151j
		mov	eax, [ebx+24h]
		test	eax, eax
		jz	loc_688A70CC
		mov	eax, [ebx+88h]
		mov	[esp+2Ch+Time],	eax
		call	purple_input_remove
		mov	dword ptr [ebx+88h], 0
		mov	eax, [ebx+54h]
		mov	[esp+2Ch+Time],	eax
		call	wpurple_close
		mov	dword ptr [ebx+54h], 0FFFFFFFFh
		mov	eax, [esp+2Ch+var_10]
		xor	eax, ds:__stack_chk_guard
		jnz	loc_688A710C
		mov	[esp+2Ch+arg_8], 0
		mov	[esp+2Ch+arg_4], 4
		mov	[esp+2Ch+arg_0], ebx
		add	esp, 28h
		pop	ebx
		jmp	peer_connection_schedule_destroy
; ---------------------------------------------------------------------------

loc_688A70A0:				; CODE XREF: sub_688A6FB0+23j
		mov	eax, [ebx+88h]
		mov	[esp+2Ch+Time],	eax
		call	purple_input_remove
		mov	dword ptr [ebx+88h], 0
		mov	eax, [ebx+80h]
		mov	edx, [eax]
		mov	[eax+10h], edx
		mov	[eax+14h], edx
		jmp	loc_688A7023
; ---------------------------------------------------------------------------
		align 4

loc_688A70CC:				; CODE XREF: sub_688A6FB0+93j
		mov	eax, [esp+2Ch+var_10]
		xor	eax, ds:__stack_chk_guard
		jnz	short loc_688A710C
		mov	[esp+2Ch+arg_0], ebx
		add	esp, 28h
		pop	ebx
		jmp	peer_connection_trynext
; ---------------------------------------------------------------------------
		align 4

loc_688A70E8:				; CODE XREF: sub_688A6FB0:loc_688A7038j
		call	_errno
		cmp	dword ptr [eax], 0Bh
		jz	loc_688A7023
		call	_errno
		cmp	dword ptr [eax], 2733h
		jnz	loc_688A703E
		jmp	loc_688A7023
; ---------------------------------------------------------------------------

loc_688A710C:				; CODE XREF: sub_688A6FB0+7Dj
					; sub_688A6FB0+CDj ...
		call	__stack_chk_fail
sub_688A6FB0	endp

; ---------------------------------------------------------------------------
		align 4
; Exported entry 296. peer_connection_send

; =============== S U B	R O U T	I N E =======================================


		public peer_connection_send
peer_connection_send proc near		; CODE XREF: sub_68896D9C+1EBp
					; sub_68897F5C+238p ...

var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_10		= dword	ptr -10h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	ebx
		sub	esp, 28h
		mov	ebx, [esp+2Ch+arg_0]
		mov	eax, [esp+2Ch+arg_4]
		mov	edx, ds:__stack_chk_guard
		mov	[esp+2Ch+var_10], edx
		xor	edx, edx
		mov	edx, [eax+4]
		mov	[esp+2Ch+var_24], edx
		mov	eax, [eax]
		mov	[esp+2Ch+var_28], eax
		mov	eax, [ebx+80h]
		mov	[esp+2Ch+var_2C], eax
		call	purple_circ_buffer_append
		mov	eax, [ebx+88h]
		test	eax, eax
		jnz	short loc_688A7191
		mov	eax, [ebx+54h]
		test	eax, eax
		js	short loc_688A7191
		mov	[esp+2Ch+var_20], ebx
		mov	[esp+2Ch+var_24], offset sub_688A6FB0
		mov	[esp+2Ch+var_28], 2
		mov	[esp+2Ch+var_2C], eax
		call	purple_input_add
		mov	[ebx+88h], eax
		mov	[esp+2Ch+var_24], 0
		mov	eax, [ebx+54h]
		mov	[esp+2Ch+var_28], eax
		mov	[esp+2Ch+var_2C], ebx
		call	sub_688A6FB0

loc_688A7191:				; CODE XREF: peer_connection_send+3Bj
					; peer_connection_send+42j
		mov	eax, [esp+2Ch+var_10]
		xor	eax, ds:__stack_chk_guard
		jnz	short loc_688A71A2
		add	esp, 28h
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_688A71A2:				; CODE XREF: peer_connection_send+87j
		call	__stack_chk_fail
peer_connection_send endp

; ---------------------------------------------------------------------------
		align 4
; Exported entry 293. peer_connection_propose

; =============== S U B	R O U T	I N E =======================================


		public peer_connection_propose
peer_connection_propose	proc near	; CODE XREF: sub_68899D6C+2Fp

var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_20		= dword	ptr -20h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 2Ch
		mov	ebp, [esp+3Ch+arg_0]
		mov	esi, [esp+3Ch+arg_4]
		mov	ebx, [esp+3Ch+arg_8]
		mov	edi, [esp+3Ch+arg_C]
		mov	eax, ds:__stack_chk_guard
		mov	[esp+3Ch+var_20], eax
		xor	eax, eax
		mov	eax, esi
		xor	eax, 4
		or	eax, ebx
		jz	short loc_688A7218

loc_688A71D3:				; CODE XREF: peer_connection_propose+8Ej
					; peer_connection_propose+108j
		mov	[esp+3Ch+var_30], edi
		mov	[esp+3Ch+var_38], esi
		mov	[esp+3Ch+var_34], ebx
		mov	[esp+3Ch+var_3C], ebp
		call	peer_connection_new
		mov	ebx, eax
		or	dword ptr [eax+28h], 3
		lea	eax, [eax+18h]
		mov	[esp+3Ch+var_3C], eax
		call	aim_icbm_makecookie
		mov	eax, [esp+3Ch+var_20]
		xor	eax, ds:__stack_chk_guard
		jnz	loc_688A72CC
		mov	[esp+3Ch+arg_0], ebx
		add	esp, 2Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		jmp	peer_connection_trynext
; ---------------------------------------------------------------------------

loc_688A7218:				; CODE XREF: peer_connection_propose+29j
		mov	[esp+3Ch+var_34], 4
		mov	[esp+3Ch+var_30], 0
		mov	[esp+3Ch+var_38], edi
		mov	[esp+3Ch+var_3C], ebp
		call	peer_connection_find_by_type
		test	eax, eax
		jz	short loc_688A71D3
		mov	edx, [eax+24h]
		test	edx, edx
		jz	short loc_688A7298
		mov	[esp+3Ch+var_34], edi
		mov	[esp+3Ch+var_38], offset aAlreadyHaveADi ; "Already have a direct IM session with %"...
		mov	[esp+3Ch+var_3C], offset aOscar_15 ; "oscar"
		call	purple_debug_info
		mov	eax, [ebp+68h]
		mov	[esp+3Ch+var_3C], eax
		call	purple_connection_get_account
		mov	[esp+3Ch+var_34], eax
		mov	[esp+3Ch+var_38], edi
		mov	[esp+3Ch+var_3C], 1
		call	purple_find_conversation_with_account
		test	eax, eax
		jz	short loc_688A72B8
		mov	edx, [esp+3Ch+var_20]
		xor	edx, ds:__stack_chk_guard
		jnz	short loc_688A72CC
		mov	[esp+3Ch+arg_0], eax
		add	esp, 2Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		jmp	purple_conversation_present
; ---------------------------------------------------------------------------
		align 4

loc_688A7298:				; CODE XREF: peer_connection_propose+95j
		mov	[esp+3Ch+var_34], 0
		mov	[esp+3Ch+var_38], 7
		mov	[esp+3Ch+var_3C], eax
		call	peer_connection_destroy
		jmp	loc_688A71D3
; ---------------------------------------------------------------------------
		align 4

loc_688A72B8:				; CODE XREF: peer_connection_propose+D0j
		mov	edx, [esp+3Ch+var_20]
		xor	edx, ds:__stack_chk_guard
		jnz	short loc_688A72CC
		add	esp, 2Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_688A72CC:				; CODE XREF: peer_connection_propose+5Aj
					; peer_connection_propose+DCj ...
		call	__stack_chk_fail
peer_connection_propose	endp

; ---------------------------------------------------------------------------
		align 4
; Exported entry 290. peer_connection_got_proposition

; =============== S U B	R O U T	I N E =======================================


		public peer_connection_got_proposition
peer_connection_got_proposition	proc near ; CODE XREF: sub_6889F454+106Dp

Str		= dword	ptr -8Ch
var_88		= dword	ptr -88h
var_84		= dword	ptr -84h
var_80		= dword	ptr -80h
var_7C		= dword	ptr -7Ch
var_78		= dword	ptr -78h
var_74		= dword	ptr -74h
var_70		= dword	ptr -70h
var_6C		= dword	ptr -6Ch
var_68		= dword	ptr -68h
var_64		= dword	ptr -64h
var_60		= dword	ptr -60h
var_5C		= dword	ptr -5Ch
var_58		= dword	ptr -58h
var_40		= dword	ptr -40h
var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_20		= dword	ptr -20h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 7Ch
		mov	ebp, [esp+8Ch+arg_0]
		mov	edx, [esp+8Ch+arg_4]
		mov	[esp+8Ch+var_3C], edx
		mov	edx, [esp+8Ch+arg_8]
		mov	[esp+8Ch+var_30], edx
		mov	ebx, [esp+8Ch+arg_C]
		mov	eax, ds:__stack_chk_guard
		mov	[esp+8Ch+var_20], eax
		xor	eax, eax
		mov	eax, [ebp+68h]
		mov	[esp+8Ch+Str], eax
		call	purple_connection_get_account
		mov	[esp+8Ch+var_34], eax
		lea	edi, [ebx+2]
		mov	[esp+8Ch+var_84], edi ;	void *
		mov	edx, [esp+8Ch+var_3C]
		mov	[esp+8Ch+var_88], edx ;	int
		mov	[esp+8Ch+Str], ebp ; int
		call	peer_connection_find_by_cookie
		mov	esi, eax
		mov	ecx, [ebx+10h]
		mov	eax, [ebx+14h]
		test	esi, esi
		jz	short loc_688A7354
		mov	edx, [esi+0Ch]
		xor	edx, eax
		mov	[esp+8Ch+var_38], edx
		mov	edx, [esi+8]
		xor	edx, ecx
		or	edx, [esp+8Ch+var_38]
		jz	loc_688A7650

loc_688A7354:				; CODE XREF: peer_connection_got_proposition+66j
		mov	edx, ecx
		xor	edx, 4
		or	edx, eax
		jz	loc_688A75E4

loc_688A7361:				; CODE XREF: peer_connection_got_proposition+376j
		mov	edx, ecx
		xor	edx, 20h
		or	edx, eax
		jz	loc_688A7410

loc_688A736E:				; CODE XREF: peer_connection_got_proposition+14Fj
		mov	edx, [esp+8Ch+var_3C]
		mov	[esp+8Ch+var_80], edx
		mov	[esp+8Ch+var_88], ecx
		mov	[esp+8Ch+var_84], eax
		mov	[esp+8Ch+Str], ebp
		call	peer_connection_new
		mov	esi, eax
		mov	eax, [ebx+2]
		mov	[esi+18h], eax
		mov	eax, [edi+4]
		mov	[esi+1Ch], eax
		mov	edi, [ebx+28h]
		test	edi, edi
		jnz	loc_688A7468

loc_688A739F:				; CODE XREF: peer_connection_got_proposition+1A5j
		mov	eax, [ebx+1Ch]
		mov	[esp+8Ch+Str], eax
		call	g_strdup
		mov	[esi+90h], eax
		mov	eax, [ebx+20h]
		mov	[esp+8Ch+Str], eax
		call	g_strdup
		mov	[esi+94h], eax
		mov	eax, [ebx+24h]
		mov	[esi+98h], ax
		mov	eax, [ebx+28h]
		or	[esi+9Ch], eax
		inc	word ptr [esi+20h]
		mov	edx, [ebx+10h]
		mov	eax, [ebx+14h]
		mov	ecx, edx
		xor	ecx, 4
		or	ecx, eax
		jz	loc_688A7700
		xor	edx, 20h
		or	edx, eax
		jz	loc_688A7480

loc_688A73F6:				; CODE XREF: peer_connection_got_proposition+1D0j
					; peer_connection_got_proposition+500j
		mov	edx, [esp+8Ch+var_20]
		xor	edx, ds:__stack_chk_guard
		jnz	loc_688A7863
		add	esp, 7Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_688A7410:				; CODE XREF: peer_connection_got_proposition+94j
		mov	esi, [ebx+4Ch]
		test	esi, esi
		jz	short loc_688A7429
		mov	edx, [ebx+48h]
		test	edx, edx
		jz	short loc_688A7429
		cmp	word ptr [ebx+46h], 0
		jnz	loc_688A736E

loc_688A7429:				; CODE XREF: peer_connection_got_proposition+141j
					; peer_connection_got_proposition+148j
		mov	eax, [esp+8Ch+var_20]
		xor	eax, ds:__stack_chk_guard
		jnz	loc_688A7863
		mov	edx, [esp+8Ch+var_3C]
		mov	[esp+8Ch+arg_8], edx
		mov	[esp+8Ch+arg_4], offset	aSTriedToSend_0	; "%s tried to send you	a file with incomp"...
		mov	[esp+8Ch+arg_0], offset	aOscar_15 ; "oscar"
		add	esp, 7Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		jmp	purple_debug_warning
; ---------------------------------------------------------------------------
		align 4

loc_688A7468:				; CODE XREF: peer_connection_got_proposition+C5j
		mov	eax, [ebx+18h]
		mov	[esp+8Ch+Str], eax
		call	g_strdup
		mov	[esi+8Ch], eax
		jmp	loc_688A739F
; ---------------------------------------------------------------------------
		align 10h

loc_688A7480:				; CODE XREF: peer_connection_got_proposition+11Cj
		mov	edx, [esp+8Ch+var_3C]
		mov	[esp+8Ch+var_84], edx
		mov	[esp+8Ch+var_88], 2
		mov	eax, [esp+8Ch+var_34]
		mov	[esp+8Ch+Str], eax
		call	purple_xfer_new
		mov	[esi+0A4h], eax
		test	eax, eax
		jz	loc_688A73F6
		mov	[eax+7Ch], esi
		mov	[esp+8Ch+Str], eax
		call	purple_xfer_ref
		mov	eax, [ebx+48h]
		mov	[esp+8Ch+var_88], eax
		mov	eax, [esi+0A4h]
		mov	[esp+8Ch+Str], eax
		call	purple_xfer_set_size
		mov	[esp+8Ch+var_84], 0
		mov	[esp+8Ch+var_88], 0FFFFFFFFh
		mov	eax, [ebx+4Ch]
		mov	[esp+8Ch+Str], eax
		call	g_utf8_validate
		test	eax, eax
		mov	eax, [ebx+4Ch]
		mov	[esp+8Ch+Str], eax
		jnz	loc_688A77DC
		call	purple_utf8_salvage
		mov	edi, eax

loc_688A74FA:				; CODE XREF: peer_connection_got_proposition+50Fj
		cmp	word ptr [ebx+44h], 2
		jz	loc_688A7800

loc_688A7505:				; CODE XREF: peer_connection_got_proposition+53Ej
					; peer_connection_got_proposition+548j	...
		mov	[esp+8Ch+var_88], edi
		mov	eax, [esi+0A4h]
		mov	[esp+8Ch+Str], eax
		call	purple_xfer_set_filename
		mov	[esp+8Ch+Str], edi
		call	g_free
		mov	ecx, [esp+8Ch+var_30]
		test	ecx, ecx
		jz	short loc_688A754B
		mov	[esp+8Ch+var_84], 0Dh
		mov	[esp+8Ch+var_88], offset aIcq_cool_ft ;	"<ICQ_COOL_FT>"
		mov	edx, [esp+8Ch+var_30]
		mov	[esp+8Ch+Str], edx
		call	g_ascii_strncasecmp
		test	eax, eax
		jnz	loc_688A782C

loc_688A754B:				; CODE XREF: peer_connection_got_proposition+251j
					; peer_connection_got_proposition+56Ej	...
		mov	[esp+8Ch+var_88], offset peer_oft_recvcb_init
		mov	eax, [esi+0A4h]
		mov	[esp+8Ch+Str], eax
		call	purple_xfer_set_init_fnc
		mov	[esp+8Ch+var_88], offset peer_oft_recvcb_end
		mov	eax, [esi+0A4h]
		mov	[esp+8Ch+Str], eax
		call	purple_xfer_set_end_fnc
		mov	[esp+8Ch+var_88], offset peer_oft_cb_generic_cancel
		mov	eax, [esi+0A4h]
		mov	[esp+8Ch+Str], eax
		call	purple_xfer_set_request_denied_fnc
		mov	[esp+8Ch+var_88], offset peer_oft_cb_generic_cancel
		mov	eax, [esi+0A4h]
		mov	[esp+8Ch+Str], eax
		call	purple_xfer_set_cancel_recv_fnc
		mov	[esp+8Ch+var_88], offset peer_oft_recvcb_ack_recv
		mov	eax, [esi+0A4h]
		mov	[esp+8Ch+Str], eax
		call	purple_xfer_set_ack_fnc
		mov	eax, [esp+8Ch+var_20]
		xor	eax, ds:__stack_chk_guard
		jnz	loc_688A7863
		mov	eax, [esi+0A4h]
		mov	[esp+8Ch+arg_0], eax
		add	esp, 7Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		jmp	purple_xfer_request
; ---------------------------------------------------------------------------
		align 4

loc_688A75E4:				; CODE XREF: peer_connection_got_proposition+87j
		mov	[esp+8Ch+var_84], 4
		mov	[esp+8Ch+var_80], 0
		mov	edx, [esp+8Ch+var_3C]
		mov	[esp+8Ch+var_88], edx
		mov	[esp+8Ch+Str], ebp
		call	peer_connection_find_by_type
		test	eax, eax
		jz	short loc_688A7644
		mov	edx, [esp+8Ch+var_3C]
		mov	[esp+8Ch+var_84], edx
		mov	[esp+8Ch+var_88], offset aReceivedNewDir ; "Received new direct	IM request from	%s."...
		mov	[esp+8Ch+Str], offset aOscar_15	; "oscar"
		mov	[esp+8Ch+var_40], eax
		call	purple_debug_info
		mov	[esp+8Ch+var_84], 0
		mov	[esp+8Ch+var_88], 2
		mov	eax, [esp+8Ch+var_40]
		mov	[esp+8Ch+Str], eax
		call	peer_connection_destroy

loc_688A7644:				; CODE XREF: peer_connection_got_proposition+332j
		mov	ecx, [ebx+10h]
		mov	eax, [ebx+14h]
		jmp	loc_688A7361
; ---------------------------------------------------------------------------
		align 10h

loc_688A7650:				; CODE XREF: peer_connection_got_proposition+7Aj
		mov	[esp+8Ch+var_88], offset aRemoteUserWant ; "Remote user	wants to try a different co"...
		mov	[esp+8Ch+Str], offset aOscar_15	; "oscar"
		call	purple_debug_info
		mov	eax, [esi+8Ch]
		mov	[esp+8Ch+Str], eax
		call	g_free
		mov	eax, [esi+90h]
		mov	[esp+8Ch+Str], eax
		call	g_free
		mov	eax, [esi+94h]
		mov	[esp+8Ch+Str], eax
		call	g_free
		mov	edi, [ebx+28h]
		test	edi, edi
		jnz	loc_688A77E8
		mov	dword ptr [esi+8Ch], 0

loc_688A76A3:				; CODE XREF: peer_connection_got_proposition+525j
		mov	eax, [ebx+20h]
		mov	[esp+8Ch+Str], eax
		call	g_strdup
		mov	[esi+94h], eax
		mov	eax, [ebx+1Ch]
		mov	[esp+8Ch+Str], eax
		call	g_strdup
		mov	[esi+90h], eax
		mov	eax, [ebx+24h]
		mov	[esi+98h], ax
		mov	eax, [ebx+28h]
		or	[esi+9Ch], eax
		inc	word ptr [esi+20h]
		mov	eax, [esp+8Ch+var_20]
		xor	eax, ds:__stack_chk_guard
		jnz	loc_688A7863
		mov	[esp+8Ch+arg_0], esi
		add	esp, 7Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		jmp	peer_connection_trynext
; ---------------------------------------------------------------------------
		align 10h

loc_688A7700:				; CODE XREF: peer_connection_got_proposition+111j
		mov	eax, [esp+8Ch+var_34]
		mov	[esp+8Ch+Str], eax
		call	purple_account_get_username
		mov	ebx, eax
		mov	[esp+8Ch+var_88], offset aSHasJustAskedT ; "%s has just	asked to directly connect t"...
		mov	[esp+8Ch+Str], offset aPidgin_7	; "pidgin"
		call	libintl_dgettext
		mov	[esp+8Ch+var_84], ebx
		mov	edx, [esp+8Ch+var_3C]
		mov	[esp+8Ch+var_88], edx
		mov	[esp+8Ch+Str], eax
		call	g_strdup_printf
		mov	ebx, eax
		mov	[esp+8Ch+var_88], offset aCancel_0 ; "Cancel"
		mov	[esp+8Ch+Str], offset aPidgin_7	; "pidgin"
		call	libintl_dgettext
		mov	ebp, eax
		mov	[esp+8Ch+var_88], offset aC_onnect_0 ; "C_onnect"
		mov	[esp+8Ch+Str], offset aPidgin_7	; "pidgin"
		call	libintl_dgettext
		mov	edi, eax
		mov	[esp+8Ch+var_88], offset aThisRequiresAD ; "This requires a direct connection betwe"...
		mov	[esp+8Ch+Str], offset aPidgin_7	; "pidgin"
		call	libintl_dgettext
		mov	[esp+8Ch+var_58], offset sub_688A634C
		mov	[esp+8Ch+var_5C], ebp
		mov	[esp+8Ch+var_60], offset sub_688A6ABC
		mov	[esp+8Ch+var_64], edi
		mov	[esp+8Ch+var_68], 2
		mov	[esp+8Ch+var_6C], esi
		mov	[esp+8Ch+var_70], 0
		mov	edx, [esp+8Ch+var_3C]
		mov	[esp+8Ch+var_74], edx
		mov	edx, [esp+8Ch+var_34]
		mov	[esp+8Ch+var_78], edx
		mov	[esp+8Ch+var_7C], 0FFFFFFFFh
		mov	[esp+8Ch+var_80], eax
		mov	[esp+8Ch+var_84], ebx
		mov	[esp+8Ch+var_88], 0
		mov	[esp+8Ch+Str], esi
		call	purple_request_action
		jmp	loc_688A73F6
; ---------------------------------------------------------------------------
		align 4

loc_688A77DC:				; CODE XREF: peer_connection_got_proposition+219j
		call	g_strdup
		mov	edi, eax
		jmp	loc_688A74FA
; ---------------------------------------------------------------------------

loc_688A77E8:				; CODE XREF: peer_connection_got_proposition+3BFj
		mov	eax, [ebx+18h]
		mov	[esp+8Ch+Str], eax
		call	g_strdup
		mov	[esi+8Ch], eax
		jmp	loc_688A76A3
; ---------------------------------------------------------------------------
		align 10h

loc_688A7800:				; CODE XREF: peer_connection_got_proposition+22Bj
		mov	[esp+8Ch+var_88], 5Ch ;	Ch
		mov	[esp+8Ch+Str], edi ; Str
		call	strrchr
		test	eax, eax
		jz	loc_688A7505
		cmp	byte ptr [eax+1], 2Ah
		jnz	loc_688A7505
		mov	byte ptr [eax],	0
		jmp	loc_688A7505
; ---------------------------------------------------------------------------
		align 4

loc_688A782C:				; CODE XREF: peer_connection_got_proposition+271j
		mov	[esp+8Ch+var_88], offset aHtml_1 ; "<HTML>"
		mov	edx, [esp+8Ch+var_30]
		mov	[esp+8Ch+Str], edx
		call	g_ascii_strcasecmp
		test	eax, eax
		jz	loc_688A754B
		mov	edx, [esp+8Ch+var_30]
		mov	[esp+8Ch+var_88], edx
		mov	eax, [esi+0A4h]
		mov	[esp+8Ch+Str], eax
		call	purple_xfer_set_message
		jmp	loc_688A754B
; ---------------------------------------------------------------------------

loc_688A7863:				; CODE XREF: peer_connection_got_proposition+12Cj
					; peer_connection_got_proposition+15Fj	...
		call	__stack_chk_fail
peer_connection_got_proposition	endp


; =============== S U B	R O U T	I N E =======================================


sub_688A7868	proc near		; CODE XREF: peer_proxy_connection_established_cb+13Ep

var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_2C		= byte ptr -2Ch
var_20		= dword	ptr -20h

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 3Ch
		mov	ebp, eax
		mov	ebx, edx
		mov	eax, ds:__stack_chk_guard
		mov	[esp+4Ch+var_20], eax
		xor	eax, eax
		mov	eax, [edx+10h]
		mov	[esp+4Ch+var_38], eax
		movzx	eax, word ptr [edx+8]
		mov	[esp+4Ch+var_3C], eax
		mov	eax, [edx+4]
		mov	[esp+4Ch+var_40], eax
		movzx	eax, word ptr [edx+2]
		mov	[esp+4Ch+var_44], eax
		mov	[esp+4Ch+var_48], offset aOutgoingPeerPr ; "Outgoing peer proxy	frame with type=0x%"...
		mov	[esp+4Ch+var_4C], offset aOscar_16 ; "oscar"
		call	purple_debug_info
		mov	edi, [ebx+10h]
		add	edi, 0Ch
		mov	[esp+4Ch+var_48], edi
		lea	esi, [esp+4Ch+var_2C]
		mov	[esp+4Ch+var_4C], esi
		call	sub_68881748
		sub	edi, 2
		movzx	edi, di
		mov	[esp+4Ch+var_48], edi
		mov	[esp+4Ch+var_4C], esi
		call	sub_68881E0C
		mov	[esp+4Ch+var_48], 44Ah
		mov	[esp+4Ch+var_4C], esi
		call	sub_68881E0C
		movzx	eax, word ptr [ebx+2]
		mov	[esp+4Ch+var_48], eax
		mov	[esp+4Ch+var_4C], esi
		call	sub_68881E0C
		mov	eax, [ebx+4]
		mov	[esp+4Ch+var_48], eax
		mov	[esp+4Ch+var_4C], esi
		call	sub_68881E8C
		movzx	eax, word ptr [ebx+8]
		mov	[esp+4Ch+var_48], eax
		mov	[esp+4Ch+var_4C], esi
		call	sub_68881E0C
		mov	eax, [ebx+10h]
		mov	[esp+4Ch+var_44], eax
		mov	eax, [ebx+0Ch]
		mov	[esp+4Ch+var_48], eax
		mov	[esp+4Ch+var_4C], esi
		call	sub_688820A0
		mov	[esp+4Ch+var_48], esi
		mov	[esp+4Ch+var_4C], ebp
		call	peer_connection_send
		mov	[esp+4Ch+var_4C], esi
		call	sub_688817E4
		mov	eax, [esp+4Ch+var_20]
		xor	eax, ds:__stack_chk_guard
		jnz	short loc_688A7955
		add	esp, 3Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_688A7955:				; CODE XREF: sub_688A7868+E3j
		call	__stack_chk_fail
sub_688A7868	endp

; ---------------------------------------------------------------------------
		align 4

; =============== S U B	R O U T	I N E =======================================


sub_688A795C	proc near		; DATA XREF: peer_proxy_connection_established_cb+31o

Time		= dword	ptr -6Ch
var_68		= dword	ptr -68h
var_64		= dword	ptr -64h
var_60		= dword	ptr -60h
var_5C		= dword	ptr -5Ch
var_58		= dword	ptr -58h
var_54		= dword	ptr -54h
var_50		= dword	ptr -50h
var_4C		= dword	ptr -4Ch
var_34		= dword	ptr -34h
var_2E		= word ptr -2Eh
var_24		= byte ptr -24h
var_20		= dword	ptr -20h
arg_0		= dword	ptr  4

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 5Ch
		mov	ebx, [esp+6Ch+arg_0]
		mov	eax, ds:__stack_chk_guard
		mov	[esp+6Ch+var_20], eax
		xor	eax, eax
		mov	ebp, [ebx+3Ch]
		test	ebp, ebp
		jz	loc_688A7B54
		mov	ecx, [ebp+10h]

loc_688A7980:				; CODE XREF: sub_688A795C+464j
		mov	eax, [ebp+14h]
		cmp	eax, ecx
		jz	short loc_688A79B9
		mov	[esp+6Ch+var_60], 0
		sub	ecx, eax
		mov	[esp+6Ch+var_64], ecx
		add	eax, [ebp+0Ch]
		mov	[esp+6Ch+var_68], eax
		mov	eax, [ebx+54h]
		mov	[esp+6Ch+Time],	eax
		call	wpurple_recv
		cmp	eax, 0
		jz	loc_688A7B18
		jl	loc_688A7A84
		add	[ebp+14h], eax

loc_688A79B9:				; CODE XREF: sub_688A795C+29j
		mov	[esp+6Ch+Time],	0 ; Time
		call	time
		mov	[ebx+2Ch], eax
		mov	eax, [ebp+10h]
		cmp	[ebp+14h], eax
		jnb	short loc_688A79E8

loc_688A79D0:				; CODE XREF: sub_688A795C+120j
					; sub_688A795C+130j ...
		mov	eax, [esp+6Ch+var_20]
		xor	eax, ds:__stack_chk_guard
		jnz	loc_688A7E1C
		add	esp, 5Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_688A79E8:				; CODE XREF: sub_688A795C+72j
		mov	dword ptr [ebx+3Ch], 0
		lea	esi, [ebp+0Ch]
		mov	[esp+6Ch+Time],	esi
		call	sub_688818CC
		mov	eax, [ebp+10h]
		mov	[esp+6Ch+var_58], eax
		movzx	eax, word ptr [ebp+8]
		mov	[esp+6Ch+var_5C], eax
		mov	eax, [ebp+4]
		mov	[esp+6Ch+var_60], eax
		movzx	eax, word ptr [ebp+2]
		mov	[esp+6Ch+var_64], eax
		mov	[esp+6Ch+var_68], offset aIncomingPeerPr ; "Incoming peer proxy	frame with type=0x%"...
		mov	[esp+6Ch+Time],	offset aOscar_16 ; "oscar"
		call	purple_debug_info
		movzx	eax, word ptr [ebp+2]
		cmp	ax, 3
		jz	loc_688A7C50
		cmp	ax, 5
		jz	loc_688A7CF4
		cmp	ax, 1
		jz	short loc_688A7AB0
		mov	[esp+6Ch+var_64], eax
		mov	[esp+6Ch+var_68], offset aUnknownPeerPro ; "Unknown peer proxy frame type 0x%04hx.\"...
		mov	[esp+6Ch+Time],	offset aOscar_16 ; "oscar"
		call	purple_debug_warning

loc_688A7A62:				; CODE XREF: sub_688A795C+1B7j
					; sub_688A795C+336j ...
		mov	eax, [ebp+0Ch]
		mov	[esp+6Ch+Time],	eax
		call	g_free
		mov	[esp+6Ch+Time],	ebp
		call	g_free
		mov	dword ptr [ebx+70h], 0
		jmp	loc_688A79D0
; ---------------------------------------------------------------------------
		align 4

loc_688A7A84:				; CODE XREF: sub_688A795C+54j
		call	_errno
		cmp	dword ptr [eax], 0Bh
		jz	loc_688A79D0
		call	_errno
		cmp	dword ptr [eax], 2733h
		jz	loc_688A79D0
		mov	[esp+6Ch+var_68], offset aLostConnecti_1 ; "Lost connection with peer proxy server\"...
		jmp	short loc_688A7B20
; ---------------------------------------------------------------------------
		align 10h

loc_688A7AB0:				; CODE XREF: sub_688A795C+ECj
		mov	[esp+6Ch+Time],	esi
		call	sub_68881818
		cmp	eax, 1
		jbe	loc_688A7BF4
		mov	[esp+6Ch+Time],	esi
		call	sub_688819F0
		cmp	ax, 0Dh
		jz	loc_688A7D40
		cmp	ax, 10h
		jz	loc_688A7D4A
		cmp	ax, 1Ah
		jz	loc_688A7DC5
		mov	ecx, offset aUnknownReason ; "unknown reason"

loc_688A7AEC:				; CODE XREF: sub_688A795C+3E9j
					; sub_688A795C+3F3j ...
		mov	[esp+6Ch+var_60], ecx
		movzx	eax, ax
		mov	[esp+6Ch+var_64], eax
		mov	[esp+6Ch+var_68], offset aProxyNegotiati ; "Proxy negotiation failed with error	0x%"...
		mov	[esp+6Ch+Time],	offset aOscar_16 ; "oscar"
		call	purple_debug_info

loc_688A7B0B:				; CODE XREF: sub_688A795C+2ACj
		mov	[esp+6Ch+Time],	ebx
		call	peer_connection_trynext
		jmp	loc_688A7A62
; ---------------------------------------------------------------------------

loc_688A7B18:				; CODE XREF: sub_688A795C+4Ej
		mov	[esp+6Ch+var_68], offset aPeerProxyServe ; "Peer proxy server closed connection\n"

loc_688A7B20:				; CODE XREF: sub_688A795C+14Fj
		mov	[esp+6Ch+Time],	offset aOscar_16 ; "oscar"
		call	purple_debug_info
		mov	eax, [ebp+0Ch]
		mov	[esp+6Ch+Time],	eax
		call	g_free
		mov	[esp+6Ch+Time],	ebp
		call	g_free
		mov	dword ptr [ebx+3Ch], 0
		mov	[esp+6Ch+Time],	ebx
		call	peer_connection_trynext
		jmp	loc_688A79D0
; ---------------------------------------------------------------------------
		align 4

loc_688A7B54:				; CODE XREF: sub_688A795C+1Bj
		mov	edx, [ebx+70h]
		mov	[esp+6Ch+var_60], 0
		mov	eax, 0Ch
		sub	eax, edx
		mov	[esp+6Ch+var_64], eax
		lea	eax, [ebx+edx+64h]
		mov	[esp+6Ch+var_68], eax
		mov	eax, [ebx+54h]
		mov	[esp+6Ch+Time],	eax
		call	wpurple_recv
		mov	esi, eax
		cmp	eax, 0
		jz	loc_688A7D1C
		jl	loc_688A7C10
		mov	[esp+6Ch+Time],	0 ; Time
		call	time
		mov	[ebx+2Ch], eax
		add	esi, [ebx+70h]
		mov	[ebx+70h], esi
		cmp	esi, 0Bh
		jle	loc_688A79D0
		movzx	eax, byte ptr [ebx+66h]
		shl	eax, 8
		movzx	edx, byte ptr [ebx+67h]
		add	eax, edx
		cmp	eax, 44Ah
		jz	loc_688A7D54
		mov	[esp+6Ch+var_60], eax
		mov	[esp+6Ch+var_64], 44Ah
		mov	[esp+6Ch+var_68], offset aExpectedPeerPr ; "Expected peer proxy	protocol version %u"...
		mov	[esp+6Ch+Time],	offset aOscar_16 ; "oscar"
		call	purple_debug_warning
		mov	[esp+6Ch+Time],	ebx
		call	peer_connection_trynext
		jmp	loc_688A79D0
; ---------------------------------------------------------------------------
		align 4

loc_688A7BF4:				; CODE XREF: sub_688A795C+15Fj
		mov	[esp+6Ch+var_68], offset aProxyNegotia_0 ; "Proxy negotiation failed with an unknow"...
		mov	[esp+6Ch+Time],	offset aOscar_16 ; "oscar"
		call	purple_debug_warning
		jmp	loc_688A7B0B
; ---------------------------------------------------------------------------
		align 10h

loc_688A7C10:				; CODE XREF: sub_688A795C+22Cj
		call	_errno
		cmp	dword ptr [eax], 0Bh
		jz	loc_688A79D0
		call	_errno
		cmp	dword ptr [eax], 2733h
		jz	loc_688A79D0
		mov	[esp+6Ch+var_68], offset aLostConnecti_1 ; "Lost connection with peer proxy server\"...
		mov	[esp+6Ch+Time],	offset aOscar_16 ; "oscar"
		call	purple_debug_info
		mov	[esp+6Ch+Time],	ebx
		call	peer_connection_trynext
		jmp	loc_688A79D0
; ---------------------------------------------------------------------------

loc_688A7C50:				; CODE XREF: sub_688A795C+D8j
		mov	[esp+6Ch+Time],	esi
		call	sub_688819F0
		mov	[esp+6Ch+var_2E], ax
		lea	edi, [esp+6Ch+var_24]
		lea	eax, [esp+6Ch+var_20]
		mov	[esp+6Ch+var_34], eax

loc_688A7C69:				; CODE XREF: sub_688A795C+31Cj
		mov	[esp+6Ch+Time],	esi
		call	sub_68881990
		mov	[edi], al
		inc	edi
		cmp	edi, [esp+6Ch+var_34]
		jnz	short loc_688A7C69
		mov	ecx, [ebx+8]
		mov	eax, [ebx+0Ch]
		mov	esi, ecx
		xor	esi, 4
		or	esi, eax
		jz	loc_688A7DCF
		xor	ecx, 20h
		or	ecx, eax
		jnz	loc_688A7A62
		movzx	edi, word ptr [ebx+0B6h]
		mov	esi, [ebx+0C4h]
		mov	ecx, [ebx+164h]
		mov	eax, [ebx+20h]
		inc	eax
		mov	[ebx+20h], ax
		mov	[esp+6Ch+var_4C], edi
		mov	[esp+6Ch+var_50], esi
		mov	[esp+6Ch+var_54], ecx
		movzx	eax, ax
		mov	[esp+6Ch+var_58], eax
		movzx	eax, [esp+6Ch+var_2E]
		mov	[esp+6Ch+var_5C], eax
		lea	eax, [esp+6Ch+var_24]
		mov	[esp+6Ch+var_60], eax
		mov	eax, [ebx+10h]
		mov	[esp+6Ch+var_64], eax
		lea	eax, [ebx+18h]
		mov	[esp+6Ch+var_68], eax
		mov	eax, [ebx]
		mov	[esp+6Ch+Time],	eax
		call	aim_im_sendch2_sendfile_requestproxy
		jmp	loc_688A7A62
; ---------------------------------------------------------------------------

loc_688A7CF4:				; CODE XREF: sub_688A795C+E2j
		mov	eax, [ebx+84h]
		mov	[esp+6Ch+Time],	eax
		call	purple_input_remove
		mov	dword ptr [ebx+84h], 0
		mov	[esp+6Ch+Time],	ebx
		call	peer_connection_finalize_connection
		jmp	loc_688A7A62
; ---------------------------------------------------------------------------
		align 4

loc_688A7D1C:				; CODE XREF: sub_688A795C+226j
		mov	[esp+6Ch+var_68], offset aPeerProxyServe ; "Peer proxy server closed connection\n"
		mov	[esp+6Ch+Time],	offset aOscar_16 ; "oscar"
		call	purple_debug_info
		mov	[esp+6Ch+Time],	ebx
		call	peer_connection_trynext
		jmp	loc_688A79D0
; ---------------------------------------------------------------------------
		align 10h

loc_688A7D40:				; CODE XREF: sub_688A795C+171j
		mov	ecx, offset aBadRequest	; "bad request"
		jmp	loc_688A7AEC
; ---------------------------------------------------------------------------

loc_688A7D4A:				; CODE XREF: sub_688A795C+17Bj
		mov	ecx, offset aInitialRequest ; "initial request timed out"
		jmp	loc_688A7AEC
; ---------------------------------------------------------------------------

loc_688A7D54:				; CODE XREF: sub_688A795C+262j
		mov	[esp+6Ch+Time],	18h
		call	g_malloc0
		mov	ebp, eax
		movzx	ecx, byte ptr [ebx+65h]
		movzx	eax, byte ptr [ebx+64h]
		shl	eax, 8
		lea	ecx, [ecx+eax-0Ah]
		mov	[ebp+10h], ecx
		movzx	eax, byte ptr [ebx+66h]
		shl	eax, 8
		movzx	esi, byte ptr [ebx+67h]
		add	eax, esi
		mov	[ebp+0], ax
		movzx	eax, byte ptr [ebx+68h]
		shl	eax, 8
		movzx	esi, byte ptr [ebx+69h]
		add	eax, esi
		mov	[ebp+2], ax
		movzx	eax, byte ptr [ebx+6Ah]
		shl	eax, 8
		movzx	esi, byte ptr [ebx+6Bh]
		add	eax, esi
		mov	[ebp+4], eax
		movzx	eax, byte ptr [ebx+6Eh]
		shl	eax, 8
		movzx	esi, byte ptr [ebx+6Fh]
		add	eax, esi
		mov	[ebp+8], ax
		test	ecx, ecx
		jnz	short loc_688A7E0C
		xor	ecx, ecx

loc_688A7DBD:				; CODE XREF: sub_688A795C+4BEj
		mov	[ebx+3Ch], ebp
		jmp	loc_688A7980
; ---------------------------------------------------------------------------

loc_688A7DC5:				; CODE XREF: sub_688A795C+185j
		mov	ecx, offset aAcceptPeriodTi ; "accept period timed out"
		jmp	loc_688A7AEC
; ---------------------------------------------------------------------------

loc_688A7DCF:				; CODE XREF: sub_688A795C+32Bj
		mov	eax, [ebx+20h]
		inc	eax
		mov	[ebx+20h], ax
		movzx	eax, ax
		mov	[esp+6Ch+var_58], eax
		movzx	eax, [esp+6Ch+var_2E]
		mov	[esp+6Ch+var_5C], eax
		lea	eax, [esp+6Ch+var_24]
		mov	[esp+6Ch+var_60], eax
		mov	eax, [ebx+10h]
		mov	[esp+6Ch+var_64], eax
		lea	eax, [ebx+18h]
		mov	[esp+6Ch+var_68], eax
		mov	eax, [ebx]
		mov	[esp+6Ch+Time],	eax
		call	aim_im_sendch2_odc_requestproxy
		jmp	loc_688A7A62
; ---------------------------------------------------------------------------

loc_688A7E0C:				; CODE XREF: sub_688A795C+45Dj
		mov	[esp+6Ch+Time],	ecx
		call	g_malloc
		mov	[ebp+0Ch], eax
		mov	ecx, [ebp+10h]
		jmp	short loc_688A7DBD
; ---------------------------------------------------------------------------

loc_688A7E1C:				; CODE XREF: sub_688A795C+7Ej
		call	__stack_chk_fail
sub_688A795C	endp

; ---------------------------------------------------------------------------
		align 4
; Exported entry 313. peer_proxy_connection_established_cb

; =============== S U B	R O U T	I N E =======================================


		public peer_proxy_connection_established_cb
peer_proxy_connection_established_cb proc near ; DATA XREF: peer_connection_trynext+157o

var_5C		= dword	ptr -5Ch
var_58		= dword	ptr -58h
var_54		= dword	ptr -54h
var_50		= dword	ptr -50h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_38		= byte ptr -38h
var_36		= word ptr -36h
var_2C		= byte ptr -2Ch
var_20		= dword	ptr -20h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 4Ch
		mov	ebx, [esp+5Ch+arg_0]
		mov	eax, [esp+5Ch+arg_4]
		mov	edx, ds:__stack_chk_guard
		mov	[esp+5Ch+var_20], edx
		xor	edx, edx
		mov	dword ptr [ebx+44h], 0
		test	eax, eax
		js	loc_688A7F88
		mov	[ebx+54h], eax
		mov	[esp+5Ch+var_50], ebx
		mov	[esp+5Ch+var_54], offset sub_688A795C
		mov	[esp+5Ch+var_58], 1
		mov	[esp+5Ch+var_5C], eax
		call	purple_input_add
		mov	[ebx+84h], eax
		mov	eax, [ebx+8Ch]
		test	eax, eax
		jz	loc_688A7F94
		movzx	ebp, word ptr [ebx+98h]
		mov	[esp+5Ch+var_40], ebp
		lea	edx, [esp+5Ch+var_38]
		xor	esi, esi
		mov	ecx, 18h
		mov	edi, edx
		mov	eax, esi
		rep stosb
		mov	[esp+5Ch+var_36], 4
		mov	eax, [ebx]
		mov	eax, [eax+68h]
		mov	[esp+5Ch+var_5C], eax
		mov	[esp+5Ch+var_44], edx
		call	purple_connection_get_account
		mov	[esp+5Ch+var_5C], eax
		call	purple_account_get_username
		mov	ebp, eax
		mov	ecx, 0FFFFFFFFh
		mov	edi, eax
		mov	eax, esi
		repne scasb
		not	ecx
		dec	ecx
		movzx	edi, cl
		lea	eax, [edi+1Fh]
		mov	[esp+5Ch+var_58], eax
		lea	esi, [esp+5Ch+var_2C]
		mov	[esp+5Ch+var_5C], esi
		call	sub_68881748
		mov	[esp+5Ch+var_58], edi
		mov	[esp+5Ch+var_5C], esi
		call	sub_68881DA4
		mov	[esp+5Ch+var_54], edi
		mov	[esp+5Ch+var_58], ebp
		mov	[esp+5Ch+var_5C], esi
		call	sub_688820A0
		mov	ebp, [esp+5Ch+var_40]
		mov	[esp+5Ch+var_58], ebp
		mov	[esp+5Ch+var_5C], esi
		call	sub_68881E0C

loc_688A7F0F:				; CODE XREF: peer_proxy_connection_established_cb+1EEj
		mov	[esp+5Ch+var_54], 8
		lea	eax, [ebx+18h]
		mov	[esp+5Ch+var_58], eax
		mov	[esp+5Ch+var_5C], esi
		call	sub_688820A0
		mov	[esp+5Ch+var_58], 1
		mov	[esp+5Ch+var_5C], esi
		call	sub_68881E0C
		mov	[esp+5Ch+var_58], 10h
		mov	[esp+5Ch+var_5C], esi
		call	sub_68881E0C
		mov	edi, [ebx+8]
		mov	ebp, [ebx+0Ch]
		mov	[esp+5Ch+var_58], edi
		mov	[esp+5Ch+var_54], ebp
		mov	[esp+5Ch+var_5C], esi
		call	sub_688918E0
		mov	edx, [esp+5Ch+var_44]
		mov	eax, ebx
		call	sub_688A7868
		mov	[esp+5Ch+var_5C], esi
		call	sub_688817E4

loc_688A7F6F:				; CODE XREF: peer_proxy_connection_established_cb+16Cj
		mov	ebp, [esp+5Ch+var_20]
		xor	ebp, ds:__stack_chk_guard
		jnz	loc_688A8017
		add	esp, 4Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 4

loc_688A7F88:				; CODE XREF: peer_proxy_connection_established_cb+24j
		mov	[esp+5Ch+var_5C], ebx
		call	peer_connection_trynext
		jmp	short loc_688A7F6F
; ---------------------------------------------------------------------------
		align 4

loc_688A7F94:				; CODE XREF: peer_proxy_connection_established_cb+57j
		lea	edx, [esp+5Ch+var_38]
		xor	esi, esi
		mov	ecx, 18h
		mov	edi, edx
		mov	eax, esi
		rep stosb
		mov	[esp+5Ch+var_36], 2
		mov	eax, [ebx]
		mov	eax, [eax+68h]
		mov	[esp+5Ch+var_5C], eax
		mov	[esp+5Ch+var_44], edx
		call	purple_connection_get_account
		mov	[esp+5Ch+var_5C], eax
		call	purple_account_get_username
		mov	[esp+5Ch+var_40], eax
		mov	ecx, 0FFFFFFFFh
		mov	edi, eax
		mov	eax, esi
		repne scasb
		not	ecx
		lea	ebp, [ecx-1]
		and	ebp, 0FFh
		lea	eax, [ebp+1Dh]
		mov	[esp+5Ch+var_58], eax
		lea	esi, [esp+5Ch+var_2C]
		mov	[esp+5Ch+var_5C], esi
		call	sub_68881748
		mov	[esp+5Ch+var_58], ebp
		mov	[esp+5Ch+var_5C], esi
		call	sub_68881DA4
		mov	[esp+5Ch+var_54], ebp
		mov	edi, [esp+5Ch+var_40]
		mov	[esp+5Ch+var_58], edi
		mov	[esp+5Ch+var_5C], esi
		call	sub_688820A0
		jmp	loc_688A7F0F
; ---------------------------------------------------------------------------

loc_688A8017:				; CODE XREF: peer_proxy_connection_established_cb+155j
		call	__stack_chk_fail
peer_proxy_connection_established_cb endp

; Exported entry   4. aim__findmodulebygroup

; =============== S U B	R O U T	I N E =======================================


		public aim__findmodulebygroup
aim__findmodulebygroup proc near	; CODE XREF: aim_srv_clientready+4Bp
					; aim_srv_setversions+4Ap

var_10		= dword	ptr -10h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		sub	esp, 1Ch
		mov	edx, [esp+1Ch+arg_4]
		mov	eax, ds:__stack_chk_guard
		mov	[esp+1Ch+var_10], eax
		xor	eax, eax
		mov	eax, [esp+1Ch+arg_0]
		mov	eax, [eax+6Ch]
		test	eax, eax
		jnz	short loc_688A8043
		jmp	short loc_688A8048
; ---------------------------------------------------------------------------
		align 4

loc_688A803C:				; CODE XREF: aim__findmodulebygroup+2Aj
		mov	eax, [eax+28h]
		test	eax, eax
		jz	short loc_688A8048

loc_688A8043:				; CODE XREF: aim__findmodulebygroup+1Bj
		cmp	[eax], dx
		jnz	short loc_688A803C

loc_688A8048:				; CODE XREF: aim__findmodulebygroup+1Dj
					; aim__findmodulebygroup+25j
		mov	edx, [esp+1Ch+var_10]
		xor	edx, ds:__stack_chk_guard
		jnz	short loc_688A8058
		add	esp, 1Ch
		retn
; ---------------------------------------------------------------------------

loc_688A8058:				; CODE XREF: aim__findmodulebygroup+36j
		call	__stack_chk_fail
aim__findmodulebygroup endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry   3. aim__findmodule

; =============== S U B	R O U T	I N E =======================================


; int __cdecl aim__findmodule(int, char	*)
		public aim__findmodule
aim__findmodule	proc near		; CODE XREF: aim__registermodule+45p

Str1		= dword	ptr -2Ch
Str2		= dword	ptr -28h
var_10		= dword	ptr -10h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	esi
		push	ebx
		sub	esp, 24h
		mov	esi, [esp+2Ch+arg_4]
		mov	eax, ds:__stack_chk_guard
		mov	[esp+2Ch+var_10], eax
		xor	eax, eax
		mov	eax, [esp+2Ch+arg_0]
		mov	ebx, [eax+6Ch]
		test	ebx, ebx
		jnz	short loc_688A808B
		jmp	short loc_688A809E
; ---------------------------------------------------------------------------
		align 4

loc_688A8084:				; CODE XREF: aim__findmodule+3Cj
		mov	ebx, [ebx+28h]
		test	ebx, ebx
		jz	short loc_688A809E

loc_688A808B:				; CODE XREF: aim__findmodule+1Dj
		lea	eax, [ebx+0Ah]
		mov	[esp+2Ch+Str2],	eax ; Str2
		mov	[esp+2Ch+Str1],	esi ; Str1
		call	strcmp
		test	eax, eax
		jnz	short loc_688A8084

loc_688A809E:				; CODE XREF: aim__findmodule+1Fj
					; aim__findmodule+29j
		mov	eax, ebx
		mov	edx, [esp+2Ch+var_10]
		xor	edx, ds:__stack_chk_guard
		jnz	short loc_688A80B2
		add	esp, 24h
		pop	ebx
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_688A80B2:				; CODE XREF: aim__findmodule+4Aj
		call	__stack_chk_fail
aim__findmodule	endp

; ---------------------------------------------------------------------------
		align 4
; Exported entry   5. aim__registermodule

; =============== S U B	R O U T	I N E =======================================


		public aim__registermodule
aim__registermodule proc near		; CODE XREF: oscar_data_new+8Dp
					; oscar_data_new+9Dp ...

var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_10		= dword	ptr -10h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	edi
		push	esi
		push	ebx
		sub	esp, 20h
		mov	ebx, [esp+2Ch+arg_0]
		mov	edi, [esp+2Ch+arg_4]
		mov	eax, ds:__stack_chk_guard
		mov	[esp+2Ch+var_10], eax
		xor	eax, eax
		test	ebx, ebx
		jz	short loc_688A8144
		test	edi, edi
		jz	short loc_688A8144
		mov	[esp+2Ch+var_2C], 2Ch
		call	g_malloc0
		mov	esi, eax
		mov	[esp+2Ch+var_28], eax
		mov	[esp+2Ch+var_2C], ebx
		call	edi
		inc	eax
		jz	short loc_688A8134
		lea	eax, [esi+0Ah]
		mov	[esp+2Ch+var_28], eax ;	char *
		mov	[esp+2Ch+var_2C], ebx ;	int
		call	aim__findmodule
		test	eax, eax
		jnz	short loc_688A8124
		mov	eax, [ebx+6Ch]
		mov	[esi+28h], eax
		mov	[ebx+6Ch], esi
		xor	eax, eax

loc_688A8111:				; CODE XREF: aim__registermodule+89j
					; aim__registermodule+91j
		mov	edx, [esp+2Ch+var_10]
		xor	edx, ds:__stack_chk_guard
		jnz	short loc_688A814B
		add	esp, 20h
		pop	ebx
		pop	esi
		pop	edi
		retn
; ---------------------------------------------------------------------------

loc_688A8124:				; CODE XREF: aim__registermodule+4Cj
		mov	eax, [esi+20h]
		test	eax, eax
		jz	short loc_688A8134
		mov	[esp+2Ch+var_28], esi
		mov	[esp+2Ch+var_2C], ebx
		call	eax

loc_688A8134:				; CODE XREF: aim__registermodule+39j
					; aim__registermodule+71j
		mov	[esp+2Ch+var_2C], esi
		call	g_free
		mov	eax, 0FFFFFFFFh
		jmp	short loc_688A8111
; ---------------------------------------------------------------------------
		align 4

loc_688A8144:				; CODE XREF: aim__registermodule+1Bj
					; aim__registermodule+1Fj
		mov	eax, 0FFFFFFFFh
		jmp	short loc_688A8111
; ---------------------------------------------------------------------------

loc_688A814B:				; CODE XREF: aim__registermodule+63j
		call	__stack_chk_fail
aim__registermodule endp

; Exported entry   6. aim__shutdownmodules

; =============== S U B	R O U T	I N E =======================================


		public aim__shutdownmodules
aim__shutdownmodules proc near		; CODE XREF: oscar_data_destroy+DFp

var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_10		= dword	ptr -10h
arg_0		= dword	ptr  4

		push	edi
		push	esi
		push	ebx
		sub	esp, 20h
		mov	edi, [esp+2Ch+arg_0]
		mov	eax, ds:__stack_chk_guard
		mov	[esp+2Ch+var_10], eax
		xor	eax, eax
		mov	ebx, [edi+6Ch]
		test	ebx, ebx
		jz	short loc_688A818D

loc_688A816C:				; CODE XREF: aim__shutdownmodules+3Bj
		mov	esi, [ebx+28h]
		mov	eax, [ebx+20h]
		test	eax, eax
		jz	short loc_688A817F
		mov	[esp+2Ch+var_28], ebx
		mov	[esp+2Ch+var_2C], edi
		call	eax

loc_688A817F:				; CODE XREF: aim__shutdownmodules+24j
		mov	[esp+2Ch+var_2C], ebx
		call	g_free
		mov	ebx, esi
		test	esi, esi
		jnz	short loc_688A816C

loc_688A818D:				; CODE XREF: aim__shutdownmodules+1Aj
		mov	dword ptr [edi+6Ch], 0
		mov	eax, [esp+2Ch+var_10]
		xor	eax, ds:__stack_chk_guard
		jnz	short loc_688A81A7
		add	esp, 20h
		pop	ebx
		pop	esi
		pop	edi
		retn
; ---------------------------------------------------------------------------

loc_688A81A7:				; CODE XREF: aim__shutdownmodules+4Ej
		call	__stack_chk_fail
aim__shutdownmodules endp

; Exported entry  56. aim_initsnachash

; =============== S U B	R O U T	I N E =======================================


		public aim_initsnachash
aim_initsnachash proc near		; CODE XREF: oscar_data_new+22p

var_10		= dword	ptr -10h
arg_0		= dword	ptr  4

		sub	esp, 1Ch
		mov	edx, [esp+1Ch+arg_0]
		mov	eax, ds:__stack_chk_guard
		mov	[esp+1Ch+var_10], eax
		xor	eax, eax
		xchg	ax, ax

loc_688A81C0:				; CODE XREF: aim_initsnachash+20j
		mov	dword ptr [edx+eax*4+70h], 0
		inc	eax
		cmp	eax, 10h
		jnz	short loc_688A81C0
		mov	eax, [esp+1Ch+var_10]
		xor	eax, ds:__stack_chk_guard
		jnz	short loc_688A81DE
		add	esp, 1Ch
		retn
; ---------------------------------------------------------------------------

loc_688A81DE:				; CODE XREF: aim_initsnachash+2Cj
		call	__stack_chk_fail
aim_initsnachash endp

; ---------------------------------------------------------------------------
		align 4
; Exported entry  65. aim_newsnac

; =============== S U B	R O U T	I N E =======================================


		public aim_newsnac
aim_newsnac	proc near		; CODE XREF: aim_cachesnac+5Ep

Time		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_10		= dword	ptr -10h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	esi
		push	ebx
		sub	esp, 24h
		mov	esi, [esp+2Ch+arg_0]
		mov	eax, [esp+2Ch+arg_4]
		mov	edx, ds:__stack_chk_guard
		mov	[esp+2Ch+var_10], edx
		xor	edx, edx
		test	eax, eax
		jz	short loc_688A8248
		mov	[esp+2Ch+var_28], 18h
		mov	[esp+2Ch+Time],	eax
		call	g_memdup
		mov	ebx, eax
		mov	[esp+2Ch+Time],	0 ; Time
		call	time
		mov	[ebx+10h], eax
		mov	eax, [ebx]
		mov	edx, eax
		and	edx, 0Fh
		add	edx, 1Ch
		mov	ecx, [esi+edx*4]
		mov	[ebx+14h], ecx
		mov	[esi+edx*4], ebx

loc_688A8235:				; CODE XREF: aim_newsnac+66j
		mov	edx, [esp+2Ch+var_10]
		xor	edx, ds:__stack_chk_guard
		jnz	short loc_688A824C
		add	esp, 24h
		pop	ebx
		pop	esi
		retn
; ---------------------------------------------------------------------------
		align 4

loc_688A8248:				; CODE XREF: aim_newsnac+1Bj
		xor	eax, eax
		jmp	short loc_688A8235
; ---------------------------------------------------------------------------

loc_688A824C:				; CODE XREF: aim_newsnac+5Bj
		call	__stack_chk_fail
aim_newsnac	endp

; ---------------------------------------------------------------------------
		align 4
; Exported entry  18. aim_cachesnac

; =============== S U B	R O U T	I N E =======================================


		public aim_cachesnac
aim_cachesnac	proc near		; CODE XREF: aim_admin_getinfo+7Ap
					; aim_admin_setnick+A3p ...

var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_28		= dword	ptr -28h
var_24		= word ptr -24h
var_22		= word ptr -22h
var_20		= word ptr -20h
var_1C		= dword	ptr -1Ch
var_10		= dword	ptr -10h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h

		push	ebx
		sub	esp, 38h
		mov	ebx, [esp+3Ch+arg_0]
		mov	ecx, [esp+3Ch+arg_10]
		mov	edx, [esp+3Ch+arg_14]
		mov	eax, ds:__stack_chk_guard
		mov	[esp+3Ch+var_10], eax
		xor	eax, eax
		mov	eax, [ebx+0B0h]
		mov	[esp+3Ch+var_28], eax
		inc	eax
		mov	[ebx+0B0h], eax
		mov	eax, [esp+3Ch+arg_4]
		mov	[esp+3Ch+var_24], ax
		mov	eax, [esp+3Ch+arg_8]
		mov	[esp+3Ch+var_22], ax
		mov	eax, [esp+3Ch+arg_C]
		mov	[esp+3Ch+var_20], ax
		test	edx, edx
		jnz	short loc_688A82C8
		mov	[esp+3Ch+var_1C], 0

loc_688A82A7:				; CODE XREF: aim_cachesnac+84j
		lea	eax, [esp+3Ch+var_28]
		mov	[esp+3Ch+var_38], eax
		mov	[esp+3Ch+var_3C], ebx
		call	aim_newsnac
		mov	edx, [esp+3Ch+var_10]
		xor	edx, ds:__stack_chk_guard
		jnz	short loc_688A82DA
		add	esp, 38h
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_688A82C8:				; CODE XREF: aim_cachesnac+49j
		mov	[esp+3Ch+var_38], edx
		mov	[esp+3Ch+var_3C], ecx
		call	g_memdup
		mov	[esp+3Ch+var_1C], eax
		jmp	short loc_688A82A7
; ---------------------------------------------------------------------------

loc_688A82DA:				; CODE XREF: aim_cachesnac+6Dj
		call	__stack_chk_fail
aim_cachesnac	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  67. aim_remsnac

; =============== S U B	R O U T	I N E =======================================


		public aim_remsnac
aim_remsnac	proc near		; CODE XREF: sub_68886D3C+82p
					; sub_68886D3C+142p ...

var_3C		= dword	ptr -3Ch
var_20		= dword	ptr -20h
var_10		= dword	ptr -10h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	ebx
		sub	esp, 38h
		mov	eax, [esp+3Ch+arg_0]
		mov	ecx, [esp+3Ch+arg_4]
		mov	edx, ds:__stack_chk_guard
		mov	[esp+3Ch+var_10], edx
		xor	edx, edx
		mov	ebx, ecx
		and	ebx, 0Fh
		add	ebx, 1Ch
		mov	edx, [eax+ebx*4]
		test	edx, edx
		jz	short loc_688A835A
		cmp	[edx], ecx
		jnz	short loc_688A8316
		jmp	short loc_688A835E
; ---------------------------------------------------------------------------
		align 10h

loc_688A8310:				; CODE XREF: aim_remsnac+3Bj
		cmp	[eax], ecx
		jz	short loc_688A8330
		mov	edx, eax

loc_688A8316:				; CODE XREF: aim_remsnac+29j
		mov	eax, [edx+14h]
		test	eax, eax
		jnz	short loc_688A8310

loc_688A831D:				; CODE XREF: aim_remsnac+5Cj
					; aim_remsnac+78j ...
		mov	edx, [esp+3Ch+var_10]
		xor	edx, ds:__stack_chk_guard
		jnz	short loc_688A8365
		add	esp, 38h
		pop	ebx
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_688A8330:				; CODE XREF: aim_remsnac+32j
		lea	ecx, [edx+14h]

loc_688A8333:				; CODE XREF: aim_remsnac+83j
		mov	edx, [eax+14h]
		mov	[ecx], edx
		test	byte ptr [eax+8], 1
		jz	short loc_688A831D
		mov	edx, [eax+0Ch]
		mov	[esp+3Ch+var_3C], edx
		mov	[esp+3Ch+var_20], eax
		call	g_free
		mov	eax, [esp+3Ch+var_20]
		mov	dword ptr [eax+0Ch], 0
		jmp	short loc_688A831D
; ---------------------------------------------------------------------------

loc_688A835A:				; CODE XREF: aim_remsnac+25j
		xor	eax, eax
		jmp	short loc_688A831D
; ---------------------------------------------------------------------------

loc_688A835E:				; CODE XREF: aim_remsnac+2Bj
		lea	ecx, [eax+ebx*4]
		mov	eax, edx
		jmp	short loc_688A8333
; ---------------------------------------------------------------------------

loc_688A8365:				; CODE XREF: aim_remsnac+47j
		call	__stack_chk_fail
aim_remsnac	endp

; ---------------------------------------------------------------------------
		align 4
; Exported entry  26. aim_cleansnacs

; =============== S U B	R O U T	I N E =======================================


		public aim_cleansnacs
aim_cleansnacs	proc near		; CODE XREF: aim_im_sendch1_ext+212p
					; flap_connection_send_keepalive+50j ...

Time		= dword	ptr -4Ch
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_20		= dword	ptr -20h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 3Ch
		mov	edx, [esp+4Ch+arg_0]
		mov	[esp+4Ch+var_30], edx
		mov	esi, [esp+4Ch+arg_4]
		mov	eax, ds:__stack_chk_guard
		mov	[esp+4Ch+var_20], eax
		xor	eax, eax
		xor	edi, edi

loc_688A838C:				; CODE XREF: aim_cleansnacs+5Ej
		mov	edx, [esp+4Ch+var_30]
		mov	eax, [edx+edi*4+70h]
		test	eax, eax
		jz	short loc_688A83C6
		mov	[esp+4Ch+Time],	0 ; Time
		call	time
		mov	edx, [esp+4Ch+var_30]
		lea	ebp, [edx+edi*4+70h]

loc_688A83AC:				; CODE XREF: aim_cleansnacs+95j
		mov	ebx, [ebp+0]
		test	ebx, ebx
		jz	short loc_688A83C6

loc_688A83B3:				; CODE XREF: aim_cleansnacs+58j
		mov	ecx, eax
		sub	ecx, [ebx+10h]
		cmp	ecx, esi
		jg	short loc_688A83E0
		lea	ebp, [ebx+14h]
		mov	ebx, [ebp+0]
		test	ebx, ebx
		jnz	short loc_688A83B3

loc_688A83C6:				; CODE XREF: aim_cleansnacs+2Aj
					; aim_cleansnacs+45j
		inc	edi
		cmp	edi, 10h
		jnz	short loc_688A838C
		mov	eax, [esp+4Ch+var_20]
		xor	eax, ds:__stack_chk_guard
		jnz	short loc_688A8403
		add	esp, 3Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_688A83E0:				; CODE XREF: aim_cleansnacs+4Ej
		mov	ecx, [ebx+14h]
		mov	[ebp+0], ecx
		mov	ecx, [ebx+0Ch]
		mov	[esp+4Ch+Time],	ecx
		mov	[esp+4Ch+var_34], eax
		call	g_free
		mov	[esp+4Ch+Time],	ebx
		call	g_free
		mov	eax, [esp+4Ch+var_34]
		jmp	short loc_688A83AC
; ---------------------------------------------------------------------------

loc_688A8403:				; CODE XREF: aim_cleansnacs+6Aj
		call	__stack_chk_fail
aim_cleansnacs	endp

; Exported entry  66. aim_putsnac

; =============== S U B	R O U T	I N E =======================================


		public aim_putsnac
aim_putsnac	proc near		; CODE XREF: aim_send_login+FFp
					; aim_request_login+B0p ...

var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_10		= dword	ptr -10h
arg_0		= dword	ptr  4
arg_4		= word ptr  8
arg_8		= word ptr  0Ch
arg_C		= dword	ptr  10h

		push	edi
		push	esi
		push	ebx
		sub	esp, 20h
		mov	ebx, [esp+2Ch+arg_0]
		mov	edi, [esp+2Ch+arg_C]
		movzx	eax, [esp+2Ch+arg_4]
		movzx	esi, [esp+2Ch+arg_8]
		mov	edx, ds:__stack_chk_guard
		mov	[esp+2Ch+var_10], edx
		xor	edx, edx
		mov	[esp+2Ch+var_28], eax
		mov	[esp+2Ch+var_2C], ebx
		call	sub_68881E0C
		mov	[esp+2Ch+var_28], esi
		mov	[esp+2Ch+var_2C], ebx
		call	sub_68881E0C
		mov	[esp+2Ch+var_28], 0
		mov	[esp+2Ch+var_2C], ebx
		call	sub_68881E0C
		mov	[esp+2Ch+var_28], edi
		mov	[esp+2Ch+var_2C], ebx
		call	sub_68881E8C
		mov	eax, 0Ah
		mov	edx, [esp+2Ch+var_10]
		xor	edx, ds:__stack_chk_guard
		jnz	short loc_688A8478
		add	esp, 20h
		pop	ebx
		pop	esi
		pop	edi
		retn
; ---------------------------------------------------------------------------

loc_688A8478:				; CODE XREF: aim_putsnac+67j
		call	__stack_chk_fail
aim_putsnac	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 131. aim_tlvlist_free

; =============== S U B	R O U T	I N E =======================================


		public aim_tlvlist_free
aim_tlvlist_free proc near		; CODE XREF: aim_admin_setnick+73p
					; aim_admin_changepasswd+A2p ...

var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_10		= dword	ptr -10h
arg_0		= dword	ptr  4

		push	esi
		push	ebx
		sub	esp, 24h
		mov	ebx, [esp+2Ch+arg_0]
		mov	eax, ds:__stack_chk_guard
		mov	[esp+2Ch+var_10], eax
		xor	eax, eax
		test	ebx, ebx
		jz	short loc_688A84BF

loc_688A8498:				; CODE XREF: aim_tlvlist_free+3Dj
		mov	esi, [ebx]
		mov	eax, [esi+4]
		mov	[esp+2Ch+var_2C], eax
		call	g_free
		mov	[esp+2Ch+var_2C], esi
		call	g_free
		mov	[esp+2Ch+var_28], ebx
		mov	[esp+2Ch+var_2C], ebx
		call	g_slist_delete_link
		mov	ebx, eax
		test	eax, eax
		jnz	short loc_688A8498

loc_688A84BF:				; CODE XREF: aim_tlvlist_free+16j
		mov	eax, [esp+2Ch+var_10]
		xor	eax, ds:__stack_chk_guard
		jnz	short loc_688A84D1
		add	esp, 24h
		pop	ebx
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_688A84D1:				; CODE XREF: aim_tlvlist_free+49j
		call	__stack_chk_fail
aim_tlvlist_free endp

; ---------------------------------------------------------------------------
		align 4

; =============== S U B	R O U T	I N E =======================================


sub_688A84D8	proc near		; CODE XREF: aim_tlvlist_readlen+29p
					; aim_tlvlist_readnum+29p ...

var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_20		= dword	ptr -20h

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 3Ch
		mov	edi, eax
		mov	ebx, edx
		mov	eax, ds:__stack_chk_guard
		mov	[esp+4Ch+var_20], eax
		xor	eax, eax
		mov	[esp+4Ch+var_4C], edx
		call	sub_688819F0
		mov	ebp, eax
		mov	[esp+4Ch+var_4C], ebx
		call	sub_688819F0
		mov	esi, eax
		movzx	edx, ax
		mov	[esp+4Ch+var_30], edx
		mov	[esp+4Ch+var_4C], ebx
		call	sub_68881818
		cmp	[esp+4Ch+var_30], eax
		ja	short loc_688A8590
		mov	[esp+4Ch+var_4C], 8
		call	g_malloc
		mov	edx, eax
		mov	[eax], bp
		mov	[eax+2], si
		mov	dword ptr [eax+4], 0
		test	si, si
		jnz	short loc_688A8558

loc_688A8538:				; CODE XREF: sub_688A84D8+9Dj
		mov	[esp+4Ch+var_48], edx
		mov	[esp+4Ch+var_4C], edi
		call	g_slist_prepend

loc_688A8544:				; CODE XREF: sub_688A84D8+C2j
		mov	edx, [esp+4Ch+var_20]
		xor	edx, ds:__stack_chk_guard
		jnz	short loc_688A859C
		add	esp, 3Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_688A8558:				; CODE XREF: sub_688A84D8+5Ej
		mov	eax, [esp+4Ch+var_30]
		mov	[esp+4Ch+var_48], eax
		mov	[esp+4Ch+var_4C], ebx
		mov	[esp+4Ch+var_34], edx
		call	sub_68881CAC
		mov	edx, [esp+4Ch+var_34]
		mov	[edx+4], eax
		test	eax, eax
		jnz	short loc_688A8538
		mov	[esp+4Ch+var_4C], 0
		call	g_free
		mov	edx, [esp+4Ch+var_34]
		mov	[esp+4Ch+var_4C], edx
		call	g_free
		nop

loc_688A8590:				; CODE XREF: sub_688A84D8+3Dj
		mov	[esp+4Ch+var_4C], edi
		call	aim_tlvlist_free
		xor	eax, eax
		jmp	short loc_688A8544
; ---------------------------------------------------------------------------

loc_688A859C:				; CODE XREF: sub_688A84D8+76j
		call	__stack_chk_fail
sub_688A84D8	endp

; ---------------------------------------------------------------------------
		align 4
; Exported entry 133. aim_tlvlist_readlen

; =============== S U B	R O U T	I N E =======================================


		public aim_tlvlist_readlen
aim_tlvlist_readlen proc near		; CODE XREF: sub_68888E10+256p
					; sub_68888E10+566p ...

var_2C		= dword	ptr -2Ch
var_10		= dword	ptr -10h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	edi
		push	esi
		push	ebx
		sub	esp, 20h
		mov	edi, [esp+2Ch+arg_0]
		mov	esi, [esp+2Ch+arg_4]
		mov	eax, ds:__stack_chk_guard
		mov	[esp+2Ch+var_10], eax
		xor	eax, eax
		xor	ebx, ebx
		jmp	short loc_688A85E1
; ---------------------------------------------------------------------------
		align 4

loc_688A85C4:				; CODE XREF: aim_tlvlist_readlen+47j
		test	si, si
		jz	short loc_688A85ED
		mov	edx, edi
		mov	eax, ebx
		call	sub_688A84D8
		mov	ebx, eax
		test	eax, eax
		jz	short loc_688A8608
		mov	eax, [eax]
		sub	si, [eax+2]
		sub	esi, 4

loc_688A85E1:				; CODE XREF: aim_tlvlist_readlen+1Bj
		mov	[esp+2Ch+var_2C], edi
		call	sub_68881818
		test	eax, eax
		jnz	short loc_688A85C4

loc_688A85ED:				; CODE XREF: aim_tlvlist_readlen+23j
		mov	edx, [esp+2Ch+var_10]
		xor	edx, ds:__stack_chk_guard
		jnz	short loc_688A861D
		mov	[esp+2Ch+arg_0], ebx
		add	esp, 20h
		pop	ebx
		pop	esi
		pop	edi
		jmp	g_slist_reverse
; ---------------------------------------------------------------------------

loc_688A8608:				; CODE XREF: aim_tlvlist_readlen+32j
		xor	eax, eax
		mov	edx, [esp+2Ch+var_10]
		xor	edx, ds:__stack_chk_guard
		jnz	short loc_688A861D
		add	esp, 20h
		pop	ebx
		pop	esi
		pop	edi
		retn
; ---------------------------------------------------------------------------

loc_688A861D:				; CODE XREF: aim_tlvlist_readlen+53j
					; aim_tlvlist_readlen+70j
		call	__stack_chk_fail
aim_tlvlist_readlen endp

; ---------------------------------------------------------------------------
		align 4
; Exported entry 134. aim_tlvlist_readnum

; =============== S U B	R O U T	I N E =======================================


		public aim_tlvlist_readnum
aim_tlvlist_readnum proc near		; CODE XREF: sub_688846FC+103p

var_2C		= dword	ptr -2Ch
var_10		= dword	ptr -10h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	edi
		push	esi
		push	ebx
		sub	esp, 20h
		mov	edi, [esp+2Ch+arg_0]
		mov	esi, [esp+2Ch+arg_4]
		mov	eax, ds:__stack_chk_guard
		mov	[esp+2Ch+var_10], eax
		xor	eax, eax
		xor	ebx, ebx
		jmp	short loc_688A8659
; ---------------------------------------------------------------------------
		align 4

loc_688A8644:				; CODE XREF: aim_tlvlist_readnum+3Fj
		test	si, si
		jz	short loc_688A8665
		mov	edx, edi
		mov	eax, ebx
		call	sub_688A84D8
		mov	ebx, eax
		test	eax, eax
		jz	short loc_688A8680
		dec	esi

loc_688A8659:				; CODE XREF: aim_tlvlist_readnum+1Bj
		mov	[esp+2Ch+var_2C], edi
		call	sub_68881818
		test	eax, eax
		jnz	short loc_688A8644

loc_688A8665:				; CODE XREF: aim_tlvlist_readnum+23j
		mov	edx, [esp+2Ch+var_10]
		xor	edx, ds:__stack_chk_guard
		jnz	short loc_688A8695
		mov	[esp+2Ch+arg_0], ebx
		add	esp, 20h
		pop	ebx
		pop	esi
		pop	edi
		jmp	g_slist_reverse
; ---------------------------------------------------------------------------

loc_688A8680:				; CODE XREF: aim_tlvlist_readnum+32j
		xor	eax, eax
		mov	edx, [esp+2Ch+var_10]
		xor	edx, ds:__stack_chk_guard
		jnz	short loc_688A8695
		add	esp, 20h
		pop	ebx
		pop	esi
		pop	edi
		retn
; ---------------------------------------------------------------------------

loc_688A8695:				; CODE XREF: aim_tlvlist_readnum+4Bj
					; aim_tlvlist_readnum+68j
		call	__stack_chk_fail
aim_tlvlist_readnum endp

; ---------------------------------------------------------------------------
		align 4
; Exported entry 132. aim_tlvlist_read

; =============== S U B	R O U T	I N E =======================================


		public aim_tlvlist_read
aim_tlvlist_read proc near		; CODE XREF: sub_68884E38+BDp
					; sub_68884E38+4C4p ...

var_2C		= dword	ptr -2Ch
var_10		= dword	ptr -10h
arg_0		= dword	ptr  4

		push	esi
		push	ebx
		sub	esp, 24h
		mov	esi, [esp+2Ch+arg_0]
		mov	eax, ds:__stack_chk_guard
		mov	[esp+2Ch+var_10], eax
		xor	eax, eax
		xor	ebx, ebx
		jmp	short loc_688A86C3
; ---------------------------------------------------------------------------

loc_688A86B4:				; CODE XREF: aim_tlvlist_read+31j
		mov	edx, esi
		mov	eax, ebx
		call	sub_688A84D8
		mov	ebx, eax
		test	eax, eax
		jz	short loc_688A86EC

loc_688A86C3:				; CODE XREF: aim_tlvlist_read+16j
		mov	[esp+2Ch+var_2C], esi
		call	sub_68881818
		test	eax, eax
		jnz	short loc_688A86B4
		mov	edx, [esp+2Ch+var_10]
		xor	edx, ds:__stack_chk_guard
		jnz	short loc_688A8700
		mov	[esp+2Ch+arg_0], ebx
		add	esp, 24h
		pop	ebx
		pop	esi
		jmp	g_slist_reverse
; ---------------------------------------------------------------------------
		align 4

loc_688A86EC:				; CODE XREF: aim_tlvlist_read+25j
		xor	eax, eax
		mov	edx, [esp+2Ch+var_10]
		xor	edx, ds:__stack_chk_guard
		jnz	short loc_688A8700
		add	esp, 24h
		pop	ebx
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_688A8700:				; CODE XREF: aim_tlvlist_read+3Dj
					; aim_tlvlist_read+5Cj
		call	__stack_chk_fail
aim_tlvlist_read endp

; ---------------------------------------------------------------------------
		align 4
; Exported entry 130. aim_tlvlist_count

; =============== S U B	R O U T	I N E =======================================


		public aim_tlvlist_count
aim_tlvlist_count proc near		; CODE XREF: aim_chatnav_createroom+116p
					; sub_68894BDC+ADp

var_10		= dword	ptr -10h
arg_0		= dword	ptr  4

		sub	esp, 1Ch
		mov	edx, [esp+1Ch+arg_0]
		mov	eax, ds:__stack_chk_guard
		mov	[esp+1Ch+var_10], eax
		xor	eax, eax
		test	edx, edx
		jz	short loc_688A8738
		xchg	ax, ax

loc_688A8720:				; CODE XREF: aim_tlvlist_count+1Ej
		inc	eax
		mov	edx, [edx+4]
		test	edx, edx
		jnz	short loc_688A8720

loc_688A8728:				; CODE XREF: aim_tlvlist_count+32j
		mov	edx, [esp+1Ch+var_10]
		xor	edx, ds:__stack_chk_guard
		jnz	short loc_688A873C
		add	esp, 1Ch
		retn
; ---------------------------------------------------------------------------

loc_688A8738:				; CODE XREF: aim_tlvlist_count+14j
		xor	eax, eax
		jmp	short loc_688A8728
; ---------------------------------------------------------------------------

loc_688A873C:				; CODE XREF: aim_tlvlist_count+2Aj
		call	__stack_chk_fail
aim_tlvlist_count endp

; ---------------------------------------------------------------------------
		align 4
; Exported entry 141. aim_tlvlist_size

; =============== S U B	R O U T	I N E =======================================


		public aim_tlvlist_size
aim_tlvlist_size proc near		; CODE XREF: sub_688887DC+E5p
					; sub_688887DC+117p ...

var_10		= dword	ptr -10h
arg_0		= dword	ptr  4

		sub	esp, 1Ch
		mov	edx, [esp+1Ch+arg_0]
		mov	eax, ds:__stack_chk_guard
		mov	[esp+1Ch+var_10], eax
		xor	eax, eax
		test	edx, edx
		jz	short loc_688A8780
		xchg	ax, ax

loc_688A875C:				; CODE XREF: aim_tlvlist_size+27j
		mov	ecx, [edx]
		movzx	ecx, word ptr [ecx+2]
		lea	eax, [eax+ecx+4]
		mov	edx, [edx+4]
		test	edx, edx
		jnz	short loc_688A875C

loc_688A876D:				; CODE XREF: aim_tlvlist_size+3Ej
		mov	edx, [esp+1Ch+var_10]
		xor	edx, ds:__stack_chk_guard
		jnz	short loc_688A8784
		add	esp, 1Ch
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_688A8780:				; CODE XREF: aim_tlvlist_size+14j
		xor	eax, eax
		jmp	short loc_688A876D
; ---------------------------------------------------------------------------

loc_688A8784:				; CODE XREF: aim_tlvlist_size+33j
		call	__stack_chk_fail
aim_tlvlist_size endp

; ---------------------------------------------------------------------------
		align 4
; Exported entry 126. aim_tlvlist_add_raw

; =============== S U B	R O U T	I N E =======================================


		public aim_tlvlist_add_raw
aim_tlvlist_add_raw proc near		; CODE XREF: aim_send_login+27Cp
					; aim_chat_send_im+196p ...

var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_20		= dword	ptr -20h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 3Ch
		mov	esi, [esp+4Ch+arg_0]
		mov	ecx, [esp+4Ch+arg_4]
		mov	edi, [esp+4Ch+arg_8]
		mov	edx, [esp+4Ch+arg_C]
		mov	[esp+4Ch+var_30], edx
		mov	eax, ds:__stack_chk_guard
		mov	[esp+4Ch+var_20], eax
		xor	eax, eax
		test	esi, esi
		jz	short loc_688A8820
		mov	[esp+4Ch+var_4C], 8
		mov	[esp+4Ch+var_34], ecx
		call	g_malloc
		mov	ebx, eax
		mov	ecx, [esp+4Ch+var_34]
		mov	[eax], cx
		mov	[eax+2], di
		mov	dword ptr [eax+4], 0
		test	di, di
		jnz	short loc_688A8808

loc_688A87DF:				; CODE XREF: aim_tlvlist_add_raw+92j
		mov	[esp+4Ch+var_48], ebx
		mov	eax, [esi]
		mov	[esp+4Ch+var_4C], eax
		call	g_slist_append
		mov	[esi], eax
		movzx	eax, word ptr [ebx+2]

loc_688A87F3:				; CODE XREF: aim_tlvlist_add_raw+96j
		mov	edx, [esp+4Ch+var_20]
		xor	edx, ds:__stack_chk_guard
		jnz	short loc_688A8824
		add	esp, 3Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 4

loc_688A8808:				; CODE XREF: aim_tlvlist_add_raw+51j
		movzx	edx, di
		mov	[esp+4Ch+var_48], edx
		mov	edx, [esp+4Ch+var_30]
		mov	[esp+4Ch+var_4C], edx
		call	g_memdup
		mov	[ebx+4], eax
		jmp	short loc_688A87DF
; ---------------------------------------------------------------------------

loc_688A8820:				; CODE XREF: aim_tlvlist_add_raw+28j
		xor	eax, eax
		jmp	short loc_688A87F3
; ---------------------------------------------------------------------------

loc_688A8824:				; CODE XREF: aim_tlvlist_add_raw+71j
		call	__stack_chk_fail
aim_tlvlist_add_raw endp

; ---------------------------------------------------------------------------
		align 4
; Exported entry 129. aim_tlvlist_copy

; =============== S U B	R O U T	I N E =======================================


		public aim_tlvlist_copy
aim_tlvlist_copy proc near		; CODE XREF: sub_68887D10+8Bp
					; sub_68888E10+6D9p ...

var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
arg_0		= dword	ptr  4

		push	esi
		push	ebx
		sub	esp, 24h
		mov	ebx, [esp+2Ch+arg_0]
		mov	eax, ds:__stack_chk_guard
		mov	[esp+2Ch+var_10], eax
		xor	eax, eax
		mov	[esp+2Ch+var_14], 0
		test	ebx, ebx
		jz	short loc_688A888D
		lea	esi, [esp+2Ch+var_14]

loc_688A8850:				; CODE XREF: aim_tlvlist_copy+49j
		mov	eax, [ebx]
		mov	edx, [eax+4]
		mov	[esp+2Ch+var_20], edx
		movzx	edx, word ptr [eax+2]
		mov	[esp+2Ch+var_24], edx
		movzx	eax, word ptr [eax]
		mov	[esp+2Ch+var_28], eax
		mov	[esp+2Ch+var_2C], esi
		call	aim_tlvlist_add_raw
		mov	ebx, [ebx+4]
		test	ebx, ebx
		jnz	short loc_688A8850
		mov	eax, [esp+2Ch+var_14]

loc_688A887B:				; CODE XREF: aim_tlvlist_copy+63j
		mov	edx, [esp+2Ch+var_10]
		xor	edx, ds:__stack_chk_guard
		jnz	short loc_688A8891
		add	esp, 24h
		pop	ebx
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_688A888D:				; CODE XREF: aim_tlvlist_copy+1Ej
		xor	eax, eax
		jmp	short loc_688A887B
; ---------------------------------------------------------------------------

loc_688A8891:				; CODE XREF: aim_tlvlist_copy+59j
		call	__stack_chk_fail
aim_tlvlist_copy endp

; ---------------------------------------------------------------------------
		align 4
; Exported entry 121. aim_tlvlist_add_8

; =============== S U B	R O U T	I N E =======================================


		public aim_tlvlist_add_8
aim_tlvlist_add_8 proc near		; CODE XREF: aim_send_login+383p
					; flap_connection_send_version_with_cookie_and_clientinfo+126p

var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_11		= byte ptr -11h
var_10		= dword	ptr -10h
arg_0		= dword	ptr  4
arg_4		= word ptr  8
arg_8		= dword	ptr  0Ch

		sub	esp, 2Ch
		movzx	edx, [esp+2Ch+arg_4]
		mov	eax, ds:__stack_chk_guard
		mov	[esp+2Ch+var_10], eax
		xor	eax, eax
		mov	eax, [esp+2Ch+arg_8]
		mov	[esp+2Ch+var_11], al
		lea	eax, [esp+2Ch+var_11]
		mov	[esp+2Ch+var_20], eax
		mov	[esp+2Ch+var_24], 1
		mov	[esp+2Ch+var_28], edx
		mov	eax, [esp+2Ch+arg_0]
		mov	[esp+2Ch+var_2C], eax
		call	aim_tlvlist_add_raw
		mov	edx, [esp+2Ch+var_10]
		xor	edx, ds:__stack_chk_guard
		jnz	short loc_688A88E3
		add	esp, 2Ch
		retn
; ---------------------------------------------------------------------------

loc_688A88E3:				; CODE XREF: aim_tlvlist_add_8+45j
		call	__stack_chk_fail
aim_tlvlist_add_8 endp

; Exported entry 119. aim_tlvlist_add_16

; =============== S U B	R O U T	I N E =======================================


		public aim_tlvlist_add_16
aim_tlvlist_add_16 proc	near		; CODE XREF: aim_send_login+2C2p
					; aim_send_login+2DAp ...

var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_12		= byte ptr -12h
var_11		= byte ptr -11h
var_10		= dword	ptr -10h
arg_0		= dword	ptr  4
arg_4		= word ptr  8
arg_8		= dword	ptr  0Ch

		sub	esp, 2Ch
		movzx	edx, [esp+2Ch+arg_4]
		mov	eax, [esp+2Ch+arg_8]
		mov	ecx, ds:__stack_chk_guard
		mov	[esp+2Ch+var_10], ecx
		xor	ecx, ecx
		mov	ecx, eax
		shr	cx, 8
		mov	[esp+2Ch+var_12], cl
		mov	[esp+2Ch+var_11], al
		lea	eax, [esp+2Ch+var_12]
		mov	[esp+2Ch+var_20], eax
		mov	[esp+2Ch+var_24], 2
		mov	[esp+2Ch+var_28], edx
		mov	eax, [esp+2Ch+arg_0]
		mov	[esp+2Ch+var_2C], eax
		call	aim_tlvlist_add_raw
		mov	edx, [esp+2Ch+var_10]
		xor	edx, ds:__stack_chk_guard
		jnz	short loc_688A893E
		add	esp, 2Ch
		retn
; ---------------------------------------------------------------------------

loc_688A893E:				; CODE XREF: aim_tlvlist_add_16+50j
		call	__stack_chk_fail
aim_tlvlist_add_16 endp

; ---------------------------------------------------------------------------
		align 4
; Exported entry 120. aim_tlvlist_add_32

; =============== S U B	R O U T	I N E =======================================


		public aim_tlvlist_add_32
aim_tlvlist_add_32 proc	near		; CODE XREF: aim_send_login+336p
					; aim_srv_setextrainfo+1F9p

var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_14		= byte ptr -14h
var_13		= byte ptr -13h
var_12		= byte ptr -12h
var_11		= byte ptr -11h
var_10		= dword	ptr -10h
arg_0		= dword	ptr  4
arg_4		= word ptr  8
arg_8		= dword	ptr  0Ch

		sub	esp, 2Ch
		mov	eax, [esp+2Ch+arg_8]
		movzx	edx, [esp+2Ch+arg_4]
		mov	ecx, ds:__stack_chk_guard
		mov	[esp+2Ch+var_10], ecx
		xor	ecx, ecx
		mov	ecx, eax
		shr	ecx, 18h
		mov	[esp+2Ch+var_14], cl
		mov	ecx, eax
		shr	ecx, 10h
		mov	[esp+2Ch+var_13], cl
		mov	ecx, eax
		shr	ecx, 8
		mov	[esp+2Ch+var_12], cl
		mov	[esp+2Ch+var_11], al
		lea	eax, [esp+2Ch+var_14]
		mov	[esp+2Ch+var_20], eax
		mov	[esp+2Ch+var_24], 4
		mov	[esp+2Ch+var_28], edx
		mov	eax, [esp+2Ch+arg_0]
		mov	[esp+2Ch+var_2C], eax
		call	aim_tlvlist_add_raw
		mov	edx, [esp+2Ch+var_10]
		xor	edx, ds:__stack_chk_guard
		jnz	short loc_688A89AB
		add	esp, 2Ch
		retn
; ---------------------------------------------------------------------------

loc_688A89AB:				; CODE XREF: aim_tlvlist_add_32+61j
		call	__stack_chk_fail
aim_tlvlist_add_32 endp

; Exported entry 127. aim_tlvlist_add_str

; =============== S U B	R O U T	I N E =======================================


		public aim_tlvlist_add_str
aim_tlvlist_add_str proc near		; CODE XREF: aim_admin_setnick+5Bp
					; aim_admin_changepasswd+72p ...

var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_10		= dword	ptr -10h
arg_0		= dword	ptr  4
arg_4		= word ptr  8
arg_8		= dword	ptr  0Ch

		push	edi
		push	ebx
		sub	esp, 24h
		mov	edx, [esp+2Ch+arg_8]
		movzx	ebx, [esp+2Ch+arg_4]
		mov	eax, ds:__stack_chk_guard
		mov	[esp+2Ch+var_10], eax
		xor	eax, eax
		mov	ecx, 0FFFFFFFFh
		mov	edi, edx
		repne scasb
		not	ecx
		dec	ecx
		mov	[esp+2Ch+var_20], edx
		and	ecx, 0FFFFh
		mov	[esp+2Ch+var_24], ecx
		mov	[esp+2Ch+var_28], ebx
		mov	eax, [esp+2Ch+arg_0]
		mov	[esp+2Ch+var_2C], eax
		call	aim_tlvlist_add_raw
		mov	edx, [esp+2Ch+var_10]
		xor	edx, ds:__stack_chk_guard
		jnz	short loc_688A8A05
		add	esp, 24h
		pop	ebx
		pop	edi
		retn
; ---------------------------------------------------------------------------

loc_688A8A05:				; CODE XREF: aim_tlvlist_add_str+4Dj
		call	__stack_chk_fail
aim_tlvlist_add_str endp

; ---------------------------------------------------------------------------
		align 4
; Exported entry 122. aim_tlvlist_add_caps

; =============== S U B	R O U T	I N E =======================================


; int __cdecl aim_tlvlist_add_caps(int,	__int16, int, int, char	*)
		public aim_tlvlist_add_caps
aim_tlvlist_add_caps proc near		; CODE XREF: aim_locate_setcaps+92p

var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_20		= dword	ptr -20h
arg_0		= dword	ptr  4
arg_4		= word ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 3Ch
		mov	edx, [esp+4Ch+arg_0]
		mov	[esp+4Ch+var_34], edx
		mov	ebx, [esp+4Ch+arg_8]
		mov	ebp, [esp+4Ch+arg_C]
		mov	eax, [esp+4Ch+arg_10]
		movzx	esi, [esp+4Ch+arg_4]
		mov	edi, ds:__stack_chk_guard
		mov	[esp+4Ch+var_20], edi
		xor	edi, edi
		mov	edx, ebp
		or	edx, ebx
		jnz	short loc_688A8A58
		xor	eax, eax

loc_688A8A40:				; CODE XREF: aim_tlvlist_add_caps+101j
		mov	edi, [esp+4Ch+var_20]
		xor	edi, ds:__stack_chk_guard
		jnz	loc_688A8B12
		add	esp, 3Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_688A8A58:				; CODE XREF: aim_tlvlist_add_caps+30j
		mov	[esp+4Ch+var_4C], eax ;	char *
		call	icq_get_custom_icon_data
		mov	[esp+4Ch+var_30], eax
		mov	eax, ebx
		mov	edx, ebp
		xor	ecx, ecx
		xchg	ax, ax

loc_688A8A6C:				; CODE XREF: aim_tlvlist_add_caps+71j
		mov	edi, eax
		and	edi, 1
		add	ecx, edi
		shrd	eax, edx, 1
		shr	edx, 1
		mov	edi, edx
		or	edi, eax
		jnz	short loc_688A8A6C
		mov	eax, [esp+4Ch+var_30]
		test	eax, eax
		setnz	dl
		movzx	eax, dl
		add	ecx, eax
		shl	ecx, 4
		mov	[esp+4Ch+var_48], ecx
		lea	edi, [esp+4Ch+var_2C]
		mov	[esp+4Ch+var_4C], edi
		mov	byte ptr [esp+4Ch+var_38], dl
		call	sub_68881748
		mov	[esp+4Ch+var_48], ebx
		mov	[esp+4Ch+var_44], ebp
		mov	[esp+4Ch+var_4C], edi
		call	sub_688918E0
		mov	dl, byte ptr [esp+4Ch+var_38]
		test	dl, dl
		jz	short loc_688A8AD4
		mov	[esp+4Ch+var_44], 10h
		mov	eax, [esp+4Ch+var_30]
		mov	[esp+4Ch+var_48], eax
		mov	[esp+4Ch+var_4C], edi
		call	sub_688820A0

loc_688A8AD4:				; CODE XREF: aim_tlvlist_add_caps+AEj
		mov	ebx, [esp+4Ch+var_2C]
		mov	[esp+4Ch+var_4C], edi
		call	sub_68881848
		mov	[esp+4Ch+var_40], ebx
		and	eax, 0FFFFh
		mov	[esp+4Ch+var_44], eax
		mov	[esp+4Ch+var_48], esi
		mov	edx, [esp+4Ch+var_34]
		mov	[esp+4Ch+var_4C], edx
		call	aim_tlvlist_add_raw
		mov	[esp+4Ch+var_4C], edi
		mov	[esp+4Ch+var_38], eax
		call	sub_688817E4
		mov	eax, [esp+4Ch+var_38]
		jmp	loc_688A8A40
; ---------------------------------------------------------------------------

loc_688A8B12:				; CODE XREF: aim_tlvlist_add_caps+3Ej
		call	__stack_chk_fail
aim_tlvlist_add_caps endp

; ---------------------------------------------------------------------------
		align 4
; Exported entry 123. aim_tlvlist_add_chatroom

; =============== S U B	R O U T	I N E =======================================


		public aim_tlvlist_add_chatroom
aim_tlvlist_add_chatroom proc near	; CODE XREF: aim_im_sendch2_chatinvite+28Dp
					; aim_chat_join+106p

var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_20		= dword	ptr -20h
arg_0		= dword	ptr  4
arg_4		= word ptr  8
arg_8		= word ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= word ptr  14h

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 3Ch
		mov	edx, [esp+4Ch+arg_0]
		mov	esi, [esp+4Ch+arg_C]
		movzx	eax, [esp+4Ch+arg_4]
		mov	[esp+4Ch+var_34], eax
		movzx	ebp, [esp+4Ch+arg_8]
		movzx	eax, [esp+4Ch+arg_10]
		mov	[esp+4Ch+var_30], eax
		mov	eax, ds:__stack_chk_guard
		mov	[esp+4Ch+var_20], eax
		xor	eax, eax
		mov	ecx, 0FFFFFFFFh
		mov	edi, esi
		repne scasb
		not	ecx
		add	ecx, 4
		mov	[esp+4Ch+var_48], ecx
		lea	ebx, [esp+4Ch+var_2C]
		mov	[esp+4Ch+var_4C], ebx
		mov	[esp+4Ch+var_38], edx
		call	sub_68881748
		mov	[esp+4Ch+var_48], ebp
		mov	[esp+4Ch+var_4C], ebx
		call	sub_68881E0C
		mov	ecx, 0FFFFFFFFh
		mov	edi, esi
		xor	eax, eax
		repne scasb
		not	ecx
		dec	ecx
		and	ecx, 0FFh
		mov	[esp+4Ch+var_48], ecx
		mov	[esp+4Ch+var_4C], ebx
		call	sub_68881DA4
		mov	[esp+4Ch+var_48], esi
		mov	[esp+4Ch+var_4C], ebx
		call	sub_68882114
		mov	eax, [esp+4Ch+var_30]
		mov	[esp+4Ch+var_48], eax
		mov	[esp+4Ch+var_4C], ebx
		call	sub_68881E0C
		mov	esi, [esp+4Ch+var_2C]
		mov	[esp+4Ch+var_4C], ebx
		call	sub_68881848
		mov	[esp+4Ch+var_40], esi
		and	eax, 0FFFFh
		mov	[esp+4Ch+var_44], eax
		mov	eax, [esp+4Ch+var_34]
		mov	[esp+4Ch+var_48], eax
		mov	edx, [esp+4Ch+var_38]
		mov	[esp+4Ch+var_4C], edx
		call	aim_tlvlist_add_raw
		mov	[esp+4Ch+var_4C], ebx
		mov	[esp+4Ch+var_38], eax
		call	sub_688817E4
		mov	eax, [esp+4Ch+var_38]
		mov	edx, [esp+4Ch+var_20]
		xor	edx, ds:__stack_chk_guard
		jnz	short loc_688A8C04
		add	esp, 3Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_688A8C04:				; CODE XREF: aim_tlvlist_add_chatroom+E2j
		call	__stack_chk_fail
aim_tlvlist_add_chatroom endp

; ---------------------------------------------------------------------------
		align 4
; Exported entry 125. aim_tlvlist_add_noval

; =============== S U B	R O U T	I N E =======================================


		public aim_tlvlist_add_noval
aim_tlvlist_add_noval proc near		; CODE XREF: aim_send_login+28Cp
					; aim_request_login+DCp ...

var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_10		= dword	ptr -10h
arg_0		= dword	ptr  4
arg_4		= word ptr  8

		sub	esp, 2Ch
		movzx	eax, [esp+2Ch+arg_4]
		mov	edx, ds:__stack_chk_guard
		mov	[esp+2Ch+var_10], edx
		xor	edx, edx
		mov	[esp+2Ch+var_20], 0
		mov	[esp+2Ch+var_24], 0
		mov	[esp+2Ch+var_28], eax
		mov	eax, [esp+2Ch+arg_0]
		mov	[esp+2Ch+var_2C], eax
		call	aim_tlvlist_add_raw
		mov	edx, [esp+2Ch+var_10]
		xor	edx, ds:__stack_chk_guard
		jnz	short loc_688A8C50
		add	esp, 2Ch
		retn
; ---------------------------------------------------------------------------

loc_688A8C50:				; CODE XREF: aim_tlvlist_add_noval+3Ej
		call	__stack_chk_fail
aim_tlvlist_add_noval endp

; ---------------------------------------------------------------------------
		align 4
; Exported entry 139. aim_tlvlist_replace_raw

; =============== S U B	R O U T	I N E =======================================


		public aim_tlvlist_replace_raw
aim_tlvlist_replace_raw	proc near	; CODE XREF: sub_688880D4+E7p
					; aim_ssi_seticon+CAp ...

var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_10		= dword	ptr -10h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		push	edi
		push	esi
		push	ebx
		sub	esp, 20h
		mov	ecx, [esp+2Ch+arg_0]
		mov	edi, [esp+2Ch+arg_C]
		movzx	edx, word ptr [esp+2Ch+arg_4]
		movzx	esi, word ptr [esp+2Ch+arg_8]
		mov	eax, ds:__stack_chk_guard
		mov	[esp+2Ch+var_10], eax
		xor	eax, eax
		test	ecx, ecx
		jz	loc_688A8D0C
		mov	eax, [ecx]
		test	eax, eax
		jnz	short loc_688A8C93
		jmp	short loc_688A8CCC
; ---------------------------------------------------------------------------
		align 4

loc_688A8C8C:				; CODE XREF: aim_tlvlist_replace_raw+40j
		mov	eax, [eax+4]
		test	eax, eax
		jz	short loc_688A8CCC

loc_688A8C93:				; CODE XREF: aim_tlvlist_replace_raw+2Fj
		mov	ebx, [eax]
		cmp	[ebx], dx
		jnz	short loc_688A8C8C
		mov	eax, [ebx+4]
		mov	[esp+2Ch+var_2C], eax
		call	g_free
		mov	[ebx+2], si
		test	si, si
		jnz	short loc_688A8CF4
		mov	dword ptr [ebx+4], 0
		xor	eax, eax

loc_688A8CB7:				; CODE XREF: aim_tlvlist_replace_raw+AFj
					; aim_tlvlist_replace_raw+B6j
		mov	edx, [esp+2Ch+var_10]
		xor	edx, ds:__stack_chk_guard
		jnz	short loc_688A8D10
		add	esp, 20h
		pop	ebx
		pop	esi
		pop	edi
		retn
; ---------------------------------------------------------------------------
		align 4

loc_688A8CCC:				; CODE XREF: aim_tlvlist_replace_raw+31j
					; aim_tlvlist_replace_raw+39j
		mov	eax, [esp+2Ch+var_10]
		xor	eax, ds:__stack_chk_guard
		jnz	short loc_688A8D10
		mov	[esp+2Ch+arg_C], edi
		mov	[esp+2Ch+arg_8], esi
		mov	[esp+2Ch+arg_4], edx
		mov	[esp+2Ch+arg_0], ecx
		add	esp, 20h
		pop	ebx
		pop	esi
		pop	edi
		jmp	aim_tlvlist_add_raw
; ---------------------------------------------------------------------------
		align 4

loc_688A8CF4:				; CODE XREF: aim_tlvlist_replace_raw+54j
		mov	[esp+2Ch+var_28], esi
		mov	[esp+2Ch+var_2C], edi
		call	g_memdup
		mov	[ebx+4], eax
		movzx	eax, word ptr [ebx+2]
		jmp	short loc_688A8CB7
; ---------------------------------------------------------------------------
		align 4

loc_688A8D0C:				; CODE XREF: aim_tlvlist_replace_raw+25j
		xor	eax, eax
		jmp	short loc_688A8CB7
; ---------------------------------------------------------------------------

loc_688A8D10:				; CODE XREF: aim_tlvlist_replace_raw+69j
					; aim_tlvlist_replace_raw+7Ej
		call	__stack_chk_fail
aim_tlvlist_replace_raw	endp

; ---------------------------------------------------------------------------
		align 4
; Exported entry 140. aim_tlvlist_replace_str

; =============== S U B	R O U T	I N E =======================================


		public aim_tlvlist_replace_str
aim_tlvlist_replace_str	proc near	; CODE XREF: aim_ssi_editcomment+96p
					; aim_ssi_aliasbuddy+96p

var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_10		= dword	ptr -10h
arg_0		= dword	ptr  4
arg_4		= word ptr  8
arg_8		= dword	ptr  0Ch

		push	edi
		push	ebx
		sub	esp, 24h
		mov	edx, [esp+2Ch+arg_8]
		movzx	ebx, [esp+2Ch+arg_4]
		mov	eax, ds:__stack_chk_guard
		mov	[esp+2Ch+var_10], eax
		xor	eax, eax
		mov	ecx, 0FFFFFFFFh
		mov	edi, edx
		repne scasb
		not	ecx
		dec	ecx
		mov	[esp+2Ch+var_20], edx
		and	ecx, 0FFFFh
		mov	[esp+2Ch+var_24], ecx
		mov	[esp+2Ch+var_28], ebx
		mov	eax, [esp+2Ch+arg_0]
		mov	[esp+2Ch+var_2C], eax
		call	aim_tlvlist_replace_raw
		mov	edx, [esp+2Ch+var_10]
		xor	edx, ds:__stack_chk_guard
		jnz	short loc_688A8D6D
		add	esp, 24h
		pop	ebx
		pop	edi
		retn
; ---------------------------------------------------------------------------

loc_688A8D6D:				; CODE XREF: aim_tlvlist_replace_str+4Dj
		call	__stack_chk_fail
aim_tlvlist_replace_str	endp

; ---------------------------------------------------------------------------
		align 4
; Exported entry 138. aim_tlvlist_replace_noval

; =============== S U B	R O U T	I N E =======================================


		public aim_tlvlist_replace_noval
aim_tlvlist_replace_noval proc near	; CODE XREF: aim_ssi_seticon+E2p

var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_10		= dword	ptr -10h
arg_0		= dword	ptr  4
arg_4		= word ptr  8

		sub	esp, 2Ch
		movzx	eax, [esp+2Ch+arg_4]
		mov	edx, ds:__stack_chk_guard
		mov	[esp+2Ch+var_10], edx
		xor	edx, edx
		mov	[esp+2Ch+var_20], 0
		mov	[esp+2Ch+var_24], 0
		mov	[esp+2Ch+var_28], eax
		mov	eax, [esp+2Ch+arg_0]
		mov	[esp+2Ch+var_2C], eax
		call	aim_tlvlist_replace_raw
		mov	edx, [esp+2Ch+var_10]
		xor	edx, ds:__stack_chk_guard
		jnz	short loc_688A8DB8
		add	esp, 2Ch
		retn
; ---------------------------------------------------------------------------

loc_688A8DB8:				; CODE XREF: aim_tlvlist_replace_noval+3Ej
		call	__stack_chk_fail
aim_tlvlist_replace_noval endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 137. aim_tlvlist_replace_8

; =============== S U B	R O U T	I N E =======================================


		public aim_tlvlist_replace_8
aim_tlvlist_replace_8 proc near		; CODE XREF: aim_ssi_setpermdeny+72p

var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_11		= byte ptr -11h
var_10		= dword	ptr -10h
arg_0		= dword	ptr  4
arg_4		= word ptr  8
arg_8		= dword	ptr  0Ch

		sub	esp, 2Ch
		movzx	edx, [esp+2Ch+arg_4]
		mov	eax, ds:__stack_chk_guard
		mov	[esp+2Ch+var_10], eax
		xor	eax, eax
		mov	eax, [esp+2Ch+arg_8]
		mov	[esp+2Ch+var_11], al
		lea	eax, [esp+2Ch+var_11]
		mov	[esp+2Ch+var_20], eax
		mov	[esp+2Ch+var_24], 1
		mov	[esp+2Ch+var_28], edx
		mov	eax, [esp+2Ch+arg_0]
		mov	[esp+2Ch+var_2C], eax
		call	aim_tlvlist_replace_raw
		mov	edx, [esp+2Ch+var_10]
		xor	edx, ds:__stack_chk_guard
		jnz	short loc_688A8E0B
		add	esp, 2Ch
		retn
; ---------------------------------------------------------------------------

loc_688A8E0B:				; CODE XREF: aim_tlvlist_replace_8+45j
		call	__stack_chk_fail
aim_tlvlist_replace_8 endp

; Exported entry 136. aim_tlvlist_replace_32

; =============== S U B	R O U T	I N E =======================================


		public aim_tlvlist_replace_32
aim_tlvlist_replace_32 proc near	; CODE XREF: aim_ssi_setpresence+6Bp

var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_14		= byte ptr -14h
var_13		= byte ptr -13h
var_12		= byte ptr -12h
var_11		= byte ptr -11h
var_10		= dword	ptr -10h
arg_0		= dword	ptr  4
arg_4		= word ptr  8
arg_8		= dword	ptr  0Ch

		sub	esp, 2Ch
		mov	eax, [esp+2Ch+arg_8]
		movzx	edx, [esp+2Ch+arg_4]
		mov	ecx, ds:__stack_chk_guard
		mov	[esp+2Ch+var_10], ecx
		xor	ecx, ecx
		mov	ecx, eax
		shr	ecx, 18h
		mov	[esp+2Ch+var_14], cl
		mov	ecx, eax
		shr	ecx, 10h
		mov	[esp+2Ch+var_13], cl
		mov	ecx, eax
		shr	ecx, 8
		mov	[esp+2Ch+var_12], cl
		mov	[esp+2Ch+var_11], al
		lea	eax, [esp+2Ch+var_14]
		mov	[esp+2Ch+var_20], eax
		mov	[esp+2Ch+var_24], 4
		mov	[esp+2Ch+var_28], edx
		mov	eax, [esp+2Ch+arg_0]
		mov	[esp+2Ch+var_2C], eax
		call	aim_tlvlist_replace_raw
		mov	edx, [esp+2Ch+var_10]
		xor	edx, ds:__stack_chk_guard
		jnz	short loc_688A8E77
		add	esp, 2Ch
		retn
; ---------------------------------------------------------------------------

loc_688A8E77:				; CODE XREF: aim_tlvlist_replace_32+61j
		call	__stack_chk_fail
aim_tlvlist_replace_32 endp

; Exported entry 135. aim_tlvlist_remove

; =============== S U B	R O U T	I N E =======================================


		public aim_tlvlist_remove
aim_tlvlist_remove proc	near		; CODE XREF: aim_ssi_editcomment+66p
					; aim_ssi_aliasbuddy+66p

var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_20		= dword	ptr -20h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 2Ch
		mov	ebp, [esp+3Ch+arg_0]
		mov	edi, [esp+3Ch+arg_4]
		mov	eax, ds:__stack_chk_guard
		mov	[esp+3Ch+var_20], eax
		xor	eax, eax
		test	ebp, ebp
		jz	short loc_688A8EE0
		mov	eax, [ebp+0]
		test	eax, eax
		jnz	short loc_688A8EAA
		jmp	short loc_688A8EE0
; ---------------------------------------------------------------------------
		align 4

loc_688A8EA4:				; CODE XREF: aim_tlvlist_remove+36j
		mov	eax, esi
		test	esi, esi
		jz	short loc_688A8EE0

loc_688A8EAA:				; CODE XREF: aim_tlvlist_remove+23j
					; aim_tlvlist_remove+61j
		mov	ebx, [eax]
		mov	esi, [eax+4]
		cmp	[ebx], di
		jnz	short loc_688A8EA4
		mov	[esp+3Ch+var_38], eax
		mov	eax, [ebp+0]
		mov	[esp+3Ch+var_3C], eax
		call	g_slist_delete_link
		mov	[ebp+0], eax
		mov	eax, [ebx+4]
		mov	[esp+3Ch+var_3C], eax
		call	g_free
		mov	[esp+3Ch+var_3C], ebx
		call	g_free
		mov	eax, esi
		test	esi, esi
		jnz	short loc_688A8EAA
		nop

loc_688A8EE0:				; CODE XREF: aim_tlvlist_remove+1Cj
					; aim_tlvlist_remove+25j ...
		mov	eax, [esp+3Ch+var_20]
		xor	eax, ds:__stack_chk_guard
		jnz	short loc_688A8EF4
		add	esp, 2Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_688A8EF4:				; CODE XREF: aim_tlvlist_remove+6Ej
		call	__stack_chk_fail
aim_tlvlist_remove endp

; ---------------------------------------------------------------------------
		align 4
; Exported entry 142. aim_tlvlist_write

; =============== S U B	R O U T	I N E =======================================


		public aim_tlvlist_write
aim_tlvlist_write proc near		; CODE XREF: aim_admin_setnick+67p
					; aim_admin_changepasswd+96p ...

var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_10		= dword	ptr -10h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	edi
		push	esi
		push	ebx
		sub	esp, 20h
		mov	edi, [esp+2Ch+arg_0]
		mov	esi, [esp+2Ch+arg_4]
		mov	eax, ds:__stack_chk_guard
		mov	[esp+2Ch+var_10], eax
		xor	eax, eax
		mov	eax, [esi]
		test	eax, eax
		jz	loc_688A8FB4
		xor	ebx, ebx
		lea	esi, [esi+0]

loc_688A8F24:				; CODE XREF: aim_tlvlist_write+37j
		mov	edx, [eax]
		movzx	edx, word ptr [edx+2]
		lea	ebx, [ebx+edx+4]
		mov	eax, [eax+4]
		test	eax, eax
		jnz	short loc_688A8F24
		mov	[esp+2Ch+var_2C], edi
		call	sub_68881818
		cmp	ebx, eax
		ja	short loc_688A8FB0

loc_688A8F41:				; CODE XREF: aim_tlvlist_write+C0j
		mov	esi, [esi]
		test	esi, esi
		jnz	short loc_688A8F53
		jmp	short loc_688A8F97
; ---------------------------------------------------------------------------
		align 4

loc_688A8F4C:				; CODE XREF: aim_tlvlist_write+7Fj
		mov	esi, [esi+4]
		test	esi, esi
		jz	short loc_688A8F97

loc_688A8F53:				; CODE XREF: aim_tlvlist_write+49j
					; aim_tlvlist_write+99j
		mov	ebx, [esi]
		movzx	eax, word ptr [ebx]
		mov	[esp+2Ch+var_28], eax
		mov	[esp+2Ch+var_2C], edi
		call	sub_68881E0C
		movzx	eax, word ptr [ebx+2]
		mov	[esp+2Ch+var_28], eax
		mov	[esp+2Ch+var_2C], edi
		call	sub_68881E0C
		movzx	eax, word ptr [ebx+2]
		test	ax, ax
		jz	short loc_688A8F4C
		mov	[esp+2Ch+var_24], eax
		mov	eax, [ebx+4]
		mov	[esp+2Ch+var_28], eax
		mov	[esp+2Ch+var_2C], edi
		call	sub_688820A0
		mov	esi, [esi+4]
		test	esi, esi
		jnz	short loc_688A8F53

loc_688A8F97:				; CODE XREF: aim_tlvlist_write+4Bj
					; aim_tlvlist_write+55j
		mov	eax, 1

loc_688A8F9C:				; CODE XREF: aim_tlvlist_write+B6j
		mov	edx, [esp+2Ch+var_10]
		xor	edx, ds:__stack_chk_guard
		jnz	short loc_688A8FBE
		add	esp, 20h
		pop	ebx
		pop	esi
		pop	edi
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_688A8FB0:				; CODE XREF: aim_tlvlist_write+43j
		xor	eax, eax
		jmp	short loc_688A8F9C
; ---------------------------------------------------------------------------

loc_688A8FB4:				; CODE XREF: aim_tlvlist_write+1Dj
		mov	[esp+2Ch+var_2C], edi
		call	sub_68881818
		jmp	short loc_688A8F41
; ---------------------------------------------------------------------------

loc_688A8FBE:				; CODE XREF: aim_tlvlist_write+AAj
		call	__stack_chk_fail
aim_tlvlist_write endp

; ---------------------------------------------------------------------------
		align 4
; Exported entry 124. aim_tlvlist_add_frozentlvlist

; =============== S U B	R O U T	I N E =======================================


		public aim_tlvlist_add_frozentlvlist
aim_tlvlist_add_frozentlvlist proc near	; CODE XREF: aim_chat_send_im+1EAp

var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_20		= dword	ptr -20h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 3Ch
		mov	edx, [esp+4Ch+arg_0]
		mov	[esp+4Ch+var_30], edx
		mov	edi, [esp+4Ch+arg_8]
		mov	ebp, [esp+4Ch+arg_4]
		mov	eax, ds:__stack_chk_guard
		mov	[esp+4Ch+var_20], eax
		xor	eax, eax
		mov	edx, [edi]
		xor	ebx, ebx
		test	edx, edx
		jz	short loc_688A9055
		xchg	ax, ax

loc_688A8FF0:				; CODE XREF: aim_tlvlist_add_frozentlvlist+3Bj
		mov	eax, [edx]
		movzx	eax, word ptr [eax+2]
		lea	ebx, [ebx+eax+4]
		mov	edx, [edx+4]
		test	edx, edx
		jnz	short loc_688A8FF0
		test	ebx, ebx
		jle	short loc_688A906C
		mov	[esp+4Ch+var_48], ebx
		lea	esi, [esp+4Ch+var_2C]
		mov	[esp+4Ch+var_4C], esi
		call	sub_68881748
		mov	[esp+4Ch+var_48], edi
		mov	[esp+4Ch+var_4C], esi
		call	aim_tlvlist_write
		mov	edi, [esp+4Ch+var_2C]
		mov	[esp+4Ch+var_4C], esi
		call	sub_68881848
		mov	[esp+4Ch+var_40], edi
		and	eax, 0FFFFh
		mov	[esp+4Ch+var_44], eax
		movzx	ecx, bp
		mov	[esp+4Ch+var_48], ecx
		mov	edx, [esp+4Ch+var_30]
		mov	[esp+4Ch+var_4C], edx
		call	aim_tlvlist_add_raw
		mov	[esp+4Ch+var_4C], esi
		call	sub_688817E4

loc_688A9055:				; CODE XREF: aim_tlvlist_add_frozentlvlist+28j
					; aim_tlvlist_add_frozentlvlist+AAj
		mov	eax, ebx
		mov	edx, [esp+4Ch+var_20]
		xor	edx, ds:__stack_chk_guard
		jnz	short loc_688A9070
		add	esp, 3Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 4

loc_688A906C:				; CODE XREF: aim_tlvlist_add_frozentlvlist+3Fj
		xor	ebx, ebx
		jmp	short loc_688A9055
; ---------------------------------------------------------------------------

loc_688A9070:				; CODE XREF: aim_tlvlist_add_frozentlvlist+9Dj
		call	__stack_chk_fail
aim_tlvlist_add_frozentlvlist endp

; ---------------------------------------------------------------------------
		align 4
; Exported entry 128. aim_tlvlist_cmp

; =============== S U B	R O U T	I N E =======================================


		public aim_tlvlist_cmp
aim_tlvlist_cmp	proc near		; CODE XREF: sub_688887DC+454p

Buf1		= dword	ptr -4Ch
Buf2		= dword	ptr -48h
Size		= dword	ptr -44h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_1C		= dword	ptr -1Ch
var_10		= dword	ptr -10h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	edi
		push	esi
		push	ebx
		sub	esp, 40h
		mov	edi, [esp+4Ch+arg_0]
		mov	[esp+4Ch+var_30], edi
		mov	eax, [esp+4Ch+arg_4]
		mov	[esp+4Ch+var_34], eax
		mov	eax, ds:__stack_chk_guard
		mov	[esp+4Ch+var_10], eax
		xor	eax, eax
		mov	esi, edi
		test	edi, edi
		jz	loc_688A91A4
		mov	eax, edi
		xor	ecx, ecx
		nop

loc_688A90A8:				; CODE XREF: aim_tlvlist_cmp+3Fj
		mov	edx, [eax]
		movzx	edx, word ptr [edx+2]
		lea	ecx, [ecx+edx+4]
		mov	eax, [eax+4]
		test	eax, eax
		jnz	short loc_688A90A8

loc_688A90B9:				; CODE XREF: aim_tlvlist_cmp+12Ej
		mov	eax, [esp+4Ch+var_34]
		xor	edx, edx
		test	eax, eax
		jz	short loc_688A90D5
		nop

loc_688A90C4:				; CODE XREF: aim_tlvlist_cmp+5Bj
		mov	ebx, [eax]
		movzx	ebx, word ptr [ebx+2]
		lea	edx, [edx+ebx+4]
		mov	eax, [eax+4]
		test	eax, eax
		jnz	short loc_688A90C4

loc_688A90D5:				; CODE XREF: aim_tlvlist_cmp+49j
		cmp	ecx, edx
		jz	short loc_688A90F8
		mov	eax, 1

loc_688A90DE:				; CODE XREF: aim_tlvlist_cmp+127j
					; aim_tlvlist_cmp+146j
		mov	edx, [esp+4Ch+var_10]
		xor	edx, ds:__stack_chk_guard
		jnz	loc_688A91C3
		add	esp, 40h
		pop	ebx
		pop	esi
		pop	edi
		retn
; ---------------------------------------------------------------------------
		align 4

loc_688A90F8:				; CODE XREF: aim_tlvlist_cmp+5Fj
		xor	eax, eax
		test	edi, edi
		jz	short loc_688A9111
		xchg	ax, ax

loc_688A9100:				; CODE XREF: aim_tlvlist_cmp+97j
		mov	edx, [esi]
		movzx	edx, word ptr [edx+2]
		lea	eax, [eax+edx+4]
		mov	esi, [esi+4]
		test	esi, esi
		jnz	short loc_688A9100

loc_688A9111:				; CODE XREF: aim_tlvlist_cmp+84j
		mov	[esp+4Ch+Buf2],	eax
		lea	ebx, [esp+4Ch+var_28]
		mov	[esp+4Ch+Buf1],	ebx
		call	sub_68881748
		mov	eax, [esp+4Ch+var_34]
		xor	edx, edx
		test	eax, eax
		jz	short loc_688A913D
		nop

loc_688A912C:				; CODE XREF: aim_tlvlist_cmp+C3j
		mov	ecx, [eax]
		movzx	ecx, word ptr [ecx+2]
		lea	edx, [edx+ecx+4]
		mov	eax, [eax+4]
		test	eax, eax
		jnz	short loc_688A912C

loc_688A913D:				; CODE XREF: aim_tlvlist_cmp+B1j
		mov	[esp+4Ch+Buf2],	edx
		lea	esi, [esp+4Ch+var_1C]
		mov	[esp+4Ch+Buf1],	esi
		call	sub_68881748
		lea	eax, [esp+4Ch+var_30]
		mov	[esp+4Ch+Buf2],	eax
		mov	[esp+4Ch+Buf1],	ebx
		call	aim_tlvlist_write
		lea	eax, [esp+4Ch+var_34]
		mov	[esp+4Ch+Buf2],	eax
		mov	[esp+4Ch+Buf1],	esi
		call	aim_tlvlist_write
		mov	eax, [esp+4Ch+var_24]
		mov	[esp+4Ch+Size],	eax ; Size
		mov	eax, [esp+4Ch+var_1C]
		mov	[esp+4Ch+Buf2],	eax ; Buf2
		mov	eax, [esp+4Ch+var_28]
		mov	[esp+4Ch+Buf1],	eax ; Buf1
		call	memcmp
		mov	[esp+4Ch+Buf1],	ebx
		test	eax, eax
		jnz	short loc_688A91AC
		call	sub_688817E4
		mov	[esp+4Ch+Buf1],	esi
		call	sub_688817E4
		xor	eax, eax
		jmp	loc_688A90DE
; ---------------------------------------------------------------------------

loc_688A91A4:				; CODE XREF: aim_tlvlist_cmp+25j
		xor	ecx, ecx
		jmp	loc_688A90B9
; ---------------------------------------------------------------------------
		align 4

loc_688A91AC:				; CODE XREF: aim_tlvlist_cmp+116j
		call	sub_688817E4
		mov	[esp+4Ch+Buf1],	esi
		call	sub_688817E4
		mov	eax, 1
		jmp	loc_688A90DE
; ---------------------------------------------------------------------------

loc_688A91C3:				; CODE XREF: aim_tlvlist_cmp+70j
		call	__stack_chk_fail
aim_tlvlist_cmp	endp

; Exported entry 117. aim_tlv_gettlv

; =============== S U B	R O U T	I N E =======================================


		public aim_tlv_gettlv
aim_tlv_gettlv	proc near		; CODE XREF: sub_68884E38+D7p
					; sub_68884E38+11Dp ...

var_10		= dword	ptr -10h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	esi
		push	ebx
		sub	esp, 14h
		mov	edx, [esp+1Ch+arg_0]
		mov	esi, [esp+1Ch+arg_8]
		mov	ebx, [esp+1Ch+arg_4]
		mov	eax, ds:__stack_chk_guard
		mov	[esp+1Ch+var_10], eax
		xor	eax, eax
		test	edx, edx
		jz	short loc_688A9218
		xor	ecx, ecx
		jmp	short loc_688A91F7
; ---------------------------------------------------------------------------

loc_688A91EC:				; CODE XREF: aim_tlv_gettlv+34j
		cmp	ecx, esi
		jge	short loc_688A9204

loc_688A91F0:				; CODE XREF: aim_tlv_gettlv+39j
		mov	edx, [edx+4]
		test	edx, edx
		jz	short loc_688A9218

loc_688A91F7:				; CODE XREF: aim_tlv_gettlv+22j
		mov	eax, [edx]
		cmp	[eax], bx
		jnz	short loc_688A91EC
		inc	ecx
		cmp	ecx, esi
		jl	short loc_688A91F0
		nop

loc_688A9204:				; CODE XREF: aim_tlv_gettlv+26j
					; aim_tlv_gettlv+52j
		mov	edx, [esp+1Ch+var_10]
		xor	edx, ds:__stack_chk_guard
		jnz	short loc_688A921C
		add	esp, 14h
		pop	ebx
		pop	esi
		retn
; ---------------------------------------------------------------------------
		align 4

loc_688A9218:				; CODE XREF: aim_tlv_gettlv+1Ej
					; aim_tlv_gettlv+2Dj
		xor	eax, eax
		jmp	short loc_688A9204
; ---------------------------------------------------------------------------

loc_688A921C:				; CODE XREF: aim_tlv_gettlv+46j
		call	__stack_chk_fail
aim_tlv_gettlv	endp

; ---------------------------------------------------------------------------
		align 4
; Exported entry 115. aim_tlv_getlength

; =============== S U B	R O U T	I N E =======================================


		public aim_tlv_getlength
aim_tlv_getlength proc near		; CODE XREF: sub_6888B528+E82p

var_10		= dword	ptr -10h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	esi
		push	ebx
		sub	esp, 14h
		mov	eax, [esp+1Ch+arg_0]
		mov	esi, [esp+1Ch+arg_8]
		mov	ebx, [esp+1Ch+arg_4]
		mov	edx, ds:__stack_chk_guard
		mov	[esp+1Ch+var_10], edx
		xor	edx, edx
		test	eax, eax
		jz	short loc_688A926C
		xor	ecx, ecx
		jmp	short loc_688A9257
; ---------------------------------------------------------------------------
		align 4

loc_688A924C:				; CODE XREF: aim_tlv_getlength+38j
		cmp	esi, ecx
		jle	short loc_688A9263

loc_688A9250:				; CODE XREF: aim_tlv_getlength+3Dj
		mov	eax, [eax+4]
		test	eax, eax
		jz	short loc_688A926C

loc_688A9257:				; CODE XREF: aim_tlv_getlength+23j
		mov	edx, [eax]
		cmp	bx, [edx]
		jnz	short loc_688A924C
		inc	ecx
		cmp	esi, ecx
		jg	short loc_688A9250

loc_688A9263:				; CODE XREF: aim_tlv_getlength+2Aj
		movzx	eax, word ptr [edx+2]
		jmp	short loc_688A9271
; ---------------------------------------------------------------------------
		align 4

loc_688A926C:				; CODE XREF: aim_tlv_getlength+1Fj
					; aim_tlv_getlength+31j
		mov	eax, 0FFFFFFFFh

loc_688A9271:				; CODE XREF: aim_tlv_getlength+43j
		mov	edx, [esp+1Ch+var_10]
		xor	edx, ds:__stack_chk_guard
		jnz	short loc_688A9283
		add	esp, 14h
		pop	ebx
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_688A9283:				; CODE XREF: aim_tlv_getlength+57j
		call	__stack_chk_fail
aim_tlv_getlength endp

; Exported entry 118. aim_tlv_getvalue_as_string

; =============== S U B	R O U T	I N E =======================================


		public aim_tlv_getvalue_as_string
aim_tlv_getvalue_as_string proc	near	; CODE XREF: sub_68886554+305p
					; sub_6888F450+50Cp ...

var_2C		= dword	ptr -2Ch
var_10		= dword	ptr -10h
arg_0		= dword	ptr  4

		push	edi
		push	esi
		push	ebx
		sub	esp, 20h
		mov	ebx, [esp+2Ch+arg_0]
		mov	eax, ds:__stack_chk_guard
		mov	[esp+2Ch+var_10], eax
		xor	eax, eax
		movzx	eax, word ptr [ebx+2]
		inc	eax
		mov	[esp+2Ch+var_2C], eax
		call	g_malloc
		movzx	edx, word ptr [ebx+2]
		mov	esi, [ebx+4]
		mov	edi, eax
		mov	ecx, edx
		rep movsb
		mov	byte ptr [eax+edx], 0
		mov	edx, [esp+2Ch+var_10]
		xor	edx, ds:__stack_chk_guard
		jnz	short loc_688A92CE
		add	esp, 20h
		pop	ebx
		pop	esi
		pop	edi
		retn
; ---------------------------------------------------------------------------

loc_688A92CE:				; CODE XREF: aim_tlv_getvalue_as_string+3Dj
		call	__stack_chk_fail
aim_tlv_getvalue_as_string endp

; ---------------------------------------------------------------------------
		align 4
; Exported entry 116. aim_tlv_getstr

; =============== S U B	R O U T	I N E =======================================


		public aim_tlv_getstr
aim_tlv_getstr	proc near		; CODE XREF: sub_688846FC+153p
					; sub_688846FC+19Bp ...

var_10		= dword	ptr -10h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	esi
		push	ebx
		sub	esp, 14h
		mov	eax, [esp+1Ch+arg_0]
		mov	esi, [esp+1Ch+arg_8]
		mov	ebx, [esp+1Ch+arg_4]
		mov	edx, ds:__stack_chk_guard
		mov	[esp+1Ch+var_10], edx
		xor	edx, edx
		test	eax, eax
		jz	short loc_688A9330
		xor	ecx, ecx
		jmp	short loc_688A9307
; ---------------------------------------------------------------------------
		align 4

loc_688A92FC:				; CODE XREF: aim_tlv_getstr+38j
		cmp	esi, ecx
		jle	short loc_688A9313

loc_688A9300:				; CODE XREF: aim_tlv_getstr+3Dj
		mov	eax, [eax+4]
		test	eax, eax
		jz	short loc_688A9330

loc_688A9307:				; CODE XREF: aim_tlv_getstr+23j
		mov	edx, [eax]
		cmp	bx, [edx]
		jnz	short loc_688A92FC
		inc	ecx
		cmp	esi, ecx
		jg	short loc_688A9300

loc_688A9313:				; CODE XREF: aim_tlv_getstr+2Aj
		mov	eax, [esp+1Ch+var_10]
		xor	eax, ds:__stack_chk_guard
		jnz	short loc_688A9344
		mov	[esp+1Ch+arg_0], edx
		add	esp, 14h
		pop	ebx
		pop	esi
		jmp	aim_tlv_getvalue_as_string
; ---------------------------------------------------------------------------
		align 10h

loc_688A9330:				; CODE XREF: aim_tlv_getstr+1Fj
					; aim_tlv_getstr+31j
		xor	eax, eax
		mov	edx, [esp+1Ch+var_10]
		xor	edx, ds:__stack_chk_guard
		jnz	short loc_688A9344
		add	esp, 14h
		pop	ebx
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_688A9344:				; CODE XREF: aim_tlv_getstr+49j
					; aim_tlv_getstr+68j
		call	__stack_chk_fail
aim_tlv_getstr	endp

; ---------------------------------------------------------------------------
		align 4
; Exported entry 114. aim_tlv_get8

; =============== S U B	R O U T	I N E =======================================


		public aim_tlv_get8
aim_tlv_get8	proc near		; CODE XREF: sub_688846FC+16Ep
					; sub_68886D3C+311p ...

var_10		= dword	ptr -10h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	esi
		push	ebx
		sub	esp, 14h
		mov	eax, [esp+1Ch+arg_0]
		mov	esi, [esp+1Ch+arg_8]
		mov	ebx, [esp+1Ch+arg_4]
		mov	edx, ds:__stack_chk_guard
		mov	[esp+1Ch+var_10], edx
		xor	edx, edx
		test	eax, eax
		jz	short loc_688A93A2
		xor	ecx, ecx
		jmp	short loc_688A937F
; ---------------------------------------------------------------------------
		align 4

loc_688A9374:				; CODE XREF: aim_tlv_get8+38j
		cmp	esi, ecx
		jle	short loc_688A938B

loc_688A9378:				; CODE XREF: aim_tlv_get8+3Dj
		mov	eax, [eax+4]
		test	eax, eax
		jz	short loc_688A9390

loc_688A937F:				; CODE XREF: aim_tlv_get8+23j
		mov	edx, [eax]
		cmp	bx, [edx]
		jnz	short loc_688A9374
		inc	ecx
		cmp	esi, ecx
		jg	short loc_688A9378

loc_688A938B:				; CODE XREF: aim_tlv_get8+2Aj
		mov	eax, [edx+4]
		mov	al, [eax]

loc_688A9390:				; CODE XREF: aim_tlv_get8+31j
					; aim_tlv_get8+58j
		mov	edx, [esp+1Ch+var_10]
		xor	edx, ds:__stack_chk_guard
		jnz	short loc_688A93A6
		add	esp, 14h
		pop	ebx
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_688A93A2:				; CODE XREF: aim_tlv_get8+1Fj
		xor	eax, eax
		jmp	short loc_688A9390
; ---------------------------------------------------------------------------

loc_688A93A6:				; CODE XREF: aim_tlv_get8+4Ej
		call	__stack_chk_fail
aim_tlv_get8	endp

; ---------------------------------------------------------------------------
		align 4
; Exported entry 112. aim_tlv_get16

; =============== S U B	R O U T	I N E =======================================


		public aim_tlv_get16
aim_tlv_get16	proc near		; CODE XREF: sub_688846FC+11Dp
					; sub_688846FC+1B6p ...

var_10		= dword	ptr -10h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	esi
		push	ebx
		sub	esp, 14h
		mov	eax, [esp+1Ch+arg_0]
		mov	esi, [esp+1Ch+arg_8]
		mov	ebx, [esp+1Ch+arg_4]
		mov	edx, ds:__stack_chk_guard
		mov	[esp+1Ch+var_10], edx
		xor	edx, edx
		test	eax, eax
		jz	short loc_688A940C
		xor	ecx, ecx
		jmp	short loc_688A93DF
; ---------------------------------------------------------------------------
		align 4

loc_688A93D4:				; CODE XREF: aim_tlv_get16+38j
		cmp	esi, ecx
		jle	short loc_688A93EB

loc_688A93D8:				; CODE XREF: aim_tlv_get16+3Dj
		mov	eax, [eax+4]
		test	eax, eax
		jz	short loc_688A93FA

loc_688A93DF:				; CODE XREF: aim_tlv_get16+23j
		mov	edx, [eax]
		cmp	bx, [edx]
		jnz	short loc_688A93D4
		inc	ecx
		cmp	esi, ecx
		jg	short loc_688A93D8

loc_688A93EB:				; CODE XREF: aim_tlv_get16+2Aj
		mov	edx, [edx+4]
		movzx	eax, byte ptr [edx]
		shl	eax, 8
		movzx	edx, byte ptr [edx+1]
		add	eax, edx

loc_688A93FA:				; CODE XREF: aim_tlv_get16+31j
					; aim_tlv_get16+62j
		mov	edx, [esp+1Ch+var_10]
		xor	edx, ds:__stack_chk_guard
		jnz	short loc_688A9410
		add	esp, 14h
		pop	ebx
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_688A940C:				; CODE XREF: aim_tlv_get16+1Fj
		xor	eax, eax
		jmp	short loc_688A93FA
; ---------------------------------------------------------------------------

loc_688A9410:				; CODE XREF: aim_tlv_get16+58j
		call	__stack_chk_fail
aim_tlv_get16	endp

; ---------------------------------------------------------------------------
		align 4
; Exported entry 113. aim_tlv_get32

; =============== S U B	R O U T	I N E =======================================


		public aim_tlv_get32
aim_tlv_get32	proc near		; CODE XREF: sub_68884E38+294p
					; sub_68884E38+370p ...

var_10		= dword	ptr -10h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	esi
		push	ebx
		sub	esp, 14h
		mov	eax, [esp+1Ch+arg_0]
		mov	esi, [esp+1Ch+arg_8]
		mov	ebx, [esp+1Ch+arg_4]
		mov	edx, ds:__stack_chk_guard
		mov	[esp+1Ch+var_10], edx
		xor	edx, edx
		test	eax, eax
		jz	short loc_688A948A
		xor	ecx, ecx
		jmp	short loc_688A944B
; ---------------------------------------------------------------------------
		align 10h

loc_688A9440:				; CODE XREF: aim_tlv_get32+38j
		cmp	esi, ecx
		jle	short loc_688A9457

loc_688A9444:				; CODE XREF: aim_tlv_get32+3Dj
		mov	eax, [eax+4]
		test	eax, eax
		jz	short loc_688A9478

loc_688A944B:				; CODE XREF: aim_tlv_get32+23j
		mov	edx, [eax]
		cmp	bx, [edx]
		jnz	short loc_688A9440
		inc	ecx
		cmp	esi, ecx
		jg	short loc_688A9444

loc_688A9457:				; CODE XREF: aim_tlv_get32+2Aj
		mov	edx, [edx+4]
		movzx	eax, byte ptr [edx]
		shl	eax, 18h
		movzx	ecx, byte ptr [edx+3]
		add	ecx, eax
		movzx	eax, byte ptr [edx+1]
		shl	eax, 10h
		add	ecx, eax
		movzx	eax, byte ptr [edx+2]
		shl	eax, 8
		add	eax, ecx

loc_688A9478:				; CODE XREF: aim_tlv_get32+31j
					; aim_tlv_get32+74j
		mov	edx, [esp+1Ch+var_10]
		xor	edx, ds:__stack_chk_guard
		jnz	short loc_688A948E
		add	esp, 14h
		pop	ebx
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_688A948A:				; CODE XREF: aim_tlv_get32+1Fj
		xor	eax, eax
		jmp	short loc_688A9478
; ---------------------------------------------------------------------------

loc_688A948E:				; CODE XREF: aim_tlv_get32+6Aj
		call	__stack_chk_fail
aim_tlv_get32	endp

; ---------------------------------------------------------------------------
		align 4

; =============== S U B	R O U T	I N E =======================================


sub_688A9494	proc near		; CODE XREF: oscar_user_info_append_extra_info+1E7p
					; oscar_user_info_append_extra_info+24Ep ...

var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_10		= dword	ptr -10h

		push	ebx
		sub	esp, 28h
		mov	ebx, ds:__stack_chk_guard
		mov	[esp+2Ch+var_10], ebx
		xor	ebx, ebx
		test	ecx, ecx
		jz	short loc_688A94BD
		cmp	byte ptr [ecx],	0
		jz	short loc_688A94BD
		mov	[esp+2Ch+var_24], ecx
		mov	[esp+2Ch+var_28], edx
		mov	[esp+2Ch+var_2C], eax
		call	purple_notify_user_info_add_pair

loc_688A94BD:				; CODE XREF: sub_688A9494+12j
					; sub_688A9494+17j
		mov	eax, [esp+2Ch+var_10]
		xor	eax, ds:__stack_chk_guard
		jnz	short loc_688A94CE
		add	esp, 28h
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_688A94CE:				; CODE XREF: sub_688A9494+33j
		call	__stack_chk_fail
sub_688A9494	endp

; ---------------------------------------------------------------------------
		align 4

; =============== S U B	R O U T	I N E =======================================


sub_688A94D4	proc near		; CODE XREF: oscar_user_info_append_extra_info+150p
					; oscar_user_info_display_icq+11Dp ...

var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_20		= dword	ptr -20h
var_10		= dword	ptr -10h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	edi
		push	esi
		push	ebx
		sub	esp, 30h
		mov	esi, [esp+3Ch+arg_0]
		mov	ebx, [esp+3Ch+arg_4]
		mov	edi, ds:__stack_chk_guard
		mov	[esp+3Ch+var_10], edi
		xor	edi, edi
		test	ebx, ebx
		jz	short loc_688A94F7
		cmp	byte ptr [ebx],	0
		jnz	short loc_688A950C

loc_688A94F7:				; CODE XREF: sub_688A94D4+1Cj
					; sub_688A94D4+54j
		mov	edi, [esp+3Ch+var_10]
		xor	edi, ds:__stack_chk_guard
		jnz	short loc_688A9555
		add	esp, 30h
		pop	ebx
		pop	esi
		pop	edi
		retn
; ---------------------------------------------------------------------------
		align 4

loc_688A950C:				; CODE XREF: sub_688A94D4+21j
		mov	[esp+3Ch+var_34], ebx
		mov	[esp+3Ch+var_38], edx
		mov	[esp+3Ch+var_3C], eax
		mov	[esp+3Ch+var_20], ecx
		call	oscar_utf8_try_convert
		mov	ebx, eax
		test	eax, eax
		mov	ecx, [esp+3Ch+var_20]
		jz	short loc_688A94F7
		mov	[esp+3Ch+var_34], eax
		mov	[esp+3Ch+var_38], esi
		mov	[esp+3Ch+var_3C], ecx
		call	purple_notify_user_info_add_pair
		mov	eax, [esp+3Ch+var_10]
		xor	eax, ds:__stack_chk_guard
		jnz	short loc_688A9555
		mov	[esp+3Ch+arg_0], ebx
		add	esp, 30h
		pop	ebx
		pop	esi
		pop	edi
		jmp	g_free
; ---------------------------------------------------------------------------

loc_688A9555:				; CODE XREF: sub_688A94D4+2Dj
					; sub_688A94D4+70j
		call	__stack_chk_fail
sub_688A94D4	endp

; ---------------------------------------------------------------------------
		align 4

; =============== S U B	R O U T	I N E =======================================


sub_688A955C	proc near		; CODE XREF: oscar_user_info_display_icq+1B5p
					; oscar_user_info_display_icq+20Bp ...

var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_30		= dword	ptr -30h
var_20		= dword	ptr -20h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 3Ch
		mov	esi, [esp+4Ch+arg_0]
		mov	ebx, [esp+4Ch+arg_4]
		mov	edi, [esp+4Ch+arg_8]
		mov	ebp, ds:__stack_chk_guard
		mov	[esp+4Ch+var_20], ebp
		xor	ebp, ebp
		test	ebx, ebx
		jz	short loc_688A9584
		cmp	byte ptr [ebx],	0
		jnz	short loc_688A9598

loc_688A9584:				; CODE XREF: sub_688A955C+21j
					; sub_688A955C+54j
		mov	ebp, [esp+4Ch+var_20]
		xor	ebp, ds:__stack_chk_guard
		jnz	short loc_688A9604
		add	esp, 3Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_688A9598:				; CODE XREF: sub_688A955C+26j
		mov	[esp+4Ch+var_44], ebx
		mov	[esp+4Ch+var_48], edx
		mov	[esp+4Ch+var_4C], eax
		mov	[esp+4Ch+var_30], ecx
		call	oscar_utf8_try_convert
		mov	ebx, eax
		test	eax, eax
		jz	short loc_688A9584
		mov	[esp+4Ch+var_40], eax
		mov	[esp+4Ch+var_44], eax
		mov	[esp+4Ch+var_48], edi
		mov	[esp+4Ch+var_4C], offset aAHrefSSSA ; "<a href=\"%s%s\">%s</a>"
		call	g_strdup_printf
		mov	edi, eax
		mov	[esp+4Ch+var_44], eax
		mov	[esp+4Ch+var_48], esi
		mov	ecx, [esp+4Ch+var_30]
		mov	[esp+4Ch+var_4C], ecx
		call	purple_notify_user_info_add_pair
		mov	[esp+4Ch+var_4C], ebx
		call	g_free
		mov	eax, [esp+4Ch+var_20]
		xor	eax, ds:__stack_chk_guard
		jnz	short loc_688A9604
		mov	[esp+4Ch+arg_0], edi
		add	esp, 3Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		jmp	g_free
; ---------------------------------------------------------------------------

loc_688A9604:				; CODE XREF: sub_688A955C+32j
					; sub_688A955C+96j
		call	__stack_chk_fail
sub_688A955C	endp

; ---------------------------------------------------------------------------
		align 4
; Exported entry 276. oscar_user_info_append_status

; =============== S U B	R O U T	I N E =======================================


		public oscar_user_info_append_status
oscar_user_info_append_status proc near	; CODE XREF: oscar_tooltip_text+B5p
					; oscar_user_info_display_icq+30Bp ...

Str1		= dword	ptr -5Ch
Str2		= dword	ptr -58h
var_54		= dword	ptr -54h
var_50		= dword	ptr -50h
var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_20		= dword	ptr -20h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 4Ch
		mov	ebx, [esp+5Ch+arg_0]
		mov	edx, [esp+5Ch+arg_4]
		mov	[esp+5Ch+var_3C], edx
		mov	edi, [esp+5Ch+arg_8]
		mov	esi, [esp+5Ch+arg_C]
		mov	edx, [esp+5Ch+arg_10]
		mov	[esp+5Ch+var_38], edx
		mov	eax, ds:__stack_chk_guard
		mov	[esp+5Ch+var_20], eax
		xor	eax, eax
		mov	[esp+5Ch+Str1],	ebx
		call	purple_connection_get_account
		mov	[esp+5Ch+var_40], eax
		mov	[esp+5Ch+Str1],	ebx
		call	purple_connection_get_protocol_data
		mov	[esp+5Ch+var_30], eax
		test	edi, edi
		jz	loc_688A9AB0
		mov	[esp+5Ch+Str1],	edi
		call	purple_buddy_get_name
		mov	[esp+5Ch+Str2],	eax
		mov	eax, [esp+5Ch+var_30]
		mov	[esp+5Ch+Str1],	eax
		call	aim_locate_finduserinfo
		mov	esi, eax
		mov	[esp+5Ch+Str1],	edi
		call	purple_buddy_get_presence
		mov	ebp, eax
		mov	[esp+5Ch+Str1],	eax
		call	purple_presence_get_active_status
		mov	[esp+5Ch+var_34], eax
		test	esi, esi
		jz	loc_688A9B14

loc_688A9692:				; CODE XREF: oscar_user_info_append_status+4D6j
					; oscar_user_info_append_status+5CFj
		test	byte ptr [esi+8], 20h
		jz	short loc_688A96D8
		mov	ebx, [esp+5Ch+var_38]
		test	ebx, ebx
		jz	short loc_688A96D8
		movzx	eax, word ptr [esi+90h]
		test	ax, ax
		jz	short loc_688A96D8
		mov	edx, [esi+88h]
		test	edx, edx
		jz	short loc_688A96D8
		mov	ecx, [esi+8Ch]
		test	ecx, ecx
		jz	short loc_688A96D8
		mov	[esp+5Ch+var_54], eax ;	int
		mov	[esp+5Ch+Str2],	edx ; int
		mov	[esp+5Ch+Str1],	ecx ; char *
		call	oscar_encoding_to_utf8
		mov	ebx, eax
		xor	ecx, ecx
		xor	edx, edx
		jmp	short loc_688A9701
; ---------------------------------------------------------------------------

loc_688A96D8:				; CODE XREF: oscar_user_info_append_status+8Aj
					; oscar_user_info_append_status+92j ...
		mov	eax, [esi+70h]
		test	eax, eax
		jz	short loc_688A96E8
		cmp	byte ptr [eax],	0
		jnz	loc_688A9950

loc_688A96E8:				; CODE XREF: oscar_user_info_append_status+D1j
		xor	ebx, ebx

loc_688A96EA:				; CODE XREF: oscar_user_info_append_status+35Dj
		mov	eax, [esi+7Ch]
		test	eax, eax
		jz	short loc_688A96FA
		cmp	byte ptr [eax],	0
		jnz	loc_688A99C4

loc_688A96FA:				; CODE XREF: oscar_user_info_append_status+E3j
		mov	ecx, 1
		xor	edx, edx

loc_688A9701:				; CODE XREF: oscar_user_info_append_status+CAj
					; oscar_user_info_append_status+3DCj ...
		test	ebx, ebx
		jz	short loc_688A9745
		mov	eax, [esp+5Ch+var_40]
		mov	[esp+5Ch+Str1],	eax
		mov	[esp+5Ch+var_48], edx
		mov	[esp+5Ch+var_44], ecx
		call	purple_account_get_username
		mov	[esp+5Ch+Str2],	eax
		mov	[esp+5Ch+Str1],	ebx
		call	oscar_util_format_string
		mov	[esp+5Ch+var_40], eax
		mov	[esp+5Ch+Str1],	ebx
		call	g_free
		mov	ecx, [esp+5Ch+var_44]
		test	ecx, ecx
		mov	edx, [esp+5Ch+var_48]
		jnz	loc_688A9A78
		mov	ebx, [esp+5Ch+var_40]

loc_688A9745:				; CODE XREF: oscar_user_info_append_status+F7j
		mov	ecx, [esp+5Ch+var_38]
		test	ecx, ecx
		jz	short loc_688A9777

loc_688A974D:				; CODE XREF: oscar_user_info_append_status+49Ej
		test	edx, edx
		jz	short loc_688A9777
		mov	[esp+5Ch+var_54], ebx
		mov	[esp+5Ch+Str2],	edx
		mov	[esp+5Ch+Str1],	offset aAHrefSSA_0 ; "<a href=\"%s\">%s</a>"
		call	g_strdup_printf
		mov	[esp+5Ch+Str1],	ebx
		mov	[esp+5Ch+var_44], eax
		call	g_free
		mov	eax, [esp+5Ch+var_44]
		mov	ebx, eax

loc_688A9777:				; CODE XREF: oscar_user_info_append_status+13Fj
					; oscar_user_info_append_status+143j ...
		test	edi, edi
		jz	loc_688A9843
		mov	[esp+5Ch+Str1],	ebp
		call	purple_presence_is_online
		test	eax, eax
		jz	loc_688A99F0
		mov	eax, [esp+5Ch+var_34]
		test	eax, eax
		jz	loc_688A9970
		mov	eax, [esp+5Ch+var_34]
		mov	[esp+5Ch+Str1],	eax
		call	purple_status_is_available
		test	eax, eax
		jnz	loc_688A9970

loc_688A97AF:				; CODE XREF: oscar_user_info_append_status+36Cj
		mov	[esp+5Ch+Str1],	edi
		call	purple_buddy_get_name
		mov	[esp+5Ch+Str1],	eax
		call	oscar_util_valid_name_icq

loc_688A97BF:				; CODE XREF: oscar_user_info_append_status+384j
		mov	eax, [esp+5Ch+var_34]
		mov	[esp+5Ch+Str1],	eax
		call	purple_status_get_name
		mov	esi, eax
		test	eax, eax
		jz	loc_688A9B5C
		test	ebx, ebx
		jz	short loc_688A9818

loc_688A97D9:				; CODE XREF: oscar_user_info_append_status+3ABj
		mov	[esp+5Ch+Str2],	ebx ; Str2
		mov	[esp+5Ch+Str1],	esi ; Str1
		call	strcmp
		test	eax, eax
		jnz	short loc_688A97EB
		xor	esi, esi

loc_688A97EB:				; CODE XREF: oscar_user_info_append_status+1DBj
					; oscar_user_info_append_status+3B1j ...
		cmp	byte ptr [ebx],	0
		jnz	loc_688A9B97
		test	esi, esi
		jnz	short loc_688A9818

loc_688A97F8:				; CODE XREF: oscar_user_info_append_status+20Aj
					; oscar_user_info_append_status+558j
		mov	edx, offset byte_688B5C11

loc_688A97FD:				; CODE XREF: oscar_user_info_append_status+59Aj
		mov	eax, offset byte_688B5C11
		mov	esi, eax
		jmp	short loc_688A981F
; ---------------------------------------------------------------------------

loc_688A9806:				; CODE XREF: oscar_user_info_append_status+38Cj
		mov	eax, [esp+5Ch+var_34]
		mov	[esp+5Ch+Str1],	eax
		call	purple_status_get_name
		mov	esi, eax
		test	eax, eax
		jz	short loc_688A97F8

loc_688A9818:				; CODE XREF: oscar_user_info_append_status+1CBj
					; oscar_user_info_append_status+1EAj
		mov	edx, offset byte_688B5C11
		mov	eax, edx

loc_688A981F:				; CODE XREF: oscar_user_info_append_status+1F8j
					; oscar_user_info_append_status+594j
		mov	[esp+5Ch+var_50], edx
		mov	[esp+5Ch+var_54], eax
		mov	[esp+5Ch+Str2],	esi

loc_688A982B:				; CODE XREF: oscar_user_info_append_status+466j
		mov	[esp+5Ch+Str1],	offset aSSS ; "%s%s%s"
		call	g_strdup_printf
		mov	esi, eax
		mov	[esp+5Ch+Str1],	ebx
		call	g_free
		mov	ebx, esi

loc_688A9843:				; CODE XREF: oscar_user_info_append_status+16Dj
					; oscar_user_info_append_status+395j ...
		test	ebp, ebp
		jz	loc_688A9907
		mov	[esp+5Ch+Str2],	offset aMood_2 ; "mood"
		mov	[esp+5Ch+Str1],	ebp
		call	purple_presence_get_status
		mov	edi, eax
		mov	[esp+5Ch+Str2],	offset aMood_2 ; "mood"
		mov	[esp+5Ch+Str1],	eax
		call	purple_status_get_attr_string
		mov	[esp+5Ch+Str1],	eax ; char *
		call	icq_get_custom_icon_description
		mov	esi, eax
		test	eax, eax
		jz	loc_688A9907
		mov	[esp+5Ch+Str2],	offset aMoodtext_1 ; "moodtext"
		mov	[esp+5Ch+Str1],	edi
		call	purple_status_get_attr_string
		test	eax, eax
		jz	loc_688A9AF4
		mov	[esp+5Ch+Str2],	0FFFFFFFFh
		mov	[esp+5Ch+Str1],	eax
		call	purple_markup_escape_text
		mov	edi, eax
		mov	[esp+5Ch+Str2],	esi
		mov	[esp+5Ch+Str1],	offset aPidgin_8 ; "pidgin"
		call	libintl_dgettext
		mov	[esp+5Ch+var_54], edi
		mov	[esp+5Ch+Str2],	eax
		mov	[esp+5Ch+Str1],	offset aSS_2 ; "%s (%s)"
		call	g_strdup_printf
		mov	esi, eax
		mov	[esp+5Ch+Str1],	edi
		call	g_free

loc_688A98D7:				; CODE XREF: oscar_user_info_append_status+502j
		mov	[esp+5Ch+Str2],	offset aMood_3 ; "Mood"
		mov	[esp+5Ch+Str1],	offset aPidgin_8 ; "pidgin"
		call	libintl_dgettext
		mov	[esp+5Ch+var_54], esi
		mov	[esp+5Ch+Str2],	eax
		mov	edx, [esp+5Ch+var_3C]
		mov	[esp+5Ch+Str1],	edx
		call	purple_notify_user_info_add_pair
		mov	[esp+5Ch+Str1],	esi
		call	g_free

loc_688A9907:				; CODE XREF: oscar_user_info_append_status+239j
					; oscar_user_info_append_status+26Dj
		mov	[esp+5Ch+Str2],	offset aStatus ; "Status"
		mov	[esp+5Ch+Str1],	offset aPidgin_8 ; "pidgin"
		call	libintl_dgettext
		mov	[esp+5Ch+var_54], ebx
		mov	[esp+5Ch+Str2],	eax
		mov	edx, [esp+5Ch+var_3C]
		mov	[esp+5Ch+Str1],	edx
		call	purple_notify_user_info_add_pair
		mov	eax, [esp+5Ch+var_20]
		xor	eax, ds:__stack_chk_guard
		jnz	loc_688A9BC0
		mov	[esp+5Ch+arg_0], ebx
		add	esp, 4Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		jmp	g_free
; ---------------------------------------------------------------------------
		align 10h

loc_688A9950:				; CODE XREF: oscar_user_info_append_status+D6j
		movzx	edx, word ptr [esi+78h]
		mov	[esp+5Ch+var_54], edx ;	int
		mov	[esp+5Ch+Str2],	eax ; int
		mov	eax, [esi+74h]
		mov	[esp+5Ch+Str1],	eax ; char *
		call	oscar_encoding_to_utf8
		mov	ebx, eax
		jmp	loc_688A96EA
; ---------------------------------------------------------------------------
		align 10h

loc_688A9970:				; CODE XREF: oscar_user_info_append_status+189j
					; oscar_user_info_append_status+19Dj
		test	esi, esi
		jz	short loc_688A997E
		test	byte ptr [esi+8], 20h
		jnz	loc_688A97AF

loc_688A997E:				; CODE XREF: oscar_user_info_append_status+366j
		mov	[esp+5Ch+Str1],	edi
		call	purple_buddy_get_name
		mov	[esp+5Ch+Str1],	eax
		call	oscar_util_valid_name_icq
		test	eax, eax
		jnz	loc_688A97BF
		test	ebx, ebx
		jz	loc_688A9806
		cmp	byte ptr [ebx],	0
		jnz	loc_688A9843
		mov	eax, [esp+5Ch+var_34]
		mov	[esp+5Ch+Str1],	eax
		call	purple_status_get_name
		mov	esi, eax
		test	eax, eax
		jnz	loc_688A97D9
		jmp	loc_688A97EB
; ---------------------------------------------------------------------------
		align 4

loc_688A99C4:				; CODE XREF: oscar_user_info_append_status+E8j
		movzx	edx, word ptr [esi+84h]
		mov	[esp+5Ch+var_54], edx ;	int
		mov	[esp+5Ch+Str2],	eax ; int
		mov	eax, [esi+80h]
		mov	[esp+5Ch+Str1],	eax ; char *
		call	oscar_encoding_to_utf8
		mov	edx, eax
		mov	ecx, 1
		jmp	loc_688A9701
; ---------------------------------------------------------------------------
		align 10h

loc_688A99F0:				; CODE XREF: oscar_user_info_append_status+17Dj
		mov	[esp+5Ch+Str1],	edi
		call	purple_buddy_get_name
		mov	esi, eax
		mov	[esp+5Ch+Str1],	edi
		call	purple_buddy_get_name
		mov	[esp+5Ch+Str2],	eax
		mov	edx, [esp+5Ch+var_30]
		mov	eax, [edx+0D8h]
		mov	[esp+5Ch+Str1],	eax
		call	aim_ssi_itemlist_findparentname
		mov	[esp+5Ch+var_54], esi
		mov	[esp+5Ch+Str2],	eax
		mov	edx, [esp+5Ch+var_30]
		mov	eax, [edx+0D8h]
		mov	[esp+5Ch+Str1],	eax
		call	aim_ssi_waitingforauth
		test	eax, eax
		jz	loc_688A9B6C
		test	ebx, ebx
		jz	loc_688A9AE8
		cmp	byte ptr [ebx],	0
		jz	loc_688A9AE8
		mov	edi, ebx
		mov	esi, offset asc_688B5C0E ; ": "

loc_688A9A52:				; CODE XREF: oscar_user_info_append_status+4E3j
		mov	[esp+5Ch+Str2],	offset aNotAuthorize_1 ; "Not Authorized"
		mov	[esp+5Ch+Str1],	offset aPidgin_8 ; "pidgin"
		call	libintl_dgettext
		mov	[esp+5Ch+var_50], edi
		mov	[esp+5Ch+var_54], esi
		mov	[esp+5Ch+Str2],	eax
		jmp	loc_688A982B
; ---------------------------------------------------------------------------
		align 4

loc_688A9A78:				; CODE XREF: oscar_user_info_append_status+12Fj
		mov	[esp+5Ch+Str2],	0FFFFFFFFh
		mov	eax, [esp+5Ch+var_40]
		mov	[esp+5Ch+Str1],	eax
		call	purple_markup_escape_text
		mov	ebx, eax
		mov	eax, [esp+5Ch+var_40]
		mov	[esp+5Ch+Str1],	eax
		call	g_free
		mov	edx, [esp+5Ch+var_48]
		mov	ecx, [esp+5Ch+var_38]
		test	ecx, ecx
		jz	loc_688A9777
		jmp	loc_688A974D
; ---------------------------------------------------------------------------
		align 10h

loc_688A9AB0:				; CODE XREF: oscar_user_info_append_status+48j
		test	esi, esi
		jz	loc_688A9BAC
		mov	edi, [esi]
		mov	[esp+5Ch+Str1],	ebx
		call	purple_connection_get_account
		mov	[esp+5Ch+Str2],	edi
		mov	[esp+5Ch+Str1],	eax
		call	purple_find_buddy
		mov	edi, eax
		test	eax, eax
		jnz	loc_688A9BC5
		mov	[esp+5Ch+var_34], 0
		xor	ebp, ebp
		jmp	loc_688A9692
; ---------------------------------------------------------------------------
		align 4

loc_688A9AE8:				; CODE XREF: oscar_user_info_append_status+430j
					; oscar_user_info_append_status+439j
		mov	edi, offset byte_688B5C11
		mov	esi, edi
		jmp	loc_688A9A52
; ---------------------------------------------------------------------------

loc_688A9AF4:				; CODE XREF: oscar_user_info_append_status+285j
		mov	[esp+5Ch+Str2],	esi
		mov	[esp+5Ch+Str1],	offset aPidgin_8 ; "pidgin"
		call	libintl_dgettext
		mov	[esp+5Ch+Str1],	eax
		call	g_strdup
		mov	esi, eax
		jmp	loc_688A98D7
; ---------------------------------------------------------------------------
		align 4

loc_688A9B14:				; CODE XREF: oscar_user_info_append_status+80j
		mov	[esp+5Ch+Str2],	offset aMessage_3 ; "message"
		mov	eax, [esp+5Ch+var_34]
		mov	[esp+5Ch+Str1],	eax
		call	purple_status_get_attr_string
		mov	[esp+5Ch+Str1],	eax
		call	g_strdup
		mov	ebx, eax
		mov	[esp+5Ch+Str2],	offset aItmsurl_0 ; "itmsurl"
		mov	eax, [esp+5Ch+var_34]
		mov	[esp+5Ch+Str1],	eax
		call	purple_status_get_attr_string
		mov	[esp+5Ch+Str1],	eax
		call	g_strdup
		mov	edx, eax
		mov	ecx, 1
		jmp	loc_688A9701
; ---------------------------------------------------------------------------
		align 4

loc_688A9B5C:				; CODE XREF: oscar_user_info_append_status+1C3j
		test	ebx, ebx
		jnz	loc_688A97EB
		jmp	loc_688A97F8
; ---------------------------------------------------------------------------
		align 4

loc_688A9B6C:				; CODE XREF: oscar_user_info_append_status+428j
		mov	[esp+5Ch+Str1],	ebx
		call	g_free
		mov	[esp+5Ch+Str2],	offset aOffline_1 ; "Offline"
		mov	[esp+5Ch+Str1],	offset aPidgin_8 ; "pidgin"
		call	libintl_dgettext
		mov	[esp+5Ch+Str1],	eax
		call	g_strdup
		mov	ebx, eax
		jmp	loc_688A9843
; ---------------------------------------------------------------------------

loc_688A9B97:				; CODE XREF: oscar_user_info_append_status+1E2j
		mov	edx, ebx
		mov	eax, offset asc_688B5C0E ; ": "
		test	esi, esi
		jnz	loc_688A981F
		jmp	loc_688A97FD
; ---------------------------------------------------------------------------
		align 4

loc_688A9BAC:				; CODE XREF: oscar_user_info_append_status+4A6j
		mov	edx, [esp+5Ch+var_20]
		xor	edx, ds:__stack_chk_guard
		jnz	short loc_688A9BC0
		add	esp, 4Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_688A9BC0:				; CODE XREF: oscar_user_info_append_status+32Dj
					; oscar_user_info_append_status+5AAj
		call	__stack_chk_fail
; ---------------------------------------------------------------------------

loc_688A9BC5:				; CODE XREF: oscar_user_info_append_status+4C6j
		mov	[esp+5Ch+Str1],	eax
		call	purple_buddy_get_presence
		mov	ebp, eax
		mov	[esp+5Ch+Str1],	eax
		call	purple_presence_get_active_status
		mov	[esp+5Ch+var_34], eax
		jmp	loc_688A9692
oscar_user_info_append_status endp

; Exported entry 275. oscar_user_info_append_extra_info

; =============== S U B	R O U T	I N E =======================================


		public oscar_user_info_append_extra_info
oscar_user_info_append_extra_info proc near ; CODE XREF: oscar_tooltip_text+D5p
					; oscar_user_info_display_aim+88p

var_70		= dword	ptr -70h
var_6C		= dword	ptr -6Ch
var_68		= dword	ptr -68h
var_64		= dword	ptr -64h
var_60		= dword	ptr -60h
var_5C		= dword	ptr -5Ch
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= word ptr -30h
var_2E		= word ptr -2Eh
var_20		= dword	ptr -20h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 5Ch
		mov	edi, [esp+6Ch+arg_0]
		mov	eax, [esp+6Ch+arg_4]
		mov	[esp+6Ch+var_44], eax
		mov	ebx, [esp+6Ch+arg_8]
		mov	esi, [esp+6Ch+arg_C]
		mov	eax, ds:__stack_chk_guard
		mov	[esp+6Ch+var_20], eax
		xor	eax, eax
		mov	[esp+6Ch+var_6C], edi
		call	purple_connection_get_protocol_data
		mov	ebp, eax
		mov	[esp+6Ch+var_6C], edi
		call	purple_connection_get_account
		mov	[esp+6Ch+var_40], eax
		mov	eax, [esp+6Ch+var_44]
		test	eax, eax
		jz	loc_688A9D58
		test	ebx, ebx
		jz	loc_688A9E44
		test	esi, esi
		jz	loc_688A9E80

loc_688A9C38:				; CODE XREF: oscar_user_info_append_extra_info+282j
					; oscar_user_info_append_extra_info+2B6j
		mov	[esp+6Ch+var_6C], ebx
		call	purple_buddy_get_name
		mov	[esp+6Ch+var_3C], eax
		mov	[esp+6Ch+var_6C], ebx
		call	purple_buddy_get_group
		mov	edi, eax
		mov	[esp+6Ch+var_6C], eax
		call	purple_group_get_name
		mov	[esp+6Ch+var_38], eax
		test	esi, esi
		jz	short loc_688A9C9B

loc_688A9C5E:				; CODE XREF: oscar_user_info_append_extra_info+29Aj
		mov	eax, [esi]
		mov	[esp+6Ch+var_68], eax
		mov	eax, [esp+6Ch+var_40]
		mov	[esp+6Ch+var_6C], eax
		call	purple_normalize
		mov	[esp+6Ch+var_68], eax
		mov	eax, [ebp+38h]
		mov	[esp+6Ch+var_6C], eax
		call	g_hash_table_lookup
		test	eax, eax
		jz	short loc_688A9C8E
		mov	eax, [eax+4]
		test	eax, eax
		jnz	loc_688A9DDC

loc_688A9C8E:				; CODE XREF: oscar_user_info_append_extra_info+A1j
					; oscar_user_info_append_extra_info+25Fj
		movzx	eax, word ptr [esi+4]
		test	ax, ax
		jnz	loc_688A9D70

loc_688A9C9B:				; CODE XREF: oscar_user_info_append_extra_info+7Cj
					; oscar_user_info_append_extra_info+1F4j
		test	ebx, ebx
		jz	loc_688A9D58
		mov	eax, [esp+6Ch+var_3C]
		test	eax, eax
		jz	loc_688A9D58
		test	edi, edi
		jz	loc_688A9D58
		mov	esi, [esp+6Ch+var_38]
		test	esi, esi
		jz	loc_688A9D58
		mov	eax, [esp+6Ch+var_3C]
		mov	[esp+6Ch+var_64], eax
		mov	eax, [esp+6Ch+var_38]
		mov	[esp+6Ch+var_68], eax
		mov	eax, [ebp+0D8h]
		mov	[esp+6Ch+var_6C], eax
		call	aim_ssi_getcomment
		mov	esi, eax
		test	eax, eax
		jz	short loc_688A9D58
		xor	eax, eax
		mov	ecx, 0FFFFFFFFh
		mov	edi, esi
		repne scasb
		not	ecx
		dec	ecx
		mov	[esp+6Ch+var_68], ecx
		mov	[esp+6Ch+var_6C], esi
		call	g_markup_escape_text
		mov	ebx, eax
		mov	[esp+6Ch+var_6C], esi
		call	g_free
		mov	[esp+6Ch+var_68], offset aBuddyComment_0 ; "Buddy Comment"
		mov	[esp+6Ch+var_6C], offset aPidgin_8 ; "pidgin"
		call	libintl_dgettext
		mov	[esp+6Ch+var_68], ebx
		mov	[esp+6Ch+var_6C], eax
		mov	ecx, [esp+6Ch+var_44]
		mov	edx, ebp
		mov	eax, [esp+6Ch+var_40]
		call	sub_688A94D4
		mov	eax, [esp+6Ch+var_20]
		xor	eax, ds:__stack_chk_guard
		jnz	loc_688A9E9B
		mov	[esp+6Ch+arg_0], ebx
		add	esp, 5Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		jmp	g_free
; ---------------------------------------------------------------------------
		align 4

loc_688A9D58:				; CODE XREF: oscar_user_info_append_extra_info+42j
					; oscar_user_info_append_extra_info+BDj ...
		mov	eax, [esp+6Ch+var_20]
		xor	eax, ds:__stack_chk_guard
		jnz	loc_688A9E9B
		add	esp, 5Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_688A9D70:				; CODE XREF: oscar_user_info_append_extra_info+B5j
		fld	ds:flt_688B5F7C
		push	eax
		fidivr	[esp+70h+var_70]
		pop	eax
		fadd	ds:flt_688B5F80
		fnstcw	[esp+6Ch+var_2E]
		mov	ax, [esp+6Ch+var_2E]
		mov	ah, 0Ch
		mov	[esp+6Ch+var_30], ax
		fldcw	[esp+6Ch+var_30]
		fistp	[esp+6Ch+var_68]
		fldcw	[esp+6Ch+var_2E]
		mov	[esp+6Ch+var_6C], offset aD_0 ;	"%d"
		call	g_strdup_printf
		mov	esi, eax
		mov	[esp+6Ch+var_68], offset aWarningLevel ; "Warning Level"
		mov	[esp+6Ch+var_6C], offset aPidgin_8 ; "pidgin"
		call	libintl_dgettext
		mov	ecx, esi
		mov	edx, eax
		mov	eax, [esp+6Ch+var_44]
		call	sub_688A9494
		mov	[esp+6Ch+var_6C], esi
		call	g_free
		jmp	loc_688A9C9B
; ---------------------------------------------------------------------------
		align 4

loc_688A9DDC:				; CODE XREF: oscar_user_info_append_extra_info+A8j
		movzx	edx, al
		mov	[esp+6Ch+var_5C], edx
		movzx	edx, ah
		mov	[esp+6Ch+var_60], edx
		mov	edx, eax
		and	edx, 0FF0000h
		shr	edx, 10h
		mov	[esp+6Ch+var_64], edx
		shr	eax, 18h
		mov	[esp+6Ch+var_68], eax
		mov	[esp+6Ch+var_6C], offset aU_U_U_U ; "%u.%u.%u.%u"
		call	g_strdup_printf
		mov	[esp+6Ch+var_34], eax
		mov	[esp+6Ch+var_68], offset aIpAddress ; "IP Address"
		mov	[esp+6Ch+var_6C], offset aPidgin_8 ; "pidgin"
		call	libintl_dgettext
		mov	ecx, [esp+6Ch+var_34]
		mov	edx, eax
		mov	eax, [esp+6Ch+var_44]
		call	sub_688A9494
		mov	eax, [esp+6Ch+var_34]
		mov	[esp+6Ch+var_6C], eax
		call	g_free
		jmp	loc_688A9C8E
; ---------------------------------------------------------------------------

loc_688A9E44:				; CODE XREF: oscar_user_info_append_extra_info+4Aj
		test	esi, esi
		jz	loc_688A9D58
		mov	eax, [esi]
		mov	[esp+6Ch+var_68], eax
		mov	eax, [esp+6Ch+var_40]
		mov	[esp+6Ch+var_6C], eax
		call	purple_find_buddy
		mov	ebx, eax
		test	eax, eax
		jnz	loc_688A9C38
		mov	[esp+6Ch+var_38], 0
		mov	[esp+6Ch+var_3C], 0
		xor	edi, edi
		jmp	loc_688A9C5E
; ---------------------------------------------------------------------------
		align 10h

loc_688A9E80:				; CODE XREF: oscar_user_info_append_extra_info+52j
		mov	[esp+6Ch+var_6C], ebx
		call	purple_buddy_get_name
		mov	[esp+6Ch+var_68], eax
		mov	[esp+6Ch+var_6C], ebp
		call	aim_locate_finduserinfo
		mov	esi, eax
		jmp	loc_688A9C38
; ---------------------------------------------------------------------------

loc_688A9E9B:				; CODE XREF: oscar_user_info_append_extra_info+15Fj
					; oscar_user_info_append_extra_info+182j
		call	__stack_chk_fail
oscar_user_info_append_extra_info endp

; Exported entry 278. oscar_user_info_display_error

; =============== S U B	R O U T	I N E =======================================


		public oscar_user_info_display_error
oscar_user_info_display_error proc near	; CODE XREF: sub_6888F450+3C7p
					; sub_688921A8+2C7p

var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_20		= dword	ptr -20h
arg_0		= dword	ptr  4
arg_4		= word ptr  8
arg_8		= dword	ptr  0Ch

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 3Ch
		mov	edi, [esp+4Ch+arg_0]
		mov	ebp, [esp+4Ch+arg_8]
		movzx	ebx, [esp+4Ch+arg_4]
		mov	eax, ds:__stack_chk_guard
		mov	[esp+4Ch+var_20], eax
		xor	eax, eax
		call	purple_notify_user_info_new
		mov	esi, eax
		mov	[esp+4Ch+var_4C], ebx
		call	oscar_get_msgerr_reason
		mov	ebx, eax
		mov	[esp+4Ch+var_48], offset aUserInformatio ; "User information not available: %s"
		mov	[esp+4Ch+var_4C], offset aPidgin_8 ; "pidgin"
		call	libintl_dgettext
		mov	[esp+4Ch+var_48], ebx
		mov	[esp+4Ch+var_4C], eax
		call	g_strdup_printf
		mov	ebx, eax
		mov	[esp+4Ch+var_44], eax
		mov	[esp+4Ch+var_48], 0
		mov	[esp+4Ch+var_4C], esi
		call	purple_notify_user_info_add_pair
		mov	[esp+4Ch+var_3C], 0
		mov	[esp+4Ch+var_40], 0
		mov	[esp+4Ch+var_44], esi
		mov	[esp+4Ch+var_48], ebp
		mov	eax, [edi+68h]
		mov	[esp+4Ch+var_4C], eax
		call	purple_notify_userinfo
		mov	[esp+4Ch+var_4C], esi
		call	purple_notify_user_info_destroy
		mov	eax, [edi+68h]
		mov	[esp+4Ch+var_4C], eax
		call	purple_connection_get_account
		mov	[esp+4Ch+var_44], ebx
		mov	[esp+4Ch+var_48], eax
		mov	[esp+4Ch+var_4C], ebp
		call	purple_conv_present_error
		test	eax, eax
		jnz	short loc_688A9F87
		mov	[esp+4Ch+var_34], 0
		mov	[esp+4Ch+var_38], 0
		mov	[esp+4Ch+var_3C], 0
		mov	[esp+4Ch+var_40], ebx
		mov	[esp+4Ch+var_44], 0
		mov	[esp+4Ch+var_48], 0
		mov	eax, [edi+68h]
		mov	[esp+4Ch+var_4C], eax
		call	purple_notify_message

loc_688A9F87:				; CODE XREF: oscar_user_info_display_error+AEj
		mov	eax, [esp+4Ch+var_20]
		xor	eax, ds:__stack_chk_guard
		jnz	short loc_688A9FA3
		mov	[esp+4Ch+arg_0], ebx
		add	esp, 3Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		jmp	g_free
; ---------------------------------------------------------------------------

loc_688A9FA3:				; CODE XREF: oscar_user_info_display_error+F1j
		call	__stack_chk_fail
oscar_user_info_display_error endp

; Exported entry 279. oscar_user_info_display_icq

; =============== S U B	R O U T	I N E =======================================


		public oscar_user_info_display_icq
oscar_user_info_display_icq proc near	; CODE XREF: sub_6888F450+2F6p

Time		= dword	ptr -7Ch
Count		= dword	ptr -78h
Format		= dword	ptr -74h
var_70		= dword	ptr -70h
var_6C		= dword	ptr -6Ch
var_50		= dword	ptr -50h
var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_3C		= dword	ptr -3Ch
Dest		= byte ptr -35h
var_30		= byte ptr -30h
var_20		= dword	ptr -20h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 6Ch
		mov	edi, [esp+7Ch+arg_0]
		mov	ebx, [esp+7Ch+arg_4]
		mov	eax, ds:__stack_chk_guard
		mov	[esp+7Ch+var_20], eax
		xor	eax, eax
		mov	edx, [edi+68h]
		mov	[esp+7Ch+var_48], edx
		mov	[esp+7Ch+Time],	edx
		call	purple_connection_get_account
		mov	[esp+7Ch+var_4C], eax
		mov	eax, [ebx+4]
		test	eax, eax
		jnz	short loc_688A9FFC

loc_688A9FE2:				; CODE XREF: oscar_user_info_display_icq+664j
		mov	eax, [esp+7Ch+var_20]
		xor	eax, ds:__stack_chk_guard
		jnz	loc_688AA81F
		add	esp, 6Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 4

loc_688A9FFC:				; CODE XREF: oscar_user_info_display_icq+38j
		call	purple_notify_user_info_new
		mov	esi, eax
		mov	eax, [ebx+4]
		mov	[esp+7Ch+var_70], eax
		mov	[esp+7Ch+Format], offset aU_0 ;	"%u"
		mov	[esp+7Ch+Count], 10h
		lea	eax, [esp+7Ch+var_30]
		mov	[esp+7Ch+Time],	eax
		call	g_snprintf
		lea	edx, [esp+7Ch+var_30]
		mov	[esp+7Ch+Count], edx
		mov	eax, [esp+7Ch+var_4C]
		mov	[esp+7Ch+Time],	eax
		call	purple_find_buddy
		mov	[esp+7Ch+var_40], eax
		test	eax, eax
		jz	loc_688AA760
		mov	[esp+7Ch+Time],	eax
		call	purple_buddy_get_name
		mov	[esp+7Ch+Count], eax
		mov	eax, [esp+7Ch+var_4C]
		mov	[esp+7Ch+Time],	eax
		call	purple_normalize
		mov	[esp+7Ch+Count], eax
		mov	eax, [edi+38h]
		mov	[esp+7Ch+Time],	eax
		call	g_hash_table_lookup
		mov	ebp, eax
		mov	[esp+7Ch+Count], offset	aUin ; "UIN"
		mov	[esp+7Ch+Time],	offset aPidgin_8 ; "pidgin"
		call	libintl_dgettext
		lea	edx, [esp+7Ch+var_30]
		mov	[esp+7Ch+Format], edx
		mov	[esp+7Ch+Count], eax
		mov	[esp+7Ch+Time],	esi
		call	purple_notify_user_info_add_pair
		mov	edx, [ebx+8]
		mov	[esp+7Ch+Count], offset	aNick ;	"Nick"
		mov	[esp+7Ch+Time],	offset aPidgin_8 ; "pidgin"
		mov	[esp+7Ch+var_50], edx
		call	libintl_dgettext
		mov	edx, [esp+7Ch+var_50]
		mov	[esp+7Ch+Count], edx
		mov	[esp+7Ch+Time],	eax
		mov	ecx, esi
		mov	edx, edi
		mov	eax, [esp+7Ch+var_4C]
		call	sub_688A94D4
		test	ebp, ebp
		jz	short loc_688AA0D9
		mov	eax, [ebp+4]
		test	eax, eax
		jnz	loc_688AA6A8

loc_688AA0D9:				; CODE XREF: oscar_user_info_display_icq+124j
					; oscar_user_info_display_icq+75Ej ...
		mov	ebp, [ebx+0Ch]
		mov	[esp+7Ch+Count], offset	aFirstName ; "First Name"
		mov	[esp+7Ch+Time],	offset aPidgin_8 ; "pidgin"
		call	libintl_dgettext
		mov	[esp+7Ch+Count], ebp
		mov	[esp+7Ch+Time],	eax
		mov	ecx, esi
		mov	edx, edi
		mov	eax, [esp+7Ch+var_4C]
		call	sub_688A94D4
		mov	ebp, [ebx+10h]
		mov	[esp+7Ch+Count], offset	aLastName ; "Last Name"
		mov	[esp+7Ch+Time],	offset aPidgin_8 ; "pidgin"
		call	libintl_dgettext
		mov	[esp+7Ch+Count], ebp
		mov	[esp+7Ch+Time],	eax
		mov	ecx, esi
		mov	edx, edi
		mov	eax, [esp+7Ch+var_4C]
		call	sub_688A94D4
		mov	ebp, [ebx+14h]
		mov	[esp+7Ch+Count], offset	aEmailAddress ;	"Email Address"
		mov	[esp+7Ch+Time],	offset aPidgin_8 ; "pidgin"
		call	libintl_dgettext
		mov	[esp+7Ch+Format], offset aMailto ; "mailto:"
		mov	[esp+7Ch+Count], ebp
		mov	[esp+7Ch+Time],	eax
		mov	ecx, esi
		mov	edx, edi
		mov	eax, [esp+7Ch+var_4C]
		call	sub_688A955C
		mov	edx, [ebx+78h]
		test	dx, dx
		jz	short loc_688AA1C5
		mov	eax, [ebx+7Ch]
		test	eax, eax
		jz	short loc_688AA1C5
		test	dx, dx
		jz	short loc_688AA1C5
		xor	ebp, ebp
		mov	[esp+7Ch+var_44], esi
		jmp	short loc_688AA183
; ---------------------------------------------------------------------------
		align 10h

loc_688AA180:				; CODE XREF: oscar_user_info_display_icq+217j
		mov	eax, [ebx+7Ch]

loc_688AA183:				; CODE XREF: oscar_user_info_display_icq+1D4j
		mov	esi, [eax+ebp*4]
		mov	[esp+7Ch+Count], offset	aEmailAddress ;	"Email Address"
		mov	[esp+7Ch+Time],	offset aPidgin_8 ; "pidgin"
		call	libintl_dgettext
		mov	[esp+7Ch+Format], offset aMailto ; "mailto:"
		mov	[esp+7Ch+Count], esi
		mov	[esp+7Ch+Time],	eax
		mov	ecx, [esp+7Ch+var_44]
		mov	edx, edi
		mov	eax, [esp+7Ch+var_4C]
		call	sub_688A955C
		inc	ebp
		movzx	eax, word ptr [ebx+78h]
		cmp	eax, ebp
		jg	short loc_688AA180
		mov	esi, [esp+7Ch+var_44]

loc_688AA1C5:				; CODE XREF: oscar_user_info_display_icq+1C0j
					; oscar_user_info_display_icq+1C7j ...
		mov	ebp, [ebx+2Ch]
		mov	[esp+7Ch+Count], offset	aMobilePhone ; "Mobile Phone"
		mov	[esp+7Ch+Time],	offset aPidgin_8 ; "pidgin"
		call	libintl_dgettext
		mov	[esp+7Ch+Count], ebp
		mov	[esp+7Ch+Time],	eax
		mov	ecx, esi
		mov	edx, edi
		mov	eax, [esp+7Ch+var_4C]
		call	sub_688A94D4
		mov	al, [ebx+38h]
		test	al, al
		jz	short loc_688AA239
		dec	al
		jz	loc_688AA804
		mov	[esp+7Ch+Count], offset	aMale ;	"Male"
		mov	[esp+7Ch+Time],	offset aPidgin_8 ; "pidgin"
		call	libintl_dgettext
		mov	ebp, eax

loc_688AA215:				; CODE XREF: oscar_user_info_display_icq+872j
		mov	[esp+7Ch+Count], offset	aGender	; "Gender"
		mov	[esp+7Ch+Time],	offset aPidgin_8 ; "pidgin"
		call	libintl_dgettext
		mov	[esp+7Ch+Format], ebp
		mov	[esp+7Ch+Count], eax
		mov	[esp+7Ch+Time],	esi
		call	purple_notify_user_info_add_pair

loc_688AA239:				; CODE XREF: oscar_user_info_display_icq+24Dj
		cmp	word ptr [ebx+40h], 76Ch
		ja	loc_688AA614

loc_688AA245:				; CODE XREF: oscar_user_info_display_icq+670j
					; oscar_user_info_display_icq+67Aj ...
		movzx	eax, byte ptr [ebx+36h]
		lea	edx, [eax-1]
		cmp	dl, 0FDh
		jbe	loc_688AA7B8

loc_688AA255:				; CODE XREF: oscar_user_info_display_icq+854j
		mov	ebp, [ebx+14h]
		mov	[esp+7Ch+Count], offset	aPersonalWebPag	; "Personal Web	Page"
		mov	[esp+7Ch+Time],	offset aPidgin_8 ; "pidgin"
		call	libintl_dgettext
		mov	[esp+7Ch+Format], offset byte_688B5C11
		mov	[esp+7Ch+Count], ebp
		mov	[esp+7Ch+Time],	eax
		mov	ecx, esi
		mov	edx, edi
		mov	eax, [esp+7Ch+var_4C]
		call	sub_688A955C
		mov	eax, [esp+7Ch+var_40]
		test	eax, eax
		jz	short loc_688AA2B8
		mov	[esp+7Ch+var_6C], 1
		mov	[esp+7Ch+var_70], 0
		mov	eax, [esp+7Ch+var_40]
		mov	[esp+7Ch+Format], eax
		mov	[esp+7Ch+Count], esi
		mov	edx, [esp+7Ch+var_48]
		mov	[esp+7Ch+Time],	edx
		call	oscar_user_info_append_status

loc_688AA2B8:				; CODE XREF: oscar_user_info_display_icq+2E6j
		mov	ebp, [ebx+74h]
		mov	[esp+7Ch+Count], offset	aAdditionalInfo	; "Additional Information"
		mov	[esp+7Ch+Time],	offset aPidgin_8 ; "pidgin"
		call	libintl_dgettext
		mov	[esp+7Ch+Count], ebp
		mov	[esp+7Ch+Time],	eax
		mov	ecx, esi
		mov	edx, edi
		mov	eax, [esp+7Ch+var_4C]
		call	sub_688A94D4
		mov	[esp+7Ch+Time],	esi
		call	purple_notify_user_info_add_section_break
		mov	eax, [ebx+28h]
		test	eax, eax
		jz	short loc_688AA2F7
		cmp	byte ptr [eax],	0
		jnz	short loc_688AA318

loc_688AA2F7:				; CODE XREF: oscar_user_info_display_icq+348j
		mov	eax, [ebx+18h]
		test	eax, eax
		jz	short loc_688AA303
		cmp	byte ptr [eax],	0
		jnz	short loc_688AA318

loc_688AA303:				; CODE XREF: oscar_user_info_display_icq+354j
		mov	eax, [ebx+1Ch]
		test	eax, eax
		jz	loc_688AA728
		cmp	byte ptr [eax],	0
		jz	loc_688AA728
		nop

loc_688AA318:				; CODE XREF: oscar_user_info_display_icq+34Dj
					; oscar_user_info_display_icq+359j ...
		mov	[esp+7Ch+Count], offset	aHomeAddress ; "Home Address"
		mov	[esp+7Ch+Time],	offset aPidgin_8 ; "pidgin"
		call	libintl_dgettext
		mov	[esp+7Ch+Count], eax
		mov	[esp+7Ch+Time],	esi
		call	purple_notify_user_info_add_section_header
		mov	ebp, [ebx+28h]
		mov	[esp+7Ch+Count], offset	aAddress ; "Address"
		mov	[esp+7Ch+Time],	offset aPidgin_8 ; "pidgin"
		call	libintl_dgettext
		mov	[esp+7Ch+Count], ebp
		mov	[esp+7Ch+Time],	eax
		mov	ecx, esi
		mov	edx, edi
		mov	eax, [esp+7Ch+var_4C]
		call	sub_688A94D4
		mov	ebp, [ebx+18h]
		mov	[esp+7Ch+Count], offset	aCity ;	"City"
		mov	[esp+7Ch+Time],	offset aPidgin_8 ; "pidgin"
		call	libintl_dgettext
		mov	[esp+7Ch+Count], ebp
		mov	[esp+7Ch+Time],	eax
		mov	ecx, esi
		mov	edx, edi
		mov	eax, [esp+7Ch+var_4C]
		call	sub_688A94D4
		mov	ebp, [ebx+1Ch]
		mov	[esp+7Ch+Count], offset	aState ; "State"
		mov	[esp+7Ch+Time],	offset aPidgin_8 ; "pidgin"
		call	libintl_dgettext
		mov	[esp+7Ch+Count], ebp
		mov	[esp+7Ch+Time],	eax
		mov	ecx, esi
		mov	edx, edi
		mov	eax, [esp+7Ch+var_4C]
		call	sub_688A94D4
		mov	ebp, [ebx+30h]
		mov	[esp+7Ch+Count], offset	aZipCode ; "Zip	Code"
		mov	[esp+7Ch+Time],	offset aPidgin_8 ; "pidgin"
		call	libintl_dgettext
		mov	[esp+7Ch+Count], ebp
		mov	[esp+7Ch+Time],	eax
		mov	ecx, esi
		mov	edx, edi
		mov	eax, [esp+7Ch+var_4C]
		call	sub_688A94D4

loc_688AA3E4:				; CODE XREF: oscar_user_info_display_icq+785j
					; oscar_user_info_display_icq+78Ej
		mov	eax, [ebx+58h]
		test	eax, eax
		jz	short loc_688AA3F0
		cmp	byte ptr [eax],	0
		jnz	short loc_688AA410

loc_688AA3F0:				; CODE XREF: oscar_user_info_display_icq+441j
		mov	eax, [ebx+48h]
		test	eax, eax
		jz	short loc_688AA3FC
		cmp	byte ptr [eax],	0
		jnz	short loc_688AA410

loc_688AA3FC:				; CODE XREF: oscar_user_info_display_icq+44Dj
		mov	eax, [ebx+4Ch]
		test	eax, eax
		jz	loc_688AA744
		cmp	byte ptr [eax],	0
		jz	loc_688AA744

loc_688AA410:				; CODE XREF: oscar_user_info_display_icq+446j
					; oscar_user_info_display_icq+452j ...
		mov	[esp+7Ch+Count], offset	aWorkAddress ; "Work Address"
		mov	[esp+7Ch+Time],	offset aPidgin_8 ; "pidgin"
		call	libintl_dgettext
		mov	[esp+7Ch+Count], eax
		mov	[esp+7Ch+Time],	esi
		call	purple_notify_user_info_add_section_header
		mov	ebp, [ebx+58h]
		mov	[esp+7Ch+Count], offset	aAddress ; "Address"
		mov	[esp+7Ch+Time],	offset aPidgin_8 ; "pidgin"
		call	libintl_dgettext
		mov	[esp+7Ch+Count], ebp
		mov	[esp+7Ch+Time],	eax
		mov	ecx, esi
		mov	edx, edi
		mov	eax, [esp+7Ch+var_4C]
		call	sub_688A94D4
		mov	ebp, [ebx+48h]
		mov	[esp+7Ch+Count], offset	aCity ;	"City"
		mov	[esp+7Ch+Time],	offset aPidgin_8 ; "pidgin"
		call	libintl_dgettext
		mov	[esp+7Ch+Count], ebp
		mov	[esp+7Ch+Time],	eax
		mov	ecx, esi
		mov	edx, edi
		mov	eax, [esp+7Ch+var_4C]
		call	sub_688A94D4
		mov	ebp, [ebx+4Ch]
		mov	[esp+7Ch+Count], offset	aState ; "State"
		mov	[esp+7Ch+Time],	offset aPidgin_8 ; "pidgin"
		call	libintl_dgettext
		mov	[esp+7Ch+Count], ebp
		mov	[esp+7Ch+Time],	eax
		mov	ecx, esi
		mov	edx, edi
		mov	eax, [esp+7Ch+var_4C]
		call	sub_688A94D4
		mov	ebp, [ebx+5Ch]
		mov	[esp+7Ch+Count], offset	aZipCode ; "Zip	Code"
		mov	[esp+7Ch+Time],	offset aPidgin_8 ; "pidgin"
		call	libintl_dgettext
		mov	[esp+7Ch+Count], ebp
		mov	[esp+7Ch+Time],	eax
		mov	ecx, esi
		mov	edx, edi
		mov	eax, [esp+7Ch+var_4C]
		call	sub_688A94D4

loc_688AA4DC:				; CODE XREF: oscar_user_info_display_icq+7A1j
					; oscar_user_info_display_icq+7AAj
		mov	eax, [ebx+64h]
		test	eax, eax
		jz	short loc_688AA4E8
		cmp	byte ptr [eax],	0
		jnz	short loc_688AA508

loc_688AA4E8:				; CODE XREF: oscar_user_info_display_icq+539j
		mov	eax, [ebx+68h]
		test	eax, eax
		jz	short loc_688AA4F4
		cmp	byte ptr [eax],	0
		jnz	short loc_688AA508

loc_688AA4F4:				; CODE XREF: oscar_user_info_display_icq+545j
		mov	eax, [ebx+6Ch]
		test	eax, eax
		jz	loc_688AA70C
		cmp	byte ptr [eax],	0
		jz	loc_688AA70C

loc_688AA508:				; CODE XREF: oscar_user_info_display_icq+53Ej
					; oscar_user_info_display_icq+54Aj ...
		mov	[esp+7Ch+Count], offset	aWorkInformatio	; "Work	Information"
		mov	[esp+7Ch+Time],	offset aPidgin_8 ; "pidgin"
		call	libintl_dgettext
		mov	[esp+7Ch+Count], eax
		mov	[esp+7Ch+Time],	esi
		call	purple_notify_user_info_add_section_header
		mov	ebp, [ebx+64h]
		mov	[esp+7Ch+Count], offset	aCompany ; "Company"
		mov	[esp+7Ch+Time],	offset aPidgin_8 ; "pidgin"
		call	libintl_dgettext
		mov	[esp+7Ch+Count], ebp
		mov	[esp+7Ch+Time],	eax
		mov	ecx, esi
		mov	edx, edi
		mov	eax, [esp+7Ch+var_4C]
		call	sub_688A94D4
		mov	ebp, [ebx+68h]
		mov	[esp+7Ch+Count], offset	aDivision ; "Division"
		mov	[esp+7Ch+Time],	offset aPidgin_8 ; "pidgin"
		call	libintl_dgettext
		mov	[esp+7Ch+Count], ebp
		mov	[esp+7Ch+Time],	eax
		mov	ecx, esi
		mov	edx, edi
		mov	eax, [esp+7Ch+var_4C]
		call	sub_688A94D4
		mov	ebp, [ebx+6Ch]
		mov	[esp+7Ch+Count], offset	aPosition ; "Position"
		mov	[esp+7Ch+Time],	offset aPidgin_8 ; "pidgin"
		call	libintl_dgettext
		mov	[esp+7Ch+Count], ebp
		mov	[esp+7Ch+Time],	eax
		mov	ecx, esi
		mov	edx, edi
		mov	eax, [esp+7Ch+var_4C]
		call	sub_688A94D4
		mov	ebx, [ebx+14h]
		mov	[esp+7Ch+Count], offset	aWebPage ; "Web	Page"
		mov	[esp+7Ch+Time],	offset aPidgin_8 ; "pidgin"
		call	libintl_dgettext
		mov	[esp+7Ch+Format], offset byte_688B5C11
		mov	[esp+7Ch+Count], ebx
		mov	[esp+7Ch+Time],	eax
		mov	ecx, esi
		mov	edx, edi
		mov	eax, [esp+7Ch+var_4C]
		call	sub_688A955C

loc_688AA5DC:				; CODE XREF: oscar_user_info_display_icq+769j
					; oscar_user_info_display_icq+778j
		mov	[esp+7Ch+var_6C], 0
		mov	[esp+7Ch+var_70], 0
		mov	[esp+7Ch+Format], esi
		lea	eax, [esp+7Ch+var_30]
		mov	[esp+7Ch+Count], eax
		mov	edx, [esp+7Ch+var_48]
		mov	[esp+7Ch+Time],	edx
		call	purple_notify_userinfo
		mov	[esp+7Ch+Time],	esi
		call	purple_notify_user_info_destroy
		jmp	loc_688A9FE2
; ---------------------------------------------------------------------------
		align 4

loc_688AA614:				; CODE XREF: oscar_user_info_display_icq+297j
		cmp	byte ptr [ebx+42h], 0
		jz	loc_688AA245
		cmp	byte ptr [ebx+43h], 0
		jz	loc_688AA245
		mov	[esp+7Ch+Time],	0 ; Time
		call	time
		mov	[esp+7Ch+var_3C], eax
		lea	eax, [esp+7Ch+var_3C]
		mov	[esp+7Ch+Time],	eax ; Time
		call	localtime
		mov	ebp, eax
		movzx	eax, byte ptr [ebx+43h]
		mov	[ebp+0Ch], eax
		movzx	eax, byte ptr [ebx+42h]
		dec	eax
		mov	[ebp+10h], eax
		movzx	eax, word ptr [ebx+40h]
		sub	eax, 76Ch
		mov	[ebp+14h], eax
		mov	dword ptr [ebp+20h], 0FFFFFFFFh
		mov	[esp+7Ch+Time],	ebp ; Tm
		call	mktime
		mov	[esp+7Ch+Time],	ebp
		call	purple_date_format_short
		mov	ebp, eax
		mov	[esp+7Ch+Count], offset	aBirthday_0 ; "Birthday"
		mov	[esp+7Ch+Time],	offset aPidgin_8 ; "pidgin"
		call	libintl_dgettext
		mov	[esp+7Ch+Count], ebp
		mov	[esp+7Ch+Time],	eax
		mov	ecx, esi
		mov	edx, edi
		mov	eax, [esp+7Ch+var_4C]
		call	sub_688A94D4
		jmp	loc_688AA245
; ---------------------------------------------------------------------------
		align 4

loc_688AA6A8:				; CODE XREF: oscar_user_info_display_icq+12Bj
		movzx	edx, al
		mov	[esp+7Ch+var_6C], edx
		movzx	edx, ah
		mov	[esp+7Ch+var_70], edx
		mov	edx, eax
		and	edx, 0FF0000h
		shr	edx, 10h
		mov	[esp+7Ch+Format], edx
		shr	eax, 18h
		mov	[esp+7Ch+Count], eax
		mov	[esp+7Ch+Time],	offset aU_U_U_U	; "%u.%u.%u.%u"
		call	g_strdup_printf
		mov	ebp, eax
		mov	[esp+7Ch+Count], offset	aIpAddress ; "IP Address"
		mov	[esp+7Ch+Time],	offset aPidgin_8 ; "pidgin"
		call	libintl_dgettext
		mov	[esp+7Ch+Format], ebp
		mov	[esp+7Ch+Count], eax
		mov	[esp+7Ch+Time],	esi
		call	purple_notify_user_info_add_pair
		mov	[esp+7Ch+Time],	ebp
		call	g_free
		jmp	loc_688AA0D9
; ---------------------------------------------------------------------------
		align 4

loc_688AA70C:				; CODE XREF: oscar_user_info_display_icq+551j
					; oscar_user_info_display_icq+55Aj
		mov	eax, [ebx+70h]
		test	eax, eax
		jz	loc_688AA5DC
		cmp	byte ptr [eax],	0
		jnz	loc_688AA508
		jmp	loc_688AA5DC
; ---------------------------------------------------------------------------
		align 4

loc_688AA728:				; CODE XREF: oscar_user_info_display_icq+360j
					; oscar_user_info_display_icq+369j
		mov	eax, [ebx+30h]
		test	eax, eax
		jz	loc_688AA3E4
		cmp	byte ptr [eax],	0
		jz	loc_688AA3E4
		jmp	loc_688AA318
; ---------------------------------------------------------------------------
		align 4

loc_688AA744:				; CODE XREF: oscar_user_info_display_icq+459j
					; oscar_user_info_display_icq+462j
		mov	eax, [ebx+5Ch]
		test	eax, eax
		jz	loc_688AA4DC
		cmp	byte ptr [eax],	0
		jz	loc_688AA4DC
		jmp	loc_688AA410
; ---------------------------------------------------------------------------
		align 10h

loc_688AA760:				; CODE XREF: oscar_user_info_display_icq+98j
		mov	[esp+7Ch+Count], offset	aUin ; "UIN"
		mov	[esp+7Ch+Time],	offset aPidgin_8 ; "pidgin"
		call	libintl_dgettext
		lea	edx, [esp+7Ch+var_30]
		mov	[esp+7Ch+Format], edx
		mov	[esp+7Ch+Count], eax
		mov	[esp+7Ch+Time],	esi
		call	purple_notify_user_info_add_pair
		mov	ebp, [ebx+8]
		mov	[esp+7Ch+Count], offset	aNick ;	"Nick"
		mov	[esp+7Ch+Time],	offset aPidgin_8 ; "pidgin"
		call	libintl_dgettext
		mov	[esp+7Ch+Count], ebp
		mov	[esp+7Ch+Time],	eax
		mov	ecx, esi
		mov	edx, edi
		mov	eax, [esp+7Ch+var_4C]
		call	sub_688A94D4
		jmp	loc_688AA0D9
; ---------------------------------------------------------------------------

loc_688AA7B8:				; CODE XREF: oscar_user_info_display_icq+2A7j
		mov	[esp+7Ch+var_70], eax
		mov	[esp+7Ch+Format], offset aHhd ;	"%hhd"
		mov	[esp+7Ch+Count], 5 ; Count
		lea	ebp, [esp+7Ch+Dest]
		mov	[esp+7Ch+Time],	ebp ; Dest
		call	_snprintf
		mov	[esp+7Ch+Count], offset	aAge ; "Age"
		mov	[esp+7Ch+Time],	offset aPidgin_8 ; "pidgin"
		call	libintl_dgettext
		mov	[esp+7Ch+Format], ebp
		mov	[esp+7Ch+Count], eax
		mov	[esp+7Ch+Time],	esi
		call	purple_notify_user_info_add_pair
		jmp	loc_688AA255
; ---------------------------------------------------------------------------
		align 4

loc_688AA804:				; CODE XREF: oscar_user_info_display_icq+251j
		mov	[esp+7Ch+Count], offset	aFemale	; "Female"
		mov	[esp+7Ch+Time],	offset aPidgin_8 ; "pidgin"
		call	libintl_dgettext
		mov	ebp, eax
		jmp	loc_688AA215
; ---------------------------------------------------------------------------

loc_688AA81F:				; CODE XREF: oscar_user_info_display_icq+44j
		call	__stack_chk_fail
oscar_user_info_display_icq endp

; Exported entry 277. oscar_user_info_display_aim

; =============== S U B	R O U T	I N E =======================================


		public oscar_user_info_display_aim
oscar_user_info_display_aim proc near	; CODE XREF: sub_688921A8+261p

Time		= dword	ptr -6Ch
var_68		= dword	ptr -68h
var_64		= dword	ptr -64h
var_60		= dword	ptr -60h
var_5C		= dword	ptr -5Ch
var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 5Ch
		mov	ebx, [esp+6Ch+arg_4]
		mov	eax, ds:__stack_chk_guard
		mov	[esp+6Ch+var_20], eax
		xor	eax, eax
		mov	eax, [esp+6Ch+arg_0]
		mov	eax, [eax+68h]
		mov	[esp+6Ch+var_40], eax
		mov	[esp+6Ch+Time],	eax
		call	purple_connection_get_account
		mov	[esp+6Ch+var_34], eax
		call	purple_notify_user_info_new
		mov	[esp+6Ch+var_44], eax
		mov	[esp+6Ch+var_5C], 1
		mov	[esp+6Ch+var_60], ebx
		mov	[esp+6Ch+var_64], 0
		mov	[esp+6Ch+var_68], eax
		mov	ecx, [esp+6Ch+var_40]
		mov	[esp+6Ch+Time],	ecx
		call	oscar_user_info_append_status
		test	byte ptr [ebx+58h], 8
		jz	short loc_688AA891
		movzx	eax, word ptr [ebx+6]
		test	ax, ax
		jnz	loc_688AAC6C

loc_688AA891:				; CODE XREF: oscar_user_info_display_aim+5Ej
					; oscar_user_info_display_aim+484j
		mov	[esp+6Ch+var_60], ebx
		mov	[esp+6Ch+var_64], 0
		mov	eax, [esp+6Ch+var_44]
		mov	[esp+6Ch+var_68], eax
		mov	ecx, [esp+6Ch+var_40]
		mov	[esp+6Ch+Time],	ecx
		call	oscar_user_info_append_extra_info
		mov	eax, [ebx+58h]
		test	al, 4
		jnz	loc_688AAA38
		test	al, 2
		jnz	loc_688AAA55

loc_688AA8C4:				; CODE XREF: oscar_user_info_display_aim+22Bj
		mov	edx, [ebx+20h]
		mov	ecx, [ebx+24h]
		mov	[esp+6Ch+var_3C], ecx
		or	ecx, edx
		jnz	loc_688AAAA5

loc_688AA8D6:				; CODE XREF: oscar_user_info_display_aim+27Bj
					; oscar_user_info_display_aim+40Fj
		movzx	eax, word ptr [ebx+6Ch]
		test	ax, ax
		jz	short loc_688AA956
		mov	edx, [ebx+64h]
		test	edx, edx
		jz	short loc_688AA956
		mov	ecx, [ebx+68h]
		test	ecx, ecx
		jz	short loc_688AA956
		mov	[esp+6Ch+var_64], eax ;	int
		mov	[esp+6Ch+var_68], edx ;	int
		mov	[esp+6Ch+Time],	ecx ; char *
		call	oscar_encoding_to_utf8
		mov	edi, eax
		mov	eax, [esp+6Ch+var_34]
		mov	[esp+6Ch+Time],	eax
		call	purple_account_get_username
		mov	[esp+6Ch+var_68], eax
		mov	[esp+6Ch+Time],	edi
		call	oscar_util_format_string
		mov	ebp, eax
		mov	eax, [esp+6Ch+var_44]
		mov	[esp+6Ch+Time],	eax
		call	purple_notify_user_info_add_section_break
		mov	[esp+6Ch+var_68], offset aProfile ; "Profile"
		mov	[esp+6Ch+Time],	offset aPidgin_8 ; "pidgin"
		call	libintl_dgettext
		mov	ecx, ebp
		mov	edx, eax
		mov	eax, [esp+6Ch+var_44]
		call	sub_688A9494
		mov	[esp+6Ch+Time],	ebp
		call	g_free
		mov	[esp+6Ch+Time],	edi
		call	g_free

loc_688AA956:				; CODE XREF: oscar_user_info_display_aim+B9j
					; oscar_user_info_display_aim+C0j ...
		mov	eax, [esp+6Ch+var_44]
		mov	[esp+6Ch+Time],	eax
		call	purple_notify_user_info_add_section_break
		mov	eax, [ebx]
		mov	[esp+6Ch+Time],	eax
		call	oscar_util_valid_name_icq
		test	eax, eax
		jnz	loc_688AAA2C
		mov	edi, offset aHttpProfiles_a ; "http://profiles.aim.com"

loc_688AA979:				; CODE XREF: oscar_user_info_display_aim+20Dj
		mov	[esp+6Ch+var_68], offset aViewWebProfile ; "View web profile"
		mov	[esp+6Ch+Time],	offset aPidgin_8 ; "pidgin"
		call	libintl_dgettext
		mov	ebp, eax
		mov	eax, [ebx]
		mov	[esp+6Ch+var_68], eax
		mov	eax, [esp+6Ch+var_34]
		mov	[esp+6Ch+Time],	eax
		call	purple_normalize
		mov	[esp+6Ch+var_60], ebp
		mov	[esp+6Ch+var_64], eax
		mov	[esp+6Ch+var_68], edi
		mov	[esp+6Ch+Time],	offset aAHrefSSSA_0 ; "<a href=\"%s/%s\">%s</a>"
		call	g_strdup_printf
		mov	edi, eax
		mov	[esp+6Ch+var_64], eax
		mov	[esp+6Ch+var_68], 0
		mov	eax, [esp+6Ch+var_44]
		mov	[esp+6Ch+Time],	eax
		call	purple_notify_user_info_add_pair
		mov	[esp+6Ch+Time],	edi
		call	g_free
		mov	[esp+6Ch+var_5C], 0
		mov	[esp+6Ch+var_60], 0
		mov	eax, [esp+6Ch+var_44]
		mov	[esp+6Ch+var_64], eax
		mov	eax, [ebx]
		mov	[esp+6Ch+var_68], eax
		mov	ecx, [esp+6Ch+var_40]
		mov	[esp+6Ch+Time],	ecx
		call	purple_notify_userinfo
		mov	eax, [esp+6Ch+var_44]
		mov	[esp+6Ch+Time],	eax
		call	purple_notify_user_info_destroy
		mov	ecx, [esp+6Ch+var_20]
		xor	ecx, ds:__stack_chk_guard
		jnz	loc_688AB048
		add	esp, 5Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 4

loc_688AAA2C:				; CODE XREF: oscar_user_info_display_aim+14Aj
		mov	edi, offset aHttpWww_icq__0 ; "http://www.icq.com/people"
		jmp	loc_688AA979
; ---------------------------------------------------------------------------
		align 4

loc_688AAA38:				; CODE XREF: oscar_user_info_display_aim+92j
		mov	eax, [ebx]
		mov	[esp+6Ch+Time],	eax
		call	oscar_util_valid_name_sms
		test	eax, eax
		jz	loc_688AAD50

loc_688AAA4A:				; CODE XREF: oscar_user_info_display_aim+56Aj
		mov	eax, [ebx+58h]
		test	al, 2
		jz	loc_688AA8C4

loc_688AAA55:				; CODE XREF: oscar_user_info_display_aim+9Aj
		mov	eax, [ebx+10h]
		mov	[esp+6Ch+var_24], eax
		lea	eax, [esp+6Ch+var_24]
		mov	[esp+6Ch+Time],	eax ; Time
		call	localtime
		mov	[esp+6Ch+Time],	eax
		call	purple_date_format_full
		mov	edi, eax
		mov	[esp+6Ch+var_68], offset aMemberSince ;	"Member	Since"
		mov	[esp+6Ch+Time],	offset aPidgin_8 ; "pidgin"
		call	libintl_dgettext
		mov	ecx, edi
		mov	edx, eax
		mov	eax, [esp+6Ch+var_44]
		call	sub_688A9494
		mov	edx, [ebx+20h]
		mov	ecx, [ebx+24h]
		mov	[esp+6Ch+var_3C], ecx
		or	ecx, edx
		jz	loc_688AA8D6

loc_688AAAA5:				; CODE XREF: oscar_user_info_display_aim+ACj
		mov	[esp+6Ch+Time],	offset byte_688B5C11
		mov	[esp+6Ch+var_48], edx
		call	g_string_new
		mov	[esp+6Ch+var_38], eax
		mov	ebp, 22h
		mov	esi, 1
		xor	edi, edi
		mov	[esp+6Ch+var_30], ebx
		mov	edx, [esp+6Ch+var_48]
		mov	ebx, edx
		jmp	short loc_688AAB27
; ---------------------------------------------------------------------------
		align 4

loc_688AAAD4:				; CODE XREF: oscar_user_info_display_aim+318j
		mov	[esp+6Ch+var_68], offset aNihilist ; "Nihilist"
		mov	[esp+6Ch+Time],	offset aPidgin_8 ; "pidgin"
		call	libintl_dgettext

loc_688AAAE8:				; CODE XREF: oscar_user_info_display_aim+34Aj
					; oscar_user_info_display_aim+3BAj ...
		test	eax, eax
		jz	short loc_688AAB1C
		mov	ecx, [esp+6Ch+var_38]
		mov	edx, [ecx]
		cmp	byte ptr [edx],	0
		jnz	loc_688AABE4
		mov	edx, offset byte_688B5C11

loc_688AAB00:				; CODE XREF: oscar_user_info_display_aim+3C5j
		mov	[esp+6Ch+var_60], eax
		mov	[esp+6Ch+var_64], edx
		mov	[esp+6Ch+var_68], offset aSS_3 ; "%s%s"
		mov	eax, [esp+6Ch+var_38]
		mov	[esp+6Ch+Time],	eax
		call	g_string_append_printf

loc_688AAB1C:				; CODE XREF: oscar_user_info_display_aim+2C6j
					; oscar_user_info_display_aim+30Fj ...
		add	esi, esi
		adc	edi, edi
		dec	ebp
		jz	loc_688AABF0

loc_688AAB27:				; CODE XREF: oscar_user_info_display_aim+2ABj
		mov	eax, esi
		and	eax, ebx
		mov	edx, [esp+6Ch+var_3C]
		and	edx, edi
		or	edx, eax
		jz	short loc_688AAB1C
		mov	eax, esi
		xor	ah, 20h
		or	eax, edi
		jz	short loc_688AAAD4
		mov	eax, esi
		cmp	edi, 0
		ja	short loc_688AAB4D
		cmp	esi, 2000h
		jbe	short loc_688AAB74

loc_688AAB4D:				; CODE XREF: oscar_user_info_display_aim+31Fj
		xor	eax, 800000h
		or	eax, edi
		jnz	loc_688AAC38
		mov	[esp+6Ch+var_68], offset aVideoChat ; "Video Chat"
		mov	[esp+6Ch+Time],	offset aPidgin_8 ; "pidgin"
		call	libintl_dgettext
		jmp	loc_688AAAE8
; ---------------------------------------------------------------------------
		align 4

loc_688AAB74:				; CODE XREF: oscar_user_info_display_aim+327j
		xor	eax, 40h
		or	eax, edi
		jz	loc_688AACBB
		mov	eax, esi
		cmp	edi, 0
		ja	loc_688AACB0
		cmp	esi, 40h
		ja	loc_688AACB0
		xor	eax, 4
		or	eax, edi
		jz	loc_688AAEA2
		mov	eax, esi
		cmp	edi, 0
		ja	loc_688AAFE0
		cmp	esi, 4
		ja	loc_688AAFE0
		xor	eax, 1
		or	eax, edi
		jz	loc_688AAE89
		mov	eax, esi
		xor	eax, 2
		or	eax, edi
		jnz	loc_688AAB1C
		mov	[esp+6Ch+var_68], offset aVoice	; "Voice"
		mov	[esp+6Ch+Time],	offset aPidgin_8 ; "pidgin"
		call	libintl_dgettext
		jmp	loc_688AAAE8
; ---------------------------------------------------------------------------
		align 4

loc_688AABE4:				; CODE XREF: oscar_user_info_display_aim+2D1j
		mov	edx, offset asc_688B5DD3 ; ", "
		jmp	loc_688AAB00
; ---------------------------------------------------------------------------
		align 10h

loc_688AABF0:				; CODE XREF: oscar_user_info_display_aim+2FDj
		mov	ebx, [esp+6Ch+var_30]
		mov	[esp+6Ch+var_68], 0
		mov	eax, [esp+6Ch+var_38]
		mov	[esp+6Ch+Time],	eax
		call	g_string_free
		mov	edi, eax
		mov	[esp+6Ch+var_68], offset aCapabilities ; "Capabilities"
		mov	[esp+6Ch+Time],	offset aPidgin_8 ; "pidgin"
		call	libintl_dgettext
		mov	ecx, edi
		mov	edx, eax
		mov	eax, [esp+6Ch+var_44]
		call	sub_688A9494
		mov	[esp+6Ch+Time],	edi
		call	g_free
		jmp	loc_688AA8D6
; ---------------------------------------------------------------------------

loc_688AAC38:				; CODE XREF: oscar_user_info_display_aim+330j
		mov	eax, esi
		cmp	edi, 0
		jbe	loc_688AACD4

loc_688AAC43:				; CODE XREF: oscar_user_info_display_aim+4B6j
		xor	eax, 4000000h
		or	eax, edi
		jnz	loc_688AAD94
		mov	[esp+6Ch+var_68], offset aCamera ; "Camera"
		mov	[esp+6Ch+Time],	offset aPidgin_8 ; "pidgin"
		call	libintl_dgettext
		jmp	loc_688AAAE8
; ---------------------------------------------------------------------------
		align 4

loc_688AAC6C:				; CODE XREF: oscar_user_info_display_aim+67j
		lea	eax, [eax+eax*2]
		lea	eax, [eax+eax*4]
		shl	eax, 2
		mov	[esp+6Ch+Time],	eax
		call	purple_str_seconds_to_string
		mov	edi, eax
		mov	[esp+6Ch+var_68], offset aIdle ; "Idle"
		mov	[esp+6Ch+Time],	offset aPidgin_8 ; "pidgin"
		call	libintl_dgettext
		mov	ecx, edi
		mov	edx, eax
		mov	eax, [esp+6Ch+var_44]
		call	sub_688A9494
		mov	[esp+6Ch+Time],	edi
		call	g_free
		jmp	loc_688AA891
; ---------------------------------------------------------------------------
		align 10h

loc_688AACB0:				; CODE XREF: oscar_user_info_display_aim+360j
					; oscar_user_info_display_aim+369j
		xor	ah, 2
		or	eax, edi
		jnz	loc_688AADE4

loc_688AACBB:				; CODE XREF: oscar_user_info_display_aim+355j
		mov	[esp+6Ch+var_68], offset aGames	; "Games"
		mov	[esp+6Ch+Time],	offset aPidgin_8 ; "pidgin"
		call	libintl_dgettext
		jmp	loc_688AAAE8
; ---------------------------------------------------------------------------

loc_688AACD4:				; CODE XREF: oscar_user_info_display_aim+419j
		cmp	esi, 800000h
		ja	loc_688AAC43
		xor	eax, 10000h
		or	eax, edi
		jz	short loc_688AAD34
		mov	eax, esi
		cmp	edi, 0
		ja	loc_688AAF08
		cmp	esi, 10000h
		ja	loc_688AAF08
		xor	ah, 40h
		or	eax, edi
		jz	loc_688AAED4
		mov	eax, esi
		xor	ah, 80h
		or	eax, edi
		jnz	loc_688AAB1C
		mov	[esp+6Ch+var_68], offset aOldIcqUtf8 ; "Old ICQ	UTF8"
		mov	[esp+6Ch+Time],	offset aPidgin_8 ; "pidgin"
		call	libintl_dgettext
		jmp	loc_688AAAE8
; ---------------------------------------------------------------------------
		align 4

loc_688AAD34:				; CODE XREF: oscar_user_info_display_aim+4C3j
		mov	[esp+6Ch+var_68], offset aTrillianEncryp ; "Trillian Encryption"
		mov	[esp+6Ch+Time],	offset aPidgin_8 ; "pidgin"
		call	libintl_dgettext
		jmp	loc_688AAAE8
; ---------------------------------------------------------------------------
		align 10h

loc_688AAD50:				; CODE XREF: oscar_user_info_display_aim+220j
		mov	eax, [ebx+14h]
		mov	[esp+6Ch+var_24], eax
		lea	eax, [esp+6Ch+var_24]
		mov	[esp+6Ch+Time],	eax ; Time
		call	localtime
		mov	[esp+6Ch+Time],	eax
		call	purple_date_format_full
		mov	edi, eax
		mov	[esp+6Ch+var_68], offset aOnlineSince ;	"Online	Since"
		mov	[esp+6Ch+Time],	offset aPidgin_8 ; "pidgin"
		call	libintl_dgettext
		mov	ecx, edi
		mov	edx, eax
		mov	eax, [esp+6Ch+var_44]
		call	sub_688A9494
		jmp	loc_688AAA4A
; ---------------------------------------------------------------------------
		align 4

loc_688AAD94:				; CODE XREF: oscar_user_info_display_aim+426j
		mov	eax, esi
		cmp	edi, 0
		jbe	loc_688AAE2C

loc_688AAD9F:				; CODE XREF: oscar_user_info_display_aim+60Ej
		xor	eax, 20000000h
		or	eax, edi
		jz	loc_688AAE70
		mov	eax, esi
		xor	eax, 40000000h
		or	eax, edi
		jz	loc_688AAE70
		mov	eax, esi
		xor	eax, 8000000h
		or	eax, edi
		jnz	loc_688AAB1C
		mov	[esp+6Ch+var_68], offset aScreenSharing	; "Screen Sharing"
		mov	[esp+6Ch+Time],	offset aPidgin_8 ; "pidgin"
		call	libintl_dgettext
		jmp	loc_688AAAE8
; ---------------------------------------------------------------------------
		align 4

loc_688AADE4:				; CODE XREF: oscar_user_info_display_aim+491j
		mov	eax, esi
		cmp	edi, 0
		ja	loc_688AAF78
		cmp	esi, 200h
		ja	loc_688AAF78
		xor	al, 80h
		or	eax, edi
		jz	loc_688AAEBB
		mov	eax, esi
		xor	ah, 1
		or	eax, edi
		jnz	loc_688AAB1C
		mov	[esp+6Ch+var_68], offset aSendBuddyList	; "Send	Buddy List"
		mov	[esp+6Ch+Time],	offset aPidgin_8 ; "pidgin"
		call	libintl_dgettext
		jmp	loc_688AAAE8
; ---------------------------------------------------------------------------
		align 4

loc_688AAE2C:				; CODE XREF: oscar_user_info_display_aim+575j
		cmp	esi, 4000000h
		ja	loc_688AAD9F
		xor	eax, 1000000h
		or	eax, edi
		jz	loc_688AAEED
		mov	eax, esi
		xor	eax, 2000000h
		or	eax, edi
		jnz	loc_688AAB1C
		mov	[esp+6Ch+var_68], offset aLiveVideo ; "Live Video"
		mov	[esp+6Ch+Time],	offset aPidgin_8 ; "pidgin"
		call	libintl_dgettext
		jmp	loc_688AAAE8
; ---------------------------------------------------------------------------
		align 10h

loc_688AAE70:				; CODE XREF: oscar_user_info_display_aim+582j
					; oscar_user_info_display_aim+591j
		mov	[esp+6Ch+var_68], offset aIcqXtraz ; "ICQ Xtraz"
		mov	[esp+6Ch+Time],	offset aPidgin_8 ; "pidgin"
		call	libintl_dgettext
		jmp	loc_688AAAE8
; ---------------------------------------------------------------------------

loc_688AAE89:				; CODE XREF: oscar_user_info_display_aim+393j
		mov	[esp+6Ch+var_68], offset aBuddyIcon ; "Buddy Icon"
		mov	[esp+6Ch+Time],	offset aPidgin_8 ; "pidgin"
		call	libintl_dgettext
		jmp	loc_688AAAE8
; ---------------------------------------------------------------------------

loc_688AAEA2:				; CODE XREF: oscar_user_info_display_aim+374j
		mov	[esp+6Ch+var_68], offset aAimDirectIm ;	"AIM Direct IM"
		mov	[esp+6Ch+Time],	offset aPidgin_8 ; "pidgin"
		call	libintl_dgettext
		jmp	loc_688AAAE8
; ---------------------------------------------------------------------------

loc_688AAEBB:				; CODE XREF: oscar_user_info_display_aim+5DBj
		mov	[esp+6Ch+var_68], offset aAddIns ; "Add-Ins"
		mov	[esp+6Ch+Time],	offset aPidgin_8 ; "pidgin"
		call	libintl_dgettext
		jmp	loc_688AAAE8
; ---------------------------------------------------------------------------

loc_688AAED4:				; CODE XREF: oscar_user_info_display_aim+4E1j
		mov	[esp+6Ch+var_68], offset aIcqServerRelay ; "ICQ	Server Relay"
		mov	[esp+6Ch+Time],	offset aPidgin_8 ; "pidgin"
		call	libintl_dgettext
		jmp	loc_688AAAE8
; ---------------------------------------------------------------------------

loc_688AAEED:				; CODE XREF: oscar_user_info_display_aim+61Bj
		mov	[esp+6Ch+var_68], offset aIchatAv ; "iChat AV"
		mov	[esp+6Ch+Time],	offset aPidgin_8 ; "pidgin"
		call	libintl_dgettext
		jmp	loc_688AAAE8
; ---------------------------------------------------------------------------
		align 4

loc_688AAF08:				; CODE XREF: oscar_user_info_display_aim+4CAj
					; oscar_user_info_display_aim+4D6j
		xor	eax, 100000h
		or	eax, edi
		jz	short loc_688AAF44
		mov	eax, esi
		xor	eax, 200000h
		or	eax, edi
		jz	short loc_688AAF5D
		mov	eax, esi
		xor	eax, 20000h
		or	eax, edi
		jnz	loc_688AAB1C
		mov	[esp+6Ch+var_68], offset aIcqUtf8 ; "ICQ UTF8"
		mov	[esp+6Ch+Time],	offset aPidgin_8 ; "pidgin"
		call	libintl_dgettext
		jmp	loc_688AAAE8
; ---------------------------------------------------------------------------

loc_688AAF44:				; CODE XREF: oscar_user_info_display_aim+6EBj
		mov	[esp+6Ch+var_68], offset aHiptop_0 ; "Hiptop"
		mov	[esp+6Ch+Time],	offset aPidgin_8 ; "pidgin"
		call	libintl_dgettext
		jmp	loc_688AAAE8
; ---------------------------------------------------------------------------

loc_688AAF5D:				; CODE XREF: oscar_user_info_display_aim+6F6j
		mov	[esp+6Ch+var_68], offset aSecurityEnable ; "Security Enabled"
		mov	[esp+6Ch+Time],	offset aPidgin_8 ; "pidgin"
		call	libintl_dgettext
		jmp	loc_688AAAE8
; ---------------------------------------------------------------------------
		align 4

loc_688AAF78:				; CODE XREF: oscar_user_info_display_aim+5C5j
					; oscar_user_info_display_aim+5D1j
		xor	ah, 8
		or	eax, edi
		jz	short loc_688AAFAE
		mov	eax, esi
		xor	ah, 10h
		or	eax, edi
		jz	short loc_688AAFC7
		mov	eax, esi
		xor	ah, 4
		or	eax, edi
		jnz	loc_688AAB1C
		mov	[esp+6Ch+var_68], offset aIcqDirectConne ; "ICQ	Direct Connect"
		mov	[esp+6Ch+Time],	offset aPidgin_8 ; "pidgin"
		call	libintl_dgettext
		jmp	loc_688AAAE8
; ---------------------------------------------------------------------------

loc_688AAFAE:				; CODE XREF: oscar_user_info_display_aim+759j
		mov	[esp+6Ch+var_68], offset aApUser ; "AP User"
		mov	[esp+6Ch+Time],	offset aPidgin_8 ; "pidgin"
		call	libintl_dgettext
		jmp	loc_688AAAE8
; ---------------------------------------------------------------------------

loc_688AAFC7:				; CODE XREF: oscar_user_info_display_aim+762j
		mov	[esp+6Ch+var_68], offset aIcqRtf ; "ICQ	RTF"
		mov	[esp+6Ch+Time],	offset aPidgin_8 ; "pidgin"
		call	libintl_dgettext
		jmp	loc_688AAAE8
; ---------------------------------------------------------------------------

loc_688AAFE0:				; CODE XREF: oscar_user_info_display_aim+37Fj
					; oscar_user_info_display_aim+388j
		xor	eax, 10h
		or	eax, edi
		jz	short loc_688AB016
		mov	eax, esi
		xor	eax, 20h
		or	eax, edi
		jz	short loc_688AB02F
		mov	eax, esi
		xor	eax, 8
		or	eax, edi
		jnz	loc_688AAB1C
		mov	[esp+6Ch+var_68], offset aChat_0 ; "Chat"
		mov	[esp+6Ch+Time],	offset aPidgin_8 ; "pidgin"
		call	libintl_dgettext
		jmp	loc_688AAAE8
; ---------------------------------------------------------------------------

loc_688AB016:				; CODE XREF: oscar_user_info_display_aim+7C1j
		mov	[esp+6Ch+var_68], offset aGetFile ; "Get File"
		mov	[esp+6Ch+Time],	offset aPidgin_8 ; "pidgin"
		call	libintl_dgettext
		jmp	loc_688AAAE8
; ---------------------------------------------------------------------------

loc_688AB02F:				; CODE XREF: oscar_user_info_display_aim+7CAj
		mov	[esp+6Ch+var_68], offset aSendFile ; "Send File"
		mov	[esp+6Ch+Time],	offset aPidgin_8 ; "pidgin"
		call	libintl_dgettext
		jmp	loc_688AAAE8
; ---------------------------------------------------------------------------

loc_688AB048:				; CODE XREF: oscar_user_info_display_aim+1F7j
		call	__stack_chk_fail
oscar_user_info_display_aim endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 241. oscar_get_msgerr_reason

; =============== S U B	R O U T	I N E =======================================


		public oscar_get_msgerr_reason
oscar_get_msgerr_reason	proc near	; CODE XREF: sub_6888B528+5D4p
					; sub_6888B528+8B3p ...

var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_10		= dword	ptr -10h
arg_0		= dword	ptr  4

		sub	esp, 2Ch
		mov	eax, [esp+2Ch+arg_0]
		mov	edx, ds:__stack_chk_guard
		mov	[esp+2Ch+var_10], edx
		xor	edx, edx
		cmp	eax, 18h
		jbe	short loc_688AB08C
		mov	[esp+2Ch+var_28], offset aUnknownReaso_0 ; "Unknown reason"
		mov	[esp+2Ch+var_2C], offset aPidgin_9 ; "pidgin"
		call	libintl_dgettext

loc_688AB07C:				; CODE XREF: oscar_get_msgerr_reason+53j
		mov	edx, [esp+2Ch+var_10]
		xor	edx, ds:__stack_chk_guard
		jnz	short loc_688AB0A5
		add	esp, 2Ch
		retn
; ---------------------------------------------------------------------------

loc_688AB08C:				; CODE XREF: oscar_get_msgerr_reason+16j
		mov	eax, ds:off_688B6200[eax*4]
		mov	[esp+2Ch+var_28], eax
		mov	[esp+2Ch+var_2C], offset aPidgin_9 ; "pidgin"
		call	libintl_dgettext
		jmp	short loc_688AB07C
; ---------------------------------------------------------------------------

loc_688AB0A5:				; CODE XREF: oscar_get_msgerr_reason+36j
		call	__stack_chk_fail
oscar_get_msgerr_reason	endp

; ---------------------------------------------------------------------------
		align 4
; Exported entry 243. oscar_get_ui_info_int

; =============== S U B	R O U T	I N E =======================================


		public oscar_get_ui_info_int
oscar_get_ui_info_int proc near		; CODE XREF: sub_68882C1C+641p
					; aim_send_login+25Ep

var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	esi
		push	ebx
		sub	esp, 24h
		mov	esi, [esp+2Ch+arg_0]
		mov	ebx, [esp+2Ch+arg_4]
		mov	eax, ds:__stack_chk_guard
		mov	[esp+2Ch+var_10], eax
		xor	eax, eax
		call	purple_core_get_ui_info
		test	eax, eax
		jz	short loc_688AB0ED
		lea	edx, [esp+2Ch+var_14]
		mov	[esp+2Ch+var_20], edx
		mov	[esp+2Ch+var_24], 0
		mov	[esp+2Ch+var_28], esi
		mov	[esp+2Ch+var_2C], eax
		call	g_hash_table_lookup_extended
		test	eax, eax
		jnz	short loc_688AB104

loc_688AB0ED:				; CODE XREF: oscar_get_ui_info_int+1Fj
					; oscar_get_ui_info_int+5Cj
		mov	eax, ebx
		mov	edx, [esp+2Ch+var_10]
		xor	edx, ds:__stack_chk_guard
		jnz	short loc_688AB10A
		add	esp, 24h
		pop	ebx
		pop	esi
		retn
; ---------------------------------------------------------------------------
		align 4

loc_688AB104:				; CODE XREF: oscar_get_ui_info_int+3Fj
		mov	ebx, [esp+2Ch+var_14]
		jmp	short loc_688AB0ED
; ---------------------------------------------------------------------------

loc_688AB10A:				; CODE XREF: oscar_get_ui_info_int+4Dj
		call	__stack_chk_fail
oscar_get_ui_info_int endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 244. oscar_get_ui_info_string

; =============== S U B	R O U T	I N E =======================================


		public oscar_get_ui_info_string
oscar_get_ui_info_string proc near	; CODE XREF: sub_68882C1C+61Fp
					; send_client_login+80p ...

var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_10		= dword	ptr -10h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	esi
		push	ebx
		sub	esp, 24h
		mov	ebx, [esp+2Ch+arg_0]
		mov	esi, [esp+2Ch+arg_4]
		mov	eax, ds:__stack_chk_guard
		mov	[esp+2Ch+var_10], eax
		xor	eax, eax
		call	purple_core_get_ui_info
		test	eax, eax
		jz	short loc_688AB154
		mov	[esp+2Ch+var_28], ebx
		mov	[esp+2Ch+var_2C], eax
		call	g_hash_table_lookup
		test	eax, eax
		jz	short loc_688AB154

loc_688AB141:				; CODE XREF: oscar_get_ui_info_string+46j
		mov	edx, [esp+2Ch+var_10]
		xor	edx, ds:__stack_chk_guard
		jnz	short loc_688AB158
		add	esp, 24h
		pop	ebx
		pop	esi
		retn
; ---------------------------------------------------------------------------
		align 4

loc_688AB154:				; CODE XREF: oscar_get_ui_info_string+1Fj
					; oscar_get_ui_info_string+2Fj
		mov	eax, esi
		jmp	short loc_688AB141
; ---------------------------------------------------------------------------

loc_688AB158:				; CODE XREF: oscar_get_ui_info_string+3Bj
		call	__stack_chk_fail
oscar_get_ui_info_string endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 238. oscar_get_clientstring

; =============== S U B	R O U T	I N E =======================================


		public oscar_get_clientstring
oscar_get_clientstring proc near	; CODE XREF: aim_send_login:loc_68885790p
					; flap_connection_send_version_with_cookie_and_clientinfo:loc_6889665Cp

var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_10		= dword	ptr -10h

		push	ebx
		sub	esp, 28h
		mov	eax, ds:__stack_chk_guard
		mov	[esp+2Ch+var_10], eax
		xor	eax, eax
		mov	[esp+2Ch+var_28], offset aPurple ; "Purple"
		mov	[esp+2Ch+var_2C], offset aName ; "name"
		call	oscar_get_ui_info_string
		mov	ebx, eax
		mov	[esp+2Ch+var_28], offset a2_10_11 ; "2.10.11"
		mov	[esp+2Ch+var_2C], offset aVersion ; "version"
		call	oscar_get_ui_info_string
		mov	[esp+2Ch+var_24], eax
		mov	[esp+2Ch+var_28], ebx
		mov	[esp+2Ch+var_2C], offset aSS_4 ; "%s/%s"
		call	g_strdup_printf
		mov	edx, [esp+2Ch+var_10]
		xor	edx, ds:__stack_chk_guard
		jnz	short loc_688AB1BE
		add	esp, 28h
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_688AB1BE:				; CODE XREF: oscar_get_clientstring+57j
		call	__stack_chk_fail
oscar_get_clientstring endp

; ---------------------------------------------------------------------------
		align 4
; Exported entry 144. aimutil_iconsum

; =============== S U B	R O U T	I N E =======================================


		public aimutil_iconsum
aimutil_iconsum	proc near		; CODE XREF: sub_6889F454+865p
					; oscar_send_im+1FDp

var_30		= dword	ptr -30h
var_20		= dword	ptr -20h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 2Ch
		mov	ebp, [esp+3Ch+arg_0]
		mov	eax, [esp+3Ch+arg_4]
		mov	[esp+3Ch+var_30], eax
		mov	edx, ds:__stack_chk_guard
		mov	[esp+3Ch+var_20], edx
		xor	edx, edx
		dec	eax
		jle	short loc_688AB23F
		lea	eax, [ebp+1]
		mov	edi, [esp+3Ch+var_30]
		sub	edi, 2
		shr	edi, 1
		lea	esi, [ebp+edi*2+3]
		xor	ecx, ecx

loc_688AB1F8:				; CODE XREF: aimutil_iconsum+47j
		movzx	edx, byte ptr [eax]
		shl	edx, 8
		movzx	ebx, byte ptr [eax-1]
		add	edx, ebx
		add	ecx, edx
		add	eax, 2
		cmp	eax, esi
		jnz	short loc_688AB1F8
		lea	eax, [edi+edi+2]

loc_688AB211:				; CODE XREF: aimutil_iconsum+7Fj
		cmp	[esp+3Ch+var_30], eax
		jle	short loc_688AB21E
		movzx	eax, byte ptr [ebp+eax+0]
		add	ecx, eax

loc_688AB21E:				; CODE XREF: aimutil_iconsum+51j
		mov	eax, ecx
		shr	eax, 10h
		and	ecx, 0FFFFh
		add	eax, ecx
		mov	edx, [esp+3Ch+var_20]
		xor	edx, ds:__stack_chk_guard
		jnz	short loc_688AB245
		add	esp, 2Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_688AB23F:				; CODE XREF: aimutil_iconsum+20j
		xor	eax, eax
		xor	ecx, ecx
		jmp	short loc_688AB211
; ---------------------------------------------------------------------------

loc_688AB245:				; CODE XREF: aimutil_iconsum+71j
		call	__stack_chk_fail
aimutil_iconsum	endp

; ---------------------------------------------------------------------------
		align 4
; Exported entry 284. oscar_util_valid_name_icq

; =============== S U B	R O U T	I N E =======================================


		public oscar_util_valid_name_icq
oscar_util_valid_name_icq proc near	; CODE XREF: oscar_decode_im+103p
					; aim_send_login+131p ...

var_10		= dword	ptr -10h
arg_0		= dword	ptr  4

		sub	esp, 1Ch
		mov	eax, [esp+1Ch+arg_0]
		mov	edx, ds:__stack_chk_guard
		mov	[esp+1Ch+var_10], edx
		xor	edx, edx
		movsx	edx, byte ptr [eax]
		test	dl, dl
		jz	short loc_688AB284
		sub	edx, 30h
		cmp	edx, 9
		ja	short loc_688AB29C
		inc	eax
		jmp	short loc_688AB27D
; ---------------------------------------------------------------------------
		align 4

loc_688AB274:				; CODE XREF: oscar_util_valid_name_icq+36j
		inc	eax
		sub	edx, 30h
		cmp	edx, 9
		ja	short loc_688AB29C

loc_688AB27D:				; CODE XREF: oscar_util_valid_name_icq+23j
		movsx	edx, byte ptr [eax]
		test	dl, dl
		jnz	short loc_688AB274

loc_688AB284:				; CODE XREF: oscar_util_valid_name_icq+18j
		mov	eax, 1

loc_688AB289:				; CODE XREF: oscar_util_valid_name_icq+52j
		mov	edx, [esp+1Ch+var_10]
		xor	edx, ds:__stack_chk_guard
		jnz	short loc_688AB2A0
		add	esp, 1Ch
		retn
; ---------------------------------------------------------------------------
		align 4

loc_688AB29C:				; CODE XREF: oscar_util_valid_name_icq+20j
					; oscar_util_valid_name_icq+2Fj
		xor	eax, eax
		jmp	short loc_688AB289
; ---------------------------------------------------------------------------

loc_688AB2A0:				; CODE XREF: oscar_util_valid_name_icq+47j
		call	__stack_chk_fail
oscar_util_valid_name_icq endp

; ---------------------------------------------------------------------------
		align 4
; Exported entry 285. oscar_util_valid_name_sms

; =============== S U B	R O U T	I N E =======================================


		public oscar_util_valid_name_sms
oscar_util_valid_name_sms proc near	; CODE XREF: oscar_send_im+4Dp
					; oscar_send_im+280p ...

var_10		= dword	ptr -10h
arg_0		= dword	ptr  4

		sub	esp, 1Ch
		mov	eax, [esp+1Ch+arg_0]
		mov	edx, ds:__stack_chk_guard
		mov	[esp+1Ch+var_10], edx
		xor	edx, edx
		cmp	byte ptr [eax],	2Bh
		jz	short loc_688AB2D4

loc_688AB2C0:				; CODE XREF: oscar_util_valid_name_sms+3Aj
					; oscar_util_valid_name_sms+4Bj
		xor	eax, eax

loc_688AB2C2:				; CODE XREF: oscar_util_valid_name_sms+59j
		mov	edx, [esp+1Ch+var_10]
		xor	edx, ds:__stack_chk_guard
		jnz	short loc_688AB303
		add	esp, 1Ch
		retn
; ---------------------------------------------------------------------------
		align 4

loc_688AB2D4:				; CODE XREF: oscar_util_valid_name_sms+16j
		movsx	edx, byte ptr [eax+1]
		test	dl, dl
		jz	short loc_688AB2FC
		sub	edx, 30h
		cmp	edx, 9
		ja	short loc_688AB2C0
		add	eax, 2
		jmp	short loc_688AB2F5
; ---------------------------------------------------------------------------
		align 4

loc_688AB2EC:				; CODE XREF: oscar_util_valid_name_sms+52j
		inc	eax
		sub	edx, 30h
		cmp	edx, 9
		ja	short loc_688AB2C0

loc_688AB2F5:				; CODE XREF: oscar_util_valid_name_sms+3Fj
		movsx	edx, byte ptr [eax]
		test	dl, dl
		jnz	short loc_688AB2EC

loc_688AB2FC:				; CODE XREF: oscar_util_valid_name_sms+32j
		mov	eax, 1
		jmp	short loc_688AB2C2
; ---------------------------------------------------------------------------

loc_688AB303:				; CODE XREF: oscar_util_valid_name_sms+24j
		call	__stack_chk_fail
oscar_util_valid_name_sms endp

; Exported entry 283. oscar_util_valid_name

; =============== S U B	R O U T	I N E =======================================


		public oscar_util_valid_name
oscar_util_valid_name proc near		; CODE XREF: oscar_login+87Cp
					; oscar_add_buddy+5Bp

C		= dword	ptr -3Ch
Type		= dword	ptr -38h
var_20		= dword	ptr -20h
arg_0		= dword	ptr  4

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 2Ch
		mov	ebx, [esp+3Ch+arg_0]
		mov	eax, ds:__stack_chk_guard
		mov	[esp+3Ch+var_20], eax
		xor	eax, eax
		test	ebx, ebx
		jz	short loc_688AB368
		mov	cl, [ebx]
		test	cl, cl
		jz	short loc_688AB368
		movsx	eax, cl
		sub	eax, 30h
		cmp	eax, 9
		ja	short loc_688AB36C
		lea	eax, [ebx+1]
		jmp	short loc_688AB341
; ---------------------------------------------------------------------------

loc_688AB338:				; CODE XREF: oscar_util_valid_name+3Ej
		inc	eax
		sub	edx, 30h
		cmp	edx, 9
		ja	short loc_688AB36C

loc_688AB341:				; CODE XREF: oscar_util_valid_name+2Ej
		movsx	edx, byte ptr [eax]
		test	dl, dl
		jnz	short loc_688AB338

loc_688AB348:				; CODE XREF: oscar_util_valid_name+77j
					; oscar_util_valid_name+B0j ...
		mov	eax, 1

loc_688AB34D:				; CODE XREF: oscar_util_valid_name+62j
		mov	edx, [esp+3Ch+var_20]
		xor	edx, ds:__stack_chk_guard
		jnz	loc_688AB44E
		add	esp, 2Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 4

loc_688AB368:				; CODE XREF: oscar_util_valid_name+18j
					; oscar_util_valid_name+1Ej ...
		xor	eax, eax
		jmp	short loc_688AB34D
; ---------------------------------------------------------------------------

loc_688AB36C:				; CODE XREF: oscar_util_valid_name+29j
					; oscar_util_valid_name+37j
		cmp	cl, 2Bh
		jz	loc_688AB400

loc_688AB375:				; CODE XREF: oscar_util_valid_name+10Aj
					; oscar_util_valid_name+11Fj
		mov	[esp+3Ch+C], ebx
		call	purple_email_is_valid
		test	eax, eax
		jnz	short loc_688AB348
		movsx	eax, byte ptr [ebx]
		mov	esi, ds:__mb_cur_max
		cmp	dword ptr [esi], 1
		jnz	loc_688AB439
		mov	edx, ds:_pctype
		mov	edx, [edx]
		mov	ax, [edx+eax*2]
		and	eax, 107h

loc_688AB3A4:				; CODE XREF: oscar_util_valid_name+141j
		test	eax, eax
		jz	short loc_688AB368
		movsx	eax, byte ptr [ebx]
		lea	ebp, [ebx+1]
		mov	edi, ds:_pctype
		test	al, al
		jnz	short loc_688AB3E8
		jmp	short loc_688AB348
; ---------------------------------------------------------------------------
		align 4

loc_688AB3BC:				; CODE XREF: oscar_util_valid_name+E3j
		mov	edx, [edi]
		mov	ax, [edx+eax*2]
		and	eax, 107h

loc_688AB3C7:				; CODE XREF: oscar_util_valid_name+F5j
		test	eax, eax
		jnz	short loc_688AB3D9
		mov	al, [ebx]
		cmp	al, 20h
		jz	short loc_688AB3D9
		cmp	al, 2Eh
		jz	short loc_688AB3D9
		cmp	al, 5Fh
		jnz	short loc_688AB368

loc_688AB3D9:				; CODE XREF: oscar_util_valid_name+C1j
					; oscar_util_valid_name+C7j ...
		mov	ebx, ebp
		inc	ebp
		movsx	eax, byte ptr [ebp-1]
		test	al, al
		jz	loc_688AB348

loc_688AB3E8:				; CODE XREF: oscar_util_valid_name+AEj
		cmp	dword ptr [esi], 1
		jz	short loc_688AB3BC
		mov	[esp+3Ch+Type],	107h ; Type
		mov	[esp+3Ch+C], eax ; C
		call	_isctype
		jmp	short loc_688AB3C7
; ---------------------------------------------------------------------------
		align 10h

loc_688AB400:				; CODE XREF: oscar_util_valid_name+67j
		movsx	eax, byte ptr [ebx+1]
		test	al, al
		jz	loc_688AB348
		sub	eax, 30h
		cmp	eax, 9
		ja	loc_688AB375
		lea	eax, [ebx+2]
		jmp	short loc_688AB42D
; ---------------------------------------------------------------------------
		align 10h

loc_688AB420:				; CODE XREF: oscar_util_valid_name+12Aj
		inc	eax
		sub	edx, 30h
		cmp	edx, 9
		ja	loc_688AB375

loc_688AB42D:				; CODE XREF: oscar_util_valid_name+113j
		movsx	edx, byte ptr [eax]
		test	dl, dl
		jnz	short loc_688AB420
		jmp	loc_688AB348
; ---------------------------------------------------------------------------

loc_688AB439:				; CODE XREF: oscar_util_valid_name+85j
		mov	[esp+3Ch+Type],	107h ; Type
		mov	[esp+3Ch+C], eax ; C
		call	_isctype
		jmp	loc_688AB3A4
; ---------------------------------------------------------------------------

loc_688AB44E:				; CODE XREF: oscar_util_valid_name+4Fj
		call	__stack_chk_fail
oscar_util_valid_name endp

; ---------------------------------------------------------------------------
		align 4
; Exported entry 282. oscar_util_name_compare

; =============== S U B	R O U T	I N E =======================================


		public oscar_util_name_compare
oscar_util_name_compare	proc near	; CODE XREF: aim_ssi_itemlist_finditem+6Ep
					; aim_ssi_itemlist_finditem+A8p ...

C		= dword	ptr -3Ch
var_24		= byte ptr -24h
var_20		= byte ptr -20h
var_10		= dword	ptr -10h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	edi
		push	esi
		push	ebx
		sub	esp, 30h
		mov	ebx, [esp+3Ch+arg_0]
		mov	esi, [esp+3Ch+arg_4]
		mov	eax, ds:__stack_chk_guard
		mov	[esp+3Ch+var_10], eax
		xor	eax, eax
		test	ebx, ebx
		jz	short loc_688AB4D9
		test	esi, esi
		jz	short loc_688AB4D9
		lea	esi, [esi+0]

loc_688AB478:				; CODE XREF: oscar_util_name_compare+2Dj
					; oscar_util_name_compare+67j
		inc	esi
		mov	cl, [esi-1]
		cmp	cl, 20h
		jnz	short loc_688AB485
		jmp	short loc_688AB478
; ---------------------------------------------------------------------------
		align 4

loc_688AB484:				; CODE XREF: oscar_util_name_compare+36j
		inc	ebx

loc_688AB485:				; CODE XREF: oscar_util_name_compare+2Bj
		mov	dl, [ebx]
		cmp	dl, 20h
		jz	short loc_688AB484
		movsx	eax, dl
		mov	[esp+3Ch+C], eax ; C
		mov	[esp+3Ch+var_24], dl
		mov	[esp+3Ch+var_20], cl
		call	toupper
		mov	edi, eax
		movsx	ecx, [esp+3Ch+var_20]
		mov	[esp+3Ch+C], ecx ; C
		call	toupper
		cmp	edi, eax
		mov	dl, [esp+3Ch+var_24]
		jnz	short loc_688AB4BD
		test	dl, dl
		jz	short loc_688AB4D5
		inc	ebx
		jmp	short loc_688AB478
; ---------------------------------------------------------------------------

loc_688AB4BD:				; CODE XREF: oscar_util_name_compare+60j
		mov	eax, 1

loc_688AB4C2:				; CODE XREF: oscar_util_name_compare+83j
					; oscar_util_name_compare+8Aj
		mov	edx, [esp+3Ch+var_10]
		xor	edx, ds:__stack_chk_guard
		jnz	short loc_688AB4E0
		add	esp, 30h
		pop	ebx
		pop	esi
		pop	edi
		retn
; ---------------------------------------------------------------------------

loc_688AB4D5:				; CODE XREF: oscar_util_name_compare+64j
		xor	eax, eax
		jmp	short loc_688AB4C2
; ---------------------------------------------------------------------------

loc_688AB4D9:				; CODE XREF: oscar_util_name_compare+1Bj
					; oscar_util_name_compare+1Fj
		mov	eax, 0FFFFFFFFh
		jmp	short loc_688AB4C2
; ---------------------------------------------------------------------------

loc_688AB4E0:				; CODE XREF: oscar_util_name_compare+78j
		call	__stack_chk_fail
oscar_util_name_compare	endp

; ---------------------------------------------------------------------------
		align 4
; Exported entry 281. oscar_util_format_string

; =============== S U B	R O U T	I N E =======================================


		public oscar_util_format_string
oscar_util_format_string proc near	; CODE XREF: oscar_send_im+347p
					; oscar_status_text+8Fp ...

Time		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_30		= dword	ptr -30h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 3Ch
		mov	esi, [esp+4Ch+arg_0]
		mov	ebp, [esp+4Ch+arg_4]
		mov	eax, ds:__stack_chk_guard
		mov	[esp+4Ch+var_20], eax
		xor	eax, eax
		test	esi, esi
		jz	loc_688AB674
		test	ebp, ebp
		jz	loc_688AB698
		mov	[esp+4Ch+Time],	400h
		call	g_string_sized_new
		mov	ebx, eax
		mov	[esp+4Ch+Time],	0 ; Time
		call	time
		mov	[esp+4Ch+var_24], eax
		lea	eax, [esp+4Ch+var_24]
		mov	[esp+4Ch+Time],	eax ; Time
		call	localtime
		mov	edi, eax
		movsx	edx, byte ptr [esi]
		test	dl, dl
		jz	short loc_688AB5C0
		mov	[esp+4Ch+var_30], ebp
		jmp	short loc_688AB578
; ---------------------------------------------------------------------------
		align 4

loc_688AB54C:				; CODE XREF: oscar_util_format_string+93j
		mov	ecx, [ebx+4]
		lea	eax, [ecx+1]
		cmp	eax, [ebx+8]
		jnb	loc_688AB658
		mov	ebp, [ebx]
		mov	[ebp+ecx+0], dl
		mov	[ebx+4], eax
		mov	edx, [ebx]
		mov	byte ptr [edx+ecx+1], 0
		mov	eax, esi

loc_688AB56D:				; CODE XREF: oscar_util_format_string+11Aj
					; oscar_util_format_string+137j ...
		lea	esi, [eax+1]
		movsx	edx, byte ptr [eax+1]
		test	dl, dl
		jz	short loc_688AB5C0

loc_688AB578:				; CODE XREF: oscar_util_format_string+61j
					; oscar_util_format_string+D5j
		cmp	dl, 25h
		jnz	short loc_688AB54C
		mov	al, [esi+1]
		test	al, al
		jz	short loc_688AB598
		cmp	al, 6Eh
		jz	loc_688AB640
		cmp	al, 74h
		jz	loc_688AB624
		cmp	al, 64h
		jz	short loc_688AB608

loc_688AB598:				; CODE XREF: oscar_util_format_string+9Aj
		mov	edx, [ebx+4]
		lea	eax, [edx+1]
		cmp	eax, [ebx+8]
		jnb	short loc_688AB5E8
		mov	ecx, [ebx]
		mov	byte ptr [ecx+edx], 25h
		mov	[ebx+4], eax
		mov	edx, [ebx]
		mov	byte ptr [edx+eax], 0
		mov	eax, esi
		lea	esi, [eax+1]
		movsx	edx, byte ptr [eax+1]
		test	dl, dl
		jnz	short loc_688AB578
		nop

loc_688AB5C0:				; CODE XREF: oscar_util_format_string+5Bj
					; oscar_util_format_string+8Ej
		mov	[esp+4Ch+var_48], 0
		mov	[esp+4Ch+Time],	ebx
		call	g_string_free

loc_688AB5D0:				; CODE XREF: oscar_util_format_string+1AAj
					; oscar_util_format_string+1CEj
		mov	edx, [esp+4Ch+var_20]
		xor	edx, ds:__stack_chk_guard
		jnz	loc_688AB6BB
		add	esp, 3Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_688AB5E8:				; CODE XREF: oscar_util_format_string+B9j
		mov	[esp+4Ch+var_44], 25h
		mov	[esp+4Ch+var_48], 0FFFFFFFFh
		mov	[esp+4Ch+Time],	ebx
		call	g_string_insert_c
		mov	eax, esi
		jmp	loc_688AB56D
; ---------------------------------------------------------------------------
		align 4

loc_688AB608:				; CODE XREF: oscar_util_format_string+AEj
		mov	[esp+4Ch+Time],	edi
		call	purple_date_format_short
		mov	[esp+4Ch+var_48], eax
		mov	[esp+4Ch+Time],	ebx
		call	g_string_append
		lea	eax, [esi+1]
		jmp	loc_688AB56D
; ---------------------------------------------------------------------------

loc_688AB624:				; CODE XREF: oscar_util_format_string+A6j
		mov	[esp+4Ch+Time],	edi
		call	purple_time_format
		mov	[esp+4Ch+var_48], eax
		mov	[esp+4Ch+Time],	ebx
		call	g_string_append
		lea	eax, [esi+1]
		jmp	loc_688AB56D
; ---------------------------------------------------------------------------

loc_688AB640:				; CODE XREF: oscar_util_format_string+9Ej
		mov	edx, [esp+4Ch+var_30]
		mov	[esp+4Ch+var_48], edx
		mov	[esp+4Ch+Time],	ebx
		call	g_string_append
		lea	eax, [esi+1]
		jmp	loc_688AB56D
; ---------------------------------------------------------------------------

loc_688AB658:				; CODE XREF: oscar_util_format_string+6Dj
		mov	[esp+4Ch+var_44], edx
		mov	[esp+4Ch+var_48], 0FFFFFFFFh
		mov	[esp+4Ch+Time],	ebx
		call	g_string_insert_c
		mov	eax, esi
		jmp	loc_688AB56D
; ---------------------------------------------------------------------------
		align 4

loc_688AB674:				; CODE XREF: oscar_util_format_string+1Cj
		mov	[esp+4Ch+var_44], offset aStrNull_0 ; "str != NULL"
		mov	[esp+4Ch+var_48], offset aOscar_util_for ; "oscar_util_format_string"
		mov	[esp+4Ch+Time],	0
		call	g_return_if_fail_warning
		xor	eax, eax
		jmp	loc_688AB5D0
; ---------------------------------------------------------------------------
		align 4

loc_688AB698:				; CODE XREF: oscar_util_format_string+24j
		mov	[esp+4Ch+var_44], offset aNameNull ; "name != NULL"
		mov	[esp+4Ch+var_48], offset aOscar_util_for ; "oscar_util_format_string"
		mov	[esp+4Ch+Time],	0
		call	g_return_if_fail_warning
		xor	eax, eax
		jmp	loc_688AB5D0
; ---------------------------------------------------------------------------

loc_688AB6BB:				; CODE XREF: oscar_util_format_string+F2j
		call	__stack_chk_fail
oscar_util_format_string endp

; Exported entry 235. oscar_format_buddies

; =============== S U B	R O U T	I N E =======================================


		public oscar_format_buddies
oscar_format_buddies proc near		; CODE XREF: sub_688992D4+EAp
					; sub_688AB798+E3p

var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_20		= dword	ptr -20h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 2Ch
		mov	ebx, [esp+3Ch+arg_0]
		mov	eax, [esp+3Ch+arg_4]
		mov	edx, ds:__stack_chk_guard
		mov	[esp+3Ch+var_20], edx
		xor	edx, edx
		test	ebx, ebx
		jz	loc_688AB76C
		mov	[esp+3Ch+var_3C], offset byte_688B5FFB
		call	g_string_new
		mov	edi, eax
		lea	esi, [esi+0]

loc_688AB6F4:				; CODE XREF: oscar_format_buddies+83j
		mov	esi, [ebx]
		mov	[esp+3Ch+var_3C], esi
		call	purple_buddy_get_name
		mov	ebp, eax
		mov	[esp+3Ch+var_3C], esi
		call	purple_buddy_get_alias_only
		mov	esi, eax
		mov	[esp+3Ch+var_38], ebp
		mov	[esp+3Ch+var_3C], edi
		call	g_string_append
		test	esi, esi
		jz	short loc_688AB72E
		mov	[esp+3Ch+var_34], esi
		mov	[esp+3Ch+var_38], offset aS_1 ;	" (%s)"
		mov	[esp+3Ch+var_3C], edi
		call	g_string_append_printf

loc_688AB72E:				; CODE XREF: oscar_format_buddies+58j
		mov	[esp+3Ch+var_38], offset aBr_0 ; "<br>"
		mov	[esp+3Ch+var_3C], edi
		call	g_string_append
		mov	ebx, [ebx+4]
		test	ebx, ebx
		jnz	short loc_688AB6F4
		mov	eax, [esp+3Ch+var_20]
		xor	eax, ds:__stack_chk_guard
		jnz	short loc_688AB790
		mov	[esp+3Ch+arg_4], 0
		mov	[esp+3Ch+arg_0], edi
		add	esp, 2Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		jmp	g_string_free
; ---------------------------------------------------------------------------
		align 4

loc_688AB76C:				; CODE XREF: oscar_format_buddies+1Dj
		mov	edx, [esp+3Ch+var_20]
		xor	edx, ds:__stack_chk_guard
		jnz	short loc_688AB790
		mov	[esp+3Ch+arg_4], eax
		mov	[esp+3Ch+arg_0], offset	aISI ; "<i>%s</i>"
		add	esp, 2Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		jmp	g_strdup_printf
; ---------------------------------------------------------------------------

loc_688AB790:				; CODE XREF: oscar_format_buddies+8Fj
					; oscar_format_buddies+B6j
		call	__stack_chk_fail
oscar_format_buddies endp

; ---------------------------------------------------------------------------
		align 4

; =============== S U B	R O U T	I N E =======================================


sub_688AB798	proc near		; CODE XREF: oscar_show_visible_list+68p
					; oscar_show_invisible_list+68p

var_6C		= dword	ptr -6Ch
var_68		= dword	ptr -68h
var_64		= dword	ptr -64h
var_60		= dword	ptr -60h
var_5C		= dword	ptr -5Ch
var_58		= dword	ptr -58h
var_54		= dword	ptr -54h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_20		= dword	ptr -20h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 5Ch
		mov	[esp+6Ch+var_40], eax
		mov	[esp+6Ch+var_38], ecx
		mov	eax, [esp+6Ch+arg_0]
		mov	[esp+6Ch+var_34], eax
		mov	eax, [esp+6Ch+arg_4]
		mov	[esp+6Ch+var_30], eax
		movzx	edi, dx
		mov	edx, ds:__stack_chk_guard
		mov	[esp+6Ch+var_20], edx
		xor	edx, edx
		mov	eax, [esp+6Ch+var_40]
		mov	[esp+6Ch+var_6C], eax
		call	purple_connection_get_protocol_data
		mov	esi, eax
		mov	eax, [esp+6Ch+var_40]
		mov	[esp+6Ch+var_6C], eax
		call	purple_connection_get_account
		mov	[esp+6Ch+var_68], 0
		mov	[esp+6Ch+var_6C], eax
		call	purple_find_buddies
		mov	[esp+6Ch+var_3C], eax
		test	eax, eax
		jz	loc_688AB908
		mov	[esp+6Ch+var_44], edi
		mov	ebp, eax
		xor	ebx, ebx

loc_688AB804:				; CODE XREF: sub_688AB798+B0j
		mov	edi, [ebp+0]
		mov	[esp+6Ch+var_6C], edi
		call	purple_buddy_get_name
		mov	edx, [esp+6Ch+var_44]
		mov	[esp+6Ch+var_60], edx
		mov	[esp+6Ch+var_64], eax
		mov	[esp+6Ch+var_68], 0
		mov	eax, [esi+0D8h]
		mov	[esp+6Ch+var_6C], eax
		call	aim_ssi_itemlist_finditem
		test	eax, eax
		jz	short loc_688AB843
		mov	[esp+6Ch+var_68], edi
		mov	[esp+6Ch+var_6C], ebx
		call	g_slist_prepend
		mov	ebx, eax

loc_688AB843:				; CODE XREF: sub_688AB798+9Bj
		mov	ebp, [ebp+4]
		test	ebp, ebp
		jnz	short loc_688AB804

loc_688AB84A:				; CODE XREF: sub_688AB798+172j
		mov	eax, [esp+6Ch+var_3C]
		mov	[esp+6Ch+var_6C], eax
		call	g_slist_free
		mov	[esp+6Ch+var_6C], ebx
		call	g_slist_reverse
		mov	esi, eax
		mov	[esp+6Ch+var_68], offset aYouHaveNoBuddi ; "you	have no	buddies	on this	list"
		mov	[esp+6Ch+var_6C], offset aPidgin_10 ; "pidgin"
		call	libintl_dgettext
		mov	[esp+6Ch+var_68], eax
		mov	[esp+6Ch+var_6C], esi
		call	oscar_format_buddies
		mov	ebx, eax
		mov	[esp+6Ch+var_6C], esi
		call	g_slist_free
		mov	[esp+6Ch+var_68], offset aYouCanAddABudd ; "You	can add	a buddy	to this	list by	rig"...
		mov	[esp+6Ch+var_6C], offset aPidgin_10 ; "pidgin"
		call	libintl_dgettext
		mov	edx, [esp+6Ch+var_30]
		mov	[esp+6Ch+var_68], edx
		mov	[esp+6Ch+var_6C], eax
		call	g_strdup_printf
		mov	esi, eax
		mov	[esp+6Ch+var_54], 0
		mov	[esp+6Ch+var_58], 0
		mov	[esp+6Ch+var_5C], ebx
		mov	[esp+6Ch+var_60], eax
		mov	edx, [esp+6Ch+var_34]
		mov	[esp+6Ch+var_64], edx
		mov	eax, [esp+6Ch+var_38]
		mov	[esp+6Ch+var_68], eax
		mov	eax, [esp+6Ch+var_40]
		mov	[esp+6Ch+var_6C], eax
		call	purple_notify_formatted
		mov	[esp+6Ch+var_6C], esi
		call	g_free
		mov	edx, [esp+6Ch+var_20]
		xor	edx, ds:__stack_chk_guard
		jnz	short loc_688AB90F
		mov	[esp+6Ch+arg_0], ebx
		add	esp, 5Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		jmp	g_free
; ---------------------------------------------------------------------------

loc_688AB908:				; CODE XREF: sub_688AB798+5Ej
		xor	ebx, ebx
		jmp	loc_688AB84A
; ---------------------------------------------------------------------------

loc_688AB90F:				; CODE XREF: sub_688AB798+15Ej
		call	__stack_chk_fail
sub_688AB798	endp


; =============== S U B	R O U T	I N E =======================================


sub_688AB914	proc near		; CODE XREF: .text:688AB9EEp
					; create_visibility_menu_item+3Ap

var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_10		= dword	ptr -10h

		push	esi
		push	ebx
		sub	esp, 24h
		mov	ebx, eax
		mov	esi, edx
		mov	eax, ds:__stack_chk_guard
		mov	[esp+2Ch+var_10], eax
		xor	eax, eax
		mov	eax, [ebx+68h]
		mov	[esp+2Ch+var_2C], eax
		call	purple_connection_get_account
		mov	[esp+2Ch+var_28], offset aInvisible_0 ;	"invisible"
		mov	[esp+2Ch+var_2C], eax
		call	purple_account_is_status_active
		cmp	eax, 1
		sbb	ecx, ecx
		not	ecx
		add	ecx, 3
		mov	[esp+2Ch+var_20], ecx
		mov	[esp+2Ch+var_24], esi
		mov	[esp+2Ch+var_28], 0
		mov	eax, [ebx+0D8h]
		mov	[esp+2Ch+var_2C], eax
		call	aim_ssi_itemlist_finditem
		test	eax, eax
		setnz	al
		movzx	eax, al
		mov	edx, [esp+2Ch+var_10]
		xor	edx, ds:__stack_chk_guard
		jnz	short loc_688AB985
		add	esp, 24h
		pop	ebx
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_688AB985:				; CODE XREF: sub_688AB914+69j
		call	__stack_chk_fail
sub_688AB914	endp

; ---------------------------------------------------------------------------
		align 4

loc_688AB98C:				; DATA XREF: create_visibility_menu_item+88o
		push	edi
		push	esi
		push	ebx
		sub	esp, 20h
		mov	ebx, [esp+30h]
		mov	eax, ds:__stack_chk_guard
		mov	[esp+1Ch], eax
		xor	eax, eax
		mov	[esp], ebx
		call	purple_buddy_get_name
		mov	edi, eax
		mov	[esp], ebx
		call	purple_buddy_get_account
		mov	[esp], eax
		call	purple_account_get_connection
		mov	[esp], eax
		call	purple_connection_get_protocol_data
		mov	esi, eax
		mov	eax, [eax+68h]
		mov	[esp], eax
		call	purple_connection_get_account
		mov	dword ptr [esp+4], offset aInvisible_0 ; "invisible"
		mov	[esp], eax
		call	purple_account_is_status_active
		cmp	eax, 1
		sbb	ebx, ebx
		not	ebx
		add	ebx, 3
		mov	edx, edi
		mov	eax, esi
		call	sub_688AB914
		mov	[esp+8], ebx
		mov	[esp+4], edi
		mov	[esp], esi
		test	eax, eax
		jz	short loc_688ABA1C
		call	aim_ssi_del_from_private_list

loc_688ABA07:				; CODE XREF: .text:688ABA21j
		mov	eax, [esp+1Ch]
		xor	eax, ds:__stack_chk_guard
		jnz	short loc_688ABA23
		add	esp, 20h
		pop	ebx
		pop	esi
		pop	edi
		retn
; ---------------------------------------------------------------------------
		align 4

loc_688ABA1C:				; CODE XREF: .text:688ABA00j
		call	aim_ssi_add_to_private_list
		jmp	short loc_688ABA07
; ---------------------------------------------------------------------------

loc_688ABA23:				; CODE XREF: .text:688ABA11j
		call	__stack_chk_fail
; Exported entry 181. create_visibility_menu_item

; =============== S U B	R O U T	I N E =======================================


		public create_visibility_menu_item
create_visibility_menu_item proc near	; CODE XREF: oscar_blist_node_menu+279p

var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_10		= dword	ptr -10h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	edi
		push	esi
		push	ebx
		sub	esp, 20h
		mov	ebx, [esp+2Ch+arg_0]
		mov	edi, [esp+2Ch+arg_4]
		mov	eax, ds:__stack_chk_guard
		mov	[esp+2Ch+var_10], eax
		xor	eax, eax
		mov	eax, [ebx+68h]
		mov	[esp+2Ch+var_2C], eax
		call	purple_connection_get_account
		mov	[esp+2Ch+var_28], offset aInvisible_0 ;	"invisible"
		mov	[esp+2Ch+var_2C], eax
		call	purple_account_is_status_active
		mov	esi, eax
		mov	edx, edi
		mov	eax, ebx
		call	sub_688AB914
		test	esi, esi
		jz	short loc_688ABA88
		test	eax, eax
		jz	short loc_688ABAEC
		mov	[esp+2Ch+var_28], offset aDonTAppearOnli ; "Don't Appear Online"
		mov	[esp+2Ch+var_2C], offset aPidgin_10 ; "pidgin"
		call	libintl_dgettext
		jmp	short loc_688ABAA0
; ---------------------------------------------------------------------------
		align 4

loc_688ABA88:				; CODE XREF: create_visibility_menu_item+41j
		test	eax, eax
		jnz	short loc_688ABAD4
		mov	[esp+2Ch+var_28], offset aAppearOffline	; "Appear Offline"
		mov	[esp+2Ch+var_2C], offset aPidgin_10 ; "pidgin"
		call	libintl_dgettext

loc_688ABAA0:				; CODE XREF: create_visibility_menu_item+5Bj
					; create_visibility_menu_item+C0j ...
		mov	[esp+2Ch+var_20], 0
		mov	[esp+2Ch+var_24], 0
		mov	[esp+2Ch+var_28], offset loc_688AB98C
		mov	[esp+2Ch+var_2C], eax
		call	purple_menu_action_new
		mov	edx, [esp+2Ch+var_10]
		xor	edx, ds:__stack_chk_guard
		jnz	short loc_688ABB02
		add	esp, 20h
		pop	ebx
		pop	esi
		pop	edi
		retn
; ---------------------------------------------------------------------------
		align 4

loc_688ABAD4:				; CODE XREF: create_visibility_menu_item+62j
		mov	[esp+2Ch+var_28], offset aDonTAppearOffl ; "Don't Appear Offline"
		mov	[esp+2Ch+var_2C], offset aPidgin_10 ; "pidgin"
		call	libintl_dgettext
		jmp	short loc_688ABAA0
; ---------------------------------------------------------------------------
		align 4

loc_688ABAEC:				; CODE XREF: create_visibility_menu_item+45j
		mov	[esp+2Ch+var_28], offset aAppearOnline ; "Appear Online"
		mov	[esp+2Ch+var_2C], offset aPidgin_10 ; "pidgin"
		call	libintl_dgettext
		jmp	short loc_688ABAA0
; ---------------------------------------------------------------------------

loc_688ABB02:				; CODE XREF: create_visibility_menu_item+A2j
		call	__stack_chk_fail
create_visibility_menu_item endp

; ---------------------------------------------------------------------------
		align 4
; Exported entry 271. oscar_show_visible_list

; =============== S U B	R O U T	I N E =======================================


		public oscar_show_visible_list
oscar_show_visible_list	proc near	; DATA XREF: oscar_actions+27Ao

var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_10		= dword	ptr -10h
arg_0		= dword	ptr  4

		push	edi
		push	esi
		push	ebx
		sub	esp, 20h
		mov	ebx, [esp+2Ch+arg_0]
		mov	eax, ds:__stack_chk_guard
		mov	[esp+2Ch+var_10], eax
		xor	eax, eax
		mov	[esp+2Ch+var_28], offset aAppearOnline ; "Appear Online"
		mov	[esp+2Ch+var_2C], offset aPidgin_10 ; "pidgin"
		call	libintl_dgettext
		mov	edi, eax
		mov	[esp+2Ch+var_28], offset aTheseBuddiesWi ; "These buddies will see your	status when"...
		mov	[esp+2Ch+var_2C], offset aPidgin_10 ; "pidgin"
		call	libintl_dgettext
		mov	esi, eax
		mov	[esp+2Ch+var_28], offset aVisibleList ;	"Visible List"
		mov	[esp+2Ch+var_2C], offset aPidgin_10 ; "pidgin"
		call	libintl_dgettext
		mov	ebx, [ebx+0Ch]
		mov	[esp+2Ch+var_28], edi
		mov	[esp+2Ch+var_2C], esi
		mov	ecx, eax
		mov	edx, 2
		mov	eax, ebx
		call	sub_688AB798
		mov	eax, [esp+2Ch+var_10]
		xor	eax, ds:__stack_chk_guard
		jnz	short loc_688ABB88
		add	esp, 20h
		pop	ebx
		pop	esi
		pop	edi
		retn
; ---------------------------------------------------------------------------

loc_688ABB88:				; CODE XREF: oscar_show_visible_list+77j
		call	__stack_chk_fail
oscar_show_visible_list	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 270. oscar_show_invisible_list

; =============== S U B	R O U T	I N E =======================================


		public oscar_show_invisible_list
oscar_show_invisible_list proc near	; DATA XREF: oscar_actions+2ACo

var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_10		= dword	ptr -10h
arg_0		= dword	ptr  4

		push	edi
		push	esi
		push	ebx
		sub	esp, 20h
		mov	ebx, [esp+2Ch+arg_0]
		mov	eax, ds:__stack_chk_guard
		mov	[esp+2Ch+var_10], eax
		xor	eax, eax
		mov	[esp+2Ch+var_28], offset aAppearOffline	; "Appear Offline"
		mov	[esp+2Ch+var_2C], offset aPidgin_10 ; "pidgin"
		call	libintl_dgettext
		mov	edi, eax
		mov	[esp+2Ch+var_28], offset aTheseBuddies_0 ; "These buddies will always see you as of"...
		mov	[esp+2Ch+var_2C], offset aPidgin_10 ; "pidgin"
		call	libintl_dgettext
		mov	esi, eax
		mov	[esp+2Ch+var_28], offset aInvisibleList	; "Invisible List"
		mov	[esp+2Ch+var_2C], offset aPidgin_10 ; "pidgin"
		call	libintl_dgettext
		mov	ebx, [ebx+0Ch]
		mov	[esp+2Ch+var_28], edi
		mov	[esp+2Ch+var_2C], esi
		mov	ecx, eax
		mov	edx, 3
		mov	eax, ebx
		call	sub_688AB798
		mov	eax, [esp+2Ch+var_10]
		xor	eax, ds:__stack_chk_guard
		jnz	short loc_688ABC10
		add	esp, 20h
		pop	ebx
		pop	esi
		pop	edi
		retn
; ---------------------------------------------------------------------------

loc_688ABC10:				; CODE XREF: oscar_show_invisible_list+77j
		call	__stack_chk_fail
oscar_show_invisible_list endp

; ---------------------------------------------------------------------------
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION g_return_if_fail_warning]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION g_malloc]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION g_free]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION g_strdup_printf]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION g_strdup]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION g_strndup]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION g_string_new]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION g_string_append_printf]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION g_string_append_len]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION g_string_free]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION g_ascii_strcasecmp]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION g_utf8_validate]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION g_convert]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION g_convert_with_fallback]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION g_error_free]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION g_str_has_prefix]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION g_malloc0]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION g_realloc]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION g_string_truncate]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION g_string_append]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION g_random_int]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION g_warn_message]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION g_slist_free]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION g_slist_find_custom]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION g_slist_remove]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION g_slist_prepend]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION g_snprintf]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION g_strlcpy]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION g_slist_reverse]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION g_hash_table_insert]
		align 4

loc_688ABD08:				; DATA XREF: flap_connection_new+49o
					; sub_68896FB0+104o ...
		jmp	ds:g_direct_equal
; ---------------------------------------------------------------------------
		align 10h

loc_688ABD10:				; DATA XREF: flap_connection_new+51o
					; sub_68896FB0+10Co ...
		jmp	ds:g_direct_hash
; ---------------------------------------------------------------------------
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION g_hash_table_new]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION g_slist_delete_link]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION g_hash_table_destroy]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION g_queue_pop_head]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION g_queue_is_empty]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION g_queue_free]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION g_queue_push_tail]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION g_queue_new]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION g_hash_table_lookup]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION g_queue_peek_head]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION g_hash_table_new_full]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION g_quark_try_string]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION g_datalist_id_get_data]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION g_datalist_clear]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION g_ascii_strncasecmp]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION g_memdup]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION g_slist_append]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION g_fopen]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION g_path_get_basename]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION g_strdelimit]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION g_utf8_find_prev_char]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION g_list_append]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION g_list_nth_data]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION g_hash_table_remove]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION g_strsplit]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION g_strjoinv]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION g_strfreev]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION g_get_charset]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION g_str_equal]
		align 10h

loc_688ABE00:				; DATA XREF: sub_6889F454+934o
					; oscar_chat_info_defaults+2Co	...
		jmp	ds:g_str_hash
; ---------------------------------------------------------------------------
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION g_hash_table_replace]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION g_markup_escape_text]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION g_strescape]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION g_hash_table_get_keys]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION g_list_copy]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION g_list_sort]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION g_list_free]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION g_string_new_len]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION g_list_prepend]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION g_list_reverse]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION g_utf8_strdown]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION g_utf8_normalize]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION g_hash_table_lookup_extended]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION g_string_sized_new]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION g_string_insert_c]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION libintl_dgettext]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION libintl_dngettext]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION accept]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION purple_connection_get_account]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION purple_request_input]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION purple_connection_get_protocol_data]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION purple_find_buddy]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION purple_buddy_get_group]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION purple_group_get_name]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION purple_debug_info]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION purple_buddy_get_alias_only]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION purple_buddy_get_name]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION purple_prpl_got_user_status]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION purple_blist_node_get_type]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION purple_buddy_get_account]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION purple_account_get_connection]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION purple_account_request_authorization]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION purple_account_get_username]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION xmlnode_get_child]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION xmlnode_get_data_unescaped]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION xmlnode_get_data]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION purple_cipher_context_new_by_name]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION purple_cipher_context_set_option]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION purple_cipher_context_set_key]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION purple_cipher_context_append]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION purple_cipher_context_digest]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION purple_cipher_context_destroy]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION purple_base64_encode]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION purple_connection_error_reason]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION purple_account_get_string]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION xmlnode_from_str]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION purple_debug_error]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION xmlnode_free]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION purple_debug_warning]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION purple_base64_decode]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION purple_connection_get_password]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION purple_url_encode]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION purple_util_fetch_url_request_len_with_account]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION purple_account_get_remember_password]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION purple_account_set_password]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION purple_utf8_try_convert]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION purple_utf8_salvage]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION purple_connection_set_display_name]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION purple_ciphers_find_cipher]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION purple_cipher_context_new]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION purple_buddy_get_presence]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION purple_presence_is_status_primitive_active]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION purple_debug_misc]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION purple_notify_message]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION purple_debug_is_verbose]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION purple_conv_present_error]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION purple_unescape_text]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION purple_presence_get_status]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION purple_status_get_attr_string]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION purple_presence_get_active_status]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION purple_status_get_name]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION purple_markup_strip_html]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION purple_status_get_id]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION serv_got_alias]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION purple_blist_node_set_string]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION purple_utf8_strftime]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION purple_prpl_got_user_status_deactive]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION purple_account_get_presence]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION wpurple_gettimeofday]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION purple_buddy_icons_find_account_icon]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION purple_imgstore_get_size]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION purple_imgstore_get_data]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION purple_imgstore_unref]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION purple_circ_buffer_new]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION purple_timeout_add]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION purple_circ_buffer_get_max_read]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION purple_ssl_write]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION purple_circ_buffer_mark_read]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION purple_input_remove]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION purple_ssl_close]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION wpurple_strerror]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION wpurple_send]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION wpurple_close]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION purple_ssl_read]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION wpurple_recv]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION purple_circ_buffer_append]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION purple_input_add]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION purple_proxy_connect_cancel]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION purple_circ_buffer_destroy]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION purple_timeout_remove]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION purple_strcasestr]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION purple_markup_find_tag]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION purple_imgstore_add_with_id]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION serv_got_im]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION purple_imgstore_unref_by_id]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION purple_conversation_new]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION purple_conversation_write]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION serv_got_typing]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION purple_str_size_to_units]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION serv_got_typing_stopped]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION purple_xfer_get_local_filename]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION purple_xfer_set_bytes_sent]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION purple_xfer_start]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION purple_xfer_get_status]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION purple_xfer_is_completed]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION purple_xfer_set_completed]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION purple_xfer_get_bytes_sent]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION purple_xfer_get_size]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION purple_xfer_get_bytes_remaining]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION purple_accounts_find]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION purple_account_is_connected]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION purple_find_conversation_with_account]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION purple_conversation_present]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION purple_conv_send_confirm]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION purple_accounts_get_all]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION purple_account_get_protocol_id]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION serv_join_chat]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION purple_blist_request_add_buddy]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION purple_find_buddies]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION purple_notify_formatted]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION purple_account_get_bool]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION purple_request_fields_new]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION purple_request_field_group_new]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION purple_request_field_bool_new]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION purple_request_field_group_add_field]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION purple_request_fields_add_group]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION purple_request_fields]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION purple_account_get_active_status]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION purple_request_fields_get_field]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION purple_request_field_bool_get_value]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION purple_account_set_bool]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION purple_notify_uri]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION purple_strreplace]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION purple_account_request_change_password]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION purple_account_request_change_user_info]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION purple_request_action]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION purple_account_is_status_active]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION purple_status_get_type]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION purple_status_type_get_primitive]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION purple_strdup_withhtml]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION purple_markup_linkify]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION purple_connection_update_progress]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION purple_ssl_strerror]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION purple_ssl_input_add]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION purple_notify_searchresults_new]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION purple_notify_searchresults_column_new]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION purple_notify_searchresults_column_add]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION purple_notify_searchresults_row_add]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION purple_notify_searchresults_button_add]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION purple_notify_searchresults]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION purple_proxy_connect]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION purple_ssl_connect_with_ssl_cn]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION wpurple_read]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION purple_account_notify_added]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION purple_blist_alias_buddy]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION purple_buddy_new]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION purple_find_group]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION purple_blist_add_buddy]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION purple_group_new]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION purple_blist_add_group]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION purple_timeout_add_seconds]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION serv_got_chat_in]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION purple_conversation_get_chat_data]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION purple_conv_chat_remove_user]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION purple_conv_chat_add_user]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION purple_normalize]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION purple_base16_encode]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION purple_buddy_icons_set_for_user]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION purple_prpl_got_user_login_time]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION purple_prpl_got_user_idle]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION purple_buddy_icons_get_checksum_for_user]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION purple_status_is_available]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION purple_account_get_user_info]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION serv_set_info]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION purple_status_get_presence]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION purple_presence_is_idle]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION purple_connection_set_state]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION purple_connection_get_display_name]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION purple_presence_get_idle_time]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION purple_account_get_int]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION purple_account_get_check_mail]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION purple_notify_emails]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION serv_got_joined_chat]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION purple_notify_user_info_new]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION purple_notify_user_info_add_pair]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION purple_notify_user_info_add_section_break]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION purple_notify_userinfo]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION purple_notify_user_info_destroy]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION purple_str_strip_char]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION purple_buddy_icons_get_account_icon_timestamp]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION serv_got_chat_invite]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION purple_conv_chat_get_id]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION serv_got_chat_left]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION purple_find_chat]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION purple_connection_set_protocol_data]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION purple_ssl_is_supported]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION purple_prefs_connect_callback]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION purple_account_set_string]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION purple_ssl_connect]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION purple_prefs_disconnect_by_handle]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION purple_imgstore_find_by_id]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION purple_imgstore_get_filename]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION purple_presence_is_online]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION purple_status_is_active]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION purple_status_is_independent]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION purple_blist_remove_buddy]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION purple_account_remove_buddies]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION purple_account_add_buddies]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION purple_conversation_get_name]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION purple_markup_escape_text]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION purple_value_new]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION purple_status_type_new_with_attrs]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION purple_status_type_new_full]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION purple_menu_action_new]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION purple_blist_node_get_string]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION purple_buddy_get_local_buddy_alias]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION purple_prefs_get_string]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION purple_find_buddy_in_group]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION purple_privacy_deny_remove]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION purple_privacy_permit_remove]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION purple_privacy_permit_add]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION purple_privacy_deny_add]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION purple_xfer_new]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION purple_xfer_ref]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION purple_xfer_set_init_fnc]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION purple_xfer_set_cancel_send_fnc]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION purple_xfer_set_request_denied_fnc]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION purple_xfer_set_ack_fnc]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION purple_xfer_request_accepted]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION purple_xfer_request]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION purple_plugin_action_new]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION purple_account_option_string_new]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION purple_account_option_int_new]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION purple_account_option_list_new]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION purple_account_option_bool_new]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION purple_plugin_get_id]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION purple_prefs_add_none]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION purple_prefs_add_bool]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION purple_prefs_remove]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION purple_get_core]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION purple_signal_connect]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION purple_util_fetch_url_cancel]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION purple_network_listen_cancel]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION purple_request_close_with_handle]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION purple_xfer_unref]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION purple_xfer_cancel_local]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION purple_xfer_cancel_remote]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION purple_xfer_get_type]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION purple_network_listen_range]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION purple_network_get_my_ip]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION purple_network_ip_atoi]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION purple_network_get_port_from_fd]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _purple_network_set_common_socket_flags]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION purple_xfer_set_size]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION purple_xfer_set_filename]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION purple_xfer_set_end_fnc]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION purple_xfer_set_cancel_recv_fnc]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION purple_xfer_set_message]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION purple_notify_user_info_add_section_header]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION purple_date_format_short]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION purple_date_format_full]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION purple_str_seconds_to_string]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION purple_core_get_ui_info]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION purple_email_is_valid]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION purple_time_format]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION __stack_chk_fail]
		align 10h

; =============== S U B	R O U T	I N E =======================================


		public TlsCallback_1
TlsCallback_1	proc near		; DATA XREF: .CRT:688C9008o

var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		sub	esp, 1Ch
		mov	eax, [esp+1Ch+arg_4]
		test	eax, eax
		jz	short loc_688AC6D0
		cmp	eax, 3
		jz	short loc_688AC6D0
		mov	eax, 1
		add	esp, 1Ch
		retn	0Ch
; ---------------------------------------------------------------------------
		align 10h

loc_688AC6D0:				; CODE XREF: TlsCallback_1+9j
					; TlsCallback_1+Ej
		mov	edx, [esp+1Ch+arg_8]
		mov	[esp+1Ch+var_18], eax
		mov	eax, [esp+1Ch+arg_0]
		mov	[esp+1Ch+var_14], edx
		mov	[esp+1Ch+var_1C], eax
		call	sub_688ACD20
		mov	eax, 1
		add	esp, 1Ch
		retn	0Ch
TlsCallback_1	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


		public TlsCallback_0
TlsCallback_0	proc near		; CODE XREF: DllEntryPoint+9Cp
					; DATA XREF: .rdata:off_688B63D4o ...

var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	esi
		push	ebx
		sub	esp, 14h
		cmp	ds:dword_688C1878, 2
		mov	eax, [esp+1Ch+arg_4]
		jz	short loc_688AC71C
		mov	ds:dword_688C1878, 2

loc_688AC71C:				; CODE XREF: TlsCallback_0+10j
		cmp	eax, 2
		jz	short loc_688AC733
		cmp	eax, 1
		jz	short loc_688AC768

loc_688AC726:				; CODE XREF: TlsCallback_0+43j
					; TlsCallback_0+84j
		add	esp, 14h
		mov	eax, 1
		pop	ebx
		pop	esi
		retn	0Ch
; ---------------------------------------------------------------------------

loc_688AC733:				; CODE XREF: TlsCallback_0+1Fj
		mov	esi, offset dword_688C9014
		sub	esi, offset dword_688C9014
		sar	esi, 2
		test	esi, esi
		jle	short loc_688AC726
		xor	ebx, ebx

loc_688AC747:				; CODE XREF: TlsCallback_0+59j
		mov	eax, ds:dword_688C9014[ebx*4]
		test	eax, eax
		jz	short loc_688AC754
		call	eax ; dword_688C9014

loc_688AC754:				; CODE XREF: TlsCallback_0+50j
		add	ebx, 1
		cmp	ebx, esi
		jnz	short loc_688AC747
		add	esp, 14h
		mov	eax, 1
		pop	ebx
		pop	esi
		retn	0Ch
; ---------------------------------------------------------------------------

loc_688AC768:				; CODE XREF: TlsCallback_0+24j
		mov	eax, [esp+1Ch+arg_8]
		mov	[esp+1Ch+var_18], 1
		mov	[esp+1Ch+var_14], eax
		mov	eax, [esp+1Ch+arg_0]
		mov	[esp+1Ch+var_1C], eax
		call	sub_688ACD20
		jmp	short loc_688AC726
TlsCallback_0	endp

; ---------------------------------------------------------------------------
		align 10h
		xor	eax, eax
		retn
; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_688AC7A0	proc near		; CODE XREF: DllEntryPoint+2Bp
					; DllEntryPoint+BAp
		mov	eax, 1
		retn	0Ch
sub_688AC7A0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn

; int __cdecl sub_688AC7B0(char	*Format, char)
sub_688AC7B0	proc near		; CODE XREF: sub_688AC810+109p
					; sub_688AC920+CFp ...

Str		= dword	ptr -2Ch
Size		= dword	ptr -28h
Count		= dword	ptr -24h
File		= dword	ptr -20h
ArgList		= dword	ptr -10h
Format		= dword	ptr  4
arg_4		= byte ptr  8

		push	ebx
		sub	esp, 28h
		mov	ebx, ds:_iob
		lea	eax, [esp+2Ch+arg_4]
		mov	[esp+2Ch+Count], 17h ; Count
		mov	[esp+2Ch+Size],	1 ; Size
		add	ebx, 40h
		mov	[esp+2Ch+File],	ebx ; File
		mov	[esp+2Ch+Str], offset aMingwRuntimeFa ;	"Mingw runtime failure:\n"
		mov	[esp+2Ch+ArgList], eax
		call	fwrite
		mov	eax, [esp+2Ch+ArgList]
		mov	[esp+2Ch+Str], ebx ; File
		mov	[esp+2Ch+Count], eax ; ArgList
		mov	eax, [esp+2Ch+Format]
		mov	[esp+2Ch+Size],	eax ; Format
		call	vfprintf
		call	abort
sub_688AC7B0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; int __fastcall sub_688AC810(size_t Size, void	*Src)
sub_688AC810	proc near		; CODE XREF: sub_688AC920+102p
					; sub_688AC920+164p ...

lpAddress	= dword	ptr -5Ch
lpBuffer	= dword	ptr -58h
dwLength	= dword	ptr -54h
lpflOldProtect	= dword	ptr -50h
var_3E		= byte ptr -3Eh
var_3D		= byte ptr -3Dh
flOldProtect	= dword	ptr -3Ch
Buffer		= _MEMORY_BASIC_INFORMATION ptr	-38h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4

		sub	esp, 5Ch
		mov	[esp+5Ch+var_10], ebx
		mov	ebx, eax
		lea	eax, [esp+5Ch+Buffer]
		mov	[esp+5Ch+dwLength], 1Ch	; dwLength
		mov	[esp+5Ch+lpBuffer], eax	; lpBuffer
		mov	[esp+5Ch+lpAddress], ebx ; lpAddress
		mov	[esp+5Ch+var_C], esi
		mov	esi, edx
		mov	[esp+5Ch+var_8], edi
		mov	edi, ecx
		mov	[esp+5Ch+var_4], ebp
		call	VirtualQuery
		sub	esp, 0Ch
		test	eax, eax
		jz	loc_688AC906
		mov	eax, [esp+5Ch+Buffer.Protect]
		cmp	eax, 4
		jnz	short loc_688AC880

loc_688AC855:				; CODE XREF: sub_688AC810+73j
		mov	[esp+5Ch+dwLength], edi	; Size
		mov	[esp+5Ch+lpBuffer], esi	; Src
		mov	[esp+5Ch+lpAddress], ebx ; Dst
		call	memcpy

loc_688AC865:				; CODE XREF: sub_688AC810+C5j
					; sub_688AC810+CCj ...
		mov	ebx, [esp+5Ch+var_10]
		mov	esi, [esp+5Ch+var_C]
		mov	edi, [esp+5Ch+var_8]
		mov	ebp, [esp+5Ch+var_4]
		add	esp, 5Ch
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_688AC880:				; CODE XREF: sub_688AC810+43j
		cmp	eax, 40h
		jz	short loc_688AC855
		mov	eax, [esp+5Ch+Buffer.RegionSize]
		lea	ebp, [esp+5Ch+flOldProtect]
		mov	[esp+5Ch+lpflOldProtect], ebp ;	lpflOldProtect
		mov	[esp+5Ch+dwLength], 40h	; flNewProtect
		mov	[esp+5Ch+lpBuffer], eax	; dwSize
		mov	eax, [esp+5Ch+Buffer.BaseAddress]
		mov	[esp+5Ch+lpAddress], eax ; lpAddress
		call	VirtualProtect
		sub	esp, 10h
		mov	eax, [esp+5Ch+Buffer.Protect]
		mov	[esp+5Ch+dwLength], edi	; Size
		mov	[esp+5Ch+lpBuffer], esi	; Src
		mov	[esp+5Ch+lpAddress], ebx ; Dst
		cmp	eax, 40h
		setnz	[esp+5Ch+var_3E]
		cmp	eax, 4
		setnz	[esp+5Ch+var_3D]
		call	memcpy
		cmp	[esp+5Ch+var_3D], 0
		jz	short loc_688AC865
		cmp	[esp+5Ch+var_3E], 0
		jz	short loc_688AC865
		mov	eax, [esp+5Ch+flOldProtect]
		mov	[esp+5Ch+lpflOldProtect], ebp ;	lpflOldProtect
		mov	[esp+5Ch+dwLength], eax	; flNewProtect
		mov	eax, [esp+5Ch+Buffer.RegionSize]
		mov	[esp+5Ch+lpBuffer], eax	; dwSize
		mov	eax, [esp+5Ch+Buffer.BaseAddress]
		mov	[esp+5Ch+lpAddress], eax ; lpAddress
		call	VirtualProtect
		sub	esp, 10h
		jmp	loc_688AC865
; ---------------------------------------------------------------------------

loc_688AC906:				; CODE XREF: sub_688AC810+36j
		mov	[esp+5Ch+dwLength], ebx
		mov	[esp+5Ch+lpBuffer], 1Ch	; char
		mov	[esp+5Ch+lpAddress], offset aVirtualqueryFa ; "	 VirtualQuery failed for %d bytes at a"...
		call	sub_688AC7B0
sub_688AC810	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_688AC920	proc near		; CODE XREF: DllEntryPoint:loc_68881101p

Format		= dword	ptr -2Ch
var_28		= byte ptr -28h
var_14		= dword	ptr -14h
Src		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4

		mov	eax, ds:dword_688C1870
		test	eax, eax
		jz	short loc_688AC930

locret_688AC929:			; CODE XREF: sub_688AC920+27j
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_688AC930:				; CODE XREF: sub_688AC920+7j
		mov	eax, offset dword_688B9608
		sub	eax, offset dword_688B6488
		cmp	eax, 7
		mov	ds:dword_688C1870, 1
		jle	short locret_688AC929
		sub	esp, 2Ch
		cmp	eax, 0Bh
		mov	[esp+2Ch+var_C], ebx
		mov	[esp+2Ch+var_8], esi
		mov	[esp+2Ch+var_4], edi
		jle	loc_688ACA40
		mov	esi, ds:dword_688B6488
		test	esi, esi
		jnz	loc_688AC9F4
		mov	ebx, ds:dword_688B648C
		test	ebx, ebx
		jnz	short loc_688AC9F4
		mov	ecx, ds:dword_688B6490
		mov	ebx, offset dword_688B6494
		test	ecx, ecx
		jz	loc_688ACA45
		mov	ebx, offset dword_688B6488

loc_688AC991:				; CODE XREF: sub_688AC920+130j
		mov	eax, [ebx+8]
		cmp	eax, 1
		jnz	loc_688ACAE4

loc_688AC99D:				; CODE XREF: sub_688AC920+169j
					; sub_688AC920+19Ej ...
		add	ebx, 0Ch
		cmp	ebx, offset dword_688B9608
		jnb	loc_688ACA2F
		movzx	edx, byte ptr [ebx+8]
		mov	esi, [ebx+4]
		mov	ecx, [ebx]
		cmp	edx, 10h
		lea	eax, [esi+68880000h]
		mov	edi, [ecx+68880000h]
		jz	loc_688ACA58
		cmp	edx, 20h
		jz	loc_688ACAC3
		cmp	edx, 8
		jz	loc_688ACA90
		mov	dword ptr [esp+2Ch+var_28], edx	; char
		mov	[esp+2Ch+Format], offset aUnknownPseudoR ; "  Unknown pseudo relocation	bit size %d"...
		mov	[esp+2Ch+var_14], 0
		call	sub_688AC7B0
; ---------------------------------------------------------------------------

loc_688AC9F4:				; CODE XREF: sub_688AC920+49j
					; sub_688AC920+57j
		mov	ebx, offset dword_688B6488

loc_688AC9F9:				; CODE XREF: sub_688AC920+129j
					; sub_688AC920+136j
		cmp	ebx, offset dword_688B9608
		jnb	short loc_688ACA2F

loc_688ACA01:				; CODE XREF: sub_688AC920+10Dj
		mov	edx, [ebx+4]
		mov	ecx, 4		; Size
		lea	eax, [edx+68880000h]
		mov	edx, [edx+68880000h]
		add	edx, [ebx]
		add	ebx, 8
		mov	[esp+2Ch+Src], edx
		lea	edx, [esp+2Ch+Src] ; Src
		call	sub_688AC810
		cmp	ebx, offset dword_688B9608
		jb	short loc_688ACA01

loc_688ACA2F:				; CODE XREF: sub_688AC920+86j
					; sub_688AC920+DFj
		mov	ebx, [esp+2Ch+var_C]
		mov	esi, [esp+2Ch+var_8]
		mov	edi, [esp+2Ch+var_4]
		add	esp, 2Ch
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_688ACA40:				; CODE XREF: sub_688AC920+3Bj
		mov	ebx, offset dword_688B6488

loc_688ACA45:				; CODE XREF: sub_688AC920+66j
		mov	edx, [ebx]
		test	edx, edx
		jnz	short loc_688AC9F9
		mov	eax, [ebx+4]
		test	eax, eax
		jz	loc_688AC991
		jmp	short loc_688AC9F9
; ---------------------------------------------------------------------------

loc_688ACA58:				; CODE XREF: sub_688AC920+A4j
		movzx	esi, word ptr [esi+68880000h]
		test	si, si
		movzx	edx, si
		jns	short loc_688ACA6D
		or	edx, 0FFFF0000h

loc_688ACA6D:				; CODE XREF: sub_688AC920+145j
		sub	edx, ecx
		mov	ecx, 2		; Size
		sub	edx, 68880000h
		add	edx, edi
		mov	[esp+2Ch+var_14], edx
		lea	edx, [esp+2Ch+var_14] ;	Src
		call	sub_688AC810
		jmp	loc_688AC99D
; ---------------------------------------------------------------------------
		align 10h

loc_688ACA90:				; CODE XREF: sub_688AC920+B6j
		movzx	edx, byte ptr [eax]
		test	dl, dl
		movzx	esi, dl
		jns	short loc_688ACAA0
		or	esi, 0FFFFFF00h

loc_688ACAA0:				; CODE XREF: sub_688AC920+178j
		mov	edx, esi
		sub	edx, 68880000h
		sub	edx, ecx
		mov	ecx, 1		; Size
		add	edx, edi
		mov	[esp+2Ch+var_14], edx
		lea	edx, [esp+2Ch+var_14] ;	Src
		call	sub_688AC810
		jmp	loc_688AC99D
; ---------------------------------------------------------------------------

loc_688ACAC3:				; CODE XREF: sub_688AC920+ADj
		add	ecx, 68880000h
		sub	edi, ecx
		mov	ecx, 4		; Size
		add	edi, [eax]
		lea	edx, [esp+2Ch+var_14] ;	Src
		mov	[esp+2Ch+var_14], edi
		call	sub_688AC810
		jmp	loc_688AC99D
; ---------------------------------------------------------------------------

loc_688ACAE4:				; CODE XREF: sub_688AC920+77j
		mov	dword ptr [esp+2Ch+var_28], eax	; char
		mov	[esp+2Ch+Format], offset aUnknownPseud_0 ; "  Unknown pseudo relocation	protocol ve"...
		call	sub_688AC7B0
; ---------------------------------------------------------------------------
		align 10h

loc_688ACB00:				; DATA XREF: sub_688ACB80:loc_688ACB52o
		mov	eax, off_688AD204
		mov	eax, [eax]
		test	eax, eax
		jz	short locret_688ACB2A
		sub	esp, 0Ch
		xchg	ax, ax

loc_688ACB10:				; CODE XREF: sub_688AC920+205j
		call	eax
		mov	eax, off_688AD204
		lea	edx, [eax+4]
		mov	eax, [eax+4]
		mov	off_688AD204, edx
		test	eax, eax
		jnz	short loc_688ACB10
		add	esp, 0Ch

locret_688ACB2A:			; CODE XREF: sub_688AC920+1E9j
		rep retn
sub_688AC920	endp

; ---------------------------------------------------------------------------
		align 10h
; START	OF FUNCTION CHUNK FOR sub_688ACB80

loc_688ACB30:				; CODE XREF: sub_688ACB80+1Aj
		push	ebx
		sub	esp, 18h
		mov	ebx, ds:dword_688ACF1C
		cmp	ebx, 0FFFFFFFFh
		jz	short loc_688ACB63

loc_688ACB3F:				; CODE XREF: sub_688ACB80-9j
		test	ebx, ebx
		jz	short loc_688ACB52

loc_688ACB43:				; CODE XREF: sub_688ACB80-30j
		call	ds:dword_688ACF1C[ebx*4]
		sub	ebx, 1
		lea	esi, [esi+0]
		jnz	short loc_688ACB43

loc_688ACB52:				; CODE XREF: sub_688ACB80-3Fj
		mov	[esp+1Ch+var_1C], offset loc_688ACB00
		call	sub_68881160
		add	esp, 18h
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_688ACB63:				; CODE XREF: sub_688ACB80-43j
		xor	ebx, ebx
		jmp	short loc_688ACB69
; ---------------------------------------------------------------------------

loc_688ACB67:				; CODE XREF: sub_688ACB80-Bj
		mov	ebx, eax

loc_688ACB69:				; CODE XREF: sub_688ACB80-1Bj
		lea	eax, [ebx+1]
		mov	edx, ds:dword_688ACF1C[eax*4]
		test	edx, edx
		jnz	short loc_688ACB67
		jmp	short loc_688ACB3F
; END OF FUNCTION CHUNK	FOR sub_688ACB80
; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_688ACB80	proc near		; CODE XREF: DllEntryPoint+A6p

var_1C		= dword	ptr -1Ch

; FUNCTION CHUNK AT 688ACB30 SIZE 00000049 BYTES

		mov	ecx, ds:dword_688C1874
		test	ecx, ecx
		jz	short loc_688ACB90
		rep retn
; ---------------------------------------------------------------------------
		align 10h

loc_688ACB90:				; CODE XREF: sub_688ACB80+8j
		mov	ds:dword_688C1874, 1
		jmp	short loc_688ACB30
sub_688ACB80	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_688ACBA0	proc near		; CODE XREF: sub_688ACD20+79p
					; sub_688ACD20:loc_688ACDB1p

lpCriticalSection= dword ptr -1Ch

		push	esi
		push	ebx
		sub	esp, 14h
		mov	[esp+1Ch+lpCriticalSection], offset CriticalSection ; lpCriticalSection
		call	EnterCriticalSection
		mov	ebx, ds:dword_688C1898
		sub	esp, 4
		test	ebx, ebx
		jz	short loc_688ACBEB
		xchg	ax, ax

loc_688ACBC0:				; CODE XREF: sub_688ACBA0+49j
		mov	eax, [ebx]
		mov	[esp+1Ch+lpCriticalSection], eax ; dwTlsIndex
		call	TlsGetValue
		sub	esp, 4
		mov	esi, eax
		call	GetLastError
		test	eax, eax
		jnz	short loc_688ACBE4
		test	esi, esi
		jz	short loc_688ACBE4
		mov	eax, [ebx+4]
		mov	[esp+1Ch+lpCriticalSection], esi
		call	eax

loc_688ACBE4:				; CODE XREF: sub_688ACBA0+36j
					; sub_688ACBA0+3Aj
		mov	ebx, [ebx+8]
		test	ebx, ebx
		jnz	short loc_688ACBC0

loc_688ACBEB:				; CODE XREF: sub_688ACBA0+1Cj
		mov	[esp+1Ch+lpCriticalSection], offset CriticalSection ; lpCriticalSection
		call	LeaveCriticalSection
		sub	esp, 4
		add	esp, 14h
		pop	ebx
		pop	esi
		retn
sub_688ACBA0	endp

; ---------------------------------------------------------------------------
		sub	esp, 1Ch
		mov	eax, ds:dword_688C187C
		mov	[esp+18h], esi
		xor	esi, esi
		mov	[esp+14h], ebx
		test	eax, eax
		jnz	short loc_688ACC24

loc_688ACC16:				; CODE XREF: .text:688ACC8Aj
		mov	eax, esi
		mov	ebx, [esp+14h]
		mov	esi, [esp+18h]
		add	esp, 1Ch
		retn
; ---------------------------------------------------------------------------

loc_688ACC24:				; CODE XREF: .text:688ACC14j
		mov	dword ptr [esp+4], 0Ch
		mov	dword ptr [esp], 1
		call	calloc
		test	eax, eax
		mov	ebx, eax
		jz	short loc_688ACC85
		mov	eax, [esp+20h]
		mov	dword ptr [esp], offset	CriticalSection
		mov	[ebx], eax
		mov	eax, [esp+24h]
		mov	[ebx+4], eax
		call	EnterCriticalSection
		mov	eax, ds:dword_688C1898
		mov	ds:dword_688C1898, ebx
		mov	[ebx+8], eax
		sub	esp, 4
		mov	dword ptr [esp], offset	CriticalSection
		call	LeaveCriticalSection
		mov	eax, esi
		sub	esp, 4
		mov	ebx, [esp+14h]
		mov	esi, [esp+18h]
		add	esp, 1Ch
		retn
; ---------------------------------------------------------------------------

loc_688ACC85:				; CODE XREF: .text:688ACC3Cj
		mov	esi, 0FFFFFFFFh
		jmp	short loc_688ACC16
; ---------------------------------------------------------------------------
		align 10h
		push	ebx
		sub	esp, 18h
		mov	eax, ds:dword_688C187C
		mov	ebx, [esp+20h]
		test	eax, eax
		jnz	short loc_688ACCA8
		add	esp, 18h
		xor	eax, eax
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_688ACCA8:				; CODE XREF: .text:688ACC9Fj
		mov	dword ptr [esp], offset	CriticalSection
		call	EnterCriticalSection
		mov	edx, ds:dword_688C1898
		sub	esp, 4
		test	edx, edx
		jz	short loc_688ACCDF
		mov	eax, [edx]
		cmp	eax, ebx
		jnz	short loc_688ACCD8
		jmp	short loc_688ACD14
; ---------------------------------------------------------------------------
		align 10h

loc_688ACCD0:				; CODE XREF: .text:688ACCDDj
		mov	ecx, [eax]
		cmp	ecx, ebx
		jz	short loc_688ACCF5
		mov	edx, eax

loc_688ACCD8:				; CODE XREF: .text:688ACCC5j
		mov	eax, [edx+8]
		test	eax, eax
		jnz	short loc_688ACCD0

loc_688ACCDF:				; CODE XREF: .text:688ACCBFj
		mov	dword ptr [esp], offset	CriticalSection
		call	LeaveCriticalSection
		sub	esp, 4

loc_688ACCEE:				; CODE XREF: .text:688ACD12j
		add	esp, 18h
		xor	eax, eax
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_688ACCF5:				; CODE XREF: .text:688ACCD4j
		mov	ecx, [eax+8]
		mov	[edx+8], ecx

loc_688ACCFB:				; CODE XREF: .text:688ACD1Ej
		mov	[esp], eax
		call	free
		mov	dword ptr [esp], offset	CriticalSection
		call	LeaveCriticalSection
		sub	esp, 4
		jmp	short loc_688ACCEE
; ---------------------------------------------------------------------------

loc_688ACD14:				; CODE XREF: .text:688ACCC7j
		mov	eax, [edx+8]
		mov	ds:dword_688C1898, eax
		mov	eax, edx
		jmp	short loc_688ACCFB

; =============== S U B	R O U T	I N E =======================================


sub_688ACD20	proc near		; CODE XREF: TlsCallback_1+33p
					; TlsCallback_0+7Fp

lpCriticalSection= dword ptr -1Ch
arg_4		= dword	ptr  8

		sub	esp, 1Ch
		mov	eax, [esp+1Ch+arg_4]
		cmp	eax, 1
		jz	short loc_688ACD70
		jb	short loc_688ACD40
		cmp	eax, 3
		jz	short loc_688ACD90

loc_688ACD33:				; CODE XREF: sub_688ACD20+31j
					; sub_688ACD20+4Cj ...
		mov	eax, 1
		add	esp, 1Ch
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_688ACD40:				; CODE XREF: sub_688ACD20+Cj
		mov	eax, ds:dword_688C187C
		test	eax, eax
		jnz	short loc_688ACDB1

loc_688ACD49:				; CODE XREF: sub_688ACD20+96j
		mov	eax, ds:dword_688C187C
		cmp	eax, 1
		jnz	short loc_688ACD33
		mov	[esp+1Ch+lpCriticalSection], offset CriticalSection ; lpCriticalSection
		mov	ds:dword_688C187C, 0
		call	DeleteCriticalSection
		sub	esp, 4
		jmp	short loc_688ACD33
; ---------------------------------------------------------------------------
		align 10h

loc_688ACD70:				; CODE XREF: sub_688ACD20+Aj
		mov	eax, ds:dword_688C187C
		test	eax, eax
		jz	short loc_688ACDA0

loc_688ACD79:				; CODE XREF: sub_688ACD20+8Fj
		mov	ds:dword_688C187C, 1
		mov	eax, 1
		add	esp, 1Ch
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_688ACD90:				; CODE XREF: sub_688ACD20+11j
		mov	eax, ds:dword_688C187C
		test	eax, eax
		jz	short loc_688ACD33
		call	sub_688ACBA0
		jmp	short loc_688ACD33
; ---------------------------------------------------------------------------

loc_688ACDA0:				; CODE XREF: sub_688ACD20+57j
		mov	[esp+1Ch+lpCriticalSection], offset CriticalSection ; lpCriticalSection
		call	InitializeCriticalSection
		sub	esp, 4
		jmp	short loc_688ACD79
; ---------------------------------------------------------------------------

loc_688ACDB1:				; CODE XREF: sub_688ACD20+27j
		call	sub_688ACBA0
		jmp	short loc_688ACD49
sub_688ACD20	endp

; ---------------------------------------------------------------------------
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION free]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION fflush]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION malloc]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _errno]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION __dllonexit]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION atoi]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION strcmp]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION strtol]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION strchr]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION strrchr]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION strncpy]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION memcmp]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION rand]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _snprintf]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION strstr]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION time]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION gmtime]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION atol]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION fclose]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION fread]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _isctype]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION strtoul]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION localtime]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION mktime]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION toupper]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION fwrite]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION vfprintf]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION abort]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION memcpy]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION calloc]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION GetModuleHandleA]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION GetProcAddress]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION VirtualQuery]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION VirtualProtect]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION EnterCriticalSection]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION TlsGetValue]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION GetLastError]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION LeaveCriticalSection]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION DeleteCriticalSection]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION InitializeCriticalSection]
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_688ACF00	proc near		; DATA XREF: .text:688ACF20o

var_18		= dword	ptr -18h

		push	ebp
		mov	ebp, esp
		sub	esp, 18h
		call	sub_688811C0
		mov	[esp+18h+var_18], offset sub_6888124C
		call	sub_68881160
		leave
		retn
sub_688ACF00	endp

; ---------------------------------------------------------------------------
		align 4
dword_688ACF1C	dd 0FFFFFFFFh		; DATA XREF: sub_688ACB80-4Cr
					; sub_688ACB80:loc_688ACB43r ...
		dd offset sub_688ACF00
		align 8
		dd 0FFFFFFFFh
dword_688ACF2C	dd 35h dup(0)		; DATA XREF: .data:off_688AD204o
_text		ends

; Section 2. (virtual address 0002D000)
; Virtual size			: 0000020C (	524.)
; Section size in file		: 00000400 (   1024.)
; Offset to raw	data for section: 0002C400
; Flags	C0600040: Data Readable	Writable
; Alignment	: 32 bytes
; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read/Write
; Segment alignment '32byte' can not be represented in assembly
_data		segment	para public 'DATA' use32
		assume cs:_data
		;org 688AD000h
off_688AD000	dd offset aThinking	; DATA XREF: icq_get_purple_moods+Eo
					; "thinking"
off_688AD004	dd offset aThinking_0	; DATA XREF: sub_68891114+98r
					; icq_get_custom_icon_description+1Fo ...
					; "Thinking"
		dd 0
		dd offset aBusy		; "busy"
		dd offset aBusy_0	; "Busy"
		align 8
		dd offset aShopping	; "shopping"
		dd offset aShopping_0	; "Shopping"
		dd 0
		dd offset aTyping	; "typing"
		align 10h
		dd offset aQuestion	; "question"
		dd offset aQuestioning	; "Questioning"
		dd 0
		dd offset aAngry	; "angry"
		dd offset aAngry_0	; "Angry"
		align 8
		dd offset aPlate	; "plate"
		dd offset aEating	; "Eating"
		dd 0
		dd offset aCinema	; "cinema"
		dd offset aWatchingAMovie ; "Watching a	movie"
		align 10h
		dd offset aSick		; "sick"
		dd offset aSick_0	; "Sick"
		dd 0
		dd offset aTyping	; "typing"
		dd offset aTyping_0	; "Typing"
		align 8
		dd offset aSuit		; "suit"
		dd offset aAtTheOffice	; "At the office"
		dd 0
		dd offset aBathing	; "bathing"
		dd offset aTakingABath	; "Taking a bath"
		align 10h
		dd offset aTv		; "tv"
		dd offset aWatchingTv	; "Watching TV"
		dd 0
		dd offset aExcited	; "excited"
		dd offset aHavingFun	; "Having fun"
		align 8
		dd offset aSleeping	; "sleeping"
		dd offset aSleeping_0	; "Sleeping"
		dd 0
		dd offset aHiptop_1	; "hiptop"
		dd offset aUsingAPda	; "Using a PDA"
		align 10h
		dd offset aIn_love	; "in_love"
		dd offset aInLove	; "In love"
		dd 0
		dd offset aSleepy	; "sleepy"
		dd offset aSleepy_0	; "Sleepy"
		align 8
		dd offset aMeeting	; "meeting"
		dd offset aMeetingFriends ; "Meeting friends"
		dd 0
		dd offset aPhone	; "phone"
		dd offset aOnThePhone	; "On the phone"
		align 10h
		dd offset aSurfing	; "surfing"
		dd offset aSurfing_0	; "Surfing"
		dd 0
		dd offset aMobile_1	; "mobile"
		dd offset aMobile_2	; "Mobile"
		align 8
		dd offset aSearch	; "search"
		dd offset aSearchingTheWe ; "Searching the web"
		dd 0
		dd offset aParty	; "party"
		dd offset aAtAParty	; "At a	party"
		align 10h
		dd offset aCoffee	; "coffee"
		dd offset aHavingCoffee	; "Having Coffee"
		dd 0
		dd offset aConsole	; "console"
		dd offset aGaming	; "Gaming"
		align 8
		dd offset aInternet	; "internet"
		dd offset aBrowsingTheWeb ; "Browsing the web"
		dd 0
		dd offset aCigarette	; "cigarette"
		dd offset aSmoking	; "Smoking"
		align 10h
		dd offset aWriting	; "writing"
		dd offset aWriting_0	; "Writing"
		dd 0
		dd offset aBeer		; "beer"
		dd offset aDrinking	; "Drinking"
		align 8
		dd offset aMusic	; "music"
		dd offset aListeningToMus ; "Listening to music"
		dd 0
		dd offset aStudying	; "studying"
		dd offset aStudying_0	; "Studying"
		align 10h
		dd offset aWorking	; "working"
		dd offset aWorking_0	; "Working"
		dd 0
		dd offset aRestroom	; "restroom"
		dd offset aInTheRestroom ; "In the restroom"
		align 40h
dword_688AD1C0	dd 0			; DATA XREF: sub_6889A890+134o
					; sub_6889E310+2Bo
		dd 50109h, 1, 0BDCh, 611h
		dd offset aUs		; "us"
		dd offset aEn_0		; "en"
dword_688AD1DC	dd 0			; DATA XREF: sub_6889A890+14Ao
					; sub_6889E310+41o
		dd 14010Ah, 34h, 0C18h,	611h
		dd offset aUs		; "us"
		dd offset aEn_0		; "en"
dword_688AD1F8	dd 1			; DATA XREF: .text:6889ECE2r
					; .text:6889ECF0w
byte_688AD1FC	db 1			; DATA XREF: oscar_send_im+1AAo
byte_688AD1FD	db 3 dup(1)		; DATA XREF: oscar_send_im:loc_688A212Co
		dd 2
off_688AD204	dd offset dword_688ACF2C ; DATA	XREF: sub_688AC920:loc_688ACB00r
					; sub_688AC920+1F2r ...
dword_688AD208	dd 0			; DATA XREF: sub_688811C0:loc_688811FFr
					; sub_688811C0+71o
		align 1000h
_data		ends

; Section 3. (virtual address 0002E000)
; Virtual size			: 0000B608 (  46600.)
; Section size in file		: 0000B800 (  47104.)
; Offset to raw	data for section: 0002C800
; Flags	40600040: Data Readable
; Alignment	: 32 bytes
; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
; Segment alignment '32byte' can not be represented in assembly
_rdata		segment	para public 'DATA' use32
		assume cs:_rdata
		;org 688AE000h
; CHAR ModuleName[]
ModuleName	db 'libgcc_s_dw2-1.dll',0 ; DATA XREF: sub_688811C0+6o
					; sub_6888124C+6o
; CHAR ProcName[]
ProcName	db '__register_frame_info',0 ; DATA XREF: sub_688811C0+17o
; CHAR aLibgcj13_dll[]
aLibgcj13_dll	db 'libgcj-13.dll',0    ; DATA XREF: sub_688811C0+49o
; CHAR a_jv_registercl[]
a_jv_registercl	db '_Jv_RegisterClasses',0 ; DATA XREF: sub_688811C0+5Ao
; CHAR a__deregister_f[]
a__deregister_f	db '__deregister_frame_info',0 ; DATA XREF: sub_6888124C+17o
		align 4
a_cancel_0	db '_Cancel',0          ; DATA XREF: sub_68881290+2Ao
aPidgin		db 'pidgin',0           ; DATA XREF: sub_68881290+32o
					; sub_68881290+4Co ...
a_ok_0		db '_OK',0              ; DATA XREF: sub_68881290+44o
aNoReasonGive_0	db 'No reason given.',0 ; DATA XREF: sub_68881290+5Ao
					; .text:loc_688813FCo
aAuthorizatio_1	db 'Authorization Denied Message:',0 ; DATA XREF: sub_68881290+70o
		align 4
aSsiAddingBuddy	db 'ssi: adding buddy %s to group %s',0Ah,0
					; DATA XREF: oscar_auth_sendrequest+66o
aOscar		db 'oscar',0            ; DATA XREF: oscar_auth_sendrequest+6Eo
aPleaseAuthoriz	db 'Please authorize me so I can add you to my buddy list.',0
					; DATA XREF: oscar_auth_sendrequest:loc_688815E4o
aAvailable	db 'available',0        ; DATA XREF: oscar_auth_sendrequest+125o
aMobile		db 'mobile',0           ; DATA XREF: oscar_auth_sendrequest+14Do
aPurple_blist_n	db 'PURPLE_BLIST_NODE_IS_BUDDY(node)',0
					; DATA XREF: oscar_auth_sendrequest_menu+21o
aOscar_auth_sen	db 'oscar_auth_sendrequest_menu',0
					; DATA XREF: oscar_auth_sendrequest_menu+29o
		align 4
aOffBsLen	db 'off <= bs->len',0   ; DATA XREF: sub_68881874:loc_688818A4o
		align 4
aByte_stream_cu	db 'byte_stream_curpos(bs) + n >= 0',0
					; DATA XREF: sub_68881904:loc_68881968o
aGsizeNByte_str	db '(gsize)n <= byte_stream_bytes_left(bs)',0 ; DATA XREF: sub_68881904+2Bo
		align 10h
aByte_stream_by	db 'byte_stream_bytes_left(bs) >= 1',0
					; DATA XREF: sub_68881990:loc_688819C8o
					; sub_68881AE4:loc_68881B1Co ...
aByte_stream__0	db 'byte_stream_bytes_left(bs) >= 2',0
					; DATA XREF: sub_688819F0:loc_68881A38o
					; sub_68881B44:loc_68881B8Co ...
aByte_stream__2	db 'byte_stream_bytes_left(bs) >= 4',0
					; DATA XREF: sub_68881A60:loc_68881ABCo
					; sub_68881BB4:loc_68881C14o ...
aByte_stream__7	db 'byte_stream_bytes_left(bs) >= len',0
					; DATA XREF: sub_68881C3C:loc_68881C84o
					; sub_68881CAC:loc_68881CFCo ...
		align 4
aByte_stream_17	db 'byte_stream_bytes_left(srcbs) >= len',0
					; DATA XREF: sub_68882160:loc_688821ACo
aByte_stream_se	db 'byte_stream_setpos',0 ; DATA XREF: sub_68881874+38o
aByte_stream_ad	db 'byte_stream_advance',0 ; DATA XREF: sub_68881904+33o
					; sub_68881904+6Co
aByte_stream_ge	db 'byte_stream_get8',0 ; DATA XREF: sub_68881990+40o
aByte_stream__1	db 'byte_stream_get16',0 ; DATA XREF: sub_688819F0+50o
aByte_stream__3	db 'byte_stream_get32',0 ; DATA XREF: sub_68881A60+64o
aByte_stream__4	db 'byte_stream_getle8',0 ; DATA XREF: sub_68881AE4+40o
aByte_stream__5	db 'byte_stream_getle16',0 ; DATA XREF: sub_68881B44+50o
aByte_stream__6	db 'byte_stream_getle32',0 ; DATA XREF: sub_68881BB4+68o
aByte_stream__8	db 'byte_stream_getrawbuf',0 ; DATA XREF: sub_68881C3C+50o
aByte_stream__9	db 'byte_stream_getraw',0 ; DATA XREF: sub_68881CAC+58o
aByte_stream_10	db 'byte_stream_getstr',0 ; DATA XREF: sub_68881D24+60o
aByte_stream_pu	db 'byte_stream_put8',0 ; DATA XREF: sub_68881DA4+48o
aByte_stream_11	db 'byte_stream_put16',0 ; DATA XREF: sub_68881E0C+60o
aByte_stream_12	db 'byte_stream_put32',0 ; DATA XREF: sub_68881E8C+78o
aByte_stream_13	db 'byte_stream_putle8',0 ; DATA XREF: sub_68881F24+48o
aByte_stream_14	db 'byte_stream_putle16',0 ; DATA XREF: sub_68881F8C+5Co
aByte_stream_15	db 'byte_stream_putle32',0 ; DATA XREF: sub_68882008+78o
aByte_stream_16	db 'byte_stream_putraw',0 ; DATA XREF: sub_688820A0+54o
aByte_stream_18	db 'byte_stream_putbs',0 ; DATA XREF: sub_68882160+54o
					; sub_68882160+88o
		align 4
aStatuscode	db 'statusCode',0       ; DATA XREF: sub_688823E0+16o
					; sub_68882584+124o ...
a200		db '200',0              ; DATA XREF: sub_688823E0+36o
					; sub_68882C1C+1C6o
aStatustext	db 'statusText',0       ; DATA XREF: sub_688823E0+90o
		align 10h
aReceivedUnex_0	db 'Received unexpected response from %s: %s',0
					; DATA XREF: sub_688823E0+B7o
aPidgin_0	db 'pidgin',0           ; DATA XREF: sub_688823E0+50o
					; sub_688823E0+BFo ...
aReceivedUnexpe	db 'Received unexpected response from %s',0
					; DATA XREF: sub_688823E0:loc_68882428o
aHmac		db 'hmac',0             ; DATA XREF: sub_688824C4+1Do
aSha256		db 'sha256',0           ; DATA XREF: sub_688824C4+2Bo
aHash		db 'hash',0             ; DATA XREF: sub_688824C4+33o
		align 4
aTheServerRetur	db 'The server returned an empty response',0 ; DATA XREF: sub_68882584+B4o
					; sub_68882C1C+B0o
aErrorRequestin	db 'Error requesting %s: %s',0 ; DATA XREF: sub_68882584+54o
					; sub_68882C1C+4Co
; char Str2[]
Str2		db 'opportunistic_encryption',0 ; DATA XREF: sub_68882584+E8o
					; sub_68882584:loc_68882AEBo ...
aEncryption	db 'encryption',0       ; DATA XREF: sub_68882584+F0o
					; sub_68882C1C+5DEo
		align 4
aStartoscarse_2	db 'startOSCARSession could not parse response as XML: %s',0Ah,0
					; DATA XREF: sub_68882584+513o
aOscar_0	db 'oscar',0            ; DATA XREF: sub_68882584+243o
					; sub_68882584:loc_6888285Co ...
aData		db 'data',0             ; DATA XREF: sub_68882584+13Eo
					; sub_68882C1C+116o
aHost		db 'host',0             ; DATA XREF: sub_68882584+162o
aPort		db 'port',0             ; DATA XREF: sub_68882584+176o
aCookie		db 'cookie',0           ; DATA XREF: sub_68882584+18Eo
		align 10h
aStartoscarse_0	db 'startOSCARSession response was missing statusCode: %s',0Ah,0
					; DATA XREF: sub_68882584+2D0o
aStatusdetailco	db 'statusDetailCode',0 ; DATA XREF: sub_68882584+1E5o
					; sub_68882C1C+1F4o
aStartoscarsess	db 'startOSCARSession response statusCode was %s: %s',0Ah,0
					; DATA XREF: sub_68882584+23Bo
					; sub_68882584+33Co
		align 4
aYouHaveBeenCon	db 'You have been connecting and disconnecting too frequently. Wait t'
					; DATA XREF: sub_68882584:loc_688827EFo
		db 'en minutes and try again. If you continue to try, you will need t'
		db 'o wait even longer.',0
		align 4
aStartoscarse_1	db 'startOSCARSession response was missing something: %s',0Ah,0
					; DATA XREF: sub_68882584+48Do
					; sub_68882584+55Ao
aNo_encryption	db 'no_encryption',0    ; DATA XREF: sub_68882584+3EEo
					; sub_68882C1C+5EEo
aTlscertname	db 'tlsCertName',0      ; DATA XREF: sub_68882584+404o
aWeHavenTReceiv	db 'We haven',27h,'t received a tlsCertName to use. We will not do SSL t'
					; DATA XREF: sub_68882584+58Bo
		db 'o BOS.',0Ah,0
		align 4
aStartoscarse_3	db 'startOSCARSession was missing tlsCertName: %s',0Ah,0
					; DATA XREF: sub_68882584+64Ao
		align 4
aYouRequiredEnc	db 'You required encryption in your account settings, but one of the '
					; DATA XREF: sub_68882584+65Eo
		db 'servers doesn',27h,'t support it.',0
aPrplIcqClientk	db 'prpl-icq-clientkey',0 ; DATA XREF: sub_68882C1C:loc_688833B9o
					; send_client_login:loc_68883614o
aPrplAimClientk	db 'prpl-aim-clientkey',0 ; DATA XREF: sub_68882C1C+60Fo
					; send_client_login+70o
aPrplIcqDisti_0	db 'prpl-icq-distid',0  ; DATA XREF: sub_68882C1C:loc_688833C3o
aPrplAimDisti_0	db 'prpl-aim-distid',0  ; DATA XREF: sub_68882C1C+631o
		align 10h
aClientloginCou	db 'clientLogin could not parse response as XML: %s',0Ah,0
					; DATA XREF: sub_68882C1C+500o
aSessionsecret	db 'sessionSecret',0    ; DATA XREF: sub_68882C1C+13Ao
aHosttime	db 'hostTime',0         ; DATA XREF: sub_68882C1C+14Eo
aToken		db 'token',0            ; DATA XREF: sub_68882C1C+166o
aA		db 'a',0                ; DATA XREF: sub_68882C1C+18Ao
aClientloginR_1	db 'clientLogin response was missing statusCode: %s',0Ah,0
					; DATA XREF: sub_68882C1C+463o
		align 4
aClientloginRes	db 'clientLogin response statusCode was %d (%d): %s',0Ah,0
					; DATA XREF: sub_68882C1C+24Co
					; sub_68882C1C+446o
aIncorrectPassw	db 'Incorrect password',0 ; DATA XREF: sub_68882C1C:loc_68883420o
aServerRequeste	db 'Server requested that you fill out a CAPTCHA in order to sign in,'
					; DATA XREF: sub_68882C1C+4CFo
		db ' but this client does not currently support CAPTCHAs.',0
		align 10h
aAolDoesNotAllo	db 'AOL does not allow your screen name to authenticate here',0
					; DATA XREF: sub_68882C1C:loc_688833CDo
		align 4
aClientloginR_0	db 'clientLogin response was missing something: %s',0Ah,0
					; DATA XREF: sub_68882C1C+380o
					; sub_68882C1C+4ADo
a_S		db '%.*s',0             ; DATA XREF: sub_68882C1C+59Eo
aMa15d7jtxbmvgR	db 'ma15d7JTxbmVG-RP',0 ; DATA XREF: sub_68882C1C:loc_68883230o
					; send_client_login:loc_688834A5o
		align 4
aASDistidDFXmlK	db 'a=%s&distId=%d&f=xml&k=%s&ts=%lu&useTLS=%d',0
					; DATA XREF: sub_68882C1C+66Co
aGet		db 'GET',0              ; DATA XREF: sub_68882C1C+6ADo
aSSS_0		db '%s&%s&%s',0         ; DATA XREF: sub_68882C1C+6B5o
aS?SSig_sha256S	db '%s?%s&sig_sha256=%s',0 ; DATA XREF: sub_68882C1C+6FDo
byte_688AE990	db 0			; DATA XREF: send_client_login+57o
aDevidS		db 'devId=%s',0         ; DATA XREF: send_client_login+89o
aFXml		db '&f=xml',0           ; DATA XREF: send_client_login+99o
aPwdS		db '&pwd=%s',0          ; DATA XREF: send_client_login+B5o
aSS		db '&s=%s',0            ; DATA XREF: send_client_login+D5o
		align 10h
aPostAuthClient	db 'POST /auth/clientLogin HTTP/1.0',0Dh,0Ah
					; DATA XREF: send_client_login+EDo
		db 'Connection: close',0Dh,0Ah
		db 'Accept: */*',0Dh,0Ah,0
		align 4
aContentTypeApp	db 'Content-Type: application/x-www-form-urlencoded; charset=UTF-8',0Dh,0Ah
					; DATA XREF: send_client_login+FBo
		db 0
aContentLengthU	db 'Content-Length: %u',0Dh,0Ah ; DATA XREF: send_client_login+112o
		db 0Dh,0Ah,0
aHttpsApi_scree	db 'https://api.screenname.aol.com/auth/clientLogin',0
					; DATA XREF: .rdata:off_688AEAA8o
aHttpsApi_login	db 'https://api.login.icq.net/auth/clientLogin',0
					; DATA XREF: .rdata:688AEAACo
		align 4
off_688AEAA8	dd offset aHttpsApi_scree ; DATA XREF: sub_68882C1C+45r
					; sub_68882C1C+28Er ...
					; "https://api.screenname.aol.com/auth/cli"...
		dd offset aHttpsApi_login ; "https://api.login.icq.net/auth/clientLo"...
aHttpsApi_oscar	db 'https://api.oscar.aol.com/aim/startOSCARSession',0
					; DATA XREF: .rdata:off_688AEB0Co
aHttpsApi_icq_n	db 'https://api.icq.net/aim/startOSCARSession',0
					; DATA XREF: .rdata:688AEB10o
		align 4
off_688AEB0C	dd offset aHttpsApi_oscar ; DATA XREF: sub_68882584+4Dr
					; sub_68882584+2F2r ...
					; "https://api.oscar.aol.com/aim/startOSCA"...
		dd offset aHttpsApi_icq_n ; "https://api.icq.net/aim/startOSCARSessi"...
aEncodingsIsNul	db 'encodings is NULL',0 ; DATA XREF: sub_68883624:loc_68883720o
aOscar_1	db 'oscar',0            ; DATA XREF: sub_68883624+104o
					; sub_68883624+13Co ...
aErrorAllocatin	db 'Error allocating memory for encoding',0
					; DATA XREF: sub_68883624:loc_68883758o
aUtf8		db 'utf-8',0            ; DATA XREF: sub_68883624:loc_6888367Ao
					; oscar_encoding_to_utf8:loc_68883ABAo
; char aUtf8_0[]
aUtf8_0		db 'UTF-8',0            ; DATA XREF: sub_68883624+AAo
					; sub_68883624+178o ...
a?		db '?',0                ; DATA XREF: sub_68883624+16Co
		align 10h
aConversionFrom	db 'Conversion from %s failed: %s.',0Ah,0 ; DATA XREF: sub_688837C4+72o
aStringIsNotVal	db 'String is not valid UTF-8.',0Ah,0
					; DATA XREF: sub_688837C4:loc_688838A0o
aWindows1252	db 'Windows-1252',0     ; DATA XREF: oscar_encoding_to_utf8:loc_68883A38o
aUtf16be	db 'UTF-16BE',0         ; DATA XREF: oscar_encoding_to_utf8+1F0o
					; oscar_decode_im+F1o ...
; char Str[]
Str		db 'iso-8859-1',0       ; DATA XREF: oscar_encoding_to_utf8:loc_688839E4o
					; oscar_encoding_to_utf8+138o
aTextAolrtfChar	db 'text/aolrtf; charset=',0 ; DATA XREF: oscar_encoding_to_utf8+26o
aTextXAolrtfCha	db 'text/x-aolrtf; charset=',0
					; DATA XREF: oscar_encoding_to_utf8:loc_688839ACo
aTextPlainChars	db 'text/plain; charset=',0 ; DATA XREF: oscar_encoding_to_utf8+104o
aEmptyEncodingA	db 'Empty encoding, assuming UTF-8',0Ah,0
					; DATA XREF: oscar_encoding_to_utf8:loc_68883943o
aIso88591Window	db 'ISO-8859-1-Windows-3.1-Latin-1',0
					; DATA XREF: oscar_encoding_to_utf8:loc_68883A24o
aUsAscii	db 'us-ascii',0         ; DATA XREF: oscar_encoding_to_utf8:loc_68883A88o
					; oscar_encode_im+4Ao
aUnicode20	db 'unicode-2-0',0      ; DATA XREF: oscar_encoding_to_utf8+1DCo
					; oscar_encode_im:loc_68883F24o
aThereWasAnErro	db '(There was an error receiving this message.  The buddy you are sp'
					; DATA XREF: oscar_encoding_to_utf8+19Co
		db 'eaking with is probably using a different encoding than expected.'
		db '  If you know what encoding he is using, you can specify it in th'
		db 'e advanced account options for your AIM/ICQ account.)',0
aPidgin_1	db 'pidgin',0           ; DATA XREF: oscar_encoding_to_utf8+1A4o
					; oscar_decode_im+24Ao
aEncoding	db 'encoding',0         ; DATA XREF: oscar_utf8_try_convert+70o
					; oscar_decode_im+6Bo ...
aIso88591_0	db 'ISO-8859-1',0       ; DATA XREF: oscar_decode_im+115o
					; oscar_decode_im+173o	...
aAscii		db 'ASCII',0            ; DATA XREF: oscar_decode_im+13Bo
					; oscar_encode_im:loc_68883F38o
word_688AED6E	dw 0			; DATA XREF: oscar_decode_im:loc_68883C4Ao
aParsingImChars	db 'Parsing IM, charset=0x%04hx, datalen=%u, choice1=%s, choice2=%s, '
					; DATA XREF: oscar_decode_im+9Do
					; oscar_decode_im+18Fo
		db 'choice3=%s',0Ah,0
		align 10h
aThereWasAnEr_0	db '(There was an error receiving this message.  Either you and %s ha'
					; DATA XREF: oscar_decode_im+242o
		db 've different encodings selected, or %s has a buggy client.)',0
aSS_0		db '%s %s',0            ; DATA XREF: oscar_decode_im+274o
		align 4
aSuppressed	db '*suppressed',0      ; DATA XREF: sub_68883F44+135o
; char Source[]
Source		db 'admin',0            ; DATA XREF: admin_modfirst+38o
		align 4
; char aAlert[]
aAlert		db 'alert',0            ; DATA XREF: email_modfirst+38o
		align 10h
aPrplIcqDistid	db 'prpl-icq-distid',0  ; DATA XREF: aim_send_login:loc_68885784o
aPrplAimDistid	db 'prpl-aim-distid',0  ; DATA XREF: aim_send_login+252o
aMd5_1		db 'md5',0              ; DATA XREF: aim_send_login:loc_688854E0o
aAolInstantMess	db 'AOL Instant Messenger (SM)',0 ; DATA XREF: aim_send_login+208o
; char aAuth[]
aAuth		db 'auth',0             ; DATA XREF: auth_modfirst+2Co
; char aBart[]
aBart		db 'bart',0             ; DATA XREF: bart_modfirst+38o
		align 4
; char aBos[]
aBos		db 'bos',0              ; DATA XREF: bos_modfirst+38o
; char aBuddy[]
aBuddy		db 'buddy',0            ; DATA XREF: buddylist_modfirst+38o
		align 4
aFaimChat_roomu	db 'faim: chat_roomupdateinfo: detail level %d not supported',0Ah,0
					; DATA XREF: sub_68886554+157o
aOscar_2	db 'oscar',0            ; DATA XREF: sub_68886554+11Ao
					; sub_68886554+15Fo
aFaimChat_incom	db 'faim: chat_incoming: unknown channel! (0x%04x)',0Ah,0
					; DATA XREF: sub_68886554+112o
; char aChat[]
aChat		db 'chat',0             ; DATA XREF: chat_modfirst+38o
		align 10h
aChatnavError_0	db 'chatnav error: received response to unknown request (%08x)',0Ah,0
					; DATA XREF: sub_68886D3C+AC1o
aOscar_3	db 'oscar',0            ; DATA XREF: sub_68886D3C+FFo
					; sub_68886D3C+194o ...
		align 4
aChatnavErrorRe	db 'chatnav error: received response that maps to corrupt request (fa'
					; DATA XREF: sub_68886D3C+2A0o
		db 'm=%04x)',0Ah,0
		align 10h
aCouldNotJoinRo	db 'Could not join room, error=0x%04hx, chatnav_error=0x%04hx',0Ah,0
					; DATA XREF: sub_68886D3C+215o
aInvalidChatRoo	db 'Invalid chat room name',0 ; DATA XREF: sub_68886D3C:loc_68887818o
aPidgin_2	db 'pidgin',0           ; DATA XREF: sub_68886D3C+23Bo
					; sub_68886D3C+251o ...
aUnknownError	db 'Unknown error',0    ; DATA XREF: sub_68886D3C+233o
aCouldNotJoinCh	db 'Could not join chat room',0 ; DATA XREF: sub_68886D3C:loc_68886F85o
aFaimChatnav__0	db 'faim: chatnav_parse_info: received response to unknown request! ('
					; DATA XREF: sub_68886D3C+7D5o
		db '%08x)',0Ah,0
aFaimChatnav_pa	db 'faim: chatnav_parse_info: received response that maps to corrupt '
					; DATA XREF: sub_68886D3C+18Co
		db 'request! (fam=%04x)',0Ah,0
aFaimClassPermi	db 'faim: class permissions %x',0Ah,0 ; DATA XREF: sub_68886D3C+537o
		align 4
aChatnav_pars_1	db 'chatnav_parse_info: response to exchange info',0Ah,0
					; DATA XREF: sub_68886D3C:loc_688873F6o
		align 4
aChatnav_pars_2	db 'chatnav_parse_info: response to room info',0Ah,0
					; DATA XREF: sub_68886D3C:loc_688874D4o
		align 4
aChatnav_pars_3	db 'chatnav_parse_info: response to more room info',0Ah,0
					; DATA XREF: sub_68886D3C:loc_688874EFo
aChatnav_pars_0	db 'chatnav_parse_info: response to occupant info',0Ah,0
					; DATA XREF: sub_68886D3C:loc_68886EFEo
		align 4
aChatnav_pars_4	db 'chatnav_parse_info: search results',0Ah,0
					; DATA XREF: sub_68886D3C:loc_6888752Co
aNoBigblockInTo	db 'no bigblock in top tlv in create room response',0Ah,0
					; DATA XREF: sub_68886D3C:loc_68887833o
aUnknownDetaill	db 'unknown detaillevel in create room response (0x%02x)',0Ah,0
					; DATA XREF: sub_68886D3C+769o
		align 4
aChatnav_parse_	db 'chatnav_parse_info: unknown request subtype (%04x)',0Ah,0
					; DATA XREF: sub_68886D3C+F7o
; char aChatnav[]
aChatnav	db 'chatnav',0          ; DATA XREF: chatnav_modfirst+38o
aCreate		db 'create',0           ; DATA XREF: aim_chatnav_createroom+93o
aUsAscii_0	db 'us-ascii',0         ; DATA XREF: aim_chatnav_createroom+DFo
aEn		db 'en',0               ; DATA XREF: aim_chatnav_createroom+F7o
		align 10h
aNull		db '(null)',0           ; DATA XREF: sub_68887C80:loc_68887D04o
aUnknown	db 'unknown',0          ; DATA XREF: sub_68887C80+30o
		align 10h
aSGid0x04hxBid0	db '%s gid=0x%04hx, bid=0x%04hx, list_type=0x%04hx [%s], name=%s.',0Ah,0
					; DATA XREF: sub_68887C80+55o
byte_688AF2EF	db 0			; DATA XREF: sub_688887DC+14o
					; sub_68888E10:loc_68888FDEo
aDeletingItem	db 'Deleting item ',0   ; DATA XREF: sub_688887DC+56Fo
aAddingItem	db 'Adding item ',0     ; DATA XREF: sub_688887DC+517o
aModifyingItem	db 'Modifying item ',0  ; DATA XREF: sub_688887DC+4A7o
aS_3		db '%s',0               ; DATA XREF: sub_688887DC+272o
aOscar_4	db 'oscar',0            ; DATA XREF: sub_688887DC+27Ao
					; sub_688887DC+2E4o ...
		align 4
aDumpingItemLis	db 'Dumping item list of account %s:',0Ah ; DATA XREF: sub_688887DC+2DCo
		db '%s',0
asc_688AF34C	db 9,0			; DATA XREF: sub_688887DC+2B2o
					; sub_68888E10+27Co
		align 10h
aReadingItemsFr	db 'Reading items from tlvlist for account %s:',0Ah
					; DATA XREF: sub_68888E10+2F9o
		db '%s',0
		align 10h
aDroppingAuthGr	db 'Dropping auth grant SNAC because username was empty',0Ah,0
					; DATA XREF: sub_68888E10:loc_68889DE7o
		align 4
aDroppingAuth_1	db 'Dropping auth grant SNAC because the username was not valid UTF-8'
					; DATA XREF: sub_68888E10:loc_68889E91o
		db 0Ah,0
		align 4
aGotNonUtf8Mess	db 'Got non-UTF8 message in auth grant from %s',0Ah,0
					; DATA XREF: sub_68888E10+DD7o
aDroppingAuthRe	db 'Dropping auth request SNAC because username was empty',0Ah,0
					; DATA XREF: sub_68888E10:loc_68889E08o
		align 10h
aDroppingAuth_2	db 'Dropping auth request SNAC because the username was not valid UTF'
					; DATA XREF: sub_68888E10:loc_68889EB2o
		db '-8',0Ah,0
		align 4
aGotNonUtf8Me_0	db 'Got non-UTF8 message in auth request from %s',0Ah,0
					; DATA XREF: sub_68888E10+E8Bo
		align 4
aDroppingAuth_0	db 'Dropping auth reply SNAC because username was empty',0Ah,0
					; DATA XREF: sub_68888E10:loc_68889E57o
		align 10h
aDroppingAuth_3	db 'Dropping auth reply SNAC because the username was not valid UTF-8'
					; DATA XREF: sub_68888E10:loc_68889F3Bo
		db 0Ah,0
		align 4
aGotNonUtf8Me_1	db 'Got non-UTF8 message in auth reply from %s',0Ah,0
					; DATA XREF: sub_68888E10+10F8o
aDroppingYouWer	db 'Dropping ',27h,'you were added',27h,' SNAC because username was empty',0Ah
					; DATA XREF: sub_68888E10:loc_68889B84o
		db 0
		align 4
aDroppingYouW_0	db 'Dropping ',27h,'you were added',27h,' SNAC because the username was not'
					; DATA XREF: sub_68888E10:loc_68889E36o
		db ' valid UTF-8',0Ah,0
a1		db '1',0                ; DATA XREF: aim_ssi_seticon+51o
					; aim_ssi_seticon+172o
aOrphans	db 'orphans',0          ; DATA XREF: aim_ssi_cleanlist+146o
; char aFeedbag[]
aFeedbag	db 'feedbag',0          ; DATA XREF: ssi_modfirst+38o
aBuddy_0	db 'Buddy',0            ; DATA XREF: .rdata:off_688AF6E4o
aGroup		db 'Group',0            ; DATA XREF: .rdata:688AF6ECo
aPermitVisible	db 'Permit/Visible',0   ; DATA XREF: .rdata:688AF6F4o
aDenyInvisible	db 'Deny/Invisible',0   ; DATA XREF: .rdata:688AF6FCo
aPdinfo		db 'PDInfo',0           ; DATA XREF: .rdata:688AF704o
aPresenceprefs	db 'PresencePrefs',0    ; DATA XREF: .rdata:688AF70Co
aNonBuddyInfo	db 'Non-Buddy Info',0   ; DATA XREF: .rdata:688AF714o
aClientprefs	db 'ClientPrefs',0      ; DATA XREF: .rdata:688AF71Co
aIcqdenyIgnore	db 'ICQDeny/Ignore',0   ; DATA XREF: .rdata:688AF724o
aBuddyIcon_0	db 'Buddy Icon',0       ; DATA XREF: .rdata:688AF72Co
aRecentBuddies	db 'Recent Buddies',0   ; DATA XREF: .rdata:688AF734o
aNonBuddy	db 'Non-Buddy',0        ; DATA XREF: .rdata:688AF73Co
aVanityInfo	db 'Vanity Info',0      ; DATA XREF: .rdata:688AF744o
aIcqMdir	db 'ICQ-MDir',0         ; DATA XREF: .rdata:688AF74Co
aFacebook	db 'Facebook',0         ; DATA XREF: .rdata:688AF754o
		align 20h
word_688AF6E0	dw 0			; DATA XREF: sub_68887C80:loc_68887CA0r
		align 4
off_688AF6E4	dd offset aBuddy_0	; DATA XREF: sub_68887C80:loc_68887CF8r
					; "Buddy"
		dd 1
		dd offset aGroup	; "Group"
		dd 2
		dd offset aPermitVisible ; "Permit/Visible"
		dd 3
		dd offset aDenyInvisible ; "Deny/Invisible"
		dd 4
		dd offset aPdinfo	; "PDInfo"
		dd 5
		dd offset aPresenceprefs ; "PresencePrefs"
		dd 6
		dd offset aNonBuddyInfo	; "Non-Buddy Info"
		dd 9
		dd offset aClientprefs	; "ClientPrefs"
		dd 0Eh
		dd offset aIcqdenyIgnore ; "ICQDeny/Ignore"
		dd 14h
		dd offset aBuddyIcon_0	; "Buddy Icon"
		dd 15h
		dd offset aRecentBuddies ; "Recent Buddies"
		dd 19h
		dd offset aNonBuddy	; "Non-Buddy"
		dd 1Dh
		dd offset aVanityInfo	; "Vanity Info"
		dd 20h
		dd offset aIcqMdir	; "ICQ-MDir"
		dd 29h
		dd offset aFacebook	; "Facebook"
		align 10h
aIcbmErrorRec_1	db 'icbm error: received response from unknown request!',0Ah,0
					; DATA XREF: sub_6888B528:loc_6888C672o
aOscar_5	db 'oscar',0            ; DATA XREF: sub_6888B528+1AAo
					; sub_6888B528+2F0o ...
		align 4
aIcbmErrorRec_0	db 'icbm error: received response from invalid request! %d',0Ah,0
					; DATA XREF: sub_6888B528+664o
aIcbmErrorRecei	db 'icbm error: received response from request without a buddy name!',0Ah
					; DATA XREF: sub_6888B528:loc_6888B6CAo
		db 0
		align 4
aMessageErrorWi	db 'Message error with bn %s and reason %hu and errcode %hu',0Ah,0
					; DATA XREF: sub_6888B528+5BDo
					; sub_6888B528+89Co
aPidgin_3	db 'pidgin',0           ; DATA XREF: sub_6888B528+5F7o
					; sub_6888B528+60Do ...
aUnableToSendMe	db 'Unable to send message: %s (%s)',0 ; DATA XREF: sub_6888B528+605o
aUnableToSend_0	db 'Unable to send message: %s',0 ; DATA XREF: sub_6888B528:loc_6888BDF1o
		align 4
aUnableToSend_2	db 'Unable to send message to %s: %s (%s)',0 ; DATA XREF: sub_6888B528+122Do
		align 4
aUnableToSend_1	db 'Unable to send message to %s: %s',0 ; DATA XREF: sub_6888B528+10D9o
		align 10h
aReceivedAnImCo	db 'Received an IM containing an invalid message part from %s.  They '
					; DATA XREF: sub_6888B528+B51o
		db 'are probably trying to do something malicious.',0Ah,0
		align 4
aCookiesDonTMat	db 'Cookies don',27h,'t match in rendezvous ICBM, bailing out.',0Ah,0
					; DATA XREF: sub_6888B528:loc_6888C70Fo
; char Format[]
Format		db '%hhu.%hhu.%hhu.%hhu',0 ; DATA XREF: sub_6888B528+13C3o
					; sub_6888B528+1409o ...
		align 10h
aGotABuddyListF	db 'got a buddy list from %s: group %s, buddy %s',0Ah,0
					; DATA XREF: sub_6888B528+1362o
		align 10h
aExpectedToFind	db 'Expected to find a header with length 0x001b; ignoring message',0
					; DATA XREF: sub_6888B528+1526o
		align 10h
aExpectedToFi_0	db 'Expected to find a header with length 0x000e; ignoring message',0
					; DATA XREF: sub_6888B528+1698o
		align 10h
aIcbmIcbmReceiv	db 'icbm: ICBM received on an unsupported channel.  Ignoring.  (chan '
					; DATA XREF: sub_6888B528+2E8o
		db '= %04x)',0Ah,0
aXStatusNum1HuN	db 'X-Status: num1 %hu, num2 %hu',0Ah,0 ; DATA XREF: sub_6888B528+942o
aXStatusReceive	db 'X-Status: Received XML reply',0Ah,0 ; DATA XREF: sub_6888B528+1577o
; char SubStr[]
SubStr		db '&lt;title&gt;',0    ; DATA XREF: sub_6888B528+15A1o
; char aLtTitleGt_0[]
aLtTitleGt_0	db '&lt;/title&gt;',0   ; DATA XREF: sub_6888B528+15B8o
; char aLtDescGt[]
aLtDescGt	db '&lt;desc&gt;',0     ; DATA XREF: sub_6888B528:loc_6888CB06o
; char aLtDescGt_0[]
aLtDescGt_0	db '&lt;/desc&gt;',0    ; DATA XREF: sub_6888B528+15F5o
asc_688AFB0E	db ' - ',0              ; DATA XREF: sub_6888B528+1615o
aXStatusReplyS	db 'X-Status reply: %s',0Ah,0 ; DATA XREF: sub_6888B528+16B5o
aMood		db 'mood',0             ; DATA XREF: sub_6888B528+16EEo
					; sub_6888B528+1706o ...
aMoodtext	db 'moodtext',0         ; DATA XREF: sub_6888B528+1722o
aXStatusCanTGet	db 'X-Status: Can',27h,'t get XML reply string',0Ah,0
					; DATA XREF: sub_6888B528:loc_6888CC77o
		align 4
aXStatus0x00040	db 'X-Status: 0x0004, 0x000b not an xstatus reply',0Ah,0
					; DATA XREF: sub_6888B528:loc_6888BE90o
aSentMessageToS	db 'Sent message to %s.',0Ah,0 ; DATA XREF: sub_6888B528+4B3o
aAvt1picture_id	db 'AVT1picture.id',0   ; DATA XREF: aim_im_sendch2_icon+231o
aBnNull		db 'bn != NULL',0       ; DATA XREF: aim_im_sendch2_sendfile_requestdirect:loc_6888E2B4o
aIpNull		db 'ip != NULL',0       ; DATA XREF: aim_im_sendch2_sendfile_requestdirect:loc_6888E2D4o
aSendingMessage	db 'Sending message ack to %s',0Ah,0
					; DATA XREF: aim_im_send_icq_confirmation+2Do
aConn		db 'conn',0             ; DATA XREF: aim_im_send_icq_confirmation:loc_6888EA6Co
aFamily_icbm_c	db 'family_icbm.c',0    ; DATA XREF: aim_im_send_icq_confirmation+23Co
		align 4
aNQueryLtQGtLtP	db '<N><QUERY>&lt;Q&gt;&lt;PluginID&gt;srvMng&lt;/PluginID&gt;&lt;/Q&'
					; DATA XREF: icq_im_xstatus_request+7Do
		db 'gt;</QUERY><NOTIFY>&lt;srv&gt;&lt;id&gt;cAwaySrv&lt;/id&gt;&lt;re'
		db 'q&gt;&lt;id&gt;AwayStat&lt;/id&gt;&lt;trans&gt;2&lt;/trans&gt;&lt'
		db ';senderId&gt;%s&lt;/senderId&gt;&lt;/req&gt;&lt;/srv&gt;</NOTIFY>'
		db '</N>',0Dh,0Ah,0
aXStatusRequest	db 'X-Status Request',0Ah,0 ; DATA XREF: icq_im_xstatus_request+27Ao
aMessage	db 'message',0          ; DATA XREF: icq_relay_xstatus+92o
		align 4
aNrResLtRetEven	db '<NR><RES>&lt;ret event=',27h,'OnRemoteNotification',27h,'&gt;&lt;srv&gt'
					; DATA XREF: icq_relay_xstatus+CEo
		db ';&lt;id&gt;cAwaySrv&lt;/id&gt;&lt;val srv_id=',27h,'cAwaySrv',27h,'&gt;'
		db '&lt;Root&gt;&lt;CASXtraSetAwayMessage&gt;&lt;/CASXtraSetAwayMessa'
		db 'ge&gt;&l t;uin&gt;%s&lt;/uin&gt;&lt;index&gt;1&lt;/index&gt;&lt;t'
		db 'itle&gt;%s&lt;/title&gt;&lt;desc&gt;%s&lt;/desc&gt;&lt;/Root&gt;&'
		db 'lt;/val&gt;&lt;/srv&gt;&lt;srv&gt;&lt;id&gt;cRandomizerSrv&lt;/id'
		db '&gt;&lt;val srv_id=',27h,'cRandomizerSrv',27h,'&gt;undefined&lt;/val&gt'
		db ';&lt;/srv&gt;&lt;/ret&gt;</RES></NR>',0Dh,0Ah,0
aXStatusAutorep	db 'X-Status AutoReply: %s, %s',0Ah,0 ; DATA XREF: icq_relay_xstatus+100o
; char aMessaging[]
aMessaging	db 'messaging',0        ; DATA XREF: msg_modfirst+38o
		align 10h
aAim_im_sendch2	db 'aim_im_sendch2_sendfile_requestdirect',0
					; DATA XREF: aim_im_sendch2_sendfile_requestdirect+35Co
					; aim_im_sendch2_sendfile_requestdirect+37Co
aAim_im_send_ic	db 'aim_im_send_icq_confirmation',0
					; DATA XREF: aim_im_send_icq_confirmation+22Co
byte_688AFF63	db 9			; DATA XREF: icq_im_xstatus_request+16Co
		dd 4C491346h, 82D1117Fh, 53454422h, 54h, 3 dup(0)
asc_688AFF80:				; DATA XREF: icq_im_xstatus_request+1C9o
		dw 1Bh,	0Ah, 0
		align 4
		dd 3 dup(0)
		dd 30000h, 0F9000000h, 0F9000ED1h, 0D1h, 2 dup(0)
		dd 1A00h, 1000100h, 4F0000h, 0EFB3603Bh, 456C2AD8h, 5A9CE0A4h
		dd 65E8675Eh, 2A0008h, 63530000h, 74706972h, 756C5020h
		dd 6E692D67h, 6552203Ah, 65746F6Dh, 746F4E20h, 63696669h
		dd 6F697461h, 7241206Eh, 65766972h, 10000h, 2 dup(0)
		dd 14000000h, 10000001h, 1, 4 dup(0)
asc_688B0020:				; DATA XREF: icq_relay_xstatus+1A2o
		dw 1Bh,	9, 0
		align 4
		dd 3 dup(0)
		dd 10000h, 0F9000000h, 0F9000ED1h, 0D1h, 2 dup(0)
		dd 1A00h, 1000000h, 4F0000h, 0EFB3603Bh, 456C2AD8h, 5A9CE0A4h
		dd 65E8675Eh, 2A0008h, 63530000h, 74706972h, 756C5020h
		dd 6E692D67h, 6552203Ah, 65746F6Dh, 746F4E20h, 63696669h
		dd 6F697461h, 7241206Eh, 65766972h, 10000h, 2 dup(0)
		dd 0F3000000h, 0EF000001h
		db 1, 2	dup(0)
aInvalidError	db 'Invalid error',0    ; DATA XREF: .rdata:off_688B0280o
aNotLoggedIn	db 'Not logged in',0    ; DATA XREF: .rdata:688B0284o
		align 4
aCannotReceiveI	db 'Cannot receive IM due to parental controls',0
					; DATA XREF: .rdata:688B0288o
		align 4
aCannotSendSmsW	db 'Cannot send SMS without accepting terms',0 ; DATA XREF: .rdata:688B028Co
aCannotSendSms	db 'Cannot send SMS',0  ; DATA XREF: .rdata:688B0290o
aCannotSendSmsT	db 'Cannot send SMS to this country',0 ; DATA XREF: .rdata:688B0294o
aUnknownError_0	db 'Unknown error',0    ; DATA XREF: .rdata:688B0298o
					; .rdata:688B029Co
		align 10h
aCannotSendSm_0	db 'Cannot send SMS to unknown country',0 ; DATA XREF: .rdata:688B02A0o
		align 4
aBotAccountsCan	db 'Bot accounts cannot initiate IMs',0 ; DATA XREF: .rdata:688B02A4o
		align 4
aBotAccountCann	db 'Bot account cannot IM this user',0 ; DATA XREF: .rdata:688B02A8o
aBotAccountReac	db 'Bot account reached IM limit',0 ; DATA XREF: .rdata:688B02ACo
		align 4
aBotAccountRe_0	db 'Bot account reached daily IM limit',0 ; DATA XREF: .rdata:688B02B0o
		align 4
aBotAccountRe_1	db 'Bot account reached monthly IM limit',0 ; DATA XREF: .rdata:688B02B4o
		align 4
aUnableToReceiv	db 'Unable to receive offline messages',0 ; DATA XREF: .rdata:688B02B8o
aOfflineMessage	db 'Offline message store full',0 ; DATA XREF: .rdata:688B02BCo
		align 10h
off_688B0280	dd offset aInvalidError	; DATA XREF: sub_6888B528+5ECr
					; sub_6888B528+1214r
					; "Invalid error"
		dd offset aNotLoggedIn	; "Not logged in"
		dd offset aCannotReceiveI ; "Cannot receive IM due to parental contr"...
		dd offset aCannotSendSmsW ; "Cannot send SMS without accepting terms"
		dd offset aCannotSendSms ; "Cannot send	SMS"
		dd offset aCannotSendSmsT ; "Cannot send SMS to	this country"
		dd offset aUnknownError_0 ; "Unknown error"
		dd offset aUnknownError_0 ; "Unknown error"
		dd offset aCannotSendSm_0 ; "Cannot send SMS to	unknown	country"
		dd offset aBotAccountsCan ; "Bot accounts cannot initiate IMs"
		dd offset aBotAccountCann ; "Bot account cannot	IM this	user"
		dd offset aBotAccountReac ; "Bot account reached IM limit"
		dd offset aBotAccountRe_0 ; "Bot account reached daily IM limit"
		dd offset aBotAccountRe_1 ; "Bot account reached monthly IM limit"
		dd offset aUnableToReceiv ; "Unable to receive offline messages"
		dd offset aOfflineMessage ; "Offline message store full"
dword_688B02C0	dd 1			; DATA XREF: sub_6888B528+7DDr
		dd 11h,	5, 13h,	20h, 3 dup(0)
aIcqTheOriginal	db 'icq: the original snac for the error packet was not found',0
					; DATA XREF: sub_6888F450:loc_6888F59Co
aOscar_6	db 'oscar',0            ; DATA XREF: sub_6888F450+100o
					; sub_6888F450:loc_6888F5A4o ...
aIcqTheRequestI	db 'icq: the request info for the error packet was not found',0
					; DATA XREF: sub_6888F450:loc_6888F8D0o
aU		db '%u',0               ; DATA XREF: sub_6888F450+1E3o
					; sub_6888F450+10DAo ...
aIcqGotAnErrorP	db 'icq: got an error packet with unknown request type %u',0
					; DATA XREF: sub_6888F450+210o
aCorruptIcqResp	db 'corrupt ICQ response',0Ah,0 ; DATA XREF: sub_6888F450+17Co
aIcqResponseDBy	db 'icq response: %d bytes, %u, 0x%04x, 0x%04x',0Ah,0
					; DATA XREF: sub_6888F450+F8o
aIcq0x0fb4FlapC	db 'icq/0x0fb4: flap connection was not found.',0Ah,0
					; DATA XREF: sub_6888F450:loc_688905C6o
aIcq0x0fb4UinOr	db 'icq/0x0fb4: uin or status_note_title was not found',0Ah,0
					; DATA XREF: sub_6888F450:loc_688905EFo
aMessage_0	db 'message',0          ; DATA XREF: sub_6888F450+5A9o
aServernick	db 'servernick',0       ; DATA XREF: sub_6888F450+115Ao
aRequestingIcqA	db 'Requesting ICQ alias for %s',0Ah,0 ; DATA XREF: aim_icq_getalias+70o
aADBYTZ		db '%a, %d %b %Y %T %Z',0 ; DATA XREF: aim_icq_sendsms+AAo
		align 4
; char aIcq_sms_messag[]
aIcq_sms_messag	db '<icq_sms_message><destination>%s</destination><text>%s</text><cod'
					; DATA XREF: aim_icq_sendsms+14Ao
		db 'epage>1252</codepage><senders_UIN>%s</senders_UIN><senders_name>%'
		db 's</senders_name><delivery_receipt>Yes</delivery_receipt><time>%s<'
		db '/time></icq_sms_message>',0
; char aIcq[]
aIcq		db 'icq',0              ; DATA XREF: icq_modfirst+38o
		align 10h
; char aThinking[]
aThinking	db 'thinking',0         ; DATA XREF: sub_68891114+58o
					; icq_get_custom_icon_description+29o ...
aCustomStatusIc	db 'Custom status icon: %s',0Ah,0 ; DATA XREF: sub_68891114+A3o
aOscar_7	db 'oscar',0            ; DATA XREF: sub_68891114+ABo
					; aim_locate_getcaps+1B3o ...
		align 4
aUnknownCapabil	db 'unknown capability: {%02x%02x%02x%02x-%02x%02x-%02x%02x-%02x%02x-'
					; DATA XREF: aim_locate_getcaps+1ABo
		db '%02x%02x%02x%02x%02x%02x}',0Ah,0
aUnknownShortCa	db 'unknown short capability: {%02x%02x}',0Ah,0
					; DATA XREF: aim_locate_getcaps_short+12Bo
; char aIcqmood0[]
aIcqmood0	db 'icqmood0',0         ; DATA XREF: aim_info_extract+410o
					; .rdata:off_688B0C60o
aMood_0		db 'mood',0             ; DATA XREF: aim_info_extract+321o
					; aim_info_extract+329o ...
byte_688B0618	db 0			; DATA XREF: aim_info_extract+663o
					; aim_info_extract+692o
aUnknownIcqmood	db 'Unknown icqmood: %s',0Ah,0 ; DATA XREF: aim_info_extract+60Eo
		align 10h
aLocateErrorR_1	db 'locate error: received response from unknown request!',0Ah,0
					; DATA XREF: sub_688921A8:loc_688925B3o
		align 4
aLocateErrorRec	db 'locate error: received response from invalid request! %d',0Ah,0
					; DATA XREF: sub_688921A8+38Co
		align 4
aLocateErrorR_0	db 'locate error: received response from request without a buddy name'
					; DATA XREF: sub_688921A8:loc_68892590o
		db '!',0Ah,0
; char aLocate[]
aLocate		db 'locate',0           ; DATA XREF: locate_modfirst+38o
		align 20h
dword_688B0700	dd 80000h, 0		; DATA XREF: sub_688918E0+26o
byte_688B0708	db 9, 46h		; DATA XREF: aim_locate_getcaps+B9o
					; sub_688918E0+63o
word_688B070A	dw 0			; DATA XREF: aim_locate_getcaps_short+ADo
		dd 0D1117F4Ch, 45442282h, 5453h
dword_688B0718	dd 200000h, 0		; DATA XREF: aim_locate_getcaps+7Eo
					; aim_locate_getcaps_short+76o
		dd 1004609h, 0D1117F4Ch, 45442282h, 5453h, 80000000h, 0
		dd 2004609h, 0D1117F4Ch, 45442282h, 5453h, 800000h, 0
		dd 14609h, 0D1117F4Ch, 45442282h, 5453h, 2000000h, 0
		dd 1014609h, 0D1117F4Ch, 45442282h, 5453h, 4000000h, 0
		dd 2014609h, 0D1117F4Ch, 45442282h, 5453h, 80000000h, 0
		dd 3014609h, 0D1117F4Ch, 45442282h, 5453h, 80000000h, 0
		dd 4014609h, 0D1117F4Ch, 45442282h, 5453h, 1000000h, 0
		dd 5014609h, 0D1117F4Ch, 45442282h, 545345h, 80000000h
		dd 0
		dd 0A014609h, 0D1117F4Ch, 45442282h, 5453h, 80000000h
		dd 0
		dd 0B014609h, 0D1117F4Ch, 45442282h, 5453h, 80000000h
		dd 0
		dd 0FF014609h, 0D1117F4Ch, 45442282h, 5453h, 100000h, 0
		dd 23134609h, 0D1117F4Ch, 45442282h, 5453h, 2, 0
		dd 41134609h, 0D1117F4Ch, 45442282h, 5453h, 20h, 0
		dd 43134609h, 0D1117F4Ch, 45442282h, 5453h, 400h, 0
		dd 44134609h, 0D1117F4Ch, 45442282h, 5453h, 4, 0
		dd 45134609h, 0D1117F4Ch, 45442282h, 5453h, 1, 0
		dd 46134609h, 0D1117F4Ch, 45442282h, 5453h, 80h, 0
		dd 47134609h, 0D1117F4Ch, 45442282h, 5453h, 10h, 0
		dd 48134609h, 0D1117F4Ch, 45442282h, 5453h, 4000h, 0
		dd 49134609h, 0D1117F4Ch, 45442282h, 5453h, 40h, 0
		dd 4A134609h, 0D1117F4Ch, 45442282h, 5453h, 200h, 0
		dd 4A134609h, 0D1117F4Ch, 45448222h, 5453h, 20000000h
		dd 0
		dd 4609h, 0D1117F4Ch, 45442282h, 5453h,	40000000h, 0
		dd 6C3C091Ah, 0C54EFDD7h, 47A6519Dh, 0A0F5344Eh, 100h
		dd 0
		dd 4B134609h, 0D1117F4Ch, 45442282h, 5453h, 40000h, 0
		dd 4D134609h, 0D1117F4Ch, 45442282h, 5453h, 20000h, 0
		dd 4E134609h, 0D1117F4Ch, 45442282h, 5453h, 80000000h
		dd 0
		dd 3F04609h, 0D1117F4Ch, 45442282h, 5453h, 8000000h, 0
		dd 4F04609h, 0D1117F4Ch, 45442282h, 5453h, 80000000h, 0
		dd 5F04609h, 0D1117F4Ch, 45442282h, 5453h, 8000h, 0
		dd 75647A2Eh, 0C84DDFFAh, 35EA6F88h, 0DFB6FD95h, 10000000h
		dd 0
		dd 9C83F56h, 0BD416F0Bh, 2642799Fh, 0F3A2DF09h,	8, 0
		dd 20248F74h, 0D1118762h, 45442282h, 5453h, 80000000h
		dd 0
		dd 5127B197h, 34433C24h, 0ABD622ADh, 9143FF7h, 1000h, 0
		dd 5127B197h, 34433C24h, 0ABD622ADh, 92143FF7h,	800h, 0
		dd 0B5324AAAh, 0C64884F8h, 508CD7A3h, 5BFD1997h, 10000h
		dd 0
		dd 0F4C7E7F2h, 0FB4DADFEh, 793635B2h, 0DF8Bh, 2000h, 6 dup(0)
		dd 1, 7BCA3801h, 15499A76h, 0FC13F288h,	0A89E9700h, 0
		dd 2, 4	dup(0)
aShopping	db 'shopping',0         ; DATA XREF: .data:688AD018o
					; .rdata:off_688B0C64o	...
aIcqmood1	db 'icqmood1',0         ; DATA XREF: .rdata:688B0C68o
aBathing	db 'bathing',0          ; DATA XREF: .data:688AD084o
					; .rdata:688B0C6Co ...
aIcqmood2	db 'icqmood2',0         ; DATA XREF: .rdata:688B0C70o
aSleepy		db 'sleepy',0           ; DATA XREF: .data:688AD0CCo
					; .rdata:688B0C74o ...
aIcqmood3	db 'icqmood3',0         ; DATA XREF: .rdata:688B0C78o
aParty		db 'party',0            ; DATA XREF: .data:688AD114o
					; .rdata:688B0C7Co ...
aIcqmood4	db 'icqmood4',0         ; DATA XREF: .rdata:688B0C80o
aBeer		db 'beer',0             ; DATA XREF: .data:688AD15Co
					; .rdata:688B0C84o ...
aIcqmood5	db 'icqmood5',0         ; DATA XREF: .rdata:688B0C88o
aIcqmood6	db 'icqmood6',0         ; DATA XREF: .rdata:688B0C90o
aPlate		db 'plate',0            ; DATA XREF: .data:688AD048o
					; .rdata:688B0C94o ...
aIcqmood7	db 'icqmood7',0         ; DATA XREF: .rdata:688B0C98o
aTv		db 'tv',0               ; DATA XREF: .data:688AD090o
					; .rdata:688B0C9Co ...
aIcqmood8	db 'icqmood8',0         ; DATA XREF: .rdata:688B0CA0o
aMeeting	db 'meeting',0          ; DATA XREF: .data:688AD0D8o
					; .rdata:688B0CA4o ...
aIcqmood9	db 'icqmood9',0         ; DATA XREF: .rdata:688B0CA8o
aCoffee		db 'coffee',0           ; DATA XREF: .data:688AD120o
					; .rdata:688B0CACo ...
aIcqmood10	db 'icqmood10',0        ; DATA XREF: .rdata:688B0CB0o
aMusic		db 'music',0            ; DATA XREF: .data:688AD168o
					; .rdata:688B0CB4o ...
aIcqmood11	db 'icqmood11',0        ; DATA XREF: .rdata:688B0CB8o
aSuit		db 'suit',0             ; DATA XREF: .data:688AD078o
					; .rdata:688B0CBCo ...
aIcqmood12	db 'icqmood12',0        ; DATA XREF: .rdata:688B0CC0o
aCinema		db 'cinema',0           ; DATA XREF: .data:688AD054o
					; .rdata:688B0CC4o ...
aIcqmood13	db 'icqmood13',0        ; DATA XREF: .rdata:688B0CC8o
aSmileBig	db 'smile-big',0        ; DATA XREF: .rdata:688B0CCCo
aIcqmood14	db 'icqmood14',0        ; DATA XREF: .rdata:688B0CD0o
aPhone		db 'phone',0            ; DATA XREF: .data:688AD0E4o
					; .rdata:688B0CD4o ...
aIcqmood15	db 'icqmood15',0        ; DATA XREF: .rdata:688B0CD8o
aConsole	db 'console',0          ; DATA XREF: .data:688AD12Co
					; .rdata:688B0CDCo ...
aIcqmood16	db 'icqmood16',0        ; DATA XREF: .rdata:688B0CE0o
aStudying	db 'studying',0         ; DATA XREF: .data:688AD174o
					; .rdata:688B0CE4o ...
aIcqmood17	db 'icqmood17',0        ; DATA XREF: .rdata:688B0CE8o
aSick		db 'sick',0             ; DATA XREF: .data:688AD060o
					; .rdata:688B0CECo ...
aIcqmood18	db 'icqmood18',0        ; DATA XREF: .rdata:688B0CF0o
aSleeping	db 'sleeping',0         ; DATA XREF: .data:688AD0A8o
					; .rdata:688B0CF4o ...
aIcqmood19	db 'icqmood19',0        ; DATA XREF: .rdata:688B0CF8o
aSurfing	db 'surfing',0          ; DATA XREF: .data:688AD0F0o
					; .rdata:688B0CFCo ...
aIcqmood20	db 'icqmood20',0        ; DATA XREF: .rdata:688B0D00o
aInternet	db 'internet',0         ; DATA XREF: .data:688AD138o
					; .rdata:688B0D04o ...
aIcqmood21	db 'icqmood21',0        ; DATA XREF: .rdata:688B0D08o
aWorking	db 'working',0          ; DATA XREF: .data:688AD180o
					; .rdata:688B0D0Co ...
aIcqmood22	db 'icqmood22',0        ; DATA XREF: .rdata:688B0D10o
aTyping		db 'typing',0           ; DATA XREF: .data:688AD024o
					; .data:688AD06Co ...
aIcqmood23	db 'icqmood23',0        ; DATA XREF: .rdata:688B0D18o
aAngry		db 'angry',0            ; DATA XREF: .data:688AD03Co
					; .rdata:688B0D1Co ...
		align 10h
off_688B0C60	dd offset aIcqmood0	; DATA XREF: aim_info_extract+41Dr
					; "icqmood0"
off_688B0C64	dd offset aShopping	; DATA XREF: aim_info_extract+43Cr
					; "shopping"
		dd offset aIcqmood1	; "icqmood1"
		dd offset aBathing	; "bathing"
		dd offset aIcqmood2	; "icqmood2"
		dd offset aSleepy	; "sleepy"
		dd offset aIcqmood3	; "icqmood3"
		dd offset aParty	; "party"
		dd offset aIcqmood4	; "icqmood4"
		dd offset aBeer		; "beer"
		dd offset aIcqmood5	; "icqmood5"
		dd offset aThinking	; "thinking"
		dd offset aIcqmood6	; "icqmood6"
		dd offset aPlate	; "plate"
		dd offset aIcqmood7	; "icqmood7"
		dd offset aTv		; "tv"
		dd offset aIcqmood8	; "icqmood8"
		dd offset aMeeting	; "meeting"
		dd offset aIcqmood9	; "icqmood9"
		dd offset aCoffee	; "coffee"
		dd offset aIcqmood10	; "icqmood10"
		dd offset aMusic	; "music"
		dd offset aIcqmood11	; "icqmood11"
		dd offset aSuit		; "suit"
		dd offset aIcqmood12	; "icqmood12"
		dd offset aCinema	; "cinema"
		dd offset aIcqmood13	; "icqmood13"
		dd offset aSmileBig	; "smile-big"
		dd offset aIcqmood14	; "icqmood14"
		dd offset aPhone	; "phone"
		dd offset aIcqmood15	; "icqmood15"
		dd offset aConsole	; "console"
		dd offset aIcqmood16	; "icqmood16"
		dd offset aStudying	; "studying"
		dd offset aIcqmood17	; "icqmood17"
		dd offset aSick		; "sick"
		dd offset aIcqmood18	; "icqmood18"
		dd offset aSleeping	; "sleeping"
		dd offset aIcqmood19	; "icqmood19"
		dd offset aSurfing	; "surfing"
		dd offset aIcqmood20	; "icqmood20"
		dd offset aInternet	; "internet"
		dd offset aIcqmood21	; "icqmood21"
		dd offset aWorking	; "working"
		dd offset aIcqmood22	; "icqmood22"
		dd offset aTyping	; "typing"
		dd offset aIcqmood23	; "icqmood23"
		dd offset aAngry	; "angry"
		dd 2 dup(0)
aBusy		db 'busy',0             ; DATA XREF: .data:688AD00Co
					; .rdata:off_688B0D94o
aQuestion	db 'question',0         ; DATA XREF: .data:688AD030o
					; .rdata:688B0DD0o
aExcited	db 'excited',0          ; DATA XREF: .data:688AD09Co
					; .rdata:688B0E84o
aHiptop_1	db 'hiptop',0           ; DATA XREF: .data:688AD0B4o
					; .rdata:688B0EACo
aIn_love	db 'in_love',0          ; DATA XREF: .data:688AD0C0o
					; .rdata:688B0EC0o
aMobile_1	db 'mobile',0           ; DATA XREF: .data:688AD0FCo
					; .rdata:688B0F24o
aSearch		db 'search',0           ; DATA XREF: .data:688AD108o
					; .rdata:688B0F38o
aCigarette	db 'cigarette',0        ; DATA XREF: .data:688AD144o
					; .rdata:688B0F9Co
aWriting	db 'writing',0          ; DATA XREF: .data:688AD150o
					; .rdata:688B0FB0o
aRestroom	db 'restroom',0         ; DATA XREF: .data:688AD18Co
					; .rdata:688B1014o
		align 10h
off_688B0D80	dd offset aThinking	; DATA XREF: sub_68891114+68r
					; icq_get_custom_icon_data+46r
					; "thinking"
dword_688B0D84	dd 36BDB03Fh, 604A3BAFh, 19CFEF9Eh, 7F5A6A0Fh ;	DATA XREF: sub_68891114+82o
					; icq_get_custom_icon_data+6Bo
off_688B0D94	dd offset aBusy		; DATA XREF: icq_get_custom_icon_description+24o
					; "busy"
		dd 89148E48h, 84ACA8Ah,	0CE77AA82h, 852167Ah
		dd offset aShopping	; "shopping"
		dd 37736263h, 0FF493FA0h, 9F7E580h, 0EEA4E0CDh
		dd offset aTyping	; "typing"
		dd 0D86B4F63h, 0A14AD2ADh, 5B11B9AAh, 0A1056DC2h
		dd offset aQuestion	; "question"
		dd 0FF361463h, 0D0408A3Fh, 667BCBA5h, 64B351E0h
		dd offset aAngry	; "angry"
		dd 0EED7D801h, 2A493BACh, 0D8D38DA5h, 926BE677h
		dd offset aPlate	; "plate"
		dd 0B2D7E8F8h, 4241C482h, 0C610F890h, 0A6890ACEh
		dd offset aCinema	; "cinema"
		dd 189A7A10h, 0A44D3212h, 7908CDB6h, 90F78DBh
		dd offset aSick		; "sick"
		dd 71407A1Fh, 604E3BBFh, 574C32BCh, 0F14CB087h
		dd offset aTyping	; "typing"
		dd 0E5E4E02Ch, 7043647Ch, 1C7A3A9Ch, 0DCA778E8h
		dd offset aSuit		; "suit"
		dd 0F56708B7h, 27432538h, 4CCFFFA1h, 979793C1h
		dd offset aBathing	; "bathing"
		dd 0A11E585Ah, 0C4380E5h, 22616FA0h, 0C7E4B798h
		dd offset aTv		; "tv"
		dd 0E27D5380h, 764A67A4h, 0FD6D54B3h, 0C65E5F07h
		dd offset aExcited	; "excited"
		dd 9830496Fh, 0FF4A7C4Fh, 0A03476A2h, 0A7AECE3Bh
		dd offset aSleeping	; "sleeping"
		dd 488C5E78h, 654CD340h, 0CF046F88h, 0DF433F3Fh
		dd offset aHiptop_1	; "hiptop"
		dd 0C9171110h, 0F940B0A3h, 0E149AC81h, 0D4D5FB59h
		dd offset aIn_love	; "in_love"
		dd 0A90ECFDDh, 48409571h, 3241C6A9h, 80F2D606h
		dd offset aSleepy	; "sleepy"
		dd 8EB7C983h, 7843E777h, 6CFBC5B2h, 0EC5BC3FCh
		dd offset aMeeting	; "meeting"
		dd 2EB58AF1h, 1D4957DCh, 4464DC99h, 0AF572450h
		dd offset aPhone	; "phone"
		dd 50E59212h, 664F641Bh, 9AB206B2h, 8DE478F3h
		dd offset aSurfing	; "surfing"
		dd 7E55EDA6h, 0D444F76Bh, 0E7D2D4A5h, 1FE85CD9h
		dd offset aMobile_1	; "mobile"
		dd 0BB600C16h, 0F34344DDh, 0F054091h, 9C0E600h
		dd offset aSearch	; "search"
		dd 0BAB0E2D4h, 0A54F4E33h, 7D11D098h, 0C83C4DBFh
		dd offset aParty	; "party"
		dd 1CE401E6h, 0D14B7333h, 1D8106BCh, 813D326Ch
		dd offset aCoffee	; "coffee"
		dd 31AE781Bh, 384D0BFAh, 7E99D193h, 18B2AFEEh
		dd offset aConsole	; "console"
		dd 0D011A6D4h, 0C04E018Fh, 0B6C52392h, 0F0CCC6BEh
		dd offset aInternet	; "internet"
		dd 3E7ED012h, 9E4885F8h, 2AA7978Eh, 8DE55165h
		dd offset aCigarette	; "cigarette"
		dd 0AFC64364h, 17456022h, 0DFD78CB5h, 5203298Eh
		dd offset aWriting	; "writing"
		dd 8D97200h, 0DD43D14Ah, 26F9991h, 6F026669h
		dd offset aBeer		; "beer"
		dd 0AEDB508Ch, 8647ED81h, 0CC16CAACh, 0B7C71332h
		dd offset aMusic	; "music"
		dd 0DDE0BE61h, 5D47DD8Bh, 4B5FEE8Dh, 0A719CFAAh
		dd offset aStudying	; "studying"
		dd 0F8529D60h, 0A6499AA2h, 2425A0B2h, 60D2E9C5h
		dd offset aWorking	; "working"
		dd 3EDB74BAh, 4B43249Eh, 6B2FB687h, 0FE5FE8Dh
		dd offset aRestroom	; "restroom"
		dd 6FB7F516h, 3540D2A9h, 84C0C58Ch, 0FA983C70h,	5 dup(0)
aThinking_0	db 'Thinking',0         ; DATA XREF: .data:off_688AD004o
aBusy_0		db 'Busy',0             ; DATA XREF: .data:688AD010o
aShopping_0	db 'Shopping',0         ; DATA XREF: .data:688AD01Co
aQuestioning	db 'Questioning',0      ; DATA XREF: .data:688AD034o
aAngry_0	db 'Angry',0            ; DATA XREF: .data:688AD040o
aEating		db 'Eating',0           ; DATA XREF: .data:688AD04Co
aWatchingAMovie	db 'Watching a movie',0 ; DATA XREF: .data:688AD058o
aSick_0		db 'Sick',0             ; DATA XREF: .data:688AD064o
aTyping_0	db 'Typing',0           ; DATA XREF: .data:688AD070o
aAtTheOffice	db 'At the office',0    ; DATA XREF: .data:688AD07Co
aTakingABath	db 'Taking a bath',0    ; DATA XREF: .data:688AD088o
aWatchingTv	db 'Watching TV',0      ; DATA XREF: .data:688AD094o
aHavingFun	db 'Having fun',0       ; DATA XREF: .data:688AD0A0o
aSleeping_0	db 'Sleeping',0         ; DATA XREF: .data:688AD0ACo
aUsingAPda	db 'Using a PDA',0      ; DATA XREF: .data:688AD0B8o
aInLove		db 'In love',0          ; DATA XREF: .data:688AD0C4o
aSleepy_0	db 'Sleepy',0           ; DATA XREF: .data:688AD0D0o
aMeetingFriends	db 'Meeting friends',0  ; DATA XREF: .data:688AD0DCo
aOnThePhone	db 'On the phone',0     ; DATA XREF: .data:688AD0E8o
aSurfing_0	db 'Surfing',0          ; DATA XREF: .data:688AD0F4o
aMobile_2	db 'Mobile',0           ; DATA XREF: .data:688AD100o
aSearchingTheWe	db 'Searching the web',0 ; DATA XREF: .data:688AD10Co
aAtAParty	db 'At a party',0       ; DATA XREF: .data:688AD118o
aHavingCoffee	db 'Having Coffee',0    ; DATA XREF: .data:688AD124o
aGaming		db 'Gaming',0           ; DATA XREF: .data:688AD130o
aBrowsingTheWeb	db 'Browsing the web',0 ; DATA XREF: .data:688AD13Co
aSmoking	db 'Smoking',0          ; DATA XREF: .data:688AD148o
aWriting_0	db 'Writing',0          ; DATA XREF: .data:688AD154o
aDrinking	db 'Drinking',0         ; DATA XREF: .data:688AD160o
aListeningToMus	db 'Listening to music',0 ; DATA XREF: .data:688AD16Co
aStudying_0	db 'Studying',0         ; DATA XREF: .data:688AD178o
aWorking_0	db 'Working',0          ; DATA XREF: .data:688AD184o
aInTheRestroom	db 'In the restroom',0  ; DATA XREF: .data:688AD190o
; char aTextAolrtfCh_0[]
aTextAolrtfCh_0	db 'text/aolrtf; charset="%s"',0 ; DATA XREF: aim_locate_setprofile+D6o
					; aim_locate_setprofile+180o
		align 10h
aAim_exe	db 'aim.exe',0          ; DATA XREF: sub_688933E4:loc_68894100o
aRateSParamId0x	db 'rate %s (param ID 0x%04hx): curavg = %u, maxavg = %u, alert at %u'
					; DATA XREF: sub_688933E4+619o
					; sub_688933E4+B83o
		db ', clear warning at %u, limit at %u, disconnect at %u, delta is %u'
		db ', dropping is %u (window size = %u)',0Ah,0
aOscar_8	db 'oscar',0            ; DATA XREF: sub_688933E4+621o
					; sub_688933E4+903o ...
		align 4
aTheLastActionY	db 'The last action you attempted could not be performed because you '
					; DATA XREF: sub_688933E4:loc_68894030o
		db 'are over the rate limit. Please wait 10 seconds and try again.',0Ah,0
		align 4
aBifurcatedMigr	db 'bifurcated migration unsupported -- group 0x%04x',0Ah,0
					; DATA XREF: sub_688933E4+8FBo
		align 10h
aGotMemoryReque	db 'Got memory request for data at 0x%08x (%u bytes) of requested %s',0Ah
					; DATA XREF: sub_688933E4+B12o
		db 0
		align 4
aUploadingIconT	db 'Uploading icon to icon server',0Ah,0 ; DATA XREF: sub_688933E4+CCFo
aInvalid	db 'invalid',0          ; DATA XREF: sub_688933E4:loc_68893F5Fo
					; .rdata:off_688B1424o
aConnNull	db 'conn != NULL',0     ; DATA XREF: aim_srv_set_dc_info:loc_68894588o
aFamily_oservic	db 'family_oservice.c',0 ; DATA XREF: aim_srv_set_dc_info+1E8o
aMd5		db 'md5',0              ; DATA XREF: aim_sendmemblock+A8o
					; aim_sendmemblock+1C4o
		align 10h
aSendmemblockUn	db 'sendmemblock: unknown hash request',0Ah,0
					; DATA XREF: aim_sendmemblock:loc_6889480Ao
; char aOservice[]
aOservice	db 'oservice',0         ; DATA XREF: service_modfirst+38o
aAim_srv_set_dc	db 'aim_srv_set_dc_info',0 ; DATA XREF: aim_srv_set_dc_info+1D8o
aChange_0	db 'change',0           ; DATA XREF: .rdata:688B1428o
aWarning	db 'warning',0          ; DATA XREF: .rdata:688B142Co
aLimit		db 'limit',0            ; DATA XREF: .rdata:688B1430o
aLimitCleared	db 'limit cleared',0    ; DATA XREF: .rdata:688B1434o
off_688B1424	dd offset aInvalid	; DATA XREF: sub_688933E4+60Er
					; "invalid"
		dd offset aChange_0	; "change"
		dd offset aWarning	; "warning"
		dd offset aLimit	; "limit"
		dd offset aLimitCleared	; "limit cleared"
; char aPopup[]
aPopup		db 'popup',0            ; DATA XREF: popups_modfirst+38o
		align 10h
; char aStats[]
aStats		db 'stats',0            ; DATA XREF: stats_modfirst+38o
		align 4
aSearchErrorCou	db 'search error: couldn',27h,'t get a snac for 0x%08x',0Ah,0
					; DATA XREF: sub_68894BDC+26Bo
aOscar_9	db 'oscar',0            ; DATA XREF: sub_68894BDC+273o
; char aUserlookup[]
aUserlookup	db 'userlookup',0       ; DATA XREF: search_modfirst+38o
		align 4
aSchedulingDest	db 'Scheduling destruction of FLAP connection %p of type 0x%04hx',0Ah,0
					; DATA XREF: flap_connection_schedule_destroy+30o
aOscar_10	db 'oscar',0            ; DATA XREF: flap_connection_schedule_destroy+38o
					; sub_68895128+409o ...
aExpectingFlapV	db 'Expecting FLAP version 0x00000001 but received FLAP version %08x.'
					; DATA XREF: sub_68895128+401o
		db '  Closing connection.',0Ah,0
aDestroyingFlap	db 'Destroying FLAP connection %p',0Ah,0 ; DATA XREF: sub_68895BF0+1Ao
		align 4
aDestroyingOsca	db 'Destroying oscar connection (%p) of type 0x%04hx.  Disconnect rea'
					; DATA XREF: sub_68895BF0+50o
		db 'son is %d',0Ah,0
aYouHaveSignedO	db 'You have signed on from another location',0
					; DATA XREF: sub_68895BF0:loc_68895E88o
aPidgin_4	db 'pidgin',0           ; DATA XREF: sub_68895BF0:loc_68895E44o
					; sub_68895BF0+2A0o ...
aServerClosedTh	db 'Server closed the connection',0 ; DATA XREF: sub_68895BF0:loc_68895EB9o
		align 10h
aLostConnection	db 'Lost connection with server: %s',0 ; DATA XREF: sub_68895BF0+2EEo
aReceivedInvali	db 'Received invalid data on connection with server',0
					; DATA XREF: sub_68895BF0:loc_68895EEBo
aUnableToConnec	db 'Unable to connect: %s',0 ; DATA XREF: sub_68895BF0+24Co
		align 4
aCurrentRateFor	db 'Current rate for conn %p would be %u, but we alert at %u; enqueue'
					; DATA XREF: flap_connection_send_snac_with_priority+217o
		db 'ing',0Ah,0
		align 10h
aAttemptingToSe	db 'Attempting to send %u queued SNACs and %u queued low-priority SNA'
					; DATA XREF: sub_68896420+4Fo
		db 'Cs for %p',0Ah,0
; char aMisc[]
aMisc		db 'misc',0             ; DATA XREF: misc_modfirst+2Co
		align 4
aOutgoingOdcFra	db 'Outgoing ODC frame to %s with type=0x%04x, flags=0x%04x, payload '
					; DATA XREF: sub_68896D9C+33o
		db 'length=%u',0Ah,0
aOscar_11	db 'oscar',0            ; DATA XREF: sub_68896D9C+3Bo
					; peer_odc_recv_frame+FFo ...
aBinary		db '<binary>',0         ; DATA XREF: sub_68896FB0+11Co
aId		db 'id',0               ; DATA XREF: sub_68896FB0+16Co
					; sub_68896FB0+2C4o
aSize		db 'size',0             ; DATA XREF: sub_68896FB0+196o
aData_1		db '</data>',0          ; DATA XREF: sub_68896FB0+201o
aData_0		db 'data',0             ; DATA XREF: sub_68896FB0+257o
byte_688B1754	db 0			; DATA XREF: sub_68896FB0:loc_6889721Fo
aSrc		db 'src',0              ; DATA XREF: sub_68896FB0+2DEo
aDatasize	db 'datasize',0         ; DATA XREF: sub_68896FB0+2F8o
aImgIdD		db '<IMG ID="%d">',0    ; DATA XREF: sub_68896FB0+428o
aImg_0		db 'img',0              ; DATA XREF: sub_68896FB0+2B0o
aTheRemoteUserH	db 'The remote user has closed the connection.',0
					; DATA XREF: peer_odc_close:loc_68897700o
aPidgin_5	db 'pidgin',0           ; DATA XREF: peer_odc_close:loc_68897684o
					; peer_odc_close+13Bo ...
		align 4
aTheRemoteUse_0	db 'The remote user has declined your request.',0
					; DATA XREF: peer_odc_close:loc_68897710o
		align 4
aLostConnecti_0	db 'Lost connection with the remote user:<br>%s',0
					; DATA XREF: peer_odc_close+133o
aReceivedInva_0	db 'Received invalid data on connection with remote user.',0
					; DATA XREF: peer_odc_close:loc_6889774Co
		align 4
aUnableToEstabl	db 'Unable to establish a connection with the remote user.',0
					; DATA XREF: peer_odc_close:loc_6889767Co
aMsgNull	db 'msg != NULL',0      ; DATA XREF: peer_odc_send_im:loc_6889790Co
aLen0		db 'len > 0',0          ; DATA XREF: peer_odc_send_im:loc_688978ECo
		align 4
aIncomingOdcFra	db 'Incoming ODC frame from %s with type=0x%04x, flags=0x%04x, payloa'
					; DATA XREF: peer_odc_recv_frame+F7o
		db 'd length=%u',0Ah,0
		align 4
aReceivedAnInco	db 'Received an incorrect cookie.  Closing connection.',0Ah,0
					; DATA XREF: peer_odc_recv_frame:loc_68897D54o
aDirectImEstabl	db 'Direct IM established',0 ; DATA XREF: peer_odc_recv_frame+175o
		align 10h
aUnknownOdcFram	db 'Unknown ODC frame type 0x%04hx, subtype 0x%04hx.',0Ah,0
					; DATA XREF: peer_odc_recv_frame+304o
		align 4
aOhmigodSHasSta	db 'ohmigod! %s has started typing (DirectIM). He',27h,'s going to send '
					; DATA XREF: peer_odc_recv_frame+403o
		db 'you a message! *squeal*',0Ah,0
		align 4
aSTriedToSendYo	db '%s tried to send you a %s file, but we only allow files up to %s '
					; DATA XREF: peer_odc_recv_frame+22Ao
		db 'over Direct IM.  Try using file transfer instead.',0Ah,0
aPeer_odc_send_	db 'peer_odc_send_im',0 ; DATA XREF: peer_odc_send_im+CCo
					; peer_odc_send_im+ECo
		align 4
aCalculatingChe	db 'Calculating checksum of %s',0Ah,0 ; DATA XREF: sub_68897E08+2Co
aOscar_12	db 'oscar',0            ; DATA XREF: sub_68897E08+34o
					; sub_68897E08+E5o ...
aRb		db 'rb',0               ; DATA XREF: sub_68897E08+6Co
		align 4
aUnableToOpenSF	db 'Unable to open %s for checksumming: %s',0Ah,0
					; DATA XREF: sub_68897E08+DDo
aChecksumOfSCal	db 'Checksum of %s calculated',0Ah,0 ; DATA XREF: sub_688983A4+2Fo
		align 10h
aIncomingOftFra	db 'Incoming OFT frame from %s with type=0x%04x',0Ah,0
					; DATA XREF: peer_oft_recv_frame+1D6o
		align 10h
aReceivedAnIn_0	db 'Received an incorrect cookie.  Closing connection.',0Ah,0
					; DATA XREF: peer_oft_recv_frame:loc_688988E4o
; char aCoolFilexfer[]
aCoolFilexfer	db 'Cool FileXfer',0    ; DATA XREF: peer_oft_sendcb_init+84o
		align 4
aAccount	db 'account',0          ; DATA XREF: sub_68898C8C+1Eo
aAim		db 'aim',0              ; DATA XREF: sub_68898C8C+30o
					; oscar_list_icon_aim:loc_688A347Ao
aPrplS		db 'prpl-%s',0          ; DATA XREF: sub_68898C8C+60o
aIcq_0		db 'icq',0              ; DATA XREF: sub_68898C8C+44o
					; oscar_list_icon_icq:loc_688A3422o ...
aGoim		db 'GoIM',0             ; DATA XREF: sub_68898C8C:loc_68898D36o
aScreenname	db 'screenname',0       ; DATA XREF: sub_68898C8C+C2o
					; sub_68898C8C+268o
aMessage_1	db 'message',0          ; DATA XREF: sub_68898C8C+DCo
					; sub_6889A35C:loc_6889A540o ...
asc_688B1B44	db '+',0                ; DATA XREF: sub_68898C8C+124o
aGochat		db 'GoChat',0           ; DATA XREF: sub_68898C8C:loc_68898E3Co
aRoomname	db 'roomname',0         ; DATA XREF: sub_68898C8C+1C8o
a4		db '4',0                ; DATA XREF: sub_68898C8C+1E2o
					; oscar_chat_info_defaults:loc_688A2DB2o
aExchange	db 'exchange',0         ; DATA XREF: sub_68898C8C+1F0o
					; sub_6889F454+97Eo ...
aRoom		db 'room',0             ; DATA XREF: sub_68898C8C+216o
					; sub_6889F454+948o ...
aAddbuddy	db 'AddBuddy',0         ; DATA XREF: sub_68898C8C:loc_68898EDCo
aGroupname	db 'groupname',0        ; DATA XREF: sub_68898C8C+27Ao
a_cancel	db '_Cancel',0          ; DATA XREF: sub_6889908C+24o
					; sub_688991A8+23o ...
aPidgin_6	db 'pidgin',0           ; DATA XREF: sub_6889908C+2Co
					; sub_6889908C+44o ...
a_search	db '_Search',0          ; DATA XREF: sub_6889908C+3Co
aTypeTheEmailAd	db 'Type the email address of the buddy you are searching for.',0
					; DATA XREF: sub_6889908C+56o
		align 4
aSearchForABudd	db 'Search for a buddy by email address',0 ; DATA XREF: sub_6889908C+6Co
aFindBuddyByEma	db 'Find Buddy by Email',0 ; DATA XREF: sub_6889908C+82o
a_ok		db '_OK',0              ; DATA XREF: sub_688991A8+39o
					; sub_68899EF8+68o ...
aChangeAddressT	db 'Change Address To:',0 ; DATA XREF: sub_688991A8+4Fo
		align 4
aYouAreNotWaiti	db 'you are not waiting for authorization',0 ; DATA XREF: sub_688992D4+CFo
		align 4
aYouCanReReques	db 'You can re-request authorization from these buddies by right-clic'
					; DATA XREF: sub_688992D4+F9o
		db 'king on them and selecting "Re-request Authorization."',0
aYouAreAwaiting	db 'You are awaiting authorization from the following buddies',0
					; DATA XREF: sub_688992D4+10Fo
aAuthorization	db 'authorization',0    ; DATA XREF: sub_688995DC+2Eo
					; sub_688995DC+91o ...
aWeb_aware	db 'web_aware',0        ; DATA XREF: sub_688995DC+46o
					; sub_688995DC+C5o ...
aRequireAuthori	db 'Require authorization',0 ; DATA XREF: sub_688995DC+71o
aWebAwareEnabli	db 'Web aware (enabling this will cause you to receive SPAM!)',0
					; DATA XREF: sub_688995DC+A9o
aCancel		db 'Cancel',0           ; DATA XREF: sub_688995DC+F1o
aOk		db 'OK',0               ; DATA XREF: sub_688995DC+109o
aIcqPrivacyOpti	db 'ICQ Privacy Options',0 ; DATA XREF: sub_688995DC+123o
					; sub_688995DC+139o
; char aAvailable_0[]
aAvailable_0	db 'available',0        ; DATA XREF: sub_68899798+55o
					; sub_6889CC50+1D1o ...
aAway		db 'away',0             ; DATA XREF: sub_68899798+69o
					; sub_6889D79C:loc_6889D970o ...
aDnd		db 'dnd',0              ; DATA XREF: sub_68899798+7Do
					; sub_6889D79C:loc_6889DC74o ...
aNa		db 'na',0               ; DATA XREF: sub_68899798+91o
					; sub_6889D79C:loc_6889DE34o ...
aOccupied	db 'occupied',0         ; DATA XREF: sub_68899798+A5o
					; sub_6889D79C:loc_6889DE41o ...
aFree4chat	db 'free4chat',0        ; DATA XREF: sub_68899798+B9o
					; sub_6889D79C+121o ...
aInvisible	db 'invisible',0        ; DATA XREF: sub_68899798+CDo
					; sub_6889A2F8+24o ...
aEvil		db 'evil',0             ; DATA XREF: sub_68899798+E1o
					; sub_6889D79C:loc_6889DE93o ...
aDepression	db 'depression',0       ; DATA XREF: sub_68899798+F5o
					; sub_6889D79C:loc_6889DEA0o ...
aAtwork		db 'atwork',0           ; DATA XREF: sub_68899798+109o
					; sub_6889D79C:loc_6889DEBAo ...
aAthome		db 'athome',0           ; DATA XREF: sub_68899798+119o
					; sub_6889D79C:loc_6889DEADo ...
aLunch		db 'lunch',0            ; DATA XREF: sub_68899798+129o
					; sub_6889D79C+254o ...
aCustom		db 'custom',0           ; DATA XREF: sub_68899798+139o
		align 4
aHttpMymobile_a	db 'http://mymobile.aol.com/dbreg/register?action=imf&clientID=1',0
					; DATA XREF: sub_68899A6C+Eo
		align 4
aHttpWww_icq_co	db 'http://www.icq.com/whitepages/user_details.php',0
					; DATA XREF: sub_68899AA8+Eo
aS		db '%s',0               ; DATA XREF: .text:68899B19o
					; sub_6889B740+73o ...
		align 10h
aPurple_blist_0	db 'PURPLE_BLIST_NODE_IS_BUDDY(node)',0 ; DATA XREF: sub_68899BD8+26o
					; .text:68899DEEo ...
		align 4
aYouHaveSelecte	db 'You have selected to open a Direct IM connection with %s.',0
					; DATA XREF: sub_68899BD8+9Eo
aC_onnect	db 'C_onnect',0         ; DATA XREF: sub_68899BD8+D4o
		align 4
aBecauseThisRev	db 'Because this reveals your IP address, it may be considered a secu'
					; DATA XREF: sub_68899BD8+F5o
		db 'rity risk.  Do you wish to continue?',0
aYouClosedTheCo	db 'You closed the connection.',0 ; DATA XREF: .text:68899EA8o
aGotSecuridRequ	db 'Got SecurID request',0Ah,0 ; DATA XREF: sub_68899EF8+26o
aOscar_13	db 'oscar',0            ; DATA XREF: sub_68899EF8+2Eo
					; sub_6889A35C+4A2o ...
aEnterTheSecuri	db 'Enter the SecurID key for %s.',0 ; DATA XREF: sub_68899EF8+46o
		align 4
aEnterThe6Digit	db 'Enter the 6 digit number from the digital display.',0
					; DATA XREF: sub_68899EF8+80o
aEnterSecurid	db 'Enter SecurID',0    ; DATA XREF: sub_68899EF8+9Ao
aBuddyCommentFo	db 'Buddy Comment for %s',0 ; DATA XREF: sub_6889A038+113o
aBuddyComment	db 'Buddy Comment:',0   ; DATA XREF: sub_6889A038+16Co
		align 4
aYouHaveProbabl	db 'You have probably requested to set your profile before the login '
					; DATA XREF: sub_6889A35C:loc_6889A694o
		db 'procedure completed.  Your profile remains unset; try setting it '
		db 'again when you are fully connected.',0
aUnableToSetAim	db 'Unable to set AIM profile.',0 ; DATA XREF: sub_6889A35C+34Eo
		align 10h
aTheMaximumProf	db 'The maximum profile length of %d bytes has been exceeded.  It has'
					; DATA XREF: sub_6889A35C+D7o
		db ' been truncated for you.',0
		align 4
aTheMaximumPr_0	db 'The maximum profile length of %d byte has been exceeded.  It has '
					; DATA XREF: sub_6889A35C+DFo
		db 'been truncated for you.',0
aProfileTooLong	db 'Profile too long.',0 ; DATA XREF: sub_6889A35C+10Bo
byte_688B2167	db 0			; DATA XREF: sub_6889A35C:loc_6889A6FCo
					; sub_6889C5A4:loc_6889C6A4o ...
aTheMaximumAway	db 'The maximum away message length of %d bytes has been exceeded.  I'
					; DATA XREF: sub_6889A35C+3E8o
		db 't has been truncated for you.',0
		align 4
aTheMaximumAw_0	db 'The maximum away message length of %d byte has been exceeded.  It'
					; DATA XREF: sub_6889A35C+3F0o
		db ' has been truncated for you.',0
aAwayMessageToo	db 'Away message too long.',0 ; DATA XREF: sub_6889A35C+412o
aItmsurl	db 'itmsurl',0          ; DATA XREF: sub_6889A35C:loc_6889A646o
					; sub_6889D79C+54Co ...
		align 4
aUnableToConn_0	db 'unable to connect to FLAP server of type 0x%04hx',0Ah,0
					; DATA XREF: sub_6889A35C+49Ao
		align 4
aUnableToConn_2	db 'Unable to connect to authentication server: %s',0
					; DATA XREF: sub_6889A35C:loc_6889A880o
		align 4
aUnableToConn_1	db 'Unable to connect to BOS server: %s',0
					; DATA XREF: sub_6889A35C:loc_6889A840o
aTheSecuridKeyE	db 'The SecurID key entered is invalid',0 ; DATA XREF: sub_6889A890+13o
		align 4
aConnectedToFla	db 'connected to FLAP server of type 0x%04hx',0Ah,0
					; DATA XREF: sub_6889A890+85o
aUse_clientlogi	db 'use_clientlogin',0  ; DATA XREF: sub_6889A890+ACo
					; oscar_login+9A4o ...
aAllow_multiple	db 'allow_multiple_logins',0 ; DATA XREF: sub_6889A890+15Do
					; sub_6889E310+77o ...
aUsernameSentWa	db 'Username sent, waiting for response',0Ah,0
					; DATA XREF: sub_6889A890+200o
aUsernameSent	db 'Username sent',0    ; DATA XREF: sub_6889A890+214o
		align 4
aConnectionEsta	db 'Connection established, cookie sent',0
					; DATA XREF: sub_6889A890:loc_6889AAE0o
aUs		db 'us',0               ; DATA XREF: .data:688AD1D4o
					; .data:688AD1F0o
aEn_0		db 'en',0               ; DATA XREF: oscar_send_chat:loc_688A3316o
					; .data:688AD1D8o ...
aNone		db 'none',0             ; DATA XREF: sub_6889ACB0+24o
					; sub_688A46F4+282o
		align 4
aNoResultsFound	db 'No results found for email address %s',0 ; DATA XREF: .text:6889AD50o
aSBrAHrefSSA	db '%s<br><a href="%s">%s</a>',0 ; DATA XREF: .text:6889ADFBo
aPopUpMessage	db 'Pop-Up Message',0   ; DATA XREF: .text:6889AE09o
aUnknown_0	db 'Unknown',0          ; DATA XREF: .text:loc_6889AF24o
aMotdSHu	db 'MOTD: %s (%hu)',0Ah,0 ; DATA XREF: .text:6889AEA8o
		align 10h
aYourAimConnect	db 'Your AIM connection may be lost.',0 ; DATA XREF: .text:6889AEC2o
		align 4
aLocateRightsMa	db 'locate rights: max sig len = %d',0Ah,0 ; DATA XREF: .text:6889AF5Fo
		align 4
aYouMissedHuM_5	db 'You missed %hu messages from %s because they were invalid.',0
					; DATA XREF: sub_6889AFD0+13Do
		align 4
aYouMissedHuM_6	db 'You missed %hu message from %s because it was invalid.',0
					; DATA XREF: sub_6889AFD0+145o
		align 4
aYouMissedHuM_7	db 'You missed %hu messages from %s because they were too large.',0
					; DATA XREF: sub_6889AFD0+15Do
		align 4
aYouMissedHuM_8	db 'You missed %hu message from %s because it was too large.',0
					; DATA XREF: sub_6889AFD0+165o
		align 4
aYouMissedHuM_9	db 'You missed %hu messages from %s because the rate limit has been e'
					; DATA XREF: sub_6889AFD0+17Do
		db 'xceeded.',0
		align 4
aYouMissedHu_10	db 'You missed %hu message from %s because the rate limit has been ex'
					; DATA XREF: sub_6889AFD0+185o
		db 'ceeded.',0
		align 10h
aYouMissedHuM_1	db 'You missed %hu messages from %s because his/her warning level is '
					; DATA XREF: sub_6889AFD0+FDo
		db 'too high.',0
		align 4
aYouMissedHuM_2	db 'You missed %hu message from %s because his/her warning level is t'
					; DATA XREF: sub_6889AFD0+105o
		db 'oo high.',0
		align 4
aYouMissedHuM_3	db 'You missed %hu messages from %s because your warning level is too'
					; DATA XREF: sub_6889AFD0+11Do
		db ' high.',0
aYouMissedHuM_4	db 'You missed %hu message from %s because your warning level is too '
					; DATA XREF: sub_6889AFD0+125o
		db 'high.',0
		align 4
aYouMissedHuMes	db 'You missed %hu messages from %s for an unknown reason.',0
					; DATA XREF: sub_6889AFD0+42o
		align 10h
aYouMissedHuM_0	db 'You missed %hu message from %s for an unknown reason.',0
					; DATA XREF: sub_6889AFD0+4Ao
		align 4
off_688B2778	dd offset loc_6889B104	; DATA XREF: sub_6889AFD0:loc_6889B0BCr
		dd offset loc_6889B124	; jump table for switch	statement
		dd offset loc_6889B144
		dd offset loc_6889B0C4
		dd offset loc_6889B0E4
aSsiReceivedAut	db 'ssi: received authorization reply from %s.  Reply is 0x%04hhx',0Ah,0
					; DATA XREF: sub_6889B168+36o
aSS_1		db '%s (%s)',0          ; DATA XREF: sub_6889B168+88o
					; sub_6889B308+79o
		align 4
aTheUserSHasGra	db 'The user %s has granted your request to add them to your buddy li'
					; DATA XREF: sub_6889B168:loc_6889B2B9o
		db 'st.',0
aAuthorizationG	db 'Authorization Granted',0 ; DATA XREF: sub_6889B168+173o
aNoReasonGiven_	db 'No reason given.',0 ; DATA XREF: sub_6889B168:loc_6889B2E8o
					; sub_6889F454:loc_688A06F4o
aTheUserSHasDen	db 'The user %s has denied your request to add them to your buddy lis'
					; DATA XREF: sub_6889B168:loc_6889B211o
		db 't for the following reason:',0Ah
		db '%s',0
aAuthorizationD	db 'Authorization Denied',0 ; DATA XREF: sub_6889B168+CFo
		align 4
aSsiSHasGivenYo	db 'ssi: %s has given you permission to add him to your buddy list',0Ah,0
					; DATA XREF: sub_6889B308+27o
aTheUserSHasGiv	db 'The user %s has given you permission to add him or her to your bu'
					; DATA XREF: sub_6889B308+87o
					; sub_6889B308+1CEo
		db 'ddy list.  Do you want to add this user?',0
a_no		db '_No',0              ; DATA XREF: sub_6889B308+E1o
a_yes		db '_Yes',0             ; DATA XREF: sub_6889B308+F5o
aAuthorizatio_0	db 'Authorization Given',0 ; DATA XREF: sub_6889B308+11Bo
aNoName		db 'no name',0          ; DATA XREF: sub_6889B308:loc_6889B6ACo
aNoItem		db 'no item',0          ; DATA XREF: sub_6889B308:loc_6889B6A0o
		align 10h
aSsiStatusIs0x0	db 'ssi: status is 0x%04hx for a 0x%04hx action with name %s',0Ah,0
					; DATA XREF: sub_6889B308+310o
aNoName_0	db '(no name)',0        ; DATA XREF: sub_6889B308:loc_6889B704o
					; sub_6889B308:loc_6889B720o
aUnableToAddT_0	db 'Unable to add the buddy %s because you have too many buddies in y'
					; DATA XREF: sub_6889B308:loc_6889B64Bo
		db 'our buddy list.  Please remove one and try again.',0
aUnableToAdd	db 'Unable to Add',0    ; DATA XREF: sub_6889B308:loc_6889B6B8o
					; oscar_add_buddy:loc_688A27FCo
		align 4
aSsiAction0x04h	db 'ssi: Action 0x%04hx was unsuccessful with error 0x%04hx',0Ah,0
					; DATA XREF: sub_6889B308+26Ao
		align 4
aUnableToAddThe	db 'Unable to add the buddy %s for an unknown reason.',0
					; DATA XREF: sub_6889B308:loc_6889B591o
aSsiRights	db 'ssi rights:',0      ; DATA XREF: sub_6889B740+22o
aMaxType0x04xHd	db ' max type 0x%04x=%hd,',0 ; DATA XREF: sub_6889B740+48o
asc_688B2AE8	db 0Ah,0		; DATA XREF: sub_6889B740+5Do
					; sub_6889B740:loc_6889B81Do ...
		align 4
aInsideChat_inf	db 'inside chat_info_update (maxmsglen = %hu, maxvislen = %hu)',0Ah,0
					; DATA XREF: .text:6889B8B5o
aBuddyListRight	db 'buddy list rights: Max buddies = %hu / Max watchers = %hu',0Ah,0
					; DATA XREF: .text:6889B917o
aEmailSent	db 'email sent',0       ; DATA XREF: .text:loc_6889B9C4o
		align 10h
aAccountConfirm	db 'account confirmation returned status 0x%04x (%s)',0Ah,0
					; DATA XREF: .text:6889B98Do
					; .text:6889B9D5o
		align 4
aYouShouldRecei	db 'You should receive an email asking to confirm %s.',0
					; DATA XREF: .text:6889B9FBo
		align 4
aAccountConfi_0	db 'Account Confirmation Requested',0 ; DATA XREF: .text:6889BA2Bo
aUnknown_1	db 'unknown',0          ; DATA XREF: .text:6889B97Co
aNull_0		db '(null)',0           ; DATA XREF: sub_6889BA7C:loc_6889BCACo
					; sub_6889BA7C:loc_6889BCBCo ...
aChange		db 'change',0           ; DATA XREF: sub_6889BA7C+72o
aRequest	db 'request',0          ; DATA XREF: sub_6889BA7C:loc_6889BC90o
		align 4
aAccountInfoBec	db 'account info: because of %s, perms=0x%04x, err=0x%04x, url=%s, bn'
					; DATA XREF: sub_6889BA7C+9Bo
		db '=%s, email=%s',0Ah,0
aError0x04xUn_0	db 'Error 0x%04x: Unable to format username because the requested nam'
					; DATA XREF: sub_6889BA7C:loc_6889BCDCo
		db 'e differs from the original.',0
		align 4
aError0x04xUn_1	db 'Error 0x%04x: Unable to format username because it is invalid.',0
					; DATA XREF: sub_6889BA7C:loc_6889BCECo
		align 4
aError0x04xUn_2	db 'Error 0x%04x: Unable to format username because the requested nam'
					; DATA XREF: sub_6889BA7C:loc_6889BCFCo
		db 'e is too long.',0
aError0x04xUn_3	db 'Error 0x%04x: Unable to change email address because there is alr'
					; DATA XREF: sub_6889BA7C:loc_6889BD0Co
		db 'eady a request pending for this username.',0
		align 4
aError0x04xUn_4	db 'Error 0x%04x: Unable to change email address because the given ad'
					; DATA XREF: sub_6889BA7C:loc_6889BD1Co
		db 'dress has too many usernames associated with it.',0
		align 4
aError0x04xUnab	db 'Error 0x%04x: Unable to change email address because the given ad'
					; DATA XREF: sub_6889BA7C:loc_6889BC9Co
		db 'dress is invalid.',0
aError0x04xUnkn	db 'Error 0x%04x: Unknown error.',0 ; DATA XREF: sub_6889BA7C+FCo
aErrorChangingA	db 'Error Changing Account Info',0 ; DATA XREF: sub_6889BA7C+11Eo
aTheEmailAddres	db 'The email address for %s is %s',0 ; DATA XREF: sub_6889BA7C+17Eo
aAccountInfo	db 'Account Info',0     ; DATA XREF: sub_6889BA7C+1A4o
aPurple_parse_s	db 'purple_parse_searchreply: Unable to display the search results.',0Ah
					; DATA XREF: sub_6889BD30:loc_6889BE6Co
		db 0
		align 4
aUnableToDispla	db 'Unable to display the search results.',0 ; DATA XREF: sub_6889BD30+150o
		align 4
aTheFollowingUs	db 'The following usernames are associated with %s',0
					; DATA XREF: sub_6889BD30+3Co
		align 4
aTheFollowing_0	db 'The following username is associated with %s',0
					; DATA XREF: sub_6889BD30+44o
aUsername	db 'Username',0         ; DATA XREF: sub_6889BD30+66o
aOpportunisti_0	db 'opportunistic_encryption',0 ; DATA XREF: sub_6889C040:loc_6889C230o
					; sub_6889C040+20Co ...
aEncryption_0	db 'encryption',0       ; DATA XREF: sub_6889C040+1F8o
					; oscar_login+907o ...
		align 4
aWeWonTUseSslFo	db 'We won',27h,'t use SSL for FLAP type 0x%04hx.',0Ah,0
					; DATA XREF: sub_6889C040+2EFo
aRequire_encryp	db 'require_encryption',0 ; DATA XREF: sub_6889C040+220o
					; oscar_login+928o ...
aFlapServerSDOf	db 'FLAP server %s:%d of type 0x%04hx doesn',27h,'t support encryption.',0
					; DATA XREF: sub_6889C040+31Fo
		align 4
aYouRequiredE_0	db 'You required encryption in your account settings, but one of the '
					; DATA XREF: sub_6889C040+333o
		db 'servers doesn',27h,'t support it.',0
		align 4
aIgnoringBroken	db 'Ignoring broken SSL for FLAP type 0x%04hx.',0Ah,0
					; DATA XREF: sub_6889C040+24Co
aConnectingToFl	db 'Connecting to FLAP server %s:%d of type 0x%04hx',0Ah,0
					; DATA XREF: sub_6889C040+ADo
		align 4
aConnectingToCh	db 'Connecting to chat room %s exchange %hu',0Ah,0
					; DATA XREF: sub_6889C040+2CFo
		align 10h
aUnableToInitia	db 'Unable to initialize connection',0 ; DATA XREF: sub_6889C040+1A5o
aUnableToConn_3	db 'Unable to connect to FLAP server of type 0x%04hx',0Ah,0
					; DATA XREF: sub_6889C040+1D4o
aAim_exe_0	db 'aim.exe',0          ; DATA XREF: sub_6889C3AC:loc_6889C4ECo
		align 4
aOffsetULenUFil	db 'offset: %u, len: %u, file: %s',0Ah,0 ; DATA XREF: sub_6889C3AC+59o
aLenIs0HashingN	db 'len is 0, hashing NULL',0Ah,0 ; DATA XREF: sub_6889C3AC:loc_6889C4A4o
aPidgin_im	db 'pidgin.im',0        ; DATA XREF: sub_6889C3AC+BAo
aHttpPidgin_im	db 'http://pidgin.im/',0 ; DATA XREF: sub_6889C3AC+15Fo
					; sub_6889C5A4:loc_6889C6F0o ...
aWebsite	db 'website',0          ; DATA XREF: sub_6889C3AC+167o
					; sub_6889C5A4+154o ...
		align 4
aYouMayBeDiscon	db 'You may be disconnected shortly.  If so, check %s for updates.',0
					; DATA XREF: sub_6889C3AC+175o
					; sub_6889C5A4+162o ...
		align 4
aUnableToGetAVa	db 'Unable to get a valid login hash.',0 ; DATA XREF: sub_6889C3AC+1A5o
		align 4
aUnableToGetA_0	db 'Unable to get a valid AIM login hash.',0 ; DATA XREF: sub_6889C5A4+184o
					; sub_6889C7A4+BDo
		align 4
aGetHttpPidgin_	db 'GET http://pidgin.im/aim_data.php3?offset=%ld&len=%ld&modname=%s '
					; DATA XREF: sub_6889C5A4+43o
		db 'HTTP/1.0',0Ah
		db 0Ah,0
aErrorWritingUB	db 'Error writing %u bytes to fetch AIM hash data: %s',0Ah,0
					; DATA XREF: sub_6889C5A4+132o
		align 4
aTriedToWriteUB	db 'Tried to write %u bytes to fetch AIM hash data but instead wrote '
					; DATA XREF: sub_6889C5A4+9Fo
		db '%i bytes',0Ah,0
		align 10h
aCouldNotReadFu	db 'Could not read full AIM login hash from http://pidgin.im/aim_data'
					; DATA XREF: sub_6889C7A4+160o
		db '.php3--that',27h,'s bad.',0Ah,0
aSendingHash	db 'Sending hash: ',0   ; DATA XREF: sub_6889C7A4+179o
a02hhx		db '%02hhx ',0          ; DATA XREF: sub_6889C7A4+198o
aReceivedUnknow	db 'Received unknown typing notification message from %s.  Channel is'
					; DATA XREF: sub_6889CA2C+46o
		db ' 0x%04x and event is 0x%04hx.',0Ah,0
aSsiReceivedA_0	db 'ssi: received authorization request from %s',0Ah,0
					; DATA XREF: .text:6889CB15o
		align 4
aReceivedAuth_0	db 'Received auth request from %s with empty message',0Ah,0
					; DATA XREF: .text:6889CB98o
		align 10h
aReceivedAuthRe	db 'Received auth request from %s with invalid UTF-8 message',0Ah,0
					; DATA XREF: .text:6889CB4Do
		align 4
aSsiSAddedYouTo	db 'ssi: %s added you to their buddy list',0Ah,0
					; DATA XREF: .text:6889CBECo
aOrphans_0	db 'Orphans',0          ; DATA XREF: sub_6889CC50:loc_6889CE79o
					; sub_6889CC50:loc_6889CE9Do ...
		align 4
aSsiAddingBud_0	db 'ssi: adding buddy %s to group %s to local list',0Ah,0
					; DATA XREF: sub_6889CC50+188o
					; sub_688A46F4+7BEo
aMobile_0	db 'mobile',0           ; DATA XREF: sub_6889CC50+1EDo
					; sub_6889D4CC+45o ...
		align 4
aPurple_ssi_par	db 'purple_ssi_parseaddmod: Could not find ssi item for oncoming budd'
					; DATA XREF: sub_6889CC50+210o
		db 'y %s, group %s',0Ah,0
aSsiSnacErrorHu	db 'ssi: SNAC error %hu',0Ah,0 ; DATA XREF: .text:6889CF27o
		align 4
aTheAimServersW	db 'The AIM servers were temporarily unable to send your buddy list. '
					; DATA XREF: .text:6889CF67o
		db ' Your buddy list is not lost, and will probably become available '
		db 'in a few minutes.',0
aUnableToRetrie	db 'Unable to Retrieve Buddy List',0 ; DATA XREF: .text:6889CF7Do
		align 10h
aChatInfoMaxCon	db 'chat info: Max Concurrent Rooms: %hhd, Exchange List (%d total): '
					; DATA XREF: sub_6889D028+9Co
		db 0
aS_2		db '%s',0Ah,0           ; DATA XREF: sub_6889D028+114o
					; oscar_login+831o
aHu		db '%hu',0              ; DATA XREF: sub_6889D028+C7o
aS_4		db ' %s',0              ; DATA XREF: sub_6889D028+E2o
asc_688B369E	db ', ',0               ; DATA XREF: sub_6889D028:loc_6889D11Ao
aCreatingRoomS	db 'creating room %s',0Ah,0 ; DATA XREF: sub_6889D028+150o
		align 4
aCreatedRoomSHu	db 'created room: %s %hu %hu %hu %u %hu %hu %hhu %hu %s %s',0Ah,0
					; DATA XREF: sub_6889D028+293o
aChatnavInfoUnk	db 'chatnav info: unknown type (%04hx)',0Ah,0 ; DATA XREF: sub_6889D028+3Fo
aOffline_0	db 'offline',0          ; DATA XREF: sub_6889D4CC+2Fo
					; oscar_status_types+71Co
aUploadingIco_0	db 'Uploading icon to icon server',0Ah,0 ; DATA XREF: sub_6889D620+F2o
aNoMoreIconsToR	db 'no more icons to request',0Ah,0 ; DATA XREF: sub_6889D620:loc_6889D6D0o
		align 4
aActivatingSt_0	db 'Activating status ',27h,'%s',27h,' for buddy %s, message = ',27h,'%s',27h,', '
					; DATA XREF: sub_6889D79C+52Co
		db 'itmsurl = ',27h,'%s',27h,0Ah,0
		align 4
aActivatingStat	db 'Activating status ',27h,'%s',27h,' for buddy %s, message = ',27h,'%s',27h,0Ah,0
					; DATA XREF: sub_6889D79C+2CDo
aInfoNull	db 'info != NULL',0     ; DATA XREF: sub_6889D79C:loc_6889DD18o
aInfoBnNull	db 'info->bn != NULL',0 ; DATA XREF: sub_6889D79C:loc_6889DD3Co
		align 10h
aBosRightsMaxPe	db 'BOS rights: Max permit = %hu / Max deny = %hu',0Ah,0
					; DATA XREF: sub_6889DECC+47o
aBuddyListLoade	db 'buddy list loaded',0Ah,0 ; DATA XREF: sub_6889DECC+69o
		align 4
aCowardlyRefusi	db 'Cowardly refusing to attempt to format screen name because the cu'
					; DATA XREF: sub_6889DECC+290o
		db 'rrent formatting according to the server (%s) appears to be an em'
		db 'ail address',0Ah,0
		align 4
aUsernameFormat	db 'Username formatting can change only capitalization and whitespace'
					; DATA XREF: sub_6889DECC:loc_6889E23Ao
		db '.',0
		align 4
aTheNewFormatti	db 'The new formatting is invalid.',0 ; DATA XREF: sub_6889DECC+384o
aPasswordSent	db 'Password sent',0    ; DATA XREF: sub_6889E310+E8o
aNull_2		db 'null',0             ; DATA XREF: sub_6889E454:loc_6889E8D4o
aPort_0		db 'port',0             ; DATA XREF: sub_6889E454+40o
					; oscar_login+8E4o ...
		align 10h
aInsideAuth_res	db 'inside auth_resp (Username: %s)',0Ah,0 ; DATA XREF: sub_6889E454+65o
aUsernameDoesNo	db 'Username does not exist',0 ; DATA XREF: sub_6889E454:loc_6889E780o
aIncorrectPas_0	db 'Incorrect password',0 ; DATA XREF: sub_6889E454:loc_6889E740o
aYourAccountIsC	db 'Your account is currently suspended',0
					; DATA XREF: sub_6889E454:loc_6889E71Co
aTheAolInstantM	db 'The AOL Instant Messenger service is temporarily unavailable.',0
					; DATA XREF: sub_6889E454:loc_6889E750o
		align 10h
aYourUsernameHa	db 'Your username has been connecting and disconnecting too frequentl'
					; DATA XREF: sub_6889E454:loc_6889E810o
		db 'y. Wait ten minutes and try again. If you continue to try, you wi'
		db 'll need to wait even longer.',0
		align 10h
aTheClientVersi	db 'The client version you are using is too old. Please upgrade at %s'
					; DATA XREF: sub_6889E454+372o
		db 0
		align 4
aYourIpAddressH	db 'Your IP address has been connecting and disconnecting too frequen'
					; DATA XREF: sub_6889E454:loc_6889E6ECo
		db 'tly. Wait a minute and try again. If you continue to try, you wil'
		db 'l need to wait even longer.',0
aUnknownReaso_1	db 'Unknown reason',0   ; DATA XREF: sub_6889E454:loc_6889E4ECo
aLoginErrorCode	db 'Login Error Code 0x%04hx',0Ah,0 ; DATA XREF: sub_6889E454+C8o
aErrorUrlS	db 'Error URL: %s',0Ah,0 ; DATA XREF: sub_6889E454+EBo
		align 4
aRegStatusHuEma	db 'Reg status: %hu',0Ah ; DATA XREF: sub_6889E454+15Eo
		db 'Email: %s',0Ah
		db 'BOSIP: %s',0Ah,0
aClosingAuthCon	db 'Closing auth connection...',0Ah,0 ; DATA XREF: sub_6889E454+172o
aBos_oscar_aol_	db 'bos.oscar.aol.com',0 ; DATA XREF: sub_6889E454+20Eo
aUnableToConn_4	db 'Unable to connect',0 ; DATA XREF: sub_6889E454+433o
					; oscar_login+B68o ...
aReceivedAuthor	db 'Received authorization',0 ; DATA XREF: sub_6889E454:loc_6889E6B0o
					; oscar_connect_to_bos+DCo
off_688B3C28	dd offset loc_6889E4EC	; DATA XREF: sub_6889E454+12Er
		dd offset loc_6889E780	; jump table for switch	statement
		dd offset loc_6889E750
		dd offset loc_6889E4EC
		dd offset loc_6889E4EC
		dd offset loc_6889E72C
		dd offset loc_6889E4EC
		dd offset loc_6889E4EC
		dd offset loc_6889E4EC
		dd offset loc_6889E4EC
		dd offset loc_6889E4EC
		dd offset loc_6889E4EC
		dd offset loc_6889E4EC
		dd offset loc_6889E4EC
		dd offset loc_6889E4EC
		dd offset loc_6889E4EC
		dd offset loc_6889E4EC
		dd offset loc_6889E71C
		dd offset loc_6889E4EC
		dd offset loc_6889E4EC
		dd offset loc_6889E750
		dd offset loc_6889E4EC
		dd offset loc_6889E4EC
		dd offset loc_6889E4EC
		dd offset loc_6889E810
		dd offset loc_6889E4EC
		dd offset loc_6889E4EC
		dd offset loc_6889E4EC
		dd offset loc_6889E7B0
		dd offset loc_6889E6EC
byte_688B3CA0	db 40h,	0		; DATA XREF: sub_6889E8E4+C1o
aSSS_1		db '%s%s%s',0           ; DATA XREF: sub_6889E8E4+E5o
aGotAnAlertSS	db 'Got an alert ',27h,'%s',27h,' %s',0Ah,0 ; DATA XREF: sub_6889E8E4+78o
		align 10h
aSnacThrewError	db 'snac threw error (reason 0x%04hx: %s)',0Ah,0
					; DATA XREF: sub_6889EA6C+24o
		align 4
aFlapConnection	db 'FLAP connection of type 0x%04hx is now fully connected',0Ah,0
					; DATA XREF: .text:6889EAE1o
aSsiRequestingR	db 'ssi: requesting rights and list',0Ah,0 ; DATA XREF: .text:6889EB77o
aFinalizingConn	db 'Finalizing connection',0 ; DATA XREF: .text:6889EBEDo
aConnectedToAdm	db 'connected to admin',0Ah,0 ; DATA XREF: .text:6889EC30o
aChangingPasswo	db 'changing password',0Ah,0 ; DATA XREF: .text:loc_6889EDFCo
aFormattingUser	db 'formatting username',0Ah,0 ; DATA XREF: .text:loc_6889EDB4o
aConfirmingAcco	db 'confirming account',0Ah,0 ; DATA XREF: .text:loc_6889ED88o
aRequestingEmai	db 'requesting email address',0Ah,0 ; DATA XREF: .text:loc_6889ED54o
aSettingEmailAd	db 'setting email address',0Ah,0 ; DATA XREF: .text:6889EC7Bo
aFreeForChat	db 'Free For Chat',0    ; DATA XREF: sub_6889EE60:loc_6889EEF8o
					; oscar_status_types+10Co
aDoNotDisturb	db 'Do Not Disturb',0   ; DATA XREF: sub_6889EE60:loc_6889EF68o
					; oscar_status_types+60Co
aNotAvailable	db 'Not Available',0    ; DATA XREF: sub_6889EE60:loc_6889EF28o
					; oscar_status_types+696o
aOccupied_0	db 'Occupied',0         ; DATA XREF: sub_6889EE60:loc_6889EF88o
					; oscar_status_types+582o
aAway_0		db 'Away',0             ; DATA XREF: sub_6889EE60:loc_6889EFACo
aWebAware	db 'Web Aware',0        ; DATA XREF: sub_6889EE60:loc_6889EFD0o
aInvisible_1	db 'Invisible',0        ; DATA XREF: sub_6889EE60:loc_6889EF48o
aEvil_0		db 'Evil',0             ; DATA XREF: sub_6889EE60:loc_6889F018o
					; oscar_status_types+196o
aDepression_0	db 'Depression',0       ; DATA XREF: sub_6889EE60:loc_6889F03Co
					; oscar_status_types+220o
aAtHome		db 'At home',0          ; DATA XREF: sub_6889EE60:loc_6889F060o
					; oscar_status_types+2AAo
aAtWork		db 'At work',0          ; DATA XREF: sub_6889EE60:loc_6889F084o
					; oscar_status_types+334o
aAtLunch	db 'At lunch',0         ; DATA XREF: sub_6889EE60:loc_6889EFF4o
aOnline		db 'Online',0           ; DATA XREF: sub_6889EE60+7Ao
		align 4
aManualXStatusG	db 'Manual X-Status Get From %s to %s:',0Ah,0 ; DATA XREF: .text:6889F136o
aReceivedARende	db 'Received a rendezvous cancel message for a nonexistant connection'
					; DATA XREF: sub_6889F200+1F3o
		db ' from %s.',0Ah,0
aReceivedAnUn_0	db 'Received an unknown rendezvous message from %s.  Type 0x%04hx',0Ah,0
					; DATA XREF: sub_6889F200+1A0o
asc_688B3F07	db 0Dh,0Ah,0		; DATA XREF: sub_6889F200+A7o
					; sub_6889F454+1223o
aUin_0		db 'UIN',0              ; DATA XREF: sub_6889F200+C0o
aStatus_0	db 'Status',0           ; DATA XREF: sub_6889F200+E4o
aBr_1		db '<BR>',0             ; DATA XREF: sub_6889F200+114o
		align 4
aReceivedAnUnkn	db 'Received an unknown client auto-response from %s.  Type 0x%04hx',0Ah
					; DATA XREF: sub_6889F200+7Bo
		db 0
aBody_1		db '</body>',0          ; DATA XREF: sub_6889F454:loc_688A0516o
aReceivedImFrom	db 'Received IM from %s',0Ah,0 ; DATA XREF: sub_6889F454+A2o
aSHasAnIcon	db '%s has an icon',0Ah,0 ; DATA XREF: sub_6889F454+11Bo
		align 4
aSendingBuddyIc	db 'Sending buddy icon to %s (%u bytes)',0Ah,0
					; DATA XREF: sub_6889F454+83Eo
aBody		db 'body',0             ; DATA XREF: sub_6889F454+1B0o
aBody_0		db '/body',0            ; DATA XREF: sub_6889F454+435o
aBrokenMessageC	db 'Broken message contains <body> but not </body>!',0Ah,0
					; DATA XREF: sub_6889F454+449o
aIchattextcolor	db 'ichattextcolor',0   ; DATA XREF: sub_6889F454:loc_6889F8C1o
aFontColorSSFon	db '<font color="%s">%s</font>',0 ; DATA XREF: sub_6889F454+499o
aIchatballoonco	db 'ichatballooncolor',0 ; DATA XREF: sub_6889F454:loc_6889F909o
aFontBackSSFont	db '<font back="%s">%s</font>',0 ; DATA XREF: sub_6889F454+4E1o
a_SSS		db '%.*s%s%s',0         ; DATA XREF: sub_6889F454+52Fo
aHtml		db 'html',0             ; DATA XREF: sub_6889F454+1DCo
a_SS		db '%.*s%s',0           ; DATA XREF: sub_6889F454+39Fo
					; sub_6889F454+3DBo
aHtml_0		db '/html',0            ; DATA XREF: sub_6889F454+208o
		align 10h
aIncomingRendez	db 'Incoming rendezvous message of type %I64u, user %s, status %hu',0Ah,0
					; DATA XREF: sub_6889F454+302o
aD		db '%d',0               ; DATA XREF: sub_6889F454+970o
		align 4
aGotAnIcqServer	db 'Got an ICQ Server Relay message of type %d',0Ah,0
					; DATA XREF: sub_6889F454+5ADo
aEncoding_0	db 'encoding',0         ; DATA XREF: sub_6889F454+13E2o
		align 4
aMirandaIsThatY	db 'Miranda, is that you? Using ',27h,'%s',27h,' as encoding',0Ah,0
					; DATA XREF: sub_6889F454+13FEo
aBr		db '<br>',0             ; DATA XREF: sub_6889F454+121Bo
aSendingXStatus	db 'Sending X-Status Reply',0Ah,0 ; DATA XREF: sub_6889F454+5DCo
aUnknownRequest	db 'Unknown request class %I64u',0Ah,0 ; DATA XREF: sub_6889F454+113Co
aReceivedAChann	db 'Received a channel 4 message of type 0x%02hx.',0Ah,0
					; DATA XREF: sub_6889F454+684o
byte_688B4173	db 0FEh			; DATA XREF: sub_6889F454+6A5o
					; sub_6889F454+A88o
		db 0
byte_688B4175	db 25h,	75h, 0		; DATA XREF: sub_6889F454+716o
					; sub_6889F454+EC5o ...
aAHrefSSA	db '<A HREF="%s">%s</A>',0 ; DATA XREF: sub_6889F454+FABo
aReceivedAnAuth	db 'Received an authorization request from UIN %u',0Ah,0
					; DATA XREF: sub_6889F454+F16o
		align 4
aTheUserUHasDen	db 'The user %u has denied your request to add them to your buddy lis'
					; DATA XREF: sub_6889F454+E5Do
		db 't for the following reason:',0Ah
		db '%s',0
aIcqAuthoriza_0	db 'ICQ authorization denied.',0 ; DATA XREF: sub_6889F454+E83o
		align 4
aTheUserUHasGra	db 'The user %u has granted your request to add them to your buddy li'
					; DATA XREF: sub_6889F454+D9Co
		db 'st.',0
aIcqAuthorizati	db 'ICQ authorization accepted.',0 ; DATA XREF: sub_6889F454+DD2o
		align 4
aYouHaveRecei_0	db 'You have received a special message',0Ah ; DATA XREF: sub_6889F454+D4Fo
		db 0Ah
		db 'From: %s [%s]',0Ah
		db '%s',0
aIcqServerMessa	db 'ICQ Server Message',0 ; DATA XREF: sub_6889F454+D8Do
		align 4
aYouHaveRecei_1	db 'You have received an ICQ page',0Ah ; DATA XREF: sub_6889F454+DF6o
		db 0Ah
		db 'From: %s [%s]',0Ah
		db '%s',0
aIcqPage	db 'ICQ Page',0         ; DATA XREF: sub_6889F454+E34o
		align 4
aYouHaveReceive	db 'You have received an ICQ email from %s [%s]',0Ah
					; DATA XREF: sub_6889F454+CC9o
		db 0Ah
		db 'Message is:',0Ah
		db '%s',0
aIcqEmail	db 'ICQ Email',0        ; DATA XREF: sub_6889F454+D07o
		align 4
aUnknownSyntaxP	db 'Unknown syntax parsing ICQ buddies.  args->msg=%s',0Ah,0
					; DATA XREF: sub_6889F454+10F8o
		align 10h
aIcqUserUHasSen	db 'ICQ user %u has sent you a buddy: %s (%s)',0
					; DATA XREF: sub_6889F454+B65o
a_decline	db '_Decline',0         ; DATA XREF: sub_6889F454+BCEo
a_add		db '_Add',0             ; DATA XREF: sub_6889F454+BE2o
aDoYouWantToAdd	db 'Do you want to add this buddy to your buddy list?',0
					; DATA XREF: sub_6889F454+C13o
; char aIcqsms[]
aIcqsms		db 'ICQSMS',0           ; DATA XREF: sub_6889F454+12CBo
aSender		db 'sender',0           ; DATA XREF: sub_6889F454+130Co
aText		db 'text',0             ; DATA XREF: sub_6889F454:loc_688A0782o
		align 10h
aReceivedACha_0	db 'Received a channel 4 message of unknown type (type 0x%02hhx).',0Ah,0
					; DATA XREF: sub_6889F454+7ABo
		align 10h
aIcbmReceivedOn	db 'ICBM received on unsupported channel (channel 0x%04hx).',0
					; DATA XREF: sub_6889F454+4Eo
aOdNull		db 'od != NULL',0       ; DATA XREF: sub_6889F454:loc_6889FD08o
aOdGcNull	db 'od->gc != NULL',0   ; DATA XREF: sub_6889F454:loc_6889F9B4o
		align 4
off_688B44B4	dd offset loc_6889FBFB	; DATA XREF: sub_6889F454+9CFr
		dd offset loc_688A044E	; jump table for switch	statement
		dd offset loc_6889FBFB
		dd offset loc_6889FBFB
		dd offset loc_688A03AF
		dd offset loc_6889FBFB
		dd offset loc_688A0308
		dd offset loc_688A0295
		dd offset loc_688A01EE
		dd offset loc_688A018C
		dd offset loc_6889FBFB
		dd offset loc_6889FBFB
		dd offset loc_6889FBFB
		dd offset loc_688A0233
		dd offset loc_688A0106
		dd offset loc_6889FBFB
		dd offset loc_6889FBFB
		dd offset loc_6889FBFB
		dd offset loc_6889FC14
		dd offset loc_6889FED4
		dd offset loc_6889FBFB
		dd offset loc_6889FBFB
		dd offset loc_6889FBFB
		dd offset loc_6889FBFB
		dd offset loc_6889FBFB
		dd offset loc_6889FBFB
		dd offset loc_6889FE2A
aDisconnected_C	db 'Disconnected.  Code is 0x%04x and msg is %s',0Ah,0
					; DATA XREF: sub_688A0938+3Bo
		align 10h
aYouHaveBeenDis	db 'You have been disconnected from chat room %s.',0
					; DATA XREF: sub_688A0938+A2o
aConnNull_0	db 'conn != NULL',0     ; DATA XREF: sub_688A0938:loc_688A0A4Co
aRegisteredHand	db 'Registered handlers: ',0 ; DATA XREF: oscar_login+7A4o
aOscar_loginGcP	db 'oscar_login: gc = %p',0Ah,0 ; DATA XREF: oscar_login+859o
a04x04x		db '%04x/%04x, ',0      ; DATA XREF: oscar_login+7FCo
		align 4
aUnableToSignOn	db 'Unable to sign on as %s because the username is invalid.  Usernam'
					; DATA XREF: oscar_login+A3Ao
		db 'es must be a valid email address, or start with a letter and cont'
		db 'ain only letters, numbers and spaces, or contain only numbers.',0
aPrplIcq	db 'prpl-icq',0         ; DATA XREF: oscar_login+899o
					; oscar_login+8C1o
		align 10h
aYouRequiredE_1	db 'You required encryption in your account settings, but encryption '
					; DATA XREF: oscar_login:loc_688A1720o
		db 'is not supported by your system.',0
aNo_encryptio_0	db 'no_encryption',0    ; DATA XREF: oscar_login+94Bo
					; .rdata:688B5528o
aPurpleAwayIdle	db '/purple/away/idle_reporting',0 ; DATA XREF: oscar_login+970o
					; sub_688A46F4+276o
aPluginsPrplOsc	db '/plugins/prpl/oscar/recent_buddies',0 ; DATA XREF: oscar_login+98Co
					; oscar_init+210o
aServer		db 'server',0           ; DATA XREF: oscar_login+AC5o
					; oscar_login+BB4o ...
aLogin_messagin	db 'login.messaging.aol.com',0 ; DATA XREF: oscar_login+BF2o
		align 10h
aAccountUsesSsl	db 'Account uses SSL, so changing server to default SSL server',0Ah,0
					; DATA XREF: oscar_login:loc_688A1678o
aAccountDoesNot	db 'Account does not use SSL, so changing server back to non-SSL',0Ah,0
					; DATA XREF: oscar_login:loc_688A174Do
aConnecting	db 'Connecting',0       ; DATA XREF: oscar_login:loc_688A144Co
aSignedOff_	db 'Signed off.',0Ah,0  ; DATA XREF: oscar_close+9Do
aSendingSmsToS_	db 'Sending SMS to %s.',0Ah,0 ; DATA XREF: oscar_send_im+798o
		align 4
aSendingDirectI	db 'Sending direct IM with flags %i',0Ah,0 ; DATA XREF: oscar_send_im+5DCo
aHtmlBody	db '<HTML><BODY>',0     ; DATA XREF: oscar_send_im+5F0o
aBinary_0	db '<BINARY>',0         ; DATA XREF: oscar_send_im+600o
aId_0		db 'id',0               ; DATA XREF: oscar_send_im:loc_688A22B1o
		align 4
aImgSrcSIdDData	db '<IMG SRC="%s" ID="%d" DATASIZE="%lu">',0 ; DATA XREF: oscar_send_im+64Co
aImgIdDDatasize	db '<IMG ID="%d" DATASIZE="%lu">',0 ; DATA XREF: oscar_send_im+77Bo
aDataIdDSizeLu	db '<DATA ID="%d" SIZE="%lu">',0 ; DATA XREF: oscar_send_im+66Co
aData_2		db '</DATA>',0          ; DATA XREF: oscar_send_im+68Co
aImg_1		db 'img',0              ; DATA XREF: oscar_send_im+6D3o
aBodyHtml	db '</BODY></HTML>',0   ; DATA XREF: oscar_send_im:loc_688A1F19o
aBinary_1	db '</BINARY>',0        ; DATA XREF: oscar_send_im+3F4o
		align 4
aSendingDirec_0	db 'sending direct IM %s using charset %i',0 ; DATA XREF: oscar_send_im+425o
; char aImg[]
aImg		db '<IMG ',0            ; DATA XREF: oscar_send_im+C9o
					; oscar_send_chat+78o
aYourImImageWas	db 'Your IM Image was not sent. You must be Direct Connected to send '
					; DATA XREF: oscar_send_im+EDo
		db 'IM Images.',0
aSendingBuddy_0	db 'Sending buddy icon request with message',0Ah,0
					; DATA XREF: oscar_send_im:loc_688A2157o
		align 4
aClaimingToHave	db 'Claiming to have a buddy icon',0Ah,0
					; DATA XREF: oscar_send_im:loc_688A1DE0o
aHtmlBodySBodyH	db '<HTML><BODY>%s</BODY></HTML>',0 ; DATA XREF: oscar_send_im+490o
aSendingSAsSBec	db 'Sending %s as %s because the original was too long.',0Ah,0
					; DATA XREF: oscar_send_im+55Co
					; oscar_send_chat+17Ao
		align 10h
aSendingImChars	db 'Sending IM, charset=0x%04hx, length=%u',0Ah,0
					; DATA XREF: oscar_send_im+2DCo
aSetStatusToS	db 'Set status to %s',0Ah,0 ; DATA XREF: oscar_set_status+25o
		align 4
aUnableToAddT_1	db 'Unable to add the buddy %s because the username is invalid.  User'
					; DATA XREF: oscar_add_buddy:loc_688A2720o
		db 'names must be a valid email address, or start with a letter and c'
		db 'ontain only letters, numbers and spaces, or contain only numbers.'
		db 0
aSsiAddingBud_1	db 'ssi: adding buddy %s to group %s',0Ah,0
					; DATA XREF: oscar_add_buddy+1F8o
		align 4
aSsiDeletingBud	db 'ssi: deleting buddy %s from group %s',0Ah,0
					; DATA XREF: oscar_remove_buddy+60o
		align 4
aSsiMovingBuddy	db 'ssi: moving buddy %s from group %s to group %s',0Ah,0
					; DATA XREF: oscar_move_buddy+68o
aNone_0		db '(none)',0           ; DATA XREF: oscar_alias_buddy:loc_688A2AD8o
		align 4
aSsiChangingThe	db 'ssi: changing the alias for buddy %s to %s',0Ah,0
					; DATA XREF: oscar_alias_buddy+6Eo
aSsiMovedAllBud	db 'ssi: moved all buddies from group %s to %s',0Ah,0
					; DATA XREF: oscar_rename_group+104o
aSsiRenamedGrou	db 'ssi: renamed group %s to %s',0Ah,0 ; DATA XREF: oscar_rename_group+14Co
a_room		db '_Room:',0           ; DATA XREF: oscar_chat_info+1Eo
a_exchange	db '_Exchange:',0       ; DATA XREF: oscar_chat_info+62o
		align 4
aChatnavExistsC	db 'chatnav exists, creating room',0Ah,0 ; DATA XREF: oscar_join_chat+10Ao
		align 4
aChatnavDoesNot	db 'chatnav does not exist, opening chatnav',0Ah,0
					; DATA XREF: oscar_join_chat+14Ao
aNameNullName0	db 'name != NULL && *name != ',27h,'\0',27h,0
					; DATA XREF: oscar_join_chat:loc_688A2ED4o
aExchangeNull	db 'exchange != NULL',0 ; DATA XREF: oscar_join_chat:loc_688A2FD0o
aErrno0		db 'errno == 0',0       ; DATA XREF: oscar_join_chat+89o
		align 10h
aAttemptingToJo	db 'Attempting to join chat room %s.',0Ah,0 ; DATA XREF: oscar_join_chat+E0o
aConvNull	db 'conv != NULL',0     ; DATA XREF: oscar_chat_leave:loc_688A3150o
aLeavingChatRoo	db 'Leaving chat room %s',0Ah,0 ; DATA XREF: oscar_chat_leave+3Bo
		align 4
aYourImImageW_0	db 'Your IM Image was not sent. You cannot send IM Images in AIM chat'
					; DATA XREF: oscar_send_chat+9Ao
		db 's.',0
aCouldNotSendSB	db 'Could not send %s because (%u > maxlen %i) or (%u > maxvis %i)',0Ah,0
					; DATA XREF: oscar_send_chat+209o
aNotAuthorized	db 'not-authorized',0   ; DATA XREF: oscar_list_emblem+120o
aAdmin_0	db 'admin',0            ; DATA XREF: oscar_list_emblem:loc_688A3580o
aBot		db 'bot',0              ; DATA XREF: oscar_list_emblem:loc_688A3560o
aSecure		db 'secure',0           ; DATA XREF: oscar_list_emblem:loc_688A35F4o
aBirthday	db 'birthday',0         ; DATA XREF: oscar_list_emblem+AEo
aHiptop		db 'hiptop',0           ; DATA XREF: oscar_list_emblem+142o
aNotAuthorize_0	db 'Not Authorized',0   ; DATA XREF: oscar_status_text:loc_688A3830o
aOffline	db 'Offline',0          ; DATA XREF: oscar_status_text+106o
aSsiAboutToAddA	db 'ssi: About to add a permit',0Ah,0 ; DATA XREF: oscar_add_permit+22o
aSsiAboutToAd_0	db 'ssi: About to add a deny',0Ah,0 ; DATA XREF: oscar_add_deny+22o
		align 4
aSsiAboutToDele	db 'ssi: About to delete a permit',0Ah,0 ; DATA XREF: oscar_rem_permit+22o
aSsiAboutToDe_0	db 'ssi: About to delete a deny',0Ah,0 ; DATA XREF: oscar_rem_deny+22o
aAccountNull	db 'account != NULL',0  ; DATA XREF: oscar_status_types:loc_688A428Co
aItunesMusicSto	db 'iTunes Music Store Link',0 ; DATA XREF: oscar_status_types+42o
aMessage_2	db 'Message',0          ; DATA XREF: oscar_status_types+66o
					; oscar_status_types+F6o ...
aLunch_0	db 'Lunch',0            ; DATA XREF: oscar_status_types+3BEo
aMoodComment	db 'Mood Comment',0     ; DATA XREF: oscar_status_types+74Ao
aMoodName	db 'Mood Name',0        ; DATA XREF: oscar_status_types+772o
aMoodtext_0	db 'moodtext',0         ; DATA XREF: oscar_status_types+79Ao
aMood_1		db 'mood',0             ; DATA XREF: oscar_status_types+7AAo
					; oscar_status_types+7CEo
aGetAimInfo	db 'Get AIM Info',0     ; DATA XREF: oscar_blist_node_menu+1E4o
aEditBuddyComme	db 'Edit Buddy Comment',0 ; DATA XREF: oscar_blist_node_menu+78o
aGetXStatusMsg	db 'Get X-Status Msg',0 ; DATA XREF: oscar_blist_node_menu:loc_688A44F4o
aEndDirectImSes	db 'End Direct IM Session',0 ; DATA XREF: oscar_blist_node_menu+2E6o
aDirectIm	db 'Direct IM',0        ; DATA XREF: oscar_blist_node_menu:loc_688A45F1o
aReRequestAutho	db 'Re-request Authorization',0 ; DATA XREF: oscar_blist_node_menu+170o
aMd5_0		db 'md5',0              ; DATA XREF: oscar_set_icon+48o
		align 4
aSsiSyncingLoca	db 'ssi: syncing local list and server list',0Ah,0
					; DATA XREF: sub_688A46F4:loc_688A474Bo
aServernick_0	db 'servernick',0       ; DATA XREF: sub_688A46F4:loc_688A4790o
aSsiRemovingBud	db 'ssi: removing buddy %s from local list',0Ah,0
					; DATA XREF: sub_688A46F4+152o
aSsiRemovingPer	db 'ssi: removing permit %s from local list',0Ah,0
					; DATA XREF: sub_688A46F4+6D6o
		align 4
aSsiRemovingDen	db 'ssi: removing deny %s from local list',0Ah,0
					; DATA XREF: sub_688A46F4+672o
		align 4
aSsiServerListC	db 'ssi: server list contains item of type 0x%04hx with a non-utf8 na'
					; DATA XREF: sub_688A46F4+648o
		db 'me',0Ah,0
		align 4
aSsiChangingPer	db 'ssi: changing permdeny from %d to %hhu',0Ah,0
					; DATA XREF: sub_688A46F4+4DAo
aSsiActivatingS	db 'ssi: activating server-stored buddy list',0Ah,0
					; DATA XREF: sub_688A46F4:loc_688A4AF7o
		align 10h
aSsiAddingPermi	db 'ssi: adding permit buddy %s to local list',0Ah,0
					; DATA XREF: sub_688A46F4+710o
		align 4
aSsiAddingDenyB	db 'ssi: adding deny buddy %s to local list',0Ah,0
					; DATA XREF: sub_688A46F4+764o
		align 4
off_688B5068	dd offset loc_688A4CC4	; DATA XREF: sub_688A46F4+2F2r
		dd offset loc_688A4C88	; jump table for switch	statement
		dd offset loc_688A4C40
		dd offset loc_688A4BF8
		dd offset loc_688A4B8C
		dd offset loc_688A4AD8
		dd offset loc_688A4AD8
		dd offset loc_688A4AD8
		dd offset loc_688A4AD8
		dd offset loc_688A4AD8
		dd offset loc_688A4AD8
		dd offset loc_688A4AD8
		dd offset loc_688A4AD8
		dd offset loc_688A4AD8
		dd offset loc_688A4BF8
aSetUserInfo___	db 'Set User Info...',0 ; DATA XREF: oscar_actions+1Eo
aSetUserInfoWeb	db 'Set User Info (web)...',0 ; DATA XREF: oscar_actions:loc_688A5424o
aChangePassword	db 'Change Password...',0 ; DATA XREF: oscar_actions:loc_688A518Fo
aChangePasswo_0	db 'Change Password (web)',0 ; DATA XREF: oscar_actions+A2o
aConfigureImFor	db 'Configure IM Forwarding (web)',0
					; DATA XREF: oscar_actions:loc_688A53ECo
aSetPrivacyOpti	db 'Set Privacy Options...',0 ; DATA XREF: oscar_actions:loc_688A5364o
aShowVisibleLis	db 'Show Visible List',0 ; DATA XREF: oscar_actions+266o
aShowInvisibleL	db 'Show Invisible List',0 ; DATA XREF: oscar_actions+298o
aConfirmAccount	db 'Confirm Account',0  ; DATA XREF: oscar_actions+FCo
aDisplayCurrent	db 'Display Currently Registered Email Address',0
					; DATA XREF: oscar_actions+12Eo
		align 4
aChangeCurrentl	db 'Change Currently Registered Email Address...',0
					; DATA XREF: oscar_actions+160o
		align 4
aShowBuddiesAwa	db 'Show Buddies Awaiting Authorization',0 ; DATA XREF: oscar_actions+1A2o
aSearchForBuddy	db 'Search for Buddy by Email Address...',0 ; DATA XREF: oscar_actions+1E4o
		align 4
aNormalizedStri	db 'normalized string exceeds buffer length!',0Ah,0
					; DATA XREF: oscar_normalize:loc_688A5690o
aStrNull	db 'str != NULL',0      ; DATA XREF: oscar_normalize:loc_688A56A8o
aUseEncryptionI	db 'Use encryption if available',0 ; DATA XREF: oscar_init+A9o
					; .rdata:off_688B5510o
aConnectionSecu	db 'Connection security',0 ; DATA XREF: oscar_init+10Eo
aUseClientlogin	db 'Use clientLogin',0  ; DATA XREF: oscar_init+148o
		align 10h
aAlwaysUseAimIc	db 'Always use AIM/ICQ proxy server for',0Ah ; DATA XREF: oscar_init+186o
		db 'file transfers and direct IM (slower,',0Ah
		db 'but does not reveal your IP address)',0
aAlways_use_rv_	db 'always_use_rv_proxy',0 ; DATA XREF: oscar_init+1A2o
aPrplAim	db 'prpl-aim',0         ; DATA XREF: oscar_init+1D0o
aAllowMultipleS	db 'Allow multiple simultaneous logins',0
					; DATA XREF: oscar_init:loc_688A5974o
aPluginsPrplO_0	db '/plugins/prpl/oscar',0 ; DATA XREF: oscar_init+1FCo
aPluginsPrplO_1	db '/plugins/prpl/oscar/show_idle',0 ; DATA XREF: oscar_init+21Co
		align 4
aPluginsPrplO_2	db '/plugins/prpl/oscar/always_use_rv_proxy',0 ; DATA XREF: oscar_init+228o
aUriHandler	db 'uri-handler',0      ; DATA XREF: oscar_init+251o
aServer_0	db 'Server',0           ; DATA XREF: oscar_init+31o
aPort_1		db 'Port',0             ; DATA XREF: oscar_init+6Bo
aLogin_oscar_ao	db 'login.oscar.aol.com',0 ; DATA XREF: .rdata:off_688B53ECo
aSlogin_oscar_a	db 'slogin.oscar.aol.com',0 ; DATA XREF: .rdata:688B53F0o
aLogin_icq_com	db 'login.icq.com',0    ; DATA XREF: .rdata:688B53F4o
aSlogin_icq_com	db 'slogin.icq.com',0   ; DATA XREF: .rdata:off_688B53F8o
		align 4
; char *off_688B53EC
off_688B53EC	dd offset aLogin_oscar_ao ; DATA XREF: oscar_login+ABAr
					; oscar_login+BD7r ...
					; "login.oscar.aol.com"
		dd offset aSlogin_oscar_a ; "slogin.oscar.aol.com"
		dd offset aLogin_icq_com ; "login.icq.com"
; char *off_688B53F8
off_688B53F8	dd offset aSlogin_icq_com ; DATA XREF: oscar_login+AE4r
					; oscar_login+BA9r ...
					; "slogin.icq.com"
aIncomingim_cha	db 'incomingim_chan2',0 ; DATA XREF: sub_6889F454+568o
					; sub_6889F454+8BCo
aPurple_parse_o	db 'purple_parse_oncoming',0 ; DATA XREF: sub_6889D79C+584o
					; sub_6889D79C+5A8o
aPurple_connerr	db 'purple_connerr',0   ; DATA XREF: sub_688A0938+11Co
aOscar_join_cha	db 'oscar_join_chat',0  ; DATA XREF: oscar_join_chat+91o
					; oscar_join_chat+B0o ...
aOscar_chat_lea	db 'oscar_chat_leave',0 ; DATA XREF: oscar_chat_leave+C4o
aOscar_status_t	db 'oscar_status_types',0 ; DATA XREF: oscar_status_types+818o
aOscar_ask_dire	db 'oscar_ask_directim',0 ; DATA XREF: sub_68899BD8+2Eo
aOscar_close_di	db 'oscar_close_directim',0 ; DATA XREF: .text:68899DF6o
aOscar_get_icqx	db 'oscar_get_icqxstatusmsg',0 ; DATA XREF: .text:6889F0D6o
aOscar_buddycb_	db 'oscar_buddycb_edit_comment',0 ; DATA XREF: sub_6889A038+2Eo
aOscar_get_aim_	db 'oscar_get_aim_info_cb',0 ; DATA XREF: .text:6889F199o
aOscar_normaliz	db 'oscar_normalize',0  ; DATA XREF: oscar_normalize+F4o
aRequireEncrypt	db 'Require encryption',0 ; DATA XREF: .rdata:688B5514o
aDonTUseEncrypt	db 'Don',27h,'t use encryption',0 ; DATA XREF: .rdata:688B5518o
		align 10h
off_688B5510	dd offset aUseEncryptionI ; DATA XREF: oscar_init+103r
					; "Use encryption if available"
		dd offset aRequireEncrypt ; "Require encryption"
		dd offset aDonTUseEncrypt ; "Don't use encryption"
		align 10h
off_688B5520	dd offset aOpportunisti_0 ; DATA XREF: oscar_init+E2r
					; "opportunistic_encryption"
		dd offset aRequire_encryp ; "require_encryption"
		dd offset aNo_encryptio_0 ; "no_encryption"
		align 10h
aRegisteredModu	db 'Registered modules: ',0 ; DATA XREF: oscar_data_new+192o
aS_0		db '%s',0Ah,0           ; DATA XREF: oscar_data_new+1EBo
aOscar_14	db 'oscar',0            ; DATA XREF: oscar_data_new+1F3o
		align 10h
aSFamily0x04xVe	db '%s (family=0x%04x, version=0x%04x, toolid=0x%04x, toolversion=0x%'
					; DATA XREF: oscar_data_new+1CEo
		db '04x), ',0
aAlways_use_r_0	db 'always_use_rv_proxy',0 ; DATA XREF: peer_connection_new+97o
aExpectingMagic	db 'Expecting magic string to be %c%c%c%c but received magic string %'
					; DATA XREF: peer_connection_recv_cb+224o
		db 'c%c%c%c.  Closing connection.',0Ah,0
aOscar_15	db 'oscar',0            ; DATA XREF: peer_connection_recv_cb+22Co
					; peer_connection_schedule_destroy+2Co	...
		align 4
aSchedulingDe_0	db 'Scheduling destruction of peer connection',0Ah,0
					; DATA XREF: peer_connection_schedule_destroy+24o
aArs_oscar_aol_	db 'ars.oscar.aol.com',0 ; DATA XREF: peer_connection_trynext:loc_688A6A24o
aArs_icq_com	db 'ars.icq.com',0      ; DATA XREF: peer_connection_trynext+201o
		align 10h
aAttemptingTo_0	db 'Attempting to connect to %s:%hu.',0
					; DATA XREF: peer_connection_trynext:loc_688A6A30o
aPidgin_7	db 'pidgin',0           ; DATA XREF: peer_connection_trynext+214o
					; peer_connection_trynext+2C8o	...
aAttemptingToCo	db 'Attempting to connect via proxy server.',0
					; DATA XREF: peer_connection_trynext:loc_688A697Co
aNull_1		db '(null)',0           ; DATA XREF: sub_688A6AF0:loc_688A6D80o
		align 4
aCanTAskPeerToC	db 'Can',27h,'t ask peer to connect to us because purple_network_ip_atoi'
					; DATA XREF: sub_688A6AF0+116o
		db '(%s) returned NULL. fd=%d. is_ssl=%d',0Ah,0
aAskingSToConne	db 'Asking %s to connect to us at %s:%hu for Direct IM.',0
					; DATA XREF: sub_688A6AF0+210o
aPeerConnection	db 'Peer connection timed out after 5 seconds.  Trying next method...'
					; DATA XREF: sub_688A6D8C+13o
		db 0Ah,0
		align 4
aAcceptingConne	db 'Accepting connection on listener socket.',0Ah,0
					; DATA XREF: peer_connection_listen_cb+1Bo
		align 10h
aAlreadyHaveADi	db 'Already have a direct IM session with %s.',0Ah,0
					; DATA XREF: peer_connection_propose+9Bo
		align 4
aRemoteUserWant	db 'Remote user wants to try a different connection method',0Ah,0
					; DATA XREF: peer_connection_got_proposition:loc_688A7650o
aReceivedNewDir	db 'Received new direct IM request from %s.  Destroying old connectio'
					; DATA XREF: peer_connection_got_proposition+33Co
		db 'n.',0Ah,0
		align 4
aSTriedToSend_0	db '%s tried to send you a file with incomplete information.',0Ah,0
					; DATA XREF: peer_connection_got_proposition+170o
		align 4
aSHasJustAskedT	db '%s has just asked to directly connect to %s',0
					; DATA XREF: peer_connection_got_proposition+43Ao
aCancel_0	db 'Cancel',0           ; DATA XREF: peer_connection_got_proposition+464o
aC_onnect_0	db 'C_onnect',0         ; DATA XREF: peer_connection_got_proposition+47Ao
aThisRequiresAD	db 'This requires a direct connection between the two computers and i'
					; DATA XREF: peer_connection_got_proposition+490o
		db 's necessary for IM Images.  Because your IP address will be revea'
		db 'led, this may be considered a privacy risk.',0
aIcq_cool_ft	db '<ICQ_COOL_FT>',0    ; DATA XREF: peer_connection_got_proposition+25Bo
aHtml_1		db '<HTML>',0           ; DATA XREF: peer_connection_got_proposition:loc_688A782Co
		align 4
aOutgoingPeerPr	db 'Outgoing peer proxy frame with type=0x%04hx, unknown=0x%08x, flag'
					; DATA XREF: sub_688A7868+34o
		db 's=0x%04hx, and payload length=%u',0Ah,0
aOscar_16	db 'oscar',0            ; DATA XREF: sub_688A7868+3Co
					; sub_688A795C+C4o ...
aBadRequest	db 'bad request',0      ; DATA XREF: sub_688A795C:loc_688A7D40o
aInitialRequest	db 'initial request timed out',0 ; DATA XREF: sub_688A795C:loc_688A7D4Ao
aAcceptPeriodTi	db 'accept period timed out',0 ; DATA XREF: sub_688A795C:loc_688A7DC5o
aUnknownReason	db 'unknown reason',0   ; DATA XREF: sub_688A795C+18Bo
		align 10h
aPeerProxyServe	db 'Peer proxy server closed connection',0Ah,0
					; DATA XREF: sub_688A795C:loc_688A7B18o
					; sub_688A795C:loc_688A7D1Co
		align 4
aLostConnecti_1	db 'Lost connection with peer proxy server',0Ah,0
					; DATA XREF: sub_688A795C+147o
					; sub_688A795C+2D3o
aExpectedPeerPr	db 'Expected peer proxy protocol version %u but received version %u. '
					; DATA XREF: sub_688A795C+274o
		db ' Closing connection.',0Ah,0
		align 4
aIncomingPeerPr	db 'Incoming peer proxy frame with type=0x%04hx, unknown=0x%08x, flag'
					; DATA XREF: sub_688A795C+BCo
		db 's=0x%04hx, and payload length=%u',0Ah,0
		align 4
aProxyNegotiati	db 'Proxy negotiation failed with error 0x%04hx: %s',0Ah,0
					; DATA XREF: sub_688A795C+19Bo
		align 10h
aProxyNegotia_0	db 'Proxy negotiation failed with an unknown error',0Ah,0
					; DATA XREF: sub_688A795C:loc_688A7BF4o
aUnknownPeerPro	db 'Unknown peer proxy frame type 0x%04hx.',0Ah,0
					; DATA XREF: sub_688A795C+F2o
aAHrefSSSA	db '<a href="%s%s">%s</a>',0 ; DATA XREF: sub_688A955C+62o
asc_688B5C0E	db ': ',0               ; DATA XREF: oscar_user_info_append_status+441o
					; oscar_user_info_append_status+58Do
byte_688B5C11	db 0			; DATA XREF: oscar_user_info_append_status:loc_688A97F8o
					; oscar_user_info_append_status:loc_688A97FDo ...
aMessage_3	db 'message',0          ; DATA XREF: oscar_user_info_append_status:loc_688A9B14o
aItmsurl_0	db 'itmsurl',0          ; DATA XREF: oscar_user_info_append_status+526o
aAHrefSSA_0	db '<a href="%s">%s</a>',0 ; DATA XREF: oscar_user_info_append_status+14Do
aSSS		db '%s%s%s',0           ; DATA XREF: oscar_user_info_append_status:loc_688A982Bo
aNotAuthorize_1	db 'Not Authorized',0   ; DATA XREF: oscar_user_info_append_status:loc_688A9A52o
aPidgin_8	db 'pidgin',0           ; DATA XREF: oscar_user_info_append_status+2A1o
					; oscar_user_info_append_status+2D3o ...
aOffline_1	db 'Offline',0          ; DATA XREF: oscar_user_info_append_status+568o
aMood_2		db 'mood',0             ; DATA XREF: oscar_user_info_append_status+23Fo
					; oscar_user_info_append_status+251o
aMoodtext_1	db 'moodtext',0         ; DATA XREF: oscar_user_info_append_status+273o
aSS_2		db '%s (%s)',0          ; DATA XREF: oscar_user_info_append_status+2B5o
aMood_3		db 'Mood',0             ; DATA XREF: oscar_user_info_append_status:loc_688A98D7o
aStatus		db 'Status',0           ; DATA XREF: oscar_user_info_append_status:loc_688A9907o
aU_U_U_U	db '%u.%u.%u.%u',0      ; DATA XREF: oscar_user_info_append_extra_info+220o
					; oscar_user_info_display_icq+724o
aIpAddress	db 'IP Address',0       ; DATA XREF: oscar_user_info_append_extra_info+230o
					; oscar_user_info_display_icq+732o
aD_0		db '%d',0               ; DATA XREF: oscar_user_info_append_extra_info+1BDo
aWarningLevel	db 'Warning Level',0    ; DATA XREF: oscar_user_info_append_extra_info+1CBo
aBuddyComment_0	db 'Buddy Comment',0    ; DATA XREF: oscar_user_info_append_extra_info+12Bo
		align 4
aUserInformatio	db 'User information not available: %s',0
					; DATA XREF: oscar_user_info_display_error+30o
aU_0		db '%u',0               ; DATA XREF: oscar_user_info_display_icq+62o
aUin		db 'UIN',0              ; DATA XREF: oscar_user_info_display_icq+C7o
					; oscar_user_info_display_icq:loc_688AA760o
aNick		db 'Nick',0             ; DATA XREF: oscar_user_info_display_icq+F2o
					; oscar_user_info_display_icq+7E3o
aFirstName	db 'First Name',0       ; DATA XREF: oscar_user_info_display_icq+134o
aLastName	db 'Last Name',0        ; DATA XREF: oscar_user_info_display_icq+15Fo
aEmailAddress	db 'Email Address',0    ; DATA XREF: oscar_user_info_display_icq+18Ao
					; oscar_user_info_display_icq+1DEo
aMailto		db 'mailto:',0          ; DATA XREF: oscar_user_info_display_icq+19Eo
					; oscar_user_info_display_icq+1F2o
aMobilePhone	db 'Mobile Phone',0     ; DATA XREF: oscar_user_info_display_icq+220o
aFemale		db 'Female',0           ; DATA XREF: oscar_user_info_display_icq:loc_688AA804o
aMale		db 'Male',0             ; DATA XREF: oscar_user_info_display_icq+257o
aGender		db 'Gender',0           ; DATA XREF: oscar_user_info_display_icq:loc_688AA215o
aBirthday_0	db 'Birthday',0         ; DATA XREF: oscar_user_info_display_icq+6D2o
; char aHhd[]
aHhd		db '%hhd',0             ; DATA XREF: oscar_user_info_display_icq+814o
aAge		db 'Age',0              ; DATA XREF: oscar_user_info_display_icq+830o
aPersonalWebPag	db 'Personal Web Page',0 ; DATA XREF: oscar_user_info_display_icq+2B0o
aAdditionalInfo	db 'Additional Information',0 ; DATA XREF: oscar_user_info_display_icq+313o
aHomeAddress	db 'Home Address',0     ; DATA XREF: oscar_user_info_display_icq:loc_688AA318o
aAddress	db 'Address',0          ; DATA XREF: oscar_user_info_display_icq+393o
					; oscar_user_info_display_icq+48Bo
aCity		db 'City',0             ; DATA XREF: oscar_user_info_display_icq+3BEo
					; oscar_user_info_display_icq+4B6o
aState		db 'State',0            ; DATA XREF: oscar_user_info_display_icq+3E9o
					; oscar_user_info_display_icq+4E1o
aZipCode	db 'Zip Code',0         ; DATA XREF: oscar_user_info_display_icq+414o
					; oscar_user_info_display_icq+50Co
aWorkAddress	db 'Work Address',0     ; DATA XREF: oscar_user_info_display_icq:loc_688AA410o
aWorkInformatio	db 'Work Information',0 ; DATA XREF: oscar_user_info_display_icq:loc_688AA508o
aCompany	db 'Company',0          ; DATA XREF: oscar_user_info_display_icq+583o
aDivision	db 'Division',0         ; DATA XREF: oscar_user_info_display_icq+5AEo
aPosition	db 'Position',0         ; DATA XREF: oscar_user_info_display_icq+5D9o
aWebPage	db 'Web Page',0         ; DATA XREF: oscar_user_info_display_icq+604o
asc_688B5DD3	db ', ',0               ; DATA XREF: oscar_user_info_display_aim:loc_688AABE4o
aHttpWww_icq__0	db 'http://www.icq.com/people',0
					; DATA XREF: oscar_user_info_display_aim:loc_688AAA2Co
aHttpProfiles_a	db 'http://profiles.aim.com',0 ; DATA XREF: oscar_user_info_display_aim+150o
aIdle		db 'Idle',0             ; DATA XREF: oscar_user_info_display_aim+45Bo
aOnlineSince	db 'Online Since',0     ; DATA XREF: oscar_user_info_display_aim+549o
aMemberSince	db 'Member Since',0     ; DATA XREF: oscar_user_info_display_aim+24Eo
aBuddyIcon	db 'Buddy Icon',0       ; DATA XREF: oscar_user_info_display_aim:loc_688AAE89o
aVoice		db 'Voice',0            ; DATA XREF: oscar_user_info_display_aim+3A6o
aAimDirectIm	db 'AIM Direct IM',0    ; DATA XREF: oscar_user_info_display_aim:loc_688AAEA2o
aChat_0		db 'Chat',0             ; DATA XREF: oscar_user_info_display_aim+7D9o
aGetFile	db 'Get File',0         ; DATA XREF: oscar_user_info_display_aim:loc_688AB016o
aSendFile	db 'Send File',0        ; DATA XREF: oscar_user_info_display_aim:loc_688AB02Fo
aGames		db 'Games',0            ; DATA XREF: oscar_user_info_display_aim:loc_688AACBBo
aIcqXtraz	db 'ICQ Xtraz',0        ; DATA XREF: oscar_user_info_display_aim:loc_688AAE70o
aAddIns		db 'Add-Ins',0          ; DATA XREF: oscar_user_info_display_aim:loc_688AAEBBo
aSendBuddyList	db 'Send Buddy List',0  ; DATA XREF: oscar_user_info_display_aim+5EEo
aIcqDirectConne	db 'ICQ Direct Connect',0 ; DATA XREF: oscar_user_info_display_aim+771o
aApUser		db 'AP User',0          ; DATA XREF: oscar_user_info_display_aim:loc_688AAFAEo
aIcqRtf		db 'ICQ RTF',0          ; DATA XREF: oscar_user_info_display_aim:loc_688AAFC7o
aNihilist	db 'Nihilist',0         ; DATA XREF: oscar_user_info_display_aim:loc_688AAAD4o
aIcqServerRelay	db 'ICQ Server Relay',0 ; DATA XREF: oscar_user_info_display_aim:loc_688AAED4o
aOldIcqUtf8	db 'Old ICQ UTF8',0     ; DATA XREF: oscar_user_info_display_aim+4F4o
aTrillianEncryp	db 'Trillian Encryption',0
					; DATA XREF: oscar_user_info_display_aim:loc_688AAD34o
aIcqUtf8	db 'ICQ UTF8',0         ; DATA XREF: oscar_user_info_display_aim+707o
aHiptop_0	db 'Hiptop',0           ; DATA XREF: oscar_user_info_display_aim:loc_688AAF44o
aSecurityEnable	db 'Security Enabled',0 ; DATA XREF: oscar_user_info_display_aim:loc_688AAF5Do
aVideoChat	db 'Video Chat',0       ; DATA XREF: oscar_user_info_display_aim+336o
aIchatAv	db 'iChat AV',0         ; DATA XREF: oscar_user_info_display_aim:loc_688AAEEDo
aLiveVideo	db 'Live Video',0       ; DATA XREF: oscar_user_info_display_aim+630o
aCamera		db 'Camera',0           ; DATA XREF: oscar_user_info_display_aim+42Co
aScreenSharing	db 'Screen Sharing',0   ; DATA XREF: oscar_user_info_display_aim+5A6o
aSS_3		db '%s%s',0             ; DATA XREF: oscar_user_info_display_aim+2E4o
aCapabilities	db 'Capabilities',0     ; DATA XREF: oscar_user_info_display_aim+3E6o
aProfile	db 'Profile',0          ; DATA XREF: oscar_user_info_display_aim+101o
aViewWebProfile	db 'View web profile',0 ; DATA XREF: oscar_user_info_display_aim:loc_688AA979o
aAHrefSSSA_0	db '<a href="%s/%s">%s</a>',0 ; DATA XREF: oscar_user_info_display_aim+189o
flt_688B5F7C	dd 10.0			; DATA XREF: oscar_user_info_append_extra_info:loc_688A9D70r
flt_688B5F80	dd 0.5			; DATA XREF: oscar_user_info_append_extra_info+19Br
		align 20h
aPidgin_9	db 'pidgin',0           ; DATA XREF: oscar_get_msgerr_reason+20o
					; oscar_get_msgerr_reason+47o
aUnknownReaso_0	db 'Unknown reason',0   ; DATA XREF: oscar_get_msgerr_reason+18o
aPurple		db 'Purple',0           ; DATA XREF: oscar_get_clientstring+Fo
aName		db 'name',0             ; DATA XREF: oscar_get_clientstring+17o
a2_10_11	db '2.10.11',0          ; DATA XREF: oscar_get_clientstring+25o
aVersion	db 'version',0          ; DATA XREF: oscar_get_clientstring+2Do
aSS_4		db '%s/%s',0            ; DATA XREF: oscar_get_clientstring+41o
aStrNull_0	db 'str != NULL',0      ; DATA XREF: oscar_util_format_string:loc_688AB674o
aNameNull	db 'name != NULL',0     ; DATA XREF: oscar_util_format_string:loc_688AB698o
aISI		db '<i>%s</i>',0        ; DATA XREF: oscar_format_buddies+BCo
byte_688B5FFB	db 0			; DATA XREF: oscar_format_buddies+23o
aS_1		db ' (%s)',0            ; DATA XREF: oscar_format_buddies+5Eo
aBr_0		db '<br>',0             ; DATA XREF: oscar_format_buddies:loc_688AB72Eo
aInvalidError_0	db 'Invalid error',0    ; DATA XREF: .rdata:off_688B6200o
aInvalidSnac	db 'Invalid SNAC',0     ; DATA XREF: .rdata:688B6204o
aServerRateLimi	db 'Server rate limit exceeded',0 ; DATA XREF: .rdata:688B6208o
aClientRateLimi	db 'Client rate limit exceeded',0 ; DATA XREF: .rdata:688B620Co
aNotLoggedIn_0	db 'Not logged in',0    ; DATA XREF: .rdata:688B6210o
aServiceUnavail	db 'Service unavailable',0 ; DATA XREF: .rdata:688B6214o
aServiceNotDefi	db 'Service not defined',0 ; DATA XREF: .rdata:688B6218o
aObsoleteSnac	db 'Obsolete SNAC',0    ; DATA XREF: .rdata:688B621Co
aNotSupportedBy	db 'Not supported by host',0 ; DATA XREF: .rdata:688B6220o
aNotSupported_0	db 'Not supported by client',0 ; DATA XREF: .rdata:688B6224o
aRefusedByClien	db 'Refused by client',0 ; DATA XREF: .rdata:688B6228o
aReplyTooBig	db 'Reply too big',0    ; DATA XREF: .rdata:688B622Co
aResponsesLost	db 'Responses lost',0   ; DATA XREF: .rdata:688B6230o
aRequestDenied	db 'Request denied',0   ; DATA XREF: .rdata:688B6234o
aBustedSnacPayl	db 'Busted SNAC payload',0 ; DATA XREF: .rdata:688B6238o
aInsufficientRi	db 'Insufficient rights',0 ; DATA XREF: .rdata:688B623Co
aInLocalPermitD	db 'In local permit/deny',0 ; DATA XREF: .rdata:688B6240o
		align 4
aWarningLevelTo	db 'Warning level too high (sender)',0 ; DATA XREF: .rdata:688B6244o
aWarningLevel_0	db 'Warning level too high (receiver)',0 ; DATA XREF: .rdata:688B6248o
aUserTemporaril	db 'User temporarily unavailable',0 ; DATA XREF: .rdata:688B624Co
aNoMatch	db 'No match',0         ; DATA XREF: .rdata:688B6250o
aListOverflow	db 'List overflow',0    ; DATA XREF: .rdata:688B6254o
aRequestAmbiguo	db 'Request ambiguous',0 ; DATA XREF: .rdata:688B6258o
aQueueFull	db 'Queue full',0       ; DATA XREF: .rdata:688B625Co
aNotWhileOnAol	db 'Not while on AOL',0 ; DATA XREF: .rdata:688B6260o
		align 20h
off_688B6200	dd offset aInvalidError_0 ; DATA XREF: oscar_get_msgerr_reason:loc_688AB08Cr
					; "Invalid error"
		dd offset aInvalidSnac	; "Invalid SNAC"
		dd offset aServerRateLimi ; "Server rate limit exceeded"
		dd offset aClientRateLimi ; "Client rate limit exceeded"
		dd offset aNotLoggedIn_0 ; "Not	logged in"
		dd offset aServiceUnavail ; "Service unavailable"
		dd offset aServiceNotDefi ; "Service not defined"
		dd offset aObsoleteSnac	; "Obsolete SNAC"
		dd offset aNotSupportedBy ; "Not supported by host"
		dd offset aNotSupported_0 ; "Not supported by client"
		dd offset aRefusedByClien ; "Refused by	client"
		dd offset aReplyTooBig	; "Reply too big"
		dd offset aResponsesLost ; "Responses lost"
		dd offset aRequestDenied ; "Request denied"
		dd offset aBustedSnacPayl ; "Busted SNAC payload"
		dd offset aInsufficientRi ; "Insufficient rights"
		dd offset aInLocalPermitD ; "In	local permit/deny"
		dd offset aWarningLevelTo ; "Warning level too high (sender)"
		dd offset aWarningLevel_0 ; "Warning level too high (receiver)"
		dd offset aUserTemporaril ; "User temporarily unavailable"
		dd offset aNoMatch	; "No match"
		dd offset aListOverflow	; "List	overflow"
		dd offset aRequestAmbiguo ; "Request ambiguous"
		dd offset aQueueFull	; "Queue full"
		dd offset aNotWhileOnAol ; "Not	while on AOL"
aOscar_util_for	db 'oscar_util_format_string',0 ; DATA XREF: oscar_util_format_string+194o
					; oscar_util_format_string+1B8o
		align 10h
aYouHaveNoBuddi	db 'you have no buddies on this list',0 ; DATA XREF: sub_688AB798+C8o
aPidgin_10	db 'pidgin',0           ; DATA XREF: sub_688AB798+D0o
					; sub_688AB798+FAo ...
aYouCanAddABudd	db 'You can add a buddy to this list by right-clicking on them and se'
					; DATA XREF: sub_688AB798+F2o
		db 'lecting "%s"',0
aInvisible_0	db 'invisible',0        ; DATA XREF: sub_688AB914+1Fo
					; .text:688AB9D0o ...
aDonTAppearOnli	db 'Don',27h,'t Appear Online',0
					; DATA XREF: create_visibility_menu_item+47o
aAppearOnline	db 'Appear Online',0    ; DATA XREF: create_visibility_menu_item:loc_688ABAECo
					; oscar_show_visible_list+15o
aDonTAppearOffl	db 'Don',27h,'t Appear Offline',0
					; DATA XREF: create_visibility_menu_item:loc_688ABAD4o
aAppearOffline	db 'Appear Offline',0   ; DATA XREF: create_visibility_menu_item+64o
					; oscar_show_invisible_list+15o
		align 4
aTheseBuddiesWi	db 'These buddies will see your status when you switch to "Invisible"'
					; DATA XREF: oscar_show_visible_list+2Bo
		db 0
aVisibleList	db 'Visible List',0     ; DATA XREF: oscar_show_visible_list+41o
		align 4
aTheseBuddies_0	db 'These buddies will always see you as offline',0
					; DATA XREF: oscar_show_invisible_list+2Bo
aInvisibleList	db 'Invisible List',0   ; DATA XREF: oscar_show_invisible_list+41o
off_688B63D4	dd offset TlsCallback_0	; DATA XREF: DllEntryPoint+84r
aMingwRuntimeFa	db 'Mingw runtime failure:',0Ah,0 ; DATA XREF: sub_688AC7B0+25o
; char aVirtualqueryFa[]
aVirtualqueryFa	db '  VirtualQuery failed for %d bytes at address %p',0
					; DATA XREF: sub_688AC810+102o
		align 4
; char aUnknownPseud_0[]
aUnknownPseud_0	db '  Unknown pseudo relocation protocol version %d.',0Ah,0
					; DATA XREF: sub_688AC920+1C8o
		align 4
; char aUnknownPseudoR[]
aUnknownPseudoR	db '  Unknown pseudo relocation bit size %d.',0Ah,0
					; DATA XREF: sub_688AC920+C0o
		align 4
		dd 2C95Eh
dword_688B6488	dd 0			; DATA XREF: sub_688AC920+15o
					; sub_688AC920+41r ...
dword_688B648C	dd 0			; DATA XREF: sub_688AC920+4Fr
dword_688B6490	dd 1			; DATA XREF: sub_688AC920+59r
dword_688B6494	dd 45CD0h, 129Fh, 20h, 45CD0h, 1388h, 20h, 45CD0h, 13ABh
					; DATA XREF: sub_688AC920+5Fo
		dd 20h,	45CD0h,	13E6h, 20h, 45CD0h, 1425h, 20h,	45CD0h
		dd 145Eh, 20h, 45CD0h, 148Ch, 20h, 45CD0h, 1536h, 20h
		dd 45CD0h, 160Eh, 20h, 45CD0h, 1647h, 20h, 45CD0h, 16A4h
		dd 20h,	45CD0h,	1732h, 20h, 45CD0h, 1756h, 20h,	45CD0h
		dd 1780h, 20h, 45CD0h, 17AAh, 20h, 45CD0h, 17CCh, 20h
		dd 45CD0h, 17EDh, 20h, 45CD0h, 17FDh, 20h, 45CD0h, 1820h
		dd 20h,	45CD0h,	1836h, 20h, 45CD0h, 184Ch, 20h,	45CD0h
		dd 1863h, 20h, 45CD0h, 1881h, 20h, 45CD0h, 1899h, 20h
		dd 45CD0h, 18D0h, 20h, 45CD0h, 18F4h, 20h, 45CD0h, 1913h
		dd 20h,	45CD0h,	1953h, 20h, 45CD0h, 1999h, 20h,	45CD0h
		dd 19BCh, 20h, 45CD0h, 19F9h, 20h, 45CD0h, 1A2Ch, 20h
		dd 45CD0h, 1A6Ah, 20h, 45CD0h, 1AB1h, 20h, 45CD0h, 1AEDh
		dd 20h,	45CD0h,	1B10h, 20h, 45CD0h, 1B4Dh, 20h,	45CD0h
		dd 1B80h, 20h, 45CD0h, 1BBFh, 20h, 45CD0h, 1C06h, 20h
		dd 45CD0h, 1C50h, 20h, 45CD0h, 1C77h, 20h, 45CD0h, 1CBCh
		dd 20h,	45CD0h,	1CECh, 20h, 45CD0h, 1D34h, 20h,	45CD0h
		dd 1D6Bh, 20h, 45CD0h, 1DB2h, 20h, 45CD0h, 1DD7h, 20h
		dd 45CD0h, 1E1Bh, 20h, 45CD0h, 1E55h, 20h, 45CD0h, 1E9Bh
		dd 20h,	45CD0h,	1EF0h, 20h, 45CD0h, 1F32h, 20h,	45CD0h
		dd 1F57h, 20h, 45CD0h, 1F9Ah, 20h, 45CD0h, 1FD2h, 20h
		dd 45CD0h, 2017h, 20h, 45CD0h, 206Ah, 20h, 45CD0h, 20B4h
		dd 20h,	45CD0h,	20DDh, 20h, 45CD0h, 211Dh, 20h,	45CD0h
		dd 214Dh, 20h, 45CD0h, 2175h, 20h, 45CD0h, 21D0h, 20h
		dd 45CD0h, 2211h, 20h, 45CD0h, 2240h, 20h, 45CD0h, 2270h
		dd 20h,	45CD0h,	22A7h, 20h, 45CD0h, 22F2h, 20h,	45CD0h
		dd 232Dh, 20h, 45CD0h, 2365h, 20h, 45CD0h, 23ECh, 20h
		dd 45CD0h, 245Eh, 20h, 45CD0h, 24CFh, 20h, 45CD0h, 256Fh
		dd 20h,	45CD0h,	25A8h, 20h, 45CD0h, 2620h, 20h,	45CD0h
		dd 2C40h, 20h, 45CD0h, 2CA8h, 20h, 45CD0h, 2EDEh, 20h
		dd 45CD0h, 300Eh, 20h, 45CD0h, 339Fh, 20h, 45CD0h, 3444h
		dd 20h,	45CD0h,	35E6h, 20h, 45CD0h, 3644h, 20h,	45CD0h
		dd 3740h, 20h, 45CD0h, 37D4h, 20h, 45CD0h, 3864h, 20h
		dd 45CD0h, 38D4h, 20h, 45CD0h, 3986h, 20h, 45CD0h, 3AF3h
		dd 20h,	45CD0h,	3B2Eh, 20h, 45CD0h, 3B90h, 20h,	45CD0h
		dd 3BA6h, 20h, 45CD0h, 3BE9h, 20h, 45CD0h, 3C9Fh, 20h
		dd 45CD0h, 3E9Ah, 20h, 45CD0h, 3F15h, 20h, 45CD0h, 3F7Fh
		dd 20h,	45CD0h,	3FABh, 20h, 45CD0h, 41C0h, 20h,	45CD0h
		dd 4211h, 20h, 45CD0h, 42ADh, 20h, 45CD0h, 42D4h, 20h
		dd 45CD0h, 439Eh, 20h, 45CD0h, 43D4h, 20h, 45CD0h, 44C1h
		dd 20h,	45CD0h,	44E8h, 20h, 45CD0h, 45B2h, 20h,	45CD0h
		dd 45CCh, 20h, 45CD0h, 4600h, 20h, 45CD0h, 4619h, 20h
		dd 45CD0h, 466Ah, 20h, 45CD0h, 4686h, 20h, 45CD0h, 46E8h
		dd 20h,	45CD0h,	472Ah, 20h, 45CD0h, 4743h, 20h,	45CD0h
		dd 49D3h, 20h, 45CD0h, 4B87h, 20h, 45CD0h, 4BABh, 20h
		dd 45CD0h, 4C9Fh, 20h, 45CD0h, 4CC1h, 20h, 45CD0h, 4D19h
		dd 20h,	45CD0h,	4D35h, 20h, 45CD0h, 4E07h, 20h,	45CD0h
		dd 4E26h, 20h, 45CD0h, 4E5Ch, 20h, 45CD0h, 4E88h, 20h
		dd 45CD0h, 4EBDh, 20h, 45CD0h, 53EFh, 20h, 45CD0h, 5754h
		dd 20h,	45CD0h,	57D8h, 20h, 45CD0h, 58E1h, 20h,	45CD0h
		dd 590Ch, 20h, 45CD0h, 59F1h, 20h, 45CD0h, 5A15h, 20h
		dd 45CD0h, 5A61h, 20h, 45CD0h, 5A9Fh, 20h, 45CD0h, 5AC5h
		dd 20h,	45CD0h,	5C19h, 20h, 45CD0h, 5C61h, 20h,	45CD0h
		dd 5D49h, 20h, 45CD0h, 5D8Fh, 20h, 45CD0h, 5F0Ah, 20h
		dd 45CD0h, 5F2Dh, 20h, 45CD0h, 5F7Eh, 20h, 45CD0h, 5FADh
		dd 20h,	45CD0h,	5FC6h, 20h, 45CD0h, 60E8h, 20h,	45CD0h
		dd 611Ch, 20h, 45CD0h, 6135h, 20h, 45CD0h, 6186h, 20h
		dd 45CD0h, 61C6h, 20h, 45CD0h, 61F7h, 20h, 45CD0h, 63ECh
		dd 20h,	45CD0h,	6420h, 20h, 45CD0h, 6439h, 20h,	45CD0h
		dd 648Ah, 20h, 45CD0h, 64A1h, 20h, 45CD0h, 64CAh, 20h
		dd 45CD0h, 64F2h, 20h, 45CD0h, 6540h, 20h, 45CD0h, 658Eh
		dd 20h,	45CD0h,	65C7h, 20h, 45CD0h, 6A89h, 20h,	45CD0h
		dd 6C8Bh, 20h, 45CD0h, 6CD9h, 20h, 45CD0h, 6D2Ah, 20h
		dd 45CD0h, 6D72h, 20h, 45CD0h, 6D9Eh, 20h, 45CD0h, 78BCh
		dd 20h,	45CD0h,	78F0h, 20h, 45CD0h, 7919h, 20h,	45CD0h
		dd 7A7Ch, 20h, 45CD0h, 7A99h, 20h, 45CD0h, 7AEAh, 20h
		dd 45CD0h, 7B05h, 20h, 45CD0h, 7BC4h, 20h, 45CD0h, 7BE1h
		dd 20h,	45CD0h,	7BF1h, 20h, 45CD0h, 7C0Ch, 20h,	45CD0h
		dd 7C60h, 20h, 45CD0h, 7C88h, 20h, 45CD0h, 7CEBh, 20h
		dd 45CD0h, 7D34h, 20h, 45CD0h, 7DFEh, 20h, 45CD0h, 7F36h
		dd 20h,	45CD0h,	7F61h, 20h, 45CD0h, 7F98h, 20h,	45CD0h
		dd 8034h, 20h, 45CD0h, 80DDh, 20h, 45CD0h, 81CEh, 20h
		dd 45CD0h, 8259h, 20h, 45CD0h, 8289h, 20h, 45CD0h, 82AEh
		dd 20h,	45CD0h,	82F8h, 20h, 45CD0h, 830Ch, 20h,	45CD0h
		dd 836Dh, 20h, 45CD0h, 8388h, 20h, 45CD0h, 83EBh, 20h
		dd 45CD0h, 8424h, 20h, 45CD0h, 8484h, 20h, 45CD0h, 84A8h
		dd 20h,	45CD0h,	84BCh, 20h, 45CD0h, 851Ch, 20h,	45CD0h
		dd 8540h, 20h, 45CD0h, 8554h, 20h, 45CD0h, 85AFh, 20h
		dd 45CD0h, 85D1h, 20h, 45CD0h, 8617h, 20h, 45CD0h, 863Ah
		dd 20h,	45CD0h,	8689h, 20h, 45CD0h, 86ADh, 20h,	45CD0h
		dd 86F3h, 20h, 45CD0h, 8715h, 20h, 45CD0h, 875Bh, 20h
		dd 45CD0h, 877Dh, 20h, 45CD0h, 87C3h, 20h, 45CD0h, 87E6h
		dd 20h,	45CD0h,	8A2Eh, 20h, 45CD0h, 8E4Ch, 20h,	45CD0h
		dd 8EDAh, 20h, 45CD0h, 9F73h, 20h, 45CD0h, 9FDAh, 20h
		dd 45CD0h, 0A06Fh, 20h,	45CD0h,	0A0A5h,	20h, 45CD0h, 0A182h
		dd 20h,	45CD0h,	0A228h,	20h, 45CD0h, 0A26Dh, 20h, 45CD0h
		dd 0A28Ch, 20h,	45CD0h,	0A2F9h,	20h, 45CD0h, 0A38Bh, 20h
		dd 45CD0h, 0A3BCh, 20h,	45CD0h,	0A414h,	20h, 45CD0h, 0A433h
		dd 20h,	45CD0h,	0A45Fh,	20h, 45CD0h, 0A4B9h, 20h, 45CD0h
		dd 0A4F3h, 20h,	45CD0h,	0A51Bh,	20h, 45CD0h, 0A575h, 20h
		dd 45CD0h, 0A5AFh, 20h,	45CD0h,	0A5CFh,	20h, 45CD0h, 0A64Fh
		dd 20h,	45CD0h,	0A66Fh,	20h, 45CD0h, 0A697h, 20h, 45CD0h
		dd 0A6E7h, 20h,	45CD0h,	0A707h,	20h, 45CD0h, 0A72Bh, 20h
		dd 45CD0h, 0A76Eh, 20h,	45CD0h,	0A78Bh,	20h, 45CD0h, 0A7B1h
		dd 20h,	45CD0h,	0A845h,	20h, 45CD0h, 0A86Fh, 20h, 45CD0h
		dd 0A8C1h, 20h,	45CD0h,	0A9DBh,	20h, 45CD0h, 0AAC8h, 20h
		dd 45CD0h, 0AB53h, 20h,	45CD0h,	0AB7Ch,	20h, 45CD0h, 0AD42h
		dd 20h,	45CD0h,	0AD88h,	20h, 45CD0h, 0ADB5h, 20h, 45CD0h
		dd 0AF0Dh, 20h,	45CD0h,	0AF9Dh,	20h, 45CD0h, 0B102h, 20h
		dd 45CD0h, 0B18Ch, 20h,	45CD0h,	0B1ACh,	20h, 45CD0h, 0B1CDh
		dd 20h,	45CD0h,	0B225h,	20h, 45CD0h, 0B241h, 20h, 45CD0h
		dd 0B251h, 20h,	45CD0h,	0B275h,	20h, 45CD0h, 0B285h, 20h
		dd 45CD0h, 0B2A9h, 20h,	45CD0h,	0B2B9h,	20h, 45CD0h, 0B2DDh
		dd 20h,	45CD0h,	0B2EDh,	20h, 45CD0h, 0B319h, 20h, 45CD0h
		dd 0B384h, 20h,	45CD0h,	0B3A2h,	20h, 45CD0h, 0B3E2h, 20h
		dd 45CD0h, 0B404h, 20h,	45CD0h,	0B50Eh,	20h, 45CD0h, 0B566h
		dd 20h,	45CD0h,	0B5CEh,	20h, 45CD0h, 0CCF5h, 20h, 45CD0h
		dd 0CD3Bh, 20h,	45CD0h,	0CD64h,	20h, 45CD0h, 0CF73h, 20h
		dd 45CD0h, 0D0C0h, 20h,	45CD0h,	0D3AFh,	20h, 45CD0h, 0D420h
		dd 20h,	45CD0h,	0D67Dh,	20h, 45CD0h, 0D6ABh, 20h, 45CD0h
		dd 0D87Ah, 20h,	45CD0h,	0D89Ch,	20h, 45CD0h, 0D9C8h, 20h
		dd 45CD0h, 0DA1Ch, 20h,	45CD0h,	0DC52h,	20h, 45CD0h, 0DCA8h
		dd 20h,	45CD0h,	0DF4Bh,	20h, 45CD0h, 0DFBEh, 20h, 45CD0h
		dd 0E2A6h, 20h,	45CD0h,	0E359h,	20h, 45CD0h, 0E6A1h, 20h
		dd 45CD0h, 0E6D9h, 20h,	45CD0h,	0E82Dh,	20h, 45CD0h, 0E85Ch
		dd 20h,	45CD0h,	0EA5Eh,	20h, 45CD0h, 0EAA9h, 20h, 45CD0h
		dd 0EAEFh, 20h,	45CD0h,	0EB2Ah,	20h, 45CD0h, 0EC67h, 20h
		dd 45CD0h, 0ECA2h, 20h,	45CD0h,	0EF82h,	20h, 45CD0h, 0EFC0h
		dd 20h,	45CD0h,	0F1C2h,	20h, 45CD0h, 0F1E5h, 20h, 45CD0h
		dd 0F236h, 20h,	45CD0h,	0F24Ch,	20h, 45CD0h, 0F26Ch, 20h
		dd 45CD0h, 0F284h, 20h,	45CD0h,	0F3E6h,	20h, 45CD0h, 0F402h
		dd 20h,	45CD0h,	0F432h,	20h, 45CD0h, 0F46Dh, 20h, 45CD0h
		dd 0F493h, 20h,	45CD0h,	10634h,	20h, 45CD0h, 107D1h, 20h
		dd 45CD0h, 10805h, 20h,	45CD0h,	10986h,	20h, 45CD0h, 109C0h
		dd 20h,	45CD0h,	10B4Dh,	20h, 45CD0h, 10B8Ch, 20h, 45CD0h
		dd 10D4Eh, 20h,	45CD0h,	10D99h,	20h, 45CD0h, 11080h, 20h
		dd 45CD0h, 110A9h, 20h,	45CD0h,	11101h,	20h, 45CD0h, 11122h
		dd 20h,	45CD0h,	111F6h,	20h, 45CD0h, 1121Bh, 20h, 45CD0h
		dd 1125Ch, 20h,	45CD0h,	11280h,	20h, 45CD0h, 11463h, 20h
		dd 45CD0h, 115EDh, 20h,	45CD0h,	116DFh,	20h, 45CD0h, 117B0h
		dd 20h,	45CD0h,	1189Fh,	20h, 45CD0h, 118F8h, 20h, 45CD0h
		dd 11960h, 20h,	45CD0h,	11985h,	20h, 45CD0h, 119FDh, 20h
		dd 45CD0h, 11A26h, 20h,	45CD0h,	11A68h,	20h, 45CD0h, 11AA1h
		dd 20h,	45CD0h,	11C3Bh,	20h, 45CD0h, 121C9h, 20h, 45CD0h
		dd 121F9h, 20h,	45CD0h,	125DDh,	20h, 45CD0h, 12623h, 20h
		dd 45CD0h, 12685h, 20h,	45CD0h,	128BAh,	20h, 45CD0h, 1292Ch
		dd 20h,	45CD0h,	12A4Dh,	20h, 45CD0h, 12A80h, 20h, 45CD0h
		dd 12B89h, 20h,	45CD0h,	12BADh,	20h, 45CD0h, 12C05h, 20h
		dd 45CD0h, 12C24h, 20h,	45CD0h,	12C74h,	20h, 45CD0h, 12C93h
		dd 20h,	45CD0h,	12CE2h,	20h, 45CD0h, 12D0Ch, 20h, 45CD0h
		dd 12D21h, 20h,	45CD0h,	12D44h,	20h, 45CD0h, 12E32h, 20h
		dd 45CD0h, 12E59h, 20h,	45CD0h,	12F2Eh,	20h, 45CD0h, 12F91h
		dd 20h,	45CD0h,	130F5h,	20h, 45CD0h, 13130h, 20h, 45CD0h
		dd 13164h, 20h,	45CD0h,	13184h,	20h, 45CD0h, 13226h, 20h
		dd 45CD0h, 13240h, 20h,	45CD0h,	13274h,	20h, 45CD0h, 13295h
		dd 20h,	45CD0h,	132DDh,	20h, 45CD0h, 13304h, 20h, 45CD0h
		dd 133D1h, 20h,	45CD0h,	13425h,	20h, 45CD0h, 134BFh, 20h
		dd 45CD0h, 141C6h, 20h,	45CD0h,	14360h,	20h, 45CD0h, 143C3h
		dd 20h,	45CD0h,	1457Ah,	20h, 45CD0h, 145FAh, 20h, 45CD0h
		dd 14732h, 20h,	45CD0h,	14885h,	20h, 45CD0h, 148D6h, 20h
		dd 45CD0h, 1490Bh, 20h,	45CD0h,	14924h,	20h, 45CD0h, 14A71h
		dd 20h,	45CD0h,	14AC2h,	20h, 45CD0h, 14AF1h, 20h, 45CD0h
		dd 14B0Ah, 20h,	45CD0h,	14B4Ch,	20h, 45CD0h, 14B79h, 20h
		dd 45CD0h, 14BCAh, 20h,	45CD0h,	14C17h,	20h, 45CD0h, 14C3Dh
		dd 20h,	45CD0h,	14E78h,	20h, 45CD0h, 14F3Fh, 20h, 45CD0h
		dd 14F65h, 20h,	45CD0h,	14FB6h,	20h, 45CD0h, 14FCFh, 20h
		dd 45CD0h, 14FF2h, 20h,	45CD0h,	15013h,	20h, 45CD0h, 15082h
		dd 20h,	45CD0h,	150ABh,	20h, 45CD0h, 15116h, 20h, 45CD0h
		dd 15131h, 20h,	45CD0h,	1517Ah,	20h, 45CD0h, 151DFh, 20h
		dd 45CD0h, 1521Ch, 20h,	45CD0h,	15296h,	20h, 45CD0h, 15442h
		dd 20h,	45CD0h,	1574Ah,	20h, 45CD0h, 15781h, 20h, 45CD0h
		dd 157A5h, 20h,	45CD0h,	157DEh,	20h, 45CD0h, 15801h, 20h
		dd 45CD0h, 15833h, 20h,	45CD0h,	1585Bh,	20h, 45CD0h, 15892h
		dd 20h,	45CD0h,	158ADh,	20h, 45CD0h, 158BDh, 20h, 45CD0h
		dd 158D9h, 20h,	45CD0h,	158E9h,	20h, 45CD0h, 1590Ch, 20h
		dd 45CD0h, 159DBh, 20h,	45CD0h,	15A95h,	20h, 45CD0h, 15B5Eh
		dd 20h,	45CD0h,	15BFCh,	20h, 45CD0h, 15DF4h, 20h, 45CD0h
		dd 15F27h, 20h,	45CD0h,	15F5Fh,	20h, 45CD0h, 15F8Ah, 20h
		dd 45CD0h, 15FB5h, 20h,	45CD0h,	1600Fh,	20h, 45CD0h, 160FAh
		dd 20h,	45CD0h,	162A7h,	20h, 45CD0h, 162EBh, 20h, 45CD0h
		dd 1630Eh, 20h,	45CD0h,	16404h,	20h, 45CD0h, 16429h, 20h
		dd 45CD0h, 164CCh, 20h,	45CD0h,	16519h,	20h, 45CD0h, 1664Dh
		dd 20h,	45CD0h,	166A5h,	20h, 45CD0h, 16735h, 20h, 45CD0h
		dd 16752h, 20h,	45CD0h,	16793h,	20h, 45CD0h, 167CCh, 20h
		dd 45CD0h, 167EDh, 20h,	45CD0h,	16825h,	20h, 45CD0h, 1691Bh
		dd 20h,	45CD0h,	16957h,	20h, 45CD0h, 16982h, 20h, 45CD0h
		dd 169DAh, 20h,	45CD0h,	16A0Eh,	20h, 45CD0h, 16AACh, 20h
		dd 45CD0h, 16AE1h, 20h,	45CD0h,	16B26h,	20h, 45CD0h, 16B4Ch
		dd 20h,	45CD0h,	16BA0h,	20h, 45CD0h, 16BCBh, 20h, 45CD0h
		dd 16BFBh, 20h,	45CD0h,	16C23h,	20h, 45CD0h, 16C6Ch, 20h
		dd 45CD0h, 16C8Eh, 20h,	45CD0h,	16CD9h,	20h, 45CD0h, 16D07h
		dd 20h,	45CD0h,	16D68h,	20h, 45CD0h, 16DA8h, 20h, 45CD0h
		dd 16F9Ah, 20h,	45CD0h,	16FC7h,	20h, 45CD0h, 1702Ah, 20h
		dd 45CD0h, 175FBh, 20h,	45CD0h,	17649h,	20h, 45CD0h, 1766Ah
		dd 20h,	45CD0h,	17765h,	20h, 45CD0h, 1779Dh, 20h, 45CD0h
		dd 177BFh, 20h,	45CD0h,	177FFh,	20h, 45CD0h, 17857h, 20h
		dd 45CD0h, 178DDh, 20h,	45CD0h,	17940h,	20h, 45CD0h, 17C14h
		dd 20h,	45CD0h,	17C4Eh,	20h, 45CD0h, 17CD7h, 20h, 45CD0h
		dd 17D10h, 20h,	45CD0h,	17D86h,	20h, 45CD0h, 17D9Fh, 20h
		dd 45CD0h, 17DEEh, 20h,	45CD0h,	17E1Ah,	20h, 45CD0h, 17EB5h
		dd 20h,	45CD0h,	17F04h,	20h, 45CD0h, 17F28h, 20h, 45CD0h
		dd 17F4Dh, 20h,	45CD0h,	17F68h,	20h, 45CD0h, 181A7h, 20h
		dd 45CD0h, 181C4h, 20h,	45CD0h,	18227h,	20h, 45CD0h, 18269h
		dd 20h,	45CD0h,	18290h,	20h, 45CD0h, 182D1h, 20h, 45CD0h
		dd 182F8h, 20h,	45CD0h,	18351h,	20h, 45CD0h, 1838Ah, 20h
		dd 45CD0h, 183B0h, 20h,	45CD0h,	18403h,	20h, 45CD0h, 1847Dh
		dd 20h,	45CD0h,	184BCh,	20h, 45CD0h, 184E9h, 20h, 45CD0h
		dd 18502h, 20h,	45CD0h,	18535h,	20h, 45CD0h, 18740h, 20h
		dd 45CD0h, 1893Ch, 20h,	45CD0h,	18957h,	20h, 45CD0h, 18975h
		dd 20h,	45CD0h,	189F2h,	20h, 45CD0h, 18A17h, 20h, 45CD0h
		dd 18A4Dh, 20h,	45CD0h,	18A6Bh,	20h, 45CD0h, 18B5Bh, 20h
		dd 45CD0h, 18B8Eh, 20h,	45CD0h,	18BE7h,	20h, 45CD0h, 18BFCh
		dd 20h,	45CD0h,	18C2Fh,	20h, 45CD0h, 18C4Dh, 20h, 45CD0h
		dd 18C6Dh, 20h,	45CD0h,	18CA0h,	20h, 45CD0h, 18E28h, 20h
		dd 45CD0h, 18F61h, 20h,	45CD0h,	18F7Ch,	20h, 45CD0h, 18F9Dh
		dd 20h,	45CD0h,	18FC3h,	20h, 45CD0h, 18FE4h, 20h, 45CD0h
		dd 19014h, 20h,	45CD0h,	19037h,	20h, 45CD0h, 1906Fh, 20h
		dd 45CD0h, 19094h, 20h,	45CD0h,	19194h,	20h, 45CD0h, 191B0h
		dd 20h,	45CD0h,	1927Dh,	20h, 45CD0h, 19299h, 20h, 45CD0h
		dd 192B5h, 20h,	45CD0h,	192DCh,	20h, 45CD0h, 1942Dh, 20h
		dd 45CD0h, 19462h, 20h,	45CD0h,	194A4h,	20h, 45CD0h, 194C8h
		dd 20h,	45CD0h,	194F1h,	20h, 45CD0h, 1953Ah, 20h, 45CD0h
		dd 1956Dh, 20h,	45CD0h,	195AEh,	20h, 45CD0h, 195E4h, 20h
		dd 45CD0h, 19783h, 20h,	45CD0h,	197A0h,	20h, 45CD0h, 198EEh
		dd 20h,	45CD0h,	1994Ch,	20h, 45CD0h, 19999h, 20h, 45CD0h
		dd 199BCh, 20h,	45CD0h,	19A59h,	20h, 45CD0h, 19A70h, 20h
		dd 45CD0h, 19A97h, 20h,	45CD0h,	19AACh,	20h, 45CD0h, 19AD3h
		dd 20h,	45CD0h,	19AEAh,	20h, 45CD0h, 19B46h, 20h, 45CD0h
		dd 19B64h, 20h,	45CD0h,	19B83h,	20h, 45CD0h, 19BA0h, 20h
		dd 45CD0h, 19BBFh, 20h,	45CD0h,	19BE7h,	20h, 45CD0h, 19C20h
		dd 20h,	45CD0h,	19D4Bh,	20h, 45CD0h, 19D75h, 20h, 45CD0h
		dd 19DB1h, 20h,	45CD0h,	19DD7h,	20h, 45CD0h, 19E10h, 20h
		dd 45CD0h, 19F00h, 20h,	45CD0h,	1A025h,	20h, 45CD0h, 1A047h
		dd 20h,	45CD0h,	1A080h,	20h, 45CD0h, 1A242h, 20h, 45CD0h
		dd 1A278h, 20h,	45CD0h,	1A2DAh,	20h, 45CD0h, 1A300h, 20h
		dd 45CD0h, 1A348h, 20h,	45CD0h,	1A36Fh,	20h, 45CD0h, 1A526h
		dd 20h,	45CD0h,	1A7DFh,	20h, 45CD0h, 1A833h, 20h, 45CD0h
		dd 1A899h, 20h,	45CD0h,	1A8D1h,	20h, 45CD0h, 1A8EEh, 20h
		dd 45CD0h, 1A9A8h, 20h,	45CD0h,	1AB32h,	20h, 45CD0h, 1AB6Fh
		dd 20h,	45CD0h,	1AB86h,	20h, 45CD0h, 1ABAAh, 20h, 45CD0h
		dd 1ABDFh, 20h,	45CD0h,	1AC01h,	20h, 45CD0h, 1AC29h, 20h
		dd 45CD0h, 1AC4Ah, 20h,	45CD0h,	1AC7Ah,	20h, 45CD0h, 1AC9Eh
		dd 20h,	45CD0h,	1ACBCh,	20h, 45CD0h, 1AD03h, 20h, 45CD0h
		dd 1AD26h, 20h,	45CD0h,	1AD42h,	20h, 45CD0h, 1ADBCh, 20h
		dd 45CD0h, 1ADD6h, 20h,	45CD0h,	1AE60h,	20h, 45CD0h, 1AE7Eh
		dd 20h,	45CD0h,	1AF18h,	20h, 45CD0h, 1AF3Fh, 20h, 45CD0h
		dd 1AFBEh, 20h,	45CD0h,	1AFDCh,	20h, 45CD0h, 1B0AAh, 20h
		dd 45CD0h, 1B170h, 20h,	45CD0h,	1B296h,	20h, 45CD0h, 1B310h
		dd 20h,	45CD0h,	1B4AEh,	20h, 45CD0h, 1B533h, 20h, 45CD0h
		dd 1B68Fh, 20h,	45CD0h,	1B750h,	20h, 45CD0h, 1B80Fh, 20h
		dd 45CD0h, 1B877h, 20h,	45CD0h,	1B8DCh,	20h, 45CD0h, 1B8FBh
		dd 20h,	45CD0h,	1B93Ch,	20h, 45CD0h, 1B959h, 20h, 45CD0h
		dd 1B9AFh, 20h,	45CD0h,	1BA84h,	20h, 45CD0h, 1BC7Bh, 20h
		dd 45CD0h, 1BD38h, 20h,	45CD0h,	1BE5Eh,	20h, 45CD0h, 1BEDEh
		dd 20h,	45CD0h,	1BF28h,	20h, 45CD0h, 1BF45h, 20h, 45CD0h
		dd 1C024h, 20h,	45CD0h,	1C04Ch,	20h, 45CD0h, 1C18Eh, 20h
		dd 45CD0h, 1C3CDh, 20h,	45CD0h,	1C48Fh,	20h, 45CD0h, 1C5B5h
		dd 20h,	45CD0h,	1C692h,	20h, 45CD0h, 1C787h, 20h, 45CD0h
		dd 1C7B6h, 20h,	45CD0h,	1C8CEh,	20h, 45CD0h, 1C9ECh, 20h
		dd 45CD0h, 1CA1Ah, 20h,	45CD0h,	1CA31h,	20h, 45CD0h, 1CA91h
		dd 20h,	45CD0h,	1CAFFh,	20h, 45CD0h, 1CB86h, 20h, 45CD0h
		dd 1CBBBh, 20h,	45CD0h,	1CC37h,	20h, 45CD0h, 1CC5Ch, 20h
		dd 45CD0h, 1CD66h, 20h,	45CD0h,	1CF0Bh,	20h, 45CD0h, 1CF4Ch
		dd 20h,	45CD0h,	1CFF8h,	20h, 45CD0h, 1D019h, 20h, 45CD0h
		dd 1D043h, 20h,	45CD0h,	1D086h,	20h, 45CD0h, 1D308h, 20h
		dd 45CD0h, 1D391h, 20h,	45CD0h,	1D3ACh,	20h, 45CD0h, 1D41Dh
		dd 20h,	45CD0h,	1D438h,	20h, 45CD0h, 1D4B9h, 20h, 45CD0h
		dd 1D4D8h, 20h,	45CD0h,	1D552h,	20h, 45CD0h, 1D570h, 20h
		dd 45CD0h, 1D60Ch, 20h,	45CD0h,	1D629h,	20h, 45CD0h, 1D6EAh
		dd 20h,	45CD0h,	1D7ACh,	20h, 45CD0h, 1DB53h, 20h, 45CD0h
		dd 1DEDCh, 20h,	45CD0h,	1E092h,	20h, 45CD0h, 1E2D5h, 20h
		dd 45CD0h, 1E2F1h, 20h,	45CD0h,	1E32Dh,	20h, 45CD0h, 1E433h
		dd 20h,	45CD0h,	1E46Dh,	20h, 45CD0h, 1E561h, 20h, 45CD0h
		dd 1E8ECh, 20h,	45CD0h,	1E97Bh,	20h, 45CD0h, 1EA71h, 20h
		dd 45CD0h, 1EAAFh, 20h,	45CD0h,	1EACFh,	20h, 45CD0h, 1EB37h
		dd 20h,	45CD0h,	1EE65h,	20h, 45CD0h, 1EF1Ah, 20h, 45CD0h
		dd 1F0B7h, 20h,	45CD0h,	1F0F0h,	20h, 45CD0h, 1F150h, 20h
		dd 45CD0h, 1F17Ah, 20h,	45CD0h,	1F1B3h,	20h, 45CD0h, 1F20Ch
		dd 20h,	45CD0h,	1F23Dh,	20h, 45CD0h, 1F418h, 20h, 45CD0h
		dd 1F431h, 20h,	45CD0h,	1F46Bh,	20h, 45CD0h, 1F4C1h, 20h
		dd 45CD0h, 20889h, 20h,	45CD0h,	208AEh,	20h, 45CD0h, 208D3h
		dd 20h,	45CD0h,	20926h,	20h, 45CD0h, 20944h, 20h, 45CD0h
		dd 209A1h, 20h,	45CD0h,	20A84h,	20h, 45CD0h, 21482h, 20h
		dd 45CD0h, 214EAh, 20h,	45CD0h,	217B3h,	20h, 45CD0h, 2185Fh
		dd 20h,	45CD0h,	218B0h,	20h, 45CD0h, 2198Bh, 20h, 45CD0h
		dd 21A16h, 20h,	45CD0h,	21A53h,	20h, 45CD0h, 21A7Ch, 20h
		dd 45CD0h, 21AEAh, 20h,	45CD0h,	21BD8h,	20h, 45CD0h, 21ED2h
		dd 20h,	45CD0h,	22446h,	20h, 45CD0h, 2248Bh, 20h, 45CD0h
		dd 2249Eh, 20h,	45CD0h,	224C5h,	20h, 45CD0h, 224E1h, 20h
		dd 45CD0h, 2250Ah, 20h,	45CD0h,	22530h,	20h, 45CD0h, 2256Bh
		dd 20h,	45CD0h,	225BFh,	20h, 45CD0h, 22604h, 20h, 45CD0h
		dd 22678h, 20h,	45CD0h,	226D7h,	20h, 45CD0h, 226F2h, 20h
		dd 45CD0h, 2276Ch, 20h,	45CD0h,	22907h,	20h, 45CD0h, 2292Fh
		dd 20h,	45CD0h,	22972h,	20h, 45CD0h, 229A8h, 20h, 45CD0h
		dd 229E0h, 20h,	45CD0h,	22A16h,	20h, 45CD0h, 22A50h, 20h
		dd 45CD0h, 22A78h, 20h,	45CD0h,	22B00h,	20h, 45CD0h, 22B24h
		dd 20h,	45CD0h,	22BD6h,	20h, 45CD0h, 22C1Eh, 20h, 45CD0h
		dd 22C52h, 20h,	45CD0h,	22C78h,	20h, 45CD0h, 22C9Eh, 20h
		dd 45CD0h, 22D45h, 20h,	45CD0h,	22D62h,	20h, 45CD0h, 22DDAh
		dd 20h,	45CD0h,	22DF0h,	20h, 45CD0h, 22E14h, 20h, 45CD0h
		dd 22E38h, 20h,	45CD0h,	22EF6h,	20h, 45CD0h, 22FB0h, 20h
		dd 45CD0h, 23010h, 20h,	45CD0h,	2307Ah,	20h, 45CD0h, 2309Fh
		dd 20h,	45CD0h,	23137h,	20h, 45CD0h, 23172h, 20h, 45CD0h
		dd 2319Ch, 20h,	45CD0h,	2336Bh,	20h, 45CD0h, 233C9h, 20h
		dd 45CD0h, 233D9h, 20h,	45CD0h,	233FAh,	20h, 45CD0h, 2342Dh
		dd 20h,	45CD0h,	23452h,	20h, 45CD0h, 23485h, 20h, 45CD0h
		dd 234B4h, 20h,	45CD0h,	2356Bh,	20h, 45CD0h, 23628h, 20h
		dd 45CD0h, 23650h, 20h,	45CD0h,	23704h,	20h, 45CD0h, 237B4h
		dd 20h,	45CD0h,	23818h,	20h, 45CD0h, 2384Ah, 20h, 45CD0h
		dd 23872h, 20h,	45CD0h,	2389Ah,	20h, 45CD0h, 238D1h, 20h
		dd 45CD0h, 238EEh, 20h,	45CD0h,	23934h,	20h, 45CD0h, 23952h
		dd 20h,	45CD0h,	2399Fh,	20h, 45CD0h, 239BAh, 20h, 45CD0h
		dd 23A00h, 20h,	45CD0h,	23A1Eh,	20h, 45CD0h, 23A6Bh, 20h
		dd 45CD0h, 23A8Ch, 20h,	45CD0h,	24270h,	20h, 45CD0h, 242B0h
		dd 20h,	45CD0h,	242D0h,	20h, 45CD0h, 243DCh, 20h, 45CD0h
		dd 24484h, 20h,	45CD0h,	24638h,	20h, 45CD0h, 246D4h, 20h
		dd 45CD0h, 24708h, 20h,	45CD0h,	24B7Ah,	20h, 45CD0h, 24F73h
		dd 20h,	45CD0h,	24FD4h,	20h, 45CD0h, 24FF7h, 20h, 45CD0h
		dd 250B3h, 20h,	45CD0h,	250D1h,	20h, 45CD0h, 250F9h, 20h
		dd 45CD0h, 25116h, 20h,	45CD0h,	25136h,	20h, 45CD0h, 2534Ah
		dd 20h,	45CD0h,	2546Fh,	20h, 45CD0h, 254BCh, 20h, 45CD0h
		dd 254D2h, 20h,	45CD0h,	2550Fh,	20h, 45CD0h, 2553Dh, 20h
		dd 45CD0h, 25598h, 20h,	45CD0h,	255C7h,	20h, 45CD0h, 25683h
		dd 20h,	45CD0h,	256D8h,	20h, 45CD0h, 256EAh, 20h, 45CD0h
		dd 2570Ch, 20h,	45CD0h,	25963h,	20h, 45CD0h, 259C3h, 20h
		dd 45CD0h, 25BD3h, 20h,	45CD0h,	25BF1h,	20h, 45CD0h, 25CEBh
		dd 20h,	45CD0h,	25D33h,	20h, 45CD0h, 25D6Dh, 20h, 45CD0h
		dd 25DAEh, 20h,	45CD0h,	25DE4h,	20h, 45CD0h, 25DFFh, 20h
		dd 45CD0h, 25F06h, 20h,	45CD0h,	25F96h,	20h, 45CD0h, 26084h
		dd 20h,	45CD0h,	260D8h,	20h, 45CD0h, 2612Ch, 20h, 45CD0h
		dd 26158h, 20h,	45CD0h,	261B3h,	20h, 45CD0h, 261ECh, 20h
		dd 45CD0h, 262B7h, 20h,	45CD0h,	262F7h,	20h, 45CD0h, 2632Fh
		dd 20h,	45CD0h,	26355h,	20h, 45CD0h, 2639Dh, 20h, 45CD0h
		dd 263BAh, 20h,	45CD0h,	26421h,	20h, 45CD0h, 26460h, 20h
		dd 45CD0h, 2647Eh, 20h,	45CD0h,	265EEh,	20h, 45CD0h, 2664Bh
		dd 20h,	45CD0h,	266AAh,	20h, 45CD0h, 266C5h, 20h, 45CD0h
		dd 26716h, 20h,	45CD0h,	2672Ah,	20h, 45CD0h, 2677Ch, 20h
		dd 45CD0h, 26862h, 20h,	45CD0h,	26AC5h,	20h, 45CD0h, 26AD9h
		dd 20h,	45CD0h,	26B00h,	20h, 45CD0h, 26BCCh, 20h, 45CD0h
		dd 26C20h, 20h,	45CD0h,	26C32h,	20h, 45CD0h, 26D5Ch, 20h
		dd 45CD0h, 26D95h, 20h,	45CD0h,	26DC3h,	20h, 45CD0h, 26DDEh
		dd 20h,	45CD0h,	26E46h,	20h, 45CD0h, 26E89h, 20h, 45CD0h
		dd 26E99h, 20h,	45CD0h,	26EBDh,	20h, 45CD0h, 26ECDh, 20h
		dd 45CD0h, 26EF1h, 20h,	45CD0h,	26F5Ah,	20h, 45CD0h, 26FB9h
		dd 20h,	45CD0h,	27029h,	20h, 45CD0h, 27079h, 20h, 45CD0h
		dd 270D2h, 20h,	45CD0h,	27122h,	20h, 45CD0h, 27197h, 20h
		dd 45CD0h, 271C0h, 20h,	45CD0h,	271FEh,	20h, 45CD0h, 27280h
		dd 20h,	45CD0h,	272BEh,	20h, 45CD0h, 27300h, 20h, 45CD0h
		dd 273FCh, 20h,	45CD0h,	2742Fh,	20h, 45CD0h, 275BFh, 20h
		dd 45CD0h, 276E2h, 20h,	45CD0h,	27874h,	20h, 45CD0h, 27947h
		dd 20h,	45CD0h,	27968h,	20h, 45CD0h, 279D6h, 20h, 45CD0h
		dd 27E35h, 20h,	45CD0h,	27F75h,	20h, 45CD0h, 28024h, 20h
		dd 45CD0h, 2804Eh, 20h,	45CD0h,	2806Ah,	20h, 45CD0h, 280A6h
		dd 20h,	45CD0h,	280C7h,	20h, 45CD0h, 28117h, 20h, 45CD0h
		dd 2815Bh, 20h,	45CD0h,	2819Ah,	20h, 45CD0h, 281B4h, 20h
		dd 45CD0h, 281D4h, 20h,	45CD0h,	281F3h,	20h, 45CD0h, 2823Bh
		dd 20h,	45CD0h,	28265h,	20h, 45CD0h, 282BDh, 20h, 45CD0h
		dd 282EEh, 20h,	45CD0h,	28323h,	20h, 45CD0h, 28380h, 20h
		dd 45CD0h, 283D2h, 20h,	45CD0h,	28422h,	20h, 45CD0h, 2846Bh
		dd 20h,	45CD0h,	2848Ah,	20h, 45CD0h, 284C5h, 20h, 45CD0h
		dd 284E4h, 20h,	45CD0h,	2854Ah,	20h, 45CD0h, 285B3h, 20h
		dd 45CD0h, 285F3h, 20h,	45CD0h,	28610h,	20h, 45CD0h, 28633h
		dd 20h,	45CD0h,	2866Bh,	20h, 45CD0h, 28688h, 20h, 45CD0h
		dd 286A6h, 20h,	45CD0h,	286D5h,	20h, 45CD0h, 286F4h, 20h
		dd 45CD0h, 28710h, 20h,	45CD0h,	2872Eh,	20h, 45CD0h, 2874Ch
		dd 20h,	45CD0h,	28773h,	20h, 45CD0h, 287A8h, 20h, 45CD0h
		dd 287F9h, 20h,	45CD0h,	28836h,	20h, 45CD0h, 28881h, 20h
		dd 45CD0h, 288A1h, 20h,	45CD0h,	288D9h,	20h, 45CD0h, 288F6h
		dd 20h,	45CD0h,	28934h,	20h, 45CD0h, 28952h, 20h, 45CD0h
		dd 289A1h, 20h,	45CD0h,	289BFh,	20h, 45CD0h, 289F9h, 20h
		dd 45CD0h, 28A2Eh, 20h,	45CD0h,	28A46h,	20h, 45CD0h, 28B3Fh
		dd 20h,	45CD0h,	28BF6h,	20h, 45CD0h, 28C16h, 20h, 45CD0h
		dd 28C46h, 20h,	45CD0h,	28C71h,	20h, 45CD0h, 28CBDh, 20h
		dd 45CD0h, 28CD2h, 20h,	45CD0h,	28D27h,	20h, 45CD0h, 28D61h
		dd 20h,	45CD0h,	28D7Eh,	20h, 45CD0h, 28DAEh, 20h, 45CD0h
		dd 28DC9h, 20h,	45CD0h,	28E01h,	20h, 45CD0h, 28E1Eh, 20h
		dd 45CD0h, 28E6Dh, 20h,	45CD0h,	28E8Ch,	20h, 45CD0h, 28EE6h
		dd 20h,	45CD0h,	28F0Bh,	20h, 45CD0h, 28FA2h, 20h, 45CD0h
		dd 28FDCh, 20h,	45CD0h,	2905Dh,	20h, 45CD0h, 2908Fh, 20h
		dd 45CD0h, 290E4h, 20h,	45CD0h,	291DAh,	20h, 45CD0h, 2920Ah
		dd 20h,	45CD0h,	29237h,	20h, 45CD0h, 29277h, 20h, 45CD0h
		dd 29293h, 20h,	45CD0h,	292C1h,	20h, 45CD0h, 292E7h, 20h
		dd 45CD0h, 29319h, 20h,	45CD0h,	29338h,	20h, 45CD0h, 2935Fh
		dd 20h,	45CD0h,	29396h,	20h, 45CD0h, 293BFh, 20h, 45CD0h
		dd 29400h, 20h,	45CD0h,	2942Bh,	20h, 45CD0h, 2947Eh, 20h
		dd 45CD0h, 2949Ah, 20h,	45CD0h,	294C3h,	20h, 45CD0h, 294E4h
		dd 20h,	45CD0h,	294FDh,	20h, 45CD0h, 29540h, 20h, 45CD0h
		dd 29571h, 20h,	45CD0h,	2958Ah,	20h, 45CD0h, 295EEh, 20h
		dd 45CD0h, 29630h, 20h,	45CD0h,	29935h,	20h, 45CD0h, 29BB2h
		dd 20h,	45CD0h,	29BFCh,	20h, 45CD0h, 29D3Bh, 20h, 45CD0h
		dd 29D5Eh, 20h,	45CD0h,	29EB5h,	20h, 45CD0h, 29F8Dh, 20h
		dd 45CD0h, 29FBEh, 20h,	45CD0h,	29FE8h,	20h, 45CD0h, 2A830h
		dd 20h,	45CD0h,	2AA17h,	20h, 45CD0h, 2B059h, 20h, 45CD0h
		dd 2B082h, 20h,	45CD0h,	2B0BAh,	20h, 45CD0h, 2B0F5h, 20h
		dd 45CD0h, 2B11Eh, 20h,	45CD0h,	2B147h,	20h, 45CD0h, 2B165h
		dd 20h,	45CD0h,	2B1B3h,	20h, 45CD0h, 2B1D9h, 20h, 45CD0h
		dd 2B231h, 20h,	45CD0h,	2B255h,	20h, 45CD0h, 2B28Fh, 20h
		dd 45CD0h, 2B2B1h, 20h,	45CD0h,	2B2C8h,	20h, 45CD0h, 2B314h
		dd 20h,	45CD0h,	2B353h,	20h, 45CD0h, 2B463h, 20h, 45CD0h
		dd 2B4C8h, 20h,	45CD0h,	2B4F8h,	20h, 45CD0h, 2B5D6h, 20h
		dd 45CD0h, 2B6D1h, 20h,	45CD0h,	2B74Bh,	20h, 45CD0h, 2B772h
		dd 20h,	45CD0h,	2B7BCh,	20h, 45CD0h, 2B8F2h, 20h, 45CD0h
		dd 2B91Eh, 20h,	45CD0h,	2B979h,	20h, 45CD0h, 2B997h, 20h
		dd 45CD0h, 2BA0Dh, 20h,	45CD0h,	2BA37h,	20h, 45CD0h, 2BAC6h
		dd 20h,	45CD0h,	2BB13h,	20h, 45CD0h, 2BB7Bh, 20h, 45CD0h
		dd 2BB9Bh, 20h,	45CD0h,	2BC03h,	20h
dword_688B9608	dd 7Eh dup(0)		; DATA XREF: sub_688AC920:loc_688AC930o
					; sub_688AC920+80o ...
		align 1000h
_rdata		ends

; Section 4. (virtual address 0003A000)
; Virtual size			: 00006D28 (  27944.)
; Section size in file		: 00006E00 (  28160.)
; Offset to raw	data for section: 00038000
; Flags	40300040: Data Readable
; Alignment	: 4 bytes
; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_eh_frame	segment	dword public 'DATA' use32
		assume cs:_eh_frame
		;org 688BA000h
		dd 14h,	0
		dd 527A01h, 1087C01h, 4040C1Bh,	188h, 20h, 1Ch,	0FFFC6FE0h
		dd 53h,	80E4100h, 0E430283h, 0E4D0220h,	0EC34108h, 4, 34h
		dd 40h,	0FFFC701Ch, 0F2h, 300E4300h, 48048344h,	87480386h
		dd 240E5902h, 6E300E43h, 0C3C6C70Ah, 0B43040Eh,	43240E7Ah
		dd 0E5E300Eh, 300E4324h, 14h, 78h, 0FFFC70E4h, 28h, 200E4300h
		dd 40E64h, 14h,	90h, 0FFFC70FCh, 23h, 200E4300h, 40E5Fh
dword_688BA0A4	dd 14h,	0		; DATA XREF: sub_688811C0+36o
					; sub_6888124C+2Eo
		dd 527A01h, 1087C01h, 4040C1Bh,	188h, 20h, 1Ch,	0FFFC70FCh
		dd 8Bh,	80E4100h, 0D420285h, 0A780205h,	4040CC5h, 0B41h
		dd 20h,	40h, 0FFFC7164h, 43h, 80E4100h,	0D420285h, 0C50A7505h
		dd 4404040Ch, 0Bh, 14h,	0
		dd 527A01h, 1087C01h, 4040C1Bh,	188h, 3Ch, 1Ch,	0FFFC716Ch
		dd 10Bh, 80E4100h, 0E410285h, 4103870Ch, 486100Eh, 83140E41h
		dd 800E4305h, 0AFA0201h, 0C341140Eh, 0C641100Eh, 0C7410C0Eh
		dd 0C541080Eh, 0B41040Eh, 34h, 5Ch, 0FFFC7238h,	7Dh, 80E4100h
		dd 0E410287h, 4103860Ch, 483100Eh, 2300E43h, 100E0A51h
		dd 0C0EC341h, 80EC641h,	40EC741h, 0B46h, 20h, 94h, 0FFFC7280h
		dd 5Ah,	80E4100h, 0E430283h, 0A4B0230h,	0C341080Eh, 0B45040Eh
		dd 3Ch,	0B8h, 0FFFC72B8h, 18Ch,	80E4100h, 0E410285h, 4103870Ch
		dd 486100Eh, 83140E41h,	600E4305h, 0E0AC402h, 0EC34114h
		dd 0EC64110h, 0EC7410Ch, 0EC54108h, 0B4104h, 2Ch, 0F8h
		dd 0FFFC7404h, 85h, 80E4100h, 0E410286h, 4303830Ch, 4702300Eh
		dd 410C0E0Ah, 41080EC3h, 42040EC6h, 0Bh, 3Ch, 128h, 0FFFC745Ch
		dd 0B9h, 80E4100h, 0E410285h, 4103870Ch, 486100Eh, 83140E41h
		dd 700E4305h, 0E0AA802h, 0EC34114h, 0EC64110h, 0EC7410Ch
		dd 0EC54108h, 0B4104h, 14h, 0
		dd 527A01h, 1087C01h, 4040C1Bh,	188h, 28h, 1Ch,	0FFFC74C0h
		dd 50h,	80E4100h, 0E410286h, 4303830Ch,	0A7C300Eh, 0C3410C0Eh
		dd 0C641080Eh, 0B41040Eh, 20h, 48h, 0FFFC74E4h,	4Bh, 80E4100h
		dd 0E430283h, 0E0A7920h, 0EC34108h, 0B4104h, 18h, 6Ch
		dd 0FFFC750Ch, 32h, 200E4300h, 40E0A65h, 0B45h,	18h, 88h
		dd 0FFFC7524h, 2Dh, 200E4300h, 40E0A64h, 0B41h,	18h, 0A4h
		dd 0FFFC7538h, 2Ah, 200E4300h, 40E0A61h, 0B41h,	18h, 0C0h
		dd 0FFFC7548h, 58h, 300E4300h, 40E0A6Bh, 0B42h,	18h, 0DCh
		dd 0FFFC7584h, 37h, 300E4300h, 40E0A6Eh, 0B41h,	2Ch, 0F8h
		dd 0FFFC75A0h, 89h, 80E4100h, 0E410286h, 4303830Ch, 5302300Eh
		dd 410C0E0Ah, 41080EC3h, 42040EC6h, 0Bh, 18h, 128h, 0FFFC75FCh
		dd 5Dh,	300E4300h, 40E0A72h, 0B43h, 18h, 144h, 0FFFC7640h
		dd 6Dh,	300E4300h, 0E0A4202h, 0B4304h, 20h, 160h, 0FFFC7694h
		dd 81h,	80E4100h, 0E430283h, 0A560230h,	0C341080Eh, 0B41040Eh
		dd 18h,	184h, 0FFFC76F4h, 5Dh, 300E4300h, 40E0A72h, 0B43h
		dd 18h,	1A0h, 0FFFC7738h, 6Dh, 300E4300h, 0E0A4202h, 0B4304h
		dd 2Ch,	1BCh, 0FFFC778Ch, 85h, 80E4100h, 0E410286h, 4303830Ch
		dd 5602300Eh, 410C0E0Ah, 41080EC3h, 43040EC6h, 0Bh, 34h
		dd 1ECh, 0FFFC77E4h, 6Dh, 80E4100h, 0E410287h, 4103860Ch
		dd 483100Eh, 7E300E43h,	41100E0Ah, 410C0EC3h, 41080EC6h
		dd 41040EC7h, 0Bh, 3Ch,	224h, 0FFFC781Ch, 75h, 80E4100h
		dd 0E410285h, 4103870Ch, 486100Eh, 83140E41h, 400E4305h
		dd 0E0A4202h, 0EC34114h, 0EC64110h, 0EC7410Ch, 0EC54108h
		dd 0B4304h, 3Ch, 264h, 0FFFC7854h, 7Dh,	80E4100h, 0E410285h
		dd 4103870Ch, 486100Eh,	83140E41h, 400E4305h, 0E0A4902h
		dd 0EC34114h, 0EC64110h, 0EC7410Ch, 0EC54108h, 0B4404h
		dd 20h,	2A4h, 0FFFC7894h, 65h, 80E4100h, 0E430283h, 0E0A7830h
		dd 0EC34108h, 0B4304h, 2Ch, 2C8h, 0FFFC78D8h, 7Dh, 80E4100h
		dd 0E410286h, 4303830Ch, 4D02300Eh, 410C0E0Ah, 41080EC3h
		dd 44040EC6h, 0Bh, 2Ch,	2F8h, 0FFFC7928h, 95h, 80E4100h
		dd 0E410286h, 4303830Ch, 6802300Eh, 410C0E0Ah, 41080EC3h
		dd 41040EC6h, 0Bh, 20h,	328h, 0FFFC7990h, 65h, 80E4100h
		dd 0E430283h, 0E0A7830h, 0EC34108h, 0B4304h, 20h, 34Ch
		dd 0FFFC79D4h, 79h, 80E4100h, 0E430283h, 0A4B0230h, 0C341080Eh
		dd 0B44040Eh, 2Ch, 370h, 0FFFC7A2Ch, 95h, 80E4100h, 0E410286h
		dd 4303830Ch, 6602300Eh, 410C0E0Ah, 41080EC3h, 43040EC6h
		dd 0Bh,	34h, 3A0h, 0FFFC7A94h, 71h, 80E4100h, 0E410287h
		dd 4103860Ch, 483100Eh,	2300E43h, 100E0A40h, 0C0EC341h
		dd 80EC641h, 40EC741h, 0B43h, 20h, 3D8h, 0FFFC7AD0h, 49h
		dd 80E4100h, 0E430287h,	0E0A7E30h, 0EC74108h, 0B4104h
		dd 3Ch,	3FCh, 0FFFC7AF8h, 0A5h,	80E4100h, 0E410285h, 4103870Ch
		dd 486100Eh, 83140E41h,	400E4305h, 0E0A7202h, 0EC34114h
		dd 0EC64110h, 0EC7410Ch, 0EC54108h, 0B4304h, 20h, 43Ch
		dd 0FFFC7B60h, 54h, 80E4100h, 0E430283h, 0A450230h, 0C341080Eh
		dd 0B45040Eh, 38h, 460h, 0FFFC7B90h, 0BAh, 80E4100h, 0E410286h
		dd 4303830Ch, 5B02300Eh, 410C0E0Ah, 41080EC3h, 46040EC6h
		dd 0A46020Bh, 0C3410C0Eh, 0C641080Eh, 0B45040Eh, 3Ch, 49Ch
		dd 0FFFC7C10h, 0C7h, 80E4100h, 0E410285h, 4103870Ch, 486100Eh
		dd 83140E41h, 500E4305h, 0E0A4F02h, 0EC34114h, 0EC64110h
		dd 0EC7410Ch, 0EC54108h, 0B4204h, 14h, 0
		dd 527A01h, 1087C01h, 4040C1Bh,	188h, 3Ch, 1Ch,	0FFFC7C80h
		dd 0E2h, 80E4100h, 0E410285h, 4103870Ch, 486100Eh, 83140E41h
		dd 500E4305h, 0E0A8002h, 0EC34114h, 0EC64110h, 0EC7410Ch
		dd 0EC54108h, 0B4104h, 34h, 5Ch, 0FFFC7D24h, 0BDh, 80E4100h
		dd 0E410287h, 4103860Ch, 483100Eh, 2500E43h, 100E0AAEh
		dd 0C0EC341h, 80EC641h,	40EC741h, 0B41h, 3Ch, 94h, 0FFFC7DACh
		dd 697h, 80E4100h, 0E410285h, 4103870Ch, 486100Eh, 83140E41h
		dd 800E4305h, 0AA20201h, 0C341140Eh, 0C641100Eh, 0C7410C0Eh
		dd 0C541080Eh, 0B43040Eh, 54h, 0D4h, 0FFFC8404h, 811h
		dd 80E4100h, 0E410285h,	4103870Ch, 486100Eh, 83140E41h
		dd 900E4305h, 0A990201h, 0C341140Eh, 0C641100Eh, 0C7410C0Eh
		dd 0C541080Eh, 0B48040Eh, 0A022E03h, 0C341140Eh, 0C641100Eh
		dd 0C7410C0Eh, 0C541080Eh, 0B46040Eh, 3Ch, 12Ch, 0FFFC8BC0h
		dd 1F3h, 80E4100h, 0E410285h, 4103870Ch, 486100Eh, 83140E41h
		dd 700E4305h, 0A01C803h, 0C341140Eh, 0C641100Eh, 0C7410C0Eh
		dd 0C541080Eh, 0B45040Eh, 14h, 0
		dd 527A01h, 1087C01h, 4040C1Bh,	188h, 3Ch, 1Ch,	0FFFC8D5Ch
		dd 1A0h, 80E4100h, 0E410285h, 4103870Ch, 486100Eh, 83140E41h
		dd 600E4305h, 0A011E03h, 0C341140Eh, 0C641100Eh, 0C7410C0Eh
		dd 0C541080Eh, 0B43040Eh, 3Ch, 5Ch, 0FFFC8EBCh,	0F9h, 80E4100h
		dd 0E410285h, 4103870Ch, 486100Eh, 83140E41h, 500E4305h
		dd 0E0AA202h, 0EC34114h, 0EC64110h, 0EC7410Ch, 0EC54108h
		dd 0B4304h, 3Ch, 9Ch, 0FFFC8F78h, 21Eh,	80E4100h, 0E410285h
		dd 4103870Ch, 486100Eh,	83140E41h, 500E4305h, 0E0ACC02h
		dd 0EC34114h, 0EC64110h, 0EC7410Ch, 0EC54108h, 0B4104h
		dd 58h,	0DCh, 0FFFC9158h, 0E5h,	80E4100h, 0E410287h, 4103860Ch
		dd 483100Eh, 2300E43h, 100E0A59h, 0C0EC341h, 80EC641h
		dd 40EC741h, 51020B46h,	41100E0Ah, 410C0EC3h, 41080EC6h
		dd 44040EC7h, 0E0A530Bh, 0EC34110h, 0EC6410Ch, 0EC74108h
		dd 0B4604h, 3Ch, 138h, 0FFFC91E4h, 2B9h, 80E4100h, 0E410285h
		dd 4103870Ch, 486100Eh,	83140E41h, 600E4305h, 0E0ADD02h
		dd 0EC34114h, 0EC64110h, 0EC7410Ch, 0EC54108h, 0B4404h
		dd 2Ch,	178h, 0FFFC9460h, 0C0h,	80E4100h, 0E410286h, 4303830Ch
		dd 9502400Eh, 410C0E0Ah, 41080EC3h, 44040EC6h, 0Bh, 14h
		dd 0
		dd 527A01h, 1087C01h, 4040C1Bh,	188h, 54h, 1Ch,	0FFFC94D8h
		dd 2B8h, 80E4100h, 0E410285h, 4103870Ch, 486100Eh, 83140E41h
		dd 800E4305h, 0A6D0201h, 0C341140Eh, 0C641100Eh, 0C7410C0Eh
		dd 0C541080Eh, 0B44040Eh, 0A023103h, 0C341140Eh, 0C641100Eh
		dd 0C7410C0Eh, 0C541080Eh, 0B42040Eh, 3Ch, 74h,	0FFFC9738h
		dd 0C4h, 80E4100h, 0E410285h, 4103870Ch, 486100Eh, 83140E41h
		dd 500E4305h, 0E0AB302h, 0EC34114h, 0EC64110h, 0EC7410Ch
		dd 0EC54108h, 0B4104h, 3Ch, 0B4h, 0FFFC97BCh, 0F1h, 80E4100h
		dd 0E410285h, 4103870Ch, 486100Eh, 83140E41h, 700E4305h
		dd 0E0AE002h, 0EC34114h, 0EC64110h, 0EC7410Ch, 0EC54108h
		dd 0B4104h, 3Ch, 0F4h, 0FFFC9870h, 120h, 80E4100h, 0E410285h
		dd 4103870Ch, 486100Eh,	83140E41h, 700E4305h, 0A010F03h
		dd 0C341140Eh, 0C641100Eh, 0C7410C0Eh, 0C541080Eh, 0B41040Eh
		dd 3Ch,	134h, 0FFFC9950h, 0F1h,	80E4100h, 0E410285h, 4103870Ch
		dd 486100Eh, 83140E41h,	700E4305h, 0E0AE002h, 0EC34114h
		dd 0EC64110h, 0EC7410Ch, 0EC54108h, 0B4104h, 18h, 174h
		dd 0FFFC9A04h, 47h, 300E4300h, 40E0A7Eh, 0B41h,	20h, 190h
		dd 0FFFC9A30h, 6Ah, 80E4100h, 0E430283h, 0A5F0230h, 0C341080Eh
		dd 0B41040Eh, 14h, 0
		dd 527A01h, 1087C01h, 4040C1Bh,	188h, 2Ch, 1Ch,	0FFFC9A60h
		dd 7Dh,	80E4100h, 0E410286h, 4303830Ch,	7002300Eh, 410C0E0Ah
		dd 41080EC3h, 41040EC6h, 0Bh, 3Ch, 4Ch,	0FFFC9AB0h, 2CCh
		dd 80E4100h, 0E410285h,	4103870Ch, 486100Eh, 83140E41h
		dd 700E4305h, 0E0A4D02h, 0EC34114h, 0EC64110h, 0EC7410Ch
		dd 0EC54108h, 0B4404h, 34h, 8Ch, 0FFFC9D3Ch, 1D8h, 80E4100h
		dd 0E410287h, 4103860Ch, 483100Eh, 3400E43h, 0E0A01C2h
		dd 0EC34110h, 0EC6410Ch, 0EC74108h, 0B4104h, 34h, 0C4h
		dd 0FFFC9EDCh, 118h, 80E4100h, 0E410287h, 4103860Ch, 483100Eh
		dd 3400E43h, 0E0A0102h,	0EC34110h, 0EC6410Ch, 0EC74108h
		dd 0B4104h, 20h, 0FCh, 0FFFC9FBCh, 71h,	80E4100h, 0E430283h
		dd 0A660230h, 0C341080Eh, 0B41040Eh, 14h, 0
		dd 527A01h, 1087C01h, 4040C1Bh,	188h, 2Ch, 1Ch,	0FFFC9FF4h
		dd 10Ah, 80E4100h, 0E430283h, 0AEA0230h, 0C341080Eh, 0B45040Eh
		dd 80E0A4Fh, 40EC341h, 0B41h, 54h, 4Ch,	0FFFCA0D0h, 55Bh
		dd 80E4100h, 0E410285h,	4103870Ch, 486100Eh, 83140E41h
		dd 600E4305h, 0E0A5602h, 0EC34114h, 0EC64110h, 0EC7410Ch
		dd 0EC54108h, 20B4304h,	140E0A42h, 100EC341h, 0C0EC641h
		dd 80EC741h, 40EC541h, 0B42h, 40h, 0A4h, 0FFFCA5D4h, 430h
		dd 80E4100h, 0E410285h,	4103870Ch, 486100Eh, 83140E41h
		dd 0A00E4605h, 3C20301h, 41140E0Ah, 41100EC3h, 410C0EC6h
		dd 41080EC7h, 44040EC5h, 0Bh, 3Ch, 0E8h, 0FFFCA9C0h, 138h
		dd 80E4100h, 0E410285h,	4103870Ch, 486100Eh, 83140E41h
		dd 600E4305h, 0A011F03h, 0C341140Eh, 0C641100Eh, 0C7410C0Eh
		dd 0C541080Eh, 0B42040Eh, 3Ch, 128h, 0FFFCAAB8h, 110h
		dd 80E4100h, 0E410285h,	4103870Ch, 486100Eh, 83140E41h
		dd 600E4305h, 0E0AF702h, 0EC34114h, 0EC64110h, 0EC7410Ch
		dd 0EC54108h, 0B4204h, 20h, 168h, 0FFFCAB88h, 65h, 80E4100h
		dd 0E430283h, 0A5A0230h, 0C341080Eh, 0B41040Eh,	14h, 0
		dd 527A01h, 1087C01h, 4040C1Bh,	188h, 54h, 1Ch,	0FFFCABB4h
		dd 1D8h, 80E4100h, 0E410285h, 4103870Ch, 486100Eh, 83140E41h
		dd 800E4305h, 0A570201h, 0C341140Eh, 0C641100Eh, 0C7410C0Eh
		dd 0C541080Eh, 0B42040Eh, 0A015F03h, 0C341140Eh, 0C641100Eh
		dd 0C7410C0Eh, 0C541080Eh, 0B45040Eh, 3Ch, 74h,	0FFFCAD34h
		dd 118h, 80E4100h, 0E410285h, 4103870Ch, 486100Eh, 83140E41h
		dd 600E4305h, 0E0AFF02h, 0EC34114h, 0EC64110h, 0EC7410Ch
		dd 0EC54108h, 0B4204h, 3Ch, 0B4h, 0FFFCAE0Ch, 1C0h, 80E4100h
		dd 0E410285h, 4103870Ch, 486100Eh, 83140E41h, 700E4305h
		dd 0A01A803h, 0C341140Eh, 0C641100Eh, 0C7410C0Eh, 0C541080Eh
		dd 0B41040Eh, 20h, 0F4h, 0FFFCAF8Ch, 6Ah, 80E4100h, 0E430283h
		dd 0A5F0230h, 0C341080Eh, 0B41040Eh, 14h, 0
		dd 527A01h, 1087C01h, 4040C1Bh,	188h, 3Ch, 1Ch,	0FFFCAFBCh
		dd 151h, 80E4100h, 0E410285h, 4103870Ch, 486100Eh, 83140E41h
		dd 600E4305h, 140E0A7Ch, 100EC341h, 0C0EC641h, 80EC741h
		dd 40EC541h, 0B41h, 18h, 5Ch, 0FFFCB0D0h, 47h, 300E4300h
		dd 40E0A7Eh, 0B41h, 20h, 78h, 0FFFCB0FCh, 6Ah, 80E4100h
		dd 0E430283h, 0A5F0230h, 0C341080Eh, 0B41040Eh,	14h, 0
		dd 527A01h, 1087C01h, 4040C1Bh,	188h, 3Ch, 1Ch,	0FFFCB12Ch
		dd 250h, 80E4100h, 0E410285h, 4103870Ch, 486100Eh, 83140E41h
		dd 0F00E4605h, 0A650201h, 0C341140Eh, 0C641100Eh, 0C7410C0Eh
		dd 0C541080Eh, 0B41040Eh, 18h, 5Ch, 0FFFCB33Ch,	47h, 300E4300h
		dd 40E0A7Eh, 0B41h, 20h, 78h, 0FFFCB368h, 6Ah, 80E4100h
		dd 0E430283h, 0A5F0230h, 0C341080Eh, 0B41040Eh,	14h, 0
		dd 527A01h, 1087C01h, 4040C1Bh,	188h, 20h, 1Ch,	0FFFCB398h
		dd 46h,	80E4100h, 0E430283h, 0E0A7730h,	0EC34108h, 0B4504h
		dd 2Ch,	40h, 0FFFCB3BCh, 6Dh, 80E4100h,	0E410286h, 4303830Ch
		dd 6002300Eh, 410C0E0Ah, 41080EC3h, 41040EC6h, 0Bh, 3Ch
		dd 70h,	0FFFCB3FCh, 4E6h, 80E4100h, 0E410285h, 4103870Ch
		dd 486100Eh, 83140E41h,	0A00E4605h, 0A790202h, 0C341140Eh
		dd 0C641100Eh, 0C7410C0Eh, 0C541080Eh, 0B41040Eh, 40h
		dd 0B0h, 0FFFCB8A4h, 293h, 80E4100h, 0E410285h,	4103870Ch
		dd 486100Eh, 83140E41h,	800E4305h, 2510301h, 41140E0Ah
		dd 41100EC3h, 410C0EC6h, 41080EC7h, 44040EC5h, 0Bh, 20h
		dd 0F4h, 0FFFCBAF4h, 6Ah, 80E4100h, 0E430283h, 0A5F0230h
		dd 0C341080Eh, 0B41040Eh, 14h, 0
		dd 527A01h, 1087C01h, 4040C1Bh,	188h, 3Ch, 1Ch,	0FFFCBB24h
		dd 0B7Bh, 80E4100h, 0E410285h, 4103870Ch, 486100Eh, 83140E41h
		dd 0B00E4605h, 0A680201h, 0C341140Eh, 0C641100Eh, 0C7410C0Eh
		dd 0C541080Eh, 0B42040Eh, 18h, 5Ch, 0FFFCC660h,	47h, 300E4300h
		dd 40E0A7Eh, 0B41h, 3Ch, 78h, 0FFFCC68Ch, 18Fh,	80E4100h
		dd 0E410285h, 4103870Ch, 486100Eh, 83140E41h, 700E4305h
		dd 0A017E03h, 0C341140Eh, 0C641100Eh, 0C7410C0Eh, 0C541080Eh
		dd 0B41040Eh, 20h, 0B8h, 0FFFCC7DCh, 6Ah, 80E4100h, 0E430283h
		dd 0A5F0230h, 0C341080Eh, 0B41040Eh, 14h, 0
		dd 527A01h, 1087C01h, 4040C1Bh,	188h, 34h, 1Ch,	0FFFCC80Ch
		dd 0DAh, 80E4100h, 0E410287h, 4103860Ch, 483100Eh, 2300E43h
		dd 100E0ACBh, 0C0EC341h, 80EC641h, 40EC741h, 0B41h, 18h
		dd 54h,	0FFFCC8B0h, 2Ch, 200E4300h, 40E0A5Fh, 0B45h, 20h
		dd 70h,	0FFFCC8C0h, 7Ah, 80E4100h, 0E430283h, 0A610230h
		dd 0C341080Eh, 0B41040Eh, 34h, 94h, 0FFFCC918h,	90h, 80E4100h
		dd 0E410287h, 4103860Ch, 483100Eh, 2400E43h, 100E0A6Eh
		dd 0C0EC341h, 80EC641h,	40EC741h, 0B41h, 3Ch, 0CCh, 0FFFCC970h
		dd 214h, 80E4100h, 0E410285h, 4103870Ch, 486100Eh, 83140E41h
		dd 600E4305h, 0E0AF402h, 0EC34114h, 0EC64110h, 0EC7410Ch
		dd 0EC54108h, 0B4104h, 20h, 10Ch, 0FFFCCB44h, 51h, 80E4100h
		dd 0E430283h, 0A420220h, 0C341080Eh, 0B41040Eh,	3Ch, 130h
		dd 0FFFCCB74h, 15Ah, 80E4100h, 0E410285h, 4103870Ch, 486100Eh
		dd 83140E41h, 500E4305h, 0E0AC202h, 0EC34114h, 0EC64110h
		dd 0EC7410Ch, 0EC54108h, 0B4304h, 34h, 170h, 0FFFCCC90h
		dd 178h, 80E4100h, 0E410287h, 4103860Ch, 483100Eh, 2300E43h
		dd 100E0AFDh, 0C0EC341h, 80EC641h, 40EC741h, 0B42h, 18h
		dd 1A8h, 0FFFCCDD0h, 51h, 300E4300h, 0E0A4302h,	0B4204h
		dd 20h,	1C4h, 0FFFCCE08h, 68h, 80E4100h, 0E430283h, 0A5D0230h
		dd 0C341080Eh, 0B41040Eh, 18h, 1E8h, 0FFFCCE4Ch, 79h, 300E4300h
		dd 0E0A6B02h, 0B4204h, 18h, 204h, 0FFFCCEACh, 9Ch, 300E4300h
		dd 0E0A6D02h, 0B4404h, 20h, 220h, 0FFFCCF2Ch, 97h, 300E4300h
		dd 0E0A7502h, 510B4804h, 41040E0Ah, 0Bh, 20h, 244h, 0FFFCCFA0h
		dd 97h,	300E4300h, 0E0A7502h, 510B4804h, 41040E0Ah, 0Bh
		dd 18h,	268h, 0FFFCD014h, 75h, 300E4300h, 0E0A6502h, 0B4404h
		dd 20h,	284h, 0FFFCD070h, 68h, 80E4100h, 0E430283h, 0A540230h
		dd 0C341080Eh, 0B43040Eh, 2Ch, 2A8h, 0FFFCD0B4h, 74h, 80E4100h
		dd 0E410286h, 4303830Ch, 5D02300Eh, 410C0E0Ah, 41080EC3h
		dd 44040EC6h, 0Bh, 20h,	2D8h, 0FFFCD0F8h, 68h, 80E4100h
		dd 0E430283h, 0A540230h, 0C341080Eh, 0B43040Eh,	20h, 2FCh
		dd 0FFFCD13Ch, 68h, 80E4100h, 0E430283h, 0A540230h, 0C341080Eh
		dd 0B43040Eh, 20h, 320h, 0FFFCD180h, 68h, 80E4100h, 0E430283h
		dd 0A540230h, 0C341080Eh, 0B43040Eh, 3Ch, 344h,	0FFFCD1C4h
		dd 634h, 80E4100h, 0E410285h, 4103870Ch, 486100Eh, 83140E41h
		dd 600E4305h, 0A025803h, 0C341140Eh, 0C641100Eh, 0C7410C0Eh
		dd 0C541080Eh, 0B41040Eh, 3Ch, 384h, 0FFFCD7B8h, 1151h
		dd 80E4100h, 0E410285h,	4103870Ch, 486100Eh, 83140E41h
		dd 800E4305h, 0AD00201h, 0C341140Eh, 0C641100Eh, 0C7410C0Eh
		dd 0C541080Eh, 0B41040Eh, 48h, 3C4h, 0FFFCE8CCh, 125h
		dd 80E4100h, 0E410287h,	4103860Ch, 483100Eh, 2300E43h
		dd 100E0A7Fh, 0C0EC341h, 80EC641h, 40EC741h, 84020B48h
		dd 41100E0Ah, 410C0EC3h, 41080EC6h, 41040EC7h, 0Bh, 3Ch
		dd 410h, 0FFFCE9A8h, 195h, 80E4100h, 0E410285h,	4103870Ch
		dd 486100Eh, 83140E41h,	500E4305h, 0E0AFC02h, 0EC34114h
		dd 0EC64110h, 0EC7410Ch, 0EC54108h, 0B4104h, 18h, 450h
		dd 0FFFCEB00h, 58h, 300E4300h, 0E0A4F02h, 0B4104h, 48h
		dd 46Ch, 0FFFCEB3Ch, 129h, 80E4100h, 0E410287h,	4103860Ch
		dd 483100Eh, 2300E43h, 100E0A86h, 0C0EC341h, 80EC641h
		dd 40EC741h, 84020B45h,	41100E0Ah, 410C0EC3h, 41080EC6h
		dd 41040EC7h, 0Bh, 44h,	4B8h, 0FFFCEC1Ch, 9Dh, 80E4100h
		dd 0E410287h, 4103860Ch, 483100Eh, 2300E43h, 100E0A71h
		dd 0C0EC341h, 80EC641h,	40EC741h, 0A540B46h, 0C341100Eh
		dd 0C6410C0Eh, 0C741080Eh, 0B41040Eh, 38h, 500h, 0FFFCEC74h
		dd 0BCh, 80E4100h, 0E410286h, 4303830Ch, 7702300Eh, 410C0E0Ah
		dd 41080EC3h, 46040EC6h, 0E0A700Bh, 0EC3410Ch, 0EC64108h
		dd 0B4104h, 38h, 53Ch, 0FFFCECF4h, 0BCh, 80E4100h, 0E410286h
		dd 4303830Ch, 7702300Eh, 410C0E0Ah, 41080EC3h, 46040EC6h
		dd 0E0A700Bh, 0EC3410Ch, 0EC64108h, 0B4104h, 44h, 578h
		dd 0FFFCED74h, 0C1h, 80E4100h, 0E410287h, 4103860Ch, 483100Eh
		dd 2300E43h, 100E0A94h,	0C0EC341h, 80EC641h, 40EC741h
		dd 0A540B47h, 0C341100Eh, 0C6410C0Eh, 0C741080Eh, 0B41040Eh
		dd 38h,	5C0h, 0FFFCEDF0h, 94h, 80E4100h, 0E410286h, 4303830Ch
		dd 6902300Eh, 410C0E0Ah, 41080EC3h, 48040EC6h, 0E0A540Bh
		dd 0EC3410Ch, 0EC64108h, 0B4104h, 2Ch, 5FCh, 0FFFCEE48h
		dd 83h,	80E4100h, 0E430283h, 0A5D0230h,	0C341080Eh, 0B46040Eh
		dd 80E0A54h, 40EC341h, 0B41h, 54h, 62Ch, 0FFFCEE9Ch, 0E6h
		dd 80E4100h, 0E410285h,	4103870Ch, 486100Eh, 83140E41h
		dd 400E4305h, 0E0AAD02h, 0EC34114h, 0EC64110h, 0EC7410Ch
		dd 0EC54108h, 5C0B4804h, 41140E0Ah, 41100EC3h, 410C0EC6h
		dd 41080EC7h, 41040EC5h, 0Bh, 3Ch, 684h, 0FFFCEF2Ch, 22Bh
		dd 80E4100h, 0E410285h,	4103870Ch, 486100Eh, 83140E41h
		dd 600E4305h, 0A015D03h, 0C341140Eh, 0C641100Eh, 0C7410C0Eh
		dd 0C541080Eh, 0B44040Eh, 3Ch, 6C4h, 0FFFCF118h, 0BDh
		dd 80E4100h, 0E410285h,	4103870Ch, 486100Eh, 83140E41h
		dd 600E4305h, 0E0AA502h, 0EC34114h, 0EC64110h, 0EC7410Ch
		dd 0EC54108h, 0B4104h, 54h, 704h, 0FFFCF198h, 22Bh, 80E4100h
		dd 0E410285h, 4103870Ch, 486100Eh, 83140E41h, 600E4305h
		dd 0A01D603h, 0C341140Eh, 0C641100Eh, 0C7410C0Eh, 0C541080Eh
		dd 0B45040Eh, 140E0A7Bh, 100EC341h, 0C0EC641h, 80EC741h
		dd 40EC541h, 0B41h, 3Ch, 75Ch, 0FFFCF36Ch, 1E0h, 80E4100h
		dd 0E410285h, 4103870Ch, 486100Eh, 83140E41h, 600E4305h
		dd 0A017303h, 0C341140Eh, 0C641100Eh, 0C7410C0Eh, 0C541080Eh
		dd 0B42040Eh, 3Ch, 79Ch, 0FFFCF50Ch, 20Bh, 80E4100h, 0E410285h
		dd 4103870Ch, 486100Eh,	83140E41h, 600E4305h, 0A018803h
		dd 0C341140Eh, 0C641100Eh, 0C7410C0Eh, 0C541080Eh, 0B41040Eh
		dd 18h,	7DCh, 0FFFCF6D8h, 3Ch, 200E4300h, 40E0A6Ah, 0B43h
		dd 20h,	7F8h, 0FFFCF6F8h, 71h, 80E4100h
		dd 0E430283h, 0A660230h, 0C341080Eh, 0B41040Eh,	14h, 0
		dd 527A01h, 1087C01h, 4040C1Bh,	188h, 18h, 1Ch,	0FFFCF730h
		dd 33h,	200E4300h, 40E0A66h, 0B45h, 18h, 38h, 0FFFCF748h
		dd 33h,	200E4300h, 40E0A66h, 0B45h, 18h, 54h, 0FFFCF760h
		dd 33h,	200E4300h, 40E0A66h, 0B45h, 18h, 70h, 0FFFCF778h
		dd 33h,	200E4300h, 40E0A66h, 0B45h, 3Ch, 8Ch, 0FFFCF790h
		dd 8Fh,	80E4100h, 0E410285h, 4103870Ch,	486100Eh, 83140E41h
		dd 400E4305h, 0E0A7E02h, 0EC34114h, 0EC64110h, 0EC7410Ch
		dd 0EC54108h, 0B4104h, 2Ch, 0CCh, 0FFFCF7E0h, 5Bh, 80E4100h
		dd 0E410286h, 4303830Ch, 4E02200Eh, 410C0E0Ah, 41080EC3h
		dd 41040EC6h, 0Bh, 3Ch,	0FCh, 0FFFCF80Ch, 134h,	80E4100h
		dd 0E410285h, 4103870Ch, 486100Eh, 83140E41h, 500E4305h
		dd 0A011C03h, 0C341140Eh, 0C641100Eh, 0C7410C0Eh, 0C541080Eh
		dd 0B41040Eh, 3Ch, 13Ch, 0FFFCF900h, 17C2h, 80E4100h, 0E410285h
		dd 4103870Ch, 486100Eh,	83140E41h, 0A00E4605h, 0AAC0204h
		dd 0C341140Eh, 0C641100Eh, 0C7410C0Eh, 0C541080Eh, 0B42040Eh
		dd 20h,	17Ch, 0FFFD1084h, 68h, 80E4100h, 0E430283h, 0A540230h
		dd 0C341080Eh, 0B43040Eh, 3Ch, 1A0h, 0FFFD10C8h, 31Bh
		dd 80E4100h, 0E410285h,	4103870Ch, 486100Eh, 83140E41h
		dd 700E4305h, 0A022503h, 0C341140Eh, 0C641100Eh, 0C7410C0Eh
		dd 0C541080Eh, 0B44040Eh, 40h, 1E0h, 0FFFD13A4h, 370h
		dd 80E4100h, 0E410285h,	4103870Ch, 486100Eh, 83140E41h
		dd 900E4305h, 3450301h,	41140E0Ah, 41100EC3h, 410C0EC6h
		dd 41080EC7h, 44040EC5h, 0Bh, 40h, 224h, 0FFFD16D0h, 2BCh
		dd 80E4100h, 0E410285h,	4103870Ch, 486100Eh, 83140E41h
		dd 800E4305h, 2A30301h,	41140E0Ah, 41100EC3h, 410C0EC6h
		dd 41080EC7h, 42040EC5h, 0Bh, 40h, 268h, 0FFFD1948h, 1F1h
		dd 80E4100h, 0E410285h,	4103870Ch, 486100Eh, 83140E41h
		dd 800E4305h, 1E00301h,	41140E0Ah, 41100EC3h, 410C0EC6h
		dd 41080EC7h, 41040EC5h, 0Bh, 3Ch, 2ACh, 0FFFD1AF8h, 14Bh
		dd 80E4100h, 0E410285h,	4103870Ch, 486100Eh, 83140E41h
		dd 600E4305h, 0A013A03h, 0C341140Eh, 0C641100Eh, 0C7410C0Eh
		dd 0C541080Eh, 0B41040Eh, 40h, 2ECh, 0FFFD1C04h, 289h
		dd 80E4100h, 0E410285h,	4103870Ch, 486100Eh, 83140E41h
		dd 900E4305h, 2780301h,	41140E0Ah, 41100EC3h, 410C0EC6h
		dd 41080EC7h, 41040EC5h, 0Bh, 40h, 330h, 0FFFD1E4Ch, 2F6h
		dd 80E4100h, 0E410285h,	4103870Ch, 486100Eh, 83140E41h
		dd 900E4305h, 2E50301h,	41140E0Ah, 41100EC3h, 410C0EC6h
		dd 41080EC7h, 41040EC5h, 0Bh, 40h, 374h, 0FFFD2100h, 397h
		dd 80E4100h, 0E410285h,	4103870Ch, 486100Eh, 83140E41h
		dd 900E4305h, 3480301h,	41140E0Ah, 41100EC3h, 410C0EC6h
		dd 41080EC7h, 41040EC5h, 0Bh, 40h, 3B8h, 0FFFD2454h, 3BFh
		dd 80E4100h, 0E410285h,	4103870Ch, 486100Eh, 83140E41h
		dd 0A00E4605h, 3AB0301h, 41140E0Ah, 41100EC3h, 410C0EC6h
		dd 41080EC7h, 41040EC5h, 0Bh, 3Ch, 3FCh, 0FFFD27D0h, 190h
		dd 80E4100h, 0E410285h,	4103870Ch, 486100Eh, 83140E41h
		dd 700E4305h, 0A017703h, 0C341140Eh, 0C641100Eh, 0C7410C0Eh
		dd 0C541080Eh, 0B42040Eh, 3Ch, 43Ch, 0FFFD2920h, 257h
		dd 80E4100h, 0E410285h,	4103870Ch, 486100Eh, 83140E41h
		dd 600E4305h, 0A021803h, 0C341140Eh, 0C641100Eh, 0C7410C0Eh
		dd 0C541080Eh, 0B41040Eh, 20h, 47Ch, 0FFFD2B38h, 68h, 80E4100h
		dd 0E430283h, 0A540230h, 0C341080Eh, 0B43040Eh,	3Ch, 4A0h
		dd 0FFFD2B7Ch, 17Ch, 80E4100h, 0E410285h, 4103870Ch, 486100Eh
		dd 83140E41h, 600E4305h, 0A016103h, 0C341140Eh,	0C641100Eh
		dd 0C7410C0Eh, 0C541080Eh, 0B44040Eh, 40h, 4E0h, 0FFFD2CB8h
		dd 320h, 80E4100h, 0E410285h, 4103870Ch, 486100Eh, 83140E41h
		dd 0A00E4605h, 3040301h, 41140E0Ah, 41100EC3h, 410C0EC6h
		dd 41080EC7h, 42040EC5h, 0Bh, 3Ch, 524h, 0FFFD2F94h, 238h
		dd 80E4100h, 0E410285h,	4103870Ch, 486100Eh, 83140E41h
		dd 700E4305h, 0A022003h, 0C341140Eh, 0C641100Eh, 0C7410C0Eh
		dd 0C541080Eh, 0B41040Eh, 20h, 564h, 0FFFD318Ch, 6Ah, 80E4100h
		dd 0E430283h, 0A5F0230h, 0C341080Eh, 0B41040Eh,	14h, 0
		dd 527A01h, 1087C01h, 4040C1Bh,	188h, 18h, 1Ch,	0FFFD31BCh
		dd 33h,	200E4300h, 40E0A6Ah, 0B41h, 2Ch, 38h, 0FFFD31D4h
		dd 17Bh, 80E4100h, 0E410286h, 4303830Ch, 6E03300Eh, 0C0E0A01h
		dd 80EC341h, 40EC641h, 0B41h, 2Ch, 68h,	0FFFD3320h, 57h
		dd 80E4100h, 0E410286h,	4303830Ch, 4202200Eh, 410C0E0Ah
		dd 41080EC3h, 45040EC6h, 0Bh, 3Ch, 98h,	0FFFD3348h, 11CCh
		dd 80E4100h, 0E410285h,	4103870Ch, 486100Eh, 83140E41h
		dd 900E4305h, 0A490201h, 0C341140Eh, 0C641100Eh, 0C7410C0Eh
		dd 0C541080Eh, 0B44040Eh, 3Ch, 0D8h, 0FFFD44D4h, 1D4h
		dd 80E4100h, 0E410285h,	4103870Ch, 486100Eh, 83140E41h
		dd 600E4305h, 0A01BB03h, 0C341140Eh, 0C641100Eh, 0C7410C0Eh
		dd 0C541080Eh, 0B42040Eh, 3Ch, 118h, 0FFFD4668h, 1C0h
		dd 80E4100h, 0E410285h,	4103870Ch, 486100Eh, 83140E41h
		dd 600E4305h, 0A019C03h, 0C341140Eh, 0C641100Eh, 0C7410C0Eh
		dd 0C541080Eh, 0B41040Eh, 3Ch, 158h, 0FFFD47E8h, 1BCh
		dd 80E4100h, 0E410285h,	4103870Ch, 486100Eh, 83140E41h
		dd 700E4305h, 0A01A303h, 0C341140Eh, 0C641100Eh, 0C7410C0Eh
		dd 0C541080Eh, 0B42040Eh, 3Ch, 198h, 0FFFD4964h, 200h
		dd 80E4100h, 0E410285h,	4103870Ch, 486100Eh, 83140E41h
		dd 700E4305h, 0A01E803h, 0C341140Eh, 0C641100Eh, 0C7410C0Eh
		dd 0C541080Eh, 0B41040Eh, 40h, 1D8h, 0FFFD4B24h, 334h
		dd 80E4100h, 0E410285h,	4103870Ch, 486100Eh, 83140E41h
		dd 800E4305h, 31A0301h,	41140E0Ah, 41100EC3h, 410C0EC6h
		dd 41080EC7h, 43040EC5h, 0Bh, 20h, 21Ch, 0FFFD4E14h, 71h
		dd 80E4100h, 0E430283h,	0A660230h, 0C341080Eh, 0B41040Eh
		dd 14h,	0
		dd 527A01h, 1087C01h, 4040C1Bh,	188h, 3Ch, 1Ch,	0FFFD4E4Ch
		dd 0F5h, 80E4100h, 0E410285h, 4103870Ch, 486100Eh, 83140E41h
		dd 500E4305h, 0E0AE402h, 0EC34114h, 0EC64110h, 0EC7410Ch
		dd 0EC54108h, 0B4104h, 2Ch, 5Ch, 0FFFD4F04h, 65h, 80E4100h
		dd 0E410286h, 4303830Ch, 5402300Eh, 410C0E0Ah, 41080EC3h
		dd 41040EC6h, 0Bh, 3Ch,	8Ch, 0FFFD4F3Ch, 357h, 80E4100h
		dd 0E410285h, 4103870Ch, 486100Eh, 83140E41h, 400E4305h
		dd 0A01F503h, 0C341140Eh, 0C641100Eh, 0C7410C0Eh, 0C541080Eh
		dd 0B44040Eh, 40h, 0CCh, 0FFFD5254h, 1C9h, 80E4100h, 0E410285h
		dd 4103870Ch, 486100Eh,	83140E41h, 0A00E4605h, 1190301h
		dd 41140E0Ah, 41100EC3h, 410C0EC6h, 41080EC7h, 41040EC5h
		dd 0Bh,	3Ch, 110h, 0FFFD53DCh, 146h, 80E4100h, 0E410285h
		dd 4103870Ch, 486100Eh,	83140E41h, 600E4305h, 0A010903h
		dd 0C341140Eh, 0C641100Eh, 0C7410C0Eh, 0C541080Eh, 0B44040Eh
		dd 3Ch,	150h, 0FFFD54E4h, 9Ah, 80E4100h, 0E410285h, 4103870Ch
		dd 486100Eh, 83140E41h,	500E4305h, 0E0A8202h, 0EC34114h
		dd 0EC64110h, 0EC7410Ch, 0EC54108h, 0B4104h, 20h, 190h
		dd 0FFFD5540h, 9Fh, 80E4100h, 0E430283h, 0A900230h, 0C341080Eh
		dd 0B45040Eh, 2Ch, 1B4h, 0FFFD55BCh, 5Dh, 80E4100h, 0E410286h
		dd 4303830Ch, 5002300Eh, 410C0E0Ah, 41080EC3h, 41040EC6h
		dd 0Bh,	40h, 1E4h, 0FFFD55ECh, 72Ah, 80E4100h, 0E410285h
		dd 4103870Ch, 486100Eh,	83140E41h, 800E4305h, 1C50301h
		dd 41140E0Ah, 41100EC3h, 410C0EC6h, 41080EC7h, 44040EC5h
		dd 0Bh,	3Ch, 228h, 0FFFD5CD4h, 42Bh, 80E4100h, 0E410285h
		dd 4103870Ch, 486100Eh,	83140E41h, 600E4305h, 0E0A5702h
		dd 0EC34114h, 0EC64110h, 0EC7410Ch, 0EC54108h, 0B4204h
		dd 20h,	268h, 0FFFD60C0h, 68h, 80E4100h, 0E430283h, 0A540230h
		dd 0C341080Eh, 0B43040Eh, 40h, 28Ch, 0FFFD6104h, 2DBh
		dd 80E4100h, 0E410285h,	4103870Ch, 486100Eh, 83140E41h
		dd 800E4305h, 2840301h,	41140E0Ah, 41100EC3h, 410C0EC6h
		dd 41080EC7h, 41040EC5h, 0Bh, 3Ch, 2D0h, 0FFFD639Ch, 14Fh
		dd 80E4100h, 0E410285h,	4103870Ch, 486100Eh, 83140E41h
		dd 700E4305h, 0A013703h, 0C341140Eh, 0C641100Eh, 0C7410C0Eh
		dd 0C541080Eh, 0B41040Eh, 3Ch, 310h, 0FFFD64ACh, 13Ch
		dd 80E4100h, 0E410285h,	4103870Ch, 486100Eh, 83140E41h
		dd 600E4305h, 0A012303h, 0C341140Eh, 0C641100Eh, 0C7410C0Eh
		dd 0C541080Eh, 0B42040Eh, 20h, 350h, 0FFFD65A8h, 71h, 80E4100h
		dd 0E430283h, 0A660230h, 0C341080Eh, 0B41040Eh,	3Ch, 374h
		dd 0FFFD65F8h, 6Fh, 80E4100h, 0E410285h, 4103870Ch, 486100Eh
		dd 83140E41h, 400E4305h, 0E0A5E02h, 0EC34114h, 0EC64110h
		dd 0EC7410Ch, 0EC54108h, 0B4104h, 34h, 3B4h, 0FFFD6628h
		dd 7Dh,	80E4100h, 0E410287h, 4103860Ch,	483100Eh, 2300E43h
		dd 100E0A5Dh, 0C0EC341h, 80EC641h, 40EC741h, 0B42h, 18h
		dd 3ECh, 0FFFD6670h, 28h, 200E4300h, 40E0A5Fh, 0B41h, 14h
		dd 0
		dd 527A01h, 1087C01h, 4040C1Bh,	188h, 3Ch, 1Ch,	0FFFD6664h
		dd 115h, 80E4100h, 0E410285h, 4103870Ch, 486100Eh, 83140E41h
		dd 600E4305h, 0A010403h, 0C341140Eh, 0C641100Eh, 0C7410C0Eh
		dd 0C541080Eh, 0B41040Eh, 3Ch, 5Ch, 0FFFD673Ch,	112h, 80E4100h
		dd 0E410285h, 4103870Ch, 486100Eh, 83140E41h, 600E4305h
		dd 0E0AE802h, 0EC34114h, 0EC64110h, 0EC7410Ch, 0EC54108h
		dd 0B4104h, 40h, 9Ch, 0FFFD6810h, 1D0h,	80E4100h, 0E410285h
		dd 4103870Ch, 486100Eh,	83140E41h, 800E4605h, 19B0302h
		dd 41140E0Ah, 41100EC3h, 410C0EC6h, 41080EC7h, 43040EC5h
		dd 0Bh,	18h, 0E0h, 0FFFD699Ch, 47h, 300E4300h, 40E0A7Eh
		dd 0B41h, 3Ch, 0FCh, 0FFFD69C8h, 0C5h, 80E4100h, 0E410285h
		dd 4103870Ch, 486100Eh,	83140E41h, 500E4305h, 0E0AB402h
		dd 0EC34114h, 0EC64110h, 0EC7410Ch, 0EC54108h, 0B4104h
		dd 18h,	13Ch, 0FFFD6A50h, 47h, 300E4300h, 40E0A7Eh, 0B41h
		dd 20h,	158h, 0FFFD6A7Ch, 69h, 80E4100h, 0E430283h, 0A5E0250h
		dd 0C341080Eh, 0B41040Eh, 3Ch, 17Ch, 0FFFD6AC4h, 0F4h
		dd 80E4100h, 0E410285h,	4103870Ch, 486100Eh, 83140E41h
		dd 600E4305h, 0E0AE302h, 0EC34114h, 0EC64110h, 0EC7410Ch
		dd 0EC54108h, 0B4104h, 3Ch, 1BCh, 0FFFD6B78h, 0DAFh, 80E4100h
		dd 0E410285h, 4103870Ch, 486100Eh, 83140E41h, 0D00E4605h
		dd 0AE10202h, 0C341140Eh, 0C641100Eh, 0C7410C0Eh, 0C541080Eh
		dd 0B41040Eh, 3Ch, 1FCh, 0FFFD78E8h, 224h, 80E4100h, 0E410285h
		dd 4103870Ch, 486100Eh,	83140E41h, 700E4305h, 0A01CE03h
		dd 0C341140Eh, 0C641100Eh, 0C7410C0Eh, 0C541080Eh, 0B43040Eh
		dd 34h,	23Ch, 0FFFD7ACCh, 203h,	80E4100h, 0E410287h, 4103860Ch
		dd 483100Eh, 3500E43h, 0E0A01C5h, 0EC34110h, 0EC6410Ch
		dd 0EC74108h, 0B4204h, 40h, 274h, 0FFFD7C98h, 2BFh, 80E4100h
		dd 0E410285h, 4103870Ch, 486100Eh, 83140E41h, 800E4305h
		dd 17C0301h, 41140E0Ah,	41100EC3h, 410C0EC6h, 41080EC7h
		dd 41040EC5h, 0Bh, 20h,	2B8h, 0FFFD7F14h, 6Ah, 80E4100h
		dd 0E430283h, 0A5F0230h, 0C341080Eh, 0B41040Eh,	14h, 0
		dd 527A01h, 1087C01h, 4040C1Bh,	188h, 3Ch, 1Ch,	0FFFD7F44h
		dd 17Dh, 80E4100h, 0E410285h, 4103870Ch, 486100Eh, 83140E41h
		dd 700E4305h, 0E0A4202h, 0EC34114h, 0EC64110h, 0EC7410Ch
		dd 0EC54108h, 0B4304h, 20h, 5Ch, 0FFFD8084h, 6Ah, 80E4100h
		dd 0E430283h, 0A5F0230h, 0C341080Eh, 0B41040Eh,	14h, 0
		dd 527A01h, 1087C01h, 4040C1Bh,	188h, 54h, 1Ch,	0FFFD80B4h
		dd 9Ch,	80E4100h, 0E410285h, 4103870Ch,	486100Eh, 83140E41h
		dd 500E4305h, 140E0A78h, 100EC341h, 0C0EC641h, 80EC741h
		dd 40EC541h, 4D020B41h,	41140E0Ah, 41100EC3h, 410C0EC6h
		dd 41080EC7h, 42040EC5h, 0Bh, 20h, 74h,	0FFFD80F8h, 6Ah
		dd 80E4100h, 0E430283h,	0A5F0230h, 0C341080Eh, 0B41040Eh
		dd 14h,	0
		dd 527A01h, 1087C01h, 4040C1Bh,	188h, 3Ch, 1Ch,	0FFFD8128h
		dd 28Bh, 80E4100h, 0E410285h, 4103870Ch, 486100Eh, 83140E41h
		dd 800E4305h, 0A670201h, 0C341140Eh, 0C641100Eh, 0C7410C0Eh
		dd 0C541080Eh, 0B42040Eh, 3Ch, 5Ch, 0FFFD8374h,	0F4h, 80E4100h
		dd 0E410285h, 4103870Ch, 486100Eh, 83140E41h, 600E4305h
		dd 0E0AD902h, 0EC34114h, 0EC64110h, 0EC7410Ch, 0EC54108h
		dd 0B4404h, 20h, 9Ch, 0FFFD8428h, 6Ah, 80E4100h, 0E430283h
		dd 0A5F0230h, 0C341080Eh, 0B41040Eh, 14h, 0
		dd 527A01h, 1087C01h, 4040C1Bh,	188h, 20h, 1Ch,	0FFFD8458h
		dd 3Ah,	80E4100h, 0E430283h, 0E0A6F30h,	0EC34108h, 0B4104h
		dd 34h,	40h, 0FFFD8470h, 92h, 80E4100h,	0E410287h, 4103860Ch
		dd 483100Eh, 2300E43h, 100E0A83h, 0C0EC341h, 80EC641h
		dd 40EC741h, 0B41h, 34h, 78h, 0FFFD84CCh, 90h, 80E4100h
		dd 0E410287h, 4103860Ch, 483100Eh, 2300E43h, 100E0A81h
		dd 0C0EC341h, 80EC641h,	40EC741h, 0B41h, 38h, 0B0h, 0FFFD8524h
		dd 164h, 80E4100h, 0E430283h, 0A660230h, 0C341080Eh, 0B45040Eh
		dd 0E0A6402h, 0EC34108h, 610B4704h, 41080E0Ah, 42040EC3h
		dd 0Bh,	3Ch, 0ECh, 0FFFD864Ch, 4B1h, 80E4100h, 0E410285h
		dd 4103870Ch, 486100Eh,	83140E41h, 600E4305h, 0A01BC03h
		dd 0C341140Eh, 0C641100Eh, 0C7410C0Eh, 0C541080Eh, 0B41040Eh
		dd 20h,	12Ch, 0FFFD8AC0h, 5Ch, 80E4100h, 0E430283h, 0A460220h
		dd 0C341080Eh, 0B41040Eh, 20h, 150h, 0FFFD8AF8h, 59h, 80E4100h
		dd 0E430283h, 0A470220h, 0C341080Eh, 0B44040Eh,	20h, 174h
		dd 0FFFD8B30h, 51h, 80E4100h, 0E430283h, 0A400220h, 0C341080Eh
		dd 0B43040Eh, 34h, 198h, 0FFFD8B60h, 58h, 80E4100h, 0E410287h
		dd 4103860Ch, 483100Eh,	2300E43h, 100E0A49h, 0C0EC341h
		dd 80EC641h, 40EC741h, 0B41h, 18h, 1D0h, 0FFFD8B80h, 2Ch
		dd 200E4300h, 40E0A5Fh,	0B45h, 18h, 1ECh, 0FFFD8B90h, 2Ch
		dd 200E4300h, 40E0A5Fh,	0B45h, 3Ch, 208h, 0FFFD8BA0h, 18Eh
		dd 80E4100h, 0E410285h,	4103870Ch, 486100Eh, 83140E41h
		dd 500E4305h, 0E0AE502h, 0EC34114h, 0EC64110h, 0EC7410Ch
		dd 0EC54108h, 0B4404h, 20h, 248h, 0FFFD8CF0h, 161h, 80E4100h
		dd 0E430283h, 0ADB0230h, 0C341080Eh, 0B44040Eh,	3Ch, 26Ch
		dd 0FFFD8E30h, 324h, 80E4100h, 0E410285h, 4103870Ch, 486100Eh
		dd 83140E41h, 500E4305h, 0A020A03h, 0C341140Eh,	0C641100Eh
		dd 0C7410C0Eh, 0C541080Eh, 0B41040Eh, 34h, 2ACh, 0FFFD9114h
		dd 65h,	80E4100h, 0E410287h, 4103860Ch,	483100Eh, 2300E43h
		dd 100E0A52h, 0C0EC341h, 80EC641h, 40EC741h, 0B45h, 2Ch
		dd 2E4h, 0FFFD9144h, 5Ah, 80E4100h, 0E410286h, 4303830Ch
		dd 4902300Eh, 410C0E0Ah, 41080EC3h, 45040EC6h, 0Bh, 3Ch
		dd 314h, 0FFFD9170h, 2BEh, 80E4100h, 0E410285h,	4103870Ch
		dd 486100Eh, 83140E41h,	700E4305h, 0A012803h, 0C341140Eh
		dd 0C641100Eh, 0C7410C0Eh, 0C541080Eh, 0B41040Eh, 18h
		dd 354h, 0FFFD93F0h, 62h, 400E4300h, 0E0A5902h,	0B4104h
		dd 3Ch,	370h, 0FFFD9438h, 124h,	80E4100h, 0E410285h, 4103870Ch
		dd 486100Eh, 83140E41h,	600E4305h, 0A010A03h, 0C341140Eh
		dd 0C641100Eh, 0C7410C0Eh, 0C541080Eh, 0B43040Eh, 20h
		dd 3B0h, 0FFFD951Ch, 0D4h, 80E4100h, 0E430283h,	0AB10240h
		dd 0C341080Eh, 0B42040Eh, 3Ch, 3D4h, 0FFFD95CCh, 19Bh
		dd 80E4100h, 0E410285h,	4103870Ch, 486100Eh, 83140E41h
		dd 500E4305h, 0A015B03h, 0C341140Eh, 0C641100Eh, 0C7410C0Eh
		dd 0C541080Eh, 0B42040Eh, 3Ch, 414h, 0FFFD9728h, 0B8h
		dd 80E4100h, 0E410285h,	4103870Ch, 486100Eh, 83140E41h
		dd 500E4305h, 0E0AA702h, 0EC34114h, 0EC64110h, 0EC7410Ch
		dd 0EC54108h, 0B4104h, 2Ch, 454h, 0FFFD97A0h, 68h, 80E4100h
		dd 0E410286h, 4303830Ch, 5702300Eh, 410C0E0Ah, 41080EC3h
		dd 45040EC6h, 0Bh, 14h,	0
		dd 527A01h, 1087C01h, 4040C1Bh,	188h, 54h, 1Ch,	0FFFD97C0h
		dd 159h, 80E4100h, 0E410285h, 4103870Ch, 486100Eh, 83140E41h
		dd 600E4305h, 0E0A4302h, 0EC34114h, 0EC64110h, 0EC7410Ch
		dd 0EC54108h, 7E0B4204h, 41140E0Ah, 41100EC3h, 410C0EC6h
		dd 41080EC7h, 42040EC5h, 0Bh, 18h, 74h,	0FFFD98C4h, 5Ah
		dd 400E4300h, 0E0A5102h, 0B4104h, 3Ch, 90h, 0FFFD9904h
		dd 85h,	80E4100h, 0E410285h, 4103870Ch,	486100Eh, 83140E41h
		dd 500E4305h, 0E0A7402h, 0EC34114h, 0EC64110h, 0EC7410Ch
		dd 0EC54108h, 0B4104h, 3Ch, 0D0h, 0FFFD994Ch, 0E7h, 80E4100h
		dd 0E410285h, 4103870Ch, 486100Eh, 83140E41h, 600E4305h
		dd 0E0ABE02h, 0EC34114h, 0EC64110h, 0EC7410Ch, 0EC54108h
		dd 0B4304h, 20h, 110h, 0FFFD99F4h, 5Eh,	80E4100h, 0E430283h
		dd 0A530230h, 0C341080Eh, 0B41040Eh, 14h, 0
		dd 527A01h, 1087C01h, 4040C1Bh,	188h, 3Ch, 1Ch,	0FFFD9A18h
		dd 7Fh,	80E4100h, 0E410285h, 4103870Ch,	486100Eh, 83140E41h
		dd 400E4305h, 0E0A6A02h, 0EC34114h, 0EC64110h, 0EC7410Ch
		dd 0EC54108h, 0B4104h, 34h, 5Ch, 0FFFD9A58h, 59h, 80E4100h
		dd 0E410287h, 4103860Ch, 483100Eh, 2300E43h, 100E0A46h
		dd 0C0EC341h, 80EC641h,	40EC741h, 0B41h, 34h, 94h, 0FFFD9A7Ch
		dd 6Ah,	80E4100h, 0E410287h, 4103860Ch,	483100Eh, 2300E43h
		dd 100E0A5Bh, 0C0EC341h, 80EC641h, 40EC741h, 0B41h, 20h
		dd 0CCh, 0FFFD9AB0h, 77h, 80E4100h, 0E430283h, 0A5E0230h
		dd 0C341080Eh, 0B41040Eh, 34h, 0F0h, 0FFFD9B04h, 0A4h
		dd 80E4100h, 0E410287h,	4103860Ch, 483100Eh, 2300E43h
		dd 100E0A73h, 0C0EC341h, 80EC641h, 40EC741h, 0B44h, 14h
		dd 0
		dd 527A01h, 1087C01h, 4040C1Bh,	188h, 3Ch, 1Ch,	0FFFD9B58h
		dd 211h, 80E4100h, 0E410285h, 4103870Ch, 486100Eh, 83140E41h
		dd 600E4305h, 0A020003h, 0C341140Eh, 0C641100Eh, 0C7410C0Eh
		dd 0C541080Eh, 0B41040Eh, 3Ch, 5Ch, 0FFFD9D2Ch,	63Eh, 80E4100h
		dd 0E410285h, 4103870Ch, 486100Eh, 83140E41h, 0A00E4605h
		dd 0A800201h, 0C341140Eh, 0C641100Eh, 0C7410C0Eh, 0C541080Eh
		dd 0B42040Eh, 44h, 9Ch,	0FFFDA32Ch, 16Eh, 80E4100h, 0E410287h
		dd 4103860Ch, 483100Eh,	2400E43h, 100E0A64h, 0C0EC341h
		dd 80EC641h, 40EC741h, 0A530B47h, 0C341100Eh, 0C6410C0Eh
		dd 0C741080Eh, 0B42040Eh, 20h, 0E4h, 0FFFDA454h, 4Dh, 80E4100h
		dd 0E430287h, 0A420250h, 0C741080Eh, 0B41040Eh,	34h, 108h
		dd 0FFFDA480h, 76h, 80E4100h, 0E410287h, 4103860Ch, 483100Eh
		dd 2500E43h, 100E0A52h,	0C0EC341h, 80EC641h, 40EC741h
		dd 0B41h, 3Ch, 140h, 0FFFDA4C0h, 107h, 80E4100h, 0E410285h
		dd 4103870Ch, 486100Eh,	83140E41h, 800E4305h, 0AB70201h
		dd 0C341140Eh, 0C641100Eh, 0C7410C0Eh, 0C541080Eh, 0B42040Eh
		dd 6Ch,	180h, 0FFFDA588h, 465h,	80E4100h, 0E410285h, 4103870Ch
		dd 486100Eh, 83140E41h,	600E4305h, 0A02EA03h, 0C341140Eh
		dd 0C641100Eh, 0C7410C0Eh, 0C541080Eh, 0B47040Eh, 0E0AB802h
		dd 0EC34114h, 0EC64110h, 0EC7410Ch, 0EC54108h, 750B4404h
		dd 41140E0Ah, 41100EC3h, 410C0EC6h, 41080EC7h, 47040EC5h
		dd 0Bh,	14h, 0
		dd 527A01h, 1087C01h, 4040C1Bh,	188h, 2Ch, 1Ch,	0FFFDA968h
		dd 6Dh,	80E4100h, 0E410286h, 4303830Ch,	5A02200Eh, 410C0E0Ah
		dd 41080EC3h, 43040EC6h, 0Bh, 54h, 4Ch,	0FFFDA9A8h, 117h
		dd 80E4100h, 0E410285h,	4103870Ch, 486100Eh, 83140E41h
		dd 500E4305h, 0E0AAF02h, 0EC34114h, 0EC64110h, 0EC7410Ch
		dd 0EC54108h, 20B4204h,	140E0A4Dh, 100EC341h, 0C0EC641h
		dd 80EC741h, 40EC541h, 0B45h, 18h, 0A4h, 0FFFDAA68h, 3Ch
		dd 300E4300h, 40E0A73h,	0B41h, 3Ch, 0C0h, 0FFFDAA88h, 25Eh
		dd 80E4100h, 0E410285h,	4103870Ch, 486100Eh, 83140E41h
		dd 400E4305h, 0A024D03h, 0C341140Eh, 0C641100Eh, 0C7410C0Eh
		dd 0C541080Eh, 0B41040Eh, 18h, 100h, 0FFFDACA8h, 0A1h
		dd 400E4300h, 0E0A7102h, 0B4404h, 20h, 11Ch, 0FFFDAD30h
		dd 66h,	80E4100h, 0E430283h, 0E0A7530h,	0EC34108h, 0B4204h
		dd 20h,	140h, 0FFFDAD74h, 7Eh, 80E4100h, 0E430283h, 0E0A7530h
		dd 0EC34108h, 0B4204h, 20h, 164h, 0FFFDADD0h, 5Ah, 80E4100h
		dd 0E430283h, 0A4B0230h, 0C341080Eh, 0B45040Eh,	3Ch, 188h
		dd 0FFFDAE08h, 0D0h, 80E4100h, 0E410285h, 4103870Ch, 486100Eh
		dd 83140E41h, 400E4305h, 0E0A6102h, 0EC34114h, 0EC64110h
		dd 0EC7410Ch, 0EC54108h, 0B4404h, 20h, 1C8h, 0FFFDAE98h
		dd 6Ah,	80E4100h, 0E430283h, 0A4D0230h,	0C341080Eh, 0B42040Eh
		dd 18h,	1ECh, 0FFFDAEE0h, 3Bh, 200E4300h, 40E0A6Eh, 0B45h
		dd 40h,	208h, 0FFFDAF00h, 41Ch,	80E4100h, 0E410285h, 4103870Ch
		dd 486100Eh, 83140E41h,	800E4605h, 22A0302h, 41140E0Ah
		dd 41100EC3h, 410C0EC6h, 41080EC7h, 44040EC5h, 0Bh, 18h
		dd 24Ch, 0FFFDB2D8h, 36h, 200E4300h, 40E0A69h, 0B45h, 20h
		dd 268h, 0FFFDB2F4h, 92h, 80E4100h, 0E430283h, 0A870230h
		dd 0C341080Eh, 0B41040Eh, 34h, 28Ch, 0FFFDB364h, 5Bh, 80E4100h
		dd 0E410287h, 4103860Ch, 483100Eh, 2300E43h, 100E0A4Ch
		dd 0C0EC341h, 80EC641h,	40EC741h, 0B41h, 34h, 2C4h, 0FFFDB388h
		dd 122h, 80E4100h, 0E410287h, 4103860Ch, 483100Eh, 3300E43h
		dd 0E0A010Fh, 0EC34110h, 0EC6410Ch, 0EC74108h, 0B4504h
		dd 2Ch,	2FCh, 0FFFDB474h, 74h, 80E4100h, 0E410286h, 4303830Ch
		dd 6702300Eh, 410C0E0Ah, 41080EC3h, 41040EC6h, 0Bh, 18h
		dd 32Ch, 0FFFDB4B8h, 46h, 300E4300h, 40E0A7Dh, 0B41h, 14h
		dd 0
		dd 527A01h, 1087C01h, 4040C1Bh,	188h, 20h, 1Ch,	0FFFDB4CCh
		dd 4Ah,	80E4100h, 0E430283h, 0E0A7220h,	0EC34108h, 0B4104h
		dd 3Ch,	40h, 0FFFDB4F4h, 2CCh, 80E4100h, 0E410285h, 4103870Ch
		dd 486100Eh, 83140E41h,	400E4305h, 0A01A203h, 0C341140Eh
		dd 0C641100Eh, 0C7410C0Eh, 0C541080Eh, 0B43040Eh, 20h
		dd 80h,	0FFFDB780h, 3Ch, 80E4100h, 0E430283h, 0E0A6D30h
		dd 0EC34108h, 0B4504h, 20h, 0A4h, 0FFFDB798h, 47h, 80E4100h
		dd 0E430283h, 0E0A7830h, 0EC34108h, 0B4504h, 20h, 0C8h
		dd 0FFFDB7BCh, 4Dh, 80E4100h, 0E430283h, 0E0A7D30h, 0EC34108h
		dd 0B4204h, 34h, 0ECh, 0FFFDB7E8h, 5Dh,	80E4100h, 0E410287h
		dd 4103860Ch, 483100Eh,	2300E43h, 100E0A4Ah, 0C0EC341h
		dd 80EC641h, 40EC741h, 0B45h, 40h, 124h, 0FFFDB810h, 11Bh
		dd 80E4100h, 0E410285h,	4103870Ch, 486100Eh, 83140E41h
		dd 800E4305h, 10A0301h,	41140E0Ah, 41100EC3h, 410C0EC6h
		dd 41080EC7h, 41040EC5h, 0Bh, 3Ch, 168h, 0FFFDB8E8h, 0E8h
		dd 80E4100h, 0E410285h,	4103870Ch, 486100Eh, 83140E41h
		dd 700E4305h, 0E0AD702h, 0EC34114h, 0EC64110h, 0EC7410Ch
		dd 0EC54108h, 0B4104h, 20h, 1A8h, 0FFFDB990h, 41h, 80E4100h
		dd 0E430283h, 0E0A7230h, 0EC34108h, 0B4504h, 3Ch, 1CCh
		dd 0FFFDB9B0h, 181h, 80E4100h, 0E410285h, 4103870Ch, 486100Eh
		dd 83140E41h, 600E4305h, 0A015F03h, 0C341140Eh,	0C641100Eh
		dd 0C7410C0Eh, 0C541080Eh, 0B45040Eh, 38h, 20Ch, 0FFFDBAF4h
		dd 91h,	80E4100h, 0E410286h, 4303830Ch,	5002300Eh, 410C0E0Ah
		dd 41080EC3h, 41040EC6h, 0E0A6D0Bh, 0EC3410Ch, 0EC64108h
		dd 0B4504h, 20h, 248h, 0FFFDBB4Ch, 7Ah,	80E4100h, 0E430283h
		dd 0A530230h, 0C341080Eh, 0B44040Eh, 20h, 26Ch,	0FFFDBBA4h
		dd 72h,	80E4100h, 0E430283h, 0A4B0230h,	0C341080Eh, 0B44040Eh
		dd 40h,	290h, 0FFFDBBF4h, 1BAh,	80E4100h, 0E410285h, 4103870Ch
		dd 486100Eh, 83140E41h,	800E4305h, 1A90301h, 41140E0Ah
		dd 41100EC3h, 410C0EC6h, 41080EC7h, 41040EC5h, 0Bh, 34h
		dd 2D4h, 0FFFDBD6Ch, 1A9h, 80E4100h, 0E410287h,	4103860Ch
		dd 483100Eh, 3300E43h, 0E0A0159h, 0EC34110h, 0EC6410Ch
		dd 0EC74108h, 0B4204h, 2Ch, 30Ch, 0FFFDBEE0h, 66h, 80E4100h
		dd 0E410286h, 4303830Ch, 5902400Eh, 410C0E0Ah, 41080EC3h
		dd 41040EC6h, 0Bh, 3Ch,	33Ch, 0FFFDBF18h, 0C0h,	80E4100h
		dd 0E410285h, 4103870Ch, 486100Eh, 83140E41h, 500E4305h
		dd 0E0AAF02h, 0EC34114h, 0EC64110h, 0EC7410Ch, 0EC54108h
		dd 0B4104h, 18h, 37Ch, 0FFFDBF98h, 3Ah,	300E4300h, 40E0A71h
		dd 0B41h, 18h, 398h, 0FFFDBFB8h, 3Ah, 300E4300h, 40E0A71h
		dd 0B41h, 2Ch, 3B4h, 0FFFDBFD8h, 7Bh, 80E4100h,	0E410286h
		dd 4303830Ch, 6A02300Eh, 410C0E0Ah, 41080EC3h, 45040EC6h
		dd 0Bh,	18h, 3E4h, 0FFFDC024h, 3Ah, 300E4300h, 40E0A6Dh
		dd 0B45h, 18h, 400h, 0FFFDC044h, 3Ah, 300E4300h, 40E0A6Dh
		dd 0B45h, 54h, 41Ch, 0FFFDC064h, 191h, 80E4100h, 0E410285h
		dd 4103870Ch, 486100Eh,	83140E41h, 800E4305h, 0A4E0201h
		dd 0C341140Eh, 0C641100Eh, 0C7410C0Eh, 0C541080Eh, 0B43040Eh
		dd 0A012703h, 0C341140Eh, 0C641100Eh, 0C7410C0Eh, 0C541080Eh
		dd 0B45040Eh, 20h, 474h, 0FFFDC1A0h, 5Dh, 80E4100h, 0E430283h
		dd 0A4E0230h, 0C341080Eh, 0B45040Eh, 34h, 498h,	0FFFDC1DCh
		dd 12Ah, 80E4100h, 0E410287h, 4103860Ch, 483100Eh, 2400E43h
		dd 100E0A4Bh, 0C0EC341h, 80EC641h, 40EC741h, 0B44h, 40h
		dd 4D0h, 0FFFDC2D0h, 140h, 80E4100h, 0E410285h,	4103870Ch
		dd 486100Eh, 83140E41h,	800E4305h, 12F0301h, 41140E0Ah
		dd 41100EC3h, 410C0EC6h, 41080EC7h, 41040EC5h, 0Bh, 54h
		dd 514h, 0FFFDC3CCh, 230h, 80E4100h, 0E410285h,	4103870Ch
		dd 486100Eh, 83140E41h,	900E4305h, 0A4E0201h, 0C341140Eh
		dd 0C641100Eh, 0C7410C0Eh, 0C541080Eh, 0B43040Eh, 0A01BE03h
		dd 0C341140Eh, 0C641100Eh, 0C7410C0Eh, 0C541080Eh, 0B46040Eh
		dd 3Ch,	56Ch, 0FFFDC5A4h, 8Dh, 80E4100h, 0E410285h, 4103870Ch
		dd 486100Eh, 83140E41h,	400E4305h, 0E0A7802h, 0EC34114h
		dd 0EC64110h, 0EC7410Ch, 0EC54108h, 0B4504h, 2Ch, 5ACh
		dd 0FFFDC5F4h, 61h, 80E4100h, 0E410286h, 4303830Ch, 5402300Eh
		dd 410C0E0Ah, 41080EC3h, 41040EC6h, 0Bh, 3Ch, 5DCh, 0FFFDC628h
		dd 477h, 80E4100h, 0E410285h, 4103870Ch, 486100Eh, 83140E41h
		dd 700E4305h, 0A01D003h, 0C341140Eh, 0C641100Eh, 0C7410C0Eh
		dd 0C541080Eh, 0B41040Eh, 34h, 61Ch, 0FFFDCA60h, 0BBh
		dd 80E4100h, 0E410287h,	4103860Ch, 483100Eh, 2300E43h
		dd 100E0A62h, 0C0EC341h, 80EC641h, 40EC741h, 0B41h, 20h
		dd 654h, 0FFFDCAE4h, 51h, 80E4100h, 0E430283h, 0A460230h
		dd 0C341080Eh, 0B41040Eh, 3Ch, 678h, 0FFFDCB14h, 23Ah
		dd 80E4100h, 0E410285h,	4103870Ch, 486100Eh, 83140E41h
		dd 900E4305h, 0ACA0201h, 0C341140Eh, 0C641100Eh, 0C7410C0Eh
		dd 0C541080Eh, 0B43040Eh, 2Ch, 6B8h, 0FFFDCD10h, 7Ch, 80E4100h
		dd 0E430283h, 0A560230h, 0C341080Eh, 0B45040Eh,	80E0A51h
		dd 40EC341h, 0B45h, 2Ch, 6E8h, 0FFFDCD5Ch, 5Ch,	80E4100h
		dd 0E410286h, 4303830Ch, 4B02300Eh, 410C0E0Ah, 41080EC3h
		dd 45040EC6h, 0Bh, 20h,	718h, 0FFFDCD88h, 47h, 80E4100h
		dd 0E430283h, 0E0A7830h, 0EC34108h, 0B4504h, 2Ch, 73Ch
		dd 0FFFDCDACh, 70h, 80E4100h, 0E410286h, 4303830Ch, 4B02300Eh
		dd 410C0E0Ah, 41080EC3h, 46040EC6h, 0Bh, 3Ch, 76Ch, 0FFFDCDECh
		dd 86h,	80E4100h, 0E410285h, 4103870Ch,	486100Eh, 83140E41h
		dd 400E4305h, 0E0A6002h, 0EC34114h, 0EC64110h, 0EC7410Ch
		dd 0EC54108h, 0B4504h, 2Ch, 7ACh, 0FFFDCE34h, 95h, 80E4100h
		dd 0E410286h, 4303830Ch, 8802400Eh, 410C0E0Ah, 41080EC3h
		dd 41040EC6h, 0Bh, 2Ch,	7DCh, 0FFFDCE9Ch, 0A1h,	80E4100h
		dd 0E410286h, 4303830Ch, 9402400Eh, 410C0E0Ah, 41080EC3h
		dd 41040EC6h, 0Bh
		dd 2Ch,	80Ch, 0FFFDCF10h, 0BFh,	80E4100h, 0E410286h, 4303830Ch
		dd 0A802400Eh, 410C0E0Ah, 41080EC3h, 41040EC6h,	0Bh, 34h
		dd 83Ch, 0FFFDCFA0h, 9Ch, 80E4100h, 0E410287h, 4103860Ch
		dd 483100Eh, 2300E43h, 100E0A8Dh, 0C0EC341h, 80EC641h
		dd 40EC741h, 0B41h, 3Ch, 874h, 0FFFDD004h, 197h, 80E4100h
		dd 0E410285h, 4103870Ch, 486100Eh, 83140E41h, 600E4305h
		dd 0E0AE002h, 0EC34114h, 0EC64110h, 0EC7410Ch, 0EC54108h
		dd 0B4104h, 3Ch, 8B4h, 0FFFDD15Ch, 1A0h, 80E4100h, 0E410285h
		dd 4103870Ch, 486100Eh,	83140E41h, 600E4305h, 0A013003h
		dd 0C341140Eh, 0C641100Eh, 0C7410C0Eh, 0C541080Eh, 0B41040Eh
		dd 40h,	8F4h, 0FFFDD2BCh, 221h,	80E4100h, 0E410285h, 4103870Ch
		dd 486100Eh, 83140E41h,	800E4305h, 1A80301h, 41140E0Ah
		dd 41100EC3h, 410C0EC6h, 41080EC7h, 41040EC5h, 0Bh, 34h
		dd 938h, 0FFFDD49Ch, 214h, 80E4100h, 0E410287h,	4103860Ch
		dd 483100Eh, 3400E43h, 0E0A016Ah, 0EC34110h, 0EC6410Ch
		dd 0EC74108h, 0B4104h, 3Ch, 970h, 0FFFDD678h, 12Dh, 80E4100h
		dd 0E410285h, 4103870Ch, 486100Eh, 83140E41h, 500E4305h
		dd 0E0AD102h, 0EC34114h, 0EC64110h, 0EC7410Ch, 0EC54108h
		dd 0B4104h, 34h, 9B0h, 0FFFDD768h, 7Eh,	80E4100h, 0E410287h
		dd 4103860Ch, 483100Eh,	2300E43h, 100E0A6Fh, 0C0EC341h
		dd 80EC641h, 40EC741h, 0B41h, 34h, 9E8h, 0FFFDD7B0h, 5Eh
		dd 80E4100h, 0E410287h,	4103860Ch, 483100Eh, 2300E43h
		dd 100E0A4Fh, 0C0EC341h, 80EC641h, 40EC741h, 0B41h, 2Ch
		dd 0A20h, 0FFFDD7D8h, 129h, 80E4100h, 0E410286h, 4603830Ch
		dd 202C00Eh, 0C0E0A67h,	80EC341h, 40EC641h, 0B43h, 3Ch
		dd 0A50h, 0FFFDD8D4h, 2B2h, 80E4100h, 0E410285h, 4103870Ch
		dd 486100Eh, 83140E41h,	600E4305h, 0A020503h, 0C341140Eh
		dd 0C641100Eh, 0C7410C0Eh, 0C541080Eh, 0B44040Eh, 3Ch
		dd 0A90h, 0FFFDDB48h, 1A3h, 80E4100h, 0E410285h, 4103870Ch
		dd 486100Eh, 83140E41h,	600E4305h, 0A013003h, 0C341140Eh
		dd 0C641100Eh, 0C7410C0Eh, 0C541080Eh, 0B41040Eh, 2Ch
		dd 0AD0h, 0FFFDDCACh, 65h, 80E4100h, 0E410286h,	4303830Ch
		dd 5802300Eh, 410C0E0Ah, 41080EC3h, 41040EC6h, 0Bh, 3Ch
		dd 0B00h, 0FFFDDCE4h, 103h, 80E4100h, 0E410285h, 4103870Ch
		dd 486100Eh, 83140E41h,	500E4305h, 0E0AEA02h, 0EC34114h
		dd 0EC64110h, 0EC7410Ch, 0EC54108h, 0B4104h, 3Ch, 0B40h
		dd 0FFFDDDA8h, 36Bh, 80E4100h, 0E410285h, 4103870Ch, 486100Eh
		dd 83140E41h, 700E4305h, 0A015403h, 0C341140Eh,	0C641100Eh
		dd 0C7410C0Eh, 0C541080Eh, 0B41040Eh, 3Ch, 0B80h, 0FFFDE0D4h
		dd 1F5h, 80E4100h, 0E410285h, 4103870Ch, 486100Eh, 83140E41h
		dd 0E00E4605h, 0AE90202h, 0C341140Eh, 0C641100Eh, 0C7410C0Eh
		dd 0C541080Eh, 0B41040Eh, 54h, 0BC0h, 0FFFDE28Ch, 1FEh
		dd 80E4100h, 0E410285h,	4103870Ch, 486100Eh, 83140E41h
		dd 500E4305h, 0E0AF402h, 0EC34114h, 0EC64110h, 0EC7410Ch
		dd 0EC54108h, 20B4104h,	140E0AF0h, 100EC341h, 0C0EC641h
		dd 80EC741h, 40EC541h, 0B45h, 40h, 0C18h, 0FFFDE434h, 242h
		dd 80E4100h, 0E410285h,	4103870Ch, 486100Eh, 83140E41h
		dd 0E00E4605h, 1300302h, 41140E0Ah, 41100EC3h, 410C0EC6h
		dd 41080EC7h, 42040EC5h, 0Bh, 18h, 0C5Ch, 0FFFDE634h, 41h
		dd 300E4300h, 40E0A78h,	0B41h, 20h, 0C78h, 0FFFDE65Ch
		dd 0C7h, 80E4100h, 0E430283h, 0A6A0240h, 0C341080Eh, 0B41040Eh
		dd 34h,	0C9Ch, 0FFFDE700h, 0BFh, 80E4100h, 0E410287h, 4103860Ch
		dd 483100Eh, 2300E43h, 100E0A95h, 0C0EC341h, 80EC641h
		dd 40EC741h, 0B42h, 34h, 0CD4h,	0FFFDE788h, 99h, 80E4100h
		dd 0E410287h, 4103860Ch, 483100Eh, 2400E43h, 100E0A86h
		dd 0C0EC341h, 80EC641h,	40EC741h, 0B41h, 3Ch, 0D0Ch, 0FFFDE7ECh
		dd 2AFh, 80E4100h, 0E410285h, 4103870Ch, 486100Eh, 83140E41h
		dd 600E4305h, 0A011C03h, 0C341140Eh, 0C641100Eh, 0C7410C0Eh
		dd 0C541080Eh, 0B41040Eh, 34h, 0D4Ch, 0FFFDEA5Ch, 0F3h
		dd 80E4100h, 0E410287h,	4103860Ch, 483100Eh, 2400E43h
		dd 100E0A53h, 0C0EC341h, 80EC641h, 40EC741h, 0B44h, 18h
		dd 0D84h, 0FFFDEB18h, 34h, 300E4300h, 40E0A6Bh,	0B41h
		dd 3Ch,	0DA0h, 0FFFDEB30h, 2D6h, 80E4100h, 0E410285h, 4103870Ch
		dd 486100Eh, 83140E41h,	900E4305h, 0A640201h, 0C341140Eh
		dd 0C641100Eh, 0C7410C0Eh, 0C541080Eh, 0B41040Eh, 3Ch
		dd 0DE0h, 0FFFDEDC8h, 0A4h, 80E4100h, 0E410285h, 4103870Ch
		dd 486100Eh, 83140E41h,	500E4305h, 0E0A9302h, 0EC34114h
		dd 0EC64110h, 0EC7410Ch, 0EC54108h, 0B4104h, 3Ch, 0E20h
		dd 0FFFDEE2Ch, 8Ch, 80E4100h, 0E410285h, 4103870Ch, 486100Eh
		dd 83140E41h, 500E4305h, 0E0A7B02h, 0EC34114h, 0EC64110h
		dd 0EC7410Ch, 0EC54108h, 0B4104h, 3Ch, 0E60h, 0FFFDEE78h
		dd 9Ch,	80E4100h, 0E410285h, 4103870Ch,	486100Eh, 83140E41h
		dd 600E4305h, 0E0A8B02h, 0EC34114h, 0EC64110h, 0EC7410Ch
		dd 0EC54108h, 0B4104h, 3Ch, 0EA0h, 0FFFDEED4h, 99h, 80E4100h
		dd 0E410285h, 4103870Ch, 486100Eh, 83140E41h, 400E4305h
		dd 0E0A8802h, 0EC34114h, 0EC64110h, 0EC7410Ch, 0EC54108h
		dd 0B4104h, 3Ch, 0EE0h,	0FFFDEF30h, 0B7h, 80E4100h, 0E410285h
		dd 4103870Ch, 486100Eh,	83140E41h, 600E4305h, 0E0AA602h
		dd 0EC34114h, 0EC64110h, 0EC7410Ch, 0EC54108h, 0B4104h
		dd 34h,	0F20h, 0FFFDEFA8h, 17Ah, 80E4100h, 0E410287h, 4103860Ch
		dd 483100Eh, 2400E43h, 100E0AD1h, 0C0EC341h, 80EC641h
		dd 40EC741h, 0B42h, 3Ch, 0F58h,	0FFFDF0ECh, 730h, 80E4100h
		dd 0E410285h, 4103870Ch, 486100Eh, 83140E41h, 600E4305h
		dd 0A03BD03h, 0C341140Eh, 0C641100Eh, 0C7410C0Eh, 0C541080Eh
		dd 0B44040Eh, 3Ch, 0F98h, 0FFFDF7DCh, 400h, 80E4100h, 0E410285h
		dd 4103870Ch, 486100Eh,	83140E41h, 600E4305h, 0A01CC03h
		dd 0C341140Eh, 0C641100Eh, 0C7410C0Eh, 0C541080Eh, 0B41040Eh
		dd 20h,	0FD8h, 0FFFDFB9Ch, 41h,	80E4100h, 0E430283h, 0E0A7230h
		dd 0EC34108h, 0B4504h, 40h, 0FFCh, 0FFFDFBBCh, 142h
		dd 80E4100h, 0E410285h,	4103870Ch, 486100Eh, 83140E41h
		dd 0A00E4605h, 1250301h, 41140E0Ah, 41100EC3h, 410C0EC6h
		dd 41080EC7h, 41040EC5h, 0Bh, 40h, 1040h, 0FFFDFCBCh, 48Fh
		dd 80E4100h, 0E410285h,	4103870Ch, 486100Eh, 83140E41h
		dd 0E00E4605h, 1130302h, 41140E0Ah, 41100EC3h, 410C0EC6h
		dd 41080EC7h, 43040EC5h, 0Bh, 3Ch, 1084h, 0FFFE0108h, 185h
		dd 80E4100h, 0E410285h,	4103870Ch, 486100Eh, 83140E41h
		dd 800E4305h, 0A9D0201h, 0C341140Eh, 0C641100Eh, 0C7410C0Eh
		dd 0C541080Eh, 0B44040Eh, 20h, 10C4h, 0FFFE0250h, 53h
		dd 80E4100h, 0E430283h,	0A480230h, 0C341080Eh, 0B41040Eh
		dd 34h,	10E8h, 0FFFE0280h, 39Fh, 80E4100h, 0E410287h, 4103860Ch
		dd 483100Eh, 2300E43h, 100E0A7Eh, 0C0EC341h, 80EC641h
		dd 40EC741h, 0B41h, 18h, 1120h,	0FFFE05E8h, 24Ah, 300E4300h
		dd 0E0AC402h, 0B4104h, 48h, 113Ch, 0FFFE0818h, 0C2h, 80E4100h
		dd 0E410287h, 4103860Ch, 483100Eh, 2300E43h, 100E0A47h
		dd 0C0EC341h, 80EC641h,	40EC741h, 61020B44h, 41100E0Ah
		dd 410C0EC3h, 41080EC6h, 45040EC7h, 0Bh, 2Ch, 1188h, 0FFFE0890h
		dd 8Fh,	80E4100h, 0E410286h, 4303830Ch,	4702300Eh, 410C0E0Ah
		dd 41080EC3h, 42040EC6h, 0Bh, 3Ch, 11B8h, 0FFFE08F0h, 213h
		dd 80E4100h, 0E410285h,	4103870Ch, 486100Eh, 83140E41h
		dd 600E4305h, 0E0A4302h, 0EC34114h, 0EC64110h, 0EC7410Ch
		dd 0EC54108h, 0B4204h, 18h, 11F8h, 0FFFE0AC4h, 40h, 300E4300h
		dd 40E0A63h, 0B42h, 3Ch, 1214h,	0FFFE0AE8h, 1429h, 80E4100h
		dd 0E410285h, 4103870Ch, 486100Eh, 83140E41h, 0C00E4605h
		dd 0A730201h, 0C341140Eh, 0C641100Eh, 0C7410C0Eh, 0C541080Eh
		dd 0B43040Eh, 20h, 1254h, 0FFFE1ED4h, 46h, 80E4100h, 0E430283h
		dd 0E0A7730h, 0EC34108h, 0B4504h, 34h, 1278h, 0FFFE1EF8h
		dd 70h,	80E4100h, 0E410287h, 4103860Ch,	483100Eh, 2300E43h
		dd 100E0A61h, 0C0EC341h, 80EC641h, 40EC741h, 0B41h, 3Ch
		dd 12B0h, 0FFFE1F30h, 13Ah, 80E4100h, 0E410285h, 4103870Ch
		dd 486100Eh, 83140E41h,	500E4305h, 0E0A6F02h, 0EC34114h
		dd 0EC64110h, 0EC7410Ch, 0EC54108h, 0B4204h, 54h, 12F0h
		dd 0FFFE202Ch, 0D33h, 80E4100h,	0E410285h, 4103870Ch, 486100Eh
		dd 83140E41h, 600E4305h, 0A0A1403h, 0C341140Eh,	0C641100Eh
		dd 0C7410C0Eh, 0C541080Eh, 0B41040Eh, 0E0A6702h, 0EC34114h
		dd 0EC64110h, 0EC7410Ch, 0EC54108h, 0B4504h, 34h, 1348h
		dd 0FFFE2D08h, 0C9h, 80E4100h, 0E410287h, 4103860Ch, 483100Eh
		dd 2300E43h, 100E0ABAh,	0C0EC341h, 80EC641h, 40EC741h
		dd 0B41h, 3Ch, 1380h, 0FFFE2D9Ch, 19Bh,	80E4100h, 0E410285h
		dd 4103870Ch, 486100Eh,	83140E41h, 700E4305h, 0A011903h
		dd 0C341140Eh, 0C641100Eh, 0C7410C0Eh, 0C541080Eh, 0B44040Eh
		dd 2Ch,	13C0h, 0FFFE2EF8h, 54h,	80E4100h, 0E410286h, 4303830Ch
		dd 4702300Eh, 410C0E0Ah, 41080EC3h, 41040EC6h, 0Bh, 3Ch
		dd 13F0h, 0FFFE2F1Ch, 145h, 80E4100h, 0E410285h, 4103870Ch
		dd 486100Eh, 83140E41h,	500E4305h, 0E0A8C02h, 0EC34114h
		dd 0EC64110h, 0EC7410Ch, 0EC54108h, 0B4104h, 40h, 1430h
		dd 0FFFE3024h, 88Eh, 80E4100h, 0E410285h, 4103870Ch, 486100Eh
		dd 83140E41h, 0A00E4605h, 32C0301h, 41140E0Ah, 41100EC3h
		dd 410C0EC6h, 41080EC7h, 42040EC5h, 0Bh, 38h, 1474h, 0FFFE3870h
		dd 7Fh,	80E4100h, 0E410286h, 4303830Ch,	5302300Eh, 410C0E0Ah
		dd 41080EC3h, 42040EC6h, 0E0A570Bh, 0EC3410Ch, 0EC64108h
		dd 0B4504h, 20h, 14B0h,	0FFFE38B4h, 41h, 80E4100h, 0E430283h
		dd 0E0A7230h, 0EC34108h, 0B4504h, 2Ch, 14D4h, 0FFFE38D4h
		dd 5Ah,	80E4100h, 0E410286h, 4303830Ch,	4902300Eh, 410C0E0Ah
		dd 41080EC3h, 45040EC6h, 0Bh, 48h, 1504h, 0FFFE3900h, 0FAh
		dd 80E4100h, 0E410287h,	4103860Ch, 483100Eh, 2300E43h
		dd 100E0A6Ah, 0C0EC341h, 80EC641h, 40EC741h, 4F020B41h
		dd 41100E0Ah, 410C0EC3h, 41080EC6h, 46040EC7h, 0Bh, 68h
		dd 1550h, 0FFFE39B0h, 29Fh, 80E4100h, 0E410285h, 4103870Ch
		dd 486100Eh, 83140E41h,	600E4305h, 0E0A8502h, 0EC34114h
		dd 0EC64110h, 0EC7410Ch, 0EC54108h, 6B0B4404h, 41140E0Ah
		dd 41100EC3h, 410C0EC6h, 41080EC7h, 45040EC5h, 0A61020Bh
		dd 0C341140Eh, 0C641100Eh, 0C7410C0Eh, 0C541080Eh, 0B47040Eh
		dd 44h,	15BCh, 0FFFE3BE4h, 9Ch,	80E4100h, 0E410287h, 4103860Ch
		dd 483100Eh, 7A300E43h,	41100E0Ah, 410C0EC3h, 41080EC6h
		dd 41040EC7h, 0A4B020Bh, 0C341100Eh, 0C6410C0Eh, 0C741080Eh
		dd 0B45040Eh, 54h, 1604h, 0FFFE3C38h, 0A9h, 80E4100h, 0E410285h
		dd 4103870Ch, 486100Eh,	83140E41h, 500E4305h, 0E0A4E02h
		dd 0EC34114h, 0EC64110h, 0EC7410Ch, 0EC54108h, 7F0B4304h
		dd 41140E0Ah, 41100EC3h, 410C0EC6h, 41080EC7h, 45040EC5h
		dd 0Bh,	3Ch, 165Ch, 0FFFE3C8Ch,	0A4h, 80E4100h,	0E410285h
		dd 4103870Ch, 486100Eh,	83140E41h, 400E4305h, 140E0A7Ah
		dd 100EC341h, 0C0EC641h, 80EC741h, 40EC541h, 0B43h, 54h
		dd 169Ch, 0FFFE3CF0h, 162h, 80E4100h, 0E410285h, 4103870Ch
		dd 486100Eh, 83140E41h,	500E4305h, 0E0A4602h, 0EC34114h
		dd 0EC64110h, 0EC7410Ch, 0EC54108h, 20B4304h, 140E0AC3h
		dd 100EC341h, 0C0EC641h, 80EC741h, 40EC541h, 0B45h, 28h
		dd 16F4h, 0FFFE3DFCh, 4Dh, 80E4100h, 0E410286h,	4303830Ch
		dd 0A7C300Eh, 0C3410C0Eh, 0C641080Eh, 0B45040Eh, 2Ch, 1720h
		dd 0FFFE3E20h, 0BEh, 80E4100h, 0E410286h, 4303830Ch, 0B102300Eh
		dd 410C0E0Ah, 41080EC3h, 41040EC6h, 0Bh, 2Ch, 1750h, 0FFFE3EB0h
		dd 93h,	80E4100h, 0E410286h, 4303830Ch,	8602300Eh, 410C0E0Ah
		dd 41080EC3h, 41040EC6h, 0Bh, 18h, 1780h, 0FFFE3F14h, 3Fh
		dd 300E4300h, 40E0A72h,	0B45h, 54h, 179Ch, 0FFFE3F38h
		dd 1CAh, 80E4100h, 0E410285h, 4103870Ch, 486100Eh, 83140E41h
		dd 400E4305h, 0E0AD002h, 0EC34114h, 0EC64110h, 0EC7410Ch
		dd 0EC54108h, 20B4104h,	140E0ABDh, 100EC341h, 0C0EC641h
		dd 80EC741h, 40EC541h, 0B47h, 3Ch, 17F4h, 0FFFE40ACh, 9Ch
		dd 80E4100h, 0E410285h
		dd 4103870Ch, 486100Eh,	83140E41h, 600E4305h, 0E0A8402h
		dd 0EC34114h, 0EC64110h, 0EC7410Ch, 0EC54108h, 0B4104h
		dd 44h,	1834h, 0FFFE4108h, 0F0h, 80E4100h, 0E410287h, 4103860Ch
		dd 483100Eh, 2300E43h, 100E0AAAh, 0C0EC341h, 80EC641h
		dd 40EC741h, 0A6F0B45h,	0C341100Eh, 0C6410C0Eh,	0C741080Eh
		dd 0B41040Eh, 3Ch, 187Ch, 0FFFE41B0h, 239h, 80E4100h, 0E410285h
		dd 4103870Ch, 486100Eh,	83140E41h, 600E4305h, 0A01E903h
		dd 0C341140Eh, 0C641100Eh, 0C7410C0Eh, 0C541080Eh, 0B41040Eh
		dd 18h,	18BCh, 0FFFE43ACh, 30h,	200E4300h, 40E0A63h, 0B45h
		dd 20h,	18D8h, 0FFFE43C0h, 57h,	80E4100h, 0E430283h, 0A420230h
		dd 0C341080Eh, 0B41040Eh, 20h, 18FCh, 0FFFE43F4h, 60h
		dd 80E4100h, 0E430283h,	0A420230h, 0C341080Eh, 0B41040Eh
		dd 3Ch,	1920h, 0FFFE4430h, 16Bh, 80E4100h, 0E410285h, 4103870Ch
		dd 486100Eh, 83140E41h,	400E4305h, 0E0AC902h, 0EC34114h
		dd 0EC64110h, 0EC7410Ch, 0EC54108h, 0B4404h, 3Ch, 1960h
		dd 0FFFE455Ch, 0E4h, 80E4100h, 0E410285h, 4103870Ch, 486100Eh
		dd 83140E41h, 600E4305h, 0E0A4202h, 0EC34114h, 0EC64110h
		dd 0EC7410Ch, 0EC54108h, 0B4304h, 6Ch, 19A0h, 0FFFE4600h
		dd 197h, 80E4100h, 0E410285h, 4103870Ch, 486100Eh, 83140E41h
		dd 500E4305h, 0E0AC202h, 0EC34114h, 0EC64110h, 0EC7410Ch
		dd 0EC54108h, 20B4304h,	140E0A5Dh, 100EC341h, 0C0EC641h
		dd 80EC741h, 40EC541h, 4F020B47h, 41140E0Ah, 41100EC3h
		dd 410C0EC6h, 41080EC7h, 45040EC5h, 0Bh, 2Ch, 1A10h, 0FFFE4728h
		dd 52h,	80E4100h, 0E410286h, 4303830Ch,	4502300Eh, 410C0E0Ah
		dd 41080EC3h, 41040EC6h, 0Bh, 2Ch, 1A40h, 0FFFE474Ch, 61h
		dd 80E4100h, 0E410286h,	4303830Ch, 5402300Eh, 410C0E0Ah
		dd 41080EC3h, 41040EC6h, 0Bh, 2Ch, 1A70h, 0FFFE4780h, 68h
		dd 80E4100h, 0E410286h,	4303830Ch, 5B02300Eh, 410C0E0Ah
		dd 41080EC3h, 41040EC6h, 0Bh, 2Ch, 1AA0h, 0FFFE47B8h, 61h
		dd 80E4100h, 0E410286h,	4303830Ch, 5402300Eh, 410C0E0Ah
		dd 41080EC3h, 41040EC6h, 0Bh, 2Ch, 1AD0h, 0FFFE47ECh, 68h
		dd 80E4100h, 0E410286h,	4303830Ch, 5B02300Eh, 410C0E0Ah
		dd 41080EC3h, 41040EC6h, 0Bh, 54h, 1B00h, 0FFFE4824h, 847h
		dd 80E4100h, 0E410285h,	4103870Ch, 486100Eh, 83140E41h
		dd 800E4305h, 7FD0301h,	41140E0Ah, 41100EC3h, 410C0EC6h
		dd 41080EC7h, 48040EC5h, 0E0A6D0Bh, 0EC34114h, 0EC64110h
		dd 0EC7410Ch, 0EC54108h, 0B4104h, 54h, 1B58h, 0FFFE5014h
		dd 368h, 80E4100h, 0E410285h, 4103870Ch, 486100Eh, 83140E41h
		dd 500E4305h, 0A012203h, 0C341140Eh, 0C641100Eh, 0C7410C0Eh
		dd 0C541080Eh, 0B47040Eh, 0E0A9902h, 0EC34114h,	0EC64110h
		dd 0EC7410Ch, 0EC54108h, 0B4304h, 3Ch, 1BB0h, 0FFFE5324h
		dd 0C7h, 80E4100h, 0E410285h, 4103870Ch, 486100Eh, 83140E41h
		dd 500E4305h, 0E0AAA02h, 0EC34114h, 0EC64110h, 0EC7410Ch
		dd 0EC54108h, 0B4304h, 3Ch, 1BF0h, 0FFFE53ACh, 870h, 80E4100h
		dd 0E410285h, 4103870Ch, 486100Eh, 83140E41h, 700E4305h
		dd 0A048C03h, 0C341140Eh, 0C641100Eh, 0C7410C0Eh, 0C541080Eh
		dd 0B41040Eh, 34h, 1C30h, 0FFFE5BDCh, 82h, 80E4100h, 0E410287h
		dd 4103860Ch, 483100Eh,	2300E43h, 100E0A73h, 0C0EC341h
		dd 80EC641h, 40EC741h, 0B41h, 34h, 1C68h, 0FFFE5C28h, 0DDh
		dd 80E4100h, 0E410287h,	4103860Ch, 483100Eh, 2300E43h
		dd 100E0ACEh, 0C0EC341h, 80EC641h, 40EC741h, 0B41h, 2Ch
		dd 1CA0h, 0FFFE5CD0h, 66h, 80E4100h, 0E430283h,	0E0A7E30h
		dd 0EC34108h, 530B4504h, 41080E0Ah, 45040EC3h, 0Bh, 2Ch
		dd 1CD0h, 0FFFE5D08h, 330h, 80E4100h, 0E410286h, 4303830Ch
		dd 2603300Eh, 0C0E0A02h, 80EC341h, 40EC641h, 0B47h, 58h
		dd 1D00h, 0FFFE6008h, 0D1h, 80E4100h, 0E410287h, 4103860Ch
		dd 483100Eh, 2300E43h, 100E0A5Fh, 0C0EC341h, 80EC641h
		dd 40EC741h, 0A570B44h,	0C341100Eh, 0C6410C0Eh,	0C741080Eh
		dd 0B46040Eh, 100E0A78h, 0C0EC341h, 80EC641h, 40EC741h
		dd 0B45h, 20h, 1D5Ch, 0FFFE6080h, 87h, 80E4100h, 0E430283h
		dd 0A690240h, 0C341080Eh, 0B42040Eh, 34h, 1D80h, 0FFFE60E4h
		dd 118h, 80E4100h, 0E410287h, 4103860Ch, 483100Eh, 2300E43h
		dd 100E0ACAh, 0C0EC341h, 80EC641h, 40EC741h, 0B41h, 18h
		dd 1DB8h, 0FFFE61C4h, 25h, 200E4300h, 40E0A5Ch,	0B41h
		dd 3Ch,	1DD4h, 0FFFE61D0h, 2C0h, 80E4100h, 0E410285h, 4103870Ch
		dd 486100Eh, 83140E41h,	600E4305h, 0A026903h, 0C341140Eh
		dd 0C641100Eh, 0C7410C0Eh, 0C541080Eh, 0B44040Eh, 14h
		dd 0
		dd 527A01h, 1087C01h, 4040C1Bh,	188h, 34h, 1Ch,	0FFFE6438h
		dd 229h, 80E4100h, 0E410287h, 4103860Ch, 483100Eh, 3400E43h
		dd 0E0A021Ah, 0EC34110h, 0EC6410Ch, 0EC74108h, 0B4104h
		dd 24h,	54h, 0FFFE662Ch, 125h, 80E4100h, 0E430283h, 10C0330h
		dd 41080E0Ah, 45040EC3h, 0Bh, 3Ch, 7Ch,	0FFFE672Ch, 91h
		dd 80E4100h, 0E410285h,	4103870Ch, 486100Eh, 83140E41h
		dd 500E4305h, 0E0A7C02h, 0EC34114h, 0EC64110h, 0EC7410Ch
		dd 0EC54108h, 0B4504h, 18h, 0BCh, 0FFFE6780h, 53h, 300E4300h
		dd 0E0A4602h, 0B4104h, 14h, 0
		dd 527A01h, 1087C01h, 4040C1Bh,	188h, 24h, 1Ch,	0FFFE67A0h
		dd 192h, 80E4100h, 0E430283h, 1130330h,	41080E0Ah, 44040EC3h
		dd 0Bh,	2Ch, 44h, 0FFFE690Ch, 133h, 80E4100h, 0E410286h
		dd 4303830Ch, 0FC02300Eh, 410C0E0Ah, 41080EC3h,	41040EC6h
		dd 0Bh,	3Ch, 74h, 0FFFE6A10h, 85h, 80E4100h, 0E410285h
		dd 4103870Ch, 486100Eh,	83140E41h, 500E4305h, 0E0A6E02h
		dd 0EC34114h, 0EC64110h, 0EC7410Ch, 0EC54108h, 0B4304h
		dd 3Ch,	0B4h, 0FFFE6A58h, 85h, 80E4100h, 0E410285h, 4103870Ch
		dd 486100Eh, 83140E41h,	400E4305h, 0E0A6D02h, 0EC34114h
		dd 0EC64110h, 0EC7410Ch, 0EC54108h, 0B4404h, 3Ch, 0F4h
		dd 0FFFE6AA0h, 112h, 80E4100h, 0E410285h, 4103870Ch, 486100Eh
		dd 83140E41h, 500E4305h, 0E0AE902h, 0EC34114h, 0EC64110h
		dd 0EC7410Ch, 0EC54108h, 0B4404h, 34h, 134h, 0FFFE6B74h
		dd 65h,	80E4100h, 0E410287h, 4103860Ch,	483100Eh, 2300E43h
		dd 100E0A52h, 0C0EC341h, 80EC641h, 40EC741h, 0B45h, 20h
		dd 16Ch, 0FFFE6BA4h, 61h, 80E4100h, 0E430283h, 0A560230h
		dd 0C341080Eh, 0B41040Eh, 38h, 190h, 0FFFE6BE4h, 286h
		dd 80E4100h, 0E410286h,	4303830Ch, 7902500Eh, 410C0E0Ah
		dd 41080EC3h, 44040EC6h, 0A6B020Bh, 0C3410C0Eh,	0C641080Eh
		dd 0B47040Eh, 34h, 1CCh, 0FFFE6E30h, 84h, 80E4100h, 0E410287h
		dd 4103860Ch, 483100Eh,	2300E43h, 100E0A75h, 0C0EC341h
		dd 80EC641h, 40EC741h, 0B41h, 2Ch, 204h, 0FFFE6E7Ch, 0B4h
		dd 80E4100h, 0E430283h,	0A5F0230h, 0C341080Eh, 0B44040Eh
		dd 80E0A53h, 40EC341h, 0B48h, 3Ch, 234h, 0FFFE6F00h, 34Ah
		dd 80E4100h, 0E410285h,	4103870Ch, 486100Eh, 83140E41h
		dd 500E4305h, 0E0AF802h, 0EC34114h, 0EC64110h, 0EC7410Ch
		dd 0EC54108h, 0B4104h, 18h, 274h, 0FFFE720Ch, 34h, 200E4300h
		dd 40E0A67h, 0B45h, 6Ch, 290h, 0FFFE7224h, 29Ah, 80E4100h
		dd 0E410285h, 4103870Ch, 486100Eh, 83140E41h, 700E4305h
		dd 0E0ADE02h, 0EC34114h, 0EC64110h, 0EC7410Ch, 0EC54108h
		dd 20B4304h, 140E0A63h,	100EC341h, 0C0EC641h, 80EC741h
		dd 40EC541h, 25030B45h,	140E0A01h, 100EC341h, 0C0EC641h
		dd 80EC741h, 40EC541h, 0B47h, 20h, 300h, 0FFFE7450h, 47h
		dd 80E4100h, 0E430283h,	0E0A7C30h, 0EC34108h, 0B4104h
		dd 2Ch,	324h, 0FFFE7474h, 0A8h,	80E4100h, 0E410286h, 4303830Ch
		dd 7602300Eh, 410C0E0Ah, 41080EC3h, 43040EC6h, 0Bh, 18h
		dd 354h, 0FFFE74ECh, 32h, 200E4300h, 40E0A65h, 0B45h, 18h
		dd 370h, 0FFFE7504h, 35h, 200E4300h, 40E0A68h, 0B45h, 28h
		dd 38Ch, 0FFFE7520h, 0C6h, 80E4100h, 0E430283h,	0E460240h
		dd 400E4334h, 80E0A6Eh,	40EC341h, 0B44h, 38h, 3B8h, 0FFFE75BCh
		dd 161h, 80E4100h, 0E430283h, 0A820230h, 0C341080Eh, 0B41040Eh
		dd 0E0A6202h, 0EC34108h, 7F0B4504h, 41080E0Ah, 48040EC3h
		dd 0Bh,	20h, 3F4h, 0FFFE76E4h, 93h, 80E4100h, 0E430283h
		dd 0A880230h, 0C341080Eh, 0B41040Eh, 68h, 418h,	0FFFE7754h
		dd 129h, 80E4100h, 0E410285h, 4103870Ch, 486100Eh, 83140E41h
		dd 400E4305h, 0E0A6002h, 0EC34114h, 0EC64110h, 0EC7410Ch
		dd 0EC54108h, 20B4504h,	140E0A75h, 100EC341h, 0C0EC641h
		dd 80EC741h, 40EC541h, 0A6F0B47h, 0C341140Eh, 0C641100Eh
		dd 0C7410C0Eh, 0C541080Eh, 0B41040Eh, 84h, 484h, 0FFFE7814h
		dd 594h, 80E4100h, 0E410285h, 4103870Ch, 486100Eh, 83140E41h
		dd 900E4305h, 12E0301h,	41140E0Ah, 41100EC3h, 410C0EC6h
		dd 41080EC7h, 43040EC5h, 0A4D020Bh, 0C341140Eh,	0C641100Eh
		dd 0C7410C0Eh, 0C541080Eh, 0B47040Eh, 0A017103h, 0C341140Eh
		dd 0C641100Eh, 0C7410C0Eh, 0C541080Eh, 0B47040Eh, 0A011203h
		dd 0C341140Eh, 0C641100Eh, 0C7410C0Eh, 0C541080Eh, 0B46040Eh
		dd 14h,	0
		dd 527A01h, 1087C01h, 4040C1Bh,	188h, 3Ch, 1Ch,	0FFFE7D08h
		dd 0F2h, 80E4100h, 0E410285h, 4103870Ch, 486100Eh, 83140E41h
		dd 500E4305h, 0E0AE102h, 0EC34114h, 0EC64110h, 0EC7410Ch
		dd 0EC54108h, 0B4104h, 3Ch, 5Ch, 0FFFE7DBCh, 4C5h, 80E4100h
		dd 0E410285h, 4103870Ch, 486100Eh, 83140E41h, 700E4305h
		dd 0E0A8002h, 0EC34114h, 0EC64110h, 0EC7410Ch, 0EC54108h
		dd 0B4104h, 3Ch, 9Ch, 0FFFE8244h, 1F8h,	80E4100h, 0E410285h
		dd 4103870Ch, 486100Eh,	83140E41h, 600E4305h, 0A015703h
		dd 0C341140Eh, 0C641100Eh, 0C7410C0Eh, 0C541080Eh, 0B42040Eh
		dd 14h,	0
		dd 527A01h, 1087C01h, 4040C1Bh,	188h, 18h, 1Ch,	0FFFE83E4h
		dd 41h,	200E4300h, 40E0A78h, 0B41h, 2Ch, 38h, 0FFFE840Ch
		dd 57h,	80E4100h, 0E410286h, 4303830Ch,	4A02300Eh, 410C0E0Ah
		dd 41080EC3h, 41040EC6h, 0Bh, 34h, 68h,	0FFFE8434h, 98h
		dd 80E4100h, 0E410287h,	4103860Ch, 483100Eh, 2300E43h
		dd 100E0A62h, 0C0EC341h, 80EC641h, 40EC741h, 0B41h, 34h
		dd 0A0h, 0FFFE8494h, 5Ch, 80E4100h, 0E410287h, 4103860Ch
		dd 483100Eh, 2300E43h, 100E0A4Dh, 0C0EC341h, 80EC641h
		dd 40EC741h, 0B41h, 14h, 0
		dd 527A01h, 1087C01h, 4040C1Bh,	188h, 18h, 1Ch,	0FFFE84A0h
		dd 37h,	200E4300h, 40E0A6Eh, 0B41h, 2Ch, 38h, 0FFFE84BCh
		dd 6Dh,	80E4100h, 0E410286h, 4303830Ch,	5B02300Eh, 410C0E0Ah
		dd 41080EC3h, 42040EC6h, 0Bh, 20h, 68h,	0FFFE84FCh, 8Bh
		dd 80E4100h, 0E430283h,	0A6E0240h, 0C341080Eh, 0B41040Eh
		dd 20h,	8Ch, 0FFFE8564h, 8Ah, 80E4100h,	0E430283h, 0A480240h
		dd 0C341080Eh, 0B43040Eh, 3Ch, 0B0h, 0FFFE85CCh, 9Ch, 80E4100h
		dd 0E410285h, 4103870Ch, 486100Eh, 83140E41h, 500E4305h
		dd 0E0A6802h, 0EC34114h, 0EC64110h, 0EC7410Ch, 0EC54108h
		dd 0B4104h, 34h, 0F0h, 0FFFE8628h, 75h,	80E4100h, 0E410287h
		dd 4103860Ch, 483100Eh,	2300E43h, 100E0A66h, 0C0EC341h
		dd 80EC641h, 40EC741h, 0B41h, 14h, 0
		dd 527A01h, 1087C01h, 4040C1Bh,	188h, 2Ch, 1Ch,	0FFFE8650h
		dd 56h,	80E4100h, 0E410286h, 4303830Ch,	4902300Eh, 410C0E0Ah
		dd 41080EC3h, 41040EC6h, 0Bh, 3Ch, 4Ch,	0FFFE8678h, 0C9h
		dd 80E4100h, 0E410285h,	4103870Ch, 486100Eh, 83140E41h
		dd 500E4305h, 0E0A7402h, 0EC34114h, 0EC64110h, 0EC7410Ch
		dd 0EC54108h, 0B4104h, 44h, 8Ch, 0FFFE8704h, 7Eh, 80E4100h
		dd 0E410287h, 4103860Ch, 483100Eh, 2300E43h, 100E0A56h
		dd 0C0EC341h, 80EC641h,	40EC741h, 0A510B45h, 0C341100Eh
		dd 0C6410C0Eh, 0C741080Eh, 0B41040Eh, 44h, 0D4h, 0FFFE873Ch
		dd 76h,	80E4100h, 0E410287h, 4103860Ch,	483100Eh, 2300E43h
		dd 100E0A4Eh, 0C0EC341h, 80EC641h, 40EC741h, 0A510B45h
		dd 0C341100Eh, 0C6410C0Eh, 0C741080Eh, 0B41040Eh, 38h
		dd 11Ch, 0FFFE876Ch, 69h, 80E4100h, 0E410286h, 4303830Ch
		dd 4102300Eh, 410C0E0Ah, 41080EC3h, 48040EC6h, 0E0A510Bh
		dd 0EC3410Ch, 0EC64108h, 0B4104h, 18h, 158h, 0FFFE879Ch
		dd 39h,	200E4300h, 40E0A6Ch, 0B41h, 18h, 174h, 0FFFE87BCh
		dd 45h,	200E4300h, 40E0A75h, 0B44h, 3Ch, 190h, 0FFFE87E8h
		dd 9Dh,	80E4100h, 0E410285h, 4103870Ch,	486100Eh, 83140E41h
		dd 500E4305h, 0E0A6F02h, 0EC34114h, 0EC64110h, 0EC7410Ch
		dd 0EC54108h, 0B4204h, 2Ch, 1D0h, 0FFFE8848h, 6Ah, 80E4100h
		dd 0E410286h, 4303830Ch, 5902300Eh, 410C0E0Ah, 41080EC3h
		dd 41040EC6h, 0Bh, 18h,	200h, 0FFFE8884h, 50h, 300E4300h
		dd 0E0A4702h, 0B4104h, 18h, 21Ch, 0FFFE88B8h, 5Bh, 300E4300h
		dd 0E0A5202h, 0B4104h, 18h, 238h, 0FFFE88F8h, 6Ch, 300E4300h
		dd 0E0A6302h, 0B4104h, 2Ch, 254h, 0FFFE8948h, 5Ah, 80E4100h
		dd 0E410287h, 4303830Ch, 4D02300Eh, 410C0E0Ah, 41080EC3h
		dd 41040EC7h, 0Bh, 3Ch,	284h, 0FFFE8974h, 10Bh,	80E4100h
		dd 0E410285h, 4103870Ch, 486100Eh, 83140E41h, 500E4305h
		dd 0E0A4002h, 0EC34114h, 0EC64110h, 0EC7410Ch, 0EC54108h
		dd 0B4104h, 3Ch, 2C4h, 0FFFE8A40h, 0F1h, 80E4100h, 0E410285h
		dd 4103870Ch, 486100Eh,	83140E41h, 500E4305h, 0E0AE002h
		dd 0EC34114h, 0EC64110h, 0EC7410Ch, 0EC54108h, 0B4104h
		dd 18h,	304h, 0FFFE8AF4h, 49h, 300E4300h, 0E0A4002h, 0B4104h
		dd 44h,	320h, 0FFFE8B24h, 0BDh,	80E4100h, 0E410287h, 4103860Ch
		dd 483100Eh, 2300E43h, 100E0A68h, 0C0EC341h, 80EC641h
		dd 40EC741h, 0A5F0B43h,	0C341100Eh, 0C6410C0Eh,	0C741080Eh
		dd 0B46040Eh, 2Ch, 368h, 0FFFE8B9Ch, 5Ah, 80E4100h, 0E410287h
		dd 4303830Ch, 4D02300Eh, 410C0E0Ah, 41080EC3h, 41040EC7h
		dd 0Bh,	18h, 398h, 0FFFE8BC8h, 49h, 300E4300h, 0E0A4002h
		dd 0B4104h, 18h, 3B4h, 0FFFE8BF8h, 50h,	300E4300h, 0E0A4702h
		dd 0B4104h, 18h, 3D0h, 0FFFE8C2Ch, 6Ch,	300E4300h, 0E0A6302h
		dd 0B4104h, 3Ch, 3ECh, 0FFFE8C7Ch, 7Dh,	80E4100h, 0E410285h
		dd 4103870Ch, 486100Eh,	83140E41h, 400E4305h, 0E0A6C02h
		dd 0EC34114h, 0EC64110h, 0EC7410Ch, 0EC54108h, 0B4104h
		dd 34h,	42Ch, 0FFFE8CBCh, 0C7h,	80E4100h, 0E410287h, 4103860Ch
		dd 483100Eh, 2300E43h, 100E0AA9h, 0C0EC341h, 80EC641h
		dd 40EC741h, 0B42h, 3Ch, 464h, 0FFFE8D4Ch, 0B1h, 80E4100h
		dd 0E410285h, 4103870Ch, 486100Eh, 83140E41h, 500E4305h
		dd 0E0A9B02h, 0EC34114h, 0EC64110h, 0EC7410Ch, 0EC54108h
		dd 0B4204h, 34h, 4A4h, 0FFFE8DC0h, 150h, 80E4100h, 0E410287h
		dd 4103860Ch, 483100Eh,	2500E43h, 100E0A73h, 0C0EC341h
		dd 80EC641h, 40EC741h, 0B44h, 2Ch, 4DCh, 0FFFE8ED8h, 59h
		dd 80E4100h, 0E410286h,	4303830Ch, 4602200Eh, 410C0E0Ah
		dd 41080EC3h, 43040EC6h, 0Bh, 2Ch, 50Ch, 0FFFE8F04h, 64h
		dd 80E4100h, 0E410286h,	4303830Ch, 5702200Eh, 410C0E0Ah
		dd 41080EC3h, 41040EC6h, 0Bh, 34h, 53Ch, 0FFFE8F38h, 4Bh
		dd 80E4100h, 0E410287h,	4103860Ch, 483100Eh, 7C300E43h
		dd 41100E0Ah, 410C0EC3h, 41080EC6h, 41040EC7h, 0Bh, 38h
		dd 574h, 0FFFE8F4Ch, 75h, 80E4100h, 0E410286h, 4303830Ch
		dd 4D02200Eh, 410C0E0Ah, 41080EC3h, 48040EC6h, 0E0A510Bh
		dd 0EC3410Ch, 0EC64108h, 0B4104h, 2Ch, 5B0h, 0FFFE8F88h
		dd 5Fh,	80E4100h, 0E410286h, 4303830Ch,	4E02200Eh, 410C0E0Ah
		dd 41080EC3h, 41040EC6h, 0Bh, 2Ch, 5E0h, 0FFFE8FB8h, 69h
		dd 80E4100h, 0E410286h,	4303830Ch, 5802200Eh, 410C0E0Ah
		dd 41080EC3h, 41040EC6h, 0Bh, 2Ch, 610h, 0FFFE8FF4h, 7Bh
		dd 80E4100h, 0E410286h,	4303830Ch, 6A02200Eh, 410C0E0Ah
		dd 41080EC3h, 41040EC6h, 0Bh, 14h, 0
		dd 527A01h, 1087C01h, 4040C1Bh,	188h, 20h, 1Ch,	0FFFE9028h
		dd 3Fh,	80E4100h, 0E430283h, 0E0A7430h,	0EC34108h, 0B4104h
		dd 44h,	40h, 0FFFE9044h, 86h, 80E4100h,	0E410287h, 4103860Ch
		dd 483100Eh, 6C400E43h,	41100E0Ah, 410C0EC3h, 41080EC6h
		dd 43040EC7h, 0A41020Bh, 0C341100Eh, 0C6410C0Eh, 0C741080Eh
		dd 0B45040Eh, 54h, 88h,	0FFFE9084h, 0ADh, 80E4100h, 0E410285h
		dd 4103870Ch, 486100Eh,	83140E41h, 500E4305h, 140E0A70h
		dd 100EC341h, 0C0EC641h, 80EC741h, 40EC541h, 63020B41h
		dd 41140E0Ah, 41100EC3h, 410C0EC6h, 41080EC7h, 45040EC5h
		dd 0Bh,	54h, 0E0h, 0FFFE90DCh, 5D4h, 80E4100h, 0E410285h
		dd 4103870Ch, 486100Eh,	83140E41h, 600E4305h, 0A033303h
		dd 0C341140Eh, 0C641100Eh, 0C7410C0Eh, 0C541080Eh, 0B46040Eh
		dd 0A026B03h, 0C341140Eh, 0C641100Eh, 0C7410C0Eh, 0C541080Eh
		dd 0B41040Eh, 54h, 138h, 0FFFE9658h, 2C0h, 80E4100h, 0E410285h
		dd 4103870Ch, 486100Eh,	83140E41h, 700E4305h, 0A016503h
		dd 0C341140Eh, 0C641100Eh, 0C7410C0Eh, 0C541080Eh, 0B48040Eh
		dd 140E0A53h, 100EC341h, 0C0EC641h, 80EC741h, 40EC541h
		dd 0B41h, 3Ch, 190h, 0FFFE98C0h, 108h, 80E4100h, 0E410285h
		dd 4103870Ch, 486100Eh,	83140E41h, 500E4305h, 0E0AF302h
		dd 0EC34114h, 0EC64110h, 0EC7410Ch, 0EC54108h, 0B4504h
		dd 3Ch,	1D0h, 0FFFE9988h, 87Ch,	80E4100h, 0E410285h, 4103870Ch
		dd 486100Eh, 83140E41h,	800E4305h, 0A460201h, 0C341140Eh
		dd 0C641100Eh, 0C7410C0Eh, 0C541080Eh, 0B43040Eh, 3Ch
		dd 210h, 0FFFEA1C4h, 829h, 80E4100h, 0E410285h,	4103870Ch
		dd 486100Eh, 83140E41h,	700E4305h, 0A01F903h, 0C341140Eh
		dd 0C641100Eh, 0C7410C0Eh, 0C541080Eh, 0B44040Eh, 14h
		dd 0
		dd 527A01h, 1087C01h, 4040C1Bh,	188h, 18h, 1Ch,	0FFFEA998h
		dd 5Ah,	300E4300h, 40E0A78h, 0B41h, 2Ch, 38h, 0FFFEA9D8h
		dd 63h,	80E4100h, 0E410286h, 4303830Ch,	4D02300Eh, 410C0E0Ah
		dd 41080EC3h, 44040EC6h, 0Bh, 28h, 68h,	0FFFEAA0Ch, 4Dh
		dd 80E4100h, 0E410286h,	4303830Ch, 0A7B300Eh, 0C3410C0Eh
		dd 0C641080Eh, 0B42040Eh, 20h, 94h, 0FFFEAA30h,	63h, 80E4100h
		dd 0E430283h, 0A580230h, 0C341080Eh, 0B41040Eh,	3Ch, 0B8h
		dd 0FFFEAA70h, 86h, 80E4100h, 0E410285h, 4103870Ch, 486100Eh
		dd 83140E41h, 400E4305h, 0E0A6F02h, 0EC34114h, 0EC64110h
		dd 0EC7410Ch, 0EC54108h, 0B4104h, 18h, 0F8h, 0FFFEAAB8h
		dd 59h,	200E4300h, 0E0A4902h, 0B4404h, 18h, 114h, 0FFFEAAF8h
		dd 60h,	200E4300h, 40E0A66h, 0B43h, 3Ch, 130h, 0FFFEAB3Ch
		dd 14Bh, 80E4100h, 0E410285h, 4103870Ch, 486100Eh, 83140E41h
		dd 400E4305h, 0E0A5102h, 0EC34114h, 0EC64110h, 0EC7410Ch
		dd 0EC54108h, 0B4404h, 34h, 170h, 0FFFEAC48h, 91h, 80E4100h
		dd 0E410287h, 4103860Ch, 483100Eh, 2400E43h, 100E0A77h
		dd 0C0EC341h, 80EC641h,	40EC741h, 0B41h, 3Ch, 1A8h, 0FFFEACA4h
		dd 1D8h, 80E4100h, 0E410285h, 4103870Ch, 486100Eh, 83140E41h
		dd 500E4305h, 0E0AF402h, 0EC34114h, 0EC64110h, 0EC7410Ch
		dd 0EC54108h, 0B4104h, 54h, 1E8h, 0FFFEAE3Ch, 0D5h, 80E4100h
		dd 0E410285h, 4103870Ch, 486100Eh, 83140E41h, 400E4305h
		dd 0E0A9902h, 0EC34114h, 0EC64110h, 0EC7410Ch, 0EC54108h
		dd 5B0B4804h, 41140E0Ah, 41100EC3h, 410C0EC6h, 41080EC7h
		dd 45040EC5h, 0Bh, 14h,	0
		dd 527A01h, 1087C01h, 4040C1Bh,	188h, 3Ch, 1Ch,	0FFFEAEA4h
		dd 17Ch, 80E4100h, 0E410285h, 4103870Ch, 486100Eh, 83140E41h
		dd 700E4305h, 0A016003h, 0C341140Eh, 0C641100Eh, 0C7410C0Eh
		dd 0C541080Eh, 0B45040Eh, 2Ch, 5Ch, 0FFFEAFE0h,	76h, 80E4100h
		dd 0E410286h, 4303830Ch, 6902300Eh, 410C0E0Ah, 41080EC3h
		dd 41040EC6h, 0Bh, 34h,	8Ch, 0FFFEB028h, 9Ch, 80E4100h
		dd 0E410287h, 4103860Ch, 483100Eh, 2300E43h, 100E0A84h
		dd 0C0EC341h, 80EC641h,	40EC741h, 0B43h, 34h, 0C4h, 0FFFEB08Ch
		dd 0DFh, 80E4100h, 0E410287h, 4103860Ch, 483100Eh, 2300E43h
		dd 100E0AA1h, 0C0EC341h, 80EC641h, 40EC741h, 0B42h, 34h
		dd 0FCh, 0FFFEB134h, 85h, 80E4100h, 0E410287h, 4103860Ch
		dd 483100Eh, 2300E43h, 100E0A76h, 0C0EC341h, 80EC641h
		dd 40EC741h, 0B41h, 34h, 134h, 0FFFEB184h, 85h,	80E4100h
		dd 0E410287h, 4103860Ch, 483100Eh, 2300E43h, 100E0A76h
		dd 0C0EC341h, 80EC641h,	40EC741h, 0B41h, 14h, 0
		dd 527A01h, 1087C01h, 4040C1Bh,	188h, 2	dup(1Ch), 0FFFEBC54h
		dd 43h,	200E4300h, 40E0A55h, 0E600B48h,	4, 38h,	3Ch, 0FFFEBC84h
		dd 86h,	80E4100h, 0E410286h, 4303830Ch,	0A64200Eh, 0C3460C0Eh
		dd 0C641080Eh, 0B43040Eh, 0C0E0A6Bh, 80EC346h, 40EC641h
		dd 0B43h, 10h, 78h, 0FFFEBCD8h,	3, 0
		dd 14h,	0
		dd 527A01h, 1087C01h, 4040C1Bh,	188h, 10h, 1Ch,	0FFFEBCBCh
		dd 8, 0
		dd 14h,	0
		dd 527A01h, 1087C01h, 4040C1Bh,	188h, 18h, 1Ch,	0FFFEBCA0h
		dd 52h,	80E4100h, 0E430283h, 30h, 3Ch, 38h, 0FFFEBCE4h
		dd 10Eh, 600E4300h, 59058344h, 87460486h, 2854603h, 43540E45h
		dd 0A74600Eh, 0C3C6C7C5h, 0B48040Eh, 43500E69h,	5202600Eh
		dd 0E43500Eh, 60h, 24h,	78h, 0FFFEBDB4h, 1D4h, 300E6C00h
		dd 8604834Fh, 2028703h,	0C6C70AE3h, 42040EC3h, 0Bh, 14h
		dd 0
		dd 527A01h, 1087C01h, 4040C1Bh,	188h, 14h, 1Ch,	0FFFEBF54h
		dd 2Ch,	100E4E00h, 40E5Ch, 20h,	34h, 0FFFEBF6Ch, 49h, 80E4100h
		dd 0E430283h, 0E0A6D20h, 0EC34108h, 0B4104h, 10h, 58h
		dd 0FFFEBF98h, 1Ch, 0
		dd 14h,	0
		dd 527A01h, 1087C01h, 4040C1Bh,	188h, 38h, 1Ch,	0FFFEBF8Ch
		dd 60h,	80E4100h, 0E410286h, 4303830Ch,	0E4C200Eh, 200E491Ch
		dd 431C0E50h, 0E6A200Eh, 200E431Ch, 410C0E43h, 41080EC3h
		dd 40EC6h, 34h,	58h, 0FFFEBFB0h, 8Ch, 200E4300h, 46028649h
		dd 0A510383h, 40EC3C6h,	0E730B41h, 200E511Ch, 451C0E4Ch
		dd 0A4B200Eh, 40EC6C3h,	0B41h, 3Ch, 90h, 0FFFEC008h, 90h
		dd 80E4100h, 0E430283h,	0E0A5020h, 0EC34308h, 4C0B4104h
		dd 0E491C0Eh, 1C0E6E20h, 43200E43h, 43080E0Ah, 41040EC3h
		dd 1C0E5A0Bh, 200E43h, 28h, 0D0h, 0FFFEC058h, 98h, 200E4300h
		dd 40E0A58h, 0E690B45h,	200E431Ch, 40E0A5Fh, 0E5C0B45h
		dd 200E431Ch, 0
		dd 14h,	0
		dd 527A01h, 1087C01h, 4040C1Bh,	188h, 2	dup(1Ch), 0FFFEC1F0h
		dd 19h,	80E4100h, 0D420285h, 0CC55505h,	404h, 36h dup(0)
		align 400h
_eh_frame	ends

; Section 5. (virtual address 00041000)
; Virtual size			: 000008B0 (   2224.)
; Section size in file		: 00000000 (	  0.)
; Offset to raw	data for section: 00000000
; Flags	C0600080: Bss Readable Writable
; Alignment	: 32 bytes
; ===========================================================================

; Segment type:	Uninitialized
; Segment permissions: Read/Write
; Segment alignment '32byte' can not be represented in assembly
_bss		segment	para public 'BSS' use32
		assume cs:_bss
		;org 688C1000h
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
; void *Memory
Memory		dd ?			; DATA XREF: sub_68881000+4r
					; sub_68881000+23r ...
dword_688C1004	dd ?			; DATA XREF: sub_68881000+Er
					; DllEntryPoint+7Fw ...
dword_688C1008	dd 6 dup(?)		; DATA XREF: sub_688811C0+2Eo
dword_688C1020	dd ?			; DATA XREF: oscar_get_locale_charset+Er
					; oscar_get_locale_charset:loc_6889F43Co ...
		align 20h
byte_688C1040	db ?			; DATA XREF: oscar_normalize+30w
					; oscar_normalize:loc_688A5603w ...
		align 4
		dd 1FFh	dup(?)
dword_688C1840	dd ?			; DATA XREF: oscar_init:loc_688A58E4r
					; oscar_init+1F2w ...
		dd 0Ah dup(?)
TlsIndex	dd ?			; DATA XREF: .tls:TlsIndex_ptro
dword_688C1870	dd ?			; DATA XREF: sub_688AC920r
					; sub_688AC920+1Dw
dword_688C1874	dd ?			; DATA XREF: sub_688ACB80r
					; sub_688ACB80:loc_688ACB90w
dword_688C1878	dd ?			; DATA XREF: TlsCallback_0+5r
					; TlsCallback_0+12w
dword_688C187C	dd ?			; DATA XREF: .text:688ACC03r
					; .text:688ACC94r ...
; struct _RTL_CRITICAL_SECTION CriticalSection
CriticalSection	_RTL_CRITICAL_SECTION <?> ; DATA XREF: sub_688ACBA0+5o
					; sub_688ACBA0:loc_688ACBEBo ...
dword_688C1898	dd ?			; DATA XREF: sub_688ACBA0+11r
					; .text:688ACC57r ...
		align 800h
_bss		ends

; Section 7. (virtual address 00045000)
; Virtual size			: 00003908 (  14600.)
; Section size in file		: 00003A00 (  14848.)
; Offset to raw	data for section: 00041600
; Flags	C0300040: Data Readable	Writable
; Alignment	: 4 bytes
; ===========================================================================

; Segment type:	Externs
; _idata


;
; Imports from libglib-2.0-0.dll
;
		extrn __imp_g_ascii_strcasecmp:dword ; DATA XREF: g_ascii_strcasecmpr
		extrn __imp_g_ascii_strncasecmp:dword ;	DATA XREF: g_ascii_strncasecmpr
		extrn __imp_g_convert:dword ; DATA XREF: g_convertr
		extrn __imp_g_convert_with_fallback:dword
					; DATA XREF: g_convert_with_fallbackr
		extrn __imp_g_datalist_clear:dword ; DATA XREF:	g_datalist_clearr
		extrn __imp_g_datalist_id_get_data:dword
					; DATA XREF: g_datalist_id_get_datar
		extrn g_direct_equal:dword ; DATA XREF:	.text:loc_688ABD08r
		extrn g_direct_hash:dword ; DATA XREF: .text:loc_688ABD10r
		extrn __imp_g_error_free:dword ; DATA XREF: g_error_freer
		extrn __imp_g_fopen:dword ; DATA XREF: g_fopenr
		extrn __imp_g_free:dword ; DATA	XREF: g_freer
		extrn __imp_g_get_charset:dword	; DATA XREF: g_get_charsetr
		extrn __imp_g_hash_table_destroy:dword ; DATA XREF: g_hash_table_destroyr
		extrn __imp_g_hash_table_get_keys:dword	; DATA XREF: g_hash_table_get_keysr
		extrn __imp_g_hash_table_insert:dword ;	DATA XREF: g_hash_table_insertr
		extrn __imp_g_hash_table_lookup:dword ;	DATA XREF: g_hash_table_lookupr
		extrn __imp_g_hash_table_lookup_extended:dword
					; DATA XREF: g_hash_table_lookup_extendedr
		extrn __imp_g_hash_table_new:dword ; DATA XREF:	g_hash_table_newr
		extrn __imp_g_hash_table_new_full:dword	; DATA XREF: g_hash_table_new_fullr
		extrn __imp_g_hash_table_remove:dword ;	DATA XREF: g_hash_table_remover
		extrn __imp_g_hash_table_replace:dword ; DATA XREF: g_hash_table_replacer
		extrn __imp_g_list_append:dword	; DATA XREF: g_list_appendr
		extrn __imp_g_list_copy:dword ;	DATA XREF: g_list_copyr
		extrn __imp_g_list_free:dword ;	DATA XREF: g_list_freer
		extrn __imp_g_list_nth_data:dword ; DATA XREF: g_list_nth_datar
		extrn __imp_g_list_prepend:dword ; DATA	XREF: g_list_prependr
		extrn __imp_g_list_reverse:dword ; DATA	XREF: g_list_reverser
		extrn __imp_g_list_sort:dword ;	DATA XREF: g_list_sortr
		extrn __imp_g_malloc:dword ; DATA XREF:	g_mallocr
		extrn __imp_g_malloc0:dword ; DATA XREF: g_malloc0r
		extrn __imp_g_markup_escape_text:dword ; DATA XREF: g_markup_escape_textr
		extrn __imp_g_memdup:dword ; DATA XREF:	g_memdupr
		extrn __imp_g_path_get_basename:dword ;	DATA XREF: g_path_get_basenamer
		extrn __imp_g_quark_try_string:dword ; DATA XREF: g_quark_try_stringr
		extrn __imp_g_queue_free:dword ; DATA XREF: g_queue_freer
		extrn __imp_g_queue_is_empty:dword ; DATA XREF:	g_queue_is_emptyr
		extrn __imp_g_queue_new:dword ;	DATA XREF: g_queue_newr
		extrn __imp_g_queue_peek_head:dword ; DATA XREF: g_queue_peek_headr
		extrn __imp_g_queue_pop_head:dword ; DATA XREF:	g_queue_pop_headr
		extrn __imp_g_queue_push_tail:dword ; DATA XREF: g_queue_push_tailr
		extrn __imp_g_random_int:dword ; DATA XREF: g_random_intr
		extrn __imp_g_realloc:dword ; DATA XREF: g_reallocr
		extrn __imp_g_return_if_fail_warning:dword
					; DATA XREF: g_return_if_fail_warningr
		extrn __imp_g_slist_append:dword ; DATA	XREF: g_slist_appendr
		extrn __imp_g_slist_delete_link:dword ;	DATA XREF: g_slist_delete_linkr
		extrn __imp_g_slist_find_custom:dword ;	DATA XREF: g_slist_find_customr
		extrn __imp_g_slist_free:dword ; DATA XREF: g_slist_freer
		extrn __imp_g_slist_prepend:dword ; DATA XREF: g_slist_prependr
		extrn __imp_g_slist_remove:dword ; DATA	XREF: g_slist_remover
		extrn __imp_g_slist_reverse:dword ; DATA XREF: g_slist_reverser
		extrn __imp_g_snprintf:dword ; DATA XREF: g_snprintfr
		extrn __imp_g_str_equal:dword ;	DATA XREF: g_str_equalr
		extrn __imp_g_str_has_prefix:dword ; DATA XREF:	g_str_has_prefixr
		extrn g_str_hash:dword	; DATA XREF: .text:loc_688ABE00r
		extrn __imp_g_strdelimit:dword ; DATA XREF: g_strdelimitr
		extrn __imp_g_strdup:dword ; DATA XREF:	g_strdupr
		extrn __imp_g_strdup_printf:dword ; DATA XREF: g_strdup_printfr
		extrn __imp_g_strescape:dword ;	DATA XREF: g_strescaper
		extrn __imp_g_strfreev:dword ; DATA XREF: g_strfreevr
		extrn __imp_g_string_append:dword ; DATA XREF: g_string_appendr
		extrn __imp_g_string_append_len:dword ;	DATA XREF: g_string_append_lenr
		extrn __imp_g_string_append_printf:dword
					; DATA XREF: g_string_append_printfr
		extrn __imp_g_string_free:dword	; DATA XREF: g_string_freer
		extrn __imp_g_string_insert_c:dword ; DATA XREF: g_string_insert_cr
		extrn __imp_g_string_new:dword ; DATA XREF: g_string_newr
		extrn __imp_g_string_new_len:dword ; DATA XREF:	g_string_new_lenr
		extrn __imp_g_string_sized_new:dword ; DATA XREF: g_string_sized_newr
		extrn __imp_g_string_truncate:dword ; DATA XREF: g_string_truncater
		extrn __imp_g_strjoinv:dword ; DATA XREF: g_strjoinvr
		extrn __imp_g_strlcpy:dword ; DATA XREF: g_strlcpyr
		extrn __imp_g_strndup:dword ; DATA XREF: g_strndupr
		extrn __imp_g_strsplit:dword ; DATA XREF: g_strsplitr
		extrn __imp_g_utf8_find_prev_char:dword	; DATA XREF: g_utf8_find_prev_charr
		extrn __imp_g_utf8_normalize:dword ; DATA XREF:	g_utf8_normalizer
		extrn __imp_g_utf8_strdown:dword ; DATA	XREF: g_utf8_strdownr
		extrn __imp_g_utf8_validate:dword ; DATA XREF: g_utf8_validater
		extrn __imp_g_warn_message:dword ; DATA	XREF: g_warn_messager

;
; Imports from intl.dll
;
		extrn __imp_libintl_dgettext:dword ; DATA XREF:	libintl_dgettextr
		extrn __imp_libintl_dngettext:dword ; DATA XREF: libintl_dngettextr

;
; Imports from libpurple.dll
;
		extrn __imp__purple_network_set_common_socket_flags:dword
					; DATA XREF: _purple_network_set_common_socket_flagsr
		extrn __imp_purple_account_add_buddies:dword
					; DATA XREF: purple_account_add_buddiesr
		extrn __imp_purple_account_get_active_status:dword
					; DATA XREF: purple_account_get_active_statusr
		extrn __imp_purple_account_get_bool:dword
					; DATA XREF: purple_account_get_boolr
		extrn __imp_purple_account_get_check_mail:dword
					; DATA XREF: purple_account_get_check_mailr
		extrn __imp_purple_account_get_connection:dword
					; DATA XREF: purple_account_get_connectionr
		extrn __imp_purple_account_get_int:dword
					; DATA XREF: purple_account_get_intr
		extrn __imp_purple_account_get_presence:dword
					; DATA XREF: purple_account_get_presencer
		extrn __imp_purple_account_get_protocol_id:dword
					; DATA XREF: purple_account_get_protocol_idr
		extrn __imp_purple_account_get_remember_password:dword
					; DATA XREF: purple_account_get_remember_passwordr
		extrn __imp_purple_account_get_string:dword
					; DATA XREF: purple_account_get_stringr
		extrn __imp_purple_account_get_user_info:dword
					; DATA XREF: purple_account_get_user_infor
		extrn __imp_purple_account_get_username:dword
					; DATA XREF: purple_account_get_usernamer
		extrn __imp_purple_account_is_connected:dword
					; DATA XREF: purple_account_is_connectedr
		extrn __imp_purple_account_is_status_active:dword
					; DATA XREF: purple_account_is_status_activer
		extrn __imp_purple_account_notify_added:dword
					; DATA XREF: purple_account_notify_addedr
		extrn __imp_purple_account_option_bool_new:dword
					; DATA XREF: purple_account_option_bool_newr
		extrn __imp_purple_account_option_int_new:dword
					; DATA XREF: purple_account_option_int_newr
		extrn __imp_purple_account_option_list_new:dword
					; DATA XREF: purple_account_option_list_newr
		extrn __imp_purple_account_option_string_new:dword
					; DATA XREF: purple_account_option_string_newr
		extrn __imp_purple_account_remove_buddies:dword
					; DATA XREF: purple_account_remove_buddiesr
		extrn __imp_purple_account_request_authorization:dword
					; DATA XREF: purple_account_request_authorizationr
		extrn __imp_purple_account_request_change_password:dword
					; DATA XREF: purple_account_request_change_passwordr
		extrn __imp_purple_account_request_change_user_info:dword
					; DATA XREF: purple_account_request_change_user_infor
		extrn __imp_purple_account_set_bool:dword
					; DATA XREF: purple_account_set_boolr
		extrn __imp_purple_account_set_password:dword
					; DATA XREF: purple_account_set_passwordr
		extrn __imp_purple_account_set_string:dword
					; DATA XREF: purple_account_set_stringr
		extrn __imp_purple_accounts_find:dword ; DATA XREF: purple_accounts_findr
		extrn __imp_purple_accounts_get_all:dword
					; DATA XREF: purple_accounts_get_allr
		extrn __imp_purple_base16_encode:dword ; DATA XREF: purple_base16_encoder
		extrn __imp_purple_base64_decode:dword ; DATA XREF: purple_base64_decoder
		extrn __imp_purple_base64_encode:dword ; DATA XREF: purple_base64_encoder
		extrn __imp_purple_blist_add_buddy:dword
					; DATA XREF: purple_blist_add_buddyr
		extrn __imp_purple_blist_add_group:dword
					; DATA XREF: purple_blist_add_groupr
		extrn __imp_purple_blist_alias_buddy:dword
					; DATA XREF: purple_blist_alias_buddyr
		extrn __imp_purple_blist_node_get_string:dword
					; DATA XREF: purple_blist_node_get_stringr
		extrn __imp_purple_blist_node_get_type:dword
					; DATA XREF: purple_blist_node_get_typer
		extrn __imp_purple_blist_node_set_string:dword
					; DATA XREF: purple_blist_node_set_stringr
		extrn __imp_purple_blist_remove_buddy:dword
					; DATA XREF: purple_blist_remove_buddyr
		extrn __imp_purple_blist_request_add_buddy:dword
					; DATA XREF: purple_blist_request_add_buddyr
		extrn __imp_purple_buddy_get_account:dword
					; DATA XREF: purple_buddy_get_accountr
		extrn __imp_purple_buddy_get_alias_only:dword
					; DATA XREF: purple_buddy_get_alias_onlyr
		extrn __imp_purple_buddy_get_group:dword
					; DATA XREF: purple_buddy_get_groupr
		extrn __imp_purple_buddy_get_local_buddy_alias:dword
					; DATA XREF: purple_buddy_get_local_buddy_aliasr
		extrn __imp_purple_buddy_get_name:dword	; DATA XREF: purple_buddy_get_namer
		extrn __imp_purple_buddy_get_presence:dword
					; DATA XREF: purple_buddy_get_presencer
		extrn __imp_purple_buddy_icons_find_account_icon:dword
					; DATA XREF: purple_buddy_icons_find_account_iconr
		extrn __imp_purple_buddy_icons_get_account_icon_timestamp:dword
					; DATA XREF: purple_buddy_icons_get_account_icon_timestampr
		extrn __imp_purple_buddy_icons_get_checksum_for_user:dword
					; DATA XREF: purple_buddy_icons_get_checksum_for_userr
		extrn __imp_purple_buddy_icons_set_for_user:dword
					; DATA XREF: purple_buddy_icons_set_for_userr
		extrn __imp_purple_buddy_new:dword ; DATA XREF:	purple_buddy_newr
		extrn __imp_purple_cipher_context_append:dword
					; DATA XREF: purple_cipher_context_appendr
		extrn __imp_purple_cipher_context_destroy:dword
					; DATA XREF: purple_cipher_context_destroyr
		extrn __imp_purple_cipher_context_digest:dword
					; DATA XREF: purple_cipher_context_digestr
		extrn __imp_purple_cipher_context_new:dword
					; DATA XREF: purple_cipher_context_newr
		extrn __imp_purple_cipher_context_new_by_name:dword
					; DATA XREF: purple_cipher_context_new_by_namer
		extrn __imp_purple_cipher_context_set_key:dword
					; DATA XREF: purple_cipher_context_set_keyr
		extrn __imp_purple_cipher_context_set_option:dword
					; DATA XREF: purple_cipher_context_set_optionr
		extrn __imp_purple_ciphers_find_cipher:dword
					; DATA XREF: purple_ciphers_find_cipherr
		extrn __imp_purple_circ_buffer_append:dword
					; DATA XREF: purple_circ_buffer_appendr
		extrn __imp_purple_circ_buffer_destroy:dword
					; DATA XREF: purple_circ_buffer_destroyr
		extrn __imp_purple_circ_buffer_get_max_read:dword
					; DATA XREF: purple_circ_buffer_get_max_readr
		extrn __imp_purple_circ_buffer_mark_read:dword
					; DATA XREF: purple_circ_buffer_mark_readr
		extrn __imp_purple_circ_buffer_new:dword
					; DATA XREF: purple_circ_buffer_newr
		extrn __imp_purple_connection_error_reason:dword
					; DATA XREF: purple_connection_error_reasonr
		extrn __imp_purple_connection_get_account:dword
					; DATA XREF: purple_connection_get_accountr
		extrn __imp_purple_connection_get_display_name:dword
					; DATA XREF: purple_connection_get_display_namer
		extrn __imp_purple_connection_get_password:dword
					; DATA XREF: purple_connection_get_passwordr
		extrn __imp_purple_connection_get_protocol_data:dword
					; DATA XREF: purple_connection_get_protocol_datar
		extrn __imp_purple_connection_set_display_name:dword
					; DATA XREF: purple_connection_set_display_namer
		extrn __imp_purple_connection_set_protocol_data:dword
					; DATA XREF: purple_connection_set_protocol_datar
		extrn __imp_purple_connection_set_state:dword
					; DATA XREF: purple_connection_set_stater
		extrn __imp_purple_connection_update_progress:dword
					; DATA XREF: purple_connection_update_progressr
		extrn __imp_purple_conv_chat_add_user:dword
					; DATA XREF: purple_conv_chat_add_userr
		extrn __imp_purple_conv_chat_get_id:dword
					; DATA XREF: purple_conv_chat_get_idr
		extrn __imp_purple_conv_chat_remove_user:dword
					; DATA XREF: purple_conv_chat_remove_userr
		extrn __imp_purple_conv_present_error:dword
					; DATA XREF: purple_conv_present_errorr
		extrn __imp_purple_conv_send_confirm:dword
					; DATA XREF: purple_conv_send_confirmr
		extrn __imp_purple_conversation_get_chat_data:dword
					; DATA XREF: purple_conversation_get_chat_datar
		extrn __imp_purple_conversation_get_name:dword
					; DATA XREF: purple_conversation_get_namer
		extrn __imp_purple_conversation_new:dword
					; DATA XREF: purple_conversation_newr
		extrn __imp_purple_conversation_present:dword
					; DATA XREF: purple_conversation_presentr
		extrn __imp_purple_conversation_write:dword
					; DATA XREF: purple_conversation_writer
		extrn __imp_purple_core_get_ui_info:dword
					; DATA XREF: purple_core_get_ui_infor
		extrn __imp_purple_date_format_full:dword
					; DATA XREF: purple_date_format_fullr
		extrn __imp_purple_date_format_short:dword
					; DATA XREF: purple_date_format_shortr
		extrn __imp_purple_debug_error:dword ; DATA XREF: purple_debug_errorr
		extrn __imp_purple_debug_info:dword ; DATA XREF: purple_debug_infor
		extrn __imp_purple_debug_is_verbose:dword
					; DATA XREF: purple_debug_is_verboser
		extrn __imp_purple_debug_misc:dword ; DATA XREF: purple_debug_miscr
		extrn __imp_purple_debug_warning:dword ; DATA XREF: purple_debug_warningr
		extrn __imp_purple_email_is_valid:dword	; DATA XREF: purple_email_is_validr
		extrn __imp_purple_find_buddies:dword ;	DATA XREF: purple_find_buddiesr
		extrn __imp_purple_find_buddy:dword ; DATA XREF: purple_find_buddyr
		extrn __imp_purple_find_buddy_in_group:dword
					; DATA XREF: purple_find_buddy_in_groupr
		extrn __imp_purple_find_chat:dword ; DATA XREF:	purple_find_chatr
		extrn __imp_purple_find_conversation_with_account:dword
					; DATA XREF: purple_find_conversation_with_accountr
		extrn __imp_purple_find_group:dword ; DATA XREF: purple_find_groupr
		extrn __imp_purple_get_core:dword ; DATA XREF: purple_get_corer
		extrn __imp_purple_group_get_name:dword	; DATA XREF: purple_group_get_namer
		extrn __imp_purple_group_new:dword ; DATA XREF:	purple_group_newr
		extrn __imp_purple_imgstore_add_with_id:dword
					; DATA XREF: purple_imgstore_add_with_idr
		extrn __imp_purple_imgstore_find_by_id:dword
					; DATA XREF: purple_imgstore_find_by_idr
		extrn __imp_purple_imgstore_get_data:dword
					; DATA XREF: purple_imgstore_get_datar
		extrn __imp_purple_imgstore_get_filename:dword
					; DATA XREF: purple_imgstore_get_filenamer
		extrn __imp_purple_imgstore_get_size:dword
					; DATA XREF: purple_imgstore_get_sizer
		extrn __imp_purple_imgstore_unref:dword	; DATA XREF: purple_imgstore_unrefr
		extrn __imp_purple_imgstore_unref_by_id:dword
					; DATA XREF: purple_imgstore_unref_by_idr
		extrn __imp_purple_input_add:dword ; DATA XREF:	purple_input_addr
		extrn __imp_purple_input_remove:dword ;	DATA XREF: purple_input_remover
		extrn __imp_purple_markup_escape_text:dword
					; DATA XREF: purple_markup_escape_textr
		extrn __imp_purple_markup_find_tag:dword
					; DATA XREF: purple_markup_find_tagr
		extrn __imp_purple_markup_linkify:dword	; DATA XREF: purple_markup_linkifyr
		extrn __imp_purple_markup_strip_html:dword
					; DATA XREF: purple_markup_strip_htmlr
		extrn __imp_purple_menu_action_new:dword
					; DATA XREF: purple_menu_action_newr
		extrn __imp_purple_network_get_my_ip:dword
					; DATA XREF: purple_network_get_my_ipr
		extrn __imp_purple_network_get_port_from_fd:dword
					; DATA XREF: purple_network_get_port_from_fdr
		extrn __imp_purple_network_ip_atoi:dword
					; DATA XREF: purple_network_ip_atoir
		extrn __imp_purple_network_listen_cancel:dword
					; DATA XREF: purple_network_listen_cancelr
		extrn __imp_purple_network_listen_range:dword
					; DATA XREF: purple_network_listen_ranger
		extrn __imp_purple_normalize:dword ; DATA XREF:	purple_normalizer
		extrn __imp_purple_notify_emails:dword ; DATA XREF: purple_notify_emailsr
		extrn __imp_purple_notify_formatted:dword
					; DATA XREF: purple_notify_formattedr
		extrn __imp_purple_notify_message:dword	; DATA XREF: purple_notify_messager
		extrn __imp_purple_notify_searchresults:dword
					; DATA XREF: purple_notify_searchresultsr
		extrn __imp_purple_notify_searchresults_button_add:dword
					; DATA XREF: purple_notify_searchresults_button_addr
		extrn __imp_purple_notify_searchresults_column_add:dword
					; DATA XREF: purple_notify_searchresults_column_addr
		extrn __imp_purple_notify_searchresults_column_new:dword
					; DATA XREF: purple_notify_searchresults_column_newr
		extrn __imp_purple_notify_searchresults_new:dword
					; DATA XREF: purple_notify_searchresults_newr
		extrn __imp_purple_notify_searchresults_row_add:dword
					; DATA XREF: purple_notify_searchresults_row_addr
		extrn __imp_purple_notify_uri:dword ; DATA XREF: purple_notify_urir
		extrn __imp_purple_notify_user_info_add_pair:dword
					; DATA XREF: purple_notify_user_info_add_pairr
		extrn __imp_purple_notify_user_info_add_section_break:dword
					; DATA XREF: purple_notify_user_info_add_section_breakr
		extrn __imp_purple_notify_user_info_add_section_header:dword
					; DATA XREF: purple_notify_user_info_add_section_headerr
		extrn __imp_purple_notify_user_info_destroy:dword
					; DATA XREF: purple_notify_user_info_destroyr
		extrn __imp_purple_notify_user_info_new:dword
					; DATA XREF: purple_notify_user_info_newr
		extrn __imp_purple_notify_userinfo:dword
					; DATA XREF: purple_notify_userinfor
		extrn __imp_purple_plugin_action_new:dword
					; DATA XREF: purple_plugin_action_newr
		extrn __imp_purple_plugin_get_id:dword ; DATA XREF: purple_plugin_get_idr
		extrn __imp_purple_prefs_add_bool:dword	; DATA XREF: purple_prefs_add_boolr
		extrn __imp_purple_prefs_add_none:dword	; DATA XREF: purple_prefs_add_noner
		extrn __imp_purple_prefs_connect_callback:dword
					; DATA XREF: purple_prefs_connect_callbackr
		extrn __imp_purple_prefs_disconnect_by_handle:dword
					; DATA XREF: purple_prefs_disconnect_by_handler
		extrn __imp_purple_prefs_get_string:dword
					; DATA XREF: purple_prefs_get_stringr
		extrn __imp_purple_prefs_remove:dword ;	DATA XREF: purple_prefs_remover
		extrn __imp_purple_presence_get_active_status:dword
					; DATA XREF: purple_presence_get_active_statusr
		extrn __imp_purple_presence_get_idle_time:dword
					; DATA XREF: purple_presence_get_idle_timer
		extrn __imp_purple_presence_get_status:dword
					; DATA XREF: purple_presence_get_statusr
		extrn __imp_purple_presence_is_idle:dword
					; DATA XREF: purple_presence_is_idler
		extrn __imp_purple_presence_is_online:dword
					; DATA XREF: purple_presence_is_onliner
		extrn __imp_purple_presence_is_status_primitive_active:dword
					; DATA XREF: purple_presence_is_status_primitive_activer
		extrn __imp_purple_privacy_deny_add:dword
					; DATA XREF: purple_privacy_deny_addr
		extrn __imp_purple_privacy_deny_remove:dword
					; DATA XREF: purple_privacy_deny_remover
		extrn __imp_purple_privacy_permit_add:dword
					; DATA XREF: purple_privacy_permit_addr
		extrn __imp_purple_privacy_permit_remove:dword
					; DATA XREF: purple_privacy_permit_remover
		extrn __imp_purple_proxy_connect:dword ; DATA XREF: purple_proxy_connectr
		extrn __imp_purple_proxy_connect_cancel:dword
					; DATA XREF: purple_proxy_connect_cancelr
		extrn __imp_purple_prpl_got_user_idle:dword
					; DATA XREF: purple_prpl_got_user_idler
		extrn __imp_purple_prpl_got_user_login_time:dword
					; DATA XREF: purple_prpl_got_user_login_timer
		extrn __imp_purple_prpl_got_user_status:dword
					; DATA XREF: purple_prpl_got_user_statusr
		extrn __imp_purple_prpl_got_user_status_deactive:dword
					; DATA XREF: purple_prpl_got_user_status_deactiver
		extrn __imp_purple_request_action:dword	; DATA XREF: purple_request_actionr
		extrn __imp_purple_request_close_with_handle:dword
					; DATA XREF: purple_request_close_with_handler
		extrn __imp_purple_request_field_bool_get_value:dword
					; DATA XREF: purple_request_field_bool_get_valuer
		extrn __imp_purple_request_field_bool_new:dword
					; DATA XREF: purple_request_field_bool_newr
		extrn __imp_purple_request_field_group_add_field:dword
					; DATA XREF: purple_request_field_group_add_fieldr
		extrn __imp_purple_request_field_group_new:dword
					; DATA XREF: purple_request_field_group_newr
		extrn __imp_purple_request_fields:dword	; DATA XREF: purple_request_fieldsr
		extrn __imp_purple_request_fields_add_group:dword
					; DATA XREF: purple_request_fields_add_groupr
		extrn __imp_purple_request_fields_get_field:dword
					; DATA XREF: purple_request_fields_get_fieldr
		extrn __imp_purple_request_fields_new:dword
					; DATA XREF: purple_request_fields_newr
		extrn __imp_purple_request_input:dword ; DATA XREF: purple_request_inputr
		extrn __imp_purple_signal_connect:dword	; DATA XREF: purple_signal_connectr
		extrn __imp_purple_ssl_close:dword ; DATA XREF:	purple_ssl_closer
		extrn __imp_purple_ssl_connect:dword ; DATA XREF: purple_ssl_connectr
		extrn __imp_purple_ssl_connect_with_ssl_cn:dword
					; DATA XREF: purple_ssl_connect_with_ssl_cnr
		extrn __imp_purple_ssl_input_add:dword ; DATA XREF: purple_ssl_input_addr
		extrn __imp_purple_ssl_is_supported:dword
					; DATA XREF: purple_ssl_is_supportedr
		extrn __imp_purple_ssl_read:dword ; DATA XREF: purple_ssl_readr
		extrn __imp_purple_ssl_strerror:dword ;	DATA XREF: purple_ssl_strerrorr
		extrn __imp_purple_ssl_write:dword ; DATA XREF:	purple_ssl_writer
		extrn __imp_purple_status_get_attr_string:dword
					; DATA XREF: purple_status_get_attr_stringr
		extrn __imp_purple_status_get_id:dword ; DATA XREF: purple_status_get_idr
		extrn __imp_purple_status_get_name:dword
					; DATA XREF: purple_status_get_namer
		extrn __imp_purple_status_get_presence:dword
					; DATA XREF: purple_status_get_presencer
		extrn __imp_purple_status_get_type:dword
					; DATA XREF: purple_status_get_typer
		extrn __imp_purple_status_is_active:dword
					; DATA XREF: purple_status_is_activer
		extrn __imp_purple_status_is_available:dword
					; DATA XREF: purple_status_is_availabler
		extrn __imp_purple_status_is_independent:dword
					; DATA XREF: purple_status_is_independentr
		extrn __imp_purple_status_type_get_primitive:dword
					; DATA XREF: purple_status_type_get_primitiver
		extrn __imp_purple_status_type_new_full:dword
					; DATA XREF: purple_status_type_new_fullr
		extrn __imp_purple_status_type_new_with_attrs:dword
					; DATA XREF: purple_status_type_new_with_attrsr
		extrn __imp_purple_str_seconds_to_string:dword
					; DATA XREF: purple_str_seconds_to_stringr
		extrn __imp_purple_str_size_to_units:dword
					; DATA XREF: purple_str_size_to_unitsr
		extrn __imp_purple_str_strip_char:dword	; DATA XREF: purple_str_strip_charr
		extrn __imp_purple_strcasestr:dword ; DATA XREF: purple_strcasestrr
		extrn __imp_purple_strdup_withhtml:dword
					; DATA XREF: purple_strdup_withhtmlr
		extrn __imp_purple_strreplace:dword ; DATA XREF: purple_strreplacer
		extrn __imp_purple_time_format:dword ; DATA XREF: purple_time_formatr
		extrn __imp_purple_timeout_add:dword ; DATA XREF: purple_timeout_addr
		extrn __imp_purple_timeout_add_seconds:dword
					; DATA XREF: purple_timeout_add_secondsr
		extrn __imp_purple_timeout_remove:dword	; DATA XREF: purple_timeout_remover
		extrn __imp_purple_unescape_text:dword ; DATA XREF: purple_unescape_textr
		extrn __imp_purple_url_encode:dword ; DATA XREF: purple_url_encoder
		extrn __imp_purple_utf8_salvage:dword ;	DATA XREF: purple_utf8_salvager
		extrn __imp_purple_utf8_strftime:dword ; DATA XREF: purple_utf8_strftimer
		extrn __imp_purple_utf8_try_convert:dword
					; DATA XREF: purple_utf8_try_convertr
		extrn __imp_purple_util_fetch_url_cancel:dword
					; DATA XREF: purple_util_fetch_url_cancelr
		extrn __imp_purple_util_fetch_url_request_len_with_account:dword
					; DATA XREF: purple_util_fetch_url_request_len_with_accountr
		extrn __imp_purple_value_new:dword ; DATA XREF:	purple_value_newr
		extrn __imp_purple_xfer_cancel_local:dword
					; DATA XREF: purple_xfer_cancel_localr
		extrn __imp_purple_xfer_cancel_remote:dword
					; DATA XREF: purple_xfer_cancel_remoter
		extrn __imp_purple_xfer_get_bytes_remaining:dword
					; DATA XREF: purple_xfer_get_bytes_remainingr
		extrn __imp_purple_xfer_get_bytes_sent:dword
					; DATA XREF: purple_xfer_get_bytes_sentr
		extrn __imp_purple_xfer_get_local_filename:dword
					; DATA XREF: purple_xfer_get_local_filenamer
		extrn __imp_purple_xfer_get_size:dword ; DATA XREF: purple_xfer_get_sizer
		extrn __imp_purple_xfer_get_status:dword
					; DATA XREF: purple_xfer_get_statusr
		extrn __imp_purple_xfer_get_type:dword ; DATA XREF: purple_xfer_get_typer
		extrn __imp_purple_xfer_is_completed:dword
					; DATA XREF: purple_xfer_is_completedr
		extrn __imp_purple_xfer_new:dword ; DATA XREF: purple_xfer_newr
		extrn __imp_purple_xfer_ref:dword ; DATA XREF: purple_xfer_refr
		extrn __imp_purple_xfer_request:dword ;	DATA XREF: purple_xfer_requestr
		extrn __imp_purple_xfer_request_accepted:dword
					; DATA XREF: purple_xfer_request_acceptedr
		extrn __imp_purple_xfer_set_ack_fnc:dword
					; DATA XREF: purple_xfer_set_ack_fncr
		extrn __imp_purple_xfer_set_bytes_sent:dword
					; DATA XREF: purple_xfer_set_bytes_sentr
		extrn __imp_purple_xfer_set_cancel_recv_fnc:dword
					; DATA XREF: purple_xfer_set_cancel_recv_fncr
		extrn __imp_purple_xfer_set_cancel_send_fnc:dword
					; DATA XREF: purple_xfer_set_cancel_send_fncr
		extrn __imp_purple_xfer_set_completed:dword
					; DATA XREF: purple_xfer_set_completedr
		extrn __imp_purple_xfer_set_end_fnc:dword
					; DATA XREF: purple_xfer_set_end_fncr
		extrn __imp_purple_xfer_set_filename:dword
					; DATA XREF: purple_xfer_set_filenamer
		extrn __imp_purple_xfer_set_init_fnc:dword
					; DATA XREF: purple_xfer_set_init_fncr
		extrn __imp_purple_xfer_set_message:dword
					; DATA XREF: purple_xfer_set_messager
		extrn __imp_purple_xfer_set_request_denied_fnc:dword
					; DATA XREF: purple_xfer_set_request_denied_fncr
		extrn __imp_purple_xfer_set_size:dword ; DATA XREF: purple_xfer_set_sizer
		extrn __imp_purple_xfer_start:dword ; DATA XREF: purple_xfer_startr
		extrn __imp_purple_xfer_unref:dword ; DATA XREF: purple_xfer_unrefr
		extrn __imp_serv_got_alias:dword ; DATA	XREF: serv_got_aliasr
		extrn __imp_serv_got_chat_in:dword ; DATA XREF:	serv_got_chat_inr
		extrn __imp_serv_got_chat_invite:dword ; DATA XREF: serv_got_chat_inviter
		extrn __imp_serv_got_chat_left:dword ; DATA XREF: serv_got_chat_leftr
		extrn __imp_serv_got_im:dword ;	DATA XREF: serv_got_imr
		extrn __imp_serv_got_joined_chat:dword ; DATA XREF: serv_got_joined_chatr
		extrn __imp_serv_got_typing:dword ; DATA XREF: serv_got_typingr
		extrn __imp_serv_got_typing_stopped:dword
					; DATA XREF: serv_got_typing_stoppedr
		extrn __imp_serv_join_chat:dword ; DATA	XREF: serv_join_chatr
		extrn __imp_serv_set_info:dword	; DATA XREF: serv_set_infor
		extrn __imp_wpurple_close:dword	; DATA XREF: wpurple_closer
		extrn __imp_wpurple_gettimeofday:dword ; DATA XREF: wpurple_gettimeofdayr
		extrn __imp_wpurple_read:dword ; DATA XREF: wpurple_readr
		extrn __imp_wpurple_recv:dword ; DATA XREF: wpurple_recvr
		extrn __imp_wpurple_send:dword ; DATA XREF: wpurple_sendr
		extrn __imp_wpurple_strerror:dword ; DATA XREF:	wpurple_strerrorr
		extrn __imp_xmlnode_free:dword ; DATA XREF: xmlnode_freer
		extrn __imp_xmlnode_from_str:dword ; DATA XREF:	xmlnode_from_strr
		extrn __imp_xmlnode_get_child:dword ; DATA XREF: xmlnode_get_childr
		extrn __imp_xmlnode_get_data:dword ; DATA XREF:	xmlnode_get_datar
		extrn __imp_xmlnode_get_data_unescaped:dword
					; DATA XREF: xmlnode_get_data_unescapedr

;
; Imports from KERNEL32.dll
;
; void __stdcall DeleteCriticalSection(LPCRITICAL_SECTION lpCriticalSection)
		extrn __imp_DeleteCriticalSection:dword	; DATA XREF: DeleteCriticalSectionr
; void __stdcall EnterCriticalSection(LPCRITICAL_SECTION lpCriticalSection)
		extrn __imp_EnterCriticalSection:dword ; DATA XREF: EnterCriticalSectionr
; DWORD	__stdcall GetLastError()
		extrn __imp_GetLastError:dword ; DATA XREF: GetLastErrorr
; HMODULE __stdcall GetModuleHandleA(LPCSTR lpModuleName)
		extrn __imp_GetModuleHandleA:dword ; DATA XREF:	GetModuleHandleAr
; FARPROC __stdcall GetProcAddress(HMODULE hModule, LPCSTR lpProcName)
		extrn __imp_GetProcAddress:dword ; DATA	XREF: GetProcAddressr
; void __stdcall InitializeCriticalSection(LPCRITICAL_SECTION lpCriticalSection)
		extrn __imp_InitializeCriticalSection:dword
					; DATA XREF: InitializeCriticalSectionr
; void __stdcall LeaveCriticalSection(LPCRITICAL_SECTION lpCriticalSection)
		extrn __imp_LeaveCriticalSection:dword ; DATA XREF: LeaveCriticalSectionr
; LPVOID __stdcall TlsGetValue(DWORD dwTlsIndex)
		extrn __imp_TlsGetValue:dword ;	DATA XREF: TlsGetValuer
; BOOL __stdcall VirtualProtect(LPVOID lpAddress, SIZE_T dwSize, DWORD flNewProtect, PDWORD lpflOldProtect)
		extrn __imp_VirtualProtect:dword ; DATA	XREF: VirtualProtectr
; SIZE_T __stdcall VirtualQuery(LPCVOID	lpAddress, PMEMORY_BASIC_INFORMATION lpBuffer, SIZE_T dwLength)
		extrn __imp_VirtualQuery:dword ; DATA XREF: VirtualQueryr

;
; Imports from msvcrt.dll
;
		extrn __imp___dllonexit:dword ;	DATA XREF: __dllonexitr
; int _mb_cur_max
		extrn __mb_cur_max:dword ; DATA	XREF: sub_6889D79C+84r
					; oscar_util_valid_name+7Cr
; int *__cdecl _errno()
		extrn __imp__errno:dword ; DATA	XREF: _errnor
		extrn _iob:dword	; DATA XREF: sub_688AC7B0+4r
; int __cdecl _isctype(int C, int Type)
		extrn __imp__isctype:dword ; DATA XREF:	_isctyper
; const	unsigned __int16 *pctype
		extrn _pctype:dword	; DATA XREF: sub_6889D79C:loc_6889D828r
					; oscar_util_valid_name+8Br ...
; int _snprintf(char *Dest, size_t Count, const	char *Format, ...)
		extrn __imp__snprintf:dword ; DATA XREF: _snprintfr
; void __cdecl abort()
		extrn __imp_abort:dword	; DATA XREF: abortr
; int __cdecl atoi(const char *Str)
		extrn __imp_atoi:dword	; DATA XREF: atoir
; __int32 __cdecl atol(const char *Str)
		extrn __imp_atol:dword	; DATA XREF: atolr
; void *__cdecl	calloc(size_t NumOfElements, size_t SizeOfElements)
		extrn __imp_calloc:dword ; DATA	XREF: callocr
; int __cdecl fclose(FILE *File)
		extrn __imp_fclose:dword ; DATA	XREF: fcloser
; int __cdecl fflush(FILE *File)
		extrn __imp_fflush:dword ; DATA	XREF: fflushr
; size_t __cdecl fread(void *DstBuf, size_t ElementSize, size_t	Count, FILE *File)
		extrn __imp_fread:dword	; DATA XREF: freadr
; void __cdecl free(void *Memory)
		extrn __imp_free:dword	; DATA XREF: freer
; size_t __cdecl fwrite(const void *Str, size_t	Size, size_t Count, FILE *File)
		extrn __imp_fwrite:dword ; DATA	XREF: fwriter
; struct tm *__cdecl static gmtime(const time_t	*Time)
		extrn __imp_gmtime:dword ; DATA	XREF: gmtimer
; struct tm *__cdecl static localtime(const time_t *Time)
		extrn __imp_localtime:dword ; DATA XREF: localtimer
; void *__cdecl	malloc(size_t Size)
		extrn __imp_malloc:dword ; DATA	XREF: mallocr
; int __cdecl memcmp(const void	*Buf1, const void *Buf2, size_t	Size)
		extrn __imp_memcmp:dword ; DATA	XREF: memcmpr
; void *__cdecl	memcpy(void *Dst, const	void *Src, size_t Size)
		extrn __imp_memcpy:dword ; DATA	XREF: memcpyr
; time_t __cdecl static	mktime(struct tm *Tm)
		extrn __imp_mktime:dword ; DATA	XREF: mktimer
; int __cdecl rand()
		extrn __imp_rand:dword	; DATA XREF: randr
; char *__cdecl	strchr(const char *Str,	int Val)
		extrn __imp_strchr:dword ; DATA	XREF: strchrr
; int __cdecl strcmp(const char	*Str1, const char *Str2)
		extrn __imp_strcmp:dword ; DATA	XREF: strcmpr
; char *__cdecl	strncpy(char *Dest, const char *Source,	size_t Count)
		extrn __imp_strncpy:dword ; DATA XREF: strncpyr
; char *__cdecl	strrchr(const char *Str, int Ch)
		extrn __imp_strrchr:dword ; DATA XREF: strrchrr
; char *__cdecl	strstr(const char *Str,	const char *SubStr)
		extrn __imp_strstr:dword ; DATA	XREF: strstrr
; __int32 __cdecl strtol(const char *Str, char **EndPtr, int Radix)
		extrn __imp_strtol:dword ; DATA	XREF: strtolr
; unsigned __int32 __cdecl strtoul(const char *Str, char **EndPtr, int Radix)
		extrn __imp_strtoul:dword ; DATA XREF: strtoulr
; time_t __cdecl static	time(time_t *Time)
		extrn __imp_time:dword	; DATA XREF: timer
; int __cdecl toupper(int C)
		extrn __imp_toupper:dword ; DATA XREF: toupperr
; int __cdecl vfprintf(FILE *File, const char *Format, va_list ArgList)
		extrn __imp_vfprintf:dword ; DATA XREF:	vfprintfr

;
; Imports from WS2_32.dll
;
; SOCKET __stdcall accept(SOCKET s, struct sockaddr *addr, int *addrlen)
		extrn __imp_accept:dword ; DATA	XREF: acceptr

;
; Imports from libssp-0.dll
;
		extrn __imp___stack_chk_fail:dword ; DATA XREF:	__stack_chk_failr
		extrn __stack_chk_guard:dword ;	DATA XREF: sub_68881290+Er
					; sub_68881290+F6r ...


; Section 8. (virtual address 00049000)
; Virtual size			: 00000018 (	 24.)
; Section size in file		: 00000200 (	512.)
; Offset to raw	data for section: 00045000
; Flags	C0300040: Data Readable	Writable
; Alignment	: 4 bytes
; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read/Write
_CRT		segment	dword public 'DATA' use32
		assume cs:_CRT
		;org 688C9000h
		dd 0
TlsCallbacks	dd offset TlsCallback_0	; DATA XREF: .tls:TlsCallbacks_ptro
		dd offset TlsCallback_1
		dd 0
		dd 0
dword_688C9014	dd 0			; DATA XREF: TlsCallback_0:loc_688AC733o
					; TlsCallback_0+38o ...
		align 1000h
_CRT		ends

; Section 9. (virtual address 0004A000)
; Virtual size			: 00000020 (	 32.)
; Section size in file		: 00000200 (	512.)
; Offset to raw	data for section: 00045200
; Flags	C0300040: Data Readable	Writable
; Alignment	: 4 bytes
; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read/Write
_tls		segment	dword public 'DATA' use32
		assume cs:_tls
		;org 688CA000h
TlsDirectory	dd offset TlsStart
TlsEnd_ptr	dd offset TlsEnd
TlsIndex_ptr	dd offset TlsIndex
TlsCallbacks_ptr dd offset TlsCallbacks
TlsSizeOfZeroFill dd 0
TlsCharacteristics dd 0
		db 0
TlsStart	db 3 dup(0)		; DATA XREF: .tls:TlsDirectoryo
TlsEnd		dd 79h dup(0)		; DATA XREF: .tls:TlsEnd_ptro
		align 1000h
_tls		ends


		end DllEntryPoint
