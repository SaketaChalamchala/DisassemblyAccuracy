;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2015 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-3677-7074-51			    |
; |		Michalis Polychronakis,	Stony Brook University		    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	AD68B67C3A5F808FD9EC1E98F38A6DD4
; Input	CRC32 :	5A4D4389

; ---------------------------------------------------------------------------
; File Name   :	C:\compspace\compare\pidgin\dlls\full\libsilcclient-1-1-3_full.dll
; Format      :	Portable executable for	80386 (PE)
; Imagebase   :	62B80000
; Section 1. (virtual address 00001000)
; Virtual size			: 00025C00 ( 154624.)
; Section size in file		: 00025C00 ( 154624.)
; Offset to raw	data for section: 00000400
; Flags	60500060: Text Data Executable Readable
; Alignment	: 16 bytes

		.686p
		.mmx
		.model flat

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 62B81000h
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
		push	ebp
		mov	ebp, esp
		sub	esp, 18h
		mov	eax, [ebp+8]
		mov	dword ptr [esp+8], offset dword_62BAB010
		mov	dword ptr [esp+4], offset Memory
		mov	[esp], eax
		call	__dllonexit
		leave
		retn
; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_62B81030	proc near		; CODE XREF: sub_62BA6A90+31p
					; sub_62BA6BD0+12p

var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 18h
		mov	eax, [ebp+arg_0]
		mov	[esp+18h+var_10], offset dword_62BAB010
		mov	[esp+18h+var_14], offset Memory
		mov	[esp+18h+var_18], eax
		call	__dllonexit
		leave
		cmp	eax, 1
		sbb	eax, eax
		retn
sub_62B81030	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_62B81060	proc near		; CODE XREF: DllEntryPoint+41p
					; DllEntryPoint+9Dp

Memory		= dword	ptr -18h

		push	ebp
		mov	ebp, esp
		push	ebx
		sub	esp, 14h
		mov	edx, ds:Memory
		test	edx, edx
		jz	short loc_62B810A5
		mov	ebx, ds:dword_62BAB010

loc_62B81077:				; CODE XREF: sub_62B81060+22j
		sub	ebx, 4
		cmp	edx, ebx
		ja	short loc_62B81093

loc_62B8107E:				; CODE XREF: sub_62B81060+31j
		mov	eax, [ebx]
		test	eax, eax
		jz	short loc_62B81077
		call	eax
		mov	edx, ds:Memory
		sub	ebx, 4
		cmp	edx, ebx
		jbe	short loc_62B8107E

loc_62B81093:				; CODE XREF: sub_62B81060+1Cj
		mov	[esp+18h+Memory], edx ;	Memory
		call	free
		mov	ds:Memory, 0

loc_62B810A5:				; CODE XREF: sub_62B81060+Fj
		mov	[esp+18h+Memory], 0 ; File
		call	fflush
		add	esp, 14h
		pop	ebx
		pop	ebp
		retn
sub_62B81060	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; BOOL __stdcall DllEntryPoint(HINSTANCE hinstDLL, DWORD fdwReason, LPVOID lpReserved)
		public DllEntryPoint
DllEntryPoint	proc near

Size		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_1C		= dword	ptr -1Ch
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
hinstDLL	= dword	ptr  8
fdwReason	= dword	ptr  0Ch
lpReserved	= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		sub	esp, 38h
		mov	[ebp+var_C], ebx
		mov	ebx, [ebp+fdwReason]
		mov	[ebp+var_8], esi
		mov	esi, [ebp+hinstDLL]
		mov	[ebp+var_4], edi
		mov	edi, [ebp+lpReserved]
		cmp	ebx, 1
		jz	short loc_62B81118
		mov	[esp+38h+var_30], edi
		mov	[esp+38h+var_34], ebx
		mov	[esp+38h+Size],	esi
		call	sub_62BA6B10
		sub	esp, 0Ch
		test	ebx, ebx
		jnz	short loc_62B81109
		mov	edx, ds:Memory
		test	edx, edx
		jz	short loc_62B81166
		mov	[ebp+var_1C], eax
		call	sub_62B81060
		mov	eax, [ebp+var_1C]

loc_62B81109:				; CODE XREF: DllEntryPoint+32j
					; DllEntryPoint+9Bj ...
		mov	ebx, [ebp+var_C]
		mov	esi, [ebp+var_8]
		mov	edi, [ebp+var_4]
		mov	esp, ebp
		pop	ebp
		retn	0Ch
; ---------------------------------------------------------------------------

loc_62B81118:				; CODE XREF: DllEntryPoint+1Bj
		mov	[esp+38h+Size],	80h ; Size
		call	malloc
		test	eax, eax
		mov	ds:Memory, eax
		jz	short loc_62B81170
		mov	dword ptr [eax], 0
		mov	ds:dword_62BAB010, eax
		call	sub_62BA68B0
		call	sub_62BA6AF0
		mov	[esp+38h+var_30], edi
		mov	[esp+38h+var_34], 1
		mov	[esp+38h+Size],	esi
		call	sub_62BA6B10
		sub	esp, 0Ch
		test	eax, eax
		jnz	short loc_62B81109
		call	sub_62B81060
		xor	eax, eax
		jmp	short loc_62B81109
; ---------------------------------------------------------------------------

loc_62B81166:				; CODE XREF: DllEntryPoint+3Cj
		xor	eax, eax
		jmp	short loc_62B81109
; ---------------------------------------------------------------------------
		align 10h

loc_62B81170:				; CODE XREF: DllEntryPoint+6Bj
		call	_errno
		mov	dword ptr [eax], 0Ch
		xor	eax, eax
		jmp	short loc_62B81109
DllEntryPoint	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_62B81180	proc near		; CODE XREF: sub_62BA6BD0+6p

lpModuleName	= dword	ptr -18h
lpProcName	= dword	ptr -14h

		push	ebp
		mov	ebp, esp
		sub	esp, 18h
		mov	[esp+18h+lpModuleName],	offset ModuleName ; "libgcc_s_dw2-1.dll"
		call	GetModuleHandleA
		push	edx
		test	eax, eax
		jz	short loc_62B811FC
		mov	[esp+18h+lpProcName], offset ProcName ;	"__register_frame_info"
		mov	[esp+18h+lpModuleName],	eax ; hModule
		call	GetProcAddress
		sub	esp, 8

loc_62B811AA:				; CODE XREF: sub_62B81180+81j
		test	eax, eax
		jz	short loc_62B811BF
		mov	[esp+18h+lpProcName], offset dword_62BAB020
		mov	[esp+18h+lpModuleName],	offset dword_62BAA000
		call	eax

loc_62B811BF:				; CODE XREF: sub_62B81180+2Cj
		mov	ecx, dword_62BA701C
		test	ecx, ecx
		jz	short locret_62B811FA
		mov	[esp+18h+lpModuleName],	offset aLibgcj_s_dll ; "libgcj_s.dll"
		call	GetModuleHandleA
		push	edx
		test	eax, eax
		jz	short loc_62B81204
		mov	[esp+18h+lpProcName], offset a_jv_registercl ; "_Jv_RegisterClasses"
		mov	[esp+18h+lpModuleName],	eax ; hModule
		call	GetProcAddress
		sub	esp, 8

loc_62B811ED:				; CODE XREF: sub_62B81180+89j
		test	eax, eax
		jz	short locret_62B811FA
		mov	[esp+18h+lpModuleName],	offset dword_62BA701C
		call	eax

locret_62B811FA:			; CODE XREF: sub_62B81180+47j
					; sub_62B81180+6Fj
		leave
		retn
; ---------------------------------------------------------------------------

loc_62B811FC:				; CODE XREF: sub_62B81180+15j
		mov	eax, 0
		jmp	short loc_62B811AA
; ---------------------------------------------------------------------------
		align 4

loc_62B81204:				; CODE XREF: sub_62B81180+58j
		mov	eax, 0
		jmp	short loc_62B811ED
sub_62B81180	endp

; ---------------------------------------------------------------------------
		align 4

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_62B8120C	proc near		; DATA XREF: sub_62BA6BD0+Bo

lpModuleName	= dword	ptr -18h
lpProcName	= dword	ptr -14h

		push	ebp
		mov	ebp, esp
		sub	esp, 18h
		mov	[esp+18h+lpModuleName],	offset ModuleName ; "libgcc_s_dw2-1.dll"
		call	GetModuleHandleA
		push	ecx
		test	eax, eax
		jz	short loc_62B81248
		mov	[esp+18h+lpProcName], offset a__deregister_f ; "__deregister_frame_info"
		mov	[esp+18h+lpModuleName],	eax ; hModule
		call	GetProcAddress
		sub	esp, 8

loc_62B81236:				; CODE XREF: sub_62B8120C+41j
		test	eax, eax
		jz	short locret_62B81243
		mov	[esp+18h+lpModuleName],	offset dword_62BAA000
		call	eax

locret_62B81243:			; CODE XREF: sub_62B8120C+2Cj
		leave
		retn
; ---------------------------------------------------------------------------
		align 4

loc_62B81248:				; CODE XREF: sub_62B8120C+15j
		mov	eax, 0
		jmp	short loc_62B81236
sub_62B8120C	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_62B81250	proc near		; DATA XREF: sub_62B81474+9Fo
					; sub_62B81474+10Co

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		push	esi
		push	ebx
		mov	edx, [ebp+arg_0]
		mov	ecx, [ebp+arg_4]
		mov	eax, [ecx+54h]
		mov	ebx, [eax+0C4h]
		test	ebx, ebx
		jz	short loc_62B812D4
		movzx	ebx, word ptr [eax+0D0h]
		mov	esi, [eax+0C8h]
		mov	[esi+ebx], edx

loc_62B81278:				; CODE XREF: sub_62B81250+8Aj
		test	byte ptr [eax+0D4h], 1
		jz	short loc_62B81291
		movzx	ebx, word ptr [eax+0D2h]
		mov	esi, [eax+0C8h]
		mov	[edx+ebx], esi

loc_62B81291:				; CODE XREF: sub_62B81250+2Fj
		mov	[eax+0C8h], edx
		movzx	ebx, word ptr [eax+0D0h]
		mov	dword ptr [edx+ebx], 0
		add	dword ptr [eax+0D4h], 4
		mov	edx, [ecx+54h]
		mov	eax, [edx+0D4h]
		and	eax, 0FFFFFFFCh
		cmp	eax, 4
		jnz	short loc_62B812D0
		mov	eax, [edx+0C4h]
		mov	[edx+0CCh], eax
		and	byte ptr [edx+0D4h], 0FDh

loc_62B812D0:				; CODE XREF: sub_62B81250+6Bj
		pop	ebx
		pop	esi
		leave
		retn
; ---------------------------------------------------------------------------

loc_62B812D4:				; CODE XREF: sub_62B81250+16j
		mov	[eax+0C4h], edx
		jmp	short loc_62B81278
sub_62B81250	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_62B812DC	proc near		; DATA XREF: .data:62BA7008o
		push	ebp
		mov	ebp, esp
		leave
		retn
sub_62B812DC	endp

; ---------------------------------------------------------------------------
		align 4
; Exported entry 223. silc_client_stop

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public silc_client_stop
silc_client_stop proc near

var_28		= dword	ptr -28h
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		sub	esp, 1Ch
		mov	ebx, [ebp+arg_0]
		mov	edi, [ebp+arg_4]
		mov	esi, [ebp+arg_8]
		mov	eax, [ebx+18h]
		mov	[esp+28h+var_28], eax
		call	silc_fsm_is_started
		test	al, al
		jz	short loc_62B8132C
		mov	eax, [ebx+18h]
		mov	[eax+74h], edi
		mov	[eax+78h], esi
		or	byte ptr [eax+82h], 1
		mov	eax, [ebx+18h]
		add	eax, 2Ch
		mov	[ebp+arg_0], eax
		add	esp, 1Ch
		pop	ebx
		pop	esi
		pop	edi
		leave
		jmp	silc_fsm_event_signal
; ---------------------------------------------------------------------------
		align 4

loc_62B8132C:				; CODE XREF: silc_client_stop+1Fj
		mov	[esp+28h+var_28], offset aAttemptingToSt ; "Attempting to stop client library befor"...
		call	silc_format
		mov	[ebp+arg_4], eax
		mov	[ebp+arg_0], 2
		add	esp, 1Ch
		pop	ebx
		pop	esi
		pop	edi
		leave
		jmp	silc_log_output
silc_client_stop endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_62B81350	proc near		; DATA XREF: .data:62BA7004o

arg_0		= dword	ptr  8
arg_C		= dword	ptr  14h

		push	ebp
		mov	ebp, esp
		sub	esp, 8
		mov	eax, [ebp+arg_C]
		mov	eax, [eax+54h]
		mov	dword ptr [eax+128h], 2
		mov	dl, [eax+12Dh]
		test	dl, 2
		jz	short loc_62B81374
		leave
		retn
; ---------------------------------------------------------------------------
		align 4

loc_62B81374:				; CODE XREF: sub_62B81350+1Fj
		or	edx, 2
		mov	[eax+12Dh], dl
		add	eax, 98h
		mov	[ebp+arg_0], eax
		leave
		jmp	silc_fsm_event_signal
sub_62B81350	endp

; ---------------------------------------------------------------------------
		align 4
; Exported entry  21. silc_client_close_connection

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public silc_client_close_connection
silc_client_close_connection proc near	; CODE XREF: sub_62B8D2A0+2DFp
					; silc_client_file_close_final+1Ap ...

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 8
		mov	eax, [ebp+arg_4]
		mov	eax, [eax+54h]
		mov	dword ptr [eax+128h], 2
		mov	dl, [eax+12Dh]
		test	dl, 2
		jz	short loc_62B813B0
		leave
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_62B813B0:				; CODE XREF: silc_client_close_connection+1Fj
		or	edx, 2
		mov	[eax+12Dh], dl
		add	eax, 98h
		mov	[ebp+arg_0], eax
		leave
		jmp	silc_fsm_event_signal
silc_client_close_connection endp

; ---------------------------------------------------------------------------
		align 4

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_62B813C8	proc near		; DATA XREF: silc_client_add_connection+282o

var_18		= dword	ptr -18h
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		push	ebx
		sub	esp, 14h
		mov	ebx, [ebp+arg_4]
		mov	dword ptr [ebx+44h], 0
		mov	eax, [ebx+54h]
		mov	dword ptr [eax+100h], 0
		mov	dl, [eax+12Dh]
		test	dl, 2
		jz	short loc_62B813F8

loc_62B813F1:				; CODE XREF: sub_62B813C8+46j
		add	esp, 14h
		pop	ebx
		leave
		retn
; ---------------------------------------------------------------------------
		align 4

loc_62B813F8:				; CODE XREF: sub_62B813C8+27j
		or	edx, 2
		mov	[eax+12Dh], dl
		add	eax, 40h
		mov	[esp+18h+var_18], eax
		call	silc_fsm_is_started
		test	al, al
		jz	short loc_62B813F1
		mov	eax, [ebx+54h]
		add	eax, 98h
		mov	[ebp+arg_0], eax
		add	esp, 14h
		pop	ebx
		leave
		jmp	silc_fsm_event_signal
sub_62B813C8	endp

; ---------------------------------------------------------------------------
		align 4
; Exported entry 196. silc_client_run_one

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public silc_client_run_one
silc_client_run_one proc near

var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	ebx
		sub	esp, 14h
		mov	ebx, [ebp+arg_0]
		mov	eax, [ebx+18h]
		mov	[esp+18h+var_18], eax
		call	silc_fsm_is_started
		test	al, al
		jz	short loc_62B81454
		mov	[esp+18h+var_14], 0
		mov	eax, [ebx+0Ch]
		mov	[esp+18h+var_18], eax
		call	silc_schedule_one

loc_62B81454:				; CODE XREF: silc_client_run_one+17j
		add	esp, 14h
		pop	ebx
		leave
		retn
silc_client_run_one endp

; ---------------------------------------------------------------------------
		align 4
; Exported entry 195. silc_client_run

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public silc_client_run
silc_client_run	proc near

arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 8
		mov	eax, [ebp+arg_0]
		mov	eax, [eax+0Ch]
		mov	[ebp+arg_0], eax
		leave
		jmp	silc_schedule
silc_client_run	endp

; ---------------------------------------------------------------------------
		align 4

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_62B81474	proc near		; DATA XREF: .data:off_62BA7000o

var_68		= dword	ptr -68h
var_64		= dword	ptr -64h
var_60		= dword	ptr -60h
var_5C		= dword	ptr -5Ch
var_58		= dword	ptr -58h
var_54		= dword	ptr -54h
var_3C		= dword	ptr -3Ch
var_1C		= dword	ptr -1Ch
arg_8		= dword	ptr  10h
arg_10		= dword	ptr  18h

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		sub	esp, 5Ch
		mov	eax, [ebp+arg_8]
		cmp	byte ptr [eax+22h], 18h	; switch 25 cases
		ja	short loc_62B81494 ; jumptable 62B8148A	default	case
		movzx	eax, byte ptr [eax+22h]
		jmp	ds:off_62BA80C0[eax*4] ; switch	jump
; ---------------------------------------------------------------------------
		align 4

loc_62B81494:				; CODE XREF: sub_62B81474+10j
					; sub_62B81474+16j
					; DATA XREF: ...
		mov	edx, [ebp+arg_10] ; jumptable 62B8148A default case
		mov	edi, [edx+54h]
		mov	ebx, [edi+0CCh]
		test	ebx, ebx
		jz	loc_62B81570
		test	byte ptr [edi+0D4h], 2
		jnz	loc_62B81560
		movzx	eax, word ptr [edi+0D0h]
		mov	eax, [ebx+eax]

loc_62B814BF:				; CODE XREF: sub_62B81474+F6j
		mov	[edi+0CCh], eax
		mov	[ebp+var_1C], ebx
		mov	edx, [edi+0C4h]
		test	edx, edx
		jz	short loc_62B814F7
		cmp	ebx, edx
		jz	loc_62B8160C
		movzx	esi, word ptr [edi+0D0h]
		jmp	short loc_62B814EE
; ---------------------------------------------------------------------------
		align 4

loc_62B814E4:				; CODE XREF: sub_62B81474+81j
		cmp	ebx, eax
		jz	loc_62B815B0
		mov	edx, eax

loc_62B814EE:				; CODE XREF: sub_62B81474+6Dj
		lea	ecx, [edx+esi]
		mov	eax, [ecx]
		test	eax, eax
		jnz	short loc_62B814E4

loc_62B814F7:				; CODE XREF: sub_62B81474+5Cj
					; sub_62B81474+169j
		cmp	[edi+0C8h], ebx
		jz	loc_62B815F4

loc_62B81503:				; CODE XREF: sub_62B81474+186j
		mov	[esp+68h+var_54], 0
		mov	[esp+68h+var_58], 0
		mov	[esp+68h+var_5C], offset sub_62B81250
		mov	edx, [ebp+arg_10]
		mov	[esp+68h+var_60], edx
		add	edi, 40h
		mov	[esp+68h+var_64], edi
		mov	[esp+68h+var_68], ebx
		call	silc_fsm_thread_init

loc_62B81531:				; CODE XREF: sub_62B81474+12Bj
		mov	ecx, [ebp+arg_8]
		mov	[esp+68h+var_64], ecx
		mov	esi, [ebp+var_1C]
		mov	[esp+68h+var_68], esi
		call	silc_fsm_set_state_context
		mov	[esp+68h+var_64], offset silc_client_connection_st_packet
		mov	[esp+68h+var_68], esi
		call	silc_fsm_start_sync
		mov	al, 1
		add	esp, 5Ch
		pop	ebx
		pop	esi
		pop	edi
		leave
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_62B81560:				; CODE XREF: sub_62B81474+3Bj
		movzx	eax, word ptr [edi+0D2h]
		mov	eax, [ebx+eax]
		jmp	loc_62B814BF
; ---------------------------------------------------------------------------
		align 10h

loc_62B81570:				; CODE XREF: sub_62B81474+2Ej
		mov	[esp+68h+var_58], 0
		mov	[esp+68h+var_5C], 0
		mov	[esp+68h+var_60], offset sub_62B81250
		mov	ecx, [ebp+arg_10]
		mov	[esp+68h+var_64], ecx
		add	edi, 40h
		mov	[esp+68h+var_68], edi
		call	silc_fsm_thread_alloc
		mov	[ebp+var_1C], eax
		test	eax, eax
		jnz	short loc_62B81531
		lea	esi, [esi+0]

loc_62B815A4:				; CODE XREF: sub_62B81474+16j
					; DATA XREF: .rdata:off_62BA80C0o
		xor	eax, eax	; jumptable 62B8148A cases 2-4,13-15,17,23,24
		add	esp, 5Ch
		pop	ebx
		pop	esi
		pop	edi
		leave
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_62B815B0:				; CODE XREF: sub_62B81474+72j
		mov	[ebp+var_3C], ecx

loc_62B815B3:				; CODE XREF: sub_62B81474+1AAj
		mov	eax, [ebx+esi]
		mov	ecx, [ebp+var_3C]
		mov	[ecx], eax
		test	eax, eax
		jz	short loc_62B815C8
		test	byte ptr [edi+0D4h], 1
		jnz	short loc_62B815E4

loc_62B815C8:				; CODE XREF: sub_62B81474+149j
					; sub_62B81474+17Dj
		cmp	[edi+0CCh], ebx
		jz	short loc_62B815FF

loc_62B815D0:				; CODE XREF: sub_62B81474+196j
		sub	dword ptr [edi+0D4h], 4
		mov	eax, [ebp+arg_10]
		mov	edi, [eax+54h]
		jmp	loc_62B814F7
; ---------------------------------------------------------------------------
		align 4

loc_62B815E4:				; CODE XREF: sub_62B81474+152j
		movzx	esi, word ptr [edi+0D2h]
		mov	ecx, [ebx+esi]
		mov	[eax+esi], ecx
		jmp	short loc_62B815C8
; ---------------------------------------------------------------------------
		align 4

loc_62B815F4:				; CODE XREF: sub_62B81474+89j
		mov	[edi+0C8h], edx
		jmp	loc_62B81503
; ---------------------------------------------------------------------------

loc_62B815FF:				; CODE XREF: sub_62B81474+15Aj
		mov	esi, [ebp+var_3C]
		mov	eax, [esi]
		mov	[edi+0CCh], eax
		jmp	short loc_62B815D0
; ---------------------------------------------------------------------------

loc_62B8160C:				; CODE XREF: sub_62B81474+60j
		lea	esi, [edi+0C4h]
		mov	[ebp+var_3C], esi
		movzx	esi, word ptr [edi+0D0h]
		xor	edx, edx
		jmp	short loc_62B815B3
sub_62B81474	endp

; Exported entry 141. silc_client_init

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl silc_client_init(int, char *, char *, char *, int, int)
		public silc_client_init
silc_client_init proc near

Src		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h
arg_10		= dword	ptr  18h
arg_14		= dword	ptr  1Ch

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		sub	esp, 2Ch
		mov	ebx, [ebp+arg_0]
		mov	esi, [ebp+arg_4]
		test	ebx, ebx
		jz	loc_62B81898
		test	esi, esi
		jz	loc_62B818C4
		mov	edx, [ebp+arg_8]
		test	edx, edx
		jz	loc_62B818C4
		mov	eax, [ebp+arg_C]
		test	eax, eax
		jz	loc_62B818EC

loc_62B81655:				; CODE XREF: silc_client_init+2CFj
		mov	ecx, 0FFFFFFFFh
		mov	edi, esi
		xor	eax, eax
		repne scasb
		not	ecx
		dec	ecx
		mov	[esp+38h+var_2C], 80h
		mov	[esp+38h+var_30], 7
		mov	[esp+38h+var_34], ecx
		mov	[esp+38h+Src], esi
		call	silc_identifier_verify
		test	al, al
		jz	loc_62B8186C
		mov	ecx, 0FFFFFFFFh
		mov	edi, [ebp+arg_8]
		xor	eax, eax
		repne scasb
		not	ecx
		dec	ecx
		mov	[esp+38h+var_2C], 100h
		mov	[esp+38h+var_30], 7
		mov	[esp+38h+var_34], ecx
		mov	eax, [ebp+arg_8]
		mov	[esp+38h+Src], eax
		call	silc_identifier_verify
		test	al, al
		jz	loc_62B818B4
		mov	ecx, 0FFFFFFFFh
		mov	edi, [ebp+arg_C]
		xor	eax, eax
		repne scasb
		not	ecx
		dec	ecx
		mov	[esp+38h+var_34], ecx
		mov	eax, [ebp+arg_C]
		mov	[esp+38h+Src], eax
		call	silc_utf8_valid
		test	al, al
		jz	loc_62B818A4
		mov	[esp+38h+Src], esi ; Src
		call	_strdup
		mov	[ebx], eax
		mov	eax, [ebp+arg_8]
		mov	[esp+38h+Src], eax ; Src
		call	_strdup
		mov	[ebx+4], eax
		mov	eax, [ebp+arg_C]
		mov	[esp+38h+Src], eax ; Src
		call	_strdup
		mov	[ebx+8], eax
		mov	esi, [ebx+18h]
		mov	[esp+38h+Src], 1Ch
		call	silc_malloc
		test	eax, eax
		jz	short loc_62B81757
		mov	dword ptr [eax+18h], 0
		mov	dword ptr [eax+14h], 0
		mov	edx, [eax+10h]
		and	edx, 3
		mov	[eax+10h], edx
		mov	word ptr [eax+0Ch], 4
		mov	word ptr [eax+0Eh], 8
		mov	byte ptr [eax+10h], 1
		mov	dword ptr [eax+8], 0
		mov	dword ptr [eax+4], 0
		mov	dword ptr [eax], 0

loc_62B81757:				; CODE XREF: silc_client_init+FAj
		mov	[esi+6Ch], eax
		mov	eax, [ebx+18h]
		mov	edi, [eax+6Ch]
		test	edi, edi
		jz	loc_62B81898
		mov	eax, [eax+4Ch]
		cmp	byte ptr [eax+24h], 0
		jz	loc_62B818F4

loc_62B81775:				; CODE XREF: silc_client_init+2E8j
		call	silc_rng_alloc
		mov	[ebx+10h], eax
		test	eax, eax
		jz	loc_62B81898
		mov	[esp+38h+Src], eax
		call	silc_rng_init
		mov	eax, [ebx+10h]
		mov	[esp+38h+Src], eax
		call	silc_rng_global_init
		mov	[esp+38h+var_34], ebx
		mov	[esp+38h+Src], 0
		call	silc_schedule_init
		mov	[ebx+0Ch], eax
		test	eax, eax
		jz	loc_62B81898
		mov	eax, [ebx+18h]
		add	eax, 54h
		mov	[esp+38h+Src], eax
		call	silc_mutex_alloc
		mov	[esp+38h+Src], ebx
		call	silc_client_commands_register
		mov	esi, [ebx+18h]
		mov	[esp+38h+var_2C], ebx
		mov	[esp+38h+var_30], offset off_62BA7000
		mov	[esp+38h+var_34], 0
		mov	eax, [ebx+10h]
		mov	[esp+38h+Src], eax
		call	silc_packet_engine_start
		mov	[esi+50h], eax
		mov	eax, [ebx+18h]
		mov	esi, [eax+50h]
		test	esi, esi
		jz	loc_62B81898
		mov	edx, [ebp+arg_10]
		mov	[eax+74h], edx
		mov	edx, [ebp+arg_14]
		mov	[eax+78h], edx
		mov	edx, [ebx+0Ch]
		mov	[esp+38h+var_28], edx
		mov	[esp+38h+var_2C], 0
		mov	[esp+38h+var_30], 0
		mov	[esp+38h+var_34], ebx
		mov	[esp+38h+Src], eax
		call	silc_fsm_init
		mov	eax, [ebx+18h]
		mov	[esp+38h+var_34], eax
		add	eax, 2Ch
		mov	[esp+38h+Src], eax
		call	silc_fsm_event_init
		mov	[esp+38h+var_34], offset silc_client_st_run
		mov	eax, [ebx+18h]
		mov	[esp+38h+Src], eax
		call	silc_fsm_start_sync
		mov	eax, [ebx+18h]
		or	byte ptr [eax+82h], 2
		mov	eax, [ebx+18h]
		add	eax, 2Ch
		mov	[esp+38h+Src], eax
		call	silc_fsm_event_signal
		mov	al, 1
		jmp	short loc_62B81890
; ---------------------------------------------------------------------------

loc_62B8186C:				; CODE XREF: silc_client_init+61j
		mov	eax, [ebx]
		mov	[esp+38h+var_34], eax
		mov	[esp+38h+Src], offset aMalformedUsern ;	"Malformed username '%s'. Username must "...

loc_62B81879:				; CODE XREF: silc_client_init+292j
					; silc_client_init+2A2j
		call	silc_format
		mov	[esp+38h+var_34], eax
		mov	[esp+38h+Src], 3
		call	silc_log_output
		xor	eax, eax

loc_62B81890:				; CODE XREF: silc_client_init+24Aj
		add	esp, 2Ch
		pop	ebx
		pop	esi
		pop	edi
		leave
		retn
; ---------------------------------------------------------------------------

loc_62B81898:				; CODE XREF: silc_client_init+11j
					; silc_client_init+142j ...
		xor	eax, eax
		add	esp, 2Ch
		pop	ebx
		pop	esi
		pop	edi
		leave
		retn
; ---------------------------------------------------------------------------
		align 4

loc_62B818A4:				; CODE XREF: silc_client_init+BDj
		mov	eax, [ebx+8]
		mov	[esp+38h+var_34], eax
		mov	[esp+38h+Src], offset aMalformedRealn ;	"Malformed realname '%s'. Realname must "...
		jmp	short loc_62B81879
; ---------------------------------------------------------------------------

loc_62B818B4:				; CODE XREF: silc_client_init+97j
		mov	eax, [ebx+4]
		mov	[esp+38h+var_34], eax
		mov	[esp+38h+Src], offset aMalformedHostn ;	"Malformed hostname '%s'. Hostname must "...
		jmp	short loc_62B81879
; ---------------------------------------------------------------------------

loc_62B818C4:				; CODE XREF: silc_client_init+19j
					; silc_client_init+24j
		mov	[esp+38h+Src], offset aUsernameAndHos ;	"Username and hostname must be given to	"...
		call	silc_format
		mov	[esp+34h+var_30], eax
		mov	[esp+34h+var_34], 3
		call	silc_log_output
		xor	eax, eax
		add	esp, 2Ch
		pop	ebx
		pop	esi
		pop	edi
		leave
		retn
; ---------------------------------------------------------------------------
		align 4

loc_62B818EC:				; CODE XREF: silc_client_init+2Fj
		mov	[ebp+arg_C], esi
		jmp	loc_62B81655
; ---------------------------------------------------------------------------

loc_62B818F4:				; CODE XREF: silc_client_init+14Fj
		call	silc_cipher_register_default
		call	silc_pkcs_register_default
		call	silc_hash_register_default
		call	silc_hmac_register_default
		jmp	loc_62B81775
silc_client_init endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 118. silc_client_free

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public silc_client_free
silc_client_free proc near

var_58		= dword	ptr -58h
var_54		= dword	ptr -54h
var_3C		= dword	ptr -3Ch
var_1C		= dword	ptr -1Ch
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		sub	esp, 4Ch
		mov	eax, [ebp+arg_0]
		mov	[ebp+var_1C], eax
		mov	eax, [eax+0Ch]
		test	eax, eax
		jz	short loc_62B8192E
		mov	[esp+58h+var_58], eax
		call	silc_schedule_uninit

loc_62B8192E:				; CODE XREF: silc_client_free+14j
		mov	ecx, [ebp+var_1C]
		mov	eax, [ecx+10h]
		test	eax, eax
		jz	short loc_62B81940
		mov	[esp+58h+var_58], eax
		call	silc_rng_free

loc_62B81940:				; CODE XREF: silc_client_free+26j
		mov	esi, [ebp+var_1C]
		mov	eax, [esi+18h]
		mov	edx, [eax+4Ch]
		cmp	byte ptr [edx+24h], 0
		jz	loc_62B81AB2

loc_62B81953:				; CODE XREF: silc_client_free+1B9j
		mov	edx, [eax+50h]
		test	edx, edx
		jz	short loc_62B81968
		mov	[esp+58h+var_58], edx
		call	silc_packet_engine_stop
		mov	edx, [ebp+var_1C]
		mov	eax, [edx+18h]

loc_62B81968:				; CODE XREF: silc_client_free+48j
		mov	edi, [eax+6Ch]
		test	edi, edi
		jz	short loc_62B819DD
		mov	ebx, [edi]
		mov	[edi+8], ebx
		and	byte ptr [edi+10h], 0FDh
		test	ebx, ebx
		jz	short loc_62B819CF

loc_62B8197C:				; CODE XREF: silc_client_free+BDj
		test	byte ptr [edi+10h], 2
		jz	loc_62B81A58
		movzx	eax, word ptr [edi+0Eh]
		mov	eax, [ebx+eax]

loc_62B8198D:				; CODE XREF: silc_client_free+14Fj
		mov	[edi+8], eax
		mov	eax, [edi]
		test	eax, eax
		jz	short loc_62B819B7
		cmp	ebx, eax
		jz	loc_62B81AA7
		movzx	esi, word ptr [edi+0Ch]
		jmp	short loc_62B819AE
; ---------------------------------------------------------------------------

loc_62B819A4:				; CODE XREF: silc_client_free+A5j
		cmp	ebx, ecx
		jz	loc_62B81A64
		mov	eax, ecx

loc_62B819AE:				; CODE XREF: silc_client_free+92j
		lea	edx, [eax+esi]
		mov	ecx, [edx]
		test	ecx, ecx
		jnz	short loc_62B819A4

loc_62B819B7:				; CODE XREF: silc_client_free+84j
		cmp	ebx, [edi+4]
		jz	loc_62B81A95

loc_62B819C0:				; CODE XREF: silc_client_free+17Fj
					; silc_client_free+188j
		mov	[esp+58h+var_58], ebx
		call	silc_free
		mov	ebx, [edi+8]
		test	ebx, ebx
		jnz	short loc_62B8197C

loc_62B819CF:				; CODE XREF: silc_client_free+6Aj
		mov	[esp+58h+var_58], edi
		call	silc_free
		mov	esi, [ebp+var_1C]
		mov	eax, [esi+18h]

loc_62B819DD:				; CODE XREF: silc_client_free+5Dj
		mov	edx, [eax+54h]
		test	edx, edx
		jz	short loc_62B819F2
		mov	[esp+58h+var_58], edx
		call	silc_mutex_free
		mov	edx, [ebp+var_1C]
		mov	eax, [edx+18h]

loc_62B819F2:				; CODE XREF: silc_client_free+D2j
		mov	dword ptr [eax+7Ch], 0
		mov	ecx, [ebp+var_1C]
		mov	eax, [ecx]
		mov	[esp+58h+var_58], eax
		call	silc_free
		mov	esi, [ebp+var_1C]
		mov	eax, [esi+4]
		mov	[esp+54h+var_54], eax
		call	silc_free
		mov	eax, [esi+8]
		mov	[esp+54h+var_54], eax
		call	silc_free
		mov	eax, [esi+18h]
		mov	eax, [eax+4Ch]
		mov	[esp+54h+var_54], eax
		call	silc_free
		mov	eax, [esi+18h]
		mov	eax, [eax+70h]
		mov	[esp+54h+var_54], eax
		call	silc_free
		mov	eax, [esi+18h]
		mov	[esp+54h+var_54], eax
		call	silc_free
		mov	[ebp+arg_0], esi
		add	esp, 4Ch
		pop	ebx
		pop	esi
		pop	edi
		leave
		jmp	silc_free
; ---------------------------------------------------------------------------
		align 4

loc_62B81A58:				; CODE XREF: silc_client_free+70j
		movzx	eax, word ptr [edi+0Ch]
		mov	eax, [ebx+eax]
		jmp	loc_62B8198D
; ---------------------------------------------------------------------------

loc_62B81A64:				; CODE XREF: silc_client_free+96j
		mov	[ebp+var_3C], edx

loc_62B81A67:				; CODE XREF: silc_client_free+1A0j
		mov	ecx, [ebx+esi]
		mov	esi, [ebp+var_3C]
		mov	[esi], ecx
		test	ecx, ecx
		jz	short loc_62B81A83
		test	byte ptr [edi+10h], 1
		jz	short loc_62B81A83
		movzx	edx, word ptr [edi+0Eh]
		mov	esi, [ebx+edx]
		mov	[ecx+edx], esi

loc_62B81A83:				; CODE XREF: silc_client_free+161j
					; silc_client_free+167j
		cmp	ebx, [edi+8]
		jz	short loc_62B81A9D

loc_62B81A88:				; CODE XREF: silc_client_free+195j
		sub	dword ptr [edi+10h], 4
		cmp	ebx, [edi+4]
		jnz	loc_62B819C0

loc_62B81A95:				; CODE XREF: silc_client_free+AAj
		mov	[edi+4], eax
		jmp	loc_62B819C0
; ---------------------------------------------------------------------------

loc_62B81A9D:				; CODE XREF: silc_client_free+176j
		mov	ecx, [ebp+var_3C]
		mov	edx, [ecx]
		mov	[edi+8], edx
		jmp	short loc_62B81A88
; ---------------------------------------------------------------------------

loc_62B81AA7:				; CODE XREF: silc_client_free+88j
		movzx	esi, word ptr [edi+0Ch]
		mov	[ebp+var_3C], edi
		xor	eax, eax
		jmp	short loc_62B81A67
; ---------------------------------------------------------------------------

loc_62B81AB2:				; CODE XREF: silc_client_free+3Dj
		call	silc_cipher_unregister_all
		call	silc_pkcs_unregister_all
		call	silc_hash_unregister_all
		call	silc_hmac_unregister_all
		mov	eax, [esi+18h]
		jmp	loc_62B81953
silc_client_free endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  10. silc_client_alloc

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl silc_client_alloc(int, int, int, char *)
		public silc_client_alloc
silc_client_alloc proc near

Src		= dword	ptr -28h
var_24		= dword	ptr -24h
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		sub	esp, 1Ch
		mov	esi, [ebp+arg_4]
		mov	[esp+28h+var_24], 1Ch
		mov	[esp+28h+Src], 1
		call	silc_calloc
		mov	ebx, eax
		test	eax, eax
		jz	short loc_62B81B75
		mov	eax, [ebp+arg_8]
		mov	[ebx+14h], eax
		mov	[esp+28h+var_24], 84h
		mov	[esp+28h+Src], 1
		call	silc_calloc
		mov	edi, eax
		mov	[ebx+18h], eax
		test	eax, eax
		jz	short loc_62B81B8C
		mov	eax, [ebp+arg_0]
		mov	[edi+48h], eax
		mov	[esp+28h+var_24], 25h
		mov	[esp+28h+Src], 1
		call	silc_calloc
		mov	[edi+4Ch], eax
		mov	ecx, [ebp+arg_C]
		test	ecx, ecx
		jz	short loc_62B81B80

loc_62B81B3D:				; CODE XREF: silc_client_alloc+B7j
		mov	edi, [ebx+18h]
		mov	eax, [ebp+arg_C]
		mov	[esp+28h+Src], eax ; Src
		call	_strdup
		mov	[edi+70h], eax
		test	esi, esi
		jz	short loc_62B81B61
		mov	eax, [ebx+18h]
		mov	eax, [eax+4Ch]
		mov	ecx, 25h
		mov	edi, eax
		rep movsb

loc_62B81B61:				; CODE XREF: silc_client_alloc+80j
		mov	eax, [ebx+18h]
		mov	eax, [eax+4Ch]
		mov	byte ptr [eax+20h], 0
		mov	eax, [ebx+18h]
		mov	dword ptr [eax+7Ch], 0

loc_62B81B75:				; CODE XREF: silc_client_alloc+24j
					; silc_client_alloc+C6j
		mov	eax, ebx
		add	esp, 1Ch
		pop	ebx
		pop	esi
		pop	edi
		leave
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_62B81B80:				; CODE XREF: silc_client_alloc+6Bj
		mov	[ebp+arg_C], offset aSilc1_21_1_10S ; "SILC-1.2-1.1.10 silc-toolkit"
		jmp	short loc_62B81B3D
; ---------------------------------------------------------------------------
		align 4

loc_62B81B8C:				; CODE XREF: silc_client_alloc+47j
		mov	[esp+28h+Src], ebx
		call	silc_free
		xor	ebx, ebx
		jmp	short loc_62B81B75
silc_client_alloc endp

; Exported entry 120. silc_client_fsm_destructor

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public silc_client_fsm_destructor
silc_client_fsm_destructor proc	near
		push	ebp
		mov	ebp, esp
		sub	esp, 8
		leave
		jmp	silc_fsm_free
silc_client_fsm_destructor endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_62B81BA4	proc near		; DATA XREF: silc_client_add_connection+2BDo

var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	ebx
		sub	esp, 14h
		mov	ebx, [ebp+arg_0]
		mov	[esp+18h+var_18], ebx
		call	silc_fsm_get_state_context
		mov	eax, [eax+18h]
		mov	edx, [eax+7Ch]
		mov	edx, [eax+7Ch]
		dec	edx
		mov	[eax+7Ch], edx
		or	byte ptr [eax+82h], 4
		add	eax, 2Ch
		mov	[esp+14h+var_14], eax
		call	silc_fsm_event_signal
		mov	[ebp+arg_0], ebx
		add	esp, 14h
		pop	ebx
		leave
		jmp	silc_fsm_free
sub_62B81BA4	endp

; ---------------------------------------------------------------------------
		align 4
; Exported entry 222. silc_client_st_stop

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public silc_client_st_stop
silc_client_st_stop proc near		; DATA XREF: silc_client_st_run+9Fo

var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		push	ebx
		sub	esp, 14h
		mov	ebx, [ebp+arg_4]
		mov	eax, [ebx+0Ch]
		mov	[esp+18h+var_18], eax
		call	silc_schedule_stop
		mov	[esp+18h+var_18], ebx
		call	silc_client_commands_unregister
		mov	edx, [ebx+18h]
		mov	eax, [edx+74h]
		test	eax, eax
		jz	short loc_62B81C17
		mov	edx, [edx+78h]
		mov	[esp+18h+var_14], edx
		mov	[esp+18h+var_18], ebx
		call	eax

loc_62B81C17:				; CODE XREF: silc_client_st_stop+25j
		mov	eax, 3
		add	esp, 14h
		pop	ebx
		leave
		retn
silc_client_st_stop endp

; ---------------------------------------------------------------------------
		align 4
; Exported entry 221. silc_client_st_run

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public silc_client_st_run
silc_client_st_run proc	near		; DATA XREF: silc_client_init+21Do

var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		push	esi
		push	ebx
		sub	esp, 10h
		mov	esi, [ebp+arg_0]
		mov	ebx, [ebp+arg_4]
		mov	[esp+18h+var_14], esi
		mov	eax, [ebx+18h]
		add	eax, 2Ch
		mov	[esp+18h+var_18], eax
		call	silc_fsm_event_wait
		test	eax, eax
		jz	short loc_62B81CAC
		mov	edx, [ebx+18h]
		mov	al, [edx+82h]
		test	al, 2
		jz	short loc_62B81C80
		and	eax, 0FFFFFFFDh
		mov	[edx+82h], al
		mov	edx, [ebx+18h]
		mov	eax, [edx+74h]
		test	eax, eax
		jz	short loc_62B81CA0
		mov	edx, [edx+78h]
		mov	[esp+18h+var_14], edx
		mov	[esp+18h+var_18], ebx
		call	eax
		xor	eax, eax

loc_62B81C76:				; CODE XREF: silc_client_st_run+B1j
					; silc_client_st_run+C1j
		add	esp, 10h
		pop	ebx
		pop	esi
		leave
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_62B81C80:				; CODE XREF: silc_client_st_run+2Fj
		test	al, 4
		jz	short loc_62B81CB8
		and	eax, 0FFFFFFFBh
		mov	[edx+82h], al
		mov	eax, [ebx+18h]
		mov	edx, [eax+7Ch]
		test	edx, edx
		jnz	short loc_62B81CA0
		test	byte ptr [eax+82h], 1
		jnz	short loc_62B81CD8

loc_62B81CA0:				; CODE XREF: silc_client_st_run+42j
					; silc_client_st_run+71j ...
		xor	eax, eax
		add	esp, 10h
		pop	ebx
		pop	esi
		leave
		retn
; ---------------------------------------------------------------------------
		align 4

loc_62B81CAC:				; CODE XREF: silc_client_st_run+22j
		mov	al, 2
		add	esp, 10h
		pop	ebx
		pop	esi
		leave
		retn
; ---------------------------------------------------------------------------
		align 4

loc_62B81CB8:				; CODE XREF: silc_client_st_run+5Ej
		test	al, 1
		jz	short loc_62B81CA0
		mov	eax, [edx+7Ch]
		test	eax, eax
		jnz	short loc_62B81CA0
		mov	[esp+18h+var_14], offset silc_client_st_stop
		mov	[esp+18h+var_18], esi
		call	silc_fsm_next
		xor	eax, eax
		jmp	short loc_62B81C76
; ---------------------------------------------------------------------------
		align 4

loc_62B81CD8:				; CODE XREF: silc_client_st_run+7Aj
		add	eax, 2Ch
		mov	[esp+18h+var_18], eax
		call	silc_fsm_event_signal
		xor	eax, eax
		jmp	short loc_62B81C76
silc_client_st_run endp

; ---------------------------------------------------------------------------
		align 4
; Exported entry 100. silc_client_connection_st_run

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public silc_client_connection_st_run
silc_client_connection_st_run proc near	; DATA XREF: silc_client_connection_st_start+5Co

var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		push	esi
		push	ebx
		sub	esp, 20h
		mov	esi, [ebp+arg_0]
		mov	ebx, [ebp+arg_4]
		mov	[esp+28h+var_24], esi
		mov	eax, [ebx+54h]
		add	eax, 98h
		mov	[esp+28h+var_28], eax
		call	silc_fsm_event_wait
		test	eax, eax
		jz	short loc_62B81D3C
		mov	edx, [ebx+54h]
		mov	al, [edx+12Dh]
		test	al, 2
		jnz	short loc_62B81D48
		lea	esi, [edx+6Ch]
		test	al, 1
		jnz	loc_62B81DAC
		test	al, 4
		jnz	loc_62B81DFC
		test	al, 8
		jnz	short loc_62B81D64

loc_62B81D32:				; CODE XREF: silc_client_connection_st_run+C0j
		xor	eax, eax

loc_62B81D34:				; CODE XREF: silc_client_connection_st_run+15Aj
		add	esp, 20h
		pop	ebx
		pop	esi
		leave
		retn
; ---------------------------------------------------------------------------
		align 4

loc_62B81D3C:				; CODE XREF: silc_client_connection_st_run+24j
		mov	al, 2
		add	esp, 20h
		pop	ebx
		pop	esi
		leave
		retn
; ---------------------------------------------------------------------------
		align 4

loc_62B81D48:				; CODE XREF: silc_client_connection_st_run+31j
		mov	[esp+28h+var_24], offset silc_client_connection_st_close
		mov	[esp+28h+var_28], esi
		call	silc_fsm_next
		mov	eax, 1
		add	esp, 20h
		pop	ebx
		pop	esi
		leave
		retn
; ---------------------------------------------------------------------------

loc_62B81D64:				; CODE XREF: silc_client_connection_st_run+48j
		and	eax, 0FFFFFFF7h
		mov	[edx+12Dh], al
		mov	[esp+28h+var_14], 0
		mov	[esp+28h+var_18], 0
		mov	[esp+28h+var_1C], 0
		mov	[esp+28h+var_20], ebx
		add	edx, 40h
		mov	[esp+28h+var_24], edx
		mov	[esp+28h+var_28], esi
		call	silc_fsm_thread_init
		mov	[esp+28h+var_24], offset silc_client_st_rekey
		mov	[esp+28h+var_28], esi
		call	silc_fsm_start_sync
		jmp	short loc_62B81D32
; ---------------------------------------------------------------------------
		align 4

loc_62B81DAC:				; CODE XREF: silc_client_connection_st_run+38j
		and	eax, 0FFFFFFFEh
		mov	[edx+12Dh], al
		mov	[esp+28h+var_14], 0
		mov	[esp+28h+var_18], 0
		mov	[esp+28h+var_1C], 0
		mov	[esp+28h+var_20], ebx
		add	edx, 40h
		mov	[esp+28h+var_24], edx
		mov	[esp+28h+var_28], esi
		call	silc_fsm_thread_init
		mov	[esp+24h+var_20], offset silc_client_st_connect
		mov	[esp+24h+var_24], esi
		call	silc_fsm_start_sync
		xor	eax, eax
		add	esp, 20h
		pop	ebx
		pop	esi
		leave
		retn
; ---------------------------------------------------------------------------
		align 4

loc_62B81DFC:				; CODE XREF: silc_client_connection_st_run+40j
		and	eax, 0FFFFFFFBh
		mov	[edx+12Dh], al
		mov	[esp+28h+var_14], 0
		mov	[esp+28h+var_18], 0
		mov	[esp+28h+var_1C], 0
		mov	[esp+28h+var_20], ebx
		add	edx, 40h
		mov	[esp+28h+var_24], edx
		mov	[esp+28h+var_28], esi
		call	silc_fsm_thread_init
		mov	[esp+28h+var_24], offset silc_client_st_connect_set_stream
		mov	[esp+28h+var_28], esi
		call	silc_fsm_start_sync
		xor	eax, eax
		jmp	loc_62B81D34
silc_client_connection_st_run endp

; ---------------------------------------------------------------------------
		align 4
; Exported entry  99. silc_client_connection_st_packet

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public silc_client_connection_st_packet
silc_client_connection_st_packet proc near ; DATA XREF:	sub_62B81474+CFo

var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		push	ebx
		sub	esp, 14h
		mov	eax, [ebp+arg_0]
		mov	ebx, [ebp+arg_8]
		cmp	byte ptr [ebx+22h], 1Bh	; switch 28 cases
		jbe	short loc_62B81E70

loc_62B81E5B:				; CODE XREF: silc_client_connection_st_packet+2Cj
					; DATA XREF: .rdata:off_62BA8220o
		mov	[esp+18h+var_18], ebx ;	jumptable 62B81E74 default case
		call	silc_packet_free
		mov	eax, 3

loc_62B81E68:				; CODE XREF: silc_client_connection_st_packet+46j
					; silc_client_connection_st_packet+5Aj	...
		add	esp, 14h
		pop	ebx
		leave
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_62B81E70:				; CODE XREF: silc_client_connection_st_packet+11j
		movzx	edx, byte ptr [ebx+22h]
		jmp	ds:off_62BA8220[edx*4] ; switch	jump
; ---------------------------------------------------------------------------
		align 4

loc_62B81E7C:				; CODE XREF: silc_client_connection_st_packet+2Cj
					; DATA XREF: .rdata:off_62BA8220o
		mov	[esp+18h+var_14], offset silc_client_ftp ; jumptable 62B81E74 case 27
		mov	[esp+18h+var_18], eax
		call	silc_fsm_next
		xor	eax, eax
		jmp	short loc_62B81E68
; ---------------------------------------------------------------------------

loc_62B81E90:				; CODE XREF: silc_client_connection_st_packet+2Cj
					; DATA XREF: .rdata:off_62BA8220o
		mov	[esp+18h+var_14], offset silc_client_disconnect	; jumptable 62B81E74 case 1
		mov	[esp+18h+var_18], eax
		call	silc_fsm_next
		xor	eax, eax
		jmp	short loc_62B81E68
; ---------------------------------------------------------------------------

loc_62B81EA4:				; CODE XREF: silc_client_connection_st_packet+2Cj
					; DATA XREF: .rdata:off_62BA8220o
		mov	[esp+18h+var_14], offset silc_client_notify ; jumptable	62B81E74 case 5
		mov	[esp+18h+var_18], eax
		call	silc_fsm_next
		xor	eax, eax
		jmp	short loc_62B81E68
; ---------------------------------------------------------------------------

loc_62B81EB8:				; CODE XREF: silc_client_connection_st_packet+2Cj
					; DATA XREF: .rdata:off_62BA8220o
		mov	[esp+18h+var_14], offset silc_client_error ; jumptable 62B81E74	case 6
		mov	[esp+18h+var_18], eax
		call	silc_fsm_next
		xor	eax, eax
		jmp	short loc_62B81E68
; ---------------------------------------------------------------------------

loc_62B81ECC:				; CODE XREF: silc_client_connection_st_packet+2Cj
					; DATA XREF: .rdata:off_62BA8220o
		mov	[esp+18h+var_14], offset silc_client_channel_message ; jumptable 62B81E74 case 7
		mov	[esp+18h+var_18], eax
		call	silc_fsm_next
		xor	eax, eax
		jmp	short loc_62B81E68
; ---------------------------------------------------------------------------

loc_62B81EE0:				; CODE XREF: silc_client_connection_st_packet+2Cj
					; DATA XREF: .rdata:off_62BA8220o
		mov	[esp+18h+var_14], offset silc_client_channel_key ; jumptable 62B81E74 case 8
		mov	[esp+18h+var_18], eax
		call	silc_fsm_next
		xor	eax, eax
		jmp	loc_62B81E68
; ---------------------------------------------------------------------------
		align 4

loc_62B81EF8:				; CODE XREF: silc_client_connection_st_packet+2Cj
					; DATA XREF: .rdata:off_62BA8220o
		mov	[esp+18h+var_14], offset silc_client_private_message ; jumptable 62B81E74 case 9
		mov	[esp+18h+var_18], eax
		call	silc_fsm_next
		xor	eax, eax
		jmp	loc_62B81E68
; ---------------------------------------------------------------------------
		align 10h

loc_62B81F10:				; CODE XREF: silc_client_connection_st_packet+2Cj
					; DATA XREF: .rdata:off_62BA8220o
		mov	[esp+18h+var_14], offset silc_client_private_message_key ; jumptable 62B81E74 case 10
		mov	[esp+18h+var_18], eax
		call	silc_fsm_next
		xor	eax, eax
		jmp	loc_62B81E68
; ---------------------------------------------------------------------------
		align 4

loc_62B81F28:				; CODE XREF: silc_client_connection_st_packet+2Cj
					; DATA XREF: .rdata:off_62BA8220o
		mov	[esp+18h+var_14], offset silc_client_command ; jumptable 62B81E74 case 11
		mov	[esp+18h+var_18], eax
		call	silc_fsm_next
		xor	eax, eax
		jmp	loc_62B81E68
; ---------------------------------------------------------------------------
		align 10h

loc_62B81F40:				; CODE XREF: silc_client_connection_st_packet+2Cj
					; DATA XREF: .rdata:off_62BA8220o
		mov	[esp+18h+var_14], offset silc_client_command_reply ; jumptable 62B81E74	case 12
		mov	[esp+18h+var_18], eax
		call	silc_fsm_next
		xor	eax, eax
		jmp	loc_62B81E68
; ---------------------------------------------------------------------------
		align 4

loc_62B81F58:				; CODE XREF: silc_client_connection_st_packet+2Cj
					; DATA XREF: .rdata:off_62BA8220o
		mov	[esp+18h+var_14], offset silc_client_connect_auth_request ; jumptable 62B81E74 case 16
		mov	[esp+18h+var_18], eax
		call	silc_fsm_next
		xor	eax, eax
		jmp	loc_62B81E68
; ---------------------------------------------------------------------------
		align 10h

loc_62B81F70:				; CODE XREF: silc_client_connection_st_packet+2Cj
					; DATA XREF: .rdata:off_62BA8220o
		mov	[esp+18h+var_14], offset silc_client_new_id ; jumptable	62B81E74 case 18
		mov	[esp+18h+var_18], eax
		call	silc_fsm_next
		xor	eax, eax
		jmp	loc_62B81E68
; ---------------------------------------------------------------------------
		align 4

loc_62B81F88:				; CODE XREF: silc_client_connection_st_packet+2Cj
					; DATA XREF: .rdata:off_62BA8220o
		mov	eax, [ebp+arg_4] ; jumptable 62B81E74 case 22
		mov	eax, [eax+54h]
		or	byte ptr [eax+12Dh], 48h
		add	eax, 98h
		mov	[esp+18h+var_18], eax
		call	silc_fsm_event_signal
		mov	[esp+18h+var_18], ebx
		call	silc_packet_free
		mov	eax, 3
		jmp	loc_62B81E68
; ---------------------------------------------------------------------------

loc_62B81FB4:				; CODE XREF: silc_client_connection_st_packet+2Cj
					; DATA XREF: .rdata:off_62BA8220o
		mov	[esp+18h+var_14], offset silc_client_key_agreement ; jumptable 62B81E74	case 25
		mov	[esp+18h+var_18], eax
		call	silc_fsm_next
		xor	eax, eax
		jmp	loc_62B81E68
silc_client_connection_st_packet endp

; ---------------------------------------------------------------------------
		align 4
; Exported entry 113. silc_client_error

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public silc_client_error
silc_client_error proc near		; DATA XREF: silc_client_connection_st_packet:loc_62B81EB8o

var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_1C		= dword	ptr -1Ch
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		sub	esp, 2Ch
		mov	esi, [ebp+arg_4]
		mov	ebx, [ebp+arg_8]
		mov	edi, [esi+4Ch]
		mov	edx, [ebx+0Ch]
		mov	eax, [ebx+10h]
		sub	eax, edx
		mov	[esp+38h+var_34], eax
		mov	[esp+38h+var_38], edx
		call	silc_memdup
		test	eax, eax
		jz	short loc_62B82017
		mov	edx, [edi+18h]
		mov	edx, [edx+48h]
		mov	[esp+38h+var_2C], eax
		mov	[esp+38h+var_30], 4
		mov	[esp+38h+var_34], esi
		mov	[esp+38h+var_38], edi
		mov	[ebp+var_1C], eax
		call	dword ptr [edx]
		mov	eax, [ebp+var_1C]

loc_62B82017:				; CODE XREF: silc_client_error+28j
		mov	[esp+38h+var_38], eax
		call	silc_free
		mov	[esp+38h+var_38], ebx
		call	silc_packet_free
		mov	eax, 3
		add	esp, 2Ch
		pop	ebx
		pop	esi
		pop	edi
		leave
		retn
silc_client_error endp

; Exported entry 111. silc_client_disconnect

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public silc_client_disconnect
silc_client_disconnect proc near	; DATA XREF: silc_client_connection_st_packet:loc_62B81E90o

var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_C		= byte ptr -0Ch
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		push	esi
		push	ebx
		sub	esp, 20h
		mov	esi, [ebp+arg_4]
		mov	ebx, [ebp+arg_8]
		mov	eax, [ebx+0Ch]
		cmp	[ebx+10h], eax
		jz	short loc_62B8209A
		mov	dl, [eax]
		lea	ecx, [eax+1]
		mov	[ebx+0Ch], ecx
		mov	eax, [ebx+10h]
		sub	eax, ecx
		cmp	eax, 1
		jbe	short loc_62B82072
		mov	[esp+28h+var_24], eax
		mov	[esp+28h+var_28], ecx
		mov	[ebp+var_C], dl
		call	silc_utf8_valid
		test	al, al
		mov	dl, [ebp+var_C]
		jnz	short loc_62B820CC

loc_62B82072:				; CODE XREF: silc_client_disconnect+26j
		xor	eax, eax

loc_62B82074:				; CODE XREF: silc_client_disconnect+AFj
		mov	ecx, [esi+54h]
		mov	dword ptr [ecx+128h], 2
		mov	[ecx+12Ch], dl
		mov	edx, [esi+54h]
		mov	[edx+10Ch], eax
		mov	al, [edx+12Dh]
		test	al, 2
		jz	short loc_62B820B0

loc_62B8209A:				; CODE XREF: silc_client_disconnect+14j
					; silc_client_disconnect+95j
		mov	[esp+28h+var_28], ebx
		call	silc_packet_free
		mov	eax, 3
		add	esp, 20h
		pop	ebx
		pop	esi
		leave
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_62B820B0:				; CODE XREF: silc_client_disconnect+64j
		or	eax, 2
		mov	[edx+12Dh], al
		mov	eax, [esi+54h]
		add	eax, 98h
		mov	[esp+28h+var_28], eax
		call	silc_fsm_event_signal
		jmp	short loc_62B8209A
; ---------------------------------------------------------------------------
		align 4

loc_62B820CC:				; CODE XREF: silc_client_disconnect+3Cj
		mov	ecx, [ebx+0Ch]
		mov	eax, [ebx+10h]
		sub	eax, ecx
		mov	[esp+28h+var_24], eax
		mov	[esp+28h+var_28], ecx
		call	silc_memdup
		mov	dl, [ebp+var_C]
		jmp	short loc_62B82074
silc_client_disconnect endp

; ---------------------------------------------------------------------------
		align 4
; Exported entry  98. silc_client_connection_st_close

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public silc_client_connection_st_close
silc_client_connection_st_close	proc near
					; DATA XREF: silc_client_connection_st_run:loc_62B81D48o

var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		sub	esp, 2Ch
		mov	edi, [ebp+arg_4]
		mov	eax, [edi+54h]
		test	dword ptr [eax+0E8h], 0FFFFFFFCh
		jz	loc_62B82188
		mov	edx, [eax+0D8h]
		mov	[eax+0E0h], edx
		and	byte ptr [eax+0E8h], 0FDh
		xchg	ax, ax

loc_62B8211C:				; CODE XREF: silc_client_connection_st_close+67j
		mov	eax, [edi+54h]
		mov	ebx, [eax+0E0h]
		test	ebx, ebx
		jz	short loc_62B8216C

loc_62B82129:				; CODE XREF: silc_client_connection_st_close+80j
		test	byte ptr [eax+0E8h], 2
		jz	short loc_62B8217C
		movzx	edx, word ptr [eax+0E6h]
		mov	edx, [ebx+edx]

loc_62B8213C:				; CODE XREF: silc_client_connection_st_close+9Ej
		mov	[eax+0E0h], edx
		lea	esi, [ebx+8]
		mov	[esp+38h+var_38], esi
		call	silc_fsm_is_started
		test	al, al
		jz	short loc_62B8211C
		and	byte ptr [ebx+64h], 0FDh
		mov	[esp+38h+var_38], esi
		call	silc_fsm_continue_sync
		mov	eax, [edi+54h]
		mov	ebx, [eax+0E0h]
		test	ebx, ebx
		jnz	short loc_62B82129
		xchg	ax, ax

loc_62B8216C:				; CODE XREF: silc_client_connection_st_close+3Fj
					; silc_client_connection_st_close+155j
		mov	eax, 1

loc_62B82171:				; CODE XREF: silc_client_connection_st_close+15Cj
		add	esp, 2Ch
		pop	ebx
		pop	esi
		pop	edi
		leave
		retn
; ---------------------------------------------------------------------------
		align 4

loc_62B8217C:				; CODE XREF: silc_client_connection_st_close+48j
		movzx	edx, word ptr [eax+0E4h]
		mov	edx, [ebx+edx]
		jmp	short loc_62B8213C
; ---------------------------------------------------------------------------

loc_62B82188:				; CODE XREF: silc_client_connection_st_close+19j
		mov	edx, [eax+0FCh]
		test	edx, edx
		jz	short loc_62B821B7
		mov	[esp+38h+var_30], 0
		mov	[esp+38h+var_34], 0
		mov	[esp+38h+var_38], edx
		call	silc_async_abort
		mov	eax, [edi+54h]
		mov	dword ptr [eax+0FCh], 0

loc_62B821B7:				; CODE XREF: silc_client_connection_st_close+A8j
		add	eax, 6Ch
		mov	[esp+38h+var_38], eax
		call	silc_fsm_is_started
		test	al, al
		jnz	short loc_62B8222F
		mov	edx, [edi+44h]
		test	edx, edx
		jz	short loc_62B82202
		mov	eax, [edi+54h]
		mov	ecx, [edi+48h]
		mov	[esp+38h+var_24], ecx
		mov	ecx, [eax+10Ch]
		mov	[esp+38h+var_28], ecx
		movzx	ecx, byte ptr [eax+12Ch]
		mov	[esp+38h+var_2C], ecx
		mov	eax, [eax+128h]
		mov	[esp+38h+var_30], eax
		mov	[esp+38h+var_34], edi
		mov	eax, [edi+4Ch]
		mov	[esp+38h+var_38], eax
		call	edx

loc_62B82202:				; CODE XREF: silc_client_connection_st_close+E3j
		mov	eax, [edi+54h]
		mov	eax, [eax+10Ch]
		mov	[esp+38h+var_38], eax
		call	silc_free
		mov	eax, [edi+3Ch]
		test	eax, eax
		jz	short loc_62B82242
		mov	[esp+38h+var_38], eax
		call	silc_packet_stream_destroy
		mov	eax, 3
		add	esp, 2Ch
		pop	ebx
		pop	esi
		pop	edi
		leave
		retn
; ---------------------------------------------------------------------------

loc_62B8222F:				; CODE XREF: silc_client_connection_st_close+DCj
		mov	eax, [edi+54h]
		add	eax, 6Ch
		mov	[esp+38h+var_38], eax
		call	silc_fsm_continue_sync
		jmp	loc_62B8216C
; ---------------------------------------------------------------------------

loc_62B82242:				; CODE XREF: silc_client_connection_st_close+130j
		mov	al, 3
		jmp	loc_62B82171
silc_client_connection_st_close	endp

; ---------------------------------------------------------------------------
		align 4
; Exported entry 101. silc_client_connection_st_start

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public silc_client_connection_st_start
silc_client_connection_st_start	proc near ; DATA XREF: silc_client_add_connection+2E6o

var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		sub	esp, 2Ch
		mov	edi, [ebp+arg_0]
		mov	ebx, [ebp+arg_4]
		mov	esi, [ebx+54h]
		mov	[esp+38h+var_38], edi
		call	silc_fsm_get_schedule
		mov	[esi+0B4h], eax
		mov	eax, [ebx+54h]
		lea	esi, [eax+40h]
		mov	eax, [eax+0B4h]
		mov	[esp+38h+var_28], eax
		mov	[esp+38h+var_2C], edi
		mov	[esp+38h+var_30], offset sub_62B82CD4
		mov	[esp+38h+var_34], ebx
		mov	[esp+38h+var_38], esi
		call	silc_fsm_init
		mov	[esp+38h+var_34], esi
		mov	eax, [ebx+54h]
		add	eax, 98h
		mov	[esp+38h+var_38], eax
		call	silc_fsm_event_init
		mov	[esp+38h+var_34], offset silc_client_connection_st_run
		mov	[esp+38h+var_38], esi
		call	silc_fsm_start_sync
		mov	edx, [ebx+54h]
		mov	al, [edx+12Dh]
		test	al, 2
		jnz	short loc_62B82304

loc_62B822C5:				; CODE XREF: silc_client_connection_st_start+CFj
		test	al, 1
		jnz	short loc_62B822E8

loc_62B822C9:				; CODE XREF: silc_client_connection_st_start+B3j
		test	al, 4
		jz	short loc_62B822DB
		add	edx, 98h
		mov	[esp+38h+var_38], edx
		call	silc_fsm_event_signal

loc_62B822DB:				; CODE XREF: silc_client_connection_st_start+7Fj
		mov	eax, 2
		add	esp, 2Ch
		pop	ebx
		pop	esi
		pop	edi
		leave
		retn
; ---------------------------------------------------------------------------

loc_62B822E8:				; CODE XREF: silc_client_connection_st_start+7Bj
		add	edx, 98h
		mov	[esp+38h+var_38], edx
		call	silc_fsm_event_signal
		mov	edx, [ebx+54h]
		mov	al, [edx+12Dh]
		jmp	short loc_62B822C9
; ---------------------------------------------------------------------------
		align 4

loc_62B82304:				; CODE XREF: silc_client_connection_st_start+77j
		add	edx, 98h
		mov	[esp+38h+var_38], edx
		call	silc_fsm_event_signal
		mov	edx, [ebx+54h]
		mov	al, [edx+12Dh]
		jmp	short loc_62B822C5
silc_client_connection_st_start	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 108. silc_client_del_connection

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public silc_client_del_connection
silc_client_del_connection proc	near	; CODE XREF: silc_client_add_connection+34Bp
					; silc_client_add_connection+36Ep ...

var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_2C		= dword	ptr -2Ch
var_24		= dword	ptr -24h
var_20		= word ptr -20h
var_1E		= word ptr -1Eh
var_1C		= byte ptr -1Ch
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		sub	esp, 3Ch
		mov	esi, [ebp+arg_0]
		mov	ebx, [ebp+arg_4]
		mov	[esp+48h+var_44], ebx
		mov	eax, [ebx+54h]
		mov	eax, [eax+0B4h]
		mov	[esp+48h+var_48], eax
		call	silc_schedule_task_del_by_context
		mov	eax, [ebx+54h]
		mov	edx, [eax+11Ch]
		test	edx, edx
		jz	short loc_62B823A7
		lea	eax, [ebp+var_2C]
		mov	[esp+48h+var_44], eax
		mov	[esp+48h+var_48], edx
		call	silc_idcache_get_all
		test	al, al
		jz	short loc_62B823A4
		mov	eax, [ebp+var_2C]
		mov	[ebp+var_24], eax
		and	[ebp+var_1C], 0FDh
		jmp	short loc_62B82390
; ---------------------------------------------------------------------------

loc_62B82370:				; CODE XREF: silc_client_del_connection+78j
		movzx	edx, [ebp+var_1E]
		mov	edx, [eax+edx]

loc_62B82377:				; CODE XREF: silc_client_del_connection+81j
		mov	[ebp+var_24], edx
		mov	eax, [eax+0Ch]
		mov	[esp+48h+var_40], eax
		mov	[esp+48h+var_44], ebx
		mov	[esp+48h+var_48], esi
		call	silc_client_del_server
		mov	eax, [ebp+var_24]

loc_62B82390:				; CODE XREF: silc_client_del_connection+4Ej
		test	eax, eax
		jz	short loc_62B823A4
		test	[ebp+var_1C], 2
		jnz	short loc_62B82370
		movzx	edx, [ebp+var_20]
		mov	edx, [eax+edx]
		jmp	short loc_62B82377
; ---------------------------------------------------------------------------
		align 4

loc_62B823A4:				; CODE XREF: silc_client_del_connection+42j
					; silc_client_del_connection+72j
		mov	eax, [ebx+54h]

loc_62B823A7:				; CODE XREF: silc_client_del_connection+2Fj
		mov	edx, [eax+118h]
		test	edx, edx
		jz	short loc_62B8241B
		lea	eax, [ebp+var_2C]
		mov	[esp+48h+var_44], eax
		mov	[esp+48h+var_48], edx
		call	silc_idcache_get_all
		test	al, al
		jz	short loc_62B82418
		mov	edi, [ebp+var_2C]
		mov	[ebp+var_24], edi
		and	[ebp+var_1C], 0FDh
		jmp	short loc_62B82403
; ---------------------------------------------------------------------------

loc_62B823D0:				; CODE XREF: silc_client_del_connection+EBj
		movzx	eax, [ebp+var_1E]
		mov	eax, [edi+eax]

loc_62B823D7:				; CODE XREF: silc_client_del_connection+F4j
		mov	[ebp+var_24], eax
		mov	eax, [edi+0Ch]
		mov	[esp+48h+var_40], eax
		mov	[esp+48h+var_44], ebx
		mov	[esp+48h+var_48], esi
		call	silc_client_empty_channel
		mov	eax, [edi+0Ch]
		mov	[esp+48h+var_40], eax
		mov	[esp+48h+var_44], ebx
		mov	[esp+48h+var_48], esi
		call	silc_client_del_channel
		mov	edi, [ebp+var_24]

loc_62B82403:				; CODE XREF: silc_client_del_connection+AEj
		test	edi, edi
		jz	short loc_62B82418
		test	[ebp+var_1C], 2
		jnz	short loc_62B823D0
		movzx	eax, [ebp+var_20]
		mov	eax, [edi+eax]
		jmp	short loc_62B823D7
; ---------------------------------------------------------------------------
		align 4

loc_62B82418:				; CODE XREF: silc_client_del_connection+A2j
					; silc_client_del_connection+E5j
		mov	eax, [ebx+54h]

loc_62B8241B:				; CODE XREF: silc_client_del_connection+8Fj
		mov	edx, [eax+114h]
		test	edx, edx
		jz	short loc_62B82454
		lea	eax, [ebp+var_2C]
		mov	[esp+48h+var_44], eax
		mov	[esp+48h+var_48], edx
		call	silc_idcache_get_all
		test	al, al
		jnz	loc_62B825C4

loc_62B8243C:				; CODE XREF: silc_client_del_connection+2D2j
		mov	eax, [ebx+54h]
		mov	edx, [eax+114h]
		test	edx, edx
		jz	short loc_62B82454
		mov	[esp+48h+var_48], edx
		call	silc_idcache_free
		mov	eax, [ebx+54h]

loc_62B82454:				; CODE XREF: silc_client_del_connection+103j
					; silc_client_del_connection+127j
		mov	edx, [eax+118h]
		test	edx, edx
		jz	short loc_62B82469
		mov	[esp+48h+var_48], edx
		call	silc_idcache_free
		mov	eax, [ebx+54h]

loc_62B82469:				; CODE XREF: silc_client_del_connection+13Cj
		mov	edx, [eax+11Ch]
		test	edx, edx
		jz	short loc_62B8247E
		mov	[esp+48h+var_48], edx
		call	silc_idcache_free
		mov	eax, [ebx+54h]

loc_62B8247E:				; CODE XREF: silc_client_del_connection+151j
		mov	edx, [eax+0C4h]
		mov	[eax+0CCh], edx
		and	byte ptr [eax+0D4h], 0FDh
		jmp	short loc_62B824AC
; ---------------------------------------------------------------------------
		align 4

loc_62B82494:				; CODE XREF: silc_client_del_connection+1A0j
		movzx	ecx, word ptr [eax+0D2h]
		mov	ecx, [edx+ecx]

loc_62B8249E:				; CODE XREF: silc_client_del_connection+1ACj
		mov	[eax+0CCh], ecx
		mov	[esp+48h+var_48], edx
		call	silc_fsm_free

loc_62B824AC:				; CODE XREF: silc_client_del_connection+171j
		mov	eax, [ebx+54h]
		mov	edx, [eax+0CCh]
		test	edx, edx
		jz	short loc_62B824D0
		test	byte ptr [eax+0D4h], 2
		jnz	short loc_62B82494
		movzx	ecx, word ptr [eax+0D0h]
		mov	ecx, [edx+ecx]
		jmp	short loc_62B8249E
; ---------------------------------------------------------------------------
		align 10h

loc_62B824D0:				; CODE XREF: silc_client_del_connection+197j
		mov	eax, [ebx+8]
		mov	[esp+48h+var_48], eax
		call	silc_free
		mov	eax, [ebx+54h]
		mov	esi, [eax+0F4h]
		test	esi, esi
		jz	short loc_62B824FD
		mov	eax, [esi]
		mov	[esp+48h+var_48], eax
		call	silc_free
		mov	[esp+48h+var_48], esi
		call	silc_free
		mov	eax, [ebx+54h]

loc_62B824FD:				; CODE XREF: silc_client_del_connection+1C6j
		mov	esi, [eax+0F8h]
		test	esi, esi
		jz	short loc_62B8251C
		mov	eax, [esi]
		mov	[esp+48h+var_48], eax
		call	silc_free
		mov	[esp+48h+var_48], esi
		call	silc_free
		mov	eax, [ebx+54h]

loc_62B8251C:				; CODE XREF: silc_client_del_connection+1E5j
		mov	eax, [eax+0B8h]
		mov	[esp+48h+var_48], eax
		call	silc_mutex_free
		mov	eax, [ebx+54h]
		mov	edx, [eax+0ECh]
		test	edx, edx
		jz	short loc_62B82542
		mov	[esp+48h+var_48], edx
		call	silc_hash_free
		mov	eax, [ebx+54h]

loc_62B82542:				; CODE XREF: silc_client_del_connection+215j
		mov	edx, [eax+0F0h]
		test	edx, edx
		jz	short loc_62B82557
		mov	[esp+48h+var_48], edx
		call	silc_hash_free
		mov	eax, [ebx+54h]

loc_62B82557:				; CODE XREF: silc_client_del_connection+22Aj
		mov	word ptr [eax+124h], 0
		mov	eax, [ebx+54h]
		mov	eax, [eax+110h]
		mov	[esp+48h+var_48], eax
		call	silc_free
		mov	eax, [ebx+54h]
		mov	edx, [eax+0C0h]
		test	edx, edx
		jz	short loc_62B82589
		mov	[esp+48h+var_48], edx
		call	silc_ske_free_rekey_material
		mov	eax, [ebx+54h]

loc_62B82589:				; CODE XREF: silc_client_del_connection+25Cj
		mov	edx, [eax+100h]
		test	edx, edx
		jz	short loc_62B8259E
		mov	[esp+48h+var_48], edx
		call	silc_async_free
		mov	eax, [ebx+54h]

loc_62B8259E:				; CODE XREF: silc_client_del_connection+271j
		mov	[esp+48h+var_48], eax
		call	silc_free
		mov	ecx, 58h
		mov	al, 46h
		mov	edi, ebx
		rep stosb
		mov	[esp+48h+var_48], ebx
		call	silc_free
		add	esp, 3Ch
		pop	ebx
		pop	esi
		pop	edi
		leave
		retn
; ---------------------------------------------------------------------------
		align 4

loc_62B825C4:				; CODE XREF: silc_client_del_connection+116j
		mov	eax, [ebp+var_2C]
		mov	[ebp+var_24], eax
		and	[ebp+var_1C], 0FDh
		jmp	short loc_62B825F0
; ---------------------------------------------------------------------------

loc_62B825D0:				; CODE XREF: silc_client_del_connection+2DCj
		movzx	edx, [ebp+var_1E]
		mov	edx, [eax+edx]

loc_62B825D7:				; CODE XREF: silc_client_del_connection+2E5j
		mov	[ebp+var_24], edx
		mov	eax, [eax+0Ch]
		mov	[esp+48h+var_40], eax
		mov	[esp+48h+var_44], ebx
		mov	[esp+48h+var_48], esi
		call	silc_client_del_client
		mov	eax, [ebp+var_24]

loc_62B825F0:				; CODE XREF: silc_client_del_connection+2AEj
		test	eax, eax
		jz	loc_62B8243C
		test	[ebp+var_1C], 2
		jnz	short loc_62B825D0
		movzx	edx, [ebp+var_20]
		mov	edx, [eax+edx]
		jmp	short loc_62B825D7
silc_client_del_connection endp

; ---------------------------------------------------------------------------
		align 4
; Exported entry   5. silc_client_add_connection

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl silc_client_add_connection(int, int, char, int, int, int,	char *,	int, int, int)
		public silc_client_add_connection
silc_client_add_connection proc	near	; CODE XREF: silc_client_key_exchange+A3p
					; silc_client_connect_to_client+78p ...

Src		= dword	ptr -48h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_19		= byte ptr -19h
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= byte ptr  10h
arg_C		= dword	ptr  14h
arg_10		= dword	ptr  18h
arg_14		= dword	ptr  1Ch
arg_18		= dword	ptr  20h
arg_1C		= dword	ptr  24h
arg_20		= dword	ptr  28h
arg_24		= dword	ptr  2Ch

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		sub	esp, 3Ch
		mov	edi, [ebp+arg_1C]
		mov	esi, [ebp+arg_20]
		mov	al, [ebp+arg_8]
		mov	[ebp+var_19], al
		test	esi, esi
		jnz	short loc_62B82630

loc_62B82621:				; CODE XREF: silc_client_add_connection+35Fj
		xor	ebx, ebx

loc_62B82623:				; CODE XREF: silc_client_add_connection+40j
					; silc_client_add_connection+33Cj ...
		mov	eax, ebx
		add	esp, 3Ch
		pop	ebx
		pop	esi
		pop	edi
		leave
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_62B82630:				; CODE XREF: silc_client_add_connection+17j
		mov	[esp+48h+var_44], 58h
		mov	[esp+48h+Src], 1
		call	silc_calloc
		mov	ebx, eax
		test	eax, eax
		jz	short loc_62B82623
		mov	edx, [ebp+arg_0]
		mov	[eax+4Ch], edx
		mov	eax, [ebp+arg_10]
		mov	[ebx+34h], eax
		mov	eax, [ebp+arg_14]
		mov	[ebx+38h], eax
		mov	eax, [ebp+arg_18]
		mov	[esp+48h+Src], eax ; Src
		call	_strdup
		mov	[ebx+8], eax
		test	edi, edi
		jnz	short loc_62B82672
		mov	di, 2C2h

loc_62B82672:				; CODE XREF: silc_client_add_connection+64j
		mov	[ebx+0Ch], edi
		mov	eax, [ebp+arg_4]
		mov	[ebx+40h], eax
		mov	[ebx+44h], esi
		mov	eax, [ebp+arg_24]
		mov	[ebx+48h], eax
		mov	[esp+48h+var_44], 130h
		mov	[esp+48h+Src], 1
		call	silc_calloc
		mov	[ebx+54h], eax
		test	eax, eax
		jz	loc_62B8295F
		mov	byte ptr [eax+127h], 1
		mov	eax, [ebx+54h]
		add	eax, 0B8h
		mov	[esp+48h+Src], eax
		call	silc_mutex_alloc
		mov	eax, [ebx+54h]
		mov	word ptr [eax+124h], 0
		add	eax, 0F0h
		mov	[esp+48h+var_44], eax
		mov	[esp+48h+Src], offset aSha1 ; "sha1"
		call	silc_hash_alloc
		test	al, al
		jz	loc_62B8292F
		mov	ecx, [ebp+arg_C]
		test	ecx, ecx
		jz	short loc_62B82702
		mov	eax, [ebx+54h]
		mov	ecx, 10h
		mov	edi, eax
		mov	esi, [ebp+arg_C]
		rep movsd
		mov	edx, [ebp+arg_C]
		mov	eax, [edx+3Ch]
		mov	[ebx+50h], eax

loc_62B82702:				; CODE XREF: silc_client_add_connection+E0j
		mov	esi, [ebx+54h]
		mov	eax, [esi+34h]
		test	eax, eax
		jnz	loc_62B82918
		mov	dword ptr [esi+34h], 0E10h

loc_62B82717:				; CODE XREF: silc_client_add_connection+315j
					; silc_client_add_connection+322j
		or	byte ptr [esi+12Dh], 10h
		mov	eax, [ebx+54h]
		and	dword ptr [eax+0E8h], 3
		mov	eax, [ebx+54h]
		mov	word ptr [eax+0E4h], 0
		and	byte ptr [eax+0E8h], 0FEh
		mov	eax, [ebx+54h]
		mov	word ptr [eax+0E6h], 0
		and	byte ptr [eax+0E8h], 0FDh
		mov	eax, [ebx+54h]
		mov	dword ptr [eax+0E0h], 0
		mov	dword ptr [eax+0DCh], 0
		mov	dword ptr [eax+0D8h], 0
		and	dword ptr [eax+0D4h], 3
		mov	eax, [ebx+54h]
		mov	word ptr [eax+0D0h], 0
		and	byte ptr [eax+0D4h], 0FEh
		mov	eax, [ebx+54h]
		mov	word ptr [eax+0D2h], 0
		and	byte ptr [eax+0D4h], 0FDh
		mov	esi, [ebx+54h]
		mov	dword ptr [esi+0CCh], 0
		mov	dword ptr [esi+0C8h], 0
		mov	dword ptr [esi+0C4h], 0
		cmp	[ebp+arg_4], 1
		jz	loc_62B82878
		mov	[esp+48h+var_3C], 0
		mov	[esp+48h+var_40], 0
		mov	[esp+48h+var_44], 2
		mov	[esp+48h+Src], 0
		call	silc_idcache_alloc
		mov	[esi+114h], eax
		mov	esi, [ebx+54h]
		mov	[esp+48h+var_3C], 0
		mov	[esp+48h+var_40], 0
		mov	[esp+48h+var_44], 3
		mov	[esp+48h+Src], 0
		call	silc_idcache_alloc
		mov	[esi+118h], eax
		mov	esi, [ebx+54h]
		mov	[esp+48h+var_3C], 0
		mov	[esp+48h+var_40], 0
		mov	[esp+48h+var_44], 1
		mov	[esp+48h+Src], 0
		call	silc_idcache_alloc
		mov	[esi+11Ch], eax
		mov	esi, [ebx+54h]
		mov	edx, [esi+114h]
		test	edx, edx
		jz	loc_62B82949
		mov	eax, [esi+118h]
		test	eax, eax
		jz	loc_62B82949
		mov	edi, [esi+11Ch]
		test	edi, edi
		jz	loc_62B82949

loc_62B82878:				; CODE XREF: silc_client_add_connection+1B9j
		cmp	[ebp+var_19], 0
		jz	short loc_62B828AD
		mov	[esp+48h+var_40], ebx
		mov	[esp+48h+var_44], 0
		mov	[esp+48h+Src], offset sub_62B813C8
		call	silc_async_alloc
		mov	[esi+100h], eax
		mov	eax, [ebx+54h]
		mov	esi, [eax+100h]
		test	esi, esi
		jz	loc_62B8296C

loc_62B828AD:				; CODE XREF: silc_client_add_connection+274j
		mov	edx, [ebp+arg_0]
		mov	eax, [edx+18h]
		mov	edx, [eax+4Ch]
		movzx	edx, byte ptr [edx]
		mov	[esp+48h+var_38], edx
		mov	[esp+48h+var_3C], 0
		mov	[esp+48h+var_40], offset sub_62B81BA4
		mov	[esp+48h+var_44], ebx
		mov	[esp+48h+Src], eax
		call	silc_fsm_thread_alloc
		mov	esi, eax
		test	eax, eax
		jz	short loc_62B82949
		mov	edx, [ebp+arg_0]
		mov	[esp+48h+var_44], edx
		mov	[esp+48h+Src], eax
		call	silc_fsm_set_state_context
		mov	[esp+44h+var_40], offset silc_client_connection_st_start
		mov	[esp+44h+var_44], esi
		call	silc_fsm_start
		mov	edx, [ebp+arg_0]
		mov	eax, [edx+18h]
		mov	edx, [eax+7Ch]
		mov	edx, [eax+7Ch]
		inc	edx
		mov	[eax+7Ch], edx
		mov	eax, ebx
		add	esp, 3Ch
		pop	ebx
		pop	esi
		pop	edi
		leave
		retn
; ---------------------------------------------------------------------------

loc_62B82918:				; CODE XREF: silc_client_add_connection+102j
		cmp	eax, 12Bh
		ja	loc_62B82717
		mov	dword ptr [esi+34h], 12Ch
		jmp	loc_62B82717
; ---------------------------------------------------------------------------

loc_62B8292F:				; CODE XREF: silc_client_add_connection+D5j
		mov	[esp+48h+Src], ebx
		call	silc_free
		mov	eax, [ebx+54h]
		mov	[esp+48h+Src], eax
		call	silc_free
		xor	ebx, ebx
		jmp	loc_62B82623
; ---------------------------------------------------------------------------

loc_62B82949:				; CODE XREF: silc_client_add_connection+24Ej
					; silc_client_add_connection+25Cj ...
		mov	[esp+48h+var_44], ebx
		mov	eax, [ebp+arg_0]
		mov	[esp+48h+Src], eax
		call	silc_client_del_connection
		xor	ebx, ebx
		jmp	loc_62B82623
; ---------------------------------------------------------------------------

loc_62B8295F:				; CODE XREF: silc_client_add_connection+95j
		mov	[esp+48h+Src], ebx
		call	silc_free
		jmp	loc_62B82621
; ---------------------------------------------------------------------------

loc_62B8296C:				; CODE XREF: silc_client_add_connection+29Fj
		mov	[esp+48h+var_44], ebx
		mov	edx, [ebp+arg_0]
		mov	[esp+48h+Src], edx
		call	silc_client_del_connection
		xor	ebx, ebx
		jmp	loc_62B82623
silc_client_add_connection endp

; ---------------------------------------------------------------------------
		align 4
; Exported entry 144. silc_client_key_exchange

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public silc_client_key_exchange
silc_client_key_exchange proc near	; CODE XREF: silc_client_perform_key_agreement_stream+E5p

var_58		= dword	ptr -58h
var_54		= dword	ptr -54h
var_50		= byte ptr -50h
var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_20		= dword	ptr -20h
var_1A		= word ptr -1Ah
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h
arg_10		= dword	ptr  18h
arg_14		= dword	ptr  1Ch
arg_18		= dword	ptr  20h
arg_1C		= dword	ptr  24h

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		sub	esp, 4Ch
		mov	ebx, [ebp+arg_0]
		mov	esi, [ebp+arg_10]
		mov	edi, [ebp+arg_18]
		test	ebx, ebx
		jnz	short loc_62B829A4

loc_62B8299A:				; CODE XREF: silc_client_key_exchange+22j
		xor	eax, eax

loc_62B8299C:				; CODE XREF: silc_client_key_exchange+EEj
					; silc_client_key_exchange+13Ej
		add	esp, 4Ch
		pop	ebx
		pop	esi
		pop	edi
		leave
		retn
; ---------------------------------------------------------------------------

loc_62B829A4:				; CODE XREF: silc_client_key_exchange+14j
		test	esi, esi
		jz	short loc_62B8299A
		mov	eax, [ebx+18h]
		test	byte ptr [eax+82h], 2
		jnz	loc_62B82A54
		lea	eax, [ebp+var_1A]
		mov	[esp+58h+var_48], eax
		mov	[esp+58h+var_4C], 0
		lea	eax, [ebp+var_20]
		mov	dword ptr [esp+58h+var_50], eax
		mov	[esp+58h+var_54], 0
		mov	[esp+58h+var_58], esi
		call	silc_socket_stream_get_info
		test	al, al
		jz	loc_62B82A78
		mov	eax, [ebp+arg_1C]
		mov	[esp+58h+var_34], eax ;	int
		mov	[esp+58h+var_38], edi ;	int
		movzx	eax, [ebp+var_1A]
		mov	[esp+58h+var_3C], eax ;	int
		mov	eax, [ebp+var_20]
		mov	[esp+58h+var_40], eax ;	char *
		mov	eax, [ebp+arg_C]
		mov	[esp+58h+var_44], eax ;	int
		mov	eax, [ebp+arg_8]
		mov	[esp+58h+var_48], eax ;	int
		mov	eax, [ebp+arg_4]
		mov	[esp+58h+var_4C], eax ;	int
		mov	dword ptr [esp+58h+var_50], 1 ;	char
		mov	eax, [ebp+arg_14]
		mov	[esp+58h+var_54], eax ;	int
		mov	[esp+58h+var_58], ebx ;	int
		call	silc_client_add_connection
		test	eax, eax
		jz	short loc_62B82A94
		mov	edx, [eax+54h]
		mov	[edx+108h], esi
		or	byte ptr [edx+12Dh], 4
		mov	eax, [eax+54h]
		mov	eax, [eax+100h]
		add	esp, 4Ch
		pop	ebx
		pop	esi
		pop	edi
		leave
		retn
; ---------------------------------------------------------------------------
		align 4

loc_62B82A54:				; CODE XREF: silc_client_key_exchange+2Ej
		mov	[esp+58h+var_58], offset aClientLibraryI ; "Client library is not started yet. Silc"...
		call	silc_format
		mov	[esp+58h+var_54], eax
		mov	[esp+58h+var_58], 3
		call	silc_log_output
		xor	eax, eax
		jmp	loc_62B8299C
; ---------------------------------------------------------------------------
		align 4

loc_62B82A78:				; CODE XREF: silc_client_key_exchange+5Cj
		mov	[esp+58h+var_58], offset aSocketStreamDo ; "Socket stream does not have	remote host"...
		call	silc_format
		mov	[esp+58h+var_54], eax
		mov	[esp+58h+var_58], 3
		call	silc_log_output

loc_62B82A94:				; CODE XREF: silc_client_key_exchange+AAj
		mov	eax, [ebp+arg_1C]
		mov	[esp+58h+var_44], eax
		mov	[esp+58h+var_48], 0
		mov	[esp+58h+var_4C], 0
		mov	dword ptr [esp+58h+var_50], 3
		mov	[esp+58h+var_54], 0
		mov	[esp+58h+var_58], ebx
		call	edi
		xor	eax, eax
		jmp	loc_62B8299C
silc_client_key_exchange endp

; ---------------------------------------------------------------------------
		align 4
; Exported entry  96. silc_client_connect_to_client

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl silc_client_connect_to_client(int, int, int, int,	char *,	int, int, int)
		public silc_client_connect_to_client
silc_client_connect_to_client proc near	; CODE XREF: silc_client_ftp+32Dp
					; silc_client_file_receive+2B5p ...

var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_40		= byte ptr -40h
var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h
arg_10		= dword	ptr  18h
arg_14		= dword	ptr  1Ch
arg_18		= dword	ptr  20h
arg_1C		= dword	ptr  24h

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		sub	esp, 3Ch
		mov	ebx, [ebp+arg_0]
		mov	eax, [ebp+arg_4]
		mov	edx, [ebp+arg_10]
		mov	esi, [ebp+arg_18]
		mov	edi, [ebp+arg_1C]
		test	ebx, ebx
		jnz	short loc_62B82AF0

loc_62B82AE4:				; CODE XREF: silc_client_connect_to_client+2Aj
		xor	eax, eax

loc_62B82AE6:				; CODE XREF: silc_client_connect_to_client+BAj
					; silc_client_connect_to_client+EAj
		add	esp, 3Ch
		pop	ebx
		pop	esi
		pop	edi
		leave
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_62B82AF0:				; CODE XREF: silc_client_connect_to_client+1Aj
		test	edx, edx
		jz	short loc_62B82AE4
		mov	ecx, [ebx+18h]
		test	byte ptr [ecx+82h], 2
		jnz	short loc_62B82B64
		test	eax, eax
		jz	short loc_62B82B08
		mov	byte ptr [eax+25h], 1

loc_62B82B08:				; CODE XREF: silc_client_connect_to_client+3Aj
		mov	[esp+48h+var_24], edi ;	int
		mov	[esp+48h+var_28], esi ;	int
		mov	ecx, [ebp+arg_14]
		mov	[esp+48h+var_2C], ecx ;	int
		mov	[esp+48h+var_30], edx ;	char *
		mov	edx, [ebp+arg_C]
		mov	[esp+48h+var_34], edx ;	int
		mov	edx, [ebp+arg_8]
		mov	[esp+48h+var_38], edx ;	int
		mov	[esp+48h+var_3C], eax ;	int
		mov	dword ptr [esp+48h+var_40], 1 ;	char
		mov	[esp+48h+var_44], 1 ; int
		mov	[esp+48h+var_48], ebx ;	int
		call	silc_client_add_connection
		test	eax, eax
		jz	short loc_62B82B87
		mov	edx, [eax+54h]
		or	byte ptr [edx+12Dh], 1
		mov	eax, [eax+54h]
		mov	eax, [eax+100h]
		add	esp, 3Ch
		pop	ebx
		pop	esi
		pop	edi
		leave
		retn
; ---------------------------------------------------------------------------

loc_62B82B64:				; CODE XREF: silc_client_connect_to_client+36j
		mov	[esp+48h+var_48], offset aClientLibraryI ; "Client library is not started yet. Silc"...
		call	silc_format
		mov	[esp+48h+var_44], eax
		mov	[esp+48h+var_48], 3
		call	silc_log_output
		xor	eax, eax
		jmp	loc_62B82AE6
; ---------------------------------------------------------------------------

loc_62B82B87:				; CODE XREF: silc_client_connect_to_client+7Fj
		mov	[esp+48h+var_34], edi
		mov	[esp+48h+var_38], 0
		mov	[esp+48h+var_3C], 0
		mov	dword ptr [esp+48h+var_40], 3
		mov	[esp+48h+var_44], 0
		mov	[esp+48h+var_48], ebx
		call	esi
		xor	eax, eax
		jmp	loc_62B82AE6
silc_client_connect_to_client endp

; ---------------------------------------------------------------------------
		align 4
; Exported entry  97. silc_client_connect_to_server

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl silc_client_connect_to_server(int, int, int, int,	char *,	int, int, int)
		public silc_client_connect_to_server
silc_client_connect_to_server proc near

var_58		= dword	ptr -58h
var_54		= dword	ptr -54h
var_50		= byte ptr -50h
var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_1C		= dword	ptr -1Ch
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h
arg_10		= dword	ptr  18h
arg_14		= dword	ptr  1Ch
arg_18		= dword	ptr  20h
arg_1C		= dword	ptr  24h

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		sub	esp, 4Ch
		mov	ebx, [ebp+arg_0]
		mov	esi, [ebp+arg_10]
		mov	edi, [ebp+arg_14]
		test	ebx, ebx
		jnz	short loc_62B82BD8

loc_62B82BCE:				; CODE XREF: silc_client_connect_to_server+22j
		xor	eax, eax

loc_62B82BD0:				; CODE XREF: silc_client_connect_to_server+E2j
					; silc_client_connect_to_server+116j
		add	esp, 4Ch
		pop	ebx
		pop	esi
		pop	edi
		leave
		retn
; ---------------------------------------------------------------------------

loc_62B82BD8:				; CODE XREF: silc_client_connect_to_server+14j
		test	esi, esi
		jz	short loc_62B82BCE
		mov	eax, [ebx+18h]
		test	byte ptr [eax+82h], 2
		jnz	loc_62B82C7C
		mov	eax, [ebp+arg_1C]
		mov	[esp+58h+var_34], eax ;	int
		mov	eax, [ebp+arg_18]
		mov	[esp+58h+var_38], eax ;	int
		mov	[esp+58h+var_3C], edi ;	int
		mov	[esp+58h+var_40], esi ;	char *
		mov	eax, [ebp+arg_C]
		mov	[esp+58h+var_44], eax ;	int
		mov	eax, [ebp+arg_8]
		mov	[esp+58h+var_48], eax ;	int
		mov	eax, [ebp+arg_4]
		mov	[esp+58h+var_4C], eax ;	int
		mov	dword ptr [esp+58h+var_50], 1 ;	char
		mov	[esp+58h+var_54], 2 ; int
		mov	[esp+58h+var_58], ebx ;	int
		call	silc_client_add_connection
		test	eax, eax
		jz	short loc_62B82C9F
		mov	edx, [ebx+18h]
		mov	edx, [edx+48h]
		mov	[esp+58h+var_44], esi
		mov	[esp+58h+var_48], edi
		mov	[esp+58h+var_4C], offset aConnectingToPo ; "Connecting to port %d of server %s"
		mov	dword ptr [esp+58h+var_50], 4
		mov	[esp+58h+var_54], eax
		mov	[esp+58h+var_58], ebx
		mov	[ebp+var_1C], eax
		call	dword ptr [edx]
		mov	eax, [ebp+var_1C]
		mov	edx, [eax+54h]
		or	byte ptr [edx+12Dh], 1
		mov	eax, [eax+54h]
		mov	eax, [eax+100h]
		add	esp, 4Ch
		pop	ebx
		pop	esi
		pop	edi
		leave
		retn
; ---------------------------------------------------------------------------
		align 4

loc_62B82C7C:				; CODE XREF: silc_client_connect_to_server+2Ej
		mov	[esp+58h+var_58], offset aClientLibraryI ; "Client library is not started yet. Silc"...
		call	silc_format
		mov	[esp+58h+var_54], eax
		mov	[esp+58h+var_58], 3
		call	silc_log_output
		xor	eax, eax
		jmp	loc_62B82BD0
; ---------------------------------------------------------------------------

loc_62B82C9F:				; CODE XREF: silc_client_connect_to_server+79j
		mov	eax, [ebp+arg_1C]
		mov	[esp+58h+var_44], eax
		mov	[esp+58h+var_48], 0
		mov	[esp+58h+var_4C], 0
		mov	dword ptr [esp+58h+var_50], 3
		mov	[esp+58h+var_54], 0
		mov	[esp+58h+var_58], ebx
		call	[ebp+arg_18]
		xor	eax, eax
		jmp	loc_62B82BD0
silc_client_connect_to_server endp

; ---------------------------------------------------------------------------
		align 4

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_62B82CD4	proc near		; DATA XREF: silc_client_connection_st_start+34o

var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		push	ebx
		sub	esp, 14h
		mov	eax, [ebp+arg_4]
		mov	ebx, [ebp+arg_8]
		mov	[esp+18h+var_14], eax
		mov	eax, [eax+4Ch]
		mov	[esp+18h+var_18], eax
		call	silc_client_del_connection
		mov	[ebp+arg_0], ebx
		add	esp, 14h
		pop	ebx
		leave
		jmp	silc_fsm_finish
sub_62B82CD4	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  13. silc_client_attributes_get

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public silc_client_attributes_get
silc_client_attributes_get proc	near

arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		mov	eax, [ebp+arg_4]
		mov	eax, [eax+54h]
		mov	eax, [eax+104h]
		leave
		retn
silc_client_attributes_get endp

; ---------------------------------------------------------------------------
		align 4
; Exported entry  15. silc_client_attributes_request

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public silc_client_attributes_request
silc_client_attributes_request proc near ; CODE	XREF: silc_client_attributes_request+B3p
					; silc_client_command_whois+144p ...

var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
arg_0		= byte ptr  8
arg_4		= byte ptr  0Ch

		push	ebp
		mov	ebp, esp
		push	ebx
		sub	esp, 44h
		mov	dl, [ebp+arg_0]
		test	dl, dl
		jz	short loc_62B82D60
		lea	ebx, [ebp+arg_4]
		xor	eax, eax
		nop

loc_62B82D28:				; CODE XREF: silc_client_attributes_request+43j
		mov	[esp+48h+var_38], 0
		mov	[esp+48h+var_3C], 0
		mov	[esp+48h+var_40], 0
		movzx	edx, dl
		mov	[esp+48h+var_44], edx
		mov	[esp+48h+var_48], eax
		call	silc_attribute_payload_encode
		add	ebx, 4
		mov	dl, [ebx-4]
		test	dl, dl
		jnz	short loc_62B82D28
		add	esp, 44h
		pop	ebx
		leave
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_62B82D60:				; CODE XREF: silc_client_attributes_request+Cj
		mov	[esp+48h+var_18], 0
		mov	[esp+48h+var_1C], 0Ch
		mov	[esp+48h+var_20], 0Ah
		mov	[esp+48h+var_24], 9
		mov	[esp+48h+var_28], 8
		mov	[esp+48h+var_2C], 7
		mov	[esp+48h+var_30], 6
		mov	[esp+48h+var_34], 5
		mov	[esp+48h+var_38], 4
		mov	[esp+48h+var_3C], 3
		mov	[esp+48h+var_40], 2
		mov	[esp+48h+var_44], 10h
		mov	[esp+48h+var_48], 1
		call	silc_client_attributes_request
		add	esp, 44h
		pop	ebx
		leave
		retn
silc_client_attributes_request endp

; ---------------------------------------------------------------------------
		align 4

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_62B82DD4	proc near		; DATA XREF: silc_client_attribute_del+64o

var_18		= dword	ptr -18h
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		push	esi
		push	ebx
		sub	esp, 10h
		mov	ebx, [ebp+arg_4]
		mov	esi, [ebp+arg_8]
		test	ebx, ebx
		jz	short loc_62B82E10
		mov	[esp+18h+var_18], ebx
		call	silc_attribute_get_attribute
		mov	[ebp+arg_8], ebx
		movzx	eax, al
		mov	[ebp+arg_4], eax
		mov	eax, [esi+54h]
		mov	eax, [eax+104h]
		mov	[ebp+arg_0], eax
		add	esp, 10h
		pop	ebx
		pop	esi
		leave
		jmp	silc_hash_table_del_by_context
; ---------------------------------------------------------------------------
		align 10h

loc_62B82E10:				; CODE XREF: sub_62B82DD4+10j
		add	esp, 10h
		pop	ebx
		pop	esi
		leave
		retn
sub_62B82DD4	endp

; ---------------------------------------------------------------------------
		align 4
; Exported entry  12. silc_client_attribute_del

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public silc_client_attribute_del
silc_client_attribute_del proc near

var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
arg_4		= dword	ptr  0Ch
arg_8		= byte ptr  10h
arg_C		= dword	ptr  14h

		push	ebp
		mov	ebp, esp
		push	esi
		push	ebx
		sub	esp, 10h
		mov	ebx, [ebp+arg_4]
		mov	esi, [ebp+arg_C]
		mov	dl, [ebp+arg_8]
		mov	eax, [ebx+54h]
		mov	eax, [eax+104h]
		test	eax, eax
		jz	loc_62B82ED4
		test	esi, esi
		jz	short loc_62B82E74
		mov	[esp+18h+var_18], esi
		call	silc_attribute_get_attribute
		mov	[esp+18h+var_10], esi
		movzx	eax, al
		mov	[esp+18h+var_14], eax
		mov	eax, [ebx+54h]
		mov	eax, [eax+104h]
		mov	[esp+18h+var_18], eax
		call	silc_hash_table_del_by_context
		mov	esi, eax
		test	al, al
		jnz	short loc_62B82E98

loc_62B82E68:				; CODE XREF: silc_client_attribute_del+93j
		mov	eax, esi
		add	esp, 10h
		pop	ebx
		pop	esi
		leave
		retn
; ---------------------------------------------------------------------------
		align 4

loc_62B82E74:				; CODE XREF: silc_client_attribute_del+24j
		test	dl, dl
		jz	short loc_62B82ED4
		mov	[esp+18h+var_C], ebx
		mov	[esp+18h+var_10], offset sub_62B82DD4
		movzx	edx, dl
		mov	[esp+18h+var_14], edx
		mov	[esp+18h+var_18], eax
		call	silc_hash_table_find_foreach
		mov	esi, 1

loc_62B82E98:				; CODE XREF: silc_client_attribute_del+4Ej
		mov	eax, [ebx+54h]
		mov	eax, [eax+104h]
		mov	[esp+18h+var_18], eax
		call	silc_hash_table_count
		test	eax, eax
		jnz	short loc_62B82E68
		mov	eax, [ebx+54h]
		mov	eax, [eax+104h]
		mov	[esp+18h+var_18], eax
		call	silc_hash_table_free
		mov	eax, [ebx+54h]
		mov	dword ptr [eax+104h], 0
		mov	eax, esi
		add	esp, 10h
		pop	ebx
		pop	esi
		leave
		retn
; ---------------------------------------------------------------------------

loc_62B82ED4:				; CODE XREF: silc_client_attribute_del+1Cj
					; silc_client_attribute_del+5Ej
		xor	esi, esi
		mov	eax, esi
		add	esp, 10h
		pop	ebx
		pop	esi
		leave
		retn
silc_client_attribute_del endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  11. silc_client_attribute_add

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public silc_client_attribute_add
silc_client_attribute_add proc near

var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_19		= byte ptr -19h
arg_4		= dword	ptr  0Ch
arg_8		= byte ptr  10h
arg_C		= dword	ptr  14h
arg_10		= dword	ptr  18h

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		sub	esp, 3Ch
		mov	esi, [ebp+arg_4]
		mov	al, [ebp+arg_8]
		mov	[ebp+var_19], al
		mov	eax, [ebp+arg_10]
		mov	[esp+48h+var_3C], eax
		mov	eax, [ebp+arg_C]
		mov	[esp+48h+var_40], eax
		mov	[esp+48h+var_44], 2
		movzx	eax, [ebp+var_19]
		mov	[esp+48h+var_48], eax
		call	silc_attribute_payload_alloc
		mov	ebx, eax
		test	eax, eax
		jz	short loc_62B82F3B
		mov	edi, [esi+54h]
		mov	eax, [edi+104h]
		test	eax, eax
		jz	short loc_62B82F48

loc_62B82F27:				; CODE XREF: silc_client_attribute_add+BBj
		mov	[esp+48h+var_40], ebx
		movzx	edx, [ebp+var_19]
		mov	[esp+48h+var_44], edx
		mov	[esp+48h+var_48], eax
		call	silc_hash_table_add

loc_62B82F3B:				; CODE XREF: silc_client_attribute_add+38j
		mov	eax, ebx
		add	esp, 3Ch
		pop	ebx
		pop	esi
		pop	edi
		leave
		retn
; ---------------------------------------------------------------------------
		align 4

loc_62B82F48:				; CODE XREF: silc_client_attribute_add+45j
		mov	[esp+48h+var_2C], 1
		mov	[esp+48h+var_30], 0
		mov	[esp+48h+var_34], offset sub_62B82FA0
		mov	[esp+48h+var_38], 0
		mov	[esp+48h+var_3C], 0
		mov	[esp+48h+var_40], 0
		mov	[esp+48h+var_44], offset loc_62BA61A4
		mov	[esp+48h+var_48], 0
		call	silc_hash_table_alloc
		mov	[edi+104h], eax
		mov	eax, [esi+54h]
		mov	eax, [eax+104h]
		jmp	short loc_62B82F27
silc_client_attribute_add endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_62B82FA0	proc near		; DATA XREF: silc_client_attribute_add+78o

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 8
		mov	eax, [ebp+arg_4]
		mov	[ebp+arg_0], eax
		leave
		jmp	silc_attribute_payload_free
sub_62B82FA0	endp

; ---------------------------------------------------------------------------
		align 4
; Exported entry  14. silc_client_attributes_process

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public silc_client_attributes_process
silc_client_attributes_process proc near ; CODE	XREF: silc_client_command+A0p

var_858		= dword	ptr -858h
var_854		= dword	ptr -854h
var_850		= dword	ptr -850h
var_84C		= dword	ptr -84Ch
var_848		= dword	ptr -848h
var_844		= dword	ptr -844h
var_840		= dword	ptr -840h
var_83C		= dword	ptr -83Ch
var_82D		= byte ptr -82Dh
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		sub	esp, 84Ch
		mov	esi, [ebp+arg_4]
		mov	ebx, [ebp+arg_8]
		mov	eax, [esi+54h]
		mov	eax, [eax+104h]
		test	eax, eax
		jz	loc_62B8315C
		mov	[ebp+var_2C], offset aSilcRsa ;	"silc-rsa"
		lea	eax, [ebp+var_24]
		mov	[esp+858h+var_854], eax
		mov	eax, [esi+34h]
		mov	[esp+858h+var_858], eax
		call	silc_pkcs_public_key_encode
		cmp	eax, 1
		sbb	edx, edx
		add	edx, 2
		mov	[ebp+var_28], eax
		mov	[esp+858h+var_848], 0Ch
		lea	eax, [ebp+var_2C]
		mov	[esp+858h+var_84C], eax
		mov	[esp+858h+var_850], edx
		mov	[esp+858h+var_854], 0Ch
		mov	[esp+858h+var_858], 0
		call	silc_attribute_payload_encode
		mov	edi, eax
		mov	eax, [ebp+var_28]
		mov	[esp+858h+var_858], eax
		call	silc_free
		mov	[ebp+var_1C], edi
		mov	eax, [ebx]
		mov	[ebx+8], eax
		and	byte ptr [ebx+10h], 0FDh
		mov	dword ptr [ebx+18h], 0
		mov	dword ptr [ebx+14h], 0
		xor	eax, eax
		lea	edi, [ebp+var_1C]
		jmp	short loc_62B83096
; ---------------------------------------------------------------------------

loc_62B83050:				; CODE XREF: silc_client_attributes_process+F0j
		movzx	edx, word ptr [ebx+0Eh]
		mov	edx, [eax+edx]

loc_62B83057:				; CODE XREF: silc_client_attributes_process+F9j
		mov	[ebx+8], edx
		mov	[ebx+14h], eax
		mov	eax, [eax]
		test	eax, eax
		jz	short loc_62B830B7
		mov	[esp+858h+var_858], eax
		call	silc_attribute_get_attribute
		cmp	al, 0Eh
		jz	short loc_62B83093
		mov	[esp+858h+var_84C], edi
		mov	[esp+858h+var_850], offset sub_62B8316C
		movzx	eax, al
		mov	[esp+858h+var_854], eax
		mov	eax, [esi+54h]
		mov	eax, [eax+104h]
		mov	[esp+858h+var_858], eax
		call	silc_hash_table_find_foreach

loc_62B83093:				; CODE XREF: silc_client_attributes_process+B9j
		mov	eax, [ebx+14h]

loc_62B83096:				; CODE XREF: silc_client_attributes_process+9Aj
		mov	[ebx+18h], eax
		mov	eax, [ebx+8]
		test	eax, eax
		jz	short loc_62B830B0
		test	byte ptr [ebx+10h], 2
		jnz	short loc_62B83050
		movzx	edx, word ptr [ebx+0Ch]
		mov	edx, [eax+edx]
		jmp	short loc_62B83057
; ---------------------------------------------------------------------------
		align 10h

loc_62B830B0:				; CODE XREF: silc_client_attributes_process+EAj
		mov	dword ptr [ebx+14h], 0

loc_62B830B7:				; CODE XREF: silc_client_attributes_process+ADj
		mov	ebx, [ebp+var_1C]
		mov	edx, [ebx+4]
		mov	eax, [esi+54h]
		mov	eax, [eax+0F0h]
		mov	[esp+858h+var_83C], eax
		mov	[esp+858h+var_840], 1
		lea	eax, [ebp+var_20]
		mov	[esp+858h+var_844], eax
		mov	[esp+858h+var_848], 801h
		lea	edi, [ebp+var_82D]
		mov	[esp+858h+var_84C], edi
		mov	eax, [ebx+8]
		sub	eax, edx
		mov	[esp+858h+var_850], eax
		mov	[esp+858h+var_854], edx
		mov	eax, [esi+38h]
		mov	[esp+858h+var_858], eax
		call	silc_pkcs_sign
		test	al, al
		jnz	short loc_62B83114
		mov	eax, ebx
		add	esp, 84Ch
		pop	ebx
		pop	esi
		pop	edi
		leave
		retn
; ---------------------------------------------------------------------------

loc_62B83114:				; CODE XREF: silc_client_attributes_process+151j
		mov	[ebp+var_2C], 0
		mov	[ebp+var_28], edi
		mov	eax, [ebp+var_20]
		mov	[ebp+var_24], eax
		mov	[esp+858h+var_848], 0Ch
		lea	eax, [ebp+var_2C]
		mov	[esp+858h+var_84C], eax
		mov	[esp+858h+var_850], 2
		mov	[esp+858h+var_854], 0Eh
		mov	[esp+858h+var_858], ebx
		call	silc_attribute_payload_encode
		mov	ebx, eax
		mov	eax, ebx
		add	esp, 84Ch
		pop	ebx
		pop	esi
		pop	edi
		leave
		retn
; ---------------------------------------------------------------------------
		align 4

loc_62B8315C:				; CODE XREF: silc_client_attributes_process+1Dj
		xor	ebx, ebx
		mov	eax, ebx
		add	esp, 84Ch
		pop	ebx
		pop	esi
		pop	edi
		leave
		retn
silc_client_attributes_process endp

; ---------------------------------------------------------------------------
		align 4

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_62B8316C	proc near		; DATA XREF: silc_client_attributes_process+BFo

var_78		= dword	ptr -78h
var_74		= dword	ptr -74h
var_70		= dword	ptr -70h
var_6C		= dword	ptr -6Ch
var_68		= dword	ptr -68h
var_4C		= byte ptr -4Ch
var_3C		= byte ptr -3Ch
var_1C		= dword	ptr -1Ch
arg_0		= byte ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		sub	esp, 6Ch
		mov	eax, [ebp+arg_4]
		mov	ebx, [ebp+arg_8]
		mov	dl, [ebp+arg_0]
		test	eax, eax
		jz	short loc_62B831CC
		lea	ecx, [ebp+var_1C]
		mov	[esp+78h+var_74], ecx
		mov	[esp+78h+var_78], eax
		mov	[ebp+var_4C], dl
		call	silc_attribute_get_data
		mov	dl, [ebp+var_4C]
		cmp	dl, 8
		jz	short loc_62B83204
		mov	ecx, [ebp+var_1C]
		mov	[esp+78h+var_68], ecx
		mov	[esp+78h+var_6C], eax
		mov	[esp+78h+var_70], 2
		movzx	edx, dl
		mov	[esp+78h+var_74], edx
		mov	eax, [ebx]
		mov	[esp+78h+var_78], eax
		call	silc_attribute_payload_encode_data
		mov	[ebx], eax

loc_62B831C2:				; CODE XREF: sub_62B8316C+63j
					; sub_62B8316C+ADj ...
		add	esp, 6Ch
		pop	ebx
		pop	esi
		pop	edi
		leave
		retn
; ---------------------------------------------------------------------------
		align 4

loc_62B831CC:				; CODE XREF: sub_62B8316C+14j
		cmp	dl, 0Ch
		jz	short loc_62B831C2
		mov	[esp+78h+var_68], 0
		mov	[esp+78h+var_6C], 0
		mov	[esp+78h+var_70], 1
		movzx	edx, dl
		mov	[esp+78h+var_74], edx
		mov	eax, [ebx]
		mov	[esp+78h+var_78], eax
		call	silc_attribute_payload_encode
		mov	[ebx], eax
		add	esp, 6Ch
		pop	ebx
		pop	esi
		pop	edi
		leave
		retn
; ---------------------------------------------------------------------------

loc_62B83204:				; CODE XREF: sub_62B8316C+2Ej
		lea	esi, [ebp+var_3C]
		mov	[esp+78h+var_74], 20h
		mov	[esp+78h+var_78], esi
		call	silc_timezone
		test	al, al
		jz	short loc_62B831C2
		xor	eax, eax
		mov	ecx, 0FFFFFFFFh
		mov	edi, esi
		repne scasb
		not	ecx
		dec	ecx
		mov	[ebp+var_1C], ecx
		mov	[esp+78h+var_68], ecx
		mov	[esp+78h+var_6C], esi
		mov	[esp+78h+var_70], 2
		mov	[esp+78h+var_74], 8
		mov	eax, [ebx]
		mov	[esp+78h+var_78], eax
		call	silc_attribute_payload_encode
		mov	[ebx], eax
		jmp	loc_62B831C2
sub_62B8316C	endp

; ---------------------------------------------------------------------------
		align 4

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_62B83258	proc near		; CODE XREF: silc_client_add_channel_private_key:loc_62B83850p
					; silc_client_save_channel_key:loc_62B84AD0p ...

var_18		= dword	ptr -18h

		push	ebp
		mov	ebp, esp
		sub	esp, 18h
		mov	[esp+18h+var_18], 1Ch
		call	silc_malloc
		test	eax, eax
		jz	short locret_62B832A9
		mov	dword ptr [eax+18h], 0
		mov	dword ptr [eax+14h], 0
		mov	edx, [eax+10h]
		and	edx, 3
		mov	[eax+10h], edx
		mov	word ptr [eax+0Ch], 4
		mov	word ptr [eax+0Eh], 8
		mov	byte ptr [eax+10h], 1
		mov	dword ptr [eax+8], 0
		mov	dword ptr [eax+4], 0
		mov	dword ptr [eax], 0

locret_62B832A9:			; CODE XREF: sub_62B83258+14j
		leave
		retn
sub_62B83258	endp

; ---------------------------------------------------------------------------
		align 4
; Exported entry 112. silc_client_empty_channel

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public silc_client_empty_channel
silc_client_empty_channel proc near	; CODE XREF: silc_client_del_connection+C8p
					; silc_client_unref_channel+85p ...

var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_28		= byte ptr -28h
var_1C		= dword	ptr -1Ch
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		sub	esp, 2Ch
		mov	esi, [ebp+arg_0]
		mov	ebx, [ebp+arg_4]
		mov	edx, [ebp+arg_8]
		mov	eax, [edx+144h]
		mov	[esp+38h+var_38], eax
		call	silc_rwlock_wrlock
		lea	edi, [ebp+var_28]
		mov	[esp+38h+var_34], edi
		mov	edx, [ebp+arg_8]
		mov	eax, [edx+134h]
		mov	[esp+38h+var_38], eax
		call	silc_hash_table_list
		jmp	short loc_62B83352
; ---------------------------------------------------------------------------
		align 4

loc_62B832E8:				; CODE XREF: silc_client_empty_channel+BFj
		mov	eax, [ebp+var_1C]
		mov	edx, [eax+8]
		mov	[esp+38h+var_34], edx
		mov	eax, [eax]
		mov	eax, [eax+3B4h]
		mov	[esp+38h+var_38], eax
		call	silc_hash_table_del
		mov	eax, [ebp+var_1C]
		mov	edx, [eax]
		mov	[esp+38h+var_34], edx
		mov	eax, [eax+8]
		mov	eax, [eax+134h]
		mov	[esp+38h+var_38], eax
		call	silc_hash_table_del
		mov	eax, [ebp+var_1C]
		mov	eax, [eax]
		mov	[esp+38h+var_30], eax
		mov	[esp+38h+var_34], ebx
		mov	[esp+38h+var_38], esi
		call	silc_client_unref_client
		mov	eax, [ebp+var_1C]
		mov	eax, [eax+8]
		mov	[esp+38h+var_30], eax
		mov	[esp+38h+var_34], ebx
		mov	[esp+38h+var_38], esi
		call	silc_client_unref_channel
		mov	eax, [ebp+var_1C]
		mov	[esp+38h+var_38], eax
		call	silc_free

loc_62B83352:				; CODE XREF: silc_client_empty_channel+38j
		lea	eax, [ebp+var_1C]
		mov	[esp+38h+var_30], eax
		mov	[esp+38h+var_34], 0
		mov	[esp+38h+var_38], edi
		call	silc_hash_table_get
		test	al, al
		jnz	loc_62B832E8
		mov	edx, [ebp+arg_8]
		mov	eax, [edx+144h]
		mov	[esp+38h+var_38], eax
		call	silc_rwlock_unlock
		mov	[esp+38h+var_38], edi
		call	silc_hash_table_list_reset
		add	esp, 2Ch
		pop	ebx
		pop	esi
		pop	edi
		leave
		retn
silc_client_empty_channel endp

; ---------------------------------------------------------------------------
		align 4
; Exported entry 193. silc_client_remove_from_channels

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public silc_client_remove_from_channels
silc_client_remove_from_channels proc near ; CODE XREF:	silc_client_unref_client+88p
					; silc_client_notify_watch+320p ...

var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_28		= byte ptr -28h
var_1C		= dword	ptr -1Ch
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		sub	esp, 2Ch
		mov	ebx, [ebp+arg_0]
		mov	esi, [ebp+arg_4]
		mov	edx, [ebp+arg_8]
		mov	eax, [edx+3B4h]
		mov	[esp+38h+var_38], eax
		call	silc_hash_table_count
		test	eax, eax
		jnz	short loc_62B833C0
		add	esp, 2Ch
		pop	ebx
		pop	esi
		pop	edi
		leave
		retn
; ---------------------------------------------------------------------------

loc_62B833C0:				; CODE XREF: silc_client_remove_from_channels+22j
		mov	edx, [ebp+arg_8]
		mov	eax, [edx+3D8h]
		mov	[esp+38h+var_38], eax
		call	silc_rwlock_wrlock
		lea	edi, [ebp+var_28]
		mov	[esp+38h+var_34], edi
		mov	edx, [ebp+arg_8]
		mov	eax, [edx+3B4h]
		mov	[esp+38h+var_38], eax
		call	silc_hash_table_list
		jmp	short loc_62B83436
; ---------------------------------------------------------------------------
		align 4

loc_62B833EC:				; CODE XREF: silc_client_remove_from_channels+11Bj
					; silc_client_remove_from_channels+137j
		mov	eax, [ebp+var_1C]
		mov	eax, [eax+8]
		mov	eax, [eax+144h]
		mov	[esp+38h+var_38], eax
		call	silc_rwlock_unlock
		mov	eax, [ebp+var_1C]
		mov	eax, [eax]
		mov	[esp+38h+var_30], eax
		mov	[esp+38h+var_34], esi
		mov	[esp+38h+var_38], ebx
		call	silc_client_unref_client
		mov	eax, [ebp+var_1C]
		mov	eax, [eax+8]
		mov	[esp+38h+var_30], eax
		mov	[esp+38h+var_34], esi
		mov	[esp+38h+var_38], ebx
		call	silc_client_unref_channel
		mov	eax, [ebp+var_1C]
		mov	[esp+38h+var_38], eax
		call	silc_free

loc_62B83436:				; CODE XREF: silc_client_remove_from_channels+55j
		lea	eax, [ebp+var_1C]
		mov	[esp+38h+var_30], eax
		mov	[esp+38h+var_34], 0
		mov	[esp+38h+var_38], edi
		call	silc_hash_table_get
		test	al, al
		jz	short loc_62B834D0
		mov	eax, [ebp+var_1C]
		mov	eax, [eax+8]
		mov	eax, [eax+144h]
		mov	[esp+38h+var_38], eax
		call	silc_rwlock_wrlock
		mov	eax, [ebp+var_1C]
		mov	edx, [eax+8]
		mov	[esp+38h+var_34], edx
		mov	eax, [eax]
		mov	eax, [eax+3B4h]
		mov	[esp+38h+var_38], eax
		call	silc_hash_table_del
		mov	eax, [ebp+var_1C]
		mov	edx, [eax]
		mov	[esp+38h+var_34], edx
		mov	eax, [eax+8]
		mov	eax, [eax+134h]
		mov	[esp+38h+var_38], eax
		call	silc_hash_table_del
		mov	eax, [ebp+var_1C]
		mov	eax, [eax+8]
		mov	eax, [eax+134h]
		mov	[esp+38h+var_38], eax
		call	silc_hash_table_count
		test	eax, eax
		jnz	loc_62B833EC
		mov	eax, [ebp+var_1C]
		mov	eax, [eax+8]
		mov	[esp+38h+var_30], eax
		mov	[esp+38h+var_34], esi
		mov	[esp+38h+var_38], ebx
		call	silc_client_del_channel
		jmp	loc_62B833EC
; ---------------------------------------------------------------------------

loc_62B834D0:				; CODE XREF: silc_client_remove_from_channels+BBj
		mov	edx, [ebp+arg_8]
		mov	eax, [edx+3D8h]
		mov	[esp+38h+var_38], eax
		call	silc_rwlock_unlock
		mov	[esp+34h+var_34], edi
		call	silc_hash_table_list_reset
		add	esp, 2Ch
		pop	ebx
		pop	esi
		pop	edi
		leave
		retn
silc_client_remove_from_channels endp

; ---------------------------------------------------------------------------
		align 4
; Exported entry 178. silc_client_on_channel

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public silc_client_on_channel
silc_client_on_channel proc near	; CODE XREF: silc_client_notify_cumode_change+269p
					; silc_client_notify_cumode_change+395p ...

var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_C		= dword	ptr -0Ch
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 28h
		lea	eax, [ebp+var_C]
		mov	[esp+28h+var_1C], eax
		mov	[esp+28h+var_20], 0
		mov	eax, [ebp+arg_4]
		mov	[esp+28h+var_24], eax
		mov	eax, [ebp+arg_0]
		mov	eax, [eax+134h]
		mov	[esp+28h+var_28], eax
		call	silc_hash_table_find
		test	al, al
		jz	short loc_62B8352C
		mov	eax, [ebp+var_C]
		leave
		retn
; ---------------------------------------------------------------------------
		align 4

loc_62B8352C:				; CODE XREF: silc_client_on_channel+2Fj
		xor	eax, eax
		leave
		retn
silc_client_on_channel endp

; Exported entry 102. silc_client_current_channel_private_key

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public silc_client_current_channel_private_key
silc_client_current_channel_private_key	proc near

var_18		= dword	ptr -18h
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h

		push	ebp
		mov	ebp, esp
		push	esi
		push	ebx
		sub	esp, 10h
		mov	ebx, [ebp+arg_8]
		mov	esi, [ebp+arg_C]
		test	ebx, ebx
		jz	short loc_62B8356A
		mov	[ebx+154h], esi
		mov	eax, [esi+4]
		mov	[esp+18h+var_18], eax
		call	silc_cipher_get_name
		mov	[ebx+138h], eax
		mov	eax, [esi+0Ch]
		mov	[esp+18h+var_18], eax
		call	silc_hmac_get_name
		mov	[ebx+13Ch], eax

loc_62B8356A:				; CODE XREF: silc_client_current_channel_private_key+10j
		add	esp, 10h
		pop	ebx
		pop	esi
		leave
		retn
silc_client_current_channel_private_key	endp

; ---------------------------------------------------------------------------
		align 4
; Exported entry   3. silc_client_add_channel_private_key

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl silc_client_add_channel_private_key(int, int, int, char *, int, int, int,	int, int)
		public silc_client_add_channel_private_key
silc_client_add_channel_private_key proc near

Src		= dword	ptr -0A8h
var_A4		= dword	ptr -0A4h
var_A0		= dword	ptr -0A0h
var_9C		= dword	ptr -9Ch
var_98		= dword	ptr -98h
var_94		= dword	ptr -94h
var_7C		= dword	ptr -7Ch
var_6C		= dword	ptr -6Ch
var_60		= dword	ptr -60h
var_5C		= dword	ptr -5Ch
var_58		= byte ptr -58h
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h
arg_10		= dword	ptr  18h
arg_14		= dword	ptr  1Ch
arg_18		= dword	ptr  20h
arg_1C		= dword	ptr  24h
arg_20		= dword	ptr  28h

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		sub	esp, 9Ch
		mov	ebx, [ebp+arg_4]
		mov	esi, [ebp+arg_8]
		mov	edi, [ebp+arg_10]
		mov	eax, [ebp+arg_0]
		test	eax, eax
		jz	short loc_62B835B7
		test	ebx, ebx
		jz	short loc_62B835B7
		test	esi, esi
		jz	short loc_62B835B7
		test	edi, edi
		jz	loc_62B837D8
		mov	ecx, [ebp+arg_14]
		test	ecx, ecx
		jz	loc_62B837E8

loc_62B835AB:				; CODE XREF: silc_client_add_channel_private_key+26Ej
					; silc_client_add_channel_private_key+27Bj
		mov	[esp+0A8h+Src],	edi
		call	silc_cipher_is_supported
		test	al, al
		jnz	short loc_62B835C4

loc_62B835B7:				; CODE XREF: silc_client_add_channel_private_key+1Aj
					; silc_client_add_channel_private_key+1Ej ...
		xor	eax, eax

loc_62B835B9:				; CODE XREF: silc_client_add_channel_private_key+25Cj
					; silc_client_add_channel_private_key+2AAj ...
		add	esp, 9Ch
		pop	ebx
		pop	esi
		pop	edi
		leave
		retn
; ---------------------------------------------------------------------------

loc_62B835C4:				; CODE XREF: silc_client_add_channel_private_key+41j
		mov	eax, [ebp+arg_14]
		mov	[esp+0A8h+Src],	eax
		call	silc_hmac_is_supported
		test	al, al
		jz	short loc_62B835B7
		mov	edx, [esi+150h]
		test	edx, edx
		jz	loc_62B83850

loc_62B835E1:				; CODE XREF: silc_client_add_channel_private_key+2E9j
		mov	eax, [ebx+54h]
		mov	eax, [eax+0F0h]
		mov	[esp+0A8h+var_94], eax
		mov	[esp+0A8h+var_98], 10h
		mov	[esp+0A8h+var_9C], 100h
		mov	[esp+0A8h+var_A0], 10h
		mov	eax, [ebp+arg_1C]
		mov	[esp+0A8h+var_A4], eax
		mov	eax, [ebp+arg_18]
		mov	[esp+0A8h+Src],	eax
		call	silc_ske_process_key_material_data
		mov	[ebp+var_5C], eax
		test	eax, eax
		jz	short loc_62B835B7
		mov	[esp+0A8h+var_A4], 10h
		mov	[esp+0A8h+Src],	1
		call	silc_calloc
		mov	ebx, eax
		test	eax, eax
		jz	loc_62B83811
		mov	eax, [ebp+arg_C]
		test	eax, eax
		jz	loc_62B83848
		mov	ecx, [ebp+arg_C]
		mov	[esp+0A8h+Src],	ecx ; Src
		call	_strdup

loc_62B83653:				; CODE XREF: silc_client_add_channel_private_key+2D6j
		mov	[ebx], eax
		lea	eax, [ebx+4]
		mov	[esp+0A8h+var_A4], eax
		mov	[esp+0A8h+Src],	edi
		call	silc_cipher_alloc
		test	al, al
		jz	loc_62B83824
		lea	eax, [ebx+8]
		mov	[esp+0A8h+var_A4], eax
		mov	[esp+0A8h+Src],	edi
		call	silc_cipher_alloc
		test	al, al
		jz	loc_62B837F4
		mov	[esp+0A8h+var_9C], 1
		mov	ecx, [ebp+var_5C]
		mov	eax, [ecx+14h]
		mov	[esp+0A8h+var_A0], eax
		mov	eax, [ecx+0Ch]
		mov	[esp+0A8h+var_A4], eax
		mov	eax, [ebx+4]
		mov	[esp+0A8h+Src],	eax
		call	silc_cipher_set_key
		mov	[esp+0A8h+var_9C], 0
		mov	edx, [ebp+var_5C]
		mov	eax, [edx+14h]
		mov	[esp+0A8h+var_A0], eax
		mov	eax, [edx+0Ch]
		mov	[esp+0A8h+var_A4], eax
		mov	eax, [ebx+8]
		mov	[esp+0A8h+Src],	eax
		call	silc_cipher_set_key
		lea	eax, [ebx+0Ch]
		mov	[esp+0A8h+var_A0], eax
		mov	[esp+0A8h+var_A4], 0
		mov	ecx, [ebp+arg_14]
		mov	[esp+0A8h+Src],	ecx
		call	silc_hmac_alloc
		test	al, al
		jz	loc_62B83868
		mov	edx, [ebp+var_5C]
		mov	edi, [edx+14h]
		shr	edi, 3
		mov	edx, [edx+0Ch]
		mov	eax, [ebx+0Ch]
		mov	[esp+0A8h+Src],	eax
		mov	[ebp+var_60], edx
		call	silc_hmac_get_hash
		lea	ecx, [ebp+var_58]
		mov	[ebp+var_6C], ecx
		mov	[esp+0A8h+var_9C], ecx
		mov	[esp+0A8h+var_A0], edi
		mov	edx, [ebp+var_60]
		mov	[esp+0A8h+var_A4], edx
		mov	[esp+0A8h+Src],	eax
		call	silc_hash_make
		mov	eax, [ebx+0Ch]
		mov	[esp+0A8h+Src],	eax
		call	silc_hmac_get_hash
		mov	[esp+0A8h+Src],	eax
		call	silc_hash_len
		mov	[esp+0A8h+var_A0], eax
		lea	eax, [ebp+var_58]
		mov	[esp+0A8h+var_A4], eax
		mov	eax, [ebx+0Ch]
		mov	[esp+0A8h+Src],	eax
		call	silc_hmac_set_key
		mov	ecx, 40h
		xor	eax, eax
		mov	edi, [ebp+var_6C]
		rep stosb
		mov	edi, [esi+150h]
		mov	[esp+0A8h+Src],	0Ch
		call	silc_malloc
		test	eax, eax
		jz	short loc_62B837A9
		mov	[eax], ebx
		mov	ecx, [edi]
		test	ecx, ecx
		jz	loc_62B838A2
		movzx	ecx, word ptr [edi+0Ch]
		mov	[ebp+var_7C], ecx
		mov	edx, [edi+4]
		mov	[edx+ecx], eax

loc_62B83788:				; CODE XREF: silc_client_add_channel_private_key+337j
		test	byte ptr [edi+10h], 1
		jz	short loc_62B83798
		movzx	edx, word ptr [edi+0Eh]
		mov	ecx, [edi+4]
		mov	[eax+edx], ecx

loc_62B83798:				; CODE XREF: silc_client_add_channel_private_key+218j
		mov	[edi+4], eax
		mov	edx, [ebp+var_7C]
		mov	dword ptr [eax+edx], 0
		add	dword ptr [edi+10h], 4

loc_62B837A9:				; CODE XREF: silc_client_add_channel_private_key+1F9j
		mov	edx, [esi+154h]
		test	edx, edx
		jz	loc_62B838B0

loc_62B837B7:				; CODE XREF: silc_client_add_channel_private_key+364j
		mov	ecx, [ebp+var_5C]
		mov	[esp+0A8h+Src],	ecx
		call	silc_ske_free_key_material
		mov	eax, [ebp+arg_20]
		test	eax, eax
		jz	short loc_62B837CE
		mov	eax, [ebp+arg_20]
		mov	[eax], ebx

loc_62B837CE:				; CODE XREF: silc_client_add_channel_private_key+253j
		mov	al, 1
		jmp	loc_62B835B9
; ---------------------------------------------------------------------------
		align 4

loc_62B837D8:				; CODE XREF: silc_client_add_channel_private_key+26j
		mov	edi, offset aAes256Cbc ; "aes-256-cbc"
		mov	ecx, [ebp+arg_14]
		test	ecx, ecx
		jnz	loc_62B835AB

loc_62B837E8:				; CODE XREF: silc_client_add_channel_private_key+31j
		mov	[ebp+arg_14], offset aHmacSha196 ; "hmac-sha1-96"
		jmp	loc_62B835AB
; ---------------------------------------------------------------------------

loc_62B837F4:				; CODE XREF: silc_client_add_channel_private_key+109j
		mov	[esp+0A8h+Src],	ebx
		call	silc_free
		mov	eax, [ebx]
		mov	[esp+0A8h+Src],	eax
		call	silc_free
		mov	eax, [ebx+4]
		mov	[esp+0A8h+Src],	eax
		call	silc_cipher_free

loc_62B83811:				; CODE XREF: silc_client_add_channel_private_key+C3j
		mov	edx, [ebp+var_5C]
		mov	[esp+0A8h+Src],	edx
		call	silc_ske_free_key_material
		xor	eax, eax
		jmp	loc_62B835B9
; ---------------------------------------------------------------------------
		align 4

loc_62B83824:				; CODE XREF: silc_client_add_channel_private_key+F2j
		mov	[esp+0A8h+Src],	ebx
		call	silc_free
		mov	eax, [ebx]
		mov	[esp+0A8h+Src],	eax
		call	silc_free
		mov	eax, [ebp+var_5C]
		mov	[esp+0A8h+Src],	eax
		call	silc_ske_free_key_material
		xor	eax, eax
		jmp	loc_62B835B9
; ---------------------------------------------------------------------------

loc_62B83848:				; CODE XREF: silc_client_add_channel_private_key+CEj
		xor	eax, eax
		jmp	loc_62B83653
; ---------------------------------------------------------------------------
		align 10h

loc_62B83850:				; CODE XREF: silc_client_add_channel_private_key+67j
		call	sub_62B83258
		mov	[esi+150h], eax
		test	eax, eax
		jnz	loc_62B835E1
		jmp	loc_62B835B7
; ---------------------------------------------------------------------------

loc_62B83868:				; CODE XREF: silc_client_add_channel_private_key+173j
		mov	[esp+0A8h+Src],	ebx
		call	silc_free
		mov	eax, [ebx]
		mov	[esp+0A8h+Src],	eax
		call	silc_free
		mov	eax, [ebx+4]
		mov	[esp+0A8h+Src],	eax
		call	silc_cipher_free
		mov	eax, [ebx+8]
		mov	[esp+0A8h+Src],	eax
		call	silc_cipher_free
		mov	eax, [ebp+var_5C]
		mov	[esp+0A8h+Src],	eax
		call	silc_ske_free_key_material
		xor	eax, eax
		jmp	loc_62B835B9
; ---------------------------------------------------------------------------

loc_62B838A2:				; CODE XREF: silc_client_add_channel_private_key+201j
		mov	[edi], eax
		movzx	edx, word ptr [edi+0Ch]
		mov	[ebp+var_7C], edx
		jmp	loc_62B83788
; ---------------------------------------------------------------------------

loc_62B838B0:				; CODE XREF: silc_client_add_channel_private_key+23Dj
		mov	[esi+154h], ebx
		mov	eax, [ebx+4]
		mov	[esp+0A8h+Src],	eax
		call	silc_cipher_get_name
		mov	[esi+138h], eax
		mov	eax, [ebx+4]
		mov	[esp+0A8h+Src],	eax
		call	silc_cipher_get_name
		mov	[esi+13Ch], eax
		jmp	loc_62B837B7
silc_client_add_channel_private_key endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  19. silc_client_channel_message_error

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public silc_client_channel_message_error
silc_client_channel_message_error proc near ; DATA XREF: sub_62B838F8:loc_62B83930o
					; silc_client_channel_message+43Co ...

var_18		= dword	ptr -18h
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		sub	esp, 18h
		mov	eax, [ebp+arg_8]
		mov	[esp+18h+var_18], eax
		call	silc_packet_free
		mov	eax, 3
		leave
		retn
silc_client_channel_message_error endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_62B838F8	proc near		; DATA XREF: silc_client_channel_message+A9o

var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
arg_0		= dword	ptr  8
arg_C		= dword	ptr  14h
arg_10		= dword	ptr  18h

		push	ebp
		mov	ebp, esp
		push	ebx
		sub	esp, 14h
		mov	ebx, [ebp+arg_10]
		mov	edx, [ebp+arg_C]
		test	edx, edx
		jz	short loc_62B83930

loc_62B83909:				; CODE XREF: sub_62B838F8+48j
		mov	al, [ebx+28h]
		mov	dl, al
		and	edx, 0FFFFFFFBh
		mov	[ebx+28h], dl
		test	al, 4
		jz	short loc_62B83920
		add	esp, 14h
		pop	ebx
		leave
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_62B83920:				; CODE XREF: sub_62B838F8+1Ej
		mov	[ebp+arg_0], ebx
		add	esp, 14h
		pop	ebx
		leave
		jmp	silc_fsm_continue
; ---------------------------------------------------------------------------
		align 10h

loc_62B83930:				; CODE XREF: sub_62B838F8+Fj
		mov	[esp+18h+var_14], offset silc_client_channel_message_error
		mov	[esp+18h+var_18], ebx
		call	silc_fsm_next
		jmp	short loc_62B83909
sub_62B838F8	endp

; ---------------------------------------------------------------------------
		align 4
; Exported entry   9. silc_client_add_to_channel

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public silc_client_add_to_channel
silc_client_add_to_channel proc	near	; CODE XREF: silc_client_notify_join+1E4p
					; silc_client_command_reply_users+672p	...

var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_3C		= dword	ptr -3Ch
var_2C		= dword	ptr -2Ch
var_1C		= dword	ptr -1Ch
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h
arg_10		= dword	ptr  18h

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		sub	esp, 3Ch
		mov	edi, [ebp+arg_4]
		mov	esi, [ebp+arg_8]
		mov	ebx, [ebp+arg_C]
		lea	eax, [ebp+var_1C]
		mov	[esp+48h+var_3C], eax
		mov	[esp+48h+var_40], 0
		mov	[esp+48h+var_44], ebx
		mov	eax, [esi+134h]
		mov	[esp+48h+var_48], eax
		call	silc_hash_table_find
		test	al, al
		jz	short loc_62B8398C
		mov	ecx, [ebp+var_1C]
		test	ecx, ecx
		jz	short loc_62B8398C

loc_62B83982:				; CODE XREF: silc_client_add_to_channel+C8j
		mov	al, 1

loc_62B83984:				; CODE XREF: silc_client_add_to_channel+D2j
		add	esp, 3Ch
		pop	ebx
		pop	esi
		pop	edi
		leave
		retn
; ---------------------------------------------------------------------------

loc_62B8398C:				; CODE XREF: silc_client_add_to_channel+35j
					; silc_client_add_to_channel+3Cj
		mov	[esp+48h+var_44], 10h
		mov	[esp+48h+var_48], 1
		call	silc_calloc
		mov	edx, eax
		test	eax, eax
		jz	short loc_62B83A14
		mov	[eax], ebx
		mov	[eax+8], esi
		mov	eax, [ebp+arg_10]
		mov	[edx+4], eax
		mov	[esp+48h+var_40], ebx
		mov	[esp+48h+var_44], edi
		mov	eax, [ebp+arg_0]
		mov	[esp+48h+var_48], eax
		mov	[ebp+var_2C], edx
		call	silc_client_ref_client
		mov	[esp+48h+var_40], esi
		mov	[esp+48h+var_44], edi
		mov	eax, [ebp+arg_0]
		mov	[esp+48h+var_48], eax
		call	silc_client_ref_channel
		mov	edx, [ebp+var_2C]
		mov	[esp+48h+var_40], edx
		mov	[esp+48h+var_44], ebx
		mov	eax, [esi+134h]
		mov	[esp+48h+var_48], eax
		call	silc_hash_table_add
		mov	edx, [ebp+var_2C]
		mov	[esp+48h+var_40], edx
		mov	[esp+48h+var_44], esi
		mov	eax, [ebx+3B4h]
		mov	[esp+48h+var_48], eax
		call	silc_hash_table_add
		jmp	loc_62B83982
; ---------------------------------------------------------------------------
		align 4

loc_62B83A14:				; CODE XREF: silc_client_add_to_channel+60j
		xor	eax, eax
		jmp	loc_62B83984
silc_client_add_to_channel endp

; ---------------------------------------------------------------------------
		align 4
; Exported entry 192. silc_client_remove_from_channel

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public silc_client_remove_from_channel
silc_client_remove_from_channel	proc near ; CODE XREF: silc_client_notify_signoff+F7p
					; silc_client_notify_leave+18Ap ...

var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_1C		= dword	ptr -1Ch
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		sub	esp, 2Ch
		mov	ebx, [ebp+arg_8]
		mov	edi, [ebp+arg_C]
		lea	eax, [ebp+var_1C]
		mov	[esp+38h+var_2C], eax
		mov	[esp+38h+var_30], 0
		mov	[esp+38h+var_34], edi
		mov	eax, [ebx+134h]
		mov	[esp+38h+var_38], eax
		call	silc_hash_table_find
		test	al, al
		jz	loc_62B83B30
		mov	esi, [ebp+var_1C]
		test	esi, esi
		jz	loc_62B83B30
		mov	eax, [edi+3D8h]
		mov	[esp+38h+var_38], eax
		call	silc_rwlock_wrlock
		mov	eax, [ebx+144h]
		mov	[esp+38h+var_38], eax
		call	silc_rwlock_wrlock
		mov	eax, [esi+8]
		mov	[esp+38h+var_34], eax
		mov	eax, [esi]
		mov	eax, [eax+3B4h]
		mov	[esp+38h+var_38], eax
		call	silc_hash_table_del
		mov	eax, [esi]
		mov	[esp+38h+var_34], eax
		mov	eax, [esi+8]
		mov	eax, [eax+134h]
		mov	[esp+38h+var_38], eax
		call	silc_hash_table_del
		mov	[esp+38h+var_38], esi
		call	silc_free
		mov	eax, [ebx+134h]
		mov	[esp+38h+var_38], eax
		call	silc_hash_table_count
		test	eax, eax
		jz	short loc_62B83B18

loc_62B83AC3:				; CODE XREF: silc_client_remove_from_channel+112j
		mov	eax, [edi+3D8h]
		mov	[esp+38h+var_38], eax
		call	silc_rwlock_unlock
		mov	eax, [ebx+144h]
		mov	[esp+38h+var_38], eax
		call	silc_rwlock_unlock
		mov	[esp+38h+var_30], edi
		mov	eax, [ebp+arg_4]
		mov	[esp+38h+var_34], eax
		mov	eax, [ebp+arg_0]
		mov	[esp+38h+var_38], eax
		call	silc_client_unref_client
		mov	[esp+38h+var_30], ebx
		mov	eax, [ebp+arg_4]
		mov	[esp+38h+var_34], eax
		mov	eax, [ebp+arg_0]
		mov	[esp+38h+var_38], eax
		call	silc_client_unref_channel
		mov	al, 1
		add	esp, 2Ch
		pop	ebx
		pop	esi
		pop	edi
		leave
		retn
; ---------------------------------------------------------------------------
		align 4

loc_62B83B18:				; CODE XREF: silc_client_remove_from_channel+A5j
		mov	[esp+38h+var_30], ebx
		mov	eax, [ebp+arg_4]
		mov	[esp+38h+var_34], eax
		mov	eax, [ebp+arg_0]
		mov	[esp+38h+var_38], eax
		call	silc_client_del_channel
		jmp	short loc_62B83AC3
; ---------------------------------------------------------------------------

loc_62B83B30:				; CODE XREF: silc_client_remove_from_channel+32j
					; silc_client_remove_from_channel+3Dj
		xor	eax, eax
		add	esp, 2Ch
		pop	ebx
		pop	esi
		pop	edi
		leave
		retn
silc_client_remove_from_channel	endp

; ---------------------------------------------------------------------------
		align 4
; Exported entry 199. silc_client_send_channel_message

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public silc_client_send_channel_message
silc_client_send_channel_message proc near

var_B8		= dword	ptr -0B8h
var_B4		= dword	ptr -0B4h
var_B0		= dword	ptr -0B0h
var_AC		= dword	ptr -0ACh
var_A8		= dword	ptr -0A8h
var_A4		= dword	ptr -0A4h
var_A0		= dword	ptr -0A0h
var_9C		= dword	ptr -9Ch
var_98		= dword	ptr -98h
var_94		= dword	ptr -94h
var_90		= dword	ptr -90h
var_8C		= dword	ptr -8Ch
var_88		= dword	ptr -88h
var_84		= dword	ptr -84h
var_78		= dword	ptr -78h
var_74		= dword	ptr -74h
var_70		= dword	ptr -70h
var_6C		= dword	ptr -6Ch
var_5C		= byte ptr -5Ch
var_3E		= word ptr -3Eh
var_3C		= byte ptr -3Ch
var_1E		= word ptr -1Eh
var_1C		= dword	ptr -1Ch
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h
arg_10		= dword	ptr  18h
arg_14		= dword	ptr  1Ch
arg_18		= dword	ptr  20h
arg_1C		= dword	ptr  24h

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		sub	esp, 0ACh
		mov	ebx, [ebp+arg_4]
		mov	edx, [ebp+arg_8]
		mov	esi, [ebp+arg_C]
		mov	eax, [ebp+arg_10]
		mov	ecx, [ebp+arg_0]
		test	ecx, ecx
		jz	loc_62B83D58
		test	ebx, ebx
		jz	loc_62B83D58
		test	edx, edx
		jz	loc_62B83D58
		movzx	eax, ax
		mov	[ebp+var_6C], eax
		test	al, 20h
		jnz	loc_62B83D4E

loc_62B83B7D:				; CODE XREF: silc_client_send_channel_message+216j
		mov	eax, [ebx+54h]
		test	byte ptr [eax+12Dh], 2
		jnz	loc_62B83D58
		lea	eax, [ebp+var_1C]
		mov	[esp+0B8h+var_AC], eax
		mov	[esp+0B8h+var_B0], 0
		mov	eax, [ebx]
		mov	[esp+0B8h+var_B4], eax
		mov	eax, [edx+134h]
		mov	[esp+0B8h+var_B8], eax
		mov	[ebp+var_78], edx
		call	silc_hash_table_find
		test	al, al
		mov	edx, [ebp+var_78]
		jz	loc_62B83D84
		mov	eax, [ebp+var_1C]
		test	eax, eax
		jz	loc_62B83D84
		mov	ecx, [edx+12Ch]
		test	ch, 4
		jnz	loc_62B83E58

loc_62B83BD8:				; CODE XREF: silc_client_send_channel_message+320j
		test	ch, 8
		jnz	loc_62B83E69

loc_62B83BE1:				; CODE XREF: silc_client_send_channel_message+336j
		test	byte ptr [eax+4], 20h
		jnz	loc_62B83D58
		mov	edi, [edx+150h]
		test	edi, edi
		jz	loc_62B83D6D
		test	esi, esi
		jz	loc_62B83D68
		mov	ecx, [esi+4]
		mov	[ebp+var_70], ecx
		mov	esi, [esi+0Ch]
		mov	[ebp+var_74], esi

loc_62B83C0D:				; CODE XREF: silc_client_send_channel_message+243j
					; silc_client_send_channel_message+28Aj ...
		mov	edi, [ebp+var_70]
		test	edi, edi
		jz	loc_62B83E2A
		mov	esi, [ebp+var_74]
		test	esi, esi
		jz	loc_62B83E2A
		mov	[ebp+var_1E], 2
		mov	esi, [eax]
		lea	edi, [ebp+var_3C]
		add	esi, 38Ch
		mov	ecx, 1Dh
		rep movsb
		mov	[ebp+var_3E], 3
		mov	esi, [eax+8]
		lea	edi, [ebp+var_5C]
		add	esi, 114h
		mov	cl, 16h
		rep movsb
		mov	[esp+0B8h+var_84], 0
		lea	eax, [ebp+var_5C]
		mov	[esp+0B8h+var_88], eax
		lea	eax, [ebp+var_3C]
		mov	[esp+0B8h+var_8C], eax
		mov	eax, [ebp+arg_14]
		mov	[esp+0B8h+var_90], eax
		mov	eax, [ebx+38h]
		mov	[esp+0B8h+var_94], eax
		mov	[esp+0B8h+var_98], 0
		mov	ecx, [ebp+arg_0]
		mov	eax, [ecx+10h]
		mov	[esp+0B8h+var_9C], eax
		mov	esi, [ebp+var_74]
		mov	[esp+0B8h+var_A0], esi
		mov	eax, [ebp+var_70]
		mov	[esp+0B8h+var_A4], eax
		mov	[esp+0B8h+var_A8], 0
		mov	[esp+0B8h+var_AC], 1
		mov	eax, [ebp+arg_1C]
		mov	[esp+0B8h+var_B0], eax
		mov	eax, [ebp+arg_18]
		mov	[esp+0B8h+var_B4], eax
		mov	ecx, [ebp+var_6C]
		mov	[esp+0B8h+var_B8], ecx
		mov	[ebp+var_78], edx
		call	silc_message_payload_encode
		mov	esi, eax
		test	eax, eax
		mov	edx, [ebp+var_78]
		jz	loc_62B83E7F
		mov	ecx, [eax+4]
		mov	[esp+0B8h+var_90], 0
		mov	[esp+0B8h+var_94], 0
		mov	eax, [eax+8]
		sub	eax, ecx
		mov	[esp+0B8h+var_98], eax
		mov	[esp+0B8h+var_9C], ecx
		add	edx, 114h
		mov	[esp+0B8h+var_A0], edx
		mov	[esp+0B8h+var_A4], 3
		mov	[esp+0B8h+var_A8], 0
		mov	[esp+0B8h+var_AC], 0
		mov	[esp+0B8h+var_B0], 0
		mov	[esp+0B8h+var_B4], 7
		mov	eax, [ebx+3Ch]
		mov	[esp+0B8h+var_B8], eax
		call	silc_packet_send_ext
		mov	edx, [esi]
		mov	[esp+0B8h+var_B8], edx
		mov	byte ptr [ebp+var_78], al
		call	silc_free
		mov	[esp+0B8h+var_B8], esi
		call	silc_free
		mov	al, byte ptr [ebp+var_78]

loc_62B83D43:				; CODE XREF: silc_client_send_channel_message+26Fj
					; silc_client_send_channel_message+30Cj
		add	esp, 0ACh
		pop	ebx
		pop	esi
		pop	edi
		leave
		retn
; ---------------------------------------------------------------------------

loc_62B83D4E:				; CODE XREF: silc_client_send_channel_message+3Bj
		cmp	[ebp+arg_14], 0
		jnz	loc_62B83B7D

loc_62B83D58:				; CODE XREF: silc_client_send_channel_message+1Dj
					; silc_client_send_channel_message+25j	...
		xor	eax, eax

loc_62B83D5A:				; CODE XREF: silc_client_send_channel_message+328j
					; silc_client_send_channel_message+33Ej
		add	esp, 0ACh
		pop	ebx
		pop	esi
		pop	edi
		leave
		retn
; ---------------------------------------------------------------------------
		align 4

loc_62B83D68:				; CODE XREF: silc_client_send_channel_message+BFj
		and	ecx, 4
		jnz	short loc_62B83DB0

loc_62B83D6D:				; CODE XREF: silc_client_send_channel_message+B7j
		mov	ecx, [edx+158h]
		mov	[ebp+var_70], ecx
		mov	esi, [edx+160h]
		mov	[ebp+var_74], esi
		jmp	loc_62B83C0D
; ---------------------------------------------------------------------------

loc_62B83D84:				; CODE XREF: silc_client_send_channel_message+7Cj
					; silc_client_send_channel_message+87j
		mov	edx, [ebp+arg_0]
		mov	eax, [edx+18h]
		mov	eax, [eax+48h]
		mov	[esp+0B8h+var_AC], offset aCannotTalkToCh ; "Cannot talk to channel: not joined"
		mov	[esp+0B8h+var_B0], 4
		mov	[esp+0B8h+var_B4], ebx
		mov	edx, [ebx+4Ch]
		mov	[esp+0B8h+var_B8], edx
		call	dword ptr [eax]
		xor	eax, eax
		jmp	short loc_62B83D43
; ---------------------------------------------------------------------------
		align 10h

loc_62B83DB0:				; CODE XREF: silc_client_send_channel_message+22Fj
		mov	ecx, [edx+154h]
		test	ecx, ecx
		jz	short loc_62B83DCB
		mov	esi, [ecx+4]
		mov	[ebp+var_70], esi
		mov	ecx, [ecx+0Ch]
		mov	[ebp+var_74], ecx
		jmp	loc_62B83C0D
; ---------------------------------------------------------------------------

loc_62B83DCB:				; CODE XREF: silc_client_send_channel_message+27Cj
		mov	ecx, [edi]
		mov	[edi+8], ecx
		and	byte ptr [edi+10h], 0FDh
		mov	dword ptr [edi+18h], 0
		mov	dword ptr [edi+14h], 0
		mov	esi, [edx+150h]
		mov	ecx, [esi+14h]
		mov	[esi+18h], ecx
		mov	edi, [esi+8]
		test	edi, edi
		jz	short loc_62B83E4D
		test	byte ptr [esi+10h], 2
		jz	short loc_62B83E21
		movzx	ecx, word ptr [esi+0Eh]
		mov	ecx, [edi+ecx]

loc_62B83E02:				; CODE XREF: silc_client_send_channel_message+2ECj
		mov	[esi+8], ecx
		mov	[esi+14h], edi
		mov	ecx, [edi]

loc_62B83E0A:				; CODE XREF: silc_client_send_channel_message+31Aj
		mov	esi, [ecx+4]
		mov	[ebp+var_70], esi
		mov	esi, [ecx+0Ch]
		mov	[ebp+var_74], esi
		mov	[edx+154h], ecx
		jmp	loc_62B83C0D
; ---------------------------------------------------------------------------

loc_62B83E21:				; CODE XREF: silc_client_send_channel_message+2BDj
		movzx	ecx, word ptr [esi+0Ch]
		mov	ecx, [edi+ecx]
		jmp	short loc_62B83E02
; ---------------------------------------------------------------------------

loc_62B83E2A:				; CODE XREF: silc_client_send_channel_message+D6j
					; silc_client_send_channel_message+E1j
		mov	[esp+0B8h+var_B8], offset aNoCipherAndHma ; "No	cipher and HMAC	for channel"

loc_62B83E31:				; CODE XREF: silc_client_send_channel_message+34Aj
		call	silc_format
		mov	[esp+0B8h+var_B4], eax
		mov	[esp+0B8h+var_B8], 3
		call	silc_log_output
		xor	eax, eax
		jmp	loc_62B83D43
; ---------------------------------------------------------------------------

loc_62B83E4D:				; CODE XREF: silc_client_send_channel_message+2B7j
		mov	dword ptr [esi+14h], 0
		xor	ecx, ecx
		jmp	short loc_62B83E0A
; ---------------------------------------------------------------------------

loc_62B83E58:				; CODE XREF: silc_client_send_channel_message+96j
		cmp	dword ptr [eax+4], 0
		jnz	loc_62B83BD8
		xor	eax, eax
		jmp	loc_62B83D5A
; ---------------------------------------------------------------------------

loc_62B83E69:				; CODE XREF: silc_client_send_channel_message+9Fj
		mov	edi, [eax+4]
		and	edi, 3
		cmp	edi, 2
		jnz	loc_62B83BE1
		xor	eax, eax
		jmp	loc_62B83D5A
; ---------------------------------------------------------------------------

loc_62B83E7F:				; CODE XREF: silc_client_send_channel_message+18Cj
		mov	[esp+0B8h+var_B8], offset aErrorEncodingC ; "Error encoding channel message"
		jmp	short loc_62B83E31
silc_client_send_channel_message endp

; Exported entry  18. silc_client_channel_message

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public silc_client_channel_message
silc_client_channel_message proc near	; DATA XREF: silc_client_connection_st_packet:loc_62B81ECCo

var_E8		= dword	ptr -0E8h
var_E4		= dword	ptr -0E4h
var_E0		= dword	ptr -0E0h
var_DC		= dword	ptr -0DCh
var_D8		= dword	ptr -0D8h
var_D4		= dword	ptr -0D4h
var_D0		= dword	ptr -0D0h
var_CC		= dword	ptr -0CCh
var_C8		= dword	ptr -0C8h
var_C4		= dword	ptr -0C4h
var_C0		= dword	ptr -0C0h
var_BC		= dword	ptr -0BCh
var_B8		= dword	ptr -0B8h
var_8C		= dword	ptr -8Ch
var_70		= dword	ptr -70h
var_6C		= dword	ptr -6Ch
var_68		= dword	ptr -68h
var_64		= dword	ptr -64h
var_60		= dword	ptr -60h
var_5C		= dword	ptr -5Ch
var_53		= byte ptr -53h
var_36		= byte ptr -36h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		sub	esp, 0DCh
		mov	esi, [ebp+arg_4]
		mov	ebx, [ebp+arg_8]
		mov	edi, [esi+4Ch]
		mov	al, [ebx+21h]
		and	eax, 0FFFFFFC0h
		cmp	al, 0C0h
		jnz	loc_62B8455B
		mov	[esp+0E8h+var_D8], 1Dh
		lea	edx, [ebp+var_53]
		mov	[esp+0E8h+var_DC], edx
		mov	[esp+0E8h+var_E0], 2
		mov	al, [ebx+20h]
		and	eax, 3Fh
		mov	[esp+0E8h+var_E4], eax
		mov	eax, [ebx+18h]
		mov	[esp+0E8h+var_E8], eax
		call	silc_id_str2id
		test	al, al
		jz	loc_62B84541
		lea	eax, [ebp+var_53]
		mov	[esp+0E8h+var_E0], eax
		mov	[esp+0E8h+var_E4], esi
		mov	[esp+0E8h+var_E8], edi
		call	silc_client_get_client_by_id
		mov	edx, eax
		test	eax, eax
		jz	short loc_62B83F01
		test	byte ptr [eax+402h], 1
		jnz	short loc_62B83F74

loc_62B83F01:				; CODE XREF: silc_client_channel_message+6Ej
		mov	[esp+0E8h+var_E0], edx
		mov	[esp+0E8h+var_E4], esi
		mov	[esp+0E8h+var_E8], edi
		call	silc_client_unref_client
		mov	edx, [ebp+arg_0]
		mov	al, [edx+28h]
		mov	dl, al
		or	edx, 4
		mov	ecx, [ebp+arg_0]
		mov	[ecx+28h], dl
		test	al, 4
		jnz	loc_62B84074

loc_62B83F2A:				; CODE XREF: silc_client_channel_message+218j
		mov	ebx, [ebp+arg_0]
		mov	[esp+0E8h+var_D4], ebx
		mov	[esp+0E8h+var_D8], offset sub_62B838F8
		mov	[esp+0E8h+var_DC], 0
		lea	eax, [ebp+var_53]
		mov	[esp+0E8h+var_E0], eax
		mov	[esp+0E8h+var_E4], esi
		mov	[esp+0E8h+var_E8], edi
		call	silc_client_get_client_by_id_resolve
		mov	dl, [ebx+28h]
		mov	al, dl
		shr	al, 2
		and	edx, 0FFFFFFFBh
		mov	[ebx+28h], dl
		shl	eax, 1
		and	eax, 2

loc_62B83F67:				; CODE XREF: silc_client_channel_message+451j
					; silc_client_channel_message+499j ...
		add	esp, 0DCh
		pop	ebx
		pop	esi
		pop	edi
		leave
		retn
; ---------------------------------------------------------------------------
		align 4

loc_62B83F74:				; CODE XREF: silc_client_channel_message+77j
		mov	[esp+0E8h+var_D8], 16h
		lea	ecx, [ebp+var_36]
		mov	[esp+0E8h+var_DC], ecx
		mov	[esp+0E8h+var_E0], 3
		mov	al, [ebx+21h]
		and	eax, 3Fh
		mov	[esp+0E8h+var_E4], eax
		mov	eax, [ebx+1Ch]
		mov	[esp+0E8h+var_E8], eax
		mov	[ebp+var_6C], edx
		mov	[ebp+var_70], ecx
		call	silc_id_str2id
		test	al, al
		mov	edx, [ebp+var_6C]
		mov	ecx, [ebp+var_70]
		jz	loc_62B84575
		mov	[esp+0E8h+var_E0], ecx
		mov	[esp+0E8h+var_E4], esi
		mov	[esp+0E8h+var_E8], edi
		mov	[ebp+var_6C], edx
		call	silc_client_get_channel_by_id
		mov	[ebp+var_8C], eax
		test	eax, eax
		mov	edx, [ebp+var_6C]
		jz	loc_62B84541
		lea	eax, [ebp+var_20]
		mov	[esp+0E8h+var_DC], eax
		mov	[esp+0E8h+var_E0], 0
		mov	[esp+0E8h+var_E4], edx
		mov	ecx, [ebp+var_8C]
		mov	eax, [ecx+134h]
		mov	[esp+0E8h+var_E8], eax
		mov	[ebp+var_6C], edx
		call	silc_hash_table_find
		test	al, al
		mov	edx, [ebp+var_6C]
		jz	loc_62B842A8
		mov	eax, [ebp+var_20]
		test	eax, eax
		jz	loc_62B842A8
		mov	eax, [ebp+var_8C]
		mov	eax, [eax+150h]
		mov	[ebp+var_5C], eax
		test	eax, eax
		jz	loc_62B84344
		mov	eax, [ebp+var_8C]
		test	byte ptr [eax+12Ch], 4
		jz	loc_62B84160

loc_62B84042:				; CODE XREF: silc_client_channel_message+72Aj
		mov	eax, [ebp+var_5C]
		mov	eax, [eax]
		mov	ecx, [ebp+var_5C]
		mov	[ecx+8], eax
		and	byte ptr [ecx+10h], 0FDh
		mov	dword ptr [ecx+18h], 0
		mov	dword ptr [ecx+14h], 0
		mov	[ebp+var_5C], edx
		mov	[ebp+var_60], edi
		mov	[ebp+var_64], esi
		mov	esi, [ebp+var_8C]
		jmp	loc_62B84133
; ---------------------------------------------------------------------------
		align 4

loc_62B84074:				; CODE XREF: silc_client_channel_message+9Cj
		mov	[esp+0E8h+var_E0], 0C5h
		mov	[esp+0E8h+var_E4], offset aClient_channel ; "client_channel.c"
		mov	[esp+0E8h+var_E8], offset aSilc_verifySD ; "SILC_VERIFY	%s:%d"
		call	silc_format
		mov	[esp+0E8h+var_E4], eax
		mov	[esp+0E8h+var_E8], 3
		call	silc_log_output
		jmp	loc_62B83F2A
; ---------------------------------------------------------------------------
		align 4

loc_62B840A8:				; CODE XREF: silc_client_channel_message+2C6j
		movzx	ecx, word ptr [eax+0Eh]
		mov	ecx, [edx+ecx]

loc_62B840AF:				; CODE XREF: silc_client_channel_message+2D3j
		mov	[eax+8], ecx
		mov	[eax+14h], edx
		mov	edi, [edx]
		test	edi, edi
		jz	loc_62B8458F
		mov	edx, [ebx+0Ch]
		mov	[esp+0E8h+var_B8], 0
		mov	[esp+0E8h+var_BC], 0
		mov	[esp+0E8h+var_C0], 0
		mov	al, [ebx+21h]
		and	eax, 3Fh
		mov	[esp+0E8h+var_C4], eax
		mov	eax, [ebx+1Ch]
		mov	[esp+0E8h+var_C8], eax
		mov	al, [ebx+20h]
		and	eax, 3Fh
		mov	[esp+0E8h+var_CC], eax
		mov	eax, [ebx+18h]
		mov	[esp+0E8h+var_D0], eax
		mov	eax, [edi+0Ch]
		mov	[esp+0E8h+var_D4], eax
		mov	eax, [edi+8]
		mov	[esp+0E8h+var_D8], eax
		mov	[esp+0E8h+var_DC], 0
		mov	[esp+0E8h+var_E0], 0
		mov	eax, [ebx+10h]
		sub	eax, edx
		mov	[esp+0E8h+var_E4], eax
		mov	[esp+0E8h+var_E8], edx
		call	silc_message_payload_parse
		test	eax, eax
		jnz	loc_62B84328

loc_62B84133:				; CODE XREF: silc_client_channel_message+1E6j
		mov	eax, [esi+150h]
		mov	edx, [eax+14h]
		mov	[eax+18h], edx
		mov	edx, [eax+8]
		test	edx, edx
		jz	loc_62B842E0
		test	byte ptr [eax+10h], 2
		jnz	loc_62B840A8
		movzx	ecx, word ptr [eax+0Ch]
		mov	ecx, [edx+ecx]
		jmp	loc_62B840AF
; ---------------------------------------------------------------------------

loc_62B84160:				; CODE XREF: silc_client_channel_message+1B4j
		mov	ecx, [ebx+0Ch]
		mov	[esp+0E8h+var_B8], 0
		mov	[esp+0E8h+var_BC], 0
		mov	[esp+0E8h+var_C0], 0
		mov	al, [ebx+21h]
		and	eax, 3Fh
		mov	[esp+0E8h+var_C4], eax
		mov	eax, [ebx+1Ch]
		mov	[esp+0E8h+var_C8], eax
		mov	al, [ebx+20h]
		and	eax, 3Fh
		mov	[esp+0E8h+var_CC], eax
		mov	eax, [ebx+18h]
		mov	[esp+0E8h+var_D0], eax
		mov	eax, [ebp+var_8C]
		mov	eax, [eax+160h]
		mov	[esp+0E8h+var_D4], eax
		mov	eax, [ebp+var_8C]
		mov	eax, [eax+15Ch]
		mov	[esp+0E8h+var_D8], eax
		mov	[esp+0E8h+var_DC], 0
		mov	[esp+0E8h+var_E0], 0
		mov	eax, [ebx+10h]
		sub	eax, ecx
		mov	[esp+0E8h+var_E4], eax
		mov	[esp+0E8h+var_E8], ecx
		mov	[ebp+var_6C], edx
		call	silc_message_payload_parse
		mov	[ebp+var_5C], eax
		test	eax, eax
		mov	edx, [ebp+var_6C]
		jz	loc_62B845A3

loc_62B841EF:				; CODE XREF: silc_client_channel_message+545j
					; silc_client_channel_message+6B4j
		mov	[ebp+var_68], 0

loc_62B841F6:				; CODE XREF: silc_client_channel_message+4B5j
		lea	eax, [ebp+var_1C]
		mov	[esp+0E8h+var_E4], eax
		mov	eax, [ebp+var_5C]
		mov	[esp+0E8h+var_E8], eax
		mov	[ebp+var_6C], edx
		call	silc_message_get_data
		mov	[ebp+var_60], eax
		mov	eax, [edi+18h]
		mov	eax, [eax+48h]
		mov	eax, [eax+4]
		mov	[ebp+var_64], eax
		mov	ebx, [ebp+var_1C]
		mov	ecx, [ebp+var_5C]
		mov	[esp+0E8h+var_E8], ecx
		call	silc_message_get_flags
		mov	[esp+0E8h+var_C8], ebx
		mov	ebx, [ebp+var_60]
		mov	[esp+0E8h+var_CC], ebx
		movzx	eax, ax
		mov	[esp+0E8h+var_D0], eax
		mov	eax, [ebp+var_68]
		mov	[esp+0E8h+var_D4], eax
		mov	ecx, [ebp+var_5C]
		mov	[esp+0E8h+var_D8], ecx
		mov	ebx, [ebp+var_8C]
		mov	[esp+0E8h+var_DC], ebx
		mov	edx, [ebp+var_6C]
		mov	[esp+0E8h+var_E0], edx
		mov	[esp+0E8h+var_E4], esi
		mov	[esp+0E8h+var_E8], edi
		call	[ebp+var_64]
		mov	edx, [ebp+var_6C]
		mov	[esp+0E8h+var_E0], edx
		mov	[esp+0E8h+var_E4], esi
		mov	[esp+0E8h+var_E8], edi
		call	silc_client_unref_client
		mov	[esp+0E8h+var_E0], ebx
		mov	[esp+0E8h+var_E4], esi
		mov	[esp+0E8h+var_E8], edi
		call	silc_client_unref_channel
		mov	ebx, [ebp+var_5C]
		test	ebx, ebx
		jz	short loc_62B84298
		mov	eax, [ebp+var_5C]
		mov	[esp+0E8h+var_E8], eax
		call	silc_message_payload_free

loc_62B84298:				; CODE XREF: silc_client_channel_message+403j
		mov	eax, 3
		add	esp, 0DCh
		pop	ebx
		pop	esi
		pop	edi
		leave
		retn
; ---------------------------------------------------------------------------

loc_62B842A8:				; CODE XREF: silc_client_channel_message+17Fj
					; silc_client_channel_message+18Aj
		mov	[esp+0E8h+var_E8], offset aMessageFromUse ; "Message from user not on channel, clien"...
		call	silc_format
		mov	[esp+0E8h+var_E4], eax
		mov	[esp+0E8h+var_E8], 2
		call	silc_log_output
		mov	[esp+0E8h+var_E4], offset silc_client_channel_message_error
		mov	ebx, [ebp+arg_0]
		mov	[esp+0E8h+var_E8], ebx
		call	silc_fsm_next
		xor	eax, eax
		jmp	loc_62B83F67
; ---------------------------------------------------------------------------
		align 10h

loc_62B842E0:				; CODE XREF: silc_client_channel_message+2BCj
		mov	edx, [ebp+var_5C]
		mov	[ebp+var_8C], esi
		mov	edi, [ebp+var_60]
		mov	esi, [ebp+var_64]
		mov	dword ptr [eax+14h], 0

loc_62B842F6:				; CODE XREF: silc_client_channel_message+716j
		mov	[esp+0E8h+var_E0], edx
		mov	[esp+0E8h+var_E4], esi
		mov	[esp+0E8h+var_E8], edi
		call	silc_client_unref_client
		mov	eax, [ebp+var_8C]
		mov	[esp+0E8h+var_E0], eax
		mov	[esp+0E8h+var_E4], esi
		mov	[esp+0E8h+var_E8], edi
		call	silc_client_unref_channel
		mov	eax, 3
		jmp	loc_62B83F67
; ---------------------------------------------------------------------------
		align 4

loc_62B84328:				; CODE XREF: silc_client_channel_message+2A5j
		mov	[ebp+var_68], edi
		mov	edx, [ebp+var_5C]
		mov	[ebp+var_8C], esi
		mov	[ebp+var_5C], eax
		mov	edi, [ebp+var_60]
		mov	esi, [ebp+var_64]
		jmp	loc_62B841F6
; ---------------------------------------------------------------------------
		align 4

loc_62B84344:				; CODE XREF: silc_client_channel_message+1A1j
		mov	ecx, [ebx+0Ch]
		mov	[esp+0E8h+var_B8], 0
		mov	[esp+0E8h+var_BC], 0
		mov	[esp+0E8h+var_C0], 0
		mov	al, [ebx+21h]
		and	eax, 3Fh
		mov	[esp+0E8h+var_C4], eax
		mov	eax, [ebx+1Ch]
		mov	[esp+0E8h+var_C8], eax
		mov	al, [ebx+20h]
		and	eax, 3Fh
		mov	[esp+0E8h+var_CC], eax
		mov	eax, [ebx+18h]
		mov	[esp+0E8h+var_D0], eax
		mov	eax, [ebp+var_8C]
		mov	eax, [eax+160h]
		mov	[esp+0E8h+var_D4], eax
		mov	eax, [ebp+var_8C]
		mov	eax, [eax+15Ch]
		mov	[esp+0E8h+var_D8], eax
		mov	[esp+0E8h+var_DC], 0
		mov	[esp+0E8h+var_E0], 0
		mov	eax, [ebx+10h]
		sub	eax, ecx
		mov	[esp+0E8h+var_E4], eax
		mov	[esp+0E8h+var_E8], ecx
		mov	[ebp+var_6C], edx
		call	silc_message_payload_parse
		mov	[ebp+var_5C], eax
		test	eax, eax
		mov	edx, [ebp+var_6C]
		jnz	loc_62B841EF
		mov	ecx, [ebp+var_8C]
		mov	ecx, [ecx+148h]
		mov	[ebp+var_5C], ecx
		test	ecx, ecx
		jz	loc_62B845D6
		mov	eax, ecx
		mov	ecx, [ecx+10h]
		shr	ecx, 2
		jz	loc_62B845D6
		mov	ecx, [eax+4]
		mov	[eax+8], ecx
		or	byte ptr [eax+10h], 2
		mov	dword ptr [eax+18h], 0
		mov	dword ptr [eax+14h], 0
		mov	eax, [ebp+var_8C]
		mov	eax, [eax+14Ch]
		mov	[ebp+var_5C], eax
		mov	ecx, [eax+4]
		mov	[eax+8], ecx
		or	byte ptr [eax+10h], 2
		mov	dword ptr [eax+18h], 0
		mov	dword ptr [eax+14h], 0
		mov	[ebp+var_68], edx
		mov	eax, [ebp+var_8C]
		mov	[ebp+var_5C], eax

loc_62B84443:				; CODE XREF: silc_client_channel_message+69Fj
		mov	edx, [ebp+var_5C]
		mov	eax, [edx+148h]
		mov	edx, [eax+14h]
		mov	[eax+18h], edx
		mov	edx, [eax+8]
		test	edx, edx
		jz	loc_62B84614
		test	byte ptr [eax+10h], 2
		jz	loc_62B84629
		movzx	ecx, word ptr [eax+0Eh]
		mov	ecx, [edx+ecx]

loc_62B8446E:				; CODE XREF: silc_client_channel_message+7A8j
		mov	[eax+8], ecx
		mov	[eax+14h], edx
		mov	edx, [edx]
		mov	[ebp+var_60], edx
		test	edx, edx
		jz	loc_62B84606
		mov	edx, [ebp+var_5C]
		mov	eax, [edx+14Ch]
		mov	edx, [eax+14h]
		mov	[eax+18h], edx
		mov	edx, [eax+8]
		test	edx, edx
		jz	loc_62B845C3
		test	byte ptr [eax+10h], 2
		jz	loc_62B845B7
		movzx	ecx, word ptr [eax+0Eh]
		mov	ecx, [edx+ecx]

loc_62B844AC:				; CODE XREF: silc_client_channel_message+736j
		mov	[eax+8], ecx
		mov	[eax+14h], edx
		mov	eax, [edx]
		test	eax, eax
		jz	loc_62B84606
		mov	ecx, [ebx+0Ch]
		mov	[esp+0E8h+var_B8], 0
		mov	[esp+0E8h+var_BC], 0
		mov	[esp+0E8h+var_C0], 0
		mov	dl, [ebx+21h]
		and	edx, 3Fh
		mov	[esp+0E8h+var_C4], edx
		mov	edx, [ebx+1Ch]
		mov	[esp+0E8h+var_C8], edx
		mov	dl, [ebx+20h]
		and	edx, 3Fh
		mov	[esp+0E8h+var_CC], edx
		mov	edx, [ebx+18h]
		mov	[esp+0E8h+var_D0], edx
		mov	[esp+0E8h+var_D4], eax
		mov	eax, [ebp+var_60]
		mov	[esp+0E8h+var_D8], eax
		mov	[esp+0E8h+var_DC], 0
		mov	[esp+0E8h+var_E0], 0
		mov	eax, [ebx+10h]
		sub	eax, ecx
		mov	[esp+0E8h+var_E4], eax
		mov	[esp+0E8h+var_E8], ecx
		call	silc_message_payload_parse
		test	eax, eax
		jz	loc_62B84443
		mov	edx, [ebp+var_68]
		mov	ebx, [ebp+var_5C]
		mov	[ebp+var_8C], ebx
		mov	[ebp+var_5C], eax
		jmp	loc_62B841EF
; ---------------------------------------------------------------------------

loc_62B84541:				; CODE XREF: silc_client_channel_message+51j
					; silc_client_channel_message+14Aj
		mov	[esp+0E8h+var_E4], offset silc_client_channel_message_error
		mov	ecx, [ebp+arg_0]
		mov	[esp+0E8h+var_E8], ecx
		call	silc_fsm_next
		xor	eax, eax
		jmp	loc_62B83F67
; ---------------------------------------------------------------------------

loc_62B8455B:				; CODE XREF: silc_client_channel_message+1Dj
		mov	[esp+0E8h+var_E4], offset silc_client_channel_message_error
		mov	eax, [ebp+arg_0]
		mov	[esp+0E8h+var_E8], eax
		call	silc_fsm_next
		xor	eax, eax
		jmp	loc_62B83F67
; ---------------------------------------------------------------------------

loc_62B84575:				; CODE XREF: silc_client_channel_message+126j
		mov	[esp+0E8h+var_E4], offset silc_client_channel_message_error
		mov	edx, [ebp+arg_0]
		mov	[esp+0E8h+var_E8], edx
		call	silc_fsm_next
		xor	eax, eax
		jmp	loc_62B83F67
; ---------------------------------------------------------------------------

loc_62B8458F:				; CODE XREF: silc_client_channel_message+231j
		mov	edx, [ebp+var_5C]
		mov	[ebp+var_8C], esi
		mov	edi, [ebp+var_60]
		mov	esi, [ebp+var_64]
		jmp	loc_62B842F6
; ---------------------------------------------------------------------------

loc_62B845A3:				; CODE XREF: silc_client_channel_message+361j
		mov	ecx, [ebp+var_8C]
		mov	ecx, [ecx+150h]
		mov	[ebp+var_5C], ecx
		jmp	loc_62B84042
; ---------------------------------------------------------------------------

loc_62B845B7:				; CODE XREF: silc_client_channel_message+617j
		movzx	ecx, word ptr [eax+0Ch]
		mov	ecx, [edx+ecx]
		jmp	loc_62B844AC
; ---------------------------------------------------------------------------

loc_62B845C3:				; CODE XREF: silc_client_channel_message+60Dj
		mov	edx, [ebp+var_68]
		mov	ecx, [ebp+var_5C]
		mov	[ebp+var_8C], ecx
		mov	dword ptr [eax+14h], 0

loc_62B845D6:				; CODE XREF: silc_client_channel_message+55Cj
					; silc_client_channel_message+56Aj ...
		mov	[esp+0E8h+var_E0], edx
		mov	[esp+0E8h+var_E4], esi
		mov	[esp+0E8h+var_E8], edi
		call	silc_client_unref_client
		mov	ebx, [ebp+var_8C]
		mov	[esp+0E8h+var_E0], ebx
		mov	[esp+0E8h+var_E4], esi
		mov	[esp+0E8h+var_E8], edi
		call	silc_client_unref_channel
		mov	eax, 3
		jmp	loc_62B83F67
; ---------------------------------------------------------------------------

loc_62B84606:				; CODE XREF: silc_client_channel_message+5F3j
					; silc_client_channel_message+62Ej
		mov	edx, [ebp+var_68]
		mov	ecx, [ebp+var_5C]
		mov	[ebp+var_8C], ecx
		jmp	short loc_62B845D6
; ---------------------------------------------------------------------------

loc_62B84614:				; CODE XREF: silc_client_channel_message+5CFj
		mov	edx, [ebp+var_68]
		mov	ebx, [ebp+var_5C]
		mov	[ebp+var_8C], ebx
		mov	dword ptr [eax+14h], 0
		jmp	short loc_62B845D6
; ---------------------------------------------------------------------------

loc_62B84629:				; CODE XREF: silc_client_channel_message+5D9j
		movzx	ecx, word ptr [eax+0Ch]
		mov	ecx, [edx+ecx]
		jmp	loc_62B8446E
silc_client_channel_message endp

; ---------------------------------------------------------------------------
		align 4
; Exported entry 197. silc_client_save_channel_key

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public silc_client_save_channel_key
silc_client_save_channel_key proc near	; CODE XREF: silc_client_channel_key+26p
					; silc_client_command_reply_join+BFDp

var_C8		= dword	ptr -0C8h
var_C4		= dword	ptr -0C4h
var_C0		= dword	ptr -0C0h
var_BC		= dword	ptr -0BCh
var_B8		= dword	ptr -0B8h
var_B4		= dword	ptr -0B4h
var_B0		= dword	ptr -0B0h
var_9C		= dword	ptr -9Ch
var_8C		= dword	ptr -8Ch
var_7C		= dword	ptr -7Ch
var_72		= byte ptr -72h
var_32		= byte ptr -32h
var_1C		= dword	ptr -1Ch
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		sub	esp, 0BCh
		mov	eax, [ebp+arg_8]
		mov	ebx, [ebp+arg_C]
		mov	edx, [eax+4]
		mov	eax, [eax+8]
		sub	eax, edx
		mov	[esp+0C8h+var_C4], eax
		mov	[esp+0C8h+var_C8], edx
		call	silc_channel_key_payload_parse
		mov	esi, eax
		test	eax, eax
		jz	loc_62B849EA
		lea	eax, [ebp+var_1C]
		mov	[esp+0C8h+var_C4], eax
		mov	[esp+0C8h+var_C8], esi
		call	silc_channel_key_get_id
		test	eax, eax
		jz	loc_62B849E2
		mov	[esp+0C8h+var_B8], 16h
		lea	edi, [ebp+var_32]
		mov	[esp+0C8h+var_BC], edi
		mov	[esp+0C8h+var_C0], 3
		mov	edx, [ebp+var_1C]
		mov	[esp+0C8h+var_C4], edx
		mov	[esp+0C8h+var_C8], eax
		call	silc_id_str2id
		test	al, al
		jz	loc_62B849E2
		test	ebx, ebx
		jz	loc_62B84A18
		mov	[esp+0C8h+var_C0], ebx
		mov	eax, [ebp+arg_4]
		mov	[esp+0C8h+var_C4], eax
		mov	edx, [ebp+arg_0]
		mov	[esp+0C8h+var_C8], edx
		call	silc_client_ref_channel

loc_62B846CB:				; CODE XREF: silc_client_save_channel_key+3FAj
		mov	ecx, [ebx+148h]
		test	ecx, ecx
		jz	loc_62B84AD0

loc_62B846D9:				; CODE XREF: silc_client_save_channel_key+4A3j
		mov	edx, [ebx+14Ch]
		test	edx, edx
		jz	loc_62B84AE0

loc_62B846E7:				; CODE XREF: silc_client_save_channel_key+4B3j
		mov	edi, [ebx+148h]
		test	edi, edi
		jz	loc_62B847FB
		mov	eax, [ebx+14Ch]
		test	eax, eax
		jz	loc_62B847FB
		mov	edx, [ebx+15Ch]
		mov	[esp+0C8h+var_C8], 0Ch
		mov	[ebp+var_7C], edx
		call	silc_malloc
		test	eax, eax
		mov	edx, [ebp+var_7C]
		jz	short loc_62B8475F
		mov	[eax], edx
		mov	ecx, [edi]
		test	ecx, ecx
		jz	loc_62B84AA8
		movzx	edx, word ptr [edi+0Ch]
		mov	[ebp+var_9C], edx
		mov	edx, [edi+4]
		mov	ecx, [ebp+var_9C]
		mov	[edx+ecx], eax

loc_62B84741:				; CODE XREF: silc_client_save_channel_key+47Cj
		test	byte ptr [edi+10h], 1
		jnz	loc_62B84A08

loc_62B8474B:				; CODE XREF: silc_client_save_channel_key+3DAj
		mov	[edi+4], eax
		mov	edx, [ebp+var_9C]
		mov	dword ptr [eax+edx], 0
		add	dword ptr [edi+10h], 4

loc_62B8475F:				; CODE XREF: silc_client_save_channel_key+E5j
		mov	edx, [ebx+160h]
		mov	edi, [ebx+14Ch]
		mov	[esp+0C8h+var_C8], 0Ch
		mov	[ebp+var_7C], edx
		call	silc_malloc
		test	eax, eax
		mov	edx, [ebp+var_7C]
		jz	short loc_62B847C1
		mov	[eax], edx
		mov	edx, [edi]
		test	edx, edx
		jz	loc_62B84ABC
		movzx	edx, word ptr [edi+0Ch]
		mov	[ebp+var_9C], edx
		mov	edx, [edi+4]
		mov	ecx, [ebp+var_9C]
		mov	[edx+ecx], eax

loc_62B847A3:				; CODE XREF: silc_client_save_channel_key+490j
		test	byte ptr [edi+10h], 1
		jnz	loc_62B849F8

loc_62B847AD:				; CODE XREF: silc_client_save_channel_key+3CAj
		mov	[edi+4], eax
		mov	edx, [ebp+var_9C]
		mov	dword ptr [eax+edx], 0
		add	dword ptr [edi+10h], 4

loc_62B847C1:				; CODE XREF: silc_client_save_channel_key+147j
		mov	[esp+0C8h+var_B0], 1
		mov	[esp+0C8h+var_B4], 0
		mov	[esp+0C8h+var_B8], 0Fh
		mov	[esp+0C8h+var_BC], ebx
		mov	[esp+0C8h+var_C0], offset silc_client_save_channel_key_rekey
		mov	[esp+0C8h+var_C4], 0
		mov	ecx, [ebp+arg_0]
		mov	eax, [ecx+0Ch]
		mov	[esp+0C8h+var_C8], eax
		call	silc_schedule_task_add

loc_62B847FB:				; CODE XREF: silc_client_save_channel_key+B7j
					; silc_client_save_channel_key+C5j
		mov	[esp+0C8h+var_C4], 0
		mov	[esp+0C8h+var_C8], esi
		call	silc_channel_key_get_cipher
		mov	edi, eax
		lea	eax, [ebx+158h]
		mov	[esp+0C8h+var_C4], eax
		mov	[esp+0C8h+var_C8], edi
		call	silc_cipher_alloc
		test	al, al
		jz	loc_62B849A0
		lea	eax, [ebx+15Ch]
		mov	[esp+0C8h+var_C4], eax
		mov	[esp+0C8h+var_C8], edi
		call	silc_cipher_alloc
		test	al, al
		jz	loc_62B84A50
		lea	ecx, [ebp+var_1C]
		mov	[esp+0C8h+var_C4], ecx
		mov	[esp+0C8h+var_C8], esi
		call	silc_channel_key_get_key
		mov	edi, eax
		mov	[esp+0C8h+var_BC], 1
		mov	eax, [ebp+var_1C]
		shl	eax, 3
		mov	[esp+0C8h+var_C0], eax
		mov	[esp+0C8h+var_C4], edi
		mov	eax, [ebx+158h]
		mov	[esp+0C8h+var_C8], eax
		call	silc_cipher_set_key
		mov	[esp+0C8h+var_BC], 0
		mov	eax, [ebp+var_1C]
		shl	eax, 3
		mov	[esp+0C8h+var_C0], eax
		mov	[esp+0C8h+var_C4], edi
		mov	eax, [ebx+15Ch]
		mov	[esp+0C8h+var_C8], eax
		call	silc_cipher_set_key
		mov	eax, [ebx+160h]
		test	eax, eax
		jz	loc_62B84A44
		mov	[esp+0C8h+var_C8], eax
		call	silc_hmac_get_name
		mov	edx, eax

loc_62B848B2:				; CODE XREF: silc_client_save_channel_key+411j
		lea	eax, [ebx+160h]
		mov	[esp+0C8h+var_C0], eax
		mov	[esp+0C8h+var_C4], 0
		mov	[esp+0C8h+var_C8], edx
		mov	[ebp+var_7C], edx
		call	silc_hmac_alloc
		test	al, al
		mov	edx, [ebp+var_7C]
		jz	loc_62B84A7C
		mov	eax, [ebx+158h]
		mov	[esp+0C8h+var_C8], eax
		call	silc_cipher_get_name
		mov	[ebx+138h], eax
		mov	eax, [ebx+160h]
		mov	[esp+0C8h+var_C8], eax
		call	silc_hmac_get_name
		mov	[ebx+13Ch], eax
		mov	edx, [ebp+var_1C]
		mov	eax, [ebx+160h]
		mov	[esp+0C8h+var_C8], eax
		mov	[ebp+var_7C], edx
		call	silc_hmac_get_hash
		lea	ecx, [ebp+var_72]
		mov	[ebp+var_8C], ecx
		mov	[esp+0C8h+var_BC], ecx
		mov	edx, [ebp+var_7C]
		mov	[esp+0C8h+var_C0], edx
		mov	[esp+0C8h+var_C4], edi
		mov	[esp+0C8h+var_C8], eax
		call	silc_hash_make
		mov	eax, [ebx+160h]
		mov	[esp+0C8h+var_C8], eax
		call	silc_hmac_get_hash
		mov	[esp+0C8h+var_C8], eax
		call	silc_hash_len
		mov	[esp+0C8h+var_C0], eax
		lea	eax, [ebp+var_72]
		mov	[esp+0C8h+var_C4], eax
		mov	eax, [ebx+160h]
		mov	[esp+0C8h+var_C8], eax
		call	silc_hmac_set_key
		mov	ecx, 40h
		xor	eax, eax
		mov	edi, [ebp+var_8C]
		rep stosb
		mov	[esp+0C8h+var_C8], esi
		call	silc_channel_key_payload_free
		mov	[esp+0C8h+var_C0], ebx
		mov	edx, [ebp+arg_4]
		mov	[esp+0C8h+var_C4], edx
		mov	ecx, [ebp+arg_0]
		mov	[esp+0C8h+var_C8], ecx
		call	silc_client_unref_channel
		mov	al, 1
		add	esp, 0BCh
		pop	ebx
		pop	esi
		pop	edi
		leave
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_62B849A0:				; CODE XREF: silc_client_save_channel_key+1E9j
		mov	edx, [ebp+arg_0]
		mov	eax, [edx+18h]
		mov	eax, [eax+48h]
		mov	[esp+0C8h+var_B8], edi
		mov	[esp+0C8h+var_BC], offset aCannotTalkTo_0 ; "Cannot talk to channel: unsupported cip"...
		mov	[esp+0C8h+var_C0], 4
		mov	ecx, [ebp+arg_4]
		mov	[esp+0C8h+var_C4], ecx

loc_62B849C4:				; CODE XREF: silc_client_save_channel_key+43Ej
					; silc_client_save_channel_key+46Aj
		mov	edx, [ecx+4Ch]
		mov	[esp+0C8h+var_C8], edx
		call	dword ptr [eax]
		mov	[esp+0C8h+var_C0], ebx
		mov	eax, [ebp+arg_4]
		mov	[esp+0C8h+var_C4], eax
		mov	edx, [ebp+arg_0]
		mov	[esp+0C8h+var_C8], edx
		call	silc_client_unref_channel

loc_62B849E2:				; CODE XREF: silc_client_save_channel_key+41j
					; silc_client_save_channel_key+6Fj
		mov	[esp+0C8h+var_C8], esi
		call	silc_channel_key_payload_free

loc_62B849EA:				; CODE XREF: silc_client_save_channel_key+2Aj
		xor	eax, eax

loc_62B849EC:				; CODE XREF: silc_client_save_channel_key+40Aj
		add	esp, 0BCh
		pop	ebx
		pop	esi
		pop	edi
		leave
		retn
; ---------------------------------------------------------------------------
		align 4

loc_62B849F8:				; CODE XREF: silc_client_save_channel_key+16Fj
		movzx	edx, word ptr [edi+0Eh]
		mov	ecx, [edi+4]
		mov	[eax+edx], ecx
		jmp	loc_62B847AD
; ---------------------------------------------------------------------------
		align 4

loc_62B84A08:				; CODE XREF: silc_client_save_channel_key+10Dj
		movzx	edx, word ptr [edi+0Eh]
		mov	ecx, [edi+4]
		mov	[eax+edx], ecx
		jmp	loc_62B8474B
; ---------------------------------------------------------------------------
		align 4

loc_62B84A18:				; CODE XREF: silc_client_save_channel_key+77j
		mov	[esp+0C8h+var_C0], edi
		mov	edx, [ebp+arg_4]
		mov	[esp+0C8h+var_C4], edx
		mov	ecx, [ebp+arg_0]
		mov	[esp+0C8h+var_C8], ecx
		call	silc_client_get_channel_by_id
		mov	ebx, eax
		test	eax, eax
		jnz	loc_62B846CB
		mov	[esp+0C8h+var_C8], esi
		call	silc_channel_key_payload_free
		xor	eax, eax
		jmp	short loc_62B849EC
; ---------------------------------------------------------------------------

loc_62B84A44:				; CODE XREF: silc_client_save_channel_key+26Aj
		mov	edx, offset aHmacSha196	; "hmac-sha1-96"
		jmp	loc_62B848B2
; ---------------------------------------------------------------------------
		align 10h

loc_62B84A50:				; CODE XREF: silc_client_save_channel_key+203j
		mov	ecx, [ebp+arg_0]
		mov	eax, [ecx+18h]
		mov	eax, [eax+48h]
		mov	[esp+0C8h+var_B8], edi
		mov	[esp+0C8h+var_BC], offset aCannotTalkTo_0 ; "Cannot talk to channel: unsupported cip"...
		mov	[esp+0C8h+var_C0], 4
		mov	edx, [ebp+arg_4]
		mov	[esp+0C8h+var_C4], edx
		mov	ecx, edx
		jmp	loc_62B849C4
; ---------------------------------------------------------------------------
		align 4

loc_62B84A7C:				; CODE XREF: silc_client_save_channel_key+29Cj
		mov	ecx, [ebp+arg_0]
		mov	eax, [ecx+18h]
		mov	eax, [eax+48h]
		mov	[esp+0C8h+var_B8], edx
		mov	[esp+0C8h+var_BC], offset aCannotTalkTo_1 ; "Cannot talk to channel: unsupported HMA"...
		mov	[esp+0C8h+var_C0], 4
		mov	edx, [ebp+arg_4]
		mov	[esp+0C8h+var_C4], edx
		mov	ecx, edx
		jmp	loc_62B849C4
; ---------------------------------------------------------------------------
		align 4

loc_62B84AA8:				; CODE XREF: silc_client_save_channel_key+EDj
		mov	[edi], eax
		movzx	ecx, word ptr [edi+0Ch]
		mov	[ebp+var_9C], ecx
		jmp	loc_62B84741
; ---------------------------------------------------------------------------
		align 4

loc_62B84ABC:				; CODE XREF: silc_client_save_channel_key+14Fj
		mov	[edi], eax
		movzx	ecx, word ptr [edi+0Ch]
		mov	[ebp+var_9C], ecx
		jmp	loc_62B847A3
; ---------------------------------------------------------------------------
		align 10h

loc_62B84AD0:				; CODE XREF: silc_client_save_channel_key+9Bj
		call	sub_62B83258
		mov	[ebx+148h], eax
		jmp	loc_62B846D9
; ---------------------------------------------------------------------------

loc_62B84AE0:				; CODE XREF: silc_client_save_channel_key+A9j
		call	sub_62B83258
		mov	[ebx+14Ch], eax
		jmp	loc_62B846E7
silc_client_save_channel_key endp

; Exported entry  17. silc_client_channel_key

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public silc_client_channel_key
silc_client_channel_key	proc near	; DATA XREF: silc_client_connection_st_packet:loc_62B81EE0o

var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		push	ebx
		sub	esp, 14h
		mov	eax, [ebp+arg_4]
		mov	ebx, [ebp+arg_8]
		mov	[esp+18h+var_C], 0
		lea	edx, [ebx+8]
		mov	[esp+18h+var_10], edx
		mov	[esp+18h+var_14], eax
		mov	eax, [eax+4Ch]
		mov	[esp+18h+var_18], eax
		call	silc_client_save_channel_key
		mov	[esp+18h+var_18], ebx
		call	silc_packet_free
		mov	eax, 3
		add	esp, 14h
		pop	ebx
		leave
		retn
silc_client_channel_key	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 105. silc_client_del_channel_private_keys

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public silc_client_del_channel_private_keys
silc_client_del_channel_private_keys proc near ; CODE XREF: silc_client_unref_channel+95p

var_58		= dword	ptr -58h
var_3C		= dword	ptr -3Ch
var_2C		= dword	ptr -2Ch
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		sub	esp, 4Ch
		mov	edi, [ebp+arg_0]
		test	edi, edi
		jz	loc_62B84E60
		mov	esi, [ebp+arg_4]
		test	esi, esi
		jz	loc_62B84E60
		mov	ebx, [ebp+arg_8]
		test	ebx, ebx
		jz	loc_62B84E60
		mov	edx, [ebp+arg_8]
		mov	eax, [edx+150h]
		test	eax, eax
		jz	loc_62B84E60
		mov	edx, [eax]
		mov	[eax+8], edx
		and	byte ptr [eax+10h], 0FDh
		mov	dword ptr [eax+18h], 0
		mov	dword ptr [eax+14h], 0
		xchg	ax, ax

loc_62B84B84:				; CODE XREF: silc_client_del_channel_private_keys+EBj
		mov	ebx, [ebp+arg_8]
		mov	ecx, [ebx+150h]
		mov	eax, [ecx+14h]
		mov	[ecx+18h], eax
		mov	eax, [ecx+8]
		test	eax, eax
		jz	loc_62B84CF4
		test	byte ptr [ecx+10h], 2
		jz	loc_62B84C84
		movzx	edx, word ptr [ecx+0Eh]
		mov	edx, [eax+edx]

loc_62B84BAF:				; CODE XREF: silc_client_del_channel_private_keys+15Bj
		mov	[ecx+8], edx
		mov	[ecx+14h], eax
		mov	edi, [eax]
		test	edi, edi
		jz	loc_62B84CFB
		mov	esi, [ecx]
		mov	eax, esi
		mov	[ecx+8], esi
		and	byte ptr [ecx+10h], 0FDh
		xor	ebx, ebx
		test	eax, eax
		jz	short loc_62B84BE8

loc_62B84BD0:				; CODE XREF: silc_client_del_channel_private_keys+B6j
		test	bl, bl
		jz	short loc_62B84C20
		movzx	edx, word ptr [ecx+0Eh]
		mov	edx, [eax+edx]
		mov	[ecx+8], edx
		cmp	edi, [eax]
		jz	short loc_62B84C2E

loc_62B84BE2:				; CODE XREF: silc_client_del_channel_private_keys+FCj
		mov	eax, edx
		test	eax, eax
		jnz	short loc_62B84BD0

loc_62B84BE8:				; CODE XREF: silc_client_del_channel_private_keys+9Ej
					; silc_client_del_channel_private_keys+14Cj
		mov	eax, [edi]
		mov	[esp+58h+var_58], eax
		call	silc_free
		mov	eax, [edi+4]
		mov	[esp+58h+var_58], eax
		call	silc_cipher_free
		mov	eax, [edi+8]
		mov	[esp+58h+var_58], eax
		call	silc_cipher_free
		mov	eax, [edi+0Ch]
		mov	[esp+58h+var_58], eax
		call	silc_hmac_free
		mov	[esp+58h+var_58], edi
		call	silc_free
		jmp	loc_62B84B84
; ---------------------------------------------------------------------------

loc_62B84C20:				; CODE XREF: silc_client_del_channel_private_keys+A2j
		movzx	edx, word ptr [ecx+0Ch]
		mov	edx, [eax+edx]
		mov	[ecx+8], edx
		cmp	edi, [eax]
		jnz	short loc_62B84BE2

loc_62B84C2E:				; CODE XREF: silc_client_del_channel_private_keys+B0j
		mov	[ebp+var_3C], esi
		test	esi, esi
		jz	short loc_62B84C65
		cmp	eax, esi
		jz	loc_62B84E75
		movzx	esi, word ptr [ecx+0Ch]
		mov	[ebp+var_1C], esi
		mov	ebx, [ebp+var_3C]
		mov	[ebp+var_20], edi
		mov	edi, esi
		jmp	short loc_62B84C56
; ---------------------------------------------------------------------------
		align 10h

loc_62B84C50:				; CODE XREF: silc_client_del_channel_private_keys+12Dj
		cmp	eax, edx
		jz	short loc_62B84C90
		mov	ebx, edx

loc_62B84C56:				; CODE XREF: silc_client_del_channel_private_keys+11Cj
		lea	esi, [ebx+edi]
		mov	edx, [esi]
		test	edx, edx
		jnz	short loc_62B84C50
		mov	[ebp+var_3C], ebx
		mov	edi, [ebp+var_20]

loc_62B84C65:				; CODE XREF: silc_client_del_channel_private_keys+103j
		cmp	eax, [ecx+4]
		jz	short loc_62B84CD0

loc_62B84C6A:				; CODE XREF: silc_client_del_channel_private_keys+19Ej
		cmp	eax, [ecx+14h]
		jz	short loc_62B84CDC

loc_62B84C6F:				; CODE XREF: silc_client_del_channel_private_keys+1A9j
		cmp	eax, [ecx+18h]
		jz	short loc_62B84CE8

loc_62B84C74:				; CODE XREF: silc_client_del_channel_private_keys+1B6j
					; silc_client_del_channel_private_keys+1BFj
		mov	[esp+58h+var_58], eax
		call	silc_free
		jmp	loc_62B84BE8
; ---------------------------------------------------------------------------
		align 4

loc_62B84C84:				; CODE XREF: silc_client_del_channel_private_keys+72j
		movzx	edx, word ptr [ecx+0Ch]
		mov	edx, [eax+edx]
		jmp	loc_62B84BAF
; ---------------------------------------------------------------------------

loc_62B84C90:				; CODE XREF: silc_client_del_channel_private_keys+122j
		mov	[ebp+var_3C], ebx
		mov	[ebp+var_2C], esi
		mov	edi, [ebp+var_20]

loc_62B84C99:				; CODE XREF: silc_client_del_channel_private_keys+356j
		mov	esi, [ebp+var_1C]
		mov	esi, [eax+esi]
		mov	[ebp+var_20], esi
		mov	edx, [ebp+var_2C]
		mov	[edx], esi
		test	esi, esi
		jz	short loc_62B84CBE
		test	byte ptr [ecx+10h], 1
		jz	short loc_62B84CBE
		movzx	ebx, word ptr [ecx+0Eh]
		mov	esi, [eax+ebx]
		mov	edx, [ebp+var_20]
		mov	[edx+ebx], esi

loc_62B84CBE:				; CODE XREF: silc_client_del_channel_private_keys+179j
					; silc_client_del_channel_private_keys+17Fj
		cmp	eax, [ecx+8]
		jz	loc_62B84E53

loc_62B84CC7:				; CODE XREF: silc_client_del_channel_private_keys+32Bj
		sub	dword ptr [ecx+10h], 4
		cmp	eax, [ecx+4]
		jnz	short loc_62B84C6A

loc_62B84CD0:				; CODE XREF: silc_client_del_channel_private_keys+138j
		mov	edx, [ebp+var_3C]
		mov	[ecx+4], edx
		cmp	eax, [ecx+14h]
		jnz	short loc_62B84C6F
		nop

loc_62B84CDC:				; CODE XREF: silc_client_del_channel_private_keys+13Dj
		mov	dword ptr [ecx+14h], 0
		cmp	eax, [ecx+18h]
		jnz	short loc_62B84C74

loc_62B84CE8:				; CODE XREF: silc_client_del_channel_private_keys+142j
		mov	dword ptr [ecx+18h], 0
		jmp	short loc_62B84C74
; ---------------------------------------------------------------------------
		align 4

loc_62B84CF4:				; CODE XREF: silc_client_del_channel_private_keys+68j
		mov	dword ptr [ecx+14h], 0

loc_62B84CFB:				; CODE XREF: silc_client_del_channel_private_keys+89j
		mov	esi, [ebp+arg_8]
		mov	dword ptr [esi+154h], 0
		mov	eax, [esi+158h]
		test	eax, eax
		jz	loc_62B84DD2
		mov	[esp+58h+var_58], eax
		call	silc_cipher_get_name
		mov	[esi+138h], eax
		mov	edx, [ebp+arg_8]
		mov	eax, [edx+160h]
		test	eax, eax
		jz	loc_62B84DF0

loc_62B84D35:				; CODE XREF: silc_client_del_channel_private_keys+2BAj
		mov	[esp+58h+var_58], eax
		call	silc_hmac_get_name
		mov	ecx, [ebp+arg_8]
		mov	[ecx+13Ch], eax

loc_62B84D46:				; CODE XREF: silc_client_del_channel_private_keys+2CDj
		mov	esi, [ebp+arg_8]
		mov	edi, [esi+150h]
		test	edi, edi
		jz	short loc_62B84DBB
		mov	ebx, [edi]
		mov	[edi+8], ebx
		and	byte ptr [edi+10h], 0FDh
		test	ebx, ebx
		jz	short loc_62B84DB3

loc_62B84D60:				; CODE XREF: silc_client_del_channel_private_keys+281j
		test	byte ptr [edi+10h], 2
		jz	loc_62B84E04
		movzx	eax, word ptr [edi+0Eh]
		mov	eax, [ebx+eax]

loc_62B84D71:				; CODE XREF: silc_client_del_channel_private_keys+2DBj
		mov	[edi+8], eax
		mov	eax, [edi]
		test	eax, eax
		jz	short loc_62B84D9B
		cmp	ebx, eax
		jz	loc_62B84E6A
		movzx	esi, word ptr [edi+0Ch]
		jmp	short loc_62B84D92
; ---------------------------------------------------------------------------

loc_62B84D88:				; CODE XREF: silc_client_del_channel_private_keys+269j
		cmp	ebx, ecx
		jz	loc_62B84E10
		mov	eax, ecx

loc_62B84D92:				; CODE XREF: silc_client_del_channel_private_keys+256j
		lea	edx, [eax+esi]
		mov	ecx, [edx]
		test	ecx, ecx
		jnz	short loc_62B84D88

loc_62B84D9B:				; CODE XREF: silc_client_del_channel_private_keys+248j
		cmp	ebx, [edi+4]
		jz	loc_62B84E41

loc_62B84DA4:				; CODE XREF: silc_client_del_channel_private_keys+30Bj
					; silc_client_del_channel_private_keys+314j
		mov	[esp+58h+var_58], ebx
		call	silc_free
		mov	ebx, [edi+8]
		test	ebx, ebx
		jnz	short loc_62B84D60

loc_62B84DB3:				; CODE XREF: silc_client_del_channel_private_keys+22Ej
		mov	[esp+58h+var_58], edi
		call	silc_free

loc_62B84DBB:				; CODE XREF: silc_client_del_channel_private_keys+221j
		mov	ebx, [ebp+arg_8]
		mov	dword ptr [ebx+150h], 0
		mov	al, 1
		add	esp, 4Ch
		pop	ebx
		pop	esi
		pop	edi
		leave
		retn
; ---------------------------------------------------------------------------

loc_62B84DD2:				; CODE XREF: silc_client_del_channel_private_keys+1E0j
		mov	eax, [ebp+arg_8]
		mov	dword ptr [eax+138h], 0
		mov	edx, [ebp+arg_8]
		mov	eax, [edx+160h]
		test	eax, eax
		jnz	loc_62B84D35

loc_62B84DF0:				; CODE XREF: silc_client_del_channel_private_keys+1FFj
		mov	ebx, [ebp+arg_8]
		mov	dword ptr [ebx+13Ch], 0
		jmp	loc_62B84D46
; ---------------------------------------------------------------------------
		align 4

loc_62B84E04:				; CODE XREF: silc_client_del_channel_private_keys+234j
		movzx	eax, word ptr [edi+0Ch]
		mov	eax, [ebx+eax]
		jmp	loc_62B84D71
; ---------------------------------------------------------------------------

loc_62B84E10:				; CODE XREF: silc_client_del_channel_private_keys+25Aj
		mov	[ebp+var_20], edx

loc_62B84E13:				; CODE XREF: silc_client_del_channel_private_keys+343j
		mov	ecx, [ebx+esi]
		mov	edx, [ebp+var_20]
		mov	[edx], ecx
		test	ecx, ecx
		jz	short loc_62B84E2F
		test	byte ptr [edi+10h], 1
		jz	short loc_62B84E2F
		movzx	esi, word ptr [edi+0Eh]
		mov	edx, [ebx+esi]
		mov	[ecx+esi], edx

loc_62B84E2F:				; CODE XREF: silc_client_del_channel_private_keys+2EDj
					; silc_client_del_channel_private_keys+2F3j
		cmp	ebx, [edi+8]
		jz	short loc_62B84E49

loc_62B84E34:				; CODE XREF: silc_client_del_channel_private_keys+321j
		sub	dword ptr [edi+10h], 4
		cmp	ebx, [edi+4]
		jnz	loc_62B84DA4

loc_62B84E41:				; CODE XREF: silc_client_del_channel_private_keys+26Ej
		mov	[edi+4], eax
		jmp	loc_62B84DA4
; ---------------------------------------------------------------------------

loc_62B84E49:				; CODE XREF: silc_client_del_channel_private_keys+302j
		mov	ecx, [ebp+var_20]
		mov	edx, [ecx]
		mov	[edi+8], edx
		jmp	short loc_62B84E34
; ---------------------------------------------------------------------------

loc_62B84E53:				; CODE XREF: silc_client_del_channel_private_keys+191j
		mov	ebx, [ebp+var_2C]
		mov	edx, [ebx]
		mov	[ecx+8], edx
		jmp	loc_62B84CC7
; ---------------------------------------------------------------------------

loc_62B84E60:				; CODE XREF: silc_client_del_channel_private_keys+Ej
					; silc_client_del_channel_private_keys+19j ...
		xor	eax, eax
		add	esp, 4Ch
		pop	ebx
		pop	esi
		pop	edi
		leave
		retn
; ---------------------------------------------------------------------------

loc_62B84E6A:				; CODE XREF: silc_client_del_channel_private_keys+24Cj
		movzx	esi, word ptr [edi+0Ch]
		mov	[ebp+var_20], edi
		xor	eax, eax
		jmp	short loc_62B84E13
; ---------------------------------------------------------------------------

loc_62B84E75:				; CODE XREF: silc_client_del_channel_private_keys+107j
		mov	[ebp+var_2C], ecx
		movzx	ebx, word ptr [ecx+0Ch]
		mov	[ebp+var_1C], ebx
		mov	[ebp+var_3C], 0
		jmp	loc_62B84C99
silc_client_del_channel_private_keys endp

; ---------------------------------------------------------------------------
		align 4
; Exported entry 198. silc_client_save_channel_key_rekey

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public silc_client_save_channel_key_rekey
silc_client_save_channel_key_rekey proc	near ; DATA XREF: silc_client_save_channel_key+1A5o

var_58		= dword	ptr -58h
var_3C		= dword	ptr -3Ch
var_2C		= dword	ptr -2Ch
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
arg_0		= dword	ptr  8
arg_10		= dword	ptr  18h

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		sub	esp, 4Ch
		mov	eax, [ebp+arg_10]
		mov	[ebp+var_1C], eax
		mov	eax, [eax+148h]
		test	eax, eax
		jz	loc_62B84F3C
		mov	edx, [eax]
		mov	[eax+8], edx
		and	byte ptr [eax+10h], 0FDh
		mov	dword ptr [eax+18h], 0
		mov	dword ptr [eax+14h], 0
		mov	esi, [ebp+var_1C]
		mov	ecx, [esi+148h]
		mov	eax, [ecx+14h]
		mov	[ecx+18h], eax
		mov	eax, [ecx+8]
		test	eax, eax
		jz	loc_62B85130
		test	byte ptr [ecx+10h], 2
		jnz	loc_62B84FF4
		movzx	edx, word ptr [ecx+0Ch]
		mov	edx, [eax+edx]

loc_62B84EEB:				; CODE XREF: silc_client_save_channel_key_rekey+16Fj
		mov	[ecx+8], edx
		mov	[ecx+14h], eax
		mov	eax, [eax]
		mov	[ebp+var_20], eax
		test	eax, eax
		jz	short loc_62B84F3C
		mov	esi, [ecx]
		mov	eax, esi
		mov	[ecx+8], esi
		and	byte ptr [ecx+10h], 0FDh
		xor	ebx, ebx
		mov	edi, [ebp+var_20]
		test	eax, eax
		jz	short loc_62B84F30
		xchg	ax, ax

loc_62B84F10:				; CODE XREF: silc_client_save_channel_key_rekey+A2j
		test	bl, bl
		jz	loc_62B85060
		movzx	edx, word ptr [ecx+0Eh]
		mov	edx, [eax+edx]
		mov	[ecx+8], edx
		cmp	edi, [eax]
		jz	loc_62B85072

loc_62B84F2A:				; CODE XREF: silc_client_save_channel_key_rekey+1E0j
		mov	eax, edx
		test	eax, eax
		jnz	short loc_62B84F10

loc_62B84F30:				; CODE XREF: silc_client_save_channel_key_rekey+80j
		mov	edi, [ebp+var_20]
		mov	[esp+58h+var_58], edi
		call	silc_cipher_free
		nop

loc_62B84F3C:				; CODE XREF: silc_client_save_channel_key_rekey+17j
					; silc_client_save_channel_key_rekey+6Cj ...
		mov	edx, [ebp+var_1C]
		mov	eax, [edx+14Ch]
		test	eax, eax
		jz	loc_62B84FDF
		mov	edx, [eax]
		mov	[eax+8], edx
		and	byte ptr [eax+10h], 0FDh
		mov	dword ptr [eax+18h], 0
		mov	dword ptr [eax+14h], 0
		mov	esi, [ebp+var_1C]
		mov	ecx, [esi+14Ch]
		mov	eax, [ecx+14h]
		mov	[ecx+18h], eax
		mov	eax, [ecx+8]
		test	eax, eax
		jz	short loc_62B84FD8
		test	byte ptr [ecx+10h], 2
		jnz	short loc_62B84FE8
		movzx	edx, word ptr [ecx+0Ch]
		mov	edx, [eax+edx]

loc_62B84F87:				; CODE XREF: silc_client_save_channel_key_rekey+163j
		mov	[ecx+8], edx
		mov	[ecx+14h], eax
		mov	eax, [eax]
		mov	[ebp+var_1C], eax
		test	eax, eax
		jz	short loc_62B84FDF
		mov	esi, [ecx]
		mov	eax, esi
		mov	[ecx+8], esi
		and	byte ptr [ecx+10h], 0FDh
		xor	ebx, ebx
		mov	edi, [ebp+var_1C]
		test	eax, eax
		jz	short loc_62B84FC4
		xchg	ax, ax

loc_62B84FAC:				; CODE XREF: silc_client_save_channel_key_rekey+136j
		test	bl, bl
		jz	short loc_62B85000
		movzx	edx, word ptr [ecx+0Eh]
		mov	edx, [eax+edx]
		mov	[ecx+8], edx
		cmp	edi, [eax]
		jz	short loc_62B8500E

loc_62B84FBE:				; CODE XREF: silc_client_save_channel_key_rekey+180j
		mov	eax, edx
		test	eax, eax
		jnz	short loc_62B84FAC

loc_62B84FC4:				; CODE XREF: silc_client_save_channel_key_rekey+11Cj
					; silc_client_save_channel_key_rekey+1CEj
		mov	edi, [ebp+var_1C]
		mov	[ebp+arg_0], edi
		add	esp, 4Ch
		pop	ebx
		pop	esi
		pop	edi
		leave
		jmp	silc_hmac_free
; ---------------------------------------------------------------------------
		align 4

loc_62B84FD8:				; CODE XREF: silc_client_save_channel_key_rekey+ECj
		mov	dword ptr [ecx+14h], 0

loc_62B84FDF:				; CODE XREF: silc_client_save_channel_key_rekey+BBj
					; silc_client_save_channel_key_rekey+108j
		add	esp, 4Ch
		pop	ebx
		pop	esi
		pop	edi
		leave
		retn
; ---------------------------------------------------------------------------
		align 4

loc_62B84FE8:				; CODE XREF: silc_client_save_channel_key_rekey+F2j
		movzx	edx, word ptr [ecx+0Eh]
		mov	edx, [eax+edx]
		jmp	short loc_62B84F87
; ---------------------------------------------------------------------------
		align 4

loc_62B84FF4:				; CODE XREF: silc_client_save_channel_key_rekey+52j
		movzx	edx, word ptr [ecx+0Eh]
		mov	edx, [eax+edx]
		jmp	loc_62B84EEB
; ---------------------------------------------------------------------------

loc_62B85000:				; CODE XREF: silc_client_save_channel_key_rekey+122j
		movzx	edx, word ptr [ecx+0Ch]
		mov	edx, [eax+edx]
		mov	[ecx+8], edx
		cmp	edi, [eax]
		jnz	short loc_62B84FBE

loc_62B8500E:				; CODE XREF: silc_client_save_channel_key_rekey+130j
		mov	ebx, esi
		test	esi, esi
		jz	short loc_62B85037
		cmp	eax, esi
		jz	loc_62B85193
		movzx	edi, word ptr [ecx+0Ch]
		jmp	short loc_62B8502E
; ---------------------------------------------------------------------------
		align 4

loc_62B85024:				; CODE XREF: silc_client_save_channel_key_rekey+1A9j
		cmp	eax, edx
		jz	loc_62B850CC
		mov	ebx, edx

loc_62B8502E:				; CODE XREF: silc_client_save_channel_key_rekey+194j
		lea	esi, [ebx+edi]
		mov	edx, [esi]
		test	edx, edx
		jnz	short loc_62B85024

loc_62B85037:				; CODE XREF: silc_client_save_channel_key_rekey+186j
					; silc_client_save_channel_key_rekey+262j
		cmp	eax, [ecx+4]
		jz	loc_62B85160

loc_62B85040:				; CODE XREF: silc_client_save_channel_key_rekey+2D7j
		cmp	eax, [ecx+14h]
		jz	loc_62B85154

loc_62B85049:				; CODE XREF: silc_client_save_channel_key_rekey+2CFj
		cmp	eax, [ecx+18h]
		jz	loc_62B8513C

loc_62B85052:				; CODE XREF: silc_client_save_channel_key_rekey+2B7j
		mov	[esp+58h+var_58], eax
		call	silc_free
		jmp	loc_62B84FC4
; ---------------------------------------------------------------------------
		align 10h

loc_62B85060:				; CODE XREF: silc_client_save_channel_key_rekey+86j
		movzx	edx, word ptr [ecx+0Ch]
		mov	edx, [eax+edx]
		mov	[ecx+8], edx
		cmp	edi, [eax]
		jnz	loc_62B84F2A

loc_62B85072:				; CODE XREF: silc_client_save_channel_key_rekey+98j
		mov	ebx, esi
		test	esi, esi
		jz	short loc_62B85097
		cmp	eax, esi
		jz	loc_62B851A1
		movzx	edi, word ptr [ecx+0Ch]
		jmp	short loc_62B8508E
; ---------------------------------------------------------------------------
		align 4

loc_62B85088:				; CODE XREF: silc_client_save_channel_key_rekey+209j
		cmp	eax, edx
		jz	short loc_62B85100
		mov	ebx, edx

loc_62B8508E:				; CODE XREF: silc_client_save_channel_key_rekey+1F8j
		lea	esi, [ebx+edi]
		mov	edx, [esi]
		test	edx, edx
		jnz	short loc_62B85088

loc_62B85097:				; CODE XREF: silc_client_save_channel_key_rekey+1EAj
					; silc_client_save_channel_key_rekey+29Cj
		cmp	eax, [ecx+4]
		jz	loc_62B85174

loc_62B850A0:				; CODE XREF: silc_client_save_channel_key_rekey+2EBj
		cmp	eax, [ecx+14h]
		jz	loc_62B85168

loc_62B850A9:				; CODE XREF: silc_client_save_channel_key_rekey+2E3j
		cmp	eax, [ecx+18h]
		jz	loc_62B85148

loc_62B850B2:				; CODE XREF: silc_client_save_channel_key_rekey+2C3j
		mov	[esp+58h+var_58], eax
		call	silc_free
		mov	edi, [ebp+var_20]
		mov	[esp+58h+var_58], edi
		call	silc_cipher_free
		jmp	loc_62B84F3C
; ---------------------------------------------------------------------------
		align 4

loc_62B850CC:				; CODE XREF: silc_client_save_channel_key_rekey+19Aj
		mov	[ebp+var_2C], esi

loc_62B850CF:				; CODE XREF: silc_client_save_channel_key_rekey+310j
		mov	edx, [eax+edi]
		mov	edi, [ebp+var_2C]
		mov	[edi], edx
		test	edx, edx
		jz	short loc_62B850E1
		test	byte ptr [ecx+10h], 1
		jnz	short loc_62B850F4

loc_62B850E1:				; CODE XREF: silc_client_save_channel_key_rekey+24Dj
					; silc_client_save_channel_key_rekey+272j
		cmp	eax, [ecx+8]
		jz	loc_62B8517C

loc_62B850EA:				; CODE XREF: silc_client_save_channel_key_rekey+2F8j
		sub	dword ptr [ecx+10h], 4
		jmp	loc_62B85037
; ---------------------------------------------------------------------------
		align 4

loc_62B850F4:				; CODE XREF: silc_client_save_channel_key_rekey+253j
		movzx	esi, word ptr [ecx+0Eh]
		mov	edi, [eax+esi]
		mov	[edx+esi], edi
		jmp	short loc_62B850E1
; ---------------------------------------------------------------------------

loc_62B85100:				; CODE XREF: silc_client_save_channel_key_rekey+1FEj
		mov	[ebp+var_3C], esi

loc_62B85103:				; CODE XREF: silc_client_save_channel_key_rekey+31Ej
		mov	edx, [eax+edi]
		mov	edi, [ebp+var_3C]
		mov	[edi], edx
		test	edx, edx
		jz	short loc_62B8511F
		test	byte ptr [ecx+10h], 1
		jz	short loc_62B8511F
		movzx	esi, word ptr [ecx+0Eh]
		mov	edi, [eax+esi]
		mov	[edx+esi], edi

loc_62B8511F:				; CODE XREF: silc_client_save_channel_key_rekey+281j
					; silc_client_save_channel_key_rekey+287j
		cmp	eax, [ecx+8]
		jz	short loc_62B85189

loc_62B85124:				; CODE XREF: silc_client_save_channel_key_rekey+305j
		sub	dword ptr [ecx+10h], 4
		jmp	loc_62B85097
; ---------------------------------------------------------------------------
		align 10h

loc_62B85130:				; CODE XREF: silc_client_save_channel_key_rekey+48j
		mov	dword ptr [ecx+14h], 0
		jmp	loc_62B84F3C
; ---------------------------------------------------------------------------

loc_62B8513C:				; CODE XREF: silc_client_save_channel_key_rekey+1C0j
		mov	dword ptr [ecx+18h], 0
		jmp	loc_62B85052
; ---------------------------------------------------------------------------

loc_62B85148:				; CODE XREF: silc_client_save_channel_key_rekey+220j
		mov	dword ptr [ecx+18h], 0
		jmp	loc_62B850B2
; ---------------------------------------------------------------------------

loc_62B85154:				; CODE XREF: silc_client_save_channel_key_rekey+1B7j
		mov	dword ptr [ecx+14h], 0
		jmp	loc_62B85049
; ---------------------------------------------------------------------------

loc_62B85160:				; CODE XREF: silc_client_save_channel_key_rekey+1AEj
		mov	[ecx+4], ebx
		jmp	loc_62B85040
; ---------------------------------------------------------------------------

loc_62B85168:				; CODE XREF: silc_client_save_channel_key_rekey+217j
		mov	dword ptr [ecx+14h], 0
		jmp	loc_62B850A9
; ---------------------------------------------------------------------------

loc_62B85174:				; CODE XREF: silc_client_save_channel_key_rekey+20Ej
		mov	[ecx+4], ebx
		jmp	loc_62B850A0
; ---------------------------------------------------------------------------

loc_62B8517C:				; CODE XREF: silc_client_save_channel_key_rekey+258j
		mov	esi, [ebp+var_2C]
		mov	edx, [esi]
		mov	[ecx+8], edx
		jmp	loc_62B850EA
; ---------------------------------------------------------------------------

loc_62B85189:				; CODE XREF: silc_client_save_channel_key_rekey+296j
		mov	esi, [ebp+var_3C]
		mov	edx, [esi]
		mov	[ecx+8], edx
		jmp	short loc_62B85124
; ---------------------------------------------------------------------------

loc_62B85193:				; CODE XREF: silc_client_save_channel_key_rekey+18Aj
		mov	[ebp+var_2C], ecx
		movzx	edi, word ptr [ecx+0Ch]
		xor	ebx, ebx
		jmp	loc_62B850CF
; ---------------------------------------------------------------------------

loc_62B851A1:				; CODE XREF: silc_client_save_channel_key_rekey+1EEj
		mov	[ebp+var_3C], ecx
		movzx	edi, word ptr [ecx+0Ch]
		xor	ebx, ebx
		jmp	loc_62B85103
silc_client_save_channel_key_rekey endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 104. silc_client_del_channel_private_key

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public silc_client_del_channel_private_key
silc_client_del_channel_private_key proc near

var_58		= dword	ptr -58h
var_3C		= dword	ptr -3Ch
var_2C		= dword	ptr -2Ch
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		sub	esp, 4Ch
		mov	ebx, [ebp+arg_C]
		mov	ecx, [ebp+arg_0]
		test	ecx, ecx
		jz	loc_62B854E7
		mov	edx, [ebp+arg_4]
		test	edx, edx
		jz	loc_62B854E7
		mov	eax, [ebp+arg_8]
		test	eax, eax
		jz	loc_62B854E7
		mov	edx, [ebp+arg_8]
		mov	eax, [edx+150h]
		test	eax, eax
		jz	loc_62B854E7
		mov	edx, [eax]
		mov	[eax+8], edx
		and	byte ptr [eax+10h], 0FDh
		mov	dword ptr [eax+18h], 0
		mov	dword ptr [eax+14h], 0
		mov	ecx, [ebp+arg_8]
		mov	eax, [ecx+150h]
		jmp	short loc_62B8522B
; ---------------------------------------------------------------------------

loc_62B85210:				; CODE XREF: silc_client_del_channel_private_key+8Cj
		movzx	ecx, word ptr [eax+0Eh]
		mov	ecx, [edx+ecx]

loc_62B85217:				; CODE XREF: silc_client_del_channel_private_key+95j
		mov	[eax+8], ecx
		mov	[eax+14h], edx
		mov	edx, [edx]
		test	edx, edx
		jz	loc_62B854E7
		cmp	edx, ebx
		jz	short loc_62B8525C

loc_62B8522B:				; CODE XREF: silc_client_del_channel_private_key+5Ej
		mov	edx, [eax+14h]
		mov	[eax+18h], edx
		mov	edx, [eax+8]
		test	edx, edx
		jz	short loc_62B85248
		test	byte ptr [eax+10h], 2
		jnz	short loc_62B85210
		movzx	ecx, word ptr [eax+0Ch]
		mov	ecx, [edx+ecx]
		jmp	short loc_62B85217
; ---------------------------------------------------------------------------
		align 4

loc_62B85248:				; CODE XREF: silc_client_del_channel_private_key+86j
		mov	dword ptr [eax+14h], 0
		xor	eax, eax

loc_62B85251:				; CODE XREF: silc_client_del_channel_private_key+339j
		add	esp, 4Ch
		pop	ebx
		pop	esi
		pop	edi
		leave
		retn
; ---------------------------------------------------------------------------
		align 4

loc_62B8525C:				; CODE XREF: silc_client_del_channel_private_key+79j
		mov	esi, [ebp+arg_8]
		cmp	ebx, [esi+154h]
		jz	loc_62B85487

loc_62B8526B:				; CODE XREF: silc_client_del_channel_private_key+30Fj
		mov	edi, [eax]
		mov	edx, edi
		mov	[eax+8], edi
		and	byte ptr [eax+10h], 0FDh
		xor	esi, esi
		test	edx, edx
		jz	short loc_62B85296

loc_62B8527C:				; CODE XREF: silc_client_del_channel_private_key+E4j
		mov	ecx, esi
		test	cl, cl
		jz	short loc_62B852E4
		movzx	ecx, word ptr [eax+0Eh]
		mov	ecx, [edx+ecx]
		mov	[eax+8], ecx
		cmp	ebx, [edx]
		jz	short loc_62B852F2

loc_62B85290:				; CODE XREF: silc_client_del_channel_private_key+140j
		mov	edx, ecx
		test	edx, edx
		jnz	short loc_62B8527C

loc_62B85296:				; CODE XREF: silc_client_del_channel_private_key+CAj
					; silc_client_del_channel_private_key+1A0j
		mov	eax, [ebx]
		mov	[esp+58h+var_58], eax
		call	silc_free
		mov	eax, [ebx+4]
		mov	[esp+58h+var_58], eax
		call	silc_cipher_free
		mov	eax, [ebx+8]
		mov	[esp+58h+var_58], eax
		call	silc_cipher_free
		mov	eax, [ebx+0Ch]
		mov	[esp+58h+var_58], eax
		call	silc_hmac_free
		mov	[esp+58h+var_58], ebx
		call	silc_free
		mov	esi, [ebp+arg_8]
		mov	edi, [esi+150h]
		mov	eax, [edi+10h]
		shr	eax, 2
		jz	short loc_62B85358
		mov	al, 1

loc_62B852DC:				; CODE XREF: silc_client_del_channel_private_key+216j
		add	esp, 4Ch
		pop	ebx
		pop	esi
		pop	edi
		leave
		retn
; ---------------------------------------------------------------------------

loc_62B852E4:				; CODE XREF: silc_client_del_channel_private_key+D0j
		movzx	ecx, word ptr [eax+0Ch]
		mov	ecx, [edx+ecx]
		mov	[eax+8], ecx
		cmp	ebx, [edx]
		jnz	short loc_62B85290

loc_62B852F2:				; CODE XREF: silc_client_del_channel_private_key+DEj
		mov	[ebp+var_3C], edi
		test	edi, edi
		jz	short loc_62B8532D
		cmp	edx, edi
		jz	loc_62B854D1
		movzx	ecx, word ptr [eax+0Ch]
		mov	[ebp+var_1C], ecx
		mov	esi, [ebp+var_3C]
		mov	[ebp+var_20], ebx
		mov	ebx, ecx
		jmp	short loc_62B8531E
; ---------------------------------------------------------------------------
		align 4

loc_62B85314:				; CODE XREF: silc_client_del_channel_private_key+175j
		cmp	edx, ecx
		jz	loc_62B8540C
		mov	esi, ecx

loc_62B8531E:				; CODE XREF: silc_client_del_channel_private_key+160j
		lea	edi, [esi+ebx]
		mov	ecx, [edi]
		test	ecx, ecx
		jnz	short loc_62B85314
		mov	[ebp+var_3C], esi
		mov	ebx, [ebp+var_20]

loc_62B8532D:				; CODE XREF: silc_client_del_channel_private_key+147j
					; silc_client_del_channel_private_key+297j
		cmp	edx, [eax+4]
		jz	loc_62B8547C

loc_62B85336:				; CODE XREF: silc_client_del_channel_private_key+2D2j
		cmp	edx, [eax+14h]
		jz	loc_62B85470

loc_62B8533F:				; CODE XREF: silc_client_del_channel_private_key+2C7j
		cmp	edx, [eax+18h]
		jz	loc_62B85456

loc_62B85348:				; CODE XREF: silc_client_del_channel_private_key+2ADj
		mov	[esp+58h+var_58], edx
		call	silc_free
		jmp	loc_62B85296
; ---------------------------------------------------------------------------
		align 4

loc_62B85358:				; CODE XREF: silc_client_del_channel_private_key+128j
		mov	ebx, [edi]
		mov	[edi+8], ebx
		and	byte ptr [edi+10h], 0FDh
		test	ebx, ebx
		jz	short loc_62B853AF
		lea	esi, [esi+0]

loc_62B85368:				; CODE XREF: silc_client_del_channel_private_key+1FDj
		test	byte ptr [edi+10h], 2
		jz	short loc_62B853CC
		movzx	eax, word ptr [edi+0Eh]
		mov	eax, [ebx+eax]

loc_62B85375:				; CODE XREF: silc_client_del_channel_private_key+223j
		mov	[edi+8], eax
		mov	eax, [edi]
		test	eax, eax
		jz	short loc_62B8539B
		cmp	ebx, eax
		jz	loc_62B85462
		movzx	esi, word ptr [edi+0Ch]
		jmp	short loc_62B85392
; ---------------------------------------------------------------------------

loc_62B8538C:				; CODE XREF: silc_client_del_channel_private_key+1E9j
		cmp	ebx, ecx
		jz	short loc_62B853D8
		mov	eax, ecx

loc_62B85392:				; CODE XREF: silc_client_del_channel_private_key+1DAj
		lea	edx, [eax+esi]
		mov	ecx, [edx]
		test	ecx, ecx
		jnz	short loc_62B8538C

loc_62B8539B:				; CODE XREF: silc_client_del_channel_private_key+1CCj
		cmp	ebx, [edi+4]
		jz	short loc_62B85405

loc_62B853A0:				; CODE XREF: silc_client_del_channel_private_key+253j
					; silc_client_del_channel_private_key+258j
		mov	[esp+58h+var_58], ebx
		call	silc_free
		mov	ebx, [edi+8]
		test	ebx, ebx
		jnz	short loc_62B85368

loc_62B853AF:				; CODE XREF: silc_client_del_channel_private_key+1B3j
		mov	[esp+58h+var_58], edi
		call	silc_free
		mov	esi, [ebp+arg_8]
		mov	dword ptr [esi+150h], 0
		mov	al, 1
		jmp	loc_62B852DC
; ---------------------------------------------------------------------------
		align 4

loc_62B853CC:				; CODE XREF: silc_client_del_channel_private_key+1BCj
		movzx	eax, word ptr [edi+0Ch]
		mov	eax, [ebx+eax]
		jmp	short loc_62B85375
; ---------------------------------------------------------------------------
		align 4

loc_62B853D8:				; CODE XREF: silc_client_del_channel_private_key+1DEj
		mov	[ebp+var_20], edx

loc_62B853DB:				; CODE XREF: silc_client_del_channel_private_key+2BBj
		mov	ecx, [ebx+esi]
		mov	edx, [ebp+var_20]
		mov	[edx], ecx
		test	ecx, ecx
		jz	short loc_62B853F7
		test	byte ptr [edi+10h], 1
		jz	short loc_62B853F7
		movzx	esi, word ptr [edi+0Eh]
		mov	edx, [ebx+esi]
		mov	[ecx+esi], edx

loc_62B853F7:				; CODE XREF: silc_client_del_channel_private_key+235j
					; silc_client_del_channel_private_key+23Bj
		cmp	ebx, [edi+8]
		jz	short loc_62B8544C

loc_62B853FC:				; CODE XREF: silc_client_del_channel_private_key+2A4j
		sub	dword ptr [edi+10h], 4
		cmp	ebx, [edi+4]
		jnz	short loc_62B853A0

loc_62B85405:				; CODE XREF: silc_client_del_channel_private_key+1EEj
		mov	[edi+4], eax
		jmp	short loc_62B853A0
; ---------------------------------------------------------------------------
		align 4

loc_62B8540C:				; CODE XREF: silc_client_del_channel_private_key+166j
		mov	[ebp+var_2C], edi
		mov	[ebp+var_3C], esi
		mov	ebx, [ebp+var_20]

loc_62B85415:				; CODE XREF: silc_client_del_channel_private_key+332j
		mov	ecx, [ebp+var_1C]
		mov	ecx, [edx+ecx]
		mov	[ebp+var_20], ecx
		mov	esi, [ebp+var_2C]
		mov	[esi], ecx
		test	ecx, ecx
		jz	short loc_62B8543A
		test	byte ptr [eax+10h], 1
		jz	short loc_62B8543A
		movzx	edi, word ptr [eax+0Eh]
		mov	ecx, [edx+edi]
		mov	esi, [ebp+var_20]
		mov	[esi+edi], ecx

loc_62B8543A:				; CODE XREF: silc_client_del_channel_private_key+275j
					; silc_client_del_channel_private_key+27Bj
		cmp	edx, [eax+8]
		jz	loc_62B854C4

loc_62B85443:				; CODE XREF: silc_client_del_channel_private_key+31Cj
		sub	dword ptr [eax+10h], 4
		jmp	loc_62B8532D
; ---------------------------------------------------------------------------

loc_62B8544C:				; CODE XREF: silc_client_del_channel_private_key+24Aj
		mov	ecx, [ebp+var_20]
		mov	edx, [ecx]
		mov	[edi+8], edx
		jmp	short loc_62B853FC
; ---------------------------------------------------------------------------

loc_62B85456:				; CODE XREF: silc_client_del_channel_private_key+192j
		mov	dword ptr [eax+18h], 0
		jmp	loc_62B85348
; ---------------------------------------------------------------------------

loc_62B85462:				; CODE XREF: silc_client_del_channel_private_key+1D0j
		movzx	esi, word ptr [edi+0Ch]
		mov	[ebp+var_20], edi
		xor	eax, eax
		jmp	loc_62B853DB
; ---------------------------------------------------------------------------

loc_62B85470:				; CODE XREF: silc_client_del_channel_private_key+189j
		mov	dword ptr [eax+14h], 0
		jmp	loc_62B8533F
; ---------------------------------------------------------------------------

loc_62B8547C:				; CODE XREF: silc_client_del_channel_private_key+180j
		mov	esi, [ebp+var_3C]
		mov	[eax+4], esi
		jmp	loc_62B85336
; ---------------------------------------------------------------------------

loc_62B85487:				; CODE XREF: silc_client_del_channel_private_key+B5j
		mov	dword ptr [esi+154h], 0
		mov	eax, [esi+158h]
		mov	[esp+58h+var_58], eax
		call	silc_cipher_get_name
		mov	[esi+138h], eax
		mov	eax, [esi+160h]
		mov	[esp+58h+var_58], eax
		call	silc_hmac_get_name
		mov	[esi+13Ch], eax
		mov	eax, [esi+150h]
		jmp	loc_62B8526B
; ---------------------------------------------------------------------------

loc_62B854C4:				; CODE XREF: silc_client_del_channel_private_key+28Dj
		mov	edi, [ebp+var_2C]
		mov	ecx, [edi]
		mov	[eax+8], ecx
		jmp	loc_62B85443
; ---------------------------------------------------------------------------

loc_62B854D1:				; CODE XREF: silc_client_del_channel_private_key+14Bj
		mov	[ebp+var_2C], eax
		movzx	edi, word ptr [eax+0Ch]
		mov	[ebp+var_1C], edi
		mov	[ebp+var_3C], 0
		jmp	loc_62B85415
; ---------------------------------------------------------------------------

loc_62B854E7:				; CODE XREF: silc_client_del_channel_private_key+11j
					; silc_client_del_channel_private_key+1Cj ...
		xor	eax, eax
		jmp	loc_62B85251
silc_client_del_channel_private_key endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  20. silc_client_channel_save_public_keys

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public silc_client_channel_save_public_keys
silc_client_channel_save_public_keys proc near
					; CODE XREF: silc_client_notify_cmode_change+4FDp
					; silc_client_notify_cmode_change+706p	...

var_78		= dword	ptr -78h
var_74		= dword	ptr -74h
var_70		= dword	ptr -70h
var_4C		= dword	ptr -4Ch
var_3C		= dword	ptr -3Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= byte ptr  14h

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		sub	esp, 6Ch
		cmp	[ebp+arg_C], 0
		jz	loc_62B85748
		mov	edx, [ebp+arg_0]
		mov	eax, [edx+110h]
		test	eax, eax
		jz	loc_62B85B07
		mov	edx, [eax]
		mov	[eax+8], edx
		and	byte ptr [eax+10h], 0FDh
		mov	dword ptr [eax+18h], 0
		mov	dword ptr [eax+14h], 0
		nop

loc_62B8552C:				; CODE XREF: silc_client_channel_save_public_keys+19Aj
		mov	ecx, [ebp+arg_0]
		mov	ebx, [ecx+110h]
		mov	ecx, ebx
		mov	eax, [ecx+14h]
		mov	[ecx+18h], eax
		mov	eax, [ecx+8]
		test	eax, eax
		jz	short loc_62B855B0

loc_62B85544:				; CODE XREF: silc_client_channel_save_public_keys+BEj
		test	byte ptr [ecx+10h], 2
		jz	loc_62B85690
		movzx	edx, word ptr [ecx+0Eh]
		mov	edx, [eax+edx]

loc_62B85555:				; CODE XREF: silc_client_channel_save_public_keys+1A7j
		mov	[ecx+8], edx
		mov	[ecx+14h], eax
		mov	esi, [eax]
		test	esi, esi
		jz	short loc_62B855B7
		mov	edi, [ebx]
		mov	[ebp+var_1C], edi
		mov	eax, edi
		mov	[ebx+8], edi
		and	byte ptr [ebx+10h], 0FDh
		xor	edi, edi
		test	eax, eax
		jz	short loc_62B8559A
		lea	esi, [esi+0]

loc_62B85578:				; CODE XREF: silc_client_channel_save_public_keys+A8j
		mov	edx, edi
		test	dl, dl
		jz	loc_62B8563C
		movzx	edx, word ptr [ebx+0Eh]
		mov	edx, [eax+edx]
		mov	[ebx+8], edx
		cmp	esi, [eax]
		jz	loc_62B8564E

loc_62B85594:				; CODE XREF: silc_client_channel_save_public_keys+158j
		mov	eax, edx
		test	eax, eax
		jnz	short loc_62B85578

loc_62B8559A:				; CODE XREF: silc_client_channel_save_public_keys+83j
		mov	eax, [ebp+arg_0]
		mov	ebx, [eax+110h]
		mov	eax, [ecx+14h]
		mov	[ecx+18h], eax
		mov	eax, [ecx+8]
		test	eax, eax
		jnz	short loc_62B85544

loc_62B855B0:				; CODE XREF: silc_client_channel_save_public_keys+52j
		mov	dword ptr [ecx+14h], 0

loc_62B855B7:				; CODE XREF: silc_client_channel_save_public_keys+6Fj
		test	ebx, ebx
		jz	short loc_62B85623
		mov	esi, [ebx]
		mov	[ebx+8], esi
		and	byte ptr [ebx+10h], 0FDh
		test	esi, esi
		jz	short loc_62B8561B

loc_62B855C8:				; CODE XREF: silc_client_channel_save_public_keys+129j
		test	byte ptr [ebx+10h], 2
		jz	loc_62B856EC
		movzx	eax, word ptr [ebx+0Eh]
		mov	eax, [esi+eax]

loc_62B855D9:				; CODE XREF: silc_client_channel_save_public_keys+203j
		mov	[ebx+8], eax
		mov	eax, [ebx]
		test	eax, eax
		jz	short loc_62B85603
		cmp	esi, eax
		jz	loc_62B85A16
		movzx	edi, word ptr [ebx+0Ch]
		jmp	short loc_62B855FA
; ---------------------------------------------------------------------------

loc_62B855F0:				; CODE XREF: silc_client_channel_save_public_keys+111j
		cmp	esi, ecx
		jz	loc_62B856F8
		mov	eax, ecx

loc_62B855FA:				; CODE XREF: silc_client_channel_save_public_keys+FEj
		lea	edx, [eax+edi]
		mov	ecx, [edx]
		test	ecx, ecx
		jnz	short loc_62B855F0

loc_62B85603:				; CODE XREF: silc_client_channel_save_public_keys+F0j
		cmp	esi, [ebx+4]
		jz	loc_62B85729

loc_62B8560C:				; CODE XREF: silc_client_channel_save_public_keys+233j
					; silc_client_channel_save_public_keys+23Cj
		mov	[esp+78h+var_78], esi
		call	silc_free
		mov	esi, [ebx+8]
		test	esi, esi
		jnz	short loc_62B855C8

loc_62B8561B:				; CODE XREF: silc_client_channel_save_public_keys+D6j
		mov	[esp+78h+var_78], ebx
		call	silc_free

loc_62B85623:				; CODE XREF: silc_client_channel_save_public_keys+C9j
		mov	ebx, [ebp+arg_0]
		mov	dword ptr [ebx+110h], 0
		mov	al, 1

loc_62B85632:				; CODE XREF: silc_client_channel_save_public_keys+6F8j
		add	esp, 6Ch
		pop	ebx
		pop	esi
		pop	edi
		leave
		retn
; ---------------------------------------------------------------------------
		align 4

loc_62B8563C:				; CODE XREF: silc_client_channel_save_public_keys+8Cj
		movzx	edx, word ptr [ebx+0Ch]
		mov	edx, [eax+edx]
		mov	[ebx+8], edx
		cmp	esi, [eax]
		jnz	loc_62B85594

loc_62B8564E:				; CODE XREF: silc_client_channel_save_public_keys+9Ej
		mov	ecx, [ebp+var_1C]
		test	ecx, ecx
		jz	short loc_62B85673
		cmp	eax, ecx
		jz	loc_62B85A24
		movzx	edi, word ptr [ebx+0Ch]
		jmp	short loc_62B8566A
; ---------------------------------------------------------------------------
		align 4

loc_62B85664:				; CODE XREF: silc_client_channel_save_public_keys+181j
		cmp	eax, edx
		jz	short loc_62B8569C
		mov	ecx, edx

loc_62B8566A:				; CODE XREF: silc_client_channel_save_public_keys+171j
		lea	esi, [ecx+edi]
		mov	edx, [esi]
		test	edx, edx
		jnz	short loc_62B85664

loc_62B85673:				; CODE XREF: silc_client_channel_save_public_keys+163j
		cmp	eax, [ebx+4]
		jz	short loc_62B856C9

loc_62B85678:				; CODE XREF: silc_client_channel_save_public_keys+1D7j
		cmp	eax, [ebx+14h]
		jz	short loc_62B856D4

loc_62B8567D:				; CODE XREF: silc_client_channel_save_public_keys+1DFj
		cmp	eax, [ebx+18h]
		jz	short loc_62B856E0

loc_62B85682:				; CODE XREF: silc_client_channel_save_public_keys+1EEj
					; silc_client_channel_save_public_keys+1F7j
		mov	[esp+78h+var_78], eax
		call	silc_free
		jmp	loc_62B8552C
; ---------------------------------------------------------------------------
		align 10h

loc_62B85690:				; CODE XREF: silc_client_channel_save_public_keys+58j
		movzx	edx, word ptr [ecx+0Ch]
		mov	edx, [eax+edx]
		jmp	loc_62B85555
; ---------------------------------------------------------------------------

loc_62B8569C:				; CODE XREF: silc_client_channel_save_public_keys+176j
		mov	[ebp+var_20], esi

loc_62B8569F:				; CODE XREF: silc_client_channel_save_public_keys+53Dj
		mov	edx, [eax+edi]
		mov	esi, [ebp+var_20]
		mov	[esi], edx
		test	edx, edx
		jz	short loc_62B856BB
		test	byte ptr [ebx+10h], 1
		jz	short loc_62B856BB
		movzx	edi, word ptr [ebx+0Eh]
		mov	esi, [eax+edi]
		mov	[edx+edi], esi

loc_62B856BB:				; CODE XREF: silc_client_channel_save_public_keys+1B9j
					; silc_client_channel_save_public_keys+1BFj
		cmp	eax, [ebx+8]
		jz	short loc_62B8573B

loc_62B856C0:				; CODE XREF: silc_client_channel_save_public_keys+253j
		sub	dword ptr [ebx+10h], 4
		cmp	eax, [ebx+4]
		jnz	short loc_62B85678

loc_62B856C9:				; CODE XREF: silc_client_channel_save_public_keys+186j
		mov	[ebx+4], ecx
		cmp	eax, [ebx+14h]
		jnz	short loc_62B8567D
		lea	esi, [esi+0]

loc_62B856D4:				; CODE XREF: silc_client_channel_save_public_keys+18Bj
		mov	dword ptr [ebx+14h], 0
		cmp	eax, [ebx+18h]
		jnz	short loc_62B85682

loc_62B856E0:				; CODE XREF: silc_client_channel_save_public_keys+190j
		mov	dword ptr [ebx+18h], 0
		jmp	short loc_62B85682
; ---------------------------------------------------------------------------
		align 4

loc_62B856EC:				; CODE XREF: silc_client_channel_save_public_keys+DCj
		movzx	eax, word ptr [ebx+0Ch]
		mov	eax, [esi+eax]
		jmp	loc_62B855D9
; ---------------------------------------------------------------------------

loc_62B856F8:				; CODE XREF: silc_client_channel_save_public_keys+102j
		mov	[ebp+var_20], edx

loc_62B856FB:				; CODE XREF: silc_client_channel_save_public_keys+52Fj
		mov	ecx, [esi+edi]
		mov	edi, [ebp+var_20]
		mov	[edi], ecx
		test	ecx, ecx
		jz	short loc_62B85717
		test	byte ptr [ebx+10h], 1
		jz	short loc_62B85717
		movzx	edx, word ptr [ebx+0Eh]
		mov	edi, [esi+edx]
		mov	[ecx+edx], edi

loc_62B85717:				; CODE XREF: silc_client_channel_save_public_keys+215j
					; silc_client_channel_save_public_keys+21Bj
		cmp	esi, [ebx+8]
		jz	short loc_62B85731

loc_62B8571C:				; CODE XREF: silc_client_channel_save_public_keys+249j
		sub	dword ptr [ebx+10h], 4
		cmp	esi, [ebx+4]
		jnz	loc_62B8560C

loc_62B85729:				; CODE XREF: silc_client_channel_save_public_keys+116j
		mov	[ebx+4], eax
		jmp	loc_62B8560C
; ---------------------------------------------------------------------------

loc_62B85731:				; CODE XREF: silc_client_channel_save_public_keys+22Aj
		mov	ecx, [ebp+var_20]
		mov	edx, [ecx]
		mov	[ebx+8], edx
		jmp	short loc_62B8571C
; ---------------------------------------------------------------------------

loc_62B8573B:				; CODE XREF: silc_client_channel_save_public_keys+1CEj
		mov	edi, [ebp+var_20]
		mov	edx, [edi]
		mov	[ebx+8], edx
		jmp	loc_62B856C0
; ---------------------------------------------------------------------------

loc_62B85748:				; CODE XREF: silc_client_channel_save_public_keys+Dj
		mov	[esp+78h+var_70], 1
		mov	eax, [ebp+arg_8]
		mov	[esp+78h+var_74], eax
		mov	eax, [ebp+arg_4]
		mov	[esp+78h+var_78], eax
		call	silc_argument_list_parse_decoded
		mov	ebx, eax
		test	eax, eax
		jz	loc_62B85B07
		mov	esi, [ebp+arg_0]
		mov	edi, [esi+110h]
		test	edi, edi
		jz	loc_62B85BC3

loc_62B8577D:				; CODE XREF: silc_client_channel_save_public_keys+6E0j
		mov	eax, [ebx]
		mov	[ebx+8], eax
		and	byte ptr [ebx+10h], 0FDh
		mov	dword ptr [ebx+18h], 0
		mov	dword ptr [ebx+14h], 0
		xor	eax, eax
		mov	esi, [ebp+arg_0]
		mov	[ebx+18h], eax
		mov	eax, [ebx+8]
		test	eax, eax
		jz	loc_62B8586E
		nop

loc_62B857A8:				; CODE XREF: silc_client_channel_save_public_keys+378j
		test	byte ptr [ebx+10h], 2
		jz	loc_62B859C0
		movzx	edx, word ptr [ebx+0Eh]
		mov	edx, [eax+edx]

loc_62B857B9:				; CODE XREF: silc_client_channel_save_public_keys+4D7j
		mov	[ebx+8], edx
		mov	[ebx+14h], eax
		mov	edi, [eax]
		test	edi, edi
		jz	loc_62B85875
		mov	eax, [esi+110h]
		mov	edx, [eax]
		mov	[eax+8], edx
		and	byte ptr [eax+10h], 0FDh
		mov	dword ptr [eax+18h], 0
		mov	dword ptr [eax+14h], 0
		mov	[ebp+var_1C], ebx
		jmp	short loc_62B85817
; ---------------------------------------------------------------------------
		align 4

loc_62B857EC:				; CODE XREF: silc_client_channel_save_public_keys+33Ej
		movzx	ecx, word ptr [eax+0Eh]
		mov	ecx, [edx+ecx]

loc_62B857F3:				; CODE XREF: silc_client_channel_save_public_keys+347j
		mov	[eax+8], ecx
		mov	[eax+14h], edx
		mov	ebx, [edx]
		test	ebx, ebx
		jz	loc_62B85C26
		mov	eax, [ebx]
		mov	[esp+78h+var_74], eax
		mov	eax, [edi]
		mov	[esp+78h+var_78], eax
		call	silc_pkcs_public_key_compare
		test	al, al
		jnz	short loc_62B85890

loc_62B85817:				; CODE XREF: silc_client_channel_save_public_keys+2F9j
		mov	eax, [esi+110h]
		mov	edx, [eax+14h]
		mov	[eax+18h], edx
		mov	edx, [eax+8]
		test	edx, edx
		jz	short loc_62B8583C
		test	byte ptr [eax+10h], 2
		jnz	short loc_62B857EC
		movzx	ecx, word ptr [eax+0Ch]
		mov	ecx, [edx+ecx]
		jmp	short loc_62B857F3
; ---------------------------------------------------------------------------
		align 4

loc_62B8583C:				; CODE XREF: silc_client_channel_save_public_keys+338j
		mov	ebx, [ebp+var_1C]
		mov	dword ptr [eax+14h], 0
		xor	edx, edx
		xor	ecx, ecx

loc_62B8584A:				; CODE XREF: silc_client_channel_save_public_keys+73Dj
		mov	eax, [edi+4]
		test	eax, eax
		jz	short loc_62B8589E

loc_62B85851:				; CODE XREF: silc_client_channel_save_public_keys+3ACj
		cmp	eax, 3
		jz	short loc_62B8589E

loc_62B85856:				; CODE XREF: silc_client_channel_save_public_keys+3B0j
		dec	eax
		jz	loc_62B859CC

loc_62B8585D:				; CODE XREF: silc_client_channel_save_public_keys+432j
					; silc_client_channel_save_public_keys+44Ej ...
		mov	eax, [ebx+14h]
		mov	[ebx+18h], eax
		mov	eax, [ebx+8]
		test	eax, eax
		jnz	loc_62B857A8

loc_62B8586E:				; CODE XREF: silc_client_channel_save_public_keys+2B1j
		mov	dword ptr [ebx+14h], 0

loc_62B85875:				; CODE XREF: silc_client_channel_save_public_keys+2D3j
		mov	[esp+78h+var_74], 1
		mov	[esp+78h+var_78], ebx
		call	silc_argument_list_free
		mov	al, 1
		add	esp, 6Ch
		pop	ebx
		pop	esi
		pop	edi
		leave
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_62B85890:				; CODE XREF: silc_client_channel_save_public_keys+325j
		mov	edx, ebx
		mov	ebx, [ebp+var_1C]
		mov	cl, 1
		mov	eax, [edi+4]
		test	eax, eax
		jnz	short loc_62B85851

loc_62B8589E:				; CODE XREF: silc_client_channel_save_public_keys+35Fj
					; silc_client_channel_save_public_keys+364j
		test	cl, cl
		jnz	short loc_62B85856
		mov	eax, [esi+110h]
		mov	[ebp+var_28], eax
		mov	[esp+78h+var_78], 0Ch
		call	silc_malloc
		mov	[ebp+var_24], eax
		test	eax, eax
		jz	short loc_62B85910
		mov	[eax], edi
		mov	edx, [ebp+var_28]
		mov	ecx, [edx]
		test	ecx, ecx
		jz	loc_62B85B1D
		mov	eax, [ebp+var_28]
		movzx	eax, word ptr [eax+0Ch]
		mov	[ebp+var_1C], eax
		mov	edx, [ebp+var_28]
		mov	edx, [edx+4]
		mov	ecx, [ebp+var_24]
		mov	[edx+eax], ecx

loc_62B858E3:				; CODE XREF: silc_client_channel_save_public_keys+636j
		mov	eax, [ebp+var_28]
		test	byte ptr [eax+10h], 1
		jz	short loc_62B858F9
		movzx	edx, word ptr [eax+0Eh]
		mov	ecx, [eax+4]
		mov	eax, [ebp+var_24]
		mov	[eax+edx], ecx

loc_62B858F9:				; CODE XREF: silc_client_channel_save_public_keys+3FAj
		mov	ecx, [ebp+var_24]
		mov	edx, [ebp+var_28]
		mov	[edx+4], ecx
		mov	eax, [ebp+var_1C]
		mov	dword ptr [ecx+eax], 0
		add	dword ptr [edx+10h], 4

loc_62B85910:				; CODE XREF: silc_client_channel_save_public_keys+3CCj
		mov	edx, [ebx]
		mov	[ebp+var_1C], edx
		mov	eax, edx
		mov	[ebx+8], edx
		and	byte ptr [ebx+10h], 0FDh
		xor	ecx, ecx
		test	eax, eax
		jz	loc_62B8585D
		test	cl, cl
		jz	short loc_62B85948

loc_62B8592C:				; CODE XREF: silc_client_channel_save_public_keys+456j
		movzx	edx, word ptr [ebx+0Eh]
		mov	edx, [eax+edx]
		mov	[ebx+8], edx
		cmp	edi, [eax]
		jz	short loc_62B85956

loc_62B8593A:				; CODE XREF: silc_client_channel_save_public_keys+464j
		mov	eax, edx
		test	eax, eax
		jz	loc_62B8585D
		test	cl, cl
		jnz	short loc_62B8592C

loc_62B85948:				; CODE XREF: silc_client_channel_save_public_keys+43Aj
		movzx	edx, word ptr [ebx+0Ch]
		mov	edx, [eax+edx]
		mov	[ebx+8], edx
		cmp	edi, [eax]
		jnz	short loc_62B8593A

loc_62B85956:				; CODE XREF: silc_client_channel_save_public_keys+448j
		mov	ecx, [ebp+var_1C]
		mov	[ebp+var_28], ecx
		test	ecx, ecx
		jz	short loc_62B85995
		cmp	eax, ecx
		jz	loc_62B85BED
		movzx	edx, word ptr [ebx+0Ch]
		mov	[ebp+var_1C], edx
		mov	ecx, [ebp+var_28]
		mov	[ebp+var_20], ebx
		mov	ebx, edx
		jmp	short loc_62B85986
; ---------------------------------------------------------------------------
		align 4

loc_62B8597C:				; CODE XREF: silc_client_channel_save_public_keys+49Dj
		cmp	eax, edx
		jz	loc_62B85AC7
		mov	ecx, edx

loc_62B85986:				; CODE XREF: silc_client_channel_save_public_keys+487j
		lea	edi, [ecx+ebx]
		mov	edx, [edi]
		test	edx, edx
		jnz	short loc_62B8597C
		mov	[ebp+var_28], ecx
		mov	ebx, [ebp+var_20]

loc_62B85995:				; CODE XREF: silc_client_channel_save_public_keys+46Ej
					; silc_client_channel_save_public_keys+612j
		cmp	eax, [ebx+4]
		jz	loc_62B85B6A

loc_62B8599E:				; CODE XREF: silc_client_channel_save_public_keys+680j
		cmp	eax, [ebx+14h]
		jz	loc_62B85B75

loc_62B859A7:				; CODE XREF: silc_client_channel_save_public_keys+68Cj
		cmp	eax, [ebx+18h]
		jz	loc_62B85B11

loc_62B859B0:				; CODE XREF: silc_client_channel_save_public_keys+628j
		mov	[esp+78h+var_78], eax
		call	silc_free
		jmp	loc_62B8585D
; ---------------------------------------------------------------------------
		align 10h

loc_62B859C0:				; CODE XREF: silc_client_channel_save_public_keys+2BCj
		movzx	edx, word ptr [ebx+0Ch]
		mov	edx, [eax+edx]
		jmp	loc_62B857B9
; ---------------------------------------------------------------------------

loc_62B859CC:				; CODE XREF: silc_client_channel_save_public_keys+367j
		test	cl, cl
		jz	loc_62B8585D
		mov	ecx, [esi+110h]
		mov	edi, [ecx]
		mov	[ebp+var_1C], edi
		mov	[ebp+var_4C], edi
		mov	[ecx+8], edi
		and	byte ptr [ecx+10h], 0FDh
		mov	eax, [ebp+var_4C]
		mov	[ebp+var_20], ebx
		test	eax, eax
		jz	short loc_62B85A0E
		nop

loc_62B859F4:				; CODE XREF: silc_client_channel_save_public_keys+51Cj
		xor	ebx, ebx
		test	bl, bl
		jz	short loc_62B85A32
		movzx	edi, word ptr [ecx+0Eh]
		mov	edi, [eax+edi]
		mov	[ecx+8], edi
		cmp	edx, [eax]
		jz	short loc_62B85A40

loc_62B85A08:				; CODE XREF: silc_client_channel_save_public_keys+54Ej
		mov	eax, edi
		test	eax, eax
		jnz	short loc_62B859F4

loc_62B85A0E:				; CODE XREF: silc_client_channel_save_public_keys+501j
		mov	ebx, [ebp+var_20]
		jmp	loc_62B8585D
; ---------------------------------------------------------------------------

loc_62B85A16:				; CODE XREF: silc_client_channel_save_public_keys+F4j
		movzx	edi, word ptr [ebx+0Ch]
		mov	[ebp+var_20], ebx
		xor	eax, eax
		jmp	loc_62B856FB
; ---------------------------------------------------------------------------

loc_62B85A24:				; CODE XREF: silc_client_channel_save_public_keys+167j
		mov	[ebp+var_20], ebx
		movzx	edi, word ptr [ebx+0Ch]
		xor	ecx, ecx
		jmp	loc_62B8569F
; ---------------------------------------------------------------------------

loc_62B85A32:				; CODE XREF: silc_client_channel_save_public_keys+508j
		movzx	edi, word ptr [ecx+0Ch]
		mov	edi, [eax+edi]
		mov	[ecx+8], edi
		cmp	edx, [eax]
		jnz	short loc_62B85A08

loc_62B85A40:				; CODE XREF: silc_client_channel_save_public_keys+516j
		mov	[ebp+var_4C], eax
		mov	ebx, [ebp+var_20]
		mov	eax, [ebp+var_1C]
		mov	[ebp+var_3C], eax
		test	eax, eax
		jz	short loc_62B85A93
		cmp	[ebp+var_4C], eax
		jz	loc_62B85C03
		movzx	eax, word ptr [ecx+0Ch]
		mov	[ebp+var_1C], eax
		mov	eax, [ebp+var_4C]
		mov	[ebp+var_24], ecx
		mov	edi, [ebp+var_3C]
		mov	[ebp+var_28], ebx
		mov	ebx, [ebp+var_1C]
		jmp	short loc_62B85A7E
; ---------------------------------------------------------------------------
		align 4

loc_62B85A74:				; CODE XREF: silc_client_channel_save_public_keys+595j
		cmp	eax, edx
		jz	loc_62B85B2B
		mov	edi, edx

loc_62B85A7E:				; CODE XREF: silc_client_channel_save_public_keys+57Fj
		lea	ecx, [edi+ebx]
		mov	edx, [ecx]
		test	edx, edx
		jnz	short loc_62B85A74
		mov	[ebp+var_4C], eax
		mov	ecx, [ebp+var_24]
		mov	[ebp+var_3C], edi
		mov	ebx, [ebp+var_28]

loc_62B85A93:				; CODE XREF: silc_client_channel_save_public_keys+55Ej
					; silc_client_channel_save_public_keys+675j
		mov	edx, [ebp+var_4C]
		cmp	edx, [ecx+4]
		jz	loc_62B85BB8

loc_62B85A9F:				; CODE XREF: silc_client_channel_save_public_keys+6CEj
		mov	eax, [ebp+var_4C]
		cmp	eax, [ecx+14h]
		jz	loc_62B85BAC

loc_62B85AAB:				; CODE XREF: silc_client_channel_save_public_keys+6C3j
		mov	edx, [ebp+var_4C]
		cmp	edx, [ecx+18h]
		jz	loc_62B85B93

loc_62B85AB7:				; CODE XREF: silc_client_channel_save_public_keys+6AAj
		mov	ecx, [ebp+var_4C]
		mov	[esp+78h+var_78], ecx
		call	silc_free
		jmp	loc_62B8585D
; ---------------------------------------------------------------------------

loc_62B85AC7:				; CODE XREF: silc_client_channel_save_public_keys+48Ej
		mov	[ebp+var_24], edi
		mov	[ebp+var_28], ecx
		mov	ebx, [ebp+var_20]

loc_62B85AD0:				; CODE XREF: silc_client_channel_save_public_keys+70Ej
		mov	edx, [ebp+var_1C]
		mov	edx, [eax+edx]
		mov	[ebp+var_20], edx
		mov	ecx, [ebp+var_24]
		mov	[ecx], edx
		test	edx, edx
		jz	short loc_62B85AF5
		test	byte ptr [ebx+10h], 1
		jz	short loc_62B85AF5
		movzx	edi, word ptr [ebx+0Eh]
		mov	edx, [eax+edi]
		mov	ecx, [ebp+var_20]
		mov	[ecx+edi], edx

loc_62B85AF5:				; CODE XREF: silc_client_channel_save_public_keys+5F0j
					; silc_client_channel_save_public_keys+5F6j
		cmp	eax, [ebx+8]
		jz	loc_62B85B9F

loc_62B85AFE:				; CODE XREF: silc_client_channel_save_public_keys+6B7j
		sub	dword ptr [ebx+10h], 4
		jmp	loc_62B85995
; ---------------------------------------------------------------------------

loc_62B85B07:				; CODE XREF: silc_client_channel_save_public_keys+1Ej
					; silc_client_channel_save_public_keys+276j
		xor	eax, eax
		add	esp, 6Ch
		pop	ebx
		pop	esi
		pop	edi
		leave
		retn
; ---------------------------------------------------------------------------

loc_62B85B11:				; CODE XREF: silc_client_channel_save_public_keys+4BAj
		mov	dword ptr [ebx+18h], 0
		jmp	loc_62B859B0
; ---------------------------------------------------------------------------

loc_62B85B1D:				; CODE XREF: silc_client_channel_save_public_keys+3D7j
		mov	[edx], eax
		movzx	ecx, word ptr [edx+0Ch]
		mov	[ebp+var_1C], ecx
		jmp	loc_62B858E3
; ---------------------------------------------------------------------------

loc_62B85B2B:				; CODE XREF: silc_client_channel_save_public_keys+586j
		mov	[ebp+var_4C], eax
		mov	[ebp+var_20], ecx
		mov	ecx, [ebp+var_24]
		mov	[ebp+var_3C], edi
		mov	ebx, [ebp+var_28]

loc_62B85B3A:				; CODE XREF: silc_client_channel_save_public_keys+724j
		mov	eax, [ebp+var_4C]
		mov	edi, [ebp+var_1C]
		mov	edi, [eax+edi]
		mov	[ebp+var_24], edi
		mov	eax, [ebp+var_20]
		mov	[eax], edi
		test	edi, edi
		jz	short loc_62B85B55
		test	byte ptr [ecx+10h], 1
		jnz	short loc_62B85B81

loc_62B85B55:				; CODE XREF: silc_client_channel_save_public_keys+65Dj
					; silc_client_channel_save_public_keys+6A1j
		mov	edx, [ebp+var_4C]
		cmp	edx, [ecx+8]
		jz	loc_62B85C19

loc_62B85B61:				; CODE XREF: silc_client_channel_save_public_keys+731j
		sub	dword ptr [ecx+10h], 4
		jmp	loc_62B85A93
; ---------------------------------------------------------------------------

loc_62B85B6A:				; CODE XREF: silc_client_channel_save_public_keys+4A8j
		mov	ecx, [ebp+var_28]
		mov	[ebx+4], ecx
		jmp	loc_62B8599E
; ---------------------------------------------------------------------------

loc_62B85B75:				; CODE XREF: silc_client_channel_save_public_keys+4B1j
		mov	dword ptr [ebx+14h], 0
		jmp	loc_62B859A7
; ---------------------------------------------------------------------------

loc_62B85B81:				; CODE XREF: silc_client_channel_save_public_keys+663j
		movzx	edx, word ptr [ecx+0Eh]
		mov	edi, [ebp+var_4C]
		mov	edi, [edi+edx]
		mov	eax, [ebp+var_24]
		mov	[eax+edx], edi
		jmp	short loc_62B85B55
; ---------------------------------------------------------------------------

loc_62B85B93:				; CODE XREF: silc_client_channel_save_public_keys+5C1j
		mov	dword ptr [ecx+18h], 0
		jmp	loc_62B85AB7
; ---------------------------------------------------------------------------

loc_62B85B9F:				; CODE XREF: silc_client_channel_save_public_keys+608j
		mov	edi, [ebp+var_24]
		mov	edx, [edi]
		mov	[ebx+8], edx
		jmp	loc_62B85AFE
; ---------------------------------------------------------------------------

loc_62B85BAC:				; CODE XREF: silc_client_channel_save_public_keys+5B5j
		mov	dword ptr [ecx+14h], 0
		jmp	loc_62B85AAB
; ---------------------------------------------------------------------------

loc_62B85BB8:				; CODE XREF: silc_client_channel_save_public_keys+5A9j
		mov	edi, [ebp+var_3C]
		mov	[ecx+4], edi
		jmp	loc_62B85A9F
; ---------------------------------------------------------------------------

loc_62B85BC3:				; CODE XREF: silc_client_channel_save_public_keys+287j
		call	sub_62B83258
		mov	[esi+110h], eax
		test	eax, eax
		jnz	loc_62B8577D
		mov	[esp+78h+var_74], 1
		mov	[esp+78h+var_78], ebx
		call	silc_argument_list_free
		xor	eax, eax
		jmp	loc_62B85632
; ---------------------------------------------------------------------------

loc_62B85BED:				; CODE XREF: silc_client_channel_save_public_keys+472j
		movzx	edi, word ptr [ebx+0Ch]
		mov	[ebp+var_1C], edi
		mov	[ebp+var_24], ebx
		mov	[ebp+var_28], 0
		jmp	loc_62B85AD0
; ---------------------------------------------------------------------------

loc_62B85C03:				; CODE XREF: silc_client_channel_save_public_keys+563j
		mov	[ebp+var_20], ecx
		movzx	edx, word ptr [ecx+0Ch]
		mov	[ebp+var_1C], edx
		mov	[ebp+var_3C], 0
		jmp	loc_62B85B3A
; ---------------------------------------------------------------------------

loc_62B85C19:				; CODE XREF: silc_client_channel_save_public_keys+66Bj
		mov	edi, [ebp+var_20]
		mov	edx, [edi]
		mov	[ecx+8], edx
		jmp	loc_62B85B61
; ---------------------------------------------------------------------------

loc_62B85C26:				; CODE XREF: silc_client_channel_save_public_keys+30Dj
		mov	edx, ebx
		mov	ebx, [ebp+var_1C]
		xor	ecx, ecx
		jmp	loc_62B8584A
silc_client_channel_save_public_keys endp

; ---------------------------------------------------------------------------
		align 4
; Exported entry 146. silc_client_list_channel_private_keys

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public silc_client_list_channel_private_keys
silc_client_list_channel_private_keys proc near

var_28		= dword	ptr -28h
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		sub	esp, 1Ch
		mov	esi, [ebp+arg_8]
		mov	edi, [ebp+arg_0]
		test	edi, edi
		jnz	short loc_62B85C54

loc_62B85C47:				; CODE XREF: silc_client_list_channel_private_keys+25j
					; silc_client_list_channel_private_keys+29j ...
		xor	ebx, ebx

loc_62B85C49:				; CODE XREF: silc_client_list_channel_private_keys+3Ej
					; silc_client_list_channel_private_keys+71j ...
		mov	eax, ebx
		add	esp, 1Ch
		pop	ebx
		pop	esi
		pop	edi
		leave
		retn
; ---------------------------------------------------------------------------
		align 4

loc_62B85C54:				; CODE XREF: silc_client_list_channel_private_keys+11j
		mov	ebx, [ebp+arg_4]
		test	ebx, ebx
		jz	short loc_62B85C47
		test	esi, esi
		jz	short loc_62B85C47
		mov	ecx, [esi+150h]
		test	ecx, ecx
		jz	short loc_62B85C47
		call	sub_62B83258
		mov	ebx, eax
		test	eax, eax
		jz	short loc_62B85C49
		mov	eax, [esi+150h]
		mov	edx, [eax]
		mov	[eax+8], edx
		and	byte ptr [eax+10h], 0FDh
		mov	dword ptr [eax+18h], 0
		mov	dword ptr [eax+14h], 0
		jmp	short loc_62B85CE7
; ---------------------------------------------------------------------------
		align 4

loc_62B85C94:				; CODE XREF: silc_client_list_channel_private_keys+CAj
		movzx	ecx, word ptr [eax+0Eh]
		mov	ecx, [edx+ecx]

loc_62B85C9B:				; CODE XREF: silc_client_list_channel_private_keys+D3j
		mov	[eax+8], ecx
		mov	[eax+14h], edx
		mov	edi, [edx]
		test	edi, edi
		jz	short loc_62B85C49
		mov	[esp+28h+var_28], 0Ch
		call	silc_malloc
		test	eax, eax
		jz	short loc_62B85CE7
		mov	[eax], edi
		mov	edx, [ebx]
		test	edx, edx
		jz	short loc_62B85D18
		movzx	edx, word ptr [ebx+0Ch]
		mov	ecx, [ebx+4]
		mov	[ecx+edx], eax

loc_62B85CC9:				; CODE XREF: silc_client_list_channel_private_keys+EAj
		test	byte ptr [ebx+10h], 1
		jz	short loc_62B85CD9
		movzx	ecx, word ptr [ebx+0Eh]
		mov	edi, [ebx+4]
		mov	[eax+ecx], edi

loc_62B85CD9:				; CODE XREF: silc_client_list_channel_private_keys+99j
		mov	[ebx+4], eax
		mov	dword ptr [eax+edx], 0
		add	dword ptr [ebx+10h], 4

loc_62B85CE7:				; CODE XREF: silc_client_list_channel_private_keys+5Dj
					; silc_client_list_channel_private_keys+81j
		mov	eax, [esi+150h]
		mov	edx, [eax+14h]
		mov	[eax+18h], edx
		mov	edx, [eax+8]
		test	edx, edx
		jz	short loc_62B85D0C
		test	byte ptr [eax+10h], 2
		jnz	short loc_62B85C94
		movzx	ecx, word ptr [eax+0Ch]
		mov	ecx, [edx+ecx]
		jmp	short loc_62B85C9B
; ---------------------------------------------------------------------------
		align 4

loc_62B85D0C:				; CODE XREF: silc_client_list_channel_private_keys+C4j
		mov	dword ptr [eax+14h], 0
		jmp	loc_62B85C49
; ---------------------------------------------------------------------------

loc_62B85D18:				; CODE XREF: silc_client_list_channel_private_keys+89j
		mov	[ebx], eax
		movzx	edx, word ptr [ebx+0Ch]
		jmp	short loc_62B85CC9
silc_client_list_channel_private_keys endp

; Exported entry 215. silc_client_st_rekey

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public silc_client_st_rekey
silc_client_st_rekey proc near		; DATA XREF: silc_client_connection_st_run+B0o

var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		sub	esp, 2Ch
		mov	esi, [ebp+arg_0]
		mov	ebx, [ebp+arg_4]
		mov	eax, [ebx+4Ch]
		mov	edi, [ebx+54h]
		test	byte ptr [edi+12Dh], 2
		jz	short loc_62B85D4C

loc_62B85D3E:				; CODE XREF: silc_client_st_rekey+6Dj
		mov	eax, 3
		add	esp, 2Ch
		pop	ebx
		pop	esi
		pop	edi
		leave
		retn
; ---------------------------------------------------------------------------
		align 4

loc_62B85D4C:				; CODE XREF: silc_client_st_rekey+1Cj
		mov	[esp+38h+var_24], esi
		mov	[esp+38h+var_28], 0
		mov	edx, [ebx+34h]
		mov	[esp+38h+var_2C], edx
		mov	[esp+38h+var_30], 0
		mov	edx, [edi+0B4h]
		mov	[esp+38h+var_34], edx
		mov	eax, [eax+10h]
		mov	[esp+38h+var_38], eax
		call	silc_ske_alloc
		mov	[edi+0BCh], eax
		mov	eax, [ebx+54h]
		mov	eax, [eax+0BCh]
		test	eax, eax
		jz	short loc_62B85D3E
		mov	[esp+38h+var_2C], esi
		mov	[esp+38h+var_30], offset sub_62B85EC0
		mov	[esp+38h+var_34], 0
		mov	[esp+38h+var_38], eax
		call	silc_ske_set_callbacks
		mov	eax, [ebx+54h]
		test	byte ptr [eax+12Dh], 40h
		jz	short loc_62B85E18
		mov	al, [esi+28h]
		mov	dl, al
		or	edx, 4
		mov	[esi+28h], dl
		test	al, 4
		jnz	loc_62B85E58

loc_62B85DCA:				; CODE XREF: silc_client_st_rekey+164j
		mov	edi, [ebx+54h]
		mov	[esp+38h+var_2C], 0
		mov	eax, [edi+0C0h]
		mov	[esp+38h+var_30], eax
		mov	eax, [ebx+3Ch]
		mov	[esp+38h+var_34], eax
		mov	eax, [edi+0BCh]
		mov	[esp+38h+var_38], eax
		call	silc_ske_rekey_responder

loc_62B85DF4:				; CODE XREF: silc_client_st_rekey+129j
		mov	[edi+0FCh], eax
		mov	al, [esi+28h]
		mov	dl, al
		and	edx, 0FFFFFFFBh
		mov	[esi+28h], dl
		test	al, 4
		jz	short loc_62B85E4C
		mov	eax, 2
		add	esp, 2Ch
		pop	ebx
		pop	esi
		pop	edi
		leave
		retn
; ---------------------------------------------------------------------------
		align 4

loc_62B85E18:				; CODE XREF: silc_client_st_rekey+95j
		mov	al, [esi+28h]
		mov	dl, al
		or	edx, 4
		mov	[esi+28h], dl
		test	al, 4
		jnz	short loc_62B85E8C

loc_62B85E27:				; CODE XREF: silc_client_st_rekey+198j
		mov	edi, [ebx+54h]
		mov	eax, [edi+0C0h]
		mov	[esp+38h+var_30], eax
		mov	eax, [ebx+3Ch]
		mov	[esp+38h+var_34], eax
		mov	eax, [edi+0BCh]
		mov	[esp+38h+var_38], eax
		call	silc_ske_rekey_initiator
		jmp	short loc_62B85DF4
; ---------------------------------------------------------------------------
		align 4

loc_62B85E4C:				; CODE XREF: silc_client_st_rekey+E7j
		xor	eax, eax
		add	esp, 2Ch
		pop	ebx
		pop	esi
		pop	edi
		leave
		retn
; ---------------------------------------------------------------------------
		align 4

loc_62B85E58:				; CODE XREF: silc_client_st_rekey+A4j
		mov	[esp+38h+var_30], 32Ch
		mov	[esp+38h+var_34], offset aClient_connect ; "client_connect.c"
		mov	[esp+38h+var_38], offset aSilc_verifyS_0 ; "SILC_VERIFY	%s:%d"
		call	silc_format
		mov	[esp+38h+var_34], eax
		mov	[esp+38h+var_38], 3
		call	silc_log_output
		jmp	loc_62B85DCA
; ---------------------------------------------------------------------------
		align 4

loc_62B85E8C:				; CODE XREF: silc_client_st_rekey+105j
		mov	[esp+38h+var_30], 326h
		mov	[esp+38h+var_34], offset aClient_connect ; "client_connect.c"
		mov	[esp+38h+var_38], offset aSilc_verifyS_0 ; "SILC_VERIFY	%s:%d"
		call	silc_format
		mov	[esp+38h+var_34], eax
		mov	[esp+38h+var_38], 3
		call	silc_log_output
		jmp	loc_62B85E27
silc_client_st_rekey endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_62B85EC0	proc near		; DATA XREF: silc_client_st_rekey+73o

var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_10		= dword	ptr  18h
arg_14		= dword	ptr  1Ch

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		sub	esp, 3Ch
		mov	edi, [ebp+arg_4]
		mov	eax, [ebp+arg_10]
		mov	[ebp+var_1C], eax
		mov	esi, [ebp+arg_14]
		mov	[esp+48h+var_48], esi
		call	silc_fsm_get_context
		mov	ebx, eax
		mov	edx, [eax+4Ch]
		mov	eax, [eax+54h]
		mov	dword ptr [eax+0FCh], 0
		test	edi, edi
		jz	short loc_62B85F6C
		test	byte ptr [eax+12Dh], 10h
		jnz	short loc_62B85F28

loc_62B85EFC:				; CODE XREF: sub_62B85EC0+A9j
					; sub_62B85EC0+C6j
		mov	eax, [eax+0BCh]
		mov	[esp+48h+var_48], eax
		call	silc_ske_free
		mov	eax, [ebx+54h]
		mov	dword ptr [eax+0BCh], 0
		mov	[ebp+arg_0], esi
		add	esp, 3Ch
		pop	ebx
		pop	esi
		pop	edi
		leave
		jmp	silc_fsm_finish
; ---------------------------------------------------------------------------
		align 4

loc_62B85F28:				; CODE XREF: sub_62B85EC0+3Aj
		mov	eax, [edx+18h]
		mov	eax, [eax+48h]
		mov	eax, [eax]
		mov	[ebp+var_1C], eax
		mov	[esp+48h+var_48], edi
		mov	[ebp+var_20], edx
		call	silc_ske_map_status
		mov	[esp+48h+var_34], eax
		mov	eax, [ebx+8]
		mov	[esp+48h+var_38], eax
		mov	[esp+48h+var_3C], offset aErrorDuringRek ; "Error during rekey with %s:	%s"
		mov	[esp+48h+var_40], 2
		mov	[esp+48h+var_44], ebx
		mov	edx, [ebp+var_20]
		mov	[esp+48h+var_48], edx
		call	[ebp+var_1C]
		mov	eax, [ebx+54h]
		jmp	short loc_62B85EFC
; ---------------------------------------------------------------------------
		align 4

loc_62B85F6C:				; CODE XREF: sub_62B85EC0+31j
		mov	eax, [eax+0C0h]
		mov	[esp+48h+var_48], eax
		call	silc_ske_free_rekey_material
		mov	eax, [ebx+54h]
		mov	edx, [ebp+var_1C]
		mov	[eax+0C0h], edx
		jmp	loc_62B85EFC
sub_62B85EC0	endp

; ---------------------------------------------------------------------------
		align 4
; Exported entry 191. silc_client_rekey_timer

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public silc_client_rekey_timer
silc_client_rekey_timer	proc near	; DATA XREF: silc_client_rekey_timer+5Do
					; silc_client_st_connected+AAo

var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
arg_10		= dword	ptr  18h

		push	ebp
		mov	ebp, esp
		push	ebx
		sub	esp, 24h
		mov	ebx, [ebp+arg_10]
		mov	eax, [ebx+54h]
		add	eax, 6Ch
		mov	[esp+28h+var_28], eax
		call	silc_fsm_is_started
		test	al, al
		jnz	short loc_62B85FCB
		mov	edx, [ebx+54h]
		mov	al, [edx+12Dh]
		and	eax, 0FFFFFFBFh
		or	eax, 8
		mov	[edx+12Dh], al
		add	edx, 98h
		mov	[esp+28h+var_28], edx
		call	silc_fsm_event_signal

loc_62B85FCB:				; CODE XREF: silc_client_rekey_timer+1Aj
		mov	eax, [ebx+54h]
		mov	[esp+28h+var_10], 1
		mov	[esp+28h+var_14], 0
		mov	edx, [eax+34h]
		mov	[esp+28h+var_18], edx
		mov	[esp+28h+var_1C], ebx
		mov	[esp+28h+var_20], offset silc_client_rekey_timer
		mov	[esp+28h+var_24], 0
		mov	eax, [eax+0B4h]
		mov	[esp+28h+var_28], eax
		call	silc_schedule_task_add
		add	esp, 24h
		pop	ebx
		leave
		retn
silc_client_rekey_timer	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 207. silc_client_st_connect_error

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public silc_client_st_connect_error
silc_client_st_connect_error proc near	; DATA XREF: silc_client_st_connect_auth_data:loc_62B86164o
					; silc_client_st_connected:loc_62B86338o ...

var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		push	ebx
		sub	esp, 14h
		mov	ebx, [ebp+arg_4]
		mov	eax, [ebx+54h]
		mov	edx, [eax+0BCh]
		test	edx, edx
		jz	short loc_62B8603C
		mov	[esp+18h+var_18], edx
		call	silc_ske_free
		mov	eax, [ebx+54h]
		mov	dword ptr [eax+0BCh], 0

loc_62B8603C:				; CODE XREF: silc_client_st_connect_error+15j
		mov	dl, [eax+12Dh]
		test	dl, 2
		jnz	short loc_62B86060
		or	edx, 2
		mov	[eax+12Dh], dl
		add	eax, 98h
		mov	[esp+18h+var_18], eax
		call	silc_fsm_event_signal
		mov	eax, [ebx+54h]

loc_62B86060:				; CODE XREF: silc_client_st_connect_error+35j
		mov	[esp+18h+var_C], ebx
		mov	[esp+18h+var_10], offset silc_client_connect_timeout
		mov	[esp+18h+var_14], 0
		mov	eax, [eax+0B4h]
		mov	[esp+18h+var_18], eax
		call	silc_schedule_task_del_by_all
		mov	eax, 3
		add	esp, 14h
		pop	ebx
		leave
		retn
silc_client_st_connect_error endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_62B86090	proc near		; DATA XREF: sub_62B86B98+6Eo

var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		push	ebx
		sub	esp, 14h
		mov	ebx, [ebp+arg_4]
		mov	edx, [ebx+4]
		mov	ecx, [ebx+8]
		cmp	byte ptr [ebp+arg_0], 1
		sbb	eax, eax
		and	eax, 8
		mov	[esp+18h+var_10], ecx
		mov	[esp+18h+var_14], eax
		mov	eax, [ebx]
		mov	[esp+18h+var_18], eax
		call	edx
		mov	[ebp+arg_0], ebx
		add	esp, 14h
		pop	ebx
		leave
		jmp	silc_free
sub_62B86090	endp

; ---------------------------------------------------------------------------
		align 4
; Exported entry 204. silc_client_st_connect_auth_data

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public silc_client_st_connect_auth_data
silc_client_st_connect_auth_data proc near
					; DATA XREF: silc_client_st_connect_auth_resolve+8Eo

var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		sub	esp, 2Ch
		mov	esi, [ebp+arg_0]
		mov	ebx, [ebp+arg_4]
		mov	edi, [ebx+4Ch]
		mov	eax, [ebx+54h]
		mov	dl, [eax+12Dh]
		test	dl, 2
		jnz	short loc_62B86164
		and	edx, 7Fh
		mov	[eax+12Dh], dl
		mov	[esp+38h+var_34], offset silc_client_st_connect_auth_start
		mov	[esp+38h+var_38], esi
		call	silc_fsm_next
		mov	al, [esi+28h]
		mov	dl, al
		or	edx, 4
		mov	[esi+28h], dl
		test	al, 4
		jnz	short loc_62B86180

loc_62B86110:				; CODE XREF: silc_client_st_connect_auth_data+E4j
		mov	eax, [edi+18h]
		mov	eax, [eax+48h]
		mov	[esp+38h+var_20], esi
		mov	[esp+38h+var_24], offset sub_62B865D4
		mov	edx, [ebx+54h]
		movzx	edx, word ptr [edx+0Ah]
		mov	[esp+38h+var_28], edx
		movzx	edx, word ptr [ebx+0Ch]
		mov	[esp+38h+var_2C], edx
		mov	edx, [ebx+8]
		mov	[esp+38h+var_30], edx
		mov	[esp+38h+var_34], ebx
		mov	[esp+38h+var_38], edi
		call	dword ptr [eax+18h]
		mov	dl, [esi+28h]
		mov	al, dl
		shr	al, 2
		and	edx, 0FFFFFFFBh
		mov	[esi+28h], dl
		shl	eax, 1
		and	eax, 2
		add	esp, 2Ch
		pop	ebx
		pop	esi
		pop	edi
		leave
		retn
; ---------------------------------------------------------------------------
		align 4

loc_62B86164:				; CODE XREF: silc_client_st_connect_auth_data+1Ej
		mov	[esp+38h+var_34], offset silc_client_st_connect_error
		mov	[esp+38h+var_38], esi
		call	silc_fsm_next
		xor	eax, eax
		add	esp, 2Ch
		pop	ebx
		pop	esi
		pop	edi
		leave
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_62B86180:				; CODE XREF: silc_client_st_connect_auth_data+46j
		mov	[esp+38h+var_30], 270h
		mov	[esp+38h+var_34], offset aClient_connect ; "client_connect.c"
		mov	[esp+38h+var_38], offset aSilc_verifyS_0 ; "SILC_VERIFY	%s:%d"
		call	silc_format
		mov	[esp+38h+var_34], eax
		mov	[esp+38h+var_38], 3
		call	silc_log_output
		jmp	loc_62B86110
silc_client_st_connect_auth_data endp

; ---------------------------------------------------------------------------
		align 4
; Exported entry 211. silc_client_st_connected

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public silc_client_st_connected
silc_client_st_connected proc near	; DATA XREF: silc_client_st_connect_auth_start+4Fo
					; silc_client_st_connect_key_exchange:loc_62B86B11o

var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		sub	esp, 2Ch
		mov	edi, [ebp+arg_0]
		mov	ebx, [ebp+arg_4]
		mov	esi, [ebx+4Ch]
		mov	eax, [ebx+54h]
		mov	[esp+38h+var_24], 0
		mov	[esp+38h+var_28], 0
		mov	[esp+38h+var_2C], 0
		mov	[esp+38h+var_30], 0
		lea	edx, [eax+120h]
		mov	[esp+38h+var_34], edx
		mov	eax, [eax+0BCh]
		mov	[esp+38h+var_38], eax
		call	silc_ske_parse_version
		mov	eax, [ebx+54h]
		mov	eax, [eax+0BCh]
		mov	[esp+38h+var_38], eax
		call	silc_ske_free
		mov	eax, [ebx+54h]
		mov	dword ptr [eax+0BCh], 0
		mov	edx, [eax+8]
		xor	dl, dl
		cmp	edx, 10000h
		jz	loc_62B8630C

loc_62B86230:				; CODE XREF: silc_client_st_connected+15Dj
		test	byte ptr [eax+12Dh], 2
		jnz	loc_62B86338

loc_62B8623D:				; CODE XREF: silc_client_st_connected+17Cj
		cmp	dword ptr [ebx+40h], 1
		jz	short loc_62B86293
		mov	[esp+38h+var_20], 1
		mov	[esp+38h+var_24], 0
		mov	edx, [eax+34h]
		mov	[esp+38h+var_28], edx
		mov	[esp+38h+var_2C], ebx
		mov	[esp+38h+var_30], offset silc_client_rekey_timer
		mov	[esp+38h+var_34], 0
		mov	eax, [eax+0B4h]
		mov	[esp+38h+var_38], eax
		call	silc_schedule_task_add
		cmp	dword ptr [ebx+40h], 2
		jnz	loc_62B86378
		mov	eax, [ebx+54h]
		cmp	byte ptr [eax+25h], 0
		jz	loc_62B86354

loc_62B86293:				; CODE XREF: silc_client_st_connected+8Dj
					; silc_client_st_connected+1C7j
		mov	[esp+38h+var_2C], ebx
		mov	[esp+38h+var_30], offset silc_client_connect_timeout
		mov	[esp+38h+var_34], 0
		mov	eax, [eax+0B4h]
		mov	[esp+38h+var_38], eax
		call	silc_schedule_task_del_by_all
		mov	eax, [ebx+48h]
		mov	[esp+38h+var_24], eax
		mov	[esp+38h+var_28], 0
		mov	[esp+38h+var_2C], 0
		mov	[esp+38h+var_30], 0
		mov	[esp+38h+var_34], ebx
		mov	[esp+38h+var_38], esi
		call	dword ptr [ebx+44h]
		mov	eax, [ebx+54h]
		mov	eax, [eax+100h]
		mov	[esp+38h+var_38], eax
		call	silc_async_free
		mov	eax, [ebx+54h]
		mov	dword ptr [eax+100h], 0
		mov	eax, 3

loc_62B86301:				; CODE XREF: silc_client_st_connected+1C0j
					; silc_client_st_connected+1DEj
		add	esp, 2Ch
		pop	ebx
		pop	esi
		pop	edi
		leave
		retn
; ---------------------------------------------------------------------------
		align 4

loc_62B8630C:				; CODE XREF: silc_client_st_connected+76j
		mov	edx, [eax+0Ch]
		test	edx, edx
		jz	loc_62B86230
		mov	[esp+38h+var_38], edx
		call	silc_free
		mov	eax, [ebx+54h]
		mov	dword ptr [eax+0Ch], 0
		test	byte ptr [eax+12Dh], 2
		jz	loc_62B8623D
		xchg	ax, ax

loc_62B86338:				; CODE XREF: silc_client_st_connected+83j
		mov	[esp+38h+var_34], offset silc_client_st_connect_error
		mov	[esp+38h+var_38], edi
		call	silc_fsm_next
		xor	eax, eax
		add	esp, 2Ch
		pop	ebx
		pop	esi
		pop	edi
		leave
		retn
; ---------------------------------------------------------------------------
		align 4

loc_62B86354:				; CODE XREF: silc_client_st_connected+D9j
		mov	edx, [eax+28h]
		test	edx, edx
		jz	short loc_62B86362
		mov	eax, [eax+2Ch]
		test	eax, eax
		jnz	short loc_62B86380

loc_62B86362:				; CODE XREF: silc_client_st_connected+1A5j
		mov	[esp+38h+var_34], offset silc_client_st_register
		mov	[esp+38h+var_38], edi
		call	silc_fsm_next
		xor	eax, eax
		jmp	short loc_62B86301
; ---------------------------------------------------------------------------
		align 4

loc_62B86378:				; CODE XREF: silc_client_st_connected+CCj
		mov	eax, [ebx+54h]
		jmp	loc_62B86293
; ---------------------------------------------------------------------------

loc_62B86380:				; CODE XREF: silc_client_st_connected+1ACj
		mov	[esp+38h+var_34], offset silc_client_st_resume
		mov	[esp+38h+var_38], edi
		call	silc_fsm_next
		xor	eax, eax
		jmp	loc_62B86301
silc_client_st_connected endp

; ---------------------------------------------------------------------------
		align 4
; Exported entry 206. silc_client_st_connect_auth_start

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public silc_client_st_connect_auth_start
silc_client_st_connect_auth_start proc near
					; DATA XREF: silc_client_st_connect_auth_data+29o
					; silc_client_st_connect_auth_resolve:loc_62B86868o

var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		sub	esp, 2Ch
		mov	ebx, [ebp+arg_0]
		mov	esi, [ebp+arg_4]
		mov	eax, [esi+54h]
		test	byte ptr [eax+12Dh], 2
		jnz	loc_62B86474
		cmp	word ptr [eax+0Ah], 2
		jz	loc_62B86490

loc_62B863C2:				; CODE XREF: silc_client_st_connect_auth_start+FEj
		mov	edx, [eax+34h]
		mov	[esp+38h+var_30], edx
		mov	edx, [eax+0BCh]
		mov	[esp+38h+var_34], edx
		mov	eax, [eax+0B4h]
		mov	[esp+38h+var_38], eax
		call	silc_connauth_alloc
		mov	edi, eax
		test	eax, eax
		jz	short loc_62B86460
		mov	[esp+38h+var_34], offset silc_client_st_connected
		mov	[esp+38h+var_38], ebx
		call	silc_fsm_next
		mov	al, [ebx+28h]
		mov	dl, al
		or	edx, 4
		mov	[ebx+28h], dl
		test	al, 4
		jnz	loc_62B8649C

loc_62B8640A:				; CODE XREF: silc_client_st_connect_auth_start+130j
		mov	esi, [esi+54h]
		mov	[esp+38h+var_20], ebx
		mov	[esp+38h+var_24], offset sub_62B864D0
		mov	eax, [esi+10h]
		mov	[esp+38h+var_28], eax
		mov	eax, [esi+0Ch]
		mov	[esp+38h+var_2C], eax
		movzx	eax, word ptr [esi+0Ah]
		mov	[esp+38h+var_30], eax
		mov	[esp+38h+var_34], 1
		mov	[esp+38h+var_38], edi
		call	silc_connauth_initiator
		mov	[esi+0FCh], eax
		mov	dl, [ebx+28h]
		mov	al, dl
		shr	al, 2
		and	edx, 0FFFFFFFBh
		mov	[ebx+28h], dl
		shl	eax, 1
		and	eax, 2
		add	esp, 2Ch
		pop	ebx
		pop	esi
		pop	edi
		leave
		retn
; ---------------------------------------------------------------------------

loc_62B86460:				; CODE XREF: silc_client_st_connect_auth_start+4Dj
		mov	eax, [esi+54h]
		mov	dword ptr [eax+128h], 5
		mov	byte ptr [eax+12Ch], 2Dh

loc_62B86474:				; CODE XREF: silc_client_st_connect_auth_start+19j
		mov	[esp+38h+var_34], offset silc_client_st_connect_error
		mov	[esp+38h+var_38], ebx
		call	silc_fsm_next
		xor	eax, eax
		add	esp, 2Ch
		pop	ebx
		pop	esi
		pop	edi
		leave
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_62B86490:				; CODE XREF: silc_client_st_connect_auth_start+24j
		mov	edx, [esi+38h]
		mov	[eax+0Ch], edx
		jmp	loc_62B863C2
; ---------------------------------------------------------------------------
		align 4

loc_62B8649C:				; CODE XREF: silc_client_st_connect_auth_start+6Cj
		mov	[esp+38h+var_30], 29Ah
		mov	[esp+38h+var_34], offset aClient_connect ; "client_connect.c"
		mov	[esp+38h+var_38], offset aSilc_verifyS_0 ; "SILC_VERIFY	%s:%d"
		call	silc_format
		mov	[esp+38h+var_34], eax
		mov	[esp+38h+var_38], 3
		call	silc_log_output
		jmp	loc_62B8640A
silc_client_st_connect_auth_start endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_62B864D0	proc near		; DATA XREF: silc_client_st_connect_auth_start+79o

var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_20		= byte ptr -20h
var_1C		= dword	ptr -1Ch
arg_0		= dword	ptr  8
arg_4		= byte ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		sub	esp, 2Ch
		mov	esi, [ebp+arg_0]
		mov	ebx, [ebp+arg_8]
		mov	dl, [ebp+arg_4]
		mov	[esp+38h+var_38], ebx
		mov	[ebp+var_20], dl
		call	silc_fsm_get_context
		mov	edi, eax
		mov	eax, [eax+4Ch]
		mov	[ebp+var_1C], eax
		mov	eax, [edi+54h]
		mov	dword ptr [eax+0FCh], 0
		mov	[esp+38h+var_38], esi
		call	silc_connauth_free
		mov	dl, [ebp+var_20]
		test	dl, dl
		jnz	short loc_62B8653E
		mov	eax, [edi+54h]
		test	byte ptr [eax+12Dh], 10h
		jnz	short loc_62B86568

loc_62B8651D:				; CODE XREF: sub_62B864D0+BDj
		mov	dword ptr [eax+128h], 5
		mov	byte ptr [eax+12Ch], 2Dh
		mov	[esp+38h+var_34], offset silc_client_st_connect_error
		mov	[esp+38h+var_38], ebx
		call	silc_fsm_next

loc_62B8653E:				; CODE XREF: sub_62B864D0+3Fj
		mov	al, [ebx+28h]
		mov	dl, al
		and	edx, 0FFFFFFFBh
		mov	[ebx+28h], dl
		test	al, 4
		jz	short loc_62B86558
		add	esp, 2Ch
		pop	ebx
		pop	esi
		pop	edi
		leave
		retn
; ---------------------------------------------------------------------------
		align 4

loc_62B86558:				; CODE XREF: sub_62B864D0+7Bj
		mov	[ebp+arg_0], ebx
		add	esp, 2Ch
		pop	ebx
		pop	esi
		pop	edi
		leave
		jmp	silc_fsm_continue_sync
; ---------------------------------------------------------------------------
		align 4

loc_62B86568:				; CODE XREF: sub_62B864D0+4Bj
		mov	edx, [ebp+var_1C]
		mov	eax, [edx+18h]
		mov	eax, [eax+48h]
		mov	[esp+38h+var_2C], offset aAuthentication ; "Authentication failed"
		mov	[esp+38h+var_30], 2
		mov	[esp+38h+var_34], edi
		mov	[esp+38h+var_38], edx
		call	dword ptr [eax]
		mov	eax, [edi+54h]
		jmp	short loc_62B8651D
sub_62B864D0	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  95. silc_client_connect_timeout

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public silc_client_connect_timeout
silc_client_connect_timeout proc near	; DATA XREF: silc_client_st_connect_error+54o
					; silc_client_st_connected+E3o	...

var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
arg_0		= dword	ptr  8
arg_10		= dword	ptr  18h

		push	ebp
		mov	ebp, esp
		push	ebx
		sub	esp, 14h
		mov	ebx, [ebp+arg_10]
		mov	eax, [ebx+54h]
		mov	dword ptr [eax+128h], 7
		mov	byte ptr [eax+12Ch], 36h
		mov	[esp+18h+var_14], offset silc_client_st_connect_error
		add	eax, 6Ch
		mov	[esp+18h+var_18], eax
		call	silc_fsm_next
		mov	eax, [ebx+54h]
		add	eax, 6Ch
		mov	[ebp+arg_0], eax
		add	esp, 14h
		pop	ebx
		leave
		jmp	silc_fsm_continue_sync
silc_client_connect_timeout endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_62B865D4	proc near		; DATA XREF: silc_client_st_connect_auth_data+52o

var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_1E		= word ptr -1Eh
var_1C		= dword	ptr -1Ch
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		sub	esp, 2Ch
		mov	edi, [ebp+arg_0]
		mov	eax, [ebp+arg_4]
		mov	[ebp+var_24], eax
		mov	eax, [ebp+arg_8]
		mov	[ebp+var_1C], eax
		mov	ebx, [ebp+arg_C]
		mov	[ebp+var_1E], di
		mov	[esp+38h+var_38], ebx
		call	silc_fsm_get_context
		mov	edx, eax
		mov	esi, [eax+54h]
		mov	[esi+0Ah], di
		cmp	[ebp+var_1E], 1
		jz	short loc_62B86640
		mov	eax, [ebp+var_24]
		mov	[esi+0Ch], eax

loc_62B86611:				; CODE XREF: sub_62B865D4+8Aj
		mov	eax, [ebp+var_1C]
		mov	[esi+10h], eax
		mov	al, [ebx+28h]
		mov	dl, al
		and	edx, 0FFFFFFFBh
		mov	[ebx+28h], dl
		test	al, 4
		jz	short loc_62B86630
		add	esp, 2Ch
		pop	ebx
		pop	esi
		pop	edi
		leave
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_62B86630:				; CODE XREF: sub_62B865D4+50j
		mov	[ebp+arg_0], ebx
		add	esp, 2Ch
		pop	ebx
		pop	esi
		pop	edi
		leave
		jmp	silc_fsm_continue
; ---------------------------------------------------------------------------
		align 10h

loc_62B86640:				; CODE XREF: sub_62B865D4+35j
		mov	eax, [ebp+var_1C]
		mov	[esp+38h+var_34], eax
		mov	eax, [ebp+var_24]
		mov	[esp+38h+var_38], eax
		mov	[ebp+var_28], edx
		call	silc_memdup
		mov	[esi+0Ch], eax
		mov	edx, [ebp+var_28]
		mov	esi, [edx+54h]
		jmp	short loc_62B86611
sub_62B865D4	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_62B86660	proc near		; CODE XREF: silc_client_st_connect+A0p
					; DATA XREF: silc_client_st_connect+DAo

var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		sub	esp, 3Ch
		mov	esi, [ebp+arg_0]
		mov	eax, [ebp+arg_4]
		mov	[ebp+var_1C], eax
		mov	ebx, [ebp+arg_8]
		mov	[esp+48h+var_48], ebx
		call	silc_fsm_get_context
		mov	ecx, [eax+4Ch]
		mov	edx, [eax+54h]
		mov	dword ptr [edx+0FCh], 0
		mov	edi, edx
		test	byte ptr [edx+12Dh], 10h
		jz	short loc_62B866D0
		cmp	esi, 5		; switch 6 cases
		jbe	short loc_62B866F4
		mov	edx, [ecx+18h]	; jumptable 62B866F4 default case
		mov	edx, [edx+48h]
		mov	edi, [eax+8]
		mov	[esp+48h+var_38], edi
		mov	[esp+48h+var_3C], offset aCouldNotConnec ; "Could not connect to host %s"
		mov	[esp+48h+var_40], 2
		mov	[esp+48h+var_44], eax
		mov	[esp+48h+var_48], ecx
		mov	[ebp+var_20], eax
		call	dword ptr [edx]
		mov	eax, [ebp+var_20]
		mov	edx, [eax+54h]
		mov	edi, edx
		xchg	ax, ax

loc_62B866D0:				; CODE XREF: sub_62B86660+36j
		test	esi, esi
		jnz	short loc_62B8673B

loc_62B866D4:				; CODE XREF: sub_62B86660:loc_62B866F4j
					; DATA XREF: .rdata:off_62BA8604o
		mov	eax, [ebp+var_1C] ; jumptable 62B866F4 case 0
		mov	[edx+108h], eax

loc_62B866DD:				; CODE XREF: sub_62B86660+F5j
		mov	al, [ebx+28h]
		mov	dl, al
		and	edx, 0FFFFFFFBh
		mov	[ebx+28h], dl
		test	al, 4
		jz	short loc_62B866FC
		add	esp, 3Ch
		pop	ebx
		pop	esi
		pop	edi
		leave
		retn
; ---------------------------------------------------------------------------

loc_62B866F4:				; CODE XREF: sub_62B86660+3Bj
		jmp	ds:off_62BA8604[esi*4] ; switch	jump
; ---------------------------------------------------------------------------
		align 4

loc_62B866FC:				; CODE XREF: sub_62B86660+8Aj
		mov	[ebp+arg_0], ebx
		add	esp, 3Ch
		pop	ebx
		pop	esi
		pop	edi
		leave
		jmp	silc_fsm_continue
; ---------------------------------------------------------------------------
		align 4

loc_62B8670C:				; CODE XREF: sub_62B86660:loc_62B866F4j
					; DATA XREF: .rdata:off_62BA8604o
		mov	edx, [ecx+18h]	; jumptable 62B866F4 case 4
		mov	edx, [edx+48h]
		mov	esi, [eax+8]
		mov	[esp+48h+var_38], esi
		mov	[esp+48h+var_3C], offset aCouldNotConn_0 ; "Could not connect to host %s: connectio"...

loc_62B86721:				; CODE XREF: sub_62B86660+10Dj
					; sub_62B86660+125j ...
		mov	[esp+48h+var_40], 2
		mov	[esp+48h+var_44], eax
		mov	[esp+48h+var_48], ecx
		mov	[ebp+var_20], eax
		call	dword ptr [edx]
		mov	eax, [ebp+var_20]
		mov	edi, [eax+54h]

loc_62B8673B:				; CODE XREF: sub_62B86660+72j
		mov	dword ptr [edi+128h], 3
		mov	[esp+48h+var_44], offset silc_client_st_connect_error
		mov	[esp+48h+var_48], ebx
		call	silc_fsm_next
		jmp	short loc_62B866DD
; ---------------------------------------------------------------------------
		align 4

loc_62B86758:				; CODE XREF: sub_62B86660:loc_62B866F4j
					; DATA XREF: .rdata:off_62BA8604o
		mov	edx, [ecx+18h]	; jumptable 62B866F4 case 3
		mov	edx, [edx+48h]
		mov	esi, [eax+8]
		mov	[esp+48h+var_38], esi
		mov	[esp+48h+var_3C], offset aCouldNotConn_1 ; "Could not connect to host %s: network u"...
		jmp	short loc_62B86721
; ---------------------------------------------------------------------------
		align 10h

loc_62B86770:				; CODE XREF: sub_62B86660:loc_62B866F4j
					; DATA XREF: .rdata:off_62BA8604o
		mov	edx, [ecx+18h]	; jumptable 62B866F4 case 2
		mov	edx, [edx+48h]
		mov	esi, [eax+8]
		mov	[esp+48h+var_38], esi
		mov	[esp+48h+var_3C], offset aCouldNotConn_2 ; "Could not connect to host %s: unknown h"...
		jmp	short loc_62B86721
; ---------------------------------------------------------------------------
		align 4

loc_62B86788:				; CODE XREF: sub_62B86660:loc_62B866F4j
					; DATA XREF: .rdata:off_62BA8604o
		mov	edx, [ecx+18h]	; jumptable 62B866F4 case 1
		mov	edx, [edx+48h]
		mov	esi, [eax+8]
		mov	[esp+48h+var_38], esi
		mov	[esp+48h+var_3C], offset aCouldNotConn_3 ; "Could not connect to host %s: unknown I"...
		jmp	short loc_62B86721
; ---------------------------------------------------------------------------
		align 10h

loc_62B867A0:				; CODE XREF: sub_62B86660:loc_62B866F4j
					; DATA XREF: .rdata:off_62BA8604o
		mov	edx, [ecx+18h]	; jumptable 62B866F4 case 5
		mov	edx, [edx+48h]
		mov	esi, [eax+8]
		mov	[esp+48h+var_38], esi
		mov	[esp+48h+var_3C], offset aCouldNotConn_4 ; "Could not connect to host %s: connectio"...
		jmp	loc_62B86721
sub_62B86660	endp

; ---------------------------------------------------------------------------
		align 4
; Exported entry 205. silc_client_st_connect_auth_resolve

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public silc_client_st_connect_auth_resolve
silc_client_st_connect_auth_resolve proc near
					; DATA XREF: silc_client_st_connect_setup_udp+A9o
					; silc_client_st_connect_key_exchange+C6o

var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		push	esi
		push	ebx
		sub	esp, 20h
		mov	esi, [ebp+arg_0]
		mov	ebx, [ebp+arg_4]
		mov	eax, [ebx+54h]
		test	byte ptr [eax+12Dh], 2
		jnz	loc_62B86884
		cmp	byte ptr [eax+9], 0
		jnz	loc_62B86868
		mov	[esp+28h+var_C], 1Dh
		mov	[esp+28h+var_10], 0
		mov	[esp+28h+var_14], 3
		mov	[esp+28h+var_18], 1
		mov	[esp+28h+var_1C], 3
		mov	[esp+28h+var_20], 0
		mov	[esp+28h+var_24], 10h
		mov	eax, [ebx+3Ch]
		mov	[esp+28h+var_28], eax
		call	silc_packet_send_va
		mov	eax, [ebx+54h]
		or	byte ptr [eax+12Dh], 80h
		mov	eax, [ebx+54h]
		mov	word ptr [eax+0Ah], 0
		mov	[esp+28h+var_1C], 0
		mov	[esp+28h+var_20], 2
		mov	[esp+28h+var_24], offset silc_client_st_connect_auth_data
		mov	[esp+28h+var_28], esi
		call	silc_fsm_next_later
		mov	eax, 2
		add	esp, 20h
		pop	ebx
		pop	esi
		leave
		retn
; ---------------------------------------------------------------------------
		align 4

loc_62B86868:				; CODE XREF: silc_client_st_connect_auth_resolve+22j
		mov	[esp+28h+var_24], offset silc_client_st_connect_auth_start
		mov	[esp+28h+var_28], esi
		call	silc_fsm_next
		xor	eax, eax
		add	esp, 20h
		pop	ebx
		pop	esi
		leave
		retn
; ---------------------------------------------------------------------------
		align 4

loc_62B86884:				; CODE XREF: silc_client_st_connect_auth_resolve+18j
		mov	[esp+28h+var_24], offset silc_client_st_connect_error
		mov	[esp+28h+var_28], esi
		call	silc_fsm_next
		xor	eax, eax
		add	esp, 20h
		pop	ebx
		pop	esi
		leave
		retn
silc_client_st_connect_auth_resolve endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 210. silc_client_st_connect_setup_udp

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public silc_client_st_connect_setup_udp
silc_client_st_connect_setup_udp proc near
					; DATA XREF: silc_client_st_connect_key_exchange:loc_62B86B28o

var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_1C		= dword	ptr -1Ch
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		sub	esp, 3Ch
		mov	esi, [ebp+arg_0]
		mov	ebx, [ebp+arg_4]
		mov	eax, [ebx+54h]
		test	byte ptr [eax+12Dh], 2
		jnz	loc_62B86974
		mov	eax, [eax+0BCh]
		mov	[esp+48h+var_48], eax
		call	silc_ske_get_security_properties
		mov	edx, [ebx+54h]
		mov	ecx, [edx+0B4h]
		mov	[esp+48h+var_38], ecx
		movzx	eax, word ptr [eax+18h]
		mov	[esp+48h+var_3C], eax
		mov	eax, [ebx+8]
		mov	[esp+48h+var_40], eax
		mov	eax, [edx+20h]
		mov	[esp+48h+var_44], eax
		mov	eax, [edx+18h]
		mov	[esp+48h+var_48], eax
		call	silc_net_udp_connect
		mov	edi, eax
		test	eax, eax
		jz	short loc_62B86964
		mov	eax, [ebx+3Ch]
		mov	[esp+48h+var_48], eax
		call	silc_packet_stream_get_stream
		mov	edx, eax
		mov	[esp+48h+var_44], edi
		mov	eax, [ebx+3Ch]
		mov	[esp+48h+var_48], eax
		mov	[ebp+var_1C], edx
		call	silc_packet_stream_set_stream
		mov	eax, [ebx+3Ch]
		mov	[esp+48h+var_48], eax
		call	silc_packet_stream_set_iv_included
		mov	[esp+48h+var_44], 0
		mov	eax, [ebx+3Ch]
		mov	[esp+48h+var_48], eax
		call	silc_packet_set_sid
		mov	edx, [ebp+var_1C]
		mov	[esp+48h+var_48], edx
		call	silc_stream_destroy
		mov	[esp+48h+var_44], offset silc_client_st_connect_auth_resolve
		mov	[esp+48h+var_48], esi
		call	silc_fsm_next
		xor	eax, eax
		add	esp, 3Ch
		pop	ebx
		pop	esi
		pop	edi
		leave
		retn
; ---------------------------------------------------------------------------
		align 4

loc_62B86964:				; CODE XREF: silc_client_st_connect_setup_udp+5Fj
		mov	eax, [ebx+54h]
		mov	dword ptr [eax+128h], 3
		lea	esi, [esi+0]

loc_62B86974:				; CODE XREF: silc_client_st_connect_setup_udp+19j
		mov	[esp+48h+var_44], offset silc_client_st_connect_error
		mov	[esp+48h+var_48], esi
		call	silc_fsm_next
		xor	eax, eax
		add	esp, 3Ch
		pop	ebx
		pop	esi
		pop	edi
		leave
		retn
silc_client_st_connect_setup_udp endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 208. silc_client_st_connect_key_exchange

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public silc_client_st_connect_key_exchange
silc_client_st_connect_key_exchange proc near
					; DATA XREF: silc_client_st_connect_set_stream+52o

var_78		= dword	ptr -78h
var_74		= dword	ptr -74h
var_70		= dword	ptr -70h
var_6C		= dword	ptr -6Ch
var_68		= dword	ptr -68h
var_64		= dword	ptr -64h
var_4C		= dword	ptr -4Ch
var_41		= byte ptr -41h
var_31		= byte ptr -31h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= word ptr -1Ch
var_1A		= word ptr -1Ah
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		sub	esp, 6Ch
		mov	esi, [ebp+arg_0]
		mov	ebx, [ebp+arg_4]
		mov	edx, [ebx+4Ch]
		mov	edi, [ebx+54h]
		mov	[esp+78h+var_64], esi
		mov	eax, [ebx+38h]
		mov	[esp+78h+var_68], eax
		mov	eax, [ebx+34h]
		mov	[esp+78h+var_6C], eax
		mov	eax, [edi+4]
		mov	[esp+78h+var_70], eax
		mov	eax, [edi+0B4h]
		mov	[esp+78h+var_74], eax
		mov	eax, [edx+10h]
		mov	[esp+78h+var_78], eax
		mov	[ebp+var_4C], edx
		call	silc_ske_alloc
		mov	[edi+0BCh], eax
		mov	ecx, [ebx+54h]
		mov	eax, [ecx+0BCh]
		test	eax, eax
		mov	edx, [ebp+var_4C]
		jz	loc_62B86B74
		mov	[esp+78h+var_6C], esi
		mov	[esp+78h+var_70], offset sub_62B86C4C
		mov	[esp+78h+var_74], offset sub_62B86B98
		mov	[esp+78h+var_78], eax
		mov	[ebp+var_4C], edx
		call	silc_ske_set_callbacks
		mov	edx, [ebp+var_4C]
		mov	eax, [edx+18h]
		mov	eax, [eax+70h]
		mov	[ebp+var_24], eax
		mov	eax, [ebx+54h]
		mov	edx, [eax+30h]
		mov	[ebp+var_1A], dx
		mov	[ebp+var_20], 4
		cmp	byte ptr [eax+24h], 0
		jz	short loc_62B86A39
		mov	[ebp+var_20], 6

loc_62B86A39:				; CODE XREF: silc_client_st_connect_key_exchange+A0j
		mov	dl, [eax+14h]
		test	dl, dl
		jnz	loc_62B86AFC
		cmp	byte ptr [eax+25h], 0
		jnz	loc_62B86B11

loc_62B86A4E:				; CODE XREF: silc_client_st_connect_key_exchange+17Bj
		test	dl, dl
		jnz	loc_62B86B28
		mov	[esp+78h+var_74], offset silc_client_st_connect_auth_resolve
		mov	[esp+78h+var_78], esi
		call	silc_fsm_next

loc_62B86A66:				; CODE XREF: silc_client_st_connect_key_exchange+191j
					; silc_client_st_connect_key_exchange+1A8j
		lea	edx, [ebp+var_41]
		mov	ecx, 1Dh
		xor	eax, eax
		mov	edi, edx
		rep stosb
		mov	[ebp+var_31], 4
		mov	[esp+78h+var_68], 0
		mov	[esp+78h+var_6C], 0
		mov	[esp+78h+var_70], edx
		mov	[esp+78h+var_74], 2
		mov	eax, [ebx+3Ch]
		mov	[esp+78h+var_78], eax
		call	silc_packet_set_ids
		mov	al, [esi+28h]
		mov	dl, al
		or	edx, 4
		mov	[esi+28h], dl
		test	al, 4
		jnz	loc_62B86B40

loc_62B86AB2:				; CODE XREF: silc_client_st_connect_key_exchange+1DCj
		mov	edi, [ebx+54h]
		mov	[esp+78h+var_6C], 0
		lea	eax, [ebp+var_24]
		mov	[esp+78h+var_70], eax
		mov	eax, [ebx+3Ch]
		mov	[esp+78h+var_74], eax
		mov	eax, [edi+0BCh]
		mov	[esp+78h+var_78], eax
		call	silc_ske_initiator
		mov	[edi+0FCh], eax
		mov	dl, [esi+28h]
		mov	al, dl
		shr	al, 2
		and	edx, 0FFFFFFFBh
		mov	[esi+28h], dl
		shl	eax, 1
		and	eax, 2
		add	esp, 6Ch
		pop	ebx
		pop	esi
		pop	edi
		leave
		retn
; ---------------------------------------------------------------------------
		align 4

loc_62B86AFC:				; CODE XREF: silc_client_st_connect_key_exchange+AEj
		or	[ebp+var_20], 1
		mov	ecx, [eax+20h]
		mov	[ebp+var_1C], cx
		cmp	byte ptr [eax+25h], 0
		jz	loc_62B86A4E

loc_62B86B11:				; CODE XREF: silc_client_st_connect_key_exchange+B8j
		mov	[esp+78h+var_74], offset silc_client_st_connected
		mov	[esp+78h+var_78], esi
		call	silc_fsm_next
		jmp	loc_62B86A66
; ---------------------------------------------------------------------------
		align 4

loc_62B86B28:				; CODE XREF: silc_client_st_connect_key_exchange+C0j
		mov	[esp+78h+var_74], offset silc_client_st_connect_setup_udp
		mov	[esp+78h+var_78], esi
		call	silc_fsm_next
		jmp	loc_62B86A66
; ---------------------------------------------------------------------------
		align 10h

loc_62B86B40:				; CODE XREF: silc_client_st_connect_key_exchange+11Cj
		mov	[esp+78h+var_70], 206h
		mov	[esp+78h+var_74], offset aClient_connect ; "client_connect.c"
		mov	[esp+78h+var_78], offset aSilc_verifyS_0 ; "SILC_VERIFY	%s:%d"
		call	silc_format
		mov	[esp+78h+var_74], eax
		mov	[esp+78h+var_78], 3
		call	silc_log_output
		jmp	loc_62B86AB2
; ---------------------------------------------------------------------------
		align 4

loc_62B86B74:				; CODE XREF: silc_client_st_connect_key_exchange+5Aj
		mov	dword ptr [ecx+128h], 4
		mov	[esp+78h+var_74], offset silc_client_st_connect_error
		mov	[esp+78h+var_78], esi
		call	silc_fsm_next
		xor	eax, eax
		add	esp, 6Ch
		pop	ebx
		pop	esi
		pop	edi
		leave
		retn
silc_client_st_connect_key_exchange endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_62B86B98	proc near		; DATA XREF: silc_client_st_connect_key_exchange+6Co

var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h
arg_10		= dword	ptr  18h

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		sub	esp, 3Ch
		mov	eax, [ebp+arg_0]
		mov	[ebp+var_1C], eax
		mov	edx, [ebp+arg_4]
		mov	[ebp+var_24], edx
		mov	ecx, [ebp+arg_C]
		mov	[ebp+var_20], ecx
		mov	edi, [ebp+arg_10]
		mov	eax, [ebp+arg_8]
		mov	[esp+48h+var_48], eax
		call	silc_fsm_get_context
		mov	ebx, eax
		mov	esi, [eax+4Ch]
		mov	eax, [eax+54h]
		mov	ecx, [eax+4]
		test	ecx, ecx
		jz	short loc_62B86BD6
		cmp	byte ptr [eax+8], 0
		jz	short loc_62B86C30

loc_62B86BD6:				; CODE XREF: sub_62B86B98+36j
		mov	[esp+48h+var_44], 0Ch
		mov	[esp+48h+var_48], 1
		call	silc_calloc
		test	eax, eax
		jz	short loc_62B86C30
		mov	edx, [ebp+var_1C]
		mov	[eax], edx
		mov	ecx, [ebp+var_20]
		mov	[eax+4], ecx
		mov	[eax+8], edi
		mov	edx, [esi+18h]
		mov	edx, [edx+48h]
		mov	[esp+48h+var_34], eax
		mov	[esp+48h+var_38], offset sub_62B86090
		mov	eax, [ebp+var_24]
		mov	[esp+48h+var_3C], eax
		mov	eax, [ebx+40h]
		mov	[esp+48h+var_40], eax
		mov	[esp+48h+var_44], ebx
		mov	[esp+48h+var_48], esi
		call	dword ptr [edx+1Ch]
		add	esp, 3Ch
		pop	ebx
		pop	esi
		pop	edi
		leave
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_62B86C30:				; CODE XREF: sub_62B86B98+3Cj
					; sub_62B86B98+54j
		mov	[ebp+arg_8], edi
		mov	[ebp+arg_4], 8
		mov	eax, [ebp+var_1C]
		mov	[ebp+arg_0], eax
		mov	ecx, [ebp+var_20]
		add	esp, 3Ch
		pop	ebx
		pop	esi
		pop	edi
		leave
		jmp	ecx
sub_62B86B98	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_62B86C4C	proc near		; DATA XREF: silc_client_st_connect_key_exchange+64o

var_58		= dword	ptr -58h
var_54		= dword	ptr -54h
var_50		= dword	ptr -50h
var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_3C		= dword	ptr -3Ch
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h
arg_10		= dword	ptr  18h
arg_14		= dword	ptr  1Ch

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		sub	esp, 4Ch
		mov	edi, [ebp+arg_4]
		mov	ebx, [ebp+arg_14]
		mov	[esp+58h+var_58], ebx
		call	silc_fsm_get_context
		mov	esi, eax
		mov	edx, [eax+4Ch]
		mov	eax, [eax+54h]
		mov	dword ptr [eax+0FCh], 0
		test	edi, edi
		jz	short loc_62B86CD4
		test	byte ptr [eax+12Dh], 10h
		jnz	loc_62B86D58

loc_62B86C86:				; CODE XREF: sub_62B86C4C+14Dj
					; sub_62B86C4C+1C7j ...
		mov	dword ptr [eax+128h], 4
		mov	eax, [ebp+arg_10]
		mov	[esp+58h+var_58], eax
		call	silc_ske_free_rekey_material
		mov	[esp+58h+var_54], offset silc_client_st_connect_error
		mov	[esp+58h+var_58], ebx
		call	silc_fsm_next

loc_62B86CAB:				; CODE XREF: sub_62B86C4C+105j
					; sub_62B86C4C+208j
		mov	al, [ebx+28h]
		mov	dl, al
		and	edx, 0FFFFFFFBh
		mov	[ebx+28h], dl
		test	al, 4
		jz	short loc_62B86CC4
		add	esp, 4Ch
		pop	ebx
		pop	esi
		pop	edi
		leave
		retn
; ---------------------------------------------------------------------------
		align 4

loc_62B86CC4:				; CODE XREF: sub_62B86C4C+6Cj
		mov	[esp+58h+var_58], ebx
		call	silc_fsm_continue_sync
		add	esp, 4Ch
		pop	ebx
		pop	esi
		pop	edi
		leave
		retn
; ---------------------------------------------------------------------------

loc_62B86CD4:				; CODE XREF: sub_62B86C4C+2Bj
		add	eax, 0ECh
		mov	[esp+58h+var_3C], eax
		lea	eax, [ebp+var_28]
		mov	[esp+58h+var_40], eax
		lea	eax, [ebp+var_24]
		mov	[esp+58h+var_44], eax
		lea	eax, [ebp+var_20]
		mov	[esp+58h+var_48], eax
		lea	eax, [ebp+var_1C]
		mov	[esp+58h+var_4C], eax
		mov	eax, [ebp+arg_8]
		mov	[esp+58h+var_50], eax
		mov	eax, [ebp+arg_C]
		mov	[esp+58h+var_54], eax
		mov	eax, [ebp+arg_0]
		mov	[esp+58h+var_58], eax
		mov	[ebp+var_30], edx
		call	silc_ske_set_keys
		test	al, al
		mov	edx, [ebp+var_30]
		jnz	loc_62B86DD0
		mov	eax, [esi+54h]
		test	byte ptr [eax+12Dh], 10h
		jnz	short loc_62B86DA0

loc_62B86D2C:				; CODE XREF: sub_62B86C4C+17Dj
		mov	dword ptr [eax+128h], 4
		mov	edx, [ebp+arg_10]
		mov	[esp+58h+var_58], edx
		call	silc_ske_free_rekey_material
		mov	[esp+58h+var_54], offset silc_client_st_connect_error
		mov	[esp+58h+var_58], ebx
		call	silc_fsm_next
		jmp	loc_62B86CAB
; ---------------------------------------------------------------------------
		align 4

loc_62B86D58:				; CODE XREF: sub_62B86C4C+34j
		mov	eax, [edx+18h]
		mov	eax, [eax+48h]
		mov	eax, [eax]
		mov	[ebp+var_2C], eax
		mov	[esp+58h+var_58], edi
		mov	[ebp+var_30], edx
		call	silc_ske_map_status
		mov	[esp+58h+var_44], eax
		mov	eax, [esi+8]
		mov	[esp+58h+var_48], eax
		mov	[esp+58h+var_4C], offset aErrorDuringKey ; "Error during key exchange with %s: %s"
		mov	[esp+58h+var_50], 2
		mov	[esp+58h+var_54], esi
		mov	edx, [ebp+var_30]
		mov	[esp+58h+var_58], edx
		call	[ebp+var_2C]
		mov	eax, [esi+54h]
		jmp	loc_62B86C86
; ---------------------------------------------------------------------------
		align 10h

loc_62B86DA0:				; CODE XREF: sub_62B86C4C+DEj
		mov	eax, [edx+18h]
		mov	eax, [eax+48h]
		mov	ecx, [esi+8]
		mov	[esp+58h+var_48], ecx
		mov	[esp+58h+var_4C], offset aErrorDuringK_0 ; "Error during key exchange with %s: cann"...
		mov	[esp+58h+var_50], 2
		mov	[esp+58h+var_54], esi
		mov	[esp+58h+var_58], edx
		call	dword ptr [eax]
		mov	eax, [esi+54h]
		jmp	loc_62B86D2C
; ---------------------------------------------------------------------------
		align 10h

loc_62B86DD0:				; CODE XREF: sub_62B86C4C+CEj
		mov	[esp+58h+var_44], 0
		mov	eax, [ebp+var_28]
		mov	[esp+58h+var_48], eax
		mov	eax, [ebp+var_24]
		mov	[esp+58h+var_4C], eax
		mov	eax, [ebp+var_20]
		mov	[esp+58h+var_50], eax
		mov	eax, [ebp+var_1C]
		mov	[esp+58h+var_54], eax
		mov	eax, [esi+3Ch]
		mov	[esp+58h+var_58], eax
		mov	[ebp+var_30], edx
		call	silc_packet_set_keys
		test	al, al
		mov	edx, [ebp+var_30]
		jnz	short loc_62B86E48
		mov	eax, [esi+54h]
		test	byte ptr [eax+12Dh], 10h
		jz	loc_62B86C86
		mov	eax, [edx+18h]
		mov	eax, [eax+48h]
		mov	ecx, [esi+8]
		mov	[esp+58h+var_48], ecx
		mov	[esp+58h+var_4C], offset aErrorDuringK_0 ; "Error during key exchange with %s: cann"...
		mov	[esp+58h+var_50], 2
		mov	[esp+58h+var_54], esi
		mov	[esp+58h+var_58], edx
		call	dword ptr [eax]
		mov	eax, [esi+54h]
		jmp	loc_62B86C86
; ---------------------------------------------------------------------------
		align 4

loc_62B86E48:				; CODE XREF: sub_62B86C4C+1BBj
		mov	eax, [esi+54h]
		mov	edx, [ebp+arg_10]
		mov	[eax+0C0h], edx
		jmp	loc_62B86CAB
sub_62B86C4C	endp

; ---------------------------------------------------------------------------
		align 4
; Exported entry 209. silc_client_st_connect_set_stream

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public silc_client_st_connect_set_stream
silc_client_st_connect_set_stream proc near ; DATA XREF: silc_client_connection_st_run+148o
					; silc_client_st_connect+Fo

var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		push	esi
		push	ebx
		sub	esp, 10h
		mov	esi, [ebp+arg_0]
		mov	ebx, [ebp+arg_4]
		mov	edx, [ebx+4Ch]
		mov	eax, [ebx+54h]
		test	byte ptr [eax+12Dh], 2
		jnz	short loc_62B86ED8
		mov	ecx, [eax+108h]
		mov	[esp+18h+var_10], ecx
		mov	eax, [eax+0B4h]
		mov	[esp+18h+var_14], eax
		mov	eax, [edx+18h]
		mov	eax, [eax+50h]
		mov	[esp+18h+var_18], eax
		call	silc_packet_stream_create
		mov	[ebx+3Ch], eax
		test	eax, eax
		jz	short loc_62B86EC8
		mov	[esp+18h+var_14], ebx
		mov	[esp+18h+var_18], eax
		call	silc_packet_set_context
		mov	[esp+18h+var_14], offset silc_client_st_connect_key_exchange
		mov	[esp+18h+var_18], esi
		call	silc_fsm_next
		xor	eax, eax
		add	esp, 10h
		pop	ebx
		pop	esi
		leave
		retn
; ---------------------------------------------------------------------------
		align 4

loc_62B86EC8:				; CODE XREF: silc_client_st_connect_set_stream+44j
		mov	eax, [ebx+54h]
		mov	dword ptr [eax+128h], 3
		lea	esi, [esi+0]

loc_62B86ED8:				; CODE XREF: silc_client_st_connect_set_stream+1Bj
		mov	[esp+18h+var_14], offset silc_client_st_connect_error
		mov	[esp+18h+var_18], esi
		call	silc_fsm_next
		xor	eax, eax
		add	esp, 10h
		pop	ebx
		pop	esi
		leave
		retn
silc_client_st_connect_set_stream endp

; ---------------------------------------------------------------------------
		align 4
; Exported entry 203. silc_client_st_connect

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public silc_client_st_connect
silc_client_st_connect proc near	; DATA XREF: silc_client_connection_st_run+F8o

var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_1C		= dword	ptr -1Ch
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		sub	esp, 3Ch
		mov	ebx, [ebp+arg_0]
		mov	esi, [ebp+arg_4]
		mov	[esp+48h+var_44], offset silc_client_st_connect_set_stream
		mov	[esp+48h+var_48], ebx
		call	silc_fsm_next
		mov	eax, [esi+54h]
		mov	edx, [eax+30h]
		test	edx, edx
		jnz	loc_62B8701C

loc_62B86F21:				; CODE XREF: silc_client_st_connect+161j
		cmp	byte ptr [eax+14h], 0
		jz	loc_62B86FB4
		mov	edx, [eax+18h]
		test	edx, edx
		jz	loc_62B870C4
		mov	edi, [eax+0B4h]
		mov	ecx, [esi+0Ch]
		mov	[ebp+var_1C], ecx
		mov	esi, [esi+8]
		mov	ecx, [eax+20h]
		mov	eax, [eax+1Ch]
		test	eax, eax
		jz	short loc_62B86F51
		mov	edx, eax

loc_62B86F51:				; CODE XREF: silc_client_st_connect+59j
		mov	[esp+48h+var_38], edi
		mov	eax, [ebp+var_1C]
		mov	[esp+48h+var_3C], eax
		mov	[esp+48h+var_40], esi
		mov	[esp+48h+var_44], ecx
		mov	[esp+48h+var_48], edx
		call	silc_net_udp_connect
		mov	esi, eax
		mov	al, [ebx+28h]
		mov	dl, al
		or	edx, 4
		mov	[ebx+28h], dl
		test	al, 4
		jnz	loc_62B87090

loc_62B86F81:				; CODE XREF: silc_client_st_connect+1C8j
		cmp	esi, 1
		sbb	eax, eax
		and	eax, 3
		mov	[esp+48h+var_40], ebx
		mov	[esp+48h+var_44], esi
		mov	[esp+48h+var_48], eax
		call	sub_62B86660
		mov	al, [ebx+28h]
		mov	dl, al
		and	edx, 0FFFFFFFBh
		mov	[ebx+28h], dl
		test	al, 4
		jnz	short loc_62B8700F

loc_62B86FA8:				; CODE XREF: silc_client_st_connect+119j
		xor	eax, eax
		add	esp, 3Ch
		pop	ebx
		pop	esi
		pop	edi
		leave
		retn
; ---------------------------------------------------------------------------
		align 4

loc_62B86FB4:				; CODE XREF: silc_client_st_connect+31j
		mov	al, [ebx+28h]
		mov	dl, al
		or	edx, 4
		mov	[ebx+28h], dl
		test	al, 4
		jnz	loc_62B8705C

loc_62B86FC7:				; CODE XREF: silc_client_st_connect+194j
		mov	edi, [esi+54h]
		mov	[esp+48h+var_34], ebx
		mov	[esp+48h+var_38], offset sub_62B86660
		mov	eax, [edi+0B4h]
		mov	[esp+48h+var_3C], eax
		mov	eax, [esi+0Ch]
		mov	[esp+48h+var_40], eax
		mov	eax, [esi+8]
		mov	[esp+48h+var_44], eax
		mov	[esp+48h+var_48], 0
		call	silc_net_tcp_connect
		mov	[edi+0FCh], eax
		mov	al, [ebx+28h]
		mov	dl, al
		and	edx, 0FFFFFFFBh
		mov	[ebx+28h], dl
		test	al, 4
		jz	short loc_62B86FA8

loc_62B8700F:				; CODE XREF: silc_client_st_connect+B2j
		mov	eax, 2

loc_62B87014:				; CODE XREF: silc_client_st_connect+20Bj
		add	esp, 3Ch
		pop	ebx
		pop	esi
		pop	edi
		leave
		retn
; ---------------------------------------------------------------------------

loc_62B8701C:				; CODE XREF: silc_client_st_connect+27j
		mov	[esp+48h+var_30], 1
		mov	[esp+48h+var_34], 0
		mov	[esp+48h+var_38], edx
		mov	[esp+48h+var_3C], esi
		mov	[esp+48h+var_40], offset silc_client_connect_timeout
		mov	[esp+48h+var_44], 0
		mov	eax, [eax+0B4h]
		mov	[esp+48h+var_48], eax
		call	silc_schedule_task_add
		mov	eax, [esi+54h]
		jmp	loc_62B86F21
; ---------------------------------------------------------------------------
		align 4

loc_62B8705C:				; CODE XREF: silc_client_st_connect+CDj
		mov	[esp+48h+var_40], 1AAh
		mov	[esp+48h+var_44], offset aClient_connect ; "client_connect.c"
		mov	[esp+48h+var_48], offset aSilc_verifyS_0 ; "SILC_VERIFY	%s:%d"
		call	silc_format
		mov	[esp+48h+var_44], eax
		mov	[esp+48h+var_48], 3
		call	silc_log_output
		jmp	loc_62B86FC7
; ---------------------------------------------------------------------------
		align 10h

loc_62B87090:				; CODE XREF: silc_client_st_connect+87j
		mov	[esp+48h+var_40], 1A3h
		mov	[esp+48h+var_44], offset aClient_connect ; "client_connect.c"
		mov	[esp+48h+var_48], offset aSilc_verifyS_0 ; "SILC_VERIFY	%s:%d"
		call	silc_format
		mov	[esp+48h+var_44], eax
		mov	[esp+48h+var_48], 3
		call	silc_log_output
		jmp	loc_62B86F81
; ---------------------------------------------------------------------------
		align 4

loc_62B870C4:				; CODE XREF: silc_client_st_connect+3Cj
		mov	[esp+48h+var_48], offset aLocalUdpIpAddr ; "Local UDP IP address not specified"
		call	silc_format
		mov	[esp+48h+var_44], eax
		mov	[esp+48h+var_48], 3
		call	silc_log_output
		mov	eax, [esi+54h]
		mov	dword ptr [eax+128h], 3
		mov	[esp+48h+var_44], offset silc_client_st_connect_error
		mov	[esp+48h+var_48], ebx
		call	silc_fsm_next
		xor	eax, eax
		jmp	loc_62B87014
silc_client_st_connect endp

; Exported entry  94. silc_client_connect_auth_request

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public silc_client_connect_auth_request
silc_client_connect_auth_request proc near
					; DATA XREF: silc_client_connection_st_packet:loc_62B81F58o

var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_C		= dword	ptr -0Ch
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		push	esi
		push	ebx
		sub	esp, 30h
		mov	ebx, [ebp+arg_4]
		mov	esi, [ebp+arg_8]
		mov	eax, [ebx+54h]
		cmp	byte ptr [eax+12Dh], 0
		jns	short loc_62B8717C
		mov	[esp+38h+var_24], 1Dh
		lea	eax, [ebp+var_C]
		mov	[esp+38h+var_28], eax
		mov	[esp+38h+var_2C], 3
		lea	eax, [ebp+var_C+2]
		mov	[esp+38h+var_30], eax
		mov	[esp+38h+var_34], 3
		lea	eax, [esi+8]
		mov	[esp+38h+var_38], eax
		call	silc_buffer_unformat
		test	eax, eax
		js	short loc_62B87190

loc_62B87153:				; CODE XREF: silc_client_connect_auth_request+92j
		mov	[esp+38h+var_38], esi
		call	silc_packet_free
		mov	eax, [ebx+54h]
		mov	edx, [ebp+var_C]
		mov	[eax+0Ah], dx
		add	eax, 6Ch
		mov	[esp+38h+var_38], eax
		call	silc_fsm_continue_sync
		mov	eax, 3
		add	esp, 30h
		pop	ebx
		pop	esi
		leave
		retn
; ---------------------------------------------------------------------------

loc_62B8717C:				; CODE XREF: silc_client_connect_auth_request+18j
		mov	[esp+38h+var_38], esi
		call	silc_packet_free
		mov	eax, 3
		add	esp, 30h
		pop	ebx
		pop	esi
		leave
		retn
; ---------------------------------------------------------------------------

loc_62B87190:				; CODE XREF: silc_client_connect_auth_request+4Dj
		mov	word ptr [ebp+var_C], 0
		jmp	short loc_62B87153
silc_client_connect_auth_request endp

; Exported entry 189. silc_client_ref_client

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public silc_client_ref_client
silc_client_ref_client proc near	; CODE XREF: silc_client_add_to_channel+7Ep
					; silc_client_ftp+1B7p	...

arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		mov	eax, [ebp+arg_8]
		mov	edx, [eax+3F8h]
		mov	edx, [eax+3F8h]
		inc	edx
		mov	[eax+3F8h], edx
		leave
		retn
silc_client_ref_client endp

; ---------------------------------------------------------------------------
		align 4
; Exported entry 188. silc_client_ref_channel

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public silc_client_ref_channel
silc_client_ref_channel	proc near	; CODE XREF: silc_client_add_to_channel+91p
					; silc_client_save_channel_key+8Ep ...

arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		mov	eax, [ebp+arg_8]
		mov	edx, [eax+174h]
		mov	edx, [eax+174h]
		inc	edx
		mov	[eax+174h], edx
		leave
		retn
silc_client_ref_channel	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 190. silc_client_ref_server

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public silc_client_ref_server
silc_client_ref_server proc near	; CODE XREF: silc_client_command_reply_info+377p
					; silc_client_command_reply_identify+48Ep

arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		mov	eax, [ebp+arg_8]
		mov	edx, [eax+30h]
		mov	edx, [eax+30h]
		inc	edx
		mov	[eax+30h], edx
		leave
		retn
silc_client_ref_server endp

; ---------------------------------------------------------------------------
		align 4

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_62B871E4	proc near		; CODE XREF: silc_client_unref_channel:loc_62B87AE7p
					; silc_client_unref_channel:loc_62B87B57p ...

var_48		= dword	ptr -48h
var_2C		= dword	ptr -2Ch

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		sub	esp, 3Ch
		mov	esi, eax
		test	eax, eax
		jz	short loc_62B8724F
		mov	ebx, [eax]
		mov	[eax+8], ebx
		and	byte ptr [eax+10h], 0FDh
		test	ebx, ebx
		jz	short loc_62B87247

loc_62B87200:				; CODE XREF: sub_62B871E4+61j
		test	byte ptr [esi+10h], 2
		jz	short loc_62B87258
		movzx	eax, word ptr [esi+0Eh]
		mov	eax, [ebx+eax]

loc_62B8720D:				; CODE XREF: sub_62B871E4+7Bj
		mov	[esi+8], eax
		mov	eax, [esi]
		test	eax, eax
		jz	short loc_62B87233
		cmp	ebx, eax
		jz	loc_62B872A0
		movzx	edi, word ptr [esi+0Ch]
		jmp	short loc_62B8722A
; ---------------------------------------------------------------------------

loc_62B87224:				; CODE XREF: sub_62B871E4+4Dj
		cmp	ebx, ecx
		jz	short loc_62B87264
		mov	eax, ecx

loc_62B8722A:				; CODE XREF: sub_62B871E4+3Ej
		lea	edx, [eax+edi]
		mov	ecx, [edx]
		test	ecx, ecx
		jnz	short loc_62B87224

loc_62B87233:				; CODE XREF: sub_62B871E4+30j
		cmp	[esi+4], ebx
		jz	short loc_62B87291

loc_62B87238:				; CODE XREF: sub_62B871E4+ABj
					; sub_62B871E4+B0j
		mov	[esp+48h+var_48], ebx
		call	silc_free
		mov	ebx, [esi+8]
		test	ebx, ebx
		jnz	short loc_62B87200

loc_62B87247:				; CODE XREF: sub_62B871E4+1Aj
		mov	[esp+48h+var_48], esi
		call	silc_free

loc_62B8724F:				; CODE XREF: sub_62B871E4+Dj
		add	esp, 3Ch
		pop	ebx
		pop	esi
		pop	edi
		leave
		retn
; ---------------------------------------------------------------------------
		align 4

loc_62B87258:				; CODE XREF: sub_62B871E4+20j
		movzx	eax, word ptr [esi+0Ch]
		mov	eax, [ebx+eax]
		jmp	short loc_62B8720D
; ---------------------------------------------------------------------------
		align 4

loc_62B87264:				; CODE XREF: sub_62B871E4+42j
		mov	[ebp+var_2C], edx

loc_62B87267:				; CODE XREF: sub_62B871E4+C5j
		mov	ecx, [ebx+edi]
		mov	edx, [ebp+var_2C]
		mov	[edx], ecx
		test	ecx, ecx
		jz	short loc_62B87283
		test	byte ptr [esi+10h], 1
		jz	short loc_62B87283
		movzx	edi, word ptr [esi+0Eh]
		mov	edx, [ebx+edi]
		mov	[ecx+edi], edx

loc_62B87283:				; CODE XREF: sub_62B871E4+8Dj
					; sub_62B871E4+93j
		cmp	[esi+8], ebx
		jz	short loc_62B87296

loc_62B87288:				; CODE XREF: sub_62B871E4+BAj
		sub	dword ptr [esi+10h], 4
		cmp	[esi+4], ebx
		jnz	short loc_62B87238

loc_62B87291:				; CODE XREF: sub_62B871E4+52j
		mov	[esi+4], eax
		jmp	short loc_62B87238
; ---------------------------------------------------------------------------

loc_62B87296:				; CODE XREF: sub_62B871E4+A2j
		mov	ecx, [ebp+var_2C]
		mov	edx, [ecx]
		mov	[esi+8], edx
		jmp	short loc_62B87288
; ---------------------------------------------------------------------------

loc_62B872A0:				; CODE XREF: sub_62B871E4+34j
		movzx	edi, word ptr [esi+0Ch]
		mov	[ebp+var_2C], esi
		xor	eax, eax
		jmp	short loc_62B87267
sub_62B871E4	endp

; ---------------------------------------------------------------------------
		align 4

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_62B872AC	proc near		; CODE XREF: silc_client_add_server+15Cp
					; silc_client_add_server+164p ...
		push	ebp
		mov	ebp, esp
		mov	dword ptr [eax], 0
		leave
		retn
sub_62B872AC	endp

; ---------------------------------------------------------------------------
		align 4
; Exported entry 226. silc_client_unlock_server

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public silc_client_unlock_server
silc_client_unlock_server proc near

arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 8
		mov	eax, [ebp+arg_0]
		mov	eax, [eax+28h]
		mov	[ebp+arg_0], eax
		leave
		jmp	silc_rwlock_unlock
silc_client_unlock_server endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 224. silc_client_unlock_channel

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public silc_client_unlock_channel
silc_client_unlock_channel proc	near

arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 8
		mov	eax, [ebp+arg_0]
		mov	eax, [eax+144h]
		mov	[ebp+arg_0], eax
		leave
		jmp	silc_rwlock_unlock
silc_client_unlock_channel endp

; Exported entry 225. silc_client_unlock_client

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public silc_client_unlock_client
silc_client_unlock_client proc near

arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 8
		mov	eax, [ebp+arg_0]
		mov	eax, [eax+3D8h]
		mov	[ebp+arg_0], eax
		leave
		jmp	silc_rwlock_unlock
silc_client_unlock_client endp

; Exported entry 156. silc_client_lock_server

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public silc_client_lock_server
silc_client_lock_server	proc near

arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 8
		mov	eax, [ebp+arg_0]
		mov	eax, [eax+28h]
		mov	[ebp+arg_0], eax
		leave
		jmp	silc_rwlock_rdlock
silc_client_lock_server	endp

; ---------------------------------------------------------------------------
		align 4
; Exported entry 154. silc_client_lock_channel

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public silc_client_lock_channel
silc_client_lock_channel proc near

arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 8
		mov	eax, [ebp+arg_0]
		mov	eax, [eax+144h]
		mov	[ebp+arg_0], eax
		leave
		jmp	silc_rwlock_rdlock
silc_client_lock_channel endp

; Exported entry 155. silc_client_lock_client

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public silc_client_lock_client
silc_client_lock_client	proc near

arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 8
		mov	eax, [ebp+arg_0]
		mov	eax, [eax+3D8h]
		mov	[ebp+arg_0], eax
		leave
		jmp	silc_rwlock_rdlock
silc_client_lock_client	endp

; Exported entry 231. silc_client_update_server

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl silc_client_update_server(int, int, int, char *, char *)
		public silc_client_update_server
silc_client_update_server proc near	; CODE XREF: silc_client_command_reply_identify+2B9p

Src		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h
arg_10		= dword	ptr  18h

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		sub	esp, 2Ch
		mov	ebx, [ebp+arg_8]
		mov	esi, [ebp+arg_C]
		test	esi, esi
		jz	loc_62B87425
		mov	eax, [ebx]
		test	eax, eax
		jz	short loc_62B87379
		mov	[esp+38h+var_34], esi
		mov	[esp+38h+Src], eax
		call	silc_utf8_strcasecmp
		test	al, al
		jnz	loc_62B87425

loc_62B87379:				; CODE XREF: silc_client_update_server+1Bj
		xor	eax, eax
		mov	ecx, 0FFFFFFFFh
		mov	edi, esi
		repne scasb
		not	ecx
		dec	ecx
		mov	[esp+38h+var_28], 0
		mov	[esp+38h+var_2C], 100h
		mov	[esp+38h+var_30], 7
		mov	[esp+38h+var_34], ecx
		mov	[esp+38h+Src], esi
		call	silc_identifier_check
		mov	edi, eax
		test	eax, eax
		jz	loc_62B8745F
		mov	eax, [ebx]
		mov	[esp+38h+Src], eax
		call	silc_free
		mov	[esp+38h+Src], esi ; Src
		call	_strdup
		mov	[ebx], eax
		test	eax, eax
		jz	loc_62B8745F
		mov	edx, [ebp+arg_4]
		mov	eax, [edx+54h]
		mov	eax, [eax+0B8h]
		mov	[esp+38h+Src], eax
		call	silc_mutex_lock
		mov	[esp+38h+var_28], 1
		mov	[esp+38h+var_2C], edi
		mov	[esp+38h+var_30], 0
		mov	[esp+38h+var_34], ebx
		mov	edx, [ebp+arg_4]
		mov	eax, [edx+54h]
		mov	eax, [eax+11Ch]
		mov	[esp+38h+Src], eax
		call	silc_idcache_update_by_context
		mov	edx, [ebp+arg_4]
		mov	eax, [edx+54h]
		mov	eax, [eax+0B8h]
		mov	[esp+38h+Src], eax
		call	silc_mutex_unlock

loc_62B87425:				; CODE XREF: silc_client_update_server+11j
					; silc_client_update_server+2Bj
		mov	eax, [ebp+arg_10]
		test	eax, eax
		jz	short loc_62B8745F
		mov	eax, [ebx+4]
		test	eax, eax
		jz	short loc_62B87449
		mov	edx, [ebp+arg_10]
		mov	[esp+38h+var_34], edx
		mov	[esp+38h+Src], eax
		call	silc_utf8_strcasecmp
		test	al, al
		jnz	short loc_62B8745F
		mov	eax, [ebx+4]

loc_62B87449:				; CODE XREF: silc_client_update_server+E9j
		mov	[esp+38h+Src], eax
		call	silc_free
		mov	eax, [ebp+arg_10]
		mov	[esp+38h+Src], eax ; Src
		call	_strdup
		mov	[ebx+4], eax

loc_62B8745F:				; CODE XREF: silc_client_update_server+67j
					; silc_client_update_server+83j ...
		add	esp, 2Ch
		pop	ebx
		pop	esi
		pop	edi
		leave
		retn
silc_client_update_server endp

; ---------------------------------------------------------------------------
		align 4
; Exported entry   8. silc_client_add_server

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl silc_client_add_server(int, int, char *, char *, int)
		public silc_client_add_server
silc_client_add_server proc near	; CODE XREF: silc_client_command_reply_info+357p
					; silc_client_command_reply_identify+472p

Src		= dword	ptr -48h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_1C		= dword	ptr -1Ch
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h
arg_10		= dword	ptr  18h

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		sub	esp, 3Ch
		mov	esi, [ebp+arg_10]
		test	esi, esi
		jnz	short loc_62B87484

loc_62B87478:				; CODE XREF: silc_client_add_server+1CFj
		xor	ebx, ebx

loc_62B8747A:				; CODE XREF: silc_client_add_server+34j
					; silc_client_add_server+192j
		mov	eax, ebx
		add	esp, 3Ch
		pop	ebx
		pop	esi
		pop	edi
		leave
		retn
; ---------------------------------------------------------------------------

loc_62B87484:				; CODE XREF: silc_client_add_server+Ej
		mov	[esp+48h+var_44], 38h
		mov	[esp+48h+Src], 1
		call	silc_calloc
		mov	ebx, eax
		test	eax, eax
		jz	short loc_62B8747A
		lea	eax, [eax+28h]
		mov	[esp+48h+Src], eax
		call	silc_rwlock_alloc
		mov	dword ptr [ebx+30h], 0
		mov	dword ptr [ebx+34h], 1
		lea	eax, [ebx+8]
		mov	[ebp+var_1C], eax
		mov	ecx, 16h
		mov	edi, eax
		rep movsb
		mov	esi, [ebp+arg_8]
		test	esi, esi
		jz	short loc_62B874DA
		mov	edx, [ebp+arg_8]
		mov	[esp+48h+Src], edx ; Src
		call	_strdup
		mov	[ebx], eax

loc_62B874DA:				; CODE XREF: silc_client_add_server+63j
		mov	ecx, [ebp+arg_C]
		test	ecx, ecx
		jz	short loc_62B874EF
		mov	eax, [ebp+arg_C]
		mov	[esp+48h+Src], eax ; Src
		call	_strdup
		mov	[ebx+4], eax

loc_62B874EF:				; CODE XREF: silc_client_add_server+77j
		mov	edx, [ebp+arg_8]
		test	edx, edx
		jz	loc_62B875A0
		xor	eax, eax
		mov	ecx, 0FFFFFFFFh
		mov	edi, [ebp+arg_8]
		repne scasb
		not	ecx
		dec	ecx
		mov	[esp+48h+var_38], 0
		mov	[esp+48h+var_3C], 100h
		mov	[esp+48h+var_40], 7
		mov	[esp+48h+var_44], ecx
		mov	edx, [ebp+arg_8]
		mov	[esp+48h+Src], edx
		call	silc_identifier_check
		mov	esi, eax
		test	eax, eax
		jz	loc_62B875FF

loc_62B8753A:				; CODE XREF: silc_client_add_server+13Aj
		mov	edx, [ebp+arg_4]
		mov	eax, [edx+54h]
		mov	eax, [eax+0B8h]
		mov	[esp+48h+Src], eax
		call	silc_mutex_lock
		mov	[esp+48h+var_3C], ebx
		mov	eax, [ebp+var_1C]
		mov	[esp+48h+var_40], eax
		mov	[esp+48h+var_44], esi
		mov	edx, [ebp+arg_4]
		mov	eax, [edx+54h]
		mov	eax, [eax+11Ch]
		mov	[esp+48h+Src], eax
		call	silc_idcache_add
		test	eax, eax
		jz	short loc_62B875A4
		mov	edx, [ebp+arg_4]
		mov	eax, [edx+54h]
		mov	eax, [eax+0B8h]
		mov	[esp+48h+Src], eax
		call	silc_mutex_unlock
		mov	eax, [ebx+30h]
		mov	eax, [ebx+30h]
		inc	eax
		mov	[ebx+30h], eax
		mov	eax, ebx
		add	esp, 3Ch
		pop	ebx
		pop	esi
		pop	edi
		leave
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_62B875A0:				; CODE XREF: silc_client_add_server+8Cj
		xor	esi, esi
		jmp	short loc_62B8753A
; ---------------------------------------------------------------------------

loc_62B875A4:				; CODE XREF: silc_client_add_server+10Bj
		mov	[esp+48h+Src], esi
		call	silc_free
		mov	eax, [ebx]
		mov	[esp+48h+Src], eax
		call	silc_free
		mov	eax, [ebx+4]
		mov	[esp+48h+Src], eax
		call	silc_free
		lea	eax, [ebx+34h]
		call	sub_62B872AC
		lea	eax, [ebx+30h]
		call	sub_62B872AC
		mov	eax, [ebx+28h]
		mov	[esp+48h+Src], eax
		call	silc_rwlock_free
		mov	[esp+48h+Src], ebx
		call	silc_free
		mov	edx, [ebp+arg_4]
		mov	eax, [edx+54h]
		mov	eax, [eax+0B8h]
		mov	[esp+48h+Src], eax
		call	silc_mutex_unlock
		xor	ebx, ebx
		jmp	loc_62B8747A
; ---------------------------------------------------------------------------

loc_62B875FF:				; CODE XREF: silc_client_add_server+CCj
		mov	eax, [ebx]
		mov	[esp+48h+Src], eax
		call	silc_free
		mov	eax, [ebx+4]
		mov	[esp+48h+Src], eax
		call	silc_free
		lea	eax, [ebx+34h]
		call	sub_62B872AC
		lea	eax, [ebx+30h]
		call	sub_62B872AC
		mov	eax, [ebx+28h]
		mov	[esp+48h+Src], eax
		call	silc_rwlock_free
		mov	[esp+48h+Src], ebx
		call	silc_free
		jmp	loc_62B87478
silc_client_add_server endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_62B8763C	proc near		; CODE XREF: silc_client_get_clients_local_ext+237p
					; silc_client_get_clients_local_ext+33Bp

var_18		= dword	ptr -18h

		push	ebp
		mov	ebp, esp
		push	esi
		push	ebx
		sub	esp, 10h
		mov	ebx, eax
		mov	esi, edx
		mov	[esp+18h+var_18], 0Ch
		call	silc_malloc
		test	eax, eax
		jz	short loc_62B87680
		mov	[eax], esi
		mov	edx, [ebx]
		test	edx, edx
		jz	short loc_62B87694
		movzx	edx, word ptr [ebx+0Ch]
		mov	ecx, [ebx+4]
		mov	[ecx+edx], eax

loc_62B8766A:				; CODE XREF: sub_62B8763C+5Ej
		test	byte ptr [ebx+10h], 1
		jnz	short loc_62B87688

loc_62B87670:				; CODE XREF: sub_62B8763C+56j
		mov	[ebx+4], eax
		mov	dword ptr [eax+edx], 0
		add	dword ptr [ebx+10h], 4
		mov	al, 1

loc_62B87680:				; CODE XREF: sub_62B8763C+1Aj
		add	esp, 10h
		pop	ebx
		pop	esi
		leave
		retn
; ---------------------------------------------------------------------------
		align 4

loc_62B87688:				; CODE XREF: sub_62B8763C+32j
		movzx	ecx, word ptr [ebx+0Eh]
		mov	esi, [ebx+4]
		mov	[eax+ecx], esi
		jmp	short loc_62B87670
; ---------------------------------------------------------------------------

loc_62B87694:				; CODE XREF: sub_62B8763C+22j
		mov	[ebx], eax
		movzx	edx, word ptr [ebx+0Ch]
		jmp	short loc_62B8766A
sub_62B8763C	endp

; Exported entry 139. silc_client_get_server_by_id

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public silc_client_get_server_by_id
silc_client_get_server_by_id proc near	; CODE XREF: silc_client_notify_server_signoff+111p
					; silc_client_notify_killed+212p ...

var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_1C		= dword	ptr -1Ch
var_C		= dword	ptr -0Ch
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		push	esi
		push	ebx
		sub	esp, 30h
		mov	ebx, [ebp+arg_4]
		mov	esi, [ebp+arg_8]
		mov	ecx, [ebp+arg_0]
		test	ecx, ecx
		jnz	short loc_62B876BC

loc_62B876B1:				; CODE XREF: silc_client_get_server_by_id+22j
					; silc_client_get_server_by_id+26j
		xor	eax, eax

loc_62B876B3:				; CODE XREF: silc_client_get_server_by_id+9Bj
		add	esp, 30h
		pop	ebx
		pop	esi
		leave
		retn
; ---------------------------------------------------------------------------
		align 4

loc_62B876BC:				; CODE XREF: silc_client_get_server_by_id+13j
		test	ebx, ebx
		jz	short loc_62B876B1
		test	esi, esi
		jz	short loc_62B876B1
		mov	eax, [ebx+54h]
		mov	eax, [eax+0B8h]
		mov	[esp+38h+var_38], eax
		call	silc_mutex_lock
		lea	eax, [ebp+var_C]
		mov	[esp+38h+var_30], eax
		mov	[esp+38h+var_34], esi
		mov	eax, [ebx+54h]
		mov	eax, [eax+11Ch]
		mov	[esp+38h+var_38], eax
		call	silc_idcache_find_by_id_one
		test	al, al
		jz	short loc_62B87724
		mov	eax, [ebp+var_C]
		mov	eax, [eax+0Ch]
		mov	edx, [eax+30h]
		mov	edx, [eax+30h]
		inc	edx
		mov	[eax+30h], edx
		mov	edx, [ebx+54h]
		mov	edx, [edx+0B8h]
		mov	[esp+38h+var_38], edx
		mov	[ebp+var_1C], eax
		call	silc_mutex_unlock
		mov	eax, [ebp+var_1C]
		add	esp, 30h
		pop	ebx
		pop	esi
		leave
		retn
; ---------------------------------------------------------------------------
		align 4

loc_62B87724:				; CODE XREF: silc_client_get_server_by_id+57j
		mov	eax, [ebx+54h]
		mov	eax, [eax+0B8h]
		mov	[esp+38h+var_38], eax
		call	silc_mutex_unlock
		xor	eax, eax
		jmp	loc_62B876B3
silc_client_get_server_by_id endp

; Exported entry 126. silc_client_get_channel_by_id

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public silc_client_get_channel_by_id
silc_client_get_channel_by_id proc near	; CODE XREF: silc_client_channel_message+13Ap
					; silc_client_save_channel_key+3F1p ...

var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_1C		= dword	ptr -1Ch
var_C		= dword	ptr -0Ch
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		push	esi
		push	ebx
		sub	esp, 30h
		mov	ebx, [ebp+arg_4]
		mov	esi, [ebp+arg_8]
		mov	eax, [ebp+arg_0]
		test	eax, eax
		jnz	short loc_62B8775C

loc_62B87751:				; CODE XREF: silc_client_get_channel_by_id+22j
					; silc_client_get_channel_by_id+26j
		xor	eax, eax

loc_62B87753:				; CODE XREF: silc_client_get_channel_by_id+A3j
		add	esp, 30h
		pop	ebx
		pop	esi
		leave
		retn
; ---------------------------------------------------------------------------
		align 4

loc_62B8775C:				; CODE XREF: silc_client_get_channel_by_id+13j
		test	ebx, ebx
		jz	short loc_62B87751
		test	esi, esi
		jz	short loc_62B87751
		mov	eax, [ebx+54h]
		mov	eax, [eax+0B8h]
		mov	[esp+38h+var_38], eax
		call	silc_mutex_lock
		lea	eax, [ebp+var_C]
		mov	[esp+38h+var_30], eax
		mov	[esp+38h+var_34], esi
		mov	eax, [ebx+54h]
		mov	eax, [eax+118h]
		mov	[esp+38h+var_38], eax
		call	silc_idcache_find_by_id_one
		test	al, al
		jz	short loc_62B877CC
		mov	eax, [ebp+var_C]
		mov	eax, [eax+0Ch]
		mov	edx, [eax+174h]
		mov	edx, [eax+174h]
		inc	edx
		mov	[eax+174h], edx
		mov	edx, [ebx+54h]
		mov	edx, [edx+0B8h]
		mov	[esp+38h+var_38], edx
		mov	[ebp+var_1C], eax
		call	silc_mutex_unlock
		mov	eax, [ebp+var_1C]
		add	esp, 30h
		pop	ebx
		pop	esi
		leave
		retn
; ---------------------------------------------------------------------------

loc_62B877CC:				; CODE XREF: silc_client_get_channel_by_id+57j
		mov	eax, [ebx+54h]
		mov	eax, [eax+0B8h]
		mov	[esp+38h+var_38], eax
		call	silc_mutex_unlock
		xor	eax, eax
		jmp	loc_62B87753
silc_client_get_channel_by_id endp

; Exported entry 130. silc_client_get_client_by_id

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public silc_client_get_client_by_id
silc_client_get_client_by_id proc near	; CODE XREF: silc_client_channel_message+65p
					; silc_client_ftp+72p ...

var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_1C		= dword	ptr -1Ch
var_C		= dword	ptr -0Ch
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		push	esi
		push	ebx
		sub	esp, 30h
		mov	ebx, [ebp+arg_4]
		mov	esi, [ebp+arg_8]
		mov	edx, [ebp+arg_0]
		test	edx, edx
		jnz	short loc_62B87804

loc_62B877F9:				; CODE XREF: silc_client_get_client_by_id+22j
					; silc_client_get_client_by_id+26j
		xor	eax, eax

loc_62B877FB:				; CODE XREF: silc_client_get_client_by_id+A3j
		add	esp, 30h
		pop	ebx
		pop	esi
		leave
		retn
; ---------------------------------------------------------------------------
		align 4

loc_62B87804:				; CODE XREF: silc_client_get_client_by_id+13j
		test	ebx, ebx
		jz	short loc_62B877F9
		test	esi, esi
		jz	short loc_62B877F9
		mov	eax, [ebx+54h]
		mov	eax, [eax+0B8h]
		mov	[esp+38h+var_38], eax
		call	silc_mutex_lock
		lea	eax, [ebp+var_C]
		mov	[esp+38h+var_30], eax
		mov	[esp+38h+var_34], esi
		mov	eax, [ebx+54h]
		mov	eax, [eax+114h]
		mov	[esp+38h+var_38], eax
		call	silc_idcache_find_by_id_one
		test	al, al
		jz	short loc_62B87874
		mov	eax, [ebp+var_C]
		mov	eax, [eax+0Ch]
		mov	edx, [eax+3F8h]
		mov	edx, [eax+3F8h]
		inc	edx
		mov	[eax+3F8h], edx
		mov	edx, [ebx+54h]
		mov	edx, [edx+0B8h]
		mov	[esp+38h+var_38], edx
		mov	[ebp+var_1C], eax
		call	silc_mutex_unlock
		mov	eax, [ebp+var_1C]
		add	esp, 30h
		pop	ebx
		pop	esi
		leave
		retn
; ---------------------------------------------------------------------------

loc_62B87874:				; CODE XREF: silc_client_get_client_by_id+57j
		mov	eax, [ebx+54h]
		mov	eax, [eax+0B8h]
		mov	[esp+38h+var_38], eax
		call	silc_mutex_unlock
		xor	eax, eax
		jmp	loc_62B877FB
silc_client_get_client_by_id endp

; Exported entry 138. silc_client_get_server

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public silc_client_get_server
silc_client_get_server proc near	; CODE XREF: silc_client_command_getkey+24Cp

var_58		= dword	ptr -58h
var_54		= dword	ptr -54h
var_50		= dword	ptr -50h
var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_2C		= dword	ptr -2Ch
var_1C		= dword	ptr -1Ch
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		sub	esp, 4Ch
		mov	ebx, [ebp+arg_4]
		mov	edx, [ebp+arg_8]
		mov	ecx, [ebp+arg_0]
		test	ecx, ecx
		jnz	short loc_62B878AC

loc_62B878A2:				; CODE XREF: silc_client_get_server+22j
					; silc_client_get_server+26j ...
		xor	eax, eax

loc_62B878A4:				; CODE XREF: silc_client_get_server+C0j
					; silc_client_get_server+E0j
		add	esp, 4Ch
		pop	ebx
		pop	esi
		pop	edi
		leave
		retn
; ---------------------------------------------------------------------------

loc_62B878AC:				; CODE XREF: silc_client_get_server+14j
		test	ebx, ebx
		jz	short loc_62B878A2
		test	edx, edx
		jz	short loc_62B878A2
		xor	eax, eax
		mov	ecx, 0FFFFFFFFh
		mov	edi, edx
		repne scasb
		not	ecx
		dec	ecx
		mov	[esp+58h+var_48], 0
		mov	[esp+58h+var_4C], 100h
		mov	[esp+58h+var_50], 7
		mov	[esp+58h+var_54], ecx
		mov	[esp+58h+var_58], edx
		call	silc_identifier_check
		mov	esi, eax
		test	eax, eax
		jz	short loc_62B878A2
		mov	eax, [ebx+54h]
		mov	eax, [eax+0B8h]
		mov	[esp+58h+var_58], eax
		call	silc_mutex_lock
		lea	eax, [ebp+var_1C]
		mov	[esp+58h+var_50], eax
		mov	[esp+58h+var_54], esi
		mov	eax, [ebx+54h]
		mov	eax, [eax+11Ch]
		mov	[esp+58h+var_58], eax
		call	silc_idcache_find_by_name_one
		test	al, al
		jz	short loc_62B87951
		mov	eax, [ebp+var_1C]
		mov	eax, [eax+0Ch]
		mov	edx, [eax+30h]
		mov	edx, [eax+30h]
		inc	edx
		mov	[eax+30h], edx
		mov	edx, [ebx+54h]
		mov	edx, [edx+0B8h]
		mov	[esp+58h+var_58], edx
		mov	[ebp+var_2C], eax
		call	silc_mutex_unlock
		mov	[esp+58h+var_58], esi
		call	silc_free
		mov	eax, [ebp+var_2C]
		jmp	loc_62B878A4
; ---------------------------------------------------------------------------

loc_62B87951:				; CODE XREF: silc_client_get_server+8Fj
		mov	[esp+58h+var_58], esi
		call	silc_free
		mov	eax, [ebx+54h]
		mov	eax, [eax+0B8h]
		mov	[esp+58h+var_58], eax
		call	silc_mutex_unlock
		xor	eax, eax
		jmp	loc_62B878A4
silc_client_get_server endp

; ---------------------------------------------------------------------------
		align 4
; Exported entry 227. silc_client_unref_channel

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public silc_client_unref_channel
silc_client_unref_channel proc near	; CODE XREF: silc_client_empty_channel+96p
					; silc_client_remove_from_channels+92p	...

var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_2C		= dword	ptr -2Ch
var_1C		= dword	ptr -1Ch
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		sub	esp, 3Ch
		mov	edi, [ebp+arg_0]
		mov	esi, [ebp+arg_4]
		mov	ebx, [ebp+arg_8]
		test	ebx, ebx
		jz	short loc_62B879A0
		mov	eax, [ebx+174h]
		mov	edx, [ebx+174h]
		dec	edx
		mov	[ebx+174h], edx
		dec	eax
		jz	short loc_62B879A8

loc_62B879A0:				; CODE XREF: silc_client_unref_channel+14j
					; silc_client_unref_channel+240j ...
		add	esp, 3Ch
		pop	ebx
		pop	esi
		pop	edi
		leave
		retn
; ---------------------------------------------------------------------------

loc_62B879A8:				; CODE XREF: silc_client_unref_channel+2Aj
		mov	eax, [esi+54h]
		mov	eax, [eax+0B8h]
		mov	[esp+48h+var_48], eax
		call	silc_mutex_lock
		lea	eax, [ebp+var_1C]
		mov	[esp+48h+var_40], eax
		mov	[esp+48h+var_44], ebx
		mov	eax, [esi+54h]
		mov	eax, [eax+118h]
		mov	[esp+48h+var_48], eax
		call	silc_idcache_find_by_context
		test	al, al
		jnz	loc_62B87BBC
		mov	eax, [esi+54h]
		mov	eax, [eax+0B8h]
		mov	[esp+48h+var_48], eax
		call	silc_mutex_unlock

loc_62B879EE:				; CODE XREF: silc_client_unref_channel+298j
		mov	[esp+48h+var_40], ebx
		mov	[esp+48h+var_44], esi
		mov	[esp+48h+var_48], edi
		call	silc_client_empty_channel
		mov	[esp+48h+var_40], ebx
		mov	[esp+48h+var_44], esi
		mov	[esp+48h+var_48], edi
		call	silc_client_del_channel_private_keys
		mov	eax, [ebx+134h]
		mov	[esp+48h+var_48], eax
		call	silc_hash_table_free
		mov	eax, [ebx]
		mov	[esp+48h+var_48], eax
		call	silc_free
		mov	eax, [ebx+108h]
		mov	[esp+48h+var_48], eax
		call	silc_free
		mov	eax, [ebx+10Ch]
		test	eax, eax
		jz	short loc_62B87A46
		mov	[esp+48h+var_48], eax
		call	silc_pkcs_public_key_free

loc_62B87A46:				; CODE XREF: silc_client_unref_channel+C8j
		mov	eax, [ebx+158h]
		test	eax, eax
		jz	short loc_62B87A58
		mov	[esp+48h+var_48], eax
		call	silc_cipher_free

loc_62B87A58:				; CODE XREF: silc_client_unref_channel+DAj
		mov	eax, [ebx+15Ch]
		test	eax, eax
		jz	short loc_62B87A6A
		mov	[esp+48h+var_48], eax
		call	silc_cipher_free

loc_62B87A6A:				; CODE XREF: silc_client_unref_channel+ECj
		mov	eax, [ebx+160h]
		test	eax, eax
		jz	short loc_62B87A7C
		mov	[esp+48h+var_48], eax
		call	silc_hmac_free

loc_62B87A7C:				; CODE XREF: silc_client_unref_channel+FEj
		mov	eax, [ebx+148h]
		test	eax, eax
		jz	short loc_62B87AEC
		mov	edx, [eax]
		mov	[eax+8], edx
		and	byte ptr [eax+10h], 0FDh
		mov	dword ptr [eax+18h], 0
		mov	dword ptr [eax+14h], 0
		jmp	short loc_62B87ABB
; ---------------------------------------------------------------------------
		align 10h

loc_62B87AA0:				; CODE XREF: silc_client_unref_channel+15Ej
		movzx	ecx, word ptr [eax+0Eh]
		mov	ecx, [edx+ecx]

loc_62B87AA7:				; CODE XREF: silc_client_unref_channel+167j
		mov	[eax+8], ecx
		mov	[eax+14h], edx
		mov	edx, [edx]
		test	edx, edx
		jz	short loc_62B87AE7
		mov	[esp+48h+var_48], edx
		call	silc_cipher_free

loc_62B87ABB:				; CODE XREF: silc_client_unref_channel+129j
		mov	eax, [ebx+148h]
		mov	edx, [eax+14h]
		mov	[eax+18h], edx
		mov	edx, [eax+8]
		test	edx, edx
		jz	short loc_62B87AE0
		test	byte ptr [eax+10h], 2
		jnz	short loc_62B87AA0
		movzx	ecx, word ptr [eax+0Ch]
		mov	ecx, [edx+ecx]
		jmp	short loc_62B87AA7
; ---------------------------------------------------------------------------
		align 10h

loc_62B87AE0:				; CODE XREF: silc_client_unref_channel+158j
		mov	dword ptr [eax+14h], 0

loc_62B87AE7:				; CODE XREF: silc_client_unref_channel+13Dj
		call	sub_62B871E4

loc_62B87AEC:				; CODE XREF: silc_client_unref_channel+110j
		mov	eax, [ebx+14Ch]
		test	eax, eax
		jz	short loc_62B87B5C
		mov	edx, [eax]
		mov	[eax+8], edx
		and	byte ptr [eax+10h], 0FDh
		mov	dword ptr [eax+18h], 0
		mov	dword ptr [eax+14h], 0
		jmp	short loc_62B87B2B
; ---------------------------------------------------------------------------
		align 10h

loc_62B87B10:				; CODE XREF: silc_client_unref_channel+1CEj
		movzx	ecx, word ptr [eax+0Eh]
		mov	ecx, [edx+ecx]

loc_62B87B17:				; CODE XREF: silc_client_unref_channel+1D7j
		mov	[eax+8], ecx
		mov	[eax+14h], edx
		mov	edx, [edx]
		test	edx, edx
		jz	short loc_62B87B57
		mov	[esp+48h+var_48], edx
		call	silc_hmac_free

loc_62B87B2B:				; CODE XREF: silc_client_unref_channel+199j
		mov	eax, [ebx+14Ch]
		mov	edx, [eax+14h]
		mov	[eax+18h], edx
		mov	edx, [eax+8]
		test	edx, edx
		jz	short loc_62B87B50
		test	byte ptr [eax+10h], 2
		jnz	short loc_62B87B10
		movzx	ecx, word ptr [eax+0Ch]
		mov	ecx, [edx+ecx]
		jmp	short loc_62B87B17
; ---------------------------------------------------------------------------
		align 10h

loc_62B87B50:				; CODE XREF: silc_client_unref_channel+1C8j
		mov	dword ptr [eax+14h], 0

loc_62B87B57:				; CODE XREF: silc_client_unref_channel+1ADj
		call	sub_62B871E4

loc_62B87B5C:				; CODE XREF: silc_client_unref_channel+180j
		mov	eax, [ebx+110h]
		test	eax, eax
		jz	short loc_62B87B76
		mov	[esp+48h+var_44], 1
		mov	[esp+48h+var_48], eax
		call	silc_argument_list_free

loc_62B87B76:				; CODE XREF: silc_client_unref_channel+1F0j
		lea	eax, [ebx+178h]
		call	sub_62B872AC
		lea	eax, [ebx+174h]
		call	sub_62B872AC
		mov	eax, [ebx+144h]
		mov	[esp+48h+var_48], eax
		call	silc_rwlock_free
		mov	[esp+48h+var_44], ebx
		mov	eax, [esi+4Ch]
		mov	eax, [eax+0Ch]
		mov	[esp+48h+var_48], eax
		call	silc_schedule_task_del_by_context
		mov	[esp+48h+var_48], ebx
		call	silc_free
		jmp	loc_62B879A0
; ---------------------------------------------------------------------------
		align 4

loc_62B87BBC:				; CODE XREF: silc_client_unref_channel+63j
		mov	eax, [ebp+var_1C]
		mov	edx, [eax+8]
		mov	[esp+48h+var_40], 0
		mov	[esp+48h+var_44], ebx
		mov	eax, [esi+54h]
		mov	eax, [eax+118h]
		mov	[esp+48h+var_48], eax
		mov	[ebp+var_2C], edx
		call	silc_idcache_del_by_context
		mov	edx, [ebp+var_2C]
		mov	[esp+48h+var_48], edx
		mov	byte ptr [ebp+var_2C], al
		call	silc_free
		mov	edx, [esi+54h]
		mov	edx, [edx+0B8h]
		mov	[esp+48h+var_48], edx
		call	silc_mutex_unlock
		mov	al, byte ptr [ebp+var_2C]
		test	al, al
		jz	loc_62B879A0
		jmp	loc_62B879EE
silc_client_unref_channel endp

; ---------------------------------------------------------------------------
		align 4
; Exported entry 103. silc_client_del_channel

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public silc_client_del_channel
silc_client_del_channel	proc near	; CODE XREF: silc_client_del_connection+DBp
					; silc_client_remove_from_channels+132p ...

var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		sub	esp, 18h
		mov	eax, [ebp+arg_8]
		test	eax, eax
		jz	short loc_62B87C37
		mov	edx, [eax+178h]
		mov	ecx, [eax+178h]
		dec	ecx
		mov	[eax+178h], ecx
		dec	edx
		jz	short loc_62B87C3C

loc_62B87C37:				; CODE XREF: silc_client_del_channel+Bj
		xor	eax, eax
		leave
		retn
; ---------------------------------------------------------------------------
		align 4

loc_62B87C3C:				; CODE XREF: silc_client_del_channel+21j
		mov	[esp+18h+var_10], eax
		mov	eax, [ebp+arg_4]
		mov	[esp+18h+var_14], eax
		mov	eax, [ebp+arg_0]
		mov	[esp+18h+var_18], eax
		call	silc_client_unref_channel
		mov	al, 1
		leave
		retn
silc_client_del_channel	endp

; ---------------------------------------------------------------------------
		align 4
; Exported entry 194. silc_client_replace_channel_id

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public silc_client_replace_channel_id
silc_client_replace_channel_id proc near ; CODE	XREF: silc_client_notify_channel_change+165p
					; silc_client_command_reply_join+53Ep

var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		sub	esp, 2Ch
		mov	esi, [ebp+arg_4]
		mov	ebx, [ebp+arg_8]
		mov	edi, [ebp+arg_C]
		test	edi, edi
		jz	short loc_62B87CD5
		mov	eax, [ebx+144h]
		mov	[esp+38h+var_38], eax
		call	silc_rwlock_wrlock
		mov	eax, [esi+54h]
		mov	eax, [eax+0B8h]
		mov	[esp+38h+var_38], eax
		call	silc_mutex_lock
		mov	[esp+38h+var_28], 0
		mov	[esp+38h+var_2C], 0
		mov	[esp+38h+var_30], edi
		mov	[esp+38h+var_34], ebx
		mov	eax, [esi+54h]
		mov	eax, [eax+118h]
		mov	[esp+38h+var_38], eax
		call	silc_idcache_update_by_context
		mov	eax, [esi+54h]
		mov	eax, [eax+0B8h]
		mov	[esp+38h+var_38], eax
		call	silc_mutex_unlock
		mov	eax, [ebx+144h]
		mov	[esp+38h+var_38], eax
		call	silc_rwlock_unlock

loc_62B87CD5:				; CODE XREF: silc_client_replace_channel_id+14j
		xor	eax, eax
		add	esp, 2Ch
		pop	ebx
		pop	esi
		pop	edi
		leave
		retn
silc_client_replace_channel_id endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry   2. silc_client_add_channel

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl silc_client_add_channel(int, int,	char *,	int, int)
		public silc_client_add_channel
silc_client_add_channel	proc near	; CODE XREF: silc_client_st_resume_resolve_channels+3C7p
					; silc_client_command_reply_list+37Dp ...

Src		= dword	ptr -158h
var_154		= dword	ptr -154h
var_150		= dword	ptr -150h
var_14C		= dword	ptr -14Ch
var_148		= dword	ptr -148h
var_144		= dword	ptr -144h
var_140		= dword	ptr -140h
var_13C		= dword	ptr -13Ch
var_12C		= dword	ptr -12Ch
var_119		= byte ptr -119h
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h
arg_10		= dword	ptr  18h

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		sub	esp, 14Ch
		mov	esi, [ebp+arg_10]
		mov	[esp+158h+var_154], 180h
		mov	[esp+158h+Src],	1
		call	silc_calloc
		mov	ebx, eax
		test	eax, eax
		jz	loc_62B87E95
		lea	eax, [eax+144h]
		mov	[esp+158h+Src],	eax
		call	silc_rwlock_alloc
		mov	dword ptr [ebx+174h], 0
		mov	dword ptr [ebx+178h], 1
		lea	eax, [ebx+114h]
		mov	[ebp+var_12C], eax
		mov	ecx, 16h
		mov	edi, eax
		rep movsb
		mov	eax, [ebp+arg_C]
		mov	[ebx+12Ch], eax
		mov	[esp+158h+var_148], 101h
		lea	eax, [ebx+4]
		mov	[esp+158h+var_14C], eax
		mov	[esp+158h+var_150], 101h
		lea	esi, [ebp+var_119]
		mov	[esp+158h+var_154], esi
		mov	edx, [ebp+arg_8]
		mov	[esp+158h+Src],	edx
		call	silc_parse_userfqdn
		mov	eax, [ebp+arg_0]
		mov	eax, [eax+18h]
		mov	eax, [eax+4Ch]
		cmp	byte ptr [eax+23h], 0
		jnz	loc_62B87EA4
		mov	[esp+158h+Src],	esi ; Src
		call	_strdup
		mov	[ebx], eax

loc_62B87D96:				; CODE XREF: silc_client_add_channel+1D1j
		test	eax, eax
		jz	loc_62B87EB8
		mov	[esp+158h+var_13C], 1
		mov	[esp+158h+var_140], 0
		mov	[esp+158h+var_144], 0
		mov	[esp+158h+var_148], 0
		mov	[esp+158h+var_14C], 0
		mov	[esp+158h+var_150], 0
		mov	[esp+158h+var_154], offset loc_62BA61A4
		mov	[esp+158h+Src],	1
		call	silc_hash_table_alloc
		mov	[ebx+134h], eax
		test	eax, eax
		jz	loc_62B87EE8
		xor	eax, eax
		mov	ecx, 0FFFFFFFFh
		mov	edi, esi
		repne scasb
		not	ecx
		dec	ecx
		mov	[esp+158h+var_148], 0
		mov	[esp+158h+var_14C], 100h
		mov	[esp+158h+var_150], 7
		mov	[esp+158h+var_154], ecx
		mov	[esp+158h+Src],	esi
		call	silc_channel_name_check
		mov	esi, eax
		test	eax, eax
		jz	loc_62B87F28
		mov	edx, [ebp+arg_4]
		mov	eax, [edx+54h]
		mov	eax, [eax+0B8h]
		mov	[esp+158h+Src],	eax
		call	silc_mutex_lock
		mov	[esp+158h+var_14C], ebx
		mov	eax, [ebp+var_12C]
		mov	[esp+158h+var_150], eax
		mov	[esp+158h+var_154], esi
		mov	edx, [ebp+arg_4]
		mov	eax, [edx+54h]
		mov	eax, [eax+118h]
		mov	[esp+158h+Src],	eax
		call	silc_idcache_add
		test	eax, eax
		jz	loc_62B87F74
		mov	edx, [ebp+arg_4]
		mov	eax, [edx+54h]
		mov	eax, [eax+0B8h]
		mov	[esp+158h+Src],	eax
		call	silc_mutex_unlock
		mov	eax, [ebx+174h]
		mov	eax, [ebx+174h]
		inc	eax
		mov	[ebx+174h], eax

loc_62B87E95:				; CODE XREF: silc_client_add_channel+27j
					; silc_client_add_channel+206j	...
		mov	eax, ebx
		add	esp, 14Ch
		pop	ebx
		pop	esi
		pop	edi
		leave
		retn
; ---------------------------------------------------------------------------
		align 4

loc_62B87EA4:				; CODE XREF: silc_client_add_channel+A6j
		mov	eax, [ebp+arg_8]
		mov	[esp+158h+Src],	eax ; Src
		call	_strdup
		mov	[ebx], eax
		jmp	loc_62B87D96
; ---------------------------------------------------------------------------
		align 4

loc_62B87EB8:				; CODE XREF: silc_client_add_channel+B8j
		mov	eax, [ebx+144h]
		mov	[esp+158h+Src],	eax
		call	silc_rwlock_free
		lea	eax, [ebx+174h]
		call	sub_62B872AC
		lea	eax, [ebx+178h]
		call	sub_62B872AC
		mov	[esp+158h+Src],	ebx
		call	silc_free
		xor	ebx, ebx
		jmp	short loc_62B87E95
; ---------------------------------------------------------------------------

loc_62B87EE8:				; CODE XREF: silc_client_add_channel+10Aj
		mov	eax, [ebx+144h]
		mov	[esp+158h+Src],	eax
		call	silc_rwlock_free
		lea	eax, [ebx+174h]
		call	sub_62B872AC
		lea	eax, [ebx+178h]
		call	sub_62B872AC
		mov	eax, [ebx]
		mov	[esp+158h+Src],	eax
		call	silc_free
		mov	[esp+158h+Src],	ebx
		call	silc_free
		xor	ebx, ebx
		jmp	loc_62B87E95
; ---------------------------------------------------------------------------
		align 4

loc_62B87F28:				; CODE XREF: silc_client_add_channel+146j
		mov	eax, [ebx+144h]
		mov	[esp+158h+Src],	eax
		call	silc_rwlock_free
		lea	eax, [ebx+174h]
		call	sub_62B872AC
		lea	eax, [ebx+178h]
		call	sub_62B872AC
		mov	eax, [ebx]
		mov	[esp+158h+Src],	eax
		call	silc_free
		mov	eax, [ebx+134h]
		mov	[esp+158h+Src],	eax
		call	silc_hash_table_free
		mov	[esp+158h+Src],	ebx
		call	silc_free
		xor	ebx, ebx
		jmp	loc_62B87E95
; ---------------------------------------------------------------------------
		align 4

loc_62B87F74:				; CODE XREF: silc_client_add_channel+188j
		mov	eax, [ebx+144h]
		mov	[esp+158h+Src],	eax
		call	silc_rwlock_free
		lea	eax, [ebx+174h]
		call	sub_62B872AC
		lea	eax, [ebx+178h]
		call	sub_62B872AC
		mov	[esp+158h+Src],	esi
		call	silc_free
		mov	eax, [ebx]
		mov	[esp+158h+Src],	eax
		call	silc_free
		mov	eax, [ebx+134h]
		mov	[esp+158h+Src],	eax
		call	silc_hash_table_free
		mov	[esp+158h+Src],	ebx
		call	silc_free
		mov	edx, [ebp+arg_4]
		mov	eax, [edx+54h]
		mov	eax, [eax+0B8h]
		mov	[esp+158h+Src],	eax
		call	silc_mutex_unlock
		xor	ebx, ebx
		jmp	loc_62B87E95
silc_client_add_channel	endp

; ---------------------------------------------------------------------------
		align 4
; Exported entry 125. silc_client_get_channel

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public silc_client_get_channel
silc_client_get_channel	proc near	; CODE XREF: silc_client_command_leave+A4p
					; silc_client_command_kick+4Fp	...

var_258		= dword	ptr -258h
var_254		= dword	ptr -254h
var_250		= dword	ptr -250h
var_24C		= dword	ptr -24Ch
var_248		= dword	ptr -248h
var_22E		= byte ptr -22Eh
var_12D		= byte ptr -12Dh
var_2C		= dword	ptr -2Ch
var_24		= dword	ptr -24h
var_20		= word ptr -20h
var_1E		= word ptr -1Eh
var_1C		= byte ptr -1Ch
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		sub	esp, 24Ch
		mov	ebx, [ebp+arg_4]
		mov	eax, [ebp+arg_8]
		mov	esi, [ebp+arg_0]
		test	esi, esi
		jnz	short loc_62B88004

loc_62B87FF5:				; CODE XREF: silc_client_get_channel+2Aj
					; silc_client_get_channel+2Ej ...
		xor	esi, esi

loc_62B87FF7:				; CODE XREF: silc_client_get_channel+195j
					; silc_client_get_channel+1B7j
		mov	eax, esi
		add	esp, 24Ch
		pop	ebx
		pop	esi
		pop	edi
		leave
		retn
; ---------------------------------------------------------------------------

loc_62B88004:				; CODE XREF: silc_client_get_channel+17j
		test	ebx, ebx
		jz	short loc_62B87FF5
		test	eax, eax
		jz	short loc_62B87FF5
		mov	[esp+258h+var_248], 101h
		lea	edx, [ebp+var_22E]
		mov	[esp+258h+var_24C], edx
		mov	[esp+258h+var_250], 101h
		lea	esi, [ebp+var_12D]
		mov	[esp+258h+var_254], esi
		mov	[esp+258h+var_258], eax
		call	silc_parse_userfqdn
		xor	eax, eax
		mov	ecx, 0FFFFFFFFh
		mov	edi, esi
		repne scasb
		not	ecx
		dec	ecx
		mov	[esp+258h+var_248], 0
		mov	[esp+258h+var_24C], 100h
		mov	[esp+258h+var_250], 7
		mov	[esp+258h+var_254], ecx
		mov	[esp+258h+var_258], esi
		call	silc_channel_name_check
		mov	edi, eax
		test	eax, eax
		jz	short loc_62B87FF5
		mov	eax, [ebx+54h]
		mov	eax, [eax+0B8h]
		mov	[esp+258h+var_258], eax
		call	silc_mutex_lock
		lea	eax, [ebp+var_2C]
		mov	[esp+258h+var_250], eax
		mov	[esp+258h+var_254], edi
		mov	eax, [ebx+54h]
		mov	eax, [eax+118h]
		mov	[esp+258h+var_258], eax
		call	silc_idcache_find_by_name
		test	al, al
		jz	loc_62B88178
		mov	eax, [ebp+var_2C]
		mov	[ebp+var_24], eax
		and	[ebp+var_1C], 0FDh
		cmp	[ebp+var_22E], 0
		jnz	short loc_62B88116
		jmp	short loc_62B880E8
; ---------------------------------------------------------------------------
		align 4

loc_62B880BC:				; CODE XREF: silc_client_get_channel+118j
		movzx	edx, [ebp+var_1E]
		mov	edx, [eax+edx]

loc_62B880C3:				; CODE XREF: silc_client_get_channel+121j
		mov	[ebp+var_24], edx
		mov	esi, [eax+0Ch]
		cmp	byte ptr [esi+4], 0
		jz	short loc_62B88145
		mov	eax, [ebx+8]
		mov	[esp+258h+var_254], eax
		lea	eax, [esi+4]
		mov	[esp+258h+var_258], eax
		call	silc_utf8_strcasecmp
		test	al, al
		jnz	short loc_62B88145
		mov	eax, [ebp+var_24]

loc_62B880E8:				; CODE XREF: silc_client_get_channel+DCj
		test	eax, eax
		jz	loc_62B88178
		test	[ebp+var_1C], 2
		jnz	short loc_62B880BC
		movzx	edx, [ebp+var_20]
		mov	edx, [eax+edx]
		jmp	short loc_62B880C3
; ---------------------------------------------------------------------------
		align 10h

loc_62B88100:				; CODE XREF: silc_client_get_channel+142j
		movzx	edx, [ebp+var_1E]
		mov	edx, [eax+edx]

loc_62B88107:				; CODE XREF: silc_client_get_channel+14Bj
		mov	[ebp+var_24], edx
		mov	esi, [eax+0Ch]
		cmp	byte ptr [esi+4], 0
		jnz	short loc_62B8812C

loc_62B88113:				; CODE XREF: silc_client_get_channel+167j
		mov	eax, [ebp+var_24]

loc_62B88116:				; CODE XREF: silc_client_get_channel+DAj
		test	eax, eax
		jz	short loc_62B88178
		test	[ebp+var_1C], 2
		jnz	short loc_62B88100
		movzx	edx, [ebp+var_20]
		mov	edx, [eax+edx]
		jmp	short loc_62B88107
; ---------------------------------------------------------------------------
		align 4

loc_62B8812C:				; CODE XREF: silc_client_get_channel+135j
		lea	eax, [ebp+var_22E]
		mov	[esp+258h+var_254], eax
		lea	eax, [esi+4]
		mov	[esp+258h+var_258], eax
		call	silc_utf8_strcasecmp
		test	al, al
		jz	short loc_62B88113

loc_62B88145:				; CODE XREF: silc_client_get_channel+F1j
					; silc_client_get_channel+107j
		mov	eax, [esi+174h]
		mov	eax, [esi+174h]
		inc	eax
		mov	[esi+174h], eax
		mov	eax, [ebx+54h]
		mov	eax, [eax+0B8h]
		mov	[esp+258h+var_258], eax
		call	silc_mutex_unlock
		mov	[esp+258h+var_258], edi
		call	silc_free
		jmp	loc_62B87FF7
; ---------------------------------------------------------------------------
		align 4

loc_62B88178:				; CODE XREF: silc_client_get_channel+C3j
					; silc_client_get_channel+10Ej	...
		mov	eax, [ebx+54h]
		mov	eax, [eax+0B8h]
		mov	[esp+258h+var_258], eax
		call	silc_mutex_unlock
		mov	[esp+258h+var_258], edi
		call	silc_free
		xor	esi, esi
		jmp	loc_62B87FF7
silc_client_get_channel	endp

; Exported entry 159. silc_client_nickname_parse

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl silc_client_nickname_parse(int, int, char	*, int)
		public silc_client_nickname_parse
silc_client_nickname_parse proc	near	; CODE XREF: silc_client_get_clients_local_ext+93p
					; sub_62B888C0+99p ...

Str		= dword	ptr -38h
Val		= dword	ptr -34h
var_19		= byte ptr -19h
arg_0		= dword	ptr  8
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		sub	esp, 2Ch
		mov	ebx, [ebp+arg_8]
		mov	eax, [ebp+arg_0]
		mov	eax, [eax+18h]
		mov	eax, [eax+4Ch]
		mov	dl, [eax+1]
		test	dl, dl
		jz	loc_62B88280
		test	ebx, ebx
		jz	loc_62B8825A
		cmp	byte ptr [ebx],	0
		jz	loc_62B8825A
		add	eax, 2
		xor	esi, esi
		mov	[ebp+var_19], 0
		xor	edi, edi

loc_62B881D4:				; CODE XREF: silc_client_nickname_parse+6Dj
		cmp	dl, 25h
		jz	short loc_62B881F4
		cmp	dl, 61h
		jz	short loc_62B881F4
		jg	loc_62B88264
		cmp	dl, 48h
		jz	short loc_62B881F4

loc_62B881E9:				; CODE XREF: silc_client_nickname_parse+D4j
		mov	ecx, esi
		test	cl, cl
		jz	short loc_62B881F6
		mov	[ebp+var_19], dl
		xchg	ax, ax

loc_62B881F4:				; CODE XREF: silc_client_nickname_parse+3Fj
					; silc_client_nickname_parse+44j ...
		mov	edx, edi

loc_62B881F6:				; CODE XREF: silc_client_nickname_parse+55j
					; silc_client_nickname_parse+E1j
		test	eax, eax
		jz	short loc_62B88208
		mov	cl, [eax]
		inc	eax
		test	cl, cl
		jz	short loc_62B88208
		mov	edi, edx
		mov	dl, cl
		jmp	short loc_62B881D4
; ---------------------------------------------------------------------------
		align 4

loc_62B88208:				; CODE XREF: silc_client_nickname_parse+60j
					; silc_client_nickname_parse+67j
		mov	eax, esi
		test	al, al
		jz	short loc_62B8825A
		xor	eax, eax
		mov	ecx, 0FFFFFFFFh
		mov	edi, ebx
		repne scasb
		not	ecx
		lea	esi, [ecx-1]
		test	dl, dl
		jz	short loc_62B88238
		movsx	edx, dl
		mov	[esp+38h+Val], edx ; Val
		mov	[esp+38h+Str], ebx ; Str
		call	strchr
		test	eax, eax
		jz	short loc_62B88238
		lea	ebx, [eax+1]

loc_62B88238:				; CODE XREF: silc_client_nickname_parse+88j
					; silc_client_nickname_parse+9Bj
		cmp	[ebp+var_19], 0
		jz	short loc_62B88256
		movsx	eax, [ebp+var_19]
		mov	[esp+38h+Val], eax ; Val
		mov	[esp+38h+Str], ebx ; Str
		call	strchr
		test	eax, eax
		jz	short loc_62B88256
		mov	esi, eax
		sub	esi, ebx

loc_62B88256:				; CODE XREF: silc_client_nickname_parse+A4j
					; silc_client_nickname_parse+B8j
		test	esi, esi
		jnz	short loc_62B88294

loc_62B8825A:				; CODE XREF: silc_client_nickname_parse+22j
					; silc_client_nickname_parse+2Bj ...
		xor	eax, eax

loc_62B8825C:				; CODE XREF: silc_client_nickname_parse+112j
		add	esp, 2Ch
		pop	ebx
		pop	esi
		pop	edi
		leave
		retn
; ---------------------------------------------------------------------------

loc_62B88264:				; CODE XREF: silc_client_nickname_parse+46j
		cmp	dl, 68h
		jz	short loc_62B881F4
		cmp	dl, 6Eh
		jnz	loc_62B881E9
		mov	edx, edi
		mov	esi, 1
		jmp	loc_62B881F6
; ---------------------------------------------------------------------------
		align 10h

loc_62B88280:				; CODE XREF: silc_client_nickname_parse+1Aj
		mov	eax, [ebp+arg_C]
		mov	dword ptr [eax], 0
		mov	al, 1
		add	esp, 2Ch
		pop	ebx
		pop	esi
		pop	edi
		leave
		retn
; ---------------------------------------------------------------------------
		align 4

loc_62B88294:				; CODE XREF: silc_client_nickname_parse+C0j
		mov	[esp+38h+Val], esi
		mov	[esp+38h+Str], ebx
		call	silc_memdup
		mov	edx, [ebp+arg_C]
		mov	[edx], eax
		test	eax, eax
		setnz	al
		jmp	short loc_62B8825C
silc_client_nickname_parse endp

; Exported entry 135. silc_client_get_clients_local_ext

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public silc_client_get_clients_local_ext
silc_client_get_clients_local_ext proc near ; CODE XREF: silc_client_get_clients_local+2Ap
					; silc_client_nickname_format+63p

var_1F8		= dword	ptr -1F8h
var_1F4		= dword	ptr -1F4h
var_1F0		= dword	ptr -1F0h
var_1EC		= dword	ptr -1ECh
var_1E8		= dword	ptr -1E8h
var_1CC		= dword	ptr -1CCh
var_1C4		= dword	ptr -1C4h
var_1C0		= dword	ptr -1C0h
var_1B9		= byte ptr -1B9h
var_1B2		= byte ptr -1B2h
var_B1		= byte ptr -0B1h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= word ptr -24h
var_22		= word ptr -22h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= byte ptr  14h
arg_10		= byte ptr  18h

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		sub	esp, 1ECh
		mov	esi, [ebp+arg_0]
		mov	eax, [ebp+arg_8]
		mov	bl, [ebp+arg_C]
		mov	dl, [ebp+arg_10]
		mov	[ebp+var_1B9], dl
		test	esi, esi
		jnz	short loc_62B882E0

loc_62B882CE:				; CODE XREF: silc_client_get_clients_local_ext+39j
					; silc_client_get_clients_local_ext+3Dj ...
		xor	esi, esi

loc_62B882D0:				; CODE XREF: silc_client_get_clients_local_ext+2DAj
					; silc_client_get_clients_local_ext+36Dj ...
		mov	eax, esi
		add	esp, 1ECh
		pop	ebx
		pop	esi
		pop	edi
		leave
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_62B882E0:				; CODE XREF: silc_client_get_clients_local_ext+20j
		mov	ecx, [ebp+arg_4]
		test	ecx, ecx
		jz	short loc_62B882CE
		test	eax, eax
		jz	short loc_62B882CE
		mov	[ebp+var_1C], 0
		mov	[esp+1F8h+var_1E8], 101h
		lea	edx, [ebp+var_1B2]
		mov	[esp+1F8h+var_1EC], edx
		mov	[esp+1F8h+var_1F0], 81h
		lea	edx, [ebp+var_B1]
		mov	[ebp+var_1CC], edx
		mov	[esp+1F8h+var_1F4], edx
		mov	[esp+1F8h+var_1F8], eax
		call	silc_parse_userfqdn
		lea	eax, [ebp+var_1C]
		mov	[esp+1F8h+var_1EC], eax	; int
		lea	eax, [ebp+var_B1]
		mov	[esp+1F8h+var_1F0], eax	; char *
		mov	edx, [ebp+arg_4]
		mov	[esp+1F8h+var_1F4], edx	; int
		mov	[esp+1F8h+var_1F8], esi	; int
		call	silc_client_nickname_parse
		test	al, al
		jz	short loc_62B882CE
		test	bl, bl
		jnz	loc_62B8858B
		mov	edx, [ebp+var_1C]
		test	edx, edx
		jz	loc_62B88673
		lea	eax, [ebp+var_B1]
		mov	[ebp+var_1C0], eax

loc_62B88367:				; CODE XREF: silc_client_get_clients_local_ext+2F4j
		xor	eax, eax
		mov	ecx, 0FFFFFFFFh
		mov	edi, edx
		repne scasb
		not	ecx
		dec	ecx
		mov	[esp+1F8h+var_1E8], 0
		mov	[esp+1F8h+var_1EC], 80h
		mov	[esp+1F8h+var_1F0], 7
		mov	[esp+1F8h+var_1F4], ecx
		mov	[esp+1F8h+var_1F8], edx
		call	silc_identifier_check
		mov	edi, eax
		test	eax, eax
		jz	loc_62B88661
		mov	[esp+1F8h+var_1F8], 1Ch
		call	silc_malloc
		mov	esi, eax
		test	eax, eax
		jz	loc_62B88606
		mov	dword ptr [eax+18h], 0
		mov	dword ptr [eax+14h], 0
		mov	eax, [eax+10h]
		and	eax, 3
		mov	[esi+10h], eax
		mov	word ptr [esi+0Ch], 4
		mov	word ptr [esi+0Eh], 8
		mov	byte ptr [esi+10h], 1
		mov	dword ptr [esi+8], 0
		mov	dword ptr [esi+4], 0
		mov	dword ptr [esi], 0
		mov	edx, [ebp+arg_4]
		mov	eax, [edx+54h]
		mov	eax, [eax+0B8h]
		mov	[esp+1F8h+var_1F8], eax
		call	silc_mutex_lock
		mov	eax, [ebp+var_20]
		and	eax, 3
		mov	[ebp+var_20], eax
		mov	[ebp+var_24], 0
		mov	[ebp+var_22], 0
		mov	byte ptr [ebp+var_20], 0
		mov	[ebp+var_28], 0
		mov	[ebp+var_2C], 0
		mov	[ebp+var_30], 0
		lea	eax, [ebp+var_30]
		mov	[esp+1F8h+var_1F0], eax
		mov	[esp+1F8h+var_1F4], edi
		mov	edx, [ebp+arg_4]
		mov	eax, [edx+54h]
		mov	eax, [eax+114h]
		mov	[esp+1F8h+var_1F8], eax
		call	silc_idcache_find_by_name
		test	al, al
		jz	loc_62B8861E
		mov	eax, [ebp+var_30]
		mov	[ebp+var_28], eax
		and	byte ptr [ebp+var_20], 0FDh
		mov	edx, [ebp+var_1C0]
		test	edx, edx
		jz	loc_62B885A5

loc_62B88475:				; CODE XREF: silc_client_get_clients_local_ext+2FBj
		mov	ebx, [ebp+var_1C0]
		jmp	short loc_62B884EF
; ---------------------------------------------------------------------------
		align 10h

loc_62B88480:				; CODE XREF: silc_client_get_clients_local_ext+24Bj
		movzx	edx, [ebp+var_22]
		mov	edx, [eax+edx]

loc_62B88487:				; CODE XREF: silc_client_get_clients_local_ext+254j
		mov	[ebp+var_28], edx
		mov	edx, [eax+0Ch]
		cmp	[ebp+var_1B2], 0
		jnz	short loc_62B88504

loc_62B88496:				; CODE XREF: silc_client_get_clients_local_ext+280j
		test	ebx, ebx
		jz	loc_62B88534
		mov	eax, ebx

loc_62B884A0:				; CODE XREF: silc_client_get_clients_local_ext+28Bj
		mov	[esp+1F8h+var_1F4], eax
		mov	[esp+1F8h+var_1F8], edx
		mov	[ebp+var_1C4], edx
		call	silc_utf8_strcasecmp
		test	al, al
		mov	edx, [ebp+var_1C4]
		jz	short loc_62B884EC
		cmp	[ebp+var_1B9], 0
		jz	short loc_62B884CE
		test	byte ptr [edx+402h], 1
		jz	short loc_62B884EC

loc_62B884CE:				; CODE XREF: silc_client_get_clients_local_ext+217j
		mov	eax, [edx+3F8h]
		mov	eax, [edx+3F8h]
		inc	eax
		mov	[edx+3F8h], eax
		mov	eax, esi
		call	sub_62B8763C
		test	ebx, ebx
		jz	short loc_62B8853C

loc_62B884EC:				; CODE XREF: silc_client_get_clients_local_ext+20Ej
					; silc_client_get_clients_local_ext+220j ...
		mov	eax, [ebp+var_28]

loc_62B884EF:				; CODE XREF: silc_client_get_clients_local_ext+1CFj
		test	eax, eax
		jz	short loc_62B8853C
		test	byte ptr [ebp+var_20], 2
		jnz	short loc_62B88480
		movzx	edx, [ebp+var_24]
		mov	edx, [eax+edx]
		jmp	short loc_62B88487
; ---------------------------------------------------------------------------
		align 4

loc_62B88504:				; CODE XREF: silc_client_get_clients_local_ext+1E8j
		lea	eax, [ebp+var_1B2]
		mov	[esp+1F8h+var_1F4], eax
		lea	eax, [edx+283h]
		mov	[esp+1F8h+var_1F8], eax
		mov	[ebp+var_1C4], edx
		call	silc_utf8_strcasecmp
		test	al, al
		mov	edx, [ebp+var_1C4]
		jz	short loc_62B884EC
		jmp	loc_62B88496
; ---------------------------------------------------------------------------
		align 4

loc_62B88534:				; CODE XREF: silc_client_get_clients_local_ext+1ECj
		mov	eax, [ebp+var_1C]
		jmp	loc_62B884A0
; ---------------------------------------------------------------------------

loc_62B8853C:				; CODE XREF: silc_client_get_clients_local_ext+23Ej
					; silc_client_get_clients_local_ext+245j ...
		mov	edx, [ebp+arg_4]
		mov	eax, [edx+54h]
		mov	eax, [eax+0B8h]
		mov	[esp+1F8h+var_1F8], eax
		call	silc_mutex_unlock
		mov	[esp+1F8h+var_1F8], edi
		call	silc_free
		mov	eax, [ebp+var_1C]
		mov	[esp+1F8h+var_1F8], eax
		call	silc_free
		mov	eax, [esi+10h]
		shr	eax, 2
		jz	loc_62B88653
		mov	eax, [esi]
		mov	[esi+8], eax
		and	byte ptr [esi+10h], 0FDh
		mov	dword ptr [esi+18h], 0
		mov	dword ptr [esi+14h], 0
		jmp	loc_62B882D0
; ---------------------------------------------------------------------------

loc_62B8858B:				; CODE XREF: silc_client_get_clients_local_ext+9Ej
		mov	edx, [ebp+var_1C]
		test	edx, edx
		jz	loc_62B88673

loc_62B88596:				; CODE XREF: silc_client_get_clients_local_ext+3F6j
		mov	[ebp+var_1C0], 0
		jmp	loc_62B88367
; ---------------------------------------------------------------------------

loc_62B885A5:				; CODE XREF: silc_client_get_clients_local_ext+1C3j
		test	bl, bl
		jz	loc_62B88475
		mov	bl, [ebp+var_1B9]
		jmp	short loc_62B885EF
; ---------------------------------------------------------------------------

loc_62B885B5:				; CODE XREF: silc_client_get_clients_local_ext+34Fj
		movzx	edx, [ebp+var_22]
		mov	edx, [eax+edx]

loc_62B885BC:				; CODE XREF: silc_client_get_clients_local_ext+358j
		mov	[ebp+var_28], edx
		mov	edx, [eax+0Ch]
		test	bl, bl
		jz	short loc_62B885CF
		test	byte ptr [edx+402h], 1
		jz	short loc_62B885EC

loc_62B885CF:				; CODE XREF: silc_client_get_clients_local_ext+318j
		mov	ecx, [edx+3F8h]
		mov	ecx, [edx+3F8h]
		inc	ecx
		mov	[edx+3F8h], ecx
		mov	edx, [eax+0Ch]
		mov	eax, esi
		call	sub_62B8763C

loc_62B885EC:				; CODE XREF: silc_client_get_clients_local_ext+321j
		mov	eax, [ebp+var_28]

loc_62B885EF:				; CODE XREF: silc_client_get_clients_local_ext+307j
		test	eax, eax
		jz	loc_62B8853C
		test	byte ptr [ebp+var_20], 2
		jnz	short loc_62B885B5
		movzx	edx, [ebp+var_24]
		mov	edx, [eax+edx]
		jmp	short loc_62B885BC
; ---------------------------------------------------------------------------

loc_62B88606:				; CODE XREF: silc_client_get_clients_local_ext+107j
		mov	[esp+1F8h+var_1F8], edi
		call	silc_free
		mov	eax, [ebp+var_1C]
		mov	[esp+1F8h+var_1F8], eax
		call	silc_free
		jmp	loc_62B882D0
; ---------------------------------------------------------------------------

loc_62B8861E:				; CODE XREF: silc_client_get_clients_local_ext+1ABj
		mov	edx, [ebp+arg_4]
		mov	eax, [edx+54h]
		mov	eax, [eax+0B8h]
		mov	[esp+1F8h+var_1F8], eax
		call	silc_mutex_unlock
		mov	[esp+1F8h+var_1F8], edi
		call	silc_free
		mov	eax, [ebp+var_1C]
		mov	[esp+1F8h+var_1F8], eax
		call	silc_free
		mov	eax, esi
		call	sub_62B871E4
		xor	esi, esi
		jmp	loc_62B882D0
; ---------------------------------------------------------------------------

loc_62B88653:				; CODE XREF: silc_client_get_clients_local_ext+2BDj
		mov	eax, esi
		call	sub_62B871E4
		xor	esi, esi
		jmp	loc_62B882D0
; ---------------------------------------------------------------------------

loc_62B88661:				; CODE XREF: silc_client_get_clients_local_ext+F1j
		mov	eax, [ebp+var_1C]
		mov	[esp+1F8h+var_1F8], eax
		call	silc_free
		xor	esi, esi
		jmp	loc_62B882D0
; ---------------------------------------------------------------------------

loc_62B88673:				; CODE XREF: silc_client_get_clients_local_ext+A9j
					; silc_client_get_clients_local_ext+2E4j
		xor	eax, eax
		or	ecx, 0FFFFFFFFh
		mov	edi, [ebp+var_1CC]
		repne scasb
		not	ecx
		dec	ecx
		mov	[esp+1F8h+var_1F4], ecx
		lea	edx, [ebp+var_B1]
		mov	[esp+1F8h+var_1F8], edx
		call	silc_memdup
		mov	edx, eax
		test	eax, eax
		jz	loc_62B882CE
		mov	[ebp+var_1C], eax
		jmp	loc_62B88596
silc_client_get_clients_local_ext endp

; ---------------------------------------------------------------------------
		align 4
; Exported entry 134. silc_client_get_clients_local

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public silc_client_get_clients_local
silc_client_get_clients_local proc near	; CODE XREF: silc_client_command_kick+81p
					; silc_client_command_kill+74p	...

var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= byte ptr  14h

		push	ebp
		mov	ebp, esp
		sub	esp, 28h
		mov	[esp+28h+var_18], 1
		movzx	eax, [ebp+arg_C]
		mov	[esp+28h+var_1C], eax
		mov	eax, [ebp+arg_8]
		mov	[esp+28h+var_20], eax
		mov	eax, [ebp+arg_4]
		mov	[esp+28h+var_24], eax
		mov	eax, [ebp+arg_0]
		mov	[esp+28h+var_28], eax
		call	silc_client_get_clients_local_ext
		leave
		retn
silc_client_get_clients_local endp

; ---------------------------------------------------------------------------
		align 4
; Exported entry 107. silc_client_del_client_entry

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public silc_client_del_client_entry
silc_client_del_client_entry proc near	; CODE XREF: silc_client_unref_client+9Dj

var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		sub	esp, 1Ch
		mov	esi, [ebp+arg_0]
		mov	edi, [ebp+arg_4]
		mov	ebx, [ebp+arg_8]
		mov	eax, [ebx+384h]
		mov	[esp+28h+var_28], eax
		call	silc_free
		mov	eax, [ebx+388h]
		mov	[esp+28h+var_28], eax
		call	silc_free
		mov	eax, [ebx+3ECh]
		mov	[esp+28h+var_28], eax
		call	silc_free
		mov	eax, [ebx+3B0h]
		test	eax, eax
		jz	short loc_62B8872A
		mov	[esp+28h+var_28], eax
		call	silc_pkcs_public_key_free

loc_62B8872A:				; CODE XREF: silc_client_del_client_entry+44j
		mov	eax, [ebx+3B4h]
		mov	[esp+28h+var_28], eax
		call	silc_hash_table_free
		mov	eax, [ebx+3DCh]
		test	eax, eax
		jz	short loc_62B8874A
		mov	[esp+28h+var_28], eax
		call	silc_cipher_free

loc_62B8874A:				; CODE XREF: silc_client_del_client_entry+64j
		mov	eax, [ebx+3E0h]
		test	eax, eax
		jz	short loc_62B8875C
		mov	[esp+28h+var_28], eax
		call	silc_cipher_free

loc_62B8875C:				; CODE XREF: silc_client_del_client_entry+76j
		mov	eax, [ebx+3E4h]
		test	eax, eax
		jz	short loc_62B8876E
		mov	[esp+28h+var_28], eax
		call	silc_hmac_free

loc_62B8876E:				; CODE XREF: silc_client_del_client_entry+88j
		mov	eax, [ebx+3E8h]
		test	eax, eax
		jz	short loc_62B88780
		mov	[esp+28h+var_28], eax
		call	silc_hmac_free

loc_62B88780:				; CODE XREF: silc_client_del_client_entry+9Aj
		mov	[esp+28h+var_24], ebx
		mov	[esp+28h+var_28], esi
		call	silc_client_ftp_session_free_client
		mov	eax, [ebx+3F4h]
		test	eax, eax
		jz	short loc_62B887A6
		mov	[esp+28h+var_20], ebx
		mov	[esp+28h+var_24], edi
		mov	[esp+28h+var_28], esi
		call	silc_client_abort_key_agreement

loc_62B887A6:				; CODE XREF: silc_client_del_client_entry+B8j
		mov	dword ptr [ebx+3FCh], 0
		mov	dword ptr [ebx+3F8h], 0
		mov	eax, [ebx+3D8h]
		mov	[esp+28h+var_28], eax
		call	silc_rwlock_free
		mov	[ebp+arg_0], ebx
		add	esp, 1Ch
		pop	ebx
		pop	esi
		pop	edi
		leave
		jmp	silc_free
silc_client_del_client_entry endp

; ---------------------------------------------------------------------------
		align 4
; Exported entry 228. silc_client_unref_client

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public silc_client_unref_client
silc_client_unref_client proc near	; CODE XREF: silc_client_empty_channel+80p
					; silc_client_remove_from_channels+7Cp	...

var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_1C		= byte ptr -1Ch
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		sub	esp, 2Ch
		mov	edi, [ebp+arg_0]
		mov	esi, [ebp+arg_4]
		mov	ebx, [ebp+arg_8]
		test	ebx, ebx
		jz	short loc_62B88804
		mov	eax, [ebx+3F8h]
		mov	edx, [ebx+3F8h]
		dec	edx
		mov	[ebx+3F8h], edx
		dec	eax
		jz	short loc_62B8880C

loc_62B88804:				; CODE XREF: silc_client_unref_client+14j
					; silc_client_unref_client+7Bj
		add	esp, 2Ch
		pop	ebx
		pop	esi
		pop	edi
		leave
		retn
; ---------------------------------------------------------------------------

loc_62B8880C:				; CODE XREF: silc_client_unref_client+2Aj
		mov	eax, [esi+54h]
		mov	eax, [eax+0B8h]
		mov	[esp+38h+var_38], eax
		call	silc_mutex_lock
		mov	[esp+38h+var_30], 0
		mov	[esp+38h+var_34], ebx
		mov	eax, [esi+54h]
		mov	eax, [eax+114h]
		mov	[esp+38h+var_38], eax
		call	silc_idcache_del_by_context
		mov	edx, [esi+54h]
		mov	edx, [edx+0B8h]
		mov	[esp+38h+var_38], edx
		mov	[ebp+var_1C], al
		call	silc_mutex_unlock
		mov	al, [ebp+var_1C]
		test	al, al
		jz	short loc_62B88804
		mov	[esp+38h+var_30], ebx
		mov	[esp+38h+var_34], esi
		mov	[esp+38h+var_38], edi
		call	silc_client_remove_from_channels
		mov	[ebp+arg_8], ebx
		mov	[ebp+arg_4], esi
		mov	[ebp+arg_0], edi
		add	esp, 2Ch
		pop	ebx
		pop	esi
		pop	edi
		leave
		jmp	silc_client_del_client_entry
silc_client_unref_client endp

; ---------------------------------------------------------------------------
		align 4
; Exported entry 106. silc_client_del_client

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public silc_client_del_client
silc_client_del_client proc near	; CODE XREF: silc_client_del_connection+2C8p
					; silc_client_notify_watch+337p ...

var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		sub	esp, 18h
		mov	eax, [ebp+arg_8]
		test	eax, eax
		jz	short loc_62B8889F
		mov	edx, [eax+3FCh]
		mov	ecx, [eax+3FCh]
		dec	ecx
		mov	[eax+3FCh], ecx
		dec	edx
		jz	short loc_62B888A4

loc_62B8889F:				; CODE XREF: silc_client_del_client+Bj
		xor	eax, eax
		leave
		retn
; ---------------------------------------------------------------------------
		align 4

loc_62B888A4:				; CODE XREF: silc_client_del_client+21j
		mov	[esp+18h+var_10], eax
		mov	eax, [ebp+arg_4]
		mov	[esp+18h+var_14], eax
		mov	eax, [ebp+arg_0]
		mov	[esp+18h+var_18], eax
		call	silc_client_unref_client
		mov	al, 1
		leave
		retn
silc_client_del_client endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_62B888C0	proc near		; CODE XREF: silc_client_get_clients_whois+39j
					; silc_client_get_clients+3Aj

var_4F8		= dword	ptr -4F8h
var_4F4		= dword	ptr -4F4h
var_4F0		= dword	ptr -4F0h
var_4EC		= dword	ptr -4ECh
var_4E8		= dword	ptr -4E8h
var_4E4		= dword	ptr -4E4h
var_4E0		= dword	ptr -4E0h
var_4DC		= dword	ptr -4DCh
var_4D8		= dword	ptr -4D8h
var_4D4		= dword	ptr -4D4h
var_4D0		= dword	ptr -4D0h
var_4CC		= dword	ptr -4CCh
var_4C0		= dword	ptr -4C0h
var_4B9		= byte ptr -4B9h
var_4B8		= dword	ptr -4B8h
var_4B4		= dword	ptr -4B4h
var_4B0		= dword	ptr -4B0h
var_4AC		= dword	ptr -4ACh
var_49F		= byte ptr -49Fh
var_19E		= byte ptr -19Eh
var_9D		= byte ptr -9Dh
var_1C		= dword	ptr -1Ch
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h
arg_10		= dword	ptr  18h

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		sub	esp, 4ECh
		mov	[ebp+var_4B0], eax
		mov	[ebp+var_4B4], edx
		mov	eax, [ebp+arg_0]
		mov	[ebp+var_4B9], cl
		mov	[ebp+var_1C], 0
		mov	ecx, [ebp+var_4B0]
		test	ecx, ecx
		jz	loc_62B88B6C
		test	edx, edx
		jz	loc_62B88B6C
		test	eax, eax
		jz	loc_62B88B60

loc_62B88906:				; CODE XREF: sub_62B888C0+2A5j
		mov	[esp+4F8h+var_4E8], 101h
		lea	esi, [ebp+var_19E]
		mov	[esp+4F8h+var_4EC], esi
		mov	[esp+4F8h+var_4F0], 81h
		lea	ebx, [ebp+var_9D]
		mov	[esp+4F8h+var_4F4], ebx
		mov	[esp+4F8h+var_4F8], eax
		call	silc_parse_userfqdn
		cmp	eax, 2
		jz	loc_62B88B98

loc_62B8893B:				; CODE XREF: sub_62B888C0+2DBj
		lea	eax, [ebp+var_1C]
		mov	[esp+4F8h+var_4EC], eax	; int
		mov	[esp+4F8h+var_4F0], ebx	; char *
		mov	eax, [ebp+var_4B4]
		mov	[esp+4F8h+var_4F4], eax	; int
		mov	edx, [ebp+var_4B0]
		mov	[esp+4F8h+var_4F8], edx	; int
		call	silc_client_nickname_parse
		test	al, al
		jnz	loc_62B88B50
		mov	[ebp+var_4B8], ebx

loc_62B8896C:				; CODE XREF: sub_62B888C0+299j
		mov	[esp+4F8h+var_4F4], 10h
		mov	[esp+4F8h+var_4F8], 1
		call	silc_calloc
		mov	ebx, eax
		test	eax, eax
		jz	loc_62B88BEC
		mov	[esp+4F8h+var_4F8], 1Ch
		call	silc_malloc
		test	eax, eax
		jz	loc_62B88C00
		mov	dword ptr [eax+18h], 0
		mov	dword ptr [eax+14h], 0
		mov	edx, [eax+10h]
		and	edx, 3
		mov	[eax+10h], edx
		mov	word ptr [eax+0Ch], 4
		mov	word ptr [eax+0Eh], 8
		mov	byte ptr [eax+10h], 1
		mov	dword ptr [eax+8], 0
		mov	dword ptr [eax+4], 0
		mov	dword ptr [eax], 0
		mov	[ebx], eax
		mov	eax, [ebp+arg_C]
		mov	[ebx+4], eax
		mov	eax, [ebp+arg_10]
		mov	[ebx+8], eax
		lea	esi, [ebp+var_49F]
		mov	ecx, 301h
		mov	edi, esi
		xor	eax, eax
		rep stosb
		mov	edi, [ebp+var_4B8]
		test	edi, edi
		jz	loc_62B88AA1
		mov	ecx, [ebp+arg_4]
		test	ecx, ecx
		jz	loc_62B88BA0
		mov	ecx, 0FFFFFFFFh
		mov	edi, [ebp+var_4B8]
		xor	eax, eax
		repne scasb
		mov	edx, ecx
		not	edx
		mov	ecx, 0FFFFFFFFh
		mov	edi, [ebp+arg_4]
		repne scasb
		lea	eax, [edx-1]
		sub	edx, ecx
		mov	[esp+4F8h+var_4EC], eax
		mov	eax, [ebp+var_4B8]
		mov	[esp+4F8h+var_4F0], eax
		mov	[esp+4F8h+var_4F4], edx
		mov	[esp+4F8h+var_4F8], esi
		mov	[ebp+var_4C0], edx
		call	silc_strncat
		mov	[esp+4F8h+var_4EC], 1
		mov	[esp+4F8h+var_4F0], offset a@_0	; "@"
		mov	edx, [ebp+var_4C0]
		mov	[esp+4F8h+var_4F4], edx
		mov	[esp+4F8h+var_4F8], esi
		call	silc_strncat
		mov	ecx, 0FFFFFFFFh
		mov	edi, [ebp+arg_4]
		xor	eax, eax
		repne scasb
		not	ecx
		dec	ecx
		mov	[esp+4F8h+var_4EC], ecx
		mov	ecx, [ebp+arg_4]
		mov	[esp+4F8h+var_4F0], ecx
		mov	edx, [ebp+var_4C0]
		mov	[esp+4F8h+var_4F4], edx
		mov	[esp+4F8h+var_4F8], esi
		call	silc_strncat

loc_62B88AA1:				; CODE XREF: sub_62B888C0+140j
					; sub_62B888C0+310j
		mov	eax, [ebp+var_1C]
		mov	[esp+4F8h+var_4F8], eax
		call	silc_free
		cmp	[ebp+var_4B9], 3
		jz	loc_62B88C20
		mov	edx, [ebp+arg_8]
		test	edx, edx
		jz	loc_62B88BD8
		mov	edx, [ebp+arg_8]
		mov	edx, [edx+4]
		mov	[ebp+var_4AC], edx
		mov	ecx, [ebp+arg_8]
		mov	edx, [ecx+8]
		sub	edx, [ebp+var_4AC]

loc_62B88ADC:				; CODE XREF: sub_62B888C0+324j
		xor	eax, eax
		mov	ecx, 0FFFFFFFFh
		mov	edi, esi
		repne scasb
		not	ecx
		dec	ecx
		mov	[esp+4F8h+var_4CC], edx
		mov	eax, [ebp+var_4AC]
		mov	[esp+4F8h+var_4D0], eax
		mov	[esp+4F8h+var_4D4], 3
		mov	[esp+4F8h+var_4D8], ecx
		mov	[esp+4F8h+var_4DC], esi
		mov	[esp+4F8h+var_4E0], 1
		mov	[esp+4F8h+var_4E4], 2
		mov	[esp+4F8h+var_4E8], ebx
		mov	[esp+4F8h+var_4EC], offset sub_62B8AB70
		mov	[esp+4F8h+var_4F0], 1
		mov	edx, [ebp+var_4B4]
		mov	[esp+4F8h+var_4F4], edx
		mov	ecx, [ebp+var_4B0]
		mov	[esp+4F8h+var_4F8], ecx
		call	silc_client_command_send

loc_62B88B44:				; CODE XREF: sub_62B888C0+339j
					; sub_62B888C0+35Bj ...
		add	esp, 4ECh
		pop	ebx
		pop	esi
		pop	edi
		leave
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_62B88B50:				; CODE XREF: sub_62B888C0+A0j
		mov	ecx, [ebp+var_1C]
		mov	[ebp+var_4B8], ecx
		jmp	loc_62B8896C
; ---------------------------------------------------------------------------
		align 10h

loc_62B88B60:				; CODE XREF: sub_62B888C0+40j
		mov	edx, [ebp+arg_8]
		test	edx, edx
		jnz	loc_62B88906
		nop

loc_62B88B6C:				; CODE XREF: sub_62B888C0+30j
					; sub_62B888C0+38j
		mov	[esp+4F8h+var_4F8], offset aMissingArgumen ; "Missing arguments	to silc_client_get_cl"...
		call	silc_format
		mov	[esp+4F4h+var_4F0], eax
		mov	[esp+4F4h+var_4F4], 3
		call	silc_log_output
		xor	eax, eax
		add	esp, 4ECh
		pop	ebx
		pop	esi
		pop	edi
		leave
		retn
; ---------------------------------------------------------------------------
		align 4

loc_62B88B98:				; CODE XREF: sub_62B888C0+75j
		mov	[ebp+arg_4], esi
		jmp	loc_62B8893B
; ---------------------------------------------------------------------------

loc_62B88BA0:				; CODE XREF: sub_62B888C0+14Bj
		mov	ecx, 0FFFFFFFFh
		mov	edi, [ebp+var_4B8]
		xor	eax, eax
		repne scasb
		not	ecx
		dec	ecx
		mov	[esp+4F8h+var_4EC], ecx
		mov	edx, [ebp+var_4B8]
		mov	[esp+4F8h+var_4F0], edx
		mov	[esp+4F8h+var_4F4], 300h
		mov	[esp+4F8h+var_4F8], esi
		call	silc_strncat
		jmp	loc_62B88AA1
; ---------------------------------------------------------------------------
		align 4

loc_62B88BD8:				; CODE XREF: sub_62B888C0+1FEj
		xor	edx, edx
		mov	[ebp+var_4AC], 0
		jmp	loc_62B88ADC
; ---------------------------------------------------------------------------
		align 4

loc_62B88BEC:				; CODE XREF: sub_62B888C0+C4j
		mov	eax, [ebp+var_1C]
		mov	[esp+4F8h+var_4F8], eax
		call	silc_free
		xor	eax, eax
		jmp	loc_62B88B44
; ---------------------------------------------------------------------------
		align 10h

loc_62B88C00:				; CODE XREF: sub_62B888C0+D8j
		mov	dword ptr [ebx], 0
		mov	eax, [ebp+var_1C]
		mov	[esp+4F8h+var_4F8], eax
		call	silc_free
		mov	[esp+4F8h+var_4F8], ebx
		call	silc_free
		xor	eax, eax
		jmp	loc_62B88B44
; ---------------------------------------------------------------------------

loc_62B88C20:				; CODE XREF: sub_62B888C0+1F3j
		xor	eax, eax
		mov	ecx, 0FFFFFFFFh
		mov	edi, esi
		repne scasb
		not	ecx
		dec	ecx
		mov	[esp+4F8h+var_4D8], ecx
		mov	[esp+4F8h+var_4DC], esi
		mov	[esp+4F8h+var_4E0], 1
		mov	[esp+4F8h+var_4E4], 1
		mov	[esp+4F8h+var_4E8], ebx
		mov	[esp+4F8h+var_4EC], offset sub_62B8AB70
		mov	[esp+4F8h+var_4F0], 3
		mov	ecx, [ebp+var_4B4]
		mov	[esp+4F8h+var_4F4], ecx
		mov	eax, [ebp+var_4B0]
		mov	[esp+4F8h+var_4F8], eax
		call	silc_client_command_send
		jmp	loc_62B88B44
sub_62B888C0	endp

; ---------------------------------------------------------------------------
		align 4
; Exported entry 136. silc_client_get_clients_whois

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public silc_client_get_clients_whois
silc_client_get_clients_whois proc near

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h
arg_10		= dword	ptr  18h
arg_14		= dword	ptr  1Ch
arg_18		= dword	ptr  20h

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		sub	esp, 0Ch
		mov	eax, [ebp+arg_0]
		mov	edx, [ebp+arg_4]
		mov	ecx, [ebp+arg_8]
		mov	ebx, [ebp+arg_C]
		mov	esi, [ebp+arg_10]
		mov	edi, [ebp+arg_18]
		mov	[ebp+arg_10], edi
		mov	edi, [ebp+arg_14]
		mov	[ebp+arg_C], edi
		mov	[ebp+arg_8], esi
		mov	[ebp+arg_4], ebx
		mov	[ebp+arg_0], ecx
		mov	ecx, 1
		add	esp, 0Ch
		pop	ebx
		pop	esi
		pop	edi
		leave
		jmp	sub_62B888C0
silc_client_get_clients_whois endp

; ---------------------------------------------------------------------------
		align 4
; Exported entry 132. silc_client_get_clients

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public silc_client_get_clients
silc_client_get_clients	proc near	; CODE XREF: silc_client_command_kill+402p
					; silc_client_command_invite+6A9p ...

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h
arg_10		= dword	ptr  18h
arg_14		= dword	ptr  1Ch

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		sub	esp, 0Ch
		mov	eax, [ebp+arg_0]
		mov	edx, [ebp+arg_4]
		mov	ecx, [ebp+arg_8]
		mov	ebx, [ebp+arg_C]
		mov	esi, [ebp+arg_10]
		mov	edi, [ebp+arg_14]
		mov	[ebp+arg_10], edi
		mov	[ebp+arg_C], esi
		mov	[ebp+arg_8], 0
		mov	[ebp+arg_4], ebx
		mov	[ebp+arg_0], ecx
		mov	ecx, 3
		add	esp, 0Ch
		pop	ebx
		pop	esi
		pop	edi
		leave
		jmp	sub_62B888C0
silc_client_get_clients	endp

; ---------------------------------------------------------------------------
		align 4
; Exported entry 128. silc_client_get_channel_resolve

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public silc_client_get_channel_resolve
silc_client_get_channel_resolve	proc near

var_58		= dword	ptr -58h
var_54		= dword	ptr -54h
var_50		= dword	ptr -50h
var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h
arg_10		= dword	ptr  18h

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		sub	esp, 4Ch
		mov	eax, [ebp+arg_0]
		mov	[ebp+var_1C], eax
		mov	ecx, [ebp+arg_4]
		mov	[ebp+var_20], ecx
		mov	esi, [ebp+arg_8]
		mov	eax, [ebp+arg_C]
		mov	[ebp+var_24], eax
		mov	ecx, [ebp+arg_10]
		mov	[ebp+var_28], ecx
		mov	edi, [ebp+var_1C]
		test	edi, edi
		jz	loc_62B88E3C
		mov	ebx, [ebp+var_20]
		test	ebx, ebx
		jz	loc_62B88E3C
		test	esi, esi
		jz	loc_62B88E3C
		test	eax, eax
		jz	loc_62B88E3C
		mov	[esp+58h+var_54], 0Ch
		mov	[esp+58h+var_58], 1
		call	silc_calloc
		mov	ebx, eax
		test	eax, eax
		jz	loc_62B88E3C
		mov	eax, [ebp+var_24]
		mov	[ebx+4], eax
		mov	ecx, [ebp+var_28]
		mov	[ebx+8], ecx
		mov	[esp+58h+var_58], 1Ch
		call	silc_malloc
		test	eax, eax
		jz	loc_62B88E44
		mov	dword ptr [eax+18h], 0
		mov	dword ptr [eax+14h], 0
		mov	edx, [eax+10h]
		and	edx, 3
		mov	[eax+10h], edx
		mov	word ptr [eax+0Ch], 4
		mov	word ptr [eax+0Eh], 8
		mov	byte ptr [eax+10h], 1
		mov	dword ptr [eax+8], 0
		mov	dword ptr [eax+4], 0
		mov	dword ptr [eax], 0
		mov	[ebx], eax
		xor	eax, eax
		mov	ecx, 0FFFFFFFFh
		mov	edi, esi
		repne scasb
		not	ecx
		dec	ecx
		mov	[esp+58h+var_38], ecx
		mov	[esp+58h+var_3C], esi
		mov	[esp+58h+var_40], 3
		mov	[esp+58h+var_44], 1
		mov	[esp+58h+var_48], ebx
		mov	[esp+58h+var_4C], offset sub_62B8A8EC
		mov	[esp+58h+var_50], 3
		mov	eax, [ebp+var_20]
		mov	[esp+58h+var_54], eax
		mov	ecx, [ebp+var_1C]
		mov	[esp+58h+var_58], ecx
		call	silc_client_command_send
		test	ax, ax
		jnz	short loc_62B88E3C
		mov	eax, [ebp+var_28]
		mov	[ebp+arg_10], eax
		mov	[ebp+arg_C], 0
		mov	[ebp+arg_8], 30h
		mov	ecx, [ebp+var_20]
		mov	[ebp+arg_4], ecx
		mov	eax, [ebp+var_1C]
		mov	[ebp+arg_0], eax
		mov	ecx, [ebp+var_24]
		add	esp, 4Ch
		pop	ebx
		pop	esi
		pop	edi
		leave
		jmp	ecx
; ---------------------------------------------------------------------------
		align 4

loc_62B88E3C:				; CODE XREF: silc_client_get_channel_resolve+29j
					; silc_client_get_channel_resolve+34j ...
		add	esp, 4Ch
		pop	ebx
		pop	esi
		pop	edi
		leave
		retn
; ---------------------------------------------------------------------------

loc_62B88E44:				; CODE XREF: silc_client_get_channel_resolve+82j
		mov	dword ptr [ebx], 0
		mov	[ebp+arg_0], ebx
		add	esp, 4Ch
		pop	ebx
		pop	esi
		pop	edi
		leave
		jmp	silc_free
silc_client_get_channel_resolve	endp

; ---------------------------------------------------------------------------
		align 4
; Exported entry 229. silc_client_unref_server

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public silc_client_unref_server
silc_client_unref_server proc near	; CODE XREF: silc_client_del_server+31p
					; silc_client_get_server_by_id_resolve+1BCp ...

var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_1C		= dword	ptr -1Ch
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		sub	esp, 2Ch
		mov	esi, [ebp+arg_4]
		mov	ebx, [ebp+arg_8]
		test	ebx, ebx
		jz	short loc_62B88E7C
		mov	eax, [ebx+30h]
		mov	edx, [ebx+30h]
		dec	edx
		mov	[ebx+30h], edx
		dec	eax
		jz	short loc_62B88E84

loc_62B88E7C:				; CODE XREF: silc_client_unref_server+11j
		add	esp, 2Ch
		pop	ebx
		pop	esi
		pop	edi
		leave
		retn
; ---------------------------------------------------------------------------

loc_62B88E84:				; CODE XREF: silc_client_unref_server+1Ej
		mov	eax, [esi+54h]
		mov	eax, [eax+0B8h]
		mov	[esp+38h+var_38], eax
		call	silc_mutex_lock
		lea	eax, [ebp+var_1C]
		mov	[esp+38h+var_30], eax
		mov	[esp+38h+var_34], ebx
		mov	eax, [esi+54h]
		mov	eax, [eax+11Ch]
		mov	[esp+38h+var_38], eax
		call	silc_idcache_find_by_context
		test	al, al
		jnz	short loc_62B88F14

loc_62B88EB5:				; CODE XREF: silc_client_unref_server+E3j
		mov	eax, [esi+54h]
		mov	eax, [eax+0B8h]
		mov	[esp+38h+var_38], eax
		call	silc_mutex_unlock
		mov	eax, [ebx]
		mov	[esp+38h+var_38], eax
		call	silc_free
		mov	eax, [ebx+4]
		mov	[esp+38h+var_38], eax
		call	silc_free
		mov	eax, [ebx+20h]
		test	eax, eax
		jz	short loc_62B88EEA
		mov	[esp+38h+var_38], eax
		call	silc_pkcs_public_key_free

loc_62B88EEA:				; CODE XREF: silc_client_unref_server+84j
		mov	dword ptr [ebx+34h], 0
		mov	dword ptr [ebx+30h], 0
		mov	eax, [ebx+28h]
		mov	[esp+38h+var_38], eax
		call	silc_rwlock_free
		mov	[esp+34h+var_34], ebx
		call	silc_free
		add	esp, 2Ch
		pop	ebx
		pop	esi
		pop	edi
		leave
		retn
; ---------------------------------------------------------------------------
		align 4

loc_62B88F14:				; CODE XREF: silc_client_unref_server+57j
		mov	eax, [ebp+var_1C]
		mov	edi, [eax+8]
		mov	[esp+38h+var_30], 0
		mov	[esp+38h+var_34], ebx
		mov	eax, [esi+54h]
		mov	eax, [eax+11Ch]
		mov	[esp+38h+var_38], eax
		call	silc_idcache_del_by_context
		mov	[esp+38h+var_38], edi
		call	silc_free
		jmp	loc_62B88EB5
silc_client_unref_server endp

; Exported entry 110. silc_client_del_server

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public silc_client_del_server
silc_client_del_server proc near	; CODE XREF: silc_client_del_connection+68p
					; sub_62B9EB60+84p

var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		sub	esp, 18h
		mov	eax, [ebp+arg_8]
		test	eax, eax
		jz	short loc_62B88F5E
		mov	edx, [eax+34h]
		mov	ecx, [eax+34h]
		dec	ecx
		mov	[eax+34h], ecx
		dec	edx
		jz	short loc_62B88F64

loc_62B88F5E:				; CODE XREF: silc_client_del_server+Bj
		xor	eax, eax
		leave
		retn
; ---------------------------------------------------------------------------
		align 4

loc_62B88F64:				; CODE XREF: silc_client_del_server+18j
		mov	[esp+18h+var_10], eax
		mov	eax, [ebp+arg_4]
		mov	[esp+18h+var_14], eax
		mov	eax, [ebp+arg_0]
		mov	[esp+18h+var_18], eax
		call	silc_client_unref_server
		mov	al, 1
		leave
		retn
silc_client_del_server endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 127. silc_client_get_channel_by_id_resolve

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public silc_client_get_channel_by_id_resolve
silc_client_get_channel_by_id_resolve proc near	; CODE XREF: silc_client_notify_killed+2A3p
					; silc_client_notify_invite+256p ...

var_58		= dword	ptr -58h
var_54		= dword	ptr -54h
var_50		= dword	ptr -50h
var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_1C		= dword	ptr -1Ch
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h
arg_10		= dword	ptr  18h

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		sub	esp, 4Ch
		mov	esi, [ebp+arg_0]
		mov	edi, [ebp+arg_4]
		test	esi, esi
		jz	loc_62B890DC
		test	edi, edi
		jz	loc_62B890DC
		mov	edx, [ebp+arg_8]
		test	edx, edx
		jz	loc_62B890DC
		mov	eax, [ebp+arg_C]
		test	eax, eax
		jz	loc_62B890DC
		mov	[esp+58h+var_54], 0Ch
		mov	[esp+58h+var_58], 1
		call	silc_calloc
		mov	ebx, eax
		test	eax, eax
		jz	loc_62B890DC
		mov	eax, [ebp+arg_C]
		mov	[ebx+4], eax
		mov	eax, [ebp+arg_10]
		mov	[ebx+8], eax
		mov	[esp+58h+var_58], 1Ch
		call	silc_malloc
		test	eax, eax
		jz	loc_62B89130
		mov	dword ptr [eax+18h], 0
		mov	dword ptr [eax+14h], 0
		mov	edx, [eax+10h]
		and	edx, 3
		mov	[eax+10h], edx
		mov	word ptr [eax+0Ch], 4
		mov	word ptr [eax+0Eh], 8
		mov	byte ptr [eax+10h], 1
		mov	dword ptr [eax+8], 0
		mov	dword ptr [eax+4], 0
		mov	dword ptr [eax], 0
		mov	[ebx], eax
		mov	[esp+58h+var_54], 3
		mov	eax, [ebp+arg_8]
		mov	[esp+58h+var_58], eax
		call	silc_id_payload_encode
		mov	edx, eax
		test	eax, eax
		jz	loc_62B890E8
		mov	ecx, [eax+4]
		mov	eax, [eax+8]
		sub	eax, ecx
		mov	[esp+58h+var_38], eax
		mov	[esp+58h+var_3C], ecx
		mov	[esp+58h+var_40], 5
		mov	[esp+58h+var_44], 1
		mov	[esp+58h+var_48], ebx
		mov	[esp+58h+var_4C], offset sub_62B8A8EC
		mov	[esp+58h+var_50], 3
		mov	[esp+58h+var_54], edi
		mov	[esp+58h+var_58], esi
		mov	[ebp+var_1C], edx
		call	silc_client_command_send
		mov	ebx, eax
		mov	edx, [ebp+var_1C]
		mov	eax, [edx]
		mov	[esp+58h+var_58], eax
		call	silc_free
		mov	edx, [ebp+var_1C]
		mov	[esp+58h+var_58], edx
		call	silc_free

loc_62B890AA:				; CODE XREF: silc_client_get_channel_by_id_resolve+1AAj
		test	bx, bx
		jnz	short loc_62B890DE
		mov	eax, [ebp+arg_10]
		mov	[esp+58h+var_48], eax
		mov	[esp+58h+var_4C], 0
		mov	[esp+58h+var_50], 30h
		mov	[esp+58h+var_54], edi
		mov	[esp+58h+var_58], esi
		call	[ebp+arg_C]
		mov	eax, ebx
		add	esp, 4Ch
		pop	ebx
		pop	esi
		pop	edi
		leave
		retn
; ---------------------------------------------------------------------------
		align 4

loc_62B890DC:				; CODE XREF: silc_client_get_channel_by_id_resolve+11j
					; silc_client_get_channel_by_id_resolve+19j ...
		xor	ebx, ebx

loc_62B890DE:				; CODE XREF: silc_client_get_channel_by_id_resolve+12Dj
					; silc_client_get_channel_by_id_resolve+1C0j
		mov	eax, ebx
		add	esp, 4Ch
		pop	ebx
		pop	esi
		pop	edi
		leave
		retn
; ---------------------------------------------------------------------------

loc_62B890E8:				; CODE XREF: silc_client_get_channel_by_id_resolve+C7j
		mov	[esp+58h+var_38], 0
		mov	[esp+58h+var_3C], 0
		mov	[esp+58h+var_40], 5
		mov	[esp+58h+var_44], 1
		mov	[esp+58h+var_48], ebx
		mov	[esp+58h+var_4C], offset sub_62B8A8EC
		mov	[esp+58h+var_50], 3
		mov	[esp+58h+var_54], edi
		mov	[esp+58h+var_58], esi
		call	silc_client_command_send
		mov	ebx, eax
		jmp	loc_62B890AA
; ---------------------------------------------------------------------------
		align 10h

loc_62B89130:				; CODE XREF: silc_client_get_channel_by_id_resolve+6Dj
		mov	dword ptr [ebx], 0
		mov	[esp+58h+var_58], ebx
		call	silc_free
		xor	ebx, ebx
		jmp	short loc_62B890DE
silc_client_get_channel_by_id_resolve endp

; ---------------------------------------------------------------------------
		align 4
; Exported entry 140. silc_client_get_server_by_id_resolve

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public silc_client_get_server_by_id_resolve
silc_client_get_server_by_id_resolve proc near ; CODE XREF: silc_client_notify_killed+371p
					; silc_client_notify_cumode_change+68Fp ...

var_68		= dword	ptr -68h
var_64		= dword	ptr -64h
var_60		= dword	ptr -60h
var_5C		= dword	ptr -5Ch
var_58		= dword	ptr -58h
var_54		= dword	ptr -54h
var_50		= dword	ptr -50h
var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_1C		= dword	ptr -1Ch
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h
arg_10		= dword	ptr  18h

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		sub	esp, 5Ch
		mov	edi, [ebp+arg_0]
		mov	ebx, [ebp+arg_4]
		test	edi, edi
		jz	loc_62B89310
		test	ebx, ebx
		jz	loc_62B89310
		mov	eax, [ebp+arg_8]
		test	eax, eax
		jz	loc_62B89310
		mov	esi, [ebp+arg_C]
		test	esi, esi
		jz	loc_62B89310
		mov	[esp+68h+var_64], 0Ch
		mov	[esp+68h+var_68], 1
		call	silc_calloc
		mov	esi, eax
		test	eax, eax
		jz	loc_62B89310
		mov	eax, [ebp+arg_C]
		mov	[esi+4], eax
		mov	edx, [ebp+arg_10]
		mov	[esi+8], edx
		mov	[esp+68h+var_68], 1Ch
		call	silc_malloc
		test	eax, eax
		jz	loc_62B893C8
		mov	dword ptr [eax+18h], 0
		mov	dword ptr [eax+14h], 0
		mov	edx, [eax+10h]
		and	edx, 3
		mov	[eax+10h], edx
		mov	word ptr [eax+0Ch], 4
		mov	word ptr [eax+0Eh], 8
		mov	byte ptr [eax+10h], 1
		mov	dword ptr [eax+8], 0
		mov	dword ptr [eax+4], 0
		mov	dword ptr [eax], 0
		mov	[esi], eax
		mov	eax, [ebx+54h]
		mov	eax, [eax+0B8h]
		mov	[esp+68h+var_68], eax
		call	silc_mutex_lock
		lea	eax, [ebp+var_1C]
		mov	[esp+68h+var_60], eax
		mov	eax, [ebp+arg_8]
		mov	[esp+68h+var_64], eax
		mov	eax, [ebx+54h]
		mov	eax, [eax+11Ch]
		mov	[esp+68h+var_68], eax
		call	silc_idcache_find_by_id_one
		test	al, al
		jz	loc_62B893E0
		mov	eax, [ebp+var_1C]
		mov	eax, [eax+0Ch]
		mov	[ebp+var_2C], eax
		mov	edx, eax
		mov	eax, [eax+30h]
		mov	eax, [edx+30h]
		inc	eax
		mov	[edx+30h], eax
		mov	eax, [ebx+54h]
		mov	eax, [eax+0B8h]
		mov	[esp+68h+var_68], eax
		call	silc_mutex_unlock
		mov	eax, [ebp+var_2C]
		cmp	word ptr [eax+2Ch], 0
		jnz	loc_62B8933F

loc_62B89260:				; CODE XREF: silc_client_get_server_by_id_resolve+2B4j
		mov	[esp+68h+var_64], 1
		mov	edx, [ebp+arg_8]
		mov	[esp+68h+var_68], edx
		call	silc_id_payload_encode
		mov	edx, eax
		test	eax, eax
		jz	loc_62B89380
		mov	ecx, [eax+4]
		mov	eax, [eax+8]
		sub	eax, ecx
		mov	[esp+68h+var_48], eax
		mov	[esp+68h+var_4C], ecx
		mov	[esp+68h+var_50], 5
		mov	[esp+68h+var_54], 1
		mov	[esp+68h+var_58], esi
		mov	[esp+68h+var_5C], offset sub_62B8A664
		mov	[esp+68h+var_60], 3
		mov	[esp+68h+var_64], ebx
		mov	[esp+68h+var_68], edi
		mov	[ebp+var_30], edx
		call	silc_client_command_send
		mov	esi, eax
		mov	edx, [ebp+var_30]
		mov	eax, [edx]
		mov	[esp+68h+var_68], eax
		call	silc_free
		mov	edx, [ebp+var_30]
		mov	[esp+68h+var_68], edx
		call	silc_free

loc_62B892DA:				; CODE XREF: silc_client_get_server_by_id_resolve+27Ej
		test	si, si
		jz	short loc_62B8931C

loc_62B892DF:				; CODE XREF: silc_client_get_server_by_id_resolve+1F9j
		mov	ecx, [ebp+var_2C]
		test	ecx, ecx
		jz	short loc_62B892F2
		test	si, si
		jz	short loc_62B892F2
		mov	edx, [ebp+var_2C]
		mov	[edx+2Ch], si

loc_62B892F2:				; CODE XREF: silc_client_get_server_by_id_resolve+1A0j
					; silc_client_get_server_by_id_resolve+1A5j
		mov	eax, [ebp+var_2C]
		mov	[esp+68h+var_60], eax
		mov	[esp+68h+var_64], ebx
		mov	[esp+68h+var_68], edi
		call	silc_client_unref_server
		mov	eax, esi
		add	esp, 5Ch
		pop	ebx
		pop	esi
		pop	edi
		leave
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_62B89310:				; CODE XREF: silc_client_get_server_by_id_resolve+11j
					; silc_client_get_server_by_id_resolve+19j ...
		xor	esi, esi

loc_62B89312:				; CODE XREF: silc_client_get_server_by_id_resolve+238j
					; silc_client_get_server_by_id_resolve+294j
		mov	eax, esi
		add	esp, 5Ch
		pop	ebx
		pop	esi
		pop	edi
		leave
		retn
; ---------------------------------------------------------------------------

loc_62B8931C:				; CODE XREF: silc_client_get_server_by_id_resolve+199j
		mov	eax, [ebp+arg_10]
		mov	[esp+68h+var_58], eax
		mov	[esp+68h+var_5C], 0
		mov	[esp+68h+var_60], 30h
		mov	[esp+68h+var_64], ebx
		mov	[esp+68h+var_68], edi
		call	[ebp+arg_C]
		jmp	short loc_62B892DF
; ---------------------------------------------------------------------------

loc_62B8933F:				; CODE XREF: silc_client_get_server_by_id_resolve+116j
		mov	[esp+68h+var_60], eax
		mov	[esp+68h+var_64], ebx
		mov	[esp+68h+var_68], edi
		call	silc_client_unref_server
		mov	[esp+68h+var_58], esi
		mov	[esp+68h+var_5C], offset sub_62B8A664
		mov	edx, [ebp+var_2C]
		movzx	eax, word ptr [edx+2Ch]
		mov	[esp+68h+var_60], eax
		mov	[esp+68h+var_64], 0
		mov	[esp+68h+var_68], ebx
		call	silc_client_command_pending
		mov	eax, [ebp+var_2C]
		mov	esi, [eax+2Ch]
		jmp	short loc_62B89312
; ---------------------------------------------------------------------------
		align 10h

loc_62B89380:				; CODE XREF: silc_client_get_server_by_id_resolve+133j
		mov	[esp+68h+var_48], 0
		mov	[esp+68h+var_4C], 0
		mov	[esp+68h+var_50], 5
		mov	[esp+68h+var_54], 1
		mov	[esp+68h+var_58], esi
		mov	[esp+68h+var_5C], offset sub_62B8A664
		mov	[esp+68h+var_60], 3
		mov	[esp+68h+var_64], ebx
		mov	[esp+68h+var_68], edi
		call	silc_client_command_send
		mov	esi, eax
		jmp	loc_62B892DA
; ---------------------------------------------------------------------------
		align 4

loc_62B893C8:				; CODE XREF: silc_client_get_server_by_id_resolve+6Dj
		mov	dword ptr [esi], 0
		mov	[esp+68h+var_68], esi
		call	silc_free
		xor	esi, esi
		jmp	loc_62B89312
; ---------------------------------------------------------------------------
		align 10h

loc_62B893E0:				; CODE XREF: silc_client_get_server_by_id_resolve+E2j
		mov	eax, [ebx+54h]
		mov	eax, [eax+0B8h]
		mov	[esp+68h+var_68], eax
		call	silc_mutex_unlock
		mov	[ebp+var_2C], 0
		jmp	loc_62B89260
silc_client_get_server_by_id_resolve endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 149. silc_client_list_free_servers

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public silc_client_list_free_servers
silc_client_list_free_servers proc near

var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_2C		= dword	ptr -2Ch
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		sub	esp, 3Ch
		mov	esi, [ebp+arg_0]
		mov	edi, [ebp+arg_4]
		mov	ebx, [ebp+arg_8]
		test	ebx, ebx
		jz	loc_62B89538
		mov	eax, [ebx]
		mov	[ebx+8], eax
		mov	dl, [ebx+10h]
		and	edx, 0FFFFFFFDh
		mov	[ebx+10h], dl
		mov	dword ptr [ebx+18h], 0
		mov	dword ptr [ebx+14h], 0
		xor	eax, eax
		jmp	short loc_62B89465
; ---------------------------------------------------------------------------
		align 4

loc_62B8943C:				; CODE XREF: silc_client_list_free_servers+72j
		movzx	ecx, word ptr [ebx+0Eh]
		mov	ecx, [eax+ecx]

loc_62B89443:				; CODE XREF: silc_client_list_free_servers+7Bj
		mov	[ebx+8], ecx
		mov	[ebx+14h], eax
		mov	eax, [eax]
		test	eax, eax
		jz	short loc_62B89487
		mov	[esp+48h+var_40], eax
		mov	[esp+48h+var_44], edi
		mov	[esp+48h+var_48], esi
		call	silc_client_unref_server
		mov	eax, [ebx+14h]
		mov	dl, [ebx+10h]

loc_62B89465:				; CODE XREF: silc_client_list_free_servers+38j
		mov	[ebx+18h], eax
		mov	eax, [ebx+8]
		test	eax, eax
		jz	short loc_62B89480
		test	dl, 2
		jnz	short loc_62B8943C
		movzx	ecx, word ptr [ebx+0Ch]
		mov	ecx, [eax+ecx]
		jmp	short loc_62B89443
; ---------------------------------------------------------------------------
		align 10h

loc_62B89480:				; CODE XREF: silc_client_list_free_servers+6Dj
		mov	dword ptr [ebx+14h], 0

loc_62B89487:				; CODE XREF: silc_client_list_free_servers+4Dj
		mov	ecx, [ebx]
		mov	[ebx+8], ecx
		and	edx, 0FFFFFFFDh
		mov	[ebx+10h], dl
		test	ecx, ecx
		jz	short loc_62B894DF
		xchg	ax, ax

loc_62B89498:				; CODE XREF: silc_client_list_free_servers+DDj
		test	byte ptr [ebx+10h], 2
		jz	short loc_62B894F0
		movzx	eax, word ptr [ebx+0Eh]
		mov	eax, [ecx+eax]

loc_62B894A5:				; CODE XREF: silc_client_list_free_servers+F7j
		mov	[ebx+8], eax
		mov	eax, [ebx]
		test	eax, eax
		jz	short loc_62B894CB
		cmp	ecx, eax
		jz	loc_62B89540
		movzx	edi, word ptr [ebx+0Ch]
		jmp	short loc_62B894C2
; ---------------------------------------------------------------------------

loc_62B894BC:				; CODE XREF: silc_client_list_free_servers+C9j
		cmp	ecx, esi
		jz	short loc_62B894FC
		mov	eax, esi

loc_62B894C2:				; CODE XREF: silc_client_list_free_servers+BAj
		lea	edx, [eax+edi]
		mov	esi, [edx]
		test	esi, esi
		jnz	short loc_62B894BC

loc_62B894CB:				; CODE XREF: silc_client_list_free_servers+ACj
		cmp	ecx, [ebx+4]
		jz	short loc_62B89529

loc_62B894D0:				; CODE XREF: silc_client_list_free_servers+127j
					; silc_client_list_free_servers+12Cj
		mov	[esp+48h+var_48], ecx
		call	silc_free
		mov	ecx, [ebx+8]
		test	ecx, ecx
		jnz	short loc_62B89498

loc_62B894DF:				; CODE XREF: silc_client_list_free_servers+94j
		mov	[ebp+arg_0], ebx
		add	esp, 3Ch
		pop	ebx
		pop	esi
		pop	edi
		leave
		jmp	silc_free
; ---------------------------------------------------------------------------
		align 10h

loc_62B894F0:				; CODE XREF: silc_client_list_free_servers+9Cj
		movzx	eax, word ptr [ebx+0Ch]
		mov	eax, [ecx+eax]
		jmp	short loc_62B894A5
; ---------------------------------------------------------------------------
		align 4

loc_62B894FC:				; CODE XREF: silc_client_list_free_servers+BEj
		mov	[ebp+var_2C], edx

loc_62B894FF:				; CODE XREF: silc_client_list_free_servers+149j
		mov	esi, [ecx+edi]
		mov	edx, [ebp+var_2C]
		mov	[edx], esi
		test	esi, esi
		jz	short loc_62B8951B
		test	byte ptr [ebx+10h], 1
		jz	short loc_62B8951B
		movzx	edi, word ptr [ebx+0Eh]
		mov	edx, [ecx+edi]
		mov	[esi+edi], edx

loc_62B8951B:				; CODE XREF: silc_client_list_free_servers+109j
					; silc_client_list_free_servers+10Fj
		cmp	ecx, [ebx+8]
		jz	short loc_62B8952E

loc_62B89520:				; CODE XREF: silc_client_list_free_servers+136j
		sub	dword ptr [ebx+10h], 4
		cmp	ecx, [ebx+4]
		jnz	short loc_62B894D0

loc_62B89529:				; CODE XREF: silc_client_list_free_servers+CEj
		mov	[ebx+4], eax
		jmp	short loc_62B894D0
; ---------------------------------------------------------------------------

loc_62B8952E:				; CODE XREF: silc_client_list_free_servers+11Ej
		mov	esi, [ebp+var_2C]
		mov	edx, [esi]
		mov	[ebx+8], edx
		jmp	short loc_62B89520
; ---------------------------------------------------------------------------

loc_62B89538:				; CODE XREF: silc_client_list_free_servers+14j
		add	esp, 3Ch
		pop	ebx
		pop	esi
		pop	edi
		leave
		retn
; ---------------------------------------------------------------------------

loc_62B89540:				; CODE XREF: silc_client_list_free_servers+B0j
		movzx	edi, word ptr [ebx+0Ch]
		mov	[ebp+var_2C], ebx
		xor	eax, eax
		jmp	short loc_62B894FF
silc_client_list_free_servers endp

; ---------------------------------------------------------------------------
		align 4
; Exported entry 147. silc_client_list_free

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public silc_client_list_free
silc_client_list_free proc near		; CODE XREF: silc_client_nickname_format+4E4p
					; silc_client_nickname_format+50Cp ...

var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_2C		= dword	ptr -2Ch
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		sub	esp, 3Ch
		mov	esi, [ebp+arg_0]
		mov	edi, [ebp+arg_4]
		mov	ebx, [ebp+arg_8]
		test	ebx, ebx
		jz	loc_62B89684
		mov	eax, [ebx]
		mov	[ebx+8], eax
		mov	dl, [ebx+10h]
		and	edx, 0FFFFFFFDh
		mov	[ebx+10h], dl
		mov	dword ptr [ebx+18h], 0
		mov	dword ptr [ebx+14h], 0
		xor	eax, eax
		jmp	short loc_62B895B1
; ---------------------------------------------------------------------------
		align 4

loc_62B89588:				; CODE XREF: silc_client_list_free+72j
		movzx	ecx, word ptr [ebx+0Eh]
		mov	ecx, [eax+ecx]

loc_62B8958F:				; CODE XREF: silc_client_list_free+7Bj
		mov	[ebx+8], ecx
		mov	[ebx+14h], eax
		mov	eax, [eax]
		test	eax, eax
		jz	short loc_62B895D3
		mov	[esp+48h+var_40], eax
		mov	[esp+48h+var_44], edi
		mov	[esp+48h+var_48], esi
		call	silc_client_unref_client
		mov	eax, [ebx+14h]
		mov	dl, [ebx+10h]

loc_62B895B1:				; CODE XREF: silc_client_list_free+38j
		mov	[ebx+18h], eax
		mov	eax, [ebx+8]
		test	eax, eax
		jz	short loc_62B895CC
		test	dl, 2
		jnz	short loc_62B89588
		movzx	ecx, word ptr [ebx+0Ch]
		mov	ecx, [eax+ecx]
		jmp	short loc_62B8958F
; ---------------------------------------------------------------------------
		align 4

loc_62B895CC:				; CODE XREF: silc_client_list_free+6Dj
		mov	dword ptr [ebx+14h], 0

loc_62B895D3:				; CODE XREF: silc_client_list_free+4Dj
		mov	ecx, [ebx]
		mov	[ebx+8], ecx
		and	edx, 0FFFFFFFDh
		mov	[ebx+10h], dl
		test	ecx, ecx
		jz	short loc_62B8962B
		xchg	ax, ax

loc_62B895E4:				; CODE XREF: silc_client_list_free+DDj
		test	byte ptr [ebx+10h], 2
		jz	short loc_62B8963C
		movzx	eax, word ptr [ebx+0Eh]
		mov	eax, [ecx+eax]

loc_62B895F1:				; CODE XREF: silc_client_list_free+F7j
		mov	[ebx+8], eax
		mov	eax, [ebx]
		test	eax, eax
		jz	short loc_62B89617
		cmp	ecx, eax
		jz	loc_62B8968C
		movzx	edi, word ptr [ebx+0Ch]
		jmp	short loc_62B8960E
; ---------------------------------------------------------------------------

loc_62B89608:				; CODE XREF: silc_client_list_free+C9j
		cmp	ecx, esi
		jz	short loc_62B89648
		mov	eax, esi

loc_62B8960E:				; CODE XREF: silc_client_list_free+BAj
		lea	edx, [eax+edi]
		mov	esi, [edx]
		test	esi, esi
		jnz	short loc_62B89608

loc_62B89617:				; CODE XREF: silc_client_list_free+ACj
		cmp	ecx, [ebx+4]
		jz	short loc_62B89675

loc_62B8961C:				; CODE XREF: silc_client_list_free+127j
					; silc_client_list_free+12Cj
		mov	[esp+48h+var_48], ecx
		call	silc_free
		mov	ecx, [ebx+8]
		test	ecx, ecx
		jnz	short loc_62B895E4

loc_62B8962B:				; CODE XREF: silc_client_list_free+94j
		mov	[ebp+arg_0], ebx
		add	esp, 3Ch
		pop	ebx
		pop	esi
		pop	edi
		leave
		jmp	silc_free
; ---------------------------------------------------------------------------
		align 4

loc_62B8963C:				; CODE XREF: silc_client_list_free+9Cj
		movzx	eax, word ptr [ebx+0Ch]
		mov	eax, [ecx+eax]
		jmp	short loc_62B895F1
; ---------------------------------------------------------------------------
		align 4

loc_62B89648:				; CODE XREF: silc_client_list_free+BEj
		mov	[ebp+var_2C], edx

loc_62B8964B:				; CODE XREF: silc_client_list_free+149j
		mov	esi, [ecx+edi]
		mov	edx, [ebp+var_2C]
		mov	[edx], esi
		test	esi, esi
		jz	short loc_62B89667
		test	byte ptr [ebx+10h], 1
		jz	short loc_62B89667
		movzx	edi, word ptr [ebx+0Eh]
		mov	edx, [ecx+edi]
		mov	[esi+edi], edx

loc_62B89667:				; CODE XREF: silc_client_list_free+109j
					; silc_client_list_free+10Fj
		cmp	ecx, [ebx+8]
		jz	short loc_62B8967A

loc_62B8966C:				; CODE XREF: silc_client_list_free+136j
		sub	dword ptr [ebx+10h], 4
		cmp	ecx, [ebx+4]
		jnz	short loc_62B8961C

loc_62B89675:				; CODE XREF: silc_client_list_free+CEj
		mov	[ebx+4], eax
		jmp	short loc_62B8961C
; ---------------------------------------------------------------------------

loc_62B8967A:				; CODE XREF: silc_client_list_free+11Ej
		mov	esi, [ebp+var_2C]
		mov	edx, [esi]
		mov	[ebx+8], edx
		jmp	short loc_62B8966C
; ---------------------------------------------------------------------------

loc_62B89684:				; CODE XREF: silc_client_list_free+14j
		add	esp, 3Ch
		pop	ebx
		pop	esi
		pop	edi
		leave
		retn
; ---------------------------------------------------------------------------

loc_62B8968C:				; CODE XREF: silc_client_list_free+B0j
		movzx	edi, word ptr [ebx+0Ch]
		mov	[ebp+var_2C], ebx
		xor	eax, eax
		jmp	short loc_62B8964B
silc_client_list_free endp

; ---------------------------------------------------------------------------
		align 4
; Exported entry 158. silc_client_nickname_format

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public silc_client_nickname_format
silc_client_nickname_format proc near	; CODE XREF: silc_client_update_client+146p
					; silc_client_add_client+202p ...

Str		= dword	ptr -0F8h
Control		= dword	ptr -0F4h
var_F0		= dword	ptr -0F0h
var_EC		= dword	ptr -0ECh
var_E8		= dword	ptr -0E8h
var_D0		= dword	ptr -0D0h
var_CC		= dword	ptr -0CCh
var_C8		= dword	ptr -0C8h
var_C4		= byte ptr -0C4h
var_C0		= dword	ptr -0C0h
var_BC		= dword	ptr -0BCh
var_B8		= dword	ptr -0B8h
var_B4		= dword	ptr -0B4h
var_B0		= dword	ptr -0B0h
var_AC		= dword	ptr -0ACh
var_A3		= byte ptr -0A3h
var_22		= dword	ptr -22h
var_1E		= word ptr -1Eh
var_1C		= dword	ptr -1Ch
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= byte ptr  14h

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		sub	esp, 0ECh
		mov	edx, [ebp+arg_0]
		mov	ebx, [ebp+arg_8]
		mov	cl, [ebp+arg_C]
		mov	eax, [edx+18h]
		mov	eax, [eax+4Ch]
		cmp	byte ptr [eax+1], 0
		jnz	short loc_62B896C8

loc_62B896B9:				; CODE XREF: silc_client_nickname_format+37j
					; silc_client_nickname_format+4E9j ...
		mov	eax, ebx
		add	esp, 0ECh
		pop	ebx
		pop	esi
		pop	edi
		leave
		retn
; ---------------------------------------------------------------------------
		align 4

loc_62B896C8:				; CODE XREF: silc_client_nickname_format+1Fj
		cmp	byte ptr [ebx],	0
		jnz	short loc_62B896D1

loc_62B896CD:				; CODE XREF: silc_client_nickname_format+7Cj
					; silc_client_nickname_format+581j
		xor	ebx, ebx
		jmp	short loc_62B896B9
; ---------------------------------------------------------------------------

loc_62B896D1:				; CODE XREF: silc_client_nickname_format+33j
		mov	[esp+0F8h+var_E8], 0
		mov	[esp+0F8h+var_EC], 1
		mov	[esp+0F8h+var_F0], ebx
		mov	eax, [ebp+arg_4]
		mov	[esp+0F8h+Control], eax
		mov	[esp+0F8h+Str],	edx
		mov	[ebp+var_C8], edx
		mov	[ebp+var_C4], cl
		call	silc_client_get_clients_local_ext
		mov	[ebp+var_B0], eax
		test	eax, eax
		mov	edx, [ebp+var_C8]
		mov	cl, [ebp+var_C4]
		jz	short loc_62B896CD
		mov	esi, eax
		mov	eax, [eax+10h]
		shr	eax, 2
		dec	eax
		jz	loc_62B89BAE

loc_62B89725:				; CODE XREF: silc_client_nickname_format+518j
					; silc_client_nickname_format+528j
		mov	eax, [ebx+388h]
		test	eax, eax
		jz	loc_62B89B22
		mov	[esp+0F8h+Control], eax
		mov	[esp+0F8h+Str],	ebx
		mov	[ebp+var_C8], edx
		mov	[ebp+var_C4], cl
		call	silc_utf8_strcasecmp
		test	al, al
		mov	edx, [ebp+var_C8]
		mov	cl, [ebp+var_C4]
		jnz	loc_62B89B22
		mov	edi, 1

loc_62B89764:				; CODE XREF: silc_client_nickname_format+48Cj
		mov	eax, [edx+18h]
		mov	eax, [eax+4Ch]
		cmp	byte ptr [eax+21h], 0
		jz	short loc_62B89772
		xor	edi, edi

loc_62B89772:				; CODE XREF: silc_client_nickname_format+D6j
		mov	esi, [ebp+var_B0]
		mov	eax, [esi+14h]
		mov	[ebp+var_B4], edx
		mov	[ebp+var_AC], ebx
		mov	ebx, esi
		lea	esi, [esi+0]

loc_62B8978C:				; CODE XREF: silc_client_nickname_format+126j
					; silc_client_nickname_format+12Ej
		mov	[ebx+18h], eax
		mov	eax, [ebx+8]
		test	eax, eax
		jz	short loc_62B897FB

loc_62B89796:				; CODE XREF: silc_client_nickname_format+161j
		test	byte ptr [ebx+10h], 2
		jz	loc_62B89928
		movzx	esi, word ptr [ebx+0Eh]
		mov	esi, [eax+esi]

loc_62B897A7:				; CODE XREF: silc_client_nickname_format+297j
		mov	[ebx+8], esi
		mov	[ebx+14h], eax
		mov	esi, [eax]
		test	esi, esi
		jz	loc_62B89C54
		test	byte ptr [esi+402h], 1
		jz	short loc_62B8978C
		cmp	esi, [ebp+var_AC]
		jz	short loc_62B8978C
		mov	eax, [esi+388h]
		mov	[esp+0F8h+Control], eax
		mov	[esp+0F8h+Str],	esi
		mov	[ebp+var_C4], cl
		call	silc_utf8_strcasecmp
		test	al, al
		mov	cl, [ebp+var_C4]
		jnz	loc_62B89BC8
		mov	eax, [ebx+14h]
		mov	[ebx+18h], eax
		mov	eax, [ebx+8]
		test	eax, eax
		jnz	short loc_62B89796

loc_62B897FB:				; CODE XREF: silc_client_nickname_format+FCj
		mov	edx, [ebp+var_B4]
		mov	ebx, [ebp+var_AC]
		mov	eax, [ebp+var_B0]
		mov	dword ptr [eax+14h], 0

loc_62B89814:				; CODE XREF: silc_client_nickname_format+5C8j
		mov	eax, edi
		test	al, al
		jz	loc_62B89BD9
		xor	esi, esi

loc_62B89820:				; CODE XREF: silc_client_nickname_format+53Cj
		test	cl, cl
		jz	loc_62B89B86
		mov	eax, edi
		test	al, al
		jnz	loc_62B89BF7

loc_62B89832:				; CODE XREF: silc_client_nickname_format+5B7j
		test	esi, esi
		jz	loc_62B89B90
		mov	ebx, esi

loc_62B8983C:				; CODE XREF: silc_client_nickname_format+4F2j
		lea	ecx, [ebp+var_A3]
		mov	[ebp+var_CC], ecx
		mov	ecx, 81h
		xor	eax, eax
		mov	edi, [ebp+var_CC]
		rep stosb
		mov	eax, [edx+18h]
		mov	eax, [eax+4Ch]
		inc	eax
		mov	[ebp+var_1C], eax
		lea	esi, [ebx+182h]
		mov	[ebp+var_BC], esi
		mov	[ebp+var_AC], 0
		lea	esi, [ebp+var_22]
		mov	[ebp+var_D0], esi
		mov	[ebp+var_C0], edx
		mov	edx, [ebp+var_B0]
		mov	[ebp+var_B4], ebx
		jmp	short loc_62B898BB
; ---------------------------------------------------------------------------

loc_62B89894:				; CODE XREF: silc_client_nickname_format+243j
		cmp	cl, 48h
		jz	loc_62B89AF8

loc_62B8989D:				; CODE XREF: silc_client_nickname_format+24Dj
		mov	esi, [ebp+var_AC]
		mov	[ebp+esi+var_A3], cl
		inc	esi
		mov	[ebp+var_AC], esi
		mov	eax, [ebp+var_1C]

loc_62B898B4:				; CODE XREF: silc_client_nickname_format+238j
					; silc_client_nickname_format+258j ...
		inc	eax
		mov	[ebp+var_1C], eax
		mov	eax, [ebp+var_1C]

loc_62B898BB:				; CODE XREF: silc_client_nickname_format+1FAj
		test	eax, eax
		jz	loc_62B89B29
		mov	cl, [eax]
		test	cl, cl
		jz	loc_62B89B29
		cmp	cl, 25h
		jz	short loc_62B898B4
		cmp	cl, 61h
		jz	loc_62B899AF
		jle	short loc_62B89894
		cmp	cl, 68h
		jz	short loc_62B89934
		cmp	cl, 6Eh
		jnz	short loc_62B8989D
		mov	ecx, [ebp+var_B4]
		cmp	byte ptr [ecx],	0
		jz	short loc_62B898B4
		xor	eax, eax
		or	ecx, 0FFFFFFFFh
		mov	edi, [ebp+var_B4]
		repne scasb
		not	ecx
		lea	ebx, [ecx-1]
		lea	eax, [ebp+var_A3]
		add	eax, [ebp+var_AC]
		mov	edi, eax
		mov	esi, [ebp+var_B4]
		mov	ecx, ebx
		rep movsb
		add	[ebp+var_AC], ebx
		mov	eax, [ebp+var_1C]
		jmp	short loc_62B898B4
; ---------------------------------------------------------------------------
		align 4

loc_62B89928:				; CODE XREF: silc_client_nickname_format+102j
		movzx	esi, word ptr [ebx+0Ch]
		mov	esi, [eax+esi]
		jmp	loc_62B897A7
; ---------------------------------------------------------------------------

loc_62B89934:				; CODE XREF: silc_client_nickname_format+248j
		mov	esi, [ebp+var_B4]
		cmp	byte ptr [esi+182h], 0
		jz	loc_62B898B4
		mov	[esp+0F8h+Control], offset Control ; "."
		mov	eax, [ebp+var_BC]
		mov	[esp+0F8h+Str],	eax ; Str
		mov	[ebp+var_C8], edx
		call	strcspn
		mov	esi, eax
		mov	[esp+0F8h+Control], offset asc_62BA86D5	; "-"
		mov	ecx, [ebp+var_BC]
		mov	[esp+0F8h+Str],	ecx ; Str
		call	strcspn
		mov	ebx, eax
		cmp	eax, esi
		mov	edx, [ebp+var_C8]
		jle	short loc_62B89989
		mov	ebx, esi

loc_62B89989:				; CODE XREF: silc_client_nickname_format+2EDj
					; silc_client_nickname_format+485j
		lea	eax, [ebp+var_A3]
		add	eax, [ebp+var_AC]
		mov	edi, eax
		mov	esi, [ebp+var_BC]
		mov	ecx, ebx
		rep movsb
		add	[ebp+var_AC], ebx
		mov	eax, [ebp+var_1C]
		jmp	loc_62B898B4
; ---------------------------------------------------------------------------

loc_62B899AF:				; CODE XREF: silc_client_nickname_format+23Dj
		mov	ecx, [edx+10h]
		shr	ecx, 2
		dec	ecx
		jz	loc_62B898B4
		mov	eax, [edx]
		mov	[edx+8], eax
		and	byte ptr [edx+10h], 0FDh
		mov	dword ptr [edx+18h], 0
		mov	dword ptr [edx+14h], 0
		xor	eax, eax
		mov	esi, 1
		mov	[ebp+var_B8], esi
		mov	ebx, edx
		jmp	short loc_62B89A38
; ---------------------------------------------------------------------------

loc_62B899E4:				; CODE XREF: silc_client_nickname_format+3AEj
		movzx	edx, word ptr [ebx+0Eh]
		mov	edx, [eax+edx]

loc_62B899EB:				; CODE XREF: silc_client_nickname_format+3B7j
		mov	[ebx+8], edx
		mov	[ebx+14h], eax
		mov	esi, [eax]
		test	esi, esi
		jz	loc_62B89C65
		mov	eax, [ebp+var_AC]
		mov	[esp+0F8h+var_F0], eax
		lea	ecx, [ebp+var_A3]
		mov	[esp+0F8h+Control], ecx
		mov	[esp+0F8h+Str],	esi
		call	silc_utf8_strncasecmp
		test	al, al
		jz	short loc_62B89A35
		mov	ecx, 0FFFFFFFFh
		mov	edi, esi
		xor	eax, eax
		repne scasb
		not	ecx
		dec	ecx
		cmp	ecx, [ebp+var_AC]
		ja	loc_62B89AD3

loc_62B89A35:				; CODE XREF: silc_client_nickname_format+381j
					; silc_client_nickname_format+44Fj ...
		mov	eax, [ebx+14h]

loc_62B89A38:				; CODE XREF: silc_client_nickname_format+34Aj
		mov	[ebx+18h], eax
		mov	eax, [ebx+8]
		test	eax, eax
		jz	short loc_62B89A51
		test	byte ptr [ebx+10h], 2
		jnz	short loc_62B899E4
		movzx	edx, word ptr [ebx+0Ch]
		mov	edx, [eax+edx]
		jmp	short loc_62B899EB
; ---------------------------------------------------------------------------

loc_62B89A51:				; CODE XREF: silc_client_nickname_format+3A8j
		mov	esi, [ebp+var_B8]
		mov	edx, ebx
		mov	dword ptr [ebx+14h], 0

loc_62B89A60:				; CODE XREF: silc_client_nickname_format+5D5j
		mov	[ebp+var_22], 0
		mov	[ebp+var_1E], 0
		inc	esi
		mov	[esp+0F8h+var_EC], esi
		mov	[esp+0F8h+var_F0], offset aD ; "%d"
		mov	[esp+0F8h+Control], 5
		lea	ecx, [ebp+var_22]
		mov	[esp+0F8h+Str],	ecx
		mov	[ebp+var_C8], edx
		call	silc_snprintf
		xor	eax, eax
		mov	ecx, 0FFFFFFFFh
		mov	edi, [ebp+var_D0]
		repne scasb
		not	ecx
		lea	ebx, [ecx-1]
		lea	eax, [ebp+var_A3]
		add	eax, [ebp+var_AC]
		mov	edi, eax
		mov	esi, [ebp+var_D0]
		mov	ecx, ebx
		rep movsb
		add	[ebp+var_AC], ebx
		mov	eax, [ebp+var_1C]
		mov	edx, [ebp+var_C8]
		jmp	loc_62B898B4
; ---------------------------------------------------------------------------

loc_62B89AD3:				; CODE XREF: silc_client_nickname_format+397j
		add	esi, [ebp+var_AC]
		mov	[esp+0F8h+Str],	esi ; Str
		call	atoi
		cmp	[ebp+var_B8], eax
		jge	loc_62B89A35
		mov	[ebp+var_B8], eax
		jmp	loc_62B89A35
; ---------------------------------------------------------------------------

loc_62B89AF8:				; CODE XREF: silc_client_nickname_format+1FFj
		mov	esi, [ebp+var_B4]
		cmp	byte ptr [esi+182h], 0
		jz	loc_62B898B4
		xor	eax, eax
		or	ecx, 0FFFFFFFFh
		mov	edi, [ebp+var_BC]
		repne scasb
		not	ecx
		lea	ebx, [ecx-1]
		jmp	loc_62B89989
; ---------------------------------------------------------------------------

loc_62B89B22:				; CODE XREF: silc_client_nickname_format+95j
					; silc_client_nickname_format+C1j
		xor	edi, edi
		jmp	loc_62B89764
; ---------------------------------------------------------------------------

loc_62B89B29:				; CODE XREF: silc_client_nickname_format+225j
					; silc_client_nickname_format+22Fj
		mov	edx, [ebp+var_C0]
		mov	ebx, [ebp+var_B4]
		mov	eax, [ebp+var_AC]
		mov	[ebp+eax+var_A3], 0
		xor	eax, eax
		mov	ecx, 101h
		mov	edi, ebx
		rep stosb
		mov	ecx, 0FFFFFFFFh
		mov	edi, [ebp+var_CC]
		repne scasb
		not	ecx
		dec	ecx
		mov	edi, ebx
		mov	esi, [ebp+var_CC]
		rep movsb
		mov	ecx, [ebp+var_B0]
		mov	[esp+0F8h+var_F0], ecx
		mov	esi, [ebp+arg_4]
		mov	[esp+0F8h+Control], esi
		mov	[esp+0F8h+Str],	edx
		call	silc_client_list_free
		jmp	loc_62B896B9
; ---------------------------------------------------------------------------

loc_62B89B86:				; CODE XREF: silc_client_nickname_format+18Aj
		mov	ecx, edi
		test	cl, cl
		jz	loc_62B8983C

loc_62B89B90:				; CODE XREF: silc_client_nickname_format+19Cj
		mov	esi, [ebp+var_B0]

loc_62B89B96:				; CODE XREF: silc_client_nickname_format+52Ej
		mov	[esp+0F8h+var_F0], esi
		mov	eax, [ebp+arg_4]
		mov	[esp+0F8h+Control], eax
		mov	[esp+0F8h+Str],	edx
		call	silc_client_list_free
		jmp	loc_62B896B9
; ---------------------------------------------------------------------------

loc_62B89BAE:				; CODE XREF: silc_client_nickname_format+87j
		test	cl, cl
		jnz	loc_62B89725
		mov	eax, [edx+18h]
		mov	eax, [eax+4Ch]
		cmp	byte ptr [eax+21h], 0
		jnz	loc_62B89725
		jmp	short loc_62B89B96
; ---------------------------------------------------------------------------

loc_62B89BC8:				; CODE XREF: silc_client_nickname_format+150j
		mov	edx, [ebp+var_B4]
		mov	ebx, [ebp+var_AC]
		jmp	loc_62B89820
; ---------------------------------------------------------------------------

loc_62B89BD9:				; CODE XREF: silc_client_nickname_format+180j
		mov	eax, [ebp+var_B0]
		mov	[esp+0F8h+var_F0], eax
		mov	ecx, [ebp+arg_4]
		mov	[esp+0F8h+Control], ecx
		mov	[esp+0F8h+Str],	edx
		call	silc_client_list_free
		jmp	loc_62B896B9
; ---------------------------------------------------------------------------

loc_62B89BF7:				; CODE XREF: silc_client_nickname_format+194j
		lea	eax, [ebp+var_1C]
		mov	[esp+0F8h+var_EC], eax ; int
		mov	[esp+0F8h+var_F0], ebx ; char *
		mov	ecx, [ebp+arg_4]
		mov	[esp+0F8h+Control], ecx	; int
		mov	[esp+0F8h+Str],	edx ; int
		mov	[ebp+var_C8], edx
		call	silc_client_nickname_parse
		test	al, al
		jz	loc_62B896CD
		mov	eax, [ebp+var_1C]
		mov	[esp+0F8h+var_EC], eax
		mov	[esp+0F8h+var_F0], offset aS_2 ; "%s"
		mov	[esp+0F8h+Control], 101h
		mov	[esp+0F8h+Str],	ebx
		call	silc_snprintf
		mov	eax, [ebp+var_1C]
		mov	[esp+0F8h+Str],	eax
		call	silc_free
		mov	edx, [ebp+var_C8]
		jmp	loc_62B89832
; ---------------------------------------------------------------------------

loc_62B89C54:				; CODE XREF: silc_client_nickname_format+119j
		mov	edx, [ebp+var_B4]
		mov	ebx, [ebp+var_AC]
		jmp	loc_62B89814
; ---------------------------------------------------------------------------

loc_62B89C65:				; CODE XREF: silc_client_nickname_format+35Dj
		mov	esi, [ebp+var_B8]
		mov	edx, ebx
		jmp	loc_62B89A60
silc_client_nickname_format endp

; ---------------------------------------------------------------------------
		align 4
; Exported entry 230. silc_client_update_client

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl silc_client_update_client(int, int, int, int, int, char *, int)
		public silc_client_update_client
silc_client_update_client proc near	; CODE XREF: silc_client_command_reply_identify+3C4p
					; silc_client_command_reply_whois+489p

Src		= dword	ptr -0D8h
var_D4		= dword	ptr -0D4h
var_D0		= dword	ptr -0D0h
var_CC		= dword	ptr -0CCh
var_C8		= dword	ptr -0C8h
var_AC		= dword	ptr -0ACh
var_99		= byte ptr -99h
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h
arg_10		= dword	ptr  18h
arg_14		= dword	ptr  1Ch
arg_18		= dword	ptr  20h

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		sub	esp, 0CCh
		mov	esi, [ebp+arg_4]
		mov	ebx, [ebp+arg_8]
		mov	edi, [ebp+arg_C]
		mov	eax, [ebx+3D8h]
		mov	[esp+0D8h+Src],	eax
		call	silc_rwlock_wrlock
		mov	eax, [ebx+384h]
		test	eax, eax
		jz	loc_62B89E64

loc_62B89CA5:				; CODE XREF: silc_client_update_client+1F5j
					; silc_client_update_client+20Cj
		cmp	byte ptr [ebx+101h], 0
		jz	short loc_62B89CB7
		cmp	byte ptr [ebx+182h], 0
		jnz	short loc_62B89CED

loc_62B89CB7:				; CODE XREF: silc_client_update_client+38j
		mov	edx, [ebp+arg_10]
		test	edx, edx
		jz	short loc_62B89CED
		mov	[esp+0D8h+var_C8], 81h
		lea	eax, [ebx+182h]
		mov	[esp+0D8h+var_CC], eax
		mov	[esp+0D8h+var_D0], 81h
		lea	eax, [ebx+101h]
		mov	[esp+0D8h+var_D4], eax
		mov	edx, [ebp+arg_10]
		mov	[esp+0D8h+Src],	edx
		call	silc_parse_userfqdn

loc_62B89CED:				; CODE XREF: silc_client_update_client+41j
					; silc_client_update_client+48j
		cmp	byte ptr [ebx],	0
		jnz	loc_62B89E17
		test	edi, edi
		jz	loc_62B89E17
		mov	[esp+0D8h+var_C8], 101h
		lea	eax, [ebx+283h]
		mov	[esp+0D8h+var_CC], eax
		mov	[esp+0D8h+var_D0], 81h
		lea	eax, [ebp+var_99]
		mov	[ebp+var_AC], eax
		mov	[esp+0D8h+var_D4], eax
		mov	[esp+0D8h+Src],	edi
		call	silc_parse_userfqdn
		mov	edx, [ebp+arg_0]
		mov	eax, [edx+18h]
		mov	eax, [eax+4Ch]
		cmp	byte ptr [eax+22h], 0
		jz	loc_62B89E3C
		mov	[esp+0D8h+var_CC], edi
		mov	[esp+0D8h+var_D0], offset aS_2 ; "%s"
		mov	[esp+0D8h+var_D4], 101h
		mov	[esp+0D8h+Src],	ebx
		call	silc_snprintf

loc_62B89D5F:				; CODE XREF: silc_client_update_client+1EAj
		xor	eax, eax
		mov	ecx, 0FFFFFFFFh
		mov	edi, [ebp+var_AC]
		repne scasb
		not	ecx
		dec	ecx
		mov	[esp+0D8h+var_C8], 0
		mov	[esp+0D8h+var_CC], 80h
		mov	[esp+0D8h+var_D0], 7
		mov	[esp+0D8h+var_D4], ecx
		lea	edx, [ebp+var_99]
		mov	[esp+0D8h+Src],	edx
		call	silc_identifier_check
		mov	edi, eax
		test	eax, eax
		jz	short loc_62B89E20
		xor	eax, eax
		cmp	[esi], ebx
		setz	al
		mov	[esp+0D8h+var_CC], eax
		mov	[esp+0D8h+var_D0], ebx
		mov	[esp+0D8h+var_D4], esi
		mov	eax, [ebp+arg_0]
		mov	[esp+0D8h+Src],	eax
		call	silc_client_nickname_format
		mov	eax, [esi+54h]
		mov	eax, [eax+0B8h]
		mov	[esp+0D8h+Src],	eax
		call	silc_mutex_lock
		mov	[esp+0D8h+var_C8], 1
		mov	[esp+0D8h+var_CC], edi
		mov	[esp+0D8h+var_D0], 0
		mov	[esp+0D8h+var_D4], ebx
		mov	eax, [esi+54h]
		mov	eax, [eax+114h]
		mov	[esp+0D8h+Src],	eax
		call	silc_idcache_update_by_context
		mov	eax, [esi+54h]
		mov	eax, [eax+0B8h]
		mov	[esp+0D8h+Src],	eax
		call	silc_mutex_unlock
		mov	[ebx+388h], edi
		or	byte ptr [ebx+402h], 1

loc_62B89E17:				; CODE XREF: silc_client_update_client+7Cj
					; silc_client_update_client+84j
		mov	eax, [ebp+arg_18]
		mov	[ebx+3ACh], eax

loc_62B89E20:				; CODE XREF: silc_client_update_client+12Bj
		mov	eax, [ebx+3D8h]
		mov	[esp+0D8h+Src],	eax
		call	silc_rwlock_unlock
		add	esp, 0CCh
		pop	ebx
		pop	esi
		pop	edi
		leave
		retn
; ---------------------------------------------------------------------------
		align 4

loc_62B89E3C:				; CODE XREF: silc_client_update_client+C9j
		lea	eax, [ebp+var_99]
		mov	[esp+0D8h+var_CC], eax
		mov	[esp+0D8h+var_D0], offset aS_2 ; "%s"
		mov	[esp+0D8h+var_D4], 101h
		mov	[esp+0D8h+Src],	ebx
		call	silc_snprintf
		jmp	loc_62B89D5F
; ---------------------------------------------------------------------------
		align 4

loc_62B89E64:				; CODE XREF: silc_client_update_client+2Bj
		mov	ecx, [ebp+arg_14]
		test	ecx, ecx
		jz	loc_62B89CA5
		mov	eax, [ebp+arg_14]
		mov	[esp+0D8h+Src],	eax ; Src
		call	_strdup
		mov	[ebx+384h], eax
		jmp	loc_62B89CA5
silc_client_update_client endp

; ---------------------------------------------------------------------------
		align 4
; Exported entry   4. silc_client_add_client

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl silc_client_add_client(int, int, int, int, char *, int, int)
		public silc_client_add_client
silc_client_add_client proc near	; CODE XREF: silc_client_get_client+41p
					; silc_client_new_id+8Ep ...

Src		= dword	ptr -0D8h
var_D4		= dword	ptr -0D4h
var_D0		= dword	ptr -0D0h
var_CC		= dword	ptr -0CCh
var_C8		= dword	ptr -0C8h
var_C4		= dword	ptr -0C4h
var_C0		= dword	ptr -0C0h
var_BC		= dword	ptr -0BCh
var_AC		= dword	ptr -0ACh
var_99		= byte ptr -99h
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h
arg_10		= dword	ptr  18h
arg_14		= dword	ptr  1Ch
arg_18		= dword	ptr  20h

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		sub	esp, 0CCh
		mov	esi, [ebp+arg_14]
		mov	[esp+0D8h+var_D4], 404h
		mov	[esp+0D8h+Src],	1
		call	silc_calloc
		mov	ebx, eax
		test	eax, eax
		jz	loc_62B8A09B
		lea	eax, [eax+3D8h]
		mov	[esp+0D8h+Src],	eax
		call	silc_rwlock_alloc
		mov	dword ptr [ebx+3F8h], 0
		mov	dword ptr [ebx+3FCh], 1
		lea	eax, [ebx+38Ch]
		mov	[ebp+var_AC], eax
		mov	ecx, 1Dh
		mov	edi, eax
		rep movsb
		mov	eax, [ebp+arg_18]
		mov	[ebx+3ACh], eax
		mov	ecx, [ebp+arg_10]
		test	ecx, ecx
		jz	loc_62B8A134
		mov	edx, [ebp+arg_10]
		mov	[esp+0D8h+Src],	edx ; Src
		call	_strdup

loc_62B89F0B:				; CODE XREF: silc_client_add_client+2AEj
		mov	[ebx+384h], eax
		mov	[esp+0D8h+var_C8], 101h
		lea	eax, [ebx+283h]
		mov	[esp+0D8h+var_CC], eax
		mov	[esp+0D8h+var_D0], 81h
		lea	esi, [ebp+var_99]
		mov	[esp+0D8h+var_D4], esi
		mov	eax, [ebp+arg_8]
		mov	[esp+0D8h+Src],	eax
		call	silc_parse_userfqdn
		mov	edx, [ebp+arg_8]
		test	edx, edx
		jz	short loc_62B89F76
		mov	edx, [ebp+arg_0]
		mov	eax, [edx+18h]
		mov	eax, [eax+4Ch]
		cmp	byte ptr [eax+22h], 0
		jnz	loc_62B8A13C
		mov	[esp+0D8h+var_CC], esi
		mov	[esp+0D8h+var_D0], offset aS_2 ; "%s"
		mov	[esp+0D8h+var_D4], 101h
		mov	[esp+0D8h+Src],	ebx
		call	silc_snprintf

loc_62B89F76:				; CODE XREF: silc_client_add_client+BDj
					; silc_client_add_client+2D3j
		mov	[esp+0D8h+var_C8], 101h
		lea	eax, [ebx+182h]
		mov	[esp+0D8h+var_CC], eax
		mov	[esp+0D8h+var_D0], 81h
		lea	eax, [ebx+101h]
		mov	[esp+0D8h+var_D4], eax
		mov	eax, [ebp+arg_C]
		mov	[esp+0D8h+Src],	eax
		call	silc_parse_userfqdn
		mov	[esp+0D8h+var_BC], 1
		mov	[esp+0D8h+var_C0], 0
		mov	[esp+0D8h+var_C4], 0
		mov	[esp+0D8h+var_C8], 0
		mov	[esp+0D8h+var_CC], 0
		mov	[esp+0D8h+var_D0], 0
		mov	[esp+0D8h+var_D4], offset loc_62BA61A4
		mov	[esp+0D8h+Src],	1
		call	silc_hash_table_alloc
		mov	[ebx+3B4h], eax
		test	eax, eax
		jz	loc_62B8A0F2
		cmp	byte ptr [ebx],	0
		jnz	loc_62B8A0A8
		xor	esi, esi

loc_62B8A002:				; CODE XREF: silc_client_add_client+256j
		mov	edx, [ebp+arg_4]
		mov	eax, [edx+54h]
		mov	eax, [eax+0B8h]
		mov	[esp+0D8h+Src],	eax
		call	silc_mutex_lock
		mov	[esp+0D8h+var_CC], ebx
		mov	eax, [ebp+var_AC]
		mov	[esp+0D8h+var_D0], eax
		mov	[esp+0D8h+var_D4], esi
		mov	edx, [ebp+arg_4]
		mov	eax, [edx+54h]
		mov	eax, [eax+114h]
		mov	[esp+0D8h+Src],	eax
		call	silc_idcache_add
		test	eax, eax
		jz	loc_62B8A160
		mov	[ebx+388h], esi
		mov	edx, [ebp+arg_4]
		mov	eax, [edx+54h]
		mov	eax, [eax+0B8h]
		mov	[esp+0D8h+Src],	eax
		call	silc_mutex_unlock
		mov	eax, [ebx+3F8h]
		mov	eax, [ebx+3F8h]
		inc	eax
		mov	[ebx+3F8h], eax
		mov	[esp+0D8h+var_CC], 0
		mov	[esp+0D8h+var_D0], ebx
		mov	eax, [ebp+arg_4]
		mov	[esp+0D8h+var_D4], eax
		mov	edx, [ebp+arg_0]
		mov	[esp+0D8h+Src],	edx
		call	silc_client_nickname_format
		cmp	byte ptr [ebx],	0
		jz	short loc_62B8A09B
		or	byte ptr [ebx+402h], 1

loc_62B8A09B:				; CODE XREF: silc_client_add_client+27j
					; silc_client_add_client+20Aj ...
		mov	eax, ebx
		add	esp, 0CCh
		pop	ebx
		pop	esi
		pop	edi
		leave
		retn
; ---------------------------------------------------------------------------

loc_62B8A0A8:				; CODE XREF: silc_client_add_client+172j
		xor	eax, eax
		mov	ecx, 0FFFFFFFFh
		mov	edi, esi
		repne scasb
		not	ecx
		dec	ecx
		mov	[esp+0D8h+var_C8], 0
		mov	[esp+0D8h+var_CC], 80h
		mov	[esp+0D8h+var_D0], 7
		mov	[esp+0D8h+var_D4], ecx
		mov	[esp+0D8h+Src],	esi
		call	silc_identifier_check
		mov	esi, eax
		test	eax, eax
		jnz	loc_62B8A002
		mov	eax, [ebx+3B4h]
		mov	[esp+0D8h+Src],	eax
		call	silc_hash_table_free

loc_62B8A0F2:				; CODE XREF: silc_client_add_client+169j
		mov	eax, [ebx+384h]
		mov	[esp+0D8h+Src],	eax
		call	silc_free
		lea	eax, [ebx+3FCh]
		call	sub_62B872AC
		lea	eax, [ebx+3F8h]
		call	sub_62B872AC
		mov	eax, [ebx+3D8h]
		mov	[esp+0D8h+Src],	eax
		call	silc_rwlock_free
		mov	[esp+0D8h+Src],	ebx
		call	silc_free
		xor	ebx, ebx
		jmp	loc_62B8A09B
; ---------------------------------------------------------------------------
		align 4

loc_62B8A134:				; CODE XREF: silc_client_add_client+72j
		xor	eax, eax
		jmp	loc_62B89F0B
; ---------------------------------------------------------------------------
		align 4

loc_62B8A13C:				; CODE XREF: silc_client_add_client+CCj
		mov	eax, [ebp+arg_8]
		mov	[esp+0D8h+var_CC], eax
		mov	[esp+0D8h+var_D0], offset aS_2 ; "%s"
		mov	[esp+0D8h+var_D4], 101h
		mov	[esp+0D8h+Src],	ebx
		call	silc_snprintf
		jmp	loc_62B89F76
; ---------------------------------------------------------------------------

loc_62B8A160:				; CODE XREF: silc_client_add_client+1B6j
		mov	[esp+0D8h+Src],	esi
		call	silc_free
		mov	eax, [ebx+3B4h]
		mov	[esp+0D8h+Src],	eax
		call	silc_hash_table_free
		mov	eax, [ebx+384h]
		mov	[esp+0D8h+Src],	eax
		call	silc_free
		lea	eax, [ebx+3FCh]
		call	sub_62B872AC
		lea	eax, [ebx+3F8h]
		call	sub_62B872AC
		mov	eax, [ebx+3D8h]
		mov	[esp+0D8h+Src],	eax
		call	silc_rwlock_free
		mov	[esp+0D8h+Src],	ebx
		call	silc_free
		mov	edx, [ebp+arg_4]
		mov	eax, [edx+54h]
		mov	eax, [eax+0B8h]
		mov	[esp+0D8h+Src],	eax
		call	silc_mutex_unlock
		xor	ebx, ebx
		jmp	loc_62B8A09B
silc_client_add_client endp

; ---------------------------------------------------------------------------
		align 4
; Exported entry 129. silc_client_get_client

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public silc_client_get_client
silc_client_get_client proc near	; CODE XREF: silc_client_notify_cumode_change+5E1p
					; silc_client_notify_cmode_change+7C1p	...

var_58		= dword	ptr -58h
var_54		= dword	ptr -54h
var_50		= dword	ptr -50h
var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_2C		= dword	ptr -2Ch
var_1C		= dword	ptr -1Ch
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		sub	esp, 4Ch
		mov	ebx, [ebp+arg_0]
		mov	esi, [ebp+arg_4]
		mov	edi, [ebp+arg_8]
		test	ebx, ebx
		jnz	short loc_62B8A234

loc_62B8A1E2:				; CODE XREF: silc_client_get_client+6Aj
					; silc_client_get_client+6Ej ...
		mov	[esp+58h+var_40], 0 ; int
		mov	[esp+58h+var_44], edi ;	int
		mov	[esp+58h+var_48], 0 ; char *
		mov	[esp+58h+var_4C], 0 ; int
		mov	[esp+58h+var_50], 0 ; int
		mov	[esp+58h+var_54], esi ;	int
		mov	[esp+58h+var_58], ebx ;	int
		call	silc_client_add_client
		test	eax, eax
		jz	short loc_62B8A22C
		mov	edx, [eax+3F8h]
		mov	edx, [eax+3F8h]
		inc	edx
		mov	[eax+3F8h], edx
		lea	esi, [esi+0]

loc_62B8A22C:				; CODE XREF: silc_client_get_client+48j
		add	esp, 4Ch
		pop	ebx
		pop	esi
		pop	edi
		leave
		retn
; ---------------------------------------------------------------------------

loc_62B8A234:				; CODE XREF: silc_client_get_client+14j
		test	esi, esi
		jz	short loc_62B8A1E2
		test	edi, edi
		jz	short loc_62B8A1E2
		mov	eax, [esi+54h]
		mov	eax, [eax+0B8h]
		mov	[esp+58h+var_58], eax
		call	silc_mutex_lock
		lea	eax, [ebp+var_1C]
		mov	[esp+58h+var_50], eax
		mov	[esp+58h+var_54], edi
		mov	eax, [esi+54h]
		mov	eax, [eax+114h]
		mov	[esp+58h+var_58], eax
		call	silc_idcache_find_by_id_one
		test	al, al
		jz	short loc_62B8A2A8
		mov	eax, [ebp+var_1C]
		mov	eax, [eax+0Ch]
		mov	edx, [eax+3F8h]
		mov	edx, [eax+3F8h]
		inc	edx
		mov	[eax+3F8h], edx
		mov	edx, [esi+54h]
		mov	edx, [edx+0B8h]
		mov	[esp+58h+var_58], edx
		mov	[ebp+var_2C], eax
		call	silc_mutex_unlock
		mov	eax, [ebp+var_2C]
		add	esp, 4Ch
		pop	ebx
		pop	esi
		pop	edi
		leave
		retn
; ---------------------------------------------------------------------------
		align 4

loc_62B8A2A8:				; CODE XREF: silc_client_get_client+9Fj
		mov	eax, [esi+54h]
		mov	eax, [eax+0B8h]
		mov	[esp+58h+var_58], eax
		call	silc_mutex_unlock
		jmp	loc_62B8A1E2
silc_client_get_client endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  16. silc_client_change_nickname

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public silc_client_change_nickname
silc_client_change_nickname proc near	; CODE XREF: silc_client_notify_nick_change+26Ap
					; silc_client_st_resume_resolve_channels+77p ...

var_68		= dword	ptr -68h
var_64		= dword	ptr -64h
var_60		= dword	ptr -60h
var_5C		= dword	ptr -5Ch
var_58		= dword	ptr -58h
var_3C		= dword	ptr -3Ch
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h
arg_10		= dword	ptr  18h
arg_14		= dword	ptr  1Ch
arg_18		= dword	ptr  20h

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		sub	esp, 5Ch
		mov	ebx, [ebp+arg_4]
		mov	esi, [ebp+arg_C]
		mov	ecx, 0FFFFFFFFh
		mov	edi, esi
		xor	eax, eax
		repne scasb
		not	ecx
		dec	ecx
		mov	[esp+68h+var_58], 0
		mov	[esp+68h+var_5C], 80h
		mov	[esp+68h+var_60], 7
		mov	[esp+68h+var_64], ecx
		mov	[esp+68h+var_68], esi
		call	silc_identifier_check
		mov	[ebp+var_1C], eax
		test	eax, eax
		jz	loc_62B8A3BA
		mov	eax, [ebx+54h]
		mov	eax, [eax+0B8h]
		mov	[esp+68h+var_68], eax
		call	silc_mutex_lock
		mov	[esp+68h+var_58], 1
		mov	edx, [ebp+var_1C]
		mov	[esp+68h+var_5C], edx
		mov	ecx, [ebp+arg_10]
		mov	[esp+68h+var_60], ecx
		mov	edi, [ebp+arg_8]
		mov	[esp+68h+var_64], edi
		mov	eax, [ebx+54h]
		mov	eax, [eax+114h]
		mov	[esp+68h+var_68], eax
		call	silc_idcache_update_by_context
		test	al, al
		jz	short loc_62B8A3C4
		mov	eax, [ebx+54h]
		mov	eax, [eax+0B8h]
		mov	[esp+68h+var_68], eax
		call	silc_mutex_unlock
		mov	ecx, 101h
		mov	edi, [ebp+arg_8]
		xor	eax, eax
		rep stosb
		mov	ecx, 0FFFFFFFFh
		mov	edi, esi
		repne scasb
		not	ecx
		dec	ecx
		mov	edi, [ebp+arg_8]
		rep movsb
		mov	ecx, [ebp+var_1C]
		mov	edx, [ebp+arg_8]
		mov	[edx+388h], ecx
		xor	eax, eax
		cmp	[ebx], edx
		setz	al
		mov	[esp+68h+var_5C], eax
		mov	[esp+68h+var_60], edx
		mov	[esp+68h+var_64], ebx
		mov	eax, [ebp+arg_0]
		mov	[esp+68h+var_68], eax
		call	silc_client_nickname_format
		mov	edi, [ebp+arg_8]
		cmp	[ebx], edi
		jz	short loc_62B8A3EC

loc_62B8A3AE:				; CODE XREF: silc_client_change_nickname+21Dj
					; silc_client_change_nickname+24Dj
		mov	ecx, [ebp+arg_8]
		or	byte ptr [ecx+402h], 1
		mov	al, 1

loc_62B8A3BA:				; CODE XREF: silc_client_change_nickname+46j
		add	esp, 5Ch
		pop	ebx
		pop	esi
		pop	edi
		leave
		retn
; ---------------------------------------------------------------------------
		align 4

loc_62B8A3C4:				; CODE XREF: silc_client_change_nickname+8Dj
		mov	eax, [ebp+var_1C]
		mov	[esp+68h+var_68], eax
		call	silc_free
		mov	eax, [ebx+54h]
		mov	eax, [eax+0B8h]
		mov	[esp+64h+var_64], eax
		call	silc_mutex_unlock
		xor	eax, eax
		add	esp, 5Ch
		pop	ebx
		pop	esi
		pop	edi
		leave
		retn
; ---------------------------------------------------------------------------
		align 4

loc_62B8A3EC:				; CODE XREF: silc_client_change_nickname+ECj
		mov	eax, [ebp+arg_14]
		test	eax, eax
		jz	loc_62B8A4D8
		mov	edi, [ebp+arg_18]
		test	edi, edi
		jz	loc_62B8A4D8
		mov	edx, [ebx+54h]
		mov	esi, [edx+0F4h]
		mov	eax, [esi+8]
		mov	edi, [esi+4]
		mov	[ebp+var_1C], edi
		mov	ecx, eax
		sub	ecx, edi
		mov	[ebp+var_3C], ecx
		cmp	[ebp+arg_18], ecx
		jbe	loc_62B8A4CD
		mov	ecx, [esi+0Ch]
		mov	[ebp+var_1C], ecx
		sub	ecx, eax
		mov	[ebp+var_20], ecx
		add	ecx, [ebp+var_3C]
		cmp	[ebp+arg_18], ecx
		jbe	short loc_62B8A4A7
		mov	ecx, [esi]
		mov	[ebp+var_24], ecx
		mov	ecx, [ebp+var_1C]
		sub	ecx, [ebp+var_24]
		mov	[ebp+var_2C], ecx
		sub	ecx, [ebp+var_3C]
		mov	[ebp+var_28], ecx
		mov	ecx, [ebp+var_20]
		sub	[ebp+var_28], ecx
		mov	ecx, [ebp+var_28]
		add	ecx, [ebp+arg_18]
		mov	[ebp+var_20], ecx
		cmp	[ebp+var_2C], ecx
		jnb	short loc_62B8A498
		mov	[esp+68h+var_64], ecx
		mov	eax, [ebp+var_24]
		mov	[esp+68h+var_68], eax
		call	silc_realloc
		test	eax, eax
		jz	loc_62B8A512
		mov	[esi], eax
		sub	edi, [ebp+var_24]
		lea	edi, [eax+edi]
		mov	[esi+4], edi
		mov	edx, [ebp+var_3C]
		lea	ecx, [edi+edx]
		mov	[esi+8], ecx
		add	eax, [ebp+var_20]
		mov	[ebp+var_1C], eax
		mov	[esi+0Ch], eax
		mov	edx, [ebx+54h]
		mov	eax, ecx

loc_62B8A498:				; CODE XREF: silc_client_change_nickname+19Dj
		mov	ecx, eax
		sub	ecx, edi
		mov	[ebp+var_3C], ecx
		mov	edi, [ebp+var_1C]
		sub	edi, eax
		mov	[ebp+var_20], edi

loc_62B8A4A7:				; CODE XREF: silc_client_change_nickname+175j
		mov	ecx, [ebp+arg_18]
		sub	ecx, [ebp+var_3C]
		cmp	[ebp+var_20], ecx
		jb	short loc_62B8A4B7
		add	eax, ecx
		mov	[esi+8], eax

loc_62B8A4B7:				; CODE XREF: silc_client_change_nickname+1F0j
					; silc_client_change_nickname+255j
		mov	eax, [edx+0F4h]
		mov	edx, [eax+4]
		mov	[ebp+var_1C], edx
		mov	eax, [eax+8]
		sub	eax, edx
		cmp	[ebp+arg_18], eax
		ja	short loc_62B8A4D8

loc_62B8A4CD:				; CODE XREF: silc_client_change_nickname+15Ej
		mov	edi, [ebp+var_1C]
		mov	esi, [ebp+arg_14]
		mov	ecx, [ebp+arg_18]
		rep movsb

loc_62B8A4D8:				; CODE XREF: silc_client_change_nickname+131j
					; silc_client_change_nickname+13Cj ...
		mov	esi, [ebp+arg_10]
		test	esi, esi
		jz	loc_62B8A3AE
		mov	[esp+68h+var_58], 0
		mov	[esp+68h+var_5C], 0
		mov	eax, [ebx+4]
		mov	[esp+68h+var_60], eax
		mov	[esp+68h+var_64], 2
		mov	eax, [ebx+3Ch]
		mov	[esp+68h+var_68], eax
		call	silc_packet_set_ids
		jmp	loc_62B8A3AE
; ---------------------------------------------------------------------------

loc_62B8A512:				; CODE XREF: silc_client_change_nickname+1B0j
		mov	edx, [ebx+54h]
		jmp	short loc_62B8A4B7
silc_client_change_nickname endp

; ---------------------------------------------------------------------------
		align 4
; Exported entry 148. silc_client_list_free_channels

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public silc_client_list_free_channels
silc_client_list_free_channels proc near

var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_2C		= dword	ptr -2Ch
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		sub	esp, 3Ch
		mov	esi, [ebp+arg_0]
		mov	edi, [ebp+arg_4]
		mov	ebx, [ebp+arg_8]
		test	ebx, ebx
		jz	loc_62B8A650
		mov	eax, [ebx]
		mov	[ebx+8], eax
		mov	dl, [ebx+10h]
		and	edx, 0FFFFFFFDh
		mov	[ebx+10h], dl
		mov	dword ptr [ebx+18h], 0
		mov	dword ptr [ebx+14h], 0
		xor	eax, eax
		jmp	short loc_62B8A57D
; ---------------------------------------------------------------------------
		align 4

loc_62B8A554:				; CODE XREF: silc_client_list_free_channels+72j
		movzx	ecx, word ptr [ebx+0Eh]
		mov	ecx, [eax+ecx]

loc_62B8A55B:				; CODE XREF: silc_client_list_free_channels+7Bj
		mov	[ebx+8], ecx
		mov	[ebx+14h], eax
		mov	eax, [eax]
		test	eax, eax
		jz	short loc_62B8A59F
		mov	[esp+48h+var_40], eax
		mov	[esp+48h+var_44], edi
		mov	[esp+48h+var_48], esi
		call	silc_client_unref_channel
		mov	eax, [ebx+14h]
		mov	dl, [ebx+10h]

loc_62B8A57D:				; CODE XREF: silc_client_list_free_channels+38j
		mov	[ebx+18h], eax
		mov	eax, [ebx+8]
		test	eax, eax
		jz	short loc_62B8A598
		test	dl, 2
		jnz	short loc_62B8A554
		movzx	ecx, word ptr [ebx+0Ch]
		mov	ecx, [eax+ecx]
		jmp	short loc_62B8A55B
; ---------------------------------------------------------------------------
		align 4

loc_62B8A598:				; CODE XREF: silc_client_list_free_channels+6Dj
		mov	dword ptr [ebx+14h], 0

loc_62B8A59F:				; CODE XREF: silc_client_list_free_channels+4Dj
		mov	ecx, [ebx]
		mov	[ebx+8], ecx
		and	edx, 0FFFFFFFDh
		mov	[ebx+10h], dl
		test	ecx, ecx
		jz	short loc_62B8A5F7
		xchg	ax, ax

loc_62B8A5B0:				; CODE XREF: silc_client_list_free_channels+DDj
		test	byte ptr [ebx+10h], 2
		jz	short loc_62B8A608
		movzx	eax, word ptr [ebx+0Eh]
		mov	eax, [ecx+eax]

loc_62B8A5BD:				; CODE XREF: silc_client_list_free_channels+F7j
		mov	[ebx+8], eax
		mov	eax, [ebx]
		test	eax, eax
		jz	short loc_62B8A5E3
		cmp	ecx, eax
		jz	loc_62B8A658
		movzx	edi, word ptr [ebx+0Ch]
		jmp	short loc_62B8A5DA
; ---------------------------------------------------------------------------

loc_62B8A5D4:				; CODE XREF: silc_client_list_free_channels+C9j
		cmp	ecx, esi
		jz	short loc_62B8A614
		mov	eax, esi

loc_62B8A5DA:				; CODE XREF: silc_client_list_free_channels+BAj
		lea	edx, [eax+edi]
		mov	esi, [edx]
		test	esi, esi
		jnz	short loc_62B8A5D4

loc_62B8A5E3:				; CODE XREF: silc_client_list_free_channels+ACj
		cmp	ecx, [ebx+4]
		jz	short loc_62B8A641

loc_62B8A5E8:				; CODE XREF: silc_client_list_free_channels+127j
					; silc_client_list_free_channels+12Cj
		mov	[esp+48h+var_48], ecx
		call	silc_free
		mov	ecx, [ebx+8]
		test	ecx, ecx
		jnz	short loc_62B8A5B0

loc_62B8A5F7:				; CODE XREF: silc_client_list_free_channels+94j
		mov	[ebp+arg_0], ebx
		add	esp, 3Ch
		pop	ebx
		pop	esi
		pop	edi
		leave
		jmp	silc_free
; ---------------------------------------------------------------------------
		align 4

loc_62B8A608:				; CODE XREF: silc_client_list_free_channels+9Cj
		movzx	eax, word ptr [ebx+0Ch]
		mov	eax, [ecx+eax]
		jmp	short loc_62B8A5BD
; ---------------------------------------------------------------------------
		align 4

loc_62B8A614:				; CODE XREF: silc_client_list_free_channels+BEj
		mov	[ebp+var_2C], edx

loc_62B8A617:				; CODE XREF: silc_client_list_free_channels+149j
		mov	esi, [ecx+edi]
		mov	edx, [ebp+var_2C]
		mov	[edx], esi
		test	esi, esi
		jz	short loc_62B8A633
		test	byte ptr [ebx+10h], 1
		jz	short loc_62B8A633
		movzx	edi, word ptr [ebx+0Eh]
		mov	edx, [ecx+edi]
		mov	[esi+edi], edx

loc_62B8A633:				; CODE XREF: silc_client_list_free_channels+109j
					; silc_client_list_free_channels+10Fj
		cmp	ecx, [ebx+8]
		jz	short loc_62B8A646

loc_62B8A638:				; CODE XREF: silc_client_list_free_channels+136j
		sub	dword ptr [ebx+10h], 4
		cmp	ecx, [ebx+4]
		jnz	short loc_62B8A5E8

loc_62B8A641:				; CODE XREF: silc_client_list_free_channels+CEj
		mov	[ebx+4], eax
		jmp	short loc_62B8A5E8
; ---------------------------------------------------------------------------

loc_62B8A646:				; CODE XREF: silc_client_list_free_channels+11Ej
		mov	esi, [ebp+var_2C]
		mov	edx, [esi]
		mov	[ebx+8], edx
		jmp	short loc_62B8A638
; ---------------------------------------------------------------------------

loc_62B8A650:				; CODE XREF: silc_client_list_free_channels+14j
		add	esp, 3Ch
		pop	ebx
		pop	esi
		pop	edi
		leave
		retn
; ---------------------------------------------------------------------------

loc_62B8A658:				; CODE XREF: silc_client_list_free_channels+B0j
		movzx	edi, word ptr [ebx+0Ch]
		mov	[ebp+var_2C], ebx
		xor	eax, eax
		jmp	short loc_62B8A617
silc_client_list_free_channels endp

; ---------------------------------------------------------------------------
		align 4

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_62B8A664	proc near		; DATA XREF: silc_client_get_server_by_id_resolve+15Do
					; silc_client_get_server_by_id_resolve+20Fo ...

var_58		= dword	ptr -58h
var_54		= dword	ptr -54h
var_50		= dword	ptr -50h
var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_2C		= dword	ptr -2Ch
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_19		= byte ptr -19h
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_C		= byte ptr  14h
arg_10		= byte ptr  18h
arg_14		= dword	ptr  1Ch
arg_18		= dword	ptr  20h

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		sub	esp, 4Ch
		mov	esi, [ebp+arg_4]
		mov	al, [ebp+arg_C]
		mov	[ebp+var_19], al
		mov	al, [ebp+arg_10]
		test	al, al
		jz	loc_62B8A7E2
		mov	ecx, [ebp+arg_14]
		mov	edx, [ecx+4]
		test	edx, edx
		jz	short loc_62B8A6AD
		mov	ecx, [ecx+8]
		mov	[esp+58h+var_48], ecx
		mov	[esp+58h+var_4C], 0
		movzx	eax, al
		mov	[esp+58h+var_50], eax
		mov	[esp+58h+var_54], esi
		mov	edi, [ebp+arg_0]
		mov	[esp+58h+var_58], edi
		call	edx

loc_62B8A6AD:				; CODE XREF: sub_62B8A664+25j
					; sub_62B8A664+1FAj ...
		mov	eax, [ebp+arg_14]
		mov	edi, [eax]
		test	edi, edi
		jz	loc_62B8A78B
		mov	eax, [edi]
		mov	[edi+8], eax
		mov	dl, [edi+10h]
		and	edx, 0FFFFFFFDh
		mov	[edi+10h], dl
		mov	dword ptr [edi+18h], 0
		mov	dword ptr [edi+14h], 0
		xor	eax, eax
		mov	ebx, [ebp+arg_0]
		jmp	short loc_62B8A709
; ---------------------------------------------------------------------------
		align 10h

loc_62B8A6E0:				; CODE XREF: sub_62B8A664+B2j
		movzx	ecx, word ptr [edi+0Eh]
		mov	ecx, [eax+ecx]

loc_62B8A6E7:				; CODE XREF: sub_62B8A664+BBj
		mov	[edi+8], ecx
		mov	[edi+14h], eax
		mov	eax, [eax]
		test	eax, eax
		jz	short loc_62B8A72B
		mov	[esp+58h+var_50], eax
		mov	[esp+58h+var_54], esi
		mov	[esp+58h+var_58], ebx
		call	silc_client_unref_server
		mov	eax, [edi+14h]
		mov	dl, [edi+10h]

loc_62B8A709:				; CODE XREF: sub_62B8A664+77j
		mov	[edi+18h], eax
		mov	eax, [edi+8]
		test	eax, eax
		jz	short loc_62B8A724
		test	dl, 2
		jnz	short loc_62B8A6E0
		movzx	ecx, word ptr [edi+0Ch]
		mov	ecx, [eax+ecx]
		jmp	short loc_62B8A6E7
; ---------------------------------------------------------------------------
		align 4

loc_62B8A724:				; CODE XREF: sub_62B8A664+ADj
		mov	dword ptr [edi+14h], 0

loc_62B8A72B:				; CODE XREF: sub_62B8A664+8Dj
		mov	ebx, [edi]
		mov	[edi+8], ebx
		and	edx, 0FFFFFFFDh
		mov	[edi+10h], dl
		test	ebx, ebx
		jz	short loc_62B8A783
		xchg	ax, ax

loc_62B8A73C:				; CODE XREF: sub_62B8A664+11Dj
		test	byte ptr [edi+10h], 2
		jz	short loc_62B8A7A0
		movzx	eax, word ptr [edi+0Eh]
		mov	eax, [ebx+eax]

loc_62B8A749:				; CODE XREF: sub_62B8A664+143j
		mov	[edi+8], eax
		mov	eax, [edi]
		test	eax, eax
		jz	short loc_62B8A76F
		cmp	ebx, eax
		jz	loc_62B8A8C1
		movzx	esi, word ptr [edi+0Ch]
		jmp	short loc_62B8A766
; ---------------------------------------------------------------------------

loc_62B8A760:				; CODE XREF: sub_62B8A664+109j
		cmp	ebx, ecx
		jz	short loc_62B8A7AC
		mov	eax, ecx

loc_62B8A766:				; CODE XREF: sub_62B8A664+FAj
		lea	edx, [eax+esi]
		mov	ecx, [edx]
		test	ecx, ecx
		jnz	short loc_62B8A760

loc_62B8A76F:				; CODE XREF: sub_62B8A664+ECj
		cmp	ebx, [edi+4]
		jz	short loc_62B8A7DD

loc_62B8A774:				; CODE XREF: sub_62B8A664+177j
					; sub_62B8A664+17Cj
		mov	[esp+58h+var_58], ebx
		call	silc_free
		mov	ebx, [edi+8]
		test	ebx, ebx
		jnz	short loc_62B8A73C

loc_62B8A783:				; CODE XREF: sub_62B8A664+D4j
		mov	[esp+58h+var_58], edi
		call	silc_free

loc_62B8A78B:				; CODE XREF: sub_62B8A664+50j
		mov	ebx, [ebp+arg_14]
		mov	[esp+58h+var_58], ebx
		call	silc_free
		xor	eax, eax
		add	esp, 4Ch
		pop	ebx
		pop	esi
		pop	edi
		leave
		retn
; ---------------------------------------------------------------------------

loc_62B8A7A0:				; CODE XREF: sub_62B8A664+DCj
		movzx	eax, word ptr [edi+0Ch]
		mov	eax, [ebx+eax]
		jmp	short loc_62B8A749
; ---------------------------------------------------------------------------
		align 4

loc_62B8A7AC:				; CODE XREF: sub_62B8A664+FEj
		mov	[ebp+var_2C], edx

loc_62B8A7AF:				; CODE XREF: sub_62B8A664+266j
		mov	ecx, [ebx+esi]
		mov	edx, [ebp+var_2C]
		mov	[edx], ecx
		test	ecx, ecx
		jz	short loc_62B8A7CB
		test	byte ptr [edi+10h], 1
		jz	short loc_62B8A7CB
		movzx	esi, word ptr [edi+0Eh]
		mov	edx, [ebx+esi]
		mov	[ecx+esi], edx

loc_62B8A7CB:				; CODE XREF: sub_62B8A664+155j
					; sub_62B8A664+15Bj
		cmp	ebx, [edi+8]
		jz	loc_62B8A8A4

loc_62B8A7D4:				; CODE XREF: sub_62B8A664+248j
		sub	dword ptr [edi+10h], 4
		cmp	ebx, [edi+4]
		jnz	short loc_62B8A774

loc_62B8A7DD:				; CODE XREF: sub_62B8A664+10Ej
		mov	[edi+4], eax
		jmp	short loc_62B8A774
; ---------------------------------------------------------------------------

loc_62B8A7E2:				; CODE XREF: sub_62B8A664+17j
		mov	eax, [ebp+arg_14]
		mov	edi, [eax+4]
		test	edi, edi
		jz	short loc_62B8A850
		mov	eax, [ebp+arg_18]
		mov	ecx, [eax]
		mov	eax, [ecx+30h]
		mov	eax, [ecx+30h]
		inc	eax
		mov	[ecx+30h], eax
		mov	edx, [ebp+arg_14]
		mov	edi, [edx]
		mov	[esp+58h+var_58], 0Ch
		mov	[ebp+var_24], ecx
		call	silc_malloc
		test	eax, eax
		mov	ecx, [ebp+var_24]
		jz	short loc_62B8A84A
		mov	[eax], ecx
		mov	ebx, [edi]
		test	ebx, ebx
		jz	loc_62B8A8DE
		movzx	edx, word ptr [edi+0Ch]
		mov	[ebp+var_20], edx
		mov	ebx, [edi+4]
		mov	[ebx+edx], eax

loc_62B8A82F:				; CODE XREF: sub_62B8A664+283j
		test	byte ptr [edi+10h], 1
		jnz	loc_62B8A8CF

loc_62B8A839:				; CODE XREF: sub_62B8A664+275j
		mov	[edi+4], eax
		mov	edx, [ebp+var_20]
		mov	dword ptr [eax+edx], 0
		add	dword ptr [edi+10h], 4

loc_62B8A84A:				; CODE XREF: sub_62B8A664+1B0j
		mov	word ptr [ecx+2Ch], 0

loc_62B8A850:				; CODE XREF: sub_62B8A664+186j
		cmp	[ebp+var_19], 0
		jnz	short loc_62B8A8B1

loc_62B8A856:				; CODE XREF: sub_62B8A664+251j
		mov	ecx, [ebp+arg_14]
		mov	edx, [ecx+4]
		test	edx, edx
		jz	loc_62B8A6AD
		mov	eax, [ecx]
		mov	edx, [eax]
		mov	[eax+8], edx
		and	byte ptr [eax+10h], 0FDh
		mov	dword ptr [eax+18h], 0
		mov	dword ptr [eax+14h], 0
		mov	eax, [ecx+8]
		mov	[esp+58h+var_48], eax
		mov	eax, [ecx]
		mov	[esp+58h+var_4C], eax
		mov	[esp+58h+var_50], 0
		mov	[esp+58h+var_54], esi
		mov	ebx, [ebp+arg_0]
		mov	[esp+58h+var_58], ebx
		call	dword ptr [ecx+4]
		jmp	loc_62B8A6AD
; ---------------------------------------------------------------------------

loc_62B8A8A4:				; CODE XREF: sub_62B8A664+16Aj
		mov	ecx, [ebp+var_2C]
		mov	edx, [ecx]
		mov	[edi+8], edx
		jmp	loc_62B8A7D4
; ---------------------------------------------------------------------------

loc_62B8A8B1:				; CODE XREF: sub_62B8A664+1F0j
		cmp	[ebp+var_19], 3
		jz	short loc_62B8A856
		mov	al, 1
		add	esp, 4Ch
		pop	ebx
		pop	esi
		pop	edi
		leave
		retn
; ---------------------------------------------------------------------------

loc_62B8A8C1:				; CODE XREF: sub_62B8A664+F0j
		movzx	esi, word ptr [edi+0Ch]
		mov	[ebp+var_2C], edi
		xor	eax, eax
		jmp	loc_62B8A7AF
; ---------------------------------------------------------------------------

loc_62B8A8CF:				; CODE XREF: sub_62B8A664+1CFj
		movzx	edx, word ptr [edi+0Eh]
		mov	ebx, [edi+4]
		mov	[eax+edx], ebx
		jmp	loc_62B8A839
; ---------------------------------------------------------------------------

loc_62B8A8DE:				; CODE XREF: sub_62B8A664+1B8j
		mov	[edi], eax
		movzx	ebx, word ptr [edi+0Ch]
		mov	[ebp+var_20], ebx
		jmp	loc_62B8A82F
sub_62B8A664	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_62B8A8EC	proc near		; DATA XREF: silc_client_get_channel_resolve+EFo
					; silc_client_get_channel_by_id_resolve+F1o ...

var_58		= dword	ptr -58h
var_54		= dword	ptr -54h
var_50		= dword	ptr -50h
var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_2C		= dword	ptr -2Ch
var_24		= byte ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_C		= byte ptr  14h
arg_10		= byte ptr  18h
arg_14		= dword	ptr  1Ch
arg_18		= dword	ptr  20h

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		sub	esp, 4Ch
		mov	esi, [ebp+arg_4]
		mov	cl, [ebp+arg_C]
		mov	al, [ebp+arg_10]
		test	al, al
		jz	loc_62B8AA66
		mov	ecx, [ebp+arg_14]
		mov	edx, [ecx+4]
		test	edx, edx
		jz	short loc_62B8A932
		mov	ecx, [ecx+8]
		mov	[esp+58h+var_48], ecx
		mov	[esp+58h+var_4C], 0
		movzx	eax, al
		mov	[esp+58h+var_50], eax
		mov	[esp+58h+var_54], esi
		mov	edi, [ebp+arg_0]
		mov	[esp+58h+var_58], edi
		call	edx

loc_62B8A932:				; CODE XREF: sub_62B8A8EC+22j
					; sub_62B8A8EC+203j ...
		mov	edx, [ebp+arg_14]
		mov	edi, [edx]
		test	edi, edi
		jz	loc_62B8AA0F
		mov	eax, [edi]
		mov	[edi+8], eax
		mov	dl, [edi+10h]
		and	edx, 0FFFFFFFDh
		mov	[edi+10h], dl
		mov	dword ptr [edi+18h], 0
		mov	dword ptr [edi+14h], 0
		xor	eax, eax
		mov	ebx, [ebp+arg_0]
		jmp	short loc_62B8A98D
; ---------------------------------------------------------------------------
		align 4

loc_62B8A964:				; CODE XREF: sub_62B8A8EC+AEj
		movzx	ecx, word ptr [edi+0Eh]
		mov	ecx, [eax+ecx]

loc_62B8A96B:				; CODE XREF: sub_62B8A8EC+B7j
		mov	[edi+8], ecx
		mov	[edi+14h], eax
		mov	eax, [eax]
		test	eax, eax
		jz	short loc_62B8A9AF
		mov	[esp+58h+var_50], eax
		mov	[esp+58h+var_54], esi
		mov	[esp+58h+var_58], ebx
		call	silc_client_unref_channel
		mov	eax, [edi+14h]
		mov	dl, [edi+10h]

loc_62B8A98D:				; CODE XREF: sub_62B8A8EC+74j
		mov	[edi+18h], eax
		mov	eax, [edi+8]
		test	eax, eax
		jz	short loc_62B8A9A8
		test	dl, 2
		jnz	short loc_62B8A964
		movzx	ecx, word ptr [edi+0Ch]
		mov	ecx, [eax+ecx]
		jmp	short loc_62B8A96B
; ---------------------------------------------------------------------------
		align 4

loc_62B8A9A8:				; CODE XREF: sub_62B8A8EC+A9j
		mov	dword ptr [edi+14h], 0

loc_62B8A9AF:				; CODE XREF: sub_62B8A8EC+89j
		mov	ebx, [edi]
		mov	[edi+8], ebx
		and	edx, 0FFFFFFFDh
		mov	[edi+10h], dl
		test	ebx, ebx
		jz	short loc_62B8AA07
		xchg	ax, ax

loc_62B8A9C0:				; CODE XREF: sub_62B8A8EC+119j
		test	byte ptr [edi+10h], 2
		jz	short loc_62B8AA24
		movzx	eax, word ptr [edi+0Eh]
		mov	eax, [ebx+eax]

loc_62B8A9CD:				; CODE XREF: sub_62B8A8EC+13Fj
		mov	[edi+8], eax
		mov	eax, [edi]
		test	eax, eax
		jz	short loc_62B8A9F3
		cmp	ebx, eax
		jz	loc_62B8AB51
		movzx	esi, word ptr [edi+0Ch]
		jmp	short loc_62B8A9EA
; ---------------------------------------------------------------------------

loc_62B8A9E4:				; CODE XREF: sub_62B8A8EC+105j
		cmp	ebx, ecx
		jz	short loc_62B8AA30
		mov	eax, ecx

loc_62B8A9EA:				; CODE XREF: sub_62B8A8EC+F6j
		lea	edx, [eax+esi]
		mov	ecx, [edx]
		test	ecx, ecx
		jnz	short loc_62B8A9E4

loc_62B8A9F3:				; CODE XREF: sub_62B8A8EC+E8j
		cmp	ebx, [edi+4]
		jz	short loc_62B8AA61

loc_62B8A9F8:				; CODE XREF: sub_62B8A8EC+173j
					; sub_62B8A8EC+178j
		mov	[esp+58h+var_58], ebx
		call	silc_free
		mov	ebx, [edi+8]
		test	ebx, ebx
		jnz	short loc_62B8A9C0

loc_62B8AA07:				; CODE XREF: sub_62B8A8EC+D0j
		mov	[esp+58h+var_58], edi
		call	silc_free

loc_62B8AA0F:				; CODE XREF: sub_62B8A8EC+4Dj
		mov	ebx, [ebp+arg_14]
		mov	[esp+58h+var_58], ebx
		call	silc_free
		xor	eax, eax
		add	esp, 4Ch
		pop	ebx
		pop	esi
		pop	edi
		leave
		retn
; ---------------------------------------------------------------------------

loc_62B8AA24:				; CODE XREF: sub_62B8A8EC+D8j
		movzx	eax, word ptr [edi+0Ch]
		mov	eax, [ebx+eax]
		jmp	short loc_62B8A9CD
; ---------------------------------------------------------------------------
		align 10h

loc_62B8AA30:				; CODE XREF: sub_62B8A8EC+FAj
		mov	[ebp+var_2C], edx

loc_62B8AA33:				; CODE XREF: sub_62B8A8EC+26Ej
		mov	ecx, [ebx+esi]
		mov	esi, [ebp+var_2C]
		mov	[esi], ecx
		test	ecx, ecx
		jz	short loc_62B8AA4F
		test	byte ptr [edi+10h], 1
		jz	short loc_62B8AA4F
		movzx	edx, word ptr [edi+0Eh]
		mov	esi, [ebx+edx]
		mov	[ecx+edx], esi

loc_62B8AA4F:				; CODE XREF: sub_62B8A8EC+151j
					; sub_62B8A8EC+157j
		cmp	ebx, [edi+8]
		jz	loc_62B8AB35

loc_62B8AA58:				; CODE XREF: sub_62B8A8EC+251j
		sub	dword ptr [edi+10h], 4
		cmp	ebx, [edi+4]
		jnz	short loc_62B8A9F8

loc_62B8AA61:				; CODE XREF: sub_62B8A8EC+10Aj
		mov	[edi+4], eax
		jmp	short loc_62B8A9F8
; ---------------------------------------------------------------------------

loc_62B8AA66:				; CODE XREF: sub_62B8A8EC+14j
		mov	eax, [ebp+arg_14]
		mov	ebx, [eax+4]
		test	ebx, ebx
		jz	short loc_62B8AAE3
		mov	eax, [ebp+arg_18]
		mov	edx, [eax]
		mov	eax, [edx+174h]
		mov	eax, [edx+174h]
		inc	eax
		mov	[edx+174h], eax
		mov	ebx, [ebp+arg_14]
		mov	edi, [ebx]
		mov	[esp+58h+var_58], 0Ch
		mov	[ebp+var_20], edx
		mov	[ebp+var_24], cl
		call	silc_malloc
		test	eax, eax
		mov	edx, [ebp+var_20]
		mov	cl, [ebp+var_24]
		jz	short loc_62B8AAE3
		mov	[eax], edx
		mov	edx, [edi]
		test	edx, edx
		jz	loc_62B8AB5F
		movzx	ebx, word ptr [edi+0Ch]
		mov	[ebp+var_1C], ebx
		mov	edx, [edi+4]
		mov	[edx+ebx], eax

loc_62B8AAC2:				; CODE XREF: sub_62B8A8EC+27Cj
		test	byte ptr [edi+10h], 1
		jz	short loc_62B8AAD2
		movzx	ebx, word ptr [edi+0Eh]
		mov	edx, [edi+4]
		mov	[eax+ebx], edx

loc_62B8AAD2:				; CODE XREF: sub_62B8A8EC+1DAj
		mov	[edi+4], eax
		mov	ebx, [ebp+var_1C]
		mov	dword ptr [eax+ebx], 0
		add	dword ptr [edi+10h], 4

loc_62B8AAE3:				; CODE XREF: sub_62B8A8EC+182j
					; sub_62B8A8EC+1BBj
		test	cl, cl
		jnz	short loc_62B8AB42

loc_62B8AAE7:				; CODE XREF: sub_62B8A8EC+259j
		mov	edi, [ebp+arg_14]
		mov	eax, [edi+4]
		test	eax, eax
		jz	loc_62B8A932
		mov	eax, [edi]
		mov	edx, [eax]
		mov	[eax+8], edx
		and	byte ptr [eax+10h], 0FDh
		mov	dword ptr [eax+18h], 0
		mov	dword ptr [eax+14h], 0
		mov	eax, [edi+8]
		mov	[esp+58h+var_48], eax
		mov	eax, [edi]
		mov	[esp+58h+var_4C], eax
		mov	[esp+58h+var_50], 0
		mov	[esp+58h+var_54], esi
		mov	eax, [ebp+arg_0]
		mov	[esp+58h+var_58], eax
		call	dword ptr [edi+4]
		jmp	loc_62B8A932
; ---------------------------------------------------------------------------

loc_62B8AB35:				; CODE XREF: sub_62B8A8EC+166j
		mov	ecx, [ebp+var_2C]
		mov	edx, [ecx]
		mov	[edi+8], edx
		jmp	loc_62B8AA58
; ---------------------------------------------------------------------------

loc_62B8AB42:				; CODE XREF: sub_62B8A8EC+1F9j
		cmp	cl, 3
		jz	short loc_62B8AAE7
		mov	al, 1
		add	esp, 4Ch
		pop	ebx
		pop	esi
		pop	edi
		leave
		retn
; ---------------------------------------------------------------------------

loc_62B8AB51:				; CODE XREF: sub_62B8A8EC+ECj
		movzx	esi, word ptr [edi+0Ch]
		mov	[ebp+var_2C], edi
		xor	eax, eax
		jmp	loc_62B8AA33
; ---------------------------------------------------------------------------

loc_62B8AB5F:				; CODE XREF: sub_62B8A8EC+1C3j
		mov	[edi], eax
		movzx	edx, word ptr [edi+0Ch]
		mov	[ebp+var_1C], edx
		jmp	loc_62B8AAC2
sub_62B8A8EC	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_62B8AB70	proc near		; DATA XREF: sub_62B888C0+25Co
					; sub_62B888C0+38Ao ...

var_58		= dword	ptr -58h
var_54		= dword	ptr -54h
var_50		= dword	ptr -50h
var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_2C		= dword	ptr -2Ch
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_19		= byte ptr -19h
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_C		= byte ptr  14h
arg_10		= byte ptr  18h
arg_14		= dword	ptr  1Ch
arg_18		= dword	ptr  20h

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		sub	esp, 4Ch
		mov	esi, [ebp+arg_4]
		mov	al, [ebp+arg_C]
		mov	[ebp+var_19], al
		mov	al, [ebp+arg_10]
		test	al, al
		jz	loc_62B8AD1A
		mov	ecx, [ebp+arg_14]
		mov	edx, [ecx+0Ch]
		test	edx, edx
		jz	short loc_62B8ABB9
		mov	word ptr [edx+400h], 0
		mov	[esp+58h+var_50], edx
		mov	[esp+58h+var_54], esi
		mov	ebx, [ebp+arg_0]
		mov	[esp+58h+var_58], ebx
		mov	byte ptr [ebp+var_24], al
		call	silc_client_unref_client
		mov	al, byte ptr [ebp+var_24]

loc_62B8ABB9:				; CODE XREF: sub_62B8AB70+25j
		mov	edi, [ebp+arg_14]
		mov	edx, [edi+4]
		test	edx, edx
		jz	short loc_62B8ABE5
		mov	ecx, [edi+8]
		mov	[esp+58h+var_48], ecx
		mov	[esp+58h+var_4C], 0
		movzx	eax, al
		mov	[esp+58h+var_50], eax
		mov	[esp+58h+var_54], esi
		mov	eax, [ebp+arg_0]
		mov	[esp+58h+var_58], eax
		call	edx

loc_62B8ABE5:				; CODE XREF: sub_62B8AB70+51j
					; sub_62B8AB70+233j ...
		mov	edx, [ebp+arg_14]
		mov	edi, [edx]
		test	edi, edi
		jz	loc_62B8ACC3
		mov	eax, [edi]
		mov	[edi+8], eax
		mov	dl, [edi+10h]
		and	edx, 0FFFFFFFDh
		mov	[edi+10h], dl
		mov	dword ptr [edi+18h], 0
		mov	dword ptr [edi+14h], 0
		xor	eax, eax
		mov	ebx, [ebp+arg_0]
		jmp	short loc_62B8AC41
; ---------------------------------------------------------------------------
		align 4

loc_62B8AC18:				; CODE XREF: sub_62B8AB70+DEj
		movzx	ecx, word ptr [edi+0Eh]
		mov	ecx, [eax+ecx]

loc_62B8AC1F:				; CODE XREF: sub_62B8AB70+E7j
		mov	[edi+8], ecx
		mov	[edi+14h], eax
		mov	eax, [eax]
		test	eax, eax
		jz	short loc_62B8AC63
		mov	[esp+58h+var_50], eax
		mov	[esp+58h+var_54], esi
		mov	[esp+58h+var_58], ebx
		call	silc_client_unref_client
		mov	eax, [edi+14h]
		mov	dl, [edi+10h]

loc_62B8AC41:				; CODE XREF: sub_62B8AB70+A3j
		mov	[edi+18h], eax
		mov	eax, [edi+8]
		test	eax, eax
		jz	short loc_62B8AC5C
		test	dl, 2
		jnz	short loc_62B8AC18
		movzx	ecx, word ptr [edi+0Ch]
		mov	ecx, [eax+ecx]
		jmp	short loc_62B8AC1F
; ---------------------------------------------------------------------------
		align 4

loc_62B8AC5C:				; CODE XREF: sub_62B8AB70+D9j
		mov	dword ptr [edi+14h], 0

loc_62B8AC63:				; CODE XREF: sub_62B8AB70+B9j
		mov	ebx, [edi]
		mov	[edi+8], ebx
		and	edx, 0FFFFFFFDh
		mov	[edi+10h], dl
		test	ebx, ebx
		jz	short loc_62B8ACBB
		xchg	ax, ax

loc_62B8AC74:				; CODE XREF: sub_62B8AB70+149j
		test	byte ptr [edi+10h], 2
		jz	short loc_62B8ACD8
		movzx	eax, word ptr [edi+0Eh]
		mov	eax, [ebx+eax]

loc_62B8AC81:				; CODE XREF: sub_62B8AB70+16Fj
		mov	[edi+8], eax
		mov	eax, [edi]
		test	eax, eax
		jz	short loc_62B8ACA7
		cmp	ebx, eax
		jz	loc_62B8AE30
		movzx	esi, word ptr [edi+0Ch]
		jmp	short loc_62B8AC9E
; ---------------------------------------------------------------------------

loc_62B8AC98:				; CODE XREF: sub_62B8AB70+135j
		cmp	ebx, ecx
		jz	short loc_62B8ACE4
		mov	eax, ecx

loc_62B8AC9E:				; CODE XREF: sub_62B8AB70+126j
		lea	edx, [eax+esi]
		mov	ecx, [edx]
		test	ecx, ecx
		jnz	short loc_62B8AC98

loc_62B8ACA7:				; CODE XREF: sub_62B8AB70+118j
		cmp	ebx, [edi+4]
		jz	short loc_62B8AD15

loc_62B8ACAC:				; CODE XREF: sub_62B8AB70+1A3j
					; sub_62B8AB70+1A8j
		mov	[esp+58h+var_58], ebx
		call	silc_free
		mov	ebx, [edi+8]
		test	ebx, ebx
		jnz	short loc_62B8AC74

loc_62B8ACBB:				; CODE XREF: sub_62B8AB70+100j
		mov	[esp+58h+var_58], edi
		call	silc_free

loc_62B8ACC3:				; CODE XREF: sub_62B8AB70+7Cj
		mov	ebx, [ebp+arg_14]
		mov	[esp+58h+var_58], ebx
		call	silc_free
		xor	eax, eax
		add	esp, 4Ch
		pop	ebx
		pop	esi
		pop	edi
		leave
		retn
; ---------------------------------------------------------------------------

loc_62B8ACD8:				; CODE XREF: sub_62B8AB70+108j
		movzx	eax, word ptr [edi+0Ch]
		mov	eax, [ebx+eax]
		jmp	short loc_62B8AC81
; ---------------------------------------------------------------------------
		align 4

loc_62B8ACE4:				; CODE XREF: sub_62B8AB70+12Aj
		mov	[ebp+var_2C], edx

loc_62B8ACE7:				; CODE XREF: sub_62B8AB70+2C9j
		mov	ecx, [ebx+esi]
		mov	esi, [ebp+var_2C]
		mov	[esi], ecx
		test	ecx, ecx
		jz	short loc_62B8AD03
		test	byte ptr [edi+10h], 1
		jz	short loc_62B8AD03
		movzx	edx, word ptr [edi+0Eh]
		mov	esi, [ebx+edx]
		mov	[ecx+edx], esi

loc_62B8AD03:				; CODE XREF: sub_62B8AB70+181j
					; sub_62B8AB70+187j
		cmp	ebx, [edi+8]
		jz	loc_62B8AE0F

loc_62B8AD0C:				; CODE XREF: sub_62B8AB70+2A7j
		sub	dword ptr [edi+10h], 4
		cmp	ebx, [edi+4]
		jnz	short loc_62B8ACAC

loc_62B8AD15:				; CODE XREF: sub_62B8AB70+13Aj
		mov	[edi+4], eax
		jmp	short loc_62B8ACAC
; ---------------------------------------------------------------------------

loc_62B8AD1A:				; CODE XREF: sub_62B8AB70+17j
		mov	edx, [ebp+arg_14]
		mov	ecx, [edx+4]
		test	ecx, ecx
		jz	short loc_62B8AD91
		mov	eax, [ebp+arg_18]
		mov	ecx, [eax]
		mov	eax, [ecx+3F8h]
		mov	eax, [ecx+3F8h]
		inc	eax
		mov	[ecx+3F8h], eax
		mov	edi, [edx]
		mov	[esp+58h+var_58], 0Ch
		mov	[ebp+var_24], ecx
		call	silc_malloc
		test	eax, eax
		mov	ecx, [ebp+var_24]
		jz	short loc_62B8AD88
		mov	[eax], ecx
		mov	edx, [edi]
		test	edx, edx
		jz	loc_62B8AE4D
		movzx	edx, word ptr [edi+0Ch]
		mov	[ebp+var_20], edx
		mov	ebx, [edi+4]
		mov	[ebx+edx], eax

loc_62B8AD6D:				; CODE XREF: sub_62B8AB70+2E6j
		test	byte ptr [edi+10h], 1
		jnz	loc_62B8AE3E

loc_62B8AD77:				; CODE XREF: sub_62B8AB70+2D8j
		mov	[edi+4], eax
		mov	edx, [ebp+var_20]
		mov	dword ptr [eax+edx], 0
		add	dword ptr [edi+10h], 4

loc_62B8AD88:				; CODE XREF: sub_62B8AB70+1E2j
		mov	word ptr [ecx+400h], 0

loc_62B8AD91:				; CODE XREF: sub_62B8AB70+1B2j
		cmp	[ebp+var_19], 0
		jnz	loc_62B8AE1C

loc_62B8AD9B:				; CODE XREF: sub_62B8AB70+2B0j
		mov	ecx, [ebp+arg_14]
		mov	edi, [ecx+4]
		test	edi, edi
		jz	loc_62B8ABE5
		mov	eax, [ecx+0Ch]
		test	eax, eax
		jz	short loc_62B8ADCC
		mov	word ptr [eax+400h], 0
		mov	[esp+58h+var_50], eax
		mov	[esp+58h+var_54], esi
		mov	ebx, [ebp+arg_0]
		mov	[esp+58h+var_58], ebx
		call	silc_client_unref_client

loc_62B8ADCC:				; CODE XREF: sub_62B8AB70+23Ej
		mov	edi, [ebp+arg_14]
		mov	eax, [edi]
		mov	edx, [eax]
		mov	[eax+8], edx
		and	byte ptr [eax+10h], 0FDh
		mov	dword ptr [eax+18h], 0
		mov	dword ptr [eax+14h], 0
		mov	eax, [edi+8]
		mov	[esp+58h+var_48], eax
		mov	eax, [edi]
		mov	[esp+58h+var_4C], eax
		mov	[esp+58h+var_50], 0
		mov	[esp+58h+var_54], esi
		mov	eax, [ebp+arg_0]
		mov	[esp+58h+var_58], eax
		call	dword ptr [edi+4]
		jmp	loc_62B8ABE5
; ---------------------------------------------------------------------------

loc_62B8AE0F:				; CODE XREF: sub_62B8AB70+196j
		mov	ecx, [ebp+var_2C]
		mov	edx, [ecx]
		mov	[edi+8], edx
		jmp	loc_62B8AD0C
; ---------------------------------------------------------------------------

loc_62B8AE1C:				; CODE XREF: sub_62B8AB70+225j
		cmp	[ebp+var_19], 3
		jz	loc_62B8AD9B
		mov	al, 1
		add	esp, 4Ch
		pop	ebx
		pop	esi
		pop	edi
		leave
		retn
; ---------------------------------------------------------------------------

loc_62B8AE30:				; CODE XREF: sub_62B8AB70+11Cj
		movzx	esi, word ptr [edi+0Ch]
		mov	[ebp+var_2C], edi
		xor	eax, eax
		jmp	loc_62B8ACE7
; ---------------------------------------------------------------------------

loc_62B8AE3E:				; CODE XREF: sub_62B8AB70+201j
		movzx	edx, word ptr [edi+0Eh]
		mov	ebx, [edi+4]
		mov	[eax+edx], ebx
		jmp	loc_62B8AD77
; ---------------------------------------------------------------------------

loc_62B8AE4D:				; CODE XREF: sub_62B8AB70+1EAj
		mov	[edi], eax
		movzx	ebx, word ptr [edi+0Ch]
		mov	[ebp+var_20], ebx
		jmp	loc_62B8AD6D
sub_62B8AB70	endp

; ---------------------------------------------------------------------------
		align 4

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_62B8AE5C	proc near		; CODE XREF: silc_client_get_clients_by_list+400p
					; DATA XREF: silc_client_get_clients_by_list+355o

var_98		= dword	ptr -98h
var_94		= dword	ptr -94h
var_90		= dword	ptr -90h
var_8C		= dword	ptr -8Ch
var_88		= dword	ptr -88h
var_6C		= dword	ptr -6Ch
var_5C		= dword	ptr -5Ch
var_50		= dword	ptr -50h
var_4C		= dword	ptr -4Ch
var_3C		= byte ptr -3Ch
var_1C		= dword	ptr -1Ch
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_C		= byte ptr  14h
arg_14		= dword	ptr  1Ch

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		sub	esp, 8Ch
		mov	edi, [ebp+arg_4]
		mov	al, [ebp+arg_C]
		lea	edx, [eax-1]
		cmp	dl, 8
		ja	short loc_62B8AE88
		cmp	al, 3
		jz	short loc_62B8AE88
		mov	al, 1
		add	esp, 8Ch
		pop	ebx
		pop	esi
		pop	edi
		leave
		retn
; ---------------------------------------------------------------------------
		align 4

loc_62B8AE88:				; CODE XREF: sub_62B8AE5C+18j
					; sub_62B8AE5C+1Cj
		mov	[esp+98h+var_98], 1Ch
		call	silc_malloc
		mov	ebx, eax
		test	eax, eax
		jz	loc_62B8B1FF
		mov	dword ptr [eax+18h], 0
		mov	dword ptr [eax+14h], 0
		mov	eax, [eax+10h]
		and	eax, 3
		mov	[ebx+10h], eax
		mov	word ptr [ebx+0Ch], 4
		mov	word ptr [ebx+0Eh], 8
		mov	dl, 1
		mov	[ebx+10h], dl
		mov	dword ptr [ebx+8], 0
		mov	dword ptr [ebx+4], 0
		mov	dword ptr [ebx], 0
		mov	eax, [ebp+arg_14]
		mov	ecx, [eax+0Ch]
		test	ecx, ecx
		jz	loc_62B8B23C
		xor	edx, edx
		mov	ecx, [ebp+arg_14]
		mov	eax, [ecx+8]
		mov	[ebp+var_4C], edi
		mov	edi, edx
		jmp	short loc_62B8AF29
; ---------------------------------------------------------------------------
		align 4

loc_62B8AEF8:				; CODE XREF: sub_62B8AE5C+103j
					; sub_62B8AE5C+10Aj ...
		mov	edx, [ebp+arg_14]
		mov	eax, [edx+8]
		mov	edx, [eax+4]
		mov	ecx, [eax+8]
		sub	ecx, edx
		cmp	esi, ecx
		ja	loc_62B8B243
		lea	esi, [edx+esi]
		mov	[eax+4], esi
		test	edx, edx
		jz	loc_62B8B243
		inc	edi
		mov	ecx, [ebp+arg_14]
		cmp	[ecx+0Ch], edi
		jbe	loc_62B8B037

loc_62B8AF29:				; CODE XREF: sub_62B8AE5C+99j
		mov	eax, [eax+4]
		movzx	esi, byte ptr [eax+2]
		shl	esi, 8
		movzx	edx, byte ptr [eax+3]
		or	esi, edx
		add	esi, 4
		movzx	esi, si
		lea	edx, [ebp+var_3C]
		mov	[esp+98h+var_90], edx
		mov	[esp+98h+var_94], esi
		mov	[esp+98h+var_98], eax
		call	silc_id_payload_parse_id
		test	al, al
		jz	loc_62B8B243
		mov	eax, [ebp+arg_0]
		test	eax, eax
		jz	short loc_62B8AEF8
		mov	ecx, [ebp+var_4C]
		test	ecx, ecx
		jz	short loc_62B8AEF8
		mov	ecx, [ebp+var_4C]
		mov	eax, [ecx+54h]
		mov	eax, [eax+0B8h]
		mov	[esp+98h+var_98], eax
		call	silc_mutex_lock
		lea	eax, [ebp+var_1C]
		mov	[esp+98h+var_90], eax
		lea	edx, [ebp+var_3C]
		mov	[esp+98h+var_94], edx
		mov	ecx, [ebp+var_4C]
		mov	eax, [ecx+54h]
		mov	eax, [eax+114h]
		mov	[esp+98h+var_98], eax
		call	silc_idcache_find_by_id_one
		test	al, al
		jz	loc_62B8B1E6
		mov	eax, [ebp+var_1C]
		mov	edx, [eax+0Ch]
		mov	eax, [edx+3F8h]
		mov	eax, [edx+3F8h]
		inc	eax
		mov	[edx+3F8h], eax
		mov	ecx, [ebp+var_4C]
		mov	eax, [ecx+54h]
		mov	eax, [eax+0B8h]
		mov	[esp+98h+var_98], eax
		mov	[ebp+var_50], edx
		call	silc_mutex_unlock
		mov	[esp+98h+var_98], 0Ch
		call	silc_malloc
		test	eax, eax
		mov	edx, [ebp+var_50]
		jz	loc_62B8AEF8
		mov	[eax], edx
		mov	edx, [ebx]
		test	edx, edx
		jz	short loc_62B8B02C
		movzx	ecx, word ptr [ebx+0Ch]
		mov	[ebp+var_6C], ecx
		mov	ecx, [ebx+4]
		mov	edx, [ebp+var_6C]
		mov	[ecx+edx], eax

loc_62B8B005:				; CODE XREF: sub_62B8AE5C+1D9j
		test	byte ptr [ebx+10h], 1
		jz	short loc_62B8B015
		movzx	ecx, word ptr [ebx+0Eh]
		mov	edx, [ebx+4]
		mov	[eax+ecx], edx

loc_62B8B015:				; CODE XREF: sub_62B8AE5C+1ADj
		mov	[ebx+4], eax
		mov	ecx, [ebp+var_6C]
		mov	dword ptr [eax+ecx], 0
		add	dword ptr [ebx+10h], 4
		jmp	loc_62B8AEF8
; ---------------------------------------------------------------------------
		align 4

loc_62B8B02C:				; CODE XREF: sub_62B8AE5C+197j
		mov	[ebx], eax
		movzx	edx, word ptr [ebx+0Ch]
		mov	[ebp+var_6C], edx
		jmp	short loc_62B8B005
; ---------------------------------------------------------------------------

loc_62B8B037:				; CODE XREF: sub_62B8AE5C+C7j
		mov	edi, [ebp+var_4C]
		mov	eax, [ebx]
		mov	dl, [ebx+10h]

loc_62B8B03F:				; CODE XREF: sub_62B8AE5C+3E2j
		mov	[ebx+8], eax
		and	edx, 0FFFFFFFDh
		mov	[ebx+10h], dl
		mov	dword ptr [ebx+18h], 0
		mov	dword ptr [ebx+14h], 0
		mov	esi, [ebp+arg_14]
		mov	eax, [esi]
		test	eax, eax
		jz	short loc_62B8B081
		mov	edx, [esi+4]
		mov	[esp+98h+var_88], edx
		mov	[esp+98h+var_8C], ebx
		mov	[esp+98h+var_90], 0
		mov	[esp+98h+var_94], edi
		mov	edx, [ebp+arg_0]
		mov	[esp+98h+var_98], edx
		call	eax
		mov	dl, [ebx+10h]

loc_62B8B081:				; CODE XREF: sub_62B8AE5C+201j
					; sub_62B8AE5C+3DBj
		mov	eax, [ebx]
		mov	[ebx+8], eax
		and	edx, 0FFFFFFFDh
		mov	[ebx+10h], dl
		mov	dword ptr [ebx+18h], 0
		mov	dword ptr [ebx+14h], 0
		xor	eax, eax
		mov	esi, [ebp+arg_0]
		jmp	short loc_62B8B0CD
; ---------------------------------------------------------------------------
		align 4

loc_62B8B0A4:				; CODE XREF: sub_62B8AE5C+27Ej
		movzx	ecx, word ptr [ebx+0Eh]
		mov	ecx, [eax+ecx]

loc_62B8B0AB:				; CODE XREF: sub_62B8AE5C+287j
		mov	[ebx+8], ecx
		mov	[ebx+14h], eax
		mov	eax, [eax]
		test	eax, eax
		jz	short loc_62B8B0EF
		mov	[esp+98h+var_90], eax
		mov	[esp+98h+var_94], edi
		mov	[esp+98h+var_98], esi
		call	silc_client_unref_client
		mov	eax, [ebx+14h]
		mov	dl, [ebx+10h]

loc_62B8B0CD:				; CODE XREF: sub_62B8AE5C+243j
		mov	[ebx+18h], eax
		mov	eax, [ebx+8]
		test	eax, eax
		jz	short loc_62B8B0E8
		test	dl, 2
		jnz	short loc_62B8B0A4
		movzx	ecx, word ptr [ebx+0Ch]
		mov	ecx, [eax+ecx]
		jmp	short loc_62B8B0AB
; ---------------------------------------------------------------------------
		align 4

loc_62B8B0E8:				; CODE XREF: sub_62B8AE5C+279j
		mov	dword ptr [ebx+14h], 0

loc_62B8B0EF:				; CODE XREF: sub_62B8AE5C+259j
		mov	esi, [ebx]
		mov	[ebx+8], esi
		and	edx, 0FFFFFFFDh
		mov	[ebx+10h], dl
		test	esi, esi
		jz	short loc_62B8B14F
		xchg	ax, ax

loc_62B8B100:				; CODE XREF: sub_62B8AE5C+2F1j
		test	byte ptr [ebx+10h], 2
		jz	loc_62B8B18C
		movzx	eax, word ptr [ebx+0Eh]
		mov	eax, [esi+eax]

loc_62B8B111:				; CODE XREF: sub_62B8AE5C+337j
		mov	[ebx+8], eax
		mov	eax, [ebx]
		test	eax, eax
		jz	short loc_62B8B137
		cmp	esi, eax
		jz	loc_62B8B1DB
		movzx	edi, word ptr [ebx+0Ch]
		jmp	short loc_62B8B12E
; ---------------------------------------------------------------------------

loc_62B8B128:				; CODE XREF: sub_62B8AE5C+2D9j
		cmp	esi, ecx
		jz	short loc_62B8B198
		mov	eax, ecx

loc_62B8B12E:				; CODE XREF: sub_62B8AE5C+2CAj
		lea	edx, [eax+edi]
		mov	ecx, [edx]
		test	ecx, ecx
		jnz	short loc_62B8B128

loc_62B8B137:				; CODE XREF: sub_62B8AE5C+2BCj
		cmp	esi, [ebx+4]
		jz	loc_62B8B1C9

loc_62B8B140:				; CODE XREF: sub_62B8AE5C+367j
					; sub_62B8AE5C+370j
		mov	[esp+98h+var_98], esi
		call	silc_free
		mov	esi, [ebx+8]
		test	esi, esi
		jnz	short loc_62B8B100

loc_62B8B14F:				; CODE XREF: sub_62B8AE5C+2A0j
		mov	[esp+98h+var_98], ebx
		call	silc_free

loc_62B8B157:				; CODE XREF: sub_62B8AE5C+3D2j
		mov	esi, [ebp+arg_14]
		mov	ebx, [esi+8]
		test	ebx, ebx
		jz	short loc_62B8B173
		mov	eax, [ebx]
		mov	[esp+98h+var_98], eax
		call	silc_free
		mov	[esp+98h+var_98], ebx
		call	silc_free

loc_62B8B173:				; CODE XREF: sub_62B8AE5C+303j
		mov	edi, [ebp+arg_14]
		mov	[esp+98h+var_98], edi
		call	silc_free
		xor	eax, eax
		add	esp, 8Ch
		pop	ebx
		pop	esi
		pop	edi
		leave
		retn
; ---------------------------------------------------------------------------
		align 4

loc_62B8B18C:				; CODE XREF: sub_62B8AE5C+2A8j
		movzx	eax, word ptr [ebx+0Ch]
		mov	eax, [esi+eax]
		jmp	loc_62B8B111
; ---------------------------------------------------------------------------

loc_62B8B198:				; CODE XREF: sub_62B8AE5C+2CEj
		mov	[ebp+var_5C], edx

loc_62B8B19B:				; CODE XREF: sub_62B8AE5C+388j
		mov	ecx, [esi+edi]
		mov	edi, [ebp+var_5C]
		mov	[edi], ecx
		test	ecx, ecx
		jz	short loc_62B8B1B7
		test	byte ptr [ebx+10h], 1
		jz	short loc_62B8B1B7
		movzx	edx, word ptr [ebx+0Eh]
		mov	edi, [esi+edx]
		mov	[ecx+edx], edi

loc_62B8B1B7:				; CODE XREF: sub_62B8AE5C+349j
					; sub_62B8AE5C+34Fj
		cmp	esi, [ebx+8]
		jz	short loc_62B8B1D1

loc_62B8B1BC:				; CODE XREF: sub_62B8AE5C+37Dj
		sub	dword ptr [ebx+10h], 4
		cmp	esi, [ebx+4]
		jnz	loc_62B8B140

loc_62B8B1C9:				; CODE XREF: sub_62B8AE5C+2DEj
		mov	[ebx+4], eax
		jmp	loc_62B8B140
; ---------------------------------------------------------------------------

loc_62B8B1D1:				; CODE XREF: sub_62B8AE5C+35Ej
		mov	ecx, [ebp+var_5C]
		mov	edx, [ecx]
		mov	[ebx+8], edx
		jmp	short loc_62B8B1BC
; ---------------------------------------------------------------------------

loc_62B8B1DB:				; CODE XREF: sub_62B8AE5C+2C0j
		movzx	edi, word ptr [ebx+0Ch]
		mov	[ebp+var_5C], ebx
		xor	eax, eax
		jmp	short loc_62B8B19B
; ---------------------------------------------------------------------------

loc_62B8B1E6:				; CODE XREF: sub_62B8AE5C+144j
		mov	edx, [ebp+var_4C]
		mov	eax, [edx+54h]
		mov	eax, [eax+0B8h]
		mov	[esp+98h+var_98], eax
		call	silc_mutex_unlock
		jmp	loc_62B8AEF8
; ---------------------------------------------------------------------------

loc_62B8B1FF:				; CODE XREF: sub_62B8AE5C+3Cj
		mov	dl, 30h

loc_62B8B201:				; CODE XREF: sub_62B8AE5C+3ECj
		mov	ecx, [ebp+arg_14]
		mov	eax, [ecx]
		test	eax, eax
		jz	short loc_62B8B22C
		mov	ecx, [ecx+4]
		mov	[esp+98h+var_88], ecx
		mov	[esp+98h+var_8C], 0
		movzx	edx, dl
		mov	[esp+98h+var_90], edx
		mov	[esp+98h+var_94], edi
		mov	edx, [ebp+arg_0]
		mov	[esp+98h+var_98], edx
		call	eax

loc_62B8B22C:				; CODE XREF: sub_62B8AE5C+3ACj
		test	ebx, ebx
		jz	loc_62B8B157
		mov	dl, [ebx+10h]
		jmp	loc_62B8B081
; ---------------------------------------------------------------------------

loc_62B8B23C:				; CODE XREF: sub_62B8AE5C+86j
		xor	eax, eax
		jmp	loc_62B8B03F
; ---------------------------------------------------------------------------

loc_62B8B243:				; CODE XREF: sub_62B8AE5C+ACj
					; sub_62B8AE5C+BAj ...
		mov	edi, [ebp+var_4C]
		mov	dl, 14h
		jmp	short loc_62B8B201
sub_62B8AE5C	endp

; ---------------------------------------------------------------------------
		align 4
; Exported entry 133. silc_client_get_clients_by_list

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public silc_client_get_clients_by_list
silc_client_get_clients_by_list	proc near ; CODE XREF: silc_client_command_reply_users+484p
					; silc_client_command_reply_join+4CBp

var_B8		= dword	ptr -0B8h
var_B4		= dword	ptr -0B4h
var_B0		= dword	ptr -0B0h
var_AC		= dword	ptr -0ACh
var_A8		= dword	ptr -0A8h
var_A4		= dword	ptr -0A4h
var_A0		= dword	ptr -0A0h
var_9C		= dword	ptr -9Ch
var_98		= dword	ptr -98h
var_7C		= dword	ptr -7Ch
var_60		= dword	ptr -60h
var_5C		= dword	ptr -5Ch
var_58		= dword	ptr -58h
var_54		= dword	ptr -54h
var_50		= dword	ptr -50h
var_4C		= dword	ptr -4Ch
var_3C		= byte ptr -3Ch
var_1C		= dword	ptr -1Ch
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h
arg_10		= dword	ptr  18h
arg_14		= dword	ptr  1Ch

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		sub	esp, 0ACh
		mov	ebx, [ebp+arg_C]
		mov	esi, [ebp+arg_0]
		test	esi, esi
		jz	loc_62B8B498
		mov	ecx, [ebp+arg_4]
		test	ecx, ecx
		jz	loc_62B8B498
		test	ebx, ebx
		jz	loc_62B8B498
		mov	[esp+0B8h+var_B4], 10h
		mov	[esp+0B8h+var_B8], 1
		call	silc_calloc
		mov	[ebp+var_5C], eax
		test	eax, eax
		jz	loc_62B8B498
		mov	eax, [ebp+arg_10]
		mov	edx, [ebp+var_5C]
		mov	[edx], eax
		mov	eax, [ebp+arg_14]
		mov	[edx+4], eax
		mov	ecx, [ebp+arg_8]
		mov	[edx+0Ch], ecx
		mov	esi, [ebx+8]
		mov	edi, [ebx+4]
		mov	[esp+0B8h+var_B4], 10h
		mov	[esp+0B8h+var_B8], 1
		call	silc_calloc
		mov	edx, eax
		test	eax, eax
		jz	loc_62B8B658
		sub	esi, edi
		jz	loc_62B8B67C
		mov	[esp+0B8h+var_B4], 1
		mov	[esp+0B8h+var_B8], esi
		mov	[ebp+var_60], eax
		call	silc_calloc
		mov	edx, [ebp+var_60]
		mov	[edx], eax
		test	eax, eax
		jz	loc_62B8B658
		mov	[edx+4], eax
		mov	[edx+8], eax
		lea	ecx, [eax+esi]
		mov	[edx+0Ch], ecx
		mov	edi, ecx
		sub	edi, eax
		cmp	esi, edi
		ja	short loc_62B8B311

loc_62B8B30C:				; CODE XREF: silc_client_get_clients_by_list+433j
		mov	[edx+8], ecx
		mov	eax, ecx

loc_62B8B311:				; CODE XREF: silc_client_get_clients_by_list+BEj
		mov	esi, [ebx+4]
		mov	ecx, [ebx+8]
		sub	ecx, esi
		mov	edi, [edx+4]
		mov	[ebp+var_4C], edi
		sub	eax, edi
		cmp	ecx, eax
		ja	short loc_62B8B32A
		mov	edi, [ebp+var_4C]
		rep movsb

loc_62B8B32A:				; CODE XREF: silc_client_get_clients_by_list+D7j
		mov	eax, [ebp+var_5C]
		mov	[eax+8], edx
		mov	esi, [ebp+arg_8]
		test	esi, esi
		jz	loc_62B8B610
		mov	eax, [ebx+4]
		mov	[ebp+var_4C], 0
		xor	edi, edi
		mov	[ebp+var_58], 0
		mov	[ebp+var_54], 0
		mov	[ebp+var_50], 0
		jmp	short loc_62B8B3B6
; ---------------------------------------------------------------------------
		align 10h

loc_62B8B360:				; CODE XREF: silc_client_get_clients_by_list+217j
		mov	edx, [ecx+384h]
		test	edx, edx
		jz	loc_62B8B469
		xchg	ax, ax

loc_62B8B370:				; CODE XREF: silc_client_get_clients_by_list+244j
		mov	ecx, [ebp+var_7C]
		mov	[esp+0B8h+var_B0], ecx
		mov	eax, [ebp+arg_4]
		mov	[esp+0B8h+var_B4], eax
		mov	edx, [ebp+arg_0]
		mov	[esp+0B8h+var_B8], edx
		call	silc_client_unref_client
		mov	edx, [ebx+4]
		mov	eax, [ebx+8]
		sub	eax, edx
		cmp	esi, eax
		ja	loc_62B8B51C
		lea	eax, [edx+esi]
		mov	[ebx+4], eax
		test	edx, edx
		jz	loc_62B8B51C
		inc	[ebp+var_4C]
		mov	ecx, [ebp+var_4C]
		cmp	[ebp+arg_8], ecx
		jbe	loc_62B8B574

loc_62B8B3B6:				; CODE XREF: silc_client_get_clients_by_list+110j
		movzx	esi, byte ptr [eax+2]
		shl	esi, 8
		movzx	edx, byte ptr [eax+3]
		or	esi, edx
		add	esi, 4
		movzx	esi, si
		lea	edx, [ebp+var_3C]
		mov	[esp+0B8h+var_B0], edx
		mov	[esp+0B8h+var_B4], esi
		mov	[esp+0B8h+var_B8], eax
		call	silc_id_payload_parse_id
		test	al, al
		jz	loc_62B8B51C
		mov	ecx, [ebp+arg_4]
		mov	eax, [ecx+54h]
		mov	eax, [eax+0B8h]
		mov	[esp+0B8h+var_B8], eax
		call	silc_mutex_lock
		lea	eax, [ebp+var_1C]
		mov	[esp+0B8h+var_B0], eax
		lea	edx, [ebp+var_3C]
		mov	[esp+0B8h+var_B4], edx
		mov	ecx, [ebp+arg_4]
		mov	eax, [ecx+54h]
		mov	eax, [eax+114h]
		mov	[esp+0B8h+var_B8], eax
		call	silc_idcache_find_by_id_one
		test	al, al
		jz	loc_62B8B5F0
		mov	eax, [ebp+var_1C]
		mov	eax, [eax+0Ch]
		mov	[ebp+var_7C], eax
		mov	ecx, eax
		mov	eax, [eax+3F8h]
		mov	eax, [ecx+3F8h]
		inc	eax
		mov	[ecx+3F8h], eax
		mov	edx, [ebp+arg_4]
		mov	eax, [edx+54h]
		mov	eax, [eax+0B8h]
		mov	[esp+0B8h+var_B8], eax
		call	silc_mutex_unlock
		mov	ecx, [ebp+var_7C]
		cmp	byte ptr [ecx],	0
		jz	short loc_62B8B469
		cmp	byte ptr [ecx+101h], 0
		jnz	loc_62B8B360

loc_62B8B469:				; CODE XREF: silc_client_get_clients_by_list+11Cj
					; silc_client_get_clients_by_list+20Ej	...
		mov	eax, [ebp+var_50]
		test	eax, eax
		jz	short loc_62B8B4A8

loc_62B8B470:				; CODE XREF: silc_client_get_clients_by_list+2AEj
		lea	eax, ds:0[edi*4]
		mov	ecx, [ebx+4]
		mov	edx, [ebp+var_50]
		mov	[edx+eax], ecx
		mov	edx, [ebp+var_54]
		mov	[edx+eax], esi
		lea	ecx, [edi+4]
		mov	edx, [ebp+var_58]
		mov	[edx+eax], ecx
		inc	edi
		jmp	loc_62B8B370
; ---------------------------------------------------------------------------
		align 4

loc_62B8B498:				; CODE XREF: silc_client_get_clients_by_list+14j
					; silc_client_get_clients_by_list+1Fj ...
		xor	eax, eax

loc_62B8B49A:				; CODE XREF: silc_client_get_clients_by_list+39Ej
					; silc_client_get_clients_by_list+407j
		add	esp, 0ACh
		pop	ebx
		pop	esi
		pop	edi
		leave
		retn
; ---------------------------------------------------------------------------
		align 4

loc_62B8B4A8:				; CODE XREF: silc_client_get_clients_by_list+222j
		mov	[esp+0B8h+var_B4], 4
		mov	eax, [ebp+arg_8]
		mov	[esp+0B8h+var_B8], eax
		call	silc_calloc
		mov	[ebp+var_50], eax
		mov	[esp+0B8h+var_B4], 4
		mov	edx, [ebp+arg_8]
		mov	[esp+0B8h+var_B8], edx
		call	silc_calloc
		mov	[ebp+var_54], eax
		mov	[esp+0B8h+var_B4], 4
		mov	ecx, [ebp+arg_8]
		mov	[esp+0B8h+var_B8], ecx
		call	silc_calloc
		mov	[ebp+var_58], eax
		mov	ecx, [ebp+var_50]
		test	ecx, ecx
		jz	short loc_62B8B500
		mov	edx, [ebp+var_54]
		test	edx, edx
		jz	short loc_62B8B500
		test	eax, eax
		jnz	loc_62B8B470

loc_62B8B500:				; CODE XREF: silc_client_get_clients_by_list+2A3j
					; silc_client_get_clients_by_list+2AAj
		mov	edx, [ebp+var_7C]
		mov	[esp+0B8h+var_B0], edx
		mov	edi, [ebp+arg_4]
		mov	[esp+0B8h+var_B4], edi
		mov	eax, [ebp+arg_0]
		mov	[esp+0B8h+var_B8], eax
		call	silc_client_unref_client
		lea	esi, [esi+0]

loc_62B8B51C:				; CODE XREF: silc_client_get_clients_by_list+147j
					; silc_client_get_clients_by_list+155j	...
		mov	edx, [ebp+var_5C]
		mov	ebx, [edx+8]
		test	ebx, ebx
		jz	short loc_62B8B538
		mov	eax, [ebx]
		mov	[esp+0B8h+var_B8], eax
		call	silc_free
		mov	[esp+0B8h+var_B8], ebx
		call	silc_free

loc_62B8B538:				; CODE XREF: silc_client_get_clients_by_list+2D8j
					; silc_client_get_clients_by_list+42Bj
		mov	ecx, [ebp+var_5C]
		mov	[esp+0B8h+var_B8], ecx
		call	silc_free
		mov	edi, [ebp+var_50]
		mov	[esp+0B4h+var_B4], edi
		call	silc_free
		mov	eax, [ebp+var_54]
		mov	[esp+0B4h+var_B4], eax
		call	silc_free
		mov	edx, [ebp+var_58]
		mov	[esp+0B4h+var_B4], edx
		call	silc_free
		xor	eax, eax
		add	esp, 0ACh
		pop	ebx
		pop	esi
		pop	edi
		leave
		retn
; ---------------------------------------------------------------------------
		align 4

loc_62B8B574:				; CODE XREF: silc_client_get_clients_by_list+164j
		mov	eax, [ebx]
		mov	[ebx+4], eax
		test	edi, edi
		jz	loc_62B8B618
		mov	eax, [ebp+var_58]
		mov	[esp+0B8h+var_98], eax
		mov	edx, [ebp+var_54]
		mov	[esp+0B8h+var_9C], edx
		mov	ecx, [ebp+var_50]
		mov	[esp+0B8h+var_A0], ecx
		mov	[esp+0B8h+var_A4], edi
		mov	edi, [ebp+var_5C]
		mov	[esp+0B8h+var_A8], edi
		mov	[esp+0B8h+var_AC], offset sub_62B8AE5C
		mov	[esp+0B8h+var_B0], 1
		mov	eax, [ebp+arg_4]
		mov	[esp+0B8h+var_B4], eax
		mov	edx, [ebp+arg_0]
		mov	[esp+0B8h+var_B8], edx
		call	silc_client_command_send_argv
		mov	ecx, [ebp+var_50]
		mov	[esp+0B8h+var_B8], ecx
		mov	[ebp+var_60], eax
		call	silc_free
		mov	edi, [ebp+var_54]
		mov	[esp+0B8h+var_B8], edi
		call	silc_free
		mov	edx, [ebp+var_58]
		mov	[esp+0B8h+var_B8], edx
		call	silc_free
		mov	eax, [ebp+var_60]
		jmp	loc_62B8B49A
; ---------------------------------------------------------------------------
		align 10h

loc_62B8B5F0:				; CODE XREF: silc_client_get_clients_by_list+1D0j
		mov	edx, [ebp+arg_4]
		mov	eax, [edx+54h]
		mov	eax, [eax+0B8h]
		mov	[esp+0B8h+var_B8], eax
		call	silc_mutex_unlock
		mov	[ebp+var_7C], 0
		jmp	loc_62B8B469
; ---------------------------------------------------------------------------

loc_62B8B610:				; CODE XREF: silc_client_get_clients_by_list+E9j
		mov	eax, [ebx]
		mov	[ebx+4], eax
		lea	esi, [esi+0]

loc_62B8B618:				; CODE XREF: silc_client_get_clients_by_list+32Fj
		mov	[esp+0B8h+var_A0], 0
		mov	ecx, [ebp+var_5C]
		mov	[esp+0B8h+var_A4], ecx
		mov	[esp+0B8h+var_A8], 0
		mov	[esp+0B8h+var_AC], 0
		mov	[esp+0B8h+var_B0], 1
		mov	edi, [ebp+arg_4]
		mov	[esp+0B8h+var_B4], edi
		mov	eax, [ebp+arg_0]
		mov	[esp+0B8h+var_B8], eax
		call	sub_62B8AE5C
		xor	eax, eax
		jmp	loc_62B8B49A
; ---------------------------------------------------------------------------

loc_62B8B658:				; CODE XREF: silc_client_get_clients_by_list+7Ej
					; silc_client_get_clients_by_list+A6j
		mov	edi, [ebp+var_5C]
		mov	dword ptr [edi+8], 0
		mov	[ebp+var_58], 0
		mov	[ebp+var_54], 0
		mov	[ebp+var_50], 0
		jmp	loc_62B8B538
; ---------------------------------------------------------------------------

loc_62B8B67C:				; CODE XREF: silc_client_get_clients_by_list+86j
		mov	ecx, [eax+8]
		jmp	loc_62B8B30C
silc_client_get_clients_by_list	endp

; Exported entry 131. silc_client_get_client_by_id_resolve

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public silc_client_get_client_by_id_resolve
silc_client_get_client_by_id_resolve proc near ; CODE XREF: silc_client_channel_message+C7p
					; silc_client_ftp+28Ep	...

var_78		= dword	ptr -78h
var_74		= dword	ptr -74h
var_70		= dword	ptr -70h
var_6C		= dword	ptr -6Ch
var_68		= dword	ptr -68h
var_64		= dword	ptr -64h
var_60		= dword	ptr -60h
var_5C		= dword	ptr -5Ch
var_58		= dword	ptr -58h
var_54		= dword	ptr -54h
var_50		= dword	ptr -50h
var_4C		= dword	ptr -4Ch
var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_1C		= dword	ptr -1Ch
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h
arg_10		= dword	ptr  18h
arg_14		= dword	ptr  1Ch

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		sub	esp, 6Ch
		mov	esi, [ebp+arg_0]
		mov	ebx, [ebp+arg_4]
		mov	edi, [ebp+arg_8]
		test	esi, esi
		jz	loc_62B8B8B4
		test	edi, edi
		jz	loc_62B8B8B4
		test	ebx, ebx
		jz	loc_62B8B8B4
		mov	[esp+78h+var_74], 10h
		mov	[esp+78h+var_78], 1
		call	silc_calloc
		mov	[ebp+var_2C], eax
		test	eax, eax
		jz	loc_62B8B8AC
		mov	edx, [ebp+arg_10]
		mov	eax, [ebp+var_2C]
		mov	[eax+4], edx
		mov	ecx, [ebp+arg_14]
		mov	[eax+8], ecx
		mov	[esp+78h+var_78], 1Ch
		call	silc_malloc
		test	eax, eax
		jz	loc_62B8B964
		mov	dword ptr [eax+18h], 0
		mov	dword ptr [eax+14h], 0
		mov	edx, [eax+10h]
		and	edx, 3
		mov	[eax+10h], edx
		mov	word ptr [eax+0Ch], 4
		mov	word ptr [eax+0Eh], 8
		mov	byte ptr [eax+10h], 1
		mov	dword ptr [eax+8], 0
		mov	dword ptr [eax+4], 0
		mov	dword ptr [eax], 0
		mov	edx, [ebp+var_2C]
		mov	[edx], eax
		mov	eax, [ebx+54h]
		mov	eax, [eax+0B8h]
		mov	[esp+78h+var_78], eax
		call	silc_mutex_lock
		lea	eax, [ebp+var_1C]
		mov	[esp+78h+var_70], eax
		mov	[esp+78h+var_74], edi
		mov	eax, [ebx+54h]
		mov	eax, [eax+114h]
		mov	[esp+78h+var_78], eax
		call	silc_idcache_find_by_id_one
		test	al, al
		jz	loc_62B8B97C
		mov	eax, [ebp+var_1C]
		mov	eax, [eax+0Ch]
		mov	[ebp+var_30], eax
		mov	edx, eax
		mov	eax, [eax+3F8h]
		mov	eax, [edx+3F8h]
		inc	eax
		mov	[edx+3F8h], eax
		mov	eax, [ebx+54h]
		mov	eax, [eax+0B8h]
		mov	[esp+78h+var_78], eax
		call	silc_mutex_unlock
		mov	ecx, [ebp+var_30]
		cmp	word ptr [ecx+400h], 0
		jnz	loc_62B8B8DA

loc_62B8B7A5:				; CODE XREF: silc_client_get_client_by_id_resolve+310j
		mov	[esp+78h+var_74], 2
		mov	[esp+78h+var_78], edi
		call	silc_id_payload_encode
		mov	edi, eax
		test	eax, eax
		jz	loc_62B8B944
		mov	eax, [eax+4]
		mov	[ebp+var_3C], eax
		mov	eax, [edi+8]
		sub	eax, [ebp+var_3C]

loc_62B8B7CB:				; CODE XREF: silc_client_get_client_by_id_resolve+2C9j
		mov	edx, [ebp+arg_C]
		test	edx, edx
		jz	loc_62B8B954
		mov	edx, [ebp+arg_C]
		mov	edx, [edx+4]
		mov	[ebp+var_34], edx
		mov	ecx, [ebp+arg_C]
		mov	edx, [ecx+8]
		sub	edx, [ebp+var_34]

loc_62B8B7E8:				; CODE XREF: silc_client_get_client_by_id_resolve+2D9j
		mov	[esp+78h+var_4C], eax
		mov	eax, [ebp+var_3C]
		mov	[esp+78h+var_50], eax
		mov	[esp+78h+var_54], 4
		mov	[esp+78h+var_58], edx
		mov	edx, [ebp+var_34]
		mov	[esp+78h+var_5C], edx
		mov	[esp+78h+var_60], 3
		mov	[esp+78h+var_64], 2
		mov	ecx, [ebp+var_2C]
		mov	[esp+78h+var_68], ecx
		mov	[esp+78h+var_6C], offset sub_62B8AB70
		mov	[esp+78h+var_70], 1
		mov	[esp+78h+var_74], ebx
		mov	[esp+78h+var_78], esi
		call	silc_client_command_send
		test	ax, ax
		jnz	short loc_62B8B86C
		mov	ecx, [ebp+arg_10]
		test	ecx, ecx
		jz	short loc_62B8B86C
		mov	edx, [ebp+arg_14]
		mov	[esp+78h+var_68], edx
		mov	[esp+78h+var_6C], 0
		mov	[esp+78h+var_70], 30h
		mov	[esp+78h+var_74], ebx
		mov	[esp+78h+var_78], esi
		mov	[ebp+var_38], eax
		call	[ebp+arg_10]
		mov	eax, [ebp+var_38]

loc_62B8B86C:				; CODE XREF: silc_client_get_client_by_id_resolve+1B8j
					; silc_client_get_client_by_id_resolve+1BFj
		mov	edx, [ebp+var_30]
		test	edx, edx
		jz	loc_62B8B924
		test	ax, ax
		jz	loc_62B8B924
		mov	ecx, [ebp+var_30]
		mov	[ecx+400h], ax
		mov	edx, [ebp+var_2C]
		mov	[edx+0Ch], ecx

loc_62B8B890:				; CODE XREF: silc_client_get_client_by_id_resolve+2B9j
		test	edi, edi
		jz	short loc_62B8B8AC
		mov	edx, [edi]
		mov	[esp+78h+var_78], edx
		mov	[ebp+var_38], eax
		call	silc_free
		mov	[esp+78h+var_78], edi
		call	silc_free
		mov	eax, [ebp+var_38]

loc_62B8B8AC:				; CODE XREF: silc_client_get_client_by_id_resolve+43j
					; silc_client_get_client_by_id_resolve+20Ej ...
		add	esp, 6Ch
		pop	ebx
		pop	esi
		pop	edi
		leave
		retn
; ---------------------------------------------------------------------------

loc_62B8B8B4:				; CODE XREF: silc_client_get_client_by_id_resolve+14j
					; silc_client_get_client_by_id_resolve+1Cj ...
		mov	[esp+78h+var_78], offset aMissingArgum_0 ; "Missing arguments to silc_client_get_cl"...
		call	silc_format
		mov	[esp+74h+var_70], eax
		mov	[esp+74h+var_74], 3
		call	silc_log_output
		xor	eax, eax
		add	esp, 6Ch
		pop	ebx
		pop	esi
		pop	edi
		leave
		retn
; ---------------------------------------------------------------------------

loc_62B8B8DA:				; CODE XREF: silc_client_get_client_by_id_resolve+11Bj
		mov	[esp+78h+var_70], ecx
		mov	[esp+78h+var_74], ebx
		mov	[esp+78h+var_78], esi
		call	silc_client_unref_client
		mov	eax, [ebp+var_2C]
		mov	[esp+78h+var_68], eax
		mov	[esp+78h+var_6C], offset sub_62B8AB70
		mov	edx, [ebp+var_30]
		movzx	eax, word ptr [edx+400h]
		mov	[esp+78h+var_70], eax
		mov	[esp+78h+var_74], 0
		mov	[esp+78h+var_78], ebx
		call	silc_client_command_pending
		mov	ecx, [ebp+var_30]
		mov	eax, [ecx+400h]
		jmp	short loc_62B8B8AC
; ---------------------------------------------------------------------------
		align 4

loc_62B8B924:				; CODE XREF: silc_client_get_client_by_id_resolve+1EDj
					; silc_client_get_client_by_id_resolve+1F6j
		mov	ecx, [ebp+var_30]
		mov	[esp+78h+var_70], ecx
		mov	[esp+78h+var_74], ebx
		mov	[esp+78h+var_78], esi
		mov	[ebp+var_38], eax
		call	silc_client_unref_client
		mov	eax, [ebp+var_38]
		jmp	loc_62B8B890
; ---------------------------------------------------------------------------
		align 4

loc_62B8B944:				; CODE XREF: silc_client_get_client_by_id_resolve+135j
		xor	eax, eax
		mov	[ebp+var_3C], 0
		jmp	loc_62B8B7CB
; ---------------------------------------------------------------------------
		align 4

loc_62B8B954:				; CODE XREF: silc_client_get_client_by_id_resolve+14Cj
		xor	edx, edx
		mov	[ebp+var_34], 0
		jmp	loc_62B8B7E8
; ---------------------------------------------------------------------------
		align 4

loc_62B8B964:				; CODE XREF: silc_client_get_client_by_id_resolve+66j
		mov	ecx, [ebp+var_2C]
		mov	dword ptr [ecx], 0
		mov	[esp+78h+var_78], ecx
		call	silc_free
		xor	eax, eax
		jmp	loc_62B8B8AC
; ---------------------------------------------------------------------------

loc_62B8B97C:				; CODE XREF: silc_client_get_client_by_id_resolve+DBj
		mov	eax, [ebx+54h]
		mov	eax, [eax+0B8h]
		mov	[esp+78h+var_78], eax
		call	silc_mutex_unlock
		mov	[ebp+var_30], 0
		jmp	loc_62B8B7A5
silc_client_get_client_by_id_resolve endp

; ---------------------------------------------------------------------------
		align 4

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_62B8B99C	proc near		; DATA XREF: sub_62B8D2A0+254o

var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h

		push	ebp
		mov	ebp, esp
		push	ebx
		sub	esp, 34h
		mov	eax, [ebp+arg_C]
		cmp	[ebp+arg_4], 8
		jz	short loc_62B8B9B4

loc_62B8B9AC:				; CODE XREF: sub_62B8B99C+1Dj
		add	esp, 34h
		pop	ebx
		leave
		retn
; ---------------------------------------------------------------------------
		align 4

loc_62B8B9B4:				; CODE XREF: sub_62B8B99C+Ej
		mov	edx, [eax+64h]
		test	edx, edx
		jz	short loc_62B8B9AC
		mov	ecx, [eax+68h]
		mov	[esp+38h+var_C], ecx
		mov	ecx, [eax+74h]
		mov	[esp+38h+var_10], ecx
		mov	ecx, [eax+60h]
		mov	[esp+38h+var_14], ecx
		mov	ecx, [eax+0Ch]
		mov	[esp+38h+var_18], ecx
		mov	ecx, [eax+98h]
		mov	ebx, [eax+9Ch]
		mov	[esp+38h+var_20], ecx
		mov	[esp+38h+var_1C], ebx
		mov	ecx, [ebp+arg_8]
		mov	ebx, [ecx+14h]
		mov	ecx, [ecx+10h]
		mov	[esp+38h+var_28], ecx
		mov	[esp+38h+var_24], ebx
		mov	[esp+38h+var_2C], 0
		mov	[esp+38h+var_30], 1
		mov	ecx, [eax+8]
		mov	[esp+38h+var_34], ecx
		mov	eax, [eax]
		mov	[esp+38h+var_38], eax
		call	edx
		add	esp, 34h
		pop	ebx
		leave
		retn
sub_62B8B99C	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_62B8BA20	proc near		; DATA XREF: sub_62B8D2A0+112o
					; sub_62B8D2A0+22Eo
		push	ebp
		mov	ebp, esp
		leave
		retn
sub_62B8BA20	endp

; ---------------------------------------------------------------------------
		align 4

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_62B8BA28	proc near		; CODE XREF: silc_client_ftp+1DFp
					; silc_client_file_send+345p

var_18		= dword	ptr -18h

		push	ebp
		mov	ebp, esp
		push	esi
		push	ebx
		sub	esp, 10h
		mov	ebx, eax
		mov	esi, edx
		mov	[esp+18h+var_18], 0Ch
		call	silc_malloc
		test	eax, eax
		jz	short loc_62B8BA6C
		mov	[eax], esi
		mov	edx, [ebx]
		test	edx, edx
		jz	short loc_62B8BA80
		movzx	edx, word ptr [ebx+0Ch]
		mov	ecx, [ebx+4]
		mov	[ecx+edx], eax

loc_62B8BA56:				; CODE XREF: sub_62B8BA28+5Ej
		test	byte ptr [ebx+10h], 1
		jnz	short loc_62B8BA74

loc_62B8BA5C:				; CODE XREF: sub_62B8BA28+56j
		mov	[ebx+4], eax
		mov	dword ptr [eax+edx], 0
		add	dword ptr [ebx+10h], 4
		mov	al, 1

loc_62B8BA6C:				; CODE XREF: sub_62B8BA28+1Aj
		add	esp, 10h
		pop	ebx
		pop	esi
		leave
		retn
; ---------------------------------------------------------------------------
		align 4

loc_62B8BA74:				; CODE XREF: sub_62B8BA28+32j
		movzx	ecx, word ptr [ebx+0Eh]
		mov	esi, [ebx+4]
		mov	[eax+ecx], esi
		jmp	short loc_62B8BA5C
; ---------------------------------------------------------------------------

loc_62B8BA80:				; CODE XREF: sub_62B8BA28+22j
		mov	[ebx], eax
		movzx	edx, word ptr [ebx+0Ch]
		jmp	short loc_62B8BA56
sub_62B8BA28	endp

; Exported entry 121. silc_client_ftp

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public silc_client_ftp
silc_client_ftp	proc near		; DATA XREF: silc_client_connection_st_packet:loc_62B81E7Co

Src		= dword	ptr -88h
var_84		= dword	ptr -84h
var_80		= dword	ptr -80h
var_7C		= dword	ptr -7Ch
var_78		= dword	ptr -78h
var_74		= dword	ptr -74h
var_70		= dword	ptr -70h
var_6C		= dword	ptr -6Ch
var_68		= dword	ptr -68h
var_64		= dword	ptr -64h
var_60		= dword	ptr -60h
var_5C		= dword	ptr -5Ch
var_4C		= dword	ptr -4Ch
var_46		= word ptr -46h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_3C		= dword	ptr -3Ch
var_35		= byte ptr -35h
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		sub	esp, 7Ch
		mov	edi, [ebp+arg_4]
		mov	ebx, [ebp+arg_8]
		mov	esi, [edi+4Ch]
		mov	eax, [ebx+0Ch]
		cmp	[ebx+10h], eax
		jz	short loc_62B8BAA7
		cmp	byte ptr [eax],	1
		jz	short loc_62B8BABC

loc_62B8BAA7:				; CODE XREF: silc_client_ftp+18j
					; silc_client_ftp+62j ...
		mov	[esp+88h+Src], ebx
		call	silc_packet_free
		mov	eax, 3

loc_62B8BAB4:				; CODE XREF: silc_client_ftp+2A9j
		add	esp, 7Ch
		pop	ebx
		pop	esi
		pop	edi
		leave
		retn
; ---------------------------------------------------------------------------

loc_62B8BABC:				; CODE XREF: silc_client_ftp+1Dj
		mov	[esp+88h+var_78], 1Dh
		lea	eax, [ebp+var_35]
		mov	[esp+88h+var_7C], eax
		mov	[esp+88h+var_80], 2
		mov	al, [ebx+20h]
		and	eax, 3Fh
		mov	[esp+88h+var_84], eax
		mov	eax, [ebx+18h]
		mov	[esp+88h+Src], eax
		call	silc_id_str2id
		test	al, al
		jz	short loc_62B8BAA7
		lea	edx, [ebp+var_35]
		mov	[esp+88h+var_80], edx
		mov	[esp+88h+var_84], edi
		mov	[esp+88h+Src], esi
		call	silc_client_get_client_by_id
		mov	[ebp+var_40], eax
		test	eax, eax
		jz	loc_62B8BCC9
		test	byte ptr [eax+402h], 1
		jz	loc_62B8BCC9
		mov	eax, [esi+18h]
		mov	eax, [eax+6Ch]
		mov	edx, [eax]
		mov	[eax+8], edx
		and	byte ptr [eax+10h], 0FDh
		mov	dword ptr [eax+18h], 0
		mov	dword ptr [eax+14h], 0
		mov	eax, [esi+18h]
		mov	eax, [eax+6Ch]
		jmp	short loc_62B8BB5B
; ---------------------------------------------------------------------------

loc_62B8BB3C:				; CODE XREF: silc_client_ftp+E4j
		movzx	ecx, word ptr [eax+0Eh]
		mov	ecx, [edx+ecx]

loc_62B8BB43:				; CODE XREF: silc_client_ftp+EDj
		mov	[eax+8], ecx
		mov	[eax+14h], edx
		mov	edx, [edx]
		test	edx, edx
		jz	short loc_62B8BB81
		mov	ecx, [ebp+var_40]
		cmp	ecx, [edx+0Ch]
		jz	loc_62B8BCAC

loc_62B8BB5B:				; CODE XREF: silc_client_ftp+B2j
					; silc_client_ftp+236j
		mov	edx, [eax+14h]
		mov	[eax+18h], edx
		mov	edx, [eax+8]
		test	edx, edx
		jz	short loc_62B8BB78
		test	byte ptr [eax+10h], 2
		jnz	short loc_62B8BB3C
		movzx	ecx, word ptr [eax+0Ch]
		mov	ecx, [edx+ecx]
		jmp	short loc_62B8BB43
; ---------------------------------------------------------------------------
		align 4

loc_62B8BB78:				; CODE XREF: silc_client_ftp+DEj
		mov	dword ptr [eax+14h], 0
		xor	edx, edx

loc_62B8BB81:				; CODE XREF: silc_client_ftp+C5j
					; silc_client_ftp+22Bj	...
		mov	ecx, [ebx+0Ch]
		mov	eax, ecx
		not	eax
		add	eax, [ebx+10h]
		mov	[esp+88h+var_84], eax
		inc	ecx
		mov	[esp+88h+Src], ecx
		mov	[ebp+var_4C], edx
		call	silc_key_agreement_payload_parse
		mov	[ebp+var_3C], eax
		test	eax, eax
		jz	loc_62B8BAA7
		mov	[esp+88h+Src], eax
		call	silc_key_agreement_get_hostname
		mov	[ebp+var_44], eax
		mov	eax, [ebp+var_3C]
		mov	[esp+88h+Src], eax
		call	silc_key_agreement_get_port
		mov	[ebp+var_46], ax
		mov	eax, [ebp+var_44]
		test	eax, eax
		mov	edx, [ebp+var_4C]
		jz	loc_62B8BE32
		cmp	[ebp+var_46], 0
		jnz	short loc_62B8BBDC
		mov	[ebp+var_44], 0

loc_62B8BBDC:				; CODE XREF: silc_client_ftp+14Bj
					; silc_client_ftp+3B0j
		test	edx, edx
		jz	short loc_62B8BBF4
		mov	ecx, [ebp+var_44]
		test	ecx, ecx
		jz	short loc_62B8BBF4
		test	byte ptr [edx+0ACh], 1
		jnz	loc_62B8BD64

loc_62B8BBF4:				; CODE XREF: silc_client_ftp+156j
					; silc_client_ftp+15Dj
		mov	[esp+88h+var_84], 0B0h
		mov	[esp+88h+Src], 1
		call	silc_calloc
		mov	ecx, eax
		test	eax, eax
		jz	loc_62B8BC9C
		mov	edx, [esi+18h]
		mov	eax, [edx+80h]
		inc	eax
		mov	[edx+80h], ax
		movzx	eax, ax
		mov	[ecx+60h], eax
		mov	[ecx], esi
		mov	[ecx+4], edi
		mov	edx, [ebp+var_40]
		mov	[esp+88h+var_80], edx
		mov	[esp+88h+var_84], edi
		mov	[esp+88h+Src], esi
		mov	[ebp+var_4C], ecx
		call	silc_client_ref_client
		mov	ecx, [ebp+var_4C]
		mov	[ecx+0Ch], eax
		mov	eax, [ebp+var_44]
		test	eax, eax
		jz	short loc_62B8BC5C
		cmp	[ebp+var_46], 0
		jnz	loc_62B8BE3D

loc_62B8BC5C:				; CODE XREF: silc_client_ftp+1C7j
					; silc_client_ftp+3D4j
		mov	eax, [esi+18h]
		mov	eax, [eax+6Ch]
		mov	edx, ecx
		mov	[ebp+var_4C], ecx
		call	sub_62B8BA28
		mov	eax, [esi+18h]
		mov	edx, [eax+48h]
		movzx	eax, [ebp+var_46]
		mov	[esp+88h+var_74], eax
		mov	eax, [ebp+var_44]
		mov	[esp+88h+var_78], eax
		mov	ecx, [ebp+var_4C]
		mov	eax, [ecx+60h]
		mov	[esp+88h+var_7C], eax
		mov	ecx, [ebp+var_40]
		mov	[esp+88h+var_80], ecx
		mov	[esp+88h+var_84], edi
		mov	[esp+88h+Src], esi
		call	dword ptr [edx+28h]

loc_62B8BC9C:				; CODE XREF: silc_client_ftp+184j
					; silc_client_ftp+33Aj	...
		mov	eax, [ebp+var_3C]
		mov	[esp+88h+Src], eax
		call	silc_key_agreement_payload_free
		jmp	loc_62B8BAA7
; ---------------------------------------------------------------------------

loc_62B8BCAC:				; CODE XREF: silc_client_ftp+CDj
		test	byte ptr [edx+0ACh], 1
		jz	loc_62B8BB81
		mov	ecx, [edx+10h]
		test	ecx, ecx
		jnz	loc_62B8BB5B
		jmp	loc_62B8BB81
; ---------------------------------------------------------------------------

loc_62B8BCC9:				; CODE XREF: silc_client_ftp+7Cj
					; silc_client_ftp+89j
		mov	ecx, [ebp+var_40]
		mov	[esp+88h+var_80], ecx
		mov	[esp+88h+var_84], edi
		mov	[esp+88h+Src], esi
		call	silc_client_unref_client
		mov	edx, [ebp+arg_0]
		mov	al, [edx+28h]
		mov	dl, al
		or	edx, 4
		mov	ecx, [ebp+arg_0]
		mov	[ecx+28h], dl
		test	al, 4
		jnz	short loc_62B8BD36

loc_62B8BCF1:				; CODE XREF: silc_client_ftp+2DAj
		mov	eax, [ebp+arg_0]
		mov	[esp+88h+var_74], eax
		mov	[esp+88h+var_78], offset sub_62B8C6E4
		mov	[esp+88h+var_7C], 0
		lea	edx, [ebp+var_35]
		mov	[esp+88h+var_80], edx
		mov	[esp+88h+var_84], edi
		mov	[esp+88h+Src], esi
		call	silc_client_get_client_by_id_resolve
		mov	ecx, [ebp+arg_0]
		mov	dl, [ecx+28h]
		mov	al, dl
		shr	al, 2
		and	edx, 0FFFFFFFBh
		mov	[ecx+28h], dl
		shl	eax, 1
		and	eax, 2
		jmp	loc_62B8BAB4
; ---------------------------------------------------------------------------

loc_62B8BD36:				; CODE XREF: silc_client_ftp+267j
		mov	[esp+88h+var_80], 3EFh
		mov	[esp+88h+var_84], offset aClient_ftp_c ; "client_ftp.c"
		mov	[esp+88h+Src], offset aSilc_verifyS_1 ;	"SILC_VERIFY %s:%d"
		call	silc_format
		mov	[esp+88h+var_84], eax
		mov	[esp+88h+Src], 3
		call	silc_log_output
		jmp	short loc_62B8BCF1
; ---------------------------------------------------------------------------

loc_62B8BD64:				; CODE XREF: silc_client_ftp+166j
		mov	eax, [ebp+var_44]
		mov	[esp+88h+Src], eax ; Src
		mov	[ebp+var_4C], edx
		call	_strdup
		mov	edx, [ebp+var_4C]
		mov	[edx+90h], eax
		mov	cx, [ebp+var_46]
		mov	[edx+94h], cx
		mov	[esp+88h+var_6C], edx ;	int
		mov	[esp+88h+var_70], offset sub_62B8D2A0 ;	int
		movzx	ecx, cx
		mov	[esp+88h+var_74], ecx ;	int
		mov	[esp+88h+var_78], eax ;	char *
		mov	eax, [edx+5Ch]
		mov	[esp+88h+var_7C], eax ;	int
		mov	eax, [edx+58h]
		mov	[esp+88h+var_80], eax ;	int
		lea	eax, [edx+18h]
		mov	[esp+88h+var_84], eax ;	int
		mov	[esp+88h+Src], esi ; int
		call	silc_client_connect_to_client
		mov	edx, [ebp+var_4C]
		mov	[edx+14h], eax
		test	eax, eax
		jnz	loc_62B8BC9C
		mov	eax, [edx+64h]
		test	eax, eax
		jz	loc_62B8BC9C
		mov	ecx, [edx+68h]
		mov	[esp+88h+var_5C], ecx
		mov	ecx, [edx+74h]
		mov	[esp+88h+var_60], ecx
		mov	ecx, [edx+60h]
		mov	[esp+88h+var_64], ecx
		mov	ecx, [edx+0Ch]
		mov	[esp+88h+var_68], ecx
		mov	[esp+88h+var_70], 0
		mov	[esp+88h+var_6C], 0
		mov	[esp+88h+var_78], 0
		mov	[esp+88h+var_74], 0
		mov	[esp+88h+var_7C], 1
		mov	[esp+88h+var_80], 7
		mov	ecx, [edx+8]
		mov	[esp+88h+var_84], ecx
		mov	edx, [edx]
		mov	[esp+88h+Src], edx
		call	eax
		jmp	loc_62B8BC9C
; ---------------------------------------------------------------------------

loc_62B8BE32:				; CODE XREF: silc_client_ftp+140j
		mov	[ebp+var_46], 0
		jmp	loc_62B8BBDC
; ---------------------------------------------------------------------------

loc_62B8BE3D:				; CODE XREF: silc_client_ftp+1CEj
		mov	eax, [ebp+var_44]
		mov	[esp+88h+Src], eax ; Src
		call	_strdup
		mov	ecx, [ebp+var_4C]
		mov	[ecx+90h], eax
		mov	dx, [ebp+var_46]
		mov	[ecx+94h], dx
		jmp	loc_62B8BC5C
silc_client_ftp	endp

; ---------------------------------------------------------------------------
		align 4

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_62B8BE64	proc near		; CODE XREF: silc_client_file_receive+22Fp
					; silc_client_file_send+32Ap

var_18		= dword	ptr -18h

		push	ebp
		mov	ebp, esp
		push	ebx
		sub	esp, 14h
		mov	ebx, eax
		test	eax, eax
		jz	short loc_62B8BE83
		mov	eax, [eax]
		mov	[esp+18h+var_18], eax
		call	silc_free
		mov	[esp+18h+var_18], ebx
		call	silc_free

loc_62B8BE83:				; CODE XREF: sub_62B8BE64+Bj
		add	esp, 14h
		pop	ebx
		leave
		retn
sub_62B8BE64	endp

; ---------------------------------------------------------------------------
		align 4

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_62B8BE8C	proc near		; DATA XREF: sub_62B8D2A0+11Ao

var_68		= dword	ptr -68h
var_64		= dword	ptr -64h
var_60		= dword	ptr -60h
var_5C		= dword	ptr -5Ch
var_58		= dword	ptr -58h
var_54		= dword	ptr -54h
var_50		= dword	ptr -50h
var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_3C		= dword	ptr -3Ch
var_2C		= dword	ptr -2Ch
var_1C		= dword	ptr -1Ch
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		sub	esp, 5Ch
		mov	ecx, [ebp+arg_0]
		mov	edx, [ebp+arg_4]
		mov	eax, [ebp+arg_C]
		test	edx, edx
		jz	loc_62B8BF30
		mov	ecx, [eax+64h]
		test	ecx, ecx
		jz	short loc_62B8BF28
		mov	edi, [eax+68h]
		mov	esi, [eax+74h]
		mov	ebx, [eax+60h]
		mov	[ebp+var_2C], ebx
		mov	ebx, [eax+0Ch]
		mov	[ebp+var_1C], ebx
		cmp	edx, 2
		jz	loc_62B8BF50
		cmp	edx, 3
		setz	dl
		movzx	edx, dl
		lea	edx, ds:1[edx*4]

loc_62B8BED8:				; CODE XREF: sub_62B8BE8C+C6j
		mov	[esp+68h+var_3C], edi
		mov	[esp+68h+var_40], esi
		mov	ebx, [ebp+var_2C]
		mov	[esp+68h+var_44], ebx
		mov	ebx, [ebp+var_1C]
		mov	[esp+68h+var_48], ebx
		mov	[esp+68h+var_50], 0
		mov	[esp+68h+var_4C], 0
		mov	[esp+68h+var_58], 0
		mov	[esp+68h+var_54], 0
		mov	[esp+68h+var_5C], edx
		mov	[esp+68h+var_60], 7
		mov	edx, [eax+8]
		mov	[esp+68h+var_64], edx
		mov	eax, [eax]
		mov	[esp+68h+var_68], eax
		call	ecx

loc_62B8BF28:				; CODE XREF: sub_62B8BE8C+1Fj
		add	esp, 5Ch
		pop	ebx
		pop	esi
		pop	edi
		leave
		retn
; ---------------------------------------------------------------------------

loc_62B8BF30:				; CODE XREF: sub_62B8BE8C+14j
		mov	[ebp+arg_C], eax
		mov	[ebp+arg_8], offset sub_62B8BF54
		mov	[ebp+arg_4], offset byte_62BA873B
		mov	[ebp+arg_0], ecx
		add	esp, 5Ch
		pop	ebx
		pop	esi
		pop	edi
		leave
		jmp	silc_sftp_opendir
; ---------------------------------------------------------------------------

loc_62B8BF50:				; CODE XREF: sub_62B8BE8C+36j
		mov	dl, 4
		jmp	short loc_62B8BED8
sub_62B8BE8C	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_62B8BF54	proc near		; DATA XREF: sub_62B8BE8C+A7o

var_68		= dword	ptr -68h
var_64		= dword	ptr -64h
var_60		= dword	ptr -60h
var_5C		= dword	ptr -5Ch
var_58		= dword	ptr -58h
var_54		= dword	ptr -54h
var_50		= dword	ptr -50h
var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_3C		= dword	ptr -3Ch
var_2C		= dword	ptr -2Ch
var_1C		= dword	ptr -1Ch
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		sub	esp, 5Ch
		mov	eax, [ebp+arg_4]
		mov	esi, [ebp+arg_8]
		mov	ebx, [ebp+arg_C]
		test	eax, eax
		jz	loc_62B8BFF8
		mov	edx, [ebx+64h]
		test	edx, edx
		jz	short loc_62B8BFF0
		mov	edi, [ebx+68h]
		mov	esi, [ebx+74h]
		mov	ecx, [ebx+60h]
		mov	[ebp+var_2C], ecx
		mov	ecx, [ebx+0Ch]
		mov	[ebp+var_1C], ecx
		cmp	eax, 2
		jz	loc_62B8C024
		cmp	eax, 3
		setz	al
		movzx	eax, al
		lea	eax, ds:1[eax*4]

loc_62B8BFA0:				; CODE XREF: sub_62B8BF54+D2j
		mov	[esp+68h+var_3C], edi
		mov	[esp+68h+var_40], esi
		mov	ecx, [ebp+var_2C]
		mov	[esp+68h+var_44], ecx
		mov	ecx, [ebp+var_1C]
		mov	[esp+68h+var_48], ecx
		mov	[esp+68h+var_50], 0
		mov	[esp+68h+var_4C], 0
		mov	[esp+68h+var_58], 0
		mov	[esp+68h+var_54], 0
		mov	[esp+68h+var_5C], eax
		mov	[esp+68h+var_60], 7
		mov	eax, [ebx+8]
		mov	[esp+68h+var_64], eax
		mov	eax, [ebx]
		mov	[esp+68h+var_68], eax
		call	edx

loc_62B8BFF0:				; CODE XREF: sub_62B8BF54+1Fj
		add	esp, 5Ch
		pop	ebx
		pop	esi
		pop	edi
		leave
		retn
; ---------------------------------------------------------------------------

loc_62B8BFF8:				; CODE XREF: sub_62B8BF54+14j
		mov	[esp+68h+var_5C], ebx
		mov	[esp+68h+var_60], offset sub_62B8C0F8
		mov	[esp+68h+var_64], esi
		mov	eax, [ebp+arg_0]
		mov	[esp+68h+var_68], eax
		call	silc_sftp_readdir
		mov	[ebx+88h], esi
		add	esp, 5Ch
		pop	ebx
		pop	esi
		pop	edi
		leave
		retn
; ---------------------------------------------------------------------------
		align 4

loc_62B8C024:				; CODE XREF: sub_62B8BF54+36j
		mov	al, 4
		jmp	loc_62B8BFA0
sub_62B8BF54	endp

; ---------------------------------------------------------------------------
		align 4

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl sub_62B8C02C(char	*, int)
sub_62B8C02C	proc near		; CODE XREF: sub_62B8C0F8+E2j
					; DATA XREF: sub_62B8C0F8+102o

Src		= dword	ptr -68h
var_64		= dword	ptr -64h
var_60		= dword	ptr -60h
var_5C		= dword	ptr -5Ch
var_58		= dword	ptr -58h
var_54		= dword	ptr -54h
var_48		= byte ptr -48h
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		sub	esp, 5Ch
		mov	edi, [ebp+arg_0]
		mov	ebx, [ebp+arg_4]
		test	edi, edi
		jz	loc_62B8C0E4
		mov	esi, [ebx+74h]
		mov	dword ptr [ebx+74h], 0
		mov	eax, [ebx+78h]
		mov	[esp+68h+Src], eax
		call	silc_free
		mov	dword ptr [ebx+78h], 0
		mov	[esp+68h+Src], edi ; Src
		call	_strdup
		mov	[ebx+74h], eax

loc_62B8C06A:				; CODE XREF: sub_62B8C02C+C5j
		lea	edx, [ebp+var_48]
		mov	ecx, 30h
		xor	eax, eax
		mov	edi, edx
		rep stosb
		mov	[esp+68h+var_54], ebx
		mov	[esp+68h+var_58], offset sub_62B8C224
		mov	[esp+68h+var_5C], edx
		mov	[esp+68h+var_60], 1
		mov	[esp+68h+var_64], esi
		mov	eax, [ebx+80h]
		mov	[esp+68h+Src], eax
		call	silc_sftp_open
		mov	[esp+68h+var_5C], 0
		mov	[esp+68h+var_60], 0
		mov	eax, [ebx+88h]
		mov	[esp+68h+var_64], eax
		mov	eax, [ebx+80h]
		mov	[esp+68h+Src], eax
		call	silc_sftp_close
		mov	dword ptr [ebx+88h], 0
		mov	[esp+68h+Src], esi
		call	silc_free
		add	esp, 5Ch
		pop	ebx
		pop	esi
		pop	edi
		leave
		retn
; ---------------------------------------------------------------------------

loc_62B8C0E4:				; CODE XREF: sub_62B8C02C+11j
		mov	eax, [ebx+74h]
		mov	[esp+68h+Src], eax ; Src
		call	_strdup
		mov	esi, eax
		jmp	loc_62B8C06A
sub_62B8C02C	endp

; ---------------------------------------------------------------------------
		align 4

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_62B8C0F8	proc near		; DATA XREF: sub_62B8BF54+A8o

Src		= dword	ptr -68h
var_64		= dword	ptr -64h
var_60		= dword	ptr -60h
var_5C		= dword	ptr -5Ch
var_58		= dword	ptr -58h
var_54		= dword	ptr -54h
var_50		= dword	ptr -50h
var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_3C		= dword	ptr -3Ch
var_2C		= dword	ptr -2Ch
var_1C		= dword	ptr -1Ch
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		sub	esp, 5Ch
		mov	eax, [ebp+arg_4]
		mov	esi, [ebp+arg_8]
		mov	ebx, [ebp+arg_C]
		test	eax, eax
		jz	loc_62B8C19C
		mov	edx, [ebx+64h]
		test	edx, edx
		jz	short loc_62B8C194
		mov	edi, [ebx+68h]
		mov	esi, [ebx+74h]
		mov	ecx, [ebx+60h]
		mov	[ebp+var_2C], ecx
		mov	ecx, [ebx+0Ch]
		mov	[ebp+var_1C], ecx
		cmp	eax, 2
		jz	loc_62B8C1E0
		cmp	eax, 3
		setz	al
		movzx	eax, al
		lea	eax, ds:1[eax*4]

loc_62B8C144:				; CODE XREF: sub_62B8C0F8+EAj
		mov	[esp+68h+var_3C], edi
		mov	[esp+68h+var_40], esi
		mov	ecx, [ebp+var_2C]
		mov	[esp+68h+var_44], ecx
		mov	ecx, [ebp+var_1C]
		mov	[esp+68h+var_48], ecx
		mov	[esp+68h+var_50], 0
		mov	[esp+68h+var_4C], 0
		mov	[esp+68h+var_58], 0
		mov	[esp+68h+var_54], 0
		mov	[esp+68h+var_5C], eax
		mov	[esp+68h+var_60], 7
		mov	eax, [ebx+8]
		mov	[esp+68h+var_64], eax
		mov	eax, [ebx]
		mov	[esp+68h+Src], eax
		call	edx

loc_62B8C194:				; CODE XREF: sub_62B8C0F8+1Fj
					; sub_62B8C0F8+127j
		add	esp, 5Ch
		pop	ebx
		pop	esi
		pop	edi
		leave
		retn
; ---------------------------------------------------------------------------

loc_62B8C19C:				; CODE XREF: sub_62B8C0F8+14j
		mov	eax, [esi]
		mov	eax, [eax]
		mov	[esp+68h+Src], eax ; Src
		call	_strdup
		mov	[ebx+74h], eax
		mov	eax, [esi+8]
		mov	eax, [eax]
		mov	edx, [eax+0Ch]
		mov	eax, [eax+8]
		mov	[ebx+98h], eax
		mov	[ebx+9Ch], edx
		mov	edi, [ebx+78h]
		test	edi, edi
		jz	short loc_62B8C1E8

loc_62B8C1C9:				; CODE XREF: sub_62B8C0F8+F5j
		mov	[ebp+arg_4], ebx
		mov	[ebp+arg_0], 0
		add	esp, 5Ch
		pop	ebx
		pop	esi
		pop	edi
		leave
		jmp	sub_62B8C02C
; ---------------------------------------------------------------------------
		align 10h

loc_62B8C1E0:				; CODE XREF: sub_62B8C0F8+36j
		mov	al, 4
		jmp	loc_62B8C144
; ---------------------------------------------------------------------------
		align 4

loc_62B8C1E8:				; CODE XREF: sub_62B8C0F8+CFj
		mov	eax, [ebx+6Ch]
		test	eax, eax
		jz	short loc_62B8C1C9
		mov	edx, [ebx+70h]
		mov	[esp+68h+var_50], edx
		mov	[esp+68h+var_54], ebx
		mov	[esp+68h+var_58], offset sub_62B8C02C
		mov	edx, [esi]
		mov	edx, [edx]
		mov	[esp+68h+var_5C], edx
		mov	edx, [ebx+60h]
		mov	[esp+68h+var_60], edx
		mov	edx, [ebx+8]
		mov	[esp+68h+var_64], edx
		mov	edx, [ebx]
		mov	[esp+68h+Src], edx
		call	eax
		jmp	loc_62B8C194
sub_62B8C0F8	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_62B8C224	proc near		; DATA XREF: sub_62B8C02C+50o

var_268		= dword	ptr -268h
var_264		= dword	ptr -264h
var_260		= dword	ptr -260h
var_25C		= dword	ptr -25Ch
var_258		= dword	ptr -258h
var_254		= dword	ptr -254h
var_250		= dword	ptr -250h
var_24C		= dword	ptr -24Ch
var_248		= dword	ptr -248h
var_244		= dword	ptr -244h
var_240		= dword	ptr -240h
var_23C		= dword	ptr -23Ch
var_22C		= dword	ptr -22Ch
var_21C		= dword	ptr -21Ch
var_218		= byte ptr -218h
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		sub	esp, 25Ch
		mov	eax, [ebp+arg_4]
		mov	ebx, [ebp+arg_C]
		test	eax, eax
		jz	loc_62B8C2DC
		mov	edx, [ebx+64h]
		test	edx, edx
		jz	loc_62B8C2D0
		mov	edi, [ebx+68h]
		mov	esi, [ebx+74h]
		mov	ecx, [ebx+60h]
		mov	[ebp+var_22C], ecx
		mov	ecx, [ebx+0Ch]
		mov	[ebp+var_21C], ecx
		cmp	eax, 2
		jz	loc_62B8C3F4
		cmp	eax, 3
		setz	al
		movzx	eax, al
		lea	eax, ds:1[eax*4]

loc_62B8C27A:				; CODE XREF: sub_62B8C224+1D2j
		mov	[esp+268h+var_23C], edi
		mov	[esp+268h+var_240], esi
		mov	ecx, [ebp+var_22C]
		mov	[esp+268h+var_244], ecx
		mov	ecx, [ebp+var_21C]
		mov	[esp+268h+var_248], ecx
		mov	[esp+268h+var_250], 0
		mov	[esp+268h+var_24C], 0
		mov	[esp+268h+var_258], 0
		mov	[esp+268h+var_254], 0
		mov	[esp+268h+var_25C], eax
		mov	[esp+268h+var_260], 7
		mov	eax, [ebx+8]
		mov	[esp+268h+var_264], eax
		mov	eax, [ebx]
		mov	[esp+268h+var_268], eax
		call	edx

loc_62B8C2D0:				; CODE XREF: sub_62B8C224+1Fj
					; sub_62B8C224+15Dj ...
		add	esp, 25Ch
		pop	ebx
		pop	esi
		pop	edi
		leave
		retn
; ---------------------------------------------------------------------------
		align 4

loc_62B8C2DC:				; CODE XREF: sub_62B8C224+14j
		lea	esi, [ebp+var_218]
		mov	ecx, 200h
		xor	eax, eax
		mov	edi, esi
		rep stosb
		mov	edx, [ebx+74h]
		mov	eax, [ebx+78h]
		test	eax, eax
		jz	loc_62B8C49C

loc_62B8C2FB:				; CODE XREF: sub_62B8C224+27Dj
		mov	[esp+268h+var_258], edx
		mov	[esp+268h+var_25C], eax
		mov	[esp+268h+var_260], offset aSS ; "%s%s"
		mov	[esp+268h+var_264], 1FFh
		mov	[esp+268h+var_268], esi
		call	silc_snprintf
		mov	[esp+268h+var_264], 502h
		mov	[esp+268h+var_268], esi
		call	silc_file_open
		mov	[ebx+0A8h], eax
		test	eax, eax
		js	loc_62B8C3FC
		mov	eax, [ebp+arg_8]
		mov	[ebx+8Ch], eax
		mov	[esp+268h+var_250], ebx
		mov	[esp+268h+var_254], offset sub_62B8C4A8
		mov	[esp+268h+var_258], 0FBFFh
		mov	eax, [ebx+0A0h]
		mov	edx, [ebx+0A4h]
		mov	[esp+268h+var_260], eax
		mov	[esp+268h+var_25C], edx
		mov	edx, [ebp+arg_8]
		mov	[esp+268h+var_264], edx
		mov	eax, [ebp+arg_0]
		mov	[esp+268h+var_268], eax
		call	silc_sftp_read
		mov	eax, [ebx+64h]
		test	eax, eax
		jz	loc_62B8C2D0
		mov	edx, [ebx+68h]
		mov	[esp+268h+var_23C], edx
		mov	edx, [ebx+74h]
		mov	[esp+268h+var_240], edx
		mov	edx, [ebx+60h]
		mov	[esp+268h+var_244], edx
		mov	edx, [ebx+0Ch]
		mov	[esp+268h+var_248], edx
		mov	edx, [ebx+98h]
		mov	ecx, [ebx+9Ch]
		mov	[esp+268h+var_250], edx
		mov	[esp+268h+var_24C], ecx
		mov	edx, [ebx+0A0h]
		mov	ecx, [ebx+0A4h]
		mov	[esp+268h+var_258], edx
		mov	[esp+268h+var_254], ecx
		mov	[esp+268h+var_25C], 0
		mov	[esp+268h+var_260], 2

loc_62B8C3DB:				; CODE XREF: sub_62B8C224+271j
		mov	edx, [ebx+8]
		mov	[esp+268h+var_264], edx
		mov	edx, [ebx]
		mov	[esp+268h+var_268], edx
		call	eax
		add	esp, 25Ch
		pop	ebx
		pop	esi
		pop	edi
		leave
		retn
; ---------------------------------------------------------------------------

loc_62B8C3F4:				; CODE XREF: sub_62B8C224+40j
		mov	al, 4
		jmp	loc_62B8C27A
; ---------------------------------------------------------------------------
		align 4

loc_62B8C3FC:				; CODE XREF: sub_62B8C224+10Fj
		mov	eax, [ebx]
		mov	eax, [eax+18h]
		mov	eax, [eax+48h]
		mov	esi, [eax]
		call	_errno
		mov	eax, [eax]
		mov	[esp+268h+var_268], eax	; int
		call	strerror
		mov	[esp+268h+var_254], eax
		mov	eax, [ebx+74h]
		mov	[esp+268h+var_258], eax
		mov	[esp+268h+var_25C], offset aFileSOpenFaile ; "File `%s' open failed: %s"
		mov	[esp+268h+var_260], 2
		mov	eax, [ebx+8]
		mov	[esp+268h+var_264], eax
		mov	eax, [ebx]
		mov	[esp+268h+var_268], eax
		call	esi
		mov	eax, [ebx+64h]
		test	eax, eax
		jz	loc_62B8C2D0
		mov	edx, [ebx+68h]
		mov	[esp+268h+var_23C], edx
		mov	edx, [ebx+74h]
		mov	[esp+268h+var_240], edx
		mov	edx, [ebx+60h]
		mov	[esp+268h+var_244], edx
		mov	edx, [ebx+0Ch]
		mov	[esp+268h+var_248], edx
		mov	[esp+268h+var_250], 0
		mov	[esp+268h+var_24C], 0
		mov	[esp+268h+var_258], 0
		mov	[esp+268h+var_254], 0
		mov	[esp+268h+var_25C], 5
		mov	[esp+268h+var_260], 7
		jmp	loc_62B8C3DB
; ---------------------------------------------------------------------------
		align 4

loc_62B8C49C:				; CODE XREF: sub_62B8C224+D1j
		mov	eax, offset byte_62BA873B
		jmp	loc_62B8C2FB
sub_62B8C224	endp

; ---------------------------------------------------------------------------
		align 4

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_62B8C4A8	proc near		; DATA XREF: sub_62B8C224+122o
					; sub_62B8C4A8+12Ao

var_68		= dword	ptr -68h
var_64		= dword	ptr -64h
var_60		= dword	ptr -60h
var_5C		= dword	ptr -5Ch
var_58		= dword	ptr -58h
var_54		= dword	ptr -54h
var_50		= dword	ptr -50h
var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_3C		= dword	ptr -3Ch
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h
arg_10		= dword	ptr  18h

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		sub	esp, 5Ch
		mov	esi, [ebp+arg_0]
		mov	eax, [ebp+arg_4]
		mov	ecx, [ebp+arg_8]
		mov	edi, [ebp+arg_C]
		mov	ebx, [ebp+arg_10]
		cmp	eax, 1
		jz	loc_62B8C55D
		test	eax, eax
		jz	loc_62B8C5A0
		mov	edx, [ebx+64h]
		test	edx, edx
		jz	loc_62B8C55D
		mov	edi, [ebx+68h]
		mov	ecx, [ebx+74h]
		mov	[ebp+var_2C], ecx
		mov	ecx, [ebx+60h]
		mov	[ebp+var_24], ecx
		mov	ecx, [ebx+0Ch]
		mov	[ebp+var_20], ecx
		cmp	eax, 2
		jz	loc_62B8C68C
		cmp	eax, 3
		setz	al
		movzx	eax, al
		lea	eax, ds:1[eax*4]

loc_62B8C50A:				; CODE XREF: sub_62B8C4A8+1E6j
		mov	[esp+68h+var_3C], edi
		mov	ecx, [ebp+var_2C]
		mov	[esp+68h+var_40], ecx
		mov	ecx, [ebp+var_24]
		mov	[esp+68h+var_44], ecx
		mov	ecx, [ebp+var_20]
		mov	[esp+68h+var_48], ecx
		mov	[esp+68h+var_50], 0
		mov	[esp+68h+var_4C], 0
		mov	[esp+68h+var_58], 0
		mov	[esp+68h+var_54], 0
		mov	[esp+68h+var_5C], eax
		mov	[esp+68h+var_60], 7
		mov	eax, [ebx+8]
		mov	[esp+68h+var_64], eax
		mov	eax, [ebx]
		mov	[esp+68h+var_68], eax
		call	edx

loc_62B8C55D:				; CODE XREF: sub_62B8C4A8+1Bj
					; sub_62B8C4A8+2Ej
		mov	[esp+68h+var_5C], 0
		mov	[esp+68h+var_60], 0
		mov	eax, [ebx+8Ch]
		mov	[esp+68h+var_64], eax
		mov	[esp+68h+var_68], esi
		call	silc_sftp_close
		mov	dword ptr [ebx+8Ch], 0
		mov	eax, [ebx+0A8h]
		mov	[ebp+arg_0], eax
		add	esp, 5Ch
		pop	ebx
		pop	esi
		pop	edi
		leave
		jmp	silc_file_close
; ---------------------------------------------------------------------------
		align 10h

loc_62B8C5A0:				; CODE XREF: sub_62B8C4A8+23j
		mov	[ebp+var_20], edi
		mov	[ebp+var_1C], 0
		mov	eax, [ebx+0A0h]
		mov	edx, [ebx+0A4h]
		add	[ebp+var_20], eax
		adc	[ebp+var_1C], edx
		mov	eax, [ebp+var_20]
		mov	edx, [ebp+var_1C]
		mov	[ebx+0A0h], eax
		mov	[ebx+0A4h], edx
		mov	[esp+68h+var_50], ebx
		mov	[esp+68h+var_54], offset sub_62B8C4A8
		mov	[esp+68h+var_58], 0FBFFh
		mov	[esp+68h+var_60], eax
		mov	[esp+68h+var_5C], edx
		mov	eax, [ebx+8Ch]
		mov	[esp+68h+var_64], eax
		mov	[esp+68h+var_68], esi
		mov	[ebp+var_28], ecx
		call	silc_sftp_read
		mov	[esp+68h+var_60], edi
		mov	ecx, [ebp+var_28]
		mov	[esp+68h+var_64], ecx
		mov	eax, [ebx+0A8h]
		mov	[esp+68h+var_68], eax
		call	silc_file_write
		mov	eax, [ebx+64h]
		test	eax, eax
		jz	short loc_62B8C681
		mov	edx, [ebx+68h]
		mov	[esp+68h+var_3C], edx
		mov	edx, [ebx+74h]
		mov	[esp+68h+var_40], edx
		mov	edx, [ebx+60h]
		mov	[esp+68h+var_44], edx
		mov	edx, [ebx+0Ch]
		mov	[esp+68h+var_48], edx
		mov	edx, [ebx+98h]
		mov	ecx, [ebx+9Ch]
		mov	[esp+68h+var_50], edx
		mov	[esp+68h+var_4C], ecx
		mov	edx, [ebx+0A0h]
		mov	ecx, [ebx+0A4h]
		mov	[esp+68h+var_58], edx
		mov	[esp+68h+var_54], ecx
		mov	[esp+68h+var_5C], 0
		mov	[esp+68h+var_60], 2
		mov	edx, [ebx+8]
		mov	[esp+68h+var_64], edx
		mov	edx, [ebx]
		mov	[esp+68h+var_68], edx
		call	eax

loc_62B8C681:				; CODE XREF: sub_62B8C4A8+175j
		add	esp, 5Ch
		pop	ebx
		pop	esi
		pop	edi
		leave
		retn
; ---------------------------------------------------------------------------
		align 4

loc_62B8C68C:				; CODE XREF: sub_62B8C4A8+4Cj
		mov	al, 4
		jmp	loc_62B8C50A
sub_62B8C4A8	endp

; ---------------------------------------------------------------------------
		align 4

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_62B8C694	proc near		; DATA XREF: sub_62B8D2A0+C8o

var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		sub	esp, 18h
		mov	edx, [ebp+arg_4]
		mov	eax, [ebp+arg_8]
		test	edx, edx
		jnz	short loc_62B8C6B4
		mov	edx, [eax+4]
		cmp	[eax+8], edx
		jz	short loc_62B8C6B0
		inc	edx
		mov	[eax+4], edx

loc_62B8C6B0:				; CODE XREF: sub_62B8C694+16j
		mov	al, 1
		leave
		retn
; ---------------------------------------------------------------------------

loc_62B8C6B4:				; CODE XREF: sub_62B8C694+Ej
		dec	edx
		jz	short loc_62B8C6BC
		xor	eax, eax
		leave
		retn
; ---------------------------------------------------------------------------
		align 4

loc_62B8C6BC:				; CODE XREF: sub_62B8C694+21j
		mov	[esp+18h+var_C], 1Dh
		mov	[esp+18h+var_10], 1
		mov	[esp+18h+var_14], 1
		mov	[esp+18h+var_18], eax
		call	silc_buffer_format
		not	eax
		shr	eax, 1Fh
		leave
		retn
sub_62B8C694	endp

; ---------------------------------------------------------------------------
		align 4

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_62B8C6E4	proc near		; DATA XREF: silc_client_ftp+270o

var_18		= dword	ptr -18h
arg_0		= dword	ptr  8
arg_C		= dword	ptr  14h
arg_10		= dword	ptr  18h

		push	ebp
		mov	ebp, esp
		push	esi
		push	ebx
		sub	esp, 10h
		mov	esi, [ebp+arg_C]
		mov	ebx, [ebp+arg_10]
		mov	[esp+18h+var_18], ebx
		call	silc_fsm_get_state_context
		test	esi, esi
		jz	short loc_62B8C724
		mov	al, [ebx+28h]
		mov	dl, al
		and	edx, 0FFFFFFFBh
		mov	[ebx+28h], dl
		test	al, 4
		jz	short loc_62B8C714
		add	esp, 10h
		pop	ebx
		pop	esi
		leave
		retn
; ---------------------------------------------------------------------------

loc_62B8C714:				; CODE XREF: sub_62B8C6E4+27j
		mov	[ebp+arg_0], ebx
		add	esp, 10h
		pop	ebx
		pop	esi
		leave
		jmp	silc_fsm_continue
; ---------------------------------------------------------------------------
		align 4

loc_62B8C724:				; CODE XREF: sub_62B8C6E4+18j
		mov	[esp+18h+var_18], eax
		call	silc_packet_free
		mov	[ebp+arg_0], ebx
		add	esp, 10h
		pop	ebx
		pop	esi
		leave
		jmp	silc_fsm_finish
sub_62B8C6E4	endp

; ---------------------------------------------------------------------------
		align 4
; Exported entry 114. silc_client_file_close

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public silc_client_file_close
silc_client_file_close proc near

var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		sub	esp, 3Ch
		mov	edi, [ebp+arg_0]
		mov	esi, [ebp+arg_4]
		mov	ecx, [ebp+arg_8]
		test	edi, edi
		jz	loc_62B8C88E
		test	esi, esi
		jz	loc_62B8C88E
		mov	eax, [edi+18h]
		mov	eax, [eax+6Ch]
		mov	edx, [eax]
		mov	[eax+8], edx
		and	byte ptr [eax+10h], 0FDh
		mov	dword ptr [eax+18h], 0
		mov	dword ptr [eax+14h], 0
		mov	eax, [edi+18h]
		mov	eax, [eax+6Ch]
		jmp	short loc_62B8C79C
; ---------------------------------------------------------------------------
		align 4

loc_62B8C784:				; CODE XREF: silc_client_file_close+71j
		movzx	ebx, word ptr [eax+0Eh]
		mov	ebx, [edx+ebx]

loc_62B8C78B:				; CODE XREF: silc_client_file_close+7Aj
		mov	[eax+8], ebx
		mov	[eax+14h], edx
		mov	ebx, [edx]
		test	ebx, ebx
		jz	short loc_62B8C7BF
		cmp	[ebx+60h], ecx
		jz	short loc_62B8C7CC

loc_62B8C79C:				; CODE XREF: silc_client_file_close+45j
		mov	edx, [eax+14h]
		mov	[eax+18h], edx
		mov	edx, [eax+8]
		test	edx, edx
		jz	short loc_62B8C7B8
		test	byte ptr [eax+10h], 2
		jnz	short loc_62B8C784
		movzx	ebx, word ptr [eax+0Ch]
		mov	ebx, [edx+ebx]
		jmp	short loc_62B8C78B
; ---------------------------------------------------------------------------

loc_62B8C7B8:				; CODE XREF: silc_client_file_close+6Bj
		mov	dword ptr [eax+14h], 0

loc_62B8C7BF:				; CODE XREF: silc_client_file_close+59j
		mov	eax, 2

loc_62B8C7C4:				; CODE XREF: silc_client_file_close+157j
		add	esp, 3Ch
		pop	ebx
		pop	esi
		pop	edi
		leave
		retn
; ---------------------------------------------------------------------------

loc_62B8C7CC:				; CODE XREF: silc_client_file_close+5Ej
		mov	eax, [ebx+64h]
		test	eax, eax
		jz	short loc_62B8C831
		mov	edx, [ebx+68h]
		mov	[esp+48h+var_1C], edx
		mov	edx, [ebx+74h]
		mov	[esp+48h+var_20], edx
		mov	[esp+48h+var_24], ecx
		mov	edx, [ebx+0Ch]
		mov	[esp+48h+var_28], edx
		mov	[esp+48h+var_30], 0
		mov	[esp+48h+var_2C], 0
		mov	[esp+48h+var_38], 0
		mov	[esp+48h+var_34], 0
		mov	[esp+48h+var_3C], 0
		mov	[esp+48h+var_40], 5
		mov	edx, [ebx+8]
		mov	[esp+48h+var_44], edx
		mov	edx, [ebx]
		mov	[esp+48h+var_48], edx
		call	eax
		mov	dword ptr [ebx+64h], 0

loc_62B8C831:				; CODE XREF: silc_client_file_close+95j
		mov	[esp+48h+var_44], ebx
		mov	eax, [edi+0Ch]
		mov	[esp+48h+var_48], eax
		call	silc_schedule_task_del_by_context
		or	byte ptr [ebx+0ACh], 2
		mov	[esp+44h+var_2C], 1
		mov	[esp+44h+var_30], 1
		mov	[esp+44h+var_34], 0
		mov	[esp+44h+var_38], ebx
		mov	[esp+44h+var_3C], offset silc_client_file_close_final
		mov	[esp+44h+var_40], 0
		mov	eax, [esi+54h]
		mov	eax, [eax+0B4h]
		mov	[esp+44h+var_44], eax
		call	silc_schedule_task_add
		xor	eax, eax
		add	esp, 3Ch
		pop	ebx
		pop	esi
		pop	edi
		leave
		retn
; ---------------------------------------------------------------------------

loc_62B8C88E:				; CODE XREF: silc_client_file_close+14j
					; silc_client_file_close+1Cj
		mov	eax, 1
		jmp	loc_62B8C7C4
silc_client_file_close endp

; Exported entry 116. silc_client_file_receive

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl silc_client_file_receive(int, int, int, int, int,	int, int, char *, int, int, int)
		public silc_client_file_receive
silc_client_file_receive proc near

Src		= dword	ptr -68h
var_64		= dword	ptr -64h
var_60		= dword	ptr -60h
var_5C		= dword	ptr -5Ch
var_58		= dword	ptr -58h
var_54		= dword	ptr -54h
var_50		= dword	ptr -50h
var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h
arg_10		= dword	ptr  18h
arg_14		= dword	ptr  1Ch
arg_18		= dword	ptr  20h
arg_1C		= dword	ptr  24h
arg_20		= dword	ptr  28h
arg_24		= dword	ptr  2Ch
arg_28		= dword	ptr  30h

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		sub	esp, 5Ch
		mov	esi, [ebp+arg_0]
		mov	edi, [ebp+arg_4]
		mov	ecx, [ebp+arg_20]
		test	esi, esi
		jz	loc_62B8CB65
		test	edi, edi
		jz	loc_62B8CB65
		mov	eax, [esi+18h]
		mov	eax, [eax+6Ch]
		mov	edx, [eax]
		mov	[eax+8], edx
		and	byte ptr [eax+10h], 0FDh
		mov	dword ptr [eax+18h], 0
		mov	dword ptr [eax+14h], 0
		mov	eax, [esi+18h]
		mov	eax, [eax+6Ch]
		jmp	short loc_62B8C8F8
; ---------------------------------------------------------------------------
		align 10h

loc_62B8C8E0:				; CODE XREF: silc_client_file_receive+71j
		movzx	ebx, word ptr [eax+0Eh]
		mov	ebx, [edx+ebx]

loc_62B8C8E7:				; CODE XREF: silc_client_file_receive+7Aj
		mov	[eax+8], ebx
		mov	[eax+14h], edx
		mov	ebx, [edx]
		test	ebx, ebx
		jz	short loc_62B8C91B
		cmp	[ebx+60h], ecx
		jz	short loc_62B8C928

loc_62B8C8F8:				; CODE XREF: silc_client_file_receive+45j
		mov	edx, [eax+14h]
		mov	[eax+18h], edx
		mov	edx, [eax+8]
		test	edx, edx
		jz	short loc_62B8C914
		test	byte ptr [eax+10h], 2
		jnz	short loc_62B8C8E0
		movzx	ebx, word ptr [eax+0Ch]
		mov	ebx, [edx+ebx]
		jmp	short loc_62B8C8E7
; ---------------------------------------------------------------------------

loc_62B8C914:				; CODE XREF: silc_client_file_receive+6Bj
		mov	dword ptr [eax+14h], 0

loc_62B8C91B:				; CODE XREF: silc_client_file_receive+59j
		mov	eax, 2

loc_62B8C920:				; CODE XREF: silc_client_file_receive+240j
					; silc_client_file_receive+27Aj ...
		add	esp, 5Ch
		pop	ebx
		pop	esi
		pop	edi
		leave
		retn
; ---------------------------------------------------------------------------

loc_62B8C928:				; CODE XREF: silc_client_file_receive+5Ej
		mov	ecx, [ebx+80h]
		test	ecx, ecx
		jz	short loc_62B8C940

loc_62B8C932:				; CODE XREF: silc_client_file_receive+ADj
		mov	eax, 3
		add	esp, 5Ch
		pop	ebx
		pop	esi
		pop	edi
		leave
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_62B8C940:				; CODE XREF: silc_client_file_receive+98j
		mov	edx, [ebx+10h]
		test	edx, edx
		jnz	short loc_62B8C932
		mov	eax, [ebp+arg_14]
		mov	[ebx+64h], eax
		mov	eax, [ebp+arg_18]
		mov	[ebx+68h], eax
		mov	eax, [ebp+arg_24]
		mov	[ebx+6Ch], eax
		mov	eax, [ebp+arg_28]
		mov	[ebx+70h], eax
		mov	eax, [ebp+arg_1C]
		test	eax, eax
		jz	loc_62B8CB17
		mov	eax, [ebp+arg_1C]
		mov	[esp+68h+Src], eax ; Src
		call	_strdup

loc_62B8C975:				; CODE XREF: silc_client_file_receive+281j
		mov	[ebx+78h], eax
		mov	eax, [ebx+90h]
		test	eax, eax
		jz	short loc_62B8C991
		mov	edx, [ebx+94h]
		test	dx, dx
		jnz	loc_62B8CB1E

loc_62B8C991:				; CODE XREF: silc_client_file_receive+E8j
		mov	ecx, [ebp+arg_8]
		test	ecx, ecx
		jz	loc_62B8CB7A
		mov	eax, [ebp+arg_8]
		mov	edx, [eax+18h]
		test	edx, edx
		jz	loc_62B8CB6F

loc_62B8C9AA:				; CODE XREF: silc_client_file_receive+2DCj
		mov	[esp+68h+var_50], ebx
		mov	[esp+68h+var_54], offset sub_62B8D2A0
		mov	edx, [ebp+arg_10]
		mov	[esp+68h+var_58], edx
		mov	eax, [ebp+arg_C]
		mov	[esp+68h+var_5C], eax
		mov	edx, [ebp+arg_8]
		mov	[esp+68h+var_60], edx
		mov	eax, [edi+54h]
		mov	eax, [eax+0B4h]
		mov	[esp+68h+var_64], eax
		mov	[esp+68h+Src], esi
		call	silc_client_listener_add
		mov	[ebx+10h], eax
		test	eax, eax
		jz	loc_62B8CBC8
		mov	edx, [ebp+arg_8]
		mov	eax, [edx+1Ch]
		test	eax, eax
		jz	loc_62B8CBBD

loc_62B8C9F9:				; CODE XREF: silc_client_file_receive+32Bj
		mov	[esp+68h+Src], eax ; Src
		call	_strdup
		mov	[ebx+90h], eax
		mov	eax, [ebx+10h]
		mov	[esp+68h+Src], eax
		call	silc_client_listener_get_local_port
		mov	[ebx+94h], ax
		movzx	eax, ax
		mov	[esp+68h+var_60], eax
		mov	[esp+68h+var_64], 0
		mov	eax, [ebx+90h]
		mov	[esp+68h+Src], eax
		call	silc_key_agreement_payload_encode
		mov	edx, eax
		test	eax, eax
		jz	loc_62B8CBA0
		mov	ecx, [eax+4]
		mov	[esp+68h+var_30], 1Dh
		mov	eax, [eax+8]
		sub	eax, ecx
		mov	[esp+68h+var_34], eax
		mov	[esp+68h+var_38], ecx
		mov	[esp+68h+var_3C], 0Ch
		mov	[esp+68h+var_40], 1
		mov	[esp+68h+var_44], 1
		mov	[esp+68h+var_48], 0
		mov	[esp+68h+var_4C], 0
		mov	eax, [ebx+0Ch]
		add	eax, 38Ch
		mov	[esp+68h+var_50], eax
		mov	[esp+68h+var_54], 2
		mov	[esp+68h+var_58], 0
		mov	[esp+68h+var_5C], 0
		mov	[esp+68h+var_60], 0
		mov	[esp+68h+var_64], 1Bh
		mov	eax, [edi+3Ch]
		mov	[esp+68h+Src], eax
		mov	[ebp+var_20], edx
		call	silc_packet_send_va_ext
		mov	edx, [ebp+var_20]
		mov	eax, edx
		call	sub_62B8BE64
		mov	edx, [ebp+arg_8]
		mov	eax, [edx+30h]
		test	eax, eax
		jnz	short loc_62B8CADD

loc_62B8CAD6:				; CODE XREF: silc_client_file_receive+2BFj
		xor	eax, eax
		jmp	loc_62B8C920
; ---------------------------------------------------------------------------

loc_62B8CADD:				; CODE XREF: silc_client_file_receive+23Cj
		mov	[esp+68h+var_50], 1
		mov	[esp+68h+var_54], 0
		mov	[esp+68h+var_58], eax
		mov	[esp+68h+var_5C], ebx
		mov	[esp+68h+var_60], offset silc_client_ftp_timeout
		mov	[esp+68h+var_64], 0
		mov	eax, [esi+0Ch]
		mov	[esp+68h+Src], eax
		call	silc_schedule_task_add
		xor	eax, eax
		jmp	loc_62B8C920
; ---------------------------------------------------------------------------

loc_62B8CB17:				; CODE XREF: silc_client_file_receive+CCj
		xor	eax, eax
		jmp	loc_62B8C975
; ---------------------------------------------------------------------------

loc_62B8CB1E:				; CODE XREF: silc_client_file_receive+F3j
		mov	[esp+68h+var_4C], ebx ;	int
		mov	[esp+68h+var_50], offset sub_62B8D2A0 ;	int
		movzx	edx, dx
		mov	[esp+68h+var_54], edx ;	int
		mov	[esp+68h+var_58], eax ;	char *
		mov	edx, [ebp+arg_10]
		mov	[esp+68h+var_5C], edx ;	int
		mov	eax, [ebp+arg_C]
		mov	[esp+68h+var_60], eax ;	int
		mov	edx, [ebp+arg_8]
		mov	[esp+68h+var_64], edx ;	int
		mov	[esp+68h+Src], esi ; int
		call	silc_client_connect_to_client
		mov	[ebx+14h], eax
		test	eax, eax
		jnz	loc_62B8CAD6

loc_62B8CB5D:				; CODE XREF: silc_client_file_receive+306j
		mov	[esp+68h+Src], ebx
		call	silc_free

loc_62B8CB65:				; CODE XREF: silc_client_file_receive+14j
					; silc_client_file_receive+1Cj
		mov	eax, 1
		jmp	loc_62B8C920
; ---------------------------------------------------------------------------

loc_62B8CB6F:				; CODE XREF: silc_client_file_receive+10Cj
		mov	eax, [eax+1Ch]
		test	eax, eax
		jnz	loc_62B8C9AA

loc_62B8CB7A:				; CODE XREF: silc_client_file_receive+FEj
		mov	eax, [ebx]
		mov	edx, [eax+18h]
		mov	edx, [edx+48h]
		mov	[esp+68h+var_5C], offset aCannotCreateLi ; "Cannot create listener for file transfe"...
		mov	[esp+68h+var_60], 2
		mov	ecx, [ebx+8]
		mov	[esp+68h+var_64], ecx
		mov	[esp+68h+Src], eax
		call	dword ptr [edx]
		jmp	short loc_62B8CB5D
; ---------------------------------------------------------------------------

loc_62B8CBA0:				; CODE XREF: silc_client_file_receive+1A2j
		mov	eax, [ebx+10h]
		mov	[esp+68h+Src], eax
		call	silc_client_listener_free
		mov	[esp+68h+Src], ebx
		call	silc_free
		mov	eax, 9
		jmp	loc_62B8C920
; ---------------------------------------------------------------------------

loc_62B8CBBD:				; CODE XREF: silc_client_file_receive+15Bj
		mov	edx, [ebp+arg_8]
		mov	eax, [edx+18h]
		jmp	loc_62B8C9F9
; ---------------------------------------------------------------------------

loc_62B8CBC8:				; CODE XREF: silc_client_file_receive+14Dj
		mov	eax, [esi+18h]
		mov	eax, [eax+48h]
		mov	eax, [eax]
		mov	[ebp+var_1C], eax
		call	_errno
		mov	eax, [eax]
		mov	[esp+68h+Src], eax ; int
		call	strerror
		mov	[esp+68h+var_58], eax
		mov	[esp+68h+var_5C], offset aCannotCreate_0 ; "Cannot create listener for file transfe"...
		mov	[esp+68h+var_60], 2
		mov	[esp+68h+var_64], edi
		mov	[esp+68h+Src], esi
		call	[ebp+var_1C]
		mov	[esp+68h+Src], ebx
		call	silc_free
		mov	eax, 9
		jmp	loc_62B8C920
silc_client_file_receive endp

; ---------------------------------------------------------------------------
		align 4
; Exported entry 117. silc_client_file_send

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl silc_client_file_send(int, int, int, int,	int, int, int, int, char *, int)
		public silc_client_file_send
silc_client_file_send proc near

Src		= dword	ptr -68h
Str2		= dword	ptr -64h
var_60		= dword	ptr -60h
var_5C		= dword	ptr -5Ch
var_58		= dword	ptr -58h
var_54		= dword	ptr -54h
var_50		= dword	ptr -50h
var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
Str		= dword	ptr -1Ch
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h
arg_10		= dword	ptr  18h
arg_14		= dword	ptr  1Ch
arg_18		= dword	ptr  20h
arg_1C		= dword	ptr  24h
arg_20		= dword	ptr  28h
arg_24		= dword	ptr  2Ch

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		sub	esp, 5Ch
		mov	edx, [ebp+arg_0]
		test	edx, edx
		jz	loc_62B8CFE0
		mov	eax, [ebp+arg_8]
		test	eax, eax
		jz	loc_62B8CFE0
		mov	edi, [ebp+arg_20]
		test	edi, edi
		jz	loc_62B8CFE0
		mov	esi, [ebp+arg_C]
		test	esi, esi
		jz	loc_62B8CFE0
		mov	ebx, [ebp+arg_10]
		test	ebx, ebx
		jz	loc_62B8CFE0
		mov	ecx, [ebp+arg_14]
		test	ecx, ecx
		jz	loc_62B8CFE0
		mov	edx, [ebp+arg_0]
		mov	eax, [edx+18h]
		mov	eax, [eax+6Ch]
		mov	edx, [eax]
		mov	[eax+8], edx
		and	byte ptr [eax+10h], 0FDh
		mov	dword ptr [eax+18h], 0
		mov	dword ptr [eax+14h], 0
		mov	eax, [ebp+arg_0]
		mov	esi, [eax+18h]
		jmp	short loc_62B8CCA6
; ---------------------------------------------------------------------------
		align 4

loc_62B8CC88:				; CODE XREF: silc_client_file_send+A6j
		movzx	ecx, word ptr [eax+0Eh]
		mov	ecx, [edx+ecx]

loc_62B8CC8F:				; CODE XREF: silc_client_file_send+AFj
		mov	[eax+8], ecx
		mov	[eax+14h], edx
		mov	ebx, [edx]
		test	ebx, ebx
		jz	short loc_62B8CCCF
		mov	eax, [ebx+74h]
		test	eax, eax
		jnz	loc_62B8CFB4

loc_62B8CCA6:				; CODE XREF: silc_client_file_send+71j
					; silc_client_file_send+3B1j ...
		mov	eax, [esi+6Ch]
		mov	edx, [eax+14h]
		mov	[eax+18h], edx
		mov	edx, [eax+8]
		test	edx, edx
		jz	short loc_62B8CCC8
		test	byte ptr [eax+10h], 2
		jnz	short loc_62B8CC88
		movzx	ecx, word ptr [eax+0Ch]
		mov	ecx, [edx+ecx]
		jmp	short loc_62B8CC8F
; ---------------------------------------------------------------------------
		align 4

loc_62B8CCC8:				; CODE XREF: silc_client_file_send+A0j
		mov	dword ptr [eax+14h], 0

loc_62B8CCCF:				; CODE XREF: silc_client_file_send+85j
		mov	[esp+68h+Str2],	0
		mov	edx, [ebp+arg_20]
		mov	[esp+68h+Src], edx
		call	silc_file_open
		test	eax, eax
		js	loc_62B8CFF0
		mov	[esp+68h+Src], eax
		call	silc_file_close
		mov	[esp+68h+Str2],	0B0h
		mov	[esp+68h+Src], 1
		call	silc_calloc
		mov	ebx, eax
		test	eax, eax
		jz	loc_62B8CFE0
		mov	eax, [ebp+arg_0]
		mov	edx, [eax+18h]
		mov	eax, [edx+80h]
		inc	eax
		mov	[edx+80h], ax
		movzx	eax, ax
		mov	[ebx+60h], eax
		mov	edx, [ebp+arg_0]
		mov	[ebx], edx
		mov	eax, [ebp+arg_4]
		mov	[ebx+4], eax
		or	byte ptr [ebx+0ACh], 1
		mov	edx, [ebp+arg_8]
		mov	[esp+68h+var_60], edx
		mov	[esp+68h+Str2],	eax
		mov	eax, [ebp+arg_0]
		mov	[esp+68h+Src], eax
		call	silc_client_ref_client
		mov	[ebx+0Ch], eax
		mov	eax, [ebp+arg_18]
		mov	[ebx+64h], eax
		mov	eax, [ebp+arg_1C]
		mov	[ebx+68h], eax
		mov	edx, [ebp+arg_20]
		mov	[esp+68h+Src], edx ; Src
		call	_strdup
		mov	[ebx+74h], eax
		lea	edi, [ebx+18h]
		mov	ecx, 10h
		mov	esi, [ebp+arg_C]
		rep movsd
		mov	eax, [ebp+arg_10]
		mov	[ebx+58h], eax
		mov	edx, [ebp+arg_14]
		mov	[ebx+5Ch], edx
		mov	eax, [ebp+arg_20]
		mov	[esp+68h+var_60], eax
		mov	[esp+68h+Str2],	offset aFileS ;	"file://%s"
		lea	eax, [ebp+Str]
		mov	[esp+68h+Src], eax
		call	silc_asprintf
		test	eax, eax
		js	loc_62B8D00C
		mov	esi, [ebp+Str]
		mov	[esp+68h+Str2],	2Fh ; Ch
		mov	[esp+68h+Src], esi ; Str
		call	strrchr
		test	eax, eax
		jz	short loc_62B8CDC4
		lea	esi, [eax+1]

loc_62B8CDC4:				; CODE XREF: silc_client_file_send+1ABj
		mov	[esp+68h+Src], 5
		call	silc_sftp_fs_memory_alloc
		mov	[ebx+84h], eax
		mov	edx, [ebp+Str]
		mov	[esp+68h+var_58], edx
		mov	[esp+68h+var_5C], esi
		mov	[esp+68h+var_60], 1
		mov	[esp+68h+Str2],	0
		mov	[esp+68h+Src], eax
		call	silc_sftp_fs_memory_add_file
		mov	edx, [ebp+arg_20]
		mov	[esp+68h+Src], edx
		call	silc_file_size
		mov	[ebx+98h], eax
		mov	[ebx+9Ch], edx
		mov	eax, [ebp+arg_C]
		mov	edx, [eax+18h]
		test	edx, edx
		jz	loc_62B8D021

loc_62B8CE1E:				; CODE XREF: silc_client_file_send+412j
		mov	[esp+68h+var_50], ebx
		mov	[esp+68h+var_54], offset sub_62B8D2A0
		mov	edx, [ebp+arg_14]
		mov	[esp+68h+var_58], edx
		mov	eax, [ebp+arg_10]
		mov	[esp+68h+var_5C], eax
		mov	edx, [ebp+arg_C]
		mov	[esp+68h+var_60], edx
		mov	edx, [ebp+arg_4]
		mov	eax, [edx+54h]
		mov	eax, [eax+0B4h]
		mov	[esp+68h+Str2],	eax
		mov	eax, [ebp+arg_0]
		mov	[esp+68h+Src], eax
		call	silc_client_listener_add
		mov	[ebx+10h], eax
		test	eax, eax
		jz	loc_62B8D042
		mov	edx, [ebp+arg_C]
		mov	eax, [edx+1Ch]
		test	eax, eax
		jz	loc_62B8D037

loc_62B8CE73:				; CODE XREF: silc_client_file_send+429j
		mov	[esp+68h+Src], eax ; Src
		call	_strdup
		mov	[ebx+90h], eax
		mov	eax, [ebx+10h]
		mov	[esp+68h+Src], eax
		call	silc_client_listener_get_local_port
		mov	[ebx+94h], ax

loc_62B8CE93:				; CODE XREF: silc_client_file_send+41Ej
		movzx	eax, ax
		mov	[esp+68h+var_60], eax
		mov	[esp+68h+Str2],	0
		mov	eax, [ebx+90h]
		mov	[esp+68h+Src], eax
		call	silc_key_agreement_payload_encode
		mov	esi, eax
		test	eax, eax
		jz	loc_62B8CFFD
		mov	edx, [eax+4]
		mov	[esp+68h+var_30], 1Dh
		mov	eax, [eax+8]
		sub	eax, edx
		mov	[esp+68h+var_34], eax
		mov	[esp+68h+var_38], edx
		mov	[esp+68h+var_3C], 0Ch
		mov	[esp+68h+var_40], 1
		mov	[esp+68h+var_44], 1
		mov	[esp+68h+var_48], 0
		mov	[esp+68h+var_4C], 0
		mov	eax, [ebp+arg_8]
		add	eax, 38Ch
		mov	[esp+68h+var_50], eax
		mov	[esp+68h+var_54], 2
		mov	[esp+68h+var_58], 0
		mov	[esp+68h+var_5C], 0
		mov	[esp+68h+var_60], 0
		mov	[esp+68h+Str2],	1Bh
		mov	edx, [ebp+arg_4]
		mov	eax, [edx+3Ch]
		mov	[esp+68h+Src], eax
		call	silc_packet_send_va_ext
		mov	eax, esi
		call	sub_62B8BE64
		mov	eax, [ebp+Str]
		mov	[esp+68h+Src], eax
		call	silc_free
		mov	edx, [ebp+arg_0]
		mov	eax, [edx+18h]
		mov	eax, [eax+6Ch]
		mov	edx, ebx
		call	sub_62B8BA28
		mov	esi, [ebp+arg_24]
		test	esi, esi
		jz	short loc_62B8CF6D
		mov	eax, [ebx+60h]
		mov	edx, [ebp+arg_24]
		mov	[edx], eax

loc_62B8CF6D:				; CODE XREF: silc_client_file_send+34Fj
		mov	edx, [ebp+arg_C]
		mov	eax, [edx+30h]
		test	eax, eax
		jz	short loc_62B8CFE5
		mov	[esp+68h+var_50], 1
		mov	[esp+68h+var_54], 0
		mov	[esp+68h+var_58], eax
		mov	[esp+68h+var_5C], ebx
		mov	[esp+68h+var_60], offset silc_client_ftp_timeout
		mov	[esp+68h+Str2],	0
		mov	edx, [ebp+arg_0]
		mov	eax, [edx+0Ch]
		mov	[esp+68h+Src], eax
		call	silc_schedule_task_add
		xor	eax, eax
		jmp	short loc_62B8CFE5
; ---------------------------------------------------------------------------
		align 4

loc_62B8CFB4:				; CODE XREF: silc_client_file_send+8Cj
		mov	edx, [ebp+arg_20]
		mov	[esp+68h+Str2],	edx ; Str2
		mov	[esp+68h+Src], eax ; Str1
		call	strcmp
		test	eax, eax
		jnz	loc_62B8CCA6
		mov	eax, [ebp+arg_8]
		cmp	[ebx+0Ch], eax
		jnz	loc_62B8CCA6
		mov	eax, 3
		jmp	short loc_62B8CFE5
; ---------------------------------------------------------------------------
		align 10h

loc_62B8CFE0:				; CODE XREF: silc_client_file_send+Ej
					; silc_client_file_send+19j ...
		mov	eax, 1

loc_62B8CFE5:				; CODE XREF: silc_client_file_send+361j
					; silc_client_file_send+39Bj ...
		add	esp, 5Ch
		pop	ebx
		pop	esi
		pop	edi
		leave
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_62B8CFF0:				; CODE XREF: silc_client_file_send+D0j
		mov	eax, 4
		add	esp, 5Ch
		pop	ebx
		pop	esi
		pop	edi
		leave
		retn
; ---------------------------------------------------------------------------

loc_62B8CFFD:				; CODE XREF: silc_client_file_send+2A0j
		mov	eax, [ebx+10h]
		test	eax, eax
		jz	short loc_62B8D00C
		mov	[esp+68h+Src], eax
		call	silc_client_listener_free

loc_62B8D00C:				; CODE XREF: silc_client_file_send+190j
					; silc_client_file_send+3EEj
		mov	[esp+68h+Src], ebx
		call	silc_free
		mov	eax, 9
		add	esp, 5Ch
		pop	ebx
		pop	esi
		pop	edi
		leave
		retn
; ---------------------------------------------------------------------------

loc_62B8D021:				; CODE XREF: silc_client_file_send+204j
		mov	edi, [eax+1Ch]
		test	edi, edi
		jnz	loc_62B8CE1E
		mov	eax, [ebx+94h]
		jmp	loc_62B8CE93
; ---------------------------------------------------------------------------

loc_62B8D037:				; CODE XREF: silc_client_file_send+259j
		mov	edx, [ebp+arg_C]
		mov	eax, [edx+18h]
		jmp	loc_62B8CE73
; ---------------------------------------------------------------------------

loc_62B8D042:				; CODE XREF: silc_client_file_send+24Bj
		mov	edx, [ebp+arg_0]
		mov	eax, [edx+18h]
		mov	eax, [eax+48h]
		mov	esi, [eax]
		call	_errno
		mov	eax, [eax]
		mov	[esp+68h+Src], eax ; int
		call	strerror
		mov	[esp+68h+var_58], eax
		mov	[esp+68h+var_5C], offset aCannotCreate_0 ; "Cannot create listener for file transfe"...
		mov	[esp+68h+var_60], 2
		mov	eax, [ebp+arg_4]
		mov	[esp+68h+Str2],	eax
		mov	edx, [ebp+arg_0]
		mov	[esp+68h+Src], edx
		call	esi
		mov	[esp+68h+Src], ebx
		call	silc_free
		mov	eax, 9
		jmp	loc_62B8CFE5
silc_client_file_send endp

; ---------------------------------------------------------------------------
		align 4

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_62B8D094	proc near		; CODE XREF: sub_62B8D2A0+21Aj
					; silc_client_ftp_session_free_client:loc_62B8D604p ...

var_58		= dword	ptr -58h
var_54		= dword	ptr -54h
var_50		= dword	ptr -50h
var_3C		= dword	ptr -3Ch
var_2C		= dword	ptr -2Ch
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		sub	esp, 4Ch
		mov	ebx, eax
		mov	[esp+58h+var_54], eax
		mov	eax, [eax]
		mov	eax, [eax+0Ch]
		mov	[esp+58h+var_58], eax
		call	silc_schedule_task_del_by_context
		mov	eax, [ebx]
		mov	eax, [eax+18h]
		mov	ecx, [eax+6Ch]
		mov	esi, [ecx]
		mov	eax, esi
		mov	[ecx+8], esi
		and	byte ptr [ecx+10h], 0FDh
		xor	edi, edi
		test	eax, eax
		jz	short loc_62B8D0EE
		lea	esi, [esi+0]

loc_62B8D0CC:				; CODE XREF: sub_62B8D094+58j
		mov	edx, edi
		test	dl, dl
		jz	loc_62B8D1A8
		movzx	edx, word ptr [ecx+0Eh]
		mov	edx, [eax+edx]
		mov	[ecx+8], edx
		cmp	ebx, [eax]
		jz	loc_62B8D1BA

loc_62B8D0E8:				; CODE XREF: sub_62B8D094+120j
		mov	eax, edx
		test	eax, eax
		jnz	short loc_62B8D0CC

loc_62B8D0EE:				; CODE XREF: sub_62B8D094+33j
					; sub_62B8D094+174j
		mov	eax, [ebx+14h]
		test	eax, eax
		jz	short loc_62B8D10D
		mov	[esp+58h+var_50], 0
		mov	[esp+58h+var_54], 0
		mov	[esp+58h+var_58], eax
		call	silc_async_abort

loc_62B8D10D:				; CODE XREF: sub_62B8D094+5Fj
		mov	eax, [ebx+80h]
		test	eax, eax
		jz	short loc_62B8D12C
		test	byte ptr [ebx+0ACh], 1
		jz	loc_62B8D210
		mov	[esp+58h+var_58], eax
		call	silc_sftp_server_shutdown

loc_62B8D12C:				; CODE XREF: sub_62B8D094+81j
					; sub_62B8D094+184j
		mov	eax, [ebx+84h]
		test	eax, eax
		jz	short loc_62B8D13E
		mov	[esp+58h+var_58], eax
		call	silc_sftp_fs_memory_free

loc_62B8D13E:				; CODE XREF: sub_62B8D094+A0j
		mov	eax, [ebx+10h]
		test	eax, eax
		jz	short loc_62B8D14D
		mov	[esp+58h+var_58], eax
		call	silc_client_listener_free

loc_62B8D14D:				; CODE XREF: sub_62B8D094+AFj
		mov	eax, [ebx+7Ch]
		test	eax, eax
		jz	short loc_62B8D15C
		mov	[esp+58h+var_58], eax
		call	silc_stream_destroy

loc_62B8D15C:				; CODE XREF: sub_62B8D094+BEj
		mov	eax, [ebx+0Ch]
		mov	[esp+58h+var_50], eax
		mov	eax, [ebx+4]
		mov	[esp+58h+var_54], eax
		mov	eax, [ebx]
		mov	[esp+58h+var_58], eax
		call	silc_client_unref_client
		mov	eax, [ebx+90h]
		mov	[esp+58h+var_58], eax
		call	silc_free
		mov	eax, [ebx+74h]
		mov	[esp+58h+var_58], eax
		call	silc_free
		mov	eax, [ebx+78h]
		mov	[esp+58h+var_58], eax
		call	silc_free
		mov	[esp+58h+var_58], ebx
		call	silc_free
		add	esp, 4Ch
		pop	ebx
		pop	esi
		pop	edi
		leave
		retn
; ---------------------------------------------------------------------------

loc_62B8D1A8:				; CODE XREF: sub_62B8D094+3Cj
		movzx	edx, word ptr [ecx+0Ch]
		mov	edx, [eax+edx]
		mov	[ecx+8], edx
		cmp	ebx, [eax]
		jnz	loc_62B8D0E8

loc_62B8D1BA:				; CODE XREF: sub_62B8D094+4Ej
		mov	[ebp+var_3C], esi
		test	esi, esi
		jz	short loc_62B8D1F1
		cmp	eax, esi
		jz	loc_62B8D28D
		movzx	edi, word ptr [ecx+0Ch]
		mov	[ebp+var_1C], edi
		mov	esi, [ebp+var_3C]
		mov	[ebp+var_20], ecx
		mov	ecx, edi
		jmp	short loc_62B8D1E2
; ---------------------------------------------------------------------------
		align 4

loc_62B8D1DC:				; CODE XREF: sub_62B8D094+155j
		cmp	eax, edx
		jz	short loc_62B8D220
		mov	esi, edx

loc_62B8D1E2:				; CODE XREF: sub_62B8D094+144j
		lea	edi, [esi+ecx]
		mov	edx, [edi]
		test	edx, edx
		jnz	short loc_62B8D1DC
		mov	[ebp+var_3C], esi
		mov	ecx, [ebp+var_20]

loc_62B8D1F1:				; CODE XREF: sub_62B8D094+12Bj
		cmp	eax, [ecx+4]
		jz	short loc_62B8D24F

loc_62B8D1F6:				; CODE XREF: sub_62B8D094+1B9j
		cmp	eax, [ecx+14h]
		jz	short loc_62B8D25C

loc_62B8D1FB:				; CODE XREF: sub_62B8D094+1C4j
		cmp	eax, [ecx+18h]
		jz	short loc_62B8D268

loc_62B8D200:				; CODE XREF: sub_62B8D094+1D2j
					; sub_62B8D094+1DBj
		mov	[esp+58h+var_58], eax
		call	silc_free
		jmp	loc_62B8D0EE
; ---------------------------------------------------------------------------
		align 10h

loc_62B8D210:				; CODE XREF: sub_62B8D094+8Aj
		mov	[esp+58h+var_58], eax
		call	silc_sftp_client_shutdown
		jmp	loc_62B8D12C
; ---------------------------------------------------------------------------
		align 10h

loc_62B8D220:				; CODE XREF: sub_62B8D094+14Aj
		mov	[ebp+var_2C], edi
		mov	[ebp+var_3C], esi
		mov	ecx, [ebp+var_20]

loc_62B8D229:				; CODE XREF: sub_62B8D094+20Aj
		mov	esi, [ebp+var_1C]
		mov	esi, [eax+esi]
		mov	[ebp+var_20], esi
		mov	edi, [ebp+var_2C]
		mov	[edi], esi
		test	esi, esi
		jz	short loc_62B8D241
		test	byte ptr [ecx+10h], 1
		jnz	short loc_62B8D274

loc_62B8D241:				; CODE XREF: sub_62B8D094+1A5j
					; sub_62B8D094+1EDj
		cmp	eax, [ecx+8]
		jz	short loc_62B8D283

loc_62B8D246:				; CODE XREF: sub_62B8D094+1F7j
		sub	dword ptr [ecx+10h], 4
		cmp	eax, [ecx+4]
		jnz	short loc_62B8D1F6

loc_62B8D24F:				; CODE XREF: sub_62B8D094+160j
		mov	edx, [ebp+var_3C]
		mov	[ecx+4], edx
		cmp	eax, [ecx+14h]
		jnz	short loc_62B8D1FB
		xchg	ax, ax

loc_62B8D25C:				; CODE XREF: sub_62B8D094+165j
		mov	dword ptr [ecx+14h], 0
		cmp	eax, [ecx+18h]
		jnz	short loc_62B8D200

loc_62B8D268:				; CODE XREF: sub_62B8D094+16Aj
		mov	dword ptr [ecx+18h], 0
		jmp	short loc_62B8D200
; ---------------------------------------------------------------------------
		align 4

loc_62B8D274:				; CODE XREF: sub_62B8D094+1ABj
		movzx	edx, word ptr [ecx+0Eh]
		mov	esi, [eax+edx]
		mov	edi, [ebp+var_20]
		mov	[edi+edx], esi
		jmp	short loc_62B8D241
; ---------------------------------------------------------------------------

loc_62B8D283:				; CODE XREF: sub_62B8D094+1B0j
		mov	esi, [ebp+var_2C]
		mov	edx, [esi]
		mov	[ecx+8], edx
		jmp	short loc_62B8D246
; ---------------------------------------------------------------------------

loc_62B8D28D:				; CODE XREF: sub_62B8D094+12Fj
		mov	[ebp+var_2C], ecx
		movzx	edx, word ptr [ecx+0Ch]
		mov	[ebp+var_1C], edx
		mov	[ebp+var_3C], 0
		jmp	short loc_62B8D229
sub_62B8D094	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_62B8D2A0	proc near		; DATA XREF: silc_client_ftp+302o
					; silc_client_file_receive+116o ...

var_58		= dword	ptr -58h
var_54		= dword	ptr -54h
var_50		= dword	ptr -50h
var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_1C		= dword	ptr -1Ch
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h
arg_14		= dword	ptr  1Ch

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		sub	esp, 4Ch
		mov	edx, [ebp+arg_0]
		mov	edi, [ebp+arg_4]
		mov	esi, [ebp+arg_8]
		mov	ebx, [ebp+arg_14]
		mov	[ebx+8], edi
		mov	dword ptr [ebx+14h], 0
		mov	[esp+58h+var_54], ebx
		mov	eax, [edx+0Ch]
		mov	[esp+58h+var_58], eax
		mov	[ebp+var_1C], edx
		call	silc_schedule_task_del_by_context
		cmp	esi, 2
		jz	loc_62B8D43C
		cmp	esi, 7
		jz	loc_62B8D3E8
		test	esi, esi
		jz	short loc_62B8D364
		mov	eax, [ebx+64h]
		test	eax, eax
		jz	short loc_62B8D355
		mov	edi, [ebx+68h]
		mov	ecx, [ebx+74h]
		cmp	esi, 3
		setz	dl
		mov	esi, edx
		and	esi, 0FFh
		add	esi, 6
		mov	[esp+58h+var_2C], edi
		mov	[esp+58h+var_30], ecx
		mov	edx, [ebx+60h]
		mov	[esp+58h+var_34], edx
		mov	edx, [ebx+0Ch]
		mov	[esp+58h+var_38], edx
		mov	[esp+58h+var_40], 0
		mov	[esp+58h+var_3C], 0
		mov	[esp+58h+var_48], 0
		mov	[esp+58h+var_44], 0
		mov	[esp+58h+var_4C], esi

loc_62B8D33F:				; CODE XREF: sub_62B8D2A0+197j
		mov	[esp+58h+var_50], 7
		mov	edx, [ebx+8]
		mov	[esp+58h+var_54], edx
		mov	edx, [ebx]
		mov	[esp+58h+var_58], edx
		call	eax

loc_62B8D355:				; CODE XREF: sub_62B8D2A0+4Cj
					; sub_62B8D2A0+14Dj
		mov	dword ptr [ebx+8], 0

loc_62B8D35C:				; CODE XREF: sub_62B8D2A0+20Bj
					; sub_62B8D2A0+2EBj
		add	esp, 4Ch
		pop	ebx
		pop	esi
		pop	edi
		leave
		retn
; ---------------------------------------------------------------------------

loc_62B8D364:				; CODE XREF: sub_62B8D2A0+45j
		mov	[esp+58h+var_44], ebx
		mov	[esp+58h+var_48], offset sub_62B8C694
		mov	[esp+58h+var_4C], 0
		mov	[esp+58h+var_50], 0
		mov	[esp+58h+var_54], 1Bh
		mov	eax, [edi+3Ch]
		mov	[esp+58h+var_58], eax
		call	silc_packet_stream_wrap
		mov	[ebx+7Ch], eax
		test	eax, eax
		mov	edx, [ebp+var_1C]
		jz	loc_62B8D514
		test	byte ptr [ebx+0ACh], 1
		jnz	loc_62B8D4C0
		mov	[esp+58h+var_48], ebx
		mov	[esp+58h+var_4C], offset sub_62B8BA20
		mov	[esp+58h+var_50], offset sub_62B8BE8C
		mov	edx, [edi+54h]
		mov	edx, [edx+0B4h]
		mov	[esp+58h+var_54], edx
		mov	[esp+58h+var_58], eax
		call	silc_sftp_client_start
		mov	[ebx+80h], eax
		add	esp, 4Ch
		pop	ebx
		pop	esi
		pop	edi
		leave
		retn
; ---------------------------------------------------------------------------
		align 4

loc_62B8D3E8:				; CODE XREF: sub_62B8D2A0+3Dj
		mov	eax, [ebx+64h]
		test	eax, eax
		jz	loc_62B8D355
		mov	edx, [ebx+68h]
		mov	[esp+58h+var_2C], edx
		mov	edx, [ebx+74h]
		mov	[esp+58h+var_30], edx
		mov	edx, [ebx+60h]
		mov	[esp+58h+var_34], edx
		mov	edx, [ebx+0Ch]
		mov	[esp+58h+var_38], edx
		mov	[esp+58h+var_40], 0
		mov	[esp+58h+var_3C], 0
		mov	[esp+58h+var_48], 0
		mov	[esp+58h+var_44], 0
		mov	[esp+58h+var_4C], 8
		jmp	loc_62B8D33F
; ---------------------------------------------------------------------------

loc_62B8D43C:				; CODE XREF: sub_62B8D2A0+34j
		mov	eax, [ebx+64h]
		test	eax, eax
		jz	short loc_62B8D49D
		mov	edx, [ebx+68h]
		mov	[esp+58h+var_2C], edx
		mov	edx, [ebx+74h]
		mov	[esp+58h+var_30], edx
		mov	edx, [ebx+60h]
		mov	[esp+58h+var_34], edx
		mov	edx, [ebx+0Ch]
		mov	[esp+58h+var_38], edx
		mov	[esp+58h+var_40], 0
		mov	[esp+58h+var_3C], 0
		mov	[esp+58h+var_48], 0
		mov	[esp+58h+var_44], 0
		mov	[esp+58h+var_4C], 1
		mov	[esp+58h+var_50], 6
		mov	edx, [ebx+8]
		mov	[esp+58h+var_54], edx
		mov	edx, [ebx]
		mov	[esp+58h+var_58], edx
		call	eax

loc_62B8D49D:				; CODE XREF: sub_62B8D2A0+1A1j
		mov	dword ptr [ebx+8], 0
		test	byte ptr [ebx+0ACh], 2
		jz	loc_62B8D35C
		mov	eax, ebx
		add	esp, 4Ch
		pop	ebx
		pop	esi
		pop	edi
		leave
		jmp	sub_62B8D094
; ---------------------------------------------------------------------------
		align 10h

loc_62B8D4C0:				; CODE XREF: sub_62B8D2A0+108j
		mov	edx, [ebx+84h]
		mov	[esp+58h+var_48], edx
		mov	[esp+58h+var_4C], ebx
		mov	[esp+58h+var_50], offset sub_62B8BA20
		mov	edx, [edi+54h]
		mov	edx, [edx+0B4h]
		mov	[esp+58h+var_54], edx
		mov	[esp+58h+var_58], eax
		call	silc_sftp_server_start
		mov	[ebx+80h], eax
		mov	[ebp+arg_C], ebx
		mov	[ebp+arg_8], offset sub_62B8B99C
		mov	[ebp+arg_4], 8
		mov	[ebp+arg_0], eax
		add	esp, 4Ch
		pop	ebx
		pop	esi
		pop	edi
		leave
		jmp	silc_sftp_server_set_monitor
; ---------------------------------------------------------------------------
		align 4

loc_62B8D514:				; CODE XREF: sub_62B8D2A0+FBj
		mov	eax, [ebx+64h]
		test	eax, eax
		jz	short loc_62B8D578
		mov	ecx, [ebx+68h]
		mov	[esp+58h+var_2C], ecx
		mov	ecx, [ebx+74h]
		mov	[esp+58h+var_30], ecx
		mov	ecx, [ebx+60h]
		mov	[esp+58h+var_34], ecx
		mov	ecx, [ebx+0Ch]
		mov	[esp+58h+var_38], ecx
		mov	[esp+58h+var_40], 0
		mov	[esp+58h+var_3C], 0
		mov	[esp+58h+var_48], 0
		mov	[esp+58h+var_44], 0
		mov	[esp+58h+var_4C], 1
		mov	[esp+58h+var_50], 7
		mov	ecx, [ebx+8]
		mov	[esp+58h+var_54], ecx
		mov	ecx, [ebx]
		mov	[esp+58h+var_58], ecx
		call	eax
		mov	edx, [ebp+var_1C]

loc_62B8D578:				; CODE XREF: sub_62B8D2A0+279j
		mov	[esp+58h+var_54], edi
		mov	[esp+58h+var_58], edx
		call	silc_client_close_connection
		mov	dword ptr [ebx+8], 0
		jmp	loc_62B8D35C
sub_62B8D2A0	endp

; Exported entry 123. silc_client_ftp_session_free_client

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public silc_client_ftp_session_free_client
silc_client_ftp_session_free_client proc near ;	CODE XREF: silc_client_del_client_entry+ABp

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		push	esi
		push	ebx
		mov	esi, [ebp+arg_0]
		mov	ebx, [ebp+arg_4]
		mov	eax, [esi+18h]
		mov	eax, [eax+6Ch]
		test	eax, eax
		jz	short loc_62B8D5FF
		mov	edx, [eax]
		mov	[eax+8], edx
		and	byte ptr [eax+10h], 0FDh
		mov	dword ptr [eax+18h], 0
		mov	dword ptr [eax+14h], 0

loc_62B8D5BC:				; CODE XREF: silc_client_ftp_session_free_client+79j
		mov	eax, [esi+18h]
		mov	edx, [eax+6Ch]
		jmp	short loc_62B8D5DC
; ---------------------------------------------------------------------------

loc_62B8D5C4:				; CODE XREF: silc_client_ftp_session_free_client+5Dj
		movzx	ecx, word ptr [edx+0Eh]
		mov	ecx, [eax+ecx]

loc_62B8D5CB:				; CODE XREF: silc_client_ftp_session_free_client+66j
		mov	[edx+8], ecx
		mov	[edx+14h], eax
		mov	eax, [eax]
		test	eax, eax
		jz	short loc_62B8D5FF
		cmp	[eax+0Ch], ebx
		jz	short loc_62B8D604

loc_62B8D5DC:				; CODE XREF: silc_client_ftp_session_free_client+32j
		mov	eax, [edx+14h]
		mov	[edx+18h], eax
		mov	eax, [edx+8]
		test	eax, eax
		jz	short loc_62B8D5F8
		test	byte ptr [edx+10h], 2
		jnz	short loc_62B8D5C4
		movzx	ecx, word ptr [edx+0Ch]
		mov	ecx, [eax+ecx]
		jmp	short loc_62B8D5CB
; ---------------------------------------------------------------------------

loc_62B8D5F8:				; CODE XREF: silc_client_ftp_session_free_client+57j
		mov	dword ptr [edx+14h], 0

loc_62B8D5FF:				; CODE XREF: silc_client_ftp_session_free_client+13j
					; silc_client_ftp_session_free_client+45j
		pop	ebx
		pop	esi
		leave
		retn
; ---------------------------------------------------------------------------
		align 4

loc_62B8D604:				; CODE XREF: silc_client_ftp_session_free_client+4Aj
		call	sub_62B8D094
		jmp	short loc_62B8D5BC
silc_client_ftp_session_free_client endp

; ---------------------------------------------------------------------------
		align 4
; Exported entry 115. silc_client_file_close_final

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public silc_client_file_close_final
silc_client_file_close_final proc near	; DATA XREF: silc_client_file_close+127o

var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
arg_10		= dword	ptr  18h

		push	ebp
		mov	ebp, esp
		push	ebx
		sub	esp, 14h
		mov	ebx, [ebp+arg_10]
		mov	eax, [ebx+8]
		test	eax, eax
		jz	short loc_62B8D638
		mov	[esp+18h+var_14], eax
		mov	eax, [ebx]
		mov	[esp+18h+var_18], eax
		call	silc_client_close_connection
		mov	dword ptr [ebx+8], 0
		add	esp, 14h
		pop	ebx
		leave
		retn
; ---------------------------------------------------------------------------

loc_62B8D638:				; CODE XREF: silc_client_file_close_final+Fj
		mov	eax, ebx
		add	esp, 14h
		pop	ebx
		leave
		jmp	sub_62B8D094
silc_client_file_close_final endp

; Exported entry 124. silc_client_ftp_timeout

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public silc_client_ftp_timeout
silc_client_ftp_timeout	proc near	; DATA XREF: silc_client_file_receive+25Do
					; silc_client_file_send+37Bo

var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
arg_10		= dword	ptr  18h

		push	ebp
		mov	ebp, esp
		push	ebx
		sub	esp, 34h
		mov	ebx, [ebp+arg_10]
		mov	eax, [ebx+8]
		test	eax, eax
		jz	short loc_62B8D670
		mov	[esp+38h+var_34], eax
		mov	eax, [ebx]
		mov	[esp+38h+var_38], eax
		call	silc_client_close_connection
		mov	dword ptr [ebx+8], 0
		add	esp, 34h
		pop	ebx
		leave
		retn
; ---------------------------------------------------------------------------

loc_62B8D670:				; CODE XREF: silc_client_ftp_timeout+Fj
		mov	eax, [ebx+64h]
		test	eax, eax
		jz	short loc_62B8D6D2
		mov	edx, [ebx+68h]
		mov	[esp+38h+var_C], edx
		mov	edx, [ebx+74h]
		mov	[esp+38h+var_10], edx
		mov	edx, [ebx+60h]
		mov	[esp+38h+var_14], edx
		mov	edx, [ebx+0Ch]
		mov	[esp+38h+var_18], edx
		mov	[esp+38h+var_20], 0
		mov	[esp+38h+var_1C], 0
		mov	[esp+38h+var_28], 0
		mov	[esp+38h+var_24], 0
		mov	[esp+38h+var_2C], 8
		mov	[esp+38h+var_30], 7
		mov	[esp+38h+var_34], 0
		mov	edx, [ebx]
		mov	[esp+38h+var_38], edx
		call	eax

loc_62B8D6D2:				; CODE XREF: silc_client_ftp_timeout+31j
		mov	eax, ebx
		add	esp, 34h
		pop	ebx
		leave
		jmp	sub_62B8D094
silc_client_ftp_timeout	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 122. silc_client_ftp_free_sessions

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public silc_client_ftp_free_sessions
silc_client_ftp_free_sessions proc near

var_2C		= dword	ptr -2Ch
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		sub	esp, 2Ch
		mov	ebx, [ebp+arg_0]
		mov	eax, [ebx+18h]
		mov	eax, [eax+6Ch]
		test	eax, eax
		jz	loc_62B8D786
		mov	edx, [eax]
		mov	[eax+8], edx
		and	byte ptr [eax+10h], 0FDh
		mov	dword ptr [eax+18h], 0
		mov	dword ptr [eax+14h], 0
		jmp	short loc_62B8D72C
; ---------------------------------------------------------------------------
		align 4

loc_62B8D714:				; CODE XREF: silc_client_ftp_free_sessions+63j
		movzx	esi, word ptr [eax+0Eh]
		mov	esi, [edx+esi]

loc_62B8D71B:				; CODE XREF: silc_client_ftp_free_sessions+6Cj
		mov	[eax+8], esi
		mov	[eax+14h], edx
		mov	eax, [edx]
		test	eax, eax
		jz	short loc_62B8D757
		call	sub_62B8D094

loc_62B8D72C:				; CODE XREF: silc_client_ftp_free_sessions+31j
		mov	ecx, [ebx+18h]
		mov	eax, [ecx+6Ch]
		mov	edx, [eax+14h]
		mov	[eax+18h], edx
		mov	edx, [eax+8]
		test	edx, edx
		jz	short loc_62B8D750
		test	byte ptr [eax+10h], 2
		jnz	short loc_62B8D714
		movzx	esi, word ptr [eax+0Ch]
		mov	esi, [edx+esi]
		jmp	short loc_62B8D71B
; ---------------------------------------------------------------------------
		align 10h

loc_62B8D750:				; CODE XREF: silc_client_ftp_free_sessions+5Dj
		mov	dword ptr [eax+14h], 0

loc_62B8D757:				; CODE XREF: silc_client_ftp_free_sessions+45j
		mov	edx, [ecx+6Ch]
		mov	esi, [edx]
		mov	eax, esi
		mov	[edx+8], esi
		and	byte ptr [edx+10h], 0FDh
		xor	ecx, ecx
		test	eax, eax
		jz	short loc_62B8D786
		nop

loc_62B8D76C:				; CODE XREF: silc_client_ftp_free_sessions+A4j
		test	cl, cl
		jz	short loc_62B8D790
		movzx	ebx, word ptr [edx+0Eh]
		mov	ebx, [eax+ebx]
		mov	[edx+8], ebx
		mov	edi, [eax]
		test	edi, edi
		jz	short loc_62B8D7A0

loc_62B8D780:				; CODE XREF: silc_client_ftp_free_sessions+BEj
		mov	eax, ebx
		test	eax, eax
		jnz	short loc_62B8D76C

loc_62B8D786:				; CODE XREF: silc_client_ftp_free_sessions+14j
					; silc_client_ftp_free_sessions+89j
		add	esp, 2Ch
		pop	ebx
		pop	esi
		pop	edi
		leave
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_62B8D790:				; CODE XREF: silc_client_ftp_free_sessions+8Ej
		movzx	ebx, word ptr [edx+0Ch]
		mov	ebx, [eax+ebx]
		mov	[edx+8], ebx
		mov	edi, [eax]
		test	edi, edi
		jnz	short loc_62B8D780

loc_62B8D7A0:				; CODE XREF: silc_client_ftp_free_sessions+9Ej
		mov	ecx, esi
		test	esi, esi
		jz	short loc_62B8D7C3
		cmp	eax, esi
		jz	loc_62B8D84A
		movzx	edi, word ptr [edx+0Ch]
		jmp	short loc_62B8D7BA
; ---------------------------------------------------------------------------

loc_62B8D7B4:				; CODE XREF: silc_client_ftp_free_sessions+E1j
		cmp	eax, esi
		jz	short loc_62B8D7E4
		mov	ecx, esi

loc_62B8D7BA:				; CODE XREF: silc_client_ftp_free_sessions+D2j
		lea	ebx, [ecx+edi]
		mov	esi, [ebx]
		test	esi, esi
		jnz	short loc_62B8D7B4

loc_62B8D7C3:				; CODE XREF: silc_client_ftp_free_sessions+C4j
		cmp	eax, [edx+4]
		jz	short loc_62B8D807

loc_62B8D7C8:				; CODE XREF: silc_client_ftp_free_sessions+125j
		cmp	eax, [edx+14h]
		jz	short loc_62B8D810

loc_62B8D7CD:				; CODE XREF: silc_client_ftp_free_sessions+12Dj
		cmp	eax, [edx+18h]
		jz	short loc_62B8D81C

loc_62B8D7D2:				; CODE XREF: silc_client_ftp_free_sessions+13Aj
		mov	[ebp+arg_0], eax
		add	esp, 2Ch
		pop	ebx
		pop	esi
		pop	edi
		leave
		jmp	silc_free
; ---------------------------------------------------------------------------
		align 4

loc_62B8D7E4:				; CODE XREF: silc_client_ftp_free_sessions+D6j
		mov	[ebp+var_2C], ebx

loc_62B8D7E7:				; CODE XREF: silc_client_ftp_free_sessions+173j
		mov	esi, [eax+edi]
		mov	ebx, [ebp+var_2C]
		mov	[ebx], esi
		test	esi, esi
		jz	short loc_62B8D7F9
		test	byte ptr [edx+10h], 1
		jnz	short loc_62B8D834

loc_62B8D7F9:				; CODE XREF: silc_client_ftp_free_sessions+111j
					; silc_client_ftp_free_sessions+15Ej
		cmp	eax, [edx+8]
		jz	short loc_62B8D840

loc_62B8D7FE:				; CODE XREF: silc_client_ftp_free_sessions+168j
		sub	dword ptr [edx+10h], 4
		cmp	eax, [edx+4]
		jnz	short loc_62B8D7C8

loc_62B8D807:				; CODE XREF: silc_client_ftp_free_sessions+E6j
		mov	[edx+4], ecx
		cmp	eax, [edx+14h]
		jnz	short loc_62B8D7CD
		nop

loc_62B8D810:				; CODE XREF: silc_client_ftp_free_sessions+EBj
		mov	dword ptr [edx+14h], 0
		cmp	eax, [edx+18h]
		jnz	short loc_62B8D7D2

loc_62B8D81C:				; CODE XREF: silc_client_ftp_free_sessions+F0j
		mov	dword ptr [edx+18h], 0
		mov	[ebp+arg_0], eax
		add	esp, 2Ch
		pop	ebx
		pop	esi
		pop	edi
		leave
		jmp	silc_free
; ---------------------------------------------------------------------------
		align 4

loc_62B8D834:				; CODE XREF: silc_client_ftp_free_sessions+117j
		movzx	edi, word ptr [edx+0Eh]
		mov	ebx, [eax+edi]
		mov	[esi+edi], ebx
		jmp	short loc_62B8D7F9
; ---------------------------------------------------------------------------

loc_62B8D840:				; CODE XREF: silc_client_ftp_free_sessions+11Cj
		mov	esi, [ebp+var_2C]
		mov	ebx, [esi]
		mov	[edx+8], ebx
		jmp	short loc_62B8D7FE
; ---------------------------------------------------------------------------

loc_62B8D84A:				; CODE XREF: silc_client_ftp_free_sessions+C8j
		mov	[ebp+var_2C], edx
		movzx	edi, word ptr [edx+0Ch]
		xor	ecx, ecx
		jmp	short loc_62B8D7E7
silc_client_ftp_free_sessions endp

; ---------------------------------------------------------------------------
		align 4
; Exported entry 143. silc_client_key_agreement_error

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public silc_client_key_agreement_error
silc_client_key_agreement_error	proc near
					; DATA XREF: silc_client_key_agreement:loc_62B8D895o
					; sub_62B8DA74:loc_62B8DAACo

var_18		= dword	ptr -18h
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		sub	esp, 18h
		mov	eax, [ebp+arg_8]
		mov	[esp+18h+var_18], eax
		call	silc_packet_free
		mov	eax, 3
		leave
		retn
silc_client_key_agreement_error	endp

; Exported entry 142. silc_client_key_agreement

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public silc_client_key_agreement
silc_client_key_agreement proc near	; DATA XREF: silc_client_connection_st_packet:loc_62B81FB4o

var_78		= dword	ptr -78h
var_74		= dword	ptr -74h
var_70		= dword	ptr -70h
var_6C		= dword	ptr -6Ch
var_68		= dword	ptr -68h
var_64		= dword	ptr -64h
var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_42		= word ptr -42h
var_40		= dword	ptr -40h
var_3C		= dword	ptr -3Ch
var_35		= byte ptr -35h
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		sub	esp, 6Ch
		mov	esi, [ebp+arg_0]
		mov	ebx, [ebp+arg_4]
		mov	edi, [ebp+arg_8]
		mov	eax, [ebx+4Ch]
		mov	[ebp+var_3C], eax
		mov	al, [edi+20h]
		mov	dl, al
		and	edx, 0FFFFFFC0h
		cmp	dl, 80h
		jz	short loc_62B8D8B0

loc_62B8D895:				; CODE XREF: silc_client_key_agreement+6Bj
					; silc_client_key_agreement+11Fj
		mov	[esp+78h+var_74], offset silc_client_key_agreement_error
		mov	[esp+78h+var_78], esi
		call	silc_fsm_next
		xor	eax, eax

loc_62B8D8A7:				; CODE XREF: silc_client_key_agreement+1BFj
		add	esp, 6Ch
		pop	ebx
		pop	esi
		pop	edi
		leave
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_62B8D8B0:				; CODE XREF: silc_client_key_agreement+23j
		mov	[esp+78h+var_68], 1Dh
		lea	edx, [ebp+var_35]
		mov	[esp+78h+var_6C], edx
		mov	[esp+78h+var_70], 2
		and	eax, 3Fh
		mov	[esp+78h+var_74], eax
		mov	eax, [edi+18h]
		mov	[esp+78h+var_78], eax
		call	silc_id_str2id
		test	al, al
		jz	short loc_62B8D895
		lea	ecx, [ebp+var_35]
		mov	[esp+78h+var_70], ecx
		mov	[esp+78h+var_74], ebx
		mov	eax, [ebp+var_3C]
		mov	[esp+78h+var_78], eax
		call	silc_client_get_client_by_id
		mov	edx, eax
		test	eax, eax
		jz	short loc_62B8D902
		test	byte ptr [eax+402h], 1
		jnz	short loc_62B8D970

loc_62B8D902:				; CODE XREF: silc_client_key_agreement+87j
		mov	[esp+78h+var_70], edx
		mov	[esp+78h+var_74], ebx
		mov	edx, [ebp+var_3C]
		mov	[esp+78h+var_78], edx
		call	silc_client_unref_client
		mov	al, [esi+28h]
		mov	dl, al
		or	edx, 4
		mov	[esi+28h], dl
		test	al, 4
		jnz	loc_62B8DA40

loc_62B8D928:				; CODE XREF: silc_client_key_agreement+1FCj
		mov	[esp+78h+var_64], esi
		mov	[esp+78h+var_68], offset sub_62B8DA74
		mov	[esp+78h+var_6C], 0
		lea	ecx, [ebp+var_35]
		mov	[esp+78h+var_70], ecx
		mov	[esp+78h+var_74], ebx
		mov	eax, [ebp+var_3C]
		mov	[esp+78h+var_78], eax
		call	silc_client_get_client_by_id_resolve
		mov	dl, [esi+28h]
		mov	al, dl
		shr	al, 2
		and	edx, 0FFFFFFFBh
		mov	[esi+28h], dl
		shl	eax, 1
		and	eax, 2
		add	esp, 6Ch
		pop	ebx
		pop	esi
		pop	edi
		leave
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_62B8D970:				; CODE XREF: silc_client_key_agreement+90j
		mov	ecx, [edi+0Ch]
		mov	eax, [edi+10h]
		sub	eax, ecx
		mov	[esp+78h+var_74], eax
		mov	[esp+78h+var_78], ecx
		mov	[ebp+var_4C], edx
		call	silc_key_agreement_payload_parse
		mov	[ebp+var_40], eax
		test	eax, eax
		mov	edx, [ebp+var_4C]
		jz	loc_62B8D895
		mov	ecx, [ebp+var_40]
		mov	[esp+78h+var_78], ecx
		mov	[ebp+var_4C], edx
		call	silc_key_agreement_get_hostname
		test	eax, eax
		mov	edx, [ebp+var_4C]
		jz	loc_62B8DA34
		and	byte ptr [edx+402h], 0FBh

loc_62B8D9B5:				; CODE XREF: silc_client_key_agreement+1CBj
		mov	ecx, [ebp+var_3C]
		mov	eax, [ecx+18h]
		mov	eax, [eax+48h]
		mov	eax, [eax+24h]
		mov	[ebp+var_48], eax
		mov	eax, [ebp+var_40]
		mov	[esp+78h+var_78], eax
		mov	[ebp+var_4C], edx
		call	silc_key_agreement_get_port
		mov	esi, eax
		mov	ecx, [ebp+var_40]
		mov	[esp+78h+var_78], ecx
		call	silc_key_agreement_get_protocol
		mov	[ebp+var_42], ax
		mov	eax, [ebp+var_40]
		mov	[esp+78h+var_78], eax
		call	silc_key_agreement_get_hostname
		mov	ecx, eax
		movzx	esi, si
		mov	[esp+78h+var_64], esi
		movzx	eax, [ebp+var_42]
		mov	[esp+78h+var_68], eax
		mov	[esp+78h+var_6C], ecx
		mov	edx, [ebp+var_4C]
		mov	[esp+78h+var_70], edx
		mov	[esp+78h+var_74], ebx
		mov	edx, [ebp+var_3C]
		mov	[esp+78h+var_78], edx
		call	[ebp+var_48]
		mov	ecx, [ebp+var_40]
		mov	[esp+78h+var_78], ecx
		call	silc_key_agreement_payload_free
		mov	[esp+78h+var_78], edi
		call	silc_packet_free
		mov	eax, 3
		jmp	loc_62B8D8A7
; ---------------------------------------------------------------------------

loc_62B8DA34:				; CODE XREF: silc_client_key_agreement+138j
		or	byte ptr [edx+402h], 4
		jmp	loc_62B8D9B5
; ---------------------------------------------------------------------------

loc_62B8DA40:				; CODE XREF: silc_client_key_agreement+B2j
		mov	[esp+78h+var_70], 19Bh
		mov	[esp+78h+var_74], offset aClient_keyagr_ ; "client_keyagr.c"
		mov	[esp+78h+var_78], offset aSilc_verifyS_2 ; "SILC_VERIFY	%s:%d"
		call	silc_format
		mov	[esp+78h+var_74], eax
		mov	[esp+78h+var_78], 3
		call	silc_log_output
		jmp	loc_62B8D928
silc_client_key_agreement endp

; ---------------------------------------------------------------------------
		align 4

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_62B8DA74	proc near		; DATA XREF: silc_client_key_agreement+BCo

var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
arg_0		= dword	ptr  8
arg_C		= dword	ptr  14h
arg_10		= dword	ptr  18h

		push	ebp
		mov	ebp, esp
		push	ebx
		sub	esp, 14h
		mov	ebx, [ebp+arg_10]
		mov	eax, [ebp+arg_C]
		test	eax, eax
		jz	short loc_62B8DAAC

loc_62B8DA85:				; CODE XREF: sub_62B8DA74+48j
		mov	al, [ebx+28h]
		mov	dl, al
		and	edx, 0FFFFFFFBh
		mov	[ebx+28h], dl
		test	al, 4
		jz	short loc_62B8DA9C
		add	esp, 14h
		pop	ebx
		leave
		retn
; ---------------------------------------------------------------------------
		align 4

loc_62B8DA9C:				; CODE XREF: sub_62B8DA74+1Ej
		mov	[ebp+arg_0], ebx
		add	esp, 14h
		pop	ebx
		leave
		jmp	silc_fsm_continue
; ---------------------------------------------------------------------------
		align 4

loc_62B8DAAC:				; CODE XREF: sub_62B8DA74+Fj
		mov	[esp+18h+var_14], offset silc_client_key_agreement_error
		mov	[esp+18h+var_18], ebx
		call	silc_fsm_next
		jmp	short loc_62B8DA85
sub_62B8DA74	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_62B8DAC0	proc near		; CODE XREF: silc_client_abort_key_agreement+52j
					; silc_client_keyagr_timeout+4Cj ...

var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_1C		= dword	ptr -1Ch

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		sub	esp, 2Ch
		mov	ebx, eax
		mov	esi, edx
		mov	edi, ecx
		mov	eax, [ecx+3F4h]
		mov	[ebp+var_1C], eax
		mov	eax, [eax+8]
		mov	[esp+38h+var_38], eax
		call	silc_client_listener_free
		mov	[esp+38h+var_34], edi
		mov	eax, [esi+54h]
		mov	eax, [eax+0B4h]
		mov	[esp+38h+var_38], eax
		call	silc_schedule_task_del_by_context
		mov	edx, [ebp+var_1C]
		mov	eax, [edx+14h]
		test	eax, eax
		jz	short loc_62B8DB1A
		mov	[esp+38h+var_30], 0
		mov	[esp+38h+var_34], 0
		mov	[esp+38h+var_38], eax
		call	silc_async_abort

loc_62B8DB1A:				; CODE XREF: sub_62B8DAC0+40j
		mov	dword ptr [edi+3F4h], 0
		and	byte ptr [edi+402h], 0FBh
		mov	[esp+38h+var_30], edi
		mov	[esp+38h+var_34], esi
		mov	[esp+38h+var_38], ebx
		call	silc_client_unref_client
		mov	eax, [ebp+var_1C]
		mov	[esp+38h+var_38], eax
		call	silc_free
		add	esp, 2Ch
		pop	ebx
		pop	esi
		pop	edi
		leave
		retn
sub_62B8DAC0	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry   1. silc_client_abort_key_agreement

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public silc_client_abort_key_agreement
silc_client_abort_key_agreement	proc near ; CODE XREF: silc_client_del_client_entry+C5p

var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		sub	esp, 2Ch
		mov	ebx, [ebp+arg_0]
		mov	esi, [ebp+arg_4]
		mov	edi, [ebp+arg_8]
		test	edi, edi
		jz	short loc_62B8DBA8
		mov	eax, [edi+3F4h]
		test	eax, eax
		jz	short loc_62B8DBA8
		mov	edx, [eax+10h]
		mov	[esp+38h+var_24], edx
		mov	[esp+38h+var_28], 0
		mov	[esp+38h+var_2C], 4
		mov	[esp+38h+var_30], edi
		mov	[esp+38h+var_34], esi
		mov	[esp+38h+var_38], ebx
		call	dword ptr [eax+0Ch]
		mov	ecx, edi
		mov	edx, esi
		mov	eax, ebx
		add	esp, 2Ch
		pop	ebx
		pop	esi
		pop	edi
		leave
		jmp	sub_62B8DAC0
; ---------------------------------------------------------------------------
		align 4

loc_62B8DBA8:				; CODE XREF: silc_client_abort_key_agreement+14j
					; silc_client_abort_key_agreement+1Ej
		add	esp, 2Ch
		pop	ebx
		pop	esi
		pop	edi
		leave
		retn
silc_client_abort_key_agreement	endp

; Exported entry 145. silc_client_keyagr_timeout

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public silc_client_keyagr_timeout
silc_client_keyagr_timeout proc	near	; DATA XREF: silc_client_send_key_agreement+274o

var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
arg_10		= dword	ptr  18h

		push	ebp
		mov	ebp, esp
		push	esi
		push	ebx
		sub	esp, 20h
		mov	esi, [ebp+arg_10]
		mov	ebx, [esi+3F4h]
		test	ebx, ebx
		jz	short loc_62B8DC04
		mov	eax, [ebx+10h]
		mov	[esp+28h+var_14], eax
		mov	[esp+28h+var_18], 0
		mov	[esp+28h+var_1C], 3
		mov	[esp+28h+var_20], esi
		mov	eax, [ebx+4]
		mov	[esp+28h+var_24], eax
		mov	eax, [ebx]
		mov	[esp+28h+var_28], eax
		call	dword ptr [ebx+0Ch]
		mov	edx, [ebx+4]
		mov	ecx, esi
		mov	eax, [ebx]
		add	esp, 20h
		pop	ebx
		pop	esi
		leave
		jmp	sub_62B8DAC0
; ---------------------------------------------------------------------------
		align 4

loc_62B8DC04:				; CODE XREF: silc_client_keyagr_timeout+13j
		add	esp, 20h
		pop	ebx
		pop	esi
		leave
		retn
silc_client_keyagr_timeout endp

; ---------------------------------------------------------------------------
		align 4
; Exported entry 180. silc_client_perform_key_agreement_stream

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public silc_client_perform_key_agreement_stream
silc_client_perform_key_agreement_stream proc near

var_58		= dword	ptr -58h
var_54		= dword	ptr -54h
var_50		= dword	ptr -50h
var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_3C		= dword	ptr -3Ch
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h
arg_10		= dword	ptr  18h
arg_14		= dword	ptr  1Ch
arg_18		= dword	ptr  20h
arg_1C		= dword	ptr  24h
arg_20		= dword	ptr  28h

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		sub	esp, 4Ch
		mov	eax, [ebp+arg_0]
		mov	[ebp+var_1C], eax
		mov	ebx, [ebp+arg_4]
		mov	edi, [ebp+arg_8]
		mov	edx, [ebp+arg_C]
		mov	ecx, [ebp+arg_10]
		mov	[ebp+var_2C], ecx
		mov	eax, [ebp+arg_14]
		mov	[ebp+var_30], eax
		mov	ecx, [ebp+arg_18]
		mov	[ebp+var_20], ecx
		mov	eax, [ebp+arg_1C]
		mov	[ebp+var_24], eax
		mov	ecx, [ebp+arg_20]
		mov	[ebp+var_28], ecx
		test	edi, edi
		jz	loc_62B8DD08
		mov	ecx, [ebp+var_20]
		test	ecx, ecx
		jz	loc_62B8DD08
		mov	eax, [ebx]
		cmp	eax, edi
		jz	loc_62B8DD34
		mov	[esp+58h+var_54], 18h
		mov	[esp+58h+var_58], 1
		mov	[ebp+var_34], edx
		call	silc_calloc
		mov	esi, eax
		test	eax, eax
		mov	edx, [ebp+var_34]
		jz	loc_62B8DD58
		mov	eax, [ebp+var_1C]
		mov	[esi], eax
		mov	[esi+4], ebx
		mov	ecx, [ebp+var_24]
		mov	[esi+0Ch], ecx
		mov	eax, [ebp+var_28]
		mov	[esi+10h], eax
		mov	[esp+58h+var_50], edi
		mov	[esp+58h+var_54], ebx
		mov	ecx, [ebp+var_1C]
		mov	[esp+58h+var_58], ecx
		mov	[ebp+var_34], edx
		call	silc_client_ref_client
		mov	[edi+3F4h], esi
		mov	edx, [ebp+var_34]
		test	edx, edx
		jz	short loc_62B8DCBE
		mov	byte ptr [edx+25h], 1

loc_62B8DCBE:				; CODE XREF: silc_client_perform_key_agreement_stream+ACj
		mov	[esp+58h+var_3C], edi
		mov	[esp+58h+var_40], offset sub_62B8DDB8
		mov	[esp+58h+var_44], 1
		mov	eax, [ebp+var_20]
		mov	[esp+58h+var_48], eax
		mov	ecx, [ebp+var_30]
		mov	[esp+58h+var_4C], ecx
		mov	eax, [ebp+var_2C]
		mov	[esp+58h+var_50], eax
		mov	[esp+58h+var_54], edx
		mov	edx, [ebp+var_1C]
		mov	[esp+58h+var_58], edx
		call	silc_client_key_exchange
		mov	[esi+14h], eax
		test	eax, eax
		jz	short loc_62B8DD7C
		add	esp, 4Ch
		pop	ebx
		pop	esi
		pop	edi
		leave
		retn
; ---------------------------------------------------------------------------
		align 4

loc_62B8DD08:				; CODE XREF: silc_client_perform_key_agreement_stream+38j
					; silc_client_perform_key_agreement_stream+43j
		mov	eax, [ebp+var_28]
		mov	[ebp+arg_14], eax
		mov	[ebp+arg_10], 0
		mov	[ebp+arg_C], 1
		mov	[ebp+arg_8], edi
		mov	[ebp+arg_4], ebx
		mov	edx, [ebp+var_1C]
		mov	[ebp+arg_0], edx

loc_62B8DD28:				; CODE XREF: silc_client_perform_key_agreement_stream+148j
					; silc_client_perform_key_agreement_stream+16Cj
		mov	ecx, [ebp+var_24]
		add	esp, 4Ch
		pop	ebx
		pop	esi
		pop	edi
		leave
		jmp	ecx
; ---------------------------------------------------------------------------

loc_62B8DD34:				; CODE XREF: silc_client_perform_key_agreement_stream+4Dj
		mov	edx, [ebp+var_28]
		mov	[ebp+arg_14], edx
		mov	[ebp+arg_10], 0
		mov	[ebp+arg_C], 6
		mov	[ebp+arg_8], eax
		mov	[ebp+arg_4], ebx
		mov	ecx, [ebp+var_1C]
		mov	[ebp+arg_0], ecx
		jmp	short loc_62B8DD28
; ---------------------------------------------------------------------------
		align 4

loc_62B8DD58:				; CODE XREF: silc_client_perform_key_agreement_stream+71j
		mov	eax, [ebp+var_28]
		mov	[ebp+arg_14], eax
		mov	[ebp+arg_10], 0
		mov	[ebp+arg_C], 7
		mov	[ebp+arg_8], edi
		mov	[ebp+arg_4], ebx
		mov	edx, [ebp+var_1C]
		mov	[ebp+arg_0], edx
		jmp	short loc_62B8DD28
; ---------------------------------------------------------------------------
		align 4

loc_62B8DD7C:				; CODE XREF: silc_client_perform_key_agreement_stream+EFj
		mov	ecx, [ebp+var_28]
		mov	[esp+58h+var_44], ecx
		mov	[esp+58h+var_48], 0
		mov	[esp+58h+var_4C], 1
		mov	[esp+58h+var_50], edi
		mov	[esp+58h+var_54], ebx
		mov	eax, [ebp+var_1C]
		mov	[esp+58h+var_58], eax
		call	[ebp+var_24]
		mov	ecx, edi
		mov	edx, ebx
		mov	eax, [ebp+var_1C]
		add	esp, 4Ch
		pop	ebx
		pop	esi
		pop	edi
		leave
		jmp	sub_62B8DAC0
silc_client_perform_key_agreement_stream endp

; ---------------------------------------------------------------------------
		align 4

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_62B8DDB8	proc near		; DATA XREF: silc_client_perform_key_agreement_stream+B6o
					; silc_client_perform_key_agreement+D0o ...

var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_14		= dword	ptr  1Ch

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		sub	esp, 2Ch
		mov	edi, [ebp+arg_4]
		mov	eax, [ebp+arg_8]
		mov	esi, [ebp+arg_14]
		mov	ebx, [esi+3F4h]
		mov	dword ptr [ebx+14h], 0
		test	eax, eax
		jnz	short loc_62B8DE38
		mov	eax, [edi+54h]
		mov	eax, [eax+0BCh]
		mov	[esp+38h+var_38], eax
		call	silc_ske_get_key_material
		mov	edx, [ebx+10h]
		mov	[esp+38h+var_24], edx
		mov	[esp+38h+var_28], eax
		mov	[esp+38h+var_2C], 0

loc_62B8DDFF:				; CODE XREF: sub_62B8DDB8+9Cj
					; sub_62B8DDB8+B7j
		mov	[esp+38h+var_30], esi
		mov	eax, [ebx+4]
		mov	[esp+38h+var_34], eax
		mov	eax, [ebx]
		mov	[esp+38h+var_38], eax
		call	dword ptr [ebx+0Ch]
		test	edi, edi
		jz	short loc_62B8DE24
		mov	[esp+38h+var_34], edi
		mov	eax, [ebx]
		mov	[esp+38h+var_38], eax
		call	silc_client_close_connection

loc_62B8DE24:				; CODE XREF: sub_62B8DDB8+5Cj
		mov	edx, [ebx+4]
		mov	ecx, esi
		mov	eax, [ebx]
		add	esp, 2Ch
		pop	ebx
		pop	esi
		pop	edi
		leave
		jmp	sub_62B8DAC0
; ---------------------------------------------------------------------------
		align 4

loc_62B8DE38:				; CODE XREF: sub_62B8DDB8+21j
		cmp	eax, 7
		jz	short loc_62B8DE58
		mov	eax, [ebx+10h]
		mov	[esp+38h+var_24], eax
		mov	[esp+38h+var_28], 0
		mov	[esp+38h+var_2C], 2
		jmp	short loc_62B8DDFF
; ---------------------------------------------------------------------------
		align 4

loc_62B8DE58:				; CODE XREF: sub_62B8DDB8+83j
		mov	eax, [ebx+10h]
		mov	[esp+38h+var_24], eax
		mov	[esp+38h+var_28], 0
		mov	[esp+38h+var_2C], 3
		jmp	short loc_62B8DDFF
sub_62B8DDB8	endp

; ---------------------------------------------------------------------------
		align 4
; Exported entry 179. silc_client_perform_key_agreement

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public silc_client_perform_key_agreement
silc_client_perform_key_agreement proc near

var_58		= dword	ptr -58h
var_54		= dword	ptr -54h
var_50		= dword	ptr -50h
var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h
arg_10		= dword	ptr  18h
arg_14		= dword	ptr  1Ch
arg_18		= dword	ptr  20h
arg_1C		= dword	ptr  24h
arg_20		= dword	ptr  28h
arg_24		= dword	ptr  2Ch

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		sub	esp, 4Ch
		mov	eax, [ebp+arg_0]
		mov	[ebp+var_1C], eax
		mov	ebx, [ebp+arg_4]
		mov	esi, [ebp+arg_8]
		mov	edx, [ebp+arg_C]
		mov	[ebp+var_20], edx
		mov	ecx, [ebp+arg_10]
		mov	[ebp+var_2C], ecx
		mov	eax, [ebp+arg_14]
		mov	[ebp+var_30], eax
		mov	edx, [ebp+arg_18]
		mov	ecx, [ebp+arg_1C]
		mov	eax, [ebp+arg_20]
		mov	[ebp+var_24], eax
		mov	eax, [ebp+arg_24]
		mov	[ebp+var_28], eax
		test	esi, esi
		jz	loc_62B8DF84
		test	edx, edx
		jz	loc_62B8DF84
		test	ecx, ecx
		jz	loc_62B8DF84
		mov	eax, [ebx]
		cmp	eax, esi
		jz	loc_62B8DFB0
		mov	[esp+58h+var_54], 18h
		mov	[esp+58h+var_58], 1
		mov	[ebp+var_34], edx
		mov	[ebp+var_38], ecx
		call	silc_calloc
		mov	edi, eax
		test	eax, eax
		mov	edx, [ebp+var_34]
		mov	ecx, [ebp+var_38]
		jz	loc_62B8DFCC
		mov	eax, [ebp+var_1C]
		mov	[edi], eax
		mov	[edi+4], ebx
		mov	eax, [ebp+var_24]
		mov	[edi+0Ch], eax
		mov	eax, [ebp+var_28]
		mov	[edi+10h], eax
		mov	[esp+58h+var_50], esi
		mov	[esp+58h+var_54], ebx
		mov	eax, [ebp+var_1C]
		mov	[esp+58h+var_58], eax
		mov	[ebp+var_34], edx
		mov	[ebp+var_38], ecx
		call	silc_client_ref_client
		mov	[esi+3F4h], edi
		mov	eax, [ebp+var_20]
		test	eax, eax
		mov	edx, [ebp+var_34]
		mov	ecx, [ebp+var_38]
		jz	short loc_62B8DF40
		mov	eax, [ebp+var_20]
		mov	byte ptr [eax+25h], 1

loc_62B8DF40:				; CODE XREF: silc_client_perform_key_agreement+C3j
		mov	[esp+58h+var_3C], esi ;	int
		mov	[esp+58h+var_40], offset sub_62B8DDB8 ;	int
		mov	[esp+58h+var_44], ecx ;	int
		mov	[esp+58h+var_48], edx ;	char *
		mov	edx, [ebp+var_30]
		mov	[esp+58h+var_4C], edx ;	int
		mov	ecx, [ebp+var_2C]
		mov	[esp+58h+var_50], ecx ;	int
		mov	eax, [ebp+var_20]
		mov	[esp+58h+var_54], eax ;	int
		mov	edx, [ebp+var_1C]
		mov	[esp+58h+var_58], edx ;	int
		call	silc_client_connect_to_client
		mov	[edi+14h], eax
		test	eax, eax
		jz	short loc_62B8DFF0
		add	esp, 4Ch
		pop	ebx
		pop	esi
		pop	edi
		leave
		retn
; ---------------------------------------------------------------------------
		align 4

loc_62B8DF84:				; CODE XREF: silc_client_perform_key_agreement+3Bj
					; silc_client_perform_key_agreement+43j ...
		mov	edx, [ebp+var_28]
		mov	[ebp+arg_14], edx
		mov	[ebp+arg_10], 0
		mov	[ebp+arg_C], 1
		mov	[ebp+arg_8], esi

loc_62B8DF9B:				; CODE XREF: silc_client_perform_key_agreement+153j
		mov	[ebp+arg_4], ebx
		mov	ecx, [ebp+var_1C]
		mov	[ebp+arg_0], ecx

loc_62B8DFA4:				; CODE XREF: silc_client_perform_key_agreement+178j
		mov	ecx, [ebp+var_24]
		add	esp, 4Ch
		pop	ebx
		pop	esi
		pop	edi
		leave
		jmp	ecx
; ---------------------------------------------------------------------------

loc_62B8DFB0:				; CODE XREF: silc_client_perform_key_agreement+55j
		mov	edx, [ebp+var_28]
		mov	[ebp+arg_14], edx
		mov	[ebp+arg_10], 0
		mov	[ebp+arg_C], 6
		mov	[ebp+arg_8], eax
		jmp	short loc_62B8DF9B
; ---------------------------------------------------------------------------
		align 4

loc_62B8DFCC:				; CODE XREF: silc_client_perform_key_agreement+7Fj
		mov	eax, [ebp+var_28]
		mov	[ebp+arg_14], eax
		mov	[ebp+arg_10], 0
		mov	[ebp+arg_C], 7
		mov	[ebp+arg_8], esi
		mov	[ebp+arg_4], ebx
		mov	edx, [ebp+var_1C]
		mov	[ebp+arg_0], edx
		jmp	short loc_62B8DFA4
; ---------------------------------------------------------------------------
		align 10h

loc_62B8DFF0:				; CODE XREF: silc_client_perform_key_agreement+105j
		mov	ecx, [ebp+var_28]
		mov	[esp+58h+var_44], ecx
		mov	[esp+58h+var_48], 0
		mov	[esp+58h+var_4C], 1
		mov	[esp+58h+var_50], esi
		mov	[esp+58h+var_54], ebx
		mov	eax, [ebp+var_1C]
		mov	[esp+58h+var_58], eax
		call	[ebp+var_24]
		mov	ecx, esi
		mov	edx, ebx
		mov	eax, [ebp+var_1C]
		add	esp, 4Ch
		pop	ebx
		pop	esi
		pop	edi
		leave
		jmp	sub_62B8DAC0
silc_client_perform_key_agreement endp

; ---------------------------------------------------------------------------
		align 4
; Exported entry 200. silc_client_send_key_agreement

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public silc_client_send_key_agreement
silc_client_send_key_agreement proc near

var_68		= dword	ptr -68h
var_64		= dword	ptr -64h
var_60		= dword	ptr -60h
var_5C		= dword	ptr -5Ch
var_58		= dword	ptr -58h
var_54		= dword	ptr -54h
var_50		= dword	ptr -50h
var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2A		= word ptr -2Ah
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h
arg_10		= dword	ptr  18h
arg_14		= dword	ptr  1Ch
arg_18		= dword	ptr  20h
arg_1C		= dword	ptr  24h

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		sub	esp, 5Ch
		mov	eax, [ebp+arg_0]
		mov	[ebp+var_20], eax
		mov	ebx, [ebp+arg_4]
		mov	esi, [ebp+arg_8]
		mov	edi, [ebp+arg_C]
		mov	ecx, [ebp+arg_10]
		mov	edx, [ebp+arg_14]
		mov	eax, [ebp+arg_18]
		mov	[ebp+var_24], eax
		mov	eax, [ebp+arg_1C]
		mov	[ebp+var_28], eax
		test	esi, esi
		jz	loc_62B8E220
		mov	eax, [ebx+54h]
		test	byte ptr [eax+12Dh], 2
		jnz	loc_62B8E220
		mov	eax, [esi+3F4h]
		test	eax, eax
		jz	short loc_62B8E098
		mov	edx, [ebp+var_28]
		mov	[ebp+arg_14], edx
		mov	[ebp+arg_10], 0
		mov	[ebp+arg_C], 5

loc_62B8E08C:				; CODE XREF: silc_client_send_key_agreement+2BCj
					; silc_client_send_key_agreement+2E4j ...
		mov	ecx, [ebp+var_24]
		add	esp, 5Ch
		pop	ebx
		pop	esi
		pop	edi
		leave
		jmp	ecx
; ---------------------------------------------------------------------------

loc_62B8E098:				; CODE XREF: silc_client_send_key_agreement+4Aj
		mov	eax, [ebx]
		cmp	eax, esi
		jz	loc_62B8E315
		test	edi, edi
		jz	loc_62B8E233
		mov	eax, [edi+18h]
		test	eax, eax
		jz	loc_62B8E228

loc_62B8E0B5:				; CODE XREF: silc_client_send_key_agreement+201j
		mov	[esp+68h+var_64], 18h
		mov	[esp+68h+var_68], 1
		mov	[ebp+var_30], edx
		mov	[ebp+var_34], ecx
		call	silc_calloc
		mov	[ebp+var_1C], eax
		test	eax, eax
		mov	edx, [ebp+var_30]
		mov	ecx, [ebp+var_34]
		jz	loc_62B8E2C8
		mov	[esp+68h+var_50], esi
		mov	[esp+68h+var_54], offset sub_62B8DDB8
		mov	[esp+68h+var_58], edx
		mov	[esp+68h+var_5C], ecx
		mov	[esp+68h+var_60], edi
		mov	eax, [ebx+54h]
		mov	eax, [eax+0B4h]
		mov	[esp+68h+var_64], eax
		mov	eax, [ebp+var_20]
		mov	[esp+68h+var_68], eax
		call	silc_client_listener_add
		mov	edx, [ebp+var_1C]
		mov	[edx+8], eax
		test	eax, eax
		jz	loc_62B8E2F0
		mov	edx, [edi+18h]
		movzx	eax, byte ptr [edi+14h]
		mov	[ebp+var_2A], ax
		mov	eax, [ebp+var_20]
		mov	ecx, [ebp+var_1C]
		mov	[ecx], eax
		mov	[ecx+4], ebx
		mov	eax, [ebp+var_24]
		mov	[ecx+0Ch], eax
		mov	eax, [ebp+var_28]
		mov	[ecx+10h], eax
		mov	[esp+68h+var_60], esi
		mov	[esp+68h+var_64], ebx
		mov	ecx, [ebp+var_20]
		mov	[esp+68h+var_68], ecx
		mov	[ebp+var_30], edx
		call	silc_client_ref_client
		mov	eax, [ebp+var_1C]
		mov	[esi+3F4h], eax
		or	byte ptr [esi+402h], 4
		movzx	eax, [ebp+var_2A]
		mov	edx, [ebp+var_30]

loc_62B8E16D:				; CODE XREF: silc_client_send_key_agreement+20Bj
		mov	[esp+68h+var_60], 0
		mov	[esp+68h+var_64], eax
		mov	[esp+68h+var_68], edx
		call	silc_key_agreement_payload_encode
		mov	[ebp+var_1C], eax
		test	eax, eax
		jz	loc_62B8E33A
		mov	eax, [ebp+var_1C]
		mov	edx, [eax+4]
		mov	[esp+68h+var_40], 0
		mov	[esp+68h+var_44], 0
		mov	eax, [eax+8]
		sub	eax, edx
		mov	[esp+68h+var_48], eax
		mov	[esp+68h+var_4C], edx
		lea	eax, [esi+38Ch]
		mov	[esp+68h+var_50], eax
		mov	[esp+68h+var_54], 2
		mov	[esp+68h+var_58], 0
		mov	[esp+68h+var_5C], 0
		mov	[esp+68h+var_60], 0
		mov	[esp+68h+var_64], 19h
		mov	eax, [ebx+3Ch]
		mov	[esp+68h+var_68], eax
		call	silc_packet_send_ext
		test	al, al
		jz	short loc_62B8E23C
		test	edi, edi
		jz	short loc_62B8E1FF
		mov	eax, [edi+30h]
		test	eax, eax
		jnz	loc_62B8E288

loc_62B8E1FF:				; CODE XREF: silc_client_send_key_agreement+1C6j
					; silc_client_send_key_agreement+295j
		mov	edx, [ebp+var_1C]
		mov	eax, [edx]
		mov	[esp+68h+var_68], eax
		call	silc_free
		mov	ecx, [ebp+var_1C]
		mov	[ebp+arg_0], ecx

loc_62B8E212:				; CODE XREF: silc_client_send_key_agreement+257j
		add	esp, 5Ch
		pop	ebx
		pop	esi
		pop	edi
		leave
		jmp	silc_free
; ---------------------------------------------------------------------------
		align 10h

loc_62B8E220:				; CODE XREF: silc_client_send_key_agreement+2Cj
					; silc_client_send_key_agreement+3Cj
		add	esp, 5Ch
		pop	ebx
		pop	esi
		pop	edi
		leave
		retn
; ---------------------------------------------------------------------------

loc_62B8E228:				; CODE XREF: silc_client_send_key_agreement+83j
		mov	eax, [edi+1Ch]
		test	eax, eax
		jnz	loc_62B8E0B5

loc_62B8E233:				; CODE XREF: silc_client_send_key_agreement+78j
		xor	eax, eax
		xor	edx, edx
		jmp	loc_62B8E16D
; ---------------------------------------------------------------------------

loc_62B8E23C:				; CODE XREF: silc_client_send_key_agreement+1C2j
		mov	eax, [ebp+var_28]
		mov	[esp+68h+var_54], eax
		mov	[esp+68h+var_58], 0
		mov	[esp+68h+var_5C], 1
		mov	[esp+68h+var_60], esi
		mov	[esp+68h+var_64], ebx
		mov	edx, [ebp+var_20]
		mov	[esp+68h+var_68], edx
		call	[ebp+var_24]
		mov	ecx, esi
		mov	edx, ebx
		mov	eax, [ebp+var_20]
		call	sub_62B8DAC0
		mov	ecx, [ebp+var_1C]
		mov	eax, [ecx]
		mov	[esp+68h+var_68], eax
		call	silc_free
		mov	eax, [ebp+var_1C]
		mov	[ebp+arg_0], eax
		jmp	short loc_62B8E212
; ---------------------------------------------------------------------------
		align 4

loc_62B8E288:				; CODE XREF: silc_client_send_key_agreement+1CDj
		mov	[esp+68h+var_50], 1
		mov	[esp+68h+var_54], 0
		mov	[esp+68h+var_58], eax
		mov	[esp+68h+var_5C], esi
		mov	[esp+68h+var_60], offset silc_client_keyagr_timeout
		mov	[esp+68h+var_64], 0
		mov	eax, [ebx+54h]
		mov	eax, [eax+0B4h]
		mov	[esp+68h+var_68], eax
		call	silc_schedule_task_add
		jmp	loc_62B8E1FF
; ---------------------------------------------------------------------------
		align 4

loc_62B8E2C8:				; CODE XREF: silc_client_send_key_agreement+AEj
		mov	eax, [ebp+var_28]
		mov	[ebp+arg_14], eax
		mov	[ebp+arg_10], 0
		mov	[ebp+arg_C], 7
		mov	[ebp+arg_8], esi
		mov	[ebp+arg_4], ebx
		mov	edx, [ebp+var_20]
		mov	[ebp+arg_0], edx
		jmp	loc_62B8E08C
; ---------------------------------------------------------------------------
		align 10h

loc_62B8E2F0:				; CODE XREF: silc_client_send_key_agreement+ECj
		mov	ecx, [ebp+var_28]
		mov	[ebp+arg_14], ecx
		mov	[ebp+arg_10], 0
		mov	[ebp+arg_C], 7
		mov	[ebp+arg_8], esi
		mov	[ebp+arg_4], ebx
		mov	eax, [ebp+var_20]
		mov	[ebp+arg_0], eax
		jmp	loc_62B8E08C
; ---------------------------------------------------------------------------

loc_62B8E315:				; CODE XREF: silc_client_send_key_agreement+70j
		mov	edx, [ebp+var_28]
		mov	[ebp+arg_14], edx
		mov	[ebp+arg_10], 0
		mov	[ebp+arg_C], 6
		mov	[ebp+arg_8], eax
		mov	[ebp+arg_4], ebx
		mov	ecx, [ebp+var_20]
		mov	[ebp+arg_0], ecx
		jmp	loc_62B8E08C
; ---------------------------------------------------------------------------

loc_62B8E33A:				; CODE XREF: silc_client_send_key_agreement+15Aj
		mov	edx, [ebp+var_28]
		mov	[esp+68h+var_54], edx
		mov	[esp+68h+var_58], 0
		mov	[esp+68h+var_5C], 7
		mov	[esp+68h+var_60], esi
		mov	[esp+68h+var_64], ebx
		mov	ecx, [ebp+var_20]
		mov	[esp+68h+var_68], ecx
		call	[ebp+var_24]
		mov	ecx, esi
		mov	edx, ebx
		mov	eax, [ebp+var_20]
		add	esp, 5Ch
		pop	ebx
		pop	esi
		pop	edi
		leave
		jmp	sub_62B8DAC0
silc_client_send_key_agreement endp

; ---------------------------------------------------------------------------
		align 4
; Exported entry 153. silc_client_listener_get_local_port

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public silc_client_listener_get_local_port
silc_client_listener_get_local_port proc near ;	CODE XREF: silc_client_file_receive+175p
					; silc_client_file_send+273p

arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		mov	eax, [ebp+arg_0]
		mov	eax, [eax+30h]
		leave
		retn
silc_client_listener_get_local_port endp

; ---------------------------------------------------------------------------
		align 4
; Exported entry 152. silc_client_listener_free

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public silc_client_listener_free
silc_client_listener_free proc near	; CODE XREF: silc_client_file_receive+30Ep
					; silc_client_file_send+3F3p ...

var_18		= dword	ptr -18h
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	ebx
		sub	esp, 14h
		mov	ebx, [ebp+arg_0]
		mov	eax, [ebx+58h]
		test	eax, eax
		jz	short loc_62B8E39D
		mov	[esp+18h+var_18], eax
		call	silc_net_close_listener

loc_62B8E39D:				; CODE XREF: silc_client_listener_free+Fj
		mov	eax, [ebx+5Ch]
		mov	[esp+18h+var_18], eax
		call	silc_packet_stream_destroy
		mov	[ebp+arg_0], ebx
		add	esp, 14h
		pop	ebx
		leave
		jmp	silc_free
silc_client_listener_free endp

; ---------------------------------------------------------------------------
		align 4

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_62B8E3B8	proc near		; DATA XREF: sub_62B8E3F0+63o

var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		push	ebx
		sub	esp, 14h
		mov	ebx, [ebp+arg_4]
		mov	edx, [ebx+4]
		mov	ecx, [ebx+8]
		cmp	byte ptr [ebp+arg_0], 1
		sbb	eax, eax
		and	eax, 8
		mov	[esp+18h+var_10], ecx
		mov	[esp+18h+var_14], eax
		mov	eax, [ebx]
		mov	[esp+18h+var_18], eax
		call	edx
		mov	[ebp+arg_0], ebx
		add	esp, 14h
		pop	ebx
		leave
		jmp	silc_free
sub_62B8E3B8	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_62B8E3F0	proc near		; DATA XREF: sub_62B8E7A8+163o

var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h
arg_10		= dword	ptr  18h

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		sub	esp, 3Ch
		mov	edx, [ebp+arg_0]
		mov	eax, [ebp+arg_4]
		mov	[ebp+var_1C], eax
		mov	ebx, [ebp+arg_8]
		mov	ecx, [ebp+arg_C]
		mov	edi, [ebp+arg_10]
		mov	esi, [ebx+4Ch]
		mov	eax, [ebx+54h]
		cmp	dword ptr [eax+4], 0
		jz	short loc_62B8E41D
		cmp	byte ptr [eax+8], 0
		jz	short loc_62B8E47C

loc_62B8E41D:				; CODE XREF: sub_62B8E3F0+25j
		mov	[esp+48h+var_44], 0Ch
		mov	[esp+48h+var_48], 1
		mov	[ebp+var_20], edx
		mov	[ebp+var_24], ecx
		call	silc_calloc
		test	eax, eax
		mov	edx, [ebp+var_20]
		mov	ecx, [ebp+var_24]
		jz	short loc_62B8E490
		mov	[eax], edx
		mov	[eax+4], ecx
		mov	[eax+8], edi
		mov	edx, [esi+18h]
		mov	edx, [edx+48h]
		mov	[esp+48h+var_34], eax
		mov	[esp+48h+var_38], offset sub_62B8E3B8
		mov	eax, [ebp+var_1C]
		mov	[esp+48h+var_3C], eax
		mov	[esp+48h+var_40], 1
		mov	[esp+48h+var_44], ebx
		mov	[esp+48h+var_48], esi
		call	dword ptr [edx+1Ch]
		add	esp, 3Ch
		pop	ebx
		pop	esi
		pop	edi
		leave
		retn
; ---------------------------------------------------------------------------

loc_62B8E47C:				; CODE XREF: sub_62B8E3F0+2Bj
		mov	[ebp+arg_8], edi
		mov	[ebp+arg_4], 8

loc_62B8E486:				; CODE XREF: sub_62B8E3F0+ADj
		add	esp, 3Ch
		pop	ebx
		pop	esi
		pop	edi
		leave
		jmp	ecx
; ---------------------------------------------------------------------------
		align 10h

loc_62B8E490:				; CODE XREF: sub_62B8E3F0+4Fj
		mov	[ebp+arg_8], edi
		mov	[ebp+arg_4], 8
		mov	[ebp+arg_0], edx
		jmp	short loc_62B8E486
sub_62B8E3F0	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 151. silc_client_listener_add

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public silc_client_listener_add
silc_client_listener_add proc near	; CODE XREF: silc_client_file_receive+143p
					; silc_client_file_send+241p ...

var_68		= dword	ptr -68h
var_64		= dword	ptr -64h
var_60		= dword	ptr -60h
var_5C		= dword	ptr -5Ch
var_58		= dword	ptr -58h
var_54		= dword	ptr -54h
var_50		= dword	ptr -50h
var_4C		= dword	ptr -4Ch
var_3C		= dword	ptr -3Ch
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_1C		= dword	ptr -1Ch
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h
arg_10		= dword	ptr  18h
arg_14		= dword	ptr  1Ch
arg_18		= dword	ptr  20h

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		sub	esp, 5Ch
		mov	edx, [ebp+arg_0]
		test	edx, edx
		jnz	short loc_62B8E4BC

loc_62B8E4B0:				; CODE XREF: silc_client_listener_add+21j
					; silc_client_listener_add+28j	...
		xor	ebx, ebx

loc_62B8E4B2:				; CODE XREF: silc_client_listener_add+56j
					; silc_client_listener_add+F6j	...
		mov	eax, ebx
		add	esp, 5Ch
		pop	ebx
		pop	esi
		pop	edi
		leave
		retn
; ---------------------------------------------------------------------------

loc_62B8E4BC:				; CODE XREF: silc_client_listener_add+Ej
		mov	esi, [ebp+arg_4]
		test	esi, esi
		jz	short loc_62B8E4B0
		mov	ebx, [ebp+arg_8]
		test	ebx, ebx
		jz	short loc_62B8E4B0
		mov	eax, [ebp+arg_8]
		mov	ecx, [eax+18h]
		test	ecx, ecx
		jz	loc_62B8E694

loc_62B8E4D8:				; CODE XREF: silc_client_listener_add+1FFj
		mov	[esp+68h+var_64], 60h
		mov	[esp+68h+var_68], 1
		mov	[ebp+var_30], edx
		call	silc_calloc
		mov	ebx, eax
		test	eax, eax
		mov	edx, [ebp+var_30]
		jz	short loc_62B8E4B2
		mov	[eax], edx
		mov	ecx, [ebp+arg_4]
		mov	[eax+4], ecx
		mov	eax, [ebp+arg_14]
		mov	[ebx+8], eax
		mov	eax, [ebp+arg_18]
		mov	[ebx+0Ch], eax
		lea	edi, [ebx+10h]
		mov	ecx, 10h
		mov	esi, [ebp+arg_8]
		rep movsd
		mov	eax, [ebp+arg_C]
		mov	[ebx+50h], eax
		mov	eax, [ebp+arg_10]
		mov	[ebx+54h], eax
		mov	esi, [ebp+arg_8]
		cmp	byte ptr [esi+14h], 0
		jnz	loc_62B8E5C0
		mov	ecx, [ebp+arg_8]
		mov	eax, [ecx+20h]
		mov	esi, [ecx+1Ch]
		test	esi, esi
		jz	loc_62B8E6AC
		add	ecx, 1Ch

loc_62B8E546:				; CODE XREF: silc_client_listener_add+212j
		mov	[esp+68h+var_4C], ebx
		mov	[esp+68h+var_50], offset sub_62B8EA8C
		mov	esi, [ebp+arg_4]
		mov	[esp+68h+var_54], esi
		mov	[esp+68h+var_58], 0
		mov	[esp+68h+var_5C], 1
		mov	[esp+68h+var_60], eax
		mov	[esp+68h+var_64], 1
		mov	[esp+68h+var_68], ecx
		mov	[ebp+var_30], edx
		call	silc_net_tcp_create_listener
		mov	[ebx+58h], eax
		test	eax, eax
		mov	edx, [ebp+var_30]
		jz	loc_62B8E737
		mov	edx, [ebp+arg_8]
		mov	edx, [edx+20h]
		test	edx, edx
		jnz	loc_62B8E4B2
		mov	[esp+68h+var_64], 0
		mov	[esp+68h+var_68], eax
		call	silc_net_listener_get_port
		movzx	edx, word ptr [eax]
		mov	[ebx+30h], edx
		mov	[esp+68h+var_68], eax
		call	silc_free
		jmp	loc_62B8E4B2
; ---------------------------------------------------------------------------
		align 10h

loc_62B8E5C0:				; CODE XREF: silc_client_listener_add+8Cj
		mov	ecx, [esi+20h]
		mov	eax, [esi+1Ch]
		test	eax, eax
		jz	loc_62B8E6A4

loc_62B8E5CE:				; CODE XREF: silc_client_listener_add+207j
		mov	edi, [ebp+arg_4]
		mov	[esp+68h+var_58], edi
		mov	[esp+68h+var_5C], 0
		mov	[esp+68h+var_60], 0
		mov	[esp+68h+var_64], ecx
		mov	[esp+68h+var_68], eax
		mov	[ebp+var_30], edx
		call	silc_net_udp_connect
		mov	esi, eax
		mov	[esp+68h+var_60], eax
		mov	[esp+68h+var_64], edi
		mov	edx, [ebp+var_30]
		mov	eax, [edx+18h]
		mov	eax, [eax+50h]
		mov	[esp+68h+var_68], eax
		call	silc_packet_stream_create
		mov	[ebx+5Ch], eax
		test	eax, eax
		mov	edx, [ebp+var_30]
		jz	loc_62B8E6B7
		mov	[esp+68h+var_54], 0FFFFFFFFh
		mov	[esp+68h+var_58], 0
		mov	[esp+68h+var_5C], 0F4240h
		mov	[esp+68h+var_60], ebx
		mov	[esp+68h+var_64], offset off_62BA700C
		mov	[esp+68h+var_68], eax
		call	silc_packet_stream_link
		mov	edx, [ebp+arg_8]
		mov	edi, [edx+20h]
		test	edi, edi
		jnz	loc_62B8E4B2
		mov	[esp+68h+var_58], 0
		mov	[esp+68h+var_5C], 0
		mov	[esp+68h+var_60], 0
		lea	eax, [ebp+var_1C]
		mov	[esp+68h+var_64], eax
		mov	[esp+68h+var_68], esi
		call	silc_socket_stream_get_info
		mov	eax, [ebp+var_1C]
		mov	[esp+68h+var_68], eax
		call	silc_net_get_local_port
		movzx	eax, ax
		mov	[ebx+30h], eax
		jmp	loc_62B8E4B2
; ---------------------------------------------------------------------------

loc_62B8E694:				; CODE XREF: silc_client_listener_add+32j
		mov	eax, [eax+1Ch]
		test	eax, eax
		jz	loc_62B8E4B0
		jmp	loc_62B8E4D8
; ---------------------------------------------------------------------------

loc_62B8E6A4:				; CODE XREF: silc_client_listener_add+128j
		mov	eax, [esi+18h]
		jmp	loc_62B8E5CE
; ---------------------------------------------------------------------------

loc_62B8E6AC:				; CODE XREF: silc_client_listener_add+9Dj
		mov	ecx, [ebp+arg_8]
		add	ecx, 18h
		jmp	loc_62B8E546
; ---------------------------------------------------------------------------

loc_62B8E6B7:				; CODE XREF: silc_client_listener_add+177j
		mov	eax, [edx+18h]
		mov	eax, [eax+48h]
		mov	eax, [eax]
		mov	[ebp+var_2C], eax
		call	_errno
		mov	eax, [eax]
		mov	[esp+68h+var_68], eax ;	int
		call	strerror
		mov	ecx, [ebp+arg_8]
		mov	ecx, [ecx+20h]
		mov	[ebp+var_3C], ecx
		mov	edi, [ebp+arg_8]
		mov	ecx, [edi+1Ch]
		test	ecx, ecx
		mov	edx, [ebp+var_30]
		jz	loc_62B8E79A

loc_62B8E6EB:				; CODE XREF: silc_client_listener_add+2FDj
		mov	[esp+68h+var_50], eax
		mov	eax, [ebp+var_3C]
		mov	[esp+68h+var_54], eax
		mov	[esp+68h+var_58], ecx
		mov	[esp+68h+var_5C], offset aCannotCreateUd ; "Cannot create UDP listener on %s on	por"...
		mov	[esp+68h+var_60], 2
		mov	[esp+68h+var_64], 0
		mov	[esp+68h+var_68], edx
		call	[ebp+var_2C]
		mov	[esp+68h+var_68], ebx
		call	silc_client_listener_free
		test	esi, esi
		jz	loc_62B8E4B0
		mov	[esp+68h+var_68], esi
		call	silc_stream_destroy
		xor	ebx, ebx
		jmp	loc_62B8E4B2
; ---------------------------------------------------------------------------

loc_62B8E737:				; CODE XREF: silc_client_listener_add+E8j
		mov	eax, [edx+18h]
		mov	eax, [eax+48h]
		mov	eax, [eax]
		mov	[ebp+var_2C], eax
		call	_errno
		mov	eax, [eax]
		mov	[esp+68h+var_68], eax ;	int
		call	strerror
		mov	edi, [ebp+arg_8]
		mov	esi, [edi+20h]
		mov	ecx, [edi+1Ch]
		test	ecx, ecx
		mov	edx, [ebp+var_30]
		jz	short loc_62B8E7A2

loc_62B8E761:				; CODE XREF: silc_client_listener_add+305j
		mov	[esp+68h+var_50], eax
		mov	[esp+68h+var_54], esi
		mov	[esp+68h+var_58], ecx
		mov	[esp+68h+var_5C], offset aCannotCreate_1 ; "Cannot create listener on %s on port %d"...
		mov	[esp+68h+var_60], 2
		mov	[esp+68h+var_64], 0
		mov	[esp+68h+var_68], edx
		call	[ebp+var_2C]
		mov	[esp+68h+var_68], ebx
		call	silc_client_listener_free
		xor	ebx, ebx
		jmp	loc_62B8E4B2
; ---------------------------------------------------------------------------

loc_62B8E79A:				; CODE XREF: silc_client_listener_add+245j
		mov	ecx, [edi+18h]
		jmp	loc_62B8E6EB
; ---------------------------------------------------------------------------

loc_62B8E7A2:				; CODE XREF: silc_client_listener_add+2BFj
		mov	ecx, [edi+18h]
		jmp	short loc_62B8E761
silc_client_listener_add endp

; ---------------------------------------------------------------------------
		align 4

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_62B8E7A8	proc near		; CODE XREF: sub_62B8EA1C+61p
					; sub_62B8EA8C+37j

var_78		= dword	ptr -78h
var_74		= dword	ptr -74h
var_70		= byte ptr -70h
var_6C		= dword	ptr -6Ch
var_68		= dword	ptr -68h
var_64		= dword	ptr -64h
var_60		= dword	ptr -60h
var_5C		= dword	ptr -5Ch
var_58		= dword	ptr -58h
var_54		= dword	ptr -54h
var_3C		= dword	ptr -3Ch
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= word ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1A		= word ptr -1Ah

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		sub	esp, 6Ch
		mov	ebx, eax
		mov	edi, [eax]
		mov	[ebp+var_20], 0
		mov	[ebp+var_24], 0
		mov	[esp+78h+var_78], edx
		mov	[ebp+var_3C], edx
		call	silc_packet_stream_get_stream
		lea	ecx, [ebp+var_1A]
		mov	[esp+78h+var_68], ecx
		lea	ecx, [ebp+var_24]
		mov	[esp+78h+var_6C], ecx
		lea	ecx, [ebp+var_20]
		mov	dword ptr [esp+78h+var_70], ecx
		mov	[esp+78h+var_74], 0
		mov	[esp+78h+var_78], eax
		call	silc_socket_stream_get_info
		mov	ecx, [ebp+var_24]
		test	ecx, ecx
		mov	edx, [ebp+var_3C]
		jz	loc_62B8E958
		mov	ax, [ebp+var_1A]
		test	ax, ax
		jz	loc_62B8E958
		mov	esi, [ebp+var_20]
		test	esi, esi
		jz	loc_62B8E99C

loc_62B8E819:				; CODE XREF: sub_62B8E7A8+1F9j
		mov	ecx, [ebx+0Ch]
		mov	[esp+78h+var_54], ecx ;	int
		mov	ecx, [ebx+8]
		mov	[esp+78h+var_58], ecx ;	int
		movzx	eax, ax
		mov	[esp+78h+var_5C], eax ;	int
		mov	[esp+78h+var_60], esi ;	char *
		mov	eax, [ebx+54h]
		mov	[esp+78h+var_64], eax ;	int
		mov	eax, [ebx+50h]
		mov	[esp+78h+var_68], eax ;	int
		lea	eax, [ebx+10h]
		mov	[esp+78h+var_6C], eax ;	int
		mov	dword ptr [esp+78h+var_70], 0 ;	char
		mov	[esp+78h+var_74], 1 ; int
		mov	[esp+78h+var_78], edi ;	int
		mov	[ebp+var_3C], edx
		call	silc_client_add_connection
		mov	esi, eax
		test	eax, eax
		mov	edx, [ebp+var_3C]
		jz	loc_62B8E9DC
		mov	[eax+3Ch], edx
		mov	eax, [eax+54h]
		mov	edx, [ebx+4]
		mov	[eax+0B4h], edx
		mov	[esp+78h+var_74], esi
		mov	eax, [esi+3Ch]
		mov	[esp+78h+var_78], eax
		call	silc_packet_set_context
		mov	edx, [esi+54h]
		mov	[esp+78h+var_64], ebx
		mov	eax, [ebx+54h]
		mov	[esp+78h+var_68], eax
		mov	eax, [ebx+50h]
		mov	[esp+78h+var_6C], eax
		mov	eax, [ebx+14h]
		mov	dword ptr [esp+78h+var_70], eax
		mov	eax, [edx+0B4h]
		mov	[esp+78h+var_74], eax
		mov	eax, [edi+10h]
		mov	[esp+78h+var_78], eax
		mov	[ebp+var_3C], edx
		call	silc_ske_alloc
		mov	edx, [ebp+var_3C]
		mov	[edx+0BCh], eax
		mov	eax, [esi+54h]
		mov	eax, [eax+0BCh]
		test	eax, eax
		jz	loc_62B8E9A8
		mov	edx, [edi+18h]
		mov	edx, [edx+70h]
		mov	[ebp+var_30], edx
		mov	[ebp+var_2C], 4
		cmp	byte ptr [ebx+24h], 0
		jz	short loc_62B8E8FF
		mov	[ebp+var_2C], 5
		mov	edx, [ebx+30h]
		mov	[ebp+var_28], dx

loc_62B8E8FF:				; CODE XREF: sub_62B8E7A8+147j
		mov	[esp+78h+var_6C], esi
		mov	dword ptr [esp+78h+var_70], offset sub_62B8EAD8
		mov	[esp+78h+var_74], offset sub_62B8E3F0
		mov	[esp+78h+var_78], eax
		call	silc_ske_set_callbacks
		mov	ebx, [esi+54h]
		lea	eax, [ebp+var_30]
		mov	dword ptr [esp+78h+var_70], eax
		mov	eax, [esi+3Ch]
		mov	[esp+78h+var_74], eax
		mov	eax, [ebx+0BCh]
		mov	[esp+78h+var_78], eax
		call	silc_ske_responder
		mov	[ebx+0FCh], eax
		mov	eax, [esi+54h]
		mov	edi, [eax+0FCh]
		test	edi, edi
		jz	short loc_62B8E9A8

loc_62B8E94D:				; CODE XREF: sub_62B8E7A8+22Cj
					; sub_62B8E7A8+26Cj
		add	esp, 6Ch
		pop	ebx
		pop	esi
		pop	edi
		leave
		retn
; ---------------------------------------------------------------------------
		align 4

loc_62B8E958:				; CODE XREF: sub_62B8E7A8+53j
					; sub_62B8E7A8+60j
		mov	eax, [ebx+0Ch]
		mov	[esp+78h+var_64], eax
		mov	[esp+78h+var_68], 0
		mov	[esp+78h+var_6C], 0
		mov	dword ptr [esp+78h+var_70], 3
		mov	[esp+78h+var_74], 0
		mov	[esp+78h+var_78], edi
		mov	[ebp+var_3C], edx
		call	dword ptr [ebx+8]
		mov	edx, [ebp+var_3C]
		mov	[esp+74h+var_74], edx
		call	silc_packet_stream_destroy
		add	esp, 6Ch
		pop	ebx
		pop	esi
		pop	edi
		leave
		retn
; ---------------------------------------------------------------------------
		align 4

loc_62B8E99C:				; CODE XREF: sub_62B8E7A8+6Bj
		mov	[ebp+var_20], ecx
		mov	esi, ecx
		jmp	loc_62B8E819
; ---------------------------------------------------------------------------
		align 4

loc_62B8E9A8:				; CODE XREF: sub_62B8E7A8+12Dj
					; sub_62B8E7A8+1A3j
		mov	eax, [esi+48h]
		mov	[esp+78h+var_64], eax
		mov	[esp+78h+var_68], 0
		mov	[esp+78h+var_6C], 0
		mov	dword ptr [esp+78h+var_70], 3
		mov	[esp+78h+var_74], esi
		mov	eax, [esi+4Ch]
		mov	[esp+78h+var_78], eax
		call	dword ptr [esi+44h]
		jmp	loc_62B8E94D
; ---------------------------------------------------------------------------
		align 4

loc_62B8E9DC:				; CODE XREF: sub_62B8E7A8+C1j
		mov	eax, [ebx+0Ch]
		mov	[esp+78h+var_64], eax
		mov	[esp+78h+var_68], 0
		mov	[esp+78h+var_6C], 0
		mov	dword ptr [esp+78h+var_70], 3
		mov	[esp+78h+var_74], 0
		mov	[esp+78h+var_78], edi
		call	dword ptr [ebx+8]
		mov	edx, [ebp+var_3C]
		mov	[esp+78h+var_78], edx
		call	silc_packet_stream_destroy
		jmp	loc_62B8E94D
sub_62B8E7A8	endp

; ---------------------------------------------------------------------------
		align 4

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_62B8EA1C	proc near		; DATA XREF: .data:off_62BA700Co

var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_10		= dword	ptr -10h
var_A		= word ptr -0Ah
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h

		push	ebp
		mov	ebp, esp
		push	ebx
		sub	esp, 24h
		mov	ebx, [ebp+arg_8]
		cmp	byte ptr [ebx+22h], 0Dh
		jz	short loc_62B8EA3C

loc_62B8EA2C:				; CODE XREF: sub_62B8EA1C+38j
					; sub_62B8EA1C+5Aj
		mov	[esp+28h+var_28], ebx
		call	silc_packet_free
		mov	al, 1
		add	esp, 24h
		pop	ebx
		leave
		retn
; ---------------------------------------------------------------------------

loc_62B8EA3C:				; CODE XREF: sub_62B8EA1C+Ej
		lea	eax, [ebp+var_A]
		mov	[esp+28h+var_20], eax
		lea	eax, [ebp+var_10]
		mov	[esp+28h+var_24], eax
		mov	[esp+28h+var_28], ebx
		call	silc_packet_get_sender
		test	al, al
		jz	short loc_62B8EA2C
		mov	[esp+28h+var_1C], ebx
		movzx	eax, [ebp+var_A]
		mov	[esp+28h+var_20], eax
		mov	eax, [ebp+var_10]
		mov	[esp+28h+var_24], eax
		mov	eax, [ebp+arg_4]
		mov	[esp+28h+var_28], eax
		call	silc_packet_stream_add_remote
		test	eax, eax
		jz	short loc_62B8EA2C
		mov	edx, eax
		mov	eax, [ebp+arg_C]
		call	sub_62B8E7A8
		mov	al, 1
		add	esp, 24h
		pop	ebx
		leave
		retn
sub_62B8EA1C	endp

; ---------------------------------------------------------------------------
		align 4

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_62B8EA8C	proc near		; DATA XREF: silc_client_listener_add+AAo

var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		push	esi
		push	ebx
		sub	esp, 10h
		mov	esi, [ebp+arg_4]
		mov	ebx, [ebp+arg_8]
		mov	[esp+18h+var_10], esi
		mov	eax, [ebx+4]
		mov	[esp+18h+var_14], eax
		mov	eax, [ebx]
		mov	eax, [eax+18h]
		mov	eax, [eax+50h]
		mov	[esp+18h+var_18], eax
		call	silc_packet_stream_create
		test	eax, eax
		jz	short loc_62B8EAC8
		mov	edx, eax
		mov	eax, ebx
		add	esp, 10h
		pop	ebx
		pop	esi
		leave
		jmp	sub_62B8E7A8
; ---------------------------------------------------------------------------

loc_62B8EAC8:				; CODE XREF: sub_62B8EA8C+2Bj
		mov	[ebp+arg_0], esi
		add	esp, 10h
		pop	ebx
		pop	esi
		leave
		jmp	silc_stream_destroy
sub_62B8EA8C	endp

; ---------------------------------------------------------------------------
		align 4

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_62B8EAD8	proc near		; DATA XREF: sub_62B8E7A8+15Bo

var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h
arg_14		= dword	ptr  1Ch

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		sub	esp, 3Ch
		mov	eax, [ebp+arg_4]
		mov	ebx, [ebp+arg_14]
		test	eax, eax
		jz	short loc_62B8EB34
		mov	edx, [ebx+44h]
		mov	edi, [ebx+48h]
		mov	ecx, [ebx+54h]
		mov	esi, [ecx+10Ch]
		mov	cl, [ecx+12Ch]
		cmp	eax, 11h
		setz	al
		movzx	eax, al
		lea	eax, [eax+eax*2+4]
		mov	[esp+48h+var_34], edi
		mov	[esp+48h+var_38], esi
		movzx	ecx, cl
		mov	[esp+48h+var_3C], ecx
		mov	[esp+48h+var_40], eax
		mov	[esp+48h+var_44], ebx
		mov	eax, [ebx+4Ch]
		mov	[esp+48h+var_48], eax
		call	edx
		add	esp, 3Ch
		pop	ebx
		pop	esi
		pop	edi
		leave
		retn
; ---------------------------------------------------------------------------

loc_62B8EB34:				; CODE XREF: sub_62B8EAD8+11j
		mov	eax, [ebx+54h]
		add	eax, 0ECh
		mov	[esp+48h+var_2C], eax
		lea	eax, [ebp+var_28]
		mov	[esp+48h+var_30], eax
		lea	eax, [ebp+var_24]
		mov	[esp+48h+var_34], eax
		lea	eax, [ebp+var_20]
		mov	[esp+48h+var_38], eax
		lea	eax, [ebp+var_1C]
		mov	[esp+48h+var_3C], eax
		mov	eax, [ebp+arg_8]
		mov	[esp+48h+var_40], eax
		mov	eax, [ebp+arg_C]
		mov	[esp+48h+var_44], eax
		mov	eax, [ebp+arg_0]
		mov	[esp+48h+var_48], eax
		call	silc_ske_set_keys
		test	al, al
		jz	short loc_62B8EBE0
		mov	[esp+48h+var_34], 0
		mov	eax, [ebp+var_28]
		mov	[esp+48h+var_38], eax
		mov	eax, [ebp+var_24]
		mov	[esp+48h+var_3C], eax
		mov	eax, [ebp+var_20]
		mov	[esp+48h+var_40], eax
		mov	eax, [ebp+var_1C]
		mov	[esp+48h+var_44], eax
		mov	eax, [ebx+3Ch]
		mov	[esp+48h+var_48], eax
		call	silc_packet_set_keys
		test	al, al
		jz	short loc_62B8EBE0
		mov	eax, [ebx+48h]
		mov	[esp+48h+var_34], eax
		mov	[esp+48h+var_38], 0
		mov	[esp+48h+var_3C], 0
		mov	[esp+48h+var_40], 0
		mov	[esp+48h+var_44], ebx
		mov	eax, [ebx+4Ch]
		mov	[esp+48h+var_48], eax
		call	dword ptr [ebx+44h]
		add	esp, 3Ch
		pop	ebx
		pop	esi
		pop	edi
		leave
		retn
; ---------------------------------------------------------------------------

loc_62B8EBE0:				; CODE XREF: sub_62B8EAD8+9Fj
					; sub_62B8EAD8+D2j
		mov	eax, [ebx+48h]
		mov	[esp+48h+var_34], eax
		mov	[esp+48h+var_38], 0
		mov	[esp+48h+var_3C], 0
		mov	[esp+48h+var_40], 4
		mov	[esp+48h+var_44], ebx
		mov	eax, [ebx+4Ch]
		mov	[esp+48h+var_48], eax
		call	dword ptr [ebx+44h]
		add	esp, 3Ch
		pop	ebx
		pop	esi
		pop	edi
		leave
		retn
sub_62B8EAD8	endp

; Exported entry 177. silc_client_notify_watch

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public silc_client_notify_watch
silc_client_notify_watch proc near	; DATA XREF: silc_client_notify:loc_62B92350o

var_A8		= dword	ptr -0A8h
var_A4		= dword	ptr -0A4h
var_A0		= dword	ptr -0A0h
var_9C		= dword	ptr -9Ch
var_98		= dword	ptr -98h
var_94		= dword	ptr -94h
var_90		= dword	ptr -90h
var_8C		= dword	ptr -8Ch
var_80		= dword	ptr -80h
var_7C		= dword	ptr -7Ch
var_78		= byte ptr -78h
var_5B		= byte ptr -5Bh
var_5A		= byte ptr -5Ah
var_59		= byte ptr -59h
var_58		= dword	ptr -58h
var_52		= word ptr -52h
var_50		= dword	ptr -50h
var_4A		= word ptr -4Ah
var_48		= byte ptr -48h
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		sub	esp, 9Ch
		mov	ebx, [ebp+arg_4]
		mov	edi, [ebx+4Ch]
		mov	eax, [ebp+arg_8]
		mov	esi, [eax+4]
		mov	[esp+0A8h+var_A8], esi
		call	silc_notify_get_type
		mov	[ebp+var_52], ax
		mov	[esp+0A8h+var_A8], esi
		call	silc_notify_get_args
		mov	[ebp+var_50], eax
		mov	[ebp+var_24], 0
		mov	[esp+0A8h+var_98], 0
		lea	edx, [ebp+var_48]
		mov	[esp+0A8h+var_9C], edx
		mov	[esp+0A8h+var_A0], 0
		mov	[esp+0A8h+var_A4], 1
		mov	[esp+0A8h+var_A8], eax
		call	silc_argument_get_decoded
		test	al, al
		jnz	short loc_62B8ECA8
		xor	esi, esi

loc_62B8EC77:				; CODE XREF: silc_client_notify_watch+14Ej
					; silc_client_notify_watch+158j ...
		mov	[esp+0A8h+var_A0], esi
		mov	[esp+0A8h+var_A4], ebx
		mov	[esp+0A8h+var_A8], edi
		call	silc_client_unref_client
		mov	[esp+0A8h+var_A4], offset silc_client_notify_processed
		mov	edx, [ebp+arg_0]
		mov	[esp+0A8h+var_A8], edx
		call	silc_fsm_next
		xor	eax, eax
		add	esp, 9Ch
		pop	ebx
		pop	esi
		pop	edi
		leave
		retn
; ---------------------------------------------------------------------------
		align 4

loc_62B8ECA8:				; CODE XREF: silc_client_notify_watch+5Fj
		lea	ecx, [ebp+var_48]
		mov	[esp+0A8h+var_A0], ecx
		mov	[esp+0A8h+var_A4], ebx
		mov	[esp+0A8h+var_A8], edi
		call	silc_client_get_client_by_id
		mov	esi, eax
		test	eax, eax
		jz	short loc_62B8ECCA
		test	byte ptr [eax+402h], 1
		jnz	short loc_62B8ED40

loc_62B8ECCA:				; CODE XREF: silc_client_notify_watch+ABj
		mov	[esp+0A8h+var_A0], esi
		mov	[esp+0A8h+var_A4], ebx
		mov	[esp+0A8h+var_A8], edi
		call	silc_client_unref_client
		mov	edx, [ebp+arg_0]
		mov	al, [edx+28h]
		mov	dl, al
		or	edx, 4
		mov	ecx, [ebp+arg_0]
		mov	[ecx+28h], dl
		test	al, 4
		jnz	loc_62B8EEF8

loc_62B8ECF3:				; CODE XREF: silc_client_notify_watch+310j
		mov	eax, [ebp+arg_8]
		mov	[esp+0A8h+var_94], eax
		mov	[esp+0A8h+var_98], offset sub_62B8F1E4
		mov	[esp+0A8h+var_9C], 0
		lea	edx, [ebp+var_48]
		mov	[esp+0A8h+var_A0], edx
		mov	[esp+0A8h+var_A4], ebx
		mov	[esp+0A8h+var_A8], edi
		call	silc_client_get_client_by_id_resolve
		mov	ecx, [ebp+arg_0]
		mov	dl, [ecx+28h]
		mov	al, dl
		shr	al, 2
		and	edx, 0FFFFFFFBh
		mov	[ecx+28h], dl
		shl	eax, 1
		and	eax, 2
		add	esp, 9Ch
		pop	ebx
		pop	esi
		pop	edi
		leave
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_62B8ED40:				; CODE XREF: silc_client_notify_watch+B4j
		lea	edx, [ebp+var_20]
		mov	[esp+0A8h+var_A0], edx
		mov	[esp+0A8h+var_A4], 3
		mov	eax, [ebp+var_50]
		mov	[esp+0A8h+var_A8], eax
		mov	[ebp+var_80], edx
		call	silc_argument_get_arg_type
		test	eax, eax
		mov	edx, [ebp+var_80]
		jz	loc_62B8EC77
		cmp	[ebp+var_20], 4
		jnz	loc_62B8EC77
		mov	cl, [eax]
		mov	[ebp+var_78], cl
		mov	cl, [eax+1]
		mov	[ebp+var_5B], cl
		mov	cl, [eax+2]
		mov	[ebp+var_5A], cl
		mov	al, [eax+3]
		mov	[ebp+var_59], al
		mov	[esp+0A8h+var_A0], edx
		mov	[esp+0A8h+var_A4], 4
		mov	eax, [ebp+var_50]
		mov	[esp+0A8h+var_A8], eax
		call	silc_argument_get_arg_type
		test	eax, eax
		jz	loc_62B8EF52
		cmp	[ebp+var_20], 2
		jnz	loc_62B8EC77
		movzx	edx, byte ptr [eax+1]
		mov	[ebp+var_4A], dx
		movzx	eax, byte ptr [eax]
		shl	eax, 8
		or	[ebp+var_4A], ax
		movzx	ecx, [ebp+var_4A]
		mov	[ebp+var_7C], ecx

loc_62B8EDCB:				; CODE XREF: silc_client_notify_watch+34Bj
		mov	[esp+0A8h+var_A0], 0
		mov	[esp+0A8h+var_A4], 2
		mov	eax, [ebp+var_50]
		mov	[esp+0A8h+var_A8], eax
		call	silc_argument_get_arg_type
		mov	[ebp+var_58], eax
		test	eax, eax
		jz	short loc_62B8EE34
		mov	[ebp+var_28], 0
		lea	eax, [ebp+var_28]
		mov	[esp+0A8h+var_9C], eax ; int
		mov	[esp+0A8h+var_A0], esi ; char *
		mov	[esp+0A8h+var_A4], ebx ; int
		mov	[esp+0A8h+var_A8], edi ; int
		call	silc_client_nickname_parse
		mov	eax, [ebp+var_28]
		test	eax, eax
		jz	short loc_62B8EE2C
		mov	[esp+0A8h+var_A4], eax
		mov	edx, [ebp+var_58]
		mov	[esp+0A8h+var_A8], edx
		call	silc_utf8_strcasecmp
		test	al, al
		jnz	loc_62B8EF64
		mov	eax, [ebp+var_28]

loc_62B8EE2C:				; CODE XREF: silc_client_notify_watch+1FCj
					; silc_client_notify_watch+35Aj
		mov	[esp+0A8h+var_A8], eax
		call	silc_free

loc_62B8EE34:				; CODE XREF: silc_client_notify_watch+1D7j
		lea	eax, [ebp+var_1C]
		mov	[esp+0A8h+var_A0], eax
		mov	[esp+0A8h+var_A4], 5
		mov	ecx, [ebp+var_50]
		mov	[esp+0A8h+var_A8], ecx
		call	silc_argument_get_arg_type
		test	eax, eax
		jz	loc_62B8EF73
		mov	ecx, [esi+3B0h]
		test	ecx, ecx
		jz	loc_62B8EF7E

loc_62B8EE64:				; CODE XREF: silc_client_notify_watch+365j
					; silc_client_notify_watch+394j
		movzx	edx, [ebp+var_59]
		mov	al, [ebp+var_78]
		shl	eax, 18h
		or	edx, eax
		movzx	eax, [ebp+var_5B]
		shl	eax, 10h
		or	edx, eax
		movzx	eax, [ebp+var_5A]
		shl	eax, 8
		or	edx, eax
		mov	eax, [ebx+4Ch]
		mov	eax, [eax+18h]
		mov	eax, [eax+48h]
		mov	[ebp+var_50], eax
		mov	[esp+0A8h+var_8C], ecx
		mov	eax, [ebp+var_7C]
		mov	[esp+0A8h+var_90], eax
		mov	[esp+0A8h+var_94], edx
		mov	ecx, [ebp+var_58]
		mov	[esp+0A8h+var_98], ecx
		mov	[esp+0A8h+var_9C], esi
		movzx	eax, [ebp+var_52]
		mov	[esp+0A8h+var_A0], eax
		mov	[esp+0A8h+var_A4], ebx
		mov	[esp+0A8h+var_A8], edi
		mov	[ebp+var_80], edx
		mov	eax, [ebp+var_50]
		call	dword ptr [eax+0Ch]
		mov	edx, [ebp+var_80]
		mov	[esi+3ACh], edx
		cmp	[ebp+var_4A], 4
		jz	short loc_62B8EF29
		cmp	[ebp+var_4A], 0Bh
		jz	short loc_62B8EF29
		cmp	[ebp+var_4A], 0Dh
		jz	short loc_62B8EF29

loc_62B8EEDE:				; CODE XREF: silc_client_notify_watch+33Cj
		mov	eax, [ebp+var_24]
		test	eax, eax
		jz	loc_62B8EC77
		mov	[esp+0A8h+var_A8], eax
		call	silc_pkcs_public_key_free
		jmp	loc_62B8EC77
; ---------------------------------------------------------------------------
		align 4

loc_62B8EEF8:				; CODE XREF: silc_client_notify_watch+D9j
		mov	[esp+0A8h+var_A0], 612h
		mov	[esp+0A8h+var_A4], offset aClient_notify_ ; "client_notify.c"
		mov	[esp+0A8h+var_A8], offset aSilc_verifyS_3 ; "SILC_VERIFY %s:%d"
		call	silc_format
		mov	[esp+0A8h+var_A4], eax
		mov	[esp+0A8h+var_A8], 3
		call	silc_log_output
		jmp	loc_62B8ECF3
; ---------------------------------------------------------------------------

loc_62B8EF29:				; CODE XREF: silc_client_notify_watch+2BAj
					; silc_client_notify_watch+2C1j ...
		mov	[esp+0A8h+var_A0], esi
		mov	[esp+0A8h+var_A4], ebx
		mov	[esp+0A8h+var_A8], edi
		call	silc_client_remove_from_channels
		and	byte ptr [esi+402h], 0FEh
		mov	[esp+0A8h+var_A0], esi
		mov	[esp+0A8h+var_A4], ebx
		mov	[esp+0A8h+var_A8], edi
		call	silc_client_del_client
		jmp	short loc_62B8EEDE
; ---------------------------------------------------------------------------

loc_62B8EF52:				; CODE XREF: silc_client_notify_watch+18Ej
		mov	[ebp+var_7C], 0
		mov	[ebp+var_4A], 0
		jmp	loc_62B8EDCB
; ---------------------------------------------------------------------------

loc_62B8EF64:				; CODE XREF: silc_client_notify_watch+20Fj
		mov	eax, [ebp+var_28]
		mov	[ebp+var_58], 0
		jmp	loc_62B8EE2C
; ---------------------------------------------------------------------------

loc_62B8EF73:				; CODE XREF: silc_client_notify_watch+23Cj
					; silc_client_notify_watch+382j
		mov	ecx, [esi+3B0h]
		jmp	loc_62B8EE64
; ---------------------------------------------------------------------------

loc_62B8EF7E:				; CODE XREF: silc_client_notify_watch+24Aj
		lea	edx, [ebp+var_24]
		mov	[esp+0A8h+var_A0], edx
		mov	edx, [ebp+var_1C]
		mov	[esp+0A8h+var_A4], edx
		mov	[esp+0A8h+var_A8], eax
		call	silc_public_key_payload_decode
		test	al, al
		jz	short loc_62B8EF73
		mov	ecx, [ebp+var_24]
		mov	[esi+3B0h], ecx
		mov	[ebp+var_24], 0
		jmp	loc_62B8EE64
silc_client_notify_watch endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 164. silc_client_notify_error

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public silc_client_notify_error
silc_client_notify_error proc near	; DATA XREF: silc_client_notify:loc_62B92368o

var_78		= dword	ptr -78h
var_74		= dword	ptr -74h
var_70		= dword	ptr -70h
var_6C		= dword	ptr -6Ch
var_68		= dword	ptr -68h
var_54		= dword	ptr -54h
var_50		= byte ptr -50h
var_4A		= word ptr -4Ah
var_3C		= byte ptr -3Ch
var_1C		= dword	ptr -1Ch
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		sub	esp, 6Ch
		mov	ebx, [ebp+arg_4]
		mov	edi, [ebx+4Ch]
		mov	eax, [ebp+arg_8]
		mov	esi, [eax+4]
		mov	[esp+78h+var_78], esi
		call	silc_notify_get_type
		mov	[ebp+var_4A], ax
		mov	[esp+78h+var_78], esi
		call	silc_notify_get_args
		mov	esi, eax
		lea	eax, [ebp+var_1C]
		mov	[esp+78h+var_70], eax
		mov	[esp+78h+var_74], 1
		mov	[esp+78h+var_78], esi
		call	silc_argument_get_arg_type
		test	eax, eax
		jz	loc_62B8F0D4

loc_62B8EFFA:				; CODE XREF: silc_client_notify_error+12Ej
		mov	dl, [eax]
		cmp	dl, 16h
		jz	short loc_62B8F040

loc_62B8F001:				; CODE XREF: silc_client_notify_error+DBj
					; silc_client_notify_error+E3j	...
		mov	eax, [ebx+4Ch]
		mov	eax, [eax+18h]
		mov	eax, [eax+48h]
		movzx	edx, dl
		mov	[esp+78h+var_6C], edx
		movzx	edx, [ebp+var_4A]
		mov	[esp+78h+var_70], edx
		mov	[esp+78h+var_74], ebx
		mov	[esp+78h+var_78], edi
		call	dword ptr [eax+0Ch]

loc_62B8F023:				; CODE XREF: silc_client_notify_error+C2j
					; silc_client_notify_error+128j
		mov	[esp+78h+var_74], offset silc_client_notify_processed
		mov	eax, [ebp+arg_0]
		mov	[esp+78h+var_78], eax
		call	silc_fsm_next
		xor	eax, eax
		add	esp, 6Ch
		pop	ebx
		pop	esi
		pop	edi
		leave
		retn
; ---------------------------------------------------------------------------

loc_62B8F040:				; CODE XREF: silc_client_notify_error+4Fj
		mov	[esp+78h+var_68], 0
		lea	ecx, [ebp+var_3C]
		mov	[esp+78h+var_6C], ecx
		mov	[esp+78h+var_70], 0
		mov	[esp+78h+var_74], 2
		mov	[esp+78h+var_78], esi
		mov	[ebp+var_50], dl
		mov	[ebp+var_54], ecx
		call	silc_argument_get_decoded
		test	al, al
		mov	ecx, [ebp+var_54]
		jz	short loc_62B8F023
		mov	[esp+78h+var_70], ecx
		mov	[esp+78h+var_74], ebx
		mov	[esp+78h+var_78], edi
		call	silc_client_get_client_by_id
		mov	esi, eax
		test	eax, eax
		mov	dl, [ebp+var_50]
		jz	loc_62B8F001
		cmp	eax, [ebx]
		jz	loc_62B8F001
		mov	[esp+78h+var_70], eax
		mov	[esp+78h+var_74], ebx
		mov	[esp+78h+var_78], edi
		call	silc_client_remove_from_channels
		mov	[esp+78h+var_70], esi
		mov	[esp+78h+var_74], ebx
		mov	[esp+78h+var_78], edi
		call	silc_client_del_client
		mov	[esp+78h+var_70], esi
		mov	[esp+78h+var_74], ebx
		mov	[esp+78h+var_78], edi
		call	silc_client_unref_client
		mov	dl, [ebp+var_50]
		jmp	loc_62B8F001
; ---------------------------------------------------------------------------
		align 4

loc_62B8F0D4:				; CODE XREF: silc_client_notify_error+44j
		cmp	[ebp+var_1C], 1
		jnz	loc_62B8F023
		jmp	loc_62B8EFFA
silc_client_notify_error endp

; ---------------------------------------------------------------------------
		align 4
; Exported entry 170. silc_client_notify_motd

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public silc_client_notify_motd
silc_client_notify_motd	proc near	; DATA XREF: silc_client_notify:loc_62B923ECo

var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_3C		= dword	ptr -3Ch
var_2A		= word ptr -2Ah
var_1C		= byte ptr -1Ch
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		sub	esp, 3Ch
		mov	ebx, [ebp+arg_4]
		mov	edi, [ebx+4Ch]
		mov	eax, [ebp+arg_8]
		mov	esi, [eax+4]
		mov	[esp+48h+var_48], esi
		call	silc_notify_get_type
		mov	[ebp+var_2A], ax
		mov	[esp+48h+var_48], esi
		call	silc_notify_get_args
		lea	edx, [ebp+var_1C]
		mov	[esp+48h+var_40], edx
		mov	[esp+48h+var_44], 1
		mov	[esp+48h+var_48], eax
		call	silc_argument_get_arg_type
		test	eax, eax
		jz	short loc_62B8F147
		mov	edx, [ebx+4Ch]
		mov	edx, [edx+18h]
		mov	edx, [edx+48h]
		mov	[esp+48h+var_3C], eax
		movzx	eax, [ebp+var_2A]
		mov	[esp+48h+var_40], eax
		mov	[esp+48h+var_44], ebx
		mov	[esp+48h+var_48], edi
		call	dword ptr [edx+0Ch]

loc_62B8F147:				; CODE XREF: silc_client_notify_motd+42j
		mov	[esp+48h+var_44], offset silc_client_notify_processed
		mov	eax, [ebp+arg_0]
		mov	[esp+48h+var_48], eax
		call	silc_fsm_next
		xor	eax, eax
		add	esp, 3Ch
		pop	ebx
		pop	esi
		pop	edi
		leave
		retn
silc_client_notify_motd	endp

; Exported entry 172. silc_client_notify_none

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public silc_client_notify_none
silc_client_notify_none	proc near	; DATA XREF: silc_client_notify:loc_62B924E8o

var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_1A		= word ptr -1Ah
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		sub	esp, 2Ch
		mov	ebx, [ebp+arg_4]
		mov	edi, [ebx+4Ch]
		mov	eax, [ebp+arg_8]
		mov	esi, [eax+4]
		mov	[esp+38h+var_38], esi
		call	silc_notify_get_type
		mov	[ebp+var_1A], ax
		mov	[esp+38h+var_38], esi
		call	silc_notify_get_args
		mov	edx, [ebx+4Ch]
		mov	edx, [edx+18h]
		mov	edx, [edx+48h]
		mov	esi, [edx+0Ch]
		mov	[esp+38h+var_30], 0
		mov	[esp+38h+var_34], 1
		mov	[esp+38h+var_38], eax
		call	silc_argument_get_arg_type
		mov	[esp+38h+var_2C], eax
		movzx	eax, [ebp+var_1A]
		mov	[esp+38h+var_30], eax
		mov	[esp+38h+var_34], ebx
		mov	[esp+38h+var_38], edi
		call	esi
		mov	[esp+38h+var_34], offset silc_client_notify_processed
		mov	eax, [ebp+arg_0]
		mov	[esp+38h+var_38], eax
		call	silc_fsm_next
		xor	eax, eax
		add	esp, 2Ch
		pop	ebx
		pop	esi
		pop	edi
		leave
		retn
silc_client_notify_none	endp

; ---------------------------------------------------------------------------
		align 4

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_62B8F1E4	proc near		; DATA XREF: silc_client_notify_watch+E6o
					; silc_client_notify_killed+28Do ...

var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_1C		= dword	ptr -1Ch
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= byte ptr  10h
arg_C		= dword	ptr  14h
arg_10		= dword	ptr  18h

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		sub	esp, 2Ch
		mov	esi, [ebp+arg_0]
		mov	edi, [ebp+arg_4]
		mov	edx, [ebp+arg_C]
		mov	ebx, [ebp+arg_10]
		mov	cl, [ebp+arg_8]
		mov	eax, [ebx+10h]
		test	eax, eax
		jz	short loc_62B8F20C
		test	byte ptr [eax+402h], 1
		jz	short loc_62B8F24C

loc_62B8F20C:				; CODE XREF: sub_62B8F1E4+1Dj
					; sub_62B8F1E4+79j
		test	edx, edx
		jz	short loc_62B8F28F

loc_62B8F210:				; CODE XREF: sub_62B8F1E4+A9j
					; sub_62B8F1E4+B0j ...
		mov	eax, [ebx+0Ch]
		test	eax, eax
		jz	short loc_62B8F230
		mov	word ptr [eax+17Ch], 0
		mov	[esp+38h+var_30], eax
		mov	[esp+38h+var_34], edi
		mov	[esp+38h+var_38], esi
		call	silc_client_unref_channel

loc_62B8F230:				; CODE XREF: sub_62B8F1E4+31j
		mov	eax, [ebx+8]
		mov	dl, [eax+28h]
		mov	cl, dl
		and	ecx, 0FFFFFFFBh
		mov	[eax+28h], cl
		and	edx, 4
		jz	short loc_62B8F2B4
		add	esp, 2Ch
		pop	ebx
		pop	esi
		pop	edi
		leave
		retn
; ---------------------------------------------------------------------------
		align 4

loc_62B8F24C:				; CODE XREF: sub_62B8F1E4+26j
		cmp	cl, 36h
		jnz	short loc_62B8F25F
		mov	eax, [ebx+14h]
		inc	eax
		mov	[ebx+14h], eax
		cmp	eax, 3E8h
		jbe	short loc_62B8F20C

loc_62B8F25F:				; CODE XREF: sub_62B8F1E4+6Bj
		mov	[esp+38h+var_34], offset silc_client_notify_processed
		mov	eax, [ebx+8]
		mov	[esp+38h+var_38], eax
		mov	[ebp+var_1C], edx
		call	silc_fsm_next
		mov	eax, [ebx+10h]
		mov	[esp+38h+var_30], eax
		mov	[esp+38h+var_34], edi
		mov	[esp+38h+var_38], esi
		call	silc_client_unref_client
		mov	edx, [ebp+var_1C]
		test	edx, edx
		jnz	short loc_62B8F210

loc_62B8F28F:				; CODE XREF: sub_62B8F1E4+2Aj
		mov	eax, [ebx+10h]
		test	eax, eax
		jnz	loc_62B8F210
		mov	[esp+38h+var_34], offset silc_client_notify_processed
		mov	eax, [ebx+8]
		mov	[esp+38h+var_38], eax
		call	silc_fsm_next
		jmp	loc_62B8F210
; ---------------------------------------------------------------------------
		align 4

loc_62B8F2B4:				; CODE XREF: sub_62B8F1E4+5Dj
		mov	[ebp+arg_0], eax
		add	esp, 2Ch
		pop	ebx
		pop	esi
		pop	edi
		leave
		jmp	silc_fsm_continue_sync
sub_62B8F1E4	endp

; ---------------------------------------------------------------------------
		align 4

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_62B8F2C4	proc near		; DATA XREF: silc_client_notify_invite+E0o
					; silc_client_notify_leave+EAo	...

var_18		= dword	ptr -18h
arg_C		= byte ptr  14h
arg_14		= dword	ptr  1Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 18h
		mov	al, [ebp+arg_C]
		lea	edx, [eax-1]
		cmp	dl, 8
		ja	short loc_62B8F2E0
		cmp	al, 3
		jz	short loc_62B8F2E0

loc_62B8F2D9:				; CODE XREF: sub_62B8F2C4+30j
		mov	al, 1
		leave
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_62B8F2E0:				; CODE XREF: sub_62B8F2C4+Fj
					; sub_62B8F2C4+13j
		mov	eax, [ebp+arg_14]
		mov	eax, [eax+8]
		mov	dl, [eax+28h]
		mov	cl, dl
		and	ecx, 0FFFFFFFBh
		mov	[eax+28h], cl
		and	edx, 4
		jnz	short loc_62B8F2D9
		mov	[esp+18h+var_18], eax
		call	silc_fsm_continue_sync
		mov	al, 1
		leave
		retn
sub_62B8F2C4	endp

; ---------------------------------------------------------------------------
		align 4
; Exported entry 174. silc_client_notify_server_signoff

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public silc_client_notify_server_signoff
silc_client_notify_server_signoff proc near ; DATA XREF: silc_client_notify:loc_62B923B4o

var_98		= dword	ptr -98h
var_94		= dword	ptr -94h
var_90		= dword	ptr -90h
var_8C		= dword	ptr -8Ch
var_88		= dword	ptr -88h
var_6C		= dword	ptr -6Ch
var_4C		= dword	ptr -4Ch
var_46		= word ptr -46h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_3C		= dword	ptr -3Ch
var_38		= byte ptr -38h
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		sub	esp, 8Ch
		mov	esi, [ebp+arg_4]
		mov	eax, [esi+4Ch]
		mov	[ebp+var_40], eax
		mov	eax, [ebp+arg_8]
		mov	ebx, [eax+4]
		mov	[esp+98h+var_98], ebx
		call	silc_notify_get_type
		mov	[ebp+var_46], ax
		mov	[esp+98h+var_98], ebx
		call	silc_notify_get_args
		mov	[ebp+var_3C], eax
		mov	[esp+98h+var_98], 1Ch
		call	silc_malloc
		mov	ebx, eax
		test	eax, eax
		jz	short loc_62B8F3B1
		mov	dword ptr [eax+18h], 0
		mov	dword ptr [eax+14h], 0
		mov	eax, [eax+10h]
		and	eax, 3
		mov	[ebx+10h], eax
		mov	word ptr [ebx+0Ch], 4
		mov	word ptr [ebx+0Eh], 8
		mov	byte ptr [ebx+10h], 1
		mov	dword ptr [ebx+8], 0
		mov	dword ptr [ebx+4], 0
		mov	dword ptr [ebx], 0
		mov	[esp+98h+var_88], 0
		lea	edx, [ebp+var_38]
		mov	[esp+98h+var_8C], edx
		mov	[esp+98h+var_90], 0
		mov	[esp+98h+var_94], 1
		mov	ecx, [ebp+var_3C]
		mov	[esp+98h+var_98], ecx
		call	silc_argument_get_decoded
		test	al, al
		jnz	short loc_62B8F404

loc_62B8F3B1:				; CODE XREF: silc_client_notify_server_signoff+42j
		mov	[ebp+var_44], 0

loc_62B8F3B8:				; CODE XREF: silc_client_notify_server_signoff+15Cj
					; silc_client_notify_server_signoff+245j ...
		mov	eax, [ebp+var_44]
		mov	[esp+98h+var_90], eax
		mov	[esp+98h+var_94], esi
		mov	edx, [ebp+var_40]
		mov	[esp+98h+var_98], edx
		call	silc_client_unref_server
		mov	[esp+98h+var_90], ebx
		mov	[esp+98h+var_94], esi
		mov	ecx, [ebp+var_40]
		mov	[esp+98h+var_98], ecx
		call	silc_client_list_free
		mov	[esp+98h+var_94], offset silc_client_notify_processed
		mov	eax, [ebp+arg_0]
		mov	[esp+98h+var_98], eax
		call	silc_fsm_next
		xor	eax, eax
		add	esp, 8Ch
		pop	ebx
		pop	esi
		pop	edi
		leave
		retn
; ---------------------------------------------------------------------------
		align 4

loc_62B8F404:				; CODE XREF: silc_client_notify_server_signoff+ABj
		lea	eax, [ebp+var_38]
		mov	[esp+98h+var_90], eax
		mov	[esp+98h+var_94], esi
		mov	edx, [ebp+var_40]
		mov	[esp+98h+var_98], edx
		call	silc_client_get_server_by_id
		mov	[ebp+var_44], eax
		mov	edi, 1
		xchg	ax, ax

loc_62B8F424:				; CODE XREF: silc_client_notify_server_signoff+17Aj
					; silc_client_notify_server_signoff+183j ...
		mov	eax, [ebp+var_3C]
		mov	[esp+98h+var_98], eax
		call	silc_argument_get_arg_num
		cmp	eax, edi
		jbe	loc_62B8F4EF

loc_62B8F437:				; CODE XREF: silc_client_notify_server_signoff+1E5j
		inc	edi
		mov	[esp+98h+var_88], 0
		lea	ecx, [ebp+var_38]
		mov	[esp+98h+var_8C], ecx
		mov	[esp+98h+var_90], 0
		mov	[esp+98h+var_94], edi
		mov	eax, [ebp+var_3C]
		mov	[esp+98h+var_98], eax
		call	silc_argument_get_decoded
		test	al, al
		jz	loc_62B8F3B8
		lea	edx, [ebp+var_38]
		mov	[esp+98h+var_90], edx
		mov	[esp+98h+var_94], esi
		mov	ecx, [ebp+var_40]
		mov	[esp+98h+var_98], ecx
		call	silc_client_get_client_by_id
		test	eax, eax
		jz	short loc_62B8F424
		test	byte ptr [eax+402h], 1
		jz	short loc_62B8F424
		mov	[esp+98h+var_98], 0Ch
		mov	[ebp+var_4C], eax
		call	silc_malloc
		test	eax, eax
		mov	edx, [ebp+var_4C]
		jz	short loc_62B8F424
		mov	[eax], edx
		mov	edx, [ebx]
		test	edx, edx
		jz	loc_62B8F5A4
		movzx	ecx, word ptr [ebx+0Ch]
		mov	[ebp+var_6C], ecx
		mov	ecx, [ebx+4]
		mov	edx, [ebp+var_6C]
		mov	[ecx+edx], eax

loc_62B8F4BB:				; CODE XREF: silc_client_notify_server_signoff+2A9j
		test	byte ptr [ebx+10h], 1
		jz	short loc_62B8F4CB
		movzx	ecx, word ptr [ebx+0Eh]
		mov	edx, [ebx+4]
		mov	[eax+ecx], edx

loc_62B8F4CB:				; CODE XREF: silc_client_notify_server_signoff+1BBj
		mov	[ebx+4], eax
		mov	ecx, [ebp+var_6C]
		mov	dword ptr [eax+ecx], 0
		add	dword ptr [ebx+10h], 4
		mov	eax, [ebp+var_3C]
		mov	[esp+98h+var_98], eax
		call	silc_argument_get_arg_num
		cmp	eax, edi
		ja	loc_62B8F437

loc_62B8F4EF:				; CODE XREF: silc_client_notify_server_signoff+12Dj
		mov	eax, [esi+4Ch]
		mov	eax, [eax+18h]
		mov	eax, [eax+48h]
		mov	[esp+98h+var_88], ebx
		mov	edx, [ebp+var_44]
		mov	[esp+98h+var_8C], edx
		movzx	edx, [ebp+var_46]
		mov	[esp+98h+var_90], edx
		mov	[esp+98h+var_94], esi
		mov	ecx, [ebp+var_40]
		mov	[esp+98h+var_98], ecx
		call	dword ptr [eax+0Ch]
		mov	eax, [ebx]
		mov	[ebx+8], eax
		and	byte ptr [ebx+10h], 0FDh
		mov	dword ptr [ebx+18h], 0
		mov	dword ptr [ebx+14h], 0
		xor	eax, eax
		mov	edi, [ebp+var_40]
		jmp	short loc_62B8F57F
; ---------------------------------------------------------------------------
		align 4

loc_62B8F538:				; CODE XREF: silc_client_notify_server_signoff+289j
		movzx	edx, word ptr [ebx+0Eh]
		mov	edx, [eax+edx]

loc_62B8F53F:				; CODE XREF: silc_client_notify_server_signoff+292j
		mov	[ebx+8], edx
		mov	[ebx+14h], eax
		mov	eax, [eax]
		test	eax, eax
		jz	loc_62B8F3B8
		mov	[esp+98h+var_90], eax
		mov	[esp+98h+var_94], esi
		mov	[esp+98h+var_98], edi
		mov	[ebp+var_4C], eax
		call	silc_client_remove_from_channels
		mov	eax, [ebp+var_4C]
		and	byte ptr [eax+402h], 0FEh
		mov	[esp+98h+var_90], eax
		mov	[esp+98h+var_94], esi
		mov	[esp+98h+var_98], edi
		call	silc_client_del_client
		mov	eax, [ebx+14h]

loc_62B8F57F:				; CODE XREF: silc_client_notify_server_signoff+230j
		mov	[ebx+18h], eax
		mov	eax, [ebx+8]
		test	eax, eax
		jz	short loc_62B8F598
		test	byte ptr [ebx+10h], 2
		jnz	short loc_62B8F538
		movzx	edx, word ptr [ebx+0Ch]
		mov	edx, [eax+edx]
		jmp	short loc_62B8F53F
; ---------------------------------------------------------------------------

loc_62B8F598:				; CODE XREF: silc_client_notify_server_signoff+283j
		mov	dword ptr [ebx+14h], 0
		jmp	loc_62B8F3B8
; ---------------------------------------------------------------------------

loc_62B8F5A4:				; CODE XREF: silc_client_notify_server_signoff+1A1j
		mov	[ebx], eax
		movzx	edx, word ptr [ebx+0Ch]
		mov	[ebp+var_6C], edx
		jmp	loc_62B8F4BB
silc_client_notify_server_signoff endp

; ---------------------------------------------------------------------------
		align 4
; Exported entry 168. silc_client_notify_killed

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public silc_client_notify_killed
silc_client_notify_killed proc near	; DATA XREF: silc_client_notify:loc_62B92380o

var_88		= dword	ptr -88h
var_84		= dword	ptr -84h
var_80		= dword	ptr -80h
var_7C		= dword	ptr -7Ch
var_78		= dword	ptr -78h
var_74		= dword	ptr -74h
var_70		= dword	ptr -70h
var_60		= dword	ptr -60h
var_5C		= dword	ptr -5Ch
var_58		= dword	ptr -58h
var_52		= word ptr -52h
var_50		= dword	ptr -50h
var_4C		= dword	ptr -4Ch
var_3C		= byte ptr -3Ch
var_1E		= word ptr -1Eh
var_1C		= byte ptr -1Ch
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		sub	esp, 7Ch
		mov	ebx, [ebp+arg_4]
		mov	esi, [ebx+4Ch]
		mov	eax, [ebp+arg_8]
		mov	edi, [eax+4]
		mov	[esp+88h+var_88], edi
		call	silc_notify_get_type
		mov	[ebp+var_52], ax
		mov	[esp+88h+var_88], edi
		call	silc_notify_get_args
		mov	[ebp+var_4C], eax
		mov	[esp+88h+var_78], 0
		lea	edx, [ebp+var_3C]
		mov	[esp+88h+var_7C], edx
		mov	[esp+88h+var_80], 0
		mov	[esp+88h+var_84], 1
		mov	[esp+88h+var_88], eax
		call	silc_argument_get_decoded
		test	al, al
		jz	loc_62B8F788
		lea	ecx, [ebp+var_3C]
		mov	[esp+88h+var_80], ecx
		mov	[esp+88h+var_84], ebx
		mov	[esp+88h+var_88], esi
		call	silc_client_get_client_by_id
		mov	edi, eax
		test	eax, eax
		jz	loc_62B8F78A
		lea	eax, [ebp+var_1C]
		mov	[esp+88h+var_80], eax
		mov	[esp+88h+var_84], 2
		mov	eax, [ebp+var_4C]
		mov	[esp+88h+var_88], eax
		call	silc_argument_get_arg_type
		mov	[ebp+var_5C], eax
		mov	[esp+88h+var_78], 0
		lea	edx, [ebp+var_3C]
		mov	[esp+88h+var_7C], edx
		mov	[esp+88h+var_80], 0
		mov	[esp+88h+var_84], 3
		mov	ecx, [ebp+var_4C]
		mov	[esp+88h+var_88], ecx
		call	silc_argument_get_decoded
		test	al, al
		jz	loc_62B8F78A
		mov	ax, [ebp+var_1E]
		cmp	ax, 2
		jz	loc_62B8F7EC
		dec	ax
		jz	loc_62B8F7B8
		lea	edx, [ebp+var_3C]
		mov	[esp+88h+var_80], edx
		mov	[esp+88h+var_84], ebx
		mov	[esp+88h+var_88], esi
		call	silc_client_get_channel_by_id
		mov	[ebp+var_4C], eax
		test	eax, eax
		jz	loc_62B8F824
		mov	eax, [ebp+var_4C]
		mov	[ebp+var_50], eax
		mov	[ebp+var_58], 0
		xor	edx, edx

loc_62B8F6BE:				; CODE XREF: silc_client_notify_killed+231j
					; silc_client_notify_killed+26Bj
		mov	eax, [ebx+4Ch]
		mov	eax, [eax+18h]
		mov	ecx, [eax+48h]
		mov	eax, [ebp+var_50]
		mov	[esp+88h+var_70], eax
		movzx	eax, [ebp+var_1E]
		mov	[esp+88h+var_74], eax
		mov	eax, [ebp+var_5C]
		mov	[esp+88h+var_78], eax
		mov	[esp+88h+var_7C], edi
		movzx	eax, [ebp+var_52]
		mov	[esp+88h+var_80], eax
		mov	[esp+88h+var_84], ebx
		mov	[esp+88h+var_88], esi
		mov	[ebp+var_60], edx
		call	dword ptr [ecx+0Ch]
		cmp	edi, [ebx]
		mov	edx, [ebp+var_60]
		jz	short loc_62B8F727
		mov	[esp+88h+var_80], edi
		mov	[esp+88h+var_84], ebx
		mov	[esp+88h+var_88], esi
		call	silc_client_remove_from_channels
		and	byte ptr [edi+402h], 0FEh
		mov	[esp+88h+var_80], edi
		mov	[esp+88h+var_84], ebx
		mov	[esp+88h+var_88], esi
		call	silc_client_del_client
		mov	edx, [ebp+var_60]

loc_62B8F727:				; CODE XREF: silc_client_notify_killed+147j
		mov	[esp+88h+var_80], edi
		mov	[esp+88h+var_84], ebx
		mov	[esp+88h+var_88], esi
		mov	[ebp+var_60], edx
		call	silc_client_unref_client
		mov	edx, [ebp+var_60]
		test	edx, edx
		jz	short loc_62B8F751
		mov	[esp+88h+var_80], edx
		mov	[esp+88h+var_84], ebx
		mov	[esp+88h+var_88], esi
		call	silc_client_unref_client

loc_62B8F751:				; CODE XREF: silc_client_notify_killed+18Bj
		mov	edi, [ebp+var_58]
		test	edi, edi
		jz	short loc_62B8F76B
		mov	edx, [ebp+var_58]
		mov	[esp+88h+var_80], edx
		mov	[esp+88h+var_84], ebx
		mov	[esp+88h+var_88], esi
		call	silc_client_unref_server

loc_62B8F76B:				; CODE XREF: silc_client_notify_killed+1A2j
		mov	ecx, [ebp+var_4C]
		test	ecx, ecx
		jz	short loc_62B8F79A
		mov	ecx, [ebp+var_4C]
		mov	[esp+88h+var_80], ecx
		mov	[esp+88h+var_84], ebx
		mov	[esp+88h+var_88], esi
		call	silc_client_unref_channel
		jmp	short loc_62B8F79A
; ---------------------------------------------------------------------------
		align 4

loc_62B8F788:				; CODE XREF: silc_client_notify_killed+55j
		xor	edi, edi

loc_62B8F78A:				; CODE XREF: silc_client_notify_killed+72j
					; silc_client_notify_killed+C1j
		mov	[esp+88h+var_80], edi
		mov	[esp+88h+var_84], ebx
		mov	[esp+88h+var_88], esi
		call	silc_client_unref_client

loc_62B8F79A:				; CODE XREF: silc_client_notify_killed+1BCj
					; silc_client_notify_killed+1D1j
		mov	[esp+88h+var_84], offset silc_client_notify_processed
		mov	eax, [ebp+arg_0]
		mov	[esp+88h+var_88], eax
		call	silc_fsm_next
		xor	eax, eax

loc_62B8F7AF:				; CODE XREF: silc_client_notify_killed+2BFj
					; silc_client_notify_killed+336j
		add	esp, 7Ch
		pop	ebx
		pop	esi
		pop	edi
		leave
		retn
; ---------------------------------------------------------------------------
		align 4

loc_62B8F7B8:				; CODE XREF: silc_client_notify_killed+D7j
		lea	eax, [ebp+var_3C]
		mov	[esp+88h+var_80], eax
		mov	[esp+88h+var_84], ebx
		mov	[esp+88h+var_88], esi
		call	silc_client_get_server_by_id
		mov	[ebp+var_58], eax
		test	eax, eax
		jz	loc_62B8F8EF
		mov	eax, [ebp+var_58]
		mov	[ebp+var_50], eax
		mov	[ebp+var_4C], 0
		xor	edx, edx
		jmp	loc_62B8F6BE
; ---------------------------------------------------------------------------
		align 4

loc_62B8F7EC:				; CODE XREF: silc_client_notify_killed+CFj
		lea	eax, [ebp+var_3C]
		mov	[esp+88h+var_80], eax
		mov	[esp+88h+var_84], ebx
		mov	[esp+88h+var_88], esi
		call	silc_client_get_client_by_id
		mov	edx, eax
		test	eax, eax
		jz	short loc_62B8F878
		test	byte ptr [eax+402h], 1
		jz	short loc_62B8F878
		mov	[ebp+var_50], eax
		mov	[ebp+var_58], 0
		mov	[ebp+var_4C], 0
		jmp	loc_62B8F6BE
; ---------------------------------------------------------------------------

loc_62B8F824:				; CODE XREF: silc_client_notify_killed+F5j
		mov	ecx, [ebp+arg_0]
		mov	al, [ecx+28h]
		mov	dl, al
		or	edx, 4
		mov	[ecx+28h], dl
		test	al, 4
		jnz	loc_62B8F92F

loc_62B8F83A:				; CODE XREF: silc_client_notify_killed+3A7j
		mov	eax, [ebp+arg_8]
		mov	[esp+88h+var_78], eax
		mov	[esp+88h+var_7C], offset sub_62B8F1E4
		lea	edx, [ebp+var_3C]
		mov	[esp+88h+var_80], edx
		mov	[esp+88h+var_84], ebx
		mov	[esp+88h+var_88], esi
		call	silc_client_get_channel_by_id_resolve

loc_62B8F85C:				; CODE XREF: silc_client_notify_killed+32Dj
					; silc_client_notify_killed+376j
		mov	ecx, [ebp+arg_0]
		mov	al, [ecx+28h]
		mov	dl, al
		and	edx, 0FFFFFFFBh
		mov	[ecx+28h], dl
		test	al, 4
		jz	short loc_62B8F8E8
		mov	eax, 2
		jmp	loc_62B8F7AF
; ---------------------------------------------------------------------------

loc_62B8F878:				; CODE XREF: silc_client_notify_killed+24Fj
					; silc_client_notify_killed+258j
		mov	[esp+88h+var_80], edi
		mov	[esp+88h+var_84], ebx
		mov	[esp+88h+var_88], esi
		mov	[ebp+var_60], edx
		call	silc_client_unref_client
		mov	edx, [ebp+var_60]
		mov	[esp+88h+var_80], edx
		mov	[esp+88h+var_84], ebx
		mov	[esp+88h+var_88], esi
		call	silc_client_unref_client
		mov	edx, [ebp+arg_0]
		mov	al, [edx+28h]
		mov	dl, al
		or	edx, 4
		mov	ecx, [ebp+arg_0]
		mov	[ecx+28h], dl
		test	al, 4
		jnz	loc_62B8F960

loc_62B8F8B7:				; CODE XREF: silc_client_notify_killed+3D8j
		mov	eax, [ebp+arg_8]
		mov	[esp+88h+var_74], eax
		mov	[esp+88h+var_78], offset sub_62B8F1E4
		mov	[esp+88h+var_7C], 0
		lea	edx, [ebp+var_3C]
		mov	[esp+88h+var_80], edx
		mov	[esp+88h+var_84], ebx
		mov	[esp+88h+var_88], esi
		call	silc_client_get_client_by_id_resolve
		jmp	loc_62B8F85C
; ---------------------------------------------------------------------------
		align 4

loc_62B8F8E8:				; CODE XREF: silc_client_notify_killed+2B8j
		xor	eax, eax
		jmp	loc_62B8F7AF
; ---------------------------------------------------------------------------

loc_62B8F8EF:				; CODE XREF: silc_client_notify_killed+21Cj
		mov	edx, [ebp+arg_0]
		mov	al, [edx+28h]
		mov	dl, al
		or	edx, 4
		mov	ecx, [ebp+arg_0]
		mov	[ecx+28h], dl
		test	al, 4
		jnz	loc_62B8F991

loc_62B8F908:				; CODE XREF: silc_client_notify_killed+409j
		mov	eax, [ebp+arg_8]
		mov	[esp+88h+var_78], eax
		mov	[esp+88h+var_7C], offset sub_62B8F1E4
		lea	edx, [ebp+var_3C]
		mov	[esp+88h+var_80], edx
		mov	[esp+88h+var_84], ebx
		mov	[esp+88h+var_88], esi
		call	silc_client_get_server_by_id_resolve
		jmp	loc_62B8F85C
; ---------------------------------------------------------------------------

loc_62B8F92F:				; CODE XREF: silc_client_notify_killed+280j
		mov	[esp+88h+var_80], 567h
		mov	[esp+88h+var_84], offset aClient_notify_ ; "client_notify.c"
		mov	[esp+88h+var_88], offset aSilc_verifyS_3 ; "SILC_VERIFY	%s:%d"
		call	silc_format
		mov	[esp+88h+var_84], eax
		mov	[esp+88h+var_88], 3
		call	silc_log_output
		jmp	loc_62B8F83A
; ---------------------------------------------------------------------------

loc_62B8F960:				; CODE XREF: silc_client_notify_killed+2FDj
		mov	[esp+88h+var_80], 54Eh
		mov	[esp+88h+var_84], offset aClient_notify_ ; "client_notify.c"
		mov	[esp+88h+var_88], offset aSilc_verifyS_3 ; "SILC_VERIFY	%s:%d"
		call	silc_format
		mov	[esp+88h+var_84], eax
		mov	[esp+88h+var_88], 3
		call	silc_log_output
		jmp	loc_62B8F8B7
; ---------------------------------------------------------------------------

loc_62B8F991:				; CODE XREF: silc_client_notify_killed+34Ej
		mov	[esp+88h+var_80], 55Ah
		mov	[esp+88h+var_84], offset aClient_notify_ ; "client_notify.c"
		mov	[esp+88h+var_88], offset aSilc_verifyS_3 ; "SILC_VERIFY	%s:%d"
		call	silc_format
		mov	[esp+88h+var_84], eax
		mov	[esp+88h+var_88], 3
		call	silc_log_output
		jmp	loc_62B8F908
silc_client_notify_killed endp

; ---------------------------------------------------------------------------
		align 4
; Exported entry 165. silc_client_notify_invite

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public silc_client_notify_invite
silc_client_notify_invite proc near	; DATA XREF: silc_client_notify:loc_62B924CCo

var_78		= dword	ptr -78h
var_74		= dword	ptr -74h
var_70		= dword	ptr -70h
var_6C		= dword	ptr -6Ch
var_68		= dword	ptr -68h
var_64		= dword	ptr -64h
var_52		= word ptr -52h
var_50		= dword	ptr -50h
var_4C		= dword	ptr -4Ch
var_3C		= byte ptr -3Ch
var_1C		= byte ptr -1Ch
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		sub	esp, 6Ch
		mov	ebx, [ebp+arg_4]
		mov	eax, [ebx+4Ch]
		mov	[ebp+var_4C], eax
		mov	edx, [ebp+arg_8]
		mov	esi, [edx+4]
		mov	[esp+78h+var_78], esi
		call	silc_notify_get_type
		mov	[ebp+var_52], ax
		mov	[esp+78h+var_78], esi
		call	silc_notify_get_args
		mov	edi, eax
		mov	[esp+78h+var_68], 0
		lea	ecx, [ebp+var_3C]
		mov	[esp+78h+var_6C], ecx
		mov	[esp+78h+var_70], 0
		mov	[esp+78h+var_74], 1
		mov	[esp+78h+var_78], eax
		call	silc_argument_get_decoded
		test	al, al
		jz	loc_62B8FAF0
		lea	eax, [ebp+var_1C]
		mov	[esp+78h+var_70], eax
		mov	[esp+78h+var_74], 2
		mov	[esp+78h+var_78], edi
		call	silc_argument_get_arg_type
		mov	[ebp+var_50], eax
		test	eax, eax
		jz	loc_62B8FAF0
		lea	eax, [ebp+var_3C]
		mov	[esp+78h+var_70], eax
		mov	[esp+78h+var_74], ebx
		mov	edx, [ebp+var_4C]
		mov	[esp+78h+var_78], edx
		call	silc_client_get_channel_by_id
		mov	esi, eax
		test	eax, eax
		jz	loc_62B8FBE8
		cmp	word ptr [eax+17Ch], 0
		jz	loc_62B8FB24
		mov	[esp+78h+var_70], eax
		mov	[esp+78h+var_74], ebx
		mov	eax, [ebp+var_4C]
		mov	[esp+78h+var_78], eax
		call	silc_client_unref_channel
		mov	edx, [ebp+arg_0]
		mov	al, [edx+28h]
		mov	dl, al
		or	edx, 4
		mov	ecx, [ebp+arg_0]
		mov	[ecx+28h], dl
		test	al, 4
		jnz	loc_62B8FC54

loc_62B8FA9D:				; CODE XREF: silc_client_notify_invite+2BCj
		mov	eax, [ebp+arg_8]
		mov	[esp+78h+var_68], eax
		mov	[esp+78h+var_6C], offset sub_62B8F2C4
		movzx	eax, word ptr [esi+17Ch]
		mov	[esp+78h+var_70], eax
		mov	[esp+78h+var_74], 0
		mov	[esp+78h+var_78], ebx
		call	silc_client_command_pending

loc_62B8FAC7:				; CODE XREF: silc_client_notify_invite+217j
					; silc_client_notify_invite+25Bj
		mov	edx, [ebp+arg_0]
		mov	al, [edx+28h]
		mov	dl, al
		and	edx, 0FFFFFFFBh
		mov	ecx, [ebp+arg_0]
		mov	[ecx+28h], dl
		test	al, 4
		jz	loc_62B8FBE0
		mov	eax, 2
		add	esp, 6Ch
		pop	ebx
		pop	esi
		pop	edi
		leave
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_62B8FAF0:				; CODE XREF: silc_client_notify_invite+57j
					; silc_client_notify_invite+79j
		xor	esi, esi

loc_62B8FAF2:				; CODE XREF: silc_client_notify_invite+189j
					; silc_client_notify_invite+304j
		mov	[esp+78h+var_70], esi
		mov	[esp+78h+var_74], ebx
		mov	edx, [ebp+var_4C]
		mov	[esp+78h+var_78], edx
		call	silc_client_unref_channel
		mov	[esp+78h+var_74], offset silc_client_notify_processed
		mov	ecx, [ebp+arg_0]
		mov	[esp+78h+var_78], ecx
		call	silc_fsm_next
		xor	eax, eax

loc_62B8FB1A:				; CODE XREF: silc_client_notify_invite+21Ej
		add	esp, 6Ch
		pop	ebx
		pop	esi
		pop	edi
		leave
		retn
; ---------------------------------------------------------------------------
		align 4

loc_62B8FB24:				; CODE XREF: silc_client_notify_invite+A7j
		mov	[esp+78h+var_68], 0
		lea	eax, [ebp+var_3C]
		mov	[esp+78h+var_6C], eax
		mov	[esp+78h+var_70], 0
		mov	[esp+78h+var_74], 3
		mov	[esp+78h+var_78], edi
		call	silc_argument_get_decoded
		test	al, al
		jz	short loc_62B8FAF2
		lea	edx, [ebp+var_3C]
		mov	[esp+78h+var_70], edx
		mov	[esp+78h+var_74], ebx
		mov	ecx, [ebp+var_4C]
		mov	[esp+78h+var_78], ecx
		call	silc_client_get_client_by_id
		mov	edi, eax
		test	eax, eax
		jz	short loc_62B8FB78
		test	byte ptr [eax+402h], 1
		jnz	loc_62B8FC88

loc_62B8FB78:				; CODE XREF: silc_client_notify_invite+1A5j
		mov	[esp+78h+var_70], edi
		mov	[esp+78h+var_74], ebx
		mov	eax, [ebp+var_4C]
		mov	[esp+78h+var_78], eax
		call	silc_client_unref_client
		mov	edx, [ebp+arg_8]
		mov	[edx+0Ch], esi
		mov	ecx, [ebp+arg_0]
		mov	al, [ecx+28h]
		mov	dl, al
		or	edx, 4
		mov	[ecx+28h], dl
		test	al, 4
		jnz	loc_62B8FCCD

loc_62B8FBA7:				; CODE XREF: silc_client_notify_invite+335j
		mov	eax, [ebp+arg_8]
		mov	[esp+78h+var_64], eax
		mov	[esp+78h+var_68], offset sub_62B8F1E4
		mov	[esp+78h+var_6C], 0
		lea	edx, [ebp+var_3C]
		mov	[esp+78h+var_70], edx
		mov	[esp+78h+var_74], ebx
		mov	ecx, [ebp+var_4C]
		mov	[esp+78h+var_78], ecx
		call	silc_client_get_client_by_id_resolve
		mov	[esi+17Ch], ax
		jmp	loc_62B8FAC7
; ---------------------------------------------------------------------------

loc_62B8FBE0:				; CODE XREF: silc_client_notify_invite+116j
		xor	eax, eax
		jmp	loc_62B8FB1A
; ---------------------------------------------------------------------------
		align 4

loc_62B8FBE8:				; CODE XREF: silc_client_notify_invite+99j
		mov	ecx, [ebp+arg_0]
		mov	al, [ecx+28h]
		mov	dl, al
		or	edx, 4
		mov	[ecx+28h], dl
		test	al, 4
		jnz	short loc_62B8FC24

loc_62B8FBFA:				; CODE XREF: silc_client_notify_invite+28Cj
		mov	eax, [ebp+arg_8]
		mov	[esp+78h+var_68], eax
		mov	[esp+78h+var_6C], offset sub_62B8F1E4
		lea	edx, [ebp+var_3C]
		mov	[esp+78h+var_70], edx
		mov	[esp+78h+var_74], ebx
		mov	ecx, [ebp+var_4C]
		mov	[esp+78h+var_78], ecx
		call	silc_client_get_channel_by_id_resolve
		jmp	loc_62B8FAC7
; ---------------------------------------------------------------------------

loc_62B8FC24:				; CODE XREF: silc_client_notify_invite+234j
		mov	[esp+78h+var_70], 132h
		mov	[esp+78h+var_74], offset aClient_notify_ ; "client_notify.c"
		mov	[esp+78h+var_78], offset aSilc_verifyS_3 ; "SILC_VERIFY	%s:%d"
		call	silc_format
		mov	[esp+78h+var_74], eax
		mov	[esp+78h+var_78], 3
		call	silc_log_output
		jmp	short loc_62B8FBFA
; ---------------------------------------------------------------------------
		align 4

loc_62B8FC54:				; CODE XREF: silc_client_notify_invite+D3j
		mov	[esp+78h+var_70], 13Dh
		mov	[esp+78h+var_74], offset aClient_notify_ ; "client_notify.c"
		mov	[esp+78h+var_78], offset aSilc_verifyS_3 ; "SILC_VERIFY	%s:%d"
		call	silc_format
		mov	[esp+78h+var_74], eax
		mov	[esp+78h+var_78], 3
		call	silc_log_output
		jmp	loc_62B8FA9D
; ---------------------------------------------------------------------------
		align 4

loc_62B8FC88:				; CODE XREF: silc_client_notify_invite+1AEj
		mov	eax, [ebx+4Ch]
		mov	eax, [eax+18h]
		mov	edx, [eax+48h]
		mov	[esp+78h+var_64], edi
		mov	eax, [ebp+var_50]
		mov	[esp+78h+var_68], eax
		mov	[esp+78h+var_6C], esi
		movzx	eax, [ebp+var_52]
		mov	[esp+78h+var_70], eax
		mov	[esp+78h+var_74], ebx
		mov	ecx, [ebp+var_4C]
		mov	[esp+78h+var_78], ecx
		call	dword ptr [edx+0Ch]
		mov	[esp+78h+var_70], edi
		mov	[esp+78h+var_74], ebx
		mov	eax, [ebp+var_4C]
		mov	[esp+78h+var_78], eax
		call	silc_client_unref_client
		jmp	loc_62B8FAF2
; ---------------------------------------------------------------------------

loc_62B8FCCD:				; CODE XREF: silc_client_notify_invite+1DDj
		mov	[esp+78h+var_70], 14Fh
		mov	[esp+78h+var_74], offset aClient_notify_ ; "client_notify.c"
		mov	[esp+78h+var_78], offset aSilc_verifyS_3 ; "SILC_VERIFY	%s:%d"
		call	silc_format
		mov	[esp+78h+var_74], eax
		mov	[esp+78h+var_78], 3
		call	silc_log_output
		jmp	loc_62B8FBA7
silc_client_notify_invite endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 175. silc_client_notify_signoff

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public silc_client_notify_signoff
silc_client_notify_signoff proc	near	; DATA XREF: silc_client_notify:loc_62B92478o

var_78		= dword	ptr -78h
var_74		= dword	ptr -74h
var_70		= dword	ptr -70h
var_6C		= dword	ptr -6Ch
var_68		= dword	ptr -68h
var_64		= dword	ptr -64h
var_58		= dword	ptr -58h
var_52		= word ptr -52h
var_50		= dword	ptr -50h
var_4C		= dword	ptr -4Ch
var_3C		= byte ptr -3Ch
var_1C		= dword	ptr -1Ch
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		sub	esp, 6Ch
		mov	ebx, [ebp+arg_4]
		mov	eax, [ebp+arg_8]
		mov	edi, [ebx+4Ch]
		mov	esi, [eax+4]
		mov	eax, [eax]
		mov	[ebp+var_50], eax
		mov	[esp+78h+var_78], esi
		call	silc_notify_get_type
		mov	[ebp+var_52], ax
		mov	[esp+78h+var_78], esi
		call	silc_notify_get_args
		mov	[ebp+var_4C], eax
		mov	[esp+78h+var_68], 0
		lea	eax, [ebp+var_3C]
		mov	[esp+78h+var_6C], eax
		mov	[esp+78h+var_70], 0
		mov	[esp+78h+var_74], 1
		mov	edx, [ebp+var_4C]
		mov	[esp+78h+var_78], edx
		call	silc_argument_get_decoded
		test	al, al
		jnz	short loc_62B8FD7C

loc_62B8FD5F:				; CODE XREF: silc_client_notify_signoff+93j
					; silc_client_notify_signoff+136j
		mov	[esp+78h+var_74], offset silc_client_notify_processed
		mov	eax, [ebp+arg_0]
		mov	[esp+78h+var_78], eax
		call	silc_fsm_next
		xor	eax, eax
		add	esp, 6Ch
		pop	ebx
		pop	esi
		pop	edi
		leave
		retn
; ---------------------------------------------------------------------------

loc_62B8FD7C:				; CODE XREF: silc_client_notify_signoff+5Dj
		lea	eax, [ebp+var_3C]
		mov	[esp+78h+var_70], eax
		mov	[esp+78h+var_74], ebx
		mov	[esp+78h+var_78], edi
		call	silc_client_get_client_by_id
		mov	esi, eax
		test	eax, eax
		jz	short loc_62B8FD5F
		lea	eax, [ebp+var_1C]
		mov	[esp+78h+var_70], eax
		mov	[esp+78h+var_74], 2
		mov	edx, [ebp+var_4C]
		mov	[esp+78h+var_78], edx
		call	silc_argument_get_arg_type
		mov	ecx, eax
		test	eax, eax
		jz	short loc_62B8FDC5
		cmp	[ebp+var_1C], 80h
		jbe	short loc_62B8FDC5
		mov	byte ptr [eax+80h], 0

loc_62B8FDC5:				; CODE XREF: silc_client_notify_signoff+B3j
					; silc_client_notify_signoff+BCj
		mov	edx, [ebp+var_50]
		mov	al, [edx+21h]
		and	eax, 0FFFFFFC0h
		cmp	al, 0C0h
		jz	loc_62B8FE70

loc_62B8FDD6:				; CODE XREF: silc_client_notify_signoff+1A4j
		xor	edx, edx

loc_62B8FDD8:				; CODE XREF: silc_client_notify_signoff+1C2j
		test	byte ptr [esi+402h], 1
		jnz	short loc_62B8FE3C

loc_62B8FDE1:				; CODE XREF: silc_client_notify_signoff+169j
		test	edx, edx
		jz	short loc_62B8FE0F
		mov	[esp+78h+var_6C], esi
		mov	[esp+78h+var_70], edx
		mov	[esp+78h+var_74], ebx
		mov	[esp+78h+var_78], edi
		mov	[ebp+var_58], edx
		call	silc_client_remove_from_channel
		mov	edx, [ebp+var_58]
		mov	[esp+78h+var_70], edx
		mov	[esp+78h+var_74], ebx
		mov	[esp+78h+var_78], edi
		call	silc_client_unref_channel

loc_62B8FE0F:				; CODE XREF: silc_client_notify_signoff+E3j
		and	byte ptr [esi+402h], 0FEh
		mov	[esp+78h+var_70], esi
		mov	[esp+78h+var_74], ebx
		mov	[esp+78h+var_78], edi
		call	silc_client_del_client
		mov	[esp+78h+var_70], esi
		mov	[esp+78h+var_74], ebx
		mov	[esp+78h+var_78], edi
		call	silc_client_unref_client
		jmp	loc_62B8FD5F
; ---------------------------------------------------------------------------
		align 4

loc_62B8FE3C:				; CODE XREF: silc_client_notify_signoff+DFj
		mov	eax, [ebx+4Ch]
		mov	eax, [eax+18h]
		mov	eax, [eax+48h]
		mov	[esp+78h+var_64], edx
		mov	[esp+78h+var_68], ecx
		mov	[esp+78h+var_6C], esi
		movzx	ecx, [ebp+var_52]
		mov	[esp+78h+var_70], ecx
		mov	[esp+78h+var_74], ebx
		mov	[esp+78h+var_78], edi
		mov	[ebp+var_58], edx
		call	dword ptr [eax+0Ch]
		mov	edx, [ebp+var_58]
		jmp	loc_62B8FDE1
; ---------------------------------------------------------------------------
		align 10h

loc_62B8FE70:				; CODE XREF: silc_client_notify_signoff+D0j
		mov	[esp+78h+var_68], 16h
		lea	eax, [ebp+var_3C]
		mov	[esp+78h+var_6C], eax
		mov	[esp+78h+var_70], 3
		mov	al, [edx+21h]
		and	eax, 3Fh
		mov	[esp+78h+var_74], eax
		mov	eax, [edx+1Ch]
		mov	[esp+78h+var_78], eax
		mov	[ebp+var_58], ecx
		call	silc_id_str2id
		test	al, al
		mov	ecx, [ebp+var_58]
		jz	loc_62B8FDD6
		lea	edx, [ebp+var_3C]
		mov	[esp+78h+var_70], edx
		mov	[esp+78h+var_74], ebx
		mov	[esp+78h+var_78], edi
		call	silc_client_get_channel_by_id
		mov	edx, eax
		mov	ecx, [ebp+var_58]
		jmp	loc_62B8FDD8
silc_client_notify_signoff endp

; ---------------------------------------------------------------------------
		align 4
; Exported entry 169. silc_client_notify_leave

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public silc_client_notify_leave
silc_client_notify_leave proc near	; DATA XREF: silc_client_notify:loc_62B92494o

var_68		= dword	ptr -68h
var_64		= dword	ptr -64h
var_60		= dword	ptr -60h
var_5C		= dword	ptr -5Ch
var_58		= dword	ptr -58h
var_42		= word ptr -42h
var_40		= dword	ptr -40h
var_3C		= dword	ptr -3Ch
var_38		= byte ptr -38h
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		sub	esp, 5Ch
		mov	ebx, [ebp+arg_4]
		mov	eax, [ebx+4Ch]
		mov	[ebp+var_3C], eax
		mov	edx, [ebp+arg_8]
		mov	edi, [edx+4]
		mov	esi, [edx]
		mov	[esp+68h+var_68], edi
		call	silc_notify_get_type
		mov	[ebp+var_42], ax
		mov	[esp+68h+var_68], edi
		call	silc_notify_get_args
		mov	[ebp+var_40], eax
		mov	[esp+68h+var_58], 16h
		lea	edi, [ebp+var_38]
		mov	[esp+68h+var_5C], edi
		mov	[esp+68h+var_60], 3
		mov	al, [esi+21h]
		and	eax, 3Fh
		mov	[esp+68h+var_64], eax
		mov	eax, [esi+1Ch]
		mov	[esp+68h+var_68], eax
		call	silc_id_str2id
		test	al, al
		jnz	short loc_62B8FF5C
		xor	esi, esi

loc_62B8FF2B:				; CODE XREF: silc_client_notify_leave+ABj
					; silc_client_notify_leave+155j ...
		mov	[esp+68h+var_60], esi
		mov	[esp+68h+var_64], ebx
		mov	ecx, [ebp+var_3C]
		mov	[esp+68h+var_68], ecx
		call	silc_client_unref_channel
		mov	[esp+68h+var_64], offset silc_client_notify_processed
		mov	eax, [ebp+arg_0]
		mov	[esp+68h+var_68], eax
		call	silc_fsm_next
		xor	eax, eax
		add	esp, 5Ch
		pop	ebx
		pop	esi
		pop	edi
		leave
		retn
; ---------------------------------------------------------------------------
		align 4

loc_62B8FF5C:				; CODE XREF: silc_client_notify_leave+5Fj
		mov	[esp+68h+var_60], edi
		mov	[esp+68h+var_64], ebx
		mov	ecx, [ebp+var_3C]
		mov	[esp+68h+var_68], ecx
		call	silc_client_get_channel_by_id
		mov	esi, eax
		test	eax, eax
		jz	short loc_62B8FF2B
		cmp	word ptr [eax+17Ch], 0
		jz	short loc_62B8FFF4
		mov	[esp+68h+var_60], eax
		mov	[esp+68h+var_64], ebx
		mov	eax, [ebp+var_3C]
		mov	[esp+68h+var_68], eax
		call	silc_client_unref_channel
		mov	edx, [ebp+arg_0]
		mov	al, [edx+28h]
		mov	dl, al
		or	edx, 4
		mov	ecx, [ebp+arg_0]
		mov	[ecx+28h], dl
		test	al, 4
		jnz	loc_62B900A0

loc_62B8FFAB:				; CODE XREF: silc_client_notify_leave+204j
		mov	eax, [ebp+arg_8]
		mov	[esp+68h+var_58], eax
		mov	[esp+68h+var_5C], offset sub_62B8F2C4
		movzx	eax, word ptr [esi+17Ch]
		mov	[esp+68h+var_60], eax
		mov	[esp+68h+var_64], 0
		mov	[esp+68h+var_68], ebx
		call	silc_client_command_pending
		mov	ecx, [ebp+arg_0]
		mov	dl, [ecx+28h]
		mov	al, dl
		shr	al, 2
		and	edx, 0FFFFFFFBh
		mov	[ecx+28h], dl
		shl	eax, 1
		and	eax, 2
		add	esp, 5Ch
		pop	ebx
		pop	esi
		pop	edi
		leave
		retn
; ---------------------------------------------------------------------------
		align 4

loc_62B8FFF4:				; CODE XREF: silc_client_notify_leave+B5j
		mov	[esp+68h+var_58], 0
		mov	[esp+68h+var_5C], edi
		mov	[esp+68h+var_60], 0
		mov	[esp+68h+var_64], 1
		mov	eax, [ebp+var_40]
		mov	[esp+68h+var_68], eax
		call	silc_argument_get_decoded
		test	al, al
		jz	loc_62B8FF2B
		mov	[esp+68h+var_60], edi
		mov	[esp+68h+var_64], ebx
		mov	edx, [ebp+var_3C]
		mov	[esp+68h+var_68], edx
		call	silc_client_get_client_by_id
		mov	edi, eax
		test	eax, eax
		jz	loc_62B8FF2B
		mov	[esp+68h+var_5C], eax
		mov	[esp+68h+var_60], esi
		mov	[esp+68h+var_64], ebx
		mov	ecx, [ebp+var_3C]
		mov	[esp+68h+var_68], ecx
		call	silc_client_remove_from_channel
		test	al, al
		jz	loc_62B8FF2B
		mov	eax, [ebx+4Ch]
		mov	eax, [eax+18h]
		mov	edx, [eax+48h]
		mov	[esp+68h+var_58], esi
		mov	[esp+68h+var_5C], edi
		movzx	eax, [ebp+var_42]
		mov	[esp+68h+var_60], eax
		mov	[esp+68h+var_64], ebx
		mov	eax, [ebp+var_3C]
		mov	[esp+68h+var_68], eax
		call	dword ptr [edx+0Ch]
		mov	[esp+68h+var_60], edi
		mov	[esp+68h+var_64], ebx
		mov	edx, [ebp+var_3C]
		mov	[esp+68h+var_68], edx
		call	silc_client_unref_client
		jmp	loc_62B8FF2B
; ---------------------------------------------------------------------------
		align 10h

loc_62B900A0:				; CODE XREF: silc_client_notify_leave+DDj
		mov	[esp+68h+var_60], 1DAh
		mov	[esp+68h+var_64], offset aClient_notify_ ; "client_notify.c"
		mov	[esp+68h+var_68], offset aSilc_verifyS_3 ; "SILC_VERIFY	%s:%d"
		call	silc_format
		mov	[esp+68h+var_64], eax
		mov	[esp+68h+var_68], 3
		call	silc_log_output
		jmp	loc_62B8FFAB
silc_client_notify_leave endp

; ---------------------------------------------------------------------------
		align 4
; Exported entry 167. silc_client_notify_kicked

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public silc_client_notify_kicked
silc_client_notify_kicked proc near	; DATA XREF: silc_client_notify:loc_62B92398o

var_88		= dword	ptr -88h
var_84		= dword	ptr -84h
var_80		= dword	ptr -80h
var_7C		= dword	ptr -7Ch
var_78		= dword	ptr -78h
var_74		= dword	ptr -74h
var_70		= dword	ptr -70h
var_60		= dword	ptr -60h
var_5C		= dword	ptr -5Ch
var_56		= word ptr -56h
var_54		= dword	ptr -54h
var_50		= dword	ptr -50h
var_4C		= dword	ptr -4Ch
var_3C		= byte ptr -3Ch
var_1C		= byte ptr -1Ch
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		sub	esp, 7Ch
		mov	ebx, [ebp+arg_4]
		mov	eax, [ebx+4Ch]
		mov	[ebp+var_50], eax
		mov	edx, [ebp+arg_8]
		mov	edi, [edx+4]
		mov	esi, [edx]
		mov	[esp+88h+var_88], edi
		call	silc_notify_get_type
		mov	[ebp+var_56], ax
		mov	[esp+88h+var_88], edi
		call	silc_notify_get_args
		mov	[ebp+var_54], eax
		mov	[esp+88h+var_78], 16h
		lea	edi, [ebp+var_3C]
		mov	[esp+88h+var_7C], edi
		mov	[esp+88h+var_80], 3
		mov	al, [esi+21h]
		and	eax, 3Fh
		mov	[esp+88h+var_84], eax
		mov	eax, [esi+1Ch]
		mov	[esp+88h+var_88], eax
		call	silc_id_str2id
		test	al, al
		jnz	short loc_62B90168
		xor	esi, esi

loc_62B90137:				; CODE XREF: silc_client_notify_kicked+ABj
					; silc_client_notify_kicked+15Dj ...
		mov	[esp+88h+var_80], esi
		mov	[esp+88h+var_84], ebx
		mov	eax, [ebp+var_50]
		mov	[esp+88h+var_88], eax
		call	silc_client_unref_channel
		mov	[esp+88h+var_84], offset silc_client_notify_processed
		mov	edx, [ebp+arg_0]
		mov	[esp+88h+var_88], edx
		call	silc_fsm_next
		xor	eax, eax

loc_62B9015F:				; CODE XREF: silc_client_notify_kicked+26Ej
		add	esp, 7Ch
		pop	ebx
		pop	esi
		pop	edi
		leave
		retn
; ---------------------------------------------------------------------------
		align 4

loc_62B90168:				; CODE XREF: silc_client_notify_kicked+5Fj
		mov	[esp+88h+var_80], edi
		mov	[esp+88h+var_84], ebx
		mov	ecx, [ebp+var_50]
		mov	[esp+88h+var_88], ecx
		call	silc_client_get_channel_by_id
		mov	esi, eax
		test	eax, eax
		jz	short loc_62B90137
		cmp	word ptr [eax+17Ch], 0
		jz	short loc_62B90208
		mov	[esp+88h+var_80], eax
		mov	[esp+88h+var_84], ebx
		mov	eax, [ebp+var_50]
		mov	[esp+88h+var_88], eax
		call	silc_client_unref_channel
		mov	edx, [ebp+arg_0]
		mov	al, [edx+28h]
		mov	dl, al
		or	edx, 4
		mov	ecx, [ebp+arg_0]
		mov	[ecx+28h], dl
		test	al, 4
		jnz	loc_62B90348

loc_62B901B7:				; CODE XREF: silc_client_notify_kicked+2A0j
		mov	eax, [ebp+arg_8]
		mov	[esp+88h+var_78], eax
		mov	[esp+88h+var_7C], offset sub_62B8F2C4
		movzx	eax, word ptr [esi+17Ch]
		mov	[esp+88h+var_80], eax
		mov	[esp+88h+var_84], 0
		mov	[esp+88h+var_88], ebx
		call	silc_client_command_pending
		mov	edx, [ebp+arg_0]
		mov	al, [edx+28h]
		mov	dl, al
		and	edx, 0FFFFFFFBh
		mov	ecx, [ebp+arg_0]
		mov	[ecx+28h], dl
		test	al, 4
		jz	loc_62B90340

loc_62B901FA:				; CODE XREF: silc_client_notify_kicked+265j
		mov	eax, 2
		add	esp, 7Ch
		pop	ebx
		pop	esi
		pop	edi
		leave
		retn
; ---------------------------------------------------------------------------
		align 4

loc_62B90208:				; CODE XREF: silc_client_notify_kicked+B5j
		mov	[esp+88h+var_78], 0
		mov	[esp+88h+var_7C], edi
		mov	[esp+88h+var_80], 0
		mov	[esp+88h+var_84], 1
		mov	eax, [ebp+var_54]
		mov	[esp+88h+var_88], eax
		call	silc_argument_get_decoded
		test	al, al
		jz	loc_62B90137
		mov	[esp+88h+var_80], edi
		mov	[esp+88h+var_84], ebx
		mov	edx, [ebp+var_50]
		mov	[esp+88h+var_88], edx
		call	silc_client_get_client_by_id
		test	eax, eax
		jz	loc_62B90137
		mov	[esp+88h+var_78], 0
		mov	[esp+88h+var_7C], edi
		mov	[esp+88h+var_80], 0
		mov	[esp+88h+var_84], 3
		mov	ecx, [ebp+var_54]
		mov	[esp+88h+var_88], ecx
		mov	[ebp+var_5C], eax
		call	silc_argument_get_decoded
		test	al, al
		jz	loc_62B90137
		mov	[esp+88h+var_80], edi
		mov	[esp+88h+var_84], ebx
		mov	eax, [ebp+var_50]
		mov	[esp+88h+var_88], eax
		call	silc_client_get_client_by_id
		mov	ecx, eax
		test	eax, eax
		mov	edx, [ebp+var_5C]
		jz	short loc_62B902AD
		test	byte ptr [eax+402h], 1
		jnz	loc_62B90379

loc_62B902AD:				; CODE XREF: silc_client_notify_kicked+1CAj
		mov	[esp+88h+var_80], edx
		mov	[esp+88h+var_84], ebx
		mov	edx, [ebp+var_50]
		mov	[esp+88h+var_88], edx
		mov	[ebp+var_60], ecx
		call	silc_client_unref_client
		mov	ecx, [ebp+var_60]
		mov	[esp+88h+var_80], ecx
		mov	[esp+88h+var_84], ebx
		mov	ecx, [ebp+var_50]
		mov	[esp+88h+var_88], ecx
		call	silc_client_unref_client
		mov	eax, [ebp+arg_8]
		mov	[eax+0Ch], esi
		mov	edx, [ebp+arg_0]
		mov	al, [edx+28h]
		mov	dl, al
		or	edx, 4
		mov	ecx, [ebp+arg_0]
		mov	[ecx+28h], dl
		test	al, 4
		jnz	loc_62B9043F

loc_62B902F8:				; CODE XREF: silc_client_notify_kicked+397j
		mov	eax, [ebp+arg_8]
		mov	[esp+88h+var_74], eax
		mov	[esp+88h+var_78], offset sub_62B8F1E4
		mov	[esp+88h+var_7C], 0
		mov	[esp+88h+var_80], edi
		mov	[esp+88h+var_84], ebx
		mov	edx, [ebp+var_50]
		mov	[esp+88h+var_88], edx
		call	silc_client_get_client_by_id_resolve
		mov	[esi+17Ch], ax
		mov	ecx, [ebp+arg_0]
		mov	al, [ecx+28h]
		mov	dl, al
		and	edx, 0FFFFFFFBh
		mov	[ecx+28h], dl
		test	al, 4
		jnz	loc_62B901FA
		nop

loc_62B90340:				; CODE XREF: silc_client_notify_kicked+120j
		xor	eax, eax
		jmp	loc_62B9015F
; ---------------------------------------------------------------------------
		align 4

loc_62B90348:				; CODE XREF: silc_client_notify_kicked+DDj
		mov	[esp+88h+var_80], 4DFh
		mov	[esp+88h+var_84], offset aClient_notify_ ; "client_notify.c"
		mov	[esp+88h+var_88], offset aSilc_verifyS_3 ; "SILC_VERIFY	%s:%d"
		call	silc_format
		mov	[esp+88h+var_84], eax
		mov	[esp+88h+var_88], 3
		call	silc_log_output
		jmp	loc_62B901B7
; ---------------------------------------------------------------------------

loc_62B90379:				; CODE XREF: silc_client_notify_kicked+1D3j
		lea	eax, [ebp+var_1C]
		mov	[esp+88h+var_80], eax
		mov	[esp+88h+var_84], 2
		mov	eax, [ebp+var_54]
		mov	[esp+88h+var_88], eax
		mov	[ebp+var_5C], edx
		mov	[ebp+var_60], ecx
		call	silc_argument_get_arg_type
		mov	edi, eax
		mov	edx, [ebp+var_5C]
		cmp	edx, [ebx]
		mov	ecx, [ebp+var_60]
		jz	short loc_62B903CA
		mov	[esp+88h+var_7C], edx
		mov	[esp+88h+var_80], esi
		mov	[esp+88h+var_84], ebx
		mov	eax, [ebp+var_50]
		mov	[esp+88h+var_88], eax
		call	silc_client_remove_from_channel
		test	al, al
		mov	edx, [ebp+var_5C]
		mov	ecx, [ebp+var_60]
		jz	loc_62B90137

loc_62B903CA:				; CODE XREF: silc_client_notify_kicked+2CFj
		mov	eax, [ebx+4Ch]
		mov	eax, [eax+18h]
		mov	eax, [eax+48h]
		mov	[ebp+var_4C], eax
		mov	[esp+88h+var_70], esi
		mov	[esp+88h+var_74], ecx
		mov	[esp+88h+var_78], edi
		mov	[esp+88h+var_7C], edx
		movzx	eax, [ebp+var_56]
		mov	[esp+88h+var_80], eax
		mov	[esp+88h+var_84], ebx
		mov	eax, [ebp+var_50]
		mov	[esp+88h+var_88], eax
		mov	[ebp+var_5C], edx
		mov	[ebp+var_60], ecx
		mov	eax, [ebp+var_4C]
		call	dword ptr [eax+0Ch]
		mov	edx, [ebp+var_5C]
		cmp	edx, [ebx]
		mov	ecx, [ebp+var_60]
		jz	short loc_62B90470

loc_62B9040E:				; CODE XREF: silc_client_notify_kicked+3D3j
		mov	[esp+88h+var_80], edx
		mov	[esp+88h+var_84], ebx
		mov	edx, [ebp+var_50]
		mov	[esp+88h+var_88], edx
		mov	[ebp+var_60], ecx
		call	silc_client_unref_client
		mov	ecx, [ebp+var_60]
		mov	[esp+88h+var_80], ecx
		mov	[esp+88h+var_84], ebx
		mov	ecx, [ebp+var_50]
		mov	[esp+88h+var_88], ecx
		call	silc_client_unref_client
		jmp	loc_62B90137
; ---------------------------------------------------------------------------

loc_62B9043F:				; CODE XREF: silc_client_notify_kicked+21Ej
		mov	[esp+88h+var_80], 4FBh
		mov	[esp+88h+var_84], offset aClient_notify_ ; "client_notify.c"
		mov	[esp+88h+var_88], offset aSilc_verifyS_3 ; "SILC_VERIFY	%s:%d"
		call	silc_format
		mov	[esp+88h+var_84], eax
		mov	[esp+88h+var_88], 3
		call	silc_log_output
		jmp	loc_62B902F8
; ---------------------------------------------------------------------------

loc_62B90470:				; CODE XREF: silc_client_notify_kicked+338j
		cmp	esi, [ebx+30h]
		jz	short loc_62B904AC

loc_62B90475:				; CODE XREF: silc_client_notify_kicked+3DFj
		mov	[esp+88h+var_80], esi
		mov	[esp+88h+var_84], ebx
		mov	eax, [ebp+var_50]
		mov	[esp+88h+var_88], eax
		mov	[ebp+var_5C], edx
		mov	[ebp+var_60], ecx
		call	silc_client_empty_channel
		mov	[esp+88h+var_80], esi
		mov	[esp+88h+var_84], ebx
		mov	eax, [ebp+var_50]
		mov	[esp+88h+var_88], eax
		call	silc_client_del_channel
		mov	ecx, [ebp+var_60]
		mov	edx, [ebp+var_5C]
		jmp	loc_62B9040E
; ---------------------------------------------------------------------------

loc_62B904AC:				; CODE XREF: silc_client_notify_kicked+39Fj
		mov	dword ptr [ebx+30h], 0
		jmp	short loc_62B90475
silc_client_notify_kicked endp

; ---------------------------------------------------------------------------
		align 4
; Exported entry 161. silc_client_notify_channel_change

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public silc_client_notify_channel_change
silc_client_notify_channel_change proc near ; DATA XREF: silc_client_notify:loc_62B923D0o

var_68		= dword	ptr -68h
var_64		= dword	ptr -64h
var_60		= dword	ptr -60h
var_5C		= dword	ptr -5Ch
var_58		= dword	ptr -58h
var_42		= word ptr -42h
var_40		= dword	ptr -40h
var_3C		= dword	ptr -3Ch
var_38		= byte ptr -38h
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		sub	esp, 5Ch
		mov	ebx, [ebp+arg_4]
		mov	eax, [ebx+4Ch]
		mov	[ebp+var_3C], eax
		mov	edx, [ebp+arg_8]
		mov	esi, [edx+4]
		mov	[esp+68h+var_68], esi
		call	silc_notify_get_type
		mov	[ebp+var_42], ax
		mov	[esp+68h+var_68], esi
		call	silc_notify_get_args
		mov	[ebp+var_40], eax
		mov	[esp+68h+var_58], 0
		lea	edi, [ebp+var_38]
		mov	[esp+68h+var_5C], edi
		mov	[esp+68h+var_60], 0
		mov	[esp+68h+var_64], 1
		mov	[esp+68h+var_68], eax
		call	silc_argument_get_decoded
		test	al, al
		jnz	short loc_62B90544
		xor	esi, esi

loc_62B90514:				; CODE XREF: silc_client_notify_channel_change+A3j
					; silc_client_notify_channel_change+14Dj ...
		mov	[esp+68h+var_60], esi
		mov	[esp+68h+var_64], ebx
		mov	eax, [ebp+var_3C]
		mov	[esp+68h+var_68], eax
		call	silc_client_unref_channel
		mov	[esp+68h+var_64], offset silc_client_notify_processed
		mov	edx, [ebp+arg_0]
		mov	[esp+68h+var_68], edx
		call	silc_fsm_next
		xor	eax, eax
		add	esp, 5Ch
		pop	ebx
		pop	esi
		pop	edi
		leave
		retn
; ---------------------------------------------------------------------------

loc_62B90544:				; CODE XREF: silc_client_notify_channel_change+58j
		mov	[esp+68h+var_60], edi
		mov	[esp+68h+var_64], ebx
		mov	ecx, [ebp+var_3C]
		mov	[esp+68h+var_68], ecx
		call	silc_client_get_channel_by_id
		mov	esi, eax
		test	eax, eax
		jz	short loc_62B90514
		cmp	word ptr [eax+17Ch], 0
		jz	short loc_62B905DC
		mov	[esp+68h+var_60], eax
		mov	[esp+68h+var_64], ebx
		mov	eax, [ebp+var_3C]
		mov	[esp+68h+var_68], eax
		call	silc_client_unref_channel
		mov	edx, [ebp+arg_0]
		mov	al, [edx+28h]
		mov	dl, al
		or	edx, 4
		mov	ecx, [ebp+arg_0]
		mov	[ecx+28h], dl
		test	al, 4
		jnz	loc_62B90658

loc_62B90593:				; CODE XREF: silc_client_notify_channel_change+1CCj
		mov	eax, [ebp+arg_8]
		mov	[esp+68h+var_58], eax
		mov	[esp+68h+var_5C], offset sub_62B8F2C4
		movzx	eax, word ptr [esi+17Ch]
		mov	[esp+68h+var_60], eax
		mov	[esp+68h+var_64], 0
		mov	[esp+68h+var_68], ebx
		call	silc_client_command_pending
		mov	ecx, [ebp+arg_0]
		mov	dl, [ecx+28h]
		mov	al, dl
		shr	al, 2
		and	edx, 0FFFFFFFBh
		mov	[ecx+28h], dl
		shl	eax, 1
		and	eax, 2
		add	esp, 5Ch
		pop	ebx
		pop	esi
		pop	edi
		leave
		retn
; ---------------------------------------------------------------------------
		align 4

loc_62B905DC:				; CODE XREF: silc_client_notify_channel_change+ADj
		mov	[esp+68h+var_58], 0
		mov	[esp+68h+var_5C], edi
		mov	[esp+68h+var_60], 0
		mov	[esp+68h+var_64], 2
		mov	eax, [ebp+var_40]
		mov	[esp+68h+var_68], eax
		call	silc_argument_get_decoded
		test	al, al
		jz	loc_62B90514
		mov	[esp+68h+var_5C], edi
		mov	[esp+68h+var_60], esi
		mov	[esp+68h+var_64], ebx
		mov	edx, [ebp+var_3C]
		mov	[esp+68h+var_68], edx
		call	silc_client_replace_channel_id
		test	al, al
		jz	loc_62B90514
		mov	eax, [ebx+4Ch]
		mov	eax, [eax+18h]
		mov	eax, [eax+48h]
		mov	[esp+68h+var_58], esi
		mov	[esp+68h+var_5C], esi
		movzx	edx, [ebp+var_42]
		mov	[esp+68h+var_60], edx
		mov	[esp+68h+var_64], ebx
		mov	ecx, [ebp+var_3C]
		mov	[esp+68h+var_68], ecx
		call	dword ptr [eax+0Ch]
		jmp	loc_62B90514
; ---------------------------------------------------------------------------
		align 4

loc_62B90658:				; CODE XREF: silc_client_notify_channel_change+D5j
		mov	[esp+68h+var_60], 4A5h
		mov	[esp+68h+var_64], offset aClient_notify_ ; "client_notify.c"
		mov	[esp+68h+var_68], offset aSilc_verifyS_3 ; "SILC_VERIFY	%s:%d"
		call	silc_format
		mov	[esp+68h+var_64], eax
		mov	[esp+68h+var_68], 3
		call	silc_log_output
		jmp	loc_62B90593
silc_client_notify_channel_change endp

; ---------------------------------------------------------------------------
		align 4
; Exported entry 163. silc_client_notify_cumode_change

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public silc_client_notify_cumode_change
silc_client_notify_cumode_change proc near ; DATA XREF:	silc_client_notify:loc_62B92408o

var_D8		= dword	ptr -0D8h
var_D4		= dword	ptr -0D4h
var_D0		= dword	ptr -0D0h
var_CC		= dword	ptr -0CCh
var_C8		= dword	ptr -0C8h
var_C4		= dword	ptr -0C4h
var_C0		= dword	ptr -0C0h
var_BC		= dword	ptr -0BCh
var_AC		= dword	ptr -0ACh
var_A0		= dword	ptr -0A0h
var_9C		= dword	ptr -9Ch
var_98		= byte ptr -98h
var_7E		= byte ptr -7Eh
var_7D		= byte ptr -7Dh
var_7C		= dword	ptr -7Ch
var_78		= dword	ptr -78h
var_72		= word ptr -72h
var_70		= dword	ptr -70h
var_6C		= dword	ptr -6Ch
var_5C		= byte ptr -5Ch
var_3C		= byte ptr -3Ch
var_1E		= word ptr -1Eh
var_1C		= byte ptr -1Ch
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		sub	esp, 0CCh
		mov	ebx, [ebp+arg_4]
		mov	esi, [ebx+4Ch]
		mov	eax, [ebp+arg_8]
		mov	edx, [eax+4]
		mov	edi, [eax]
		mov	[esp+0D8h+var_D8], edx
		mov	[ebp+var_A0], edx
		call	silc_notify_get_type
		mov	[ebp+var_72], ax
		mov	edx, [ebp+var_A0]
		mov	[esp+0D8h+var_D8], edx
		call	silc_notify_get_args
		mov	[ebp+var_70], eax
		mov	[esp+0D8h+var_C8], 16h
		lea	edx, [ebp+var_3C]
		mov	[esp+0D8h+var_CC], edx
		mov	[esp+0D8h+var_D0], 3
		mov	al, [edi+21h]
		and	eax, 3Fh
		mov	[esp+0D8h+var_D4], eax
		mov	eax, [edi+1Ch]
		mov	[esp+0D8h+var_D8], eax
		call	silc_id_str2id
		test	al, al
		jnz	short loc_62B90740
		xor	edi, edi
		xor	edx, edx

loc_62B906FD:				; CODE XREF: silc_client_notify_cumode_change+188j
					; silc_client_notify_cumode_change+276j ...
		mov	[esp+0D8h+var_D0], edx
		mov	[esp+0D8h+var_D4], ebx
		mov	[esp+0D8h+var_D8], esi
		call	silc_client_unref_client

loc_62B9070D:				; CODE XREF: silc_client_notify_cumode_change+458j
					; silc_client_notify_cumode_change+471j
		mov	[esp+0D8h+var_D0], edi
		mov	[esp+0D8h+var_D4], ebx
		mov	[esp+0D8h+var_D8], esi
		call	silc_client_unref_channel
		mov	[esp+0D8h+var_D4], offset silc_client_notify_processed
		mov	edx, [ebp+arg_0]
		mov	[esp+0D8h+var_D8], edx
		call	silc_fsm_next
		xor	eax, eax

loc_62B90732:				; CODE XREF: silc_client_notify_cumode_change+222j
		add	esp, 0CCh
		pop	ebx
		pop	esi
		pop	edi
		leave
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_62B90740:				; CODE XREF: silc_client_notify_cumode_change+6Bj
		lea	ecx, [ebp+var_3C]
		mov	[esp+0D8h+var_D0], ecx
		mov	[esp+0D8h+var_D4], ebx
		mov	[esp+0D8h+var_D8], esi
		call	silc_client_get_channel_by_id
		mov	edi, eax
		test	eax, eax
		jz	loc_62B90812
		cmp	word ptr [eax+17Ch], 0
		jz	short loc_62B907E4
		mov	[esp+0D8h+var_D0], eax
		mov	[esp+0D8h+var_D4], ebx
		mov	[esp+0D8h+var_D8], esi
		call	silc_client_unref_channel
		mov	edx, [ebp+arg_0]
		mov	al, [edx+28h]
		mov	dl, al
		or	edx, 4
		mov	ecx, [ebp+arg_0]
		mov	[ecx+28h], dl
		test	al, 4
		jnz	loc_62B908B4

loc_62B90790:				; CODE XREF: silc_client_notify_cumode_change+254j
		mov	eax, [ebp+arg_8]
		mov	[esp+0D8h+var_C8], eax
		mov	[esp+0D8h+var_CC], offset sub_62B8F2C4
		movzx	eax, word ptr [edi+17Ch]
		mov	[esp+0D8h+var_D0], eax
		mov	[esp+0D8h+var_D4], 0
		mov	[esp+0D8h+var_D8], ebx
		call	silc_client_command_pending
		mov	edx, [ebp+arg_0]
		mov	al, [edx+28h]
		mov	dl, al
		and	edx, 0FFFFFFFBh
		mov	ecx, [ebp+arg_0]
		mov	[ecx+28h], dl
		test	al, 4
		jz	loc_62B908AC

loc_62B907D3:				; CODE XREF: silc_client_notify_cumode_change+219j
		mov	eax, 2
		add	esp, 0CCh
		pop	ebx
		pop	esi
		pop	edi
		leave
		retn
; ---------------------------------------------------------------------------
		align 4

loc_62B907E4:				; CODE XREF: silc_client_notify_cumode_change+D9j
		mov	[esp+0D8h+var_C8], 0
		lea	eax, [ebp+var_5C]
		mov	[esp+0D8h+var_CC], eax
		mov	[esp+0D8h+var_D0], 0
		mov	[esp+0D8h+var_D4], 3
		mov	edx, [ebp+var_70]
		mov	[esp+0D8h+var_D8], edx
		call	silc_argument_get_decoded
		test	al, al
		jnz	short loc_62B9081C

loc_62B90812:				; CODE XREF: silc_client_notify_cumode_change+CBj
		xor	edx, edx
		jmp	loc_62B906FD
; ---------------------------------------------------------------------------
		align 4

loc_62B9081C:				; CODE XREF: silc_client_notify_cumode_change+184j
		lea	ecx, [ebp+var_5C]
		mov	[esp+0D8h+var_D0], ecx
		mov	[esp+0D8h+var_D4], ebx
		mov	[esp+0D8h+var_D8], esi
		call	silc_client_get_client_by_id
		mov	edx, eax
		test	eax, eax
		jz	short loc_62B90842
		test	byte ptr [eax+402h], 1
		jnz	loc_62B908E8

loc_62B90842:				; CODE XREF: silc_client_notify_cumode_change+1A7j
		mov	[esp+0D8h+var_D0], edx
		mov	[esp+0D8h+var_D4], ebx
		mov	[esp+0D8h+var_D8], esi
		call	silc_client_unref_client
		mov	edx, [ebp+arg_0]
		mov	al, [edx+28h]
		mov	dl, al
		or	edx, 4
		mov	ecx, [ebp+arg_0]
		mov	[ecx+28h], dl
		test	al, 4
		jnz	loc_62B90B04

loc_62B9086B:				; CODE XREF: silc_client_notify_cumode_change+4A4j
		mov	eax, [ebp+arg_8]
		mov	[esp+0D8h+var_C4], eax
		mov	[esp+0D8h+var_C8], offset sub_62B8F1E4
		mov	[esp+0D8h+var_CC], 0
		lea	edx, [ebp+var_5C]
		mov	[esp+0D8h+var_D0], edx
		mov	[esp+0D8h+var_D4], ebx
		mov	[esp+0D8h+var_D8], esi
		call	silc_client_get_client_by_id_resolve

loc_62B90895:				; CODE XREF: silc_client_notify_cumode_change+5BBj
					; silc_client_notify_cumode_change+655j ...
		mov	ecx, [ebp+arg_0]
		mov	al, [ecx+28h]
		mov	dl, al
		and	edx, 0FFFFFFFBh
		mov	[ecx+28h], dl
		test	al, 4
		jnz	loc_62B907D3
		nop

loc_62B908AC:				; CODE XREF: silc_client_notify_cumode_change+141j
		xor	eax, eax
		jmp	loc_62B90732
; ---------------------------------------------------------------------------
		align 4

loc_62B908B4:				; CODE XREF: silc_client_notify_cumode_change+FEj
		mov	[esp+0D8h+var_D0], 3F4h
		mov	[esp+0D8h+var_D4], offset aClient_notify_ ; "client_notify.c"
		mov	[esp+0D8h+var_D8], offset aSilc_verifyS_3 ; "SILC_VERIFY %s:%d"
		call	silc_format
		mov	[esp+0D8h+var_D4], eax
		mov	[esp+0D8h+var_D8], 3
		call	silc_log_output
		jmp	loc_62B90790
; ---------------------------------------------------------------------------
		align 4

loc_62B908E8:				; CODE XREF: silc_client_notify_cumode_change+1B0j
		mov	[esp+0D8h+var_D4], eax
		mov	[esp+0D8h+var_D8], edi
		mov	[ebp+var_A0], eax
		call	silc_client_on_channel
		test	eax, eax
		mov	edx, [ebp+var_A0]
		jz	loc_62B906FD
		lea	eax, [ebp+var_1C]
		mov	[esp+0D8h+var_D0], eax
		mov	[esp+0D8h+var_D4], 2
		mov	eax, [ebp+var_70]
		mov	[esp+0D8h+var_D8], eax
		call	silc_argument_get_arg_type
		test	eax, eax
		mov	edx, [ebp+var_A0]
		jz	loc_62B906FD
		mov	cl, [eax]
		mov	[ebp+var_98], cl
		mov	cl, [eax+1]
		mov	[ebp+var_7E], cl
		mov	cl, [eax+2]
		mov	[ebp+var_7D], cl
		mov	al, [eax+3]
		mov	byte ptr [ebp+var_7C], al
		mov	[esp+0D8h+var_C8], 0
		lea	eax, [ebp+var_3C]
		mov	[esp+0D8h+var_CC], eax
		mov	[esp+0D8h+var_D0], 0
		mov	[esp+0D8h+var_D4], 1
		mov	ecx, [ebp+var_70]
		mov	[esp+0D8h+var_D8], ecx
		call	silc_argument_get_decoded
		test	al, al
		mov	edx, [ebp+var_A0]
		jz	loc_62B906FD
		mov	ax, [ebp+var_1E]
		cmp	ax, 2
		jz	loc_62B90B35
		dec	ax
		jz	loc_62B90B8E
		lea	ecx, [ebp+var_3C]
		mov	[esp+0D8h+var_D0], ecx
		mov	[esp+0D8h+var_D4], ebx
		mov	[esp+0D8h+var_D8], esi
		mov	[ebp+var_A0], edx
		call	silc_client_get_channel_by_id
		mov	[ebp+var_70], eax
		test	eax, eax
		mov	edx, [ebp+var_A0]
		jz	loc_62B90BD7
		mov	eax, [ebp+var_70]
		mov	[ebp+var_9C], eax
		mov	[ebp+var_78], 0
		mov	[ebp+var_AC], 0

loc_62B909DC:				; CODE XREF: silc_client_notify_cumode_change+4FDj
					; silc_client_notify_cumode_change+546j
		movzx	ecx, byte ptr [ebp+var_7C]
		mov	al, [ebp+var_98]
		shl	eax, 18h
		or	ecx, eax
		movzx	eax, [ebp+var_7E]
		shl	eax, 10h
		or	ecx, eax
		movzx	eax, [ebp+var_7D]
		shl	eax, 8
		or	ecx, eax
		mov	[ebp+var_6C], ecx
		mov	eax, [edi+144h]
		mov	[esp+0D8h+var_D8], eax
		mov	[ebp+var_A0], edx
		call	silc_rwlock_wrlock
		mov	edx, [ebp+var_A0]
		mov	[esp+0D8h+var_D4], edx
		mov	[esp+0D8h+var_D8], edi
		call	silc_client_on_channel
		mov	[ebp+var_7C], eax
		test	eax, eax
		mov	edx, [ebp+var_A0]
		jz	short loc_62B90A39
		mov	ecx, [ebp+var_6C]
		mov	[eax+4], ecx

loc_62B90A39:				; CODE XREF: silc_client_notify_cumode_change+3A5j
		mov	eax, [edi+144h]
		mov	[esp+0D8h+var_D8], eax
		mov	[ebp+var_A0], edx
		call	silc_rwlock_unlock
		mov	eax, [ebx+4Ch]
		mov	eax, [eax+18h]
		mov	ecx, [eax+48h]
		mov	[esp+0D8h+var_BC], edi
		mov	edx, [ebp+var_A0]
		mov	[esp+0D8h+var_C0], edx
		mov	eax, [ebp+var_6C]
		mov	[esp+0D8h+var_C4], eax
		mov	eax, [ebp+var_9C]
		mov	[esp+0D8h+var_C8], eax
		movzx	eax, [ebp+var_1E]
		mov	[esp+0D8h+var_CC], eax
		movzx	eax, [ebp+var_72]
		mov	[esp+0D8h+var_D0], eax
		mov	[esp+0D8h+var_D4], ebx
		mov	[esp+0D8h+var_D8], esi
		call	dword ptr [ecx+0Ch]
		mov	edx, [ebp+var_A0]

loc_62B90A95:				; CODE XREF: silc_client_notify_cumode_change+5CEj
		mov	[esp+0D8h+var_D0], edx
		mov	[esp+0D8h+var_D4], ebx
		mov	[esp+0D8h+var_D8], esi
		call	silc_client_unref_client
		mov	ecx, [ebp+var_AC]
		test	ecx, ecx
		jz	short loc_62B90AC5
		mov	edx, [ebp+var_AC]
		mov	[esp+0D8h+var_D0], edx
		mov	[esp+0D8h+var_D4], ebx
		mov	[esp+0D8h+var_D8], esi
		call	silc_client_unref_client

loc_62B90AC5:				; CODE XREF: silc_client_notify_cumode_change+421j
		mov	edx, [ebp+var_78]
		test	edx, edx
		jz	short loc_62B90ADF
		mov	ecx, [ebp+var_78]
		mov	[esp+0D8h+var_D0], ecx
		mov	[esp+0D8h+var_D4], ebx
		mov	[esp+0D8h+var_D8], esi
		call	silc_client_unref_server

loc_62B90ADF:				; CODE XREF: silc_client_notify_cumode_change+43Ej
		mov	eax, [ebp+var_70]
		test	eax, eax
		jz	loc_62B9070D
		mov	eax, [ebp+var_70]
		mov	[esp+0D8h+var_D0], eax
		mov	[esp+0D8h+var_D4], ebx
		mov	[esp+0D8h+var_D8], esi
		call	silc_client_unref_channel
		jmp	loc_62B9070D
; ---------------------------------------------------------------------------
		align 4

loc_62B90B04:				; CODE XREF: silc_client_notify_cumode_change+1D9j
		mov	[esp+0D8h+var_D0], 404h
		mov	[esp+0D8h+var_D4], offset aClient_notify_ ; "client_notify.c"
		mov	[esp+0D8h+var_D8], offset aSilc_verifyS_3 ; "SILC_VERIFY %s:%d"
		call	silc_format
		mov	[esp+0D8h+var_D4], eax
		mov	[esp+0D8h+var_D8], 3
		call	silc_log_output
		jmp	loc_62B9086B
; ---------------------------------------------------------------------------

loc_62B90B35:				; CODE XREF: silc_client_notify_cumode_change+2FEj
		mov	eax, [ebp+arg_8]
		mov	eax, [eax+10h]
		mov	[ebp+var_AC], eax
		test	eax, eax
		jz	loc_62B90C5F

loc_62B90B49:				; CODE XREF: silc_client_notify_cumode_change+5FDj
		mov	eax, [ebp+var_AC]
		mov	[esp+0D8h+var_D4], eax
		mov	[esp+0D8h+var_D8], edi
		mov	[ebp+var_A0], edx
		call	silc_client_on_channel
		test	eax, eax
		mov	edx, [ebp+var_A0]
		jz	loc_62B90C4C
		mov	ecx, [ebp+var_AC]
		mov	[ebp+var_9C], ecx
		mov	[ebp+var_78], 0
		mov	[ebp+var_70], 0
		jmp	loc_62B909DC
; ---------------------------------------------------------------------------

loc_62B90B8E:				; CODE XREF: silc_client_notify_cumode_change+306j
		lea	eax, [ebp+var_3C]
		mov	[esp+0D8h+var_D0], eax
		mov	[esp+0D8h+var_D4], ebx
		mov	[esp+0D8h+var_D8], esi
		mov	[ebp+var_A0], edx
		call	silc_client_get_server_by_id
		mov	[ebp+var_78], eax
		test	eax, eax
		mov	edx, [ebp+var_A0]
		jz	loc_62B90CE6
		mov	eax, [ebp+var_78]
		mov	[ebp+var_9C], eax
		mov	[ebp+var_70], 0
		mov	[ebp+var_AC], 0
		jmp	loc_62B909DC
; ---------------------------------------------------------------------------

loc_62B90BD7:				; CODE XREF: silc_client_notify_cumode_change+330j
		mov	eax, [ebp+arg_8]
		mov	[eax+0Ch], edi
		mov	edx, [ebp+arg_0]
		mov	al, [edx+28h]
		mov	dl, al
		or	edx, 4
		mov	ecx, [ebp+arg_0]
		mov	[ecx+28h], dl
		test	al, 4
		jz	short loc_62B90C1E
		mov	[esp+0D8h+var_D0], 446h
		mov	[esp+0D8h+var_D4], offset aClient_notify_ ; "client_notify.c"
		mov	[esp+0D8h+var_D8], offset aSilc_verifyS_3 ; "SILC_VERIFY %s:%d"
		call	silc_format
		mov	[esp+0D8h+var_D4], eax
		mov	[esp+0D8h+var_D8], 3
		call	silc_log_output

loc_62B90C1E:				; CODE XREF: silc_client_notify_cumode_change+564j
		mov	eax, [ebp+arg_8]
		mov	[esp+0D8h+var_C8], eax
		mov	[esp+0D8h+var_CC], offset sub_62B8F1E4
		lea	edx, [ebp+var_3C]
		mov	[esp+0D8h+var_D0], edx
		mov	[esp+0D8h+var_D4], ebx
		mov	[esp+0D8h+var_D8], esi
		call	silc_client_get_channel_by_id_resolve
		mov	[edi+17Ch], ax
		jmp	loc_62B90895
; ---------------------------------------------------------------------------

loc_62B90C4C:				; CODE XREF: silc_client_notify_cumode_change+4DDj
		mov	[ebp+var_78], 0
		mov	[ebp+var_70], 0
		jmp	loc_62B90A95
; ---------------------------------------------------------------------------

loc_62B90C5F:				; CODE XREF: silc_client_notify_cumode_change+4B7j
		lea	ecx, [ebp+var_3C]
		mov	[esp+0D8h+var_D0], ecx
		mov	[esp+0D8h+var_D4], ebx
		mov	[esp+0D8h+var_D8], esi
		call	silc_client_get_client
		mov	[ebp+var_AC], eax
		test	eax, eax
		mov	edx, [ebp+var_A0]
		jz	short loc_62B90C8F
		test	byte ptr [eax+402h], 1
		jnz	loc_62B90B49

loc_62B90C8F:				; CODE XREF: silc_client_notify_cumode_change+5F4j
		mov	eax, [ebp+arg_8]
		mov	[eax+0Ch], edi
		mov	edx, [ebp+var_AC]
		mov	[eax+10h], edx
		mov	ecx, [ebp+arg_0]
		mov	al, [ecx+28h]
		mov	dl, al
		or	edx, 4
		mov	[ecx+28h], dl
		test	al, 4
		jnz	short loc_62B90D2C

loc_62B90CB0:				; CODE XREF: silc_client_notify_cumode_change+6CCj
		mov	eax, [ebp+arg_8]
		mov	[esp+0D8h+var_C4], eax
		mov	[esp+0D8h+var_C8], offset sub_62B8F1E4
		mov	[esp+0D8h+var_CC], 0
		lea	edx, [ebp+var_3C]
		mov	[esp+0D8h+var_D0], edx
		mov	[esp+0D8h+var_D4], ebx
		mov	[esp+0D8h+var_D8], esi
		call	silc_client_get_client_by_id_resolve
		mov	[edi+17Ch], ax
		jmp	loc_62B90895
; ---------------------------------------------------------------------------

loc_62B90CE6:				; CODE XREF: silc_client_notify_cumode_change+526j
		mov	edx, [ebp+arg_8]
		mov	[edx+0Ch], edi
		mov	ecx, [ebp+arg_0]
		mov	al, [ecx+28h]
		mov	dl, al
		or	edx, 4
		mov	[ecx+28h], dl
		test	al, 4
		jnz	short loc_62B90D5D

loc_62B90CFE:				; CODE XREF: silc_client_notify_cumode_change+6FDj
		mov	eax, [ebp+arg_8]
		mov	[esp+0D8h+var_C8], eax
		mov	[esp+0D8h+var_CC], offset sub_62B8F1E4
		lea	edx, [ebp+var_3C]
		mov	[esp+0D8h+var_D0], edx
		mov	[esp+0D8h+var_D4], ebx
		mov	[esp+0D8h+var_D8], esi
		call	silc_client_get_server_by_id_resolve
		mov	[edi+17Ch], ax
		jmp	loc_62B90895
; ---------------------------------------------------------------------------

loc_62B90D2C:				; CODE XREF: silc_client_notify_cumode_change+622j
		mov	[esp+0D8h+var_D0], 423h
		mov	[esp+0D8h+var_D4], offset aClient_notify_ ; "client_notify.c"
		mov	[esp+0D8h+var_D8], offset aSilc_verifyS_3 ; "SILC_VERIFY %s:%d"
		call	silc_format
		mov	[esp+0D8h+var_D4], eax
		mov	[esp+0D8h+var_D8], 3
		call	silc_log_output
		jmp	loc_62B90CB0
; ---------------------------------------------------------------------------

loc_62B90D5D:				; CODE XREF: silc_client_notify_cumode_change+670j
		mov	[esp+0D8h+var_D0], 437h
		mov	[esp+0D8h+var_D4], offset aClient_notify_ ; "client_notify.c"
		mov	[esp+0D8h+var_D8], offset aSilc_verifyS_3 ; "SILC_VERIFY %s:%d"
		call	silc_format
		mov	[esp+0D8h+var_D4], eax
		mov	[esp+0D8h+var_D8], 3
		call	silc_log_output
		jmp	loc_62B90CFE
silc_client_notify_cumode_change endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 162. silc_client_notify_cmode_change

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public silc_client_notify_cmode_change
silc_client_notify_cmode_change	proc near ; DATA XREF: silc_client_notify:loc_62B92424o

var_108		= dword	ptr -108h
var_104		= dword	ptr -104h
var_100		= dword	ptr -100h
var_FC		= dword	ptr -0FCh
var_F8		= dword	ptr -0F8h
var_F4		= dword	ptr -0F4h
var_F0		= dword	ptr -0F0h
var_EC		= dword	ptr -0ECh
var_E8		= dword	ptr -0E8h
var_E4		= dword	ptr -0E4h
var_E0		= dword	ptr -0E0h
var_DC		= dword	ptr -0DCh
var_CC		= dword	ptr -0CCh
var_C8		= dword	ptr -0C8h
var_C4		= dword	ptr -0C4h
var_C0		= dword	ptr -0C0h
var_BC		= dword	ptr -0BCh
var_B8		= byte ptr -0B8h
var_A1		= byte ptr -0A1h
var_A0		= byte ptr -0A0h
var_9F		= byte ptr -9Fh
var_9E		= word ptr -9Eh
var_9C		= dword	ptr -9Ch
var_98		= dword	ptr -98h
var_94		= dword	ptr -94h
var_90		= dword	ptr -90h
var_8C		= dword	ptr -8Ch
var_84		= byte ptr -84h
var_44		= byte ptr -44h
var_26		= word ptr -26h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		sub	esp, 0FCh
		mov	ebx, [ebp+arg_4]
		mov	esi, [ebx+4Ch]
		mov	eax, [ebp+arg_8]
		mov	edi, [eax+4]
		mov	edx, [eax]
		mov	[esp+108h+var_108], edi
		mov	[ebp+var_C8], edx
		call	silc_notify_get_type
		mov	[ebp+var_9E], ax
		mov	[esp+108h+var_108], edi
		call	silc_notify_get_args
		mov	[ebp+var_9C], eax
		mov	[ebp+var_20], 0
		mov	[esp+108h+var_F8], 16h
		lea	edi, [ebp+var_44]
		mov	[esp+108h+var_FC], edi
		mov	[esp+108h+var_100], 3
		mov	edx, [ebp+var_C8]
		mov	al, [edx+21h]
		and	eax, 3Fh
		mov	[esp+108h+var_104], eax
		mov	eax, [edx+1Ch]
		mov	[esp+108h+var_108], eax
		call	silc_id_str2id
		test	al, al
		jnz	loc_62B90ED4
		mov	[ebp+var_98], 0
		mov	[ebp+var_94], 0
		mov	[ebp+var_90], 0
		xor	edx, edx

loc_62B90E2E:				; CODE XREF: silc_client_notify_cmode_change+5C6j
					; silc_client_notify_cmode_change+5E2j	...
		mov	eax, [ebp+var_20]
		test	eax, eax
		jz	short loc_62B90E49
		mov	[esp+108h+var_108], eax
		mov	[ebp+var_C8], edx
		call	silc_pkcs_public_key_free
		mov	edx, [ebp+var_C8]

loc_62B90E49:				; CODE XREF: silc_client_notify_cmode_change+A3j
		test	edx, edx
		jz	short loc_62B90E5D
		mov	[esp+108h+var_100], edx
		mov	[esp+108h+var_104], ebx
		mov	[esp+108h+var_108], esi
		call	silc_client_unref_client

loc_62B90E5D:				; CODE XREF: silc_client_notify_cmode_change+BBj
		mov	eax, [ebp+var_98]
		test	eax, eax
		jz	short loc_62B90E7D
		mov	edx, [ebp+var_98]
		mov	[esp+108h+var_100], edx
		mov	[esp+108h+var_104], ebx
		mov	[esp+108h+var_108], esi
		call	silc_client_unref_server

loc_62B90E7D:				; CODE XREF: silc_client_notify_cmode_change+D5j
		mov	edi, [ebp+var_94]
		test	edi, edi
		jz	short loc_62B90E9D
		mov	ecx, [ebp+var_94]
		mov	[esp+108h+var_100], ecx
		mov	[esp+108h+var_104], ebx
		mov	[esp+108h+var_108], esi
		call	silc_client_unref_channel

loc_62B90E9D:				; CODE XREF: silc_client_notify_cmode_change+F5j
		mov	eax, [ebp+var_90]
		mov	[esp+108h+var_100], eax
		mov	[esp+108h+var_104], ebx
		mov	[esp+108h+var_108], esi
		call	silc_client_unref_channel
		mov	[esp+108h+var_104], offset silc_client_notify_processed
		mov	edx, [ebp+arg_0]
		mov	[esp+108h+var_108], edx
		call	silc_fsm_next
		xor	eax, eax

loc_62B90EC8:				; CODE XREF: silc_client_notify_cmode_change+1E0j
					; silc_client_notify_cmode_change+5EAj
		add	esp, 0FCh
		pop	ebx
		pop	esi
		pop	edi
		leave
		retn
; ---------------------------------------------------------------------------
		align 4

loc_62B90ED4:				; CODE XREF: silc_client_notify_cmode_change+78j
		mov	[esp+108h+var_100], edi
		mov	[esp+108h+var_104], ebx
		mov	[esp+108h+var_108], esi
		call	silc_client_get_channel_by_id
		mov	[ebp+var_90], eax
		test	eax, eax
		jz	loc_62B9135C
		cmp	word ptr [eax+17Ch], 0
		jz	short loc_62B90F78
		mov	[esp+108h+var_100], eax
		mov	[esp+108h+var_104], ebx
		mov	[esp+108h+var_108], esi
		call	silc_client_unref_channel
		mov	edx, [ebp+arg_0]
		mov	al, [edx+28h]
		mov	dl, al
		or	edx, 4
		mov	ecx, [ebp+arg_0]
		mov	[ecx+28h], dl
		test	al, 4
		jnz	loc_62B91380

loc_62B90F25:				; CODE XREF: silc_client_notify_cmode_change+61Cj
		mov	eax, [ebp+arg_8]
		mov	[esp+108h+var_F8], eax
		mov	[esp+108h+var_FC], offset sub_62B8F2C4
		mov	edx, [ebp+var_90]
		movzx	eax, word ptr [edx+17Ch]
		mov	[esp+108h+var_100], eax
		mov	[esp+108h+var_104], 0
		mov	[esp+108h+var_108], ebx
		call	silc_client_command_pending

loc_62B90F55:				; CODE XREF: silc_client_notify_cmode_change+796j
		mov	ecx, [ebp+arg_0]
		mov	al, [ecx+28h]
		mov	dl, al
		and	edx, 0FFFFFFFBh
		mov	[ecx+28h], dl
		test	al, 4
		jz	loc_62B91378
		mov	eax, 2
		jmp	loc_62B90EC8
; ---------------------------------------------------------------------------
		align 4

loc_62B90F78:				; CODE XREF: silc_client_notify_cmode_change+16Aj
		lea	eax, [ebp+var_1C]
		mov	[esp+108h+var_100], eax
		mov	[esp+108h+var_104], 2
		mov	edx, [ebp+var_9C]
		mov	[esp+108h+var_108], edx
		call	silc_argument_get_arg_type
		test	eax, eax
		jz	loc_62B9135C
		mov	cl, [eax]
		mov	[ebp+var_B8], cl
		mov	dl, [eax+1]
		mov	[ebp+var_A1], dl
		mov	cl, [eax+2]
		mov	[ebp+var_A0], cl
		mov	al, [eax+3]
		mov	[ebp+var_9F], al
		mov	[esp+108h+var_F8], 0
		mov	[esp+108h+var_FC], edi
		mov	[esp+108h+var_100], 0
		mov	[esp+108h+var_104], 1
		mov	eax, [ebp+var_9C]
		mov	[esp+108h+var_108], eax
		call	silc_argument_get_decoded
		test	al, al
		jz	loc_62B9135C
		mov	ax, [ebp+var_26]
		cmp	ax, 2
		jz	loc_62B913D4
		dec	ax
		jz	loc_62B91427
		mov	[esp+108h+var_100], edi
		mov	[esp+108h+var_104], ebx
		mov	[esp+108h+var_108], esi
		call	silc_client_get_channel_by_id
		mov	[ebp+var_94], eax
		test	eax, eax
		jz	loc_62B914D5
		mov	eax, [ebp+var_94]
		mov	[ebp+var_BC], eax
		mov	[ebp+var_98], 0
		xor	edx, edx

loc_62B9103E:				; CODE XREF: silc_client_notify_cmode_change+692j
					; silc_client_notify_cmode_change+6CDj
		mov	ecx, [ebp+var_90]
		mov	eax, [ecx+144h]
		mov	[esp+108h+var_108], eax
		mov	[ebp+var_C8], edx
		call	silc_rwlock_wrlock
		lea	eax, [ebp+var_1C]
		mov	[esp+108h+var_100], eax
		mov	[esp+108h+var_104], 6
		mov	ecx, [ebp+var_9C]
		mov	[esp+108h+var_108], ecx
		call	silc_argument_get_arg_type
		test	eax, eax
		mov	edx, [ebp+var_C8]
		jz	short loc_62B910B7
		lea	ecx, [ebp+var_20]
		mov	[esp+108h+var_100], ecx
		mov	ecx, [ebp+var_1C]
		mov	[esp+108h+var_104], ecx
		mov	[esp+108h+var_108], eax
		call	silc_public_key_payload_decode
		test	al, al
		mov	edx, [ebp+var_C8]
		jz	loc_62B913B4
		mov	eax, [ebp+var_90]
		mov	ecx, [eax+10Ch]
		test	ecx, ecx
		jz	loc_62B9152B

loc_62B910B7:				; CODE XREF: silc_client_notify_cmode_change+2EDj
					; silc_client_notify_cmode_change+7B1j
		lea	eax, [ebp+var_1C]
		mov	[esp+108h+var_100], eax
		mov	[esp+108h+var_104], 3
		mov	ecx, [ebp+var_9C]
		mov	[esp+108h+var_108], ecx
		mov	[ebp+var_C8], edx
		call	silc_argument_get_arg_type
		mov	[ebp+var_C0], eax
		lea	eax, [ebp+var_1C]
		mov	[esp+108h+var_100], eax
		mov	[esp+108h+var_104], 4
		mov	ecx, [ebp+var_9C]
		mov	[esp+108h+var_108], ecx
		call	silc_argument_get_arg_type
		mov	[ebp+var_8C], eax
		test	eax, eax
		mov	edx, [ebp+var_C8]
		jz	loc_62B911CB
		lea	eax, [ebp+var_24]
		mov	[esp+108h+var_100], eax
		mov	[esp+108h+var_104], 0
		mov	eax, [ebp+var_8C]
		mov	[esp+108h+var_108], eax
		call	silc_hmac_alloc
		test	al, al
		mov	edx, [ebp+var_C8]
		jz	loc_62B913B4
		lea	eax, [ebp+var_1C]
		mov	[esp+108h+var_104], eax
		mov	ecx, [ebp+var_90]
		mov	eax, [ecx+160h]
		mov	[esp+108h+var_108], eax
		mov	[ebp+var_C8], edx
		call	silc_hmac_get_key
		test	eax, eax
		mov	edx, [ebp+var_C8]
		jz	short loc_62B911CB
		mov	ecx, [ebp+var_1C]
		mov	[esp+108h+var_100], ecx
		mov	[esp+108h+var_104], eax
		mov	eax, [ebp+var_24]
		mov	[esp+108h+var_108], eax
		call	silc_hmac_set_key
		mov	ecx, [ebp+var_90]
		mov	eax, [ecx+160h]
		test	eax, eax
		mov	edx, [ebp+var_C8]
		jz	short loc_62B911A1
		mov	[esp+108h+var_108], eax
		call	silc_hmac_free
		mov	edx, [ebp+var_C8]

loc_62B911A1:				; CODE XREF: silc_client_notify_cmode_change+401j
		mov	eax, [ebp+var_24]
		mov	ecx, [ebp+var_90]
		mov	[ecx+160h], eax
		lea	eax, [ebp+var_84]
		mov	[ebp+var_CC], eax
		mov	ecx, 40h
		xor	eax, eax
		mov	edi, [ebp+var_CC]
		rep stosb

loc_62B911CB:				; CODE XREF: silc_client_notify_cmode_change+37Bj
					; silc_client_notify_cmode_change+3D5j
		lea	ecx, [ebp+var_1C]
		mov	[esp+108h+var_100], ecx
		mov	[esp+108h+var_104], 5
		mov	eax, [ebp+var_9C]
		mov	[esp+108h+var_108], eax
		mov	[ebp+var_C8], edx
		call	silc_argument_get_arg_type
		mov	[ebp+var_C4], eax
		lea	ecx, [ebp+var_1C]
		mov	[esp+108h+var_100], ecx
		mov	[esp+108h+var_104], 8
		mov	eax, [ebp+var_9C]
		mov	[esp+108h+var_108], eax
		call	silc_argument_get_arg_type
		mov	ecx, eax
		test	eax, eax
		mov	edx, [ebp+var_C8]
		jz	short loc_62B91227
		cmp	[ebp+var_1C], 4
		jz	loc_62B914A6

loc_62B91227:				; CODE XREF: silc_client_notify_cmode_change+48Bj
					; silc_client_notify_cmode_change+740j
		mov	eax, [ebp+var_90]
		test	byte ptr [eax+12Ch], 20h
		jnz	short loc_62B91240
		mov	dword ptr [eax+130h], 0

loc_62B91240:				; CODE XREF: silc_client_notify_cmode_change+4A4j
		lea	ecx, [ebp+var_1C]
		mov	[esp+108h+var_100], ecx
		mov	[esp+108h+var_104], 7
		mov	eax, [ebp+var_9C]
		mov	[esp+108h+var_108], eax
		mov	[ebp+var_C8], edx
		call	silc_argument_get_arg_type
		test	eax, eax
		mov	edx, [ebp+var_C8]
		jz	loc_62B91462
		mov	[esp+108h+var_FC], 0
		mov	ecx, [ebp+var_1C]
		mov	[esp+108h+var_100], ecx
		mov	[esp+108h+var_104], eax
		mov	ecx, [ebp+var_90]
		mov	[esp+108h+var_108], ecx
		call	silc_client_channel_save_public_keys
		mov	edx, [ebp+var_C8]

loc_62B91298:				; CODE XREF: silc_client_notify_cmode_change+6DFj
					; silc_client_notify_cmode_change+711j
		movzx	edi, [ebp+var_9F]
		mov	al, [ebp+var_B8]
		shl	eax, 18h
		or	edi, eax
		movzx	eax, [ebp+var_A1]
		shl	eax, 10h
		or	edi, eax
		movzx	eax, [ebp+var_A0]
		shl	eax, 8
		or	edi, eax
		mov	ecx, [ebp+var_90]
		mov	[ecx+12Ch], edi
		mov	eax, [ecx+144h]
		mov	[esp+108h+var_108], eax
		mov	[ebp+var_C8], edx
		call	silc_rwlock_unlock
		mov	eax, [ebx+4Ch]
		mov	eax, [eax+18h]
		mov	ecx, [eax+48h]
		mov	eax, [ebp+var_90]
		mov	[esp+108h+var_DC], eax
		mov	[esp+108h+var_E0], 0
		mov	eax, [eax+10Ch]
		mov	[esp+108h+var_E4], eax
		mov	eax, [ebp+var_C4]
		mov	[esp+108h+var_E8], eax
		mov	eax, [ebp+var_8C]
		mov	[esp+108h+var_EC], eax
		mov	eax, [ebp+var_C0]
		mov	[esp+108h+var_F0], eax
		mov	[esp+108h+var_F4], edi
		mov	eax, [ebp+var_BC]
		mov	[esp+108h+var_F8], eax
		movzx	eax, [ebp+var_26]
		mov	[esp+108h+var_FC], eax
		movzx	eax, [ebp+var_9E]
		mov	[esp+108h+var_100], eax
		mov	[esp+108h+var_104], ebx
		mov	[esp+108h+var_108], esi
		call	dword ptr [ecx+0Ch]
		mov	edx, [ebp+var_C8]
		jmp	loc_62B90E2E
; ---------------------------------------------------------------------------
		align 4

loc_62B9135C:				; CODE XREF: silc_client_notify_cmode_change+15Cj
					; silc_client_notify_cmode_change+207j	...
		mov	[ebp+var_98], 0
		mov	[ebp+var_94], 0
		xor	edx, edx
		jmp	loc_62B90E2E
; ---------------------------------------------------------------------------
		align 4

loc_62B91378:				; CODE XREF: silc_client_notify_cmode_change+1D5j
		xor	eax, eax
		jmp	loc_62B90EC8
; ---------------------------------------------------------------------------
		align 10h

loc_62B91380:				; CODE XREF: silc_client_notify_cmode_change+18Fj
		mov	[esp+108h+var_100], 335h
		mov	[esp+108h+var_104], offset aClient_notify_ ; "client_notify.c"
		mov	[esp+108h+var_108], offset aSilc_verifyS_3 ; "SILC_VERIFY %s:%d"
		call	silc_format
		mov	[esp+108h+var_104], eax
		mov	[esp+108h+var_108], 3
		call	silc_log_output
		jmp	loc_62B90F25
; ---------------------------------------------------------------------------
		align 4

loc_62B913B4:				; CODE XREF: silc_client_notify_cmode_change+30Dj
					; silc_client_notify_cmode_change+3A6j
		mov	ecx, [ebp+var_90]
		mov	eax, [ecx+144h]
		mov	[esp+108h+var_108], eax
		call	silc_rwlock_unlock
		mov	edx, [ebp+var_C8]
		jmp	loc_62B90E2E
; ---------------------------------------------------------------------------
		align 4

loc_62B913D4:				; CODE XREF: silc_client_notify_cmode_change+26Aj
		mov	ecx, [ebp+arg_8]
		mov	edx, [ecx+10h]
		test	edx, edx
		jz	loc_62B91546

loc_62B913E2:				; CODE XREF: silc_client_notify_cmode_change+7D3j
		mov	[esp+108h+var_104], edx
		mov	eax, [ebp+var_90]
		mov	[esp+108h+var_108], eax
		mov	[ebp+var_C8], edx
		call	silc_client_on_channel
		test	eax, eax
		mov	edx, [ebp+var_C8]
		jz	loc_62B915BD
		mov	[ebp+var_BC], edx
		mov	[ebp+var_98], 0
		mov	[ebp+var_94], 0
		jmp	loc_62B9103E
; ---------------------------------------------------------------------------

loc_62B91427:				; CODE XREF: silc_client_notify_cmode_change+272j
		mov	[esp+108h+var_100], edi
		mov	[esp+108h+var_104], ebx
		mov	[esp+108h+var_108], esi
		call	silc_client_get_server_by_id
		mov	[ebp+var_98], eax
		test	eax, eax
		jz	loc_62B915D6
		mov	eax, [ebp+var_98]
		mov	[ebp+var_BC], eax
		mov	[ebp+var_94], 0
		xor	edx, edx
		jmp	loc_62B9103E
; ---------------------------------------------------------------------------

loc_62B91462:				; CODE XREF: silc_client_notify_cmode_change+4DBj
		mov	eax, [ebp+var_90]
		test	byte ptr [eax+12Dh], 10h
		jz	loc_62B91298
		mov	[esp+108h+var_FC], 1
		mov	[esp+108h+var_100], 0
		mov	[esp+108h+var_104], 0
		mov	[esp+108h+var_108], eax
		mov	[ebp+var_C8], edx
		call	silc_client_channel_save_public_keys
		mov	edx, [ebp+var_C8]
		jmp	loc_62B91298
; ---------------------------------------------------------------------------

loc_62B914A6:				; CODE XREF: silc_client_notify_cmode_change+491j
		movzx	edi, byte ptr [eax+3]
		movzx	eax, byte ptr [eax]
		shl	eax, 18h
		or	edi, eax
		movzx	eax, byte ptr [ecx+1]
		shl	eax, 10h
		or	edi, eax
		movzx	eax, byte ptr [ecx+2]
		shl	eax, 8
		or	edi, eax
		mov	ecx, [ebp+var_90]
		mov	[ecx+130h], edi
		jmp	loc_62B91227
; ---------------------------------------------------------------------------

loc_62B914D5:				; CODE XREF: silc_client_notify_cmode_change+290j
		mov	ecx, [ebp+var_90]
		mov	edx, [ebp+arg_8]
		mov	[edx+0Ch], ecx
		mov	edx, [ebp+arg_0]
		mov	al, [edx+28h]
		mov	dl, al
		or	edx, 4
		mov	ecx, [ebp+arg_0]
		mov	[ecx+28h], dl
		test	al, 4
		jnz	loc_62B9161B

loc_62B914FA:				; CODE XREF: silc_client_notify_cmode_change+8B7j
		mov	eax, [ebp+arg_8]
		mov	[esp+108h+var_F8], eax
		mov	[esp+108h+var_FC], offset sub_62B8F1E4
		mov	[esp+108h+var_100], edi
		mov	[esp+108h+var_104], ebx
		mov	[esp+108h+var_108], esi
		call	silc_client_get_channel_by_id_resolve

loc_62B91519:				; CODE XREF: silc_client_notify_cmode_change+828j
					; silc_client_notify_cmode_change+886j
		mov	edx, [ebp+var_90]
		mov	[edx+17Ch], ax
		jmp	loc_62B90F55
; ---------------------------------------------------------------------------

loc_62B9152B:				; CODE XREF: silc_client_notify_cmode_change+321j
		mov	eax, [ebp+var_20]
		mov	ecx, [ebp+var_90]
		mov	[ecx+10Ch], eax
		mov	[ebp+var_20], 0
		jmp	loc_62B910B7
; ---------------------------------------------------------------------------

loc_62B91546:				; CODE XREF: silc_client_notify_cmode_change+64Cj
		mov	[esp+108h+var_100], edi
		mov	[esp+108h+var_104], ebx
		mov	[esp+108h+var_108], esi
		call	silc_client_get_client
		mov	edx, eax
		test	eax, eax
		jz	short loc_62B91569
		test	byte ptr [eax+402h], 1
		jnz	loc_62B913E2

loc_62B91569:				; CODE XREF: silc_client_notify_cmode_change+7CAj
		mov	ecx, [ebp+var_90]
		mov	eax, [ebp+arg_8]
		mov	[eax+0Ch], ecx
		mov	[eax+10h], edx
		mov	edx, [ebp+arg_0]
		mov	al, [edx+28h]
		mov	dl, al
		or	edx, 4
		mov	ecx, [ebp+arg_0]
		mov	[ecx+28h], dl
		test	al, 4
		jnz	loc_62B9167D

loc_62B91591:				; CODE XREF: silc_client_notify_cmode_change+919j
		mov	eax, [ebp+arg_8]
		mov	[esp+108h+var_F4], eax
		mov	[esp+108h+var_F8], offset sub_62B8F1E4
		mov	[esp+108h+var_FC], 0
		mov	[esp+108h+var_100], edi
		mov	[esp+108h+var_104], ebx
		mov	[esp+108h+var_108], esi
		call	silc_client_get_client_by_id_resolve
		jmp	loc_62B91519
; ---------------------------------------------------------------------------

loc_62B915BD:				; CODE XREF: silc_client_notify_cmode_change+672j
		mov	[ebp+var_98], 0
		mov	[ebp+var_94], 0
		jmp	loc_62B90E2E
; ---------------------------------------------------------------------------

loc_62B915D6:				; CODE XREF: silc_client_notify_cmode_change+6AFj
		mov	ecx, [ebp+var_90]
		mov	edx, [ebp+arg_8]
		mov	[edx+0Ch], ecx
		mov	edx, [ebp+arg_0]
		mov	al, [edx+28h]
		mov	dl, al
		or	edx, 4
		mov	ecx, [ebp+arg_0]
		mov	[ecx+28h], dl
		test	al, 4
		jnz	short loc_62B9164C

loc_62B915F7:				; CODE XREF: silc_client_notify_cmode_change+8E8j
		mov	eax, [ebp+arg_8]
		mov	[esp+108h+var_F8], eax
		mov	[esp+108h+var_FC], offset sub_62B8F1E4
		mov	[esp+108h+var_100], edi
		mov	[esp+108h+var_104], ebx
		mov	[esp+108h+var_108], esi
		call	silc_client_get_server_by_id_resolve
		jmp	loc_62B91519
; ---------------------------------------------------------------------------

loc_62B9161B:				; CODE XREF: silc_client_notify_cmode_change+764j
		mov	[esp+108h+var_100], 373h
		mov	[esp+108h+var_104], offset aClient_notify_ ; "client_notify.c"
		mov	[esp+108h+var_108], offset aSilc_verifyS_3 ; "SILC_VERIFY %s:%d"
		call	silc_format
		mov	[esp+108h+var_104], eax
		mov	[esp+108h+var_108], 3
		call	silc_log_output
		jmp	loc_62B914FA
; ---------------------------------------------------------------------------

loc_62B9164C:				; CODE XREF: silc_client_notify_cmode_change+865j
		mov	[esp+108h+var_100], 364h
		mov	[esp+108h+var_104], offset aClient_notify_ ; "client_notify.c"
		mov	[esp+108h+var_108], offset aSilc_verifyS_3 ; "SILC_VERIFY %s:%d"
		call	silc_format
		mov	[esp+108h+var_104], eax
		mov	[esp+108h+var_108], 3
		call	silc_log_output
		jmp	loc_62B915F7
; ---------------------------------------------------------------------------

loc_62B9167D:				; CODE XREF: silc_client_notify_cmode_change+7FBj
		mov	[esp+108h+var_100], 350h
		mov	[esp+108h+var_104], offset aClient_notify_ ; "client_notify.c"
		mov	[esp+108h+var_108], offset aSilc_verifyS_3 ; "SILC_VERIFY %s:%d"
		call	silc_format
		mov	[esp+108h+var_104], eax
		mov	[esp+108h+var_108], 3
		call	silc_log_output
		jmp	loc_62B91591
silc_client_notify_cmode_change	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 171. silc_client_notify_nick_change

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public silc_client_notify_nick_change
silc_client_notify_nick_change proc near ; DATA	XREF: silc_client_notify:loc_62B92440o

var_1A8		= dword	ptr -1A8h
var_1A4		= dword	ptr -1A4h
var_1A0		= dword	ptr -1A0h
var_19C		= dword	ptr -19Ch
var_198		= dword	ptr -198h
var_194		= dword	ptr -194h
var_190		= dword	ptr -190h
var_180		= dword	ptr -180h
var_17C		= dword	ptr -17Ch
var_178		= dword	ptr -178h
var_173		= byte ptr -173h
var_172		= word ptr -172h
var_170		= dword	ptr -170h
var_16C		= dword	ptr -16Ch
var_15D		= byte ptr -15Dh
var_5C		= byte ptr -5Ch
var_4A		= byte ptr -4Ah
var_3C		= byte ptr -3Ch
var_1C		= byte ptr -1Ch
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		sub	esp, 19Ch
		mov	eax, [ebp+arg_4]
		mov	eax, [eax+4Ch]
		mov	[ebp+var_170], eax
		mov	eax, [ebp+arg_8]
		mov	ebx, [eax+4]
		mov	[esp+1A8h+var_1A8], ebx
		call	silc_notify_get_type
		mov	[ebp+var_172], ax
		mov	[esp+1A8h+var_1A8], ebx
		call	silc_notify_get_args
		mov	[ebp+var_16C], eax
		mov	[esp+1A8h+var_198], 0
		lea	ebx, [ebp+var_3C]
		mov	[esp+1A8h+var_19C], ebx
		mov	[esp+1A8h+var_1A0], 0
		mov	[esp+1A8h+var_1A4], 1
		mov	[esp+1A8h+var_1A8], eax
		call	silc_argument_get_decoded
		test	al, al
		jz	loc_62B91898
		mov	edx, [ebp+arg_4]
		mov	edi, [edx+4]
		test	edi, edi
		jz	short loc_62B91733
		mov	ecx, 1Dh
		mov	esi, ebx
		repe cmpsb
		jz	loc_62B91898

loc_62B91733:				; CODE XREF: silc_client_notify_nick_change+72j
		mov	[esp+1A8h+var_198], 0
		lea	eax, [ebp+var_5C]
		mov	[ebp+var_17C], eax
		mov	[esp+1A8h+var_19C], eax
		mov	[esp+1A8h+var_1A0], 0
		mov	[esp+1A8h+var_1A4], 2
		mov	eax, [ebp+var_16C]
		mov	[esp+1A8h+var_1A8], eax
		call	silc_argument_get_decoded
		test	al, al
		jz	loc_62B91898
		mov	edx, [ebp+arg_4]
		mov	edi, [edx+4]
		test	edi, edi
		jz	short loc_62B9178B
		mov	ecx, 1Dh
		mov	esi, [ebp+var_17C]
		repe cmpsb
		jz	loc_62B91898

loc_62B9178B:				; CODE XREF: silc_client_notify_nick_change+C6j
		mov	[esp+1A8h+var_1A0], ebx
		mov	eax, [ebp+arg_4]
		mov	[esp+1A8h+var_1A4], eax
		mov	edx, [ebp+var_170]
		mov	[esp+1A8h+var_1A8], edx
		call	silc_client_get_client_by_id
		mov	ebx, eax
		test	eax, eax
		jz	loc_62B9189A
		mov	al, [eax+402h]
		and	eax, 1
		mov	[ebp+var_173], al
		lea	eax, [ebp+var_1C]
		mov	[esp+1A8h+var_1A0], eax
		mov	[esp+1A8h+var_1A4], 3
		mov	edx, [ebp+var_16C]
		mov	[esp+1A8h+var_1A8], edx
		call	silc_argument_get_arg_type
		mov	edx, eax
		test	eax, eax
		jz	loc_62B9189A
		mov	eax, [ebx+3D8h]
		mov	[esp+1A8h+var_1A8], eax
		mov	[ebp+var_178], edx
		call	silc_rwlock_wrlock
		lea	esi, [ebx+39Eh]
		lea	edi, [ebp+var_4A]
		mov	ecx, 0Bh
		repe cmpsb
		mov	edx, [ebp+var_178]
		jnz	loc_62B918D4
		mov	[esp+1A8h+var_1A4], ebx
		mov	[esp+1A8h+var_1A8], edx
		call	silc_utf8_strcasecmp
		test	al, al
		mov	edx, [ebp+var_178]
		jz	loc_62B918D4
		mov	edx, [ebp+arg_4]
		mov	eax, [edx+54h]
		mov	eax, [eax+0B8h]
		mov	[esp+1A8h+var_1A8], eax
		call	silc_mutex_lock
		mov	[esp+1A8h+var_198], 0
		mov	[esp+1A8h+var_19C], 0
		lea	eax, [ebp+var_5C]
		mov	[esp+1A8h+var_1A0], eax
		mov	[esp+1A8h+var_1A4], ebx
		mov	edx, [ebp+arg_4]
		mov	eax, [edx+54h]
		mov	eax, [eax+114h]
		mov	[esp+1A8h+var_1A8], eax
		call	silc_idcache_update_by_context
		mov	edx, [ebp+arg_4]
		mov	eax, [edx+54h]
		mov	eax, [eax+0B8h]
		mov	[esp+1A8h+var_1A8], eax
		call	silc_mutex_unlock
		mov	eax, [ebx+3D8h]
		mov	[esp+1A8h+var_1A8], eax
		call	silc_rwlock_unlock
		jmp	short loc_62B9189A
; ---------------------------------------------------------------------------
		align 4

loc_62B91898:				; CODE XREF: silc_client_notify_nick_change+64j
					; silc_client_notify_nick_change+7Dj ...
		xor	ebx, ebx

loc_62B9189A:				; CODE XREF: silc_client_notify_nick_change+F8j
					; silc_client_notify_nick_change+12Ej ...
		mov	[esp+1A8h+var_1A0], ebx
		mov	eax, [ebp+arg_4]
		mov	[esp+1A8h+var_1A4], eax
		mov	edx, [ebp+var_170]
		mov	[esp+1A8h+var_1A8], edx
		call	silc_client_unref_client
		mov	[esp+1A8h+var_1A4], offset silc_client_notify_processed
		mov	eax, [ebp+arg_0]
		mov	[esp+1A8h+var_1A8], eax
		call	silc_fsm_next
		xor	eax, eax
		add	esp, 19Ch
		pop	ebx
		pop	esi
		pop	edi
		leave
		retn
; ---------------------------------------------------------------------------
		align 4

loc_62B918D4:				; CODE XREF: silc_client_notify_nick_change+15Ej
					; silc_client_notify_nick_change+178j
		lea	eax, [ebp+var_15D]
		mov	[ebp+var_180], eax
		mov	ecx, 101h
		mov	edi, eax
		mov	esi, ebx
		rep movsb
		mov	[esp+1A8h+var_190], 0
		mov	[esp+1A8h+var_194], 0
		lea	eax, [ebp+var_5C]
		mov	[esp+1A8h+var_198], eax
		mov	[esp+1A8h+var_19C], edx
		mov	[esp+1A8h+var_1A0], ebx
		mov	edx, [ebp+arg_4]
		mov	[esp+1A8h+var_1A4], edx
		mov	eax, [ebp+var_170]
		mov	[esp+1A8h+var_1A8], eax
		call	silc_client_change_nickname
		test	al, al
		jz	short loc_62B91980
		mov	eax, [ebx+3D8h]
		mov	[esp+1A8h+var_1A8], eax
		call	silc_rwlock_unlock
		cmp	[ebp+var_173], 0
		jz	loc_62B9189A
		mov	edx, [ebp+arg_4]
		mov	eax, [edx+4Ch]
		mov	eax, [eax+18h]
		mov	eax, [eax+48h]
		mov	[esp+1A8h+var_194], ebx
		lea	edx, [ebp+var_15D]
		mov	[esp+1A8h+var_198], edx
		mov	[esp+1A8h+var_19C], ebx
		movzx	edx, [ebp+var_172]
		mov	[esp+1A8h+var_1A0], edx
		mov	edx, [ebp+arg_4]
		mov	[esp+1A8h+var_1A4], edx
		mov	edx, [ebp+var_170]
		mov	[esp+1A8h+var_1A8], edx
		call	dword ptr [eax+0Ch]
		jmp	loc_62B9189A
; ---------------------------------------------------------------------------
		align 10h

loc_62B91980:				; CODE XREF: silc_client_notify_nick_change+271j
		mov	eax, [ebx+3D8h]
		mov	[esp+1A8h+var_1A8], eax
		call	silc_rwlock_unlock
		jmp	loc_62B9189A
silc_client_notify_nick_change endp

; ---------------------------------------------------------------------------
		align 4
; Exported entry 176. silc_client_notify_topic_set

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public silc_client_notify_topic_set
silc_client_notify_topic_set proc near	; DATA XREF: silc_client_notify:loc_62B9245Co

var_88		= dword	ptr -88h
var_84		= dword	ptr -84h
var_80		= dword	ptr -80h
var_7C		= dword	ptr -7Ch
var_78		= dword	ptr -78h
var_74		= dword	ptr -74h
var_70		= dword	ptr -70h
var_68		= dword	ptr -68h
var_64		= dword	ptr -64h
var_60		= dword	ptr -60h
var_5C		= dword	ptr -5Ch
var_58		= dword	ptr -58h
var_52		= word ptr -52h
var_50		= dword	ptr -50h
var_4C		= dword	ptr -4Ch
var_3C		= byte ptr -3Ch
var_1E		= word ptr -1Eh
var_1C		= byte ptr -1Ch
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		sub	esp, 7Ch
		mov	esi, [ebp+arg_4]
		mov	edi, [ebp+arg_8]
		mov	eax, [esi+4Ch]
		mov	[ebp+var_4C], eax
		mov	edx, [edi+4]
		mov	ebx, [edi]
		mov	[esp+88h+var_88], edx
		mov	[ebp+var_68], edx
		call	silc_notify_get_type
		mov	[ebp+var_52], ax
		mov	edx, [ebp+var_68]
		mov	[esp+88h+var_88], edx
		call	silc_notify_get_args
		mov	[ebp+var_50], eax
		mov	[esp+88h+var_78], 16h
		lea	edx, [ebp+var_3C]
		mov	[esp+88h+var_7C], edx
		mov	[esp+88h+var_80], 3
		mov	al, [ebx+21h]
		and	eax, 3Fh
		mov	[esp+88h+var_84], eax
		mov	eax, [ebx+1Ch]
		mov	[esp+88h+var_88], eax
		call	silc_id_str2id
		test	al, al
		jnz	short loc_62B91A30
		xor	ebx, ebx

loc_62B919FD:				; CODE XREF: silc_client_notify_topic_set+B6j
					; silc_client_notify_topic_set+164j ...
		mov	[esp+88h+var_80], ebx
		mov	[esp+88h+var_84], esi
		mov	edx, [ebp+var_4C]
		mov	[esp+88h+var_88], edx
		call	silc_client_unref_channel
		mov	[esp+88h+var_84], offset silc_client_notify_processed
		mov	ecx, [ebp+arg_0]
		mov	[esp+88h+var_88], ecx
		call	silc_fsm_next
		xor	eax, eax

loc_62B91A25:				; CODE XREF: silc_client_notify_topic_set+322j
		add	esp, 7Ch
		pop	ebx
		pop	esi
		pop	edi
		leave
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_62B91A30:				; CODE XREF: silc_client_notify_topic_set+65j
		lea	ecx, [ebp+var_3C]
		mov	[esp+88h+var_80], ecx
		mov	[esp+88h+var_84], esi
		mov	eax, [ebp+var_4C]
		mov	[esp+88h+var_88], eax
		call	silc_client_get_channel_by_id
		mov	ebx, eax
		test	eax, eax
		jz	short loc_62B919FD
		cmp	word ptr [eax+17Ch], 0
		jz	short loc_62B91ACC
		mov	[esp+88h+var_80], eax
		mov	[esp+88h+var_84], esi
		mov	edx, [ebp+var_4C]
		mov	[esp+88h+var_88], edx
		call	silc_client_unref_channel
		mov	ecx, [ebp+arg_0]
		mov	al, [ecx+28h]
		mov	dl, al
		or	edx, 4
		mov	[ecx+28h], dl
		test	al, 4
		jnz	loc_62B91CBC

loc_62B91A7F:				; CODE XREF: silc_client_notify_topic_set+354j
		mov	[esp+88h+var_78], edi
		mov	[esp+88h+var_7C], offset sub_62B8F2C4
		movzx	eax, word ptr [ebx+17Ch]
		mov	[esp+88h+var_80], eax
		mov	[esp+88h+var_84], 0
		mov	[esp+88h+var_88], esi
		call	silc_client_command_pending
		mov	edx, [ebp+arg_0]
		mov	al, [edx+28h]
		mov	dl, al
		and	edx, 0FFFFFFFBh
		mov	ecx, [ebp+arg_0]
		mov	[ecx+28h], dl
		test	al, 4
		jz	loc_62B91CB4

loc_62B91ABF:				; CODE XREF: silc_client_notify_topic_set+318j
		mov	eax, 2
		add	esp, 7Ch
		pop	ebx
		pop	esi
		pop	edi
		leave
		retn
; ---------------------------------------------------------------------------

loc_62B91ACC:				; CODE XREF: silc_client_notify_topic_set+C0j
		mov	[esp+88h+var_78], 0
		lea	eax, [ebp+var_3C]
		mov	[esp+88h+var_7C], eax
		mov	[esp+88h+var_80], 0
		mov	[esp+88h+var_84], 1
		mov	edx, [ebp+var_50]
		mov	[esp+88h+var_88], edx
		call	silc_argument_get_decoded
		test	al, al
		jz	loc_62B919FD
		lea	eax, [ebp+var_1C]
		mov	[esp+88h+var_80], eax
		mov	[esp+88h+var_84], 2
		mov	ecx, [ebp+var_50]
		mov	[esp+88h+var_88], ecx
		call	silc_argument_get_arg_type
		mov	[ebp+var_50], eax
		test	eax, eax
		jz	loc_62B919FD
		mov	ax, [ebp+var_1E]
		cmp	ax, 2
		jz	loc_62B91CF0
		dec	ax
		jz	loc_62B91D2C
		lea	edx, [ebp+var_3C]
		mov	[esp+88h+var_80], edx
		mov	[esp+88h+var_84], esi
		mov	ecx, [ebp+var_4C]
		mov	[esp+88h+var_88], ecx
		call	silc_client_get_channel_by_id
		mov	[ebp+var_58], eax
		test	eax, eax
		jz	loc_62B91C57
		mov	eax, [ebp+var_58]
		mov	[ebp+var_64], eax
		mov	[ebp+var_60], 0
		mov	[ebp+var_5C], 0

loc_62B91B6E:				; CODE XREF: silc_client_notify_topic_set+391j
					; silc_client_notify_topic_set+3CDj
		mov	eax, [ebx+144h]
		mov	[esp+88h+var_88], eax
		call	silc_rwlock_wrlock
		mov	eax, [ebx+108h]
		mov	[esp+88h+var_88], eax
		call	silc_free
		xor	eax, eax
		mov	ecx, 0FFFFFFFFh
		mov	edi, [ebp+var_50]
		repne scasb
		not	ecx
		dec	ecx
		mov	[esp+88h+var_84], ecx
		mov	edx, [ebp+var_50]
		mov	[esp+88h+var_88], edx
		call	silc_memdup
		mov	[ebx+108h], eax
		mov	eax, [ebx+144h]
		mov	[esp+88h+var_88], eax
		call	silc_rwlock_unlock
		mov	eax, [esi+4Ch]
		mov	eax, [eax+18h]
		mov	edx, [eax+48h]
		mov	[esp+88h+var_70], ebx
		mov	eax, [ebx+108h]
		mov	[esp+88h+var_74], eax
		mov	ecx, [ebp+var_64]
		mov	[esp+88h+var_78], ecx
		movzx	eax, [ebp+var_1E]
		mov	[esp+88h+var_7C], eax
		movzx	eax, [ebp+var_52]
		mov	[esp+88h+var_80], eax
		mov	[esp+88h+var_84], esi
		mov	eax, [ebp+var_4C]
		mov	[esp+88h+var_88], eax
		call	dword ptr [edx+0Ch]
		mov	edx, [ebp+var_5C]
		test	edx, edx
		jz	short loc_62B91C14
		mov	edx, [ebp+var_5C]
		mov	[esp+88h+var_80], edx
		mov	[esp+88h+var_84], esi
		mov	ecx, [ebp+var_4C]
		mov	[esp+88h+var_88], ecx
		call	silc_client_unref_client

loc_62B91C14:				; CODE XREF: silc_client_notify_topic_set+268j
		mov	eax, [ebp+var_60]
		test	eax, eax
		jz	short loc_62B91C31
		mov	eax, [ebp+var_60]
		mov	[esp+88h+var_80], eax
		mov	[esp+88h+var_84], esi
		mov	edx, [ebp+var_4C]
		mov	[esp+88h+var_88], edx
		call	silc_client_unref_server

loc_62B91C31:				; CODE XREF: silc_client_notify_topic_set+285j
		mov	edi, [ebp+var_58]
		test	edi, edi
		jz	loc_62B919FD
		mov	ecx, [ebp+var_58]
		mov	[esp+88h+var_80], ecx
		mov	[esp+88h+var_84], esi
		mov	eax, [ebp+var_4C]
		mov	[esp+88h+var_88], eax
		call	silc_client_unref_channel
		jmp	loc_62B919FD
; ---------------------------------------------------------------------------

loc_62B91C57:				; CODE XREF: silc_client_notify_topic_set+1C0j
		mov	[edi+0Ch], ebx
		mov	edx, [ebp+arg_0]
		mov	al, [edx+28h]
		mov	dl, al
		or	edx, 4
		mov	ecx, [ebp+arg_0]
		mov	[ecx+28h], dl
		test	al, 4
		jnz	loc_62B91E20

loc_62B91C73:				; CODE XREF: silc_client_notify_topic_set+4B8j
		mov	[esp+88h+var_78], edi
		mov	[esp+88h+var_7C], offset sub_62B8F1E4
		lea	eax, [ebp+var_3C]
		mov	[esp+88h+var_80], eax
		mov	[esp+88h+var_84], esi
		mov	edx, [ebp+var_4C]
		mov	[esp+88h+var_88], edx
		call	silc_client_get_channel_by_id_resolve

loc_62B91C95:				; CODE XREF: silc_client_notify_topic_set+448j
					; silc_client_notify_topic_set+487j
		mov	[ebx+17Ch], ax
		mov	ecx, [ebp+arg_0]
		mov	al, [ecx+28h]
		mov	dl, al
		and	edx, 0FFFFFFFBh
		mov	[ecx+28h], dl
		test	al, 4
		jnz	loc_62B91ABF
		xchg	ax, ax

loc_62B91CB4:				; CODE XREF: silc_client_notify_topic_set+125j
		xor	eax, eax
		jmp	loc_62B91A25
; ---------------------------------------------------------------------------
		align 4

loc_62B91CBC:				; CODE XREF: silc_client_notify_topic_set+E5j
		mov	[esp+88h+var_80], 25Ah
		mov	[esp+88h+var_84], offset aClient_notify_ ; "client_notify.c"
		mov	[esp+88h+var_88], offset aSilc_verifyS_3 ; "SILC_VERIFY	%s:%d"
		call	silc_format
		mov	[esp+88h+var_84], eax
		mov	[esp+88h+var_88], 3
		call	silc_log_output
		jmp	loc_62B91A7F
; ---------------------------------------------------------------------------
		align 10h

loc_62B91CF0:				; CODE XREF: silc_client_notify_topic_set+197j
		mov	eax, [edi+10h]
		mov	[ebp+var_5C], eax
		test	eax, eax
		jz	short loc_62B91D66

loc_62B91CFA:				; CODE XREF: silc_client_notify_topic_set+3F6j
		mov	eax, [ebp+var_5C]
		mov	[esp+88h+var_84], eax
		mov	[esp+88h+var_88], ebx
		call	silc_client_on_channel
		test	eax, eax
		jz	loc_62B919FD
		mov	edx, [ebp+var_5C]
		mov	[ebp+var_64], edx
		mov	[ebp+var_60], 0
		mov	[ebp+var_58], 0
		jmp	loc_62B91B6E
; ---------------------------------------------------------------------------
		align 4

loc_62B91D2C:				; CODE XREF: silc_client_notify_topic_set+19Fj
		lea	ecx, [ebp+var_3C]
		mov	[esp+88h+var_80], ecx
		mov	[esp+88h+var_84], esi
		mov	eax, [ebp+var_4C]
		mov	[esp+88h+var_88], eax
		call	silc_client_get_server_by_id
		mov	[ebp+var_60], eax
		test	eax, eax
		jz	loc_62B91DE1
		mov	eax, [ebp+var_60]
		mov	[ebp+var_64], eax
		mov	[ebp+var_58], 0
		mov	[ebp+var_5C], 0
		jmp	loc_62B91B6E
; ---------------------------------------------------------------------------

loc_62B91D66:				; CODE XREF: silc_client_notify_topic_set+364j
		lea	edx, [ebp+var_3C]
		mov	[esp+88h+var_80], edx
		mov	[esp+88h+var_84], esi
		mov	ecx, [ebp+var_4C]
		mov	[esp+88h+var_88], ecx
		call	silc_client_get_client
		mov	[ebp+var_5C], eax
		test	eax, eax
		jz	short loc_62B91D90
		test	byte ptr [eax+402h], 1
		jnz	loc_62B91CFA

loc_62B91D90:				; CODE XREF: silc_client_notify_topic_set+3EDj
		mov	[edi+0Ch], ebx
		mov	eax, [ebp+var_5C]
		mov	[edi+10h], eax
		mov	edx, [ebp+arg_0]
		mov	al, [edx+28h]
		mov	dl, al
		or	edx, 4
		mov	ecx, [ebp+arg_0]
		mov	[ecx+28h], dl
		test	al, 4
		jnz	loc_62B91E82

loc_62B91DB2:				; CODE XREF: silc_client_notify_topic_set+51Aj
		mov	[esp+88h+var_74], edi
		mov	[esp+88h+var_78], offset sub_62B8F1E4
		mov	[esp+88h+var_7C], 0
		lea	eax, [ebp+var_3C]
		mov	[esp+88h+var_80], eax
		mov	[esp+88h+var_84], esi
		mov	edx, [ebp+var_4C]
		mov	[esp+88h+var_88], edx
		call	silc_client_get_client_by_id_resolve
		jmp	loc_62B91C95
; ---------------------------------------------------------------------------

loc_62B91DE1:				; CODE XREF: silc_client_notify_topic_set+3B3j
		mov	[edi+0Ch], ebx
		mov	edx, [ebp+arg_0]
		mov	al, [edx+28h]
		mov	dl, al
		or	edx, 4
		mov	ecx, [ebp+arg_0]
		mov	[ecx+28h], dl
		test	al, 4
		jnz	short loc_62B91E51

loc_62B91DF9:				; CODE XREF: silc_client_notify_topic_set+4E9j
		mov	[esp+88h+var_78], edi
		mov	[esp+88h+var_7C], offset sub_62B8F1E4
		lea	eax, [ebp+var_3C]
		mov	[esp+88h+var_80], eax
		mov	[esp+88h+var_84], esi
		mov	edx, [ebp+var_4C]
		mov	[esp+88h+var_88], edx
		call	silc_client_get_server_by_id_resolve
		jmp	loc_62B91C95
; ---------------------------------------------------------------------------

loc_62B91E20:				; CODE XREF: silc_client_notify_topic_set+2D9j
		mov	[esp+88h+var_80], 297h
		mov	[esp+88h+var_84], offset aClient_notify_ ; "client_notify.c"
		mov	[esp+88h+var_88], offset aSilc_verifyS_3 ; "SILC_VERIFY	%s:%d"
		call	silc_format
		mov	[esp+88h+var_84], eax
		mov	[esp+88h+var_88], 3
		call	silc_log_output
		jmp	loc_62B91C73
; ---------------------------------------------------------------------------

loc_62B91E51:				; CODE XREF: silc_client_notify_topic_set+463j
		mov	[esp+88h+var_80], 288h
		mov	[esp+88h+var_84], offset aClient_notify_ ; "client_notify.c"
		mov	[esp+88h+var_88], offset aSilc_verifyS_3 ; "SILC_VERIFY	%s:%d"
		call	silc_format
		mov	[esp+88h+var_84], eax
		mov	[esp+88h+var_88], 3
		call	silc_log_output
		jmp	loc_62B91DF9
; ---------------------------------------------------------------------------

loc_62B91E82:				; CODE XREF: silc_client_notify_topic_set+418j
		mov	[esp+88h+var_80], 274h
		mov	[esp+88h+var_84], offset aClient_notify_ ; "client_notify.c"
		mov	[esp+88h+var_88], offset aSilc_verifyS_3 ; "SILC_VERIFY	%s:%d"
		call	silc_format
		mov	[esp+88h+var_84], eax
		mov	[esp+88h+var_88], 3
		call	silc_log_output
		jmp	loc_62B91DB2
silc_client_notify_topic_set endp

; ---------------------------------------------------------------------------
		align 4
; Exported entry 166. silc_client_notify_join

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public silc_client_notify_join
silc_client_notify_join	proc near	; DATA XREF: silc_client_notify:loc_62B924B0o

var_78		= dword	ptr -78h
var_74		= dword	ptr -74h
var_70		= dword	ptr -70h
var_6C		= dword	ptr -6Ch
var_68		= dword	ptr -68h
var_64		= dword	ptr -64h
var_48		= dword	ptr -48h
var_42		= word ptr -42h
var_40		= dword	ptr -40h
var_3C		= dword	ptr -3Ch
var_38		= byte ptr -38h
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		sub	esp, 6Ch
		mov	ebx, [ebp+arg_4]
		mov	eax, [ebx+4Ch]
		mov	[ebp+var_3C], eax
		mov	edx, [ebp+arg_8]
		mov	esi, [edx+4]
		mov	[esp+78h+var_78], esi
		call	silc_notify_get_type
		mov	[ebp+var_42], ax
		mov	[esp+78h+var_78], esi
		call	silc_notify_get_args
		mov	[ebp+var_40], eax
		mov	[esp+78h+var_68], 0
		lea	edi, [ebp+var_38]
		mov	[esp+78h+var_6C], edi
		mov	[esp+78h+var_70], 0
		mov	[esp+78h+var_74], 2
		mov	[esp+78h+var_78], eax
		call	silc_argument_get_decoded
		test	al, al
		jnz	short loc_62B91F40
		xor	esi, esi

loc_62B91F10:				; CODE XREF: silc_client_notify_join+A3j
					; silc_client_notify_join+155j	...
		mov	[esp+78h+var_70], esi
		mov	[esp+78h+var_74], ebx
		mov	ecx, [ebp+var_3C]
		mov	[esp+78h+var_78], ecx
		call	silc_client_unref_channel
		mov	[esp+78h+var_74], offset silc_client_notify_processed
		mov	eax, [ebp+arg_0]
		mov	[esp+78h+var_78], eax
		call	silc_fsm_next
		xor	eax, eax
		add	esp, 6Ch
		pop	ebx
		pop	esi
		pop	edi
		leave
		retn
; ---------------------------------------------------------------------------

loc_62B91F40:				; CODE XREF: silc_client_notify_join+58j
		mov	[esp+78h+var_70], edi
		mov	[esp+78h+var_74], ebx
		mov	ecx, [ebp+var_3C]
		mov	[esp+78h+var_78], ecx
		call	silc_client_get_channel_by_id
		mov	esi, eax
		test	eax, eax
		jz	short loc_62B91F10
		cmp	word ptr [eax+17Ch], 0
		jz	short loc_62B91FE0
		mov	[esp+78h+var_70], eax
		mov	[esp+78h+var_74], ebx
		mov	eax, [ebp+var_3C]
		mov	[esp+78h+var_78], eax
		call	silc_client_unref_channel
		mov	edx, [ebp+arg_0]
		mov	al, [edx+28h]
		mov	dl, al
		or	edx, 4
		mov	ecx, [ebp+arg_0]
		mov	[ecx+28h], dl
		test	al, 4
		jnz	loc_62B9216C

loc_62B91F8F:				; CODE XREF: silc_client_notify_join+2E4j
		mov	eax, [ebp+arg_8]
		mov	[esp+78h+var_68], eax
		mov	[esp+78h+var_6C], offset sub_62B8F2C4
		movzx	eax, word ptr [esi+17Ch]
		mov	[esp+78h+var_70], eax
		mov	[esp+78h+var_74], 0
		mov	[esp+78h+var_78], ebx
		call	silc_client_command_pending
		mov	edx, [ebp+arg_0]
		mov	al, [edx+28h]
		mov	dl, al
		and	edx, 0FFFFFFFBh
		mov	ecx, [ebp+arg_0]
		mov	[ecx+28h], dl
		test	al, 4
		jz	loc_62B92162

loc_62B91FD2:				; CODE XREF: silc_client_notify_join+2A8j
		mov	eax, 2
		add	esp, 6Ch
		pop	ebx
		pop	esi
		pop	edi
		leave
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_62B91FE0:				; CODE XREF: silc_client_notify_join+ADj
		mov	[esp+78h+var_68], 0
		mov	[esp+78h+var_6C], edi
		mov	[esp+78h+var_70], 0
		mov	[esp+78h+var_74], 1
		mov	eax, [ebp+var_40]
		mov	[esp+78h+var_78], eax
		call	silc_argument_get_decoded
		test	al, al
		jz	loc_62B91F10
		mov	ecx, [ebp+arg_8]
		mov	edx, [ecx+10h]
		test	edx, edx
		jz	loc_62B920CC

loc_62B9201D:				; CODE XREF: silc_client_notify_join+22Fj
		test	byte ptr [edx+402h], 1
		jz	loc_62B920EC
		cmp	byte ptr [edx+101h], 0
		jz	loc_62B920EC
		mov	eax, [edx+3D8h]
		mov	[esp+78h+var_78], eax
		mov	[ebp+var_48], edx
		call	silc_rwlock_wrlock
		mov	eax, [esi+144h]
		mov	[esp+78h+var_78], eax
		call	silc_rwlock_wrlock
		mov	edx, [ebp+var_48]
		cmp	[ebx], edx
		jz	short loc_62B9207B
		mov	[esp+78h+var_6C], 0
		mov	[esp+78h+var_70], edx
		mov	[esp+78h+var_74], ebx
		mov	eax, [ebp+var_3C]
		mov	[esp+78h+var_78], eax
		call	silc_client_nickname_format
		mov	edx, [ebp+var_48]

loc_62B9207B:				; CODE XREF: silc_client_notify_join+1A7j
		mov	[esp+78h+var_68], 0
		mov	[esp+78h+var_6C], edx
		mov	[esp+78h+var_70], esi
		mov	[esp+78h+var_74], ebx
		mov	ecx, [ebp+var_3C]
		mov	[esp+78h+var_78], ecx
		mov	[ebp+var_48], edx
		call	silc_client_add_to_channel
		test	al, al
		mov	edx, [ebp+var_48]
		jnz	loc_62B921D7
		mov	eax, [esi+144h]
		mov	[esp+78h+var_78], eax
		call	silc_rwlock_unlock
		mov	edx, [ebp+var_48]
		mov	eax, [edx+3D8h]
		mov	[esp+78h+var_78], eax
		call	silc_rwlock_unlock
		jmp	loc_62B91F10
; ---------------------------------------------------------------------------

loc_62B920CC:				; CODE XREF: silc_client_notify_join+163j
		mov	[esp+78h+var_70], edi
		mov	[esp+78h+var_74], ebx
		mov	eax, [ebp+var_3C]
		mov	[esp+78h+var_78], eax
		call	silc_client_get_client
		mov	edx, eax
		test	eax, eax
		jnz	loc_62B9201D
		lea	esi, [esi+0]

loc_62B920EC:				; CODE XREF: silc_client_notify_join+170j
					; silc_client_notify_join+17Dj
		mov	ecx, [ebp+arg_8]
		mov	[ecx+0Ch], esi
		mov	[ecx+10h], edx
		mov	eax, [ebp+arg_0]
		mov	al, [eax+28h]
		mov	byte ptr [ebp+var_40], al
		or	eax, 4
		mov	ecx, [ebp+arg_0]
		mov	[ecx+28h], al
		test	byte ptr [ebp+var_40], 4
		jnz	loc_62B921A0

loc_62B92111:				; CODE XREF: silc_client_notify_join+31Ej
		test	edx, edx
		jz	short loc_62B9211B
		lea	edi, [edx+38Ch]

loc_62B9211B:				; CODE XREF: silc_client_notify_join+25Fj
		mov	eax, [ebp+arg_8]
		mov	[esp+78h+var_64], eax
		mov	[esp+78h+var_68], offset sub_62B8F1E4
		mov	[esp+78h+var_6C], 0
		mov	[esp+78h+var_70], edi
		mov	[esp+78h+var_74], ebx
		mov	edx, [ebp+var_3C]
		mov	[esp+78h+var_78], edx
		call	silc_client_get_client_by_id_resolve
		mov	[esi+17Ch], ax
		mov	ecx, [ebp+arg_0]
		mov	al, [ecx+28h]
		mov	dl, al
		and	edx, 0FFFFFFFBh
		mov	[ecx+28h], dl
		test	al, 4
		jnz	loc_62B91FD2

loc_62B92162:				; CODE XREF: silc_client_notify_join+118j
		xor	eax, eax
		add	esp, 6Ch
		pop	ebx
		pop	esi
		pop	edi
		leave
		retn
; ---------------------------------------------------------------------------

loc_62B9216C:				; CODE XREF: silc_client_notify_join+D5j
		mov	[esp+78h+var_70], 181h
		mov	[esp+78h+var_74], offset aClient_notify_ ; "client_notify.c"
		mov	[esp+78h+var_78], offset aSilc_verifyS_3 ; "SILC_VERIFY	%s:%d"
		call	silc_format
		mov	[esp+78h+var_74], eax
		mov	[esp+78h+var_78], 3
		call	silc_log_output
		jmp	loc_62B91F8F
; ---------------------------------------------------------------------------
		align 10h

loc_62B921A0:				; CODE XREF: silc_client_notify_join+257j
		mov	[esp+78h+var_70], 198h
		mov	[esp+78h+var_74], offset aClient_notify_ ; "client_notify.c"
		mov	[esp+78h+var_78], offset aSilc_verifyS_3 ; "SILC_VERIFY	%s:%d"
		mov	[ebp+var_48], edx
		call	silc_format
		mov	[esp+78h+var_74], eax
		mov	[esp+78h+var_78], 3
		call	silc_log_output
		mov	edx, [ebp+var_48]
		jmp	loc_62B92111
; ---------------------------------------------------------------------------

loc_62B921D7:				; CODE XREF: silc_client_notify_join+1EEj
		mov	eax, [esi+144h]
		mov	[esp+78h+var_78], eax
		mov	[ebp+var_48], edx
		call	silc_rwlock_unlock
		mov	edx, [ebp+var_48]
		mov	eax, [edx+3D8h]
		mov	[esp+78h+var_78], eax
		call	silc_rwlock_unlock
		mov	eax, [ebx+4Ch]
		mov	eax, [eax+18h]
		mov	ecx, [eax+48h]
		mov	[esp+78h+var_68], esi
		mov	edx, [ebp+var_48]
		mov	[esp+78h+var_6C], edx
		movzx	eax, [ebp+var_42]
		mov	[esp+78h+var_70], eax
		mov	[esp+78h+var_74], ebx
		mov	eax, [ebp+var_3C]
		mov	[esp+78h+var_78], eax
		call	dword ptr [ecx+0Ch]
		mov	edx, [ebp+var_48]
		mov	[esp+78h+var_70], edx
		mov	[esp+78h+var_74], ebx
		mov	edx, [ebp+var_3C]
		mov	[esp+78h+var_78], edx
		call	silc_client_unref_client
		jmp	loc_62B91F10
silc_client_notify_join	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 173. silc_client_notify_processed

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public silc_client_notify_processed
silc_client_notify_processed proc near	; DATA XREF: silc_client_notify_watch+73o
					; silc_client_notify_error:loc_62B8F023o ...

var_18		= dword	ptr -18h
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		push	esi
		push	ebx
		sub	esp, 10h
		mov	ebx, [ebp+arg_8]
		mov	esi, [ebx]
		mov	eax, [ebx+4]
		mov	[esp+18h+var_18], eax
		call	silc_notify_payload_free
		mov	[esp+18h+var_18], esi
		call	silc_packet_free
		mov	[esp+18h+var_18], ebx
		call	silc_free
		mov	eax, 3
		add	esp, 10h
		pop	ebx
		pop	esi
		leave
		retn
silc_client_notify_processed endp

; Exported entry 160. silc_client_notify

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public silc_client_notify
silc_client_notify proc	near		; DATA XREF: silc_client_connection_st_packet:loc_62B81EA4o

var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
arg_0		= dword	ptr  8
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		sub	esp, 1Ch
		mov	ebx, [ebp+arg_8]
		mov	edx, [ebx+0Ch]
		mov	eax, [ebx+10h]
		sub	eax, edx
		mov	[esp+28h+var_24], eax
		mov	[esp+28h+var_28], edx
		call	silc_notify_payload_parse
		mov	esi, eax
		test	eax, eax
		jz	short loc_62B9230C
		mov	[esp+28h+var_28], eax
		call	silc_notify_get_args
		test	eax, eax
		jz	short loc_62B92304
		mov	[esp+28h+var_24], 18h
		mov	[esp+28h+var_28], 1
		call	silc_calloc
		mov	edi, eax
		test	eax, eax
		jz	short loc_62B92330
		mov	[eax], ebx
		mov	[eax+4], esi
		mov	eax, [ebp+arg_0]
		mov	[edi+8], eax
		mov	[esp+28h+var_24], edi
		mov	[esp+28h+var_28], eax
		call	silc_fsm_set_state_context
		mov	[esp+28h+var_28], esi
		call	silc_notify_get_type
		cmp	ax, 11h		; switch 18 cases
		jbe	short loc_62B92324

loc_62B922E5:				; CODE XREF: silc_client_notify+B3j
					; DATA XREF: .rdata:off_62BA8888o
		mov	[esp+28h+var_28], esi ;	jumptable 62B92327 default case
		call	silc_notify_payload_free
		mov	[esp+28h+var_28], ebx
		call	silc_packet_free
		mov	[esp+28h+var_28], edi
		call	silc_free
		mov	eax, 3
		jmp	short loc_62B92319
; ---------------------------------------------------------------------------

loc_62B92304:				; CODE XREF: silc_client_notify+30j
		mov	[esp+28h+var_28], esi
		call	silc_notify_payload_free

loc_62B9230C:				; CODE XREF: silc_client_notify+24j
		mov	[esp+28h+var_28], ebx
		call	silc_packet_free
		mov	eax, 3

loc_62B92319:				; CODE XREF: silc_client_notify+8Ej
					; silc_client_notify+F1j ...
		add	esp, 1Ch
		pop	ebx
		pop	esi
		pop	edi
		leave
		retn
; ---------------------------------------------------------------------------
		align 4

loc_62B92324:				; CODE XREF: silc_client_notify+6Fj
		movzx	eax, ax
		jmp	ds:off_62BA8888[eax*4] ; switch	jump
; ---------------------------------------------------------------------------
		align 10h

loc_62B92330:				; CODE XREF: silc_client_notify+4Aj
		mov	[esp+28h+var_28], esi
		call	silc_notify_payload_free
		mov	[esp+24h+var_24], ebx
		call	silc_packet_free
		mov	eax, 3
		add	esp, 1Ch
		pop	ebx
		pop	esi
		pop	edi
		leave
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_62B92350:				; CODE XREF: silc_client_notify+B3j
					; DATA XREF: .rdata:off_62BA8888o
		mov	[esp+28h+var_24], offset silc_client_notify_watch ; jumptable 62B92327 case 17
		mov	eax, [ebp+arg_0]
		mov	[esp+28h+var_28], eax
		call	silc_fsm_next
		xor	eax, eax
		jmp	short loc_62B92319
; ---------------------------------------------------------------------------
		align 4

loc_62B92368:				; CODE XREF: silc_client_notify+B3j
					; DATA XREF: .rdata:off_62BA8888o
		mov	[esp+28h+var_24], offset silc_client_notify_error ; jumptable 62B92327 case 16
		mov	eax, [ebp+arg_0]
		mov	[esp+28h+var_28], eax
		call	silc_fsm_next
		xor	eax, eax
		jmp	short loc_62B92319
; ---------------------------------------------------------------------------
		align 10h

loc_62B92380:				; CODE XREF: silc_client_notify+B3j
					; DATA XREF: .rdata:off_62BA8888o
		mov	[esp+28h+var_24], offset silc_client_notify_killed ; jumptable 62B92327	case 13
		mov	eax, [ebp+arg_0]
		mov	[esp+28h+var_28], eax
		call	silc_fsm_next
		xor	eax, eax
		jmp	short loc_62B92319
; ---------------------------------------------------------------------------
		align 4

loc_62B92398:				; CODE XREF: silc_client_notify+B3j
					; DATA XREF: .rdata:off_62BA8888o
		mov	[esp+28h+var_24], offset silc_client_notify_kicked ; jumptable 62B92327	case 12
		mov	eax, [ebp+arg_0]
		mov	[esp+28h+var_28], eax
		call	silc_fsm_next
		xor	eax, eax
		jmp	loc_62B92319
; ---------------------------------------------------------------------------
		align 4

loc_62B923B4:				; CODE XREF: silc_client_notify+B3j
					; DATA XREF: .rdata:off_62BA8888o
		mov	[esp+28h+var_24], offset silc_client_notify_server_signoff ; jumptable 62B92327	case 11
		mov	eax, [ebp+arg_0]
		mov	[esp+28h+var_28], eax
		call	silc_fsm_next
		xor	eax, eax
		jmp	loc_62B92319
; ---------------------------------------------------------------------------
		align 10h

loc_62B923D0:				; CODE XREF: silc_client_notify+B3j
					; DATA XREF: .rdata:off_62BA8888o
		mov	[esp+28h+var_24], offset silc_client_notify_channel_change ; jumptable 62B92327	case 10
		mov	eax, [ebp+arg_0]
		mov	[esp+28h+var_28], eax
		call	silc_fsm_next
		xor	eax, eax
		jmp	loc_62B92319
; ---------------------------------------------------------------------------
		align 4

loc_62B923EC:				; CODE XREF: silc_client_notify+B3j
					; DATA XREF: .rdata:off_62BA8888o
		mov	[esp+28h+var_24], offset silc_client_notify_motd ; jumptable 62B92327 case 9
		mov	eax, [ebp+arg_0]
		mov	[esp+28h+var_28], eax
		call	silc_fsm_next
		xor	eax, eax
		jmp	loc_62B92319
; ---------------------------------------------------------------------------
		align 4

loc_62B92408:				; CODE XREF: silc_client_notify+B3j
					; DATA XREF: .rdata:off_62BA8888o
		mov	[esp+28h+var_24], offset silc_client_notify_cumode_change ; jumptable 62B92327 case 8
		mov	eax, [ebp+arg_0]
		mov	[esp+28h+var_28], eax
		call	silc_fsm_next
		xor	eax, eax
		jmp	loc_62B92319
; ---------------------------------------------------------------------------
		align 4

loc_62B92424:				; CODE XREF: silc_client_notify+B3j
					; DATA XREF: .rdata:off_62BA8888o
		mov	[esp+28h+var_24], offset silc_client_notify_cmode_change ; jumptable 62B92327 case 7
		mov	eax, [ebp+arg_0]
		mov	[esp+28h+var_28], eax
		call	silc_fsm_next
		xor	eax, eax
		jmp	loc_62B92319
; ---------------------------------------------------------------------------
		align 10h

loc_62B92440:				; CODE XREF: silc_client_notify+B3j
					; DATA XREF: .rdata:off_62BA8888o
		mov	[esp+28h+var_24], offset silc_client_notify_nick_change	; jumptable 62B92327 case 6
		mov	eax, [ebp+arg_0]
		mov	[esp+28h+var_28], eax
		call	silc_fsm_next
		xor	eax, eax
		jmp	loc_62B92319
; ---------------------------------------------------------------------------
		align 4

loc_62B9245C:				; CODE XREF: silc_client_notify+B3j
					; DATA XREF: .rdata:off_62BA8888o
		mov	[esp+28h+var_24], offset silc_client_notify_topic_set ;	jumptable 62B92327 case	5
		mov	eax, [ebp+arg_0]
		mov	[esp+28h+var_28], eax
		call	silc_fsm_next
		xor	eax, eax
		jmp	loc_62B92319
; ---------------------------------------------------------------------------
		align 4

loc_62B92478:				; CODE XREF: silc_client_notify+B3j
					; DATA XREF: .rdata:off_62BA8888o
		mov	[esp+28h+var_24], offset silc_client_notify_signoff ; jumptable	62B92327 case 4
		mov	eax, [ebp+arg_0]
		mov	[esp+28h+var_28], eax
		call	silc_fsm_next
		xor	eax, eax
		jmp	loc_62B92319
; ---------------------------------------------------------------------------
		align 4

loc_62B92494:				; CODE XREF: silc_client_notify+B3j
					; DATA XREF: .rdata:off_62BA8888o
		mov	[esp+28h+var_24], offset silc_client_notify_leave ; jumptable 62B92327 case 3
		mov	eax, [ebp+arg_0]
		mov	[esp+28h+var_28], eax
		call	silc_fsm_next
		xor	eax, eax
		jmp	loc_62B92319
; ---------------------------------------------------------------------------
		align 10h

loc_62B924B0:				; CODE XREF: silc_client_notify+B3j
					; DATA XREF: .rdata:off_62BA8888o
		mov	[esp+28h+var_24], offset silc_client_notify_join ; jumptable 62B92327 case 2
		mov	eax, [ebp+arg_0]
		mov	[esp+28h+var_28], eax
		call	silc_fsm_next
		xor	eax, eax
		jmp	loc_62B92319
; ---------------------------------------------------------------------------
		align 4

loc_62B924CC:				; CODE XREF: silc_client_notify+B3j
					; DATA XREF: .rdata:off_62BA8888o
		mov	[esp+28h+var_24], offset silc_client_notify_invite ; jumptable 62B92327	case 1
		mov	eax, [ebp+arg_0]
		mov	[esp+28h+var_28], eax
		call	silc_fsm_next
		xor	eax, eax
		jmp	loc_62B92319
; ---------------------------------------------------------------------------
		align 4

loc_62B924E8:				; CODE XREF: silc_client_notify+B3j
					; DATA XREF: .rdata:off_62BA8888o
		mov	[esp+28h+var_24], offset silc_client_notify_none ; jumptable 62B92327 case 0
		mov	eax, [ebp+arg_0]
		mov	[esp+28h+var_28], eax
		call	silc_fsm_next
		xor	eax, eax
		jmp	loc_62B92319
silc_client_notify endp

; ---------------------------------------------------------------------------
		align 4
; Exported entry 184. silc_client_private_message_key_is_set

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public silc_client_private_message_key_is_set
silc_client_private_message_key_is_set proc near

arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		mov	eax, [ebp+arg_8]
		mov	eax, [eax+3DCh]
		test	eax, eax
		setnz	al
		leave
		retn
silc_client_private_message_key_is_set endp

; ---------------------------------------------------------------------------
		align 4
; Exported entry 119. silc_client_free_private_message_keys

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public silc_client_free_private_message_keys
silc_client_free_private_message_keys proc near
		push	ebp
		mov	ebp, esp
		sub	esp, 8
		leave
		jmp	silc_free
silc_client_free_private_message_keys endp

; Exported entry 202. silc_client_set_away_message

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl silc_client_set_away_message(int,	int, char *)
		public silc_client_set_away_message
silc_client_set_away_message proc near

Src		= dword	ptr -28h
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		sub	esp, 1Ch
		mov	ebx, [ebp+arg_4]
		mov	edi, [ebp+arg_8]
		mov	ecx, [ebp+arg_0]
		test	ecx, ecx
		jz	short loc_62B92580
		test	ebx, ebx
		jz	short loc_62B92580
		test	edi, edi
		jz	short loc_62B9258C
		mov	esi, [ebx+54h]
		mov	eax, [esi+110h]
		test	eax, eax
		jz	short loc_62B9255A
		mov	[esp+28h+Src], eax
		call	silc_free
		mov	esi, [ebx+54h]

loc_62B9255A:				; CODE XREF: silc_client_set_away_message+29j
		mov	[esp+28h+Src], edi ; Src
		call	_strdup
		mov	[esi+110h], eax
		mov	eax, [ebx+54h]
		mov	edx, [eax+110h]
		test	edx, edx
		setnz	al

loc_62B92576:				; CODE XREF: silc_client_set_away_message+88j
		add	esp, 1Ch
		pop	ebx
		pop	esi
		pop	edi
		leave
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_62B92580:				; CODE XREF: silc_client_set_away_message+14j
					; silc_client_set_away_message+18j
		xor	eax, eax
		add	esp, 1Ch
		pop	ebx
		pop	esi
		pop	edi
		leave
		retn
; ---------------------------------------------------------------------------
		align 4

loc_62B9258C:				; CODE XREF: silc_client_set_away_message+1Cj
		mov	eax, [ebx+54h]
		mov	eax, [eax+110h]
		mov	[esp+28h+Src], eax
		call	silc_free
		mov	eax, [ebx+54h]
		mov	dword ptr [eax+110h], 0
		mov	al, 1
		jmp	short loc_62B92576
silc_client_set_away_message endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 150. silc_client_list_private_message_keys

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public silc_client_list_private_message_keys
silc_client_list_private_message_keys proc near

var_58		= dword	ptr -58h
var_54		= dword	ptr -54h
var_40		= dword	ptr -40h
var_3C		= dword	ptr -3Ch
var_2C		= dword	ptr -2Ch
var_24		= dword	ptr -24h
var_20		= word ptr -20h
var_1E		= word ptr -1Eh
var_1C		= dword	ptr -1Ch
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		sub	esp, 4Ch
		mov	ecx, [ebp+arg_0]
		test	ecx, ecx
		jnz	short loc_62B925D4

loc_62B925C0:				; CODE XREF: silc_client_list_private_message_keys+29j
		mov	[ebp+var_3C], 0

loc_62B925C7:				; CODE XREF: silc_client_list_private_message_keys+E1j
					; silc_client_list_private_message_keys+185j ...
		mov	eax, [ebp+var_3C]
		add	esp, 4Ch
		pop	ebx
		pop	esi
		pop	edi
		leave
		retn
; ---------------------------------------------------------------------------
		align 4

loc_62B925D4:				; CODE XREF: silc_client_list_private_message_keys+Ej
		mov	edx, [ebp+arg_4]
		test	edx, edx
		jz	short loc_62B925C0
		mov	edx, [ebp+arg_4]
		mov	eax, [edx+54h]
		mov	eax, [eax+0B8h]
		mov	[esp+58h+var_58], eax
		call	silc_mutex_lock
		lea	eax, [ebp+var_2C]
		mov	[esp+58h+var_54], eax
		mov	edx, [ebp+arg_4]
		mov	eax, [edx+54h]
		mov	eax, [eax+114h]
		mov	[esp+58h+var_58], eax
		call	silc_idcache_get_all
		test	al, al
		jz	loc_62B9271A
		mov	[esp+58h+var_54], 10h
		mov	eax, [ebp+var_1C]
		shr	eax, 2
		mov	[esp+58h+var_58], eax
		call	silc_calloc
		mov	[ebp+var_3C], eax
		test	eax, eax
		jz	loc_62B9273A
		mov	ebx, [ebp+var_2C]
		mov	[ebp+var_24], ebx
		mov	dl, byte ptr [ebp+var_1C]
		and	edx, 0FFFFFFFDh
		mov	byte ptr [ebp+var_1C], dl
		mov	esi, [ebp+var_3C]
		mov	[ebp+var_40], 0

loc_62B9264C:				; CODE XREF: silc_client_list_private_message_keys+149j
		and	edx, 2
		movzx	edi, [ebp+var_1E]
		movzx	ecx, [ebp+var_20]
		test	ebx, ebx
		jz	short loc_62B92678
		nop

loc_62B9265C:				; CODE XREF: silc_client_list_private_message_keys+C6j
		test	dl, dl
		jz	short loc_62B926AC
		mov	eax, [ebx+edi]
		mov	[ebp+var_24], eax
		mov	ebx, [ebx+0Ch]
		cmp	dword ptr [ebx+3DCh], 0
		jnz	short loc_62B926BE

loc_62B92672:				; CODE XREF: silc_client_list_private_message_keys+10Cj
		mov	ebx, eax
		test	ebx, ebx
		jnz	short loc_62B9265C

loc_62B92678:				; CODE XREF: silc_client_list_private_message_keys+A9j
		mov	edx, [ebp+arg_4]
		mov	eax, [edx+54h]
		mov	eax, [eax+0B8h]
		mov	[esp+58h+var_58], eax
		call	silc_mutex_unlock
		mov	eax, [ebp+arg_8]
		test	eax, eax
		jz	loc_62B925C7
		mov	edx, [ebp+var_40]
		mov	eax, [ebp+arg_8]
		mov	[eax], edx
		mov	eax, [ebp+var_3C]
		add	esp, 4Ch
		pop	ebx
		pop	esi
		pop	edi
		leave
		retn
; ---------------------------------------------------------------------------
		align 4

loc_62B926AC:				; CODE XREF: silc_client_list_private_message_keys+AEj
		mov	eax, [ebx+ecx]
		mov	[ebp+var_24], eax
		mov	ebx, [ebx+0Ch]
		cmp	dword ptr [ebx+3DCh], 0
		jz	short loc_62B92672

loc_62B926BE:				; CODE XREF: silc_client_list_private_message_keys+C0j
		mov	[esi], ebx
		mov	eax, [ebx+3DCh]
		mov	[esp+58h+var_58], eax
		call	silc_cipher_get_name
		mov	[esi+4], eax
		test	byte ptr [ebx+402h], 2
		jz	short loc_62B92700
		xor	eax, eax
		mov	[esi+8], eax
		test	byte ptr [ebx+402h], 2
		jz	short loc_62B92712

loc_62B926E8:				; CODE XREF: silc_client_list_private_message_keys+160j
		xor	eax, eax

loc_62B926EA:				; CODE XREF: silc_client_list_private_message_keys+168j
		mov	[esi+0Ch], eax
		inc	[ebp+var_40]
		mov	ebx, [ebp+var_24]
		add	esi, 10h
		mov	dl, byte ptr [ebp+var_1C]
		jmp	loc_62B9264C
; ---------------------------------------------------------------------------
		align 10h

loc_62B92700:				; CODE XREF: silc_client_list_private_message_keys+128j
		mov	eax, [ebx+3ECh]
		mov	[esi+8], eax
		test	byte ptr [ebx+402h], 2
		jnz	short loc_62B926E8

loc_62B92712:				; CODE XREF: silc_client_list_private_message_keys+136j
		mov	eax, [ebx+3F0h]
		jmp	short loc_62B926EA
; ---------------------------------------------------------------------------

loc_62B9271A:				; CODE XREF: silc_client_list_private_message_keys+5Cj
		mov	edx, [ebp+arg_4]
		mov	eax, [edx+54h]
		mov	eax, [eax+0B8h]
		mov	[esp+58h+var_58], eax
		call	silc_mutex_unlock
		mov	[ebp+var_3C], 0
		jmp	loc_62B925C7
; ---------------------------------------------------------------------------

loc_62B9273A:				; CODE XREF: silc_client_list_private_message_keys+7Dj
		mov	edx, [ebp+arg_4]
		mov	eax, [edx+54h]
		mov	eax, [eax+0B8h]
		mov	[esp+58h+var_58], eax
		call	silc_mutex_unlock
		jmp	loc_62B925C7
silc_client_list_private_message_keys endp

; ---------------------------------------------------------------------------
		align 4
; Exported entry 109. silc_client_del_private_message_key

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public silc_client_del_private_message_key
silc_client_del_private_message_key proc near

var_18		= dword	ptr -18h
arg_0		= dword	ptr  8
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		push	edi
		push	ebx
		sub	esp, 10h
		mov	ebx, [ebp+arg_8]
		mov	eax, [ebp+arg_0]
		test	eax, eax
		jz	loc_62B927EC
		test	ebx, ebx
		jz	short loc_62B927EC
		mov	eax, [ebx+3DCh]
		test	eax, eax
		jz	short loc_62B927E0

loc_62B92778:				; CODE XREF: silc_client_del_private_message_key+94j
		mov	[esp+18h+var_18], eax
		call	silc_cipher_free
		mov	eax, [ebx+3E0h]
		mov	[esp+18h+var_18], eax
		call	silc_cipher_free
		mov	edx, [ebx+3ECh]
		test	edx, edx
		jz	short loc_62B927B2
		mov	ecx, [ebx+3F0h]
		xor	eax, eax
		mov	edi, edx
		rep stosb
		mov	eax, [ebx+3ECh]
		mov	[esp+18h+var_18], eax
		call	silc_free

loc_62B927B2:				; CODE XREF: silc_client_del_private_message_key+42j
		mov	dword ptr [ebx+3DCh], 0
		mov	dword ptr [ebx+3E0h], 0
		mov	dword ptr [ebx+3ECh], 0
		and	byte ptr [ebx+402h], 0FBh
		mov	al, 1
		add	esp, 10h
		pop	ebx
		pop	edi
		leave
		retn
; ---------------------------------------------------------------------------

loc_62B927E0:				; CODE XREF: silc_client_del_private_message_key+22j
		mov	edi, [ebx+3E0h]
		test	edi, edi
		jnz	short loc_62B92778
		xchg	ax, ax

loc_62B927EC:				; CODE XREF: silc_client_del_private_message_key+10j
					; silc_client_del_private_message_key+18j
		xor	eax, eax
		add	esp, 10h
		pop	ebx
		pop	edi
		leave
		retn
silc_client_del_private_message_key endp

; ---------------------------------------------------------------------------
		align 4
; Exported entry   7. silc_client_add_private_message_key_ske

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public silc_client_add_private_message_key_ske
silc_client_add_private_message_key_ske	proc near
					; CODE XREF: silc_client_add_private_message_key+EFp

var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
arg_0		= dword	ptr  8
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h
arg_10		= dword	ptr  18h
arg_14		= dword	ptr  1Ch

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		sub	esp, 1Ch
		mov	ebx, [ebp+arg_8]
		mov	esi, [ebp+arg_C]
		mov	edi, [ebp+arg_10]
		mov	eax, [ebp+arg_0]
		test	eax, eax
		jz	short loc_62B92829
		test	ebx, ebx
		jz	short loc_62B92829
		mov	ecx, [ebx+3DCh]
		test	ecx, ecx
		jz	short loc_62B92834
		mov	edx, [ebx+3E0h]
		test	edx, edx
		jz	short loc_62B92834

loc_62B92829:				; CODE XREF: silc_client_add_private_message_key_ske+17j
					; silc_client_add_private_message_key_ske+1Bj ...
		xor	eax, eax

loc_62B9282B:				; CODE XREF: silc_client_add_private_message_key_ske+1A5j
		add	esp, 1Ch
		pop	ebx
		pop	esi
		pop	edi
		leave
		retn
; ---------------------------------------------------------------------------
		align 4

loc_62B92834:				; CODE XREF: silc_client_add_private_message_key_ske+25j
					; silc_client_add_private_message_key_ske+2Fj
		test	esi, esi
		jz	loc_62B929A4

loc_62B9283C:				; CODE XREF: silc_client_add_private_message_key_ske+1B1j
		test	edi, edi
		jz	loc_62B929B0

loc_62B92844:				; CODE XREF: silc_client_add_private_message_key_ske+1BDj
		mov	[esp+28h+var_28], esi
		call	silc_cipher_is_supported
		test	al, al
		jz	short loc_62B92829
		mov	[esp+28h+var_28], edi
		call	silc_hmac_is_supported
		test	al, al
		jz	short loc_62B92829
		or	byte ptr [ebx+402h], 2
		lea	eax, [ebx+3DCh]
		mov	[esp+28h+var_24], eax
		mov	[esp+28h+var_28], esi
		call	silc_cipher_alloc
		test	al, al
		jz	short loc_62B92829
		lea	eax, [ebx+3E0h]
		mov	[esp+28h+var_24], eax
		mov	[esp+28h+var_28], esi
		call	silc_cipher_alloc
		test	al, al
		jz	short loc_62B92829
		lea	eax, [ebx+3E4h]
		mov	[esp+28h+var_20], eax
		mov	[esp+28h+var_24], 0
		mov	[esp+28h+var_28], edi
		call	silc_hmac_alloc
		test	al, al
		jz	loc_62B92829
		lea	eax, [ebx+3E8h]
		mov	[esp+28h+var_20], eax
		mov	[esp+28h+var_24], 0
		mov	[esp+28h+var_28], edi
		call	silc_hmac_alloc
		test	al, al
		jz	loc_62B92829
		test	byte ptr [ebx+402h], 4
		jnz	loc_62B929BA
		mov	[esp+28h+var_1C], 1
		mov	edx, [ebp+arg_14]
		mov	eax, [edx+14h]
		mov	[esp+28h+var_20], eax
		mov	eax, [edx+0Ch]
		mov	[esp+28h+var_24], eax
		mov	eax, [ebx+3DCh]
		mov	[esp+28h+var_28], eax
		call	silc_cipher_set_key
		mov	edx, [ebp+arg_14]
		mov	eax, [edx]
		mov	[esp+28h+var_24], eax
		mov	eax, [ebx+3DCh]
		mov	[esp+28h+var_28], eax
		call	silc_cipher_set_iv
		mov	[esp+28h+var_1C], 0
		mov	edx, [ebp+arg_14]
		mov	eax, [edx+14h]
		mov	[esp+28h+var_20], eax
		mov	eax, [edx+10h]
		mov	[esp+28h+var_24], eax
		mov	eax, [ebx+3E0h]
		mov	[esp+28h+var_28], eax
		call	silc_cipher_set_key
		mov	edx, [ebp+arg_14]
		mov	eax, [edx+4]
		mov	[esp+28h+var_24], eax
		mov	eax, [ebx+3E0h]
		mov	[esp+28h+var_28], eax
		call	silc_cipher_set_iv
		mov	edx, [ebp+arg_14]
		mov	eax, [edx+20h]
		mov	[esp+28h+var_20], eax
		mov	eax, [edx+18h]
		mov	[esp+28h+var_24], eax
		mov	eax, [ebx+3E4h]
		mov	[esp+28h+var_28], eax
		call	silc_hmac_set_key
		mov	edx, [ebp+arg_14]
		mov	eax, [edx+20h]
		mov	[esp+28h+var_20], eax
		mov	eax, [edx+1Ch]

loc_62B92989:				; CODE XREF: silc_client_add_private_message_key_ske+26Bj
		mov	[esp+28h+var_24], eax
		mov	eax, [ebx+3E8h]
		mov	[esp+28h+var_28], eax
		call	silc_hmac_set_key
		mov	al, 1
		jmp	loc_62B9282B
; ---------------------------------------------------------------------------
		align 4

loc_62B929A4:				; CODE XREF: silc_client_add_private_message_key_ske+3Ej
		mov	esi, offset aAes256Cbc_0 ; "aes-256-cbc"
		jmp	loc_62B9283C
; ---------------------------------------------------------------------------
		align 10h

loc_62B929B0:				; CODE XREF: silc_client_add_private_message_key_ske+46j
		mov	edi, offset aHmacSha196_0 ; "hmac-sha1-96"
		jmp	loc_62B92844
; ---------------------------------------------------------------------------

loc_62B929BA:				; CODE XREF: silc_client_add_private_message_key_ske+E2j
		mov	[esp+28h+var_1C], 1
		mov	edx, [ebp+arg_14]
		mov	eax, [edx+14h]
		mov	[esp+28h+var_20], eax
		mov	eax, [edx+10h]
		mov	[esp+28h+var_24], eax
		mov	eax, [ebx+3DCh]
		mov	[esp+28h+var_28], eax
		call	silc_cipher_set_key
		mov	edx, [ebp+arg_14]
		mov	eax, [edx+4]
		mov	[esp+28h+var_24], eax
		mov	eax, [ebx+3DCh]
		mov	[esp+28h+var_28], eax
		call	silc_cipher_set_iv
		mov	[esp+28h+var_1C], 0
		mov	edx, [ebp+arg_14]
		mov	eax, [edx+14h]
		mov	[esp+28h+var_20], eax
		mov	eax, [edx+0Ch]
		mov	[esp+28h+var_24], eax
		mov	eax, [ebx+3E0h]
		mov	[esp+28h+var_28], eax
		call	silc_cipher_set_key
		mov	edx, [ebp+arg_14]
		mov	eax, [edx]
		mov	[esp+28h+var_24], eax
		mov	eax, [ebx+3E0h]
		mov	[esp+28h+var_28], eax
		call	silc_cipher_set_iv
		mov	edx, [ebp+arg_14]
		mov	eax, [edx+20h]
		mov	[esp+28h+var_20], eax
		mov	eax, [edx+1Ch]
		mov	[esp+28h+var_24], eax
		mov	eax, [ebx+3E4h]
		mov	[esp+28h+var_28], eax
		call	silc_hmac_set_key
		mov	edx, [ebp+arg_14]
		mov	eax, [edx+20h]
		mov	[esp+28h+var_20], eax
		mov	eax, [edx+18h]
		jmp	loc_62B92989
silc_client_add_private_message_key_ske	endp

; Exported entry   6. silc_client_add_private_message_key

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public silc_client_add_private_message_key
silc_client_add_private_message_key proc near

var_78		= dword	ptr -78h
var_74		= dword	ptr -74h
var_70		= dword	ptr -70h
var_6C		= dword	ptr -6Ch
var_68		= dword	ptr -68h
var_64		= dword	ptr -64h
var_60		= dword	ptr -60h
var_5C		= dword	ptr -5Ch
var_58		= dword	ptr -58h
var_54		= dword	ptr -54h
var_50		= dword	ptr -50h
var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_19		= byte ptr -19h
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h
arg_10		= dword	ptr  18h
arg_14		= dword	ptr  1Ch
arg_18		= dword	ptr  20h

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		sub	esp, 6Ch
		mov	ebx, [ebp+arg_0]
		mov	esi, [ebp+arg_8]
		mov	edi, [ebp+arg_C]
		test	ebx, ebx
		jz	short loc_62B92A96
		test	esi, esi
		jz	short loc_62B92A96
		mov	eax, [esi+3DCh]
		test	eax, eax
		jz	short loc_62B92AA4
		mov	ecx, [esi+3E0h]
		test	ecx, ecx
		jz	short loc_62B92AA4

loc_62B92A96:				; CODE XREF: silc_client_add_private_message_key+14j
					; silc_client_add_private_message_key+18j ...
		xor	ebx, ebx

loc_62B92A98:				; CODE XREF: silc_client_add_private_message_key+114j
					; silc_client_add_private_message_key+1F0j
		mov	al, bl
		add	esp, 6Ch
		pop	ebx
		pop	esi
		pop	edi
		leave
		retn
; ---------------------------------------------------------------------------
		align 4

loc_62B92AA4:				; CODE XREF: silc_client_add_private_message_key+22j
					; silc_client_add_private_message_key+2Cj
		test	edi, edi
		jz	loc_62B92C60

loc_62B92AAC:				; CODE XREF: silc_client_add_private_message_key+1FDj
		mov	edx, [ebp+arg_10]
		test	edx, edx
		jz	loc_62B92C6C

loc_62B92AB7:				; CODE XREF: silc_client_add_private_message_key+20Bj
		mov	[esp+78h+var_78], edi
		call	silc_cipher_is_supported
		test	al, al
		jz	short loc_62B92A96
		mov	eax, [ebp+arg_10]
		mov	[esp+78h+var_78], eax
		call	silc_hmac_is_supported
		test	al, al
		jz	short loc_62B92A96
		mov	edx, [ebp+arg_18]
		mov	[esp+78h+var_74], edx
		mov	eax, [ebp+arg_14]
		mov	[esp+78h+var_78], eax
		call	silc_memdup
		mov	[esi+3ECh], eax
		mov	edx, [ebp+arg_18]
		mov	[esi+3F0h], edx
		mov	edx, [ebp+arg_4]
		mov	eax, [edx+54h]
		mov	eax, [eax+0F0h]
		mov	[esp+78h+var_64], eax
		mov	[esp+78h+var_68], 10h
		mov	[esp+78h+var_6C], 100h
		mov	[esp+78h+var_70], 10h
		mov	eax, [ebp+arg_18]
		mov	[esp+78h+var_74], eax
		mov	edx, [ebp+arg_14]
		mov	[esp+78h+var_78], edx
		call	silc_ske_process_key_material_data
		mov	edx, eax
		test	eax, eax
		jz	loc_62B92A96
		mov	[esp+78h+var_64], eax
		mov	eax, [ebp+arg_10]
		mov	[esp+78h+var_68], eax
		mov	[esp+78h+var_6C], edi
		mov	[esp+78h+var_70], esi
		mov	eax, [ebp+arg_4]
		mov	[esp+78h+var_74], eax
		mov	[esp+78h+var_78], ebx
		mov	[ebp+var_28], edx
		call	silc_client_add_private_message_key_ske
		mov	bl, al
		and	byte ptr [esi+402h], 0FDh
		mov	edx, [ebp+var_28]
		mov	[esp+78h+var_78], edx
		call	silc_ske_free_key_material
		mov	cl, [esi+402h]
		and	ecx, 4
		mov	[ebp+var_19], cl
		jnz	loc_62B92A98
		mov	eax, [esi+3DCh]
		mov	[esp+78h+var_78], eax
		call	silc_cipher_get_name
		mov	[ebp+var_24], eax
		mov	eax, [esi+3E4h]
		mov	[esp+78h+var_78], eax
		call	silc_hmac_get_name
		mov	edx, eax
		mov	ecx, 0FFFFFFFFh
		mov	edi, eax
		mov	al, [ebp+var_19]
		repne scasb
		not	ecx
		dec	ecx
		mov	[ebp+var_20], ecx
		mov	ecx, 0FFFFFFFFh
		mov	edi, [ebp+var_24]
		repne scasb
		not	ecx
		dec	ecx
		mov	[esp+78h+var_2C], 1Dh
		mov	eax, [ebp+var_20]
		mov	[esp+78h+var_30], eax
		mov	[esp+78h+var_34], edx
		mov	[esp+78h+var_38], 0Ch
		mov	[esp+78h+var_3C], eax
		mov	[esp+78h+var_40], 3
		mov	[esp+78h+var_44], ecx
		mov	edx, [ebp+var_24]
		mov	[esp+78h+var_48], edx
		mov	[esp+78h+var_4C], 0Ch
		mov	[esp+78h+var_50], ecx
		mov	[esp+78h+var_54], 3
		mov	[esp+78h+var_58], 0
		mov	[esp+78h+var_5C], 0
		add	esi, 38Ch
		mov	[esp+78h+var_60], esi
		mov	[esp+78h+var_64], 2
		mov	[esp+78h+var_68], 0
		mov	[esp+78h+var_6C], 0
		mov	[esp+78h+var_70], 0
		mov	[esp+78h+var_74], 0Ah
		mov	edx, [ebp+arg_4]
		mov	eax, [edx+3Ch]
		mov	[esp+78h+var_78], eax
		call	silc_packet_send_va_ext
		jmp	loc_62B92A98
; ---------------------------------------------------------------------------
		align 10h

loc_62B92C60:				; CODE XREF: silc_client_add_private_message_key+3Ej
		mov	edi, offset aAes256Cbc_0 ; "aes-256-cbc"
		jmp	loc_62B92AAC
; ---------------------------------------------------------------------------
		align 4

loc_62B92C6C:				; CODE XREF: silc_client_add_private_message_key+49j
		mov	[ebp+arg_10], offset aHmacSha196_0 ; "hmac-sha1-96"
		jmp	loc_62B92AB7
silc_client_add_private_message_key endp

; Exported entry 182. silc_client_private_message_error

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public silc_client_private_message_error
silc_client_private_message_error proc near ; DATA XREF: sub_62B93000:loc_62B93038o
					; silc_client_private_message:loc_62B93516o

var_18		= dword	ptr -18h
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		sub	esp, 18h
		mov	eax, [ebp+arg_8]
		mov	[esp+18h+var_18], eax
		call	silc_packet_free
		mov	eax, 3
		leave
		retn
silc_client_private_message_error endp

; Exported entry 183. silc_client_private_message_key

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public silc_client_private_message_key
silc_client_private_message_key	proc near
					; DATA XREF: silc_client_connection_st_packet:loc_62B81F10o

var_68		= dword	ptr -68h
var_64		= dword	ptr -64h
var_60		= dword	ptr -60h
var_5C		= dword	ptr -5Ch
var_58		= dword	ptr -58h
var_54		= dword	ptr -54h
var_40		= dword	ptr -40h
var_3C		= dword	ptr -3Ch
var_35		= byte ptr -35h
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		sub	esp, 5Ch
		mov	edi, [ebp+arg_0]
		mov	esi, [ebp+arg_4]
		mov	ebx, [ebp+arg_8]
		mov	edx, [esi+4Ch]
		mov	al, [ebx+20h]
		mov	cl, al
		and	ecx, 0FFFFFFC0h
		cmp	cl, 80h
		jz	short loc_62B92CC8

loc_62B92CB2:				; CODE XREF: silc_client_private_message_key+6Fj
		mov	[esp+68h+var_68], ebx
		call	silc_packet_free
		mov	eax, 3

loc_62B92CBF:				; CODE XREF: silc_client_private_message_key+B7j
		add	esp, 5Ch
		pop	ebx
		pop	esi
		pop	edi
		leave
		retn
; ---------------------------------------------------------------------------
		align 4

loc_62B92CC8:				; CODE XREF: silc_client_private_message_key+20j
		mov	[esp+68h+var_58], 1Dh
		lea	ecx, [ebp+var_35]
		mov	[esp+68h+var_5C], ecx
		mov	[esp+68h+var_60], 2
		and	eax, 3Fh
		mov	[esp+68h+var_64], eax
		mov	eax, [ebx+18h]
		mov	[esp+68h+var_68], eax
		mov	[ebp+var_3C], edx
		mov	[ebp+var_40], ecx
		call	silc_id_str2id
		test	al, al
		mov	edx, [ebp+var_3C]
		mov	ecx, [ebp+var_40]
		jz	short loc_62B92CB2
		mov	al, [edi+28h]
		mov	bl, al
		or	ebx, 4
		mov	[edi+28h], bl
		test	al, 4
		jnz	short loc_62B92D4C

loc_62B92D10:				; CODE XREF: silc_client_private_message_key+F4j
		mov	[esp+68h+var_54], edi
		mov	[esp+68h+var_58], offset sub_62B92D88
		mov	[esp+68h+var_5C], 0
		mov	[esp+68h+var_60], ecx
		mov	[esp+68h+var_64], esi
		mov	[esp+68h+var_68], edx
		call	silc_client_get_client_by_id_resolve
		mov	dl, [edi+28h]
		mov	al, dl
		shr	al, 2
		and	edx, 0FFFFFFFBh
		mov	[edi+28h], dl
		shl	eax, 1
		and	eax, 2
		jmp	loc_62B92CBF
; ---------------------------------------------------------------------------

loc_62B92D4C:				; CODE XREF: silc_client_private_message_key+7Ej
		mov	[esp+68h+var_60], 174h
		mov	[esp+68h+var_64], offset aClient_prvmsg_ ; "client_prvmsg.c"
		mov	[esp+68h+var_68], offset aSilc_verifyS_4 ; "SILC_VERIFY	%s:%d"
		mov	[ebp+var_3C], edx
		mov	[ebp+var_40], ecx
		call	silc_format
		mov	[esp+68h+var_64], eax
		mov	[esp+68h+var_68], 3
		call	silc_log_output
		mov	ecx, [ebp+var_40]
		mov	edx, [ebp+var_3C]
		jmp	short loc_62B92D10
silc_client_private_message_key	endp

; ---------------------------------------------------------------------------
		align 4

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_62B92D88	proc near		; DATA XREF: silc_client_private_message_key+84o

var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
arg_C		= dword	ptr  14h
arg_10		= dword	ptr  18h

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		sub	esp, 3Ch
		mov	ebx, [ebp+arg_C]
		mov	esi, [ebp+arg_10]
		mov	[esp+48h+var_48], esi
		call	silc_fsm_get_state_context
		mov	edi, eax
		mov	[ebp+var_1C], 0
		mov	[ebp+var_20], 0
		test	ebx, ebx
		jz	short loc_62B92DFE
		mov	[esp+48h+var_34], 1Dh
		lea	eax, [ebp+var_20]
		mov	[esp+48h+var_38], eax
		mov	[esp+48h+var_3C], 11h
		lea	eax, [ebp+var_1C]
		mov	[esp+48h+var_40], eax
		mov	[esp+48h+var_44], 11h
		lea	eax, [edi+8]
		mov	[esp+48h+var_48], eax
		call	silc_buffer_unformat
		test	eax, eax
		jnz	short loc_62B92E18

loc_62B92DE8:				; CODE XREF: sub_62B92D88+B9j
		mov	eax, [ebp+var_1C]
		mov	[esp+48h+var_48], eax
		call	silc_free
		mov	eax, [ebp+var_20]
		mov	[esp+48h+var_48], eax
		call	silc_free

loc_62B92DFE:				; CODE XREF: sub_62B92D88+29j
		mov	[esp+48h+var_48], edi
		call	silc_packet_free
		mov	[esp+48h+var_48], esi
		call	silc_fsm_finish
		add	esp, 3Ch
		pop	ebx
		pop	esi
		pop	edi
		leave
		retn
; ---------------------------------------------------------------------------
		align 4

loc_62B92E18:				; CODE XREF: sub_62B92D88+5Ej
		mov	eax, [ebx+14h]
		mov	[ebx+18h], eax
		mov	eax, [ebx+8]
		test	eax, eax
		jz	short loc_62B92E50
		test	byte ptr [ebx+10h], 2
		jnz	short loc_62B92E44
		movzx	edx, word ptr [ebx+0Ch]
		mov	edx, [eax+edx]

loc_62B92E32:				; CODE XREF: sub_62B92D88+C3j
		mov	[ebx+8], edx
		mov	[ebx+14h], eax
		mov	eax, [eax]

loc_62B92E3A:				; CODE XREF: sub_62B92D88+D1j
		or	byte ptr [eax+402h], 4
		jmp	short loc_62B92DE8
; ---------------------------------------------------------------------------
		align 4

loc_62B92E44:				; CODE XREF: sub_62B92D88+A1j
		movzx	edx, word ptr [ebx+0Eh]
		mov	edx, [eax+edx]
		jmp	short loc_62B92E32
; ---------------------------------------------------------------------------
		align 10h

loc_62B92E50:				; CODE XREF: sub_62B92D88+9Bj
		mov	dword ptr [ebx+14h], 0
		xor	eax, eax
		jmp	short loc_62B92E3A
sub_62B92D88	endp

; ---------------------------------------------------------------------------
		align 4
; Exported entry 185. silc_client_private_message_wait

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public silc_client_private_message_wait
silc_client_private_message_wait proc near

var_68		= dword	ptr -68h
var_64		= dword	ptr -64h
var_60		= dword	ptr -60h
var_5C		= dword	ptr -5Ch
var_58		= dword	ptr -58h
var_54		= dword	ptr -54h
var_50		= dword	ptr -50h
var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_1C		= dword	ptr -1Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		sub	esp, 5Ch
		mov	ebx, [ebp+arg_8]
		mov	esi, [ebp+arg_C]
		mov	eax, [ebx+3D4h]
		test	eax, eax
		jz	loc_62B92F4C
		lea	edi, [ebp+var_1C]

loc_62B92E7C:				; CODE XREF: silc_client_private_message_wait+E9j
		mov	[esp+68h+var_60], edi
		mov	[esp+68h+var_64], 0
		mov	[esp+68h+var_68], eax
		call	silc_packet_wait
		test	eax, eax
		js	loc_62B92F4C
		mov	eax, [ebp+var_1C]
		mov	ecx, [eax+0Ch]
		mov	[esp+68h+var_38], 0
		mov	[esp+68h+var_3C], 0
		mov	[esp+68h+var_40], 0
		mov	dl, [eax+21h]
		and	edx, 3Fh
		mov	[esp+68h+var_44], edx
		mov	edx, [eax+1Ch]
		mov	[esp+68h+var_48], edx
		mov	dl, [eax+20h]
		and	edx, 3Fh
		mov	[esp+68h+var_4C], edx
		mov	edx, [eax+18h]
		mov	[esp+68h+var_50], edx
		mov	edx, [ebx+3E8h]
		mov	[esp+68h+var_54], edx
		mov	edx, [ebx+3E0h]
		mov	[esp+68h+var_58], edx
		mov	dl, [ebx+402h]
		shr	dl, 1
		xor	edx, 1
		and	edx, 1
		mov	[esp+68h+var_5C], edx
		mov	[esp+68h+var_60], 1
		mov	eax, [eax+10h]
		sub	eax, ecx
		mov	[esp+68h+var_64], eax
		mov	[esp+68h+var_68], ecx
		call	silc_message_payload_parse
		mov	[esi], eax
		test	eax, eax
		jz	short loc_62B92F34
		mov	eax, [ebp+var_1C]
		mov	[esp+68h+var_68], eax
		call	silc_packet_free
		mov	al, 1
		add	esp, 5Ch
		pop	ebx
		pop	esi
		pop	edi
		leave
		retn
; ---------------------------------------------------------------------------
		align 4

loc_62B92F34:				; CODE XREF: silc_client_private_message_wait+BFj
		mov	eax, [ebp+var_1C]
		mov	[esp+68h+var_68], eax
		call	silc_packet_free
		mov	eax, [ebx+3D4h]
		jmp	loc_62B92E7C
; ---------------------------------------------------------------------------
		align 4

loc_62B92F4C:				; CODE XREF: silc_client_private_message_wait+17j
					; silc_client_private_message_wait+36j
		xor	eax, eax
		add	esp, 5Ch
		pop	ebx
		pop	esi
		pop	edi
		leave
		retn
silc_client_private_message_wait endp

; ---------------------------------------------------------------------------
		align 4
; Exported entry 187. silc_client_private_message_wait_uninit

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public silc_client_private_message_wait_uninit
silc_client_private_message_wait_uninit	proc near

var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		push	ebx
		sub	esp, 14h
		mov	ebx, [ebp+arg_8]
		mov	eax, [ebx+3D4h]
		test	eax, eax
		jz	short loc_62B92F88
		mov	edx, [ebp+arg_4]
		mov	edx, [edx+3Ch]
		mov	[esp+18h+var_14], edx
		mov	[esp+18h+var_18], eax
		call	silc_packet_wait_uninit
		mov	dword ptr [ebx+3D4h], 0

loc_62B92F88:				; CODE XREF: silc_client_private_message_wait_uninit+12j
		add	esp, 14h
		pop	ebx
		leave
		retn
silc_client_private_message_wait_uninit	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 186. silc_client_private_message_wait_init

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public silc_client_private_message_wait_init
silc_client_private_message_wait_init proc near

var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_3C		= dword	ptr -3Ch
var_38		= byte ptr -38h
var_1A		= word ptr -1Ah
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		sub	esp, 3Ch
		mov	ebx, [ebp+arg_8]
		mov	edx, [ebx+3D4h]
		test	edx, edx
		jz	short loc_62B92FB0
		mov	al, 1
		add	esp, 3Ch
		pop	ebx
		pop	esi
		pop	edi
		leave
		retn
; ---------------------------------------------------------------------------

loc_62B92FB0:				; CODE XREF: silc_client_private_message_wait_init+14j
		mov	[ebp+var_1A], 2
		lea	edi, [ebp+var_38]
		lea	esi, [ebx+38Ch]
		mov	ecx, 1Dh
		rep movsb
		mov	[esp+48h+var_3C], 0FFFFFFFFh
		mov	[esp+48h+var_40], 9
		lea	eax, [ebp+var_38]
		mov	[esp+48h+var_44], eax
		mov	eax, [ebp+arg_4]
		mov	eax, [eax+3Ch]
		mov	[esp+48h+var_48], eax
		call	silc_packet_wait_init
		mov	[ebx+3D4h], eax
		test	eax, eax
		setnz	al
		add	esp, 3Ch
		pop	ebx
		pop	esi
		pop	edi
		leave
		retn
silc_client_private_message_wait_init endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_62B93000	proc near		; DATA XREF: silc_client_private_message+259o

var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
arg_0		= dword	ptr  8
arg_C		= dword	ptr  14h
arg_10		= dword	ptr  18h

		push	ebp
		mov	ebp, esp
		push	ebx
		sub	esp, 14h
		mov	ebx, [ebp+arg_10]
		mov	ecx, [ebp+arg_C]
		test	ecx, ecx
		jz	short loc_62B93038

loc_62B93011:				; CODE XREF: sub_62B93000+48j
		mov	al, [ebx+28h]
		mov	dl, al
		and	edx, 0FFFFFFFBh
		mov	[ebx+28h], dl
		test	al, 4
		jz	short loc_62B93028
		add	esp, 14h
		pop	ebx
		leave
		retn
; ---------------------------------------------------------------------------
		align 4

loc_62B93028:				; CODE XREF: sub_62B93000+1Ej
		mov	[ebp+arg_0], ebx
		add	esp, 14h
		pop	ebx
		leave
		jmp	silc_fsm_continue
; ---------------------------------------------------------------------------
		align 4

loc_62B93038:				; CODE XREF: sub_62B93000+Fj
		mov	[esp+18h+var_14], offset silc_client_private_message_error
		mov	[esp+18h+var_18], ebx
		call	silc_fsm_next
		jmp	short loc_62B93011
sub_62B93000	endp

; ---------------------------------------------------------------------------
		align 4
; Exported entry 201. silc_client_send_private_message

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public silc_client_send_private_message
silc_client_send_private_message proc near ; CODE XREF:	silc_client_private_message+223p

var_C8		= dword	ptr -0C8h
var_C4		= dword	ptr -0C4h
var_C0		= dword	ptr -0C0h
var_BC		= dword	ptr -0BCh
var_B8		= dword	ptr -0B8h
var_B4		= dword	ptr -0B4h
var_B0		= dword	ptr -0B0h
var_AC		= dword	ptr -0ACh
var_A8		= dword	ptr -0A8h
var_A4		= dword	ptr -0A4h
var_A0		= dword	ptr -0A0h
var_9C		= dword	ptr -9Ch
var_98		= dword	ptr -98h
var_94		= dword	ptr -94h
var_7C		= dword	ptr -7Ch
var_74		= dword	ptr -74h
var_70		= dword	ptr -70h
var_6C		= dword	ptr -6Ch
var_68		= dword	ptr -68h
var_64		= dword	ptr -64h
var_60		= dword	ptr -60h
var_5C		= dword	ptr -5Ch
var_58		= byte ptr -58h
var_3A		= word ptr -3Ah
var_38		= byte ptr -38h
var_1A		= word ptr -1Ah
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h
arg_10		= dword	ptr  18h
arg_14		= dword	ptr  1Ch
arg_18		= dword	ptr  20h

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		sub	esp, 0BCh
		mov	eax, [ebp+arg_0]
		mov	ebx, [ebp+arg_4]
		mov	edx, [ebp+arg_8]
		mov	ecx, [ebp+arg_C]
		test	eax, eax
		jz	loc_62B9320F
		test	ebx, ebx
		jz	loc_62B9320F
		test	edx, edx
		jz	loc_62B9320F
		movzx	ecx, cx
		mov	[ebp+var_60], ecx
		and	ecx, 20h
		jnz	loc_62B93205

loc_62B9308B:				; CODE XREF: silc_client_send_private_message+1BDj
		mov	ecx, [ebx+54h]
		test	byte ptr [ecx+12Dh], 2
		jnz	loc_62B9320F
		mov	[ebp+var_1A], 2
		mov	esi, [ebx]
		lea	ecx, [ebp+var_38]
		mov	[ebp+var_6C], ecx
		add	esi, 38Ch
		mov	ecx, 1Dh
		mov	edi, [ebp+var_6C]
		rep movsb
		mov	[ebp+var_3A], 2
		lea	esi, [ebp+var_58]
		mov	[ebp+var_70], esi
		lea	ecx, [edx+38Ch]
		mov	[ebp+var_5C], ecx
		mov	ecx, 1Dh
		mov	edi, esi
		mov	esi, [ebp+var_5C]
		rep movsb
		mov	edi, [ebx+38h]
		mov	eax, [eax+10h]
		mov	[ebp+var_7C], eax
		mov	esi, [edx+3E4h]
		mov	[ebp+var_64], esi
		mov	ecx, [edx+3DCh]
		test	ecx, ecx
		jz	loc_62B9321C
		mov	al, [edx+402h]
		shr	al, 1
		xor	eax, 1
		mov	esi, eax
		and	esi, 1
		mov	[ebp+var_74], esi

loc_62B9310D:				; CODE XREF: silc_client_send_private_message+1D7j
		mov	[esp+0C8h+var_94], 0
		lea	eax, [ebp+var_58]
		mov	[esp+0C8h+var_98], eax
		lea	esi, [ebp+var_38]
		mov	[esp+0C8h+var_9C], esi
		mov	eax, [ebp+arg_10]
		mov	[esp+0C8h+var_A0], eax
		mov	[esp+0C8h+var_A4], edi
		mov	[esp+0C8h+var_A8], 0
		mov	esi, [ebp+var_7C]
		mov	[esp+0C8h+var_AC], esi
		mov	eax, [ebp+var_64]
		mov	[esp+0C8h+var_B0], eax
		mov	[esp+0C8h+var_B4], ecx
		mov	[esp+0C8h+var_B8], 1
		mov	ecx, [ebp+var_74]
		mov	[esp+0C8h+var_BC], ecx
		mov	eax, [ebp+arg_18]
		mov	[esp+0C8h+var_C0], eax
		mov	eax, [ebp+arg_14]
		mov	[esp+0C8h+var_C4], eax
		mov	esi, [ebp+var_60]
		mov	[esp+0C8h+var_C8], esi
		mov	[ebp+var_68], edx
		call	silc_message_payload_encode
		mov	esi, eax
		test	eax, eax
		mov	edx, [ebp+var_68]
		jz	loc_62B93228
		mov	ecx, [eax+4]
		mov	[esp+0C8h+var_A0], 0
		mov	[esp+0C8h+var_A4], 0
		mov	eax, [eax+8]
		sub	eax, ecx
		mov	[esp+0C8h+var_A8], eax
		mov	[esp+0C8h+var_AC], ecx
		mov	eax, [ebp+var_5C]
		mov	[esp+0C8h+var_B0], eax
		mov	[esp+0C8h+var_B4], 2
		mov	[esp+0C8h+var_B8], 0
		mov	[esp+0C8h+var_BC], 0
		xor	eax, eax
		cmp	dword ptr [edx+3DCh], 0
		setnz	al
		mov	[esp+0C8h+var_C0], eax
		mov	[esp+0C8h+var_C4], 9
		mov	eax, [ebx+3Ch]
		mov	[esp+0C8h+var_C8], eax
		call	silc_packet_send_ext
		mov	edx, [esi]
		mov	[esp+0C8h+var_C8], edx
		mov	byte ptr [ebp+var_68], al
		call	silc_free
		mov	[esp+0C8h+var_C8], esi
		call	silc_free
		mov	al, byte ptr [ebp+var_68]

loc_62B931FA:				; CODE XREF: silc_client_send_private_message+1FAj
		add	esp, 0BCh
		pop	ebx
		pop	esi
		pop	edi
		leave
		retn
; ---------------------------------------------------------------------------

loc_62B93205:				; CODE XREF: silc_client_send_private_message+39j
		cmp	[ebp+arg_10], 0
		jnz	loc_62B9308B

loc_62B9320F:				; CODE XREF: silc_client_send_private_message+1Aj
					; silc_client_send_private_message+22j	...
		xor	eax, eax
		add	esp, 0BCh
		pop	ebx
		pop	esi
		pop	edi
		leave
		retn
; ---------------------------------------------------------------------------

loc_62B9321C:				; CODE XREF: silc_client_send_private_message+A8j
		mov	[ebp+var_74], 0
		jmp	loc_62B9310D
; ---------------------------------------------------------------------------

loc_62B93228:				; CODE XREF: silc_client_send_private_message+12Ej
		mov	[esp+0C8h+var_C8], offset aErrorEncodingP ; "Error encoding private message"
		call	silc_format
		mov	[esp+0C8h+var_C4], eax
		mov	[esp+0C8h+var_C8], 3
		call	silc_log_output
		xor	eax, eax
		jmp	short loc_62B931FA
silc_client_send_private_message endp

; Exported entry 181. silc_client_private_message

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public silc_client_private_message
silc_client_private_message proc near	; DATA XREF: silc_client_connection_st_packet:loc_62B81EF8o

var_A8		= dword	ptr -0A8h
var_A4		= dword	ptr -0A4h
var_A0		= dword	ptr -0A0h
var_9C		= dword	ptr -9Ch
var_98		= dword	ptr -98h
var_94		= dword	ptr -94h
var_90		= dword	ptr -90h
var_8C		= dword	ptr -8Ch
var_88		= dword	ptr -88h
var_84		= dword	ptr -84h
var_80		= dword	ptr -80h
var_7C		= dword	ptr -7Ch
var_78		= dword	ptr -78h
var_58		= dword	ptr -58h
var_54		= dword	ptr -54h
var_50		= dword	ptr -50h
var_4C		= dword	ptr -4Ch
var_39		= byte ptr -39h
var_1C		= dword	ptr -1Ch
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		sub	esp, 9Ch
		mov	edi, [ebp+arg_0]
		mov	ebx, [ebp+arg_8]
		mov	eax, [ebp+arg_4]
		mov	eax, [eax+4Ch]
		mov	[ebp+var_54], eax
		mov	al, [ebx+20h]
		mov	dl, al
		and	edx, 0FFFFFFC0h
		cmp	dl, 80h
		jnz	loc_62B93516
		mov	[esp+0A8h+var_98], 1Dh
		lea	esi, [ebp+var_39]
		mov	[esp+0A8h+var_9C], esi
		mov	[esp+0A8h+var_A0], 2
		and	eax, 3Fh
		mov	[esp+0A8h+var_A4], eax
		mov	eax, [ebx+18h]
		mov	[esp+0A8h+var_A8], eax
		call	silc_id_str2id
		test	al, al
		jz	loc_62B93516
		mov	[esp+0A8h+var_A0], esi
		mov	ecx, [ebp+arg_4]
		mov	[esp+0A8h+var_A4], ecx
		mov	eax, [ebp+var_54]
		mov	[esp+0A8h+var_A8], eax
		call	silc_client_get_client_by_id
		mov	edx, eax
		test	eax, eax
		jz	loc_62B93478
		cmp	byte ptr [eax],	0
		jz	loc_62B93478
		test	byte ptr [ebx+23h], 1
		jnz	loc_62B9352D
		mov	eax, [eax+3E8h]
		mov	ecx, [edx+3E0h]
		mov	[ebp+var_4C], ecx

loc_62B932E7:				; CODE XREF: silc_client_private_message+2F8j
					; silc_client_private_message+305j
		mov	[esp+0A8h+var_78], 0
		mov	[esp+0A8h+var_7C], 0
		mov	[esp+0A8h+var_80], 0
		mov	cl, [ebx+21h]
		and	ecx, 3Fh
		mov	[esp+0A8h+var_84], ecx
		mov	edi, [ebx+1Ch]
		mov	[esp+0A8h+var_88], edi
		mov	cl, [ebx+20h]
		and	ecx, 3Fh
		mov	[esp+0A8h+var_8C], ecx
		mov	edi, [ebx+18h]
		mov	[esp+0A8h+var_90], edi
		mov	[esp+0A8h+var_94], eax
		mov	edi, [ebp+var_4C]
		mov	[esp+0A8h+var_98], edi
		mov	al, [edx+402h]
		shr	al, 1
		xor	eax, 1
		and	eax, 1
		mov	[esp+0A8h+var_9C], eax
		mov	[esp+0A8h+var_A0], 1
		mov	eax, [ebx+10h]
		sub	eax, [ebx+0Ch]
		mov	[esp+0A8h+var_A4], eax
		mov	eax, [ebx+0Ch]
		mov	[esp+0A8h+var_A8], eax
		mov	[ebp+var_58], edx
		call	silc_message_payload_parse
		mov	[ebp+var_4C], eax
		test	eax, eax
		mov	edx, [ebp+var_58]
		jz	loc_62B93553
		mov	[esp+0A8h+var_A8], eax
		call	silc_message_get_flags
		mov	edi, eax
		lea	eax, [ebp+var_1C]
		mov	[esp+0A8h+var_A4], eax
		mov	ecx, [ebp+var_4C]
		mov	[esp+0A8h+var_A8], ecx
		call	silc_message_get_data
		mov	ecx, eax
		movzx	edi, di
		mov	eax, [ebp+var_54]
		mov	eax, [eax+18h]
		mov	eax, [eax+48h]
		mov	[ebp+var_50], eax
		mov	eax, [ebp+var_1C]
		mov	[esp+0A8h+var_90], eax
		mov	[esp+0A8h+var_94], ecx
		mov	[esp+0A8h+var_98], edi
		mov	ecx, [ebp+var_4C]
		mov	[esp+0A8h+var_9C], ecx
		mov	edx, [ebp+var_58]
		mov	[esp+0A8h+var_A0], edx
		mov	eax, [ebp+arg_4]
		mov	[esp+0A8h+var_A4], eax
		mov	ecx, [ebp+var_54]
		mov	[esp+0A8h+var_A8], ecx
		mov	eax, [ebp+var_50]
		call	dword ptr [eax+8]
		mov	ecx, [ebp+arg_4]
		mov	eax, [ecx+54h]
		mov	eax, [eax+110h]
		mov	[ebp+var_50], eax
		test	eax, eax
		mov	edx, [ebp+var_58]
		jz	short loc_62B933E4
		and	edi, 2
		jz	short loc_62B93424

loc_62B933E4:				; CODE XREF: silc_client_private_message+195j
					; silc_client_private_message+1E6j ...
		mov	[esp+0A8h+var_A8], ebx
		mov	[ebp+var_58], edx
		call	silc_packet_free
		mov	edx, [ebp+var_58]
		mov	[esp+0A8h+var_A0], edx
		mov	ecx, [ebp+arg_4]
		mov	[esp+0A8h+var_A4], ecx
		mov	edi, [ebp+var_54]
		mov	[esp+0A8h+var_A8], edi
		call	silc_client_unref_client
		mov	eax, [ebp+var_4C]
		mov	[esp+0A8h+var_A8], eax
		call	silc_message_payload_free
		mov	eax, 3

loc_62B93418:				; CODE XREF: silc_client_private_message+2E0j
					; silc_client_private_message+334j
		add	esp, 9Ch
		pop	ebx
		pop	esi
		pop	edi
		leave
		retn
; ---------------------------------------------------------------------------
		align 4

loc_62B93424:				; CODE XREF: silc_client_private_message+19Aj
		mov	edi, [ecx+4]
		mov	ecx, 1Dh
		repe cmpsb
		jz	short loc_62B933E4
		xor	eax, eax
		mov	ecx, 0FFFFFFFFh
		mov	edi, [ebp+var_50]
		repne scasb
		not	ecx
		dec	ecx
		mov	[esp+0A8h+var_90], ecx
		mov	edi, [ebp+var_50]
		mov	[esp+0A8h+var_94], edi
		mov	[esp+0A8h+var_98], 0
		mov	[esp+0A8h+var_9C], 3
		mov	[esp+0A8h+var_A0], edx
		mov	eax, [ebp+arg_4]
		mov	[esp+0A8h+var_A4], eax
		mov	ecx, [ebp+var_54]
		mov	[esp+0A8h+var_A8], ecx
		call	silc_client_send_private_message
		mov	edx, [ebp+var_58]
		jmp	loc_62B933E4
; ---------------------------------------------------------------------------

loc_62B93478:				; CODE XREF: silc_client_private_message+77j
					; silc_client_private_message+80j
		mov	[esp+0A8h+var_A0], edx
		mov	ecx, [ebp+arg_4]
		mov	[esp+0A8h+var_A4], ecx
		mov	eax, [ebp+var_54]
		mov	[esp+0A8h+var_A8], eax
		call	silc_client_unref_client
		mov	al, [edi+28h]
		mov	dl, al
		or	edx, 4
		mov	[edi+28h], dl
		test	al, 4
		jnz	short loc_62B934E8

loc_62B9349D:				; CODE XREF: silc_client_private_message+2CCj
		mov	[esp+0A8h+var_94], edi
		mov	[esp+0A8h+var_98], offset sub_62B93000
		mov	[esp+0A8h+var_9C], 0
		mov	[esp+0A8h+var_A0], esi
		mov	ecx, [ebp+arg_4]
		mov	[esp+0A8h+var_A4], ecx
		mov	eax, [ebp+var_54]
		mov	[esp+0A8h+var_A8], eax
		call	silc_client_get_client_by_id_resolve
		mov	dl, [edi+28h]
		mov	al, dl
		shr	al, 2
		and	edx, 0FFFFFFFBh
		mov	[edi+28h], dl
		shl	eax, 1
		and	eax, 2
		add	esp, 9Ch
		pop	ebx
		pop	esi
		pop	edi
		leave
		retn
; ---------------------------------------------------------------------------
		align 4

loc_62B934E8:				; CODE XREF: silc_client_private_message+253j
		mov	[esp+0A8h+var_A0], 88h
		mov	[esp+0A8h+var_A4], offset aClient_prvmsg_ ; "client_prvmsg.c"
		mov	[esp+0A8h+var_A8], offset aSilc_verifyS_4 ; "SILC_VERIFY %s:%d"
		call	silc_format
		mov	[esp+0A8h+var_A4], eax
		mov	[esp+0A8h+var_A8], 3
		call	silc_log_output
		jmp	short loc_62B9349D
; ---------------------------------------------------------------------------

loc_62B93516:				; CODE XREF: silc_client_private_message+26j
					; silc_client_private_message+57j
		mov	[esp+0A8h+var_A4], offset silc_client_private_message_error
		mov	[esp+0A8h+var_A8], edi
		call	silc_fsm_next
		xor	eax, eax
		jmp	loc_62B93418
; ---------------------------------------------------------------------------

loc_62B9352D:				; CODE XREF: silc_client_private_message+8Aj
		mov	edi, [eax+3E0h]
		mov	[ebp+var_4C], edi
		test	edi, edi
		jz	short loc_62B93545
		mov	eax, [eax+3E8h]
		jmp	loc_62B932E7
; ---------------------------------------------------------------------------

loc_62B93545:				; CODE XREF: silc_client_private_message+2F0j
		mov	eax, [eax+3E8h]
		test	eax, eax
		jnz	loc_62B932E7

loc_62B93553:				; CODE XREF: silc_client_private_message+11Ej
		mov	[esp+0A8h+var_A8], ebx
		mov	[ebp+var_58], edx
		call	silc_packet_free
		mov	edx, [ebp+var_58]
		mov	[esp+0A8h+var_A0], edx
		mov	edi, [ebp+arg_4]
		mov	[esp+0A8h+var_A4], edi
		mov	eax, [ebp+var_54]
		mov	[esp+0A8h+var_A8], eax
		call	silc_client_unref_client
		mov	eax, 3
		jmp	loc_62B93418
silc_client_private_message endp

; ---------------------------------------------------------------------------
		align 4
; Exported entry 218. silc_client_st_resume_error

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public silc_client_st_resume_error
silc_client_st_resume_error proc near	; DATA XREF: silc_client_st_resume_completed:loc_62B93988o
					; silc_client_st_resume:loc_62B93BE0o ...

var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		push	esi
		push	ebx
		sub	esp, 10h
		mov	esi, [ebp+arg_4]
		mov	ebx, [ebp+arg_8]
		mov	eax, [esi+54h]
		mov	dl, [eax+12Dh]
		test	dl, 2
		jnz	short loc_62B935E8
		mov	dword ptr [eax+128h], 3
		or	edx, 2
		mov	[eax+12Dh], dl
		mov	eax, [esi+54h]
		add	eax, 98h
		mov	[esp+18h+var_18], eax
		call	silc_fsm_event_signal
		mov	eax, [esi+54h]
		mov	[esp+18h+var_C], esi
		mov	[esp+18h+var_10], offset silc_client_connect_timeout
		mov	[esp+18h+var_14], 0
		mov	eax, [eax+0B4h]
		mov	[esp+18h+var_18], eax
		call	silc_schedule_task_del_by_all

loc_62B935E8:				; CODE XREF: silc_client_st_resume_error+1Aj
		test	ebx, ebx
		jz	short loc_62B935FF
		mov	eax, [ebx+18h]
		mov	[esp+18h+var_18], eax
		call	silc_free
		mov	[esp+18h+var_18], ebx
		call	silc_free

loc_62B935FF:				; CODE XREF: silc_client_st_resume_error+66j
		mov	eax, 3
		add	esp, 10h
		pop	ebx
		pop	esi
		leave
		retn
silc_client_st_resume_error endp

; ---------------------------------------------------------------------------
		align 4
; Exported entry 214. silc_client_st_register_error

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public silc_client_st_register_error
silc_client_st_register_error proc near	; DATA XREF: silc_client_st_register:loc_62B93D4Co
					; silc_client_st_register_complete:loc_62B93F0Co

var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		push	ebx
		sub	esp, 14h
		mov	ebx, [ebp+arg_4]
		mov	eax, [ebx+54h]
		mov	dword ptr [eax+128h], 3
		mov	dl, [eax+12Dh]
		test	dl, 2
		jnz	short loc_62B93647
		or	edx, 2
		mov	[eax+12Dh], dl
		add	eax, 98h
		mov	[esp+18h+var_18], eax
		call	silc_fsm_event_signal
		mov	eax, [ebx+54h]

loc_62B93647:				; CODE XREF: silc_client_st_register_error+20j
		mov	[esp+18h+var_C], ebx
		mov	[esp+18h+var_10], offset silc_client_connect_timeout
		mov	[esp+18h+var_14], 0
		mov	eax, [eax+0B4h]
		mov	[esp+18h+var_18], eax
		call	silc_schedule_task_del_by_all
		mov	eax, 3
		add	esp, 14h
		pop	ebx
		leave
		retn
silc_client_st_register_error endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_62B93674	proc near		; CODE XREF: silc_client_st_resume_completed+135p
					; silc_client_st_resume_completed+21Cp	...

var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= byte ptr  10h
arg_C		= byte ptr  14h

		push	ebp
		mov	ebp, esp
		sub	esp, 28h
		mov	eax, [ebp+arg_0]
		lea	ecx, [ebp+arg_C]
		mov	edx, [eax+18h]
		mov	edx, [edx+48h]
		mov	[esp+28h+var_14], ecx
		mov	[esp+28h+var_18], 0
		mov	[esp+28h+var_1C], 0
		movzx	ecx, [ebp+arg_8]
		mov	[esp+28h+var_20], ecx
		mov	ecx, [ebp+arg_4]
		mov	[esp+28h+var_24], ecx
		mov	[esp+28h+var_28], eax
		call	dword ptr [edx+14h]
		leave
		retn
sub_62B93674	endp

; ---------------------------------------------------------------------------
		align 4
; Exported entry 217. silc_client_st_resume_completed

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public silc_client_st_resume_completed
silc_client_st_resume_completed	proc near
					; DATA XREF: silc_client_st_resume_resolve_cmodes+22o

var_88		= dword	ptr -88h
var_84		= dword	ptr -84h
var_80		= dword	ptr -80h
var_7C		= dword	ptr -7Ch
var_78		= dword	ptr -78h
var_74		= dword	ptr -74h
var_70		= dword	ptr -70h
var_6C		= dword	ptr -6Ch
var_68		= dword	ptr -68h
var_64		= dword	ptr -64h
var_60		= dword	ptr -60h
var_5C		= dword	ptr -5Ch
var_58		= dword	ptr -58h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_30		= dword	ptr -30h
var_2C		= word ptr -2Ch
var_2A		= word ptr -2Ah
var_28		= byte ptr -28h
var_24		= byte ptr -24h
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		sub	esp, 7Ch
		mov	esi, [ebp+arg_4]
		mov	eax, [esi+4Ch]
		mov	[ebp+var_3C], eax
		mov	eax, [esi+54h]
		test	byte ptr [eax+12Dh], 2
		jnz	loc_62B93988
		mov	ecx, [ebp+arg_8]
		mov	edx, [ecx+1Ch]
		test	edx, edx
		jz	short loc_62B936EC
		dec	edx
		mov	[ecx+1Ch], edx
		test	edx, edx
		jnz	loc_62B939A8

loc_62B936EC:				; CODE XREF: silc_client_st_resume_completed+2Aj
		mov	eax, [eax+0F4h]
		mov	edx, [eax+4]
		mov	eax, [eax+8]
		sub	eax, edx
		mov	[esp+88h+var_68], eax
		mov	[esp+88h+var_6C], edx
		mov	[esp+88h+var_70], 5
		mov	[esp+88h+var_74], 1
		mov	[esp+88h+var_78], 0
		mov	[esp+88h+var_7C], offset silc_client_command_called_dummy
		mov	[esp+88h+var_80], 3
		mov	[esp+88h+var_84], esi
		mov	eax, [ebp+var_3C]
		mov	[esp+88h+var_88], eax
		call	silc_client_command_send
		mov	eax, [esi+54h]
		mov	eax, [eax+0F8h]
		mov	edx, [eax+4]
		mov	eax, [eax+8]
		sub	eax, edx
		mov	[esp+88h+var_68], eax
		mov	[esp+88h+var_6C], edx
		mov	[esp+88h+var_70], 2
		mov	[esp+88h+var_74], 1
		mov	[esp+88h+var_78], 0
		mov	[esp+88h+var_7C], offset silc_client_command_called_dummy
		mov	[esp+88h+var_80], 0Ah
		mov	[esp+88h+var_84], esi
		mov	edx, [ebp+var_3C]
		mov	[esp+88h+var_88], edx
		call	silc_client_command_send
		mov	eax, [esi+48h]
		mov	[esp+88h+var_74], eax
		mov	[esp+88h+var_78], 0
		mov	[esp+88h+var_7C], 0
		mov	[esp+88h+var_80], 1
		mov	[esp+88h+var_84], esi
		mov	ecx, [ebp+var_3C]
		mov	[esp+88h+var_88], ecx
		call	dword ptr [esi+44h]
		mov	eax, [esi]
		mov	edx, [eax+3ACh]
		test	edx, edx
		jnz	loc_62B939B8

loc_62B937C5:				; CODE XREF: silc_client_st_resume_completed+321j
		lea	edx, [eax+38Ch]
		mov	[esp+88h+var_74], edx
		mov	[esp+88h+var_78], eax
		mov	[esp+88h+var_7C], eax
		mov	[esp+88h+var_80], 4
		mov	[esp+88h+var_84], esi
		mov	edx, [ebp+var_3C]
		mov	[esp+88h+var_88], edx
		call	sub_62B93674
		lea	eax, [ebp+var_38]
		mov	[esp+88h+var_84], eax
		mov	eax, [esi+54h]
		mov	eax, [eax+118h]
		mov	[esp+88h+var_88], eax
		call	silc_idcache_get_all
		test	al, al
		jz	loc_62B93913
		mov	eax, [ebp+var_38]
		mov	[ebp+var_30], eax
		and	[ebp+var_28], 0FDh
		lea	edi, [ebp+var_24]
		mov	[ebp+var_40], esi
		jmp	loc_62B938E0
; ---------------------------------------------------------------------------
		align 4

loc_62B93824:				; CODE XREF: silc_client_st_resume_completed+234j
		movzx	edx, [ebp+var_2A]
		mov	edx, [eax+edx]
		mov	[ebp+var_30], edx
		mov	ebx, [eax+0Ch]
		mov	eax, [ebx+158h]
		test	eax, eax
		jz	loc_62B93909

loc_62B9383F:				; CODE XREF: silc_client_st_resume_completed+24Fj
		mov	[esp+88h+var_88], eax
		call	silc_cipher_get_name
		mov	esi, eax

loc_62B93849:				; CODE XREF: silc_client_st_resume_completed+257j
		mov	eax, [ebx+160h]
		test	eax, eax
		jz	short loc_62B9385B
		mov	[esp+88h+var_88], eax
		call	silc_hmac_get_name

loc_62B9385B:				; CODE XREF: silc_client_st_resume_completed+19Dj
		mov	[esp+88h+var_84], edi
		mov	edx, [ebx+134h]
		mov	[esp+88h+var_88], edx
		mov	[ebp+var_44], eax
		call	silc_hash_table_list
		mov	edx, [ebx+130h]
		mov	[esp+88h+var_58], edx
		mov	edx, [ebx+110h]
		mov	[esp+88h+var_5C], edx
		mov	edx, [ebx+10Ch]
		mov	[esp+88h+var_60], edx
		mov	eax, [ebp+var_44]
		mov	[esp+88h+var_64], eax
		mov	[esp+88h+var_68], esi
		mov	eax, [ebx+108h]
		mov	[esp+88h+var_6C], eax
		mov	[esp+88h+var_70], edi
		mov	eax, [ebx+12Ch]
		mov	[esp+88h+var_74], eax
		mov	[esp+88h+var_78], ebx
		mov	eax, [ebx]
		mov	[esp+88h+var_7C], eax
		mov	[esp+88h+var_80], 0Eh
		mov	ecx, [ebp+var_40]
		mov	[esp+88h+var_84], ecx
		mov	eax, [ebp+var_3C]
		mov	[esp+88h+var_88], eax
		call	sub_62B93674
		mov	[esp+88h+var_88], edi
		call	silc_hash_table_list_reset
		mov	eax, [ebp+var_30]

loc_62B938E0:				; CODE XREF: silc_client_st_resume_completed+16Aj
		test	eax, eax
		jz	short loc_62B93910
		test	[ebp+var_28], 2
		jnz	loc_62B93824
		movzx	edx, [ebp+var_2C]
		mov	edx, [eax+edx]
		mov	[ebp+var_30], edx
		mov	ebx, [eax+0Ch]
		mov	eax, [ebx+158h]
		test	eax, eax
		jnz	loc_62B9383F

loc_62B93909:				; CODE XREF: silc_client_st_resume_completed+185j
		xor	esi, esi
		jmp	loc_62B93849
; ---------------------------------------------------------------------------

loc_62B93910:				; CODE XREF: silc_client_st_resume_completed+22Ej
		mov	esi, [ebp+var_40]

loc_62B93913:				; CODE XREF: silc_client_st_resume_completed+154j
		mov	eax, [esi+54h]
		and	byte ptr [eax+12Dh], 0DFh
		mov	[esp+88h+var_7C], esi
		mov	[esp+88h+var_80], offset silc_client_connect_timeout
		mov	[esp+88h+var_84], 0
		mov	eax, [esi+54h]
		mov	eax, [eax+0B4h]
		mov	[esp+88h+var_88], eax
		call	silc_schedule_task_del_by_all
		mov	edx, [ebp+arg_8]
		mov	eax, [edx+18h]
		mov	[esp+88h+var_88], eax
		call	silc_free
		mov	ecx, [ebp+arg_8]
		mov	[esp+88h+var_88], ecx
		call	silc_free
		mov	eax, [esi+54h]
		mov	eax, [eax+100h]
		mov	[esp+88h+var_88], eax
		call	silc_async_free
		mov	eax, [esi+54h]
		mov	dword ptr [eax+100h], 0
		mov	eax, 3
		add	esp, 7Ch
		pop	ebx
		pop	esi
		pop	edi
		leave
		retn
; ---------------------------------------------------------------------------
		align 4

loc_62B93988:				; CODE XREF: silc_client_st_resume_completed+1Cj
		mov	[esp+88h+var_84], offset silc_client_st_resume_error
		mov	eax, [ebp+arg_0]
		mov	[esp+88h+var_88], eax
		call	silc_fsm_next
		xor	eax, eax
		add	esp, 7Ch
		pop	ebx
		pop	esi
		pop	edi
		leave
		retn
; ---------------------------------------------------------------------------
		align 4

loc_62B939A8:				; CODE XREF: silc_client_st_resume_completed+32j
		mov	eax, 2
		add	esp, 7Ch
		pop	ebx
		pop	esi
		pop	edi
		leave
		retn
; ---------------------------------------------------------------------------
		align 4

loc_62B939B8:				; CODE XREF: silc_client_st_resume_completed+10Bj
		mov	[esp+88h+var_7C], edx
		mov	[esp+88h+var_80], 10h
		mov	[esp+88h+var_84], esi
		mov	eax, [ebp+var_3C]
		mov	[esp+88h+var_88], eax
		call	sub_62B93674
		mov	eax, [esi]
		jmp	loc_62B937C5
silc_client_st_resume_completed	endp

; ---------------------------------------------------------------------------
		align 4

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_62B939DC	proc near		; DATA XREF: silc_client_st_resume_resolve_cmodes+C0o
					; silc_client_st_resume_resolve_cmodes+100o ...

var_18		= dword	ptr -18h
arg_4		= dword	ptr  0Ch
arg_C		= byte ptr  14h

		push	ebp
		mov	ebp, esp
		sub	esp, 18h
		mov	al, [ebp+arg_C]
		test	al, al
		jz	short loc_62B939F1
		cmp	al, 3
		jz	short loc_62B939F1
		cmp	al, 9
		jbe	short loc_62B93A08

loc_62B939F1:				; CODE XREF: sub_62B939DC+Bj
					; sub_62B939DC+Fj
		mov	eax, [ebp+arg_4]
		mov	eax, [eax+54h]
		add	eax, 6Ch
		mov	[esp+18h+var_18], eax
		call	silc_fsm_continue
		xor	eax, eax
		leave
		retn
; ---------------------------------------------------------------------------
		align 4

loc_62B93A08:				; CODE XREF: sub_62B939DC+13j
		mov	al, 1
		leave
		retn
sub_62B939DC	endp

; Exported entry 216. silc_client_st_resume

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public silc_client_st_resume
silc_client_st_resume proc near		; DATA XREF: silc_client_st_connected:loc_62B86380o

var_98		= dword	ptr -98h
var_94		= dword	ptr -94h
var_90		= dword	ptr -90h
var_8C		= dword	ptr -8Ch
var_88		= dword	ptr -88h
var_84		= dword	ptr -84h
var_80		= dword	ptr -80h
var_7C		= dword	ptr -7Ch
var_78		= dword	ptr -78h
var_74		= dword	ptr -74h
var_70		= dword	ptr -70h
var_6C		= dword	ptr -6Ch
var_68		= dword	ptr -68h
var_4C		= dword	ptr -4Ch
var_3D		= byte ptr -3Dh
var_20		= dword	ptr -20h
var_1A		= word ptr -1Ah
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		sub	esp, 8Ch
		mov	esi, [ebp+arg_0]
		mov	ebx, [ebp+arg_4]
		mov	eax, [ebx+4Ch]
		mov	[ebp+var_4C], eax
		mov	[esp+98h+var_94], 20h
		mov	[esp+98h+var_98], 1
		call	silc_calloc
		mov	edi, eax
		test	eax, eax
		jz	loc_62B93BE0
		mov	[esp+98h+var_94], eax
		mov	[esp+98h+var_98], esi
		call	silc_fsm_set_state_context
		mov	eax, [ebx+54h]
		mov	edx, [eax+2Ch]
		mov	eax, [eax+28h]
		mov	[edi+8], eax
		mov	[edi+0Ch], eax
		add	eax, edx
		mov	[edi+14h], eax
		mov	[edi+10h], eax
		mov	[esp+98h+var_68], 1Dh
		lea	eax, [edi+1Ch]
		mov	[esp+98h+var_6C], eax
		mov	[esp+98h+var_70], 5
		mov	[esp+98h+var_74], 0
		mov	[esp+98h+var_78], 5
		lea	eax, [ebp+var_1A]
		mov	[esp+98h+var_7C], eax
		lea	eax, [ebp+var_20]
		mov	[esp+98h+var_80], eax
		mov	[esp+98h+var_84], 0Eh
		mov	[esp+98h+var_88], 0
		lea	eax, [edi+18h]
		mov	[esp+98h+var_8C], eax
		mov	[esp+98h+var_90], 14h
		mov	[esp+98h+var_94], 19h
		add	edi, 8
		mov	[esp+98h+var_98], edi
		call	silc_buffer_unformat
		test	eax, eax
		js	loc_62B93BE0
		mov	[esp+98h+var_88], 1Dh
		lea	edi, [ebp+var_3D]
		mov	[esp+98h+var_8C], edi
		mov	[esp+98h+var_90], 2
		movzx	eax, [ebp+var_1A]
		mov	[esp+98h+var_94], eax
		mov	eax, [ebp+var_20]
		mov	[esp+98h+var_98], eax
		call	silc_id_str2id
		test	al, al
		jz	loc_62B93BE0
		mov	[esp+98h+var_84], 2
		mov	[esp+98h+var_88], edi
		mov	eax, [ebx+54h]
		mov	eax, [eax+0ECh]
		mov	[esp+98h+var_8C], eax
		mov	edx, [ebp+var_4C]
		mov	eax, [edx+10h]
		mov	[esp+98h+var_90], eax
		mov	eax, [ebx+38h]
		mov	[esp+98h+var_94], eax
		mov	eax, [ebx+34h]
		mov	[esp+98h+var_98], eax
		call	silc_auth_public_key_auth_generate
		test	eax, eax
		jz	loc_62B93BE0
		mov	ecx, [eax+4]
		movzx	edx, [ebp+var_1A]
		mov	[esp+98h+var_6C], 1Dh
		mov	eax, [eax+8]
		sub	eax, ecx
		mov	[esp+98h+var_70], eax
		mov	[esp+98h+var_74], ecx
		mov	[esp+98h+var_78], 0Ch
		mov	[esp+98h+var_7C], edx
		mov	eax, [ebp+var_20]
		mov	[esp+98h+var_80], eax
		mov	[esp+98h+var_84], 0Ch
		mov	[esp+98h+var_88], edx
		mov	[esp+98h+var_8C], 3
		mov	[esp+98h+var_90], 0
		mov	[esp+98h+var_94], 1Ch
		mov	eax, [ebx+3Ch]
		mov	[esp+98h+var_98], eax
		call	silc_packet_send_va
		test	al, al
		jz	short loc_62B93BE0
		mov	eax, [ebx+54h]
		or	byte ptr [eax+12Dh], 20h
		mov	[esp+98h+var_8C], 0
		mov	[esp+98h+var_90], 0Fh
		mov	[esp+98h+var_94], offset silc_client_st_resume_resolve_channels
		mov	[esp+98h+var_98], esi
		call	silc_fsm_next_later
		mov	eax, 2
		add	esp, 8Ch
		pop	ebx
		pop	esi
		pop	edi
		leave
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_62B93BE0:				; CODE XREF: silc_client_st_resume+30j
					; silc_client_st_resume+C2j ...
		mov	[esp+98h+var_94], offset silc_client_st_resume_error
		mov	[esp+98h+var_98], esi
		call	silc_fsm_next
		xor	eax, eax
		add	esp, 8Ch
		pop	ebx
		pop	esi
		pop	edi
		leave
		retn
silc_client_st_resume endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 212. silc_client_st_register

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public silc_client_st_register
silc_client_st_register	proc near	; DATA XREF: silc_client_st_connected:loc_62B86362o
					; silc_client_st_register_complete:loc_62B93F48o

var_88		= dword	ptr -88h
var_84		= dword	ptr -84h
var_80		= dword	ptr -80h
var_7C		= dword	ptr -7Ch
var_78		= dword	ptr -78h
var_74		= dword	ptr -74h
var_70		= dword	ptr -70h
var_6C		= dword	ptr -6Ch
var_68		= dword	ptr -68h
var_64		= dword	ptr -64h
var_60		= dword	ptr -60h
var_5C		= dword	ptr -5Ch
var_58		= dword	ptr -58h
var_54		= dword	ptr -54h
var_50		= dword	ptr -50h
var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		sub	esp, 7Ch
		mov	ebx, [ebp+arg_4]
		mov	edx, [ebx+4Ch]
		mov	eax, [ebx+54h]
		cmp	dword ptr [eax+120h], 0Ch
		jbe	short loc_62B93C44
		mov	eax, [eax]
		mov	[ebp+var_1C], eax
		test	eax, eax
		jz	loc_62B93D6C
		mov	esi, [edx]

loc_62B93C2A:				; CODE XREF: silc_client_st_register+173j
		xor	eax, eax
		mov	ecx, 0FFFFFFFFh
		mov	edi, [ebp+var_1C]
		repne scasb
		not	ecx
		dec	ecx
		mov	[ebp+var_20], ecx
		mov	[ebp+var_2C], ecx
		jmp	short loc_62B93C5B
; ---------------------------------------------------------------------------
		align 4

loc_62B93C44:				; CODE XREF: silc_client_st_register+19j
		mov	esi, [edx]

loc_62B93C46:				; CODE XREF: silc_client_st_register+179j
		mov	[ebp+var_2C], 0
		mov	[ebp+var_1C], 0
		mov	[ebp+var_20], 0

loc_62B93C5B:				; CODE XREF: silc_client_st_register+3Fj
		mov	edx, [edx+8]
		mov	[ebp+var_28], edx
		mov	edx, 0FFFFFFFFh
		xor	eax, eax
		mov	ecx, edx
		mov	edi, [ebp+var_28]
		repne scasb
		not	ecx
		dec	ecx
		mov	[ebp+var_24], ecx
		mov	ecx, edx
		mov	edi, esi
		repne scasb
		mov	edx, ecx
		not	edx
		dec	edx
		mov	[esp+88h+var_40], 1Dh
		mov	eax, [ebp+var_2C]
		mov	[esp+88h+var_44], eax
		mov	ecx, [ebp+var_1C]
		mov	[esp+88h+var_48], ecx
		mov	[esp+88h+var_4C], 0Ch
		mov	eax, [ebp+var_20]
		mov	[esp+88h+var_50], eax
		mov	[esp+88h+var_54], 3
		mov	ecx, [ebp+var_24]
		mov	[esp+88h+var_58], ecx
		mov	eax, [ebp+var_28]
		mov	[esp+88h+var_5C], eax
		mov	[esp+88h+var_60], 0Ch
		mov	[esp+88h+var_64], ecx
		mov	[esp+88h+var_68], 3
		mov	[esp+88h+var_6C], edx
		mov	[esp+88h+var_70], esi
		mov	[esp+88h+var_74], 0Ch
		mov	[esp+88h+var_78], edx
		mov	[esp+88h+var_7C], 3
		mov	[esp+88h+var_80], 0
		mov	[esp+88h+var_84], 13h
		mov	eax, [ebx+3Ch]
		mov	[esp+88h+var_88], eax
		call	silc_packet_send_va
		test	al, al
		jz	short loc_62B93D4C
		mov	eax, [ebx+54h]
		or	byte ptr [eax+12Dh], 20h
		mov	[esp+88h+var_7C], 0
		mov	eax, [ebx+54h]
		movzx	eax, byte ptr [eax+127h]
		mov	[esp+88h+var_80], eax
		mov	[esp+88h+var_84], offset silc_client_st_register_complete
		mov	eax, [ebp+arg_0]
		mov	[esp+88h+var_88], eax
		call	silc_fsm_next_later
		mov	eax, 2
		add	esp, 7Ch
		pop	ebx
		pop	esi
		pop	edi
		leave
		retn
; ---------------------------------------------------------------------------
		align 4

loc_62B93D4C:				; CODE XREF: silc_client_st_register+108j
		mov	[esp+88h+var_84], offset silc_client_st_register_error
		mov	ecx, [ebp+arg_0]
		mov	[esp+88h+var_88], ecx
		call	silc_fsm_next
		xor	eax, eax
		add	esp, 7Ch
		pop	ebx
		pop	esi
		pop	edi
		leave
		retn
; ---------------------------------------------------------------------------
		align 4

loc_62B93D6C:				; CODE XREF: silc_client_st_register+22j
		mov	esi, [edx]
		mov	[ebp+var_1C], esi
		test	esi, esi
		jnz	loc_62B93C2A
		jmp	loc_62B93C46
silc_client_st_register	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 213. silc_client_st_register_complete

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public silc_client_st_register_complete
silc_client_st_register_complete proc near ; DATA XREF:	silc_client_st_register+12Ao

var_58		= dword	ptr -58h
var_54		= dword	ptr -54h
var_50		= dword	ptr -50h
var_4C		= dword	ptr -4Ch
var_48		= byte ptr -48h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_19		= byte ptr -19h
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		sub	esp, 4Ch
		mov	ebx, [ebp+arg_4]
		mov	esi, [ebx+4Ch]
		mov	eax, [ebx+54h]
		test	byte ptr [eax+12Dh], 2
		jnz	loc_62B93F0C
		mov	edx, [ebx+4]
		test	edx, edx
		jz	loc_62B93ED8
		mov	eax, [eax+0F4h]
		mov	edx, [eax+4]
		mov	eax, [eax+8]
		sub	eax, edx
		mov	[esp+58h+var_38], eax
		mov	[esp+58h+var_3C], edx
		mov	[esp+58h+var_40], 5
		mov	[esp+58h+var_44], 1
		mov	dword ptr [esp+58h+var_48], 0
		mov	[esp+58h+var_4C], offset silc_client_command_called_dummy
		mov	[esp+58h+var_50], 3
		mov	[esp+58h+var_54], ebx
		mov	[esp+58h+var_58], esi
		call	silc_client_command_send
		mov	eax, [ebx+54h]
		mov	edx, [eax]
		test	edx, edx
		jz	short loc_62B93E0A
		cmp	dword ptr [eax+120h], 0Ch
		jbe	loc_62B93F2C

loc_62B93E0A:				; CODE XREF: silc_client_st_register_complete+7Bj
					; silc_client_st_register_complete+1C1j
		mov	eax, [eax+0F8h]
		mov	edx, [eax+4]
		mov	eax, [eax+8]
		sub	eax, edx
		mov	[esp+58h+var_38], eax
		mov	[esp+58h+var_3C], edx
		mov	[esp+58h+var_40], 2
		mov	[esp+58h+var_44], 1
		mov	dword ptr [esp+58h+var_48], 0
		mov	[esp+58h+var_4C], offset silc_client_command_called_dummy
		mov	[esp+58h+var_50], 0Ah
		mov	[esp+58h+var_54], ebx
		mov	[esp+58h+var_58], esi
		call	silc_client_command_send
		mov	eax, [ebx+48h]
		mov	[esp+58h+var_44], eax
		mov	dword ptr [esp+58h+var_48], 0
		mov	[esp+58h+var_4C], 0
		mov	[esp+58h+var_50], 0
		mov	[esp+58h+var_54], ebx
		mov	[esp+58h+var_58], esi
		call	dword ptr [ebx+44h]
		mov	eax, [ebx+54h]
		and	byte ptr [eax+12Dh], 0DFh
		mov	[esp+58h+var_4C], ebx
		mov	[esp+58h+var_50], offset silc_client_connect_timeout
		mov	[esp+58h+var_54], 0
		mov	eax, [ebx+54h]
		mov	eax, [eax+0B4h]
		mov	[esp+58h+var_58], eax
		call	silc_schedule_task_del_by_all
		mov	eax, [ebx+54h]
		mov	eax, [eax+100h]
		mov	[esp+58h+var_58], eax
		call	silc_async_free
		mov	eax, [ebx+54h]
		mov	dword ptr [eax+100h], 0
		mov	eax, 3

loc_62B93ECF:				; CODE XREF: silc_client_st_register_complete+202j
		add	esp, 4Ch
		pop	ebx
		pop	esi
		pop	edi
		leave
		retn
; ---------------------------------------------------------------------------
		align 4

loc_62B93ED8:				; CODE XREF: silc_client_st_register_complete+24j
		mov	cl, [eax+126h]
		lea	edi, [ecx+1]
		mov	edx, edi
		mov	[eax+126h], dl
		cmp	cl, 3
		jbe	short loc_62B93F48
		mov	eax, [ebx+54h]
		and	byte ptr [eax+12Dh], 0DFh
		mov	eax, [ebx+54h]
		mov	byte ptr [eax+126h], 0
		mov	eax, [ebx+54h]
		mov	byte ptr [eax+127h], 1

loc_62B93F0C:				; CODE XREF: silc_client_st_register_complete+19j
		mov	[esp+58h+var_54], offset silc_client_st_register_error
		mov	eax, [ebp+arg_0]
		mov	[esp+58h+var_58], eax
		call	silc_fsm_next
		xor	eax, eax
		add	esp, 4Ch
		pop	ebx
		pop	esi
		pop	edi
		leave
		retn
; ---------------------------------------------------------------------------
		align 4

loc_62B93F2C:				; CODE XREF: silc_client_st_register_complete+84j
		mov	eax, [esi]
		mov	[esp+58h+var_54], eax
		mov	[esp+58h+var_58], edx
		call	silc_utf8_strcasecmp
		test	al, al
		jz	short loc_62B93F88

loc_62B93F3E:				; CODE XREF: silc_client_st_register_complete+235j
		mov	eax, [ebx+54h]
		jmp	loc_62B93E0A
; ---------------------------------------------------------------------------
		align 4

loc_62B93F48:				; CODE XREF: silc_client_st_register_complete+16Cj
		mov	[esp+58h+var_54], offset silc_client_st_register
		mov	edx, [ebp+arg_0]
		mov	[esp+58h+var_58], edx
		call	silc_fsm_next
		mov	ebx, [ebx+54h]
		mov	al, [ebx+127h]
		shl	eax, 1
		mov	[ebp+var_19], al
		mov	eax, [esi+10h]
		mov	[esp+58h+var_58], eax
		call	silc_rng_get_rn16
		and	eax, 1
		add	al, [ebp+var_19]
		mov	[ebx+127h], al
		xor	eax, eax
		jmp	loc_62B93ECF
; ---------------------------------------------------------------------------
		align 4

loc_62B93F88:				; CODE XREF: silc_client_st_register_complete+1BCj
		mov	[esp+58h+var_44], 0
		mov	eax, [ebx+54h]
		mov	eax, [eax]
		mov	dword ptr [esp+58h+var_48], eax	; char
		mov	[esp+58h+var_4C], offset aNick ; "NICK"
		mov	[esp+58h+var_50], 0 ; char *
		mov	[esp+58h+var_54], ebx ;	int
		mov	[esp+58h+var_58], esi ;	int
		call	silc_client_command_call
		jmp	short loc_62B93F3E
silc_client_st_register_complete endp

; ---------------------------------------------------------------------------
		align 4
; Exported entry 157. silc_client_new_id

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public silc_client_new_id
silc_client_new_id proc	near		; DATA XREF: silc_client_connection_st_packet:loc_62B81F70o

var_68		= dword	ptr -68h
var_64		= dword	ptr -64h
var_60		= dword	ptr -60h
var_5C		= dword	ptr -5Ch
var_58		= dword	ptr -58h
var_54		= dword	ptr -54h
var_50		= dword	ptr -50h
var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		sub	esp, 5Ch
		mov	ebx, [ebp+arg_4]
		mov	edx, [ebp+arg_8]
		mov	esi, [ebx+4Ch]
		mov	ecx, [ebx+4]
		test	ecx, ecx
		jz	short loc_62B93FE8

loc_62B93FD1:				; CODE XREF: silc_client_new_id+53j
					; silc_client_new_id+9Aj ...
		mov	[esp+68h+var_68], edx
		call	silc_packet_free
		mov	eax, 3
		add	esp, 5Ch
		pop	ebx
		pop	esi
		pop	edi
		leave
		retn
; ---------------------------------------------------------------------------
		align 4

loc_62B93FE8:				; CODE XREF: silc_client_new_id+17j
		mov	ecx, [edx+0Ch]
		lea	edi, [ebp+var_38]
		mov	[esp+68h+var_60], edi
		mov	eax, [edx+10h]
		sub	eax, ecx
		mov	[esp+68h+var_64], eax
		mov	[esp+68h+var_68], ecx
		mov	[ebp+var_48], edx
		call	silc_id_payload_parse_id
		test	al, al
		mov	edx, [ebp+var_48]
		jz	short loc_62B93FD1
		mov	eax, [ebx+54h]
		cmp	dword ptr [eax+120h], 0Ch
		ja	loc_62B9415C

loc_62B9401D:				; CODE XREF: silc_client_new_id+1A8j
		mov	eax, [esi]
		mov	ecx, eax

loc_62B94021:				; CODE XREF: silc_client_new_id+1B0j
		mov	[esp+68h+var_50], 0 ; int
		mov	[esp+68h+var_54], edi ;	int
		mov	edi, [esi+8]
		mov	[esp+68h+var_58], edi ;	char *
		mov	[esp+68h+var_5C], ecx ;	int
		mov	[esp+68h+var_60], eax ;	int
		mov	[esp+68h+var_64], ebx ;	int
		mov	[esp+68h+var_68], esi ;	int
		mov	[ebp+var_48], edx
		call	silc_client_add_client
		mov	[ebx], eax
		test	eax, eax
		mov	edx, [ebp+var_48]
		jz	loc_62B93FD1
		add	eax, 38Ch
		mov	[ebx+4], eax
		mov	eax, [ebx+54h]
		mov	[ebp+var_44], eax
		mov	esi, [edx+10h]
		mov	edi, [edx+0Ch]
		mov	[esp+68h+var_64], 10h
		mov	[esp+68h+var_68], 1
		call	silc_calloc
		mov	[ebp+var_3C], eax
		test	eax, eax
		mov	edx, [ebp+var_48]
		jz	loc_62B941DA
		sub	esi, edi
		jz	loc_62B941CF
		mov	[esp+68h+var_64], 1
		mov	[esp+68h+var_68], esi
		call	silc_calloc
		mov	ecx, [ebp+var_3C]
		mov	[ecx], eax
		test	eax, eax
		mov	edx, [ebp+var_48]
		jz	loc_62B941DA
		mov	[ecx+4], eax
		mov	[ecx+8], eax
		lea	ecx, [eax+esi]
		mov	edi, [ebp+var_3C]
		mov	[edi+0Ch], ecx
		mov	edi, ecx
		sub	edi, eax
		cmp	esi, edi
		ja	short loc_62B940D5

loc_62B940CD:				; CODE XREF: silc_client_new_id+21Dj
		mov	eax, [ebp+var_3C]
		mov	[eax+8], ecx
		mov	eax, ecx

loc_62B940D5:				; CODE XREF: silc_client_new_id+113j
		mov	esi, [edx+0Ch]
		mov	ecx, [edx+10h]
		sub	ecx, esi
		mov	edi, [ebp+var_3C]
		mov	edi, [edi+4]
		mov	[ebp+var_40], edi
		sub	eax, edi
		cmp	ecx, eax
		ja	short loc_62B940F1
		mov	edi, [ebp+var_40]
		rep movsb

loc_62B940F1:				; CODE XREF: silc_client_new_id+132j
					; silc_client_new_id+229j
		mov	edi, [ebp+var_3C]
		mov	ecx, [ebp+var_44]
		mov	[ecx+0F4h], edi
		mov	al, [edx+20h]
		mov	cl, al
		and	ecx, 3Fh
		jnz	short loc_62B94170
		lea	esi, [ebx+10h]

loc_62B9410A:				; CODE XREF: silc_client_new_id+212j
		movzx	eax, word ptr [ebx+2Eh]
		mov	[esp+68h+var_58], esi
		mov	[esp+68h+var_5C], eax
		mov	eax, [ebx+4]
		mov	[esp+68h+var_60], eax
		mov	[esp+68h+var_64], 2
		mov	eax, [ebx+3Ch]
		mov	[esp+68h+var_68], eax
		mov	[ebp+var_48], edx
		call	silc_packet_set_ids
		mov	eax, [ebx+54h]
		test	byte ptr [eax+12Dh], 20h
		mov	edx, [ebp+var_48]
		jz	loc_62B93FD1
		add	eax, 6Ch
		mov	[esp+68h+var_68], eax
		call	silc_fsm_continue_sync
		mov	edx, [ebp+var_48]
		jmp	loc_62B93FD1
; ---------------------------------------------------------------------------
		align 4

loc_62B9415C:				; CODE XREF: silc_client_new_id+5Fj
		mov	eax, [eax]
		test	eax, eax
		jz	loc_62B9401D
		mov	ecx, [esi]
		jmp	loc_62B94021
; ---------------------------------------------------------------------------
		align 10h

loc_62B94170:				; CODE XREF: silc_client_new_id+14Dj
		mov	esi, [ebx+54h]
		shr	al, 6
		movzx	eax, al
		mov	[esp+68h+var_60], eax
		movzx	ecx, cl
		mov	[esp+68h+var_64], ecx
		mov	eax, [edx+18h]
		mov	[esp+68h+var_68], eax
		mov	[ebp+var_48], edx
		call	silc_id_payload_encode_data
		mov	[esi+0F8h], eax
		mov	eax, [ebx+54h]
		mov	eax, [eax+0F8h]
		test	eax, eax
		mov	edx, [ebp+var_48]
		jz	loc_62B93FD1
		mov	ecx, [eax+4]
		lea	esi, [ebx+10h]
		mov	[esp+68h+var_60], esi
		mov	eax, [eax+8]
		sub	eax, ecx
		mov	[esp+68h+var_64], eax
		mov	[esp+68h+var_68], ecx
		call	silc_id_payload_parse_id
		mov	edx, [ebp+var_48]
		jmp	loc_62B9410A
; ---------------------------------------------------------------------------

loc_62B941CF:				; CODE XREF: silc_client_new_id+D8j
		mov	eax, [ebp+var_3C]
		mov	ecx, [eax+8]
		jmp	loc_62B940CD
; ---------------------------------------------------------------------------

loc_62B941DA:				; CODE XREF: silc_client_new_id+D0j
					; silc_client_new_id+F8j
		mov	[ebp+var_3C], 0
		jmp	loc_62B940F1
silc_client_new_id endp

; ---------------------------------------------------------------------------
		align 4
; Exported entry 220. silc_client_st_resume_resolve_cmodes

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public silc_client_st_resume_resolve_cmodes
silc_client_st_resume_resolve_cmodes proc near
					; DATA XREF: silc_client_st_resume_resolve_channels+38o

var_68		= dword	ptr -68h
var_64		= dword	ptr -64h
var_60		= dword	ptr -60h
var_5C		= dword	ptr -5Ch
var_58		= dword	ptr -58h
var_54		= dword	ptr -54h
var_50		= dword	ptr -50h
var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_2C		= dword	ptr -2Ch
var_24		= dword	ptr -24h
var_20		= word ptr -20h
var_1E		= word ptr -1Eh
var_1C		= dword	ptr -1Ch
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		sub	esp, 5Ch
		mov	edx, [ebp+arg_0]
		mov	esi, [ebp+arg_4]
		mov	edi, [esi+4Ch]
		mov	eax, [esi+54h]
		test	byte ptr [eax+12Dh], 2
		jnz	loc_62B94390
		mov	[esp+68h+var_64], offset silc_client_st_resume_completed
		mov	[esp+68h+var_68], edx
		call	silc_fsm_next
		lea	eax, [ebp+var_2C]
		mov	[esp+68h+var_64], eax
		mov	eax, [esi+54h]
		mov	eax, [eax+118h]
		mov	[esp+68h+var_68], eax
		call	silc_idcache_get_all
		test	al, al
		jz	loc_62B94374
		mov	eax, [ebp+var_1C]
		shr	eax, 2
		lea	edx, [eax+eax*2]
		mov	eax, [ebp+arg_8]
		mov	[eax+1Ch], edx
		mov	eax, [ebp+var_2C]
		mov	[ebp+var_24], eax
		and	byte ptr [ebp+var_1C], 0FDh
		jmp	loc_62B94359
; ---------------------------------------------------------------------------

loc_62B94258:				; CODE XREF: silc_client_st_resume_resolve_cmodes+179j
		movzx	edx, [ebp+var_1E]
		mov	edx, [eax+edx]

loc_62B9425F:				; CODE XREF: silc_client_st_resume_resolve_cmodes+186j
		mov	eax, [eax+0Ch]
		add	eax, 114h
		mov	[ebp+var_24], edx
		mov	[esp+68h+var_64], 3
		mov	[esp+68h+var_68], eax
		call	silc_id_payload_encode
		mov	ebx, eax
		test	eax, eax
		jz	loc_62B94356
		mov	edx, [ebx+4]
		mov	eax, [ebx+8]
		sub	eax, edx
		mov	[esp+68h+var_48], eax
		mov	[esp+68h+var_4C], edx
		mov	[esp+68h+var_50], 1
		mov	[esp+68h+var_54], 1
		mov	[esp+68h+var_58], esi
		mov	[esp+68h+var_5C], offset sub_62B939DC
		mov	[esp+68h+var_60], 11h
		mov	[esp+68h+var_64], esi
		mov	[esp+68h+var_68], edi
		call	silc_client_command_send
		mov	edx, [ebx+4]
		mov	eax, [ebx+8]
		sub	eax, edx
		mov	[esp+68h+var_48], eax
		mov	[esp+68h+var_4C], edx
		mov	[esp+68h+var_50], 1
		mov	[esp+68h+var_54], 1
		mov	[esp+68h+var_58], esi
		mov	[esp+68h+var_5C], offset sub_62B939DC
		mov	[esp+68h+var_60], 19h
		mov	[esp+68h+var_64], esi
		mov	[esp+68h+var_68], edi
		call	silc_client_command_send
		mov	edx, [ebx+4]
		mov	eax, [ebx+8]
		sub	eax, edx
		mov	[esp+68h+var_48], eax
		mov	[esp+68h+var_4C], edx
		mov	[esp+68h+var_50], 1
		mov	[esp+68h+var_54], 1
		mov	[esp+68h+var_58], esi
		mov	[esp+68h+var_5C], offset sub_62B939DC
		mov	[esp+68h+var_60], 6
		mov	[esp+68h+var_64], esi
		mov	[esp+68h+var_68], edi
		call	silc_client_command_send
		mov	eax, [ebx]
		mov	[esp+68h+var_68], eax
		call	silc_free
		mov	[esp+68h+var_68], ebx
		call	silc_free

loc_62B94356:				; CODE XREF: silc_client_st_resume_resolve_cmodes+96j
		mov	eax, [ebp+var_24]

loc_62B94359:				; CODE XREF: silc_client_st_resume_resolve_cmodes+6Bj
		test	eax, eax
		jz	short loc_62B94384
		test	byte ptr [ebp+var_1C], 2
		jnz	loc_62B94258
		movzx	edx, [ebp+var_20]
		mov	edx, [eax+edx]
		jmp	loc_62B9425F
; ---------------------------------------------------------------------------
		align 4

loc_62B94374:				; CODE XREF: silc_client_st_resume_resolve_cmodes+4Cj
		mov	eax, 1
		add	esp, 5Ch
		pop	ebx
		pop	esi
		pop	edi
		leave
		retn
; ---------------------------------------------------------------------------
		align 4

loc_62B94384:				; CODE XREF: silc_client_st_resume_resolve_cmodes+173j
		mov	al, 2
		add	esp, 5Ch
		pop	ebx
		pop	esi
		pop	edi
		leave
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_62B94390:				; CODE XREF: silc_client_st_resume_resolve_cmodes+1Cj
		mov	[esp+68h+var_64], offset silc_client_st_resume_error
		mov	[esp+68h+var_68], edx
		call	silc_fsm_next
		xor	eax, eax
		add	esp, 5Ch
		pop	ebx
		pop	esi
		pop	edi
		leave
		retn
silc_client_st_resume_resolve_cmodes endp

; ---------------------------------------------------------------------------
		align 4
; Exported entry 219. silc_client_st_resume_resolve_channels

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public silc_client_st_resume_resolve_channels
silc_client_st_resume_resolve_channels proc near ; DATA	XREF: silc_client_st_resume+1B3o

var_C8		= dword	ptr -0C8h
var_C4		= dword	ptr -0C4h
var_C0		= dword	ptr -0C0h
var_BC		= dword	ptr -0BCh
var_B8		= dword	ptr -0B8h
var_B4		= dword	ptr -0B4h
var_B0		= dword	ptr -0B0h
var_AC		= dword	ptr -0ACh
var_A8		= dword	ptr -0A8h
var_A4		= dword	ptr -0A4h
var_A0		= dword	ptr -0A0h
var_8C		= dword	ptr -8Ch
var_7C		= dword	ptr -7Ch
var_70		= dword	ptr -70h
var_6C		= dword	ptr -6Ch
var_68		= dword	ptr -68h
var_64		= dword	ptr -64h
var_60		= dword	ptr -60h
var_5C		= dword	ptr -5Ch
var_58		= dword	ptr -58h
var_54		= dword	ptr -54h
var_50		= dword	ptr -50h
var_4C		= dword	ptr -4Ch
var_3A		= dword	ptr -3Ah
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1A		= word ptr -1Ah
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		sub	esp, 0BCh
		mov	ecx, [ebp+arg_0]
		mov	edi, [ebp+arg_4]
		mov	esi, [ebp+arg_8]
		mov	eax, [edi+4Ch]
		mov	[ebp+var_54], eax
		mov	eax, [edi+54h]
		mov	dl, [eax+12Dh]
		test	dl, 2
		jnz	loc_62B94731
		mov	ebx, [edi+4]
		test	ebx, ebx
		jz	loc_62B94728
		mov	[esp+0C8h+var_C4], offset silc_client_st_resume_resolve_cmodes
		mov	[esp+0C8h+var_C8], ecx
		call	silc_fsm_next
		mov	[esp+0C8h+var_B0], 0
		mov	[esp+0C8h+var_B4], 0
		mov	[esp+0C8h+var_B8], 0
		mov	eax, [esi+18h]
		mov	[esp+0C8h+var_BC], eax
		mov	eax, [edi]
		mov	[esp+0C8h+var_C0], eax
		mov	[esp+0C8h+var_C4], edi
		mov	edx, [ebp+var_54]
		mov	[esp+0C8h+var_C8], edx
		call	silc_client_change_nickname
		mov	eax, [edi+54h]
		mov	eax, [eax+0F4h]
		mov	edx, [eax+4]
		mov	eax, [eax+8]
		sub	eax, edx
		mov	[esp+0C8h+var_A8], eax
		mov	[esp+0C8h+var_AC], edx
		mov	[esp+0C8h+var_B0], 1
		mov	[esp+0C8h+var_B4], 1
		mov	[esp+0C8h+var_B8], 0
		mov	[esp+0C8h+var_BC], offset silc_client_command_called_dummy
		mov	[esp+0C8h+var_C0], 10h
		mov	[esp+0C8h+var_C4], edi
		mov	ecx, [ebp+var_54]
		mov	[esp+0C8h+var_C8], ecx
		call	silc_client_command_send
		mov	eax, [esi+1Ch]
		test	eax, eax
		jz	loc_62B94718
		lea	eax, [esi+8]
		mov	[ebp+var_50], eax
		xor	ebx, ebx
		mov	[ebp+var_5C], 0
		xor	eax, eax
		mov	[ebp+var_60], 0
		mov	[ebp+var_58], 0
		mov	[ebp+var_64], edi
		mov	edi, eax
		mov	[ebp+var_4C], esi
		xchg	ax, ax

loc_62B944AC:				; CODE XREF: silc_client_st_resume_resolve_channels+19Bj
		mov	[esp+0C8h+var_A0], 1Dh
		mov	[esp+0C8h+var_A4], 0
		mov	[esp+0C8h+var_A8], 5
		lea	edx, [ebp+var_1A]
		mov	[esp+0C8h+var_AC], edx
		lea	ecx, [ebp+var_20]
		mov	[esp+0C8h+var_B0], ecx
		mov	[esp+0C8h+var_B4], 0Eh
		mov	[esp+0C8h+var_B8], 0
		lea	eax, [ebp+var_24]
		mov	[esp+0C8h+var_BC], eax
		mov	[esp+0C8h+var_C0], 0Eh
		mov	[esp+0C8h+var_C4], 19h
		mov	edx, [ebp+var_50]
		mov	[esp+0C8h+var_C8], edx
		call	silc_buffer_unformat
		test	eax, eax
		js	short loc_62B94536
		mov	[esp+0C8h+var_B8], 16h
		lea	ecx, [ebp+var_3A]
		mov	[esp+0C8h+var_BC], ecx
		mov	[esp+0C8h+var_C0], 3
		movzx	eax, [ebp+var_1A]
		mov	[esp+0C8h+var_C4], eax
		mov	eax, [ebp+var_20]
		mov	[esp+0C8h+var_C8], eax
		call	silc_id_str2id
		test	al, al
		jnz	short loc_62B9454C

loc_62B94536:				; CODE XREF: silc_client_st_resume_resolve_channels+15Aj
					; silc_client_st_resume_resolve_channels+1C3j
		mov	esi, edi
		inc	ebx
		mov	edx, [ebp+var_4C]
		cmp	ebx, [edx+1Ch]
		jnb	loc_62B94680

loc_62B94545:				; CODE XREF: silc_client_st_resume_resolve_channels+2CDj
		mov	edi, esi
		jmp	loc_62B944AC
; ---------------------------------------------------------------------------

loc_62B9454C:				; CODE XREF: silc_client_st_resume_resolve_channels+188j
		mov	[esp+0C8h+var_C0], 3
		movzx	eax, [ebp+var_1A]
		mov	[esp+0C8h+var_C4], eax
		mov	eax, [ebp+var_20]
		mov	[esp+0C8h+var_C8], eax
		call	silc_id_payload_encode_data
		mov	[ebp+var_8C], eax
		test	eax, eax
		jz	short loc_62B94536
		lea	eax, [ebp+var_3A]
		mov	[esp+0C8h+var_C0], eax
		mov	edx, [ebp+var_64]
		mov	[esp+0C8h+var_C4], edx
		mov	ecx, [ebp+var_54]
		mov	[esp+0C8h+var_C8], ecx
		call	silc_client_get_channel_by_id
		test	eax, eax
		jz	loc_62B94750
		mov	[esp+0C8h+var_C0], eax
		mov	eax, [ebp+var_64]
		mov	[esp+0C8h+var_C4], eax
		mov	edx, [ebp+var_54]
		mov	[esp+0C8h+var_C8], edx
		call	silc_client_unref_channel

loc_62B945A8:				; CODE XREF: silc_client_st_resume_resolve_channels+3CCj
		lea	esi, [edi+1]
		lea	ecx, ds:0[esi*4]
		mov	[esp+0C8h+var_C4], ecx
		mov	eax, [ebp+var_5C]
		mov	[esp+0C8h+var_C8], eax
		mov	[ebp+var_70], ecx
		call	silc_realloc
		mov	[ebp+var_5C], eax
		mov	ecx, [ebp+var_70]
		mov	[esp+0C8h+var_C4], ecx
		mov	edx, [ebp+var_58]
		mov	[esp+0C8h+var_C8], edx
		call	silc_realloc
		mov	[ebp+var_58], eax
		mov	ecx, [ebp+var_70]
		mov	[esp+0C8h+var_C4], ecx
		mov	ecx, [ebp+var_60]
		mov	[esp+0C8h+var_C8], ecx
		call	silc_realloc
		mov	[ebp+var_60], eax
		lea	eax, ds:0[edi*4]
		mov	[ebp+var_7C], eax
		mov	edx, [ebp+var_8C]
		mov	edx, [edx]
		mov	[ebp+var_68], edx
		mov	ecx, [ebp+var_58]
		add	ecx, eax
		mov	[ebp+var_6C], ecx
		jz	short loc_62B9461E
		mov	edx, [ebp+var_8C]
		mov	eax, [edx+0Ch]
		sub	eax, [ebp+var_68]
		mov	[ecx], eax

loc_62B9461E:				; CODE XREF: silc_client_st_resume_resolve_channels+262j
		mov	ecx, [ebp+var_8C]
		mov	dword ptr [ecx+0Ch], 0
		mov	dword ptr [ecx+8], 0
		mov	dword ptr [ecx+4], 0
		mov	dword ptr [ecx], 0
		mov	ecx, [ebp+var_68]
		mov	edx, [ebp+var_5C]
		mov	eax, [ebp+var_7C]
		mov	[edx+eax], ecx
		add	edi, 5
		mov	edx, [ebp+var_60]
		mov	[edx+eax], edi
		mov	ecx, [ebp+var_8C]
		mov	eax, [ecx]
		mov	[esp+0C8h+var_C8], eax
		call	silc_free
		mov	eax, [ebp+var_8C]
		mov	[esp+0C8h+var_C8], eax
		call	silc_free
		inc	ebx
		mov	edx, [ebp+var_4C]
		cmp	ebx, [edx+1Ch]
		jb	loc_62B94545
		nop

loc_62B94680:				; CODE XREF: silc_client_st_resume_resolve_channels+193j
		mov	edx, esi
		mov	edi, [ebp+var_64]
		mov	esi, [ebp+var_4C]
		mov	ecx, [ebp+var_60]
		mov	[esp+0C8h+var_A8], ecx
		mov	eax, [ebp+var_58]
		mov	[esp+0C8h+var_AC], eax
		mov	ecx, [ebp+var_5C]
		mov	[esp+0C8h+var_B0], ecx
		mov	[esp+0C8h+var_B4], edx
		mov	[esp+0C8h+var_B8], edi
		mov	[esp+0C8h+var_BC], offset sub_62B939DC
		mov	[esp+0C8h+var_C0], 3
		mov	[esp+0C8h+var_C4], edi
		mov	eax, [ebp+var_54]
		mov	[esp+0C8h+var_C8], eax
		call	silc_client_command_send_argv
		mov	ebx, [esi+1Ch]
		test	ebx, ebx
		jz	short loc_62B946E7
		xor	eax, eax
		xor	ebx, ebx
		mov	edi, [ebp+var_5C]
		xchg	ax, ax

loc_62B946D4:				; CODE XREF: silc_client_st_resume_resolve_channels+339j
		mov	eax, [edi+eax*4]
		mov	[esp+0C8h+var_C8], eax
		call	silc_free
		inc	ebx
		mov	eax, ebx
		cmp	ebx, [esi+1Ch]
		jb	short loc_62B946D4

loc_62B946E7:				; CODE XREF: silc_client_st_resume_resolve_channels+31Dj
		mov	edx, [ebp+var_5C]
		mov	[esp+0C8h+var_C8], edx
		call	silc_free
		mov	ecx, [ebp+var_58]
		mov	[esp+0C8h+var_C8], ecx
		call	silc_free
		mov	eax, [ebp+var_60]
		mov	[esp+0C8h+var_C8], eax
		call	silc_free
		mov	eax, 2
		add	esp, 0BCh
		pop	ebx
		pop	esi
		pop	edi
		leave
		retn
; ---------------------------------------------------------------------------

loc_62B94718:				; CODE XREF: silc_client_st_resume_resolve_channels+D1j
		mov	eax, 1
		add	esp, 0BCh
		pop	ebx
		pop	esi
		pop	edi
		leave
		retn
; ---------------------------------------------------------------------------

loc_62B94728:				; CODE XREF: silc_client_st_resume_resolve_channels+32j
		and	edx, 0FFFFFFDFh
		mov	[eax+12Dh], dl

loc_62B94731:				; CODE XREF: silc_client_st_resume_resolve_channels+27j
		mov	[esp+0C8h+var_C4], offset silc_client_st_resume_error
		mov	[esp+0C8h+var_C8], ecx
		call	silc_fsm_next
		xor	eax, eax
		add	esp, 0BCh
		pop	ebx
		pop	esi
		pop	edi
		leave
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_62B94750:				; CODE XREF: silc_client_st_resume_resolve_channels+1E0j
		lea	eax, [ebp+var_3A]
		mov	[esp+0C8h+var_B8], eax ; int
		mov	[esp+0C8h+var_BC], 0 ; int
		mov	eax, [ebp+var_24]
		mov	[esp+0C8h+var_C0], eax ; char *
		mov	edx, [ebp+var_64]
		mov	[esp+0C8h+var_C4], edx ; int
		mov	ecx, [ebp+var_54]
		mov	[esp+0C8h+var_C8], ecx ; int
		call	silc_client_add_channel
		jmp	loc_62B945A8
silc_client_st_resume_resolve_channels endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 137. silc_client_get_detach_data

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public silc_client_get_detach_data
silc_client_get_detach_data proc near	; CODE XREF: silc_client_command_reply_detach+1B1p

var_F8		= dword	ptr -0F8h
var_F4		= dword	ptr -0F4h
var_F0		= dword	ptr -0F0h
var_EC		= dword	ptr -0ECh
var_E8		= dword	ptr -0E8h
var_E4		= dword	ptr -0E4h
var_E0		= dword	ptr -0E0h
var_DC		= dword	ptr -0DCh
var_D8		= dword	ptr -0D8h
var_D4		= dword	ptr -0D4h
var_D0		= dword	ptr -0D0h
var_CC		= dword	ptr -0CCh
var_C8		= dword	ptr -0C8h
var_C4		= dword	ptr -0C4h
var_C0		= dword	ptr -0C0h
var_BC		= dword	ptr -0BCh
var_B8		= dword	ptr -0B8h
var_A0		= dword	ptr -0A0h
var_9C		= dword	ptr -9Ch
var_90		= byte ptr -90h
var_50		= byte ptr -50h
var_30		= byte ptr -30h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		sub	esp, 0ECh
		mov	ebx, [ebp+arg_4]
		mov	eax, [ebx]
		mov	eax, [eax+3B4h]
		mov	[esp+0F8h+var_F8], eax
		call	silc_hash_table_count
		mov	[ebp+var_A0], eax
		lea	eax, [ebp+var_20]
		mov	[esp+0F8h+var_E8], eax
		mov	[esp+0F8h+var_EC], 40h
		lea	esi, [ebp+var_90]
		mov	[esp+0F8h+var_F0], esi
		mov	[esp+0F8h+var_F4], 2
		mov	eax, [ebx+4]
		mov	[esp+0F8h+var_F8], eax
		call	silc_id_id2str
		mov	[esp+0F8h+var_F4], 10h
		mov	[esp+0F8h+var_F8], 1
		call	silc_calloc
		mov	[ebp+var_9C], eax
		test	eax, eax
		jz	loc_62B9498F
		mov	edx, [ebx]
		xor	eax, eax
		mov	ecx, 0FFFFFFFFh
		mov	edi, edx
		repne scasb
		not	ecx
		dec	ecx
		mov	[esp+0F8h+var_B8], 1Dh
		mov	eax, [ebp+var_A0]
		mov	[esp+0F8h+var_BC], eax
		mov	[esp+0F8h+var_C0], 5
		mov	eax, [edx+3ACh]
		mov	[esp+0F8h+var_C4], eax
		mov	[esp+0F8h+var_C8], 5
		mov	eax, [ebp+var_20]
		mov	[esp+0F8h+var_CC], eax
		mov	[esp+0F8h+var_D0], esi
		mov	[esp+0F8h+var_D4], 0Ch
		mov	[esp+0F8h+var_D8], eax
		mov	[esp+0F8h+var_DC], 3
		mov	[esp+0F8h+var_E0], ecx
		mov	[esp+0F8h+var_E4], edx
		mov	[esp+0F8h+var_E8], 0Ch
		mov	[esp+0F8h+var_EC], ecx
		mov	[esp+0F8h+var_F0], 3
		mov	[esp+0F8h+var_F4], 19h
		mov	edx, [ebp+var_9C]
		mov	[esp+0F8h+var_F8], edx
		call	silc_buffer_format
		test	eax, eax
		js	loc_62B949A0
		lea	edx, [ebp+var_30]
		mov	[esp+0F8h+var_F4], edx
		mov	eax, [ebx]
		mov	eax, [eax+3B4h]
		mov	[esp+0F8h+var_F8], eax
		call	silc_hash_table_list
		lea	esi, [ebp+var_50]
		jmp	loc_62B94957
; ---------------------------------------------------------------------------
		align 4

loc_62B948A8:				; CODE XREF: silc_client_get_detach_data+1F3j
		lea	eax, [ebp+var_24]
		mov	[esp+0F8h+var_E8], eax
		mov	[esp+0F8h+var_EC], 20h
		mov	[esp+0F8h+var_F0], esi
		mov	[esp+0F8h+var_F4], 3
		mov	eax, [ebp+var_1C]
		mov	eax, [eax+8]
		add	eax, 114h
		mov	[esp+0F8h+var_F8], eax
		call	silc_id_id2str
		mov	eax, [ebp+var_1C]
		mov	edx, [eax+8]
		mov	ebx, [edx]
		xor	eax, eax
		mov	ecx, 0FFFFFFFFh
		mov	edi, ebx
		repne scasb
		not	ecx
		dec	ecx
		mov	[esp+0F8h+var_C0], 1Dh
		mov	eax, [edx+12Ch]
		mov	[esp+0F8h+var_C4], eax
		mov	[esp+0F8h+var_C8], 5
		mov	edx, [ebp+var_24]
		mov	[esp+0F8h+var_CC], edx
		mov	[esp+0F8h+var_D0], esi
		mov	[esp+0F8h+var_D4], 0Ch
		mov	[esp+0F8h+var_D8], edx
		mov	[esp+0F8h+var_DC], 3
		mov	[esp+0F8h+var_E0], ecx
		mov	[esp+0F8h+var_E4], ebx
		mov	[esp+0F8h+var_E8], 0Ch
		mov	[esp+0F8h+var_EC], ecx
		mov	[esp+0F8h+var_F0], 3
		mov	[esp+0F8h+var_F4], 19h
		mov	eax, [ebp+var_9C]
		mov	[esp+0F8h+var_F8], eax
		call	silc_buffer_format

loc_62B94957:				; CODE XREF: silc_client_get_detach_data+122j
		lea	edx, [ebp+var_1C]
		mov	[esp+0F8h+var_F0], edx
		mov	[esp+0F8h+var_F4], 0
		lea	eax, [ebp+var_30]
		mov	[esp+0F8h+var_F8], eax
		call	silc_hash_table_get
		test	al, al
		jnz	loc_62B948A8
		lea	edx, [ebp+var_30]
		mov	[esp+0F8h+var_F8], edx
		call	silc_hash_table_list_reset
		mov	edx, [ebp+var_9C]
		mov	eax, [edx]
		mov	[edx+4], eax

loc_62B9498F:				; CODE XREF: silc_client_get_detach_data+6Dj
					; silc_client_get_detach_data+248j
		mov	eax, [ebp+var_9C]
		add	esp, 0ECh
		pop	ebx
		pop	esi
		pop	edi
		leave
		retn
; ---------------------------------------------------------------------------

loc_62B949A0:				; CODE XREF: silc_client_get_detach_data+102j
		mov	edx, [ebp+var_9C]
		mov	eax, [edx]
		mov	[esp+0F8h+var_F8], eax
		call	silc_free
		mov	eax, [ebp+var_9C]
		mov	[esp+0F8h+var_F8], eax
		call	silc_free
		mov	[ebp+var_9C], 0
		jmp	short loc_62B9498F
silc_client_get_detach_data endp

; ---------------------------------------------------------------------------
		align 4
; Exported entry  27. silc_client_command_continue_error

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public silc_client_command_continue_error
silc_client_command_continue_error proc	near ; DATA XREF: sub_62B951C8+9Fo
					; sub_62B9529C:loc_62B952D4o
		push	ebp
		mov	ebp, esp
		mov	eax, 3
		leave
		retn
silc_client_command_continue_error endp

; ---------------------------------------------------------------------------
		align 4
; Exported entry  25. silc_client_command_called_dummy

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public silc_client_command_called_dummy
silc_client_command_called_dummy proc near ; DATA XREF:	silc_client_st_resume_completed+66o
					; silc_client_st_resume_completed+B6o ...
		push	ebp
		mov	ebp, esp
		xor	eax, eax
		leave
		retn
silc_client_command_called_dummy endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  80. silc_client_command_resolve_dummy

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public silc_client_command_resolve_dummy
silc_client_command_resolve_dummy proc near ; DATA XREF: silc_client_command_watch+87o
		push	ebp
		mov	ebp, esp
		leave
		retn
silc_client_command_resolve_dummy endp

; ---------------------------------------------------------------------------
		align 4

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_62B949E8	proc near		; CODE XREF: silc_client_command+17Bp
					; silc_client_command_cumode+42Bp ...

var_18		= dword	ptr -18h

		push	ebp
		mov	ebp, esp
		push	ebx
		sub	esp, 14h
		mov	ebx, eax
		test	eax, eax
		jz	short loc_62B94A07
		mov	eax, [eax]
		mov	[esp+18h+var_18], eax
		call	silc_free
		mov	[esp+18h+var_18], ebx
		call	silc_free

loc_62B94A07:				; CODE XREF: sub_62B949E8+Bj
		add	esp, 14h
		pop	ebx
		leave
		retn
sub_62B949E8	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  30. silc_client_command_free

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public silc_client_command_free
silc_client_command_free proc near	; CODE XREF: sub_62B94AA4+58j
					; sub_62B94AA4+B8j ...

var_18		= dword	ptr -18h
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	esi
		push	ebx
		sub	esp, 10h
		mov	ebx, [ebp+arg_0]
		mov	eax, [ebx+38h]
		test	eax, eax
		jz	short loc_62B94A3E
		xor	eax, eax
		xor	esi, esi
		xchg	ax, ax

loc_62B94A28:				; CODE XREF: silc_client_command_free+2Cj
		mov	edx, [ebx+3Ch]
		mov	eax, [edx+eax*4]
		mov	[esp+18h+var_18], eax
		call	silc_free
		inc	esi
		mov	eax, esi
		cmp	[ebx+38h], esi
		ja	short loc_62B94A28

loc_62B94A3E:				; CODE XREF: silc_client_command_free+10j
		mov	eax, [ebx+3Ch]
		mov	[esp+18h+var_18], eax
		call	silc_free
		mov	eax, [ebx+40h]
		mov	[esp+18h+var_18], eax
		call	silc_free
		mov	eax, [ebx+44h]
		mov	[esp+18h+var_18], eax
		call	silc_free
		mov	eax, [ebx+48h]
		mov	[ebx+50h], eax
		and	byte ptr [ebx+58h], 0FDh
		jmp	short loc_62B94A81
; ---------------------------------------------------------------------------
		align 4

loc_62B94A6C:				; CODE XREF: silc_client_command_free+79j
		movzx	edx, word ptr [ebx+56h]
		mov	edx, [eax+edx]

loc_62B94A73:				; CODE XREF: silc_client_command_free+82j
		mov	[ebx+50h], edx
		mov	[esp+18h+var_18], eax
		call	silc_free
		mov	eax, [ebx+50h]

loc_62B94A81:				; CODE XREF: silc_client_command_free+59j
		test	eax, eax
		jz	short loc_62B94A94
		test	byte ptr [ebx+58h], 2
		jnz	short loc_62B94A6C
		movzx	edx, word ptr [ebx+54h]
		mov	edx, [eax+edx]
		jmp	short loc_62B94A73
; ---------------------------------------------------------------------------

loc_62B94A94:				; CODE XREF: silc_client_command_free+73j
		mov	[ebp+arg_0], ebx
		add	esp, 10h
		pop	ebx
		pop	esi
		leave
		jmp	silc_free
silc_client_command_free endp

; ---------------------------------------------------------------------------
		align 4

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_62B94AA4	proc near		; DATA XREF: silc_client_command_call+1A8o
					; silc_client_command_send_argv+143o ...

var_3C		= dword	ptr -3Ch
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		sub	esp, 3Ch
		mov	ebx, [ebp+arg_4]
		mov	eax, [ebx+4]
		mov	[ebp+var_20], eax
		mov	edi, [eax+54h]
		mov	[ebp+var_1C], edi
		mov	edx, [edi+0D8h]
		test	edx, edx
		jz	short loc_62B94AE7
		cmp	ebx, edx
		jz	loc_62B94B6E
		movzx	esi, word ptr [edi+0E4h]
		jmp	short loc_62B94ADE
; ---------------------------------------------------------------------------
		align 4

loc_62B94AD8:				; CODE XREF: sub_62B94AA4+41j
		cmp	ebx, eax
		jz	short loc_62B94B04
		mov	edx, eax

loc_62B94ADE:				; CODE XREF: sub_62B94AA4+31j
		lea	ecx, [edx+esi]
		mov	eax, [ecx]
		test	eax, eax
		jnz	short loc_62B94AD8

loc_62B94AE7:				; CODE XREF: sub_62B94AA4+20j
		mov	eax, [ebp+var_1C]
		cmp	[eax+0DCh], ebx
		jz	short loc_62B94B4C

loc_62B94AF2:				; CODE XREF: sub_62B94AA4+A6j
		mov	[ebp+arg_0], ebx
		add	esp, 3Ch
		pop	ebx
		pop	esi
		pop	edi
		leave
		jmp	silc_client_command_free
; ---------------------------------------------------------------------------
		align 4

loc_62B94B04:				; CODE XREF: sub_62B94AA4+36j
		mov	[ebp+var_3C], ecx

loc_62B94B07:				; CODE XREF: sub_62B94AA4+DCj
		mov	eax, [ebx+esi]
		mov	esi, [ebp+var_3C]
		mov	[esi], eax
		test	eax, eax
		jz	short loc_62B94B29
		test	byte ptr [edi+0E8h], 1
		jz	short loc_62B94B29
		movzx	ecx, word ptr [edi+0E6h]
		mov	esi, [ebx+ecx]
		mov	[eax+ecx], esi

loc_62B94B29:				; CODE XREF: sub_62B94AA4+6Dj
					; sub_62B94AA4+76j
		cmp	[edi+0E0h], ebx
		jz	short loc_62B94B61

loc_62B94B31:				; CODE XREF: sub_62B94AA4+C8j
		sub	dword ptr [edi+0E8h], 4
		mov	esi, [ebp+var_20]
		mov	esi, [esi+54h]
		mov	[ebp+var_1C], esi
		mov	eax, [ebp+var_1C]
		cmp	[eax+0DCh], ebx
		jnz	short loc_62B94AF2

loc_62B94B4C:				; CODE XREF: sub_62B94AA4+4Cj
		mov	[eax+0DCh], edx
		mov	[ebp+arg_0], ebx
		add	esp, 3Ch
		pop	ebx
		pop	esi
		pop	edi
		leave
		jmp	silc_client_command_free
; ---------------------------------------------------------------------------

loc_62B94B61:				; CODE XREF: sub_62B94AA4+8Bj
		mov	ecx, [ebp+var_3C]
		mov	eax, [ecx]
		mov	[edi+0E0h], eax
		jmp	short loc_62B94B31
; ---------------------------------------------------------------------------

loc_62B94B6E:				; CODE XREF: sub_62B94AA4+24j
		lea	ecx, [edi+0D8h]
		mov	[ebp+var_3C], ecx
		movzx	esi, word ptr [edi+0E4h]
		xor	edx, edx
		jmp	short loc_62B94B07
sub_62B94AA4	endp

; ---------------------------------------------------------------------------
		align 4

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __usercall sub_62B94B84@<eax>(char *Src@<ecx>, int, int, int)
sub_62B94B84	proc near		; CODE XREF: silc_client_commands_register+2CEp
					; silc_client_commands_register+AA6p ...

Src		= dword	ptr -38h
var_34		= dword	ptr -34h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		sub	esp, 2Ch
		mov	[ebp+var_20], eax
		mov	ebx, edx
		mov	edi, ecx
		mov	eax, [ebp+arg_8]
		mov	[ebp+var_1C], eax
		mov	[esp+38h+var_34], 18h
		mov	[esp+38h+Src], 1
		call	silc_calloc
		mov	esi, eax
		test	eax, eax
		jz	short loc_62B94C33
		mov	[eax+4], bl
		mov	eax, [ebp+arg_0]
		mov	[esi+8], eax
		mov	eax, [ebp+arg_4]
		mov	[esi+0Ch], eax
		mov	dl, byte ptr [ebp+var_1C]
		mov	[esi+14h], dl
		test	edi, edi
		jz	short loc_62B94C24
		mov	[esp+38h+Src], edi ; Src
		call	_strdup
		mov	[esi+10h], eax
		test	eax, eax
		jz	short loc_62B94C2B
		mov	edx, [ebp+var_20]
		mov	eax, [edx+18h]
		mov	edx, [eax+58h]
		test	edx, edx
		jz	short loc_62B94C40
		movzx	edx, word ptr [eax+64h]
		mov	ecx, [eax+5Ch]
		mov	[ecx+edx], esi

loc_62B94BF3:				; CODE XREF: sub_62B94B84+BFj
		test	byte ptr [eax+68h], 1
		jnz	short loc_62B94C18

loc_62B94BF9:				; CODE XREF: sub_62B94B84+9Ej
		mov	[eax+5Ch], esi
		movzx	edx, word ptr [eax+64h]
		mov	dword ptr [esi+edx], 0
		add	dword ptr [eax+68h], 4
		mov	al, 1
		add	esp, 2Ch
		pop	ebx
		pop	esi
		pop	edi
		leave
		retn
; ---------------------------------------------------------------------------
		align 4

loc_62B94C18:				; CODE XREF: sub_62B94B84+73j
		movzx	edx, word ptr [eax+66h]
		mov	ecx, [eax+5Ch]
		mov	[esi+edx], ecx
		jmp	short loc_62B94BF9
; ---------------------------------------------------------------------------

loc_62B94C24:				; CODE XREF: sub_62B94B84+47j
		mov	dword ptr [esi+10h], 0

loc_62B94C2B:				; CODE XREF: sub_62B94B84+56j
		mov	[esp+38h+Src], esi
		call	silc_free

loc_62B94C33:				; CODE XREF: sub_62B94B84+2Ej
		xor	eax, eax
		add	esp, 2Ch
		pop	ebx
		pop	esi
		pop	edi
		leave
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_62B94C40:				; CODE XREF: sub_62B94B84+63j
		mov	[eax+58h], esi
		jmp	short loc_62B94BF3
sub_62B94B84	endp

; ---------------------------------------------------------------------------
		align 4
; Exported entry  83. silc_client_command_service

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public silc_client_command_service
silc_client_command_service proc near	; DATA XREF: silc_client_commands_unregister+1225o
					; silc_client_commands_register+B41o

var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		push	esi
		push	ebx
		sub	esp, 20h
		mov	eax, [ebp+arg_4]
		mov	ecx, [eax+4]
		mov	edx, [ecx+4Ch]
		mov	ebx, [edx+18h]
		mov	ebx, [ebx+48h]
		mov	esi, [eax+3Ch]
		mov	[esp+28h+var_10], esi
		mov	esi, [eax+38h]
		mov	[esp+28h+var_14], esi
		mov	[esp+28h+var_18], 0
		movzx	eax, byte ptr [eax+34h]
		mov	[esp+28h+var_1C], eax
		mov	[esp+28h+var_20], 1
		mov	[esp+28h+var_24], ecx
		mov	[esp+28h+var_28], edx
		call	dword ptr [ebx+10h]
		mov	[esp+28h+var_24], offset silc_client_command_reply_wait
		mov	eax, [ebp+arg_0]
		mov	[esp+28h+var_28], eax
		call	silc_fsm_next
		xor	eax, eax
		add	esp, 20h
		pop	ebx
		pop	esi
		leave
		retn
silc_client_command_service endp

; ---------------------------------------------------------------------------
		align 4
; Exported entry  84. silc_client_command_silcoper

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public silc_client_command_silcoper
silc_client_command_silcoper proc near	; DATA XREF: silc_client_commands_unregister+F65o
					; silc_client_commands_register+A93o

var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		sub	esp, 2Ch
		mov	esi, [ebp+arg_0]
		mov	ebx, [ebp+arg_4]
		mov	edi, [ebx+4]
		cmp	dword ptr [ebx+38h], 1
		jbe	loc_62B94D58
		mov	[esp+38h+var_34], offset silc_client_command_oper_send
		mov	[esp+38h+var_38], esi
		call	silc_fsm_next
		cmp	dword ptr [ebx+38h], 2
		jbe	short loc_62B94CE8

loc_62B94CDE:				; CODE XREF: silc_client_command_silcoper+9Aj
		xor	eax, eax

loc_62B94CE0:				; CODE XREF: silc_client_command_silcoper+14Ej
		add	esp, 2Ch
		pop	ebx
		pop	esi
		pop	edi
		leave
		retn
; ---------------------------------------------------------------------------

loc_62B94CE8:				; CODE XREF: silc_client_command_silcoper+30j
		mov	[esp+38h+var_34], 8
		mov	[esp+38h+var_38], 1
		call	silc_calloc
		test	eax, eax
		jz	loc_62B94DF8
		mov	[ebx+60h], eax
		mov	al, [esi+28h]
		mov	dl, al
		or	edx, 4
		mov	[esi+28h], dl
		test	al, 4
		jnz	loc_62B94DC4

loc_62B94D1A:				; CODE XREF: silc_client_command_silcoper+144j
		mov	eax, [edi+4Ch]
		mov	edx, [eax+18h]
		mov	edx, [edx+48h]
		mov	[esp+38h+var_2C], ebx
		mov	[esp+38h+var_30], offset sub_62B952EC
		mov	[esp+38h+var_34], edi
		mov	[esp+38h+var_38], eax
		call	dword ptr [edx+20h]
		mov	al, [esi+28h]
		mov	dl, al
		and	edx, 0FFFFFFFBh
		mov	[esi+28h], dl
		test	al, 4
		jz	short loc_62B94CDE
		mov	eax, 2
		add	esp, 2Ch
		pop	ebx
		pop	esi
		pop	edi
		leave
		retn
; ---------------------------------------------------------------------------
		align 4

loc_62B94D58:				; CODE XREF: silc_client_command_silcoper+16j
		mov	eax, [edi+4Ch]
		mov	edx, [eax+18h]
		mov	edx, [edx+48h]
		mov	[esp+38h+var_2C], offset aUsageSilcoperU ; "Usage: /SILCOPER <username>	[-pubkey]"
		mov	[esp+38h+var_30], 0
		mov	[esp+38h+var_34], edi
		mov	[esp+38h+var_38], eax
		call	dword ptr [edx]
		mov	edx, [ebx+4]
		mov	eax, [edx+4Ch]
		mov	ecx, [eax+18h]
		mov	ecx, [ecx+48h]
		mov	esi, [ebx+3Ch]
		mov	[esp+34h+var_1C], esi
		mov	esi, [ebx+38h]
		mov	[esp+34h+var_20], esi
		mov	[esp+34h+var_24], 1Dh
		movzx	ebx, byte ptr [ebx+34h]
		mov	[esp+34h+var_28], ebx
		mov	[esp+34h+var_2C], 0
		mov	[esp+34h+var_30], edx
		mov	[esp+34h+var_34], eax
		call	dword ptr [ecx+10h]
		mov	eax, 3
		add	esp, 2Ch
		pop	ebx
		pop	esi
		pop	edi
		leave
		retn
; ---------------------------------------------------------------------------
		align 4

loc_62B94DC4:				; CODE XREF: silc_client_command_silcoper+68j
		mov	[esp+38h+var_30], 91Bh
		mov	[esp+38h+var_34], offset aCommand_c ; "command.c"
		mov	[esp+38h+var_38], offset aSilc_verifyS_5 ; "SILC_VERIFY	%s:%d"
		call	silc_format
		mov	[esp+38h+var_34], eax
		mov	[esp+38h+var_38], 3
		call	silc_log_output
		jmp	loc_62B94D1A
; ---------------------------------------------------------------------------
		align 4

loc_62B94DF8:				; CODE XREF: silc_client_command_silcoper+52j
		mov	al, 3
		jmp	loc_62B94CE0
silc_client_command_silcoper endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  42. silc_client_command_oper

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public silc_client_command_oper
silc_client_command_oper proc near	; DATA XREF: silc_client_commands_unregister+885o
					; silc_client_commands_register+5D3o

var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		sub	esp, 2Ch
		mov	esi, [ebp+arg_0]
		mov	ebx, [ebp+arg_4]
		mov	edi, [ebx+4]
		cmp	dword ptr [ebx+38h], 1
		jbe	loc_62B94EAC
		mov	[esp+38h+var_34], offset silc_client_command_oper_send
		mov	[esp+38h+var_38], esi
		call	silc_fsm_next
		cmp	dword ptr [ebx+38h], 2
		jbe	short loc_62B94E3C

loc_62B94E32:				; CODE XREF: silc_client_command_oper+9Aj
		xor	eax, eax

loc_62B94E34:				; CODE XREF: silc_client_command_oper+14Ej
		add	esp, 2Ch
		pop	ebx
		pop	esi
		pop	edi
		leave
		retn
; ---------------------------------------------------------------------------

loc_62B94E3C:				; CODE XREF: silc_client_command_oper+30j
		mov	[esp+38h+var_34], 8
		mov	[esp+38h+var_38], 1
		call	silc_calloc
		test	eax, eax
		jz	loc_62B94F4C
		mov	[ebx+60h], eax
		mov	al, [esi+28h]
		mov	dl, al
		or	edx, 4
		mov	[esi+28h], dl
		test	al, 4
		jnz	loc_62B94F18

loc_62B94E6E:				; CODE XREF: silc_client_command_oper+144j
		mov	eax, [edi+4Ch]
		mov	edx, [eax+18h]
		mov	edx, [edx+48h]
		mov	[esp+38h+var_2C], ebx
		mov	[esp+38h+var_30], offset sub_62B952EC
		mov	[esp+38h+var_34], edi
		mov	[esp+38h+var_38], eax
		call	dword ptr [edx+20h]
		mov	al, [esi+28h]
		mov	dl, al
		and	edx, 0FFFFFFFBh
		mov	[esi+28h], dl
		test	al, 4
		jz	short loc_62B94E32
		mov	eax, 2
		add	esp, 2Ch
		pop	ebx
		pop	esi
		pop	edi
		leave
		retn
; ---------------------------------------------------------------------------
		align 4

loc_62B94EAC:				; CODE XREF: silc_client_command_oper+16j
		mov	eax, [edi+4Ch]
		mov	edx, [eax+18h]
		mov	edx, [edx+48h]
		mov	[esp+38h+var_2C], offset aUsageOperUsern ; "Usage: /OPER <username> [-pubkey]"
		mov	[esp+38h+var_30], 0
		mov	[esp+38h+var_34], edi
		mov	[esp+38h+var_38], eax
		call	dword ptr [edx]
		mov	edx, [ebx+4]
		mov	eax, [edx+4Ch]
		mov	ecx, [eax+18h]
		mov	ecx, [ecx+48h]
		mov	esi, [ebx+3Ch]
		mov	[esp+34h+var_1C], esi
		mov	esi, [ebx+38h]
		mov	[esp+34h+var_20], esi
		mov	[esp+34h+var_24], 1Dh
		movzx	ebx, byte ptr [ebx+34h]
		mov	[esp+34h+var_28], ebx
		mov	[esp+34h+var_2C], 0
		mov	[esp+34h+var_30], edx
		mov	[esp+34h+var_34], eax
		call	dword ptr [ecx+10h]
		mov	eax, 3
		add	esp, 2Ch
		pop	ebx
		pop	esi
		pop	edi
		leave
		retn
; ---------------------------------------------------------------------------
		align 4

loc_62B94F18:				; CODE XREF: silc_client_command_oper+68j
		mov	[esp+38h+var_30], 8FCh
		mov	[esp+38h+var_34], offset aCommand_c ; "command.c"
		mov	[esp+38h+var_38], offset aSilc_verifyS_5 ; "SILC_VERIFY	%s:%d"
		call	silc_format
		mov	[esp+38h+var_34], eax
		mov	[esp+38h+var_38], 3
		call	silc_log_output
		jmp	loc_62B94E6E
; ---------------------------------------------------------------------------
		align 4

loc_62B94F4C:				; CODE XREF: silc_client_command_oper+52j
		mov	al, 3
		jmp	loc_62B94E34
silc_client_command_oper endp

; ---------------------------------------------------------------------------
		align 4

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_62B94F54	proc near		; CODE XREF: silc_client_command_send_argv+110p
					; sub_62B95AF0+93p

var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		sub	esp, 1Ch
		mov	ebx, eax
		mov	esi, edx
		mov	edi, ecx
		mov	eax, [eax+54h]
		mov	eax, [eax+0B8h]
		mov	[esp+28h+var_28], eax
		call	silc_mutex_lock
		test	edi, edi
		jz	short loc_62B94FCA
		mov	[esp+28h+var_24], 10h
		mov	[esp+28h+var_28], 1
		call	silc_calloc
		test	eax, eax
		jz	loc_62B95060
		mov	[eax+4], edi
		mov	edx, [ebp+arg_0]
		mov	[eax+8], edx
		mov	edi, [esi+48h]
		test	edi, edi
		jz	loc_62B95054
		movzx	edx, word ptr [esi+54h]
		mov	ecx, [esi+4Ch]
		mov	[ecx+edx], eax

loc_62B94FB2:				; CODE XREF: sub_62B94F54+107j
		test	byte ptr [esi+58h], 1
		jnz	loc_62B9503C

loc_62B94FBC:				; CODE XREF: sub_62B94F54+F2j
		mov	[esi+4Ch], eax
		mov	dword ptr [eax+edx], 0
		add	dword ptr [esi+58h], 4

loc_62B94FCA:				; CODE XREF: sub_62B94F54+22j
		mov	eax, [ebx+54h]
		mov	ecx, [eax+0D8h]
		test	ecx, ecx
		jz	short loc_62B9504C
		movzx	edx, word ptr [eax+0E4h]
		mov	ecx, [eax+0DCh]
		mov	[ecx+edx], esi

loc_62B94FE7:				; CODE XREF: sub_62B94F54+FEj
		test	byte ptr [eax+0E8h], 1
		jnz	short loc_62B95028

loc_62B94FF0:				; CODE XREF: sub_62B94F54+E4j
		mov	[eax+0DCh], esi
		movzx	edx, word ptr [eax+0E4h]
		mov	dword ptr [esi+edx], 0
		add	dword ptr [eax+0E8h], 4
		mov	eax, [ebx+54h]
		mov	eax, [eax+0B8h]
		mov	[esp+28h+var_28], eax
		call	silc_mutex_unlock
		mov	al, 1

loc_62B9501E:				; CODE XREF: sub_62B94F54+11Fj
		add	esp, 1Ch
		pop	ebx
		pop	esi
		pop	edi
		leave
		retn
; ---------------------------------------------------------------------------
		align 4

loc_62B95028:				; CODE XREF: sub_62B94F54+9Aj
		movzx	edx, word ptr [eax+0E6h]
		mov	ecx, [eax+0DCh]
		mov	[esi+edx], ecx
		jmp	short loc_62B94FF0
; ---------------------------------------------------------------------------
		align 4

loc_62B9503C:				; CODE XREF: sub_62B94F54+62j
		movzx	ecx, word ptr [esi+56h]
		mov	edi, [esi+4Ch]
		mov	[eax+ecx], edi
		jmp	loc_62B94FBC
; ---------------------------------------------------------------------------
		align 4

loc_62B9504C:				; CODE XREF: sub_62B94F54+81j
		mov	[eax+0D8h], esi
		jmp	short loc_62B94FE7
; ---------------------------------------------------------------------------

loc_62B95054:				; CODE XREF: sub_62B94F54+4Ej
		mov	[esi+48h], eax
		movzx	edx, word ptr [esi+54h]
		jmp	loc_62B94FB2
; ---------------------------------------------------------------------------

loc_62B95060:				; CODE XREF: sub_62B94F54+3Aj
		mov	eax, [ebx+54h]
		mov	eax, [eax+0B8h]
		mov	[esp+28h+var_28], eax
		call	silc_mutex_unlock
		xor	eax, eax
		jmp	short loc_62B9501E
sub_62B94F54	endp

; ---------------------------------------------------------------------------
		align 4
; Exported entry  44. silc_client_command_pending

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public silc_client_command_pending
silc_client_command_pending proc near	; CODE XREF: silc_client_get_server_by_id_resolve+22Dp
					; silc_client_get_client_by_id_resolve+28Ep ...

var_58		= dword	ptr -58h
var_54		= dword	ptr -54h
var_3C		= dword	ptr -3Ch
var_20		= byte ptr -20h
var_1C		= dword	ptr -1Ch
arg_0		= dword	ptr  8
arg_4		= byte ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h
arg_10		= dword	ptr  18h

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		sub	esp, 4Ch
		mov	edi, [ebp+arg_0]
		mov	dl, [ebp+arg_4]
		mov	esi, [ebp+arg_8]
		test	edi, edi
		jz	loc_62B951C3
		mov	ebx, [ebp+arg_C]
		test	ebx, ebx
		jz	loc_62B951C3
		mov	eax, [edi+54h]
		mov	eax, [eax+0B8h]
		mov	[esp+58h+var_58], eax
		mov	[ebp+var_20], dl
		call	silc_mutex_lock
		mov	eax, [edi+54h]
		mov	ecx, [eax+0D8h]
		mov	[eax+0E0h], ecx
		and	byte ptr [eax+0E8h], 0FDh
		mov	eax, [edi+54h]
		mov	[ebp+var_3C], edi
		mov	dl, [ebp+var_20]

loc_62B950D0:				; CODE XREF: silc_client_command_pending+8Aj
					; silc_client_command_pending+90j ...
		mov	ebx, [eax+0E0h]
		test	ebx, ebx
		jz	loc_62B95184

loc_62B950DE:				; CODE XREF: silc_client_command_pending+103j
		test	byte ptr [eax+0E8h], 2
		jz	loc_62B9519C
		movzx	ecx, word ptr [eax+0E6h]
		mov	ecx, [ebx+ecx]

loc_62B950F5:				; CODE XREF: silc_client_command_pending+12Ej
		mov	[eax+0E0h], ecx
		cmp	[ebx+34h], dl
		jz	short loc_62B95104
		test	dl, dl
		jnz	short loc_62B950D0

loc_62B95104:				; CODE XREF: silc_client_command_pending+86j
		cmp	[ebx+36h], si
		jnz	short loc_62B950D0
		mov	[esp+58h+var_54], 10h
		mov	[esp+58h+var_58], 1
		mov	[ebp+var_20], dl
		call	silc_calloc
		test	eax, eax
		mov	dl, [ebp+var_20]
		jz	loc_62B951B8
		mov	edi, [ebp+arg_C]
		mov	[eax+4], edi
		mov	ecx, [ebp+arg_10]
		mov	[eax+8], ecx
		mov	ecx, [ebx+48h]
		test	ecx, ecx
		jz	short loc_62B951AC
		movzx	ecx, word ptr [ebx+54h]
		mov	[ebp+var_1C], ecx
		mov	edi, [ebx+4Ch]
		mov	[edi+ecx], eax

loc_62B9514C:				; CODE XREF: silc_client_command_pending+13Ej
		test	byte ptr [ebx+58h], 1
		jz	short loc_62B9515C
		movzx	ecx, word ptr [ebx+56h]
		mov	edi, [ebx+4Ch]
		mov	[eax+ecx], edi

loc_62B9515C:				; CODE XREF: silc_client_command_pending+D8j
		mov	[ebx+4Ch], eax
		mov	ecx, [ebp+var_1C]
		mov	dword ptr [eax+ecx], 0
		add	dword ptr [ebx+58h], 4
		mov	edi, [ebp+var_3C]
		mov	eax, [edi+54h]
		mov	ebx, [eax+0E0h]
		test	ebx, ebx
		jnz	loc_62B950DE
		lea	esi, [esi+0]

loc_62B95184:				; CODE XREF: silc_client_command_pending+60j
		mov	eax, [eax+0B8h]
		mov	[esp+58h+var_58], eax
		call	silc_mutex_unlock
		mov	al, 1

loc_62B95194:				; CODE XREF: silc_client_command_pending+14Dj
		add	esp, 4Ch
		pop	ebx
		pop	esi
		pop	edi
		leave
		retn
; ---------------------------------------------------------------------------

loc_62B9519C:				; CODE XREF: silc_client_command_pending+6Dj
		movzx	ecx, word ptr [eax+0E4h]
		mov	ecx, [ebx+ecx]
		jmp	loc_62B950F5
; ---------------------------------------------------------------------------
		align 4

loc_62B951AC:				; CODE XREF: silc_client_command_pending+C5j
		mov	[ebx+48h], eax
		movzx	edi, word ptr [ebx+54h]
		mov	[ebp+var_1C], edi
		jmp	short loc_62B9514C
; ---------------------------------------------------------------------------

loc_62B951B8:				; CODE XREF: silc_client_command_pending+AEj
		mov	ecx, [ebp+var_3C]
		mov	eax, [ecx+54h]
		jmp	loc_62B950D0
; ---------------------------------------------------------------------------

loc_62B951C3:				; CODE XREF: silc_client_command_pending+14j
					; silc_client_command_pending+1Fj
		xor	eax, eax
		jmp	short loc_62B95194
silc_client_command_pending endp

; ---------------------------------------------------------------------------
		align 4

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_62B951C8	proc near		; DATA XREF: silc_client_command_getkey+2F6o

var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_1C		= byte ptr -1Ch
arg_C		= byte ptr  14h
arg_10		= byte ptr  18h
arg_14		= dword	ptr  1Ch

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		sub	esp, 3Ch
		mov	ebx, [ebp+arg_14]
		mov	al, [ebp+arg_C]
		mov	dl, [ebp+arg_10]
		test	al, al
		jz	short loc_62B951E3
		cmp	dl, 9
		ja	short loc_62B95214

loc_62B951E3:				; CODE XREF: sub_62B951C8+14j
		mov	al, [ebx+30h]
		mov	dl, al
		and	edx, 0FFFFFFFBh
		mov	[ebx+30h], dl
		test	al, 4
		jz	short loc_62B951FC

loc_62B951F2:				; CODE XREF: sub_62B951C8+BCj
		xor	eax, eax

loc_62B951F4:				; CODE XREF: sub_62B951C8+9Aj
					; sub_62B951C8+CCj
		add	esp, 3Ch
		pop	ebx
		pop	esi
		pop	edi
		leave
		retn
; ---------------------------------------------------------------------------

loc_62B951FC:				; CODE XREF: sub_62B951C8+28j
		add	ebx, 8
		mov	[esp+48h+var_48], ebx
		call	silc_fsm_continue
		xor	eax, eax
		add	esp, 3Ch
		pop	ebx
		pop	esi
		pop	edi
		leave
		retn
; ---------------------------------------------------------------------------
		align 4

loc_62B95214:				; CODE XREF: sub_62B951C8+19j
		mov	esi, [ebx+4]
		mov	ecx, [esi+4Ch]
		mov	edi, [ecx+18h]
		mov	edi, [edi+48h]
		mov	esi, [ebx+3Ch]
		mov	[esp+48h+var_30], esi
		mov	esi, [ebx+38h]
		mov	[esp+48h+var_34], esi
		movzx	edx, dl
		mov	[esp+48h+var_38], edx
		movzx	edx, byte ptr [ebx+34h]
		mov	[esp+48h+var_3C], edx
		mov	[esp+48h+var_40], 0
		mov	edx, [ebx+4]
		mov	[esp+48h+var_44], edx
		mov	[esp+48h+var_48], ecx
		mov	[ebp+var_1C], al
		call	dword ptr [edi+10h]
		mov	al, [ebp+var_1C]
		cmp	al, 9
		ja	short loc_62B95264
		cmp	al, 3
		jz	short loc_62B95264
		mov	al, 1
		jmp	short loc_62B951F4
; ---------------------------------------------------------------------------

loc_62B95264:				; CODE XREF: sub_62B951C8+92j
					; sub_62B951C8+96j
		lea	esi, [ebx+8]
		mov	[esp+48h+var_44], offset silc_client_command_continue_error
		mov	[esp+48h+var_48], esi
		call	silc_fsm_next
		mov	al, [ebx+30h]
		mov	dl, al
		and	edx, 0FFFFFFFBh
		mov	[ebx+30h], dl
		test	al, 4
		jnz	loc_62B951F2
		mov	[esp+48h+var_48], esi
		call	silc_fsm_continue
		xor	eax, eax
		jmp	loc_62B951F4
sub_62B951C8	endp

; ---------------------------------------------------------------------------
		align 4

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_62B9529C	proc near		; DATA XREF: silc_client_command_kill+3E1o
					; silc_client_command_invite+688o ...

var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
arg_0		= dword	ptr  8
arg_8		= byte ptr  10h
arg_10		= dword	ptr  18h

		push	ebp
		mov	ebp, esp
		push	ebx
		sub	esp, 14h
		mov	ebx, [ebp+arg_10]
		cmp	[ebp+arg_8], 0
		jnz	short loc_62B952D4

loc_62B952AC:				; CODE XREF: sub_62B9529C+4Bj
		mov	al, [ebx+30h]
		mov	dl, al
		and	edx, 0FFFFFFFBh
		mov	[ebx+30h], dl
		test	al, 4
		jz	short loc_62B952C4
		add	esp, 14h
		pop	ebx
		leave
		retn
; ---------------------------------------------------------------------------
		align 4

loc_62B952C4:				; CODE XREF: sub_62B9529C+1Dj
		add	ebx, 8
		mov	[ebp+arg_0], ebx
		add	esp, 14h
		pop	ebx
		leave
		jmp	silc_fsm_continue
; ---------------------------------------------------------------------------

loc_62B952D4:				; CODE XREF: sub_62B9529C+Ej
		mov	[esp+18h+var_14], offset silc_client_command_continue_error
		lea	eax, [ebx+8]
		mov	[esp+18h+var_18], eax
		call	silc_fsm_next
		jmp	short loc_62B952AC
sub_62B9529C	endp

; ---------------------------------------------------------------------------
		align 4

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_62B952EC	proc near		; DATA XREF: silc_client_command_silcoper+7Bo
					; silc_client_command_oper+7Bo

var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		sub	esp, 1Ch
		mov	eax, [ebp+arg_0]
		mov	esi, [ebp+arg_4]
		mov	ebx, [ebp+arg_8]
		mov	edi, [ebx+60h]
		test	eax, eax
		jz	short loc_62B95309
		test	esi, esi
		jnz	short loc_62B95338

loc_62B95309:				; CODE XREF: sub_62B952EC+17j
					; sub_62B952EC+5Aj
		mov	[edi+4], esi
		mov	al, [ebx+30h]
		mov	dl, al
		and	edx, 0FFFFFFFBh
		mov	[ebx+30h], dl
		test	al, 4
		jz	short loc_62B95324
		add	esp, 1Ch
		pop	ebx
		pop	esi
		pop	edi
		leave
		retn
; ---------------------------------------------------------------------------
		align 4

loc_62B95324:				; CODE XREF: sub_62B952EC+2Dj
		add	ebx, 8
		mov	[ebp+arg_0], ebx
		add	esp, 1Ch
		pop	ebx
		pop	esi
		pop	edi
		leave
		jmp	silc_fsm_continue
; ---------------------------------------------------------------------------
		align 4

loc_62B95338:				; CODE XREF: sub_62B952EC+1Bj
		mov	[esp+28h+var_24], esi
		mov	[esp+28h+var_28], eax
		call	silc_memdup
		mov	[edi], eax
		jmp	short loc_62B95309
sub_62B952EC	endp

; Exported entry  47. silc_client_command_quit_final

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public silc_client_command_quit_final
silc_client_command_quit_final proc near ; DATA	XREF: silc_client_command_quit+7Bo

var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		push	esi
		push	ebx
		sub	esp, 20h
		mov	eax, [ebp+arg_4]
		mov	ebx, [eax+4]
		mov	edx, [ebx+4Ch]
		mov	ecx, [edx+18h]
		mov	ecx, [ecx+48h]
		mov	esi, [eax+3Ch]
		mov	[esp+28h+var_10], esi
		mov	esi, [eax+38h]
		mov	[esp+28h+var_14], esi
		mov	[esp+28h+var_18], 0
		movzx	eax, byte ptr [eax+34h]
		mov	[esp+28h+var_1C], eax
		mov	[esp+28h+var_20], 1
		mov	[esp+28h+var_24], ebx
		mov	[esp+28h+var_28], edx
		call	dword ptr [ecx+10h]
		mov	eax, [ebx+54h]
		mov	dword ptr [eax+128h], 2
		mov	dl, [eax+12Dh]
		test	dl, 2
		jnz	short loc_62B953C0
		or	edx, 2
		mov	[eax+12Dh], dl
		mov	eax, [ebx+54h]
		add	eax, 98h
		mov	[esp+28h+var_28], eax
		call	silc_fsm_event_signal

loc_62B953C0:				; CODE XREF: silc_client_command_quit_final+5Dj
		mov	eax, 3
		add	esp, 20h
		pop	ebx
		pop	esi
		leave
		retn
silc_client_command_quit_final endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_62B953CC	proc near		; CODE XREF: silc_client_command_cmode:loc_62B99354p
					; silc_client_command_watch:loc_62B9B8C8p

var_18		= dword	ptr -18h
var_14		= dword	ptr -14h

		push	ebp
		mov	ebp, esp
		push	ebx
		sub	esp, 14h
		mov	[esp+18h+var_14], 10h
		mov	[esp+18h+var_18], 1
		call	silc_calloc
		mov	ebx, eax
		test	eax, eax
		jz	short loc_62B95413
		mov	[esp+18h+var_14], 1
		mov	[esp+18h+var_18], 2
		call	silc_calloc
		mov	[ebx], eax
		test	eax, eax
		jz	short loc_62B9541B
		mov	[ebx+4], eax
		add	eax, 2
		mov	[ebx+0Ch], eax
		mov	[ebx+8], eax

loc_62B95413:				; CODE XREF: sub_62B953CC+1Fj
					; sub_62B953CC+51j
		mov	eax, ebx
		add	esp, 14h
		pop	ebx
		leave
		retn
; ---------------------------------------------------------------------------

loc_62B9541B:				; CODE XREF: sub_62B953CC+39j
		xor	ebx, ebx
		jmp	short loc_62B95413
sub_62B953CC	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  24. silc_client_command_call

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl silc_client_command_call(int, int, char *, int, char)
		public silc_client_command_call
silc_client_command_call proc near	; CODE XREF: silc_client_st_register_complete+230p

Str		= dword	ptr -58h
Control		= dword	ptr -54h
var_50		= dword	ptr -50h
var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h
arg_10		= byte ptr  18h

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		sub	esp, 4Ch
		mov	edi, [ebp+arg_0]
		mov	[ebp+var_1C], 0
		mov	[ebp+var_20], 0
		mov	[ebp+var_24], 0
		mov	[ebp+var_28], 0
		mov	esi, [ebp+arg_4]
		test	esi, esi
		jz	loc_62B95778
		mov	ebx, [ebp+arg_8]
		test	ebx, ebx
		jz	loc_62B95624
		mov	[esp+58h+Control], offset asc_62BA89D8 ; " "
		mov	eax, [ebp+arg_8]
		mov	[esp+58h+Str], eax ; Str
		call	strcspn
		mov	[esp+58h+Control], eax
		mov	edx, [ebp+arg_8]
		mov	[esp+58h+Str], edx
		call	silc_memdup
		mov	esi, eax
		test	eax, eax
		jz	loc_62B95764
		mov	eax, [edi+18h]
		mov	edx, [eax+58h]
		mov	[eax+60h], edx
		and	byte ptr [eax+68h], 0FDh

loc_62B95497:				; CODE XREF: silc_client_command_call+B0j
		mov	eax, [edi+18h]
		xchg	ax, ax

loc_62B9549C:				; CODE XREF: silc_client_command_call+A0j
		mov	ebx, [eax+60h]
		test	ebx, ebx
		jz	loc_62B95610
		test	byte ptr [eax+68h], 2
		jz	loc_62B95604
		movzx	edx, word ptr [eax+66h]
		mov	edx, [ebx+edx]

loc_62B954B8:				; CODE XREF: silc_client_command_call+1EBj
		mov	[eax+60h], edx
		mov	edx, [ebx+10h]
		test	edx, edx
		jz	short loc_62B9549C
		mov	[esp+58h+Control], esi ; Str2
		mov	[esp+58h+Str], edx ; Str1
		call	_stricmp
		test	eax, eax
		jnz	short loc_62B95497
		movzx	eax, byte ptr [ebx+14h]
		mov	[esp+58h+var_44], eax
		lea	eax, [ebp+var_1C]
		mov	[esp+58h+var_48], eax
		lea	eax, [ebp+var_28]
		mov	[esp+58h+var_4C], eax
		lea	eax, [ebp+var_24]
		mov	[esp+58h+var_50], eax
		lea	eax, [ebp+var_20]
		mov	[esp+58h+Control], eax
		mov	ecx, [ebp+arg_8]
		mov	[esp+58h+Str], ecx
		call	silc_parse_command_line
		mov	[esp+58h+Str], esi
		call	silc_free

loc_62B95509:				; CODE XREF: silc_client_command_call+38Aj
		mov	[esp+58h+Control], 68h
		mov	[esp+58h+Str], 1
		call	silc_calloc
		mov	edx, eax
		test	eax, eax
		jz	loc_62B95764
		mov	edi, [ebp+arg_4]
		mov	[eax+4], edi
		mov	al, [ebx+4]
		mov	[edx+34h], al
		mov	eax, [ebp+var_1C]
		mov	[edx+38h], eax
		mov	eax, [ebp+var_20]
		mov	[edx+3Ch], eax
		mov	eax, [ebp+var_24]
		mov	[edx+40h], eax
		mov	eax, [ebp+var_28]
		mov	[edx+44h], eax
		mov	eax, [edi+54h]
		mov	si, [eax+124h]
		mov	cx, [eax+124h]
		inc	ecx
		mov	[eax+124h], cx
		inc	si
		jnz	short loc_62B9557F
		mov	si, [eax+124h]
		mov	cx, [eax+124h]
		inc	ecx
		mov	[eax+124h], cx
		inc	esi

loc_62B9557F:				; CODE XREF: silc_client_command_call+146j
		mov	[edx+36h], si
		or	byte ptr [edx+64h], 3
		mov	eax, [edx+58h]
		and	eax, 3
		mov	[edx+58h], eax
		mov	word ptr [edx+54h], 0
		mov	word ptr [edx+56h], 0
		mov	byte ptr [edx+58h], 0
		mov	dword ptr [edx+50h], 0
		mov	dword ptr [edx+4Ch], 0
		mov	dword ptr [edx+48h], 0
		lea	edi, [edx+8]
		mov	[esp+58h+var_44], 0
		mov	[esp+58h+var_48], 0
		mov	[esp+58h+var_4C], offset sub_62B94AA4
		mov	[esp+58h+var_50], edx
		mov	edx, [ebp+arg_4]
		mov	eax, [edx+54h]
		add	eax, 40h
		mov	[esp+58h+Control], eax
		mov	[esp+58h+Str], edi
		call	silc_fsm_thread_init
		mov	eax, [ebx+8]
		mov	[esp+58h+Control], eax
		mov	[esp+58h+Str], edi
		call	silc_fsm_start_sync
		mov	eax, esi
		add	esp, 4Ch
		pop	ebx
		pop	esi
		pop	edi
		leave
		retn
; ---------------------------------------------------------------------------
		align 4

loc_62B95604:				; CODE XREF: silc_client_command_call+8Bj
		movzx	edx, word ptr [eax+64h]
		mov	edx, [ebx+edx]
		jmp	loc_62B954B8
; ---------------------------------------------------------------------------

loc_62B95610:				; CODE XREF: silc_client_command_call+81j
		mov	[esp+58h+Str], esi
		call	silc_free
		xor	esi, esi

loc_62B9561A:				; CODE XREF: silc_client_command_call+346j
		mov	eax, esi
		add	esp, 4Ch
		pop	ebx
		pop	esi
		pop	edi
		leave
		retn
; ---------------------------------------------------------------------------

loc_62B95624:				; CODE XREF: silc_client_command_call+38j
		mov	esi, [ebp+arg_C]
		test	esi, esi
		jz	loc_62B95764
		lea	eax, [ebp+arg_10]
		mov	[ebp+var_2C], eax
		mov	eax, [edi+18h]
		mov	edx, [eax+58h]
		mov	[eax+60h], edx
		and	byte ptr [eax+68h], 0FDh

loc_62B95642:				; CODE XREF: silc_client_command_call+25Cj
		mov	eax, [edi+18h]
		lea	esi, [esi+0]

loc_62B95648:				; CODE XREF: silc_client_command_call+24Cj
		mov	ebx, [eax+60h]
		test	ebx, ebx
		jz	loc_62B95764
		test	byte ptr [eax+68h], 2
		jz	loc_62B9576C
		movzx	edx, word ptr [eax+66h]
		mov	edx, [ebx+edx]

loc_62B95664:				; CODE XREF: silc_client_command_call+353j
		mov	[eax+60h], edx
		mov	edx, [ebx+10h]
		test	edx, edx
		jz	short loc_62B95648
		mov	[esp+58h+Control], esi ; Str2
		mov	[esp+58h+Str], edx ; Str1
		call	_stricmp
		test	eax, eax
		jnz	short loc_62B95642
		mov	eax, [ebp+var_1C]
		mov	edx, [ebp+var_20]
		mov	[ebp+var_30], ebx
		jmp	loc_62B9570E
; ---------------------------------------------------------------------------

loc_62B9568C:				; CODE XREF: silc_client_command_call+33Ej
		mov	ecx, [ebp+var_24]
		test	ecx, ecx
		jz	loc_62B95764
		test	eax, eax
		jz	loc_62B95764
		mov	[ebp+var_28], eax
		mov	eax, [ebp+var_1C]
		lea	ebx, [edx+eax*4]
		mov	ecx, 0FFFFFFFFh
		mov	edi, esi
		xor	eax, eax
		repne scasb
		not	ecx
		dec	ecx
		mov	[esp+58h+Control], ecx
		mov	[esp+58h+Str], esi
		call	silc_memdup
		mov	[ebx], eax
		mov	edx, [ebp+var_20]
		mov	ebx, [ebp+var_1C]
		shl	ebx, 2
		mov	edi, [edx+ebx]
		test	edi, edi
		jz	loc_62B95764
		mov	ecx, 0FFFFFFFFh
		mov	edi, esi
		xor	eax, eax
		repne scasb
		not	ecx
		dec	ecx
		mov	eax, [ebp+var_24]
		mov	[eax+ebx], ecx
		mov	eax, [ebp+var_1C]
		mov	ecx, [ebp+var_28]
		mov	[ecx+eax*4], eax
		mov	eax, [ebp+var_1C]
		inc	eax
		mov	[ebp+var_1C], eax
		add	[ebp+var_2C], 4
		mov	ecx, [ebp+var_2C]
		mov	esi, [ecx-4]
		test	esi, esi
		jz	loc_62B957A7

loc_62B9570E:				; CODE XREF: silc_client_command_call+267j
		lea	eax, ds:4[eax*4]
		mov	[esp+58h+Control], eax
		mov	[esp+58h+Str], edx
		call	silc_realloc
		mov	[ebp+var_20], eax
		mov	eax, [ebp+var_1C]
		lea	eax, ds:4[eax*4]
		mov	[esp+58h+Control], eax
		mov	eax, [ebp+var_24]
		mov	[esp+58h+Str], eax
		call	silc_realloc
		mov	[ebp+var_24], eax
		mov	eax, [ebp+var_1C]
		lea	eax, ds:4[eax*4]
		mov	[esp+58h+Control], eax
		mov	eax, [ebp+var_28]
		mov	[esp+58h+Str], eax
		call	silc_realloc
		mov	edx, [ebp+var_20]
		test	edx, edx
		jnz	loc_62B9568C

loc_62B95764:				; CODE XREF: silc_client_command_call+64j
					; silc_client_command_call+101j ...
		xor	esi, esi
		jmp	loc_62B9561A
; ---------------------------------------------------------------------------
		align 4

loc_62B9576C:				; CODE XREF: silc_client_command_call+237j
		movzx	edx, word ptr [eax+64h]
		mov	edx, [ebx+edx]
		jmp	loc_62B95664
; ---------------------------------------------------------------------------

loc_62B95778:				; CODE XREF: silc_client_command_call+2Dj
		mov	eax, [edi+18h]
		mov	eax, [eax+48h]
		mov	[esp+58h+var_4C], offset aYouAreNotConne ; "You	are not	connected to a server, plea"...
		mov	[esp+58h+var_50], 3
		mov	[esp+58h+Control], 0
		mov	[esp+58h+Str], edi
		call	dword ptr [eax]
		xor	esi, esi
		mov	eax, esi
		add	esp, 4Ch
		pop	ebx
		pop	esi
		pop	edi
		leave
		retn
; ---------------------------------------------------------------------------

loc_62B957A7:				; CODE XREF: silc_client_command_call+2E8j
		mov	ebx, [ebp+var_30]
		jmp	loc_62B95509
silc_client_command_call endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  22. silc_client_command

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public silc_client_command
silc_client_command proc near		; DATA XREF: silc_client_connection_st_packet:loc_62B81F28o

var_58		= dword	ptr -58h
var_54		= dword	ptr -54h
var_50		= dword	ptr -50h
var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_3C		= dword	ptr -3Ch
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_1C		= dword	ptr -1Ch
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		sub	esp, 4Ch
		mov	esi, [ebp+arg_4]
		mov	eax, [ebp+arg_8]
		mov	edi, [esi+4Ch]
		mov	edx, [eax+0Ch]
		mov	eax, [eax+10h]
		sub	eax, edx
		mov	[esp+58h+var_54], eax
		mov	[esp+58h+var_58], edx
		call	silc_command_payload_parse
		mov	ebx, eax
		test	eax, eax
		jz	short loc_62B957FB
		mov	[esp+58h+var_58], eax
		call	silc_command_get_args
		mov	[ebp+var_2C], eax
		mov	[esp+58h+var_58], ebx
		call	silc_command_get
		dec	al
		jz	short loc_62B95808

loc_62B957F3:				; CODE XREF: silc_client_command+5Fj
					; silc_client_command+7Dj ...
		mov	[esp+58h+var_58], ebx
		call	silc_command_payload_free

loc_62B957FB:				; CODE XREF: silc_client_command+2Aj
		mov	eax, 3
		add	esp, 4Ch
		pop	ebx
		pop	esi
		pop	edi
		leave
		retn
; ---------------------------------------------------------------------------

loc_62B95808:				; CODE XREF: silc_client_command+41j
		mov	eax, [esi+54h]
		cmp	byte ptr [eax+38h], 0
		jnz	short loc_62B957F3
		lea	eax, [ebp+var_1C]
		mov	[esp+58h+var_50], eax
		mov	[esp+58h+var_54], 3
		mov	eax, [ebp+var_2C]
		mov	[esp+58h+var_58], eax
		call	silc_argument_get_arg_type
		test	eax, eax
		jz	short loc_62B957F3
		mov	edx, [ebp+var_1C]
		mov	[esp+58h+var_54], edx
		mov	[esp+58h+var_58], eax
		call	silc_attribute_payload_parse
		test	eax, eax
		jz	short loc_62B957F3
		mov	[esp+58h+var_50], eax
		mov	[esp+58h+var_54], esi
		mov	[esp+58h+var_58], edi
		mov	[ebp+var_30], eax
		call	silc_client_attributes_process
		mov	edi, eax
		test	eax, eax
		mov	edx, [ebp+var_30]
		jz	loc_62B9591C
		mov	ecx, [eax+4]
		mov	edx, [eax+8]
		sub	edx, ecx
		mov	[esp+58h+var_58], ebx
		mov	[ebp+var_30], edx
		mov	[ebp+var_34], ecx
		call	silc_command_get_ident
		mov	edx, [ebp+var_30]
		mov	[esp+58h+var_3C], edx
		mov	ecx, [ebp+var_34]
		mov	[esp+58h+var_40], ecx
		mov	[esp+58h+var_44], 0Bh
		mov	[esp+58h+var_48], 1
		movzx	eax, ax
		mov	[esp+58h+var_4C], eax
		mov	[esp+58h+var_50], 0
		mov	[esp+58h+var_54], 0
		mov	[esp+58h+var_58], 1
		call	silc_command_reply_payload_encode_va
		mov	edx, eax
		test	eax, eax
		jz	short loc_62B95929
		mov	ecx, [eax+4]
		mov	eax, [eax+8]
		sub	eax, ecx
		mov	[esp+58h+var_48], eax
		mov	[esp+58h+var_4C], ecx
		mov	[esp+58h+var_50], 0
		mov	[esp+58h+var_54], 0Ch
		mov	eax, [esi+3Ch]
		mov	[esp+58h+var_58], eax
		mov	[ebp+var_30], edx
		call	silc_packet_send
		mov	edx, [ebp+var_30]
		mov	eax, [edx]
		mov	[esp+58h+var_58], eax
		call	silc_free
		mov	edx, [ebp+var_30]
		mov	[esp+58h+var_58], edx
		call	silc_free
		mov	eax, [edi]
		mov	[esp+58h+var_58], eax
		call	silc_free
		mov	[esp+58h+var_58], edi
		call	silc_free
		jmp	loc_62B957F3
; ---------------------------------------------------------------------------

loc_62B9591C:				; CODE XREF: silc_client_command+ACj
		mov	[esp+58h+var_58], edx
		call	silc_attribute_payload_list_free
		jmp	loc_62B957F3
; ---------------------------------------------------------------------------

loc_62B95929:				; CODE XREF: silc_client_command+10Dj
		mov	eax, edi
		call	sub_62B949E8
		jmp	loc_62B957F3
silc_client_command endp

; ---------------------------------------------------------------------------
		align 4
; Exported entry  82. silc_client_command_send_argv

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public silc_client_command_send_argv
silc_client_command_send_argv proc near	; CODE XREF: silc_client_get_clients_by_list+372p
					; silc_client_st_resume_resolve_channels+313p

var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_19		= byte ptr -19h
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h
arg_10		= dword	ptr  18h
arg_14		= dword	ptr  1Ch
arg_18		= dword	ptr  20h
arg_1C		= dword	ptr  24h
arg_20		= dword	ptr  28h

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		sub	esp, 3Ch
		mov	esi, [ebp+arg_4]
		mov	edi, [ebp+arg_8]
		mov	edx, edi
		mov	[ebp+var_19], dl
		test	esi, esi
		jz	loc_62B95AE4
		mov	eax, [ebp+arg_C]
		test	eax, eax
		jz	loc_62B95AE4
		mov	[esp+48h+var_44], 68h
		mov	[esp+48h+var_48], 1
		call	silc_calloc
		mov	ebx, eax
		test	eax, eax
		jz	loc_62B95AE4
		mov	[eax+4], esi
		mov	eax, edi
		mov	[ebx+34h], al
		mov	eax, [esi+54h]
		test	byte ptr [eax+12Dh], 2
		jnz	loc_62B95ACA
		mov	cx, [ebx+36h]
		test	cx, cx
		jnz	short loc_62B959D3
		mov	cx, [eax+124h]
		mov	dx, [eax+124h]
		inc	edx
		mov	[eax+124h], dx
		inc	cx
		jnz	short loc_62B959CF
		mov	cx, [eax+124h]
		mov	dx, [eax+124h]
		inc	edx
		mov	[eax+124h], dx
		inc	ecx

loc_62B959CF:				; CODE XREF: silc_client_command_send_argv+7Ej
		mov	[ebx+36h], cx

loc_62B959D3:				; CODE XREF: silc_client_command_send_argv+64j
		movzx	ecx, cx
		mov	[esp+48h+var_34], ecx
		mov	eax, [ebp+arg_20]
		mov	[esp+48h+var_38], eax
		mov	eax, [ebp+arg_1C]
		mov	[esp+48h+var_3C], eax
		mov	eax, [ebp+arg_18]
		mov	[esp+48h+var_40], eax
		mov	eax, [ebp+arg_14]
		mov	[esp+48h+var_44], eax
		movzx	eax, [ebp+var_19]
		mov	[esp+48h+var_48], eax
		call	silc_command_payload_encode
		mov	edi, eax
		test	eax, eax
		jz	loc_62B95ACA
		mov	edx, [eax+4]
		mov	eax, [eax+8]
		sub	eax, edx
		mov	[esp+48h+var_38], eax
		mov	[esp+48h+var_3C], edx
		mov	[esp+48h+var_40], 0
		mov	[esp+48h+var_44], 0Bh
		mov	eax, [esi+3Ch]
		mov	[esp+48h+var_48], eax
		call	silc_packet_send
		test	al, al
		jz	short loc_62B95AB8
		mov	eax, [ebp+arg_10]
		mov	[esp+48h+var_48], eax
		mov	ecx, [ebp+arg_C]
		mov	edx, ebx
		mov	eax, esi
		call	sub_62B94F54
		mov	eax, [edi]
		mov	[esp+48h+var_48], eax
		call	silc_free
		mov	[esp+48h+var_48], edi
		call	silc_free
		mov	ax, [ebx+36h]
		test	ax, ax
		jz	short loc_62B95AD0
		lea	edi, [ebx+8]
		mov	[esp+48h+var_34], 0
		mov	[esp+48h+var_38], 0
		mov	[esp+48h+var_3C], offset sub_62B94AA4
		mov	[esp+48h+var_40], ebx
		mov	eax, [esi+54h]
		add	eax, 40h
		mov	[esp+48h+var_44], eax
		mov	[esp+48h+var_48], edi
		call	silc_fsm_thread_init
		mov	[esp+48h+var_44], offset silc_client_command_reply_wait
		mov	[esp+48h+var_48], edi
		call	silc_fsm_start_sync
		mov	ax, [ebx+36h]
		add	esp, 3Ch
		pop	ebx
		pop	esi
		pop	edi
		leave
		retn
; ---------------------------------------------------------------------------
		align 4

loc_62B95AB8:				; CODE XREF: silc_client_command_send_argv+101j
		mov	eax, [edi]
		mov	[esp+48h+var_48], eax
		call	silc_free
		mov	[esp+48h+var_48], edi
		call	silc_free

loc_62B95ACA:				; CODE XREF: silc_client_command_send_argv+57j
					; silc_client_command_send_argv+CEj
		mov	word ptr [ebx+36h], 0

loc_62B95AD0:				; CODE XREF: silc_client_command_send_argv+12Ej
		mov	[esp+48h+var_48], ebx
		call	silc_client_command_free
		xor	eax, eax
		add	esp, 3Ch
		pop	ebx
		pop	esi
		pop	edi
		leave
		retn
; ---------------------------------------------------------------------------
		align 4

loc_62B95AE4:				; CODE XREF: silc_client_command_send_argv+16j
					; silc_client_command_send_argv+21j ...
		xor	eax, eax
		add	esp, 3Ch
		pop	ebx
		pop	esi
		pop	edi
		leave
		retn
silc_client_command_send_argv endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_62B95AF0	proc near		; CODE XREF: sub_62B95C0C+32p
					; silc_client_command_send+A8p

var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
arg_0		= byte ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h
arg_10		= dword	ptr  18h

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		sub	esp, 2Ch
		mov	esi, edx
		mov	edi, ecx
		mov	cl, [ebp+arg_0]
		mov	eax, [edx+54h]
		test	byte ptr [eax+12Dh], 2
		jnz	loc_62B95BE4
		mov	dx, [edi+36h]
		test	dx, dx
		jz	loc_62B95BA8

loc_62B95B1D:				; CODE XREF: sub_62B95AF0+EDj
		mov	eax, [ebp+arg_10]
		mov	[esp+38h+var_2C], eax
		mov	eax, [ebp+arg_C]
		mov	[esp+38h+var_30], eax
		movzx	edx, dx
		mov	[esp+38h+var_34], edx
		movzx	ecx, cl
		mov	[esp+38h+var_38], ecx
		call	silc_command_payload_encode_vap
		mov	ebx, eax
		test	eax, eax
		jz	loc_62B95BE4
		mov	edx, [eax+4]
		mov	eax, [eax+8]
		sub	eax, edx
		mov	[esp+38h+var_28], eax
		mov	[esp+38h+var_2C], edx
		mov	[esp+38h+var_30], 0
		mov	[esp+38h+var_34], 0Bh
		mov	eax, [esi+3Ch]
		mov	[esp+38h+var_38], eax
		call	silc_packet_send
		test	al, al
		jz	short loc_62B95BF0
		mov	eax, [ebp+arg_8]
		mov	[esp+38h+var_38], eax
		mov	ecx, [ebp+arg_4]
		mov	edx, edi
		mov	eax, esi
		call	sub_62B94F54
		mov	eax, [ebx]
		mov	[esp+38h+var_38], eax
		call	silc_free
		mov	[esp+38h+var_38], ebx
		call	silc_free
		mov	ax, [edi+36h]
		add	esp, 2Ch
		pop	ebx
		pop	esi
		pop	edi
		leave
		retn
; ---------------------------------------------------------------------------
		align 4

loc_62B95BA8:				; CODE XREF: sub_62B95AF0+27j
		mov	dx, [eax+124h]
		mov	bx, [eax+124h]
		inc	ebx
		mov	[eax+124h], bx
		inc	dx
		jnz	short loc_62B95BD9
		mov	dx, [eax+124h]
		mov	bx, [eax+124h]
		inc	ebx
		mov	[eax+124h], bx
		inc	edx

loc_62B95BD9:				; CODE XREF: sub_62B95AF0+D0j
		mov	[edi+36h], dx
		jmp	loc_62B95B1D
; ---------------------------------------------------------------------------
		align 4

loc_62B95BE4:				; CODE XREF: sub_62B95AF0+1Aj
					; sub_62B95AF0+51j
		xor	eax, eax
		add	esp, 2Ch
		pop	ebx
		pop	esi
		pop	edi
		leave
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_62B95BF0:				; CODE XREF: sub_62B95AF0+84j
		mov	eax, [ebx]
		mov	[esp+38h+var_38], eax
		call	silc_free
		mov	[esp+34h+var_34], ebx
		call	silc_free
		xor	eax, eax
		add	esp, 2Ch
		pop	ebx
		pop	esi
		pop	edi
		leave
		retn
sub_62B95AF0	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_62B95C0C	proc near		; CODE XREF: silc_client_command_detach+35p
					; silc_client_command_umode+15Fp ...

var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= byte ptr  10h
arg_C		= dword	ptr  14h
arg_10		= dword	ptr  18h
arg_14		= dword	ptr  1Ch
arg_18		= byte ptr  20h

		push	ebp
		mov	ebp, esp
		sub	esp, 28h
		mov	edx, [ebp+arg_0]
		lea	ecx, [ebp+arg_18]
		mov	eax, [edx+4Ch]
		mov	[esp+28h+var_18], ecx
		mov	ecx, [ebp+arg_14]
		mov	[esp+28h+var_1C], ecx
		mov	ecx, [ebp+arg_10]
		mov	[esp+28h+var_20], ecx
		mov	ecx, [ebp+arg_C]
		mov	[esp+28h+var_24], ecx
		movzx	ecx, [ebp+arg_8]
		mov	[esp+28h+var_28], ecx
		mov	ecx, [ebp+arg_4]
		call	sub_62B95AF0
		leave
		retn
sub_62B95C0C	endp

; ---------------------------------------------------------------------------
		align 4
; Exported entry  29. silc_client_command_detach

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public silc_client_command_detach
silc_client_command_detach proc	near	; DATA XREF: silc_client_commands_unregister+E05o
					; silc_client_commands_register+9ABo

var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		push	esi
		push	ebx
		sub	esp, 20h
		mov	ebx, [ebp+arg_4]
		mov	[esp+28h+var_14], 0
		mov	[esp+28h+var_18], 0
		mov	[esp+28h+var_1C], 0
		movzx	eax, byte ptr [ebx+34h]
		mov	[esp+28h+var_20], eax
		mov	[esp+28h+var_24], ebx
		mov	eax, [ebx+4]
		mov	[esp+28h+var_28], eax
		call	sub_62B95C0C
		mov	edx, [ebx+4]
		mov	eax, [edx+4Ch]
		mov	ecx, [eax+18h]
		mov	ecx, [ecx+48h]
		mov	esi, [ebx+3Ch]
		mov	[esp+28h+var_10], esi
		mov	esi, [ebx+38h]
		mov	[esp+28h+var_14], esi
		mov	[esp+28h+var_18], 0
		movzx	ebx, byte ptr [ebx+34h]
		mov	[esp+28h+var_1C], ebx
		mov	[esp+28h+var_20], 1
		mov	[esp+28h+var_24], edx
		mov	[esp+28h+var_28], eax
		call	dword ptr [ecx+10h]
		mov	[esp+28h+var_24], offset silc_client_command_reply_wait
		mov	eax, [ebp+arg_0]
		mov	[esp+28h+var_28], eax
		call	silc_fsm_next
		xor	eax, eax
		add	esp, 20h
		pop	ebx
		pop	esi
		leave
		retn
silc_client_command_detach endp

; ---------------------------------------------------------------------------
		align 4
; Exported entry  87. silc_client_command_umode

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public silc_client_command_umode
silc_client_command_umode proc near	; DATA XREF: silc_client_commands_unregister+A95o
					; silc_client_commands_register+744o

var_68		= dword	ptr -68h
var_64		= dword	ptr -64h
var_60		= dword	ptr -60h
var_5C		= dword	ptr -5Ch
var_58		= dword	ptr -58h
var_54		= dword	ptr -54h
var_50		= dword	ptr -50h
var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_1C		= byte ptr -1Ch
var_1B		= byte ptr -1Bh
var_1A		= byte ptr -1Ah
var_19		= byte ptr -19h
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		sub	esp, 5Ch
		mov	esi, [ebp+arg_4]
		mov	eax, [esi+4]
		mov	[ebp+var_30], eax
		mov	edx, [esi+38h]
		mov	[ebp+var_34], edx
		cmp	edx, 1
		jbe	loc_62B95FC0
		mov	edx, [ebp+var_30]
		mov	eax, [edx]
		mov	ebx, [eax+3ACh]
		mov	ecx, [esi+3Ch]
		mov	[ebp+var_38], ecx
		mov	edx, [ecx+4]
		xor	eax, eax
		cmp	byte ptr [edx],	2Dh
		setnz	al
		mov	[ebp+var_2C], eax
		inc	edx
		xor	eax, eax
		mov	ecx, 0FFFFFFFFh
		mov	edi, edx
		repne scasb
		not	ecx
		mov	edi, ecx
		dec	edi
		jz	loc_62B95DB3
		xor	ecx, ecx
		xor	eax, eax
		nop

loc_62B95D38:				; CODE XREF: silc_client_command_umode+D5j
		mov	cl, [edx+ecx]
		sub	ecx, 49h
		cmp	cl, 2Eh		; switch 47 cases
		jbe	short loc_62B95D90

loc_62B95D43:				; CODE XREF: silc_client_command_umode+B7j
					; DATA XREF: .rdata:off_62BA89F4o
		mov	edx, [ebp+var_30] ; jumptable 62B95D93 default case
		mov	eax, [edx+4Ch]
		mov	edx, [eax+18h]
		mov	edx, [edx+48h]
		mov	ecx, [ebp+var_38]
		mov	[esp+68h+var_50], ecx
		mov	ecx, [ebp+var_34]
		mov	[esp+68h+var_54], ecx
		mov	[esp+68h+var_58], 25h
		movzx	ecx, byte ptr [esi+34h]
		mov	[esp+68h+var_5C], ecx
		mov	[esp+68h+var_60], 0
		mov	ecx, [ebp+var_30]
		mov	[esp+68h+var_64], ecx
		mov	[esp+68h+var_68], eax
		call	dword ptr [edx+10h]
		mov	eax, 3
		add	esp, 5Ch
		pop	ebx
		pop	esi
		pop	edi
		leave
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_62B95D90:				; CODE XREF: silc_client_command_umode+65j
		movzx	ecx, cl
		jmp	ds:off_62BA89F4[ecx*4] ; switch	jump
; ---------------------------------------------------------------------------
		align 4

loc_62B95D9C:				; CODE XREF: silc_client_command_umode+B7j
					; DATA XREF: .rdata:off_62BA89F4o
		mov	ecx, [ebp+var_2C] ; jumptable 62B95D93 case 46
		test	ecx, ecx
		jz	loc_62B95F88
		or	bh, 8
		xchg	ax, ax

loc_62B95DAC:				; CODE XREF: silc_client_command_umode+1CEj
					; silc_client_command_umode+1E2j ...
		inc	eax
		mov	ecx, eax
		cmp	edi, eax
		ja	short loc_62B95D38

loc_62B95DB3:				; CODE XREF: silc_client_command_umode+51j
		mov	eax, ebx
		shr	eax, 18h
		mov	[ebp+var_1C], al
		mov	eax, ebx
		shr	eax, 10h
		mov	[ebp+var_1B], al
		mov	eax, ebx
		shr	eax, 8
		mov	[ebp+var_1A], al
		mov	[ebp+var_19], bl
		mov	edx, [ebp+var_30]
		mov	eax, [edx+54h]
		mov	eax, [eax+0F4h]
		test	eax, eax
		jz	loc_62B9602D
		mov	edx, [eax+4]
		mov	eax, [eax+8]
		sub	eax, edx

loc_62B95DEA:				; CODE XREF: silc_client_command_umode+353j
		mov	[esp+68h+var_3C], 4
		lea	ecx, [ebp+var_1C]
		mov	[esp+68h+var_40], ecx
		mov	[esp+68h+var_44], 2
		mov	[esp+68h+var_48], eax
		mov	[esp+68h+var_4C], edx
		mov	[esp+68h+var_50], 1
		mov	[esp+68h+var_54], 2
		mov	[esp+68h+var_58], 0
		mov	[esp+68h+var_5C], 0
		movzx	eax, byte ptr [esi+34h]
		mov	[esp+68h+var_60], eax
		mov	[esp+68h+var_64], esi
		mov	ecx, [ebp+var_30]
		mov	[esp+68h+var_68], ecx
		call	sub_62B95C0C
		mov	edx, [esi+4]
		mov	eax, [edx+4Ch]
		mov	ecx, [eax+18h]
		mov	ecx, [ecx+48h]
		mov	ebx, [esi+3Ch]
		mov	[esp+68h+var_50], ebx
		mov	ebx, [esi+38h]
		mov	[esp+68h+var_54], ebx
		mov	[esp+68h+var_58], 0
		movzx	ebx, byte ptr [esi+34h]
		mov	[esp+68h+var_5C], ebx
		mov	[esp+68h+var_60], 1
		mov	[esp+68h+var_64], edx
		mov	[esp+68h+var_68], eax
		call	dword ptr [ecx+10h]
		mov	[esp+64h+var_60], offset silc_client_command_reply_wait
		mov	eax, [ebp+arg_0]
		mov	[esp+64h+var_64], eax
		call	silc_fsm_next
		xor	eax, eax
		add	esp, 5Ch
		pop	ebx
		pop	esi
		pop	edi
		leave
		retn
; ---------------------------------------------------------------------------
		align 4

loc_62B95E9C:				; CODE XREF: silc_client_command_umode+B7j
					; DATA XREF: .rdata:off_62BA89F4o
		mov	ecx, [ebp+var_2C] ; jumptable 62B95D93 case 43
		test	ecx, ecx
		jz	loc_62B95F68
		or	bl, 80h
		jmp	loc_62B95DAC
; ---------------------------------------------------------------------------
		align 10h

loc_62B95EB0:				; CODE XREF: silc_client_command_umode+B7j
					; DATA XREF: .rdata:off_62BA89F4o
		mov	ecx, [ebp+var_2C] ; jumptable 62B95D93 case 42
		test	ecx, ecx
		jz	loc_62B95F78
		or	ebx, 1
		jmp	loc_62B95DAC
; ---------------------------------------------------------------------------
		align 4

loc_62B95EC4:				; CODE XREF: silc_client_command_umode+B7j
					; DATA XREF: .rdata:off_62BA89F4o
		mov	ecx, [ebp+var_2C] ; jumptable 62B95D93 case 39
		test	ecx, ecx
		jz	loc_62B95F70
		or	ebx, 20h
		jmp	loc_62B95DAC
; ---------------------------------------------------------------------------
		align 4

loc_62B95ED8:				; CODE XREF: silc_client_command_umode+B7j
					; DATA XREF: .rdata:off_62BA89F4o
		mov	ecx, [ebp+var_2C] ; jumptable 62B95D93 case 41
		test	ecx, ecx
		jz	loc_62B95F80
		or	ebx, 2
		jmp	loc_62B95DAC
; ---------------------------------------------------------------------------
		align 4

loc_62B95EEC:				; CODE XREF: silc_client_command_umode+B7j
					; DATA XREF: .rdata:off_62BA89F4o
		mov	ecx, [ebp+var_2C] ; jumptable 62B95D93 case 32
		test	ecx, ecx
		jz	loc_62B95FA0
		or	ebx, 8
		jmp	loc_62B95DAC
; ---------------------------------------------------------------------------
		align 10h

loc_62B95F00:				; CODE XREF: silc_client_command_umode+B7j
					; DATA XREF: .rdata:off_62BA89F4o
		mov	ecx, [ebp+var_2C] ; jumptable 62B95D93 case 31
		test	ecx, ecx
		jz	loc_62B95F90
		or	ebx, 40h
		jmp	loc_62B95DAC
; ---------------------------------------------------------------------------
		align 4

loc_62B95F14:				; CODE XREF: silc_client_command_umode+B7j
					; DATA XREF: .rdata:off_62BA89F4o
		mov	ecx, [ebp+var_2C] ; jumptable 62B95D93 case 7
		test	ecx, ecx
		jz	loc_62B95FB0
		or	bh, 2
		jmp	loc_62B95DAC
; ---------------------------------------------------------------------------
		align 4

loc_62B95F28:				; CODE XREF: silc_client_command_umode+B7j
					; DATA XREF: .rdata:off_62BA89F4o
		mov	ecx, [ebp+var_2C] ; jumptable 62B95D93 case 25
		test	ecx, ecx
		jz	short loc_62B95F98
		or	ebx, 10h
		jmp	loc_62B95DAC
; ---------------------------------------------------------------------------
		align 4

loc_62B95F38:				; CODE XREF: silc_client_command_umode+B7j
					; DATA XREF: .rdata:off_62BA89F4o
		mov	ecx, [ebp+var_2C] ; jumptable 62B95D93 case 0
		test	ecx, ecx
		jz	short loc_62B95FA8
		or	bh, 10h
		jmp	loc_62B95DAC
; ---------------------------------------------------------------------------
		align 4

loc_62B95F48:				; CODE XREF: silc_client_command_umode+B7j
					; DATA XREF: .rdata:off_62BA89F4o
		mov	ecx, [ebp+var_2C] ; jumptable 62B95D93 case 30
		test	ecx, ecx
		jz	short loc_62B95FB8
		or	ebx, 4
		jmp	loc_62B95DAC
; ---------------------------------------------------------------------------
		align 4

loc_62B95F58:				; CODE XREF: silc_client_command_umode+B7j
					; DATA XREF: .rdata:off_62BA89F4o
		mov	ebx, [ebp+var_2C] ; jumptable 62B95D93 case 24
		neg	ebx
		and	ebx, 0AFFh
		jmp	loc_62B95DAC
; ---------------------------------------------------------------------------

loc_62B95F68:				; CODE XREF: silc_client_command_umode+1C5j
		and	bl, 7Fh
		jmp	loc_62B95DAC
; ---------------------------------------------------------------------------

loc_62B95F70:				; CODE XREF: silc_client_command_umode+1EDj
		and	ebx, 0FFFFFFDFh
		jmp	loc_62B95DAC
; ---------------------------------------------------------------------------

loc_62B95F78:				; CODE XREF: silc_client_command_umode+1D9j
		and	ebx, 0FFFFFFFEh
		jmp	loc_62B95DAC
; ---------------------------------------------------------------------------

loc_62B95F80:				; CODE XREF: silc_client_command_umode+201j
		and	ebx, 0FFFFFFFDh
		jmp	loc_62B95DAC
; ---------------------------------------------------------------------------

loc_62B95F88:				; CODE XREF: silc_client_command_umode+C5j
		and	bh, 0F7h
		jmp	loc_62B95DAC
; ---------------------------------------------------------------------------

loc_62B95F90:				; CODE XREF: silc_client_command_umode+229j
		and	ebx, 0FFFFFFBFh
		jmp	loc_62B95DAC
; ---------------------------------------------------------------------------

loc_62B95F98:				; CODE XREF: silc_client_command_umode+251j
		and	ebx, 0FFFFFFEFh
		jmp	loc_62B95DAC
; ---------------------------------------------------------------------------

loc_62B95FA0:				; CODE XREF: silc_client_command_umode+215j
		and	ebx, 0FFFFFFF7h
		jmp	loc_62B95DAC
; ---------------------------------------------------------------------------

loc_62B95FA8:				; CODE XREF: silc_client_command_umode+261j
		and	bh, 0EFh
		jmp	loc_62B95DAC
; ---------------------------------------------------------------------------

loc_62B95FB0:				; CODE XREF: silc_client_command_umode+23Dj
		and	bh, 0FDh
		jmp	loc_62B95DAC
; ---------------------------------------------------------------------------

loc_62B95FB8:				; CODE XREF: silc_client_command_umode+271j
		and	ebx, 0FFFFFFFBh
		jmp	loc_62B95DAC
; ---------------------------------------------------------------------------

loc_62B95FC0:				; CODE XREF: silc_client_command_umode+1Bj
		mov	ecx, eax
		mov	eax, [eax+4Ch]
		mov	edx, [eax+18h]
		mov	edx, [edx+48h]
		mov	[esp+68h+var_5C], offset aUsageUmodeMode ; "Usage: /UMODE +|-<modes>"
		mov	[esp+68h+var_60], 0
		mov	[esp+68h+var_64], ecx
		mov	[esp+68h+var_68], eax
		call	dword ptr [edx]
		mov	edx, [esi+4]
		mov	eax, [edx+4Ch]
		mov	ecx, [eax+18h]
		mov	ecx, [ecx+48h]
		mov	ebx, [esi+3Ch]
		mov	[esp+64h+var_4C], ebx
		mov	ebx, [esi+38h]
		mov	[esp+64h+var_50], ebx
		mov	[esp+64h+var_54], 1Dh
		movzx	ebx, byte ptr [esi+34h]
		mov	[esp+64h+var_58], ebx
		mov	[esp+64h+var_5C], 0
		mov	[esp+64h+var_60], edx
		mov	[esp+64h+var_64], eax
		call	dword ptr [ecx+10h]
		mov	eax, 3
		add	esp, 5Ch
		pop	ebx
		pop	esi
		pop	edi
		leave
		retn
; ---------------------------------------------------------------------------

loc_62B9602D:				; CODE XREF: silc_client_command_umode+100j
		xor	edx, edx
		jmp	loc_62B95DEA
silc_client_command_umode endp

; Exported entry  40. silc_client_command_motd

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public silc_client_command_motd
silc_client_command_motd proc near	; DATA XREF: silc_client_commands_unregister+9E5o
					; silc_client_commands_register+6C9o

var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		sub	esp, 3Ch
		mov	ebx, [ebp+arg_4]
		mov	edx, [ebx+4]
		mov	eax, [ebx+38h]
		lea	ecx, [eax-1]
		cmp	ecx, 1
		jbe	short loc_62B960C0
		mov	eax, [edx+4Ch]
		mov	ecx, [eax+18h]
		mov	ecx, [ecx+48h]
		mov	[esp+48h+var_3C], offset aUsageMotdServe ; "Usage: /MOTD [<server>]"
		mov	[esp+48h+var_40], 0
		mov	[esp+48h+var_44], edx
		mov	[esp+48h+var_48], eax
		call	dword ptr [ecx]
		mov	ecx, [ebx+4]
		mov	edx, [ecx+4Ch]
		mov	eax, [edx+18h]
		mov	eax, [eax+48h]
		mov	edi, [eax+10h]
		cmp	dword ptr [ebx+38h], 1
		sbb	eax, eax
		add	eax, 1Eh
		mov	esi, [ebx+3Ch]
		mov	[esp+48h+var_30], esi
		mov	esi, [ebx+38h]
		mov	[esp+48h+var_34], esi
		mov	[esp+48h+var_38], eax
		movzx	eax, byte ptr [ebx+34h]
		mov	[esp+48h+var_3C], eax
		mov	[esp+48h+var_40], 0
		mov	[esp+48h+var_44], ecx
		mov	[esp+48h+var_48], edx
		call	edi
		mov	eax, 3
		add	esp, 3Ch
		pop	ebx
		pop	esi
		pop	edi
		leave
		retn
; ---------------------------------------------------------------------------

loc_62B960C0:				; CODE XREF: silc_client_command_motd+18j
		dec	eax
		jz	loc_62B96168
		mov	eax, [ebx+40h]
		mov	eax, [eax+4]
		mov	[esp+48h+var_28], eax
		mov	eax, [ebx+3Ch]
		mov	eax, [eax+4]
		mov	[esp+48h+var_2C], eax

loc_62B960DB:				; CODE XREF: silc_client_command_motd+14Dj
		mov	[esp+48h+var_30], 1
		mov	[esp+48h+var_34], 1
		mov	[esp+48h+var_38], 0
		mov	[esp+48h+var_3C], 0
		movzx	eax, byte ptr [ebx+34h]
		mov	[esp+48h+var_40], eax
		mov	[esp+48h+var_44], ebx
		mov	[esp+48h+var_48], edx
		call	sub_62B95C0C
		mov	edx, [ebx+4]
		mov	eax, [edx+4Ch]
		mov	ecx, [eax+18h]
		mov	ecx, [ecx+48h]
		mov	esi, [ebx+3Ch]
		mov	[esp+48h+var_30], esi
		mov	esi, [ebx+38h]
		mov	[esp+48h+var_34], esi
		mov	[esp+48h+var_38], 0
		movzx	ebx, byte ptr [ebx+34h]
		mov	[esp+48h+var_3C], ebx
		mov	[esp+48h+var_40], 1
		mov	[esp+48h+var_44], edx
		mov	[esp+48h+var_48], eax
		call	dword ptr [ecx+10h]
		mov	[esp+44h+var_40], offset silc_client_command_reply_wait
		mov	eax, [ebp+arg_0]
		mov	[esp+44h+var_44], eax
		call	silc_fsm_next
		xor	eax, eax
		add	esp, 3Ch
		pop	ebx
		pop	esi
		pop	edi
		leave
		retn
; ---------------------------------------------------------------------------

loc_62B96168:				; CODE XREF: silc_client_command_motd+8Dj
		mov	esi, [edx+8]
		xor	eax, eax
		mov	ecx, 0FFFFFFFFh
		mov	edi, esi
		repne scasb
		not	ecx
		dec	ecx
		mov	[esp+48h+var_28], ecx
		mov	[esp+48h+var_2C], esi
		jmp	loc_62B960DB
silc_client_command_motd endp

; ---------------------------------------------------------------------------
		align 4
; Exported entry  85. silc_client_command_stats

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public silc_client_command_stats
silc_client_command_stats proc near	; DATA XREF: silc_client_commands_unregister+725o
					; silc_client_commands_register+4DDo

var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		push	esi
		push	ebx
		sub	esp, 30h
		mov	ebx, [ebp+arg_4]
		mov	edx, [ebx+4]
		mov	eax, [edx+54h]
		mov	eax, [eax+0F8h]
		test	eax, eax
		jz	loc_62B96244
		mov	ecx, [eax+4]
		mov	eax, [eax+8]
		sub	eax, ecx

loc_62B961AF:				; CODE XREF: silc_client_command_stats+BEj
		mov	[esp+38h+var_18], eax
		mov	[esp+38h+var_1C], ecx
		mov	[esp+38h+var_20], 1
		mov	[esp+38h+var_24], 1
		mov	[esp+38h+var_28], 0
		mov	[esp+38h+var_2C], 0
		movzx	eax, byte ptr [ebx+34h]
		mov	[esp+38h+var_30], eax
		mov	[esp+38h+var_34], ebx
		mov	[esp+38h+var_38], edx
		call	sub_62B95C0C
		mov	edx, [ebx+4]
		mov	eax, [edx+4Ch]
		mov	ecx, [eax+18h]
		mov	ecx, [ecx+48h]
		mov	esi, [ebx+3Ch]
		mov	[esp+38h+var_20], esi
		mov	esi, [ebx+38h]
		mov	[esp+38h+var_24], esi
		mov	[esp+38h+var_28], 0
		movzx	ebx, byte ptr [ebx+34h]
		mov	[esp+38h+var_2C], ebx
		mov	[esp+38h+var_30], 1
		mov	[esp+38h+var_34], edx
		mov	[esp+38h+var_38], eax
		call	dword ptr [ecx+10h]
		mov	[esp+38h+var_34], offset silc_client_command_reply_wait
		mov	eax, [ebp+arg_0]
		mov	[esp+38h+var_38], eax
		call	silc_fsm_next
		xor	eax, eax
		add	esp, 30h
		pop	ebx
		pop	esi
		leave
		retn
; ---------------------------------------------------------------------------
		align 4

loc_62B96244:				; CODE XREF: silc_client_command_stats+19j
		xor	ecx, ecx
		jmp	loc_62B961AF
silc_client_command_stats endp

; ---------------------------------------------------------------------------
		align 4
; Exported entry  33. silc_client_command_info

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public silc_client_command_info
silc_client_command_info proc near	; DATA XREF: silc_client_commands_unregister+675o
					; silc_client_commands_register+462o

var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		push	esi
		push	ebx
		sub	esp, 30h
		mov	ebx, [ebp+arg_4]
		mov	eax, [ebx+4]
		cmp	dword ptr [ebx+38h], 2
		jz	loc_62B962E8
		mov	[esp+38h+var_24], 0
		mov	[esp+38h+var_28], 0
		mov	[esp+38h+var_2C], 0
		movzx	edx, byte ptr [ebx+34h]
		mov	[esp+38h+var_30], edx
		mov	[esp+38h+var_34], ebx
		mov	[esp+38h+var_38], eax
		call	sub_62B95C0C

loc_62B96290:				; CODE XREF: silc_client_command_info+E4j
		mov	edx, [ebx+4]
		mov	eax, [edx+4Ch]
		mov	ecx, [eax+18h]
		mov	ecx, [ecx+48h]
		mov	esi, [ebx+3Ch]
		mov	[esp+38h+var_20], esi
		mov	esi, [ebx+38h]
		mov	[esp+38h+var_24], esi
		mov	[esp+38h+var_28], 0
		movzx	ebx, byte ptr [ebx+34h]
		mov	[esp+38h+var_2C], ebx
		mov	[esp+38h+var_30], 1
		mov	[esp+38h+var_34], edx
		mov	[esp+38h+var_38], eax
		call	dword ptr [ecx+10h]
		mov	[esp+38h+var_34], offset silc_client_command_reply_wait
		mov	eax, [ebp+arg_0]
		mov	[esp+38h+var_38], eax
		call	silc_fsm_next
		xor	eax, eax
		add	esp, 30h
		pop	ebx
		pop	esi
		leave
		retn
; ---------------------------------------------------------------------------

loc_62B962E8:				; CODE XREF: silc_client_command_info+12j
		mov	edx, [ebx+40h]
		mov	edx, [edx+4]
		mov	[esp+38h+var_18], edx
		mov	edx, [ebx+3Ch]
		mov	edx, [edx+4]
		mov	[esp+38h+var_1C], edx
		mov	[esp+38h+var_20], 1
		mov	[esp+38h+var_24], 1
		mov	[esp+38h+var_28], 0
		mov	[esp+38h+var_2C], 0
		movzx	edx, byte ptr [ebx+34h]
		mov	[esp+38h+var_30], edx
		mov	[esp+38h+var_34], ebx
		mov	[esp+38h+var_38], eax
		call	sub_62B95C0C
		jmp	loc_62B96290
silc_client_command_info endp

; ---------------------------------------------------------------------------
		align 4
; Exported entry  88. silc_client_command_users

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public silc_client_command_users
silc_client_command_users proc near	; DATA XREF: silc_client_commands_unregister+10C5o
					; silc_client_commands_register+AE3o

var_248		= dword	ptr -248h
var_244		= dword	ptr -244h
var_240		= dword	ptr -240h
var_23C		= dword	ptr -23Ch
var_238		= dword	ptr -238h
var_234		= dword	ptr -234h
var_230		= dword	ptr -230h
var_22C		= dword	ptr -22Ch
var_228		= dword	ptr -228h
var_218		= byte ptr -218h
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		sub	esp, 23Ch
		mov	ebx, [ebp+arg_4]
		mov	esi, [ebx+4]
		cmp	dword ptr [ebx+38h], 2
		jz	short loc_62B963C0
		mov	eax, [esi+4Ch]
		mov	edx, [eax+18h]
		mov	edx, [edx+48h]
		mov	[esp+248h+var_23C], offset aUsageUsersChan ; "Usage: /USERS <channel>"
		mov	[esp+248h+var_240], 0
		mov	[esp+248h+var_244], esi
		mov	[esp+248h+var_248], eax
		call	dword ptr [edx]
		mov	edx, [ebx+4]
		mov	eax, [edx+4Ch]
		mov	ecx, [eax+18h]
		mov	ecx, [ecx+48h]
		mov	esi, [ebx+3Ch]
		mov	[esp+248h+var_230], esi
		mov	esi, [ebx+38h]
		mov	[esp+248h+var_234], esi
		mov	[esp+248h+var_238], 1Dh
		movzx	ebx, byte ptr [ebx+34h]
		mov	[esp+248h+var_23C], ebx
		mov	[esp+248h+var_240], 0
		mov	[esp+248h+var_244], edx
		mov	[esp+248h+var_248], eax
		call	dword ptr [ecx+10h]
		mov	eax, 3

loc_62B963B3:				; CODE XREF: silc_client_command_users+20Cj
		add	esp, 23Ch
		pop	ebx
		pop	esi
		pop	edi
		leave
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_62B963C0:				; CODE XREF: silc_client_command_users+16j
		mov	eax, [ebx+3Ch]
		mov	edx, [eax+4]
		cmp	byte ptr [edx],	2Ah
		jz	loc_62B96478

loc_62B963CF:				; CODE XREF: silc_client_command_users+196j
					; silc_client_command_users+1CAj
		xor	eax, eax
		mov	ecx, 0FFFFFFFFh
		mov	edi, edx
		repne scasb
		not	ecx
		dec	ecx
		mov	[esp+248h+var_228], ecx
		mov	[esp+248h+var_22C], edx
		mov	[esp+248h+var_230], 2
		mov	[esp+248h+var_234], 1
		mov	[esp+248h+var_238], 0
		mov	[esp+248h+var_23C], 0
		movzx	eax, byte ptr [ebx+34h]
		mov	[esp+248h+var_240], eax
		mov	[esp+248h+var_244], ebx
		mov	[esp+248h+var_248], esi
		call	sub_62B95C0C
		mov	edx, [ebx+4]
		mov	eax, [edx+4Ch]
		mov	ecx, [eax+18h]
		mov	ecx, [ecx+48h]
		mov	esi, [ebx+3Ch]
		mov	[esp+248h+var_230], esi
		mov	esi, [ebx+38h]
		mov	[esp+248h+var_234], esi
		mov	[esp+248h+var_238], 0
		movzx	ebx, byte ptr [ebx+34h]
		mov	[esp+248h+var_23C], ebx
		mov	[esp+248h+var_240], 1
		mov	[esp+248h+var_244], edx
		mov	[esp+248h+var_248], eax
		call	dword ptr [ecx+10h]
		mov	[esp+244h+var_240], offset silc_client_command_reply_wait
		mov	eax, [ebp+arg_0]
		mov	[esp+244h+var_244], eax
		call	silc_fsm_next
		xor	eax, eax
		add	esp, 23Ch
		pop	ebx
		pop	esi
		pop	edi
		leave
		retn
; ---------------------------------------------------------------------------
		align 4

loc_62B96478:				; CODE XREF: silc_client_command_users+91j
		mov	edx, [esi+30h]
		test	edx, edx
		jz	loc_62B96508
		mov	eax, [esi+4Ch]
		mov	eax, [eax+18h]
		mov	eax, [eax+4Ch]
		cmp	byte ptr [eax+23h], 0
		jnz	short loc_62B964DC
		cmp	byte ptr [edx+4], 0
		jnz	short loc_62B964D4
		mov	ecx, offset byte_62BA8AE3

loc_62B9649D:				; CODE XREF: silc_client_command_users+1A1j
		lea	eax, [edx+4]
		mov	[esp+248h+var_234], eax
		mov	[esp+248h+var_238], ecx
		mov	eax, [edx]
		mov	[esp+248h+var_23C], eax
		mov	[esp+248h+var_240], offset aSSS	; "%s%s%s"
		mov	[esp+248h+var_244], 200h
		lea	edi, [ebp+var_218]
		mov	[esp+248h+var_248], edi
		call	silc_snprintf
		mov	edx, edi
		jmp	loc_62B963CF
; ---------------------------------------------------------------------------
		align 4

loc_62B964D4:				; CODE XREF: silc_client_command_users+15Ej
		mov	ecx, offset a@	; "@"
		jmp	short loc_62B9649D
; ---------------------------------------------------------------------------
		align 4

loc_62B964DC:				; CODE XREF: silc_client_command_users+158j
		mov	eax, [edx]
		mov	[esp+248h+var_23C], eax
		mov	[esp+248h+var_240], offset aS ;	"%s"
		mov	[esp+248h+var_244], 200h
		lea	edi, [ebp+var_218]
		mov	[esp+248h+var_248], edi
		call	silc_snprintf
		mov	edx, edi
		jmp	loc_62B963CF
; ---------------------------------------------------------------------------
		align 4

loc_62B96508:				; CODE XREF: silc_client_command_users+145j
		mov	edx, [esi+4Ch]
		mov	ecx, [edx+18h]
		mov	ecx, [ecx+48h]
		mov	[esp+248h+var_230], eax
		mov	[esp+248h+var_234], 2
		mov	[esp+248h+var_238], 19h
		movzx	eax, byte ptr [ebx+34h]
		mov	[esp+248h+var_23C], eax
		mov	[esp+248h+var_240], 0
		mov	[esp+248h+var_244], esi
		mov	[esp+248h+var_248], edx
		call	dword ptr [ecx+10h]
		mov	eax, 3
		jmp	loc_62B963B3
silc_client_command_users endp

; ---------------------------------------------------------------------------
		align 4
; Exported entry  38. silc_client_command_leave

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public silc_client_command_leave
silc_client_command_leave proc near	; DATA XREF: silc_client_commands_unregister+1015o
					; silc_client_commands_register+ABBo

var_258		= dword	ptr -258h
var_254		= dword	ptr -254h
var_250		= dword	ptr -250h
var_24C		= dword	ptr -24Ch
var_248		= dword	ptr -248h
var_244		= dword	ptr -244h
var_240		= dword	ptr -240h
var_23C		= dword	ptr -23Ch
var_238		= dword	ptr -238h
var_224		= dword	ptr -224h
var_220		= dword	ptr -220h
var_21C		= dword	ptr -21Ch
var_218		= byte ptr -218h
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		sub	esp, 24Ch
		mov	ebx, [ebp+arg_4]
		mov	esi, [ebx+4]
		mov	edi, [esi+4Ch]
		cmp	dword ptr [ebx+38h], 2
		jz	short loc_62B965D4
		mov	eax, [edi+18h]
		mov	eax, [eax+48h]
		mov	[esp+258h+var_24C], offset aUsageLeaveChan ; "Usage: /LEAVE <channel>"
		mov	[esp+258h+var_250], 0
		mov	[esp+258h+var_254], esi
		mov	[esp+258h+var_258], edi
		call	dword ptr [eax]
		mov	edx, [ebx+4]
		mov	eax, [edx+4Ch]
		mov	ecx, [eax+18h]
		mov	ecx, [ecx+48h]
		mov	esi, [ebx+3Ch]
		mov	[esp+258h+var_240], esi
		mov	esi, [ebx+38h]
		mov	[esp+258h+var_244], esi
		mov	[esp+258h+var_248], 1Dh

loc_62B965A8:				; CODE XREF: silc_client_command_leave+266j
		movzx	ebx, byte ptr [ebx+34h]
		mov	[esp+258h+var_24C], ebx
		mov	[esp+258h+var_250], 0
		mov	[esp+258h+var_254], edx
		mov	[esp+258h+var_258], eax
		call	dword ptr [ecx+10h]
		mov	eax, 3

loc_62B965C7:				; CODE XREF: silc_client_command_leave+341j
		add	esp, 24Ch
		pop	ebx
		pop	esi
		pop	edi
		leave
		retn
; ---------------------------------------------------------------------------
		align 4

loc_62B965D4:				; CODE XREF: silc_client_command_leave+19j
		mov	eax, [ebx+3Ch]
		mov	edx, [eax+4]
		cmp	byte ptr [edx],	2Ah
		jz	loc_62B96720
		mov	eax, edi

loc_62B965E5:				; CODE XREF: silc_client_command_leave+23Cj
					; silc_client_command_leave+303j
		mov	[esp+258h+var_250], edx
		mov	[esp+258h+var_254], esi
		mov	[esp+258h+var_258], eax
		call	silc_client_get_channel
		mov	[ebp+var_21C], eax
		test	eax, eax
		jz	loc_62B96790
		mov	[esp+258h+var_254], 3
		mov	eax, [ebp+var_21C]
		add	eax, 114h
		mov	[esp+258h+var_258], eax
		call	silc_id_payload_encode
		mov	edx, eax
		test	eax, eax
		jz	loc_62B967B8
		mov	ecx, [eax+4]
		mov	eax, [eax+8]
		sub	eax, ecx
		mov	[esp+258h+var_238], eax
		mov	[esp+258h+var_23C], ecx
		mov	[esp+258h+var_240], 1
		mov	[esp+258h+var_244], 1
		mov	[esp+258h+var_248], 0
		mov	[esp+258h+var_24C], 0
		movzx	eax, byte ptr [ebx+34h]
		mov	[esp+258h+var_250], eax
		mov	[esp+258h+var_254], ebx
		mov	[esp+258h+var_258], esi
		mov	[ebp+var_224], edx
		call	sub_62B95C0C
		mov	edx, [ebp+var_224]
		mov	eax, [edx]
		mov	[esp+258h+var_258], eax
		call	silc_free
		mov	edx, [ebp+var_224]
		mov	[esp+258h+var_258], edx
		call	silc_free

loc_62B96690:				; CODE XREF: silc_client_command_leave+2B0j
		mov	ecx, [ebx+4]
		mov	eax, [ecx+4Ch]
		mov	edx, [eax+18h]
		mov	edx, [edx+48h]
		mov	[ebp+var_220], edx
		mov	edx, [ebx+3Ch]
		mov	[esp+258h+var_240], edx
		mov	edx, [ebx+38h]
		mov	[esp+258h+var_244], edx
		mov	[esp+258h+var_248], 0
		movzx	edx, byte ptr [ebx+34h]
		mov	[esp+258h+var_24C], edx
		mov	[esp+258h+var_250], 1
		mov	[esp+258h+var_254], ecx
		mov	[esp+258h+var_258], eax
		mov	eax, [ebp+var_220]
		call	dword ptr [eax+10h]
		mov	eax, [ebp+var_21C]
		cmp	eax, [esi+30h]
		jz	loc_62B96810

loc_62B966E7:				; CODE XREF: silc_client_command_leave+2CBj
		mov	eax, [ebp+var_21C]
		mov	[esp+258h+var_250], eax
		mov	[esp+258h+var_254], esi
		mov	[esp+258h+var_258], edi
		call	silc_client_unref_channel
		mov	[esp+258h+var_254], offset silc_client_command_reply_wait
		mov	eax, [ebp+arg_0]
		mov	[esp+258h+var_258], eax
		call	silc_fsm_next
		xor	eax, eax
		add	esp, 24Ch
		pop	ebx
		pop	esi
		pop	edi
		leave
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_62B96720:				; CODE XREF: silc_client_command_leave+91j
		mov	edx, [esi+30h]
		test	edx, edx
		jz	loc_62B96854
		mov	eax, [edi+18h]
		mov	eax, [eax+4Ch]
		cmp	byte ptr [eax+23h], 0
		jnz	loc_62B9681C
		cmp	byte ptr [edx+4], 0
		jnz	loc_62B96804
		mov	ecx, offset byte_62BA8AE3

loc_62B9674A:				; CODE XREF: silc_client_command_leave+2BDj
		lea	eax, [edx+4]
		mov	[esp+258h+var_244], eax
		mov	[esp+258h+var_248], ecx
		mov	eax, [edx]
		mov	[esp+258h+var_24C], eax
		mov	[esp+258h+var_250], offset aSSS	; "%s%s%s"
		mov	[esp+258h+var_254], 200h
		lea	edx, [ebp+var_218]
		mov	[esp+258h+var_258], edx
		mov	[ebp+var_224], edx
		call	silc_snprintf
		mov	eax, [esi+4Ch]
		mov	edx, [ebp+var_224]
		jmp	loc_62B965E5
; ---------------------------------------------------------------------------
		align 10h

loc_62B96790:				; CODE XREF: silc_client_command_leave+B1j
		mov	edx, [ebx+4]
		mov	eax, [edx+4Ch]
		mov	ecx, [eax+18h]
		mov	ecx, [ecx+48h]
		mov	esi, [ebx+3Ch]
		mov	[esp+258h+var_240], esi
		mov	esi, [ebx+38h]
		mov	[esp+258h+var_244], esi
		mov	[esp+258h+var_248], 19h
		jmp	loc_62B965A8
; ---------------------------------------------------------------------------
		align 4

loc_62B967B8:				; CODE XREF: silc_client_command_leave+D6j
		mov	[esp+258h+var_238], 0
		mov	[esp+258h+var_23C], 0
		mov	[esp+258h+var_240], 1
		mov	[esp+258h+var_244], 1
		mov	[esp+258h+var_248], 0
		mov	[esp+258h+var_24C], 0
		movzx	eax, byte ptr [ebx+34h]
		mov	[esp+258h+var_250], eax
		mov	[esp+258h+var_254], ebx
		mov	[esp+258h+var_258], esi
		call	sub_62B95C0C
		jmp	loc_62B96690
; ---------------------------------------------------------------------------
		align 4

loc_62B96804:				; CODE XREF: silc_client_command_leave+1F3j
		mov	ecx, offset a@	; "@"
		jmp	loc_62B9674A
; ---------------------------------------------------------------------------
		align 10h

loc_62B96810:				; CODE XREF: silc_client_command_leave+195j
		mov	dword ptr [esi+30h], 0
		jmp	loc_62B966E7
; ---------------------------------------------------------------------------

loc_62B9681C:				; CODE XREF: silc_client_command_leave+1E9j
		mov	eax, [edx]
		mov	[esp+258h+var_24C], eax
		mov	[esp+258h+var_250], offset aS ;	"%s"
		mov	[esp+258h+var_254], 200h
		lea	edx, [ebp+var_218]
		mov	[esp+258h+var_258], edx
		mov	[ebp+var_224], edx
		call	silc_snprintf
		mov	eax, [esi+4Ch]
		mov	edx, [ebp+var_224]
		jmp	loc_62B965E5
; ---------------------------------------------------------------------------

loc_62B96854:				; CODE XREF: silc_client_command_leave+1D9j
		mov	edx, [edi+18h]
		mov	edx, [edx+48h]
		mov	[esp+258h+var_240], eax
		mov	[esp+258h+var_244], 2
		mov	[esp+258h+var_248], 19h
		movzx	eax, byte ptr [ebx+34h]
		mov	[esp+258h+var_24C], eax
		mov	[esp+258h+var_250], 0
		mov	[esp+258h+var_254], esi
		mov	[esp+258h+var_258], edi
		call	dword ptr [edx+10h]
		mov	eax, 3
		jmp	loc_62B965C7
silc_client_command_leave endp

; ---------------------------------------------------------------------------
		align 4
; Exported entry  36. silc_client_command_kick

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public silc_client_command_kick
silc_client_command_kick proc near	; DATA XREF: silc_client_commands_unregister+CA5o
					; silc_client_commands_register+8B5o

var_288		= dword	ptr -288h
var_284		= dword	ptr -284h
var_280		= dword	ptr -280h
var_27C		= dword	ptr -27Ch
var_278		= dword	ptr -278h
var_274		= dword	ptr -274h
var_270		= dword	ptr -270h
var_26C		= dword	ptr -26Ch
var_268		= dword	ptr -268h
var_264		= dword	ptr -264h
var_260		= dword	ptr -260h
var_25C		= dword	ptr -25Ch
var_258		= dword	ptr -258h
var_254		= dword	ptr -254h
var_250		= dword	ptr -250h
var_23C		= dword	ptr -23Ch
var_238		= dword	ptr -238h
var_234		= dword	ptr -234h
var_230		= dword	ptr -230h
var_22C		= dword	ptr -22Ch
var_228		= dword	ptr -228h
var_224		= dword	ptr -224h
var_220		= dword	ptr -220h
var_21C		= dword	ptr -21Ch
var_218		= byte ptr -218h
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		sub	esp, 27Ch
		mov	ebx, [ebp+arg_4]
		mov	esi, [ebx+4]
		mov	eax, [esi+4Ch]
		mov	[ebp+var_21C], eax
		mov	eax, [ebx+38h]
		cmp	eax, 2
		jbe	loc_62B96B8C
		mov	edx, [ebx+3Ch]
		mov	edi, [edx+4]
		cmp	byte ptr [edi],	2Ah
		jz	loc_62B96C24

loc_62B968CA:				; CODE XREF: silc_client_command_kick+3EFj
					; silc_client_command_kick+554j
		mov	eax, [esi+30h]
		test	eax, eax
		jz	loc_62B96C88
		mov	[esp+288h+var_280], edi
		mov	[esp+288h+var_284], esi
		mov	eax, [esi+4Ch]
		mov	[esp+288h+var_288], eax
		call	silc_client_get_channel
		mov	[ebp+var_220], eax
		test	eax, eax
		jz	loc_62B96CBC
		mov	[esp+288h+var_27C], 0
		mov	eax, [ebx+3Ch]
		mov	eax, [eax+8]
		mov	[esp+288h+var_280], eax
		mov	[esp+288h+var_284], esi
		mov	ecx, [ebp+var_21C]
		mov	[esp+288h+var_288], ecx
		call	silc_client_get_clients_local
		mov	edx, eax
		test	eax, eax
		jz	loc_62B96E00
		mov	eax, [eax+14h]
		mov	[edx+18h], eax
		mov	ecx, [edx+8]
		test	ecx, ecx
		jz	loc_62B96DF0
		test	byte ptr [edx+10h], 2
		jnz	loc_62B96CB0
		movzx	eax, word ptr [edx+0Ch]
		mov	eax, [ecx+eax]

loc_62B96946:				; CODE XREF: silc_client_command_kick+423j
		mov	[edx+8], eax
		mov	[edx+14h], ecx
		mov	edi, [ecx]

loc_62B9694E:				; CODE XREF: silc_client_command_kick+565j
		mov	[esp+288h+var_284], 3
		mov	eax, [ebp+var_220]
		add	eax, 114h
		mov	[esp+288h+var_288], eax
		mov	[ebp+var_238], edx
		call	silc_id_payload_encode
		mov	[ebp+var_228], eax
		mov	[esp+288h+var_284], 2
		lea	eax, [edi+38Ch]
		mov	[esp+288h+var_288], eax
		call	silc_id_payload_encode
		mov	[ebp+var_224], eax
		cmp	dword ptr [ebx+38h], 3
		mov	edx, [ebp+var_238]
		jz	loc_62B96D00
		mov	eax, [ebx+3Ch]
		mov	eax, [eax+0Ch]
		mov	[ebp+var_22C], eax
		xor	eax, eax
		mov	ecx, 0FFFFFFFFh
		mov	edi, [ebp+var_22C]
		repne scasb
		not	ecx
		dec	ecx
		mov	[ebp+var_234], ecx
		mov	edi, [ebp+var_224]
		test	edi, edi
		jz	loc_62B96E70
		mov	edi, [ebp+var_224]
		mov	edi, [edi+4]
		mov	[ebp+var_23C], edi
		mov	ecx, [ebp+var_224]
		mov	eax, [ecx+8]
		sub	eax, edi

loc_62B969ED:				; CODE XREF: silc_client_command_kick+5E8j
		mov	ecx, [ebp+var_228]
		test	ecx, ecx
		jz	loc_62B96E5C
		mov	edi, [ebp+var_228]
		mov	edi, [edi+4]
		mov	[ebp+var_230], edi
		mov	edi, [ebp+var_228]
		mov	ecx, [edi+8]
		sub	ecx, [ebp+var_230]

loc_62B96A19:				; CODE XREF: silc_client_command_kick+5D4j
		mov	edi, [ebp+var_234]
		mov	[esp+288h+var_250], edi
		mov	edi, [ebp+var_22C]
		mov	[esp+288h+var_254], edi
		mov	[esp+288h+var_258], 3
		mov	[esp+288h+var_25C], eax
		mov	eax, [ebp+var_23C]
		mov	[esp+288h+var_260], eax
		mov	[esp+288h+var_264], 2
		mov	[esp+288h+var_268], ecx
		mov	ecx, [ebp+var_230]
		mov	[esp+288h+var_26C], ecx
		mov	[esp+288h+var_270], 1
		mov	[esp+288h+var_274], 3
		mov	[esp+288h+var_278], 0
		mov	[esp+288h+var_27C], 0
		movzx	eax, byte ptr [ebx+34h]
		mov	[esp+288h+var_280], eax
		mov	[esp+288h+var_284], ebx
		mov	[esp+288h+var_288], esi
		mov	[ebp+var_238], edx
		call	sub_62B95C0C
		mov	edx, [ebp+var_238]

loc_62B96A99:				; CODE XREF: silc_client_command_kick+51Ej
		mov	eax, [ebp+var_228]
		test	eax, eax
		jz	short loc_62B96AC7
		mov	edi, [ebp+var_228]
		mov	eax, [edi]
		mov	[esp+288h+var_288], eax
		mov	[ebp+var_238], edx
		call	silc_free
		mov	[esp+288h+var_288], edi
		call	silc_free
		mov	edx, [ebp+var_238]

loc_62B96AC7:				; CODE XREF: silc_client_command_kick+20Dj
		mov	edi, [ebp+var_224]
		test	edi, edi
		jz	short loc_62B96AFB
		mov	ecx, [ebp+var_224]
		mov	eax, [ecx]
		mov	[esp+288h+var_288], eax
		mov	[ebp+var_238], edx
		call	silc_free
		mov	edi, [ebp+var_224]
		mov	[esp+288h+var_288], edi
		call	silc_free
		mov	edx, [ebp+var_238]

loc_62B96AFB:				; CODE XREF: silc_client_command_kick+23Bj
		mov	[esp+288h+var_280], edx
		mov	[esp+288h+var_284], esi
		mov	eax, [ebp+var_21C]
		mov	[esp+288h+var_288], eax
		call	silc_client_list_free
		mov	edx, [ebp+var_220]
		mov	[esp+288h+var_280], edx
		mov	[esp+288h+var_284], esi
		mov	ecx, [ebp+var_21C]
		mov	[esp+288h+var_288], ecx
		call	silc_client_unref_channel
		mov	edx, [ebx+4]
		mov	eax, [edx+4Ch]
		mov	ecx, [eax+18h]
		mov	ecx, [ecx+48h]
		mov	esi, [ebx+3Ch]
		mov	[esp+288h+var_270], esi
		mov	esi, [ebx+38h]
		mov	[esp+288h+var_274], esi
		mov	[esp+288h+var_278], 0
		movzx	ebx, byte ptr [ebx+34h]
		mov	[esp+288h+var_27C], ebx
		mov	[esp+288h+var_280], 1
		mov	[esp+288h+var_284], edx
		mov	[esp+288h+var_288], eax
		call	dword ptr [ecx+10h]
		mov	[esp+288h+var_284], offset silc_client_command_reply_wait
		mov	eax, [ebp+arg_0]
		mov	[esp+288h+var_288], eax
		call	silc_fsm_next
		xor	eax, eax
		add	esp, 27Ch
		pop	ebx
		pop	esi
		pop	edi
		leave
		retn
; ---------------------------------------------------------------------------
		align 4

loc_62B96B8C:				; CODE XREF: silc_client_command_kick+21j
		mov	edx, [ebp+var_21C]
		mov	eax, [edx+18h]
		mov	eax, [eax+48h]
		mov	[esp+288h+var_27C], offset aUsageKickChann ; "Usage: /KICK <channel> <nickname>	[<com"...
		mov	[esp+288h+var_280], 0
		mov	[esp+288h+var_284], esi
		mov	[esp+288h+var_288], edx
		call	dword ptr [eax]
		mov	edx, [ebx+4]
		mov	eax, [edx+4Ch]
		mov	ecx, [eax+18h]
		mov	ecx, [ecx+48h]
		mov	edi, [ebx+3Ch]
		mov	[esp+288h+var_270], edi
		mov	edi, [ebx+38h]
		mov	[esp+288h+var_274], edi
		mov	[esp+288h+var_278], 1Dh

loc_62B96BD3:				; CODE XREF: silc_client_command_kick+416j
		movzx	ebx, byte ptr [ebx+34h]
		mov	[esp+288h+var_27C], ebx
		mov	[esp+288h+var_280], 0
		mov	[esp+288h+var_284], edx
		mov	[esp+288h+var_288], eax
		call	dword ptr [ecx+10h]
		mov	[ebp+var_220], 0

loc_62B96BF7:				; CODE XREF: silc_client_command_kick+464j
					; silc_client_command_kick+630j
		mov	edi, [ebp+var_220]
		mov	[esp+288h+var_280], edi
		mov	[esp+288h+var_284], esi
		mov	eax, [ebp+var_21C]
		mov	[esp+288h+var_288], eax
		call	silc_client_unref_channel
		mov	eax, 3
		add	esp, 27Ch
		pop	ebx
		pop	esi
		pop	edi
		leave
		retn
; ---------------------------------------------------------------------------
		align 4

loc_62B96C24:				; CODE XREF: silc_client_command_kick+30j
		mov	ecx, [esi+30h]
		test	ecx, ecx
		jz	loc_62B96E84
		mov	edx, [ebp+var_21C]
		mov	eax, [edx+18h]
		mov	eax, [eax+4Ch]
		cmp	byte ptr [eax+23h], 0
		jnz	loc_62B96DC4
		cmp	byte ptr [ecx+4], 0
		jnz	loc_62B96DB8
		mov	eax, offset byte_62BA8AE3

loc_62B96C54:				; CODE XREF: silc_client_command_kick+529j
		lea	edx, [ecx+4]
		mov	[esp+288h+var_274], edx
		mov	[esp+288h+var_278], eax
		mov	eax, [ecx]
		mov	[esp+288h+var_27C], eax
		mov	[esp+288h+var_280], offset aSSS	; "%s%s%s"
		mov	[esp+288h+var_284], 200h
		lea	edi, [ebp+var_218]
		mov	[esp+288h+var_288], edi
		call	silc_snprintf
		jmp	loc_62B968CA
; ---------------------------------------------------------------------------

loc_62B96C88:				; CODE XREF: silc_client_command_kick+3Bj
		mov	edx, [ebx+4]
		mov	eax, [edx+4Ch]
		mov	ecx, [eax+18h]
		mov	ecx, [ecx+48h]
		mov	edi, [ebx+3Ch]
		mov	[esp+288h+var_270], edi
		mov	edi, [ebx+38h]
		mov	[esp+288h+var_274], edi
		mov	[esp+288h+var_278], 19h
		jmp	loc_62B96BD3
; ---------------------------------------------------------------------------
		align 10h

loc_62B96CB0:				; CODE XREF: silc_client_command_kick+A5j
		movzx	eax, word ptr [edx+0Eh]
		mov	eax, [ecx+eax]
		jmp	loc_62B96946
; ---------------------------------------------------------------------------

loc_62B96CBC:				; CODE XREF: silc_client_command_kick+5Cj
		mov	ecx, [ebx+4]
		mov	eax, [ecx+4Ch]
		mov	edx, [eax+18h]
		mov	edi, [edx+48h]
		mov	edx, [ebx+3Ch]
		mov	[esp+288h+var_270], edx
		mov	edx, [ebx+38h]
		mov	[esp+288h+var_274], edx
		mov	[esp+288h+var_278], 19h

loc_62B96CDE:				; CODE XREF: silc_client_command_kick+5C0j
		movzx	edx, byte ptr [ebx+34h]
		mov	[esp+288h+var_27C], edx
		mov	[esp+288h+var_280], 0
		mov	[esp+288h+var_284], ecx
		mov	[esp+288h+var_288], eax
		call	dword ptr [edi+10h]
		jmp	loc_62B96BF7
; ---------------------------------------------------------------------------
		align 10h

loc_62B96D00:				; CODE XREF: silc_client_command_kick+107j
		test	eax, eax
		jz	loc_62B96EE0
		mov	edi, [ebp+var_224]
		mov	edi, [edi+4]
		mov	[ebp+var_230], edi
		mov	ecx, [ebp+var_224]
		mov	eax, [ecx+8]
		sub	eax, edi

loc_62B96D22:				; CODE XREF: silc_client_command_kick+656j
		mov	ecx, [ebp+var_228]
		test	ecx, ecx
		jz	loc_62B96ECC
		mov	edi, [ebp+var_228]
		mov	edi, [edi+4]
		mov	[ebp+var_22C], edi
		mov	edi, [ebp+var_228]
		mov	ecx, [edi+8]
		sub	ecx, [ebp+var_22C]

loc_62B96D4E:				; CODE XREF: silc_client_command_kick+644j
		mov	[esp+288h+var_25C], eax
		mov	eax, [ebp+var_230]
		mov	[esp+288h+var_260], eax
		mov	[esp+288h+var_264], 2
		mov	[esp+288h+var_268], ecx
		mov	ecx, [ebp+var_22C]
		mov	[esp+288h+var_26C], ecx
		mov	[esp+288h+var_270], 1
		mov	[esp+288h+var_274], 2
		mov	[esp+288h+var_278], 0
		mov	[esp+288h+var_27C], 0
		movzx	eax, byte ptr [ebx+34h]
		mov	[esp+288h+var_280], eax
		mov	[esp+288h+var_284], ebx
		mov	[esp+288h+var_288], esi
		mov	[ebp+var_238], edx
		call	sub_62B95C0C
		mov	edx, [ebp+var_238]
		jmp	loc_62B96A99
; ---------------------------------------------------------------------------
		align 4

loc_62B96DB8:				; CODE XREF: silc_client_command_kick+3B5j
		mov	eax, offset a@	; "@"
		jmp	loc_62B96C54
; ---------------------------------------------------------------------------
		align 4

loc_62B96DC4:				; CODE XREF: silc_client_command_kick+3ABj
		mov	eax, [ecx]
		mov	[esp+288h+var_27C], eax
		mov	[esp+288h+var_280], offset aS ;	"%s"
		mov	[esp+288h+var_284], 200h
		lea	edi, [ebp+var_218]
		mov	[esp+288h+var_288], edi
		call	silc_snprintf
		jmp	loc_62B968CA
; ---------------------------------------------------------------------------
		align 10h

loc_62B96DF0:				; CODE XREF: silc_client_command_kick+9Bj
		mov	dword ptr [edx+14h], 0
		xor	edi, edi
		jmp	loc_62B9694E
; ---------------------------------------------------------------------------
		align 10h

loc_62B96E00:				; CODE XREF: silc_client_command_kick+8Aj
		mov	eax, [ebx+4]
		mov	eax, [eax+4Ch]
		mov	eax, [eax+18h]
		mov	eax, [eax+48h]
		mov	edx, [ebx+3Ch]
		mov	edx, [edx+8]
		mov	[esp+288h+var_278], edx
		mov	[esp+288h+var_27C], offset aNoSuchClientS ; "No	such client: %s"
		mov	[esp+288h+var_280], 0
		mov	[esp+288h+var_284], esi
		mov	edx, [esi+4Ch]
		mov	[esp+288h+var_288], edx
		call	dword ptr [eax]
		mov	ecx, [ebx+4]
		mov	eax, [ecx+4Ch]
		mov	edx, [eax+18h]
		mov	edi, [edx+48h]
		mov	edx, [ebx+3Ch]
		mov	[esp+288h+var_270], edx
		mov	edx, [ebx+38h]
		mov	[esp+288h+var_274], edx
		mov	[esp+288h+var_278], 0Ah
		jmp	loc_62B96CDE
; ---------------------------------------------------------------------------
		align 4

loc_62B96E5C:				; CODE XREF: silc_client_command_kick+161j
		xor	ecx, ecx
		mov	[ebp+var_230], 0
		jmp	loc_62B96A19
; ---------------------------------------------------------------------------
		align 10h

loc_62B96E70:				; CODE XREF: silc_client_command_kick+139j
		xor	eax, eax
		mov	[ebp+var_23C], 0
		jmp	loc_62B969ED
; ---------------------------------------------------------------------------
		align 4

loc_62B96E84:				; CODE XREF: silc_client_command_kick+395j
		mov	edi, [ebp+var_21C]
		mov	ecx, [edi+18h]
		mov	ecx, [ecx+48h]
		mov	[esp+288h+var_270], edx
		mov	[esp+288h+var_274], eax
		mov	[esp+288h+var_278], 19h
		movzx	eax, byte ptr [ebx+34h]
		mov	[esp+288h+var_27C], eax
		mov	[esp+288h+var_280], 0
		mov	[esp+288h+var_284], esi
		mov	[esp+288h+var_288], edi
		call	dword ptr [ecx+10h]
		mov	[ebp+var_220], 0
		jmp	loc_62B96BF7
; ---------------------------------------------------------------------------
		align 4

loc_62B96ECC:				; CODE XREF: silc_client_command_kick+496j
		xor	ecx, ecx
		mov	[ebp+var_22C], 0
		jmp	loc_62B96D4E
; ---------------------------------------------------------------------------
		align 10h

loc_62B96EE0:				; CODE XREF: silc_client_command_kick+46Ej
		mov	[ebp+var_230], 0
		jmp	loc_62B96D22
silc_client_command_kick endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  39. silc_client_command_list

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public silc_client_command_list
silc_client_command_list proc near	; DATA XREF: silc_client_commands_unregister+305o
					; silc_client_commands_register+24Eo

var_58		= dword	ptr -58h
var_54		= dword	ptr -54h
var_50		= dword	ptr -50h
var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		sub	esp, 4Ch
		mov	ebx, [ebp+arg_4]
		mov	esi, [ebx+4]
		mov	eax, [esi+4Ch]
		mov	[ebp+var_1C], eax
		cmp	dword ptr [ebx+38h], 2
		jz	loc_62B96FB0

loc_62B96F0F:				; CODE XREF: silc_client_command_list+DDj
		xor	edx, edx

loc_62B96F11:				; CODE XREF: silc_client_command_list+103j
		mov	[esp+58h+var_44], 0
		mov	[esp+58h+var_48], 0
		mov	[esp+58h+var_4C], 0
		movzx	eax, byte ptr [ebx+34h]
		mov	[esp+58h+var_50], eax
		mov	[esp+58h+var_54], ebx
		mov	[esp+58h+var_58], esi
		mov	[ebp+var_20], edx
		call	sub_62B95C0C
		mov	edx, [ebp+var_20]
		nop

loc_62B96F44:				; CODE XREF: silc_client_command_list+165j
		mov	[esp+58h+var_50], edx
		mov	[esp+58h+var_54], esi
		mov	eax, [ebp+var_1C]
		mov	[esp+58h+var_58], eax
		call	silc_client_unref_channel
		mov	edx, [ebx+4]
		mov	eax, [edx+4Ch]
		mov	ecx, [eax+18h]
		mov	ecx, [ecx+48h]
		mov	esi, [ebx+3Ch]
		mov	[esp+58h+var_40], esi
		mov	esi, [ebx+38h]
		mov	[esp+58h+var_44], esi
		mov	[esp+58h+var_48], 0
		movzx	ebx, byte ptr [ebx+34h]
		mov	[esp+58h+var_4C], ebx
		mov	[esp+58h+var_50], 1
		mov	[esp+58h+var_54], edx
		mov	[esp+58h+var_58], eax
		call	dword ptr [ecx+10h]
		mov	[esp+58h+var_54], offset silc_client_command_reply_wait
		mov	eax, [ebp+arg_0]
		mov	[esp+58h+var_58], eax
		call	silc_fsm_next
		xor	eax, eax
		add	esp, 4Ch
		pop	ebx
		pop	esi
		pop	edi
		leave
		retn
; ---------------------------------------------------------------------------

loc_62B96FB0:				; CODE XREF: silc_client_command_list+19j
		mov	eax, [ebx+3Ch]
		mov	eax, [eax+4]
		mov	[esp+58h+var_50], eax
		mov	[esp+58h+var_54], esi
		mov	eax, [ebp+var_1C]
		mov	[esp+58h+var_58], eax
		call	silc_client_get_channel
		mov	edx, eax
		test	eax, eax
		jz	loc_62B96F0F
		mov	[esp+58h+var_54], 3
		lea	eax, [eax+114h]
		mov	[esp+58h+var_58], eax
		mov	[ebp+var_20], edx
		call	silc_id_payload_encode
		mov	edi, eax
		test	eax, eax
		mov	edx, [ebp+var_20]
		jz	loc_62B96F11
		mov	ecx, [eax+4]
		mov	eax, [eax+8]
		sub	eax, ecx
		mov	[esp+58h+var_38], eax
		mov	[esp+58h+var_3C], ecx
		mov	[esp+58h+var_40], 1
		mov	[esp+58h+var_44], 1
		mov	[esp+58h+var_48], 0
		mov	[esp+58h+var_4C], 0
		movzx	eax, byte ptr [ebx+34h]
		mov	[esp+58h+var_50], eax
		mov	[esp+58h+var_54], ebx
		mov	[esp+58h+var_58], esi
		mov	[ebp+var_20], edx
		call	sub_62B95C0C
		mov	eax, [edi]
		mov	[esp+58h+var_58], eax
		call	silc_free
		mov	[esp+58h+var_58], edi
		call	silc_free
		mov	edx, [ebp+var_20]
		jmp	loc_62B96F44
silc_client_command_list endp

; ---------------------------------------------------------------------------
		align 4
; Exported entry  23. silc_client_command_ban

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public silc_client_command_ban
silc_client_command_ban	proc near	; DATA XREF: silc_client_commands_unregister+D55o
					; silc_client_commands_register+930o

var_98		= dword	ptr -98h
var_94		= dword	ptr -94h
var_90		= dword	ptr -90h
var_8C		= dword	ptr -8Ch
var_88		= dword	ptr -88h
var_84		= dword	ptr -84h
var_80		= dword	ptr -80h
var_7C		= dword	ptr -7Ch
var_78		= dword	ptr -78h
var_74		= dword	ptr -74h
var_70		= dword	ptr -70h
var_6C		= dword	ptr -6Ch
var_68		= dword	ptr -68h
var_64		= dword	ptr -64h
var_60		= dword	ptr -60h
var_4C		= dword	ptr -4Ch
var_40		= dword	ptr -40h
var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_20		= dword	ptr -20h
var_19		= byte ptr -19h
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		sub	esp, 8Ch
		mov	ebx, [ebp+arg_4]
		mov	esi, [ebx+4]
		mov	eax, [esi+4Ch]
		mov	[ebp+var_30], eax
		mov	[ebp+var_20], 0
		mov	eax, [ebx+38h]
		cmp	eax, 1
		jbe	loc_62B973A0
		mov	edx, [ebx+3Ch]
		mov	ecx, [edx+4]
		cmp	byte ptr [ecx],	2Ah
		jz	loc_62B97214
		mov	[esp+98h+var_90], ecx
		mov	[esp+98h+var_94], esi
		mov	ecx, [ebp+var_30]
		mov	[esp+98h+var_98], ecx
		call	silc_client_get_channel
		mov	[ebp+var_2C], eax
		test	eax, eax
		jz	loc_62B97524
		cmp	dword ptr [ebx+38h], 3
		jz	loc_62B97242

loc_62B970BE:				; CODE XREF: silc_client_command_ban+1E0j
					; silc_client_command_ban+218j
		mov	[esp+98h+var_94], 3
		mov	eax, [ebp+var_2C]
		add	eax, 114h
		mov	[esp+98h+var_98], eax
		call	silc_id_payload_encode
		mov	edi, eax

loc_62B970D8:				; CODE XREF: silc_client_command_ban+31Dj
		mov	[ebp+var_38], 0
		xor	edx, edx
		mov	[ebp+var_4C], 0
		xor	eax, eax
		mov	[ebp+var_34], 0

loc_62B970F1:				; CODE XREF: silc_client_command_ban+33Cj
		test	edi, edi
		jz	loc_62B97450
		mov	ecx, [edi+4]
		mov	[ebp+var_3C], ecx
		mov	[esp+98h+var_60], eax
		mov	eax, [ebp+var_4C]
		mov	[esp+98h+var_64], eax
		mov	[esp+98h+var_68], 3
		mov	ecx, [ebp+var_38]
		mov	[esp+98h+var_6C], ecx
		mov	eax, [ebp+var_34]
		mov	[esp+98h+var_70], eax
		mov	[esp+98h+var_74], 2
		mov	eax, [edi+8]
		sub	eax, [ebp+var_3C]
		mov	[esp+98h+var_78], eax
		mov	ecx, [ebp+var_3C]
		mov	[esp+98h+var_7C], ecx
		mov	[esp+98h+var_80], 1
		mov	[esp+98h+var_84], 3
		mov	[esp+98h+var_88], 0
		mov	[esp+98h+var_8C], 0
		movzx	eax, byte ptr [ebx+34h]
		mov	[esp+98h+var_90], eax
		mov	[esp+98h+var_94], ebx
		mov	[esp+98h+var_98], esi
		mov	[ebp+var_40], edx
		call	sub_62B95C0C
		mov	eax, [edi]
		mov	[esp+98h+var_98], eax
		call	silc_free
		mov	[esp+98h+var_98], edi
		call	silc_free
		mov	edx, [ebp+var_40]

loc_62B97185:				; CODE XREF: silc_client_command_ban+467j
		test	edx, edx
		jz	short loc_62B971A1
		mov	eax, [edx]
		mov	[esp+98h+var_98], eax
		mov	[ebp+var_40], edx
		call	silc_free
		mov	edx, [ebp+var_40]
		mov	[esp+98h+var_98], edx
		call	silc_free

loc_62B971A1:				; CODE XREF: silc_client_command_ban+12Bj
		mov	edi, [ebp+var_2C]
		mov	[esp+98h+var_90], edi
		mov	[esp+98h+var_94], esi
		mov	eax, [ebp+var_30]
		mov	[esp+98h+var_98], eax
		call	silc_client_unref_channel
		mov	edx, [ebx+4]
		mov	eax, [edx+4Ch]
		mov	ecx, [eax+18h]
		mov	ecx, [ecx+48h]
		mov	esi, [ebx+3Ch]
		mov	[esp+98h+var_80], esi
		mov	esi, [ebx+38h]
		mov	[esp+98h+var_84], esi
		mov	[esp+98h+var_88], 0
		movzx	ebx, byte ptr [ebx+34h]
		mov	[esp+98h+var_8C], ebx
		mov	[esp+98h+var_90], 1
		mov	[esp+98h+var_94], edx
		mov	[esp+98h+var_98], eax
		call	dword ptr [ecx+10h]
		mov	[esp+98h+var_94], offset silc_client_command_reply_wait
		mov	eax, [ebp+arg_0]
		mov	[esp+98h+var_98], eax
		call	silc_fsm_next
		xor	eax, eax

loc_62B97208:				; CODE XREF: silc_client_command_ban+3ECj
		add	esp, 8Ch
		pop	ebx
		pop	esi
		pop	edi
		leave
		retn
; ---------------------------------------------------------------------------
		align 4

loc_62B97214:				; CODE XREF: silc_client_command_ban+34j
		mov	ecx, [esi+30h]
		mov	[ebp+var_2C], ecx
		test	ecx, ecx
		jz	loc_62B97410
		mov	eax, [ebp+var_2C]
		mov	[esp+98h+var_90], eax
		mov	[esp+98h+var_94], esi
		mov	edx, [ebp+var_30]
		mov	[esp+98h+var_98], edx
		call	silc_client_ref_channel
		cmp	dword ptr [ebx+38h], 3
		jnz	loc_62B970BE

loc_62B97242:				; CODE XREF: silc_client_command_ban+5Cj
		mov	eax, [ebx+3Ch]
		mov	edx, [eax+8]
		cmp	byte ptr [edx],	2Bh
		setnz	[ebp+var_19]
		lea	edx, [ebp+var_20]
		mov	[esp+98h+var_94], edx
		mov	eax, [eax+8]
		inc	eax
		mov	[esp+98h+var_98], eax
		call	silc_pkcs_load_public_key
		mov	eax, [ebx+3Ch]
		mov	eax, [eax+8]
		cmp	[ebp+var_20], 1
		adc	eax, 0
		mov	[ebp+var_34], eax
		test	eax, eax
		jz	loc_62B970BE
		mov	[esp+98h+var_94], 10h
		mov	[esp+98h+var_98], 1
		call	silc_calloc
		test	eax, eax
		jz	loc_62B9754B
		mov	[esp+98h+var_94], 1
		mov	[esp+98h+var_98], 2
		mov	[ebp+var_40], eax
		call	silc_calloc
		mov	edx, [ebp+var_40]
		mov	[edx], eax
		test	eax, eax
		jz	loc_62B9754B
		mov	[edx+4], eax
		add	eax, 2
		mov	[edx+0Ch], eax
		mov	[edx+8], eax

loc_62B972C6:				; CODE XREF: silc_client_command_ban+4F1j
		mov	[esp+98h+var_8C], 1Dh
		mov	[esp+98h+var_90], 1
		mov	[esp+98h+var_94], 3
		mov	[esp+98h+var_98], edx
		mov	[ebp+var_40], edx
		call	silc_buffer_format
		mov	eax, [ebp+var_20]
		test	eax, eax
		mov	edx, [ebp+var_40]
		jz	loc_62B974C8
		mov	[esp+98h+var_98], eax
		call	silc_public_key_payload_encode
		mov	edi, eax
		test	eax, eax
		mov	edx, [ebp+var_40]
		jz	loc_62B974FC
		mov	ecx, [eax+4]
		mov	[esp+98h+var_8C], 2
		mov	eax, [eax+8]
		sub	eax, ecx
		mov	[esp+98h+var_90], eax
		mov	[esp+98h+var_94], ecx
		mov	[esp+98h+var_98], edx
		call	silc_argument_payload_encode_one
		mov	edx, eax
		mov	eax, [edi]
		mov	[esp+98h+var_98], eax
		mov	[ebp+var_40], edx
		call	silc_free
		mov	[esp+98h+var_98], edi
		call	silc_free
		mov	edx, [ebp+var_40]

loc_62B97346:				; CODE XREF: silc_client_command_ban+4C2j
		mov	eax, [ebp+var_20]
		mov	[esp+98h+var_98], eax
		mov	[ebp+var_40], edx
		call	silc_pkcs_public_key_free
		mov	edx, [ebp+var_40]

loc_62B97357:				; CODE XREF: silc_client_command_ban+498j
		mov	[esp+98h+var_94], 3
		mov	eax, [ebp+var_2C]
		add	eax, 114h
		mov	[esp+98h+var_98], eax
		mov	[ebp+var_40], edx
		call	silc_id_payload_encode
		mov	edi, eax
		mov	edx, [ebp+var_40]
		test	edx, edx
		jz	loc_62B970D8
		mov	eax, [edx+4]
		mov	[ebp+var_4C], eax
		mov	eax, [edx+8]
		sub	eax, [ebp+var_4C]
		mov	[ebp+var_38], 1
		lea	ecx, [ebp+var_19]
		mov	[ebp+var_34], ecx
		jmp	loc_62B970F1
; ---------------------------------------------------------------------------
		align 10h

loc_62B973A0:				; CODE XREF: silc_client_command_ban+25j
		mov	edx, [ebp+var_30]
		mov	eax, [edx+18h]
		mov	eax, [eax+48h]
		mov	[esp+98h+var_8C], offset aUsageBanChanne ; "Usage: /BAN	<channel> [+|-[<nickname>[@"...
		mov	[esp+98h+var_90], 0
		mov	[esp+98h+var_94], esi
		mov	[esp+98h+var_98], edx
		call	dword ptr [eax]
		mov	edx, [ebx+4]
		mov	eax, [edx+4Ch]
		mov	ecx, [eax+18h]
		mov	ecx, [ecx+48h]
		mov	esi, [ebx+3Ch]
		mov	[esp+98h+var_80], esi
		mov	esi, [ebx+38h]
		mov	[esp+98h+var_84], esi
		mov	[esp+98h+var_88], 1Dh

loc_62B973E4:				; CODE XREF: silc_client_command_ban+4EAj
		movzx	ebx, byte ptr [ebx+34h]
		mov	[esp+98h+var_8C], ebx
		mov	[esp+98h+var_90], 0
		mov	[esp+98h+var_94], edx
		mov	[esp+98h+var_98], eax
		call	dword ptr [ecx+10h]
		mov	eax, 3
		add	esp, 8Ch
		pop	ebx
		pop	esi
		pop	edi
		leave
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_62B97410:				; CODE XREF: silc_client_command_ban+1C0j
		mov	edi, [ebp+var_30]
		mov	ecx, [edi+18h]
		mov	ecx, [ecx+48h]
		mov	[esp+98h+var_80], edx
		mov	[esp+98h+var_84], eax
		mov	[esp+98h+var_88], 19h
		movzx	eax, byte ptr [ebx+34h]
		mov	[esp+98h+var_8C], eax
		mov	[esp+98h+var_90], 0
		mov	[esp+98h+var_94], esi
		mov	[esp+98h+var_98], edi
		call	dword ptr [ecx+10h]
		mov	eax, 3
		jmp	loc_62B97208
; ---------------------------------------------------------------------------
		align 10h

loc_62B97450:				; CODE XREF: silc_client_command_ban+97j
		mov	[esp+98h+var_60], eax
		mov	ecx, [ebp+var_4C]
		mov	[esp+98h+var_64], ecx
		mov	[esp+98h+var_68], 3
		mov	edi, [ebp+var_38]
		mov	[esp+98h+var_6C], edi
		mov	eax, [ebp+var_34]
		mov	[esp+98h+var_70], eax
		mov	[esp+98h+var_74], 2
		mov	[esp+98h+var_78], 0
		mov	[esp+98h+var_7C], 0
		mov	[esp+98h+var_80], 1
		mov	[esp+98h+var_84], 3
		mov	[esp+98h+var_88], 0
		mov	[esp+98h+var_8C], 0
		movzx	eax, byte ptr [ebx+34h]
		mov	[esp+98h+var_90], eax
		mov	[esp+98h+var_94], ebx
		mov	[esp+98h+var_98], esi
		mov	[ebp+var_40], edx
		call	sub_62B95C0C
		mov	edx, [ebp+var_40]
		jmp	loc_62B97185
; ---------------------------------------------------------------------------

loc_62B974C8:				; CODE XREF: silc_client_command_ban+295j
		xor	eax, eax
		mov	ecx, 0FFFFFFFFh
		mov	edi, [ebp+var_34]
		repne scasb
		not	ecx
		dec	ecx
		mov	[esp+98h+var_8C], 1
		mov	[esp+98h+var_90], ecx
		mov	edi, [ebp+var_34]
		mov	[esp+98h+var_94], edi
		mov	[esp+98h+var_98], edx
		call	silc_argument_payload_encode_one
		mov	edx, eax
		jmp	loc_62B97357
; ---------------------------------------------------------------------------
		align 4

loc_62B974FC:				; CODE XREF: silc_client_command_ban+2AAj
		mov	[esp+98h+var_8C], 2
		mov	[esp+98h+var_90], 0
		mov	[esp+98h+var_94], 0
		mov	[esp+98h+var_98], edx
		call	silc_argument_payload_encode_one
		mov	edx, eax
		jmp	loc_62B97346
; ---------------------------------------------------------------------------
		align 4

loc_62B97524:				; CODE XREF: silc_client_command_ban+52j
		mov	edx, [ebx+4]
		mov	eax, [edx+4Ch]
		mov	ecx, [eax+18h]
		mov	ecx, [ecx+48h]
		mov	esi, [ebx+3Ch]
		mov	[esp+98h+var_80], esi
		mov	esi, [ebx+38h]
		mov	[esp+98h+var_84], esi
		mov	[esp+98h+var_88], 19h
		jmp	loc_62B973E4
; ---------------------------------------------------------------------------

loc_62B9754B:				; CODE XREF: silc_client_command_ban+234j
					; silc_client_command_ban+258j
		xor	edx, edx
		jmp	loc_62B972C6
silc_client_command_ban	endp

; ---------------------------------------------------------------------------
		align 4
; Exported entry  43. silc_client_command_oper_send

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public silc_client_command_oper_send
silc_client_command_oper_send proc near	; DATA XREF: silc_client_command_silcoper+1Co
					; silc_client_command_oper+1Co

var_68		= dword	ptr -68h
var_64		= dword	ptr -64h
var_60		= dword	ptr -60h
var_5C		= dword	ptr -5Ch
var_58		= dword	ptr -58h
var_54		= dword	ptr -54h
var_50		= dword	ptr -50h
var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_3C		= dword	ptr -3Ch
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		sub	esp, 5Ch
		mov	ebx, [ebp+arg_4]
		mov	edx, [ebx+4]
		mov	eax, [ebx+60h]
		mov	[ebp+var_1C], eax
		test	eax, eax
		jz	loc_62B976D0
		mov	eax, [eax]
		test	eax, eax
		jz	loc_62B976D0
		mov	esi, [ebp+var_1C]
		movzx	ecx, word ptr [esi+4]
		mov	[esp+68h+var_58], ecx
		mov	[esp+68h+var_5C], eax
		mov	[esp+68h+var_60], 0
		mov	[esp+68h+var_64], 0
		mov	[esp+68h+var_68], 1
		mov	[ebp+var_2C], edx
		call	silc_auth_payload_encode
		mov	esi, eax
		mov	edx, [ebp+var_2C]
		test	esi, esi
		jz	loc_62B97718

loc_62B975B6:				; CODE XREF: silc_client_command_oper_send+1BEj
		mov	eax, [esi+4]
		mov	[ebp+var_28], eax
		mov	ecx, [esi+8]
		sub	ecx, eax
		mov	[ebp+var_20], ecx

loc_62B975C4:				; CODE XREF: silc_client_command_oper_send+1D2j
		mov	eax, [ebx+3Ch]
		mov	eax, [eax+4]
		mov	[ebp+var_24], eax
		mov	ecx, 0FFFFFFFFh
		mov	edi, eax
		xor	eax, eax
		repne scasb
		not	ecx
		dec	ecx
		mov	eax, [ebp+var_20]
		mov	[esp+68h+var_3C], eax
		mov	eax, [ebp+var_28]
		mov	[esp+68h+var_40], eax
		mov	[esp+68h+var_44], 2
		mov	[esp+68h+var_48], ecx
		mov	ecx, [ebp+var_24]
		mov	[esp+68h+var_4C], ecx
		mov	[esp+68h+var_50], 1
		mov	[esp+68h+var_54], 2
		mov	[esp+68h+var_58], 0
		mov	[esp+68h+var_5C], 0
		movzx	eax, byte ptr [ebx+34h]
		mov	[esp+68h+var_60], eax
		mov	[esp+68h+var_64], ebx
		mov	[esp+68h+var_68], edx
		call	sub_62B95C0C
		mov	edx, [esi]
		mov	ecx, [esi+0Ch]
		sub	ecx, edx
		mov	edi, edx
		xor	eax, eax
		rep stosb
		mov	eax, [esi]
		mov	[esi+8], eax
		mov	[esi+4], eax
		mov	[esp+68h+var_68], eax
		call	silc_free
		mov	[esp+68h+var_68], esi
		call	silc_free
		mov	edx, [ebp+var_1C]
		test	edx, edx
		jz	short loc_62B97674
		mov	edx, [ebp+var_1C]
		mov	eax, [edx]
		mov	[esp+68h+var_68], eax
		call	silc_free
		mov	ecx, [ebp+var_1C]
		mov	[esp+68h+var_68], ecx
		call	silc_free

loc_62B97674:				; CODE XREF: silc_client_command_oper_send+106j
		mov	edx, [ebx+4]
		mov	eax, [edx+4Ch]
		mov	ecx, [eax+18h]
		mov	ecx, [ecx+48h]
		mov	esi, [ebx+3Ch]
		mov	[esp+68h+var_50], esi
		mov	esi, [ebx+38h]
		mov	[esp+68h+var_54], esi
		mov	[esp+68h+var_58], 0
		movzx	ebx, byte ptr [ebx+34h]
		mov	[esp+68h+var_5C], ebx
		mov	[esp+68h+var_60], 1
		mov	[esp+68h+var_64], edx
		mov	[esp+68h+var_68], eax
		call	dword ptr [ecx+10h]
		mov	[esp+68h+var_64], offset silc_client_command_reply_wait
		mov	eax, [ebp+arg_0]
		mov	[esp+68h+var_68], eax
		call	silc_fsm_next
		xor	eax, eax
		add	esp, 5Ch
		pop	ebx
		pop	esi
		pop	edi
		leave
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_62B976D0:				; CODE XREF: silc_client_command_oper_send+17j
					; silc_client_command_oper_send+21j
		mov	[esp+68h+var_54], 2
		mov	eax, [edx+4]
		mov	[esp+68h+var_58], eax
		mov	eax, [edx+54h]
		mov	eax, [eax+0ECh]
		mov	[esp+68h+var_5C], eax
		mov	eax, [edx+4Ch]
		mov	eax, [eax+10h]
		mov	[esp+68h+var_60], eax
		mov	eax, [edx+38h]
		mov	[esp+68h+var_64], eax
		mov	eax, [edx+34h]
		mov	[esp+68h+var_68], eax
		mov	[ebp+var_2C], edx
		call	silc_auth_public_key_auth_generate
		mov	esi, eax
		mov	edx, [ebp+var_2C]
		test	esi, esi
		jnz	loc_62B975B6

loc_62B97718:				; CODE XREF: silc_client_command_oper_send+5Cj
		mov	[ebp+var_20], 0
		mov	[ebp+var_28], 0
		jmp	loc_62B975C4
silc_client_command_oper_send endp

; ---------------------------------------------------------------------------
		align 4
; Exported entry  37. silc_client_command_kill

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public silc_client_command_kill
silc_client_command_kill proc near	; DATA XREF: silc_client_commands_unregister+5C5o
					; silc_client_commands_register+3E7o

Str1		= dword	ptr -88h
Str2		= dword	ptr -84h
var_80		= dword	ptr -80h
var_7C		= dword	ptr -7Ch
var_78		= dword	ptr -78h
var_74		= dword	ptr -74h
var_70		= dword	ptr -70h
var_6C		= dword	ptr -6Ch
var_68		= dword	ptr -68h
var_64		= dword	ptr -64h
var_60		= dword	ptr -60h
var_5C		= dword	ptr -5Ch
var_58		= dword	ptr -58h
var_54		= dword	ptr -54h
var_50		= dword	ptr -50h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_1C		= dword	ptr -1Ch
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		sub	esp, 7Ch
		mov	ebx, [ebp+arg_4]
		mov	esi, [ebx+4]
		mov	eax, [esi+4Ch]
		mov	[ebp+var_2C], eax
		mov	[ebp+var_1C], 0
		cmp	dword ptr [ebx+38h], 1
		jbe	loc_62B97974
		lea	eax, [ebp+var_1C]
		mov	[esp+88h+var_7C], eax ;	int
		mov	eax, [ebx+3Ch]
		mov	eax, [eax+4]
		mov	[esp+88h+var_80], eax ;	char *
		mov	[esp+88h+Str2],	esi ; int
		mov	ecx, [ebp+var_2C]
		mov	[esp+88h+Str1],	ecx ; int
		call	silc_client_nickname_parse
		test	al, al
		jnz	short loc_62B97784
		mov	eax, 3

loc_62B9777B:				; CODE XREF: silc_client_command_kill+420j
		add	esp, 7Ch
		pop	ebx
		pop	esi
		pop	edi
		leave
		retn
; ---------------------------------------------------------------------------
		align 4

loc_62B97784:				; CODE XREF: silc_client_command_kill+48j
		mov	[esp+88h+var_7C], 0
		mov	eax, [ebx+3Ch]
		mov	eax, [eax+4]
		mov	[esp+88h+var_80], eax
		mov	[esp+88h+Str2],	esi
		mov	edi, [ebp+var_2C]
		mov	[esp+88h+Str1],	edi
		call	silc_client_get_clients_local
		mov	edx, eax
		test	eax, eax
		jz	loc_62B97AF0
		mov	eax, [eax+14h]
		mov	[edx+18h], eax
		mov	eax, [edx+8]
		test	eax, eax
		jz	loc_62B97B54
		test	byte ptr [edx+10h], 2
		jnz	loc_62B979E0
		movzx	ecx, word ptr [edx+0Ch]
		mov	ecx, [eax+ecx]

loc_62B977D1:				; CODE XREF: silc_client_command_kill+2BBj
		mov	[edx+8], ecx
		mov	[edx+14h], eax
		mov	edi, [eax]

loc_62B977D9:				; CODE XREF: silc_client_command_kill+431j
		cmp	dword ptr [ebx+38h], 2
		ja	loc_62B979EC
		mov	[ebp+var_3C], 0

loc_62B977EA:				; CODE XREF: silc_client_command_kill+30Fj
					; silc_client_command_kill+330j
		mov	[esp+88h+Str2],	2
		add	edi, 38Ch
		mov	[esp+88h+Str1],	edi
		mov	[ebp+var_44], edx
		call	silc_id_payload_encode
		mov	[ebp+var_30], eax
		mov	edx, [ebp+var_44]

loc_62B97809:				; CODE XREF: silc_client_command_kill+392j
		mov	[ebp+var_38], 0
		mov	[ebp+var_34], 0
		mov	[ebp+var_40], 0

loc_62B9781E:				; CODE XREF: silc_client_command_kill+3ACj
		mov	eax, [ebp+var_3C]
		test	eax, eax
		jz	loc_62B97BDC
		xor	eax, eax
		mov	ecx, 0FFFFFFFFh
		mov	edi, [ebp+var_3C]
		repne scasb
		not	ecx
		lea	eax, [ecx-1]

loc_62B9783A:				; CODE XREF: silc_client_command_kill+4B2j
		mov	edi, [ebp+var_30]
		test	edi, edi
		jz	loc_62B97B64
		mov	edi, [ebp+var_30]
		mov	ecx, [edi+4]
		mov	edi, [ebp+var_38]
		mov	[esp+88h+var_50], edi
		mov	edi, [ebp+var_40]
		mov	[esp+88h+var_54], edi
		mov	[esp+88h+var_58], 3
		mov	[esp+88h+var_5C], eax
		mov	eax, [ebp+var_3C]
		mov	[esp+88h+var_60], eax
		mov	[esp+88h+var_64], 2
		mov	edi, [ebp+var_30]
		mov	eax, [edi+8]
		sub	eax, ecx
		mov	[esp+88h+var_68], eax
		mov	[esp+88h+var_6C], ecx
		mov	[esp+88h+var_70], 1
		mov	[esp+88h+var_74], 3
		mov	[esp+88h+var_78], 0
		mov	[esp+88h+var_7C], 0
		movzx	eax, byte ptr [ebx+34h]
		mov	[esp+88h+var_80], eax
		mov	[esp+88h+Str2],	ebx
		mov	[esp+88h+Str1],	esi
		mov	[ebp+var_44], edx
		call	sub_62B95C0C
		mov	eax, [edi]
		mov	[esp+88h+Str1],	eax
		call	silc_free
		mov	[esp+88h+Str1],	edi
		call	silc_free
		mov	edx, [ebp+var_44]

loc_62B978D0:				; CODE XREF: silc_client_command_kill+4ABj
		mov	ecx, [ebp+var_34]
		test	ecx, ecx
		jz	short loc_62B978F5
		mov	ecx, [ebp+var_34]
		mov	eax, [ecx]
		mov	[esp+88h+Str1],	eax
		mov	[ebp+var_44], edx
		call	silc_free
		mov	edi, [ebp+var_34]
		mov	[esp+88h+Str1],	edi
		call	silc_free
		mov	edx, [ebp+var_44]

loc_62B978F5:				; CODE XREF: silc_client_command_kill+1A9j
		mov	eax, [ebp+var_1C]
		mov	[esp+88h+Str1],	eax
		mov	[ebp+var_44], edx
		call	silc_free
		mov	edx, [ebp+var_44]
		mov	[esp+84h+var_7C], edx
		mov	[esp+84h+var_80], esi
		mov	eax, [ebp+var_2C]
		mov	[esp+84h+Str2],	eax
		call	silc_client_list_free
		mov	edx, [ebx+4]
		mov	eax, [edx+4Ch]
		mov	ecx, [eax+18h]
		mov	ecx, [ecx+48h]
		mov	esi, [ebx+3Ch]
		mov	[esp+84h+var_6C], esi
		mov	esi, [ebx+38h]
		mov	[esp+84h+var_70], esi
		mov	[esp+84h+var_74], 0
		movzx	ebx, byte ptr [ebx+34h]
		mov	[esp+84h+var_78], ebx
		mov	[esp+84h+var_7C], 1
		mov	[esp+84h+var_80], edx
		mov	[esp+84h+Str2],	eax
		call	dword ptr [ecx+10h]
		mov	[esp+84h+var_80], offset silc_client_command_reply_wait
		mov	edx, [ebp+arg_0]
		mov	[esp+84h+Str2],	edx
		call	silc_fsm_next
		xor	eax, eax
		add	esp, 7Ch
		pop	ebx
		pop	esi
		pop	edi
		leave
		retn
; ---------------------------------------------------------------------------
		align 4

loc_62B97974:				; CODE XREF: silc_client_command_kill+20j
		mov	edx, eax
		mov	eax, [eax+18h]
		mov	eax, [eax+48h]
		mov	[esp+88h+var_7C], offset aUsageKillNickn ; "Usage: /KILL <nickname> [<comment>]	[-p"...
		mov	[esp+88h+var_80], 0
		mov	[esp+88h+Str2],	esi
		mov	[esp+88h+Str1],	edx
		call	dword ptr [eax]
		mov	edx, [ebx+4]
		mov	eax, [edx+4Ch]
		mov	ecx, [eax+18h]
		mov	ecx, [ecx+48h]
		mov	esi, [ebx+3Ch]
		mov	[esp+84h+var_6C], esi
		mov	esi, [ebx+38h]
		mov	[esp+84h+var_70], esi
		mov	[esp+84h+var_74], 1Dh
		movzx	ebx, byte ptr [ebx+34h]
		mov	[esp+84h+var_78], ebx
		mov	[esp+84h+var_7C], 0
		mov	[esp+84h+var_80], edx
		mov	[esp+84h+Str2],	eax
		call	dword ptr [ecx+10h]
		mov	eax, 3
		add	esp, 7Ch
		pop	ebx
		pop	esi
		pop	edi
		leave
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_62B979E0:				; CODE XREF: silc_client_command_kill+98j
		movzx	ecx, word ptr [edx+0Eh]
		mov	ecx, [eax+ecx]
		jmp	loc_62B977D1
; ---------------------------------------------------------------------------

loc_62B979EC:				; CODE XREF: silc_client_command_kill+B1j
		mov	[esp+88h+Str2],	offset Str2 ; "-pubkey"
		mov	eax, [ebx+3Ch]
		mov	eax, [eax+8]
		mov	[esp+88h+Str1],	eax ; Str1
		mov	[ebp+var_44], edx
		call	_stricmp
		test	eax, eax
		mov	edx, [ebp+var_44]
		jnz	loc_62B97AE0
		mov	eax, [ebx+3Ch]
		mov	eax, [eax+8]
		mov	[ebp+var_3C], 0

loc_62B97A1D:				; CODE XREF: silc_client_command_kill+3BDj
		mov	[esp+88h+Str2],	offset Str2 ; "-pubkey"
		mov	[esp+88h+Str1],	eax ; Str1
		mov	[ebp+var_44], edx
		call	_stricmp
		test	eax, eax
		mov	edx, [ebp+var_44]
		jz	short loc_62B97A62
		cmp	dword ptr [ebx+38h], 3
		jbe	loc_62B977EA
		mov	[esp+88h+Str2],	offset Str2 ; "-pubkey"
		mov	eax, [ebx+3Ch]
		mov	eax, [eax+0Ch]
		mov	[esp+88h+Str1],	eax ; Str1
		call	_stricmp
		test	eax, eax
		mov	edx, [ebp+var_44]
		jnz	loc_62B977EA

loc_62B97A62:				; CODE XREF: silc_client_command_kill+309j
		add	edi, 38Ch
		mov	[esp+88h+var_74], 2
		mov	[esp+88h+var_78], edi
		mov	eax, [esi+54h]
		mov	eax, [eax+0F0h]
		mov	[esp+88h+var_7C], eax
		mov	eax, [esi+4Ch]
		mov	eax, [eax+10h]
		mov	[esp+88h+var_80], eax
		mov	eax, [esi+38h]
		mov	[esp+88h+Str2],	eax
		mov	eax, [esi+34h]
		mov	[esp+88h+Str1],	eax
		mov	[ebp+var_44], edx
		call	silc_auth_public_key_auth_generate
		mov	[ebp+var_34], eax
		mov	[esp+88h+Str2],	2
		mov	[esp+88h+Str1],	edi
		call	silc_id_payload_encode
		mov	[ebp+var_30], eax
		mov	edx, [ebp+var_34]
		test	edx, edx
		mov	edx, [ebp+var_44]
		jz	loc_62B97809
		mov	edi, [ebp+var_34]
		mov	edi, [edi+4]
		mov	[ebp+var_40], edi
		mov	eax, [ebp+var_34]
		mov	eax, [eax+8]
		sub	eax, edi
		mov	[ebp+var_38], eax
		jmp	loc_62B9781E
; ---------------------------------------------------------------------------
		align 10h

loc_62B97AE0:				; CODE XREF: silc_client_command_kill+2DEj
		mov	eax, [ebx+3Ch]
		mov	eax, [eax+8]
		mov	[ebp+var_3C], eax
		jmp	loc_62B97A1D
; ---------------------------------------------------------------------------
		align 10h

loc_62B97AF0:				; CODE XREF: silc_client_command_kill+7Dj
		mov	edx, [ebp+arg_0]
		mov	al, [edx+28h]
		mov	dl, al
		or	edx, 4
		mov	ecx, [ebp+arg_0]
		mov	[ecx+28h], dl
		test	al, 4
		jnz	loc_62B97BE4

loc_62B97B09:				; CODE XREF: silc_client_command_kill+4E4j
		mov	[esp+88h+var_74], ebx
		mov	[esp+88h+var_78], offset sub_62B9529C
		mov	[esp+88h+var_7C], 0
		mov	eax, [ebp+var_1C]
		mov	[esp+88h+var_80], eax
		mov	[esp+88h+Str2],	esi
		mov	edi, [ebp+var_2C]
		mov	[esp+88h+Str1],	edi
		call	silc_client_get_clients
		mov	eax, [ebp+arg_0]
		mov	dl, [eax+28h]
		mov	al, dl
		shr	al, 2
		and	edx, 0FFFFFFFBh
		mov	ecx, [ebp+arg_0]
		mov	[ecx+28h], dl
		shl	eax, 1
		and	eax, 2
		jmp	loc_62B9777B
; ---------------------------------------------------------------------------
		align 4

loc_62B97B54:				; CODE XREF: silc_client_command_kill+8Ej
		mov	dword ptr [edx+14h], 0
		xor	edi, edi
		jmp	loc_62B977D9
; ---------------------------------------------------------------------------
		align 4

loc_62B97B64:				; CODE XREF: silc_client_command_kill+113j
		mov	ecx, [ebp+var_38]
		mov	[esp+88h+var_50], ecx
		mov	edi, [ebp+var_40]
		mov	[esp+88h+var_54], edi
		mov	[esp+88h+var_58], 3
		mov	[esp+88h+var_5C], eax
		mov	eax, [ebp+var_3C]
		mov	[esp+88h+var_60], eax
		mov	[esp+88h+var_64], 2
		mov	[esp+88h+var_68], 0
		mov	[esp+88h+var_6C], 0
		mov	[esp+88h+var_70], 1
		mov	[esp+88h+var_74], 3
		mov	[esp+88h+var_78], 0
		mov	[esp+88h+var_7C], 0
		movzx	eax, byte ptr [ebx+34h]
		mov	[esp+88h+var_80], eax
		mov	[esp+88h+Str2],	ebx
		mov	[esp+88h+Str1],	esi
		mov	[ebp+var_44], edx
		call	sub_62B95C0C
		mov	edx, [ebp+var_44]
		jmp	loc_62B978D0
; ---------------------------------------------------------------------------

loc_62B97BDC:				; CODE XREF: silc_client_command_kill+F7j
		xor	eax, eax
		jmp	loc_62B9783A
; ---------------------------------------------------------------------------
		align 4

loc_62B97BE4:				; CODE XREF: silc_client_command_kill+3D7j
		mov	[esp+88h+var_80], 4BAh
		mov	[esp+88h+Str2],	offset aCommand_c ; "command.c"
		mov	[esp+88h+Str1],	offset aSilc_verifyS_5 ; "SILC_VERIFY %s:%d"
		call	silc_format
		mov	[esp+88h+Str2],	eax
		mov	[esp+88h+Str1],	3
		call	silc_log_output
		jmp	loc_62B97B09
silc_client_command_kill endp

; ---------------------------------------------------------------------------
		align 4
; Exported entry  34. silc_client_command_invite

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public silc_client_command_invite
silc_client_command_invite proc	near	; DATA XREF: silc_client_commands_unregister+465o
					; silc_client_commands_register+2F1o

var_98		= dword	ptr -98h
var_94		= dword	ptr -94h
var_90		= dword	ptr -90h
var_8C		= dword	ptr -8Ch
var_88		= dword	ptr -88h
var_84		= dword	ptr -84h
var_80		= dword	ptr -80h
var_7C		= dword	ptr -7Ch
var_78		= dword	ptr -78h
var_74		= dword	ptr -74h
var_70		= dword	ptr -70h
var_6C		= dword	ptr -6Ch
var_68		= dword	ptr -68h
var_64		= dword	ptr -64h
var_60		= dword	ptr -60h
var_5C		= dword	ptr -5Ch
var_58		= dword	ptr -58h
var_54		= dword	ptr -54h
var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_19		= byte ptr -19h
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		sub	esp, 8Ch
		mov	ebx, [ebp+arg_4]
		mov	esi, [ebx+4]
		mov	eax, [esi+4Ch]
		mov	[ebp+var_2C], eax
		mov	[ebp+var_20], 0
		mov	[ebp+var_24], 0
		mov	eax, [ebx+38h]
		cmp	eax, 1
		jbe	loc_62B97F24
		mov	edx, [ebx+3Ch]
		mov	ecx, [edx+4]
		cmp	byte ptr [ecx],	2Ah
		jz	loc_62B97E64
		mov	[esp+98h+var_90], ecx
		mov	[esp+98h+var_94], esi
		mov	ecx, [ebp+var_2C]
		mov	[esp+98h+var_98], ecx
		call	silc_client_get_channel
		mov	[ebp+var_30], eax
		test	eax, eax
		jz	loc_62B98204
		cmp	dword ptr [ebx+38h], 3
		jz	loc_62B97E92

loc_62B97C81:				; CODE XREF: silc_client_command_invite+274j
		mov	[ebp+var_34], 0
		xor	edx, edx

loc_62B97C8A:				; CODE XREF: silc_client_command_invite+307j
					; silc_client_command_invite+61Fj
		mov	[esp+98h+var_94], 3
		mov	eax, [ebp+var_30]
		add	eax, 114h
		mov	[esp+98h+var_98], eax
		mov	[ebp+var_48], edx
		call	silc_id_payload_encode
		mov	edi, eax
		mov	edx, [ebp+var_48]
		test	edx, edx
		jz	loc_62B98245
		mov	[esp+98h+var_94], 2
		add	edx, 38Ch
		mov	[esp+98h+var_98], edx
		call	silc_id_payload_encode
		mov	edx, eax
		test	eax, eax
		jz	loc_62B981B8
		mov	ecx, [eax+4]
		mov	[ebp+var_3C], ecx
		mov	eax, [eax+8]
		sub	eax, ecx

loc_62B97CDD:				; CODE XREF: silc_client_command_invite+5A9j
		test	edi, edi
		jz	loc_62B981A8
		mov	ecx, [edi+4]
		mov	[ebp+var_38], ecx
		mov	ecx, [edi+8]
		sub	ecx, [ebp+var_38]

loc_62B97CF1:				; CODE XREF: silc_client_command_invite+599j
		mov	[esp+98h+var_54], 0
		mov	[esp+98h+var_58], 0
		mov	[esp+98h+var_5C], 4
		mov	[esp+98h+var_60], 0
		mov	[esp+98h+var_64], 0
		mov	[esp+98h+var_68], 3
		mov	[esp+98h+var_6C], eax
		mov	eax, [ebp+var_3C]
		mov	[esp+98h+var_70], eax
		mov	[esp+98h+var_74], 2
		mov	[esp+98h+var_78], ecx
		mov	ecx, [ebp+var_38]
		mov	[esp+98h+var_7C], ecx
		mov	[esp+98h+var_80], 1
		mov	[esp+98h+var_84], 4
		mov	[esp+98h+var_88], 0
		mov	[esp+98h+var_8C], 0
		movzx	eax, byte ptr [ebx+34h]
		mov	[esp+98h+var_90], eax
		mov	[esp+98h+var_94], ebx
		mov	[esp+98h+var_98], esi
		mov	[ebp+var_48], edx
		call	sub_62B95C0C
		mov	edx, [ebp+var_48]
		test	edx, edx
		jz	short loc_62B97D97
		mov	eax, [edx]
		mov	[esp+98h+var_98], eax
		mov	[ebp+var_48], edx
		call	silc_free
		mov	edx, [ebp+var_48]
		mov	[esp+98h+var_98], edx
		call	silc_free
		xor	edx, edx

loc_62B97D97:				; CODE XREF: silc_client_command_invite+163j
					; silc_client_command_invite+58Bj
		test	edi, edi
		jz	short loc_62B97DB3
		mov	eax, [edi]
		mov	[esp+98h+var_98], eax
		mov	[ebp+var_48], edx
		call	silc_free
		mov	[esp+98h+var_98], edi
		call	silc_free
		mov	edx, [ebp+var_48]

loc_62B97DB3:				; CODE XREF: silc_client_command_invite+181j
		test	edx, edx
		jz	short loc_62B97DCF
		mov	eax, [edx]
		mov	[esp+98h+var_98], eax
		mov	[ebp+var_48], edx
		call	silc_free
		mov	edx, [ebp+var_48]
		mov	[esp+98h+var_98], edx
		call	silc_free

loc_62B97DCF:				; CODE XREF: silc_client_command_invite+19Dj
		mov	eax, [ebp+var_24]
		mov	[esp+98h+var_98], eax
		call	silc_free
		mov	edi, [ebp+var_34]
		mov	[esp+98h+var_90], edi
		mov	[esp+98h+var_94], esi
		mov	eax, [ebp+var_2C]
		mov	[esp+98h+var_98], eax
		call	silc_client_list_free
		mov	edx, [ebp+var_30]
		mov	[esp+98h+var_90], edx
		mov	[esp+98h+var_94], esi
		mov	ecx, [ebp+var_2C]
		mov	[esp+98h+var_98], ecx
		call	silc_client_unref_channel
		mov	edx, [ebx+4]
		mov	eax, [edx+4Ch]
		mov	ecx, [eax+18h]
		mov	ecx, [ecx+48h]
		mov	esi, [ebx+3Ch]
		mov	[esp+98h+var_80], esi
		mov	esi, [ebx+38h]
		mov	[esp+98h+var_84], esi
		mov	[esp+98h+var_88], 0
		movzx	ebx, byte ptr [ebx+34h]
		mov	[esp+98h+var_8C], ebx
		mov	[esp+98h+var_90], 1
		mov	[esp+98h+var_94], edx
		mov	[esp+98h+var_98], eax
		call	dword ptr [ecx+10h]
		mov	[esp+98h+var_94], offset silc_client_command_reply_wait
		mov	edi, [ebp+arg_0]
		mov	[esp+98h+var_98], edi
		call	silc_fsm_next
		xor	eax, eax

loc_62B97E57:				; CODE XREF: silc_client_command_invite+6C7j
		add	esp, 8Ch
		pop	ebx
		pop	esi
		pop	edi
		leave
		retn
; ---------------------------------------------------------------------------
		align 4

loc_62B97E64:				; CODE XREF: silc_client_command_invite+3Bj
		mov	ecx, [esi+30h]
		mov	[ebp+var_30], ecx
		test	ecx, ecx
		jz	loc_62B97FA0
		mov	eax, [ebp+var_30]
		mov	[esp+98h+var_90], eax
		mov	[esp+98h+var_94], esi
		mov	edx, [ebp+var_2C]
		mov	[esp+98h+var_98], edx
		call	silc_client_ref_channel
		cmp	dword ptr [ebx+38h], 3
		jnz	loc_62B97C81

loc_62B97E92:				; CODE XREF: silc_client_command_invite+63j
		mov	eax, [ebx+3Ch]
		mov	edx, [eax+8]
		mov	cl, [edx]
		cmp	cl, 2Bh
		jz	loc_62B9823C
		cmp	cl, 2Dh
		jz	loc_62B97FD8
		lea	eax, [ebp+var_24]
		mov	[esp+98h+var_8C], eax ;	int
		mov	[esp+98h+var_90], edx ;	char *
		mov	[esp+98h+var_94], esi ;	int
		mov	edi, [ebp+var_2C]
		mov	[esp+98h+var_98], edi ;	int
		call	silc_client_nickname_parse
		mov	[esp+98h+var_8C], 0
		mov	eax, [ebx+3Ch]
		mov	eax, [eax+8]
		mov	[esp+98h+var_90], eax
		mov	[esp+98h+var_94], esi
		mov	[esp+98h+var_98], edi
		call	silc_client_get_clients_local
		mov	[ebp+var_34], eax
		test	eax, eax
		jz	loc_62B98287
		mov	edi, [ebp+var_34]
		mov	eax, [edi+14h]
		mov	[edi+18h], eax
		mov	edx, [edi+8]
		test	edx, edx
		jz	loc_62B9822B
		test	byte ptr [edi+10h], 2
		jz	loc_62B98278
		movzx	eax, word ptr [edi+0Eh]
		mov	eax, [edx+eax]

loc_62B97F14:				; CODE XREF: silc_client_command_invite+66Aj
		mov	edi, [ebp+var_34]
		mov	[edi+8], eax
		mov	[edi+14h], edx
		mov	edx, [edx]
		jmp	loc_62B97C8A
; ---------------------------------------------------------------------------

loc_62B97F24:				; CODE XREF: silc_client_command_invite+2Cj
		mov	edx, [ebp+var_2C]
		mov	eax, [edx+18h]
		mov	eax, [eax+48h]
		mov	[esp+98h+var_8C], offset aUsageInviteCha ; "Usage: /INVITE <channel> [<nickname>[@s"...
		mov	[esp+98h+var_90], 0
		mov	[esp+98h+var_94], esi
		mov	[esp+98h+var_98], edx
		call	dword ptr [eax]
		mov	edx, [ebx+4]
		mov	eax, [edx+4Ch]
		mov	ecx, [eax+18h]
		mov	ecx, [ecx+48h]
		mov	esi, [ebx+3Ch]
		mov	[esp+98h+var_80], esi
		mov	esi, [ebx+38h]
		mov	[esp+98h+var_84], esi
		mov	[esp+98h+var_88], 1Dh

loc_62B97F68:				; CODE XREF: silc_client_command_invite+60Ej
		movzx	ebx, byte ptr [ebx+34h]
		mov	[esp+98h+var_8C], ebx
		mov	[esp+98h+var_90], 0
		mov	[esp+98h+var_94], edx
		mov	[esp+98h+var_98], eax
		call	dword ptr [ecx+10h]

loc_62B97F82:				; CODE XREF: silc_client_command_invite+3BBj
		mov	eax, [ebp+var_24]
		mov	[esp+98h+var_98], eax
		call	silc_free
		mov	eax, 3
		add	esp, 8Ch
		pop	ebx
		pop	esi
		pop	edi
		leave
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_62B97FA0:				; CODE XREF: silc_client_command_invite+254j
		mov	edi, [ebp+var_2C]
		mov	ecx, [edi+18h]
		mov	ecx, [ecx+48h]
		mov	[esp+98h+var_80], edx
		mov	[esp+98h+var_84], eax
		mov	[esp+98h+var_88], 19h
		movzx	eax, byte ptr [ebx+34h]
		mov	[esp+98h+var_8C], eax
		mov	[esp+98h+var_90], 0
		mov	[esp+98h+var_94], esi
		mov	[esp+98h+var_98], edi
		call	dword ptr [ecx+10h]
		jmp	short loc_62B97F82
; ---------------------------------------------------------------------------
		align 4

loc_62B97FD8:				; CODE XREF: silc_client_command_invite+28Ej
		mov	[ebp+var_19], 1

loc_62B97FDC:				; CODE XREF: silc_client_command_invite+628j
		lea	edx, [ebp+var_20]
		mov	[esp+98h+var_94], edx
		mov	eax, [eax+8]
		inc	eax
		mov	[esp+98h+var_98], eax
		call	silc_pkcs_load_public_key
		mov	eax, [ebx+3Ch]
		mov	eax, [eax+8]
		cmp	[ebp+var_20], 1
		adc	eax, 0
		mov	[ebp+var_34], eax
		test	eax, eax
		jz	loc_62B98319
		mov	[esp+98h+var_94], 10h
		mov	[esp+98h+var_98], 1
		call	silc_calloc
		test	eax, eax
		jz	loc_62B98312
		mov	[esp+98h+var_94], 1
		mov	[esp+98h+var_98], 2
		mov	[ebp+var_48], eax
		call	silc_calloc
		mov	edx, [ebp+var_48]
		mov	[edx], eax
		test	eax, eax
		jz	loc_62B98312
		mov	[edx+4], eax
		add	eax, 2
		mov	[edx+0Ch], eax
		mov	[edx+8], eax

loc_62B98053:				; CODE XREF: silc_client_command_invite+6FCj
		mov	[esp+98h+var_8C], 1Dh
		mov	[esp+98h+var_90], 1
		mov	[esp+98h+var_94], 3
		mov	[esp+98h+var_98], edx
		mov	[ebp+var_48], edx
		call	silc_buffer_format
		mov	eax, [ebp+var_20]
		test	eax, eax
		mov	edx, [ebp+var_48]
		jz	loc_62B981C8
		mov	[esp+98h+var_98], eax
		call	silc_public_key_payload_encode
		mov	edi, eax
		mov	ecx, [eax+4]
		mov	[esp+98h+var_8C], 2
		mov	eax, [eax+8]
		sub	eax, ecx
		mov	[esp+98h+var_90], eax
		mov	[esp+98h+var_94], ecx
		mov	edx, [ebp+var_48]
		mov	[esp+98h+var_98], edx
		call	silc_argument_payload_encode_one
		mov	edx, eax
		mov	eax, [edi]
		mov	[esp+98h+var_98], eax
		mov	[ebp+var_48], edx
		call	silc_free
		mov	[esp+98h+var_98], edi
		call	silc_free
		mov	eax, [ebp+var_20]
		mov	[esp+98h+var_98], eax
		call	silc_pkcs_public_key_free
		mov	edx, [ebp+var_48]
		xor	eax, eax
		test	edx, edx
		setnz	al
		mov	[ebp+var_38], eax

loc_62B980E0:				; CODE XREF: silc_client_command_invite+5E6j
					; silc_client_command_invite+70Aj
		mov	[esp+98h+var_94], 3
		mov	eax, [ebp+var_30]
		add	eax, 114h
		mov	[esp+98h+var_98], eax
		mov	[ebp+var_48], edx
		call	silc_id_payload_encode
		mov	edi, eax
		mov	[ebp+var_34], 0
		mov	edx, [ebp+var_48]
		test	edx, edx
		jz	loc_62B98250
		mov	eax, [edx+4]
		mov	[ebp+var_40], eax
		mov	eax, [edx+8]
		sub	eax, [ebp+var_40]
		lea	ecx, [ebp+var_19]
		mov	[ebp+var_44], ecx

loc_62B98121:				; CODE XREF: silc_client_command_invite+648j
		test	edi, edi
		jz	loc_62B98268
		mov	ecx, [edi+4]
		mov	[ebp+var_3C], ecx
		mov	ecx, [edi+8]
		sub	ecx, [ebp+var_3C]

loc_62B98135:				; CODE XREF: silc_client_command_invite+659j
		mov	[esp+98h+var_60], eax
		mov	eax, [ebp+var_40]
		mov	[esp+98h+var_64], eax
		mov	[esp+98h+var_68], 4
		mov	eax, [ebp+var_38]
		mov	[esp+98h+var_6C], eax
		mov	eax, [ebp+var_44]
		mov	[esp+98h+var_70], eax
		mov	[esp+98h+var_74], 3
		mov	[esp+98h+var_78], ecx
		mov	ecx, [ebp+var_3C]
		mov	[esp+98h+var_7C], ecx
		mov	[esp+98h+var_80], 1
		mov	[esp+98h+var_84], 3
		mov	[esp+98h+var_88], 0
		mov	[esp+98h+var_8C], 0
		movzx	eax, byte ptr [ebx+34h]
		mov	[esp+98h+var_90], eax
		mov	[esp+98h+var_94], ebx
		mov	[esp+98h+var_98], esi
		mov	[ebp+var_48], edx
		call	sub_62B95C0C
		mov	edx, [ebp+var_48]
		jmp	loc_62B97D97
; ---------------------------------------------------------------------------

loc_62B981A8:				; CODE XREF: silc_client_command_invite+C7j
		xor	ecx, ecx
		mov	[ebp+var_38], 0
		jmp	loc_62B97CF1
; ---------------------------------------------------------------------------
		align 4

loc_62B981B8:				; CODE XREF: silc_client_command_invite+B4j
		xor	eax, eax
		mov	[ebp+var_3C], 0
		jmp	loc_62B97CDD
; ---------------------------------------------------------------------------
		align 4

loc_62B981C8:				; CODE XREF: silc_client_command_invite+466j
		xor	eax, eax
		mov	ecx, 0FFFFFFFFh
		mov	edi, [ebp+var_34]
		repne scasb
		not	ecx
		dec	ecx
		mov	[esp+98h+var_8C], 1
		mov	[esp+98h+var_90], ecx
		mov	eax, [ebp+var_34]
		mov	[esp+98h+var_94], eax
		mov	[esp+98h+var_98], edx
		call	silc_argument_payload_encode_one
		mov	edx, eax
		xor	eax, eax
		test	edx, edx
		setnz	al
		mov	[ebp+var_38], eax
		jmp	loc_62B980E0
; ---------------------------------------------------------------------------
		align 4

loc_62B98204:				; CODE XREF: silc_client_command_invite+59j
		mov	edx, [ebx+4]
		mov	eax, [edx+4Ch]
		mov	ecx, [eax+18h]
		mov	ecx, [ecx+48h]
		mov	esi, [ebx+3Ch]
		mov	[esp+98h+var_80], esi
		mov	esi, [ebx+38h]
		mov	[esp+98h+var_84], esi
		mov	[esp+98h+var_88], 19h
		jmp	loc_62B97F68
; ---------------------------------------------------------------------------

loc_62B9822B:				; CODE XREF: silc_client_command_invite+2E5j
		mov	eax, [ebp+var_34]
		mov	dword ptr [eax+14h], 0
		xor	edx, edx
		jmp	loc_62B97C8A
; ---------------------------------------------------------------------------

loc_62B9823C:				; CODE XREF: silc_client_command_invite+285j
		mov	[ebp+var_19], 0
		jmp	loc_62B97FDC
; ---------------------------------------------------------------------------

loc_62B98245:				; CODE XREF: silc_client_command_invite+94j
		mov	[ebp+var_38], 0
		xor	edx, edx
		xchg	ax, ax

loc_62B98250:				; CODE XREF: silc_client_command_invite+4F1j
		xor	eax, eax
		mov	[ebp+var_40], 0
		mov	[ebp+var_44], 0
		jmp	loc_62B98121
; ---------------------------------------------------------------------------
		align 4

loc_62B98268:				; CODE XREF: silc_client_command_invite+50Bj
		xor	ecx, ecx
		mov	[ebp+var_3C], 0
		jmp	loc_62B98135
; ---------------------------------------------------------------------------
		align 4

loc_62B98278:				; CODE XREF: silc_client_command_invite+2EFj
		mov	ecx, [ebp+var_34]
		movzx	eax, word ptr [ecx+0Ch]
		mov	eax, [edx+eax]
		jmp	loc_62B97F14
; ---------------------------------------------------------------------------

loc_62B98287:				; CODE XREF: silc_client_command_invite+2D1j
		mov	edx, [ebp+arg_0]
		mov	al, [edx+28h]
		mov	dl, al
		or	edx, 4
		mov	ecx, [ebp+arg_0]
		mov	[ecx+28h], dl
		test	al, 4
		jnz	short loc_62B982E4

loc_62B9829C:				; CODE XREF: silc_client_command_invite+6F8j
		mov	[esp+98h+var_84], ebx
		mov	[esp+98h+var_88], offset sub_62B9529C
		mov	[esp+98h+var_8C], 0
		mov	eax, [ebp+var_24]
		mov	[esp+98h+var_90], eax
		mov	[esp+98h+var_94], esi
		mov	edi, [ebp+var_2C]
		mov	[esp+98h+var_98], edi
		call	silc_client_get_clients
		mov	eax, [ebp+arg_0]
		mov	dl, [eax+28h]
		mov	al, dl
		shr	al, 2
		and	edx, 0FFFFFFFBh
		mov	ecx, [ebp+arg_0]
		mov	[ecx+28h], dl
		shl	eax, 1
		and	eax, 2
		jmp	loc_62B97E57
; ---------------------------------------------------------------------------

loc_62B982E4:				; CODE XREF: silc_client_command_invite+682j
		mov	[esp+98h+var_90], 429h
		mov	[esp+98h+var_94], offset aCommand_c ; "command.c"
		mov	[esp+98h+var_98], offset aSilc_verifyS_5 ; "SILC_VERIFY	%s:%d"
		call	silc_format
		mov	[esp+98h+var_94], eax
		mov	[esp+98h+var_98], 3
		call	silc_log_output
		jmp	short loc_62B9829C
; ---------------------------------------------------------------------------

loc_62B98312:				; CODE XREF: silc_client_command_invite+405j
					; silc_client_command_invite+429j
		xor	edx, edx
		jmp	loc_62B98053
; ---------------------------------------------------------------------------

loc_62B98319:				; CODE XREF: silc_client_command_invite+3E9j
		mov	[ebp+var_38], 0
		xor	edx, edx
		jmp	loc_62B980E0
silc_client_command_invite endp

; ---------------------------------------------------------------------------
		align 4
; Exported entry  28. silc_client_command_cumode

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public silc_client_command_cumode
silc_client_command_cumode proc	near	; DATA XREF: silc_client_commands_unregister+BF5o
					; silc_client_commands_register+83Ao

var_B8		= dword	ptr -0B8h
var_B4		= dword	ptr -0B4h
var_B0		= dword	ptr -0B0h
var_AC		= dword	ptr -0ACh
var_A8		= dword	ptr -0A8h
var_A4		= dword	ptr -0A4h
var_A0		= dword	ptr -0A0h
var_9C		= dword	ptr -9Ch
var_98		= dword	ptr -98h
var_94		= dword	ptr -94h
var_90		= dword	ptr -90h
var_8C		= dword	ptr -8Ch
var_88		= dword	ptr -88h
var_84		= dword	ptr -84h
var_80		= dword	ptr -80h
var_7C		= dword	ptr -7Ch
var_78		= dword	ptr -78h
var_74		= dword	ptr -74h
var_5C		= dword	ptr -5Ch
var_50		= dword	ptr -50h
var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= byte ptr -1Ch
var_1B		= byte ptr -1Bh
var_1A		= byte ptr -1Ah
var_19		= byte ptr -19h
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		sub	esp, 0ACh
		mov	ebx, [ebp+arg_4]
		mov	esi, [ebx+4]
		mov	eax, [esi+4Ch]
		mov	[ebp+var_30], eax
		mov	[ebp+var_20], 0
		mov	eax, [ebx+38h]
		cmp	eax, 3
		jbe	loc_62B984E0
		mov	edx, [ebx+3Ch]
		mov	ecx, [edx+4]
		cmp	byte ptr [ecx],	2Ah
		jz	loc_62B984B4
		mov	[esp+0B8h+var_B0], ecx
		mov	[esp+0B8h+var_B4], esi
		mov	ecx, [ebp+var_30]
		mov	[esp+0B8h+var_B8], ecx
		call	silc_client_get_channel
		mov	[ebp+var_34], eax
		test	eax, eax
		jz	loc_62B98A4C

loc_62B98380:				; CODE XREF: silc_client_command_cumode+1B0j
		lea	eax, [ebp+var_20]
		mov	[esp+0B8h+var_AC], eax ; int
		mov	eax, [ebx+3Ch]
		mov	eax, [eax+0Ch]
		mov	[esp+0B8h+var_B0], eax ; char *
		mov	[esp+0B8h+var_B4], esi ; int
		mov	edi, [ebp+var_30]
		mov	[esp+0B8h+var_B8], edi ; int
		call	silc_client_nickname_parse
		mov	[esp+0B8h+var_AC], 0
		mov	eax, [ebx+3Ch]
		mov	eax, [eax+0Ch]
		mov	[esp+0B8h+var_B0], eax
		mov	[esp+0B8h+var_B4], esi
		mov	[esp+0B8h+var_B8], edi
		call	silc_client_get_clients_local
		mov	edx, eax
		test	eax, eax
		jz	loc_62B98988
		mov	eax, [eax+14h]
		mov	[edx+18h], eax
		mov	eax, [edx+8]
		test	eax, eax
		jz	loc_62B989E8
		test	byte ptr [edx+10h], 2
		jnz	loc_62B98590
		movzx	ecx, word ptr [edx+0Ch]
		mov	ecx, [eax+ecx]

loc_62B983EA:				; CODE XREF: silc_client_command_cumode+26Fj
		mov	[edx+8], ecx
		mov	[edx+14h], eax
		mov	eax, [eax]
		mov	[ebp+var_48], eax

loc_62B983F5:				; CODE XREF: silc_client_command_cumode+6CEj
		mov	edi, [ebp+var_48]
		mov	[esp+0B8h+var_B4], edi
		mov	eax, [ebp+var_34]
		mov	[esp+0B8h+var_B8], eax
		mov	[ebp+var_4C], edx
		call	silc_client_on_channel
		test	eax, eax
		mov	edx, [ebp+var_4C]
		jz	loc_62B989FC
		mov	eax, [eax+4]
		mov	[ebp+var_2C], eax

loc_62B9841B:				; CODE XREF: silc_client_command_cumode+6DBj
		mov	eax, [ebx+3Ch]
		mov	eax, [eax+8]
		xor	ecx, ecx
		cmp	byte ptr [eax],	2Dh
		setnz	cl
		mov	[ebp+var_38], ecx
		inc	eax
		mov	[ebp+var_40], eax
		xor	eax, eax
		mov	ecx, 0FFFFFFFFh
		mov	edi, [ebp+var_40]
		repne scasb
		not	ecx
		dec	ecx
		jz	loc_62B98A8F
		xor	eax, eax
		xor	edi, edi
		mov	[ebp+var_44], 0
		mov	[ebp+var_3C], ecx
		mov	ecx, [ebp+var_40]
		xchg	ax, ax

loc_62B98458:				; CODE XREF: silc_client_command_cumode+2D2j
		mov	al, [ecx+eax]
		sub	eax, 61h
		cmp	al, 14h		; switch 21 cases
		jbe	loc_62B985D8

loc_62B98466:				; CODE XREF: silc_client_command_cumode+2B3j
					; DATA XREF: .rdata:off_62BA8CA0o
		mov	edi, [ebx+4]	; jumptable 62B985DB default case
		mov	eax, [edi+4Ch]
		mov	ecx, [eax+18h]
		mov	ecx, [ecx+48h]
		mov	[ebp+var_2C], ecx
		mov	ecx, [ebx+3Ch]
		mov	[esp+0B8h+var_A0], ecx
		mov	ecx, [ebx+38h]
		mov	[esp+0B8h+var_A4], ecx
		mov	[esp+0B8h+var_A8], 25h
		movzx	ecx, byte ptr [ebx+34h]
		mov	[esp+0B8h+var_AC], ecx
		mov	[esp+0B8h+var_B0], 0
		mov	[esp+0B8h+var_B4], edi
		mov	[esp+0B8h+var_B8], eax
		mov	[ebp+var_4C], edx
		mov	ecx, [ebp+var_2C]
		call	dword ptr [ecx+10h]
		mov	edx, [ebp+var_4C]
		jmp	loc_62B98547
; ---------------------------------------------------------------------------
		align 4

loc_62B984B4:				; CODE XREF: silc_client_command_cumode+34j
		mov	ecx, [esi+30h]
		mov	[ebp+var_34], ecx
		test	ecx, ecx
		jz	loc_62B9859C
		mov	eax, [ebp+var_34]
		mov	[esp+0B8h+var_B0], eax
		mov	[esp+0B8h+var_B4], esi
		mov	edx, [ebp+var_30]
		mov	[esp+0B8h+var_B8], edx
		call	silc_client_ref_channel
		jmp	loc_62B98380
; ---------------------------------------------------------------------------
		align 10h

loc_62B984E0:				; CODE XREF: silc_client_command_cumode+25j
		mov	edx, [ebp+var_30]
		mov	eax, [edx+18h]
		mov	eax, [eax+48h]
		mov	[esp+0B8h+var_AC], offset aUsageCumodeCha ; "Usage: /CUMODE <channel> +|-<modes> <ni"...
		mov	[esp+0B8h+var_B0], 0
		mov	[esp+0B8h+var_B4], esi
		mov	[esp+0B8h+var_B8], edx
		call	dword ptr [eax]
		mov	edx, [ebx+4]
		mov	eax, [edx+4Ch]
		mov	ecx, [eax+18h]
		mov	ecx, [ecx+48h]
		mov	edi, [ebx+3Ch]
		mov	[esp+0B8h+var_A0], edi
		mov	edi, [ebx+38h]
		mov	[esp+0B8h+var_A4], edi
		mov	[esp+0B8h+var_A8], 1Dh
		movzx	ebx, byte ptr [ebx+34h]
		mov	[esp+0B8h+var_AC], ebx
		mov	[esp+0B8h+var_B0], 0
		mov	[esp+0B8h+var_B4], edx
		mov	[esp+0B8h+var_B8], eax
		call	dword ptr [ecx+10h]
		xor	edx, edx
		mov	[ebp+var_34], 0

loc_62B98547:				; CODE XREF: silc_client_command_cumode+186j
					; silc_client_command_cumode+2A9j ...
		mov	ecx, [ebp+var_34]
		mov	[esp+0B8h+var_B0], ecx
		mov	[esp+0B8h+var_B4], esi
		mov	edi, [ebp+var_30]
		mov	[esp+0B8h+var_B8], edi
		mov	[ebp+var_4C], edx
		call	silc_client_unref_channel
		mov	edx, [ebp+var_4C]
		mov	[esp+0B8h+var_B0], edx
		mov	[esp+0B8h+var_B4], esi
		mov	[esp+0B8h+var_B8], edi
		call	silc_client_list_free
		mov	eax, [ebp+var_20]
		mov	[esp+0B8h+var_B8], eax
		call	silc_free
		mov	eax, 3

loc_62B98583:				; CODE XREF: silc_client_command_cumode+4CDj
					; silc_client_command_cumode+6B8j
		add	esp, 0ACh
		pop	ebx
		pop	esi
		pop	edi
		leave
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_62B98590:				; CODE XREF: silc_client_command_cumode+B5j
		movzx	ecx, word ptr [edx+0Eh]
		mov	ecx, [eax+ecx]
		jmp	loc_62B983EA
; ---------------------------------------------------------------------------

loc_62B9859C:				; CODE XREF: silc_client_command_cumode+194j
		mov	edi, [ebp+var_30]
		mov	ecx, [edi+18h]
		mov	ecx, [ecx+48h]
		mov	[esp+0B8h+var_A0], edx
		mov	[esp+0B8h+var_A4], eax
		mov	[esp+0B8h+var_A8], 19h
		movzx	eax, byte ptr [ebx+34h]
		mov	[esp+0B8h+var_AC], eax
		mov	[esp+0B8h+var_B0], 0
		mov	[esp+0B8h+var_B4], esi
		mov	[esp+0B8h+var_B8], edi
		call	dword ptr [ecx+10h]
		xor	edx, edx
		jmp	loc_62B98547
; ---------------------------------------------------------------------------
		align 4

loc_62B985D8:				; CODE XREF: silc_client_command_cumode+138j
		movzx	eax, al
		jmp	ds:off_62BA8CA0[eax*4] ; switch	jump
; ---------------------------------------------------------------------------
		align 4

loc_62B985E4:				; CODE XREF: silc_client_command_cumode+2B3j
					; DATA XREF: .rdata:off_62BA8CA0o
		mov	eax, [ebp+var_38] ; jumptable 62B985DB case 20
		test	eax, eax
		jz	loc_62B98940
		or	[ebp+var_2C], 8
		nop

loc_62B985F4:				; CODE XREF: silc_client_command_cumode+4E3j
					; silc_client_command_cumode+4F7j ...
		inc	edi
		mov	eax, edi
		cmp	[ebp+var_3C], edi
		ja	loc_62B98458

loc_62B98600:				; CODE XREF: silc_client_command_cumode+76Ej
		mov	[esp+0B8h+var_B4], 3
		mov	eax, [ebp+var_34]
		add	eax, 114h
		mov	[esp+0B8h+var_B8], eax
		mov	[ebp+var_4C], edx
		call	silc_id_payload_encode
		mov	ecx, eax
		mov	eax, [ebp+var_2C]
		shr	eax, 18h
		mov	[ebp+var_1C], al
		mov	eax, [ebp+var_2C]
		shr	eax, 10h
		mov	[ebp+var_1B], al
		mov	eax, [ebp+var_2C]
		shr	eax, 8
		mov	[ebp+var_1A], al
		mov	al, byte ptr [ebp+var_2C]
		mov	[ebp+var_19], al
		mov	[esp+0B8h+var_B4], 2
		mov	eax, [ebp+var_48]
		add	eax, 38Ch
		mov	[esp+0B8h+var_B8], eax
		mov	[ebp+var_50], ecx
		call	silc_id_payload_encode
		mov	edi, eax
		mov	edx, [ebp+var_44]
		test	edx, edx
		mov	edx, [ebp+var_4C]
		mov	ecx, [ebp+var_50]
		jz	loc_62B98B65
		mov	eax, [ebp+var_44]
		mov	eax, [eax+4]
		mov	[ebp+var_48], eax
		mov	eax, [ebp+var_44]
		mov	eax, [eax+8]
		mov	[ebp+var_5C], eax
		mov	eax, [ebp+var_48]
		sub	[ebp+var_5C], eax

loc_62B98684:				; CODE XREF: silc_client_command_cumode+84Bj
		test	edi, edi
		jz	loc_62B98B52
		mov	eax, [edi+4]
		mov	[ebp+var_40], eax
		mov	eax, [edi+8]
		mov	[ebp+var_38], eax
		mov	eax, [ebp+var_40]
		sub	[ebp+var_38], eax

loc_62B9869E:				; CODE XREF: silc_client_command_cumode+838j
		test	ecx, ecx
		jz	loc_62B98B3F
		mov	eax, [ecx+4]
		mov	[ebp+var_3C], eax
		mov	eax, [ecx+8]
		mov	[ebp+var_2C], eax
		mov	eax, [ebp+var_3C]
		sub	[ebp+var_2C], eax

loc_62B986B8:				; CODE XREF: silc_client_command_cumode+825j
		mov	eax, [ebp+var_44]
		test	eax, eax
		jz	loc_62B98A9B
		mov	eax, [ebp+var_5C]
		mov	[esp+0B8h+var_74], eax
		mov	eax, [ebp+var_48]
		mov	[esp+0B8h+var_78], eax
		mov	[esp+0B8h+var_7C], 4
		mov	eax, [ebp+var_38]
		mov	[esp+0B8h+var_80], eax
		mov	eax, [ebp+var_40]
		mov	[esp+0B8h+var_84], eax
		mov	[esp+0B8h+var_88], 3
		mov	[esp+0B8h+var_8C], 4
		lea	eax, [ebp+var_1C]
		mov	[esp+0B8h+var_90], eax
		mov	[esp+0B8h+var_94], 2
		mov	eax, [ebp+var_2C]
		mov	[esp+0B8h+var_98], eax
		mov	eax, [ebp+var_3C]
		mov	[esp+0B8h+var_9C], eax
		mov	[esp+0B8h+var_A0], 1
		mov	[esp+0B8h+var_A4], 4
		mov	[esp+0B8h+var_A8], 0
		mov	[esp+0B8h+var_AC], 0
		movzx	eax, byte ptr [ebx+34h]
		mov	[esp+0B8h+var_B0], eax
		mov	[esp+0B8h+var_B4], ebx
		mov	[esp+0B8h+var_B8], esi
		mov	[ebp+var_4C], edx
		mov	[ebp+var_50], ecx
		call	sub_62B95C0C
		mov	ecx, [ebp+var_50]
		mov	eax, ecx
		call	sub_62B949E8
		mov	eax, edi
		call	sub_62B949E8
		mov	eax, [ebp+var_44]
		call	sub_62B949E8
		mov	edx, [ebp+var_4C]

loc_62B9876A:				; CODE XREF: silc_client_command_cumode+812j
		mov	eax, [ebp+var_20]
		mov	[esp+0B8h+var_B8], eax
		mov	[ebp+var_4C], edx
		call	silc_free
		mov	edx, [ebp+var_4C]
		mov	[esp+0B8h+var_B0], edx
		mov	[esp+0B8h+var_B4], esi
		mov	edx, [ebp+var_30]
		mov	[esp+0B8h+var_B8], edx
		call	silc_client_list_free
		mov	ecx, [ebp+var_34]
		mov	[esp+0B8h+var_B0], ecx
		mov	[esp+0B8h+var_B4], esi
		mov	edi, [ebp+var_30]
		mov	[esp+0B8h+var_B8], edi
		call	silc_client_unref_channel
		mov	edx, [ebx+4]
		mov	eax, [edx+4Ch]
		mov	ecx, [eax+18h]
		mov	ecx, [ecx+48h]
		mov	esi, [ebx+3Ch]
		mov	[esp+0B8h+var_A0], esi
		mov	esi, [ebx+38h]
		mov	[esp+0B8h+var_A4], esi
		mov	[esp+0B8h+var_A8], 0
		movzx	ebx, byte ptr [ebx+34h]
		mov	[esp+0B8h+var_AC], ebx
		mov	[esp+0B8h+var_B0], 1
		mov	[esp+0B8h+var_B4], edx
		mov	[esp+0B8h+var_B8], eax
		call	dword ptr [ecx+10h]
		mov	[esp+0B8h+var_B4], offset silc_client_command_reply_wait
		mov	eax, [ebp+arg_0]
		mov	[esp+0B8h+var_B8], eax
		call	silc_fsm_next
		xor	eax, eax
		jmp	loc_62B98583
; ---------------------------------------------------------------------------
		align 4

loc_62B987FC:				; CODE XREF: silc_client_command_cumode+2B3j
					; DATA XREF: .rdata:off_62BA8CA0o
		mov	eax, [ebp+var_38] ; jumptable 62B985DB case 17
		test	eax, eax
		jz	loc_62B98934
		or	[ebp+var_2C], 10h
		jmp	loc_62B985F4
; ---------------------------------------------------------------------------

loc_62B98810:				; CODE XREF: silc_client_command_cumode+2B3j
					; DATA XREF: .rdata:off_62BA8CA0o
		mov	eax, [ebp+var_38] ; jumptable 62B985DB case 16
		test	eax, eax
		jz	loc_62B98970
		or	[ebp+var_2C], 20h
		jmp	loc_62B985F4
; ---------------------------------------------------------------------------

loc_62B98824:				; CODE XREF: silc_client_command_cumode+2B3j
					; DATA XREF: .rdata:off_62BA8CA0o
		mov	eax, [ebp+var_38] ; jumptable 62B985DB case 14
		test	eax, eax
		jz	loc_62B98964
		or	[ebp+var_2C], 2
		jmp	loc_62B985F4
; ---------------------------------------------------------------------------

loc_62B98838:				; CODE XREF: silc_client_command_cumode+2B3j
					; DATA XREF: .rdata:off_62BA8CA0o
		mov	eax, [ebp+var_38] ; jumptable 62B985DB case 1
		test	eax, eax
		jz	loc_62B9897C
		or	[ebp+var_2C], 4
		jmp	loc_62B985F4
; ---------------------------------------------------------------------------

loc_62B9884C:				; CODE XREF: silc_client_command_cumode+2B3j
					; DATA XREF: .rdata:off_62BA8CA0o
		mov	eax, [ebp+var_38] ; jumptable 62B985DB case 5
		test	eax, eax
		jz	loc_62B98958
		mov	eax, [esi+34h]
		mov	[ebp+var_40], eax
		mov	[ebp+var_24], eax
		mov	eax, [esi+38h]
		mov	[ebp+var_44], eax
		mov	[ebp+var_28], eax
		mov	eax, [ebx+38h]
		cmp	eax, 5
		jbe	short loc_62B988D4
		cmp	eax, 6
		jnz	loc_62B98A08
		mov	eax, [ebx+3Ch]
		mov	[ebp+var_44], eax
		mov	[ebp+var_40], offset byte_62BA8AE3

loc_62B98887:				; CODE XREF: silc_client_command_cumode+6ECj
		lea	eax, [ebp+var_28]
		mov	[esp+0B8h+var_A8], eax
		lea	eax, [ebp+var_24]
		mov	[esp+0B8h+var_AC], eax
		mov	eax, [ebp+var_40]
		mov	[esp+0B8h+var_B0], eax
		mov	eax, [ebp+var_44]
		mov	eax, [eax+14h]
		mov	[esp+0B8h+var_B4], eax
		mov	eax, [ebp+var_44]
		mov	eax, [eax+10h]
		mov	[esp+0B8h+var_B8], eax
		mov	[ebp+var_4C], edx
		mov	[ebp+var_50], ecx
		call	silc_load_key_pair
		test	al, al
		mov	edx, [ebp+var_4C]
		mov	ecx, [ebp+var_50]
		jz	loc_62B98B78
		mov	eax, [ebp+var_28]
		mov	[ebp+var_44], eax
		mov	eax, [ebp+var_24]
		mov	[ebp+var_40], eax

loc_62B988D4:				; CODE XREF: silc_client_command_cumode+547j
		mov	[esp+0B8h+var_A4], 2
		mov	eax, [esi+4]
		mov	[esp+0B8h+var_A8], eax
		mov	eax, [esi+54h]
		mov	eax, [eax+0F0h]
		mov	[esp+0B8h+var_AC], eax
		mov	eax, [esi+4Ch]
		mov	eax, [eax+10h]
		mov	[esp+0B8h+var_B0], eax
		mov	eax, [ebp+var_44]
		mov	[esp+0B8h+var_B4], eax
		mov	eax, [ebp+var_40]
		mov	[esp+0B8h+var_B8], eax
		mov	[ebp+var_4C], edx
		mov	[ebp+var_50], ecx
		call	silc_auth_public_key_auth_generate
		mov	[ebp+var_44], eax
		or	[ebp+var_2C], 1
		mov	edx, [ebp+var_4C]
		mov	ecx, [ebp+var_50]
		jmp	loc_62B985F4
; ---------------------------------------------------------------------------

loc_62B98924:				; CODE XREF: silc_client_command_cumode+2B3j
					; DATA XREF: .rdata:off_62BA8CA0o
		mov	eax, [ebp+var_38] ; jumptable 62B985DB case 0
		test	eax, eax
		jz	short loc_62B9894C
		or	[ebp+var_2C], 1Fh
		jmp	loc_62B985F4
; ---------------------------------------------------------------------------

loc_62B98934:				; CODE XREF: silc_client_command_cumode+4D9j
		and	[ebp+var_2C], 0FFFFFFEFh
		jmp	loc_62B985F4
; ---------------------------------------------------------------------------
		align 10h

loc_62B98940:				; CODE XREF: silc_client_command_cumode+2C1j
		and	[ebp+var_2C], 0FFFFFFF7h
		jmp	loc_62B985F4
; ---------------------------------------------------------------------------
		align 4

loc_62B9894C:				; CODE XREF: silc_client_command_cumode+601j
		mov	[ebp+var_2C], 0
		jmp	loc_62B985F4
; ---------------------------------------------------------------------------

loc_62B98958:				; CODE XREF: silc_client_command_cumode+529j
		and	[ebp+var_2C], 0FFFFFFFEh
		jmp	loc_62B985F4
; ---------------------------------------------------------------------------
		align 4

loc_62B98964:				; CODE XREF: silc_client_command_cumode+501j
		and	[ebp+var_2C], 0FFFFFFFDh
		jmp	loc_62B985F4
; ---------------------------------------------------------------------------
		align 10h

loc_62B98970:				; CODE XREF: silc_client_command_cumode+4EDj
		and	[ebp+var_2C], 0FFFFFFDFh
		jmp	loc_62B985F4
; ---------------------------------------------------------------------------
		align 4

loc_62B9897C:				; CODE XREF: silc_client_command_cumode+515j
		and	[ebp+var_2C], 0FFFFFFFBh
		jmp	loc_62B985F4
; ---------------------------------------------------------------------------
		align 4

loc_62B98988:				; CODE XREF: silc_client_command_cumode+9Aj
		mov	edx, [ebp+arg_0]
		mov	al, [edx+28h]
		mov	dl, al
		or	edx, 4
		mov	ecx, [ebp+arg_0]
		mov	[ecx+28h], dl
		test	al, 4
		jnz	short loc_62B98A19

loc_62B9899D:				; CODE XREF: silc_client_command_cumode+71Dj
		mov	[esp+0B8h+var_A4], ebx
		mov	[esp+0B8h+var_A8], offset sub_62B9529C
		mov	[esp+0B8h+var_AC], 0
		mov	eax, [ebp+var_20]
		mov	[esp+0B8h+var_B0], eax
		mov	[esp+0B8h+var_B4], esi
		mov	edi, [ebp+var_30]
		mov	[esp+0B8h+var_B8], edi
		call	silc_client_get_clients
		mov	eax, [ebp+arg_0]
		mov	dl, [eax+28h]
		mov	al, dl
		shr	al, 2
		and	edx, 0FFFFFFFBh
		mov	ecx, [ebp+arg_0]
		mov	[ecx+28h], dl
		shl	eax, 1
		and	eax, 2
		jmp	loc_62B98583
; ---------------------------------------------------------------------------
		align 4

loc_62B989E8:				; CODE XREF: silc_client_command_cumode+ABj
		mov	dword ptr [edx+14h], 0
		mov	[ebp+var_48], 0
		jmp	loc_62B983F5
; ---------------------------------------------------------------------------
		align 4

loc_62B989FC:				; CODE XREF: silc_client_command_cumode+E7j
		mov	[ebp+var_2C], 0
		jmp	loc_62B9841B
; ---------------------------------------------------------------------------

loc_62B98A08:				; CODE XREF: silc_client_command_cumode+54Cj
		mov	eax, [ebx+3Ch]
		mov	[ebp+var_44], eax
		mov	eax, [eax+18h]
		mov	[ebp+var_40], eax
		jmp	loc_62B98887
; ---------------------------------------------------------------------------

loc_62B98A19:				; CODE XREF: silc_client_command_cumode+673j
		mov	[esp+0B8h+var_B0], 7C4h
		mov	[esp+0B8h+var_B4], offset aCommand_c ; "command.c"
		mov	[esp+0B8h+var_B8], offset aSilc_verifyS_5 ; "SILC_VERIFY %s:%d"
		call	silc_format
		mov	[esp+0B8h+var_B4], eax
		mov	[esp+0B8h+var_B8], 3
		call	silc_log_output
		jmp	loc_62B9899D
; ---------------------------------------------------------------------------
		align 4

loc_62B98A4C:				; CODE XREF: silc_client_command_cumode+52j
		mov	ecx, [ebx+4]
		mov	eax, [ecx+4Ch]
		mov	edx, [eax+18h]
		mov	edi, [edx+48h]
		mov	edx, [ebx+3Ch]
		mov	[esp+0B8h+var_A0], edx
		mov	edx, [ebx+38h]
		mov	[esp+0B8h+var_A4], edx
		mov	[esp+0B8h+var_A8], 19h
		movzx	edx, byte ptr [ebx+34h]
		mov	[esp+0B8h+var_AC], edx
		mov	[esp+0B8h+var_B0], 0
		mov	[esp+0B8h+var_B4], ecx
		mov	[esp+0B8h+var_B8], eax
		call	dword ptr [edi+10h]
		xor	edx, edx
		jmp	loc_62B98547
; ---------------------------------------------------------------------------

loc_62B98A8F:				; CODE XREF: silc_client_command_cumode+117j
		mov	[ebp+var_44], 0
		jmp	loc_62B98600
; ---------------------------------------------------------------------------

loc_62B98A9B:				; CODE XREF: silc_client_command_cumode+395j
		mov	eax, [ebp+var_5C]
		mov	[esp+0B8h+var_74], eax
		mov	eax, [ebp+var_48]
		mov	[esp+0B8h+var_78], eax
		mov	[esp+0B8h+var_7C], 4
		mov	eax, [ebp+var_38]
		mov	[esp+0B8h+var_80], eax
		mov	eax, [ebp+var_40]
		mov	[esp+0B8h+var_84], eax
		mov	[esp+0B8h+var_88], 3
		mov	[esp+0B8h+var_8C], 4
		lea	eax, [ebp+var_1C]
		mov	[esp+0B8h+var_90], eax
		mov	[esp+0B8h+var_94], 2
		mov	eax, [ebp+var_2C]
		mov	[esp+0B8h+var_98], eax
		mov	eax, [ebp+var_3C]
		mov	[esp+0B8h+var_9C], eax
		mov	[esp+0B8h+var_A0], 1
		mov	[esp+0B8h+var_A4], 3
		mov	[esp+0B8h+var_A8], 0
		mov	[esp+0B8h+var_AC], 0
		movzx	eax, byte ptr [ebx+34h]
		mov	[esp+0B8h+var_B0], eax
		mov	[esp+0B8h+var_B4], ebx
		mov	[esp+0B8h+var_B8], esi
		mov	[ebp+var_4C], edx
		mov	[ebp+var_50], ecx
		call	sub_62B95C0C
		mov	ecx, [ebp+var_50]
		mov	eax, ecx
		call	sub_62B949E8
		mov	eax, edi
		call	sub_62B949E8
		mov	edx, [ebp+var_4C]
		jmp	loc_62B9876A
; ---------------------------------------------------------------------------

loc_62B98B3F:				; CODE XREF: silc_client_command_cumode+378j
		mov	[ebp+var_2C], 0
		mov	[ebp+var_3C], 0
		jmp	loc_62B986B8
; ---------------------------------------------------------------------------

loc_62B98B52:				; CODE XREF: silc_client_command_cumode+35Ej
		mov	[ebp+var_38], 0
		mov	[ebp+var_40], 0
		jmp	loc_62B9869E
; ---------------------------------------------------------------------------

loc_62B98B65:				; CODE XREF: silc_client_command_cumode+33Ej
		mov	[ebp+var_5C], 0
		mov	[ebp+var_48], 0
		jmp	loc_62B98684
; ---------------------------------------------------------------------------

loc_62B98B78:				; CODE XREF: silc_client_command_cumode+59Aj
		mov	eax, [ebx+4]
		mov	eax, [eax+4Ch]
		mov	eax, [eax+18h]
		mov	eax, [eax+48h]
		mov	[esp+0B8h+var_AC], offset aCouldNotLoadKe ; "Could not load key	pair, check your arg"...
		mov	[esp+0B8h+var_B0], 3
		mov	[esp+0B8h+var_B4], esi
		mov	ecx, [esi+4Ch]
		mov	[esp+0B8h+var_B8], ecx
		mov	[ebp+var_4C], edx
		call	dword ptr [eax]
		mov	edi, [ebx+4]
		mov	ecx, [edi+4Ch]
		mov	eax, [ecx+18h]
		mov	eax, [eax+48h]
		mov	[ebp+var_2C], eax
		mov	eax, [ebx+3Ch]
		mov	[esp+0B8h+var_A0], eax
		mov	eax, [ebx+38h]
		mov	[esp+0B8h+var_A4], eax
		mov	[esp+0B8h+var_A8], 1Dh
		movzx	eax, byte ptr [ebx+34h]
		mov	[esp+0B8h+var_AC], eax
		mov	[esp+0B8h+var_B0], 0
		mov	[esp+0B8h+var_B4], edi
		mov	[esp+0B8h+var_B8], ecx
		mov	ecx, [ebp+var_2C]
		call	dword ptr [ecx+10h]
		mov	edx, [ebp+var_4C]
		jmp	loc_62B98547
silc_client_command_cumode endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  26. silc_client_command_cmode

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public silc_client_command_cmode
silc_client_command_cmode proc near	; DATA XREF: silc_client_commands_unregister+B45o
					; silc_client_commands_register+7BFo

Str		= dword	ptr -0C8h
var_C4		= dword	ptr -0C4h
var_C0		= dword	ptr -0C0h
var_BC		= dword	ptr -0BCh
var_B8		= dword	ptr -0B8h
var_B4		= dword	ptr -0B4h
var_B0		= dword	ptr -0B0h
var_AC		= dword	ptr -0ACh
var_A8		= dword	ptr -0A8h
var_A4		= dword	ptr -0A4h
var_A0		= dword	ptr -0A0h
var_9C		= dword	ptr -9Ch
var_98		= dword	ptr -98h
var_94		= dword	ptr -94h
var_90		= dword	ptr -90h
var_8C		= dword	ptr -8Ch
var_88		= dword	ptr -88h
var_84		= dword	ptr -84h
var_6C		= dword	ptr -6Ch
var_5C		= dword	ptr -5Ch
var_58		= dword	ptr -58h
var_54		= dword	ptr -54h
var_50		= dword	ptr -50h
var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= byte ptr -20h
var_1F		= byte ptr -1Fh
var_1E		= byte ptr -1Eh
var_1D		= byte ptr -1Dh
var_1C		= byte ptr -1Ch
var_1B		= byte ptr -1Bh
var_1A		= byte ptr -1Ah
var_19		= byte ptr -19h
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		sub	esp, 0BCh
		mov	ebx, [ebp+arg_4]
		mov	esi, [ebx+4]
		mov	eax, [esi+4Ch]
		mov	[ebp+var_40], eax
		mov	eax, [ebx+38h]
		cmp	eax, 2
		jbe	loc_62B98FE0
		mov	edx, [ebx+3Ch]
		mov	ecx, [edx+4]
		cmp	byte ptr [ecx],	2Ah
		jz	loc_62B98D18
		mov	[esp+0C8h+var_C0], ecx
		mov	[esp+0C8h+var_C4], esi
		mov	ecx, [ebp+var_40]
		mov	[esp+0C8h+Str],	ecx
		call	silc_client_get_channel
		mov	[ebp+var_44], eax
		test	eax, eax
		jz	loc_62B99511

loc_62B98C41:				; CODE XREF: silc_client_command_cmode+14Cj
		mov	eax, [ebp+var_44]
		mov	eax, [eax+12Ch]
		mov	[ebp+var_2C], eax
		mov	eax, [ebx+3Ch]
		mov	eax, [eax+8]
		xor	edx, edx
		cmp	byte ptr [eax],	2Dh
		setnz	dl
		mov	[ebp+var_38], edx
		inc	eax
		mov	[ebp+var_30], eax
		xor	eax, eax
		mov	ecx, 0FFFFFFFFh
		mov	edi, [ebp+var_30]
		repne scasb
		not	ecx
		dec	ecx
		mov	[ebp+var_3C], ecx
		jz	loc_62B995A3
		xor	eax, eax
		xor	edi, edi
		xor	ecx, ecx
		mov	[ebp+var_34], 0
		mov	[ebp+var_4C], 0
		xor	edx, edx
		mov	[ebp+var_48], 0
		mov	[ebp+var_50], esi
		mov	esi, ebx
		mov	[ebp+var_6C], edx
		nop

loc_62B98CA0:				; CODE XREF: silc_client_command_cmode+46Aj
		mov	ebx, [ebp+var_30]
		mov	al, [ebx+eax]
		sub	eax, 43h
		cmp	al, 31h		; switch 50 cases
		jbe	loc_62B98D44

loc_62B98CB1:				; CODE XREF: silc_client_command_cmode+157j
					; DATA XREF: .rdata:off_62BA8D5Co
		mov	ebx, esi	; jumptable 62B98D47 default case
		mov	esi, [ebp+var_50]
		mov	edx, [ebx+4]
		mov	eax, [edx+4Ch]
		mov	ecx, [eax+18h]
		mov	ecx, [ecx+48h]
		mov	edi, [ebx+3Ch]
		mov	[esp+0C8h+var_B0], edi
		mov	edi, [ebx+38h]
		mov	[esp+0C8h+var_B4], edi
		mov	[esp+0C8h+var_B8], 25h
		movzx	ebx, byte ptr [ebx+34h]
		mov	[esp+0C8h+var_BC], ebx
		mov	[esp+0C8h+var_C0], 0
		mov	[esp+0C8h+var_C4], edx
		mov	[esp+0C8h+Str],	eax
		call	dword ptr [ecx+10h]

loc_62B98CF2:				; CODE XREF: silc_client_command_cmode+455j
					; silc_client_command_cmode+65Bj ...
		mov	edi, [ebp+var_44]
		mov	[esp+0C8h+var_C0], edi
		mov	[esp+0C8h+var_C4], esi
		mov	eax, [ebp+var_40]
		mov	[esp+0C8h+Str],	eax
		call	silc_client_unref_channel
		mov	eax, 3

loc_62B98D0D:				; CODE XREF: silc_client_command_cmode+75Ej
					; silc_client_command_cmode+ADEj
		add	esp, 0BCh
		pop	ebx
		pop	esi
		pop	edi
		leave
		retn
; ---------------------------------------------------------------------------

loc_62B98D18:				; CODE XREF: silc_client_command_cmode+2Dj
		mov	ecx, [esi+30h]
		mov	[ebp+var_44], ecx
		test	ecx, ecx
		jz	loc_62B99218
		mov	eax, [ebp+var_44]
		mov	[esp+0C8h+var_C0], eax
		mov	[esp+0C8h+var_C4], esi
		mov	edx, [ebp+var_40]
		mov	[esp+0C8h+Str],	edx
		call	silc_client_ref_channel
		jmp	loc_62B98C41
; ---------------------------------------------------------------------------
		align 4

loc_62B98D44:				; CODE XREF: silc_client_command_cmode+BBj
		movzx	eax, al
		jmp	ds:off_62BA8D5C[eax*4] ; switch	jump
; ---------------------------------------------------------------------------
		align 10h

loc_62B98D50:				; CODE XREF: silc_client_command_cmode+157j
					; DATA XREF: .rdata:off_62BA8D5Co
		mov	ebx, [ebp+var_38] ; jumptable 62B98D47 case 49
		test	ebx, ebx
		jz	loc_62B991E8
		or	[ebp+var_2C], 10h
		jmp	loc_62B99054
; ---------------------------------------------------------------------------

loc_62B98D64:				; CODE XREF: silc_client_command_cmode+157j
					; DATA XREF: .rdata:off_62BA8D5Co
		mov	eax, [ebp+var_38] ; jumptable 62B98D47 case 48
		test	eax, eax
		jz	loc_62B991DC
		or	[ebp+var_2C], 2
		jmp	loc_62B99054
; ---------------------------------------------------------------------------

loc_62B98D78:				; CODE XREF: silc_client_command_cmode+157j
					; DATA XREF: .rdata:off_62BA8D5Co
		mov	ebx, [ebp+var_38] ; jumptable 62B98D47 case 45
		test	ebx, ebx
		jz	loc_62B991D0
		or	[ebp+var_2C], 1
		jmp	loc_62B99054
; ---------------------------------------------------------------------------

loc_62B98D8C:				; CODE XREF: silc_client_command_cmode+157j
					; DATA XREF: .rdata:off_62BA8D5Co
		mov	eax, [ebp+var_38] ; jumptable 62B98D47 case 42
		test	eax, eax
		jz	loc_62B991C4
		or	[ebp+var_2C], 400h
		jmp	loc_62B99054
; ---------------------------------------------------------------------------
		align 4

loc_62B98DA4:				; CODE XREF: silc_client_command_cmode+157j
					; DATA XREF: .rdata:off_62BA8D5Co
		mov	eax, [ebp+var_38] ; jumptable 62B98D47 case 41
		test	eax, eax
		jz	loc_62B99200
		cmp	dword ptr [esi+38h], 3
		jbe	loc_62B99552
		or	[ebp+var_2C], 20h
		mov	eax, [esi+3Ch]
		mov	eax, [eax+0Ch]
		mov	[esp+0C8h+Str],	eax ; Str
		call	atoi
		mov	edx, eax
		sar	edx, 18h
		mov	[ebp+var_20], dl
		mov	edx, eax
		sar	edx, 10h
		mov	[ebp+var_1F], dl
		mov	edx, eax
		sar	edx, 8
		mov	[ebp+var_1E], dl
		mov	[ebp+var_1D], al
		mov	ecx, 4
		mov	[ebp+var_34], 3
		lea	edx, [ebp+var_20]
		jmp	loc_62B99054
; ---------------------------------------------------------------------------
		align 4

loc_62B98DFC:				; CODE XREF: silc_client_command_cmode+157j
					; DATA XREF: .rdata:off_62BA8D5Co
		mov	ebx, [ebp+var_38] ; jumptable 62B98D47 case 40
		test	ebx, ebx
		jz	loc_62B991F4
		or	[ebp+var_2C], 4
		jmp	loc_62B99054
; ---------------------------------------------------------------------------

loc_62B98E10:				; CODE XREF: silc_client_command_cmode+157j
					; DATA XREF: .rdata:off_62BA8D5Co
		mov	eax, [ebp+var_38] ; jumptable 62B98D47 case 38
		test	eax, eax
		jz	loc_62B9920C
		or	[ebp+var_2C], 8
		jmp	loc_62B99054
; ---------------------------------------------------------------------------

loc_62B98E24:				; CODE XREF: silc_client_command_cmode+157j
					; DATA XREF: .rdata:off_62BA8D5Co
		mov	ebx, [ebp+var_38] ; jumptable 62B98D47 case 37
		test	ebx, ebx
		jz	loc_62B991B8
		cmp	dword ptr [esi+38h], 3
		jbe	loc_62B99552
		or	[ebp+var_2C], 100h
		mov	eax, [esi+3Ch]
		mov	edx, [eax+0Ch]
		mov	eax, [esi+40h]
		mov	ecx, [eax+0Ch]
		mov	[ebp+var_34], 6
		jmp	loc_62B99054
; ---------------------------------------------------------------------------

loc_62B98E58:				; CODE XREF: silc_client_command_cmode+157j
					; DATA XREF: .rdata:off_62BA8D5Co
		mov	eax, [ebp+var_38] ; jumptable 62B98D47 case 35
		test	eax, eax
		jz	loc_62B991AC
		mov	edx, [ebp+var_50]
		mov	eax, [edx+34h]
		mov	[ebp+var_28], eax
		mov	edx, [edx+38h]
		mov	[ebp+var_24], edx
		mov	edx, [esi+38h]
		cmp	edx, 4
		jbe	short loc_62B98EBA
		cmp	edx, 5
		jnz	loc_62B99250
		mov	eax, [esi+3Ch]
		mov	edx, offset byte_62BA8AE3

loc_62B98E8B:				; CODE XREF: silc_client_command_cmode+666j
		lea	ebx, [ebp+var_24]
		mov	[esp+0C8h+var_B8], ebx
		lea	ecx, [ebp+var_28]
		mov	[esp+0C8h+var_BC], ecx
		mov	[esp+0C8h+var_C0], edx
		mov	edx, [eax+10h]
		mov	[esp+0C8h+var_C4], edx
		mov	eax, [eax+0Ch]
		mov	[esp+0C8h+Str],	eax
		call	silc_load_key_pair
		test	al, al
		jz	loc_62B996D3
		mov	eax, [ebp+var_28]

loc_62B98EBA:				; CODE XREF: silc_client_command_cmode+288j
		or	[ebp+var_2C], 200h
		mov	[esp+0C8h+Str],	eax
		call	silc_public_key_payload_encode
		mov	[ebp+var_6C], eax
		mov	[esp+0C8h+var_B4], 2
		mov	edx, [ebp+var_50]
		mov	eax, [edx+4]
		mov	[esp+0C8h+var_B8], eax
		mov	eax, [edx+54h]
		mov	eax, [eax+0F0h]
		mov	[esp+0C8h+var_BC], eax
		mov	eax, [edx+4Ch]
		mov	eax, [eax+10h]
		mov	[esp+0C8h+var_C0], eax
		mov	eax, [ebp+var_24]
		mov	[esp+0C8h+var_C4], eax
		mov	eax, [ebp+var_28]
		mov	[esp+0C8h+Str],	eax
		call	silc_auth_public_key_auth_generate
		mov	[ebp+var_48], eax
		mov	edx, [eax+4]
		mov	ecx, [eax+8]
		sub	ecx, edx
		mov	[ebp+var_34], 7
		jmp	loc_62B99054
; ---------------------------------------------------------------------------
		align 10h

loc_62B98F20:				; CODE XREF: silc_client_command_cmode+157j
					; DATA XREF: .rdata:off_62BA8D5Co
		mov	eax, [ebp+var_38] ; jumptable 62B98D47 case 32
		test	eax, eax
		jz	loc_62B991A0
		cmp	dword ptr [esi+38h], 3
		jbe	loc_62B99552
		or	[ebp+var_2C], 80h
		mov	eax, [esi+3Ch]
		mov	edx, [eax+0Ch]
		mov	eax, [esi+40h]
		mov	ecx, [eax+0Ch]
		mov	[ebp+var_34], 5
		jmp	loc_62B99054
; ---------------------------------------------------------------------------

loc_62B98F54:				; CODE XREF: silc_client_command_cmode+157j
					; DATA XREF: .rdata:off_62BA8D5Co
		mov	ebx, [ebp+var_38] ; jumptable 62B98D47 case 30
		test	ebx, ebx
		jz	loc_62B99194
		cmp	dword ptr [esi+38h], 3
		jbe	loc_62B99552
		or	[ebp+var_2C], 40h
		mov	eax, [esi+3Ch]
		mov	edx, [eax+0Ch]
		mov	eax, [esi+40h]
		mov	ecx, [eax+0Ch]
		mov	[ebp+var_34], 4
		jmp	loc_62B99054
; ---------------------------------------------------------------------------
		align 4

loc_62B98F88:				; CODE XREF: silc_client_command_cmode+157j
					; DATA XREF: .rdata:off_62BA8D5Co
		mov	ebx, [ebp+var_38] ; jumptable 62B98D47 case 10
		test	ebx, ebx
		jz	loc_62B99188
		or	[ebp+var_2C], 800h
		jmp	loc_62B99054
; ---------------------------------------------------------------------------
		align 10h

loc_62B98FA0:				; CODE XREF: silc_client_command_cmode+157j
					; DATA XREF: .rdata:off_62BA8D5Co
		mov	ebx, [ebp+var_38] ; jumptable 62B98D47 case 0
		test	ebx, ebx
		jz	loc_62B9904C
		mov	[ebp+var_28], 0
		cmp	dword ptr [esi+38h], 3
		jz	loc_62B995F5
		ja	loc_62B99354

loc_62B98FC2:				; CODE XREF: silc_client_command_cmode+795j
					; silc_client_command_cmode+91Cj
		or	[ebp+var_2C], 1000h
		mov	ecx, [ebp+var_48]
		mov	edx, [ecx+4]
		mov	ecx, [ecx+8]
		sub	ecx, edx
		mov	[ebp+var_34], 9
		jmp	short loc_62B99054
; ---------------------------------------------------------------------------
		align 10h

loc_62B98FE0:				; CODE XREF: silc_client_command_cmode+1Ej
		mov	edx, [ebp+var_40]
		mov	eax, [edx+18h]
		mov	eax, [eax+48h]
		mov	[esp+0C8h+var_BC], offset aUsageCmodeChan ; "Usage: /CMODE <channel> +|-<modes>	[{ <"...
		mov	[esp+0C8h+var_C0], 0
		mov	[esp+0C8h+var_C4], esi
		mov	[esp+0C8h+Str],	edx
		call	dword ptr [eax]
		mov	edx, [ebx+4]
		mov	eax, [edx+4Ch]
		mov	ecx, [eax+18h]
		mov	ecx, [ecx+48h]
		mov	edi, [ebx+3Ch]
		mov	[esp+0C8h+var_B0], edi
		mov	edi, [ebx+38h]
		mov	[esp+0C8h+var_B4], edi
		mov	[esp+0C8h+var_B8], 1Dh
		movzx	ebx, byte ptr [ebx+34h]
		mov	[esp+0C8h+var_BC], ebx
		mov	[esp+0C8h+var_C0], 0
		mov	[esp+0C8h+var_C4], edx
		mov	[esp+0C8h+Str],	eax
		call	dword ptr [ecx+10h]
		mov	[ebp+var_44], 0
		jmp	loc_62B98CF2
; ---------------------------------------------------------------------------
		align 4

loc_62B9904C:				; CODE XREF: silc_client_command_cmode+3B5j
		and	[ebp+var_2C], 0FFFFEFFFh
		nop

loc_62B99054:				; CODE XREF: silc_client_command_cmode+16Fj
					; silc_client_command_cmode+183j ...
		inc	edi
		mov	eax, edi
		cmp	[ebp+var_3C], edi
		ja	loc_62B98CA0
		mov	[ebp+var_4C], edx
		mov	edx, [ebp+var_6C]
		mov	ebx, esi
		mov	esi, [ebp+var_50]

loc_62B9906B:				; CODE XREF: silc_client_command_cmode+9CCj
		mov	[esp+0C8h+var_C4], 3
		mov	eax, [ebp+var_44]
		add	eax, 114h
		mov	[esp+0C8h+Str],	eax
		mov	[ebp+var_58], edx
		mov	[ebp+var_5C], ecx
		call	silc_id_payload_encode
		mov	edi, eax
		mov	eax, [ebp+var_2C]
		shr	eax, 18h
		mov	[ebp+var_1C], al
		mov	eax, [ebp+var_2C]
		shr	eax, 10h
		mov	[ebp+var_1B], al
		mov	eax, [ebp+var_2C]
		shr	eax, 8
		mov	[ebp+var_1A], al
		mov	al, byte ptr [ebp+var_2C]
		mov	[ebp+var_19], al
		mov	edx, [ebp+var_34]
		test	edx, edx
		mov	edx, [ebp+var_58]
		mov	ecx, [ebp+var_5C]
		jz	loc_62B9925C
		mov	eax, [ebp+var_4C]
		test	eax, eax
		jz	loc_62B9925C
		test	edx, edx
		jz	loc_62B995E2
		mov	eax, [edx+4]
		mov	[ebp+var_38], eax
		mov	eax, [edx+8]
		mov	[ebp+var_3C], eax
		mov	eax, [ebp+var_38]
		sub	[ebp+var_3C], eax

loc_62B990E2:				; CODE XREF: silc_client_command_cmode+A00j
		test	edi, edi
		jz	loc_62B995CF
		mov	eax, [edi+4]
		mov	[ebp+var_30], eax
		mov	eax, [edi+8]
		mov	[ebp+var_2C], eax
		mov	eax, [ebp+var_30]
		sub	[ebp+var_2C], eax

loc_62B990FC:				; CODE XREF: silc_client_command_cmode+9EDj
		mov	eax, [ebp+var_3C]
		mov	[esp+0C8h+var_84], eax
		mov	eax, [ebp+var_38]
		mov	[esp+0C8h+var_88], eax
		mov	[esp+0C8h+var_8C], 8
		mov	[esp+0C8h+var_90], ecx
		mov	ecx, [ebp+var_4C]
		mov	[esp+0C8h+var_94], ecx
		mov	eax, [ebp+var_34]
		mov	[esp+0C8h+var_98], eax
		mov	[esp+0C8h+var_9C], 4
		lea	eax, [ebp+var_1C]
		mov	[esp+0C8h+var_A0], eax
		mov	[esp+0C8h+var_A4], 2
		mov	ecx, [ebp+var_2C]
		mov	[esp+0C8h+var_A8], ecx
		mov	eax, [ebp+var_30]
		mov	[esp+0C8h+var_AC], eax
		mov	[esp+0C8h+var_B0], 1
		mov	[esp+0C8h+var_B4], 4
		mov	[esp+0C8h+var_B8], 0
		mov	[esp+0C8h+var_BC], 0
		movzx	eax, byte ptr [ebx+34h]
		mov	[esp+0C8h+var_C0], eax
		mov	[esp+0C8h+var_C4], ebx
		mov	[esp+0C8h+Str],	esi
		mov	[ebp+var_58], edx
		call	sub_62B95C0C
		mov	edx, [ebp+var_58]
		jmp	loc_62B992CB
; ---------------------------------------------------------------------------

loc_62B99188:				; CODE XREF: silc_client_command_cmode+39Dj
		and	[ebp+var_2C], 0FFFFF7FFh
		jmp	loc_62B99054
; ---------------------------------------------------------------------------

loc_62B99194:				; CODE XREF: silc_client_command_cmode+369j
		and	[ebp+var_2C], 0FFFFFFBFh
		jmp	loc_62B99054
; ---------------------------------------------------------------------------
		align 10h

loc_62B991A0:				; CODE XREF: silc_client_command_cmode+335j
		and	[ebp+var_2C], 0FFFFFF7Fh
		jmp	loc_62B99054
; ---------------------------------------------------------------------------

loc_62B991AC:				; CODE XREF: silc_client_command_cmode+26Dj
		and	[ebp+var_2C], 0FFFFFDFFh
		jmp	loc_62B99054
; ---------------------------------------------------------------------------

loc_62B991B8:				; CODE XREF: silc_client_command_cmode+239j
		and	[ebp+var_2C], 0FFFFFEFFh
		jmp	loc_62B99054
; ---------------------------------------------------------------------------

loc_62B991C4:				; CODE XREF: silc_client_command_cmode+1A1j
		and	[ebp+var_2C], 0FFFFFBFFh
		jmp	loc_62B99054
; ---------------------------------------------------------------------------

loc_62B991D0:				; CODE XREF: silc_client_command_cmode+18Dj
		and	[ebp+var_2C], 0FFFFFFFEh
		jmp	loc_62B99054
; ---------------------------------------------------------------------------
		align 4

loc_62B991DC:				; CODE XREF: silc_client_command_cmode+179j
		and	[ebp+var_2C], 0FFFFFFFDh
		jmp	loc_62B99054
; ---------------------------------------------------------------------------
		align 4

loc_62B991E8:				; CODE XREF: silc_client_command_cmode+165j
		and	[ebp+var_2C], 0FFFFFFEFh
		jmp	loc_62B99054
; ---------------------------------------------------------------------------
		align 4

loc_62B991F4:				; CODE XREF: silc_client_command_cmode+211j
		and	[ebp+var_2C], 0FFFFFFFBh
		jmp	loc_62B99054
; ---------------------------------------------------------------------------
		align 10h

loc_62B99200:				; CODE XREF: silc_client_command_cmode+1B9j
		and	[ebp+var_2C], 0FFFFFFDFh
		jmp	loc_62B99054
; ---------------------------------------------------------------------------
		align 4

loc_62B9920C:				; CODE XREF: silc_client_command_cmode+225j
		and	[ebp+var_2C], 0FFFFFFF7h
		jmp	loc_62B99054
; ---------------------------------------------------------------------------
		align 4

loc_62B99218:				; CODE XREF: silc_client_command_cmode+130j
		mov	edi, [ebp+var_40]
		mov	ecx, [edi+18h]
		mov	ecx, [ecx+48h]
		mov	[esp+0C8h+var_B0], edx
		mov	[esp+0C8h+var_B4], eax
		mov	[esp+0C8h+var_B8], 19h
		movzx	eax, byte ptr [ebx+34h]
		mov	[esp+0C8h+var_BC], eax
		mov	[esp+0C8h+var_C0], 0
		mov	[esp+0C8h+var_C4], esi
		mov	[esp+0C8h+Str],	edi
		call	dword ptr [ecx+10h]
		jmp	loc_62B98CF2
; ---------------------------------------------------------------------------

loc_62B99250:				; CODE XREF: silc_client_command_cmode+28Dj
		mov	eax, [esi+3Ch]
		mov	edx, [eax+14h]
		jmp	loc_62B98E8B
; ---------------------------------------------------------------------------
		align 4

loc_62B9925C:				; CODE XREF: silc_client_command_cmode+4C7j
					; silc_client_command_cmode+4D2j
		test	edi, edi
		jz	loc_62B995C1
		mov	ecx, [edi+4]
		mov	[ebp+var_2C], ecx
		mov	eax, [edi+8]
		sub	eax, ecx

loc_62B9926F:				; CODE XREF: silc_client_command_cmode+9DAj
		mov	[esp+0C8h+var_9C], 4
		lea	ecx, [ebp+var_1C]
		mov	[esp+0C8h+var_A0], ecx
		mov	[esp+0C8h+var_A4], 2
		mov	[esp+0C8h+var_A8], eax
		mov	eax, [ebp+var_2C]
		mov	[esp+0C8h+var_AC], eax
		mov	[esp+0C8h+var_B0], 1
		mov	[esp+0C8h+var_B4], 2
		mov	[esp+0C8h+var_B8], 0
		mov	[esp+0C8h+var_BC], 0
		movzx	eax, byte ptr [ebx+34h]
		mov	[esp+0C8h+var_C0], eax
		mov	[esp+0C8h+var_C4], ebx
		mov	[esp+0C8h+Str],	esi
		mov	[ebp+var_58], edx
		call	sub_62B95C0C
		mov	edx, [ebp+var_58]

loc_62B992CB:				; CODE XREF: silc_client_command_cmode+593j
		mov	eax, edi
		mov	[ebp+var_58], edx
		call	sub_62B949E8
		mov	eax, [ebp+var_48]
		call	sub_62B949E8
		mov	edx, [ebp+var_58]
		mov	eax, edx
		call	sub_62B949E8
		mov	edx, [ebp+var_44]
		mov	[esp+0C8h+var_C0], edx
		mov	[esp+0C8h+var_C4], esi
		mov	ecx, [ebp+var_40]
		mov	[esp+0C8h+Str],	ecx
		call	silc_client_unref_channel
		mov	edx, [ebx+4]
		mov	eax, [edx+4Ch]
		mov	ecx, [eax+18h]
		mov	ecx, [ecx+48h]
		mov	esi, [ebx+3Ch]
		mov	[esp+0C8h+var_B0], esi
		mov	esi, [ebx+38h]
		mov	[esp+0C8h+var_B4], esi
		mov	[esp+0C8h+var_B8], 0
		movzx	ebx, byte ptr [ebx+34h]
		mov	[esp+0C8h+var_BC], ebx
		mov	[esp+0C8h+var_C0], 1
		mov	[esp+0C8h+var_C4], edx
		mov	[esp+0C8h+Str],	eax
		call	dword ptr [ecx+10h]
		mov	[esp+0C8h+var_C4], offset silc_client_command_reply_wait
		mov	ebx, [ebp+arg_0]
		mov	[esp+0C8h+Str],	ebx
		call	silc_fsm_next
		xor	eax, eax
		jmp	loc_62B98D0D
; ---------------------------------------------------------------------------
		align 4

loc_62B99354:				; CODE XREF: silc_client_command_cmode+3CCj
		call	sub_62B953CC
		mov	[ebp+var_48], eax
		mov	[esp+0C8h+var_BC], 1Dh
		mov	eax, [esi+38h]
		sub	eax, 3
		mov	[esp+0C8h+var_C0], eax
		mov	[esp+0C8h+var_C4], 3
		mov	edx, [ebp+var_48]
		mov	[esp+0C8h+Str],	edx
		call	silc_buffer_format
		cmp	dword ptr [esi+38h], 3
		jbe	loc_62B98FC2
		mov	eax, 3
		mov	byte ptr [ebp+var_4C], 0
		mov	edx, 3
		mov	[ebp+var_54], edi
		mov	edi, edx
		mov	ebx, [ebp+var_6C]
		mov	[ebp+var_34], esi
		mov	esi, eax
		jmp	loc_62B99432
; ---------------------------------------------------------------------------
		align 4

loc_62B993AC:				; CODE XREF: silc_client_command_cmode+851j
					; silc_client_command_cmode+85Bj
		lea	edx, [ebp+var_28]
		mov	[esp+0C8h+var_C4], edx
		inc	eax
		mov	[esp+0C8h+Str],	eax
		call	silc_pkcs_load_public_key
		test	al, al
		jz	loc_62B99480
		mov	eax, [ebp+var_28]
		test	eax, eax
		jz	short loc_62B99423
		mov	[esp+0C8h+Str],	eax
		call	silc_public_key_payload_encode
		mov	ebx, eax
		mov	al, byte ptr [ebp+var_4C]
		xor	eax, 1
		movzx	eax, al
		test	ebx, ebx
		jz	short loc_62B99450
		mov	edx, [ebx+4]
		mov	[esp+0C8h+var_BC], eax
		mov	eax, [ebx+8]
		sub	eax, edx
		mov	[esp+0C8h+var_C0], eax
		mov	[esp+0C8h+var_C4], edx
		mov	ecx, [ebp+var_48]
		mov	[esp+0C8h+Str],	ecx
		call	silc_argument_payload_encode_one
		mov	[ebp+var_48], eax
		mov	eax, [ebp+var_28]
		mov	[esp+0C8h+Str],	eax
		call	silc_pkcs_public_key_free
		mov	eax, [ebx]
		mov	[esp+0C8h+Str],	eax
		call	silc_free
		mov	[esp+0C8h+Str],	ebx
		call	silc_free
		xor	ebx, ebx

loc_62B99423:				; CODE XREF: silc_client_command_cmode+7D9j
					; silc_client_command_cmode+88Dj
		inc	edi
		mov	esi, edi
		mov	eax, [ebp+var_34]
		cmp	[eax+38h], edi
		jbe	loc_62B99504

loc_62B99432:				; CODE XREF: silc_client_command_cmode+7B6j
		shl	esi, 2
		mov	ecx, [ebp+var_34]
		mov	eax, [ecx+3Ch]
		mov	eax, [eax+esi]
		cmp	byte ptr [eax],	2Bh
		jnz	loc_62B993AC
		mov	byte ptr [ebp+var_4C], 1
		jmp	loc_62B993AC
; ---------------------------------------------------------------------------

loc_62B99450:				; CODE XREF: silc_client_command_cmode+7F0j
		mov	[esp+0C8h+var_BC], eax
		mov	[esp+0C8h+var_C0], 0
		mov	[esp+0C8h+var_C4], 0
		mov	edx, [ebp+var_48]
		mov	[esp+0C8h+Str],	edx
		call	silc_argument_payload_encode_one
		mov	[ebp+var_48], eax
		mov	eax, [ebp+var_28]
		mov	[esp+0C8h+Str],	eax
		call	silc_pkcs_public_key_free
		jmp	short loc_62B99423
; ---------------------------------------------------------------------------
		align 10h

loc_62B99480:				; CODE XREF: silc_client_command_cmode+7CEj
		mov	ecx, esi
		mov	esi, [ebp+var_50]
		mov	ebx, [ebp+var_34]
		mov	eax, [ebx+4]
		mov	eax, [eax+4Ch]
		mov	eax, [eax+18h]
		mov	edx, [eax+48h]
		mov	eax, [ebx+3Ch]
		mov	eax, [eax+ecx]
		mov	[esp+0C8h+var_B8], eax
		mov	[esp+0C8h+var_BC], offset aCouldNotLoadPu ; "Could not load public key %s, check the"...
		mov	[esp+0C8h+var_C0], 3
		mov	[esp+0C8h+var_C4], esi
		mov	eax, [esi+4Ch]
		mov	[esp+0C8h+Str],	eax
		call	dword ptr [edx]
		mov	ecx, [ebx+4]
		mov	edx, [ecx+4Ch]
		mov	eax, [edx+18h]
		mov	edi, [eax+48h]
		mov	eax, [ebx+3Ch]
		mov	[esp+0C8h+var_B0], eax
		mov	eax, [ebx+38h]
		mov	[esp+0C8h+var_B4], eax
		mov	[esp+0C8h+var_B8], 1Dh
		movzx	eax, byte ptr [ebx+34h]
		mov	[esp+0C8h+var_BC], eax
		mov	[esp+0C8h+var_C0], 0
		mov	[esp+0C8h+var_C4], ecx
		mov	[esp+0C8h+Str],	edx
		call	dword ptr [edi+10h]
		mov	eax, [ebp+var_48]
		call	sub_62B949E8
		jmp	loc_62B98CF2
; ---------------------------------------------------------------------------
		align 4

loc_62B99504:				; CODE XREF: silc_client_command_cmode+83Cj
		mov	edi, [ebp+var_54]
		mov	[ebp+var_6C], ebx
		mov	esi, eax
		jmp	loc_62B98FC2
; ---------------------------------------------------------------------------

loc_62B99511:				; CODE XREF: silc_client_command_cmode+4Bj
		mov	ecx, [ebx+4]
		mov	eax, [ecx+4Ch]
		mov	edx, [eax+18h]
		mov	edi, [edx+48h]
		mov	edx, [ebx+3Ch]
		mov	[esp+0C8h+var_B0], edx
		mov	edx, [ebx+38h]
		mov	[esp+0C8h+var_B4], edx
		mov	[esp+0C8h+var_B8], 19h

loc_62B99533:				; CODE XREF: silc_client_command_cmode+9B1j
		movzx	edx, byte ptr [ebx+34h]
		mov	[esp+0C8h+var_BC], edx
		mov	[esp+0C8h+var_C0], 0
		mov	[esp+0C8h+var_C4], ecx
		mov	[esp+0C8h+Str],	eax
		call	dword ptr [edi+10h]
		jmp	loc_62B98CF2
; ---------------------------------------------------------------------------

loc_62B99552:				; CODE XREF: silc_client_command_cmode+1C3j
					; silc_client_command_cmode+243j ...
		mov	ebx, esi
		mov	esi, [ebp+var_50]
		mov	eax, [ebx+4]
		mov	eax, [eax+4Ch]
		mov	eax, [eax+18h]
		mov	eax, [eax+48h]
		mov	[esp+0C8h+var_BC], offset aUsageCmodeChan ; "Usage: /CMODE <channel> +|-<modes>	[{ <"...
		mov	[esp+0C8h+var_C0], 0
		mov	[esp+0C8h+var_C4], esi
		mov	edx, [esi+4Ch]
		mov	[esp+0C8h+Str],	edx

loc_62B9957D:				; CODE XREF: silc_client_command_cmode+B0Ej
		call	dword ptr [eax]
		mov	ecx, [ebx+4]
		mov	eax, [ecx+4Ch]
		mov	edx, [eax+18h]
		mov	edi, [edx+48h]
		mov	edx, [ebx+3Ch]
		mov	[esp+0C8h+var_B0], edx
		mov	edx, [ebx+38h]
		mov	[esp+0C8h+var_B4], edx
		mov	[esp+0C8h+var_B8], 1Dh
		jmp	short loc_62B99533
; ---------------------------------------------------------------------------

loc_62B995A3:				; CODE XREF: silc_client_command_cmode+84j
		xor	ecx, ecx
		mov	[ebp+var_34], 0
		mov	[ebp+var_4C], 0
		xor	edx, edx
		mov	[ebp+var_48], 0
		jmp	loc_62B9906B
; ---------------------------------------------------------------------------

loc_62B995C1:				; CODE XREF: silc_client_command_cmode+66Ej
		xor	eax, eax
		mov	[ebp+var_2C], 0
		jmp	loc_62B9926F
; ---------------------------------------------------------------------------

loc_62B995CF:				; CODE XREF: silc_client_command_cmode+4F4j
		mov	[ebp+var_2C], 0
		mov	[ebp+var_30], 0
		jmp	loc_62B990FC
; ---------------------------------------------------------------------------

loc_62B995E2:				; CODE XREF: silc_client_command_cmode+4DAj
		mov	[ebp+var_3C], 0
		mov	[ebp+var_38], 0
		jmp	loc_62B990E2
; ---------------------------------------------------------------------------

loc_62B995F5:				; CODE XREF: silc_client_command_cmode+3C6j
		mov	ebx, esi
		mov	esi, [ebp+var_50]
		mov	[esp+0C8h+var_C4], 3
		mov	eax, [ebp+var_44]
		add	eax, 114h
		mov	[esp+0C8h+Str],	eax
		call	silc_id_payload_encode
		mov	edi, eax
		test	eax, eax
		jz	loc_62B99703
		mov	edx, [eax+4]
		mov	eax, [eax+8]
		sub	eax, edx

loc_62B99624:				; CODE XREF: silc_client_command_cmode+B17j
		mov	[esp+0C8h+var_A8], eax
		mov	[esp+0C8h+var_AC], edx
		mov	[esp+0C8h+var_B0], 1
		mov	[esp+0C8h+var_B4], 1
		mov	[esp+0C8h+var_B8], 0
		mov	[esp+0C8h+var_BC], 0
		mov	[esp+0C8h+var_C0], 11h
		mov	[esp+0C8h+var_C4], ebx
		mov	[esp+0C8h+Str],	esi
		call	sub_62B95C0C
		mov	eax, edi
		call	sub_62B949E8
		mov	ecx, [ebp+var_44]
		mov	[esp+0C8h+var_C0], ecx
		mov	[esp+0C8h+var_C4], esi
		mov	edi, [ebp+var_40]
		mov	[esp+0C8h+Str],	edi
		call	silc_client_unref_channel
		mov	edx, [ebx+4]
		mov	eax, [edx+4Ch]
		mov	ecx, [eax+18h]
		mov	ecx, [ecx+48h]
		mov	esi, [ebx+3Ch]
		mov	[esp+0C8h+var_B0], esi
		mov	esi, [ebx+38h]
		mov	[esp+0C8h+var_B4], esi
		mov	[esp+0C8h+var_B8], 0
		movzx	ebx, byte ptr [ebx+34h]
		mov	[esp+0C8h+var_BC], ebx
		mov	[esp+0C8h+var_C0], 1
		mov	[esp+0C8h+var_C4], edx
		mov	[esp+0C8h+Str],	eax
		call	dword ptr [ecx+10h]
		mov	[esp+0C8h+var_C4], offset silc_client_command_reply_wait
		mov	eax, [ebp+arg_0]
		mov	[esp+0C8h+Str],	eax
		call	silc_fsm_next
		xor	eax, eax
		jmp	loc_62B98D0D
; ---------------------------------------------------------------------------

loc_62B996D3:				; CODE XREF: silc_client_command_cmode+2C1j
		mov	ebx, esi
		mov	esi, [ebp+var_50]
		mov	eax, [ebx+4]
		mov	eax, [eax+4Ch]
		mov	eax, [eax+18h]
		mov	eax, [eax+48h]
		mov	[esp+0C8h+var_BC], offset aCouldNotLoadKe ; "Could not load key	pair, check your arg"...
		mov	[esp+0C8h+var_C0], 3
		mov	[esp+0C8h+var_C4], esi
		mov	edi, [ebp+var_40]
		mov	[esp+0C8h+Str],	edi
		jmp	loc_62B9957D
; ---------------------------------------------------------------------------

loc_62B99703:				; CODE XREF: silc_client_command_cmode+A26j
		xor	eax, eax
		xor	edx, edx
		jmp	loc_62B99624
silc_client_command_cmode endp

; Exported entry  32. silc_client_command_identify

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public silc_client_command_identify
silc_client_command_identify proc near	; DATA XREF: silc_client_commands_unregister+1A5o
					; silc_client_commands_register+158o

Str		= dword	ptr -48h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_C		= byte ptr -0Ch
var_B		= byte ptr -0Bh
var_A		= byte ptr -0Ah
var_9		= byte ptr -9
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		push	esi
		push	ebx
		sub	esp, 40h
		mov	ebx, [ebp+arg_4]
		mov	esi, [ebx+4]
		mov	eax, [ebx+38h]
		lea	edx, [eax-2]
		cmp	edx, 1
		jbe	short loc_62B99734
		mov	eax, 3
		add	esp, 40h
		pop	ebx
		pop	esi
		leave
		retn
; ---------------------------------------------------------------------------
		align 4

loc_62B99734:				; CODE XREF: silc_client_command_identify+17j
		cmp	eax, 2
		jz	loc_62B997E4
		mov	eax, [ebx+3Ch]
		mov	eax, [eax+8]
		mov	[esp+48h+Str], eax ; Str
		call	atoi
		mov	edx, eax
		sar	edx, 18h
		mov	[ebp+var_C], dl
		mov	edx, eax
		sar	edx, 10h
		mov	[ebp+var_B], dl
		mov	edx, eax
		sar	edx, 8
		mov	[ebp+var_A], dl
		mov	[ebp+var_9], al
		mov	[esp+48h+var_1C], 4
		lea	eax, [ebp+var_C]
		mov	[esp+48h+var_20], eax
		mov	[esp+48h+var_24], 4
		mov	eax, [ebx+40h]
		mov	eax, [eax+4]
		mov	[esp+48h+var_28], eax
		mov	eax, [ebx+3Ch]
		mov	eax, [eax+4]
		mov	[esp+48h+var_2C], eax
		mov	[esp+48h+var_30], 1
		mov	[esp+48h+var_34], 2
		mov	[esp+48h+var_38], 0
		mov	[esp+48h+var_3C], 0
		movzx	eax, byte ptr [ebx+34h]
		mov	[esp+48h+var_40], eax
		mov	[esp+48h+var_44], ebx
		mov	[esp+48h+Str], esi
		call	sub_62B95C0C

loc_62B997C5:				; CODE XREF: silc_client_command_identify+120j
		mov	[esp+48h+var_44], offset silc_client_command_reply_wait
		mov	eax, [ebp+arg_0]
		mov	[esp+48h+Str], eax
		call	silc_fsm_next
		xor	eax, eax
		add	esp, 40h
		pop	ebx
		pop	esi
		leave
		retn
; ---------------------------------------------------------------------------
		align 4

loc_62B997E4:				; CODE XREF: silc_client_command_identify+2Bj
		mov	eax, [ebx+40h]
		mov	eax, [eax+4]
		mov	[esp+48h+var_28], eax
		mov	eax, [ebx+3Ch]
		mov	eax, [eax+4]
		mov	[esp+48h+var_2C], eax
		mov	[esp+48h+var_30], 1
		mov	[esp+48h+var_34], 1
		mov	[esp+48h+var_38], 0
		mov	[esp+48h+var_3C], 0
		movzx	eax, byte ptr [ebx+34h]
		mov	[esp+48h+var_40], eax
		mov	[esp+48h+var_44], ebx
		mov	[esp+48h+Str], esi
		call	sub_62B95C0C
		jmp	short loc_62B997C5
silc_client_command_identify endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  91. silc_client_command_whowas

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public silc_client_command_whowas
silc_client_command_whowas proc	near	; DATA XREF: silc_client_commands_unregister+F5o
					; silc_client_commands_register+DDo

Str		= dword	ptr -58h
var_54		= dword	ptr -54h
var_50		= dword	ptr -50h
var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_1C		= byte ptr -1Ch
var_1B		= byte ptr -1Bh
var_1A		= byte ptr -1Ah
var_19		= byte ptr -19h
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		sub	esp, 4Ch
		mov	ebx, [ebp+arg_4]
		mov	esi, [ebx+4]
		mov	eax, [ebx+38h]
		lea	edx, [eax-2]
		cmp	edx, 1
		jbe	short loc_62B998BC
		mov	eax, [esi+4Ch]
		mov	edx, [eax+18h]
		mov	edx, [edx+48h]
		mov	[esp+58h+var_4C], offset aUsageWhowasNic ; "Usage: /WHOWAS <nickname>[@<server>] [<"...
		mov	[esp+58h+var_50], 0
		mov	[esp+58h+var_54], esi
		mov	[esp+58h+Str], eax
		call	dword ptr [edx]
		mov	ecx, [ebx+4]
		mov	edx, [ecx+4Ch]
		mov	eax, [edx+18h]
		mov	eax, [eax+48h]
		mov	edi, [eax+10h]
		cmp	dword ptr [ebx+38h], 2
		sbb	eax, eax
		add	eax, 1Eh
		mov	esi, [ebx+3Ch]
		mov	[esp+58h+var_40], esi
		mov	esi, [ebx+38h]
		mov	[esp+58h+var_44], esi
		mov	[esp+58h+var_48], eax
		movzx	eax, byte ptr [ebx+34h]
		mov	[esp+58h+var_4C], eax
		mov	[esp+58h+var_50], 0
		mov	[esp+58h+var_54], ecx
		mov	[esp+58h+Str], edx
		call	edi
		mov	eax, 3
		add	esp, 4Ch
		pop	ebx
		pop	esi
		pop	edi
		leave
		retn
; ---------------------------------------------------------------------------

loc_62B998BC:				; CODE XREF: silc_client_command_whowas+18j
		cmp	eax, 2
		jz	loc_62B999A8
		mov	eax, [ebx+3Ch]
		mov	eax, [eax+8]
		mov	[esp+58h+Str], eax ; Str
		call	atoi
		mov	edx, eax
		sar	edx, 18h
		mov	[ebp+var_1C], dl
		mov	edx, eax
		sar	edx, 10h
		mov	[ebp+var_1B], dl
		mov	edx, eax
		sar	edx, 8
		mov	[ebp+var_1A], dl
		mov	[ebp+var_19], al
		mov	[esp+58h+var_2C], 4
		lea	eax, [ebp+var_1C]
		mov	[esp+58h+var_30], eax
		mov	[esp+58h+var_34], 2
		mov	eax, [ebx+40h]
		mov	eax, [eax+4]
		mov	[esp+58h+var_38], eax
		mov	eax, [ebx+3Ch]
		mov	eax, [eax+4]
		mov	[esp+58h+var_3C], eax
		mov	[esp+58h+var_40], 1
		mov	[esp+58h+var_44], 2
		mov	[esp+58h+var_48], 0
		mov	[esp+58h+var_4C], 0
		movzx	eax, byte ptr [ebx+34h]
		mov	[esp+58h+var_50], eax
		mov	[esp+58h+var_54], ebx
		mov	[esp+58h+Str], esi
		call	sub_62B95C0C

loc_62B9994D:				; CODE XREF: silc_client_command_whowas+1C0j
		mov	edx, [ebx+4]
		mov	eax, [edx+4Ch]
		mov	ecx, [eax+18h]
		mov	ecx, [ecx+48h]
		mov	esi, [ebx+3Ch]
		mov	[esp+58h+var_40], esi
		mov	esi, [ebx+38h]
		mov	[esp+58h+var_44], esi
		mov	[esp+58h+var_48], 0
		movzx	ebx, byte ptr [ebx+34h]
		mov	[esp+58h+var_4C], ebx
		mov	[esp+58h+var_50], 1
		mov	[esp+58h+var_54], edx
		mov	[esp+58h+Str], eax
		call	dword ptr [ecx+10h]
		mov	[esp+54h+var_50], offset silc_client_command_reply_wait
		mov	eax, [ebp+arg_0]
		mov	[esp+54h+var_54], eax
		call	silc_fsm_next
		xor	eax, eax
		add	esp, 4Ch
		pop	ebx
		pop	esi
		pop	edi
		leave
		retn
; ---------------------------------------------------------------------------
		align 4

loc_62B999A8:				; CODE XREF: silc_client_command_whowas+8Fj
		mov	eax, [ebx+40h]
		mov	eax, [eax+4]
		mov	[esp+58h+var_38], eax
		mov	eax, [ebx+3Ch]
		mov	eax, [eax+4]
		mov	[esp+58h+var_3C], eax
		mov	[esp+58h+var_40], 1
		mov	[esp+58h+var_44], 1
		mov	[esp+58h+var_48], 0
		mov	[esp+58h+var_4C], 0
		movzx	eax, byte ptr [ebx+34h]
		mov	[esp+58h+var_50], eax
		mov	[esp+58h+var_54], ebx
		mov	[esp+58h+Str], esi
		call	sub_62B95C0C
		jmp	loc_62B9994D
silc_client_command_whowas endp

; ---------------------------------------------------------------------------
		align 4
; Exported entry  35. silc_client_command_join

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public silc_client_command_join
silc_client_command_join proc near	; DATA XREF: silc_client_command_join+163o
					; silc_client_commands_unregister+935o	...

Str1		= dword	ptr -138h
Str2		= dword	ptr -134h
var_130		= dword	ptr -130h
var_12C		= dword	ptr -12Ch
var_128		= dword	ptr -128h
var_124		= dword	ptr -124h
var_120		= dword	ptr -120h
var_11C		= dword	ptr -11Ch
var_118		= dword	ptr -118h
var_114		= dword	ptr -114h
var_110		= dword	ptr -110h
var_10C		= dword	ptr -10Ch
var_108		= dword	ptr -108h
var_104		= dword	ptr -104h
var_100		= dword	ptr -100h
var_FC		= dword	ptr -0FCh
var_F8		= dword	ptr -0F8h
var_F4		= dword	ptr -0F4h
var_F0		= dword	ptr -0F0h
var_EC		= dword	ptr -0ECh
var_E8		= dword	ptr -0E8h
var_E4		= dword	ptr -0E4h
var_E0		= dword	ptr -0E0h
var_DC		= dword	ptr -0DCh
var_D8		= dword	ptr -0D8h
var_D4		= dword	ptr -0D4h
var_D0		= dword	ptr -0D0h
var_BC		= dword	ptr -0BCh
var_B0		= dword	ptr -0B0h
var_AC		= dword	ptr -0ACh
var_A8		= dword	ptr -0A8h
var_A4		= dword	ptr -0A4h
var_A0		= dword	ptr -0A0h
var_9C		= dword	ptr -9Ch
var_98		= dword	ptr -98h
var_94		= dword	ptr -94h
var_90		= dword	ptr -90h
var_8C		= dword	ptr -8Ch
var_88		= dword	ptr -88h
var_84		= dword	ptr -84h
var_80		= dword	ptr -80h
var_7C		= dword	ptr -7Ch
var_78		= dword	ptr -78h
var_74		= dword	ptr -74h
var_70		= dword	ptr -70h
var_6C		= dword	ptr -6Ch
var_64		= byte ptr -64h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		sub	esp, 12Ch
		mov	ebx, [ebp+arg_4]
		mov	edx, [ebx+4]
		mov	eax, [edx+4Ch]
		mov	[ebp+var_6C], eax
		mov	eax, [ebx+38h]
		cmp	eax, 1
		jbe	short loc_62B99A8C
		mov	eax, [ebx+3Ch]
		mov	eax, [eax+4]
		mov	[esp+138h+var_130], eax
		mov	[esp+138h+Str2], edx
		mov	eax, [ebp+var_6C]
		mov	[esp+138h+Str1], eax
		mov	[ebp+var_AC], edx
		call	silc_client_get_channel
		mov	[ebp+var_70], eax
		test	eax, eax
		mov	edx, [ebp+var_AC]
		jz	loc_62B99ADC
		mov	eax, [edx]
		mov	[esp+138h+Str2], eax
		mov	ecx, [ebp+var_70]
		mov	[esp+138h+Str1], ecx
		call	silc_client_on_channel
		test	eax, eax
		mov	edx, [ebp+var_AC]
		jz	short loc_62B99ADC

loc_62B99A63:				; CODE XREF: silc_client_command_join+E0j
					; silc_client_command_join+8F0j
		mov	ecx, [ebp+var_70]
		mov	[esp+138h+var_130], ecx
		mov	[esp+138h+Str2], edx
		mov	esi, [ebp+var_6C]
		mov	[esp+138h+Str1], esi
		call	silc_client_unref_channel
		mov	eax, 3

loc_62B99A7E:				; CODE XREF: silc_client_command_join+17Bj
					; silc_client_command_join+7B2j
		add	esp, 12Ch
		pop	ebx
		pop	esi
		pop	edi
		leave
		retn
; ---------------------------------------------------------------------------
		align 4

loc_62B99A8C:				; CODE XREF: silc_client_command_join+1Ej
		mov	esi, [ebp+var_6C]
		mov	ecx, [esi+18h]
		mov	ecx, [ecx+48h]
		mov	esi, [ebx+3Ch]
		mov	[esp+138h+var_120], esi
		mov	[esp+138h+var_124], eax
		mov	[esp+138h+var_128], 1Dh
		movzx	eax, byte ptr [ebx+34h]
		mov	[esp+138h+var_12C], eax
		mov	[esp+138h+var_130], 0
		mov	[esp+138h+Str2], edx
		mov	edi, [ebp+var_6C]
		mov	[esp+138h+Str1], edi
		mov	[ebp+var_AC], edx
		call	dword ptr [ecx+10h]
		mov	[ebp+var_70], 0
		mov	edx, [ebp+var_AC]
		jmp	short loc_62B99A63
; ---------------------------------------------------------------------------
		align 4

loc_62B99ADC:				; CODE XREF: silc_client_command_join+4Aj
					; silc_client_command_join+69j
		mov	eax, [edx+54h]
		mov	eax, [eax+0B8h]
		mov	[esp+138h+Str1], eax
		mov	[ebp+var_AC], edx
		call	silc_mutex_lock
		mov	edx, [ebp+var_AC]
		mov	eax, [edx+54h]
		mov	ecx, [eax+0D8h]
		mov	[eax+0E0h], ecx
		and	byte ptr [eax+0E8h], 0FDh
		mov	eax, [edx+54h]
		xchg	ax, ax

loc_62B99B14:				; CODE XREF: silc_client_command_join+143j
		mov	ecx, [eax+0E0h]
		test	ecx, ecx
		jz	short loc_62B99B84
		test	byte ptr [eax+0E8h], 2
		jz	short loc_62B99B78
		movzx	esi, word ptr [eax+0E6h]
		mov	esi, [ecx+esi]

loc_62B99B31:				; CODE XREF: silc_client_command_join+18Aj
		mov	[eax+0E0h], esi
		cmp	byte ptr [ecx+34h], 4
		jnz	short loc_62B99B14
		mov	eax, [eax+0B8h]
		mov	[esp+138h+Str1], eax
		call	silc_mutex_unlock
		mov	[esp+138h+var_12C], 493E0h
		mov	[esp+138h+var_130], 0
		mov	[esp+138h+Str2], offset	silc_client_command_join
		mov	esi, [ebp+arg_0]
		mov	[esp+138h+Str1], esi
		call	silc_fsm_next_later
		mov	eax, 2
		jmp	loc_62B99A7E
; ---------------------------------------------------------------------------

loc_62B99B78:				; CODE XREF: silc_client_command_join+12Dj
		movzx	esi, word ptr [eax+0E4h]
		mov	esi, [ecx+esi]
		jmp	short loc_62B99B31
; ---------------------------------------------------------------------------

loc_62B99B84:				; CODE XREF: silc_client_command_join+124j
		mov	eax, [eax+0B8h]
		mov	[esp+138h+Str1], eax
		mov	[ebp+var_AC], edx
		call	silc_mutex_unlock
		mov	eax, [ebx+40h]
		cmp	dword ptr [eax+4], 100h
		mov	edx, [ebp+var_AC]
		jbe	short loc_62B99BB1
		mov	dword ptr [eax+4], 100h

loc_62B99BB1:				; CODE XREF: silc_client_command_join+1B0j
		mov	eax, [ebx+3Ch]
		mov	edi, [eax+4]
		mov	[ebp+var_94], edi
		cmp	dword ptr [ebx+38h], 2
		jbe	loc_62B9A1E4
		mov	[ebp+var_74], 2
		mov	[ebp+var_90], 0
		mov	esi, 2
		mov	[ebp+var_84], 0
		mov	[ebp+var_7C], 0
		mov	[ebp+var_8C], 0
		mov	[ebp+var_88], 0
		mov	[ebp+var_80], 0
		lea	ecx, [ebp+var_64]
		mov	[ebp+var_BC], ecx
		mov	[ebp+var_78], edx
		jmp	short loc_62B99C34
; ---------------------------------------------------------------------------
		align 4

loc_62B99C18:				; CODE XREF: silc_client_command_join+265j
		mov	ecx, [ebx+3Ch]
		mov	edx, [ecx+edx*4]
		mov	[ebp+var_7C], edx
		lea	edx, [esi+2]

loc_62B99C24:				; CODE XREF: silc_client_command_join+2A1j
					; silc_client_command_join+311j ...
		mov	esi, edx
		mov	[ebp+var_74], edx
		cmp	edx, eax
		jnb	loc_62B99F40
		mov	eax, [ebx+3Ch]

loc_62B99C34:				; CODE XREF: silc_client_command_join+21Dj
		mov	edi, [ebp+var_74]
		shl	edi, 2
		mov	[esp+138h+Str2], offset	aCipher	; "-cipher"
		mov	eax, [eax+edi]
		mov	[esp+138h+Str1], eax ; Str1
		call	_stricmp
		test	eax, eax
		jnz	loc_62B99D10
		mov	eax, [ebx+38h]
		lea	edx, [esi+1]
		cmp	eax, edx
		ja	short loc_62B99C18

loc_62B99C5F:				; CODE XREF: silc_client_command_join+31Bj
		mov	[esp+138h+Str2], offset	aHmac ;	"-hmac"
		mov	eax, [ebx+3Ch]
		mov	eax, [eax+edi]
		mov	[esp+138h+Str1], eax ; Str1
		mov	[ebp+var_AC], edx
		call	_stricmp
		test	eax, eax
		mov	edx, [ebp+var_AC]
		jnz	short loc_62B99C9C
		mov	eax, [ebx+38h]
		cmp	eax, edx
		jbe	short loc_62B99C9C
		mov	ecx, [ebx+3Ch]
		mov	ecx, [ecx+edx*4]
		mov	[ebp+var_84], ecx
		inc	edx
		jmp	short loc_62B99C24
; ---------------------------------------------------------------------------
		align 4

loc_62B99C9C:				; CODE XREF: silc_client_command_join+28Bj
					; silc_client_command_join+292j
		mov	[esp+138h+Str2], offset	aFounder ; "-founder"
		mov	eax, [ebx+3Ch]
		mov	eax, [eax+edi]
		mov	[esp+138h+Str1], eax ; Str1
		mov	[ebp+var_AC], edx
		call	_stricmp
		test	eax, eax
		mov	edx, [ebp+var_AC]
		jnz	short loc_62B99D18
		mov	[esp+138h+var_124], 2
		mov	esi, [ebp+var_78]
		mov	eax, [esi+4]
		mov	[esp+138h+var_128], eax
		mov	eax, [esi+54h]
		mov	eax, [eax+0F0h]
		mov	[esp+138h+var_12C], eax
		mov	eax, [esi+4Ch]
		mov	eax, [eax+10h]
		mov	[esp+138h+var_130], eax
		mov	eax, [esi+38h]
		mov	[esp+138h+Str2], eax
		mov	eax, [esi+34h]
		mov	[esp+138h+Str1], eax
		call	silc_auth_public_key_auth_generate
		mov	[ebp+var_80], eax
		mov	eax, [ebx+38h]
		mov	edx, [ebp+var_AC]
		jmp	loc_62B99C24
; ---------------------------------------------------------------------------
		align 10h

loc_62B99D10:				; CODE XREF: silc_client_command_join+257j
		lea	edx, [esi+1]
		jmp	loc_62B99C5F
; ---------------------------------------------------------------------------

loc_62B99D18:				; CODE XREF: silc_client_command_join+2C8j
		mov	[esp+138h+Str2], offset	aAuth ;	"-auth"
		mov	eax, [ebx+3Ch]
		mov	eax, [eax+edi]
		mov	[esp+138h+Str1], eax ; Str1
		mov	[ebp+var_AC], edx
		call	_stricmp
		test	eax, eax
		mov	edx, [ebp+var_AC]
		jnz	loc_62B99E7C
		mov	edi, [ebp+var_78]
		mov	eax, [edi+34h]
		mov	[ebp+var_1C], eax
		mov	ecx, [edi+38h]
		mov	[ebp+var_20], ecx
		mov	ecx, [ebx+38h]
		lea	edi, [esi+3]
		cmp	ecx, edi
		jb	short loc_62B99DA1
		lea	eax, [esi+4]
		cmp	ecx, eax
		jnb	loc_62B99F2C
		mov	eax, [ebx+3Ch]
		mov	ecx, offset byte_62BA8AE3

loc_62B99D6E:				; CODE XREF: silc_client_command_join+541j
		lea	edi, [ebp+var_20]
		mov	[esp+138h+var_128], edi
		lea	edi, [ebp+var_1C]
		mov	[esp+138h+var_12C], edi
		mov	[esp+138h+var_130], ecx
		mov	ecx, [eax+esi*4+8]
		mov	[esp+138h+Str2], ecx
		mov	eax, [eax+edx*4]
		mov	[esp+138h+Str1], eax
		call	silc_load_key_pair
		test	al, al
		jz	loc_62B9A275
		mov	eax, [ebp+var_1C]
		lea	edx, [esi+3]

loc_62B99DA1:				; CODE XREF: silc_client_command_join+361j
		lea	ecx, [ebp+var_24]
		mov	[esp+138h+Str2], ecx
		mov	[esp+138h+Str1], eax
		mov	[ebp+var_AC], edx
		call	silc_pkcs_public_key_encode
		mov	esi, eax
		lea	edi, [ebp+var_64]
		mov	[esp+138h+var_12C], edi
		mov	eax, [ebp+var_24]
		mov	[esp+138h+var_130], eax
		mov	[esp+138h+Str2], esi
		mov	ecx, [ebp+var_78]
		mov	eax, [ecx+54h]
		mov	eax, [eax+0F0h]
		mov	[esp+138h+Str1], eax
		call	silc_hash_make
		mov	[esp+138h+Str1], esi
		call	silc_free
		mov	[esp+138h+Str2], 80h
		mov	esi, [ebp+var_78]
		mov	eax, [esi+4Ch]
		mov	eax, [eax+10h]
		mov	[esp+138h+Str1], eax
		call	silc_rng_get_rn_data
		mov	[ebp+var_74], eax
		mov	edi, eax
		mov	esi, [ebp+var_BC]
		mov	ecx, 5
		rep movsd
		mov	[esp+138h+var_120], 2
		mov	edi, [ebp+var_78]
		mov	eax, [edi+4]
		mov	[esp+138h+var_124], eax
		mov	eax, [edi+54h]
		mov	eax, [eax+0F0h]
		mov	[esp+138h+var_128], eax
		mov	[esp+138h+var_12C], 80h
		mov	eax, [ebp+var_74]
		mov	[esp+138h+var_130], eax
		mov	eax, [ebp+var_20]
		mov	[esp+138h+Str2], eax
		mov	eax, [ebp+var_1C]
		mov	[esp+138h+Str1], eax
		call	silc_auth_public_key_auth_generate_wpub
		mov	[ebp+var_88], eax
		mov	ecx, 80h
		xor	eax, eax
		mov	edi, [ebp+var_74]
		rep stosb
		mov	ecx, [ebp+var_74]
		mov	[esp+138h+Str1], ecx
		call	silc_free
		mov	eax, [ebx+38h]
		mov	edx, [ebp+var_AC]
		jmp	loc_62B99C24
; ---------------------------------------------------------------------------

loc_62B99E7C:				; CODE XREF: silc_client_command_join+344j
		mov	eax, [ebx+40h]
		mov	eax, [eax+edi]
		mov	[esp+138h+Str2], eax
		mov	eax, [ebx+3Ch]
		mov	eax, [eax+edi]
		mov	[esp+138h+Str1], eax
		mov	[ebp+var_AC], edx
		call	silc_utf8_valid
		test	al, al
		mov	edx, [ebp+var_AC]
		jnz	loc_62B9A1B0
		mov	[esp+138h+var_130], 0
		mov	eax, [ebx+40h]
		mov	eax, [eax+edi]
		mov	[esp+138h+Str2], eax
		mov	eax, [ebx+3Ch]
		mov	eax, [eax+edi]
		mov	[esp+138h+Str1], eax
		call	silc_utf8_encoded_len
		mov	esi, eax
		mov	[esp+138h+Str2], 1
		mov	[esp+138h+Str1], eax
		call	silc_calloc
		mov	ecx, eax
		mov	[esp+138h+var_128], esi
		mov	[esp+138h+var_12C], eax
		mov	[esp+138h+var_130], 0
		mov	eax, [ebx+40h]
		mov	eax, [eax+edi]
		mov	[esp+138h+Str2], eax
		mov	eax, [ebx+3Ch]
		mov	eax, [eax+edi]
		mov	[esp+138h+Str1], eax
		mov	[ebp+var_B0], ecx
		call	silc_utf8_encode
		mov	[ebp+var_90], eax
		mov	eax, [ebx+38h]
		mov	ecx, [ebp+var_B0]
		mov	[ebp+var_8C], ecx
		mov	edx, [ebp+var_AC]
		jmp	loc_62B99C24
; ---------------------------------------------------------------------------
		align 4

loc_62B99F2C:				; CODE XREF: silc_client_command_join+368j
		mov	eax, [ebx+3Ch]
		mov	esi, [ebp+var_74]
		mov	ecx, [eax+esi*4+0Ch]
		mov	esi, edx
		inc	edx
		jmp	loc_62B99D6E
; ---------------------------------------------------------------------------
		align 10h

loc_62B99F40:				; CODE XREF: silc_client_command_join+233j
		mov	edx, [ebp+var_78]
		mov	esi, [ebp+var_88]
		test	esi, esi
		jz	loc_62B9A210
		mov	esi, [ebp+var_88]
		mov	esi, [esi+4]
		mov	[ebp+var_A0], esi
		mov	edi, [ebp+var_88]
		mov	edi, [edi+8]
		sub	edi, esi
		mov	[ebp+var_78], edi

loc_62B99F6E:				; CODE XREF: silc_client_command_join+833j
		mov	ecx, [ebp+var_80]
		test	ecx, ecx
		jz	loc_62B9A25F
		mov	eax, [ebp+var_80]
		mov	eax, [eax+4]
		mov	[ebp+var_9C], eax
		mov	ecx, [ebp+var_80]
		mov	ecx, [ecx+8]
		sub	ecx, eax
		mov	[ebp+var_74], ecx

loc_62B99F90:				; CODE XREF: silc_client_command_join+878j
		mov	eax, [ebp+var_84]
		test	eax, eax
		jz	loc_62B9A250
		xor	eax, eax
		mov	ecx, 0FFFFFFFFh
		mov	edi, [ebp+var_84]
		repne scasb
		not	ecx
		dec	ecx
		mov	[ebp+var_A8], ecx

loc_62B99FB6:				; CODE XREF: silc_client_command_join+862j
		mov	edi, [ebp+var_7C]
		test	edi, edi
		jz	loc_62B9A241
		xor	eax, eax
		mov	ecx, 0FFFFFFFFh
		mov	edi, [ebp+var_7C]
		repne scasb
		not	ecx
		dec	ecx
		mov	[ebp+var_A4], ecx

loc_62B99FD6:				; CODE XREF: silc_client_command_join+853j
		mov	eax, [edx+54h]
		mov	eax, [eax+0F4h]
		test	eax, eax
		jz	loc_62B9A230
		mov	esi, [eax+4]
		mov	[ebp+var_98], esi
		mov	esi, [eax+8]
		sub	esi, [ebp+var_98]

loc_62B99FF9:				; CODE XREF: silc_client_command_join+844j
		mov	ecx, 0FFFFFFFFh
		mov	edi, [ebp+var_94]
		xor	eax, eax
		repne scasb
		not	ecx
		dec	ecx
		mov	edi, [ebp+var_78]
		mov	[esp+138h+var_D0], edi
		mov	eax, [ebp+var_A0]
		mov	[esp+138h+var_D4], eax
		mov	[esp+138h+var_D8], 7
		mov	edi, [ebp+var_74]
		mov	[esp+138h+var_DC], edi
		mov	eax, [ebp+var_9C]
		mov	[esp+138h+var_E0], eax
		mov	[esp+138h+var_E4], 6
		mov	edi, [ebp+var_A8]
		mov	[esp+138h+var_E8], edi
		mov	eax, [ebp+var_84]
		mov	[esp+138h+var_EC], eax
		mov	[esp+138h+var_F0], 5
		mov	edi, [ebp+var_A4]
		mov	[esp+138h+var_F4], edi
		mov	eax, [ebp+var_7C]
		mov	[esp+138h+var_F8], eax
		mov	[esp+138h+var_FC], 4
		mov	edi, [ebp+var_90]
		mov	[esp+138h+var_100], edi
		mov	eax, [ebp+var_8C]
		mov	[esp+138h+var_104], eax
		mov	[esp+138h+var_108], 3
		mov	[esp+138h+var_10C], esi
		mov	esi, [ebp+var_98]
		mov	[esp+138h+var_110], esi
		mov	[esp+138h+var_114], 2
		mov	[esp+138h+var_118], ecx
		mov	edi, [ebp+var_94]
		mov	[esp+138h+var_11C], edi
		mov	[esp+138h+var_120], 1
		mov	[esp+138h+var_124], 7
		mov	[esp+138h+var_128], 0
		mov	[esp+138h+var_12C], 0
		movzx	eax, byte ptr [ebx+34h]
		mov	[esp+138h+var_130], eax
		mov	[esp+138h+Str2], ebx
		mov	[esp+138h+Str1], edx
		mov	[ebp+var_AC], edx
		call	sub_62B95C0C
		mov	eax, [ebp+var_80]
		call	sub_62B949E8
		mov	eax, [ebp+var_88]
		call	sub_62B949E8
		mov	esi, [ebp+var_8C]
		test	esi, esi
		mov	edx, [ebp+var_AC]
		jz	short loc_62B9A129
		mov	ecx, 0FFFFFFFFh
		mov	edi, [ebp+var_8C]
		xor	eax, eax
		repne scasb
		not	ecx
		dec	ecx
		mov	edi, [ebp+var_8C]
		rep stosb

loc_62B9A129:				; CODE XREF: silc_client_command_join+715j
		mov	ecx, [ebp+var_8C]
		mov	[esp+138h+Str1], ecx
		mov	[ebp+var_AC], edx
		call	silc_free
		mov	esi, [ebp+var_70]
		mov	[esp+138h+var_130], esi
		mov	edx, [ebp+var_AC]
		mov	[esp+138h+Str2], edx
		mov	edi, [ebp+var_6C]
		mov	[esp+138h+Str1], edi
		call	silc_client_unref_channel
		mov	edx, [ebx+4]
		mov	eax, [edx+4Ch]
		mov	ecx, [eax+18h]
		mov	ecx, [ecx+48h]
		mov	esi, [ebx+3Ch]
		mov	[esp+138h+var_120], esi
		mov	esi, [ebx+38h]
		mov	[esp+138h+var_124], esi
		mov	[esp+138h+var_128], 0
		movzx	ebx, byte ptr [ebx+34h]
		mov	[esp+138h+var_12C], ebx
		mov	[esp+138h+var_130], 1
		mov	[esp+138h+Str2], edx
		mov	[esp+138h+Str1], eax
		call	dword ptr [ecx+10h]
		mov	[esp+138h+Str2], offset	silc_client_command_reply_wait
		mov	eax, [ebp+arg_0]
		mov	[esp+138h+Str1], eax
		call	silc_fsm_next
		xor	eax, eax
		jmp	loc_62B99A7E
; ---------------------------------------------------------------------------
		align 10h

loc_62B9A1B0:				; CODE XREF: silc_client_command_join+4AAj
		mov	eax, [ebx+3Ch]
		mov	eax, [eax+edi]
		mov	[esp+138h+Str1], eax ; Src
		mov	[ebp+var_AC], edx
		call	_strdup
		mov	[ebp+var_8C], eax
		mov	eax, [ebx+40h]
		mov	eax, [eax+edi]
		mov	[ebp+var_90], eax
		mov	eax, [ebx+38h]
		mov	edx, [ebp+var_AC]
		jmp	loc_62B99C24
; ---------------------------------------------------------------------------

loc_62B9A1E4:				; CODE XREF: silc_client_command_join+1C9j
		mov	[ebp+var_80], 0
		mov	[ebp+var_7C], 0
		mov	[ebp+var_8C], 0
		mov	[ebp+var_90], 0
		mov	[ebp+var_84], 0

loc_62B9A210:				; CODE XREF: silc_client_command_join+553j
		mov	[ebp+var_88], 0
		mov	[ebp+var_78], 0
		mov	[ebp+var_A0], 0
		jmp	loc_62B99F6E
; ---------------------------------------------------------------------------

loc_62B9A230:				; CODE XREF: silc_client_command_join+5E9j
		xor	esi, esi
		mov	[ebp+var_98], 0
		jmp	loc_62B99FF9
; ---------------------------------------------------------------------------

loc_62B9A241:				; CODE XREF: silc_client_command_join+5C3j
		mov	[ebp+var_A4], 0
		jmp	loc_62B99FD6
; ---------------------------------------------------------------------------

loc_62B9A250:				; CODE XREF: silc_client_command_join+5A0j
		mov	[ebp+var_A8], 0
		jmp	loc_62B99FB6
; ---------------------------------------------------------------------------

loc_62B9A25F:				; CODE XREF: silc_client_command_join+57Bj
		mov	[ebp+var_74], 0
		mov	[ebp+var_9C], 0
		jmp	loc_62B99F90
; ---------------------------------------------------------------------------

loc_62B9A275:				; CODE XREF: silc_client_command_join+39Dj
		mov	edx, [ebp+var_78]
		mov	eax, [ebx+4]
		mov	eax, [eax+4Ch]
		mov	eax, [eax+18h]
		mov	eax, [eax+48h]
		mov	[esp+138h+var_12C], offset aCouldNotLoadKe ; "Could not	load key pair, check your arg"...
		mov	[esp+138h+var_130], 3
		mov	[esp+138h+Str2], edx
		mov	ecx, [edx+4Ch]
		mov	[esp+138h+Str1], ecx
		mov	[ebp+var_AC], edx
		call	dword ptr [eax]
		mov	esi, [ebx+4]
		mov	eax, [esi+4Ch]
		mov	ecx, [eax+18h]
		mov	edi, [ecx+48h]
		mov	ecx, [ebx+3Ch]
		mov	[esp+138h+var_120], ecx
		mov	ecx, [ebx+38h]
		mov	[esp+138h+var_124], ecx
		mov	[esp+138h+var_128], 1Dh
		movzx	ecx, byte ptr [ebx+34h]
		mov	[esp+138h+var_12C], ecx
		mov	[esp+138h+var_130], 0
		mov	[esp+138h+Str2], esi
		mov	[esp+138h+Str1], eax
		call	dword ptr [edi+10h]
		mov	edx, [ebp+var_AC]
		jmp	loc_62B99A63
silc_client_command_join endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  45. silc_client_command_ping

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public silc_client_command_ping
silc_client_command_ping proc near	; DATA XREF: silc_client_commands_unregister+7D5o
					; silc_client_commands_register+558o

var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		sub	esp, 3Ch
		mov	ebx, [ebp+arg_4]
		mov	eax, [ebx+4]
		mov	edx, [ebx+38h]
		cmp	edx, 1
		jbe	loc_62B9A3C4
		mov	edx, [eax+54h]
		mov	edx, [edx+0F8h]
		test	edx, edx
		jz	loc_62B9A408
		mov	ecx, [edx+4]
		mov	edx, [edx+8]
		sub	edx, ecx

loc_62B9A324:				; CODE XREF: silc_client_command_ping+11Aj
		mov	[esp+48h+var_28], edx
		mov	[esp+48h+var_2C], ecx
		mov	[esp+48h+var_30], 1
		mov	[esp+48h+var_34], 1
		mov	[esp+48h+var_38], 0
		mov	[esp+48h+var_3C], 0
		movzx	edx, byte ptr [ebx+34h]
		mov	[esp+48h+var_40], edx
		mov	[esp+48h+var_44], ebx
		mov	[esp+48h+var_48], eax
		call	sub_62B95C0C
		call	silc_time
		mov	[ebx+60h], eax
		mov	edx, [ebx+4]
		mov	eax, [edx+4Ch]
		mov	ecx, [eax+18h]
		mov	ecx, [ecx+48h]
		mov	esi, [ebx+3Ch]
		mov	[esp+48h+var_30], esi
		mov	esi, [ebx+38h]
		mov	[esp+48h+var_34], esi
		mov	[esp+48h+var_38], 0
		movzx	ebx, byte ptr [ebx+34h]
		mov	[esp+48h+var_3C], ebx
		mov	[esp+48h+var_40], 1
		mov	[esp+48h+var_44], edx
		mov	[esp+48h+var_48], eax
		call	dword ptr [ecx+10h]
		mov	[esp+48h+var_44], offset silc_client_command_reply_wait
		mov	eax, [ebp+arg_0]
		mov	[esp+48h+var_48], eax
		call	silc_fsm_next
		xor	eax, eax
		add	esp, 3Ch
		pop	ebx
		pop	esi
		pop	edi
		leave
		retn
; ---------------------------------------------------------------------------
		align 4

loc_62B9A3C4:				; CODE XREF: silc_client_command_ping+15j
		mov	ecx, [eax+4Ch]
		mov	esi, [ecx+18h]
		mov	esi, [esi+48h]
		mov	edi, [ebx+3Ch]
		mov	[esp+48h+var_30], edi
		mov	[esp+48h+var_34], edx
		mov	[esp+48h+var_38], 1Dh
		movzx	edx, byte ptr [ebx+34h]
		mov	[esp+48h+var_3C], edx
		mov	[esp+48h+var_40], 0
		mov	[esp+48h+var_44], eax
		mov	[esp+48h+var_48], ecx
		call	dword ptr [esi+10h]
		mov	eax, 3
		add	esp, 3Ch
		pop	ebx
		pop	esi
		pop	edi
		leave
		retn
; ---------------------------------------------------------------------------
		align 4

loc_62B9A408:				; CODE XREF: silc_client_command_ping+26j
		xor	ecx, ecx
		jmp	loc_62B9A324
silc_client_command_ping endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  46. silc_client_command_quit

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public silc_client_command_quit
silc_client_command_quit proc near	; DATA XREF: silc_client_commands_unregister+515o
					; silc_client_commands_register+36Co

dwMilliseconds	= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 38h
		mov	eax, [ebp+arg_4]
		mov	edx, [eax+4]
		cmp	dword ptr [eax+38h], 1
		jbe	loc_62B9A4A8
		mov	ecx, [eax+40h]
		mov	ecx, [ecx+4]
		mov	[esp+38h+var_18], ecx
		mov	ecx, [eax+3Ch]
		mov	ecx, [ecx+4]
		mov	[esp+38h+var_1C], ecx
		mov	[esp+38h+var_20], 1
		mov	[esp+38h+var_24], 1
		mov	[esp+38h+var_28], 0
		mov	[esp+38h+var_2C], 0
		movzx	ecx, byte ptr [eax+34h]
		mov	[esp+38h+var_30], ecx
		mov	[esp+38h+var_34], eax
		mov	[esp+38h+dwMilliseconds], edx
		call	sub_62B95C0C

loc_62B9A46E:				; CODE XREF: silc_client_command_quit+C4j
		mov	[esp+38h+dwMilliseconds], 3E8h ; dwMilliseconds
		call	Sleep
		push	eax
		mov	[esp+38h+var_2C], 0
		mov	[esp+38h+var_30], 2
		mov	[esp+38h+var_34], offset silc_client_command_quit_final
		mov	eax, [ebp+arg_0]
		mov	[esp+38h+dwMilliseconds], eax
		call	silc_fsm_next_later
		mov	eax, 2
		leave
		retn
; ---------------------------------------------------------------------------
		align 4

loc_62B9A4A8:				; CODE XREF: silc_client_command_quit+10j
		mov	[esp+38h+var_24], 0
		mov	[esp+38h+var_28], 0
		mov	[esp+38h+var_2C], 0
		movzx	ecx, byte ptr [eax+34h]
		mov	[esp+38h+var_30], ecx
		mov	[esp+38h+var_34], eax
		mov	[esp+38h+dwMilliseconds], edx
		call	sub_62B95C0C
		jmp	short loc_62B9A46E
silc_client_command_quit endp

; ---------------------------------------------------------------------------
		align 4
; Exported entry  41. silc_client_command_nick

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public silc_client_command_nick
silc_client_command_nick proc near	; DATA XREF: silc_client_command_nick+1A7o
					; silc_client_commands_unregister+255o	...

var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		sub	esp, 3Ch
		mov	edi, [ebp+arg_0]
		mov	ebx, [ebp+arg_4]
		mov	esi, [ebx+4]
		cmp	dword ptr [ebx+38h], 1
		jbe	loc_62B9A5A0
		mov	eax, [ebx+3Ch]
		mov	eax, [eax+4]
		mov	[esp+48h+var_44], eax
		mov	eax, [esi]
		mov	[esp+48h+var_48], eax
		call	silc_utf8_strcasecmp
		test	al, al
		jnz	loc_62B9A593
		cmp	dword ptr [ebx+38h], 1
		ja	loc_62B9A60C
		mov	eax, [ebx+4]
		test	eax, eax
		jz	loc_62B9A764
		mov	eax, [eax+4Ch]
		mov	eax, [eax+18h]
		mov	eax, [eax+48h]
		mov	edx, [esi+8]
		mov	[esp+48h+var_34], edx
		mov	edx, [esi]
		mov	[esp+48h+var_38], edx
		mov	[esp+48h+var_3C], offset aYourNicknameIs ; "Your nickname is %s	on server %s"
		mov	[esp+48h+var_40], 0
		mov	[esp+48h+var_44], esi
		mov	edx, [esi+4Ch]
		mov	[esp+48h+var_48], edx
		call	dword ptr [eax]

loc_62B9A557:				; CODE XREF: silc_client_command_nick+2B7j
		mov	edx, [ebx+4]
		mov	eax, [edx+4Ch]
		mov	ecx, [eax+18h]
		mov	ecx, [ecx+48h]
		mov	esi, [ebx+3Ch]
		mov	[esp+48h+var_30], esi
		mov	esi, [ebx+38h]
		mov	[esp+48h+var_34], esi
		mov	[esp+48h+var_38], 0
		movzx	ebx, byte ptr [ebx+34h]
		mov	[esp+48h+var_3C], ebx
		mov	[esp+48h+var_40], 1
		mov	[esp+48h+var_44], edx
		mov	[esp+48h+var_48], eax
		call	dword ptr [ecx+10h]

loc_62B9A593:				; CODE XREF: silc_client_command_nick+32j
		mov	eax, 3

loc_62B9A598:				; CODE XREF: silc_client_command_nick+287j
		add	esp, 3Ch
		pop	ebx
		pop	esi
		pop	edi
		leave
		retn
; ---------------------------------------------------------------------------

loc_62B9A5A0:				; CODE XREF: silc_client_command_nick+16j
		mov	eax, [esi+4Ch]
		mov	edx, [eax+18h]
		mov	edx, [edx+48h]
		mov	[esp+48h+var_3C], offset aUsageNickNickn ; "Usage: /NICK <nickname>"
		mov	[esp+48h+var_40], 0
		mov	[esp+48h+var_44], esi
		mov	[esp+48h+var_48], eax
		call	dword ptr [edx]
		mov	edx, [ebx+4]
		mov	eax, [edx+4Ch]
		mov	ecx, [eax+18h]
		mov	ecx, [ecx+48h]
		mov	esi, [ebx+3Ch]
		mov	[esp+44h+var_2C], esi
		mov	esi, [ebx+38h]
		mov	[esp+44h+var_30], esi
		mov	[esp+44h+var_34], 1Dh
		movzx	ebx, byte ptr [ebx+34h]
		mov	[esp+44h+var_38], ebx
		mov	[esp+44h+var_3C], 0
		mov	[esp+44h+var_40], edx
		mov	[esp+44h+var_44], eax
		call	dword ptr [ecx+10h]
		mov	eax, 3
		add	esp, 3Ch
		pop	ebx
		pop	esi
		pop	edi
		leave
		retn
; ---------------------------------------------------------------------------
		align 4

loc_62B9A60C:				; CODE XREF: silc_client_command_nick+3Cj
		mov	eax, [esi+54h]
		mov	eax, [eax+0B8h]
		mov	[esp+48h+var_48], eax
		call	silc_mutex_lock
		mov	eax, [esi+54h]
		mov	edx, [eax+0D8h]
		mov	[eax+0E0h], edx
		and	byte ptr [eax+0E8h], 0FDh
		mov	eax, [esi+54h]
		xchg	ax, ax

loc_62B9A638:				; CODE XREF: silc_client_command_nick+187j
		mov	edx, [eax+0E0h]
		test	edx, edx
		jz	short loc_62B9A6A8
		test	byte ptr [eax+0E8h], 2
		jz	short loc_62B9A69C
		movzx	ecx, word ptr [eax+0E6h]
		mov	ecx, [edx+ecx]

loc_62B9A655:				; CODE XREF: silc_client_command_nick+1CEj
		mov	[eax+0E0h], ecx
		cmp	byte ptr [edx+34h], 0Eh
		jnz	short loc_62B9A638
		mov	eax, [eax+0B8h]
		mov	[esp+48h+var_48], eax
		call	silc_mutex_unlock
		mov	[esp+44h+var_38], 493E0h
		mov	[esp+44h+var_3C], 0
		mov	[esp+44h+var_40], offset silc_client_command_nick
		mov	[esp+44h+var_44], edi
		call	silc_fsm_next_later
		mov	eax, 2
		add	esp, 3Ch
		pop	ebx
		pop	esi
		pop	edi
		leave
		retn
; ---------------------------------------------------------------------------

loc_62B9A69C:				; CODE XREF: silc_client_command_nick+171j
		movzx	ecx, word ptr [eax+0E4h]
		mov	ecx, [edx+ecx]
		jmp	short loc_62B9A655
; ---------------------------------------------------------------------------

loc_62B9A6A8:				; CODE XREF: silc_client_command_nick+168j
		mov	eax, [eax+0B8h]
		mov	[esp+48h+var_48], eax
		call	silc_mutex_unlock
		mov	edx, [ebx+40h]
		mov	eax, [edx+4]
		cmp	eax, 80h
		jbe	short loc_62B9A6CF
		mov	dword ptr [edx+4], 80h
		mov	eax, 80h

loc_62B9A6CF:				; CODE XREF: silc_client_command_nick+1E9j
		mov	[esp+48h+var_28], eax
		mov	eax, [ebx+3Ch]
		mov	eax, [eax+4]
		mov	[esp+48h+var_2C], eax
		mov	[esp+48h+var_30], 1
		mov	[esp+48h+var_34], 1
		mov	[esp+48h+var_38], 0
		mov	[esp+48h+var_3C], 0
		movzx	eax, byte ptr [ebx+34h]
		mov	[esp+48h+var_40], eax
		mov	[esp+48h+var_44], ebx
		mov	[esp+48h+var_48], esi
		call	sub_62B95C0C
		mov	edx, [ebx+4]
		mov	eax, [edx+4Ch]
		mov	ecx, [eax+18h]
		mov	ecx, [ecx+48h]
		mov	esi, [ebx+3Ch]
		mov	[esp+48h+var_30], esi
		mov	esi, [ebx+38h]
		mov	[esp+48h+var_34], esi
		mov	[esp+48h+var_38], 0
		movzx	ebx, byte ptr [ebx+34h]
		mov	[esp+48h+var_3C], ebx
		mov	[esp+48h+var_40], 1
		mov	[esp+48h+var_44], edx
		mov	[esp+48h+var_48], eax
		call	dword ptr [ecx+10h]
		mov	[esp+48h+var_44], offset silc_client_command_reply_wait
		mov	[esp+48h+var_48], edi
		call	silc_fsm_next
		xor	eax, eax
		jmp	loc_62B9A598
; ---------------------------------------------------------------------------

loc_62B9A764:				; CODE XREF: silc_client_command_nick+47j
		mov	eax, [eax+4Ch]
		mov	eax, [eax+18h]
		mov	eax, [eax+48h]
		mov	edx, [esi]
		mov	[esp+48h+var_38], edx
		mov	[esp+48h+var_3C], offset aYourNickname_0 ; "Your nickname is %s"
		mov	[esp+48h+var_40], 0
		mov	[esp+48h+var_44], esi
		mov	edx, [esi+4Ch]
		mov	[esp+48h+var_48], edx
		call	dword ptr [eax]
		jmp	loc_62B9A557
silc_client_command_nick endp

; Exported entry  90. silc_client_command_whois

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public silc_client_command_whois
silc_client_command_whois proc near	; DATA XREF: silc_client_commands_unregister+45o
					; silc_client_commands_register+62o

Str1		= dword	ptr -0A8h
Str2		= dword	ptr -0A4h
var_A0		= dword	ptr -0A0h
var_9C		= dword	ptr -9Ch
var_98		= dword	ptr -98h
var_94		= dword	ptr -94h
var_90		= dword	ptr -90h
var_8C		= dword	ptr -8Ch
var_88		= dword	ptr -88h
var_84		= dword	ptr -84h
var_80		= dword	ptr -80h
var_7C		= dword	ptr -7Ch
var_78		= dword	ptr -78h
var_74		= dword	ptr -74h
var_70		= dword	ptr -70h
var_5C		= dword	ptr -5Ch
var_58		= dword	ptr -58h
var_54		= dword	ptr -54h
var_50		= dword	ptr -50h
var_49		= byte ptr -49h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_3C		= dword	ptr -3Ch
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= byte ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= byte ptr -1Ch
var_1B		= byte ptr -1Bh
var_1A		= byte ptr -1Ah
var_19		= byte ptr -19h
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		sub	esp, 9Ch
		mov	ebx, [ebp+arg_4]
		mov	eax, [ebx+4]
		mov	[ebp+var_44], eax
		mov	edx, [eax+4Ch]
		mov	[ebp+var_54], edx
		mov	[ebp+var_20], 0
		cmp	dword ptr [ebx+38h], 1
		jbe	loc_62B9ABF6
		mov	edi, 1
		mov	esi, 1
		mov	[ebp+var_40], 0
		mov	[ebp+var_49], 0
		mov	byte ptr [ebp+var_3C], 0
		mov	[ebp+var_50], 0
		jmp	short loc_62B9A7F2
; ---------------------------------------------------------------------------
		align 4

loc_62B9A7E4:				; CODE XREF: silc_client_command_whois+83j
		inc	esi
		mov	edi, esi
		mov	eax, [ebx+38h]
		mov	byte ptr [ebp+var_3C], 1

loc_62B9A7EE:				; CODE XREF: silc_client_command_whois+1FEj
					; silc_client_command_whois+214j ...
		cmp	eax, edi
		jbe	short loc_62B9A864

loc_62B9A7F2:				; CODE XREF: silc_client_command_whois+4Cj
					; silc_client_command_whois+CBj
		lea	edx, ds:0[edi*4]
		mov	[esp+0A8h+Str2], offset	aDetails ; "-details"
		mov	eax, [ebx+3Ch]
		mov	eax, [eax+edx]
		mov	[esp+0A8h+Str1], eax ; Str1
		mov	[ebp+var_58], edx
		call	_stricmp
		test	eax, eax
		mov	edx, [ebp+var_58]
		jz	short loc_62B9A7E4
		mov	[esp+0A8h+Str2], offset	Str2 ; "-pubkey"
		mov	eax, [ebx+3Ch]
		mov	eax, [eax+edx]
		mov	[esp+0A8h+Str1], eax ; Str1
		mov	[ebp+var_58], edx
		call	_stricmp
		test	eax, eax
		mov	edx, [ebp+var_58]
		jnz	loc_62B9A978
		mov	eax, [ebx+38h]
		mov	[ebp+var_5C], eax
		lea	ecx, [esi+1]
		cmp	eax, ecx
		jbe	loc_62B9A97E
		mov	edx, [ebx+3Ch]
		mov	edi, [edx+edi*4+4]
		mov	[ebp+var_40], edi
		add	esi, 2
		mov	edi, esi
		cmp	eax, edi
		ja	short loc_62B9A7F2
		lea	esi, [esi+0]

loc_62B9A864:				; CODE XREF: silc_client_command_whois+5Cj
		cmp	byte ptr [ebp+var_3C], 0
		jz	loc_62B9A9B0
		mov	esi, [ebp+var_40]
		test	esi, esi
		jz	loc_62B9ACA7
		mov	[esp+0A8h+var_7C], 0
		mov	[esp+0A8h+var_80], 10h
		mov	[esp+0A8h+var_84], 0Ah
		mov	[esp+0A8h+var_88], 9
		mov	[esp+0A8h+var_8C], 8
		mov	[esp+0A8h+var_90], 7
		mov	[esp+0A8h+var_94], 6
		mov	[esp+0A8h+var_98], 5
		mov	[esp+0A8h+var_9C], 4
		mov	[esp+0A8h+var_A0], 3
		mov	[esp+0A8h+Str2], 2
		mov	[esp+0A8h+Str1], 1
		call	silc_client_attributes_request
		mov	esi, eax

loc_62B9A8DF:				; CODE XREF: silc_client_command_whois+229j
		lea	eax, [ebp+var_24]
		mov	[esp+0A8h+Str2], eax
		mov	ecx, [ebp+var_40]
		mov	[esp+0A8h+Str1], ecx
		call	silc_pkcs_load_public_key
		test	al, al
		jnz	loc_62B9A9C4
		mov	eax, [ebx+4]
		mov	eax, [eax+4Ch]
		mov	eax, [eax+18h]
		mov	eax, [eax+48h]
		mov	edx, [ebp+var_40]
		mov	[esp+0A8h+var_98], edx
		mov	[esp+0A8h+var_9C], offset aCouldNotLoadPu ; "Could not load public key %s, check the"...
		mov	[esp+0A8h+var_A0], 3
		mov	ecx, [ebp+var_44]
		mov	[esp+0A8h+Str2], ecx
		mov	edx, [ebp+var_54]
		mov	[esp+0A8h+Str1], edx
		call	dword ptr [eax]
		mov	edx, [ebx+4]
		mov	eax, [edx+4Ch]
		mov	ecx, [eax+18h]
		mov	ecx, [ecx+48h]
		mov	esi, [ebx+3Ch]
		mov	[esp+0A8h+var_90], esi
		mov	esi, [ebx+38h]
		mov	[esp+0A8h+var_94], esi
		mov	[esp+0A8h+var_98], 1Dh
		movzx	ebx, byte ptr [ebx+34h]
		mov	[esp+0A8h+var_9C], ebx
		mov	[esp+0A8h+var_A0], 0
		mov	[esp+0A8h+Str2], edx
		mov	[esp+0A8h+Str1], eax
		call	dword ptr [ecx+10h]
		mov	eax, 3

loc_62B9A96C:				; CODE XREF: silc_client_command_whois+420j
					; silc_client_command_whois+502j
		add	esp, 9Ch
		pop	ebx
		pop	esi
		pop	edi
		leave
		retn
; ---------------------------------------------------------------------------
		align 4

loc_62B9A978:				; CODE XREF: silc_client_command_whois+A3j
		mov	eax, [ebx+38h]
		mov	[ebp+var_5C], eax

loc_62B9A97E:				; CODE XREF: silc_client_command_whois+B4j
		cmp	esi, 1
		jz	short loc_62B9A998
		mov	ecx, [ebp+var_5C]
		dec	ecx
		cmp	edi, ecx
		jz	loc_62B9ABBC
		inc	esi
		mov	edi, esi
		jmp	loc_62B9A7EE
; ---------------------------------------------------------------------------
		align 4

loc_62B9A998:				; CODE XREF: silc_client_command_whois+1EDj
		mov	eax, [ebp+var_5C]
		mov	si, 2
		mov	edi, 2
		mov	[ebp+var_49], 1
		jmp	loc_62B9A7EE
; ---------------------------------------------------------------------------
		align 10h

loc_62B9A9B0:				; CODE XREF: silc_client_command_whois+D4j
		mov	ecx, [ebp+var_40]
		test	ecx, ecx
		jz	loc_62B9AA84
		xor	esi, esi
		jmp	loc_62B9A8DF
; ---------------------------------------------------------------------------
		align 4

loc_62B9A9C4:				; CODE XREF: silc_client_command_whois+15Fj
		mov	eax, [ebp+var_24]
		mov	[esp+0A8h+Str1], eax
		call	silc_pkcs_get_type
		cmp	eax, 2
		jz	loc_62B9ACBA
		jbe	loc_62B9ABA8
		cmp	eax, 3
		jz	loc_62B9ACC6
		cmp	eax, 4
		jnz	loc_62B9ABAF
		mov	[ebp+var_30], offset aPgpSignRsa ; "pgp-sign-rsa"

loc_62B9A9F7:				; CODE XREF: silc_client_command_whois+52Dj
					; silc_client_command_whois+539j ...
		lea	edi, [ebp+var_30]
		lea	eax, [ebp+var_28]
		mov	[esp+0A8h+Str2], eax
		mov	eax, [ebp+var_24]
		mov	[esp+0A8h+Str1], eax
		call	silc_pkcs_public_key_encode
		mov	[ebp+var_2C], eax
		mov	[esp+0A8h+var_98], 0Ch
		mov	[esp+0A8h+var_9C], edi
		mov	[esp+0A8h+var_A0], 2
		mov	[esp+0A8h+Str2], 0Ch
		mov	[esp+0A8h+Str1], esi
		call	silc_attribute_payload_encode
		mov	esi, eax
		mov	eax, [ebp+var_2C]
		mov	[esp+0A8h+Str1], eax
		call	silc_free
		cmp	[ebp+var_49], 0
		jz	short loc_62B9AA8C

loc_62B9AA46:				; CODE XREF: silc_client_command_whois+2F6j
		lea	eax, [ebp+var_20]
		mov	[esp+0A8h+var_9C], eax ; int
		mov	eax, [ebx+3Ch]
		mov	eax, [eax+4]
		mov	[esp+0A8h+var_A0], eax ; char *
		mov	ecx, [ebp+var_44]
		mov	[esp+0A8h+Str2], ecx ; int
		mov	eax, [ebp+var_54]
		mov	[esp+0A8h+Str1], eax ; int
		call	silc_client_nickname_parse
		mov	edx, [ebp+var_20]
		test	edx, edx
		jnz	short loc_62B9AA8C
		mov	eax, [ebx+3Ch]
		mov	eax, [eax+4]
		mov	[esp+0A8h+Str1], eax ; Src
		call	_strdup
		mov	[ebp+var_20], eax
		jmp	short loc_62B9AA8C
; ---------------------------------------------------------------------------
		align 4

loc_62B9AA84:				; CODE XREF: silc_client_command_whois+221j
		xor	esi, esi

loc_62B9AA86:				; CODE XREF: silc_client_command_whois+521j
		cmp	[ebp+var_49], 0
		jnz	short loc_62B9AA46

loc_62B9AA8C:				; CODE XREF: silc_client_command_whois+2B0j
					; silc_client_command_whois+2DAj ...
		test	esi, esi
		jz	loc_62B9AC9B
		mov	edx, [esi+4]
		mov	[ebp+var_3C], edx
		mov	esi, [esi+8]
		sub	esi, edx

loc_62B9AA9F:				; CODE XREF: silc_client_command_whois+50Ej
		cmp	[ebp+var_50], 1
		sbb	edx, edx
		not	edx
		and	edx, 4
		cmp	[ebp+var_49], 0
		jnz	loc_62B9AB8C
		xor	ecx, ecx
		mov	[ebp+var_40], 0

loc_62B9AABD:				; CODE XREF: silc_client_command_whois+40Dj
		mov	[esp+0A8h+var_70], esi
		mov	eax, [ebp+var_3C]
		mov	[esp+0A8h+var_74], eax
		mov	[esp+0A8h+var_78], 3
		mov	[esp+0A8h+var_7C], edx
		mov	edx, [ebp+var_50]
		mov	[esp+0A8h+var_80], edx
		mov	[esp+0A8h+var_84], 2
		mov	[esp+0A8h+var_88], ecx
		mov	ecx, [ebp+var_40]
		mov	[esp+0A8h+var_8C], ecx
		mov	[esp+0A8h+var_90], 1
		mov	[esp+0A8h+var_94], 3
		mov	[esp+0A8h+var_98], 0
		mov	[esp+0A8h+var_9C], 0
		movzx	eax, byte ptr [ebx+34h]
		mov	[esp+0A8h+var_A0], eax
		mov	[esp+0A8h+Str2], ebx
		mov	eax, [ebp+var_44]
		mov	[esp+0A8h+Str1], eax
		call	sub_62B95C0C
		mov	eax, [ebp+var_20]
		mov	[esp+0A8h+Str1], eax
		call	silc_free
		mov	edx, [ebx+4]
		mov	eax, [edx+4Ch]
		mov	ecx, [eax+18h]
		mov	ecx, [ecx+48h]
		mov	esi, [ebx+3Ch]
		mov	[esp+0A4h+var_8C], esi
		mov	esi, [ebx+38h]
		mov	[esp+0A4h+var_90], esi
		mov	[esp+0A4h+var_94], 0
		movzx	ebx, byte ptr [ebx+34h]
		mov	[esp+0A4h+var_98], ebx
		mov	[esp+0A4h+var_9C], 1
		mov	[esp+0A4h+var_A0], edx
		mov	[esp+0A4h+Str2], eax
		call	dword ptr [ecx+10h]
		mov	[esp+0A4h+var_A0], offset silc_client_command_reply_wait
		mov	edx, [ebp+arg_0]
		mov	[esp+0A4h+Str2], edx
		call	silc_fsm_next
		xor	eax, eax
		add	esp, 9Ch
		pop	ebx
		pop	esi
		pop	edi
		leave
		retn
; ---------------------------------------------------------------------------

loc_62B9AB8C:				; CODE XREF: silc_client_command_whois+31Aj
		mov	ecx, [ebp+var_20]
		mov	[ebp+var_40], ecx
		xor	eax, eax
		mov	ecx, 0FFFFFFFFh
		mov	edi, [ebp+var_40]
		repne scasb
		not	ecx
		dec	ecx
		jmp	loc_62B9AABD
; ---------------------------------------------------------------------------
		align 4

loc_62B9ABA8:				; CODE XREF: silc_client_command_whois+244j
		dec	eax
		jz	loc_62B9ACD2

loc_62B9ABAF:				; CODE XREF: silc_client_command_whois+256j
		mov	eax, 3
		jmp	loc_62B9A96C
; ---------------------------------------------------------------------------
		align 4

loc_62B9ABBC:				; CODE XREF: silc_client_command_whois+1F5j
		mov	eax, [ebx+3Ch]
		mov	eax, [eax+edx]
		mov	[esp+0A8h+Str1], eax ; Str
		call	atoi
		mov	edx, eax
		sar	edx, 18h
		mov	[ebp+var_1C], dl
		mov	edx, eax
		sar	edx, 10h
		mov	[ebp+var_1B], dl
		mov	edx, eax
		sar	edx, 8
		mov	[ebp+var_1A], dl
		mov	[ebp+var_19], al
		inc	esi
		mov	edi, esi
		mov	eax, [ebx+38h]
		lea	edx, [ebp+var_1C]
		mov	[ebp+var_50], edx
		jmp	loc_62B9A7EE
; ---------------------------------------------------------------------------

loc_62B9ABF6:				; CODE XREF: silc_client_command_whois+26j
		mov	ecx, eax
		mov	eax, [eax+54h]
		mov	eax, [eax+0F4h]
		mov	edx, [eax+4]
		mov	eax, [eax+8]
		sub	eax, edx
		mov	[esp+0A8h+var_88], eax
		mov	[esp+0A8h+var_8C], edx
		mov	[esp+0A8h+var_90], 4
		mov	[esp+0A8h+var_94], 1
		mov	[esp+0A8h+var_98], 0
		mov	[esp+0A8h+var_9C], 0
		movzx	eax, byte ptr [ebx+34h]
		mov	[esp+0A8h+var_A0], eax
		mov	[esp+0A8h+Str2], ebx
		mov	[esp+0A8h+Str1], ecx
		call	sub_62B95C0C
		mov	edx, [ebx+4]
		mov	eax, [edx+4Ch]
		mov	ecx, [eax+18h]
		mov	ecx, [ecx+48h]
		mov	esi, [ebx+3Ch]
		mov	[esp+0A8h+var_90], esi
		mov	esi, [ebx+38h]
		mov	[esp+0A8h+var_94], esi
		mov	[esp+0A8h+var_98], 0
		movzx	ebx, byte ptr [ebx+34h]
		mov	[esp+0A8h+var_9C], ebx
		mov	[esp+0A8h+var_A0], 1
		mov	[esp+0A8h+Str2], edx
		mov	[esp+0A8h+Str1], eax
		call	dword ptr [ecx+10h]
		mov	[esp+0A8h+Str2], offset	silc_client_command_reply_wait
		mov	eax, [ebp+arg_0]
		mov	[esp+0A8h+Str1], eax
		call	silc_fsm_next
		xor	eax, eax
		jmp	loc_62B9A96C
; ---------------------------------------------------------------------------

loc_62B9AC9B:				; CODE XREF: silc_client_command_whois+2FAj
		mov	[ebp+var_3C], 0
		jmp	loc_62B9AA9F
; ---------------------------------------------------------------------------

loc_62B9ACA7:				; CODE XREF: silc_client_command_whois+DFj
		mov	[esp+0A8h+Str1], 0
		call	silc_client_attributes_request
		mov	esi, eax
		jmp	loc_62B9AA86
; ---------------------------------------------------------------------------

loc_62B9ACBA:				; CODE XREF: silc_client_command_whois+23Ej
		mov	[ebp+var_30], offset aSshRsa ; "ssh-rsa"
		jmp	loc_62B9A9F7
; ---------------------------------------------------------------------------

loc_62B9ACC6:				; CODE XREF: silc_client_command_whois+24Dj
		mov	[ebp+var_30], offset aX509v3SignRsa ; "x509v3-sign-rsa"
		jmp	loc_62B9A9F7
; ---------------------------------------------------------------------------

loc_62B9ACD2:				; CODE XREF: silc_client_command_whois+415j
		mov	[ebp+var_30], offset aSilcRsa_0	; "silc-rsa"
		jmp	loc_62B9A9F7
silc_client_command_whois endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  81. silc_client_command_send

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public silc_client_command_send
silc_client_command_send proc near	; CODE XREF: sub_62B888C0+27Fp
					; sub_62B888C0+3ADp ...

var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_20		= dword	ptr -20h
var_19		= byte ptr -19h
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h
arg_10		= dword	ptr  18h
arg_14		= dword	ptr  1Ch
arg_18		= byte ptr  20h

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		sub	esp, 3Ch
		mov	esi, [ebp+arg_4]
		mov	edi, [ebp+arg_8]
		mov	edx, [ebp+arg_C]
		mov	ecx, edi
		mov	[ebp+var_19], cl
		test	esi, esi
		jz	loc_62B9ADF8
		test	edx, edx
		jz	loc_62B9ADF8
		mov	[esp+48h+var_44], 68h
		mov	[esp+48h+var_48], 1
		mov	[ebp+var_20], edx
		call	silc_calloc
		mov	ebx, eax
		test	eax, eax
		mov	edx, [ebp+var_20]
		jz	loc_62B9ADF8
		mov	[eax+4], esi
		mov	eax, edi
		mov	[ebx+34h], al
		mov	eax, [ebx+58h]
		and	eax, 3
		mov	[ebx+58h], eax
		mov	word ptr [ebx+54h], 0
		mov	word ptr [ebx+56h], 0
		mov	byte ptr [ebx+58h], 0
		mov	dword ptr [ebx+50h], 0
		mov	dword ptr [ebx+4Ch], 0
		mov	dword ptr [ebx+48h], 0
		lea	eax, [ebp+arg_18]
		mov	[esp+48h+var_38], eax
		mov	eax, [ebp+arg_14]
		mov	[esp+48h+var_3C], eax
		mov	eax, [ebp+arg_10]
		mov	[esp+48h+var_40], eax
		mov	[esp+48h+var_44], edx
		movzx	eax, [ebp+var_19]
		mov	[esp+48h+var_48], eax
		mov	ecx, ebx
		mov	edx, esi
		mov	eax, [ebp+arg_0]
		call	sub_62B95AF0
		mov	[ebx+36h], ax
		test	ax, ax
		jz	short loc_62B9ADE4
		lea	edi, [ebx+8]
		mov	[esp+48h+var_34], 0
		mov	[esp+48h+var_38], 0
		mov	[esp+48h+var_3C], offset sub_62B94AA4
		mov	[esp+48h+var_40], ebx
		mov	eax, [esi+54h]
		add	eax, 40h
		mov	[esp+48h+var_44], eax
		mov	[esp+48h+var_48], edi
		call	silc_fsm_thread_init
		mov	[esp+48h+var_44], offset silc_client_command_reply_wait
		mov	[esp+48h+var_48], edi
		call	silc_fsm_start_sync
		mov	ax, [ebx+36h]
		add	esp, 3Ch
		pop	ebx
		pop	esi
		pop	edi
		leave
		retn
; ---------------------------------------------------------------------------
		align 4

loc_62B9ADE4:				; CODE XREF: silc_client_command_send+B4j
		mov	[esp+48h+var_48], ebx
		call	silc_client_command_free
		xor	eax, eax
		add	esp, 3Ch
		pop	ebx
		pop	esi
		pop	edi
		leave
		retn
; ---------------------------------------------------------------------------
		align 4

loc_62B9ADF8:				; CODE XREF: silc_client_command_send+19j
					; silc_client_command_send+21j	...
		xor	eax, eax
		add	esp, 3Ch
		pop	ebx
		pop	esi
		pop	edi
		leave
		retn
silc_client_command_send endp

; ---------------------------------------------------------------------------
		align 4
; Exported entry  31. silc_client_command_getkey

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public silc_client_command_getkey
silc_client_command_getkey proc	near	; DATA XREF: silc_client_commands_unregister+1175o
					; silc_client_commands_register+B0Bo

var_58		= dword	ptr -58h
var_54		= dword	ptr -54h
var_50		= dword	ptr -50h
var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		sub	esp, 4Ch
		mov	ebx, [ebp+arg_4]
		mov	esi, [ebx+4]
		mov	eax, [esi+4Ch]
		mov	[ebp+var_1C], eax
		cmp	dword ptr [ebx+38h], 1
		jbe	loc_62B9AF68
		mov	[esp+58h+var_4C], 0
		mov	eax, [ebx+3Ch]
		mov	eax, [eax+4]
		mov	[esp+58h+var_50], eax
		mov	[esp+58h+var_54], esi
		mov	ecx, [ebp+var_1C]
		mov	[esp+58h+var_58], ecx
		call	silc_client_get_clients_local
		mov	edi, eax
		test	eax, eax
		jz	loc_62B9B03C
		mov	eax, [eax+14h]
		mov	[edi+18h], eax
		mov	eax, [edi+8]
		test	eax, eax
		jz	loc_62B9AFE0
		test	byte ptr [edi+10h], 2
		jz	loc_62B9AFD4
		movzx	edx, word ptr [edi+0Eh]
		mov	edx, [eax+edx]

loc_62B9AE70:				; CODE XREF: silc_client_command_getkey+1D7j
		mov	[edi+8], edx
		mov	[edi+14h], eax
		mov	eax, [eax]

loc_62B9AE78:				; CODE XREF: silc_client_command_getkey+1E5j
		mov	[esp+58h+var_54], 2
		add	eax, 38Ch
		mov	[esp+58h+var_58], eax
		call	silc_id_payload_encode
		mov	[esp+58h+var_50], edi
		mov	[esp+58h+var_54], esi
		mov	ecx, [ebp+var_1C]
		mov	[esp+58h+var_58], ecx
		mov	[ebp+var_20], eax
		call	silc_client_list_free
		mov	edx, [ebp+var_20]

loc_62B9AEA6:				; CODE XREF: silc_client_command_getkey+285j
		test	edx, edx
		jz	loc_62B9AFF0
		mov	ecx, [edx+4]
		mov	eax, [edx+8]
		sub	eax, ecx
		mov	[esp+58h+var_38], eax
		mov	[esp+58h+var_3C], ecx
		mov	[esp+58h+var_40], 1
		mov	[esp+58h+var_44], 1
		mov	[esp+58h+var_48], 0
		mov	[esp+58h+var_4C], 0
		movzx	eax, byte ptr [ebx+34h]
		mov	[esp+58h+var_50], eax
		mov	[esp+58h+var_54], ebx
		mov	[esp+58h+var_58], esi
		mov	[ebp+var_20], edx
		call	sub_62B95C0C
		mov	edx, [ebp+var_20]
		mov	eax, [edx]
		mov	[esp+58h+var_58], eax
		call	silc_free
		mov	edx, [ebp+var_20]
		mov	[esp+58h+var_58], edx
		call	silc_free

loc_62B9AF0D:				; CODE XREF: silc_client_command_getkey+230j
		mov	edx, [ebx+4]
		mov	eax, [edx+4Ch]
		mov	ecx, [eax+18h]
		mov	ecx, [ecx+48h]
		mov	esi, [ebx+3Ch]
		mov	[esp+58h+var_40], esi
		mov	esi, [ebx+38h]
		mov	[esp+58h+var_44], esi
		mov	[esp+58h+var_48], 0
		movzx	ebx, byte ptr [ebx+34h]
		mov	[esp+58h+var_4C], ebx
		mov	[esp+58h+var_50], 1
		mov	[esp+58h+var_54], edx
		mov	[esp+58h+var_58], eax
		call	dword ptr [ecx+10h]
		mov	[esp+58h+var_54], offset silc_client_command_reply_wait
		mov	eax, [ebp+arg_0]
		mov	[esp+58h+var_58], eax
		call	silc_fsm_next
		xor	eax, eax

loc_62B9AF5E:				; CODE XREF: silc_client_command_getkey+32Bj
		add	esp, 4Ch
		pop	ebx
		pop	esi
		pop	edi
		leave
		retn
; ---------------------------------------------------------------------------
		align 4

loc_62B9AF68:				; CODE XREF: silc_client_command_getkey+19j
		mov	edx, eax
		mov	eax, [eax+18h]
		mov	eax, [eax+48h]
		mov	[esp+58h+var_4C], offset aUsageGetkeyNic ; "Usage: /GETKEY <nickname or	server name"...
		mov	[esp+58h+var_50], 0
		mov	[esp+58h+var_54], esi
		mov	[esp+58h+var_58], edx
		call	dword ptr [eax]
		mov	edx, [ebx+4]
		mov	eax, [edx+4Ch]
		mov	ecx, [eax+18h]
		mov	ecx, [ecx+48h]
		mov	esi, [ebx+3Ch]
		mov	[esp+58h+var_40], esi
		mov	esi, [ebx+38h]
		mov	[esp+58h+var_44], esi
		mov	[esp+58h+var_48], 1Dh

loc_62B9AFAB:				; CODE XREF: silc_client_command_getkey+38Ej
		movzx	ebx, byte ptr [ebx+34h]
		mov	[esp+58h+var_4C], ebx
		mov	[esp+58h+var_50], 0
		mov	[esp+58h+var_54], edx
		mov	[esp+58h+var_58], eax
		call	dword ptr [ecx+10h]
		mov	eax, 3
		add	esp, 4Ch
		pop	ebx
		pop	esi
		pop	edi
		leave
		retn
; ---------------------------------------------------------------------------
		align 4

loc_62B9AFD4:				; CODE XREF: silc_client_command_getkey+5Fj
		movzx	edx, word ptr [edi+0Ch]
		mov	edx, [eax+edx]
		jmp	loc_62B9AE70
; ---------------------------------------------------------------------------

loc_62B9AFE0:				; CODE XREF: silc_client_command_getkey+55j
		mov	dword ptr [edi+14h], 0
		xor	eax, eax
		jmp	loc_62B9AE78
; ---------------------------------------------------------------------------
		align 10h

loc_62B9AFF0:				; CODE XREF: silc_client_command_getkey+A4j
		mov	[esp+58h+var_38], 0
		mov	[esp+58h+var_3C], 0
		mov	[esp+58h+var_40], 1
		mov	[esp+58h+var_44], 1
		mov	[esp+58h+var_48], 0
		mov	[esp+58h+var_4C], 0
		movzx	eax, byte ptr [ebx+34h]
		mov	[esp+58h+var_50], eax
		mov	[esp+58h+var_54], ebx
		mov	[esp+58h+var_58], esi
		call	sub_62B95C0C
		jmp	loc_62B9AF0D
; ---------------------------------------------------------------------------
		align 4

loc_62B9B03C:				; CODE XREF: silc_client_command_getkey+44j
		mov	eax, [ebx+3Ch]
		mov	eax, [eax+4]
		mov	[esp+58h+var_50], eax
		mov	[esp+58h+var_54], esi
		mov	eax, [ebp+var_1C]
		mov	[esp+58h+var_58], eax
		call	silc_client_get_server
		mov	edi, eax
		test	eax, eax
		jz	short loc_62B9B090
		mov	[esp+58h+var_54], 1
		lea	eax, [eax+8]
		mov	[esp+58h+var_58], eax
		call	silc_id_payload_encode
		mov	edx, eax
		mov	[esp+58h+var_50], edi
		mov	[esp+58h+var_54], esi
		mov	eax, [ebp+var_1C]
		mov	[esp+58h+var_58], eax
		mov	[ebp+var_20], edx
		call	silc_client_unref_server
		mov	edx, [ebp+var_20]
		jmp	loc_62B9AEA6
; ---------------------------------------------------------------------------
		align 10h

loc_62B9B090:				; CODE XREF: silc_client_command_getkey+255j
		mov	al, [ebx+64h]
		test	al, 4
		jnz	loc_62B9B134
		or	eax, 4
		mov	[ebx+64h], al
		mov	edx, [ebp+arg_0]
		mov	al, [edx+28h]
		mov	dl, al
		or	edx, 4
		mov	ecx, [ebp+arg_0]
		mov	[ecx+28h], dl
		test	al, 4
		jnz	loc_62B9B197

loc_62B9B0BA:				; CODE XREF: silc_client_command_getkey+3BFj
		mov	eax, [ebx+3Ch]
		mov	edx, [eax+4]
		xor	eax, eax
		mov	ecx, 0FFFFFFFFh
		mov	edi, edx
		repne scasb
		not	ecx
		dec	ecx
		mov	[esp+58h+var_2C], ecx
		mov	[esp+58h+var_30], edx
		mov	[esp+58h+var_34], 2
		mov	[esp+58h+var_38], ecx
		mov	[esp+58h+var_3C], edx
		mov	[esp+58h+var_40], 1
		mov	[esp+58h+var_44], 2
		mov	[esp+58h+var_48], ebx
		mov	[esp+58h+var_4C], offset sub_62B951C8
		mov	[esp+58h+var_50], 3
		mov	[esp+58h+var_54], esi
		mov	eax, [ebp+var_1C]
		mov	[esp+58h+var_58], eax
		call	silc_client_command_send
		mov	ecx, [ebp+arg_0]
		mov	dl, [ecx+28h]
		mov	al, dl
		shr	al, 2
		and	edx, 0FFFFFFFBh
		mov	[ecx+28h], dl
		shl	eax, 1
		and	eax, 2
		jmp	loc_62B9AF5E
; ---------------------------------------------------------------------------

loc_62B9B134:				; CODE XREF: silc_client_command_getkey+291j
		mov	edx, [ebx+4]
		mov	eax, [edx+4Ch]
		mov	ecx, [eax+18h]
		mov	ecx, [ecx+48h]
		mov	esi, [ebx+3Ch]
		mov	[esp+58h+var_40], esi
		mov	esi, [ebx+38h]
		mov	[esp+58h+var_44], esi
		mov	[esp+58h+var_48], 0Ah
		movzx	esi, byte ptr [ebx+34h]
		mov	[esp+58h+var_4C], esi
		mov	[esp+58h+var_50], 0
		mov	[esp+58h+var_54], edx
		mov	[esp+58h+var_58], eax
		call	dword ptr [ecx+10h]
		mov	edx, [ebx+4]
		mov	eax, [edx+4Ch]
		mov	ecx, [eax+18h]
		mov	ecx, [ecx+48h]
		mov	esi, [ebx+3Ch]
		mov	[esp+58h+var_40], esi
		mov	esi, [ebx+38h]
		mov	[esp+58h+var_44], esi
		mov	[esp+58h+var_48], 0Ch
		jmp	loc_62B9AFAB
; ---------------------------------------------------------------------------

loc_62B9B197:				; CODE XREF: silc_client_command_getkey+2B0j
		mov	[esp+58h+var_50], 0A86h
		mov	[esp+58h+var_54], offset aCommand_c ; "command.c"
		mov	[esp+58h+var_58], offset aSilc_verifyS_5 ; "SILC_VERIFY	%s:%d"
		call	silc_format
		mov	[esp+58h+var_54], eax
		mov	[esp+58h+var_58], 3
		call	silc_log_output
		jmp	loc_62B9B0BA
silc_client_command_getkey endp

; Exported entry  86. silc_client_command_topic

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public silc_client_command_topic
silc_client_command_topic proc near	; DATA XREF: silc_client_commands_unregister+3B5o
					; silc_client_commands_register+2BBo

var_268		= dword	ptr -268h
var_264		= dword	ptr -264h
var_260		= dword	ptr -260h
var_25C		= dword	ptr -25Ch
var_258		= dword	ptr -258h
var_254		= dword	ptr -254h
var_250		= dword	ptr -250h
var_24C		= dword	ptr -24Ch
var_248		= dword	ptr -248h
var_244		= dword	ptr -244h
var_240		= dword	ptr -240h
var_23C		= dword	ptr -23Ch
var_22C		= dword	ptr -22Ch
var_228		= dword	ptr -228h
var_224		= dword	ptr -224h
var_220		= dword	ptr -220h
var_21C		= dword	ptr -21Ch
var_218		= byte ptr -218h
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		sub	esp, 25Ch
		mov	ebx, [ebp+arg_4]
		mov	esi, [ebx+4]
		mov	edx, [esi+4Ch]
		mov	eax, [ebx+38h]
		lea	ecx, [eax-2]
		cmp	ecx, 1
		jbe	short loc_62B9B25C
		mov	eax, [edx+18h]
		mov	eax, [eax+48h]
		mov	[esp+268h+var_25C], offset aUsageTopicChan ; "Usage: /TOPIC <channel> [<topic>]"
		mov	[esp+268h+var_260], 0
		mov	[esp+268h+var_264], esi
		mov	[esp+268h+var_268], edx
		call	dword ptr [eax]
		mov	ecx, [ebx+4]
		mov	edx, [ecx+4Ch]
		mov	eax, [edx+18h]
		mov	eax, [eax+48h]
		mov	edi, [eax+10h]
		cmp	dword ptr [ebx+38h], 2
		sbb	eax, eax
		add	eax, 1Eh
		mov	esi, [ebx+3Ch]
		mov	[esp+268h+var_250], esi
		mov	esi, [ebx+38h]
		mov	[esp+268h+var_254], esi
		mov	[esp+268h+var_258], eax
		movzx	eax, byte ptr [ebx+34h]
		mov	[esp+268h+var_25C], eax
		mov	[esp+268h+var_260], 0
		mov	[esp+268h+var_264], ecx
		mov	[esp+268h+var_268], edx
		call	edi
		mov	eax, 3

loc_62B9B24F:				; CODE XREF: silc_client_command_topic+411j
		add	esp, 25Ch
		pop	ebx
		pop	esi
		pop	edi
		leave
		retn
; ---------------------------------------------------------------------------
		align 4

loc_62B9B25C:				; CODE XREF: silc_client_command_topic+1Ej
		mov	ecx, [ebx+3Ch]
		mov	edi, [ecx+4]
		cmp	byte ptr [edi],	2Ah
		jz	loc_62B9B470

loc_62B9B26B:				; CODE XREF: silc_client_command_topic+30Dj
					; silc_client_command_topic+3BCj
		mov	eax, [esi+30h]
		test	eax, eax
		jz	loc_62B9B424
		mov	[esp+268h+var_260], edi
		mov	[esp+268h+var_264], esi
		mov	eax, [esi+4Ch]
		mov	[esp+268h+var_268], eax
		mov	[ebp+var_228], edx
		call	silc_client_get_channel
		mov	[ebp+var_220], eax
		test	eax, eax
		mov	edx, [ebp+var_228]
		jz	loc_62B9B424
		mov	[esp+268h+var_264], 3
		mov	eax, [ebp+var_220]
		add	eax, 114h
		mov	[esp+268h+var_268], eax
		mov	[ebp+var_228], edx
		call	silc_id_payload_encode
		mov	[ebp+var_21C], eax
		cmp	dword ptr [ebx+38h], 2
		mov	edx, [ebp+var_228]
		jbe	loc_62B9B4DC
		mov	eax, [ebx+3Ch]
		mov	eax, [eax+8]
		mov	[ebp+var_224], eax
		xor	eax, eax
		mov	ecx, 0FFFFFFFFh
		mov	edi, [ebp+var_224]
		repne scasb
		not	ecx
		dec	ecx
		mov	[ebp+var_22C], ecx
		mov	ecx, [ebp+var_21C]
		test	ecx, ecx
		jz	loc_62B9B58C
		mov	edi, [ebp+var_21C]
		mov	ecx, [edi+4]
		mov	eax, [edi+8]
		sub	eax, ecx

loc_62B9B31A:				; CODE XREF: silc_client_command_topic+3C8j
		mov	edi, [ebp+var_22C]
		mov	[esp+268h+var_23C], edi
		mov	edi, [ebp+var_224]
		mov	[esp+268h+var_240], edi
		mov	[esp+268h+var_244], 2
		mov	[esp+268h+var_248], eax
		mov	[esp+268h+var_24C], ecx
		mov	[esp+268h+var_250], 1
		mov	[esp+268h+var_254], 2
		mov	[esp+268h+var_258], 0
		mov	[esp+268h+var_25C], 0
		movzx	eax, byte ptr [ebx+34h]
		mov	[esp+268h+var_260], eax
		mov	[esp+268h+var_264], ebx
		mov	[esp+268h+var_268], esi
		mov	[ebp+var_228], edx
		call	sub_62B95C0C
		mov	edx, [ebp+var_228]

loc_62B9B37E:				; CODE XREF: silc_client_command_topic+378j
		mov	edi, [ebp+var_21C]
		test	edi, edi
		jz	short loc_62B9B3B2
		mov	ecx, [ebp+var_21C]
		mov	eax, [ecx]
		mov	[esp+268h+var_268], eax
		mov	[ebp+var_228], edx
		call	silc_free
		mov	edi, [ebp+var_21C]
		mov	[esp+268h+var_268], edi
		call	silc_free
		mov	edx, [ebp+var_228]

loc_62B9B3B2:				; CODE XREF: silc_client_command_topic+1BEj
		mov	eax, [ebp+var_220]
		mov	[esp+268h+var_260], eax
		mov	[esp+268h+var_264], esi
		mov	[esp+268h+var_268], edx
		call	silc_client_unref_channel
		mov	edx, [ebx+4]
		mov	eax, [edx+4Ch]
		mov	ecx, [eax+18h]
		mov	ecx, [ecx+48h]
		mov	esi, [ebx+3Ch]
		mov	[esp+268h+var_250], esi
		mov	esi, [ebx+38h]
		mov	[esp+268h+var_254], esi
		mov	[esp+268h+var_258], 0
		movzx	ebx, byte ptr [ebx+34h]
		mov	[esp+268h+var_25C], ebx
		mov	[esp+268h+var_260], 1
		mov	[esp+268h+var_264], edx
		mov	[esp+268h+var_268], eax
		call	dword ptr [ecx+10h]
		mov	[esp+264h+var_260], offset silc_client_command_reply_wait
		mov	eax, [ebp+arg_0]
		mov	[esp+264h+var_264], eax
		call	silc_fsm_next
		xor	eax, eax
		add	esp, 25Ch
		pop	ebx
		pop	esi
		pop	edi
		leave
		retn
; ---------------------------------------------------------------------------

loc_62B9B424:				; CODE XREF: silc_client_command_topic+A8j
					; silc_client_command_topic+D5j
		mov	edx, [ebx+4]
		mov	eax, [edx+4Ch]
		mov	ecx, [eax+18h]
		mov	ecx, [ecx+48h]
		mov	esi, [ebx+3Ch]
		mov	[esp+268h+var_250], esi
		mov	esi, [ebx+38h]
		mov	[esp+268h+var_254], esi
		mov	[esp+268h+var_258], 19h
		movzx	ebx, byte ptr [ebx+34h]
		mov	[esp+268h+var_25C], ebx
		mov	[esp+268h+var_260], 0
		mov	[esp+268h+var_264], edx
		mov	[esp+268h+var_268], eax
		call	dword ptr [ecx+10h]
		mov	eax, 3
		add	esp, 25Ch
		pop	ebx
		pop	esi
		pop	edi
		leave
		retn
; ---------------------------------------------------------------------------

loc_62B9B470:				; CODE XREF: silc_client_command_topic+9Dj
		mov	edi, [esi+30h]
		test	edi, edi
		jz	loc_62B9B5A4
		mov	eax, [edx+18h]
		mov	eax, [eax+4Ch]
		cmp	byte ptr [eax+23h], 0
		jnz	loc_62B9B554
		cmp	byte ptr [edi+4], 0
		jnz	loc_62B9B548
		mov	ecx, offset byte_62BA8AE3

loc_62B9B49A:				; CODE XREF: silc_client_command_topic+385j
		lea	eax, [edi+4]
		mov	[esp+268h+var_254], eax
		mov	[esp+268h+var_258], ecx
		mov	eax, [edi]
		mov	[esp+268h+var_25C], eax
		mov	[esp+268h+var_260], offset aSSS	; "%s%s%s"
		mov	[esp+268h+var_264], 200h
		lea	edi, [ebp+var_218]
		mov	[esp+268h+var_268], edi
		mov	[ebp+var_228], edx
		call	silc_snprintf
		mov	edx, [ebp+var_228]
		jmp	loc_62B9B26B
; ---------------------------------------------------------------------------
		align 4

loc_62B9B4DC:				; CODE XREF: silc_client_command_topic+10Cj
		mov	eax, [ebp+var_21C]
		test	eax, eax
		jz	loc_62B9B598
		mov	eax, [ebp+var_21C]
		mov	ecx, [eax+4]
		mov	eax, [eax+8]
		sub	eax, ecx

loc_62B9B4F8:				; CODE XREF: silc_client_command_topic+3D4j
		mov	[esp+268h+var_248], eax
		mov	[esp+268h+var_24C], ecx
		mov	[esp+268h+var_250], 1
		mov	[esp+268h+var_254], 1
		mov	[esp+268h+var_258], 0
		mov	[esp+268h+var_25C], 0
		movzx	eax, byte ptr [ebx+34h]
		mov	[esp+268h+var_260], eax
		mov	[esp+268h+var_264], ebx
		mov	[esp+268h+var_268], esi
		mov	[ebp+var_228], edx
		call	sub_62B95C0C
		mov	edx, [ebp+var_228]
		jmp	loc_62B9B37E
; ---------------------------------------------------------------------------
		align 4

loc_62B9B548:				; CODE XREF: silc_client_command_topic+2C7j
		mov	ecx, offset a@	; "@"
		jmp	loc_62B9B49A
; ---------------------------------------------------------------------------
		align 4

loc_62B9B554:				; CODE XREF: silc_client_command_topic+2BDj
		mov	eax, [edi]
		mov	[esp+268h+var_25C], eax
		mov	[esp+268h+var_260], offset aS ;	"%s"
		mov	[esp+268h+var_264], 200h
		lea	edi, [ebp+var_218]
		mov	[esp+268h+var_268], edi
		mov	[ebp+var_228], edx
		call	silc_snprintf
		mov	edx, [ebp+var_228]
		jmp	loc_62B9B26B
; ---------------------------------------------------------------------------
		align 4

loc_62B9B58C:				; CODE XREF: silc_client_command_topic+13Ej
		xor	eax, eax
		xor	ecx, ecx
		jmp	loc_62B9B31A
; ---------------------------------------------------------------------------
		align 4

loc_62B9B598:				; CODE XREF: silc_client_command_topic+31Cj
		xor	eax, eax
		xor	ecx, ecx
		jmp	loc_62B9B4F8
; ---------------------------------------------------------------------------
		align 4

loc_62B9B5A4:				; CODE XREF: silc_client_command_topic+2ADj
		mov	edi, [edx+18h]
		mov	edi, [edi+48h]
		mov	[esp+268h+var_250], ecx
		mov	[esp+268h+var_254], eax
		mov	[esp+268h+var_258], 19h
		movzx	eax, byte ptr [ebx+34h]
		mov	[esp+268h+var_25C], eax
		mov	[esp+268h+var_260], 0
		mov	[esp+268h+var_264], esi
		mov	[esp+268h+var_268], edx
		call	dword ptr [edi+10h]
		mov	eax, 3
		jmp	loc_62B9B24F
silc_client_command_topic endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  89. silc_client_command_watch

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public silc_client_command_watch
silc_client_command_watch proc near	; DATA XREF: silc_client_commands_unregister+EB5o
					; silc_client_commands_register+A26o

Str1		= dword	ptr -78h
Str2		= dword	ptr -74h
var_70		= dword	ptr -70h
var_6C		= dword	ptr -6Ch
var_68		= dword	ptr -68h
var_64		= dword	ptr -64h
var_60		= dword	ptr -60h
var_5C		= dword	ptr -5Ch
var_58		= dword	ptr -58h
var_54		= dword	ptr -54h
var_50		= dword	ptr -50h
var_4C		= dword	ptr -4Ch
var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_31		= byte ptr -31h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_1C		= dword	ptr -1Ch
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		sub	esp, 6Ch
		mov	ebx, [ebp+arg_4]
		mov	esi, [ebx+4]
		mov	eax, [ebx+38h]
		cmp	eax, 2
		ja	short loc_62B9B63C
		mov	edx, [esi+4Ch]
		mov	ecx, [edx+18h]
		mov	ecx, [ecx+48h]
		mov	edi, [ebx+3Ch]
		mov	[esp+78h+var_60], edi
		mov	[esp+78h+var_64], eax
		mov	[esp+78h+var_68], 1Dh
		movzx	eax, byte ptr [ebx+34h]
		mov	[esp+78h+var_6C], eax
		mov	[esp+78h+var_70], 0
		mov	[esp+78h+Str2],	esi
		mov	[esp+78h+Str1],	edx
		call	dword ptr [ecx+10h]
		mov	eax, 3

loc_62B9B632:				; CODE XREF: silc_client_command_watch+22Cj
		add	esp, 6Ch
		pop	ebx
		pop	esi
		pop	edi
		leave
		retn
; ---------------------------------------------------------------------------
		align 4

loc_62B9B63C:				; CODE XREF: silc_client_command_watch+15j
		mov	[esp+78h+Str2],	offset aAdd ; "-add"
		mov	eax, [ebx+3Ch]
		mov	eax, [eax+4]
		mov	[esp+78h+Str1],	eax ; Str1
		call	_stricmp
		test	eax, eax
		jnz	loc_62B9B788
		mov	edx, 2
		mov	[esp+78h+var_64], 0
		mov	[esp+78h+var_68], offset silc_client_command_resolve_dummy
		mov	[esp+78h+var_6C], 0
		mov	eax, [ebx+3Ch]
		mov	eax, [eax+8]
		mov	[esp+78h+var_70], eax
		mov	[esp+78h+Str2],	esi
		mov	eax, [esi+4Ch]
		mov	[esp+78h+Str1],	eax
		mov	[ebp+var_38], edx
		call	silc_client_get_clients
		mov	edx, [ebp+var_38]

loc_62B9B696:				; CODE XREF: silc_client_command_watch+1C7j
		xor	edi, edi

loc_62B9B698:				; CODE XREF: silc_client_command_watch+396j
		mov	eax, [ebx+40h]
		mov	eax, [eax+8]
		mov	[ebp+var_3C], eax
		mov	eax, [ebx+3Ch]
		mov	eax, [eax+8]
		mov	[ebp+var_30], eax
		xchg	ax, ax

loc_62B9B6AC:				; CODE XREF: silc_client_command_watch+37Fj
		mov	eax, [esi+54h]
		mov	eax, [eax+0F4h]
		test	eax, eax
		jz	loc_62B9B814
		mov	ecx, [eax+4]
		mov	[ebp+var_2C], ecx
		mov	eax, [eax+8]
		sub	eax, ecx

loc_62B9B6C8:				; CODE XREF: silc_client_command_watch+23Bj
		mov	ecx, [ebp+var_3C]
		mov	[esp+78h+var_4C], ecx
		mov	ecx, [ebp+var_30]
		mov	[esp+78h+var_50], ecx
		mov	[esp+78h+var_54], edx
		mov	[esp+78h+var_58], eax
		mov	eax, [ebp+var_2C]
		mov	[esp+78h+var_5C], eax
		mov	[esp+78h+var_60], 1
		mov	[esp+78h+var_64], 2
		mov	[esp+78h+var_68], 0
		mov	[esp+78h+var_6C], 0
		movzx	eax, byte ptr [ebx+34h]
		mov	[esp+78h+var_70], eax
		mov	[esp+78h+Str2],	ebx
		mov	[esp+78h+Str1],	esi
		call	sub_62B95C0C
		test	edi, edi
		jz	short loc_62B9B72F
		mov	eax, [edi]
		mov	[esp+78h+Str1],	eax
		call	silc_free
		mov	[esp+78h+Str1],	edi
		call	silc_free

loc_62B9B72F:				; CODE XREF: silc_client_command_watch+13Bj
		mov	edx, [ebx+4]
		mov	eax, [edx+4Ch]
		mov	ecx, [eax+18h]
		mov	ecx, [ecx+48h]
		mov	esi, [ebx+3Ch]
		mov	[esp+78h+var_60], esi
		mov	esi, [ebx+38h]
		mov	[esp+78h+var_64], esi
		mov	[esp+78h+var_68], 0
		movzx	ebx, byte ptr [ebx+34h]
		mov	[esp+78h+var_6C], ebx
		mov	[esp+78h+var_70], 1
		mov	[esp+78h+Str2],	edx
		mov	[esp+78h+Str1],	eax
		call	dword ptr [ecx+10h]
		mov	[esp+74h+var_70], offset silc_client_command_reply_wait
		mov	eax, [ebp+arg_0]
		mov	[esp+74h+Str2],	eax
		call	silc_fsm_next
		xor	eax, eax
		add	esp, 6Ch
		pop	ebx
		pop	esi
		pop	edi
		leave
		retn
; ---------------------------------------------------------------------------

loc_62B9B788:				; CODE XREF: silc_client_command_watch+74j
		mov	[esp+78h+Str2],	offset aDel ; "-del"
		mov	eax, [ebx+3Ch]
		mov	eax, [eax+4]
		mov	[esp+78h+Str1],	eax ; Str1
		call	_stricmp
		test	eax, eax
		jnz	short loc_62B9B7AC
		mov	edx, 3
		jmp	loc_62B9B696
; ---------------------------------------------------------------------------

loc_62B9B7AC:				; CODE XREF: silc_client_command_watch+1C0j
		mov	[esp+78h+Str2],	offset Str2 ; "-pubkey"
		mov	eax, [ebx+3Ch]
		mov	eax, [eax+4]
		mov	[esp+78h+Str1],	eax ; Str1
		call	_stricmp
		test	eax, eax
		jnz	short loc_62B9B820
		mov	ecx, [ebx+38h]
		cmp	ecx, 2
		ja	short loc_62B9B825

loc_62B9B7CE:				; CODE XREF: silc_client_command_watch+243j
		mov	edx, [ebx+4]
		mov	eax, [edx+4Ch]
		mov	esi, [eax+18h]
		mov	esi, [esi+48h]
		mov	edi, [ebx+3Ch]
		mov	[esp+78h+var_60], edi
		mov	[esp+78h+var_64], ecx
		mov	[esp+78h+var_68], 1Dh
		movzx	ecx, byte ptr [ebx+34h]
		mov	[esp+78h+var_6C], ecx
		mov	[esp+78h+var_70], 0
		mov	[esp+78h+Str2],	edx
		mov	[esp+78h+Str1],	eax
		call	dword ptr [esi+10h]
		mov	eax, 3
		jmp	loc_62B9B632
; ---------------------------------------------------------------------------
		align 4

loc_62B9B814:				; CODE XREF: silc_client_command_watch+D7j
		mov	[ebp+var_2C], 0
		jmp	loc_62B9B6C8
; ---------------------------------------------------------------------------

loc_62B9B820:				; CODE XREF: silc_client_command_watch+1E4j
		mov	ecx, [ebx+38h]
		jmp	short loc_62B9B7CE
; ---------------------------------------------------------------------------

loc_62B9B825:				; CODE XREF: silc_client_command_watch+1ECj
		mov	eax, [ebx+3Ch]
		mov	eax, [eax+8]
		mov	dl, [eax]
		mov	[ebp+var_31], dl
		inc	eax
		mov	[ebp+var_2C], eax
		jz	loc_62B9B96F
		lea	eax, [ebp+var_1C]
		mov	[esp+78h+Str2],	eax
		mov	ecx, [ebp+var_2C]
		mov	[esp+78h+Str1],	ecx
		call	silc_pkcs_load_public_key
		test	al, al
		jnz	short loc_62B9B8C8
		mov	eax, [ebx+4]
		mov	eax, [eax+4Ch]
		mov	eax, [eax+18h]
		mov	eax, [eax+48h]
		mov	edx, [ebp+var_2C]
		mov	[esp+78h+var_68], edx
		mov	[esp+78h+var_6C], offset aCouldNotLoadPu ; "Could not load public key %s, check	the"...
		mov	[esp+78h+var_70], 3
		mov	[esp+78h+Str2],	esi
		mov	edx, [esi+4Ch]
		mov	[esp+78h+Str1],	edx
		call	dword ptr [eax]
		mov	edx, [ebx+4]
		mov	eax, [edx+4Ch]
		mov	ecx, [eax+18h]
		mov	ecx, [ecx+48h]
		mov	esi, [ebx+3Ch]
		mov	[esp+74h+var_5C], esi
		mov	esi, [ebx+38h]
		mov	[esp+74h+var_60], esi
		mov	[esp+74h+var_64], 1Dh
		movzx	ebx, byte ptr [ebx+34h]
		mov	[esp+74h+var_68], ebx
		mov	[esp+74h+var_6C], 0
		mov	[esp+74h+var_70], edx
		mov	[esp+74h+Str2],	eax
		call	dword ptr [ecx+10h]
		mov	eax, 3
		add	esp, 6Ch
		pop	ebx
		pop	esi
		pop	edi
		leave
		retn
; ---------------------------------------------------------------------------

loc_62B9B8C8:				; CODE XREF: silc_client_command_watch+26Ej
		call	sub_62B953CC
		mov	edi, eax
		mov	[esp+78h+var_6C], 1Dh
		mov	[esp+78h+var_70], 1
		mov	[esp+78h+Str2],	3
		mov	[esp+78h+Str1],	eax
		call	silc_buffer_format
		mov	eax, [ebp+var_1C]
		mov	[esp+78h+Str1],	eax
		call	silc_public_key_payload_encode
		mov	edx, eax
		test	eax, eax
		jz	short loc_62B9B964
		mov	ecx, [eax+4]
		mov	[ebp+var_30], ecx
		mov	eax, [eax+8]
		sub	eax, ecx

loc_62B9B90B:				; CODE XREF: silc_client_command_watch+38Dj
		xor	ecx, ecx
		cmp	[ebp+var_31], 2Dh
		setz	cl
		mov	[esp+78h+var_6C], ecx
		mov	[esp+78h+var_70], eax
		mov	eax, [ebp+var_30]
		mov	[esp+78h+Str2],	eax
		mov	[esp+78h+Str1],	edi
		mov	[ebp+var_38], edx
		call	silc_argument_payload_encode_one
		mov	edi, eax
		mov	edx, [ebp+var_38]
		mov	eax, edx
		call	sub_62B949E8
		mov	eax, [ebp+var_1C]
		mov	[esp+78h+Str1],	eax
		call	silc_pkcs_public_key_free
		mov	edx, [ebp+var_2C]
		test	edx, edx
		jz	short loc_62B9B971
		mov	edx, [edi+4]
		mov	[ebp+var_30], edx
		mov	ecx, [edi+8]
		sub	ecx, edx
		mov	[ebp+var_3C], ecx
		mov	edx, 4
		jmp	loc_62B9B6AC
; ---------------------------------------------------------------------------

loc_62B9B964:				; CODE XREF: silc_client_command_watch+31Ej
		xor	eax, eax
		mov	[ebp+var_30], 0
		jmp	short loc_62B9B90B
; ---------------------------------------------------------------------------

loc_62B9B96F:				; CODE XREF: silc_client_command_watch+254j
		xor	edi, edi

loc_62B9B971:				; CODE XREF: silc_client_command_watch+36Aj
		mov	edx, 4
		jmp	loc_62B9B698
silc_client_command_watch endp

; ---------------------------------------------------------------------------
		align 4
; Exported entry  93. silc_client_commands_unregister

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public silc_client_commands_unregister
silc_client_commands_unregister	proc near ; CODE XREF: silc_client_st_stop+18p

var_C8		= dword	ptr -0C8h
var_AC		= dword	ptr -0ACh
var_9C		= dword	ptr -9Ch
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		sub	esp, 0BCh
		mov	esi, [ebp+arg_0]
		mov	eax, [esi+18h]
		mov	edx, [eax+58h]
		mov	[eax+60h], edx
		and	byte ptr [eax+68h], 0FDh
		mov	eax, [esi+18h]
		nop

loc_62B9B99C:				; CODE XREF: silc_client_commands_unregister+43j
					; silc_client_commands_unregister+4Cj ...
		mov	ebx, [eax+60h]
		test	ebx, ebx
		jz	loc_62B9BA3C
		test	byte ptr [eax+68h], 2
		jz	loc_62B9CC24
		movzx	edx, word ptr [eax+66h]
		mov	edx, [ebx+edx]

loc_62B9B9B8:				; CODE XREF: silc_client_commands_unregister+12AFj
		mov	[eax+60h], edx
		cmp	byte ptr [ebx+4], 1
		jnz	short loc_62B9B99C
		cmp	dword ptr [ebx+8], offset silc_client_command_whois
		jnz	short loc_62B9B99C
		cmp	dword ptr [ebx+0Ch], offset silc_client_command_reply_whois
		jnz	short loc_62B9B99C
		mov	[ebp+var_20], eax
		mov	edx, [eax+58h]
		mov	[ebp+var_AC], edx
		test	edx, edx
		jz	short loc_62B9BA19
		cmp	ebx, edx
		jz	loc_62B9DB38
		movzx	edx, word ptr [eax+64h]
		mov	[ebp+var_1C], edx
		mov	ecx, [ebp+var_AC]
		mov	[ebp+var_24], eax
		jmp	short loc_62B9BA0A
; ---------------------------------------------------------------------------
		align 10h

loc_62B9BA00:				; CODE XREF: silc_client_commands_unregister+95j
		cmp	ebx, eax
		jz	loc_62B9CF8B
		mov	ecx, eax

loc_62B9BA0A:				; CODE XREF: silc_client_commands_unregister+7Fj
		lea	edi, [ecx+edx]
		mov	eax, [edi]
		test	eax, eax
		jnz	short loc_62B9BA00
		mov	[ebp+var_AC], ecx

loc_62B9BA19:				; CODE XREF: silc_client_commands_unregister+65j
					; silc_client_commands_unregister+1659j
		mov	ecx, [ebp+var_20]
		cmp	ebx, [ecx+5Ch]
		jz	loc_62B9CEDF

loc_62B9BA25:				; CODE XREF: silc_client_commands_unregister+156Cj
		mov	eax, [ebx+10h]
		mov	[esp+0C8h+var_C8], eax
		call	silc_free
		mov	[esp+0C8h+var_C8], ebx
		call	silc_free
		mov	eax, [esi+18h]
		nop

loc_62B9BA3C:				; CODE XREF: silc_client_commands_unregister+25j
		mov	edx, [eax+58h]
		mov	[eax+60h], edx
		and	byte ptr [eax+68h], 0FDh
		mov	eax, [esi+18h]
		lea	esi, [esi+0]

loc_62B9BA4C:				; CODE XREF: silc_client_commands_unregister+F3j
					; silc_client_commands_unregister+FCj ...
		mov	ebx, [eax+60h]
		test	ebx, ebx
		jz	loc_62B9BAEC
		test	byte ptr [eax+68h], 2
		jz	loc_62B9CC30
		movzx	edx, word ptr [eax+66h]
		mov	edx, [ebx+edx]

loc_62B9BA68:				; CODE XREF: silc_client_commands_unregister+12BBj
		mov	[eax+60h], edx
		cmp	byte ptr [ebx+4], 2
		jnz	short loc_62B9BA4C
		cmp	dword ptr [ebx+8], offset silc_client_command_whowas
		jnz	short loc_62B9BA4C
		cmp	dword ptr [ebx+0Ch], offset silc_client_command_reply_whowas
		jnz	short loc_62B9BA4C
		mov	[ebp+var_1C], eax
		mov	edx, [eax+58h]
		mov	[ebp+var_AC], edx
		test	edx, edx
		jz	short loc_62B9BAC9
		cmp	ebx, edx
		jz	loc_62B9DB57
		movzx	edx, word ptr [eax+64h]
		mov	[ebp+var_20], edx
		mov	ecx, [ebp+var_AC]
		mov	[ebp+var_24], eax
		jmp	short loc_62B9BABA
; ---------------------------------------------------------------------------
		align 10h

loc_62B9BAB0:				; CODE XREF: silc_client_commands_unregister+145j
		cmp	ebx, eax
		jz	loc_62B9CF3C
		mov	ecx, eax

loc_62B9BABA:				; CODE XREF: silc_client_commands_unregister+12Fj
		lea	edi, [ecx+edx]
		mov	eax, [edi]
		test	eax, eax
		jnz	short loc_62B9BAB0
		mov	[ebp+var_AC], ecx

loc_62B9BAC9:				; CODE XREF: silc_client_commands_unregister+115j
					; silc_client_commands_unregister+160Aj
		mov	ecx, [ebp+var_1C]
		cmp	ebx, [ecx+5Ch]
		jz	loc_62B9CED1

loc_62B9BAD5:				; CODE XREF: silc_client_commands_unregister+155Ej
		mov	eax, [ebx+10h]
		mov	[esp+0C8h+var_C8], eax
		call	silc_free
		mov	[esp+0C8h+var_C8], ebx
		call	silc_free
		mov	eax, [esi+18h]
		nop

loc_62B9BAEC:				; CODE XREF: silc_client_commands_unregister+D5j
		mov	edx, [eax+58h]
		mov	[eax+60h], edx
		and	byte ptr [eax+68h], 0FDh
		mov	eax, [esi+18h]
		lea	esi, [esi+0]

loc_62B9BAFC:				; CODE XREF: silc_client_commands_unregister+1A3j
					; silc_client_commands_unregister+1ACj	...
		mov	ebx, [eax+60h]
		test	ebx, ebx
		jz	loc_62B9BB9C
		test	byte ptr [eax+68h], 2
		jz	loc_62B9CC3C
		movzx	edx, word ptr [eax+66h]
		mov	edx, [ebx+edx]

loc_62B9BB18:				; CODE XREF: silc_client_commands_unregister+12C7j
		mov	[eax+60h], edx
		cmp	byte ptr [ebx+4], 3
		jnz	short loc_62B9BAFC
		cmp	dword ptr [ebx+8], offset silc_client_command_identify
		jnz	short loc_62B9BAFC
		cmp	dword ptr [ebx+0Ch], offset silc_client_command_reply_identify
		jnz	short loc_62B9BAFC
		mov	[ebp+var_1C], eax
		mov	edx, [eax+58h]
		mov	[ebp+var_AC], edx
		test	edx, edx
		jz	short loc_62B9BB79
		cmp	ebx, edx
		jz	loc_62B9DB76
		movzx	edx, word ptr [eax+64h]
		mov	[ebp+var_20], edx
		mov	ecx, [ebp+var_AC]
		mov	[ebp+var_24], eax
		jmp	short loc_62B9BB6A
; ---------------------------------------------------------------------------
		align 10h

loc_62B9BB60:				; CODE XREF: silc_client_commands_unregister+1F5j
		cmp	ebx, eax
		jz	loc_62B9D606
		mov	ecx, eax

loc_62B9BB6A:				; CODE XREF: silc_client_commands_unregister+1DFj
		lea	edi, [ecx+edx]
		mov	eax, [edi]
		test	eax, eax
		jnz	short loc_62B9BB60
		mov	[ebp+var_AC], ecx

loc_62B9BB79:				; CODE XREF: silc_client_commands_unregister+1C5j
					; silc_client_commands_unregister+1CD4j
		mov	ecx, [ebp+var_1C]
		cmp	ebx, [ecx+5Ch]
		jz	loc_62B9CEB5

loc_62B9BB85:				; CODE XREF: silc_client_commands_unregister+1542j
		mov	eax, [ebx+10h]
		mov	[esp+0C8h+var_C8], eax
		call	silc_free
		mov	[esp+0C8h+var_C8], ebx
		call	silc_free
		mov	eax, [esi+18h]
		nop

loc_62B9BB9C:				; CODE XREF: silc_client_commands_unregister+185j
		mov	edx, [eax+58h]
		mov	[eax+60h], edx
		and	byte ptr [eax+68h], 0FDh
		mov	eax, [esi+18h]
		lea	esi, [esi+0]

loc_62B9BBAC:				; CODE XREF: silc_client_commands_unregister+253j
					; silc_client_commands_unregister+25Cj	...
		mov	ebx, [eax+60h]
		test	ebx, ebx
		jz	loc_62B9BC4C
		test	byte ptr [eax+68h], 2
		jz	loc_62B9CC48
		movzx	edx, word ptr [eax+66h]
		mov	edx, [ebx+edx]

loc_62B9BBC8:				; CODE XREF: silc_client_commands_unregister+12D3j
		mov	[eax+60h], edx
		cmp	byte ptr [ebx+4], 4
		jnz	short loc_62B9BBAC
		cmp	dword ptr [ebx+8], offset silc_client_command_nick
		jnz	short loc_62B9BBAC
		cmp	dword ptr [ebx+0Ch], offset silc_client_command_reply_nick
		jnz	short loc_62B9BBAC
		mov	[ebp+var_1C], eax
		mov	edx, [eax+58h]
		mov	[ebp+var_AC], edx
		test	edx, edx
		jz	short loc_62B9BC29
		cmp	ebx, edx
		jz	loc_62B9DAFA
		movzx	edx, word ptr [eax+64h]
		mov	[ebp+var_20], edx
		mov	ecx, [ebp+var_AC]
		mov	[ebp+var_24], eax
		jmp	short loc_62B9BC1A
; ---------------------------------------------------------------------------
		align 10h

loc_62B9BC10:				; CODE XREF: silc_client_commands_unregister+2A5j
		cmp	ebx, eax
		jz	loc_62B9D38E
		mov	ecx, eax

loc_62B9BC1A:				; CODE XREF: silc_client_commands_unregister+28Fj
		lea	edi, [ecx+edx]
		mov	eax, [edi]
		test	eax, eax
		jnz	short loc_62B9BC10
		mov	[ebp+var_AC], ecx

loc_62B9BC29:				; CODE XREF: silc_client_commands_unregister+275j
					; silc_client_commands_unregister+1A5Cj
		mov	ecx, [ebp+var_1C]
		cmp	ebx, [ecx+5Ch]
		jz	loc_62B9CE7D

loc_62B9BC35:				; CODE XREF: silc_client_commands_unregister+150Aj
		mov	eax, [ebx+10h]
		mov	[esp+0C8h+var_C8], eax
		call	silc_free
		mov	[esp+0C8h+var_C8], ebx
		call	silc_free
		mov	eax, [esi+18h]
		nop

loc_62B9BC4C:				; CODE XREF: silc_client_commands_unregister+235j
		mov	edx, [eax+58h]
		mov	[eax+60h], edx
		and	byte ptr [eax+68h], 0FDh
		mov	eax, [esi+18h]
		lea	esi, [esi+0]

loc_62B9BC5C:				; CODE XREF: silc_client_commands_unregister+303j
					; silc_client_commands_unregister+30Cj	...
		mov	ebx, [eax+60h]
		test	ebx, ebx
		jz	loc_62B9BCFC
		test	byte ptr [eax+68h], 2
		jz	loc_62B9CC54
		movzx	edx, word ptr [eax+66h]
		mov	edx, [ebx+edx]

loc_62B9BC78:				; CODE XREF: silc_client_commands_unregister+12DFj
		mov	[eax+60h], edx
		cmp	byte ptr [ebx+4], 5
		jnz	short loc_62B9BC5C
		cmp	dword ptr [ebx+8], offset silc_client_command_list
		jnz	short loc_62B9BC5C
		cmp	dword ptr [ebx+0Ch], offset silc_client_command_reply_list
		jnz	short loc_62B9BC5C
		mov	[ebp+var_1C], eax
		mov	edx, [eax+58h]
		mov	[ebp+var_AC], edx
		test	edx, edx
		jz	short loc_62B9BCD9
		cmp	ebx, edx
		jz	loc_62B9D9C4
		movzx	edx, word ptr [eax+64h]
		mov	[ebp+var_20], edx
		mov	ecx, [ebp+var_AC]
		mov	[ebp+var_24], eax
		jmp	short loc_62B9BCCA
; ---------------------------------------------------------------------------
		align 10h

loc_62B9BCC0:				; CODE XREF: silc_client_commands_unregister+355j
		cmp	ebx, eax
		jz	loc_62B9D2A1
		mov	ecx, eax

loc_62B9BCCA:				; CODE XREF: silc_client_commands_unregister+33Fj
		lea	edi, [ecx+edx]
		mov	eax, [edi]
		test	eax, eax
		jnz	short loc_62B9BCC0
		mov	[ebp+var_AC], ecx

loc_62B9BCD9:				; CODE XREF: silc_client_commands_unregister+325j
					; silc_client_commands_unregister+196Fj
		mov	ecx, [ebp+var_1C]
		cmp	ebx, [ecx+5Ch]
		jz	loc_62B9CE6F

loc_62B9BCE5:				; CODE XREF: silc_client_commands_unregister+14FCj
		mov	eax, [ebx+10h]
		mov	[esp+0C8h+var_C8], eax
		call	silc_free
		mov	[esp+0C8h+var_C8], ebx
		call	silc_free
		mov	eax, [esi+18h]
		nop

loc_62B9BCFC:				; CODE XREF: silc_client_commands_unregister+2E5j
		mov	edx, [eax+58h]
		mov	[eax+60h], edx
		and	byte ptr [eax+68h], 0FDh
		mov	eax, [esi+18h]
		lea	esi, [esi+0]

loc_62B9BD0C:				; CODE XREF: silc_client_commands_unregister+3B3j
					; silc_client_commands_unregister+3BCj	...
		mov	ebx, [eax+60h]
		test	ebx, ebx
		jz	loc_62B9BDAC
		test	byte ptr [eax+68h], 2
		jz	loc_62B9CC60
		movzx	edx, word ptr [eax+66h]
		mov	edx, [ebx+edx]

loc_62B9BD28:				; CODE XREF: silc_client_commands_unregister+12EBj
		mov	[eax+60h], edx
		cmp	byte ptr [ebx+4], 6
		jnz	short loc_62B9BD0C
		cmp	dword ptr [ebx+8], offset silc_client_command_topic
		jnz	short loc_62B9BD0C
		cmp	dword ptr [ebx+0Ch], offset silc_client_command_reply_topic
		jnz	short loc_62B9BD0C
		mov	[ebp+var_1C], eax
		mov	edx, [eax+58h]
		mov	[ebp+var_AC], edx
		test	edx, edx
		jz	short loc_62B9BD89
		cmp	ebx, edx
		jz	loc_62B9DABC
		movzx	edx, word ptr [eax+64h]
		mov	[ebp+var_20], edx
		mov	ecx, [ebp+var_AC]
		mov	[ebp+var_24], eax
		jmp	short loc_62B9BD7A
; ---------------------------------------------------------------------------
		align 10h

loc_62B9BD70:				; CODE XREF: silc_client_commands_unregister+405j
		cmp	ebx, eax
		jz	loc_62B9D252
		mov	ecx, eax

loc_62B9BD7A:				; CODE XREF: silc_client_commands_unregister+3EFj
		lea	edi, [ecx+edx]
		mov	eax, [edi]
		test	eax, eax
		jnz	short loc_62B9BD70
		mov	[ebp+var_AC], ecx

loc_62B9BD89:				; CODE XREF: silc_client_commands_unregister+3D5j
					; silc_client_commands_unregister+1920j
		mov	ecx, [ebp+var_1C]
		cmp	ebx, [ecx+5Ch]
		jz	loc_62B9CE61

loc_62B9BD95:				; CODE XREF: silc_client_commands_unregister+14EEj
		mov	eax, [ebx+10h]
		mov	[esp+0C8h+var_C8], eax
		call	silc_free
		mov	[esp+0C8h+var_C8], ebx
		call	silc_free
		mov	eax, [esi+18h]
		nop

loc_62B9BDAC:				; CODE XREF: silc_client_commands_unregister+395j
		mov	edx, [eax+58h]
		mov	[eax+60h], edx
		and	byte ptr [eax+68h], 0FDh
		mov	eax, [esi+18h]
		lea	esi, [esi+0]

loc_62B9BDBC:				; CODE XREF: silc_client_commands_unregister+463j
					; silc_client_commands_unregister+46Cj	...
		mov	ebx, [eax+60h]
		test	ebx, ebx
		jz	loc_62B9BE5C
		test	byte ptr [eax+68h], 2
		jz	loc_62B9CC6C
		movzx	edx, word ptr [eax+66h]
		mov	edx, [ebx+edx]

loc_62B9BDD8:				; CODE XREF: silc_client_commands_unregister+12F7j
		mov	[eax+60h], edx
		cmp	byte ptr [ebx+4], 7
		jnz	short loc_62B9BDBC
		cmp	dword ptr [ebx+8], offset silc_client_command_invite
		jnz	short loc_62B9BDBC
		cmp	dword ptr [ebx+0Ch], offset silc_client_command_reply_invite
		jnz	short loc_62B9BDBC
		mov	[ebp+var_1C], eax
		mov	edx, [eax+58h]
		mov	[ebp+var_AC], edx
		test	edx, edx
		jz	short loc_62B9BE39
		cmp	ebx, edx
		jz	loc_62B9DA02
		movzx	edx, word ptr [eax+64h]
		mov	[ebp+var_20], edx
		mov	ecx, [ebp+var_AC]
		mov	[ebp+var_24], eax
		jmp	short loc_62B9BE2A
; ---------------------------------------------------------------------------
		align 10h

loc_62B9BE20:				; CODE XREF: silc_client_commands_unregister+4B5j
		cmp	ebx, eax
		jz	loc_62B9D3DD
		mov	ecx, eax

loc_62B9BE2A:				; CODE XREF: silc_client_commands_unregister+49Fj
		lea	edi, [ecx+edx]
		mov	eax, [edi]
		test	eax, eax
		jnz	short loc_62B9BE20
		mov	[ebp+var_AC], ecx

loc_62B9BE39:				; CODE XREF: silc_client_commands_unregister+485j
					; silc_client_commands_unregister+1AABj
		mov	ecx, [ebp+var_1C]
		cmp	ebx, [ecx+5Ch]
		jz	loc_62B9CE53

loc_62B9BE45:				; CODE XREF: silc_client_commands_unregister+14E0j
		mov	eax, [ebx+10h]
		mov	[esp+0C8h+var_C8], eax
		call	silc_free
		mov	[esp+0C8h+var_C8], ebx
		call	silc_free
		mov	eax, [esi+18h]
		nop

loc_62B9BE5C:				; CODE XREF: silc_client_commands_unregister+445j
		mov	edx, [eax+58h]
		mov	[eax+60h], edx
		and	byte ptr [eax+68h], 0FDh
		mov	eax, [esi+18h]
		lea	esi, [esi+0]

loc_62B9BE6C:				; CODE XREF: silc_client_commands_unregister+513j
					; silc_client_commands_unregister+51Cj	...
		mov	ebx, [eax+60h]
		test	ebx, ebx
		jz	loc_62B9BF0C
		test	byte ptr [eax+68h], 2
		jz	loc_62B9CC78
		movzx	edx, word ptr [eax+66h]
		mov	edx, [ebx+edx]

loc_62B9BE88:				; CODE XREF: silc_client_commands_unregister+1303j
		mov	[eax+60h], edx
		cmp	byte ptr [ebx+4], 8
		jnz	short loc_62B9BE6C
		cmp	dword ptr [ebx+8], offset silc_client_command_quit
		jnz	short loc_62B9BE6C
		cmp	dword ptr [ebx+0Ch], offset silc_client_command_reply_quit
		jnz	short loc_62B9BE6C
		mov	[ebp+var_1C], eax
		mov	edx, [eax+58h]
		mov	[ebp+var_AC], edx
		test	edx, edx
		jz	short loc_62B9BEE9
		cmp	ebx, edx
		jz	loc_62B9DADB
		movzx	edx, word ptr [eax+64h]
		mov	[ebp+var_20], edx
		mov	ecx, [ebp+var_AC]
		mov	[ebp+var_24], eax
		jmp	short loc_62B9BEDA
; ---------------------------------------------------------------------------
		align 10h

loc_62B9BED0:				; CODE XREF: silc_client_commands_unregister+565j
		cmp	ebx, eax
		jz	loc_62B9D4CA
		mov	ecx, eax

loc_62B9BEDA:				; CODE XREF: silc_client_commands_unregister+54Fj
		lea	edi, [ecx+edx]
		mov	eax, [edi]
		test	eax, eax
		jnz	short loc_62B9BED0
		mov	[ebp+var_AC], ecx

loc_62B9BEE9:				; CODE XREF: silc_client_commands_unregister+535j
					; silc_client_commands_unregister+1B98j
		mov	ecx, [ebp+var_1C]
		cmp	ebx, [ecx+5Ch]
		jz	loc_62B9CE99

loc_62B9BEF5:				; CODE XREF: silc_client_commands_unregister+1526j
		mov	eax, [ebx+10h]
		mov	[esp+0C8h+var_C8], eax
		call	silc_free
		mov	[esp+0C8h+var_C8], ebx
		call	silc_free
		mov	eax, [esi+18h]
		nop

loc_62B9BF0C:				; CODE XREF: silc_client_commands_unregister+4F5j
		mov	edx, [eax+58h]
		mov	[eax+60h], edx
		and	byte ptr [eax+68h], 0FDh
		mov	eax, [esi+18h]
		lea	esi, [esi+0]

loc_62B9BF1C:				; CODE XREF: silc_client_commands_unregister+5C3j
					; silc_client_commands_unregister+5CCj	...
		mov	ebx, [eax+60h]
		test	ebx, ebx
		jz	loc_62B9BFBC
		test	byte ptr [eax+68h], 2
		jz	loc_62B9CC84
		movzx	edx, word ptr [eax+66h]
		mov	edx, [ebx+edx]

loc_62B9BF38:				; CODE XREF: silc_client_commands_unregister+130Fj
		mov	[eax+60h], edx
		cmp	byte ptr [ebx+4], 9
		jnz	short loc_62B9BF1C
		cmp	dword ptr [ebx+8], offset silc_client_command_kill
		jnz	short loc_62B9BF1C
		cmp	dword ptr [ebx+0Ch], offset silc_client_command_reply_kill
		jnz	short loc_62B9BF1C
		mov	[ebp+var_1C], eax
		mov	edx, [eax+58h]
		mov	[ebp+var_AC], edx
		test	edx, edx
		jz	short loc_62B9BF99
		cmp	ebx, edx
		jz	loc_62B9D9A5
		movzx	edx, word ptr [eax+64h]
		mov	[ebp+var_20], edx
		mov	ecx, [ebp+var_AC]
		mov	[ebp+var_24], eax
		jmp	short loc_62B9BF8A
; ---------------------------------------------------------------------------
		align 10h

loc_62B9BF80:				; CODE XREF: silc_client_commands_unregister+615j
		cmp	ebx, eax
		jz	loc_62B9D655
		mov	ecx, eax

loc_62B9BF8A:				; CODE XREF: silc_client_commands_unregister+5FFj
		lea	edi, [ecx+edx]
		mov	eax, [edi]
		test	eax, eax
		jnz	short loc_62B9BF80
		mov	[ebp+var_AC], ecx

loc_62B9BF99:				; CODE XREF: silc_client_commands_unregister+5E5j
					; silc_client_commands_unregister+1D23j
		mov	ecx, [ebp+var_1C]
		cmp	ebx, [ecx+5Ch]
		jz	loc_62B9CE8B

loc_62B9BFA5:				; CODE XREF: silc_client_commands_unregister+1518j
		mov	eax, [ebx+10h]
		mov	[esp+0C8h+var_C8], eax
		call	silc_free
		mov	[esp+0C8h+var_C8], ebx
		call	silc_free
		mov	eax, [esi+18h]
		nop

loc_62B9BFBC:				; CODE XREF: silc_client_commands_unregister+5A5j
		mov	edx, [eax+58h]
		mov	[eax+60h], edx
		and	byte ptr [eax+68h], 0FDh
		mov	eax, [esi+18h]
		lea	esi, [esi+0]

loc_62B9BFCC:				; CODE XREF: silc_client_commands_unregister+673j
					; silc_client_commands_unregister+67Cj	...
		mov	ebx, [eax+60h]
		test	ebx, ebx
		jz	loc_62B9C06C
		test	byte ptr [eax+68h], 2
		jz	loc_62B9CC90
		movzx	edx, word ptr [eax+66h]
		mov	edx, [ebx+edx]

loc_62B9BFE8:				; CODE XREF: silc_client_commands_unregister+131Bj
		mov	[eax+60h], edx
		cmp	byte ptr [ebx+4], 0Ah
		jnz	short loc_62B9BFCC
		cmp	dword ptr [ebx+8], offset silc_client_command_info
		jnz	short loc_62B9BFCC
		cmp	dword ptr [ebx+0Ch], offset silc_client_command_reply_info
		jnz	short loc_62B9BFCC
		mov	[ebp+var_1C], eax
		mov	edx, [eax+58h]
		mov	[ebp+var_AC], edx
		test	edx, edx
		jz	short loc_62B9C049
		cmp	ebx, edx
		jz	loc_62B9DA9D
		movzx	edx, word ptr [eax+64h]
		mov	[ebp+var_20], edx
		mov	ecx, [ebp+var_AC]
		mov	[ebp+var_24], eax
		jmp	short loc_62B9C03A
; ---------------------------------------------------------------------------
		align 10h

loc_62B9C030:				; CODE XREF: silc_client_commands_unregister+6C5j
		cmp	ebx, eax
		jz	loc_62B9D519
		mov	ecx, eax

loc_62B9C03A:				; CODE XREF: silc_client_commands_unregister+6AFj
		lea	edi, [ecx+edx]
		mov	eax, [edi]
		test	eax, eax
		jnz	short loc_62B9C030
		mov	[ebp+var_AC], ecx

loc_62B9C049:				; CODE XREF: silc_client_commands_unregister+695j
					; silc_client_commands_unregister+1BE7j
		mov	ecx, [ebp+var_1C]
		cmp	ebx, [ecx+5Ch]
		jz	loc_62B9CEA7

loc_62B9C055:				; CODE XREF: silc_client_commands_unregister+1534j
		mov	eax, [ebx+10h]
		mov	[esp+0C8h+var_C8], eax
		call	silc_free
		mov	[esp+0C8h+var_C8], ebx
		call	silc_free
		mov	eax, [esi+18h]
		nop

loc_62B9C06C:				; CODE XREF: silc_client_commands_unregister+655j
		mov	edx, [eax+58h]
		mov	[eax+60h], edx
		and	byte ptr [eax+68h], 0FDh
		mov	eax, [esi+18h]
		lea	esi, [esi+0]

loc_62B9C07C:				; CODE XREF: silc_client_commands_unregister+723j
					; silc_client_commands_unregister+72Cj	...
		mov	ebx, [eax+60h]
		test	ebx, ebx
		jz	loc_62B9C11C
		test	byte ptr [eax+68h], 2
		jz	loc_62B9CC9C
		movzx	edx, word ptr [eax+66h]
		mov	edx, [ebx+edx]

loc_62B9C098:				; CODE XREF: silc_client_commands_unregister+1327j
		mov	[eax+60h], edx
		cmp	byte ptr [ebx+4], 0Bh
		jnz	short loc_62B9C07C
		cmp	dword ptr [ebx+8], offset silc_client_command_stats
		jnz	short loc_62B9C07C
		cmp	dword ptr [ebx+0Ch], offset silc_client_command_reply_stats
		jnz	short loc_62B9C07C
		mov	[ebp+var_1C], eax
		mov	edx, [eax+58h]
		mov	[ebp+var_AC], edx
		test	edx, edx
		jz	short loc_62B9C0F9
		cmp	ebx, edx
		jz	loc_62B9D9E3
		movzx	edx, word ptr [eax+64h]
		mov	[ebp+var_20], edx
		mov	ecx, [ebp+var_AC]
		mov	[ebp+var_24], eax
		jmp	short loc_62B9C0EA
; ---------------------------------------------------------------------------
		align 10h

loc_62B9C0E0:				; CODE XREF: silc_client_commands_unregister+775j
		cmp	ebx, eax
		jz	loc_62B9D6F3
		mov	ecx, eax

loc_62B9C0EA:				; CODE XREF: silc_client_commands_unregister+75Fj
		lea	edi, [ecx+edx]
		mov	eax, [edi]
		test	eax, eax
		jnz	short loc_62B9C0E0
		mov	[ebp+var_AC], ecx

loc_62B9C0F9:				; CODE XREF: silc_client_commands_unregister+745j
					; silc_client_commands_unregister+1DBDj
		mov	ecx, [ebp+var_1C]
		cmp	ebx, [ecx+5Ch]
		jz	loc_62B9CE45

loc_62B9C105:				; CODE XREF: silc_client_commands_unregister+14D2j
		mov	eax, [ebx+10h]
		mov	[esp+0C8h+var_C8], eax
		call	silc_free
		mov	[esp+0C8h+var_C8], ebx
		call	silc_free
		mov	eax, [esi+18h]
		nop

loc_62B9C11C:				; CODE XREF: silc_client_commands_unregister+705j
		mov	edx, [eax+58h]
		mov	[eax+60h], edx
		and	byte ptr [eax+68h], 0FDh
		mov	eax, [esi+18h]
		lea	esi, [esi+0]

loc_62B9C12C:				; CODE XREF: silc_client_commands_unregister+7D3j
					; silc_client_commands_unregister+7DCj	...
		mov	ebx, [eax+60h]
		test	ebx, ebx
		jz	loc_62B9C1CC
		test	byte ptr [eax+68h], 2
		jz	loc_62B9CCA8
		movzx	edx, word ptr [eax+66h]
		mov	edx, [ebx+edx]

loc_62B9C148:				; CODE XREF: silc_client_commands_unregister+1333j
		mov	[eax+60h], edx
		cmp	byte ptr [ebx+4], 0Ch
		jnz	short loc_62B9C12C
		cmp	dword ptr [ebx+8], offset silc_client_command_ping
		jnz	short loc_62B9C12C
		cmp	dword ptr [ebx+0Ch], offset silc_client_command_reply_ping
		jnz	short loc_62B9C12C
		mov	[ebp+var_1C], eax
		mov	edx, [eax+58h]
		mov	[ebp+var_AC], edx
		test	edx, edx
		jz	short loc_62B9C1A9
		cmp	ebx, edx
		jz	loc_62B9D8EB
		movzx	edx, word ptr [eax+64h]
		mov	[ebp+var_20], edx
		mov	ecx, [ebp+var_AC]
		mov	[ebp+var_24], eax
		jmp	short loc_62B9C19A
; ---------------------------------------------------------------------------
		align 10h

loc_62B9C190:				; CODE XREF: silc_client_commands_unregister+825j
		cmp	ebx, eax
		jz	loc_62B9D47B
		mov	ecx, eax

loc_62B9C19A:				; CODE XREF: silc_client_commands_unregister+80Fj
		lea	edi, [ecx+edx]
		mov	eax, [edi]
		test	eax, eax
		jnz	short loc_62B9C190
		mov	[ebp+var_AC], ecx

loc_62B9C1A9:				; CODE XREF: silc_client_commands_unregister+7F5j
					; silc_client_commands_unregister+1B49j
		mov	ecx, [ebp+var_1C]
		cmp	ebx, [ecx+5Ch]
		jz	loc_62B9CDD5

loc_62B9C1B5:				; CODE XREF: silc_client_commands_unregister+1462j
		mov	eax, [ebx+10h]
		mov	[esp+0C8h+var_C8], eax
		call	silc_free
		mov	[esp+0C8h+var_C8], ebx
		call	silc_free
		mov	eax, [esi+18h]
		nop

loc_62B9C1CC:				; CODE XREF: silc_client_commands_unregister+7B5j
		mov	edx, [eax+58h]
		mov	[eax+60h], edx
		and	byte ptr [eax+68h], 0FDh
		mov	eax, [esi+18h]
		lea	esi, [esi+0]

loc_62B9C1DC:				; CODE XREF: silc_client_commands_unregister+883j
					; silc_client_commands_unregister+88Cj	...
		mov	ebx, [eax+60h]
		test	ebx, ebx
		jz	loc_62B9C27C
		test	byte ptr [eax+68h], 2
		jz	loc_62B9CCB4
		movzx	edx, word ptr [eax+66h]
		mov	edx, [ebx+edx]

loc_62B9C1F8:				; CODE XREF: silc_client_commands_unregister+133Fj
		mov	[eax+60h], edx
		cmp	byte ptr [ebx+4], 0Dh
		jnz	short loc_62B9C1DC
		cmp	dword ptr [ebx+8], offset silc_client_command_oper
		jnz	short loc_62B9C1DC
		cmp	dword ptr [ebx+0Ch], offset silc_client_command_reply_oper
		jnz	short loc_62B9C1DC
		mov	[ebp+var_1C], eax
		mov	edx, [eax+58h]
		mov	[ebp+var_AC], edx
		test	edx, edx
		jz	short loc_62B9C259
		cmp	ebx, edx
		jz	loc_62B9DBF2
		movzx	edx, word ptr [eax+64h]
		mov	[ebp+var_20], edx
		mov	ecx, [ebp+var_AC]
		mov	[ebp+var_24], eax
		jmp	short loc_62B9C24A
; ---------------------------------------------------------------------------
		align 10h

loc_62B9C240:				; CODE XREF: silc_client_commands_unregister+8D5j
		cmp	ebx, eax
		jz	loc_62B9D078
		mov	ecx, eax

loc_62B9C24A:				; CODE XREF: silc_client_commands_unregister+8BFj
		lea	edi, [ecx+edx]
		mov	eax, [edi]
		test	eax, eax
		jnz	short loc_62B9C240
		mov	[ebp+var_AC], ecx

loc_62B9C259:				; CODE XREF: silc_client_commands_unregister+8A5j
					; silc_client_commands_unregister+1746j
		mov	ecx, [ebp+var_1C]
		cmp	ebx, [ecx+5Ch]
		jz	loc_62B9CDC7

loc_62B9C265:				; CODE XREF: silc_client_commands_unregister+1454j
		mov	eax, [ebx+10h]
		mov	[esp+0C8h+var_C8], eax
		call	silc_free
		mov	[esp+0C8h+var_C8], ebx
		call	silc_free
		mov	eax, [esi+18h]
		nop

loc_62B9C27C:				; CODE XREF: silc_client_commands_unregister+865j
		mov	edx, [eax+58h]
		mov	[eax+60h], edx
		and	byte ptr [eax+68h], 0FDh
		mov	eax, [esi+18h]
		lea	esi, [esi+0]

loc_62B9C28C:				; CODE XREF: silc_client_commands_unregister+933j
					; silc_client_commands_unregister+93Cj	...
		mov	ebx, [eax+60h]
		test	ebx, ebx
		jz	loc_62B9C32C
		test	byte ptr [eax+68h], 2
		jz	loc_62B9CCC0
		movzx	edx, word ptr [eax+66h]
		mov	edx, [ebx+edx]

loc_62B9C2A8:				; CODE XREF: silc_client_commands_unregister+134Bj
		mov	[eax+60h], edx
		cmp	byte ptr [ebx+4], 0Eh
		jnz	short loc_62B9C28C
		cmp	dword ptr [ebx+8], offset silc_client_command_join
		jnz	short loc_62B9C28C
		cmp	dword ptr [ebx+0Ch], offset silc_client_command_reply_join
		jnz	short loc_62B9C28C
		mov	[ebp+var_20], eax
		mov	edx, [eax+58h]
		mov	[ebp+var_AC], edx
		test	edx, edx
		jz	short loc_62B9C309
		cmp	ebx, edx
		jz	loc_62B9D948
		movzx	edx, word ptr [eax+64h]
		mov	[ebp+var_1C], edx
		mov	ecx, [ebp+var_AC]
		mov	[ebp+var_24], eax
		jmp	short loc_62B9C2FA
; ---------------------------------------------------------------------------
		align 10h

loc_62B9C2F0:				; CODE XREF: silc_client_commands_unregister+985j
		cmp	ebx, eax
		jz	loc_62B9D2F0
		mov	ecx, eax

loc_62B9C2FA:				; CODE XREF: silc_client_commands_unregister+96Fj
		lea	edi, [ecx+edx]
		mov	eax, [edi]
		test	eax, eax
		jnz	short loc_62B9C2F0
		mov	[ebp+var_AC], ecx

loc_62B9C309:				; CODE XREF: silc_client_commands_unregister+955j
					; silc_client_commands_unregister+19BEj
		mov	ecx, [ebp+var_20]
		cmp	ebx, [ecx+5Ch]
		jz	loc_62B9CDB9

loc_62B9C315:				; CODE XREF: silc_client_commands_unregister+1446j
		mov	eax, [ebx+10h]
		mov	[esp+0C8h+var_C8], eax
		call	silc_free
		mov	[esp+0C8h+var_C8], ebx
		call	silc_free
		mov	eax, [esi+18h]
		nop

loc_62B9C32C:				; CODE XREF: silc_client_commands_unregister+915j
		mov	edx, [eax+58h]
		mov	[eax+60h], edx
		and	byte ptr [eax+68h], 0FDh
		mov	eax, [esi+18h]
		lea	esi, [esi+0]

loc_62B9C33C:				; CODE XREF: silc_client_commands_unregister+9E3j
					; silc_client_commands_unregister+9ECj	...
		mov	ebx, [eax+60h]
		test	ebx, ebx
		jz	loc_62B9C3DC
		test	byte ptr [eax+68h], 2
		jz	loc_62B9CCCC
		movzx	edx, word ptr [eax+66h]
		mov	edx, [ebx+edx]

loc_62B9C358:				; CODE XREF: silc_client_commands_unregister+1357j
		mov	[eax+60h], edx
		cmp	byte ptr [ebx+4], 0Fh
		jnz	short loc_62B9C33C
		cmp	dword ptr [ebx+8], offset silc_client_command_motd
		jnz	short loc_62B9C33C
		cmp	dword ptr [ebx+0Ch], offset silc_client_command_reply_motd
		jnz	short loc_62B9C33C
		mov	[ebp+var_1C], eax
		mov	edx, [eax+58h]
		mov	[ebp+var_AC], edx
		test	edx, edx
		jz	short loc_62B9C3B9
		cmp	ebx, edx
		jz	loc_62B9DA40
		movzx	edx, word ptr [eax+64h]
		mov	[ebp+var_20], edx
		mov	ecx, [ebp+var_AC]
		mov	[ebp+var_24], eax
		jmp	short loc_62B9C3AA
; ---------------------------------------------------------------------------
		align 10h

loc_62B9C3A0:				; CODE XREF: silc_client_commands_unregister+A35j
		cmp	ebx, eax
		jz	loc_62B9D029
		mov	ecx, eax

loc_62B9C3AA:				; CODE XREF: silc_client_commands_unregister+A1Fj
		lea	edi, [ecx+edx]
		mov	eax, [edi]
		test	eax, eax
		jnz	short loc_62B9C3A0
		mov	[ebp+var_AC], ecx

loc_62B9C3B9:				; CODE XREF: silc_client_commands_unregister+A05j
					; silc_client_commands_unregister+16F7j
		mov	ecx, [ebp+var_1C]
		cmp	ebx, [ecx+5Ch]
		jz	loc_62B9CDAB

loc_62B9C3C5:				; CODE XREF: silc_client_commands_unregister+1438j
		mov	eax, [ebx+10h]
		mov	[esp+0C8h+var_C8], eax
		call	silc_free
		mov	[esp+0C8h+var_C8], ebx
		call	silc_free
		mov	eax, [esi+18h]
		nop

loc_62B9C3DC:				; CODE XREF: silc_client_commands_unregister+9C5j
		mov	edx, [eax+58h]
		mov	[eax+60h], edx
		and	byte ptr [eax+68h], 0FDh
		mov	eax, [esi+18h]
		lea	esi, [esi+0]

loc_62B9C3EC:				; CODE XREF: silc_client_commands_unregister+A93j
					; silc_client_commands_unregister+A9Cj	...
		mov	ebx, [eax+60h]
		test	ebx, ebx
		jz	loc_62B9C48C
		test	byte ptr [eax+68h], 2
		jz	loc_62B9CCD8
		movzx	edx, word ptr [eax+66h]
		mov	edx, [ebx+edx]

loc_62B9C408:				; CODE XREF: silc_client_commands_unregister+1363j
		mov	[eax+60h], edx
		cmp	byte ptr [ebx+4], 10h
		jnz	short loc_62B9C3EC
		cmp	dword ptr [ebx+8], offset silc_client_command_umode
		jnz	short loc_62B9C3EC
		cmp	dword ptr [ebx+0Ch], offset silc_client_command_reply_umode
		jnz	short loc_62B9C3EC
		mov	[ebp+var_1C], eax
		mov	edx, [eax+58h]
		mov	[ebp+var_AC], edx
		test	edx, edx
		jz	short loc_62B9C469
		cmp	ebx, edx
		jz	loc_62B9D90A
		movzx	edx, word ptr [eax+64h]
		mov	[ebp+var_20], edx
		mov	ecx, [ebp+var_AC]
		mov	[ebp+var_24], eax
		jmp	short loc_62B9C45A
; ---------------------------------------------------------------------------
		align 10h

loc_62B9C450:				; CODE XREF: silc_client_commands_unregister+AE5j
		cmp	ebx, eax
		jz	loc_62B9D33F
		mov	ecx, eax

loc_62B9C45A:				; CODE XREF: silc_client_commands_unregister+ACFj
		lea	edi, [ecx+edx]
		mov	eax, [edi]
		test	eax, eax
		jnz	short loc_62B9C450
		mov	[ebp+var_AC], ecx

loc_62B9C469:				; CODE XREF: silc_client_commands_unregister+AB5j
					; silc_client_commands_unregister+1A0Dj
		mov	ecx, [ebp+var_1C]
		cmp	ebx, [ecx+5Ch]
		jz	loc_62B9CD9D

loc_62B9C475:				; CODE XREF: silc_client_commands_unregister+142Aj
		mov	eax, [ebx+10h]
		mov	[esp+0C8h+var_C8], eax
		call	silc_free
		mov	[esp+0C8h+var_C8], ebx
		call	silc_free
		mov	eax, [esi+18h]
		nop

loc_62B9C48C:				; CODE XREF: silc_client_commands_unregister+A75j
		mov	edx, [eax+58h]
		mov	[eax+60h], edx
		and	byte ptr [eax+68h], 0FDh
		mov	eax, [esi+18h]
		lea	esi, [esi+0]

loc_62B9C49C:				; CODE XREF: silc_client_commands_unregister+B43j
					; silc_client_commands_unregister+B4Cj	...
		mov	ebx, [eax+60h]
		test	ebx, ebx
		jz	loc_62B9C53C
		test	byte ptr [eax+68h], 2
		jz	loc_62B9CCE4
		movzx	edx, word ptr [eax+66h]
		mov	edx, [ebx+edx]

loc_62B9C4B8:				; CODE XREF: silc_client_commands_unregister+136Fj
		mov	[eax+60h], edx
		cmp	byte ptr [ebx+4], 11h
		jnz	short loc_62B9C49C
		cmp	dword ptr [ebx+8], offset silc_client_command_cmode
		jnz	short loc_62B9C49C
		cmp	dword ptr [ebx+0Ch], offset silc_client_command_reply_cmode
		jnz	short loc_62B9C49C
		mov	[ebp+var_1C], eax
		mov	edx, [eax+58h]
		mov	[ebp+var_AC], edx
		test	edx, edx
		jz	short loc_62B9C519
		cmp	ebx, edx
		jz	loc_62B9DBB4
		movzx	edx, word ptr [eax+64h]
		mov	[ebp+var_20], edx
		mov	ecx, [ebp+var_AC]
		mov	[ebp+var_24], eax
		jmp	short loc_62B9C50A
; ---------------------------------------------------------------------------
		align 10h

loc_62B9C500:				; CODE XREF: silc_client_commands_unregister+B95j
		cmp	ebx, eax
		jz	loc_62B9CFDA
		mov	ecx, eax

loc_62B9C50A:				; CODE XREF: silc_client_commands_unregister+B7Fj
		lea	edi, [ecx+edx]
		mov	eax, [edi]
		test	eax, eax
		jnz	short loc_62B9C500
		mov	[ebp+var_AC], ecx

loc_62B9C519:				; CODE XREF: silc_client_commands_unregister+B65j
					; silc_client_commands_unregister+16A8j
		mov	ecx, [ebp+var_1C]
		cmp	ebx, [ecx+5Ch]
		jz	loc_62B9CD8F

loc_62B9C525:				; CODE XREF: silc_client_commands_unregister+141Cj
		mov	eax, [ebx+10h]
		mov	[esp+0C8h+var_C8], eax
		call	silc_free
		mov	[esp+0C8h+var_C8], ebx
		call	silc_free
		mov	eax, [esi+18h]
		nop

loc_62B9C53C:				; CODE XREF: silc_client_commands_unregister+B25j
		mov	edx, [eax+58h]
		mov	[eax+60h], edx
		and	byte ptr [eax+68h], 0FDh
		mov	eax, [esi+18h]
		lea	esi, [esi+0]

loc_62B9C54C:				; CODE XREF: silc_client_commands_unregister+BF3j
					; silc_client_commands_unregister+BFCj	...
		mov	ebx, [eax+60h]
		test	ebx, ebx
		jz	loc_62B9C5EC
		test	byte ptr [eax+68h], 2
		jz	loc_62B9CCF0
		movzx	edx, word ptr [eax+66h]
		mov	edx, [ebx+edx]

loc_62B9C568:				; CODE XREF: silc_client_commands_unregister+137Bj
		mov	[eax+60h], edx
		cmp	byte ptr [ebx+4], 12h
		jnz	short loc_62B9C54C
		cmp	dword ptr [ebx+8], offset silc_client_command_cumode
		jnz	short loc_62B9C54C
		cmp	dword ptr [ebx+0Ch], offset silc_client_command_reply_cumode
		jnz	short loc_62B9C54C
		mov	[ebp+var_1C], eax
		mov	edx, [eax+58h]
		mov	[ebp+var_AC], edx
		test	edx, edx
		jz	short loc_62B9C5C9
		cmp	ebx, edx
		jz	loc_62B9D986
		movzx	edx, word ptr [eax+64h]
		mov	[ebp+var_20], edx
		mov	ecx, [ebp+var_AC]
		mov	[ebp+var_24], eax
		jmp	short loc_62B9C5BA
; ---------------------------------------------------------------------------
		align 10h

loc_62B9C5B0:				; CODE XREF: silc_client_commands_unregister+C45j
		cmp	ebx, eax
		jz	loc_62B9D42C
		mov	ecx, eax

loc_62B9C5BA:				; CODE XREF: silc_client_commands_unregister+C2Fj
		lea	edi, [ecx+edx]
		mov	eax, [edi]
		test	eax, eax
		jnz	short loc_62B9C5B0
		mov	[ebp+var_AC], ecx

loc_62B9C5C9:				; CODE XREF: silc_client_commands_unregister+C15j
					; silc_client_commands_unregister+1AFAj
		mov	ecx, [ebp+var_1C]
		cmp	ebx, [ecx+5Ch]
		jz	loc_62B9CD81

loc_62B9C5D5:				; CODE XREF: silc_client_commands_unregister+140Ej
		mov	eax, [ebx+10h]
		mov	[esp+0C8h+var_C8], eax
		call	silc_free
		mov	[esp+0C8h+var_C8], ebx
		call	silc_free
		mov	eax, [esi+18h]
		nop

loc_62B9C5EC:				; CODE XREF: silc_client_commands_unregister+BD5j
		mov	edx, [eax+58h]
		mov	[eax+60h], edx
		and	byte ptr [eax+68h], 0FDh
		mov	eax, [esi+18h]
		lea	esi, [esi+0]

loc_62B9C5FC:				; CODE XREF: silc_client_commands_unregister+CA3j
					; silc_client_commands_unregister+CACj	...
		mov	ebx, [eax+60h]
		test	ebx, ebx
		jz	loc_62B9C69C
		test	byte ptr [eax+68h], 2
		jz	loc_62B9CCFC
		movzx	edx, word ptr [eax+66h]
		mov	edx, [ebx+edx]

loc_62B9C618:				; CODE XREF: silc_client_commands_unregister+1387j
		mov	[eax+60h], edx
		cmp	byte ptr [ebx+4], 13h
		jnz	short loc_62B9C5FC
		cmp	dword ptr [ebx+8], offset silc_client_command_kick
		jnz	short loc_62B9C5FC
		cmp	dword ptr [ebx+0Ch], offset silc_client_command_reply_kick
		jnz	short loc_62B9C5FC
		mov	[ebp+var_1C], eax
		mov	edx, [eax+58h]
		mov	[ebp+var_AC], edx
		test	edx, edx
		jz	short loc_62B9C679
		cmp	ebx, edx
		jz	loc_62B9DA7E
		movzx	edx, word ptr [eax+64h]
		mov	[ebp+var_20], edx
		mov	ecx, [ebp+var_AC]
		mov	[ebp+var_24], eax
		jmp	short loc_62B9C66A
; ---------------------------------------------------------------------------
		align 10h

loc_62B9C660:				; CODE XREF: silc_client_commands_unregister+CF5j
		cmp	ebx, eax
		jz	loc_62B9D0C7
		mov	ecx, eax

loc_62B9C66A:				; CODE XREF: silc_client_commands_unregister+CDFj
		lea	edi, [ecx+edx]
		mov	eax, [edi]
		test	eax, eax
		jnz	short loc_62B9C660
		mov	[ebp+var_AC], ecx

loc_62B9C679:				; CODE XREF: silc_client_commands_unregister+CC5j
					; silc_client_commands_unregister+1795j
		mov	ecx, [ebp+var_1C]
		cmp	ebx, [ecx+5Ch]
		jz	loc_62B9CD73

loc_62B9C685:				; CODE XREF: silc_client_commands_unregister+1400j
		mov	eax, [ebx+10h]
		mov	[esp+0C8h+var_C8], eax
		call	silc_free
		mov	[esp+0C8h+var_C8], ebx
		call	silc_free
		mov	eax, [esi+18h]
		nop

loc_62B9C69C:				; CODE XREF: silc_client_commands_unregister+C85j
		mov	edx, [eax+58h]
		mov	[eax+60h], edx
		and	byte ptr [eax+68h], 0FDh
		mov	eax, [esi+18h]
		lea	esi, [esi+0]

loc_62B9C6AC:				; CODE XREF: silc_client_commands_unregister+D53j
					; silc_client_commands_unregister+D5Cj	...
		mov	ebx, [eax+60h]
		test	ebx, ebx
		jz	loc_62B9C74C
		test	byte ptr [eax+68h], 2
		jz	loc_62B9CD08
		movzx	edx, word ptr [eax+66h]
		mov	edx, [ebx+edx]

loc_62B9C6C8:				; CODE XREF: silc_client_commands_unregister+1393j
		mov	[eax+60h], edx
		cmp	byte ptr [ebx+4], 14h
		jnz	short loc_62B9C6AC
		cmp	dword ptr [ebx+8], offset silc_client_command_ban
		jnz	short loc_62B9C6AC
		cmp	dword ptr [ebx+0Ch], offset silc_client_command_reply_ban
		jnz	short loc_62B9C6AC
		mov	[ebp+var_1C], eax
		mov	edx, [eax+58h]
		mov	[ebp+var_AC], edx
		test	edx, edx
		jz	short loc_62B9C729
		cmp	ebx, edx
		jz	loc_62B9D929
		movzx	edx, word ptr [eax+64h]
		mov	[ebp+var_20], edx
		mov	ecx, [ebp+var_AC]
		mov	[ebp+var_24], eax
		jmp	short loc_62B9C71A
; ---------------------------------------------------------------------------
		align 10h

loc_62B9C710:				; CODE XREF: silc_client_commands_unregister+DA5j
		cmp	ebx, eax
		jz	loc_62B9D5B7
		mov	ecx, eax

loc_62B9C71A:				; CODE XREF: silc_client_commands_unregister+D8Fj
		lea	edi, [ecx+edx]
		mov	eax, [edi]
		test	eax, eax
		jnz	short loc_62B9C710
		mov	[ebp+var_AC], ecx

loc_62B9C729:				; CODE XREF: silc_client_commands_unregister+D75j
					; silc_client_commands_unregister+1C85j
		mov	ecx, [ebp+var_1C]
		cmp	ebx, [ecx+5Ch]
		jz	loc_62B9CE0D

loc_62B9C735:				; CODE XREF: silc_client_commands_unregister+149Aj
		mov	eax, [ebx+10h]
		mov	[esp+0C8h+var_C8], eax
		call	silc_free
		mov	[esp+0C8h+var_C8], ebx
		call	silc_free
		mov	eax, [esi+18h]
		nop

loc_62B9C74C:				; CODE XREF: silc_client_commands_unregister+D35j
		mov	edx, [eax+58h]
		mov	[eax+60h], edx
		and	byte ptr [eax+68h], 0FDh
		mov	eax, [esi+18h]
		lea	esi, [esi+0]

loc_62B9C75C:				; CODE XREF: silc_client_commands_unregister+E03j
					; silc_client_commands_unregister+E0Cj	...
		mov	ebx, [eax+60h]
		test	ebx, ebx
		jz	loc_62B9C7FC
		test	byte ptr [eax+68h], 2
		jz	loc_62B9CD14
		movzx	edx, word ptr [eax+66h]
		mov	edx, [ebx+edx]

loc_62B9C778:				; CODE XREF: silc_client_commands_unregister+139Fj
		mov	[eax+60h], edx
		cmp	byte ptr [ebx+4], 15h
		jnz	short loc_62B9C75C
		cmp	dword ptr [ebx+8], offset silc_client_command_detach
		jnz	short loc_62B9C75C
		cmp	dword ptr [ebx+0Ch], offset silc_client_command_reply_detach
		jnz	short loc_62B9C75C
		mov	[ebp+var_20], eax
		mov	edx, [eax+58h]
		mov	[ebp+var_AC], edx
		test	edx, edx
		jz	short loc_62B9C7D9
		cmp	ebx, edx
		jz	loc_62B9DBD3
		movzx	edx, word ptr [eax+64h]
		mov	[ebp+var_1C], edx
		mov	ecx, [ebp+var_AC]
		mov	[ebp+var_24], eax
		jmp	short loc_62B9C7CA
; ---------------------------------------------------------------------------
		align 10h

loc_62B9C7C0:				; CODE XREF: silc_client_commands_unregister+E55j
		cmp	ebx, eax
		jz	loc_62B9D116
		mov	ecx, eax

loc_62B9C7CA:				; CODE XREF: silc_client_commands_unregister+E3Fj
		lea	edi, [ecx+edx]
		mov	eax, [edi]
		test	eax, eax
		jnz	short loc_62B9C7C0
		mov	[ebp+var_AC], ecx

loc_62B9C7D9:				; CODE XREF: silc_client_commands_unregister+E25j
					; silc_client_commands_unregister+17E4j
		mov	ecx, [ebp+var_20]
		cmp	ebx, [ecx+5Ch]
		jz	loc_62B9CDFF

loc_62B9C7E5:				; CODE XREF: silc_client_commands_unregister+148Cj
		mov	eax, [ebx+10h]
		mov	[esp+0C8h+var_C8], eax
		call	silc_free
		mov	[esp+0C8h+var_C8], ebx
		call	silc_free
		mov	eax, [esi+18h]
		nop

loc_62B9C7FC:				; CODE XREF: silc_client_commands_unregister+DE5j
		mov	edx, [eax+58h]
		mov	[eax+60h], edx
		and	byte ptr [eax+68h], 0FDh
		mov	eax, [esi+18h]
		lea	esi, [esi+0]

loc_62B9C80C:				; CODE XREF: silc_client_commands_unregister+EB3j
					; silc_client_commands_unregister+EBCj	...
		mov	ebx, [eax+60h]
		test	ebx, ebx
		jz	loc_62B9C8AC
		test	byte ptr [eax+68h], 2
		jz	loc_62B9CD20
		movzx	edx, word ptr [eax+66h]
		mov	edx, [ebx+edx]

loc_62B9C828:				; CODE XREF: silc_client_commands_unregister+13ABj
		mov	[eax+60h], edx
		cmp	byte ptr [ebx+4], 16h
		jnz	short loc_62B9C80C
		cmp	dword ptr [ebx+8], offset silc_client_command_watch
		jnz	short loc_62B9C80C
		cmp	dword ptr [ebx+0Ch], offset silc_client_command_reply_watch
		jnz	short loc_62B9C80C
		mov	[ebp+var_1C], eax
		mov	edx, [eax+58h]
		mov	[ebp+var_AC], edx
		test	edx, edx
		jz	short loc_62B9C889
		cmp	ebx, edx
		jz	loc_62B9DB19
		movzx	edx, word ptr [eax+64h]
		mov	[ebp+var_20], edx
		mov	ecx, [ebp+var_AC]
		mov	[ebp+var_24], eax
		jmp	short loc_62B9C87A
; ---------------------------------------------------------------------------
		align 10h

loc_62B9C870:				; CODE XREF: silc_client_commands_unregister+F05j
		cmp	ebx, eax
		jz	loc_62B9D6A4
		mov	ecx, eax

loc_62B9C87A:				; CODE XREF: silc_client_commands_unregister+EEFj
		lea	edi, [ecx+edx]
		mov	eax, [edi]
		test	eax, eax
		jnz	short loc_62B9C870
		mov	[ebp+var_AC], ecx

loc_62B9C889:				; CODE XREF: silc_client_commands_unregister+ED5j
					; silc_client_commands_unregister+1D72j
		mov	ecx, [ebp+var_1C]
		cmp	ebx, [ecx+5Ch]
		jz	loc_62B9CDF1

loc_62B9C895:				; CODE XREF: silc_client_commands_unregister+147Ej
		mov	eax, [ebx+10h]
		mov	[esp+0C8h+var_C8], eax
		call	silc_free
		mov	[esp+0C8h+var_C8], ebx
		call	silc_free
		mov	eax, [esi+18h]
		nop

loc_62B9C8AC:				; CODE XREF: silc_client_commands_unregister+E95j
		mov	edx, [eax+58h]
		mov	[eax+60h], edx
		and	byte ptr [eax+68h], 0FDh
		mov	eax, [esi+18h]
		lea	esi, [esi+0]

loc_62B9C8BC:				; CODE XREF: silc_client_commands_unregister+F63j
					; silc_client_commands_unregister+F6Cj	...
		mov	ebx, [eax+60h]
		test	ebx, ebx
		jz	loc_62B9C95C
		test	byte ptr [eax+68h], 2
		jz	loc_62B9CD2C
		movzx	edx, word ptr [eax+66h]
		mov	edx, [ebx+edx]

loc_62B9C8D8:				; CODE XREF: silc_client_commands_unregister+13B7j
		mov	[eax+60h], edx
		cmp	byte ptr [ebx+4], 17h
		jnz	short loc_62B9C8BC
		cmp	dword ptr [ebx+8], offset silc_client_command_silcoper
		jnz	short loc_62B9C8BC
		cmp	dword ptr [ebx+0Ch], offset silc_client_command_reply_silcoper
		jnz	short loc_62B9C8BC
		mov	[ebp+var_1C], eax
		mov	edx, [eax+58h]
		mov	[ebp+var_AC], edx
		test	edx, edx
		jz	short loc_62B9C939
		cmp	ebx, edx
		jz	loc_62B9DC11
		movzx	edx, word ptr [eax+64h]
		mov	[ebp+var_20], edx
		mov	ecx, [ebp+var_AC]
		mov	[ebp+var_24], eax
		jmp	short loc_62B9C92A
; ---------------------------------------------------------------------------
		align 10h

loc_62B9C920:				; CODE XREF: silc_client_commands_unregister+FB5j
		cmp	ebx, eax
		jz	loc_62B9D203
		mov	ecx, eax

loc_62B9C92A:				; CODE XREF: silc_client_commands_unregister+F9Fj
		lea	edi, [ecx+edx]
		mov	eax, [edi]
		test	eax, eax
		jnz	short loc_62B9C920
		mov	[ebp+var_AC], ecx

loc_62B9C939:				; CODE XREF: silc_client_commands_unregister+F85j
					; silc_client_commands_unregister+18D1j
		mov	ecx, [ebp+var_1C]
		cmp	ebx, [ecx+5Ch]
		jz	loc_62B9CDE3

loc_62B9C945:				; CODE XREF: silc_client_commands_unregister+1470j
		mov	eax, [ebx+10h]
		mov	[esp+0C8h+var_C8], eax
		call	silc_free
		mov	[esp+0C8h+var_C8], ebx
		call	silc_free
		mov	eax, [esi+18h]
		nop

loc_62B9C95C:				; CODE XREF: silc_client_commands_unregister+F45j
		mov	edx, [eax+58h]
		mov	[eax+60h], edx
		and	byte ptr [eax+68h], 0FDh
		mov	eax, [esi+18h]
		lea	esi, [esi+0]

loc_62B9C96C:				; CODE XREF: silc_client_commands_unregister+1013j
					; silc_client_commands_unregister+101Cj ...
		mov	ebx, [eax+60h]
		test	ebx, ebx
		jz	loc_62B9CA0C
		test	byte ptr [eax+68h], 2
		jz	loc_62B9CD38
		movzx	edx, word ptr [eax+66h]
		mov	edx, [ebx+edx]

loc_62B9C988:				; CODE XREF: silc_client_commands_unregister+13C3j
		mov	[eax+60h], edx
		cmp	byte ptr [ebx+4], 18h
		jnz	short loc_62B9C96C
		cmp	dword ptr [ebx+8], offset silc_client_command_leave
		jnz	short loc_62B9C96C
		cmp	dword ptr [ebx+0Ch], offset silc_client_command_reply_leave
		jnz	short loc_62B9C96C
		mov	[ebp+var_20], eax
		mov	edx, [eax+58h]
		mov	[ebp+var_AC], edx
		test	edx, edx
		jz	short loc_62B9C9E9
		cmp	ebx, edx
		jz	loc_62B9DA21
		movzx	edx, word ptr [eax+64h]
		mov	[ebp+var_1C], edx
		mov	ecx, [ebp+var_AC]
		mov	[ebp+var_24], eax
		jmp	short loc_62B9C9DA
; ---------------------------------------------------------------------------
		align 10h

loc_62B9C9D0:				; CODE XREF: silc_client_commands_unregister+1065j
		cmp	ebx, eax
		jz	loc_62B9D568
		mov	ecx, eax

loc_62B9C9DA:				; CODE XREF: silc_client_commands_unregister+104Fj
		lea	edi, [ecx+edx]
		mov	eax, [edi]
		test	eax, eax
		jnz	short loc_62B9C9D0
		mov	[ebp+var_AC], ecx

loc_62B9C9E9:				; CODE XREF: silc_client_commands_unregister+1035j
					; silc_client_commands_unregister+1C36j
		mov	ecx, [ebp+var_20]
		cmp	ebx, [ecx+5Ch]
		jz	loc_62B9CE29

loc_62B9C9F5:				; CODE XREF: silc_client_commands_unregister+14B6j
		mov	eax, [ebx+10h]
		mov	[esp+0C8h+var_C8], eax
		call	silc_free
		mov	[esp+0C8h+var_C8], ebx
		call	silc_free
		mov	eax, [esi+18h]
		nop

loc_62B9CA0C:				; CODE XREF: silc_client_commands_unregister+FF5j
		mov	edx, [eax+58h]
		mov	[eax+60h], edx
		and	byte ptr [eax+68h], 0FDh
		mov	eax, [esi+18h]
		lea	esi, [esi+0]

loc_62B9CA1C:				; CODE XREF: silc_client_commands_unregister+10C3j
					; silc_client_commands_unregister+10CCj ...
		mov	ebx, [eax+60h]
		test	ebx, ebx
		jz	loc_62B9CABC
		test	byte ptr [eax+68h], 2
		jz	loc_62B9CD44
		movzx	edx, word ptr [eax+66h]
		mov	edx, [ebx+edx]

loc_62B9CA38:				; CODE XREF: silc_client_commands_unregister+13CFj
		mov	[eax+60h], edx
		cmp	byte ptr [ebx+4], 19h
		jnz	short loc_62B9CA1C
		cmp	dword ptr [ebx+8], offset silc_client_command_users
		jnz	short loc_62B9CA1C
		cmp	dword ptr [ebx+0Ch], offset silc_client_command_reply_users
		jnz	short loc_62B9CA1C
		mov	[ebp+var_20], eax
		mov	edx, [eax+58h]
		mov	[ebp+var_AC], edx
		test	edx, edx
		jz	short loc_62B9CA99
		cmp	ebx, edx
		jz	loc_62B9DB95
		movzx	edx, word ptr [eax+64h]
		mov	[ebp+var_1C], edx
		mov	ecx, [ebp+var_AC]
		mov	[ebp+var_24], eax
		jmp	short loc_62B9CA8A
; ---------------------------------------------------------------------------
		align 10h

loc_62B9CA80:				; CODE XREF: silc_client_commands_unregister+1115j
		cmp	ebx, eax
		jz	loc_62B9D165
		mov	ecx, eax

loc_62B9CA8A:				; CODE XREF: silc_client_commands_unregister+10FFj
		lea	edi, [ecx+edx]
		mov	eax, [edi]
		test	eax, eax
		jnz	short loc_62B9CA80
		mov	[ebp+var_AC], ecx

loc_62B9CA99:				; CODE XREF: silc_client_commands_unregister+10E5j
					; silc_client_commands_unregister+1833j
		mov	ecx, [ebp+var_20]
		cmp	ebx, [ecx+5Ch]
		jz	loc_62B9CE1B

loc_62B9CAA5:				; CODE XREF: silc_client_commands_unregister+14A8j
		mov	eax, [ebx+10h]
		mov	[esp+0C8h+var_C8], eax
		call	silc_free
		mov	[esp+0C8h+var_C8], ebx
		call	silc_free
		mov	eax, [esi+18h]
		nop

loc_62B9CABC:				; CODE XREF: silc_client_commands_unregister+10A5j
		mov	edx, [eax+58h]
		mov	[eax+60h], edx
		and	byte ptr [eax+68h], 0FDh
		mov	eax, [esi+18h]
		lea	esi, [esi+0]

loc_62B9CACC:				; CODE XREF: silc_client_commands_unregister+1173j
					; silc_client_commands_unregister+117Cj ...
		mov	ebx, [eax+60h]
		test	ebx, ebx
		jz	loc_62B9CB6C
		test	byte ptr [eax+68h], 2
		jz	loc_62B9CD50
		movzx	edx, word ptr [eax+66h]
		mov	edx, [ebx+edx]

loc_62B9CAE8:				; CODE XREF: silc_client_commands_unregister+13DBj
		mov	[eax+60h], edx
		cmp	byte ptr [ebx+4], 1Ah
		jnz	short loc_62B9CACC
		cmp	dword ptr [ebx+8], offset silc_client_command_getkey
		jnz	short loc_62B9CACC
		cmp	dword ptr [ebx+0Ch], offset silc_client_command_reply_getkey
		jnz	short loc_62B9CACC
		mov	[ebp+var_20], eax
		mov	edx, [eax+58h]
		mov	[ebp+var_AC], edx
		test	edx, edx
		jz	short loc_62B9CB49
		cmp	ebx, edx
		jz	loc_62B9D967
		movzx	edx, word ptr [eax+64h]
		mov	[ebp+var_1C], edx
		mov	ecx, [ebp+var_AC]
		mov	[ebp+var_24], eax
		jmp	short loc_62B9CB3A
; ---------------------------------------------------------------------------
		align 10h

loc_62B9CB30:				; CODE XREF: silc_client_commands_unregister+11C5j
		cmp	ebx, eax
		jz	loc_62B9D1B4
		mov	ecx, eax

loc_62B9CB3A:				; CODE XREF: silc_client_commands_unregister+11AFj
		lea	edi, [ecx+edx]
		mov	eax, [edi]
		test	eax, eax
		jnz	short loc_62B9CB30
		mov	[ebp+var_AC], ecx

loc_62B9CB49:				; CODE XREF: silc_client_commands_unregister+1195j
					; silc_client_commands_unregister+1882j
		mov	ecx, [ebp+var_20]
		cmp	ebx, [ecx+5Ch]
		jz	loc_62B9CE37

loc_62B9CB55:				; CODE XREF: silc_client_commands_unregister+14C4j
		mov	eax, [ebx+10h]
		mov	[esp+0C8h+var_C8], eax
		call	silc_free
		mov	[esp+0C8h+var_C8], ebx
		call	silc_free
		mov	eax, [esi+18h]
		nop

loc_62B9CB6C:				; CODE XREF: silc_client_commands_unregister+1155j
		mov	edx, [eax+58h]
		mov	[eax+60h], edx
		and	byte ptr [eax+68h], 0FDh
		mov	eax, [esi+18h]
		lea	esi, [esi+0]

loc_62B9CB7C:				; CODE XREF: silc_client_commands_unregister+1223j
					; silc_client_commands_unregister+122Cj ...
		mov	ebx, [eax+60h]
		test	ebx, ebx
		jz	loc_62B9CD68
		test	byte ptr [eax+68h], 2
		jz	loc_62B9CD5C
		movzx	edx, word ptr [eax+66h]
		mov	edx, [ebx+edx]

loc_62B9CB98:				; CODE XREF: silc_client_commands_unregister+13E7j
		mov	[eax+60h], edx
		cmp	byte ptr [ebx+4], 1Bh
		jnz	short loc_62B9CB7C
		cmp	dword ptr [ebx+8], offset silc_client_command_service
		jnz	short loc_62B9CB7C
		cmp	dword ptr [ebx+0Ch], offset silc_client_command_reply_service
		jnz	short loc_62B9CB7C
		mov	[ebp+var_1C], eax
		mov	edx, [eax+58h]
		mov	[ebp+var_AC], edx
		test	edx, edx
		jz	short loc_62B9CBF9
		cmp	ebx, edx
		jz	loc_62B9DA5F
		movzx	edx, word ptr [eax+64h]
		mov	[ebp+var_20], edx
		mov	ecx, [ebp+var_AC]
		mov	[ebp+var_24], esi
		mov	esi, edx
		jmp	short loc_62B9CBEA
; ---------------------------------------------------------------------------
		align 10h

loc_62B9CBE0:				; CODE XREF: silc_client_commands_unregister+1275j
		cmp	ebx, edx
		jz	loc_62B9CEED
		mov	ecx, edx

loc_62B9CBEA:				; CODE XREF: silc_client_commands_unregister+1261j
		lea	edi, [ecx+esi]
		mov	edx, [edi]
		test	edx, edx
		jnz	short loc_62B9CBE0
		mov	[ebp+var_AC], ecx

loc_62B9CBF9:				; CODE XREF: silc_client_commands_unregister+1245j
					; silc_client_commands_unregister+15BBj
		mov	ecx, [ebp+var_1C]
		cmp	ebx, [ecx+5Ch]
		jz	loc_62B9CEC3

loc_62B9CC05:				; CODE XREF: silc_client_commands_unregister+1550j
		mov	eax, [ebx+10h]
		mov	[esp+0C8h+var_C8], eax
		call	silc_free
		mov	[ebp+arg_0], ebx
		add	esp, 0BCh
		pop	ebx
		pop	esi
		pop	edi
		leave
		jmp	silc_free
; ---------------------------------------------------------------------------
		align 4

loc_62B9CC24:				; CODE XREF: silc_client_commands_unregister+2Fj
		movzx	edx, word ptr [eax+64h]
		mov	edx, [ebx+edx]
		jmp	loc_62B9B9B8
; ---------------------------------------------------------------------------

loc_62B9CC30:				; CODE XREF: silc_client_commands_unregister+DFj
		movzx	edx, word ptr [eax+64h]
		mov	edx, [ebx+edx]
		jmp	loc_62B9BA68
; ---------------------------------------------------------------------------

loc_62B9CC3C:				; CODE XREF: silc_client_commands_unregister+18Fj
		movzx	edx, word ptr [eax+64h]
		mov	edx, [ebx+edx]
		jmp	loc_62B9BB18
; ---------------------------------------------------------------------------

loc_62B9CC48:				; CODE XREF: silc_client_commands_unregister+23Fj
		movzx	edx, word ptr [eax+64h]
		mov	edx, [ebx+edx]
		jmp	loc_62B9BBC8
; ---------------------------------------------------------------------------

loc_62B9CC54:				; CODE XREF: silc_client_commands_unregister+2EFj
		movzx	edx, word ptr [eax+64h]
		mov	edx, [ebx+edx]
		jmp	loc_62B9BC78
; ---------------------------------------------------------------------------

loc_62B9CC60:				; CODE XREF: silc_client_commands_unregister+39Fj
		movzx	edx, word ptr [eax+64h]
		mov	edx, [ebx+edx]
		jmp	loc_62B9BD28
; ---------------------------------------------------------------------------

loc_62B9CC6C:				; CODE XREF: silc_client_commands_unregister+44Fj
		movzx	edx, word ptr [eax+64h]
		mov	edx, [ebx+edx]
		jmp	loc_62B9BDD8
; ---------------------------------------------------------------------------

loc_62B9CC78:				; CODE XREF: silc_client_commands_unregister+4FFj
		movzx	edx, word ptr [eax+64h]
		mov	edx, [ebx+edx]
		jmp	loc_62B9BE88
; ---------------------------------------------------------------------------

loc_62B9CC84:				; CODE XREF: silc_client_commands_unregister+5AFj
		movzx	edx, word ptr [eax+64h]
		mov	edx, [ebx+edx]
		jmp	loc_62B9BF38
; ---------------------------------------------------------------------------

loc_62B9CC90:				; CODE XREF: silc_client_commands_unregister+65Fj
		movzx	edx, word ptr [eax+64h]
		mov	edx, [ebx+edx]
		jmp	loc_62B9BFE8
; ---------------------------------------------------------------------------

loc_62B9CC9C:				; CODE XREF: silc_client_commands_unregister+70Fj
		movzx	edx, word ptr [eax+64h]
		mov	edx, [ebx+edx]
		jmp	loc_62B9C098
; ---------------------------------------------------------------------------

loc_62B9CCA8:				; CODE XREF: silc_client_commands_unregister+7BFj
		movzx	edx, word ptr [eax+64h]
		mov	edx, [ebx+edx]
		jmp	loc_62B9C148
; ---------------------------------------------------------------------------

loc_62B9CCB4:				; CODE XREF: silc_client_commands_unregister+86Fj
		movzx	edx, word ptr [eax+64h]
		mov	edx, [ebx+edx]
		jmp	loc_62B9C1F8
; ---------------------------------------------------------------------------

loc_62B9CCC0:				; CODE XREF: silc_client_commands_unregister+91Fj
		movzx	edx, word ptr [eax+64h]
		mov	edx, [ebx+edx]
		jmp	loc_62B9C2A8
; ---------------------------------------------------------------------------

loc_62B9CCCC:				; CODE XREF: silc_client_commands_unregister+9CFj
		movzx	edx, word ptr [eax+64h]
		mov	edx, [ebx+edx]
		jmp	loc_62B9C358
; ---------------------------------------------------------------------------

loc_62B9CCD8:				; CODE XREF: silc_client_commands_unregister+A7Fj
		movzx	edx, word ptr [eax+64h]
		mov	edx, [ebx+edx]
		jmp	loc_62B9C408
; ---------------------------------------------------------------------------

loc_62B9CCE4:				; CODE XREF: silc_client_commands_unregister+B2Fj
		movzx	edx, word ptr [eax+64h]
		mov	edx, [ebx+edx]
		jmp	loc_62B9C4B8
; ---------------------------------------------------------------------------

loc_62B9CCF0:				; CODE XREF: silc_client_commands_unregister+BDFj
		movzx	edx, word ptr [eax+64h]
		mov	edx, [ebx+edx]
		jmp	loc_62B9C568
; ---------------------------------------------------------------------------

loc_62B9CCFC:				; CODE XREF: silc_client_commands_unregister+C8Fj
		movzx	edx, word ptr [eax+64h]
		mov	edx, [ebx+edx]
		jmp	loc_62B9C618
; ---------------------------------------------------------------------------

loc_62B9CD08:				; CODE XREF: silc_client_commands_unregister+D3Fj
		movzx	edx, word ptr [eax+64h]
		mov	edx, [ebx+edx]
		jmp	loc_62B9C6C8
; ---------------------------------------------------------------------------

loc_62B9CD14:				; CODE XREF: silc_client_commands_unregister+DEFj
		movzx	edx, word ptr [eax+64h]
		mov	edx, [ebx+edx]
		jmp	loc_62B9C778
; ---------------------------------------------------------------------------

loc_62B9CD20:				; CODE XREF: silc_client_commands_unregister+E9Fj
		movzx	edx, word ptr [eax+64h]
		mov	edx, [ebx+edx]
		jmp	loc_62B9C828
; ---------------------------------------------------------------------------

loc_62B9CD2C:				; CODE XREF: silc_client_commands_unregister+F4Fj
		movzx	edx, word ptr [eax+64h]
		mov	edx, [ebx+edx]
		jmp	loc_62B9C8D8
; ---------------------------------------------------------------------------

loc_62B9CD38:				; CODE XREF: silc_client_commands_unregister+FFFj
		movzx	edx, word ptr [eax+64h]
		mov	edx, [ebx+edx]
		jmp	loc_62B9C988
; ---------------------------------------------------------------------------

loc_62B9CD44:				; CODE XREF: silc_client_commands_unregister+10AFj
		movzx	edx, word ptr [eax+64h]
		mov	edx, [ebx+edx]
		jmp	loc_62B9CA38
; ---------------------------------------------------------------------------

loc_62B9CD50:				; CODE XREF: silc_client_commands_unregister+115Fj
		movzx	edx, word ptr [eax+64h]
		mov	edx, [ebx+edx]
		jmp	loc_62B9CAE8
; ---------------------------------------------------------------------------

loc_62B9CD5C:				; CODE XREF: silc_client_commands_unregister+120Fj
		movzx	edx, word ptr [eax+64h]
		mov	edx, [ebx+edx]
		jmp	loc_62B9CB98
; ---------------------------------------------------------------------------

loc_62B9CD68:				; CODE XREF: silc_client_commands_unregister+1205j
		add	esp, 0BCh
		pop	ebx
		pop	esi
		pop	edi
		leave
		retn
; ---------------------------------------------------------------------------

loc_62B9CD73:				; CODE XREF: silc_client_commands_unregister+D03j
		mov	edi, [ebp+var_AC]
		mov	[ecx+5Ch], edi
		jmp	loc_62B9C685
; ---------------------------------------------------------------------------

loc_62B9CD81:				; CODE XREF: silc_client_commands_unregister+C53j
		mov	edi, [ebp+var_AC]
		mov	[ecx+5Ch], edi
		jmp	loc_62B9C5D5
; ---------------------------------------------------------------------------

loc_62B9CD8F:				; CODE XREF: silc_client_commands_unregister+BA3j
		mov	edi, [ebp+var_AC]
		mov	[ecx+5Ch], edi
		jmp	loc_62B9C525
; ---------------------------------------------------------------------------

loc_62B9CD9D:				; CODE XREF: silc_client_commands_unregister+AF3j
		mov	edi, [ebp+var_AC]
		mov	[ecx+5Ch], edi
		jmp	loc_62B9C475
; ---------------------------------------------------------------------------

loc_62B9CDAB:				; CODE XREF: silc_client_commands_unregister+A43j
		mov	edi, [ebp+var_AC]
		mov	[ecx+5Ch], edi
		jmp	loc_62B9C3C5
; ---------------------------------------------------------------------------

loc_62B9CDB9:				; CODE XREF: silc_client_commands_unregister+993j
		mov	edi, [ebp+var_AC]
		mov	[ecx+5Ch], edi
		jmp	loc_62B9C315
; ---------------------------------------------------------------------------

loc_62B9CDC7:				; CODE XREF: silc_client_commands_unregister+8E3j
		mov	edi, [ebp+var_AC]
		mov	[ecx+5Ch], edi
		jmp	loc_62B9C265
; ---------------------------------------------------------------------------

loc_62B9CDD5:				; CODE XREF: silc_client_commands_unregister+833j
		mov	edi, [ebp+var_AC]
		mov	[ecx+5Ch], edi
		jmp	loc_62B9C1B5
; ---------------------------------------------------------------------------

loc_62B9CDE3:				; CODE XREF: silc_client_commands_unregister+FC3j
		mov	edi, [ebp+var_AC]
		mov	[ecx+5Ch], edi
		jmp	loc_62B9C945
; ---------------------------------------------------------------------------

loc_62B9CDF1:				; CODE XREF: silc_client_commands_unregister+F13j
		mov	edi, [ebp+var_AC]
		mov	[ecx+5Ch], edi
		jmp	loc_62B9C895
; ---------------------------------------------------------------------------

loc_62B9CDFF:				; CODE XREF: silc_client_commands_unregister+E63j
		mov	edi, [ebp+var_AC]
		mov	[ecx+5Ch], edi
		jmp	loc_62B9C7E5
; ---------------------------------------------------------------------------

loc_62B9CE0D:				; CODE XREF: silc_client_commands_unregister+DB3j
		mov	edi, [ebp+var_AC]
		mov	[ecx+5Ch], edi
		jmp	loc_62B9C735
; ---------------------------------------------------------------------------

loc_62B9CE1B:				; CODE XREF: silc_client_commands_unregister+1123j
		mov	edi, [ebp+var_AC]
		mov	[ecx+5Ch], edi
		jmp	loc_62B9CAA5
; ---------------------------------------------------------------------------

loc_62B9CE29:				; CODE XREF: silc_client_commands_unregister+1073j
		mov	edi, [ebp+var_AC]
		mov	[ecx+5Ch], edi
		jmp	loc_62B9C9F5
; ---------------------------------------------------------------------------

loc_62B9CE37:				; CODE XREF: silc_client_commands_unregister+11D3j
		mov	edi, [ebp+var_AC]
		mov	[ecx+5Ch], edi
		jmp	loc_62B9CB55
; ---------------------------------------------------------------------------

loc_62B9CE45:				; CODE XREF: silc_client_commands_unregister+783j
		mov	edi, [ebp+var_AC]
		mov	[ecx+5Ch], edi
		jmp	loc_62B9C105
; ---------------------------------------------------------------------------

loc_62B9CE53:				; CODE XREF: silc_client_commands_unregister+4C3j
		mov	edi, [ebp+var_AC]
		mov	[ecx+5Ch], edi
		jmp	loc_62B9BE45
; ---------------------------------------------------------------------------

loc_62B9CE61:				; CODE XREF: silc_client_commands_unregister+413j
		mov	edi, [ebp+var_AC]
		mov	[ecx+5Ch], edi
		jmp	loc_62B9BD95
; ---------------------------------------------------------------------------

loc_62B9CE6F:				; CODE XREF: silc_client_commands_unregister+363j
		mov	edi, [ebp+var_AC]
		mov	[ecx+5Ch], edi
		jmp	loc_62B9BCE5
; ---------------------------------------------------------------------------

loc_62B9CE7D:				; CODE XREF: silc_client_commands_unregister+2B3j
		mov	edi, [ebp+var_AC]
		mov	[ecx+5Ch], edi
		jmp	loc_62B9BC35
; ---------------------------------------------------------------------------

loc_62B9CE8B:				; CODE XREF: silc_client_commands_unregister+623j
		mov	edi, [ebp+var_AC]
		mov	[ecx+5Ch], edi
		jmp	loc_62B9BFA5
; ---------------------------------------------------------------------------

loc_62B9CE99:				; CODE XREF: silc_client_commands_unregister+573j
		mov	edi, [ebp+var_AC]
		mov	[ecx+5Ch], edi
		jmp	loc_62B9BEF5
; ---------------------------------------------------------------------------

loc_62B9CEA7:				; CODE XREF: silc_client_commands_unregister+6D3j
		mov	edi, [ebp+var_AC]
		mov	[ecx+5Ch], edi
		jmp	loc_62B9C055
; ---------------------------------------------------------------------------

loc_62B9CEB5:				; CODE XREF: silc_client_commands_unregister+203j
		mov	edi, [ebp+var_AC]
		mov	[ecx+5Ch], edi
		jmp	loc_62B9BB85
; ---------------------------------------------------------------------------

loc_62B9CEC3:				; CODE XREF: silc_client_commands_unregister+1283j
		mov	edi, [ebp+var_AC]
		mov	[ecx+5Ch], edi
		jmp	loc_62B9CC05
; ---------------------------------------------------------------------------

loc_62B9CED1:				; CODE XREF: silc_client_commands_unregister+153j
		mov	edi, [ebp+var_AC]
		mov	[ecx+5Ch], edi
		jmp	loc_62B9BAD5
; ---------------------------------------------------------------------------

loc_62B9CEDF:				; CODE XREF: silc_client_commands_unregister+A3j
		mov	edi, [ebp+var_AC]
		mov	[ecx+5Ch], edi
		jmp	loc_62B9BA25
; ---------------------------------------------------------------------------

loc_62B9CEED:				; CODE XREF: silc_client_commands_unregister+1266j
		mov	[ebp+var_9C], edi
		mov	[ebp+var_AC], ecx
		mov	esi, [ebp+var_24]

loc_62B9CEFC:				; CODE XREF: silc_client_commands_unregister+20FDj
		mov	edx, [ebp+var_20]
		mov	edx, [ebx+edx]
		mov	[ebp+var_20], edx
		mov	ecx, [ebp+var_9C]
		mov	[ecx], edx
		test	edx, edx
		jz	short loc_62B9CF24
		test	byte ptr [eax+68h], 1
		jz	short loc_62B9CF24
		movzx	edi, word ptr [eax+66h]
		mov	edx, [ebx+edi]
		mov	ecx, [ebp+var_20]
		mov	[ecx+edi], edx

loc_62B9CF24:				; CODE XREF: silc_client_commands_unregister+1593j
					; silc_client_commands_unregister+1599j
		cmp	ebx, [eax+60h]
		jz	loc_62B9D73E

loc_62B9CF2D:				; CODE XREF: silc_client_commands_unregister+1DCDj
		sub	dword ptr [eax+68h], 4
		mov	esi, [esi+18h]
		mov	[ebp+var_1C], esi
		jmp	loc_62B9CBF9
; ---------------------------------------------------------------------------

loc_62B9CF3C:				; CODE XREF: silc_client_commands_unregister+136j
		mov	[ebp+var_AC], ecx
		mov	[ebp+var_9C], edi
		mov	eax, [ebp+var_24]

loc_62B9CF4B:				; CODE XREF: silc_client_commands_unregister+21F5j
		mov	edx, [ebp+var_20]
		mov	edx, [ebx+edx]
		mov	[ebp+var_20], edx
		mov	ecx, [ebp+var_9C]
		mov	[ecx], edx
		test	edx, edx
		jz	short loc_62B9CF73
		test	byte ptr [eax+68h], 1
		jz	short loc_62B9CF73
		movzx	edi, word ptr [eax+66h]
		mov	edx, [ebx+edi]
		mov	ecx, [ebp+var_20]
		mov	[ecx+edi], edx

loc_62B9CF73:				; CODE XREF: silc_client_commands_unregister+15E2j
					; silc_client_commands_unregister+15E8j
		cmp	ebx, [eax+60h]
		jz	loc_62B9D74E

loc_62B9CF7C:				; CODE XREF: silc_client_commands_unregister+1DDDj
		sub	dword ptr [eax+68h], 4
		mov	eax, [esi+18h]
		mov	[ebp+var_1C], eax
		jmp	loc_62B9BAC9
; ---------------------------------------------------------------------------

loc_62B9CF8B:				; CODE XREF: silc_client_commands_unregister+86j
		mov	[ebp+var_AC], ecx
		mov	[ebp+var_9C], edi
		mov	eax, [ebp+var_24]

loc_62B9CF9A:				; CODE XREF: silc_client_commands_unregister+21D6j
		mov	edx, [ebp+var_1C]
		mov	edx, [ebx+edx]
		mov	[ebp+var_20], edx
		mov	ecx, [ebp+var_9C]
		mov	[ecx], edx
		test	edx, edx
		jz	short loc_62B9CFC2
		test	byte ptr [eax+68h], 1
		jz	short loc_62B9CFC2
		movzx	edi, word ptr [eax+66h]
		mov	edx, [ebx+edi]
		mov	ecx, [ebp+var_20]
		mov	[ecx+edi], edx

loc_62B9CFC2:				; CODE XREF: silc_client_commands_unregister+1631j
					; silc_client_commands_unregister+1637j
		cmp	ebx, [eax+60h]
		jz	loc_62B9D76B

loc_62B9CFCB:				; CODE XREF: silc_client_commands_unregister+1DFAj
		sub	dword ptr [eax+68h], 4
		mov	eax, [esi+18h]
		mov	[ebp+var_20], eax
		jmp	loc_62B9BA19
; ---------------------------------------------------------------------------

loc_62B9CFDA:				; CODE XREF: silc_client_commands_unregister+B86j
		mov	[ebp+var_AC], ecx
		mov	[ebp+var_9C], edi
		mov	eax, [ebp+var_24]

loc_62B9CFE9:				; CODE XREF: silc_client_commands_unregister+2252j
		mov	edx, [ebp+var_20]
		mov	edx, [ebx+edx]
		mov	[ebp+var_20], edx
		mov	ecx, [ebp+var_9C]
		mov	[ecx], edx
		test	edx, edx
		jz	short loc_62B9D011
		test	byte ptr [eax+68h], 1
		jz	short loc_62B9D011
		movzx	edi, word ptr [eax+66h]
		mov	edx, [ebx+edi]
		mov	ecx, [ebp+var_20]
		mov	[ecx+edi], edx

loc_62B9D011:				; CODE XREF: silc_client_commands_unregister+1680j
					; silc_client_commands_unregister+1686j
		cmp	ebx, [eax+60h]
		jz	loc_62B9D7AB

loc_62B9D01A:				; CODE XREF: silc_client_commands_unregister+1E3Aj
		sub	dword ptr [eax+68h], 4
		mov	eax, [esi+18h]
		mov	[ebp+var_1C], eax
		jmp	loc_62B9C519
; ---------------------------------------------------------------------------

loc_62B9D029:				; CODE XREF: silc_client_commands_unregister+A26j
		mov	[ebp+var_AC], ecx
		mov	[ebp+var_9C], edi
		mov	eax, [ebp+var_24]

loc_62B9D038:				; CODE XREF: silc_client_commands_unregister+20DEj
		mov	edx, [ebp+var_20]
		mov	edx, [ebx+edx]
		mov	[ebp+var_20], edx
		mov	ecx, [ebp+var_9C]
		mov	[ecx], edx
		test	edx, edx
		jz	short loc_62B9D060
		test	byte ptr [eax+68h], 1
		jz	short loc_62B9D060
		movzx	edi, word ptr [eax+66h]
		mov	edx, [ebx+edi]
		mov	ecx, [ebp+var_20]
		mov	[ecx+edi], edx

loc_62B9D060:				; CODE XREF: silc_client_commands_unregister+16CFj
					; silc_client_commands_unregister+16D5j
		cmp	ebx, [eax+60h]
		jz	loc_62B9D78B

loc_62B9D069:				; CODE XREF: silc_client_commands_unregister+1E1Aj
		sub	dword ptr [eax+68h], 4
		mov	eax, [esi+18h]
		mov	[ebp+var_1C], eax
		jmp	loc_62B9C3B9
; ---------------------------------------------------------------------------

loc_62B9D078:				; CODE XREF: silc_client_commands_unregister+8C6j
		mov	[ebp+var_AC], ecx
		mov	[ebp+var_9C], edi
		mov	eax, [ebp+var_24]

loc_62B9D087:				; CODE XREF: silc_client_commands_unregister+2290j
		mov	edx, [ebp+var_20]
		mov	edx, [ebx+edx]
		mov	[ebp+var_20], edx
		mov	ecx, [ebp+var_9C]
		mov	[ecx], edx
		test	edx, edx
		jz	short loc_62B9D0AF
		test	byte ptr [eax+68h], 1
		jz	short loc_62B9D0AF
		movzx	edi, word ptr [eax+66h]
		mov	edx, [ebx+edi]
		mov	ecx, [ebp+var_20]
		mov	[ecx+edi], edx

loc_62B9D0AF:				; CODE XREF: silc_client_commands_unregister+171Ej
					; silc_client_commands_unregister+1724j
		cmp	ebx, [eax+60h]
		jz	loc_62B9D7CB

loc_62B9D0B8:				; CODE XREF: silc_client_commands_unregister+1E5Aj
		sub	dword ptr [eax+68h], 4
		mov	eax, [esi+18h]
		mov	[ebp+var_1C], eax
		jmp	loc_62B9C259
; ---------------------------------------------------------------------------

loc_62B9D0C7:				; CODE XREF: silc_client_commands_unregister+CE6j
		mov	[ebp+var_AC], ecx
		mov	[ebp+var_9C], edi
		mov	eax, [ebp+var_24]

loc_62B9D0D6:				; CODE XREF: silc_client_commands_unregister+211Cj
		mov	edx, [ebp+var_20]
		mov	edx, [ebx+edx]
		mov	[ebp+var_20], edx
		mov	ecx, [ebp+var_9C]
		mov	[ecx], edx
		test	edx, edx
		jz	short loc_62B9D0FE
		test	byte ptr [eax+68h], 1
		jz	short loc_62B9D0FE
		movzx	edi, word ptr [eax+66h]
		mov	edx, [ebx+edi]
		mov	ecx, [ebp+var_20]
		mov	[ecx+edi], edx

loc_62B9D0FE:				; CODE XREF: silc_client_commands_unregister+176Dj
					; silc_client_commands_unregister+1773j
		cmp	ebx, [eax+60h]
		jz	loc_62B9D77B

loc_62B9D107:				; CODE XREF: silc_client_commands_unregister+1E0Aj
		sub	dword ptr [eax+68h], 4
		mov	eax, [esi+18h]
		mov	[ebp+var_1C], eax
		jmp	loc_62B9C679
; ---------------------------------------------------------------------------

loc_62B9D116:				; CODE XREF: silc_client_commands_unregister+E46j
		mov	[ebp+var_9C], edi
		mov	[ebp+var_AC], ecx
		mov	eax, [ebp+var_24]

loc_62B9D125:				; CODE XREF: silc_client_commands_unregister+2271j
		mov	edx, [ebp+var_1C]
		mov	edx, [ebx+edx]
		mov	[ebp+var_20], edx
		mov	ecx, [ebp+var_9C]
		mov	[ecx], edx
		test	edx, edx
		jz	short loc_62B9D14D
		test	byte ptr [eax+68h], 1
		jz	short loc_62B9D14D
		movzx	edi, word ptr [eax+66h]
		mov	edx, [ebx+edi]
		mov	ecx, [ebp+var_20]
		mov	[ecx+edi], edx

loc_62B9D14D:				; CODE XREF: silc_client_commands_unregister+17BCj
					; silc_client_commands_unregister+17C2j
		cmp	ebx, [eax+60h]
		jz	loc_62B9D7BB

loc_62B9D156:				; CODE XREF: silc_client_commands_unregister+1E4Aj
		sub	dword ptr [eax+68h], 4
		mov	eax, [esi+18h]
		mov	[ebp+var_20], eax
		jmp	loc_62B9C7D9
; ---------------------------------------------------------------------------

loc_62B9D165:				; CODE XREF: silc_client_commands_unregister+1106j
		mov	[ebp+var_9C], edi
		mov	[ebp+var_AC], ecx
		mov	eax, [ebp+var_24]

loc_62B9D174:				; CODE XREF: silc_client_commands_unregister+2233j
		mov	edx, [ebp+var_1C]
		mov	edx, [ebx+edx]
		mov	[ebp+var_20], edx
		mov	ecx, [ebp+var_9C]
		mov	[ecx], edx
		test	edx, edx
		jz	short loc_62B9D19C
		test	byte ptr [eax+68h], 1
		jz	short loc_62B9D19C
		movzx	edi, word ptr [eax+66h]
		mov	edx, [ebx+edi]
		mov	ecx, [ebp+var_20]
		mov	[ecx+edi], edx

loc_62B9D19C:				; CODE XREF: silc_client_commands_unregister+180Bj
					; silc_client_commands_unregister+1811j
		cmp	ebx, [eax+60h]
		jz	loc_62B9D79B

loc_62B9D1A5:				; CODE XREF: silc_client_commands_unregister+1E2Aj
		sub	dword ptr [eax+68h], 4
		mov	eax, [esi+18h]
		mov	[ebp+var_20], eax
		jmp	loc_62B9CA99
; ---------------------------------------------------------------------------

loc_62B9D1B4:				; CODE XREF: silc_client_commands_unregister+11B6j
		mov	[ebp+var_9C], edi
		mov	[ebp+var_AC], ecx
		mov	eax, [ebp+var_24]

loc_62B9D1C3:				; CODE XREF: silc_client_commands_unregister+2005j
		mov	edx, [ebp+var_1C]
		mov	edx, [ebx+edx]
		mov	[ebp+var_20], edx
		mov	ecx, [ebp+var_9C]
		mov	[ecx], edx
		test	edx, edx
		jz	short loc_62B9D1EB
		test	byte ptr [eax+68h], 1
		jz	short loc_62B9D1EB
		movzx	edi, word ptr [eax+66h]
		mov	edx, [ebx+edi]
		mov	ecx, [ebp+var_20]
		mov	[ecx+edi], edx

loc_62B9D1EB:				; CODE XREF: silc_client_commands_unregister+185Aj
					; silc_client_commands_unregister+1860j
		cmp	ebx, [eax+60h]
		jz	loc_62B9D7DB

loc_62B9D1F4:				; CODE XREF: silc_client_commands_unregister+1E6Aj
		sub	dword ptr [eax+68h], 4
		mov	eax, [esi+18h]
		mov	[ebp+var_20], eax
		jmp	loc_62B9CB49
; ---------------------------------------------------------------------------

loc_62B9D203:				; CODE XREF: silc_client_commands_unregister+FA6j
		mov	[ebp+var_9C], edi
		mov	[ebp+var_AC], ecx
		mov	eax, [ebp+var_24]

loc_62B9D212:				; CODE XREF: silc_client_commands_unregister+22AFj
		mov	edx, [ebp+var_20]
		mov	edx, [ebx+edx]
		mov	[ebp+var_20], edx
		mov	ecx, [ebp+var_9C]
		mov	[ecx], edx
		test	edx, edx
		jz	short loc_62B9D23A
		test	byte ptr [eax+68h], 1
		jz	short loc_62B9D23A
		movzx	edi, word ptr [eax+66h]
		mov	edx, [ebx+edi]
		mov	ecx, [ebp+var_20]
		mov	[ecx+edi], edx

loc_62B9D23A:				; CODE XREF: silc_client_commands_unregister+18A9j
					; silc_client_commands_unregister+18AFj
		cmp	ebx, [eax+60h]
		jz	loc_62B9D7EB

loc_62B9D243:				; CODE XREF: silc_client_commands_unregister+1E7Aj
		sub	dword ptr [eax+68h], 4
		mov	eax, [esi+18h]
		mov	[ebp+var_1C], eax
		jmp	loc_62B9C939
; ---------------------------------------------------------------------------

loc_62B9D252:				; CODE XREF: silc_client_commands_unregister+3F6j
		mov	[ebp+var_AC], ecx
		mov	[ebp+var_9C], edi
		mov	eax, [ebp+var_24]

loc_62B9D261:				; CODE XREF: silc_client_commands_unregister+215Aj
		mov	edx, [ebp+var_20]
		mov	edx, [ebx+edx]
		mov	[ebp+var_20], edx
		mov	ecx, [ebp+var_9C]
		mov	[ecx], edx
		test	edx, edx
		jz	short loc_62B9D289
		test	byte ptr [eax+68h], 1
		jz	short loc_62B9D289
		movzx	edi, word ptr [eax+66h]
		mov	edx, [ebx+edi]
		mov	ecx, [ebp+var_20]
		mov	[ecx+edi], edx

loc_62B9D289:				; CODE XREF: silc_client_commands_unregister+18F8j
					; silc_client_commands_unregister+18FEj
		cmp	ebx, [eax+60h]
		jz	loc_62B9D86B

loc_62B9D292:				; CODE XREF: silc_client_commands_unregister+1EFAj
		sub	dword ptr [eax+68h], 4
		mov	eax, [esi+18h]
		mov	[ebp+var_1C], eax
		jmp	loc_62B9BD89
; ---------------------------------------------------------------------------

loc_62B9D2A1:				; CODE XREF: silc_client_commands_unregister+346j
		mov	[ebp+var_AC], ecx
		mov	[ebp+var_9C], edi
		mov	eax, [ebp+var_24]

loc_62B9D2B0:				; CODE XREF: silc_client_commands_unregister+2062j
		mov	edx, [ebp+var_20]
		mov	edx, [ebx+edx]
		mov	[ebp+var_20], edx
		mov	ecx, [ebp+var_9C]
		mov	[ecx], edx
		test	edx, edx
		jz	short loc_62B9D2D8
		test	byte ptr [eax+68h], 1
		jz	short loc_62B9D2D8
		movzx	edi, word ptr [eax+66h]
		mov	edx, [ebx+edi]
		mov	ecx, [ebp+var_20]
		mov	[ecx+edi], edx

loc_62B9D2D8:				; CODE XREF: silc_client_commands_unregister+1947j
					; silc_client_commands_unregister+194Dj
		cmp	ebx, [eax+60h]
		jz	loc_62B9D82B

loc_62B9D2E1:				; CODE XREF: silc_client_commands_unregister+1EBAj
		sub	dword ptr [eax+68h], 4
		mov	eax, [esi+18h]
		mov	[ebp+var_1C], eax
		jmp	loc_62B9BCD9
; ---------------------------------------------------------------------------

loc_62B9D2F0:				; CODE XREF: silc_client_commands_unregister+976j
		mov	[ebp+var_AC], ecx
		mov	[ebp+var_9C], edi
		mov	eax, [ebp+var_24]

loc_62B9D2FF:				; CODE XREF: silc_client_commands_unregister+1FE6j
		mov	edx, [ebp+var_1C]
		mov	edx, [ebx+edx]
		mov	[ebp+var_20], edx
		mov	ecx, [ebp+var_9C]
		mov	[ecx], edx
		test	edx, edx
		jz	short loc_62B9D327
		test	byte ptr [eax+68h], 1
		jz	short loc_62B9D327
		movzx	edi, word ptr [eax+66h]
		mov	edx, [ebx+edi]
		mov	ecx, [ebp+var_20]
		mov	[ecx+edi], edx

loc_62B9D327:				; CODE XREF: silc_client_commands_unregister+1996j
					; silc_client_commands_unregister+199Cj
		cmp	ebx, [eax+60h]
		jz	loc_62B9D8AB

loc_62B9D330:				; CODE XREF: silc_client_commands_unregister+1F3Aj
		sub	dword ptr [eax+68h], 4
		mov	eax, [esi+18h]
		mov	[ebp+var_20], eax
		jmp	loc_62B9C309
; ---------------------------------------------------------------------------

loc_62B9D33F:				; CODE XREF: silc_client_commands_unregister+AD6j
		mov	[ebp+var_AC], ecx
		mov	[ebp+var_9C], edi
		mov	eax, [ebp+var_24]

loc_62B9D34E:				; CODE XREF: silc_client_commands_unregister+1FA8j
		mov	edx, [ebp+var_20]
		mov	edx, [ebx+edx]
		mov	[ebp+var_20], edx
		mov	ecx, [ebp+var_9C]
		mov	[ecx], edx
		test	edx, edx
		jz	short loc_62B9D376
		test	byte ptr [eax+68h], 1
		jz	short loc_62B9D376
		movzx	edi, word ptr [eax+66h]
		mov	edx, [ebx+edi]
		mov	ecx, [ebp+var_20]
		mov	[ecx+edi], edx

loc_62B9D376:				; CODE XREF: silc_client_commands_unregister+19E5j
					; silc_client_commands_unregister+19EBj
		cmp	ebx, [eax+60h]
		jz	loc_62B9D80B

loc_62B9D37F:				; CODE XREF: silc_client_commands_unregister+1E9Aj
		sub	dword ptr [eax+68h], 4
		mov	eax, [esi+18h]
		mov	[ebp+var_1C], eax
		jmp	loc_62B9C469
; ---------------------------------------------------------------------------

loc_62B9D38E:				; CODE XREF: silc_client_commands_unregister+296j
		mov	[ebp+var_AC], ecx
		mov	[ebp+var_9C], edi
		mov	eax, [ebp+var_24]

loc_62B9D39D:				; CODE XREF: silc_client_commands_unregister+2198j
		mov	edx, [ebp+var_20]
		mov	edx, [ebx+edx]
		mov	[ebp+var_20], edx
		mov	ecx, [ebp+var_9C]
		mov	[ecx], edx
		test	edx, edx
		jz	short loc_62B9D3C5
		test	byte ptr [eax+68h], 1
		jz	short loc_62B9D3C5
		movzx	edi, word ptr [eax+66h]
		mov	edx, [ebx+edi]
		mov	ecx, [ebp+var_20]
		mov	[ecx+edi], edx

loc_62B9D3C5:				; CODE XREF: silc_client_commands_unregister+1A34j
					; silc_client_commands_unregister+1A3Aj
		cmp	ebx, [eax+60h]
		jz	loc_62B9D88B

loc_62B9D3CE:				; CODE XREF: silc_client_commands_unregister+1F1Aj
		sub	dword ptr [eax+68h], 4
		mov	eax, [esi+18h]
		mov	[ebp+var_1C], eax
		jmp	loc_62B9BC29
; ---------------------------------------------------------------------------

loc_62B9D3DD:				; CODE XREF: silc_client_commands_unregister+4A6j
		mov	[ebp+var_AC], ecx
		mov	[ebp+var_9C], edi
		mov	eax, [ebp+var_24]

loc_62B9D3EC:				; CODE XREF: silc_client_commands_unregister+20A0j
		mov	edx, [ebp+var_20]
		mov	edx, [ebx+edx]
		mov	[ebp+var_20], edx
		mov	ecx, [ebp+var_9C]
		mov	[ecx], edx
		test	edx, edx
		jz	short loc_62B9D414
		test	byte ptr [eax+68h], 1
		jz	short loc_62B9D414
		movzx	edi, word ptr [eax+66h]
		mov	edx, [ebx+edi]
		mov	ecx, [ebp+var_20]
		mov	[ecx+edi], edx

loc_62B9D414:				; CODE XREF: silc_client_commands_unregister+1A83j
					; silc_client_commands_unregister+1A89j
		cmp	ebx, [eax+60h]
		jz	loc_62B9D84B

loc_62B9D41D:				; CODE XREF: silc_client_commands_unregister+1EDAj
		sub	dword ptr [eax+68h], 4
		mov	eax, [esi+18h]
		mov	[ebp+var_1C], eax
		jmp	loc_62B9BE39
; ---------------------------------------------------------------------------

loc_62B9D42C:				; CODE XREF: silc_client_commands_unregister+C36j
		mov	[ebp+var_AC], ecx
		mov	[ebp+var_9C], edi
		mov	eax, [ebp+var_24]

loc_62B9D43B:				; CODE XREF: silc_client_commands_unregister+2024j
		mov	edx, [ebp+var_20]
		mov	edx, [ebx+edx]
		mov	[ebp+var_20], edx
		mov	ecx, [ebp+var_9C]
		mov	[ecx], edx
		test	edx, edx
		jz	short loc_62B9D463
		test	byte ptr [eax+68h], 1
		jz	short loc_62B9D463
		movzx	edi, word ptr [eax+66h]
		mov	edx, [ebx+edi]
		mov	ecx, [ebp+var_20]
		mov	[ecx+edi], edx

loc_62B9D463:				; CODE XREF: silc_client_commands_unregister+1AD2j
					; silc_client_commands_unregister+1AD8j
		cmp	ebx, [eax+60h]
		jz	loc_62B9D8CB

loc_62B9D46C:				; CODE XREF: silc_client_commands_unregister+1F5Aj
		sub	dword ptr [eax+68h], 4
		mov	eax, [esi+18h]
		mov	[ebp+var_1C], eax
		jmp	loc_62B9C5C9
; ---------------------------------------------------------------------------

loc_62B9D47B:				; CODE XREF: silc_client_commands_unregister+816j
		mov	[ebp+var_AC], ecx
		mov	[ebp+var_9C], edi
		mov	eax, [ebp+var_24]

loc_62B9D48A:				; CODE XREF: silc_client_commands_unregister+1F89j
		mov	edx, [ebp+var_20]
		mov	edx, [ebx+edx]
		mov	[ebp+var_20], edx
		mov	ecx, [ebp+var_9C]
		mov	[ecx], edx
		test	edx, edx
		jz	short loc_62B9D4B2
		test	byte ptr [eax+68h], 1
		jz	short loc_62B9D4B2
		movzx	edi, word ptr [eax+66h]
		mov	edx, [ebx+edi]
		mov	ecx, [ebp+var_20]
		mov	[ecx+edi], edx

loc_62B9D4B2:				; CODE XREF: silc_client_commands_unregister+1B21j
					; silc_client_commands_unregister+1B27j
		cmp	ebx, [eax+60h]
		jz	loc_62B9D7FB

loc_62B9D4BB:				; CODE XREF: silc_client_commands_unregister+1E8Aj
		sub	dword ptr [eax+68h], 4
		mov	eax, [esi+18h]
		mov	[ebp+var_1C], eax
		jmp	loc_62B9C1A9
; ---------------------------------------------------------------------------

loc_62B9D4CA:				; CODE XREF: silc_client_commands_unregister+556j
		mov	[ebp+var_AC], ecx
		mov	[ebp+var_9C], edi
		mov	eax, [ebp+var_24]

loc_62B9D4D9:				; CODE XREF: silc_client_commands_unregister+2179j
		mov	edx, [ebp+var_20]
		mov	edx, [ebx+edx]
		mov	[ebp+var_20], edx
		mov	ecx, [ebp+var_9C]
		mov	[ecx], edx
		test	edx, edx
		jz	short loc_62B9D501
		test	byte ptr [eax+68h], 1
		jz	short loc_62B9D501
		movzx	edi, word ptr [eax+66h]
		mov	edx, [ebx+edi]
		mov	ecx, [ebp+var_20]
		mov	[ecx+edi], edx

loc_62B9D501:				; CODE XREF: silc_client_commands_unregister+1B70j
					; silc_client_commands_unregister+1B76j
		cmp	ebx, [eax+60h]
		jz	loc_62B9D87B

loc_62B9D50A:				; CODE XREF: silc_client_commands_unregister+1F0Aj
		sub	dword ptr [eax+68h], 4
		mov	eax, [esi+18h]
		mov	[ebp+var_1C], eax
		jmp	loc_62B9BEE9
; ---------------------------------------------------------------------------

loc_62B9D519:				; CODE XREF: silc_client_commands_unregister+6B6j
		mov	[ebp+var_AC], ecx
		mov	[ebp+var_9C], edi
		mov	eax, [ebp+var_24]

loc_62B9D528:				; CODE XREF: silc_client_commands_unregister+213Bj
		mov	edx, [ebp+var_20]
		mov	edx, [ebx+edx]
		mov	[ebp+var_20], edx
		mov	ecx, [ebp+var_9C]
		mov	[ecx], edx
		test	edx, edx
		jz	short loc_62B9D550
		test	byte ptr [eax+68h], 1
		jz	short loc_62B9D550
		movzx	edi, word ptr [eax+66h]
		mov	edx, [ebx+edi]
		mov	ecx, [ebp+var_20]
		mov	[ecx+edi], edx

loc_62B9D550:				; CODE XREF: silc_client_commands_unregister+1BBFj
					; silc_client_commands_unregister+1BC5j
		cmp	ebx, [eax+60h]
		jz	loc_62B9D83B

loc_62B9D559:				; CODE XREF: silc_client_commands_unregister+1ECAj
		sub	dword ptr [eax+68h], 4
		mov	eax, [esi+18h]
		mov	[ebp+var_1C], eax
		jmp	loc_62B9C049
; ---------------------------------------------------------------------------

loc_62B9D568:				; CODE XREF: silc_client_commands_unregister+1056j
		mov	[ebp+var_9C], edi
		mov	[ebp+var_AC], ecx
		mov	eax, [ebp+var_24]

loc_62B9D577:				; CODE XREF: silc_client_commands_unregister+20BFj
		mov	edx, [ebp+var_1C]
		mov	edx, [ebx+edx]
		mov	[ebp+var_20], edx
		mov	ecx, [ebp+var_9C]
		mov	[ecx], edx
		test	edx, edx
		jz	short loc_62B9D59F
		test	byte ptr [eax+68h], 1
		jz	short loc_62B9D59F
		movzx	edi, word ptr [eax+66h]
		mov	edx, [ebx+edi]
		mov	ecx, [ebp+var_20]
		mov	[ecx+edi], edx

loc_62B9D59F:				; CODE XREF: silc_client_commands_unregister+1C0Ej
					; silc_client_commands_unregister+1C14j
		cmp	ebx, [eax+60h]
		jz	loc_62B9D8BB

loc_62B9D5A8:				; CODE XREF: silc_client_commands_unregister+1F4Aj
		sub	dword ptr [eax+68h], 4
		mov	eax, [esi+18h]
		mov	[ebp+var_20], eax
		jmp	loc_62B9C9E9
; ---------------------------------------------------------------------------

loc_62B9D5B7:				; CODE XREF: silc_client_commands_unregister+D96j
		mov	[ebp+var_AC], ecx
		mov	[ebp+var_9C], edi
		mov	eax, [ebp+var_24]

loc_62B9D5C6:				; CODE XREF: silc_client_commands_unregister+1FC7j
		mov	edx, [ebp+var_20]
		mov	edx, [ebx+edx]
		mov	[ebp+var_20], edx
		mov	ecx, [ebp+var_9C]
		mov	[ecx], edx
		test	edx, edx
		jz	short loc_62B9D5EE
		test	byte ptr [eax+68h], 1
		jz	short loc_62B9D5EE
		movzx	edi, word ptr [eax+66h]
		mov	edx, [ebx+edi]
		mov	ecx, [ebp+var_20]
		mov	[ecx+edi], edx

loc_62B9D5EE:				; CODE XREF: silc_client_commands_unregister+1C5Dj
					; silc_client_commands_unregister+1C63j
		cmp	ebx, [eax+60h]
		jz	loc_62B9D81B

loc_62B9D5F7:				; CODE XREF: silc_client_commands_unregister+1EAAj
		sub	dword ptr [eax+68h], 4
		mov	eax, [esi+18h]
		mov	[ebp+var_1C], eax
		jmp	loc_62B9C729
; ---------------------------------------------------------------------------

loc_62B9D606:				; CODE XREF: silc_client_commands_unregister+1E6j
		mov	[ebp+var_AC], ecx
		mov	[ebp+var_9C], edi
		mov	eax, [ebp+var_24]

loc_62B9D615:				; CODE XREF: silc_client_commands_unregister+2214j
		mov	edx, [ebp+var_20]
		mov	edx, [ebx+edx]
		mov	[ebp+var_20], edx
		mov	ecx, [ebp+var_9C]
		mov	[ecx], edx
		test	edx, edx
		jz	short loc_62B9D63D
		test	byte ptr [eax+68h], 1
		jz	short loc_62B9D63D
		movzx	edi, word ptr [eax+66h]
		mov	edx, [ebx+edi]
		mov	ecx, [ebp+var_20]
		mov	[ecx+edi], edx

loc_62B9D63D:				; CODE XREF: silc_client_commands_unregister+1CACj
					; silc_client_commands_unregister+1CB2j
		cmp	ebx, [eax+60h]
		jz	loc_62B9D89B

loc_62B9D646:				; CODE XREF: silc_client_commands_unregister+1F2Aj
		sub	dword ptr [eax+68h], 4
		mov	eax, [esi+18h]
		mov	[ebp+var_1C], eax
		jmp	loc_62B9BB79
; ---------------------------------------------------------------------------

loc_62B9D655:				; CODE XREF: silc_client_commands_unregister+606j
		mov	[ebp+var_AC], ecx
		mov	[ebp+var_9C], edi
		mov	eax, [ebp+var_24]

loc_62B9D664:				; CODE XREF: silc_client_commands_unregister+2043j
		mov	edx, [ebp+var_20]
		mov	edx, [ebx+edx]
		mov	[ebp+var_20], edx
		mov	ecx, [ebp+var_9C]
		mov	[ecx], edx
		test	edx, edx
		jz	short loc_62B9D68C
		test	byte ptr [eax+68h], 1
		jz	short loc_62B9D68C
		movzx	edi, word ptr [eax+66h]
		mov	edx, [ebx+edi]
		mov	ecx, [ebp+var_20]
		mov	[ecx+edi], edx

loc_62B9D68C:				; CODE XREF: silc_client_commands_unregister+1CFBj
					; silc_client_commands_unregister+1D01j
		cmp	ebx, [eax+60h]
		jz	loc_62B9D85B

loc_62B9D695:				; CODE XREF: silc_client_commands_unregister+1EEAj
		sub	dword ptr [eax+68h], 4
		mov	eax, [esi+18h]
		mov	[ebp+var_1C], eax
		jmp	loc_62B9BF99
; ---------------------------------------------------------------------------

loc_62B9D6A4:				; CODE XREF: silc_client_commands_unregister+EF6j
		mov	[ebp+var_9C], edi
		mov	[ebp+var_AC], ecx
		mov	eax, [ebp+var_24]

loc_62B9D6B3:				; CODE XREF: silc_client_commands_unregister+21B7j
		mov	edx, [ebp+var_20]
		mov	edx, [ebx+edx]
		mov	[ebp+var_20], edx
		mov	ecx, [ebp+var_9C]
		mov	[ecx], edx
		test	edx, edx
		jz	short loc_62B9D6DB
		test	byte ptr [eax+68h], 1
		jz	short loc_62B9D6DB
		movzx	edi, word ptr [eax+66h]
		mov	edx, [ebx+edi]
		mov	ecx, [ebp+var_20]
		mov	[ecx+edi], edx

loc_62B9D6DB:				; CODE XREF: silc_client_commands_unregister+1D4Aj
					; silc_client_commands_unregister+1D50j
		cmp	ebx, [eax+60h]
		jz	loc_62B9D8DB

loc_62B9D6E4:				; CODE XREF: silc_client_commands_unregister+1F6Aj
		sub	dword ptr [eax+68h], 4
		mov	eax, [esi+18h]
		mov	[ebp+var_1C], eax
		jmp	loc_62B9C889
; ---------------------------------------------------------------------------

loc_62B9D6F3:				; CODE XREF: silc_client_commands_unregister+766j
		mov	[ebp+var_AC], ecx
		mov	[ebp+var_9C], edi
		mov	eax, [ebp+var_24]

loc_62B9D702:				; CODE XREF: silc_client_commands_unregister+2081j
		mov	edx, [ebp+var_20]
		mov	edx, [ebx+edx]
		mov	[ebp+var_20], edx
		mov	ecx, [ebp+var_9C]
		mov	[ecx], edx
		test	edx, edx
		jz	short loc_62B9D72A
		test	byte ptr [eax+68h], 1
		jz	short loc_62B9D72A
		movzx	edi, word ptr [eax+66h]
		mov	edx, [ebx+edi]
		mov	ecx, [ebp+var_20]
		mov	[ecx+edi], edx

loc_62B9D72A:				; CODE XREF: silc_client_commands_unregister+1D99j
					; silc_client_commands_unregister+1D9Fj
		cmp	ebx, [eax+60h]
		jz	short loc_62B9D75E

loc_62B9D72F:				; CODE XREF: silc_client_commands_unregister+1DEDj
		sub	dword ptr [eax+68h], 4
		mov	eax, [esi+18h]
		mov	[ebp+var_1C], eax
		jmp	loc_62B9C0F9
; ---------------------------------------------------------------------------

loc_62B9D73E:				; CODE XREF: silc_client_commands_unregister+15ABj
		mov	edi, [ebp+var_9C]
		mov	edx, [edi]
		mov	[eax+60h], edx
		jmp	loc_62B9CF2D
; ---------------------------------------------------------------------------

loc_62B9D74E:				; CODE XREF: silc_client_commands_unregister+15FAj
		mov	edi, [ebp+var_9C]
		mov	edx, [edi]
		mov	[eax+60h], edx
		jmp	loc_62B9CF7C
; ---------------------------------------------------------------------------

loc_62B9D75E:				; CODE XREF: silc_client_commands_unregister+1DB1j
		mov	edi, [ebp+var_9C]
		mov	edx, [edi]
		mov	[eax+60h], edx
		jmp	short loc_62B9D72F
; ---------------------------------------------------------------------------

loc_62B9D76B:				; CODE XREF: silc_client_commands_unregister+1649j
		mov	edi, [ebp+var_9C]
		mov	edx, [edi]
		mov	[eax+60h], edx
		jmp	loc_62B9CFCB
; ---------------------------------------------------------------------------

loc_62B9D77B:				; CODE XREF: silc_client_commands_unregister+1785j
		mov	edi, [ebp+var_9C]
		mov	edx, [edi]
		mov	[eax+60h], edx
		jmp	loc_62B9D107
; ---------------------------------------------------------------------------

loc_62B9D78B:				; CODE XREF: silc_client_commands_unregister+16E7j
		mov	edi, [ebp+var_9C]
		mov	edx, [edi]
		mov	[eax+60h], edx
		jmp	loc_62B9D069
; ---------------------------------------------------------------------------

loc_62B9D79B:				; CODE XREF: silc_client_commands_unregister+1823j
		mov	edi, [ebp+var_9C]
		mov	edx, [edi]
		mov	[eax+60h], edx
		jmp	loc_62B9D1A5
; ---------------------------------------------------------------------------

loc_62B9D7AB:				; CODE XREF: silc_client_commands_unregister+1698j
		mov	edi, [ebp+var_9C]
		mov	edx, [edi]
		mov	[eax+60h], edx
		jmp	loc_62B9D01A
; ---------------------------------------------------------------------------

loc_62B9D7BB:				; CODE XREF: silc_client_commands_unregister+17D4j
		mov	edi, [ebp+var_9C]
		mov	edx, [edi]
		mov	[eax+60h], edx
		jmp	loc_62B9D156
; ---------------------------------------------------------------------------

loc_62B9D7CB:				; CODE XREF: silc_client_commands_unregister+1736j
		mov	edi, [ebp+var_9C]
		mov	edx, [edi]
		mov	[eax+60h], edx
		jmp	loc_62B9D0B8
; ---------------------------------------------------------------------------

loc_62B9D7DB:				; CODE XREF: silc_client_commands_unregister+1872j
		mov	edi, [ebp+var_9C]
		mov	edx, [edi]
		mov	[eax+60h], edx
		jmp	loc_62B9D1F4
; ---------------------------------------------------------------------------

loc_62B9D7EB:				; CODE XREF: silc_client_commands_unregister+18C1j
		mov	edi, [ebp+var_9C]
		mov	edx, [edi]
		mov	[eax+60h], edx
		jmp	loc_62B9D243
; ---------------------------------------------------------------------------

loc_62B9D7FB:				; CODE XREF: silc_client_commands_unregister+1B39j
		mov	edi, [ebp+var_9C]
		mov	edx, [edi]
		mov	[eax+60h], edx
		jmp	loc_62B9D4BB
; ---------------------------------------------------------------------------

loc_62B9D80B:				; CODE XREF: silc_client_commands_unregister+19FDj
		mov	edi, [ebp+var_9C]
		mov	edx, [edi]
		mov	[eax+60h], edx
		jmp	loc_62B9D37F
; ---------------------------------------------------------------------------

loc_62B9D81B:				; CODE XREF: silc_client_commands_unregister+1C75j
		mov	edi, [ebp+var_9C]
		mov	edx, [edi]
		mov	[eax+60h], edx
		jmp	loc_62B9D5F7
; ---------------------------------------------------------------------------

loc_62B9D82B:				; CODE XREF: silc_client_commands_unregister+195Fj
		mov	edi, [ebp+var_9C]
		mov	edx, [edi]
		mov	[eax+60h], edx
		jmp	loc_62B9D2E1
; ---------------------------------------------------------------------------

loc_62B9D83B:				; CODE XREF: silc_client_commands_unregister+1BD7j
		mov	edi, [ebp+var_9C]
		mov	edx, [edi]
		mov	[eax+60h], edx
		jmp	loc_62B9D559
; ---------------------------------------------------------------------------

loc_62B9D84B:				; CODE XREF: silc_client_commands_unregister+1A9Bj
		mov	edi, [ebp+var_9C]
		mov	edx, [edi]
		mov	[eax+60h], edx
		jmp	loc_62B9D41D
; ---------------------------------------------------------------------------

loc_62B9D85B:				; CODE XREF: silc_client_commands_unregister+1D13j
		mov	edi, [ebp+var_9C]
		mov	edx, [edi]
		mov	[eax+60h], edx
		jmp	loc_62B9D695
; ---------------------------------------------------------------------------

loc_62B9D86B:				; CODE XREF: silc_client_commands_unregister+1910j
		mov	edi, [ebp+var_9C]
		mov	edx, [edi]
		mov	[eax+60h], edx
		jmp	loc_62B9D292
; ---------------------------------------------------------------------------

loc_62B9D87B:				; CODE XREF: silc_client_commands_unregister+1B88j
		mov	edi, [ebp+var_9C]
		mov	edx, [edi]
		mov	[eax+60h], edx
		jmp	loc_62B9D50A
; ---------------------------------------------------------------------------

loc_62B9D88B:				; CODE XREF: silc_client_commands_unregister+1A4Cj
		mov	edi, [ebp+var_9C]
		mov	edx, [edi]
		mov	[eax+60h], edx
		jmp	loc_62B9D3CE
; ---------------------------------------------------------------------------

loc_62B9D89B:				; CODE XREF: silc_client_commands_unregister+1CC4j
		mov	edi, [ebp+var_9C]
		mov	edx, [edi]
		mov	[eax+60h], edx
		jmp	loc_62B9D646
; ---------------------------------------------------------------------------

loc_62B9D8AB:				; CODE XREF: silc_client_commands_unregister+19AEj
		mov	edi, [ebp+var_9C]
		mov	edx, [edi]
		mov	[eax+60h], edx
		jmp	loc_62B9D330
; ---------------------------------------------------------------------------

loc_62B9D8BB:				; CODE XREF: silc_client_commands_unregister+1C26j
		mov	edi, [ebp+var_9C]
		mov	edx, [edi]
		mov	[eax+60h], edx
		jmp	loc_62B9D5A8
; ---------------------------------------------------------------------------

loc_62B9D8CB:				; CODE XREF: silc_client_commands_unregister+1AEAj
		mov	edi, [ebp+var_9C]
		mov	edx, [edi]
		mov	[eax+60h], edx
		jmp	loc_62B9D46C
; ---------------------------------------------------------------------------

loc_62B9D8DB:				; CODE XREF: silc_client_commands_unregister+1D62j
		mov	edi, [ebp+var_9C]
		mov	edx, [edi]
		mov	[eax+60h], edx
		jmp	loc_62B9D6E4
; ---------------------------------------------------------------------------

loc_62B9D8EB:				; CODE XREF: silc_client_commands_unregister+7F9j
		lea	ecx, [eax+58h]
		mov	[ebp+var_9C], ecx
		movzx	edi, word ptr [eax+64h]
		mov	[ebp+var_20], edi
		mov	[ebp+var_AC], 0
		jmp	loc_62B9D48A
; ---------------------------------------------------------------------------

loc_62B9D90A:				; CODE XREF: silc_client_commands_unregister+AB9j
		lea	ecx, [eax+58h]
		mov	[ebp+var_9C], ecx
		movzx	edi, word ptr [eax+64h]
		mov	[ebp+var_20], edi
		mov	[ebp+var_AC], 0
		jmp	loc_62B9D34E
; ---------------------------------------------------------------------------

loc_62B9D929:				; CODE XREF: silc_client_commands_unregister+D79j
		lea	ecx, [eax+58h]
		mov	[ebp+var_9C], ecx
		movzx	edi, word ptr [eax+64h]
		mov	[ebp+var_20], edi
		mov	[ebp+var_AC], 0
		jmp	loc_62B9D5C6
; ---------------------------------------------------------------------------

loc_62B9D948:				; CODE XREF: silc_client_commands_unregister+959j
		lea	ecx, [eax+58h]
		mov	[ebp+var_9C], ecx
		movzx	edi, word ptr [eax+64h]
		mov	[ebp+var_1C], edi
		mov	[ebp+var_AC], 0
		jmp	loc_62B9D2FF
; ---------------------------------------------------------------------------

loc_62B9D967:				; CODE XREF: silc_client_commands_unregister+1199j
		lea	ecx, [eax+58h]
		mov	[ebp+var_9C], ecx
		movzx	edi, word ptr [eax+64h]
		mov	[ebp+var_1C], edi
		mov	[ebp+var_AC], 0
		jmp	loc_62B9D1C3
; ---------------------------------------------------------------------------

loc_62B9D986:				; CODE XREF: silc_client_commands_unregister+C19j
		lea	ecx, [eax+58h]
		mov	[ebp+var_9C], ecx
		movzx	edi, word ptr [eax+64h]
		mov	[ebp+var_20], edi
		mov	[ebp+var_AC], 0
		jmp	loc_62B9D43B
; ---------------------------------------------------------------------------

loc_62B9D9A5:				; CODE XREF: silc_client_commands_unregister+5E9j
		lea	ecx, [eax+58h]
		mov	[ebp+var_9C], ecx
		movzx	edi, word ptr [eax+64h]
		mov	[ebp+var_20], edi
		mov	[ebp+var_AC], 0
		jmp	loc_62B9D664
; ---------------------------------------------------------------------------

loc_62B9D9C4:				; CODE XREF: silc_client_commands_unregister+329j
		lea	ecx, [eax+58h]
		mov	[ebp+var_9C], ecx
		movzx	edi, word ptr [eax+64h]
		mov	[ebp+var_20], edi
		mov	[ebp+var_AC], 0
		jmp	loc_62B9D2B0
; ---------------------------------------------------------------------------

loc_62B9D9E3:				; CODE XREF: silc_client_commands_unregister+749j
		lea	ecx, [eax+58h]
		mov	[ebp+var_9C], ecx
		movzx	edi, word ptr [eax+64h]
		mov	[ebp+var_20], edi
		mov	[ebp+var_AC], 0
		jmp	loc_62B9D702
; ---------------------------------------------------------------------------

loc_62B9DA02:				; CODE XREF: silc_client_commands_unregister+489j
		lea	ecx, [eax+58h]
		mov	[ebp+var_9C], ecx
		movzx	edi, word ptr [eax+64h]
		mov	[ebp+var_20], edi
		mov	[ebp+var_AC], 0
		jmp	loc_62B9D3EC
; ---------------------------------------------------------------------------

loc_62B9DA21:				; CODE XREF: silc_client_commands_unregister+1039j
		lea	ecx, [eax+58h]
		mov	[ebp+var_9C], ecx
		movzx	edi, word ptr [eax+64h]
		mov	[ebp+var_1C], edi
		mov	[ebp+var_AC], 0
		jmp	loc_62B9D577
; ---------------------------------------------------------------------------

loc_62B9DA40:				; CODE XREF: silc_client_commands_unregister+A09j
		lea	ecx, [eax+58h]
		mov	[ebp+var_9C], ecx
		movzx	edi, word ptr [eax+64h]
		mov	[ebp+var_20], edi
		mov	[ebp+var_AC], 0
		jmp	loc_62B9D038
; ---------------------------------------------------------------------------

loc_62B9DA5F:				; CODE XREF: silc_client_commands_unregister+1249j
		lea	ecx, [eax+58h]
		mov	[ebp+var_9C], ecx
		movzx	edi, word ptr [eax+64h]
		mov	[ebp+var_20], edi
		mov	[ebp+var_AC], 0
		jmp	loc_62B9CEFC
; ---------------------------------------------------------------------------

loc_62B9DA7E:				; CODE XREF: silc_client_commands_unregister+CC9j
		lea	ecx, [eax+58h]
		mov	[ebp+var_9C], ecx
		movzx	edi, word ptr [eax+64h]
		mov	[ebp+var_20], edi
		mov	[ebp+var_AC], 0
		jmp	loc_62B9D0D6
; ---------------------------------------------------------------------------

loc_62B9DA9D:				; CODE XREF: silc_client_commands_unregister+699j
		lea	ecx, [eax+58h]
		mov	[ebp+var_9C], ecx
		movzx	edi, word ptr [eax+64h]
		mov	[ebp+var_20], edi
		mov	[ebp+var_AC], 0
		jmp	loc_62B9D528
; ---------------------------------------------------------------------------

loc_62B9DABC:				; CODE XREF: silc_client_commands_unregister+3D9j
		lea	ecx, [eax+58h]
		mov	[ebp+var_9C], ecx
		movzx	edi, word ptr [eax+64h]
		mov	[ebp+var_20], edi
		mov	[ebp+var_AC], 0
		jmp	loc_62B9D261
; ---------------------------------------------------------------------------

loc_62B9DADB:				; CODE XREF: silc_client_commands_unregister+539j
		lea	ecx, [eax+58h]
		mov	[ebp+var_9C], ecx
		movzx	edi, word ptr [eax+64h]
		mov	[ebp+var_20], edi
		mov	[ebp+var_AC], 0
		jmp	loc_62B9D4D9
; ---------------------------------------------------------------------------

loc_62B9DAFA:				; CODE XREF: silc_client_commands_unregister+279j
		lea	ecx, [eax+58h]
		mov	[ebp+var_9C], ecx
		movzx	edi, word ptr [eax+64h]
		mov	[ebp+var_20], edi
		mov	[ebp+var_AC], 0
		jmp	loc_62B9D39D
; ---------------------------------------------------------------------------

loc_62B9DB19:				; CODE XREF: silc_client_commands_unregister+ED9j
		lea	ecx, [eax+58h]
		mov	[ebp+var_9C], ecx
		movzx	edi, word ptr [eax+64h]
		mov	[ebp+var_20], edi
		mov	[ebp+var_AC], 0
		jmp	loc_62B9D6B3
; ---------------------------------------------------------------------------

loc_62B9DB38:				; CODE XREF: silc_client_commands_unregister+69j
		lea	ecx, [eax+58h]
		mov	[ebp+var_9C], ecx
		movzx	edi, word ptr [eax+64h]
		mov	[ebp+var_1C], edi
		mov	[ebp+var_AC], 0
		jmp	loc_62B9CF9A
; ---------------------------------------------------------------------------

loc_62B9DB57:				; CODE XREF: silc_client_commands_unregister+119j
		lea	ecx, [eax+58h]
		mov	[ebp+var_9C], ecx
		movzx	edi, word ptr [eax+64h]
		mov	[ebp+var_20], edi
		mov	[ebp+var_AC], 0
		jmp	loc_62B9CF4B
; ---------------------------------------------------------------------------

loc_62B9DB76:				; CODE XREF: silc_client_commands_unregister+1C9j
		lea	ecx, [eax+58h]
		mov	[ebp+var_9C], ecx
		movzx	edi, word ptr [eax+64h]
		mov	[ebp+var_20], edi
		mov	[ebp+var_AC], 0
		jmp	loc_62B9D615
; ---------------------------------------------------------------------------

loc_62B9DB95:				; CODE XREF: silc_client_commands_unregister+10E9j
		lea	ecx, [eax+58h]
		mov	[ebp+var_9C], ecx
		movzx	edi, word ptr [eax+64h]
		mov	[ebp+var_1C], edi
		mov	[ebp+var_AC], 0
		jmp	loc_62B9D174
; ---------------------------------------------------------------------------

loc_62B9DBB4:				; CODE XREF: silc_client_commands_unregister+B69j
		lea	ecx, [eax+58h]
		mov	[ebp+var_9C], ecx
		movzx	edi, word ptr [eax+64h]
		mov	[ebp+var_20], edi
		mov	[ebp+var_AC], 0
		jmp	loc_62B9CFE9
; ---------------------------------------------------------------------------

loc_62B9DBD3:				; CODE XREF: silc_client_commands_unregister+E29j
		lea	ecx, [eax+58h]
		mov	[ebp+var_9C], ecx
		movzx	edi, word ptr [eax+64h]
		mov	[ebp+var_1C], edi
		mov	[ebp+var_AC], 0
		jmp	loc_62B9D125
; ---------------------------------------------------------------------------

loc_62B9DBF2:				; CODE XREF: silc_client_commands_unregister+8A9j
		lea	ecx, [eax+58h]
		mov	[ebp+var_9C], ecx
		movzx	edi, word ptr [eax+64h]
		mov	[ebp+var_20], edi
		mov	[ebp+var_AC], 0
		jmp	loc_62B9D087
; ---------------------------------------------------------------------------

loc_62B9DC11:				; CODE XREF: silc_client_commands_unregister+F89j
		lea	ecx, [eax+58h]
		mov	[ebp+var_9C], ecx
		movzx	edi, word ptr [eax+64h]
		mov	[ebp+var_20], edi
		mov	[ebp+var_AC], 0
		jmp	loc_62B9D212
silc_client_commands_unregister	endp

; Exported entry  92. silc_client_commands_register

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public silc_client_commands_register
silc_client_commands_register proc near	; CODE XREF: silc_client_init+1A4p

Src		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	esi
		push	ebx
		sub	esp, 10h
		mov	ebx, [ebp+arg_0]
		mov	eax, [ebx+18h]
		and	dword ptr [eax+68h], 3
		mov	eax, [ebx+18h]
		mov	word ptr [eax+64h], 0
		and	byte ptr [eax+68h], 0FEh
		mov	eax, [ebx+18h]
		mov	word ptr [eax+66h], 0
		and	byte ptr [eax+68h], 0FDh
		mov	eax, [ebx+18h]
		mov	dword ptr [eax+60h], 0
		mov	dword ptr [eax+5Ch], 0
		mov	dword ptr [eax+58h], 0
		mov	[esp+18h+var_14], 18h
		mov	[esp+18h+Src], 1
		call	silc_calloc
		mov	esi, eax
		test	eax, eax
		jz	short loc_62B9DCEF
		mov	byte ptr [eax+4], 1
		mov	dword ptr [eax+8], offset silc_client_command_whois
		mov	dword ptr [eax+0Ch], offset silc_client_command_reply_whois
		mov	byte ptr [eax+14h], 5
		mov	[esp+18h+Src], offset Src ; "WHOIS"
		call	_strdup
		mov	[esi+10h], eax
		test	eax, eax
		jz	loc_62B9EA30
		mov	edx, [ebx+18h]
		mov	eax, [edx+58h]
		test	eax, eax
		jz	loc_62B9E9C8
		movzx	eax, word ptr [edx+64h]
		mov	ecx, [edx+5Ch]
		mov	[ecx+eax], esi

loc_62B9DCD3:				; CODE XREF: silc_client_commands_register+D9Bj
		test	byte ptr [edx+68h], 1
		jnz	loc_62B9E920

loc_62B9DCDD:				; CODE XREF: silc_client_commands_register+CFAj
		mov	[edx+5Ch], esi
		movzx	eax, word ptr [edx+64h]
		mov	dword ptr [esi+eax], 0
		add	dword ptr [edx+68h], 4

loc_62B9DCEF:				; CODE XREF: silc_client_commands_register+5Cj
					; silc_client_commands_register+E08j
		mov	[esp+18h+var_14], 18h
		mov	[esp+18h+Src], 1
		call	silc_calloc
		mov	esi, eax
		test	eax, eax
		jz	short loc_62B9DD6A
		mov	byte ptr [eax+4], 2
		mov	dword ptr [eax+8], offset silc_client_command_whowas
		mov	dword ptr [eax+0Ch], offset silc_client_command_reply_whowas
		mov	byte ptr [eax+14h], 3
		mov	[esp+18h+Src], offset aWhowas ;	"WHOWAS"
		call	_strdup
		mov	[esi+10h], eax
		test	eax, eax
		jz	loc_62B9EA20
		mov	edx, [ebx+18h]
		mov	ecx, [edx+58h]
		test	ecx, ecx
		jz	loc_62B9E9D0
		movzx	eax, word ptr [edx+64h]
		mov	ecx, [edx+5Ch]
		mov	[ecx+eax], esi

loc_62B9DD4E:				; CODE XREF: silc_client_commands_register+DA3j
		test	byte ptr [edx+68h], 1
		jnz	loc_62B9E910

loc_62B9DD58:				; CODE XREF: silc_client_commands_register+CEAj
		mov	[edx+5Ch], esi
		movzx	eax, word ptr [edx+64h]
		mov	dword ptr [esi+eax], 0
		add	dword ptr [edx+68h], 4

loc_62B9DD6A:				; CODE XREF: silc_client_commands_register+D7j
					; silc_client_commands_register+DF8j
		mov	[esp+18h+var_14], 18h
		mov	[esp+18h+Src], 1
		call	silc_calloc
		mov	esi, eax
		test	eax, eax
		jz	short loc_62B9DDE5
		mov	byte ptr [eax+4], 3
		mov	dword ptr [eax+8], offset silc_client_command_identify
		mov	dword ptr [eax+0Ch], offset silc_client_command_reply_identify
		mov	byte ptr [eax+14h], 3
		mov	[esp+18h+Src], offset aIdentify	; "IDENTIFY"
		call	_strdup
		mov	[esi+10h], eax
		test	eax, eax
		jz	loc_62B9EA90
		mov	edx, [ebx+18h]
		mov	eax, [edx+58h]
		test	eax, eax
		jz	loc_62B9E9B8
		movzx	eax, word ptr [edx+64h]
		mov	ecx, [edx+5Ch]
		mov	[ecx+eax], esi

loc_62B9DDC9:				; CODE XREF: silc_client_commands_register+D8Bj
		test	byte ptr [edx+68h], 1
		jnz	loc_62B9E900

loc_62B9DDD3:				; CODE XREF: silc_client_commands_register+CDAj
		mov	[edx+5Ch], esi
		movzx	eax, word ptr [edx+64h]
		mov	dword ptr [esi+eax], 0
		add	dword ptr [edx+68h], 4

loc_62B9DDE5:				; CODE XREF: silc_client_commands_register+152j
					; silc_client_commands_register+E68j
		mov	[esp+18h+var_14], 18h
		mov	[esp+18h+Src], 1
		call	silc_calloc
		mov	esi, eax
		test	eax, eax
		jz	short loc_62B9DE60
		mov	byte ptr [eax+4], 4
		mov	dword ptr [eax+8], offset silc_client_command_nick
		mov	dword ptr [eax+0Ch], offset silc_client_command_reply_nick
		mov	byte ptr [eax+14h], 2
		mov	[esp+18h+Src], offset aNick_0 ;	"NICK"
		call	_strdup
		mov	[esi+10h], eax
		test	eax, eax
		jz	loc_62B9EA80
		mov	edx, [ebx+18h]
		mov	ecx, [edx+58h]
		test	ecx, ecx
		jz	loc_62B9E9C0
		movzx	eax, word ptr [edx+64h]
		mov	ecx, [edx+5Ch]
		mov	[ecx+eax], esi

loc_62B9DE44:				; CODE XREF: silc_client_commands_register+D93j
		test	byte ptr [edx+68h], 1
		jnz	loc_62B9E8F0

loc_62B9DE4E:				; CODE XREF: silc_client_commands_register+CCAj
		mov	[edx+5Ch], esi
		movzx	eax, word ptr [edx+64h]
		mov	dword ptr [esi+eax], 0
		add	dword ptr [edx+68h], 4

loc_62B9DE60:				; CODE XREF: silc_client_commands_register+1CDj
					; silc_client_commands_register+E58j
		mov	[esp+18h+var_14], 18h
		mov	[esp+18h+Src], 1
		call	silc_calloc
		mov	esi, eax
		test	eax, eax
		jz	short loc_62B9DEDB
		mov	byte ptr [eax+4], 5
		mov	dword ptr [eax+8], offset silc_client_command_list
		mov	dword ptr [eax+0Ch], offset silc_client_command_reply_list
		mov	byte ptr [eax+14h], 2
		mov	[esp+18h+Src], offset aList ; "LIST"
		call	_strdup
		mov	[esi+10h], eax
		test	eax, eax
		jz	loc_62B9EA50
		mov	edx, [ebx+18h]
		mov	eax, [edx+58h]
		test	eax, eax
		jz	loc_62B9E9D8
		movzx	eax, word ptr [edx+64h]
		mov	ecx, [edx+5Ch]
		mov	[ecx+eax], esi

loc_62B9DEBF:				; CODE XREF: silc_client_commands_register+DABj
		test	byte ptr [edx+68h], 1
		jnz	loc_62B9E8E0

loc_62B9DEC9:				; CODE XREF: silc_client_commands_register+CBAj
		mov	[edx+5Ch], esi
		movzx	eax, word ptr [edx+64h]
		mov	dword ptr [esi+eax], 0
		add	dword ptr [edx+68h], 4

loc_62B9DEDB:				; CODE XREF: silc_client_commands_register+248j
					; silc_client_commands_register+E28j
		mov	[esp+18h+var_10], 3 ; int
		mov	[esp+18h+var_14], offset silc_client_command_reply_topic ; int
		mov	[esp+18h+Src], offset silc_client_command_topic	; int
		mov	ecx, offset aTopic ; "TOPIC"
		mov	edx, 6
		mov	eax, ebx
		call	sub_62B94B84
		mov	[esp+18h+var_14], 18h
		mov	[esp+18h+Src], 1
		call	silc_calloc
		mov	esi, eax
		test	eax, eax
		jz	short loc_62B9DF7E
		mov	byte ptr [eax+4], 7
		mov	dword ptr [eax+8], offset silc_client_command_invite
		mov	dword ptr [eax+0Ch], offset silc_client_command_reply_invite
		mov	byte ptr [eax+14h], 3
		mov	[esp+18h+Src], offset aInvite ;	"INVITE"
		call	_strdup
		mov	[esi+10h], eax
		test	eax, eax
		jz	loc_62B9EA40
		mov	edx, [ebx+18h]
		mov	ecx, [edx+58h]
		test	ecx, ecx
		jz	loc_62B9E930
		movzx	eax, word ptr [edx+64h]
		mov	ecx, [edx+5Ch]
		mov	[ecx+eax], esi

loc_62B9DF62:				; CODE XREF: silc_client_commands_register+D03j
		test	byte ptr [edx+68h], 1
		jnz	loc_62B9E8D0

loc_62B9DF6C:				; CODE XREF: silc_client_commands_register+CAAj
		mov	[edx+5Ch], esi
		movzx	eax, word ptr [edx+64h]
		mov	dword ptr [esi+eax], 0
		add	dword ptr [edx+68h], 4

loc_62B9DF7E:				; CODE XREF: silc_client_commands_register+2EBj
					; silc_client_commands_register+E18j
		mov	[esp+18h+var_14], 18h
		mov	[esp+18h+Src], 1
		call	silc_calloc
		mov	esi, eax
		test	eax, eax
		jz	short loc_62B9DFF9
		mov	byte ptr [eax+4], 8
		mov	dword ptr [eax+8], offset silc_client_command_quit
		mov	dword ptr [eax+0Ch], offset silc_client_command_reply_quit
		mov	byte ptr [eax+14h], 2
		mov	[esp+18h+Src], offset aQuit ; "QUIT"
		call	_strdup
		mov	[esi+10h], eax
		test	eax, eax
		jz	loc_62B9EB30
		mov	edx, [ebx+18h]
		mov	eax, [edx+58h]
		test	eax, eax
		jz	loc_62B9E968
		movzx	eax, word ptr [edx+64h]
		mov	ecx, [edx+5Ch]
		mov	[ecx+eax], esi

loc_62B9DFDD:				; CODE XREF: silc_client_commands_register+D3Bj
		test	byte ptr [edx+68h], 1
		jnz	loc_62B9E8C0

loc_62B9DFE7:				; CODE XREF: silc_client_commands_register+C9Aj
		mov	[edx+5Ch], esi
		movzx	eax, word ptr [edx+64h]
		mov	dword ptr [esi+eax], 0
		add	dword ptr [edx+68h], 4

loc_62B9DFF9:				; CODE XREF: silc_client_commands_register+366j
					; silc_client_commands_register+F08j
		mov	[esp+18h+var_14], 18h
		mov	[esp+18h+Src], 1
		call	silc_calloc
		mov	esi, eax
		test	eax, eax
		jz	short loc_62B9E074
		mov	byte ptr [eax+4], 9
		mov	dword ptr [eax+8], offset silc_client_command_kill
		mov	dword ptr [eax+0Ch], offset silc_client_command_reply_kill
		mov	byte ptr [eax+14h], 4
		mov	[esp+18h+Src], offset aKill ; "KILL"
		call	_strdup
		mov	[esi+10h], eax
		test	eax, eax
		jz	loc_62B9EAE0
		mov	edx, [ebx+18h]
		mov	ecx, [edx+58h]
		test	ecx, ecx
		jz	loc_62B9E970
		movzx	eax, word ptr [edx+64h]
		mov	ecx, [edx+5Ch]
		mov	[ecx+eax], esi

loc_62B9E058:				; CODE XREF: silc_client_commands_register+D43j
		test	byte ptr [edx+68h], 1
		jnz	loc_62B9E8B0

loc_62B9E062:				; CODE XREF: silc_client_commands_register+C8Aj
		mov	[edx+5Ch], esi
		movzx	eax, word ptr [edx+64h]
		mov	dword ptr [esi+eax], 0
		add	dword ptr [edx+68h], 4

loc_62B9E074:				; CODE XREF: silc_client_commands_register+3E1j
					; silc_client_commands_register+EB8j
		mov	[esp+18h+var_14], 18h
		mov	[esp+18h+Src], 1
		call	silc_calloc
		mov	esi, eax
		test	eax, eax
		jz	short loc_62B9E0EF
		mov	byte ptr [eax+4], 0Ah
		mov	dword ptr [eax+8], offset silc_client_command_info
		mov	dword ptr [eax+0Ch], offset silc_client_command_reply_info
		mov	byte ptr [eax+14h], 2
		mov	[esp+18h+Src], offset aInfo ; "INFO"
		call	_strdup
		mov	[esi+10h], eax
		test	eax, eax
		jz	loc_62B9E9F0
		mov	edx, [ebx+18h]
		mov	eax, [edx+58h]
		test	eax, eax
		jz	loc_62B9E948
		movzx	eax, word ptr [edx+64h]
		mov	ecx, [edx+5Ch]
		mov	[ecx+eax], esi

loc_62B9E0D3:				; CODE XREF: silc_client_commands_register+D1Bj
		test	byte ptr [edx+68h], 1
		jnz	loc_62B9E8A0

loc_62B9E0DD:				; CODE XREF: silc_client_commands_register+C7Aj
		mov	[edx+5Ch], esi
		movzx	eax, word ptr [edx+64h]
		mov	dword ptr [esi+eax], 0
		add	dword ptr [edx+68h], 4

loc_62B9E0EF:				; CODE XREF: silc_client_commands_register+45Cj
					; silc_client_commands_register+DC8j
		mov	[esp+18h+var_14], 18h
		mov	[esp+18h+Src], 1
		call	silc_calloc
		mov	esi, eax
		test	eax, eax
		jz	short loc_62B9E16A
		mov	byte ptr [eax+4], 0Bh
		mov	dword ptr [eax+8], offset silc_client_command_stats
		mov	dword ptr [eax+0Ch], offset silc_client_command_reply_stats
		mov	byte ptr [eax+14h], 0
		mov	[esp+18h+Src], offset aStats ; "STATS"
		call	_strdup
		mov	[esi+10h], eax
		test	eax, eax
		jz	loc_62B9EB00
		mov	edx, [ebx+18h]
		mov	ecx, [edx+58h]
		test	ecx, ecx
		jz	loc_62B9E950
		movzx	eax, word ptr [edx+64h]
		mov	ecx, [edx+5Ch]
		mov	[ecx+eax], esi

loc_62B9E14E:				; CODE XREF: silc_client_commands_register+D23j
		test	byte ptr [edx+68h], 1
		jnz	loc_62B9E890

loc_62B9E158:				; CODE XREF: silc_client_commands_register+C6Aj
		mov	[edx+5Ch], esi
		movzx	eax, word ptr [edx+64h]
		mov	dword ptr [esi+eax], 0
		add	dword ptr [edx+68h], 4

loc_62B9E16A:				; CODE XREF: silc_client_commands_register+4D7j
					; silc_client_commands_register+ED8j
		mov	[esp+18h+var_14], 18h
		mov	[esp+18h+Src], 1
		call	silc_calloc
		mov	esi, eax
		test	eax, eax
		jz	short loc_62B9E1E5
		mov	byte ptr [eax+4], 0Ch
		mov	dword ptr [eax+8], offset silc_client_command_ping
		mov	dword ptr [eax+0Ch], offset silc_client_command_reply_ping
		mov	byte ptr [eax+14h], 2
		mov	[esp+18h+Src], offset aPing ; "PING"
		call	_strdup
		mov	[esi+10h], eax
		test	eax, eax
		jz	loc_62B9EAF0
		mov	edx, [ebx+18h]
		mov	eax, [edx+58h]
		test	eax, eax
		jz	loc_62B9E938
		movzx	eax, word ptr [edx+64h]
		mov	ecx, [edx+5Ch]
		mov	[ecx+eax], esi

loc_62B9E1C9:				; CODE XREF: silc_client_commands_register+D0Bj
		test	byte ptr [edx+68h], 1
		jnz	loc_62B9E880

loc_62B9E1D3:				; CODE XREF: silc_client_commands_register+C5Aj
		mov	[edx+5Ch], esi
		movzx	eax, word ptr [edx+64h]
		mov	dword ptr [esi+eax], 0
		add	dword ptr [edx+68h], 4

loc_62B9E1E5:				; CODE XREF: silc_client_commands_register+552j
					; silc_client_commands_register+EC8j
		mov	[esp+18h+var_14], 18h
		mov	[esp+18h+Src], 1
		call	silc_calloc
		mov	esi, eax
		test	eax, eax
		jz	short loc_62B9E260
		mov	byte ptr [eax+4], 0Dh
		mov	dword ptr [eax+8], offset silc_client_command_oper
		mov	dword ptr [eax+0Ch], offset silc_client_command_reply_oper
		mov	byte ptr [eax+14h], 3
		mov	[esp+18h+Src], offset aOper ; "OPER"
		call	_strdup
		mov	[esi+10h], eax
		test	eax, eax
		jz	loc_62B9EB10
		mov	edx, [ebx+18h]
		mov	ecx, [edx+58h]
		test	ecx, ecx
		jz	loc_62B9E940
		movzx	eax, word ptr [edx+64h]
		mov	ecx, [edx+5Ch]
		mov	[ecx+eax], esi

loc_62B9E244:				; CODE XREF: silc_client_commands_register+D13j
		test	byte ptr [edx+68h], 1
		jnz	loc_62B9E870

loc_62B9E24E:				; CODE XREF: silc_client_commands_register+C4Aj
		mov	[edx+5Ch], esi
		movzx	eax, word ptr [edx+64h]
		mov	dword ptr [esi+eax], 0
		add	dword ptr [edx+68h], 4

loc_62B9E260:				; CODE XREF: silc_client_commands_register+5CDj
					; silc_client_commands_register+EE8j
		mov	[esp+18h+var_14], 18h
		mov	[esp+18h+Src], 1
		call	silc_calloc
		mov	esi, eax
		test	eax, eax
		jz	short loc_62B9E2DB
		mov	byte ptr [eax+4], 0Eh
		mov	dword ptr [eax+8], offset silc_client_command_join
		mov	dword ptr [eax+0Ch], offset silc_client_command_reply_join
		mov	byte ptr [eax+14h], 9
		mov	[esp+18h+Src], offset aJoin ; "JOIN"
		call	_strdup
		mov	[esi+10h], eax
		test	eax, eax
		jz	loc_62B9EA10
		mov	edx, [ebx+18h]
		mov	eax, [edx+58h]
		test	eax, eax
		jz	loc_62B9E958
		movzx	eax, word ptr [edx+64h]
		mov	ecx, [edx+5Ch]
		mov	[ecx+eax], esi

loc_62B9E2BF:				; CODE XREF: silc_client_commands_register+D2Bj
		test	byte ptr [edx+68h], 1
		jnz	loc_62B9E860

loc_62B9E2C9:				; CODE XREF: silc_client_commands_register+C3Aj
		mov	[edx+5Ch], esi
		movzx	eax, word ptr [edx+64h]
		mov	dword ptr [esi+eax], 0
		add	dword ptr [edx+68h], 4

loc_62B9E2DB:				; CODE XREF: silc_client_commands_register+648j
					; silc_client_commands_register+DE8j
		mov	[esp+18h+var_14], 18h
		mov	[esp+18h+Src], 1
		call	silc_calloc
		mov	esi, eax
		test	eax, eax
		jz	short loc_62B9E356
		mov	byte ptr [eax+4], 0Fh
		mov	dword ptr [eax+8], offset silc_client_command_motd
		mov	dword ptr [eax+0Ch], offset silc_client_command_reply_motd
		mov	byte ptr [eax+14h], 2
		mov	[esp+18h+Src], offset aMotd ; "MOTD"
		call	_strdup
		mov	[esi+10h], eax
		test	eax, eax
		jz	loc_62B9EA00
		mov	edx, [ebx+18h]
		mov	ecx, [edx+58h]
		test	ecx, ecx
		jz	loc_62B9E960
		movzx	eax, word ptr [edx+64h]
		mov	ecx, [edx+5Ch]
		mov	[ecx+eax], esi

loc_62B9E33A:				; CODE XREF: silc_client_commands_register+D33j
		test	byte ptr [edx+68h], 1
		jnz	loc_62B9E850

loc_62B9E344:				; CODE XREF: silc_client_commands_register+C2Aj
		mov	[edx+5Ch], esi
		movzx	eax, word ptr [edx+64h]
		mov	dword ptr [esi+eax], 0
		add	dword ptr [edx+68h], 4

loc_62B9E356:				; CODE XREF: silc_client_commands_register+6C3j
					; silc_client_commands_register+DD8j
		mov	[esp+18h+var_14], 18h
		mov	[esp+18h+Src], 1
		call	silc_calloc
		mov	esi, eax
		test	eax, eax
		jz	short loc_62B9E3D1
		mov	byte ptr [eax+4], 10h
		mov	dword ptr [eax+8], offset silc_client_command_umode
		mov	dword ptr [eax+0Ch], offset silc_client_command_reply_umode
		mov	byte ptr [eax+14h], 2
		mov	[esp+18h+Src], offset aUmode ; "UMODE"
		call	_strdup
		mov	[esi+10h], eax
		test	eax, eax
		jz	loc_62B9EAB0
		mov	edx, [ebx+18h]
		mov	eax, [edx+58h]
		test	eax, eax
		jz	loc_62B9E988
		movzx	eax, word ptr [edx+64h]
		mov	ecx, [edx+5Ch]
		mov	[ecx+eax], esi

loc_62B9E3B5:				; CODE XREF: silc_client_commands_register+D5Bj
		test	byte ptr [edx+68h], 1
		jnz	loc_62B9E840

loc_62B9E3BF:				; CODE XREF: silc_client_commands_register+C1Aj
		mov	[edx+5Ch], esi
		movzx	eax, word ptr [edx+64h]
		mov	dword ptr [esi+eax], 0
		add	dword ptr [edx+68h], 4

loc_62B9E3D1:				; CODE XREF: silc_client_commands_register+73Ej
					; silc_client_commands_register+E88j
		mov	[esp+18h+var_14], 18h
		mov	[esp+18h+Src], 1
		call	silc_calloc
		mov	esi, eax
		test	eax, eax
		jz	short loc_62B9E44C
		mov	byte ptr [eax+4], 11h
		mov	dword ptr [eax+8], offset silc_client_command_cmode
		mov	dword ptr [eax+0Ch], offset silc_client_command_reply_cmode
		mov	byte ptr [eax+14h], 6
		mov	[esp+18h+Src], offset aCmode ; "CMODE"
		call	_strdup
		mov	[esi+10h], eax
		test	eax, eax
		jz	loc_62B9EAA0
		mov	edx, [ebx+18h]
		mov	ecx, [edx+58h]
		test	ecx, ecx
		jz	loc_62B9E990
		movzx	eax, word ptr [edx+64h]
		mov	ecx, [edx+5Ch]
		mov	[ecx+eax], esi

loc_62B9E430:				; CODE XREF: silc_client_commands_register+D63j
		test	byte ptr [edx+68h], 1
		jnz	loc_62B9E830

loc_62B9E43A:				; CODE XREF: silc_client_commands_register+C0Aj
		mov	[edx+5Ch], esi
		movzx	eax, word ptr [edx+64h]
		mov	dword ptr [esi+eax], 0
		add	dword ptr [edx+68h], 4

loc_62B9E44C:				; CODE XREF: silc_client_commands_register+7B9j
					; silc_client_commands_register+E78j
		mov	[esp+18h+var_14], 18h
		mov	[esp+18h+Src], 1
		call	silc_calloc
		mov	esi, eax
		test	eax, eax
		jz	short loc_62B9E4C7
		mov	byte ptr [eax+4], 12h
		mov	dword ptr [eax+8], offset silc_client_command_cumode
		mov	dword ptr [eax+0Ch], offset silc_client_command_reply_cumode
		mov	byte ptr [eax+14h], 9
		mov	[esp+18h+Src], offset aCumode ;	"CUMODE"
		call	_strdup
		mov	[esi+10h], eax
		test	eax, eax
		jz	loc_62B9EA70
		mov	edx, [ebx+18h]
		mov	eax, [edx+58h]
		test	eax, eax
		jz	loc_62B9E9A8
		movzx	eax, word ptr [edx+64h]
		mov	ecx, [edx+5Ch]
		mov	[ecx+eax], esi

loc_62B9E4AB:				; CODE XREF: silc_client_commands_register+D7Bj
		test	byte ptr [edx+68h], 1
		jnz	loc_62B9E820

loc_62B9E4B5:				; CODE XREF: silc_client_commands_register+BFAj
		mov	[edx+5Ch], esi
		movzx	eax, word ptr [edx+64h]
		mov	dword ptr [esi+eax], 0
		add	dword ptr [edx+68h], 4

loc_62B9E4C7:				; CODE XREF: silc_client_commands_register+834j
					; silc_client_commands_register+E48j
		mov	[esp+18h+var_14], 18h
		mov	[esp+18h+Src], 1
		call	silc_calloc
		mov	esi, eax
		test	eax, eax
		jz	short loc_62B9E542
		mov	byte ptr [eax+4], 13h
		mov	dword ptr [eax+8], offset silc_client_command_kick
		mov	dword ptr [eax+0Ch], offset silc_client_command_reply_kick
		mov	byte ptr [eax+14h], 4
		mov	[esp+18h+Src], offset aKick ; "KICK"
		call	_strdup
		mov	[esi+10h], eax
		test	eax, eax
		jz	loc_62B9EA60
		mov	edx, [ebx+18h]
		mov	ecx, [edx+58h]
		test	ecx, ecx
		jz	loc_62B9E9B0
		movzx	eax, word ptr [edx+64h]
		mov	ecx, [edx+5Ch]
		mov	[ecx+eax], esi

loc_62B9E526:				; CODE XREF: silc_client_commands_register+D83j
		test	byte ptr [edx+68h], 1
		jnz	loc_62B9E810

loc_62B9E530:				; CODE XREF: silc_client_commands_register+BEAj
		mov	[edx+5Ch], esi
		movzx	eax, word ptr [edx+64h]
		mov	dword ptr [esi+eax], 0
		add	dword ptr [edx+68h], 4

loc_62B9E542:				; CODE XREF: silc_client_commands_register+8AFj
					; silc_client_commands_register+E38j
		mov	[esp+18h+var_14], 18h
		mov	[esp+18h+Src], 1
		call	silc_calloc
		mov	esi, eax
		test	eax, eax
		jz	short loc_62B9E5BD
		mov	byte ptr [eax+4], 14h
		mov	dword ptr [eax+8], offset silc_client_command_ban
		mov	dword ptr [eax+0Ch], offset silc_client_command_reply_ban
		mov	byte ptr [eax+14h], 3
		mov	[esp+18h+Src], offset aBan ; "BAN"
		call	_strdup
		mov	[esi+10h], eax
		test	eax, eax
		jz	loc_62B9EAD0
		mov	edx, [ebx+18h]
		mov	eax, [edx+58h]
		test	eax, eax
		jz	loc_62B9E998
		movzx	eax, word ptr [edx+64h]
		mov	ecx, [edx+5Ch]
		mov	[ecx+eax], esi

loc_62B9E5A1:				; CODE XREF: silc_client_commands_register+D6Bj
		test	byte ptr [edx+68h], 1
		jnz	loc_62B9E800

loc_62B9E5AB:				; CODE XREF: silc_client_commands_register+BDAj
		mov	[edx+5Ch], esi
		movzx	eax, word ptr [edx+64h]
		mov	dword ptr [esi+eax], 0
		add	dword ptr [edx+68h], 4

loc_62B9E5BD:				; CODE XREF: silc_client_commands_register+92Aj
					; silc_client_commands_register+EA8j
		mov	[esp+18h+var_14], 18h
		mov	[esp+18h+Src], 1
		call	silc_calloc
		mov	esi, eax
		test	eax, eax
		jz	short loc_62B9E638
		mov	byte ptr [eax+4], 15h
		mov	dword ptr [eax+8], offset silc_client_command_detach
		mov	dword ptr [eax+0Ch], offset silc_client_command_reply_detach
		mov	byte ptr [eax+14h], 0
		mov	[esp+18h+Src], offset aDetach ;	"DETACH"
		call	_strdup
		mov	[esi+10h], eax
		test	eax, eax
		jz	loc_62B9EAC0
		mov	edx, [ebx+18h]
		mov	ecx, [edx+58h]
		test	ecx, ecx
		jz	loc_62B9E9A0
		movzx	eax, word ptr [edx+64h]
		mov	ecx, [edx+5Ch]
		mov	[ecx+eax], esi

loc_62B9E61C:				; CODE XREF: silc_client_commands_register+D73j
		test	byte ptr [edx+68h], 1
		jnz	loc_62B9E7F0

loc_62B9E626:				; CODE XREF: silc_client_commands_register+BCAj
		mov	[edx+5Ch], esi
		movzx	eax, word ptr [edx+64h]
		mov	dword ptr [esi+eax], 0
		add	dword ptr [edx+68h], 4

loc_62B9E638:				; CODE XREF: silc_client_commands_register+9A5j
					; silc_client_commands_register+E98j
		mov	[esp+18h+var_14], 18h
		mov	[esp+18h+Src], 1
		call	silc_calloc
		mov	esi, eax
		test	eax, eax
		jz	short loc_62B9E6B3
		mov	byte ptr [eax+4], 16h
		mov	dword ptr [eax+8], offset silc_client_command_watch
		mov	dword ptr [eax+0Ch], offset silc_client_command_reply_watch
		mov	byte ptr [eax+14h], 3
		mov	[esp+18h+Src], offset aWatch ; "WATCH"
		call	_strdup
		mov	[esi+10h], eax
		test	eax, eax
		jz	loc_62B9EB20
		mov	edx, [ebx+18h]
		mov	eax, [edx+58h]
		test	eax, eax
		jz	loc_62B9E978
		movzx	eax, word ptr [edx+64h]
		mov	ecx, [edx+5Ch]
		mov	[ecx+eax], esi

loc_62B9E697:				; CODE XREF: silc_client_commands_register+D4Bj
		test	byte ptr [edx+68h], 1
		jnz	loc_62B9E7E0

loc_62B9E6A1:				; CODE XREF: silc_client_commands_register+BBAj
		mov	[edx+5Ch], esi
		movzx	eax, word ptr [edx+64h]
		mov	dword ptr [esi+eax], 0
		add	dword ptr [edx+68h], 4

loc_62B9E6B3:				; CODE XREF: silc_client_commands_register+A20j
					; silc_client_commands_register+EF8j
		mov	[esp+18h+var_10], 3 ; int
		mov	[esp+18h+var_14], offset silc_client_command_reply_silcoper ; int
		mov	[esp+18h+Src], offset silc_client_command_silcoper ; int
		mov	ecx, offset aSilcoper ;	"SILCOPER"
		mov	edx, 17h
		mov	eax, ebx
		call	sub_62B94B84
		mov	[esp+18h+var_10], 2 ; int
		mov	[esp+18h+var_14], offset silc_client_command_reply_leave ; int
		mov	[esp+18h+Src], offset silc_client_command_leave	; int
		mov	ecx, offset aLeave ; "LEAVE"
		mov	edx, 18h
		mov	eax, ebx
		call	sub_62B94B84
		mov	[esp+18h+var_10], 2 ; int
		mov	[esp+18h+var_14], offset silc_client_command_reply_users ; int
		mov	[esp+18h+Src], offset silc_client_command_users	; int
		mov	ecx, offset aUsers ; "USERS"
		mov	edx, 19h
		mov	eax, ebx
		call	sub_62B94B84
		mov	[esp+18h+var_10], 2 ; int
		mov	[esp+18h+var_14], offset silc_client_command_reply_getkey ; int
		mov	[esp+18h+Src], offset silc_client_command_getkey ; int
		mov	ecx, offset aGetkey ; "GETKEY"
		mov	edx, 1Ah
		mov	eax, ebx
		call	sub_62B94B84
		mov	[esp+18h+var_14], 18h
		mov	[esp+18h+Src], 1
		call	silc_calloc
		mov	esi, eax
		test	eax, eax
		jz	short loc_62B9E7CA
		mov	byte ptr [eax+4], 1Bh
		mov	dword ptr [eax+8], offset silc_client_command_service
		mov	dword ptr [eax+0Ch], offset silc_client_command_reply_service
		mov	byte ptr [eax+14h], 0Ah
		mov	[esp+18h+Src], offset aService ; "SERVICE"
		call	_strdup
		mov	[esi+10h], eax
		test	eax, eax
		jz	loc_62B9E9E0
		mov	edx, [ebx+18h]
		mov	ecx, [edx+58h]
		test	ecx, ecx
		jz	loc_62B9E980
		movzx	eax, word ptr [edx+64h]
		mov	ecx, [edx+5Ch]
		mov	[ecx+eax], esi

loc_62B9E7B2:				; CODE XREF: silc_client_commands_register+D53j
		test	byte ptr [edx+68h], 1
		jnz	short loc_62B9E7D4

loc_62B9E7B8:				; CODE XREF: silc_client_commands_register+BAEj
		mov	[edx+5Ch], esi
		movzx	eax, word ptr [edx+64h]
		mov	dword ptr [esi+eax], 0
		add	dword ptr [edx+68h], 4

loc_62B9E7CA:				; CODE XREF: silc_client_commands_register+B3Bj
		add	esp, 10h
		pop	ebx
		pop	esi
		leave
		retn
; ---------------------------------------------------------------------------
		align 4

loc_62B9E7D4:				; CODE XREF: silc_client_commands_register+B86j
		movzx	eax, word ptr [edx+66h]
		mov	ecx, [edx+5Ch]
		mov	[esi+eax], ecx
		jmp	short loc_62B9E7B8
; ---------------------------------------------------------------------------

loc_62B9E7E0:				; CODE XREF: silc_client_commands_register+A6Bj
		movzx	eax, word ptr [edx+66h]
		mov	ecx, [edx+5Ch]
		mov	[esi+eax], ecx
		jmp	loc_62B9E6A1
; ---------------------------------------------------------------------------
		align 10h

loc_62B9E7F0:				; CODE XREF: silc_client_commands_register+9F0j
		movzx	eax, word ptr [edx+66h]
		mov	ecx, [edx+5Ch]
		mov	[esi+eax], ecx
		jmp	loc_62B9E626
; ---------------------------------------------------------------------------
		align 10h

loc_62B9E800:				; CODE XREF: silc_client_commands_register+975j
		movzx	eax, word ptr [edx+66h]
		mov	ecx, [edx+5Ch]
		mov	[esi+eax], ecx
		jmp	loc_62B9E5AB
; ---------------------------------------------------------------------------
		align 10h

loc_62B9E810:				; CODE XREF: silc_client_commands_register+8FAj
		movzx	eax, word ptr [edx+66h]
		mov	ecx, [edx+5Ch]
		mov	[esi+eax], ecx
		jmp	loc_62B9E530
; ---------------------------------------------------------------------------
		align 10h

loc_62B9E820:				; CODE XREF: silc_client_commands_register+87Fj
		movzx	eax, word ptr [edx+66h]
		mov	ecx, [edx+5Ch]
		mov	[esi+eax], ecx
		jmp	loc_62B9E4B5
; ---------------------------------------------------------------------------
		align 10h

loc_62B9E830:				; CODE XREF: silc_client_commands_register+804j
		movzx	eax, word ptr [edx+66h]
		mov	ecx, [edx+5Ch]
		mov	[esi+eax], ecx
		jmp	loc_62B9E43A
; ---------------------------------------------------------------------------
		align 10h

loc_62B9E840:				; CODE XREF: silc_client_commands_register+789j
		movzx	eax, word ptr [edx+66h]
		mov	ecx, [edx+5Ch]
		mov	[esi+eax], ecx
		jmp	loc_62B9E3BF
; ---------------------------------------------------------------------------
		align 10h

loc_62B9E850:				; CODE XREF: silc_client_commands_register+70Ej
		movzx	eax, word ptr [edx+66h]
		mov	ecx, [edx+5Ch]
		mov	[esi+eax], ecx
		jmp	loc_62B9E344
; ---------------------------------------------------------------------------
		align 10h

loc_62B9E860:				; CODE XREF: silc_client_commands_register+693j
		movzx	eax, word ptr [edx+66h]
		mov	ecx, [edx+5Ch]
		mov	[esi+eax], ecx
		jmp	loc_62B9E2C9
; ---------------------------------------------------------------------------
		align 10h

loc_62B9E870:				; CODE XREF: silc_client_commands_register+618j
		movzx	eax, word ptr [edx+66h]
		mov	ecx, [edx+5Ch]
		mov	[esi+eax], ecx
		jmp	loc_62B9E24E
; ---------------------------------------------------------------------------
		align 10h

loc_62B9E880:				; CODE XREF: silc_client_commands_register+59Dj
		movzx	eax, word ptr [edx+66h]
		mov	ecx, [edx+5Ch]
		mov	[esi+eax], ecx
		jmp	loc_62B9E1D3
; ---------------------------------------------------------------------------
		align 10h

loc_62B9E890:				; CODE XREF: silc_client_commands_register+522j
		movzx	eax, word ptr [edx+66h]
		mov	ecx, [edx+5Ch]
		mov	[esi+eax], ecx
		jmp	loc_62B9E158
; ---------------------------------------------------------------------------
		align 10h

loc_62B9E8A0:				; CODE XREF: silc_client_commands_register+4A7j
		movzx	eax, word ptr [edx+66h]
		mov	ecx, [edx+5Ch]
		mov	[esi+eax], ecx
		jmp	loc_62B9E0DD
; ---------------------------------------------------------------------------
		align 10h

loc_62B9E8B0:				; CODE XREF: silc_client_commands_register+42Cj
		movzx	eax, word ptr [edx+66h]
		mov	ecx, [edx+5Ch]
		mov	[esi+eax], ecx
		jmp	loc_62B9E062
; ---------------------------------------------------------------------------
		align 10h

loc_62B9E8C0:				; CODE XREF: silc_client_commands_register+3B1j
		movzx	eax, word ptr [edx+66h]
		mov	ecx, [edx+5Ch]
		mov	[esi+eax], ecx
		jmp	loc_62B9DFE7
; ---------------------------------------------------------------------------
		align 10h

loc_62B9E8D0:				; CODE XREF: silc_client_commands_register+336j
		movzx	eax, word ptr [edx+66h]
		mov	ecx, [edx+5Ch]
		mov	[esi+eax], ecx
		jmp	loc_62B9DF6C
; ---------------------------------------------------------------------------
		align 10h

loc_62B9E8E0:				; CODE XREF: silc_client_commands_register+293j
		movzx	eax, word ptr [edx+66h]
		mov	ecx, [edx+5Ch]
		mov	[esi+eax], ecx
		jmp	loc_62B9DEC9
; ---------------------------------------------------------------------------
		align 10h

loc_62B9E8F0:				; CODE XREF: silc_client_commands_register+218j
		movzx	eax, word ptr [edx+66h]
		mov	ecx, [edx+5Ch]
		mov	[esi+eax], ecx
		jmp	loc_62B9DE4E
; ---------------------------------------------------------------------------
		align 10h

loc_62B9E900:				; CODE XREF: silc_client_commands_register+19Dj
		movzx	eax, word ptr [edx+66h]
		mov	ecx, [edx+5Ch]
		mov	[esi+eax], ecx
		jmp	loc_62B9DDD3
; ---------------------------------------------------------------------------
		align 10h

loc_62B9E910:				; CODE XREF: silc_client_commands_register+122j
		movzx	eax, word ptr [edx+66h]
		mov	ecx, [edx+5Ch]
		mov	[esi+eax], ecx
		jmp	loc_62B9DD58
; ---------------------------------------------------------------------------
		align 10h

loc_62B9E920:				; CODE XREF: silc_client_commands_register+A7j
		movzx	eax, word ptr [edx+66h]
		mov	ecx, [edx+5Ch]
		mov	[esi+eax], ecx
		jmp	loc_62B9DCDD
; ---------------------------------------------------------------------------
		align 10h

loc_62B9E930:				; CODE XREF: silc_client_commands_register+322j
		mov	[edx+58h], esi
		jmp	loc_62B9DF62
; ---------------------------------------------------------------------------

loc_62B9E938:				; CODE XREF: silc_client_commands_register+589j
		mov	[edx+58h], esi
		jmp	loc_62B9E1C9
; ---------------------------------------------------------------------------

loc_62B9E940:				; CODE XREF: silc_client_commands_register+604j
		mov	[edx+58h], esi
		jmp	loc_62B9E244
; ---------------------------------------------------------------------------

loc_62B9E948:				; CODE XREF: silc_client_commands_register+493j
		mov	[edx+58h], esi
		jmp	loc_62B9E0D3
; ---------------------------------------------------------------------------

loc_62B9E950:				; CODE XREF: silc_client_commands_register+50Ej
		mov	[edx+58h], esi
		jmp	loc_62B9E14E
; ---------------------------------------------------------------------------

loc_62B9E958:				; CODE XREF: silc_client_commands_register+67Fj
		mov	[edx+58h], esi
		jmp	loc_62B9E2BF
; ---------------------------------------------------------------------------

loc_62B9E960:				; CODE XREF: silc_client_commands_register+6FAj
		mov	[edx+58h], esi
		jmp	loc_62B9E33A
; ---------------------------------------------------------------------------

loc_62B9E968:				; CODE XREF: silc_client_commands_register+39Dj
		mov	[edx+58h], esi
		jmp	loc_62B9DFDD
; ---------------------------------------------------------------------------

loc_62B9E970:				; CODE XREF: silc_client_commands_register+418j
		mov	[edx+58h], esi
		jmp	loc_62B9E058
; ---------------------------------------------------------------------------

loc_62B9E978:				; CODE XREF: silc_client_commands_register+A57j
		mov	[edx+58h], esi
		jmp	loc_62B9E697
; ---------------------------------------------------------------------------

loc_62B9E980:				; CODE XREF: silc_client_commands_register+B72j
		mov	[edx+58h], esi
		jmp	loc_62B9E7B2
; ---------------------------------------------------------------------------

loc_62B9E988:				; CODE XREF: silc_client_commands_register+775j
		mov	[edx+58h], esi
		jmp	loc_62B9E3B5
; ---------------------------------------------------------------------------

loc_62B9E990:				; CODE XREF: silc_client_commands_register+7F0j
		mov	[edx+58h], esi
		jmp	loc_62B9E430
; ---------------------------------------------------------------------------

loc_62B9E998:				; CODE XREF: silc_client_commands_register+961j
		mov	[edx+58h], esi
		jmp	loc_62B9E5A1
; ---------------------------------------------------------------------------

loc_62B9E9A0:				; CODE XREF: silc_client_commands_register+9DCj
		mov	[edx+58h], esi
		jmp	loc_62B9E61C
; ---------------------------------------------------------------------------

loc_62B9E9A8:				; CODE XREF: silc_client_commands_register+86Bj
		mov	[edx+58h], esi
		jmp	loc_62B9E4AB
; ---------------------------------------------------------------------------

loc_62B9E9B0:				; CODE XREF: silc_client_commands_register+8E6j
		mov	[edx+58h], esi
		jmp	loc_62B9E526
; ---------------------------------------------------------------------------

loc_62B9E9B8:				; CODE XREF: silc_client_commands_register+189j
		mov	[edx+58h], esi
		jmp	loc_62B9DDC9
; ---------------------------------------------------------------------------

loc_62B9E9C0:				; CODE XREF: silc_client_commands_register+204j
		mov	[edx+58h], esi
		jmp	loc_62B9DE44
; ---------------------------------------------------------------------------

loc_62B9E9C8:				; CODE XREF: silc_client_commands_register+93j
		mov	[edx+58h], esi
		jmp	loc_62B9DCD3
; ---------------------------------------------------------------------------

loc_62B9E9D0:				; CODE XREF: silc_client_commands_register+10Ej
		mov	[edx+58h], esi
		jmp	loc_62B9DD4E
; ---------------------------------------------------------------------------

loc_62B9E9D8:				; CODE XREF: silc_client_commands_register+27Fj
		mov	[edx+58h], esi
		jmp	loc_62B9DEBF
; ---------------------------------------------------------------------------

loc_62B9E9E0:				; CODE XREF: silc_client_commands_register+B64j
		mov	[ebp+arg_0], esi
		add	esp, 10h
		pop	ebx
		pop	esi
		leave
		jmp	silc_free
; ---------------------------------------------------------------------------
		align 10h

loc_62B9E9F0:				; CODE XREF: silc_client_commands_register+485j
		mov	[esp+18h+Src], esi
		call	silc_free
		jmp	loc_62B9E0EF
; ---------------------------------------------------------------------------
		align 10h

loc_62B9EA00:				; CODE XREF: silc_client_commands_register+6ECj
		mov	[esp+18h+Src], esi
		call	silc_free
		jmp	loc_62B9E356
; ---------------------------------------------------------------------------
		align 10h

loc_62B9EA10:				; CODE XREF: silc_client_commands_register+671j
		mov	[esp+18h+Src], esi
		call	silc_free
		jmp	loc_62B9E2DB
; ---------------------------------------------------------------------------
		align 10h

loc_62B9EA20:				; CODE XREF: silc_client_commands_register+100j
		mov	[esp+18h+Src], esi
		call	silc_free
		jmp	loc_62B9DD6A
; ---------------------------------------------------------------------------
		align 10h

loc_62B9EA30:				; CODE XREF: silc_client_commands_register+85j
		mov	[esp+18h+Src], esi
		call	silc_free
		jmp	loc_62B9DCEF
; ---------------------------------------------------------------------------
		align 10h

loc_62B9EA40:				; CODE XREF: silc_client_commands_register+314j
		mov	[esp+18h+Src], esi
		call	silc_free
		jmp	loc_62B9DF7E
; ---------------------------------------------------------------------------
		align 10h

loc_62B9EA50:				; CODE XREF: silc_client_commands_register+271j
		mov	[esp+18h+Src], esi
		call	silc_free
		jmp	loc_62B9DEDB
; ---------------------------------------------------------------------------
		align 10h

loc_62B9EA60:				; CODE XREF: silc_client_commands_register+8D8j
		mov	[esp+18h+Src], esi
		call	silc_free
		jmp	loc_62B9E542
; ---------------------------------------------------------------------------
		align 10h

loc_62B9EA70:				; CODE XREF: silc_client_commands_register+85Dj
		mov	[esp+18h+Src], esi
		call	silc_free
		jmp	loc_62B9E4C7
; ---------------------------------------------------------------------------
		align 10h

loc_62B9EA80:				; CODE XREF: silc_client_commands_register+1F6j
		mov	[esp+18h+Src], esi
		call	silc_free
		jmp	loc_62B9DE60
; ---------------------------------------------------------------------------
		align 10h

loc_62B9EA90:				; CODE XREF: silc_client_commands_register+17Bj
		mov	[esp+18h+Src], esi
		call	silc_free
		jmp	loc_62B9DDE5
; ---------------------------------------------------------------------------
		align 10h

loc_62B9EAA0:				; CODE XREF: silc_client_commands_register+7E2j
		mov	[esp+18h+Src], esi
		call	silc_free
		jmp	loc_62B9E44C
; ---------------------------------------------------------------------------
		align 10h

loc_62B9EAB0:				; CODE XREF: silc_client_commands_register+767j
		mov	[esp+18h+Src], esi
		call	silc_free
		jmp	loc_62B9E3D1
; ---------------------------------------------------------------------------
		align 10h

loc_62B9EAC0:				; CODE XREF: silc_client_commands_register+9CEj
		mov	[esp+18h+Src], esi
		call	silc_free
		jmp	loc_62B9E638
; ---------------------------------------------------------------------------
		align 10h

loc_62B9EAD0:				; CODE XREF: silc_client_commands_register+953j
		mov	[esp+18h+Src], esi
		call	silc_free
		jmp	loc_62B9E5BD
; ---------------------------------------------------------------------------
		align 10h

loc_62B9EAE0:				; CODE XREF: silc_client_commands_register+40Aj
		mov	[esp+18h+Src], esi
		call	silc_free
		jmp	loc_62B9E074
; ---------------------------------------------------------------------------
		align 10h

loc_62B9EAF0:				; CODE XREF: silc_client_commands_register+57Bj
		mov	[esp+18h+Src], esi
		call	silc_free
		jmp	loc_62B9E1E5
; ---------------------------------------------------------------------------
		align 10h

loc_62B9EB00:				; CODE XREF: silc_client_commands_register+500j
		mov	[esp+18h+Src], esi
		call	silc_free
		jmp	loc_62B9E16A
; ---------------------------------------------------------------------------
		align 10h

loc_62B9EB10:				; CODE XREF: silc_client_commands_register+5F6j
		mov	[esp+18h+Src], esi
		call	silc_free
		jmp	loc_62B9E260
; ---------------------------------------------------------------------------
		align 10h

loc_62B9EB20:				; CODE XREF: silc_client_commands_register+A49j
		mov	[esp+18h+Src], esi
		call	silc_free
		jmp	loc_62B9E6B3
; ---------------------------------------------------------------------------
		align 10h

loc_62B9EB30:				; CODE XREF: silc_client_commands_register+38Fj
		mov	[esp+18h+Src], esi
		call	silc_free
		jmp	loc_62B9DFF9
silc_client_commands_register endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  68. silc_client_command_reply_quit

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public silc_client_command_reply_quit
silc_client_command_reply_quit proc near ; DATA	XREF: silc_client_commands_unregister+51Eo
					; silc_client_commands_register+373o ...

var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 18h
		mov	[esp+18h+var_14], offset silc_client_command_reply_processed
		mov	eax, [ebp+arg_0]
		mov	[esp+18h+var_18], eax
		call	silc_fsm_next
		xor	eax, eax
		leave
		retn
silc_client_command_reply_quit endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_62B9EB60	proc near		; CODE XREF: silc_client_command_reply_service+68p
					; silc_client_command_reply_watch+68p ...

var_58		= dword	ptr -58h
var_54		= dword	ptr -54h
var_50		= dword	ptr -50h
var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_38		= byte ptr -38h

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		sub	esp, 4Ch
		mov	ebx, eax
		mov	esi, [eax+4]
		mov	edi, [esi+4Ch]
		mov	[esp+58h+var_58], edx
		call	silc_command_get_args
		mov	dl, [ebx+5Dh]
		cmp	dl, 16h
		jz	short loc_62B9EBFC
		cmp	dl, 17h
		jz	loc_62B9EC84
		cmp	dl, 2Fh
		jz	short loc_62B9EB98

loc_62B9EB8F:				; CODE XREF: sub_62B9EB60+61j
					; sub_62B9EB60+77j ...
		add	esp, 4Ch
		pop	ebx
		pop	esi
		pop	edi
		leave
		retn
; ---------------------------------------------------------------------------
		align 4

loc_62B9EB98:				; CODE XREF: sub_62B9EB60+2Dj
		mov	[esp+58h+var_48], 0
		lea	ebx, [ebp+var_38]
		mov	[esp+58h+var_4C], ebx
		mov	[esp+58h+var_50], 0
		mov	[esp+58h+var_54], 2
		mov	[esp+58h+var_58], eax
		call	silc_argument_get_decoded
		test	al, al
		jz	short loc_62B9EB8F
		mov	[esp+58h+var_50], ebx
		mov	[esp+58h+var_54], esi
		mov	[esp+58h+var_58], edi
		call	silc_client_get_server_by_id
		mov	ebx, eax
		test	eax, eax
		jz	short loc_62B9EB8F
		mov	[esp+58h+var_50], eax
		mov	[esp+58h+var_54], esi
		mov	[esp+58h+var_58], edi
		call	silc_client_del_server
		mov	[esp+58h+var_50], ebx
		mov	[esp+58h+var_54], esi
		mov	[esp+58h+var_58], edi
		call	silc_client_unref_server
		jmp	short loc_62B9EB8F
; ---------------------------------------------------------------------------
		align 4

loc_62B9EBFC:				; CODE XREF: sub_62B9EB60+1Fj
		mov	[esp+58h+var_48], 0
		lea	ebx, [ebp+var_38]
		mov	[esp+58h+var_4C], ebx
		mov	[esp+58h+var_50], 0
		mov	[esp+58h+var_54], 2
		mov	[esp+58h+var_58], eax
		call	silc_argument_get_decoded
		test	al, al
		jz	loc_62B9EB8F
		mov	[esp+58h+var_50], ebx
		mov	[esp+58h+var_54], esi
		mov	[esp+58h+var_58], edi
		call	silc_client_get_client_by_id
		mov	ebx, eax
		test	eax, eax
		jz	loc_62B9EB8F
		mov	[esp+58h+var_50], eax
		mov	[esp+58h+var_54], esi
		mov	[esp+58h+var_58], edi
		call	silc_client_remove_from_channels
		and	byte ptr [ebx+402h], 0FEh
		mov	[esp+58h+var_50], ebx
		mov	[esp+58h+var_54], esi
		mov	[esp+58h+var_58], edi
		call	silc_client_del_client
		mov	[esp+58h+var_50], ebx
		mov	[esp+58h+var_54], esi
		mov	[esp+58h+var_58], edi
		call	silc_client_unref_client
		jmp	loc_62B9EB8F
; ---------------------------------------------------------------------------
		align 4

loc_62B9EC84:				; CODE XREF: sub_62B9EB60+24j
		mov	[esp+58h+var_48], 0
		lea	ebx, [ebp+var_38]
		mov	[esp+58h+var_4C], ebx
		mov	[esp+58h+var_50], 0
		mov	[esp+58h+var_54], 2
		mov	[esp+58h+var_58], eax
		call	silc_argument_get_decoded
		test	al, al
		jz	loc_62B9EB8F
		mov	[esp+58h+var_50], ebx
		mov	[esp+58h+var_54], esi
		mov	[esp+58h+var_58], edi
		call	silc_client_get_channel_by_id
		mov	ebx, eax
		test	eax, eax
		jz	loc_62B9EB8F
		mov	[esp+58h+var_50], eax
		mov	[esp+58h+var_54], esi
		mov	[esp+58h+var_58], edi
		call	silc_client_empty_channel
		mov	[esp+58h+var_50], ebx
		mov	[esp+58h+var_54], esi
		mov	[esp+58h+var_58], edi
		call	silc_client_del_channel
		mov	[esp+58h+var_50], ebx
		mov	[esp+58h+var_54], esi
		mov	[esp+58h+var_58], edi
		call	silc_client_unref_channel
		jmp	loc_62B9EB8F
sub_62B9EB60	endp

; ---------------------------------------------------------------------------
		align 4

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_62B9ED04	proc near		; CODE XREF: silc_client_command_reply_service+5Bp
					; silc_client_command_reply_service+CAp ...

var_68		= dword	ptr -68h
var_64		= dword	ptr -64h
var_60		= dword	ptr -60h
var_5C		= dword	ptr -5Ch
var_58		= dword	ptr -58h
var_54		= dword	ptr -54h
var_50		= dword	ptr -50h
var_3C		= dword	ptr -3Ch
var_2C		= dword	ptr -2Ch
var_20		= word ptr -20h
var_1C		= byte ptr -1Ch
arg_0		= dword	ptr  8
arg_4		= byte ptr  0Ch

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		sub	esp, 5Ch
		mov	ebx, [ebp+arg_0]
		test	byte ptr [ebx+64h], 1
		jnz	loc_62B9EDA0

loc_62B9ED1A:				; CODE XREF: sub_62B9ED04+D1j
		lea	edi, [ebp+var_2C]
		lea	esi, [ebx+48h]
		mov	ecx, 5
		rep movsd
		mov	esi, [ebp+var_2C]
		movzx	edx, [ebp+var_20]
		test	esi, esi
		jz	short loc_62B9ED47
		xchg	ax, ax

loc_62B9ED34:				; CODE XREF: sub_62B9ED04+41j
		and	[ebp+var_1C], 0FDh
		mov	edi, [esi+edx]
		test	byte ptr [esi+0Ch], 1
		jz	short loc_62B9ED50
		mov	esi, edi

loc_62B9ED43:				; CODE XREF: sub_62B9ED04+9Aj
		test	esi, esi
		jnz	short loc_62B9ED34

loc_62B9ED47:				; CODE XREF: sub_62B9ED04+2Cj
		add	esp, 5Ch
		pop	ebx
		pop	esi
		pop	edi
		leave
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_62B9ED50:				; CODE XREF: sub_62B9ED04+3Bj
		mov	eax, [ebx+4]
		lea	ecx, [ebp+arg_4]
		mov	[esp+68h+var_50], ecx
		mov	ecx, [esi+8]
		mov	[esp+68h+var_54], ecx
		movzx	ecx, byte ptr [ebx+5Dh]
		mov	[esp+68h+var_58], ecx
		movzx	ecx, byte ptr [ebx+5Ch]
		mov	[esp+68h+var_5C], ecx
		movzx	ecx, byte ptr [ebx+34h]
		mov	[esp+68h+var_60], ecx
		mov	[esp+68h+var_64], eax
		mov	eax, [eax+4Ch]
		mov	[esp+68h+var_68], eax
		mov	[ebp+var_3C], edx
		call	dword ptr [esi+4]
		test	al, al
		setz	cl
		mov	al, [esi+0Ch]
		and	eax, 0FFFFFFFEh
		or	eax, ecx
		mov	[esi+0Ch], al
		mov	edx, [ebp+var_3C]
		mov	esi, edi
		jmp	short loc_62B9ED43
; ---------------------------------------------------------------------------

loc_62B9EDA0:				; CODE XREF: sub_62B9ED04+10j
		mov	edx, [ebx+4]
		mov	eax, [edx+4Ch]
		mov	ecx, [eax+18h]
		mov	ecx, [ecx+48h]
		lea	esi, [ebp+arg_4]
		mov	[esp+68h+var_54], esi
		movzx	esi, byte ptr [ebx+5Dh]
		mov	[esp+68h+var_58], esi
		movzx	esi, byte ptr [ebx+5Ch]
		mov	[esp+68h+var_5C], esi
		movzx	esi, byte ptr [ebx+34h]
		mov	[esp+68h+var_60], esi
		mov	[esp+68h+var_64], edx
		mov	[esp+68h+var_68], eax
		call	dword ptr [ecx+14h]
		jmp	loc_62B9ED1A
sub_62B9ED04	endp

; ---------------------------------------------------------------------------
		align 4
; Exported entry  69. silc_client_command_reply_service

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public silc_client_command_reply_service
silc_client_command_reply_service proc near
					; DATA XREF: silc_client_commands_unregister+122Eo
					; silc_client_commands_register+B48o ...

var_58		= dword	ptr -58h
var_54		= dword	ptr -54h
var_50		= dword	ptr -50h
var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= byte ptr -1Ch
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		sub	esp, 4Ch
		mov	edi, [ebp+arg_0]
		mov	ebx, [ebp+arg_4]
		mov	esi, [ebp+arg_8]
		mov	[esp+58h+var_58], esi
		call	silc_command_get_args
		mov	edx, eax
		mov	al, [ebx+5Dh]
		test	al, al
		jz	short loc_62B9EE64
		test	byte ptr [ebx+64h], 2
		jnz	loc_62B9EEF0

loc_62B9EE09:				; CODE XREF: silc_client_command_reply_service+15Aj
		mov	[ebp+var_20], 0
		mov	[ebp+var_24], 0
		mov	al, [ebx+5Ch]
		test	al, al
		jnz	loc_62B9EEC8
		mov	al, [ebx+5Dh]
		mov	[ebx+5Ch], al
		xor	eax, eax
		xor	edx, edx

loc_62B9EE2C:				; CODE XREF: silc_client_command_reply_service+10Fj
		mov	[esp+58h+var_50], edx
		mov	[esp+58h+var_54], eax
		mov	[esp+58h+var_58], ebx
		call	sub_62B9ED04
		movzx	ecx, byte ptr [ebx+5Dh]
		mov	edx, esi
		mov	eax, ebx
		call	sub_62B9EB60
		mov	[esp+58h+var_54], offset silc_client_command_reply_processed
		mov	[esp+58h+var_58], edi
		call	silc_fsm_next
		xor	eax, eax
		add	esp, 4Ch
		pop	ebx
		pop	esi
		pop	edi
		leave
		retn
; ---------------------------------------------------------------------------
		align 4

loc_62B9EE64:				; CODE XREF: silc_client_command_reply_service+21j
		lea	esi, [ebp+var_1C]
		mov	[esp+58h+var_50], esi
		mov	[esp+58h+var_54], 2
		mov	[esp+58h+var_58], edx
		mov	[ebp+var_30], edx
		call	silc_argument_get_arg_type
		mov	[esp+54h+var_4C], esi
		mov	[esp+54h+var_50], 3
		mov	edx, [ebp+var_30]
		mov	[esp+54h+var_54], edx
		mov	[ebp+var_30], eax
		call	silc_argument_get_arg_type
		mov	[esp+54h+var_4C], eax
		mov	ecx, [ebp+var_30]
		mov	[esp+54h+var_50], ecx
		mov	[esp+54h+var_54], ebx
		call	sub_62B9ED04
		mov	[esp+54h+var_50], offset silc_client_command_reply_processed
		mov	[esp+54h+var_54], edi
		call	silc_fsm_next
		xor	eax, eax
		add	esp, 4Ch
		pop	ebx
		pop	esi
		pop	edi
		leave
		retn
; ---------------------------------------------------------------------------
		align 4

loc_62B9EEC8:				; CODE XREF: silc_client_command_reply_service+40j
		lea	ecx, [ebp+var_24]
		mov	[esp+58h+var_4C], ecx
		lea	ecx, [ebp+var_20]
		mov	[esp+58h+var_50], ecx
		mov	[esp+58h+var_54], edx
		movzx	eax, al
		mov	[esp+58h+var_58], eax
		call	silc_status_get_args
		mov	edx, [ebp+var_24]
		mov	eax, [ebp+var_20]
		jmp	loc_62B9EE2C
; ---------------------------------------------------------------------------

loc_62B9EEF0:				; CODE XREF: silc_client_command_reply_service+27j
		mov	ecx, [ebx+4]
		mov	ecx, [ecx+4Ch]
		mov	ecx, [ecx+18h]
		mov	ecx, [ecx+48h]
		mov	ecx, [ecx]
		mov	[ebp+var_2C], ecx
		movzx	eax, al
		mov	[esp+58h+var_58], eax
		mov	[ebp+var_30], edx
		call	silc_get_status_message
		mov	ecx, [ebx+4]
		mov	[esp+58h+var_48], eax
		mov	[esp+58h+var_4C], offset aCannotGetServi ; "Cannot get service:	%s"
		mov	[esp+58h+var_50], 3
		mov	[esp+58h+var_54], ecx
		mov	eax, [ecx+4Ch]
		mov	[esp+58h+var_58], eax
		call	[ebp+var_2C]
		mov	edx, [ebp+var_30]
		jmp	loc_62B9EE09
silc_client_command_reply_service endp

; ---------------------------------------------------------------------------
		align 4
; Exported entry  72. silc_client_command_reply_timeout

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public silc_client_command_reply_timeout
silc_client_command_reply_timeout proc near ; DATA XREF: silc_client_command_reply_wait+34o

var_68		= dword	ptr -68h
var_64		= dword	ptr -64h
var_60		= dword	ptr -60h
var_5C		= dword	ptr -5Ch
var_4C		= dword	ptr -4Ch
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		sub	esp, 5Ch
		mov	ebx, [ebp+arg_4]
		mov	eax, [ebx+4]
		mov	[ebp+var_30], eax
		mov	ecx, [eax+54h]
		mov	[ebp+var_2C], ecx
		test	byte ptr [ecx+12Dh], 2
		jz	loc_62B9EFE8
		mov	edx, [ecx+0D8h]
		test	edx, edx
		jz	short loc_62B9EF8F
		cmp	ebx, edx
		jz	loc_62B9F19A
		movzx	edi, word ptr [ecx+0E4h]
		jmp	short loc_62B9EF86
; ---------------------------------------------------------------------------

loc_62B9EF7C:				; CODE XREF: silc_client_command_reply_timeout+51j
		cmp	ebx, eax
		jz	loc_62B9F068
		mov	edx, eax

loc_62B9EF86:				; CODE XREF: silc_client_command_reply_timeout+3Ej
		lea	esi, [edx+edi]
		mov	eax, [esi]
		test	eax, eax
		jnz	short loc_62B9EF7C

loc_62B9EF8F:				; CODE XREF: silc_client_command_reply_timeout+2Dj
		mov	eax, [ebp+var_2C]
		cmp	[eax+0DCh], ebx
		jz	loc_62B9F14C

loc_62B9EF9E:				; CODE XREF: silc_client_command_reply_timeout+16Dj
					; silc_client_command_reply_timeout+216j
		test	byte ptr [ebx+64h], 1
		jnz	short loc_62B9EFD9
		mov	[ebp+var_20], 0
		mov	[ebp+var_1C], 0
		mov	al, [ebx+5Ch]
		test	al, al
		jnz	loc_62B9F120

loc_62B9EFBD:				; CODE XREF: silc_client_command_reply_timeout+FDj
		mov	byte ptr [ebx+5Dh], 36h
		mov	byte ptr [ebx+5Ch], 36h
		xor	eax, eax
		xor	edx, edx

loc_62B9EFC9:				; CODE XREF: silc_client_command_reply_timeout+126j
					; silc_client_command_reply_timeout+20Bj
		mov	[esp+68h+var_60], edx
		mov	[esp+68h+var_64], eax
		mov	[esp+68h+var_68], ebx
		call	sub_62B9ED04

loc_62B9EFD9:				; CODE XREF: silc_client_command_reply_timeout+66j
		mov	eax, 3
		add	esp, 5Ch
		pop	ebx
		pop	esi
		pop	edi
		leave
		retn
; ---------------------------------------------------------------------------
		align 4

loc_62B9EFE8:				; CODE XREF: silc_client_command_reply_timeout+1Fj
		mov	edx, [ecx+0D8h]
		test	edx, edx
		jz	short loc_62B9F017
		cmp	ebx, edx
		jz	loc_62B9F183
		movzx	edi, word ptr [ecx+0E4h]
		jmp	short loc_62B9F00E
; ---------------------------------------------------------------------------
		align 4

loc_62B9F004:				; CODE XREF: silc_client_command_reply_timeout+D9j
		cmp	ebx, eax
		jz	loc_62B9F0B4
		mov	edx, eax

loc_62B9F00E:				; CODE XREF: silc_client_command_reply_timeout+C5j
		lea	esi, [edx+edi]
		mov	eax, [esi]
		test	eax, eax
		jnz	short loc_62B9F004

loc_62B9F017:				; CODE XREF: silc_client_command_reply_timeout+B4j
		mov	eax, [ebp+var_2C]
		cmp	[eax+0DCh], ebx
		jz	loc_62B9F158

loc_62B9F026:				; CODE XREF: silc_client_command_reply_timeout+1B5j
					; silc_client_command_reply_timeout+222j
		mov	[ebp+var_1C], 0
		mov	[ebp+var_20], 0
		mov	al, [ebx+5Ch]
		test	al, al
		jz	short loc_62B9EFBD
		lea	edx, [ebp+var_20]
		mov	[esp+68h+var_5C], edx
		lea	edx, [ebp+var_1C]
		mov	[esp+68h+var_60], edx
		mov	[esp+68h+var_64], 0
		movzx	eax, al
		mov	[esp+68h+var_68], eax
		call	silc_status_get_args
		mov	edx, [ebp+var_20]
		mov	eax, [ebp+var_1C]
		jmp	loc_62B9EFC9
; ---------------------------------------------------------------------------
		align 4

loc_62B9F068:				; CODE XREF: silc_client_command_reply_timeout+42j
		mov	[ebp+var_4C], esi

loc_62B9F06B:				; CODE XREF: silc_client_command_reply_timeout+270j
		mov	eax, [ebx+edi]
		mov	edi, [ebp+var_4C]
		mov	[edi], eax
		test	eax, eax
		jz	short loc_62B9F084
		test	byte ptr [ecx+0E8h], 1
		jnz	loc_62B9F10C

loc_62B9F084:				; CODE XREF: silc_client_command_reply_timeout+139j
					; silc_client_command_reply_timeout+1DDj
		cmp	[ecx+0E0h], ebx
		jz	loc_62B9F163

loc_62B9F090:				; CODE XREF: silc_client_command_reply_timeout+232j
		sub	dword ptr [ecx+0E8h], 4
		mov	edi, [ebp+var_30]
		mov	edi, [edi+54h]
		mov	[ebp+var_2C], edi
		mov	eax, [ebp+var_2C]
		cmp	[eax+0DCh], ebx
		jnz	loc_62B9EF9E
		jmp	loc_62B9F14C
; ---------------------------------------------------------------------------

loc_62B9F0B4:				; CODE XREF: silc_client_command_reply_timeout+CAj
		mov	[ebp+var_4C], esi

loc_62B9F0B7:				; CODE XREF: silc_client_command_reply_timeout+259j
		mov	eax, [ebx+edi]
		mov	edi, [ebp+var_4C]
		mov	[edi], eax
		test	eax, eax
		jz	short loc_62B9F0CC
		test	byte ptr [ecx+0E8h], 1
		jnz	short loc_62B9F0FC

loc_62B9F0CC:				; CODE XREF: silc_client_command_reply_timeout+185j
					; silc_client_command_reply_timeout+1CDj
		cmp	[ecx+0E0h], ebx
		jz	loc_62B9F173

loc_62B9F0D8:				; CODE XREF: silc_client_command_reply_timeout+242j
		sub	dword ptr [ecx+0E8h], 4
		mov	edi, [ebp+var_30]
		mov	edi, [edi+54h]
		mov	[ebp+var_2C], edi
		mov	eax, [ebp+var_2C]
		cmp	[eax+0DCh], ebx
		jnz	loc_62B9F026
		jmp	short loc_62B9F158
; ---------------------------------------------------------------------------
		align 4

loc_62B9F0FC:				; CODE XREF: silc_client_command_reply_timeout+18Ej
		movzx	esi, word ptr [ecx+0E6h]
		mov	edi, [ebx+esi]
		mov	[eax+esi], edi
		jmp	short loc_62B9F0CC
; ---------------------------------------------------------------------------
		align 4

loc_62B9F10C:				; CODE XREF: silc_client_command_reply_timeout+142j
		movzx	esi, word ptr [ecx+0E6h]
		mov	edi, [ebx+esi]
		mov	[eax+esi], edi
		jmp	loc_62B9F084
; ---------------------------------------------------------------------------
		align 10h

loc_62B9F120:				; CODE XREF: silc_client_command_reply_timeout+7Bj
		lea	edx, [ebp+var_1C]
		mov	[esp+68h+var_5C], edx
		lea	edx, [ebp+var_20]
		mov	[esp+68h+var_60], edx
		mov	[esp+68h+var_64], 0
		movzx	eax, al
		mov	[esp+68h+var_68], eax
		call	silc_status_get_args
		mov	edx, [ebp+var_1C]
		mov	eax, [ebp+var_20]
		jmp	loc_62B9EFC9
; ---------------------------------------------------------------------------

loc_62B9F14C:				; CODE XREF: silc_client_command_reply_timeout+5Cj
					; silc_client_command_reply_timeout+173j
		mov	[eax+0DCh], edx
		jmp	loc_62B9EF9E
; ---------------------------------------------------------------------------
		align 4

loc_62B9F158:				; CODE XREF: silc_client_command_reply_timeout+E4j
					; silc_client_command_reply_timeout+1BBj
		mov	[eax+0DCh], edx
		jmp	loc_62B9F026
; ---------------------------------------------------------------------------

loc_62B9F163:				; CODE XREF: silc_client_command_reply_timeout+14Ej
		mov	esi, [ebp+var_4C]
		mov	eax, [esi]
		mov	[ecx+0E0h], eax
		jmp	loc_62B9F090
; ---------------------------------------------------------------------------

loc_62B9F173:				; CODE XREF: silc_client_command_reply_timeout+196j
		mov	esi, [ebp+var_4C]
		mov	eax, [esi]
		mov	[ecx+0E0h], eax
		jmp	loc_62B9F0D8
; ---------------------------------------------------------------------------

loc_62B9F183:				; CODE XREF: silc_client_command_reply_timeout+B8j
		lea	esi, [ecx+0D8h]
		mov	[ebp+var_4C], esi
		movzx	edi, word ptr [ecx+0E4h]
		xor	edx, edx
		jmp	loc_62B9F0B7
; ---------------------------------------------------------------------------

loc_62B9F19A:				; CODE XREF: silc_client_command_reply_timeout+31j
		lea	esi, [ecx+0D8h]
		mov	[ebp+var_4C], esi
		movzx	edi, word ptr [ecx+0E4h]
		xor	edx, edx
		jmp	loc_62B9F06B
silc_client_command_reply_timeout endp

; ---------------------------------------------------------------------------
		align 4
; Exported entry  77. silc_client_command_reply_watch

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public silc_client_command_reply_watch
silc_client_command_reply_watch	proc near ; DATA XREF: silc_client_commands_unregister+EBEo
					; silc_client_commands_register+A2Do ...

var_58		= dword	ptr -58h
var_54		= dword	ptr -54h
var_50		= dword	ptr -50h
var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		sub	esp, 4Ch
		mov	edi, [ebp+arg_0]
		mov	ebx, [ebp+arg_4]
		mov	esi, [ebp+arg_8]
		mov	[esp+58h+var_58], esi
		call	silc_command_get_args
		mov	edx, eax
		mov	al, [ebx+5Dh]
		test	al, al
		jz	short loc_62B9F23C
		test	byte ptr [ebx+64h], 2
		jnz	loc_62B9F2CC

loc_62B9F1E1:				; CODE XREF: silc_client_command_reply_watch+15Ej
		mov	[ebp+var_20], 0
		mov	[ebp+var_1C], 0
		mov	al, [ebx+5Ch]
		test	al, al
		jnz	loc_62B9F2A4
		mov	al, [ebx+5Dh]
		mov	[ebx+5Ch], al
		xor	eax, eax
		xor	edx, edx

loc_62B9F204:				; CODE XREF: silc_client_command_reply_watch+113j
		mov	[esp+58h+var_50], edx
		mov	[esp+58h+var_54], eax
		mov	[esp+58h+var_58], ebx
		call	sub_62B9ED04
		movzx	ecx, byte ptr [ebx+5Dh]
		mov	edx, esi
		mov	eax, ebx
		call	sub_62B9EB60
		mov	[esp+58h+var_54], offset silc_client_command_reply_processed
		mov	[esp+58h+var_58], edi
		call	silc_fsm_next

loc_62B9F231:				; CODE XREF: silc_client_command_reply_watch+1B8j
		xor	eax, eax
		add	esp, 4Ch
		pop	ebx
		pop	esi
		pop	edi
		leave
		retn
; ---------------------------------------------------------------------------
		align 4

loc_62B9F23C:				; CODE XREF: silc_client_command_reply_watch+21j
		mov	[esp+58h+var_58], edx
		mov	[ebp+var_30], edx
		call	silc_argument_get_arg_num
		test	eax, eax
		mov	edx, [ebp+var_30]
		jnz	loc_62B9F340

loc_62B9F252:				; CODE XREF: silc_client_command_reply_watch+19Aj
		mov	[ebp+var_1C], 0
		mov	[ebp+var_20], 0
		mov	al, [ebx+5Ch]
		test	al, al
		jnz	loc_62B9F318
		mov	byte ptr [ebx+5Dh], 1Dh
		mov	byte ptr [ebx+5Ch], 1Dh
		xor	eax, eax
		xor	edx, edx

loc_62B9F277:				; CODE XREF: silc_client_command_reply_watch+187j
		mov	[esp+58h+var_50], edx
		mov	[esp+58h+var_54], eax
		mov	[esp+58h+var_58], ebx
		call	sub_62B9ED04
		mov	[esp+58h+var_54], offset silc_client_command_reply_processed
		mov	[esp+58h+var_58], edi
		call	silc_fsm_next
		xor	eax, eax
		add	esp, 4Ch
		pop	ebx
		pop	esi
		pop	edi
		leave
		retn
; ---------------------------------------------------------------------------
		align 4

loc_62B9F2A4:				; CODE XREF: silc_client_command_reply_watch+40j
		lea	ecx, [ebp+var_1C]
		mov	[esp+58h+var_4C], ecx
		lea	ecx, [ebp+var_20]
		mov	[esp+58h+var_50], ecx
		mov	[esp+58h+var_54], edx
		movzx	eax, al
		mov	[esp+58h+var_58], eax
		call	silc_status_get_args
		mov	edx, [ebp+var_1C]
		mov	eax, [ebp+var_20]
		jmp	loc_62B9F204
; ---------------------------------------------------------------------------

loc_62B9F2CC:				; CODE XREF: silc_client_command_reply_watch+27j
		mov	ecx, [ebx+4]
		mov	ecx, [ecx+4Ch]
		mov	ecx, [ecx+18h]
		mov	ecx, [ecx+48h]
		mov	ecx, [ecx]
		mov	[ebp+var_2C], ecx
		movzx	eax, al
		mov	[esp+58h+var_58], eax
		mov	[ebp+var_30], edx
		call	silc_get_status_message
		mov	ecx, [ebx+4]
		mov	[esp+58h+var_48], eax
		mov	[esp+58h+var_4C], offset aCannotSetWatch ; "Cannot set watch: %s"
		mov	[esp+58h+var_50], 3
		mov	[esp+58h+var_54], ecx
		mov	eax, [ecx+4Ch]
		mov	[esp+58h+var_58], eax
		call	[ebp+var_2C]
		mov	edx, [ebp+var_30]
		jmp	loc_62B9F1E1
; ---------------------------------------------------------------------------
		align 4

loc_62B9F318:				; CODE XREF: silc_client_command_reply_watch+B1j
		lea	ecx, [ebp+var_20]
		mov	[esp+58h+var_4C], ecx
		lea	ecx, [ebp+var_1C]
		mov	[esp+58h+var_50], ecx
		mov	[esp+58h+var_54], edx
		movzx	eax, al
		mov	[esp+58h+var_58], eax
		call	silc_status_get_args
		mov	edx, [ebp+var_20]
		mov	eax, [ebp+var_1C]
		jmp	loc_62B9F277
; ---------------------------------------------------------------------------

loc_62B9F340:				; CODE XREF: silc_client_command_reply_watch+98j
		mov	[esp+58h+var_58], edx
		call	silc_argument_get_arg_num
		cmp	eax, 1
		mov	edx, [ebp+var_30]
		ja	loc_62B9F252
		mov	[esp+58h+var_58], ebx
		call	sub_62B9ED04
		mov	[esp+58h+var_54], offset silc_client_command_reply_processed
		mov	[esp+58h+var_58], edi
		call	silc_fsm_next
		jmp	loc_62B9F231
silc_client_command_reply_watch	endp

; ---------------------------------------------------------------------------
		align 4
; Exported entry  64. silc_client_command_reply_oper

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public silc_client_command_reply_oper
silc_client_command_reply_oper proc near ; DATA	XREF: silc_client_commands_unregister+88Eo
					; silc_client_commands_register+5DAo ...

var_58		= dword	ptr -58h
var_54		= dword	ptr -54h
var_50		= dword	ptr -50h
var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		sub	esp, 4Ch
		mov	edi, [ebp+arg_0]
		mov	ebx, [ebp+arg_4]
		mov	esi, [ebp+arg_8]
		mov	[esp+58h+var_58], esi
		call	silc_command_get_args
		mov	edx, eax
		mov	al, [ebx+5Dh]
		test	al, al
		jz	short loc_62B9F3FC
		test	byte ptr [ebx+64h], 2
		jnz	loc_62B9F48C

loc_62B9F3A1:				; CODE XREF: silc_client_command_reply_oper+15Ej
		mov	[ebp+var_20], 0
		mov	[ebp+var_1C], 0
		mov	al, [ebx+5Ch]
		test	al, al
		jnz	loc_62B9F464
		mov	al, [ebx+5Dh]
		mov	[ebx+5Ch], al
		xor	eax, eax
		xor	edx, edx

loc_62B9F3C4:				; CODE XREF: silc_client_command_reply_oper+113j
		mov	[esp+58h+var_50], edx
		mov	[esp+58h+var_54], eax
		mov	[esp+58h+var_58], ebx
		call	sub_62B9ED04
		movzx	ecx, byte ptr [ebx+5Dh]
		mov	edx, esi
		mov	eax, ebx
		call	sub_62B9EB60
		mov	[esp+58h+var_54], offset silc_client_command_reply_processed
		mov	[esp+58h+var_58], edi
		call	silc_fsm_next

loc_62B9F3F1:				; CODE XREF: silc_client_command_reply_oper+1C4j
		xor	eax, eax
		add	esp, 4Ch
		pop	ebx
		pop	esi
		pop	edi
		leave
		retn
; ---------------------------------------------------------------------------
		align 4

loc_62B9F3FC:				; CODE XREF: silc_client_command_reply_oper+21j
		mov	[esp+58h+var_58], edx
		mov	[ebp+var_30], edx
		call	silc_argument_get_arg_num
		test	eax, eax
		mov	edx, [ebp+var_30]
		jnz	loc_62B9F500

loc_62B9F412:				; CODE XREF: silc_client_command_reply_oper+19Aj
		mov	[ebp+var_1C], 0
		mov	[ebp+var_20], 0
		mov	al, [ebx+5Ch]
		test	al, al
		jnz	loc_62B9F4D8
		mov	byte ptr [ebx+5Dh], 1Dh
		mov	byte ptr [ebx+5Ch], 1Dh
		xor	eax, eax
		xor	edx, edx

loc_62B9F437:				; CODE XREF: silc_client_command_reply_oper+187j
		mov	[esp+58h+var_50], edx
		mov	[esp+58h+var_54], eax
		mov	[esp+58h+var_58], ebx
		call	sub_62B9ED04
		mov	[esp+58h+var_54], offset silc_client_command_reply_processed
		mov	[esp+58h+var_58], edi
		call	silc_fsm_next
		xor	eax, eax
		add	esp, 4Ch
		pop	ebx
		pop	esi
		pop	edi
		leave
		retn
; ---------------------------------------------------------------------------
		align 4

loc_62B9F464:				; CODE XREF: silc_client_command_reply_oper+40j
		lea	ecx, [ebp+var_1C]
		mov	[esp+58h+var_4C], ecx
		lea	ecx, [ebp+var_20]
		mov	[esp+58h+var_50], ecx
		mov	[esp+58h+var_54], edx
		movzx	eax, al
		mov	[esp+58h+var_58], eax
		call	silc_status_get_args
		mov	edx, [ebp+var_1C]
		mov	eax, [ebp+var_20]
		jmp	loc_62B9F3C4
; ---------------------------------------------------------------------------

loc_62B9F48C:				; CODE XREF: silc_client_command_reply_oper+27j
		mov	ecx, [ebx+4]
		mov	ecx, [ecx+4Ch]
		mov	ecx, [ecx+18h]
		mov	ecx, [ecx+48h]
		mov	ecx, [ecx]
		mov	[ebp+var_2C], ecx
		movzx	eax, al
		mov	[esp+58h+var_58], eax
		mov	[ebp+var_30], edx
		call	silc_get_status_message
		mov	ecx, [ebx+4]
		mov	[esp+58h+var_48], eax
		mov	[esp+58h+var_4C], offset aCannotChangeMo ; "Cannot change mode:	%s"
		mov	[esp+58h+var_50], 3
		mov	[esp+58h+var_54], ecx
		mov	eax, [ecx+4Ch]
		mov	[esp+58h+var_58], eax
		call	[ebp+var_2C]
		mov	edx, [ebp+var_30]
		jmp	loc_62B9F3A1
; ---------------------------------------------------------------------------
		align 4

loc_62B9F4D8:				; CODE XREF: silc_client_command_reply_oper+B1j
		lea	ecx, [ebp+var_20]
		mov	[esp+58h+var_4C], ecx
		lea	ecx, [ebp+var_1C]
		mov	[esp+58h+var_50], ecx
		mov	[esp+58h+var_54], edx
		movzx	eax, al
		mov	[esp+58h+var_58], eax
		call	silc_status_get_args
		mov	edx, [ebp+var_20]
		mov	eax, [ebp+var_1C]
		jmp	loc_62B9F437
; ---------------------------------------------------------------------------

loc_62B9F500:				; CODE XREF: silc_client_command_reply_oper+98j
		mov	[esp+58h+var_58], edx
		call	silc_argument_get_arg_num
		cmp	eax, 1
		mov	edx, [ebp+var_30]
		ja	loc_62B9F412
		mov	eax, [ebx+4]
		mov	eax, [eax]
		or	dword ptr [eax+3ACh], 1
		mov	[esp+58h+var_58], ebx
		call	sub_62B9ED04
		mov	[esp+58h+var_54], offset silc_client_command_reply_processed
		mov	[esp+58h+var_58], edi
		call	silc_fsm_next
		jmp	loc_62B9F3F1
silc_client_command_reply_oper endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  70. silc_client_command_reply_silcoper

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public silc_client_command_reply_silcoper
silc_client_command_reply_silcoper proc	near
					; DATA XREF: silc_client_commands_unregister+F6Eo
					; silc_client_commands_register+A8Bo ...

var_58		= dword	ptr -58h
var_54		= dword	ptr -54h
var_50		= dword	ptr -50h
var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		sub	esp, 4Ch
		mov	edi, [ebp+arg_0]
		mov	ebx, [ebp+arg_4]
		mov	esi, [ebp+arg_8]
		mov	[esp+58h+var_58], esi
		call	silc_command_get_args
		mov	edx, eax
		mov	al, [ebx+5Dh]
		test	al, al
		jz	short loc_62B9F5C8
		test	byte ptr [ebx+64h], 2
		jnz	loc_62B9F658

loc_62B9F56D:				; CODE XREF: silc_client_command_reply_silcoper+15Ej
		mov	[ebp+var_20], 0
		mov	[ebp+var_1C], 0
		mov	al, [ebx+5Ch]
		test	al, al
		jnz	loc_62B9F630
		mov	al, [ebx+5Dh]
		mov	[ebx+5Ch], al
		xor	eax, eax
		xor	edx, edx

loc_62B9F590:				; CODE XREF: silc_client_command_reply_silcoper+113j
		mov	[esp+58h+var_50], edx
		mov	[esp+58h+var_54], eax
		mov	[esp+58h+var_58], ebx
		call	sub_62B9ED04
		movzx	ecx, byte ptr [ebx+5Dh]
		mov	edx, esi
		mov	eax, ebx
		call	sub_62B9EB60
		mov	[esp+58h+var_54], offset silc_client_command_reply_processed
		mov	[esp+58h+var_58], edi
		call	silc_fsm_next

loc_62B9F5BD:				; CODE XREF: silc_client_command_reply_silcoper+1C4j
		xor	eax, eax
		add	esp, 4Ch
		pop	ebx
		pop	esi
		pop	edi
		leave
		retn
; ---------------------------------------------------------------------------
		align 4

loc_62B9F5C8:				; CODE XREF: silc_client_command_reply_silcoper+21j
		mov	[esp+58h+var_58], edx
		mov	[ebp+var_30], edx
		call	silc_argument_get_arg_num
		test	eax, eax
		mov	edx, [ebp+var_30]
		jnz	loc_62B9F6CC

loc_62B9F5DE:				; CODE XREF: silc_client_command_reply_silcoper+19Aj
		mov	[ebp+var_1C], 0
		mov	[ebp+var_20], 0
		mov	al, [ebx+5Ch]
		test	al, al
		jnz	loc_62B9F6A4
		mov	byte ptr [ebx+5Dh], 1Dh
		mov	byte ptr [ebx+5Ch], 1Dh
		xor	eax, eax
		xor	edx, edx

loc_62B9F603:				; CODE XREF: silc_client_command_reply_silcoper+187j
		mov	[esp+58h+var_50], edx
		mov	[esp+58h+var_54], eax
		mov	[esp+58h+var_58], ebx
		call	sub_62B9ED04
		mov	[esp+58h+var_54], offset silc_client_command_reply_processed
		mov	[esp+58h+var_58], edi
		call	silc_fsm_next
		xor	eax, eax
		add	esp, 4Ch
		pop	ebx
		pop	esi
		pop	edi
		leave
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_62B9F630:				; CODE XREF: silc_client_command_reply_silcoper+40j
		lea	ecx, [ebp+var_1C]
		mov	[esp+58h+var_4C], ecx
		lea	ecx, [ebp+var_20]
		mov	[esp+58h+var_50], ecx
		mov	[esp+58h+var_54], edx
		movzx	eax, al
		mov	[esp+58h+var_58], eax
		call	silc_status_get_args
		mov	edx, [ebp+var_1C]
		mov	eax, [ebp+var_20]
		jmp	loc_62B9F590
; ---------------------------------------------------------------------------

loc_62B9F658:				; CODE XREF: silc_client_command_reply_silcoper+27j
		mov	ecx, [ebx+4]
		mov	ecx, [ecx+4Ch]
		mov	ecx, [ecx+18h]
		mov	ecx, [ecx+48h]
		mov	ecx, [ecx]
		mov	[ebp+var_2C], ecx
		movzx	eax, al
		mov	[esp+58h+var_58], eax
		mov	[ebp+var_30], edx
		call	silc_get_status_message
		mov	ecx, [ebx+4]
		mov	[esp+58h+var_48], eax
		mov	[esp+58h+var_4C], offset aCannotChangeMo ; "Cannot change mode:	%s"
		mov	[esp+58h+var_50], 3
		mov	[esp+58h+var_54], ecx
		mov	eax, [ecx+4Ch]
		mov	[esp+58h+var_58], eax
		call	[ebp+var_2C]
		mov	edx, [ebp+var_30]
		jmp	loc_62B9F56D
; ---------------------------------------------------------------------------
		align 4

loc_62B9F6A4:				; CODE XREF: silc_client_command_reply_silcoper+B1j
		lea	ecx, [ebp+var_20]
		mov	[esp+58h+var_4C], ecx
		lea	ecx, [ebp+var_1C]
		mov	[esp+58h+var_50], ecx
		mov	[esp+58h+var_54], edx
		movzx	eax, al
		mov	[esp+58h+var_58], eax
		call	silc_status_get_args
		mov	edx, [ebp+var_20]
		mov	eax, [ebp+var_1C]
		jmp	loc_62B9F603
; ---------------------------------------------------------------------------

loc_62B9F6CC:				; CODE XREF: silc_client_command_reply_silcoper+98j
		mov	[esp+58h+var_58], edx
		call	silc_argument_get_arg_num
		cmp	eax, 1
		mov	edx, [ebp+var_30]
		ja	loc_62B9F5DE
		mov	eax, [ebx+4]
		mov	eax, [eax]
		or	dword ptr [eax+3ACh], 2
		mov	[esp+58h+var_58], ebx
		call	sub_62B9ED04
		mov	[esp+58h+var_54], offset silc_client_command_reply_processed
		mov	[esp+58h+var_58], edi
		call	silc_fsm_next
		jmp	loc_62B9F5BD
silc_client_command_reply_silcoper endp

; ---------------------------------------------------------------------------
		align 4
; Exported entry  58. silc_client_command_reply_kick

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public silc_client_command_reply_kick
silc_client_command_reply_kick proc near ; DATA	XREF: silc_client_commands_unregister+CAEo
					; silc_client_commands_register+8BCo ...

var_78		= dword	ptr -78h
var_74		= dword	ptr -74h
var_70		= dword	ptr -70h
var_6C		= dword	ptr -6Ch
var_68		= dword	ptr -68h
var_50		= dword	ptr -50h
var_4C		= dword	ptr -4Ch
var_40		= byte ptr -40h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		sub	esp, 6Ch
		mov	ebx, [ebp+arg_4]
		mov	esi, [ebp+arg_8]
		mov	edi, [ebx+4]
		mov	eax, [edi+4Ch]
		mov	[ebp+var_4C], eax
		mov	[esp+78h+var_78], esi
		call	silc_command_get_args
		mov	edx, eax
		mov	al, [ebx+5Dh]
		test	al, al
		jz	short loc_62B9F79C
		test	byte ptr [ebx+64h], 2
		jnz	loc_62B9F830

loc_62B9F73F:				; CODE XREF: silc_client_command_reply_kick+166j
		mov	[ebp+var_20], 0
		mov	[ebp+var_1C], 0
		mov	al, [ebx+5Ch]
		test	al, al
		jnz	loc_62B9F808
		mov	al, [ebx+5Dh]
		mov	[ebx+5Ch], al
		xor	eax, eax
		xor	edx, edx

loc_62B9F762:				; CODE XREF: silc_client_command_reply_kick+11Fj
		mov	[esp+78h+var_70], edx
		mov	[esp+78h+var_74], eax
		mov	[esp+78h+var_78], ebx
		call	sub_62B9ED04
		movzx	ecx, byte ptr [ebx+5Dh]
		mov	edx, esi
		mov	eax, ebx
		call	sub_62B9EB60
		mov	[esp+78h+var_74], offset silc_client_command_reply_processed
		mov	eax, [ebp+arg_0]
		mov	[esp+78h+var_78], eax
		call	silc_fsm_next

loc_62B9F792:				; CODE XREF: silc_client_command_reply_kick+236j
		xor	eax, eax
		add	esp, 6Ch
		pop	ebx
		pop	esi
		pop	edi
		leave
		retn
; ---------------------------------------------------------------------------

loc_62B9F79C:				; CODE XREF: silc_client_command_reply_kick+27j
		mov	[esp+78h+var_78], edx
		mov	[ebp+var_50], edx
		call	silc_argument_get_arg_num
		cmp	eax, 2
		mov	edx, [ebp+var_50]
		ja	loc_62B9F8A0

loc_62B9F7B3:				; CODE XREF: silc_client_command_reply_kick+1A2j
		mov	[ebp+var_1C], 0
		mov	[ebp+var_20], 0
		mov	al, [ebx+5Ch]
		test	al, al
		jnz	loc_62B9F878
		mov	byte ptr [ebx+5Dh], 1Dh
		mov	byte ptr [ebx+5Ch], 1Dh
		xor	eax, eax
		xor	edx, edx

loc_62B9F7D8:				; CODE XREF: silc_client_command_reply_kick+18Fj
		mov	[esp+78h+var_70], edx
		mov	[esp+78h+var_74], eax
		mov	[esp+78h+var_78], ebx
		call	sub_62B9ED04
		mov	[esp+78h+var_74], offset silc_client_command_reply_processed
		mov	eax, [ebp+arg_0]
		mov	[esp+78h+var_78], eax
		call	silc_fsm_next
		xor	eax, eax
		add	esp, 6Ch
		pop	ebx
		pop	esi
		pop	edi
		leave
		retn
; ---------------------------------------------------------------------------
		align 4

loc_62B9F808:				; CODE XREF: silc_client_command_reply_kick+46j
		lea	ecx, [ebp+var_1C]
		mov	[esp+78h+var_6C], ecx
		lea	ecx, [ebp+var_20]
		mov	[esp+78h+var_70], ecx
		mov	[esp+78h+var_74], edx
		movzx	eax, al
		mov	[esp+78h+var_78], eax
		call	silc_status_get_args
		mov	edx, [ebp+var_1C]
		mov	eax, [ebp+var_20]
		jmp	loc_62B9F762
; ---------------------------------------------------------------------------

loc_62B9F830:				; CODE XREF: silc_client_command_reply_kick+2Dj
		mov	ecx, [ebx+4]
		mov	ecx, [ecx+4Ch]
		mov	ecx, [ecx+18h]
		mov	ecx, [ecx+48h]
		mov	edi, [ecx]
		movzx	eax, al
		mov	[esp+78h+var_78], eax
		mov	[ebp+var_50], edx
		call	silc_get_status_message
		mov	ecx, [ebx+4]
		mov	[esp+78h+var_68], eax
		mov	[esp+78h+var_6C], offset aCannotKickS ;	"Cannot	kick: %s"
		mov	[esp+78h+var_70], 3
		mov	[esp+78h+var_74], ecx
		mov	eax, [ecx+4Ch]
		mov	[esp+78h+var_78], eax
		call	edi
		mov	edx, [ebp+var_50]
		jmp	loc_62B9F73F
; ---------------------------------------------------------------------------
		align 4

loc_62B9F878:				; CODE XREF: silc_client_command_reply_kick+BAj
		lea	ecx, [ebp+var_20]
		mov	[esp+78h+var_6C], ecx
		lea	ecx, [ebp+var_1C]
		mov	[esp+78h+var_70], ecx
		mov	[esp+78h+var_74], edx
		movzx	eax, al
		mov	[esp+78h+var_78], eax
		call	silc_status_get_args
		mov	edx, [ebp+var_20]
		mov	eax, [ebp+var_1C]
		jmp	loc_62B9F7D8
; ---------------------------------------------------------------------------

loc_62B9F8A0:				; CODE XREF: silc_client_command_reply_kick+A1j
		mov	[esp+78h+var_78], edx
		call	silc_argument_get_arg_num
		cmp	eax, 3
		mov	edx, [ebp+var_50]
		ja	loc_62B9F7B3
		mov	[esp+78h+var_68], 0
		lea	eax, [ebp+var_40]
		mov	[esp+78h+var_6C], eax
		mov	[esp+78h+var_70], 0
		mov	[esp+78h+var_74], 2
		mov	[esp+78h+var_78], edx
		mov	[ebp+var_50], edx
		call	silc_argument_get_decoded
		test	al, al
		mov	edx, [ebp+var_50]
		jnz	short loc_62B9F947
		mov	[ebp+var_20], 0
		mov	[ebp+var_1C], 0
		mov	al, [ebx+5Ch]
		test	al, al
		jnz	loc_62B9F9DC
		mov	byte ptr [ebx+5Dh], 1Dh
		mov	byte ptr [ebx+5Ch], 1Dh
		xor	eax, eax
		xor	edx, edx

loc_62B9F90A:				; CODE XREF: silc_client_command_reply_kick+2F3j
		mov	[esp+78h+var_70], edx
		mov	[esp+78h+var_74], eax
		mov	[esp+78h+var_78], ebx
		call	sub_62B9ED04
		xor	esi, esi

loc_62B9F91C:				; CODE XREF: silc_client_command_reply_kick+2CBj
					; silc_client_command_reply_kick+37Bj
		mov	[esp+78h+var_70], esi
		mov	[esp+78h+var_74], edi
		mov	eax, [ebp+var_4C]
		mov	[esp+78h+var_78], eax
		call	silc_client_unref_channel
		mov	[esp+78h+var_74], offset silc_client_command_reply_processed
		mov	eax, [ebp+arg_0]
		mov	[esp+78h+var_78], eax
		call	silc_fsm_next
		jmp	loc_62B9F792
; ---------------------------------------------------------------------------

loc_62B9F947:				; CODE XREF: silc_client_command_reply_kick+1D7j
		lea	eax, [ebp+var_40]
		mov	[esp+78h+var_70], eax
		mov	[esp+78h+var_74], edi
		mov	eax, [ebp+var_4C]
		mov	[esp+78h+var_78], eax
		mov	[ebp+var_50], edx
		call	silc_client_get_channel_by_id
		mov	esi, eax
		test	eax, eax
		mov	edx, [ebp+var_50]
		jz	loc_62B9FA04
		mov	[esp+78h+var_68], 0
		lea	eax, [ebp+var_40]
		mov	[esp+78h+var_6C], eax
		mov	[esp+78h+var_70], 0
		mov	[esp+78h+var_74], 3
		mov	[esp+78h+var_78], edx
		mov	[ebp+var_50], edx
		call	silc_argument_get_decoded
		test	al, al
		mov	edx, [ebp+var_50]
		jnz	loc_62B9FA3E
		mov	[ebp+var_20], 0
		mov	[ebp+var_1C], 0
		mov	al, [ebx+5Ch]
		test	al, al
		jnz	loc_62B9FA8C

loc_62B9F9BB:				; CODE XREF: silc_client_command_reply_kick+30Bj
		mov	byte ptr [ebx+5Dh], 1Dh
		mov	byte ptr [ebx+5Ch], 1Dh
		xor	edx, edx
		xor	eax, eax

loc_62B9F9C7:				; CODE XREF: silc_client_command_reply_kick+330j
					; silc_client_command_reply_kick+3A3j
		mov	[esp+78h+var_70], eax
		mov	[esp+78h+var_74], edx
		mov	[esp+78h+var_78], ebx
		call	sub_62B9ED04
		jmp	loc_62B9F91C
; ---------------------------------------------------------------------------

loc_62B9F9DC:				; CODE XREF: silc_client_command_reply_kick+1ECj
		lea	ecx, [ebp+var_1C]
		mov	[esp+78h+var_6C], ecx
		lea	ecx, [ebp+var_20]
		mov	[esp+78h+var_70], ecx
		mov	[esp+78h+var_74], edx
		movzx	eax, al
		mov	[esp+78h+var_78], eax
		call	silc_status_get_args
		mov	edx, [ebp+var_1C]
		mov	eax, [ebp+var_20]
		jmp	loc_62B9F90A
; ---------------------------------------------------------------------------

loc_62B9FA04:				; CODE XREF: silc_client_command_reply_kick+25Bj
					; silc_client_command_reply_kick+350j
		mov	[ebp+var_1C], 0
		mov	[ebp+var_20], 0
		mov	al, [ebx+5Ch]
		test	al, al
		jz	short loc_62B9F9BB
		lea	ecx, [ebp+var_20]
		mov	[esp+78h+var_6C], ecx
		lea	ecx, [ebp+var_1C]
		mov	[esp+78h+var_70], ecx
		mov	[esp+78h+var_74], edx
		movzx	eax, al
		mov	[esp+78h+var_78], eax
		call	silc_status_get_args
		mov	eax, [ebp+var_20]
		mov	edx, [ebp+var_1C]
		jmp	short loc_62B9F9C7
; ---------------------------------------------------------------------------

loc_62B9FA3E:				; CODE XREF: silc_client_command_reply_kick+290j
		lea	eax, [ebp+var_40]
		mov	[esp+78h+var_70], eax
		mov	[esp+78h+var_74], edi
		mov	eax, [ebp+var_4C]
		mov	[esp+78h+var_78], eax
		mov	[ebp+var_50], edx
		call	silc_client_get_client_by_id
		test	eax, eax
		mov	edx, [ebp+var_50]
		jz	short loc_62B9FA04
		mov	[esp+78h+var_70], eax
		mov	[esp+78h+var_74], esi
		mov	[esp+78h+var_78], ebx
		mov	[ebp+var_50], eax
		call	sub_62B9ED04
		mov	eax, [ebp+var_50]
		mov	[esp+78h+var_70], eax
		mov	[esp+78h+var_74], edi
		mov	eax, [ebp+var_4C]
		mov	[esp+78h+var_78], eax
		call	silc_client_unref_client
		jmp	loc_62B9F91C
; ---------------------------------------------------------------------------

loc_62B9FA8C:				; CODE XREF: silc_client_command_reply_kick+2A9j
		lea	ecx, [ebp+var_1C]
		mov	[esp+78h+var_6C], ecx
		lea	ecx, [ebp+var_20]
		mov	[esp+78h+var_70], ecx
		mov	[esp+78h+var_74], edx
		movzx	eax, al
		mov	[esp+78h+var_78], eax
		call	silc_status_get_args
		mov	eax, [ebp+var_1C]
		mov	edx, [ebp+var_20]
		jmp	loc_62B9F9C7
silc_client_command_reply_kick endp

; Exported entry  59. silc_client_command_reply_kill

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public silc_client_command_reply_kill
silc_client_command_reply_kill proc near ; DATA	XREF: silc_client_commands_unregister+5CEo
					; silc_client_commands_register+3EEo ...

var_78		= dword	ptr -78h
var_74		= dword	ptr -74h
var_70		= dword	ptr -70h
var_6C		= dword	ptr -6Ch
var_68		= dword	ptr -68h
var_50		= dword	ptr -50h
var_4C		= dword	ptr -4Ch
var_40		= byte ptr -40h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		sub	esp, 6Ch
		mov	ebx, [ebp+arg_4]
		mov	esi, [ebp+arg_8]
		mov	edi, [ebx+4]
		mov	eax, [edi+4Ch]
		mov	[ebp+var_4C], eax
		mov	[esp+78h+var_78], esi
		call	silc_command_get_args
		mov	edx, eax
		mov	al, [ebx+5Dh]
		test	al, al
		jz	short loc_62B9FB44
		test	byte ptr [ebx+64h], 2
		jnz	loc_62B9FBE8

loc_62B9FAE7:				; CODE XREF: silc_client_command_reply_kill+176j
		mov	[ebp+var_1C], 0
		mov	[ebp+var_20], 0
		mov	al, [ebx+5Ch]
		test	al, al
		jnz	loc_62B9FBC0
		mov	al, [ebx+5Dh]
		mov	[ebx+5Ch], al
		xor	eax, eax
		xor	edx, edx

loc_62B9FB0A:				; CODE XREF: silc_client_command_reply_kill+12Fj
		mov	[esp+78h+var_70], edx
		mov	[esp+78h+var_74], eax
		mov	[esp+78h+var_78], ebx
		call	sub_62B9ED04
		movzx	ecx, byte ptr [ebx+5Dh]
		mov	edx, esi
		mov	eax, ebx
		call	sub_62B9EB60
		mov	[esp+78h+var_74], offset silc_client_command_reply_processed
		mov	eax, [ebp+arg_0]
		mov	[esp+78h+var_78], eax
		call	silc_fsm_next

loc_62B9FB3A:				; CODE XREF: silc_client_command_reply_kill+21Dj
		xor	eax, eax
		add	esp, 6Ch
		pop	ebx
		pop	esi
		pop	edi
		leave
		retn
; ---------------------------------------------------------------------------

loc_62B9FB44:				; CODE XREF: silc_client_command_reply_kill+27j
		mov	[esp+78h+var_78], edx
		mov	[ebp+var_50], edx
		call	silc_argument_get_arg_num
		cmp	eax, 1
		mov	edx, [ebp+var_50]
		jbe	short loc_62B9FB6B
		mov	[esp+78h+var_78], edx
		call	silc_argument_get_arg_num
		cmp	eax, 2
		mov	edx, [ebp+var_50]
		jbe	loc_62B9FC58

loc_62B9FB6B:				; CODE XREF: silc_client_command_reply_kill+A1j
		mov	[ebp+var_20], 0
		mov	[ebp+var_1C], 0
		mov	al, [ebx+5Ch]
		test	al, al
		jnz	loc_62B9FC30
		mov	byte ptr [ebx+5Dh], 1Dh
		mov	byte ptr [ebx+5Ch], 1Dh
		xor	eax, eax
		xor	edx, edx

loc_62B9FB90:				; CODE XREF: silc_client_command_reply_kill+19Fj
		mov	[esp+78h+var_70], edx
		mov	[esp+78h+var_74], eax
		mov	[esp+78h+var_78], ebx
		call	sub_62B9ED04
		mov	[esp+78h+var_74], offset silc_client_command_reply_processed
		mov	eax, [ebp+arg_0]
		mov	[esp+78h+var_78], eax
		call	silc_fsm_next
		xor	eax, eax
		add	esp, 6Ch
		pop	ebx
		pop	esi
		pop	edi
		leave
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_62B9FBC0:				; CODE XREF: silc_client_command_reply_kill+46j
		lea	ecx, [ebp+var_20]
		mov	[esp+78h+var_6C], ecx
		lea	ecx, [ebp+var_1C]
		mov	[esp+78h+var_70], ecx
		mov	[esp+78h+var_74], edx
		movzx	eax, al
		mov	[esp+78h+var_78], eax
		call	silc_status_get_args
		mov	edx, [ebp+var_20]
		mov	eax, [ebp+var_1C]
		jmp	loc_62B9FB0A
; ---------------------------------------------------------------------------

loc_62B9FBE8:				; CODE XREF: silc_client_command_reply_kill+2Dj
		mov	ecx, [ebx+4]
		mov	ecx, [ecx+4Ch]
		mov	ecx, [ecx+18h]
		mov	ecx, [ecx+48h]
		mov	edi, [ecx]
		movzx	eax, al
		mov	[esp+78h+var_78], eax
		mov	[ebp+var_50], edx
		call	silc_get_status_message
		mov	ecx, [ebx+4]
		mov	[esp+78h+var_68], eax
		mov	[esp+78h+var_6C], offset aCannotKillS ;	"Cannot	kill: %s"
		mov	[esp+78h+var_70], 3
		mov	[esp+78h+var_74], ecx
		mov	eax, [ecx+4Ch]
		mov	[esp+78h+var_78], eax
		call	edi
		mov	edx, [ebp+var_50]
		jmp	loc_62B9FAE7
; ---------------------------------------------------------------------------
		align 10h

loc_62B9FC30:				; CODE XREF: silc_client_command_reply_kill+CAj
		lea	ecx, [ebp+var_1C]
		mov	[esp+78h+var_6C], ecx
		lea	ecx, [ebp+var_20]
		mov	[esp+78h+var_70], ecx
		mov	[esp+78h+var_74], edx
		movzx	eax, al
		mov	[esp+78h+var_78], eax
		call	silc_status_get_args
		mov	edx, [ebp+var_1C]
		mov	eax, [ebp+var_20]
		jmp	loc_62B9FB90
; ---------------------------------------------------------------------------

loc_62B9FC58:				; CODE XREF: silc_client_command_reply_kill+B1j
		mov	[esp+78h+var_68], 0
		lea	esi, [ebp+var_40]
		mov	[esp+78h+var_6C], esi
		mov	[esp+78h+var_70], 0
		mov	[esp+78h+var_74], 2
		mov	[esp+78h+var_78], edx
		mov	[ebp+var_50], edx
		call	silc_argument_get_decoded
		test	al, al
		mov	edx, [ebp+var_50]
		jnz	short loc_62B9FCD8
		mov	[ebp+var_1C], 0
		mov	[ebp+var_20], 0
		mov	al, [ebx+5Ch]
		test	al, al
		jnz	loc_62B9FD42
		mov	byte ptr [ebx+5Dh], 1Dh
		mov	byte ptr [ebx+5Ch], 1Dh
		xor	eax, eax
		xor	edx, edx

loc_62B9FCAE:				; CODE XREF: silc_client_command_reply_kill+2B1j
		mov	[esp+78h+var_70], edx
		mov	[esp+78h+var_74], eax
		mov	[esp+78h+var_78], ebx
		call	sub_62B9ED04

loc_62B9FCBE:				; CODE XREF: silc_client_command_reply_kill+247j
					; silc_client_command_reply_kill+289j
		mov	[esp+78h+var_74], offset silc_client_command_reply_processed
		mov	eax, [ebp+arg_0]
		mov	[esp+78h+var_78], eax
		call	silc_fsm_next
		jmp	loc_62B9FB3A
; ---------------------------------------------------------------------------
		align 4

loc_62B9FCD8:				; CODE XREF: silc_client_command_reply_kill+1D3j
		mov	[esp+78h+var_70], esi
		mov	[esp+78h+var_74], edi
		mov	eax, [ebp+var_4C]
		mov	[esp+78h+var_78], eax
		call	silc_client_get_client_by_id
		mov	esi, eax
		mov	[esp+78h+var_74], eax
		mov	[esp+78h+var_78], ebx
		call	sub_62B9ED04
		test	esi, esi
		jz	short loc_62B9FCBE
		mov	[esp+78h+var_70], esi
		mov	[esp+78h+var_74], edi
		mov	eax, [ebp+var_4C]
		mov	[esp+78h+var_78], eax
		call	silc_client_remove_from_channels
		and	byte ptr [esi+402h], 0FEh
		mov	[esp+78h+var_70], esi
		mov	[esp+78h+var_74], edi
		mov	eax, [ebp+var_4C]
		mov	[esp+78h+var_78], eax
		call	silc_client_del_client
		mov	[esp+78h+var_70], esi
		mov	[esp+78h+var_74], edi
		mov	eax, [ebp+var_4C]
		mov	[esp+78h+var_78], eax
		call	silc_client_unref_client
		jmp	loc_62B9FCBE
; ---------------------------------------------------------------------------

loc_62B9FD42:				; CODE XREF: silc_client_command_reply_kill+1E8j
		lea	ecx, [ebp+var_20]
		mov	[esp+78h+var_6C], ecx
		lea	ecx, [ebp+var_1C]
		mov	[esp+78h+var_70], ecx
		mov	[esp+78h+var_74], edx
		movzx	eax, al
		mov	[esp+78h+var_78], eax
		call	silc_status_get_args
		mov	edx, [ebp+var_20]
		mov	eax, [ebp+var_1C]
		jmp	loc_62B9FCAE
silc_client_command_reply_kill endp

; ---------------------------------------------------------------------------
		align 4
; Exported entry  79. silc_client_command_reply_whowas

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public silc_client_command_reply_whowas
silc_client_command_reply_whowas proc near ; DATA XREF:	silc_client_commands_unregister+FEo
					; silc_client_commands_register+E4o ...

var_78		= dword	ptr -78h
var_74		= dword	ptr -74h
var_70		= dword	ptr -70h
var_6C		= dword	ptr -6Ch
var_68		= dword	ptr -68h
var_58		= dword	ptr -58h
var_54		= dword	ptr -54h
var_50		= dword	ptr -50h
var_4C		= dword	ptr -4Ch
var_40		= byte ptr -40h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		sub	esp, 6Ch
		mov	ebx, [ebp+arg_4]
		mov	esi, [ebp+arg_8]
		mov	edi, [ebx+4]
		mov	eax, [edi+4Ch]
		mov	[ebp+var_4C], eax
		mov	[esp+78h+var_78], esi
		call	silc_command_get_args
		mov	edx, eax
		mov	al, [ebx+5Dh]
		test	al, al
		jz	short loc_62B9FDFC
		test	byte ptr [ebx+64h], 2
		jnz	loc_62B9FE90

loc_62B9FD9F:				; CODE XREF: silc_client_command_reply_whowas+166j
		mov	[ebp+var_20], 0
		mov	[ebp+var_1C], 0
		mov	al, [ebx+5Ch]
		test	al, al
		jnz	loc_62B9FE68
		mov	al, [ebx+5Dh]
		mov	[ebx+5Ch], al
		xor	eax, eax
		xor	edx, edx

loc_62B9FDC2:				; CODE XREF: silc_client_command_reply_whowas+11Fj
		mov	[esp+78h+var_70], edx
		mov	[esp+78h+var_74], eax
		mov	[esp+78h+var_78], ebx
		call	sub_62B9ED04
		movzx	ecx, byte ptr [ebx+5Dh]
		mov	edx, esi
		mov	eax, ebx
		call	sub_62B9EB60
		mov	[esp+78h+var_74], offset silc_client_command_reply_processed
		mov	eax, [ebp+arg_0]
		mov	[esp+78h+var_78], eax
		call	silc_fsm_next

loc_62B9FDF2:				; CODE XREF: silc_client_command_reply_whowas+236j
		xor	eax, eax
		add	esp, 6Ch
		pop	ebx
		pop	esi
		pop	edi
		leave
		retn
; ---------------------------------------------------------------------------

loc_62B9FDFC:				; CODE XREF: silc_client_command_reply_whowas+27j
		mov	[esp+78h+var_78], edx
		mov	[ebp+var_54], edx
		call	silc_argument_get_arg_num
		cmp	eax, 3
		mov	edx, [ebp+var_54]
		ja	loc_62B9FF00

loc_62B9FE13:				; CODE XREF: silc_client_command_reply_whowas+1A2j
		mov	[ebp+var_1C], 0
		mov	[ebp+var_20], 0
		mov	al, [ebx+5Ch]
		test	al, al
		jnz	loc_62B9FED8
		mov	byte ptr [ebx+5Dh], 1Dh
		mov	byte ptr [ebx+5Ch], 1Dh
		xor	eax, eax
		xor	edx, edx

loc_62B9FE38:				; CODE XREF: silc_client_command_reply_whowas+18Fj
		mov	[esp+78h+var_70], edx
		mov	[esp+78h+var_74], eax
		mov	[esp+78h+var_78], ebx
		call	sub_62B9ED04
		mov	[esp+78h+var_74], offset silc_client_command_reply_processed
		mov	eax, [ebp+arg_0]
		mov	[esp+78h+var_78], eax
		call	silc_fsm_next
		xor	eax, eax
		add	esp, 6Ch
		pop	ebx
		pop	esi
		pop	edi
		leave
		retn
; ---------------------------------------------------------------------------
		align 4

loc_62B9FE68:				; CODE XREF: silc_client_command_reply_whowas+46j
		lea	ecx, [ebp+var_1C]
		mov	[esp+78h+var_6C], ecx
		lea	ecx, [ebp+var_20]
		mov	[esp+78h+var_70], ecx
		mov	[esp+78h+var_74], edx
		movzx	eax, al
		mov	[esp+78h+var_78], eax
		call	silc_status_get_args
		mov	edx, [ebp+var_1C]
		mov	eax, [ebp+var_20]
		jmp	loc_62B9FDC2
; ---------------------------------------------------------------------------

loc_62B9FE90:				; CODE XREF: silc_client_command_reply_whowas+2Dj
		mov	ecx, [ebx+4]
		mov	ecx, [ecx+4Ch]
		mov	ecx, [ecx+18h]
		mov	ecx, [ecx+48h]
		mov	edi, [ecx]
		movzx	eax, al
		mov	[esp+78h+var_78], eax
		mov	[ebp+var_54], edx
		call	silc_get_status_message
		mov	ecx, [ebx+4]
		mov	[esp+78h+var_68], eax
		mov	[esp+78h+var_6C], offset aWhowasS ; "WHOWAS: %s"
		mov	[esp+78h+var_70], 3
		mov	[esp+78h+var_74], ecx
		mov	eax, [ecx+4Ch]
		mov	[esp+78h+var_78], eax
		call	edi
		mov	edx, [ebp+var_54]
		jmp	loc_62B9FD9F
; ---------------------------------------------------------------------------
		align 4

loc_62B9FED8:				; CODE XREF: silc_client_command_reply_whowas+BAj
		lea	ecx, [ebp+var_20]
		mov	[esp+78h+var_6C], ecx
		lea	ecx, [ebp+var_1C]
		mov	[esp+78h+var_70], ecx
		mov	[esp+78h+var_74], edx
		movzx	eax, al
		mov	[esp+78h+var_78], eax
		call	silc_status_get_args
		mov	edx, [ebp+var_20]
		mov	eax, [ebp+var_1C]
		jmp	loc_62B9FE38
; ---------------------------------------------------------------------------

loc_62B9FF00:				; CODE XREF: silc_client_command_reply_whowas+A1j
		mov	[esp+78h+var_78], edx
		call	silc_argument_get_arg_num
		cmp	eax, 5
		mov	edx, [ebp+var_54]
		ja	loc_62B9FE13
		mov	[esp+78h+var_68], 0
		lea	esi, [ebp+var_40]
		mov	[esp+78h+var_6C], esi
		mov	[esp+78h+var_70], 0
		mov	[esp+78h+var_74], 2
		mov	[esp+78h+var_78], edx
		mov	[ebp+var_54], edx
		call	silc_argument_get_decoded
		test	al, al
		mov	edx, [ebp+var_54]
		jnz	short loc_62B9FFA7
		mov	[ebp+var_20], 0
		mov	[ebp+var_1C], 0
		mov	al, [ebx+5Ch]
		test	al, al
		jnz	loc_62BA0046
		mov	byte ptr [ebx+5Dh], 1Dh
		mov	byte ptr [ebx+5Ch], 1Dh
		xor	eax, eax
		xor	edx, edx

loc_62B9FF6A:				; CODE XREF: silc_client_command_reply_whowas+2FDj
		mov	[esp+78h+var_70], edx
		mov	[esp+78h+var_74], eax
		mov	[esp+78h+var_78], ebx
		call	sub_62B9ED04
		xor	esi, esi

loc_62B9FF7C:				; CODE XREF: silc_client_command_reply_whowas+2D5j
					; silc_client_command_reply_whowas+333j
		mov	[esp+78h+var_70], esi
		mov	[esp+78h+var_74], edi
		mov	eax, [ebp+var_4C]
		mov	[esp+78h+var_78], eax
		call	silc_client_unref_client
		mov	[esp+78h+var_74], offset silc_client_command_reply_processed
		mov	eax, [ebp+arg_0]
		mov	[esp+78h+var_78], eax
		call	silc_fsm_next
		jmp	loc_62B9FDF2
; ---------------------------------------------------------------------------

loc_62B9FFA7:				; CODE XREF: silc_client_command_reply_whowas+1D7j
		mov	[esp+78h+var_70], esi
		mov	[esp+78h+var_74], edi
		mov	eax, [ebp+var_4C]
		mov	[esp+78h+var_78], eax
		mov	[ebp+var_54], edx
		call	silc_client_get_client_by_id
		mov	esi, eax
		mov	[esp+78h+var_70], 0
		mov	[esp+78h+var_74], 3
		mov	edx, [ebp+var_54]
		mov	[esp+78h+var_78], edx
		call	silc_argument_get_arg_type
		mov	[esp+78h+var_70], 0
		mov	[esp+78h+var_74], 4
		mov	edx, [ebp+var_54]
		mov	[esp+78h+var_78], edx
		mov	[ebp+var_58], eax
		call	silc_argument_get_arg_type
		mov	[ebp+var_50], eax
		mov	[esp+78h+var_70], 0
		mov	[esp+78h+var_74], 5
		mov	edx, [ebp+var_54]
		mov	[esp+78h+var_78], edx
		call	silc_argument_get_arg_type
		mov	ecx, [ebp+var_58]
		test	ecx, ecx
		mov	edx, [ebp+var_54]
		jz	short loc_62BA006E
		cmp	[ebp+var_50], 0
		jz	short loc_62BA006E
		mov	[esp+78h+var_68], eax
		mov	eax, [ebp+var_50]
		mov	[esp+78h+var_6C], eax
		mov	[esp+78h+var_70], ecx
		mov	[esp+78h+var_74], esi
		mov	[esp+78h+var_78], ebx
		call	sub_62B9ED04
		jmp	loc_62B9FF7C
; ---------------------------------------------------------------------------

loc_62BA0046:				; CODE XREF: silc_client_command_reply_whowas+1ECj
		lea	ecx, [ebp+var_1C]
		mov	[esp+78h+var_6C], ecx
		lea	ecx, [ebp+var_20]
		mov	[esp+78h+var_70], ecx
		mov	[esp+78h+var_74], edx
		movzx	eax, al
		mov	[esp+78h+var_78], eax
		call	silc_status_get_args
		mov	edx, [ebp+var_1C]
		mov	eax, [ebp+var_20]
		jmp	loc_62B9FF6A
; ---------------------------------------------------------------------------

loc_62BA006E:				; CODE XREF: silc_client_command_reply_whowas+2B2j
					; silc_client_command_reply_whowas+2B8j
		mov	[ebp+var_1C], 0
		mov	[ebp+var_20], 0
		mov	al, [ebx+5Ch]
		test	al, al
		jnz	short loc_62BA00A4
		mov	byte ptr [ebx+5Dh], 1Dh
		mov	byte ptr [ebx+5Ch], 1Dh
		xor	edx, edx
		xor	eax, eax

loc_62BA008F:				; CODE XREF: silc_client_command_reply_whowas+35Bj
		mov	[esp+78h+var_70], eax
		mov	[esp+78h+var_74], edx
		mov	[esp+78h+var_78], ebx
		call	sub_62B9ED04
		jmp	loc_62B9FF7C
; ---------------------------------------------------------------------------

loc_62BA00A4:				; CODE XREF: silc_client_command_reply_whowas+315j
		lea	ecx, [ebp+var_20]
		mov	[esp+78h+var_6C], ecx
		lea	ecx, [ebp+var_1C]
		mov	[esp+78h+var_70], ecx
		mov	[esp+78h+var_74], edx
		movzx	eax, al
		mov	[esp+78h+var_78], eax
		call	silc_status_get_args
		mov	eax, [ebp+var_20]
		mov	edx, [ebp+var_1C]
		jmp	short loc_62BA008F
silc_client_command_reply_whowas endp

; ---------------------------------------------------------------------------
		align 4
; Exported entry  74. silc_client_command_reply_umode

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public silc_client_command_reply_umode
silc_client_command_reply_umode	proc near ; DATA XREF: silc_client_commands_unregister+A9Eo
					; silc_client_commands_register+74Bo ...

var_58		= dword	ptr -58h
var_54		= dword	ptr -54h
var_50		= dword	ptr -50h
var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_2C		= dword	ptr -2Ch
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		sub	esp, 4Ch
		mov	ebx, [ebp+arg_4]
		mov	esi, [ebp+arg_8]
		mov	eax, [ebx+4]
		mov	[ebp+var_2C], eax
		mov	[esp+58h+var_58], esi
		call	silc_command_get_args
		mov	edi, eax
		mov	al, [ebx+5Dh]
		test	al, al
		jz	short loc_62BA015C
		test	byte ptr [ebx+64h], 2
		jnz	loc_62BA01F4

loc_62BA00FC:				; CODE XREF: silc_client_command_reply_umode+168j
		mov	[ebp+var_20], 0
		mov	[ebp+var_24], 0
		mov	al, [ebx+5Ch]
		test	al, al
		jnz	loc_62BA01CC
		mov	al, [ebx+5Dh]
		mov	[ebx+5Ch], al
		xor	eax, eax
		xor	edx, edx

loc_62BA011F:				; CODE XREF: silc_client_command_reply_umode+123j
		mov	[esp+58h+var_50], edx
		mov	[esp+58h+var_54], eax
		mov	[esp+58h+var_58], ebx
		call	sub_62B9ED04
		movzx	ecx, byte ptr [ebx+5Dh]
		mov	edx, esi
		mov	eax, ebx
		call	sub_62B9EB60
		mov	[esp+58h+var_54], offset silc_client_command_reply_processed
		mov	edx, [ebp+arg_0]
		mov	[esp+58h+var_58], edx
		call	silc_fsm_next

loc_62BA014F:				; CODE XREF: silc_client_command_reply_umode+1FDj
		xor	eax, eax
		add	esp, 4Ch
		pop	ebx
		pop	esi
		pop	edi
		leave
		retn
; ---------------------------------------------------------------------------
		align 4

loc_62BA015C:				; CODE XREF: silc_client_command_reply_umode+24j
		mov	[esp+58h+var_58], edi
		call	silc_argument_get_arg_num
		cmp	eax, 1
		jbe	short loc_62BA017A
		mov	[esp+58h+var_58], edi
		call	silc_argument_get_arg_num
		cmp	eax, 2
		jbe	loc_62BA0264

loc_62BA017A:				; CODE XREF: silc_client_command_reply_umode+9Bj
		mov	[ebp+var_24], 0
		mov	[ebp+var_20], 0
		mov	al, [ebx+5Ch]
		test	al, al
		jnz	loc_62BA023C
		mov	byte ptr [ebx+5Dh], 1Dh
		mov	byte ptr [ebx+5Ch], 1Dh
		xor	eax, eax
		xor	edx, edx

loc_62BA019F:				; CODE XREF: silc_client_command_reply_umode+193j
		mov	[esp+58h+var_50], edx
		mov	[esp+58h+var_54], eax
		mov	[esp+58h+var_58], ebx
		call	sub_62B9ED04
		mov	[esp+58h+var_54], offset silc_client_command_reply_processed
		mov	eax, [ebp+arg_0]
		mov	[esp+58h+var_58], eax
		call	silc_fsm_next
		xor	eax, eax
		add	esp, 4Ch
		pop	ebx
		pop	esi
		pop	edi
		leave
		retn
; ---------------------------------------------------------------------------

loc_62BA01CC:				; CODE XREF: silc_client_command_reply_umode+43j
		lea	edx, [ebp+var_24]
		mov	[esp+58h+var_4C], edx
		lea	edx, [ebp+var_20]
		mov	[esp+58h+var_50], edx
		mov	[esp+58h+var_54], edi
		movzx	eax, al
		mov	[esp+58h+var_58], eax
		call	silc_status_get_args
		mov	edx, [ebp+var_24]
		mov	eax, [ebp+var_20]
		jmp	loc_62BA011F
; ---------------------------------------------------------------------------

loc_62BA01F4:				; CODE XREF: silc_client_command_reply_umode+2Aj
		mov	edx, [ebx+4]
		mov	edx, [edx+4Ch]
		mov	edx, [edx+18h]
		mov	edx, [edx+48h]
		mov	edx, [edx]
		mov	[ebp+var_2C], edx
		movzx	eax, al
		mov	[esp+58h+var_58], eax
		call	silc_get_status_message
		mov	edx, [ebx+4]
		mov	[esp+58h+var_48], eax
		mov	[esp+58h+var_4C], offset aCannotChangeMo ; "Cannot change mode:	%s"
		mov	[esp+58h+var_50], 3
		mov	[esp+58h+var_54], edx
		mov	eax, [edx+4Ch]
		mov	[esp+58h+var_58], eax
		call	[ebp+var_2C]
		jmp	loc_62BA00FC
; ---------------------------------------------------------------------------
		align 4

loc_62BA023C:				; CODE XREF: silc_client_command_reply_umode+C1j
		lea	edx, [ebp+var_20]
		mov	[esp+58h+var_4C], edx
		lea	edx, [ebp+var_24]
		mov	[esp+58h+var_50], edx
		mov	[esp+58h+var_54], edi
		movzx	eax, al
		mov	[esp+58h+var_58], eax
		call	silc_status_get_args
		mov	edx, [ebp+var_20]
		mov	eax, [ebp+var_24]
		jmp	loc_62BA019F
; ---------------------------------------------------------------------------

loc_62BA0264:				; CODE XREF: silc_client_command_reply_umode+A8j
		lea	eax, [ebp+var_1C]
		mov	[esp+58h+var_50], eax
		mov	[esp+58h+var_54], 2
		mov	[esp+58h+var_58], edi
		call	silc_argument_get_arg_type
		test	eax, eax
		jz	short loc_62BA0285
		cmp	[ebp+var_1C], 4
		jz	short loc_62BA02F5

loc_62BA0285:				; CODE XREF: silc_client_command_reply_umode+1B1j
		mov	[ebp+var_20], 0
		mov	[ebp+var_24], 0
		mov	al, [ebx+5Ch]
		test	al, al
		jnz	short loc_62BA02D0
		mov	byte ptr [ebx+5Dh], 1Dh
		mov	byte ptr [ebx+5Ch], 1Dh
		xor	eax, eax
		xor	edx, edx

loc_62BA02A6:				; CODE XREF: silc_client_command_reply_umode+227j
		mov	[esp+58h+var_50], edx
		mov	[esp+58h+var_54], eax
		mov	[esp+58h+var_58], ebx
		call	sub_62B9ED04

loc_62BA02B6:				; CODE XREF: silc_client_command_reply_umode+27Fj
		mov	[esp+58h+var_54], offset silc_client_command_reply_processed
		mov	eax, [ebp+arg_0]
		mov	[esp+58h+var_58], eax
		call	silc_fsm_next
		jmp	loc_62BA014F
; ---------------------------------------------------------------------------
		align 10h

loc_62BA02D0:				; CODE XREF: silc_client_command_reply_umode+1CCj
		lea	edx, [ebp+var_24]
		mov	[esp+58h+var_4C], edx
		lea	edx, [ebp+var_20]
		mov	[esp+58h+var_50], edx
		mov	[esp+58h+var_54], edi
		movzx	eax, al
		mov	[esp+58h+var_58], eax
		call	silc_status_get_args
		mov	edx, [ebp+var_24]
		mov	eax, [ebp+var_20]
		jmp	short loc_62BA02A6
; ---------------------------------------------------------------------------

loc_62BA02F5:				; CODE XREF: silc_client_command_reply_umode+1B7j
		movzx	esi, byte ptr [eax+3]
		movzx	edx, byte ptr [eax]
		shl	edx, 18h
		or	esi, edx
		movzx	edx, byte ptr [eax+1]
		shl	edx, 10h
		or	esi, edx
		movzx	eax, byte ptr [eax+2]
		shl	eax, 8
		or	esi, eax
		mov	edx, [ebp+var_2C]
		mov	eax, [edx]
		mov	eax, [eax+3D8h]
		mov	[esp+58h+var_58], eax
		call	silc_rwlock_wrlock
		mov	edx, [ebp+var_2C]
		mov	eax, [edx]
		mov	[eax+3ACh], esi
		mov	eax, [eax+3D8h]
		mov	[esp+58h+var_58], eax
		call	silc_rwlock_unlock
		mov	[esp+58h+var_54], esi
		mov	[esp+58h+var_58], ebx
		call	sub_62B9ED04
		jmp	loc_62BA02B6
silc_client_command_reply_umode	endp

; Exported entry  53. silc_client_command_reply_getkey

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public silc_client_command_reply_getkey
silc_client_command_reply_getkey proc near
					; DATA XREF: silc_client_commands_unregister+117Eo
					; silc_client_commands_register+B03o ...

var_78		= dword	ptr -78h
var_74		= dword	ptr -74h
var_70		= dword	ptr -70h
var_6C		= dword	ptr -6Ch
var_68		= dword	ptr -68h
var_50		= dword	ptr -50h
var_4C		= dword	ptr -4Ch
var_48		= byte ptr -48h
var_2A		= word ptr -2Ah
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		sub	esp, 6Ch
		mov	ebx, [ebp+arg_4]
		mov	esi, [ebp+arg_8]
		mov	edi, [ebx+4]
		mov	eax, [edi+4Ch]
		mov	[ebp+var_4C], eax
		mov	[esp+78h+var_78], esi
		call	silc_command_get_args
		mov	edx, eax
		mov	al, [ebx+5Dh]
		test	al, al
		jz	short loc_62BA03E0
		test	byte ptr [ebx+64h], 2
		jnz	loc_62BA0484

loc_62BA0383:				; CODE XREF: silc_client_command_reply_getkey+176j
		mov	[ebp+var_24], 0
		mov	[ebp+var_28], 0
		mov	al, [ebx+5Ch]
		test	al, al
		jnz	loc_62BA045C
		mov	al, [ebx+5Dh]
		mov	[ebx+5Ch], al
		xor	eax, eax
		xor	edx, edx

loc_62BA03A6:				; CODE XREF: silc_client_command_reply_getkey+12Fj
		mov	[esp+78h+var_70], edx
		mov	[esp+78h+var_74], eax
		mov	[esp+78h+var_78], ebx
		call	sub_62B9ED04
		movzx	ecx, byte ptr [ebx+5Dh]
		mov	edx, esi
		mov	eax, ebx
		call	sub_62B9EB60
		mov	[esp+78h+var_74], offset silc_client_command_reply_processed
		mov	ecx, [ebp+arg_0]
		mov	[esp+78h+var_78], ecx
		call	silc_fsm_next

loc_62BA03D6:				; CODE XREF: silc_client_command_reply_getkey+22Cj
		xor	eax, eax
		add	esp, 6Ch
		pop	ebx
		pop	esi
		pop	edi
		leave
		retn
; ---------------------------------------------------------------------------

loc_62BA03E0:				; CODE XREF: silc_client_command_reply_getkey+27j
		mov	[esp+78h+var_78], edx
		mov	[ebp+var_50], edx
		call	silc_argument_get_arg_num
		cmp	eax, 1
		mov	edx, [ebp+var_50]
		jbe	short loc_62BA0407
		mov	[esp+78h+var_78], edx
		call	silc_argument_get_arg_num
		cmp	eax, 3
		mov	edx, [ebp+var_50]
		jbe	loc_62BA04F4

loc_62BA0407:				; CODE XREF: silc_client_command_reply_getkey+A1j
		mov	[ebp+var_28], 0
		mov	[ebp+var_24], 0
		mov	al, [ebx+5Ch]
		test	al, al
		jnz	loc_62BA04CC
		mov	byte ptr [ebx+5Dh], 1Dh
		mov	byte ptr [ebx+5Ch], 1Dh
		xor	eax, eax
		xor	edx, edx

loc_62BA042C:				; CODE XREF: silc_client_command_reply_getkey+19Fj
		mov	[esp+78h+var_70], edx
		mov	[esp+78h+var_74], eax
		mov	[esp+78h+var_78], ebx
		call	sub_62B9ED04
		mov	[esp+78h+var_74], offset silc_client_command_reply_processed
		mov	eax, [ebp+arg_0]
		mov	[esp+78h+var_78], eax
		call	silc_fsm_next
		xor	eax, eax
		add	esp, 6Ch
		pop	ebx
		pop	esi
		pop	edi
		leave
		retn
; ---------------------------------------------------------------------------
		align 4

loc_62BA045C:				; CODE XREF: silc_client_command_reply_getkey+46j
		lea	ecx, [ebp+var_28]
		mov	[esp+78h+var_6C], ecx
		lea	ecx, [ebp+var_24]
		mov	[esp+78h+var_70], ecx
		mov	[esp+78h+var_74], edx
		movzx	eax, al
		mov	[esp+78h+var_78], eax
		call	silc_status_get_args
		mov	edx, [ebp+var_28]
		mov	eax, [ebp+var_24]
		jmp	loc_62BA03A6
; ---------------------------------------------------------------------------

loc_62BA0484:				; CODE XREF: silc_client_command_reply_getkey+2Dj
		mov	ecx, [ebx+4]
		mov	ecx, [ecx+4Ch]
		mov	ecx, [ecx+18h]
		mov	ecx, [ecx+48h]
		mov	edi, [ecx]
		movzx	eax, al
		mov	[esp+78h+var_78], eax
		mov	[ebp+var_50], edx
		call	silc_get_status_message
		mov	ecx, [ebx+4]
		mov	[esp+78h+var_68], eax
		mov	[esp+78h+var_6C], offset aCannotGetKeyS	; "Cannot get key: %s"
		mov	[esp+78h+var_70], 3
		mov	[esp+78h+var_74], ecx
		mov	eax, [ecx+4Ch]
		mov	[esp+78h+var_78], eax
		call	edi
		mov	edx, [ebp+var_50]
		jmp	loc_62BA0383
; ---------------------------------------------------------------------------
		align 4

loc_62BA04CC:				; CODE XREF: silc_client_command_reply_getkey+CAj
		lea	ecx, [ebp+var_24]
		mov	[esp+78h+var_6C], ecx
		lea	ecx, [ebp+var_28]
		mov	[esp+78h+var_70], ecx
		mov	[esp+78h+var_74], edx
		movzx	eax, al
		mov	[esp+78h+var_78], eax
		call	silc_status_get_args
		mov	edx, [ebp+var_24]
		mov	eax, [ebp+var_28]
		jmp	loc_62BA042C
; ---------------------------------------------------------------------------

loc_62BA04F4:				; CODE XREF: silc_client_command_reply_getkey+B1j
		mov	[esp+78h+var_68], 0
		lea	esi, [ebp+var_48]
		mov	[esp+78h+var_6C], esi
		mov	[esp+78h+var_70], 0
		mov	[esp+78h+var_74], 2
		mov	[esp+78h+var_78], edx
		mov	[ebp+var_50], edx
		call	silc_argument_get_decoded
		test	al, al
		mov	edx, [ebp+var_50]
		jnz	short loc_62BA0584
		mov	[ebp+var_24], 0
		mov	[ebp+var_28], 0
		mov	al, [ebx+5Ch]
		test	al, al
		jnz	loc_62BA065C
		mov	byte ptr [ebx+5Dh], 1Dh
		mov	byte ptr [ebx+5Ch], 1Dh
		xor	eax, eax
		xor	edx, edx

loc_62BA054A:				; CODE XREF: silc_client_command_reply_getkey+32Fj
		mov	[esp+78h+var_70], edx
		mov	[esp+78h+var_74], eax
		mov	[esp+78h+var_78], ebx
		call	sub_62B9ED04

loc_62BA055A:				; CODE XREF: silc_client_command_reply_getkey+28Dj
					; silc_client_command_reply_getkey+304j ...
		mov	eax, [ebp+var_20]
		test	eax, eax
		jz	short loc_62BA0569
		mov	[esp+78h+var_78], eax
		call	silc_pkcs_public_key_free

loc_62BA0569:				; CODE XREF: silc_client_command_reply_getkey+20Fj
		mov	[esp+78h+var_74], offset silc_client_command_reply_processed
		mov	eax, [ebp+arg_0]
		mov	[esp+78h+var_78], eax
		call	silc_fsm_next
		jmp	loc_62BA03D6
; ---------------------------------------------------------------------------
		align 4

loc_62BA0584:				; CODE XREF: silc_client_command_reply_getkey+1D3j
		lea	eax, [ebp+var_1C]
		mov	[esp+78h+var_70], eax
		mov	[esp+78h+var_74], 3
		mov	[esp+78h+var_78], edx
		mov	[ebp+var_50], edx
		call	silc_argument_get_arg_type
		test	eax, eax
		mov	edx, [ebp+var_50]
		jz	loc_62BA0684
		lea	ecx, [ebp+var_20]
		mov	[esp+78h+var_70], ecx
		mov	ecx, [ebp+var_1C]
		mov	[esp+78h+var_74], ecx
		mov	[esp+78h+var_78], eax
		mov	[ebp+var_50], edx
		call	silc_public_key_payload_decode
		test	al, al
		mov	edx, [ebp+var_50]
		jz	loc_62BA06C0
		mov	ax, [ebp+var_2A]
		cmp	ax, 2
		jz	loc_62BA0749
		dec	ax
		jnz	loc_62BA055A
		mov	[esp+78h+var_70], esi
		mov	[esp+78h+var_74], edi
		mov	eax, [ebp+var_4C]
		mov	[esp+78h+var_78], eax
		mov	[ebp+var_50], edx
		call	silc_client_get_server_by_id
		mov	esi, eax
		test	eax, eax
		mov	edx, [ebp+var_50]
		jz	loc_62BA07CB
		mov	eax, [eax+28h]
		mov	[esp+78h+var_78], eax
		call	silc_rwlock_wrlock
		cmp	dword ptr [esi+20h], 0
		jz	loc_62BA0806

loc_62BA061B:				; CODE XREF: silc_client_command_reply_getkey+4C3j
		mov	eax, [esi+28h]
		mov	[esp+78h+var_78], eax
		call	silc_rwlock_unlock
		mov	eax, [esi+20h]
		mov	[esp+78h+var_6C], eax
		mov	[esp+78h+var_70], esi
		mov	[esp+78h+var_74], 1
		mov	[esp+78h+var_78], ebx
		call	sub_62B9ED04
		mov	[esp+78h+var_70], esi
		mov	[esp+78h+var_74], edi
		mov	ecx, [ebp+var_4C]
		mov	[esp+78h+var_78], ecx
		call	silc_client_unref_server
		jmp	loc_62BA055A
; ---------------------------------------------------------------------------
		align 4

loc_62BA065C:				; CODE XREF: silc_client_command_reply_getkey+1E8j
		lea	ecx, [ebp+var_28]
		mov	[esp+78h+var_6C], ecx
		lea	ecx, [ebp+var_24]
		mov	[esp+78h+var_70], ecx
		mov	[esp+78h+var_74], edx
		movzx	eax, al
		mov	[esp+78h+var_78], eax
		call	silc_status_get_args
		mov	edx, [ebp+var_28]
		mov	eax, [ebp+var_24]
		jmp	loc_62BA054A
; ---------------------------------------------------------------------------

loc_62BA0684:				; CODE XREF: silc_client_command_reply_getkey+253j
					; silc_client_command_reply_getkey+416j
		mov	[ebp+var_28], 0
		mov	[ebp+var_24], 0
		mov	al, [ebx+5Ch]
		test	al, al
		jnz	loc_62BA0727
		mov	byte ptr [ebx+5Dh], 1Dh
		mov	byte ptr [ebx+5Ch], 1Dh

loc_62BA06A5:				; CODE XREF: silc_client_command_reply_getkey+3F4j
		mov	eax, [ebp+var_24]
		mov	[esp+78h+var_70], eax
		mov	eax, [ebp+var_28]
		mov	[esp+78h+var_74], eax
		mov	[esp+78h+var_78], ebx
		call	sub_62B9ED04
		jmp	loc_62BA055A
; ---------------------------------------------------------------------------

loc_62BA06C0:				; CODE XREF: silc_client_command_reply_getkey+277j
		mov	eax, [ebx+4]
		mov	eax, [eax+4Ch]
		mov	eax, [eax+18h]
		mov	eax, [eax+48h]
		mov	[esp+78h+var_6C], offset aCannotDecodePu ; "Cannot decode public key: malformed/uns"...
		mov	[esp+78h+var_70], 3
		mov	[esp+78h+var_74], edi
		mov	ecx, [ebp+var_4C]
		mov	[esp+78h+var_78], ecx
		call	dword ptr [eax]
		mov	[ebp+var_24], 0
		mov	[ebp+var_28], 0
		mov	al, [ebx+5Ch]
		test	al, al
		mov	edx, [ebp+var_50]
		jnz	loc_62BA07E4

loc_62BA0704:				; CODE XREF: silc_client_command_reply_getkey+48Ej
		mov	byte ptr [ebx+5Dh], 1Dh
		mov	byte ptr [ebx+5Ch], 1Dh

loc_62BA070C:				; CODE XREF: silc_client_command_reply_getkey+4B1j
		mov	eax, [ebp+var_28]
		mov	[esp+78h+var_70], eax
		mov	eax, [ebp+var_24]
		mov	[esp+78h+var_74], eax
		mov	[esp+78h+var_78], ebx
		call	sub_62B9ED04
		jmp	loc_62BA055A
; ---------------------------------------------------------------------------

loc_62BA0727:				; CODE XREF: silc_client_command_reply_getkey+347j
		lea	ecx, [ebp+var_24]
		mov	[esp+78h+var_6C], ecx
		lea	ecx, [ebp+var_28]
		mov	[esp+78h+var_70], ecx
		mov	[esp+78h+var_74], edx
		movzx	eax, al
		mov	[esp+78h+var_78], eax
		call	silc_status_get_args
		jmp	loc_62BA06A5
; ---------------------------------------------------------------------------

loc_62BA0749:				; CODE XREF: silc_client_command_reply_getkey+285j
		mov	[esp+78h+var_70], esi
		mov	[esp+78h+var_74], edi
		mov	eax, [ebp+var_4C]
		mov	[esp+78h+var_78], eax
		mov	[ebp+var_50], edx
		call	silc_client_get_client_by_id
		mov	esi, eax
		test	eax, eax
		mov	edx, [ebp+var_50]
		jz	loc_62BA0684
		mov	eax, [eax+3D8h]
		mov	[esp+78h+var_78], eax
		call	silc_rwlock_wrlock
		cmp	dword ptr [esi+3B0h], 0
		jz	loc_62BA0818

loc_62BA0787:				; CODE XREF: silc_client_command_reply_getkey+4D8j
		mov	eax, [esi+3D8h]
		mov	[esp+78h+var_78], eax
		call	silc_rwlock_unlock
		mov	eax, [esi+3B0h]
		mov	[esp+78h+var_6C], eax
		mov	[esp+78h+var_70], esi
		mov	[esp+78h+var_74], 2
		mov	[esp+78h+var_78], ebx
		call	sub_62B9ED04
		mov	[esp+78h+var_70], esi
		mov	[esp+78h+var_74], edi
		mov	ecx, [ebp+var_4C]
		mov	[esp+78h+var_78], ecx
		call	silc_client_unref_client
		jmp	loc_62BA055A
; ---------------------------------------------------------------------------

loc_62BA07CB:				; CODE XREF: silc_client_command_reply_getkey+2B0j
		mov	[ebp+var_24], 0
		mov	[ebp+var_28], 0
		mov	al, [ebx+5Ch]
		test	al, al
		jz	loc_62BA0704

loc_62BA07E4:				; CODE XREF: silc_client_command_reply_getkey+3AEj
		lea	ecx, [ebp+var_28]
		mov	[esp+78h+var_6C], ecx
		lea	ecx, [ebp+var_24]
		mov	[esp+78h+var_70], ecx
		mov	[esp+78h+var_74], edx
		movzx	eax, al
		mov	[esp+78h+var_78], eax
		call	silc_status_get_args
		jmp	loc_62BA070C
; ---------------------------------------------------------------------------

loc_62BA0806:				; CODE XREF: silc_client_command_reply_getkey+2C5j
		mov	eax, [ebp+var_20]
		mov	[esi+20h], eax
		mov	[ebp+var_20], 0
		jmp	loc_62BA061B
; ---------------------------------------------------------------------------

loc_62BA0818:				; CODE XREF: silc_client_command_reply_getkey+431j
		mov	eax, [ebp+var_20]
		mov	[esi+3B0h], eax
		mov	[ebp+var_20], 0
		jmp	loc_62BA0787
silc_client_command_reply_getkey endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  75. silc_client_command_reply_users

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public silc_client_command_reply_users
silc_client_command_reply_users	proc near ; DATA XREF: silc_client_commands_unregister+10CEo
					; silc_client_commands_register+ADBo ...

var_C8		= dword	ptr -0C8h
var_C4		= dword	ptr -0C4h
var_C0		= dword	ptr -0C0h
var_BC		= dword	ptr -0BCh
var_B8		= dword	ptr -0B8h
var_B4		= dword	ptr -0B4h
var_A0		= dword	ptr -0A0h
var_9C		= dword	ptr -9Ch
var_98		= byte ptr -98h
var_83		= byte ptr -83h
var_82		= byte ptr -82h
var_81		= byte ptr -81h
var_80		= dword	ptr -80h
var_7C		= dword	ptr -7Ch
var_78		= dword	ptr -78h
var_74		= dword	ptr -74h
var_70		= dword	ptr -70h
var_6C		= dword	ptr -6Ch
var_60		= byte ptr -60h
var_40		= dword	ptr -40h
var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= byte ptr -30h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		sub	esp, 0BCh
		mov	ebx, [ebp+arg_4]
		mov	esi, [ebp+arg_8]
		mov	edi, [ebx+4]
		mov	eax, [edi+4Ch]
		mov	[ebp+var_6C], eax
		mov	[esp+0C8h+var_C8], esi
		call	silc_command_get_args
		mov	edx, eax
		mov	al, [ebx+5Dh]
		test	al, al
		jz	short loc_62BA08C8
		test	byte ptr [ebx+64h], 2
		jnz	loc_62BA0964

loc_62BA0866:				; CODE XREF: silc_client_command_reply_users+17Cj
		mov	[ebp+var_24], 0
		mov	[ebp+var_20], 0
		mov	al, [ebx+5Ch]
		test	al, al
		jnz	loc_62BA093C
		mov	al, [ebx+5Dh]
		mov	[ebx+5Ch], al
		xor	eax, eax
		xor	edx, edx

loc_62BA0889:				; CODE XREF: silc_client_command_reply_users+12Fj
		mov	[esp+0C8h+var_C0], edx
		mov	[esp+0C8h+var_C4], eax
		mov	[esp+0C8h+var_C8], ebx
		call	sub_62B9ED04
		movzx	ecx, byte ptr [ebx+5Dh]
		mov	edx, esi
		mov	eax, ebx
		call	sub_62B9EB60
		mov	[esp+0C8h+var_C4], offset silc_client_command_reply_processed
		mov	edx, [ebp+arg_0]
		mov	[esp+0C8h+var_C8], edx
		call	silc_fsm_next
		xor	eax, eax

loc_62BA08BB:				; CODE XREF: silc_client_command_reply_users+35Ej
		add	esp, 0BCh
		pop	ebx
		pop	esi
		pop	edi
		leave
		retn
; ---------------------------------------------------------------------------
		align 4

loc_62BA08C8:				; CODE XREF: silc_client_command_reply_users+2Aj
		mov	[esp+0C8h+var_C8], edx
		mov	[ebp+var_A0], edx
		call	silc_argument_get_arg_num
		cmp	eax, 4
		mov	edx, [ebp+var_A0]
		ja	loc_62BA09DC

loc_62BA08E5:				; CODE XREF: silc_client_command_reply_users+1BDj
		mov	[ebp+var_20], 0
		mov	[ebp+var_24], 0
		mov	al, [ebx+5Ch]
		test	al, al
		jnz	loc_62BA09B4
		mov	byte ptr [ebx+5Dh], 1Dh
		mov	byte ptr [ebx+5Ch], 1Dh
		xor	eax, eax
		xor	edx, edx

loc_62BA090A:				; CODE XREF: silc_client_command_reply_users+1A7j
		mov	[esp+0C8h+var_C0], edx
		mov	[esp+0C8h+var_C4], eax
		mov	[esp+0C8h+var_C8], ebx
		call	sub_62B9ED04

loc_62BA091A:				; CODE XREF: silc_client_command_reply_users+245j
		mov	[esp+0C8h+var_C4], offset silc_client_command_reply_processed
		mov	ecx, [ebp+arg_0]
		mov	[esp+0C8h+var_C8], ecx
		call	silc_fsm_next

loc_62BA092D:				; CODE XREF: silc_client_command_reply_users+353j
		xor	eax, eax
		add	esp, 0BCh
		pop	ebx
		pop	esi
		pop	edi
		leave
		retn
; ---------------------------------------------------------------------------
		align 4

loc_62BA093C:				; CODE XREF: silc_client_command_reply_users+49j
		lea	ecx, [ebp+var_20]
		mov	[esp+0C8h+var_BC], ecx
		lea	ecx, [ebp+var_24]
		mov	[esp+0C8h+var_C0], ecx
		mov	[esp+0C8h+var_C4], edx
		movzx	eax, al
		mov	[esp+0C8h+var_C8], eax
		call	silc_status_get_args
		mov	edx, [ebp+var_20]
		mov	eax, [ebp+var_24]
		jmp	loc_62BA0889
; ---------------------------------------------------------------------------

loc_62BA0964:				; CODE XREF: silc_client_command_reply_users+30j
		mov	ecx, [ebx+4]
		mov	ecx, [ecx+4Ch]
		mov	ecx, [ecx+18h]
		mov	ecx, [ecx+48h]
		mov	edi, [ecx]
		movzx	eax, al
		mov	[esp+0C8h+var_C8], eax
		mov	[ebp+var_A0], edx
		call	silc_get_status_message
		mov	ecx, [ebx+4]
		mov	[esp+0C8h+var_B8], eax
		mov	[esp+0C8h+var_BC], offset aCannotGetUsers ; "Cannot get	users: %s"
		mov	[esp+0C8h+var_C0], 3
		mov	[esp+0C8h+var_C4], ecx
		mov	eax, [ecx+4Ch]
		mov	[esp+0C8h+var_C8], eax
		call	edi
		mov	edx, [ebp+var_A0]
		jmp	loc_62BA0866
; ---------------------------------------------------------------------------
		align 4

loc_62BA09B4:				; CODE XREF: silc_client_command_reply_users+C8j
		lea	ecx, [ebp+var_24]
		mov	[esp+0C8h+var_BC], ecx
		lea	ecx, [ebp+var_20]
		mov	[esp+0C8h+var_C0], ecx
		mov	[esp+0C8h+var_C4], edx
		movzx	eax, al
		mov	[esp+0C8h+var_C8], eax
		call	silc_status_get_args
		mov	edx, [ebp+var_24]
		mov	eax, [ebp+var_20]
		jmp	loc_62BA090A
; ---------------------------------------------------------------------------

loc_62BA09DC:				; CODE XREF: silc_client_command_reply_users+AFj
		mov	[esp+0C8h+var_C8], edx
		call	silc_argument_get_arg_num
		cmp	eax, 5
		mov	edx, [ebp+var_A0]
		ja	loc_62BA08E5
		mov	[esp+0C8h+var_B8], 0
		lea	eax, [ebp+var_60]
		mov	[esp+0C8h+var_BC], eax
		mov	[esp+0C8h+var_C0], 0
		mov	[esp+0C8h+var_C4], 2
		mov	[esp+0C8h+var_C8], edx
		mov	[ebp+var_A0], edx
		call	silc_argument_get_decoded
		test	al, al
		mov	edx, [ebp+var_A0]
		jnz	short loc_62BA0A7A
		mov	[ebp+var_24], 0
		mov	[ebp+var_20], 0
		mov	al, [ebx+5Ch]
		test	al, al
		jnz	loc_62BA0B13
		mov	byte ptr [ebx+5Dh], 1Dh
		mov	byte ptr [ebx+5Ch], 1Dh
		xor	eax, eax

loc_62BA0A4D:				; CODE XREF: silc_client_command_reply_users+303j
		mov	[esp+0C8h+var_C0], eax
		mov	eax, [ebp+var_24]
		mov	[esp+0C8h+var_C4], eax
		mov	[esp+0C8h+var_C8], ebx
		call	sub_62B9ED04
		xor	esi, esi

loc_62BA0A62:				; CODE XREF: silc_client_command_reply_users+2DEj
					; silc_client_command_reply_users+5C2j	...
		mov	[esp+0C8h+var_C0], esi
		mov	[esp+0C8h+var_C4], edi
		mov	edx, [ebp+var_6C]
		mov	[esp+0C8h+var_C8], edx
		call	silc_client_unref_channel
		jmp	loc_62BA091A
; ---------------------------------------------------------------------------

loc_62BA0A7A:				; CODE XREF: silc_client_command_reply_users+1F8j
		lea	ecx, [ebp+var_60]
		mov	[esp+0C8h+var_C0], ecx
		mov	[esp+0C8h+var_C4], edi
		mov	eax, [ebp+var_6C]
		mov	[esp+0C8h+var_C8], eax
		mov	[ebp+var_A0], edx
		call	silc_client_get_channel_by_id
		mov	esi, eax
		test	eax, eax
		mov	edx, [ebp+var_A0]
		jz	loc_62BA0B38
		lea	eax, [ebp+var_1C]
		mov	[esp+0C8h+var_C0], eax
		mov	[esp+0C8h+var_C4], 3
		mov	[esp+0C8h+var_C8], edx
		mov	[ebp+var_A0], edx
		call	silc_argument_get_arg_type
		test	eax, eax
		mov	edx, [ebp+var_A0]
		jz	short loc_62BA0AD7
		cmp	[ebp+var_1C], 4
		jz	loc_62BA0BB5

loc_62BA0AD7:				; CODE XREF: silc_client_command_reply_users+29Bj
					; silc_client_command_reply_users+4E4j
		mov	[ebp+var_20], 0
		mov	[ebp+var_24], 0
		mov	al, [ebx+5Ch]
		test	al, al
		jnz	loc_62BA0B93
		mov	byte ptr [ebx+5Dh], 1Dh
		mov	byte ptr [ebx+5Ch], 1Dh

loc_62BA0AF8:				; CODE XREF: silc_client_command_reply_users+380j
		mov	eax, [ebp+var_24]
		mov	[esp+0C8h+var_C0], eax
		mov	eax, [ebp+var_20]
		mov	[esp+0C8h+var_C4], eax
		mov	[esp+0C8h+var_C8], ebx
		call	sub_62B9ED04
		jmp	loc_62BA0A62
; ---------------------------------------------------------------------------

loc_62BA0B13:				; CODE XREF: silc_client_command_reply_users+20Dj
		lea	ecx, [ebp+var_20]
		mov	[esp+0C8h+var_BC], ecx
		lea	ecx, [ebp+var_24]
		mov	[esp+0C8h+var_C0], ecx
		mov	[esp+0C8h+var_C4], edx
		movzx	eax, al
		mov	[esp+0C8h+var_C8], eax
		call	silc_status_get_args
		mov	eax, [ebp+var_20]
		jmp	loc_62BA0A4D
; ---------------------------------------------------------------------------

loc_62BA0B38:				; CODE XREF: silc_client_command_reply_users+270j
		mov	edx, [ebp+arg_0]
		mov	al, [edx+28h]
		mov	dl, al
		or	edx, 4
		mov	ecx, [ebp+arg_0]
		mov	[ecx+28h], dl
		test	al, 4
		jnz	loc_62BA0CBE

loc_62BA0B51:				; CODE XREF: silc_client_command_reply_users+4BAj
		mov	[esp+0C8h+var_B8], ebx
		mov	[esp+0C8h+var_BC], offset sub_62BA0FA8
		lea	eax, [ebp+var_60]
		mov	[esp+0C8h+var_C0], eax
		mov	[esp+0C8h+var_C4], edi
		mov	edx, [ebp+var_6C]
		mov	[esp+0C8h+var_C8], edx
		call	silc_client_get_channel_by_id_resolve

loc_62BA0B73:				; CODE XREF: silc_client_command_reply_users+489j
		mov	ecx, [ebp+arg_0]
		mov	al, [ecx+28h]
		mov	dl, al
		and	edx, 0FFFFFFFBh
		mov	[ecx+28h], dl
		test	al, 4
		jz	loc_62BA092D
		mov	eax, 2
		jmp	loc_62BA08BB
; ---------------------------------------------------------------------------

loc_62BA0B93:				; CODE XREF: silc_client_command_reply_users+2BAj
		lea	ecx, [ebp+var_24]
		mov	[esp+0C8h+var_BC], ecx
		lea	ecx, [ebp+var_20]
		mov	[esp+0C8h+var_C0], ecx
		mov	[esp+0C8h+var_C4], edx
		movzx	eax, al
		mov	[esp+0C8h+var_C8], eax
		call	silc_status_get_args
		jmp	loc_62BA0AF8
; ---------------------------------------------------------------------------

loc_62BA0BB5:				; CODE XREF: silc_client_command_reply_users+2A1j
		mov	cl, [eax]
		mov	byte ptr [ebp+var_80], cl
		mov	cl, [eax+1]
		mov	byte ptr [ebp+var_7C], cl
		mov	cl, [eax+2]
		mov	byte ptr [ebp+var_78], cl
		mov	al, [eax+3]
		mov	byte ptr [ebp+var_74], al
		lea	eax, [ebp+var_1C]
		mov	[esp+0C8h+var_C0], eax
		mov	[esp+0C8h+var_C4], 4
		mov	[esp+0C8h+var_C8], edx
		mov	[ebp+var_A0], edx
		call	silc_argument_get_arg_type
		mov	ecx, eax
		test	eax, eax
		mov	edx, [ebp+var_A0]
		jz	loc_62BA0EBA
		movzx	eax, byte ptr [ebp+var_74]
		mov	[ebp+var_74], eax
		mov	al, byte ptr [ebp+var_80]
		shl	eax, 18h
		or	[ebp+var_74], eax
		movzx	eax, byte ptr [ebp+var_7C]
		shl	eax, 10h
		or	[ebp+var_74], eax
		movzx	eax, byte ptr [ebp+var_78]
		shl	eax, 8
		or	[ebp+var_74], eax
		mov	[ebp+var_40], ecx
		mov	[ebp+var_3C], ecx
		mov	eax, [ebp+var_1C]
		add	eax, ecx
		mov	[ebp+var_34], eax
		mov	[ebp+var_38], eax
		mov	al, [ebx+64h]
		test	al, 4
		jnz	loc_62BA0CEF
		or	eax, 4
		mov	[ebx+64h], al
		mov	[esp+0C8h+var_C0], esi
		mov	[esp+0C8h+var_C4], edi
		mov	edx, [ebp+var_6C]
		mov	[esp+0C8h+var_C8], edx
		call	silc_client_unref_channel
		mov	ecx, [ebp+arg_0]
		mov	al, [ecx+28h]
		mov	dl, al
		or	edx, 4
		mov	[ecx+28h], dl
		test	al, 4
		jz	short loc_62BA0C90
		mov	[esp+0C8h+var_C0], 798h
		mov	[esp+0C8h+var_C4], offset aCommand_reply_ ; "command_reply.c"
		mov	[esp+0C8h+var_C8], offset aSilc_verifyS_6 ; "SILC_VERIFY %s:%d"
		call	silc_format
		mov	[esp+0C8h+var_C4], eax
		mov	[esp+0C8h+var_C8], 3
		call	silc_log_output

loc_62BA0C90:				; CODE XREF: silc_client_command_reply_users+432j
		mov	[esp+0C8h+var_B4], ebx
		mov	[esp+0C8h+var_B8], offset sub_62BA0F80
		lea	eax, [ebp+var_40]
		mov	[esp+0C8h+var_BC], eax
		mov	eax, [ebp+var_74]
		mov	[esp+0C8h+var_C0], eax
		mov	[esp+0C8h+var_C4], edi
		mov	edx, [ebp+var_6C]
		mov	[esp+0C8h+var_C8], edx
		call	silc_client_get_clients_by_list
		jmp	loc_62BA0B73
; ---------------------------------------------------------------------------

loc_62BA0CBE:				; CODE XREF: silc_client_command_reply_users+31Bj
		mov	[esp+0C8h+var_C0], 77Eh
		mov	[esp+0C8h+var_C4], offset aCommand_reply_ ; "command_reply.c"
		mov	[esp+0C8h+var_C8], offset aSilc_verifyS_6 ; "SILC_VERIFY %s:%d"
		call	silc_format
		mov	[esp+0C8h+var_C4], eax
		mov	[esp+0C8h+var_C8], 3
		call	silc_log_output
		jmp	loc_62BA0B51
; ---------------------------------------------------------------------------

loc_62BA0CEF:				; CODE XREF: silc_client_command_reply_users+403j
		lea	eax, [ebp+var_1C]
		mov	[esp+0C8h+var_C0], eax
		mov	[esp+0C8h+var_C4], 5
		mov	[esp+0C8h+var_C8], edx
		mov	[ebp+var_A0], edx
		call	silc_argument_get_arg_type
		test	eax, eax
		mov	edx, [ebp+var_A0]
		jz	loc_62BA0AD7
		mov	edx, [ebp+var_1C]
		add	edx, eax
		mov	[ebp+var_78], edx
		mov	edx, [esi+144h]
		mov	[esp+0C8h+var_C8], edx
		mov	[ebp+var_A0], eax
		call	silc_rwlock_wrlock
		cmp	[ebp+var_74], 0
		mov	eax, [ebp+var_A0]
		jz	loc_62BA0EF8
		mov	ecx, [ebp+var_3C]
		mov	[ebp+var_70], eax
		mov	edx, [ebp+var_78]
		sub	edx, eax
		mov	[ebp+var_78], edx
		mov	[ebp+var_7C], 0
		mov	[ebp+var_9C], ebx
		jmp	short loc_62BA0DC4
; ---------------------------------------------------------------------------

loc_62BA0D63:				; CODE XREF: silc_client_command_reply_users+611j
					; silc_client_command_reply_users+61Ej	...
		mov	[esp+0C8h+var_C0], ebx
		mov	[esp+0C8h+var_C4], edi
		mov	eax, [ebp+var_6C]
		mov	[esp+0C8h+var_C8], eax
		call	silc_client_unref_client
		mov	eax, [ebp+var_3C]
		mov	edx, [ebp+var_38]
		sub	edx, eax
		cmp	[ebp+var_80], edx
		ja	loc_62BA0F6C
		mov	edx, [ebp+var_80]
		lea	ecx, [eax+edx]
		mov	[ebp+var_3C], ecx
		test	eax, eax
		jz	loc_62BA0F6C
		cmp	[ebp+var_78], 3
		jbe	loc_62BA0F6C
		mov	eax, [ebp+var_70]
		test	eax, eax
		jz	loc_62BA0F6C
		inc	[ebp+var_7C]
		add	[ebp+var_70], 4
		sub	[ebp+var_78], 4
		mov	eax, [ebp+var_7C]
		cmp	[ebp+var_74], eax
		jbe	loc_62BA0EF2

loc_62BA0DC4:				; CODE XREF: silc_client_command_reply_users+531j
		movzx	eax, byte ptr [ecx+2]
		shl	eax, 8
		movzx	edx, byte ptr [ecx+3]
		or	eax, edx
		add	eax, 4
		movzx	eax, ax
		mov	[ebp+var_80], eax
		lea	eax, [ebp+var_60]
		mov	[esp+0C8h+var_C0], eax
		mov	edx, [ebp+var_80]
		mov	[esp+0C8h+var_C4], edx
		mov	[esp+0C8h+var_C8], ecx
		call	silc_id_payload_parse_id
		test	al, al
		jz	loc_62BA0A62
		mov	ecx, [ebp+var_70]
		mov	cl, [ecx]
		mov	[ebp+var_98], cl
		mov	eax, [ebp+var_70]
		mov	al, [eax+1]
		mov	[ebp+var_83], al
		mov	edx, [ebp+var_70]
		mov	dl, [edx+2]
		mov	[ebp+var_82], dl
		mov	ecx, [ebp+var_70]
		mov	cl, [ecx+3]
		mov	[ebp+var_81], cl
		lea	eax, [ebp+var_60]
		mov	[esp+0C8h+var_C0], eax
		mov	[esp+0C8h+var_C4], edi
		mov	edx, [ebp+var_6C]
		mov	[esp+0C8h+var_C8], edx
		call	silc_client_get_client_by_id
		mov	ebx, eax
		test	eax, eax
		jz	loc_62BA0D63
		test	byte ptr [eax+402h], 1
		jz	loc_62BA0D63
		mov	eax, [eax+3D8h]
		mov	[esp+0C8h+var_C8], eax
		call	silc_rwlock_wrlock
		mov	al, [ebp+var_98]
		shl	eax, 18h
		movzx	edx, [ebp+var_83]
		shl	edx, 10h
		or	eax, edx
		movzx	edx, [ebp+var_81]
		or	eax, edx
		movzx	edx, [ebp+var_82]
		shl	edx, 8
		or	eax, edx
		mov	[esp+0C8h+var_B8], eax
		mov	[esp+0C8h+var_BC], ebx
		mov	[esp+0C8h+var_C0], esi
		mov	[esp+0C8h+var_C4], edi
		mov	ecx, [ebp+var_6C]
		mov	[esp+0C8h+var_C8], ecx
		call	silc_client_add_to_channel
		mov	eax, [ebx+3D8h]
		mov	[esp+0C8h+var_C8], eax
		call	silc_rwlock_unlock
		jmp	loc_62BA0D63
; ---------------------------------------------------------------------------

loc_62BA0EBA:				; CODE XREF: silc_client_command_reply_users+3C3j
		mov	[ebp+var_24], 0
		mov	[ebp+var_20], 0
		mov	al, [ebx+5Ch]
		test	al, al
		jnz	short loc_62BA0F4A
		mov	byte ptr [ebx+5Dh], 1Dh
		mov	byte ptr [ebx+5Ch], 1Dh

loc_62BA0ED7:				; CODE XREF: silc_client_command_reply_users+737j
		mov	eax, [ebp+var_20]
		mov	[esp+0C8h+var_C0], eax
		mov	eax, [ebp+var_24]
		mov	[esp+0C8h+var_C4], eax
		mov	[esp+0C8h+var_C8], ebx
		call	sub_62B9ED04
		jmp	loc_62BA0A62
; ---------------------------------------------------------------------------

loc_62BA0EF2:				; CODE XREF: silc_client_command_reply_users+58Ej
		mov	ebx, [ebp+var_9C]

loc_62BA0EF8:				; CODE XREF: silc_client_command_reply_users+510j
		mov	eax, [esi+144h]
		mov	[esp+0C8h+var_C8], eax
		call	silc_rwlock_unlock
		lea	eax, [ebp+var_30]
		mov	[esp+0C8h+var_C4], eax
		mov	edx, [esi+134h]
		mov	[esp+0C8h+var_C8], edx
		mov	[ebp+var_A0], eax
		call	silc_hash_table_list
		mov	eax, [ebp+var_A0]
		mov	[esp+0C8h+var_C0], eax
		mov	[esp+0C8h+var_C4], esi
		mov	[esp+0C8h+var_C8], ebx
		call	sub_62B9ED04
		mov	eax, [ebp+var_A0]
		mov	[esp+0C8h+var_C8], eax
		call	silc_hash_table_list_reset
		jmp	loc_62BA0A62
; ---------------------------------------------------------------------------

loc_62BA0F4A:				; CODE XREF: silc_client_command_reply_users+69Dj
		lea	ecx, [ebp+var_20]
		mov	[esp+0C8h+var_BC], ecx
		lea	ecx, [ebp+var_24]
		mov	[esp+0C8h+var_C0], ecx
		mov	[esp+0C8h+var_C4], edx
		movzx	eax, al
		mov	[esp+0C8h+var_C8], eax
		call	silc_status_get_args
		jmp	loc_62BA0ED7
; ---------------------------------------------------------------------------

loc_62BA0F6C:				; CODE XREF: silc_client_command_reply_users+551j
					; silc_client_command_reply_users+562j	...
		mov	eax, [esi+144h]
		mov	[esp+0C8h+var_C8], eax
		call	silc_rwlock_unlock
		jmp	loc_62BA0A62
silc_client_command_reply_users	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_62BA0F80	proc near		; DATA XREF: silc_client_command_reply_users+464o

arg_0		= dword	ptr  8
arg_10		= dword	ptr  18h

		push	ebp
		mov	ebp, esp
		sub	esp, 8
		mov	eax, [ebp+arg_10]
		mov	dl, [eax+30h]
		mov	cl, dl
		and	ecx, 0FFFFFFFBh
		mov	[eax+30h], cl
		and	edx, 4
		jz	short loc_62BA0F9C
		leave
		retn
; ---------------------------------------------------------------------------
		align 4

loc_62BA0F9C:				; CODE XREF: sub_62BA0F80+17j
		add	eax, 8
		mov	[ebp+arg_0], eax
		leave
		jmp	silc_fsm_continue
sub_62BA0F80	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_62BA0FA8	proc near		; DATA XREF: silc_client_command_reply_users+325o

var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
arg_C		= dword	ptr  14h
arg_10		= dword	ptr  18h

		push	ebp
		mov	ebp, esp
		push	esi
		push	ebx
		sub	esp, 20h
		mov	ebx, [ebp+arg_10]
		mov	edx, [ebp+arg_C]
		test	edx, edx
		jz	short loc_62BA0FDC

loc_62BA0FBA:				; CODE XREF: sub_62BA0FA8+9Dj
		mov	al, [ebx+30h]
		mov	dl, al
		and	edx, 0FFFFFFFBh
		mov	[ebx+30h], dl
		test	al, 4
		jnz	short loc_62BA0FD4
		add	ebx, 8
		mov	[esp+28h+var_28], ebx
		call	silc_fsm_continue

loc_62BA0FD4:				; CODE XREF: sub_62BA0FA8+1Fj
		add	esp, 20h
		pop	ebx
		pop	esi
		leave
		retn
; ---------------------------------------------------------------------------
		align 4

loc_62BA0FDC:				; CODE XREF: sub_62BA0FA8+10j
		lea	esi, [ebx+8]
		mov	[esp+28h+var_28], esi
		call	silc_fsm_get_state_context
		mov	[esp+28h+var_28], eax
		call	silc_command_get_args
		mov	byte ptr [ebx+5Ch], 17h
		mov	[ebp+var_C], 0
		mov	[ebp+var_10], 0
		lea	edx, [ebp+var_10]
		mov	[esp+28h+var_1C], edx
		lea	edx, [ebp+var_C]
		mov	[esp+28h+var_20], edx
		mov	[esp+28h+var_24], eax
		mov	[esp+28h+var_28], 17h
		call	silc_status_get_args
		mov	eax, [ebp+var_10]
		mov	[esp+28h+var_20], eax
		mov	eax, [ebp+var_C]
		mov	[esp+28h+var_24], eax
		mov	[esp+28h+var_28], ebx
		call	sub_62B9ED04
		mov	[esp+28h+var_24], offset silc_client_command_reply_processed
		mov	[esp+28h+var_28], esi
		call	silc_fsm_next
		jmp	loc_62BA0FBA
sub_62BA0FA8	endp

; ---------------------------------------------------------------------------
		align 4

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_62BA104C	proc near		; CODE XREF: silc_client_command_reply_leave:loc_62BA143Fp
					; silc_client_command_reply_leave:loc_62BA14BBp

var_48		= dword	ptr -48h
var_2C		= dword	ptr -2Ch

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		sub	esp, 3Ch
		mov	esi, eax
		test	eax, eax
		jz	short loc_62BA10B7
		mov	ebx, [eax]
		mov	[eax+8], ebx
		and	byte ptr [eax+10h], 0FDh
		test	ebx, ebx
		jz	short loc_62BA10AF

loc_62BA1068:				; CODE XREF: sub_62BA104C+61j
		test	byte ptr [esi+10h], 2
		jz	short loc_62BA10C0
		movzx	eax, word ptr [esi+0Eh]
		mov	eax, [ebx+eax]

loc_62BA1075:				; CODE XREF: sub_62BA104C+7Bj
		mov	[esi+8], eax
		mov	eax, [esi]
		test	eax, eax
		jz	short loc_62BA109B
		cmp	ebx, eax
		jz	loc_62BA1108
		movzx	edi, word ptr [esi+0Ch]
		jmp	short loc_62BA1092
; ---------------------------------------------------------------------------

loc_62BA108C:				; CODE XREF: sub_62BA104C+4Dj
		cmp	ebx, ecx
		jz	short loc_62BA10CC
		mov	eax, ecx

loc_62BA1092:				; CODE XREF: sub_62BA104C+3Ej
		lea	edx, [eax+edi]
		mov	ecx, [edx]
		test	ecx, ecx
		jnz	short loc_62BA108C

loc_62BA109B:				; CODE XREF: sub_62BA104C+30j
		cmp	[esi+4], ebx
		jz	short loc_62BA10F9

loc_62BA10A0:				; CODE XREF: sub_62BA104C+ABj
					; sub_62BA104C+B0j
		mov	[esp+48h+var_48], ebx
		call	silc_free
		mov	ebx, [esi+8]
		test	ebx, ebx
		jnz	short loc_62BA1068

loc_62BA10AF:				; CODE XREF: sub_62BA104C+1Aj
		mov	[esp+48h+var_48], esi
		call	silc_free

loc_62BA10B7:				; CODE XREF: sub_62BA104C+Dj
		add	esp, 3Ch
		pop	ebx
		pop	esi
		pop	edi
		leave
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_62BA10C0:				; CODE XREF: sub_62BA104C+20j
		movzx	eax, word ptr [esi+0Ch]
		mov	eax, [ebx+eax]
		jmp	short loc_62BA1075
; ---------------------------------------------------------------------------
		align 4

loc_62BA10CC:				; CODE XREF: sub_62BA104C+42j
		mov	[ebp+var_2C], edx

loc_62BA10CF:				; CODE XREF: sub_62BA104C+C5j
		mov	ecx, [ebx+edi]
		mov	edx, [ebp+var_2C]
		mov	[edx], ecx
		test	ecx, ecx
		jz	short loc_62BA10EB
		test	byte ptr [esi+10h], 1
		jz	short loc_62BA10EB
		movzx	edi, word ptr [esi+0Eh]
		mov	edx, [ebx+edi]
		mov	[ecx+edi], edx

loc_62BA10EB:				; CODE XREF: sub_62BA104C+8Dj
					; sub_62BA104C+93j
		cmp	[esi+8], ebx
		jz	short loc_62BA10FE

loc_62BA10F0:				; CODE XREF: sub_62BA104C+BAj
		sub	dword ptr [esi+10h], 4
		cmp	[esi+4], ebx
		jnz	short loc_62BA10A0

loc_62BA10F9:				; CODE XREF: sub_62BA104C+52j
		mov	[esi+4], eax
		jmp	short loc_62BA10A0
; ---------------------------------------------------------------------------

loc_62BA10FE:				; CODE XREF: sub_62BA104C+A2j
		mov	ecx, [ebp+var_2C]
		mov	edx, [ecx]
		mov	[esi+8], edx
		jmp	short loc_62BA10F0
; ---------------------------------------------------------------------------

loc_62BA1108:				; CODE XREF: sub_62BA104C+34j
		movzx	edi, word ptr [esi+0Ch]
		mov	[ebp+var_2C], esi
		xor	eax, eax
		jmp	short loc_62BA10CF
sub_62BA104C	endp

; ---------------------------------------------------------------------------
		align 4
; Exported entry  60. silc_client_command_reply_leave

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public silc_client_command_reply_leave
silc_client_command_reply_leave	proc near ; DATA XREF: silc_client_commands_unregister+101Eo
					; silc_client_commands_register+AB3o ...

var_78		= dword	ptr -78h
var_74		= dword	ptr -74h
var_70		= dword	ptr -70h
var_6C		= dword	ptr -6Ch
var_68		= dword	ptr -68h
var_50		= dword	ptr -50h
var_4C		= dword	ptr -4Ch
var_40		= byte ptr -40h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		sub	esp, 6Ch
		mov	ebx, [ebp+arg_4]
		mov	esi, [ebp+arg_8]
		mov	edi, [ebx+4]
		mov	eax, [edi+4Ch]
		mov	[ebp+var_4C], eax
		mov	[esp+78h+var_78], esi
		call	silc_command_get_args
		mov	edx, eax
		mov	al, [ebx+5Dh]
		test	al, al
		jz	short loc_62BA11A4
		test	byte ptr [ebx+64h], 2
		jnz	loc_62BA1248

loc_62BA1147:				; CODE XREF: silc_client_command_reply_leave+176j
		mov	[ebp+var_20], 0
		mov	[ebp+var_1C], 0
		mov	al, [ebx+5Ch]
		test	al, al
		jnz	loc_62BA1220
		mov	al, [ebx+5Dh]
		mov	[ebx+5Ch], al
		xor	eax, eax
		xor	edx, edx

loc_62BA116A:				; CODE XREF: silc_client_command_reply_leave+12Fj
		mov	[esp+78h+var_70], edx
		mov	[esp+78h+var_74], eax
		mov	[esp+78h+var_78], ebx
		call	sub_62B9ED04
		movzx	ecx, byte ptr [ebx+5Dh]
		mov	edx, esi
		mov	eax, ebx
		call	sub_62B9EB60
		mov	[esp+78h+var_74], offset silc_client_command_reply_processed
		mov	eax, [ebp+arg_0]
		mov	[esp+78h+var_78], eax
		call	silc_fsm_next

loc_62BA119A:				; CODE XREF: silc_client_command_reply_leave+21Dj
		xor	eax, eax
		add	esp, 6Ch
		pop	ebx
		pop	esi
		pop	edi
		leave
		retn
; ---------------------------------------------------------------------------

loc_62BA11A4:				; CODE XREF: silc_client_command_reply_leave+27j
		mov	[esp+78h+var_78], edx
		mov	[ebp+var_50], edx
		call	silc_argument_get_arg_num
		cmp	eax, 1
		mov	edx, [ebp+var_50]
		jbe	short loc_62BA11CB
		mov	[esp+78h+var_78], edx
		call	silc_argument_get_arg_num
		cmp	eax, 2
		mov	edx, [ebp+var_50]
		jbe	loc_62BA12B8

loc_62BA11CB:				; CODE XREF: silc_client_command_reply_leave+A1j
		mov	[ebp+var_1C], 0
		mov	[ebp+var_20], 0
		mov	al, [ebx+5Ch]
		test	al, al
		jnz	loc_62BA1290
		mov	byte ptr [ebx+5Dh], 1Dh
		mov	byte ptr [ebx+5Ch], 1Dh
		xor	eax, eax
		xor	edx, edx

loc_62BA11F0:				; CODE XREF: silc_client_command_reply_leave+19Fj
		mov	[esp+78h+var_70], edx
		mov	[esp+78h+var_74], eax
		mov	[esp+78h+var_78], ebx
		call	sub_62B9ED04
		mov	[esp+78h+var_74], offset silc_client_command_reply_processed
		mov	eax, [ebp+arg_0]
		mov	[esp+78h+var_78], eax
		call	silc_fsm_next
		xor	eax, eax
		add	esp, 6Ch
		pop	ebx
		pop	esi
		pop	edi
		leave
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_62BA1220:				; CODE XREF: silc_client_command_reply_leave+46j
		lea	ecx, [ebp+var_1C]
		mov	[esp+78h+var_6C], ecx
		lea	ecx, [ebp+var_20]
		mov	[esp+78h+var_70], ecx
		mov	[esp+78h+var_74], edx
		movzx	eax, al
		mov	[esp+78h+var_78], eax
		call	silc_status_get_args
		mov	edx, [ebp+var_1C]
		mov	eax, [ebp+var_20]
		jmp	loc_62BA116A
; ---------------------------------------------------------------------------

loc_62BA1248:				; CODE XREF: silc_client_command_reply_leave+2Dj
		mov	ecx, [ebx+4]
		mov	ecx, [ecx+4Ch]
		mov	ecx, [ecx+18h]
		mov	ecx, [ecx+48h]
		mov	edi, [ecx]
		movzx	eax, al
		mov	[esp+78h+var_78], eax
		mov	[ebp+var_50], edx
		call	silc_get_status_message
		mov	ecx, [ebx+4]
		mov	[esp+78h+var_68], eax
		mov	[esp+78h+var_6C], offset aCannotSetLeave ; "Cannot set leave: %s"
		mov	[esp+78h+var_70], 3
		mov	[esp+78h+var_74], ecx
		mov	eax, [ecx+4Ch]
		mov	[esp+78h+var_78], eax
		call	edi
		mov	edx, [ebp+var_50]
		jmp	loc_62BA1147
; ---------------------------------------------------------------------------
		align 10h

loc_62BA1290:				; CODE XREF: silc_client_command_reply_leave+CAj
		lea	ecx, [ebp+var_20]
		mov	[esp+78h+var_6C], ecx
		lea	ecx, [ebp+var_1C]
		mov	[esp+78h+var_70], ecx
		mov	[esp+78h+var_74], edx
		movzx	eax, al
		mov	[esp+78h+var_78], eax
		call	silc_status_get_args
		mov	edx, [ebp+var_20]
		mov	eax, [ebp+var_1C]
		jmp	loc_62BA11F0
; ---------------------------------------------------------------------------

loc_62BA12B8:				; CODE XREF: silc_client_command_reply_leave+B1j
		mov	[esp+78h+var_68], 0
		lea	esi, [ebp+var_40]
		mov	[esp+78h+var_6C], esi
		mov	[esp+78h+var_70], 0
		mov	[esp+78h+var_74], 2
		mov	[esp+78h+var_78], edx
		mov	[ebp+var_50], edx
		call	silc_argument_get_decoded
		test	al, al
		mov	edx, [ebp+var_50]
		jnz	short loc_62BA1338
		mov	[ebp+var_20], 0
		mov	[ebp+var_1C], 0
		mov	al, [ebx+5Ch]
		test	al, al
		jnz	loc_62BA14F5

loc_62BA1302:				; CODE XREF: silc_client_command_reply_leave+41Cj
		mov	byte ptr [ebx+5Dh], 1Dh
		mov	byte ptr [ebx+5Ch], 1Dh
		xor	eax, eax
		xor	edx, edx

loc_62BA130E:				; CODE XREF: silc_client_command_reply_leave+404j
					; silc_client_command_reply_leave+445j
		mov	[esp+78h+var_70], edx
		mov	[esp+78h+var_74], eax
		mov	[esp+78h+var_78], ebx
		call	sub_62B9ED04

loc_62BA131E:				; CODE XREF: silc_client_command_reply_leave+3DCj
		mov	[esp+78h+var_74], offset silc_client_command_reply_processed
		mov	eax, [ebp+arg_0]
		mov	[esp+78h+var_78], eax
		call	silc_fsm_next
		jmp	loc_62BA119A
; ---------------------------------------------------------------------------
		align 4

loc_62BA1338:				; CODE XREF: silc_client_command_reply_leave+1D3j
		mov	[esp+78h+var_70], esi
		mov	[esp+78h+var_74], edi
		mov	eax, [ebp+var_4C]
		mov	[esp+78h+var_78], eax
		mov	[ebp+var_50], edx
		call	silc_client_get_channel_by_id
		mov	esi, eax
		test	eax, eax
		mov	edx, [ebp+var_50]
		jz	loc_62BA151D
		mov	eax, [edi]
		mov	[esp+78h+var_6C], eax
		mov	[esp+78h+var_70], esi
		mov	[esp+78h+var_74], edi
		mov	eax, [ebp+var_4C]
		mov	[esp+78h+var_78], eax
		call	silc_client_remove_from_channel
		mov	[esp+78h+var_74], esi
		mov	[esp+78h+var_78], ebx
		call	sub_62B9ED04
		mov	eax, [esi+158h]
		test	eax, eax
		jz	short loc_62BA1392
		mov	[esp+78h+var_78], eax
		call	silc_cipher_free

loc_62BA1392:				; CODE XREF: silc_client_command_reply_leave+274j
		mov	dword ptr [esi+158h], 0
		mov	eax, [esi+15Ch]
		test	eax, eax
		jz	short loc_62BA13AE
		mov	[esp+78h+var_78], eax
		call	silc_cipher_free

loc_62BA13AE:				; CODE XREF: silc_client_command_reply_leave+290j
		mov	dword ptr [esi+15Ch], 0
		mov	eax, [esi+160h]
		test	eax, eax
		jz	short loc_62BA13CA
		mov	[esp+78h+var_78], eax
		call	silc_hmac_free

loc_62BA13CA:				; CODE XREF: silc_client_command_reply_leave+2ACj
		mov	dword ptr [esi+160h], 0
		mov	eax, [esi+148h]
		test	eax, eax
		jz	short loc_62BA1444
		mov	edx, [eax]
		mov	[eax+8], edx
		and	byte ptr [eax+10h], 0FDh
		mov	dword ptr [eax+18h], 0
		mov	dword ptr [eax+14h], 0
		jmp	short loc_62BA1413
; ---------------------------------------------------------------------------
		align 4

loc_62BA13F8:				; CODE XREF: silc_client_command_reply_leave+316j
		movzx	ecx, word ptr [eax+0Eh]
		mov	ecx, [edx+ecx]

loc_62BA13FF:				; CODE XREF: silc_client_command_reply_leave+31Fj
		mov	[eax+8], ecx
		mov	[eax+14h], edx
		mov	edx, [edx]
		test	edx, edx
		jz	short loc_62BA143F
		mov	[esp+78h+var_78], edx
		call	silc_cipher_free

loc_62BA1413:				; CODE XREF: silc_client_command_reply_leave+2E1j
		mov	eax, [esi+148h]
		mov	edx, [eax+14h]
		mov	[eax+18h], edx
		mov	edx, [eax+8]
		test	edx, edx
		jz	short loc_62BA1438
		test	byte ptr [eax+10h], 2
		jnz	short loc_62BA13F8
		movzx	ecx, word ptr [eax+0Ch]
		mov	ecx, [edx+ecx]
		jmp	short loc_62BA13FF
; ---------------------------------------------------------------------------
		align 4

loc_62BA1438:				; CODE XREF: silc_client_command_reply_leave+310j
		mov	dword ptr [eax+14h], 0

loc_62BA143F:				; CODE XREF: silc_client_command_reply_leave+2F5j
		call	sub_62BA104C

loc_62BA1444:				; CODE XREF: silc_client_command_reply_leave+2C8j
		mov	dword ptr [esi+148h], 0
		mov	eax, [esi+14Ch]
		test	eax, eax
		jz	short loc_62BA14C0
		mov	edx, [eax]
		mov	[eax+8], edx
		and	byte ptr [eax+10h], 0FDh
		mov	dword ptr [eax+18h], 0
		mov	dword ptr [eax+14h], 0
		jmp	short loc_62BA148F
; ---------------------------------------------------------------------------
		align 4

loc_62BA1474:				; CODE XREF: silc_client_command_reply_leave+392j
		movzx	ecx, word ptr [eax+0Eh]
		mov	ecx, [edx+ecx]

loc_62BA147B:				; CODE XREF: silc_client_command_reply_leave+39Bj
		mov	[eax+8], ecx
		mov	[eax+14h], edx
		mov	edx, [edx]
		test	edx, edx
		jz	short loc_62BA14BB
		mov	[esp+78h+var_78], edx
		call	silc_hmac_free

loc_62BA148F:				; CODE XREF: silc_client_command_reply_leave+35Bj
		mov	eax, [esi+14Ch]
		mov	edx, [eax+14h]
		mov	[eax+18h], edx
		mov	edx, [eax+8]
		test	edx, edx
		jz	short loc_62BA14B4
		test	byte ptr [eax+10h], 2
		jnz	short loc_62BA1474
		movzx	ecx, word ptr [eax+0Ch]
		mov	ecx, [edx+ecx]
		jmp	short loc_62BA147B
; ---------------------------------------------------------------------------
		align 4

loc_62BA14B4:				; CODE XREF: silc_client_command_reply_leave+38Cj
		mov	dword ptr [eax+14h], 0

loc_62BA14BB:				; CODE XREF: silc_client_command_reply_leave+371j
		call	sub_62BA104C

loc_62BA14C0:				; CODE XREF: silc_client_command_reply_leave+342j
		mov	dword ptr [esi+14Ch], 0
		mov	[esp+78h+var_70], esi
		mov	[esp+78h+var_74], edi
		mov	eax, [ebp+var_4C]
		mov	[esp+78h+var_78], eax
		call	silc_client_empty_channel
		mov	[esp+78h+var_70], esi
		mov	[esp+78h+var_74], edi
		mov	eax, [ebp+var_4C]
		mov	[esp+78h+var_78], eax
		call	silc_client_del_channel
		jmp	loc_62BA131E
; ---------------------------------------------------------------------------

loc_62BA14F5:				; CODE XREF: silc_client_command_reply_leave+1E8j
		lea	ecx, [ebp+var_1C]
		mov	[esp+78h+var_6C], ecx
		lea	ecx, [ebp+var_20]
		mov	[esp+78h+var_70], ecx
		mov	[esp+78h+var_74], edx
		movzx	eax, al
		mov	[esp+78h+var_78], eax
		call	silc_status_get_args
		mov	edx, [ebp+var_1C]
		mov	eax, [ebp+var_20]
		jmp	loc_62BA130E
; ---------------------------------------------------------------------------

loc_62BA151D:				; CODE XREF: silc_client_command_reply_leave+241j
		mov	[ebp+var_1C], 0
		mov	[ebp+var_20], 0
		mov	al, [ebx+5Ch]
		test	al, al
		jz	loc_62BA1302
		lea	ecx, [ebp+var_20]
		mov	[esp+78h+var_6C], ecx
		lea	ecx, [ebp+var_1C]
		mov	[esp+78h+var_70], ecx
		mov	[esp+78h+var_74], edx
		movzx	eax, al
		mov	[esp+78h+var_78], eax
		call	silc_status_get_args
		mov	edx, [ebp+var_20]
		mov	eax, [ebp+var_1C]
		jmp	loc_62BA130E
silc_client_command_reply_leave	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  49. silc_client_command_reply_ban

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public silc_client_command_reply_ban
silc_client_command_reply_ban proc near	; DATA XREF: silc_client_commands_unregister+D5Eo
					; silc_client_commands_register+937o ...

var_78		= dword	ptr -78h
var_74		= dword	ptr -74h
var_70		= dword	ptr -70h
var_6C		= dword	ptr -6Ch
var_68		= dword	ptr -68h
var_50		= dword	ptr -50h
var_4C		= dword	ptr -4Ch
var_44		= byte ptr -44h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		sub	esp, 6Ch
		mov	ebx, [ebp+arg_4]
		mov	esi, [ebp+arg_8]
		mov	edi, [ebx+4]
		mov	eax, [edi+4Ch]
		mov	[ebp+var_4C], eax
		mov	[esp+78h+var_78], esi
		call	silc_command_get_args
		mov	edx, eax
		mov	al, [ebx+5Dh]
		test	al, al
		jz	short loc_62BA15F0
		test	byte ptr [ebx+64h], 2
		jnz	loc_62BA1694

loc_62BA1593:				; CODE XREF: silc_client_command_reply_ban+176j
		mov	[ebp+var_24], 0
		mov	[ebp+var_20], 0
		mov	al, [ebx+5Ch]
		test	al, al
		jnz	loc_62BA166C
		mov	al, [ebx+5Dh]
		mov	[ebx+5Ch], al
		xor	eax, eax
		xor	edx, edx

loc_62BA15B6:				; CODE XREF: silc_client_command_reply_ban+12Fj
		mov	[esp+78h+var_70], edx
		mov	[esp+78h+var_74], eax
		mov	[esp+78h+var_78], ebx
		call	sub_62B9ED04
		movzx	ecx, byte ptr [ebx+5Dh]
		mov	edx, esi
		mov	eax, ebx
		call	sub_62B9EB60
		mov	[esp+78h+var_74], offset silc_client_command_reply_processed
		mov	eax, [ebp+arg_0]
		mov	[esp+78h+var_78], eax
		call	silc_fsm_next

loc_62BA15E6:				; CODE XREF: silc_client_command_reply_ban+232j
		xor	eax, eax
		add	esp, 6Ch
		pop	ebx
		pop	esi
		pop	edi
		leave
		retn
; ---------------------------------------------------------------------------

loc_62BA15F0:				; CODE XREF: silc_client_command_reply_ban+27j
		mov	[esp+78h+var_78], edx
		mov	[ebp+var_50], edx
		call	silc_argument_get_arg_num
		cmp	eax, 1
		mov	edx, [ebp+var_50]
		jbe	short loc_62BA1617
		mov	[esp+78h+var_78], edx
		call	silc_argument_get_arg_num
		cmp	eax, 3
		mov	edx, [ebp+var_50]
		jbe	loc_62BA1704

loc_62BA1617:				; CODE XREF: silc_client_command_reply_ban+A1j
		mov	[ebp+var_20], 0
		mov	[ebp+var_24], 0
		mov	al, [ebx+5Ch]
		test	al, al
		jnz	loc_62BA16DC
		mov	byte ptr [ebx+5Dh], 1Dh
		mov	byte ptr [ebx+5Ch], 1Dh
		xor	eax, eax
		xor	edx, edx

loc_62BA163C:				; CODE XREF: silc_client_command_reply_ban+19Fj
		mov	[esp+78h+var_70], edx
		mov	[esp+78h+var_74], eax
		mov	[esp+78h+var_78], ebx
		call	sub_62B9ED04
		mov	[esp+78h+var_74], offset silc_client_command_reply_processed
		mov	eax, [ebp+arg_0]
		mov	[esp+78h+var_78], eax
		call	silc_fsm_next
		xor	eax, eax
		add	esp, 6Ch
		pop	ebx
		pop	esi
		pop	edi
		leave
		retn
; ---------------------------------------------------------------------------
		align 4

loc_62BA166C:				; CODE XREF: silc_client_command_reply_ban+46j
		lea	ecx, [ebp+var_20]
		mov	[esp+78h+var_6C], ecx
		lea	ecx, [ebp+var_24]
		mov	[esp+78h+var_70], ecx
		mov	[esp+78h+var_74], edx
		movzx	eax, al
		mov	[esp+78h+var_78], eax
		call	silc_status_get_args
		mov	edx, [ebp+var_20]
		mov	eax, [ebp+var_24]
		jmp	loc_62BA15B6
; ---------------------------------------------------------------------------

loc_62BA1694:				; CODE XREF: silc_client_command_reply_ban+2Dj
		mov	ecx, [ebx+4]
		mov	ecx, [ecx+4Ch]
		mov	ecx, [ecx+18h]
		mov	ecx, [ecx+48h]
		mov	edi, [ecx]
		movzx	eax, al
		mov	[esp+78h+var_78], eax
		mov	[ebp+var_50], edx
		call	silc_get_status_message
		mov	ecx, [ebx+4]
		mov	[esp+78h+var_68], eax
		mov	[esp+78h+var_6C], offset aCannotSetBanS	; "Cannot set ban: %s"
		mov	[esp+78h+var_70], 3
		mov	[esp+78h+var_74], ecx
		mov	eax, [ecx+4Ch]
		mov	[esp+78h+var_78], eax
		call	edi
		mov	edx, [ebp+var_50]
		jmp	loc_62BA1593
; ---------------------------------------------------------------------------
		align 4

loc_62BA16DC:				; CODE XREF: silc_client_command_reply_ban+CAj
		lea	ecx, [ebp+var_24]
		mov	[esp+78h+var_6C], ecx
		lea	ecx, [ebp+var_20]
		mov	[esp+78h+var_70], ecx
		mov	[esp+78h+var_74], edx
		movzx	eax, al
		mov	[esp+78h+var_78], eax
		call	silc_status_get_args
		mov	edx, [ebp+var_24]
		mov	eax, [ebp+var_20]
		jmp	loc_62BA163C
; ---------------------------------------------------------------------------

loc_62BA1704:				; CODE XREF: silc_client_command_reply_ban+B1j
		mov	[esp+78h+var_68], 0
		lea	esi, [ebp+var_44]
		mov	[esp+78h+var_6C], esi
		mov	[esp+78h+var_70], 0
		mov	[esp+78h+var_74], 2
		mov	[esp+78h+var_78], edx
		mov	[ebp+var_50], edx
		call	silc_argument_get_decoded
		test	al, al
		mov	edx, [ebp+var_50]
		jnz	short loc_62BA1798
		mov	[ebp+var_24], 0
		mov	[ebp+var_20], 0
		mov	al, [ebx+5Ch]
		test	al, al
		jnz	loc_62BA1814
		mov	byte ptr [ebx+5Dh], 1Dh
		mov	byte ptr [ebx+5Ch], 1Dh
		xor	eax, eax
		xor	edx, edx

loc_62BA175A:				; CODE XREF: silc_client_command_reply_ban+2D7j
		mov	[esp+78h+var_70], edx
		mov	[esp+78h+var_74], eax
		mov	[esp+78h+var_78], ebx
		call	sub_62B9ED04
		xor	esi, esi

loc_62BA176C:				; CODE XREF: silc_client_command_reply_ban+2A1j
					; silc_client_command_reply_ban+2AFj ...
		mov	[esp+78h+var_70], esi
		mov	[esp+78h+var_74], edi
		mov	eax, [ebp+var_4C]
		mov	[esp+78h+var_78], eax
		call	silc_client_unref_channel
		mov	[esp+78h+var_74], offset silc_client_command_reply_processed
		mov	eax, [ebp+arg_0]
		mov	[esp+78h+var_78], eax
		call	silc_fsm_next
		jmp	loc_62BA15E6
; ---------------------------------------------------------------------------
		align 4

loc_62BA1798:				; CODE XREF: silc_client_command_reply_ban+1D3j
		mov	[esp+78h+var_70], esi
		mov	[esp+78h+var_74], edi
		mov	eax, [ebp+var_4C]
		mov	[esp+78h+var_78], eax
		mov	[ebp+var_50], edx
		call	silc_client_get_channel_by_id
		mov	esi, eax
		test	eax, eax
		mov	edx, [ebp+var_50]
		jz	loc_62BA183C
		lea	eax, [ebp+var_1C]
		mov	[esp+78h+var_70], eax
		mov	[esp+78h+var_74], 3
		mov	[esp+78h+var_78], edx
		call	silc_argument_get_arg_type
		test	eax, eax
		jz	loc_62BA1872
		mov	edx, [ebp+var_1C]
		mov	[esp+78h+var_74], edx
		mov	[esp+78h+var_78], eax
		call	silc_argument_list_parse
		mov	[esp+78h+var_70], eax
		mov	[esp+78h+var_74], esi
		mov	[esp+78h+var_78], ebx
		mov	[ebp+var_50], eax
		call	sub_62B9ED04
		mov	eax, [ebp+var_50]
		test	eax, eax
		jz	loc_62BA176C
		mov	[esp+78h+var_78], eax
		call	silc_argument_payload_free
		jmp	loc_62BA176C
; ---------------------------------------------------------------------------

loc_62BA1814:				; CODE XREF: silc_client_command_reply_ban+1E8j
		lea	ecx, [ebp+var_20]
		mov	[esp+78h+var_6C], ecx
		lea	ecx, [ebp+var_24]
		mov	[esp+78h+var_70], ecx
		mov	[esp+78h+var_74], edx
		movzx	eax, al
		mov	[esp+78h+var_78], eax
		call	silc_status_get_args
		mov	edx, [ebp+var_20]
		mov	eax, [ebp+var_24]
		jmp	loc_62BA175A
; ---------------------------------------------------------------------------

loc_62BA183C:				; CODE XREF: silc_client_command_reply_ban+255j
		mov	[ebp+var_20], 0
		mov	[ebp+var_24], 0
		mov	al, [ebx+5Ch]
		test	al, al
		jnz	short loc_62BA188B
		mov	byte ptr [ebx+5Dh], 1Dh
		mov	byte ptr [ebx+5Ch], 1Dh
		xor	edx, edx
		xor	eax, eax

loc_62BA185D:				; CODE XREF: silc_client_command_reply_ban+34Ej
		mov	[esp+78h+var_70], eax
		mov	[esp+78h+var_74], edx
		mov	[esp+78h+var_78], ebx
		call	sub_62B9ED04
		jmp	loc_62BA176C
; ---------------------------------------------------------------------------

loc_62BA1872:				; CODE XREF: silc_client_command_reply_ban+274j
		mov	[esp+78h+var_70], 0
		mov	[esp+78h+var_74], esi
		mov	[esp+78h+var_78], ebx
		call	sub_62B9ED04
		jmp	loc_62BA176C
; ---------------------------------------------------------------------------

loc_62BA188B:				; CODE XREF: silc_client_command_reply_ban+2EFj
		lea	ecx, [ebp+var_24]
		mov	[esp+78h+var_6C], ecx
		lea	ecx, [ebp+var_20]
		mov	[esp+78h+var_70], ecx
		mov	[esp+78h+var_74], edx
		movzx	eax, al
		mov	[esp+78h+var_78], eax
		call	silc_status_get_args
		mov	eax, [ebp+var_24]
		mov	edx, [ebp+var_20]
		jmp	short loc_62BA185D
silc_client_command_reply_ban endp

; Exported entry  56. silc_client_command_reply_invite

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public silc_client_command_reply_invite
silc_client_command_reply_invite proc near ; DATA XREF:	silc_client_commands_unregister+46Eo
					; silc_client_commands_register+2F8o ...

var_78		= dword	ptr -78h
var_74		= dword	ptr -74h
var_70		= dword	ptr -70h
var_6C		= dword	ptr -6Ch
var_68		= dword	ptr -68h
var_50		= dword	ptr -50h
var_4C		= dword	ptr -4Ch
var_44		= byte ptr -44h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		sub	esp, 6Ch
		mov	ebx, [ebp+arg_4]
		mov	esi, [ebp+arg_8]
		mov	edi, [ebx+4]
		mov	eax, [edi+4Ch]
		mov	[ebp+var_4C], eax
		mov	[esp+78h+var_78], esi
		call	silc_command_get_args
		mov	edx, eax
		mov	al, [ebx+5Dh]
		test	al, al
		jz	short loc_62BA1940
		test	byte ptr [ebx+64h], 2
		jnz	loc_62BA19E4

loc_62BA18E3:				; CODE XREF: silc_client_command_reply_invite+176j
		mov	[ebp+var_24], 0
		mov	[ebp+var_20], 0
		mov	al, [ebx+5Ch]
		test	al, al
		jnz	loc_62BA19BC
		mov	al, [ebx+5Dh]
		mov	[ebx+5Ch], al
		xor	eax, eax
		xor	edx, edx

loc_62BA1906:				; CODE XREF: silc_client_command_reply_invite+12Fj
		mov	[esp+78h+var_70], edx
		mov	[esp+78h+var_74], eax
		mov	[esp+78h+var_78], ebx
		call	sub_62B9ED04
		movzx	ecx, byte ptr [ebx+5Dh]
		mov	edx, esi
		mov	eax, ebx
		call	sub_62B9EB60
		mov	[esp+78h+var_74], offset silc_client_command_reply_processed
		mov	eax, [ebp+arg_0]
		mov	[esp+78h+var_78], eax
		call	silc_fsm_next

loc_62BA1936:				; CODE XREF: silc_client_command_reply_invite+232j
		xor	eax, eax
		add	esp, 6Ch
		pop	ebx
		pop	esi
		pop	edi
		leave
		retn
; ---------------------------------------------------------------------------

loc_62BA1940:				; CODE XREF: silc_client_command_reply_invite+27j
		mov	[esp+78h+var_78], edx
		mov	[ebp+var_50], edx
		call	silc_argument_get_arg_num
		cmp	eax, 1
		mov	edx, [ebp+var_50]
		jbe	short loc_62BA1967
		mov	[esp+78h+var_78], edx
		call	silc_argument_get_arg_num
		cmp	eax, 3
		mov	edx, [ebp+var_50]
		jbe	loc_62BA1A54

loc_62BA1967:				; CODE XREF: silc_client_command_reply_invite+A1j
		mov	[ebp+var_20], 0
		mov	[ebp+var_24], 0
		mov	al, [ebx+5Ch]
		test	al, al
		jnz	loc_62BA1A2C
		mov	byte ptr [ebx+5Dh], 1Dh
		mov	byte ptr [ebx+5Ch], 1Dh
		xor	eax, eax
		xor	edx, edx

loc_62BA198C:				; CODE XREF: silc_client_command_reply_invite+19Fj
		mov	[esp+78h+var_70], edx
		mov	[esp+78h+var_74], eax
		mov	[esp+78h+var_78], ebx
		call	sub_62B9ED04
		mov	[esp+78h+var_74], offset silc_client_command_reply_processed
		mov	eax, [ebp+arg_0]
		mov	[esp+78h+var_78], eax
		call	silc_fsm_next
		xor	eax, eax
		add	esp, 6Ch
		pop	ebx
		pop	esi
		pop	edi
		leave
		retn
; ---------------------------------------------------------------------------
		align 4

loc_62BA19BC:				; CODE XREF: silc_client_command_reply_invite+46j
		lea	ecx, [ebp+var_20]
		mov	[esp+78h+var_6C], ecx
		lea	ecx, [ebp+var_24]
		mov	[esp+78h+var_70], ecx
		mov	[esp+78h+var_74], edx
		movzx	eax, al
		mov	[esp+78h+var_78], eax
		call	silc_status_get_args
		mov	edx, [ebp+var_20]
		mov	eax, [ebp+var_24]
		jmp	loc_62BA1906
; ---------------------------------------------------------------------------

loc_62BA19E4:				; CODE XREF: silc_client_command_reply_invite+2Dj
		mov	ecx, [ebx+4]
		mov	ecx, [ecx+4Ch]
		mov	ecx, [ecx+18h]
		mov	ecx, [ecx+48h]
		mov	edi, [ecx]
		movzx	eax, al
		mov	[esp+78h+var_78], eax
		mov	[ebp+var_50], edx
		call	silc_get_status_message
		mov	ecx, [ebx+4]
		mov	[esp+78h+var_68], eax
		mov	[esp+78h+var_6C], offset aCannotInviteS	; "Cannot invite: %s"
		mov	[esp+78h+var_70], 3
		mov	[esp+78h+var_74], ecx
		mov	eax, [ecx+4Ch]
		mov	[esp+78h+var_78], eax
		call	edi
		mov	edx, [ebp+var_50]
		jmp	loc_62BA18E3
; ---------------------------------------------------------------------------
		align 4

loc_62BA1A2C:				; CODE XREF: silc_client_command_reply_invite+CAj
		lea	ecx, [ebp+var_24]
		mov	[esp+78h+var_6C], ecx
		lea	ecx, [ebp+var_20]
		mov	[esp+78h+var_70], ecx
		mov	[esp+78h+var_74], edx
		movzx	eax, al
		mov	[esp+78h+var_78], eax
		call	silc_status_get_args
		mov	edx, [ebp+var_24]
		mov	eax, [ebp+var_20]
		jmp	loc_62BA198C
; ---------------------------------------------------------------------------

loc_62BA1A54:				; CODE XREF: silc_client_command_reply_invite+B1j
		mov	[esp+78h+var_68], 0
		lea	esi, [ebp+var_44]
		mov	[esp+78h+var_6C], esi
		mov	[esp+78h+var_70], 0
		mov	[esp+78h+var_74], 2
		mov	[esp+78h+var_78], edx
		mov	[ebp+var_50], edx
		call	silc_argument_get_decoded
		test	al, al
		mov	edx, [ebp+var_50]
		jnz	short loc_62BA1AE8
		mov	[ebp+var_24], 0
		mov	[ebp+var_20], 0
		mov	al, [ebx+5Ch]
		test	al, al
		jnz	loc_62BA1B64
		mov	byte ptr [ebx+5Dh], 1Dh
		mov	byte ptr [ebx+5Ch], 1Dh
		xor	eax, eax
		xor	edx, edx

loc_62BA1AAA:				; CODE XREF: silc_client_command_reply_invite+2D7j
		mov	[esp+78h+var_70], edx
		mov	[esp+78h+var_74], eax
		mov	[esp+78h+var_78], ebx
		call	sub_62B9ED04
		xor	esi, esi

loc_62BA1ABC:				; CODE XREF: silc_client_command_reply_invite+2A1j
					; silc_client_command_reply_invite+2AFj ...
		mov	[esp+78h+var_70], esi
		mov	[esp+78h+var_74], edi
		mov	eax, [ebp+var_4C]
		mov	[esp+78h+var_78], eax
		call	silc_client_unref_channel
		mov	[esp+78h+var_74], offset silc_client_command_reply_processed
		mov	eax, [ebp+arg_0]
		mov	[esp+78h+var_78], eax
		call	silc_fsm_next
		jmp	loc_62BA1936
; ---------------------------------------------------------------------------
		align 4

loc_62BA1AE8:				; CODE XREF: silc_client_command_reply_invite+1D3j
		mov	[esp+78h+var_70], esi
		mov	[esp+78h+var_74], edi
		mov	eax, [ebp+var_4C]
		mov	[esp+78h+var_78], eax
		mov	[ebp+var_50], edx
		call	silc_client_get_channel_by_id
		mov	esi, eax
		test	eax, eax
		mov	edx, [ebp+var_50]
		jz	loc_62BA1B8C
		lea	eax, [ebp+var_1C]
		mov	[esp+78h+var_70], eax
		mov	[esp+78h+var_74], 3
		mov	[esp+78h+var_78], edx
		call	silc_argument_get_arg_type
		test	eax, eax
		jz	loc_62BA1BC2
		mov	edx, [ebp+var_1C]
		mov	[esp+78h+var_74], edx
		mov	[esp+78h+var_78], eax
		call	silc_argument_list_parse
		mov	[esp+78h+var_70], eax
		mov	[esp+78h+var_74], esi
		mov	[esp+78h+var_78], ebx
		mov	[ebp+var_50], eax
		call	sub_62B9ED04
		mov	eax, [ebp+var_50]
		test	eax, eax
		jz	loc_62BA1ABC
		mov	[esp+78h+var_78], eax
		call	silc_argument_payload_free
		jmp	loc_62BA1ABC
; ---------------------------------------------------------------------------

loc_62BA1B64:				; CODE XREF: silc_client_command_reply_invite+1E8j
		lea	ecx, [ebp+var_20]
		mov	[esp+78h+var_6C], ecx
		lea	ecx, [ebp+var_24]
		mov	[esp+78h+var_70], ecx
		mov	[esp+78h+var_74], edx
		movzx	eax, al
		mov	[esp+78h+var_78], eax
		call	silc_status_get_args
		mov	edx, [ebp+var_20]
		mov	eax, [ebp+var_24]
		jmp	loc_62BA1AAA
; ---------------------------------------------------------------------------

loc_62BA1B8C:				; CODE XREF: silc_client_command_reply_invite+255j
		mov	[ebp+var_20], 0
		mov	[ebp+var_24], 0
		mov	al, [ebx+5Ch]
		test	al, al
		jnz	short loc_62BA1BDB
		mov	byte ptr [ebx+5Dh], 1Dh
		mov	byte ptr [ebx+5Ch], 1Dh
		xor	edx, edx
		xor	eax, eax

loc_62BA1BAD:				; CODE XREF: silc_client_command_reply_invite+34Ej
		mov	[esp+78h+var_70], eax
		mov	[esp+78h+var_74], edx
		mov	[esp+78h+var_78], ebx
		call	sub_62B9ED04
		jmp	loc_62BA1ABC
; ---------------------------------------------------------------------------

loc_62BA1BC2:				; CODE XREF: silc_client_command_reply_invite+274j
		mov	[esp+78h+var_70], 0
		mov	[esp+78h+var_74], esi
		mov	[esp+78h+var_78], ebx
		call	sub_62B9ED04
		jmp	loc_62BA1ABC
; ---------------------------------------------------------------------------

loc_62BA1BDB:				; CODE XREF: silc_client_command_reply_invite+2EFj
		lea	ecx, [ebp+var_24]
		mov	[esp+78h+var_6C], ecx
		lea	ecx, [ebp+var_20]
		mov	[esp+78h+var_70], ecx
		mov	[esp+78h+var_74], edx
		movzx	eax, al
		mov	[esp+78h+var_78], eax
		call	silc_status_get_args
		mov	eax, [ebp+var_24]
		mov	edx, [ebp+var_20]
		jmp	short loc_62BA1BAD
silc_client_command_reply_invite endp

; Exported entry  52. silc_client_command_reply_detach

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public silc_client_command_reply_detach
silc_client_command_reply_detach proc near ; DATA XREF:	silc_client_commands_unregister+E0Eo
					; silc_client_commands_register+9B2o ...

var_58		= dword	ptr -58h
var_54		= dword	ptr -54h
var_50		= dword	ptr -50h
var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		sub	esp, 4Ch
		mov	ebx, [ebp+arg_4]
		mov	esi, [ebp+arg_8]
		mov	edi, [ebx+4]
		mov	eax, [edi+4Ch]
		mov	[ebp+var_2C], eax
		mov	[esp+58h+var_58], esi
		call	silc_command_get_args
		mov	edx, eax
		mov	al, [ebx+5Dh]
		test	al, al
		jz	short loc_62BA1C90
		test	byte ptr [ebx+64h], 2
		jnz	loc_62BA1D20

loc_62BA1C33:				; CODE XREF: silc_client_command_reply_detach+162j
		mov	[ebp+var_1C], 0
		mov	[ebp+var_20], 0
		mov	al, [ebx+5Ch]
		test	al, al
		jnz	loc_62BA1CF8
		mov	al, [ebx+5Dh]
		mov	[ebx+5Ch], al
		xor	eax, eax
		xor	edx, edx

loc_62BA1C56:				; CODE XREF: silc_client_command_reply_detach+11Bj
		mov	[esp+58h+var_50], edx
		mov	[esp+58h+var_54], eax
		mov	[esp+58h+var_58], ebx
		call	sub_62B9ED04
		movzx	ecx, byte ptr [ebx+5Dh]
		mov	edx, esi
		mov	eax, ebx
		call	sub_62B9EB60
		mov	[esp+58h+var_54], offset silc_client_command_reply_processed
		mov	eax, [ebp+arg_0]
		mov	[esp+58h+var_58], eax
		call	silc_fsm_next

loc_62BA1C86:				; CODE XREF: silc_client_command_reply_detach+1F0j
		xor	eax, eax
		add	esp, 4Ch
		pop	ebx
		pop	esi
		pop	edi
		leave
		retn
; ---------------------------------------------------------------------------

loc_62BA1C90:				; CODE XREF: silc_client_command_reply_detach+27j
		mov	[esp+58h+var_58], edx
		mov	[ebp+var_30], edx
		call	silc_argument_get_arg_num
		test	eax, eax
		mov	edx, [ebp+var_30]
		jnz	loc_62BA1D90

loc_62BA1CA6:				; CODE XREF: silc_client_command_reply_detach+19Ej
		mov	[ebp+var_20], 0
		mov	[ebp+var_1C], 0
		mov	al, [ebx+5Ch]
		test	al, al
		jnz	loc_62BA1D68
		mov	byte ptr [ebx+5Dh], 1Dh
		mov	byte ptr [ebx+5Ch], 1Dh
		xor	eax, eax
		xor	edx, edx

loc_62BA1CCB:				; CODE XREF: silc_client_command_reply_detach+18Bj
		mov	[esp+58h+var_50], edx
		mov	[esp+58h+var_54], eax
		mov	[esp+58h+var_58], ebx
		call	sub_62B9ED04
		mov	[esp+58h+var_54], offset silc_client_command_reply_processed
		mov	eax, [ebp+arg_0]
		mov	[esp+58h+var_58], eax
		call	silc_fsm_next
		xor	eax, eax
		add	esp, 4Ch
		pop	ebx
		pop	esi
		pop	edi
		leave
		retn
; ---------------------------------------------------------------------------

loc_62BA1CF8:				; CODE XREF: silc_client_command_reply_detach+46j
		lea	ecx, [ebp+var_20]
		mov	[esp+58h+var_4C], ecx
		lea	ecx, [ebp+var_1C]
		mov	[esp+58h+var_50], ecx
		mov	[esp+58h+var_54], edx
		movzx	eax, al
		mov	[esp+58h+var_58], eax
		call	silc_status_get_args
		mov	edx, [ebp+var_20]
		mov	eax, [ebp+var_1C]
		jmp	loc_62BA1C56
; ---------------------------------------------------------------------------

loc_62BA1D20:				; CODE XREF: silc_client_command_reply_detach+2Dj
		mov	ecx, [ebx+4]
		mov	ecx, [ecx+4Ch]
		mov	ecx, [ecx+18h]
		mov	ecx, [ecx+48h]
		mov	edi, [ecx]
		movzx	eax, al
		mov	[esp+58h+var_58], eax
		mov	[ebp+var_30], edx
		call	silc_get_status_message
		mov	ecx, [ebx+4]
		mov	[esp+58h+var_48], eax
		mov	[esp+58h+var_4C], offset aCannotDetachS	; "Cannot detach: %s"
		mov	[esp+58h+var_50], 3
		mov	[esp+58h+var_54], ecx
		mov	eax, [ecx+4Ch]
		mov	[esp+58h+var_58], eax
		call	edi
		mov	edx, [ebp+var_30]
		jmp	loc_62BA1C33
; ---------------------------------------------------------------------------
		align 4

loc_62BA1D68:				; CODE XREF: silc_client_command_reply_detach+B9j
		lea	ecx, [ebp+var_1C]
		mov	[esp+58h+var_4C], ecx
		lea	ecx, [ebp+var_20]
		mov	[esp+58h+var_50], ecx
		mov	[esp+58h+var_54], edx
		movzx	eax, al
		mov	[esp+58h+var_58], eax
		call	silc_status_get_args
		mov	edx, [ebp+var_1C]
		mov	eax, [ebp+var_20]
		jmp	loc_62BA1CCB
; ---------------------------------------------------------------------------

loc_62BA1D90:				; CODE XREF: silc_client_command_reply_detach+A0j
		mov	[esp+58h+var_58], edx
		call	silc_argument_get_arg_num
		cmp	eax, 1
		mov	edx, [ebp+var_30]
		ja	loc_62BA1CA6
		mov	[esp+58h+var_54], edi
		mov	eax, [ebp+var_2C]
		mov	[esp+58h+var_58], eax
		mov	[ebp+var_30], edx
		call	silc_client_get_detach_data
		mov	esi, eax
		test	eax, eax
		mov	edx, [ebp+var_30]
		jz	short loc_62BA1DF5
		mov	[esp+58h+var_54], eax
		mov	[esp+58h+var_58], ebx
		call	sub_62B9ED04
		mov	eax, [esi]
		mov	[esp+58h+var_58], eax
		call	silc_free
		mov	[esp+58h+var_58], esi
		call	silc_free

loc_62BA1DDD:				; CODE XREF: silc_client_command_reply_detach+226j
		mov	[esp+58h+var_54], offset silc_client_command_reply_processed
		mov	eax, [ebp+arg_0]
		mov	[esp+58h+var_58], eax
		call	silc_fsm_next
		jmp	loc_62BA1C86
; ---------------------------------------------------------------------------

loc_62BA1DF5:				; CODE XREF: silc_client_command_reply_detach+1BDj
		mov	[ebp+var_1C], 0
		mov	[ebp+var_20], 0
		mov	al, [ebx+5Ch]
		test	al, al
		jnz	short loc_62BA1E28
		mov	byte ptr [ebx+5Dh], 30h
		mov	byte ptr [ebx+5Ch], 30h
		xor	eax, eax
		xor	edx, edx

loc_62BA1E16:				; CODE XREF: silc_client_command_reply_detach+24Bj
		mov	[esp+58h+var_50], edx
		mov	[esp+58h+var_54], eax
		mov	[esp+58h+var_58], ebx
		call	sub_62B9ED04
		jmp	short loc_62BA1DDD
; ---------------------------------------------------------------------------

loc_62BA1E28:				; CODE XREF: silc_client_command_reply_detach+208j
		lea	ecx, [ebp+var_20]
		mov	[esp+58h+var_4C], ecx
		lea	ecx, [ebp+var_1C]
		mov	[esp+58h+var_50], ecx
		mov	[esp+58h+var_54], edx
		movzx	eax, al
		mov	[esp+58h+var_58], eax
		call	silc_status_get_args
		mov	edx, [ebp+var_20]
		mov	eax, [ebp+var_1C]
		jmp	short loc_62BA1E16
silc_client_command_reply_detach endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  51. silc_client_command_reply_cumode

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public silc_client_command_reply_cumode
silc_client_command_reply_cumode proc near ; DATA XREF:	silc_client_commands_unregister+BFEo
					; silc_client_commands_register+841o ...

var_98		= dword	ptr -98h
var_94		= dword	ptr -94h
var_90		= dword	ptr -90h
var_8C		= dword	ptr -8Ch
var_88		= dword	ptr -88h
var_6C		= dword	ptr -6Ch
var_68		= byte ptr -68h
var_53		= byte ptr -53h
var_52		= byte ptr -52h
var_51		= byte ptr -51h
var_50		= dword	ptr -50h
var_4C		= dword	ptr -4Ch
var_44		= byte ptr -44h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		sub	esp, 8Ch
		mov	ebx, [ebp+arg_4]
		mov	esi, [ebp+arg_8]
		mov	edi, [ebx+4]
		mov	eax, [edi+4Ch]
		mov	[ebp+var_4C], eax
		mov	[esp+98h+var_98], esi
		call	silc_command_get_args
		mov	edx, eax
		mov	al, [ebx+5Dh]
		test	al, al
		jz	short loc_62BA1EE8
		test	byte ptr [ebx+64h], 2
		jnz	loc_62BA1F7C

loc_62BA1E86:				; CODE XREF: silc_client_command_reply_cumode+16Ej
		mov	[ebp+var_20], 0
		mov	[ebp+var_24], 0
		mov	al, [ebx+5Ch]
		test	al, al
		jnz	loc_62BA1F54
		mov	al, [ebx+5Dh]
		mov	[ebx+5Ch], al
		xor	eax, eax
		xor	edx, edx

loc_62BA1EA9:				; CODE XREF: silc_client_command_reply_cumode+127j
		mov	[esp+98h+var_90], edx
		mov	[esp+98h+var_94], eax
		mov	[esp+98h+var_98], ebx
		call	sub_62B9ED04
		movzx	ecx, byte ptr [ebx+5Dh]
		mov	edx, esi
		mov	eax, ebx
		call	sub_62B9EB60
		mov	[esp+98h+var_94], offset silc_client_command_reply_processed
		mov	ecx, [ebp+arg_0]
		mov	[esp+98h+var_98], ecx
		call	silc_fsm_next

loc_62BA1ED9:				; CODE XREF: silc_client_command_reply_cumode+234j
		xor	eax, eax
		add	esp, 8Ch
		pop	ebx
		pop	esi
		pop	edi
		leave
		retn
; ---------------------------------------------------------------------------
		align 4

loc_62BA1EE8:				; CODE XREF: silc_client_command_reply_cumode+2Aj
		mov	[esp+98h+var_98], edx
		mov	[ebp+var_6C], edx
		call	silc_argument_get_arg_num
		cmp	eax, 3
		mov	edx, [ebp+var_6C]
		ja	loc_62BA1FEC

loc_62BA1EFF:				; CODE XREF: silc_client_command_reply_cumode+1AAj
		mov	[ebp+var_24], 0
		mov	[ebp+var_20], 0
		mov	al, [ebx+5Ch]
		test	al, al
		jnz	loc_62BA1FC4
		mov	byte ptr [ebx+5Dh], 1Dh
		mov	byte ptr [ebx+5Ch], 1Dh
		xor	eax, eax
		xor	edx, edx

loc_62BA1F24:				; CODE XREF: silc_client_command_reply_cumode+197j
		mov	[esp+98h+var_90], edx
		mov	[esp+98h+var_94], eax
		mov	[esp+98h+var_98], ebx
		call	sub_62B9ED04
		mov	[esp+98h+var_94], offset silc_client_command_reply_processed
		mov	eax, [ebp+arg_0]
		mov	[esp+98h+var_98], eax
		call	silc_fsm_next
		xor	eax, eax
		add	esp, 8Ch
		pop	ebx
		pop	esi
		pop	edi
		leave
		retn
; ---------------------------------------------------------------------------

loc_62BA1F54:				; CODE XREF: silc_client_command_reply_cumode+49j
		lea	ecx, [ebp+var_24]
		mov	[esp+98h+var_8C], ecx
		lea	ecx, [ebp+var_20]
		mov	[esp+98h+var_90], ecx
		mov	[esp+98h+var_94], edx
		movzx	eax, al
		mov	[esp+98h+var_98], eax
		call	silc_status_get_args
		mov	edx, [ebp+var_24]
		mov	eax, [ebp+var_20]
		jmp	loc_62BA1EA9
; ---------------------------------------------------------------------------

loc_62BA1F7C:				; CODE XREF: silc_client_command_reply_cumode+30j
		mov	ecx, [ebx+4]
		mov	ecx, [ecx+4Ch]
		mov	ecx, [ecx+18h]
		mov	ecx, [ecx+48h]
		mov	edi, [ecx]
		movzx	eax, al
		mov	[esp+98h+var_98], eax
		mov	[ebp+var_6C], edx
		call	silc_get_status_message
		mov	ecx, [ebx+4]
		mov	[esp+98h+var_88], eax
		mov	[esp+98h+var_8C], offset aCannotChangeMo ; "Cannot change mode:	%s"
		mov	[esp+98h+var_90], 3
		mov	[esp+98h+var_94], ecx
		mov	eax, [ecx+4Ch]
		mov	[esp+98h+var_98], eax
		call	edi
		mov	edx, [ebp+var_6C]
		jmp	loc_62BA1E86
; ---------------------------------------------------------------------------
		align 4

loc_62BA1FC4:				; CODE XREF: silc_client_command_reply_cumode+C2j
		lea	ecx, [ebp+var_20]
		mov	[esp+98h+var_8C], ecx
		lea	ecx, [ebp+var_24]
		mov	[esp+98h+var_90], ecx
		mov	[esp+98h+var_94], edx
		movzx	eax, al
		mov	[esp+98h+var_98], eax
		call	silc_status_get_args
		mov	edx, [ebp+var_20]
		mov	eax, [ebp+var_24]
		jmp	loc_62BA1F24
; ---------------------------------------------------------------------------

loc_62BA1FEC:				; CODE XREF: silc_client_command_reply_cumode+A9j
		mov	[esp+98h+var_98], edx
		call	silc_argument_get_arg_num
		cmp	eax, 4
		mov	edx, [ebp+var_6C]
		ja	loc_62BA1EFF
		lea	eax, [ebp+var_1C]
		mov	[esp+98h+var_90], eax
		mov	[esp+98h+var_94], 2
		mov	[esp+98h+var_98], edx
		mov	[ebp+var_6C], edx
		call	silc_argument_get_arg_type
		test	eax, eax
		mov	edx, [ebp+var_6C]
		jz	short loc_62BA202B
		cmp	[ebp+var_1C], 4
		jz	loc_62BA20AE

loc_62BA202B:				; CODE XREF: silc_client_command_reply_cumode+1CFj
		mov	[ebp+var_20], 0
		mov	[ebp+var_24], 0
		mov	al, [ebx+5Ch]
		test	al, al
		jnz	short loc_62BA2089

loc_62BA2040:				; CODE XREF: silc_client_command_reply_cumode+2B9j
		mov	byte ptr [ebx+5Dh], 1Dh
		mov	byte ptr [ebx+5Ch], 1Dh
		xor	eax, eax
		xor	edx, edx

loc_62BA204C:				; CODE XREF: silc_client_command_reply_cumode+25Cj
					; silc_client_command_reply_cumode+2E2j
		mov	[esp+98h+var_90], edx
		mov	[esp+98h+var_94], eax
		mov	[esp+98h+var_98], ebx
		call	sub_62B9ED04
		xor	esi, esi

loc_62BA205E:				; CODE XREF: silc_client_command_reply_cumode+371j
					; silc_client_command_reply_cumode+3ADj ...
		mov	[esp+98h+var_90], esi
		mov	[esp+98h+var_94], edi
		mov	eax, [ebp+var_4C]
		mov	[esp+98h+var_98], eax
		call	silc_client_unref_channel
		mov	[esp+98h+var_94], offset silc_client_command_reply_processed
		mov	ecx, [ebp+arg_0]
		mov	[esp+98h+var_98], ecx
		call	silc_fsm_next
		jmp	loc_62BA1ED9
; ---------------------------------------------------------------------------

loc_62BA2089:				; CODE XREF: silc_client_command_reply_cumode+1EEj
		lea	ecx, [ebp+var_24]
		mov	[esp+98h+var_8C], ecx
		lea	ecx, [ebp+var_20]
		mov	[esp+98h+var_90], ecx
		mov	[esp+98h+var_94], edx
		movzx	eax, al
		mov	[esp+98h+var_98], eax
		call	silc_status_get_args
		mov	edx, [ebp+var_24]
		mov	eax, [ebp+var_20]
		jmp	short loc_62BA204C
; ---------------------------------------------------------------------------

loc_62BA20AE:				; CODE XREF: silc_client_command_reply_cumode+1D5j
		mov	cl, [eax]
		mov	[ebp+var_68], cl
		mov	cl, [eax+1]
		mov	[ebp+var_53], cl
		mov	cl, [eax+2]
		mov	[ebp+var_52], cl
		mov	al, [eax+3]
		mov	[ebp+var_51], al
		mov	[esp+98h+var_88], 0
		lea	eax, [ebp+var_44]
		mov	[esp+98h+var_8C], eax
		mov	[esp+98h+var_90], 0
		mov	[esp+98h+var_94], 3
		mov	[esp+98h+var_98], edx
		mov	[ebp+var_6C], edx
		call	silc_argument_get_decoded
		test	al, al
		mov	edx, [ebp+var_6C]
		jnz	short loc_62BA2137
		mov	[ebp+var_24], 0
		mov	[ebp+var_20], 0
		mov	al, [ebx+5Ch]
		test	al, al
		jz	loc_62BA2040
		lea	ecx, [ebp+var_20]
		mov	[esp+98h+var_8C], ecx
		lea	ecx, [ebp+var_24]
		mov	[esp+98h+var_90], ecx
		mov	[esp+98h+var_94], edx
		movzx	eax, al
		mov	[esp+98h+var_98], eax
		call	silc_status_get_args
		mov	edx, [ebp+var_20]
		mov	eax, [ebp+var_24]
		jmp	loc_62BA204C
; ---------------------------------------------------------------------------

loc_62BA2137:				; CODE XREF: silc_client_command_reply_cumode+2A4j
		lea	ecx, [ebp+var_44]
		mov	[esp+98h+var_90], ecx
		mov	[esp+98h+var_94], edi
		mov	eax, [ebp+var_4C]
		mov	[esp+98h+var_98], eax
		mov	[ebp+var_6C], edx
		call	silc_client_get_channel_by_id
		mov	esi, eax
		test	eax, eax
		mov	edx, [ebp+var_6C]
		jz	short loc_62BA21C6
		mov	[esp+98h+var_88], 0
		lea	ecx, [ebp+var_44]
		mov	[esp+98h+var_8C], ecx
		mov	[esp+98h+var_90], 0
		mov	[esp+98h+var_94], 4
		mov	[esp+98h+var_98], edx
		mov	[ebp+var_6C], edx
		call	silc_argument_get_decoded
		test	al, al
		mov	edx, [ebp+var_6C]
		jnz	short loc_62BA2202
		mov	[ebp+var_24], 0
		mov	[ebp+var_20], 0
		mov	al, [ebx+5Ch]
		test	al, al
		jnz	loc_62BA22B3
		mov	byte ptr [ebx+5Dh], 1Dh
		mov	byte ptr [ebx+5Ch], 1Dh

loc_62BA21AB:				; CODE XREF: silc_client_command_reply_cumode+480j
		mov	eax, [ebp+var_20]
		mov	[esp+98h+var_90], eax
		mov	eax, [ebp+var_24]
		mov	[esp+98h+var_94], eax
		mov	[esp+98h+var_98], ebx
		call	sub_62B9ED04
		jmp	loc_62BA205E
; ---------------------------------------------------------------------------

loc_62BA21C6:				; CODE XREF: silc_client_command_reply_cumode+307j
					; silc_client_command_reply_cumode+3D3j
		mov	[ebp+var_20], 0
		mov	[ebp+var_24], 0
		mov	al, [ebx+5Ch]
		test	al, al
		jnz	loc_62BA22D5
		mov	byte ptr [ebx+5Dh], 1Dh
		mov	byte ptr [ebx+5Ch], 1Dh

loc_62BA21E7:				; CODE XREF: silc_client_command_reply_cumode+4A2j
		mov	eax, [ebp+var_24]
		mov	[esp+98h+var_90], eax
		mov	eax, [ebp+var_20]
		mov	[esp+98h+var_94], eax
		mov	[esp+98h+var_98], ebx
		call	sub_62B9ED04
		jmp	loc_62BA205E
; ---------------------------------------------------------------------------

loc_62BA2202:				; CODE XREF: silc_client_command_reply_cumode+338j
		lea	eax, [ebp+var_44]
		mov	[esp+98h+var_90], eax
		mov	[esp+98h+var_94], edi
		mov	ecx, [ebp+var_4C]
		mov	[esp+98h+var_98], ecx
		mov	[ebp+var_6C], edx
		call	silc_client_get_client_by_id
		mov	[ebp+var_50], eax
		test	eax, eax
		mov	edx, [ebp+var_6C]
		jz	short loc_62BA21C6
		movzx	edx, [ebp+var_51]
		mov	al, [ebp+var_68]
		shl	eax, 18h
		or	edx, eax
		movzx	eax, [ebp+var_53]
		shl	eax, 10h
		or	edx, eax
		movzx	eax, [ebp+var_52]
		shl	eax, 8
		or	edx, eax
		mov	eax, [esi+144h]
		mov	[esp+98h+var_98], eax
		mov	[ebp+var_6C], edx
		call	silc_rwlock_wrlock
		mov	eax, [ebp+var_50]
		mov	[esp+98h+var_94], eax
		mov	[esp+98h+var_98], esi
		call	silc_client_on_channel
		test	eax, eax
		mov	edx, [ebp+var_6C]
		jz	short loc_62BA226D
		mov	[eax+4], edx

loc_62BA226D:				; CODE XREF: silc_client_command_reply_cumode+418j
		mov	eax, [esi+144h]
		mov	[esp+98h+var_98], eax
		mov	[ebp+var_6C], edx
		call	silc_rwlock_unlock
		mov	ecx, [ebp+var_50]
		mov	[esp+98h+var_8C], ecx
		mov	[esp+98h+var_90], esi
		mov	edx, [ebp+var_6C]
		mov	[esp+98h+var_94], edx
		mov	[esp+98h+var_98], ebx
		call	sub_62B9ED04
		mov	eax, [ebp+var_50]
		mov	[esp+98h+var_90], eax
		mov	[esp+98h+var_94], edi
		mov	ecx, [ebp+var_4C]
		mov	[esp+98h+var_98], ecx
		call	silc_client_unref_client
		jmp	loc_62BA205E
; ---------------------------------------------------------------------------

loc_62BA22B3:				; CODE XREF: silc_client_command_reply_cumode+34Dj
		lea	ecx, [ebp+var_20]
		mov	[esp+98h+var_8C], ecx
		lea	ecx, [ebp+var_24]
		mov	[esp+98h+var_90], ecx
		mov	[esp+98h+var_94], edx
		movzx	eax, al
		mov	[esp+98h+var_98], eax
		call	silc_status_get_args
		jmp	loc_62BA21AB
; ---------------------------------------------------------------------------

loc_62BA22D5:				; CODE XREF: silc_client_command_reply_cumode+389j
		lea	ecx, [ebp+var_24]
		mov	[esp+98h+var_8C], ecx
		lea	ecx, [ebp+var_20]
		mov	[esp+98h+var_90], ecx
		mov	[esp+98h+var_94], edx
		movzx	eax, al
		mov	[esp+98h+var_98], eax
		call	silc_status_get_args
		jmp	loc_62BA21E7
silc_client_command_reply_cumode endp

; ---------------------------------------------------------------------------
		align 4
; Exported entry  50. silc_client_command_reply_cmode

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public silc_client_command_reply_cmode
silc_client_command_reply_cmode	proc near ; DATA XREF: silc_client_commands_unregister+B4Eo
					; silc_client_commands_register+7C6o ...

var_78		= dword	ptr -78h
var_74		= dword	ptr -74h
var_70		= dword	ptr -70h
var_6C		= dword	ptr -6Ch
var_68		= dword	ptr -68h
var_64		= dword	ptr -64h
var_58		= dword	ptr -58h
var_54		= dword	ptr -54h
var_50		= dword	ptr -50h
var_4C		= dword	ptr -4Ch
var_48		= byte ptr -48h
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		sub	esp, 6Ch
		mov	ebx, [ebp+arg_4]
		mov	esi, [ebp+arg_8]
		mov	edi, [ebx+4]
		mov	eax, [edi+4Ch]
		mov	[ebp+var_4C], eax
		mov	[esp+78h+var_78], esi
		call	silc_command_get_args
		mov	edx, eax
		mov	[ebp+var_20], 0
		mov	al, [ebx+5Dh]
		test	al, al
		jz	short loc_62BA2390
		test	byte ptr [ebx+64h], 2
		jnz	loc_62BA2424

loc_62BA2332:				; CODE XREF: silc_client_command_reply_cmode+16Ej
		mov	[ebp+var_24], 0
		mov	[ebp+var_28], 0
		mov	al, [ebx+5Ch]
		test	al, al
		jnz	loc_62BA23FC
		mov	al, [ebx+5Dh]
		mov	[ebx+5Ch], al
		xor	eax, eax
		xor	edx, edx

loc_62BA2355:				; CODE XREF: silc_client_command_reply_cmode+127j
		mov	[esp+78h+var_70], edx
		mov	[esp+78h+var_74], eax
		mov	[esp+78h+var_78], ebx
		call	sub_62B9ED04
		movzx	ecx, byte ptr [ebx+5Dh]
		mov	edx, esi
		mov	eax, ebx
		call	sub_62B9EB60
		mov	[esp+78h+var_74], offset silc_client_command_reply_processed
		mov	eax, [ebp+arg_0]
		mov	[esp+78h+var_78], eax
		call	silc_fsm_next

loc_62BA2385:				; CODE XREF: silc_client_command_reply_cmode+24Dj
		xor	eax, eax
		add	esp, 6Ch
		pop	ebx
		pop	esi
		pop	edi
		leave
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_62BA2390:				; CODE XREF: silc_client_command_reply_cmode+2Ej
		mov	[esp+78h+var_78], edx
		mov	[ebp+var_58], edx
		call	silc_argument_get_arg_num
		cmp	eax, 2
		mov	edx, [ebp+var_58]
		ja	loc_62BA2494

loc_62BA23A7:				; CODE XREF: silc_client_command_reply_cmode+1AAj
		mov	[ebp+var_28], 0
		mov	[ebp+var_24], 0
		mov	al, [ebx+5Ch]
		test	al, al
		jnz	loc_62BA246C
		mov	byte ptr [ebx+5Dh], 1Dh
		mov	byte ptr [ebx+5Ch], 1Dh
		xor	eax, eax
		xor	edx, edx

loc_62BA23CC:				; CODE XREF: silc_client_command_reply_cmode+197j
		mov	[esp+78h+var_70], edx
		mov	[esp+78h+var_74], eax
		mov	[esp+78h+var_78], ebx
		call	sub_62B9ED04
		mov	[esp+78h+var_74], offset silc_client_command_reply_processed
		mov	eax, [ebp+arg_0]
		mov	[esp+78h+var_78], eax
		call	silc_fsm_next
		xor	eax, eax
		add	esp, 6Ch
		pop	ebx
		pop	esi
		pop	edi
		leave
		retn
; ---------------------------------------------------------------------------
		align 4

loc_62BA23FC:				; CODE XREF: silc_client_command_reply_cmode+4Dj
		lea	ecx, [ebp+var_28]
		mov	[esp+78h+var_6C], ecx
		lea	ecx, [ebp+var_24]
		mov	[esp+78h+var_70], ecx
		mov	[esp+78h+var_74], edx
		movzx	eax, al
		mov	[esp+78h+var_78], eax
		call	silc_status_get_args
		mov	edx, [ebp+var_28]
		mov	eax, [ebp+var_24]
		jmp	loc_62BA2355
; ---------------------------------------------------------------------------

loc_62BA2424:				; CODE XREF: silc_client_command_reply_cmode+34j
		mov	ecx, [ebx+4]
		mov	ecx, [ecx+4Ch]
		mov	ecx, [ecx+18h]
		mov	ecx, [ecx+48h]
		mov	edi, [ecx]
		movzx	eax, al
		mov	[esp+78h+var_78], eax
		mov	[ebp+var_58], edx
		call	silc_get_status_message
		mov	ecx, [ebx+4]
		mov	[esp+78h+var_68], eax
		mov	[esp+78h+var_6C], offset aCannotChangeMo ; "Cannot change mode:	%s"
		mov	[esp+78h+var_70], 3
		mov	[esp+78h+var_74], ecx
		mov	eax, [ecx+4Ch]
		mov	[esp+78h+var_78], eax
		call	edi
		mov	edx, [ebp+var_58]
		jmp	loc_62BA2332
; ---------------------------------------------------------------------------
		align 4

loc_62BA246C:				; CODE XREF: silc_client_command_reply_cmode+C2j
		lea	ecx, [ebp+var_24]
		mov	[esp+78h+var_6C], ecx
		lea	ecx, [ebp+var_28]
		mov	[esp+78h+var_70], ecx
		mov	[esp+78h+var_74], edx
		movzx	eax, al
		mov	[esp+78h+var_78], eax
		call	silc_status_get_args
		mov	edx, [ebp+var_24]
		mov	eax, [ebp+var_28]
		jmp	loc_62BA23CC
; ---------------------------------------------------------------------------

loc_62BA2494:				; CODE XREF: silc_client_command_reply_cmode+A9j
		mov	[esp+78h+var_78], edx
		call	silc_argument_get_arg_num
		cmp	eax, 6
		mov	edx, [ebp+var_58]
		ja	loc_62BA23A7
		mov	[esp+78h+var_68], 0
		lea	esi, [ebp+var_48]
		mov	[esp+78h+var_6C], esi
		mov	[esp+78h+var_70], 0
		mov	[esp+78h+var_74], 2
		mov	[esp+78h+var_78], edx
		mov	[ebp+var_58], edx
		call	silc_argument_get_decoded
		test	al, al
		mov	edx, [ebp+var_58]
		jnz	short loc_62BA254A
		mov	[ebp+var_24], 0
		mov	[ebp+var_28], 0
		mov	al, [ebx+5Ch]
		test	al, al
		jnz	loc_62BA260F
		mov	byte ptr [ebx+5Dh], 1Dh
		mov	byte ptr [ebx+5Ch], 1Dh
		xor	eax, eax
		xor	edx, edx

loc_62BA24FE:				; CODE XREF: silc_client_command_reply_cmode+33Aj
		mov	[esp+78h+var_70], edx
		mov	[esp+78h+var_74], eax
		mov	[esp+78h+var_78], ebx
		call	sub_62B9ED04
		xor	esi, esi

loc_62BA2510:				; CODE XREF: silc_client_command_reply_cmode+312j
					; silc_client_command_reply_cmode+376j	...
		mov	[esp+78h+var_70], esi
		mov	[esp+78h+var_74], edi
		mov	eax, [ebp+var_4C]
		mov	[esp+78h+var_78], eax
		call	silc_client_unref_channel
		mov	eax, [ebp+var_20]
		test	eax, eax
		jz	short loc_62BA2532
		mov	[esp+78h+var_78], eax
		call	silc_pkcs_public_key_free

loc_62BA2532:				; CODE XREF: silc_client_command_reply_cmode+230j
		mov	[esp+78h+var_74], offset silc_client_command_reply_processed
		mov	eax, [ebp+arg_0]
		mov	[esp+78h+var_78], eax
		call	silc_fsm_next
		jmp	loc_62BA2385
; ---------------------------------------------------------------------------

loc_62BA254A:				; CODE XREF: silc_client_command_reply_cmode+1DFj
		mov	[esp+78h+var_70], esi
		mov	[esp+78h+var_74], edi
		mov	eax, [ebp+var_4C]
		mov	[esp+78h+var_78], eax
		mov	[ebp+var_58], edx
		call	silc_client_get_channel_by_id
		mov	esi, eax
		test	eax, eax
		mov	edx, [ebp+var_58]
		jz	loc_62BA2637
		lea	eax, [ebp+var_1C]
		mov	[esp+78h+var_70], eax
		mov	[esp+78h+var_74], 4
		mov	[esp+78h+var_78], edx
		mov	[ebp+var_58], edx
		call	silc_argument_get_arg_type
		test	eax, eax
		mov	edx, [ebp+var_58]
		jz	short loc_62BA25A7
		lea	ecx, [ebp+var_20]
		mov	[esp+78h+var_70], ecx
		mov	ecx, [ebp+var_1C]
		mov	[esp+78h+var_74], ecx
		mov	[esp+78h+var_78], eax
		call	silc_public_key_payload_decode
		mov	edx, [ebp+var_58]

loc_62BA25A7:				; CODE XREF: silc_client_command_reply_cmode+294j
		lea	eax, [ebp+var_1C]
		mov	[esp+78h+var_70], eax
		mov	[esp+78h+var_74], 3
		mov	[esp+78h+var_78], edx
		mov	[ebp+var_58], edx
		call	silc_argument_get_arg_type
		mov	ecx, eax
		test	eax, eax
		mov	edx, [ebp+var_58]
		jz	short loc_62BA25D4
		cmp	[ebp+var_1C], 4
		jz	loc_62BA2698

loc_62BA25D4:				; CODE XREF: silc_client_command_reply_cmode+2D0j
		mov	[ebp+var_24], 0
		mov	[ebp+var_28], 0
		mov	al, [ebx+5Ch]
		test	al, al
		jnz	loc_62BA2673
		mov	byte ptr [ebx+5Dh], 1Dh
		mov	byte ptr [ebx+5Ch], 1Dh
		xor	eax, eax

loc_62BA25F7:				; CODE XREF: silc_client_command_reply_cmode+39Bj
		mov	[esp+78h+var_70], eax
		mov	eax, [ebp+var_24]
		mov	[esp+78h+var_74], eax
		mov	[esp+78h+var_78], ebx
		call	sub_62B9ED04
		jmp	loc_62BA2510
; ---------------------------------------------------------------------------

loc_62BA260F:				; CODE XREF: silc_client_command_reply_cmode+1F4j
		lea	ecx, [ebp+var_28]
		mov	[esp+78h+var_6C], ecx
		lea	ecx, [ebp+var_24]
		mov	[esp+78h+var_70], ecx
		mov	[esp+78h+var_74], edx
		movzx	eax, al
		mov	[esp+78h+var_78], eax
		call	silc_status_get_args
		mov	edx, [ebp+var_28]
		mov	eax, [ebp+var_24]
		jmp	loc_62BA24FE
; ---------------------------------------------------------------------------

loc_62BA2637:				; CODE XREF: silc_client_command_reply_cmode+26Fj
		mov	[ebp+var_28], 0
		mov	[ebp+var_24], 0
		mov	al, [ebx+5Ch]
		test	al, al
		jnz	loc_62BA2791
		mov	byte ptr [ebx+5Dh], 1Dh
		mov	byte ptr [ebx+5Ch], 1Dh

loc_62BA2658:				; CODE XREF: silc_client_command_reply_cmode+4B6j
		mov	eax, [ebp+var_24]
		mov	[esp+78h+var_70], eax
		mov	eax, [ebp+var_28]
		mov	[esp+78h+var_74], eax
		mov	[esp+78h+var_78], ebx
		call	sub_62B9ED04
		jmp	loc_62BA2510
; ---------------------------------------------------------------------------

loc_62BA2673:				; CODE XREF: silc_client_command_reply_cmode+2EFj
		lea	ecx, [ebp+var_28]
		mov	[esp+78h+var_6C], ecx
		lea	ecx, [ebp+var_24]
		mov	[esp+78h+var_70], ecx
		mov	[esp+78h+var_74], edx
		movzx	eax, al
		mov	[esp+78h+var_78], eax
		call	silc_status_get_args
		mov	eax, [ebp+var_28]
		jmp	loc_62BA25F7
; ---------------------------------------------------------------------------

loc_62BA2698:				; CODE XREF: silc_client_command_reply_cmode+2D6j
		movzx	eax, byte ptr [eax+3]
		mov	[ebp+var_50], eax
		movzx	eax, byte ptr [ecx]
		shl	eax, 18h
		or	[ebp+var_50], eax
		movzx	eax, byte ptr [ecx+1]
		shl	eax, 10h
		or	[ebp+var_50], eax
		movzx	eax, byte ptr [ecx+2]
		shl	eax, 8
		or	[ebp+var_50], eax
		mov	eax, [esi+144h]
		mov	[esp+78h+var_78], eax
		mov	[ebp+var_58], edx
		call	silc_rwlock_wrlock
		lea	eax, [ebp+var_1C]
		mov	[esp+78h+var_70], eax
		mov	[esp+78h+var_74], 6
		mov	edx, [ebp+var_58]
		mov	[esp+78h+var_78], edx
		call	silc_argument_get_arg_type
		mov	ecx, eax
		test	eax, eax
		mov	edx, [ebp+var_58]
		jz	short loc_62BA26FA
		cmp	[ebp+var_1C], 4
		jz	loc_62BA27E1

loc_62BA26FA:				; CODE XREF: silc_client_command_reply_cmode+3F6j
					; silc_client_command_reply_cmode+516j
		test	byte ptr [esi+12Ch], 20h
		jnz	short loc_62BA270D
		mov	dword ptr [esi+130h], 0

loc_62BA270D:				; CODE XREF: silc_client_command_reply_cmode+409j
		lea	eax, [ebp+var_1C]
		mov	[esp+78h+var_70], eax
		mov	[esp+78h+var_74], 5
		mov	[esp+78h+var_78], edx
		call	silc_argument_get_arg_type
		test	eax, eax
		jz	loc_62BA27B3
		mov	[esp+78h+var_6C], 0
		mov	edx, [ebp+var_1C]
		mov	[esp+78h+var_70], edx
		mov	[esp+78h+var_74], eax
		mov	[esp+78h+var_78], esi
		call	silc_client_channel_save_public_keys

loc_62BA2747:				; CODE XREF: silc_client_command_reply_cmode+4C2j
					; silc_client_command_reply_cmode+4E4j
		mov	eax, [ebp+var_50]
		mov	[esi+12Ch], eax
		mov	eax, [esi+144h]
		mov	[esp+78h+var_78], eax
		call	silc_rwlock_unlock
		mov	eax, [esi+130h]
		mov	[esp+78h+var_64], eax
		mov	eax, [esi+110h]
		mov	[esp+78h+var_68], eax
		mov	eax, [ebp+var_20]
		mov	[esp+78h+var_6C], eax
		mov	eax, [ebp+var_50]
		mov	[esp+78h+var_70], eax
		mov	[esp+78h+var_74], esi
		mov	[esp+78h+var_78], ebx
		call	sub_62B9ED04
		jmp	loc_62BA2510
; ---------------------------------------------------------------------------

loc_62BA2791:				; CODE XREF: silc_client_command_reply_cmode+352j
		lea	ecx, [ebp+var_24]
		mov	[esp+78h+var_6C], ecx
		lea	ecx, [ebp+var_28]
		mov	[esp+78h+var_70], ecx
		mov	[esp+78h+var_74], edx
		movzx	eax, al
		mov	[esp+78h+var_78], eax
		call	silc_status_get_args
		jmp	loc_62BA2658
; ---------------------------------------------------------------------------

loc_62BA27B3:				; CODE XREF: silc_client_command_reply_cmode+42Ej
		test	byte ptr [esi+12Dh], 10h
		jz	short loc_62BA2747
		mov	[esp+78h+var_6C], 1
		mov	[esp+78h+var_70], 0
		mov	[esp+78h+var_74], 0
		mov	[esp+78h+var_78], esi
		call	silc_client_channel_save_public_keys
		jmp	loc_62BA2747
; ---------------------------------------------------------------------------

loc_62BA27E1:				; CODE XREF: silc_client_command_reply_cmode+3FCj
		movzx	eax, byte ptr [eax+3]
		mov	[ebp+var_54], eax
		movzx	eax, byte ptr [ecx]
		shl	eax, 18h
		or	[ebp+var_54], eax
		movzx	eax, byte ptr [ecx+1]
		shl	eax, 10h
		or	[ebp+var_54], eax
		movzx	eax, byte ptr [ecx+2]
		shl	eax, 8
		or	[ebp+var_54], eax
		mov	eax, [ebp+var_54]
		mov	[esi+130h], eax
		jmp	loc_62BA26FA
silc_client_command_reply_cmode	endp

; ---------------------------------------------------------------------------
		align 4
; Exported entry  62. silc_client_command_reply_motd

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public silc_client_command_reply_motd
silc_client_command_reply_motd proc near ; DATA	XREF: silc_client_commands_unregister+9EEo
					; silc_client_commands_register+6D0o ...

var_178		= dword	ptr -178h
var_174		= dword	ptr -174h
var_170		= dword	ptr -170h
var_16C		= dword	ptr -16Ch
var_168		= dword	ptr -168h
var_14C		= dword	ptr -14Ch
var_13C		= dword	ptr -13Ch
var_138		= dword	ptr -138h
var_134		= dword	ptr -134h
var_130		= dword	ptr -130h
var_12C		= dword	ptr -12Ch
var_120		= byte ptr -120h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		sub	esp, 16Ch
		mov	ebx, [ebp+arg_4]
		mov	edi, [ebp+arg_8]
		mov	esi, [ebx+4]
		mov	eax, [esi+4Ch]
		mov	[ebp+var_12C], eax
		mov	[esp+178h+var_178], edi
		call	silc_command_get_args
		mov	edx, eax
		mov	al, [ebx+5Dh]
		test	al, al
		jz	short loc_62BA28B0
		test	byte ptr [ebx+64h], 2
		jnz	loc_62BA2960

loc_62BA284D:				; CODE XREF: silc_client_command_reply_motd+194j
		mov	[ebp+var_1C], 0
		mov	[ebp+var_20], 0
		mov	al, [ebx+5Ch]
		test	al, al
		jnz	loc_62BA2938
		mov	al, [ebx+5Dh]
		mov	[ebx+5Ch], al
		xor	eax, eax
		xor	edx, edx

loc_62BA2870:				; CODE XREF: silc_client_command_reply_motd+147j
		mov	[esp+178h+var_170], edx
		mov	[esp+178h+var_174], eax
		mov	[esp+178h+var_178], ebx
		call	sub_62B9ED04
		movzx	ecx, byte ptr [ebx+5Dh]
		mov	edx, edi
		mov	eax, ebx
		call	sub_62B9EB60
		mov	[esp+178h+var_174], offset silc_client_command_reply_processed
		mov	edx, [ebp+arg_0]
		mov	[esp+178h+var_178], edx
		call	silc_fsm_next

loc_62BA28A0:				; CODE XREF: silc_client_command_reply_motd+20Cj
		xor	eax, eax
		add	esp, 16Ch
		pop	ebx
		pop	esi
		pop	edi
		leave
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_62BA28B0:				; CODE XREF: silc_client_command_reply_motd+2Dj
		mov	[esp+178h+var_178], edx
		mov	[ebp+var_13C], edx
		call	silc_argument_get_arg_num
		cmp	eax, 1
		mov	edx, [ebp+var_13C]
		jbe	short loc_62BA28E0
		mov	[esp+178h+var_178], edx
		call	silc_argument_get_arg_num
		cmp	eax, 3
		mov	edx, [ebp+var_13C]
		jbe	loc_62BA29D8

loc_62BA28E0:				; CODE XREF: silc_client_command_reply_motd+B3j
		mov	[ebp+var_20], 0
		mov	[ebp+var_1C], 0
		mov	al, [ebx+5Ch]
		test	al, al
		jnz	loc_62BA29B0
		mov	byte ptr [ebx+5Dh], 1Dh
		mov	byte ptr [ebx+5Ch], 1Dh
		xor	eax, eax
		xor	edx, edx

loc_62BA2905:				; CODE XREF: silc_client_command_reply_motd+1BFj
		mov	[esp+178h+var_170], edx
		mov	[esp+178h+var_174], eax
		mov	[esp+178h+var_178], ebx
		call	sub_62B9ED04
		mov	[esp+178h+var_174], offset silc_client_command_reply_processed
		mov	eax, [ebp+arg_0]
		mov	[esp+178h+var_178], eax
		call	silc_fsm_next
		xor	eax, eax
		add	esp, 16Ch
		pop	ebx
		pop	esi
		pop	edi
		leave
		retn
; ---------------------------------------------------------------------------
		align 4

loc_62BA2938:				; CODE XREF: silc_client_command_reply_motd+4Cj
		lea	ecx, [ebp+var_20]
		mov	[esp+178h+var_16C], ecx
		lea	ecx, [ebp+var_1C]
		mov	[esp+178h+var_170], ecx
		mov	[esp+178h+var_174], edx
		movzx	eax, al
		mov	[esp+178h+var_178], eax
		call	silc_status_get_args
		mov	edx, [ebp+var_20]
		mov	eax, [ebp+var_1C]
		jmp	loc_62BA2870
; ---------------------------------------------------------------------------

loc_62BA2960:				; CODE XREF: silc_client_command_reply_motd+33j
		mov	ecx, [ebx+4]
		mov	ecx, [ecx+4Ch]
		mov	ecx, [ecx+18h]
		mov	ecx, [ecx+48h]
		mov	esi, [ecx]
		movzx	eax, al
		mov	[esp+178h+var_178], eax
		mov	[ebp+var_13C], edx
		call	silc_get_status_message
		mov	ecx, [ebx+4]
		mov	[esp+178h+var_168], eax
		mov	[esp+178h+var_16C], offset aCannotGetMotdS ; "Cannot get motd: %s"
		mov	[esp+178h+var_170], 3
		mov	[esp+178h+var_174], ecx
		mov	eax, [ecx+4Ch]
		mov	[esp+178h+var_178], eax
		call	esi
		mov	edx, [ebp+var_13C]
		jmp	loc_62BA284D
; ---------------------------------------------------------------------------
		align 10h

loc_62BA29B0:				; CODE XREF: silc_client_command_reply_motd+DFj
		lea	ecx, [ebp+var_1C]
		mov	[esp+178h+var_16C], ecx
		lea	ecx, [ebp+var_20]
		mov	[esp+178h+var_170], ecx
		mov	[esp+178h+var_174], edx
		movzx	eax, al
		mov	[esp+178h+var_178], eax
		call	silc_status_get_args
		mov	edx, [ebp+var_1C]
		mov	eax, [ebp+var_20]
		jmp	loc_62BA2905
; ---------------------------------------------------------------------------

loc_62BA29D8:				; CODE XREF: silc_client_command_reply_motd+C6j
		mov	[esp+178h+var_178], edx
		mov	[ebp+var_13C], edx
		call	silc_argument_get_arg_num
		cmp	eax, 3
		mov	edx, [ebp+var_13C]
		jz	short loc_62BA2A28
		mov	[ebp+var_130], 0

loc_62BA29FB:				; CODE XREF: silc_client_command_reply_motd+2BFj
		mov	eax, [ebp+var_130]
		mov	[esp+178h+var_174], eax
		mov	[esp+178h+var_178], ebx
		call	sub_62B9ED04

loc_62BA2A0D:				; CODE XREF: silc_client_command_reply_motd+33Bj
		mov	[esp+178h+var_174], offset silc_client_command_reply_processed
		mov	edx, [ebp+arg_0]
		mov	[esp+178h+var_178], edx
		call	silc_fsm_next
		jmp	loc_62BA28A0
; ---------------------------------------------------------------------------
		align 4

loc_62BA2A28:				; CODE XREF: silc_client_command_reply_motd+1DBj
		mov	[esp+178h+var_170], 0
		mov	[esp+178h+var_174], 3
		mov	[esp+178h+var_178], edx
		mov	[ebp+var_13C], edx
		call	silc_argument_get_arg_type
		mov	[ebp+var_130], eax
		test	eax, eax
		mov	edx, [ebp+var_13C]
		jz	loc_62BA2B1E
		lea	edx, [ebp+var_120]
		mov	[ebp+var_14C], edx
		mov	[ebp+var_138], esi
		mov	esi, eax
		mov	[ebp+var_134], ebx

loc_62BA2A74:				; CODE XREF: silc_client_command_reply_motd+2B7j
		xor	edx, edx
		jmp	short loc_62BA2A7A
; ---------------------------------------------------------------------------

loc_62BA2A78:				; CODE XREF: silc_client_command_reply_motd+272j
		mov	edx, ebx

loc_62BA2A7A:				; CODE XREF: silc_client_command_reply_motd+262j
		mov	al, [esi+edx]
		test	al, al
		jz	short loc_62BA2ACD
		lea	ebx, [edx+1]
		cmp	al, 0Ah
		jnz	short loc_62BA2A78
		mov	ecx, 100h
		xor	eax, eax
		mov	edi, [ebp+var_14C]
		rep stosb
		mov	[esp+178h+var_16C], edx
		mov	[esp+178h+var_170], esi
		mov	[esp+178h+var_174], 100h
		lea	eax, [ebp+var_120]
		mov	[esp+178h+var_178], eax
		call	silc_strncat
		add	esi, ebx
		cmp	ebx, 2
		jz	short loc_62BA2B15

loc_62BA2ABC:				; CODE XREF: silc_client_command_reply_motd+308j
		mov	edx, [ebp+var_134]
		test	byte ptr [edx+64h], 2
		jnz	short loc_62BA2AD8

loc_62BA2AC8:				; CODE XREF: silc_client_command_reply_motd+2FFj
		cmp	byte ptr [esi],	0
		jnz	short loc_62BA2A74

loc_62BA2ACD:				; CODE XREF: silc_client_command_reply_motd+26Bj
		mov	ebx, [ebp+var_134]
		jmp	loc_62BA29FB
; ---------------------------------------------------------------------------

loc_62BA2AD8:				; CODE XREF: silc_client_command_reply_motd+2B2j
		mov	eax, [edx+4]
		mov	eax, [eax+4Ch]
		mov	eax, [eax+18h]
		mov	eax, [eax+48h]
		lea	edx, [ebp+var_120]
		mov	[esp+178h+var_168], edx
		mov	[esp+178h+var_16C], offset aS_0	; "%s"
		mov	[esp+178h+var_170], 0
		mov	edx, [ebp+var_138]
		mov	[esp+178h+var_174], edx
		mov	edx, [ebp+var_12C]
		mov	[esp+178h+var_178], edx
		call	dword ptr [eax]
		jmp	short loc_62BA2AC8
; ---------------------------------------------------------------------------

loc_62BA2B15:				; CODE XREF: silc_client_command_reply_motd+2A6j
		mov	[ebp+var_120], 20h
		jmp	short loc_62BA2ABC
; ---------------------------------------------------------------------------

loc_62BA2B1E:				; CODE XREF: silc_client_command_reply_motd+240j
		mov	[ebp+var_1C], 0
		mov	[ebp+var_20], 0
		mov	al, [ebx+5Ch]
		test	al, al
		jnz	short loc_62BA2B54
		mov	byte ptr [ebx+5Dh], 1Dh
		mov	byte ptr [ebx+5Ch], 1Dh
		xor	eax, eax
		xor	edx, edx

loc_62BA2B3F:				; CODE XREF: silc_client_command_reply_motd+363j
		mov	[esp+178h+var_170], edx
		mov	[esp+178h+var_174], eax
		mov	[esp+178h+var_178], ebx
		call	sub_62B9ED04
		jmp	loc_62BA2A0D
; ---------------------------------------------------------------------------

loc_62BA2B54:				; CODE XREF: silc_client_command_reply_motd+31Dj
		lea	ecx, [ebp+var_20]
		mov	[esp+178h+var_16C], ecx
		lea	ecx, [ebp+var_1C]
		mov	[esp+178h+var_170], ecx
		mov	[esp+178h+var_174], edx
		movzx	eax, al
		mov	[esp+178h+var_178], eax
		call	silc_status_get_args
		mov	edx, [ebp+var_20]
		mov	eax, [ebp+var_1C]
		jmp	short loc_62BA2B3F
silc_client_command_reply_motd endp

; ---------------------------------------------------------------------------
		align 4
; Exported entry  61. silc_client_command_reply_list

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public silc_client_command_reply_list
silc_client_command_reply_list proc near ; DATA	XREF: silc_client_commands_unregister+30Eo
					; silc_client_commands_register+255o ...

var_88		= dword	ptr -88h
var_84		= dword	ptr -84h
var_80		= dword	ptr -80h
var_7C		= dword	ptr -7Ch
var_78		= dword	ptr -78h
var_5C		= dword	ptr -5Ch
var_58		= dword	ptr -58h
var_54		= dword	ptr -54h
var_50		= dword	ptr -50h
var_4C		= dword	ptr -4Ch
var_40		= dword	ptr -40h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		sub	esp, 7Ch
		mov	ebx, [ebp+arg_4]
		mov	esi, [ebp+arg_8]
		mov	edi, [ebx+4]
		mov	eax, [edi+4Ch]
		mov	[ebp+var_4C], eax
		mov	[esp+88h+var_88], esi
		call	silc_command_get_args
		mov	edx, eax
		mov	al, [ebx+5Dh]
		test	al, al
		jz	short loc_62BA2C0C
		test	byte ptr [ebx+64h], 2
		jnz	loc_62BA2CD4

loc_62BA2BAF:				; CODE XREF: silc_client_command_reply_list+19Aj
		mov	[ebp+var_20], 0
		mov	[ebp+var_1C], 0
		mov	al, [ebx+5Ch]
		test	al, al
		jnz	loc_62BA2CAC
		mov	al, [ebx+5Dh]
		mov	[ebx+5Ch], al
		xor	eax, eax
		xor	edx, edx

loc_62BA2BD2:				; CODE XREF: silc_client_command_reply_list+153j
		mov	[esp+88h+var_80], edx
		mov	[esp+88h+var_84], eax
		mov	[esp+88h+var_88], ebx
		call	sub_62B9ED04
		movzx	ecx, byte ptr [ebx+5Dh]
		mov	edx, esi
		mov	eax, ebx
		call	sub_62B9EB60
		mov	[esp+88h+var_84], offset silc_client_command_reply_processed
		mov	eax, [ebp+arg_0]
		mov	[esp+88h+var_88], eax
		call	silc_fsm_next

loc_62BA2C02:				; CODE XREF: silc_client_command_reply_list+2FBj
		xor	eax, eax
		add	esp, 7Ch
		pop	ebx
		pop	esi
		pop	edi
		leave
		retn
; ---------------------------------------------------------------------------

loc_62BA2C0C:				; CODE XREF: silc_client_command_reply_list+27j
		mov	[esp+88h+var_78], 0
		lea	esi, [ebp+var_40]
		mov	[esp+88h+var_7C], esi
		mov	[esp+88h+var_80], 0
		mov	[esp+88h+var_84], 2
		mov	[esp+88h+var_88], edx
		mov	[ebp+var_5C], edx
		call	silc_argument_get_decoded
		test	al, al
		mov	edx, [ebp+var_5C]
		jz	loc_62BA2D1C
		mov	[esp+88h+var_88], edx
		mov	[ebp+var_5C], edx
		call	silc_argument_get_arg_num
		cmp	eax, 2
		mov	edx, [ebp+var_5C]
		ja	loc_62BA2D64

loc_62BA2C58:				; CODE XREF: silc_client_command_reply_list+1F6j
		mov	[ebp+var_1C], 0
		mov	[ebp+var_20], 0
		mov	al, [ebx+5Ch]
		test	al, al
		jnz	loc_62BA2E7C
		mov	byte ptr [ebx+5Dh], 1Dh
		mov	byte ptr [ebx+5Ch], 1Dh
		xor	eax, eax
		xor	edx, edx

loc_62BA2C7D:				; CODE XREF: silc_client_command_reply_list+323j
		mov	[esp+88h+var_80], edx
		mov	[esp+88h+var_84], eax
		mov	[esp+88h+var_88], ebx
		call	sub_62B9ED04
		mov	[esp+88h+var_84], offset silc_client_command_reply_processed
		mov	eax, [ebp+arg_0]
		mov	[esp+88h+var_88], eax
		call	silc_fsm_next
		xor	eax, eax
		add	esp, 7Ch
		pop	ebx
		pop	esi
		pop	edi
		leave
		retn
; ---------------------------------------------------------------------------
		align 4

loc_62BA2CAC:				; CODE XREF: silc_client_command_reply_list+46j
		lea	ecx, [ebp+var_1C]
		mov	[esp+88h+var_7C], ecx
		lea	ecx, [ebp+var_20]
		mov	[esp+88h+var_80], ecx
		mov	[esp+88h+var_84], edx
		movzx	eax, al
		mov	[esp+88h+var_88], eax
		call	silc_status_get_args
		mov	edx, [ebp+var_1C]
		mov	eax, [ebp+var_20]
		jmp	loc_62BA2BD2
; ---------------------------------------------------------------------------

loc_62BA2CD4:				; CODE XREF: silc_client_command_reply_list+2Dj
		mov	ecx, [ebx+4]
		mov	ecx, [ecx+4Ch]
		mov	ecx, [ecx+18h]
		mov	ecx, [ecx+48h]
		mov	edi, [ecx]
		movzx	eax, al
		mov	[esp+88h+var_88], eax
		mov	[ebp+var_5C], edx
		call	silc_get_status_message
		mov	ecx, [ebx+4]
		mov	[esp+88h+var_78], eax
		mov	[esp+88h+var_7C], offset aCannotListChan ; "Cannot list	channels: %s"
		mov	[esp+88h+var_80], 3
		mov	[esp+88h+var_84], ecx
		mov	eax, [ecx+4Ch]
		mov	[esp+88h+var_88], eax
		call	edi
		mov	edx, [ebp+var_5C]
		jmp	loc_62BA2BAF
; ---------------------------------------------------------------------------
		align 4

loc_62BA2D1C:				; CODE XREF: silc_client_command_reply_list+BFj
		mov	[esp+88h+var_78], 0
		mov	[esp+88h+var_7C], 0
		mov	[esp+88h+var_80], 0
		mov	[esp+88h+var_84], 0
		mov	[esp+88h+var_88], ebx
		call	sub_62B9ED04
		mov	[esp+88h+var_84], offset silc_client_command_reply_processed
		mov	eax, [ebp+arg_0]
		mov	[esp+88h+var_88], eax
		call	silc_fsm_next
		xor	eax, eax
		add	esp, 7Ch
		pop	ebx
		pop	esi
		pop	edi
		leave
		retn
; ---------------------------------------------------------------------------
		align 4

loc_62BA2D64:				; CODE XREF: silc_client_command_reply_list+D6j
		mov	[esp+88h+var_88], edx
		call	silc_argument_get_arg_num
		cmp	eax, 5
		mov	edx, [ebp+var_5C]
		ja	loc_62BA2C58
		mov	[esp+88h+var_80], 0
		mov	[esp+88h+var_84], 3
		mov	[esp+88h+var_88], edx
		mov	[ebp+var_5C], edx
		call	silc_argument_get_arg_type
		mov	[ebp+var_54], eax
		test	eax, eax
		mov	edx, [ebp+var_5C]
		jz	loc_62BA2EA4
		mov	[esp+88h+var_80], 0
		mov	[esp+88h+var_84], 4
		mov	[esp+88h+var_88], edx
		mov	[ebp+var_5C], edx
		call	silc_argument_get_arg_type
		mov	[ebp+var_58], eax
		mov	[esp+88h+var_80], 0
		mov	[esp+88h+var_84], 5
		mov	edx, [ebp+var_5C]
		mov	[esp+88h+var_88], edx
		call	silc_argument_get_arg_type
		mov	ecx, eax
		test	eax, eax
		mov	edx, [ebp+var_5C]
		jz	loc_62BA2F25
		movzx	eax, byte ptr [eax+3]
		mov	[ebp+var_50], eax
		movzx	eax, byte ptr [ecx]
		shl	eax, 18h
		or	[ebp+var_50], eax
		movzx	eax, byte ptr [ecx+1]
		shl	eax, 10h
		or	[ebp+var_50], eax
		movzx	eax, byte ptr [ecx+2]
		shl	eax, 8
		or	[ebp+var_50], eax

loc_62BA2E0B:				; CODE XREF: silc_client_command_reply_list+3B0j
		mov	[esp+88h+var_80], esi
		mov	[esp+88h+var_84], edi
		mov	eax, [ebp+var_4C]
		mov	[esp+88h+var_88], eax
		mov	[ebp+var_5C], edx
		call	silc_client_get_channel_by_id
		mov	ecx, eax
		test	eax, eax
		jz	loc_62BA2EDC

loc_62BA2E2B:				; CODE XREF: silc_client_command_reply_list+3A4j
		mov	eax, [ebp+var_50]
		mov	[esp+88h+var_78], eax
		mov	eax, [ebp+var_58]
		mov	[esp+88h+var_7C], eax
		mov	eax, [ecx]
		mov	[esp+88h+var_80], eax
		mov	[esp+88h+var_84], ecx
		mov	[esp+88h+var_88], ebx
		mov	[ebp+var_5C], ecx
		call	sub_62B9ED04
		mov	ecx, [ebp+var_5C]

loc_62BA2E51:				; CODE XREF: silc_client_command_reply_list+35Bj
					; silc_client_command_reply_list+414j
		mov	[esp+88h+var_80], ecx
		mov	[esp+88h+var_84], edi
		mov	eax, [ebp+var_4C]
		mov	[esp+88h+var_88], eax
		call	silc_client_unref_channel
		mov	[esp+88h+var_84], offset silc_client_command_reply_processed
		mov	eax, [ebp+arg_0]
		mov	[esp+88h+var_88], eax
		call	silc_fsm_next
		jmp	loc_62BA2C02
; ---------------------------------------------------------------------------

loc_62BA2E7C:				; CODE XREF: silc_client_command_reply_list+EFj
		lea	ecx, [ebp+var_20]
		mov	[esp+88h+var_7C], ecx
		lea	ecx, [ebp+var_1C]
		mov	[esp+88h+var_80], ecx
		mov	[esp+88h+var_84], edx
		movzx	eax, al
		mov	[esp+88h+var_88], eax
		call	silc_status_get_args
		mov	edx, [ebp+var_20]
		mov	eax, [ebp+var_1C]
		jmp	loc_62BA2C7D
; ---------------------------------------------------------------------------

loc_62BA2EA4:				; CODE XREF: silc_client_command_reply_list+21Fj
		mov	[ebp+var_20], 0
		mov	[ebp+var_1C], 0
		mov	al, [ebx+5Ch]
		test	al, al
		jnz	short loc_62BA2F31
		mov	byte ptr [ebx+5Dh], 1Dh
		mov	byte ptr [ebx+5Ch], 1Dh
		xor	eax, eax
		xor	edx, edx

loc_62BA2EC5:				; CODE XREF: silc_client_command_reply_list+3D8j
		mov	[esp+88h+var_80], edx
		mov	[esp+88h+var_84], eax
		mov	[esp+88h+var_88], ebx
		call	sub_62B9ED04
		xor	ecx, ecx
		jmp	loc_62BA2E51
; ---------------------------------------------------------------------------

loc_62BA2EDC:				; CODE XREF: silc_client_command_reply_list+2A9j
		mov	[esp+88h+var_78], esi ;	int
		mov	[esp+88h+var_7C], 0 ; int
		mov	eax, [ebp+var_54]
		mov	[esp+88h+var_80], eax ;	char *
		mov	[esp+88h+var_84], edi ;	int
		mov	eax, [ebp+var_4C]
		mov	[esp+88h+var_88], eax ;	int
		call	silc_client_add_channel
		mov	ecx, eax
		test	eax, eax
		mov	edx, [ebp+var_5C]
		jz	short loc_62BA2F59
		mov	[esp+88h+var_80], eax
		mov	[esp+88h+var_84], edi
		mov	eax, [ebp+var_4C]
		mov	[esp+88h+var_88], eax
		mov	[ebp+var_5C], ecx
		call	silc_client_ref_channel
		mov	ecx, [ebp+var_5C]
		jmp	loc_62BA2E2B
; ---------------------------------------------------------------------------

loc_62BA2F25:				; CODE XREF: silc_client_command_reply_list+265j
		mov	[ebp+var_50], 0
		jmp	loc_62BA2E0B
; ---------------------------------------------------------------------------

loc_62BA2F31:				; CODE XREF: silc_client_command_reply_list+33Bj
		lea	ecx, [ebp+var_1C]
		mov	[esp+88h+var_7C], ecx
		lea	ecx, [ebp+var_20]
		mov	[esp+88h+var_80], ecx
		mov	[esp+88h+var_84], edx
		movzx	eax, al
		mov	[esp+88h+var_88], eax
		call	silc_status_get_args
		mov	edx, [ebp+var_1C]
		mov	eax, [ebp+var_20]
		jmp	loc_62BA2EC5
; ---------------------------------------------------------------------------

loc_62BA2F59:				; CODE XREF: silc_client_command_reply_list+389j
		mov	[ebp+var_1C], 0
		mov	[ebp+var_20], 0
		mov	al, [ebx+5Ch]
		test	al, al
		jnz	short loc_62BA2F95
		mov	byte ptr [ebx+5Dh], 1Dh
		mov	byte ptr [ebx+5Ch], 1Dh
		xor	edx, edx
		xor	eax, eax

loc_62BA2F7A:				; CODE XREF: silc_client_command_reply_list+442j
		mov	[esp+88h+var_80], eax
		mov	[esp+88h+var_84], edx
		mov	[esp+88h+var_88], ebx
		mov	[ebp+var_5C], ecx
		call	sub_62B9ED04
		mov	ecx, [ebp+var_5C]
		jmp	loc_62BA2E51
; ---------------------------------------------------------------------------

loc_62BA2F95:				; CODE XREF: silc_client_command_reply_list+3F0j
		lea	esi, [ebp+var_20]
		mov	[esp+88h+var_7C], esi
		lea	esi, [ebp+var_1C]
		mov	[esp+88h+var_80], esi
		mov	[esp+88h+var_84], edx
		movzx	eax, al
		mov	[esp+88h+var_88], eax
		mov	[ebp+var_5C], ecx
		call	silc_status_get_args
		mov	eax, [ebp+var_20]
		mov	edx, [ebp+var_1C]
		mov	ecx, [ebp+var_5C]
		jmp	short loc_62BA2F7A
silc_client_command_reply_list endp

; Exported entry  73. silc_client_command_reply_topic

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public silc_client_command_reply_topic
silc_client_command_reply_topic	proc near ; DATA XREF: silc_client_commands_unregister+3BEo
					; silc_client_commands_register+2B3o ...

var_78		= dword	ptr -78h
var_74		= dword	ptr -74h
var_70		= dword	ptr -70h
var_6C		= dword	ptr -6Ch
var_68		= dword	ptr -68h
var_50		= dword	ptr -50h
var_4C		= dword	ptr -4Ch
var_44		= byte ptr -44h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		sub	esp, 6Ch
		mov	ebx, [ebp+arg_4]
		mov	esi, [ebp+arg_8]
		mov	edi, [ebx+4]
		mov	eax, [edi+4Ch]
		mov	[ebp+var_4C], eax
		mov	[esp+78h+var_78], esi
		call	silc_command_get_args
		mov	edx, eax
		mov	al, [ebx+5Dh]
		test	al, al
		jz	short loc_62BA3050
		test	byte ptr [ebx+64h], 2
		jnz	loc_62BA30F4

loc_62BA2FF3:				; CODE XREF: silc_client_command_reply_topic+176j
		mov	[ebp+var_24], 0
		mov	[ebp+var_20], 0
		mov	al, [ebx+5Ch]
		test	al, al
		jnz	loc_62BA30CC
		mov	al, [ebx+5Dh]
		mov	[ebx+5Ch], al
		xor	eax, eax
		xor	edx, edx

loc_62BA3016:				; CODE XREF: silc_client_command_reply_topic+12Fj
		mov	[esp+78h+var_70], edx
		mov	[esp+78h+var_74], eax
		mov	[esp+78h+var_78], ebx
		call	sub_62B9ED04
		movzx	ecx, byte ptr [ebx+5Dh]
		mov	edx, esi
		mov	eax, ebx
		call	sub_62B9EB60
		mov	[esp+78h+var_74], offset silc_client_command_reply_processed
		mov	eax, [ebp+arg_0]
		mov	[esp+78h+var_78], eax
		call	silc_fsm_next

loc_62BA3046:				; CODE XREF: silc_client_command_reply_topic+232j
		xor	eax, eax
		add	esp, 6Ch
		pop	ebx
		pop	esi
		pop	edi
		leave
		retn
; ---------------------------------------------------------------------------

loc_62BA3050:				; CODE XREF: silc_client_command_reply_topic+27j
		mov	[esp+78h+var_78], edx
		mov	[ebp+var_50], edx
		call	silc_argument_get_arg_num
		cmp	eax, 1
		mov	edx, [ebp+var_50]
		jbe	short loc_62BA3077
		mov	[esp+78h+var_78], edx
		call	silc_argument_get_arg_num
		cmp	eax, 3
		mov	edx, [ebp+var_50]
		jbe	loc_62BA3164

loc_62BA3077:				; CODE XREF: silc_client_command_reply_topic+A1j
		mov	[ebp+var_20], 0
		mov	[ebp+var_24], 0
		mov	al, [ebx+5Ch]
		test	al, al
		jnz	loc_62BA313C
		mov	byte ptr [ebx+5Dh], 1Dh
		mov	byte ptr [ebx+5Ch], 1Dh
		xor	eax, eax
		xor	edx, edx

loc_62BA309C:				; CODE XREF: silc_client_command_reply_topic+19Fj
		mov	[esp+78h+var_70], edx
		mov	[esp+78h+var_74], eax
		mov	[esp+78h+var_78], ebx
		call	sub_62B9ED04
		mov	[esp+78h+var_74], offset silc_client_command_reply_processed
		mov	eax, [ebp+arg_0]
		mov	[esp+78h+var_78], eax
		call	silc_fsm_next
		xor	eax, eax
		add	esp, 6Ch
		pop	ebx
		pop	esi
		pop	edi
		leave
		retn
; ---------------------------------------------------------------------------
		align 4

loc_62BA30CC:				; CODE XREF: silc_client_command_reply_topic+46j
		lea	ecx, [ebp+var_20]
		mov	[esp+78h+var_6C], ecx
		lea	ecx, [ebp+var_24]
		mov	[esp+78h+var_70], ecx
		mov	[esp+78h+var_74], edx
		movzx	eax, al
		mov	[esp+78h+var_78], eax
		call	silc_status_get_args
		mov	edx, [ebp+var_20]
		mov	eax, [ebp+var_24]
		jmp	loc_62BA3016
; ---------------------------------------------------------------------------

loc_62BA30F4:				; CODE XREF: silc_client_command_reply_topic+2Dj
		mov	ecx, [ebx+4]
		mov	ecx, [ecx+4Ch]
		mov	ecx, [ecx+18h]
		mov	ecx, [ecx+48h]
		mov	edi, [ecx]
		movzx	eax, al
		mov	[esp+78h+var_78], eax
		mov	[ebp+var_50], edx
		call	silc_get_status_message
		mov	ecx, [ebx+4]
		mov	[esp+78h+var_68], eax
		mov	[esp+78h+var_6C], offset aCannotSetTopic ; "Cannot set topic: %s"
		mov	[esp+78h+var_70], 3
		mov	[esp+78h+var_74], ecx
		mov	eax, [ecx+4Ch]
		mov	[esp+78h+var_78], eax
		call	edi
		mov	edx, [ebp+var_50]
		jmp	loc_62BA2FF3
; ---------------------------------------------------------------------------
		align 4

loc_62BA313C:				; CODE XREF: silc_client_command_reply_topic+CAj
		lea	ecx, [ebp+var_24]
		mov	[esp+78h+var_6C], ecx
		lea	ecx, [ebp+var_20]
		mov	[esp+78h+var_70], ecx
		mov	[esp+78h+var_74], edx
		movzx	eax, al
		mov	[esp+78h+var_78], eax
		call	silc_status_get_args
		mov	edx, [ebp+var_24]
		mov	eax, [ebp+var_20]
		jmp	loc_62BA309C
; ---------------------------------------------------------------------------

loc_62BA3164:				; CODE XREF: silc_client_command_reply_topic+B1j
		mov	[esp+78h+var_68], 0
		lea	esi, [ebp+var_44]
		mov	[esp+78h+var_6C], esi
		mov	[esp+78h+var_70], 0
		mov	[esp+78h+var_74], 2
		mov	[esp+78h+var_78], edx
		mov	[ebp+var_50], edx
		call	silc_argument_get_decoded
		test	al, al
		mov	edx, [ebp+var_50]
		jnz	short loc_62BA31F8
		mov	[ebp+var_24], 0
		mov	[ebp+var_20], 0
		mov	al, [ebx+5Ch]
		test	al, al
		jnz	loc_62BA329C
		mov	byte ptr [ebx+5Dh], 1Dh
		mov	byte ptr [ebx+5Ch], 1Dh
		xor	eax, eax
		xor	edx, edx

loc_62BA31BA:				; CODE XREF: silc_client_command_reply_topic+2FFj
		mov	[esp+78h+var_70], edx
		mov	[esp+78h+var_74], eax
		mov	[esp+78h+var_78], ebx
		call	sub_62B9ED04
		xor	esi, esi

loc_62BA31CC:				; CODE XREF: silc_client_command_reply_topic+2D7j
					; silc_client_command_reply_topic+335j
		mov	[esp+78h+var_70], esi
		mov	[esp+78h+var_74], edi
		mov	eax, [ebp+var_4C]
		mov	[esp+78h+var_78], eax
		call	silc_client_unref_channel
		mov	[esp+78h+var_74], offset silc_client_command_reply_processed
		mov	eax, [ebp+arg_0]
		mov	[esp+78h+var_78], eax
		call	silc_fsm_next
		jmp	loc_62BA3046
; ---------------------------------------------------------------------------
		align 4

loc_62BA31F8:				; CODE XREF: silc_client_command_reply_topic+1D3j
		mov	[esp+78h+var_70], esi
		mov	[esp+78h+var_74], edi
		mov	eax, [ebp+var_4C]
		mov	[esp+78h+var_78], eax
		mov	[ebp+var_50], edx
		call	silc_client_get_channel_by_id
		mov	esi, eax
		test	eax, eax
		mov	edx, [ebp+var_50]
		jz	loc_62BA32C4
		mov	eax, [eax+144h]
		mov	[esp+78h+var_78], eax
		mov	[ebp+var_50], edx
		call	silc_rwlock_wrlock
		lea	eax, [ebp+var_1C]
		mov	[esp+78h+var_70], eax
		mov	[esp+78h+var_74], 3
		mov	edx, [ebp+var_50]
		mov	[esp+78h+var_78], edx
		call	silc_argument_get_arg_type
		test	eax, eax
		jz	short loc_62BA3273
		mov	edx, [esi+108h]
		mov	[esp+78h+var_78], edx
		mov	[ebp+var_50], eax
		call	silc_free
		mov	edx, [ebp+var_1C]
		mov	[esp+78h+var_74], edx
		mov	eax, [ebp+var_50]
		mov	[esp+78h+var_78], eax
		call	silc_memdup
		mov	[esi+108h], eax

loc_62BA3273:				; CODE XREF: silc_client_command_reply_topic+288j
		mov	eax, [esi+144h]
		mov	[esp+78h+var_78], eax
		call	silc_rwlock_unlock
		mov	eax, [esi+108h]
		mov	[esp+78h+var_70], eax
		mov	[esp+78h+var_74], esi
		mov	[esp+78h+var_78], ebx
		call	sub_62B9ED04
		jmp	loc_62BA31CC
; ---------------------------------------------------------------------------

loc_62BA329C:				; CODE XREF: silc_client_command_reply_topic+1E8j
		lea	ecx, [ebp+var_20]
		mov	[esp+78h+var_6C], ecx
		lea	ecx, [ebp+var_24]
		mov	[esp+78h+var_70], ecx
		mov	[esp+78h+var_74], edx
		movzx	eax, al
		mov	[esp+78h+var_78], eax
		call	silc_status_get_args
		mov	edx, [ebp+var_20]
		mov	eax, [ebp+var_24]
		jmp	loc_62BA31BA
; ---------------------------------------------------------------------------

loc_62BA32C4:				; CODE XREF: silc_client_command_reply_topic+255j
		mov	[ebp+var_20], 0
		mov	[ebp+var_24], 0
		mov	al, [ebx+5Ch]
		test	al, al
		jnz	short loc_62BA32FA
		mov	byte ptr [ebx+5Dh], 1Dh
		mov	byte ptr [ebx+5Ch], 1Dh
		xor	edx, edx
		xor	eax, eax

loc_62BA32E5:				; CODE XREF: silc_client_command_reply_topic+35Dj
		mov	[esp+78h+var_70], eax
		mov	[esp+78h+var_74], edx
		mov	[esp+78h+var_78], ebx
		call	sub_62B9ED04
		jmp	loc_62BA31CC
; ---------------------------------------------------------------------------

loc_62BA32FA:				; CODE XREF: silc_client_command_reply_topic+317j
		lea	ecx, [ebp+var_24]
		mov	[esp+78h+var_6C], ecx
		lea	ecx, [ebp+var_20]
		mov	[esp+78h+var_70], ecx
		mov	[esp+78h+var_74], edx
		movzx	eax, al
		mov	[esp+78h+var_78], eax
		call	silc_status_get_args
		mov	eax, [ebp+var_24]
		mov	edx, [ebp+var_20]
		jmp	short loc_62BA32E5
silc_client_command_reply_topic	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  57. silc_client_command_reply_join

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public silc_client_command_reply_join
silc_client_command_reply_join proc near ; DATA	XREF: silc_client_commands_unregister+93Eo
					; silc_client_commands_register+655o ...

var_118		= dword	ptr -118h
var_114		= dword	ptr -114h
var_110		= dword	ptr -110h
var_10C		= dword	ptr -10Ch
var_108		= dword	ptr -108h
var_104		= dword	ptr -104h
var_100		= dword	ptr -100h
var_FC		= dword	ptr -0FCh
var_F8		= dword	ptr -0F8h
var_F4		= dword	ptr -0F4h
var_F0		= dword	ptr -0F0h
var_DC		= dword	ptr -0DCh
var_D4		= dword	ptr -0D4h
var_D0		= dword	ptr -0D0h
var_CC		= dword	ptr -0CCh
var_C8		= byte ptr -0C8h
var_B3		= byte ptr -0B3h
var_B2		= byte ptr -0B2h
var_B1		= byte ptr -0B1h
var_B0		= dword	ptr -0B0h
var_AC		= dword	ptr -0ACh
var_A8		= dword	ptr -0A8h
var_A4		= dword	ptr -0A4h
var_A0		= dword	ptr -0A0h
var_9C		= dword	ptr -9Ch
var_90		= byte ptr -90h
var_70		= dword	ptr -70h
var_50		= dword	ptr -50h
var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= byte ptr -30h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		sub	esp, 10Ch
		mov	ebx, [ebp+arg_4]
		mov	esi, [ebp+arg_8]
		mov	eax, [ebx+4]
		mov	[ebp+var_9C], eax
		mov	edx, [eax+4Ch]
		mov	[ebp+var_A0], edx
		mov	[esp+118h+var_118], esi
		call	silc_command_get_args
		mov	edx, eax
		mov	al, [ebx+5Dh]
		test	al, al
		jz	short loc_62BA33C0
		test	byte ptr [ebx+64h], 2
		jnz	loc_62BA345C

loc_62BA335F:				; CODE XREF: silc_client_command_reply_join+184j
		mov	[ebp+var_20], 0
		mov	[ebp+var_24], 0
		mov	al, [ebx+5Ch]
		test	al, al
		jnz	loc_62BA3434
		mov	al, [ebx+5Dh]
		mov	[ebx+5Ch], al
		xor	eax, eax

loc_62BA3380:				; CODE XREF: silc_client_command_reply_join+134j
		mov	[esp+118h+var_110], eax
		mov	eax, [ebp+var_20]
		mov	[esp+118h+var_114], eax
		mov	[esp+118h+var_118], ebx
		call	sub_62B9ED04
		movzx	ecx, byte ptr [ebx+5Dh]
		mov	edx, esi
		mov	eax, ebx
		call	sub_62B9EB60

loc_62BA33A0:				; CODE XREF: silc_client_command_reply_join+265j
					; silc_client_command_reply_join+2A1j ...
		mov	[esp+118h+var_114], offset silc_client_command_reply_processed
		mov	ecx, [ebp+arg_0]
		mov	[esp+118h+var_118], ecx
		call	silc_fsm_next
		xor	eax, eax

loc_62BA33B5:				; CODE XREF: silc_client_command_reply_join+4F3j
		add	esp, 10Ch
		pop	ebx
		pop	esi
		pop	edi
		leave
		retn
; ---------------------------------------------------------------------------

loc_62BA33C0:				; CODE XREF: silc_client_command_reply_join+33j
		mov	[esp+118h+var_118], edx
		mov	[ebp+var_D4], edx
		call	silc_argument_get_arg_num
		cmp	eax, 8
		mov	edx, [ebp+var_D4]
		ja	loc_62BA34D0

loc_62BA33DD:				; CODE XREF: silc_client_command_reply_join+1C1j
		mov	[ebp+var_24], 0
		mov	[ebp+var_20], 0
		mov	al, [ebx+5Ch]
		test	al, al
		jnz	loc_62BA34AC
		mov	byte ptr [ebx+5Dh], 1Dh
		mov	byte ptr [ebx+5Ch], 1Dh

loc_62BA33FE:				; CODE XREF: silc_client_command_reply_join+1A9j
		mov	eax, [ebp+var_20]
		mov	[esp+118h+var_110], eax
		mov	eax, [ebp+var_24]
		mov	[esp+118h+var_114], eax
		mov	[esp+118h+var_118], ebx
		call	sub_62B9ED04
		mov	[esp+118h+var_114], offset silc_client_command_reply_processed
		mov	eax, [ebp+arg_0]
		mov	[esp+118h+var_118], eax
		call	silc_fsm_next
		xor	eax, eax
		add	esp, 10Ch
		pop	ebx
		pop	esi
		pop	edi
		leave
		retn
; ---------------------------------------------------------------------------

loc_62BA3434:				; CODE XREF: silc_client_command_reply_join+52j
		lea	ecx, [ebp+var_24]
		mov	[esp+118h+var_10C], ecx
		lea	ecx, [ebp+var_20]
		mov	[esp+118h+var_110], ecx
		mov	[esp+118h+var_114], edx
		movzx	eax, al
		mov	[esp+118h+var_118], eax
		call	silc_status_get_args
		mov	eax, [ebp+var_24]
		jmp	loc_62BA3380
; ---------------------------------------------------------------------------
		align 4

loc_62BA345C:				; CODE XREF: silc_client_command_reply_join+39j
		mov	ecx, [ebx+4]
		mov	ecx, [ecx+4Ch]
		mov	ecx, [ecx+18h]
		mov	ecx, [ecx+48h]
		mov	edi, [ecx]
		movzx	eax, al
		mov	[esp+118h+var_118], eax
		mov	[ebp+var_D4], edx
		call	silc_get_status_message
		mov	ecx, [ebx+4]
		mov	[esp+118h+var_108], eax
		mov	[esp+118h+var_10C], offset aCannotJoinChan ; "Cannot join channel: %s"
		mov	[esp+118h+var_110], 3
		mov	[esp+118h+var_114], ecx
		mov	eax, [ecx+4Ch]
		mov	[esp+118h+var_118], eax
		call	edi
		mov	edx, [ebp+var_D4]
		jmp	loc_62BA335F
; ---------------------------------------------------------------------------
		align 4

loc_62BA34AC:				; CODE XREF: silc_client_command_reply_join+D0j
		lea	ecx, [ebp+var_20]
		mov	[esp+118h+var_10C], ecx
		lea	ecx, [ebp+var_24]
		mov	[esp+118h+var_110], ecx
		mov	[esp+118h+var_114], edx
		movzx	eax, al
		mov	[esp+118h+var_118], eax
		call	silc_status_get_args
		jmp	loc_62BA33FE
; ---------------------------------------------------------------------------
		align 10h

loc_62BA34D0:				; CODE XREF: silc_client_command_reply_join+B7j
		mov	[esp+118h+var_118], edx
		call	silc_argument_get_arg_num
		cmp	eax, 11h
		mov	edx, [ebp+var_D4]
		ja	loc_62BA33DD
		mov	[esp+118h+var_110], 0
		mov	[esp+118h+var_114], 2
		mov	[esp+118h+var_118], edx
		mov	[ebp+var_D4], edx
		call	silc_argument_get_arg_type
		mov	esi, eax
		test	eax, eax
		mov	edx, [ebp+var_D4]
		jz	short loc_62BA358A
		mov	[esp+118h+var_108], 0
		lea	ecx, [ebp+var_70]
		mov	[ebp+var_DC], ecx
		mov	[esp+118h+var_10C], ecx
		mov	[esp+118h+var_110], 0
		mov	[esp+118h+var_114], 3
		mov	[esp+118h+var_118], edx
		mov	[ebp+var_D4], edx
		call	silc_argument_get_decoded
		test	al, al
		mov	edx, [ebp+var_D4]
		jnz	short loc_62BA35C6

loc_62BA354E:				; CODE XREF: silc_client_command_reply_join+422j
		mov	[ebp+var_24], 0
		mov	[ebp+var_20], 0
		mov	al, [ebx+5Ch]
		test	al, al
		jnz	loc_62BA36B5
		mov	byte ptr [ebx+5Dh], 1Dh
		mov	byte ptr [ebx+5Ch], 1Dh

loc_62BA356F:				; CODE XREF: silc_client_command_reply_join+3B2j
		mov	eax, [ebp+var_20]
		mov	[esp+118h+var_110], eax
		mov	eax, [ebp+var_24]
		mov	[esp+118h+var_114], eax
		mov	[esp+118h+var_118], ebx
		call	sub_62B9ED04
		jmp	loc_62BA33A0
; ---------------------------------------------------------------------------

loc_62BA358A:				; CODE XREF: silc_client_command_reply_join+1EFj
					; silc_client_command_reply_join+3DCj ...
		mov	[ebp+var_20], 0
		mov	[ebp+var_24], 0
		mov	al, [ebx+5Ch]
		test	al, al
		jnz	loc_62BA3818
		mov	byte ptr [ebx+5Dh], 1Dh
		mov	byte ptr [ebx+5Ch], 1Dh

loc_62BA35AB:				; CODE XREF: silc_client_command_reply_join+515j
					; silc_client_command_reply_join+B99j
		mov	eax, [ebp+var_24]
		mov	[esp+118h+var_110], eax
		mov	eax, [ebp+var_20]
		mov	[esp+118h+var_114], eax
		mov	[esp+118h+var_118], ebx
		call	sub_62B9ED04
		jmp	loc_62BA33A0
; ---------------------------------------------------------------------------

loc_62BA35C6:				; CODE XREF: silc_client_command_reply_join+22Cj
		mov	[esp+118h+var_110], esi
		mov	ecx, [ebp+var_9C]
		mov	[esp+118h+var_114], ecx
		mov	eax, [ebp+var_A0]
		mov	[esp+118h+var_118], eax
		mov	[ebp+var_D4], edx
		call	silc_client_get_channel
		mov	[ebp+var_A4], eax
		test	eax, eax
		mov	edx, [ebp+var_D4]
		jz	loc_62BA3AC1
		mov	esi, eax
		add	esi, 114h
		mov	ecx, 16h
		mov	edi, [ebp+var_DC]
		repe cmpsb
		jnz	loc_62BA383A

loc_62BA3617:				; CODE XREF: silc_client_command_reply_join+549j
					; silc_client_command_reply_join+814j
		mov	[esp+118h+var_110], 0
		mov	[esp+118h+var_114], 0Bh
		mov	[esp+118h+var_118], edx
		mov	[ebp+var_D4], edx
		call	silc_argument_get_arg_type
		mov	[ebp+var_AC], eax
		test	eax, eax
		mov	edx, [ebp+var_D4]
		jz	loc_62BA36D7
		mov	[esp+118h+var_118], eax
		call	silc_hmac_is_supported
		test	al, al
		mov	edx, [ebp+var_D4]
		jnz	short loc_62BA36D7
		test	byte ptr [ebx+64h], 2
		jnz	loc_62BA386E

loc_62BA3665:				; CODE XREF: silc_client_command_reply_join+58Fj
		mov	[ebp+var_24], 0
		mov	[ebp+var_20], 0
		mov	al, [ebx+5Ch]
		test	al, al
		jnz	loc_62BA38B4
		mov	byte ptr [ebx+5Dh], 2Eh
		mov	byte ptr [ebx+5Ch], 2Eh

loc_62BA3686:				; CODE XREF: silc_client_command_reply_join+5B1j
		mov	eax, [ebp+var_20]
		mov	[esp+118h+var_110], eax
		mov	eax, [ebp+var_24]
		mov	[esp+118h+var_114], eax
		mov	[esp+118h+var_118], ebx
		call	sub_62B9ED04
		mov	edx, [ebp+var_A4]
		mov	eax, [edx+144h]
		mov	[esp+118h+var_118], eax
		call	silc_rwlock_unlock
		jmp	loc_62BA33A0
; ---------------------------------------------------------------------------

loc_62BA36B5:				; CODE XREF: silc_client_command_reply_join+241j
		lea	ecx, [ebp+var_20]
		mov	[esp+118h+var_10C], ecx
		lea	ecx, [ebp+var_24]
		mov	[esp+118h+var_110], ecx
		mov	[esp+118h+var_114], edx
		movzx	eax, al
		mov	[esp+118h+var_118], eax
		call	silc_status_get_args
		jmp	loc_62BA356F
; ---------------------------------------------------------------------------

loc_62BA36D7:				; CODE XREF: silc_client_command_reply_join+323j
					; silc_client_command_reply_join+339j
		lea	ecx, [ebp+var_1C]
		mov	[esp+118h+var_110], ecx
		mov	[esp+118h+var_114], 0Ch
		mov	[esp+118h+var_118], edx
		mov	[ebp+var_D4], edx
		call	silc_argument_get_arg_type
		test	eax, eax
		mov	edx, [ebp+var_D4]
		jz	loc_62BA358A
		movzx	edi, byte ptr [eax]
		mov	cl, [eax+1]
		mov	[ebp+var_B1], cl
		mov	cl, [eax+2]
		mov	byte ptr [ebp+var_B0], cl
		movzx	esi, byte ptr [eax+3]
		lea	eax, [ebp+var_1C]
		mov	[esp+118h+var_110], eax
		mov	[esp+118h+var_114], 0Dh
		mov	[esp+118h+var_118], edx
		mov	[ebp+var_D4], edx
		call	silc_argument_get_arg_type
		mov	ecx, eax
		test	eax, eax
		mov	edx, [ebp+var_D4]
		jz	loc_62BA354E
		mov	eax, esi
		movzx	esi, al
		mov	[ebp+var_A8], esi
		shl	edi, 18h
		or	[ebp+var_A8], edi
		movzx	eax, [ebp+var_B1]
		shl	eax, 10h
		or	[ebp+var_A8], eax
		movzx	eax, byte ptr [ebp+var_B0]
		shl	eax, 8
		or	[ebp+var_A8], eax
		mov	[ebp+var_40], ecx
		mov	[ebp+var_3C], ecx
		add	ecx, [ebp+var_1C]
		mov	[ebp+var_34], ecx
		mov	[ebp+var_38], ecx
		mov	al, [ebx+64h]
		test	al, 4
		jnz	loc_62BA38D6
		or	eax, 4
		mov	[ebx+64h], al
		mov	edx, [ebp+var_A4]
		mov	[ebx+60h], edx
		mov	ecx, [ebp+arg_0]
		mov	al, [ecx+28h]
		mov	dl, al
		or	edx, 4
		mov	[ecx+28h], dl
		test	al, 4
		jnz	loc_62BA3B39

loc_62BA37BB:				; CODE XREF: silc_client_command_reply_join+845j
		mov	[esp+118h+var_104], ebx
		mov	[esp+118h+var_108], offset sub_62BA3F30
		lea	eax, [ebp+var_40]
		mov	[esp+118h+var_10C], eax
		mov	eax, [ebp+var_A8]
		mov	[esp+118h+var_110], eax
		mov	edx, [ebp+var_9C]
		mov	[esp+118h+var_114], edx
		mov	ecx, [ebp+var_A0]
		mov	[esp+118h+var_118], ecx
		call	silc_client_get_clients_by_list
		mov	edx, [ebp+var_A4]
		mov	[edx+17Ch], ax
		mov	ecx, [ebp+arg_0]
		mov	dl, [ecx+28h]
		mov	al, dl
		shr	al, 2
		and	edx, 0FFFFFFFBh
		mov	[ecx+28h], dl
		shl	eax, 1
		and	eax, 2
		jmp	loc_62BA33B5
; ---------------------------------------------------------------------------

loc_62BA3818:				; CODE XREF: silc_client_command_reply_join+27Dj
					; silc_client_command_reply_join+B8Bj
		lea	ecx, [ebp+var_24]
		mov	[esp+118h+var_10C], ecx
		lea	ecx, [ebp+var_20]
		mov	[esp+118h+var_110], ecx
		mov	[esp+118h+var_114], edx
		movzx	eax, al
		mov	[esp+118h+var_118], eax
		call	silc_status_get_args
		jmp	loc_62BA35AB
; ---------------------------------------------------------------------------

loc_62BA383A:				; CODE XREF: silc_client_command_reply_join+2F1j
		lea	ecx, [ebp+var_70]
		mov	[esp+118h+var_10C], ecx
		mov	eax, [ebp+var_A4]
		mov	[esp+118h+var_110], eax
		mov	ecx, [ebp+var_9C]
		mov	[esp+118h+var_114], ecx
		mov	eax, [ebp+var_A0]
		mov	[esp+118h+var_118], eax
		call	silc_client_replace_channel_id
		mov	edx, [ebp+var_D4]
		jmp	loc_62BA3617
; ---------------------------------------------------------------------------

loc_62BA386E:				; CODE XREF: silc_client_command_reply_join+33Fj
		mov	eax, [ebx+4]
		mov	eax, [eax+4Ch]
		mov	eax, [eax+18h]
		mov	eax, [eax+48h]
		mov	ecx, [ebp+var_AC]
		mov	[esp+118h+var_108], ecx
		mov	[esp+118h+var_10C], offset aCannotJoinCh_0 ; "Cannot join channel: Unsupported HMAC `"...
		mov	[esp+118h+var_110], 3
		mov	ecx, [ebp+var_9C]
		mov	[esp+118h+var_114], ecx
		mov	ecx, [ebp+var_A0]
		mov	[esp+118h+var_118], ecx
		call	dword ptr [eax]
		mov	edx, [ebp+var_D4]
		jmp	loc_62BA3665
; ---------------------------------------------------------------------------

loc_62BA38B4:				; CODE XREF: silc_client_command_reply_join+358j
		lea	ecx, [ebp+var_20]
		mov	[esp+118h+var_10C], ecx
		lea	ecx, [ebp+var_24]
		mov	[esp+118h+var_110], ecx
		mov	[esp+118h+var_114], edx
		movzx	eax, al
		mov	[esp+118h+var_118], eax
		call	silc_status_get_args
		jmp	loc_62BA3686
; ---------------------------------------------------------------------------

loc_62BA38D6:				; CODE XREF: silc_client_command_reply_join+470j
		lea	eax, [ebp+var_1C]
		mov	[esp+118h+var_110], eax
		mov	[esp+118h+var_114], 0Eh
		mov	[esp+118h+var_118], edx
		mov	[ebp+var_D4], edx
		call	silc_argument_get_arg_type
		mov	edi, eax
		test	eax, eax
		mov	edx, [ebp+var_D4]
		jz	loc_62BA358A
		mov	ecx, [ebp+var_1C]
		add	ecx, eax
		mov	[ebp+var_B0], ecx
		mov	ecx, [ebp+var_A4]
		mov	eax, [ecx+144h]
		mov	[esp+118h+var_118], eax
		mov	[ebp+var_D4], edx
		call	silc_rwlock_wrlock
		cmp	[ebp+var_A8], 0
		mov	edx, [ebp+var_D4]
		jz	loc_62BA3B76
		xor	eax, eax
		mov	[ebp+var_CC], edx
		mov	[ebp+var_D0], ebx
		mov	ebx, eax
		jmp	short loc_62BA395D
; ---------------------------------------------------------------------------
		align 10h

loc_62BA3950:				; CODE XREF: silc_client_command_reply_join+66Bj
					; silc_client_command_reply_join+70Fj
		inc	ebx
		cmp	ebx, [ebp+var_A8]
		jnb	loc_62BA3B6A

loc_62BA395D:				; CODE XREF: silc_client_command_reply_join+62Bj
		mov	edx, [ebp+var_3C]
		movzx	eax, byte ptr [edx+2]
		shl	eax, 8
		movzx	ecx, byte ptr [edx+3]
		or	eax, ecx
		add	eax, 4
		movzx	esi, ax
		lea	eax, [ebp+var_90]
		mov	[esp+118h+var_110], eax
		mov	[esp+118h+var_114], esi
		mov	[esp+118h+var_118], edx
		call	silc_id_payload_parse_id
		test	al, al
		jz	short loc_62BA3950
		mov	dl, [edi]
		mov	[ebp+var_C8], dl
		mov	cl, [edi+1]
		mov	[ebp+var_B3], cl
		mov	al, [edi+2]
		mov	[ebp+var_B2], al
		mov	dl, [edi+3]
		mov	[ebp+var_B1], dl
		lea	ecx, [ebp+var_90]
		mov	[esp+118h+var_110], ecx
		mov	eax, [ebp+var_9C]
		mov	[esp+118h+var_114], eax
		mov	edx, [ebp+var_A0]
		mov	[esp+118h+var_118], edx
		call	silc_client_get_client_by_id
		mov	edx, eax
		test	eax, eax
		jz	short loc_62BA39E1
		test	byte ptr [eax+402h], 1
		jnz	short loc_62BA3A34

loc_62BA39E1:				; CODE XREF: silc_client_command_reply_join+6B6j
					; silc_client_command_reply_join+79Cj
		mov	[esp+118h+var_110], edx
		mov	eax, [ebp+var_9C]
		mov	[esp+118h+var_114], eax
		mov	edx, [ebp+var_A0]
		mov	[esp+118h+var_118], edx
		call	silc_client_unref_client
		mov	eax, [ebp+var_3C]
		mov	edx, [ebp+var_38]
		sub	edx, eax
		cmp	esi, edx
		ja	loc_62BA3ED7
		lea	esi, [eax+esi]
		mov	[ebp+var_3C], esi
		test	eax, eax
		jz	loc_62BA3ED7
		mov	eax, [ebp+var_B0]
		sub	eax, edi
		cmp	eax, 3
		jbe	loc_62BA3EBE
		add	edi, 4
		jmp	loc_62BA3950
; ---------------------------------------------------------------------------

loc_62BA3A34:				; CODE XREF: silc_client_command_reply_join+6BFj
		mov	eax, [eax+3D8h]
		mov	[esp+118h+var_118], eax
		mov	[ebp+var_D4], edx
		call	silc_rwlock_wrlock
		movzx	eax, [ebp+var_B1]
		mov	cl, [ebp+var_C8]
		shl	ecx, 18h
		or	eax, ecx
		movzx	ecx, [ebp+var_B3]
		shl	ecx, 10h
		or	eax, ecx
		movzx	ecx, [ebp+var_B2]
		shl	ecx, 8
		or	eax, ecx
		mov	[esp+118h+var_108], eax
		mov	edx, [ebp+var_D4]
		mov	[esp+118h+var_10C], edx
		mov	ecx, [ebp+var_A4]
		mov	[esp+118h+var_110], ecx
		mov	eax, [ebp+var_9C]
		mov	[esp+118h+var_114], eax
		mov	ecx, [ebp+var_A0]
		mov	[esp+118h+var_118], ecx
		call	silc_client_add_to_channel
		mov	edx, [ebp+var_D4]
		mov	eax, [edx+3D8h]
		mov	[esp+118h+var_118], eax
		call	silc_rwlock_unlock
		mov	edx, [ebp+var_D4]
		jmp	loc_62BA39E1
; ---------------------------------------------------------------------------

loc_62BA3AC1:				; CODE XREF: silc_client_command_reply_join+2D6j
		lea	ecx, [ebp+var_70]
		mov	[esp+118h+var_108], ecx	; int
		mov	[esp+118h+var_10C], 0 ;	int
		mov	[esp+118h+var_110], esi	; char *
		mov	eax, [ebp+var_9C]
		mov	[esp+118h+var_114], eax	; int
		mov	ecx, [ebp+var_A0]
		mov	[esp+118h+var_118], ecx	; int
		mov	[ebp+var_D4], edx
		call	silc_client_add_channel
		mov	[ebp+var_A4], eax
		test	eax, eax
		mov	edx, [ebp+var_D4]
		jz	loc_62BA3E98
		mov	eax, [ebp+var_A4]
		mov	[esp+118h+var_110], eax
		mov	ecx, [ebp+var_9C]
		mov	[esp+118h+var_114], ecx
		mov	eax, [ebp+var_A0]
		mov	[esp+118h+var_118], eax
		mov	[ebp+var_D4], edx
		call	silc_client_ref_channel
		mov	edx, [ebp+var_D4]
		jmp	loc_62BA3617
; ---------------------------------------------------------------------------

loc_62BA3B39:				; CODE XREF: silc_client_command_reply_join+495j
		mov	[esp+118h+var_110], 4B9h
		mov	[esp+118h+var_114], offset aCommand_reply_ ; "command_reply.c"
		mov	[esp+118h+var_118], offset aSilc_verifyS_6 ; "SILC_VERIFY %s:%d"
		call	silc_format
		mov	[esp+118h+var_114], eax
		mov	[esp+118h+var_118], 3
		call	silc_log_output
		jmp	loc_62BA37BB
; ---------------------------------------------------------------------------

loc_62BA3B6A:				; CODE XREF: silc_client_command_reply_join+637j
		mov	edx, [ebp+var_CC]
		mov	ebx, [ebp+var_D0]

loc_62BA3B76:				; CODE XREF: silc_client_command_reply_join+615j
		lea	ecx, [ebp+var_1C]
		mov	[esp+118h+var_110], ecx
		mov	[esp+118h+var_114], 5
		mov	[esp+118h+var_118], edx
		mov	[ebp+var_D4], edx
		call	silc_argument_get_arg_type
		mov	ecx, eax
		test	eax, eax
		mov	edx, [ebp+var_D4]
		jz	short loc_62BA3BA9
		cmp	[ebp+var_1C], 4
		jz	loc_62BA3E75

loc_62BA3BA9:				; CODE XREF: silc_client_command_reply_join+87Dj
		xor	esi, esi

loc_62BA3BAB:				; CODE XREF: silc_client_command_reply_join+B73j
		mov	eax, [ebp+var_A4]
		mov	[eax+12Ch], esi
		lea	ecx, [ebp+var_1C]
		mov	[esp+118h+var_110], ecx
		mov	[esp+118h+var_114], 7
		mov	[esp+118h+var_118], edx
		mov	[ebp+var_D4], edx
		call	silc_argument_get_arg_type
		test	eax, eax
		mov	edx, [ebp+var_D4]
		jz	short loc_62BA3BF1
		mov	ecx, [ebp+var_A4]
		cmp	dword ptr [ecx+158h], 0
		jz	loc_62BA3EF0

loc_62BA3BF1:				; CODE XREF: silc_client_command_reply_join+8BCj
					; silc_client_command_reply_join+C08j
		mov	[esp+118h+var_110], 0
		mov	[esp+118h+var_114], 0Ah
		mov	[esp+118h+var_118], edx
		mov	[ebp+var_D4], edx
		call	silc_argument_get_arg_type
		mov	[ebp+var_A8], eax
		test	eax, eax
		mov	edx, [ebp+var_D4]
		jz	short loc_62BA3C67
		mov	ecx, [ebp+var_A4]
		mov	eax, [ecx+108h]
		mov	[esp+118h+var_118], eax
		call	silc_free
		xor	eax, eax
		or	ecx, 0FFFFFFFFh
		mov	edi, [ebp+var_A8]
		repne scasb
		not	ecx
		dec	ecx
		mov	[esp+118h+var_114], ecx
		mov	eax, [ebp+var_A8]
		mov	[esp+118h+var_118], eax
		call	silc_memdup
		mov	ecx, [ebp+var_A4]
		mov	[ecx+108h], eax
		mov	edx, [ebp+var_D4]

loc_62BA3C67:				; CODE XREF: silc_client_command_reply_join+8FDj
		lea	eax, [ebp+var_1C]
		mov	[esp+118h+var_110], eax
		mov	[esp+118h+var_114], 0Fh
		mov	[esp+118h+var_118], edx
		mov	[ebp+var_D4], edx
		call	silc_argument_get_arg_type
		mov	edi, eax
		test	eax, eax
		mov	edx, [ebp+var_D4]
		jz	short loc_62BA3CE2
		mov	ecx, [ebp+var_A4]
		mov	eax, [ecx+10Ch]
		test	eax, eax
		jz	short loc_62BA3CAE
		mov	[esp+118h+var_118], eax
		call	silc_pkcs_public_key_free
		mov	edx, [ebp+var_D4]

loc_62BA3CAE:				; CODE XREF: silc_client_command_reply_join+97Ej
		mov	eax, [ebp+var_A4]
		mov	dword ptr [eax+10Ch], 0
		add	eax, 10Ch
		mov	[esp+118h+var_110], eax
		mov	eax, [ebp+var_1C]
		mov	[esp+118h+var_114], eax
		mov	[esp+118h+var_118], edi
		mov	[ebp+var_D4], edx
		call	silc_public_key_payload_decode
		mov	edx, [ebp+var_D4]

loc_62BA3CE2:				; CODE XREF: silc_client_command_reply_join+96Ej
		lea	ecx, [ebp+var_1C]
		mov	[esp+118h+var_110], ecx
		mov	[esp+118h+var_114], 11h
		mov	[esp+118h+var_118], edx
		mov	[ebp+var_D4], edx
		call	silc_argument_get_arg_type
		mov	ecx, eax
		test	eax, eax
		mov	edx, [ebp+var_D4]
		jz	short loc_62BA3D3B
		cmp	[ebp+var_1C], 4
		jnz	short loc_62BA3D3B
		movzx	edi, byte ptr [eax+3]
		movzx	eax, byte ptr [eax]
		shl	eax, 18h
		or	edi, eax
		movzx	eax, byte ptr [ecx+1]
		shl	eax, 10h
		or	edi, eax
		movzx	eax, byte ptr [ecx+2]
		shl	eax, 8
		or	edi, eax
		mov	eax, [ebp+var_A4]
		mov	[eax+130h], edi

loc_62BA3D3B:				; CODE XREF: silc_client_command_reply_join+9E9j
					; silc_client_command_reply_join+9EFj
		mov	ecx, [ebp+var_A4]
		test	byte ptr [ecx+12Ch], 20h
		jnz	short loc_62BA3D54
		mov	dword ptr [ecx+130h], 0

loc_62BA3D54:				; CODE XREF: silc_client_command_reply_join+A28j
		lea	eax, [ebp+var_1C]
		mov	[esp+118h+var_110], eax
		mov	[esp+118h+var_114], 10h
		mov	[esp+118h+var_118], edx
		call	silc_argument_get_arg_type
		test	eax, eax
		jz	short loc_62BA3D90
		mov	[esp+118h+var_10C], 0
		mov	edx, [ebp+var_1C]
		mov	[esp+118h+var_110], edx
		mov	[esp+118h+var_114], eax
		mov	edx, [ebp+var_A4]
		mov	[esp+118h+var_118], edx
		call	silc_client_channel_save_public_keys

loc_62BA3D90:				; CODE XREF: silc_client_command_reply_join+A4Dj
		mov	eax, [ebp+var_A4]
		mov	ecx, [ebp+var_9C]
		mov	[ecx+30h], eax
		mov	eax, [eax+144h]
		mov	[esp+118h+var_118], eax
		call	silc_rwlock_unlock
		mov	ecx, [ebp+var_A4]
		mov	eax, [ecx+158h]
		xor	edx, edx
		test	eax, eax
		jz	short loc_62BA3DC9
		mov	[esp+118h+var_118], eax
		call	silc_cipher_get_name
		mov	edx, eax

loc_62BA3DC9:				; CODE XREF: silc_client_command_reply_join+A9Dj
		lea	edi, [ebp+var_30]
		mov	[esp+118h+var_114], edi
		mov	ecx, [ebp+var_A4]
		mov	eax, [ecx+134h]
		mov	[esp+118h+var_118], eax
		mov	[ebp+var_D4], edx
		call	silc_hash_table_list
		mov	ecx, [ebp+var_A4]
		mov	eax, [ecx+130h]
		mov	[esp+118h+var_F0], eax
		mov	eax, [ecx+110h]
		mov	[esp+118h+var_F4], eax
		mov	eax, [ecx+10Ch]
		mov	[esp+118h+var_F8], eax
		mov	eax, [ebp+var_AC]
		mov	[esp+118h+var_FC], eax
		mov	edx, [ebp+var_D4]
		mov	[esp+118h+var_100], edx
		mov	edx, [ebp+var_A8]
		mov	[esp+118h+var_104], edx
		mov	[esp+118h+var_108], edi
		mov	[esp+118h+var_10C], esi
		mov	[esp+118h+var_110], ecx
		mov	eax, [ecx]
		mov	[esp+118h+var_114], eax
		mov	[esp+118h+var_118], ebx
		call	sub_62B9ED04
		mov	[esp+118h+var_118], edi
		call	silc_hash_table_list_reset
		mov	ecx, [ebp+var_A4]
		mov	[esp+118h+var_110], ecx
		mov	eax, [ebp+var_9C]
		mov	[esp+118h+var_114], eax
		mov	edx, [ebp+var_A0]
		mov	[esp+118h+var_118], edx
		call	silc_client_unref_channel
		jmp	loc_62BA33A0
; ---------------------------------------------------------------------------

loc_62BA3E75:				; CODE XREF: silc_client_command_reply_join+883j
		movzx	esi, byte ptr [eax+3]
		movzx	eax, byte ptr [eax]
		shl	eax, 18h
		or	esi, eax
		movzx	eax, byte ptr [ecx+1]
		shl	eax, 10h
		or	esi, eax
		movzx	eax, byte ptr [ecx+2]
		shl	eax, 8
		or	esi, eax
		jmp	loc_62BA3BAB
; ---------------------------------------------------------------------------

loc_62BA3E98:				; CODE XREF: silc_client_command_reply_join+7E0j
		mov	[ebp+var_20], 0
		mov	[ebp+var_24], 0
		mov	al, [ebx+5Ch]
		test	al, al
		jnz	loc_62BA3818
		mov	byte ptr [ebx+5Dh], 2Ch
		mov	byte ptr [ebx+5Ch], 2Ch
		jmp	loc_62BA35AB
; ---------------------------------------------------------------------------

loc_62BA3EBE:				; CODE XREF: silc_client_command_reply_join+706j
		mov	edx, [ebp+var_A4]
		mov	eax, [edx+144h]
		mov	[esp+118h+var_118], eax
		call	silc_rwlock_unlock
		jmp	loc_62BA33A0
; ---------------------------------------------------------------------------

loc_62BA3ED7:				; CODE XREF: silc_client_command_reply_join+6E7j
					; silc_client_command_reply_join+6F5j
		mov	ecx, [ebp+var_A4]
		mov	eax, [ecx+144h]
		mov	[esp+118h+var_118], eax
		call	silc_rwlock_unlock
		jmp	loc_62BA33A0
; ---------------------------------------------------------------------------

loc_62BA3EF0:				; CODE XREF: silc_client_command_reply_join+8CBj
		mov	[ebp+var_50], eax
		mov	[ebp+var_4C], eax
		add	eax, [ebp+var_1C]
		mov	[ebp+var_44], eax
		mov	[ebp+var_48], eax
		mov	[esp+118h+var_10C], ecx
		lea	eax, [ebp+var_50]
		mov	[esp+118h+var_110], eax
		mov	eax, [ebp+var_9C]
		mov	[esp+118h+var_114], eax
		mov	ecx, [ebp+var_A0]
		mov	[esp+118h+var_118], ecx
		call	silc_client_save_channel_key
		mov	edx, [ebp+var_D4]
		jmp	loc_62BA3BF1
silc_client_command_reply_join endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_62BA3F30	proc near		; DATA XREF: silc_client_command_reply_join+49Fo

var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_10		= dword	ptr  18h

		push	ebp
		mov	ebp, esp
		push	ebx
		sub	esp, 14h
		mov	ebx, [ebp+arg_10]
		mov	eax, [ebx+60h]
		mov	word ptr [eax+17Ch], 0
		mov	[esp+18h+var_10], eax
		mov	eax, [ebp+arg_4]
		mov	[esp+18h+var_14], eax
		mov	eax, [ebp+arg_0]
		mov	[esp+18h+var_18], eax
		call	silc_client_unref_channel
		mov	al, [ebx+30h]
		mov	dl, al
		and	edx, 0FFFFFFFBh
		mov	[ebx+30h], dl
		test	al, 4
		jz	short loc_62BA3F74
		add	esp, 14h
		pop	ebx
		leave
		retn
; ---------------------------------------------------------------------------
		align 4

loc_62BA3F74:				; CODE XREF: sub_62BA3F30+39j
		add	ebx, 8
		mov	[ebp+arg_0], ebx
		add	esp, 14h
		pop	ebx
		leave
		jmp	silc_fsm_continue_sync
sub_62BA3F30	endp

; Exported entry  65. silc_client_command_reply_ping

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public silc_client_command_reply_ping
silc_client_command_reply_ping proc near ; DATA	XREF: silc_client_commands_unregister+7DEo
					; silc_client_commands_register+55Fo ...

var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		sub	esp, 3Ch
		mov	ebx, [ebp+arg_4]
		mov	esi, [ebx+4]
		mov	edi, [esi+4Ch]
		call	silc_time
		mov	ecx, [ebx+60h]
		test	byte ptr [ebx+64h], 2
		jz	short loc_62BA3FFC
		mov	[ebp+var_20], ecx
		mov	[ebp+var_1C], 0
		sub	eax, [ebp+var_20]
		sbb	edx, [ebp+var_1C]
		mov	ecx, [ebx+4]
		mov	ecx, [ecx+4Ch]
		mov	ecx, [ecx+18h]
		mov	ecx, [ecx+48h]
		mov	ecx, [ecx]
		mov	[ebp+var_20], ecx
		mov	ecx, eax
		xor	ecx, 1
		or	ecx, edx
		jz	short loc_62BA4024
		mov	ecx, offset aS_1 ; "s"

loc_62BA3FD3:				; CODE XREF: silc_client_command_reply_ping+A5j
		mov	[esp+48h+var_30], ecx
		mov	[esp+48h+var_34], eax
		mov	eax, [esi+8]
		mov	[esp+48h+var_38], eax
		mov	[esp+48h+var_3C], offset aPingReplyFromS ; "Ping reply from %s:	%d second%s"
		mov	[esp+48h+var_40], 0
		mov	[esp+48h+var_44], esi
		mov	[esp+48h+var_48], edi
		call	[ebp+var_20]

loc_62BA3FFC:				; CODE XREF: silc_client_command_reply_ping+1Ej
		mov	[esp+48h+var_48], ebx
		call	sub_62B9ED04
		mov	[esp+48h+var_44], offset silc_client_command_reply_processed
		mov	eax, [ebp+arg_0]
		mov	[esp+48h+var_48], eax
		call	silc_fsm_next
		xor	eax, eax
		add	esp, 3Ch
		pop	ebx
		pop	esi
		pop	edi
		leave
		retn
; ---------------------------------------------------------------------------
		align 4

loc_62BA4024:				; CODE XREF: silc_client_command_reply_ping+48j
		mov	ecx, offset byte_62BA91BD
		jmp	short loc_62BA3FD3
silc_client_command_reply_ping endp

; ---------------------------------------------------------------------------
		align 4
; Exported entry  71. silc_client_command_reply_stats

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public silc_client_command_reply_stats
silc_client_command_reply_stats	proc near ; DATA XREF: silc_client_commands_unregister+72Eo
					; silc_client_commands_register+4E4o ...

var_138		= dword	ptr -138h
var_134		= dword	ptr -134h
var_130		= dword	ptr -130h
var_12C		= dword	ptr -12Ch
var_128		= dword	ptr -128h
var_124		= dword	ptr -124h
var_120		= dword	ptr -120h
var_11C		= dword	ptr -11Ch
var_118		= dword	ptr -118h
var_114		= dword	ptr -114h
var_110		= dword	ptr -110h
var_10C		= dword	ptr -10Ch
var_108		= dword	ptr -108h
var_104		= dword	ptr -104h
var_100		= dword	ptr -100h
var_FC		= dword	ptr -0FCh
var_F8		= dword	ptr -0F8h
var_F4		= dword	ptr -0F4h
var_F0		= dword	ptr -0F0h
var_EC		= dword	ptr -0ECh
var_E8		= dword	ptr -0E8h
var_E4		= dword	ptr -0E4h
var_E0		= dword	ptr -0E0h
var_DC		= dword	ptr -0DCh
var_D8		= dword	ptr -0D8h
var_D4		= dword	ptr -0D4h
var_D0		= dword	ptr -0D0h
var_CC		= dword	ptr -0CCh
var_C8		= dword	ptr -0C8h
var_C4		= dword	ptr -0C4h
var_C0		= dword	ptr -0C0h
var_BC		= dword	ptr -0BCh
var_AC		= dword	ptr -0ACh
var_A0		= byte ptr -0A0h
var_9C		= dword	ptr -9Ch
var_90		= byte ptr -90h
var_8C		= byte ptr -8Ch
var_88		= byte ptr -88h
var_84		= byte ptr -84h
var_80		= byte ptr -80h
var_7C		= byte ptr -7Ch
var_78		= byte ptr -78h
var_74		= byte ptr -74h
var_70		= byte ptr -70h
var_6C		= byte ptr -6Ch
var_68		= byte ptr -68h
var_64		= byte ptr -64h
var_60		= byte ptr -60h
var_5C		= byte ptr -5Ch
var_58		= byte ptr -58h
var_54		= byte ptr -54h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		sub	esp, 12Ch
		mov	ebx, [ebp+arg_4]
		mov	edi, [ebp+arg_8]
		mov	[esp+138h+var_138], edi
		call	silc_command_get_args
		mov	esi, eax
		mov	[ebp+var_1C], 0
		mov	dl, [ebx+5Dh]
		test	dl, dl
		jz	short loc_62BA40C0
		test	byte ptr [ebx+64h], 2
		jnz	loc_62BA4168

loc_62BA4060:				; CODE XREF: silc_client_command_reply_stats+182j
		mov	[ebp+var_20], 0
		mov	[ebp+var_24], 0
		mov	al, [ebx+5Ch]
		test	al, al
		jnz	loc_62BA4140
		mov	al, [ebx+5Dh]
		mov	[ebx+5Ch], al
		xor	eax, eax
		xor	edx, edx

loc_62BA4083:				; CODE XREF: silc_client_command_reply_stats+137j
		mov	[esp+138h+var_130], edx
		mov	[esp+138h+var_134], eax
		mov	[esp+138h+var_138], ebx
		call	sub_62B9ED04
		movzx	ecx, byte ptr [ebx+5Dh]
		mov	edx, edi
		mov	eax, ebx
		call	sub_62B9EB60
		mov	[esp+138h+var_134], offset silc_client_command_reply_processed
		mov	eax, [ebp+arg_0]
		mov	[esp+138h+var_138], eax
		call	silc_fsm_next

loc_62BA40B3:				; CODE XREF: silc_client_command_reply_stats+22Fj
		xor	eax, eax
		add	esp, 12Ch
		pop	ebx
		pop	esi
		pop	edi
		leave
		retn
; ---------------------------------------------------------------------------

loc_62BA40C0:				; CODE XREF: silc_client_command_reply_stats+28j
		mov	[esp+138h+var_138], eax
		mov	[ebp+var_A0], dl
		call	silc_argument_get_arg_num
		cmp	eax, 1
		jbe	short loc_62BA40EA
		mov	[esp+138h+var_138], esi
		call	silc_argument_get_arg_num
		cmp	eax, 3
		mov	dl, [ebp+var_A0]
		jbe	loc_62BA41DC

loc_62BA40EA:				; CODE XREF: silc_client_command_reply_stats+A5j
		mov	[ebp+var_24], 0
		mov	[ebp+var_20], 0
		mov	al, [ebx+5Ch]
		test	al, al
		jnz	loc_62BA41B4
		mov	byte ptr [ebx+5Dh], 1Dh
		mov	byte ptr [ebx+5Ch], 1Dh
		xor	eax, eax
		xor	edx, edx

loc_62BA410F:				; CODE XREF: silc_client_command_reply_stats+1ABj
		mov	[esp+138h+var_130], edx
		mov	[esp+138h+var_134], eax
		mov	[esp+138h+var_138], ebx
		call	sub_62B9ED04
		mov	[esp+138h+var_134], offset silc_client_command_reply_processed
		mov	eax, [ebp+arg_0]
		mov	[esp+138h+var_138], eax
		call	silc_fsm_next
		xor	eax, eax
		add	esp, 12Ch
		pop	ebx
		pop	esi
		pop	edi
		leave
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_62BA4140:				; CODE XREF: silc_client_command_reply_stats+47j
		lea	edx, [ebp+var_24]
		mov	[esp+138h+var_12C], edx
		lea	edx, [ebp+var_20]
		mov	[esp+138h+var_130], edx
		mov	[esp+138h+var_134], esi
		movzx	eax, al
		mov	[esp+138h+var_138], eax
		call	silc_status_get_args
		mov	edx, [ebp+var_24]
		mov	eax, [ebp+var_20]
		jmp	loc_62BA4083
; ---------------------------------------------------------------------------

loc_62BA4168:				; CODE XREF: silc_client_command_reply_stats+2Ej
		mov	eax, [ebx+4]
		mov	eax, [eax+4Ch]
		mov	eax, [eax+18h]
		mov	eax, [eax+48h]
		mov	eax, [eax]
		mov	[ebp+var_9C], eax
		movzx	edx, dl
		mov	[esp+138h+var_138], edx
		call	silc_get_status_message
		mov	edx, [ebx+4]
		mov	[esp+138h+var_128], eax
		mov	[esp+138h+var_12C], offset aCannotGetStats ; "Cannot get stats:	%s"
		mov	[esp+138h+var_130], 3
		mov	[esp+138h+var_134], edx
		mov	eax, [edx+4Ch]
		mov	[esp+138h+var_138], eax
		call	[ebp+var_9C]
		jmp	loc_62BA4060
; ---------------------------------------------------------------------------
		align 4

loc_62BA41B4:				; CODE XREF: silc_client_command_reply_stats+D1j
		lea	edx, [ebp+var_20]
		mov	[esp+138h+var_12C], edx
		lea	edx, [ebp+var_24]
		mov	[esp+138h+var_130], edx
		mov	[esp+138h+var_134], esi
		movzx	eax, al
		mov	[esp+138h+var_138], eax
		call	silc_status_get_args
		mov	edx, [ebp+var_20]
		mov	eax, [ebp+var_24]
		jmp	loc_62BA410F
; ---------------------------------------------------------------------------

loc_62BA41DC:				; CODE XREF: silc_client_command_reply_stats+B8j
		mov	[esp+138h+var_128], 0
		lea	eax, [ebp+var_54]
		mov	[esp+138h+var_12C], eax
		mov	[esp+138h+var_130], 0
		mov	[esp+138h+var_134], 2
		mov	[esp+138h+var_138], esi
		mov	[ebp+var_A0], dl
		call	silc_argument_get_decoded
		test	al, al
		mov	dl, [ebp+var_A0]
		jnz	short loc_62BA4260
		mov	[ebp+var_20], 0
		mov	[ebp+var_24], 0
		mov	al, [ebx+5Ch]
		test	al, al
		jnz	loc_62BA43BC
		mov	byte ptr [ebx+5Dh], 1Dh
		mov	byte ptr [ebx+5Ch], 1Dh
		xor	eax, eax
		xor	edx, edx

loc_62BA4238:				; CODE XREF: silc_client_command_reply_stats+3B3j
		mov	[esp+138h+var_130], edx
		mov	[esp+138h+var_134], eax
		mov	[esp+138h+var_138], ebx
		call	sub_62B9ED04

loc_62BA4248:				; CODE XREF: silc_client_command_reply_stats+38Bj
		mov	[esp+138h+var_134], offset silc_client_command_reply_processed
		mov	eax, [ebp+arg_0]
		mov	[esp+138h+var_138], eax
		call	silc_fsm_next
		jmp	loc_62BA40B3
; ---------------------------------------------------------------------------

loc_62BA4260:				; CODE XREF: silc_client_command_reply_stats+1E5j
		lea	eax, [ebp+var_90]
		mov	[ebp+var_AC], eax
		mov	ecx, 3Ch
		mov	edi, eax
		mov	al, dl
		rep stosb
		lea	eax, [ebp+var_1C]
		mov	[esp+138h+var_130], eax
		mov	[esp+138h+var_134], 3
		mov	[esp+138h+var_138], esi
		call	silc_argument_get_arg_type
		test	eax, eax
		jz	loc_62BA43A5
		mov	[ebp+var_34], eax
		mov	[ebp+var_30], eax
		add	eax, [ebp+var_1C]
		mov	[ebp+var_28], eax
		mov	[ebp+var_2C], eax
		mov	[esp+138h+var_BC], 1Dh
		lea	eax, [ebp+var_58]
		mov	[esp+138h+var_C0], eax
		mov	[esp+138h+var_C4], 5
		lea	eax, [ebp+var_5C]
		mov	[esp+138h+var_C8], eax
		mov	[esp+138h+var_CC], 5
		lea	eax, [ebp+var_60]
		mov	[esp+138h+var_D0], eax
		mov	[esp+138h+var_D4], 5
		lea	eax, [ebp+var_64]
		mov	[esp+138h+var_D8], eax
		mov	[esp+138h+var_DC], 5
		lea	eax, [ebp+var_68]
		mov	[esp+138h+var_E0], eax
		mov	[esp+138h+var_E4], 5
		lea	eax, [ebp+var_6C]
		mov	[esp+138h+var_E8], eax
		mov	[esp+138h+var_EC], 5
		lea	eax, [ebp+var_70]
		mov	[esp+138h+var_F0], eax
		mov	[esp+138h+var_F4], 5
		lea	eax, [ebp+var_74]
		mov	[esp+138h+var_F8], eax
		mov	[esp+138h+var_FC], 5
		lea	eax, [ebp+var_78]
		mov	[esp+138h+var_100], eax
		mov	[esp+138h+var_104], 5
		lea	eax, [ebp+var_7C]
		mov	[esp+138h+var_108], eax
		mov	[esp+138h+var_10C], 5
		lea	eax, [ebp+var_80]
		mov	[esp+138h+var_110], eax
		mov	[esp+138h+var_114], 5
		lea	eax, [ebp+var_84]
		mov	[esp+138h+var_118], eax
		mov	[esp+138h+var_11C], 5
		lea	eax, [ebp+var_88]
		mov	[esp+138h+var_120], eax
		mov	[esp+138h+var_124], 5
		lea	eax, [ebp+var_8C]
		mov	[esp+138h+var_128], eax
		mov	[esp+138h+var_12C], 5
		lea	eax, [ebp+var_90]
		mov	[esp+138h+var_130], eax
		mov	[esp+138h+var_134], 5
		lea	eax, [ebp+var_34]
		mov	[esp+138h+var_138], eax
		call	silc_buffer_unformat

loc_62BA43A5:				; CODE XREF: silc_client_command_reply_stats+264j
		lea	eax, [ebp+var_90]
		mov	[esp+138h+var_134], eax
		mov	[esp+138h+var_138], ebx
		call	sub_62B9ED04
		jmp	loc_62BA4248
; ---------------------------------------------------------------------------

loc_62BA43BC:				; CODE XREF: silc_client_command_reply_stats+1FAj
		lea	edx, [ebp+var_24]
		mov	[esp+138h+var_12C], edx
		lea	edx, [ebp+var_20]
		mov	[esp+138h+var_130], edx
		mov	[esp+138h+var_134], esi
		movzx	eax, al
		mov	[esp+138h+var_138], eax
		call	silc_status_get_args
		mov	edx, [ebp+var_24]
		mov	eax, [ebp+var_20]
		jmp	loc_62BA4238
silc_client_command_reply_stats	endp

; Exported entry  55. silc_client_command_reply_info

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public silc_client_command_reply_info
silc_client_command_reply_info proc near ; DATA	XREF: silc_client_commands_unregister+67Eo
					; silc_client_commands_register+469o ...

var_78		= dword	ptr -78h
var_74		= dword	ptr -74h
var_70		= dword	ptr -70h
var_6C		= dword	ptr -6Ch
var_68		= dword	ptr -68h
var_58		= dword	ptr -58h
var_54		= dword	ptr -54h
var_50		= dword	ptr -50h
var_4C		= dword	ptr -4Ch
var_40		= dword	ptr -40h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		sub	esp, 6Ch
		mov	ebx, [ebp+arg_4]
		mov	esi, [ebp+arg_8]
		mov	edi, [ebx+4]
		mov	eax, [edi+4Ch]
		mov	[ebp+var_4C], eax
		mov	[esp+78h+var_78], esi
		call	silc_command_get_args
		mov	edx, eax
		mov	al, [ebx+5Dh]
		test	al, al
		jz	short loc_62BA4474
		test	byte ptr [ebx+64h], 2
		jnz	loc_62BA4508

loc_62BA4417:				; CODE XREF: silc_client_command_reply_info+166j
		mov	[ebp+var_1C], 0
		mov	[ebp+var_20], 0
		mov	al, [ebx+5Ch]
		test	al, al
		jnz	loc_62BA44E0
		mov	al, [ebx+5Dh]
		mov	[ebx+5Ch], al
		xor	eax, eax
		xor	edx, edx

loc_62BA443A:				; CODE XREF: silc_client_command_reply_info+11Fj
		mov	[esp+78h+var_70], edx
		mov	[esp+78h+var_74], eax
		mov	[esp+78h+var_78], ebx
		call	sub_62B9ED04
		movzx	ecx, byte ptr [ebx+5Dh]
		mov	edx, esi
		mov	eax, ebx
		call	sub_62B9EB60
		mov	[esp+78h+var_74], offset silc_client_command_reply_processed
		mov	eax, [ebp+arg_0]
		mov	[esp+78h+var_78], eax
		call	silc_fsm_next

loc_62BA446A:				; CODE XREF: silc_client_command_reply_info+221j
		xor	eax, eax
		add	esp, 6Ch
		pop	ebx
		pop	esi
		pop	edi
		leave
		retn
; ---------------------------------------------------------------------------

loc_62BA4474:				; CODE XREF: silc_client_command_reply_info+27j
		mov	[esp+78h+var_78], edx
		mov	[ebp+var_54], edx
		call	silc_argument_get_arg_num
		cmp	eax, 3
		mov	edx, [ebp+var_54]
		ja	loc_62BA4578

loc_62BA448B:				; CODE XREF: silc_client_command_reply_info+1A2j
		mov	[ebp+var_20], 0
		mov	[ebp+var_1C], 0
		mov	al, [ebx+5Ch]
		test	al, al
		jnz	loc_62BA4550
		mov	byte ptr [ebx+5Dh], 1Dh
		mov	byte ptr [ebx+5Ch], 1Dh
		xor	eax, eax
		xor	edx, edx

loc_62BA44B0:				; CODE XREF: silc_client_command_reply_info+18Fj
		mov	[esp+78h+var_70], edx
		mov	[esp+78h+var_74], eax
		mov	[esp+78h+var_78], ebx
		call	sub_62B9ED04
		mov	[esp+78h+var_74], offset silc_client_command_reply_processed
		mov	eax, [ebp+arg_0]
		mov	[esp+78h+var_78], eax
		call	silc_fsm_next
		xor	eax, eax
		add	esp, 6Ch
		pop	ebx
		pop	esi
		pop	edi
		leave
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_62BA44E0:				; CODE XREF: silc_client_command_reply_info+46j
		lea	ecx, [ebp+var_20]
		mov	[esp+78h+var_6C], ecx
		lea	ecx, [ebp+var_1C]
		mov	[esp+78h+var_70], ecx
		mov	[esp+78h+var_74], edx
		movzx	eax, al
		mov	[esp+78h+var_78], eax
		call	silc_status_get_args
		mov	edx, [ebp+var_20]
		mov	eax, [ebp+var_1C]
		jmp	loc_62BA443A
; ---------------------------------------------------------------------------

loc_62BA4508:				; CODE XREF: silc_client_command_reply_info+2Dj
		mov	ecx, [ebx+4]
		mov	ecx, [ecx+4Ch]
		mov	ecx, [ecx+18h]
		mov	ecx, [ecx+48h]
		mov	edi, [ecx]
		movzx	eax, al
		mov	[esp+78h+var_78], eax
		mov	[ebp+var_54], edx
		call	silc_get_status_message
		mov	ecx, [ebx+4]
		mov	[esp+78h+var_68], eax
		mov	[esp+78h+var_6C], offset aCannotGetInfoS ; "Cannot get info: %s"
		mov	[esp+78h+var_70], 3
		mov	[esp+78h+var_74], ecx
		mov	eax, [ecx+4Ch]
		mov	[esp+78h+var_78], eax
		call	edi
		mov	edx, [ebp+var_54]
		jmp	loc_62BA4417
; ---------------------------------------------------------------------------
		align 10h

loc_62BA4550:				; CODE XREF: silc_client_command_reply_info+BAj
		lea	ecx, [ebp+var_1C]
		mov	[esp+78h+var_6C], ecx
		lea	ecx, [ebp+var_20]
		mov	[esp+78h+var_70], ecx
		mov	[esp+78h+var_74], edx
		movzx	eax, al
		mov	[esp+78h+var_78], eax
		call	silc_status_get_args
		mov	edx, [ebp+var_1C]
		mov	eax, [ebp+var_20]
		jmp	loc_62BA44B0
; ---------------------------------------------------------------------------

loc_62BA4578:				; CODE XREF: silc_client_command_reply_info+A1j
		mov	[esp+78h+var_78], edx
		call	silc_argument_get_arg_num
		cmp	eax, 4
		mov	edx, [ebp+var_54]
		ja	loc_62BA448B
		mov	[esp+78h+var_68], 0
		lea	esi, [ebp+var_40]
		mov	[esp+78h+var_6C], esi
		mov	[esp+78h+var_70], 0
		mov	[esp+78h+var_74], 2
		mov	[esp+78h+var_78], edx
		mov	[ebp+var_54], edx
		call	silc_argument_get_decoded
		test	al, al
		mov	edx, [ebp+var_54]
		jnz	short loc_62BA460A

loc_62BA45BD:				; CODE XREF: silc_client_command_reply_info+275j
		mov	[ebp+var_1C], 0
		mov	[ebp+var_20], 0
		mov	al, [ebx+5Ch]
		test	al, al
		jnz	loc_62BA46B9

loc_62BA45D6:				; CODE XREF: silc_client_command_reply_info+310j
		mov	byte ptr [ebx+5Dh], 1Dh
		mov	byte ptr [ebx+5Ch], 1Dh
		xor	eax, eax
		xor	edx, edx

loc_62BA45E2:				; CODE XREF: silc_client_command_reply_info+2F8j
					; silc_client_command_reply_info+339j
		mov	[esp+78h+var_70], edx
		mov	[esp+78h+var_74], eax
		mov	[esp+78h+var_78], ebx
		call	sub_62B9ED04

loc_62BA45F2:				; CODE XREF: silc_client_command_reply_info+2D0j
					; silc_client_command_reply_info+360j
		mov	[esp+78h+var_74], offset silc_client_command_reply_processed
		mov	eax, [ebp+arg_0]
		mov	[esp+78h+var_78], eax
		call	silc_fsm_next
		jmp	loc_62BA446A
; ---------------------------------------------------------------------------

loc_62BA460A:				; CODE XREF: silc_client_command_reply_info+1D7j
		mov	[esp+78h+var_70], 0
		mov	[esp+78h+var_74], 3
		mov	[esp+78h+var_78], edx
		mov	[ebp+var_54], edx
		call	silc_argument_get_arg_type
		test	eax, eax
		mov	edx, [ebp+var_54]
		jz	loc_62BA46E1
		mov	[esp+78h+var_70], 0
		mov	[esp+78h+var_74], 4
		mov	[esp+78h+var_78], edx
		mov	[ebp+var_54], edx
		mov	[ebp+var_58], eax
		call	silc_argument_get_arg_type
		mov	[ebp+var_50], eax
		test	eax, eax
		mov	edx, [ebp+var_54]
		mov	ecx, [ebp+var_58]
		jz	loc_62BA45BD
		mov	[esp+78h+var_70], esi
		mov	[esp+78h+var_74], edi
		mov	eax, [ebp+var_4C]
		mov	[esp+78h+var_78], eax
		mov	[ebp+var_58], ecx
		call	silc_client_get_server_by_id
		mov	edx, eax
		test	eax, eax
		mov	ecx, [ebp+var_58]
		jz	loc_62BA4722

loc_62BA4682:				; CODE XREF: silc_client_command_reply_info+37Fj
		mov	eax, [edx+4]
		mov	[esp+78h+var_6C], eax
		mov	eax, [edx]
		mov	[esp+78h+var_70], eax
		mov	[esp+78h+var_74], edx
		mov	[esp+78h+var_78], ebx
		mov	[ebp+var_54], edx
		call	sub_62B9ED04
		mov	edx, [ebp+var_54]
		mov	[esp+78h+var_70], edx
		mov	[esp+78h+var_74], edi
		mov	eax, [ebp+var_4C]
		mov	[esp+78h+var_78], eax
		call	silc_client_unref_server
		jmp	loc_62BA45F2
; ---------------------------------------------------------------------------

loc_62BA46B9:				; CODE XREF: silc_client_command_reply_info+1ECj
		lea	ecx, [ebp+var_20]
		mov	[esp+78h+var_6C], ecx
		lea	ecx, [ebp+var_1C]
		mov	[esp+78h+var_70], ecx
		mov	[esp+78h+var_74], edx
		movzx	eax, al
		mov	[esp+78h+var_78], eax
		call	silc_status_get_args
		mov	edx, [ebp+var_20]
		mov	eax, [ebp+var_1C]
		jmp	loc_62BA45E2
; ---------------------------------------------------------------------------

loc_62BA46E1:				; CODE XREF: silc_client_command_reply_info+246j
		mov	[ebp+var_20], 0
		mov	[ebp+var_1C], 0
		mov	al, [ebx+5Ch]
		test	al, al
		jz	loc_62BA45D6
		lea	ecx, [ebp+var_1C]
		mov	[esp+78h+var_6C], ecx
		lea	ecx, [ebp+var_20]
		mov	[esp+78h+var_70], ecx
		mov	[esp+78h+var_74], edx
		movzx	eax, al
		mov	[esp+78h+var_78], eax
		call	silc_status_get_args
		mov	edx, [ebp+var_1C]
		mov	eax, [ebp+var_20]
		jmp	loc_62BA45E2
; ---------------------------------------------------------------------------

loc_62BA4722:				; CODE XREF: silc_client_command_reply_info+298j
		mov	[esp+78h+var_68], esi ;	int
		mov	eax, [ebp+var_50]
		mov	[esp+78h+var_6C], eax ;	char *
		mov	[esp+78h+var_70], ecx ;	char *
		mov	[esp+78h+var_74], edi ;	int
		mov	eax, [ebp+var_4C]
		mov	[esp+78h+var_78], eax ;	int
		call	silc_client_add_server
		mov	edx, eax
		test	eax, eax
		jz	loc_62BA45F2
		mov	[esp+78h+var_70], eax
		mov	[esp+78h+var_74], edi
		mov	eax, [ebp+var_4C]
		mov	[esp+78h+var_78], eax
		mov	[ebp+var_54], edx
		call	silc_client_ref_server
		mov	edx, [ebp+var_54]
		jmp	loc_62BA4682
silc_client_command_reply_info endp

; Exported entry  63. silc_client_command_reply_nick

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public silc_client_command_reply_nick
silc_client_command_reply_nick proc near ; DATA	XREF: silc_client_commands_unregister+25Eo
					; silc_client_commands_register+1DAo ...

var_B8		= dword	ptr -0B8h
var_B4		= dword	ptr -0B4h
var_B0		= dword	ptr -0B0h
var_AC		= dword	ptr -0ACh
var_A8		= dword	ptr -0A8h
var_A4		= dword	ptr -0A4h
var_A0		= dword	ptr -0A0h
var_8C		= dword	ptr -8Ch
var_7C		= dword	ptr -7Ch
var_78		= dword	ptr -78h
var_74		= dword	ptr -74h
var_70		= dword	ptr -70h
var_6C		= dword	ptr -6Ch
var_66		= byte ptr -66h
var_45		= byte ptr -45h
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= byte ptr -1Ch
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		sub	esp, 0ACh
		mov	ebx, [ebp+arg_4]
		mov	esi, [ebp+arg_8]
		mov	eax, [ebx+4]
		mov	[ebp+var_6C], eax
		mov	edx, [eax+4Ch]
		mov	[ebp+var_70], edx
		mov	[esp+0B8h+var_B8], esi
		call	silc_command_get_args
		mov	edx, eax
		mov	al, [ebx+5Dh]
		test	al, al
		jz	short loc_62BA4804
		test	byte ptr [ebx+64h], 2
		jnz	loc_62BA48A8

loc_62BA47A1:				; CODE XREF: silc_client_command_reply_nick+182j
		mov	[ebp+var_28], 0
		mov	[ebp+var_24], 0
		mov	al, [ebx+5Ch]
		test	al, al
		jnz	loc_62BA4880
		mov	al, [ebx+5Dh]
		mov	[ebx+5Ch], al
		xor	eax, eax
		xor	edx, edx

loc_62BA47C4:				; CODE XREF: silc_client_command_reply_nick+13Bj
		mov	[esp+0B8h+var_B0], edx
		mov	[esp+0B8h+var_B4], eax
		mov	[esp+0B8h+var_B8], ebx
		call	sub_62B9ED04
		movzx	ecx, byte ptr [ebx+5Dh]
		mov	edx, esi
		mov	eax, ebx
		call	sub_62B9EB60
		mov	[esp+0B8h+var_B4], offset silc_client_command_reply_processed
		mov	ecx, [ebp+arg_0]
		mov	[esp+0B8h+var_B8], ecx
		call	silc_fsm_next

loc_62BA47F4:				; CODE XREF: silc_client_command_reply_nick+243j
		xor	eax, eax
		add	esp, 0ACh
		pop	ebx
		pop	esi
		pop	edi
		leave
		retn
; ---------------------------------------------------------------------------
		align 4

loc_62BA4804:				; CODE XREF: silc_client_command_reply_nick+2Dj
		mov	[esp+0B8h+var_B8], edx
		mov	[ebp+var_7C], edx
		call	silc_argument_get_arg_num
		cmp	eax, 1
		mov	edx, [ebp+var_7C]
		jbe	short loc_62BA482B
		mov	[esp+0B8h+var_B8], edx
		call	silc_argument_get_arg_num
		cmp	eax, 3
		mov	edx, [ebp+var_7C]
		jbe	loc_62BA4918

loc_62BA482B:				; CODE XREF: silc_client_command_reply_nick+ADj
		mov	[ebp+var_24], 0
		mov	[ebp+var_28], 0
		mov	al, [ebx+5Ch]
		test	al, al
		jnz	loc_62BA48F0
		mov	byte ptr [ebx+5Dh], 1Dh
		mov	byte ptr [ebx+5Ch], 1Dh
		xor	eax, eax
		xor	edx, edx

loc_62BA4850:				; CODE XREF: silc_client_command_reply_nick+1ABj
		mov	[esp+0B8h+var_B0], edx
		mov	[esp+0B8h+var_B4], eax
		mov	[esp+0B8h+var_B8], ebx
		call	sub_62B9ED04
		mov	[esp+0B8h+var_B4], offset silc_client_command_reply_processed
		mov	eax, [ebp+arg_0]
		mov	[esp+0B8h+var_B8], eax
		call	silc_fsm_next
		xor	eax, eax
		add	esp, 0ACh
		pop	ebx
		pop	esi
		pop	edi
		leave
		retn
; ---------------------------------------------------------------------------

loc_62BA4880:				; CODE XREF: silc_client_command_reply_nick+4Cj
		lea	ecx, [ebp+var_24]
		mov	[esp+0B8h+var_AC], ecx
		lea	ecx, [ebp+var_28]
		mov	[esp+0B8h+var_B0], ecx
		mov	[esp+0B8h+var_B4], edx
		movzx	eax, al
		mov	[esp+0B8h+var_B8], eax
		call	silc_status_get_args
		mov	edx, [ebp+var_24]
		mov	eax, [ebp+var_28]
		jmp	loc_62BA47C4
; ---------------------------------------------------------------------------

loc_62BA48A8:				; CODE XREF: silc_client_command_reply_nick+33j
		mov	ecx, [ebx+4]
		mov	ecx, [ecx+4Ch]
		mov	ecx, [ecx+18h]
		mov	ecx, [ecx+48h]
		mov	edi, [ecx]
		movzx	eax, al
		mov	[esp+0B8h+var_B8], eax
		mov	[ebp+var_7C], edx
		call	silc_get_status_message
		mov	ecx, [ebx+4]
		mov	[esp+0B8h+var_A8], eax
		mov	[esp+0B8h+var_AC], offset aCannotSetNickn ; "Cannot set	nickname: %s"
		mov	[esp+0B8h+var_B0], 3
		mov	[esp+0B8h+var_B4], ecx
		mov	eax, [ecx+4Ch]
		mov	[esp+0B8h+var_B8], eax
		call	edi
		mov	edx, [ebp+var_7C]
		jmp	loc_62BA47A1
; ---------------------------------------------------------------------------
		align 10h

loc_62BA48F0:				; CODE XREF: silc_client_command_reply_nick+D6j
		lea	ecx, [ebp+var_28]
		mov	[esp+0B8h+var_AC], ecx
		lea	ecx, [ebp+var_24]
		mov	[esp+0B8h+var_B0], ecx
		mov	[esp+0B8h+var_B4], edx
		movzx	eax, al
		mov	[esp+0B8h+var_B8], eax
		call	silc_status_get_args
		mov	edx, [ebp+var_28]
		mov	eax, [ebp+var_24]
		jmp	loc_62BA4850
; ---------------------------------------------------------------------------

loc_62BA4918:				; CODE XREF: silc_client_command_reply_nick+BDj
		lea	eax, [ebp+var_20]
		mov	[esp+0B8h+var_B0], eax
		mov	[esp+0B8h+var_B4], 2
		mov	[esp+0B8h+var_B8], edx
		mov	[ebp+var_7C], edx
		call	silc_argument_get_arg_type
		mov	[ebp+var_74], eax
		test	eax, eax
		mov	edx, [ebp+var_7C]
		jz	short loc_62BA49B0
		lea	ecx, [ebp+var_66]
		mov	[esp+0B8h+var_B0], ecx
		mov	eax, [ebp+var_20]
		mov	[esp+0B8h+var_B4], eax
		mov	eax, [ebp+var_74]
		mov	[esp+0B8h+var_B8], eax
		mov	[ebp+var_7C], edx
		call	silc_id_payload_parse_id
		test	al, al
		mov	edx, [ebp+var_7C]
		jnz	loc_62BA49EA
		mov	[ebp+var_24], 0
		mov	[ebp+var_28], 0
		mov	al, [ebx+5Ch]
		test	al, al
		jnz	loc_62BA4AD0

loc_62BA497C:				; CODE XREF: silc_client_command_reply_nick+25Bj
		mov	byte ptr [ebx+5Dh], 1Dh
		mov	byte ptr [ebx+5Ch], 1Dh
		xor	eax, eax
		xor	edx, edx

loc_62BA4988:				; CODE XREF: silc_client_command_reply_nick+280j
					; silc_client_command_reply_nick+38Bj
		mov	[esp+0B8h+var_B0], edx
		mov	[esp+0B8h+var_B4], eax
		mov	[esp+0B8h+var_B8], ebx
		call	sub_62B9ED04

loc_62BA4998:				; CODE XREF: silc_client_command_reply_nick+363j
					; silc_client_command_reply_nick+3C2j ...
		mov	[esp+0B8h+var_B4], offset silc_client_command_reply_processed
		mov	eax, [ebp+arg_0]
		mov	[esp+0B8h+var_B8], eax
		call	silc_fsm_next
		jmp	loc_62BA47F4
; ---------------------------------------------------------------------------

loc_62BA49B0:				; CODE XREF: silc_client_command_reply_nick+1D2j
		mov	[ebp+var_28], 0
		mov	[ebp+var_24], 0
		mov	al, [ebx+5Ch]
		test	al, al
		jz	short loc_62BA497C
		lea	ecx, [ebp+var_24]
		mov	[esp+0B8h+var_AC], ecx
		lea	ecx, [ebp+var_28]
		mov	[esp+0B8h+var_B0], ecx
		mov	[esp+0B8h+var_B4], edx
		movzx	eax, al
		mov	[esp+0B8h+var_B8], eax
		call	silc_status_get_args
		mov	edx, [ebp+var_24]
		mov	eax, [ebp+var_28]
		jmp	short loc_62BA4988
; ---------------------------------------------------------------------------

loc_62BA49EA:				; CODE XREF: silc_client_command_reply_nick+1F5j
		lea	eax, [ebp+var_1C]
		mov	[esp+0B8h+var_B0], eax
		mov	[esp+0B8h+var_B4], 3
		mov	[esp+0B8h+var_B8], edx
		mov	[ebp+var_7C], edx
		call	silc_argument_get_arg_type
		mov	[ebp+var_78], eax
		test	eax, eax
		mov	edx, [ebp+var_7C]
		jz	loc_62BA4AF8
		mov	ecx, [ebp+var_6C]
		mov	eax, [ecx]
		mov	eax, [eax+3D8h]
		mov	[esp+0B8h+var_B8], eax
		mov	[ebp+var_7C], edx
		call	silc_rwlock_wrlock
		mov	eax, [ebp+var_6C]
		mov	esi, [eax+4]
		lea	ecx, [ebp+var_45]
		mov	[ebp+var_8C], ecx
		mov	ecx, 1Dh
		mov	edi, [ebp+var_8C]
		rep movsb
		mov	eax, [ebp+var_20]
		mov	[esp+0B8h+var_A0], eax
		mov	eax, [ebp+var_74]
		mov	[esp+0B8h+var_A4], eax
		lea	ecx, [ebp+var_66]
		mov	[esp+0B8h+var_A8], ecx
		mov	eax, [ebp+var_78]
		mov	[esp+0B8h+var_AC], eax
		mov	ecx, [ebp+var_6C]
		mov	eax, [ecx]
		mov	[esp+0B8h+var_B0], eax
		mov	[esp+0B8h+var_B4], ecx
		mov	eax, [ebp+var_70]
		mov	[esp+0B8h+var_B8], eax
		call	silc_client_change_nickname
		test	al, al
		mov	edx, [ebp+var_7C]
		jnz	loc_62BA4B2F
		mov	[ebp+var_24], 0
		mov	[ebp+var_28], 0
		mov	al, [ebx+5Ch]
		test	al, al
		jnz	loc_62BA4B63
		mov	byte ptr [ebx+5Dh], 2Bh
		mov	byte ptr [ebx+5Ch], 2Bh
		xor	eax, eax
		xor	edx, edx

loc_62BA4AA8:				; CODE XREF: silc_client_command_reply_nick+41Ej
		mov	[esp+0B8h+var_B0], edx
		mov	[esp+0B8h+var_B4], eax
		mov	[esp+0B8h+var_B8], ebx
		call	sub_62B9ED04
		mov	edx, [ebp+var_6C]
		mov	eax, [edx]
		mov	eax, [eax+3D8h]
		mov	[esp+0B8h+var_B8], eax
		call	silc_rwlock_unlock
		jmp	loc_62BA4998
; ---------------------------------------------------------------------------

loc_62BA4AD0:				; CODE XREF: silc_client_command_reply_nick+20Ej
		lea	ecx, [ebp+var_28]
		mov	[esp+0B8h+var_AC], ecx
		lea	ecx, [ebp+var_24]
		mov	[esp+0B8h+var_B0], ecx
		mov	[esp+0B8h+var_B4], edx
		movzx	eax, al
		mov	[esp+0B8h+var_B8], eax
		call	silc_status_get_args
		mov	edx, [ebp+var_28]
		mov	eax, [ebp+var_24]
		jmp	loc_62BA4988
; ---------------------------------------------------------------------------

loc_62BA4AF8:				; CODE XREF: silc_client_command_reply_nick+2A4j
		mov	[ebp+var_28], 0
		mov	[ebp+var_24], 0
		mov	al, [ebx+5Ch]
		test	al, al
		jnz	short loc_62BA4B8B
		mov	byte ptr [ebx+5Dh], 1Dh
		mov	byte ptr [ebx+5Ch], 1Dh
		xor	eax, eax

loc_62BA4B17:				; CODE XREF: silc_client_command_reply_nick+443j
		mov	[esp+0B8h+var_B0], eax
		mov	eax, [ebp+var_28]
		mov	[esp+0B8h+var_B4], eax
		mov	[esp+0B8h+var_B8], ebx
		call	sub_62B9ED04
		jmp	loc_62BA4998
; ---------------------------------------------------------------------------

loc_62BA4B2F:				; CODE XREF: silc_client_command_reply_nick+315j
		mov	ecx, [ebp+var_6C]
		mov	eax, [ecx]
		mov	eax, [eax+3D8h]
		mov	[esp+0B8h+var_B8], eax
		call	silc_rwlock_unlock
		mov	edx, [ebp+var_6C]
		mov	eax, [edx]
		lea	ecx, [ebp+var_45]
		mov	[esp+0B8h+var_AC], ecx
		mov	[esp+0B8h+var_B0], eax
		mov	[esp+0B8h+var_B4], eax
		mov	[esp+0B8h+var_B8], ebx
		call	sub_62B9ED04
		jmp	loc_62BA4998
; ---------------------------------------------------------------------------

loc_62BA4B63:				; CODE XREF: silc_client_command_reply_nick+32Ej
		lea	ecx, [ebp+var_28]
		mov	[esp+0B8h+var_AC], ecx
		lea	ecx, [ebp+var_24]
		mov	[esp+0B8h+var_B0], ecx
		mov	[esp+0B8h+var_B4], edx
		movzx	eax, al
		mov	[esp+0B8h+var_B8], eax
		call	silc_status_get_args
		mov	edx, [ebp+var_28]
		mov	eax, [ebp+var_24]
		jmp	loc_62BA4AA8
; ---------------------------------------------------------------------------

loc_62BA4B8B:				; CODE XREF: silc_client_command_reply_nick+3A3j
		lea	ecx, [ebp+var_24]
		mov	[esp+0B8h+var_AC], ecx
		lea	ecx, [ebp+var_28]
		mov	[esp+0B8h+var_B0], ecx
		mov	[esp+0B8h+var_B4], edx
		movzx	eax, al
		mov	[esp+0B8h+var_B8], eax
		call	silc_status_get_args
		mov	eax, [ebp+var_24]
		jmp	loc_62BA4B17
silc_client_command_reply_nick endp

; Exported entry  54. silc_client_command_reply_identify

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public silc_client_command_reply_identify
silc_client_command_reply_identify proc	near
					; DATA XREF: silc_client_commands_unregister+1AEo
					; silc_client_commands_register+15Fo ...

var_78		= dword	ptr -78h
var_74		= dword	ptr -74h
var_70		= dword	ptr -70h
var_6C		= dword	ptr -6Ch
var_68		= dword	ptr -68h
var_64		= dword	ptr -64h
var_60		= dword	ptr -60h
var_58		= dword	ptr -58h
var_54		= dword	ptr -54h
var_50		= dword	ptr -50h
var_4C		= dword	ptr -4Ch
var_44		= dword	ptr -44h
var_26		= word ptr -26h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= byte ptr -1Ch
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		sub	esp, 6Ch
		mov	ebx, [ebp+arg_4]
		mov	esi, [ebp+arg_8]
		mov	edi, [ebx+4]
		mov	eax, [edi+4Ch]
		mov	[ebp+var_4C], eax
		mov	[esp+78h+var_78], esi
		call	silc_command_get_args
		mov	edx, eax
		mov	al, [ebx+5Dh]
		test	al, al
		jz	short loc_62BA4C40
		test	byte ptr [ebx+64h], 2
		jnz	loc_62BA4CE4

loc_62BA4BE3:				; CODE XREF: silc_client_command_reply_identify+176j
		mov	[ebp+var_20], 0
		mov	[ebp+var_24], 0
		mov	al, [ebx+5Ch]
		test	al, al
		jnz	loc_62BA4CBC
		mov	al, [ebx+5Dh]
		mov	[ebx+5Ch], al
		xor	eax, eax
		xor	edx, edx

loc_62BA4C06:				; CODE XREF: silc_client_command_reply_identify+12Fj
		mov	[esp+78h+var_70], edx
		mov	[esp+78h+var_74], eax
		mov	[esp+78h+var_78], ebx
		call	sub_62B9ED04
		movzx	ecx, byte ptr [ebx+5Dh]
		mov	edx, esi
		mov	eax, ebx
		call	sub_62B9EB60
		mov	[esp+78h+var_74], offset silc_client_command_reply_processed
		mov	eax, [ebp+arg_0]
		mov	[esp+78h+var_78], eax
		call	silc_fsm_next

loc_62BA4C36:				; CODE XREF: silc_client_command_reply_identify+21Dj
		xor	eax, eax
		add	esp, 6Ch
		pop	ebx
		pop	esi
		pop	edi
		leave
		retn
; ---------------------------------------------------------------------------

loc_62BA4C40:				; CODE XREF: silc_client_command_reply_identify+27j
		mov	[esp+78h+var_78], edx
		mov	[ebp+var_58], edx
		call	silc_argument_get_arg_num
		cmp	eax, 1
		mov	edx, [ebp+var_58]
		jbe	short loc_62BA4C67
		mov	[esp+78h+var_78], edx
		call	silc_argument_get_arg_num
		cmp	eax, 4
		mov	edx, [ebp+var_58]
		jbe	loc_62BA4D54

loc_62BA4C67:				; CODE XREF: silc_client_command_reply_identify+A1j
		mov	[ebp+var_24], 0
		mov	[ebp+var_20], 0
		mov	al, [ebx+5Ch]
		test	al, al
		jnz	loc_62BA4D2C
		mov	byte ptr [ebx+5Dh], 1Dh
		mov	byte ptr [ebx+5Ch], 1Dh
		xor	eax, eax
		xor	edx, edx

loc_62BA4C8C:				; CODE XREF: silc_client_command_reply_identify+19Fj
		mov	[esp+78h+var_70], edx
		mov	[esp+78h+var_74], eax
		mov	[esp+78h+var_78], ebx
		call	sub_62B9ED04
		mov	[esp+78h+var_74], offset silc_client_command_reply_processed
		mov	eax, [ebp+arg_0]
		mov	[esp+78h+var_78], eax
		call	silc_fsm_next
		xor	eax, eax
		add	esp, 6Ch
		pop	ebx
		pop	esi
		pop	edi
		leave
		retn
; ---------------------------------------------------------------------------
		align 4

loc_62BA4CBC:				; CODE XREF: silc_client_command_reply_identify+46j
		lea	ecx, [ebp+var_24]
		mov	[esp+78h+var_6C], ecx
		lea	ecx, [ebp+var_20]
		mov	[esp+78h+var_70], ecx
		mov	[esp+78h+var_74], edx
		movzx	eax, al
		mov	[esp+78h+var_78], eax
		call	silc_status_get_args
		mov	edx, [ebp+var_24]
		mov	eax, [ebp+var_20]
		jmp	loc_62BA4C06
; ---------------------------------------------------------------------------

loc_62BA4CE4:				; CODE XREF: silc_client_command_reply_identify+2Dj
		mov	ecx, [ebx+4]
		mov	ecx, [ecx+4Ch]
		mov	ecx, [ecx+18h]
		mov	ecx, [ecx+48h]
		mov	edi, [ecx]
		movzx	eax, al
		mov	[esp+78h+var_78], eax
		mov	[ebp+var_58], edx
		call	silc_get_status_message
		mov	ecx, [ebx+4]
		mov	[esp+78h+var_68], eax
		mov	[esp+78h+var_6C], offset aIdentifyS ; "IDENTIFY: %s"
		mov	[esp+78h+var_70], 3
		mov	[esp+78h+var_74], ecx
		mov	eax, [ecx+4Ch]
		mov	[esp+78h+var_78], eax
		call	edi
		mov	edx, [ebp+var_58]
		jmp	loc_62BA4BE3
; ---------------------------------------------------------------------------
		align 4

loc_62BA4D2C:				; CODE XREF: silc_client_command_reply_identify+CAj
		lea	ecx, [ebp+var_20]
		mov	[esp+78h+var_6C], ecx
		lea	ecx, [ebp+var_24]
		mov	[esp+78h+var_70], ecx
		mov	[esp+78h+var_74], edx
		movzx	eax, al
		mov	[esp+78h+var_78], eax
		call	silc_status_get_args
		mov	edx, [ebp+var_20]
		mov	eax, [ebp+var_24]
		jmp	loc_62BA4C8C
; ---------------------------------------------------------------------------

loc_62BA4D54:				; CODE XREF: silc_client_command_reply_identify+B1j
		mov	[esp+78h+var_68], 0
		lea	eax, [ebp+var_44]
		mov	[esp+78h+var_6C], eax
		mov	[esp+78h+var_70], 0
		mov	[esp+78h+var_74], 2
		mov	[esp+78h+var_78], edx
		mov	[ebp+var_58], edx
		call	silc_argument_get_decoded
		test	al, al
		mov	edx, [ebp+var_58]
		jnz	short loc_62BA4DD4
		mov	[ebp+var_20], 0
		mov	[ebp+var_24], 0
		mov	al, [ebx+5Ch]
		test	al, al
		jnz	loc_62BA4EA6
		mov	byte ptr [ebx+5Dh], 1Dh
		mov	byte ptr [ebx+5Ch], 1Dh
		xor	eax, eax
		xor	edx, edx

loc_62BA4DAA:				; CODE XREF: silc_client_command_reply_identify+319j
		mov	[esp+78h+var_70], edx
		mov	[esp+78h+var_74], eax
		mov	[esp+78h+var_78], ebx
		call	sub_62B9ED04

loc_62BA4DBA:				; CODE XREF: silc_client_command_reply_identify+278j
					; silc_client_command_reply_identify+2F1j ...
		mov	[esp+78h+var_74], offset silc_client_command_reply_processed
		mov	eax, [ebp+arg_0]
		mov	[esp+78h+var_78], eax
		call	silc_fsm_next
		jmp	loc_62BA4C36
; ---------------------------------------------------------------------------
		align 4

loc_62BA4DD4:				; CODE XREF: silc_client_command_reply_identify+1D3j
		lea	esi, [ebp+var_1C]
		mov	[esp+78h+var_70], esi
		mov	[esp+78h+var_74], 3
		mov	[esp+78h+var_78], edx
		mov	[ebp+var_58], edx
		call	silc_argument_get_arg_type
		mov	[ebp+var_54], eax
		mov	[esp+78h+var_70], esi
		mov	[esp+78h+var_74], 4
		mov	edx, [ebp+var_58]
		mov	[esp+78h+var_78], edx
		call	silc_argument_get_arg_type
		mov	[ebp+var_50], eax
		mov	ax, [ebp+var_26]
		cmp	ax, 2
		mov	edx, [ebp+var_58]
		jz	loc_62BA4F25
		cmp	ax, 3
		jz	loc_62BA4ECE
		dec	ax
		jnz	short loc_62BA4DBA
		lea	eax, [ebp+var_44]
		mov	[esp+78h+var_70], eax
		mov	[esp+78h+var_74], edi
		mov	eax, [ebp+var_4C]
		mov	[esp+78h+var_78], eax
		mov	[ebp+var_58], edx
		call	silc_client_get_server_by_id
		mov	esi, eax
		test	eax, eax
		jz	loc_62BA5003
		mov	eax, [ebp+var_50]
		mov	[esp+78h+var_68], eax ;	char *
		mov	eax, [ebp+var_54]
		mov	[esp+78h+var_6C], eax ;	char *
		mov	[esp+78h+var_70], esi ;	int
		mov	[esp+78h+var_74], edi ;	int
		mov	eax, [ebp+var_4C]
		mov	[esp+78h+var_78], eax ;	int
		call	silc_client_update_server

loc_62BA4E6E:				; CODE XREF: silc_client_command_reply_identify+493j
		mov	word ptr [esi+2Ch], 0
		mov	eax, [ebp+var_50]
		mov	[esp+78h+var_6C], eax
		mov	eax, [ebp+var_54]
		mov	[esp+78h+var_70], eax
		mov	[esp+78h+var_74], esi
		mov	[esp+78h+var_78], ebx
		call	sub_62B9ED04
		mov	[esp+78h+var_70], esi
		mov	[esp+78h+var_74], edi
		mov	eax, [ebp+var_4C]
		mov	[esp+78h+var_78], eax
		call	silc_client_unref_server
		jmp	loc_62BA4DBA
; ---------------------------------------------------------------------------

loc_62BA4EA6:				; CODE XREF: silc_client_command_reply_identify+1E8j
		lea	ecx, [ebp+var_24]
		mov	[esp+78h+var_6C], ecx
		lea	ecx, [ebp+var_20]
		mov	[esp+78h+var_70], ecx
		mov	[esp+78h+var_74], edx
		movzx	eax, al
		mov	[esp+78h+var_78], eax
		call	silc_status_get_args
		mov	edx, [ebp+var_24]
		mov	eax, [ebp+var_20]
		jmp	loc_62BA4DAA
; ---------------------------------------------------------------------------

loc_62BA4ECE:				; CODE XREF: silc_client_command_reply_identify+270j
		lea	eax, [ebp+var_44]
		mov	[esp+78h+var_70], eax
		mov	[esp+78h+var_74], edi
		mov	eax, [ebp+var_4C]
		mov	[esp+78h+var_78], eax
		mov	[ebp+var_58], edx
		call	silc_client_get_channel_by_id
		mov	esi, eax
		test	eax, eax
		mov	edx, [ebp+var_58]
		jz	loc_62BA4FAB

loc_62BA4EF4:				; CODE XREF: silc_client_command_reply_identify+44Ej
		mov	eax, [ebp+var_50]
		mov	[esp+78h+var_6C], eax
		mov	eax, [esi]
		mov	[esp+78h+var_70], eax
		mov	[esp+78h+var_74], esi
		mov	[esp+78h+var_78], ebx
		call	sub_62B9ED04
		mov	[esp+78h+var_70], esi
		mov	[esp+78h+var_74], edi
		mov	eax, [ebp+var_4C]
		mov	[esp+78h+var_78], eax
		call	silc_client_unref_channel
		jmp	loc_62BA4DBA
; ---------------------------------------------------------------------------

loc_62BA4F25:				; CODE XREF: silc_client_command_reply_identify+266j
		lea	eax, [ebp+var_44]
		mov	[esp+78h+var_70], eax
		mov	[esp+78h+var_74], edi
		mov	eax, [ebp+var_4C]
		mov	[esp+78h+var_78], eax
		mov	[ebp+var_58], edx
		call	silc_client_get_client_by_id
		mov	esi, eax
		test	eax, eax
		jz	loc_62BA5048
		mov	[esp+78h+var_60], 0 ; int
		mov	[esp+78h+var_64], 0 ; char *
		mov	eax, [ebp+var_50]
		mov	[esp+78h+var_68], eax ;	int
		mov	eax, [ebp+var_54]
		mov	[esp+78h+var_6C], eax ;	int
		mov	[esp+78h+var_70], esi ;	int
		mov	[esp+78h+var_74], edi ;	int
		mov	eax, [ebp+var_4C]
		mov	[esp+78h+var_78], eax ;	int
		call	silc_client_update_client

loc_62BA4F79:				; CODE XREF: silc_client_command_reply_identify+4ECj
		mov	eax, [ebp+var_50]
		mov	[esp+78h+var_6C], eax
		mov	eax, [ebp+var_54]
		mov	[esp+78h+var_70], eax
		mov	[esp+78h+var_74], esi
		mov	[esp+78h+var_78], ebx
		call	sub_62B9ED04
		mov	[esp+78h+var_70], esi
		mov	[esp+78h+var_74], edi
		mov	eax, [ebp+var_4C]
		mov	[esp+78h+var_78], eax
		call	silc_client_unref_client
		jmp	loc_62BA4DBA
; ---------------------------------------------------------------------------

loc_62BA4FAB:				; CODE XREF: silc_client_command_reply_identify+33Ej
		mov	ecx, [ebp+var_54]
		test	ecx, ecx
		jz	loc_62BA50D9
		lea	eax, [ebp+var_44]
		mov	[esp+78h+var_68], eax ;	int
		mov	[esp+78h+var_6C], 0 ; int
		mov	eax, [ebp+var_54]
		mov	[esp+78h+var_70], eax ;	char *
		mov	[esp+78h+var_74], edi ;	int
		mov	eax, [ebp+var_4C]
		mov	[esp+78h+var_78], eax ;	int
		mov	[ebp+var_58], edx
		call	silc_client_add_channel
		mov	esi, eax
		test	eax, eax
		mov	edx, [ebp+var_58]
		jz	loc_62BA50A1
		mov	[esp+78h+var_70], eax
		mov	[esp+78h+var_74], edi
		mov	eax, [ebp+var_4C]
		mov	[esp+78h+var_78], eax
		call	silc_client_ref_channel
		jmp	loc_62BA4EF4
; ---------------------------------------------------------------------------

loc_62BA5003:				; CODE XREF: silc_client_command_reply_identify+297j
		lea	eax, [ebp+var_44]
		mov	[esp+78h+var_68], eax ;	int
		mov	eax, [ebp+var_50]
		mov	[esp+78h+var_6C], eax ;	char *
		mov	eax, [ebp+var_54]
		mov	[esp+78h+var_70], eax ;	char *
		mov	[esp+78h+var_74], edi ;	int
		mov	eax, [ebp+var_4C]
		mov	[esp+78h+var_78], eax ;	int
		call	silc_client_add_server
		mov	esi, eax
		test	eax, eax
		mov	edx, [ebp+var_58]
		jz	short loc_62BA50A1
		mov	[esp+78h+var_70], eax
		mov	[esp+78h+var_74], edi
		mov	eax, [ebp+var_4C]
		mov	[esp+78h+var_78], eax
		call	silc_client_ref_server
		jmp	loc_62BA4E6E
; ---------------------------------------------------------------------------

loc_62BA5048:				; CODE XREF: silc_client_command_reply_identify+392j
		mov	[esp+78h+var_60], 0 ; int
		lea	eax, [ebp+var_44]
		mov	[esp+78h+var_64], eax ;	int
		mov	[esp+78h+var_68], 0 ; char *
		mov	eax, [ebp+var_50]
		mov	[esp+78h+var_6C], eax ;	int
		mov	eax, [ebp+var_54]
		mov	[esp+78h+var_70], eax ;	int
		mov	[esp+78h+var_74], edi ;	int
		mov	eax, [ebp+var_4C]
		mov	[esp+78h+var_78], eax ;	int
		call	silc_client_add_client
		mov	esi, eax
		test	eax, eax
		mov	edx, [ebp+var_58]
		jz	loc_62BA5111
		mov	[esp+78h+var_70], eax
		mov	[esp+78h+var_74], edi
		mov	eax, [ebp+var_4C]
		mov	[esp+78h+var_78], eax
		call	silc_client_ref_client
		jmp	loc_62BA4F79
; ---------------------------------------------------------------------------

loc_62BA50A1:				; CODE XREF: silc_client_command_reply_identify+435j
					; silc_client_command_reply_identify+47Ej
		mov	[ebp+var_20], 0
		mov	[ebp+var_24], 0
		mov	al, [ebx+5Ch]
		test	al, al
		jnz	short loc_62BA5130
		mov	byte ptr [ebx+5Dh], 1Dh
		mov	byte ptr [ebx+5Ch], 1Dh

loc_62BA50BE:				; CODE XREF: silc_client_command_reply_identify+59Dj
		mov	eax, [ebp+var_24]
		mov	[esp+78h+var_70], eax
		mov	eax, [ebp+var_20]
		mov	[esp+78h+var_74], eax
		mov	[esp+78h+var_78], ebx
		call	sub_62B9ED04
		jmp	loc_62BA4DBA
; ---------------------------------------------------------------------------

loc_62BA50D9:				; CODE XREF: silc_client_command_reply_identify+400j
		mov	[ebp+var_24], 0
		mov	[ebp+var_20], 0
		mov	al, [ebx+5Ch]
		test	al, al
		jnz	short loc_62BA5152
		mov	byte ptr [ebx+5Dh], 1Dh
		mov	byte ptr [ebx+5Ch], 1Dh

loc_62BA50F6:				; CODE XREF: silc_client_command_reply_identify+57Ej
					; silc_client_command_reply_identify+5BFj
		mov	eax, [ebp+var_20]
		mov	[esp+78h+var_70], eax
		mov	eax, [ebp+var_24]
		mov	[esp+78h+var_74], eax
		mov	[esp+78h+var_78], ebx
		call	sub_62B9ED04
		jmp	loc_62BA4DBA
; ---------------------------------------------------------------------------

loc_62BA5111:				; CODE XREF: silc_client_command_reply_identify+4D3j
		mov	[ebp+var_24], 0
		mov	[ebp+var_20], 0
		mov	al, [ebx+5Ch]
		test	al, al
		jnz	short loc_62BA5152
		mov	byte ptr [ebx+5Dh], 30h
		mov	byte ptr [ebx+5Ch], 30h
		jmp	short loc_62BA50F6
; ---------------------------------------------------------------------------

loc_62BA5130:				; CODE XREF: silc_client_command_reply_identify+504j
		lea	ecx, [ebp+var_24]
		mov	[esp+78h+var_6C], ecx
		lea	ecx, [ebp+var_20]
		mov	[esp+78h+var_70], ecx
		mov	[esp+78h+var_74], edx
		movzx	eax, al
		mov	[esp+78h+var_78], eax
		call	silc_status_get_args
		jmp	loc_62BA50BE
; ---------------------------------------------------------------------------

loc_62BA5152:				; CODE XREF: silc_client_command_reply_identify+53Cj
					; silc_client_command_reply_identify+574j
		lea	ecx, [ebp+var_20]
		mov	[esp+78h+var_6C], ecx
		lea	ecx, [ebp+var_24]
		mov	[esp+78h+var_70], ecx
		mov	[esp+78h+var_74], edx
		movzx	eax, al
		mov	[esp+78h+var_78], eax
		call	silc_status_get_args
		jmp	short loc_62BA50F6
silc_client_command_reply_identify endp

; ---------------------------------------------------------------------------
		align 4
; Exported entry  78. silc_client_command_reply_whois

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public silc_client_command_reply_whois
silc_client_command_reply_whois	proc near ; DATA XREF: silc_client_commands_unregister+4Eo
					; silc_client_commands_register+69o ...

var_F8		= dword	ptr -0F8h
var_F4		= dword	ptr -0F4h
var_F0		= dword	ptr -0F0h
var_EC		= dword	ptr -0ECh
var_E8		= dword	ptr -0E8h
var_E4		= dword	ptr -0E4h
var_E0		= dword	ptr -0E0h
var_DC		= dword	ptr -0DCh
var_D8		= dword	ptr -0D8h
var_D4		= dword	ptr -0D4h
var_D0		= dword	ptr -0D0h
var_BC		= dword	ptr -0BCh
var_AC		= dword	ptr -0ACh
var_A8		= dword	ptr -0A8h
var_A1		= byte ptr -0A1h
var_A0		= dword	ptr -0A0h
var_9C		= dword	ptr -9Ch
var_98		= dword	ptr -98h
var_94		= dword	ptr -94h
var_90		= dword	ptr -90h
var_8C		= dword	ptr -8Ch
var_88		= dword	ptr -88h
var_84		= dword	ptr -84h
var_80		= dword	ptr -80h
var_7C		= dword	ptr -7Ch
var_6C		= dword	ptr -6Ch
var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		sub	esp, 0ECh
		mov	ebx, [ebp+arg_4]
		mov	esi, [ebp+arg_8]
		mov	eax, [ebx+4]
		mov	[ebp+var_7C], eax
		mov	edx, [eax+4Ch]
		mov	[ebp+var_84], edx
		mov	[esp+0F8h+var_F8], esi
		call	silc_command_get_args
		mov	[ebp+var_80], eax
		mov	[ebp+var_24], 0
		mov	dl, [ebx+5Dh]
		test	dl, dl
		jz	short loc_62BA5218
		test	byte ptr [ebx+64h], 2
		jnz	loc_62BA52B4

loc_62BA51B8:				; CODE XREF: silc_client_command_reply_whois+17Cj
		mov	[ebp+var_2C], 0
		mov	[ebp+var_28], 0
		mov	al, [ebx+5Ch]
		test	al, al
		jnz	loc_62BA5288
		mov	al, [ebx+5Dh]
		mov	[ebx+5Ch], al
		xor	eax, eax
		xor	edx, edx

loc_62BA51DB:				; CODE XREF: silc_client_command_reply_whois+13Aj
		mov	[esp+0F8h+var_F0], edx
		mov	[esp+0F8h+var_F4], eax
		mov	[esp+0F8h+var_F8], ebx
		call	sub_62B9ED04
		movzx	ecx, byte ptr [ebx+5Dh]
		mov	edx, esi
		mov	eax, ebx
		call	sub_62B9EB60
		mov	[esp+0F8h+var_F4], offset silc_client_command_reply_processed
		mov	esi, [ebp+arg_0]
		mov	[esp+0F8h+var_F8], esi
		call	silc_fsm_next

loc_62BA520B:				; CODE XREF: silc_client_command_reply_whois+24Bj
		xor	eax, eax
		add	esp, 0ECh
		pop	ebx
		pop	esi
		pop	edi
		leave
		retn
; ---------------------------------------------------------------------------

loc_62BA5218:				; CODE XREF: silc_client_command_reply_whois+38j
		mov	edi, [ebp+var_80]
		mov	[esp+0F8h+var_F8], edi
		mov	byte ptr [ebp+var_AC], dl
		call	silc_argument_get_arg_num
		cmp	eax, 4
		ja	loc_62BA5324

loc_62BA5232:				; CODE XREF: silc_client_command_reply_whois+1C1j
		mov	[ebp+var_28], 0
		mov	[ebp+var_2C], 0
		mov	al, [ebx+5Ch]
		test	al, al
		jnz	loc_62BA52F8
		mov	byte ptr [ebx+5Dh], 1Dh
		mov	byte ptr [ebx+5Ch], 1Dh
		xor	eax, eax
		xor	edx, edx

loc_62BA5257:				; CODE XREF: silc_client_command_reply_whois+1AAj
		mov	[esp+0F8h+var_F0], edx
		mov	[esp+0F8h+var_F4], eax
		mov	[esp+0F8h+var_F8], ebx
		call	sub_62B9ED04
		mov	[esp+0F8h+var_F4], offset silc_client_command_reply_processed
		mov	ecx, [ebp+arg_0]
		mov	[esp+0F8h+var_F8], ecx
		call	silc_fsm_next
		xor	eax, eax
		add	esp, 0ECh
		pop	ebx
		pop	esi
		pop	edi
		leave
		retn
; ---------------------------------------------------------------------------
		align 4

loc_62BA5288:				; CODE XREF: silc_client_command_reply_whois+57j
		lea	edx, [ebp+var_28]
		mov	[esp+0F8h+var_EC], edx
		lea	edx, [ebp+var_2C]
		mov	[esp+0F8h+var_F0], edx
		mov	ecx, [ebp+var_80]
		mov	[esp+0F8h+var_F4], ecx
		movzx	eax, al
		mov	[esp+0F8h+var_F8], eax
		call	silc_status_get_args
		mov	edx, [ebp+var_28]
		mov	eax, [ebp+var_2C]
		jmp	loc_62BA51DB
; ---------------------------------------------------------------------------
		align 4

loc_62BA52B4:				; CODE XREF: silc_client_command_reply_whois+3Ej
		mov	eax, [ebx+4]
		mov	eax, [eax+4Ch]
		mov	eax, [eax+18h]
		mov	eax, [eax+48h]
		mov	edi, [eax]
		movzx	edx, dl
		mov	[esp+0F8h+var_F8], edx
		call	silc_get_status_message
		mov	edx, [ebx+4]
		mov	[esp+0F8h+var_E8], eax
		mov	[esp+0F8h+var_EC], offset aWhoisS ; "WHOIS: %s"
		mov	[esp+0F8h+var_F0], 3
		mov	[esp+0F8h+var_F4], edx
		mov	eax, [edx+4Ch]
		mov	[esp+0F8h+var_F8], eax
		call	edi
		jmp	loc_62BA51B8
; ---------------------------------------------------------------------------
		align 4

loc_62BA52F8:				; CODE XREF: silc_client_command_reply_whois+D1j
		lea	edx, [ebp+var_2C]
		mov	[esp+0F8h+var_EC], edx
		lea	edx, [ebp+var_28]
		mov	[esp+0F8h+var_F0], edx
		mov	edx, [ebp+var_80]
		mov	[esp+0F8h+var_F4], edx
		movzx	eax, al
		mov	[esp+0F8h+var_F8], eax
		call	silc_status_get_args
		mov	edx, [ebp+var_2C]
		mov	eax, [ebp+var_28]
		jmp	loc_62BA5257
; ---------------------------------------------------------------------------
		align 4

loc_62BA5324:				; CODE XREF: silc_client_command_reply_whois+B8j
		mov	[esp+0F8h+var_F8], edi
		call	silc_argument_get_arg_num
		cmp	eax, 0Bh
		mov	dl, byte ptr [ebp+var_AC]
		ja	loc_62BA5232
		mov	[esp+0F8h+var_E8], 0
		lea	esi, [ebp+var_6C]
		mov	[esp+0F8h+var_EC], esi
		mov	[esp+0F8h+var_F0], 0
		mov	[esp+0F8h+var_F4], 2
		mov	edi, [ebp+var_80]
		mov	[esp+0F8h+var_F8], edi
		mov	byte ptr [ebp+var_AC], dl
		call	silc_argument_get_decoded
		test	al, al
		mov	dl, byte ptr [ebp+var_AC]
		jnz	short loc_62BA53C4
		mov	[ebp+var_2C], 0
		mov	[ebp+var_28], 0
		mov	al, [ebx+5Ch]
		test	al, al
		jnz	loc_62BA5733

loc_62BA538E:				; CODE XREF: silc_client_command_reply_whois+7C1j
		mov	byte ptr [ebx+5Dh], 1Dh
		mov	byte ptr [ebx+5Ch], 1Dh

loc_62BA5396:				; CODE XREF: silc_client_command_reply_whois+5DCj
					; silc_client_command_reply_whois+7E7j
		mov	eax, [ebp+var_28]
		mov	[esp+0F8h+var_F0], eax
		mov	eax, [ebp+var_2C]
		mov	[esp+0F8h+var_F4], eax
		mov	[esp+0F8h+var_F8], ebx
		call	sub_62B9ED04

loc_62BA53AC:				; CODE XREF: silc_client_command_reply_whois+5BAj
					; silc_client_command_reply_whois+614j	...
		mov	[esp+0F8h+var_F4], offset silc_client_command_reply_processed
		mov	edx, [ebp+arg_0]
		mov	[esp+0F8h+var_F8], edx
		call	silc_fsm_next
		jmp	loc_62BA520B
; ---------------------------------------------------------------------------

loc_62BA53C4:				; CODE XREF: silc_client_command_reply_whois+1FFj
		mov	[esp+0F8h+var_F0], 0
		mov	[esp+0F8h+var_F4], 3
		mov	eax, [ebp+var_80]
		mov	[esp+0F8h+var_F8], eax
		mov	byte ptr [ebp+var_AC], dl
		call	silc_argument_get_arg_type
		mov	[ebp+var_90], eax
		mov	[esp+0F8h+var_F0], 0
		mov	[esp+0F8h+var_F4], 4
		mov	ecx, [ebp+var_80]
		mov	[esp+0F8h+var_F8], ecx
		call	silc_argument_get_arg_type
		mov	[ebp+var_94], eax
		mov	[esp+0F8h+var_F0], 0
		mov	[esp+0F8h+var_F4], 5
		mov	edi, [ebp+var_80]
		mov	[esp+0F8h+var_F8], edi
		call	silc_argument_get_arg_type
		mov	[ebp+var_9C], eax
		mov	edx, [ebp+var_90]
		test	edx, edx
		mov	dl, byte ptr [ebp+var_AC]
		jz	loc_62BA5755
		mov	edi, [ebp+var_94]
		test	edi, edi
		jz	loc_62BA5755
		test	eax, eax
		jz	loc_62BA5755
		lea	ecx, [ebp+var_3C]
		mov	[ebp+var_BC], ecx
		mov	ecx, 10h
		mov	edi, [ebp+var_BC]
		mov	al, dl
		rep stosb
		lea	edx, [ebp+var_20]
		mov	[esp+0F8h+var_F0], edx
		mov	[esp+0F8h+var_F4], 6
		mov	ecx, [ebp+var_80]
		mov	[esp+0F8h+var_F8], ecx
		call	silc_argument_get_arg_type
		test	eax, eax
		jz	loc_62BA5885
		mov	[ebp+var_3C], eax
		mov	[ebp+var_38], eax
		add	eax, [ebp+var_20]
		mov	[ebp+var_30], eax
		mov	[ebp+var_34], eax
		lea	edi, [ebp+var_20]
		mov	[esp+0F8h+var_F0], edi
		mov	[esp+0F8h+var_F4], 0Ah
		mov	eax, [ebp+var_80]
		mov	[esp+0F8h+var_F8], eax
		call	silc_argument_get_arg_type
		test	eax, eax
		jz	loc_62BA5922
		mov	[ebp+var_4C], eax
		mov	[ebp+var_48], eax
		add	eax, [ebp+var_20]
		mov	[ebp+var_40], eax
		mov	[ebp+var_44], eax
		mov	[ebp+var_A1], 1

loc_62BA54D8:				; CODE XREF: silc_client_command_reply_whois+718j
		lea	ecx, [ebp+var_20]
		mov	[esp+0F8h+var_F0], ecx
		mov	[esp+0F8h+var_F4], 7
		mov	edi, [ebp+var_80]
		mov	[esp+0F8h+var_F8], edi
		call	silc_argument_get_arg_type
		mov	edx, eax
		test	eax, eax
		jz	loc_62BA5913
		movzx	eax, byte ptr [eax+3]
		mov	[ebp+var_8C], eax
		movzx	eax, byte ptr [edx]
		shl	eax, 18h
		or	[ebp+var_8C], eax
		movzx	eax, byte ptr [edx+1]
		shl	eax, 10h
		or	[ebp+var_8C], eax
		movzx	eax, byte ptr [edx+2]
		shl	eax, 8
		or	[ebp+var_8C], eax

loc_62BA552C:				; CODE XREF: silc_client_command_reply_whois+7A9j
		lea	edx, [ebp+var_20]
		mov	[esp+0F8h+var_F0], edx
		mov	[esp+0F8h+var_F4], 8
		mov	ecx, [ebp+var_80]
		mov	[esp+0F8h+var_F8], ecx
		call	silc_argument_get_arg_type
		mov	edx, eax
		test	eax, eax
		jz	loc_62BA5904
		movzx	edi, byte ptr [eax+3]
		movzx	eax, byte ptr [eax]
		shl	eax, 18h
		or	edi, eax
		movzx	eax, byte ptr [edx+1]
		shl	eax, 10h
		or	edi, eax
		movzx	eax, byte ptr [edx+2]
		shl	eax, 8
		or	edi, eax
		mov	[ebp+var_98], edi

loc_62BA5574:				; CODE XREF: silc_client_command_reply_whois+79Aj
		lea	eax, [ebp+var_1C]
		mov	[esp+0F8h+var_F0], eax
		mov	[esp+0F8h+var_F4], 9
		mov	eax, [ebp+var_80]
		mov	[esp+0F8h+var_F8], eax
		call	silc_argument_get_arg_type
		mov	[ebp+var_A0], eax
		mov	[esp+0F8h+var_F0], esi
		mov	edx, [ebp+var_7C]
		mov	[esp+0F8h+var_F4], edx
		mov	ecx, [ebp+var_84]
		mov	[esp+0F8h+var_F8], ecx
		call	silc_client_get_client_by_id
		mov	[ebp+var_88], eax
		test	eax, eax
		jz	loc_62BA5891
		mov	eax, [ebp+var_8C]
		mov	[esp+0F8h+var_E0], eax ; int
		mov	edx, [ebp+var_9C]
		mov	[esp+0F8h+var_E4], edx ; char *
		mov	ecx, [ebp+var_94]
		mov	[esp+0F8h+var_E8], ecx ; int
		mov	esi, [ebp+var_90]
		mov	[esp+0F8h+var_EC], esi ; int
		mov	edi, [ebp+var_88]
		mov	[esp+0F8h+var_F0], edi ; int
		mov	eax, [ebp+var_7C]
		mov	[esp+0F8h+var_F4], eax ; int
		mov	edx, [ebp+var_84]
		mov	[esp+0F8h+var_F8], edx ; int
		call	silc_client_update_client

loc_62BA5602:				; CODE XREF: silc_client_command_reply_whois+78Bj
		mov	ecx, [ebp+var_88]
		mov	eax, [ecx+3D8h]
		mov	[esp+0F8h+var_F8], eax
		call	silc_rwlock_wrlock
		mov	esi, [ebp+var_A0]
		test	esi, esi
		jz	short loc_62BA562A
		cmp	[ebp+var_1C], 14h
		jz	loc_62BA5960

loc_62BA562A:				; CODE XREF: silc_client_command_reply_whois+4AAj
					; silc_client_command_reply_whois+80Dj
		lea	eax, [ebp+var_20]
		mov	[esp+0F8h+var_F0], eax
		mov	[esp+0F8h+var_F4], 0Bh
		mov	edx, [ebp+var_80]
		mov	[esp+0F8h+var_F8], edx
		call	silc_argument_get_arg_type
		test	eax, eax
		jz	short loc_62BA5687
		mov	ecx, [ebp+var_88]
		mov	edx, [ecx+3B8h]
		test	edx, edx
		jz	short loc_62BA566C
		mov	[esp+0F8h+var_F8], edx
		mov	[ebp+var_AC], eax
		call	silc_attribute_payload_list_free
		mov	eax, [ebp+var_AC]

loc_62BA566C:				; CODE XREF: silc_client_command_reply_whois+4E2j
		mov	edx, [ebp+var_20]
		mov	[esp+0F8h+var_F4], edx
		mov	[esp+0F8h+var_F8], eax
		call	silc_attribute_payload_parse
		mov	esi, [ebp+var_88]
		mov	[esi+3B8h], eax

loc_62BA5687:				; CODE XREF: silc_client_command_reply_whois+4D2j
		mov	edi, [ebp+var_88]
		mov	eax, [edi+3D8h]
		mov	[esp+0F8h+var_F8], eax
		call	silc_rwlock_unlock
		cmp	[ebp+var_A1], 0
		jnz	loc_62BA57AF
		mov	edx, [ebp+var_88]
		mov	eax, [edx+3B8h]
		mov	[esp+0F8h+var_D0], eax
		mov	eax, [ebp+var_24]
		mov	[esp+0F8h+var_D4], eax
		mov	ecx, [ebp+var_A0]
		mov	[esp+0F8h+var_D8], ecx
		mov	esi, [ebp+var_98]
		mov	[esp+0F8h+var_DC], esi
		mov	edi, [ebp+var_8C]
		mov	[esp+0F8h+var_E0], edi
		mov	[esp+0F8h+var_E4], 0
		mov	eax, [ebp+var_9C]
		mov	[esp+0F8h+var_E8], eax
		mov	edx, [ebp+var_94]
		mov	[esp+0F8h+var_EC], edx
		mov	ecx, [ebp+var_90]
		mov	[esp+0F8h+var_F0], ecx
		mov	esi, [ebp+var_88]
		mov	[esp+0F8h+var_F4], esi
		mov	[esp+0F8h+var_F8], ebx
		call	sub_62B9ED04
		mov	[esp+0F8h+var_F0], esi
		mov	edi, [ebp+var_7C]
		mov	[esp+0F8h+var_F4], edi
		mov	eax, [ebp+var_84]
		mov	[esp+0F8h+var_F8], eax
		call	silc_client_unref_client
		jmp	loc_62BA53AC
; ---------------------------------------------------------------------------

loc_62BA5733:				; CODE XREF: silc_client_command_reply_whois+214j
		lea	edx, [ebp+var_28]
		mov	[esp+0F8h+var_EC], edx
		lea	edx, [ebp+var_2C]
		mov	[esp+0F8h+var_F0], edx
		mov	[esp+0F8h+var_F4], edi
		movzx	eax, al
		mov	[esp+0F8h+var_F8], eax
		call	silc_status_get_args
		jmp	loc_62BA5396
; ---------------------------------------------------------------------------

loc_62BA5755:				; CODE XREF: silc_client_command_reply_whois+2C7j
					; silc_client_command_reply_whois+2D5j	...
		mov	[ebp+var_28], 0
		mov	[ebp+var_2C], 0
		mov	al, [ebx+5Ch]
		test	al, al
		jnz	short loc_62BA578D
		mov	byte ptr [ebx+5Dh], 1Dh
		mov	byte ptr [ebx+5Ch], 1Dh

loc_62BA5772:				; CODE XREF: silc_client_command_reply_whois+639j
					; silc_client_command_reply_whois+833j
		mov	eax, [ebp+var_2C]
		mov	[esp+0F8h+var_F0], eax
		mov	eax, [ebp+var_28]
		mov	[esp+0F8h+var_F4], eax
		mov	[esp+0F8h+var_F8], ebx
		call	sub_62B9ED04
		jmp	loc_62BA53AC
; ---------------------------------------------------------------------------

loc_62BA578D:				; CODE XREF: silc_client_command_reply_whois+5F4j
					; silc_client_command_reply_whois+825j
		lea	edx, [ebp+var_2C]
		mov	[esp+0F8h+var_EC], edx
		lea	edx, [ebp+var_28]
		mov	[esp+0F8h+var_F0], edx
		mov	edx, [ebp+var_80]
		mov	[esp+0F8h+var_F4], edx
		movzx	eax, al
		mov	[esp+0F8h+var_F8], eax
		call	silc_status_get_args
		jmp	short loc_62BA5772
; ---------------------------------------------------------------------------

loc_62BA57AF:				; CODE XREF: silc_client_command_reply_whois+52Ej
		mov	edx, [ebp+var_38]
		mov	eax, [ebp+var_34]
		sub	eax, edx
		mov	[esp+0F8h+var_F4], eax
		mov	[esp+0F8h+var_F8], edx
		call	silc_channel_payload_parse_list
		mov	esi, eax
		test	eax, eax
		jz	short loc_62BA57E5
		lea	eax, [ebp+var_24]
		mov	[esp+0F8h+var_F0], eax
		mov	eax, [esi+10h]
		shr	eax, 2
		mov	[esp+0F8h+var_F4], eax
		lea	eax, [ebp+var_4C]
		mov	[esp+0F8h+var_F8], eax
		call	silc_get_mode_list

loc_62BA57E5:				; CODE XREF: silc_client_command_reply_whois+653j
		mov	ecx, [ebp+var_88]
		mov	eax, [ecx+3B8h]
		mov	[esp+0F8h+var_D0], eax
		mov	eax, [ebp+var_24]
		mov	[esp+0F8h+var_D4], eax
		mov	edi, [ebp+var_A0]
		mov	[esp+0F8h+var_D8], edi
		mov	eax, [ebp+var_98]
		mov	[esp+0F8h+var_DC], eax
		mov	edx, [ebp+var_8C]
		mov	[esp+0F8h+var_E0], edx
		mov	[esp+0F8h+var_E4], esi
		mov	ecx, [ebp+var_9C]
		mov	[esp+0F8h+var_E8], ecx
		mov	edi, [ebp+var_94]
		mov	[esp+0F8h+var_EC], edi
		mov	eax, [ebp+var_90]
		mov	[esp+0F8h+var_F0], eax
		mov	edx, [ebp+var_88]
		mov	[esp+0F8h+var_F4], edx
		mov	[esp+0F8h+var_F8], ebx
		call	sub_62B9ED04
		mov	ecx, [ebp+var_88]
		mov	[esp+0F8h+var_F0], ecx
		mov	edi, [ebp+var_7C]
		mov	[esp+0F8h+var_F4], edi
		mov	eax, [ebp+var_84]
		mov	[esp+0F8h+var_F8], eax
		call	silc_client_unref_client
		mov	[esp+0F8h+var_F8], esi
		call	silc_channel_payload_list_free
		mov	eax, [ebp+var_24]
		mov	[esp+0F8h+var_F8], eax
		call	silc_free
		jmp	loc_62BA53AC
; ---------------------------------------------------------------------------

loc_62BA5885:				; CODE XREF: silc_client_command_reply_whois+317j
		mov	[ebp+var_A1], 0
		jmp	loc_62BA54D8
; ---------------------------------------------------------------------------

loc_62BA5891:				; CODE XREF: silc_client_command_reply_whois+441j
		mov	edi, [ebp+var_8C]
		mov	[esp+0F8h+var_E0], edi ; int
		mov	[esp+0F8h+var_E4], esi ; int
		mov	eax, [ebp+var_9C]
		mov	[esp+0F8h+var_E8], eax ; char *
		mov	edx, [ebp+var_94]
		mov	[esp+0F8h+var_EC], edx ; int
		mov	ecx, [ebp+var_90]
		mov	[esp+0F8h+var_F0], ecx ; int
		mov	esi, [ebp+var_7C]
		mov	[esp+0F8h+var_F4], esi ; int
		mov	edi, [ebp+var_84]
		mov	[esp+0F8h+var_F8], edi ; int
		call	silc_client_add_client
		mov	[ebp+var_88], eax
		test	eax, eax
		jz	loc_62BA5986
		mov	ecx, [ebp+var_88]
		mov	[esp+0F8h+var_F0], ecx
		mov	esi, [ebp+var_7C]
		mov	[esp+0F8h+var_F4], esi
		mov	edi, [ebp+var_84]
		mov	[esp+0F8h+var_F8], edi
		call	silc_client_ref_client
		jmp	loc_62BA5602
; ---------------------------------------------------------------------------

loc_62BA5904:				; CODE XREF: silc_client_command_reply_whois+3D6j
		mov	[ebp+var_98], 0
		jmp	loc_62BA5574
; ---------------------------------------------------------------------------

loc_62BA5913:				; CODE XREF: silc_client_command_reply_whois+382j
		mov	[ebp+var_8C], 0
		jmp	loc_62BA552C
; ---------------------------------------------------------------------------

loc_62BA5922:				; CODE XREF: silc_client_command_reply_whois+348j
		mov	[ebp+var_2C], 0
		mov	[ebp+var_28], 0
		mov	al, [ebx+5Ch]
		test	al, al
		jz	loc_62BA538E
		lea	edx, [ebp+var_28]
		mov	[esp+0F8h+var_EC], edx
		lea	edx, [ebp+var_2C]
		mov	[esp+0F8h+var_F0], edx
		mov	edx, [ebp+var_80]
		mov	[esp+0F8h+var_F4], edx
		movzx	eax, al
		mov	[esp+0F8h+var_F8], eax
		call	silc_status_get_args
		jmp	loc_62BA5396
; ---------------------------------------------------------------------------

loc_62BA5960:				; CODE XREF: silc_client_command_reply_whois+4B0j
		mov	esi, [ebp+var_88]
		add	esi, 3BCh
		mov	[ebp+var_A8], esi
		mov	ecx, 5
		mov	edi, esi
		mov	esi, [ebp+var_A0]
		rep movsd
		jmp	loc_62BA562A
; ---------------------------------------------------------------------------

loc_62BA5986:				; CODE XREF: silc_client_command_reply_whois+766j
		mov	[ebp+var_28], 0
		mov	[ebp+var_2C], 0
		mov	al, [ebx+5Ch]
		test	al, al
		jnz	loc_62BA578D
		mov	byte ptr [ebx+5Dh], 30h
		mov	byte ptr [ebx+5Ch], 30h
		jmp	loc_62BA5772
silc_client_command_reply_whois	endp

; Exported entry  67. silc_client_command_reply_processed

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public silc_client_command_reply_processed
silc_client_command_reply_processed proc near ;	DATA XREF: silc_client_command_reply_quit+6o
					; silc_client_command_reply_service+6Do ...

var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		push	esi
		push	ebx
		sub	esp, 10h
		mov	ebx, [ebp+arg_4]
		mov	esi, [ebx+4]
		mov	eax, [ebp+arg_8]
		mov	[esp+18h+var_18], eax
		call	silc_command_payload_free
		mov	al, [ebx+5Ch]
		test	al, al
		jz	short loc_62BA59D4
		cmp	al, 3
		jz	short loc_62BA59D4
		cmp	al, 9
		jbe	short loc_62BA59E0

loc_62BA59D4:				; CODE XREF: silc_client_command_reply_processed+1Ej
					; silc_client_command_reply_processed+22j
		mov	eax, 3
		add	esp, 10h
		pop	ebx
		pop	esi
		leave
		retn
; ---------------------------------------------------------------------------

loc_62BA59E0:				; CODE XREF: silc_client_command_reply_processed+26j
		mov	eax, [esi+54h]
		mov	eax, [eax+0B8h]
		mov	[esp+18h+var_18], eax
		call	silc_mutex_lock
		and	byte ptr [ebx+64h], 0FBh
		mov	eax, [esi+54h]
		mov	ecx, [eax+0D8h]
		test	ecx, ecx
		jz	short loc_62BA5A74
		movzx	edx, word ptr [eax+0E4h]
		mov	ecx, [eax+0DCh]
		mov	[ecx+edx], ebx

loc_62BA5A12:				; CODE XREF: silc_client_command_reply_processed+CEj
		test	byte ptr [eax+0E8h], 1
		jz	short loc_62BA5A2B
		movzx	edx, word ptr [eax+0E6h]
		mov	ecx, [eax+0DCh]
		mov	[ebx+edx], ecx

loc_62BA5A2B:				; CODE XREF: silc_client_command_reply_processed+6Dj
		mov	[eax+0DCh], ebx
		movzx	edx, word ptr [eax+0E4h]
		mov	dword ptr [ebx+edx], 0
		add	dword ptr [eax+0E8h], 4
		mov	eax, [esi+54h]
		mov	eax, [eax+0B8h]
		mov	[esp+18h+var_18], eax
		call	silc_mutex_unlock
		mov	[esp+14h+var_10], offset silc_client_command_reply_wait
		mov	eax, [ebp+arg_0]
		mov	[esp+14h+var_14], eax
		call	silc_fsm_next
		xor	eax, eax
		add	esp, 10h
		pop	ebx
		pop	esi
		leave
		retn
; ---------------------------------------------------------------------------
		align 4

loc_62BA5A74:				; CODE XREF: silc_client_command_reply_processed+54j
		mov	[eax+0D8h], ebx
		jmp	short loc_62BA5A12
silc_client_command_reply_processed endp

; Exported entry  66. silc_client_command_reply_process

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public silc_client_command_reply_process
silc_client_command_reply_process proc near ; DATA XREF: silc_client_command_reply+12Ao

var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		push	esi
		push	ebx
		sub	esp, 10h
		mov	esi, [ebp+arg_0]
		mov	ebx, [ebp+arg_4]
		lea	eax, [ebx+5Dh]
		mov	[esp+18h+var_10], eax
		lea	eax, [ebx+5Ch]
		mov	[esp+18h+var_14], eax
		mov	eax, [ebp+arg_8]
		mov	[esp+18h+var_18], eax
		call	silc_command_get_status
		cmp	byte ptr [ebx+34h], 1Bh	; switch 28 cases
		jbe	short loc_62BA5AB8

loc_62BA5AA9:				; CODE XREF: silc_client_command_reply_process+40j
					; DATA XREF: .rdata:off_62BA9238o
		mov	eax, 3		; jumptable 62BA5ABC default case
		xchg	ax, ax

loc_62BA5AB0:				; CODE XREF: silc_client_command_reply_process+5Aj
					; silc_client_command_reply_process+6Ej ...
		add	esp, 10h
		pop	ebx
		pop	esi
		leave
		retn
; ---------------------------------------------------------------------------
		align 4

loc_62BA5AB8:				; CODE XREF: silc_client_command_reply_process+2Bj
		movzx	eax, byte ptr [ebx+34h]
		jmp	ds:off_62BA9238[eax*4] ; switch	jump
; ---------------------------------------------------------------------------
		align 4

loc_62BA5AC4:				; CODE XREF: silc_client_command_reply_process+40j
					; DATA XREF: .rdata:off_62BA9238o
		mov	[esp+18h+var_14], offset silc_client_command_reply_service ; jumptable 62BA5ABC	case 27
		mov	[esp+18h+var_18], esi
		call	silc_fsm_next
		xor	eax, eax
		jmp	short loc_62BA5AB0
; ---------------------------------------------------------------------------

loc_62BA5AD8:				; CODE XREF: silc_client_command_reply_process+40j
					; DATA XREF: .rdata:off_62BA9238o
		mov	[esp+18h+var_14], offset silc_client_command_reply_getkey ; jumptable 62BA5ABC case 26
		mov	[esp+18h+var_18], esi
		call	silc_fsm_next
		xor	eax, eax
		jmp	short loc_62BA5AB0
; ---------------------------------------------------------------------------

loc_62BA5AEC:				; CODE XREF: silc_client_command_reply_process+40j
					; DATA XREF: .rdata:off_62BA9238o
		mov	[esp+18h+var_14], offset silc_client_command_reply_users ; jumptable 62BA5ABC case 25
		mov	[esp+18h+var_18], esi
		call	silc_fsm_next
		xor	eax, eax
		jmp	short loc_62BA5AB0
; ---------------------------------------------------------------------------

loc_62BA5B00:				; CODE XREF: silc_client_command_reply_process+40j
					; DATA XREF: .rdata:off_62BA9238o
		mov	[esp+18h+var_14], offset silc_client_command_reply_leave ; jumptable 62BA5ABC case 24
		mov	[esp+18h+var_18], esi
		call	silc_fsm_next
		xor	eax, eax
		jmp	short loc_62BA5AB0
; ---------------------------------------------------------------------------

loc_62BA5B14:				; CODE XREF: silc_client_command_reply_process+40j
					; DATA XREF: .rdata:off_62BA9238o
		mov	[esp+18h+var_14], offset silc_client_command_reply_silcoper ; jumptable	62BA5ABC case 23
		mov	[esp+18h+var_18], esi
		call	silc_fsm_next
		xor	eax, eax
		jmp	short loc_62BA5AB0
; ---------------------------------------------------------------------------

loc_62BA5B28:				; CODE XREF: silc_client_command_reply_process+40j
					; DATA XREF: .rdata:off_62BA9238o
		mov	[esp+18h+var_14], offset silc_client_command_reply_watch ; jumptable 62BA5ABC case 22
		mov	[esp+18h+var_18], esi
		call	silc_fsm_next
		xor	eax, eax
		jmp	loc_62BA5AB0
; ---------------------------------------------------------------------------
		align 10h

loc_62BA5B40:				; CODE XREF: silc_client_command_reply_process+40j
					; DATA XREF: .rdata:off_62BA9238o
		mov	[esp+18h+var_14], offset silc_client_command_reply_detach ; jumptable 62BA5ABC case 21
		mov	[esp+18h+var_18], esi
		call	silc_fsm_next
		xor	eax, eax
		jmp	loc_62BA5AB0
; ---------------------------------------------------------------------------
		align 4

loc_62BA5B58:				; CODE XREF: silc_client_command_reply_process+40j
					; DATA XREF: .rdata:off_62BA9238o
		mov	[esp+18h+var_14], offset silc_client_command_reply_ban ; jumptable 62BA5ABC case 20
		mov	[esp+18h+var_18], esi
		call	silc_fsm_next
		xor	eax, eax
		jmp	loc_62BA5AB0
; ---------------------------------------------------------------------------
		align 10h

loc_62BA5B70:				; CODE XREF: silc_client_command_reply_process+40j
					; DATA XREF: .rdata:off_62BA9238o
		mov	[esp+18h+var_14], offset silc_client_command_reply_kick	; jumptable 62BA5ABC case 19
		mov	[esp+18h+var_18], esi
		call	silc_fsm_next
		xor	eax, eax
		jmp	loc_62BA5AB0
; ---------------------------------------------------------------------------
		align 4

loc_62BA5B88:				; CODE XREF: silc_client_command_reply_process+40j
					; DATA XREF: .rdata:off_62BA9238o
		mov	[esp+18h+var_14], offset silc_client_command_reply_cumode ; jumptable 62BA5ABC case 18
		mov	[esp+18h+var_18], esi
		call	silc_fsm_next
		xor	eax, eax
		jmp	loc_62BA5AB0
; ---------------------------------------------------------------------------
		align 10h

loc_62BA5BA0:				; CODE XREF: silc_client_command_reply_process+40j
					; DATA XREF: .rdata:off_62BA9238o
		mov	[esp+18h+var_14], offset silc_client_command_reply_cmode ; jumptable 62BA5ABC case 17
		mov	[esp+18h+var_18], esi
		call	silc_fsm_next
		xor	eax, eax
		jmp	loc_62BA5AB0
; ---------------------------------------------------------------------------
		align 4

loc_62BA5BB8:				; CODE XREF: silc_client_command_reply_process+40j
					; DATA XREF: .rdata:off_62BA9238o
		mov	[esp+18h+var_14], offset silc_client_command_reply_umode ; jumptable 62BA5ABC case 16
		mov	[esp+18h+var_18], esi
		call	silc_fsm_next
		xor	eax, eax
		jmp	loc_62BA5AB0
; ---------------------------------------------------------------------------
		align 10h

loc_62BA5BD0:				; CODE XREF: silc_client_command_reply_process+40j
					; DATA XREF: .rdata:off_62BA9238o
		mov	[esp+18h+var_14], offset silc_client_command_reply_motd	; jumptable 62BA5ABC case 15
		mov	[esp+18h+var_18], esi
		call	silc_fsm_next
		xor	eax, eax
		jmp	loc_62BA5AB0
; ---------------------------------------------------------------------------
		align 4

loc_62BA5BE8:				; CODE XREF: silc_client_command_reply_process+40j
					; DATA XREF: .rdata:off_62BA9238o
		mov	[esp+18h+var_14], offset silc_client_command_reply_join	; jumptable 62BA5ABC case 14
		mov	[esp+18h+var_18], esi
		call	silc_fsm_next
		xor	eax, eax
		jmp	loc_62BA5AB0
; ---------------------------------------------------------------------------
		align 10h

loc_62BA5C00:				; CODE XREF: silc_client_command_reply_process+40j
					; DATA XREF: .rdata:off_62BA9238o
		mov	[esp+18h+var_14], offset silc_client_command_reply_oper	; jumptable 62BA5ABC case 13
		mov	[esp+18h+var_18], esi
		call	silc_fsm_next
		xor	eax, eax
		jmp	loc_62BA5AB0
; ---------------------------------------------------------------------------
		align 4

loc_62BA5C18:				; CODE XREF: silc_client_command_reply_process+40j
					; DATA XREF: .rdata:off_62BA9238o
		mov	[esp+18h+var_14], offset silc_client_command_reply_ping	; jumptable 62BA5ABC case 12
		mov	[esp+18h+var_18], esi
		call	silc_fsm_next
		xor	eax, eax
		jmp	loc_62BA5AB0
; ---------------------------------------------------------------------------
		align 10h

loc_62BA5C30:				; CODE XREF: silc_client_command_reply_process+40j
					; DATA XREF: .rdata:off_62BA9238o
		mov	[esp+18h+var_14], offset silc_client_command_reply_stats ; jumptable 62BA5ABC case 11
		mov	[esp+18h+var_18], esi
		call	silc_fsm_next
		xor	eax, eax
		jmp	loc_62BA5AB0
; ---------------------------------------------------------------------------
		align 4

loc_62BA5C48:				; CODE XREF: silc_client_command_reply_process+40j
					; DATA XREF: .rdata:off_62BA9238o
		mov	[esp+18h+var_14], offset silc_client_command_reply_info	; jumptable 62BA5ABC case 10
		mov	[esp+18h+var_18], esi
		call	silc_fsm_next
		xor	eax, eax
		jmp	loc_62BA5AB0
; ---------------------------------------------------------------------------
		align 10h

loc_62BA5C60:				; CODE XREF: silc_client_command_reply_process+40j
					; DATA XREF: .rdata:off_62BA9238o
		mov	[esp+18h+var_14], offset silc_client_command_reply_kill	; jumptable 62BA5ABC case 9
		mov	[esp+18h+var_18], esi
		call	silc_fsm_next
		xor	eax, eax
		jmp	loc_62BA5AB0
; ---------------------------------------------------------------------------
		align 4

loc_62BA5C78:				; CODE XREF: silc_client_command_reply_process+40j
					; DATA XREF: .rdata:off_62BA9238o
		mov	[esp+18h+var_14], offset silc_client_command_reply_quit	; jumptable 62BA5ABC case 8
		mov	[esp+18h+var_18], esi
		call	silc_fsm_next
		xor	eax, eax
		jmp	loc_62BA5AB0
; ---------------------------------------------------------------------------
		align 10h

loc_62BA5C90:				; CODE XREF: silc_client_command_reply_process+40j
					; DATA XREF: .rdata:off_62BA9238o
		mov	[esp+18h+var_14], offset silc_client_command_reply_invite ; jumptable 62BA5ABC case 7
		mov	[esp+18h+var_18], esi
		call	silc_fsm_next
		xor	eax, eax
		jmp	loc_62BA5AB0
; ---------------------------------------------------------------------------
		align 4

loc_62BA5CA8:				; CODE XREF: silc_client_command_reply_process+40j
					; DATA XREF: .rdata:off_62BA9238o
		mov	[esp+18h+var_14], offset silc_client_command_reply_topic ; jumptable 62BA5ABC case 6
		mov	[esp+18h+var_18], esi
		call	silc_fsm_next
		xor	eax, eax
		jmp	loc_62BA5AB0
; ---------------------------------------------------------------------------
		align 10h

loc_62BA5CC0:				; CODE XREF: silc_client_command_reply_process+40j
					; DATA XREF: .rdata:off_62BA9238o
		mov	[esp+18h+var_14], offset silc_client_command_reply_list	; jumptable 62BA5ABC case 5
		mov	[esp+18h+var_18], esi
		call	silc_fsm_next
		xor	eax, eax
		jmp	loc_62BA5AB0
; ---------------------------------------------------------------------------
		align 4

loc_62BA5CD8:				; CODE XREF: silc_client_command_reply_process+40j
					; DATA XREF: .rdata:off_62BA9238o
		mov	[esp+18h+var_14], offset silc_client_command_reply_nick	; jumptable 62BA5ABC case 4
		mov	[esp+18h+var_18], esi
		call	silc_fsm_next
		xor	eax, eax
		jmp	loc_62BA5AB0
; ---------------------------------------------------------------------------
		align 10h

loc_62BA5CF0:				; CODE XREF: silc_client_command_reply_process+40j
					; DATA XREF: .rdata:off_62BA9238o
		mov	[esp+18h+var_14], offset silc_client_command_reply_identify ; jumptable	62BA5ABC case 3
		mov	[esp+18h+var_18], esi
		call	silc_fsm_next
		xor	eax, eax
		jmp	loc_62BA5AB0
; ---------------------------------------------------------------------------
		align 4

loc_62BA5D08:				; CODE XREF: silc_client_command_reply_process+40j
					; DATA XREF: .rdata:off_62BA9238o
		mov	[esp+18h+var_14], offset silc_client_command_reply_whowas ; jumptable 62BA5ABC case 2
		mov	[esp+18h+var_18], esi
		call	silc_fsm_next
		xor	eax, eax
		jmp	loc_62BA5AB0
; ---------------------------------------------------------------------------
		align 10h

loc_62BA5D20:				; CODE XREF: silc_client_command_reply_process+40j
					; DATA XREF: .rdata:off_62BA9238o
		mov	[esp+18h+var_14], offset silc_client_command_reply_whois ; jumptable 62BA5ABC case 1
		mov	[esp+18h+var_18], esi
		call	silc_fsm_next
		xor	eax, eax
		jmp	loc_62BA5AB0
silc_client_command_reply_process endp

; ---------------------------------------------------------------------------
		align 4
; Exported entry  76. silc_client_command_reply_wait

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public silc_client_command_reply_wait
silc_client_command_reply_wait proc near ; DATA	XREF: silc_client_command_service+47o
					; silc_client_command_send_argv+161o ...

var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		push	ebx
		sub	esp, 14h
		mov	ebx, [ebp+arg_0]
		mov	[esp+18h+var_14], 0
		mov	[esp+18h+var_18], ebx
		call	silc_fsm_set_state_context
		mov	eax, [ebp+arg_4]
		cmp	byte ptr [eax+34h], 0Ch
		jz	short loc_62BA5D88
		mov	eax, 28h

loc_62BA5D60:				; CODE XREF: silc_client_command_reply_wait+55j
		mov	[esp+18h+var_C], 0
		mov	[esp+18h+var_10], eax
		mov	[esp+18h+var_14], offset silc_client_command_reply_timeout
		mov	[esp+18h+var_18], ebx
		call	silc_fsm_next_later
		mov	eax, 2
		add	esp, 14h
		pop	ebx
		leave
		retn
; ---------------------------------------------------------------------------
		align 4

loc_62BA5D88:				; CODE XREF: silc_client_command_reply_wait+21j
		mov	eax, 3Ch
		jmp	short loc_62BA5D60
silc_client_command_reply_wait endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  48. silc_client_command_reply

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public silc_client_command_reply
silc_client_command_reply proc near	; DATA XREF: silc_client_connection_st_packet:loc_62B81F40o

var_58		= dword	ptr -58h
var_54		= dword	ptr -54h
var_3C		= dword	ptr -3Ch
var_2C		= dword	ptr -2Ch
var_28		= byte ptr -28h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		sub	esp, 4Ch
		mov	esi, [ebp+arg_8]
		mov	edx, [esi+0Ch]
		mov	eax, [esi+10h]
		sub	eax, edx
		mov	[esp+58h+var_54], eax
		mov	[esp+58h+var_58], edx
		call	silc_command_payload_parse
		mov	ebx, eax
		mov	[esp+58h+var_58], esi
		call	silc_packet_free
		test	ebx, ebx
		jz	loc_62BA5F06
		mov	[esp+58h+var_58], ebx
		call	silc_command_get_ident
		mov	edi, eax
		mov	[esp+58h+var_58], ebx
		call	silc_command_get
		mov	ecx, [ebp+arg_4]
		mov	edx, [ecx+54h]
		mov	edx, [edx+0B8h]
		mov	[esp+58h+var_58], edx
		mov	[ebp+var_28], al
		call	silc_mutex_lock
		mov	ecx, [ebp+arg_4]
		mov	edx, [ecx+54h]
		mov	ecx, [edx+0D8h]
		mov	[edx+0E0h], ecx
		and	byte ptr [edx+0E8h], 0FDh
		mov	ecx, [ebp+arg_4]
		mov	edx, [ecx+54h]
		mov	al, [ebp+var_28]
		lea	esi, [esi+0]

loc_62BA5E10:				; CODE XREF: silc_client_command_reply+B4j
					; silc_client_command_reply+BAj
		mov	esi, [edx+0E0h]
		test	esi, esi
		jz	loc_62BA5EF0
		test	byte ptr [edx+0E8h], 2
		jz	loc_62BA5EE0
		movzx	ecx, word ptr [edx+0E6h]
		mov	ecx, [esi+ecx]

loc_62BA5E35:				; CODE XREF: silc_client_command_reply+15Aj
		mov	[edx+0E0h], ecx
		mov	cl, [esi+34h]
		cmp	al, cl
		jz	short loc_62BA5E46
		test	cl, cl
		jnz	short loc_62BA5E10

loc_62BA5E46:				; CODE XREF: silc_client_command_reply+B0j
		cmp	di, [esi+36h]
		jnz	short loc_62BA5E10
		mov	edi, [edx+0D8h]
		mov	[ebp+var_3C], edi
		test	edi, edi
		jz	short loc_62BA5E91
		cmp	esi, edi
		jz	loc_62BA5F8B
		movzx	eax, word ptr [edx+0E4h]
		mov	[ebp+var_1C], eax
		mov	ecx, [ebp+var_3C]
		mov	[ebp+var_20], ebx
		mov	ebx, eax
		jmp	short loc_62BA5E82
; ---------------------------------------------------------------------------
		align 4

loc_62BA5E78:				; CODE XREF: silc_client_command_reply+F9j
		cmp	esi, eax
		jz	loc_62BA5F14
		mov	ecx, eax

loc_62BA5E82:				; CODE XREF: silc_client_command_reply+E3j
		lea	edi, [ecx+ebx]
		mov	eax, [edi]
		test	eax, eax
		jnz	short loc_62BA5E78
		mov	[ebp+var_3C], ecx
		mov	ebx, [ebp+var_20]

loc_62BA5E91:				; CODE XREF: silc_client_command_reply+C7j
					; silc_client_command_reply+1CDj
		cmp	[edx+0DCh], esi
		jz	loc_62BA5F62
		mov	eax, [edx+0B8h]
		mov	[esp+58h+var_58], eax
		call	silc_mutex_unlock

loc_62BA5EAB:				; CODE XREF: silc_client_command_reply+1E9j
		add	esi, 8
		mov	[esp+58h+var_54], ebx
		mov	[esp+58h+var_58], esi
		call	silc_fsm_set_state_context
		mov	[esp+58h+var_54], offset silc_client_command_reply_process
		mov	[esp+58h+var_58], esi
		call	silc_fsm_next
		mov	[esp+58h+var_58], esi
		call	silc_fsm_continue_sync
		mov	eax, 3
		add	esp, 4Ch
		pop	ebx
		pop	esi
		pop	edi
		leave
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_62BA5EE0:				; CODE XREF: silc_client_command_reply+95j
		movzx	ecx, word ptr [edx+0E4h]
		mov	ecx, [esi+ecx]
		jmp	loc_62BA5E35
; ---------------------------------------------------------------------------
		align 10h

loc_62BA5EF0:				; CODE XREF: silc_client_command_reply+88j
		mov	eax, [edx+0B8h]
		mov	[esp+58h+var_58], eax
		call	silc_mutex_unlock
		mov	[esp+58h+var_58], ebx
		call	silc_command_payload_free

loc_62BA5F06:				; CODE XREF: silc_client_command_reply+2Cj
		mov	eax, 3
		add	esp, 4Ch
		pop	ebx
		pop	esi
		pop	edi
		leave
		retn
; ---------------------------------------------------------------------------
		align 4

loc_62BA5F14:				; CODE XREF: silc_client_command_reply+EAj
		mov	[ebp+var_3C], ecx
		mov	[ebp+var_2C], edi
		mov	ebx, [ebp+var_20]

loc_62BA5F1D:				; CODE XREF: silc_client_command_reply+215j
		mov	edi, [ebp+var_1C]
		mov	edi, [esi+edi]
		mov	[ebp+var_20], edi
		mov	eax, [ebp+var_2C]
		mov	[eax], edi
		test	edi, edi
		jz	short loc_62BA5F48
		test	byte ptr [edx+0E8h], 1
		jz	short loc_62BA5F48
		movzx	ecx, word ptr [edx+0E6h]
		mov	edi, [esi+ecx]
		mov	eax, [ebp+var_20]
		mov	[eax+ecx], edi

loc_62BA5F48:				; CODE XREF: silc_client_command_reply+19Dj
					; silc_client_command_reply+1A6j
		cmp	[edx+0E0h], esi
		jz	short loc_62BA5F7E

loc_62BA5F50:				; CODE XREF: silc_client_command_reply+1F9j
		sub	dword ptr [edx+0E8h], 4
		mov	edi, [ebp+arg_4]
		mov	edx, [edi+54h]
		jmp	loc_62BA5E91
; ---------------------------------------------------------------------------

loc_62BA5F62:				; CODE XREF: silc_client_command_reply+107j
		mov	ecx, [ebp+var_3C]
		mov	[edx+0DCh], ecx
		mov	eax, [edx+0B8h]
		mov	[esp+58h+var_58], eax
		call	silc_mutex_unlock
		jmp	loc_62BA5EAB
; ---------------------------------------------------------------------------

loc_62BA5F7E:				; CODE XREF: silc_client_command_reply+1BEj
		mov	ecx, [ebp+var_2C]
		mov	eax, [ecx]
		mov	[edx+0E0h], eax
		jmp	short loc_62BA5F50
; ---------------------------------------------------------------------------

loc_62BA5F8B:				; CODE XREF: silc_client_command_reply+CBj
		lea	eax, [edx+0D8h]
		mov	[ebp+var_2C], eax
		movzx	ecx, word ptr [edx+0E4h]
		mov	[ebp+var_1C], ecx
		mov	[ebp+var_3C], 0
		jmp	loc_62BA5F1D
silc_client_command_reply endp

; ---------------------------------------------------------------------------
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION silc_schedule_one]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION silc_schedule]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION silc_identifier_verify]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION silc_malloc]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION silc_rng_alloc]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION silc_rng_init]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION silc_rng_global_init]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION silc_schedule_init]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION silc_packet_engine_start]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION silc_cipher_register_default]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION silc_pkcs_register_default]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION silc_hash_register_default]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION silc_hmac_register_default]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION silc_schedule_uninit]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION silc_rng_free]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION silc_packet_engine_stop]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION silc_cipher_unregister_all]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION silc_pkcs_unregister_all]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION silc_hash_unregister_all]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION silc_hmac_unregister_all]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION silc_fsm_get_state_context]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION silc_schedule_stop]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION silc_fsm_event_wait]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION silc_fsm_thread_init]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION silc_fsm_next]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION silc_utf8_valid]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION silc_packet_free]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION silc_memdup]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION silc_async_abort]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION silc_fsm_is_started]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION silc_packet_stream_destroy]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION silc_fsm_continue_sync]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION silc_fsm_get_schedule]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION silc_fsm_init]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION silc_fsm_event_init]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION silc_fsm_start_sync]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION silc_fsm_event_signal]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION silc_schedule_task_del_by_context]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION silc_idcache_get_all]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION silc_idcache_free]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION silc_fsm_free]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION silc_mutex_free]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION silc_hash_free]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION silc_ske_free_rekey_material]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION silc_async_free]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION silc_calloc]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION silc_mutex_alloc]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION silc_hash_alloc]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION silc_idcache_alloc]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION silc_async_alloc]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION silc_fsm_thread_alloc]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION silc_fsm_set_state_context]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION silc_fsm_start]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION silc_free]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION silc_socket_stream_get_info]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION silc_format]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION silc_log_output]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION silc_fsm_finish]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION silc_hash_table_del_by_context]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION silc_hash_table_count]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION silc_hash_table_free]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION silc_attribute_payload_alloc]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION silc_hash_table_add]
		align 4

loc_62BA61A4:				; DATA XREF: silc_client_attribute_add+98o
					; silc_client_add_channel+EEo ...
		jmp	ds:silc_hash_ptr
; ---------------------------------------------------------------------------
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION silc_hash_table_alloc]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION silc_attribute_payload_free]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION silc_pkcs_public_key_encode]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION silc_attribute_get_attribute]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION silc_hash_table_find_foreach]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION silc_pkcs_sign]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION silc_attribute_get_data]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION silc_attribute_payload_encode_data]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION silc_timezone]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION silc_attribute_payload_encode]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION silc_hash_table_list]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION silc_hash_table_get]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION silc_hash_table_list_reset]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION silc_cipher_is_supported]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION silc_hmac_is_supported]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION silc_ske_process_key_material_data]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION silc_ske_free_key_material]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION silc_fsm_continue]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION silc_rwlock_wrlock]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION silc_hash_table_del]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION silc_rwlock_unlock]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION silc_message_payload_encode]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION silc_packet_send_ext]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION silc_hash_table_find]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION silc_message_get_data]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION silc_message_get_flags]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION silc_message_payload_free]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION silc_message_payload_parse]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION silc_channel_key_payload_parse]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION silc_channel_key_get_id]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION silc_id_str2id]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION silc_schedule_task_add]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION silc_channel_key_get_cipher]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION silc_cipher_alloc]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION silc_channel_key_get_key]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION silc_cipher_set_key]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION silc_hmac_alloc]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION silc_hash_make]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION silc_hmac_get_hash]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION silc_hash_len]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION silc_hmac_set_key]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION silc_channel_key_payload_free]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION silc_cipher_free]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION silc_hmac_free]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION silc_cipher_get_name]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION silc_hmac_get_name]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION silc_argument_list_parse_decoded]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION silc_pkcs_public_key_compare]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION silc_argument_list_free]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION silc_ske_rekey_responder]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION silc_ske_rekey_initiator]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION silc_ske_parse_version]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION silc_ske_free]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION silc_schedule_task_del_by_all]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION silc_connauth_alloc]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION silc_connauth_initiator]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION silc_connauth_free]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION silc_packet_send_va]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION silc_fsm_next_later]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION silc_ske_get_security_properties]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION silc_packet_stream_get_stream]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION silc_packet_stream_set_stream]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION silc_packet_stream_set_iv_included]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION silc_packet_set_sid]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION silc_stream_destroy]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION silc_ske_alloc]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION silc_ske_set_callbacks]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION silc_packet_set_ids]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION silc_ske_initiator]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION silc_fsm_get_context]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION silc_ske_set_keys]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION silc_ske_map_status]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION silc_packet_set_keys]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION silc_packet_stream_create]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION silc_packet_set_context]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION silc_net_udp_connect]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION silc_net_tcp_connect]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION silc_buffer_unformat]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION silc_rwlock_rdlock]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION silc_idcache_find_by_name_one]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION silc_channel_name_check]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION silc_idcache_find_by_name]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION silc_strncat]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION silc_idcache_find_by_context]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION silc_pkcs_public_key_free]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION silc_idcache_del_by_context]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION silc_utf8_strcasecmp]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION silc_utf8_strncasecmp]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION silc_rwlock_alloc]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION silc_parse_userfqdn]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION silc_idcache_add]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION silc_snprintf]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION silc_rwlock_free]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION silc_identifier_check]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION silc_idcache_update_by_context]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION silc_realloc]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION silc_id_payload_parse_id]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION silc_mutex_lock]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION silc_idcache_find_by_id_one]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION silc_id_payload_encode]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION silc_mutex_unlock]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION silc_key_agreement_payload_parse]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION silc_key_agreement_get_hostname]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION silc_key_agreement_get_port]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION silc_key_agreement_payload_free]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION silc_sftp_opendir]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION silc_sftp_readdir]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION silc_sftp_open]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION silc_sftp_close]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION silc_sftp_read]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION silc_file_write]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION silc_buffer_format]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION silc_file_open]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION silc_file_close]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION silc_asprintf]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION silc_sftp_fs_memory_alloc]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION silc_sftp_fs_memory_add_file]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION silc_file_size]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION silc_key_agreement_payload_encode]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION silc_packet_send_va_ext]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION silc_sftp_server_shutdown]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION silc_sftp_fs_memory_free]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION silc_sftp_client_shutdown]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION silc_packet_stream_wrap]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION silc_sftp_client_start]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION silc_sftp_server_start]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION silc_sftp_server_set_monitor]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION silc_key_agreement_get_protocol]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION silc_ske_get_key_material]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION silc_net_close_listener]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION silc_net_tcp_create_listener]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION silc_net_listener_get_port]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION silc_packet_stream_link]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION silc_net_get_local_port]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION silc_ske_responder]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION silc_packet_get_sender]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION silc_packet_stream_add_remote]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION silc_argument_get_arg_num]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION silc_public_key_payload_decode]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION silc_hmac_get_key]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION silc_argument_get_arg_type]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION silc_argument_get_decoded]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION silc_notify_payload_parse]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION silc_notify_get_args]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION silc_notify_get_type]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION silc_notify_payload_free]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION silc_cipher_set_iv]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION silc_packet_wait]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION silc_packet_wait_uninit]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION silc_packet_wait_init]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION silc_auth_public_key_auth_generate]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION silc_rng_get_rn16]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION silc_id_payload_encode_data]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION silc_id_id2str]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION silc_parse_command_line]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION silc_command_payload_parse]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION silc_command_get_args]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION silc_command_get]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION silc_command_payload_free]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION silc_attribute_payload_parse]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION silc_command_get_ident]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION silc_command_reply_payload_encode_va]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION silc_attribute_payload_list_free]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION silc_command_payload_encode]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION silc_command_payload_encode_vap]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION silc_packet_send]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION silc_auth_payload_encode]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION silc_load_key_pair]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION silc_rng_get_rn_data]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION silc_auth_public_key_auth_generate_wpub]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION silc_utf8_encoded_len]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION silc_utf8_encode]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION silc_time]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION silc_pkcs_get_type]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION silc_pkcs_load_public_key]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION silc_public_key_payload_encode]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION silc_argument_payload_encode_one]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION silc_argument_list_parse]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION silc_argument_payload_free]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION silc_get_status_message]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION silc_channel_payload_parse_list]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION silc_get_mode_list]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION silc_channel_payload_list_free]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION silc_status_get_args]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION silc_command_get_status]
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn bp-based	frame

; int __cdecl sub_62BA6780(char	*Format, char ArgList)
sub_62BA6780	proc near		; CODE XREF: sub_62BA67D0+CDp
					; sub_62BA68B0+CDp ...

Str		= dword	ptr -18h
Size		= dword	ptr -14h
Count		= dword	ptr -10h
File		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
Format		= dword	ptr  8
ArgList		= byte ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 18h
		mov	[ebp+var_8], ebx
		mov	ebx, ds:_iob
		mov	[ebp+var_4], esi
		lea	esi, [ebp+ArgList]
		mov	[esp+18h+Count], 17h ; Count
		mov	[esp+18h+Size],	1 ; Size
		add	ebx, 40h
		mov	[esp+18h+File],	ebx ; File
		mov	[esp+18h+Str], offset aMingwRuntimeFa ;	"Mingw runtime failure:\n"
		call	fwrite
		mov	eax, [ebp+Format]
		mov	[esp+18h+Count], esi ; ArgList
		mov	[esp+18h+Str], ebx ; File
		mov	[esp+18h+Size],	eax ; Format
		call	vfprintf
		call	abort
sub_62BA6780	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __fastcall sub_62BA67D0(size_t Size, void	*Src)
sub_62BA67D0	proc near		; CODE XREF: sub_62BA68B0+FCp
					; sub_62BA68B0+128p ...

lpAddress	= dword	ptr -48h
lpBuffer	= dword	ptr -44h
dwLength	= dword	ptr -40h
lpflOldProtect	= dword	ptr -3Ch
Buffer		= _MEMORY_BASIC_INFORMATION ptr	-38h
flOldProtect	= dword	ptr -1Ch
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4

		push	ebp
		mov	ebp, esp
		sub	esp, 48h
		test	ecx, ecx
		mov	[ebp+var_C], ebx
		mov	ebx, eax
		mov	[ebp+var_8], esi
		mov	esi, edx
		mov	[ebp+var_4], edi
		mov	edi, ecx
		jnz	short loc_62BA67F6

loc_62BA67E9:				; CODE XREF: sub_62BA67D0+8Bj
					; sub_62BA67D0+90j ...
		mov	ebx, [ebp+var_C]
		mov	esi, [ebp+var_8]
		mov	edi, [ebp+var_4]
		mov	esp, ebp
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_62BA67F6:				; CODE XREF: sub_62BA67D0+17j
		lea	eax, [ebp+Buffer]
		mov	[esp+48h+dwLength], 1Ch	; dwLength
		mov	[esp+48h+lpBuffer], eax	; lpBuffer
		mov	[esp+48h+lpAddress], ebx ; lpAddress
		call	VirtualQuery
		sub	esp, 0Ch
		test	eax, eax
		jz	short loc_62BA688A
		mov	eax, [ebp+Buffer.Protect]
		cmp	eax, 4
		jz	short loc_62BA6845
		cmp	eax, 40h
		jz	short loc_62BA6845
		lea	eax, [ebp+flOldProtect]
		mov	[esp+48h+lpflOldProtect], eax ;	lpflOldProtect
		mov	eax, [ebp+Buffer.RegionSize]
		mov	[esp+48h+dwLength], 40h	; flNewProtect
		mov	[esp+48h+lpBuffer], eax	; dwSize
		mov	eax, [ebp+Buffer.BaseAddress]
		mov	[esp+48h+lpAddress], eax ; lpAddress
		call	VirtualProtect
		sub	esp, 10h

loc_62BA6845:				; CODE XREF: sub_62BA67D0+4Aj
					; sub_62BA67D0+4Fj
		mov	[esp+48h+dwLength], edi	; Size
		mov	[esp+48h+lpBuffer], esi	; Src
		mov	[esp+48h+lpAddress], ebx ; Dst
		call	memcpy
		mov	eax, [ebp+Buffer.Protect]
		cmp	eax, 4
		jz	short loc_62BA67E9
		cmp	eax, 40h
		jz	short loc_62BA67E9
		lea	eax, [ebp+flOldProtect]
		mov	[esp+48h+lpflOldProtect], eax ;	lpflOldProtect
		mov	eax, [ebp+flOldProtect]
		mov	[esp+48h+dwLength], eax	; flNewProtect
		mov	eax, [ebp+Buffer.RegionSize]
		mov	[esp+48h+lpBuffer], eax	; dwSize
		mov	eax, [ebp+Buffer.BaseAddress]
		mov	[esp+48h+lpAddress], eax ; lpAddress
		call	VirtualProtect
		sub	esp, 10h
		jmp	loc_62BA67E9
; ---------------------------------------------------------------------------

loc_62BA688A:				; CODE XREF: sub_62BA67D0+42j
		mov	[esp+48h+dwLength], ebx
		mov	[esp+48h+lpBuffer], 1Ch	; ArgList
		mov	[esp+48h+lpAddress], offset Format ; "	VirtualQuery failed for	%d bytes at a"...
		call	sub_62BA6780
sub_62BA67D0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_62BA68B0	proc near		; CODE XREF: DllEntryPoint+78p

Format		= dword	ptr -38h
ArgList		= byte ptr -34h
Src		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4

		push	ebp
		mov	ebp, esp
		sub	esp, 38h
		mov	eax, ds:dword_62BAB040
		mov	[ebp+var_C], ebx
		mov	[ebp+var_8], esi
		mov	[ebp+var_4], edi
		test	eax, eax
		jz	short loc_62BA68D5

loc_62BA68C8:				; CODE XREF: sub_62BA68B0+3Cj
					; sub_62BA68B0+92j ...
		mov	ebx, [ebp+var_C]
		mov	esi, [ebp+var_8]
		mov	edi, [ebp+var_4]
		mov	esp, ebp
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_62BA68D5:				; CODE XREF: sub_62BA68B0+16j
		mov	eax, offset dword_62BA9354
		sub	eax, offset dword_62BA9354
		cmp	eax, 7
		mov	ds:dword_62BAB040, 1
		jle	short loc_62BA68C8
		cmp	eax, 0Bh
		mov	ebx, offset dword_62BA9354
		jle	short loc_62BA6920
		mov	edi, ds:dword_62BA9354
		test	edi, edi
		jnz	short loc_62BA6920
		mov	esi, ds:dword_62BA9358
		test	esi, esi
		jnz	short loc_62BA6920
		mov	ecx, ds:dword_62BA935C
		test	ecx, ecx
		jnz	short loc_62BA6920
		mov	ebx, offset dword_62BA9360
		nop
		lea	esi, [esi+0]

loc_62BA6920:				; CODE XREF: sub_62BA68B0+46j
					; sub_62BA68B0+50j ...
		mov	edx, [ebx]
		test	edx, edx
		jnz	short loc_62BA6982
		mov	eax, [ebx+4]
		test	eax, eax
		jnz	short loc_62BA6982
		mov	eax, [ebx+8]
		cmp	eax, 1
		jnz	loc_62BA6A46
		add	ebx, 0Ch
		cmp	ebx, offset dword_62BA9354
		jnb	short loc_62BA68C8
		mov	esi, 62B80000h

loc_62BA6949:				; CODE XREF: sub_62BA68B0+16Dj
		mov	eax, [ebx+4]
		mov	ecx, [ebx]
		movzx	edx, byte ptr [ebx+8]
		add	eax, esi
		add	ecx, esi
		cmp	edx, 10h
		mov	edi, [ecx]
		jz	short loc_62BA69C0
		cmp	edx, 20h
		jz	loc_62BA6A00
		cmp	edx, 8
		jz	short loc_62BA69E0
		mov	[ebp+var_1C], 0
		mov	dword ptr [esp+38h+ArgList], edx ; ArgList
		mov	[esp+38h+Format], offset aUnknownPseudoR ; "  Unknown pseudo relocation	bit size %d"...
		call	sub_62BA6780
; ---------------------------------------------------------------------------

loc_62BA6982:				; CODE XREF: sub_62BA68B0+74j
					; sub_62BA68B0+7Bj
		cmp	ebx, offset dword_62BA9354
		jnb	loc_62BA68C8
		mov	esi, 62B80000h
		lea	edi, [ebp+Src]

loc_62BA6996:				; CODE XREF: sub_62BA68B0+107j
		mov	eax, [ebx+4]
		mov	ecx, 4		; Size
		add	eax, esi
		mov	edx, [eax]
		add	edx, [ebx]
		add	ebx, 8
		mov	[ebp+Src], edx
		mov	edx, edi	; Src
		call	sub_62BA67D0
		cmp	ebx, offset dword_62BA9354
		jb	short loc_62BA6996
		jmp	loc_62BA68C8
; ---------------------------------------------------------------------------
		align 10h

loc_62BA69C0:				; CODE XREF: sub_62BA68B0+ABj
		movzx	edx, word ptr [eax]
		test	dx, dx
		js	short loc_62BA6A37
		sub	edx, ecx
		lea	edi, [edx+edi]
		mov	[ebp+var_1C], edi

loc_62BA69D0:				; CODE XREF: sub_62BA68B0+194j
		mov	ecx, 2		; Size
		lea	edx, [ebp+var_1C] ; Src
		call	sub_62BA67D0
		jmp	short loc_62BA6A14
; ---------------------------------------------------------------------------
		align 10h

loc_62BA69E0:				; CODE XREF: sub_62BA68B0+B9j
		movzx	edx, byte ptr [eax]
		test	dl, dl
		js	short loc_62BA6A28
		sub	edx, ecx
		lea	edi, [edx+edi]
		mov	[ebp+var_1C], edi

loc_62BA69EF:				; CODE XREF: sub_62BA68B0+185j
		mov	ecx, 1		; Size
		lea	edx, [ebp+var_1C] ; Src
		call	sub_62BA67D0
		jmp	short loc_62BA6A14
; ---------------------------------------------------------------------------
		align 10h

loc_62BA6A00:				; CODE XREF: sub_62BA68B0+B0j
		add	edi, [eax]
		lea	edx, [ebp+var_1C] ; Src
		sub	edi, ecx
		mov	ecx, 4		; Size
		mov	[ebp+var_1C], edi
		call	sub_62BA67D0

loc_62BA6A14:				; CODE XREF: sub_62BA68B0+12Dj
					; sub_62BA68B0+14Cj
		add	ebx, 0Ch
		cmp	ebx, offset dword_62BA9354
		jb	loc_62BA6949
		jmp	loc_62BA68C8
; ---------------------------------------------------------------------------

loc_62BA6A28:				; CODE XREF: sub_62BA68B0+135j
		or	edx, 0FFFFFF00h
		sub	edx, ecx
		add	edx, edi
		mov	[ebp+var_1C], edx
		jmp	short loc_62BA69EF
; ---------------------------------------------------------------------------

loc_62BA6A37:				; CODE XREF: sub_62BA68B0+116j
		or	edx, 0FFFF0000h
		sub	edx, ecx
		add	edx, edi
		mov	[ebp+var_1C], edx
		jmp	short loc_62BA69D0
; ---------------------------------------------------------------------------

loc_62BA6A46:				; CODE XREF: sub_62BA68B0+83j
		mov	dword ptr [esp+38h+ArgList], eax ; ArgList
		mov	[esp+38h+Format], offset aUnknownPseud_0 ; "  Unknown pseudo relocation	protocol ve"...
		call	sub_62BA6780
sub_62BA68B0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_62BA6A60	proc near		; DATA XREF: sub_62BA6A90:loc_62BA6ABAo
		push	ebp
		mov	ebp, esp
		sub	esp, 8
		mov	eax, off_62BA7018
		mov	eax, [eax]
		test	eax, eax
		jz	short locret_62BA6A88

loc_62BA6A71:				; CODE XREF: sub_62BA6A60+26j
		call	eax
		mov	eax, off_62BA7018
		lea	edx, [eax+4]
		mov	eax, [eax+4]
		mov	off_62BA7018, edx
		test	eax, eax
		jnz	short loc_62BA6A71

locret_62BA6A88:			; CODE XREF: sub_62BA6A60+Fj
		leave
		retn
sub_62BA6A60	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_62BA6A90	proc near		; CODE XREF: sub_62BA6AF0+1Dj

var_18		= dword	ptr -18h

		push	ebp
		mov	ebp, esp
		push	esi
		push	ebx
		sub	esp, 10h
		mov	ebx, ds:dword_62BA6BEC
		cmp	ebx, 0FFFFFFFFh
		jz	short loc_62BA6AD0

loc_62BA6AA3:				; CODE XREF: sub_62BA6A90+54j
		test	ebx, ebx
		jz	short loc_62BA6ABA
		lea	esi, dword_62BA6BEC[ebx*4]
		xchg	ax, ax

loc_62BA6AB0:				; CODE XREF: sub_62BA6A90+28j
		call	dword ptr [esi]
		sub	esi, 4
		sub	ebx, 1
		jnz	short loc_62BA6AB0

loc_62BA6ABA:				; CODE XREF: sub_62BA6A90+15j
		mov	[esp+18h+var_18], offset sub_62BA6A60
		call	sub_62B81030
		add	esp, 10h
		pop	ebx
		pop	esi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_62BA6AD0:				; CODE XREF: sub_62BA6A90+11j
		xor	ebx, ebx
		jmp	short loc_62BA6AD6
; ---------------------------------------------------------------------------

loc_62BA6AD4:				; CODE XREF: sub_62BA6A90+52j
		mov	ebx, eax

loc_62BA6AD6:				; CODE XREF: sub_62BA6A90+42j
		lea	eax, [ebx+1]
		mov	edx, ds:dword_62BA6BEC[eax*4]
		test	edx, edx
		jnz	short loc_62BA6AD4
		jmp	short loc_62BA6AA3
sub_62BA6A90	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_62BA6AF0	proc near		; CODE XREF: DllEntryPoint+7Dp
		push	ebp
		mov	ebp, esp
		sub	esp, 8
		mov	ecx, ds:dword_62BAB050
		test	ecx, ecx
		jz	short loc_62BA6B02
		leave
		retn
; ---------------------------------------------------------------------------

loc_62BA6B02:				; CODE XREF: sub_62BA6AF0+Ej
		mov	ds:dword_62BAB050, 1
		leave
		jmp	short sub_62BA6A90
sub_62BA6AF0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_62BA6B10	proc near		; CODE XREF: DllEntryPoint+28p
					; DllEntryPoint+91p
		push	ebp
		mov	eax, 1
		mov	ebp, esp
		pop	ebp
		retn	0Ch
sub_62BA6B10	endp

; ---------------------------------------------------------------------------
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _strdup]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _stricmp]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION __dllonexit]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION free]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION fflush]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION malloc]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _errno]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION strchr]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION strcspn]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION atoi]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION strrchr]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION strcmp]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION strerror]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION fwrite]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION vfprintf]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION abort]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION memcpy]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION GetModuleHandleA]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION GetProcAddress]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION Sleep]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION VirtualQuery]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION VirtualProtect]
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_62BA6BD0	proc near		; DATA XREF: .text:62BA6BF0o

var_18		= dword	ptr -18h

		push	ebp
		mov	ebp, esp
		sub	esp, 18h
		call	sub_62B81180
		mov	[esp+18h+var_18], offset sub_62B8120C
		call	sub_62B81030
		leave
		retn
sub_62BA6BD0	endp

; ---------------------------------------------------------------------------
		align 4
dword_62BA6BEC	dd 0FFFFFFFFh		; DATA XREF: sub_62BA6A90+8r
					; sub_62BA6A90+17o ...
		dd offset sub_62BA6BD0
		align 8
		dd 0FFFFFFFFh
dword_62BA6BFC	dd 0			; DATA XREF: .data:off_62BA7018o
		dd 100h	dup(?)
_text		ends

; Section 2. (virtual address 00027000)
; Virtual size			: 00000020 (	 32.)
; Section size in file		: 00000200 (	512.)
; Offset to raw	data for section: 00026000
; Flags	C0300040: Data Readable	Writable
; Alignment	: 4 bytes
; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read/Write
_data		segment	dword public 'DATA' use32
		assume cs:_data
		;org 62BA7000h
off_62BA7000	dd offset sub_62B81474	; DATA XREF: silc_client_init+1B0o
		dd offset sub_62B81350
		dd offset sub_62B812DC
off_62BA700C	dd offset sub_62B8EA1C	; DATA XREF: silc_client_listener_add+199o
		dd 2 dup(0)
off_62BA7018	dd offset dword_62BA6BFC ; DATA	XREF: sub_62BA6A60+6r
					; sub_62BA6A60+13r ...
dword_62BA701C	dd 0			; DATA XREF: sub_62B81180:loc_62B811BFr
					; sub_62B81180+71o
		align 1000h
_data		ends

; Section 3. (virtual address 00028000)
; Virtual size			: 00001354 (   4948.)
; Section size in file		: 00001400 (   5120.)
; Offset to raw	data for section: 00026200
; Flags	40300040: Data Readable
; Alignment	: 4 bytes
; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 62BA8000h
; CHAR ModuleName[]
ModuleName	db 'libgcc_s_dw2-1.dll',0 ; DATA XREF: sub_62B81180+6o
					; sub_62B8120C+6o
; CHAR ProcName[]
ProcName	db '__register_frame_info',0 ; DATA XREF: sub_62B81180+17o
; CHAR aLibgcj_s_dll[]
aLibgcj_s_dll	db 'libgcj_s.dll',0     ; DATA XREF: sub_62B81180+49o
; CHAR a_jv_registercl[]
a_jv_registercl	db '_Jv_RegisterClasses',0 ; DATA XREF: sub_62B81180+5Ao
; CHAR a__deregister_f[]
a__deregister_f	db '__deregister_frame_info',0 ; DATA XREF: sub_62B8120C+17o
		align 4
aAttemptingToSt	db 'Attempting to stop client library before it has been started (sil'
					; DATA XREF: silc_client_stop:loc_62B8132Co
		db 'c_client_init not called)',0
		align 10h
off_62BA80C0	dd offset loc_62B81494	; DATA XREF: sub_62B81474+16r
		dd offset loc_62B81494	; jump table for switch	statement
		dd offset loc_62B815A4
		dd offset loc_62B815A4
		dd offset loc_62B815A4
		dd offset loc_62B81494
		dd offset loc_62B81494
		dd offset loc_62B81494
		dd offset loc_62B81494
		dd offset loc_62B81494
		dd offset loc_62B81494
		dd offset loc_62B81494
		dd offset loc_62B81494
		dd offset loc_62B815A4
		dd offset loc_62B815A4
		dd offset loc_62B815A4
		dd offset loc_62B81494
		dd offset loc_62B815A4
		dd offset loc_62B81494
		dd offset loc_62B81494
		dd offset loc_62B81494
		dd offset loc_62B81494
		dd offset loc_62B81494
		dd offset loc_62B815A4
		dd offset loc_62B815A4
aUsernameAndHos	db 'Username and hostname must be given to silc_client_init',0
					; DATA XREF: silc_client_init:loc_62B818C4o
aMalformedUsern	db 'Malformed username ',27h,'%s',27h,'. Username must be UTF-8 string',0
					; DATA XREF: silc_client_init+252o
		align 4
aMalformedHostn	db 'Malformed hostname ',27h,'%s',27h,'. Hostname must be UTF-8 string',0
					; DATA XREF: silc_client_init+29Bo
		align 4
aMalformedRealn	db 'Malformed realname ',27h,'%s',27h,'. Realname must be UTF-8 string',0
					; DATA XREF: silc_client_init+28Bo
aSilc1_21_1_10S	db 'SILC-1.2-1.1.10 silc-toolkit',0
					; DATA XREF: silc_client_alloc:loc_62B81B80o
off_62BA8220	dd offset loc_62B81E5B	; DATA XREF: silc_client_connection_st_packet+2Cr
		dd offset loc_62B81E90	; jump table for switch	statement
		dd offset loc_62B81E5B
		dd offset loc_62B81E5B
		dd offset loc_62B81E5B
		dd offset loc_62B81EA4
		dd offset loc_62B81EB8
		dd offset loc_62B81ECC
		dd offset loc_62B81EE0
		dd offset loc_62B81EF8
		dd offset loc_62B81F10
		dd offset loc_62B81F28
		dd offset loc_62B81F40
		dd offset loc_62B81E5B
		dd offset loc_62B81E5B
		dd offset loc_62B81E5B
		dd offset loc_62B81F58
		dd offset loc_62B81E5B
		dd offset loc_62B81F70
		dd offset loc_62B81E5B
		dd offset loc_62B81E5B
		dd offset loc_62B81E5B
		dd offset loc_62B81F88
		dd offset loc_62B81E5B
		dd offset loc_62B81E5B
		dd offset loc_62B81FB4
		dd offset loc_62B81E5B
		dd offset loc_62B81E7C
aSha1		db 'sha1',0             ; DATA XREF: silc_client_add_connection+C7o
		align 4
aClientLibraryI	db 'Client library is not started yet. SilcClientRunning callback has'
					; DATA XREF: silc_client_key_exchange:loc_62B82A54o
					; silc_client_connect_to_client:loc_62B82B64o ...
		db ' not been called yet.',0
		align 10h
aSocketStreamDo	db 'Socket stream does not have remote host name set',0
					; DATA XREF: silc_client_key_exchange:loc_62B82A78o
		align 4
aConnectingToPo	db 'Connecting to port %d of server %s',0
					; DATA XREF: silc_client_connect_to_server+89o
		align 4
aSilcRsa	db 'silc-rsa',0         ; DATA XREF: silc_client_attributes_process+23o
		align 4
aAes256Cbc	db 'aes-256-cbc',0      ; DATA XREF: silc_client_add_channel_private_key:loc_62B837D8o
aHmacSha196	db 'hmac-sha1-96',0     ; DATA XREF: silc_client_add_channel_private_key:loc_62B837E8o
					; silc_client_save_channel_key:loc_62B84A44o
		align 10h
aCannotTalkToCh	db 'Cannot talk to channel: not joined',0
					; DATA XREF: silc_client_send_channel_message+251o
		align 4
aNoCipherAndHma	db 'No cipher and HMAC for channel',0
					; DATA XREF: silc_client_send_channel_message:loc_62B83E2Ao
		align 4
aErrorEncodingC	db 'Error encoding channel message',0
					; DATA XREF: silc_client_send_channel_message:loc_62B83E7Fo
aClient_channel	db 'client_channel.c',0 ; DATA XREF: silc_client_channel_message+1F4o
aSilc_verifySD	db 'SILC_VERIFY %s:%d',0 ; DATA XREF: silc_client_channel_message+1FCo
		align 4
aMessageFromUse	db 'Message from user not on channel, client or server bug',0
					; DATA XREF: silc_client_channel_message:loc_62B842A8o
		align 10h
aCannotTalkTo_0	db 'Cannot talk to channel: unsupported cipher %s',0
					; DATA XREF: silc_client_save_channel_key+375o
					; silc_client_save_channel_key+425o
		align 10h
aCannotTalkTo_1	db 'Cannot talk to channel: unsupported HMAC %s',0
					; DATA XREF: silc_client_save_channel_key+451o
aClient_connect	db 'client_connect.c',0 ; DATA XREF: silc_client_st_rekey+140o
					; silc_client_st_rekey+174o ...
aSilc_verifyS_0	db 'SILC_VERIFY %s:%d',0 ; DATA XREF: silc_client_st_rekey+148o
					; silc_client_st_rekey+17Co ...
		align 10h
aErrorDuringRek	db 'Error during rekey with %s: %s',0 ; DATA XREF: sub_62B85EC0+89o
aAuthentication	db 'Authentication failed',0 ; DATA XREF: sub_62B864D0+A1o
		align 4
aCouldNotConn_3	db 'Could not connect to host %s: unknown IP address',0
					; DATA XREF: sub_62B86660+135o
		align 4
aCouldNotConn_2	db 'Could not connect to host %s: unknown host name',0
					; DATA XREF: sub_62B86660+11Do
aCouldNotConn_1	db 'Could not connect to host %s: network unreachable',0
					; DATA XREF: sub_62B86660+105o
		align 10h
aCouldNotConn_0	db 'Could not connect to host %s: connection refused',0
					; DATA XREF: sub_62B86660+B9o
		align 4
aCouldNotConn_4	db 'Could not connect to host %s: connection timeout',0
					; DATA XREF: sub_62B86660+14Do
aCouldNotConnec	db 'Could not connect to host %s',0 ; DATA XREF: sub_62B86660+4Ao
		align 4
off_62BA8604	dd offset loc_62B866D4	; DATA XREF: sub_62B86660:loc_62B866F4r
		dd offset loc_62B86788	; jump table for switch	statement
		dd offset loc_62B86770
		dd offset loc_62B86758
		dd offset loc_62B8670C
		dd offset loc_62B867A0
aErrorDuringKey	db 'Error during key exchange with %s: %s',0 ; DATA XREF: sub_62B86C4C+12Do
		align 4
aErrorDuringK_0	db 'Error during key exchange with %s: cannot use keys',0
					; DATA XREF: sub_62B86C4C+161o
					; sub_62B86C4C+1DAo
		align 4
aLocalUdpIpAddr	db 'Local UDP IP address not specified',0
					; DATA XREF: silc_client_st_connect:loc_62B870C4o
		align 4
aMissingArgumen	db 'Missing arguments to silc_client_get_clients call',0
					; DATA XREF: sub_62B888C0:loc_62B88B6Co
a@_0		db '@',0                ; DATA XREF: sub_62B888C0+19Bo
aS_2		db '%s',0               ; DATA XREF: silc_client_nickname_format+58Eo
					; silc_client_update_client+D3o ...
; char Control[2]
Control		db '.',0                ; DATA XREF: silc_client_nickname_format+2AFo
; char asc_62BA86D5[2]
asc_62BA86D5	db '-',0                ; DATA XREF: silc_client_nickname_format+2CDo
aD		db '%d',0               ; DATA XREF: silc_client_nickname_format+3DAo
		align 4
aMissingArgum_0	db 'Missing arguments to silc_client_get_clients_by_id_resolve call',0
					; DATA XREF: silc_client_get_client_by_id_resolve:loc_62B8B8B4o
aClient_ftp_c	db 'client_ftp.c',0     ; DATA XREF: silc_client_ftp+2B6o
aSilc_verifyS_1	db 'SILC_VERIFY %s:%d',0 ; DATA XREF: silc_client_ftp+2BEo
byte_62BA873B	db 0			; DATA XREF: sub_62B8BE8C+AEo
					; sub_62B8C224:loc_62B8C49Co
aSS		db '%s%s',0             ; DATA XREF: sub_62B8C224+DFo
aFileSOpenFaile	db 'File `%s',27h,' open failed: %s',0 ; DATA XREF: sub_62B8C224+1FCo
		align 4
aCannotCreateLi	db 'Cannot create listener for file transfer; IP address and/or port '
					; DATA XREF: silc_client_file_receive+2EAo
		db 'not provided',0
		align 4
aCannotCreate_0	db 'Cannot create listener for file transfer: %s',0
					; DATA XREF: silc_client_file_receive+34Eo
					; silc_client_file_send+44Co
aFileS		db 'file://%s',0        ; DATA XREF: silc_client_file_send+17Bo
		align 4
aClient_keyagr_	db 'client_keyagr.c',0  ; DATA XREF: silc_client_key_agreement+1D8o
aSilc_verifyS_2	db 'SILC_VERIFY %s:%d',0 ; DATA XREF: silc_client_key_agreement+1E0o
		align 4
aCannotCreateUd	db 'Cannot create UDP listener on %s on port %d: %s',0
					; DATA XREF: silc_client_listener_add+25Ao
aCannotCreate_1	db 'Cannot create listener on %s on port %d: %s',0
					; DATA XREF: silc_client_listener_add+2CDo
aClient_notify_	db 'client_notify.c',0  ; DATA XREF: silc_client_notify_watch+2ECo
					; silc_client_notify_killed+383o ...
aSilc_verifyS_3	db 'SILC_VERIFY %s:%d',0 ; DATA XREF: silc_client_notify_watch+2F4o
					; silc_client_notify_killed+38Bo ...
		align 4
off_62BA8888	dd offset loc_62B924E8	; DATA XREF: silc_client_notify+B3r
		dd offset loc_62B924CC	; jump table for switch	statement
		dd offset loc_62B924B0
		dd offset loc_62B92494
		dd offset loc_62B92478
		dd offset loc_62B9245C
		dd offset loc_62B92440
		dd offset loc_62B92424
		dd offset loc_62B92408
		dd offset loc_62B923EC
		dd offset loc_62B923D0
		dd offset loc_62B923B4
		dd offset loc_62B92398
		dd offset loc_62B92380
		dd offset loc_62B922E5
		dd offset loc_62B922E5
		dd offset loc_62B92368
		dd offset loc_62B92350
aAes256Cbc_0	db 'aes-256-cbc',0      ; DATA XREF: silc_client_add_private_message_key_ske:loc_62B929A4o
					; silc_client_add_private_message_key:loc_62B92C60o
aHmacSha196_0	db 'hmac-sha1-96',0     ; DATA XREF: silc_client_add_private_message_key_ske:loc_62B929B0o
					; silc_client_add_private_message_key:loc_62B92C6Co
aClient_prvmsg_	db 'client_prvmsg.c',0  ; DATA XREF: silc_client_private_message_key+C4o
					; silc_client_private_message+2A8o
aSilc_verifyS_4	db 'SILC_VERIFY %s:%d',0 ; DATA XREF: silc_client_private_message_key+CCo
					; silc_client_private_message+2B0o
		align 4
aErrorEncodingP	db 'Error encoding private message',0
					; DATA XREF: silc_client_send_private_message:loc_62B93228o
		align 4
aNick		db 'NICK',0             ; DATA XREF: silc_client_st_register_complete+219o
		align 4
aUsageSilcoperU	db 'Usage: /SILCOPER <username> [-pubkey]',0
					; DATA XREF: silc_client_command_silcoper+B5o
aCommand_c	db 'command.c',0        ; DATA XREF: silc_client_command_silcoper+120o
					; silc_client_command_oper+120o ...
aSilc_verifyS_5	db 'SILC_VERIFY %s:%d',0 ; DATA XREF: silc_client_command_silcoper+128o
					; silc_client_command_oper+128o ...
		align 4
aUsageOperUsern	db 'Usage: /OPER <username> [-pubkey]',0
					; DATA XREF: silc_client_command_oper+B5o
		align 4
aYouAreNotConne	db 'You are not connected to a server, please connect to server',0
					; DATA XREF: silc_client_command_call+35Eo
; char asc_62BA89D8[]
asc_62BA89D8	db ' ',0                ; DATA XREF: silc_client_command_call+3Eo
aUsageUmodeMode	db 'Usage: /UMODE +|-<modes>',0 ; DATA XREF: silc_client_command_umode+2EFo
		align 4
off_62BA89F4	dd offset loc_62B95F38	; DATA XREF: silc_client_command_umode+B7r
		dd offset loc_62B95D43	; jump table for switch	statement
		dd offset loc_62B95D43
		dd offset loc_62B95D43
		dd offset loc_62B95D43
		dd offset loc_62B95D43
		dd offset loc_62B95D43
		dd offset loc_62B95F14
		dd offset loc_62B95D43
		dd offset loc_62B95D43
		dd offset loc_62B95D43
		dd offset loc_62B95D43
		dd offset loc_62B95D43
		dd offset loc_62B95D43
		dd offset loc_62B95D43
		dd offset loc_62B95D43
		dd offset loc_62B95D43
		dd offset loc_62B95D43
		dd offset loc_62B95D43
		dd offset loc_62B95D43
		dd offset loc_62B95D43
		dd offset loc_62B95D43
		dd offset loc_62B95D43
		dd offset loc_62B95D43
		dd offset loc_62B95F58
		dd offset loc_62B95F28
		dd offset loc_62B95D43
		dd offset loc_62B95D43
		dd offset loc_62B95D43
		dd offset loc_62B95D43
		dd offset loc_62B95F48
		dd offset loc_62B95F00
		dd offset loc_62B95EEC
		dd offset loc_62B95D43
		dd offset loc_62B95D43
		dd offset loc_62B95D43
		dd offset loc_62B95D43
		dd offset loc_62B95D43
		dd offset loc_62B95D43
		dd offset loc_62B95EC4
		dd offset loc_62B95D43
		dd offset loc_62B95ED8
		dd offset loc_62B95EB0
		dd offset loc_62B95E9C
		dd offset loc_62B95D43
		dd offset loc_62B95D43
		dd offset loc_62B95D9C
aUsageMotdServe	db 'Usage: /MOTD [<server>]',0 ; DATA XREF: silc_client_command_motd+23o
aUsageUsersChan	db 'Usage: /USERS <channel>',0 ; DATA XREF: silc_client_command_users+21o
aS		db '%s',0               ; DATA XREF: silc_client_command_users+1AAo
					; silc_client_command_leave+2D6o ...
byte_62BA8AE3	db 0			; DATA XREF: silc_client_command_users+160o
					; silc_client_command_leave+1F9o ...
a@		db '@',0                ; DATA XREF: silc_client_command_users:loc_62B964D4o
					; silc_client_command_leave:loc_62B96804o ...
aSSS		db '%s%s%s',0           ; DATA XREF: silc_client_command_users+176o
					; silc_client_command_leave+20Fo ...
aUsageLeaveChan	db 'Usage: /LEAVE <channel>',0 ; DATA XREF: silc_client_command_leave+21o
		align 4
aUsageKickChann	db 'Usage: /KICK <channel> <nickname> [<comment>]',0
					; DATA XREF: silc_client_command_kick+304o
aNoSuchClientS	db 'No such client: %s',0 ; DATA XREF: silc_client_command_kick+582o
		align 4
aUsageBanChanne	db 'Usage: /BAN <channel> [+|-[<nickname>[@<server>[!<username>[@host'
					; DATA XREF: silc_client_command_ban+34Do
		db 'name>]]]]]',0
aUsageKillNickn	db 'Usage: /KILL <nickname> [<comment>] [-pubkey]',0
					; DATA XREF: silc_client_command_kill+250o
; char Str2[]
Str2		db '-pubkey',0          ; DATA XREF: silc_client_command_kill:loc_62B979ECo
					; silc_client_command_kill:loc_62B97A1Do ...
		align 10h
aUsageInviteCha	db 'Usage: /INVITE <channel> [<nickname>[@server>][+|-[<nickname>[@<s'
					; DATA XREF: silc_client_command_invite+315o
		db 'erver>[!<username>[@hostname>]]]]]',0
aUsageCumodeCha	db 'Usage: /CUMODE <channel> +|-<modes> <nickname>[@<server>]',0
					; DATA XREF: silc_client_command_cumode+1C1o
		align 10h
aCouldNotLoadKe	db 'Could not load key pair, check your arguments',0
					; DATA XREF: silc_client_command_cumode+85Co
					; silc_client_command_cmode+AF4o ...
		align 10h
off_62BA8CA0	dd offset loc_62B98924	; DATA XREF: silc_client_command_cumode+2B3r
		dd offset loc_62B98838	; jump table for switch	statement
		dd offset loc_62B98466
		dd offset loc_62B98466
		dd offset loc_62B98466
		dd offset loc_62B9884C
		dd offset loc_62B98466
		dd offset loc_62B98466
		dd offset loc_62B98466
		dd offset loc_62B98466
		dd offset loc_62B98466
		dd offset loc_62B98466
		dd offset loc_62B98466
		dd offset loc_62B98466
		dd offset loc_62B98824
		dd offset loc_62B98466
		dd offset loc_62B98810
		dd offset loc_62B987FC
		dd offset loc_62B98466
		dd offset loc_62B98466
		dd offset loc_62B985E4
aUsageCmodeChan	db 'Usage: /CMODE <channel> +|-<modes> [{ <arguments>}]',0
					; DATA XREF: silc_client_command_cmode+3F9o
					; silc_client_command_cmode+973o
aCouldNotLoadPu	db 'Could not load public key %s, check the filename',0
					; DATA XREF: silc_client_command_cmode+8AEo
					; silc_client_command_whois+178o ...
		align 4
off_62BA8D5C	dd offset loc_62B98FA0	; DATA XREF: silc_client_command_cmode+157r
		dd offset loc_62B98CB1	; jump table for switch	statement
		dd offset loc_62B98CB1
		dd offset loc_62B98CB1
		dd offset loc_62B98CB1
		dd offset loc_62B98CB1
		dd offset loc_62B98CB1
		dd offset loc_62B98CB1
		dd offset loc_62B98CB1
		dd offset loc_62B98CB1
		dd offset loc_62B98F88
		dd offset loc_62B98CB1
		dd offset loc_62B98CB1
		dd offset loc_62B98CB1
		dd offset loc_62B98CB1
		dd offset loc_62B98CB1
		dd offset loc_62B98CB1
		dd offset loc_62B98CB1
		dd offset loc_62B98CB1
		dd offset loc_62B98CB1
		dd offset loc_62B98CB1
		dd offset loc_62B98CB1
		dd offset loc_62B98CB1
		dd offset loc_62B98CB1
		dd offset loc_62B98CB1
		dd offset loc_62B98CB1
		dd offset loc_62B98CB1
		dd offset loc_62B98CB1
		dd offset loc_62B98CB1
		dd offset loc_62B98CB1
		dd offset loc_62B98F54
		dd offset loc_62B98CB1
		dd offset loc_62B98F20
		dd offset loc_62B98CB1
		dd offset loc_62B98CB1
		dd offset loc_62B98E58
		dd offset loc_62B98CB1
		dd offset loc_62B98E24
		dd offset loc_62B98E10
		dd offset loc_62B98CB1
		dd offset loc_62B98DFC
		dd offset loc_62B98DA4
		dd offset loc_62B98D8C
		dd offset loc_62B98CB1
		dd offset loc_62B98CB1
		dd offset loc_62B98D78
		dd offset loc_62B98CB1
		dd offset loc_62B98CB1
		dd offset loc_62B98D64
		dd offset loc_62B98D50
aUsageWhowasNic	db 'Usage: /WHOWAS <nickname>[@<server>] [<count>]',0
					; DATA XREF: silc_client_command_whowas+23o
; char aCipher[]
aCipher		db '-cipher',0          ; DATA XREF: silc_client_command_join+242o
; char aHmac[]
aHmac		db '-hmac',0            ; DATA XREF: silc_client_command_join:loc_62B99C5Fo
; char aFounder[]
aFounder	db '-founder',0         ; DATA XREF: silc_client_command_join:loc_62B99C9Co
; char aAuth[]
aAuth		db '-auth',0            ; DATA XREF: silc_client_command_join:loc_62B99D18o
aUsageNickNickn	db 'Usage: /NICK <nickname>',0 ; DATA XREF: silc_client_command_nick+D1o
aYourNicknameIs	db 'Your nickname is %s on server %s',0
					; DATA XREF: silc_client_command_nick+63o
aYourNickname_0	db 'Your nickname is %s',0 ; DATA XREF: silc_client_command_nick+29Bo
; char aDetails[]
aDetails	db '-details',0         ; DATA XREF: silc_client_command_whois+65o
aSilcRsa_0	db 'silc-rsa',0         ; DATA XREF: silc_client_command_whois:loc_62B9ACD2o
aSshRsa		db 'ssh-rsa',0          ; DATA XREF: silc_client_command_whois:loc_62B9ACBAo
aX509v3SignRsa	db 'x509v3-sign-rsa',0  ; DATA XREF: silc_client_command_whois:loc_62B9ACC6o
aPgpSignRsa	db 'pgp-sign-rsa',0     ; DATA XREF: silc_client_command_whois+25Co
aUsageGetkeyNic	db 'Usage: /GETKEY <nickname or server name>',0
					; DATA XREF: silc_client_command_getkey+16Co
		align 10h
aUsageTopicChan	db 'Usage: /TOPIC <channel> [<topic>]',0
					; DATA XREF: silc_client_command_topic+26o
; char aAdd[]
aAdd		db '-add',0             ; DATA XREF: silc_client_command_watch:loc_62B9B63Co
; char aDel[]
aDel		db '-del',0             ; DATA XREF: silc_client_command_watch:loc_62B9B788o
; char Src[]
Src		db 'WHOIS',0            ; DATA XREF: silc_client_commands_register+74o
; char aWhowas[]
aWhowas		db 'WHOWAS',0           ; DATA XREF: silc_client_commands_register+EFo
; char aIdentify[]
aIdentify	db 'IDENTIFY',0         ; DATA XREF: silc_client_commands_register+16Ao
; char aNick_0[]
aNick_0		db 'NICK',0             ; DATA XREF: silc_client_commands_register+1E5o
; char aList[]
aList		db 'LIST',0             ; DATA XREF: silc_client_commands_register+260o
; char aTopic[]
aTopic		db 'TOPIC',0            ; DATA XREF: silc_client_commands_register+2C2o
; char aInvite[]
aInvite		db 'INVITE',0           ; DATA XREF: silc_client_commands_register+303o
; char aQuit[]
aQuit		db 'QUIT',0             ; DATA XREF: silc_client_commands_register+37Eo
; char aKill[]
aKill		db 'KILL',0             ; DATA XREF: silc_client_commands_register+3F9o
; char aInfo[]
aInfo		db 'INFO',0             ; DATA XREF: silc_client_commands_register+474o
; char aStats[]
aStats		db 'STATS',0            ; DATA XREF: silc_client_commands_register+4EFo
; char aPing[]
aPing		db 'PING',0             ; DATA XREF: silc_client_commands_register+56Ao
; char aOper[]
aOper		db 'OPER',0             ; DATA XREF: silc_client_commands_register+5E5o
; char aJoin[]
aJoin		db 'JOIN',0             ; DATA XREF: silc_client_commands_register+660o
; char aMotd[]
aMotd		db 'MOTD',0             ; DATA XREF: silc_client_commands_register+6DBo
; char aUmode[]
aUmode		db 'UMODE',0            ; DATA XREF: silc_client_commands_register+756o
; char aCmode[]
aCmode		db 'CMODE',0            ; DATA XREF: silc_client_commands_register+7D1o
; char aCumode[]
aCumode		db 'CUMODE',0           ; DATA XREF: silc_client_commands_register+84Co
; char aKick[]
aKick		db 'KICK',0             ; DATA XREF: silc_client_commands_register+8C7o
; char aBan[]
aBan		db 'BAN',0              ; DATA XREF: silc_client_commands_register+942o
; char aDetach[]
aDetach		db 'DETACH',0           ; DATA XREF: silc_client_commands_register+9BDo
; char aWatch[]
aWatch		db 'WATCH',0            ; DATA XREF: silc_client_commands_register+A38o
; char aSilcoper[]
aSilcoper	db 'SILCOPER',0         ; DATA XREF: silc_client_commands_register+A9Ao
; char aLeave[]
aLeave		db 'LEAVE',0            ; DATA XREF: silc_client_commands_register+AC2o
; char aUsers[]
aUsers		db 'USERS',0            ; DATA XREF: silc_client_commands_register+AEAo
; char aGetkey[]
aGetkey		db 'GETKEY',0           ; DATA XREF: silc_client_commands_register+B12o
; char aService[]
aService	db 'SERVICE',0          ; DATA XREF: silc_client_commands_register+B53o
		align 10h
aCannotGetServi	db 'Cannot get service: %s',0
					; DATA XREF: silc_client_command_reply_service+13Ao
aCannotSetWatch	db 'Cannot set watch: %s',0
					; DATA XREF: silc_client_command_reply_watch+13Eo
aCannotChangeMo	db 'Cannot change mode: %s',0
					; DATA XREF: silc_client_command_reply_oper+13Eo
					; silc_client_command_reply_silcoper+13Eo ...
aCannotKickS	db 'Cannot kick: %s',0  ; DATA XREF: silc_client_command_reply_kick+147o
aCannotKillS	db 'Cannot kill: %s',0  ; DATA XREF: silc_client_command_reply_kill+157o
aWhowasS	db 'WHOWAS: %s',0       ; DATA XREF: silc_client_command_reply_whowas+147o
aCannotGetKeyS	db 'Cannot get key: %s',0 ; DATA XREF: silc_client_command_reply_getkey+157o
		align 4
aCannotDecodePu	db 'Cannot decode public key: malformed/unsupported public key',0
					; DATA XREF: silc_client_command_reply_getkey+37Co
aCannotGetUsers	db 'Cannot get users: %s',0
					; DATA XREF: silc_client_command_reply_users+15Ao
aCommand_reply_	db 'command_reply.c',0  ; DATA XREF: silc_client_command_reply_users+43Co
					; silc_client_command_reply_users+496o	...
aSilc_verifyS_6	db 'SILC_VERIFY %s:%d',0 ; DATA XREF: silc_client_command_reply_users+444o
					; silc_client_command_reply_users+49Eo	...
aCannotSetLeave	db 'Cannot set leave: %s',0
					; DATA XREF: silc_client_command_reply_leave+157o
aCannotSetBanS	db 'Cannot set ban: %s',0 ; DATA XREF: silc_client_command_reply_ban+157o
aCannotInviteS	db 'Cannot invite: %s',0 ; DATA XREF: silc_client_command_reply_invite+157o
aCannotDetachS	db 'Cannot detach: %s',0 ; DATA XREF: silc_client_command_reply_detach+143o
aCannotGetMotdS	db 'Cannot get motd: %s',0 ; DATA XREF: silc_client_command_reply_motd+172o
aS_0		db '%s',0               ; DATA XREF: silc_client_command_reply_motd+2DAo
aCannotListChan	db 'Cannot list channels: %s',0
					; DATA XREF: silc_client_command_reply_list+17Bo
aCannotSetTopic	db 'Cannot set topic: %s',0
					; DATA XREF: silc_client_command_reply_topic+157o
aCannotJoinChan	db 'Cannot join channel: %s',0
					; DATA XREF: silc_client_command_reply_join+162o
		align 10h
aCannotJoinCh_0	db 'Cannot join channel: Unsupported HMAC `%s',27h,0
					; DATA XREF: silc_client_command_reply_join+564o
aS_1		db 's',0                ; DATA XREF: silc_client_command_reply_ping+4Ao
byte_62BA91BD	db 3 dup(0)		; DATA XREF: silc_client_command_reply_ping:loc_62BA4024o
aPingReplyFromS	db 'Ping reply from %s: %d second%s',0
					; DATA XREF: silc_client_command_reply_ping+5Eo
aCannotGetStats	db 'Cannot get stats: %s',0
					; DATA XREF: silc_client_command_reply_stats+162o
aCannotGetInfoS	db 'Cannot get info: %s',0 ; DATA XREF: silc_client_command_reply_info+147o
aCannotSetNickn	db 'Cannot set nickname: %s',0
					; DATA XREF: silc_client_command_reply_nick+163o
aIdentifyS	db 'IDENTIFY: %s',0     ; DATA XREF: silc_client_command_reply_identify+157o
aWhoisS		db 'WHOIS: %s',0        ; DATA XREF: silc_client_command_reply_whois+160o
off_62BA9238	dd offset loc_62BA5AA9	; DATA XREF: silc_client_command_reply_process+40r
		dd offset loc_62BA5D20	; jump table for switch	statement
		dd offset loc_62BA5D08
		dd offset loc_62BA5CF0
		dd offset loc_62BA5CD8
		dd offset loc_62BA5CC0
		dd offset loc_62BA5CA8
		dd offset loc_62BA5C90
		dd offset loc_62BA5C78
		dd offset loc_62BA5C60
		dd offset loc_62BA5C48
		dd offset loc_62BA5C30
		dd offset loc_62BA5C18
		dd offset loc_62BA5C00
		dd offset loc_62BA5BE8
		dd offset loc_62BA5BD0
		dd offset loc_62BA5BB8
		dd offset loc_62BA5BA0
		dd offset loc_62BA5B88
		dd offset loc_62BA5B70
		dd offset loc_62BA5B58
		dd offset loc_62BA5B40
		dd offset loc_62BA5B28
		dd offset loc_62BA5B14
		dd offset loc_62BA5B00
		dd offset loc_62BA5AEC
		dd offset loc_62BA5AD8
		dd offset loc_62BA5AC4
aMingwRuntimeFa	db 'Mingw runtime failure:',0Ah,0 ; DATA XREF: sub_62BA6780+2Co
; char Format[]
Format		db '  VirtualQuery failed for %d bytes at address %p',0
					; DATA XREF: sub_62BA67D0+C6o
		align 4
; char aUnknownPseud_0[]
aUnknownPseud_0	db '  Unknown pseudo relocation protocol version %d.',0Ah,0
					; DATA XREF: sub_62BA68B0+19Ao
		align 4
; char aUnknownPseudoR[]
aUnknownPseudoR	db '  Unknown pseudo relocation bit size %d.',0Ah,0
					; DATA XREF: sub_62BA68B0+C6o
		align 4
dword_62BA9354	dd 0			; DATA XREF: sub_62BA68B0:loc_62BA68D5o
					; sub_62BA68B0+2Ao ...
dword_62BA9358	dd 0			; DATA XREF: sub_62BA68B0+52r
dword_62BA935C	dd 0			; DATA XREF: sub_62BA68B0+5Cr
dword_62BA9360	dd 28h dup(0)		; DATA XREF: sub_62BA68B0+66o
		align 1000h
_rdata		ends

; Section 4. (virtual address 0002A000)
; Virtual size			: 00000004 (	  4.)
; Section size in file		: 00000200 (	512.)
; Offset to raw	data for section: 00027600
; Flags	40300040: Data Readable
; Alignment	: 4 bytes
; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_eh_frame	segment	dword public 'DATA' use32
		assume cs:_eh_frame
		;org 62BAA000h
dword_62BAA000	dd 80h dup(0)		; DATA XREF: sub_62B81180+36o
					; sub_62B8120C+2Eo
		align 1000h
_eh_frame	ends

; Section 5. (virtual address 0002B000)
; Virtual size			: 00000084 (	132.)
; Section size in file		: 00000000 (	  0.)
; Offset to raw	data for section: 00000000
; Flags	C0400080: Bss Readable Writable
; Alignment	: 8 bytes
; ===========================================================================

; Segment type:	Uninitialized
; Segment permissions: Read/Write
; Segment alignment 'qword' can not be represented in assembly
_bss		segment	para public 'BSS' use32
		assume cs:_bss
		;org 62BAB000h
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
; void *Memory
Memory		dd ?			; DATA XREF: .text:62B81011o
					; sub_62B81030+11o ...
		align 10h
dword_62BAB010	dd ?			; DATA XREF: .text:62B81009o
					; sub_62B81030+9o ...
		align 10h
dword_62BAB020	dd 8 dup(?)		; DATA XREF: sub_62B81180+2Eo
dword_62BAB040	dd ?			; DATA XREF: sub_62BA68B0+6r
					; sub_62BA68B0+32w
		align 10h
dword_62BAB050	dd ?			; DATA XREF: sub_62BA6AF0+6r
					; sub_62BA6AF0:loc_62BA6B02w
		align 1000h
_bss		ends

; Section 7. (virtual address 0002F000)
; Virtual size			: 000027E0 (  10208.)
; Section size in file		: 00002800 (  10240.)
; Offset to raw	data for section: 00029C00
; Flags	C0300040: Data Readable	Writable
; Alignment	: 4 bytes
; ===========================================================================

; Segment type:	Externs
; _idata


;
; Imports from libsilc-1-1-2.dll
;
		extrn __imp_silc_argument_get_arg_num:dword
					; DATA XREF: silc_argument_get_arg_numr
		extrn __imp_silc_argument_get_arg_type:dword
					; DATA XREF: silc_argument_get_arg_typer
		extrn __imp_silc_argument_get_decoded:dword
					; DATA XREF: silc_argument_get_decodedr
		extrn __imp_silc_argument_list_free:dword
					; DATA XREF: silc_argument_list_freer
		extrn __imp_silc_argument_list_parse:dword
					; DATA XREF: silc_argument_list_parser
		extrn __imp_silc_argument_list_parse_decoded:dword
					; DATA XREF: silc_argument_list_parse_decodedr
		extrn __imp_silc_argument_payload_encode_one:dword
					; DATA XREF: silc_argument_payload_encode_oner
		extrn __imp_silc_argument_payload_free:dword
					; DATA XREF: silc_argument_payload_freer
		extrn __imp_silc_asprintf:dword	; DATA XREF: silc_asprintfr
		extrn __imp_silc_async_abort:dword ; DATA XREF:	silc_async_abortr
		extrn __imp_silc_async_alloc:dword ; DATA XREF:	silc_async_allocr
		extrn __imp_silc_async_free:dword ; DATA XREF: silc_async_freer
		extrn __imp_silc_attribute_get_attribute:dword
					; DATA XREF: silc_attribute_get_attributer
		extrn __imp_silc_attribute_get_data:dword
					; DATA XREF: silc_attribute_get_datar
		extrn __imp_silc_attribute_payload_alloc:dword
					; DATA XREF: silc_attribute_payload_allocr
		extrn __imp_silc_attribute_payload_encode:dword
					; DATA XREF: silc_attribute_payload_encoder
		extrn __imp_silc_attribute_payload_encode_data:dword
					; DATA XREF: silc_attribute_payload_encode_datar
		extrn __imp_silc_attribute_payload_free:dword
					; DATA XREF: silc_attribute_payload_freer
		extrn __imp_silc_attribute_payload_list_free:dword
					; DATA XREF: silc_attribute_payload_list_freer
		extrn __imp_silc_attribute_payload_parse:dword
					; DATA XREF: silc_attribute_payload_parser
		extrn __imp_silc_auth_payload_encode:dword
					; DATA XREF: silc_auth_payload_encoder
		extrn __imp_silc_auth_public_key_auth_generate:dword
					; DATA XREF: silc_auth_public_key_auth_generater
		extrn __imp_silc_auth_public_key_auth_generate_wpub:dword
					; DATA XREF: silc_auth_public_key_auth_generate_wpubr
		extrn __imp_silc_buffer_format:dword ; DATA XREF: silc_buffer_formatr
		extrn __imp_silc_buffer_unformat:dword ; DATA XREF: silc_buffer_unformatr
		extrn __imp_silc_calloc:dword ;	DATA XREF: silc_callocr
		extrn __imp_silc_channel_key_get_cipher:dword
					; DATA XREF: silc_channel_key_get_cipherr
		extrn __imp_silc_channel_key_get_id:dword
					; DATA XREF: silc_channel_key_get_idr
		extrn __imp_silc_channel_key_get_key:dword
					; DATA XREF: silc_channel_key_get_keyr
		extrn __imp_silc_channel_key_payload_free:dword
					; DATA XREF: silc_channel_key_payload_freer
		extrn __imp_silc_channel_key_payload_parse:dword
					; DATA XREF: silc_channel_key_payload_parser
		extrn __imp_silc_channel_name_check:dword
					; DATA XREF: silc_channel_name_checkr
		extrn __imp_silc_channel_payload_list_free:dword
					; DATA XREF: silc_channel_payload_list_freer
		extrn __imp_silc_channel_payload_parse_list:dword
					; DATA XREF: silc_channel_payload_parse_listr
		extrn __imp_silc_cipher_alloc:dword ; DATA XREF: silc_cipher_allocr
		extrn __imp_silc_cipher_free:dword ; DATA XREF:	silc_cipher_freer
		extrn __imp_silc_cipher_get_name:dword ; DATA XREF: silc_cipher_get_namer
		extrn __imp_silc_cipher_is_supported:dword
					; DATA XREF: silc_cipher_is_supportedr
		extrn __imp_silc_cipher_register_default:dword
					; DATA XREF: silc_cipher_register_defaultr
		extrn __imp_silc_cipher_set_iv:dword ; DATA XREF: silc_cipher_set_ivr
		extrn __imp_silc_cipher_set_key:dword ;	DATA XREF: silc_cipher_set_keyr
		extrn __imp_silc_cipher_unregister_all:dword
					; DATA XREF: silc_cipher_unregister_allr
		extrn __imp_silc_command_get:dword ; DATA XREF:	silc_command_getr
		extrn __imp_silc_command_get_args:dword	; DATA XREF: silc_command_get_argsr
		extrn __imp_silc_command_get_ident:dword
					; DATA XREF: silc_command_get_identr
		extrn __imp_silc_command_get_status:dword
					; DATA XREF: silc_command_get_statusr
		extrn __imp_silc_command_payload_encode:dword
					; DATA XREF: silc_command_payload_encoder
		extrn __imp_silc_command_payload_encode_vap:dword
					; DATA XREF: silc_command_payload_encode_vapr
		extrn __imp_silc_command_payload_free:dword
					; DATA XREF: silc_command_payload_freer
		extrn __imp_silc_command_payload_parse:dword
					; DATA XREF: silc_command_payload_parser
		extrn __imp_silc_command_reply_payload_encode_va:dword
					; DATA XREF: silc_command_reply_payload_encode_var
		extrn __imp_silc_connauth_alloc:dword ;	DATA XREF: silc_connauth_allocr
		extrn __imp_silc_connauth_free:dword ; DATA XREF: silc_connauth_freer
		extrn __imp_silc_connauth_initiator:dword
					; DATA XREF: silc_connauth_initiatorr
		extrn __imp_silc_file_close:dword ; DATA XREF: silc_file_closer
		extrn __imp_silc_file_open:dword ; DATA	XREF: silc_file_openr
		extrn __imp_silc_file_size:dword ; DATA	XREF: silc_file_sizer
		extrn __imp_silc_file_write:dword ; DATA XREF: silc_file_writer
		extrn __imp_silc_format:dword ;	DATA XREF: silc_formatr
		extrn __imp_silc_free:dword ; DATA XREF: silc_freer
		extrn __imp_silc_fsm_continue:dword ; DATA XREF: silc_fsm_continuer
		extrn __imp_silc_fsm_continue_sync:dword
					; DATA XREF: silc_fsm_continue_syncr
		extrn __imp_silc_fsm_event_init:dword ;	DATA XREF: silc_fsm_event_initr
		extrn __imp_silc_fsm_event_signal:dword	; DATA XREF: silc_fsm_event_signalr
		extrn __imp_silc_fsm_event_wait:dword ;	DATA XREF: silc_fsm_event_waitr
		extrn __imp_silc_fsm_finish:dword ; DATA XREF: silc_fsm_finishr
		extrn __imp_silc_fsm_free:dword	; DATA XREF: silc_fsm_freer
		extrn __imp_silc_fsm_get_context:dword ; DATA XREF: silc_fsm_get_contextr
		extrn __imp_silc_fsm_get_schedule:dword	; DATA XREF: silc_fsm_get_scheduler
		extrn __imp_silc_fsm_get_state_context:dword
					; DATA XREF: silc_fsm_get_state_contextr
		extrn __imp_silc_fsm_init:dword	; DATA XREF: silc_fsm_initr
		extrn __imp_silc_fsm_is_started:dword ;	DATA XREF: silc_fsm_is_startedr
		extrn __imp_silc_fsm_next:dword	; DATA XREF: silc_fsm_nextr
		extrn __imp_silc_fsm_next_later:dword ;	DATA XREF: silc_fsm_next_laterr
		extrn __imp_silc_fsm_set_state_context:dword
					; DATA XREF: silc_fsm_set_state_contextr
		extrn __imp_silc_fsm_start:dword ; DATA	XREF: silc_fsm_startr
		extrn __imp_silc_fsm_start_sync:dword ;	DATA XREF: silc_fsm_start_syncr
		extrn __imp_silc_fsm_thread_alloc:dword	; DATA XREF: silc_fsm_thread_allocr
		extrn __imp_silc_fsm_thread_init:dword ; DATA XREF: silc_fsm_thread_initr
		extrn __imp_silc_get_mode_list:dword ; DATA XREF: silc_get_mode_listr
		extrn __imp_silc_get_status_message:dword
					; DATA XREF: silc_get_status_messager
		extrn __imp_silc_hash_alloc:dword ; DATA XREF: silc_hash_allocr
		extrn __imp_silc_hash_free:dword ; DATA	XREF: silc_hash_freer
		extrn __imp_silc_hash_len:dword	; DATA XREF: silc_hash_lenr
		extrn __imp_silc_hash_make:dword ; DATA	XREF: silc_hash_maker
		extrn silc_hash_ptr:dword ; DATA XREF: .text:loc_62BA61A4r
		extrn __imp_silc_hash_register_default:dword
					; DATA XREF: silc_hash_register_defaultr
		extrn __imp_silc_hash_table_add:dword ;	DATA XREF: silc_hash_table_addr
		extrn __imp_silc_hash_table_alloc:dword	; DATA XREF: silc_hash_table_allocr
		extrn __imp_silc_hash_table_count:dword	; DATA XREF: silc_hash_table_countr
		extrn __imp_silc_hash_table_del:dword ;	DATA XREF: silc_hash_table_delr
		extrn __imp_silc_hash_table_del_by_context:dword
					; DATA XREF: silc_hash_table_del_by_contextr
		extrn __imp_silc_hash_table_find:dword ; DATA XREF: silc_hash_table_findr
		extrn __imp_silc_hash_table_find_foreach:dword
					; DATA XREF: silc_hash_table_find_foreachr
		extrn __imp_silc_hash_table_free:dword ; DATA XREF: silc_hash_table_freer
		extrn __imp_silc_hash_table_get:dword ;	DATA XREF: silc_hash_table_getr
		extrn __imp_silc_hash_table_list:dword ; DATA XREF: silc_hash_table_listr
		extrn __imp_silc_hash_table_list_reset:dword
					; DATA XREF: silc_hash_table_list_resetr
		extrn __imp_silc_hash_unregister_all:dword
					; DATA XREF: silc_hash_unregister_allr
		extrn __imp_silc_hmac_alloc:dword ; DATA XREF: silc_hmac_allocr
		extrn __imp_silc_hmac_free:dword ; DATA	XREF: silc_hmac_freer
		extrn __imp_silc_hmac_get_hash:dword ; DATA XREF: silc_hmac_get_hashr
		extrn __imp_silc_hmac_get_key:dword ; DATA XREF: silc_hmac_get_keyr
		extrn __imp_silc_hmac_get_name:dword ; DATA XREF: silc_hmac_get_namer
		extrn __imp_silc_hmac_is_supported:dword
					; DATA XREF: silc_hmac_is_supportedr
		extrn __imp_silc_hmac_register_default:dword
					; DATA XREF: silc_hmac_register_defaultr
		extrn __imp_silc_hmac_set_key:dword ; DATA XREF: silc_hmac_set_keyr
		extrn __imp_silc_hmac_unregister_all:dword
					; DATA XREF: silc_hmac_unregister_allr
		extrn __imp_silc_id_id2str:dword ; DATA	XREF: silc_id_id2strr
		extrn __imp_silc_id_payload_encode:dword
					; DATA XREF: silc_id_payload_encoder
		extrn __imp_silc_id_payload_encode_data:dword
					; DATA XREF: silc_id_payload_encode_datar
		extrn __imp_silc_id_payload_parse_id:dword
					; DATA XREF: silc_id_payload_parse_idr
		extrn __imp_silc_id_str2id:dword ; DATA	XREF: silc_id_str2idr
		extrn __imp_silc_idcache_add:dword ; DATA XREF:	silc_idcache_addr
		extrn __imp_silc_idcache_alloc:dword ; DATA XREF: silc_idcache_allocr
		extrn __imp_silc_idcache_del_by_context:dword
					; DATA XREF: silc_idcache_del_by_contextr
		extrn __imp_silc_idcache_find_by_context:dword
					; DATA XREF: silc_idcache_find_by_contextr
		extrn __imp_silc_idcache_find_by_id_one:dword
					; DATA XREF: silc_idcache_find_by_id_oner
		extrn __imp_silc_idcache_find_by_name:dword
					; DATA XREF: silc_idcache_find_by_namer
		extrn __imp_silc_idcache_find_by_name_one:dword
					; DATA XREF: silc_idcache_find_by_name_oner
		extrn __imp_silc_idcache_free:dword ; DATA XREF: silc_idcache_freer
		extrn __imp_silc_idcache_get_all:dword ; DATA XREF: silc_idcache_get_allr
		extrn __imp_silc_idcache_update_by_context:dword
					; DATA XREF: silc_idcache_update_by_contextr
		extrn __imp_silc_identifier_check:dword	; DATA XREF: silc_identifier_checkr
		extrn __imp_silc_identifier_verify:dword
					; DATA XREF: silc_identifier_verifyr
		extrn __imp_silc_key_agreement_get_hostname:dword
					; DATA XREF: silc_key_agreement_get_hostnamer
		extrn __imp_silc_key_agreement_get_port:dword
					; DATA XREF: silc_key_agreement_get_portr
		extrn __imp_silc_key_agreement_get_protocol:dword
					; DATA XREF: silc_key_agreement_get_protocolr
		extrn __imp_silc_key_agreement_payload_encode:dword
					; DATA XREF: silc_key_agreement_payload_encoder
		extrn __imp_silc_key_agreement_payload_free:dword
					; DATA XREF: silc_key_agreement_payload_freer
		extrn __imp_silc_key_agreement_payload_parse:dword
					; DATA XREF: silc_key_agreement_payload_parser
		extrn __imp_silc_load_key_pair:dword ; DATA XREF: silc_load_key_pairr
		extrn __imp_silc_log_output:dword ; DATA XREF: silc_log_outputr
		extrn __imp_silc_malloc:dword ;	DATA XREF: silc_mallocr
		extrn __imp_silc_memdup:dword ;	DATA XREF: silc_memdupr
		extrn __imp_silc_message_get_data:dword	; DATA XREF: silc_message_get_datar
		extrn __imp_silc_message_get_flags:dword
					; DATA XREF: silc_message_get_flagsr
		extrn __imp_silc_message_payload_encode:dword
					; DATA XREF: silc_message_payload_encoder
		extrn __imp_silc_message_payload_free:dword
					; DATA XREF: silc_message_payload_freer
		extrn __imp_silc_message_payload_parse:dword
					; DATA XREF: silc_message_payload_parser
		extrn __imp_silc_mutex_alloc:dword ; DATA XREF:	silc_mutex_allocr
		extrn __imp_silc_mutex_free:dword ; DATA XREF: silc_mutex_freer
		extrn __imp_silc_mutex_lock:dword ; DATA XREF: silc_mutex_lockr
		extrn __imp_silc_mutex_unlock:dword ; DATA XREF: silc_mutex_unlockr
		extrn __imp_silc_net_close_listener:dword
					; DATA XREF: silc_net_close_listenerr
		extrn __imp_silc_net_get_local_port:dword
					; DATA XREF: silc_net_get_local_portr
		extrn __imp_silc_net_listener_get_port:dword
					; DATA XREF: silc_net_listener_get_portr
		extrn __imp_silc_net_tcp_connect:dword ; DATA XREF: silc_net_tcp_connectr
		extrn __imp_silc_net_tcp_create_listener:dword
					; DATA XREF: silc_net_tcp_create_listenerr
		extrn __imp_silc_net_udp_connect:dword ; DATA XREF: silc_net_udp_connectr
		extrn __imp_silc_notify_get_args:dword ; DATA XREF: silc_notify_get_argsr
		extrn __imp_silc_notify_get_type:dword ; DATA XREF: silc_notify_get_typer
		extrn __imp_silc_notify_payload_free:dword
					; DATA XREF: silc_notify_payload_freer
		extrn __imp_silc_notify_payload_parse:dword
					; DATA XREF: silc_notify_payload_parser
		extrn __imp_silc_packet_engine_start:dword
					; DATA XREF: silc_packet_engine_startr
		extrn __imp_silc_packet_engine_stop:dword
					; DATA XREF: silc_packet_engine_stopr
		extrn __imp_silc_packet_free:dword ; DATA XREF:	silc_packet_freer
		extrn __imp_silc_packet_get_sender:dword
					; DATA XREF: silc_packet_get_senderr
		extrn __imp_silc_packet_send:dword ; DATA XREF:	silc_packet_sendr
		extrn __imp_silc_packet_send_ext:dword ; DATA XREF: silc_packet_send_extr
		extrn __imp_silc_packet_send_va:dword ;	DATA XREF: silc_packet_send_var
		extrn __imp_silc_packet_send_va_ext:dword
					; DATA XREF: silc_packet_send_va_extr
		extrn __imp_silc_packet_set_context:dword
					; DATA XREF: silc_packet_set_contextr
		extrn __imp_silc_packet_set_ids:dword ;	DATA XREF: silc_packet_set_idsr
		extrn __imp_silc_packet_set_keys:dword ; DATA XREF: silc_packet_set_keysr
		extrn __imp_silc_packet_set_sid:dword ;	DATA XREF: silc_packet_set_sidr
		extrn __imp_silc_packet_stream_add_remote:dword
					; DATA XREF: silc_packet_stream_add_remoter
		extrn __imp_silc_packet_stream_create:dword
					; DATA XREF: silc_packet_stream_creater
		extrn __imp_silc_packet_stream_destroy:dword
					; DATA XREF: silc_packet_stream_destroyr
		extrn __imp_silc_packet_stream_get_stream:dword
					; DATA XREF: silc_packet_stream_get_streamr
		extrn __imp_silc_packet_stream_link:dword
					; DATA XREF: silc_packet_stream_linkr
		extrn __imp_silc_packet_stream_set_iv_included:dword
					; DATA XREF: silc_packet_stream_set_iv_includedr
		extrn __imp_silc_packet_stream_set_stream:dword
					; DATA XREF: silc_packet_stream_set_streamr
		extrn __imp_silc_packet_stream_wrap:dword
					; DATA XREF: silc_packet_stream_wrapr
		extrn __imp_silc_packet_wait:dword ; DATA XREF:	silc_packet_waitr
		extrn __imp_silc_packet_wait_init:dword	; DATA XREF: silc_packet_wait_initr
		extrn __imp_silc_packet_wait_uninit:dword
					; DATA XREF: silc_packet_wait_uninitr
		extrn __imp_silc_parse_command_line:dword
					; DATA XREF: silc_parse_command_liner
		extrn __imp_silc_parse_userfqdn:dword ;	DATA XREF: silc_parse_userfqdnr
		extrn __imp_silc_pkcs_get_type:dword ; DATA XREF: silc_pkcs_get_typer
		extrn __imp_silc_pkcs_load_public_key:dword
					; DATA XREF: silc_pkcs_load_public_keyr
		extrn __imp_silc_pkcs_public_key_compare:dword
					; DATA XREF: silc_pkcs_public_key_comparer
		extrn __imp_silc_pkcs_public_key_encode:dword
					; DATA XREF: silc_pkcs_public_key_encoder
		extrn __imp_silc_pkcs_public_key_free:dword
					; DATA XREF: silc_pkcs_public_key_freer
		extrn __imp_silc_pkcs_register_default:dword
					; DATA XREF: silc_pkcs_register_defaultr
		extrn __imp_silc_pkcs_sign:dword ; DATA	XREF: silc_pkcs_signr
		extrn __imp_silc_pkcs_unregister_all:dword
					; DATA XREF: silc_pkcs_unregister_allr
		extrn __imp_silc_public_key_payload_decode:dword
					; DATA XREF: silc_public_key_payload_decoder
		extrn __imp_silc_public_key_payload_encode:dword
					; DATA XREF: silc_public_key_payload_encoder
		extrn __imp_silc_realloc:dword ; DATA XREF: silc_reallocr
		extrn __imp_silc_rng_alloc:dword ; DATA	XREF: silc_rng_allocr
		extrn __imp_silc_rng_free:dword	; DATA XREF: silc_rng_freer
		extrn __imp_silc_rng_get_rn16:dword ; DATA XREF: silc_rng_get_rn16r
		extrn __imp_silc_rng_get_rn_data:dword ; DATA XREF: silc_rng_get_rn_datar
		extrn __imp_silc_rng_global_init:dword ; DATA XREF: silc_rng_global_initr
		extrn __imp_silc_rng_init:dword	; DATA XREF: silc_rng_initr
		extrn __imp_silc_rwlock_alloc:dword ; DATA XREF: silc_rwlock_allocr
		extrn __imp_silc_rwlock_free:dword ; DATA XREF:	silc_rwlock_freer
		extrn __imp_silc_rwlock_rdlock:dword ; DATA XREF: silc_rwlock_rdlockr
		extrn __imp_silc_rwlock_unlock:dword ; DATA XREF: silc_rwlock_unlockr
		extrn __imp_silc_rwlock_wrlock:dword ; DATA XREF: silc_rwlock_wrlockr
		extrn __imp_silc_schedule:dword	; DATA XREF: silc_scheduler
		extrn __imp_silc_schedule_init:dword ; DATA XREF: silc_schedule_initr
		extrn __imp_silc_schedule_one:dword ; DATA XREF: silc_schedule_oner
		extrn __imp_silc_schedule_stop:dword ; DATA XREF: silc_schedule_stopr
		extrn __imp_silc_schedule_task_add:dword
					; DATA XREF: silc_schedule_task_addr
		extrn __imp_silc_schedule_task_del_by_all:dword
					; DATA XREF: silc_schedule_task_del_by_allr
		extrn __imp_silc_schedule_task_del_by_context:dword
					; DATA XREF: silc_schedule_task_del_by_contextr
		extrn __imp_silc_schedule_uninit:dword ; DATA XREF: silc_schedule_uninitr
		extrn __imp_silc_sftp_client_shutdown:dword
					; DATA XREF: silc_sftp_client_shutdownr
		extrn __imp_silc_sftp_client_start:dword
					; DATA XREF: silc_sftp_client_startr
		extrn __imp_silc_sftp_close:dword ; DATA XREF: silc_sftp_closer
		extrn __imp_silc_sftp_fs_memory_add_file:dword
					; DATA XREF: silc_sftp_fs_memory_add_filer
		extrn __imp_silc_sftp_fs_memory_alloc:dword
					; DATA XREF: silc_sftp_fs_memory_allocr
		extrn __imp_silc_sftp_fs_memory_free:dword
					; DATA XREF: silc_sftp_fs_memory_freer
		extrn __imp_silc_sftp_open:dword ; DATA	XREF: silc_sftp_openr
		extrn __imp_silc_sftp_opendir:dword ; DATA XREF: silc_sftp_opendirr
		extrn __imp_silc_sftp_read:dword ; DATA	XREF: silc_sftp_readr
		extrn __imp_silc_sftp_readdir:dword ; DATA XREF: silc_sftp_readdirr
		extrn __imp_silc_sftp_server_set_monitor:dword
					; DATA XREF: silc_sftp_server_set_monitorr
		extrn __imp_silc_sftp_server_shutdown:dword
					; DATA XREF: silc_sftp_server_shutdownr
		extrn __imp_silc_sftp_server_start:dword
					; DATA XREF: silc_sftp_server_startr
		extrn __imp_silc_ske_alloc:dword ; DATA	XREF: silc_ske_allocr
		extrn __imp_silc_ske_free:dword	; DATA XREF: silc_ske_freer
		extrn __imp_silc_ske_free_key_material:dword
					; DATA XREF: silc_ske_free_key_materialr
		extrn __imp_silc_ske_free_rekey_material:dword
					; DATA XREF: silc_ske_free_rekey_materialr
		extrn __imp_silc_ske_get_key_material:dword
					; DATA XREF: silc_ske_get_key_materialr
		extrn __imp_silc_ske_get_security_properties:dword
					; DATA XREF: silc_ske_get_security_propertiesr
		extrn __imp_silc_ske_initiator:dword ; DATA XREF: silc_ske_initiatorr
		extrn __imp_silc_ske_map_status:dword ;	DATA XREF: silc_ske_map_statusr
		extrn __imp_silc_ske_parse_version:dword
					; DATA XREF: silc_ske_parse_versionr
		extrn __imp_silc_ske_process_key_material_data:dword
					; DATA XREF: silc_ske_process_key_material_datar
		extrn __imp_silc_ske_rekey_initiator:dword
					; DATA XREF: silc_ske_rekey_initiatorr
		extrn __imp_silc_ske_rekey_responder:dword
					; DATA XREF: silc_ske_rekey_responderr
		extrn __imp_silc_ske_responder:dword ; DATA XREF: silc_ske_responderr
		extrn __imp_silc_ske_set_callbacks:dword
					; DATA XREF: silc_ske_set_callbacksr
		extrn __imp_silc_ske_set_keys:dword ; DATA XREF: silc_ske_set_keysr
		extrn __imp_silc_snprintf:dword	; DATA XREF: silc_snprintfr
		extrn __imp_silc_socket_stream_get_info:dword
					; DATA XREF: silc_socket_stream_get_infor
		extrn __imp_silc_status_get_args:dword ; DATA XREF: silc_status_get_argsr
		extrn __imp_silc_stream_destroy:dword ;	DATA XREF: silc_stream_destroyr
		extrn __imp_silc_strncat:dword ; DATA XREF: silc_strncatr
		extrn __imp_silc_time:dword ; DATA XREF: silc_timer
		extrn __imp_silc_timezone:dword	; DATA XREF: silc_timezoner
		extrn __imp_silc_utf8_encode:dword ; DATA XREF:	silc_utf8_encoder
		extrn __imp_silc_utf8_encoded_len:dword	; DATA XREF: silc_utf8_encoded_lenr
		extrn __imp_silc_utf8_strcasecmp:dword ; DATA XREF: silc_utf8_strcasecmpr
		extrn __imp_silc_utf8_strncasecmp:dword	; DATA XREF: silc_utf8_strncasecmpr
		extrn __imp_silc_utf8_valid:dword ; DATA XREF: silc_utf8_validr

;
; Imports from KERNEL32.dll
;
; HMODULE __stdcall GetModuleHandleA(LPCSTR lpModuleName)
		extrn __imp_GetModuleHandleA:dword ; DATA XREF:	GetModuleHandleAr
; FARPROC __stdcall GetProcAddress(HMODULE hModule, LPCSTR lpProcName)
		extrn __imp_GetProcAddress:dword ; DATA	XREF: GetProcAddressr
; void __stdcall Sleep(DWORD dwMilliseconds)
		extrn __imp_Sleep:dword	; DATA XREF: Sleepr
; BOOL __stdcall VirtualProtect(LPVOID lpAddress, SIZE_T dwSize, DWORD flNewProtect, PDWORD lpflOldProtect)
		extrn __imp_VirtualProtect:dword ; DATA	XREF: VirtualProtectr
; SIZE_T __stdcall VirtualQuery(LPCVOID	lpAddress, PMEMORY_BASIC_INFORMATION lpBuffer, SIZE_T dwLength)
		extrn __imp_VirtualQuery:dword ; DATA XREF: VirtualQueryr

;
; Imports from msvcrt.dll
;
; char *__cdecl	_strdup(const char *Src)
		extrn __imp__strdup:dword ; DATA XREF: _strdupr
; int __cdecl _stricmp(const char *Str1, const char *Str2)
		extrn __imp__stricmp:dword ; DATA XREF:	_stricmpr

;
; Imports from msvcrt.dll
;
		extrn __imp___dllonexit:dword ;	DATA XREF: __dllonexitr
; int *__cdecl _errno()
		extrn __imp__errno:dword ; DATA	XREF: _errnor
		extrn _iob:dword	; DATA XREF: sub_62BA6780+9r
; void __cdecl abort()
		extrn __imp_abort:dword	; DATA XREF: abortr
; int __cdecl atoi(const char *Str)
		extrn __imp_atoi:dword	; DATA XREF: atoir
; int __cdecl fflush(FILE *File)
		extrn __imp_fflush:dword ; DATA	XREF: fflushr
; void __cdecl free(void *Memory)
		extrn __imp_free:dword	; DATA XREF: freer
; size_t __cdecl fwrite(const void *Str, size_t	Size, size_t Count, FILE *File)
		extrn __imp_fwrite:dword ; DATA	XREF: fwriter
; void *__cdecl	malloc(size_t Size)
		extrn __imp_malloc:dword ; DATA	XREF: mallocr
; void *__cdecl	memcpy(void *Dst, const	void *Src, size_t Size)
		extrn __imp_memcpy:dword ; DATA	XREF: memcpyr
; char *__cdecl	strchr(const char *Str,	int Val)
		extrn __imp_strchr:dword ; DATA	XREF: strchrr
; int __cdecl strcmp(const char	*Str1, const char *Str2)
		extrn __imp_strcmp:dword ; DATA	XREF: strcmpr
; size_t __cdecl strcspn(const char *Str, const	char *Control)
		extrn __imp_strcspn:dword ; DATA XREF: strcspnr
; char *__cdecl	strerror(int)
		extrn __imp_strerror:dword ; DATA XREF:	strerrorr
; char *__cdecl	strrchr(const char *Str, int Ch)
		extrn __imp_strrchr:dword ; DATA XREF: strrchrr
; int __cdecl vfprintf(FILE *File, const char *Format, va_list ArgList)
		extrn __imp_vfprintf:dword ; DATA XREF:	vfprintfr



		end DllEntryPoint
